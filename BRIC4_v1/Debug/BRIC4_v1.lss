
BRIC4_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00029f64  00006000  00006000  00006000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002ff64  0002ff64  0002ff64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b90  20000000  0002ff6c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030b90  2**0
                  CONTENTS
  4 .bss          000047f4  20000b90  00030afc  00030b90  2**2
                  ALLOC
  5 .stack        00002004  20005384  000352f0  00030b90  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030b90  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00030bb8  2**0
                  CONTENTS, READONLY
  8 .debug_info   000eb3d4  00000000  00000000  00030c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e92c  00000000  00000000  0011bfe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001900  00000000  00000000  0012a911  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00007a88  00000000  00000000  0012c211  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00036243  00000000  00000000  00133c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00040b2e  00000000  00000000  00169edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000ac063  00000000  00000000  001aaa0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000060a0  00000000  00000000  00256a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00033822  00000000  00000000  0025cb10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00006000 <exception_table>:
    6000:	88 73 00 20 49 9c 00 00 45 9c 00 00 45 9c 00 00     .s. I...E...E...
	...
    602c:	45 9c 00 00 00 00 00 00 00 00 00 00 45 9c 00 00     E...........E...
    603c:	45 9c 00 00 45 9c 00 00 29 9c 00 00 45 9c 00 00     E...E...)...E...
    604c:	fd 83 01 00 45 9c 00 00 45 9c 00 00 71 91 00 00     ....E...E...q...
    605c:	45 9c 00 00 25 8d 01 00 35 8d 01 00 45 8d 01 00     E...%...5...E...
    606c:	55 8d 01 00 65 8d 01 00 75 8d 01 00 45 9c 00 00     U...e...u...E...
    607c:	45 9c 00 00 45 9c 00 00 fd 8f 01 00 5d 90 01 00     E...E.......]...
	...
    6094:	bd 90 01 00 45 9c 00 00 45 9c 00 00 45 9c 00 00     ....E...E...E...
    60a4:	45 9c 00 00 45 9c 00 00 45 9c 00 00 00 00 00 00     E...E...E.......

000060b4 <__do_global_dtors_aux>:
    60b4:	b510      	push	{r4, lr}
    60b6:	4c06      	ldr	r4, [pc, #24]	; (60d0 <__do_global_dtors_aux+0x1c>)
    60b8:	7823      	ldrb	r3, [r4, #0]
    60ba:	2b00      	cmp	r3, #0
    60bc:	d107      	bne.n	60ce <__do_global_dtors_aux+0x1a>
    60be:	4b05      	ldr	r3, [pc, #20]	; (60d4 <__do_global_dtors_aux+0x20>)
    60c0:	2b00      	cmp	r3, #0
    60c2:	d002      	beq.n	60ca <__do_global_dtors_aux+0x16>
    60c4:	4804      	ldr	r0, [pc, #16]	; (60d8 <__do_global_dtors_aux+0x24>)
    60c6:	e000      	b.n	60ca <__do_global_dtors_aux+0x16>
    60c8:	bf00      	nop
    60ca:	2301      	movs	r3, #1
    60cc:	7023      	strb	r3, [r4, #0]
    60ce:	bd10      	pop	{r4, pc}
    60d0:	20000b90 	.word	0x20000b90
    60d4:	00000000 	.word	0x00000000
    60d8:	0002ff6c 	.word	0x0002ff6c

000060dc <frame_dummy>:
    60dc:	4b08      	ldr	r3, [pc, #32]	; (6100 <frame_dummy+0x24>)
    60de:	b510      	push	{r4, lr}
    60e0:	2b00      	cmp	r3, #0
    60e2:	d003      	beq.n	60ec <frame_dummy+0x10>
    60e4:	4907      	ldr	r1, [pc, #28]	; (6104 <frame_dummy+0x28>)
    60e6:	4808      	ldr	r0, [pc, #32]	; (6108 <frame_dummy+0x2c>)
    60e8:	e000      	b.n	60ec <frame_dummy+0x10>
    60ea:	bf00      	nop
    60ec:	4807      	ldr	r0, [pc, #28]	; (610c <frame_dummy+0x30>)
    60ee:	6803      	ldr	r3, [r0, #0]
    60f0:	2b00      	cmp	r3, #0
    60f2:	d100      	bne.n	60f6 <frame_dummy+0x1a>
    60f4:	bd10      	pop	{r4, pc}
    60f6:	4b06      	ldr	r3, [pc, #24]	; (6110 <frame_dummy+0x34>)
    60f8:	2b00      	cmp	r3, #0
    60fa:	d0fb      	beq.n	60f4 <frame_dummy+0x18>
    60fc:	4798      	blx	r3
    60fe:	e7f9      	b.n	60f4 <frame_dummy+0x18>
    6100:	00000000 	.word	0x00000000
    6104:	20000b94 	.word	0x20000b94
    6108:	0002ff6c 	.word	0x0002ff6c
    610c:	0002ff6c 	.word	0x0002ff6c
    6110:	00000000 	.word	0x00000000

00006114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    6114:	4770      	bx	lr
    6116:	46c0      	nop			; (mov r8, r8)

00006118 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
    6118:	2000      	movs	r0, #0
    611a:	4770      	bx	lr

0000611c <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
    611c:	1e43      	subs	r3, r0, #1
    611e:	4198      	sbcs	r0, r3
	udi_msc_b_ack_trans = true;
    6120:	2201      	movs	r2, #1
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
    6122:	4b03      	ldr	r3, [pc, #12]	; (6130 <udi_msc_trans_ack+0x14>)
    6124:	b2c0      	uxtb	r0, r0
    6126:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
    6128:	4b02      	ldr	r3, [pc, #8]	; (6134 <udi_msc_trans_ack+0x18>)
    612a:	701a      	strb	r2, [r3, #0]
}
    612c:	4770      	bx	lr
    612e:	46c0      	nop			; (mov r8, r8)
    6130:	20000ef8 	.word	0x20000ef8
    6134:	20000014 	.word	0x20000014

00006138 <udi_msc_disable>:
	udi_msc_b_trans_req = false;
    6138:	2200      	movs	r2, #0
    613a:	4b05      	ldr	r3, [pc, #20]	; (6150 <udi_msc_disable+0x18>)
{
    613c:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    613e:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    6140:	2301      	movs	r3, #1
    6142:	4a04      	ldr	r2, [pc, #16]	; (6154 <udi_msc_disable+0x1c>)
    6144:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    6146:	4a04      	ldr	r2, [pc, #16]	; (6158 <udi_msc_disable+0x20>)
    6148:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    614a:	4b04      	ldr	r3, [pc, #16]	; (615c <udi_msc_disable+0x24>)
    614c:	4798      	blx	r3
}
    614e:	bd10      	pop	{r4, pc}
    6150:	20000bc6 	.word	0x20000bc6
    6154:	20000014 	.word	0x20000014
    6158:	20000015 	.word	0x20000015
    615c:	00022edd 	.word	0x00022edd

00006160 <udi_msc_cbw_wait>:
{
    6160:	b510      	push	{r4, lr}
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    6162:	4b08      	ldr	r3, [pc, #32]	; (6184 <udi_msc_cbw_wait+0x24>)
{
    6164:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    6166:	9300      	str	r3, [sp, #0]
    6168:	4a07      	ldr	r2, [pc, #28]	; (6188 <udi_msc_cbw_wait+0x28>)
    616a:	231f      	movs	r3, #31
    616c:	2101      	movs	r1, #1
    616e:	2002      	movs	r0, #2
    6170:	4c06      	ldr	r4, [pc, #24]	; (618c <udi_msc_cbw_wait+0x2c>)
    6172:	47a0      	blx	r4
    6174:	2800      	cmp	r0, #0
    6176:	d103      	bne.n	6180 <udi_msc_cbw_wait+0x20>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    6178:	4905      	ldr	r1, [pc, #20]	; (6190 <udi_msc_cbw_wait+0x30>)
    617a:	3002      	adds	r0, #2
    617c:	4b05      	ldr	r3, [pc, #20]	; (6194 <udi_msc_cbw_wait+0x34>)
    617e:	4798      	blx	r3
}
    6180:	b002      	add	sp, #8
    6182:	bd10      	pop	{r4, pc}
    6184:	00006725 	.word	0x00006725
    6188:	20000bd0 	.word	0x20000bd0
    618c:	00008609 	.word	0x00008609
    6190:	00006161 	.word	0x00006161
    6194:	0000857d 	.word	0x0000857d

00006198 <udi_msc_csw_send>:
{
    6198:	b510      	push	{r4, lr}
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    619a:	4b08      	ldr	r3, [pc, #32]	; (61bc <udi_msc_csw_send+0x24>)
{
    619c:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    619e:	9300      	str	r3, [sp, #0]
    61a0:	4a07      	ldr	r2, [pc, #28]	; (61c0 <udi_msc_csw_send+0x28>)
    61a2:	230d      	movs	r3, #13
    61a4:	2100      	movs	r1, #0
    61a6:	2081      	movs	r0, #129	; 0x81
    61a8:	4c06      	ldr	r4, [pc, #24]	; (61c4 <udi_msc_csw_send+0x2c>)
    61aa:	47a0      	blx	r4
    61ac:	2800      	cmp	r0, #0
    61ae:	d103      	bne.n	61b8 <udi_msc_csw_send+0x20>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    61b0:	4905      	ldr	r1, [pc, #20]	; (61c8 <udi_msc_csw_send+0x30>)
    61b2:	3081      	adds	r0, #129	; 0x81
    61b4:	4b05      	ldr	r3, [pc, #20]	; (61cc <udi_msc_csw_send+0x34>)
    61b6:	4798      	blx	r3
}
    61b8:	b002      	add	sp, #8
    61ba:	bd10      	pop	{r4, pc}
    61bc:	000062c5 	.word	0x000062c5
    61c0:	20000018 	.word	0x20000018
    61c4:	00008609 	.word	0x00008609
    61c8:	00006199 	.word	0x00006199
    61cc:	0000857d 	.word	0x0000857d

000061d0 <udi_msc_sense_fail.constprop.10>:
static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
    61d0:	b570      	push	{r4, r5, r6, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    61d2:	4c0a      	ldr	r4, [pc, #40]	; (61fc <udi_msc_sense_fail.constprop.10+0x2c>)
static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
    61d4:	000d      	movs	r5, r1
    61d6:	0006      	movs	r6, r0
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    61d8:	2212      	movs	r2, #18
    61da:	2100      	movs	r1, #0
    61dc:	0020      	movs	r0, r4
    61de:	4b08      	ldr	r3, [pc, #32]	; (6200 <udi_msc_sense_fail.constprop.10+0x30>)
    61e0:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    61e2:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    61e4:	2201      	movs	r2, #1
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    61e6:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    61e8:	3be6      	subs	r3, #230	; 0xe6
    61ea:	71e3      	strb	r3, [r4, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    61ec:	4b05      	ldr	r3, [pc, #20]	; (6204 <udi_msc_sense_fail.constprop.10+0x34>)
	udi_msc_sense.sense_flag_key = sense_key;
    61ee:	70a6      	strb	r6, [r4, #2]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    61f0:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    61f2:	0a2b      	lsrs	r3, r5, #8
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    61f4:	7365      	strb	r5, [r4, #13]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    61f6:	7323      	strb	r3, [r4, #12]
}
    61f8:	bd70      	pop	{r4, r5, r6, pc}
    61fa:	46c0      	nop			; (mov r8, r8)
    61fc:	20000bf8 	.word	0x20000bf8
    6200:	00028a1d 	.word	0x00028a1d
    6204:	20000018 	.word	0x20000018

00006208 <udi_msc_cbw_invalid>:
{
    6208:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    620a:	4b06      	ldr	r3, [pc, #24]	; (6224 <udi_msc_cbw_invalid+0x1c>)
    620c:	781b      	ldrb	r3, [r3, #0]
    620e:	2b00      	cmp	r3, #0
    6210:	d006      	beq.n	6220 <udi_msc_cbw_invalid+0x18>
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    6212:	4b05      	ldr	r3, [pc, #20]	; (6228 <udi_msc_cbw_invalid+0x20>)
    6214:	2002      	movs	r0, #2
    6216:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    6218:	4904      	ldr	r1, [pc, #16]	; (622c <udi_msc_cbw_invalid+0x24>)
    621a:	2002      	movs	r0, #2
    621c:	4b04      	ldr	r3, [pc, #16]	; (6230 <udi_msc_cbw_invalid+0x28>)
    621e:	4798      	blx	r3
}
    6220:	bd10      	pop	{r4, pc}
    6222:	46c0      	nop			; (mov r8, r8)
    6224:	20000bc4 	.word	0x20000bc4
    6228:	000084b1 	.word	0x000084b1
    622c:	00006209 	.word	0x00006209
    6230:	0000857d 	.word	0x0000857d

00006234 <udi_msc_csw_invalid>:
{
    6234:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    6236:	4b06      	ldr	r3, [pc, #24]	; (6250 <udi_msc_csw_invalid+0x1c>)
    6238:	781b      	ldrb	r3, [r3, #0]
    623a:	2b00      	cmp	r3, #0
    623c:	d006      	beq.n	624c <udi_msc_csw_invalid+0x18>
	udd_ep_set_halt(UDI_MSC_EP_IN);
    623e:	4b05      	ldr	r3, [pc, #20]	; (6254 <udi_msc_csw_invalid+0x20>)
    6240:	2081      	movs	r0, #129	; 0x81
    6242:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    6244:	4904      	ldr	r1, [pc, #16]	; (6258 <udi_msc_csw_invalid+0x24>)
    6246:	2081      	movs	r0, #129	; 0x81
    6248:	4b04      	ldr	r3, [pc, #16]	; (625c <udi_msc_csw_invalid+0x28>)
    624a:	4798      	blx	r3
}
    624c:	bd10      	pop	{r4, pc}
    624e:	46c0      	nop			; (mov r8, r8)
    6250:	20000bc4 	.word	0x20000bc4
    6254:	000084b1 	.word	0x000084b1
    6258:	00006235 	.word	0x00006235
    625c:	0000857d 	.word	0x0000857d

00006260 <udi_msc_csw_process>:
{
    6260:	b530      	push	{r4, r5, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
    6262:	4c11      	ldr	r4, [pc, #68]	; (62a8 <udi_msc_csw_process+0x48>)
{
    6264:	b083      	sub	sp, #12
	if (0 != udi_msc_csw.dCSWDataResidue) {
    6266:	68a3      	ldr	r3, [r4, #8]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    6268:	4d10      	ldr	r5, [pc, #64]	; (62ac <udi_msc_csw_process+0x4c>)
	if (0 != udi_msc_csw.dCSWDataResidue) {
    626a:	2b00      	cmp	r3, #0
    626c:	d005      	beq.n	627a <udi_msc_csw_process+0x1a>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    626e:	7b2b      	ldrb	r3, [r5, #12]
    6270:	2b7f      	cmp	r3, #127	; 0x7f
    6272:	d814      	bhi.n	629e <udi_msc_csw_process+0x3e>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    6274:	2002      	movs	r0, #2
    6276:	4b0e      	ldr	r3, [pc, #56]	; (62b0 <udi_msc_csw_process+0x50>)
    6278:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    627a:	686b      	ldr	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    627c:	0022      	movs	r2, r4
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    627e:	6063      	str	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    6280:	4b0c      	ldr	r3, [pc, #48]	; (62b4 <udi_msc_csw_process+0x54>)
    6282:	2100      	movs	r1, #0
    6284:	9300      	str	r3, [sp, #0]
    6286:	2081      	movs	r0, #129	; 0x81
    6288:	230d      	movs	r3, #13
    628a:	4c0b      	ldr	r4, [pc, #44]	; (62b8 <udi_msc_csw_process+0x58>)
    628c:	47a0      	blx	r4
    628e:	2800      	cmp	r0, #0
    6290:	d103      	bne.n	629a <udi_msc_csw_process+0x3a>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    6292:	490a      	ldr	r1, [pc, #40]	; (62bc <udi_msc_csw_process+0x5c>)
    6294:	3081      	adds	r0, #129	; 0x81
    6296:	4b0a      	ldr	r3, [pc, #40]	; (62c0 <udi_msc_csw_process+0x60>)
    6298:	4798      	blx	r3
}
    629a:	b003      	add	sp, #12
    629c:	bd30      	pop	{r4, r5, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
    629e:	4b04      	ldr	r3, [pc, #16]	; (62b0 <udi_msc_csw_process+0x50>)
    62a0:	2081      	movs	r0, #129	; 0x81
    62a2:	4798      	blx	r3
    62a4:	e7e9      	b.n	627a <udi_msc_csw_process+0x1a>
    62a6:	46c0      	nop			; (mov r8, r8)
    62a8:	20000018 	.word	0x20000018
    62ac:	20000bd0 	.word	0x20000bd0
    62b0:	000084b1 	.word	0x000084b1
    62b4:	000062c5 	.word	0x000062c5
    62b8:	00008609 	.word	0x00008609
    62bc:	00006199 	.word	0x00006199
    62c0:	0000857d 	.word	0x0000857d

000062c4 <udi_msc_csw_sent>:
{
    62c4:	b510      	push	{r4, lr}
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    62c6:	4b08      	ldr	r3, [pc, #32]	; (62e8 <udi_msc_csw_sent+0x24>)
{
    62c8:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    62ca:	9300      	str	r3, [sp, #0]
    62cc:	4a07      	ldr	r2, [pc, #28]	; (62ec <udi_msc_csw_sent+0x28>)
    62ce:	231f      	movs	r3, #31
    62d0:	2101      	movs	r1, #1
    62d2:	2002      	movs	r0, #2
    62d4:	4c06      	ldr	r4, [pc, #24]	; (62f0 <udi_msc_csw_sent+0x2c>)
    62d6:	47a0      	blx	r4
    62d8:	2800      	cmp	r0, #0
    62da:	d103      	bne.n	62e4 <udi_msc_csw_sent+0x20>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    62dc:	4905      	ldr	r1, [pc, #20]	; (62f4 <udi_msc_csw_sent+0x30>)
    62de:	3002      	adds	r0, #2
    62e0:	4b05      	ldr	r3, [pc, #20]	; (62f8 <udi_msc_csw_sent+0x34>)
    62e2:	4798      	blx	r3
}
    62e4:	b002      	add	sp, #8
    62e6:	bd10      	pop	{r4, pc}
    62e8:	00006725 	.word	0x00006725
    62ec:	20000bd0 	.word	0x20000bd0
    62f0:	00008609 	.word	0x00008609
    62f4:	00006161 	.word	0x00006161
    62f8:	0000857d 	.word	0x0000857d

000062fc <udi_msc_enable>:
	udi_msc_b_trans_req = false;
    62fc:	2300      	movs	r3, #0
    62fe:	4a1a      	ldr	r2, [pc, #104]	; (6368 <udi_msc_enable+0x6c>)
{
    6300:	b5f0      	push	{r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
    6302:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
    6304:	4a19      	ldr	r2, [pc, #100]	; (636c <udi_msc_enable+0x70>)
{
    6306:	b083      	sub	sp, #12
	udi_msc_b_cbw_invalid = false;
    6308:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
    630a:	4a19      	ldr	r2, [pc, #100]	; (6370 <udi_msc_enable+0x74>)
    630c:	3301      	adds	r3, #1
    630e:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    6310:	4a18      	ldr	r2, [pc, #96]	; (6374 <udi_msc_enable+0x78>)
    6312:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
    6314:	4b18      	ldr	r3, [pc, #96]	; (6378 <udi_msc_enable+0x7c>)
    6316:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
    6318:	2800      	cmp	r0, #0
    631a:	d104      	bne.n	6326 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
    631c:	4b17      	ldr	r3, [pc, #92]	; (637c <udi_msc_enable+0x80>)
    631e:	7018      	strb	r0, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
    6320:	2000      	movs	r0, #0
}
    6322:	b003      	add	sp, #12
    6324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
    6326:	4d15      	ldr	r5, [pc, #84]	; (637c <udi_msc_enable+0x80>)
    6328:	3801      	subs	r0, #1
	if (!UDI_MSC_ENABLE_EXT())
    632a:	4b15      	ldr	r3, [pc, #84]	; (6380 <udi_msc_enable+0x84>)
	udi_msc_nb_lun--;
    632c:	7028      	strb	r0, [r5, #0]
	if (!UDI_MSC_ENABLE_EXT())
    632e:	4798      	blx	r3
    6330:	1e07      	subs	r7, r0, #0
    6332:	d0f5      	beq.n	6320 <udi_msc_enable+0x24>
    6334:	2400      	movs	r4, #0
    6336:	4e13      	ldr	r6, [pc, #76]	; (6384 <udi_msc_enable+0x88>)
		mem_unload(lun, false);
    6338:	0020      	movs	r0, r4
    633a:	2100      	movs	r1, #0
    633c:	47b0      	blx	r6
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    633e:	3401      	adds	r4, #1
    6340:	782b      	ldrb	r3, [r5, #0]
    6342:	b2e4      	uxtb	r4, r4
    6344:	42a3      	cmp	r3, r4
    6346:	d2f7      	bcs.n	6338 <udi_msc_enable+0x3c>
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    6348:	4b0f      	ldr	r3, [pc, #60]	; (6388 <udi_msc_enable+0x8c>)
    634a:	4a10      	ldr	r2, [pc, #64]	; (638c <udi_msc_enable+0x90>)
    634c:	9300      	str	r3, [sp, #0]
    634e:	2101      	movs	r1, #1
    6350:	231f      	movs	r3, #31
    6352:	2002      	movs	r0, #2
    6354:	4c0e      	ldr	r4, [pc, #56]	; (6390 <udi_msc_enable+0x94>)
    6356:	47a0      	blx	r4
    6358:	2800      	cmp	r0, #0
    635a:	d1e2      	bne.n	6322 <udi_msc_enable+0x26>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    635c:	490d      	ldr	r1, [pc, #52]	; (6394 <udi_msc_enable+0x98>)
    635e:	3002      	adds	r0, #2
    6360:	4b0d      	ldr	r3, [pc, #52]	; (6398 <udi_msc_enable+0x9c>)
    6362:	4798      	blx	r3
    6364:	0038      	movs	r0, r7
    6366:	e7dc      	b.n	6322 <udi_msc_enable+0x26>
    6368:	20000bc6 	.word	0x20000bc6
    636c:	20000bc4 	.word	0x20000bc4
    6370:	20000014 	.word	0x20000014
    6374:	20000015 	.word	0x20000015
    6378:	000182ad 	.word	0x000182ad
    637c:	20000bf4 	.word	0x20000bf4
    6380:	00022ecd 	.word	0x00022ecd
    6384:	000182e5 	.word	0x000182e5
    6388:	00006725 	.word	0x00006725
    638c:	20000bd0 	.word	0x20000bd0
    6390:	00008609 	.word	0x00008609
    6394:	00006161 	.word	0x00006161
    6398:	0000857d 	.word	0x0000857d

0000639c <udi_msc_setup>:
{
    639c:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    639e:	4921      	ldr	r1, [pc, #132]	; (6424 <udi_msc_setup+0x88>)
{
    63a0:	b082      	sub	sp, #8
	if (Udd_setup_is_in()) {
    63a2:	780a      	ldrb	r2, [r1, #0]
    63a4:	b253      	sxtb	r3, r2
    63a6:	2b00      	cmp	r3, #0
    63a8:	db28      	blt.n	63fc <udi_msc_setup+0x60>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    63aa:	2360      	movs	r3, #96	; 0x60
	return false;	// Not supported request
    63ac:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    63ae:	4013      	ands	r3, r2
    63b0:	2b20      	cmp	r3, #32
    63b2:	d001      	beq.n	63b8 <udi_msc_setup+0x1c>
}
    63b4:	b002      	add	sp, #8
    63b6:	bd10      	pop	{r4, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
    63b8:	784b      	ldrb	r3, [r1, #1]
    63ba:	2bff      	cmp	r3, #255	; 0xff
    63bc:	d1fa      	bne.n	63b4 <udi_msc_setup+0x18>
				if (0 != udd_g_ctrlreq.req.wLength)
    63be:	88cb      	ldrh	r3, [r1, #6]
    63c0:	2b00      	cmp	r3, #0
    63c2:	d1f7      	bne.n	63b4 <udi_msc_setup+0x18>
				if (0 != udd_g_ctrlreq.req.wValue)
    63c4:	884b      	ldrh	r3, [r1, #2]
    63c6:	2b00      	cmp	r3, #0
    63c8:	d1f4      	bne.n	63b4 <udi_msc_setup+0x18>
				udi_msc_b_cbw_invalid = false;
    63ca:	4b17      	ldr	r3, [pc, #92]	; (6428 <udi_msc_setup+0x8c>)
				udd_ep_abort(UDI_MSC_EP_OUT);
    63cc:	4c17      	ldr	r4, [pc, #92]	; (642c <udi_msc_setup+0x90>)
				udi_msc_b_cbw_invalid = false;
    63ce:	7018      	strb	r0, [r3, #0]
				udi_msc_b_trans_req = false;
    63d0:	4b17      	ldr	r3, [pc, #92]	; (6430 <udi_msc_setup+0x94>)
    63d2:	7018      	strb	r0, [r3, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    63d4:	3002      	adds	r0, #2
    63d6:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    63d8:	2081      	movs	r0, #129	; 0x81
    63da:	47a0      	blx	r4
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    63dc:	4b15      	ldr	r3, [pc, #84]	; (6434 <udi_msc_setup+0x98>)
    63de:	4a16      	ldr	r2, [pc, #88]	; (6438 <udi_msc_setup+0x9c>)
    63e0:	9300      	str	r3, [sp, #0]
    63e2:	2101      	movs	r1, #1
    63e4:	231f      	movs	r3, #31
    63e6:	2002      	movs	r0, #2
    63e8:	4c14      	ldr	r4, [pc, #80]	; (643c <udi_msc_setup+0xa0>)
    63ea:	47a0      	blx	r4
    63ec:	2800      	cmp	r0, #0
    63ee:	d1e1      	bne.n	63b4 <udi_msc_setup+0x18>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    63f0:	4913      	ldr	r1, [pc, #76]	; (6440 <udi_msc_setup+0xa4>)
    63f2:	3002      	adds	r0, #2
    63f4:	4b13      	ldr	r3, [pc, #76]	; (6444 <udi_msc_setup+0xa8>)
    63f6:	4798      	blx	r3
				return true;
    63f8:	2001      	movs	r0, #1
    63fa:	e7db      	b.n	63b4 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    63fc:	2360      	movs	r3, #96	; 0x60
	return false;	// Not supported request
    63fe:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    6400:	4013      	ands	r3, r2
    6402:	2b20      	cmp	r3, #32
    6404:	d1d6      	bne.n	63b4 <udi_msc_setup+0x18>
			switch (udd_g_ctrlreq.req.bRequest) {
    6406:	784b      	ldrb	r3, [r1, #1]
    6408:	2bfe      	cmp	r3, #254	; 0xfe
    640a:	d1d3      	bne.n	63b4 <udi_msc_setup+0x18>
				if (1 != udd_g_ctrlreq.req.wLength)
    640c:	88cb      	ldrh	r3, [r1, #6]
    640e:	2b01      	cmp	r3, #1
    6410:	d1d0      	bne.n	63b4 <udi_msc_setup+0x18>
				if (0 != udd_g_ctrlreq.req.wValue)
    6412:	884a      	ldrh	r2, [r1, #2]
    6414:	2a00      	cmp	r2, #0
    6416:	d1cd      	bne.n	63b4 <udi_msc_setup+0x18>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    6418:	4a0b      	ldr	r2, [pc, #44]	; (6448 <udi_msc_setup+0xac>)
				udd_g_ctrlreq.payload_size = 1;
    641a:	818b      	strh	r3, [r1, #12]
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    641c:	608a      	str	r2, [r1, #8]
				return true;
    641e:	3001      	adds	r0, #1
    6420:	e7c8      	b.n	63b4 <udi_msc_setup+0x18>
    6422:	46c0      	nop			; (mov r8, r8)
    6424:	200010e4 	.word	0x200010e4
    6428:	20000bc4 	.word	0x20000bc4
    642c:	00008155 	.word	0x00008155
    6430:	20000bc6 	.word	0x20000bc6
    6434:	00006725 	.word	0x00006725
    6438:	20000bd0 	.word	0x20000bd0
    643c:	00008609 	.word	0x00008609
    6440:	00006161 	.word	0x00006161
    6444:	0000857d 	.word	0x0000857d
    6448:	20000bf4 	.word	0x20000bf4

0000644c <udi_msc_data_sent>:
{
    644c:	b570      	push	{r4, r5, r6, lr}
    644e:	0004      	movs	r4, r0
    6450:	b082      	sub	sp, #8
    6452:	000e      	movs	r6, r1
	if (UDD_EP_TRANSFER_OK != status) {
    6454:	2800      	cmp	r0, #0
    6456:	d001      	beq.n	645c <udi_msc_data_sent+0x10>
}
    6458:	b002      	add	sp, #8
    645a:	bd70      	pop	{r4, r5, r6, pc}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    645c:	4d15      	ldr	r5, [pc, #84]	; (64b4 <udi_msc_data_sent+0x68>)
    645e:	4b16      	ldr	r3, [pc, #88]	; (64b8 <udi_msc_data_sent+0x6c>)
    6460:	0028      	movs	r0, r5
    6462:	2212      	movs	r2, #18
    6464:	2100      	movs	r1, #0
    6466:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6468:	23f0      	movs	r3, #240	; 0xf0
    646a:	702b      	strb	r3, [r5, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    646c:	3be6      	subs	r3, #230	; 0xe6
    646e:	71eb      	strb	r3, [r5, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    6470:	4d12      	ldr	r5, [pc, #72]	; (64bc <udi_msc_data_sent+0x70>)
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    6472:	68ab      	ldr	r3, [r5, #8]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    6474:	732c      	strb	r4, [r5, #12]
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    6476:	1b9e      	subs	r6, r3, r6
    6478:	60ae      	str	r6, [r5, #8]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    647a:	4c11      	ldr	r4, [pc, #68]	; (64c0 <udi_msc_data_sent+0x74>)
	if (0 != udi_msc_csw.dCSWDataResidue) {
    647c:	d005      	beq.n	648a <udi_msc_data_sent+0x3e>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    647e:	7b23      	ldrb	r3, [r4, #12]
    6480:	2b7f      	cmp	r3, #127	; 0x7f
    6482:	d813      	bhi.n	64ac <udi_msc_data_sent+0x60>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    6484:	2002      	movs	r0, #2
    6486:	4b0f      	ldr	r3, [pc, #60]	; (64c4 <udi_msc_data_sent+0x78>)
    6488:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    648a:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    648c:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    648e:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    6490:	4b0d      	ldr	r3, [pc, #52]	; (64c8 <udi_msc_data_sent+0x7c>)
    6492:	2100      	movs	r1, #0
    6494:	9300      	str	r3, [sp, #0]
    6496:	2081      	movs	r0, #129	; 0x81
    6498:	230d      	movs	r3, #13
    649a:	4c0c      	ldr	r4, [pc, #48]	; (64cc <udi_msc_data_sent+0x80>)
    649c:	47a0      	blx	r4
    649e:	2800      	cmp	r0, #0
    64a0:	d1da      	bne.n	6458 <udi_msc_data_sent+0xc>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    64a2:	490b      	ldr	r1, [pc, #44]	; (64d0 <udi_msc_data_sent+0x84>)
    64a4:	4b0b      	ldr	r3, [pc, #44]	; (64d4 <udi_msc_data_sent+0x88>)
    64a6:	3081      	adds	r0, #129	; 0x81
    64a8:	4798      	blx	r3
    64aa:	e7d5      	b.n	6458 <udi_msc_data_sent+0xc>
			udd_ep_set_halt(UDI_MSC_EP_IN);
    64ac:	4b05      	ldr	r3, [pc, #20]	; (64c4 <udi_msc_data_sent+0x78>)
    64ae:	2081      	movs	r0, #129	; 0x81
    64b0:	4798      	blx	r3
    64b2:	e7ea      	b.n	648a <udi_msc_data_sent+0x3e>
    64b4:	20000bf8 	.word	0x20000bf8
    64b8:	00028a1d 	.word	0x00028a1d
    64bc:	20000018 	.word	0x20000018
    64c0:	20000bd0 	.word	0x20000bd0
    64c4:	000084b1 	.word	0x000084b1
    64c8:	000062c5 	.word	0x000062c5
    64cc:	00008609 	.word	0x00008609
    64d0:	00006199 	.word	0x00006199
    64d4:	0000857d 	.word	0x0000857d

000064d8 <udi_msc_data_send>:
{
    64d8:	b570      	push	{r4, r5, r6, lr}
    64da:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    64dc:	491c      	ldr	r1, [pc, #112]	; (6550 <udi_msc_data_send+0x78>)
{
    64de:	b082      	sub	sp, #8
    64e0:	0002      	movs	r2, r0
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    64e2:	9100      	str	r1, [sp, #0]
    64e4:	2081      	movs	r0, #129	; 0x81
    64e6:	2101      	movs	r1, #1
    64e8:	4c1a      	ldr	r4, [pc, #104]	; (6554 <udi_msc_data_send+0x7c>)
    64ea:	47a0      	blx	r4
    64ec:	2800      	cmp	r0, #0
    64ee:	d001      	beq.n	64f4 <udi_msc_data_send+0x1c>
}
    64f0:	b002      	add	sp, #8
    64f2:	bd70      	pop	{r4, r5, r6, pc}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    64f4:	4e18      	ldr	r6, [pc, #96]	; (6558 <udi_msc_data_send+0x80>)
    64f6:	4b19      	ldr	r3, [pc, #100]	; (655c <udi_msc_data_send+0x84>)
    64f8:	0030      	movs	r0, r6
    64fa:	2212      	movs	r2, #18
    64fc:	2100      	movs	r1, #0
    64fe:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6500:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6502:	4d17      	ldr	r5, [pc, #92]	; (6560 <udi_msc_data_send+0x88>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6504:	7033      	strb	r3, [r6, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6506:	3be6      	subs	r3, #230	; 0xe6
    6508:	71f3      	strb	r3, [r6, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    650a:	3b09      	subs	r3, #9
    650c:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    650e:	3303      	adds	r3, #3
    6510:	70b3      	strb	r3, [r6, #2]
	if (0 != udi_msc_csw.dCSWDataResidue) {
    6512:	68ab      	ldr	r3, [r5, #8]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    6514:	4e13      	ldr	r6, [pc, #76]	; (6564 <udi_msc_data_send+0x8c>)
	if (0 != udi_msc_csw.dCSWDataResidue) {
    6516:	2b00      	cmp	r3, #0
    6518:	d005      	beq.n	6526 <udi_msc_data_send+0x4e>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    651a:	7b33      	ldrb	r3, [r6, #12]
    651c:	2b7f      	cmp	r3, #127	; 0x7f
    651e:	d812      	bhi.n	6546 <udi_msc_data_send+0x6e>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    6520:	2002      	movs	r0, #2
    6522:	4b11      	ldr	r3, [pc, #68]	; (6568 <udi_msc_data_send+0x90>)
    6524:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    6526:	6873      	ldr	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    6528:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    652a:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    652c:	4b0f      	ldr	r3, [pc, #60]	; (656c <udi_msc_data_send+0x94>)
    652e:	2100      	movs	r1, #0
    6530:	9300      	str	r3, [sp, #0]
    6532:	2081      	movs	r0, #129	; 0x81
    6534:	230d      	movs	r3, #13
    6536:	47a0      	blx	r4
    6538:	2800      	cmp	r0, #0
    653a:	d1d9      	bne.n	64f0 <udi_msc_data_send+0x18>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    653c:	490c      	ldr	r1, [pc, #48]	; (6570 <udi_msc_data_send+0x98>)
    653e:	4b0d      	ldr	r3, [pc, #52]	; (6574 <udi_msc_data_send+0x9c>)
    6540:	3081      	adds	r0, #129	; 0x81
    6542:	4798      	blx	r3
}
    6544:	e7d4      	b.n	64f0 <udi_msc_data_send+0x18>
			udd_ep_set_halt(UDI_MSC_EP_IN);
    6546:	4b08      	ldr	r3, [pc, #32]	; (6568 <udi_msc_data_send+0x90>)
    6548:	2081      	movs	r0, #129	; 0x81
    654a:	4798      	blx	r3
    654c:	e7eb      	b.n	6526 <udi_msc_data_send+0x4e>
    654e:	46c0      	nop			; (mov r8, r8)
    6550:	0000644d 	.word	0x0000644d
    6554:	00008609 	.word	0x00008609
    6558:	20000bf8 	.word	0x20000bf8
    655c:	00028a1d 	.word	0x00028a1d
    6560:	20000018 	.word	0x20000018
    6564:	20000bd0 	.word	0x20000bd0
    6568:	000084b1 	.word	0x000084b1
    656c:	000062c5 	.word	0x000062c5
    6570:	00006199 	.word	0x00006199
    6574:	0000857d 	.word	0x0000857d

00006578 <udi_msc_spc_mode_sense>:
{
    6578:	b5f0      	push	{r4, r5, r6, r7, lr}
    657a:	4657      	mov	r7, sl
    657c:	46de      	mov	lr, fp
    657e:	464e      	mov	r6, r9
    6580:	4645      	mov	r5, r8
    6582:	4682      	mov	sl, r0
    6584:	b5e0      	push	{r5, r6, r7, lr}
	memset(&sense, 0, sizeof(sense));
    6586:	4f5b      	ldr	r7, [pc, #364]	; (66f4 <udi_msc_spc_mode_sense+0x17c>)
    6588:	4b5b      	ldr	r3, [pc, #364]	; (66f8 <udi_msc_spc_mode_sense+0x180>)
{
    658a:	b085      	sub	sp, #20
	memset(&sense, 0, sizeof(sense));
    658c:	2214      	movs	r2, #20
    658e:	2100      	movs	r1, #0
    6590:	0038      	movs	r0, r7
    6592:	4699      	mov	r9, r3
    6594:	4798      	blx	r3
	if (b_sense10) {
    6596:	4653      	mov	r3, sl
		request_lgt = udi_msc_cbw.CDB[8];
    6598:	4c58      	ldr	r4, [pc, #352]	; (66fc <udi_msc_spc_mode_sense+0x184>)
	if (b_sense10) {
    659a:	2b00      	cmp	r3, #0
    659c:	d06a      	beq.n	6674 <udi_msc_spc_mode_sense+0xfc>
		ptr_mode = &sense.s10.sense_data;
    659e:	0039      	movs	r1, r7
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    65a0:	233f      	movs	r3, #63	; 0x3f
    65a2:	7c60      	ldrb	r0, [r4, #17]
		request_lgt = udi_msc_cbw.CDB[8];
    65a4:	7de2      	ldrb	r2, [r4, #23]
    65a6:	2614      	movs	r6, #20
		ptr_mode = &sense.s10.sense_data;
    65a8:	3108      	adds	r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    65aa:	2508      	movs	r5, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    65ac:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    65ae:	2b1c      	cmp	r3, #28
    65b0:	d069      	beq.n	6686 <udi_msc_spc_mode_sense+0x10e>
			|| (SCSI_MS_MODE_ALL == mode)) {
    65b2:	2b3f      	cmp	r3, #63	; 0x3f
    65b4:	d067      	beq.n	6686 <udi_msc_spc_mode_sense+0x10e>
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    65b6:	1c2b      	adds	r3, r5, #0
    65b8:	4295      	cmp	r5, r2
    65ba:	d900      	bls.n	65be <udi_msc_spc_mode_sense+0x46>
    65bc:	1c13      	adds	r3, r2, #0
    65be:	b2db      	uxtb	r3, r3
    65c0:	9303      	str	r3, [sp, #12]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    65c2:	7b23      	ldrb	r3, [r4, #12]
    65c4:	4e4e      	ldr	r6, [pc, #312]	; (6700 <udi_msc_spc_mode_sense+0x188>)
    65c6:	4698      	mov	r8, r3
    65c8:	3b80      	subs	r3, #128	; 0x80
    65ca:	061b      	lsls	r3, r3, #24
    65cc:	d423      	bmi.n	6616 <udi_msc_spc_mode_sense+0x9e>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    65ce:	68b3      	ldr	r3, [r6, #8]
    65d0:	469b      	mov	fp, r3
    65d2:	9b03      	ldr	r3, [sp, #12]
    65d4:	455b      	cmp	r3, fp
    65d6:	d820      	bhi.n	661a <udi_msc_spc_mode_sense+0xa2>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    65d8:	4b4a      	ldr	r3, [pc, #296]	; (6704 <udi_msc_spc_mode_sense+0x18c>)
    65da:	7b60      	ldrb	r0, [r4, #13]
    65dc:	4798      	blx	r3
    65de:	1e43      	subs	r3, r0, #1
    65e0:	4198      	sbcs	r0, r3
	if (b_sense10) {
    65e2:	4653      	mov	r3, sl
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    65e4:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    65e6:	2b00      	cmp	r3, #0
    65e8:	d100      	bne.n	65ec <udi_msc_spc_mode_sense+0x74>
    65ea:	e076      	b.n	66da <udi_msc_spc_mode_sense+0x162>
				cpu_to_be16((data_sense_lgt - 2));
    65ec:	3d02      	subs	r5, #2
    65ee:	022d      	lsls	r5, r5, #8
		sense.s10.header.mode_data_length =
    65f0:	803d      	strh	r5, [r7, #0]
		sense.s10.header.device_specific_parameter = wp;
    65f2:	70f8      	strb	r0, [r7, #3]
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    65f4:	4b44      	ldr	r3, [pc, #272]	; (6708 <udi_msc_spc_mode_sense+0x190>)
    65f6:	003a      	movs	r2, r7
    65f8:	9300      	str	r3, [sp, #0]
    65fa:	2101      	movs	r1, #1
    65fc:	9b03      	ldr	r3, [sp, #12]
    65fe:	2081      	movs	r0, #129	; 0x81
    6600:	4d42      	ldr	r5, [pc, #264]	; (670c <udi_msc_spc_mode_sense+0x194>)
    6602:	47a8      	blx	r5
    6604:	2800      	cmp	r0, #0
    6606:	d046      	beq.n	6696 <udi_msc_spc_mode_sense+0x11e>
}
    6608:	b005      	add	sp, #20
    660a:	bc3c      	pop	{r2, r3, r4, r5}
    660c:	4690      	mov	r8, r2
    660e:	4699      	mov	r9, r3
    6610:	46a2      	mov	sl, r4
    6612:	46ab      	mov	fp, r5
    6614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6616:	68b3      	ldr	r3, [r6, #8]
    6618:	469b      	mov	fp, r3
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    661a:	4d3d      	ldr	r5, [pc, #244]	; (6710 <udi_msc_spc_mode_sense+0x198>)
    661c:	2212      	movs	r2, #18
    661e:	2100      	movs	r1, #0
    6620:	0028      	movs	r0, r5
    6622:	47c8      	blx	r9
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6624:	23f0      	movs	r3, #240	; 0xf0
    6626:	702b      	strb	r3, [r5, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6628:	3be6      	subs	r3, #230	; 0xe6
    662a:	71eb      	strb	r3, [r5, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    662c:	3b09      	subs	r3, #9
    662e:	7333      	strb	r3, [r6, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    6630:	3304      	adds	r3, #4
    6632:	70ab      	strb	r3, [r5, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    6634:	331f      	adds	r3, #31
    6636:	732b      	strb	r3, [r5, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
    6638:	465b      	mov	r3, fp
    663a:	2b00      	cmp	r3, #0
    663c:	d009      	beq.n	6652 <udi_msc_spc_mode_sense+0xda>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    663e:	4643      	mov	r3, r8
    6640:	466a      	mov	r2, sp
    6642:	7313      	strb	r3, [r2, #12]
    6644:	7b13      	ldrb	r3, [r2, #12]
    6646:	b25b      	sxtb	r3, r3
    6648:	2b00      	cmp	r3, #0
    664a:	db4a      	blt.n	66e2 <udi_msc_spc_mode_sense+0x16a>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    664c:	2002      	movs	r0, #2
    664e:	4b31      	ldr	r3, [pc, #196]	; (6714 <udi_msc_spc_mode_sense+0x19c>)
    6650:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    6652:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    6654:	0032      	movs	r2, r6
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    6656:	6073      	str	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    6658:	4b2f      	ldr	r3, [pc, #188]	; (6718 <udi_msc_spc_mode_sense+0x1a0>)
    665a:	2100      	movs	r1, #0
    665c:	9300      	str	r3, [sp, #0]
    665e:	2081      	movs	r0, #129	; 0x81
    6660:	230d      	movs	r3, #13
    6662:	4c2a      	ldr	r4, [pc, #168]	; (670c <udi_msc_spc_mode_sense+0x194>)
    6664:	47a0      	blx	r4
    6666:	2800      	cmp	r0, #0
    6668:	d1ce      	bne.n	6608 <udi_msc_spc_mode_sense+0x90>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    666a:	492c      	ldr	r1, [pc, #176]	; (671c <udi_msc_spc_mode_sense+0x1a4>)
    666c:	4b2c      	ldr	r3, [pc, #176]	; (6720 <udi_msc_spc_mode_sense+0x1a8>)
    666e:	2081      	movs	r0, #129	; 0x81
    6670:	4798      	blx	r3
    6672:	e7c9      	b.n	6608 <udi_msc_spc_mode_sense+0x90>
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    6674:	233f      	movs	r3, #63	; 0x3f
    6676:	7c60      	ldrb	r0, [r4, #17]
		request_lgt = udi_msc_cbw.CDB[4];
    6678:	7ce2      	ldrb	r2, [r4, #19]
    667a:	2610      	movs	r6, #16
		ptr_mode = &sense.s6.sense_data;
    667c:	1d39      	adds	r1, r7, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    667e:	2504      	movs	r5, #4
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    6680:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    6682:	2b1c      	cmp	r3, #28
    6684:	d195      	bne.n	65b2 <udi_msc_spc_mode_sense+0x3a>
		ptr_mode->page_code =
    6686:	231c      	movs	r3, #28
    6688:	700b      	strb	r3, [r1, #0]
		ptr_mode->page_length =
    668a:	3b12      	subs	r3, #18
    668c:	704b      	strb	r3, [r1, #1]
		ptr_mode->mrie =
    668e:	3b05      	subs	r3, #5
    6690:	70cb      	strb	r3, [r1, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    6692:	0035      	movs	r5, r6
    6694:	e78f      	b.n	65b6 <udi_msc_spc_mode_sense+0x3e>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    6696:	4f1e      	ldr	r7, [pc, #120]	; (6710 <udi_msc_spc_mode_sense+0x198>)
    6698:	2212      	movs	r2, #18
    669a:	2100      	movs	r1, #0
    669c:	0038      	movs	r0, r7
    669e:	47c8      	blx	r9
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    66a0:	23f0      	movs	r3, #240	; 0xf0
    66a2:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    66a4:	3be6      	subs	r3, #230	; 0xe6
    66a6:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    66a8:	3b09      	subs	r3, #9
    66aa:	7333      	strb	r3, [r6, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    66ac:	3303      	adds	r3, #3
    66ae:	70bb      	strb	r3, [r7, #2]
	if (0 != udi_msc_csw.dCSWDataResidue) {
    66b0:	68b3      	ldr	r3, [r6, #8]
    66b2:	2b00      	cmp	r3, #0
    66b4:	d005      	beq.n	66c2 <udi_msc_spc_mode_sense+0x14a>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    66b6:	7b23      	ldrb	r3, [r4, #12]
    66b8:	2b7f      	cmp	r3, #127	; 0x7f
    66ba:	d816      	bhi.n	66ea <udi_msc_spc_mode_sense+0x172>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    66bc:	2002      	movs	r0, #2
    66be:	4b15      	ldr	r3, [pc, #84]	; (6714 <udi_msc_spc_mode_sense+0x19c>)
    66c0:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    66c2:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    66c4:	0032      	movs	r2, r6
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    66c6:	6073      	str	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    66c8:	4b13      	ldr	r3, [pc, #76]	; (6718 <udi_msc_spc_mode_sense+0x1a0>)
    66ca:	2100      	movs	r1, #0
    66cc:	9300      	str	r3, [sp, #0]
    66ce:	2081      	movs	r0, #129	; 0x81
    66d0:	230d      	movs	r3, #13
    66d2:	47a8      	blx	r5
    66d4:	2800      	cmp	r0, #0
    66d6:	d197      	bne.n	6608 <udi_msc_spc_mode_sense+0x90>
    66d8:	e7c7      	b.n	666a <udi_msc_spc_mode_sense+0xf2>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    66da:	3d01      	subs	r5, #1
    66dc:	703d      	strb	r5, [r7, #0]
		sense.s6.header.device_specific_parameter = wp;
    66de:	70b8      	strb	r0, [r7, #2]
    66e0:	e788      	b.n	65f4 <udi_msc_spc_mode_sense+0x7c>
			udd_ep_set_halt(UDI_MSC_EP_IN);
    66e2:	4b0c      	ldr	r3, [pc, #48]	; (6714 <udi_msc_spc_mode_sense+0x19c>)
    66e4:	2081      	movs	r0, #129	; 0x81
    66e6:	4798      	blx	r3
    66e8:	e7b3      	b.n	6652 <udi_msc_spc_mode_sense+0xda>
    66ea:	4b0a      	ldr	r3, [pc, #40]	; (6714 <udi_msc_spc_mode_sense+0x19c>)
    66ec:	2081      	movs	r0, #129	; 0x81
    66ee:	4798      	blx	r3
    66f0:	e7e7      	b.n	66c2 <udi_msc_spc_mode_sense+0x14a>
    66f2:	46c0      	nop			; (mov r8, r8)
    66f4:	20000bac 	.word	0x20000bac
    66f8:	00028a1d 	.word	0x00028a1d
    66fc:	20000bd0 	.word	0x20000bd0
    6700:	20000018 	.word	0x20000018
    6704:	000182fd 	.word	0x000182fd
    6708:	0000644d 	.word	0x0000644d
    670c:	00008609 	.word	0x00008609
    6710:	20000bf8 	.word	0x20000bf8
    6714:	000084b1 	.word	0x000084b1
    6718:	000062c5 	.word	0x000062c5
    671c:	00006199 	.word	0x00006199
    6720:	0000857d 	.word	0x0000857d

00006724 <udi_msc_cbw_received>:
{
    6724:	b5f0      	push	{r4, r5, r6, r7, lr}
    6726:	46ce      	mov	lr, r9
    6728:	4647      	mov	r7, r8
    672a:	b580      	push	{r7, lr}
    672c:	b085      	sub	sp, #20
	if (UDD_EP_TRANSFER_OK != status) {
    672e:	2800      	cmp	r0, #0
    6730:	d10e      	bne.n	6750 <udi_msc_cbw_received+0x2c>
	if ((sizeof(udi_msc_cbw) != nb_received)
    6732:	291f      	cmp	r1, #31
    6734:	d011      	beq.n	675a <udi_msc_cbw_received+0x36>
		udi_msc_b_cbw_invalid = true;
    6736:	2301      	movs	r3, #1
    6738:	4cd1      	ldr	r4, [pc, #836]	; (6a80 <udi_msc_cbw_received+0x35c>)
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    673a:	2002      	movs	r0, #2
    673c:	4ed1      	ldr	r6, [pc, #836]	; (6a84 <udi_msc_cbw_received+0x360>)
		udi_msc_b_cbw_invalid = true;
    673e:	7023      	strb	r3, [r4, #0]
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    6740:	47b0      	blx	r6
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    6742:	49d1      	ldr	r1, [pc, #836]	; (6a88 <udi_msc_cbw_received+0x364>)
    6744:	2002      	movs	r0, #2
    6746:	4dd1      	ldr	r5, [pc, #836]	; (6a8c <udi_msc_cbw_received+0x368>)
    6748:	47a8      	blx	r5
	if (!udi_msc_b_cbw_invalid)
    674a:	7823      	ldrb	r3, [r4, #0]
    674c:	2b00      	cmp	r3, #0
    674e:	d11d      	bne.n	678c <udi_msc_cbw_received+0x68>
}
    6750:	b005      	add	sp, #20
    6752:	bc0c      	pop	{r2, r3}
    6754:	4690      	mov	r8, r2
    6756:	4699      	mov	r9, r3
    6758:	bdf0      	pop	{r4, r5, r6, r7, pc}
			|| (udi_msc_cbw.dCBWSignature !=
    675a:	4ccd      	ldr	r4, [pc, #820]	; (6a90 <udi_msc_cbw_received+0x36c>)
    675c:	4bcd      	ldr	r3, [pc, #820]	; (6a94 <udi_msc_cbw_received+0x370>)
    675e:	6822      	ldr	r2, [r4, #0]
    6760:	429a      	cmp	r2, r3
    6762:	d1e8      	bne.n	6736 <udi_msc_cbw_received+0x12>
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    6764:	230f      	movs	r3, #15
    6766:	7b60      	ldrb	r0, [r4, #13]
    6768:	4018      	ands	r0, r3
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    676a:	4bcb      	ldr	r3, [pc, #812]	; (6a98 <udi_msc_cbw_received+0x374>)
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    676c:	7360      	strb	r0, [r4, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    676e:	781b      	ldrb	r3, [r3, #0]
    6770:	4283      	cmp	r3, r0
    6772:	d200      	bcs.n	6776 <udi_msc_cbw_received+0x52>
    6774:	e137      	b.n	69e6 <udi_msc_cbw_received+0x2c2>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    6776:	68a6      	ldr	r6, [r4, #8]
	udi_msc_csw.dCSWDataResidue =
    6778:	4dc8      	ldr	r5, [pc, #800]	; (6a9c <udi_msc_cbw_received+0x378>)
    677a:	60ae      	str	r6, [r5, #8]
	switch (udi_msc_cbw.CDB[0]) {
    677c:	7be3      	ldrb	r3, [r4, #15]
    677e:	2b5a      	cmp	r3, #90	; 0x5a
    6780:	d900      	bls.n	6784 <udi_msc_cbw_received+0x60>
    6782:	e11f      	b.n	69c4 <udi_msc_cbw_received+0x2a0>
    6784:	4ac6      	ldr	r2, [pc, #792]	; (6aa0 <udi_msc_cbw_received+0x37c>)
    6786:	009b      	lsls	r3, r3, #2
    6788:	58d3      	ldr	r3, [r2, r3]
    678a:	469f      	mov	pc, r3
	udd_ep_set_halt(UDI_MSC_EP_IN);
    678c:	2081      	movs	r0, #129	; 0x81
    678e:	47b0      	blx	r6
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    6790:	49c4      	ldr	r1, [pc, #784]	; (6aa4 <udi_msc_cbw_received+0x380>)
    6792:	2081      	movs	r0, #129	; 0x81
    6794:	47a8      	blx	r5
    6796:	e7db      	b.n	6750 <udi_msc_cbw_received+0x2c>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    6798:	7ce3      	ldrb	r3, [r4, #19]
	if (loej) {
    679a:	079a      	lsls	r2, r3, #30
    679c:	d504      	bpl.n	67a8 <udi_msc_cbw_received+0x84>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    679e:	2101      	movs	r1, #1
    67a0:	4399      	bics	r1, r3
    67a2:	4bc1      	ldr	r3, [pc, #772]	; (6aa8 <udi_msc_cbw_received+0x384>)
    67a4:	4798      	blx	r3
    67a6:	68ae      	ldr	r6, [r5, #8]
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    67a8:	4fc0      	ldr	r7, [pc, #768]	; (6aac <udi_msc_cbw_received+0x388>)
    67aa:	4bc1      	ldr	r3, [pc, #772]	; (6ab0 <udi_msc_cbw_received+0x38c>)
    67ac:	2212      	movs	r2, #18
    67ae:	2100      	movs	r1, #0
    67b0:	0038      	movs	r0, r7
    67b2:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    67b4:	23f0      	movs	r3, #240	; 0xf0
    67b6:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    67b8:	3be6      	subs	r3, #230	; 0xe6
    67ba:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    67bc:	2300      	movs	r3, #0
    67be:	732b      	strb	r3, [r5, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
    67c0:	2e00      	cmp	r6, #0
    67c2:	d006      	beq.n	67d2 <udi_msc_cbw_received+0xae>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    67c4:	7b23      	ldrb	r3, [r4, #12]
    67c6:	2b7f      	cmp	r3, #127	; 0x7f
    67c8:	d900      	bls.n	67cc <udi_msc_cbw_received+0xa8>
    67ca:	e0e2      	b.n	6992 <udi_msc_cbw_received+0x26e>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    67cc:	2002      	movs	r0, #2
    67ce:	4bad      	ldr	r3, [pc, #692]	; (6a84 <udi_msc_cbw_received+0x360>)
    67d0:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    67d2:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    67d4:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    67d6:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    67d8:	4bb6      	ldr	r3, [pc, #728]	; (6ab4 <udi_msc_cbw_received+0x390>)
    67da:	2100      	movs	r1, #0
    67dc:	9300      	str	r3, [sp, #0]
    67de:	2081      	movs	r0, #129	; 0x81
    67e0:	230d      	movs	r3, #13
    67e2:	4cb5      	ldr	r4, [pc, #724]	; (6ab8 <udi_msc_cbw_received+0x394>)
    67e4:	47a0      	blx	r4
    67e6:	2800      	cmp	r0, #0
    67e8:	d1b2      	bne.n	6750 <udi_msc_cbw_received+0x2c>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    67ea:	49b4      	ldr	r1, [pc, #720]	; (6abc <udi_msc_cbw_received+0x398>)
    67ec:	4ba7      	ldr	r3, [pc, #668]	; (6a8c <udi_msc_cbw_received+0x368>)
    67ee:	2081      	movs	r0, #129	; 0x81
    67f0:	4798      	blx	r3
    67f2:	e7ad      	b.n	6750 <udi_msc_cbw_received+0x2c>
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    67f4:	4bb2      	ldr	r3, [pc, #712]	; (6ac0 <udi_msc_cbw_received+0x39c>)
    67f6:	4798      	blx	r3
    67f8:	2800      	cmp	r0, #0
    67fa:	d000      	beq.n	67fe <udi_msc_cbw_received+0xda>
    67fc:	e186      	b.n	6b0c <udi_msc_cbw_received+0x3e8>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    67fe:	7c62      	ldrb	r2, [r4, #17]
    6800:	4bb0      	ldr	r3, [pc, #704]	; (6ac4 <udi_msc_cbw_received+0x3a0>)
    6802:	70da      	strb	r2, [r3, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    6804:	7ca2      	ldrb	r2, [r4, #18]
    6806:	709a      	strb	r2, [r3, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    6808:	7ce2      	ldrb	r2, [r4, #19]
    680a:	705a      	strb	r2, [r3, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    680c:	7d22      	ldrb	r2, [r4, #20]
    680e:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    6810:	7da2      	ldrb	r2, [r4, #22]
    6812:	4bad      	ldr	r3, [pc, #692]	; (6ac8 <udi_msc_cbw_received+0x3a4>)
    6814:	705a      	strb	r2, [r3, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    6816:	7de2      	ldrb	r2, [r4, #23]
    6818:	701a      	strb	r2, [r3, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    681a:	881b      	ldrh	r3, [r3, #0]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    681c:	7b22      	ldrb	r2, [r4, #12]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    681e:	025b      	lsls	r3, r3, #9
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    6820:	2a7f      	cmp	r2, #127	; 0x7f
    6822:	d900      	bls.n	6826 <udi_msc_cbw_received+0x102>
    6824:	e20b      	b.n	6c3e <udi_msc_cbw_received+0x51a>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    6826:	68ae      	ldr	r6, [r5, #8]
    6828:	42b3      	cmp	r3, r6
    682a:	d800      	bhi.n	682e <udi_msc_cbw_received+0x10a>
    682c:	e120      	b.n	6a70 <udi_msc_cbw_received+0x34c>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    682e:	4f9f      	ldr	r7, [pc, #636]	; (6aac <udi_msc_cbw_received+0x388>)
    6830:	4b9f      	ldr	r3, [pc, #636]	; (6ab0 <udi_msc_cbw_received+0x38c>)
    6832:	2212      	movs	r2, #18
    6834:	2100      	movs	r1, #0
    6836:	0038      	movs	r0, r7
    6838:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    683a:	23f0      	movs	r3, #240	; 0xf0
    683c:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    683e:	3be6      	subs	r3, #230	; 0xe6
    6840:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6842:	3b09      	subs	r3, #9
    6844:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    6846:	3304      	adds	r3, #4
    6848:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    684a:	331f      	adds	r3, #31
    684c:	733b      	strb	r3, [r7, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
    684e:	2e00      	cmp	r6, #0
    6850:	d1bc      	bne.n	67cc <udi_msc_cbw_received+0xa8>
    6852:	e7be      	b.n	67d2 <udi_msc_cbw_received+0xae>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    6854:	7c62      	ldrb	r2, [r4, #17]
    6856:	4b9b      	ldr	r3, [pc, #620]	; (6ac4 <udi_msc_cbw_received+0x3a0>)
    6858:	70da      	strb	r2, [r3, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    685a:	7ca2      	ldrb	r2, [r4, #18]
    685c:	709a      	strb	r2, [r3, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    685e:	7ce2      	ldrb	r2, [r4, #19]
    6860:	705a      	strb	r2, [r3, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    6862:	7d22      	ldrb	r2, [r4, #20]
    6864:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    6866:	7da2      	ldrb	r2, [r4, #22]
    6868:	4b97      	ldr	r3, [pc, #604]	; (6ac8 <udi_msc_cbw_received+0x3a4>)
    686a:	705a      	strb	r2, [r3, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    686c:	7de2      	ldrb	r2, [r4, #23]
    686e:	701a      	strb	r2, [r3, #0]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    6870:	7b22      	ldrb	r2, [r4, #12]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    6872:	881b      	ldrh	r3, [r3, #0]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    6874:	4690      	mov	r8, r2
    6876:	3a80      	subs	r2, #128	; 0x80
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    6878:	025b      	lsls	r3, r3, #9
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    687a:	0612      	lsls	r2, r2, #24
    687c:	d500      	bpl.n	6880 <udi_msc_cbw_received+0x15c>
    687e:	e0c8      	b.n	6a12 <udi_msc_cbw_received+0x2ee>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    6880:	429e      	cmp	r6, r3
    6882:	d200      	bcs.n	6886 <udi_msc_cbw_received+0x162>
    6884:	e0c5      	b.n	6a12 <udi_msc_cbw_received+0x2ee>
	udi_msc_b_read = b_read;
    6886:	2301      	movs	r3, #1
    6888:	4a90      	ldr	r2, [pc, #576]	; (6acc <udi_msc_cbw_received+0x3a8>)
    688a:	7013      	strb	r3, [r2, #0]
	udi_msc_b_trans_req = true;
    688c:	4a90      	ldr	r2, [pc, #576]	; (6ad0 <udi_msc_cbw_received+0x3ac>)
    688e:	7013      	strb	r3, [r2, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
    6890:	4b90      	ldr	r3, [pc, #576]	; (6ad4 <udi_msc_cbw_received+0x3b0>)
    6892:	4798      	blx	r3
    6894:	e75c      	b.n	6750 <udi_msc_cbw_received+0x2c>
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    6896:	7b23      	ldrb	r3, [r4, #12]
    6898:	4698      	mov	r8, r3
    689a:	3b80      	subs	r3, #128	; 0x80
    689c:	061b      	lsls	r3, r3, #24
    689e:	d500      	bpl.n	68a2 <udi_msc_cbw_received+0x17e>
    68a0:	e0b7      	b.n	6a12 <udi_msc_cbw_received+0x2ee>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    68a2:	2e07      	cmp	r6, #7
    68a4:	d800      	bhi.n	68a8 <udi_msc_cbw_received+0x184>
    68a6:	e0b4      	b.n	6a12 <udi_msc_cbw_received+0x2ee>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    68a8:	4c8b      	ldr	r4, [pc, #556]	; (6ad8 <udi_msc_cbw_received+0x3b4>)
    68aa:	4b8c      	ldr	r3, [pc, #560]	; (6adc <udi_msc_cbw_received+0x3b8>)
    68ac:	0021      	movs	r1, r4
    68ae:	4798      	blx	r3
    68b0:	2802      	cmp	r0, #2
    68b2:	d100      	bne.n	68b6 <udi_msc_cbw_received+0x192>
    68b4:	e1eb      	b.n	6c8e <udi_msc_cbw_received+0x56a>
    68b6:	2803      	cmp	r0, #3
    68b8:	d100      	bne.n	68bc <udi_msc_cbw_received+0x198>
    68ba:	e1e0      	b.n	6c7e <udi_msc_cbw_received+0x55a>
    68bc:	2800      	cmp	r0, #0
    68be:	d100      	bne.n	68c2 <udi_msc_cbw_received+0x19e>
    68c0:	e1d2      	b.n	6c68 <udi_msc_cbw_received+0x544>
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    68c2:	2100      	movs	r1, #0
    68c4:	2004      	movs	r0, #4
    68c6:	4b86      	ldr	r3, [pc, #536]	; (6ae0 <udi_msc_cbw_received+0x3bc>)
    68c8:	4798      	blx	r3
		udi_msc_csw_process();
    68ca:	4b86      	ldr	r3, [pc, #536]	; (6ae4 <udi_msc_cbw_received+0x3c0>)
    68cc:	4798      	blx	r3
    68ce:	e73f      	b.n	6750 <udi_msc_cbw_received+0x2c>
	if (0 == prevent) {
    68d0:	7ce7      	ldrb	r7, [r4, #19]
    68d2:	2f00      	cmp	r7, #0
    68d4:	d100      	bne.n	68d8 <udi_msc_cbw_received+0x1b4>
    68d6:	e0b1      	b.n	6a3c <udi_msc_cbw_received+0x318>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    68d8:	4f74      	ldr	r7, [pc, #464]	; (6aac <udi_msc_cbw_received+0x388>)
    68da:	4b75      	ldr	r3, [pc, #468]	; (6ab0 <udi_msc_cbw_received+0x38c>)
    68dc:	2212      	movs	r2, #18
    68de:	2100      	movs	r1, #0
    68e0:	0038      	movs	r0, r7
    68e2:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    68e4:	23f0      	movs	r3, #240	; 0xf0
    68e6:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    68e8:	3be6      	subs	r3, #230	; 0xe6
    68ea:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    68ec:	3b09      	subs	r3, #9
    68ee:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    68f0:	3304      	adds	r3, #4
    68f2:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    68f4:	331f      	adds	r3, #31
    68f6:	733b      	strb	r3, [r7, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
    68f8:	2e00      	cmp	r6, #0
    68fa:	d000      	beq.n	68fe <udi_msc_cbw_received+0x1da>
    68fc:	e762      	b.n	67c4 <udi_msc_cbw_received+0xa0>
    68fe:	e768      	b.n	67d2 <udi_msc_cbw_received+0xae>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    6900:	4b79      	ldr	r3, [pc, #484]	; (6ae8 <udi_msc_cbw_received+0x3c4>)
    6902:	4798      	blx	r3
    6904:	0006      	movs	r6, r0
    6906:	2802      	cmp	r0, #2
    6908:	d100      	bne.n	690c <udi_msc_cbw_received+0x1e8>
    690a:	e0f9      	b.n	6b00 <udi_msc_cbw_received+0x3dc>
    690c:	2803      	cmp	r0, #3
    690e:	d100      	bne.n	6912 <udi_msc_cbw_received+0x1ee>
    6910:	e0f0      	b.n	6af4 <udi_msc_cbw_received+0x3d0>
    6912:	2800      	cmp	r0, #0
    6914:	d100      	bne.n	6918 <udi_msc_cbw_received+0x1f4>
    6916:	e09f      	b.n	6a58 <udi_msc_cbw_received+0x334>
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    6918:	2100      	movs	r1, #0
    691a:	2004      	movs	r0, #4
    691c:	4b70      	ldr	r3, [pc, #448]	; (6ae0 <udi_msc_cbw_received+0x3bc>)
    691e:	4798      	blx	r3
	if (0 != udi_msc_csw.dCSWDataResidue) {
    6920:	68ab      	ldr	r3, [r5, #8]
    6922:	2b00      	cmp	r3, #0
    6924:	d000      	beq.n	6928 <udi_msc_cbw_received+0x204>
    6926:	e74d      	b.n	67c4 <udi_msc_cbw_received+0xa0>
    6928:	e753      	b.n	67d2 <udi_msc_cbw_received+0xae>
		udi_msc_spc_mode_sense(true);
    692a:	2001      	movs	r0, #1
    692c:	4b6f      	ldr	r3, [pc, #444]	; (6aec <udi_msc_cbw_received+0x3c8>)
    692e:	4798      	blx	r3
    6930:	e70e      	b.n	6750 <udi_msc_cbw_received+0x2c>
	length = udi_msc_cbw.CDB[4];
    6932:	7ce3      	ldrb	r3, [r4, #19]
    6934:	1c1f      	adds	r7, r3, #0
    6936:	2b24      	cmp	r3, #36	; 0x24
    6938:	d900      	bls.n	693c <udi_msc_cbw_received+0x218>
    693a:	2724      	movs	r7, #36	; 0x24
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    693c:	7b23      	ldrb	r3, [r4, #12]
    693e:	b2ff      	uxtb	r7, r7
    6940:	4699      	mov	r9, r3
    6942:	3b80      	subs	r3, #128	; 0x80
    6944:	061b      	lsls	r3, r3, #24
    6946:	d409      	bmi.n	695c <udi_msc_cbw_received+0x238>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    6948:	42be      	cmp	r6, r7
    694a:	d307      	bcc.n	695c <udi_msc_cbw_received+0x238>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    694c:	7c23      	ldrb	r3, [r4, #16]
    694e:	079b      	lsls	r3, r3, #30
    6950:	d104      	bne.n	695c <udi_msc_cbw_received+0x238>
			|| (0 != udi_msc_cbw.CDB[2])) {
    6952:	7c63      	ldrb	r3, [r4, #17]
    6954:	4698      	mov	r8, r3
    6956:	2b00      	cmp	r3, #0
    6958:	d100      	bne.n	695c <udi_msc_cbw_received+0x238>
    695a:	e0ea      	b.n	6b32 <udi_msc_cbw_received+0x40e>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    695c:	4f53      	ldr	r7, [pc, #332]	; (6aac <udi_msc_cbw_received+0x388>)
    695e:	4b54      	ldr	r3, [pc, #336]	; (6ab0 <udi_msc_cbw_received+0x38c>)
    6960:	2212      	movs	r2, #18
    6962:	2100      	movs	r1, #0
    6964:	0038      	movs	r0, r7
    6966:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6968:	23f0      	movs	r3, #240	; 0xf0
    696a:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    696c:	3be6      	subs	r3, #230	; 0xe6
    696e:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6970:	3b09      	subs	r3, #9
    6972:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    6974:	3304      	adds	r3, #4
    6976:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    6978:	331f      	adds	r3, #31
    697a:	733b      	strb	r3, [r7, #12]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    697c:	464b      	mov	r3, r9
	if (0 != udi_msc_csw.dCSWDataResidue) {
    697e:	2e00      	cmp	r6, #0
    6980:	d100      	bne.n	6984 <udi_msc_cbw_received+0x260>
    6982:	e726      	b.n	67d2 <udi_msc_cbw_received+0xae>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    6984:	466a      	mov	r2, sp
    6986:	73d3      	strb	r3, [r2, #15]
    6988:	7bd3      	ldrb	r3, [r2, #15]
    698a:	b25b      	sxtb	r3, r3
    698c:	2b00      	cmp	r3, #0
    698e:	db00      	blt.n	6992 <udi_msc_cbw_received+0x26e>
    6990:	e71c      	b.n	67cc <udi_msc_cbw_received+0xa8>
			udd_ep_set_halt(UDI_MSC_EP_IN);
    6992:	4b3c      	ldr	r3, [pc, #240]	; (6a84 <udi_msc_cbw_received+0x360>)
    6994:	2081      	movs	r0, #129	; 0x81
    6996:	4798      	blx	r3
    6998:	e71b      	b.n	67d2 <udi_msc_cbw_received+0xae>
	uint8_t length = udi_msc_cbw.CDB[4];
    699a:	7ce3      	ldrb	r3, [r4, #19]
    699c:	1c19      	adds	r1, r3, #0
    699e:	2b12      	cmp	r3, #18
    69a0:	d900      	bls.n	69a4 <udi_msc_cbw_received+0x280>
    69a2:	2112      	movs	r1, #18
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    69a4:	7b23      	ldrb	r3, [r4, #12]
    69a6:	b2c9      	uxtb	r1, r1
    69a8:	4698      	mov	r8, r3
    69aa:	3b80      	subs	r3, #128	; 0x80
    69ac:	061b      	lsls	r3, r3, #24
    69ae:	d430      	bmi.n	6a12 <udi_msc_cbw_received+0x2ee>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    69b0:	428e      	cmp	r6, r1
    69b2:	d32e      	bcc.n	6a12 <udi_msc_cbw_received+0x2ee>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    69b4:	483d      	ldr	r0, [pc, #244]	; (6aac <udi_msc_cbw_received+0x388>)
    69b6:	4b4e      	ldr	r3, [pc, #312]	; (6af0 <udi_msc_cbw_received+0x3cc>)
    69b8:	4798      	blx	r3
    69ba:	e6c9      	b.n	6750 <udi_msc_cbw_received+0x2c>
		udi_msc_spc_mode_sense(false);
    69bc:	2000      	movs	r0, #0
    69be:	4b4b      	ldr	r3, [pc, #300]	; (6aec <udi_msc_cbw_received+0x3c8>)
    69c0:	4798      	blx	r3
    69c2:	e6c5      	b.n	6750 <udi_msc_cbw_received+0x2c>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    69c4:	4f39      	ldr	r7, [pc, #228]	; (6aac <udi_msc_cbw_received+0x388>)
    69c6:	4b3a      	ldr	r3, [pc, #232]	; (6ab0 <udi_msc_cbw_received+0x38c>)
    69c8:	2212      	movs	r2, #18
    69ca:	2100      	movs	r1, #0
    69cc:	0038      	movs	r0, r7
    69ce:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    69d0:	23f0      	movs	r3, #240	; 0xf0
    69d2:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    69d4:	3be6      	subs	r3, #230	; 0xe6
    69d6:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    69d8:	3b09      	subs	r3, #9
    69da:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    69dc:	3304      	adds	r3, #4
    69de:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    69e0:	331b      	adds	r3, #27
    69e2:	733b      	strb	r3, [r7, #12]
    69e4:	e788      	b.n	68f8 <udi_msc_cbw_received+0x1d4>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    69e6:	4e31      	ldr	r6, [pc, #196]	; (6aac <udi_msc_cbw_received+0x388>)
    69e8:	4b31      	ldr	r3, [pc, #196]	; (6ab0 <udi_msc_cbw_received+0x38c>)
    69ea:	2212      	movs	r2, #18
    69ec:	2100      	movs	r1, #0
    69ee:	0030      	movs	r0, r6
    69f0:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    69f2:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    69f4:	4d29      	ldr	r5, [pc, #164]	; (6a9c <udi_msc_cbw_received+0x378>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    69f6:	7033      	strb	r3, [r6, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    69f8:	3be6      	subs	r3, #230	; 0xe6
    69fa:	71f3      	strb	r3, [r6, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    69fc:	3b09      	subs	r3, #9
    69fe:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    6a00:	3304      	adds	r3, #4
    6a02:	70b3      	strb	r3, [r6, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    6a04:	331f      	adds	r3, #31
    6a06:	7333      	strb	r3, [r6, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
    6a08:	68ab      	ldr	r3, [r5, #8]
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	d000      	beq.n	6a10 <udi_msc_cbw_received+0x2ec>
    6a0e:	e6d9      	b.n	67c4 <udi_msc_cbw_received+0xa0>
    6a10:	e6df      	b.n	67d2 <udi_msc_cbw_received+0xae>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    6a12:	4f26      	ldr	r7, [pc, #152]	; (6aac <udi_msc_cbw_received+0x388>)
    6a14:	4b26      	ldr	r3, [pc, #152]	; (6ab0 <udi_msc_cbw_received+0x38c>)
    6a16:	2212      	movs	r2, #18
    6a18:	2100      	movs	r1, #0
    6a1a:	0038      	movs	r0, r7
    6a1c:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6a1e:	23f0      	movs	r3, #240	; 0xf0
    6a20:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6a22:	3be6      	subs	r3, #230	; 0xe6
    6a24:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6a26:	3b09      	subs	r3, #9
    6a28:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    6a2a:	3304      	adds	r3, #4
    6a2c:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    6a2e:	331f      	adds	r3, #31
    6a30:	733b      	strb	r3, [r7, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
    6a32:	2e00      	cmp	r6, #0
    6a34:	d100      	bne.n	6a38 <udi_msc_cbw_received+0x314>
    6a36:	e6cc      	b.n	67d2 <udi_msc_cbw_received+0xae>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    6a38:	4643      	mov	r3, r8
    6a3a:	e7a3      	b.n	6984 <udi_msc_cbw_received+0x260>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    6a3c:	4b1b      	ldr	r3, [pc, #108]	; (6aac <udi_msc_cbw_received+0x388>)
    6a3e:	2212      	movs	r2, #18
    6a40:	4698      	mov	r8, r3
    6a42:	0018      	movs	r0, r3
    6a44:	2100      	movs	r1, #0
    6a46:	4b1a      	ldr	r3, [pc, #104]	; (6ab0 <udi_msc_cbw_received+0x38c>)
    6a48:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6a4a:	23f0      	movs	r3, #240	; 0xf0
    6a4c:	4642      	mov	r2, r8
    6a4e:	7013      	strb	r3, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6a50:	3be6      	subs	r3, #230	; 0xe6
    6a52:	71d3      	strb	r3, [r2, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    6a54:	732f      	strb	r7, [r5, #12]
    6a56:	e74f      	b.n	68f8 <udi_msc_cbw_received+0x1d4>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    6a58:	4f14      	ldr	r7, [pc, #80]	; (6aac <udi_msc_cbw_received+0x388>)
    6a5a:	4b15      	ldr	r3, [pc, #84]	; (6ab0 <udi_msc_cbw_received+0x38c>)
    6a5c:	2212      	movs	r2, #18
    6a5e:	2100      	movs	r1, #0
    6a60:	0038      	movs	r0, r7
    6a62:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6a64:	23f0      	movs	r3, #240	; 0xf0
    6a66:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6a68:	3be6      	subs	r3, #230	; 0xe6
    6a6a:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    6a6c:	732e      	strb	r6, [r5, #12]
    6a6e:	e757      	b.n	6920 <udi_msc_cbw_received+0x1fc>
	udi_msc_b_trans_req = true;
    6a70:	2201      	movs	r2, #1
	udi_msc_b_read = b_read;
    6a72:	4b16      	ldr	r3, [pc, #88]	; (6acc <udi_msc_cbw_received+0x3a8>)
    6a74:	7018      	strb	r0, [r3, #0]
	udi_msc_b_trans_req = true;
    6a76:	4b16      	ldr	r3, [pc, #88]	; (6ad0 <udi_msc_cbw_received+0x3ac>)
    6a78:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
    6a7a:	4b16      	ldr	r3, [pc, #88]	; (6ad4 <udi_msc_cbw_received+0x3b0>)
    6a7c:	4798      	blx	r3
    6a7e:	e667      	b.n	6750 <udi_msc_cbw_received+0x2c>
    6a80:	20000bc4 	.word	0x20000bc4
    6a84:	000084b1 	.word	0x000084b1
    6a88:	00006209 	.word	0x00006209
    6a8c:	0000857d 	.word	0x0000857d
    6a90:	20000bd0 	.word	0x20000bd0
    6a94:	43425355 	.word	0x43425355
    6a98:	20000bf4 	.word	0x20000bf4
    6a9c:	20000018 	.word	0x20000018
    6aa0:	0002d2a4 	.word	0x0002d2a4
    6aa4:	00006235 	.word	0x00006235
    6aa8:	000182e5 	.word	0x000182e5
    6aac:	20000bf8 	.word	0x20000bf8
    6ab0:	00028a1d 	.word	0x00028a1d
    6ab4:	000062c5 	.word	0x000062c5
    6ab8:	00008609 	.word	0x00008609
    6abc:	00006199 	.word	0x00006199
    6ac0:	000182fd 	.word	0x000182fd
    6ac4:	20000bc0 	.word	0x20000bc0
    6ac8:	20000bf0 	.word	0x20000bf0
    6acc:	20000bc5 	.word	0x20000bc5
    6ad0:	20000bc6 	.word	0x20000bc6
    6ad4:	00022ec1 	.word	0x00022ec1
    6ad8:	20000bc8 	.word	0x20000bc8
    6adc:	000182c5 	.word	0x000182c5
    6ae0:	000061d1 	.word	0x000061d1
    6ae4:	00006261 	.word	0x00006261
    6ae8:	000182b1 	.word	0x000182b1
    6aec:	00006579 	.word	0x00006579
    6af0:	000064d9 	.word	0x000064d9
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    6af4:	21a0      	movs	r1, #160	; 0xa0
    6af6:	2006      	movs	r0, #6
    6af8:	0189      	lsls	r1, r1, #6
    6afa:	4bc2      	ldr	r3, [pc, #776]	; (6e04 <udi_msc_cbw_received+0x6e0>)
    6afc:	4798      	blx	r3
    6afe:	e70f      	b.n	6920 <udi_msc_cbw_received+0x1fc>
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    6b00:	21e8      	movs	r1, #232	; 0xe8
    6b02:	2002      	movs	r0, #2
    6b04:	0189      	lsls	r1, r1, #6
    6b06:	4bbf      	ldr	r3, [pc, #764]	; (6e04 <udi_msc_cbw_received+0x6e0>)
    6b08:	4798      	blx	r3
    6b0a:	e709      	b.n	6920 <udi_msc_cbw_received+0x1fc>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    6b0c:	4cbe      	ldr	r4, [pc, #760]	; (6e08 <udi_msc_cbw_received+0x6e4>)
    6b0e:	2212      	movs	r2, #18
    6b10:	2100      	movs	r1, #0
    6b12:	0020      	movs	r0, r4
    6b14:	4bbd      	ldr	r3, [pc, #756]	; (6e0c <udi_msc_cbw_received+0x6e8>)
    6b16:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6b18:	23f0      	movs	r3, #240	; 0xf0
    6b1a:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6b1c:	3be6      	subs	r3, #230	; 0xe6
    6b1e:	71e3      	strb	r3, [r4, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6b20:	3b09      	subs	r3, #9
    6b22:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    6b24:	3306      	adds	r3, #6
    6b26:	70a3      	strb	r3, [r4, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    6b28:	3320      	adds	r3, #32
    6b2a:	7323      	strb	r3, [r4, #12]
			udi_msc_csw_process();
    6b2c:	4bb8      	ldr	r3, [pc, #736]	; (6e10 <udi_msc_cbw_received+0x6ec>)
    6b2e:	4798      	blx	r3
    6b30:	e60e      	b.n	6750 <udi_msc_cbw_received+0x2c>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    6b32:	4bb8      	ldr	r3, [pc, #736]	; (6e14 <udi_msc_cbw_received+0x6f0>)
    6b34:	4798      	blx	r3
    6b36:	0003      	movs	r3, r0
    6b38:	1e58      	subs	r0, r3, #1
    6b3a:	4183      	sbcs	r3, r0
    6b3c:	4db6      	ldr	r5, [pc, #728]	; (6e18 <udi_msc_cbw_received+0x6f4>)
    6b3e:	01db      	lsls	r3, r3, #7
    6b40:	706b      	strb	r3, [r5, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    6b42:	7b60      	ldrb	r0, [r4, #13]
    6b44:	4bb5      	ldr	r3, [pc, #724]	; (6e1c <udi_msc_cbw_received+0x6f8>)
    6b46:	4798      	blx	r3
    6b48:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    6b4a:	0028      	movs	r0, r5
    6b4c:	4bb4      	ldr	r3, [pc, #720]	; (6e20 <udi_msc_cbw_received+0x6fc>)
    6b4e:	3010      	adds	r0, #16
    6b50:	3101      	adds	r1, #1
    6b52:	2210      	movs	r2, #16
    6b54:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6b56:	7c2b      	ldrb	r3, [r5, #16]
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d100      	bne.n	6b5e <udi_msc_cbw_received+0x43a>
    6b5c:	e0a0      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6b5e:	2b22      	cmp	r3, #34	; 0x22
    6b60:	d100      	bne.n	6b64 <udi_msc_cbw_received+0x440>
    6b62:	e106      	b.n	6d72 <udi_msc_cbw_received+0x64e>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6b64:	7c6b      	ldrb	r3, [r5, #17]
    6b66:	2b00      	cmp	r3, #0
    6b68:	d100      	bne.n	6b6c <udi_msc_cbw_received+0x448>
    6b6a:	e107      	b.n	6d7c <udi_msc_cbw_received+0x658>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6b6c:	2b22      	cmp	r3, #34	; 0x22
    6b6e:	d100      	bne.n	6b72 <udi_msc_cbw_received+0x44e>
    6b70:	e101      	b.n	6d76 <udi_msc_cbw_received+0x652>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6b72:	7cab      	ldrb	r3, [r5, #18]
    6b74:	2b00      	cmp	r3, #0
    6b76:	d100      	bne.n	6b7a <udi_msc_cbw_received+0x456>
    6b78:	e10a      	b.n	6d90 <udi_msc_cbw_received+0x66c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6b7a:	2b22      	cmp	r3, #34	; 0x22
    6b7c:	d100      	bne.n	6b80 <udi_msc_cbw_received+0x45c>
    6b7e:	e104      	b.n	6d8a <udi_msc_cbw_received+0x666>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6b80:	7ceb      	ldrb	r3, [r5, #19]
    6b82:	2b00      	cmp	r3, #0
    6b84:	d100      	bne.n	6b88 <udi_msc_cbw_received+0x464>
    6b86:	e0fe      	b.n	6d86 <udi_msc_cbw_received+0x662>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6b88:	2b22      	cmp	r3, #34	; 0x22
    6b8a:	d100      	bne.n	6b8e <udi_msc_cbw_received+0x46a>
    6b8c:	e0f8      	b.n	6d80 <udi_msc_cbw_received+0x65c>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6b8e:	7d2b      	ldrb	r3, [r5, #20]
    6b90:	2b00      	cmp	r3, #0
    6b92:	d100      	bne.n	6b96 <udi_msc_cbw_received+0x472>
    6b94:	e110      	b.n	6db8 <udi_msc_cbw_received+0x694>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6b96:	2b22      	cmp	r3, #34	; 0x22
    6b98:	d100      	bne.n	6b9c <udi_msc_cbw_received+0x478>
    6b9a:	e10a      	b.n	6db2 <udi_msc_cbw_received+0x68e>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6b9c:	7d6b      	ldrb	r3, [r5, #21]
    6b9e:	2b00      	cmp	r3, #0
    6ba0:	d100      	bne.n	6ba4 <udi_msc_cbw_received+0x480>
    6ba2:	e104      	b.n	6dae <udi_msc_cbw_received+0x68a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6ba4:	2b22      	cmp	r3, #34	; 0x22
    6ba6:	d100      	bne.n	6baa <udi_msc_cbw_received+0x486>
    6ba8:	e0fe      	b.n	6da8 <udi_msc_cbw_received+0x684>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6baa:	7dab      	ldrb	r3, [r5, #22]
    6bac:	2b00      	cmp	r3, #0
    6bae:	d100      	bne.n	6bb2 <udi_msc_cbw_received+0x48e>
    6bb0:	e0f8      	b.n	6da4 <udi_msc_cbw_received+0x680>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6bb2:	2b22      	cmp	r3, #34	; 0x22
    6bb4:	d100      	bne.n	6bb8 <udi_msc_cbw_received+0x494>
    6bb6:	e0f2      	b.n	6d9e <udi_msc_cbw_received+0x67a>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6bb8:	7deb      	ldrb	r3, [r5, #23]
    6bba:	2b00      	cmp	r3, #0
    6bbc:	d100      	bne.n	6bc0 <udi_msc_cbw_received+0x49c>
    6bbe:	e0ec      	b.n	6d9a <udi_msc_cbw_received+0x676>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6bc0:	2b22      	cmp	r3, #34	; 0x22
    6bc2:	d100      	bne.n	6bc6 <udi_msc_cbw_received+0x4a2>
    6bc4:	e0e6      	b.n	6d94 <udi_msc_cbw_received+0x670>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6bc6:	7e2b      	ldrb	r3, [r5, #24]
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d100      	bne.n	6bce <udi_msc_cbw_received+0x4aa>
    6bcc:	e117      	b.n	6dfe <udi_msc_cbw_received+0x6da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6bce:	2b22      	cmp	r3, #34	; 0x22
    6bd0:	d100      	bne.n	6bd4 <udi_msc_cbw_received+0x4b0>
    6bd2:	e111      	b.n	6df8 <udi_msc_cbw_received+0x6d4>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6bd4:	7e6b      	ldrb	r3, [r5, #25]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d100      	bne.n	6bdc <udi_msc_cbw_received+0x4b8>
    6bda:	e10b      	b.n	6df4 <udi_msc_cbw_received+0x6d0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6bdc:	2b22      	cmp	r3, #34	; 0x22
    6bde:	d100      	bne.n	6be2 <udi_msc_cbw_received+0x4be>
    6be0:	e105      	b.n	6dee <udi_msc_cbw_received+0x6ca>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6be2:	7eab      	ldrb	r3, [r5, #26]
    6be4:	2b00      	cmp	r3, #0
    6be6:	d100      	bne.n	6bea <udi_msc_cbw_received+0x4c6>
    6be8:	e0ff      	b.n	6dea <udi_msc_cbw_received+0x6c6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6bea:	2b22      	cmp	r3, #34	; 0x22
    6bec:	d100      	bne.n	6bf0 <udi_msc_cbw_received+0x4cc>
    6bee:	e0f9      	b.n	6de4 <udi_msc_cbw_received+0x6c0>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6bf0:	7eeb      	ldrb	r3, [r5, #27]
    6bf2:	2b00      	cmp	r3, #0
    6bf4:	d100      	bne.n	6bf8 <udi_msc_cbw_received+0x4d4>
    6bf6:	e0f3      	b.n	6de0 <udi_msc_cbw_received+0x6bc>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6bf8:	2b22      	cmp	r3, #34	; 0x22
    6bfa:	d100      	bne.n	6bfe <udi_msc_cbw_received+0x4da>
    6bfc:	e0b7      	b.n	6d6e <udi_msc_cbw_received+0x64a>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6bfe:	7f2b      	ldrb	r3, [r5, #28]
    6c00:	2b00      	cmp	r3, #0
    6c02:	d100      	bne.n	6c06 <udi_msc_cbw_received+0x4e2>
    6c04:	e0ea      	b.n	6ddc <udi_msc_cbw_received+0x6b8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6c06:	2b22      	cmp	r3, #34	; 0x22
    6c08:	d100      	bne.n	6c0c <udi_msc_cbw_received+0x4e8>
    6c0a:	e0e4      	b.n	6dd6 <udi_msc_cbw_received+0x6b2>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6c0c:	7f6b      	ldrb	r3, [r5, #29]
    6c0e:	2b00      	cmp	r3, #0
    6c10:	d100      	bne.n	6c14 <udi_msc_cbw_received+0x4f0>
    6c12:	e0de      	b.n	6dd2 <udi_msc_cbw_received+0x6ae>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6c14:	2b22      	cmp	r3, #34	; 0x22
    6c16:	d100      	bne.n	6c1a <udi_msc_cbw_received+0x4f6>
    6c18:	e0d8      	b.n	6dcc <udi_msc_cbw_received+0x6a8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6c1a:	7fab      	ldrb	r3, [r5, #30]
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d03e      	beq.n	6c9e <udi_msc_cbw_received+0x57a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6c20:	2b22      	cmp	r3, #34	; 0x22
    6c22:	d100      	bne.n	6c26 <udi_msc_cbw_received+0x502>
    6c24:	e0cf      	b.n	6dc6 <udi_msc_cbw_received+0x6a2>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    6c26:	7feb      	ldrb	r3, [r5, #31]
    6c28:	2b00      	cmp	r3, #0
    6c2a:	d100      	bne.n	6c2e <udi_msc_cbw_received+0x50a>
    6c2c:	e0c9      	b.n	6dc2 <udi_msc_cbw_received+0x69e>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    6c2e:	2b22      	cmp	r3, #34	; 0x22
    6c30:	d100      	bne.n	6c34 <udi_msc_cbw_received+0x510>
    6c32:	e0c3      	b.n	6dbc <udi_msc_cbw_received+0x698>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    6c34:	0039      	movs	r1, r7
    6c36:	0028      	movs	r0, r5
    6c38:	4b7a      	ldr	r3, [pc, #488]	; (6e24 <udi_msc_cbw_received+0x700>)
    6c3a:	4798      	blx	r3
    6c3c:	e588      	b.n	6750 <udi_msc_cbw_received+0x2c>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    6c3e:	4e72      	ldr	r6, [pc, #456]	; (6e08 <udi_msc_cbw_received+0x6e4>)
    6c40:	4b72      	ldr	r3, [pc, #456]	; (6e0c <udi_msc_cbw_received+0x6e8>)
    6c42:	2212      	movs	r2, #18
    6c44:	2100      	movs	r1, #0
    6c46:	0030      	movs	r0, r6
    6c48:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6c4a:	23f0      	movs	r3, #240	; 0xf0
    6c4c:	7033      	strb	r3, [r6, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6c4e:	3be6      	subs	r3, #230	; 0xe6
    6c50:	71f3      	strb	r3, [r6, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6c52:	3b09      	subs	r3, #9
    6c54:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    6c56:	3304      	adds	r3, #4
    6c58:	70b3      	strb	r3, [r6, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    6c5a:	331f      	adds	r3, #31
    6c5c:	7333      	strb	r3, [r6, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
    6c5e:	68ab      	ldr	r3, [r5, #8]
    6c60:	2b00      	cmp	r3, #0
    6c62:	d000      	beq.n	6c66 <udi_msc_cbw_received+0x542>
    6c64:	e695      	b.n	6992 <udi_msc_cbw_received+0x26e>
    6c66:	e5b4      	b.n	67d2 <udi_msc_cbw_received+0xae>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    6c68:	2380      	movs	r3, #128	; 0x80
    6c6a:	029b      	lsls	r3, r3, #10
    6c6c:	6063      	str	r3, [r4, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    6c6e:	6823      	ldr	r3, [r4, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    6c70:	2108      	movs	r1, #8
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    6c72:	ba1b      	rev	r3, r3
    6c74:	6023      	str	r3, [r4, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    6c76:	0020      	movs	r0, r4
    6c78:	4b6a      	ldr	r3, [pc, #424]	; (6e24 <udi_msc_cbw_received+0x700>)
    6c7a:	4798      	blx	r3
    6c7c:	e568      	b.n	6750 <udi_msc_cbw_received+0x2c>
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    6c7e:	21a0      	movs	r1, #160	; 0xa0
    6c80:	2006      	movs	r0, #6
    6c82:	0189      	lsls	r1, r1, #6
    6c84:	4b5f      	ldr	r3, [pc, #380]	; (6e04 <udi_msc_cbw_received+0x6e0>)
    6c86:	4798      	blx	r3
		udi_msc_csw_process();
    6c88:	4b61      	ldr	r3, [pc, #388]	; (6e10 <udi_msc_cbw_received+0x6ec>)
    6c8a:	4798      	blx	r3
    6c8c:	e560      	b.n	6750 <udi_msc_cbw_received+0x2c>
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    6c8e:	21e8      	movs	r1, #232	; 0xe8
    6c90:	2002      	movs	r0, #2
    6c92:	0189      	lsls	r1, r1, #6
    6c94:	4b5b      	ldr	r3, [pc, #364]	; (6e04 <udi_msc_cbw_received+0x6e0>)
    6c96:	4798      	blx	r3
		udi_msc_csw_process();
    6c98:	4b5d      	ldr	r3, [pc, #372]	; (6e10 <udi_msc_cbw_received+0x6ec>)
    6c9a:	4798      	blx	r3
    6c9c:	e558      	b.n	6750 <udi_msc_cbw_received+0x2c>
		i++;
    6c9e:	230e      	movs	r3, #14
		udi_msc_inquiry_data.product_id[i] = ' ';
    6ca0:	2220      	movs	r2, #32
    6ca2:	18e9      	adds	r1, r5, r3
    6ca4:	740a      	strb	r2, [r1, #16]
		i++;
    6ca6:	1c59      	adds	r1, r3, #1
    6ca8:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6caa:	2910      	cmp	r1, #16
    6cac:	d0c2      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6cae:	1869      	adds	r1, r5, r1
    6cb0:	740a      	strb	r2, [r1, #16]
		i++;
    6cb2:	1c99      	adds	r1, r3, #2
    6cb4:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6cb6:	2910      	cmp	r1, #16
    6cb8:	d0bc      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6cba:	1869      	adds	r1, r5, r1
    6cbc:	740a      	strb	r2, [r1, #16]
		i++;
    6cbe:	1cd9      	adds	r1, r3, #3
    6cc0:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6cc2:	2910      	cmp	r1, #16
    6cc4:	d0b6      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6cc6:	1869      	adds	r1, r5, r1
    6cc8:	740a      	strb	r2, [r1, #16]
		i++;
    6cca:	1d19      	adds	r1, r3, #4
    6ccc:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6cce:	2910      	cmp	r1, #16
    6cd0:	d0b0      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6cd2:	1869      	adds	r1, r5, r1
    6cd4:	740a      	strb	r2, [r1, #16]
		i++;
    6cd6:	1d59      	adds	r1, r3, #5
    6cd8:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6cda:	2910      	cmp	r1, #16
    6cdc:	d0aa      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6cde:	1869      	adds	r1, r5, r1
    6ce0:	740a      	strb	r2, [r1, #16]
		i++;
    6ce2:	1d99      	adds	r1, r3, #6
    6ce4:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6ce6:	2910      	cmp	r1, #16
    6ce8:	d0a4      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6cea:	1869      	adds	r1, r5, r1
    6cec:	740a      	strb	r2, [r1, #16]
		i++;
    6cee:	1dd9      	adds	r1, r3, #7
    6cf0:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6cf2:	2910      	cmp	r1, #16
    6cf4:	d09e      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6cf6:	1869      	adds	r1, r5, r1
    6cf8:	740a      	strb	r2, [r1, #16]
		i++;
    6cfa:	0019      	movs	r1, r3
    6cfc:	3108      	adds	r1, #8
    6cfe:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6d00:	2910      	cmp	r1, #16
    6d02:	d097      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6d04:	1869      	adds	r1, r5, r1
    6d06:	740a      	strb	r2, [r1, #16]
		i++;
    6d08:	0019      	movs	r1, r3
    6d0a:	3109      	adds	r1, #9
    6d0c:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6d0e:	2910      	cmp	r1, #16
    6d10:	d090      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6d12:	1869      	adds	r1, r5, r1
    6d14:	740a      	strb	r2, [r1, #16]
		i++;
    6d16:	001a      	movs	r2, r3
    6d18:	320a      	adds	r2, #10
    6d1a:	b2d2      	uxtb	r2, r2
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6d1c:	2a10      	cmp	r2, #16
    6d1e:	d089      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6d20:	18a9      	adds	r1, r5, r2
    6d22:	2220      	movs	r2, #32
    6d24:	740a      	strb	r2, [r1, #16]
		i++;
    6d26:	0019      	movs	r1, r3
    6d28:	310b      	adds	r1, #11
    6d2a:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6d2c:	2910      	cmp	r1, #16
    6d2e:	d081      	beq.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6d30:	1869      	adds	r1, r5, r1
    6d32:	740a      	strb	r2, [r1, #16]
		i++;
    6d34:	0019      	movs	r1, r3
    6d36:	310c      	adds	r1, #12
    6d38:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6d3a:	2910      	cmp	r1, #16
    6d3c:	d100      	bne.n	6d40 <udi_msc_cbw_received+0x61c>
    6d3e:	e779      	b.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6d40:	1869      	adds	r1, r5, r1
    6d42:	740a      	strb	r2, [r1, #16]
		i++;
    6d44:	0019      	movs	r1, r3
    6d46:	310d      	adds	r1, #13
    6d48:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6d4a:	2910      	cmp	r1, #16
    6d4c:	d100      	bne.n	6d50 <udi_msc_cbw_received+0x62c>
    6d4e:	e771      	b.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6d50:	1869      	adds	r1, r5, r1
    6d52:	740a      	strb	r2, [r1, #16]
		i++;
    6d54:	0019      	movs	r1, r3
    6d56:	310e      	adds	r1, #14
    6d58:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6d5a:	2910      	cmp	r1, #16
    6d5c:	d100      	bne.n	6d60 <udi_msc_cbw_received+0x63c>
    6d5e:	e769      	b.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6d60:	1869      	adds	r1, r5, r1
    6d62:	740a      	strb	r2, [r1, #16]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    6d64:	2b01      	cmp	r3, #1
    6d66:	d100      	bne.n	6d6a <udi_msc_cbw_received+0x646>
    6d68:	e764      	b.n	6c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
    6d6a:	77ea      	strb	r2, [r5, #31]
    6d6c:	e762      	b.n	6c34 <udi_msc_cbw_received+0x510>
		i++;
    6d6e:	230b      	movs	r3, #11
    6d70:	4698      	mov	r8, r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    6d72:	4643      	mov	r3, r8
    6d74:	e794      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
		i++;
    6d76:	2301      	movs	r3, #1
    6d78:	4698      	mov	r8, r3
    6d7a:	e7fa      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6d7c:	2301      	movs	r3, #1
    6d7e:	e78f      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6d80:	2303      	movs	r3, #3
    6d82:	4698      	mov	r8, r3
    6d84:	e7f5      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6d86:	2303      	movs	r3, #3
    6d88:	e78a      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6d8a:	2302      	movs	r3, #2
    6d8c:	4698      	mov	r8, r3
    6d8e:	e7f0      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6d90:	2302      	movs	r3, #2
    6d92:	e785      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6d94:	2307      	movs	r3, #7
    6d96:	4698      	mov	r8, r3
    6d98:	e7eb      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6d9a:	2307      	movs	r3, #7
    6d9c:	e780      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6d9e:	2306      	movs	r3, #6
    6da0:	4698      	mov	r8, r3
    6da2:	e7e6      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6da4:	2306      	movs	r3, #6
    6da6:	e77b      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6da8:	2305      	movs	r3, #5
    6daa:	4698      	mov	r8, r3
    6dac:	e7e1      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6dae:	2305      	movs	r3, #5
    6db0:	e776      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6db2:	2304      	movs	r3, #4
    6db4:	4698      	mov	r8, r3
    6db6:	e7dc      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6db8:	2304      	movs	r3, #4
    6dba:	e771      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6dbc:	230f      	movs	r3, #15
    6dbe:	4698      	mov	r8, r3
    6dc0:	e7d7      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6dc2:	230f      	movs	r3, #15
    6dc4:	e76c      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6dc6:	230e      	movs	r3, #14
    6dc8:	4698      	mov	r8, r3
    6dca:	e7d2      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6dcc:	230d      	movs	r3, #13
    6dce:	4698      	mov	r8, r3
    6dd0:	e7cf      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6dd2:	230d      	movs	r3, #13
    6dd4:	e764      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6dd6:	230c      	movs	r3, #12
    6dd8:	4698      	mov	r8, r3
    6dda:	e7ca      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6ddc:	230c      	movs	r3, #12
    6dde:	e75f      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6de0:	230b      	movs	r3, #11
    6de2:	e75d      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6de4:	230a      	movs	r3, #10
    6de6:	4698      	mov	r8, r3
    6de8:	e7c3      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6dea:	230a      	movs	r3, #10
    6dec:	e758      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6dee:	2309      	movs	r3, #9
    6df0:	4698      	mov	r8, r3
    6df2:	e7be      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6df4:	2309      	movs	r3, #9
    6df6:	e753      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6df8:	2308      	movs	r3, #8
    6dfa:	4698      	mov	r8, r3
    6dfc:	e7b9      	b.n	6d72 <udi_msc_cbw_received+0x64e>
    6dfe:	2308      	movs	r3, #8
    6e00:	e74e      	b.n	6ca0 <udi_msc_cbw_received+0x57c>
    6e02:	46c0      	nop			; (mov r8, r8)
    6e04:	000061d1 	.word	0x000061d1
    6e08:	20000bf8 	.word	0x20000bf8
    6e0c:	00028a1d 	.word	0x00028a1d
    6e10:	00006261 	.word	0x00006261
    6e14:	00018311 	.word	0x00018311
    6e18:	20000028 	.word	0x20000028
    6e1c:	00018325 	.word	0x00018325
    6e20:	00028999 	.word	0x00028999
    6e24:	000064d9 	.word	0x000064d9

00006e28 <udi_msc_process_trans>:
{
    6e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e2a:	46c6      	mov	lr, r8
    6e2c:	b500      	push	{lr}
	if (!udi_msc_b_trans_req)
    6e2e:	4b4b      	ldr	r3, [pc, #300]	; (6f5c <udi_msc_process_trans+0x134>)
{
    6e30:	b082      	sub	sp, #8
	if (!udi_msc_b_trans_req)
    6e32:	781c      	ldrb	r4, [r3, #0]
    6e34:	2c00      	cmp	r4, #0
    6e36:	d03f      	beq.n	6eb8 <udi_msc_process_trans+0x90>
	udi_msc_b_trans_req = false;
    6e38:	2200      	movs	r2, #0
    6e3a:	701a      	strb	r2, [r3, #0]
	if (udi_msc_b_read) {
    6e3c:	4b48      	ldr	r3, [pc, #288]	; (6f60 <udi_msc_process_trans+0x138>)
	udi_msc_b_reset_trans = false;
    6e3e:	4d49      	ldr	r5, [pc, #292]	; (6f64 <udi_msc_process_trans+0x13c>)
	if (udi_msc_b_read) {
    6e40:	781b      	ldrb	r3, [r3, #0]
	udi_msc_b_reset_trans = false;
    6e42:	702a      	strb	r2, [r5, #0]
	if (udi_msc_b_read) {
    6e44:	2b00      	cmp	r3, #0
    6e46:	d13c      	bne.n	6ec2 <udi_msc_process_trans+0x9a>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    6e48:	4b47      	ldr	r3, [pc, #284]	; (6f68 <udi_msc_process_trans+0x140>)
    6e4a:	4e48      	ldr	r6, [pc, #288]	; (6f6c <udi_msc_process_trans+0x144>)
    6e4c:	881a      	ldrh	r2, [r3, #0]
    6e4e:	4b48      	ldr	r3, [pc, #288]	; (6f70 <udi_msc_process_trans+0x148>)
    6e50:	7b70      	ldrb	r0, [r6, #13]
    6e52:	6819      	ldr	r1, [r3, #0]
    6e54:	4b47      	ldr	r3, [pc, #284]	; (6f74 <udi_msc_process_trans+0x14c>)
    6e56:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    6e58:	782b      	ldrb	r3, [r5, #0]
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    6e5a:	0007      	movs	r7, r0
	if (udi_msc_b_reset_trans) {
    6e5c:	b2db      	uxtb	r3, r3
    6e5e:	2b00      	cmp	r3, #0
    6e60:	d13c      	bne.n	6edc <udi_msc_process_trans+0xb4>
	switch (status) {
    6e62:	2f02      	cmp	r7, #2
    6e64:	d062      	beq.n	6f2c <udi_msc_process_trans+0x104>
    6e66:	2f03      	cmp	r7, #3
    6e68:	d03c      	beq.n	6ee4 <udi_msc_process_trans+0xbc>
    6e6a:	2f00      	cmp	r7, #0
    6e6c:	d051      	beq.n	6f12 <udi_msc_process_trans+0xea>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    6e6e:	4f42      	ldr	r7, [pc, #264]	; (6f78 <udi_msc_process_trans+0x150>)
    6e70:	4b42      	ldr	r3, [pc, #264]	; (6f7c <udi_msc_process_trans+0x154>)
    6e72:	2212      	movs	r2, #18
    6e74:	2100      	movs	r1, #0
    6e76:	0038      	movs	r0, r7
    6e78:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6e7a:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6e7c:	4d40      	ldr	r5, [pc, #256]	; (6f80 <udi_msc_process_trans+0x158>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6e7e:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6e80:	3be6      	subs	r3, #230	; 0xe6
    6e82:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6e84:	3b09      	subs	r3, #9
    6e86:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    6e88:	3303      	adds	r3, #3
    6e8a:	70bb      	strb	r3, [r7, #2]
	if (0 != udi_msc_csw.dCSWDataResidue) {
    6e8c:	68ab      	ldr	r3, [r5, #8]
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d005      	beq.n	6e9e <udi_msc_process_trans+0x76>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    6e92:	7b33      	ldrb	r3, [r6, #12]
    6e94:	2b7f      	cmp	r3, #127	; 0x7f
    6e96:	d85c      	bhi.n	6f52 <udi_msc_process_trans+0x12a>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    6e98:	2002      	movs	r0, #2
    6e9a:	4b3a      	ldr	r3, [pc, #232]	; (6f84 <udi_msc_process_trans+0x15c>)
    6e9c:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    6e9e:	6873      	ldr	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    6ea0:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    6ea2:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    6ea4:	4b38      	ldr	r3, [pc, #224]	; (6f88 <udi_msc_process_trans+0x160>)
    6ea6:	2100      	movs	r1, #0
    6ea8:	9300      	str	r3, [sp, #0]
    6eaa:	2081      	movs	r0, #129	; 0x81
    6eac:	230d      	movs	r3, #13
    6eae:	4d37      	ldr	r5, [pc, #220]	; (6f8c <udi_msc_process_trans+0x164>)
    6eb0:	47a8      	blx	r5
    6eb2:	2800      	cmp	r0, #0
    6eb4:	d028      	beq.n	6f08 <udi_msc_process_trans+0xe0>
	return true;
    6eb6:	0004      	movs	r4, r0
}
    6eb8:	0020      	movs	r0, r4
    6eba:	b002      	add	sp, #8
    6ebc:	bc04      	pop	{r2}
    6ebe:	4690      	mov	r8, r2
    6ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    6ec2:	4b29      	ldr	r3, [pc, #164]	; (6f68 <udi_msc_process_trans+0x140>)
    6ec4:	4e29      	ldr	r6, [pc, #164]	; (6f6c <udi_msc_process_trans+0x144>)
    6ec6:	881a      	ldrh	r2, [r3, #0]
    6ec8:	4b29      	ldr	r3, [pc, #164]	; (6f70 <udi_msc_process_trans+0x148>)
    6eca:	7b70      	ldrb	r0, [r6, #13]
    6ecc:	6819      	ldr	r1, [r3, #0]
    6ece:	4b30      	ldr	r3, [pc, #192]	; (6f90 <udi_msc_process_trans+0x168>)
    6ed0:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    6ed2:	782b      	ldrb	r3, [r5, #0]
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    6ed4:	0007      	movs	r7, r0
	if (udi_msc_b_reset_trans) {
    6ed6:	b2db      	uxtb	r3, r3
    6ed8:	2b00      	cmp	r3, #0
    6eda:	d0c2      	beq.n	6e62 <udi_msc_process_trans+0x3a>
		udi_msc_b_reset_trans = false;
    6edc:	2200      	movs	r2, #0
		return true;
    6ede:	001c      	movs	r4, r3
		udi_msc_b_reset_trans = false;
    6ee0:	702a      	strb	r2, [r5, #0]
		return true;
    6ee2:	e7e9      	b.n	6eb8 <udi_msc_process_trans+0x90>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    6ee4:	4f24      	ldr	r7, [pc, #144]	; (6f78 <udi_msc_process_trans+0x150>)
    6ee6:	4b25      	ldr	r3, [pc, #148]	; (6f7c <udi_msc_process_trans+0x154>)
    6ee8:	2212      	movs	r2, #18
    6eea:	2100      	movs	r1, #0
    6eec:	0038      	movs	r0, r7
    6eee:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6ef0:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6ef2:	4d23      	ldr	r5, [pc, #140]	; (6f80 <udi_msc_process_trans+0x158>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6ef4:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6ef6:	3be6      	subs	r3, #230	; 0xe6
    6ef8:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6efa:	3b09      	subs	r3, #9
    6efc:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    6efe:	3305      	adds	r3, #5
    6f00:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    6f02:	3322      	adds	r3, #34	; 0x22
    6f04:	733b      	strb	r3, [r7, #12]
    6f06:	e7c1      	b.n	6e8c <udi_msc_process_trans+0x64>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    6f08:	4922      	ldr	r1, [pc, #136]	; (6f94 <udi_msc_process_trans+0x16c>)
    6f0a:	4b23      	ldr	r3, [pc, #140]	; (6f98 <udi_msc_process_trans+0x170>)
    6f0c:	3081      	adds	r0, #129	; 0x81
    6f0e:	4798      	blx	r3
    6f10:	e7d2      	b.n	6eb8 <udi_msc_process_trans+0x90>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    6f12:	4d19      	ldr	r5, [pc, #100]	; (6f78 <udi_msc_process_trans+0x150>)
    6f14:	4b19      	ldr	r3, [pc, #100]	; (6f7c <udi_msc_process_trans+0x154>)
    6f16:	0028      	movs	r0, r5
    6f18:	2212      	movs	r2, #18
    6f1a:	2100      	movs	r1, #0
    6f1c:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6f1e:	23f0      	movs	r3, #240	; 0xf0
    6f20:	702b      	strb	r3, [r5, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6f22:	3be6      	subs	r3, #230	; 0xe6
    6f24:	71eb      	strb	r3, [r5, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    6f26:	4d16      	ldr	r5, [pc, #88]	; (6f80 <udi_msc_process_trans+0x158>)
    6f28:	732f      	strb	r7, [r5, #12]
    6f2a:	e7af      	b.n	6e8c <udi_msc_process_trans+0x64>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    6f2c:	4b12      	ldr	r3, [pc, #72]	; (6f78 <udi_msc_process_trans+0x150>)
    6f2e:	2212      	movs	r2, #18
    6f30:	4698      	mov	r8, r3
    6f32:	0018      	movs	r0, r3
    6f34:	2100      	movs	r1, #0
    6f36:	4b11      	ldr	r3, [pc, #68]	; (6f7c <udi_msc_process_trans+0x154>)
    6f38:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6f3a:	4642      	mov	r2, r8
    6f3c:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6f3e:	4d10      	ldr	r5, [pc, #64]	; (6f80 <udi_msc_process_trans+0x158>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    6f40:	7013      	strb	r3, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    6f42:	3be6      	subs	r3, #230	; 0xe6
    6f44:	71d3      	strb	r3, [r2, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    6f46:	3b09      	subs	r3, #9
    6f48:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    6f4a:	233a      	movs	r3, #58	; 0x3a
	udi_msc_sense.sense_flag_key = sense_key;
    6f4c:	7097      	strb	r7, [r2, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    6f4e:	7313      	strb	r3, [r2, #12]
    6f50:	e79c      	b.n	6e8c <udi_msc_process_trans+0x64>
			udd_ep_set_halt(UDI_MSC_EP_IN);
    6f52:	4b0c      	ldr	r3, [pc, #48]	; (6f84 <udi_msc_process_trans+0x15c>)
    6f54:	2081      	movs	r0, #129	; 0x81
    6f56:	4798      	blx	r3
    6f58:	e7a1      	b.n	6e9e <udi_msc_process_trans+0x76>
    6f5a:	46c0      	nop			; (mov r8, r8)
    6f5c:	20000bc6 	.word	0x20000bc6
    6f60:	20000bc5 	.word	0x20000bc5
    6f64:	20000015 	.word	0x20000015
    6f68:	20000bf0 	.word	0x20000bf0
    6f6c:	20000bd0 	.word	0x20000bd0
    6f70:	20000bc0 	.word	0x20000bc0
    6f74:	00018351 	.word	0x00018351
    6f78:	20000bf8 	.word	0x20000bf8
    6f7c:	00028a1d 	.word	0x00028a1d
    6f80:	20000018 	.word	0x20000018
    6f84:	000084b1 	.word	0x000084b1
    6f88:	000062c5 	.word	0x000062c5
    6f8c:	00008609 	.word	0x00008609
    6f90:	00018335 	.word	0x00018335
    6f94:	00006199 	.word	0x00006199
    6f98:	0000857d 	.word	0x0000857d

00006f9c <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    6f9c:	b570      	push	{r4, r5, r6, lr}
	if (!udi_msc_b_ack_trans)
    6f9e:	4c1d      	ldr	r4, [pc, #116]	; (7014 <udi_msc_trans_block+0x78>)
{
    6fa0:	0015      	movs	r5, r2
	if (!udi_msc_b_ack_trans)
    6fa2:	7822      	ldrb	r2, [r4, #0]
{
    6fa4:	b082      	sub	sp, #8
	if (!udi_msc_b_ack_trans)
    6fa6:	2a00      	cmp	r2, #0
    6fa8:	d016      	beq.n	6fd8 <udi_msc_trans_block+0x3c>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    6faa:	2200      	movs	r2, #0
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    6fac:	2602      	movs	r6, #2
	udi_msc_b_ack_trans = false;
    6fae:	7022      	strb	r2, [r4, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    6fb0:	2800      	cmp	r0, #0
    6fb2:	d114      	bne.n	6fde <udi_msc_trans_block+0x42>
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d014      	beq.n	6fe2 <udi_msc_trans_block+0x46>
    6fb8:	9300      	str	r3, [sp, #0]
    6fba:	000a      	movs	r2, r1
    6fbc:	0030      	movs	r0, r6
    6fbe:	002b      	movs	r3, r5
    6fc0:	2100      	movs	r1, #0
    6fc2:	4e15      	ldr	r6, [pc, #84]	; (7018 <udi_msc_trans_block+0x7c>)
    6fc4:	47b0      	blx	r6
    6fc6:	2800      	cmp	r0, #0
    6fc8:	d004      	beq.n	6fd4 <udi_msc_trans_block+0x38>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    6fca:	4b14      	ldr	r3, [pc, #80]	; (701c <udi_msc_trans_block+0x80>)
    6fcc:	689a      	ldr	r2, [r3, #8]
    6fce:	1b55      	subs	r5, r2, r5
    6fd0:	609d      	str	r5, [r3, #8]
	return true;
    6fd2:	e002      	b.n	6fda <udi_msc_trans_block+0x3e>
		udi_msc_b_ack_trans = true;
    6fd4:	2301      	movs	r3, #1
    6fd6:	7023      	strb	r3, [r4, #0]
		return false;
    6fd8:	2000      	movs	r0, #0
}
    6fda:	b002      	add	sp, #8
    6fdc:	bd70      	pop	{r4, r5, r6, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    6fde:	367f      	adds	r6, #127	; 0x7f
    6fe0:	e7e8      	b.n	6fb4 <udi_msc_trans_block+0x18>
    6fe2:	4b0f      	ldr	r3, [pc, #60]	; (7020 <udi_msc_trans_block+0x84>)
    6fe4:	000a      	movs	r2, r1
    6fe6:	9300      	str	r3, [sp, #0]
    6fe8:	0030      	movs	r0, r6
    6fea:	002b      	movs	r3, r5
    6fec:	2100      	movs	r1, #0
    6fee:	4e0a      	ldr	r6, [pc, #40]	; (7018 <udi_msc_trans_block+0x7c>)
    6ff0:	47b0      	blx	r6
    6ff2:	2800      	cmp	r0, #0
    6ff4:	d0ee      	beq.n	6fd4 <udi_msc_trans_block+0x38>
		while (!udi_msc_b_ack_trans);
    6ff6:	7823      	ldrb	r3, [r4, #0]
    6ff8:	2b00      	cmp	r3, #0
    6ffa:	d0fc      	beq.n	6ff6 <udi_msc_trans_block+0x5a>
		if (udi_msc_b_abort_trans) {
    6ffc:	4b09      	ldr	r3, [pc, #36]	; (7024 <udi_msc_trans_block+0x88>)
    6ffe:	781a      	ldrb	r2, [r3, #0]
    7000:	2a00      	cmp	r2, #0
    7002:	d1e9      	bne.n	6fd8 <udi_msc_trans_block+0x3c>
		return (!udi_msc_b_abort_trans);
    7004:	7818      	ldrb	r0, [r3, #0]
    7006:	2301      	movs	r3, #1
		udi_msc_csw.dCSWDataResidue -= block_size;
    7008:	4a04      	ldr	r2, [pc, #16]	; (701c <udi_msc_trans_block+0x80>)
		return (!udi_msc_b_abort_trans);
    700a:	4058      	eors	r0, r3
		udi_msc_csw.dCSWDataResidue -= block_size;
    700c:	6891      	ldr	r1, [r2, #8]
    700e:	1b4d      	subs	r5, r1, r5
    7010:	6095      	str	r5, [r2, #8]
		return (!udi_msc_b_abort_trans);
    7012:	e7e2      	b.n	6fda <udi_msc_trans_block+0x3e>
    7014:	20000014 	.word	0x20000014
    7018:	00008609 	.word	0x00008609
    701c:	20000018 	.word	0x20000018
    7020:	0000611d 	.word	0x0000611d
    7024:	20000ef8 	.word	0x20000ef8

00007028 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    7028:	207f      	movs	r0, #127	; 0x7f
{
    702a:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    702c:	4b02      	ldr	r3, [pc, #8]	; (7038 <udc_valid_address+0x10>)
    702e:	885b      	ldrh	r3, [r3, #2]
    7030:	4018      	ands	r0, r3
    7032:	4b02      	ldr	r3, [pc, #8]	; (703c <udc_valid_address+0x14>)
    7034:	4798      	blx	r3
}
    7036:	bd10      	pop	{r4, pc}
    7038:	200010e4 	.word	0x200010e4
    703c:	00008835 	.word	0x00008835

00007040 <udc_update_iface_desc.part.0>:
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
    7040:	b570      	push	{r4, r5, r6, lr}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    7042:	4b14      	ldr	r3, [pc, #80]	; (7094 <udc_update_iface_desc.part.0+0x54>)
    7044:	681b      	ldr	r3, [r3, #0]
    7046:	681b      	ldr	r3, [r3, #0]
    7048:	791a      	ldrb	r2, [r3, #4]
    704a:	4282      	cmp	r2, r0
    704c:	d91d      	bls.n	708a <udc_update_iface_desc.part.0+0x4a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    704e:	4e12      	ldr	r6, [pc, #72]	; (7098 <udc_update_iface_desc.part.0+0x58>)
    7050:	6033      	str	r3, [r6, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    7052:	78dc      	ldrb	r4, [r3, #3]
    7054:	789a      	ldrb	r2, [r3, #2]
    7056:	0224      	lsls	r4, r4, #8
    7058:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    705a:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    705c:	42a3      	cmp	r3, r4
    705e:	d214      	bcs.n	708a <udc_update_iface_desc.part.0+0x4a>
    7060:	2500      	movs	r5, #0
    7062:	e004      	b.n	706e <udc_update_iface_desc.part.0+0x2e>
				udc_ptr_iface->bLength);
    7064:	781a      	ldrb	r2, [r3, #0]
    7066:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    7068:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    706a:	429c      	cmp	r4, r3
    706c:	d90c      	bls.n	7088 <udc_update_iface_desc.part.0+0x48>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    706e:	785a      	ldrb	r2, [r3, #1]
    7070:	2a04      	cmp	r2, #4
    7072:	d1f7      	bne.n	7064 <udc_update_iface_desc.part.0+0x24>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    7074:	789a      	ldrb	r2, [r3, #2]
    7076:	4282      	cmp	r2, r0
    7078:	d1f4      	bne.n	7064 <udc_update_iface_desc.part.0+0x24>
    707a:	78da      	ldrb	r2, [r3, #3]
    707c:	428a      	cmp	r2, r1
    707e:	d1f1      	bne.n	7064 <udc_update_iface_desc.part.0+0x24>
    7080:	2d00      	cmp	r5, #0
    7082:	d104      	bne.n	708e <udc_update_iface_desc.part.0+0x4e>
				return true; // Interface found
    7084:	2001      	movs	r0, #1
    7086:	e001      	b.n	708c <udc_update_iface_desc.part.0+0x4c>
    7088:	6033      	str	r3, [r6, #0]
		return false;
    708a:	2000      	movs	r0, #0
}
    708c:	bd70      	pop	{r4, r5, r6, pc}
    708e:	6033      	str	r3, [r6, #0]
				return true; // Interface found
    7090:	2001      	movs	r0, #1
    7092:	e7fb      	b.n	708c <udc_update_iface_desc.part.0+0x4c>
    7094:	20000c18 	.word	0x20000c18
    7098:	20000c1c 	.word	0x20000c1c

0000709c <udc_iface_disable.part.1>:
static bool udc_iface_disable(uint8_t iface_num)
    709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    709e:	4d27      	ldr	r5, [pc, #156]	; (713c <udc_iface_disable.part.1+0xa0>)
    70a0:	0082      	lsls	r2, r0, #2
    70a2:	682b      	ldr	r3, [r5, #0]
static bool udc_iface_disable(uint8_t iface_num)
    70a4:	0007      	movs	r7, r0
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    70a6:	685b      	ldr	r3, [r3, #4]
    70a8:	58d6      	ldr	r6, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    70aa:	68f3      	ldr	r3, [r6, #12]
    70ac:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    70ae:	4b24      	ldr	r3, [pc, #144]	; (7140 <udc_iface_disable.part.1+0xa4>)
    70b0:	781b      	ldrb	r3, [r3, #0]
    70b2:	2b00      	cmp	r3, #0
    70b4:	d101      	bne.n	70ba <udc_iface_disable.part.1+0x1e>
		return false;
    70b6:	2000      	movs	r0, #0
}
    70b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    70ba:	682b      	ldr	r3, [r5, #0]
    70bc:	681b      	ldr	r3, [r3, #0]
    70be:	791a      	ldrb	r2, [r3, #4]
    70c0:	42ba      	cmp	r2, r7
    70c2:	d9f8      	bls.n	70b6 <udc_iface_disable.part.1+0x1a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    70c4:	4a1f      	ldr	r2, [pc, #124]	; (7144 <udc_iface_disable.part.1+0xa8>)
    70c6:	6013      	str	r3, [r2, #0]
    70c8:	4694      	mov	ip, r2
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    70ca:	78da      	ldrb	r2, [r3, #3]
    70cc:	789c      	ldrb	r4, [r3, #2]
    70ce:	0212      	lsls	r2, r2, #8
    70d0:	4322      	orrs	r2, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    70d2:	189a      	adds	r2, r3, r2
	while (ptr_end_desc >
    70d4:	4293      	cmp	r3, r2
    70d6:	d2ee      	bcs.n	70b6 <udc_iface_disable.part.1+0x1a>
    70d8:	001c      	movs	r4, r3
    70da:	2100      	movs	r1, #0
    70dc:	e004      	b.n	70e8 <udc_iface_disable.part.1+0x4c>
				udc_ptr_iface->bLength);
    70de:	7823      	ldrb	r3, [r4, #0]
    70e0:	2101      	movs	r1, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    70e2:	18e4      	adds	r4, r4, r3
	while (ptr_end_desc >
    70e4:	42a2      	cmp	r2, r4
    70e6:	d919      	bls.n	711c <udc_iface_disable.part.1+0x80>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    70e8:	7863      	ldrb	r3, [r4, #1]
    70ea:	2b04      	cmp	r3, #4
    70ec:	d1f7      	bne.n	70de <udc_iface_disable.part.1+0x42>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    70ee:	78a3      	ldrb	r3, [r4, #2]
    70f0:	42bb      	cmp	r3, r7
    70f2:	d1f4      	bne.n	70de <udc_iface_disable.part.1+0x42>
    70f4:	78e3      	ldrb	r3, [r4, #3]
    70f6:	4283      	cmp	r3, r0
    70f8:	d1f1      	bne.n	70de <udc_iface_disable.part.1+0x42>
    70fa:	2900      	cmp	r1, #0
    70fc:	d11b      	bne.n	7136 <udc_iface_disable.part.1+0x9a>
			udd_ep_free(ep_desc->bEndpointAddress);
    70fe:	4f12      	ldr	r7, [pc, #72]	; (7148 <udc_iface_disable.part.1+0xac>)
    7100:	e004      	b.n	710c <udc_iface_disable.part.1+0x70>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    7102:	7863      	ldrb	r3, [r4, #1]
    7104:	2b04      	cmp	r3, #4
    7106:	d005      	beq.n	7114 <udc_iface_disable.part.1+0x78>
		if (desc_id == desc->bDescriptorType) {
    7108:	2b05      	cmp	r3, #5
    710a:	d00a      	beq.n	7122 <udc_iface_disable.part.1+0x86>
			desc->bLength);
    710c:	7823      	ldrb	r3, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    710e:	18e4      	adds	r4, r4, r3
	while (ptr_eof_desc > desc) {
    7110:	42a2      	cmp	r2, r4
    7112:	d8f6      	bhi.n	7102 <udc_iface_disable.part.1+0x66>
	udi_api->disable();
    7114:	6873      	ldr	r3, [r6, #4]
    7116:	4798      	blx	r3
	return true;
    7118:	2001      	movs	r0, #1
    711a:	e7cd      	b.n	70b8 <udc_iface_disable.part.1+0x1c>
    711c:	4663      	mov	r3, ip
    711e:	601c      	str	r4, [r3, #0]
    7120:	e7c9      	b.n	70b6 <udc_iface_disable.part.1+0x1a>
			udd_ep_free(ep_desc->bEndpointAddress);
    7122:	78a0      	ldrb	r0, [r4, #2]
    7124:	47b8      	blx	r7
    7126:	682b      	ldr	r3, [r5, #0]
    7128:	681b      	ldr	r3, [r3, #0]
    712a:	78da      	ldrb	r2, [r3, #3]
    712c:	7899      	ldrb	r1, [r3, #2]
    712e:	0212      	lsls	r2, r2, #8
    7130:	430a      	orrs	r2, r1
    7132:	189a      	adds	r2, r3, r2
    7134:	e7ea      	b.n	710c <udc_iface_disable.part.1+0x70>
    7136:	4663      	mov	r3, ip
    7138:	601c      	str	r4, [r3, #0]
    713a:	e7e0      	b.n	70fe <udc_iface_disable.part.1+0x62>
    713c:	20000c18 	.word	0x20000c18
    7140:	20000c14 	.word	0x20000c14
    7144:	20000c1c 	.word	0x20000c1c
    7148:	000082dd 	.word	0x000082dd

0000714c <udc_start>:
{
    714c:	b510      	push	{r4, lr}
	udd_enable();
    714e:	4b01      	ldr	r3, [pc, #4]	; (7154 <udc_start+0x8>)
    7150:	4798      	blx	r3
}
    7152:	bd10      	pop	{r4, pc}
    7154:	00008971 	.word	0x00008971

00007158 <udc_stop>:
{
    7158:	b5f0      	push	{r4, r5, r6, r7, lr}
    715a:	46c6      	mov	lr, r8
	udd_disable();
    715c:	4b26      	ldr	r3, [pc, #152]	; (71f8 <udc_stop+0xa0>)
{
    715e:	b500      	push	{lr}
	udd_disable();
    7160:	4798      	blx	r3
	if (udc_num_configuration) {
    7162:	4d26      	ldr	r5, [pc, #152]	; (71fc <udc_stop+0xa4>)
    7164:	782a      	ldrb	r2, [r5, #0]
    7166:	2a00      	cmp	r2, #0
    7168:	d035      	beq.n	71d6 <udc_stop+0x7e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    716a:	4e25      	ldr	r6, [pc, #148]	; (7200 <udc_stop+0xa8>)
    716c:	6833      	ldr	r3, [r6, #0]
    716e:	681b      	ldr	r3, [r3, #0]
    7170:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    7172:	2900      	cmp	r1, #0
    7174:	d02f      	beq.n	71d6 <udc_stop+0x7e>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    7176:	4823      	ldr	r0, [pc, #140]	; (7204 <udc_stop+0xac>)
		for (iface_num = 0;
    7178:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    717a:	4680      	mov	r8, r0
    717c:	4f22      	ldr	r7, [pc, #136]	; (7208 <udc_stop+0xb0>)
    717e:	e004      	b.n	718a <udc_stop+0x32>
				iface_num++) {
    7180:	3401      	adds	r4, #1
    7182:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    7184:	428c      	cmp	r4, r1
    7186:	d226      	bcs.n	71d6 <udc_stop+0x7e>
    7188:	782a      	ldrb	r2, [r5, #0]
	if (0 == udc_num_configuration) {
    718a:	2a00      	cmp	r2, #0
    718c:	d0f8      	beq.n	7180 <udc_stop+0x28>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    718e:	4642      	mov	r2, r8
    7190:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    7192:	78d9      	ldrb	r1, [r3, #3]
    7194:	789a      	ldrb	r2, [r3, #2]
    7196:	0209      	lsls	r1, r1, #8
    7198:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    719a:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    719c:	2000      	movs	r0, #0
    719e:	428b      	cmp	r3, r1
    71a0:	d305      	bcc.n	71ae <udc_stop+0x56>
    71a2:	e022      	b.n	71ea <udc_stop+0x92>
				udc_ptr_iface->bLength);
    71a4:	781a      	ldrb	r2, [r3, #0]
    71a6:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    71a8:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    71aa:	4299      	cmp	r1, r3
    71ac:	d91b      	bls.n	71e6 <udc_stop+0x8e>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    71ae:	785a      	ldrb	r2, [r3, #1]
    71b0:	2a04      	cmp	r2, #4
    71b2:	d1f7      	bne.n	71a4 <udc_stop+0x4c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    71b4:	789a      	ldrb	r2, [r3, #2]
    71b6:	42a2      	cmp	r2, r4
    71b8:	d1f4      	bne.n	71a4 <udc_stop+0x4c>
    71ba:	78da      	ldrb	r2, [r3, #3]
    71bc:	2a00      	cmp	r2, #0
    71be:	d1f1      	bne.n	71a4 <udc_stop+0x4c>
    71c0:	2800      	cmp	r0, #0
    71c2:	d116      	bne.n	71f2 <udc_stop+0x9a>
    71c4:	0020      	movs	r0, r4
    71c6:	47b8      	blx	r7
    71c8:	6833      	ldr	r3, [r6, #0]
				iface_num++) {
    71ca:	3401      	adds	r4, #1
    71cc:	681b      	ldr	r3, [r3, #0]
    71ce:	b2e4      	uxtb	r4, r4
    71d0:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    71d2:	428c      	cmp	r4, r1
    71d4:	d3d8      	bcc.n	7188 <udc_stop+0x30>
	udc_num_configuration = 0;
    71d6:	2300      	movs	r3, #0
	udc_device_status =
    71d8:	2201      	movs	r2, #1
	udc_num_configuration = 0;
    71da:	702b      	strb	r3, [r5, #0]
	udc_device_status =
    71dc:	4b0b      	ldr	r3, [pc, #44]	; (720c <udc_stop+0xb4>)
    71de:	801a      	strh	r2, [r3, #0]
}
    71e0:	bc04      	pop	{r2}
    71e2:	4690      	mov	r8, r2
    71e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71e6:	4642      	mov	r2, r8
    71e8:	6013      	str	r3, [r2, #0]
    71ea:	6833      	ldr	r3, [r6, #0]
    71ec:	681b      	ldr	r3, [r3, #0]
    71ee:	7919      	ldrb	r1, [r3, #4]
    71f0:	e7c6      	b.n	7180 <udc_stop+0x28>
    71f2:	4642      	mov	r2, r8
    71f4:	6013      	str	r3, [r2, #0]
    71f6:	e7e5      	b.n	71c4 <udc_stop+0x6c>
    71f8:	00008a8d 	.word	0x00008a8d
    71fc:	20000c14 	.word	0x20000c14
    7200:	20000c18 	.word	0x20000c18
    7204:	20000c1c 	.word	0x20000c1c
    7208:	0000709d 	.word	0x0000709d
    720c:	20000c0a 	.word	0x20000c0a

00007210 <udc_reset>:
{
    7210:	b5f0      	push	{r4, r5, r6, r7, lr}
    7212:	46c6      	mov	lr, r8
    7214:	b500      	push	{lr}
	if (udc_num_configuration) {
    7216:	4d25      	ldr	r5, [pc, #148]	; (72ac <udc_reset+0x9c>)
    7218:	782a      	ldrb	r2, [r5, #0]
    721a:	2a00      	cmp	r2, #0
    721c:	d035      	beq.n	728a <udc_reset+0x7a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    721e:	4e24      	ldr	r6, [pc, #144]	; (72b0 <udc_reset+0xa0>)
    7220:	6833      	ldr	r3, [r6, #0]
    7222:	681b      	ldr	r3, [r3, #0]
    7224:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    7226:	2900      	cmp	r1, #0
    7228:	d02f      	beq.n	728a <udc_reset+0x7a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    722a:	4822      	ldr	r0, [pc, #136]	; (72b4 <udc_reset+0xa4>)
		for (iface_num = 0;
    722c:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    722e:	4680      	mov	r8, r0
    7230:	4f21      	ldr	r7, [pc, #132]	; (72b8 <udc_reset+0xa8>)
    7232:	e004      	b.n	723e <udc_reset+0x2e>
				iface_num++) {
    7234:	3401      	adds	r4, #1
    7236:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    7238:	428c      	cmp	r4, r1
    723a:	d226      	bcs.n	728a <udc_reset+0x7a>
    723c:	782a      	ldrb	r2, [r5, #0]
	if (0 == udc_num_configuration) {
    723e:	2a00      	cmp	r2, #0
    7240:	d0f8      	beq.n	7234 <udc_reset+0x24>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    7242:	4642      	mov	r2, r8
    7244:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    7246:	78d9      	ldrb	r1, [r3, #3]
    7248:	789a      	ldrb	r2, [r3, #2]
    724a:	0209      	lsls	r1, r1, #8
    724c:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    724e:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    7250:	2000      	movs	r0, #0
    7252:	4299      	cmp	r1, r3
    7254:	d805      	bhi.n	7262 <udc_reset+0x52>
    7256:	e022      	b.n	729e <udc_reset+0x8e>
				udc_ptr_iface->bLength);
    7258:	781a      	ldrb	r2, [r3, #0]
    725a:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    725c:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    725e:	4299      	cmp	r1, r3
    7260:	d91b      	bls.n	729a <udc_reset+0x8a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    7262:	785a      	ldrb	r2, [r3, #1]
    7264:	2a04      	cmp	r2, #4
    7266:	d1f7      	bne.n	7258 <udc_reset+0x48>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    7268:	789a      	ldrb	r2, [r3, #2]
    726a:	42a2      	cmp	r2, r4
    726c:	d1f4      	bne.n	7258 <udc_reset+0x48>
    726e:	78da      	ldrb	r2, [r3, #3]
    7270:	2a00      	cmp	r2, #0
    7272:	d1f1      	bne.n	7258 <udc_reset+0x48>
    7274:	2800      	cmp	r0, #0
    7276:	d116      	bne.n	72a6 <udc_reset+0x96>
    7278:	0020      	movs	r0, r4
    727a:	47b8      	blx	r7
    727c:	6833      	ldr	r3, [r6, #0]
				iface_num++) {
    727e:	3401      	adds	r4, #1
    7280:	681b      	ldr	r3, [r3, #0]
    7282:	b2e4      	uxtb	r4, r4
    7284:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    7286:	428c      	cmp	r4, r1
    7288:	d3d8      	bcc.n	723c <udc_reset+0x2c>
	udc_num_configuration = 0;
    728a:	2300      	movs	r3, #0
	udc_device_status =
    728c:	2201      	movs	r2, #1
	udc_num_configuration = 0;
    728e:	702b      	strb	r3, [r5, #0]
	udc_device_status =
    7290:	4b0a      	ldr	r3, [pc, #40]	; (72bc <udc_reset+0xac>)
    7292:	801a      	strh	r2, [r3, #0]
}
    7294:	bc04      	pop	{r2}
    7296:	4690      	mov	r8, r2
    7298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    729a:	4642      	mov	r2, r8
    729c:	6013      	str	r3, [r2, #0]
    729e:	6833      	ldr	r3, [r6, #0]
    72a0:	681b      	ldr	r3, [r3, #0]
    72a2:	7919      	ldrb	r1, [r3, #4]
    72a4:	e7c6      	b.n	7234 <udc_reset+0x24>
    72a6:	4642      	mov	r2, r8
    72a8:	6013      	str	r3, [r2, #0]
    72aa:	e7e5      	b.n	7278 <udc_reset+0x68>
    72ac:	20000c14 	.word	0x20000c14
    72b0:	20000c18 	.word	0x20000c18
    72b4:	20000c1c 	.word	0x20000c1c
    72b8:	0000709d 	.word	0x0000709d
    72bc:	20000c0a 	.word	0x20000c0a

000072c0 <udc_sof_notify>:
{
    72c0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    72c2:	4b0d      	ldr	r3, [pc, #52]	; (72f8 <udc_sof_notify+0x38>)
    72c4:	781b      	ldrb	r3, [r3, #0]
    72c6:	2b00      	cmp	r3, #0
    72c8:	d014      	beq.n	72f4 <udc_sof_notify+0x34>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    72ca:	4d0c      	ldr	r5, [pc, #48]	; (72fc <udc_sof_notify+0x3c>)
    72cc:	682a      	ldr	r2, [r5, #0]
    72ce:	6813      	ldr	r3, [r2, #0]
    72d0:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    72d2:	2900      	cmp	r1, #0
    72d4:	d00e      	beq.n	72f4 <udc_sof_notify+0x34>
    72d6:	2400      	movs	r4, #0
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    72d8:	6850      	ldr	r0, [r2, #4]
    72da:	00a3      	lsls	r3, r4, #2
    72dc:	581b      	ldr	r3, [r3, r0]
    72de:	691b      	ldr	r3, [r3, #16]
    72e0:	2b00      	cmp	r3, #0
    72e2:	d003      	beq.n	72ec <udc_sof_notify+0x2c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    72e4:	4798      	blx	r3
    72e6:	682a      	ldr	r2, [r5, #0]
    72e8:	6813      	ldr	r3, [r2, #0]
    72ea:	7919      	ldrb	r1, [r3, #4]
				iface_num++) {
    72ec:	3401      	adds	r4, #1
    72ee:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    72f0:	428c      	cmp	r4, r1
    72f2:	d3f1      	bcc.n	72d8 <udc_sof_notify+0x18>
}
    72f4:	bd70      	pop	{r4, r5, r6, pc}
    72f6:	46c0      	nop			; (mov r8, r8)
    72f8:	20000c14 	.word	0x20000c14
    72fc:	20000c18 	.word	0x20000c18

00007300 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    7300:	b5f0      	push	{r4, r5, r6, r7, lr}
    7302:	46de      	mov	lr, fp
    7304:	4657      	mov	r7, sl
    7306:	464e      	mov	r6, r9
    7308:	4645      	mov	r5, r8
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    730a:	2300      	movs	r3, #0
{
    730c:	b5e0      	push	{r5, r6, r7, lr}
	udd_g_ctrlreq.payload_size = 0;
    730e:	4cba      	ldr	r4, [pc, #744]	; (75f8 <udc_process_setup+0x2f8>)
{
    7310:	b083      	sub	sp, #12
	udd_g_ctrlreq.payload_size = 0;
    7312:	81a3      	strh	r3, [r4, #12]
	udd_g_ctrlreq.callback = NULL;
    7314:	6123      	str	r3, [r4, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    7316:	6163      	str	r3, [r4, #20]

	if (Udd_setup_is_in()) {
    7318:	7823      	ldrb	r3, [r4, #0]
    731a:	b25a      	sxtb	r2, r3
    731c:	2a00      	cmp	r2, #0
    731e:	db13      	blt.n	7348 <udc_process_setup+0x48>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    7320:	2260      	movs	r2, #96	; 0x60
    7322:	421a      	tst	r2, r3
    7324:	d100      	bne.n	7328 <udc_process_setup+0x28>
    7326:	e071      	b.n	740c <udc_process_setup+0x10c>
    7328:	221f      	movs	r2, #31
    732a:	4013      	ands	r3, r2
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    732c:	2b01      	cmp	r3, #1
    732e:	d100      	bne.n	7332 <udc_process_setup+0x32>
    7330:	e08d      	b.n	744e <udc_process_setup+0x14e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    7332:	2b02      	cmp	r3, #2
    7334:	d023      	beq.n	737e <udc_process_setup+0x7e>
			return false; // Error from USB host
    7336:	2500      	movs	r5, #0
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    7338:	0028      	movs	r0, r5
    733a:	b003      	add	sp, #12
    733c:	bc3c      	pop	{r2, r3, r4, r5}
    733e:	4690      	mov	r8, r2
    7340:	4699      	mov	r9, r3
    7342:	46a2      	mov	sl, r4
    7344:	46ab      	mov	fp, r5
    7346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    7348:	88e2      	ldrh	r2, [r4, #6]
    734a:	2a00      	cmp	r2, #0
    734c:	d0f3      	beq.n	7336 <udc_process_setup+0x36>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    734e:	2160      	movs	r1, #96	; 0x60
    7350:	4219      	tst	r1, r3
    7352:	d1e9      	bne.n	7328 <udc_process_setup+0x28>
    7354:	211f      	movs	r1, #31
    7356:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    7358:	d000      	beq.n	735c <udc_process_setup+0x5c>
    735a:	e0e3      	b.n	7524 <udc_process_setup+0x224>
			switch (udd_g_ctrlreq.req.bRequest) {
    735c:	7863      	ldrb	r3, [r4, #1]
    735e:	2b06      	cmp	r3, #6
    7360:	d100      	bne.n	7364 <udc_process_setup+0x64>
    7362:	e1a9      	b.n	76b8 <udc_process_setup+0x3b8>
    7364:	2b08      	cmp	r3, #8
    7366:	d100      	bne.n	736a <udc_process_setup+0x6a>
    7368:	e19d      	b.n	76a6 <udc_process_setup+0x3a6>
    736a:	2b00      	cmp	r3, #0
    736c:	d1e3      	bne.n	7336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    736e:	2a02      	cmp	r2, #2
    7370:	d1e1      	bne.n	7336 <udc_process_setup+0x36>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    7372:	391d      	subs	r1, #29
    7374:	48a1      	ldr	r0, [pc, #644]	; (75fc <udc_process_setup+0x2fc>)
    7376:	4ba2      	ldr	r3, [pc, #648]	; (7600 <udc_process_setup+0x300>)
    7378:	4798      	blx	r3
			return true;
    737a:	2501      	movs	r5, #1
    737c:	e7dc      	b.n	7338 <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
    737e:	4fa1      	ldr	r7, [pc, #644]	; (7604 <udc_process_setup+0x304>)
    7380:	783b      	ldrb	r3, [r7, #0]
    7382:	2b00      	cmp	r3, #0
    7384:	d0d7      	beq.n	7336 <udc_process_setup+0x36>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7386:	4ea0      	ldr	r6, [pc, #640]	; (7608 <udc_process_setup+0x308>)
    7388:	6833      	ldr	r3, [r6, #0]
    738a:	681a      	ldr	r2, [r3, #0]
    738c:	7912      	ldrb	r2, [r2, #4]
    738e:	2a00      	cmp	r2, #0
    7390:	d0d1      	beq.n	7336 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    7392:	4a9e      	ldr	r2, [pc, #632]	; (760c <udc_process_setup+0x30c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7394:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    7396:	4690      	mov	r8, r2
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    7398:	685b      	ldr	r3, [r3, #4]
    739a:	00a2      	lsls	r2, r4, #2
    739c:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    739e:	68eb      	ldr	r3, [r5, #12]
    73a0:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    73a2:	783b      	ldrb	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    73a4:	4684      	mov	ip, r0
	if (0 == udc_num_configuration) {
    73a6:	2b00      	cmp	r3, #0
    73a8:	d0c5      	beq.n	7336 <udc_process_setup+0x36>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    73aa:	6833      	ldr	r3, [r6, #0]
    73ac:	681b      	ldr	r3, [r3, #0]
    73ae:	791a      	ldrb	r2, [r3, #4]
    73b0:	42a2      	cmp	r2, r4
    73b2:	d9c0      	bls.n	7336 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    73b4:	4642      	mov	r2, r8
    73b6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    73b8:	78d9      	ldrb	r1, [r3, #3]
    73ba:	789a      	ldrb	r2, [r3, #2]
    73bc:	0209      	lsls	r1, r1, #8
    73be:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    73c0:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    73c2:	428b      	cmp	r3, r1
    73c4:	d2b7      	bcs.n	7336 <udc_process_setup+0x36>
    73c6:	2000      	movs	r0, #0
    73c8:	e004      	b.n	73d4 <udc_process_setup+0xd4>
				udc_ptr_iface->bLength);
    73ca:	781a      	ldrb	r2, [r3, #0]
    73cc:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    73ce:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    73d0:	4299      	cmp	r1, r3
    73d2:	d918      	bls.n	7406 <udc_process_setup+0x106>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    73d4:	785a      	ldrb	r2, [r3, #1]
    73d6:	2a04      	cmp	r2, #4
    73d8:	d1f7      	bne.n	73ca <udc_process_setup+0xca>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    73da:	789a      	ldrb	r2, [r3, #2]
    73dc:	42a2      	cmp	r2, r4
    73de:	d1f4      	bne.n	73ca <udc_process_setup+0xca>
    73e0:	78da      	ldrb	r2, [r3, #3]
    73e2:	4562      	cmp	r2, ip
    73e4:	d1f1      	bne.n	73ca <udc_process_setup+0xca>
    73e6:	2800      	cmp	r0, #0
    73e8:	d000      	beq.n	73ec <udc_process_setup+0xec>
    73ea:	e2a9      	b.n	7940 <udc_process_setup+0x640>
		if (udi_api->setup()) {
    73ec:	68ab      	ldr	r3, [r5, #8]
    73ee:	4798      	blx	r3
    73f0:	2800      	cmp	r0, #0
    73f2:	d000      	beq.n	73f6 <udc_process_setup+0xf6>
    73f4:	e082      	b.n	74fc <udc_process_setup+0x1fc>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    73f6:	6833      	ldr	r3, [r6, #0]
			iface_num++) {
    73f8:	3401      	adds	r4, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    73fa:	681a      	ldr	r2, [r3, #0]
			iface_num++) {
    73fc:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    73fe:	7912      	ldrb	r2, [r2, #4]
    7400:	42a2      	cmp	r2, r4
    7402:	d8c9      	bhi.n	7398 <udc_process_setup+0x98>
    7404:	e797      	b.n	7336 <udc_process_setup+0x36>
    7406:	4642      	mov	r2, r8
    7408:	6013      	str	r3, [r2, #0]
    740a:	e794      	b.n	7336 <udc_process_setup+0x36>
    740c:	251f      	movs	r5, #31
    740e:	402b      	ands	r3, r5
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    7410:	d158      	bne.n	74c4 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
    7412:	7863      	ldrb	r3, [r4, #1]
    7414:	2b03      	cmp	r3, #3
    7416:	d100      	bne.n	741a <udc_process_setup+0x11a>
    7418:	e78d      	b.n	7336 <udc_process_setup+0x36>
    741a:	d971      	bls.n	7500 <udc_process_setup+0x200>
    741c:	2b05      	cmp	r3, #5
    741e:	d100      	bne.n	7422 <udc_process_setup+0x122>
    7420:	e0de      	b.n	75e0 <udc_process_setup+0x2e0>
    7422:	2b09      	cmp	r3, #9
    7424:	d000      	beq.n	7428 <udc_process_setup+0x128>
    7426:	e786      	b.n	7336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength) {
    7428:	88e3      	ldrh	r3, [r4, #6]
    742a:	2b00      	cmp	r3, #0
    742c:	d000      	beq.n	7430 <udc_process_setup+0x130>
    742e:	e782      	b.n	7336 <udc_process_setup+0x36>
	if (!udd_getaddress()) {
    7430:	4b77      	ldr	r3, [pc, #476]	; (7610 <udc_process_setup+0x310>)
    7432:	4798      	blx	r3
    7434:	2800      	cmp	r0, #0
    7436:	d006      	beq.n	7446 <udc_process_setup+0x146>
				udc_config.confdev_lsfs->bNumConfigurations) {
    7438:	4d76      	ldr	r5, [pc, #472]	; (7614 <udc_process_setup+0x314>)
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    743a:	78a2      	ldrb	r2, [r4, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    743c:	682b      	ldr	r3, [r5, #0]
    743e:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    7440:	429a      	cmp	r2, r3
    7442:	dc00      	bgt.n	7446 <udc_process_setup+0x146>
    7444:	e18f      	b.n	7766 <udc_process_setup+0x466>
    7446:	231f      	movs	r3, #31
    7448:	7822      	ldrb	r2, [r4, #0]
    744a:	4013      	ands	r3, r2
    744c:	e76e      	b.n	732c <udc_process_setup+0x2c>
    744e:	4f6d      	ldr	r7, [pc, #436]	; (7604 <udc_process_setup+0x304>)
    7450:	783b      	ldrb	r3, [r7, #0]
	if (0 == udc_num_configuration) {
    7452:	2b00      	cmp	r3, #0
    7454:	d100      	bne.n	7458 <udc_process_setup+0x158>
    7456:	e76e      	b.n	7336 <udc_process_setup+0x36>
    7458:	4e6b      	ldr	r6, [pc, #428]	; (7608 <udc_process_setup+0x308>)
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    745a:	6833      	ldr	r3, [r6, #0]
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    745c:	7925      	ldrb	r5, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    745e:	469c      	mov	ip, r3
    7460:	681b      	ldr	r3, [r3, #0]
    7462:	791a      	ldrb	r2, [r3, #4]
    7464:	42aa      	cmp	r2, r5
    7466:	d800      	bhi.n	746a <udc_process_setup+0x16a>
    7468:	e765      	b.n	7336 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    746a:	4a68      	ldr	r2, [pc, #416]	; (760c <udc_process_setup+0x30c>)
    746c:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    746e:	78d9      	ldrb	r1, [r3, #3]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    7470:	4690      	mov	r8, r2
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    7472:	789a      	ldrb	r2, [r3, #2]
    7474:	0209      	lsls	r1, r1, #8
    7476:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    7478:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    747a:	428b      	cmp	r3, r1
    747c:	d21e      	bcs.n	74bc <udc_process_setup+0x1bc>
    747e:	2000      	movs	r0, #0
    7480:	e005      	b.n	748e <udc_process_setup+0x18e>
				udc_ptr_iface->bLength);
    7482:	781a      	ldrb	r2, [r3, #0]
    7484:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    7486:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    7488:	4299      	cmp	r1, r3
    748a:	d800      	bhi.n	748e <udc_process_setup+0x18e>
    748c:	e0b0      	b.n	75f0 <udc_process_setup+0x2f0>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    748e:	785a      	ldrb	r2, [r3, #1]
    7490:	2a04      	cmp	r2, #4
    7492:	d1f6      	bne.n	7482 <udc_process_setup+0x182>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    7494:	789a      	ldrb	r2, [r3, #2]
    7496:	42aa      	cmp	r2, r5
    7498:	d1f3      	bne.n	7482 <udc_process_setup+0x182>
    749a:	78da      	ldrb	r2, [r3, #3]
    749c:	2a00      	cmp	r2, #0
    749e:	d1f0      	bne.n	7482 <udc_process_setup+0x182>
    74a0:	2800      	cmp	r0, #0
    74a2:	d000      	beq.n	74a6 <udc_process_setup+0x1a6>
    74a4:	e249      	b.n	793a <udc_process_setup+0x63a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    74a6:	4663      	mov	r3, ip
    74a8:	685b      	ldr	r3, [r3, #4]
    74aa:	00aa      	lsls	r2, r5, #2
    74ac:	58d3      	ldr	r3, [r2, r3]
    74ae:	4699      	mov	r9, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    74b0:	68db      	ldr	r3, [r3, #12]
    74b2:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    74b4:	783b      	ldrb	r3, [r7, #0]
    74b6:	2b00      	cmp	r3, #0
    74b8:	d000      	beq.n	74bc <udc_process_setup+0x1bc>
    74ba:	e128      	b.n	770e <udc_process_setup+0x40e>
    74bc:	231f      	movs	r3, #31
    74be:	7822      	ldrb	r2, [r4, #0]
    74c0:	4013      	ands	r3, r2
    74c2:	e736      	b.n	7332 <udc_process_setup+0x32>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    74c4:	2b01      	cmp	r3, #1
    74c6:	d045      	beq.n	7554 <udc_process_setup+0x254>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    74c8:	2b02      	cmp	r3, #2
    74ca:	d000      	beq.n	74ce <udc_process_setup+0x1ce>
    74cc:	e733      	b.n	7336 <udc_process_setup+0x36>
			switch (udd_g_ctrlreq.req.bRequest) {
    74ce:	7863      	ldrb	r3, [r4, #1]
    74d0:	2b01      	cmp	r3, #1
    74d2:	d100      	bne.n	74d6 <udc_process_setup+0x1d6>
    74d4:	e0b0      	b.n	7638 <udc_process_setup+0x338>
    74d6:	2b03      	cmp	r3, #3
    74d8:	d000      	beq.n	74dc <udc_process_setup+0x1dc>
    74da:	e750      	b.n	737e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wLength) {
    74dc:	88e3      	ldrh	r3, [r4, #6]
    74de:	2b00      	cmp	r3, #0
    74e0:	d000      	beq.n	74e4 <udc_process_setup+0x1e4>
    74e2:	e74c      	b.n	737e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    74e4:	8863      	ldrh	r3, [r4, #2]
    74e6:	2b00      	cmp	r3, #0
    74e8:	d000      	beq.n	74ec <udc_process_setup+0x1ec>
    74ea:	e748      	b.n	737e <udc_process_setup+0x7e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    74ec:	7920      	ldrb	r0, [r4, #4]
    74ee:	4b4a      	ldr	r3, [pc, #296]	; (7618 <udc_process_setup+0x318>)
    74f0:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    74f2:	7920      	ldrb	r0, [r4, #4]
    74f4:	4b49      	ldr	r3, [pc, #292]	; (761c <udc_process_setup+0x31c>)
    74f6:	4798      	blx	r3
		if (udc_reqstd()) {
    74f8:	2800      	cmp	r0, #0
    74fa:	d0a4      	beq.n	7446 <udc_process_setup+0x146>
			return true;
    74fc:	2501      	movs	r5, #1
    74fe:	e71b      	b.n	7338 <udc_process_setup+0x38>
			switch (udd_g_ctrlreq.req.bRequest) {
    7500:	2b01      	cmp	r3, #1
    7502:	d000      	beq.n	7506 <udc_process_setup+0x206>
    7504:	e717      	b.n	7336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength) {
    7506:	88e3      	ldrh	r3, [r4, #6]
    7508:	2b00      	cmp	r3, #0
    750a:	d000      	beq.n	750e <udc_process_setup+0x20e>
    750c:	e713      	b.n	7336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    750e:	8863      	ldrh	r3, [r4, #2]
    7510:	2b01      	cmp	r3, #1
    7512:	d000      	beq.n	7516 <udc_process_setup+0x216>
    7514:	e70f      	b.n	7336 <udc_process_setup+0x36>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    7516:	2102      	movs	r1, #2
    7518:	4a38      	ldr	r2, [pc, #224]	; (75fc <udc_process_setup+0x2fc>)
			return true;
    751a:	2501      	movs	r5, #1
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    751c:	8813      	ldrh	r3, [r2, #0]
    751e:	438b      	bics	r3, r1
    7520:	8013      	strh	r3, [r2, #0]
    7522:	e709      	b.n	7338 <udc_process_setup+0x38>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    7524:	2b01      	cmp	r3, #1
    7526:	d100      	bne.n	752a <udc_process_setup+0x22a>
    7528:	e092      	b.n	7650 <udc_process_setup+0x350>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    752a:	2b02      	cmp	r3, #2
    752c:	d000      	beq.n	7530 <udc_process_setup+0x230>
    752e:	e702      	b.n	7336 <udc_process_setup+0x36>
			switch (udd_g_ctrlreq.req.bRequest) {
    7530:	7863      	ldrb	r3, [r4, #1]
    7532:	2b00      	cmp	r3, #0
    7534:	d000      	beq.n	7538 <udc_process_setup+0x238>
    7536:	e722      	b.n	737e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    7538:	2a02      	cmp	r2, #2
    753a:	d000      	beq.n	753e <udc_process_setup+0x23e>
    753c:	e71f      	b.n	737e <udc_process_setup+0x7e>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    753e:	4b38      	ldr	r3, [pc, #224]	; (7620 <udc_process_setup+0x320>)
    7540:	7920      	ldrb	r0, [r4, #4]
    7542:	4798      	blx	r3
    7544:	4b37      	ldr	r3, [pc, #220]	; (7624 <udc_process_setup+0x324>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    7546:	2102      	movs	r1, #2
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    7548:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    754a:	0018      	movs	r0, r3
    754c:	4b2c      	ldr	r3, [pc, #176]	; (7600 <udc_process_setup+0x300>)
    754e:	4798      	blx	r3
			return true;
    7550:	2501      	movs	r5, #1
    7552:	e6f1      	b.n	7338 <udc_process_setup+0x38>
			switch (udd_g_ctrlreq.req.bRequest) {
    7554:	7863      	ldrb	r3, [r4, #1]
    7556:	2b0b      	cmp	r3, #11
    7558:	d000      	beq.n	755c <udc_process_setup+0x25c>
    755a:	e774      	b.n	7446 <udc_process_setup+0x146>
	if (udd_g_ctrlreq.req.wLength) {
    755c:	88e3      	ldrh	r3, [r4, #6]
    755e:	2b00      	cmp	r3, #0
    7560:	d000      	beq.n	7564 <udc_process_setup+0x264>
    7562:	e774      	b.n	744e <udc_process_setup+0x14e>
	if (!udc_num_configuration) {
    7564:	4b27      	ldr	r3, [pc, #156]	; (7604 <udc_process_setup+0x304>)
    7566:	4699      	mov	r9, r3
    7568:	781b      	ldrb	r3, [r3, #0]
    756a:	2b00      	cmp	r3, #0
    756c:	d100      	bne.n	7570 <udc_process_setup+0x270>
    756e:	e6e2      	b.n	7336 <udc_process_setup+0x36>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7570:	7927      	ldrb	r7, [r4, #4]
    7572:	4b2d      	ldr	r3, [pc, #180]	; (7628 <udc_process_setup+0x328>)
    7574:	2100      	movs	r1, #0
    7576:	0038      	movs	r0, r7
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    7578:	8866      	ldrh	r6, [r4, #2]
    757a:	4698      	mov	r8, r3
    757c:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
    757e:	2800      	cmp	r0, #0
    7580:	d100      	bne.n	7584 <udc_process_setup+0x284>
    7582:	e760      	b.n	7446 <udc_process_setup+0x146>
    7584:	0038      	movs	r0, r7
    7586:	4b29      	ldr	r3, [pc, #164]	; (762c <udc_process_setup+0x32c>)
    7588:	4798      	blx	r3
	if (!udc_iface_disable(iface_num)) {
    758a:	2800      	cmp	r0, #0
    758c:	d100      	bne.n	7590 <udc_process_setup+0x290>
    758e:	e1cc      	b.n	792a <udc_process_setup+0x62a>
	if (0 == udc_num_configuration) {
    7590:	464b      	mov	r3, r9
    7592:	781b      	ldrb	r3, [r3, #0]
    7594:	2b00      	cmp	r3, #0
    7596:	d100      	bne.n	759a <udc_process_setup+0x29a>
    7598:	e755      	b.n	7446 <udc_process_setup+0x146>
    759a:	b2f1      	uxtb	r1, r6
    759c:	0038      	movs	r0, r7
    759e:	47c0      	blx	r8
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    75a0:	2800      	cmp	r0, #0
    75a2:	d100      	bne.n	75a6 <udc_process_setup+0x2a6>
    75a4:	e74f      	b.n	7446 <udc_process_setup+0x146>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    75a6:	4b19      	ldr	r3, [pc, #100]	; (760c <udc_process_setup+0x30c>)
    75a8:	4e17      	ldr	r6, [pc, #92]	; (7608 <udc_process_setup+0x308>)
    75aa:	681d      	ldr	r5, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    75ac:	4b20      	ldr	r3, [pc, #128]	; (7630 <udc_process_setup+0x330>)
    75ae:	4698      	mov	r8, r3
			udc_ptr_conf->desc +
    75b0:	6830      	ldr	r0, [r6, #0]
    75b2:	6803      	ldr	r3, [r0, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    75b4:	78da      	ldrb	r2, [r3, #3]
    75b6:	7899      	ldrb	r1, [r3, #2]
    75b8:	0212      	lsls	r2, r2, #8
    75ba:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    75bc:	189b      	adds	r3, r3, r2
    75be:	e005      	b.n	75cc <udc_process_setup+0x2cc>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    75c0:	786a      	ldrb	r2, [r5, #1]
    75c2:	2a04      	cmp	r2, #4
    75c4:	d006      	beq.n	75d4 <udc_process_setup+0x2d4>
		if (desc_id == desc->bDescriptorType) {
    75c6:	2a05      	cmp	r2, #5
    75c8:	d100      	bne.n	75cc <udc_process_setup+0x2cc>
    75ca:	e095      	b.n	76f8 <udc_process_setup+0x3f8>
			desc->bLength);
    75cc:	782a      	ldrb	r2, [r5, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    75ce:	18ad      	adds	r5, r5, r2
	while (ptr_eof_desc > desc) {
    75d0:	42ab      	cmp	r3, r5
    75d2:	d8f5      	bhi.n	75c0 <udc_process_setup+0x2c0>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    75d4:	6843      	ldr	r3, [r0, #4]
    75d6:	00bf      	lsls	r7, r7, #2
    75d8:	58fb      	ldr	r3, [r7, r3]
    75da:	681b      	ldr	r3, [r3, #0]
    75dc:	4798      	blx	r3
    75de:	e78b      	b.n	74f8 <udc_process_setup+0x1f8>
	if (udd_g_ctrlreq.req.wLength) {
    75e0:	88e3      	ldrh	r3, [r4, #6]
    75e2:	2b00      	cmp	r3, #0
    75e4:	d000      	beq.n	75e8 <udc_process_setup+0x2e8>
    75e6:	e6a6      	b.n	7336 <udc_process_setup+0x36>
	udd_g_ctrlreq.callback = udc_valid_address;
    75e8:	4b12      	ldr	r3, [pc, #72]	; (7634 <udc_process_setup+0x334>)
			return true;
    75ea:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
    75ec:	6123      	str	r3, [r4, #16]
    75ee:	e6a3      	b.n	7338 <udc_process_setup+0x38>
    75f0:	4642      	mov	r2, r8
    75f2:	6013      	str	r3, [r2, #0]
    75f4:	e762      	b.n	74bc <udc_process_setup+0x1bc>
    75f6:	46c0      	nop			; (mov r8, r8)
    75f8:	200010e4 	.word	0x200010e4
    75fc:	20000c0a 	.word	0x20000c0a
    7600:	00008855 	.word	0x00008855
    7604:	20000c14 	.word	0x20000c14
    7608:	20000c18 	.word	0x20000c18
    760c:	20000c1c 	.word	0x20000c1c
    7610:	00008845 	.word	0x00008845
    7614:	2000004c 	.word	0x2000004c
    7618:	00008155 	.word	0x00008155
    761c:	000084b1 	.word	0x000084b1
    7620:	0000849d 	.word	0x0000849d
    7624:	20000c0c 	.word	0x20000c0c
    7628:	00007041 	.word	0x00007041
    762c:	0000709d 	.word	0x0000709d
    7630:	00008391 	.word	0x00008391
    7634:	00007029 	.word	0x00007029
	if (udd_g_ctrlreq.req.wLength) {
    7638:	88e3      	ldrh	r3, [r4, #6]
    763a:	2b00      	cmp	r3, #0
    763c:	d000      	beq.n	7640 <udc_process_setup+0x340>
    763e:	e69e      	b.n	737e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    7640:	8863      	ldrh	r3, [r4, #2]
    7642:	2b00      	cmp	r3, #0
    7644:	d000      	beq.n	7648 <udc_process_setup+0x348>
    7646:	e69a      	b.n	737e <udc_process_setup+0x7e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    7648:	7920      	ldrb	r0, [r4, #4]
    764a:	4bc0      	ldr	r3, [pc, #768]	; (794c <udc_process_setup+0x64c>)
    764c:	4798      	blx	r3
    764e:	e753      	b.n	74f8 <udc_process_setup+0x1f8>
			switch (udd_g_ctrlreq.req.bRequest) {
    7650:	7863      	ldrb	r3, [r4, #1]
    7652:	2b0a      	cmp	r3, #10
    7654:	d000      	beq.n	7658 <udc_process_setup+0x358>
    7656:	e6f6      	b.n	7446 <udc_process_setup+0x146>
	if (udd_g_ctrlreq.req.wLength != 1) {
    7658:	2a01      	cmp	r2, #1
    765a:	d000      	beq.n	765e <udc_process_setup+0x35e>
    765c:	e6f7      	b.n	744e <udc_process_setup+0x14e>
	if (!udc_num_configuration) {
    765e:	4fbc      	ldr	r7, [pc, #752]	; (7950 <udc_process_setup+0x650>)
    7660:	783b      	ldrb	r3, [r7, #0]
    7662:	2b00      	cmp	r3, #0
    7664:	d100      	bne.n	7668 <udc_process_setup+0x368>
    7666:	e666      	b.n	7336 <udc_process_setup+0x36>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7668:	7923      	ldrb	r3, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    766a:	4eba      	ldr	r6, [pc, #744]	; (7954 <udc_process_setup+0x654>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    766c:	4698      	mov	r8, r3
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    766e:	6833      	ldr	r3, [r6, #0]
    7670:	4699      	mov	r9, r3
    7672:	681b      	ldr	r3, [r3, #0]
    7674:	791b      	ldrb	r3, [r3, #4]
    7676:	4543      	cmp	r3, r8
    7678:	d800      	bhi.n	767c <udc_process_setup+0x37c>
    767a:	e6ee      	b.n	745a <udc_process_setup+0x15a>
    767c:	2100      	movs	r1, #0
    767e:	4640      	mov	r0, r8
    7680:	4bb5      	ldr	r3, [pc, #724]	; (7958 <udc_process_setup+0x658>)
    7682:	4798      	blx	r3
    7684:	1e05      	subs	r5, r0, #0
	if (!udc_update_iface_desc(iface_num, 0)) {
    7686:	d100      	bne.n	768a <udc_process_setup+0x38a>
    7688:	e6dd      	b.n	7446 <udc_process_setup+0x146>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    768a:	464b      	mov	r3, r9
    768c:	685a      	ldr	r2, [r3, #4]
    768e:	4643      	mov	r3, r8
    7690:	009b      	lsls	r3, r3, #2
	udc_iface_setting = udi_api->getsetting();
    7692:	589b      	ldr	r3, [r3, r2]
    7694:	68db      	ldr	r3, [r3, #12]
    7696:	4798      	blx	r3
    7698:	4bb0      	ldr	r3, [pc, #704]	; (795c <udc_process_setup+0x65c>)
	udd_set_setup_payload(&udc_iface_setting,1);
    769a:	2101      	movs	r1, #1
	udc_iface_setting = udi_api->getsetting();
    769c:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    769e:	0018      	movs	r0, r3
    76a0:	4baf      	ldr	r3, [pc, #700]	; (7960 <udc_process_setup+0x660>)
    76a2:	4798      	blx	r3
    76a4:	e648      	b.n	7338 <udc_process_setup+0x38>
	if (udd_g_ctrlreq.req.wLength != 1) {
    76a6:	2a01      	cmp	r2, #1
    76a8:	d000      	beq.n	76ac <udc_process_setup+0x3ac>
    76aa:	e644      	b.n	7336 <udc_process_setup+0x36>
	udd_set_setup_payload(&udc_num_configuration,1);
    76ac:	2101      	movs	r1, #1
    76ae:	48a8      	ldr	r0, [pc, #672]	; (7950 <udc_process_setup+0x650>)
    76b0:	4bab      	ldr	r3, [pc, #684]	; (7960 <udc_process_setup+0x660>)
    76b2:	4798      	blx	r3
			return true;
    76b4:	2501      	movs	r5, #1
    76b6:	e63f      	b.n	7338 <udc_process_setup+0x38>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    76b8:	8863      	ldrh	r3, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    76ba:	0a1d      	lsrs	r5, r3, #8
    76bc:	2d02      	cmp	r5, #2
    76be:	d100      	bne.n	76c2 <udc_process_setup+0x3c2>
    76c0:	e118      	b.n	78f4 <udc_process_setup+0x5f4>
    76c2:	d800      	bhi.n	76c6 <udc_process_setup+0x3c6>
    76c4:	e0cb      	b.n	785e <udc_process_setup+0x55e>
    76c6:	2d03      	cmp	r5, #3
    76c8:	d100      	bne.n	76cc <udc_process_setup+0x3cc>
    76ca:	e0d4      	b.n	7876 <udc_process_setup+0x576>
    76cc:	2d0f      	cmp	r5, #15
    76ce:	d000      	beq.n	76d2 <udc_process_setup+0x3d2>
    76d0:	e631      	b.n	7336 <udc_process_setup+0x36>
		if (udc_config.conf_bos == NULL) {
    76d2:	4ba4      	ldr	r3, [pc, #656]	; (7964 <udc_process_setup+0x664>)
    76d4:	6898      	ldr	r0, [r3, #8]
    76d6:	2800      	cmp	r0, #0
    76d8:	d100      	bne.n	76dc <udc_process_setup+0x3dc>
    76da:	e62c      	b.n	7336 <udc_process_setup+0x36>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    76dc:	78c1      	ldrb	r1, [r0, #3]
    76de:	7883      	ldrb	r3, [r0, #2]
    76e0:	0209      	lsls	r1, r1, #8
    76e2:	4319      	orrs	r1, r3
    76e4:	4b9e      	ldr	r3, [pc, #632]	; (7960 <udc_process_setup+0x660>)
    76e6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    76e8:	88e3      	ldrh	r3, [r4, #6]
    76ea:	89a2      	ldrh	r2, [r4, #12]
    76ec:	429a      	cmp	r2, r3
    76ee:	d800      	bhi.n	76f2 <udc_process_setup+0x3f2>
    76f0:	e704      	b.n	74fc <udc_process_setup+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    76f2:	81a3      	strh	r3, [r4, #12]
			return true;
    76f4:	2501      	movs	r5, #1
    76f6:	e61f      	b.n	7338 <udc_process_setup+0x38>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    76f8:	796a      	ldrb	r2, [r5, #5]
    76fa:	792b      	ldrb	r3, [r5, #4]
    76fc:	0212      	lsls	r2, r2, #8
    76fe:	431a      	orrs	r2, r3
    7700:	78e9      	ldrb	r1, [r5, #3]
    7702:	78a8      	ldrb	r0, [r5, #2]
    7704:	47c0      	blx	r8
    7706:	2800      	cmp	r0, #0
    7708:	d000      	beq.n	770c <udc_process_setup+0x40c>
    770a:	e751      	b.n	75b0 <udc_process_setup+0x2b0>
    770c:	e69b      	b.n	7446 <udc_process_setup+0x146>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    770e:	6833      	ldr	r3, [r6, #0]
    7710:	681b      	ldr	r3, [r3, #0]
    7712:	791a      	ldrb	r2, [r3, #4]
    7714:	42aa      	cmp	r2, r5
    7716:	d800      	bhi.n	771a <udc_process_setup+0x41a>
    7718:	e6d0      	b.n	74bc <udc_process_setup+0x1bc>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    771a:	4642      	mov	r2, r8
    771c:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    771e:	78da      	ldrb	r2, [r3, #3]
    7720:	7899      	ldrb	r1, [r3, #2]
    7722:	0212      	lsls	r2, r2, #8
    7724:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    7726:	189a      	adds	r2, r3, r2
	while (ptr_end_desc >
    7728:	4293      	cmp	r3, r2
    772a:	d300      	bcc.n	772e <udc_process_setup+0x42e>
    772c:	e6c6      	b.n	74bc <udc_process_setup+0x1bc>
    772e:	2600      	movs	r6, #0
    7730:	e005      	b.n	773e <udc_process_setup+0x43e>
				udc_ptr_iface->bLength);
    7732:	7819      	ldrb	r1, [r3, #0]
    7734:	2601      	movs	r6, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    7736:	185b      	adds	r3, r3, r1
	while (ptr_end_desc >
    7738:	429a      	cmp	r2, r3
    773a:	d800      	bhi.n	773e <udc_process_setup+0x43e>
    773c:	e758      	b.n	75f0 <udc_process_setup+0x2f0>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    773e:	7859      	ldrb	r1, [r3, #1]
    7740:	2904      	cmp	r1, #4
    7742:	d1f6      	bne.n	7732 <udc_process_setup+0x432>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    7744:	7899      	ldrb	r1, [r3, #2]
    7746:	42a9      	cmp	r1, r5
    7748:	d1f3      	bne.n	7732 <udc_process_setup+0x432>
    774a:	78d9      	ldrb	r1, [r3, #3]
    774c:	4281      	cmp	r1, r0
    774e:	d1f0      	bne.n	7732 <udc_process_setup+0x432>
    7750:	2e00      	cmp	r6, #0
    7752:	d000      	beq.n	7756 <udc_process_setup+0x456>
    7754:	e0f7      	b.n	7946 <udc_process_setup+0x646>
	return udi_api->setup();
    7756:	464b      	mov	r3, r9
    7758:	689b      	ldr	r3, [r3, #8]
    775a:	4798      	blx	r3
		if (udc_req_iface()) {
    775c:	2800      	cmp	r0, #0
    775e:	d100      	bne.n	7762 <udc_process_setup+0x462>
    7760:	e6ac      	b.n	74bc <udc_process_setup+0x1bc>
			return true;
    7762:	2501      	movs	r5, #1
    7764:	e5e8      	b.n	7338 <udc_process_setup+0x38>
	udc_reset();
    7766:	4b80      	ldr	r3, [pc, #512]	; (7968 <udc_process_setup+0x668>)
    7768:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    776a:	78a3      	ldrb	r3, [r4, #2]
    776c:	4f78      	ldr	r7, [pc, #480]	; (7950 <udc_process_setup+0x650>)
    776e:	703b      	strb	r3, [r7, #0]
	if (udc_num_configuration == 0) {
    7770:	2b00      	cmp	r3, #0
    7772:	d100      	bne.n	7776 <udc_process_setup+0x476>
    7774:	e6c2      	b.n	74fc <udc_process_setup+0x1fc>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    7776:	4a7d      	ldr	r2, [pc, #500]	; (796c <udc_process_setup+0x66c>)
    7778:	6868      	ldr	r0, [r5, #4]
    777a:	4694      	mov	ip, r2
    777c:	4463      	add	r3, ip
    777e:	00db      	lsls	r3, r3, #3
    7780:	18c0      	adds	r0, r0, r3
    7782:	4e74      	ldr	r6, [pc, #464]	; (7954 <udc_process_setup+0x654>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7784:	6803      	ldr	r3, [r0, #0]
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    7786:	6030      	str	r0, [r6, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7788:	791a      	ldrb	r2, [r3, #4]
    778a:	2a00      	cmp	r2, #0
    778c:	d100      	bne.n	7790 <udc_process_setup+0x490>
    778e:	e6b5      	b.n	74fc <udc_process_setup+0x1fc>
    7790:	2200      	movs	r2, #0
    7792:	4691      	mov	r9, r2
    7794:	4a76      	ldr	r2, [pc, #472]	; (7970 <udc_process_setup+0x670>)
    7796:	4690      	mov	r8, r2
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    7798:	4a76      	ldr	r2, [pc, #472]	; (7974 <udc_process_setup+0x674>)
    779a:	4693      	mov	fp, r2
    779c:	0032      	movs	r2, r6
    779e:	464e      	mov	r6, r9
    77a0:	46b9      	mov	r9, r7
    77a2:	0017      	movs	r7, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    77a4:	4642      	mov	r2, r8
    77a6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    77a8:	78d9      	ldrb	r1, [r3, #3]
    77aa:	789a      	ldrb	r2, [r3, #2]
    77ac:	020d      	lsls	r5, r1, #8
    77ae:	4315      	orrs	r5, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    77b0:	46ac      	mov	ip, r5
    77b2:	449c      	add	ip, r3
	while (ptr_end_desc >
    77b4:	459c      	cmp	ip, r3
    77b6:	d800      	bhi.n	77ba <udc_process_setup+0x4ba>
    77b8:	e645      	b.n	7446 <udc_process_setup+0x146>
    77ba:	2500      	movs	r5, #0
    77bc:	9301      	str	r3, [sp, #4]
    77be:	9500      	str	r5, [sp, #0]
    77c0:	469a      	mov	sl, r3
    77c2:	001d      	movs	r5, r3
    77c4:	e005      	b.n	77d2 <udc_process_setup+0x4d2>
				udc_ptr_iface->bLength);
    77c6:	782b      	ldrb	r3, [r5, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    77c8:	18ed      	adds	r5, r5, r3
    77ca:	2301      	movs	r3, #1
    77cc:	9300      	str	r3, [sp, #0]
	while (ptr_end_desc >
    77ce:	45ac      	cmp	ip, r5
    77d0:	d94e      	bls.n	7870 <udc_process_setup+0x570>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    77d2:	786b      	ldrb	r3, [r5, #1]
    77d4:	2b04      	cmp	r3, #4
    77d6:	d1f6      	bne.n	77c6 <udc_process_setup+0x4c6>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    77d8:	78ab      	ldrb	r3, [r5, #2]
    77da:	42b3      	cmp	r3, r6
    77dc:	d1f3      	bne.n	77c6 <udc_process_setup+0x4c6>
    77de:	78eb      	ldrb	r3, [r5, #3]
    77e0:	2b00      	cmp	r3, #0
    77e2:	d1f0      	bne.n	77c6 <udc_process_setup+0x4c6>
    77e4:	9501      	str	r5, [sp, #4]
    77e6:	9d00      	ldr	r5, [sp, #0]
    77e8:	4653      	mov	r3, sl
    77ea:	2d00      	cmp	r5, #0
    77ec:	d004      	beq.n	77f8 <udc_process_setup+0x4f8>
    77ee:	4642      	mov	r2, r8
    77f0:	9901      	ldr	r1, [sp, #4]
    77f2:	6011      	str	r1, [r2, #0]
    77f4:	789a      	ldrb	r2, [r3, #2]
    77f6:	78d9      	ldrb	r1, [r3, #3]
	while (ptr_end_desc >
    77f8:	9d01      	ldr	r5, [sp, #4]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    77fa:	0209      	lsls	r1, r1, #8
    77fc:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    77fe:	189a      	adds	r2, r3, r2
    7800:	e004      	b.n	780c <udc_process_setup+0x50c>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    7802:	786b      	ldrb	r3, [r5, #1]
    7804:	2b04      	cmp	r3, #4
    7806:	d005      	beq.n	7814 <udc_process_setup+0x514>
		if (desc_id == desc->bDescriptorType) {
    7808:	2b05      	cmp	r3, #5
    780a:	d019      	beq.n	7840 <udc_process_setup+0x540>
			desc->bLength);
    780c:	782b      	ldrb	r3, [r5, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    780e:	18ed      	adds	r5, r5, r3
	while (ptr_eof_desc > desc) {
    7810:	42aa      	cmp	r2, r5
    7812:	d8f6      	bhi.n	7802 <udc_process_setup+0x502>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    7814:	6843      	ldr	r3, [r0, #4]
    7816:	00b2      	lsls	r2, r6, #2
    7818:	58d3      	ldr	r3, [r2, r3]
    781a:	681b      	ldr	r3, [r3, #0]
    781c:	4798      	blx	r3
		if (!udc_iface_enable(iface_num, 0)) {
    781e:	2800      	cmp	r0, #0
    7820:	d100      	bne.n	7824 <udc_process_setup+0x524>
    7822:	e610      	b.n	7446 <udc_process_setup+0x146>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7824:	6838      	ldr	r0, [r7, #0]
			iface_num++) {
    7826:	3601      	adds	r6, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7828:	6803      	ldr	r3, [r0, #0]
			iface_num++) {
    782a:	b2f6      	uxtb	r6, r6
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    782c:	791a      	ldrb	r2, [r3, #4]
    782e:	42b2      	cmp	r2, r6
    7830:	d800      	bhi.n	7834 <udc_process_setup+0x534>
    7832:	e663      	b.n	74fc <udc_process_setup+0x1fc>
	if (0 == udc_num_configuration) {
    7834:	464a      	mov	r2, r9
    7836:	7812      	ldrb	r2, [r2, #0]
    7838:	2a00      	cmp	r2, #0
    783a:	d100      	bne.n	783e <udc_process_setup+0x53e>
    783c:	e603      	b.n	7446 <udc_process_setup+0x146>
    783e:	e7b1      	b.n	77a4 <udc_process_setup+0x4a4>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    7840:	796a      	ldrb	r2, [r5, #5]
    7842:	792b      	ldrb	r3, [r5, #4]
    7844:	0212      	lsls	r2, r2, #8
    7846:	431a      	orrs	r2, r3
    7848:	78e9      	ldrb	r1, [r5, #3]
    784a:	78a8      	ldrb	r0, [r5, #2]
    784c:	47d8      	blx	fp
    784e:	2800      	cmp	r0, #0
    7850:	d100      	bne.n	7854 <udc_process_setup+0x554>
    7852:	e5f8      	b.n	7446 <udc_process_setup+0x146>
    7854:	6838      	ldr	r0, [r7, #0]
    7856:	6803      	ldr	r3, [r0, #0]
    7858:	789a      	ldrb	r2, [r3, #2]
    785a:	78d9      	ldrb	r1, [r3, #3]
    785c:	e7cd      	b.n	77fa <udc_process_setup+0x4fa>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    785e:	2d01      	cmp	r5, #1
    7860:	d000      	beq.n	7864 <udc_process_setup+0x564>
    7862:	e568      	b.n	7336 <udc_process_setup+0x36>
				(uint8_t *) udc_config.confdev_lsfs,
    7864:	4b3f      	ldr	r3, [pc, #252]	; (7964 <udc_process_setup+0x664>)
    7866:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    7868:	4b3d      	ldr	r3, [pc, #244]	; (7960 <udc_process_setup+0x660>)
    786a:	7801      	ldrb	r1, [r0, #0]
    786c:	4798      	blx	r3
    786e:	e73b      	b.n	76e8 <udc_process_setup+0x3e8>
    7870:	4643      	mov	r3, r8
    7872:	601d      	str	r5, [r3, #0]
    7874:	e5e7      	b.n	7446 <udc_process_setup+0x146>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    7876:	22ff      	movs	r2, #255	; 0xff
    7878:	4013      	ands	r3, r2
    787a:	2b01      	cmp	r3, #1
    787c:	d04d      	beq.n	791a <udc_process_setup+0x61a>
    787e:	2b00      	cmp	r3, #0
    7880:	d033      	beq.n	78ea <udc_process_setup+0x5ea>
    7882:	2b02      	cmp	r3, #2
    7884:	d054      	beq.n	7930 <udc_process_setup+0x630>
    7886:	2b03      	cmp	r3, #3
    7888:	d000      	beq.n	788c <udc_process_setup+0x58c>
    788a:	e5dc      	b.n	7446 <udc_process_setup+0x146>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    788c:	2331      	movs	r3, #49	; 0x31
    788e:	211a      	movs	r1, #26
    7890:	251a      	movs	r5, #26
    7892:	220c      	movs	r2, #12
    7894:	4838      	ldr	r0, [pc, #224]	; (7978 <udc_process_setup+0x678>)
    7896:	8043      	strh	r3, [r0, #2]
    7898:	4b38      	ldr	r3, [pc, #224]	; (797c <udc_process_setup+0x67c>)
    789a:	785e      	ldrb	r6, [r3, #1]
    789c:	8086      	strh	r6, [r0, #4]
    789e:	789e      	ldrb	r6, [r3, #2]
    78a0:	80c6      	strh	r6, [r0, #6]
    78a2:	78de      	ldrb	r6, [r3, #3]
    78a4:	8106      	strh	r6, [r0, #8]
    78a6:	791e      	ldrb	r6, [r3, #4]
    78a8:	8146      	strh	r6, [r0, #10]
		for(i = 0; i < str_length; i++) {
    78aa:	2a05      	cmp	r2, #5
    78ac:	d019      	beq.n	78e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    78ae:	795e      	ldrb	r6, [r3, #5]
    78b0:	8186      	strh	r6, [r0, #12]
		for(i = 0; i < str_length; i++) {
    78b2:	2a06      	cmp	r2, #6
    78b4:	d015      	beq.n	78e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    78b6:	799e      	ldrb	r6, [r3, #6]
    78b8:	81c6      	strh	r6, [r0, #14]
		for(i = 0; i < str_length; i++) {
    78ba:	2a07      	cmp	r2, #7
    78bc:	d011      	beq.n	78e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    78be:	79de      	ldrb	r6, [r3, #7]
    78c0:	8206      	strh	r6, [r0, #16]
		for(i = 0; i < str_length; i++) {
    78c2:	2a08      	cmp	r2, #8
    78c4:	d00d      	beq.n	78e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    78c6:	7a1e      	ldrb	r6, [r3, #8]
    78c8:	8246      	strh	r6, [r0, #18]
		for(i = 0; i < str_length; i++) {
    78ca:	2a09      	cmp	r2, #9
    78cc:	d009      	beq.n	78e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    78ce:	7a5e      	ldrb	r6, [r3, #9]
    78d0:	8286      	strh	r6, [r0, #20]
		for(i = 0; i < str_length; i++) {
    78d2:	2a0a      	cmp	r2, #10
    78d4:	d005      	beq.n	78e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    78d6:	7a9e      	ldrb	r6, [r3, #10]
    78d8:	82c6      	strh	r6, [r0, #22]
		for(i = 0; i < str_length; i++) {
    78da:	2a0c      	cmp	r2, #12
    78dc:	d101      	bne.n	78e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    78de:	7adb      	ldrb	r3, [r3, #11]
    78e0:	8303      	strh	r3, [r0, #24]
		udd_set_setup_payload(
    78e2:	4b1f      	ldr	r3, [pc, #124]	; (7960 <udc_process_setup+0x660>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    78e4:	7005      	strb	r5, [r0, #0]
		udd_set_setup_payload(
    78e6:	4798      	blx	r3
    78e8:	e6fe      	b.n	76e8 <udc_process_setup+0x3e8>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    78ea:	2104      	movs	r1, #4
    78ec:	4824      	ldr	r0, [pc, #144]	; (7980 <udc_process_setup+0x680>)
    78ee:	4b1c      	ldr	r3, [pc, #112]	; (7960 <udc_process_setup+0x660>)
    78f0:	4798      	blx	r3
    78f2:	e6f9      	b.n	76e8 <udc_process_setup+0x3e8>
			if (conf_num >= udc_config.confdev_lsfs->
    78f4:	4a1b      	ldr	r2, [pc, #108]	; (7964 <udc_process_setup+0x664>)
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    78f6:	b2db      	uxtb	r3, r3
			if (conf_num >= udc_config.confdev_lsfs->
    78f8:	6811      	ldr	r1, [r2, #0]
    78fa:	7c49      	ldrb	r1, [r1, #17]
    78fc:	4299      	cmp	r1, r3
    78fe:	d800      	bhi.n	7902 <udc_process_setup+0x602>
    7900:	e519      	b.n	7336 <udc_process_setup+0x36>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    7902:	6852      	ldr	r2, [r2, #4]
    7904:	00db      	lsls	r3, r3, #3
    7906:	5898      	ldr	r0, [r3, r2]
			udd_set_setup_payload(
    7908:	78c1      	ldrb	r1, [r0, #3]
    790a:	7883      	ldrb	r3, [r0, #2]
    790c:	0209      	lsls	r1, r1, #8
    790e:	4319      	orrs	r1, r3
    7910:	4b13      	ldr	r3, [pc, #76]	; (7960 <udc_process_setup+0x660>)
    7912:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    7914:	68a3      	ldr	r3, [r4, #8]
    7916:	705d      	strb	r5, [r3, #1]
    7918:	e6e6      	b.n	76e8 <udc_process_setup+0x3e8>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    791a:	2114      	movs	r1, #20
    791c:	2514      	movs	r5, #20
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    791e:	2209      	movs	r2, #9
		str = udc_string_manufacturer_name;
    7920:	4b18      	ldr	r3, [pc, #96]	; (7984 <udc_process_setup+0x684>)
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    7922:	4815      	ldr	r0, [pc, #84]	; (7978 <udc_process_setup+0x678>)
    7924:	781e      	ldrb	r6, [r3, #0]
    7926:	8046      	strh	r6, [r0, #2]
    7928:	e7b7      	b.n	789a <udc_process_setup+0x59a>
    792a:	7823      	ldrb	r3, [r4, #0]
    792c:	402b      	ands	r3, r5
    792e:	e4fd      	b.n	732c <udc_process_setup+0x2c>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    7930:	210c      	movs	r1, #12
    7932:	250c      	movs	r5, #12
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    7934:	2205      	movs	r2, #5
		str = udc_string_product_name;
    7936:	4b14      	ldr	r3, [pc, #80]	; (7988 <udc_process_setup+0x688>)
    7938:	e7f3      	b.n	7922 <udc_process_setup+0x622>
    793a:	4642      	mov	r2, r8
    793c:	6013      	str	r3, [r2, #0]
    793e:	e5b2      	b.n	74a6 <udc_process_setup+0x1a6>
    7940:	4642      	mov	r2, r8
    7942:	6013      	str	r3, [r2, #0]
    7944:	e552      	b.n	73ec <udc_process_setup+0xec>
    7946:	4642      	mov	r2, r8
    7948:	6013      	str	r3, [r2, #0]
    794a:	e704      	b.n	7756 <udc_process_setup+0x456>
    794c:	00008521 	.word	0x00008521
    7950:	20000c14 	.word	0x20000c14
    7954:	20000c18 	.word	0x20000c18
    7958:	00007041 	.word	0x00007041
    795c:	20000c10 	.word	0x20000c10
    7960:	00008855 	.word	0x00008855
    7964:	2000004c 	.word	0x2000004c
    7968:	00007211 	.word	0x00007211
    796c:	1fffffff 	.word	0x1fffffff
    7970:	20000c1c 	.word	0x20000c1c
    7974:	00008391 	.word	0x00008391
    7978:	20000098 	.word	0x20000098
    797c:	0002d410 	.word	0x0002d410
    7980:	200000b4 	.word	0x200000b4
    7984:	200000b8 	.word	0x200000b8
    7988:	200000c4 	.word	0x200000c4

0000798c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    798c:	4b0b      	ldr	r3, [pc, #44]	; (79bc <cpu_irq_enter_critical+0x30>)
    798e:	681a      	ldr	r2, [r3, #0]
    7990:	2a00      	cmp	r2, #0
    7992:	d105      	bne.n	79a0 <cpu_irq_enter_critical+0x14>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    7994:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
    7998:	2900      	cmp	r1, #0
    799a:	d005      	beq.n	79a8 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    799c:	4908      	ldr	r1, [pc, #32]	; (79c0 <cpu_irq_enter_critical+0x34>)
    799e:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    79a0:	681a      	ldr	r2, [r3, #0]
    79a2:	3201      	adds	r2, #1
    79a4:	601a      	str	r2, [r3, #0]
}
    79a6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    79a8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    79aa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    79ae:	4a05      	ldr	r2, [pc, #20]	; (79c4 <cpu_irq_enter_critical+0x38>)
    79b0:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    79b2:	4a03      	ldr	r2, [pc, #12]	; (79c0 <cpu_irq_enter_critical+0x34>)
    79b4:	3101      	adds	r1, #1
    79b6:	7011      	strb	r1, [r2, #0]
    79b8:	e7f2      	b.n	79a0 <cpu_irq_enter_critical+0x14>
    79ba:	46c0      	nop			; (mov r8, r8)
    79bc:	20000c20 	.word	0x20000c20
    79c0:	20000c24 	.word	0x20000c24
    79c4:	200000ca 	.word	0x200000ca

000079c8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    79c8:	4b08      	ldr	r3, [pc, #32]	; (79ec <cpu_irq_leave_critical+0x24>)
    79ca:	681a      	ldr	r2, [r3, #0]
    79cc:	3a01      	subs	r2, #1
    79ce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    79d0:	681b      	ldr	r3, [r3, #0]
    79d2:	2b00      	cmp	r3, #0
    79d4:	d109      	bne.n	79ea <cpu_irq_leave_critical+0x22>
    79d6:	4b06      	ldr	r3, [pc, #24]	; (79f0 <cpu_irq_leave_critical+0x28>)
    79d8:	781b      	ldrb	r3, [r3, #0]
    79da:	2b00      	cmp	r3, #0
    79dc:	d005      	beq.n	79ea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    79de:	2201      	movs	r2, #1
    79e0:	4b04      	ldr	r3, [pc, #16]	; (79f4 <cpu_irq_leave_critical+0x2c>)
    79e2:	701a      	strb	r2, [r3, #0]
    79e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    79e8:	b662      	cpsie	i
	}
}
    79ea:	4770      	bx	lr
    79ec:	20000c20 	.word	0x20000c20
    79f0:	20000c24 	.word	0x20000c24
    79f4:	200000ca 	.word	0x200000ca

000079f8 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    79f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    79fa:	4657      	mov	r7, sl
    79fc:	464e      	mov	r6, r9
    79fe:	46de      	mov	lr, fp
    7a00:	4645      	mov	r5, r8
    7a02:	b5e0      	push	{r5, r6, r7, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    7a04:	798e      	ldrb	r6, [r1, #6]
{
    7a06:	b083      	sub	sp, #12

	if (ep & USB_EP_DIR_IN) {
    7a08:	b273      	sxtb	r3, r6
{
    7a0a:	468a      	mov	sl, r1
	if (ep & USB_EP_DIR_IN) {
    7a0c:	2b00      	cmp	r3, #0
    7a0e:	da00      	bge.n	7a12 <udd_ep_transfer_process+0x1a>
    7a10:	e071      	b.n	7af6 <udd_ep_transfer_process+0xfe>
	if ((ep == 0) || (ep == 0x80)) {
    7a12:	2e00      	cmp	r6, #0
    7a14:	d033      	beq.n	7a7e <udd_ep_transfer_process+0x86>
    7a16:	230f      	movs	r3, #15
    7a18:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    7a1a:	005c      	lsls	r4, r3, #1
    7a1c:	3c02      	subs	r4, #2
	ep_size = ptr_job->ep_size;
    7a1e:	00a5      	lsls	r5, r4, #2
    7a20:	4699      	mov	r9, r3
    7a22:	4f6f      	ldr	r7, [pc, #444]	; (7be0 <udd_ep_transfer_process+0x1e8>)
    7a24:	192b      	adds	r3, r5, r4
    7a26:	009b      	lsls	r3, r3, #2
    7a28:	18fb      	adds	r3, r7, r3
    7a2a:	8a1a      	ldrh	r2, [r3, #16]
    7a2c:	9201      	str	r2, [sp, #4]
	nb_trans = ep_callback_para->received_bytes;
    7a2e:	880a      	ldrh	r2, [r1, #0]
    7a30:	4693      	mov	fp, r2
	if (ptr_job->b_use_out_cache_buffer) {
    7a32:	7c9a      	ldrb	r2, [r3, #18]
    7a34:	0752      	lsls	r2, r2, #29
    7a36:	d426      	bmi.n	7a86 <udd_ep_transfer_process+0x8e>
	ptr_job->nb_trans += nb_trans;
    7a38:	192b      	adds	r3, r5, r4
    7a3a:	009b      	lsls	r3, r3, #2
    7a3c:	18fb      	adds	r3, r7, r3
    7a3e:	68da      	ldr	r2, [r3, #12]
    7a40:	445a      	add	r2, fp
    7a42:	4690      	mov	r8, r2
    7a44:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    7a46:	689a      	ldr	r2, [r3, #8]
    7a48:	4590      	cmp	r8, r2
    7a4a:	d81a      	bhi.n	7a82 <udd_ep_transfer_process+0x8a>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    7a4c:	4653      	mov	r3, sl
    7a4e:	889b      	ldrh	r3, [r3, #4]
    7a50:	455b      	cmp	r3, fp
    7a52:	d02b      	beq.n	7aac <udd_ep_transfer_process+0xb4>
	ptr_job->busy = false;
    7a54:	2001      	movs	r0, #1
    7a56:	192c      	adds	r4, r5, r4
    7a58:	00a4      	lsls	r4, r4, #2
    7a5a:	1939      	adds	r1, r7, r4
    7a5c:	7c8b      	ldrb	r3, [r1, #18]
    7a5e:	4383      	bics	r3, r0
    7a60:	748b      	strb	r3, [r1, #18]
	if (NULL != ptr_job->call_trans) {
    7a62:	593b      	ldr	r3, [r7, r4]
    7a64:	2b00      	cmp	r3, #0
    7a66:	d003      	beq.n	7a70 <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    7a68:	68c9      	ldr	r1, [r1, #12]
    7a6a:	0032      	movs	r2, r6
    7a6c:	2000      	movs	r0, #0
    7a6e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    7a70:	b003      	add	sp, #12
    7a72:	bc3c      	pop	{r2, r3, r4, r5}
    7a74:	4690      	mov	r8, r2
    7a76:	4699      	mov	r9, r3
    7a78:	46a2      	mov	sl, r4
    7a7a:	46ab      	mov	fp, r5
    7a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ep_size = ptr_job->ep_size;
    7a7e:	8a33      	ldrh	r3, [r6, #16]
    7a80:	deff      	udf	#255	; 0xff
		ptr_job->nb_trans = ptr_job->buf_size;
    7a82:	60da      	str	r2, [r3, #12]
    7a84:	e7e6      	b.n	7a54 <udd_ep_transfer_process+0x5c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    7a86:	68d9      	ldr	r1, [r3, #12]
    7a88:	685a      	ldr	r2, [r3, #4]
    7a8a:	468c      	mov	ip, r1
    7a8c:	6898      	ldr	r0, [r3, #8]
    7a8e:	4462      	add	r2, ip
    7a90:	9901      	ldr	r1, [sp, #4]
    7a92:	4b54      	ldr	r3, [pc, #336]	; (7be4 <udd_ep_transfer_process+0x1ec>)
    7a94:	4690      	mov	r8, r2
    7a96:	4798      	blx	r3
    7a98:	464b      	mov	r3, r9
    7a9a:	000a      	movs	r2, r1
    7a9c:	3b01      	subs	r3, #1
    7a9e:	4952      	ldr	r1, [pc, #328]	; (7be8 <udd_ep_transfer_process+0x1f0>)
    7aa0:	019b      	lsls	r3, r3, #6
    7aa2:	1859      	adds	r1, r3, r1
    7aa4:	4640      	mov	r0, r8
    7aa6:	4b51      	ldr	r3, [pc, #324]	; (7bec <udd_ep_transfer_process+0x1f4>)
    7aa8:	4798      	blx	r3
    7aaa:	e7c5      	b.n	7a38 <udd_ep_transfer_process+0x40>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    7aac:	4590      	cmp	r8, r2
    7aae:	d0d1      	beq.n	7a54 <udd_ep_transfer_process+0x5c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    7ab0:	4643      	mov	r3, r8
    7ab2:	1ad2      	subs	r2, r2, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    7ab4:	4b4e      	ldr	r3, [pc, #312]	; (7bf0 <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    7ab6:	b296      	uxth	r6, r2
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    7ab8:	469a      	mov	sl, r3
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    7aba:	9901      	ldr	r1, [sp, #4]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    7abc:	429e      	cmp	r6, r3
    7abe:	d96c      	bls.n	7b9a <udd_ep_transfer_process+0x1a2>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    7ac0:	0018      	movs	r0, r3
    7ac2:	4b4c      	ldr	r3, [pc, #304]	; (7bf4 <udd_ep_transfer_process+0x1fc>)
    7ac4:	4798      	blx	r3
    7ac6:	4653      	mov	r3, sl
    7ac8:	1a5b      	subs	r3, r3, r1
    7aca:	b29b      	uxth	r3, r3
			ptr_job->b_use_out_cache_buffer = true;
    7acc:	192c      	adds	r4, r5, r4
		if (next_trans < ep_size) {
    7ace:	9901      	ldr	r1, [sp, #4]
			ptr_job->b_use_out_cache_buffer = true;
    7ad0:	00a4      	lsls	r4, r4, #2
    7ad2:	193f      	adds	r7, r7, r4
		if (next_trans < ep_size) {
    7ad4:	4299      	cmp	r1, r3
    7ad6:	d959      	bls.n	7b8c <udd_ep_transfer_process+0x194>
			ptr_job->b_use_out_cache_buffer = true;
    7ad8:	2204      	movs	r2, #4
    7ada:	7cbb      	ldrb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    7adc:	4c46      	ldr	r4, [pc, #280]	; (7bf8 <udd_ep_transfer_process+0x200>)
			ptr_job->b_use_out_cache_buffer = true;
    7ade:	4313      	orrs	r3, r2
    7ae0:	74bb      	strb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    7ae2:	464b      	mov	r3, r9
    7ae4:	1e5a      	subs	r2, r3, #1
    7ae6:	4b40      	ldr	r3, [pc, #256]	; (7be8 <udd_ep_transfer_process+0x1f0>)
    7ae8:	0192      	lsls	r2, r2, #6
    7aea:	18d2      	adds	r2, r2, r3
    7aec:	4843      	ldr	r0, [pc, #268]	; (7bfc <udd_ep_transfer_process+0x204>)
    7aee:	000b      	movs	r3, r1
    7af0:	4649      	mov	r1, r9
    7af2:	47a0      	blx	r4
    7af4:	e7bc      	b.n	7a70 <udd_ep_transfer_process+0x78>
	if ((ep == 0) || (ep == 0x80)) {
    7af6:	2e80      	cmp	r6, #128	; 0x80
    7af8:	d045      	beq.n	7b86 <udd_ep_transfer_process+0x18e>
    7afa:	230f      	movs	r3, #15
    7afc:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    7afe:	005c      	lsls	r4, r3, #1
    7b00:	4699      	mov	r9, r3
    7b02:	1e63      	subs	r3, r4, #1
	ep_size = ptr_job->ep_size;
    7b04:	009c      	lsls	r4, r3, #2
    7b06:	18e0      	adds	r0, r4, r3
    7b08:	4f35      	ldr	r7, [pc, #212]	; (7be0 <udd_ep_transfer_process+0x1e8>)
    7b0a:	0080      	lsls	r0, r0, #2
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    7b0c:	4698      	mov	r8, r3
	ep_size = ptr_job->ep_size;
    7b0e:	183b      	adds	r3, r7, r0
    7b10:	8a19      	ldrh	r1, [r3, #16]
    7b12:	001a      	movs	r2, r3
    7b14:	468b      	mov	fp, r1
	ptr_job->nb_trans += nb_trans;
    7b16:	4651      	mov	r1, sl
    7b18:	884d      	ldrh	r5, [r1, #2]
    7b1a:	68d9      	ldr	r1, [r3, #12]
	ep_size = ptr_job->ep_size;
    7b1c:	3210      	adds	r2, #16
	ptr_job->nb_trans += nb_trans;
    7b1e:	468c      	mov	ip, r1
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    7b20:	6899      	ldr	r1, [r3, #8]
	ptr_job->nb_trans += nb_trans;
    7b22:	4465      	add	r5, ip
    7b24:	60dd      	str	r5, [r3, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    7b26:	428d      	cmp	r5, r1
    7b28:	d03d      	beq.n	7ba6 <udd_ep_transfer_process+0x1ae>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    7b2a:	1b4e      	subs	r6, r1, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    7b2c:	4b30      	ldr	r3, [pc, #192]	; (7bf0 <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    7b2e:	b2b6      	uxth	r6, r6
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    7b30:	469a      	mov	sl, r3
    7b32:	429e      	cmp	r6, r3
    7b34:	d906      	bls.n	7b44 <udd_ep_transfer_process+0x14c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    7b36:	0018      	movs	r0, r3
    7b38:	4659      	mov	r1, fp
    7b3a:	4b2e      	ldr	r3, [pc, #184]	; (7bf4 <udd_ep_transfer_process+0x1fc>)
    7b3c:	4798      	blx	r3
    7b3e:	4653      	mov	r3, sl
    7b40:	1a5e      	subs	r6, r3, r1
    7b42:	b2b6      	uxth	r6, r6
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    7b44:	4643      	mov	r3, r8
    7b46:	18e3      	adds	r3, r4, r3
    7b48:	009b      	lsls	r3, r3, #2
    7b4a:	18fb      	adds	r3, r7, r3
    7b4c:	7c9a      	ldrb	r2, [r3, #18]
    7b4e:	2300      	movs	r3, #0
    7b50:	0792      	lsls	r2, r2, #30
    7b52:	d507      	bpl.n	7b64 <udd_ep_transfer_process+0x16c>
    7b54:	4b23      	ldr	r3, [pc, #140]	; (7be4 <udd_ep_transfer_process+0x1ec>)
    7b56:	4659      	mov	r1, fp
    7b58:	0030      	movs	r0, r6
    7b5a:	4798      	blx	r3
    7b5c:	b289      	uxth	r1, r1
    7b5e:	424b      	negs	r3, r1
    7b60:	414b      	adcs	r3, r1
    7b62:	b2db      	uxtb	r3, r3
    7b64:	2002      	movs	r0, #2
    7b66:	4444      	add	r4, r8
    7b68:	00a4      	lsls	r4, r4, #2
    7b6a:	193f      	adds	r7, r7, r4
    7b6c:	7cba      	ldrb	r2, [r7, #18]
    7b6e:	005b      	lsls	r3, r3, #1
    7b70:	4382      	bics	r2, r0
    7b72:	4313      	orrs	r3, r2
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    7b74:	687a      	ldr	r2, [r7, #4]
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    7b76:	74bb      	strb	r3, [r7, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    7b78:	1952      	adds	r2, r2, r5
    7b7a:	0033      	movs	r3, r6
    7b7c:	4649      	mov	r1, r9
    7b7e:	4c20      	ldr	r4, [pc, #128]	; (7c00 <udd_ep_transfer_process+0x208>)
    7b80:	481e      	ldr	r0, [pc, #120]	; (7bfc <udd_ep_transfer_process+0x204>)
    7b82:	47a0      	blx	r4
    7b84:	e774      	b.n	7a70 <udd_ep_transfer_process+0x78>
	ep_size = ptr_job->ep_size;
    7b86:	2300      	movs	r3, #0
    7b88:	8a1b      	ldrh	r3, [r3, #16]
    7b8a:	deff      	udf	#255	; 0xff
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    7b8c:	687a      	ldr	r2, [r7, #4]
    7b8e:	4649      	mov	r1, r9
    7b90:	4442      	add	r2, r8
    7b92:	4c19      	ldr	r4, [pc, #100]	; (7bf8 <udd_ep_transfer_process+0x200>)
    7b94:	4819      	ldr	r0, [pc, #100]	; (7bfc <udd_ep_transfer_process+0x204>)
    7b96:	47a0      	blx	r4
    7b98:	e76a      	b.n	7a70 <udd_ep_transfer_process+0x78>
			next_trans -= next_trans % ep_size;
    7b9a:	4b12      	ldr	r3, [pc, #72]	; (7be4 <udd_ep_transfer_process+0x1ec>)
    7b9c:	0030      	movs	r0, r6
    7b9e:	4798      	blx	r3
    7ba0:	1a73      	subs	r3, r6, r1
    7ba2:	b29b      	uxth	r3, r3
    7ba4:	e792      	b.n	7acc <udd_ep_transfer_process+0xd4>
	if (ptr_job->b_shortpacket) {
    7ba6:	2102      	movs	r1, #2
    7ba8:	7c9c      	ldrb	r4, [r3, #18]
    7baa:	4221      	tst	r1, r4
    7bac:	d10c      	bne.n	7bc8 <udd_ep_transfer_process+0x1d0>
	ptr_job->busy = false;
    7bae:	2101      	movs	r1, #1
    7bb0:	7893      	ldrb	r3, [r2, #2]
    7bb2:	438b      	bics	r3, r1
    7bb4:	7093      	strb	r3, [r2, #2]
	if (NULL != ptr_job->call_trans) {
    7bb6:	583b      	ldr	r3, [r7, r0]
    7bb8:	2b00      	cmp	r3, #0
    7bba:	d100      	bne.n	7bbe <udd_ep_transfer_process+0x1c6>
    7bbc:	e758      	b.n	7a70 <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    7bbe:	0032      	movs	r2, r6
    7bc0:	0029      	movs	r1, r5
    7bc2:	2000      	movs	r0, #0
    7bc4:	4798      	blx	r3
    7bc6:	e753      	b.n	7a70 <udd_ep_transfer_process+0x78>
		ptr_job->b_shortpacket = false;
    7bc8:	7890      	ldrb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    7bca:	4c0d      	ldr	r4, [pc, #52]	; (7c00 <udd_ep_transfer_process+0x208>)
		ptr_job->b_shortpacket = false;
    7bcc:	4388      	bics	r0, r1
    7bce:	7090      	strb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    7bd0:	685a      	ldr	r2, [r3, #4]
    7bd2:	4649      	mov	r1, r9
    7bd4:	1952      	adds	r2, r2, r5
    7bd6:	2300      	movs	r3, #0
    7bd8:	4808      	ldr	r0, [pc, #32]	; (7bfc <udd_ep_transfer_process+0x204>)
    7bda:	47a0      	blx	r4
    7bdc:	e748      	b.n	7a70 <udd_ep_transfer_process+0x78>
    7bde:	46c0      	nop			; (mov r8, r8)
    7be0:	20000c2c 	.word	0x20000c2c
    7be4:	00025a49 	.word	0x00025a49
    7be8:	20000efc 	.word	0x20000efc
    7bec:	00028999 	.word	0x00028999
    7bf0:	00001fff 	.word	0x00001fff
    7bf4:	00025c1d 	.word	0x00025c1d
    7bf8:	000090e5 	.word	0x000090e5
    7bfc:	20000f7c 	.word	0x20000f7c
    7c00:	00009099 	.word	0x00009099

00007c04 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    7c04:	b530      	push	{r4, r5, lr}
    7c06:	0004      	movs	r4, r0
    7c08:	b083      	sub	sp, #12
	// Reset USB Device Stack Core
	udc_reset();
    7c0a:	4b1e      	ldr	r3, [pc, #120]	; (7c84 <_usb_on_bus_reset+0x80>)
    7c0c:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    7c0e:	2380      	movs	r3, #128	; 0x80
    7c10:	6822      	ldr	r2, [r4, #0]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    7c12:	ad01      	add	r5, sp, #4
    7c14:	7293      	strb	r3, [r2, #10]
    7c16:	0028      	movs	r0, r5
    7c18:	4b1b      	ldr	r3, [pc, #108]	; (7c88 <_usb_on_bus_reset+0x84>)
    7c1a:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    7c1c:	2303      	movs	r3, #3
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    7c1e:	0029      	movs	r1, r5
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    7c20:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    7c22:	0020      	movs	r0, r4
    7c24:	4b19      	ldr	r3, [pc, #100]	; (7c8c <_usb_on_bus_reset+0x88>)
    7c26:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    7c28:	4919      	ldr	r1, [pc, #100]	; (7c90 <_usb_on_bus_reset+0x8c>)
    7c2a:	0020      	movs	r0, r4
    7c2c:	4b19      	ldr	r3, [pc, #100]	; (7c94 <_usb_on_bus_reset+0x90>)
    7c2e:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    7c30:	4d19      	ldr	r5, [pc, #100]	; (7c98 <_usb_on_bus_reset+0x94>)
    7c32:	4b1a      	ldr	r3, [pc, #104]	; (7c9c <_usb_on_bus_reset+0x98>)
    7c34:	2202      	movs	r2, #2
    7c36:	2100      	movs	r1, #0
    7c38:	0020      	movs	r0, r4
    7c3a:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    7c3c:	4b18      	ldr	r3, [pc, #96]	; (7ca0 <_usb_on_bus_reset+0x9c>)
    7c3e:	2200      	movs	r2, #0
    7c40:	2100      	movs	r1, #0
    7c42:	0020      	movs	r0, r4
    7c44:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    7c46:	4b17      	ldr	r3, [pc, #92]	; (7ca4 <_usb_on_bus_reset+0xa0>)
    7c48:	2201      	movs	r2, #1
    7c4a:	2100      	movs	r1, #0
    7c4c:	0020      	movs	r0, r4
    7c4e:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    7c50:	4d15      	ldr	r5, [pc, #84]	; (7ca8 <_usb_on_bus_reset+0xa4>)
    7c52:	2202      	movs	r2, #2
    7c54:	2100      	movs	r1, #0
    7c56:	0020      	movs	r0, r4
    7c58:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    7c5a:	2200      	movs	r2, #0
    7c5c:	2100      	movs	r1, #0
    7c5e:	0020      	movs	r0, r4
    7c60:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    7c62:	2201      	movs	r2, #1
    7c64:	2100      	movs	r1, #0
    7c66:	0020      	movs	r0, r4
    7c68:	47a8      	blx	r5
    7c6a:	6821      	ldr	r1, [r4, #0]
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    7c6c:	4a0f      	ldr	r2, [pc, #60]	; (7cac <_usb_on_bus_reset+0xa8>)
    7c6e:	890b      	ldrh	r3, [r1, #8]
    7c70:	401a      	ands	r2, r3
    7c72:	2380      	movs	r3, #128	; 0x80
    7c74:	00db      	lsls	r3, r3, #3
    7c76:	4313      	orrs	r3, r2
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    7c78:	2200      	movs	r2, #0
    7c7a:	810b      	strh	r3, [r1, #8]
    7c7c:	4b0c      	ldr	r3, [pc, #48]	; (7cb0 <_usb_on_bus_reset+0xac>)
    7c7e:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    7c80:	b003      	add	sp, #12
    7c82:	bd30      	pop	{r4, r5, pc}
    7c84:	00007211 	.word	0x00007211
    7c88:	00008d8d 	.word	0x00008d8d
    7c8c:	00008d9d 	.word	0x00008d9d
    7c90:	200010fc 	.word	0x200010fc
    7c94:	0000912d 	.word	0x0000912d
    7c98:	00008bdd 	.word	0x00008bdd
    7c9c:	00007ea5 	.word	0x00007ea5
    7ca0:	000081a9 	.word	0x000081a9
    7ca4:	00007cb5 	.word	0x00007cb5
    7ca8:	00008c2d 	.word	0x00008c2d
    7cac:	fffff3ff 	.word	0xfffff3ff
    7cb0:	20000c2a 	.word	0x20000c2a

00007cb4 <_usb_ep0_on_tansfer_fail>:
{
    7cb4:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    7cb6:	7989      	ldrb	r1, [r1, #6]
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    7cb8:	4a12      	ldr	r2, [pc, #72]	; (7d04 <_usb_ep0_on_tansfer_fail+0x50>)
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    7cba:	b24b      	sxtb	r3, r1
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	db05      	blt.n	7ccc <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    7cc0:	7813      	ldrb	r3, [r2, #0]
    7cc2:	2b02      	cmp	r3, #2
    7cc4:	d00b      	beq.n	7cde <_usb_ep0_on_tansfer_fail+0x2a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    7cc6:	2b03      	cmp	r3, #3
    7cc8:	d005      	beq.n	7cd6 <_usb_ep0_on_tansfer_fail+0x22>
}
    7cca:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    7ccc:	7813      	ldrb	r3, [r2, #0]
    7cce:	2b01      	cmp	r3, #1
    7cd0:	d008      	beq.n	7ce4 <_usb_ep0_on_tansfer_fail+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    7cd2:	2b04      	cmp	r3, #4
    7cd4:	d1f9      	bne.n	7cca <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    7cd6:	480c      	ldr	r0, [pc, #48]	; (7d08 <_usb_ep0_on_tansfer_fail+0x54>)
    7cd8:	4b0c      	ldr	r3, [pc, #48]	; (7d0c <_usb_ep0_on_tansfer_fail+0x58>)
    7cda:	4798      	blx	r3
}
    7cdc:	e7f5      	b.n	7cca <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    7cde:	3302      	adds	r3, #2
    7ce0:	7013      	strb	r3, [r2, #0]
    7ce2:	e7f2      	b.n	7cca <_usb_ep0_on_tansfer_fail+0x16>
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    7ce4:	4c08      	ldr	r4, [pc, #32]	; (7d08 <_usb_ep0_on_tansfer_fail+0x54>)
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    7ce6:	3302      	adds	r3, #2
    7ce8:	7013      	strb	r3, [r2, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    7cea:	4909      	ldr	r1, [pc, #36]	; (7d10 <_usb_ep0_on_tansfer_fail+0x5c>)
    7cec:	0020      	movs	r0, r4
    7cee:	4b09      	ldr	r3, [pc, #36]	; (7d14 <_usb_ep0_on_tansfer_fail+0x60>)
    7cf0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    7cf2:	4b09      	ldr	r3, [pc, #36]	; (7d18 <_usb_ep0_on_tansfer_fail+0x64>)
    7cf4:	2100      	movs	r1, #0
    7cf6:	689a      	ldr	r2, [r3, #8]
    7cf8:	0020      	movs	r0, r4
    7cfa:	2300      	movs	r3, #0
    7cfc:	4c07      	ldr	r4, [pc, #28]	; (7d1c <_usb_ep0_on_tansfer_fail+0x68>)
    7cfe:	47a0      	blx	r4
    7d00:	e7e3      	b.n	7cca <_usb_ep0_on_tansfer_fail+0x16>
    7d02:	46c0      	nop			; (mov r8, r8)
    7d04:	20000c2a 	.word	0x20000c2a
    7d08:	20000f7c 	.word	0x20000f7c
    7d0c:	00008ffd 	.word	0x00008ffd
    7d10:	200010fc 	.word	0x200010fc
    7d14:	0000912d 	.word	0x0000912d
    7d18:	200010e4 	.word	0x200010e4
    7d1c:	00009099 	.word	0x00009099

00007d20 <udd_ctrl_in_sent>:
{
    7d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    7d22:	4d1f      	ldr	r5, [pc, #124]	; (7da0 <udd_ctrl_in_sent+0x80>)
    7d24:	4e1f      	ldr	r6, [pc, #124]	; (7da4 <udd_ctrl_in_sent+0x84>)
    7d26:	882a      	ldrh	r2, [r5, #0]
    7d28:	89b4      	ldrh	r4, [r6, #12]
    7d2a:	1aa4      	subs	r4, r4, r2
    7d2c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    7d2e:	2c00      	cmp	r4, #0
    7d30:	d010      	beq.n	7d54 <udd_ctrl_in_sent+0x34>
    7d32:	4f1d      	ldr	r7, [pc, #116]	; (7da8 <udd_ctrl_in_sent+0x88>)
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    7d34:	2c3f      	cmp	r4, #63	; 0x3f
    7d36:	d923      	bls.n	7d80 <udd_ctrl_in_sent+0x60>
    7d38:	2340      	movs	r3, #64	; 0x40
		b_shortpacket = false;
    7d3a:	2100      	movs	r1, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    7d3c:	2440      	movs	r4, #64	; 0x40
    7d3e:	7039      	strb	r1, [r7, #0]
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    7d40:	68b1      	ldr	r1, [r6, #8]
    7d42:	481a      	ldr	r0, [pc, #104]	; (7dac <udd_ctrl_in_sent+0x8c>)
    7d44:	188a      	adds	r2, r1, r2
    7d46:	4e1a      	ldr	r6, [pc, #104]	; (7db0 <udd_ctrl_in_sent+0x90>)
    7d48:	2100      	movs	r1, #0
    7d4a:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    7d4c:	882b      	ldrh	r3, [r5, #0]
    7d4e:	18e4      	adds	r4, r4, r3
    7d50:	802c      	strh	r4, [r5, #0]
}
    7d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    7d54:	4917      	ldr	r1, [pc, #92]	; (7db4 <udd_ctrl_in_sent+0x94>)
    7d56:	880b      	ldrh	r3, [r1, #0]
    7d58:	18d3      	adds	r3, r2, r3
    7d5a:	b29b      	uxth	r3, r3
    7d5c:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    7d5e:	88f1      	ldrh	r1, [r6, #6]
    7d60:	4299      	cmp	r1, r3
    7d62:	d010      	beq.n	7d86 <udd_ctrl_in_sent+0x66>
    7d64:	4f10      	ldr	r7, [pc, #64]	; (7da8 <udd_ctrl_in_sent+0x88>)
    7d66:	783b      	ldrb	r3, [r7, #0]
    7d68:	2b00      	cmp	r3, #0
    7d6a:	d10c      	bne.n	7d86 <udd_ctrl_in_sent+0x66>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    7d6c:	6973      	ldr	r3, [r6, #20]
    7d6e:	2b00      	cmp	r3, #0
    7d70:	d004      	beq.n	7d7c <udd_ctrl_in_sent+0x5c>
    7d72:	4798      	blx	r3
    7d74:	2800      	cmp	r0, #0
    7d76:	d10e      	bne.n	7d96 <udd_ctrl_in_sent+0x76>
    7d78:	2300      	movs	r3, #0
    7d7a:	882a      	ldrh	r2, [r5, #0]
		b_shortpacket = true;
    7d7c:	2101      	movs	r1, #1
    7d7e:	e7de      	b.n	7d3e <udd_ctrl_in_sent+0x1e>
    7d80:	0023      	movs	r3, r4
    7d82:	2101      	movs	r1, #1
    7d84:	e7db      	b.n	7d3e <udd_ctrl_in_sent+0x1e>
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    7d86:	2204      	movs	r2, #4
    7d88:	4b0b      	ldr	r3, [pc, #44]	; (7db8 <udd_ctrl_in_sent+0x98>)
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    7d8a:	490c      	ldr	r1, [pc, #48]	; (7dbc <udd_ctrl_in_sent+0x9c>)
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    7d8c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    7d8e:	4807      	ldr	r0, [pc, #28]	; (7dac <udd_ctrl_in_sent+0x8c>)
    7d90:	4b0b      	ldr	r3, [pc, #44]	; (7dc0 <udd_ctrl_in_sent+0xa0>)
    7d92:	4798      	blx	r3
			return;
    7d94:	e7dd      	b.n	7d52 <udd_ctrl_in_sent+0x32>
			udd_ctrl_payload_nb_trans = 0;
    7d96:	802c      	strh	r4, [r5, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    7d98:	89b4      	ldrh	r4, [r6, #12]
    7d9a:	2200      	movs	r2, #0
    7d9c:	e7ca      	b.n	7d34 <udd_ctrl_in_sent+0x14>
    7d9e:	46c0      	nop			; (mov r8, r8)
    7da0:	20000c26 	.word	0x20000c26
    7da4:	200010e4 	.word	0x200010e4
    7da8:	20000c25 	.word	0x20000c25
    7dac:	20000f7c 	.word	0x20000f7c
    7db0:	00009099 	.word	0x00009099
    7db4:	20000c28 	.word	0x20000c28
    7db8:	20000c2a 	.word	0x20000c2a
    7dbc:	200010fc 	.word	0x200010fc
    7dc0:	0000912d 	.word	0x0000912d

00007dc4 <_usb_on_sof_notify>:
{
    7dc4:	b510      	push	{r4, lr}
	udc_sof_notify();
    7dc6:	4b01      	ldr	r3, [pc, #4]	; (7dcc <_usb_on_sof_notify+0x8>)
    7dc8:	4798      	blx	r3
}
    7dca:	bd10      	pop	{r4, pc}
    7dcc:	000072c1 	.word	0x000072c1

00007dd0 <cpu_irq_restore.part.0>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
		cpu_irq_enable();
    7dd0:	2201      	movs	r2, #1
    7dd2:	4b03      	ldr	r3, [pc, #12]	; (7de0 <cpu_irq_restore.part.0+0x10>)
    7dd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    7dd6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7dda:	b662      	cpsie	i
}
    7ddc:	4770      	bx	lr
    7dde:	46c0      	nop			; (mov r8, r8)
    7de0:	200000ca 	.word	0x200000ca

00007de4 <_usb_device_lpm_suspend>:
{
    7de4:	b530      	push	{r4, r5, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    7de6:	4c27      	ldr	r4, [pc, #156]	; (7e84 <_usb_device_lpm_suspend+0xa0>)
{
    7de8:	b085      	sub	sp, #20
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    7dea:	2106      	movs	r1, #6
    7dec:	0020      	movs	r0, r4
    7dee:	4d26      	ldr	r5, [pc, #152]	; (7e88 <_usb_device_lpm_suspend+0xa4>)
    7df0:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    7df2:	2104      	movs	r1, #4
    7df4:	0020      	movs	r0, r4
    7df6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    7df8:	0020      	movs	r0, r4
    7dfa:	4b24      	ldr	r3, [pc, #144]	; (7e8c <_usb_device_lpm_suspend+0xa8>)
    7dfc:	2102      	movs	r1, #2
    7dfe:	4798      	blx	r3
	enum sleepmgr_mode sleep_mode[] = {
    7e00:	4b23      	ldr	r3, [pc, #140]	; (7e90 <_usb_device_lpm_suspend+0xac>)
	if (udd_state == new_state) {
    7e02:	4c24      	ldr	r4, [pc, #144]	; (7e94 <_usb_device_lpm_suspend+0xb0>)
	enum sleepmgr_mode sleep_mode[] = {
    7e04:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    7e06:	7823      	ldrb	r3, [r4, #0]
    7e08:	2b02      	cmp	r3, #2
    7e0a:	d01e      	beq.n	7e4a <_usb_device_lpm_suspend+0x66>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    7e0c:	4b22      	ldr	r3, [pc, #136]	; (7e98 <_usb_device_lpm_suspend+0xb4>)
    7e0e:	785a      	ldrb	r2, [r3, #1]
    7e10:	2aff      	cmp	r2, #255	; 0xff
    7e12:	d01c      	beq.n	7e4e <_usb_device_lpm_suspend+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    7e14:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    7e18:	4251      	negs	r1, r2
    7e1a:	414a      	adcs	r2, r1
    7e1c:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    7e1e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    7e20:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    7e24:	2200      	movs	r2, #0
    7e26:	491d      	ldr	r1, [pc, #116]	; (7e9c <_usb_device_lpm_suspend+0xb8>)
    7e28:	700a      	strb	r2, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    7e2a:	785a      	ldrb	r2, [r3, #1]
	return flags;
    7e2c:	9802      	ldr	r0, [sp, #8]
    7e2e:	3201      	adds	r2, #1
    7e30:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    7e32:	2800      	cmp	r0, #0
    7e34:	d004      	beq.n	7e40 <_usb_device_lpm_suspend+0x5c>
		cpu_irq_enable();
    7e36:	2201      	movs	r2, #1
    7e38:	700a      	strb	r2, [r1, #0]
    7e3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7e3e:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    7e40:	7822      	ldrb	r2, [r4, #0]
    7e42:	2a00      	cmp	r2, #0
    7e44:	d104      	bne.n	7e50 <_usb_device_lpm_suspend+0x6c>
	udd_state = new_state;
    7e46:	2302      	movs	r3, #2
    7e48:	7023      	strb	r3, [r4, #0]
}
    7e4a:	b005      	add	sp, #20
    7e4c:	bd30      	pop	{r4, r5, pc}
    7e4e:	e7fe      	b.n	7e4e <_usb_device_lpm_suspend+0x6a>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    7e50:	a801      	add	r0, sp, #4
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    7e52:	5c82      	ldrb	r2, [r0, r2]
    7e54:	5c98      	ldrb	r0, [r3, r2]
    7e56:	2800      	cmp	r0, #0
    7e58:	d012      	beq.n	7e80 <_usb_device_lpm_suspend+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    7e5a:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    7e5e:	4245      	negs	r5, r0
    7e60:	4168      	adcs	r0, r5
    7e62:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    7e64:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    7e66:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    7e6a:	2000      	movs	r0, #0
    7e6c:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    7e6e:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    7e70:	9803      	ldr	r0, [sp, #12]
    7e72:	3901      	subs	r1, #1
    7e74:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    7e76:	2800      	cmp	r0, #0
    7e78:	d0e5      	beq.n	7e46 <_usb_device_lpm_suspend+0x62>
    7e7a:	4b09      	ldr	r3, [pc, #36]	; (7ea0 <_usb_device_lpm_suspend+0xbc>)
    7e7c:	4798      	blx	r3
    7e7e:	e7e2      	b.n	7e46 <_usb_device_lpm_suspend+0x62>
    7e80:	e7fe      	b.n	7e80 <_usb_device_lpm_suspend+0x9c>
    7e82:	46c0      	nop			; (mov r8, r8)
    7e84:	20000f7c 	.word	0x20000f7c
    7e88:	00008bc1 	.word	0x00008bc1
    7e8c:	00008ba1 	.word	0x00008ba1
    7e90:	01010100 	.word	0x01010100
    7e94:	20000c7c 	.word	0x20000c7c
    7e98:	200012a4 	.word	0x200012a4
    7e9c:	200000ca 	.word	0x200000ca
    7ea0:	00007dd1 	.word	0x00007dd1

00007ea4 <_usb_ep0_on_setup>:
{
    7ea4:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    7ea6:	4d33      	ldr	r5, [pc, #204]	; (7f74 <_usb_ep0_on_setup+0xd0>)
{
    7ea8:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    7eaa:	782b      	ldrb	r3, [r5, #0]
    7eac:	2b00      	cmp	r3, #0
    7eae:	d006      	beq.n	7ebe <_usb_ep0_on_setup+0x1a>
		if (NULL != udd_g_ctrlreq.callback) {
    7eb0:	4b31      	ldr	r3, [pc, #196]	; (7f78 <_usb_ep0_on_setup+0xd4>)
    7eb2:	691b      	ldr	r3, [r3, #16]
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	d000      	beq.n	7eba <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    7eb8:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    7eba:	2300      	movs	r3, #0
    7ebc:	702b      	strb	r3, [r5, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    7ebe:	8823      	ldrh	r3, [r4, #0]
    7ec0:	2b08      	cmp	r3, #8
    7ec2:	d00b      	beq.n	7edc <_usb_ep0_on_setup+0x38>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    7ec4:	2305      	movs	r3, #5
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    7ec6:	4c2d      	ldr	r4, [pc, #180]	; (7f7c <_usb_ep0_on_setup+0xd8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    7ec8:	702b      	strb	r3, [r5, #0]
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    7eca:	2180      	movs	r1, #128	; 0x80
    7ecc:	0020      	movs	r0, r4
    7ece:	4b2c      	ldr	r3, [pc, #176]	; (7f80 <_usb_ep0_on_setup+0xdc>)
    7ed0:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    7ed2:	2100      	movs	r1, #0
    7ed4:	0020      	movs	r0, r4
    7ed6:	4b2b      	ldr	r3, [pc, #172]	; (7f84 <_usb_ep0_on_setup+0xe0>)
    7ed8:	4798      	blx	r3
}
    7eda:	bd70      	pop	{r4, r5, r6, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    7edc:	4c2a      	ldr	r4, [pc, #168]	; (7f88 <_usb_ep0_on_setup+0xe4>)
    7ede:	4e26      	ldr	r6, [pc, #152]	; (7f78 <_usb_ep0_on_setup+0xd4>)
    7ee0:	7823      	ldrb	r3, [r4, #0]
    7ee2:	7033      	strb	r3, [r6, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    7ee4:	7863      	ldrb	r3, [r4, #1]
    7ee6:	7073      	strb	r3, [r6, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    7ee8:	78e2      	ldrb	r2, [r4, #3]
    7eea:	78a3      	ldrb	r3, [r4, #2]
    7eec:	0212      	lsls	r2, r2, #8
    7eee:	189b      	adds	r3, r3, r2
    7ef0:	8073      	strh	r3, [r6, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    7ef2:	7962      	ldrb	r2, [r4, #5]
    7ef4:	7923      	ldrb	r3, [r4, #4]
    7ef6:	0212      	lsls	r2, r2, #8
    7ef8:	189b      	adds	r3, r3, r2
    7efa:	80b3      	strh	r3, [r6, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    7efc:	79e2      	ldrb	r2, [r4, #7]
    7efe:	79a3      	ldrb	r3, [r4, #6]
    7f00:	0212      	lsls	r2, r2, #8
    7f02:	189b      	adds	r3, r3, r2
    7f04:	80f3      	strh	r3, [r6, #6]
		if (false == udc_process_setup()) {
    7f06:	4b21      	ldr	r3, [pc, #132]	; (7f8c <_usb_ep0_on_setup+0xe8>)
    7f08:	4798      	blx	r3
    7f0a:	2800      	cmp	r0, #0
    7f0c:	d0da      	beq.n	7ec4 <_usb_ep0_on_setup+0x20>
		} else if (Udd_setup_is_in()) {
    7f0e:	7833      	ldrb	r3, [r6, #0]
    7f10:	2b7f      	cmp	r3, #127	; 0x7f
    7f12:	d81e      	bhi.n	7f52 <_usb_ep0_on_setup+0xae>
			if(0 == udd_g_ctrlreq.req.wLength) {
    7f14:	88f3      	ldrh	r3, [r6, #6]
    7f16:	2b00      	cmp	r3, #0
    7f18:	d00d      	beq.n	7f36 <_usb_ep0_on_setup+0x92>
				udd_ctrl_prev_payload_nb_trans = 0;
    7f1a:	2300      	movs	r3, #0
    7f1c:	4a1c      	ldr	r2, [pc, #112]	; (7f90 <_usb_ep0_on_setup+0xec>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    7f1e:	2100      	movs	r1, #0
				udd_ctrl_prev_payload_nb_trans = 0;
    7f20:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    7f22:	4a1c      	ldr	r2, [pc, #112]	; (7f94 <_usb_ep0_on_setup+0xf0>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    7f24:	4815      	ldr	r0, [pc, #84]	; (7f7c <_usb_ep0_on_setup+0xd8>)
				udd_ctrl_payload_nb_trans = 0;
    7f26:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    7f28:	3301      	adds	r3, #1
    7f2a:	702b      	strb	r3, [r5, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    7f2c:	0022      	movs	r2, r4
    7f2e:	333f      	adds	r3, #63	; 0x3f
    7f30:	4c19      	ldr	r4, [pc, #100]	; (7f98 <_usb_ep0_on_setup+0xf4>)
    7f32:	47a0      	blx	r4
    7f34:	e7d1      	b.n	7eda <_usb_ep0_on_setup+0x36>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    7f36:	3303      	adds	r3, #3
    7f38:	702b      	strb	r3, [r5, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    7f3a:	4d10      	ldr	r5, [pc, #64]	; (7f7c <_usb_ep0_on_setup+0xd8>)
    7f3c:	0021      	movs	r1, r4
    7f3e:	0028      	movs	r0, r5
    7f40:	4b16      	ldr	r3, [pc, #88]	; (7f9c <_usb_ep0_on_setup+0xf8>)
    7f42:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    7f44:	68b2      	ldr	r2, [r6, #8]
    7f46:	2300      	movs	r3, #0
    7f48:	2100      	movs	r1, #0
    7f4a:	0028      	movs	r0, r5
    7f4c:	4c14      	ldr	r4, [pc, #80]	; (7fa0 <_usb_ep0_on_setup+0xfc>)
    7f4e:	47a0      	blx	r4
    7f50:	e7c3      	b.n	7eda <_usb_ep0_on_setup+0x36>
			udd_ctrl_prev_payload_nb_trans = 0;
    7f52:	2300      	movs	r3, #0
    7f54:	4a0e      	ldr	r2, [pc, #56]	; (7f90 <_usb_ep0_on_setup+0xec>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    7f56:	2100      	movs	r1, #0
			udd_ctrl_prev_payload_nb_trans = 0;
    7f58:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    7f5a:	4a0e      	ldr	r2, [pc, #56]	; (7f94 <_usb_ep0_on_setup+0xf0>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    7f5c:	4807      	ldr	r0, [pc, #28]	; (7f7c <_usb_ep0_on_setup+0xd8>)
			udd_ctrl_payload_nb_trans = 0;
    7f5e:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    7f60:	3302      	adds	r3, #2
    7f62:	702b      	strb	r3, [r5, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    7f64:	0022      	movs	r2, r4
    7f66:	333e      	adds	r3, #62	; 0x3e
    7f68:	4c0b      	ldr	r4, [pc, #44]	; (7f98 <_usb_ep0_on_setup+0xf4>)
    7f6a:	47a0      	blx	r4
			udd_ctrl_in_sent();
    7f6c:	4b0d      	ldr	r3, [pc, #52]	; (7fa4 <_usb_ep0_on_setup+0x100>)
    7f6e:	4798      	blx	r3
    7f70:	e7b3      	b.n	7eda <_usb_ep0_on_setup+0x36>
    7f72:	46c0      	nop			; (mov r8, r8)
    7f74:	20000c2a 	.word	0x20000c2a
    7f78:	200010e4 	.word	0x200010e4
    7f7c:	20000f7c 	.word	0x20000f7c
    7f80:	00008ffd 	.word	0x00008ffd
    7f84:	0000901d 	.word	0x0000901d
    7f88:	200010fc 	.word	0x200010fc
    7f8c:	00007301 	.word	0x00007301
    7f90:	20000c28 	.word	0x20000c28
    7f94:	20000c26 	.word	0x20000c26
    7f98:	000090e5 	.word	0x000090e5
    7f9c:	0000912d 	.word	0x0000912d
    7fa0:	00009099 	.word	0x00009099
    7fa4:	00007d21 	.word	0x00007d21

00007fa8 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    7fa8:	b530      	push	{r4, r5, lr}
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    7faa:	4b31      	ldr	r3, [pc, #196]	; (8070 <_usb_on_wakeup+0xc8>)
{
    7fac:	b085      	sub	sp, #20
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    7fae:	8b1a      	ldrh	r2, [r3, #24]
    7fb0:	0692      	lsls	r2, r2, #26
    7fb2:	d43e      	bmi.n	8032 <_usb_on_wakeup+0x8a>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    7fb4:	21d0      	movs	r1, #208	; 0xd0
    7fb6:	0109      	lsls	r1, r1, #4
    7fb8:	68da      	ldr	r2, [r3, #12]
    7fba:	400a      	ands	r2, r1
    7fbc:	428a      	cmp	r2, r1
    7fbe:	d1fb      	bne.n	7fb8 <_usb_on_wakeup+0x10>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    7fc0:	4c2c      	ldr	r4, [pc, #176]	; (8074 <_usb_on_wakeup+0xcc>)
    7fc2:	4b2d      	ldr	r3, [pc, #180]	; (8078 <_usb_on_wakeup+0xd0>)
    7fc4:	2102      	movs	r1, #2
    7fc6:	0020      	movs	r0, r4
    7fc8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    7fca:	2104      	movs	r1, #4
    7fcc:	0020      	movs	r0, r4
    7fce:	4d2b      	ldr	r5, [pc, #172]	; (807c <_usb_on_wakeup+0xd4>)
    7fd0:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    7fd2:	4b2b      	ldr	r3, [pc, #172]	; (8080 <_usb_on_wakeup+0xd8>)
    7fd4:	4a2b      	ldr	r2, [pc, #172]	; (8084 <_usb_on_wakeup+0xdc>)
    7fd6:	2106      	movs	r1, #6
    7fd8:	0020      	movs	r0, r4
    7fda:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    7fdc:	0020      	movs	r0, r4
    7fde:	2106      	movs	r1, #6
    7fe0:	47a8      	blx	r5
	enum sleepmgr_mode sleep_mode[] = {
    7fe2:	4b29      	ldr	r3, [pc, #164]	; (8088 <_usb_on_wakeup+0xe0>)
	if (udd_state == new_state) {
    7fe4:	4c29      	ldr	r4, [pc, #164]	; (808c <_usb_on_wakeup+0xe4>)
	enum sleepmgr_mode sleep_mode[] = {
    7fe6:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    7fe8:	7823      	ldrb	r3, [r4, #0]
    7fea:	2b03      	cmp	r3, #3
    7fec:	d01e      	beq.n	802c <_usb_on_wakeup+0x84>
	if(sleepmgr_locks[mode] >= 0xff) {
    7fee:	4b28      	ldr	r3, [pc, #160]	; (8090 <_usb_on_wakeup+0xe8>)
    7ff0:	785a      	ldrb	r2, [r3, #1]
    7ff2:	2aff      	cmp	r2, #255	; 0xff
    7ff4:	d01c      	beq.n	8030 <_usb_on_wakeup+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    7ff6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    7ffa:	4251      	negs	r1, r2
    7ffc:	414a      	adcs	r2, r1
    7ffe:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    8000:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8002:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8006:	2200      	movs	r2, #0
    8008:	4922      	ldr	r1, [pc, #136]	; (8094 <_usb_on_wakeup+0xec>)
    800a:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    800c:	785a      	ldrb	r2, [r3, #1]
	return flags;
    800e:	9802      	ldr	r0, [sp, #8]
    8010:	3201      	adds	r2, #1
    8012:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    8014:	2800      	cmp	r0, #0
    8016:	d004      	beq.n	8022 <_usb_on_wakeup+0x7a>
		cpu_irq_enable();
    8018:	2201      	movs	r2, #1
    801a:	700a      	strb	r2, [r1, #0]
    801c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8020:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    8022:	7822      	ldrb	r2, [r4, #0]
    8024:	2a00      	cmp	r2, #0
    8026:	d10a      	bne.n	803e <_usb_on_wakeup+0x96>
	udd_state = new_state;
    8028:	2303      	movs	r3, #3
    802a:	7023      	strb	r3, [r4, #0]
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    802c:	b005      	add	sp, #20
    802e:	bd30      	pop	{r4, r5, pc}
    8030:	e7fe      	b.n	8030 <_usb_on_wakeup+0x88>
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    8032:	2180      	movs	r1, #128	; 0x80
    8034:	0049      	lsls	r1, r1, #1
    8036:	68da      	ldr	r2, [r3, #12]
    8038:	420a      	tst	r2, r1
    803a:	d0fc      	beq.n	8036 <_usb_on_wakeup+0x8e>
    803c:	e7c0      	b.n	7fc0 <_usb_on_wakeup+0x18>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    803e:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    8040:	5c82      	ldrb	r2, [r0, r2]
    8042:	5c98      	ldrb	r0, [r3, r2]
    8044:	2800      	cmp	r0, #0
    8046:	d012      	beq.n	806e <_usb_on_wakeup+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8048:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    804c:	4245      	negs	r5, r0
    804e:	4168      	adcs	r0, r5
    8050:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    8052:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8054:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8058:	2000      	movs	r0, #0
    805a:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    805c:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    805e:	9803      	ldr	r0, [sp, #12]
    8060:	3901      	subs	r1, #1
    8062:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    8064:	2800      	cmp	r0, #0
    8066:	d0df      	beq.n	8028 <_usb_on_wakeup+0x80>
    8068:	4b0b      	ldr	r3, [pc, #44]	; (8098 <_usb_on_wakeup+0xf0>)
    806a:	4798      	blx	r3
    806c:	e7dc      	b.n	8028 <_usb_on_wakeup+0x80>
    806e:	e7fe      	b.n	806e <_usb_on_wakeup+0xc6>
    8070:	40000c00 	.word	0x40000c00
    8074:	20000f7c 	.word	0x20000f7c
    8078:	00008bc1 	.word	0x00008bc1
    807c:	00008ba1 	.word	0x00008ba1
    8080:	00008b7d 	.word	0x00008b7d
    8084:	00007de5 	.word	0x00007de5
    8088:	01010100 	.word	0x01010100
    808c:	20000c7c 	.word	0x20000c7c
    8090:	200012a4 	.word	0x200012a4
    8094:	200000ca 	.word	0x200000ca
    8098:	00007dd1 	.word	0x00007dd1

0000809c <_usb_on_suspend>:
{
    809c:	b530      	push	{r4, r5, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    809e:	4c25      	ldr	r4, [pc, #148]	; (8134 <_usb_on_suspend+0x98>)
{
    80a0:	b085      	sub	sp, #20
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    80a2:	2104      	movs	r1, #4
    80a4:	0020      	movs	r0, r4
    80a6:	4b24      	ldr	r3, [pc, #144]	; (8138 <_usb_on_suspend+0x9c>)
    80a8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    80aa:	0020      	movs	r0, r4
    80ac:	4b23      	ldr	r3, [pc, #140]	; (813c <_usb_on_suspend+0xa0>)
    80ae:	2102      	movs	r1, #2
    80b0:	4798      	blx	r3
	enum sleepmgr_mode sleep_mode[] = {
    80b2:	4b23      	ldr	r3, [pc, #140]	; (8140 <_usb_on_suspend+0xa4>)
	if (udd_state == new_state) {
    80b4:	4c23      	ldr	r4, [pc, #140]	; (8144 <_usb_on_suspend+0xa8>)
	enum sleepmgr_mode sleep_mode[] = {
    80b6:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b01      	cmp	r3, #1
    80bc:	d01e      	beq.n	80fc <_usb_on_suspend+0x60>
	if(sleepmgr_locks[mode] >= 0xff) {
    80be:	4b22      	ldr	r3, [pc, #136]	; (8148 <_usb_on_suspend+0xac>)
    80c0:	785a      	ldrb	r2, [r3, #1]
    80c2:	2aff      	cmp	r2, #255	; 0xff
    80c4:	d01c      	beq.n	8100 <_usb_on_suspend+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    80c6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    80ca:	4251      	negs	r1, r2
    80cc:	414a      	adcs	r2, r1
    80ce:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    80d0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    80d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    80d6:	2200      	movs	r2, #0
    80d8:	491c      	ldr	r1, [pc, #112]	; (814c <_usb_on_suspend+0xb0>)
    80da:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    80dc:	785a      	ldrb	r2, [r3, #1]
	return flags;
    80de:	9802      	ldr	r0, [sp, #8]
    80e0:	3201      	adds	r2, #1
    80e2:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    80e4:	2800      	cmp	r0, #0
    80e6:	d004      	beq.n	80f2 <_usb_on_suspend+0x56>
		cpu_irq_enable();
    80e8:	2201      	movs	r2, #1
    80ea:	700a      	strb	r2, [r1, #0]
    80ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    80f0:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    80f2:	7822      	ldrb	r2, [r4, #0]
    80f4:	2a00      	cmp	r2, #0
    80f6:	d104      	bne.n	8102 <_usb_on_suspend+0x66>
	udd_state = new_state;
    80f8:	2301      	movs	r3, #1
    80fa:	7023      	strb	r3, [r4, #0]
}
    80fc:	b005      	add	sp, #20
    80fe:	bd30      	pop	{r4, r5, pc}
    8100:	e7fe      	b.n	8100 <_usb_on_suspend+0x64>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    8102:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    8104:	5c82      	ldrb	r2, [r0, r2]
    8106:	5c98      	ldrb	r0, [r3, r2]
    8108:	2800      	cmp	r0, #0
    810a:	d012      	beq.n	8132 <_usb_on_suspend+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    810c:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8110:	4245      	negs	r5, r0
    8112:	4168      	adcs	r0, r5
    8114:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    8116:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8118:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    811c:	2000      	movs	r0, #0
    811e:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    8120:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    8122:	9803      	ldr	r0, [sp, #12]
    8124:	3901      	subs	r1, #1
    8126:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    8128:	2800      	cmp	r0, #0
    812a:	d0e5      	beq.n	80f8 <_usb_on_suspend+0x5c>
    812c:	4b08      	ldr	r3, [pc, #32]	; (8150 <_usb_on_suspend+0xb4>)
    812e:	4798      	blx	r3
    8130:	e7e2      	b.n	80f8 <_usb_on_suspend+0x5c>
    8132:	e7fe      	b.n	8132 <_usb_on_suspend+0x96>
    8134:	20000f7c 	.word	0x20000f7c
    8138:	00008bc1 	.word	0x00008bc1
    813c:	00008ba1 	.word	0x00008ba1
    8140:	01010100 	.word	0x01010100
    8144:	20000c7c 	.word	0x20000c7c
    8148:	200012a4 	.word	0x200012a4
    814c:	200000ca 	.word	0x200000ca
    8150:	00007dd1 	.word	0x00007dd1

00008154 <udd_ep_abort>:
{
    8154:	b570      	push	{r4, r5, r6, lr}
	usb_device_endpoint_abort_job(&usb_device, ep);
    8156:	0001      	movs	r1, r0
{
    8158:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    815a:	4b10      	ldr	r3, [pc, #64]	; (819c <udd_ep_abort+0x48>)
    815c:	4810      	ldr	r0, [pc, #64]	; (81a0 <udd_ep_abort+0x4c>)
    815e:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    8160:	237f      	movs	r3, #127	; 0x7f
    8162:	4023      	ands	r3, r4
    8164:	d017      	beq.n	8196 <udd_ep_abort+0x42>
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    8166:	230f      	movs	r3, #15
	if (!ptr_job->busy) {
    8168:	2001      	movs	r0, #1
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    816a:	4023      	ands	r3, r4
    816c:	09e2      	lsrs	r2, r4, #7
    816e:	005b      	lsls	r3, r3, #1
    8170:	189b      	adds	r3, r3, r2
    8172:	3b02      	subs	r3, #2
	if (!ptr_job->busy) {
    8174:	009a      	lsls	r2, r3, #2
    8176:	18d3      	adds	r3, r2, r3
    8178:	490a      	ldr	r1, [pc, #40]	; (81a4 <udd_ep_abort+0x50>)
    817a:	009b      	lsls	r3, r3, #2
    817c:	18ca      	adds	r2, r1, r3
    817e:	7c95      	ldrb	r5, [r2, #18]
    8180:	4228      	tst	r0, r5
    8182:	d007      	beq.n	8194 <udd_ep_abort+0x40>
	if (NULL != ptr_job->call_trans) {
    8184:	585b      	ldr	r3, [r3, r1]
	ptr_job->busy = false;
    8186:	4385      	bics	r5, r0
    8188:	7495      	strb	r5, [r2, #18]
	if (NULL != ptr_job->call_trans) {
    818a:	2b00      	cmp	r3, #0
    818c:	d002      	beq.n	8194 <udd_ep_abort+0x40>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    818e:	68d1      	ldr	r1, [r2, #12]
    8190:	0022      	movs	r2, r4
    8192:	4798      	blx	r3
}
    8194:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptr_job->busy) {
    8196:	7c9b      	ldrb	r3, [r3, #18]
    8198:	deff      	udf	#255	; 0xff
    819a:	46c0      	nop			; (mov r8, r8)
    819c:	00008fad 	.word	0x00008fad
    81a0:	20000f7c 	.word	0x20000f7c
    81a4:	20000c2c 	.word	0x20000c2c

000081a8 <_usb_ep0_on_tansfer_ok>:
{
    81a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81aa:	46ce      	mov	lr, r9
    81ac:	4647      	mov	r7, r8
    81ae:	b580      	push	{r7, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    81b0:	4c3c      	ldr	r4, [pc, #240]	; (82a4 <_usb_ep0_on_tansfer_ok+0xfc>)
    81b2:	7823      	ldrb	r3, [r4, #0]
    81b4:	2b01      	cmp	r3, #1
    81b6:	d00c      	beq.n	81d2 <_usb_ep0_on_tansfer_ok+0x2a>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    81b8:	2b02      	cmp	r3, #2
    81ba:	d036      	beq.n	822a <_usb_ep0_on_tansfer_ok+0x82>
			if (NULL != udd_g_ctrlreq.callback) {
    81bc:	4b3a      	ldr	r3, [pc, #232]	; (82a8 <_usb_ep0_on_tansfer_ok+0x100>)
    81be:	691b      	ldr	r3, [r3, #16]
    81c0:	2b00      	cmp	r3, #0
    81c2:	d000      	beq.n	81c6 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_g_ctrlreq.callback();
    81c4:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    81c6:	2300      	movs	r3, #0
    81c8:	7023      	strb	r3, [r4, #0]
}
    81ca:	bc0c      	pop	{r2, r3}
    81cc:	4690      	mov	r8, r2
    81ce:	4699      	mov	r9, r3
    81d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    81d2:	4a36      	ldr	r2, [pc, #216]	; (82ac <_usb_ep0_on_tansfer_ok+0x104>)
    81d4:	4e34      	ldr	r6, [pc, #208]	; (82a8 <_usb_ep0_on_tansfer_ok+0x100>)
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    81d6:	880f      	ldrh	r7, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    81d8:	8810      	ldrh	r0, [r2, #0]
    81da:	89b3      	ldrh	r3, [r6, #12]
    81dc:	19c5      	adds	r5, r0, r7
    81de:	4690      	mov	r8, r2
    81e0:	42ab      	cmp	r3, r5
    81e2:	db25      	blt.n	8230 <_usb_ep0_on_tansfer_ok+0x88>
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    81e4:	68b3      	ldr	r3, [r6, #8]
    81e6:	003a      	movs	r2, r7
    81e8:	469c      	mov	ip, r3
    81ea:	4b31      	ldr	r3, [pc, #196]	; (82b0 <_usb_ep0_on_tansfer_ok+0x108>)
    81ec:	4460      	add	r0, ip
    81ee:	0019      	movs	r1, r3
    81f0:	4699      	mov	r9, r3
    81f2:	4b30      	ldr	r3, [pc, #192]	; (82b4 <_usb_ep0_on_tansfer_ok+0x10c>)
    81f4:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    81f6:	4643      	mov	r3, r8
    81f8:	b2ad      	uxth	r5, r5
    81fa:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    81fc:	2f40      	cmp	r7, #64	; 0x40
    81fe:	d01b      	beq.n	8238 <_usb_ep0_on_tansfer_ok+0x90>
		if (NULL != udd_g_ctrlreq.over_under_run) {
    8200:	6973      	ldr	r3, [r6, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    8202:	81b5      	strh	r5, [r6, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    8204:	2b00      	cmp	r3, #0
    8206:	d002      	beq.n	820e <_usb_ep0_on_tansfer_ok+0x66>
			if (!udd_g_ctrlreq.over_under_run()) {
    8208:	4798      	blx	r3
    820a:	1e05      	subs	r5, r0, #0
    820c:	d032      	beq.n	8274 <_usb_ep0_on_tansfer_ok+0xcc>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    820e:	2303      	movs	r3, #3
    8210:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    8212:	4c29      	ldr	r4, [pc, #164]	; (82b8 <_usb_ep0_on_tansfer_ok+0x110>)
    8214:	4649      	mov	r1, r9
    8216:	0020      	movs	r0, r4
    8218:	4b28      	ldr	r3, [pc, #160]	; (82bc <_usb_ep0_on_tansfer_ok+0x114>)
    821a:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    821c:	68b2      	ldr	r2, [r6, #8]
    821e:	2300      	movs	r3, #0
    8220:	2100      	movs	r1, #0
    8222:	0020      	movs	r0, r4
    8224:	4c26      	ldr	r4, [pc, #152]	; (82c0 <_usb_ep0_on_tansfer_ok+0x118>)
    8226:	47a0      	blx	r4
    8228:	e7cf      	b.n	81ca <_usb_ep0_on_tansfer_ok+0x22>
			udd_ctrl_in_sent();
    822a:	4b26      	ldr	r3, [pc, #152]	; (82c4 <_usb_ep0_on_tansfer_ok+0x11c>)
    822c:	4798      	blx	r3
    822e:	e7cc      	b.n	81ca <_usb_ep0_on_tansfer_ok+0x22>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    8230:	1a1f      	subs	r7, r3, r0
    8232:	b2bf      	uxth	r7, r7
    8234:	19c5      	adds	r5, r0, r7
    8236:	e7d5      	b.n	81e4 <_usb_ep0_on_tansfer_ok+0x3c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    8238:	4f23      	ldr	r7, [pc, #140]	; (82c8 <_usb_ep0_on_tansfer_ok+0x120>)
    823a:	88f2      	ldrh	r2, [r6, #6]
    823c:	883b      	ldrh	r3, [r7, #0]
    823e:	195b      	adds	r3, r3, r5
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    8240:	429a      	cmp	r2, r3
    8242:	dddd      	ble.n	8200 <_usb_ep0_on_tansfer_ok+0x58>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    8244:	89b3      	ldrh	r3, [r6, #12]
    8246:	42ab      	cmp	r3, r5
    8248:	d10d      	bne.n	8266 <_usb_ep0_on_tansfer_ok+0xbe>
		if (!udd_g_ctrlreq.over_under_run) {
    824a:	6975      	ldr	r5, [r6, #20]
    824c:	2d00      	cmp	r5, #0
    824e:	d011      	beq.n	8274 <_usb_ep0_on_tansfer_ok+0xcc>
		if (!udd_g_ctrlreq.over_under_run()) {
    8250:	47a8      	blx	r5
    8252:	2800      	cmp	r0, #0
    8254:	d01b      	beq.n	828e <_usb_ep0_on_tansfer_ok+0xe6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    8256:	4642      	mov	r2, r8
    8258:	883b      	ldrh	r3, [r7, #0]
    825a:	8812      	ldrh	r2, [r2, #0]
    825c:	189b      	adds	r3, r3, r2
    825e:	803b      	strh	r3, [r7, #0]
		udd_ctrl_payload_nb_trans = 0;
    8260:	4642      	mov	r2, r8
    8262:	2300      	movs	r3, #0
    8264:	8013      	strh	r3, [r2, #0]
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    8266:	2340      	movs	r3, #64	; 0x40
    8268:	464a      	mov	r2, r9
    826a:	2100      	movs	r1, #0
    826c:	4c17      	ldr	r4, [pc, #92]	; (82cc <_usb_ep0_on_tansfer_ok+0x124>)
    826e:	4812      	ldr	r0, [pc, #72]	; (82b8 <_usb_ep0_on_tansfer_ok+0x110>)
    8270:	47a0      	blx	r4
    8272:	e7aa      	b.n	81ca <_usb_ep0_on_tansfer_ok+0x22>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    8274:	2305      	movs	r3, #5
    8276:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_set_halt(&usb_device, ep);
    8278:	4c0f      	ldr	r4, [pc, #60]	; (82b8 <_usb_ep0_on_tansfer_ok+0x110>)
    827a:	2100      	movs	r1, #0
    827c:	0020      	movs	r0, r4
    827e:	4b14      	ldr	r3, [pc, #80]	; (82d0 <_usb_ep0_on_tansfer_ok+0x128>)
    8280:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    8282:	2100      	movs	r1, #0
    8284:	0020      	movs	r0, r4
    8286:	4b13      	ldr	r3, [pc, #76]	; (82d4 <_usb_ep0_on_tansfer_ok+0x12c>)
    8288:	4798      	blx	r3
	if (!ptr_job->busy) {
    828a:	7cab      	ldrb	r3, [r5, #18]
    828c:	deff      	udf	#255	; 0xff
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    828e:	2305      	movs	r3, #5
	usb_device_endpoint_set_halt(&usb_device, ep);
    8290:	2100      	movs	r1, #0
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    8292:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_set_halt(&usb_device, ep);
    8294:	4808      	ldr	r0, [pc, #32]	; (82b8 <_usb_ep0_on_tansfer_ok+0x110>)
    8296:	4b0e      	ldr	r3, [pc, #56]	; (82d0 <_usb_ep0_on_tansfer_ok+0x128>)
    8298:	4798      	blx	r3
	udd_ep_abort(ep);
    829a:	2000      	movs	r0, #0
    829c:	4b0e      	ldr	r3, [pc, #56]	; (82d8 <_usb_ep0_on_tansfer_ok+0x130>)
    829e:	4798      	blx	r3
    82a0:	e793      	b.n	81ca <_usb_ep0_on_tansfer_ok+0x22>
    82a2:	46c0      	nop			; (mov r8, r8)
    82a4:	20000c2a 	.word	0x20000c2a
    82a8:	200010e4 	.word	0x200010e4
    82ac:	20000c26 	.word	0x20000c26
    82b0:	200010fc 	.word	0x200010fc
    82b4:	00028999 	.word	0x00028999
    82b8:	20000f7c 	.word	0x20000f7c
    82bc:	0000912d 	.word	0x0000912d
    82c0:	00009099 	.word	0x00009099
    82c4:	00007d21 	.word	0x00007d21
    82c8:	20000c28 	.word	0x20000c28
    82cc:	000090e5 	.word	0x000090e5
    82d0:	00008ffd 	.word	0x00008ffd
    82d4:	00008fad 	.word	0x00008fad
    82d8:	00008155 	.word	0x00008155

000082dc <udd_ep_free>:
{
    82dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    82de:	46ce      	mov	lr, r9
    82e0:	4647      	mov	r7, r8
    82e2:	0005      	movs	r5, r0
    82e4:	b580      	push	{r7, lr}
    82e6:	b083      	sub	sp, #12
	usb_device_endpoint_get_config_defaults(&config_ep);
    82e8:	ac01      	add	r4, sp, #4
    82ea:	0020      	movs	r0, r4
    82ec:	4b21      	ldr	r3, [pc, #132]	; (8374 <udd_ep_free+0x98>)
    82ee:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    82f0:	4e21      	ldr	r6, [pc, #132]	; (8378 <udd_ep_free+0x9c>)
    82f2:	4b22      	ldr	r3, [pc, #136]	; (837c <udd_ep_free+0xa0>)
    82f4:	0029      	movs	r1, r5
    82f6:	0030      	movs	r0, r6
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    82f8:	270f      	movs	r7, #15
	usb_device_endpoint_abort_job(&usb_device, ep);
    82fa:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    82fc:	237f      	movs	r3, #127	; 0x7f
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    82fe:	402f      	ands	r7, r5
	if ((ep == 0) || (ep == 0x80)) {
    8300:	402b      	ands	r3, r5
    8302:	d035      	beq.n	8370 <udd_ep_free+0x94>
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    8304:	007a      	lsls	r2, r7, #1
    8306:	09e9      	lsrs	r1, r5, #7
    8308:	1853      	adds	r3, r2, r1
	if (!ptr_job->busy) {
    830a:	4a1d      	ldr	r2, [pc, #116]	; (8380 <udd_ep_free+0xa4>)
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    830c:	3b02      	subs	r3, #2
	if (!ptr_job->busy) {
    830e:	4691      	mov	r9, r2
    8310:	009a      	lsls	r2, r3, #2
    8312:	18d3      	adds	r3, r2, r3
    8314:	464a      	mov	r2, r9
    8316:	2001      	movs	r0, #1
    8318:	009b      	lsls	r3, r3, #2
    831a:	18d2      	adds	r2, r2, r3
    831c:	7c91      	ldrb	r1, [r2, #18]
    831e:	4208      	tst	r0, r1
    8320:	d010      	beq.n	8344 <udd_ep_free+0x68>
	ptr_job->busy = false;
    8322:	2110      	movs	r1, #16
    8324:	4688      	mov	r8, r1
    8326:	4490      	add	r8, r2
    8328:	4641      	mov	r1, r8
    832a:	7889      	ldrb	r1, [r1, #2]
    832c:	4381      	bics	r1, r0
    832e:	0008      	movs	r0, r1
    8330:	4641      	mov	r1, r8
    8332:	7088      	strb	r0, [r1, #2]
	if (NULL != ptr_job->call_trans) {
    8334:	4649      	mov	r1, r9
    8336:	585b      	ldr	r3, [r3, r1]
    8338:	2b00      	cmp	r3, #0
    833a:	d003      	beq.n	8344 <udd_ep_free+0x68>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    833c:	68d1      	ldr	r1, [r2, #12]
    833e:	2001      	movs	r0, #1
    8340:	002a      	movs	r2, r5
    8342:	4798      	blx	r3
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    8344:	2300      	movs	r3, #0
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    8346:	0021      	movs	r1, r4
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    8348:	70e3      	strb	r3, [r4, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    834a:	0030      	movs	r0, r6
    834c:	4b0d      	ldr	r3, [pc, #52]	; (8384 <udd_ep_free+0xa8>)
	config_ep.ep_address = ep;
    834e:	7025      	strb	r5, [r4, #0]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    8350:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    8352:	0039      	movs	r1, r7
    8354:	2200      	movs	r2, #0
    8356:	0030      	movs	r0, r6
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <udd_ep_free+0xac>)
    835a:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    835c:	2200      	movs	r2, #0
    835e:	0029      	movs	r1, r5
    8360:	0030      	movs	r0, r6
    8362:	4b0a      	ldr	r3, [pc, #40]	; (838c <udd_ep_free+0xb0>)
    8364:	4798      	blx	r3
}
    8366:	b003      	add	sp, #12
    8368:	bc0c      	pop	{r2, r3}
    836a:	4690      	mov	r8, r2
    836c:	4699      	mov	r9, r3
    836e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!ptr_job->busy) {
    8370:	7c9b      	ldrb	r3, [r3, #18]
    8372:	deff      	udf	#255	; 0xff
    8374:	00008d8d 	.word	0x00008d8d
    8378:	20000f7c 	.word	0x20000f7c
    837c:	00008fad 	.word	0x00008fad
    8380:	20000c2c 	.word	0x20000c2c
    8384:	00008d9d 	.word	0x00008d9d
    8388:	00008c05 	.word	0x00008c05
    838c:	00008cdd 	.word	0x00008cdd

00008390 <udd_ep_alloc>:
{
    8390:	b5f0      	push	{r4, r5, r6, r7, lr}
    8392:	46c6      	mov	lr, r8
    8394:	0005      	movs	r5, r0
    8396:	b500      	push	{lr}
    8398:	b082      	sub	sp, #8
	usb_device_endpoint_get_config_defaults(&config_ep);
    839a:	ac01      	add	r4, sp, #4
    839c:	0020      	movs	r0, r4
    839e:	4b37      	ldr	r3, [pc, #220]	; (847c <udd_ep_alloc+0xec>)
{
    83a0:	000e      	movs	r6, r1
    83a2:	0017      	movs	r7, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    83a4:	4798      	blx	r3
	config_ep.ep_address = ep;
    83a6:	7025      	strb	r5, [r4, #0]
	if(MaxEndpointSize <= 8) {
    83a8:	2f08      	cmp	r7, #8
    83aa:	d820      	bhi.n	83ee <udd_ep_alloc+0x5e>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    83ac:	2300      	movs	r3, #0
    83ae:	7063      	strb	r3, [r4, #1]
	if ((ep == 0) || (ep == 0x80)) {
    83b0:	237f      	movs	r3, #127	; 0x7f
    83b2:	402b      	ands	r3, r5
    83b4:	d019      	beq.n	83ea <udd_ep_alloc+0x5a>
    83b6:	230f      	movs	r3, #15
    83b8:	402b      	ands	r3, r5
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    83ba:	09ea      	lsrs	r2, r5, #7
    83bc:	4698      	mov	r8, r3
	ptr_job->ep_size = MaxEndpointSize;
    83be:	005b      	lsls	r3, r3, #1
    83c0:	189b      	adds	r3, r3, r2
    83c2:	3b02      	subs	r3, #2
    83c4:	009a      	lsls	r2, r3, #2
    83c6:	18d3      	adds	r3, r2, r3
    83c8:	4a2d      	ldr	r2, [pc, #180]	; (8480 <udd_ep_alloc+0xf0>)
    83ca:	009b      	lsls	r3, r3, #2
    83cc:	18d3      	adds	r3, r2, r3
    83ce:	821f      	strh	r7, [r3, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    83d0:	2303      	movs	r3, #3
    83d2:	401e      	ands	r6, r3
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    83d4:	2e01      	cmp	r6, #1
    83d6:	d030      	beq.n	843a <udd_ep_alloc+0xaa>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    83d8:	2e02      	cmp	r6, #2
    83da:	d015      	beq.n	8408 <udd_ep_alloc+0x78>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    83dc:	2e03      	cmp	r6, #3
    83de:	d012      	beq.n	8406 <udd_ep_alloc+0x76>
		return false;
    83e0:	2000      	movs	r0, #0
}
    83e2:	b002      	add	sp, #8
    83e4:	bc04      	pop	{r2}
    83e6:	4690      	mov	r8, r2
    83e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job->ep_size = MaxEndpointSize;
    83ea:	821b      	strh	r3, [r3, #16]
    83ec:	deff      	udf	#255	; 0xff
	} else if(MaxEndpointSize <= 16) {
    83ee:	2f10      	cmp	r7, #16
    83f0:	d802      	bhi.n	83f8 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    83f2:	2301      	movs	r3, #1
    83f4:	7063      	strb	r3, [r4, #1]
    83f6:	e7db      	b.n	83b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 32) {
    83f8:	2f20      	cmp	r7, #32
    83fa:	d921      	bls.n	8440 <udd_ep_alloc+0xb0>
	} else if(MaxEndpointSize <= 64) {
    83fc:	2f40      	cmp	r7, #64	; 0x40
    83fe:	d822      	bhi.n	8446 <udd_ep_alloc+0xb6>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    8400:	2303      	movs	r3, #3
    8402:	7063      	strb	r3, [r4, #1]
    8404:	e7d4      	b.n	83b0 <udd_ep_alloc+0x20>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    8406:	2304      	movs	r3, #4
    8408:	70e3      	strb	r3, [r4, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    840a:	4e1e      	ldr	r6, [pc, #120]	; (8484 <udd_ep_alloc+0xf4>)
    840c:	0021      	movs	r1, r4
    840e:	0030      	movs	r0, r6
    8410:	4b1d      	ldr	r3, [pc, #116]	; (8488 <udd_ep_alloc+0xf8>)
    8412:	4798      	blx	r3
    8414:	2800      	cmp	r0, #0
    8416:	d1e3      	bne.n	83e0 <udd_ep_alloc+0x50>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    8418:	4b1c      	ldr	r3, [pc, #112]	; (848c <udd_ep_alloc+0xfc>)
    841a:	2200      	movs	r2, #0
    841c:	4641      	mov	r1, r8
    841e:	4c1c      	ldr	r4, [pc, #112]	; (8490 <udd_ep_alloc+0x100>)
    8420:	0030      	movs	r0, r6
    8422:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    8424:	2200      	movs	r2, #0
    8426:	0029      	movs	r1, r5
    8428:	4c1a      	ldr	r4, [pc, #104]	; (8494 <udd_ep_alloc+0x104>)
    842a:	0030      	movs	r0, r6
    842c:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    842e:	2201      	movs	r2, #1
    8430:	0029      	movs	r1, r5
    8432:	0030      	movs	r0, r6
    8434:	47a0      	blx	r4
	return true;
    8436:	2001      	movs	r0, #1
    8438:	e7d3      	b.n	83e2 <udd_ep_alloc+0x52>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    843a:	3b01      	subs	r3, #1
    843c:	70e3      	strb	r3, [r4, #3]
    843e:	e7e4      	b.n	840a <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    8440:	2302      	movs	r3, #2
    8442:	7063      	strb	r3, [r4, #1]
    8444:	e7b4      	b.n	83b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 128) {
    8446:	2f80      	cmp	r7, #128	; 0x80
    8448:	d906      	bls.n	8458 <udd_ep_alloc+0xc8>
	} else if(MaxEndpointSize <= 256) {
    844a:	2380      	movs	r3, #128	; 0x80
    844c:	005b      	lsls	r3, r3, #1
    844e:	429f      	cmp	r7, r3
    8450:	d805      	bhi.n	845e <udd_ep_alloc+0xce>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    8452:	3bfb      	subs	r3, #251	; 0xfb
    8454:	7063      	strb	r3, [r4, #1]
    8456:	e7ab      	b.n	83b0 <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    8458:	2304      	movs	r3, #4
    845a:	7063      	strb	r3, [r4, #1]
    845c:	e7a8      	b.n	83b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 512) {
    845e:	2380      	movs	r3, #128	; 0x80
    8460:	009b      	lsls	r3, r3, #2
    8462:	429f      	cmp	r7, r3
    8464:	d803      	bhi.n	846e <udd_ep_alloc+0xde>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    8466:	3bfb      	subs	r3, #251	; 0xfb
    8468:	3bff      	subs	r3, #255	; 0xff
    846a:	7063      	strb	r3, [r4, #1]
    846c:	e7a0      	b.n	83b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 1023) {
    846e:	4b0a      	ldr	r3, [pc, #40]	; (8498 <udd_ep_alloc+0x108>)
    8470:	429f      	cmp	r7, r3
    8472:	d8b5      	bhi.n	83e0 <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    8474:	2307      	movs	r3, #7
    8476:	7063      	strb	r3, [r4, #1]
    8478:	e79a      	b.n	83b0 <udd_ep_alloc+0x20>
    847a:	46c0      	nop			; (mov r8, r8)
    847c:	00008d8d 	.word	0x00008d8d
    8480:	20000c2c 	.word	0x20000c2c
    8484:	20000f7c 	.word	0x20000f7c
    8488:	00008d9d 	.word	0x00008d9d
    848c:	000079f9 	.word	0x000079f9
    8490:	00008bdd 	.word	0x00008bdd
    8494:	00008c2d 	.word	0x00008c2d
    8498:	000003ff 	.word	0x000003ff

0000849c <udd_ep_is_halted>:
{
    849c:	b510      	push	{r4, lr}
    849e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    84a0:	4b01      	ldr	r3, [pc, #4]	; (84a8 <udd_ep_is_halted+0xc>)
    84a2:	4802      	ldr	r0, [pc, #8]	; (84ac <udd_ep_is_halted+0x10>)
    84a4:	4798      	blx	r3
}
    84a6:	bd10      	pop	{r4, pc}
    84a8:	00008fdd 	.word	0x00008fdd
    84ac:	20000f7c 	.word	0x20000f7c

000084b0 <udd_ep_set_halt>:
{
    84b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    84b2:	240f      	movs	r4, #15
{
    84b4:	0005      	movs	r5, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    84b6:	4004      	ands	r4, r0
		return false;
    84b8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    84ba:	2c02      	cmp	r4, #2
    84bc:	d900      	bls.n	84c0 <udd_ep_set_halt+0x10>
}
    84be:	bd70      	pop	{r4, r5, r6, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    84c0:	4e13      	ldr	r6, [pc, #76]	; (8510 <udd_ep_set_halt+0x60>)
    84c2:	0029      	movs	r1, r5
    84c4:	0030      	movs	r0, r6
    84c6:	4b13      	ldr	r3, [pc, #76]	; (8514 <udd_ep_set_halt+0x64>)
    84c8:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    84ca:	4b13      	ldr	r3, [pc, #76]	; (8518 <udd_ep_set_halt+0x68>)
    84cc:	0029      	movs	r1, r5
    84ce:	0030      	movs	r0, r6
    84d0:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    84d2:	237f      	movs	r3, #127	; 0x7f
    84d4:	402b      	ands	r3, r5
    84d6:	d018      	beq.n	850a <udd_ep_set_halt+0x5a>
	if (!ptr_job->busy) {
    84d8:	2101      	movs	r1, #1
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    84da:	09eb      	lsrs	r3, r5, #7
    84dc:	0064      	lsls	r4, r4, #1
    84de:	18e4      	adds	r4, r4, r3
    84e0:	3c02      	subs	r4, #2
	if (!ptr_job->busy) {
    84e2:	00a3      	lsls	r3, r4, #2
    84e4:	191c      	adds	r4, r3, r4
    84e6:	4a0d      	ldr	r2, [pc, #52]	; (851c <udd_ep_set_halt+0x6c>)
    84e8:	00a4      	lsls	r4, r4, #2
    84ea:	1913      	adds	r3, r2, r4
    84ec:	7c98      	ldrb	r0, [r3, #18]
    84ee:	4201      	tst	r1, r0
    84f0:	d009      	beq.n	8506 <udd_ep_set_halt+0x56>
	ptr_job->busy = false;
    84f2:	7c98      	ldrb	r0, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    84f4:	58a4      	ldr	r4, [r4, r2]
	ptr_job->busy = false;
    84f6:	4388      	bics	r0, r1
    84f8:	7498      	strb	r0, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    84fa:	2c00      	cmp	r4, #0
    84fc:	d003      	beq.n	8506 <udd_ep_set_halt+0x56>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    84fe:	68d9      	ldr	r1, [r3, #12]
    8500:	002a      	movs	r2, r5
    8502:	2001      	movs	r0, #1
    8504:	47a0      	blx	r4
    8506:	2001      	movs	r0, #1
    8508:	e7d9      	b.n	84be <udd_ep_set_halt+0xe>
	if (!ptr_job->busy) {
    850a:	7c9b      	ldrb	r3, [r3, #18]
    850c:	deff      	udf	#255	; 0xff
    850e:	46c0      	nop			; (mov r8, r8)
    8510:	20000f7c 	.word	0x20000f7c
    8514:	00008ffd 	.word	0x00008ffd
    8518:	00008fad 	.word	0x00008fad
    851c:	20000c2c 	.word	0x20000c2c

00008520 <udd_ep_clear_halt>:
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8520:	230f      	movs	r3, #15
{
    8522:	b570      	push	{r4, r5, r6, lr}
    8524:	0001      	movs	r1, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8526:	4003      	ands	r3, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    8528:	2b02      	cmp	r3, #2
    852a:	d81f      	bhi.n	856c <udd_ep_clear_halt+0x4c>
	if ((ep == 0) || (ep == 0x80)) {
    852c:	247f      	movs	r4, #127	; 0x7f
    852e:	4004      	ands	r4, r0
    8530:	d104      	bne.n	853c <udd_ep_clear_halt+0x1c>
	usb_device_endpoint_clear_halt(&usb_device, ep);
    8532:	480f      	ldr	r0, [pc, #60]	; (8570 <udd_ep_clear_halt+0x50>)
    8534:	4b0f      	ldr	r3, [pc, #60]	; (8574 <udd_ep_clear_halt+0x54>)
    8536:	4798      	blx	r3
	if (ptr_job->busy == true) {
    8538:	7ca3      	ldrb	r3, [r4, #18]
    853a:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    853c:	005c      	lsls	r4, r3, #1
    853e:	09c3      	lsrs	r3, r0, #7
    8540:	18e4      	adds	r4, r4, r3
    8542:	3c02      	subs	r4, #2
	usb_device_endpoint_clear_halt(&usb_device, ep);
    8544:	4b0b      	ldr	r3, [pc, #44]	; (8574 <udd_ep_clear_halt+0x54>)
    8546:	480a      	ldr	r0, [pc, #40]	; (8570 <udd_ep_clear_halt+0x50>)
    8548:	4798      	blx	r3
	if (ptr_job->busy == true) {
    854a:	00a3      	lsls	r3, r4, #2
    854c:	191c      	adds	r4, r3, r4
    854e:	4a0a      	ldr	r2, [pc, #40]	; (8578 <udd_ep_clear_halt+0x58>)
    8550:	00a4      	lsls	r4, r4, #2
    8552:	1913      	adds	r3, r2, r4
    8554:	7c99      	ldrb	r1, [r3, #18]
	return true;
    8556:	2501      	movs	r5, #1
	if (ptr_job->busy == true) {
    8558:	07c9      	lsls	r1, r1, #31
    855a:	d401      	bmi.n	8560 <udd_ep_clear_halt+0x40>
}
    855c:	0028      	movs	r0, r5
    855e:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job->busy = false;
    8560:	7c99      	ldrb	r1, [r3, #18]
    8562:	43a9      	bics	r1, r5
    8564:	7499      	strb	r1, [r3, #18]
		ptr_job->call_nohalt();
    8566:	58a3      	ldr	r3, [r4, r2]
    8568:	4798      	blx	r3
    856a:	e7f7      	b.n	855c <udd_ep_clear_halt+0x3c>
		return false;
    856c:	2500      	movs	r5, #0
    856e:	e7f5      	b.n	855c <udd_ep_clear_halt+0x3c>
    8570:	20000f7c 	.word	0x20000f7c
    8574:	0000901d 	.word	0x0000901d
    8578:	20000c2c 	.word	0x20000c2c

0000857c <udd_ep_wait_stall_clear>:
{
    857c:	b5f0      	push	{r4, r5, r6, r7, lr}
	ep_num = ep & USB_EP_ADDR_MASK;
    857e:	230f      	movs	r3, #15
{
    8580:	4646      	mov	r6, r8
    8582:	46d6      	mov	lr, sl
    8584:	464f      	mov	r7, r9
    8586:	0005      	movs	r5, r0
    8588:	b5c0      	push	{r6, r7, lr}
	ep_num = ep & USB_EP_ADDR_MASK;
    858a:	4003      	ands	r3, r0
{
    858c:	000e      	movs	r6, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    858e:	2b02      	cmp	r3, #2
    8590:	d813      	bhi.n	85ba <udd_ep_wait_stall_clear+0x3e>
	if ((ep == 0) || (ep == 0x80)) {
    8592:	227f      	movs	r2, #127	; 0x7f
    8594:	4002      	ands	r2, r0
    8596:	d101      	bne.n	859c <udd_ep_wait_stall_clear+0x20>
	if (ptr_job->busy == true) {
    8598:	7c93      	ldrb	r3, [r2, #18]
    859a:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    859c:	09c2      	lsrs	r2, r0, #7
    859e:	005b      	lsls	r3, r3, #1
    85a0:	189b      	adds	r3, r3, r2
    85a2:	3b02      	subs	r3, #2
	if (ptr_job->busy == true) {
    85a4:	009c      	lsls	r4, r3, #2
    85a6:	18e4      	adds	r4, r4, r3
    85a8:	4a13      	ldr	r2, [pc, #76]	; (85f8 <udd_ep_wait_stall_clear+0x7c>)
    85aa:	00a4      	lsls	r4, r4, #2
    85ac:	4690      	mov	r8, r2
    85ae:	46a1      	mov	r9, r4
    85b0:	44c1      	add	r9, r8
    85b2:	464b      	mov	r3, r9
    85b4:	7c9b      	ldrb	r3, [r3, #18]
    85b6:	07db      	lsls	r3, r3, #31
    85b8:	d506      	bpl.n	85c8 <udd_ep_wait_stall_clear+0x4c>
		return false;
    85ba:	2700      	movs	r7, #0
}
    85bc:	0038      	movs	r0, r7
    85be:	bc1c      	pop	{r2, r3, r4}
    85c0:	4690      	mov	r8, r2
    85c2:	4699      	mov	r9, r3
    85c4:	46a2      	mov	sl, r4
    85c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    85c8:	4b0c      	ldr	r3, [pc, #48]	; (85fc <udd_ep_wait_stall_clear+0x80>)
    85ca:	0001      	movs	r1, r0
    85cc:	469a      	mov	sl, r3
    85ce:	0018      	movs	r0, r3
    85d0:	4b0b      	ldr	r3, [pc, #44]	; (8600 <udd_ep_wait_stall_clear+0x84>)
    85d2:	4798      	blx	r3
    85d4:	1e07      	subs	r7, r0, #0
    85d6:	d007      	beq.n	85e8 <udd_ep_wait_stall_clear+0x6c>
		ptr_job->busy = true;
    85d8:	464b      	mov	r3, r9
    85da:	2101      	movs	r1, #1
    85dc:	7c9a      	ldrb	r2, [r3, #18]
    85de:	430a      	orrs	r2, r1
    85e0:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt = callback;
    85e2:	4643      	mov	r3, r8
    85e4:	50e6      	str	r6, [r4, r3]
		return true;
    85e6:	e7e9      	b.n	85bc <udd_ep_wait_stall_clear+0x40>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    85e8:	0029      	movs	r1, r5
    85ea:	4650      	mov	r0, sl
    85ec:	4b05      	ldr	r3, [pc, #20]	; (8604 <udd_ep_wait_stall_clear+0x88>)
    85ee:	4798      	blx	r3
    85f0:	1e07      	subs	r7, r0, #0
    85f2:	d0e2      	beq.n	85ba <udd_ep_wait_stall_clear+0x3e>
		callback(); /* Endpoint not halted then call directly callback */
    85f4:	47b0      	blx	r6
		return true;
    85f6:	e7e1      	b.n	85bc <udd_ep_wait_stall_clear+0x40>
    85f8:	20000c2c 	.word	0x20000c2c
    85fc:	20000f7c 	.word	0x20000f7c
    8600:	00008fdd 	.word	0x00008fdd
    8604:	00008f89 	.word	0x00008f89

00008608 <udd_ep_run>:
{
    8608:	b5f0      	push	{r4, r5, r6, r7, lr}
    860a:	4645      	mov	r5, r8
    860c:	4657      	mov	r7, sl
    860e:	464e      	mov	r6, r9
    8610:	46de      	mov	lr, fp
	ep_num = ep & USB_EP_ADDR_MASK;
    8612:	240f      	movs	r4, #15
{
    8614:	b5e0      	push	{r5, r6, r7, lr}
    8616:	4688      	mov	r8, r1
    8618:	b087      	sub	sp, #28
    861a:	0005      	movs	r5, r0
    861c:	4691      	mov	r9, r2
    861e:	001f      	movs	r7, r3
	ep_num = ep & USB_EP_ADDR_MASK;
    8620:	4004      	ands	r4, r0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    8622:	2c02      	cmp	r4, #2
    8624:	d907      	bls.n	8636 <udd_ep_run+0x2e>
		return false;
    8626:	2000      	movs	r0, #0
}
    8628:	b007      	add	sp, #28
    862a:	bc3c      	pop	{r2, r3, r4, r5}
    862c:	4690      	mov	r8, r2
    862e:	4699      	mov	r9, r3
    8630:	46a2      	mov	sl, r4
    8632:	46ab      	mov	fp, r5
    8634:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return usb_device_endpoint_is_halted(&usb_device, ep);
    8636:	4b75      	ldr	r3, [pc, #468]	; (880c <udd_ep_run+0x204>)
    8638:	0001      	movs	r1, r0
    863a:	469b      	mov	fp, r3
    863c:	0018      	movs	r0, r3
    863e:	4b74      	ldr	r3, [pc, #464]	; (8810 <udd_ep_run+0x208>)
    8640:	4798      	blx	r3
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    8642:	2800      	cmp	r0, #0
    8644:	d1ef      	bne.n	8626 <udd_ep_run+0x1e>
	if ((ep == 0) || (ep == 0x80)) {
    8646:	237f      	movs	r3, #127	; 0x7f
    8648:	402b      	ands	r3, r5
    864a:	d10c      	bne.n	8666 <udd_ep_run+0x5e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    864c:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8650:	4251      	negs	r1, r2
    8652:	414a      	adcs	r2, r1
    8654:	9205      	str	r2, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    8656:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8658:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    865c:	4a6d      	ldr	r2, [pc, #436]	; (8814 <udd_ep_run+0x20c>)
    865e:	7013      	strb	r3, [r2, #0]
	return flags;
    8660:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    8662:	7c9b      	ldrb	r3, [r3, #18]
    8664:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    8666:	b26b      	sxtb	r3, r5
    8668:	001a      	movs	r2, r3
    866a:	9303      	str	r3, [sp, #12]
    866c:	0fd2      	lsrs	r2, r2, #31
    866e:	0063      	lsls	r3, r4, #1
    8670:	189e      	adds	r6, r3, r2
    8672:	1eb1      	subs	r1, r6, #2
    8674:	000e      	movs	r6, r1
    8676:	9101      	str	r1, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8678:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    867c:	425a      	negs	r2, r3
    867e:	4153      	adcs	r3, r2
    8680:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    8682:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8684:	f3bf 8f5f 	dmb	sy
	if (ptr_job->busy == true) {
    8688:	4963      	ldr	r1, [pc, #396]	; (8818 <udd_ep_run+0x210>)
    868a:	46b4      	mov	ip, r6
    868c:	468a      	mov	sl, r1
    868e:	2101      	movs	r1, #1
	cpu_irq_disable();
    8690:	4a60      	ldr	r2, [pc, #384]	; (8814 <udd_ep_run+0x20c>)
    8692:	7010      	strb	r0, [r2, #0]
	return flags;
    8694:	9b05      	ldr	r3, [sp, #20]
    8696:	9300      	str	r3, [sp, #0]
    8698:	00b3      	lsls	r3, r6, #2
    869a:	9302      	str	r3, [sp, #8]
    869c:	4463      	add	r3, ip
    869e:	009b      	lsls	r3, r3, #2
    86a0:	4453      	add	r3, sl
    86a2:	7c9e      	ldrb	r6, [r3, #18]
    86a4:	4231      	tst	r1, r6
    86a6:	d153      	bne.n	8750 <udd_ep_run+0x148>
	ptr_job->busy = true;
    86a8:	2601      	movs	r6, #1
    86aa:	46b4      	mov	ip, r6
    86ac:	4666      	mov	r6, ip
    86ae:	7c98      	ldrb	r0, [r3, #18]
    86b0:	4330      	orrs	r0, r6
    86b2:	7498      	strb	r0, [r3, #18]
	if (cpu_irq_is_enabled_flags(flags))
    86b4:	9b00      	ldr	r3, [sp, #0]
    86b6:	2b00      	cmp	r3, #0
    86b8:	d160      	bne.n	877c <udd_ep_run+0x174>
	ptr_job->buf = buf;
    86ba:	9a01      	ldr	r2, [sp, #4]
    86bc:	4649      	mov	r1, r9
    86be:	4694      	mov	ip, r2
    86c0:	4652      	mov	r2, sl
    86c2:	9b02      	ldr	r3, [sp, #8]
	ptr_job->call_trans = callback;
    86c4:	9810      	ldr	r0, [sp, #64]	; 0x40
	ptr_job->buf = buf;
    86c6:	4463      	add	r3, ip
    86c8:	009b      	lsls	r3, r3, #2
    86ca:	18d2      	adds	r2, r2, r3
    86cc:	6051      	str	r1, [r2, #4]
	ptr_job->nb_trans = 0;
    86ce:	2100      	movs	r1, #0
    86d0:	60d1      	str	r1, [r2, #12]
	ptr_job->call_trans = callback;
    86d2:	4651      	mov	r1, sl
    86d4:	50c8      	str	r0, [r1, r3]
	ptr_job->b_shortpacket = b_shortpacket;
    86d6:	0011      	movs	r1, r2
    86d8:	3110      	adds	r1, #16
    86da:	788e      	ldrb	r6, [r1, #2]
    86dc:	4643      	mov	r3, r8
    86de:	46b0      	mov	r8, r6
    86e0:	2602      	movs	r6, #2
    86e2:	2001      	movs	r0, #1
    86e4:	46b4      	mov	ip, r6
    86e6:	4003      	ands	r3, r0
    86e8:	4646      	mov	r6, r8
    86ea:	4660      	mov	r0, ip
    86ec:	4386      	bics	r6, r0
	ptr_job->b_use_out_cache_buffer = false;
    86ee:	2004      	movs	r0, #4
	ptr_job->b_shortpacket = b_shortpacket;
    86f0:	005b      	lsls	r3, r3, #1
	ptr_job->b_use_out_cache_buffer = false;
    86f2:	4333      	orrs	r3, r6
    86f4:	4383      	bics	r3, r0
    86f6:	708b      	strb	r3, [r1, #2]
	if (ep & USB_EP_DIR_IN) {
    86f8:	9b03      	ldr	r3, [sp, #12]
	ptr_job->buf_size = buf_size;
    86fa:	6097      	str	r7, [r2, #8]
	if (ep & USB_EP_DIR_IN) {
    86fc:	2b00      	cmp	r3, #0
    86fe:	db42      	blt.n	8786 <udd_ep_run+0x17e>
		if (0 != ptr_job->buf_size) {
    8700:	2f00      	cmp	r7, #0
    8702:	d02e      	beq.n	8762 <udd_ep_run+0x15a>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    8704:	8a13      	ldrh	r3, [r2, #16]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    8706:	4d45      	ldr	r5, [pc, #276]	; (881c <udd_ep_run+0x214>)
			next_trans = ptr_job->buf_size;
    8708:	b2bf      	uxth	r7, r7
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    870a:	4698      	mov	r8, r3
    870c:	0019      	movs	r1, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    870e:	42af      	cmp	r7, r5
    8710:	d96d      	bls.n	87ee <udd_ep_run+0x1e6>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    8712:	4b43      	ldr	r3, [pc, #268]	; (8820 <udd_ep_run+0x218>)
    8714:	0028      	movs	r0, r5
    8716:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    8718:	1a6b      	subs	r3, r5, r1
    871a:	b29b      	uxth	r3, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    871c:	464a      	mov	r2, r9
			if (next_trans < ptr_job->ep_size) {
    871e:	4543      	cmp	r3, r8
    8720:	d20e      	bcs.n	8740 <udd_ep_run+0x138>
				ptr_job->b_use_out_cache_buffer = true;
    8722:	9b02      	ldr	r3, [sp, #8]
    8724:	2104      	movs	r1, #4
    8726:	469c      	mov	ip, r3
    8728:	9b01      	ldr	r3, [sp, #4]
    872a:	4463      	add	r3, ip
    872c:	009e      	lsls	r6, r3, #2
    872e:	4456      	add	r6, sl
    8730:	7cb2      	ldrb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    8732:	4b3c      	ldr	r3, [pc, #240]	; (8824 <udd_ep_run+0x21c>)
				ptr_job->b_use_out_cache_buffer = true;
    8734:	430a      	orrs	r2, r1
    8736:	74b2      	strb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    8738:	1e62      	subs	r2, r4, #1
    873a:	0192      	lsls	r2, r2, #6
    873c:	18d2      	adds	r2, r2, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    873e:	4643      	mov	r3, r8
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    8740:	0021      	movs	r1, r4
    8742:	4658      	mov	r0, fp
    8744:	4c38      	ldr	r4, [pc, #224]	; (8828 <udd_ep_run+0x220>)
    8746:	47a0      	blx	r4
				return (STATUS_OK ==
    8748:	4243      	negs	r3, r0
    874a:	4158      	adcs	r0, r3
    874c:	b2c0      	uxtb	r0, r0
    874e:	e76b      	b.n	8628 <udd_ep_run+0x20>
    8750:	9b00      	ldr	r3, [sp, #0]
    8752:	2b00      	cmp	r3, #0
    8754:	d100      	bne.n	8758 <udd_ep_run+0x150>
    8756:	e766      	b.n	8626 <udd_ep_run+0x1e>
		cpu_irq_enable();
    8758:	7011      	strb	r1, [r2, #0]
    875a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    875e:	b662      	cpsie	i
    8760:	e762      	b.n	8628 <udd_ep_run+0x20>
			ptr_job->busy = false;
    8762:	2201      	movs	r2, #1
    8764:	788b      	ldrb	r3, [r1, #2]
    8766:	4393      	bics	r3, r2
    8768:	708b      	strb	r3, [r1, #2]
			if (NULL != ptr_job->call_trans) {
    876a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    876c:	2b00      	cmp	r3, #0
    876e:	d003      	beq.n	8778 <udd_ep_run+0x170>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    8770:	002a      	movs	r2, r5
    8772:	2100      	movs	r1, #0
    8774:	2000      	movs	r0, #0
    8776:	4798      	blx	r3
			return true;
    8778:	2001      	movs	r0, #1
    877a:	e755      	b.n	8628 <udd_ep_run+0x20>
    877c:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    877e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8782:	b662      	cpsie	i
    8784:	e799      	b.n	86ba <udd_ep_run+0xb2>
		if (0 != ptr_job->buf_size) {
    8786:	2f00      	cmp	r7, #0
    8788:	d037      	beq.n	87fa <udd_ep_run+0x1f2>
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    878a:	4d24      	ldr	r5, [pc, #144]	; (881c <udd_ep_run+0x214>)
			next_trans = ptr_job->buf_size;
    878c:	b2bf      	uxth	r7, r7
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    878e:	42af      	cmp	r7, r5
    8790:	d905      	bls.n	879e <udd_ep_run+0x196>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    8792:	8a11      	ldrh	r1, [r2, #16]
    8794:	0028      	movs	r0, r5
    8796:	4b22      	ldr	r3, [pc, #136]	; (8820 <udd_ep_run+0x218>)
    8798:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    879a:	1a6f      	subs	r7, r5, r1
    879c:	b2bf      	uxth	r7, r7
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    879e:	9a01      	ldr	r2, [sp, #4]
    87a0:	9b02      	ldr	r3, [sp, #8]
    87a2:	4694      	mov	ip, r2
    87a4:	4463      	add	r3, ip
    87a6:	009b      	lsls	r3, r3, #2
    87a8:	4453      	add	r3, sl
    87aa:	7c99      	ldrb	r1, [r3, #18]
    87ac:	2200      	movs	r2, #0
    87ae:	0789      	lsls	r1, r1, #30
    87b0:	d507      	bpl.n	87c2 <udd_ep_run+0x1ba>
					(0 == (next_trans % ptr_job->ep_size));
    87b2:	8a19      	ldrh	r1, [r3, #16]
    87b4:	0038      	movs	r0, r7
    87b6:	4b1d      	ldr	r3, [pc, #116]	; (882c <udd_ep_run+0x224>)
    87b8:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    87ba:	b289      	uxth	r1, r1
    87bc:	424a      	negs	r2, r1
    87be:	414a      	adcs	r2, r1
    87c0:	b2d2      	uxtb	r2, r2
    87c2:	9901      	ldr	r1, [sp, #4]
    87c4:	2002      	movs	r0, #2
    87c6:	468c      	mov	ip, r1
    87c8:	9b02      	ldr	r3, [sp, #8]
    87ca:	0051      	lsls	r1, r2, #1
    87cc:	4463      	add	r3, ip
    87ce:	009b      	lsls	r3, r3, #2
    87d0:	4453      	add	r3, sl
    87d2:	7c9a      	ldrb	r2, [r3, #18]
    87d4:	4382      	bics	r2, r0
    87d6:	430a      	orrs	r2, r1
    87d8:	749a      	strb	r2, [r3, #18]
    87da:	003b      	movs	r3, r7
				usb_device_endpoint_write_buffer_job(&usb_device,
    87dc:	0021      	movs	r1, r4
    87de:	464a      	mov	r2, r9
    87e0:	4658      	mov	r0, fp
    87e2:	4c13      	ldr	r4, [pc, #76]	; (8830 <udd_ep_run+0x228>)
    87e4:	47a0      	blx	r4
		return (STATUS_OK ==
    87e6:	4243      	negs	r3, r0
    87e8:	4158      	adcs	r0, r3
    87ea:	b2c0      	uxtb	r0, r0
    87ec:	e71c      	b.n	8628 <udd_ep_run+0x20>
				next_trans -= next_trans % ptr_job->ep_size;
    87ee:	0038      	movs	r0, r7
    87f0:	4b0e      	ldr	r3, [pc, #56]	; (882c <udd_ep_run+0x224>)
    87f2:	4798      	blx	r3
    87f4:	1a7f      	subs	r7, r7, r1
    87f6:	b2bb      	uxth	r3, r7
    87f8:	e790      	b.n	871c <udd_ep_run+0x114>
		} else if (true == ptr_job->b_shortpacket) {
    87fa:	7c93      	ldrb	r3, [r2, #18]
    87fc:	4662      	mov	r2, ip
    87fe:	421a      	tst	r2, r3
    8800:	d0af      	beq.n	8762 <udd_ep_run+0x15a>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    8802:	788b      	ldrb	r3, [r1, #2]
    8804:	4393      	bics	r3, r2
    8806:	708b      	strb	r3, [r1, #2]
    8808:	2300      	movs	r3, #0
    880a:	e7e7      	b.n	87dc <udd_ep_run+0x1d4>
    880c:	20000f7c 	.word	0x20000f7c
    8810:	00008fdd 	.word	0x00008fdd
    8814:	200000ca 	.word	0x200000ca
    8818:	20000c2c 	.word	0x20000c2c
    881c:	00001fff 	.word	0x00001fff
    8820:	00025c1d 	.word	0x00025c1d
    8824:	20000efc 	.word	0x20000efc
    8828:	000090e5 	.word	0x000090e5
    882c:	00025a49 	.word	0x00025a49
    8830:	00009099 	.word	0x00009099

00008834 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    8834:	2280      	movs	r2, #128	; 0x80
    8836:	4b02      	ldr	r3, [pc, #8]	; (8840 <udd_set_address+0xc>)
    8838:	4310      	orrs	r0, r2
    883a:	681b      	ldr	r3, [r3, #0]
    883c:	7298      	strb	r0, [r3, #10]
}
    883e:	4770      	bx	lr
    8840:	20000f7c 	.word	0x20000f7c

00008844 <udd_getaddress>:
{
    8844:	4b02      	ldr	r3, [pc, #8]	; (8850 <udd_getaddress+0xc>)
}
    8846:	681b      	ldr	r3, [r3, #0]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    8848:	7a98      	ldrb	r0, [r3, #10]
    884a:	0640      	lsls	r0, r0, #25
    884c:	0e40      	lsrs	r0, r0, #25
    884e:	4770      	bx	lr
    8850:	20000f7c 	.word	0x20000f7c

00008854 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    8854:	4b01      	ldr	r3, [pc, #4]	; (885c <udd_set_setup_payload+0x8>)
    8856:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    8858:	8199      	strh	r1, [r3, #12]
}
    885a:	4770      	bx	lr
    885c:	200010e4 	.word	0x200010e4

00008860 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    8860:	b570      	push	{r4, r5, r6, lr}
	enum sleepmgr_mode sleep_mode[] = {
    8862:	4b36      	ldr	r3, [pc, #216]	; (893c <udd_attach+0xdc>)
	if (udd_state == new_state) {
    8864:	4c36      	ldr	r4, [pc, #216]	; (8940 <udd_attach+0xe0>)
{
    8866:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    8868:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    886a:	7823      	ldrb	r3, [r4, #0]
    886c:	2b03      	cmp	r3, #3
    886e:	d01e      	beq.n	88ae <udd_attach+0x4e>
	if(sleepmgr_locks[mode] >= 0xff) {
    8870:	4b34      	ldr	r3, [pc, #208]	; (8944 <udd_attach+0xe4>)
    8872:	785a      	ldrb	r2, [r3, #1]
    8874:	2aff      	cmp	r2, #255	; 0xff
    8876:	d047      	beq.n	8908 <udd_attach+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8878:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    887c:	4251      	negs	r1, r2
    887e:	414a      	adcs	r2, r1
    8880:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    8882:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8884:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8888:	2200      	movs	r2, #0
    888a:	492f      	ldr	r1, [pc, #188]	; (8948 <udd_attach+0xe8>)
    888c:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    888e:	785a      	ldrb	r2, [r3, #1]
	return flags;
    8890:	9802      	ldr	r0, [sp, #8]
    8892:	3201      	adds	r2, #1
    8894:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    8896:	2800      	cmp	r0, #0
    8898:	d004      	beq.n	88a4 <udd_attach+0x44>
		cpu_irq_enable();
    889a:	2201      	movs	r2, #1
    889c:	700a      	strb	r2, [r1, #0]
    889e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    88a2:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    88a4:	7822      	ldrb	r2, [r4, #0]
    88a6:	2a00      	cmp	r2, #0
    88a8:	d12f      	bne.n	890a <udd_attach+0xaa>
	udd_state = new_state;
    88aa:	2303      	movs	r3, #3
    88ac:	7023      	strb	r3, [r4, #0]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    88ae:	2101      	movs	r1, #1
    88b0:	4c26      	ldr	r4, [pc, #152]	; (894c <udd_attach+0xec>)
	udd_sleep_mode(UDD_STATE_IDLE);
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    88b2:	4e27      	ldr	r6, [pc, #156]	; (8950 <udd_attach+0xf0>)
    88b4:	6822      	ldr	r2, [r4, #0]
    88b6:	0020      	movs	r0, r4
    88b8:	8913      	ldrh	r3, [r2, #8]
    88ba:	438b      	bics	r3, r1
    88bc:	8113      	strh	r3, [r2, #8]
    88be:	3103      	adds	r1, #3
    88c0:	4a24      	ldr	r2, [pc, #144]	; (8954 <udd_attach+0xf4>)
    88c2:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    88c4:	4a24      	ldr	r2, [pc, #144]	; (8958 <udd_attach+0xf8>)
    88c6:	2100      	movs	r1, #0
    88c8:	0020      	movs	r0, r4
    88ca:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    88cc:	4a23      	ldr	r2, [pc, #140]	; (895c <udd_attach+0xfc>)
    88ce:	2101      	movs	r1, #1
    88d0:	0020      	movs	r0, r4
    88d2:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    88d4:	4a22      	ldr	r2, [pc, #136]	; (8960 <udd_attach+0x100>)
    88d6:	2102      	movs	r1, #2
    88d8:	0020      	movs	r0, r4
    88da:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    88dc:	4d21      	ldr	r5, [pc, #132]	; (8964 <udd_attach+0x104>)
    88de:	2104      	movs	r1, #4
    88e0:	0020      	movs	r0, r4
    88e2:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    88e4:	2100      	movs	r1, #0
    88e6:	0020      	movs	r0, r4
    88e8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    88ea:	2101      	movs	r1, #1
    88ec:	0020      	movs	r0, r4
    88ee:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    88f0:	2102      	movs	r1, #2
    88f2:	0020      	movs	r0, r4
    88f4:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    88f6:	4a1c      	ldr	r2, [pc, #112]	; (8968 <udd_attach+0x108>)
    88f8:	2106      	movs	r1, #6
    88fa:	0020      	movs	r0, r4
    88fc:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    88fe:	2106      	movs	r1, #6
    8900:	0020      	movs	r0, r4
    8902:	47a8      	blx	r5
#endif
}
    8904:	b004      	add	sp, #16
    8906:	bd70      	pop	{r4, r5, r6, pc}
    8908:	e7fe      	b.n	8908 <udd_attach+0xa8>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    890a:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    890c:	5c82      	ldrb	r2, [r0, r2]
    890e:	5c98      	ldrb	r0, [r3, r2]
    8910:	2800      	cmp	r0, #0
    8912:	d012      	beq.n	893a <udd_attach+0xda>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8914:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8918:	4245      	negs	r5, r0
    891a:	4168      	adcs	r0, r5
    891c:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    891e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8920:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8924:	2000      	movs	r0, #0
    8926:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    8928:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    892a:	9803      	ldr	r0, [sp, #12]
    892c:	3901      	subs	r1, #1
    892e:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    8930:	2800      	cmp	r0, #0
    8932:	d0ba      	beq.n	88aa <udd_attach+0x4a>
    8934:	4b0d      	ldr	r3, [pc, #52]	; (896c <udd_attach+0x10c>)
    8936:	4798      	blx	r3
    8938:	e7b7      	b.n	88aa <udd_attach+0x4a>
    893a:	e7fe      	b.n	893a <udd_attach+0xda>
    893c:	01010100 	.word	0x01010100
    8940:	20000c7c 	.word	0x20000c7c
    8944:	200012a4 	.word	0x200012a4
    8948:	200000ca 	.word	0x200000ca
    894c:	20000f7c 	.word	0x20000f7c
    8950:	00008b7d 	.word	0x00008b7d
    8954:	0000809d 	.word	0x0000809d
    8958:	00007dc5 	.word	0x00007dc5
    895c:	00007c05 	.word	0x00007c05
    8960:	00007fa9 	.word	0x00007fa9
    8964:	00008ba1 	.word	0x00008ba1
    8968:	00007de5 	.word	0x00007de5
    896c:	00007dd1 	.word	0x00007dd1

00008970 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    8970:	b5f0      	push	{r4, r5, r6, r7, lr}
    8972:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8974:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8978:	425a      	negs	r2, r3
    897a:	4153      	adcs	r3, r2
    897c:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    897e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8980:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8984:	2300      	movs	r3, #0
    8986:	4c36      	ldr	r4, [pc, #216]	; (8a60 <udd_enable+0xf0>)
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    8988:	ae01      	add	r6, sp, #4
    898a:	7023      	strb	r3, [r4, #0]
    898c:	0030      	movs	r0, r6
    898e:	4b35      	ldr	r3, [pc, #212]	; (8a64 <udd_enable+0xf4>)
	return flags;
    8990:	9d02      	ldr	r5, [sp, #8]
    8992:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    8994:	2303      	movs	r3, #3
	usb_init(&usb_device, USB, &config_usb);
    8996:	2182      	movs	r1, #130	; 0x82
    8998:	4f33      	ldr	r7, [pc, #204]	; (8a68 <udd_enable+0xf8>)
    899a:	0032      	movs	r2, r6
	config_usb.source_generator = UDD_CLOCK_GEN;
    899c:	70b3      	strb	r3, [r6, #2]
	usb_init(&usb_device, USB, &config_usb);
    899e:	05c9      	lsls	r1, r1, #23
    89a0:	4b32      	ldr	r3, [pc, #200]	; (8a6c <udd_enable+0xfc>)
    89a2:	0038      	movs	r0, r7
    89a4:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    89a6:	4b32      	ldr	r3, [pc, #200]	; (8a70 <udd_enable+0x100>)
    89a8:	0038      	movs	r0, r7
    89aa:	4798      	blx	r3
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    89ac:	4b31      	ldr	r3, [pc, #196]	; (8a74 <udd_enable+0x104>)
    89ae:	8b1a      	ldrh	r2, [r3, #24]
    89b0:	0692      	lsls	r2, r2, #26
    89b2:	d435      	bmi.n	8a20 <udd_enable+0xb0>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    89b4:	21d0      	movs	r1, #208	; 0xd0
    89b6:	0109      	lsls	r1, r1, #4
    89b8:	68da      	ldr	r2, [r3, #12]
    89ba:	400a      	ands	r2, r1
    89bc:	428a      	cmp	r2, r1
    89be:	d1fb      	bne.n	89b8 <udd_enable+0x48>
	enum sleepmgr_mode sleep_mode[] = {
    89c0:	4b2d      	ldr	r3, [pc, #180]	; (8a78 <udd_enable+0x108>)
	if (udd_state == new_state) {
    89c2:	4e2e      	ldr	r6, [pc, #184]	; (8a7c <udd_enable+0x10c>)
	enum sleepmgr_mode sleep_mode[] = {
    89c4:	9303      	str	r3, [sp, #12]
	if (udd_state == new_state) {
    89c6:	7833      	ldrb	r3, [r6, #0]
    89c8:	2b01      	cmp	r3, #1
    89ca:	d01d      	beq.n	8a08 <udd_enable+0x98>
	if(sleepmgr_locks[mode] >= 0xff) {
    89cc:	4b2c      	ldr	r3, [pc, #176]	; (8a80 <udd_enable+0x110>)
    89ce:	785a      	ldrb	r2, [r3, #1]
    89d0:	2aff      	cmp	r2, #255	; 0xff
    89d2:	d024      	beq.n	8a1e <udd_enable+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    89d4:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    89d8:	4251      	negs	r1, r2
    89da:	414a      	adcs	r2, r1
    89dc:	9204      	str	r2, [sp, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    89de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    89e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    89e4:	2200      	movs	r2, #0
    89e6:	7022      	strb	r2, [r4, #0]
	++sleepmgr_locks[mode];
    89e8:	785a      	ldrb	r2, [r3, #1]
	return flags;
    89ea:	9904      	ldr	r1, [sp, #16]
    89ec:	3201      	adds	r2, #1
    89ee:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    89f0:	2900      	cmp	r1, #0
    89f2:	d004      	beq.n	89fe <udd_enable+0x8e>
		cpu_irq_enable();
    89f4:	2201      	movs	r2, #1
    89f6:	7022      	strb	r2, [r4, #0]
    89f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    89fc:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    89fe:	7832      	ldrb	r2, [r6, #0]
    8a00:	2a00      	cmp	r2, #0
    8a02:	d113      	bne.n	8a2c <udd_enable+0xbc>
	udd_state = new_state;
    8a04:	2301      	movs	r3, #1
    8a06:	7033      	strb	r3, [r6, #0]
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    8a08:	4b1e      	ldr	r3, [pc, #120]	; (8a84 <udd_enable+0x114>)
    8a0a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    8a0c:	2d00      	cmp	r5, #0
    8a0e:	d004      	beq.n	8a1a <udd_enable+0xaa>
		cpu_irq_enable();
    8a10:	2301      	movs	r3, #1
    8a12:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    8a14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8a18:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    8a1a:	b007      	add	sp, #28
    8a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a1e:	e7fe      	b.n	8a1e <udd_enable+0xae>
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    8a20:	2180      	movs	r1, #128	; 0x80
    8a22:	0049      	lsls	r1, r1, #1
    8a24:	68da      	ldr	r2, [r3, #12]
    8a26:	420a      	tst	r2, r1
    8a28:	d0fc      	beq.n	8a24 <udd_enable+0xb4>
    8a2a:	e7c9      	b.n	89c0 <udd_enable+0x50>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    8a2c:	a903      	add	r1, sp, #12
	if(sleepmgr_locks[mode] == 0) {
    8a2e:	5c8a      	ldrb	r2, [r1, r2]
    8a30:	5c99      	ldrb	r1, [r3, r2]
    8a32:	2900      	cmp	r1, #0
    8a34:	d012      	beq.n	8a5c <udd_enable+0xec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8a36:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8a3a:	4248      	negs	r0, r1
    8a3c:	4141      	adcs	r1, r0
    8a3e:	9105      	str	r1, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    8a40:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8a42:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8a46:	2100      	movs	r1, #0
    8a48:	7021      	strb	r1, [r4, #0]
	--sleepmgr_locks[mode];
    8a4a:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    8a4c:	9805      	ldr	r0, [sp, #20]
    8a4e:	3901      	subs	r1, #1
    8a50:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    8a52:	2800      	cmp	r0, #0
    8a54:	d0d6      	beq.n	8a04 <udd_enable+0x94>
    8a56:	4b0c      	ldr	r3, [pc, #48]	; (8a88 <udd_enable+0x118>)
    8a58:	4798      	blx	r3
    8a5a:	e7d3      	b.n	8a04 <udd_enable+0x94>
    8a5c:	e7fe      	b.n	8a5c <udd_enable+0xec>
    8a5e:	46c0      	nop			; (mov r8, r8)
    8a60:	200000ca 	.word	0x200000ca
    8a64:	000098d1 	.word	0x000098d1
    8a68:	20000f7c 	.word	0x20000f7c
    8a6c:	000098e1 	.word	0x000098e1
    8a70:	0000915d 	.word	0x0000915d
    8a74:	40000c00 	.word	0x40000c00
    8a78:	01010100 	.word	0x01010100
    8a7c:	20000c7c 	.word	0x20000c7c
    8a80:	200012a4 	.word	0x200012a4
    8a84:	00008861 	.word	0x00008861
    8a88:	00007dd1 	.word	0x00007dd1

00008a8c <udd_disable>:
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    8a8c:	2101      	movs	r1, #1

void udd_disable(void)
{
    8a8e:	b570      	push	{r4, r5, r6, lr}
	enum sleepmgr_mode sleep_mode[] = {
    8a90:	2600      	movs	r6, #0
    8a92:	4b2f      	ldr	r3, [pc, #188]	; (8b50 <udd_disable+0xc4>)
	if (udd_state == new_state) {
    8a94:	4d2f      	ldr	r5, [pc, #188]	; (8b54 <udd_disable+0xc8>)
    8a96:	681a      	ldr	r2, [r3, #0]
{
    8a98:	b084      	sub	sp, #16
    8a9a:	8913      	ldrh	r3, [r2, #8]
    8a9c:	430b      	orrs	r3, r1
    8a9e:	b29b      	uxth	r3, r3
    8aa0:	8113      	strh	r3, [r2, #8]
	if (udd_state == new_state) {
    8aa2:	782b      	ldrb	r3, [r5, #0]
	enum sleepmgr_mode sleep_mode[] = {
    8aa4:	aa01      	add	r2, sp, #4
    8aa6:	7016      	strb	r6, [r2, #0]
    8aa8:	7051      	strb	r1, [r2, #1]
    8aaa:	7091      	strb	r1, [r2, #2]
    8aac:	70d1      	strb	r1, [r2, #3]
	if (udd_state == new_state) {
    8aae:	2b01      	cmp	r3, #1
    8ab0:	d04b      	beq.n	8b4a <udd_disable+0xbe>
	if(sleepmgr_locks[mode] >= 0xff) {
    8ab2:	4b29      	ldr	r3, [pc, #164]	; (8b58 <udd_disable+0xcc>)
    8ab4:	7858      	ldrb	r0, [r3, #1]
    8ab6:	28ff      	cmp	r0, #255	; 0xff
    8ab8:	d02e      	beq.n	8b18 <udd_disable+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8aba:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8abe:	4244      	negs	r4, r0
    8ac0:	4160      	adcs	r0, r4
    8ac2:	9002      	str	r0, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    8ac4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8ac6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8aca:	4c24      	ldr	r4, [pc, #144]	; (8b5c <udd_disable+0xd0>)
    8acc:	7026      	strb	r6, [r4, #0]
	++sleepmgr_locks[mode];
    8ace:	7858      	ldrb	r0, [r3, #1]
	return flags;
    8ad0:	9e02      	ldr	r6, [sp, #8]
    8ad2:	3001      	adds	r0, #1
    8ad4:	7058      	strb	r0, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    8ad6:	2e00      	cmp	r6, #0
    8ad8:	d003      	beq.n	8ae2 <udd_disable+0x56>
		cpu_irq_enable();
    8ada:	7021      	strb	r1, [r4, #0]
    8adc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8ae0:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    8ae2:	7829      	ldrb	r1, [r5, #0]
    8ae4:	2900      	cmp	r1, #0
    8ae6:	d118      	bne.n	8b1a <udd_disable+0x8e>
	udd_state = new_state;
    8ae8:	2301      	movs	r3, #1
    8aea:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8aec:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8af0:	425a      	negs	r2, r3
    8af2:	4153      	adcs	r3, r2
    8af4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    8af6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8af8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8afc:	2300      	movs	r3, #0
    8afe:	7023      	strb	r3, [r4, #0]
	return flags;
    8b00:	9d01      	ldr	r5, [sp, #4]
	udd_detach();

	//udd_sleep_mode(UDD_STATE_OFF);

	flags = cpu_irq_save();
	usb_dual_disable();
    8b02:	4b17      	ldr	r3, [pc, #92]	; (8b60 <udd_disable+0xd4>)
    8b04:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    8b06:	2d00      	cmp	r5, #0
    8b08:	d004      	beq.n	8b14 <udd_disable+0x88>
		cpu_irq_enable();
    8b0a:	2301      	movs	r3, #1
    8b0c:	7023      	strb	r3, [r4, #0]
    8b0e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8b12:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
    8b14:	b004      	add	sp, #16
    8b16:	bd70      	pop	{r4, r5, r6, pc}
    8b18:	e7fe      	b.n	8b18 <udd_disable+0x8c>
	if(sleepmgr_locks[mode] == 0) {
    8b1a:	5c52      	ldrb	r2, [r2, r1]
    8b1c:	5c99      	ldrb	r1, [r3, r2]
    8b1e:	2900      	cmp	r1, #0
    8b20:	d012      	beq.n	8b48 <udd_disable+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8b22:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8b26:	4248      	negs	r0, r1
    8b28:	4141      	adcs	r1, r0
    8b2a:	9103      	str	r1, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    8b2c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8b2e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8b32:	2100      	movs	r1, #0
    8b34:	7021      	strb	r1, [r4, #0]
	--sleepmgr_locks[mode];
    8b36:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    8b38:	9803      	ldr	r0, [sp, #12]
    8b3a:	3901      	subs	r1, #1
    8b3c:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    8b3e:	2800      	cmp	r0, #0
    8b40:	d0d2      	beq.n	8ae8 <udd_disable+0x5c>
    8b42:	4b08      	ldr	r3, [pc, #32]	; (8b64 <udd_disable+0xd8>)
    8b44:	4798      	blx	r3
    8b46:	e7cf      	b.n	8ae8 <udd_disable+0x5c>
    8b48:	e7fe      	b.n	8b48 <udd_disable+0xbc>
    8b4a:	4c04      	ldr	r4, [pc, #16]	; (8b5c <udd_disable+0xd0>)
    8b4c:	e7ce      	b.n	8aec <udd_disable+0x60>
    8b4e:	46c0      	nop			; (mov r8, r8)
    8b50:	20000f7c 	.word	0x20000f7c
    8b54:	20000c7c 	.word	0x20000c7c
    8b58:	200012a4 	.word	0x200012a4
    8b5c:	200000ca 	.word	0x200000ca
    8b60:	00008b69 	.word	0x00008b69
    8b64:	00007dd1 	.word	0x00007dd1

00008b68 <usb_dual_disable>:
/**
 * \brief Deinitialize the dual role driver
 */
void usb_dual_disable(void)
{
	if (!_initialized) {
    8b68:	4b03      	ldr	r3, [pc, #12]	; (8b78 <usb_dual_disable+0x10>)
    8b6a:	781a      	ldrb	r2, [r3, #0]
    8b6c:	2a00      	cmp	r2, #0
    8b6e:	d001      	beq.n	8b74 <usb_dual_disable+0xc>
		return; // Dual role not initialized
	}
	_initialized = false;
    8b70:	2200      	movs	r2, #0
    8b72:	701a      	strb	r2, [r3, #0]

#if USB_ID_EIC
	extint_chan_disable_callback(USB_ID_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
#endif
}
    8b74:	4770      	bx	lr
    8b76:	46c0      	nop			; (mov r8, r8)
    8b78:	20000c7d 	.word	0x20000c7d

00008b7c <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    8b7c:	000b      	movs	r3, r1
    8b7e:	332e      	adds	r3, #46	; 0x2e
    8b80:	009b      	lsls	r3, r3, #2
{
    8b82:	b510      	push	{r4, lr}
	module_inst->device_callback[callback_type] = callback_func;
    8b84:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    8b86:	22aa      	movs	r2, #170	; 0xaa
    8b88:	4c04      	ldr	r4, [pc, #16]	; (8b9c <usb_device_register_callback+0x20>)
    8b8a:	0052      	lsls	r2, r2, #1
    8b8c:	0049      	lsls	r1, r1, #1
    8b8e:	5a83      	ldrh	r3, [r0, r2]
    8b90:	5b09      	ldrh	r1, [r1, r4]
    8b92:	430b      	orrs	r3, r1
    8b94:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    8b96:	2000      	movs	r0, #0
    8b98:	bd10      	pop	{r4, pc}
    8b9a:	46c0      	nop			; (mov r8, r8)
    8b9c:	0002d434 	.word	0x0002d434

00008ba0 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    8ba0:	4b06      	ldr	r3, [pc, #24]	; (8bbc <usb_device_enable_callback+0x1c>)
    8ba2:	0049      	lsls	r1, r1, #1
    8ba4:	5acb      	ldrh	r3, [r1, r3]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    8ba6:	21ab      	movs	r1, #171	; 0xab
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    8ba8:	6802      	ldr	r2, [r0, #0]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    8baa:	0049      	lsls	r1, r1, #1
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    8bac:	8393      	strh	r3, [r2, #28]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    8bae:	5a42      	ldrh	r2, [r0, r1]
    8bb0:	431a      	orrs	r2, r3
    8bb2:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    8bb4:	6802      	ldr	r2, [r0, #0]

	return STATUS_OK;
}
    8bb6:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    8bb8:	8313      	strh	r3, [r2, #24]
}
    8bba:	4770      	bx	lr
    8bbc:	0002d434 	.word	0x0002d434

00008bc0 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    8bc0:	4b05      	ldr	r3, [pc, #20]	; (8bd8 <usb_device_disable_callback+0x18>)
    8bc2:	0049      	lsls	r1, r1, #1
    8bc4:	5aca      	ldrh	r2, [r1, r3]
    8bc6:	21ab      	movs	r1, #171	; 0xab
    8bc8:	0049      	lsls	r1, r1, #1
    8bca:	5a43      	ldrh	r3, [r0, r1]
    8bcc:	4393      	bics	r3, r2
    8bce:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    8bd0:	6803      	ldr	r3, [r0, #0]

	return STATUS_OK;
}
    8bd2:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    8bd4:	829a      	strh	r2, [r3, #20]
}
    8bd6:	4770      	bx	lr
    8bd8:	0002d434 	.word	0x0002d434

00008bdc <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    8bdc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    8bde:	008c      	lsls	r4, r1, #2
    8be0:	18a4      	adds	r4, r4, r2
    8be2:	3434      	adds	r4, #52	; 0x34
    8be4:	00a4      	lsls	r4, r4, #2
    8be6:	1904      	adds	r4, r0, r4

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    8be8:	1840      	adds	r0, r0, r1
    8bea:	3059      	adds	r0, #89	; 0x59
    8bec:	4904      	ldr	r1, [pc, #16]	; (8c00 <usb_device_endpoint_register_callback+0x24>)
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    8bee:	6063      	str	r3, [r4, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    8bf0:	30ff      	adds	r0, #255	; 0xff
    8bf2:	7803      	ldrb	r3, [r0, #0]
    8bf4:	5c8a      	ldrb	r2, [r1, r2]
    8bf6:	4313      	orrs	r3, r2
    8bf8:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    8bfa:	2000      	movs	r0, #0
    8bfc:	bd10      	pop	{r4, pc}
    8bfe:	46c0      	nop			; (mov r8, r8)
    8c00:	0002d444 	.word	0x0002d444

00008c04 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    8c04:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    8c06:	2400      	movs	r4, #0
    8c08:	008b      	lsls	r3, r1, #2
    8c0a:	189b      	adds	r3, r3, r2
    8c0c:	3334      	adds	r3, #52	; 0x34
    8c0e:	009b      	lsls	r3, r3, #2
    8c10:	18c3      	adds	r3, r0, r3

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    8c12:	1840      	adds	r0, r0, r1
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    8c14:	605c      	str	r4, [r3, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    8c16:	3059      	adds	r0, #89	; 0x59
    8c18:	4b03      	ldr	r3, [pc, #12]	; (8c28 <usb_device_endpoint_unregister_callback+0x24>)
    8c1a:	30ff      	adds	r0, #255	; 0xff
    8c1c:	5c9a      	ldrb	r2, [r3, r2]
    8c1e:	7803      	ldrb	r3, [r0, #0]
    8c20:	4393      	bics	r3, r2
    8c22:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    8c24:	2000      	movs	r0, #0
    8c26:	bd10      	pop	{r4, pc}
    8c28:	0002d444 	.word	0x0002d444

00008c2c <usb_device_endpoint_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8c2c:	230f      	movs	r3, #15
{
    8c2e:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8c30:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    8c32:	18c4      	adds	r4, r0, r3
    8c34:	3461      	adds	r4, #97	; 0x61
    8c36:	4e28      	ldr	r6, [pc, #160]	; (8cd8 <usb_device_endpoint_enable_callback+0xac>)
    8c38:	34ff      	adds	r4, #255	; 0xff
    8c3a:	7825      	ldrb	r5, [r4, #0]
    8c3c:	5cb6      	ldrb	r6, [r6, r2]
    8c3e:	4335      	orrs	r5, r6
    8c40:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    8c42:	2a00      	cmp	r2, #0
    8c44:	d108      	bne.n	8c58 <usb_device_endpoint_enable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
    8c46:	2b00      	cmp	r3, #0
    8c48:	d115      	bne.n	8c76 <usb_device_endpoint_enable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    8c4a:	230a      	movs	r3, #10
    8c4c:	2103      	movs	r1, #3
    8c4e:	6802      	ldr	r2, [r0, #0]
    8c50:	33ff      	adds	r3, #255	; 0xff
    8c52:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
		}
	}

	return STATUS_OK;
}
    8c54:	2000      	movs	r0, #0
    8c56:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    8c58:	2a01      	cmp	r2, #1
    8c5a:	d117      	bne.n	8c8c <usb_device_endpoint_enable_callback+0x60>
		if (ep_num == 0) { // control endpoint
    8c5c:	2b00      	cmp	r3, #0
    8c5e:	d01f      	beq.n	8ca0 <usb_device_endpoint_enable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    8c60:	6802      	ldr	r2, [r0, #0]
    8c62:	015b      	lsls	r3, r3, #5
    8c64:	18d3      	adds	r3, r2, r3
    8c66:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
    8c68:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    8c6a:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    8c6c:	2900      	cmp	r1, #0
    8c6e:	db20      	blt.n	8cb2 <usb_device_endpoint_enable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    8c70:	2204      	movs	r2, #4
    8c72:	701a      	strb	r2, [r3, #0]
    8c74:	e7ee      	b.n	8c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    8c76:	6802      	ldr	r2, [r0, #0]
    8c78:	015b      	lsls	r3, r3, #5
    8c7a:	18d3      	adds	r3, r2, r3
    8c7c:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
    8c7e:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    8c80:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    8c82:	2900      	cmp	r1, #0
    8c84:	db12      	blt.n	8cac <usb_device_endpoint_enable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    8c86:	2201      	movs	r2, #1
    8c88:	701a      	strb	r2, [r3, #0]
    8c8a:	e7e3      	b.n	8c54 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    8c8c:	2a02      	cmp	r2, #2
    8c8e:	d113      	bne.n	8cb8 <usb_device_endpoint_enable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8c90:	6802      	ldr	r2, [r0, #0]
    8c92:	015b      	lsls	r3, r3, #5
    8c94:	18d3      	adds	r3, r2, r3
    8c96:	2210      	movs	r2, #16
    8c98:	330a      	adds	r3, #10
    8c9a:	33ff      	adds	r3, #255	; 0xff
    8c9c:	701a      	strb	r2, [r3, #0]
    8c9e:	e7d9      	b.n	8c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    8ca0:	230a      	movs	r3, #10
    8ca2:	210c      	movs	r1, #12
    8ca4:	6802      	ldr	r2, [r0, #0]
    8ca6:	33ff      	adds	r3, #255	; 0xff
    8ca8:	54d1      	strb	r1, [r2, r3]
    8caa:	e7d3      	b.n	8c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    8cac:	2202      	movs	r2, #2
    8cae:	701a      	strb	r2, [r3, #0]
    8cb0:	e7d0      	b.n	8c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    8cb2:	2208      	movs	r2, #8
    8cb4:	701a      	strb	r2, [r3, #0]
    8cb6:	e7cd      	b.n	8c54 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    8cb8:	2a03      	cmp	r2, #3
    8cba:	d1cb      	bne.n	8c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    8cbc:	6802      	ldr	r2, [r0, #0]
    8cbe:	015b      	lsls	r3, r3, #5
    8cc0:	18d3      	adds	r3, r2, r3
    8cc2:	330a      	adds	r3, #10
		if (ep & USB_EP_DIR_IN) {
    8cc4:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    8cc6:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
    8cc8:	2900      	cmp	r1, #0
    8cca:	db02      	blt.n	8cd2 <usb_device_endpoint_enable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    8ccc:	2220      	movs	r2, #32
    8cce:	701a      	strb	r2, [r3, #0]
    8cd0:	e7c0      	b.n	8c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    8cd2:	2240      	movs	r2, #64	; 0x40
    8cd4:	701a      	strb	r2, [r3, #0]
    8cd6:	e7bd      	b.n	8c54 <usb_device_endpoint_enable_callback+0x28>
    8cd8:	0002d444 	.word	0x0002d444

00008cdc <usb_device_endpoint_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8cdc:	230f      	movs	r3, #15
{
    8cde:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8ce0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    8ce2:	18c4      	adds	r4, r0, r3
    8ce4:	4d28      	ldr	r5, [pc, #160]	; (8d88 <usb_device_endpoint_disable_callback+0xac>)
    8ce6:	3461      	adds	r4, #97	; 0x61
    8ce8:	34ff      	adds	r4, #255	; 0xff
    8cea:	5cae      	ldrb	r6, [r5, r2]
    8cec:	7825      	ldrb	r5, [r4, #0]
    8cee:	43b5      	bics	r5, r6
    8cf0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    8cf2:	2a00      	cmp	r2, #0
    8cf4:	d108      	bne.n	8d08 <usb_device_endpoint_disable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
    8cf6:	2b00      	cmp	r3, #0
    8cf8:	d115      	bne.n	8d26 <usb_device_endpoint_disable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    8cfa:	2103      	movs	r1, #3
    8cfc:	6802      	ldr	r2, [r0, #0]
    8cfe:	3309      	adds	r3, #9
    8d00:	33ff      	adds	r3, #255	; 0xff
    8d02:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
		}
	}

	return STATUS_OK;
}
    8d04:	2000      	movs	r0, #0
    8d06:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    8d08:	2a01      	cmp	r2, #1
    8d0a:	d117      	bne.n	8d3c <usb_device_endpoint_disable_callback+0x60>
		if (ep_num == 0) { // control endpoint
    8d0c:	2b00      	cmp	r3, #0
    8d0e:	d01f      	beq.n	8d50 <usb_device_endpoint_disable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    8d10:	6802      	ldr	r2, [r0, #0]
    8d12:	015b      	lsls	r3, r3, #5
    8d14:	18d3      	adds	r3, r2, r3
    8d16:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
    8d18:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    8d1a:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    8d1c:	2900      	cmp	r1, #0
    8d1e:	db20      	blt.n	8d62 <usb_device_endpoint_disable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    8d20:	2204      	movs	r2, #4
    8d22:	701a      	strb	r2, [r3, #0]
    8d24:	e7ee      	b.n	8d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    8d26:	6802      	ldr	r2, [r0, #0]
    8d28:	015b      	lsls	r3, r3, #5
    8d2a:	18d3      	adds	r3, r2, r3
    8d2c:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
    8d2e:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    8d30:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    8d32:	2900      	cmp	r1, #0
    8d34:	db12      	blt.n	8d5c <usb_device_endpoint_disable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    8d36:	2201      	movs	r2, #1
    8d38:	701a      	strb	r2, [r3, #0]
    8d3a:	e7e3      	b.n	8d04 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    8d3c:	2a02      	cmp	r2, #2
    8d3e:	d113      	bne.n	8d68 <usb_device_endpoint_disable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    8d40:	6802      	ldr	r2, [r0, #0]
    8d42:	015b      	lsls	r3, r3, #5
    8d44:	18d3      	adds	r3, r2, r3
    8d46:	2210      	movs	r2, #16
    8d48:	3309      	adds	r3, #9
    8d4a:	33ff      	adds	r3, #255	; 0xff
    8d4c:	701a      	strb	r2, [r3, #0]
    8d4e:	e7d9      	b.n	8d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    8d50:	210c      	movs	r1, #12
    8d52:	6802      	ldr	r2, [r0, #0]
    8d54:	3309      	adds	r3, #9
    8d56:	33ff      	adds	r3, #255	; 0xff
    8d58:	54d1      	strb	r1, [r2, r3]
    8d5a:	e7d3      	b.n	8d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    8d5c:	2202      	movs	r2, #2
    8d5e:	701a      	strb	r2, [r3, #0]
    8d60:	e7d0      	b.n	8d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    8d62:	2208      	movs	r2, #8
    8d64:	701a      	strb	r2, [r3, #0]
    8d66:	e7cd      	b.n	8d04 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    8d68:	2a03      	cmp	r2, #3
    8d6a:	d1cb      	bne.n	8d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    8d6c:	6802      	ldr	r2, [r0, #0]
    8d6e:	015b      	lsls	r3, r3, #5
    8d70:	18d3      	adds	r3, r2, r3
    8d72:	3309      	adds	r3, #9
		if (ep & USB_EP_DIR_IN) {
    8d74:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    8d76:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
    8d78:	2900      	cmp	r1, #0
    8d7a:	db02      	blt.n	8d82 <usb_device_endpoint_disable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    8d7c:	2220      	movs	r2, #32
    8d7e:	701a      	strb	r2, [r3, #0]
    8d80:	e7c0      	b.n	8d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    8d82:	2240      	movs	r2, #64	; 0x40
    8d84:	701a      	strb	r2, [r3, #0]
    8d86:	e7bd      	b.n	8d04 <usb_device_endpoint_disable_callback+0x28>
    8d88:	0002d444 	.word	0x0002d444

00008d8c <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    8d8c:	2300      	movs	r3, #0
    8d8e:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    8d90:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    8d92:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    8d94:	3301      	adds	r3, #1
    8d96:	70c3      	strb	r3, [r0, #3]
}
    8d98:	4770      	bx	lr
    8d9a:	46c0      	nop			; (mov r8, r8)

00008d9c <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    8d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d9e:	46ce      	mov	lr, r9
    8da0:	4647      	mov	r7, r8
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    8da2:	230f      	movs	r3, #15
{
    8da4:	b580      	push	{r7, lr}
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    8da6:	780c      	ldrb	r4, [r1, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;

	switch (ep_config->ep_type) {
    8da8:	78ca      	ldrb	r2, [r1, #3]
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    8daa:	4023      	ands	r3, r4
{
    8dac:	0006      	movs	r6, r0
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    8dae:	b264      	sxtb	r4, r4
	switch (ep_config->ep_type) {
    8db0:	2a04      	cmp	r2, #4
    8db2:	d81a      	bhi.n	8dea <usb_device_endpoint_set_config+0x4e>
    8db4:	4d71      	ldr	r5, [pc, #452]	; (8f7c <usb_device_endpoint_set_config+0x1e0>)
    8db6:	0092      	lsls	r2, r2, #2
    8db8:	58aa      	ldr	r2, [r5, r2]
    8dba:	4697      	mov	pc, r2
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8dbc:	2080      	movs	r0, #128	; 0x80
    8dbe:	0040      	lsls	r0, r0, #1
    8dc0:	4680      	mov	r8, r0
    8dc2:	5c17      	ldrb	r7, [r2, r0]
    8dc4:	3890      	subs	r0, #144	; 0x90
    8dc6:	4684      	mov	ip, r0
    8dc8:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    8dca:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8dcc:	423d      	tst	r5, r7
    8dce:	d124      	bne.n	8e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    8dd0:	4640      	mov	r0, r8
    8dd2:	2720      	movs	r7, #32
    8dd4:	5c10      	ldrb	r0, [r2, r0]
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    8dd6:	4645      	mov	r5, r8
    8dd8:	4338      	orrs	r0, r7
    8dda:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    8ddc:	0018      	movs	r0, r3
    8dde:	6832      	ldr	r2, [r6, #0]
    8de0:	3008      	adds	r0, #8
    8de2:	0140      	lsls	r0, r0, #5
    8de4:	1812      	adds	r2, r2, r0
    8de6:	2080      	movs	r0, #128	; 0x80
    8de8:	7110      	strb	r0, [r2, #4]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    8dea:	2007      	movs	r0, #7
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    8dec:	0fe2      	lsrs	r2, r4, #31
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    8dee:	005b      	lsls	r3, r3, #1
    8df0:	189b      	adds	r3, r3, r2
    8df2:	4a63      	ldr	r2, [pc, #396]	; (8f80 <usb_device_endpoint_set_config+0x1e4>)
    8df4:	784c      	ldrb	r4, [r1, #1]
    8df6:	011b      	lsls	r3, r3, #4
    8df8:	18d3      	adds	r3, r2, r3
    8dfa:	685a      	ldr	r2, [r3, #4]
    8dfc:	4020      	ands	r0, r4
    8dfe:	4c61      	ldr	r4, [pc, #388]	; (8f84 <usb_device_endpoint_set_config+0x1e8>)
    8e00:	0700      	lsls	r0, r0, #28
    8e02:	4022      	ands	r2, r4
    8e04:	4302      	orrs	r2, r0
    8e06:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    8e08:	788a      	ldrb	r2, [r1, #2]
    8e0a:	2a00      	cmp	r2, #0
    8e0c:	d000      	beq.n	8e10 <usb_device_endpoint_set_config+0x74>
    8e0e:	e084      	b.n	8f1a <usb_device_endpoint_set_config+0x17e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
    8e10:	2000      	movs	r0, #0
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8e12:	685a      	ldr	r2, [r3, #4]
    8e14:	0052      	lsls	r2, r2, #1
    8e16:	0852      	lsrs	r2, r2, #1
    8e18:	605a      	str	r2, [r3, #4]
}
    8e1a:	bc0c      	pop	{r2, r3}
    8e1c:	4690      	mov	r8, r2
    8e1e:	4699      	mov	r9, r3
    8e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e22:	6800      	ldr	r0, [r0, #0]
    8e24:	015a      	lsls	r2, r3, #5
    8e26:	4684      	mov	ip, r0
    8e28:	4462      	add	r2, ip
			if (ep_bank) {
    8e2a:	2c00      	cmp	r4, #0
    8e2c:	da00      	bge.n	8e30 <usb_device_endpoint_set_config+0x94>
    8e2e:	e08a      	b.n	8f46 <usb_device_endpoint_set_config+0x1aa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    8e30:	2580      	movs	r5, #128	; 0x80
    8e32:	006d      	lsls	r5, r5, #1
    8e34:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    8e36:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    8e38:	077f      	lsls	r7, r7, #29
    8e3a:	d1ee      	bne.n	8e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    8e3c:	5d50      	ldrb	r0, [r2, r5]
    8e3e:	2703      	movs	r7, #3
    8e40:	e061      	b.n	8f06 <usb_device_endpoint_set_config+0x16a>
    8e42:	6800      	ldr	r0, [r0, #0]
    8e44:	015a      	lsls	r2, r3, #5
    8e46:	4684      	mov	ip, r0
    8e48:	4462      	add	r2, ip
			if (ep_bank) {
    8e4a:	2c00      	cmp	r4, #0
    8e4c:	db6c      	blt.n	8f28 <usb_device_endpoint_set_config+0x18c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    8e4e:	2580      	movs	r5, #128	; 0x80
    8e50:	006d      	lsls	r5, r5, #1
    8e52:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    8e54:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    8e56:	077f      	lsls	r7, r7, #29
    8e58:	d1df      	bne.n	8e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    8e5a:	5d50      	ldrb	r0, [r2, r5]
    8e5c:	2704      	movs	r7, #4
    8e5e:	e052      	b.n	8f06 <usb_device_endpoint_set_config+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    8e60:	2100      	movs	r1, #0
    8e62:	6802      	ldr	r2, [r0, #0]
    8e64:	3308      	adds	r3, #8
    8e66:	015b      	lsls	r3, r3, #5
    8e68:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    8e6a:	2000      	movs	r0, #0
    8e6c:	e7d5      	b.n	8e1a <usb_device_endpoint_set_config+0x7e>
    8e6e:	6802      	ldr	r2, [r0, #0]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    8e70:	2080      	movs	r0, #128	; 0x80
    8e72:	015d      	lsls	r5, r3, #5
    8e74:	0040      	lsls	r0, r0, #1
    8e76:	1952      	adds	r2, r2, r5
    8e78:	5c17      	ldrb	r7, [r2, r0]
    8e7a:	4681      	mov	r9, r0
				return STATUS_ERR_DENIED;
    8e7c:	38e4      	subs	r0, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    8e7e:	077f      	lsls	r7, r7, #29
    8e80:	d1cb      	bne.n	8e1a <usb_device_endpoint_set_config+0x7e>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    8e82:	464c      	mov	r4, r9
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    8e84:	2770      	movs	r7, #112	; 0x70
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    8e86:	5d14      	ldrb	r4, [r2, r4]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    8e88:	4227      	tst	r7, r4
    8e8a:	d1c6      	bne.n	8e1a <usb_device_endpoint_set_config+0x7e>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    8e8c:	464c      	mov	r4, r9
    8e8e:	380b      	subs	r0, #11
    8e90:	5510      	strb	r0, [r2, r4]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    8e92:	6832      	ldr	r2, [r6, #0]
    8e94:	3308      	adds	r3, #8
    8e96:	015b      	lsls	r3, r3, #5
    8e98:	18d2      	adds	r2, r2, r3
    8e9a:	302f      	adds	r0, #47	; 0x2f
    8e9c:	7150      	strb	r0, [r2, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    8e9e:	6832      	ldr	r2, [r6, #0]
    8ea0:	18d3      	adds	r3, r2, r3
    8ea2:	2280      	movs	r2, #128	; 0x80
    8ea4:	711a      	strb	r2, [r3, #4]
			if (true == ep_config->auto_zlp) {
    8ea6:	788b      	ldrb	r3, [r1, #2]
    8ea8:	2b00      	cmp	r3, #0
    8eaa:	d05b      	beq.n	8f64 <usb_device_endpoint_set_config+0x1c8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8eac:	2080      	movs	r0, #128	; 0x80
    8eae:	4b34      	ldr	r3, [pc, #208]	; (8f80 <usb_device_endpoint_set_config+0x1e4>)
    8eb0:	0600      	lsls	r0, r0, #24
    8eb2:	195a      	adds	r2, r3, r5
    8eb4:	6854      	ldr	r4, [r2, #4]
    8eb6:	4304      	orrs	r4, r0
    8eb8:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8eba:	6954      	ldr	r4, [r2, #20]
    8ebc:	4320      	orrs	r0, r4
    8ebe:	6150      	str	r0, [r2, #20]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    8ec0:	2207      	movs	r2, #7
    8ec2:	784c      	ldrb	r4, [r1, #1]
    8ec4:	195d      	adds	r5, r3, r5
    8ec6:	6868      	ldr	r0, [r5, #4]
    8ec8:	4e2e      	ldr	r6, [pc, #184]	; (8f84 <usb_device_endpoint_set_config+0x1e8>)
    8eca:	4014      	ands	r4, r2
    8ecc:	0724      	lsls	r4, r4, #28
    8ece:	4030      	ands	r0, r6
    8ed0:	4320      	orrs	r0, r4
    8ed2:	6068      	str	r0, [r5, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    8ed4:	7849      	ldrb	r1, [r1, #1]
    8ed6:	696b      	ldr	r3, [r5, #20]
    8ed8:	400a      	ands	r2, r1
    8eda:	0712      	lsls	r2, r2, #28
    8edc:	4033      	ands	r3, r6
    8ede:	431a      	orrs	r2, r3
    8ee0:	616a      	str	r2, [r5, #20]
			return STATUS_OK;
    8ee2:	2000      	movs	r0, #0
    8ee4:	e799      	b.n	8e1a <usb_device_endpoint_set_config+0x7e>
    8ee6:	6800      	ldr	r0, [r0, #0]
    8ee8:	015a      	lsls	r2, r3, #5
    8eea:	4684      	mov	ip, r0
    8eec:	4462      	add	r2, ip
			if (ep_bank) {
    8eee:	2c00      	cmp	r4, #0
    8ef0:	da00      	bge.n	8ef4 <usb_device_endpoint_set_config+0x158>
    8ef2:	e763      	b.n	8dbc <usb_device_endpoint_set_config+0x20>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    8ef4:	2580      	movs	r5, #128	; 0x80
    8ef6:	006d      	lsls	r5, r5, #1
    8ef8:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    8efa:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    8efc:	077f      	lsls	r7, r7, #29
    8efe:	d000      	beq.n	8f02 <usb_device_endpoint_set_config+0x166>
    8f00:	e78b      	b.n	8e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    8f02:	2702      	movs	r7, #2
    8f04:	5d50      	ldrb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    8f06:	4338      	orrs	r0, r7
    8f08:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    8f0a:	0018      	movs	r0, r3
    8f0c:	6832      	ldr	r2, [r6, #0]
    8f0e:	3008      	adds	r0, #8
    8f10:	0140      	lsls	r0, r0, #5
    8f12:	1812      	adds	r2, r2, r0
    8f14:	2040      	movs	r0, #64	; 0x40
    8f16:	7150      	strb	r0, [r2, #5]
    8f18:	e767      	b.n	8dea <usb_device_endpoint_set_config+0x4e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8f1a:	2280      	movs	r2, #128	; 0x80
    8f1c:	6859      	ldr	r1, [r3, #4]
    8f1e:	0612      	lsls	r2, r2, #24
    8f20:	430a      	orrs	r2, r1
    8f22:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
    8f24:	2000      	movs	r0, #0
    8f26:	e778      	b.n	8e1a <usb_device_endpoint_set_config+0x7e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8f28:	2080      	movs	r0, #128	; 0x80
    8f2a:	0040      	lsls	r0, r0, #1
    8f2c:	4680      	mov	r8, r0
    8f2e:	5c17      	ldrb	r7, [r2, r0]
    8f30:	3890      	subs	r0, #144	; 0x90
    8f32:	4684      	mov	ip, r0
    8f34:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    8f36:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8f38:	423d      	tst	r5, r7
    8f3a:	d000      	beq.n	8f3e <usb_device_endpoint_set_config+0x1a2>
    8f3c:	e76d      	b.n	8e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    8f3e:	4640      	mov	r0, r8
    8f40:	2740      	movs	r7, #64	; 0x40
    8f42:	5c10      	ldrb	r0, [r2, r0]
    8f44:	e747      	b.n	8dd6 <usb_device_endpoint_set_config+0x3a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8f46:	2080      	movs	r0, #128	; 0x80
    8f48:	0040      	lsls	r0, r0, #1
    8f4a:	4680      	mov	r8, r0
    8f4c:	5c17      	ldrb	r7, [r2, r0]
    8f4e:	3890      	subs	r0, #144	; 0x90
    8f50:	4684      	mov	ip, r0
    8f52:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    8f54:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8f56:	423d      	tst	r5, r7
    8f58:	d000      	beq.n	8f5c <usb_device_endpoint_set_config+0x1c0>
    8f5a:	e75e      	b.n	8e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    8f5c:	4640      	mov	r0, r8
    8f5e:	2730      	movs	r7, #48	; 0x30
    8f60:	5c10      	ldrb	r0, [r2, r0]
    8f62:	e738      	b.n	8dd6 <usb_device_endpoint_set_config+0x3a>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8f64:	4b06      	ldr	r3, [pc, #24]	; (8f80 <usb_device_endpoint_set_config+0x1e4>)
    8f66:	1958      	adds	r0, r3, r5
    8f68:	6842      	ldr	r2, [r0, #4]
    8f6a:	0052      	lsls	r2, r2, #1
    8f6c:	0852      	lsrs	r2, r2, #1
    8f6e:	6042      	str	r2, [r0, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8f70:	6942      	ldr	r2, [r0, #20]
    8f72:	0052      	lsls	r2, r2, #1
    8f74:	0852      	lsrs	r2, r2, #1
    8f76:	6142      	str	r2, [r0, #20]
    8f78:	e7a2      	b.n	8ec0 <usb_device_endpoint_set_config+0x124>
    8f7a:	46c0      	nop			; (mov r8, r8)
    8f7c:	0002d420 	.word	0x0002d420
    8f80:	2000113c 	.word	0x2000113c
    8f84:	8fffffff 	.word	0x8fffffff

00008f88 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8f88:	230f      	movs	r3, #15
    8f8a:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    8f8c:	6802      	ldr	r2, [r0, #0]
    8f8e:	3308      	adds	r3, #8
    8f90:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    8f92:	b249      	sxtb	r1, r1
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    8f94:	5c98      	ldrb	r0, [r3, r2]
	if (ep & USB_EP_DIR_IN) {
    8f96:	2900      	cmp	r1, #0
    8f98:	db05      	blt.n	8fa6 <usb_device_endpoint_is_configured+0x1e>
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    8f9a:	0740      	lsls	r0, r0, #29
    8f9c:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    8f9e:	1e43      	subs	r3, r0, #1
    8fa0:	4198      	sbcs	r0, r3
    8fa2:	b2c0      	uxtb	r0, r0
}
    8fa4:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    8fa6:	0640      	lsls	r0, r0, #25
    8fa8:	0f40      	lsrs	r0, r0, #29
    8faa:	e7f8      	b.n	8f9e <usb_device_endpoint_is_configured+0x16>

00008fac <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    8fac:	230f      	movs	r3, #15
    8fae:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    8fb0:	3308      	adds	r3, #8
    8fb2:	6802      	ldr	r2, [r0, #0]
    8fb4:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    8fb6:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    8fb8:	18d2      	adds	r2, r2, r3
	if (ep & USB_EP_DIR_IN) {
    8fba:	2900      	cmp	r1, #0
    8fbc:	db06      	blt.n	8fcc <usb_device_endpoint_abort_job+0x20>
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    8fbe:	2140      	movs	r1, #64	; 0x40
    8fc0:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    8fc2:	6802      	ldr	r2, [r0, #0]
    8fc4:	18d3      	adds	r3, r2, r3
    8fc6:	2201      	movs	r2, #1
    8fc8:	71da      	strb	r2, [r3, #7]
	}
}
    8fca:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    8fcc:	2180      	movs	r1, #128	; 0x80
    8fce:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    8fd0:	6802      	ldr	r2, [r0, #0]
    8fd2:	18d3      	adds	r3, r2, r3
    8fd4:	2202      	movs	r2, #2
    8fd6:	71da      	strb	r2, [r3, #7]
    8fd8:	e7f7      	b.n	8fca <usb_device_endpoint_abort_job+0x1e>
    8fda:	46c0      	nop			; (mov r8, r8)

00008fdc <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8fdc:	230f      	movs	r3, #15
    8fde:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    8fe0:	6802      	ldr	r2, [r0, #0]
    8fe2:	3308      	adds	r3, #8
    8fe4:	015b      	lsls	r3, r3, #5
    8fe6:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
    8fe8:	b249      	sxtb	r1, r1
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    8fea:	7998      	ldrb	r0, [r3, #6]
	if (ep & USB_EP_DIR_IN) {
    8fec:	2900      	cmp	r1, #0
    8fee:	db02      	blt.n	8ff6 <usb_device_endpoint_is_halted+0x1a>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    8ff0:	06c0      	lsls	r0, r0, #27
    8ff2:	0fc0      	lsrs	r0, r0, #31
	}
}
    8ff4:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    8ff6:	0680      	lsls	r0, r0, #26
    8ff8:	0fc0      	lsrs	r0, r0, #31
    8ffa:	e7fb      	b.n	8ff4 <usb_device_endpoint_is_halted+0x18>

00008ffc <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8ffc:	230f      	movs	r3, #15
    8ffe:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    9000:	6802      	ldr	r2, [r0, #0]
    9002:	3308      	adds	r3, #8
    9004:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    9006:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    9008:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
    900a:	2900      	cmp	r1, #0
    900c:	db02      	blt.n	9014 <usb_device_endpoint_set_halt+0x18>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    900e:	2210      	movs	r2, #16
    9010:	715a      	strb	r2, [r3, #5]
	}
}
    9012:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    9014:	2220      	movs	r2, #32
    9016:	715a      	strb	r2, [r3, #5]
    9018:	e7fb      	b.n	9012 <usb_device_endpoint_set_halt+0x16>
    901a:	46c0      	nop			; (mov r8, r8)

0000901c <usb_device_endpoint_clear_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    901c:	230f      	movs	r3, #15
    901e:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    9020:	b249      	sxtb	r1, r1
{
    9022:	b530      	push	{r4, r5, lr}
	if (ep & USB_EP_DIR_IN) {
    9024:	2900      	cmp	r1, #0
    9026:	db1b      	blt.n	9060 <usb_device_endpoint_clear_halt+0x44>
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    9028:	2483      	movs	r4, #131	; 0x83
    902a:	6802      	ldr	r2, [r0, #0]
    902c:	0159      	lsls	r1, r3, #5
    902e:	0064      	lsls	r4, r4, #1
    9030:	1852      	adds	r2, r2, r1
    9032:	5d15      	ldrb	r5, [r2, r4]
    9034:	3cf6      	subs	r4, #246	; 0xf6
    9036:	422c      	tst	r4, r5
    9038:	d011      	beq.n	905e <usb_device_endpoint_clear_halt+0x42>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    903a:	2582      	movs	r5, #130	; 0x82
    903c:	006d      	lsls	r5, r5, #1
    903e:	5554      	strb	r4, [r2, r5]
    9040:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    9042:	3410      	adds	r4, #16
    9044:	1852      	adds	r2, r2, r1
    9046:	2108      	movs	r1, #8
    9048:	31ff      	adds	r1, #255	; 0xff
    904a:	5c55      	ldrb	r5, [r2, r1]
    904c:	422c      	tst	r4, r5
    904e:	d006      	beq.n	905e <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    9050:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    9052:	6802      	ldr	r2, [r0, #0]
    9054:	3308      	adds	r3, #8
    9056:	015b      	lsls	r3, r3, #5
    9058:	18d3      	adds	r3, r2, r3
    905a:	2201      	movs	r2, #1
    905c:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    905e:	bd30      	pop	{r4, r5, pc}
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    9060:	2483      	movs	r4, #131	; 0x83
    9062:	6802      	ldr	r2, [r0, #0]
    9064:	0159      	lsls	r1, r3, #5
    9066:	0064      	lsls	r4, r4, #1
    9068:	1852      	adds	r2, r2, r1
    906a:	5d15      	ldrb	r5, [r2, r4]
    906c:	3ce6      	subs	r4, #230	; 0xe6
    906e:	422c      	tst	r4, r5
    9070:	d0f5      	beq.n	905e <usb_device_endpoint_clear_halt+0x42>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    9072:	2582      	movs	r5, #130	; 0x82
    9074:	006d      	lsls	r5, r5, #1
    9076:	5554      	strb	r4, [r2, r5]
    9078:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    907a:	3420      	adds	r4, #32
    907c:	1852      	adds	r2, r2, r1
    907e:	2108      	movs	r1, #8
    9080:	31ff      	adds	r1, #255	; 0xff
    9082:	5c55      	ldrb	r5, [r2, r1]
    9084:	422c      	tst	r4, r5
    9086:	d0ea      	beq.n	905e <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    9088:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    908a:	6802      	ldr	r2, [r0, #0]
    908c:	3308      	adds	r3, #8
    908e:	015b      	lsls	r3, r3, #5
    9090:	18d3      	adds	r3, r2, r3
    9092:	2202      	movs	r2, #2
    9094:	711a      	strb	r2, [r3, #4]
    9096:	e7e2      	b.n	905e <usb_device_endpoint_clear_halt+0x42>

00009098 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    9098:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    909a:	000d      	movs	r5, r1
    909c:	6804      	ldr	r4, [r0, #0]
    909e:	3508      	adds	r5, #8
    90a0:	016d      	lsls	r5, r5, #5
    90a2:	5d2c      	ldrb	r4, [r5, r4]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    90a4:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    90a6:	0664      	lsls	r4, r4, #25
    90a8:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    90aa:	d101      	bne.n	90b0 <usb_device_endpoint_write_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    90ac:	0030      	movs	r0, r6
    90ae:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    90b0:	4c0a      	ldr	r4, [pc, #40]	; (90dc <usb_device_endpoint_write_buffer_job+0x44>)
    90b2:	0149      	lsls	r1, r1, #5
    90b4:	1861      	adds	r1, r4, r1
    90b6:	000c      	movs	r4, r1
    90b8:	610a      	str	r2, [r1, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    90ba:	694a      	ldr	r2, [r1, #20]
    90bc:	4908      	ldr	r1, [pc, #32]	; (90e0 <usb_device_endpoint_write_buffer_job+0x48>)
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    90be:	049b      	lsls	r3, r3, #18
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    90c0:	400a      	ands	r2, r1
    90c2:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    90c4:	6962      	ldr	r2, [r4, #20]
    90c6:	0c9b      	lsrs	r3, r3, #18
    90c8:	0b92      	lsrs	r2, r2, #14
    90ca:	0392      	lsls	r2, r2, #14
    90cc:	4313      	orrs	r3, r2
    90ce:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    90d0:	6803      	ldr	r3, [r0, #0]
	return STATUS_OK;
    90d2:	2600      	movs	r6, #0
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    90d4:	195d      	adds	r5, r3, r5
    90d6:	2380      	movs	r3, #128	; 0x80
    90d8:	716b      	strb	r3, [r5, #5]
	return STATUS_OK;
    90da:	e7e7      	b.n	90ac <usb_device_endpoint_write_buffer_job+0x14>
    90dc:	2000113c 	.word	0x2000113c
    90e0:	f0003fff 	.word	0xf0003fff

000090e4 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    90e4:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    90e6:	000c      	movs	r4, r1
    90e8:	6805      	ldr	r5, [r0, #0]
    90ea:	3408      	adds	r4, #8
    90ec:	0164      	lsls	r4, r4, #5
    90ee:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    90f0:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    90f2:	076d      	lsls	r5, r5, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    90f4:	d101      	bne.n	90fa <usb_device_endpoint_read_buffer_job+0x16>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    90f6:	0030      	movs	r0, r6
    90f8:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    90fa:	4d0a      	ldr	r5, [pc, #40]	; (9124 <usb_device_endpoint_read_buffer_job+0x40>)
    90fc:	0149      	lsls	r1, r1, #5
    90fe:	514a      	str	r2, [r1, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    9100:	1869      	adds	r1, r5, r1
    9102:	684a      	ldr	r2, [r1, #4]
    9104:	4d08      	ldr	r5, [pc, #32]	; (9128 <usb_device_endpoint_read_buffer_job+0x44>)
    9106:	049b      	lsls	r3, r3, #18
    9108:	091b      	lsrs	r3, r3, #4
    910a:	402a      	ands	r2, r5
    910c:	4313      	orrs	r3, r2
    910e:	604b      	str	r3, [r1, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    9110:	684b      	ldr	r3, [r1, #4]
	return STATUS_OK;
    9112:	2600      	movs	r6, #0
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    9114:	0b9b      	lsrs	r3, r3, #14
    9116:	039b      	lsls	r3, r3, #14
    9118:	604b      	str	r3, [r1, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    911a:	6803      	ldr	r3, [r0, #0]
    911c:	191c      	adds	r4, r3, r4
    911e:	2340      	movs	r3, #64	; 0x40
    9120:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
    9122:	e7e8      	b.n	90f6 <usb_device_endpoint_read_buffer_job+0x12>
    9124:	2000113c 	.word	0x2000113c
    9128:	f0003fff 	.word	0xf0003fff

0000912c <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    912c:	4b09      	ldr	r3, [pc, #36]	; (9154 <usb_device_endpoint_setup_buffer_job+0x28>)
    912e:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    9130:	685a      	ldr	r2, [r3, #4]
    9132:	4909      	ldr	r1, [pc, #36]	; (9158 <usb_device_endpoint_setup_buffer_job+0x2c>)
    9134:	4011      	ands	r1, r2
    9136:	2280      	movs	r2, #128	; 0x80
    9138:	0292      	lsls	r2, r2, #10
    913a:	430a      	orrs	r2, r1
    913c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    913e:	685a      	ldr	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    9140:	2140      	movs	r1, #64	; 0x40
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    9142:	0b92      	lsrs	r2, r2, #14
    9144:	0392      	lsls	r2, r2, #14
    9146:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    9148:	2382      	movs	r3, #130	; 0x82
    914a:	6802      	ldr	r2, [r0, #0]
    914c:	005b      	lsls	r3, r3, #1

	return STATUS_OK;
}
    914e:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    9150:	54d1      	strb	r1, [r2, r3]
}
    9152:	4770      	bx	lr
    9154:	2000113c 	.word	0x2000113c
    9158:	f0003fff 	.word	0xf0003fff

0000915c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    915c:	2102      	movs	r1, #2
    915e:	6802      	ldr	r2, [r0, #0]
    9160:	7813      	ldrb	r3, [r2, #0]
    9162:	430b      	orrs	r3, r1
    9164:	7013      	strb	r3, [r2, #0]
    9166:	6802      	ldr	r2, [r0, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    9168:	7893      	ldrb	r3, [r2, #2]
    916a:	2b02      	cmp	r3, #2
    916c:	d0fc      	beq.n	9168 <usb_enable+0xc>
}
    916e:	4770      	bx	lr

00009170 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    9170:	b5f0      	push	{r4, r5, r6, r7, lr}
    9172:	4657      	mov	r7, sl
    9174:	4645      	mov	r5, r8
    9176:	46de      	mov	lr, fp
    9178:	464e      	mov	r6, r9
    917a:	b5e0      	push	{r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    917c:	4c86      	ldr	r4, [pc, #536]	; (9398 <USB_Handler+0x228>)
{
    917e:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    9180:	6827      	ldr	r7, [r4, #0]
    9182:	683d      	ldr	r5, [r7, #0]
    9184:	782b      	ldrb	r3, [r5, #0]
    9186:	09db      	lsrs	r3, r3, #7
    9188:	d000      	beq.n	918c <USB_Handler+0x1c>
    918a:	e06d      	b.n	9268 <USB_Handler+0xf8>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    918c:	8c2e      	ldrh	r6, [r5, #32]
    918e:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    9190:	2e00      	cmp	r6, #0
    9192:	d136      	bne.n	9202 <USB_Handler+0x92>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    9194:	8bab      	ldrh	r3, [r5, #28]
		flags_run = flags &
    9196:	22aa      	movs	r2, #170	; 0xaa
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    9198:	b29b      	uxth	r3, r3
    919a:	4698      	mov	r8, r3
				_usb_instances->device_enabled_callback_mask &
    919c:	23ab      	movs	r3, #171	; 0xab
		flags_run = flags &
    919e:	0052      	lsls	r2, r2, #1
				_usb_instances->device_enabled_callback_mask &
    91a0:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    91a2:	5afb      	ldrh	r3, [r7, r3]
    91a4:	5abe      	ldrh	r6, [r7, r2]
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    91a6:	2500      	movs	r5, #0
		flags_run = flags &
    91a8:	401e      	ands	r6, r3
    91aa:	4643      	mov	r3, r8
    91ac:	401e      	ands	r6, r3
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    91ae:	4b7b      	ldr	r3, [pc, #492]	; (939c <USB_Handler+0x22c>)
    91b0:	4f7b      	ldr	r7, [pc, #492]	; (93a0 <USB_Handler+0x230>)
    91b2:	469b      	mov	fp, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    91b4:	2380      	movs	r3, #128	; 0x80
    91b6:	005b      	lsls	r3, r3, #1
    91b8:	469a      	mov	sl, r3
    91ba:	4b7a      	ldr	r3, [pc, #488]	; (93a4 <USB_Handler+0x234>)
    91bc:	4699      	mov	r9, r3
    91be:	0033      	movs	r3, r6
    91c0:	4646      	mov	r6, r8
    91c2:	4698      	mov	r8, r3
			if (flags & _usb_device_irq_bits[i]) {
    91c4:	006b      	lsls	r3, r5, #1
    91c6:	5afb      	ldrh	r3, [r7, r3]
    91c8:	4233      	tst	r3, r6
    91ca:	d002      	beq.n	91d2 <USB_Handler+0x62>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    91cc:	6822      	ldr	r2, [r4, #0]
    91ce:	6812      	ldr	r2, [r2, #0]
    91d0:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    91d2:	4642      	mov	r2, r8
    91d4:	4213      	tst	r3, r2
    91d6:	d00a      	beq.n	91ee <USB_Handler+0x7e>
    91d8:	4649      	mov	r1, r9
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    91da:	2d06      	cmp	r5, #6
    91dc:	d100      	bne.n	91e0 <USB_Handler+0x70>
    91de:	e364      	b.n	98aa <USB_Handler+0x73a>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    91e0:	002b      	movs	r3, r5
    91e2:	6822      	ldr	r2, [r4, #0]
    91e4:	332e      	adds	r3, #46	; 0x2e
    91e6:	009b      	lsls	r3, r3, #2
    91e8:	589b      	ldr	r3, [r3, r2]
    91ea:	0010      	movs	r0, r2
    91ec:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    91ee:	3501      	adds	r5, #1
    91f0:	2d07      	cmp	r5, #7
    91f2:	d1e7      	bne.n	91c4 <USB_Handler+0x54>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    91f4:	b003      	add	sp, #12
    91f6:	bc3c      	pop	{r2, r3, r4, r5}
    91f8:	4690      	mov	r8, r2
    91fa:	4699      	mov	r9, r3
    91fc:	46a2      	mov	sl, r4
    91fe:	46ab      	mov	fp, r5
    9200:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ep_inst & (1 << i)) {
    9202:	2201      	movs	r2, #1
    9204:	003c      	movs	r4, r7
    9206:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    9208:	325f      	adds	r2, #95	; 0x5f
    920a:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    920c:	3a50      	subs	r2, #80	; 0x50
	if (0 == ep_inst) {
    920e:	2300      	movs	r3, #0
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9210:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    9212:	46b9      	mov	r9, r7
    9214:	46a8      	mov	r8, r5
    9216:	3459      	adds	r4, #89	; 0x59
    9218:	34ff      	adds	r4, #255	; 0xff
			if (ep_inst & (1 << i)) {
    921a:	0032      	movs	r2, r6
    921c:	4661      	mov	r1, ip
    921e:	411a      	asrs	r2, r3
    9220:	b2dd      	uxtb	r5, r3
    9222:	4211      	tst	r1, r2
    9224:	d01b      	beq.n	925e <USB_Handler+0xee>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    9226:	001f      	movs	r7, r3
    9228:	3708      	adds	r7, #8
    922a:	017a      	lsls	r2, r7, #5
    922c:	4442      	add	r2, r8
    922e:	1dd1      	adds	r1, r2, #7
    9230:	79d2      	ldrb	r2, [r2, #7]
    9232:	9100      	str	r1, [sp, #0]
    9234:	7a21      	ldrb	r1, [r4, #8]
    9236:	7820      	ldrb	r0, [r4, #0]
    9238:	b2d2      	uxtb	r2, r2
    923a:	4011      	ands	r1, r2
    923c:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    923e:	4658      	mov	r0, fp
    9240:	4210      	tst	r0, r2
    9242:	d000      	beq.n	9246 <USB_Handler+0xd6>
    9244:	e227      	b.n	9696 <USB_Handler+0x526>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9246:	4650      	mov	r0, sl
    9248:	4210      	tst	r0, r2
    924a:	d000      	beq.n	924e <USB_Handler+0xde>
    924c:	e24e      	b.n	96ec <USB_Handler+0x57c>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    924e:	2003      	movs	r0, #3
    9250:	4210      	tst	r0, r2
    9252:	d000      	beq.n	9256 <USB_Handler+0xe6>
    9254:	e263      	b.n	971e <USB_Handler+0x5ae>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    9256:	200c      	movs	r0, #12
    9258:	4210      	tst	r0, r2
    925a:	d000      	beq.n	925e <USB_Handler+0xee>
    925c:	e283      	b.n	9766 <USB_Handler+0x5f6>
    925e:	3301      	adds	r3, #1
    9260:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    9262:	2b08      	cmp	r3, #8
    9264:	d1d9      	bne.n	921a <USB_Handler+0xaa>
    9266:	e7c5      	b.n	91f4 <USB_Handler+0x84>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    9268:	8c2b      	ldrh	r3, [r5, #32]
    926a:	2b00      	cmp	r3, #0
    926c:	d100      	bne.n	9270 <USB_Handler+0x100>
    926e:	e0a1      	b.n	93b4 <USB_Handler+0x244>
    9270:	8c28      	ldrh	r0, [r5, #32]
    9272:	4b4d      	ldr	r3, [pc, #308]	; (93a8 <USB_Handler+0x238>)
    9274:	b280      	uxth	r0, r0
    9276:	4798      	blx	r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    9278:	2308      	movs	r3, #8
    927a:	4698      	mov	r8, r3
    927c:	4480      	add	r8, r0
    927e:	4643      	mov	r3, r8
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    9280:	2203      	movs	r2, #3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    9282:	015b      	lsls	r3, r3, #5
    9284:	18ed      	adds	r5, r5, r3
    9286:	79ed      	ldrb	r5, [r5, #7]
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    9288:	0006      	movs	r6, r0
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    928a:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    928c:	422a      	tst	r2, r5
    928e:	d014      	beq.n	92ba <USB_Handler+0x14a>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    9290:	4946      	ldr	r1, [pc, #280]	; (93ac <USB_Handler+0x23c>)
    9292:	468c      	mov	ip, r1
    9294:	2101      	movs	r1, #1
    9296:	4689      	mov	r9, r1
    9298:	4081      	lsls	r1, r0
    929a:	4660      	mov	r0, ip
    929c:	6800      	ldr	r0, [r0, #0]
    929e:	4388      	bics	r0, r1
    92a0:	0001      	movs	r1, r0
    92a2:	4660      	mov	r0, ip
    92a4:	6001      	str	r1, [r0, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    92a6:	6839      	ldr	r1, [r7, #0]
    92a8:	18c9      	adds	r1, r1, r3
    92aa:	71ca      	strb	r2, [r1, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    92ac:	4649      	mov	r1, r9
    92ae:	19ba      	adds	r2, r7, r6
    92b0:	32ae      	adds	r2, #174	; 0xae
    92b2:	7812      	ldrb	r2, [r2, #0]
    92b4:	4211      	tst	r1, r2
    92b6:	d000      	beq.n	92ba <USB_Handler+0x14a>
    92b8:	e172      	b.n	95a0 <USB_Handler+0x430>
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    92ba:	2304      	movs	r3, #4
    92bc:	422b      	tst	r3, r5
    92be:	d020      	beq.n	9302 <USB_Handler+0x192>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    92c0:	6823      	ldr	r3, [r4, #0]
    92c2:	681f      	ldr	r7, [r3, #0]
    92c4:	469c      	mov	ip, r3
    92c6:	4643      	mov	r3, r8
    92c8:	015b      	lsls	r3, r3, #5
    92ca:	4699      	mov	r9, r3
    92cc:	5ddb      	ldrb	r3, [r3, r7]
    92ce:	069b      	lsls	r3, r3, #26
    92d0:	0f5b      	lsrs	r3, r3, #29
    92d2:	9300      	str	r3, [sp, #0]
    92d4:	2b02      	cmp	r3, #2
    92d6:	d100      	bne.n	92da <USB_Handler+0x16a>
    92d8:	e1bf      	b.n	965a <USB_Handler+0x4ea>
    92da:	4830      	ldr	r0, [pc, #192]	; (939c <USB_Handler+0x22c>)
    92dc:	0172      	lsls	r2, r6, #5
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    92de:	4643      	mov	r3, r8
    92e0:	0159      	lsls	r1, r3, #5
    92e2:	5dcb      	ldrb	r3, [r1, r7]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    92e4:	1882      	adds	r2, r0, r2
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    92e6:	069b      	lsls	r3, r3, #26
    92e8:	0f5b      	lsrs	r3, r3, #29
    92ea:	2b03      	cmp	r3, #3
    92ec:	d100      	bne.n	92f0 <USB_Handler+0x180>
    92ee:	e1bf      	b.n	9670 <USB_Handler+0x500>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    92f0:	2300      	movs	r3, #0
    92f2:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    92f4:	4663      	mov	r3, ip
    92f6:	4642      	mov	r2, r8
    92f8:	681b      	ldr	r3, [r3, #0]
    92fa:	0152      	lsls	r2, r2, #5
    92fc:	189b      	adds	r3, r3, r2
    92fe:	2204      	movs	r2, #4
    9300:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    9302:	2308      	movs	r3, #8
    9304:	422b      	tst	r3, r5
    9306:	d012      	beq.n	932e <USB_Handler+0x1be>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    9308:	2201      	movs	r2, #1
    930a:	40b2      	lsls	r2, r6
    930c:	4927      	ldr	r1, [pc, #156]	; (93ac <USB_Handler+0x23c>)
    930e:	6808      	ldr	r0, [r1, #0]
    9310:	4390      	bics	r0, r2
    9312:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    9314:	6820      	ldr	r0, [r4, #0]
    9316:	4642      	mov	r2, r8
    9318:	6801      	ldr	r1, [r0, #0]
    931a:	0152      	lsls	r2, r2, #5
    931c:	468c      	mov	ip, r1
    931e:	4462      	add	r2, ip
    9320:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    9322:	1983      	adds	r3, r0, r6
    9324:	33ae      	adds	r3, #174	; 0xae
    9326:	781b      	ldrb	r3, [r3, #0]
    9328:	079b      	lsls	r3, r3, #30
    932a:	d500      	bpl.n	932e <USB_Handler+0x1be>
    932c:	e187      	b.n	963e <USB_Handler+0x4ce>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    932e:	2310      	movs	r3, #16
    9330:	422b      	tst	r3, r5
    9332:	d012      	beq.n	935a <USB_Handler+0x1ea>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    9334:	2201      	movs	r2, #1
    9336:	40b2      	lsls	r2, r6
    9338:	491c      	ldr	r1, [pc, #112]	; (93ac <USB_Handler+0x23c>)
    933a:	6808      	ldr	r0, [r1, #0]
    933c:	4390      	bics	r0, r2
    933e:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    9340:	6820      	ldr	r0, [r4, #0]
    9342:	4642      	mov	r2, r8
    9344:	6801      	ldr	r1, [r0, #0]
    9346:	0152      	lsls	r2, r2, #5
    9348:	468c      	mov	ip, r1
    934a:	4462      	add	r2, ip
    934c:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    934e:	1983      	adds	r3, r0, r6
    9350:	33ae      	adds	r3, #174	; 0xae
    9352:	781b      	ldrb	r3, [r3, #0]
    9354:	075b      	lsls	r3, r3, #29
    9356:	d500      	bpl.n	935a <USB_Handler+0x1ea>
    9358:	e162      	b.n	9620 <USB_Handler+0x4b0>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    935a:	2220      	movs	r2, #32
    935c:	422a      	tst	r2, r5
    935e:	d100      	bne.n	9362 <USB_Handler+0x1f2>
    9360:	e748      	b.n	91f4 <USB_Handler+0x84>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    9362:	2301      	movs	r3, #1
    9364:	40b3      	lsls	r3, r6
    9366:	4911      	ldr	r1, [pc, #68]	; (93ac <USB_Handler+0x23c>)
    9368:	6808      	ldr	r0, [r1, #0]
    936a:	4398      	bics	r0, r3
    936c:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    936e:	6820      	ldr	r0, [r4, #0]
    9370:	4643      	mov	r3, r8
    9372:	6801      	ldr	r1, [r0, #0]
    9374:	015b      	lsls	r3, r3, #5
    9376:	468c      	mov	ip, r1
    9378:	4463      	add	r3, ip
    937a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    937c:	1983      	adds	r3, r0, r6
    937e:	33ae      	adds	r3, #174	; 0xae
    9380:	781b      	ldrb	r3, [r3, #0]
    9382:	071b      	lsls	r3, r3, #28
    9384:	d400      	bmi.n	9388 <USB_Handler+0x218>
    9386:	e735      	b.n	91f4 <USB_Handler+0x84>
				pipe_callback_para.pipe_num = pipe_int;
    9388:	4909      	ldr	r1, [pc, #36]	; (93b0 <USB_Handler+0x240>)
    938a:	700e      	strb	r6, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    938c:	0136      	lsls	r6, r6, #4
    938e:	1986      	adds	r6, r0, r6
    9390:	6b33      	ldr	r3, [r6, #48]	; 0x30
    9392:	4798      	blx	r3
    9394:	e72e      	b.n	91f4 <USB_Handler+0x84>
    9396:	46c0      	nop			; (mov r8, r8)
    9398:	20000c80 	.word	0x20000c80
    939c:	2000113c 	.word	0x2000113c
    93a0:	0002d434 	.word	0x0002d434
    93a4:	20000c84 	.word	0x20000c84
    93a8:	00025d55 	.word	0x00025d55
    93ac:	20000c90 	.word	0x20000c90
    93b0:	20000c94 	.word	0x20000c94
		if (flags & USB_HOST_INTFLAG_HSOF) {
    93b4:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    93b6:	8bae      	ldrh	r6, [r5, #28]
    93b8:	b2b6      	uxth	r6, r6
		if (flags & USB_HOST_INTFLAG_HSOF) {
    93ba:	4233      	tst	r3, r6
    93bc:	d100      	bne.n	93c0 <USB_Handler+0x250>
    93be:	e080      	b.n	94c2 <USB_Handler+0x352>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    93c0:	83ab      	strh	r3, [r5, #28]
    93c2:	4bc5      	ldr	r3, [pc, #788]	; (96d8 <USB_Handler+0x568>)
    93c4:	681b      	ldr	r3, [r3, #0]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    93c6:	079a      	lsls	r2, r3, #30
    93c8:	d511      	bpl.n	93ee <USB_Handler+0x27e>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    93ca:	2090      	movs	r0, #144	; 0x90
    93cc:	6839      	ldr	r1, [r7, #0]
    93ce:	0040      	lsls	r0, r0, #1
    93d0:	5c0a      	ldrb	r2, [r1, r0]
    93d2:	0692      	lsls	r2, r2, #26
    93d4:	0f52      	lsrs	r2, r2, #29
    93d6:	2a03      	cmp	r2, #3
    93d8:	d109      	bne.n	93ee <USB_Handler+0x27e>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    93da:	5c0a      	ldrb	r2, [r1, r0]
    93dc:	0792      	lsls	r2, r2, #30
    93de:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    93e0:	2a01      	cmp	r2, #1
    93e2:	d104      	bne.n	93ee <USB_Handler+0x27e>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    93e4:	3811      	subs	r0, #17
    93e6:	3224      	adds	r2, #36	; 0x24
    93e8:	38ff      	subs	r0, #255	; 0xff
    93ea:	32ff      	adds	r2, #255	; 0xff
    93ec:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    93ee:	075a      	lsls	r2, r3, #29
    93f0:	d511      	bpl.n	9416 <USB_Handler+0x2a6>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    93f2:	20a0      	movs	r0, #160	; 0xa0
    93f4:	6839      	ldr	r1, [r7, #0]
    93f6:	0040      	lsls	r0, r0, #1
    93f8:	5c0a      	ldrb	r2, [r1, r0]
    93fa:	0692      	lsls	r2, r2, #26
    93fc:	0f52      	lsrs	r2, r2, #29
    93fe:	2a03      	cmp	r2, #3
    9400:	d109      	bne.n	9416 <USB_Handler+0x2a6>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    9402:	5c0a      	ldrb	r2, [r1, r0]
    9404:	0792      	lsls	r2, r2, #30
    9406:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    9408:	2a01      	cmp	r2, #1
    940a:	d104      	bne.n	9416 <USB_Handler+0x2a6>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    940c:	3831      	subs	r0, #49	; 0x31
    940e:	3244      	adds	r2, #68	; 0x44
    9410:	38ff      	subs	r0, #255	; 0xff
    9412:	32ff      	adds	r2, #255	; 0xff
    9414:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    9416:	071a      	lsls	r2, r3, #28
    9418:	d511      	bpl.n	943e <USB_Handler+0x2ce>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    941a:	20b0      	movs	r0, #176	; 0xb0
    941c:	6839      	ldr	r1, [r7, #0]
    941e:	0040      	lsls	r0, r0, #1
    9420:	5c0a      	ldrb	r2, [r1, r0]
    9422:	0692      	lsls	r2, r2, #26
    9424:	0f52      	lsrs	r2, r2, #29
    9426:	2a03      	cmp	r2, #3
    9428:	d109      	bne.n	943e <USB_Handler+0x2ce>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    942a:	5c0a      	ldrb	r2, [r1, r0]
    942c:	0792      	lsls	r2, r2, #30
    942e:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    9430:	2a01      	cmp	r2, #1
    9432:	d104      	bne.n	943e <USB_Handler+0x2ce>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    9434:	3851      	subs	r0, #81	; 0x51
    9436:	3264      	adds	r2, #100	; 0x64
    9438:	38ff      	subs	r0, #255	; 0xff
    943a:	32ff      	adds	r2, #255	; 0xff
    943c:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    943e:	2110      	movs	r1, #16
    9440:	4219      	tst	r1, r3
    9442:	d00f      	beq.n	9464 <USB_Handler+0x2f4>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    9444:	25c0      	movs	r5, #192	; 0xc0
    9446:	6838      	ldr	r0, [r7, #0]
    9448:	006d      	lsls	r5, r5, #1
    944a:	5d42      	ldrb	r2, [r0, r5]
    944c:	0692      	lsls	r2, r2, #26
    944e:	0f52      	lsrs	r2, r2, #29
    9450:	2a03      	cmp	r2, #3
    9452:	d107      	bne.n	9464 <USB_Handler+0x2f4>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    9454:	5d42      	ldrb	r2, [r0, r5]
    9456:	0792      	lsls	r2, r2, #30
    9458:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    945a:	2a01      	cmp	r2, #1
    945c:	d102      	bne.n	9464 <USB_Handler+0x2f4>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    945e:	3284      	adds	r2, #132	; 0x84
    9460:	32ff      	adds	r2, #255	; 0xff
    9462:	5481      	strb	r1, [r0, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    9464:	069a      	lsls	r2, r3, #26
    9466:	d511      	bpl.n	948c <USB_Handler+0x31c>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    9468:	20d0      	movs	r0, #208	; 0xd0
    946a:	6839      	ldr	r1, [r7, #0]
    946c:	0040      	lsls	r0, r0, #1
    946e:	5c0a      	ldrb	r2, [r1, r0]
    9470:	0692      	lsls	r2, r2, #26
    9472:	0f52      	lsrs	r2, r2, #29
    9474:	2a03      	cmp	r2, #3
    9476:	d109      	bne.n	948c <USB_Handler+0x31c>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    9478:	5c0a      	ldrb	r2, [r1, r0]
    947a:	0792      	lsls	r2, r2, #30
    947c:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    947e:	2a01      	cmp	r2, #1
    9480:	d104      	bne.n	948c <USB_Handler+0x31c>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    9482:	3891      	subs	r0, #145	; 0x91
    9484:	32a4      	adds	r2, #164	; 0xa4
    9486:	38ff      	subs	r0, #255	; 0xff
    9488:	32ff      	adds	r2, #255	; 0xff
    948a:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    948c:	065a      	lsls	r2, r3, #25
    948e:	d511      	bpl.n	94b4 <USB_Handler+0x344>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    9490:	20e0      	movs	r0, #224	; 0xe0
    9492:	6839      	ldr	r1, [r7, #0]
    9494:	0040      	lsls	r0, r0, #1
    9496:	5c0a      	ldrb	r2, [r1, r0]
    9498:	0692      	lsls	r2, r2, #26
    949a:	0f52      	lsrs	r2, r2, #29
    949c:	2a03      	cmp	r2, #3
    949e:	d109      	bne.n	94b4 <USB_Handler+0x344>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    94a0:	5c0a      	ldrb	r2, [r1, r0]
    94a2:	0792      	lsls	r2, r2, #30
    94a4:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    94a6:	2a01      	cmp	r2, #1
    94a8:	d104      	bne.n	94b4 <USB_Handler+0x344>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    94aa:	38b1      	subs	r0, #177	; 0xb1
    94ac:	32c4      	adds	r2, #196	; 0xc4
    94ae:	38ff      	subs	r0, #255	; 0xff
    94b0:	32ff      	adds	r2, #255	; 0xff
    94b2:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    94b4:	061b      	lsls	r3, r3, #24
    94b6:	d460      	bmi.n	957a <USB_Handler+0x40a>
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    94b8:	23a5      	movs	r3, #165	; 0xa5
    94ba:	5cfb      	ldrb	r3, [r7, r3]
    94bc:	07db      	lsls	r3, r3, #31
    94be:	d500      	bpl.n	94c2 <USB_Handler+0x352>
    94c0:	e0aa      	b.n	9618 <USB_Handler+0x4a8>
		if (flags & USB_HOST_INTFLAG_RST) {
    94c2:	2308      	movs	r3, #8
    94c4:	4233      	tst	r3, r6
    94c6:	d00a      	beq.n	94de <USB_Handler+0x36e>
			host_pipe_job_busy_status = 0;
    94c8:	2100      	movs	r1, #0
    94ca:	4a83      	ldr	r2, [pc, #524]	; (96d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    94cc:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    94ce:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    94d0:	6802      	ldr	r2, [r0, #0]
    94d2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    94d4:	339d      	adds	r3, #157	; 0x9d
    94d6:	5cc3      	ldrb	r3, [r0, r3]
    94d8:	079b      	lsls	r3, r3, #30
    94da:	d500      	bpl.n	94de <USB_Handler+0x36e>
    94dc:	e099      	b.n	9612 <USB_Handler+0x4a2>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    94de:	2340      	movs	r3, #64	; 0x40
    94e0:	4233      	tst	r3, r6
    94e2:	d007      	beq.n	94f4 <USB_Handler+0x384>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    94e4:	6820      	ldr	r0, [r4, #0]
    94e6:	6802      	ldr	r2, [r0, #0]
    94e8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    94ea:	3365      	adds	r3, #101	; 0x65
    94ec:	5cc3      	ldrb	r3, [r0, r3]
    94ee:	06db      	lsls	r3, r3, #27
    94f0:	d500      	bpl.n	94f4 <USB_Handler+0x384>
    94f2:	e08b      	b.n	960c <USB_Handler+0x49c>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    94f4:	2320      	movs	r3, #32
    94f6:	4233      	tst	r3, r6
    94f8:	d006      	beq.n	9508 <USB_Handler+0x398>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    94fa:	6820      	ldr	r0, [r4, #0]
    94fc:	6802      	ldr	r2, [r0, #0]
    94fe:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    9500:	3385      	adds	r3, #133	; 0x85
    9502:	5cc3      	ldrb	r3, [r0, r3]
    9504:	071b      	lsls	r3, r3, #28
    9506:	d47e      	bmi.n	9606 <USB_Handler+0x496>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    9508:	2310      	movs	r3, #16
    950a:	4233      	tst	r3, r6
    950c:	d006      	beq.n	951c <USB_Handler+0x3ac>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    950e:	6820      	ldr	r0, [r4, #0]
    9510:	6802      	ldr	r2, [r0, #0]
    9512:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    9514:	3395      	adds	r3, #149	; 0x95
    9516:	5cc3      	ldrb	r3, [r0, r3]
    9518:	075b      	lsls	r3, r3, #29
    951a:	d471      	bmi.n	9600 <USB_Handler+0x490>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    951c:	2380      	movs	r3, #128	; 0x80
    951e:	4233      	tst	r3, r6
    9520:	d009      	beq.n	9536 <USB_Handler+0x3c6>
			host_pipe_job_busy_status = 0;
    9522:	2100      	movs	r1, #0
    9524:	4a6c      	ldr	r2, [pc, #432]	; (96d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    9526:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    9528:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    952a:	6802      	ldr	r2, [r0, #0]
    952c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    952e:	3325      	adds	r3, #37	; 0x25
    9530:	5cc3      	ldrb	r3, [r0, r3]
    9532:	069b      	lsls	r3, r3, #26
    9534:	d461      	bmi.n	95fa <USB_Handler+0x48a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    9536:	2380      	movs	r3, #128	; 0x80
    9538:	005b      	lsls	r3, r3, #1
    953a:	421e      	tst	r6, r3
    953c:	d009      	beq.n	9552 <USB_Handler+0x3e2>
			host_pipe_job_busy_status = 0;
    953e:	2100      	movs	r1, #0
    9540:	4a65      	ldr	r2, [pc, #404]	; (96d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    9542:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    9544:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    9546:	6802      	ldr	r2, [r0, #0]
    9548:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    954a:	3b5b      	subs	r3, #91	; 0x5b
    954c:	5cc3      	ldrb	r3, [r0, r3]
    954e:	065b      	lsls	r3, r3, #25
    9550:	d450      	bmi.n	95f4 <USB_Handler+0x484>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    9552:	2380      	movs	r3, #128	; 0x80
    9554:	009b      	lsls	r3, r3, #2
    9556:	421e      	tst	r6, r3
    9558:	d100      	bne.n	955c <USB_Handler+0x3ec>
    955a:	e64b      	b.n	91f4 <USB_Handler+0x84>
			host_pipe_job_busy_status = 0;
    955c:	2100      	movs	r1, #0
    955e:	4a5e      	ldr	r2, [pc, #376]	; (96d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    9560:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    9562:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    9564:	6802      	ldr	r2, [r0, #0]
    9566:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    9568:	3b5c      	subs	r3, #92	; 0x5c
    956a:	3bff      	subs	r3, #255	; 0xff
    956c:	5cc3      	ldrb	r3, [r0, r3]
    956e:	2b7f      	cmp	r3, #127	; 0x7f
    9570:	d800      	bhi.n	9574 <USB_Handler+0x404>
    9572:	e63f      	b.n	91f4 <USB_Handler+0x84>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    9574:	6a03      	ldr	r3, [r0, #32]
    9576:	4798      	blx	r3
    9578:	e63c      	b.n	91f4 <USB_Handler+0x84>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    957a:	21f0      	movs	r1, #240	; 0xf0
    957c:	683a      	ldr	r2, [r7, #0]
    957e:	0049      	lsls	r1, r1, #1
    9580:	5c53      	ldrb	r3, [r2, r1]
    9582:	069b      	lsls	r3, r3, #26
    9584:	0f5b      	lsrs	r3, r3, #29
    9586:	2b03      	cmp	r3, #3
    9588:	d196      	bne.n	94b8 <USB_Handler+0x348>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    958a:	5c53      	ldrb	r3, [r2, r1]
    958c:	079b      	lsls	r3, r3, #30
    958e:	0f9b      	lsrs	r3, r3, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    9590:	2b01      	cmp	r3, #1
    9592:	d191      	bne.n	94b8 <USB_Handler+0x348>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    9594:	39d1      	subs	r1, #209	; 0xd1
    9596:	33e4      	adds	r3, #228	; 0xe4
    9598:	39ff      	subs	r1, #255	; 0xff
    959a:	33ff      	adds	r3, #255	; 0xff
    959c:	54d1      	strb	r1, [r2, r3]
    959e:	e78b      	b.n	94b8 <USB_Handler+0x348>
				pipe_callback_para.pipe_num = pipe_int;
    95a0:	494e      	ldr	r1, [pc, #312]	; (96dc <USB_Handler+0x56c>)
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    95a2:	484f      	ldr	r0, [pc, #316]	; (96e0 <USB_Handler+0x570>)
				pipe_callback_para.pipe_num = pipe_int;
    95a4:	700e      	strb	r6, [r1, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    95a6:	683a      	ldr	r2, [r7, #0]
    95a8:	5c9b      	ldrb	r3, [r3, r2]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    95aa:	0172      	lsls	r2, r6, #5
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    95ac:	079b      	lsls	r3, r3, #30
    95ae:	0f9b      	lsrs	r3, r3, #30
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    95b0:	1882      	adds	r2, r0, r2
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    95b2:	2b01      	cmp	r3, #1
    95b4:	d100      	bne.n	95b8 <USB_Handler+0x448>
    95b6:	e109      	b.n	97cc <USB_Handler+0x65c>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    95b8:	6853      	ldr	r3, [r2, #4]
    95ba:	011b      	lsls	r3, r3, #4
    95bc:	0c9b      	lsrs	r3, r3, #18
    95be:	804b      	strh	r3, [r1, #2]
    95c0:	b298      	uxth	r0, r3
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    95c2:	6853      	ldr	r3, [r2, #4]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    95c4:	4682      	mov	sl, r0
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    95c6:	049b      	lsls	r3, r3, #18
    95c8:	0c9b      	lsrs	r3, r3, #18
    95ca:	808b      	strh	r3, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    95cc:	6853      	ldr	r3, [r2, #4]
    95ce:	4699      	mov	r9, r3
    95d0:	4648      	mov	r0, r9
    95d2:	4b44      	ldr	r3, [pc, #272]	; (96e4 <USB_Handler+0x574>)
    95d4:	4018      	ands	r0, r3
					if (0 == pipe_callback_para.transfered_size) {
    95d6:	4653      	mov	r3, sl
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    95d8:	6050      	str	r0, [r2, #4]
					if (0 == pipe_callback_para.transfered_size) {
    95da:	2b00      	cmp	r3, #0
    95dc:	d103      	bne.n	95e6 <USB_Handler+0x476>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    95de:	6853      	ldr	r3, [r2, #4]
    95e0:	049b      	lsls	r3, r3, #18
    95e2:	0c9b      	lsrs	r3, r3, #18
    95e4:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    95e6:	1cb3      	adds	r3, r6, #2
    95e8:	011b      	lsls	r3, r3, #4
    95ea:	18fb      	adds	r3, r7, r3
    95ec:	685b      	ldr	r3, [r3, #4]
    95ee:	0038      	movs	r0, r7
    95f0:	4798      	blx	r3
    95f2:	e662      	b.n	92ba <USB_Handler+0x14a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    95f4:	69c3      	ldr	r3, [r0, #28]
    95f6:	4798      	blx	r3
    95f8:	e7ab      	b.n	9552 <USB_Handler+0x3e2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    95fa:	6983      	ldr	r3, [r0, #24]
    95fc:	4798      	blx	r3
    95fe:	e79a      	b.n	9536 <USB_Handler+0x3c6>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    9600:	68c3      	ldr	r3, [r0, #12]
    9602:	4798      	blx	r3
    9604:	e78a      	b.n	951c <USB_Handler+0x3ac>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    9606:	6903      	ldr	r3, [r0, #16]
    9608:	4798      	blx	r3
    960a:	e77d      	b.n	9508 <USB_Handler+0x398>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    960c:	6943      	ldr	r3, [r0, #20]
    960e:	4798      	blx	r3
    9610:	e770      	b.n	94f4 <USB_Handler+0x384>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    9612:	6883      	ldr	r3, [r0, #8]
    9614:	4798      	blx	r3
    9616:	e762      	b.n	94de <USB_Handler+0x36e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    9618:	687b      	ldr	r3, [r7, #4]
    961a:	0038      	movs	r0, r7
    961c:	4798      	blx	r3
    961e:	e750      	b.n	94c2 <USB_Handler+0x352>
				pipe_callback_para.pipe_num = pipe_int;
    9620:	4a2e      	ldr	r2, [pc, #184]	; (96dc <USB_Handler+0x56c>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    9622:	4b2f      	ldr	r3, [pc, #188]	; (96e0 <USB_Handler+0x570>)
    9624:	0171      	lsls	r1, r6, #5
				pipe_callback_para.pipe_num = pipe_int;
    9626:	7016      	strb	r6, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    9628:	185b      	adds	r3, r3, r1
    962a:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    962c:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    962e:	011b      	lsls	r3, r3, #4
    9630:	0c9b      	lsrs	r3, r3, #18
    9632:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    9634:	0133      	lsls	r3, r6, #4
    9636:	18c3      	adds	r3, r0, r3
    9638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    963a:	4798      	blx	r3
    963c:	e68d      	b.n	935a <USB_Handler+0x1ea>
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    963e:	4b28      	ldr	r3, [pc, #160]	; (96e0 <USB_Handler+0x570>)
    9640:	0172      	lsls	r2, r6, #5
    9642:	189b      	adds	r3, r3, r2
    9644:	89da      	ldrh	r2, [r3, #14]
    9646:	231f      	movs	r3, #31
				pipe_callback_para.pipe_num = pipe_int;
    9648:	4924      	ldr	r1, [pc, #144]	; (96dc <USB_Handler+0x56c>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    964a:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    964c:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    964e:	0133      	lsls	r3, r6, #4
    9650:	18c3      	adds	r3, r0, r3
				pipe_callback_para.pipe_num = pipe_int;
    9652:	700e      	strb	r6, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    9654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9656:	4798      	blx	r3
    9658:	e669      	b.n	932e <USB_Handler+0x1be>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    965a:	464a      	mov	r2, r9
    965c:	5dd2      	ldrb	r2, [r2, r7]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    965e:	4820      	ldr	r0, [pc, #128]	; (96e0 <USB_Handler+0x570>)
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    9660:	0792      	lsls	r2, r2, #30
    9662:	0f92      	lsrs	r2, r2, #30
    9664:	4692      	mov	sl, r2
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    9666:	2a01      	cmp	r2, #1
    9668:	d100      	bne.n	966c <USB_Handler+0x4fc>
    966a:	e0f3      	b.n	9854 <USB_Handler+0x6e4>
    966c:	0172      	lsls	r2, r6, #5
    966e:	e636      	b.n	92de <USB_Handler+0x16e>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    9670:	5dcb      	ldrb	r3, [r1, r7]
    9672:	079b      	lsls	r3, r3, #30
    9674:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    9676:	2b01      	cmp	r3, #1
    9678:	d000      	beq.n	967c <USB_Handler+0x50c>
    967a:	e639      	b.n	92f0 <USB_Handler+0x180>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    967c:	2300      	movs	r3, #0
    967e:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    9680:	4663      	mov	r3, ip
    9682:	2204      	movs	r2, #4
    9684:	681b      	ldr	r3, [r3, #0]
    9686:	185b      	adds	r3, r3, r1
    9688:	71da      	strb	r2, [r3, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    968a:	4663      	mov	r3, ip
    968c:	681b      	ldr	r3, [r3, #0]
    968e:	1859      	adds	r1, r3, r1
    9690:	2310      	movs	r3, #16
    9692:	714b      	strb	r3, [r1, #5]
    9694:	e635      	b.n	9302 <USB_Handler+0x192>
    9696:	002a      	movs	r2, r5
    9698:	4645      	mov	r5, r8
    969a:	4690      	mov	r8, r2
    969c:	015a      	lsls	r2, r3, #5
    969e:	18ad      	adds	r5, r5, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    96a0:	2208      	movs	r2, #8
    96a2:	2040      	movs	r0, #64	; 0x40
    96a4:	32ff      	adds	r2, #255	; 0xff
    96a6:	5cac      	ldrb	r4, [r5, r2]
    96a8:	464f      	mov	r7, r9
    96aa:	4220      	tst	r0, r4
    96ac:	d100      	bne.n	96b0 <USB_Handler+0x540>
    96ae:	e09a      	b.n	97e6 <USB_Handler+0x676>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    96b0:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    96b2:	4640      	mov	r0, r8
    96b4:	3a88      	subs	r2, #136	; 0x88
    96b6:	3aff      	subs	r2, #255	; 0xff
    96b8:	4302      	orrs	r2, r0
    96ba:	480b      	ldr	r0, [pc, #44]	; (96e8 <USB_Handler+0x578>)
    96bc:	7182      	strb	r2, [r0, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    96be:	2260      	movs	r2, #96	; 0x60
    96c0:	420a      	tst	r2, r1
    96c2:	d100      	bne.n	96c6 <USB_Handler+0x556>
    96c4:	e596      	b.n	91f4 <USB_Handler+0x84>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    96c6:	011b      	lsls	r3, r3, #4
    96c8:	18fb      	adds	r3, r7, r3
    96ca:	33e0      	adds	r3, #224	; 0xe0
    96cc:	681b      	ldr	r3, [r3, #0]
    96ce:	4906      	ldr	r1, [pc, #24]	; (96e8 <USB_Handler+0x578>)
    96d0:	0038      	movs	r0, r7
    96d2:	4798      	blx	r3
    96d4:	e58e      	b.n	91f4 <USB_Handler+0x84>
    96d6:	46c0      	nop			; (mov r8, r8)
    96d8:	20000c90 	.word	0x20000c90
    96dc:	20000c94 	.word	0x20000c94
    96e0:	2000113c 	.word	0x2000113c
    96e4:	f0003fff 	.word	0xf0003fff
    96e8:	20000c88 	.word	0x20000c88
    96ec:	464f      	mov	r7, r9
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    96ee:	9a00      	ldr	r2, [sp, #0]
    96f0:	7010      	strb	r0, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    96f2:	18fa      	adds	r2, r7, r3
    96f4:	3261      	adds	r2, #97	; 0x61
    96f6:	32ff      	adds	r2, #255	; 0xff
    96f8:	7812      	ldrb	r2, [r2, #0]
    96fa:	4210      	tst	r0, r2
    96fc:	d100      	bne.n	9700 <USB_Handler+0x590>
    96fe:	e579      	b.n	91f4 <USB_Handler+0x84>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    9700:	4a6e      	ldr	r2, [pc, #440]	; (98bc <USB_Handler+0x74c>)
    9702:	0159      	lsls	r1, r3, #5
    9704:	1852      	adds	r2, r2, r1
    9706:	6852      	ldr	r2, [r2, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    9708:	011b      	lsls	r3, r3, #4
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    970a:	496d      	ldr	r1, [pc, #436]	; (98c0 <USB_Handler+0x750>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    970c:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    970e:	0492      	lsls	r2, r2, #18
    9710:	0c92      	lsrs	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    9712:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    9714:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    9716:	681b      	ldr	r3, [r3, #0]
    9718:	4648      	mov	r0, r9
    971a:	4798      	blx	r3
    971c:	e56a      	b.n	91f4 <USB_Handler+0x84>
    971e:	002a      	movs	r2, r5
    9720:	4645      	mov	r5, r8
    9722:	4690      	mov	r8, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9724:	2208      	movs	r2, #8
    9726:	2402      	movs	r4, #2
    9728:	0158      	lsls	r0, r3, #5
    972a:	182d      	adds	r5, r5, r0
    972c:	32ff      	adds	r2, #255	; 0xff
    972e:	5cae      	ldrb	r6, [r5, r2]
    9730:	464f      	mov	r7, r9
    9732:	4234      	tst	r4, r6
    9734:	d061      	beq.n	97fa <USB_Handler+0x68a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    9736:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    9738:	4645      	mov	r5, r8
    973a:	3a88      	subs	r2, #136	; 0x88
    973c:	4c60      	ldr	r4, [pc, #384]	; (98c0 <USB_Handler+0x750>)
    973e:	3aff      	subs	r2, #255	; 0xff
    9740:	432a      	orrs	r2, r5
    9742:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    9744:	4a5d      	ldr	r2, [pc, #372]	; (98bc <USB_Handler+0x74c>)
    9746:	1810      	adds	r0, r2, r0
    9748:	6942      	ldr	r2, [r0, #20]
    974a:	0492      	lsls	r2, r2, #18
    974c:	0c92      	lsrs	r2, r2, #18
    974e:	8062      	strh	r2, [r4, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    9750:	078a      	lsls	r2, r1, #30
    9752:	d100      	bne.n	9756 <USB_Handler+0x5e6>
    9754:	e54e      	b.n	91f4 <USB_Handler+0x84>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    9756:	330d      	adds	r3, #13
    9758:	011b      	lsls	r3, r3, #4
    975a:	18fb      	adds	r3, r7, r3
    975c:	685b      	ldr	r3, [r3, #4]
    975e:	4958      	ldr	r1, [pc, #352]	; (98c0 <USB_Handler+0x750>)
    9760:	0038      	movs	r0, r7
    9762:	4798      	blx	r3
    9764:	e546      	b.n	91f4 <USB_Handler+0x84>
    9766:	003a      	movs	r2, r7
    9768:	0028      	movs	r0, r5
    976a:	464f      	mov	r7, r9
    976c:	4645      	mov	r5, r8
    976e:	4691      	mov	r9, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9770:	2208      	movs	r2, #8
    9772:	2408      	movs	r4, #8
    9774:	4680      	mov	r8, r0
    9776:	0158      	lsls	r0, r3, #5
    9778:	182d      	adds	r5, r5, r0
    977a:	32ff      	adds	r2, #255	; 0xff
    977c:	5cae      	ldrb	r6, [r5, r2]
    977e:	4234      	tst	r4, r6
    9780:	d04e      	beq.n	9820 <USB_Handler+0x6b0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    9782:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    9784:	4a4d      	ldr	r2, [pc, #308]	; (98bc <USB_Handler+0x74c>)
    9786:	1810      	adds	r0, r2, r0
    9788:	2202      	movs	r2, #2
    978a:	7e84      	ldrb	r4, [r0, #26]
    978c:	4222      	tst	r2, r4
    978e:	d002      	beq.n	9796 <USB_Handler+0x626>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    9790:	7e84      	ldrb	r4, [r0, #26]
    9792:	4394      	bics	r4, r2
    9794:	7684      	strb	r4, [r0, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    9796:	2280      	movs	r2, #128	; 0x80
    9798:	4640      	mov	r0, r8
    979a:	4252      	negs	r2, r2
    979c:	4302      	orrs	r2, r0
    979e:	4848      	ldr	r0, [pc, #288]	; (98c0 <USB_Handler+0x750>)
    97a0:	7182      	strb	r2, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    97a2:	6838      	ldr	r0, [r7, #0]
    97a4:	464a      	mov	r2, r9
    97a6:	4684      	mov	ip, r0
    97a8:	0152      	lsls	r2, r2, #5
    97aa:	4462      	add	r2, ip
    97ac:	79d2      	ldrb	r2, [r2, #7]
    97ae:	0792      	lsls	r2, r2, #30
    97b0:	d500      	bpl.n	97b4 <USB_Handler+0x644>
    97b2:	e51f      	b.n	91f4 <USB_Handler+0x84>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    97b4:	220c      	movs	r2, #12
    97b6:	420a      	tst	r2, r1
    97b8:	d100      	bne.n	97bc <USB_Handler+0x64c>
    97ba:	e51b      	b.n	91f4 <USB_Handler+0x84>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    97bc:	011b      	lsls	r3, r3, #4
    97be:	18fb      	adds	r3, r7, r3
    97c0:	33d8      	adds	r3, #216	; 0xd8
    97c2:	681b      	ldr	r3, [r3, #0]
    97c4:	493e      	ldr	r1, [pc, #248]	; (98c0 <USB_Handler+0x750>)
    97c6:	0038      	movs	r0, r7
    97c8:	4798      	blx	r3
    97ca:	e513      	b.n	91f4 <USB_Handler+0x84>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    97cc:	6853      	ldr	r3, [r2, #4]
    97ce:	049b      	lsls	r3, r3, #18
    97d0:	0c9b      	lsrs	r3, r3, #18
    97d2:	804b      	strh	r3, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    97d4:	6853      	ldr	r3, [r2, #4]
    97d6:	011b      	lsls	r3, r3, #4
    97d8:	0c9b      	lsrs	r3, r3, #18
    97da:	808b      	strh	r3, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    97dc:	6853      	ldr	r3, [r2, #4]
    97de:	0b9b      	lsrs	r3, r3, #14
    97e0:	039b      	lsls	r3, r3, #14
    97e2:	6053      	str	r3, [r2, #4]
    97e4:	e6ff      	b.n	95e6 <USB_Handler+0x476>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    97e6:	2020      	movs	r0, #32
    97e8:	5cac      	ldrb	r4, [r5, r2]
    97ea:	4220      	tst	r0, r4
    97ec:	d100      	bne.n	97f0 <USB_Handler+0x680>
    97ee:	e766      	b.n	96be <USB_Handler+0x54e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    97f0:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    97f2:	4640      	mov	r0, r8
    97f4:	4a32      	ldr	r2, [pc, #200]	; (98c0 <USB_Handler+0x750>)
    97f6:	7190      	strb	r0, [r2, #6]
    97f8:	e761      	b.n	96be <USB_Handler+0x54e>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    97fa:	5cac      	ldrb	r4, [r5, r2]
    97fc:	07e4      	lsls	r4, r4, #31
    97fe:	d5a7      	bpl.n	9750 <USB_Handler+0x5e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    9800:	4664      	mov	r4, ip
    9802:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    9804:	4642      	mov	r2, r8
    9806:	4c2e      	ldr	r4, [pc, #184]	; (98c0 <USB_Handler+0x750>)
    9808:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    980a:	4a2c      	ldr	r2, [pc, #176]	; (98bc <USB_Handler+0x74c>)
    980c:	1810      	adds	r0, r2, r0
    980e:	6842      	ldr	r2, [r0, #4]
    9810:	0492      	lsls	r2, r2, #18
    9812:	0c92      	lsrs	r2, r2, #18
    9814:	8022      	strh	r2, [r4, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    9816:	6842      	ldr	r2, [r0, #4]
    9818:	0112      	lsls	r2, r2, #4
    981a:	0c92      	lsrs	r2, r2, #18
    981c:	80a2      	strh	r2, [r4, #4]
    981e:	e797      	b.n	9750 <USB_Handler+0x5e0>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9820:	2404      	movs	r4, #4
    9822:	5cae      	ldrb	r6, [r5, r2]
    9824:	4234      	tst	r4, r6
    9826:	d0c5      	beq.n	97b4 <USB_Handler+0x644>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    9828:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    982a:	4a24      	ldr	r2, [pc, #144]	; (98bc <USB_Handler+0x74c>)
    982c:	3c02      	subs	r4, #2
    982e:	1810      	adds	r0, r2, r0
    9830:	7a82      	ldrb	r2, [r0, #10]
    9832:	4214      	tst	r4, r2
    9834:	d002      	beq.n	983c <USB_Handler+0x6cc>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    9836:	7a82      	ldrb	r2, [r0, #10]
    9838:	43a2      	bics	r2, r4
    983a:	7282      	strb	r2, [r0, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    983c:	4640      	mov	r0, r8
    983e:	4a20      	ldr	r2, [pc, #128]	; (98c0 <USB_Handler+0x750>)
    9840:	7190      	strb	r0, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9842:	6838      	ldr	r0, [r7, #0]
    9844:	464a      	mov	r2, r9
    9846:	4684      	mov	ip, r0
    9848:	0152      	lsls	r2, r2, #5
    984a:	4462      	add	r2, ip
    984c:	79d2      	ldrb	r2, [r2, #7]
    984e:	07d2      	lsls	r2, r2, #31
    9850:	d5b0      	bpl.n	97b4 <USB_Handler+0x644>
    9852:	e4cf      	b.n	91f4 <USB_Handler+0x84>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    9854:	0172      	lsls	r2, r6, #5
    9856:	1881      	adds	r1, r0, r2
    9858:	000b      	movs	r3, r1
    985a:	2108      	movs	r1, #8
    985c:	469b      	mov	fp, r3
    985e:	9301      	str	r3, [sp, #4]
    9860:	4459      	add	r1, fp
    9862:	7889      	ldrb	r1, [r1, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    9864:	07c9      	lsls	r1, r1, #31
    9866:	d400      	bmi.n	986a <USB_Handler+0x6fa>
    9868:	e539      	b.n	92de <USB_Handler+0x16e>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    986a:	4652      	mov	r2, sl
    986c:	40b2      	lsls	r2, r6
    986e:	4815      	ldr	r0, [pc, #84]	; (98c4 <USB_Handler+0x754>)
    9870:	6801      	ldr	r1, [r0, #0]
    9872:	4391      	bics	r1, r2
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    9874:	2200      	movs	r2, #0
    9876:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    9878:	4663      	mov	r3, ip
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    987a:	6001      	str	r1, [r0, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    987c:	681b      	ldr	r3, [r3, #0]
    987e:	444b      	add	r3, r9
    9880:	001a      	movs	r2, r3
    9882:	2304      	movs	r3, #4
    9884:	71d3      	strb	r3, [r2, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    9886:	4663      	mov	r3, ip
    9888:	199a      	adds	r2, r3, r6
    988a:	32ae      	adds	r2, #174	; 0xae
    988c:	7812      	ldrb	r2, [r2, #0]
    988e:	9b00      	ldr	r3, [sp, #0]
    9890:	4213      	tst	r3, r2
    9892:	d100      	bne.n	9896 <USB_Handler+0x726>
    9894:	e535      	b.n	9302 <USB_Handler+0x192>
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    9896:	2310      	movs	r3, #16
					pipe_callback_para.pipe_num = pipe_int;
    9898:	490b      	ldr	r1, [pc, #44]	; (98c8 <USB_Handler+0x758>)
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    989a:	4660      	mov	r0, ip
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    989c:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    989e:	0133      	lsls	r3, r6, #4
    98a0:	4463      	add	r3, ip
					pipe_callback_para.pipe_num = pipe_int;
    98a2:	700e      	strb	r6, [r1, #0]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    98a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    98a6:	4798      	blx	r3
    98a8:	e52b      	b.n	9302 <USB_Handler+0x192>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    98aa:	465b      	mov	r3, fp
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    98ac:	4652      	mov	r2, sl
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    98ae:	891b      	ldrh	r3, [r3, #8]
					device_callback_lpm_wakeup_enable =
    98b0:	4906      	ldr	r1, [pc, #24]	; (98cc <USB_Handler+0x75c>)
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    98b2:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    98b4:	4013      	ands	r3, r2
    98b6:	600b      	str	r3, [r1, #0]
    98b8:	e492      	b.n	91e0 <USB_Handler+0x70>
    98ba:	46c0      	nop			; (mov r8, r8)
    98bc:	2000113c 	.word	0x2000113c
    98c0:	20000c88 	.word	0x20000c88
    98c4:	20000c90 	.word	0x20000c90
    98c8:	20000c94 	.word	0x20000c94
    98cc:	20000c84 	.word	0x20000c84

000098d0 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    98d0:	2300      	movs	r3, #0
	module_config->run_in_standby = 1;
	module_config->source_generator = GCLK_GENERATOR_3;
    98d2:	2203      	movs	r2, #3
	module_config->select_host_mode = 0;
    98d4:	7003      	strb	r3, [r0, #0]
	module_config->run_in_standby = 1;
    98d6:	3301      	adds	r3, #1
    98d8:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_3;
    98da:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    98dc:	70c3      	strb	r3, [r0, #3]
}
    98de:	4770      	bx	lr

000098e0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    98e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAML22
	host_pipe_job_busy_status = 0;
    98e2:	2300      	movs	r3, #0
{
    98e4:	46ce      	mov	lr, r9
    98e6:	4647      	mov	r7, r8
    98e8:	0004      	movs	r4, r0
    98ea:	0016      	movs	r6, r2
	host_pipe_job_busy_status = 0;
    98ec:	4a90      	ldr	r2, [pc, #576]	; (9b30 <usb_init+0x250>)
{
    98ee:	b580      	push	{r7, lr}
    98f0:	000d      	movs	r5, r1
	host_pipe_job_busy_status = 0;
    98f2:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    98f4:	6021      	str	r1, [r4, #0]
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    98f6:	2101      	movs	r1, #1
	_usb_instances = module_inst;
    98f8:	4a8e      	ldr	r2, [pc, #568]	; (9b34 <usb_init+0x254>)
{
    98fa:	b083      	sub	sp, #12
	_usb_instances = module_inst;
    98fc:	6010      	str	r0, [r2, #0]
    98fe:	488e      	ldr	r0, [pc, #568]	; (9b38 <usb_init+0x258>)
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9900:	af01      	add	r7, sp, #4
    9902:	6982      	ldr	r2, [r0, #24]
    9904:	430a      	orrs	r2, r1
    9906:	6182      	str	r2, [r0, #24]
    9908:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    990a:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    990c:	3306      	adds	r3, #6
    990e:	4699      	mov	r9, r3
    9910:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    9912:	4b8a      	ldr	r3, [pc, #552]	; (9b3c <usb_init+0x25c>)
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9914:	70b9      	strb	r1, [r7, #2]
    9916:	2018      	movs	r0, #24
    9918:	0039      	movs	r1, r7
    991a:	4698      	mov	r8, r3
    991c:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    991e:	464b      	mov	r3, r9
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    9920:	0039      	movs	r1, r7
    9922:	2019      	movs	r0, #25
	pin_config.mux_position = MUX_PA25G_USB_DP;
    9924:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    9926:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    9928:	466a      	mov	r2, sp
    992a:	78b3      	ldrb	r3, [r6, #2]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    992c:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = module_config->source_generator;
    992e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    9930:	2004      	movs	r0, #4
    9932:	4b83      	ldr	r3, [pc, #524]	; (9b40 <usb_init+0x260>)
    9934:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    9936:	4b83      	ldr	r3, [pc, #524]	; (9b44 <usb_init+0x264>)
    9938:	2004      	movs	r0, #4
    993a:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    993c:	2201      	movs	r2, #1
    993e:	782b      	ldrb	r3, [r5, #0]
    9940:	4313      	orrs	r3, r2
    9942:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    9944:	78ab      	ldrb	r3, [r5, #2]
    9946:	07db      	lsls	r3, r3, #31
    9948:	d4fc      	bmi.n	9944 <usb_init+0x64>
		/* Sync wait */
	}

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    994a:	4b7f      	ldr	r3, [pc, #508]	; (9b48 <usb_init+0x268>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    994c:	681b      	ldr	r3, [r3, #0]
    994e:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    9950:	43da      	mvns	r2, r3
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    9952:	06d2      	lsls	r2, r2, #27
    9954:	d100      	bne.n	9958 <usb_init+0x78>
    9956:	e0e9      	b.n	9b2c <usb_init+0x24c>
    9958:	211f      	movs	r1, #31
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    995a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    995c:	487b      	ldr	r0, [pc, #492]	; (9b4c <usb_init+0x26c>)
    995e:	400b      	ands	r3, r1
    9960:	019b      	lsls	r3, r3, #6
    9962:	4002      	ands	r2, r0
    9964:	4313      	orrs	r3, r2
    9966:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    9968:	4b77      	ldr	r3, [pc, #476]	; (9b48 <usb_init+0x268>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    996a:	681b      	ldr	r3, [r3, #0]
    996c:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    996e:	4019      	ands	r1, r3
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    9970:	291f      	cmp	r1, #31
    9972:	d100      	bne.n	9976 <usb_init+0x96>
    9974:	e0d8      	b.n	9b28 <usb_init+0x248>
    9976:	211f      	movs	r1, #31
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    9978:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    997a:	400b      	ands	r3, r1
    997c:	438a      	bics	r2, r1
    997e:	4313      	orrs	r3, r2
    9980:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    9982:	4b71      	ldr	r3, [pc, #452]	; (9b48 <usb_init+0x268>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    9984:	6819      	ldr	r1, [r3, #0]
    9986:	0dc9      	lsrs	r1, r1, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    9988:	43cb      	mvns	r3, r1
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    998a:	075b      	lsls	r3, r3, #29
    998c:	d100      	bne.n	9990 <usb_init+0xb0>
    998e:	e0c9      	b.n	9b24 <usb_init+0x244>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    9990:	2207      	movs	r2, #7
    9992:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    9994:	400a      	ands	r2, r1
    9996:	496e      	ldr	r1, [pc, #440]	; (9b50 <usb_init+0x270>)
    9998:	0312      	lsls	r2, r2, #12
    999a:	400b      	ands	r3, r1
    999c:	4313      	orrs	r3, r2
    999e:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    99a0:	237f      	movs	r3, #127	; 0x7f
    99a2:	7829      	ldrb	r1, [r5, #0]
    99a4:	7832      	ldrb	r2, [r6, #0]
    99a6:	400b      	ands	r3, r1
    99a8:	01d2      	lsls	r2, r2, #7
    99aa:	4313      	orrs	r3, r2
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    99ac:	2201      	movs	r2, #1
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    99ae:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    99b0:	7871      	ldrb	r1, [r6, #1]
    99b2:	782b      	ldrb	r3, [r5, #0]
    99b4:	400a      	ands	r2, r1
    99b6:	2104      	movs	r1, #4
    99b8:	0092      	lsls	r2, r2, #2
    99ba:	438b      	bics	r3, r1
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    99bc:	4865      	ldr	r0, [pc, #404]	; (9b54 <usb_init+0x274>)
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    99be:	4313      	orrs	r3, r2
    99c0:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    99c2:	6268      	str	r0, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    99c4:	78f3      	ldrb	r3, [r6, #3]
    99c6:	2b01      	cmp	r3, #1
    99c8:	d100      	bne.n	99cc <usb_init+0xec>
    99ca:	e0a5      	b.n	9b18 <usb_init+0x238>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    99cc:	2b00      	cmp	r3, #0
    99ce:	d106      	bne.n	99de <usb_init+0xfe>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    99d0:	210c      	movs	r1, #12
    99d2:	6822      	ldr	r2, [r4, #0]
    99d4:	8913      	ldrh	r3, [r2, #8]
    99d6:	438b      	bics	r3, r1
    99d8:	2104      	movs	r1, #4
    99da:	430b      	orrs	r3, r1
    99dc:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    99de:	2780      	movs	r7, #128	; 0x80
    99e0:	007f      	lsls	r7, r7, #1
    99e2:	4e5d      	ldr	r6, [pc, #372]	; (9b58 <usb_init+0x278>)
    99e4:	003a      	movs	r2, r7
    99e6:	2100      	movs	r1, #0
    99e8:	47b0      	blx	r6
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    99ea:	1d20      	adds	r0, r4, #4
    99ec:	2220      	movs	r2, #32
    99ee:	2100      	movs	r1, #0
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    99f0:	2500      	movs	r5, #0
    99f2:	47b0      	blx	r6
    99f4:	2380      	movs	r3, #128	; 0x80
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    99f6:	0020      	movs	r0, r4
			module_inst->host_pipe_callback[i][j] = NULL;
    99f8:	6265      	str	r5, [r4, #36]	; 0x24
    99fa:	62a5      	str	r5, [r4, #40]	; 0x28
    99fc:	62e5      	str	r5, [r4, #44]	; 0x2c
    99fe:	6325      	str	r5, [r4, #48]	; 0x30
    9a00:	6365      	str	r5, [r4, #52]	; 0x34
    9a02:	63a5      	str	r5, [r4, #56]	; 0x38
    9a04:	63e5      	str	r5, [r4, #60]	; 0x3c
    9a06:	6425      	str	r5, [r4, #64]	; 0x40
    9a08:	6465      	str	r5, [r4, #68]	; 0x44
    9a0a:	64a5      	str	r5, [r4, #72]	; 0x48
    9a0c:	64e5      	str	r5, [r4, #76]	; 0x4c
    9a0e:	6525      	str	r5, [r4, #80]	; 0x50
    9a10:	6565      	str	r5, [r4, #84]	; 0x54
    9a12:	65a5      	str	r5, [r4, #88]	; 0x58
    9a14:	65e5      	str	r5, [r4, #92]	; 0x5c
    9a16:	6625      	str	r5, [r4, #96]	; 0x60
    9a18:	6665      	str	r5, [r4, #100]	; 0x64
    9a1a:	66a5      	str	r5, [r4, #104]	; 0x68
    9a1c:	66e5      	str	r5, [r4, #108]	; 0x6c
    9a1e:	6725      	str	r5, [r4, #112]	; 0x70
    9a20:	6765      	str	r5, [r4, #116]	; 0x74
    9a22:	67a5      	str	r5, [r4, #120]	; 0x78
    9a24:	67e5      	str	r5, [r4, #124]	; 0x7c
    9a26:	50e5      	str	r5, [r4, r3]
    9a28:	3304      	adds	r3, #4
    9a2a:	50e5      	str	r5, [r4, r3]
    9a2c:	3304      	adds	r3, #4
    9a2e:	50e5      	str	r5, [r4, r3]
    9a30:	3304      	adds	r3, #4
    9a32:	50e5      	str	r5, [r4, r3]
    9a34:	3304      	adds	r3, #4
    9a36:	50e5      	str	r5, [r4, r3]
    9a38:	3304      	adds	r3, #4
    9a3a:	50e5      	str	r5, [r4, r3]
    9a3c:	3304      	adds	r3, #4
    9a3e:	50e5      	str	r5, [r4, r3]
    9a40:	3304      	adds	r3, #4
    9a42:	50e5      	str	r5, [r4, r3]
    9a44:	3304      	adds	r3, #4
    9a46:	50e5      	str	r5, [r4, r3]
	module_inst->host_registered_callback_mask = 0;
    9a48:	3304      	adds	r3, #4
    9a4a:	54e5      	strb	r5, [r4, r3]
	module_inst->host_enabled_callback_mask = 0;
    9a4c:	3301      	adds	r3, #1
    9a4e:	54e5      	strb	r5, [r4, r3]
    9a50:	2208      	movs	r2, #8
    9a52:	2100      	movs	r1, #0
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    9a54:	30a6      	adds	r0, #166	; 0xa6
    9a56:	47b0      	blx	r6
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    9a58:	0020      	movs	r0, r4
    9a5a:	2208      	movs	r2, #8
    9a5c:	2100      	movs	r1, #0
    9a5e:	30ae      	adds	r0, #174	; 0xae
    9a60:	47b0      	blx	r6
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    9a62:	0020      	movs	r0, r4
    9a64:	221c      	movs	r2, #28
    9a66:	2100      	movs	r1, #0
    9a68:	30b8      	adds	r0, #184	; 0xb8
    9a6a:	47b0      	blx	r6
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    9a6c:	23d4      	movs	r3, #212	; 0xd4
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    9a6e:	0020      	movs	r0, r4
			module_inst->device_endpoint_callback[i][j] = NULL;
    9a70:	50e5      	str	r5, [r4, r3]
    9a72:	3304      	adds	r3, #4
    9a74:	50e5      	str	r5, [r4, r3]
    9a76:	3304      	adds	r3, #4
    9a78:	50e5      	str	r5, [r4, r3]
    9a7a:	3304      	adds	r3, #4
    9a7c:	50e5      	str	r5, [r4, r3]
    9a7e:	3304      	adds	r3, #4
    9a80:	50e5      	str	r5, [r4, r3]
    9a82:	3304      	adds	r3, #4
    9a84:	50e5      	str	r5, [r4, r3]
    9a86:	3304      	adds	r3, #4
    9a88:	50e5      	str	r5, [r4, r3]
    9a8a:	3304      	adds	r3, #4
    9a8c:	50e5      	str	r5, [r4, r3]
    9a8e:	3304      	adds	r3, #4
    9a90:	50e5      	str	r5, [r4, r3]
    9a92:	3304      	adds	r3, #4
    9a94:	50e5      	str	r5, [r4, r3]
    9a96:	3304      	adds	r3, #4
    9a98:	50e5      	str	r5, [r4, r3]
    9a9a:	3308      	adds	r3, #8
    9a9c:	51e5      	str	r5, [r4, r7]
    9a9e:	50e5      	str	r5, [r4, r3]
    9aa0:	3304      	adds	r3, #4
    9aa2:	50e5      	str	r5, [r4, r3]
    9aa4:	3304      	adds	r3, #4
    9aa6:	50e5      	str	r5, [r4, r3]
    9aa8:	3304      	adds	r3, #4
    9aaa:	50e5      	str	r5, [r4, r3]
    9aac:	3304      	adds	r3, #4
    9aae:	50e5      	str	r5, [r4, r3]
    9ab0:	3304      	adds	r3, #4
    9ab2:	50e5      	str	r5, [r4, r3]
    9ab4:	3304      	adds	r3, #4
    9ab6:	50e5      	str	r5, [r4, r3]
    9ab8:	3304      	adds	r3, #4
    9aba:	50e5      	str	r5, [r4, r3]
    9abc:	3304      	adds	r3, #4
    9abe:	50e5      	str	r5, [r4, r3]
    9ac0:	3304      	adds	r3, #4
    9ac2:	50e5      	str	r5, [r4, r3]
    9ac4:	3304      	adds	r3, #4
    9ac6:	50e5      	str	r5, [r4, r3]
    9ac8:	3304      	adds	r3, #4
    9aca:	50e5      	str	r5, [r4, r3]
    9acc:	3304      	adds	r3, #4
    9ace:	50e5      	str	r5, [r4, r3]
    9ad0:	3304      	adds	r3, #4
    9ad2:	50e5      	str	r5, [r4, r3]
    9ad4:	3304      	adds	r3, #4
    9ad6:	50e5      	str	r5, [r4, r3]
    9ad8:	3304      	adds	r3, #4
    9ada:	50e5      	str	r5, [r4, r3]
    9adc:	3304      	adds	r3, #4
    9ade:	50e5      	str	r5, [r4, r3]
    9ae0:	3304      	adds	r3, #4
    9ae2:	50e5      	str	r5, [r4, r3]
    9ae4:	3304      	adds	r3, #4
    9ae6:	50e5      	str	r5, [r4, r3]
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    9ae8:	3059      	adds	r0, #89	; 0x59
			module_inst->device_endpoint_callback[i][j] = NULL;
    9aea:	3304      	adds	r3, #4
    9aec:	50e5      	str	r5, [r4, r3]
    9aee:	2208      	movs	r2, #8
	module_inst->device_registered_callback_mask = 0;
    9af0:	3304      	adds	r3, #4
    9af2:	2100      	movs	r1, #0
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    9af4:	30ff      	adds	r0, #255	; 0xff
	module_inst->device_registered_callback_mask = 0;
    9af6:	50e5      	str	r5, [r4, r3]
    9af8:	47b0      	blx	r6
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    9afa:	0020      	movs	r0, r4
    9afc:	3061      	adds	r0, #97	; 0x61
    9afe:	2208      	movs	r2, #8
    9b00:	2100      	movs	r1, #0
    9b02:	30ff      	adds	r0, #255	; 0xff
    9b04:	47b0      	blx	r6
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9b06:	2240      	movs	r2, #64	; 0x40

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    9b08:	2000      	movs	r0, #0
    9b0a:	4b14      	ldr	r3, [pc, #80]	; (9b5c <usb_init+0x27c>)
    9b0c:	601a      	str	r2, [r3, #0]
    9b0e:	b003      	add	sp, #12
    9b10:	bc0c      	pop	{r2, r3}
    9b12:	4690      	mov	r8, r2
    9b14:	4699      	mov	r9, r3
    9b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    9b18:	6822      	ldr	r2, [r4, #0]
    9b1a:	3108      	adds	r1, #8
    9b1c:	8913      	ldrh	r3, [r2, #8]
    9b1e:	438b      	bics	r3, r1
    9b20:	8113      	strh	r3, [r2, #8]
    9b22:	e75c      	b.n	99de <usb_init+0xfe>
	if (pad_trim == 0x7) {
    9b24:	2103      	movs	r1, #3
    9b26:	e733      	b.n	9990 <usb_init+0xb0>
	if (pad_transp == 0x1F) {
    9b28:	231d      	movs	r3, #29
    9b2a:	e724      	b.n	9976 <usb_init+0x96>
	if (pad_transn == 0x1F) {
    9b2c:	2305      	movs	r3, #5
    9b2e:	e713      	b.n	9958 <usb_init+0x78>
    9b30:	20000c90 	.word	0x20000c90
    9b34:	20000c80 	.word	0x20000c80
    9b38:	40000400 	.word	0x40000400
    9b3c:	0001fd11 	.word	0x0001fd11
    9b40:	0001fc15 	.word	0x0001fc15
    9b44:	0001fc55 	.word	0x0001fc55
    9b48:	0080601c 	.word	0x0080601c
    9b4c:	fffff83f 	.word	0xfffff83f
    9b50:	ffff8fff 	.word	0xffff8fff
    9b54:	2000113c 	.word	0x2000113c
    9b58:	00028a1d 	.word	0x00028a1d
    9b5c:	e000e100 	.word	0xe000e100

00009b60 <wdt_set_config>:
			MCLK->APBAMASK.reg |= mask;
    9b60:	2180      	movs	r1, #128	; 0x80
 * \retval STATUS_ERR_IO  If the Watchdog module is locked to be always on
 */
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    9b62:	b510      	push	{r4, lr}
    9b64:	4a29      	ldr	r2, [pc, #164]	; (9c0c <wdt_set_config+0xac>)
    9b66:	6953      	ldr	r3, [r2, #20]
    9b68:	430b      	orrs	r3, r1
static inline bool wdt_is_locked(void)
{
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
    9b6a:	4929      	ldr	r1, [pc, #164]	; (9c10 <wdt_set_config+0xb0>)
    9b6c:	6153      	str	r3, [r2, #20]
    9b6e:	780b      	ldrb	r3, [r1, #0]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
		return STATUS_ERR_IO;
    9b70:	2210      	movs	r2, #16
	if (wdt_is_locked()) {
    9b72:	b25b      	sxtb	r3, r3
    9b74:	2b00      	cmp	r3, #0
    9b76:	db03      	blt.n	9b80 <wdt_set_config+0x20>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    9b78:	7883      	ldrb	r3, [r0, #2]
		return STATUS_ERR_INVALID_ARG;
    9b7a:	3207      	adds	r2, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d101      	bne.n	9b84 <wdt_set_config+0x24>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
    9b80:	0010      	movs	r0, r2
    9b82:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
    9b84:	78c4      	ldrb	r4, [r0, #3]
    9b86:	429c      	cmp	r4, r3
    9b88:	d8fa      	bhi.n	9b80 <wdt_set_config+0x20>
    9b8a:	7904      	ldrb	r4, [r0, #4]
    9b8c:	429c      	cmp	r4, r3
    9b8e:	d8f7      	bhi.n	9b80 <wdt_set_config+0x20>
	WDT_module->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    9b90:	780b      	ldrb	r3, [r1, #0]
    9b92:	3a15      	subs	r2, #21
    9b94:	4393      	bics	r3, r2
    9b96:	700b      	strb	r3, [r1, #0]
	if (WDT_module->SYNCBUSY.reg) {
    9b98:	688b      	ldr	r3, [r1, #8]
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	d1fc      	bne.n	9b98 <wdt_set_config+0x38>
	if(config->enable == false) {
    9b9e:	7843      	ldrb	r3, [r0, #1]
    9ba0:	2b00      	cmp	r3, #0
    9ba2:	d101      	bne.n	9ba8 <wdt_set_config+0x48>
		return STATUS_OK;
    9ba4:	2200      	movs	r2, #0
    9ba6:	e7eb      	b.n	9b80 <wdt_set_config+0x20>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    9ba8:	7883      	ldrb	r3, [r0, #2]
	if (config->window_period != WDT_PERIOD_NONE) {
    9baa:	78c2      	ldrb	r2, [r0, #3]
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    9bac:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
    9bae:	2a00      	cmp	r2, #0
    9bb0:	d026      	beq.n	9c00 <wdt_set_config+0xa0>
		WDT_module->CTRLA.reg |= WDT_CTRLA_WEN;
    9bb2:	2204      	movs	r2, #4
    9bb4:	780c      	ldrb	r4, [r1, #0]
    9bb6:	4322      	orrs	r2, r4
    9bb8:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    9bba:	78c2      	ldrb	r2, [r0, #3]
    9bbc:	3a01      	subs	r2, #1
    9bbe:	0112      	lsls	r2, r2, #4
    9bc0:	4313      	orrs	r3, r2
    9bc2:	4a13      	ldr	r2, [pc, #76]	; (9c10 <wdt_set_config+0xb0>)
    9bc4:	6891      	ldr	r1, [r2, #8]
    9bc6:	2900      	cmp	r1, #0
    9bc8:	d1fc      	bne.n	9bc4 <wdt_set_config+0x64>
	WDT_module->CONFIG.reg = new_config;
    9bca:	b2db      	uxtb	r3, r3
    9bcc:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    9bce:	7903      	ldrb	r3, [r0, #4]
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d002      	beq.n	9bda <wdt_set_config+0x7a>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    9bd4:	3b01      	subs	r3, #1
    9bd6:	b2db      	uxtb	r3, r3
    9bd8:	7093      	strb	r3, [r2, #2]
	if (config->always_on) {
    9bda:	7803      	ldrb	r3, [r0, #0]
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
    9bdc:	4a0c      	ldr	r2, [pc, #48]	; (9c10 <wdt_set_config+0xb0>)
	if (config->always_on) {
    9bde:	2b00      	cmp	r3, #0
    9be0:	d009      	beq.n	9bf6 <wdt_set_config+0x96>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
    9be2:	2180      	movs	r1, #128	; 0x80
    9be4:	7813      	ldrb	r3, [r2, #0]
    9be6:	430b      	orrs	r3, r1
    9be8:	7013      	strb	r3, [r2, #0]
    9bea:	4b09      	ldr	r3, [pc, #36]	; (9c10 <wdt_set_config+0xb0>)
    9bec:	689a      	ldr	r2, [r3, #8]
    9bee:	2a00      	cmp	r2, #0
    9bf0:	d1fc      	bne.n	9bec <wdt_set_config+0x8c>
		return STATUS_OK;
    9bf2:	2200      	movs	r2, #0
    9bf4:	e7c4      	b.n	9b80 <wdt_set_config+0x20>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ENABLE;
    9bf6:	2302      	movs	r3, #2
    9bf8:	7811      	ldrb	r1, [r2, #0]
    9bfa:	430b      	orrs	r3, r1
    9bfc:	7013      	strb	r3, [r2, #0]
    9bfe:	e7f4      	b.n	9bea <wdt_set_config+0x8a>
		WDT_module->CTRLA.reg &= ~WDT_CTRLA_WEN;
    9c00:	2404      	movs	r4, #4
    9c02:	780a      	ldrb	r2, [r1, #0]
    9c04:	43a2      	bics	r2, r4
    9c06:	700a      	strb	r2, [r1, #0]
    9c08:	e7db      	b.n	9bc2 <wdt_set_config+0x62>
    9c0a:	46c0      	nop			; (mov r8, r8)
    9c0c:	40000400 	.word	0x40000400
    9c10:	40001c00 	.word	0x40001c00

00009c14 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    9c14:	22a5      	movs	r2, #165	; 0xa5
    9c16:	4b03      	ldr	r3, [pc, #12]	; (9c24 <wdt_reset_count+0x10>)
    9c18:	731a      	strb	r2, [r3, #12]
    9c1a:	689a      	ldr	r2, [r3, #8]
    9c1c:	2a00      	cmp	r2, #0
    9c1e:	d1fc      	bne.n	9c1a <wdt_reset_count+0x6>

	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    9c20:	4770      	bx	lr
    9c22:	46c0      	nop			; (mov r8, r8)
    9c24:	40001c00 	.word	0x40001c00

00009c28 <WDT_Handler>:
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    9c28:	2201      	movs	r2, #1
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    9c2a:	b510      	push	{r4, lr}
    9c2c:	4b03      	ldr	r3, [pc, #12]	; (9c3c <WDT_Handler+0x14>)
    9c2e:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    9c30:	4b03      	ldr	r3, [pc, #12]	; (9c40 <WDT_Handler+0x18>)
    9c32:	681b      	ldr	r3, [r3, #0]
    9c34:	2b00      	cmp	r3, #0
    9c36:	d000      	beq.n	9c3a <WDT_Handler+0x12>
		wdt_early_warning_callback();
    9c38:	4798      	blx	r3
	}
}
    9c3a:	bd10      	pop	{r4, pc}
    9c3c:	40001c00 	.word	0x40001c00
    9c40:	2000123c 	.word	0x2000123c

00009c44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    9c44:	e7fe      	b.n	9c44 <Dummy_Handler>
    9c46:	46c0      	nop			; (mov r8, r8)

00009c48 <Reset_Handler>:
        if (pSrc != pDest) {
    9c48:	4914      	ldr	r1, [pc, #80]	; (9c9c <Reset_Handler+0x54>)
    9c4a:	4815      	ldr	r0, [pc, #84]	; (9ca0 <Reset_Handler+0x58>)
{
    9c4c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    9c4e:	4281      	cmp	r1, r0
    9c50:	d009      	beq.n	9c66 <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
    9c52:	4b14      	ldr	r3, [pc, #80]	; (9ca4 <Reset_Handler+0x5c>)
    9c54:	4298      	cmp	r0, r3
    9c56:	d206      	bcs.n	9c66 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
    9c58:	43c2      	mvns	r2, r0
    9c5a:	18d2      	adds	r2, r2, r3
    9c5c:	0892      	lsrs	r2, r2, #2
    9c5e:	3201      	adds	r2, #1
    9c60:	0092      	lsls	r2, r2, #2
    9c62:	4b11      	ldr	r3, [pc, #68]	; (9ca8 <Reset_Handler+0x60>)
    9c64:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
    9c66:	4811      	ldr	r0, [pc, #68]	; (9cac <Reset_Handler+0x64>)
    9c68:	4b11      	ldr	r3, [pc, #68]	; (9cb0 <Reset_Handler+0x68>)
    9c6a:	4298      	cmp	r0, r3
    9c6c:	d207      	bcs.n	9c7e <Reset_Handler+0x36>
                *pDest++ = 0;
    9c6e:	43c2      	mvns	r2, r0
    9c70:	18d2      	adds	r2, r2, r3
    9c72:	0892      	lsrs	r2, r2, #2
    9c74:	3201      	adds	r2, #1
    9c76:	0092      	lsls	r2, r2, #2
    9c78:	2100      	movs	r1, #0
    9c7a:	4b0e      	ldr	r3, [pc, #56]	; (9cb4 <Reset_Handler+0x6c>)
    9c7c:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9c7e:	21ff      	movs	r1, #255	; 0xff
    9c80:	4b0d      	ldr	r3, [pc, #52]	; (9cb8 <Reset_Handler+0x70>)
    9c82:	4a0e      	ldr	r2, [pc, #56]	; (9cbc <Reset_Handler+0x74>)
    9c84:	438b      	bics	r3, r1
    9c86:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    9c88:	4a0d      	ldr	r2, [pc, #52]	; (9cc0 <Reset_Handler+0x78>)
    9c8a:	397f      	subs	r1, #127	; 0x7f
    9c8c:	6853      	ldr	r3, [r2, #4]
    9c8e:	430b      	orrs	r3, r1
    9c90:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    9c92:	4b0c      	ldr	r3, [pc, #48]	; (9cc4 <Reset_Handler+0x7c>)
    9c94:	4798      	blx	r3
        main();
    9c96:	4b0c      	ldr	r3, [pc, #48]	; (9cc8 <Reset_Handler+0x80>)
    9c98:	4798      	blx	r3
    9c9a:	e7fe      	b.n	9c9a <Reset_Handler+0x52>
    9c9c:	0002ff6c 	.word	0x0002ff6c
    9ca0:	20000000 	.word	0x20000000
    9ca4:	20000b90 	.word	0x20000b90
    9ca8:	00028999 	.word	0x00028999
    9cac:	20000b90 	.word	0x20000b90
    9cb0:	20005384 	.word	0x20005384
    9cb4:	00028a1d 	.word	0x00028a1d
    9cb8:	00006000 	.word	0x00006000
    9cbc:	e000ed00 	.word	0xe000ed00
    9cc0:	41004000 	.word	0x41004000
    9cc4:	00028951 	.word	0x00028951
    9cc8:	00022901 	.word	0x00022901

00009ccc <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    9ccc:	4a04      	ldr	r2, [pc, #16]	; (9ce0 <_sbrk+0x14>)
    9cce:	6813      	ldr	r3, [r2, #0]
    9cd0:	2b00      	cmp	r3, #0
    9cd2:	d003      	beq.n	9cdc <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
    9cd4:	1818      	adds	r0, r3, r0
    9cd6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    9cd8:	0018      	movs	r0, r3
    9cda:	4770      	bx	lr
    9cdc:	4b01      	ldr	r3, [pc, #4]	; (9ce4 <_sbrk+0x18>)
    9cde:	e7f9      	b.n	9cd4 <_sbrk+0x8>
    9ce0:	20000c9c 	.word	0x20000c9c
    9ce4:	20007388 	.word	0x20007388

00009ce8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    9ce8:	b570      	push	{r4, r5, r6, lr}
    9cea:	0004      	movs	r4, r0
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    9cec:	2801      	cmp	r0, #1
    9cee:	d901      	bls.n	9cf4 <disk_initialize+0xc>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    9cf0:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    9cf2:	bd70      	pop	{r4, r5, r6, pc}
		mem_status = mem_test_unit_ready(drv);
    9cf4:	4d07      	ldr	r5, [pc, #28]	; (9d14 <disk_initialize+0x2c>)
    9cf6:	47a8      	blx	r5
		if (CTRL_BUSY != mem_status) {
    9cf8:	2803      	cmp	r0, #3
    9cfa:	d101      	bne.n	9d00 <disk_initialize+0x18>
		mem_status = mem_test_unit_ready(drv);
    9cfc:	0020      	movs	r0, r4
    9cfe:	47a8      	blx	r5
	if (mem_status != CTRL_GOOD) {
    9d00:	2800      	cmp	r0, #0
    9d02:	d1f5      	bne.n	9cf0 <disk_initialize+0x8>
	if (mem_wr_protect(drv)) {
    9d04:	4b04      	ldr	r3, [pc, #16]	; (9d18 <disk_initialize+0x30>)
    9d06:	0020      	movs	r0, r4
    9d08:	4798      	blx	r3
	return 0;
    9d0a:	1e43      	subs	r3, r0, #1
    9d0c:	4198      	sbcs	r0, r3
    9d0e:	0080      	lsls	r0, r0, #2
    9d10:	e7ef      	b.n	9cf2 <disk_initialize+0xa>
    9d12:	46c0      	nop			; (mov r8, r8)
    9d14:	000182b1 	.word	0x000182b1
    9d18:	000182fd 	.word	0x000182fd

00009d1c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    9d1c:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    9d1e:	4b06      	ldr	r3, [pc, #24]	; (9d38 <disk_status+0x1c>)
    9d20:	4798      	blx	r3
    9d22:	2800      	cmp	r0, #0
    9d24:	d006      	beq.n	9d34 <disk_status+0x18>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    9d26:	2303      	movs	r3, #3
	switch (mem_test_unit_ready(drv)) {
    9d28:	2802      	cmp	r0, #2
    9d2a:	d101      	bne.n	9d30 <disk_status+0x14>
	default:
		return STA_NOINIT;
	}
}
    9d2c:	0018      	movs	r0, r3
    9d2e:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
    9d30:	3b02      	subs	r3, #2
    9d32:	e7fb      	b.n	9d2c <disk_status+0x10>
		return 0;
    9d34:	2300      	movs	r3, #0
    9d36:	e7f9      	b.n	9d2c <disk_status+0x10>
    9d38:	000182b1 	.word	0x000182b1

00009d3c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    9d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d3e:	4645      	mov	r5, r8
    9d40:	46de      	mov	lr, fp
    9d42:	4657      	mov	r7, sl
    9d44:	464e      	mov	r6, r9
    9d46:	b5e0      	push	{r5, r6, r7, lr}
    9d48:	001f      	movs	r7, r3
    9d4a:	b083      	sub	sp, #12
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    9d4c:	4b19      	ldr	r3, [pc, #100]	; (9db4 <disk_read+0x78>)
{
    9d4e:	4680      	mov	r8, r0
    9d50:	000d      	movs	r5, r1
    9d52:	0014      	movs	r4, r2
	uint8_t uc_sector_size = mem_sector_size(drv);
    9d54:	4798      	blx	r3
    9d56:	1e06      	subs	r6, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    9d58:	d107      	bne.n	9d6a <disk_read+0x2e>
		return RES_ERROR;
    9d5a:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    9d5c:	b003      	add	sp, #12
    9d5e:	bc3c      	pop	{r2, r3, r4, r5}
    9d60:	4690      	mov	r8, r2
    9d62:	4699      	mov	r9, r3
    9d64:	46a2      	mov	sl, r4
    9d66:	46ab      	mov	fp, r5
    9d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    9d6a:	4b13      	ldr	r3, [pc, #76]	; (9db8 <disk_read+0x7c>)
    9d6c:	a901      	add	r1, sp, #4
    9d6e:	4640      	mov	r0, r8
    9d70:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    9d72:	0032      	movs	r2, r6
			(ul_last_sector_num + 1) * uc_sector_size) {
    9d74:	9b01      	ldr	r3, [sp, #4]
	if ((sector + count * uc_sector_size) >
    9d76:	437a      	muls	r2, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
    9d78:	3301      	adds	r3, #1
    9d7a:	4373      	muls	r3, r6
	if ((sector + count * uc_sector_size) >
    9d7c:	1912      	adds	r2, r2, r4
		return RES_PARERR;
    9d7e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    9d80:	429a      	cmp	r2, r3
    9d82:	d8eb      	bhi.n	9d5c <disk_read+0x20>
	for (i = 0; i < count; i++) {
    9d84:	2f00      	cmp	r7, #0
    9d86:	d013      	beq.n	9db0 <disk_read+0x74>
    9d88:	0273      	lsls	r3, r6, #9
    9d8a:	469b      	mov	fp, r3
    9d8c:	1c7b      	adds	r3, r7, #1
    9d8e:	4699      	mov	r9, r3
    9d90:	4b0a      	ldr	r3, [pc, #40]	; (9dbc <disk_read+0x80>)
    9d92:	2701      	movs	r7, #1
    9d94:	469a      	mov	sl, r3
    9d96:	e004      	b.n	9da2 <disk_read+0x66>
    9d98:	3701      	adds	r7, #1
    9d9a:	19a4      	adds	r4, r4, r6
    9d9c:	445d      	add	r5, fp
    9d9e:	454f      	cmp	r7, r9
    9da0:	d006      	beq.n	9db0 <disk_read+0x74>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    9da2:	002a      	movs	r2, r5
    9da4:	0021      	movs	r1, r4
    9da6:	4640      	mov	r0, r8
    9da8:	47d0      	blx	sl
    9daa:	2800      	cmp	r0, #0
    9dac:	d0f4      	beq.n	9d98 <disk_read+0x5c>
    9dae:	e7d4      	b.n	9d5a <disk_read+0x1e>
	return RES_OK;
    9db0:	2000      	movs	r0, #0
    9db2:	e7d3      	b.n	9d5c <disk_read+0x20>
    9db4:	000182dd 	.word	0x000182dd
    9db8:	000182c5 	.word	0x000182c5
    9dbc:	0001836d 	.word	0x0001836d

00009dc0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    9dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dc2:	4645      	mov	r5, r8
    9dc4:	46de      	mov	lr, fp
    9dc6:	4657      	mov	r7, sl
    9dc8:	464e      	mov	r6, r9
    9dca:	b5e0      	push	{r5, r6, r7, lr}
    9dcc:	001f      	movs	r7, r3
    9dce:	b083      	sub	sp, #12
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    9dd0:	4b19      	ldr	r3, [pc, #100]	; (9e38 <disk_write+0x78>)
{
    9dd2:	4680      	mov	r8, r0
    9dd4:	000d      	movs	r5, r1
    9dd6:	0014      	movs	r4, r2
	uint8_t uc_sector_size = mem_sector_size(drv);
    9dd8:	4798      	blx	r3
    9dda:	1e06      	subs	r6, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    9ddc:	d107      	bne.n	9dee <disk_write+0x2e>
		return RES_ERROR;
    9dde:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    9de0:	b003      	add	sp, #12
    9de2:	bc3c      	pop	{r2, r3, r4, r5}
    9de4:	4690      	mov	r8, r2
    9de6:	4699      	mov	r9, r3
    9de8:	46a2      	mov	sl, r4
    9dea:	46ab      	mov	fp, r5
    9dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    9dee:	4b13      	ldr	r3, [pc, #76]	; (9e3c <disk_write+0x7c>)
    9df0:	a901      	add	r1, sp, #4
    9df2:	4640      	mov	r0, r8
    9df4:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    9df6:	0032      	movs	r2, r6
			(ul_last_sector_num + 1) * uc_sector_size) {
    9df8:	9b01      	ldr	r3, [sp, #4]
	if ((sector + count * uc_sector_size) >
    9dfa:	437a      	muls	r2, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
    9dfc:	3301      	adds	r3, #1
    9dfe:	4373      	muls	r3, r6
	if ((sector + count * uc_sector_size) >
    9e00:	1912      	adds	r2, r2, r4
		return RES_PARERR;
    9e02:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    9e04:	429a      	cmp	r2, r3
    9e06:	d8eb      	bhi.n	9de0 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    9e08:	2f00      	cmp	r7, #0
    9e0a:	d013      	beq.n	9e34 <disk_write+0x74>
    9e0c:	0273      	lsls	r3, r6, #9
    9e0e:	469b      	mov	fp, r3
    9e10:	1c7b      	adds	r3, r7, #1
    9e12:	4699      	mov	r9, r3
    9e14:	4b0a      	ldr	r3, [pc, #40]	; (9e40 <disk_write+0x80>)
    9e16:	2701      	movs	r7, #1
    9e18:	469a      	mov	sl, r3
    9e1a:	e004      	b.n	9e26 <disk_write+0x66>
    9e1c:	3701      	adds	r7, #1
    9e1e:	19a4      	adds	r4, r4, r6
    9e20:	445d      	add	r5, fp
    9e22:	454f      	cmp	r7, r9
    9e24:	d006      	beq.n	9e34 <disk_write+0x74>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    9e26:	002a      	movs	r2, r5
    9e28:	0021      	movs	r1, r4
    9e2a:	4640      	mov	r0, r8
    9e2c:	47d0      	blx	sl
    9e2e:	2800      	cmp	r0, #0
    9e30:	d0f4      	beq.n	9e1c <disk_write+0x5c>
    9e32:	e7d4      	b.n	9dde <disk_write+0x1e>
	return RES_OK;
    9e34:	2000      	movs	r0, #0
    9e36:	e7d3      	b.n	9de0 <disk_write+0x20>
    9e38:	000182dd 	.word	0x000182dd
    9e3c:	000182c5 	.word	0x000182c5
    9e40:	00018389 	.word	0x00018389

00009e44 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    9e44:	b510      	push	{r4, lr}
    9e46:	0014      	movs	r4, r2
    9e48:	b082      	sub	sp, #8
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    9e4a:	2901      	cmp	r1, #1
    9e4c:	d020      	beq.n	9e90 <disk_ioctl+0x4c>
    9e4e:	2900      	cmp	r1, #0
    9e50:	d018      	beq.n	9e84 <disk_ioctl+0x40>
    9e52:	2902      	cmp	r1, #2
    9e54:	d007      	beq.n	9e66 <disk_ioctl+0x22>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    9e56:	2004      	movs	r0, #4
	switch (ctrl) {
    9e58:	2903      	cmp	r1, #3
    9e5a:	d102      	bne.n	9e62 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    9e5c:	2301      	movs	r3, #1
		res = RES_OK;
    9e5e:	2000      	movs	r0, #0
		*(DWORD *)buff = 1;
    9e60:	6013      	str	r3, [r2, #0]
	}

	return res;
}
    9e62:	b002      	add	sp, #8
    9e64:	bd10      	pop	{r4, pc}
		uint8_t uc_sector_size = mem_sector_size(drv);
    9e66:	4b0f      	ldr	r3, [pc, #60]	; (9ea4 <disk_ioctl+0x60>)
    9e68:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    9e6a:	1e43      	subs	r3, r0, #1
    9e6c:	b2db      	uxtb	r3, r3
    9e6e:	2b01      	cmp	r3, #1
    9e70:	d904      	bls.n	9e7c <disk_ioctl+0x38>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    9e72:	22fb      	movs	r2, #251	; 0xfb
    9e74:	1f03      	subs	r3, r0, #4
			return RES_ERROR;
    9e76:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    9e78:	4213      	tst	r3, r2
    9e7a:	d1f2      	bne.n	9e62 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    9e7c:	2300      	movs	r3, #0
		res = RES_OK;
    9e7e:	2000      	movs	r0, #0
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    9e80:	7023      	strb	r3, [r4, #0]
	break;
    9e82:	e7ee      	b.n	9e62 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    9e84:	4b08      	ldr	r3, [pc, #32]	; (9ea8 <disk_ioctl+0x64>)
    9e86:	4798      	blx	r3
    9e88:	2800      	cmp	r0, #0
    9e8a:	d009      	beq.n	9ea0 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    9e8c:	2003      	movs	r0, #3
    9e8e:	e7e8      	b.n	9e62 <disk_ioctl+0x1e>
		mem_read_capacity(drv, &ul_last_sector_num);
    9e90:	4b06      	ldr	r3, [pc, #24]	; (9eac <disk_ioctl+0x68>)
    9e92:	a901      	add	r1, sp, #4
    9e94:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    9e96:	9b01      	ldr	r3, [sp, #4]
		res = RES_OK;
    9e98:	2000      	movs	r0, #0
		*(DWORD *)buff = ul_last_sector_num + 1;
    9e9a:	3301      	adds	r3, #1
    9e9c:	6023      	str	r3, [r4, #0]
	break;
    9e9e:	e7e0      	b.n	9e62 <disk_ioctl+0x1e>
			res = RES_OK;
    9ea0:	2000      	movs	r0, #0
    9ea2:	e7de      	b.n	9e62 <disk_ioctl+0x1e>
    9ea4:	000182dd 	.word	0x000182dd
    9ea8:	000182b1 	.word	0x000182b1
    9eac:	000182c5 	.word	0x000182c5

00009eb0 <get_fattime>:
{
	uint32_t ul_time;

	// Format into FAT time stamp format
	ul_time = ((current_time.year -1980 ) << 25)
	| (current_time.month << 21)
    9eb0:	4b0a      	ldr	r3, [pc, #40]	; (9edc <get_fattime+0x2c>)
    9eb2:	7898      	ldrb	r0, [r3, #2]
	| (current_time.day << 16)
    9eb4:	78da      	ldrb	r2, [r3, #3]
	| (current_time.month << 21)
    9eb6:	0540      	lsls	r0, r0, #21
	| (current_time.day << 16)
    9eb8:	0412      	lsls	r2, r2, #16
	| (current_time.hours << 11)
	| (current_time.minutes << 5)
	| ((current_time.seconds >> 1) << 0);
    9eba:	4310      	orrs	r0, r2
	| (current_time.hours << 11)
    9ebc:	791a      	ldrb	r2, [r3, #4]
    9ebe:	02d2      	lsls	r2, r2, #11
	| ((current_time.seconds >> 1) << 0);
    9ec0:	4310      	orrs	r0, r2
	| (current_time.minutes << 5)
    9ec2:	795a      	ldrb	r2, [r3, #5]
    9ec4:	0152      	lsls	r2, r2, #5
	| ((current_time.seconds >> 1) << 0);
    9ec6:	4310      	orrs	r0, r2
    9ec8:	799a      	ldrb	r2, [r3, #6]
	ul_time = ((current_time.year -1980 ) << 25)
    9eca:	881b      	ldrh	r3, [r3, #0]
	| ((current_time.seconds >> 1) << 0);
    9ecc:	0852      	lsrs	r2, r2, #1
    9ece:	4310      	orrs	r0, r2
	ul_time = ((current_time.year -1980 ) << 25)
    9ed0:	4a03      	ldr	r2, [pc, #12]	; (9ee0 <get_fattime+0x30>)
    9ed2:	4694      	mov	ip, r2
    9ed4:	4463      	add	r3, ip
    9ed6:	065b      	lsls	r3, r3, #25
	| ((current_time.seconds >> 1) << 0);
    9ed8:	4318      	orrs	r0, r3

	return ul_time;
}
    9eda:	4770      	bx	lr
    9edc:	20002628 	.word	0x20002628
    9ee0:	fffff844 	.word	0xfffff844

00009ee4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    9ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ee6:	46ce      	mov	lr, r9
    9ee8:	4647      	mov	r7, r8
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    9eea:	000a      	movs	r2, r1
{
    9eec:	b580      	push	{r7, lr}
	if (dj->sect) {
    9eee:	6903      	ldr	r3, [r0, #16]
{
    9ef0:	000c      	movs	r4, r1
	p = fno->fname;
    9ef2:	3209      	adds	r2, #9
	if (dj->sect) {
    9ef4:	2b00      	cmp	r3, #0
    9ef6:	d07e      	beq.n	9ff6 <get_fileinfo+0x112>
		dir = dj->dir;
    9ef8:	6943      	ldr	r3, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
    9efa:	7b1d      	ldrb	r5, [r3, #12]
    9efc:	0729      	lsls	r1, r5, #28
    9efe:	d500      	bpl.n	9f02 <get_fileinfo+0x1e>
    9f00:	e0aa      	b.n	a058 <get_fileinfo+0x174>
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    9f02:	7819      	ldrb	r1, [r3, #0]
			if (c == ' ') break;
    9f04:	2920      	cmp	r1, #32
    9f06:	d044      	beq.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    9f08:	2905      	cmp	r1, #5
    9f0a:	d100      	bne.n	9f0e <get_fileinfo+0x2a>
    9f0c:	e139      	b.n	a182 <get_fileinfo+0x29e>
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    9f0e:	0022      	movs	r2, r4
    9f10:	7261      	strb	r1, [r4, #9]
			c = dir[i];
    9f12:	7859      	ldrb	r1, [r3, #1]
			*p++ = c;
    9f14:	320a      	adds	r2, #10
			if (c == ' ') break;
    9f16:	2920      	cmp	r1, #32
    9f18:	d03b      	beq.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    9f1a:	2905      	cmp	r1, #5
    9f1c:	d100      	bne.n	9f20 <get_fileinfo+0x3c>
    9f1e:	e134      	b.n	a18a <get_fileinfo+0x2a6>
			*p++ = c;
    9f20:	0022      	movs	r2, r4
    9f22:	72a1      	strb	r1, [r4, #10]
			c = dir[i];
    9f24:	7899      	ldrb	r1, [r3, #2]
			*p++ = c;
    9f26:	320b      	adds	r2, #11
			if (c == ' ') break;
    9f28:	2920      	cmp	r1, #32
    9f2a:	d032      	beq.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    9f2c:	2905      	cmp	r1, #5
    9f2e:	d100      	bne.n	9f32 <get_fileinfo+0x4e>
    9f30:	e12d      	b.n	a18e <get_fileinfo+0x2aa>
			*p++ = c;
    9f32:	0022      	movs	r2, r4
    9f34:	72e1      	strb	r1, [r4, #11]
			c = dir[i];
    9f36:	78d9      	ldrb	r1, [r3, #3]
			*p++ = c;
    9f38:	320c      	adds	r2, #12
			if (c == ' ') break;
    9f3a:	2920      	cmp	r1, #32
    9f3c:	d029      	beq.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    9f3e:	2905      	cmp	r1, #5
    9f40:	d100      	bne.n	9f44 <get_fileinfo+0x60>
    9f42:	e126      	b.n	a192 <get_fileinfo+0x2ae>
			*p++ = c;
    9f44:	0022      	movs	r2, r4
    9f46:	7321      	strb	r1, [r4, #12]
			c = dir[i];
    9f48:	7919      	ldrb	r1, [r3, #4]
			*p++ = c;
    9f4a:	320d      	adds	r2, #13
			if (c == ' ') break;
    9f4c:	2920      	cmp	r1, #32
    9f4e:	d020      	beq.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    9f50:	2905      	cmp	r1, #5
    9f52:	d100      	bne.n	9f56 <get_fileinfo+0x72>
    9f54:	e127      	b.n	a1a6 <get_fileinfo+0x2c2>
			*p++ = c;
    9f56:	0022      	movs	r2, r4
    9f58:	7361      	strb	r1, [r4, #13]
			c = dir[i];
    9f5a:	7959      	ldrb	r1, [r3, #5]
			*p++ = c;
    9f5c:	320e      	adds	r2, #14
			if (c == ' ') break;
    9f5e:	2920      	cmp	r1, #32
    9f60:	d017      	beq.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    9f62:	2905      	cmp	r1, #5
    9f64:	d100      	bne.n	9f68 <get_fileinfo+0x84>
    9f66:	e122      	b.n	a1ae <get_fileinfo+0x2ca>
			*p++ = c;
    9f68:	0022      	movs	r2, r4
    9f6a:	73a1      	strb	r1, [r4, #14]
			c = dir[i];
    9f6c:	7999      	ldrb	r1, [r3, #6]
			*p++ = c;
    9f6e:	320f      	adds	r2, #15
			if (c == ' ') break;
    9f70:	2920      	cmp	r1, #32
    9f72:	d00e      	beq.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    9f74:	2905      	cmp	r1, #5
    9f76:	d100      	bne.n	9f7a <get_fileinfo+0x96>
    9f78:	e11d      	b.n	a1b6 <get_fileinfo+0x2d2>
			*p++ = c;
    9f7a:	0022      	movs	r2, r4
    9f7c:	73e1      	strb	r1, [r4, #15]
			c = dir[i];
    9f7e:	79d9      	ldrb	r1, [r3, #7]
			*p++ = c;
    9f80:	3210      	adds	r2, #16
			if (c == ' ') break;
    9f82:	2920      	cmp	r1, #32
    9f84:	d005      	beq.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    9f86:	2905      	cmp	r1, #5
    9f88:	d100      	bne.n	9f8c <get_fileinfo+0xa8>
    9f8a:	e11c      	b.n	a1c6 <get_fileinfo+0x2e2>
			*p++ = c;
    9f8c:	0022      	movs	r2, r4
    9f8e:	7421      	strb	r1, [r4, #16]
    9f90:	3211      	adds	r2, #17
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    9f92:	7a19      	ldrb	r1, [r3, #8]
    9f94:	2920      	cmp	r1, #32
    9f96:	d017      	beq.n	9fc8 <get_fileinfo+0xe4>
			*p++ = '.';
    9f98:	212e      	movs	r1, #46	; 0x2e
    9f9a:	1c56      	adds	r6, r2, #1
    9f9c:	7011      	strb	r1, [r2, #0]
    9f9e:	06e9      	lsls	r1, r5, #27
    9fa0:	d500      	bpl.n	9fa4 <get_fileinfo+0xc0>
    9fa2:	e0d1      	b.n	a148 <get_fileinfo+0x264>
			for (i = 8; i < 11; i++) {
				c = dir[i];
    9fa4:	7a19      	ldrb	r1, [r3, #8]
				if (c == ' ') break;
    9fa6:	2920      	cmp	r1, #32
    9fa8:	d100      	bne.n	9fac <get_fileinfo+0xc8>
    9faa:	e112      	b.n	a1d2 <get_fileinfo+0x2ee>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    9fac:	7051      	strb	r1, [r2, #1]
				c = dir[i];
    9fae:	7a59      	ldrb	r1, [r3, #9]
				*p++ = c;
    9fb0:	1c95      	adds	r5, r2, #2
				if (c == ' ') break;
    9fb2:	2920      	cmp	r1, #32
    9fb4:	d100      	bne.n	9fb8 <get_fileinfo+0xd4>
    9fb6:	e10a      	b.n	a1ce <get_fileinfo+0x2ea>
				*p++ = c;
    9fb8:	7091      	strb	r1, [r2, #2]
				c = dir[i];
    9fba:	7a99      	ldrb	r1, [r3, #10]
				*p++ = c;
    9fbc:	1cd5      	adds	r5, r2, #3
				if (c == ' ') break;
    9fbe:	2920      	cmp	r1, #32
    9fc0:	d100      	bne.n	9fc4 <get_fileinfo+0xe0>
    9fc2:	e104      	b.n	a1ce <get_fileinfo+0x2ea>
				*p++ = c;
    9fc4:	70d1      	strb	r1, [r2, #3]
    9fc6:	3204      	adds	r2, #4
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    9fc8:	7ad9      	ldrb	r1, [r3, #11]
    9fca:	7221      	strb	r1, [r4, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    9fcc:	7f5d      	ldrb	r5, [r3, #29]
    9fce:	7f19      	ldrb	r1, [r3, #28]
    9fd0:	022d      	lsls	r5, r5, #8
    9fd2:	430d      	orrs	r5, r1
    9fd4:	7f99      	ldrb	r1, [r3, #30]
    9fd6:	0409      	lsls	r1, r1, #16
    9fd8:	430d      	orrs	r5, r1
    9fda:	7fd9      	ldrb	r1, [r3, #31]
    9fdc:	0609      	lsls	r1, r1, #24
    9fde:	4329      	orrs	r1, r5
    9fe0:	6021      	str	r1, [r4, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    9fe2:	7e5d      	ldrb	r5, [r3, #25]
    9fe4:	7e19      	ldrb	r1, [r3, #24]
    9fe6:	022d      	lsls	r5, r5, #8
    9fe8:	4329      	orrs	r1, r5
    9fea:	80a1      	strh	r1, [r4, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    9fec:	7dd9      	ldrb	r1, [r3, #23]
    9fee:	7d9b      	ldrb	r3, [r3, #22]
    9ff0:	0209      	lsls	r1, r1, #8
    9ff2:	430b      	orrs	r3, r1
    9ff4:	80e3      	strh	r3, [r4, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    9ff6:	2300      	movs	r3, #0
    9ff8:	7013      	strb	r3, [r2, #0]

#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
    9ffa:	69a7      	ldr	r7, [r4, #24]
    9ffc:	2f00      	cmp	r7, #0
    9ffe:	d008      	beq.n	a012 <get_fileinfo+0x12e>
    a000:	69e3      	ldr	r3, [r4, #28]
    a002:	2b00      	cmp	r3, #0
    a004:	d005      	beq.n	a012 <get_fileinfo+0x12e>
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
    a006:	6903      	ldr	r3, [r0, #16]
    a008:	2b00      	cmp	r3, #0
    a00a:	d106      	bne.n	a01a <get_fileinfo+0x136>
		i = 0;
    a00c:	2500      	movs	r5, #0
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
				tp[i++] = (TCHAR)w;
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
    a00e:	2300      	movs	r3, #0
    a010:	557b      	strb	r3, [r7, r5]
	}
#endif
}
    a012:	bc0c      	pop	{r2, r3}
    a014:	4690      	mov	r8, r2
    a016:	4699      	mov	r9, r3
    a018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
    a01a:	8c02      	ldrh	r2, [r0, #32]
    a01c:	4b6e      	ldr	r3, [pc, #440]	; (a1d8 <get_fileinfo+0x2f4>)
    a01e:	429a      	cmp	r2, r3
    a020:	d0f4      	beq.n	a00c <get_fileinfo+0x128>
			lfn = dj->lfn;
    a022:	69c3      	ldr	r3, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    a024:	8818      	ldrh	r0, [r3, #0]
			lfn = dj->lfn;
    a026:	4698      	mov	r8, r3
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    a028:	2800      	cmp	r0, #0
    a02a:	d0ef      	beq.n	a00c <get_fileinfo+0x128>
    a02c:	4b6b      	ldr	r3, [pc, #428]	; (a1dc <get_fileinfo+0x2f8>)
    a02e:	003e      	movs	r6, r7
    a030:	2500      	movs	r5, #0
    a032:	4699      	mov	r9, r3
    a034:	e00b      	b.n	a04e <get_fileinfo+0x16a>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
    a036:	69e3      	ldr	r3, [r4, #28]
    a038:	3b01      	subs	r3, #1
    a03a:	42ab      	cmp	r3, r5
    a03c:	d9e6      	bls.n	a00c <get_fileinfo+0x128>
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    a03e:	4642      	mov	r2, r8
				tp[i++] = (TCHAR)w;
    a040:	3501      	adds	r5, #1
    a042:	7030      	strb	r0, [r6, #0]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    a044:	006b      	lsls	r3, r5, #1
    a046:	5ad0      	ldrh	r0, [r2, r3]
    a048:	3601      	adds	r6, #1
    a04a:	2800      	cmp	r0, #0
    a04c:	d0df      	beq.n	a00e <get_fileinfo+0x12a>
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
    a04e:	2100      	movs	r1, #0
    a050:	47c8      	blx	r9
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
    a052:	2800      	cmp	r0, #0
    a054:	d1ef      	bne.n	a036 <get_fileinfo+0x152>
    a056:	e7d9      	b.n	a00c <get_fileinfo+0x128>
			c = dir[i];
    a058:	7819      	ldrb	r1, [r3, #0]
			if (c == ' ') break;
    a05a:	2920      	cmp	r1, #32
    a05c:	d099      	beq.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    a05e:	2905      	cmp	r1, #5
    a060:	d100      	bne.n	a064 <get_fileinfo+0x180>
    a062:	e090      	b.n	a186 <get_fileinfo+0x2a2>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    a064:	000a      	movs	r2, r1
    a066:	3a41      	subs	r2, #65	; 0x41
    a068:	2a19      	cmp	r2, #25
    a06a:	d801      	bhi.n	a070 <get_fileinfo+0x18c>
    a06c:	3120      	adds	r1, #32
    a06e:	b2c9      	uxtb	r1, r1
			*p++ = c;
    a070:	0022      	movs	r2, r4
    a072:	7261      	strb	r1, [r4, #9]
			c = dir[i];
    a074:	7859      	ldrb	r1, [r3, #1]
			*p++ = c;
    a076:	320a      	adds	r2, #10
			if (c == ' ') break;
    a078:	2920      	cmp	r1, #32
    a07a:	d100      	bne.n	a07e <get_fileinfo+0x19a>
    a07c:	e789      	b.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    a07e:	2905      	cmp	r1, #5
    a080:	d100      	bne.n	a084 <get_fileinfo+0x1a0>
    a082:	e088      	b.n	a196 <get_fileinfo+0x2b2>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    a084:	000a      	movs	r2, r1
    a086:	3a41      	subs	r2, #65	; 0x41
    a088:	2a19      	cmp	r2, #25
    a08a:	d801      	bhi.n	a090 <get_fileinfo+0x1ac>
    a08c:	3120      	adds	r1, #32
    a08e:	b2c9      	uxtb	r1, r1
			*p++ = c;
    a090:	0022      	movs	r2, r4
    a092:	72a1      	strb	r1, [r4, #10]
			c = dir[i];
    a094:	7899      	ldrb	r1, [r3, #2]
			*p++ = c;
    a096:	320b      	adds	r2, #11
			if (c == ' ') break;
    a098:	2920      	cmp	r1, #32
    a09a:	d100      	bne.n	a09e <get_fileinfo+0x1ba>
    a09c:	e779      	b.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    a09e:	2905      	cmp	r1, #5
    a0a0:	d07b      	beq.n	a19a <get_fileinfo+0x2b6>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    a0a2:	000a      	movs	r2, r1
    a0a4:	3a41      	subs	r2, #65	; 0x41
    a0a6:	2a19      	cmp	r2, #25
    a0a8:	d801      	bhi.n	a0ae <get_fileinfo+0x1ca>
    a0aa:	3120      	adds	r1, #32
    a0ac:	b2c9      	uxtb	r1, r1
			*p++ = c;
    a0ae:	0022      	movs	r2, r4
    a0b0:	72e1      	strb	r1, [r4, #11]
			c = dir[i];
    a0b2:	78d9      	ldrb	r1, [r3, #3]
			*p++ = c;
    a0b4:	320c      	adds	r2, #12
			if (c == ' ') break;
    a0b6:	2920      	cmp	r1, #32
    a0b8:	d100      	bne.n	a0bc <get_fileinfo+0x1d8>
    a0ba:	e76a      	b.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    a0bc:	2905      	cmp	r1, #5
    a0be:	d06e      	beq.n	a19e <get_fileinfo+0x2ba>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    a0c0:	000a      	movs	r2, r1
    a0c2:	3a41      	subs	r2, #65	; 0x41
    a0c4:	2a19      	cmp	r2, #25
    a0c6:	d801      	bhi.n	a0cc <get_fileinfo+0x1e8>
    a0c8:	3120      	adds	r1, #32
    a0ca:	b2c9      	uxtb	r1, r1
			*p++ = c;
    a0cc:	0022      	movs	r2, r4
    a0ce:	7321      	strb	r1, [r4, #12]
			c = dir[i];
    a0d0:	7919      	ldrb	r1, [r3, #4]
			*p++ = c;
    a0d2:	320d      	adds	r2, #13
			if (c == ' ') break;
    a0d4:	2920      	cmp	r1, #32
    a0d6:	d100      	bne.n	a0da <get_fileinfo+0x1f6>
    a0d8:	e75b      	b.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    a0da:	2905      	cmp	r1, #5
    a0dc:	d061      	beq.n	a1a2 <get_fileinfo+0x2be>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    a0de:	000a      	movs	r2, r1
    a0e0:	3a41      	subs	r2, #65	; 0x41
    a0e2:	2a19      	cmp	r2, #25
    a0e4:	d801      	bhi.n	a0ea <get_fileinfo+0x206>
    a0e6:	3120      	adds	r1, #32
    a0e8:	b2c9      	uxtb	r1, r1
			*p++ = c;
    a0ea:	0022      	movs	r2, r4
    a0ec:	7361      	strb	r1, [r4, #13]
			c = dir[i];
    a0ee:	7959      	ldrb	r1, [r3, #5]
			*p++ = c;
    a0f0:	320e      	adds	r2, #14
			if (c == ' ') break;
    a0f2:	2920      	cmp	r1, #32
    a0f4:	d100      	bne.n	a0f8 <get_fileinfo+0x214>
    a0f6:	e74c      	b.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    a0f8:	2905      	cmp	r1, #5
    a0fa:	d056      	beq.n	a1aa <get_fileinfo+0x2c6>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    a0fc:	000a      	movs	r2, r1
    a0fe:	3a41      	subs	r2, #65	; 0x41
    a100:	2a19      	cmp	r2, #25
    a102:	d801      	bhi.n	a108 <get_fileinfo+0x224>
    a104:	3120      	adds	r1, #32
    a106:	b2c9      	uxtb	r1, r1
			*p++ = c;
    a108:	0022      	movs	r2, r4
    a10a:	73a1      	strb	r1, [r4, #14]
			c = dir[i];
    a10c:	7999      	ldrb	r1, [r3, #6]
			*p++ = c;
    a10e:	320f      	adds	r2, #15
			if (c == ' ') break;
    a110:	2920      	cmp	r1, #32
    a112:	d100      	bne.n	a116 <get_fileinfo+0x232>
    a114:	e73d      	b.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    a116:	2905      	cmp	r1, #5
    a118:	d04b      	beq.n	a1b2 <get_fileinfo+0x2ce>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    a11a:	000a      	movs	r2, r1
    a11c:	3a41      	subs	r2, #65	; 0x41
    a11e:	2a19      	cmp	r2, #25
    a120:	d801      	bhi.n	a126 <get_fileinfo+0x242>
    a122:	3120      	adds	r1, #32
    a124:	b2c9      	uxtb	r1, r1
			*p++ = c;
    a126:	0022      	movs	r2, r4
    a128:	73e1      	strb	r1, [r4, #15]
			c = dir[i];
    a12a:	79d9      	ldrb	r1, [r3, #7]
			*p++ = c;
    a12c:	3210      	adds	r2, #16
			if (c == ' ') break;
    a12e:	2920      	cmp	r1, #32
    a130:	d100      	bne.n	a134 <get_fileinfo+0x250>
    a132:	e72e      	b.n	9f92 <get_fileinfo+0xae>
			if (c == NDDE) c = (TCHAR)DDE;
    a134:	2905      	cmp	r1, #5
    a136:	d048      	beq.n	a1ca <get_fileinfo+0x2e6>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    a138:	000a      	movs	r2, r1
    a13a:	3a41      	subs	r2, #65	; 0x41
    a13c:	2a19      	cmp	r2, #25
    a13e:	d900      	bls.n	a142 <get_fileinfo+0x25e>
    a140:	e724      	b.n	9f8c <get_fileinfo+0xa8>
    a142:	3120      	adds	r1, #32
    a144:	b2c9      	uxtb	r1, r1
    a146:	e721      	b.n	9f8c <get_fileinfo+0xa8>
				c = dir[i];
    a148:	7a19      	ldrb	r1, [r3, #8]
				if (c == ' ') break;
    a14a:	2920      	cmp	r1, #32
    a14c:	d041      	beq.n	a1d2 <get_fileinfo+0x2ee>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    a14e:	000d      	movs	r5, r1
    a150:	3d41      	subs	r5, #65	; 0x41
    a152:	2d19      	cmp	r5, #25
    a154:	d931      	bls.n	a1ba <get_fileinfo+0x2d6>
				*p++ = c;
    a156:	7051      	strb	r1, [r2, #1]
				c = dir[i];
    a158:	7a59      	ldrb	r1, [r3, #9]
				*p++ = c;
    a15a:	1c95      	adds	r5, r2, #2
				if (c == ' ') break;
    a15c:	2920      	cmp	r1, #32
    a15e:	d036      	beq.n	a1ce <get_fileinfo+0x2ea>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    a160:	000d      	movs	r5, r1
    a162:	3d41      	subs	r5, #65	; 0x41
    a164:	2d19      	cmp	r5, #25
    a166:	d92b      	bls.n	a1c0 <get_fileinfo+0x2dc>
				*p++ = c;
    a168:	7091      	strb	r1, [r2, #2]
				c = dir[i];
    a16a:	7a99      	ldrb	r1, [r3, #10]
				*p++ = c;
    a16c:	1cd5      	adds	r5, r2, #3
				if (c == ' ') break;
    a16e:	2920      	cmp	r1, #32
    a170:	d02d      	beq.n	a1ce <get_fileinfo+0x2ea>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    a172:	000d      	movs	r5, r1
    a174:	3d41      	subs	r5, #65	; 0x41
    a176:	2d19      	cmp	r5, #25
    a178:	d900      	bls.n	a17c <get_fileinfo+0x298>
    a17a:	e723      	b.n	9fc4 <get_fileinfo+0xe0>
    a17c:	3120      	adds	r1, #32
    a17e:	b2c9      	uxtb	r1, r1
    a180:	e720      	b.n	9fc4 <get_fileinfo+0xe0>
			if (c == NDDE) c = (TCHAR)DDE;
    a182:	31e0      	adds	r1, #224	; 0xe0
    a184:	e6c3      	b.n	9f0e <get_fileinfo+0x2a>
    a186:	21e5      	movs	r1, #229	; 0xe5
    a188:	e772      	b.n	a070 <get_fileinfo+0x18c>
    a18a:	31e0      	adds	r1, #224	; 0xe0
    a18c:	e6c8      	b.n	9f20 <get_fileinfo+0x3c>
    a18e:	31e0      	adds	r1, #224	; 0xe0
    a190:	e6cf      	b.n	9f32 <get_fileinfo+0x4e>
    a192:	31e0      	adds	r1, #224	; 0xe0
    a194:	e6d6      	b.n	9f44 <get_fileinfo+0x60>
    a196:	21e5      	movs	r1, #229	; 0xe5
    a198:	e77a      	b.n	a090 <get_fileinfo+0x1ac>
    a19a:	21e5      	movs	r1, #229	; 0xe5
    a19c:	e787      	b.n	a0ae <get_fileinfo+0x1ca>
    a19e:	21e5      	movs	r1, #229	; 0xe5
    a1a0:	e794      	b.n	a0cc <get_fileinfo+0x1e8>
    a1a2:	21e5      	movs	r1, #229	; 0xe5
    a1a4:	e7a1      	b.n	a0ea <get_fileinfo+0x206>
    a1a6:	31e0      	adds	r1, #224	; 0xe0
    a1a8:	e6d5      	b.n	9f56 <get_fileinfo+0x72>
    a1aa:	21e5      	movs	r1, #229	; 0xe5
    a1ac:	e7ac      	b.n	a108 <get_fileinfo+0x224>
    a1ae:	31e0      	adds	r1, #224	; 0xe0
    a1b0:	e6da      	b.n	9f68 <get_fileinfo+0x84>
    a1b2:	21e5      	movs	r1, #229	; 0xe5
    a1b4:	e7b7      	b.n	a126 <get_fileinfo+0x242>
    a1b6:	31e0      	adds	r1, #224	; 0xe0
    a1b8:	e6df      	b.n	9f7a <get_fileinfo+0x96>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    a1ba:	3120      	adds	r1, #32
    a1bc:	b2c9      	uxtb	r1, r1
    a1be:	e7ca      	b.n	a156 <get_fileinfo+0x272>
    a1c0:	3120      	adds	r1, #32
    a1c2:	b2c9      	uxtb	r1, r1
    a1c4:	e7d0      	b.n	a168 <get_fileinfo+0x284>
			if (c == NDDE) c = (TCHAR)DDE;
    a1c6:	31e0      	adds	r1, #224	; 0xe0
    a1c8:	e6e0      	b.n	9f8c <get_fileinfo+0xa8>
    a1ca:	21e5      	movs	r1, #229	; 0xe5
    a1cc:	e6de      	b.n	9f8c <get_fileinfo+0xa8>
				*p++ = c;
    a1ce:	002a      	movs	r2, r5
    a1d0:	e6fa      	b.n	9fc8 <get_fileinfo+0xe4>
			*p++ = '.';
    a1d2:	0032      	movs	r2, r6
    a1d4:	e6f8      	b.n	9fc8 <get_fileinfo+0xe4>
    a1d6:	46c0      	nop			; (mov r8, r8)
    a1d8:	0000ffff 	.word	0x0000ffff
    a1dc:	0000e59d 	.word	0x0000e59d

0000a1e0 <move_window>:
{
    a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1e2:	4647      	mov	r7, r8
    a1e4:	46ce      	mov	lr, r9
    a1e6:	b580      	push	{r7, lr}
	wsect = fs->winsect;
    a1e8:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
    a1ea:	0004      	movs	r4, r0
    a1ec:	000f      	movs	r7, r1
	if (wsect != sector) {	/* Changed current window */
    a1ee:	428d      	cmp	r5, r1
    a1f0:	d004      	beq.n	a1fc <move_window+0x1c>
		if (fs->wflag) {	/* Write back dirty window if needed */
    a1f2:	7903      	ldrb	r3, [r0, #4]
    a1f4:	2b00      	cmp	r3, #0
    a1f6:	d111      	bne.n	a21c <move_window+0x3c>
		if (sector) {
    a1f8:	2f00      	cmp	r7, #0
    a1fa:	d104      	bne.n	a206 <move_window+0x26>
	return FR_OK;
    a1fc:	2000      	movs	r0, #0
}
    a1fe:	bc0c      	pop	{r2, r3}
    a200:	4690      	mov	r8, r2
    a202:	4699      	mov	r9, r3
    a204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    a206:	0021      	movs	r1, r4
    a208:	7860      	ldrb	r0, [r4, #1]
    a20a:	2301      	movs	r3, #1
    a20c:	003a      	movs	r2, r7
    a20e:	3134      	adds	r1, #52	; 0x34
    a210:	4d14      	ldr	r5, [pc, #80]	; (a264 <move_window+0x84>)
    a212:	47a8      	blx	r5
    a214:	2800      	cmp	r0, #0
    a216:	d123      	bne.n	a260 <move_window+0x80>
			fs->winsect = sector;
    a218:	6327      	str	r7, [r4, #48]	; 0x30
    a21a:	e7f0      	b.n	a1fe <move_window+0x1e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    a21c:	2334      	movs	r3, #52	; 0x34
    a21e:	4698      	mov	r8, r3
    a220:	4e11      	ldr	r6, [pc, #68]	; (a268 <move_window+0x88>)
    a222:	4480      	add	r8, r0
    a224:	3b33      	subs	r3, #51	; 0x33
    a226:	7840      	ldrb	r0, [r0, #1]
    a228:	002a      	movs	r2, r5
    a22a:	4641      	mov	r1, r8
    a22c:	46b1      	mov	r9, r6
    a22e:	47b0      	blx	r6
    a230:	2800      	cmp	r0, #0
    a232:	d115      	bne.n	a260 <move_window+0x80>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    a234:	6a23      	ldr	r3, [r4, #32]
    a236:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    a238:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    a23a:	189a      	adds	r2, r3, r2
    a23c:	4295      	cmp	r5, r2
    a23e:	d2db      	bcs.n	a1f8 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a240:	78e6      	ldrb	r6, [r4, #3]
    a242:	2e01      	cmp	r6, #1
    a244:	d801      	bhi.n	a24a <move_window+0x6a>
    a246:	e7d7      	b.n	a1f8 <move_window+0x18>
    a248:	6a23      	ldr	r3, [r4, #32]
					wsect += fs->fsize;
    a24a:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a24c:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    a24e:	7860      	ldrb	r0, [r4, #1]
    a250:	2301      	movs	r3, #1
    a252:	002a      	movs	r2, r5
    a254:	4641      	mov	r1, r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a256:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    a258:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a25a:	2e01      	cmp	r6, #1
    a25c:	d1f4      	bne.n	a248 <move_window+0x68>
    a25e:	e7cb      	b.n	a1f8 <move_window+0x18>
				return FR_DISK_ERR;
    a260:	2001      	movs	r0, #1
    a262:	e7cc      	b.n	a1fe <move_window+0x1e>
    a264:	00009d3d 	.word	0x00009d3d
    a268:	00009dc1 	.word	0x00009dc1

0000a26c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a26e:	464e      	mov	r6, r9
    a270:	4645      	mov	r5, r8
    a272:	46de      	mov	lr, fp
    a274:	4657      	mov	r7, sl
    a276:	b5e0      	push	{r5, r6, r7, lr}
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    a278:	6803      	ldr	r3, [r0, #0]
{
    a27a:	b083      	sub	sp, #12
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    a27c:	781d      	ldrb	r5, [r3, #0]
{
    a27e:	0016      	movs	r6, r2
	vol = p[0] - '0';					/* Is there a drive number? */
    a280:	3d30      	subs	r5, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    a282:	2d09      	cmp	r5, #9
    a284:	d802      	bhi.n	a28c <chk_mounted+0x20>
    a286:	785a      	ldrb	r2, [r3, #1]
    a288:	2a3a      	cmp	r2, #58	; 0x3a
    a28a:	d020      	beq.n	a2ce <chk_mounted+0x62>
		p += 2; *path = p;				/* Return pointer to the path name */
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
    a28c:	4bbb      	ldr	r3, [pc, #748]	; (a57c <chk_mounted+0x310>)
    a28e:	781d      	ldrb	r5, [r3, #0]
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    a290:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    a292:	2d00      	cmp	r5, #0
    a294:	d006      	beq.n	a2a4 <chk_mounted+0x38>
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    a296:	b003      	add	sp, #12
    a298:	bc3c      	pop	{r2, r3, r4, r5}
    a29a:	4690      	mov	r8, r2
    a29c:	4699      	mov	r9, r3
    a29e:	46a2      	mov	sl, r4
    a2a0:	46ab      	mov	fp, r5
    a2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    a2a4:	4bb6      	ldr	r3, [pc, #728]	; (a580 <chk_mounted+0x314>)
    a2a6:	681c      	ldr	r4, [r3, #0]
    a2a8:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    a2aa:	2c00      	cmp	r4, #0
    a2ac:	d02c      	beq.n	a308 <chk_mounted+0x9c>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    a2ae:	7823      	ldrb	r3, [r4, #0]
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	d00f      	beq.n	a2d4 <chk_mounted+0x68>
		stat = disk_status(fs->drv);
    a2b4:	4bb3      	ldr	r3, [pc, #716]	; (a584 <chk_mounted+0x318>)
    a2b6:	7860      	ldrb	r0, [r4, #1]
    a2b8:	4798      	blx	r3
    a2ba:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    a2bc:	07c2      	lsls	r2, r0, #31
    a2be:	d409      	bmi.n	a2d4 <chk_mounted+0x68>
			return FR_OK;				/* The file system object is valid */
    a2c0:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    a2c2:	2e00      	cmp	r6, #0
    a2c4:	d0e7      	beq.n	a296 <chk_mounted+0x2a>
    a2c6:	075b      	lsls	r3, r3, #29
    a2c8:	d520      	bpl.n	a30c <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    a2ca:	200a      	movs	r0, #10
    a2cc:	e7e3      	b.n	a296 <chk_mounted+0x2a>
		p += 2; *path = p;				/* Return pointer to the path name */
    a2ce:	3302      	adds	r3, #2
    a2d0:	6003      	str	r3, [r0, #0]
    a2d2:	e7dd      	b.n	a290 <chk_mounted+0x24>
	fs->fs_type = 0;					/* Clear the file system object */
    a2d4:	2300      	movs	r3, #0
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    a2d6:	2000      	movs	r0, #0
	fs->fs_type = 0;					/* Clear the file system object */
    a2d8:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    a2da:	7063      	strb	r3, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    a2dc:	4baa      	ldr	r3, [pc, #680]	; (a588 <chk_mounted+0x31c>)
    a2de:	4798      	blx	r3
    a2e0:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    a2e2:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    a2e4:	07da      	lsls	r2, r3, #31
    a2e6:	d4d6      	bmi.n	a296 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    a2e8:	2e00      	cmp	r6, #0
    a2ea:	d001      	beq.n	a2f0 <chk_mounted+0x84>
    a2ec:	075b      	lsls	r3, r3, #29
    a2ee:	d4ec      	bmi.n	a2ca <chk_mounted+0x5e>
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    a2f0:	0026      	movs	r6, r4
    a2f2:	3634      	adds	r6, #52	; 0x34
    a2f4:	7860      	ldrb	r0, [r4, #1]
    a2f6:	2301      	movs	r3, #1
    a2f8:	2200      	movs	r2, #0
    a2fa:	0031      	movs	r1, r6
    a2fc:	4da3      	ldr	r5, [pc, #652]	; (a58c <chk_mounted+0x320>)
    a2fe:	47a8      	blx	r5
    a300:	2800      	cmp	r0, #0
    a302:	d005      	beq.n	a310 <chk_mounted+0xa4>
	if (fmt == 3) return FR_DISK_ERR;
    a304:	2001      	movs	r0, #1
    a306:	e7c6      	b.n	a296 <chk_mounted+0x2a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    a308:	200c      	movs	r0, #12
    a30a:	e7c4      	b.n	a296 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    a30c:	0028      	movs	r0, r5
    a30e:	e7c2      	b.n	a296 <chk_mounted+0x2a>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    a310:	4b9f      	ldr	r3, [pc, #636]	; (a590 <chk_mounted+0x324>)
    a312:	4aa0      	ldr	r2, [pc, #640]	; (a594 <chk_mounted+0x328>)
    a314:	4698      	mov	r8, r3
    a316:	5ce3      	ldrb	r3, [r4, r3]
    a318:	5ca7      	ldrb	r7, [r4, r2]
    a31a:	021b      	lsls	r3, r3, #8
    a31c:	431f      	orrs	r7, r3
    a31e:	4b9e      	ldr	r3, [pc, #632]	; (a598 <chk_mounted+0x32c>)
    a320:	b23f      	sxth	r7, r7
    a322:	4691      	mov	r9, r2
    a324:	429f      	cmp	r7, r3
    a326:	d001      	beq.n	a32c <chk_mounted+0xc0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    a328:	200d      	movs	r0, #13
    a32a:	e7b4      	b.n	a296 <chk_mounted+0x2a>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    a32c:	236a      	movs	r3, #106	; 0x6a
    a32e:	469c      	mov	ip, r3
    a330:	44a4      	add	ip, r4
    a332:	4663      	mov	r3, ip
    a334:	881a      	ldrh	r2, [r3, #0]
    a336:	9301      	str	r3, [sp, #4]
    a338:	885b      	ldrh	r3, [r3, #2]
    a33a:	041b      	lsls	r3, r3, #16
    a33c:	4313      	orrs	r3, r2
    a33e:	4a97      	ldr	r2, [pc, #604]	; (a59c <chk_mounted+0x330>)
    a340:	021b      	lsls	r3, r3, #8
    a342:	0a1b      	lsrs	r3, r3, #8
    a344:	4692      	mov	sl, r2
    a346:	4293      	cmp	r3, r2
    a348:	d100      	bne.n	a34c <chk_mounted+0xe0>
    a34a:	e0d7      	b.n	a4fc <chk_mounted+0x290>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    a34c:	2386      	movs	r3, #134	; 0x86
    a34e:	469b      	mov	fp, r3
    a350:	44a3      	add	fp, r4
    a352:	5ae2      	ldrh	r2, [r4, r3]
    a354:	465b      	mov	r3, fp
    a356:	885b      	ldrh	r3, [r3, #2]
    a358:	041b      	lsls	r3, r3, #16
    a35a:	4313      	orrs	r3, r2
    a35c:	021b      	lsls	r3, r3, #8
    a35e:	0a1b      	lsrs	r3, r3, #8
    a360:	4553      	cmp	r3, sl
    a362:	d100      	bne.n	a366 <chk_mounted+0xfa>
    a364:	e0ca      	b.n	a4fc <chk_mounted+0x290>
		if (tbl[4]) {						/* Is the partition existing? */
    a366:	23fb      	movs	r3, #251	; 0xfb
    a368:	005b      	lsls	r3, r3, #1
    a36a:	5ce3      	ldrb	r3, [r4, r3]
    a36c:	2b00      	cmp	r3, #0
    a36e:	d0db      	beq.n	a328 <chk_mounted+0xbc>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    a370:	0021      	movs	r1, r4
    a372:	23fd      	movs	r3, #253	; 0xfd
    a374:	31fb      	adds	r1, #251	; 0xfb
    a376:	31ff      	adds	r1, #255	; 0xff
    a378:	784a      	ldrb	r2, [r1, #1]
    a37a:	005b      	lsls	r3, r3, #1
    a37c:	5ce3      	ldrb	r3, [r4, r3]
    a37e:	0212      	lsls	r2, r2, #8
    a380:	4313      	orrs	r3, r2
    a382:	788a      	ldrb	r2, [r1, #2]
    a384:	0412      	lsls	r2, r2, #16
    a386:	431a      	orrs	r2, r3
    a388:	78cb      	ldrb	r3, [r1, #3]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    a38a:	0031      	movs	r1, r6
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    a38c:	061b      	lsls	r3, r3, #24
    a38e:	4313      	orrs	r3, r2
    a390:	9300      	str	r3, [sp, #0]
    a392:	001a      	movs	r2, r3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    a394:	7860      	ldrb	r0, [r4, #1]
    a396:	2301      	movs	r3, #1
    a398:	47a8      	blx	r5
    a39a:	2800      	cmp	r0, #0
    a39c:	d1b2      	bne.n	a304 <chk_mounted+0x98>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    a39e:	4643      	mov	r3, r8
    a3a0:	5ce2      	ldrb	r2, [r4, r3]
    a3a2:	464b      	mov	r3, r9
    a3a4:	5ce3      	ldrb	r3, [r4, r3]
    a3a6:	0212      	lsls	r2, r2, #8
    a3a8:	4313      	orrs	r3, r2
    a3aa:	b21b      	sxth	r3, r3
    a3ac:	42bb      	cmp	r3, r7
    a3ae:	d1bb      	bne.n	a328 <chk_mounted+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    a3b0:	9b01      	ldr	r3, [sp, #4]
    a3b2:	881a      	ldrh	r2, [r3, #0]
    a3b4:	885b      	ldrh	r3, [r3, #2]
    a3b6:	041b      	lsls	r3, r3, #16
    a3b8:	4313      	orrs	r3, r2
    a3ba:	021b      	lsls	r3, r3, #8
    a3bc:	0a1b      	lsrs	r3, r3, #8
    a3be:	4553      	cmp	r3, sl
    a3c0:	d009      	beq.n	a3d6 <chk_mounted+0x16a>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    a3c2:	2386      	movs	r3, #134	; 0x86
    a3c4:	5ae2      	ldrh	r2, [r4, r3]
    a3c6:	465b      	mov	r3, fp
    a3c8:	885b      	ldrh	r3, [r3, #2]
    a3ca:	041b      	lsls	r3, r3, #16
    a3cc:	4313      	orrs	r3, r2
    a3ce:	021b      	lsls	r3, r3, #8
    a3d0:	0a1b      	lsrs	r3, r3, #8
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    a3d2:	4553      	cmp	r3, sl
    a3d4:	d1a8      	bne.n	a328 <chk_mounted+0xbc>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    a3d6:	2340      	movs	r3, #64	; 0x40
    a3d8:	5ce2      	ldrb	r2, [r4, r3]
    a3da:	3b01      	subs	r3, #1
    a3dc:	5ce3      	ldrb	r3, [r4, r3]
    a3de:	0212      	lsls	r2, r2, #8
    a3e0:	4313      	orrs	r3, r2
    a3e2:	2280      	movs	r2, #128	; 0x80
    a3e4:	b21b      	sxth	r3, r3
    a3e6:	0092      	lsls	r2, r2, #2
    a3e8:	4293      	cmp	r3, r2
    a3ea:	d19d      	bne.n	a328 <chk_mounted+0xbc>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    a3ec:	234b      	movs	r3, #75	; 0x4b
    a3ee:	5ce2      	ldrb	r2, [r4, r3]
    a3f0:	3b01      	subs	r3, #1
    a3f2:	5ce3      	ldrb	r3, [r4, r3]
    a3f4:	0212      	lsls	r2, r2, #8
    a3f6:	4313      	orrs	r3, r2
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    a3f8:	d100      	bne.n	a3fc <chk_mounted+0x190>
    a3fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
	fs->fsize = fasize;
    a3fc:	6223      	str	r3, [r4, #32]
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    a3fe:	4699      	mov	r9, r3
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    a400:	2344      	movs	r3, #68	; 0x44
    a402:	5ce3      	ldrb	r3, [r4, r3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    a404:	1e5a      	subs	r2, r3, #1
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    a406:	70e3      	strb	r3, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    a408:	2a01      	cmp	r2, #1
    a40a:	d88d      	bhi.n	a328 <chk_mounted+0xbc>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    a40c:	2241      	movs	r2, #65	; 0x41
    a40e:	5ca1      	ldrb	r1, [r4, r2]
    a410:	70a1      	strb	r1, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    a412:	2900      	cmp	r1, #0
    a414:	d100      	bne.n	a418 <chk_mounted+0x1ac>
    a416:	e787      	b.n	a328 <chk_mounted+0xbc>
    a418:	1e4a      	subs	r2, r1, #1
    a41a:	4211      	tst	r1, r2
    a41c:	d000      	beq.n	a420 <chk_mounted+0x1b4>
    a41e:	e783      	b.n	a328 <chk_mounted+0xbc>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    a420:	2246      	movs	r2, #70	; 0x46
    a422:	2045      	movs	r0, #69	; 0x45
    a424:	5ca2      	ldrb	r2, [r4, r2]
    a426:	5c20      	ldrb	r0, [r4, r0]
    a428:	0212      	lsls	r2, r2, #8
    a42a:	4310      	orrs	r0, r2
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    a42c:	0002      	movs	r2, r0
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    a42e:	4682      	mov	sl, r0
    a430:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    a432:	0712      	lsls	r2, r2, #28
    a434:	d000      	beq.n	a438 <chk_mounted+0x1cc>
    a436:	e777      	b.n	a328 <chk_mounted+0xbc>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    a438:	2248      	movs	r2, #72	; 0x48
    a43a:	2047      	movs	r0, #71	; 0x47
    a43c:	5ca2      	ldrb	r2, [r4, r2]
    a43e:	5c20      	ldrb	r0, [r4, r0]
    a440:	0212      	lsls	r2, r2, #8
    a442:	4310      	orrs	r0, r2
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    a444:	d100      	bne.n	a448 <chk_mounted+0x1dc>
    a446:	6d60      	ldr	r0, [r4, #84]	; 0x54
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    a448:	2243      	movs	r2, #67	; 0x43
    a44a:	2742      	movs	r7, #66	; 0x42
    a44c:	5ca2      	ldrb	r2, [r4, r2]
    a44e:	5de7      	ldrb	r7, [r4, r7]
    a450:	0212      	lsls	r2, r2, #8
    a452:	4317      	orrs	r7, r2
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    a454:	d100      	bne.n	a458 <chk_mounted+0x1ec>
    a456:	e767      	b.n	a328 <chk_mounted+0xbc>
	fasize *= b;										/* Number of sectors for FAT area */
    a458:	464a      	mov	r2, r9
    a45a:	435a      	muls	r2, r3
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    a45c:	4653      	mov	r3, sl
	fasize *= b;										/* Number of sectors for FAT area */
    a45e:	4693      	mov	fp, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    a460:	091b      	lsrs	r3, r3, #4
    a462:	19db      	adds	r3, r3, r7
    a464:	445b      	add	r3, fp
    a466:	4698      	mov	r8, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    a468:	4298      	cmp	r0, r3
    a46a:	d200      	bcs.n	a46e <chk_mounted+0x202>
    a46c:	e75c      	b.n	a328 <chk_mounted+0xbc>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    a46e:	1ac0      	subs	r0, r0, r3
    a470:	4b4b      	ldr	r3, [pc, #300]	; (a5a0 <chk_mounted+0x334>)
    a472:	4798      	blx	r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    a474:	2800      	cmp	r0, #0
    a476:	d100      	bne.n	a47a <chk_mounted+0x20e>
    a478:	e756      	b.n	a328 <chk_mounted+0xbc>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    a47a:	4b4a      	ldr	r3, [pc, #296]	; (a5a4 <chk_mounted+0x338>)
    a47c:	4298      	cmp	r0, r3
    a47e:	d800      	bhi.n	a482 <chk_mounted+0x216>
    a480:	e09c      	b.n	a5bc <chk_mounted+0x350>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    a482:	4b49      	ldr	r3, [pc, #292]	; (a5a8 <chk_mounted+0x33c>)
    a484:	4298      	cmp	r0, r3
    a486:	d95b      	bls.n	a540 <chk_mounted+0x2d4>
	fs->database = bsect + sysect;						/* Data start sector */
    a488:	9a00      	ldr	r2, [sp, #0]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    a48a:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
    a48c:	0013      	movs	r3, r2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    a48e:	4694      	mov	ip, r2
	fs->database = bsect + sysect;						/* Data start sector */
    a490:	4443      	add	r3, r8
    a492:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    a494:	4653      	mov	r3, sl
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    a496:	4467      	add	r7, ip
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    a498:	61e0      	str	r0, [r4, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    a49a:	6267      	str	r7, [r4, #36]	; 0x24
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    a49c:	2b00      	cmp	r3, #0
    a49e:	d000      	beq.n	a4a2 <chk_mounted+0x236>
    a4a0:	e742      	b.n	a328 <chk_mounted+0xbc>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    a4a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    a4a4:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    a4a6:	62a3      	str	r3, [r4, #40]	; 0x28
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    a4a8:	4b40      	ldr	r3, [pc, #256]	; (a5ac <chk_mounted+0x340>)
    a4aa:	18c3      	adds	r3, r0, r3
    a4ac:	0a5b      	lsrs	r3, r3, #9
    a4ae:	454b      	cmp	r3, r9
    a4b0:	d900      	bls.n	a4b4 <chk_mounted+0x248>
    a4b2:	e739      	b.n	a328 <chk_mounted+0xbc>
	fs->free_clust = 0xFFFFFFFF;
    a4b4:	2301      	movs	r3, #1
    a4b6:	425b      	negs	r3, r3
    a4b8:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
    a4ba:	4653      	mov	r3, sl
    a4bc:	60e3      	str	r3, [r4, #12]
	 	fs->fsi_flag = 0;
    a4be:	4653      	mov	r3, sl
    a4c0:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    a4c2:	2365      	movs	r3, #101	; 0x65
    a4c4:	2264      	movs	r2, #100	; 0x64
    a4c6:	5ce3      	ldrb	r3, [r4, r3]
    a4c8:	5ca2      	ldrb	r2, [r4, r2]
    a4ca:	021b      	lsls	r3, r3, #8
    a4cc:	431a      	orrs	r2, r3
    a4ce:	9b00      	ldr	r3, [sp, #0]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    a4d0:	7860      	ldrb	r0, [r4, #1]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    a4d2:	469c      	mov	ip, r3
    a4d4:	4462      	add	r2, ip
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    a4d6:	2301      	movs	r3, #1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    a4d8:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    a4da:	0031      	movs	r1, r6
    a4dc:	47a8      	blx	r5
    a4de:	2303      	movs	r3, #3
    a4e0:	2800      	cmp	r0, #0
    a4e2:	d00e      	beq.n	a502 <chk_mounted+0x296>
	fs->winsect = 0;		/* Invalidate sector cache */
    a4e4:	2000      	movs	r0, #0
	fs->id = ++Fsid;		/* File system mount ID */
    a4e6:	4a32      	ldr	r2, [pc, #200]	; (a5b0 <chk_mounted+0x344>)
	fs->fs_type = fmt;		/* FAT sub-type */
    a4e8:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    a4ea:	8813      	ldrh	r3, [r2, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
    a4ec:	6320      	str	r0, [r4, #48]	; 0x30
	fs->id = ++Fsid;		/* File system mount ID */
    a4ee:	3301      	adds	r3, #1
    a4f0:	b29b      	uxth	r3, r3
    a4f2:	8013      	strh	r3, [r2, #0]
    a4f4:	80e3      	strh	r3, [r4, #6]
	fs->wflag = 0;
    a4f6:	7120      	strb	r0, [r4, #4]
	fs->cdir = 0;			/* Current directory (root dir) */
    a4f8:	61a0      	str	r0, [r4, #24]
	return FR_OK;
    a4fa:	e6cc      	b.n	a296 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    a4fc:	2300      	movs	r3, #0
    a4fe:	9300      	str	r3, [sp, #0]
    a500:	e769      	b.n	a3d6 <chk_mounted+0x16a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    a502:	4b23      	ldr	r3, [pc, #140]	; (a590 <chk_mounted+0x324>)
    a504:	4a23      	ldr	r2, [pc, #140]	; (a594 <chk_mounted+0x328>)
    a506:	5ce3      	ldrb	r3, [r4, r3]
    a508:	5ca2      	ldrb	r2, [r4, r2]
    a50a:	021b      	lsls	r3, r3, #8
    a50c:	431a      	orrs	r2, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    a50e:	4922      	ldr	r1, [pc, #136]	; (a598 <chk_mounted+0x32c>)
    a510:	b212      	sxth	r2, r2
    a512:	2303      	movs	r3, #3
    a514:	428a      	cmp	r2, r1
    a516:	d1e5      	bne.n	a4e4 <chk_mounted+0x278>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    a518:	4a26      	ldr	r2, [pc, #152]	; (a5b4 <chk_mounted+0x348>)
    a51a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a51c:	4291      	cmp	r1, r2
    a51e:	d1e1      	bne.n	a4e4 <chk_mounted+0x278>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    a520:	2386      	movs	r3, #134	; 0x86
    a522:	009b      	lsls	r3, r3, #2
    a524:	58e1      	ldr	r1, [r4, r3]
    a526:	4a24      	ldr	r2, [pc, #144]	; (a5b8 <chk_mounted+0x34c>)
    a528:	2303      	movs	r3, #3
    a52a:	4291      	cmp	r1, r2
    a52c:	d1da      	bne.n	a4e4 <chk_mounted+0x278>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    a52e:	2288      	movs	r2, #136	; 0x88
    a530:	0092      	lsls	r2, r2, #2
    a532:	58a2      	ldr	r2, [r4, r2]
    a534:	60e2      	str	r2, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    a536:	2287      	movs	r2, #135	; 0x87
    a538:	0092      	lsls	r2, r2, #2
    a53a:	58a2      	ldr	r2, [r4, r2]
    a53c:	6122      	str	r2, [r4, #16]
    a53e:	e7d1      	b.n	a4e4 <chk_mounted+0x278>
	fs->database = bsect + sysect;						/* Data start sector */
    a540:	9a00      	ldr	r2, [sp, #0]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    a542:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
    a544:	0013      	movs	r3, r2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    a546:	4694      	mov	ip, r2
	fs->database = bsect + sysect;						/* Data start sector */
    a548:	4443      	add	r3, r8
    a54a:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    a54c:	4653      	mov	r3, sl
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    a54e:	4467      	add	r7, ip
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    a550:	61e0      	str	r0, [r4, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    a552:	6267      	str	r7, [r4, #36]	; 0x24
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    a554:	2b00      	cmp	r3, #0
    a556:	d100      	bne.n	a55a <chk_mounted+0x2ee>
    a558:	e6e6      	b.n	a328 <chk_mounted+0xbc>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    a55a:	4b14      	ldr	r3, [pc, #80]	; (a5ac <chk_mounted+0x340>)
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    a55c:	0040      	lsls	r0, r0, #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    a55e:	445f      	add	r7, fp
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    a560:	18c3      	adds	r3, r0, r3
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    a562:	62a7      	str	r7, [r4, #40]	; 0x28
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    a564:	0a5b      	lsrs	r3, r3, #9
    a566:	4599      	cmp	r9, r3
    a568:	d200      	bcs.n	a56c <chk_mounted+0x300>
    a56a:	e6dd      	b.n	a328 <chk_mounted+0xbc>
	fs->free_clust = 0xFFFFFFFF;
    a56c:	2301      	movs	r3, #1
    a56e:	425b      	negs	r3, r3
    a570:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
    a572:	2300      	movs	r3, #0
    a574:	60e3      	str	r3, [r4, #12]
    a576:	3302      	adds	r3, #2
    a578:	e7b4      	b.n	a4e4 <chk_mounted+0x278>
    a57a:	46c0      	nop			; (mov r8, r8)
    a57c:	20000ca0 	.word	0x20000ca0
    a580:	20000ca4 	.word	0x20000ca4
    a584:	00009d1d 	.word	0x00009d1d
    a588:	00009ce9 	.word	0x00009ce9
    a58c:	00009d3d 	.word	0x00009d3d
    a590:	00000233 	.word	0x00000233
    a594:	00000232 	.word	0x00000232
    a598:	ffffaa55 	.word	0xffffaa55
    a59c:	00544146 	.word	0x00544146
    a5a0:	0002593d 	.word	0x0002593d
    a5a4:	00000ff5 	.word	0x00000ff5
    a5a8:	0000fff5 	.word	0x0000fff5
    a5ac:	000001ff 	.word	0x000001ff
    a5b0:	20000ca8 	.word	0x20000ca8
    a5b4:	41615252 	.word	0x41615252
    a5b8:	61417272 	.word	0x61417272
	fs->database = bsect + sysect;						/* Data start sector */
    a5bc:	9a00      	ldr	r2, [sp, #0]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    a5be:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
    a5c0:	0013      	movs	r3, r2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    a5c2:	4694      	mov	ip, r2
	fs->database = bsect + sysect;						/* Data start sector */
    a5c4:	4443      	add	r3, r8
    a5c6:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    a5c8:	4653      	mov	r3, sl
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    a5ca:	4467      	add	r7, ip
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    a5cc:	61e0      	str	r0, [r4, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    a5ce:	6267      	str	r7, [r4, #36]	; 0x24
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    a5d0:	2b00      	cmp	r3, #0
    a5d2:	d100      	bne.n	a5d6 <chk_mounted+0x36a>
    a5d4:	e6a8      	b.n	a328 <chk_mounted+0xbc>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    a5d6:	2301      	movs	r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    a5d8:	490a      	ldr	r1, [pc, #40]	; (a604 <chk_mounted+0x398>)
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    a5da:	0002      	movs	r2, r0
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    a5dc:	468c      	mov	ip, r1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    a5de:	39fd      	subs	r1, #253	; 0xfd
    a5e0:	39ff      	subs	r1, #255	; 0xff
    a5e2:	4348      	muls	r0, r1
    a5e4:	40d8      	lsrs	r0, r3
    a5e6:	401a      	ands	r2, r3
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    a5e8:	4462      	add	r2, ip
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    a5ea:	445f      	add	r7, fp
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    a5ec:	1812      	adds	r2, r2, r0
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    a5ee:	62a7      	str	r7, [r4, #40]	; 0x28
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    a5f0:	0a52      	lsrs	r2, r2, #9
    a5f2:	4591      	cmp	r9, r2
    a5f4:	d200      	bcs.n	a5f8 <chk_mounted+0x38c>
    a5f6:	e697      	b.n	a328 <chk_mounted+0xbc>
	fs->free_clust = 0xFFFFFFFF;
    a5f8:	2201      	movs	r2, #1
    a5fa:	4252      	negs	r2, r2
    a5fc:	6122      	str	r2, [r4, #16]
	fs->last_clust = 0;
    a5fe:	2200      	movs	r2, #0
    a600:	60e2      	str	r2, [r4, #12]
    a602:	e76f      	b.n	a4e4 <chk_mounted+0x278>
    a604:	000001ff 	.word	0x000001ff

0000a608 <sync>:
{
    a608:	b5f0      	push	{r4, r5, r6, r7, lr}
    a60a:	46c6      	mov	lr, r8
    a60c:	b500      	push	{lr}
	wsect = fs->winsect;
    a60e:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
    a610:	0004      	movs	r4, r0
	if (wsect != sector) {	/* Changed current window */
    a612:	2d00      	cmp	r5, #0
    a614:	d002      	beq.n	a61c <sync+0x14>
		if (fs->wflag) {	/* Write back dirty window if needed */
    a616:	7903      	ldrb	r3, [r0, #4]
    a618:	2b00      	cmp	r3, #0
    a61a:	d10d      	bne.n	a638 <sync+0x30>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    a61c:	7823      	ldrb	r3, [r4, #0]
    a61e:	2b03      	cmp	r3, #3
    a620:	d02d      	beq.n	a67e <sync+0x76>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    a622:	4b34      	ldr	r3, [pc, #208]	; (a6f4 <sync+0xec>)
    a624:	7860      	ldrb	r0, [r4, #1]
    a626:	2200      	movs	r2, #0
    a628:	2100      	movs	r1, #0
    a62a:	4798      	blx	r3
    a62c:	1e43      	subs	r3, r0, #1
    a62e:	4198      	sbcs	r0, r3
    a630:	b2c0      	uxtb	r0, r0
}
    a632:	bc04      	pop	{r2}
    a634:	4690      	mov	r8, r2
    a636:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    a638:	0007      	movs	r7, r0
    a63a:	3734      	adds	r7, #52	; 0x34
    a63c:	2301      	movs	r3, #1
    a63e:	4e2e      	ldr	r6, [pc, #184]	; (a6f8 <sync+0xf0>)
    a640:	7840      	ldrb	r0, [r0, #1]
    a642:	002a      	movs	r2, r5
    a644:	0039      	movs	r1, r7
    a646:	47b0      	blx	r6
    a648:	46b0      	mov	r8, r6
    a64a:	0003      	movs	r3, r0
    a64c:	2001      	movs	r0, #1
    a64e:	2b00      	cmp	r3, #0
    a650:	d1ef      	bne.n	a632 <sync+0x2a>
			fs->wflag = 0;
    a652:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    a654:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a656:	6a23      	ldr	r3, [r4, #32]
    a658:	189a      	adds	r2, r3, r2
    a65a:	4295      	cmp	r5, r2
    a65c:	d2de      	bcs.n	a61c <sync+0x14>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a65e:	78e6      	ldrb	r6, [r4, #3]
    a660:	2e01      	cmp	r6, #1
    a662:	d801      	bhi.n	a668 <sync+0x60>
    a664:	e7da      	b.n	a61c <sync+0x14>
    a666:	6a23      	ldr	r3, [r4, #32]
					wsect += fs->fsize;
    a668:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a66a:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    a66c:	7860      	ldrb	r0, [r4, #1]
    a66e:	2301      	movs	r3, #1
    a670:	002a      	movs	r2, r5
    a672:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a674:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    a676:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a678:	2e01      	cmp	r6, #1
    a67a:	d1f4      	bne.n	a666 <sync+0x5e>
    a67c:	e7ce      	b.n	a61c <sync+0x14>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    a67e:	7963      	ldrb	r3, [r4, #5]
    a680:	2b00      	cmp	r3, #0
    a682:	d0ce      	beq.n	a622 <sync+0x1a>
    a684:	0025      	movs	r5, r4
			fs->winsect = 0;
    a686:	2600      	movs	r6, #0
    a688:	2280      	movs	r2, #128	; 0x80
    a68a:	3534      	adds	r5, #52	; 0x34
    a68c:	0092      	lsls	r2, r2, #2
    a68e:	2100      	movs	r1, #0
    a690:	0028      	movs	r0, r5
    a692:	4b1a      	ldr	r3, [pc, #104]	; (a6fc <sync+0xf4>)
    a694:	6326      	str	r6, [r4, #48]	; 0x30
    a696:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    a698:	2255      	movs	r2, #85	; 0x55
    a69a:	4b19      	ldr	r3, [pc, #100]	; (a700 <sync+0xf8>)
    a69c:	54e2      	strb	r2, [r4, r3]
    a69e:	4b19      	ldr	r3, [pc, #100]	; (a704 <sync+0xfc>)
    a6a0:	3255      	adds	r2, #85	; 0x55
    a6a2:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    a6a4:	4b18      	ldr	r3, [pc, #96]	; (a708 <sync+0x100>)
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    a6a6:	4a19      	ldr	r2, [pc, #100]	; (a70c <sync+0x104>)
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    a6a8:	6363      	str	r3, [r4, #52]	; 0x34
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    a6aa:	2386      	movs	r3, #134	; 0x86
    a6ac:	009b      	lsls	r3, r3, #2
    a6ae:	50e2      	str	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    a6b0:	2287      	movs	r2, #135	; 0x87
    a6b2:	6923      	ldr	r3, [r4, #16]
    a6b4:	0092      	lsls	r2, r2, #2
    a6b6:	54a3      	strb	r3, [r4, r2]
    a6b8:	4a15      	ldr	r2, [pc, #84]	; (a710 <sync+0x108>)
    a6ba:	0a19      	lsrs	r1, r3, #8
    a6bc:	54a1      	strb	r1, [r4, r2]
    a6be:	4a15      	ldr	r2, [pc, #84]	; (a714 <sync+0x10c>)
    a6c0:	0c19      	lsrs	r1, r3, #16
    a6c2:	54a1      	strb	r1, [r4, r2]
    a6c4:	4a14      	ldr	r2, [pc, #80]	; (a718 <sync+0x110>)
    a6c6:	0e1b      	lsrs	r3, r3, #24
    a6c8:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    a6ca:	68e3      	ldr	r3, [r4, #12]
    a6cc:	3201      	adds	r2, #1
    a6ce:	54a3      	strb	r3, [r4, r2]
    a6d0:	4a12      	ldr	r2, [pc, #72]	; (a71c <sync+0x114>)
    a6d2:	0a19      	lsrs	r1, r3, #8
    a6d4:	54a1      	strb	r1, [r4, r2]
    a6d6:	4a12      	ldr	r2, [pc, #72]	; (a720 <sync+0x118>)
    a6d8:	0c19      	lsrs	r1, r3, #16
    a6da:	54a1      	strb	r1, [r4, r2]
    a6dc:	4a11      	ldr	r2, [pc, #68]	; (a724 <sync+0x11c>)
    a6de:	0e1b      	lsrs	r3, r3, #24
    a6e0:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    a6e2:	0029      	movs	r1, r5
    a6e4:	7860      	ldrb	r0, [r4, #1]
    a6e6:	2301      	movs	r3, #1
    a6e8:	6962      	ldr	r2, [r4, #20]
    a6ea:	4d03      	ldr	r5, [pc, #12]	; (a6f8 <sync+0xf0>)
    a6ec:	47a8      	blx	r5
			fs->fsi_flag = 0;
    a6ee:	7166      	strb	r6, [r4, #5]
    a6f0:	e797      	b.n	a622 <sync+0x1a>
    a6f2:	46c0      	nop			; (mov r8, r8)
    a6f4:	00009e45 	.word	0x00009e45
    a6f8:	00009dc1 	.word	0x00009dc1
    a6fc:	00028a1d 	.word	0x00028a1d
    a700:	00000232 	.word	0x00000232
    a704:	00000233 	.word	0x00000233
    a708:	41615252 	.word	0x41615252
    a70c:	61417272 	.word	0x61417272
    a710:	0000021d 	.word	0x0000021d
    a714:	0000021e 	.word	0x0000021e
    a718:	0000021f 	.word	0x0000021f
    a71c:	00000221 	.word	0x00000221
    a720:	00000222 	.word	0x00000222
    a724:	00000223 	.word	0x00000223

0000a728 <put_fat.part.4>:
static FRESULT put_fat (
    a728:	b5f0      	push	{r4, r5, r6, r7, lr}
    a72a:	4657      	mov	r7, sl
    a72c:	4645      	mov	r5, r8
    a72e:	46de      	mov	lr, fp
    a730:	464e      	mov	r6, r9
    a732:	b5e0      	push	{r5, r6, r7, lr}
		switch (fs->fs_type) {
    a734:	7803      	ldrb	r3, [r0, #0]
static FRESULT put_fat (
    a736:	b083      	sub	sp, #12
    a738:	0004      	movs	r4, r0
    a73a:	000d      	movs	r5, r1
    a73c:	0017      	movs	r7, r2
		switch (fs->fs_type) {
    a73e:	2b02      	cmp	r3, #2
    a740:	d100      	bne.n	a744 <put_fat.part.4+0x1c>
    a742:	e0b2      	b.n	a8aa <put_fat.part.4+0x182>
    a744:	2b03      	cmp	r3, #3
    a746:	d100      	bne.n	a74a <put_fat.part.4+0x22>
    a748:	e07b      	b.n	a842 <put_fat.part.4+0x11a>
			res = FR_INT_ERR;
    a74a:	2002      	movs	r0, #2
		switch (fs->fs_type) {
    a74c:	2b01      	cmp	r3, #1
    a74e:	d008      	beq.n	a762 <put_fat.part.4+0x3a>
		fs->wflag = 1;
    a750:	2301      	movs	r3, #1
    a752:	7123      	strb	r3, [r4, #4]
}
    a754:	b003      	add	sp, #12
    a756:	bc3c      	pop	{r2, r3, r4, r5}
    a758:	4690      	mov	r8, r2
    a75a:	4699      	mov	r9, r3
    a75c:	46a2      	mov	sl, r4
    a75e:	46ab      	mov	fp, r5
    a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bc = clst; bc += bc / 2;
    a762:	084e      	lsrs	r6, r1, #1
    a764:	1873      	adds	r3, r6, r1
    a766:	9300      	str	r3, [sp, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    a768:	0a5b      	lsrs	r3, r3, #9
    a76a:	4699      	mov	r9, r3
    a76c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	wsect = fs->winsect;
    a76e:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    a770:	4491      	add	r9, r2
	wsect = fs->winsect;
    a772:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    a774:	4599      	cmp	r9, r3
    a776:	d00a      	beq.n	a78e <put_fat.part.4+0x66>
		if (fs->wflag) {	/* Write back dirty window if needed */
    a778:	7923      	ldrb	r3, [r4, #4]
    a77a:	2b00      	cmp	r3, #0
    a77c:	d000      	beq.n	a780 <put_fat.part.4+0x58>
    a77e:	e13f      	b.n	aa00 <put_fat.part.4+0x2d8>
		if (sector) {
    a780:	464b      	mov	r3, r9
    a782:	2b00      	cmp	r3, #0
    a784:	d000      	beq.n	a788 <put_fat.part.4+0x60>
    a786:	e16f      	b.n	aa68 <put_fat.part.4+0x340>
    a788:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a78a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a78c:	4698      	mov	r8, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    a78e:	2101      	movs	r1, #1
			p = &fs->win[bc % SS(fs)];
    a790:	9b00      	ldr	r3, [sp, #0]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    a792:	400d      	ands	r5, r1
			p = &fs->win[bc % SS(fs)];
    a794:	05db      	lsls	r3, r3, #23
    a796:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    a798:	46a9      	mov	r9, r5
    a79a:	2d00      	cmp	r5, #0
    a79c:	d100      	bne.n	a7a0 <put_fat.part.4+0x78>
    a79e:	e0ad      	b.n	a8fc <put_fat.part.4+0x1d4>
    a7a0:	200f      	movs	r0, #15
    a7a2:	18e3      	adds	r3, r4, r3
    a7a4:	3334      	adds	r3, #52	; 0x34
    a7a6:	781d      	ldrb	r5, [r3, #0]
    a7a8:	4005      	ands	r5, r0
    a7aa:	0138      	lsls	r0, r7, #4
    a7ac:	4328      	orrs	r0, r5
    a7ae:	7018      	strb	r0, [r3, #0]
			bc++;
    a7b0:	9b00      	ldr	r3, [sp, #0]
			fs->wflag = 1;
    a7b2:	7121      	strb	r1, [r4, #4]
			bc++;
    a7b4:	3301      	adds	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    a7b6:	0a5d      	lsrs	r5, r3, #9
    a7b8:	18ad      	adds	r5, r5, r2
			bc++;
    a7ba:	9300      	str	r3, [sp, #0]
	if (wsect != sector) {	/* Changed current window */
    a7bc:	4545      	cmp	r5, r8
    a7be:	d100      	bne.n	a7c2 <put_fat.part.4+0x9a>
    a7c0:	e16c      	b.n	aa9c <put_fat.part.4+0x374>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    a7c2:	2334      	movs	r3, #52	; 0x34
    a7c4:	469c      	mov	ip, r3
    a7c6:	44a4      	add	ip, r4
    a7c8:	4663      	mov	r3, ip
    a7ca:	9301      	str	r3, [sp, #4]
    a7cc:	4661      	mov	r1, ip
    a7ce:	7860      	ldrb	r0, [r4, #1]
    a7d0:	2301      	movs	r3, #1
    a7d2:	4642      	mov	r2, r8
    a7d4:	4eb3      	ldr	r6, [pc, #716]	; (aaa4 <put_fat.part.4+0x37c>)
    a7d6:	47b0      	blx	r6
    a7d8:	2800      	cmp	r0, #0
    a7da:	d000      	beq.n	a7de <put_fat.part.4+0xb6>
    a7dc:	e14d      	b.n	aa7a <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    a7de:	6a23      	ldr	r3, [r4, #32]
    a7e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    a7e2:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    a7e4:	189a      	adds	r2, r3, r2
    a7e6:	4542      	cmp	r2, r8
    a7e8:	d91e      	bls.n	a828 <put_fat.part.4+0x100>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a7ea:	78e2      	ldrb	r2, [r4, #3]
    a7ec:	4693      	mov	fp, r2
    a7ee:	2a01      	cmp	r2, #1
    a7f0:	d91a      	bls.n	a828 <put_fat.part.4+0x100>
    a7f2:	4642      	mov	r2, r8
    a7f4:	0031      	movs	r1, r6
    a7f6:	9800      	ldr	r0, [sp, #0]
    a7f8:	46a8      	mov	r8, r5
    a7fa:	0026      	movs	r6, r4
    a7fc:	4682      	mov	sl, r0
    a7fe:	465c      	mov	r4, fp
    a800:	0015      	movs	r5, r2
    a802:	46bb      	mov	fp, r7
    a804:	000f      	movs	r7, r1
    a806:	e000      	b.n	a80a <put_fat.part.4+0xe2>
    a808:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
    a80a:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a80c:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    a80e:	7870      	ldrb	r0, [r6, #1]
    a810:	2301      	movs	r3, #1
    a812:	002a      	movs	r2, r5
    a814:	9901      	ldr	r1, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a816:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    a818:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a81a:	2c01      	cmp	r4, #1
    a81c:	d1f4      	bne.n	a808 <put_fat.part.4+0xe0>
    a81e:	4653      	mov	r3, sl
    a820:	4645      	mov	r5, r8
    a822:	0034      	movs	r4, r6
    a824:	465f      	mov	r7, fp
    a826:	9300      	str	r3, [sp, #0]
		if (sector) {
    a828:	2d00      	cmp	r5, #0
    a82a:	d000      	beq.n	a82e <put_fat.part.4+0x106>
    a82c:	e12c      	b.n	aa88 <put_fat.part.4+0x360>
			p = &fs->win[bc % SS(fs)];
    a82e:	9b00      	ldr	r3, [sp, #0]
    a830:	05de      	lsls	r6, r3, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    a832:	464b      	mov	r3, r9
			p = &fs->win[bc % SS(fs)];
    a834:	0df6      	lsrs	r6, r6, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    a836:	2b00      	cmp	r3, #0
    a838:	d06e      	beq.n	a918 <put_fat.part.4+0x1f0>
    a83a:	093f      	lsrs	r7, r7, #4
    a83c:	b2ff      	uxtb	r7, r7
    a83e:	19a6      	adds	r6, r4, r6
    a840:	e073      	b.n	a92a <put_fat.part.4+0x202>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    a842:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a844:	09ce      	lsrs	r6, r1, #7
    a846:	469c      	mov	ip, r3
    a848:	0033      	movs	r3, r6
    a84a:	4463      	add	r3, ip
    a84c:	001a      	movs	r2, r3
    a84e:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    a850:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a852:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    a854:	4542      	cmp	r2, r8
    a856:	d012      	beq.n	a87e <put_fat.part.4+0x156>
		if (fs->wflag) {	/* Write back dirty window if needed */
    a858:	7903      	ldrb	r3, [r0, #4]
    a85a:	2b00      	cmp	r3, #0
    a85c:	d169      	bne.n	a932 <put_fat.part.4+0x20a>
		if (sector) {
    a85e:	9b00      	ldr	r3, [sp, #0]
    a860:	2b00      	cmp	r3, #0
    a862:	d00c      	beq.n	a87e <put_fat.part.4+0x156>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    a864:	0021      	movs	r1, r4
    a866:	001a      	movs	r2, r3
    a868:	7860      	ldrb	r0, [r4, #1]
    a86a:	2301      	movs	r3, #1
    a86c:	3134      	adds	r1, #52	; 0x34
    a86e:	4e8e      	ldr	r6, [pc, #568]	; (aaa8 <put_fat.part.4+0x380>)
    a870:	4691      	mov	r9, r2
    a872:	47b0      	blx	r6
    a874:	2800      	cmp	r0, #0
    a876:	d000      	beq.n	a87a <put_fat.part.4+0x152>
    a878:	e0ff      	b.n	aa7a <put_fat.part.4+0x352>
			fs->winsect = sector;
    a87a:	464b      	mov	r3, r9
    a87c:	6323      	str	r3, [r4, #48]	; 0x30
			p = &fs->win[clst * 4 % SS(fs)];
    a87e:	23fe      	movs	r3, #254	; 0xfe
    a880:	00ad      	lsls	r5, r5, #2
    a882:	005b      	lsls	r3, r3, #1
    a884:	401d      	ands	r5, r3
    a886:	002a      	movs	r2, r5
    a888:	3234      	adds	r2, #52	; 0x34
    a88a:	18a2      	adds	r2, r4, r2
			val |= LD_DWORD(p) & 0xF0000000;
    a88c:	78d3      	ldrb	r3, [r2, #3]
    a88e:	1965      	adds	r5, r4, r5
    a890:	091b      	lsrs	r3, r3, #4
    a892:	071b      	lsls	r3, r3, #28
    a894:	431f      	orrs	r7, r3
			ST_DWORD(p, val);
    a896:	0a3b      	lsrs	r3, r7, #8
			val |= LD_DWORD(p) & 0xF0000000;
    a898:	3534      	adds	r5, #52	; 0x34
			ST_DWORD(p, val);
    a89a:	702f      	strb	r7, [r5, #0]
    a89c:	7053      	strb	r3, [r2, #1]
    a89e:	0c3b      	lsrs	r3, r7, #16
    a8a0:	0e3f      	lsrs	r7, r7, #24
    a8a2:	7093      	strb	r3, [r2, #2]
    a8a4:	70d7      	strb	r7, [r2, #3]
    a8a6:	2000      	movs	r0, #0
    a8a8:	e752      	b.n	a750 <put_fat.part.4+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    a8aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a8ac:	0a0e      	lsrs	r6, r1, #8
    a8ae:	469c      	mov	ip, r3
    a8b0:	0033      	movs	r3, r6
    a8b2:	4463      	add	r3, ip
    a8b4:	001a      	movs	r2, r3
    a8b6:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    a8b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a8ba:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    a8bc:	4542      	cmp	r2, r8
    a8be:	d012      	beq.n	a8e6 <put_fat.part.4+0x1be>
		if (fs->wflag) {	/* Write back dirty window if needed */
    a8c0:	7903      	ldrb	r3, [r0, #4]
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	d169      	bne.n	a99a <put_fat.part.4+0x272>
		if (sector) {
    a8c6:	9b00      	ldr	r3, [sp, #0]
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d00c      	beq.n	a8e6 <put_fat.part.4+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    a8cc:	0021      	movs	r1, r4
    a8ce:	001a      	movs	r2, r3
    a8d0:	7860      	ldrb	r0, [r4, #1]
    a8d2:	2301      	movs	r3, #1
    a8d4:	3134      	adds	r1, #52	; 0x34
    a8d6:	4e74      	ldr	r6, [pc, #464]	; (aaa8 <put_fat.part.4+0x380>)
    a8d8:	4691      	mov	r9, r2
    a8da:	47b0      	blx	r6
    a8dc:	2800      	cmp	r0, #0
    a8de:	d000      	beq.n	a8e2 <put_fat.part.4+0x1ba>
    a8e0:	e0cb      	b.n	aa7a <put_fat.part.4+0x352>
			fs->winsect = sector;
    a8e2:	464b      	mov	r3, r9
    a8e4:	6323      	str	r3, [r4, #48]	; 0x30
			p = &fs->win[clst * 2 % SS(fs)];
    a8e6:	23ff      	movs	r3, #255	; 0xff
    a8e8:	006d      	lsls	r5, r5, #1
    a8ea:	005b      	lsls	r3, r3, #1
    a8ec:	401d      	ands	r5, r3
			ST_WORD(p, (WORD)val);
    a8ee:	1965      	adds	r5, r4, r5
    a8f0:	3534      	adds	r5, #52	; 0x34
    a8f2:	702f      	strb	r7, [r5, #0]
    a8f4:	0a3f      	lsrs	r7, r7, #8
    a8f6:	706f      	strb	r7, [r5, #1]
    a8f8:	2000      	movs	r0, #0
    a8fa:	e729      	b.n	a750 <put_fat.part.4+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    a8fc:	18e3      	adds	r3, r4, r3
    a8fe:	3334      	adds	r3, #52	; 0x34
    a900:	701f      	strb	r7, [r3, #0]
			bc++;
    a902:	9b00      	ldr	r3, [sp, #0]
			fs->wflag = 1;
    a904:	7121      	strb	r1, [r4, #4]
			bc++;
    a906:	3301      	adds	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    a908:	0a5d      	lsrs	r5, r3, #9
    a90a:	18ad      	adds	r5, r5, r2
			bc++;
    a90c:	9300      	str	r3, [sp, #0]
	if (wsect != sector) {	/* Changed current window */
    a90e:	4545      	cmp	r5, r8
    a910:	d000      	beq.n	a914 <put_fat.part.4+0x1ec>
    a912:	e756      	b.n	a7c2 <put_fat.part.4+0x9a>
			p = &fs->win[bc % SS(fs)];
    a914:	05de      	lsls	r6, r3, #23
    a916:	0df6      	lsrs	r6, r6, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    a918:	19a6      	adds	r6, r4, r6
    a91a:	0033      	movs	r3, r6
    a91c:	220f      	movs	r2, #15
    a91e:	3334      	adds	r3, #52	; 0x34
    a920:	781b      	ldrb	r3, [r3, #0]
    a922:	0a3f      	lsrs	r7, r7, #8
    a924:	4393      	bics	r3, r2
    a926:	4017      	ands	r7, r2
    a928:	431f      	orrs	r7, r3
    a92a:	3634      	adds	r6, #52	; 0x34
    a92c:	7037      	strb	r7, [r6, #0]
    a92e:	2000      	movs	r0, #0
    a930:	e70e      	b.n	a750 <put_fat.part.4+0x28>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    a932:	2334      	movs	r3, #52	; 0x34
    a934:	469b      	mov	fp, r3
    a936:	4e5b      	ldr	r6, [pc, #364]	; (aaa4 <put_fat.part.4+0x37c>)
    a938:	4483      	add	fp, r0
    a93a:	3b33      	subs	r3, #51	; 0x33
    a93c:	7840      	ldrb	r0, [r0, #1]
    a93e:	4642      	mov	r2, r8
    a940:	4659      	mov	r1, fp
    a942:	46b2      	mov	sl, r6
    a944:	47b0      	blx	r6
    a946:	2800      	cmp	r0, #0
    a948:	d000      	beq.n	a94c <put_fat.part.4+0x224>
    a94a:	e096      	b.n	aa7a <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    a94c:	6a23      	ldr	r3, [r4, #32]
    a94e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    a950:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    a952:	189a      	adds	r2, r3, r2
    a954:	4590      	cmp	r8, r2
    a956:	d282      	bcs.n	a85e <put_fat.part.4+0x136>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a958:	78e2      	ldrb	r2, [r4, #3]
    a95a:	4691      	mov	r9, r2
    a95c:	2a01      	cmp	r2, #1
    a95e:	d800      	bhi.n	a962 <put_fat.part.4+0x23a>
    a960:	e77d      	b.n	a85e <put_fat.part.4+0x136>
    a962:	9a00      	ldr	r2, [sp, #0]
    a964:	0029      	movs	r1, r5
    a966:	4645      	mov	r5, r8
    a968:	4690      	mov	r8, r2
    a96a:	003a      	movs	r2, r7
    a96c:	0026      	movs	r6, r4
    a96e:	465f      	mov	r7, fp
    a970:	464c      	mov	r4, r9
    a972:	4693      	mov	fp, r2
    a974:	4689      	mov	r9, r1
    a976:	e000      	b.n	a97a <put_fat.part.4+0x252>
    a978:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
    a97a:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a97c:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    a97e:	7870      	ldrb	r0, [r6, #1]
    a980:	2301      	movs	r3, #1
    a982:	002a      	movs	r2, r5
    a984:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a986:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    a988:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a98a:	2c01      	cmp	r4, #1
    a98c:	d1f4      	bne.n	a978 <put_fat.part.4+0x250>
    a98e:	4643      	mov	r3, r8
    a990:	0034      	movs	r4, r6
    a992:	9300      	str	r3, [sp, #0]
    a994:	464d      	mov	r5, r9
    a996:	465f      	mov	r7, fp
    a998:	e761      	b.n	a85e <put_fat.part.4+0x136>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    a99a:	2334      	movs	r3, #52	; 0x34
    a99c:	469b      	mov	fp, r3
    a99e:	4e41      	ldr	r6, [pc, #260]	; (aaa4 <put_fat.part.4+0x37c>)
    a9a0:	4483      	add	fp, r0
    a9a2:	3b33      	subs	r3, #51	; 0x33
    a9a4:	7840      	ldrb	r0, [r0, #1]
    a9a6:	4642      	mov	r2, r8
    a9a8:	4659      	mov	r1, fp
    a9aa:	46b2      	mov	sl, r6
    a9ac:	47b0      	blx	r6
    a9ae:	2800      	cmp	r0, #0
    a9b0:	d163      	bne.n	aa7a <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    a9b2:	6a23      	ldr	r3, [r4, #32]
    a9b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    a9b6:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    a9b8:	189a      	adds	r2, r3, r2
    a9ba:	4590      	cmp	r8, r2
    a9bc:	d283      	bcs.n	a8c6 <put_fat.part.4+0x19e>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a9be:	78e2      	ldrb	r2, [r4, #3]
    a9c0:	4691      	mov	r9, r2
    a9c2:	2a01      	cmp	r2, #1
    a9c4:	d800      	bhi.n	a9c8 <put_fat.part.4+0x2a0>
    a9c6:	e77e      	b.n	a8c6 <put_fat.part.4+0x19e>
    a9c8:	9a00      	ldr	r2, [sp, #0]
    a9ca:	0029      	movs	r1, r5
    a9cc:	4645      	mov	r5, r8
    a9ce:	4690      	mov	r8, r2
    a9d0:	003a      	movs	r2, r7
    a9d2:	0026      	movs	r6, r4
    a9d4:	465f      	mov	r7, fp
    a9d6:	464c      	mov	r4, r9
    a9d8:	4693      	mov	fp, r2
    a9da:	4689      	mov	r9, r1
    a9dc:	e000      	b.n	a9e0 <put_fat.part.4+0x2b8>
    a9de:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
    a9e0:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a9e2:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    a9e4:	7870      	ldrb	r0, [r6, #1]
    a9e6:	2301      	movs	r3, #1
    a9e8:	002a      	movs	r2, r5
    a9ea:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a9ec:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    a9ee:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a9f0:	2c01      	cmp	r4, #1
    a9f2:	d1f4      	bne.n	a9de <put_fat.part.4+0x2b6>
    a9f4:	4643      	mov	r3, r8
    a9f6:	0034      	movs	r4, r6
    a9f8:	9300      	str	r3, [sp, #0]
    a9fa:	464d      	mov	r5, r9
    a9fc:	465f      	mov	r7, fp
    a9fe:	e762      	b.n	a8c6 <put_fat.part.4+0x19e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    aa00:	2334      	movs	r3, #52	; 0x34
    aa02:	469c      	mov	ip, r3
    aa04:	44a4      	add	ip, r4
    aa06:	4663      	mov	r3, ip
    aa08:	9301      	str	r3, [sp, #4]
    aa0a:	4661      	mov	r1, ip
    aa0c:	7860      	ldrb	r0, [r4, #1]
    aa0e:	2301      	movs	r3, #1
    aa10:	4642      	mov	r2, r8
    aa12:	4e24      	ldr	r6, [pc, #144]	; (aaa4 <put_fat.part.4+0x37c>)
    aa14:	47b0      	blx	r6
    aa16:	2800      	cmp	r0, #0
    aa18:	d12f      	bne.n	aa7a <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    aa1a:	6a23      	ldr	r3, [r4, #32]
    aa1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    aa1e:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    aa20:	189a      	adds	r2, r3, r2
    aa22:	4590      	cmp	r8, r2
    aa24:	d300      	bcc.n	aa28 <put_fat.part.4+0x300>
    aa26:	e6ab      	b.n	a780 <put_fat.part.4+0x58>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    aa28:	78e2      	ldrb	r2, [r4, #3]
    aa2a:	4693      	mov	fp, r2
    aa2c:	2a01      	cmp	r2, #1
    aa2e:	d800      	bhi.n	aa32 <put_fat.part.4+0x30a>
    aa30:	e6a6      	b.n	a780 <put_fat.part.4+0x58>
    aa32:	0032      	movs	r2, r6
    aa34:	9900      	ldr	r1, [sp, #0]
    aa36:	46aa      	mov	sl, r5
    aa38:	0026      	movs	r6, r4
    aa3a:	4645      	mov	r5, r8
    aa3c:	465c      	mov	r4, fp
    aa3e:	4688      	mov	r8, r1
    aa40:	46bb      	mov	fp, r7
    aa42:	0017      	movs	r7, r2
    aa44:	e000      	b.n	aa48 <put_fat.part.4+0x320>
    aa46:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
    aa48:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    aa4a:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    aa4c:	7870      	ldrb	r0, [r6, #1]
    aa4e:	2301      	movs	r3, #1
    aa50:	002a      	movs	r2, r5
    aa52:	9901      	ldr	r1, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    aa54:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    aa56:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    aa58:	2c01      	cmp	r4, #1
    aa5a:	d1f4      	bne.n	aa46 <put_fat.part.4+0x31e>
    aa5c:	4643      	mov	r3, r8
    aa5e:	0034      	movs	r4, r6
    aa60:	9300      	str	r3, [sp, #0]
    aa62:	4655      	mov	r5, sl
    aa64:	465f      	mov	r7, fp
    aa66:	e68b      	b.n	a780 <put_fat.part.4+0x58>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    aa68:	0021      	movs	r1, r4
    aa6a:	7860      	ldrb	r0, [r4, #1]
    aa6c:	2301      	movs	r3, #1
    aa6e:	464a      	mov	r2, r9
    aa70:	3134      	adds	r1, #52	; 0x34
    aa72:	4e0d      	ldr	r6, [pc, #52]	; (aaa8 <put_fat.part.4+0x380>)
    aa74:	47b0      	blx	r6
    aa76:	2800      	cmp	r0, #0
    aa78:	d001      	beq.n	aa7e <put_fat.part.4+0x356>
			res = FR_INT_ERR;
    aa7a:	2001      	movs	r0, #1
    aa7c:	e668      	b.n	a750 <put_fat.part.4+0x28>
			fs->winsect = sector;
    aa7e:	464b      	mov	r3, r9
    aa80:	6a62      	ldr	r2, [r4, #36]	; 0x24
    aa82:	6323      	str	r3, [r4, #48]	; 0x30
    aa84:	46c8      	mov	r8, r9
    aa86:	e682      	b.n	a78e <put_fat.part.4+0x66>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    aa88:	7860      	ldrb	r0, [r4, #1]
    aa8a:	2301      	movs	r3, #1
    aa8c:	002a      	movs	r2, r5
    aa8e:	9901      	ldr	r1, [sp, #4]
    aa90:	4e05      	ldr	r6, [pc, #20]	; (aaa8 <put_fat.part.4+0x380>)
    aa92:	47b0      	blx	r6
    aa94:	2800      	cmp	r0, #0
    aa96:	d1f0      	bne.n	aa7a <put_fat.part.4+0x352>
			fs->winsect = sector;
    aa98:	6325      	str	r5, [r4, #48]	; 0x30
    aa9a:	e6c8      	b.n	a82e <put_fat.part.4+0x106>
			p = &fs->win[bc % SS(fs)];
    aa9c:	9b00      	ldr	r3, [sp, #0]
    aa9e:	05de      	lsls	r6, r3, #23
    aaa0:	0df6      	lsrs	r6, r6, #23
    aaa2:	e6ca      	b.n	a83a <put_fat.part.4+0x112>
    aaa4:	00009dc1 	.word	0x00009dc1
    aaa8:	00009d3d 	.word	0x00009d3d

0000aaac <remove_chain.part.6>:
FRESULT remove_chain (
    aaac:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaae:	4657      	mov	r7, sl
    aab0:	464e      	mov	r6, r9
    aab2:	46de      	mov	lr, fp
    aab4:	4645      	mov	r5, r8
    aab6:	0004      	movs	r4, r0
    aab8:	b5e0      	push	{r5, r6, r7, lr}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    aaba:	4bc7      	ldr	r3, [pc, #796]	; (add8 <remove_chain.part.6+0x32c>)
FRESULT remove_chain (
    aabc:	b085      	sub	sp, #20
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    aabe:	469a      	mov	sl, r3
		while (clst < fs->n_fatent) {			/* Not a last link? */
    aac0:	69e3      	ldr	r3, [r4, #28]
FRESULT remove_chain (
    aac2:	000e      	movs	r6, r1
		while (clst < fs->n_fatent) {			/* Not a last link? */
    aac4:	429e      	cmp	r6, r3
    aac6:	d300      	bcc.n	aaca <remove_chain.part.6+0x1e>
    aac8:	e087      	b.n	abda <remove_chain.part.6+0x12e>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    aaca:	2e01      	cmp	r6, #1
    aacc:	d96f      	bls.n	abae <remove_chain.part.6+0x102>
	switch (fs->fs_type) {
    aace:	7823      	ldrb	r3, [r4, #0]
    aad0:	2b02      	cmp	r3, #2
    aad2:	d100      	bne.n	aad6 <remove_chain.part.6+0x2a>
    aad4:	e083      	b.n	abde <remove_chain.part.6+0x132>
    aad6:	2b03      	cmp	r3, #3
    aad8:	d040      	beq.n	ab5c <remove_chain.part.6+0xb0>
    aada:	2b01      	cmp	r3, #1
    aadc:	d007      	beq.n	aaee <remove_chain.part.6+0x42>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    aade:	2001      	movs	r0, #1
}
    aae0:	b005      	add	sp, #20
    aae2:	bc3c      	pop	{r2, r3, r4, r5}
    aae4:	4690      	mov	r8, r2
    aae6:	4699      	mov	r9, r3
    aae8:	46a2      	mov	sl, r4
    aaea:	46ab      	mov	fp, r5
    aaec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
    aaee:	0875      	lsrs	r5, r6, #1
    aaf0:	19ad      	adds	r5, r5, r6
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    aaf2:	0a6b      	lsrs	r3, r5, #9
    aaf4:	4698      	mov	r8, r3
    aaf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
	wsect = fs->winsect;
    aaf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    aafa:	4490      	add	r8, r2
	wsect = fs->winsect;
    aafc:	001f      	movs	r7, r3
	if (wsect != sector) {	/* Changed current window */
    aafe:	4598      	cmp	r8, r3
    ab00:	d00a      	beq.n	ab18 <remove_chain.part.6+0x6c>
		if (fs->wflag) {	/* Write back dirty window if needed */
    ab02:	7923      	ldrb	r3, [r4, #4]
    ab04:	2b00      	cmp	r3, #0
    ab06:	d000      	beq.n	ab0a <remove_chain.part.6+0x5e>
    ab08:	e102      	b.n	ad10 <remove_chain.part.6+0x264>
		if (sector) {
    ab0a:	4643      	mov	r3, r8
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	d000      	beq.n	ab12 <remove_chain.part.6+0x66>
    ab10:	e088      	b.n	ac24 <remove_chain.part.6+0x178>
    ab12:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ab14:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ab16:	001f      	movs	r7, r3
		wc = fs->win[bc % SS(fs)]; bc++;
    ab18:	05eb      	lsls	r3, r5, #23
    ab1a:	0ddb      	lsrs	r3, r3, #23
    ab1c:	18e3      	adds	r3, r4, r3
    ab1e:	3334      	adds	r3, #52	; 0x34
    ab20:	781b      	ldrb	r3, [r3, #0]
    ab22:	3501      	adds	r5, #1
    ab24:	4698      	mov	r8, r3
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    ab26:	0a6b      	lsrs	r3, r5, #9
    ab28:	4699      	mov	r9, r3
    ab2a:	4491      	add	r9, r2
	if (wsect != sector) {	/* Changed current window */
    ab2c:	45b9      	cmp	r9, r7
    ab2e:	d007      	beq.n	ab40 <remove_chain.part.6+0x94>
		if (fs->wflag) {	/* Write back dirty window if needed */
    ab30:	7923      	ldrb	r3, [r4, #4]
    ab32:	2b00      	cmp	r3, #0
    ab34:	d000      	beq.n	ab38 <remove_chain.part.6+0x8c>
    ab36:	e12c      	b.n	ad92 <remove_chain.part.6+0x2e6>
		if (sector) {
    ab38:	464b      	mov	r3, r9
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d000      	beq.n	ab40 <remove_chain.part.6+0x94>
    ab3e:	e11b      	b.n	ad78 <remove_chain.part.6+0x2cc>
		wc |= fs->win[bc % SS(fs)] << 8;
    ab40:	4642      	mov	r2, r8
    ab42:	05ed      	lsls	r5, r5, #23
    ab44:	0ded      	lsrs	r5, r5, #23
    ab46:	1965      	adds	r5, r4, r5
    ab48:	3534      	adds	r5, #52	; 0x34
    ab4a:	782b      	ldrb	r3, [r5, #0]
    ab4c:	021b      	lsls	r3, r3, #8
    ab4e:	4313      	orrs	r3, r2
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    ab50:	091d      	lsrs	r5, r3, #4
    ab52:	07f2      	lsls	r2, r6, #31
    ab54:	d424      	bmi.n	aba0 <remove_chain.part.6+0xf4>
    ab56:	051d      	lsls	r5, r3, #20
    ab58:	0d2d      	lsrs	r5, r5, #20
    ab5a:	e021      	b.n	aba0 <remove_chain.part.6+0xf4>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    ab5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ab5e:	09f5      	lsrs	r5, r6, #7
    ab60:	469c      	mov	ip, r3
	wsect = fs->winsect;
    ab62:	6b23      	ldr	r3, [r4, #48]	; 0x30
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    ab64:	4465      	add	r5, ip
	wsect = fs->winsect;
    ab66:	469b      	mov	fp, r3
	if (wsect != sector) {	/* Changed current window */
    ab68:	429d      	cmp	r5, r3
    ab6a:	d004      	beq.n	ab76 <remove_chain.part.6+0xca>
		if (fs->wflag) {	/* Write back dirty window if needed */
    ab6c:	7923      	ldrb	r3, [r4, #4]
    ab6e:	2b00      	cmp	r3, #0
    ab70:	d173      	bne.n	ac5a <remove_chain.part.6+0x1ae>
		if (sector) {
    ab72:	2d00      	cmp	r5, #0
    ab74:	d165      	bne.n	ac42 <remove_chain.part.6+0x196>
		p = &fs->win[clst * 4 % SS(fs)];
    ab76:	22fe      	movs	r2, #254	; 0xfe
    ab78:	00b3      	lsls	r3, r6, #2
    ab7a:	0052      	lsls	r2, r2, #1
    ab7c:	4013      	ands	r3, r2
    ab7e:	001a      	movs	r2, r3
    ab80:	3234      	adds	r2, #52	; 0x34
    ab82:	18a2      	adds	r2, r4, r2
		return LD_DWORD(p) & 0x0FFFFFFF;
    ab84:	78d5      	ldrb	r5, [r2, #3]
    ab86:	7891      	ldrb	r1, [r2, #2]
    ab88:	18e3      	adds	r3, r4, r3
    ab8a:	3334      	adds	r3, #52	; 0x34
    ab8c:	781b      	ldrb	r3, [r3, #0]
    ab8e:	062d      	lsls	r5, r5, #24
    ab90:	0409      	lsls	r1, r1, #16
    ab92:	430d      	orrs	r5, r1
    ab94:	431d      	orrs	r5, r3
    ab96:	7853      	ldrb	r3, [r2, #1]
    ab98:	021b      	lsls	r3, r3, #8
    ab9a:	431d      	orrs	r5, r3
    ab9c:	012d      	lsls	r5, r5, #4
    ab9e:	092d      	lsrs	r5, r5, #4
			if (nxt == 0) break;				/* Empty cluster? */
    aba0:	2d00      	cmp	r5, #0
    aba2:	d01a      	beq.n	abda <remove_chain.part.6+0x12e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    aba4:	2d01      	cmp	r5, #1
    aba6:	d002      	beq.n	abae <remove_chain.part.6+0x102>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    aba8:	69e3      	ldr	r3, [r4, #28]
    abaa:	429e      	cmp	r6, r3
    abac:	d301      	bcc.n	abb2 <remove_chain.part.6+0x106>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    abae:	2002      	movs	r0, #2
    abb0:	e796      	b.n	aae0 <remove_chain.part.6+0x34>
    abb2:	2200      	movs	r2, #0
    abb4:	0031      	movs	r1, r6
    abb6:	0020      	movs	r0, r4
    abb8:	4b88      	ldr	r3, [pc, #544]	; (addc <remove_chain.part.6+0x330>)
    abba:	4798      	blx	r3
			if (res != FR_OK) break;
    abbc:	2800      	cmp	r0, #0
    abbe:	d000      	beq.n	abc2 <remove_chain.part.6+0x116>
    abc0:	e78e      	b.n	aae0 <remove_chain.part.6+0x34>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    abc2:	6923      	ldr	r3, [r4, #16]
    abc4:	1c5a      	adds	r2, r3, #1
    abc6:	d003      	beq.n	abd0 <remove_chain.part.6+0x124>
				fs->free_clust++;
    abc8:	3301      	adds	r3, #1
    abca:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    abcc:	2301      	movs	r3, #1
    abce:	7163      	strb	r3, [r4, #5]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    abd0:	69e3      	ldr	r3, [r4, #28]
FRESULT remove_chain (
    abd2:	002e      	movs	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
    abd4:	429e      	cmp	r6, r3
    abd6:	d200      	bcs.n	abda <remove_chain.part.6+0x12e>
    abd8:	e777      	b.n	aaca <remove_chain.part.6+0x1e>
FRESULT remove_chain (
    abda:	2000      	movs	r0, #0
    abdc:	e780      	b.n	aae0 <remove_chain.part.6+0x34>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    abde:	6a63      	ldr	r3, [r4, #36]	; 0x24
    abe0:	0a35      	lsrs	r5, r6, #8
    abe2:	469c      	mov	ip, r3
	wsect = fs->winsect;
    abe4:	6b27      	ldr	r7, [r4, #48]	; 0x30
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    abe6:	4465      	add	r5, ip
	if (wsect != sector) {	/* Changed current window */
    abe8:	42bd      	cmp	r5, r7
    abea:	d004      	beq.n	abf6 <remove_chain.part.6+0x14a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    abec:	7923      	ldrb	r3, [r4, #4]
    abee:	2b00      	cmp	r3, #0
    abf0:	d162      	bne.n	acb8 <remove_chain.part.6+0x20c>
		if (sector) {
    abf2:	2d00      	cmp	r5, #0
    abf4:	d10a      	bne.n	ac0c <remove_chain.part.6+0x160>
		p = &fs->win[clst * 2 % SS(fs)];
    abf6:	22ff      	movs	r2, #255	; 0xff
    abf8:	0073      	lsls	r3, r6, #1
    abfa:	0052      	lsls	r2, r2, #1
    abfc:	4013      	ands	r3, r2
		return LD_WORD(p);
    abfe:	18e3      	adds	r3, r4, r3
    ac00:	3334      	adds	r3, #52	; 0x34
    ac02:	785d      	ldrb	r5, [r3, #1]
    ac04:	781b      	ldrb	r3, [r3, #0]
    ac06:	022d      	lsls	r5, r5, #8
    ac08:	431d      	orrs	r5, r3
    ac0a:	e7c9      	b.n	aba0 <remove_chain.part.6+0xf4>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    ac0c:	0021      	movs	r1, r4
    ac0e:	7860      	ldrb	r0, [r4, #1]
    ac10:	2301      	movs	r3, #1
    ac12:	002a      	movs	r2, r5
    ac14:	3134      	adds	r1, #52	; 0x34
    ac16:	4f72      	ldr	r7, [pc, #456]	; (ade0 <remove_chain.part.6+0x334>)
    ac18:	47b8      	blx	r7
    ac1a:	2800      	cmp	r0, #0
    ac1c:	d000      	beq.n	ac20 <remove_chain.part.6+0x174>
    ac1e:	e75e      	b.n	aade <remove_chain.part.6+0x32>
			fs->winsect = sector;
    ac20:	6325      	str	r5, [r4, #48]	; 0x30
    ac22:	e7e8      	b.n	abf6 <remove_chain.part.6+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    ac24:	0021      	movs	r1, r4
    ac26:	7860      	ldrb	r0, [r4, #1]
    ac28:	2301      	movs	r3, #1
    ac2a:	4642      	mov	r2, r8
    ac2c:	3134      	adds	r1, #52	; 0x34
    ac2e:	4f6c      	ldr	r7, [pc, #432]	; (ade0 <remove_chain.part.6+0x334>)
    ac30:	47b8      	blx	r7
    ac32:	2800      	cmp	r0, #0
    ac34:	d000      	beq.n	ac38 <remove_chain.part.6+0x18c>
    ac36:	e752      	b.n	aade <remove_chain.part.6+0x32>
			fs->winsect = sector;
    ac38:	4643      	mov	r3, r8
    ac3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ac3c:	6323      	str	r3, [r4, #48]	; 0x30
    ac3e:	4647      	mov	r7, r8
    ac40:	e76a      	b.n	ab18 <remove_chain.part.6+0x6c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    ac42:	0021      	movs	r1, r4
    ac44:	7860      	ldrb	r0, [r4, #1]
    ac46:	2301      	movs	r3, #1
    ac48:	002a      	movs	r2, r5
    ac4a:	3134      	adds	r1, #52	; 0x34
    ac4c:	4f64      	ldr	r7, [pc, #400]	; (ade0 <remove_chain.part.6+0x334>)
    ac4e:	47b8      	blx	r7
    ac50:	2800      	cmp	r0, #0
    ac52:	d000      	beq.n	ac56 <remove_chain.part.6+0x1aa>
    ac54:	e743      	b.n	aade <remove_chain.part.6+0x32>
			fs->winsect = sector;
    ac56:	6325      	str	r5, [r4, #48]	; 0x30
    ac58:	e78d      	b.n	ab76 <remove_chain.part.6+0xca>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    ac5a:	2334      	movs	r3, #52	; 0x34
    ac5c:	4699      	mov	r9, r3
    ac5e:	44a1      	add	r9, r4
    ac60:	7860      	ldrb	r0, [r4, #1]
    ac62:	3b33      	subs	r3, #51	; 0x33
    ac64:	465a      	mov	r2, fp
    ac66:	4649      	mov	r1, r9
    ac68:	4f5b      	ldr	r7, [pc, #364]	; (add8 <remove_chain.part.6+0x32c>)
    ac6a:	47b8      	blx	r7
    ac6c:	2800      	cmp	r0, #0
    ac6e:	d000      	beq.n	ac72 <remove_chain.part.6+0x1c6>
    ac70:	e735      	b.n	aade <remove_chain.part.6+0x32>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    ac72:	6a23      	ldr	r3, [r4, #32]
    ac74:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    ac76:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    ac78:	189a      	adds	r2, r3, r2
    ac7a:	4593      	cmp	fp, r2
    ac7c:	d300      	bcc.n	ac80 <remove_chain.part.6+0x1d4>
    ac7e:	e778      	b.n	ab72 <remove_chain.part.6+0xc6>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ac80:	78e2      	ldrb	r2, [r4, #3]
    ac82:	2a01      	cmp	r2, #1
    ac84:	d800      	bhi.n	ac88 <remove_chain.part.6+0x1dc>
    ac86:	e774      	b.n	ab72 <remove_chain.part.6+0xc6>
    ac88:	0021      	movs	r1, r4
    ac8a:	46a8      	mov	r8, r5
    ac8c:	465c      	mov	r4, fp
    ac8e:	0017      	movs	r7, r2
    ac90:	46cb      	mov	fp, r9
    ac92:	000d      	movs	r5, r1
    ac94:	46b1      	mov	r9, r6
    ac96:	e000      	b.n	ac9a <remove_chain.part.6+0x1ee>
    ac98:	6a2b      	ldr	r3, [r5, #32]
					wsect += fs->fsize;
    ac9a:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ac9c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    ac9e:	7868      	ldrb	r0, [r5, #1]
    aca0:	2301      	movs	r3, #1
    aca2:	0022      	movs	r2, r4
    aca4:	4659      	mov	r1, fp
    aca6:	4e4c      	ldr	r6, [pc, #304]	; (add8 <remove_chain.part.6+0x32c>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    aca8:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    acaa:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    acac:	2f01      	cmp	r7, #1
    acae:	d1f3      	bne.n	ac98 <remove_chain.part.6+0x1ec>
    acb0:	002c      	movs	r4, r5
    acb2:	464e      	mov	r6, r9
    acb4:	4645      	mov	r5, r8
    acb6:	e75c      	b.n	ab72 <remove_chain.part.6+0xc6>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    acb8:	2334      	movs	r3, #52	; 0x34
    acba:	4699      	mov	r9, r3
    acbc:	44a1      	add	r9, r4
    acbe:	7860      	ldrb	r0, [r4, #1]
    acc0:	3b33      	subs	r3, #51	; 0x33
    acc2:	003a      	movs	r2, r7
    acc4:	4649      	mov	r1, r9
    acc6:	47d0      	blx	sl
    acc8:	2800      	cmp	r0, #0
    acca:	d000      	beq.n	acce <remove_chain.part.6+0x222>
    accc:	e707      	b.n	aade <remove_chain.part.6+0x32>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    acce:	6a23      	ldr	r3, [r4, #32]
    acd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    acd2:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    acd4:	189a      	adds	r2, r3, r2
    acd6:	4297      	cmp	r7, r2
    acd8:	d28b      	bcs.n	abf2 <remove_chain.part.6+0x146>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    acda:	78e2      	ldrb	r2, [r4, #3]
    acdc:	2a01      	cmp	r2, #1
    acde:	d988      	bls.n	abf2 <remove_chain.part.6+0x146>
    ace0:	0021      	movs	r1, r4
    ace2:	003c      	movs	r4, r7
    ace4:	0017      	movs	r7, r2
    ace6:	0032      	movs	r2, r6
    ace8:	46a8      	mov	r8, r5
    acea:	464e      	mov	r6, r9
    acec:	000d      	movs	r5, r1
    acee:	4691      	mov	r9, r2
    acf0:	e000      	b.n	acf4 <remove_chain.part.6+0x248>
    acf2:	6a2b      	ldr	r3, [r5, #32]
					wsect += fs->fsize;
    acf4:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    acf6:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    acf8:	7868      	ldrb	r0, [r5, #1]
    acfa:	2301      	movs	r3, #1
    acfc:	0022      	movs	r2, r4
    acfe:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ad00:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    ad02:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ad04:	2f01      	cmp	r7, #1
    ad06:	d1f4      	bne.n	acf2 <remove_chain.part.6+0x246>
    ad08:	002c      	movs	r4, r5
    ad0a:	464e      	mov	r6, r9
    ad0c:	4645      	mov	r5, r8
    ad0e:	e770      	b.n	abf2 <remove_chain.part.6+0x146>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    ad10:	2334      	movs	r3, #52	; 0x34
    ad12:	469b      	mov	fp, r3
    ad14:	46b9      	mov	r9, r7
    ad16:	44a3      	add	fp, r4
    ad18:	003a      	movs	r2, r7
    ad1a:	4f2f      	ldr	r7, [pc, #188]	; (add8 <remove_chain.part.6+0x32c>)
    ad1c:	7860      	ldrb	r0, [r4, #1]
    ad1e:	3b33      	subs	r3, #51	; 0x33
    ad20:	4659      	mov	r1, fp
    ad22:	9701      	str	r7, [sp, #4]
    ad24:	47b8      	blx	r7
    ad26:	2800      	cmp	r0, #0
    ad28:	d000      	beq.n	ad2c <remove_chain.part.6+0x280>
    ad2a:	e6d8      	b.n	aade <remove_chain.part.6+0x32>
			fs->wflag = 0;
    ad2c:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    ad2e:	4648      	mov	r0, r9
    ad30:	6a23      	ldr	r3, [r4, #32]
    ad32:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ad34:	189a      	adds	r2, r3, r2
    ad36:	4290      	cmp	r0, r2
    ad38:	d300      	bcc.n	ad3c <remove_chain.part.6+0x290>
    ad3a:	e6e6      	b.n	ab0a <remove_chain.part.6+0x5e>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ad3c:	78e2      	ldrb	r2, [r4, #3]
    ad3e:	2a01      	cmp	r2, #1
    ad40:	d800      	bhi.n	ad44 <remove_chain.part.6+0x298>
    ad42:	e6e2      	b.n	ab0a <remove_chain.part.6+0x5e>
    ad44:	0021      	movs	r1, r4
    ad46:	0004      	movs	r4, r0
    ad48:	4658      	mov	r0, fp
    ad4a:	46a9      	mov	r9, r5
    ad4c:	0017      	movs	r7, r2
    ad4e:	000d      	movs	r5, r1
    ad50:	9002      	str	r0, [sp, #8]
    ad52:	46b3      	mov	fp, r6
    ad54:	0001      	movs	r1, r0
    ad56:	e001      	b.n	ad5c <remove_chain.part.6+0x2b0>
    ad58:	6a2b      	ldr	r3, [r5, #32]
    ad5a:	9902      	ldr	r1, [sp, #8]
					wsect += fs->fsize;
    ad5c:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ad5e:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    ad60:	7868      	ldrb	r0, [r5, #1]
    ad62:	2301      	movs	r3, #1
    ad64:	0022      	movs	r2, r4
    ad66:	9e01      	ldr	r6, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ad68:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    ad6a:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ad6c:	2f01      	cmp	r7, #1
    ad6e:	d1f3      	bne.n	ad58 <remove_chain.part.6+0x2ac>
    ad70:	002c      	movs	r4, r5
    ad72:	465e      	mov	r6, fp
    ad74:	464d      	mov	r5, r9
    ad76:	e6c8      	b.n	ab0a <remove_chain.part.6+0x5e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    ad78:	0021      	movs	r1, r4
    ad7a:	7860      	ldrb	r0, [r4, #1]
    ad7c:	2301      	movs	r3, #1
    ad7e:	464a      	mov	r2, r9
    ad80:	3134      	adds	r1, #52	; 0x34
    ad82:	4f17      	ldr	r7, [pc, #92]	; (ade0 <remove_chain.part.6+0x334>)
    ad84:	47b8      	blx	r7
    ad86:	2800      	cmp	r0, #0
    ad88:	d000      	beq.n	ad8c <remove_chain.part.6+0x2e0>
    ad8a:	e6a8      	b.n	aade <remove_chain.part.6+0x32>
			fs->winsect = sector;
    ad8c:	464b      	mov	r3, r9
    ad8e:	6323      	str	r3, [r4, #48]	; 0x30
    ad90:	e6d6      	b.n	ab40 <remove_chain.part.6+0x94>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    ad92:	2334      	movs	r3, #52	; 0x34
    ad94:	469c      	mov	ip, r3
    ad96:	44a4      	add	ip, r4
    ad98:	4661      	mov	r1, ip
    ad9a:	46bb      	mov	fp, r7
    ad9c:	003a      	movs	r2, r7
    ad9e:	4f0e      	ldr	r7, [pc, #56]	; (add8 <remove_chain.part.6+0x32c>)
    ada0:	7860      	ldrb	r0, [r4, #1]
    ada2:	2301      	movs	r3, #1
    ada4:	9102      	str	r1, [sp, #8]
    ada6:	9701      	str	r7, [sp, #4]
    ada8:	47b8      	blx	r7
    adaa:	2800      	cmp	r0, #0
    adac:	d000      	beq.n	adb0 <remove_chain.part.6+0x304>
    adae:	e696      	b.n	aade <remove_chain.part.6+0x32>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    adb0:	6a23      	ldr	r3, [r4, #32]
    adb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    adb4:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    adb6:	189a      	adds	r2, r3, r2
    adb8:	4658      	mov	r0, fp
    adba:	455a      	cmp	r2, fp
    adbc:	d800      	bhi.n	adc0 <remove_chain.part.6+0x314>
    adbe:	e6bb      	b.n	ab38 <remove_chain.part.6+0x8c>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    adc0:	78e2      	ldrb	r2, [r4, #3]
    adc2:	4693      	mov	fp, r2
    adc4:	2a01      	cmp	r2, #1
    adc6:	d800      	bhi.n	adca <remove_chain.part.6+0x31e>
    adc8:	e6b6      	b.n	ab38 <remove_chain.part.6+0x8c>
    adca:	0022      	movs	r2, r4
    adcc:	465f      	mov	r7, fp
    adce:	0004      	movs	r4, r0
    add0:	46ab      	mov	fp, r5
    add2:	9603      	str	r6, [sp, #12]
    add4:	0015      	movs	r5, r2
    add6:	e006      	b.n	ade6 <remove_chain.part.6+0x33a>
    add8:	00009dc1 	.word	0x00009dc1
    addc:	0000a729 	.word	0x0000a729
    ade0:	00009d3d 	.word	0x00009d3d
    ade4:	6a2b      	ldr	r3, [r5, #32]
					wsect += fs->fsize;
    ade6:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ade8:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    adea:	7868      	ldrb	r0, [r5, #1]
    adec:	2301      	movs	r3, #1
    adee:	0022      	movs	r2, r4
    adf0:	9902      	ldr	r1, [sp, #8]
    adf2:	9e01      	ldr	r6, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    adf4:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    adf6:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    adf8:	2f01      	cmp	r7, #1
    adfa:	d1f3      	bne.n	ade4 <remove_chain.part.6+0x338>
    adfc:	002c      	movs	r4, r5
    adfe:	9e03      	ldr	r6, [sp, #12]
    ae00:	465d      	mov	r5, fp
    ae02:	e699      	b.n	ab38 <remove_chain.part.6+0x8c>

0000ae04 <get_fat.part.3>:
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    ae04:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae06:	4645      	mov	r5, r8
    ae08:	46de      	mov	lr, fp
    ae0a:	4657      	mov	r7, sl
    ae0c:	464e      	mov	r6, r9
    ae0e:	b5e0      	push	{r5, r6, r7, lr}
	switch (fs->fs_type) {
    ae10:	7803      	ldrb	r3, [r0, #0]
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    ae12:	b085      	sub	sp, #20
    ae14:	0004      	movs	r4, r0
    ae16:	000d      	movs	r5, r1
	switch (fs->fs_type) {
    ae18:	2b02      	cmp	r3, #2
    ae1a:	d100      	bne.n	ae1e <get_fat.part.3+0x1a>
    ae1c:	e074      	b.n	af08 <get_fat.part.3+0x104>
    ae1e:	2b03      	cmp	r3, #3
    ae20:	d044      	beq.n	aeac <get_fat.part.3+0xa8>
    ae22:	2b01      	cmp	r3, #1
    ae24:	d008      	beq.n	ae38 <get_fat.part.3+0x34>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    ae26:	2001      	movs	r0, #1
    ae28:	4240      	negs	r0, r0
}
    ae2a:	b005      	add	sp, #20
    ae2c:	bc3c      	pop	{r2, r3, r4, r5}
    ae2e:	4690      	mov	r8, r2
    ae30:	4699      	mov	r9, r3
    ae32:	46a2      	mov	sl, r4
    ae34:	46ab      	mov	fp, r5
    ae36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
    ae38:	084e      	lsrs	r6, r1, #1
    ae3a:	1873      	adds	r3, r6, r1
    ae3c:	9301      	str	r3, [sp, #4]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    ae3e:	0a5b      	lsrs	r3, r3, #9
    ae40:	469a      	mov	sl, r3
    ae42:	6a42      	ldr	r2, [r0, #36]	; 0x24
	wsect = fs->winsect;
    ae44:	6b07      	ldr	r7, [r0, #48]	; 0x30
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    ae46:	4492      	add	sl, r2
	if (wsect != sector) {	/* Changed current window */
    ae48:	45ba      	cmp	sl, r7
    ae4a:	d009      	beq.n	ae60 <get_fat.part.3+0x5c>
		if (fs->wflag) {	/* Write back dirty window if needed */
    ae4c:	7903      	ldrb	r3, [r0, #4]
    ae4e:	2b00      	cmp	r3, #0
    ae50:	d000      	beq.n	ae54 <get_fat.part.3+0x50>
    ae52:	e0aa      	b.n	afaa <get_fat.part.3+0x1a6>
		if (sector) {
    ae54:	4653      	mov	r3, sl
    ae56:	2b00      	cmp	r3, #0
    ae58:	d000      	beq.n	ae5c <get_fat.part.3+0x58>
    ae5a:	e108      	b.n	b06e <get_fat.part.3+0x26a>
    ae5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ae5e:	6b27      	ldr	r7, [r4, #48]	; 0x30
		wc = fs->win[bc % SS(fs)]; bc++;
    ae60:	9901      	ldr	r1, [sp, #4]
    ae62:	05cb      	lsls	r3, r1, #23
    ae64:	0ddb      	lsrs	r3, r3, #23
    ae66:	18e3      	adds	r3, r4, r3
    ae68:	3334      	adds	r3, #52	; 0x34
    ae6a:	781b      	ldrb	r3, [r3, #0]
    ae6c:	469a      	mov	sl, r3
    ae6e:	000b      	movs	r3, r1
    ae70:	3301      	adds	r3, #1
    ae72:	9301      	str	r3, [sp, #4]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    ae74:	0a5b      	lsrs	r3, r3, #9
    ae76:	4699      	mov	r9, r3
    ae78:	4491      	add	r9, r2
	if (wsect != sector) {	/* Changed current window */
    ae7a:	45b9      	cmp	r9, r7
    ae7c:	d007      	beq.n	ae8e <get_fat.part.3+0x8a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    ae7e:	7923      	ldrb	r3, [r4, #4]
    ae80:	2b00      	cmp	r3, #0
    ae82:	d000      	beq.n	ae86 <get_fat.part.3+0x82>
    ae84:	e10f      	b.n	b0a6 <get_fat.part.3+0x2a2>
		if (sector) {
    ae86:	464b      	mov	r3, r9
    ae88:	2b00      	cmp	r3, #0
    ae8a:	d000      	beq.n	ae8e <get_fat.part.3+0x8a>
    ae8c:	e0fe      	b.n	b08c <get_fat.part.3+0x288>
		wc |= fs->win[bc % SS(fs)] << 8;
    ae8e:	4652      	mov	r2, sl
    ae90:	9b01      	ldr	r3, [sp, #4]
    ae92:	05de      	lsls	r6, r3, #23
    ae94:	0df6      	lsrs	r6, r6, #23
    ae96:	19a4      	adds	r4, r4, r6
    ae98:	3434      	adds	r4, #52	; 0x34
    ae9a:	7823      	ldrb	r3, [r4, #0]
    ae9c:	021b      	lsls	r3, r3, #8
    ae9e:	4313      	orrs	r3, r2
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    aea0:	0918      	lsrs	r0, r3, #4
    aea2:	07ea      	lsls	r2, r5, #31
    aea4:	d4c1      	bmi.n	ae2a <get_fat.part.3+0x26>
    aea6:	0518      	lsls	r0, r3, #20
    aea8:	0d00      	lsrs	r0, r0, #20
    aeaa:	e7be      	b.n	ae2a <get_fat.part.3+0x26>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    aeac:	6a43      	ldr	r3, [r0, #36]	; 0x24
    aeae:	09ce      	lsrs	r6, r1, #7
    aeb0:	469c      	mov	ip, r3
	wsect = fs->winsect;
    aeb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    aeb4:	4466      	add	r6, ip
	wsect = fs->winsect;
    aeb6:	469b      	mov	fp, r3
	if (wsect != sector) {	/* Changed current window */
    aeb8:	429e      	cmp	r6, r3
    aeba:	d00f      	beq.n	aedc <get_fat.part.3+0xd8>
		if (fs->wflag) {	/* Write back dirty window if needed */
    aebc:	7903      	ldrb	r3, [r0, #4]
    aebe:	2b00      	cmp	r3, #0
    aec0:	d000      	beq.n	aec4 <get_fat.part.3+0xc0>
    aec2:	e0a4      	b.n	b00e <get_fat.part.3+0x20a>
		if (sector) {
    aec4:	2e00      	cmp	r6, #0
    aec6:	d009      	beq.n	aedc <get_fat.part.3+0xd8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    aec8:	0021      	movs	r1, r4
    aeca:	7860      	ldrb	r0, [r4, #1]
    aecc:	2301      	movs	r3, #1
    aece:	0032      	movs	r2, r6
    aed0:	3134      	adds	r1, #52	; 0x34
    aed2:	4f90      	ldr	r7, [pc, #576]	; (b114 <get_fat.part.3+0x310>)
    aed4:	47b8      	blx	r7
    aed6:	2800      	cmp	r0, #0
    aed8:	d1a5      	bne.n	ae26 <get_fat.part.3+0x22>
			fs->winsect = sector;
    aeda:	6326      	str	r6, [r4, #48]	; 0x30
		p = &fs->win[clst * 4 % SS(fs)];
    aedc:	23fe      	movs	r3, #254	; 0xfe
    aede:	00ad      	lsls	r5, r5, #2
    aee0:	005b      	lsls	r3, r3, #1
    aee2:	401d      	ands	r5, r3
    aee4:	002b      	movs	r3, r5
    aee6:	3334      	adds	r3, #52	; 0x34
    aee8:	18e3      	adds	r3, r4, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    aeea:	78d8      	ldrb	r0, [r3, #3]
    aeec:	789a      	ldrb	r2, [r3, #2]
    aeee:	1964      	adds	r4, r4, r5
    aef0:	0412      	lsls	r2, r2, #16
    aef2:	0600      	lsls	r0, r0, #24
    aef4:	3434      	adds	r4, #52	; 0x34
    aef6:	4310      	orrs	r0, r2
    aef8:	785b      	ldrb	r3, [r3, #1]
    aefa:	7822      	ldrb	r2, [r4, #0]
    aefc:	021b      	lsls	r3, r3, #8
    aefe:	4310      	orrs	r0, r2
    af00:	4318      	orrs	r0, r3
    af02:	0100      	lsls	r0, r0, #4
    af04:	0900      	lsrs	r0, r0, #4
    af06:	e790      	b.n	ae2a <get_fat.part.3+0x26>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    af08:	6a43      	ldr	r3, [r0, #36]	; 0x24
    af0a:	0a0e      	lsrs	r6, r1, #8
    af0c:	469c      	mov	ip, r3
	wsect = fs->winsect;
    af0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    af10:	4466      	add	r6, ip
	wsect = fs->winsect;
    af12:	469b      	mov	fp, r3
	if (wsect != sector) {	/* Changed current window */
    af14:	429e      	cmp	r6, r3
    af16:	d00f      	beq.n	af38 <get_fat.part.3+0x134>
		if (fs->wflag) {	/* Write back dirty window if needed */
    af18:	7903      	ldrb	r3, [r0, #4]
    af1a:	2b00      	cmp	r3, #0
    af1c:	d117      	bne.n	af4e <get_fat.part.3+0x14a>
		if (sector) {
    af1e:	2e00      	cmp	r6, #0
    af20:	d00a      	beq.n	af38 <get_fat.part.3+0x134>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    af22:	0021      	movs	r1, r4
    af24:	7860      	ldrb	r0, [r4, #1]
    af26:	2301      	movs	r3, #1
    af28:	0032      	movs	r2, r6
    af2a:	3134      	adds	r1, #52	; 0x34
    af2c:	4f79      	ldr	r7, [pc, #484]	; (b114 <get_fat.part.3+0x310>)
    af2e:	47b8      	blx	r7
    af30:	2800      	cmp	r0, #0
    af32:	d000      	beq.n	af36 <get_fat.part.3+0x132>
    af34:	e777      	b.n	ae26 <get_fat.part.3+0x22>
			fs->winsect = sector;
    af36:	6326      	str	r6, [r4, #48]	; 0x30
		p = &fs->win[clst * 2 % SS(fs)];
    af38:	23ff      	movs	r3, #255	; 0xff
    af3a:	006d      	lsls	r5, r5, #1
    af3c:	005b      	lsls	r3, r3, #1
    af3e:	401d      	ands	r5, r3
		return LD_WORD(p);
    af40:	1964      	adds	r4, r4, r5
    af42:	3434      	adds	r4, #52	; 0x34
    af44:	7863      	ldrb	r3, [r4, #1]
    af46:	7820      	ldrb	r0, [r4, #0]
    af48:	021b      	lsls	r3, r3, #8
    af4a:	4318      	orrs	r0, r3
    af4c:	e76d      	b.n	ae2a <get_fat.part.3+0x26>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    af4e:	2334      	movs	r3, #52	; 0x34
    af50:	469a      	mov	sl, r3
    af52:	4f71      	ldr	r7, [pc, #452]	; (b118 <get_fat.part.3+0x314>)
    af54:	4482      	add	sl, r0
    af56:	3b33      	subs	r3, #51	; 0x33
    af58:	7840      	ldrb	r0, [r0, #1]
    af5a:	465a      	mov	r2, fp
    af5c:	4651      	mov	r1, sl
    af5e:	46b8      	mov	r8, r7
    af60:	47b8      	blx	r7
    af62:	2800      	cmp	r0, #0
    af64:	d000      	beq.n	af68 <get_fat.part.3+0x164>
    af66:	e75e      	b.n	ae26 <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    af68:	6a23      	ldr	r3, [r4, #32]
    af6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    af6c:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    af6e:	189a      	adds	r2, r3, r2
    af70:	4593      	cmp	fp, r2
    af72:	d2d4      	bcs.n	af1e <get_fat.part.3+0x11a>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    af74:	78e2      	ldrb	r2, [r4, #3]
    af76:	4691      	mov	r9, r2
    af78:	2a01      	cmp	r2, #1
    af7a:	d9d0      	bls.n	af1e <get_fat.part.3+0x11a>
    af7c:	002a      	movs	r2, r5
    af7e:	464f      	mov	r7, r9
    af80:	0025      	movs	r5, r4
    af82:	46b1      	mov	r9, r6
    af84:	465c      	mov	r4, fp
    af86:	4656      	mov	r6, sl
    af88:	4692      	mov	sl, r2
    af8a:	e000      	b.n	af8e <get_fat.part.3+0x18a>
    af8c:	6a2b      	ldr	r3, [r5, #32]
					wsect += fs->fsize;
    af8e:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    af90:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    af92:	7868      	ldrb	r0, [r5, #1]
    af94:	2301      	movs	r3, #1
    af96:	0022      	movs	r2, r4
    af98:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    af9a:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    af9c:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    af9e:	2f01      	cmp	r7, #1
    afa0:	d1f4      	bne.n	af8c <get_fat.part.3+0x188>
    afa2:	002c      	movs	r4, r5
    afa4:	464e      	mov	r6, r9
    afa6:	4655      	mov	r5, sl
    afa8:	e7b9      	b.n	af1e <get_fat.part.3+0x11a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    afaa:	2334      	movs	r3, #52	; 0x34
    afac:	469b      	mov	fp, r3
    afae:	4e5a      	ldr	r6, [pc, #360]	; (b118 <get_fat.part.3+0x314>)
    afb0:	4483      	add	fp, r0
    afb2:	3b33      	subs	r3, #51	; 0x33
    afb4:	7840      	ldrb	r0, [r0, #1]
    afb6:	003a      	movs	r2, r7
    afb8:	4659      	mov	r1, fp
    afba:	46b0      	mov	r8, r6
    afbc:	47b0      	blx	r6
    afbe:	2800      	cmp	r0, #0
    afc0:	d000      	beq.n	afc4 <get_fat.part.3+0x1c0>
    afc2:	e730      	b.n	ae26 <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    afc4:	6a23      	ldr	r3, [r4, #32]
    afc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    afc8:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    afca:	189a      	adds	r2, r3, r2
    afcc:	4297      	cmp	r7, r2
    afce:	d300      	bcc.n	afd2 <get_fat.part.3+0x1ce>
    afd0:	e740      	b.n	ae54 <get_fat.part.3+0x50>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    afd2:	78e2      	ldrb	r2, [r4, #3]
    afd4:	4691      	mov	r9, r2
    afd6:	2a01      	cmp	r2, #1
    afd8:	d800      	bhi.n	afdc <get_fat.part.3+0x1d8>
    afda:	e73b      	b.n	ae54 <get_fat.part.3+0x50>
    afdc:	002a      	movs	r2, r5
    afde:	9901      	ldr	r1, [sp, #4]
    afe0:	0025      	movs	r5, r4
    afe2:	465e      	mov	r6, fp
    afe4:	003c      	movs	r4, r7
    afe6:	4693      	mov	fp, r2
    afe8:	464f      	mov	r7, r9
    afea:	4689      	mov	r9, r1
    afec:	e000      	b.n	aff0 <get_fat.part.3+0x1ec>
    afee:	6a2b      	ldr	r3, [r5, #32]
					wsect += fs->fsize;
    aff0:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    aff2:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    aff4:	7868      	ldrb	r0, [r5, #1]
    aff6:	2301      	movs	r3, #1
    aff8:	0022      	movs	r2, r4
    affa:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    affc:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    affe:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b000:	2f01      	cmp	r7, #1
    b002:	d1f4      	bne.n	afee <get_fat.part.3+0x1ea>
    b004:	464b      	mov	r3, r9
    b006:	002c      	movs	r4, r5
    b008:	9301      	str	r3, [sp, #4]
    b00a:	465d      	mov	r5, fp
    b00c:	e722      	b.n	ae54 <get_fat.part.3+0x50>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    b00e:	2334      	movs	r3, #52	; 0x34
    b010:	469a      	mov	sl, r3
    b012:	4f41      	ldr	r7, [pc, #260]	; (b118 <get_fat.part.3+0x314>)
    b014:	4482      	add	sl, r0
    b016:	3b33      	subs	r3, #51	; 0x33
    b018:	7840      	ldrb	r0, [r0, #1]
    b01a:	465a      	mov	r2, fp
    b01c:	4651      	mov	r1, sl
    b01e:	46b8      	mov	r8, r7
    b020:	47b8      	blx	r7
    b022:	2800      	cmp	r0, #0
    b024:	d000      	beq.n	b028 <get_fat.part.3+0x224>
    b026:	e6fe      	b.n	ae26 <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b028:	6a23      	ldr	r3, [r4, #32]
    b02a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    b02c:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b02e:	189a      	adds	r2, r3, r2
    b030:	4593      	cmp	fp, r2
    b032:	d300      	bcc.n	b036 <get_fat.part.3+0x232>
    b034:	e746      	b.n	aec4 <get_fat.part.3+0xc0>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b036:	78e2      	ldrb	r2, [r4, #3]
    b038:	4691      	mov	r9, r2
    b03a:	2a01      	cmp	r2, #1
    b03c:	d800      	bhi.n	b040 <get_fat.part.3+0x23c>
    b03e:	e741      	b.n	aec4 <get_fat.part.3+0xc0>
    b040:	002a      	movs	r2, r5
    b042:	464f      	mov	r7, r9
    b044:	0025      	movs	r5, r4
    b046:	46b1      	mov	r9, r6
    b048:	465c      	mov	r4, fp
    b04a:	4656      	mov	r6, sl
    b04c:	4692      	mov	sl, r2
    b04e:	e000      	b.n	b052 <get_fat.part.3+0x24e>
    b050:	6a2b      	ldr	r3, [r5, #32]
					wsect += fs->fsize;
    b052:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b054:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    b056:	7868      	ldrb	r0, [r5, #1]
    b058:	2301      	movs	r3, #1
    b05a:	0022      	movs	r2, r4
    b05c:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b05e:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    b060:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b062:	2f01      	cmp	r7, #1
    b064:	d1f4      	bne.n	b050 <get_fat.part.3+0x24c>
    b066:	002c      	movs	r4, r5
    b068:	464e      	mov	r6, r9
    b06a:	4655      	mov	r5, sl
    b06c:	e72a      	b.n	aec4 <get_fat.part.3+0xc0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    b06e:	0021      	movs	r1, r4
    b070:	7860      	ldrb	r0, [r4, #1]
    b072:	2301      	movs	r3, #1
    b074:	4652      	mov	r2, sl
    b076:	3134      	adds	r1, #52	; 0x34
    b078:	4f26      	ldr	r7, [pc, #152]	; (b114 <get_fat.part.3+0x310>)
    b07a:	47b8      	blx	r7
    b07c:	2800      	cmp	r0, #0
    b07e:	d000      	beq.n	b082 <get_fat.part.3+0x27e>
    b080:	e6d1      	b.n	ae26 <get_fat.part.3+0x22>
			fs->winsect = sector;
    b082:	4653      	mov	r3, sl
    b084:	6a62      	ldr	r2, [r4, #36]	; 0x24
    b086:	6323      	str	r3, [r4, #48]	; 0x30
    b088:	4657      	mov	r7, sl
    b08a:	e6e9      	b.n	ae60 <get_fat.part.3+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    b08c:	0021      	movs	r1, r4
    b08e:	7860      	ldrb	r0, [r4, #1]
    b090:	2301      	movs	r3, #1
    b092:	464a      	mov	r2, r9
    b094:	3134      	adds	r1, #52	; 0x34
    b096:	4f1f      	ldr	r7, [pc, #124]	; (b114 <get_fat.part.3+0x310>)
    b098:	47b8      	blx	r7
    b09a:	2800      	cmp	r0, #0
    b09c:	d000      	beq.n	b0a0 <get_fat.part.3+0x29c>
    b09e:	e6c2      	b.n	ae26 <get_fat.part.3+0x22>
			fs->winsect = sector;
    b0a0:	464b      	mov	r3, r9
    b0a2:	6323      	str	r3, [r4, #48]	; 0x30
    b0a4:	e6f3      	b.n	ae8e <get_fat.part.3+0x8a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    b0a6:	2334      	movs	r3, #52	; 0x34
    b0a8:	469c      	mov	ip, r3
    b0aa:	44a4      	add	ip, r4
    b0ac:	4661      	mov	r1, ip
    b0ae:	4e1a      	ldr	r6, [pc, #104]	; (b118 <get_fat.part.3+0x314>)
    b0b0:	7860      	ldrb	r0, [r4, #1]
    b0b2:	2301      	movs	r3, #1
    b0b4:	003a      	movs	r2, r7
    b0b6:	9102      	str	r1, [sp, #8]
    b0b8:	46b0      	mov	r8, r6
    b0ba:	47b0      	blx	r6
    b0bc:	2800      	cmp	r0, #0
    b0be:	d000      	beq.n	b0c2 <get_fat.part.3+0x2be>
    b0c0:	e6b1      	b.n	ae26 <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b0c2:	6a23      	ldr	r3, [r4, #32]
    b0c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    b0c6:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b0c8:	189a      	adds	r2, r3, r2
    b0ca:	42ba      	cmp	r2, r7
    b0cc:	d800      	bhi.n	b0d0 <get_fat.part.3+0x2cc>
    b0ce:	e6da      	b.n	ae86 <get_fat.part.3+0x82>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b0d0:	78e2      	ldrb	r2, [r4, #3]
    b0d2:	4693      	mov	fp, r2
    b0d4:	2a01      	cmp	r2, #1
    b0d6:	d800      	bhi.n	b0da <get_fat.part.3+0x2d6>
    b0d8:	e6d5      	b.n	ae86 <get_fat.part.3+0x82>
    b0da:	4652      	mov	r2, sl
    b0dc:	9203      	str	r2, [sp, #12]
    b0de:	9a01      	ldr	r2, [sp, #4]
    b0e0:	9e02      	ldr	r6, [sp, #8]
    b0e2:	4692      	mov	sl, r2
    b0e4:	002a      	movs	r2, r5
    b0e6:	0025      	movs	r5, r4
    b0e8:	003c      	movs	r4, r7
    b0ea:	465f      	mov	r7, fp
    b0ec:	4693      	mov	fp, r2
    b0ee:	e000      	b.n	b0f2 <get_fat.part.3+0x2ee>
    b0f0:	6a2b      	ldr	r3, [r5, #32]
					wsect += fs->fsize;
    b0f2:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b0f4:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    b0f6:	7868      	ldrb	r0, [r5, #1]
    b0f8:	2301      	movs	r3, #1
    b0fa:	0022      	movs	r2, r4
    b0fc:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b0fe:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    b100:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b102:	2f01      	cmp	r7, #1
    b104:	d1f4      	bne.n	b0f0 <get_fat.part.3+0x2ec>
    b106:	4653      	mov	r3, sl
    b108:	9301      	str	r3, [sp, #4]
    b10a:	9b03      	ldr	r3, [sp, #12]
    b10c:	002c      	movs	r4, r5
    b10e:	469a      	mov	sl, r3
    b110:	465d      	mov	r5, fp
    b112:	e6b8      	b.n	ae86 <get_fat.part.3+0x82>
    b114:	00009d3d 	.word	0x00009d3d
    b118:	00009dc1 	.word	0x00009dc1

0000b11c <dir_sdi>:
{
    b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b11e:	0005      	movs	r5, r0
	dj->index = idx;
    b120:	80e9      	strh	r1, [r5, #6]
{
    b122:	000c      	movs	r4, r1
	clst = dj->sclust;
    b124:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    b126:	2901      	cmp	r1, #1
    b128:	d003      	beq.n	b132 <dir_sdi+0x16>
    b12a:	6800      	ldr	r0, [r0, #0]
    b12c:	69c3      	ldr	r3, [r0, #28]
    b12e:	4299      	cmp	r1, r3
    b130:	d301      	bcc.n	b136 <dir_sdi+0x1a>
		return FR_INT_ERR;
    b132:	2002      	movs	r0, #2
}
    b134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    b136:	2900      	cmp	r1, #0
    b138:	d118      	bne.n	b16c <dir_sdi+0x50>
    b13a:	7802      	ldrb	r2, [r0, #0]
    b13c:	2a03      	cmp	r2, #3
    b13e:	d012      	beq.n	b166 <dir_sdi+0x4a>
		dj->clust = clst;
    b140:	2300      	movs	r3, #0
    b142:	60eb      	str	r3, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    b144:	8903      	ldrh	r3, [r0, #8]
    b146:	42a3      	cmp	r3, r4
    b148:	d9f3      	bls.n	b132 <dir_sdi+0x16>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    b14a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    b14c:	0923      	lsrs	r3, r4, #4
    b14e:	4694      	mov	ip, r2
    b150:	b29b      	uxth	r3, r3
    b152:	4463      	add	r3, ip
    b154:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    b156:	230f      	movs	r3, #15
    b158:	401c      	ands	r4, r3
    b15a:	3034      	adds	r0, #52	; 0x34
    b15c:	0164      	lsls	r4, r4, #5
    b15e:	1900      	adds	r0, r0, r4
    b160:	6168      	str	r0, [r5, #20]
	return FR_OK;	/* Seek succeeded */
    b162:	2000      	movs	r0, #0
    b164:	e7e6      	b.n	b134 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    b166:	6a81      	ldr	r1, [r0, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    b168:	2900      	cmp	r1, #0
    b16a:	d0e9      	beq.n	b140 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    b16c:	7886      	ldrb	r6, [r0, #2]
    b16e:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    b170:	42b4      	cmp	r4, r6
    b172:	d317      	bcc.n	b1a4 <dir_sdi+0x88>
    b174:	1ba4      	subs	r4, r4, r6
    b176:	b2a4      	uxth	r4, r4
    b178:	4f13      	ldr	r7, [pc, #76]	; (b1c8 <dir_sdi+0xac>)
    b17a:	e00e      	b.n	b19a <dir_sdi+0x7e>
    b17c:	47b8      	blx	r7
    b17e:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    b180:	1c43      	adds	r3, r0, #1
    b182:	d01f      	beq.n	b1c4 <dir_sdi+0xa8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    b184:	2801      	cmp	r0, #1
    b186:	d9d4      	bls.n	b132 <dir_sdi+0x16>
    b188:	6828      	ldr	r0, [r5, #0]
    b18a:	69c3      	ldr	r3, [r0, #28]
    b18c:	428b      	cmp	r3, r1
    b18e:	d9d0      	bls.n	b132 <dir_sdi+0x16>
    b190:	1ba2      	subs	r2, r4, r6
    b192:	b292      	uxth	r2, r2
		while (idx >= ic) {	/* Follow cluster chain */
    b194:	42a6      	cmp	r6, r4
    b196:	d805      	bhi.n	b1a4 <dir_sdi+0x88>
    b198:	0014      	movs	r4, r2
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    b19a:	2901      	cmp	r1, #1
    b19c:	d9c9      	bls.n	b132 <dir_sdi+0x16>
    b19e:	4299      	cmp	r1, r3
    b1a0:	d2c7      	bcs.n	b132 <dir_sdi+0x16>
    b1a2:	e7eb      	b.n	b17c <dir_sdi+0x60>
		dj->clust = clst;
    b1a4:	60e9      	str	r1, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    b1a6:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;
    b1a8:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    b1aa:	3b02      	subs	r3, #2
    b1ac:	2200      	movs	r2, #0
    b1ae:	4299      	cmp	r1, r3
    b1b0:	d203      	bcs.n	b1ba <dir_sdi+0x9e>
	return clst * fs->csize + fs->database;
    b1b2:	7883      	ldrb	r3, [r0, #2]
    b1b4:	4359      	muls	r1, r3
    b1b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    b1b8:	18ca      	adds	r2, r1, r3
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    b1ba:	0921      	lsrs	r1, r4, #4
    b1bc:	b289      	uxth	r1, r1
    b1be:	1889      	adds	r1, r1, r2
    b1c0:	6129      	str	r1, [r5, #16]
    b1c2:	e7c8      	b.n	b156 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    b1c4:	2001      	movs	r0, #1
    b1c6:	e7b5      	b.n	b134 <dir_sdi+0x18>
    b1c8:	0000ae05 	.word	0x0000ae05

0000b1cc <create_chain>:
{
    b1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ce:	4657      	mov	r7, sl
    b1d0:	4645      	mov	r5, r8
    b1d2:	46de      	mov	lr, fp
    b1d4:	464e      	mov	r6, r9
    b1d6:	b5e0      	push	{r5, r6, r7, lr}
    b1d8:	468a      	mov	sl, r1
    b1da:	b085      	sub	sp, #20
    b1dc:	0005      	movs	r5, r0
	if (clst == 0) {		/* Create a new chain */
    b1de:	2900      	cmp	r1, #0
    b1e0:	d11d      	bne.n	b21e <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
    b1e2:	68c3      	ldr	r3, [r0, #12]
    b1e4:	469b      	mov	fp, r3
		if (!scl || scl >= fs->n_fatent) scl = 1;
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	d128      	bne.n	b23c <create_chain+0x70>
    b1ea:	2201      	movs	r2, #1
    b1ec:	4693      	mov	fp, r2
    b1ee:	69c3      	ldr	r3, [r0, #28]
    b1f0:	465c      	mov	r4, fp
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    b1f2:	465f      	mov	r7, fp
    b1f4:	46d3      	mov	fp, sl
		ncl++;							/* Next cluster */
    b1f6:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    b1f8:	429c      	cmp	r4, r3
    b1fa:	d325      	bcc.n	b248 <create_chain+0x7c>
			if (ncl > scl) return 0;	/* No free cluster */
    b1fc:	2f01      	cmp	r7, #1
    b1fe:	d800      	bhi.n	b202 <create_chain+0x36>
    b200:	e176      	b.n	b4f0 <create_chain+0x324>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    b202:	2b02      	cmp	r3, #2
    b204:	d911      	bls.n	b22a <create_chain+0x5e>
	switch (fs->fs_type) {
    b206:	782b      	ldrb	r3, [r5, #0]
			ncl = 2;
    b208:	2402      	movs	r4, #2
	switch (fs->fs_type) {
    b20a:	2b02      	cmp	r3, #2
    b20c:	d021      	beq.n	b252 <create_chain+0x86>
    b20e:	2b03      	cmp	r3, #3
    b210:	d100      	bne.n	b214 <create_chain+0x48>
    b212:	e07f      	b.n	b314 <create_chain+0x148>
    b214:	2b01      	cmp	r3, #1
    b216:	d042      	beq.n	b29e <create_chain+0xd2>
    b218:	2401      	movs	r4, #1
    b21a:	4264      	negs	r4, r4
    b21c:	e006      	b.n	b22c <create_chain+0x60>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    b21e:	2901      	cmp	r1, #1
    b220:	d903      	bls.n	b22a <create_chain+0x5e>
    b222:	69c3      	ldr	r3, [r0, #28]
    b224:	4299      	cmp	r1, r3
    b226:	d200      	bcs.n	b22a <create_chain+0x5e>
    b228:	e164      	b.n	b4f4 <create_chain+0x328>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    b22a:	2401      	movs	r4, #1
}
    b22c:	0020      	movs	r0, r4
    b22e:	b005      	add	sp, #20
    b230:	bc3c      	pop	{r2, r3, r4, r5}
    b232:	4690      	mov	r8, r2
    b234:	4699      	mov	r9, r3
    b236:	46a2      	mov	sl, r4
    b238:	46ab      	mov	fp, r5
    b23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!scl || scl >= fs->n_fatent) scl = 1;
    b23c:	69c3      	ldr	r3, [r0, #28]
    b23e:	459b      	cmp	fp, r3
    b240:	d3d6      	bcc.n	b1f0 <create_chain+0x24>
    b242:	2201      	movs	r2, #1
    b244:	4693      	mov	fp, r2
    b246:	e7d3      	b.n	b1f0 <create_chain+0x24>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    b248:	2c01      	cmp	r4, #1
    b24a:	d9ee      	bls.n	b22a <create_chain+0x5e>
	switch (fs->fs_type) {
    b24c:	782b      	ldrb	r3, [r5, #0]
    b24e:	2b02      	cmp	r3, #2
    b250:	d1dd      	bne.n	b20e <create_chain+0x42>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    b252:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b254:	0a26      	lsrs	r6, r4, #8
    b256:	469c      	mov	ip, r3
    b258:	0033      	movs	r3, r6
    b25a:	4463      	add	r3, ip
    b25c:	001a      	movs	r2, r3
    b25e:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    b260:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    b262:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    b264:	4542      	cmp	r2, r8
    b266:	d006      	beq.n	b276 <create_chain+0xaa>
		if (fs->wflag) {	/* Write back dirty window if needed */
    b268:	792b      	ldrb	r3, [r5, #4]
    b26a:	2b00      	cmp	r3, #0
    b26c:	d000      	beq.n	b270 <create_chain+0xa4>
    b26e:	e10b      	b.n	b488 <create_chain+0x2bc>
		if (sector) {
    b270:	9b00      	ldr	r3, [sp, #0]
    b272:	2b00      	cmp	r3, #0
    b274:	d175      	bne.n	b362 <create_chain+0x196>
		p = &fs->win[clst * 2 % SS(fs)];
    b276:	23ff      	movs	r3, #255	; 0xff
    b278:	0062      	lsls	r2, r4, #1
    b27a:	005b      	lsls	r3, r3, #1
    b27c:	401a      	ands	r2, r3
		return LD_WORD(p);
    b27e:	18aa      	adds	r2, r5, r2
    b280:	3234      	adds	r2, #52	; 0x34
    b282:	7851      	ldrb	r1, [r2, #1]
    b284:	7813      	ldrb	r3, [r2, #0]
    b286:	0209      	lsls	r1, r1, #8
    b288:	430b      	orrs	r3, r1
		if (cs == 0) break;				/* Found a free cluster */
    b28a:	2b00      	cmp	r3, #0
    b28c:	d100      	bne.n	b290 <create_chain+0xc4>
    b28e:	e178      	b.n	b582 <create_chain+0x3b6>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    b290:	2b01      	cmp	r3, #1
    b292:	d0ca      	beq.n	b22a <create_chain+0x5e>
		if (ncl == scl) return 0;		/* No free cluster */
    b294:	42a7      	cmp	r7, r4
    b296:	d100      	bne.n	b29a <create_chain+0xce>
    b298:	e12a      	b.n	b4f0 <create_chain+0x324>
    b29a:	69eb      	ldr	r3, [r5, #28]
    b29c:	e7ab      	b.n	b1f6 <create_chain+0x2a>
		bc = (UINT)clst; bc += bc / 2;
    b29e:	0866      	lsrs	r6, r4, #1
    b2a0:	1933      	adds	r3, r6, r4
    b2a2:	9300      	str	r3, [sp, #0]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    b2a4:	0a5b      	lsrs	r3, r3, #9
    b2a6:	4699      	mov	r9, r3
    b2a8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	wsect = fs->winsect;
    b2aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    b2ac:	4491      	add	r9, r2
	wsect = fs->winsect;
    b2ae:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    b2b0:	4599      	cmp	r9, r3
    b2b2:	d009      	beq.n	b2c8 <create_chain+0xfc>
		if (fs->wflag) {	/* Write back dirty window if needed */
    b2b4:	792b      	ldrb	r3, [r5, #4]
    b2b6:	2b00      	cmp	r3, #0
    b2b8:	d000      	beq.n	b2bc <create_chain+0xf0>
    b2ba:	e0af      	b.n	b41c <create_chain+0x250>
		if (sector) {
    b2bc:	464b      	mov	r3, r9
    b2be:	2b00      	cmp	r3, #0
    b2c0:	d16b      	bne.n	b39a <create_chain+0x1ce>
    b2c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    b2c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    b2c6:	4698      	mov	r8, r3
		wc = fs->win[bc % SS(fs)]; bc++;
    b2c8:	9900      	ldr	r1, [sp, #0]
    b2ca:	05cb      	lsls	r3, r1, #23
    b2cc:	0ddb      	lsrs	r3, r3, #23
    b2ce:	18eb      	adds	r3, r5, r3
    b2d0:	3334      	adds	r3, #52	; 0x34
    b2d2:	781b      	ldrb	r3, [r3, #0]
    b2d4:	469a      	mov	sl, r3
    b2d6:	000b      	movs	r3, r1
    b2d8:	3301      	adds	r3, #1
    b2da:	9300      	str	r3, [sp, #0]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    b2dc:	0a5b      	lsrs	r3, r3, #9
    b2de:	4699      	mov	r9, r3
    b2e0:	4491      	add	r9, r2
	if (wsect != sector) {	/* Changed current window */
    b2e2:	45c1      	cmp	r9, r8
    b2e4:	d007      	beq.n	b2f6 <create_chain+0x12a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    b2e6:	792b      	ldrb	r3, [r5, #4]
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d000      	beq.n	b2ee <create_chain+0x122>
    b2ec:	e11b      	b.n	b526 <create_chain+0x35a>
		if (sector) {
    b2ee:	464b      	mov	r3, r9
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	d000      	beq.n	b2f6 <create_chain+0x12a>
    b2f4:	e10a      	b.n	b50c <create_chain+0x340>
		wc |= fs->win[bc % SS(fs)] << 8;
    b2f6:	9b00      	ldr	r3, [sp, #0]
    b2f8:	05de      	lsls	r6, r3, #23
    b2fa:	4653      	mov	r3, sl
    b2fc:	0df6      	lsrs	r6, r6, #23
    b2fe:	19ae      	adds	r6, r5, r6
    b300:	3634      	adds	r6, #52	; 0x34
    b302:	7832      	ldrb	r2, [r6, #0]
    b304:	0212      	lsls	r2, r2, #8
    b306:	431a      	orrs	r2, r3
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    b308:	0913      	lsrs	r3, r2, #4
    b30a:	07e1      	lsls	r1, r4, #31
    b30c:	d4bd      	bmi.n	b28a <create_chain+0xbe>
    b30e:	0513      	lsls	r3, r2, #20
    b310:	0d1b      	lsrs	r3, r3, #20
    b312:	e7ba      	b.n	b28a <create_chain+0xbe>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    b314:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b316:	09e6      	lsrs	r6, r4, #7
    b318:	469c      	mov	ip, r3
    b31a:	0033      	movs	r3, r6
    b31c:	4463      	add	r3, ip
    b31e:	001a      	movs	r2, r3
    b320:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    b322:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    b324:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    b326:	4542      	cmp	r2, r8
    b328:	d005      	beq.n	b336 <create_chain+0x16a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    b32a:	792b      	ldrb	r3, [r5, #4]
    b32c:	2b00      	cmp	r3, #0
    b32e:	d143      	bne.n	b3b8 <create_chain+0x1ec>
		if (sector) {
    b330:	9b00      	ldr	r3, [sp, #0]
    b332:	2b00      	cmp	r3, #0
    b334:	d123      	bne.n	b37e <create_chain+0x1b2>
		p = &fs->win[clst * 4 % SS(fs)];
    b336:	23fe      	movs	r3, #254	; 0xfe
    b338:	00a2      	lsls	r2, r4, #2
    b33a:	005b      	lsls	r3, r3, #1
    b33c:	401a      	ands	r2, r3
    b33e:	0011      	movs	r1, r2
    b340:	3134      	adds	r1, #52	; 0x34
    b342:	1869      	adds	r1, r5, r1
		return LD_DWORD(p) & 0x0FFFFFFF;
    b344:	78cb      	ldrb	r3, [r1, #3]
    b346:	7888      	ldrb	r0, [r1, #2]
    b348:	18aa      	adds	r2, r5, r2
    b34a:	3234      	adds	r2, #52	; 0x34
    b34c:	7812      	ldrb	r2, [r2, #0]
    b34e:	061b      	lsls	r3, r3, #24
    b350:	0400      	lsls	r0, r0, #16
    b352:	4303      	orrs	r3, r0
    b354:	4313      	orrs	r3, r2
    b356:	784a      	ldrb	r2, [r1, #1]
    b358:	0212      	lsls	r2, r2, #8
    b35a:	4313      	orrs	r3, r2
    b35c:	011b      	lsls	r3, r3, #4
    b35e:	091b      	lsrs	r3, r3, #4
    b360:	e793      	b.n	b28a <create_chain+0xbe>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    b362:	0029      	movs	r1, r5
    b364:	001a      	movs	r2, r3
    b366:	7868      	ldrb	r0, [r5, #1]
    b368:	2301      	movs	r3, #1
    b36a:	3134      	adds	r1, #52	; 0x34
    b36c:	4e9a      	ldr	r6, [pc, #616]	; (b5d8 <create_chain+0x40c>)
    b36e:	4690      	mov	r8, r2
    b370:	47b0      	blx	r6
    b372:	2800      	cmp	r0, #0
    b374:	d000      	beq.n	b378 <create_chain+0x1ac>
    b376:	e74f      	b.n	b218 <create_chain+0x4c>
			fs->winsect = sector;
    b378:	4643      	mov	r3, r8
    b37a:	632b      	str	r3, [r5, #48]	; 0x30
    b37c:	e77b      	b.n	b276 <create_chain+0xaa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    b37e:	0029      	movs	r1, r5
    b380:	001a      	movs	r2, r3
    b382:	7868      	ldrb	r0, [r5, #1]
    b384:	2301      	movs	r3, #1
    b386:	3134      	adds	r1, #52	; 0x34
    b388:	4e93      	ldr	r6, [pc, #588]	; (b5d8 <create_chain+0x40c>)
    b38a:	4691      	mov	r9, r2
    b38c:	47b0      	blx	r6
    b38e:	2800      	cmp	r0, #0
    b390:	d000      	beq.n	b394 <create_chain+0x1c8>
    b392:	e741      	b.n	b218 <create_chain+0x4c>
			fs->winsect = sector;
    b394:	464b      	mov	r3, r9
    b396:	632b      	str	r3, [r5, #48]	; 0x30
    b398:	e7cd      	b.n	b336 <create_chain+0x16a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    b39a:	0029      	movs	r1, r5
    b39c:	7868      	ldrb	r0, [r5, #1]
    b39e:	2301      	movs	r3, #1
    b3a0:	464a      	mov	r2, r9
    b3a2:	3134      	adds	r1, #52	; 0x34
    b3a4:	4e8c      	ldr	r6, [pc, #560]	; (b5d8 <create_chain+0x40c>)
    b3a6:	47b0      	blx	r6
    b3a8:	2800      	cmp	r0, #0
    b3aa:	d000      	beq.n	b3ae <create_chain+0x1e2>
    b3ac:	e734      	b.n	b218 <create_chain+0x4c>
			fs->winsect = sector;
    b3ae:	464b      	mov	r3, r9
    b3b0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    b3b2:	632b      	str	r3, [r5, #48]	; 0x30
    b3b4:	46c8      	mov	r8, r9
    b3b6:	e787      	b.n	b2c8 <create_chain+0xfc>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    b3b8:	2334      	movs	r3, #52	; 0x34
    b3ba:	469a      	mov	sl, r3
    b3bc:	44aa      	add	sl, r5
    b3be:	7868      	ldrb	r0, [r5, #1]
    b3c0:	3b33      	subs	r3, #51	; 0x33
    b3c2:	4642      	mov	r2, r8
    b3c4:	4651      	mov	r1, sl
    b3c6:	4e85      	ldr	r6, [pc, #532]	; (b5dc <create_chain+0x410>)
    b3c8:	47b0      	blx	r6
    b3ca:	2800      	cmp	r0, #0
    b3cc:	d000      	beq.n	b3d0 <create_chain+0x204>
    b3ce:	e723      	b.n	b218 <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b3d0:	6a2b      	ldr	r3, [r5, #32]
    b3d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			fs->wflag = 0;
    b3d4:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b3d6:	189a      	adds	r2, r3, r2
    b3d8:	4590      	cmp	r8, r2
    b3da:	d2a9      	bcs.n	b330 <create_chain+0x164>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b3dc:	78ea      	ldrb	r2, [r5, #3]
    b3de:	4691      	mov	r9, r2
    b3e0:	2a01      	cmp	r2, #1
    b3e2:	d9a5      	bls.n	b330 <create_chain+0x164>
    b3e4:	4652      	mov	r2, sl
    b3e6:	9201      	str	r2, [sp, #4]
    b3e8:	9a00      	ldr	r2, [sp, #0]
    b3ea:	002e      	movs	r6, r5
    b3ec:	46a2      	mov	sl, r4
    b3ee:	4645      	mov	r5, r8
    b3f0:	464c      	mov	r4, r9
    b3f2:	46b8      	mov	r8, r7
    b3f4:	4691      	mov	r9, r2
    b3f6:	e000      	b.n	b3fa <create_chain+0x22e>
    b3f8:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
    b3fa:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b3fc:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    b3fe:	7870      	ldrb	r0, [r6, #1]
    b400:	2301      	movs	r3, #1
    b402:	002a      	movs	r2, r5
    b404:	9901      	ldr	r1, [sp, #4]
    b406:	4f75      	ldr	r7, [pc, #468]	; (b5dc <create_chain+0x410>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b408:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    b40a:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b40c:	2c01      	cmp	r4, #1
    b40e:	d1f3      	bne.n	b3f8 <create_chain+0x22c>
    b410:	464b      	mov	r3, r9
    b412:	4647      	mov	r7, r8
    b414:	4654      	mov	r4, sl
    b416:	0035      	movs	r5, r6
    b418:	9300      	str	r3, [sp, #0]
    b41a:	e789      	b.n	b330 <create_chain+0x164>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    b41c:	2334      	movs	r3, #52	; 0x34
    b41e:	469c      	mov	ip, r3
    b420:	44ac      	add	ip, r5
    b422:	4663      	mov	r3, ip
    b424:	4e6d      	ldr	r6, [pc, #436]	; (b5dc <create_chain+0x410>)
    b426:	9302      	str	r3, [sp, #8]
    b428:	7868      	ldrb	r0, [r5, #1]
    b42a:	4661      	mov	r1, ip
    b42c:	2301      	movs	r3, #1
    b42e:	4642      	mov	r2, r8
    b430:	9601      	str	r6, [sp, #4]
    b432:	47b0      	blx	r6
    b434:	2800      	cmp	r0, #0
    b436:	d000      	beq.n	b43a <create_chain+0x26e>
    b438:	e6ee      	b.n	b218 <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b43a:	6a2b      	ldr	r3, [r5, #32]
    b43c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			fs->wflag = 0;
    b43e:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b440:	189a      	adds	r2, r3, r2
    b442:	4590      	cmp	r8, r2
    b444:	d300      	bcc.n	b448 <create_chain+0x27c>
    b446:	e739      	b.n	b2bc <create_chain+0xf0>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b448:	78ea      	ldrb	r2, [r5, #3]
    b44a:	4692      	mov	sl, r2
    b44c:	2a01      	cmp	r2, #1
    b44e:	d800      	bhi.n	b452 <create_chain+0x286>
    b450:	e734      	b.n	b2bc <create_chain+0xf0>
    b452:	0022      	movs	r2, r4
    b454:	9900      	ldr	r1, [sp, #0]
    b456:	4654      	mov	r4, sl
    b458:	002e      	movs	r6, r5
    b45a:	9703      	str	r7, [sp, #12]
    b45c:	4645      	mov	r5, r8
    b45e:	4692      	mov	sl, r2
    b460:	4688      	mov	r8, r1
    b462:	e000      	b.n	b466 <create_chain+0x29a>
    b464:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
    b466:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b468:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    b46a:	7870      	ldrb	r0, [r6, #1]
    b46c:	2301      	movs	r3, #1
    b46e:	002a      	movs	r2, r5
    b470:	9902      	ldr	r1, [sp, #8]
    b472:	9f01      	ldr	r7, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b474:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    b476:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b478:	2c01      	cmp	r4, #1
    b47a:	d1f3      	bne.n	b464 <create_chain+0x298>
    b47c:	4643      	mov	r3, r8
    b47e:	9f03      	ldr	r7, [sp, #12]
    b480:	4654      	mov	r4, sl
    b482:	0035      	movs	r5, r6
    b484:	9300      	str	r3, [sp, #0]
    b486:	e719      	b.n	b2bc <create_chain+0xf0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    b488:	2334      	movs	r3, #52	; 0x34
    b48a:	469a      	mov	sl, r3
    b48c:	44aa      	add	sl, r5
    b48e:	7868      	ldrb	r0, [r5, #1]
    b490:	3b33      	subs	r3, #51	; 0x33
    b492:	4642      	mov	r2, r8
    b494:	4651      	mov	r1, sl
    b496:	4e51      	ldr	r6, [pc, #324]	; (b5dc <create_chain+0x410>)
    b498:	47b0      	blx	r6
    b49a:	2800      	cmp	r0, #0
    b49c:	d000      	beq.n	b4a0 <create_chain+0x2d4>
    b49e:	e6bb      	b.n	b218 <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b4a0:	6a2b      	ldr	r3, [r5, #32]
    b4a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			fs->wflag = 0;
    b4a4:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b4a6:	189a      	adds	r2, r3, r2
    b4a8:	4590      	cmp	r8, r2
    b4aa:	d300      	bcc.n	b4ae <create_chain+0x2e2>
    b4ac:	e6e0      	b.n	b270 <create_chain+0xa4>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b4ae:	78ea      	ldrb	r2, [r5, #3]
    b4b0:	4691      	mov	r9, r2
    b4b2:	2a01      	cmp	r2, #1
    b4b4:	d800      	bhi.n	b4b8 <create_chain+0x2ec>
    b4b6:	e6db      	b.n	b270 <create_chain+0xa4>
    b4b8:	4652      	mov	r2, sl
    b4ba:	9201      	str	r2, [sp, #4]
    b4bc:	9a00      	ldr	r2, [sp, #0]
    b4be:	002e      	movs	r6, r5
    b4c0:	46a2      	mov	sl, r4
    b4c2:	4645      	mov	r5, r8
    b4c4:	464c      	mov	r4, r9
    b4c6:	46b8      	mov	r8, r7
    b4c8:	4691      	mov	r9, r2
    b4ca:	e000      	b.n	b4ce <create_chain+0x302>
    b4cc:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
    b4ce:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b4d0:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    b4d2:	7870      	ldrb	r0, [r6, #1]
    b4d4:	2301      	movs	r3, #1
    b4d6:	002a      	movs	r2, r5
    b4d8:	9901      	ldr	r1, [sp, #4]
    b4da:	4f40      	ldr	r7, [pc, #256]	; (b5dc <create_chain+0x410>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b4dc:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    b4de:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b4e0:	2c01      	cmp	r4, #1
    b4e2:	d1f3      	bne.n	b4cc <create_chain+0x300>
    b4e4:	464b      	mov	r3, r9
    b4e6:	4647      	mov	r7, r8
    b4e8:	4654      	mov	r4, sl
    b4ea:	0035      	movs	r5, r6
    b4ec:	9300      	str	r3, [sp, #0]
    b4ee:	e6bf      	b.n	b270 <create_chain+0xa4>
		if (ncl == scl) return 0;		/* No free cluster */
    b4f0:	2400      	movs	r4, #0
    b4f2:	e69b      	b.n	b22c <create_chain+0x60>
    b4f4:	4b3a      	ldr	r3, [pc, #232]	; (b5e0 <create_chain+0x414>)
    b4f6:	4798      	blx	r3
    b4f8:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
    b4fa:	2801      	cmp	r0, #1
    b4fc:	d800      	bhi.n	b500 <create_chain+0x334>
    b4fe:	e694      	b.n	b22a <create_chain+0x5e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    b500:	69eb      	ldr	r3, [r5, #28]
    b502:	46d3      	mov	fp, sl
    b504:	4283      	cmp	r3, r0
    b506:	d800      	bhi.n	b50a <create_chain+0x33e>
    b508:	e672      	b.n	b1f0 <create_chain+0x24>
    b50a:	e68f      	b.n	b22c <create_chain+0x60>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    b50c:	0029      	movs	r1, r5
    b50e:	7868      	ldrb	r0, [r5, #1]
    b510:	2301      	movs	r3, #1
    b512:	464a      	mov	r2, r9
    b514:	3134      	adds	r1, #52	; 0x34
    b516:	4e30      	ldr	r6, [pc, #192]	; (b5d8 <create_chain+0x40c>)
    b518:	47b0      	blx	r6
    b51a:	2800      	cmp	r0, #0
    b51c:	d000      	beq.n	b520 <create_chain+0x354>
    b51e:	e67b      	b.n	b218 <create_chain+0x4c>
			fs->winsect = sector;
    b520:	464b      	mov	r3, r9
    b522:	632b      	str	r3, [r5, #48]	; 0x30
    b524:	e6e7      	b.n	b2f6 <create_chain+0x12a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    b526:	2334      	movs	r3, #52	; 0x34
    b528:	469c      	mov	ip, r3
    b52a:	44ac      	add	ip, r5
    b52c:	4661      	mov	r1, ip
    b52e:	4e2b      	ldr	r6, [pc, #172]	; (b5dc <create_chain+0x410>)
    b530:	7868      	ldrb	r0, [r5, #1]
    b532:	2301      	movs	r3, #1
    b534:	4642      	mov	r2, r8
    b536:	9102      	str	r1, [sp, #8]
    b538:	9601      	str	r6, [sp, #4]
    b53a:	47b0      	blx	r6
    b53c:	2800      	cmp	r0, #0
    b53e:	d000      	beq.n	b542 <create_chain+0x376>
    b540:	e66a      	b.n	b218 <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b542:	6a2b      	ldr	r3, [r5, #32]
    b544:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			fs->wflag = 0;
    b546:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b548:	189a      	adds	r2, r3, r2
    b54a:	4542      	cmp	r2, r8
    b54c:	d800      	bhi.n	b550 <create_chain+0x384>
    b54e:	e6ce      	b.n	b2ee <create_chain+0x122>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b550:	78ea      	ldrb	r2, [r5, #3]
    b552:	2a01      	cmp	r2, #1
    b554:	d800      	bhi.n	b558 <create_chain+0x38c>
    b556:	e6ca      	b.n	b2ee <create_chain+0x122>
    b558:	9703      	str	r7, [sp, #12]
    b55a:	0017      	movs	r7, r2
    b55c:	0022      	movs	r2, r4
    b55e:	4644      	mov	r4, r8
    b560:	4690      	mov	r8, r2
    b562:	e000      	b.n	b566 <create_chain+0x39a>
    b564:	6a2b      	ldr	r3, [r5, #32]
					wsect += fs->fsize;
    b566:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b568:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    b56a:	7868      	ldrb	r0, [r5, #1]
    b56c:	2301      	movs	r3, #1
    b56e:	0022      	movs	r2, r4
    b570:	9902      	ldr	r1, [sp, #8]
    b572:	9e01      	ldr	r6, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b574:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    b576:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b578:	2f01      	cmp	r7, #1
    b57a:	d1f3      	bne.n	b564 <create_chain+0x398>
    b57c:	9f03      	ldr	r7, [sp, #12]
    b57e:	4644      	mov	r4, r8
    b580:	e6b5      	b.n	b2ee <create_chain+0x122>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    b582:	69eb      	ldr	r3, [r5, #28]
    b584:	42a3      	cmp	r3, r4
    b586:	d800      	bhi.n	b58a <create_chain+0x3be>
    b588:	e64f      	b.n	b22a <create_chain+0x5e>
    b58a:	4a16      	ldr	r2, [pc, #88]	; (b5e4 <create_chain+0x418>)
    b58c:	0021      	movs	r1, r4
    b58e:	0028      	movs	r0, r5
    b590:	4e15      	ldr	r6, [pc, #84]	; (b5e8 <create_chain+0x41c>)
    b592:	47b0      	blx	r6
	if (res == FR_OK && clst != 0) {
    b594:	2800      	cmp	r0, #0
    b596:	d11a      	bne.n	b5ce <create_chain+0x402>
    b598:	465b      	mov	r3, fp
    b59a:	2b00      	cmp	r3, #0
    b59c:	d00d      	beq.n	b5ba <create_chain+0x3ee>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    b59e:	465b      	mov	r3, fp
    b5a0:	2b01      	cmp	r3, #1
    b5a2:	d800      	bhi.n	b5a6 <create_chain+0x3da>
    b5a4:	e641      	b.n	b22a <create_chain+0x5e>
    b5a6:	69eb      	ldr	r3, [r5, #28]
    b5a8:	459b      	cmp	fp, r3
    b5aa:	d300      	bcc.n	b5ae <create_chain+0x3e2>
    b5ac:	e63d      	b.n	b22a <create_chain+0x5e>
    b5ae:	0022      	movs	r2, r4
    b5b0:	4659      	mov	r1, fp
    b5b2:	0028      	movs	r0, r5
    b5b4:	47b0      	blx	r6
	if (res == FR_OK) {
    b5b6:	2800      	cmp	r0, #0
    b5b8:	d109      	bne.n	b5ce <create_chain+0x402>
		if (fs->free_clust != 0xFFFFFFFF) {
    b5ba:	692b      	ldr	r3, [r5, #16]
		fs->last_clust = ncl;			/* Update FSINFO */
    b5bc:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    b5be:	1c5a      	adds	r2, r3, #1
    b5c0:	d100      	bne.n	b5c4 <create_chain+0x3f8>
    b5c2:	e633      	b.n	b22c <create_chain+0x60>
			fs->free_clust--;
    b5c4:	3b01      	subs	r3, #1
    b5c6:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    b5c8:	2301      	movs	r3, #1
    b5ca:	716b      	strb	r3, [r5, #5]
    b5cc:	e62e      	b.n	b22c <create_chain+0x60>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    b5ce:	2801      	cmp	r0, #1
    b5d0:	d100      	bne.n	b5d4 <create_chain+0x408>
    b5d2:	e621      	b.n	b218 <create_chain+0x4c>
    b5d4:	e629      	b.n	b22a <create_chain+0x5e>
    b5d6:	46c0      	nop			; (mov r8, r8)
    b5d8:	00009d3d 	.word	0x00009d3d
    b5dc:	00009dc1 	.word	0x00009dc1
    b5e0:	0000ae05 	.word	0x0000ae05
    b5e4:	0fffffff 	.word	0x0fffffff
    b5e8:	0000a729 	.word	0x0000a729

0000b5ec <dir_next.constprop.7>:
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
    b5ec:	b570      	push	{r4, r5, r6, lr}
	i = dj->index + 1;
    b5ee:	88c4      	ldrh	r4, [r0, #6]
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
    b5f0:	0005      	movs	r5, r0
	i = dj->index + 1;
    b5f2:	3401      	adds	r4, #1
    b5f4:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    b5f6:	2c00      	cmp	r4, #0
    b5f8:	d101      	bne.n	b5fe <dir_next.constprop.7+0x12>
		return FR_NO_FILE;
    b5fa:	2004      	movs	r0, #4
}
    b5fc:	bd70      	pop	{r4, r5, r6, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    b5fe:	6903      	ldr	r3, [r0, #16]
    b600:	2b00      	cmp	r3, #0
    b602:	d0fa      	beq.n	b5fa <dir_next.constprop.7+0xe>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    b604:	260f      	movs	r6, #15
    b606:	4026      	ands	r6, r4
    b608:	d007      	beq.n	b61a <dir_next.constprop.7+0x2e>
    b60a:	6803      	ldr	r3, [r0, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    b60c:	3334      	adds	r3, #52	; 0x34
    b60e:	0176      	lsls	r6, r6, #5
    b610:	199e      	adds	r6, r3, r6
	dj->index = i;
    b612:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    b614:	616e      	str	r6, [r5, #20]
	return FR_OK;
    b616:	2000      	movs	r0, #0
    b618:	e7f0      	b.n	b5fc <dir_next.constprop.7+0x10>
		if (dj->clust == 0) {	/* Static table */
    b61a:	68c1      	ldr	r1, [r0, #12]
		dj->sect++;					/* Next sector */
    b61c:	3301      	adds	r3, #1
    b61e:	6103      	str	r3, [r0, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    b620:	6803      	ldr	r3, [r0, #0]
		if (dj->clust == 0) {	/* Static table */
    b622:	2900      	cmp	r1, #0
    b624:	d00b      	beq.n	b63e <dir_next.constprop.7+0x52>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    b626:	789a      	ldrb	r2, [r3, #2]
    b628:	0920      	lsrs	r0, r4, #4
    b62a:	3a01      	subs	r2, #1
    b62c:	4210      	tst	r0, r2
    b62e:	d1ed      	bne.n	b60c <dir_next.constprop.7+0x20>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    b630:	2901      	cmp	r1, #1
    b632:	d902      	bls.n	b63a <dir_next.constprop.7+0x4e>
    b634:	69da      	ldr	r2, [r3, #28]
    b636:	4291      	cmp	r1, r2
    b638:	d305      	bcc.n	b646 <dir_next.constprop.7+0x5a>
				if (clst <= 1) return FR_INT_ERR;
    b63a:	2002      	movs	r0, #2
    b63c:	e7de      	b.n	b5fc <dir_next.constprop.7+0x10>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    b63e:	891a      	ldrh	r2, [r3, #8]
    b640:	42a2      	cmp	r2, r4
    b642:	d9da      	bls.n	b5fa <dir_next.constprop.7+0xe>
    b644:	e7e2      	b.n	b60c <dir_next.constprop.7+0x20>
    b646:	0018      	movs	r0, r3
    b648:	4b0c      	ldr	r3, [pc, #48]	; (b67c <dir_next.constprop.7+0x90>)
    b64a:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
    b64c:	2801      	cmp	r0, #1
    b64e:	d9f4      	bls.n	b63a <dir_next.constprop.7+0x4e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    b650:	1c43      	adds	r3, r0, #1
    b652:	d010      	beq.n	b676 <dir_next.constprop.7+0x8a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    b654:	682b      	ldr	r3, [r5, #0]
    b656:	69da      	ldr	r2, [r3, #28]
    b658:	4290      	cmp	r0, r2
    b65a:	d2ce      	bcs.n	b5fa <dir_next.constprop.7+0xe>
				dj->clust = clst;				/* Initialize data for new cluster */
    b65c:	60e8      	str	r0, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    b65e:	69da      	ldr	r2, [r3, #28]
	clst -= 2;
    b660:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    b662:	3a02      	subs	r2, #2
    b664:	2100      	movs	r1, #0
    b666:	4290      	cmp	r0, r2
    b668:	d203      	bcs.n	b672 <dir_next.constprop.7+0x86>
	return clst * fs->csize + fs->database;
    b66a:	789a      	ldrb	r2, [r3, #2]
    b66c:	4350      	muls	r0, r2
    b66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b670:	1881      	adds	r1, r0, r2
				dj->sect = clust2sect(dj->fs, clst);
    b672:	6129      	str	r1, [r5, #16]
    b674:	e7ca      	b.n	b60c <dir_next.constprop.7+0x20>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    b676:	2001      	movs	r0, #1
    b678:	e7c0      	b.n	b5fc <dir_next.constprop.7+0x10>
    b67a:	46c0      	nop			; (mov r8, r8)
    b67c:	0000ae05 	.word	0x0000ae05

0000b680 <dir_find.part.5>:
FRESULT dir_find (
    b680:	b5f0      	push	{r4, r5, r6, r7, lr}
    b682:	4657      	mov	r7, sl
    b684:	464e      	mov	r6, r9
    b686:	4645      	mov	r5, r8
    b688:	46de      	mov	lr, fp
    b68a:	b5e0      	push	{r5, r6, r7, lr}
    b68c:	6906      	ldr	r6, [r0, #16]
    b68e:	23ff      	movs	r3, #255	; 0xff
    b690:	0005      	movs	r5, r0
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    b692:	0037      	movs	r7, r6
FRESULT dir_find (
    b694:	b085      	sub	sp, #20
    b696:	6804      	ldr	r4, [r0, #0]
    b698:	9302      	str	r3, [sp, #8]
    b69a:	9301      	str	r3, [sp, #4]
	wsect = fs->winsect;
    b69c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b69e:	001a      	movs	r2, r3
	if (wsect != sector) {	/* Changed current window */
    b6a0:	42bb      	cmp	r3, r7
    b6a2:	d010      	beq.n	b6c6 <dir_find.part.5+0x46>
		if (fs->wflag) {	/* Write back dirty window if needed */
    b6a4:	7923      	ldrb	r3, [r4, #4]
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	d000      	beq.n	b6ac <dir_find.part.5+0x2c>
    b6aa:	e0c8      	b.n	b83e <dir_find.part.5+0x1be>
		if (sector) {
    b6ac:	2f00      	cmp	r7, #0
    b6ae:	d00a      	beq.n	b6c6 <dir_find.part.5+0x46>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    b6b0:	0021      	movs	r1, r4
    b6b2:	7860      	ldrb	r0, [r4, #1]
    b6b4:	2301      	movs	r3, #1
    b6b6:	003a      	movs	r2, r7
    b6b8:	3134      	adds	r1, #52	; 0x34
    b6ba:	4ec0      	ldr	r6, [pc, #768]	; (b9bc <dir_find.part.5+0x33c>)
    b6bc:	47b0      	blx	r6
    b6be:	2800      	cmp	r0, #0
    b6c0:	d000      	beq.n	b6c4 <dir_find.part.5+0x44>
    b6c2:	e0ea      	b.n	b89a <dir_find.part.5+0x21a>
			fs->winsect = sector;
    b6c4:	6327      	str	r7, [r4, #48]	; 0x30
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    b6c6:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    b6c8:	7823      	ldrb	r3, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    b6ca:	2b00      	cmp	r3, #0
    b6cc:	d010      	beq.n	b6f0 <dir_find.part.5+0x70>
		a = dir[DIR_Attr] & AM_MASK;
    b6ce:	223f      	movs	r2, #63	; 0x3f
    b6d0:	7ae1      	ldrb	r1, [r4, #11]
    b6d2:	400a      	ands	r2, r1
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    b6d4:	2be5      	cmp	r3, #229	; 0xe5
    b6d6:	d004      	beq.n	b6e2 <dir_find.part.5+0x62>
    b6d8:	0709      	lsls	r1, r1, #28
    b6da:	d522      	bpl.n	b722 <dir_find.part.5+0xa2>
    b6dc:	2a0f      	cmp	r2, #15
    b6de:	d100      	bne.n	b6e2 <dir_find.part.5+0x62>
    b6e0:	e0dd      	b.n	b89e <dir_find.part.5+0x21e>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    b6e2:	23ff      	movs	r3, #255	; 0xff
    b6e4:	9301      	str	r3, [sp, #4]
	i = dj->index + 1;
    b6e6:	88ee      	ldrh	r6, [r5, #6]
    b6e8:	3601      	adds	r6, #1
    b6ea:	b2b6      	uxth	r6, r6
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    b6ec:	2e00      	cmp	r6, #0
    b6ee:	d107      	bne.n	b700 <dir_find.part.5+0x80>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    b6f0:	2004      	movs	r0, #4
}
    b6f2:	b005      	add	sp, #20
    b6f4:	bc3c      	pop	{r2, r3, r4, r5}
    b6f6:	4690      	mov	r8, r2
    b6f8:	4699      	mov	r9, r3
    b6fa:	46a2      	mov	sl, r4
    b6fc:	46ab      	mov	fp, r5
    b6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    b700:	692f      	ldr	r7, [r5, #16]
    b702:	2f00      	cmp	r7, #0
    b704:	d0f4      	beq.n	b6f0 <dir_find.part.5+0x70>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    b706:	230f      	movs	r3, #15
    b708:	4033      	ands	r3, r6
    b70a:	4698      	mov	r8, r3
    b70c:	d100      	bne.n	b710 <dir_find.part.5+0x90>
    b70e:	e10e      	b.n	b92e <dir_find.part.5+0x2ae>
    b710:	682c      	ldr	r4, [r5, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    b712:	4643      	mov	r3, r8
    b714:	015a      	lsls	r2, r3, #5
    b716:	0023      	movs	r3, r4
    b718:	3334      	adds	r3, #52	; 0x34
    b71a:	189b      	adds	r3, r3, r2
	dj->index = i;
    b71c:	80ee      	strh	r6, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    b71e:	616b      	str	r3, [r5, #20]
    b720:	e7bc      	b.n	b69c <dir_find.part.5+0x1c>
			if (a == AM_LFN) {			/* An LFN entry is found */
    b722:	2a0f      	cmp	r2, #15
    b724:	d100      	bne.n	b728 <dir_find.part.5+0xa8>
    b726:	e0ba      	b.n	b89e <dir_find.part.5+0x21e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    b728:	9a01      	ldr	r2, [sp, #4]
    b72a:	2a00      	cmp	r2, #0
    b72c:	d146      	bne.n	b7bc <dir_find.part.5+0x13c>
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    b72e:	085a      	lsrs	r2, r3, #1
    b730:	01db      	lsls	r3, r3, #7
    b732:	4313      	orrs	r3, r2
    b734:	7862      	ldrb	r2, [r4, #1]
    b736:	189b      	adds	r3, r3, r2
    b738:	b2da      	uxtb	r2, r3
    b73a:	0852      	lsrs	r2, r2, #1
    b73c:	01db      	lsls	r3, r3, #7
    b73e:	431a      	orrs	r2, r3
    b740:	78a3      	ldrb	r3, [r4, #2]
    b742:	b2d2      	uxtb	r2, r2
    b744:	18d2      	adds	r2, r2, r3
    b746:	b2d3      	uxtb	r3, r2
    b748:	085b      	lsrs	r3, r3, #1
    b74a:	01d2      	lsls	r2, r2, #7
    b74c:	4313      	orrs	r3, r2
    b74e:	78e2      	ldrb	r2, [r4, #3]
    b750:	b2db      	uxtb	r3, r3
    b752:	189b      	adds	r3, r3, r2
    b754:	b2da      	uxtb	r2, r3
    b756:	0852      	lsrs	r2, r2, #1
    b758:	01db      	lsls	r3, r3, #7
    b75a:	431a      	orrs	r2, r3
    b75c:	7923      	ldrb	r3, [r4, #4]
    b75e:	b2d2      	uxtb	r2, r2
    b760:	18d2      	adds	r2, r2, r3
    b762:	b2d3      	uxtb	r3, r2
    b764:	085b      	lsrs	r3, r3, #1
    b766:	01d2      	lsls	r2, r2, #7
    b768:	4313      	orrs	r3, r2
    b76a:	7962      	ldrb	r2, [r4, #5]
    b76c:	b2db      	uxtb	r3, r3
    b76e:	189b      	adds	r3, r3, r2
    b770:	b2da      	uxtb	r2, r3
    b772:	0852      	lsrs	r2, r2, #1
    b774:	01db      	lsls	r3, r3, #7
    b776:	431a      	orrs	r2, r3
    b778:	79a3      	ldrb	r3, [r4, #6]
    b77a:	b2d2      	uxtb	r2, r2
    b77c:	18d2      	adds	r2, r2, r3
    b77e:	b2d3      	uxtb	r3, r2
    b780:	085b      	lsrs	r3, r3, #1
    b782:	01d2      	lsls	r2, r2, #7
    b784:	4313      	orrs	r3, r2
    b786:	79e2      	ldrb	r2, [r4, #7]
    b788:	b2db      	uxtb	r3, r3
    b78a:	189b      	adds	r3, r3, r2
    b78c:	b2da      	uxtb	r2, r3
    b78e:	0852      	lsrs	r2, r2, #1
    b790:	01db      	lsls	r3, r3, #7
    b792:	431a      	orrs	r2, r3
    b794:	7a23      	ldrb	r3, [r4, #8]
    b796:	b2d2      	uxtb	r2, r2
    b798:	18d2      	adds	r2, r2, r3
    b79a:	b2d3      	uxtb	r3, r2
    b79c:	085b      	lsrs	r3, r3, #1
    b79e:	01d2      	lsls	r2, r2, #7
    b7a0:	4313      	orrs	r3, r2
    b7a2:	7a62      	ldrb	r2, [r4, #9]
    b7a4:	b2db      	uxtb	r3, r3
    b7a6:	189b      	adds	r3, r3, r2
    b7a8:	b2da      	uxtb	r2, r3
    b7aa:	0852      	lsrs	r2, r2, #1
    b7ac:	01db      	lsls	r3, r3, #7
    b7ae:	4313      	orrs	r3, r2
    b7b0:	7aa2      	ldrb	r2, [r4, #10]
    b7b2:	189b      	adds	r3, r3, r2
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    b7b4:	9a02      	ldr	r2, [sp, #8]
    b7b6:	b2db      	uxtb	r3, r3
    b7b8:	4293      	cmp	r3, r2
    b7ba:	d03e      	beq.n	b83a <dir_find.part.5+0x1ba>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    b7bc:	2301      	movs	r3, #1
    b7be:	425b      	negs	r3, r3
    b7c0:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    b7c2:	69ab      	ldr	r3, [r5, #24]
    b7c4:	7ada      	ldrb	r2, [r3, #11]
    b7c6:	07d2      	lsls	r2, r2, #31
    b7c8:	d500      	bpl.n	b7cc <dir_find.part.5+0x14c>
    b7ca:	e78a      	b.n	b6e2 <dir_find.part.5+0x62>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    b7cc:	7821      	ldrb	r1, [r4, #0]
    b7ce:	781a      	ldrb	r2, [r3, #0]
    b7d0:	4291      	cmp	r1, r2
    b7d2:	d000      	beq.n	b7d6 <dir_find.part.5+0x156>
    b7d4:	e785      	b.n	b6e2 <dir_find.part.5+0x62>
    b7d6:	7861      	ldrb	r1, [r4, #1]
    b7d8:	785a      	ldrb	r2, [r3, #1]
    b7da:	4291      	cmp	r1, r2
    b7dc:	d000      	beq.n	b7e0 <dir_find.part.5+0x160>
    b7de:	e780      	b.n	b6e2 <dir_find.part.5+0x62>
    b7e0:	7899      	ldrb	r1, [r3, #2]
    b7e2:	78a2      	ldrb	r2, [r4, #2]
    b7e4:	4291      	cmp	r1, r2
    b7e6:	d000      	beq.n	b7ea <dir_find.part.5+0x16a>
    b7e8:	e77b      	b.n	b6e2 <dir_find.part.5+0x62>
    b7ea:	78e1      	ldrb	r1, [r4, #3]
    b7ec:	78da      	ldrb	r2, [r3, #3]
    b7ee:	4291      	cmp	r1, r2
    b7f0:	d000      	beq.n	b7f4 <dir_find.part.5+0x174>
    b7f2:	e776      	b.n	b6e2 <dir_find.part.5+0x62>
    b7f4:	7921      	ldrb	r1, [r4, #4]
    b7f6:	791a      	ldrb	r2, [r3, #4]
    b7f8:	4291      	cmp	r1, r2
    b7fa:	d000      	beq.n	b7fe <dir_find.part.5+0x17e>
    b7fc:	e771      	b.n	b6e2 <dir_find.part.5+0x62>
    b7fe:	7961      	ldrb	r1, [r4, #5]
    b800:	795a      	ldrb	r2, [r3, #5]
    b802:	4291      	cmp	r1, r2
    b804:	d000      	beq.n	b808 <dir_find.part.5+0x188>
    b806:	e76c      	b.n	b6e2 <dir_find.part.5+0x62>
    b808:	79a1      	ldrb	r1, [r4, #6]
    b80a:	799a      	ldrb	r2, [r3, #6]
    b80c:	4291      	cmp	r1, r2
    b80e:	d000      	beq.n	b812 <dir_find.part.5+0x192>
    b810:	e767      	b.n	b6e2 <dir_find.part.5+0x62>
    b812:	79e1      	ldrb	r1, [r4, #7]
    b814:	79da      	ldrb	r2, [r3, #7]
    b816:	4291      	cmp	r1, r2
    b818:	d000      	beq.n	b81c <dir_find.part.5+0x19c>
    b81a:	e762      	b.n	b6e2 <dir_find.part.5+0x62>
    b81c:	7a21      	ldrb	r1, [r4, #8]
    b81e:	7a1a      	ldrb	r2, [r3, #8]
    b820:	4291      	cmp	r1, r2
    b822:	d000      	beq.n	b826 <dir_find.part.5+0x1a6>
    b824:	e75d      	b.n	b6e2 <dir_find.part.5+0x62>
    b826:	7a61      	ldrb	r1, [r4, #9]
    b828:	7a5a      	ldrb	r2, [r3, #9]
    b82a:	4291      	cmp	r1, r2
    b82c:	d000      	beq.n	b830 <dir_find.part.5+0x1b0>
    b82e:	e758      	b.n	b6e2 <dir_find.part.5+0x62>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    b830:	7aa2      	ldrb	r2, [r4, #10]
    b832:	7a9b      	ldrb	r3, [r3, #10]
    b834:	429a      	cmp	r2, r3
    b836:	d000      	beq.n	b83a <dir_find.part.5+0x1ba>
    b838:	e753      	b.n	b6e2 <dir_find.part.5+0x62>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    b83a:	2000      	movs	r0, #0
    b83c:	e759      	b.n	b6f2 <dir_find.part.5+0x72>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    b83e:	2334      	movs	r3, #52	; 0x34
    b840:	469a      	mov	sl, r3
    b842:	4e5f      	ldr	r6, [pc, #380]	; (b9c0 <dir_find.part.5+0x340>)
    b844:	44a2      	add	sl, r4
    b846:	7860      	ldrb	r0, [r4, #1]
    b848:	3b33      	subs	r3, #51	; 0x33
    b84a:	4651      	mov	r1, sl
    b84c:	4690      	mov	r8, r2
    b84e:	46b3      	mov	fp, r6
    b850:	47b0      	blx	r6
    b852:	2800      	cmp	r0, #0
    b854:	d121      	bne.n	b89a <dir_find.part.5+0x21a>
			fs->wflag = 0;
    b856:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    b858:	4640      	mov	r0, r8
    b85a:	6a23      	ldr	r3, [r4, #32]
    b85c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    b85e:	189a      	adds	r2, r3, r2
    b860:	4290      	cmp	r0, r2
    b862:	d300      	bcc.n	b866 <dir_find.part.5+0x1e6>
    b864:	e722      	b.n	b6ac <dir_find.part.5+0x2c>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b866:	78e2      	ldrb	r2, [r4, #3]
    b868:	2a01      	cmp	r2, #1
    b86a:	d800      	bhi.n	b86e <dir_find.part.5+0x1ee>
    b86c:	e71e      	b.n	b6ac <dir_find.part.5+0x2c>
    b86e:	46a9      	mov	r9, r5
    b870:	46b8      	mov	r8, r7
    b872:	0025      	movs	r5, r4
    b874:	0016      	movs	r6, r2
    b876:	0004      	movs	r4, r0
    b878:	4657      	mov	r7, sl
    b87a:	e000      	b.n	b87e <dir_find.part.5+0x1fe>
    b87c:	6a2b      	ldr	r3, [r5, #32]
					wsect += fs->fsize;
    b87e:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b880:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    b882:	7868      	ldrb	r0, [r5, #1]
    b884:	2301      	movs	r3, #1
    b886:	0022      	movs	r2, r4
    b888:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b88a:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    b88c:	47d8      	blx	fp
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    b88e:	2e01      	cmp	r6, #1
    b890:	d1f4      	bne.n	b87c <dir_find.part.5+0x1fc>
    b892:	002c      	movs	r4, r5
    b894:	4647      	mov	r7, r8
    b896:	464d      	mov	r5, r9
    b898:	e708      	b.n	b6ac <dir_find.part.5+0x2c>
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    b89a:	2001      	movs	r0, #1
    b89c:	e729      	b.n	b6f2 <dir_find.part.5+0x72>
				if (dj->lfn) {
    b89e:	69ee      	ldr	r6, [r5, #28]
    b8a0:	2e00      	cmp	r6, #0
    b8a2:	d100      	bne.n	b8a6 <dir_find.part.5+0x226>
    b8a4:	e71f      	b.n	b6e6 <dir_find.part.5+0x66>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    b8a6:	2240      	movs	r2, #64	; 0x40
    b8a8:	421a      	tst	r2, r3
    b8aa:	d03b      	beq.n	b924 <dir_find.part.5+0x2a4>
						sum = dir[LDIR_Chksum];
    b8ac:	7b61      	ldrb	r1, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
    b8ae:	4393      	bics	r3, r2
						sum = dir[LDIR_Chksum];
    b8b0:	9102      	str	r1, [sp, #8]
						c &= ~LLE; ord = c;	/* LFN start order */
    b8b2:	9301      	str	r3, [sp, #4]
						dj->lfn_idx = dj->index;
    b8b4:	88eb      	ldrh	r3, [r5, #6]
    b8b6:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    b8b8:	7b63      	ldrb	r3, [r4, #13]
    b8ba:	9a02      	ldr	r2, [sp, #8]
    b8bc:	4293      	cmp	r3, r2
    b8be:	d000      	beq.n	b8c2 <dir_find.part.5+0x242>
    b8c0:	e70f      	b.n	b6e2 <dir_find.part.5+0x62>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    b8c2:	2240      	movs	r2, #64	; 0x40
    b8c4:	7823      	ldrb	r3, [r4, #0]
			if (uc != 0xFFFF) return 0;	/* Check filler */
    b8c6:	46ab      	mov	fp, r5
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    b8c8:	4393      	bics	r3, r2
    b8ca:	3b01      	subs	r3, #1
    b8cc:	005a      	lsls	r2, r3, #1
    b8ce:	18d2      	adds	r2, r2, r3
    b8d0:	0092      	lsls	r2, r2, #2
    b8d2:	18d3      	adds	r3, r2, r3
    b8d4:	4a3b      	ldr	r2, [pc, #236]	; (b9c4 <dir_find.part.5+0x344>)
	s = 0; wc = 1;
    b8d6:	2001      	movs	r0, #1
    b8d8:	4692      	mov	sl, r2
			if (uc != 0xFFFF) return 0;	/* Check filler */
    b8da:	4a3b      	ldr	r2, [pc, #236]	; (b9c8 <dir_find.part.5+0x348>)
	s = 0; wc = 1;
    b8dc:	2700      	movs	r7, #0
			if (uc != 0xFFFF) return 0;	/* Check filler */
    b8de:	4691      	mov	r9, r2
    b8e0:	46b0      	mov	r8, r6
    b8e2:	001d      	movs	r5, r3
    b8e4:	e004      	b.n	b8f0 <dir_find.part.5+0x270>
    b8e6:	454b      	cmp	r3, r9
    b8e8:	d164      	bne.n	b9b4 <dir_find.part.5+0x334>
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    b8ea:	3701      	adds	r7, #1
    b8ec:	2f0d      	cmp	r7, #13
    b8ee:	d036      	beq.n	b95e <dir_find.part.5+0x2de>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    b8f0:	4653      	mov	r3, sl
    b8f2:	5dda      	ldrb	r2, [r3, r7]
    b8f4:	18a3      	adds	r3, r4, r2
    b8f6:	785b      	ldrb	r3, [r3, #1]
    b8f8:	5ca2      	ldrb	r2, [r4, r2]
    b8fa:	021b      	lsls	r3, r3, #8
    b8fc:	4313      	orrs	r3, r2
		if (wc) {	/* Last char has not been processed */
    b8fe:	2800      	cmp	r0, #0
    b900:	d0f1      	beq.n	b8e6 <dir_find.part.5+0x266>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    b902:	0018      	movs	r0, r3
    b904:	4b31      	ldr	r3, [pc, #196]	; (b9cc <dir_find.part.5+0x34c>)
    b906:	4798      	blx	r3
    b908:	9003      	str	r0, [sp, #12]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    b90a:	2dfe      	cmp	r5, #254	; 0xfe
    b90c:	d852      	bhi.n	b9b4 <dir_find.part.5+0x334>
    b90e:	4643      	mov	r3, r8
    b910:	1c6e      	adds	r6, r5, #1
    b912:	006d      	lsls	r5, r5, #1
    b914:	5ae8      	ldrh	r0, [r5, r3]
    b916:	4b2d      	ldr	r3, [pc, #180]	; (b9cc <dir_find.part.5+0x34c>)
    b918:	4798      	blx	r3
    b91a:	9b03      	ldr	r3, [sp, #12]
    b91c:	4283      	cmp	r3, r0
    b91e:	d149      	bne.n	b9b4 <dir_find.part.5+0x334>
    b920:	0035      	movs	r5, r6
    b922:	e7e2      	b.n	b8ea <dir_find.part.5+0x26a>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    b924:	9a01      	ldr	r2, [sp, #4]
    b926:	4293      	cmp	r3, r2
    b928:	d000      	beq.n	b92c <dir_find.part.5+0x2ac>
    b92a:	e6da      	b.n	b6e2 <dir_find.part.5+0x62>
    b92c:	e7c4      	b.n	b8b8 <dir_find.part.5+0x238>
		if (dj->clust == 0) {	/* Static table */
    b92e:	68e9      	ldr	r1, [r5, #12]
		dj->sect++;					/* Next sector */
    b930:	3701      	adds	r7, #1
    b932:	612f      	str	r7, [r5, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    b934:	682c      	ldr	r4, [r5, #0]
		if (dj->clust == 0) {	/* Static table */
    b936:	2900      	cmp	r1, #0
    b938:	d104      	bne.n	b944 <dir_find.part.5+0x2c4>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    b93a:	8923      	ldrh	r3, [r4, #8]
    b93c:	42b3      	cmp	r3, r6
    b93e:	d800      	bhi.n	b942 <dir_find.part.5+0x2c2>
    b940:	e6d6      	b.n	b6f0 <dir_find.part.5+0x70>
    b942:	e6e6      	b.n	b712 <dir_find.part.5+0x92>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    b944:	78a3      	ldrb	r3, [r4, #2]
    b946:	0932      	lsrs	r2, r6, #4
    b948:	3b01      	subs	r3, #1
    b94a:	421a      	tst	r2, r3
    b94c:	d000      	beq.n	b950 <dir_find.part.5+0x2d0>
    b94e:	e6e0      	b.n	b712 <dir_find.part.5+0x92>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    b950:	2901      	cmp	r1, #1
    b952:	d902      	bls.n	b95a <dir_find.part.5+0x2da>
    b954:	69e3      	ldr	r3, [r4, #28]
    b956:	4299      	cmp	r1, r3
    b958:	d313      	bcc.n	b982 <dir_find.part.5+0x302>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    b95a:	2002      	movs	r0, #2
    b95c:	e6c9      	b.n	b6f2 <dir_find.part.5+0x72>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    b95e:	7823      	ldrb	r3, [r4, #0]
    b960:	0029      	movs	r1, r5
    b962:	4646      	mov	r6, r8
    b964:	465d      	mov	r5, fp
    b966:	065a      	lsls	r2, r3, #25
    b968:	d506      	bpl.n	b978 <dir_find.part.5+0x2f8>
    b96a:	2800      	cmp	r0, #0
    b96c:	d004      	beq.n	b978 <dir_find.part.5+0x2f8>
    b96e:	004b      	lsls	r3, r1, #1
    b970:	5b9b      	ldrh	r3, [r3, r6]
    b972:	2b00      	cmp	r3, #0
    b974:	d000      	beq.n	b978 <dir_find.part.5+0x2f8>
    b976:	e6b4      	b.n	b6e2 <dir_find.part.5+0x62>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    b978:	9f01      	ldr	r7, [sp, #4]
    b97a:	3f01      	subs	r7, #1
    b97c:	b2fb      	uxtb	r3, r7
    b97e:	9301      	str	r3, [sp, #4]
    b980:	e6b1      	b.n	b6e6 <dir_find.part.5+0x66>
    b982:	0020      	movs	r0, r4
    b984:	4b12      	ldr	r3, [pc, #72]	; (b9d0 <dir_find.part.5+0x350>)
    b986:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
    b988:	2801      	cmp	r0, #1
    b98a:	d9e6      	bls.n	b95a <dir_find.part.5+0x2da>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    b98c:	1c43      	adds	r3, r0, #1
    b98e:	d084      	beq.n	b89a <dir_find.part.5+0x21a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    b990:	682c      	ldr	r4, [r5, #0]
    b992:	69e3      	ldr	r3, [r4, #28]
    b994:	4298      	cmp	r0, r3
    b996:	d300      	bcc.n	b99a <dir_find.part.5+0x31a>
    b998:	e6aa      	b.n	b6f0 <dir_find.part.5+0x70>
				dj->clust = clst;				/* Initialize data for new cluster */
    b99a:	60e8      	str	r0, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    b99c:	69e3      	ldr	r3, [r4, #28]
	clst -= 2;
    b99e:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    b9a0:	3b02      	subs	r3, #2
    b9a2:	2700      	movs	r7, #0
    b9a4:	4298      	cmp	r0, r3
    b9a6:	d203      	bcs.n	b9b0 <dir_find.part.5+0x330>
	return clst * fs->csize + fs->database;
    b9a8:	78a3      	ldrb	r3, [r4, #2]
    b9aa:	4358      	muls	r0, r3
    b9ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b9ae:	18c7      	adds	r7, r0, r3
				dj->sect = clust2sect(dj->fs, clst);
    b9b0:	612f      	str	r7, [r5, #16]
    b9b2:	e6ae      	b.n	b712 <dir_find.part.5+0x92>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    b9b4:	23ff      	movs	r3, #255	; 0xff
    b9b6:	465d      	mov	r5, fp
    b9b8:	9301      	str	r3, [sp, #4]
    b9ba:	e694      	b.n	b6e6 <dir_find.part.5+0x66>
    b9bc:	00009d3d 	.word	0x00009d3d
    b9c0:	00009dc1 	.word	0x00009dc1
    b9c4:	0002d448 	.word	0x0002d448
    b9c8:	0000ffff 	.word	0x0000ffff
    b9cc:	0000e5dd 	.word	0x0000e5dd
    b9d0:	0000ae05 	.word	0x0000ae05

0000b9d4 <follow_path>:
{
    b9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9d6:	46de      	mov	lr, fp
    b9d8:	4645      	mov	r5, r8
    b9da:	4657      	mov	r7, sl
    b9dc:	464e      	mov	r6, r9
    b9de:	b5e0      	push	{r5, r6, r7, lr}
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    b9e0:	780b      	ldrb	r3, [r1, #0]
{
    b9e2:	b083      	sub	sp, #12
    b9e4:	4683      	mov	fp, r0
    b9e6:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    b9e8:	2b2f      	cmp	r3, #47	; 0x2f
    b9ea:	d100      	bne.n	b9ee <follow_path+0x1a>
    b9ec:	e192      	b.n	bd14 <follow_path+0x340>
    b9ee:	2b5c      	cmp	r3, #92	; 0x5c
    b9f0:	d100      	bne.n	b9f4 <follow_path+0x20>
    b9f2:	e18f      	b.n	bd14 <follow_path+0x340>
    b9f4:	465a      	mov	r2, fp
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    b9f6:	6803      	ldr	r3, [r0, #0]
    b9f8:	699b      	ldr	r3, [r3, #24]
    b9fa:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    b9fc:	782b      	ldrb	r3, [r5, #0]
    b9fe:	2b1f      	cmp	r3, #31
    ba00:	d800      	bhi.n	ba04 <follow_path+0x30>
    ba02:	e18f      	b.n	bd24 <follow_path+0x350>
    ba04:	4bbd      	ldr	r3, [pc, #756]	; (bcfc <follow_path+0x328>)
    ba06:	469a      	mov	sl, r3
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    ba08:	7828      	ldrb	r0, [r5, #0]
    ba0a:	282f      	cmp	r0, #47	; 0x2f
    ba0c:	d001      	beq.n	ba12 <follow_path+0x3e>
    ba0e:	285c      	cmp	r0, #92	; 0x5c
    ba10:	d101      	bne.n	ba16 <follow_path+0x42>
    ba12:	3501      	adds	r5, #1
    ba14:	e7f8      	b.n	ba08 <follow_path+0x34>
	lfn = dj->lfn;
    ba16:	465b      	mov	r3, fp
    ba18:	69db      	ldr	r3, [r3, #28]
		w = p[si++];					/* Get a character */
    ba1a:	b280      	uxth	r0, r0
	lfn = dj->lfn;
    ba1c:	4698      	mov	r8, r3
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    ba1e:	281f      	cmp	r0, #31
    ba20:	d92c      	bls.n	ba7c <follow_path+0xa8>
    ba22:	282f      	cmp	r0, #47	; 0x2f
    ba24:	d02a      	beq.n	ba7c <follow_path+0xa8>
    ba26:	285c      	cmp	r0, #92	; 0x5c
    ba28:	d028      	beq.n	ba7c <follow_path+0xa8>
    ba2a:	001f      	movs	r7, r3
		if (di >= _MAX_LFN)				/* Reject too long name */
    ba2c:	2380      	movs	r3, #128	; 0x80
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    ba2e:	2101      	movs	r1, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    ba30:	005b      	lsls	r3, r3, #1
    ba32:	1c6e      	adds	r6, r5, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    ba34:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    ba36:	4699      	mov	r9, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    ba38:	47d0      	blx	sl
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    ba3a:	2800      	cmp	r0, #0
    ba3c:	d01e      	beq.n	ba7c <follow_path+0xa8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    ba3e:	287f      	cmp	r0, #127	; 0x7f
    ba40:	d809      	bhi.n	ba56 <follow_path+0x82>
	while (*str && *str != chr) str++;
    ba42:	2822      	cmp	r0, #34	; 0x22
    ba44:	d01a      	beq.n	ba7c <follow_path+0xa8>
    ba46:	232a      	movs	r3, #42	; 0x2a
    ba48:	4aad      	ldr	r2, [pc, #692]	; (bd00 <follow_path+0x32c>)
    ba4a:	4298      	cmp	r0, r3
    ba4c:	d016      	beq.n	ba7c <follow_path+0xa8>
    ba4e:	3201      	adds	r2, #1
    ba50:	7813      	ldrb	r3, [r2, #0]
    ba52:	2b00      	cmp	r3, #0
    ba54:	d1f9      	bne.n	ba4a <follow_path+0x76>
		lfn[di++] = w;					/* Store the Unicode char */
    ba56:	8038      	strh	r0, [r7, #0]
		w = p[si++];					/* Get a character */
    ba58:	7830      	ldrb	r0, [r6, #0]
    ba5a:	1c63      	adds	r3, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    ba5c:	281f      	cmp	r0, #31
    ba5e:	d800      	bhi.n	ba62 <follow_path+0x8e>
    ba60:	e0de      	b.n	bc20 <follow_path+0x24c>
    ba62:	282f      	cmp	r0, #47	; 0x2f
    ba64:	d012      	beq.n	ba8c <follow_path+0xb8>
    ba66:	285c      	cmp	r0, #92	; 0x5c
    ba68:	d010      	beq.n	ba8c <follow_path+0xb8>
    ba6a:	3702      	adds	r7, #2
    ba6c:	3601      	adds	r6, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    ba6e:	454b      	cmp	r3, r9
    ba70:	d004      	beq.n	ba7c <follow_path+0xa8>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    ba72:	2101      	movs	r1, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    ba74:	001c      	movs	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    ba76:	47d0      	blx	sl
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    ba78:	2800      	cmp	r0, #0
    ba7a:	d1e0      	bne.n	ba3e <follow_path+0x6a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    ba7c:	2006      	movs	r0, #6
}
    ba7e:	b003      	add	sp, #12
    ba80:	bc3c      	pop	{r2, r3, r4, r5}
    ba82:	4690      	mov	r8, r2
    ba84:	4699      	mov	r9, r3
    ba86:	46a2      	mov	sl, r4
    ba88:	46ab      	mov	fp, r5
    ba8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*path = &p[si];						/* Return pointer to the next segment */
    ba8c:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    ba8e:	2700      	movs	r7, #0
	*path = &p[si];						/* Return pointer to the next segment */
    ba90:	2320      	movs	r3, #32
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
    ba92:	2c01      	cmp	r4, #1
    ba94:	d100      	bne.n	ba98 <follow_path+0xc4>
    ba96:	e0c9      	b.n	bc2c <follow_path+0x258>
    ba98:	2c02      	cmp	r4, #2
    ba9a:	d100      	bne.n	ba9e <follow_path+0xca>
    ba9c:	e10c      	b.n	bcb8 <follow_path+0x2e4>
    ba9e:	4b99      	ldr	r3, [pc, #612]	; (bd04 <follow_path+0x330>)
    baa0:	18e3      	adds	r3, r4, r3
    baa2:	005b      	lsls	r3, r3, #1
    baa4:	4443      	add	r3, r8
		w = lfn[di-1];
    baa6:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    baa8:	2a20      	cmp	r2, #32
    baaa:	d001      	beq.n	bab0 <follow_path+0xdc>
    baac:	2a2e      	cmp	r2, #46	; 0x2e
    baae:	d104      	bne.n	baba <follow_path+0xe6>
		di--;
    bab0:	3c01      	subs	r4, #1
    bab2:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    bab4:	2c00      	cmp	r4, #0
    bab6:	d1f6      	bne.n	baa6 <follow_path+0xd2>
    bab8:	e7e0      	b.n	ba7c <follow_path+0xa8>
	lfn[di] = 0;						/* LFN is created */
    baba:	2300      	movs	r3, #0
    babc:	4641      	mov	r1, r8
    babe:	0062      	lsls	r2, r4, #1
    bac0:	528b      	strh	r3, [r1, r2]
	mem_set(dj->fn, ' ', 11);
    bac2:	465b      	mov	r3, fp
		*d++ = (BYTE)val;
    bac4:	2120      	movs	r1, #32
	mem_set(dj->fn, ' ', 11);
    bac6:	699b      	ldr	r3, [r3, #24]
		*d++ = (BYTE)val;
    bac8:	2600      	movs	r6, #0
    baca:	7019      	strb	r1, [r3, #0]
    bacc:	7059      	strb	r1, [r3, #1]
    bace:	7099      	strb	r1, [r3, #2]
    bad0:	70d9      	strb	r1, [r3, #3]
    bad2:	7119      	strb	r1, [r3, #4]
    bad4:	7159      	strb	r1, [r3, #5]
    bad6:	7199      	strb	r1, [r3, #6]
    bad8:	71d9      	strb	r1, [r3, #7]
    bada:	7219      	strb	r1, [r3, #8]
    badc:	7259      	strb	r1, [r3, #9]
    bade:	7299      	strb	r1, [r3, #10]
    bae0:	4643      	mov	r3, r8
    bae2:	e001      	b.n	bae8 <follow_path+0x114>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    bae4:	3601      	adds	r6, #1
    bae6:	3302      	adds	r3, #2
    bae8:	8818      	ldrh	r0, [r3, #0]
    baea:	2820      	cmp	r0, #32
    baec:	d0fa      	beq.n	bae4 <follow_path+0x110>
    baee:	282e      	cmp	r0, #46	; 0x2e
    baf0:	d0f8      	beq.n	bae4 <follow_path+0x110>
	if (si) cf |= NS_LOSS | NS_LFN;
    baf2:	2e00      	cmp	r6, #0
    baf4:	d000      	beq.n	baf8 <follow_path+0x124>
    baf6:	e0f0      	b.n	bcda <follow_path+0x306>
    baf8:	1e93      	subs	r3, r2, #2
    bafa:	4443      	add	r3, r8
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    bafc:	881a      	ldrh	r2, [r3, #0]
    bafe:	2a2e      	cmp	r2, #46	; 0x2e
    bb00:	d003      	beq.n	bb0a <follow_path+0x136>
    bb02:	3c01      	subs	r4, #1
    bb04:	3b02      	subs	r3, #2
    bb06:	2c00      	cmp	r4, #0
    bb08:	d1f8      	bne.n	bafc <follow_path+0x128>
		dj->fn[i++] = (BYTE)w;
    bb0a:	2308      	movs	r3, #8
    bb0c:	9300      	str	r3, [sp, #0]
    bb0e:	2300      	movs	r3, #0
    bb10:	4699      	mov	r9, r3
    bb12:	9301      	str	r3, [sp, #4]
    bb14:	002b      	movs	r3, r5
    bb16:	0025      	movs	r5, r4
    bb18:	464c      	mov	r4, r9
    bb1a:	4699      	mov	r9, r3
		w = lfn[si++];					/* Get an LFN char */
    bb1c:	3601      	adds	r6, #1
		if (!w) break;					/* Break on end of the LFN */
    bb1e:	2800      	cmp	r0, #0
    bb20:	d03a      	beq.n	bb98 <follow_path+0x1c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    bb22:	2820      	cmp	r0, #32
    bb24:	d021      	beq.n	bb6a <follow_path+0x196>
    bb26:	282e      	cmp	r0, #46	; 0x2e
    bb28:	d01d      	beq.n	bb66 <follow_path+0x192>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    bb2a:	9b00      	ldr	r3, [sp, #0]
    bb2c:	429c      	cmp	r4, r3
    bb2e:	d227      	bcs.n	bb80 <follow_path+0x1ac>
    bb30:	42ae      	cmp	r6, r5
    bb32:	d100      	bne.n	bb36 <follow_path+0x162>
    bb34:	e0d7      	b.n	bce6 <follow_path+0x312>
		if (w >= 0x80) {				/* Non ASCII char */
    bb36:	287f      	cmp	r0, #127	; 0x7f
    bb38:	d900      	bls.n	bb3c <follow_path+0x168>
    bb3a:	e0fb      	b.n	bd34 <follow_path+0x360>
	while (*str && *str != chr) str++;
    bb3c:	282b      	cmp	r0, #43	; 0x2b
    bb3e:	d009      	beq.n	bb54 <follow_path+0x180>
    bb40:	222c      	movs	r2, #44	; 0x2c
    bb42:	4b71      	ldr	r3, [pc, #452]	; (bd08 <follow_path+0x334>)
    bb44:	e004      	b.n	bb50 <follow_path+0x17c>
    bb46:	3301      	adds	r3, #1
    bb48:	781a      	ldrb	r2, [r3, #0]
    bb4a:	2a00      	cmp	r2, #0
    bb4c:	d100      	bne.n	bb50 <follow_path+0x17c>
    bb4e:	e119      	b.n	bd84 <follow_path+0x3b0>
    bb50:	4282      	cmp	r2, r0
    bb52:	d1f8      	bne.n	bb46 <follow_path+0x172>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    bb54:	2303      	movs	r3, #3
    bb56:	205f      	movs	r0, #95	; 0x5f
    bb58:	431f      	orrs	r7, r3
    bb5a:	b2ff      	uxtb	r7, r7
		dj->fn[i++] = (BYTE)w;
    bb5c:	465b      	mov	r3, fp
    bb5e:	699b      	ldr	r3, [r3, #24]
    bb60:	5518      	strb	r0, [r3, r4]
    bb62:	3401      	adds	r4, #1
    bb64:	e004      	b.n	bb70 <follow_path+0x19c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    bb66:	42ae      	cmp	r6, r5
    bb68:	d006      	beq.n	bb78 <follow_path+0x1a4>
			cf |= NS_LOSS | NS_LFN; continue;
    bb6a:	2303      	movs	r3, #3
    bb6c:	431f      	orrs	r7, r3
    bb6e:	b2ff      	uxtb	r7, r7
    bb70:	4642      	mov	r2, r8
    bb72:	0073      	lsls	r3, r6, #1
    bb74:	5a98      	ldrh	r0, [r3, r2]
    bb76:	e7d1      	b.n	bb1c <follow_path+0x148>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    bb78:	9b00      	ldr	r3, [sp, #0]
    bb7a:	429c      	cmp	r4, r3
    bb7c:	d200      	bcs.n	bb80 <follow_path+0x1ac>
    bb7e:	e0b2      	b.n	bce6 <follow_path+0x312>
			if (ni == 11) {				/* Long extension */
    bb80:	2b0b      	cmp	r3, #11
    bb82:	d100      	bne.n	bb86 <follow_path+0x1b2>
    bb84:	e11b      	b.n	bdbe <follow_path+0x3ea>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    bb86:	42ae      	cmp	r6, r5
    bb88:	d100      	bne.n	bb8c <follow_path+0x1b8>
    bb8a:	e0ae      	b.n	bcea <follow_path+0x316>
    bb8c:	2303      	movs	r3, #3
    bb8e:	431f      	orrs	r7, r3
    bb90:	b2ff      	uxtb	r7, r7
			if (si > di) break;			/* No extension */
    bb92:	42ae      	cmp	r6, r5
    bb94:	d800      	bhi.n	bb98 <follow_path+0x1c4>
    bb96:	e0a8      	b.n	bcea <follow_path+0x316>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    bb98:	465b      	mov	r3, fp
    bb9a:	699b      	ldr	r3, [r3, #24]
    bb9c:	464d      	mov	r5, r9
    bb9e:	781a      	ldrb	r2, [r3, #0]
    bba0:	2ae5      	cmp	r2, #229	; 0xe5
    bba2:	d100      	bne.n	bba6 <follow_path+0x1d2>
    bba4:	e0d5      	b.n	bd52 <follow_path+0x37e>
	if (ni == 8) b <<= 2;
    bba6:	9a00      	ldr	r2, [sp, #0]
    bba8:	2a08      	cmp	r2, #8
    bbaa:	d100      	bne.n	bbae <follow_path+0x1da>
    bbac:	e0d9      	b.n	bd62 <follow_path+0x38e>
    bbae:	220c      	movs	r2, #12
    bbb0:	9901      	ldr	r1, [sp, #4]
    bbb2:	400a      	ands	r2, r1
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    bbb4:	2a0c      	cmp	r2, #12
    bbb6:	d100      	bne.n	bbba <follow_path+0x1e6>
    bbb8:	e092      	b.n	bce0 <follow_path+0x30c>
    bbba:	43c9      	mvns	r1, r1
    bbbc:	0789      	lsls	r1, r1, #30
    bbbe:	d100      	bne.n	bbc2 <follow_path+0x1ee>
    bbc0:	e08e      	b.n	bce0 <follow_path+0x30c>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    bbc2:	07b9      	lsls	r1, r7, #30
    bbc4:	d408      	bmi.n	bbd8 <follow_path+0x204>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    bbc6:	2103      	movs	r1, #3
    bbc8:	9801      	ldr	r0, [sp, #4]
    bbca:	4001      	ands	r1, r0
    bbcc:	2901      	cmp	r1, #1
    bbce:	d100      	bne.n	bbd2 <follow_path+0x1fe>
    bbd0:	e0e2      	b.n	bd98 <follow_path+0x3c4>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    bbd2:	2a04      	cmp	r2, #4
    bbd4:	d100      	bne.n	bbd8 <follow_path+0x204>
    bbd6:	e0cf      	b.n	bd78 <follow_path+0x3a4>
	dj->fn[NS] = cf;	/* SFN is created */
    bbd8:	72df      	strb	r7, [r3, #11]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    bbda:	2100      	movs	r1, #0
    bbdc:	4658      	mov	r0, fp
    bbde:	4b4b      	ldr	r3, [pc, #300]	; (bd0c <follow_path+0x338>)
    bbe0:	4798      	blx	r3
	if (res != FR_OK) return res;
    bbe2:	2800      	cmp	r0, #0
    bbe4:	d156      	bne.n	bc94 <follow_path+0x2c0>
    bbe6:	4b4a      	ldr	r3, [pc, #296]	; (bd10 <follow_path+0x33c>)
    bbe8:	4658      	mov	r0, fp
    bbea:	4798      	blx	r3
			ns = *(dj->fn+NS);
    bbec:	465b      	mov	r3, fp
    bbee:	699b      	ldr	r3, [r3, #24]
    bbf0:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    bbf2:	2800      	cmp	r0, #0
    bbf4:	d151      	bne.n	bc9a <follow_path+0x2c6>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    bbf6:	075b      	lsls	r3, r3, #29
    bbf8:	d45c      	bmi.n	bcb4 <follow_path+0x2e0>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    bbfa:	465b      	mov	r3, fp
    bbfc:	695a      	ldr	r2, [r3, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    bbfe:	7ad3      	ldrb	r3, [r2, #11]
    bc00:	06db      	lsls	r3, r3, #27
    bc02:	d400      	bmi.n	bc06 <follow_path+0x232>
    bc04:	e0d9      	b.n	bdba <follow_path+0x3e6>
			dj->sclust = LD_CLUST(dir);
    bc06:	7d51      	ldrb	r1, [r2, #21]
    bc08:	7d13      	ldrb	r3, [r2, #20]
    bc0a:	0209      	lsls	r1, r1, #8
    bc0c:	430b      	orrs	r3, r1
    bc0e:	7ed1      	ldrb	r1, [r2, #27]
    bc10:	7e92      	ldrb	r2, [r2, #26]
    bc12:	0209      	lsls	r1, r1, #8
    bc14:	430a      	orrs	r2, r1
    bc16:	041b      	lsls	r3, r3, #16
    bc18:	4313      	orrs	r3, r2
    bc1a:	465a      	mov	r2, fp
    bc1c:	6093      	str	r3, [r2, #8]
    bc1e:	e6f3      	b.n	ba08 <follow_path+0x34>
	*path = &p[si];						/* Return pointer to the next segment */
    bc20:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    bc22:	2704      	movs	r7, #4
	*path = &p[si];						/* Return pointer to the next segment */
    bc24:	2324      	movs	r3, #36	; 0x24
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
    bc26:	2c01      	cmp	r4, #1
    bc28:	d000      	beq.n	bc2c <follow_path+0x258>
    bc2a:	e735      	b.n	ba98 <follow_path+0xc4>
    bc2c:	4642      	mov	r2, r8
    bc2e:	8812      	ldrh	r2, [r2, #0]
    bc30:	2a2e      	cmp	r2, #46	; 0x2e
    bc32:	d000      	beq.n	bc36 <follow_path+0x262>
    bc34:	e733      	b.n	ba9e <follow_path+0xca>
		lfn[di] = 0;
    bc36:	2100      	movs	r1, #0
    bc38:	4640      	mov	r0, r8
    bc3a:	8041      	strh	r1, [r0, #2]
			dj->fn[i] = (i < di) ? '.' : ' ';
    bc3c:	4659      	mov	r1, fp
    bc3e:	6989      	ldr	r1, [r1, #24]
    bc40:	700a      	strb	r2, [r1, #0]
    bc42:	2220      	movs	r2, #32
    bc44:	4659      	mov	r1, fp
    bc46:	6989      	ldr	r1, [r1, #24]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    bc48:	4658      	mov	r0, fp
			dj->fn[i] = (i < di) ? '.' : ' ';
    bc4a:	704a      	strb	r2, [r1, #1]
    bc4c:	465a      	mov	r2, fp
    bc4e:	6991      	ldr	r1, [r2, #24]
    bc50:	2220      	movs	r2, #32
    bc52:	708a      	strb	r2, [r1, #2]
    bc54:	4659      	mov	r1, fp
    bc56:	6989      	ldr	r1, [r1, #24]
    bc58:	70ca      	strb	r2, [r1, #3]
    bc5a:	4659      	mov	r1, fp
    bc5c:	6989      	ldr	r1, [r1, #24]
    bc5e:	710a      	strb	r2, [r1, #4]
    bc60:	4659      	mov	r1, fp
    bc62:	6989      	ldr	r1, [r1, #24]
    bc64:	714a      	strb	r2, [r1, #5]
    bc66:	4659      	mov	r1, fp
    bc68:	6989      	ldr	r1, [r1, #24]
    bc6a:	718a      	strb	r2, [r1, #6]
    bc6c:	4659      	mov	r1, fp
    bc6e:	6989      	ldr	r1, [r1, #24]
    bc70:	71ca      	strb	r2, [r1, #7]
    bc72:	4659      	mov	r1, fp
    bc74:	6989      	ldr	r1, [r1, #24]
    bc76:	720a      	strb	r2, [r1, #8]
    bc78:	4659      	mov	r1, fp
    bc7a:	6989      	ldr	r1, [r1, #24]
    bc7c:	724a      	strb	r2, [r1, #9]
    bc7e:	4659      	mov	r1, fp
    bc80:	6989      	ldr	r1, [r1, #24]
    bc82:	728a      	strb	r2, [r1, #10]
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
    bc84:	465a      	mov	r2, fp
    bc86:	6992      	ldr	r2, [r2, #24]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    bc88:	2100      	movs	r1, #0
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
    bc8a:	72d3      	strb	r3, [r2, #11]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    bc8c:	4b1f      	ldr	r3, [pc, #124]	; (bd0c <follow_path+0x338>)
    bc8e:	4798      	blx	r3
	if (res != FR_OK) return res;
    bc90:	2800      	cmp	r0, #0
    bc92:	d0a8      	beq.n	bbe6 <follow_path+0x212>
			ns = *(dj->fn+NS);
    bc94:	465b      	mov	r3, fp
    bc96:	699b      	ldr	r3, [r3, #24]
    bc98:	7adb      	ldrb	r3, [r3, #11]
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    bc9a:	2804      	cmp	r0, #4
    bc9c:	d000      	beq.n	bca0 <follow_path+0x2cc>
    bc9e:	e6ee      	b.n	ba7e <follow_path+0xaa>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    bca0:	069a      	lsls	r2, r3, #26
    bca2:	d400      	bmi.n	bca6 <follow_path+0x2d2>
    bca4:	e086      	b.n	bdb4 <follow_path+0x3e0>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    bca6:	2200      	movs	r2, #0
    bca8:	4659      	mov	r1, fp
    bcaa:	608a      	str	r2, [r1, #8]
    bcac:	614a      	str	r2, [r1, #20]
					if (!(ns & NS_LAST)) continue;
    bcae:	4218      	tst	r0, r3
    bcb0:	d100      	bne.n	bcb4 <follow_path+0x2e0>
    bcb2:	e6a9      	b.n	ba08 <follow_path+0x34>
					res = FR_OK;
    bcb4:	2000      	movs	r0, #0
    bcb6:	e6e2      	b.n	ba7e <follow_path+0xaa>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
    bcb8:	4642      	mov	r2, r8
    bcba:	8852      	ldrh	r2, [r2, #2]
    bcbc:	2a2e      	cmp	r2, #46	; 0x2e
    bcbe:	d000      	beq.n	bcc2 <follow_path+0x2ee>
    bcc0:	e6ed      	b.n	ba9e <follow_path+0xca>
    bcc2:	4642      	mov	r2, r8
    bcc4:	8812      	ldrh	r2, [r2, #0]
    bcc6:	2a2e      	cmp	r2, #46	; 0x2e
    bcc8:	d000      	beq.n	bccc <follow_path+0x2f8>
    bcca:	e6e8      	b.n	ba9e <follow_path+0xca>
		lfn[di] = 0;
    bccc:	2100      	movs	r1, #0
    bcce:	4640      	mov	r0, r8
    bcd0:	8081      	strh	r1, [r0, #4]
			dj->fn[i] = (i < di) ? '.' : ' ';
    bcd2:	4659      	mov	r1, fp
    bcd4:	6989      	ldr	r1, [r1, #24]
    bcd6:	700a      	strb	r2, [r1, #0]
    bcd8:	e7b4      	b.n	bc44 <follow_path+0x270>
	if (si) cf |= NS_LOSS | NS_LFN;
    bcda:	2303      	movs	r3, #3
    bcdc:	431f      	orrs	r7, r3
    bcde:	e70b      	b.n	baf8 <follow_path+0x124>
		cf |= NS_LFN;
    bce0:	2102      	movs	r1, #2
    bce2:	430f      	orrs	r7, r1
    bce4:	e76d      	b.n	bbc2 <follow_path+0x1ee>
			if (ni == 11) {				/* Long extension */
    bce6:	2b0b      	cmp	r3, #11
    bce8:	d069      	beq.n	bdbe <follow_path+0x3ea>
			b <<= 2; continue;
    bcea:	9b01      	ldr	r3, [sp, #4]
    bcec:	002e      	movs	r6, r5
    bcee:	009b      	lsls	r3, r3, #2
    bcf0:	b2db      	uxtb	r3, r3
    bcf2:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
    bcf4:	230b      	movs	r3, #11
    bcf6:	2408      	movs	r4, #8
    bcf8:	9300      	str	r3, [sp, #0]
    bcfa:	e739      	b.n	bb70 <follow_path+0x19c>
    bcfc:	0000e59d 	.word	0x0000e59d
    bd00:	0002d4d9 	.word	0x0002d4d9
    bd04:	7fffffff 	.word	0x7fffffff
    bd08:	0002d4e5 	.word	0x0002d4e5
    bd0c:	0000b11d 	.word	0x0000b11d
    bd10:	0000b681 	.word	0x0000b681
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    bd14:	2300      	movs	r3, #0
    bd16:	465a      	mov	r2, fp
    bd18:	3501      	adds	r5, #1
    bd1a:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    bd1c:	782b      	ldrb	r3, [r5, #0]
    bd1e:	2b1f      	cmp	r3, #31
    bd20:	d900      	bls.n	bd24 <follow_path+0x350>
    bd22:	e66f      	b.n	ba04 <follow_path+0x30>
		res = dir_sdi(dj, 0);
    bd24:	4b2d      	ldr	r3, [pc, #180]	; (bddc <follow_path+0x408>)
    bd26:	2100      	movs	r1, #0
    bd28:	4658      	mov	r0, fp
    bd2a:	4798      	blx	r3
		dj->dir = 0;
    bd2c:	2300      	movs	r3, #0
    bd2e:	465a      	mov	r2, fp
    bd30:	6153      	str	r3, [r2, #20]
    bd32:	e6a4      	b.n	ba7e <follow_path+0xaa>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    bd34:	2100      	movs	r1, #0
    bd36:	47d0      	blx	sl
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    bd38:	2800      	cmp	r0, #0
    bd3a:	d020      	beq.n	bd7e <follow_path+0x3aa>
    bd3c:	4b28      	ldr	r3, [pc, #160]	; (bde0 <follow_path+0x40c>)
    bd3e:	469c      	mov	ip, r3
			cf |= NS_LFN;				/* Force create LFN entry */
    bd40:	2302      	movs	r3, #2
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    bd42:	4460      	add	r0, ip
    bd44:	3880      	subs	r0, #128	; 0x80
    bd46:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    bd48:	431f      	orrs	r7, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    bd4a:	2800      	cmp	r0, #0
    bd4c:	d100      	bne.n	bd50 <follow_path+0x37c>
    bd4e:	e701      	b.n	bb54 <follow_path+0x180>
    bd50:	e6f4      	b.n	bb3c <follow_path+0x168>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    bd52:	3ae0      	subs	r2, #224	; 0xe0
    bd54:	701a      	strb	r2, [r3, #0]
    bd56:	465b      	mov	r3, fp
	if (ni == 8) b <<= 2;
    bd58:	9a00      	ldr	r2, [sp, #0]
    bd5a:	699b      	ldr	r3, [r3, #24]
    bd5c:	2a08      	cmp	r2, #8
    bd5e:	d000      	beq.n	bd62 <follow_path+0x38e>
    bd60:	e725      	b.n	bbae <follow_path+0x1da>
    bd62:	9a01      	ldr	r2, [sp, #4]
    bd64:	0092      	lsls	r2, r2, #2
    bd66:	b2d2      	uxtb	r2, r2
    bd68:	9201      	str	r2, [sp, #4]
    bd6a:	220c      	movs	r2, #12
    bd6c:	9901      	ldr	r1, [sp, #4]
    bd6e:	400a      	ands	r2, r1
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    bd70:	2a0c      	cmp	r2, #12
    bd72:	d000      	beq.n	bd76 <follow_path+0x3a2>
    bd74:	e721      	b.n	bbba <follow_path+0x1e6>
    bd76:	e7b3      	b.n	bce0 <follow_path+0x30c>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    bd78:	3204      	adds	r2, #4
    bd7a:	4317      	orrs	r7, r2
    bd7c:	e72c      	b.n	bbd8 <follow_path+0x204>
			cf |= NS_LFN;				/* Force create LFN entry */
    bd7e:	2302      	movs	r3, #2
    bd80:	431f      	orrs	r7, r3
    bd82:	e6e7      	b.n	bb54 <follow_path+0x180>
				if (IsUpper(w)) {		/* ASCII large capital */
    bd84:	0003      	movs	r3, r0
    bd86:	3b41      	subs	r3, #65	; 0x41
    bd88:	2b19      	cmp	r3, #25
    bd8a:	d808      	bhi.n	bd9e <follow_path+0x3ca>
					b |= 2;
    bd8c:	2302      	movs	r3, #2
    bd8e:	9a01      	ldr	r2, [sp, #4]
    bd90:	b2c0      	uxtb	r0, r0
    bd92:	431a      	orrs	r2, r3
    bd94:	9201      	str	r2, [sp, #4]
    bd96:	e6e1      	b.n	bb5c <follow_path+0x188>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    bd98:	310f      	adds	r1, #15
    bd9a:	430f      	orrs	r7, r1
    bd9c:	e719      	b.n	bbd2 <follow_path+0x1fe>
					if (IsLower(w)) {	/* ASCII small capital */
    bd9e:	0003      	movs	r3, r0
    bda0:	3b61      	subs	r3, #97	; 0x61
    bda2:	2b19      	cmp	r3, #25
    bda4:	d804      	bhi.n	bdb0 <follow_path+0x3dc>
						b |= 1; w -= 0x20;
    bda6:	2301      	movs	r3, #1
    bda8:	9a01      	ldr	r2, [sp, #4]
    bdaa:	3820      	subs	r0, #32
    bdac:	431a      	orrs	r2, r3
    bdae:	9201      	str	r2, [sp, #4]
    bdb0:	b2c0      	uxtb	r0, r0
    bdb2:	e6d3      	b.n	bb5c <follow_path+0x188>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    bdb4:	4218      	tst	r0, r3
    bdb6:	d000      	beq.n	bdba <follow_path+0x3e6>
    bdb8:	e661      	b.n	ba7e <follow_path+0xaa>
				res = FR_NO_PATH; break;
    bdba:	2005      	movs	r0, #5
	return res;
    bdbc:	e65f      	b.n	ba7e <follow_path+0xaa>
				cf |= NS_LOSS | NS_LFN; break;
    bdbe:	2303      	movs	r3, #3
    bdc0:	431f      	orrs	r7, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    bdc2:	465b      	mov	r3, fp
    bdc4:	699b      	ldr	r3, [r3, #24]
    bdc6:	464d      	mov	r5, r9
    bdc8:	781a      	ldrb	r2, [r3, #0]
    bdca:	2ae5      	cmp	r2, #229	; 0xe5
    bdcc:	d000      	beq.n	bdd0 <follow_path+0x3fc>
    bdce:	e6ee      	b.n	bbae <follow_path+0x1da>
    bdd0:	3ae0      	subs	r2, #224	; 0xe0
    bdd2:	701a      	strb	r2, [r3, #0]
    bdd4:	465b      	mov	r3, fp
    bdd6:	699b      	ldr	r3, [r3, #24]
    bdd8:	e6e9      	b.n	bbae <follow_path+0x1da>
    bdda:	46c0      	nop			; (mov r8, r8)
    bddc:	0000b11d 	.word	0x0000b11d
    bde0:	0002d458 	.word	0x0002d458

0000bde4 <dir_read>:
{
    bde4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bde6:	4657      	mov	r7, sl
    bde8:	4645      	mov	r5, r8
    bdea:	46de      	mov	lr, fp
    bdec:	464e      	mov	r6, r9
    bdee:	b5e0      	push	{r5, r6, r7, lr}
	while (dj->sect) {
    bdf0:	6907      	ldr	r7, [r0, #16]
{
    bdf2:	b085      	sub	sp, #20
    bdf4:	0005      	movs	r5, r0
	while (dj->sect) {
    bdf6:	2f00      	cmp	r7, #0
    bdf8:	d02f      	beq.n	be5a <dir_read+0x76>
    bdfa:	23ff      	movs	r3, #255	; 0xff
    bdfc:	9300      	str	r3, [sp, #0]
    bdfe:	4698      	mov	r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    be00:	4bc9      	ldr	r3, [pc, #804]	; (c128 <dir_read+0x344>)
    be02:	46ba      	mov	sl, r7
    be04:	4699      	mov	r9, r3
    be06:	6804      	ldr	r4, [r0, #0]
	wsect = fs->winsect;
    be08:	6b26      	ldr	r6, [r4, #48]	; 0x30
	if (wsect != sector) {	/* Changed current window */
    be0a:	4556      	cmp	r6, sl
    be0c:	d011      	beq.n	be32 <dir_read+0x4e>
		if (fs->wflag) {	/* Write back dirty window if needed */
    be0e:	7923      	ldrb	r3, [r4, #4]
    be10:	2b00      	cmp	r3, #0
    be12:	d000      	beq.n	be16 <dir_read+0x32>
    be14:	e0ec      	b.n	bff0 <dir_read+0x20c>
    be16:	3334      	adds	r3, #52	; 0x34
    be18:	469b      	mov	fp, r3
    be1a:	44a3      	add	fp, r4
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    be1c:	7860      	ldrb	r0, [r4, #1]
    be1e:	2301      	movs	r3, #1
    be20:	4652      	mov	r2, sl
    be22:	4659      	mov	r1, fp
    be24:	4ec1      	ldr	r6, [pc, #772]	; (c12c <dir_read+0x348>)
    be26:	47b0      	blx	r6
    be28:	2800      	cmp	r0, #0
    be2a:	d000      	beq.n	be2e <dir_read+0x4a>
    be2c:	e0da      	b.n	bfe4 <dir_read+0x200>
			fs->winsect = sector;
    be2e:	4653      	mov	r3, sl
    be30:	6323      	str	r3, [r4, #48]	; 0x30
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    be32:	696a      	ldr	r2, [r5, #20]
		c = dir[DIR_Name];
    be34:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    be36:	2b00      	cmp	r3, #0
    be38:	d00f      	beq.n	be5a <dir_read+0x76>
		a = dir[DIR_Attr] & AM_MASK;
    be3a:	213f      	movs	r1, #63	; 0x3f
    be3c:	7ad0      	ldrb	r0, [r2, #11]
    be3e:	4001      	ands	r1, r0
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    be40:	2be5      	cmp	r3, #229	; 0xe5
    be42:	d003      	beq.n	be4c <dir_read+0x68>
    be44:	0700      	lsls	r0, r0, #28
    be46:	d522      	bpl.n	be8e <dir_read+0xaa>
    be48:	290f      	cmp	r1, #15
    be4a:	d023      	beq.n	be94 <dir_read+0xb0>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    be4c:	23ff      	movs	r3, #255	; 0xff
    be4e:	4698      	mov	r8, r3
	i = dj->index + 1;
    be50:	88ee      	ldrh	r6, [r5, #6]
    be52:	3601      	adds	r6, #1
    be54:	b2b6      	uxth	r6, r6
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    be56:	2e00      	cmp	r6, #0
    be58:	d109      	bne.n	be6e <dir_read+0x8a>
	res = FR_NO_FILE;
    be5a:	2004      	movs	r0, #4
	if (res != FR_OK) dj->sect = 0;
    be5c:	2300      	movs	r3, #0
    be5e:	612b      	str	r3, [r5, #16]
}
    be60:	b005      	add	sp, #20
    be62:	bc3c      	pop	{r2, r3, r4, r5}
    be64:	4690      	mov	r8, r2
    be66:	4699      	mov	r9, r3
    be68:	46a2      	mov	sl, r4
    be6a:	46ab      	mov	fp, r5
    be6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    be6e:	692b      	ldr	r3, [r5, #16]
    be70:	469a      	mov	sl, r3
    be72:	2b00      	cmp	r3, #0
    be74:	d0f1      	beq.n	be5a <dir_read+0x76>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    be76:	230f      	movs	r3, #15
    be78:	4033      	ands	r3, r6
    be7a:	d100      	bne.n	be7e <dir_read+0x9a>
    be7c:	e0e0      	b.n	c040 <dir_read+0x25c>
    be7e:	682c      	ldr	r4, [r5, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    be80:	015b      	lsls	r3, r3, #5
    be82:	0022      	movs	r2, r4
    be84:	3234      	adds	r2, #52	; 0x34
    be86:	18d3      	adds	r3, r2, r3
	dj->index = i;
    be88:	80ee      	strh	r6, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    be8a:	616b      	str	r3, [r5, #20]
    be8c:	e7bc      	b.n	be08 <dir_read+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
    be8e:	290f      	cmp	r1, #15
    be90:	d000      	beq.n	be94 <dir_read+0xb0>
    be92:	e0f9      	b.n	c088 <dir_read+0x2a4>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    be94:	2140      	movs	r1, #64	; 0x40
    be96:	4219      	tst	r1, r3
    be98:	d100      	bne.n	be9c <dir_read+0xb8>
    be9a:	e0a5      	b.n	bfe8 <dir_read+0x204>
					sum = dir[LDIR_Chksum];
    be9c:	7b50      	ldrb	r0, [r2, #13]
					c &= ~LLE; ord = c;
    be9e:	438b      	bics	r3, r1
					sum = dir[LDIR_Chksum];
    bea0:	9000      	str	r0, [sp, #0]
					dj->lfn_idx = dj->index;
    bea2:	88e9      	ldrh	r1, [r5, #6]
    bea4:	8429      	strh	r1, [r5, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    bea6:	20ff      	movs	r0, #255	; 0xff
    bea8:	7b51      	ldrb	r1, [r2, #13]
    beaa:	4680      	mov	r8, r0
    beac:	9800      	ldr	r0, [sp, #0]
    beae:	4281      	cmp	r1, r0
    beb0:	d1ce      	bne.n	be50 <dir_read+0x6c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    beb2:	203f      	movs	r0, #63	; 0x3f
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    beb4:	69ec      	ldr	r4, [r5, #28]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    beb6:	7857      	ldrb	r7, [r2, #1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    beb8:	9403      	str	r4, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    beba:	7814      	ldrb	r4, [r2, #0]
    bebc:	4004      	ands	r4, r0
    bebe:	3c01      	subs	r4, #1
    bec0:	0060      	lsls	r0, r4, #1
    bec2:	1900      	adds	r0, r0, r4
    bec4:	0080      	lsls	r0, r0, #2
    bec6:	1900      	adds	r0, r0, r4
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bec8:	7894      	ldrb	r4, [r2, #2]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    beca:	9001      	str	r0, [sp, #4]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    becc:	0224      	lsls	r4, r4, #8
    bece:	433c      	orrs	r4, r7
    bed0:	46a3      	mov	fp, r4
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    bed2:	28fe      	cmp	r0, #254	; 0xfe
    bed4:	d8bc      	bhi.n	be50 <dir_read+0x6c>
			lfnbuf[i++] = wc = uc;			/* Store it */
    bed6:	0046      	lsls	r6, r0, #1
    bed8:	1c47      	adds	r7, r0, #1
    beda:	4658      	mov	r0, fp
    bedc:	9c03      	ldr	r4, [sp, #12]
    bede:	5330      	strh	r0, [r6, r4]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bee0:	7916      	ldrb	r6, [r2, #4]
    bee2:	0236      	lsls	r6, r6, #8
    bee4:	46b4      	mov	ip, r6
    bee6:	78d6      	ldrb	r6, [r2, #3]
    bee8:	46b2      	mov	sl, r6
    beea:	4666      	mov	r6, ip
    beec:	4654      	mov	r4, sl
    beee:	4326      	orrs	r6, r4
		if (wc) {	/* Last char has not been processed */
    bef0:	465c      	mov	r4, fp
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bef2:	46b4      	mov	ip, r6
		if (wc) {	/* Last char has not been processed */
    bef4:	2c00      	cmp	r4, #0
    bef6:	d000      	beq.n	befa <dir_read+0x116>
    bef8:	e11c      	b.n	c134 <dir_read+0x350>
			if (uc != 0xFFFF) return 0;		/* Check filler */
    befa:	488d      	ldr	r0, [pc, #564]	; (c130 <dir_read+0x34c>)
    befc:	4286      	cmp	r6, r0
    befe:	d1a7      	bne.n	be50 <dir_read+0x6c>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bf00:	7990      	ldrb	r0, [r2, #6]
    bf02:	7954      	ldrb	r4, [r2, #5]
    bf04:	0200      	lsls	r0, r0, #8
    bf06:	4304      	orrs	r4, r0
    bf08:	46a2      	mov	sl, r4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bf0a:	4889      	ldr	r0, [pc, #548]	; (c130 <dir_read+0x34c>)
    bf0c:	4582      	cmp	sl, r0
    bf0e:	d000      	beq.n	bf12 <dir_read+0x12e>
    bf10:	e1dd      	b.n	c2ce <dir_read+0x4ea>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bf12:	7a10      	ldrb	r0, [r2, #8]
    bf14:	79d4      	ldrb	r4, [r2, #7]
    bf16:	0200      	lsls	r0, r0, #8
    bf18:	4304      	orrs	r4, r0
    bf1a:	46a4      	mov	ip, r4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bf1c:	4884      	ldr	r0, [pc, #528]	; (c130 <dir_read+0x34c>)
    bf1e:	4584      	cmp	ip, r0
    bf20:	d000      	beq.n	bf24 <dir_read+0x140>
    bf22:	e1d4      	b.n	c2ce <dir_read+0x4ea>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bf24:	7a90      	ldrb	r0, [r2, #10]
    bf26:	7a54      	ldrb	r4, [r2, #9]
    bf28:	0200      	lsls	r0, r0, #8
    bf2a:	4304      	orrs	r4, r0
    bf2c:	46a0      	mov	r8, r4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bf2e:	4880      	ldr	r0, [pc, #512]	; (c130 <dir_read+0x34c>)
    bf30:	4580      	cmp	r8, r0
    bf32:	d000      	beq.n	bf36 <dir_read+0x152>
    bf34:	e1cb      	b.n	c2ce <dir_read+0x4ea>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bf36:	7bd0      	ldrb	r0, [r2, #15]
    bf38:	7b94      	ldrb	r4, [r2, #14]
    bf3a:	0200      	lsls	r0, r0, #8
    bf3c:	4304      	orrs	r4, r0
    bf3e:	46a4      	mov	ip, r4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bf40:	487b      	ldr	r0, [pc, #492]	; (c130 <dir_read+0x34c>)
    bf42:	4584      	cmp	ip, r0
    bf44:	d000      	beq.n	bf48 <dir_read+0x164>
    bf46:	e1c2      	b.n	c2ce <dir_read+0x4ea>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bf48:	7c50      	ldrb	r0, [r2, #17]
    bf4a:	7c14      	ldrb	r4, [r2, #16]
    bf4c:	0200      	lsls	r0, r0, #8
    bf4e:	4304      	orrs	r4, r0
    bf50:	46a0      	mov	r8, r4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bf52:	4877      	ldr	r0, [pc, #476]	; (c130 <dir_read+0x34c>)
    bf54:	4580      	cmp	r8, r0
    bf56:	d000      	beq.n	bf5a <dir_read+0x176>
    bf58:	e1b9      	b.n	c2ce <dir_read+0x4ea>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bf5a:	7cd0      	ldrb	r0, [r2, #19]
    bf5c:	7c94      	ldrb	r4, [r2, #18]
    bf5e:	0200      	lsls	r0, r0, #8
    bf60:	4304      	orrs	r4, r0
    bf62:	46a2      	mov	sl, r4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bf64:	4872      	ldr	r0, [pc, #456]	; (c130 <dir_read+0x34c>)
    bf66:	4582      	cmp	sl, r0
    bf68:	d000      	beq.n	bf6c <dir_read+0x188>
    bf6a:	e1b0      	b.n	c2ce <dir_read+0x4ea>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bf6c:	7d50      	ldrb	r0, [r2, #21]
    bf6e:	7d14      	ldrb	r4, [r2, #20]
    bf70:	0200      	lsls	r0, r0, #8
    bf72:	4304      	orrs	r4, r0
    bf74:	46a4      	mov	ip, r4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bf76:	486e      	ldr	r0, [pc, #440]	; (c130 <dir_read+0x34c>)
    bf78:	4584      	cmp	ip, r0
    bf7a:	d000      	beq.n	bf7e <dir_read+0x19a>
    bf7c:	e1a7      	b.n	c2ce <dir_read+0x4ea>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bf7e:	7dd0      	ldrb	r0, [r2, #23]
    bf80:	7d94      	ldrb	r4, [r2, #22]
    bf82:	0200      	lsls	r0, r0, #8
    bf84:	4304      	orrs	r4, r0
    bf86:	46a0      	mov	r8, r4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bf88:	4869      	ldr	r0, [pc, #420]	; (c130 <dir_read+0x34c>)
    bf8a:	4580      	cmp	r8, r0
    bf8c:	d000      	beq.n	bf90 <dir_read+0x1ac>
    bf8e:	e19e      	b.n	c2ce <dir_read+0x4ea>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bf90:	7e50      	ldrb	r0, [r2, #25]
    bf92:	7e14      	ldrb	r4, [r2, #24]
    bf94:	0200      	lsls	r0, r0, #8
    bf96:	4304      	orrs	r4, r0
    bf98:	46a4      	mov	ip, r4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bf9a:	4865      	ldr	r0, [pc, #404]	; (c130 <dir_read+0x34c>)
    bf9c:	4584      	cmp	ip, r0
    bf9e:	d000      	beq.n	bfa2 <dir_read+0x1be>
    bfa0:	e195      	b.n	c2ce <dir_read+0x4ea>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bfa2:	7f50      	ldrb	r0, [r2, #29]
    bfa4:	7f14      	ldrb	r4, [r2, #28]
    bfa6:	0200      	lsls	r0, r0, #8
    bfa8:	4304      	orrs	r4, r0
    bfaa:	46a0      	mov	r8, r4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bfac:	4860      	ldr	r0, [pc, #384]	; (c130 <dir_read+0x34c>)
    bfae:	4580      	cmp	r8, r0
    bfb0:	d000      	beq.n	bfb4 <dir_read+0x1d0>
    bfb2:	e18c      	b.n	c2ce <dir_read+0x4ea>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    bfb4:	7fd4      	ldrb	r4, [r2, #31]
    bfb6:	7f90      	ldrb	r0, [r2, #30]
    bfb8:	0224      	lsls	r4, r4, #8
    bfba:	4320      	orrs	r0, r4
    bfbc:	4684      	mov	ip, r0
			if (uc != 0xFFFF) return 0;		/* Check filler */
    bfbe:	485c      	ldr	r0, [pc, #368]	; (c130 <dir_read+0x34c>)
    bfc0:	4584      	cmp	ip, r0
    bfc2:	d000      	beq.n	bfc6 <dir_read+0x1e2>
    bfc4:	e183      	b.n	c2ce <dir_read+0x4ea>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    bfc6:	7812      	ldrb	r2, [r2, #0]
    bfc8:	0652      	lsls	r2, r2, #25
    bfca:	d506      	bpl.n	bfda <dir_read+0x1f6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    bfcc:	2fff      	cmp	r7, #255	; 0xff
    bfce:	d100      	bne.n	bfd2 <dir_read+0x1ee>
    bfd0:	e17d      	b.n	c2ce <dir_read+0x4ea>
		lfnbuf[i] = 0;
    bfd2:	2200      	movs	r2, #0
    bfd4:	9803      	ldr	r0, [sp, #12]
    bfd6:	007f      	lsls	r7, r7, #1
    bfd8:	523a      	strh	r2, [r7, r0]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    bfda:	3b01      	subs	r3, #1
    bfdc:	b2db      	uxtb	r3, r3
    bfde:	4698      	mov	r8, r3
    bfe0:	9100      	str	r1, [sp, #0]
    bfe2:	e735      	b.n	be50 <dir_read+0x6c>
	res = FR_NO_FILE;
    bfe4:	2001      	movs	r0, #1
    bfe6:	e739      	b.n	be5c <dir_read+0x78>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    bfe8:	4598      	cmp	r8, r3
    bfea:	d000      	beq.n	bfee <dir_read+0x20a>
    bfec:	e72e      	b.n	be4c <dir_read+0x68>
    bfee:	e75a      	b.n	bea6 <dir_read+0xc2>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    bff0:	2334      	movs	r3, #52	; 0x34
    bff2:	469b      	mov	fp, r3
    bff4:	44a3      	add	fp, r4
    bff6:	7860      	ldrb	r0, [r4, #1]
    bff8:	3b33      	subs	r3, #51	; 0x33
    bffa:	0032      	movs	r2, r6
    bffc:	4659      	mov	r1, fp
    bffe:	47c8      	blx	r9
    c000:	2800      	cmp	r0, #0
    c002:	d1ef      	bne.n	bfe4 <dir_read+0x200>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    c004:	6a23      	ldr	r3, [r4, #32]
    c006:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    c008:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    c00a:	189a      	adds	r2, r3, r2
    c00c:	4296      	cmp	r6, r2
    c00e:	d300      	bcc.n	c012 <dir_read+0x22e>
    c010:	e704      	b.n	be1c <dir_read+0x38>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    c012:	78e7      	ldrb	r7, [r4, #3]
    c014:	2f01      	cmp	r7, #1
    c016:	d800      	bhi.n	c01a <dir_read+0x236>
    c018:	e700      	b.n	be1c <dir_read+0x38>
    c01a:	002a      	movs	r2, r5
    c01c:	465d      	mov	r5, fp
    c01e:	4693      	mov	fp, r2
    c020:	e000      	b.n	c024 <dir_read+0x240>
    c022:	6a23      	ldr	r3, [r4, #32]
					wsect += fs->fsize;
    c024:	18f6      	adds	r6, r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    c026:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    c028:	7860      	ldrb	r0, [r4, #1]
    c02a:	2301      	movs	r3, #1
    c02c:	0032      	movs	r2, r6
    c02e:	0029      	movs	r1, r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    c030:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    c032:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    c034:	2f01      	cmp	r7, #1
    c036:	d1f4      	bne.n	c022 <dir_read+0x23e>
    c038:	465b      	mov	r3, fp
    c03a:	46ab      	mov	fp, r5
    c03c:	001d      	movs	r5, r3
    c03e:	e6ed      	b.n	be1c <dir_read+0x38>
		dj->sect++;					/* Next sector */
    c040:	2301      	movs	r3, #1
    c042:	469c      	mov	ip, r3
    c044:	44e2      	add	sl, ip
    c046:	4653      	mov	r3, sl
		if (dj->clust == 0) {	/* Static table */
    c048:	68e9      	ldr	r1, [r5, #12]
		dj->sect++;					/* Next sector */
    c04a:	612b      	str	r3, [r5, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    c04c:	682c      	ldr	r4, [r5, #0]
		if (dj->clust == 0) {	/* Static table */
    c04e:	2900      	cmp	r1, #0
    c050:	d10d      	bne.n	c06e <dir_read+0x28a>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    c052:	8923      	ldrh	r3, [r4, #8]
    c054:	42b3      	cmp	r3, r6
    c056:	d800      	bhi.n	c05a <dir_read+0x276>
    c058:	e6ff      	b.n	be5a <dir_read+0x76>
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    c05a:	0023      	movs	r3, r4
    c05c:	3334      	adds	r3, #52	; 0x34
    c05e:	616b      	str	r3, [r5, #20]
	while (dj->sect) {
    c060:	4653      	mov	r3, sl
	dj->index = i;
    c062:	80ee      	strh	r6, [r5, #6]
	while (dj->sect) {
    c064:	2b00      	cmp	r3, #0
    c066:	d000      	beq.n	c06a <dir_read+0x286>
    c068:	e6ce      	b.n	be08 <dir_read+0x24>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    c06a:	2000      	movs	r0, #0
    c06c:	e6f8      	b.n	be60 <dir_read+0x7c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    c06e:	78a3      	ldrb	r3, [r4, #2]
    c070:	0932      	lsrs	r2, r6, #4
    c072:	3b01      	subs	r3, #1
    c074:	421a      	tst	r2, r3
    c076:	d1f0      	bne.n	c05a <dir_read+0x276>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    c078:	2901      	cmp	r1, #1
    c07a:	d903      	bls.n	c084 <dir_read+0x2a0>
    c07c:	69e3      	ldr	r3, [r4, #28]
    c07e:	4299      	cmp	r1, r3
    c080:	d200      	bcs.n	c084 <dir_read+0x2a0>
    c082:	e126      	b.n	c2d2 <dir_read+0x4ee>
	res = FR_NO_FILE;
    c084:	2002      	movs	r0, #2
    c086:	e6e9      	b.n	be5c <dir_read+0x78>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    c088:	4641      	mov	r1, r8
    c08a:	2900      	cmp	r1, #0
    c08c:	d146      	bne.n	c11c <dir_read+0x338>
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    c08e:	0859      	lsrs	r1, r3, #1
    c090:	01db      	lsls	r3, r3, #7
    c092:	4319      	orrs	r1, r3
    c094:	7853      	ldrb	r3, [r2, #1]
    c096:	185b      	adds	r3, r3, r1
    c098:	b2d9      	uxtb	r1, r3
    c09a:	0849      	lsrs	r1, r1, #1
    c09c:	01db      	lsls	r3, r3, #7
    c09e:	4319      	orrs	r1, r3
    c0a0:	7893      	ldrb	r3, [r2, #2]
    c0a2:	b2c9      	uxtb	r1, r1
    c0a4:	18c9      	adds	r1, r1, r3
    c0a6:	b2cb      	uxtb	r3, r1
    c0a8:	085b      	lsrs	r3, r3, #1
    c0aa:	01c9      	lsls	r1, r1, #7
    c0ac:	430b      	orrs	r3, r1
    c0ae:	78d1      	ldrb	r1, [r2, #3]
    c0b0:	b2db      	uxtb	r3, r3
    c0b2:	185b      	adds	r3, r3, r1
    c0b4:	b2d9      	uxtb	r1, r3
    c0b6:	0849      	lsrs	r1, r1, #1
    c0b8:	01db      	lsls	r3, r3, #7
    c0ba:	4319      	orrs	r1, r3
    c0bc:	7913      	ldrb	r3, [r2, #4]
    c0be:	b2c9      	uxtb	r1, r1
    c0c0:	18c9      	adds	r1, r1, r3
    c0c2:	b2cb      	uxtb	r3, r1
    c0c4:	085b      	lsrs	r3, r3, #1
    c0c6:	01c9      	lsls	r1, r1, #7
    c0c8:	430b      	orrs	r3, r1
    c0ca:	7951      	ldrb	r1, [r2, #5]
    c0cc:	b2db      	uxtb	r3, r3
    c0ce:	185b      	adds	r3, r3, r1
    c0d0:	b2d9      	uxtb	r1, r3
    c0d2:	0849      	lsrs	r1, r1, #1
    c0d4:	01db      	lsls	r3, r3, #7
    c0d6:	4319      	orrs	r1, r3
    c0d8:	7993      	ldrb	r3, [r2, #6]
    c0da:	b2c9      	uxtb	r1, r1
    c0dc:	18c9      	adds	r1, r1, r3
    c0de:	b2cb      	uxtb	r3, r1
    c0e0:	085b      	lsrs	r3, r3, #1
    c0e2:	01c9      	lsls	r1, r1, #7
    c0e4:	430b      	orrs	r3, r1
    c0e6:	79d1      	ldrb	r1, [r2, #7]
    c0e8:	b2db      	uxtb	r3, r3
    c0ea:	185b      	adds	r3, r3, r1
    c0ec:	b2d9      	uxtb	r1, r3
    c0ee:	0849      	lsrs	r1, r1, #1
    c0f0:	01db      	lsls	r3, r3, #7
    c0f2:	4319      	orrs	r1, r3
    c0f4:	7a13      	ldrb	r3, [r2, #8]
    c0f6:	b2c9      	uxtb	r1, r1
    c0f8:	18c9      	adds	r1, r1, r3
    c0fa:	b2cb      	uxtb	r3, r1
    c0fc:	085b      	lsrs	r3, r3, #1
    c0fe:	01c9      	lsls	r1, r1, #7
    c100:	430b      	orrs	r3, r1
    c102:	7a51      	ldrb	r1, [r2, #9]
    c104:	b2db      	uxtb	r3, r3
    c106:	185b      	adds	r3, r3, r1
    c108:	b2d9      	uxtb	r1, r3
    c10a:	7a92      	ldrb	r2, [r2, #10]
    c10c:	0849      	lsrs	r1, r1, #1
    c10e:	01db      	lsls	r3, r3, #7
    c110:	430b      	orrs	r3, r1
    c112:	189b      	adds	r3, r3, r2
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    c114:	9a00      	ldr	r2, [sp, #0]
    c116:	b2db      	uxtb	r3, r3
    c118:	429a      	cmp	r2, r3
    c11a:	d0a6      	beq.n	c06a <dir_read+0x286>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    c11c:	2301      	movs	r3, #1
    c11e:	425b      	negs	r3, r3
    c120:	842b      	strh	r3, [r5, #32]
    c122:	2000      	movs	r0, #0
    c124:	e69c      	b.n	be60 <dir_read+0x7c>
    c126:	46c0      	nop			; (mov r8, r8)
    c128:	00009dc1 	.word	0x00009dc1
    c12c:	00009d3d 	.word	0x00009d3d
    c130:	0000ffff 	.word	0x0000ffff
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c134:	2fff      	cmp	r7, #255	; 0xff
    c136:	d100      	bne.n	c13a <dir_read+0x356>
    c138:	e68a      	b.n	be50 <dir_read+0x6c>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c13a:	9801      	ldr	r0, [sp, #4]
    c13c:	1c84      	adds	r4, r0, #2
    c13e:	9803      	ldr	r0, [sp, #12]
    c140:	46a3      	mov	fp, r4
    c142:	007c      	lsls	r4, r7, #1
    c144:	5306      	strh	r6, [r0, r4]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c146:	7997      	ldrb	r7, [r2, #6]
    c148:	7956      	ldrb	r6, [r2, #5]
    c14a:	023f      	lsls	r7, r7, #8
    c14c:	433e      	orrs	r6, r7
    c14e:	46b2      	mov	sl, r6
		if (wc) {	/* Last char has not been processed */
    c150:	4666      	mov	r6, ip
    c152:	2e00      	cmp	r6, #0
    c154:	d100      	bne.n	c158 <dir_read+0x374>
    c156:	e0da      	b.n	c30e <dir_read+0x52a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c158:	465e      	mov	r6, fp
    c15a:	2eff      	cmp	r6, #255	; 0xff
    c15c:	d100      	bne.n	c160 <dir_read+0x37c>
    c15e:	e677      	b.n	be50 <dir_read+0x6c>
    c160:	0006      	movs	r6, r0
			lfnbuf[i++] = wc = uc;			/* Store it */
    c162:	9801      	ldr	r0, [sp, #4]
    c164:	46b4      	mov	ip, r6
    c166:	1cc7      	adds	r7, r0, #3
    c168:	0020      	movs	r0, r4
    c16a:	4656      	mov	r6, sl
    c16c:	4460      	add	r0, ip
    c16e:	8046      	strh	r6, [r0, #2]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c170:	7a16      	ldrb	r6, [r2, #8]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c172:	9002      	str	r0, [sp, #8]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c174:	0236      	lsls	r6, r6, #8
    c176:	46b4      	mov	ip, r6
    c178:	79d6      	ldrb	r6, [r2, #7]
    c17a:	46b3      	mov	fp, r6
    c17c:	4666      	mov	r6, ip
    c17e:	465c      	mov	r4, fp
    c180:	4326      	orrs	r6, r4
		if (wc) {	/* Last char has not been processed */
    c182:	4654      	mov	r4, sl
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c184:	46b4      	mov	ip, r6
		if (wc) {	/* Last char has not been processed */
    c186:	2c00      	cmp	r4, #0
    c188:	d100      	bne.n	c18c <dir_read+0x3a8>
    c18a:	e6c7      	b.n	bf1c <dir_read+0x138>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c18c:	2fff      	cmp	r7, #255	; 0xff
    c18e:	d100      	bne.n	c192 <dir_read+0x3ae>
    c190:	e65e      	b.n	be50 <dir_read+0x6c>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c192:	9801      	ldr	r0, [sp, #4]
    c194:	1d07      	adds	r7, r0, #4
    c196:	9802      	ldr	r0, [sp, #8]
    c198:	8086      	strh	r6, [r0, #4]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c19a:	7a94      	ldrb	r4, [r2, #10]
    c19c:	0224      	lsls	r4, r4, #8
    c19e:	46a0      	mov	r8, r4
    c1a0:	4646      	mov	r6, r8
    c1a2:	7a54      	ldrb	r4, [r2, #9]
    c1a4:	4326      	orrs	r6, r4
		if (wc) {	/* Last char has not been processed */
    c1a6:	4664      	mov	r4, ip
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c1a8:	46b0      	mov	r8, r6
		if (wc) {	/* Last char has not been processed */
    c1aa:	2c00      	cmp	r4, #0
    c1ac:	d100      	bne.n	c1b0 <dir_read+0x3cc>
    c1ae:	e6be      	b.n	bf2e <dir_read+0x14a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c1b0:	2fff      	cmp	r7, #255	; 0xff
    c1b2:	d100      	bne.n	c1b6 <dir_read+0x3d2>
    c1b4:	e08b      	b.n	c2ce <dir_read+0x4ea>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c1b6:	9801      	ldr	r0, [sp, #4]
    c1b8:	1d47      	adds	r7, r0, #5
    c1ba:	9802      	ldr	r0, [sp, #8]
    c1bc:	80c6      	strh	r6, [r0, #6]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c1be:	7bd4      	ldrb	r4, [r2, #15]
    c1c0:	0224      	lsls	r4, r4, #8
    c1c2:	46a4      	mov	ip, r4
    c1c4:	4666      	mov	r6, ip
    c1c6:	7b94      	ldrb	r4, [r2, #14]
    c1c8:	4326      	orrs	r6, r4
		if (wc) {	/* Last char has not been processed */
    c1ca:	4644      	mov	r4, r8
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c1cc:	46b4      	mov	ip, r6
		if (wc) {	/* Last char has not been processed */
    c1ce:	2c00      	cmp	r4, #0
    c1d0:	d100      	bne.n	c1d4 <dir_read+0x3f0>
    c1d2:	e6b5      	b.n	bf40 <dir_read+0x15c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c1d4:	2fff      	cmp	r7, #255	; 0xff
    c1d6:	d07a      	beq.n	c2ce <dir_read+0x4ea>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c1d8:	9801      	ldr	r0, [sp, #4]
    c1da:	1d87      	adds	r7, r0, #6
    c1dc:	9802      	ldr	r0, [sp, #8]
    c1de:	8106      	strh	r6, [r0, #8]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c1e0:	7c54      	ldrb	r4, [r2, #17]
    c1e2:	0224      	lsls	r4, r4, #8
    c1e4:	46a0      	mov	r8, r4
    c1e6:	4646      	mov	r6, r8
    c1e8:	7c14      	ldrb	r4, [r2, #16]
    c1ea:	4326      	orrs	r6, r4
		if (wc) {	/* Last char has not been processed */
    c1ec:	4664      	mov	r4, ip
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c1ee:	46b0      	mov	r8, r6
		if (wc) {	/* Last char has not been processed */
    c1f0:	2c00      	cmp	r4, #0
    c1f2:	d100      	bne.n	c1f6 <dir_read+0x412>
    c1f4:	e6ad      	b.n	bf52 <dir_read+0x16e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c1f6:	2fff      	cmp	r7, #255	; 0xff
    c1f8:	d069      	beq.n	c2ce <dir_read+0x4ea>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c1fa:	9801      	ldr	r0, [sp, #4]
    c1fc:	1dc7      	adds	r7, r0, #7
    c1fe:	9802      	ldr	r0, [sp, #8]
    c200:	8146      	strh	r6, [r0, #10]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c202:	7cd4      	ldrb	r4, [r2, #19]
    c204:	0224      	lsls	r4, r4, #8
    c206:	46a4      	mov	ip, r4
    c208:	4666      	mov	r6, ip
    c20a:	7c94      	ldrb	r4, [r2, #18]
    c20c:	4326      	orrs	r6, r4
		if (wc) {	/* Last char has not been processed */
    c20e:	4644      	mov	r4, r8
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c210:	46b2      	mov	sl, r6
		if (wc) {	/* Last char has not been processed */
    c212:	2c00      	cmp	r4, #0
    c214:	d100      	bne.n	c218 <dir_read+0x434>
    c216:	e6a5      	b.n	bf64 <dir_read+0x180>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c218:	2fff      	cmp	r7, #255	; 0xff
    c21a:	d058      	beq.n	c2ce <dir_read+0x4ea>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c21c:	8186      	strh	r6, [r0, #12]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c21e:	7d54      	ldrb	r4, [r2, #21]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c220:	9f01      	ldr	r7, [sp, #4]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c222:	0224      	lsls	r4, r4, #8
    c224:	46a4      	mov	ip, r4
    c226:	4666      	mov	r6, ip
    c228:	7d14      	ldrb	r4, [r2, #20]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c22a:	3708      	adds	r7, #8
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c22c:	4326      	orrs	r6, r4
		if (wc) {	/* Last char has not been processed */
    c22e:	4654      	mov	r4, sl
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c230:	46b4      	mov	ip, r6
		if (wc) {	/* Last char has not been processed */
    c232:	2c00      	cmp	r4, #0
    c234:	d100      	bne.n	c238 <dir_read+0x454>
    c236:	e69e      	b.n	bf76 <dir_read+0x192>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c238:	2fff      	cmp	r7, #255	; 0xff
    c23a:	d048      	beq.n	c2ce <dir_read+0x4ea>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c23c:	81c6      	strh	r6, [r0, #14]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c23e:	7dd4      	ldrb	r4, [r2, #23]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c240:	9f01      	ldr	r7, [sp, #4]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c242:	0224      	lsls	r4, r4, #8
    c244:	46a0      	mov	r8, r4
    c246:	4646      	mov	r6, r8
    c248:	7d94      	ldrb	r4, [r2, #22]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c24a:	3709      	adds	r7, #9
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c24c:	4326      	orrs	r6, r4
		if (wc) {	/* Last char has not been processed */
    c24e:	4664      	mov	r4, ip
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c250:	46b0      	mov	r8, r6
		if (wc) {	/* Last char has not been processed */
    c252:	2c00      	cmp	r4, #0
    c254:	d100      	bne.n	c258 <dir_read+0x474>
    c256:	e697      	b.n	bf88 <dir_read+0x1a4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c258:	2fff      	cmp	r7, #255	; 0xff
    c25a:	d038      	beq.n	c2ce <dir_read+0x4ea>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c25c:	8206      	strh	r6, [r0, #16]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c25e:	7e54      	ldrb	r4, [r2, #25]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c260:	9f01      	ldr	r7, [sp, #4]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c262:	0224      	lsls	r4, r4, #8
    c264:	46a4      	mov	ip, r4
    c266:	4666      	mov	r6, ip
    c268:	7e14      	ldrb	r4, [r2, #24]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c26a:	370a      	adds	r7, #10
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c26c:	4326      	orrs	r6, r4
		if (wc) {	/* Last char has not been processed */
    c26e:	4644      	mov	r4, r8
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c270:	46b4      	mov	ip, r6
		if (wc) {	/* Last char has not been processed */
    c272:	2c00      	cmp	r4, #0
    c274:	d100      	bne.n	c278 <dir_read+0x494>
    c276:	e690      	b.n	bf9a <dir_read+0x1b6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c278:	2fff      	cmp	r7, #255	; 0xff
    c27a:	d028      	beq.n	c2ce <dir_read+0x4ea>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c27c:	8246      	strh	r6, [r0, #18]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c27e:	7f54      	ldrb	r4, [r2, #29]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c280:	9f01      	ldr	r7, [sp, #4]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c282:	0224      	lsls	r4, r4, #8
    c284:	46a0      	mov	r8, r4
    c286:	4646      	mov	r6, r8
    c288:	7f14      	ldrb	r4, [r2, #28]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c28a:	370b      	adds	r7, #11
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c28c:	4326      	orrs	r6, r4
		if (wc) {	/* Last char has not been processed */
    c28e:	4664      	mov	r4, ip
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c290:	46b0      	mov	r8, r6
		if (wc) {	/* Last char has not been processed */
    c292:	2c00      	cmp	r4, #0
    c294:	d100      	bne.n	c298 <dir_read+0x4b4>
    c296:	e689      	b.n	bfac <dir_read+0x1c8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c298:	2fff      	cmp	r7, #255	; 0xff
    c29a:	d018      	beq.n	c2ce <dir_read+0x4ea>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c29c:	8286      	strh	r6, [r0, #20]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c29e:	7fd4      	ldrb	r4, [r2, #31]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c2a0:	9f01      	ldr	r7, [sp, #4]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c2a2:	0224      	lsls	r4, r4, #8
    c2a4:	46a2      	mov	sl, r4
    c2a6:	7f94      	ldrb	r4, [r2, #30]
			lfnbuf[i++] = wc = uc;			/* Store it */
    c2a8:	370c      	adds	r7, #12
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    c2aa:	46a4      	mov	ip, r4
    c2ac:	4654      	mov	r4, sl
    c2ae:	4666      	mov	r6, ip
    c2b0:	4334      	orrs	r4, r6
    c2b2:	46a4      	mov	ip, r4
		if (wc) {	/* Last char has not been processed */
    c2b4:	4644      	mov	r4, r8
    c2b6:	2c00      	cmp	r4, #0
    c2b8:	d100      	bne.n	c2bc <dir_read+0x4d8>
    c2ba:	e680      	b.n	bfbe <dir_read+0x1da>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    c2bc:	2fff      	cmp	r7, #255	; 0xff
    c2be:	d006      	beq.n	c2ce <dir_read+0x4ea>
    c2c0:	0004      	movs	r4, r0
			lfnbuf[i++] = wc = uc;			/* Store it */
    c2c2:	9801      	ldr	r0, [sp, #4]
    c2c4:	300d      	adds	r0, #13
    c2c6:	0007      	movs	r7, r0
    c2c8:	4660      	mov	r0, ip
    c2ca:	82e0      	strh	r0, [r4, #22]
    c2cc:	e67b      	b.n	bfc6 <dir_read+0x1e2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    c2ce:	9100      	str	r1, [sp, #0]
    c2d0:	e5bc      	b.n	be4c <dir_read+0x68>
    c2d2:	0020      	movs	r0, r4
    c2d4:	4b0f      	ldr	r3, [pc, #60]	; (c314 <dir_read+0x530>)
    c2d6:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
    c2d8:	2801      	cmp	r0, #1
    c2da:	d800      	bhi.n	c2de <dir_read+0x4fa>
    c2dc:	e6d2      	b.n	c084 <dir_read+0x2a0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    c2de:	1c43      	adds	r3, r0, #1
    c2e0:	d100      	bne.n	c2e4 <dir_read+0x500>
    c2e2:	e67f      	b.n	bfe4 <dir_read+0x200>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    c2e4:	682c      	ldr	r4, [r5, #0]
    c2e6:	69e3      	ldr	r3, [r4, #28]
    c2e8:	4298      	cmp	r0, r3
    c2ea:	d300      	bcc.n	c2ee <dir_read+0x50a>
    c2ec:	e5b5      	b.n	be5a <dir_read+0x76>
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    c2ee:	2200      	movs	r2, #0
				dj->clust = clst;				/* Initialize data for new cluster */
    c2f0:	60e8      	str	r0, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    c2f2:	69e3      	ldr	r3, [r4, #28]
	clst -= 2;
    c2f4:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    c2f6:	3b02      	subs	r3, #2
    c2f8:	4692      	mov	sl, r2
    c2fa:	4298      	cmp	r0, r3
    c2fc:	d204      	bcs.n	c308 <dir_read+0x524>
	return clst * fs->csize + fs->database;
    c2fe:	78a3      	ldrb	r3, [r4, #2]
    c300:	4358      	muls	r0, r3
    c302:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c304:	469a      	mov	sl, r3
    c306:	4482      	add	sl, r0
				dj->sect = clust2sect(dj->fs, clst);
    c308:	4653      	mov	r3, sl
    c30a:	612b      	str	r3, [r5, #16]
    c30c:	e6a5      	b.n	c05a <dir_read+0x276>
			lfnbuf[i++] = wc = uc;			/* Store it */
    c30e:	465f      	mov	r7, fp
    c310:	e5fb      	b.n	bf0a <dir_read+0x126>
    c312:	46c0      	nop			; (mov r8, r8)
    c314:	0000ae05 	.word	0x0000ae05

0000c318 <dir_register>:
{
    c318:	b5f0      	push	{r4, r5, r6, r7, lr}
    c31a:	46de      	mov	lr, fp
    c31c:	464e      	mov	r6, r9
    c31e:	4657      	mov	r7, sl
    c320:	4645      	mov	r5, r8
    c322:	b5e0      	push	{r5, r6, r7, lr}
	fn = dj->fn; lfn = dj->lfn;
    c324:	69c3      	ldr	r3, [r0, #28]
{
    c326:	b08b      	sub	sp, #44	; 0x2c
	fn = dj->fn; lfn = dj->lfn;
    c328:	6986      	ldr	r6, [r0, #24]
    c32a:	ac07      	add	r4, sp, #28
    c32c:	220c      	movs	r2, #12
{
    c32e:	4683      	mov	fp, r0
	fn = dj->fn; lfn = dj->lfn;
    c330:	4699      	mov	r9, r3
    c332:	0031      	movs	r1, r6
    c334:	4bbc      	ldr	r3, [pc, #752]	; (c628 <dir_register+0x310>)
    c336:	0020      	movs	r0, r4
    c338:	4798      	blx	r3
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
    c33a:	7ae3      	ldrb	r3, [r4, #11]
    c33c:	001a      	movs	r2, r3
    c33e:	9302      	str	r3, [sp, #8]
    c340:	2320      	movs	r3, #32
    c342:	4013      	ands	r3, r2
		return FR_INVALID_NAME;
    c344:	2206      	movs	r2, #6
    c346:	4692      	mov	sl, r2
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
    c348:	2b00      	cmp	r3, #0
    c34a:	d007      	beq.n	c35c <dir_register+0x44>
}
    c34c:	4650      	mov	r0, sl
    c34e:	b00b      	add	sp, #44	; 0x2c
    c350:	bc3c      	pop	{r2, r3, r4, r5}
    c352:	4690      	mov	r8, r2
    c354:	4699      	mov	r9, r3
    c356:	46a2      	mov	sl, r4
    c358:	46ab      	mov	fp, r5
    c35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    c35c:	9a02      	ldr	r2, [sp, #8]
    c35e:	07d2      	lsls	r2, r2, #31
    c360:	d44f      	bmi.n	c402 <dir_register+0xea>
    c362:	4bb2      	ldr	r3, [pc, #712]	; (c62c <dir_register+0x314>)
    c364:	9301      	str	r3, [sp, #4]
		ne = 1;
    c366:	2301      	movs	r3, #1
    c368:	9300      	str	r3, [sp, #0]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    c36a:	9b02      	ldr	r3, [sp, #8]
    c36c:	079b      	lsls	r3, r3, #30
    c36e:	d511      	bpl.n	c394 <dir_register+0x7c>
		for (ne = 0; lfn[ne]; ne++) ;
    c370:	464b      	mov	r3, r9
    c372:	881b      	ldrh	r3, [r3, #0]
    c374:	2b00      	cmp	r3, #0
    c376:	d00d      	beq.n	c394 <dir_register+0x7c>
    c378:	2000      	movs	r0, #0
    c37a:	464a      	mov	r2, r9
    c37c:	3001      	adds	r0, #1
    c37e:	b280      	uxth	r0, r0
    c380:	0043      	lsls	r3, r0, #1
    c382:	5a9b      	ldrh	r3, [r3, r2]
    c384:	2b00      	cmp	r3, #0
    c386:	d1f9      	bne.n	c37c <dir_register+0x64>
    c388:	4ba9      	ldr	r3, [pc, #676]	; (c630 <dir_register+0x318>)
    c38a:	3019      	adds	r0, #25
    c38c:	210d      	movs	r1, #13
    c38e:	4798      	blx	r3
    c390:	b283      	uxth	r3, r0
    c392:	9300      	str	r3, [sp, #0]
	res = dir_sdi(dj, 0);
    c394:	2100      	movs	r1, #0
    c396:	4658      	mov	r0, fp
    c398:	9b01      	ldr	r3, [sp, #4]
    c39a:	4798      	blx	r3
    c39c:	4682      	mov	sl, r0
	if (res != FR_OK) return res;
    c39e:	2800      	cmp	r0, #0
    c3a0:	d1d4      	bne.n	c34c <dir_register+0x34>
    c3a2:	465b      	mov	r3, fp
    c3a4:	681f      	ldr	r7, [r3, #0]
    c3a6:	691b      	ldr	r3, [r3, #16]
    c3a8:	465e      	mov	r6, fp
    c3aa:	4699      	mov	r9, r3
    c3ac:	2300      	movs	r3, #0
    c3ae:	4698      	mov	r8, r3
    c3b0:	9303      	str	r3, [sp, #12]
	wsect = fs->winsect;
    c3b2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
	if (wsect != sector) {	/* Changed current window */
    c3b4:	454c      	cmp	r4, r9
    c3b6:	d012      	beq.n	c3de <dir_register+0xc6>
		if (fs->wflag) {	/* Write back dirty window if needed */
    c3b8:	793b      	ldrb	r3, [r7, #4]
    c3ba:	2b00      	cmp	r3, #0
    c3bc:	d000      	beq.n	c3c0 <dir_register+0xa8>
    c3be:	e2fd      	b.n	c9bc <dir_register+0x6a4>
		if (sector) {
    c3c0:	464b      	mov	r3, r9
    c3c2:	2b00      	cmp	r3, #0
    c3c4:	d00b      	beq.n	c3de <dir_register+0xc6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    c3c6:	0039      	movs	r1, r7
    c3c8:	7878      	ldrb	r0, [r7, #1]
    c3ca:	2301      	movs	r3, #1
    c3cc:	464a      	mov	r2, r9
    c3ce:	3134      	adds	r1, #52	; 0x34
    c3d0:	4c98      	ldr	r4, [pc, #608]	; (c634 <dir_register+0x31c>)
    c3d2:	47a0      	blx	r4
    c3d4:	2800      	cmp	r0, #0
    c3d6:	d000      	beq.n	c3da <dir_register+0xc2>
    c3d8:	e2ed      	b.n	c9b6 <dir_register+0x69e>
			fs->winsect = sector;
    c3da:	464b      	mov	r3, r9
    c3dc:	633b      	str	r3, [r7, #48]	; 0x30
		c = *dj->dir;				/* Check the entry status */
    c3de:	6973      	ldr	r3, [r6, #20]
    c3e0:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    c3e2:	2be5      	cmp	r3, #229	; 0xe5
    c3e4:	d100      	bne.n	c3e8 <dir_register+0xd0>
    c3e6:	e129      	b.n	c63c <dir_register+0x324>
    c3e8:	2b00      	cmp	r3, #0
    c3ea:	d100      	bne.n	c3ee <dir_register+0xd6>
    c3ec:	e126      	b.n	c63c <dir_register+0x324>
			n = 0;					/* Not a blank entry. Restart to search */
    c3ee:	2500      	movs	r5, #0
	i = dj->index + 1;
    c3f0:	88f4      	ldrh	r4, [r6, #6]
    c3f2:	3401      	adds	r4, #1
    c3f4:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    c3f6:	2c00      	cmp	r4, #0
    c3f8:	d000      	beq.n	c3fc <dir_register+0xe4>
    c3fa:	e267      	b.n	c8cc <dir_register+0x5b4>
		return FR_NO_FILE;
    c3fc:	2304      	movs	r3, #4
    c3fe:	469a      	mov	sl, r3
    c400:	e7a4      	b.n	c34c <dir_register+0x34>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    c402:	465a      	mov	r2, fp
    c404:	72f3      	strb	r3, [r6, #11]
    c406:	61d3      	str	r3, [r2, #28]
    c408:	4b88      	ldr	r3, [pc, #544]	; (c62c <dir_register+0x314>)
		for (n = 1; n < 100; n++) {
    c40a:	2701      	movs	r7, #1
    c40c:	9301      	str	r3, [sp, #4]
		c = (seq % 16) + '0';
    c40e:	230f      	movs	r3, #15
    c410:	4698      	mov	r8, r3
    c412:	ad05      	add	r5, sp, #20
    c414:	9700      	str	r7, [sp, #0]
		*d++ = *s++;
    c416:	7823      	ldrb	r3, [r4, #0]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    c418:	9a00      	ldr	r2, [sp, #0]
		*d++ = *s++;
    c41a:	469c      	mov	ip, r3
    c41c:	7033      	strb	r3, [r6, #0]
    c41e:	7863      	ldrb	r3, [r4, #1]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    c420:	0017      	movs	r7, r2
		*d++ = *s++;
    c422:	7073      	strb	r3, [r6, #1]
    c424:	78a3      	ldrb	r3, [r4, #2]
    c426:	70b3      	strb	r3, [r6, #2]
    c428:	78e3      	ldrb	r3, [r4, #3]
    c42a:	70f3      	strb	r3, [r6, #3]
    c42c:	7923      	ldrb	r3, [r4, #4]
    c42e:	7133      	strb	r3, [r6, #4]
    c430:	7963      	ldrb	r3, [r4, #5]
    c432:	7173      	strb	r3, [r6, #5]
    c434:	79a3      	ldrb	r3, [r4, #6]
    c436:	71b3      	strb	r3, [r6, #6]
    c438:	79e3      	ldrb	r3, [r4, #7]
    c43a:	71f3      	strb	r3, [r6, #7]
    c43c:	7a23      	ldrb	r3, [r4, #8]
    c43e:	7233      	strb	r3, [r6, #8]
    c440:	7a63      	ldrb	r3, [r4, #9]
    c442:	7273      	strb	r3, [r6, #9]
    c444:	7aa3      	ldrb	r3, [r4, #10]
    c446:	72b3      	strb	r3, [r6, #10]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    c448:	0013      	movs	r3, r2
    c44a:	2a05      	cmp	r2, #5
    c44c:	d90e      	bls.n	c46c <dir_register+0x154>
    c44e:	464b      	mov	r3, r9
    c450:	8818      	ldrh	r0, [r3, #0]
    c452:	0013      	movs	r3, r2
    c454:	0001      	movs	r1, r0
    c456:	464a      	mov	r2, r9
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    c458:	0858      	lsrs	r0, r3, #1
    c45a:	03db      	lsls	r3, r3, #15
    c45c:	4318      	orrs	r0, r3
    c45e:	3202      	adds	r2, #2
    c460:	1840      	adds	r0, r0, r1
    c462:	8811      	ldrh	r1, [r2, #0]
    c464:	b283      	uxth	r3, r0
    c466:	2900      	cmp	r1, #0
    c468:	d1f6      	bne.n	c458 <dir_register+0x140>
    c46a:	9700      	str	r7, [sp, #0]
		c = (seq % 16) + '0';
    c46c:	4640      	mov	r0, r8
    c46e:	4018      	ands	r0, r3
    c470:	0002      	movs	r2, r0
    c472:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    c474:	2a39      	cmp	r2, #57	; 0x39
    c476:	d900      	bls.n	c47a <dir_register+0x162>
    c478:	3207      	adds	r2, #7
		ns[i--] = c;
    c47a:	71ea      	strb	r2, [r5, #7]
		seq /= 16;
    c47c:	091a      	lsrs	r2, r3, #4
    c47e:	b292      	uxth	r2, r2
	} while (seq);
    c480:	2a00      	cmp	r2, #0
    c482:	d100      	bne.n	c486 <dir_register+0x16e>
    c484:	e23e      	b.n	c904 <dir_register+0x5ec>
		c = (seq % 16) + '0';
    c486:	4641      	mov	r1, r8
    c488:	400a      	ands	r2, r1
    c48a:	0010      	movs	r0, r2
    c48c:	3030      	adds	r0, #48	; 0x30
		if (c > '9') c += 7;
    c48e:	2839      	cmp	r0, #57	; 0x39
    c490:	d901      	bls.n	c496 <dir_register+0x17e>
    c492:	3237      	adds	r2, #55	; 0x37
    c494:	0010      	movs	r0, r2
		seq /= 16;
    c496:	0a1a      	lsrs	r2, r3, #8
    c498:	b292      	uxth	r2, r2
		ns[i--] = c;
    c49a:	71a8      	strb	r0, [r5, #6]
	} while (seq);
    c49c:	2a00      	cmp	r2, #0
    c49e:	d100      	bne.n	c4a2 <dir_register+0x18a>
    c4a0:	e22d      	b.n	c8fe <dir_register+0x5e6>
		c = (seq % 16) + '0';
    c4a2:	4641      	mov	r1, r8
    c4a4:	400a      	ands	r2, r1
    c4a6:	0010      	movs	r0, r2
    c4a8:	3030      	adds	r0, #48	; 0x30
		if (c > '9') c += 7;
    c4aa:	2839      	cmp	r0, #57	; 0x39
    c4ac:	d901      	bls.n	c4b2 <dir_register+0x19a>
    c4ae:	3237      	adds	r2, #55	; 0x37
    c4b0:	0010      	movs	r0, r2
		seq /= 16;
    c4b2:	0b1b      	lsrs	r3, r3, #12
    c4b4:	b29b      	uxth	r3, r3
		ns[i--] = c;
    c4b6:	7168      	strb	r0, [r5, #5]
	} while (seq);
    c4b8:	2b00      	cmp	r3, #0
    c4ba:	d100      	bne.n	c4be <dir_register+0x1a6>
    c4bc:	e225      	b.n	c90a <dir_register+0x5f2>
		c = (seq % 16) + '0';
    c4be:	b2db      	uxtb	r3, r3
    c4c0:	001a      	movs	r2, r3
    c4c2:	3230      	adds	r2, #48	; 0x30
    c4c4:	b2d2      	uxtb	r2, r2
		if (c > '9') c += 7;
    c4c6:	2a39      	cmp	r2, #57	; 0x39
    c4c8:	d901      	bls.n	c4ce <dir_register+0x1b6>
    c4ca:	3337      	adds	r3, #55	; 0x37
    c4cc:	b2da      	uxtb	r2, r3
		ns[i--] = c;
    c4ce:	712a      	strb	r2, [r5, #4]
    c4d0:	2004      	movs	r0, #4
    c4d2:	2203      	movs	r2, #3
	ns[i] = '~';
    c4d4:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
    c4d6:	4661      	mov	r1, ip
	ns[i] = '~';
    c4d8:	54ab      	strb	r3, [r5, r2]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    c4da:	2920      	cmp	r1, #32
    c4dc:	d100      	bne.n	c4e0 <dir_register+0x1c8>
    c4de:	e209      	b.n	c8f4 <dir_register+0x5dc>
    c4e0:	7873      	ldrb	r3, [r6, #1]
    c4e2:	1c71      	adds	r1, r6, #1
    c4e4:	2b20      	cmp	r3, #32
    c4e6:	d100      	bne.n	c4ea <dir_register+0x1d2>
    c4e8:	e29e      	b.n	ca28 <dir_register+0x710>
    c4ea:	78b3      	ldrb	r3, [r6, #2]
    c4ec:	1cb1      	adds	r1, r6, #2
    c4ee:	2b20      	cmp	r3, #32
    c4f0:	d100      	bne.n	c4f4 <dir_register+0x1dc>
    c4f2:	e28f      	b.n	ca14 <dir_register+0x6fc>
    c4f4:	2a03      	cmp	r2, #3
    c4f6:	d100      	bne.n	c4fa <dir_register+0x1e2>
    c4f8:	e28a      	b.n	ca10 <dir_register+0x6f8>
    c4fa:	78f3      	ldrb	r3, [r6, #3]
    c4fc:	1cf1      	adds	r1, r6, #3
    c4fe:	2b20      	cmp	r3, #32
    c500:	d100      	bne.n	c504 <dir_register+0x1ec>
    c502:	e28f      	b.n	ca24 <dir_register+0x70c>
    c504:	2a04      	cmp	r2, #4
    c506:	d100      	bne.n	c50a <dir_register+0x1f2>
    c508:	e280      	b.n	ca0c <dir_register+0x6f4>
    c50a:	7933      	ldrb	r3, [r6, #4]
    c50c:	1d31      	adds	r1, r6, #4
    c50e:	2b20      	cmp	r3, #32
    c510:	d100      	bne.n	c514 <dir_register+0x1fc>
    c512:	e28b      	b.n	ca2c <dir_register+0x714>
    c514:	2305      	movs	r3, #5
    c516:	2a06      	cmp	r2, #6
    c518:	d107      	bne.n	c52a <dir_register+0x212>
    c51a:	7973      	ldrb	r3, [r6, #5]
    c51c:	1d71      	adds	r1, r6, #5
    c51e:	469c      	mov	ip, r3
    c520:	4667      	mov	r7, ip
    c522:	2306      	movs	r3, #6
    c524:	2f20      	cmp	r7, #32
    c526:	d100      	bne.n	c52a <dir_register+0x212>
    c528:	e27a      	b.n	ca20 <dir_register+0x708>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c52a:	1c59      	adds	r1, r3, #1
    c52c:	468c      	mov	ip, r1
    c52e:	217e      	movs	r1, #126	; 0x7e
    c530:	54f1      	strb	r1, [r6, r3]
    c532:	1c97      	adds	r7, r2, #2
    c534:	46ba      	mov	sl, r7
    c536:	4667      	mov	r7, ip
    c538:	5c28      	ldrb	r0, [r5, r0]
    c53a:	1c99      	adds	r1, r3, #2
    c53c:	55f0      	strb	r0, [r6, r7]
	} while (j < 8);
    c53e:	2908      	cmp	r1, #8
    c540:	d01e      	beq.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c542:	4657      	mov	r7, sl
    c544:	1cd8      	adds	r0, r3, #3
    c546:	1871      	adds	r1, r6, r1
    c548:	2f08      	cmp	r7, #8
    c54a:	d12e      	bne.n	c5aa <dir_register+0x292>
    c54c:	2220      	movs	r2, #32
    c54e:	700a      	strb	r2, [r1, #0]
	} while (j < 8);
    c550:	2808      	cmp	r0, #8
    c552:	d015      	beq.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c554:	1d19      	adds	r1, r3, #4
    c556:	5432      	strb	r2, [r6, r0]
	} while (j < 8);
    c558:	2908      	cmp	r1, #8
    c55a:	d011      	beq.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c55c:	1d58      	adds	r0, r3, #5
    c55e:	1873      	adds	r3, r6, r1
    c560:	469c      	mov	ip, r3
    c562:	2320      	movs	r3, #32
    c564:	4662      	mov	r2, ip
    c566:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    c568:	2808      	cmp	r0, #8
    c56a:	d009      	beq.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c56c:	1c8a      	adds	r2, r1, #2
    c56e:	5433      	strb	r3, [r6, r0]
	} while (j < 8);
    c570:	2a08      	cmp	r2, #8
    c572:	d005      	beq.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c574:	54b3      	strb	r3, [r6, r2]
    c576:	1df2      	adds	r2, r6, #7
	} while (j < 8);
    c578:	2904      	cmp	r1, #4
    c57a:	d101      	bne.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c57c:	2320      	movs	r3, #32
    c57e:	7013      	strb	r3, [r2, #0]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    c580:	2100      	movs	r1, #0
    c582:	4658      	mov	r0, fp
    c584:	9b01      	ldr	r3, [sp, #4]
    c586:	4798      	blx	r3
	if (res != FR_OK) return res;
    c588:	2800      	cmp	r0, #0
    c58a:	d141      	bne.n	c610 <dir_register+0x2f8>
    c58c:	4658      	mov	r0, fp
    c58e:	4b2a      	ldr	r3, [pc, #168]	; (c638 <dir_register+0x320>)
    c590:	4798      	blx	r3
			if (res != FR_OK) break;
    c592:	2800      	cmp	r0, #0
    c594:	d13c      	bne.n	c610 <dir_register+0x2f8>
		for (n = 1; n < 100; n++) {
    c596:	9f00      	ldr	r7, [sp, #0]
    c598:	3701      	adds	r7, #1
    c59a:	b2bb      	uxth	r3, r7
    c59c:	9300      	str	r3, [sp, #0]
    c59e:	2b64      	cmp	r3, #100	; 0x64
    c5a0:	d000      	beq.n	c5a4 <dir_register+0x28c>
    c5a2:	e738      	b.n	c416 <dir_register+0xfe>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    c5a4:	2307      	movs	r3, #7
    c5a6:	469a      	mov	sl, r3
    c5a8:	e6d0      	b.n	c34c <dir_register+0x34>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c5aa:	1cd7      	adds	r7, r2, #3
    c5ac:	46bc      	mov	ip, r7
    c5ae:	4657      	mov	r7, sl
    c5b0:	5def      	ldrb	r7, [r5, r7]
    c5b2:	700f      	strb	r7, [r1, #0]
	} while (j < 8);
    c5b4:	2808      	cmp	r0, #8
    c5b6:	d0e3      	beq.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c5b8:	4667      	mov	r7, ip
    c5ba:	1d19      	adds	r1, r3, #4
    c5bc:	1830      	adds	r0, r6, r0
    c5be:	2f08      	cmp	r7, #8
    c5c0:	d112      	bne.n	c5e8 <dir_register+0x2d0>
    c5c2:	2220      	movs	r2, #32
    c5c4:	7002      	strb	r2, [r0, #0]
	} while (j < 8);
    c5c6:	2908      	cmp	r1, #8
    c5c8:	d0da      	beq.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c5ca:	1d58      	adds	r0, r3, #5
    c5cc:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
    c5ce:	2808      	cmp	r0, #8
    c5d0:	d0d6      	beq.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c5d2:	2220      	movs	r2, #32
    c5d4:	1831      	adds	r1, r6, r0
    c5d6:	3306      	adds	r3, #6
    c5d8:	700a      	strb	r2, [r1, #0]
	} while (j < 8);
    c5da:	2b08      	cmp	r3, #8
    c5dc:	d0d0      	beq.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c5de:	54f2      	strb	r2, [r6, r3]
	} while (j < 8);
    c5e0:	2805      	cmp	r0, #5
    c5e2:	d1cd      	bne.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c5e4:	1df2      	adds	r2, r6, #7
    c5e6:	e7c9      	b.n	c57c <dir_register+0x264>
    c5e8:	4667      	mov	r7, ip
    c5ea:	5def      	ldrb	r7, [r5, r7]
    c5ec:	7007      	strb	r7, [r0, #0]
	} while (j < 8);
    c5ee:	2908      	cmp	r1, #8
    c5f0:	d0c6      	beq.n	c580 <dir_register+0x268>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c5f2:	1877      	adds	r7, r6, r1
    c5f4:	1d58      	adds	r0, r3, #5
    c5f6:	46bc      	mov	ip, r7
    c5f8:	2a04      	cmp	r2, #4
    c5fa:	d0b2      	beq.n	c562 <dir_register+0x24a>
    c5fc:	79ea      	ldrb	r2, [r5, #7]
    c5fe:	703a      	strb	r2, [r7, #0]
	} while (j < 8);
    c600:	2808      	cmp	r0, #8
    c602:	d1e6      	bne.n	c5d2 <dir_register+0x2ba>
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    c604:	2100      	movs	r1, #0
    c606:	4658      	mov	r0, fp
    c608:	9b01      	ldr	r3, [sp, #4]
    c60a:	4798      	blx	r3
	if (res != FR_OK) return res;
    c60c:	2800      	cmp	r0, #0
    c60e:	d0bd      	beq.n	c58c <dir_register+0x274>
    c610:	4682      	mov	sl, r0
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    c612:	2804      	cmp	r0, #4
    c614:	d000      	beq.n	c618 <dir_register+0x300>
    c616:	e699      	b.n	c34c <dir_register+0x34>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    c618:	466b      	mov	r3, sp
    c61a:	7a1b      	ldrb	r3, [r3, #8]
    c61c:	464a      	mov	r2, r9
    c61e:	72f3      	strb	r3, [r6, #11]
    c620:	465b      	mov	r3, fp
    c622:	61da      	str	r2, [r3, #28]
    c624:	e69f      	b.n	c366 <dir_register+0x4e>
    c626:	46c0      	nop			; (mov r8, r8)
    c628:	00028999 	.word	0x00028999
    c62c:	0000b11d 	.word	0x0000b11d
    c630:	00025a51 	.word	0x00025a51
    c634:	00009d3d 	.word	0x00009d3d
    c638:	0000b681 	.word	0x0000b681
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    c63c:	4643      	mov	r3, r8
    c63e:	2b00      	cmp	r3, #0
    c640:	d101      	bne.n	c646 <dir_register+0x32e>
    c642:	88f3      	ldrh	r3, [r6, #6]
    c644:	9303      	str	r3, [sp, #12]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    c646:	4643      	mov	r3, r8
    c648:	1c5d      	adds	r5, r3, #1
    c64a:	9b00      	ldr	r3, [sp, #0]
    c64c:	b2ad      	uxth	r5, r5
    c64e:	42ab      	cmp	r3, r5
    c650:	d000      	beq.n	c654 <dir_register+0x33c>
    c652:	e6cd      	b.n	c3f0 <dir_register+0xd8>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    c654:	9b00      	ldr	r3, [sp, #0]
    c656:	4644      	mov	r4, r8
    c658:	46b3      	mov	fp, r6
    c65a:	2b01      	cmp	r3, #1
    c65c:	d100      	bne.n	c660 <dir_register+0x348>
    c65e:	e215      	b.n	ca8c <dir_register+0x774>
		res = dir_sdi(dj, is);
    c660:	9903      	ldr	r1, [sp, #12]
    c662:	4658      	mov	r0, fp
    c664:	9b01      	ldr	r3, [sp, #4]
    c666:	4798      	blx	r3
		if (res == FR_OK) {
    c668:	2800      	cmp	r0, #0
    c66a:	d000      	beq.n	c66e <dir_register+0x356>
    c66c:	e26d      	b.n	cb4a <dir_register+0x832>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    c66e:	465b      	mov	r3, fp
    c670:	6999      	ldr	r1, [r3, #24]
				res = dir_next(dj, 0);	/* Next entry */
    c672:	465d      	mov	r5, fp
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    c674:	780a      	ldrb	r2, [r1, #0]
				res = dir_next(dj, 0);	/* Next entry */
    c676:	46a3      	mov	fp, r4
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    c678:	0853      	lsrs	r3, r2, #1
    c67a:	01d2      	lsls	r2, r2, #7
    c67c:	4313      	orrs	r3, r2
    c67e:	784a      	ldrb	r2, [r1, #1]
    c680:	189b      	adds	r3, r3, r2
    c682:	b2da      	uxtb	r2, r3
    c684:	0852      	lsrs	r2, r2, #1
    c686:	01db      	lsls	r3, r3, #7
    c688:	431a      	orrs	r2, r3
    c68a:	788b      	ldrb	r3, [r1, #2]
    c68c:	b2d2      	uxtb	r2, r2
    c68e:	18d2      	adds	r2, r2, r3
    c690:	b2d3      	uxtb	r3, r2
    c692:	085b      	lsrs	r3, r3, #1
    c694:	01d2      	lsls	r2, r2, #7
    c696:	4313      	orrs	r3, r2
    c698:	78ca      	ldrb	r2, [r1, #3]
    c69a:	b2db      	uxtb	r3, r3
    c69c:	189b      	adds	r3, r3, r2
    c69e:	b2da      	uxtb	r2, r3
    c6a0:	0852      	lsrs	r2, r2, #1
    c6a2:	01db      	lsls	r3, r3, #7
    c6a4:	431a      	orrs	r2, r3
    c6a6:	790b      	ldrb	r3, [r1, #4]
    c6a8:	b2d2      	uxtb	r2, r2
    c6aa:	18d2      	adds	r2, r2, r3
    c6ac:	b2d3      	uxtb	r3, r2
    c6ae:	085b      	lsrs	r3, r3, #1
    c6b0:	01d2      	lsls	r2, r2, #7
    c6b2:	4313      	orrs	r3, r2
    c6b4:	794a      	ldrb	r2, [r1, #5]
    c6b6:	b2db      	uxtb	r3, r3
    c6b8:	189b      	adds	r3, r3, r2
    c6ba:	b2da      	uxtb	r2, r3
    c6bc:	0852      	lsrs	r2, r2, #1
    c6be:	01db      	lsls	r3, r3, #7
    c6c0:	431a      	orrs	r2, r3
    c6c2:	798b      	ldrb	r3, [r1, #6]
    c6c4:	b2d2      	uxtb	r2, r2
    c6c6:	18d2      	adds	r2, r2, r3
    c6c8:	b2d3      	uxtb	r3, r2
    c6ca:	085b      	lsrs	r3, r3, #1
    c6cc:	01d2      	lsls	r2, r2, #7
    c6ce:	4313      	orrs	r3, r2
    c6d0:	79ca      	ldrb	r2, [r1, #7]
    c6d2:	b2db      	uxtb	r3, r3
    c6d4:	189b      	adds	r3, r3, r2
    c6d6:	b2da      	uxtb	r2, r3
    c6d8:	0852      	lsrs	r2, r2, #1
    c6da:	01db      	lsls	r3, r3, #7
    c6dc:	431a      	orrs	r2, r3
    c6de:	7a0b      	ldrb	r3, [r1, #8]
    c6e0:	b2d2      	uxtb	r2, r2
    c6e2:	18d2      	adds	r2, r2, r3
    c6e4:	b2d3      	uxtb	r3, r2
    c6e6:	085b      	lsrs	r3, r3, #1
    c6e8:	01d2      	lsls	r2, r2, #7
    c6ea:	4313      	orrs	r3, r2
    c6ec:	7a4a      	ldrb	r2, [r1, #9]
    c6ee:	b2db      	uxtb	r3, r3
    c6f0:	189b      	adds	r3, r3, r2
    c6f2:	b2da      	uxtb	r2, r3
    c6f4:	0852      	lsrs	r2, r2, #1
    c6f6:	01db      	lsls	r3, r3, #7
    c6f8:	4313      	orrs	r3, r2
    c6fa:	7a8a      	ldrb	r2, [r1, #10]
    c6fc:	189b      	adds	r3, r3, r2
    c6fe:	b2db      	uxtb	r3, r3
    c700:	9301      	str	r3, [sp, #4]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    c702:	4bcb      	ldr	r3, [pc, #812]	; (ca30 <dir_register+0x718>)
    c704:	4698      	mov	r8, r3
    c706:	e036      	b.n	c776 <dir_register+0x45e>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c708:	22ff      	movs	r2, #255	; 0xff
    c70a:	70da      	strb	r2, [r3, #3]
    c70c:	711a      	strb	r2, [r3, #4]
    c70e:	22ff      	movs	r2, #255	; 0xff
    c710:	715a      	strb	r2, [r3, #5]
    c712:	719a      	strb	r2, [r3, #6]
    c714:	22ff      	movs	r2, #255	; 0xff
    c716:	71da      	strb	r2, [r3, #7]
    c718:	721a      	strb	r2, [r3, #8]
    c71a:	22ff      	movs	r2, #255	; 0xff
    c71c:	725a      	strb	r2, [r3, #9]
    c71e:	729a      	strb	r2, [r3, #10]
    c720:	22ff      	movs	r2, #255	; 0xff
    c722:	739a      	strb	r2, [r3, #14]
    c724:	73da      	strb	r2, [r3, #15]
    c726:	22ff      	movs	r2, #255	; 0xff
    c728:	741a      	strb	r2, [r3, #16]
    c72a:	745a      	strb	r2, [r3, #17]
    c72c:	22ff      	movs	r2, #255	; 0xff
    c72e:	749a      	strb	r2, [r3, #18]
    c730:	74da      	strb	r2, [r3, #19]
    c732:	22ff      	movs	r2, #255	; 0xff
    c734:	751a      	strb	r2, [r3, #20]
    c736:	755a      	strb	r2, [r3, #21]
    c738:	22ff      	movs	r2, #255	; 0xff
    c73a:	759a      	strb	r2, [r3, #22]
    c73c:	75da      	strb	r2, [r3, #23]
    c73e:	22ff      	movs	r2, #255	; 0xff
    c740:	761a      	strb	r2, [r3, #24]
    c742:	765a      	strb	r2, [r3, #25]
    c744:	22ff      	movs	r2, #255	; 0xff
    c746:	771a      	strb	r2, [r3, #28]
    c748:	775a      	strb	r2, [r3, #29]
    c74a:	22ff      	movs	r2, #255	; 0xff
    c74c:	779a      	strb	r2, [r3, #30]
    c74e:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    c750:	2240      	movs	r2, #64	; 0x40
    c752:	4314      	orrs	r4, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    c754:	701c      	strb	r4, [r3, #0]
				dj->fs->wflag = 1;
    c756:	2301      	movs	r3, #1
    c758:	682a      	ldr	r2, [r5, #0]
				res = dir_next(dj, 0);	/* Next entry */
    c75a:	0028      	movs	r0, r5
				dj->fs->wflag = 1;
    c75c:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    c75e:	4bb5      	ldr	r3, [pc, #724]	; (ca34 <dir_register+0x71c>)
    c760:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    c762:	2800      	cmp	r0, #0
    c764:	d000      	beq.n	c768 <dir_register+0x450>
    c766:	e1f0      	b.n	cb4a <dir_register+0x832>
    c768:	465b      	mov	r3, fp
    c76a:	3b01      	subs	r3, #1
    c76c:	b29b      	uxth	r3, r3
    c76e:	469b      	mov	fp, r3
    c770:	2b00      	cmp	r3, #0
    c772:	d100      	bne.n	c776 <dir_register+0x45e>
    c774:	e189      	b.n	ca8a <dir_register+0x772>
				res = move_window(dj->fs, dj->sect);
    c776:	682c      	ldr	r4, [r5, #0]
    c778:	692b      	ldr	r3, [r5, #16]
	wsect = fs->winsect;
    c77a:	6b26      	ldr	r6, [r4, #48]	; 0x30
				res = move_window(dj->fs, dj->sect);
    c77c:	4699      	mov	r9, r3
	if (wsect != sector) {	/* Changed current window */
    c77e:	42b3      	cmp	r3, r6
    c780:	d012      	beq.n	c7a8 <dir_register+0x490>
		if (fs->wflag) {	/* Write back dirty window if needed */
    c782:	7923      	ldrb	r3, [r4, #4]
    c784:	2b00      	cmp	r3, #0
    c786:	d000      	beq.n	c78a <dir_register+0x472>
    c788:	e1bb      	b.n	cb02 <dir_register+0x7ea>
		if (sector) {
    c78a:	464b      	mov	r3, r9
    c78c:	2b00      	cmp	r3, #0
    c78e:	d00b      	beq.n	c7a8 <dir_register+0x490>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    c790:	0021      	movs	r1, r4
    c792:	7860      	ldrb	r0, [r4, #1]
    c794:	2301      	movs	r3, #1
    c796:	464a      	mov	r2, r9
    c798:	3134      	adds	r1, #52	; 0x34
    c79a:	4ea7      	ldr	r6, [pc, #668]	; (ca38 <dir_register+0x720>)
    c79c:	47b0      	blx	r6
    c79e:	2800      	cmp	r0, #0
    c7a0:	d000      	beq.n	c7a4 <dir_register+0x48c>
    c7a2:	e108      	b.n	c9b6 <dir_register+0x69e>
			fs->winsect = sector;
    c7a4:	464b      	mov	r3, r9
    c7a6:	6323      	str	r3, [r4, #48]	; 0x30
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    c7a8:	4669      	mov	r1, sp
    c7aa:	465a      	mov	r2, fp
    c7ac:	696b      	ldr	r3, [r5, #20]
    c7ae:	700a      	strb	r2, [r1, #0]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    c7b0:	790a      	ldrb	r2, [r1, #4]
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    c7b2:	69e8      	ldr	r0, [r5, #28]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    c7b4:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    c7b6:	220f      	movs	r2, #15
    c7b8:	72da      	strb	r2, [r3, #11]
	dir[LDIR_Type] = 0;
    c7ba:	2200      	movs	r2, #0
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    c7bc:	780c      	ldrb	r4, [r1, #0]
	dir[LDIR_Type] = 0;
    c7be:	731a      	strb	r2, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    c7c0:	1e61      	subs	r1, r4, #1
	ST_WORD(dir+LDIR_FstClusLO, 0);
    c7c2:	769a      	strb	r2, [r3, #26]
    c7c4:	76da      	strb	r2, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    c7c6:	004a      	lsls	r2, r1, #1
    c7c8:	1852      	adds	r2, r2, r1
    c7ca:	0092      	lsls	r2, r2, #2
    c7cc:	1852      	adds	r2, r2, r1
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c7ce:	0051      	lsls	r1, r2, #1
    c7d0:	4689      	mov	r9, r1
    c7d2:	5a41      	ldrh	r1, [r0, r1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c7d4:	0a0f      	lsrs	r7, r1, #8
    c7d6:	7059      	strb	r1, [r3, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c7d8:	3901      	subs	r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c7da:	709f      	strb	r7, [r3, #2]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c7dc:	b28f      	uxth	r7, r1
    c7de:	4997      	ldr	r1, [pc, #604]	; (ca3c <dir_register+0x724>)
    c7e0:	428f      	cmp	r7, r1
    c7e2:	d891      	bhi.n	c708 <dir_register+0x3f0>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c7e4:	3201      	adds	r2, #1
    c7e6:	0052      	lsls	r2, r2, #1
    c7e8:	5a87      	ldrh	r7, [r0, r2]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c7ea:	0a3e      	lsrs	r6, r7, #8
    c7ec:	70df      	strb	r7, [r3, #3]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c7ee:	3f01      	subs	r7, #1
    c7f0:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c7f2:	711e      	strb	r6, [r3, #4]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c7f4:	428f      	cmp	r7, r1
    c7f6:	d88a      	bhi.n	c70e <dir_register+0x3f6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c7f8:	1882      	adds	r2, r0, r2
    c7fa:	8857      	ldrh	r7, [r2, #2]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c7fc:	0a3e      	lsrs	r6, r7, #8
    c7fe:	715f      	strb	r7, [r3, #5]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c800:	3f01      	subs	r7, #1
    c802:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c804:	719e      	strb	r6, [r3, #6]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c806:	428f      	cmp	r7, r1
    c808:	d884      	bhi.n	c714 <dir_register+0x3fc>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c80a:	8897      	ldrh	r7, [r2, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c80c:	0a3e      	lsrs	r6, r7, #8
    c80e:	71df      	strb	r7, [r3, #7]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c810:	3f01      	subs	r7, #1
    c812:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c814:	721e      	strb	r6, [r3, #8]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c816:	428f      	cmp	r7, r1
    c818:	d900      	bls.n	c81c <dir_register+0x504>
    c81a:	e77e      	b.n	c71a <dir_register+0x402>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c81c:	88d7      	ldrh	r7, [r2, #6]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c81e:	0a3e      	lsrs	r6, r7, #8
    c820:	725f      	strb	r7, [r3, #9]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c822:	3f01      	subs	r7, #1
    c824:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c826:	729e      	strb	r6, [r3, #10]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c828:	428f      	cmp	r7, r1
    c82a:	d900      	bls.n	c82e <dir_register+0x516>
    c82c:	e778      	b.n	c720 <dir_register+0x408>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c82e:	8917      	ldrh	r7, [r2, #8]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c830:	0a3e      	lsrs	r6, r7, #8
    c832:	739f      	strb	r7, [r3, #14]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c834:	3f01      	subs	r7, #1
    c836:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c838:	73de      	strb	r6, [r3, #15]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c83a:	428f      	cmp	r7, r1
    c83c:	d900      	bls.n	c840 <dir_register+0x528>
    c83e:	e772      	b.n	c726 <dir_register+0x40e>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c840:	8957      	ldrh	r7, [r2, #10]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c842:	0a3e      	lsrs	r6, r7, #8
    c844:	741f      	strb	r7, [r3, #16]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c846:	3f01      	subs	r7, #1
    c848:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c84a:	745e      	strb	r6, [r3, #17]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c84c:	428f      	cmp	r7, r1
    c84e:	d900      	bls.n	c852 <dir_register+0x53a>
    c850:	e76c      	b.n	c72c <dir_register+0x414>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c852:	8997      	ldrh	r7, [r2, #12]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c854:	0a3e      	lsrs	r6, r7, #8
    c856:	749f      	strb	r7, [r3, #18]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c858:	3f01      	subs	r7, #1
    c85a:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c85c:	74de      	strb	r6, [r3, #19]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c85e:	428f      	cmp	r7, r1
    c860:	d900      	bls.n	c864 <dir_register+0x54c>
    c862:	e766      	b.n	c732 <dir_register+0x41a>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c864:	89d7      	ldrh	r7, [r2, #14]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c866:	0a3e      	lsrs	r6, r7, #8
    c868:	751f      	strb	r7, [r3, #20]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c86a:	3f01      	subs	r7, #1
    c86c:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c86e:	755e      	strb	r6, [r3, #21]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c870:	428f      	cmp	r7, r1
    c872:	d900      	bls.n	c876 <dir_register+0x55e>
    c874:	e760      	b.n	c738 <dir_register+0x420>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c876:	8a17      	ldrh	r7, [r2, #16]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c878:	0a3e      	lsrs	r6, r7, #8
    c87a:	759f      	strb	r7, [r3, #22]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c87c:	3f01      	subs	r7, #1
    c87e:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c880:	75de      	strb	r6, [r3, #23]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c882:	428f      	cmp	r7, r1
    c884:	d900      	bls.n	c888 <dir_register+0x570>
    c886:	e75a      	b.n	c73e <dir_register+0x426>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c888:	8a51      	ldrh	r1, [r2, #18]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c88a:	0a0f      	lsrs	r7, r1, #8
    c88c:	7619      	strb	r1, [r3, #24]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c88e:	3901      	subs	r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c890:	765f      	strb	r7, [r3, #25]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c892:	b28f      	uxth	r7, r1
    c894:	4969      	ldr	r1, [pc, #420]	; (ca3c <dir_register+0x724>)
    c896:	428f      	cmp	r7, r1
    c898:	d900      	bls.n	c89c <dir_register+0x584>
    c89a:	e753      	b.n	c744 <dir_register+0x42c>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c89c:	8a97      	ldrh	r7, [r2, #20]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c89e:	0a3e      	lsrs	r6, r7, #8
    c8a0:	771f      	strb	r7, [r3, #28]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c8a2:	3f01      	subs	r7, #1
    c8a4:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c8a6:	775e      	strb	r6, [r3, #29]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c8a8:	428f      	cmp	r7, r1
    c8aa:	d900      	bls.n	c8ae <dir_register+0x596>
    c8ac:	e74d      	b.n	c74a <dir_register+0x432>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    c8ae:	8ad2      	ldrh	r2, [r2, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c8b0:	0a17      	lsrs	r7, r2, #8
    c8b2:	779a      	strb	r2, [r3, #30]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c8b4:	3a01      	subs	r2, #1
    c8b6:	b292      	uxth	r2, r2
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    c8b8:	77df      	strb	r7, [r3, #31]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    c8ba:	428a      	cmp	r2, r1
    c8bc:	d900      	bls.n	c8c0 <dir_register+0x5a8>
    c8be:	e747      	b.n	c750 <dir_register+0x438>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    c8c0:	4448      	add	r0, r9
    c8c2:	8b42      	ldrh	r2, [r0, #26]
    c8c4:	2a00      	cmp	r2, #0
    c8c6:	d100      	bne.n	c8ca <dir_register+0x5b2>
    c8c8:	e742      	b.n	c750 <dir_register+0x438>
    c8ca:	e743      	b.n	c754 <dir_register+0x43c>
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    c8cc:	6933      	ldr	r3, [r6, #16]
    c8ce:	4699      	mov	r9, r3
    c8d0:	2b00      	cmp	r3, #0
    c8d2:	d100      	bne.n	c8d6 <dir_register+0x5be>
    c8d4:	e592      	b.n	c3fc <dir_register+0xe4>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    c8d6:	230f      	movs	r3, #15
    c8d8:	4023      	ands	r3, r4
    c8da:	4698      	mov	r8, r3
    c8dc:	d100      	bne.n	c8e0 <dir_register+0x5c8>
    c8de:	e0b7      	b.n	ca50 <dir_register+0x738>
    c8e0:	6837      	ldr	r7, [r6, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    c8e2:	4643      	mov	r3, r8
    c8e4:	015a      	lsls	r2, r3, #5
    c8e6:	003b      	movs	r3, r7
    c8e8:	3334      	adds	r3, #52	; 0x34
    c8ea:	189b      	adds	r3, r3, r2
	dj->index = i;
    c8ec:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    c8ee:	6173      	str	r3, [r6, #20]
    c8f0:	46a8      	mov	r8, r5
    c8f2:	e55e      	b.n	c3b2 <dir_register+0x9a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    c8f4:	7033      	strb	r3, [r6, #0]
    c8f6:	2301      	movs	r3, #1
    c8f8:	469c      	mov	ip, r3
	for (j = 0; j < i && dst[j] != ' '; j++) {
    c8fa:	2300      	movs	r3, #0
    c8fc:	e619      	b.n	c532 <dir_register+0x21a>
	} while (seq);
    c8fe:	2006      	movs	r0, #6
		ns[i--] = c;
    c900:	2205      	movs	r2, #5
    c902:	e5e7      	b.n	c4d4 <dir_register+0x1bc>
	} while (seq);
    c904:	2007      	movs	r0, #7
		ns[i--] = c;
    c906:	2206      	movs	r2, #6
    c908:	e5e4      	b.n	c4d4 <dir_register+0x1bc>
	} while (seq);
    c90a:	2005      	movs	r0, #5
		ns[i--] = c;
    c90c:	2204      	movs	r2, #4
    c90e:	e5e1      	b.n	c4d4 <dir_register+0x1bc>
    c910:	4b4b      	ldr	r3, [pc, #300]	; (ca40 <dir_register+0x728>)
    c912:	0038      	movs	r0, r7
    c914:	4798      	blx	r3
    c916:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
    c918:	0003      	movs	r3, r0
    c91a:	2801      	cmp	r0, #1
    c91c:	d800      	bhi.n	c920 <dir_register+0x608>
    c91e:	e0ac      	b.n	ca7a <dir_register+0x762>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    c920:	3301      	adds	r3, #1
    c922:	d048      	beq.n	c9b6 <dir_register+0x69e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    c924:	6837      	ldr	r7, [r6, #0]
    c926:	69fb      	ldr	r3, [r7, #28]
    c928:	4298      	cmp	r0, r3
    c92a:	d200      	bcs.n	c92e <dir_register+0x616>
    c92c:	e150      	b.n	cbd0 <dir_register+0x8b8>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    c92e:	4b45      	ldr	r3, [pc, #276]	; (ca44 <dir_register+0x72c>)
    c930:	68f1      	ldr	r1, [r6, #12]
    c932:	0038      	movs	r0, r7
    c934:	4798      	blx	r3
    c936:	4681      	mov	r9, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    c938:	1e03      	subs	r3, r0, #0
    c93a:	d100      	bne.n	c93e <dir_register+0x626>
    c93c:	e632      	b.n	c5a4 <dir_register+0x28c>
					if (clst == 1) return FR_INT_ERR;
    c93e:	2801      	cmp	r0, #1
    c940:	d100      	bne.n	c944 <dir_register+0x62c>
    c942:	e09a      	b.n	ca7a <dir_register+0x762>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    c944:	3301      	adds	r3, #1
    c946:	d036      	beq.n	c9b6 <dir_register+0x69e>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    c948:	2100      	movs	r1, #0
    c94a:	6830      	ldr	r0, [r6, #0]
    c94c:	4b3e      	ldr	r3, [pc, #248]	; (ca48 <dir_register+0x730>)
    c94e:	4798      	blx	r3
    c950:	2800      	cmp	r0, #0
    c952:	d130      	bne.n	c9b6 <dir_register+0x69e>
    c954:	2280      	movs	r2, #128	; 0x80
		*d++ = (BYTE)val;
    c956:	6830      	ldr	r0, [r6, #0]
    c958:	0092      	lsls	r2, r2, #2
    c95a:	2100      	movs	r1, #0
    c95c:	4b3b      	ldr	r3, [pc, #236]	; (ca4c <dir_register+0x734>)
    c95e:	3034      	adds	r0, #52	; 0x34
    c960:	4798      	blx	r3
	clst -= 2;
    c962:	2302      	movs	r3, #2
    c964:	425b      	negs	r3, r3
    c966:	444b      	add	r3, r9
    c968:	469b      	mov	fp, r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    c96a:	6832      	ldr	r2, [r6, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    c96c:	69d3      	ldr	r3, [r2, #28]
    c96e:	1e99      	subs	r1, r3, #2
    c970:	2300      	movs	r3, #0
    c972:	458b      	cmp	fp, r1
    c974:	d205      	bcs.n	c982 <dir_register+0x66a>
	return clst * fs->csize + fs->database;
    c976:	4659      	mov	r1, fp
    c978:	7893      	ldrb	r3, [r2, #2]
    c97a:	434b      	muls	r3, r1
    c97c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    c97e:	468c      	mov	ip, r1
    c980:	4463      	add	r3, ip
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    c982:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    c984:	6833      	ldr	r3, [r6, #0]
    c986:	2700      	movs	r7, #0
    c988:	789a      	ldrb	r2, [r3, #2]
    c98a:	2a00      	cmp	r2, #0
    c98c:	d10b      	bne.n	c9a6 <dir_register+0x68e>
    c98e:	e135      	b.n	cbfc <dir_register+0x8e4>
						dj->fs->winsect++;
    c990:	6832      	ldr	r2, [r6, #0]
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    c992:	3701      	adds	r7, #1
						dj->fs->winsect++;
    c994:	6b13      	ldr	r3, [r2, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    c996:	b2ff      	uxtb	r7, r7
						dj->fs->winsect++;
    c998:	3301      	adds	r3, #1
    c99a:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    c99c:	6833      	ldr	r3, [r6, #0]
    c99e:	789a      	ldrb	r2, [r3, #2]
    c9a0:	42ba      	cmp	r2, r7
    c9a2:	d800      	bhi.n	c9a6 <dir_register+0x68e>
    c9a4:	e12a      	b.n	cbfc <dir_register+0x8e4>
						dj->fs->wflag = 1;
    c9a6:	2201      	movs	r2, #1
    c9a8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    c9aa:	2100      	movs	r1, #0
    c9ac:	6830      	ldr	r0, [r6, #0]
    c9ae:	4b26      	ldr	r3, [pc, #152]	; (ca48 <dir_register+0x730>)
    c9b0:	4798      	blx	r3
    c9b2:	2800      	cmp	r0, #0
    c9b4:	d0ec      	beq.n	c990 <dir_register+0x678>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    c9b6:	2301      	movs	r3, #1
    c9b8:	469a      	mov	sl, r3
    c9ba:	e4c7      	b.n	c34c <dir_register+0x34>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    c9bc:	2334      	movs	r3, #52	; 0x34
    c9be:	469b      	mov	fp, r3
    c9c0:	44bb      	add	fp, r7
    c9c2:	7878      	ldrb	r0, [r7, #1]
    c9c4:	3b33      	subs	r3, #51	; 0x33
    c9c6:	0022      	movs	r2, r4
    c9c8:	4659      	mov	r1, fp
    c9ca:	4d19      	ldr	r5, [pc, #100]	; (ca30 <dir_register+0x718>)
    c9cc:	47a8      	blx	r5
    c9ce:	2800      	cmp	r0, #0
    c9d0:	d1f1      	bne.n	c9b6 <dir_register+0x69e>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    c9d2:	6a3b      	ldr	r3, [r7, #32]
    c9d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
			fs->wflag = 0;
    c9d6:	7138      	strb	r0, [r7, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    c9d8:	189a      	adds	r2, r3, r2
    c9da:	4294      	cmp	r4, r2
    c9dc:	d300      	bcc.n	c9e0 <dir_register+0x6c8>
    c9de:	e4ef      	b.n	c3c0 <dir_register+0xa8>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    c9e0:	78fd      	ldrb	r5, [r7, #3]
    c9e2:	2d01      	cmp	r5, #1
    c9e4:	d800      	bhi.n	c9e8 <dir_register+0x6d0>
    c9e6:	e4eb      	b.n	c3c0 <dir_register+0xa8>
    c9e8:	4659      	mov	r1, fp
    c9ea:	46b3      	mov	fp, r6
    c9ec:	9102      	str	r1, [sp, #8]
    c9ee:	e001      	b.n	c9f4 <dir_register+0x6dc>
    c9f0:	6a3b      	ldr	r3, [r7, #32]
    c9f2:	9902      	ldr	r1, [sp, #8]
					wsect += fs->fsize;
    c9f4:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    c9f6:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    c9f8:	7878      	ldrb	r0, [r7, #1]
    c9fa:	2301      	movs	r3, #1
    c9fc:	0022      	movs	r2, r4
    c9fe:	4e0c      	ldr	r6, [pc, #48]	; (ca30 <dir_register+0x718>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ca00:	b2ed      	uxtb	r5, r5
					disk_write(fs->drv, fs->win, wsect, 1);
    ca02:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    ca04:	2d01      	cmp	r5, #1
    ca06:	d1f3      	bne.n	c9f0 <dir_register+0x6d8>
    ca08:	465e      	mov	r6, fp
    ca0a:	e4d9      	b.n	c3c0 <dir_register+0xa8>
	for (j = 0; j < i && dst[j] != ' '; j++) {
    ca0c:	2304      	movs	r3, #4
    ca0e:	e58c      	b.n	c52a <dir_register+0x212>
    ca10:	2303      	movs	r3, #3
    ca12:	e58a      	b.n	c52a <dir_register+0x212>
    ca14:	2302      	movs	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    ca16:	1c5f      	adds	r7, r3, #1
    ca18:	46bc      	mov	ip, r7
    ca1a:	277e      	movs	r7, #126	; 0x7e
    ca1c:	700f      	strb	r7, [r1, #0]
    ca1e:	e588      	b.n	c532 <dir_register+0x21a>
	for (j = 0; j < i && dst[j] != ' '; j++) {
    ca20:	3b01      	subs	r3, #1
    ca22:	e7f8      	b.n	ca16 <dir_register+0x6fe>
    ca24:	2303      	movs	r3, #3
    ca26:	e7f6      	b.n	ca16 <dir_register+0x6fe>
    ca28:	2301      	movs	r3, #1
    ca2a:	e7f4      	b.n	ca16 <dir_register+0x6fe>
    ca2c:	2304      	movs	r3, #4
    ca2e:	e7f2      	b.n	ca16 <dir_register+0x6fe>
    ca30:	00009dc1 	.word	0x00009dc1
    ca34:	0000b5ed 	.word	0x0000b5ed
    ca38:	00009d3d 	.word	0x00009d3d
    ca3c:	0000fffd 	.word	0x0000fffd
    ca40:	0000ae05 	.word	0x0000ae05
    ca44:	0000b1cd 	.word	0x0000b1cd
    ca48:	0000a1e1 	.word	0x0000a1e1
    ca4c:	00028a1d 	.word	0x00028a1d
		dj->sect++;					/* Next sector */
    ca50:	2301      	movs	r3, #1
    ca52:	469c      	mov	ip, r3
    ca54:	44e1      	add	r9, ip
    ca56:	464b      	mov	r3, r9
		if (dj->clust == 0) {	/* Static table */
    ca58:	68f1      	ldr	r1, [r6, #12]
		dj->sect++;					/* Next sector */
    ca5a:	6133      	str	r3, [r6, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    ca5c:	6837      	ldr	r7, [r6, #0]
		if (dj->clust == 0) {	/* Static table */
    ca5e:	2900      	cmp	r1, #0
    ca60:	d00e      	beq.n	ca80 <dir_register+0x768>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    ca62:	78bb      	ldrb	r3, [r7, #2]
    ca64:	0922      	lsrs	r2, r4, #4
    ca66:	3b01      	subs	r3, #1
    ca68:	421a      	tst	r2, r3
    ca6a:	d000      	beq.n	ca6e <dir_register+0x756>
    ca6c:	e739      	b.n	c8e2 <dir_register+0x5ca>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    ca6e:	2901      	cmp	r1, #1
    ca70:	d903      	bls.n	ca7a <dir_register+0x762>
    ca72:	69fb      	ldr	r3, [r7, #28]
    ca74:	4299      	cmp	r1, r3
    ca76:	d200      	bcs.n	ca7a <dir_register+0x762>
    ca78:	e74a      	b.n	c910 <dir_register+0x5f8>
		return FR_NO_FILE;
    ca7a:	2302      	movs	r3, #2
    ca7c:	469a      	mov	sl, r3
    ca7e:	e465      	b.n	c34c <dir_register+0x34>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    ca80:	893b      	ldrh	r3, [r7, #8]
    ca82:	42a3      	cmp	r3, r4
    ca84:	d800      	bhi.n	ca88 <dir_register+0x770>
    ca86:	e4b9      	b.n	c3fc <dir_register+0xe4>
    ca88:	e72b      	b.n	c8e2 <dir_register+0x5ca>
    ca8a:	46ab      	mov	fp, r5
		res = move_window(dj->fs, dj->sect);
    ca8c:	465b      	mov	r3, fp
    ca8e:	681c      	ldr	r4, [r3, #0]
    ca90:	691f      	ldr	r7, [r3, #16]
	wsect = fs->winsect;
    ca92:	6b25      	ldr	r5, [r4, #48]	; 0x30
	if (wsect != sector) {	/* Changed current window */
    ca94:	42af      	cmp	r7, r5
    ca96:	d004      	beq.n	caa2 <dir_register+0x78a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    ca98:	7923      	ldrb	r3, [r4, #4]
    ca9a:	2b00      	cmp	r3, #0
    ca9c:	d164      	bne.n	cb68 <dir_register+0x850>
		if (sector) {
    ca9e:	2f00      	cmp	r7, #0
    caa0:	d156      	bne.n	cb50 <dir_register+0x838>
			dir = dj->dir;
    caa2:	465b      	mov	r3, fp
    caa4:	695c      	ldr	r4, [r3, #20]
    caa6:	2220      	movs	r2, #32
    caa8:	2100      	movs	r1, #0
    caaa:	4b57      	ldr	r3, [pc, #348]	; (cc08 <dir_register+0x8f0>)
    caac:	0020      	movs	r0, r4
    caae:	4798      	blx	r3
    cab0:	2200      	movs	r2, #0
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    cab2:	465b      	mov	r3, fp
    cab4:	0010      	movs	r0, r2
    cab6:	699b      	ldr	r3, [r3, #24]
    cab8:	1d19      	adds	r1, r3, #4
    caba:	428c      	cmp	r4, r1
    cabc:	4150      	adcs	r0, r2
    cabe:	0001      	movs	r1, r0
    cac0:	1d20      	adds	r0, r4, #4
    cac2:	4283      	cmp	r3, r0
    cac4:	4152      	adcs	r2, r2
    cac6:	430a      	orrs	r2, r1
    cac8:	b2d2      	uxtb	r2, r2
    caca:	2a00      	cmp	r2, #0
    cacc:	d06f      	beq.n	cbae <dir_register+0x896>
    cace:	001a      	movs	r2, r3
    cad0:	4322      	orrs	r2, r4
    cad2:	0792      	lsls	r2, r2, #30
    cad4:	d16b      	bne.n	cbae <dir_register+0x896>
		*d++ = *s++;
    cad6:	681a      	ldr	r2, [r3, #0]
    cad8:	6022      	str	r2, [r4, #0]
    cada:	685a      	ldr	r2, [r3, #4]
    cadc:	6062      	str	r2, [r4, #4]
    cade:	7a1a      	ldrb	r2, [r3, #8]
    cae0:	7222      	strb	r2, [r4, #8]
    cae2:	7a5a      	ldrb	r2, [r3, #9]
    cae4:	7262      	strb	r2, [r4, #9]
    cae6:	7a9b      	ldrb	r3, [r3, #10]
    cae8:	72a3      	strb	r3, [r4, #10]
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    caea:	465b      	mov	r3, fp
    caec:	699b      	ldr	r3, [r3, #24]
    caee:	7ada      	ldrb	r2, [r3, #11]
    caf0:	2318      	movs	r3, #24
    caf2:	4013      	ands	r3, r2
    caf4:	7323      	strb	r3, [r4, #12]
			dj->fs->wflag = 1;
    caf6:	465b      	mov	r3, fp
    caf8:	2201      	movs	r2, #1
    cafa:	681b      	ldr	r3, [r3, #0]
    cafc:	711a      	strb	r2, [r3, #4]
    cafe:	f7ff fc25 	bl	c34c <dir_register+0x34>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    cb02:	2334      	movs	r3, #52	; 0x34
    cb04:	469c      	mov	ip, r3
    cb06:	44a4      	add	ip, r4
    cb08:	4663      	mov	r3, ip
    cb0a:	9300      	str	r3, [sp, #0]
    cb0c:	4661      	mov	r1, ip
    cb0e:	7860      	ldrb	r0, [r4, #1]
    cb10:	2301      	movs	r3, #1
    cb12:	0032      	movs	r2, r6
    cb14:	47c0      	blx	r8
    cb16:	2800      	cmp	r0, #0
    cb18:	d000      	beq.n	cb1c <dir_register+0x804>
    cb1a:	e74c      	b.n	c9b6 <dir_register+0x69e>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    cb1c:	6a23      	ldr	r3, [r4, #32]
    cb1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    cb20:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    cb22:	189a      	adds	r2, r3, r2
    cb24:	4296      	cmp	r6, r2
    cb26:	d300      	bcc.n	cb2a <dir_register+0x812>
    cb28:	e62f      	b.n	c78a <dir_register+0x472>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cb2a:	78e7      	ldrb	r7, [r4, #3]
    cb2c:	2f01      	cmp	r7, #1
    cb2e:	d801      	bhi.n	cb34 <dir_register+0x81c>
    cb30:	e62b      	b.n	c78a <dir_register+0x472>
    cb32:	6a23      	ldr	r3, [r4, #32]
					wsect += fs->fsize;
    cb34:	18f6      	adds	r6, r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cb36:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    cb38:	7860      	ldrb	r0, [r4, #1]
    cb3a:	2301      	movs	r3, #1
    cb3c:	0032      	movs	r2, r6
    cb3e:	9900      	ldr	r1, [sp, #0]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cb40:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    cb42:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cb44:	2f01      	cmp	r7, #1
    cb46:	d1f4      	bne.n	cb32 <dir_register+0x81a>
    cb48:	e61f      	b.n	c78a <dir_register+0x472>
				res = dir_next(dj, 0);	/* Next entry */
    cb4a:	4682      	mov	sl, r0
    cb4c:	f7ff fbfe 	bl	c34c <dir_register+0x34>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    cb50:	0021      	movs	r1, r4
    cb52:	7860      	ldrb	r0, [r4, #1]
    cb54:	2301      	movs	r3, #1
    cb56:	003a      	movs	r2, r7
    cb58:	3134      	adds	r1, #52	; 0x34
    cb5a:	4d2c      	ldr	r5, [pc, #176]	; (cc0c <dir_register+0x8f4>)
    cb5c:	47a8      	blx	r5
    cb5e:	2800      	cmp	r0, #0
    cb60:	d000      	beq.n	cb64 <dir_register+0x84c>
    cb62:	e728      	b.n	c9b6 <dir_register+0x69e>
			fs->winsect = sector;
    cb64:	6327      	str	r7, [r4, #48]	; 0x30
    cb66:	e79c      	b.n	caa2 <dir_register+0x78a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    cb68:	2334      	movs	r3, #52	; 0x34
    cb6a:	4698      	mov	r8, r3
    cb6c:	4e28      	ldr	r6, [pc, #160]	; (cc10 <dir_register+0x8f8>)
    cb6e:	44a0      	add	r8, r4
    cb70:	7860      	ldrb	r0, [r4, #1]
    cb72:	3b33      	subs	r3, #51	; 0x33
    cb74:	002a      	movs	r2, r5
    cb76:	4641      	mov	r1, r8
    cb78:	46b1      	mov	r9, r6
    cb7a:	47b0      	blx	r6
    cb7c:	2800      	cmp	r0, #0
    cb7e:	d000      	beq.n	cb82 <dir_register+0x86a>
    cb80:	e719      	b.n	c9b6 <dir_register+0x69e>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    cb82:	6a23      	ldr	r3, [r4, #32]
    cb84:	6a62      	ldr	r2, [r4, #36]	; 0x24
			fs->wflag = 0;
    cb86:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    cb88:	189a      	adds	r2, r3, r2
    cb8a:	4295      	cmp	r5, r2
    cb8c:	d287      	bcs.n	ca9e <dir_register+0x786>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cb8e:	78e6      	ldrb	r6, [r4, #3]
    cb90:	2e01      	cmp	r6, #1
    cb92:	d801      	bhi.n	cb98 <dir_register+0x880>
    cb94:	e783      	b.n	ca9e <dir_register+0x786>
    cb96:	6a23      	ldr	r3, [r4, #32]
					wsect += fs->fsize;
    cb98:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cb9a:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    cb9c:	7860      	ldrb	r0, [r4, #1]
    cb9e:	2301      	movs	r3, #1
    cba0:	002a      	movs	r2, r5
    cba2:	4641      	mov	r1, r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cba4:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    cba6:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cba8:	2e01      	cmp	r6, #1
    cbaa:	d1f4      	bne.n	cb96 <dir_register+0x87e>
    cbac:	e777      	b.n	ca9e <dir_register+0x786>
		*d++ = *s++;
    cbae:	781a      	ldrb	r2, [r3, #0]
    cbb0:	7022      	strb	r2, [r4, #0]
    cbb2:	785a      	ldrb	r2, [r3, #1]
    cbb4:	7062      	strb	r2, [r4, #1]
    cbb6:	789a      	ldrb	r2, [r3, #2]
    cbb8:	70a2      	strb	r2, [r4, #2]
    cbba:	78da      	ldrb	r2, [r3, #3]
    cbbc:	70e2      	strb	r2, [r4, #3]
    cbbe:	791a      	ldrb	r2, [r3, #4]
    cbc0:	7122      	strb	r2, [r4, #4]
    cbc2:	795a      	ldrb	r2, [r3, #5]
    cbc4:	7162      	strb	r2, [r4, #5]
    cbc6:	799a      	ldrb	r2, [r3, #6]
    cbc8:	71a2      	strb	r2, [r4, #6]
    cbca:	79da      	ldrb	r2, [r3, #7]
    cbcc:	71e2      	strb	r2, [r4, #7]
    cbce:	e786      	b.n	cade <dir_register+0x7c6>
    cbd0:	2302      	movs	r3, #2
    cbd2:	425b      	negs	r3, r3
    cbd4:	444b      	add	r3, r9
    cbd6:	469b      	mov	fp, r3
				dj->clust = clst;				/* Initialize data for new cluster */
    cbd8:	464b      	mov	r3, r9
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    cbda:	2200      	movs	r2, #0
				dj->clust = clst;				/* Initialize data for new cluster */
    cbdc:	60f3      	str	r3, [r6, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    cbde:	69fb      	ldr	r3, [r7, #28]
    cbe0:	4691      	mov	r9, r2
    cbe2:	3b02      	subs	r3, #2
    cbe4:	455b      	cmp	r3, fp
    cbe6:	d906      	bls.n	cbf6 <dir_register+0x8de>
	return clst * fs->csize + fs->database;
    cbe8:	465a      	mov	r2, fp
    cbea:	78bb      	ldrb	r3, [r7, #2]
    cbec:	435a      	muls	r2, r3
    cbee:	0013      	movs	r3, r2
    cbf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cbf2:	4691      	mov	r9, r2
    cbf4:	4499      	add	r9, r3
				dj->sect = clust2sect(dj->fs, clst);
    cbf6:	464b      	mov	r3, r9
    cbf8:	6133      	str	r3, [r6, #16]
    cbfa:	e672      	b.n	c8e2 <dir_register+0x5ca>
					dj->fs->winsect -= c;						/* Rewind window address */
    cbfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    cbfe:	1bd7      	subs	r7, r2, r7
    cc00:	631f      	str	r7, [r3, #48]	; 0x30
    cc02:	6837      	ldr	r7, [r6, #0]
    cc04:	e7e8      	b.n	cbd8 <dir_register+0x8c0>
    cc06:	46c0      	nop			; (mov r8, r8)
    cc08:	00028a1d 	.word	0x00028a1d
    cc0c:	00009d3d 	.word	0x00009d3d
    cc10:	00009dc1 	.word	0x00009dc1

0000cc14 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    cc14:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    cc16:	2800      	cmp	r0, #0
    cc18:	d001      	beq.n	cc1e <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    cc1a:	0018      	movs	r0, r3
    cc1c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    cc1e:	4b06      	ldr	r3, [pc, #24]	; (cc38 <f_mount+0x24>)
    cc20:	681a      	ldr	r2, [r3, #0]
	if (rfs) {
    cc22:	2a00      	cmp	r2, #0
    cc24:	d000      	beq.n	cc28 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
    cc26:	7010      	strb	r0, [r2, #0]
	if (fs) {
    cc28:	2900      	cmp	r1, #0
    cc2a:	d001      	beq.n	cc30 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    cc2c:	2200      	movs	r2, #0
    cc2e:	700a      	strb	r2, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    cc30:	6019      	str	r1, [r3, #0]
	return FR_OK;
    cc32:	2300      	movs	r3, #0
    cc34:	e7f1      	b.n	cc1a <f_mount+0x6>
    cc36:	46c0      	nop			; (mov r8, r8)
    cc38:	20000ca4 	.word	0x20000ca4

0000cc3c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc3e:	4657      	mov	r7, sl
    cc40:	464e      	mov	r6, r9
    cc42:	4645      	mov	r5, r8
    cc44:	46de      	mov	lr, fp
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    cc46:	2300      	movs	r3, #0
{
    cc48:	b5e0      	push	{r5, r6, r7, lr}

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    cc4a:	261f      	movs	r6, #31
	fp->fs = 0;			/* Clear file object */
    cc4c:	6003      	str	r3, [r0, #0]
{
    cc4e:	4cbe      	ldr	r4, [pc, #760]	; (cf48 <f_open+0x30c>)
	vol = p[0] - '0';					/* Is there a drive number? */
    cc50:	780b      	ldrb	r3, [r1, #0]
{
    cc52:	44a5      	add	sp, r4
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    cc54:	4016      	ands	r6, r2
	vol = p[0] - '0';					/* Is there a drive number? */
    cc56:	3b30      	subs	r3, #48	; 0x30
{
    cc58:	0005      	movs	r5, r0
    cc5a:	000c      	movs	r4, r1
    cc5c:	0017      	movs	r7, r2
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    cc5e:	9601      	str	r6, [sp, #4]
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    cc60:	2b09      	cmp	r3, #9
    cc62:	d803      	bhi.n	cc6c <f_open+0x30>
    cc64:	784a      	ldrb	r2, [r1, #1]
    cc66:	2a3a      	cmp	r2, #58	; 0x3a
    cc68:	d100      	bne.n	cc6c <f_open+0x30>
    cc6a:	e093      	b.n	cd94 <f_open+0x158>
		vol = CurrVol;					/* Use current drive */
    cc6c:	4bb7      	ldr	r3, [pc, #732]	; (cf4c <f_open+0x310>)
    cc6e:	781b      	ldrb	r3, [r3, #0]
		return FR_INVALID_DRIVE;
    cc70:	220b      	movs	r2, #11
    cc72:	4690      	mov	r8, r2
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    cc74:	2b00      	cmp	r3, #0
    cc76:	d014      	beq.n	cca2 <f_open+0x66>
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    cc78:	ab09      	add	r3, sp, #36	; 0x24
    cc7a:	4699      	mov	r9, r3
    cc7c:	aa06      	add	r2, sp, #24
    cc7e:	920f      	str	r2, [sp, #60]	; 0x3c
    cc80:	464a      	mov	r2, r9
    cc82:	ab12      	add	r3, sp, #72	; 0x48
    cc84:	61d3      	str	r3, [r2, #28]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    cc86:	231c      	movs	r3, #28
    cc88:	423b      	tst	r3, r7
    cc8a:	d000      	beq.n	cc8e <f_open+0x52>
    cc8c:	e070      	b.n	cd70 <f_open+0x134>
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
    cc8e:	4640      	mov	r0, r8
    cc90:	2393      	movs	r3, #147	; 0x93
    cc92:	009b      	lsls	r3, r3, #2
    cc94:	449d      	add	sp, r3
    cc96:	bc3c      	pop	{r2, r3, r4, r5}
    cc98:	4690      	mov	r8, r2
    cc9a:	4699      	mov	r9, r3
    cc9c:	46a2      	mov	sl, r4
    cc9e:	46ab      	mov	fp, r5
    cca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    cca2:	4bab      	ldr	r3, [pc, #684]	; (cf50 <f_open+0x314>)
    cca4:	681b      	ldr	r3, [r3, #0]
    cca6:	4699      	mov	r9, r3
    cca8:	9309      	str	r3, [sp, #36]	; 0x24
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    ccaa:	2b00      	cmp	r3, #0
    ccac:	d100      	bne.n	ccb0 <f_open+0x74>
    ccae:	e09e      	b.n	cdee <f_open+0x1b2>
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    ccb0:	231e      	movs	r3, #30
    ccb2:	403b      	ands	r3, r7
    ccb4:	469a      	mov	sl, r3
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    ccb6:	464b      	mov	r3, r9
    ccb8:	781b      	ldrb	r3, [r3, #0]
    ccba:	2b00      	cmp	r3, #0
    ccbc:	d06c      	beq.n	cd98 <f_open+0x15c>
		stat = disk_status(fs->drv);
    ccbe:	464b      	mov	r3, r9
    ccc0:	7858      	ldrb	r0, [r3, #1]
    ccc2:	4ba4      	ldr	r3, [pc, #656]	; (cf54 <f_open+0x318>)
    ccc4:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    ccc6:	07c3      	lsls	r3, r0, #31
    ccc8:	d466      	bmi.n	cd98 <f_open+0x15c>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    ccca:	4653      	mov	r3, sl
    cccc:	2b00      	cmp	r3, #0
    ccce:	d001      	beq.n	ccd4 <f_open+0x98>
    ccd0:	0743      	lsls	r3, r0, #29
    ccd2:	d472      	bmi.n	cdba <f_open+0x17e>
	INIT_BUF(dj);
    ccd4:	ab09      	add	r3, sp, #36	; 0x24
    ccd6:	4699      	mov	r9, r3
    ccd8:	aa06      	add	r2, sp, #24
    ccda:	920f      	str	r2, [sp, #60]	; 0x3c
    ccdc:	464a      	mov	r2, r9
    ccde:	ab12      	add	r3, sp, #72	; 0x48
    cce0:	61d3      	str	r3, [r2, #28]
		res = follow_path(&dj, path);	/* Follow the file path */
    cce2:	0021      	movs	r1, r4
    cce4:	4b9c      	ldr	r3, [pc, #624]	; (cf58 <f_open+0x31c>)
    cce6:	4648      	mov	r0, r9
    cce8:	4798      	blx	r3
	dir = dj.dir;
    ccea:	464b      	mov	r3, r9
		res = follow_path(&dj, path);	/* Follow the file path */
    ccec:	4680      	mov	r8, r0
	dir = dj.dir;
    ccee:	695c      	ldr	r4, [r3, #20]
	if (res == FR_OK) {
    ccf0:	2800      	cmp	r0, #0
    ccf2:	d139      	bne.n	cd68 <f_open+0x12c>
		if (!dir)	/* Current dir itself */
    ccf4:	2c00      	cmp	r4, #0
    ccf6:	d07d      	beq.n	cdf4 <f_open+0x1b8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    ccf8:	231c      	movs	r3, #28
    ccfa:	423b      	tst	r3, r7
    ccfc:	d060      	beq.n	cdc0 <f_open+0x184>
				res = FR_DENIED;
    ccfe:	2107      	movs	r1, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    cd00:	2211      	movs	r2, #17
    cd02:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_DENIED;
    cd04:	4688      	mov	r8, r1
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    cd06:	421a      	tst	r2, r3
    cd08:	d1c1      	bne.n	cc8e <f_open+0x52>
					res = FR_EXIST;
    cd0a:	2308      	movs	r3, #8
    cd0c:	4698      	mov	r8, r3
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    cd0e:	077b      	lsls	r3, r7, #29
    cd10:	d4bd      	bmi.n	cc8e <f_open+0x52>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    cd12:	9b01      	ldr	r3, [sp, #4]
    cd14:	071b      	lsls	r3, r3, #28
    cd16:	d470      	bmi.n	cdfa <f_open+0x1be>
    cd18:	9f09      	ldr	r7, [sp, #36]	; 0x24
    cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cd1c:	4698      	mov	r8, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    cd1e:	4643      	mov	r3, r8
    cd20:	61eb      	str	r3, [r5, #28]
		fp->flag = mode;					/* File access mode */
    cd22:	466b      	mov	r3, sp
    cd24:	791b      	ldrb	r3, [r3, #4]
		fp->dir_ptr = dir;
    cd26:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
    cd28:	71ab      	strb	r3, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    cd2a:	7d62      	ldrb	r2, [r4, #21]
    cd2c:	7d23      	ldrb	r3, [r4, #20]
    cd2e:	7ee1      	ldrb	r1, [r4, #27]
    cd30:	0212      	lsls	r2, r2, #8
    cd32:	4313      	orrs	r3, r2
    cd34:	7ea2      	ldrb	r2, [r4, #26]
    cd36:	0209      	lsls	r1, r1, #8
    cd38:	430a      	orrs	r2, r1
    cd3a:	041b      	lsls	r3, r3, #16
    cd3c:	4313      	orrs	r3, r2
    cd3e:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    cd40:	7f62      	ldrb	r2, [r4, #29]
    cd42:	7f23      	ldrb	r3, [r4, #28]
    cd44:	0212      	lsls	r2, r2, #8
    cd46:	431a      	orrs	r2, r3
    cd48:	7fa3      	ldrb	r3, [r4, #30]
    cd4a:	041b      	lsls	r3, r3, #16
    cd4c:	431a      	orrs	r2, r3
    cd4e:	7fe3      	ldrb	r3, [r4, #31]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    cd50:	602f      	str	r7, [r5, #0]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    cd52:	061b      	lsls	r3, r3, #24
    cd54:	4313      	orrs	r3, r2
    cd56:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    cd58:	2300      	movs	r3, #0
    cd5a:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    cd5c:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    cd5e:	88fb      	ldrh	r3, [r7, #6]
    cd60:	80ab      	strh	r3, [r5, #4]
    cd62:	2300      	movs	r3, #0
    cd64:	4698      	mov	r8, r3
    cd66:	e792      	b.n	cc8e <f_open+0x52>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    cd68:	231c      	movs	r3, #28
    cd6a:	421f      	tst	r7, r3
    cd6c:	d100      	bne.n	cd70 <f_open+0x134>
    cd6e:	e78e      	b.n	cc8e <f_open+0x52>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    cd70:	4643      	mov	r3, r8
    cd72:	2b04      	cmp	r3, #4
    cd74:	d000      	beq.n	cd78 <f_open+0x13c>
    cd76:	e78a      	b.n	cc8e <f_open+0x52>
				res = dir_register(&dj);
    cd78:	4648      	mov	r0, r9
    cd7a:	4b78      	ldr	r3, [pc, #480]	; (cf5c <f_open+0x320>)
    cd7c:	4798      	blx	r3
    cd7e:	ab09      	add	r3, sp, #36	; 0x24
    cd80:	4699      	mov	r9, r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    cd82:	2308      	movs	r3, #8
    cd84:	9a01      	ldr	r2, [sp, #4]
				res = dir_register(&dj);
    cd86:	4680      	mov	r8, r0
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    cd88:	431a      	orrs	r2, r3
    cd8a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    cd8c:	9201      	str	r2, [sp, #4]
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    cd8e:	2800      	cmp	r0, #0
    cd90:	d0bf      	beq.n	cd12 <f_open+0xd6>
    cd92:	e77c      	b.n	cc8e <f_open+0x52>
		p += 2; *path = p;				/* Return pointer to the path name */
    cd94:	3402      	adds	r4, #2
    cd96:	e76b      	b.n	cc70 <f_open+0x34>
	fs->fs_type = 0;					/* Clear the file system object */
    cd98:	2300      	movs	r3, #0
    cd9a:	464a      	mov	r2, r9
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    cd9c:	2000      	movs	r0, #0
	fs->fs_type = 0;					/* Clear the file system object */
    cd9e:	7013      	strb	r3, [r2, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    cda0:	7053      	strb	r3, [r2, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    cda2:	4b6f      	ldr	r3, [pc, #444]	; (cf60 <f_open+0x324>)
    cda4:	4798      	blx	r3
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    cda6:	2303      	movs	r3, #3
    cda8:	4698      	mov	r8, r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    cdaa:	07c3      	lsls	r3, r0, #31
    cdac:	d500      	bpl.n	cdb0 <f_open+0x174>
    cdae:	e763      	b.n	cc78 <f_open+0x3c>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    cdb0:	4653      	mov	r3, sl
    cdb2:	2b00      	cmp	r3, #0
    cdb4:	d074      	beq.n	cea0 <f_open+0x264>
    cdb6:	0743      	lsls	r3, r0, #29
    cdb8:	d572      	bpl.n	cea0 <f_open+0x264>
				return FR_WRITE_PROTECTED;
    cdba:	230a      	movs	r3, #10
    cdbc:	4698      	mov	r8, r3
    cdbe:	e75b      	b.n	cc78 <f_open+0x3c>
				res = FR_NO_FILE;
    cdc0:	2204      	movs	r2, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    cdc2:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    cdc4:	4690      	mov	r8, r2
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    cdc6:	06da      	lsls	r2, r3, #27
    cdc8:	d500      	bpl.n	cdcc <f_open+0x190>
    cdca:	e760      	b.n	cc8e <f_open+0x52>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    cdcc:	07ba      	lsls	r2, r7, #30
    cdce:	d504      	bpl.n	cdda <f_open+0x19e>
				res = FR_DENIED;
    cdd0:	2207      	movs	r2, #7
    cdd2:	4690      	mov	r8, r2
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    cdd4:	07db      	lsls	r3, r3, #31
    cdd6:	d500      	bpl.n	cdda <f_open+0x19e>
    cdd8:	e759      	b.n	cc8e <f_open+0x52>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    cdda:	073b      	lsls	r3, r7, #28
    cddc:	d59c      	bpl.n	cd18 <f_open+0xdc>
    cdde:	9f09      	ldr	r7, [sp, #36]	; 0x24
    cde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cde2:	4698      	mov	r8, r3
			mode |= FA__WRITTEN;
    cde4:	2320      	movs	r3, #32
    cde6:	9a01      	ldr	r2, [sp, #4]
    cde8:	431a      	orrs	r2, r3
    cdea:	9201      	str	r2, [sp, #4]
    cdec:	e797      	b.n	cd1e <f_open+0xe2>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    cdee:	230c      	movs	r3, #12
    cdf0:	4698      	mov	r8, r3
    cdf2:	e741      	b.n	cc78 <f_open+0x3c>
			res = FR_INVALID_NAME;
    cdf4:	2306      	movs	r3, #6
    cdf6:	4698      	mov	r8, r3
    cdf8:	e749      	b.n	cc8e <f_open+0x52>
			dw = get_fattime();					/* Created time */
    cdfa:	4b5a      	ldr	r3, [pc, #360]	; (cf64 <f_open+0x328>)
    cdfc:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    cdfe:	0a03      	lsrs	r3, r0, #8
    ce00:	73e3      	strb	r3, [r4, #15]
    ce02:	0c03      	lsrs	r3, r0, #16
    ce04:	7423      	strb	r3, [r4, #16]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    ce06:	2300      	movs	r3, #0
			cl = LD_CLUST(dir);					/* Get start cluster */
    ce08:	7d61      	ldrb	r1, [r4, #21]
    ce0a:	7d22      	ldrb	r2, [r4, #20]
			ST_DWORD(dir+DIR_CrtTime, dw);
    ce0c:	73a0      	strb	r0, [r4, #14]
    ce0e:	0e00      	lsrs	r0, r0, #24
    ce10:	7460      	strb	r0, [r4, #17]
			cl = LD_CLUST(dir);					/* Get start cluster */
    ce12:	0209      	lsls	r1, r1, #8
    ce14:	7ee0      	ldrb	r0, [r4, #27]
    ce16:	430a      	orrs	r2, r1
    ce18:	7ea1      	ldrb	r1, [r4, #26]
    ce1a:	0200      	lsls	r0, r0, #8
    ce1c:	0412      	lsls	r2, r2, #16
    ce1e:	4301      	orrs	r1, r0
			dj.fs->wflag = 1;
    ce20:	9f09      	ldr	r7, [sp, #36]	; 0x24
			dir[DIR_Attr] = 0;					/* Reset attribute */
    ce22:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    ce24:	7723      	strb	r3, [r4, #28]
    ce26:	7763      	strb	r3, [r4, #29]
    ce28:	77a3      	strb	r3, [r4, #30]
    ce2a:	77e3      	strb	r3, [r4, #31]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    ce2c:	76a3      	strb	r3, [r4, #26]
    ce2e:	76e3      	strb	r3, [r4, #27]
    ce30:	7523      	strb	r3, [r4, #20]
    ce32:	7563      	strb	r3, [r4, #21]
			cl = LD_CLUST(dir);					/* Get start cluster */
    ce34:	430a      	orrs	r2, r1
			dj.fs->wflag = 1;
    ce36:	3301      	adds	r3, #1
			cl = LD_CLUST(dir);					/* Get start cluster */
    ce38:	4693      	mov	fp, r2
			dj.fs->wflag = 1;
    ce3a:	713b      	strb	r3, [r7, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    ce3c:	2a00      	cmp	r2, #0
    ce3e:	d0cf      	beq.n	cde0 <f_open+0x1a4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    ce40:	2a01      	cmp	r2, #1
    ce42:	d04c      	beq.n	cede <f_open+0x2a2>
    ce44:	2302      	movs	r3, #2
    ce46:	4698      	mov	r8, r3
    ce48:	69fb      	ldr	r3, [r7, #28]
    ce4a:	429a      	cmp	r2, r3
    ce4c:	d300      	bcc.n	ce50 <f_open+0x214>
    ce4e:	e71e      	b.n	cc8e <f_open+0x52>
				dw = dj.fs->winsect;
    ce50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ce52:	0011      	movs	r1, r2
    ce54:	469a      	mov	sl, r3
    ce56:	0038      	movs	r0, r7
    ce58:	4b43      	ldr	r3, [pc, #268]	; (cf68 <f_open+0x32c>)
    ce5a:	4798      	blx	r3
    ce5c:	4680      	mov	r8, r0
				if (res == FR_OK) {
    ce5e:	2800      	cmp	r0, #0
    ce60:	d000      	beq.n	ce64 <f_open+0x228>
    ce62:	e714      	b.n	cc8e <f_open+0x52>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    ce64:	464b      	mov	r3, r9
    ce66:	681f      	ldr	r7, [r3, #0]
    ce68:	465b      	mov	r3, fp
    ce6a:	3b01      	subs	r3, #1
    ce6c:	60fb      	str	r3, [r7, #12]
	wsect = fs->winsect;
    ce6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ce70:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    ce72:	459a      	cmp	sl, r3
    ce74:	d0b6      	beq.n	cde4 <f_open+0x1a8>
		if (fs->wflag) {	/* Write back dirty window if needed */
    ce76:	793b      	ldrb	r3, [r7, #4]
    ce78:	2b00      	cmp	r3, #0
    ce7a:	d133      	bne.n	cee4 <f_open+0x2a8>
		if (sector) {
    ce7c:	4653      	mov	r3, sl
    ce7e:	2b00      	cmp	r3, #0
    ce80:	d0ad      	beq.n	cdde <f_open+0x1a2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    ce82:	0039      	movs	r1, r7
    ce84:	7878      	ldrb	r0, [r7, #1]
    ce86:	2301      	movs	r3, #1
    ce88:	4652      	mov	r2, sl
    ce8a:	3134      	adds	r1, #52	; 0x34
    ce8c:	4e37      	ldr	r6, [pc, #220]	; (cf6c <f_open+0x330>)
    ce8e:	47b0      	blx	r6
    ce90:	2800      	cmp	r0, #0
    ce92:	d155      	bne.n	cf40 <f_open+0x304>
			fs->winsect = sector;
    ce94:	4653      	mov	r3, sl
    ce96:	633b      	str	r3, [r7, #48]	; 0x30
    ce98:	9f09      	ldr	r7, [sp, #36]	; 0x24
    ce9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ce9c:	4698      	mov	r8, r3
    ce9e:	e7a1      	b.n	cde4 <f_open+0x1a8>
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    cea0:	2334      	movs	r3, #52	; 0x34
    cea2:	444b      	add	r3, r9
    cea4:	469b      	mov	fp, r3
    cea6:	464b      	mov	r3, r9
    cea8:	4e30      	ldr	r6, [pc, #192]	; (cf6c <f_open+0x330>)
    ceaa:	7858      	ldrb	r0, [r3, #1]
    ceac:	2200      	movs	r2, #0
    ceae:	2301      	movs	r3, #1
    ceb0:	4659      	mov	r1, fp
    ceb2:	47b0      	blx	r6
	if (fmt == 3) return FR_DISK_ERR;
    ceb4:	2301      	movs	r3, #1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    ceb6:	46b2      	mov	sl, r6
	if (fmt == 3) return FR_DISK_ERR;
    ceb8:	4698      	mov	r8, r3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    ceba:	2800      	cmp	r0, #0
    cebc:	d000      	beq.n	cec0 <f_open+0x284>
    cebe:	e6db      	b.n	cc78 <f_open+0x3c>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    cec0:	464b      	mov	r3, r9
    cec2:	4a2b      	ldr	r2, [pc, #172]	; (cf70 <f_open+0x334>)
    cec4:	492b      	ldr	r1, [pc, #172]	; (cf74 <f_open+0x338>)
    cec6:	5c9a      	ldrb	r2, [r3, r2]
    cec8:	5c5b      	ldrb	r3, [r3, r1]
    ceca:	0212      	lsls	r2, r2, #8
    cecc:	4313      	orrs	r3, r2
    cece:	4a2a      	ldr	r2, [pc, #168]	; (cf78 <f_open+0x33c>)
    ced0:	b21b      	sxth	r3, r3
    ced2:	001e      	movs	r6, r3
    ced4:	4293      	cmp	r3, r2
    ced6:	d053      	beq.n	cf80 <f_open+0x344>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    ced8:	230d      	movs	r3, #13
    ceda:	4698      	mov	r8, r3
    cedc:	e6cc      	b.n	cc78 <f_open+0x3c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    cede:	2302      	movs	r3, #2
    cee0:	4698      	mov	r8, r3
    cee2:	e6d4      	b.n	cc8e <f_open+0x52>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    cee4:	2334      	movs	r3, #52	; 0x34
    cee6:	469c      	mov	ip, r3
    cee8:	44bc      	add	ip, r7
    ceea:	4663      	mov	r3, ip
    ceec:	4e23      	ldr	r6, [pc, #140]	; (cf7c <f_open+0x340>)
    ceee:	9302      	str	r3, [sp, #8]
    cef0:	4661      	mov	r1, ip
    cef2:	7878      	ldrb	r0, [r7, #1]
    cef4:	2301      	movs	r3, #1
    cef6:	4642      	mov	r2, r8
    cef8:	46b3      	mov	fp, r6
    cefa:	47b0      	blx	r6
    cefc:	2800      	cmp	r0, #0
    cefe:	d11f      	bne.n	cf40 <f_open+0x304>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    cf00:	6a3b      	ldr	r3, [r7, #32]
    cf02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
			fs->wflag = 0;
    cf04:	7138      	strb	r0, [r7, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    cf06:	18d2      	adds	r2, r2, r3
    cf08:	4590      	cmp	r8, r2
    cf0a:	d2b7      	bcs.n	ce7c <f_open+0x240>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cf0c:	78fa      	ldrb	r2, [r7, #3]
    cf0e:	4691      	mov	r9, r2
    cf10:	2a01      	cmp	r2, #1
    cf12:	d9b3      	bls.n	ce7c <f_open+0x240>
    cf14:	002a      	movs	r2, r5
    cf16:	9e01      	ldr	r6, [sp, #4]
    cf18:	4645      	mov	r5, r8
    cf1a:	46a0      	mov	r8, r4
    cf1c:	464c      	mov	r4, r9
    cf1e:	4691      	mov	r9, r2
    cf20:	e000      	b.n	cf24 <f_open+0x2e8>
    cf22:	6a3b      	ldr	r3, [r7, #32]
					wsect += fs->fsize;
    cf24:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cf26:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    cf28:	7878      	ldrb	r0, [r7, #1]
    cf2a:	2301      	movs	r3, #1
    cf2c:	002a      	movs	r2, r5
    cf2e:	9902      	ldr	r1, [sp, #8]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cf30:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    cf32:	47d8      	blx	fp
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    cf34:	2c01      	cmp	r4, #1
    cf36:	d1f4      	bne.n	cf22 <f_open+0x2e6>
    cf38:	9601      	str	r6, [sp, #4]
    cf3a:	4644      	mov	r4, r8
    cf3c:	464d      	mov	r5, r9
    cf3e:	e79d      	b.n	ce7c <f_open+0x240>
				return FR_DISK_ERR;
    cf40:	2301      	movs	r3, #1
    cf42:	4698      	mov	r8, r3
    cf44:	e6a3      	b.n	cc8e <f_open+0x52>
    cf46:	46c0      	nop			; (mov r8, r8)
    cf48:	fffffdb4 	.word	0xfffffdb4
    cf4c:	20000ca0 	.word	0x20000ca0
    cf50:	20000ca4 	.word	0x20000ca4
    cf54:	00009d1d 	.word	0x00009d1d
    cf58:	0000b9d5 	.word	0x0000b9d5
    cf5c:	0000c319 	.word	0x0000c319
    cf60:	00009ce9 	.word	0x00009ce9
    cf64:	00009eb1 	.word	0x00009eb1
    cf68:	0000aaad 	.word	0x0000aaad
    cf6c:	00009d3d 	.word	0x00009d3d
    cf70:	00000233 	.word	0x00000233
    cf74:	00000232 	.word	0x00000232
    cf78:	ffffaa55 	.word	0xffffaa55
    cf7c:	00009dc1 	.word	0x00009dc1
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    cf80:	236a      	movs	r3, #106	; 0x6a
    cf82:	444b      	add	r3, r9
    cf84:	881a      	ldrh	r2, [r3, #0]
    cf86:	9304      	str	r3, [sp, #16]
    cf88:	885b      	ldrh	r3, [r3, #2]
    cf8a:	041b      	lsls	r3, r3, #16
    cf8c:	4313      	orrs	r3, r2
    cf8e:	4ac3      	ldr	r2, [pc, #780]	; (d29c <f_open+0x660>)
    cf90:	021b      	lsls	r3, r3, #8
    cf92:	0a1b      	lsrs	r3, r3, #8
    cf94:	4293      	cmp	r3, r2
    cf96:	d100      	bne.n	cf9a <f_open+0x35e>
    cf98:	e104      	b.n	d1a4 <f_open+0x568>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    cf9a:	464b      	mov	r3, r9
    cf9c:	2286      	movs	r2, #134	; 0x86
    cf9e:	5a9a      	ldrh	r2, [r3, r2]
    cfa0:	2386      	movs	r3, #134	; 0x86
    cfa2:	444b      	add	r3, r9
    cfa4:	9302      	str	r3, [sp, #8]
    cfa6:	885b      	ldrh	r3, [r3, #2]
    cfa8:	041b      	lsls	r3, r3, #16
    cfaa:	4313      	orrs	r3, r2
    cfac:	4abb      	ldr	r2, [pc, #748]	; (d29c <f_open+0x660>)
    cfae:	021b      	lsls	r3, r3, #8
    cfb0:	0a1b      	lsrs	r3, r3, #8
    cfb2:	4293      	cmp	r3, r2
    cfb4:	d100      	bne.n	cfb8 <f_open+0x37c>
    cfb6:	e0f5      	b.n	d1a4 <f_open+0x568>
		if (tbl[4]) {						/* Is the partition existing? */
    cfb8:	23fb      	movs	r3, #251	; 0xfb
    cfba:	464a      	mov	r2, r9
    cfbc:	005b      	lsls	r3, r3, #1
    cfbe:	5cd3      	ldrb	r3, [r2, r3]
    cfc0:	2b00      	cmp	r3, #0
    cfc2:	d089      	beq.n	ced8 <f_open+0x29c>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    cfc4:	4649      	mov	r1, r9
    cfc6:	23fd      	movs	r3, #253	; 0xfd
    cfc8:	464a      	mov	r2, r9
    cfca:	31fb      	adds	r1, #251	; 0xfb
    cfcc:	31ff      	adds	r1, #255	; 0xff
    cfce:	005b      	lsls	r3, r3, #1
    cfd0:	5cd3      	ldrb	r3, [r2, r3]
    cfd2:	784a      	ldrb	r2, [r1, #1]
    cfd4:	0212      	lsls	r2, r2, #8
    cfd6:	4313      	orrs	r3, r2
    cfd8:	788a      	ldrb	r2, [r1, #2]
    cfda:	0412      	lsls	r2, r2, #16
    cfdc:	431a      	orrs	r2, r3
    cfde:	78cb      	ldrb	r3, [r1, #3]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    cfe0:	4659      	mov	r1, fp
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    cfe2:	061b      	lsls	r3, r3, #24
    cfe4:	4313      	orrs	r3, r2
    cfe6:	9303      	str	r3, [sp, #12]
    cfe8:	001a      	movs	r2, r3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    cfea:	464b      	mov	r3, r9
    cfec:	7858      	ldrb	r0, [r3, #1]
    cfee:	2301      	movs	r3, #1
    cff0:	47d0      	blx	sl
    cff2:	2800      	cmp	r0, #0
    cff4:	d000      	beq.n	cff8 <f_open+0x3bc>
    cff6:	e64a      	b.n	cc8e <f_open+0x52>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    cff8:	464b      	mov	r3, r9
    cffa:	4aa9      	ldr	r2, [pc, #676]	; (d2a0 <f_open+0x664>)
    cffc:	49a9      	ldr	r1, [pc, #676]	; (d2a4 <f_open+0x668>)
    cffe:	5c9a      	ldrb	r2, [r3, r2]
    d000:	5c5b      	ldrb	r3, [r3, r1]
    d002:	0212      	lsls	r2, r2, #8
    d004:	4313      	orrs	r3, r2
    d006:	b21b      	sxth	r3, r3
    d008:	42b3      	cmp	r3, r6
    d00a:	d000      	beq.n	d00e <f_open+0x3d2>
    d00c:	e764      	b.n	ced8 <f_open+0x29c>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    d00e:	9b04      	ldr	r3, [sp, #16]
    d010:	881a      	ldrh	r2, [r3, #0]
    d012:	885b      	ldrh	r3, [r3, #2]
    d014:	041b      	lsls	r3, r3, #16
    d016:	4313      	orrs	r3, r2
    d018:	4aa0      	ldr	r2, [pc, #640]	; (d29c <f_open+0x660>)
    d01a:	021b      	lsls	r3, r3, #8
    d01c:	0a1b      	lsrs	r3, r3, #8
    d01e:	4293      	cmp	r3, r2
    d020:	d00c      	beq.n	d03c <f_open+0x400>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    d022:	464b      	mov	r3, r9
    d024:	2286      	movs	r2, #134	; 0x86
    d026:	5a9a      	ldrh	r2, [r3, r2]
    d028:	9b02      	ldr	r3, [sp, #8]
    d02a:	885b      	ldrh	r3, [r3, #2]
    d02c:	041b      	lsls	r3, r3, #16
    d02e:	4313      	orrs	r3, r2
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    d030:	4a9a      	ldr	r2, [pc, #616]	; (d29c <f_open+0x660>)
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    d032:	021b      	lsls	r3, r3, #8
    d034:	0a1b      	lsrs	r3, r3, #8
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    d036:	4293      	cmp	r3, r2
    d038:	d000      	beq.n	d03c <f_open+0x400>
    d03a:	e74d      	b.n	ced8 <f_open+0x29c>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    d03c:	2340      	movs	r3, #64	; 0x40
    d03e:	464a      	mov	r2, r9
    d040:	4649      	mov	r1, r9
    d042:	5cd2      	ldrb	r2, [r2, r3]
    d044:	3b01      	subs	r3, #1
    d046:	5ccb      	ldrb	r3, [r1, r3]
    d048:	0212      	lsls	r2, r2, #8
    d04a:	4313      	orrs	r3, r2
    d04c:	2280      	movs	r2, #128	; 0x80
    d04e:	b21b      	sxth	r3, r3
    d050:	0092      	lsls	r2, r2, #2
    d052:	4293      	cmp	r3, r2
    d054:	d000      	beq.n	d058 <f_open+0x41c>
    d056:	e73f      	b.n	ced8 <f_open+0x29c>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    d058:	234b      	movs	r3, #75	; 0x4b
    d05a:	5cca      	ldrb	r2, [r1, r3]
    d05c:	3b01      	subs	r3, #1
    d05e:	5ccb      	ldrb	r3, [r1, r3]
    d060:	0212      	lsls	r2, r2, #8
    d062:	4313      	orrs	r3, r2
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    d064:	d100      	bne.n	d068 <f_open+0x42c>
    d066:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    d068:	001a      	movs	r2, r3
    d06a:	9302      	str	r3, [sp, #8]
	fs->fsize = fasize;
    d06c:	464b      	mov	r3, r9
    d06e:	621a      	str	r2, [r3, #32]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    d070:	464a      	mov	r2, r9
    d072:	2344      	movs	r3, #68	; 0x44
    d074:	5cd3      	ldrb	r3, [r2, r3]
    d076:	70d3      	strb	r3, [r2, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    d078:	1e5a      	subs	r2, r3, #1
    d07a:	2a01      	cmp	r2, #1
    d07c:	d900      	bls.n	d080 <f_open+0x444>
    d07e:	e72b      	b.n	ced8 <f_open+0x29c>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    d080:	2241      	movs	r2, #65	; 0x41
    d082:	4649      	mov	r1, r9
    d084:	5c89      	ldrb	r1, [r1, r2]
    d086:	464a      	mov	r2, r9
    d088:	7091      	strb	r1, [r2, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    d08a:	2900      	cmp	r1, #0
    d08c:	d100      	bne.n	d090 <f_open+0x454>
    d08e:	e723      	b.n	ced8 <f_open+0x29c>
    d090:	1e4a      	subs	r2, r1, #1
    d092:	4211      	tst	r1, r2
    d094:	d000      	beq.n	d098 <f_open+0x45c>
    d096:	e71f      	b.n	ced8 <f_open+0x29c>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    d098:	4648      	mov	r0, r9
    d09a:	2246      	movs	r2, #70	; 0x46
    d09c:	464e      	mov	r6, r9
    d09e:	5c82      	ldrb	r2, [r0, r2]
    d0a0:	2045      	movs	r0, #69	; 0x45
    d0a2:	5c30      	ldrb	r0, [r6, r0]
    d0a4:	0212      	lsls	r2, r2, #8
    d0a6:	4310      	orrs	r0, r2
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    d0a8:	0002      	movs	r2, r0
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    d0aa:	4680      	mov	r8, r0
    d0ac:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    d0ae:	0712      	lsls	r2, r2, #28
    d0b0:	d000      	beq.n	d0b4 <f_open+0x478>
    d0b2:	e711      	b.n	ced8 <f_open+0x29c>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    d0b4:	2248      	movs	r2, #72	; 0x48
    d0b6:	2047      	movs	r0, #71	; 0x47
    d0b8:	5cb2      	ldrb	r2, [r6, r2]
    d0ba:	5c30      	ldrb	r0, [r6, r0]
    d0bc:	0212      	lsls	r2, r2, #8
    d0be:	4310      	orrs	r0, r2
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    d0c0:	d100      	bne.n	d0c4 <f_open+0x488>
    d0c2:	6d70      	ldr	r0, [r6, #84]	; 0x54
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    d0c4:	464e      	mov	r6, r9
    d0c6:	2243      	movs	r2, #67	; 0x43
    d0c8:	5cb2      	ldrb	r2, [r6, r2]
    d0ca:	2642      	movs	r6, #66	; 0x42
    d0cc:	46b4      	mov	ip, r6
    d0ce:	0212      	lsls	r2, r2, #8
    d0d0:	9204      	str	r2, [sp, #16]
    d0d2:	464e      	mov	r6, r9
    d0d4:	4662      	mov	r2, ip
    d0d6:	5cb2      	ldrb	r2, [r6, r2]
    d0d8:	0016      	movs	r6, r2
    d0da:	9a04      	ldr	r2, [sp, #16]
    d0dc:	4316      	orrs	r6, r2
    d0de:	9604      	str	r6, [sp, #16]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    d0e0:	d100      	bne.n	d0e4 <f_open+0x4a8>
    d0e2:	e6f9      	b.n	ced8 <f_open+0x29c>
	fasize *= b;										/* Number of sectors for FAT area */
    d0e4:	9a02      	ldr	r2, [sp, #8]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    d0e6:	46b4      	mov	ip, r6
	fasize *= b;										/* Number of sectors for FAT area */
    d0e8:	435a      	muls	r2, r3
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    d0ea:	4643      	mov	r3, r8
    d0ec:	091b      	lsrs	r3, r3, #4
    d0ee:	4463      	add	r3, ip
    d0f0:	4694      	mov	ip, r2
    d0f2:	4463      	add	r3, ip
	fasize *= b;										/* Number of sectors for FAT area */
    d0f4:	9205      	str	r2, [sp, #20]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    d0f6:	001e      	movs	r6, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    d0f8:	4283      	cmp	r3, r0
    d0fa:	d900      	bls.n	d0fe <f_open+0x4c2>
    d0fc:	e6ec      	b.n	ced8 <f_open+0x29c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    d0fe:	1ac0      	subs	r0, r0, r3
    d100:	4b69      	ldr	r3, [pc, #420]	; (d2a8 <f_open+0x66c>)
    d102:	4798      	blx	r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    d104:	2800      	cmp	r0, #0
    d106:	d100      	bne.n	d10a <f_open+0x4ce>
    d108:	e6e6      	b.n	ced8 <f_open+0x29c>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    d10a:	4b68      	ldr	r3, [pc, #416]	; (d2ac <f_open+0x670>)
    d10c:	4298      	cmp	r0, r3
    d10e:	d800      	bhi.n	d112 <f_open+0x4d6>
    d110:	e096      	b.n	d240 <f_open+0x604>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    d112:	4b67      	ldr	r3, [pc, #412]	; (d2b0 <f_open+0x674>)
    d114:	4298      	cmp	r0, r3
    d116:	d96c      	bls.n	d1f2 <f_open+0x5b6>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    d118:	464b      	mov	r3, r9
	fs->database = bsect + sysect;						/* Data start sector */
    d11a:	9903      	ldr	r1, [sp, #12]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    d11c:	3002      	adds	r0, #2
    d11e:	61d8      	str	r0, [r3, #28]
	fs->database = bsect + sysect;						/* Data start sector */
    d120:	468c      	mov	ip, r1
    d122:	0033      	movs	r3, r6
    d124:	464a      	mov	r2, r9
    d126:	4463      	add	r3, ip
    d128:	62d3      	str	r3, [r2, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    d12a:	464a      	mov	r2, r9
    d12c:	9b04      	ldr	r3, [sp, #16]
    d12e:	4463      	add	r3, ip
    d130:	6253      	str	r3, [r2, #36]	; 0x24
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    d132:	4643      	mov	r3, r8
    d134:	2b00      	cmp	r3, #0
    d136:	d000      	beq.n	d13a <f_open+0x4fe>
    d138:	e6ce      	b.n	ced8 <f_open+0x29c>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    d13a:	464b      	mov	r3, r9
    d13c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    d13e:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    d140:	629a      	str	r2, [r3, #40]	; 0x28
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    d142:	4b5c      	ldr	r3, [pc, #368]	; (d2b4 <f_open+0x678>)
    d144:	9a02      	ldr	r2, [sp, #8]
    d146:	18c3      	adds	r3, r0, r3
    d148:	0a5b      	lsrs	r3, r3, #9
    d14a:	429a      	cmp	r2, r3
    d14c:	d200      	bcs.n	d150 <f_open+0x514>
    d14e:	e6c3      	b.n	ced8 <f_open+0x29c>
	fs->free_clust = 0xFFFFFFFF;
    d150:	2301      	movs	r3, #1
    d152:	464a      	mov	r2, r9
    d154:	425b      	negs	r3, r3
    d156:	6113      	str	r3, [r2, #16]
	fs->last_clust = 0;
    d158:	464b      	mov	r3, r9
    d15a:	4642      	mov	r2, r8
    d15c:	60da      	str	r2, [r3, #12]
	 	fs->fsi_flag = 0;
    d15e:	4642      	mov	r2, r8
    d160:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    d162:	464a      	mov	r2, r9
    d164:	2365      	movs	r3, #101	; 0x65
    d166:	4649      	mov	r1, r9
    d168:	5cd3      	ldrb	r3, [r2, r3]
    d16a:	2264      	movs	r2, #100	; 0x64
    d16c:	5c8a      	ldrb	r2, [r1, r2]
    d16e:	021b      	lsls	r3, r3, #8
    d170:	431a      	orrs	r2, r3
    d172:	9b03      	ldr	r3, [sp, #12]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    d174:	7848      	ldrb	r0, [r1, #1]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    d176:	469c      	mov	ip, r3
    d178:	4462      	add	r2, ip
    d17a:	614a      	str	r2, [r1, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    d17c:	2301      	movs	r3, #1
    d17e:	4659      	mov	r1, fp
    d180:	47d0      	blx	sl
    d182:	2303      	movs	r3, #3
    d184:	2800      	cmp	r0, #0
    d186:	d010      	beq.n	d1aa <f_open+0x56e>
	fs->fs_type = fmt;		/* FAT sub-type */
    d188:	464a      	mov	r2, r9
    d18a:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    d18c:	4a4a      	ldr	r2, [pc, #296]	; (d2b8 <f_open+0x67c>)
    d18e:	8813      	ldrh	r3, [r2, #0]
    d190:	3301      	adds	r3, #1
    d192:	b29b      	uxth	r3, r3
    d194:	8013      	strh	r3, [r2, #0]
    d196:	464a      	mov	r2, r9
    d198:	80d3      	strh	r3, [r2, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    d19a:	2300      	movs	r3, #0
    d19c:	6313      	str	r3, [r2, #48]	; 0x30
	fs->wflag = 0;
    d19e:	7113      	strb	r3, [r2, #4]
	fs->cdir = 0;			/* Current directory (root dir) */
    d1a0:	6193      	str	r3, [r2, #24]
    d1a2:	e597      	b.n	ccd4 <f_open+0x98>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    d1a4:	2300      	movs	r3, #0
    d1a6:	9303      	str	r3, [sp, #12]
    d1a8:	e748      	b.n	d03c <f_open+0x400>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    d1aa:	464a      	mov	r2, r9
    d1ac:	4649      	mov	r1, r9
    d1ae:	4b3c      	ldr	r3, [pc, #240]	; (d2a0 <f_open+0x664>)
    d1b0:	5cd3      	ldrb	r3, [r2, r3]
    d1b2:	4a3c      	ldr	r2, [pc, #240]	; (d2a4 <f_open+0x668>)
    d1b4:	021b      	lsls	r3, r3, #8
    d1b6:	5c8a      	ldrb	r2, [r1, r2]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    d1b8:	4940      	ldr	r1, [pc, #256]	; (d2bc <f_open+0x680>)
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    d1ba:	431a      	orrs	r2, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    d1bc:	b212      	sxth	r2, r2
    d1be:	2303      	movs	r3, #3
    d1c0:	428a      	cmp	r2, r1
    d1c2:	d1e1      	bne.n	d188 <f_open+0x54c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    d1c4:	4649      	mov	r1, r9
    d1c6:	4a3e      	ldr	r2, [pc, #248]	; (d2c0 <f_open+0x684>)
    d1c8:	6b49      	ldr	r1, [r1, #52]	; 0x34
    d1ca:	4291      	cmp	r1, r2
    d1cc:	d1dc      	bne.n	d188 <f_open+0x54c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    d1ce:	2386      	movs	r3, #134	; 0x86
    d1d0:	4649      	mov	r1, r9
    d1d2:	009b      	lsls	r3, r3, #2
    d1d4:	58c9      	ldr	r1, [r1, r3]
    d1d6:	4a3b      	ldr	r2, [pc, #236]	; (d2c4 <f_open+0x688>)
    d1d8:	2303      	movs	r3, #3
    d1da:	4291      	cmp	r1, r2
    d1dc:	d1d4      	bne.n	d188 <f_open+0x54c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    d1de:	2288      	movs	r2, #136	; 0x88
    d1e0:	4649      	mov	r1, r9
    d1e2:	0092      	lsls	r2, r2, #2
    d1e4:	588a      	ldr	r2, [r1, r2]
    d1e6:	60ca      	str	r2, [r1, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    d1e8:	2287      	movs	r2, #135	; 0x87
    d1ea:	0092      	lsls	r2, r2, #2
    d1ec:	588a      	ldr	r2, [r1, r2]
    d1ee:	610a      	str	r2, [r1, #16]
    d1f0:	e7ca      	b.n	d188 <f_open+0x54c>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    d1f2:	464b      	mov	r3, r9
	fs->database = bsect + sysect;						/* Data start sector */
    d1f4:	9903      	ldr	r1, [sp, #12]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    d1f6:	3002      	adds	r0, #2
    d1f8:	61d8      	str	r0, [r3, #28]
	fs->database = bsect + sysect;						/* Data start sector */
    d1fa:	468c      	mov	ip, r1
    d1fc:	0033      	movs	r3, r6
    d1fe:	464a      	mov	r2, r9
    d200:	4463      	add	r3, ip
    d202:	62d3      	str	r3, [r2, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    d204:	9b04      	ldr	r3, [sp, #16]
    d206:	001a      	movs	r2, r3
    d208:	464b      	mov	r3, r9
    d20a:	4462      	add	r2, ip
    d20c:	625a      	str	r2, [r3, #36]	; 0x24
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    d20e:	4643      	mov	r3, r8
    d210:	2b00      	cmp	r3, #0
    d212:	d100      	bne.n	d216 <f_open+0x5da>
    d214:	e660      	b.n	ced8 <f_open+0x29c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    d216:	9b05      	ldr	r3, [sp, #20]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    d218:	0040      	lsls	r0, r0, #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    d21a:	469c      	mov	ip, r3
    d21c:	464b      	mov	r3, r9
    d21e:	4462      	add	r2, ip
    d220:	629a      	str	r2, [r3, #40]	; 0x28
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    d222:	4b24      	ldr	r3, [pc, #144]	; (d2b4 <f_open+0x678>)
    d224:	9a02      	ldr	r2, [sp, #8]
    d226:	18c3      	adds	r3, r0, r3
    d228:	0a5b      	lsrs	r3, r3, #9
    d22a:	4293      	cmp	r3, r2
    d22c:	d900      	bls.n	d230 <f_open+0x5f4>
    d22e:	e653      	b.n	ced8 <f_open+0x29c>
	fs->free_clust = 0xFFFFFFFF;
    d230:	2301      	movs	r3, #1
    d232:	464a      	mov	r2, r9
    d234:	425b      	negs	r3, r3
    d236:	6113      	str	r3, [r2, #16]
	fs->last_clust = 0;
    d238:	2300      	movs	r3, #0
    d23a:	60d3      	str	r3, [r2, #12]
    d23c:	3302      	adds	r3, #2
    d23e:	e7a3      	b.n	d188 <f_open+0x54c>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    d240:	464b      	mov	r3, r9
	fs->database = bsect + sysect;						/* Data start sector */
    d242:	9903      	ldr	r1, [sp, #12]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    d244:	3002      	adds	r0, #2
    d246:	61d8      	str	r0, [r3, #28]
	fs->database = bsect + sysect;						/* Data start sector */
    d248:	468c      	mov	ip, r1
    d24a:	0033      	movs	r3, r6
    d24c:	464a      	mov	r2, r9
    d24e:	4463      	add	r3, ip
    d250:	62d3      	str	r3, [r2, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    d252:	9b04      	ldr	r3, [sp, #16]
    d254:	001a      	movs	r2, r3
    d256:	464b      	mov	r3, r9
    d258:	4462      	add	r2, ip
    d25a:	625a      	str	r2, [r3, #36]	; 0x24
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    d25c:	4643      	mov	r3, r8
    d25e:	2b00      	cmp	r3, #0
    d260:	d100      	bne.n	d264 <f_open+0x628>
    d262:	e639      	b.n	ced8 <f_open+0x29c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    d264:	9b05      	ldr	r3, [sp, #20]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    d266:	4913      	ldr	r1, [pc, #76]	; (d2b4 <f_open+0x678>)
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    d268:	469c      	mov	ip, r3
    d26a:	464b      	mov	r3, r9
    d26c:	4462      	add	r2, ip
    d26e:	629a      	str	r2, [r3, #40]	; 0x28
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    d270:	2303      	movs	r3, #3
    d272:	2201      	movs	r2, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    d274:	468c      	mov	ip, r1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    d276:	4343      	muls	r3, r0
    d278:	4010      	ands	r0, r2
    d27a:	085b      	lsrs	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    d27c:	4460      	add	r0, ip
    d27e:	9902      	ldr	r1, [sp, #8]
    d280:	181b      	adds	r3, r3, r0
    d282:	0a5b      	lsrs	r3, r3, #9
    d284:	4299      	cmp	r1, r3
    d286:	d200      	bcs.n	d28a <f_open+0x64e>
    d288:	e626      	b.n	ced8 <f_open+0x29c>
	fs->free_clust = 0xFFFFFFFF;
    d28a:	2301      	movs	r3, #1
    d28c:	4649      	mov	r1, r9
    d28e:	425b      	negs	r3, r3
    d290:	610b      	str	r3, [r1, #16]
	fs->last_clust = 0;
    d292:	2300      	movs	r3, #0
    d294:	60cb      	str	r3, [r1, #12]
	fmt = FS_FAT12;
    d296:	0013      	movs	r3, r2
    d298:	e776      	b.n	d188 <f_open+0x54c>
    d29a:	46c0      	nop			; (mov r8, r8)
    d29c:	00544146 	.word	0x00544146
    d2a0:	00000233 	.word	0x00000233
    d2a4:	00000232 	.word	0x00000232
    d2a8:	0002593d 	.word	0x0002593d
    d2ac:	00000ff5 	.word	0x00000ff5
    d2b0:	0000fff5 	.word	0x0000fff5
    d2b4:	000001ff 	.word	0x000001ff
    d2b8:	20000ca8 	.word	0x20000ca8
    d2bc:	ffffaa55 	.word	0xffffaa55
    d2c0:	41615252 	.word	0x41615252
    d2c4:	61417272 	.word	0x61417272

0000d2c8 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    d2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2ca:	4657      	mov	r7, sl
    d2cc:	469a      	mov	sl, r3
    d2ce:	464e      	mov	r6, r9
    d2d0:	4645      	mov	r5, r8
    d2d2:	46de      	mov	lr, fp
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    d2d4:	2300      	movs	r3, #0
{
    d2d6:	0014      	movs	r4, r2
	*br = 0;	/* Initialize byte counter */
    d2d8:	4652      	mov	r2, sl
{
    d2da:	b5e0      	push	{r5, r6, r7, lr}
	*br = 0;	/* Initialize byte counter */
    d2dc:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    d2de:	6803      	ldr	r3, [r0, #0]
{
    d2e0:	b083      	sub	sp, #12
    d2e2:	0005      	movs	r5, r0
    d2e4:	000e      	movs	r6, r1
	if (!fs || !fs->fs_type || fs->id != id)
    d2e6:	2b00      	cmp	r3, #0
    d2e8:	d100      	bne.n	d2ec <f_read+0x24>
    d2ea:	e11f      	b.n	d52c <f_read+0x264>
    d2ec:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    d2ee:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    d2f0:	2a00      	cmp	r2, #0
    d2f2:	d106      	bne.n	d302 <f_read+0x3a>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    d2f4:	b003      	add	sp, #12
    d2f6:	bc3c      	pop	{r2, r3, r4, r5}
    d2f8:	4690      	mov	r8, r2
    d2fa:	4699      	mov	r9, r3
    d2fc:	46a2      	mov	sl, r4
    d2fe:	46ab      	mov	fp, r5
    d300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    d302:	88a9      	ldrh	r1, [r5, #4]
    d304:	88da      	ldrh	r2, [r3, #6]
    d306:	4291      	cmp	r1, r2
    d308:	d1f4      	bne.n	d2f4 <f_read+0x2c>
	if (disk_status(fs->drv) & STA_NOINIT)
    d30a:	7858      	ldrb	r0, [r3, #1]
    d30c:	4bad      	ldr	r3, [pc, #692]	; (d5c4 <f_read+0x2fc>)
    d30e:	4798      	blx	r3
    d310:	2101      	movs	r1, #1
    d312:	0003      	movs	r3, r0
		return FR_NOT_READY;
    d314:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    d316:	4219      	tst	r1, r3
    d318:	d1ec      	bne.n	d2f4 <f_read+0x2c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    d31a:	79ab      	ldrb	r3, [r5, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
    d31c:	2002      	movs	r0, #2
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    d31e:	b25a      	sxtb	r2, r3
    d320:	2a00      	cmp	r2, #0
    d322:	dbe7      	blt.n	d2f4 <f_read+0x2c>
		LEAVE_FF(fp->fs, FR_DENIED);
    d324:	2007      	movs	r0, #7
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    d326:	4219      	tst	r1, r3
    d328:	d0e4      	beq.n	d2f4 <f_read+0x2c>
	remain = fp->fsize - fp->fptr;
    d32a:	68ab      	ldr	r3, [r5, #8]
    d32c:	68ea      	ldr	r2, [r5, #12]
    d32e:	1ad2      	subs	r2, r2, r3
    d330:	4690      	mov	r8, r2
    d332:	42a2      	cmp	r2, r4
    d334:	d900      	bls.n	d338 <f_read+0x70>
    d336:	46a0      	mov	r8, r4
	for ( ;  btr;								/* Repeat until all data read */
    d338:	4642      	mov	r2, r8
    d33a:	2a00      	cmp	r2, #0
    d33c:	d100      	bne.n	d340 <f_read+0x78>
    d33e:	e12a      	b.n	d596 <f_read+0x2ce>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    d340:	05da      	lsls	r2, r3, #23
    d342:	4647      	mov	r7, r8
    d344:	0dd2      	lsrs	r2, r2, #23
    d346:	d000      	beq.n	d34a <f_read+0x82>
    d348:	e087      	b.n	d45a <f_read+0x192>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    d34a:	682a      	ldr	r2, [r5, #0]
    d34c:	0a59      	lsrs	r1, r3, #9
    d34e:	7890      	ldrb	r0, [r2, #2]
    d350:	3801      	subs	r0, #1
    d352:	4001      	ands	r1, r0
    d354:	b2c9      	uxtb	r1, r1
    d356:	4688      	mov	r8, r1
			if (!csect) {						/* On the cluster boundary? */
    d358:	2900      	cmp	r1, #0
    d35a:	d000      	beq.n	d35e <f_read+0x96>
    d35c:	e0ca      	b.n	d4f4 <f_read+0x22c>
				if (fp->fptr == 0) {			/* On the top of the file? */
    d35e:	2b00      	cmp	r3, #0
    d360:	d000      	beq.n	d364 <f_read+0x9c>
    d362:	e0ef      	b.n	d544 <f_read+0x27c>
					clst = fp->sclust;			/* Follow from the origin */
    d364:	6928      	ldr	r0, [r5, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    d366:	2801      	cmp	r0, #1
    d368:	d800      	bhi.n	d36c <f_read+0xa4>
    d36a:	e0f1      	b.n	d550 <f_read+0x288>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    d36c:	1c43      	adds	r3, r0, #1
    d36e:	d100      	bne.n	d372 <f_read+0xaa>
    d370:	e120      	b.n	d5b4 <f_read+0x2ec>
    d372:	682a      	ldr	r2, [r5, #0]
				fp->clust = clst;				/* Update current cluster */
    d374:	6168      	str	r0, [r5, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    d376:	69d3      	ldr	r3, [r2, #28]
	clst -= 2;
    d378:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    d37a:	3b02      	subs	r3, #2
    d37c:	4298      	cmp	r0, r3
    d37e:	d300      	bcc.n	d382 <f_read+0xba>
    d380:	e0e6      	b.n	d550 <f_read+0x288>
	return clst * fs->csize + fs->database;
    d382:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    d384:	7891      	ldrb	r1, [r2, #2]
    d386:	469b      	mov	fp, r3
    d388:	4348      	muls	r0, r1
    d38a:	9001      	str	r0, [sp, #4]
    d38c:	4458      	add	r0, fp
    d38e:	1e03      	subs	r3, r0, #0
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    d390:	d100      	bne.n	d394 <f_read+0xcc>
    d392:	e0dd      	b.n	d550 <f_read+0x288>
			sect += csect;
    d394:	4443      	add	r3, r8
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    d396:	0a78      	lsrs	r0, r7, #9
			sect += csect;
    d398:	4699      	mov	r9, r3
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    d39a:	9000      	str	r0, [sp, #0]
			if (cc) {							/* Read maximum contiguous sectors directly */
    d39c:	d100      	bne.n	d3a0 <f_read+0xd8>
    d39e:	e0ab      	b.n	d4f8 <f_read+0x230>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    d3a0:	4643      	mov	r3, r8
    d3a2:	4684      	mov	ip, r0
    d3a4:	4463      	add	r3, ip
    d3a6:	428b      	cmp	r3, r1
    d3a8:	d902      	bls.n	d3b0 <f_read+0xe8>
					cc = fp->fs->csize - csect;
    d3aa:	4643      	mov	r3, r8
    d3ac:	1acb      	subs	r3, r1, r3
    d3ae:	9300      	str	r3, [sp, #0]
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    d3b0:	466b      	mov	r3, sp
    d3b2:	7850      	ldrb	r0, [r2, #1]
    d3b4:	0031      	movs	r1, r6
    d3b6:	781b      	ldrb	r3, [r3, #0]
    d3b8:	464a      	mov	r2, r9
    d3ba:	4c83      	ldr	r4, [pc, #524]	; (d5c8 <f_read+0x300>)
    d3bc:	47a0      	blx	r4
    d3be:	1e01      	subs	r1, r0, #0
    d3c0:	d000      	beq.n	d3c4 <f_read+0xfc>
    d3c2:	e0cc      	b.n	d55e <f_read+0x296>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
    d3c4:	79ab      	ldrb	r3, [r5, #6]
    d3c6:	065b      	lsls	r3, r3, #25
    d3c8:	d534      	bpl.n	d434 <f_read+0x16c>
    d3ca:	464a      	mov	r2, r9
    d3cc:	69ab      	ldr	r3, [r5, #24]
    d3ce:	1a98      	subs	r0, r3, r2
    d3d0:	9a00      	ldr	r2, [sp, #0]
    d3d2:	4282      	cmp	r2, r0
    d3d4:	d92e      	bls.n	d434 <f_read+0x16c>
    d3d6:	4644      	mov	r4, r8
    d3d8:	1b1b      	subs	r3, r3, r4
    d3da:	465c      	mov	r4, fp
    d3dc:	1b1b      	subs	r3, r3, r4
    d3de:	9c01      	ldr	r4, [sp, #4]
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
    d3e0:	0240      	lsls	r0, r0, #9
    d3e2:	1b1b      	subs	r3, r3, r4
    d3e4:	2404      	movs	r4, #4
    d3e6:	025b      	lsls	r3, r3, #9
    d3e8:	469b      	mov	fp, r3
    d3ea:	46a4      	mov	ip, r4
    d3ec:	44e3      	add	fp, ip
    d3ee:	002a      	movs	r2, r5
    d3f0:	44b3      	add	fp, r6
    d3f2:	4681      	mov	r9, r0
    d3f4:	000c      	movs	r4, r1
    d3f6:	4658      	mov	r0, fp
    d3f8:	3224      	adds	r2, #36	; 0x24
    d3fa:	4282      	cmp	r2, r0
    d3fc:	414c      	adcs	r4, r1
    d3fe:	2028      	movs	r0, #40	; 0x28
    d400:	4680      	mov	r8, r0
    d402:	44a8      	add	r8, r5
    d404:	4640      	mov	r0, r8
    d406:	18f3      	adds	r3, r6, r3
    d408:	4283      	cmp	r3, r0
    d40a:	4149      	adcs	r1, r1
    d40c:	4321      	orrs	r1, r4
    d40e:	b2c9      	uxtb	r1, r1
    d410:	44b1      	add	r9, r6
    d412:	2900      	cmp	r1, #0
    d414:	d100      	bne.n	d418 <f_read+0x150>
    d416:	e0c0      	b.n	d59a <f_read+0x2d2>
    d418:	0019      	movs	r1, r3
    d41a:	4311      	orrs	r1, r2
    d41c:	0789      	lsls	r1, r1, #30
    d41e:	d000      	beq.n	d422 <f_read+0x15a>
    d420:	e0bb      	b.n	d59a <f_read+0x2d2>
    d422:	2189      	movs	r1, #137	; 0x89
    d424:	9c00      	ldr	r4, [sp, #0]
    d426:	0089      	lsls	r1, r1, #2
    d428:	1868      	adds	r0, r5, r1
		*d++ = *s++;
    d42a:	ca02      	ldmia	r2!, {r1}
    d42c:	c302      	stmia	r3!, {r1}
    d42e:	4290      	cmp	r0, r2
    d430:	d1fb      	bne.n	d42a <f_read+0x162>
    d432:	9400      	str	r4, [sp, #0]
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    d434:	9b00      	ldr	r3, [sp, #0]
    d436:	025c      	lsls	r4, r3, #9
    d438:	68ab      	ldr	r3, [r5, #8]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    d43a:	18e3      	adds	r3, r4, r3
    d43c:	60ab      	str	r3, [r5, #8]
    d43e:	4653      	mov	r3, sl
    d440:	4652      	mov	r2, sl
    d442:	681b      	ldr	r3, [r3, #0]
    d444:	1936      	adds	r6, r6, r4
    d446:	191b      	adds	r3, r3, r4
    d448:	6013      	str	r3, [r2, #0]
    d44a:	1b3f      	subs	r7, r7, r4
	for ( ;  btr;								/* Repeat until all data read */
    d44c:	d100      	bne.n	d450 <f_read+0x188>
    d44e:	e0a2      	b.n	d596 <f_read+0x2ce>
    d450:	68ab      	ldr	r3, [r5, #8]
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    d452:	05da      	lsls	r2, r3, #23
    d454:	0dd2      	lsrs	r2, r2, #23
    d456:	d100      	bne.n	d45a <f_read+0x192>
    d458:	e777      	b.n	d34a <f_read+0x82>
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    d45a:	2480      	movs	r4, #128	; 0x80
    d45c:	00a4      	lsls	r4, r4, #2
    d45e:	1aa4      	subs	r4, r4, r2
    d460:	42bc      	cmp	r4, r7
    d462:	d900      	bls.n	d466 <f_read+0x19e>
    d464:	003c      	movs	r4, r7
	while (cnt--)
    d466:	1e61      	subs	r1, r4, #1
    d468:	4689      	mov	r9, r1
    d46a:	2100      	movs	r1, #0
    d46c:	0008      	movs	r0, r1
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    d46e:	0013      	movs	r3, r2
    d470:	3228      	adds	r2, #40	; 0x28
    d472:	18aa      	adds	r2, r5, r2
    d474:	4296      	cmp	r6, r2
    d476:	4148      	adcs	r0, r1
    d478:	3324      	adds	r3, #36	; 0x24
    d47a:	0002      	movs	r2, r0
    d47c:	18eb      	adds	r3, r5, r3
    d47e:	1d30      	adds	r0, r6, #4
    d480:	4283      	cmp	r3, r0
    d482:	4149      	adcs	r1, r1
    d484:	4311      	orrs	r1, r2
    d486:	2209      	movs	r2, #9
    d488:	42a2      	cmp	r2, r4
    d48a:	4192      	sbcs	r2, r2
    d48c:	4252      	negs	r2, r2
    d48e:	420a      	tst	r2, r1
    d490:	d050      	beq.n	d534 <f_read+0x26c>
    d492:	0032      	movs	r2, r6
    d494:	431a      	orrs	r2, r3
    d496:	0792      	lsls	r2, r2, #30
    d498:	d14c      	bne.n	d534 <f_read+0x26c>
    d49a:	1f22      	subs	r2, r4, #4
    d49c:	0892      	lsrs	r2, r2, #2
    d49e:	3201      	adds	r2, #1
    d4a0:	0091      	lsls	r1, r2, #2
    d4a2:	4688      	mov	r8, r1
    d4a4:	4649      	mov	r1, r9
    d4a6:	2902      	cmp	r1, #2
    d4a8:	d942      	bls.n	d530 <f_read+0x268>
	while (cnt--)
    d4aa:	2000      	movs	r0, #0
    d4ac:	4684      	mov	ip, r0
    d4ae:	2100      	movs	r1, #0
    d4b0:	0010      	movs	r0, r2
    d4b2:	46a3      	mov	fp, r4
    d4b4:	4662      	mov	r2, ip
    d4b6:	46cc      	mov	ip, r9
		*d++ = *s++;
    d4b8:	585c      	ldr	r4, [r3, r1]
    d4ba:	3201      	adds	r2, #1
    d4bc:	5074      	str	r4, [r6, r1]
    d4be:	3104      	adds	r1, #4
    d4c0:	4290      	cmp	r0, r2
    d4c2:	d8f9      	bhi.n	d4b8 <f_read+0x1f0>
    d4c4:	4641      	mov	r1, r8
    d4c6:	4660      	mov	r0, ip
    d4c8:	4642      	mov	r2, r8
    d4ca:	465c      	mov	r4, fp
    d4cc:	1a41      	subs	r1, r0, r1
    d4ce:	18b2      	adds	r2, r6, r2
    d4d0:	4443      	add	r3, r8
    d4d2:	4689      	mov	r9, r1
    d4d4:	4544      	cmp	r4, r8
    d4d6:	d00b      	beq.n	d4f0 <f_read+0x228>
    d4d8:	7819      	ldrb	r1, [r3, #0]
    d4da:	7011      	strb	r1, [r2, #0]
	while (cnt--)
    d4dc:	4649      	mov	r1, r9
    d4de:	2900      	cmp	r1, #0
    d4e0:	d006      	beq.n	d4f0 <f_read+0x228>
		*d++ = *s++;
    d4e2:	7859      	ldrb	r1, [r3, #1]
    d4e4:	7051      	strb	r1, [r2, #1]
	while (cnt--)
    d4e6:	4649      	mov	r1, r9
    d4e8:	2901      	cmp	r1, #1
    d4ea:	d001      	beq.n	d4f0 <f_read+0x228>
		*d++ = *s++;
    d4ec:	789b      	ldrb	r3, [r3, #2]
    d4ee:	7093      	strb	r3, [r2, #2]
    d4f0:	68ab      	ldr	r3, [r5, #8]
    d4f2:	e7a2      	b.n	d43a <f_read+0x172>
    d4f4:	6968      	ldr	r0, [r5, #20]
    d4f6:	e73e      	b.n	d376 <f_read+0xae>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
    d4f8:	69a9      	ldr	r1, [r5, #24]
    d4fa:	428b      	cmp	r3, r1
    d4fc:	d010      	beq.n	d520 <f_read+0x258>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
    d4fe:	2340      	movs	r3, #64	; 0x40
    d500:	469b      	mov	fp, r3
    d502:	4658      	mov	r0, fp
    d504:	79ab      	ldrb	r3, [r5, #6]
    d506:	4218      	tst	r0, r3
    d508:	d130      	bne.n	d56c <f_read+0x2a4>
    d50a:	2324      	movs	r3, #36	; 0x24
    d50c:	4698      	mov	r8, r3
    d50e:	44a8      	add	r8, r5
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    d510:	7850      	ldrb	r0, [r2, #1]
    d512:	2301      	movs	r3, #1
    d514:	464a      	mov	r2, r9
    d516:	4641      	mov	r1, r8
    d518:	4c2b      	ldr	r4, [pc, #172]	; (d5c8 <f_read+0x300>)
    d51a:	47a0      	blx	r4
    d51c:	2800      	cmp	r0, #0
    d51e:	d11e      	bne.n	d55e <f_read+0x296>
			fp->dsect = sect;
    d520:	464b      	mov	r3, r9
    d522:	61ab      	str	r3, [r5, #24]
    d524:	68ab      	ldr	r3, [r5, #8]
    d526:	05da      	lsls	r2, r3, #23
    d528:	0dd2      	lsrs	r2, r2, #23
    d52a:	e796      	b.n	d45a <f_read+0x192>
		return FR_INVALID_OBJECT;
    d52c:	2009      	movs	r0, #9
    d52e:	e6e1      	b.n	d2f4 <f_read+0x2c>
	while (cnt--)
    d530:	0032      	movs	r2, r6
    d532:	e7d1      	b.n	d4d8 <f_read+0x210>
    d534:	2200      	movs	r2, #0
		*d++ = *s++;
    d536:	5c99      	ldrb	r1, [r3, r2]
    d538:	54b1      	strb	r1, [r6, r2]
    d53a:	3201      	adds	r2, #1
	while (cnt--)
    d53c:	42a2      	cmp	r2, r4
    d53e:	d1fa      	bne.n	d536 <f_read+0x26e>
    d540:	68ab      	ldr	r3, [r5, #8]
    d542:	e77a      	b.n	d43a <f_read+0x172>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    d544:	6969      	ldr	r1, [r5, #20]
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    d546:	2901      	cmp	r1, #1
    d548:	d902      	bls.n	d550 <f_read+0x288>
    d54a:	69d3      	ldr	r3, [r2, #28]
    d54c:	4299      	cmp	r1, r3
    d54e:	d31e      	bcc.n	d58e <f_read+0x2c6>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    d550:	2380      	movs	r3, #128	; 0x80
    d552:	79aa      	ldrb	r2, [r5, #6]
    d554:	425b      	negs	r3, r3
    d556:	4313      	orrs	r3, r2
    d558:	71ab      	strb	r3, [r5, #6]
    d55a:	2002      	movs	r0, #2
    d55c:	e6ca      	b.n	d2f4 <f_read+0x2c>
					ABORT(fp->fs, FR_DISK_ERR);
    d55e:	2380      	movs	r3, #128	; 0x80
    d560:	79aa      	ldrb	r2, [r5, #6]
    d562:	425b      	negs	r3, r3
    d564:	4313      	orrs	r3, r2
    d566:	71ab      	strb	r3, [r5, #6]
    d568:	2001      	movs	r0, #1
    d56a:	e6c3      	b.n	d2f4 <f_read+0x2c>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    d56c:	2324      	movs	r3, #36	; 0x24
    d56e:	4698      	mov	r8, r3
    d570:	44a8      	add	r8, r5
    d572:	7850      	ldrb	r0, [r2, #1]
    d574:	3b23      	subs	r3, #35	; 0x23
    d576:	000a      	movs	r2, r1
    d578:	4c14      	ldr	r4, [pc, #80]	; (d5cc <f_read+0x304>)
    d57a:	4641      	mov	r1, r8
    d57c:	47a0      	blx	r4
    d57e:	2800      	cmp	r0, #0
    d580:	d1ed      	bne.n	d55e <f_read+0x296>
					fp->flag &= ~FA__DIRTY;
    d582:	465a      	mov	r2, fp
    d584:	79ab      	ldrb	r3, [r5, #6]
    d586:	4393      	bics	r3, r2
    d588:	71ab      	strb	r3, [r5, #6]
    d58a:	682a      	ldr	r2, [r5, #0]
    d58c:	e7c0      	b.n	d510 <f_read+0x248>
    d58e:	0010      	movs	r0, r2
    d590:	4b0f      	ldr	r3, [pc, #60]	; (d5d0 <f_read+0x308>)
    d592:	4798      	blx	r3
    d594:	e6e7      	b.n	d366 <f_read+0x9e>
	LEAVE_FF(fp->fs, FR_OK);
    d596:	2000      	movs	r0, #0
    d598:	e6ac      	b.n	d2f4 <f_read+0x2c>
	while (cnt--)
    d59a:	2180      	movs	r1, #128	; 0x80
    d59c:	0089      	lsls	r1, r1, #2
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
    d59e:	2300      	movs	r3, #0
	while (cnt--)
    d5a0:	468c      	mov	ip, r1
    d5a2:	4648      	mov	r0, r9
    d5a4:	9c00      	ldr	r4, [sp, #0]
		*d++ = *s++;
    d5a6:	5cd1      	ldrb	r1, [r2, r3]
    d5a8:	54c1      	strb	r1, [r0, r3]
    d5aa:	3301      	adds	r3, #1
	while (cnt--)
    d5ac:	4563      	cmp	r3, ip
    d5ae:	d1fa      	bne.n	d5a6 <f_read+0x2de>
    d5b0:	9400      	str	r4, [sp, #0]
    d5b2:	e73f      	b.n	d434 <f_read+0x16c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    d5b4:	2380      	movs	r3, #128	; 0x80
    d5b6:	79aa      	ldrb	r2, [r5, #6]
    d5b8:	425b      	negs	r3, r3
    d5ba:	4313      	orrs	r3, r2
    d5bc:	71ab      	strb	r3, [r5, #6]
    d5be:	3002      	adds	r0, #2
    d5c0:	e698      	b.n	d2f4 <f_read+0x2c>
    d5c2:	46c0      	nop			; (mov r8, r8)
    d5c4:	00009d1d 	.word	0x00009d1d
    d5c8:	00009d3d 	.word	0x00009d3d
    d5cc:	00009dc1 	.word	0x00009dc1
    d5d0:	0000ae05 	.word	0x0000ae05

0000d5d4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    d5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5d6:	46de      	mov	lr, fp
    d5d8:	469b      	mov	fp, r3
    d5da:	4645      	mov	r5, r8
    d5dc:	4657      	mov	r7, sl
    d5de:	464e      	mov	r6, r9
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    d5e0:	2300      	movs	r3, #0
{
    d5e2:	4690      	mov	r8, r2
	*bw = 0;	/* Initialize byte counter */
    d5e4:	465a      	mov	r2, fp
{
    d5e6:	b5e0      	push	{r5, r6, r7, lr}
	*bw = 0;	/* Initialize byte counter */
    d5e8:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    d5ea:	6803      	ldr	r3, [r0, #0]
{
    d5ec:	b083      	sub	sp, #12
    d5ee:	0004      	movs	r4, r0
    d5f0:	000d      	movs	r5, r1
	if (!fs || !fs->fs_type || fs->id != id)
    d5f2:	2b00      	cmp	r3, #0
    d5f4:	d02c      	beq.n	d650 <f_write+0x7c>
    d5f6:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    d5f8:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    d5fa:	2a00      	cmp	r2, #0
    d5fc:	d106      	bne.n	d60c <f_write+0x38>

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    d5fe:	b003      	add	sp, #12
    d600:	bc3c      	pop	{r2, r3, r4, r5}
    d602:	4690      	mov	r8, r2
    d604:	4699      	mov	r9, r3
    d606:	46a2      	mov	sl, r4
    d608:	46ab      	mov	fp, r5
    d60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    d60c:	88a1      	ldrh	r1, [r4, #4]
    d60e:	88da      	ldrh	r2, [r3, #6]
    d610:	4291      	cmp	r1, r2
    d612:	d1f4      	bne.n	d5fe <f_write+0x2a>
	if (disk_status(fs->drv) & STA_NOINIT)
    d614:	7858      	ldrb	r0, [r3, #1]
    d616:	4bab      	ldr	r3, [pc, #684]	; (d8c4 <f_write+0x2f0>)
    d618:	4798      	blx	r3
    d61a:	0003      	movs	r3, r0
		return FR_NOT_READY;
    d61c:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    d61e:	07db      	lsls	r3, r3, #31
    d620:	d4ed      	bmi.n	d5fe <f_write+0x2a>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    d622:	79a3      	ldrb	r3, [r4, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
    d624:	2002      	movs	r0, #2
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    d626:	b25a      	sxtb	r2, r3
    d628:	2a00      	cmp	r2, #0
    d62a:	dbe8      	blt.n	d5fe <f_write+0x2a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    d62c:	0002      	movs	r2, r0
		LEAVE_FF(fp->fs, FR_DENIED);
    d62e:	2007      	movs	r0, #7
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    d630:	401a      	ands	r2, r3
    d632:	d0e4      	beq.n	d5fe <f_write+0x2a>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    d634:	4641      	mov	r1, r8
    d636:	68e2      	ldr	r2, [r4, #12]
    d638:	1851      	adds	r1, r2, r1
    d63a:	428a      	cmp	r2, r1
    d63c:	d90a      	bls.n	d654 <f_write+0x80>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    d63e:	68a1      	ldr	r1, [r4, #8]
    d640:	4291      	cmp	r1, r2
    d642:	d900      	bls.n	d646 <f_write+0x72>
    d644:	60e1      	str	r1, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    d646:	2220      	movs	r2, #32
    d648:	4313      	orrs	r3, r2
    d64a:	71a3      	strb	r3, [r4, #6]
	LEAVE_FF(fp->fs, FR_OK);
    d64c:	2000      	movs	r0, #0
    d64e:	e7d6      	b.n	d5fe <f_write+0x2a>
		return FR_INVALID_OBJECT;
    d650:	2009      	movs	r0, #9
    d652:	e7d4      	b.n	d5fe <f_write+0x2a>
	for ( ;  btw;							/* Repeat until all data written */
    d654:	4641      	mov	r1, r8
    d656:	2900      	cmp	r1, #0
    d658:	d0f1      	beq.n	d63e <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    d65a:	002e      	movs	r6, r5
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    d65c:	68a2      	ldr	r2, [r4, #8]
    d65e:	05d3      	lsls	r3, r2, #23
    d660:	0ddb      	lsrs	r3, r3, #23
    d662:	d000      	beq.n	d666 <f_write+0x92>
    d664:	e084      	b.n	d770 <f_write+0x19c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    d666:	6820      	ldr	r0, [r4, #0]
    d668:	0a53      	lsrs	r3, r2, #9
    d66a:	7881      	ldrb	r1, [r0, #2]
    d66c:	3901      	subs	r1, #1
    d66e:	400b      	ands	r3, r1
    d670:	b2db      	uxtb	r3, r3
    d672:	4699      	mov	r9, r3
			if (!csect) {					/* On the cluster boundary? */
    d674:	2b00      	cmp	r3, #0
    d676:	d10e      	bne.n	d696 <f_write+0xc2>
				if (fp->fptr == 0) {		/* On the top of the file? */
    d678:	2a00      	cmp	r2, #0
    d67a:	d000      	beq.n	d67e <f_write+0xaa>
    d67c:	e0f7      	b.n	d86e <f_write+0x29a>
					clst = fp->sclust;		/* Follow from the origin */
    d67e:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    d680:	2b00      	cmp	r3, #0
    d682:	d100      	bne.n	d686 <f_write+0xb2>
    d684:	e105      	b.n	d892 <f_write+0x2be>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    d686:	2b01      	cmp	r3, #1
    d688:	d100      	bne.n	d68c <f_write+0xb8>
    d68a:	e10e      	b.n	d8aa <f_write+0x2d6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    d68c:	1c5a      	adds	r2, r3, #1
    d68e:	d100      	bne.n	d692 <f_write+0xbe>
    d690:	e111      	b.n	d8b6 <f_write+0x2e2>
    d692:	6820      	ldr	r0, [r4, #0]
				fp->clust = clst;			/* Update current cluster */
    d694:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    d696:	2540      	movs	r5, #64	; 0x40
    d698:	79a2      	ldrb	r2, [r4, #6]
    d69a:	4215      	tst	r5, r2
    d69c:	d000      	beq.n	d6a0 <f_write+0xcc>
    d69e:	e0c6      	b.n	d82e <f_write+0x25a>
	clst -= 2;
    d6a0:	6963      	ldr	r3, [r4, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    d6a2:	69c1      	ldr	r1, [r0, #28]
	clst -= 2;
    d6a4:	3b02      	subs	r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    d6a6:	3902      	subs	r1, #2
    d6a8:	428b      	cmp	r3, r1
    d6aa:	d300      	bcc.n	d6ae <f_write+0xda>
    d6ac:	e0f7      	b.n	d89e <f_write+0x2ca>
	return clst * fs->csize + fs->database;
    d6ae:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    d6b0:	7881      	ldrb	r1, [r0, #2]
    d6b2:	46aa      	mov	sl, r5
    d6b4:	434b      	muls	r3, r1
    d6b6:	9301      	str	r3, [sp, #4]
    d6b8:	4453      	add	r3, sl
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    d6ba:	2b00      	cmp	r3, #0
    d6bc:	d100      	bne.n	d6c0 <f_write+0xec>
    d6be:	e0ee      	b.n	d89e <f_write+0x2ca>
			sect += csect;
    d6c0:	444b      	add	r3, r9
    d6c2:	9300      	str	r3, [sp, #0]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    d6c4:	4643      	mov	r3, r8
    d6c6:	0a5d      	lsrs	r5, r3, #9
			if (cc) {						/* Write maximum contiguous sectors directly */
    d6c8:	d046      	beq.n	d758 <f_write+0x184>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    d6ca:	464b      	mov	r3, r9
    d6cc:	195b      	adds	r3, r3, r5
    d6ce:	428b      	cmp	r3, r1
    d6d0:	d901      	bls.n	d6d6 <f_write+0x102>
					cc = fp->fs->csize - csect;
    d6d2:	464b      	mov	r3, r9
    d6d4:	1acd      	subs	r5, r1, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    d6d6:	b2eb      	uxtb	r3, r5
    d6d8:	7840      	ldrb	r0, [r0, #1]
    d6da:	9a00      	ldr	r2, [sp, #0]
    d6dc:	0031      	movs	r1, r6
    d6de:	4f7a      	ldr	r7, [pc, #488]	; (d8c8 <f_write+0x2f4>)
    d6e0:	47b8      	blx	r7
    d6e2:	2800      	cmp	r0, #0
    d6e4:	d000      	beq.n	d6e8 <f_write+0x114>
    d6e6:	e0bb      	b.n	d860 <f_write+0x28c>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    d6e8:	69a3      	ldr	r3, [r4, #24]
    d6ea:	9a00      	ldr	r2, [sp, #0]
    d6ec:	1a9f      	subs	r7, r3, r2
    d6ee:	42bd      	cmp	r5, r7
    d6f0:	d92f      	bls.n	d752 <f_write+0x17e>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    d6f2:	027f      	lsls	r7, r7, #9
    d6f4:	19f1      	adds	r1, r6, r7
    d6f6:	9100      	str	r1, [sp, #0]
    d6f8:	4649      	mov	r1, r9
    d6fa:	1a5b      	subs	r3, r3, r1
    d6fc:	4651      	mov	r1, sl
    d6fe:	0022      	movs	r2, r4
    d700:	0007      	movs	r7, r0
    d702:	1a5b      	subs	r3, r3, r1
    d704:	9901      	ldr	r1, [sp, #4]
    d706:	3224      	adds	r2, #36	; 0x24
    d708:	1a5b      	subs	r3, r3, r1
    d70a:	025b      	lsls	r3, r3, #9
    d70c:	18f1      	adds	r1, r6, r3
    d70e:	3304      	adds	r3, #4
    d710:	18f3      	adds	r3, r6, r3
    d712:	429a      	cmp	r2, r3
    d714:	4147      	adcs	r7, r0
    d716:	003b      	movs	r3, r7
    d718:	2728      	movs	r7, #40	; 0x28
    d71a:	46bc      	mov	ip, r7
    d71c:	44a4      	add	ip, r4
    d71e:	4667      	mov	r7, ip
    d720:	42b9      	cmp	r1, r7
    d722:	4140      	adcs	r0, r0
    d724:	4318      	orrs	r0, r3
    d726:	b2c0      	uxtb	r0, r0
    d728:	2800      	cmp	r0, #0
    d72a:	d100      	bne.n	d72e <f_write+0x15a>
    d72c:	e0a7      	b.n	d87e <f_write+0x2aa>
    d72e:	0013      	movs	r3, r2
    d730:	430b      	orrs	r3, r1
    d732:	079b      	lsls	r3, r3, #30
    d734:	d000      	beq.n	d738 <f_write+0x164>
    d736:	e0a2      	b.n	d87e <f_write+0x2aa>
    d738:	0013      	movs	r3, r2
    d73a:	000a      	movs	r2, r1
    d73c:	2189      	movs	r1, #137	; 0x89
    d73e:	0089      	lsls	r1, r1, #2
    d740:	1860      	adds	r0, r4, r1
		*d++ = *s++;
    d742:	ca02      	ldmia	r2!, {r1}
    d744:	c302      	stmia	r3!, {r1}
    d746:	4283      	cmp	r3, r0
    d748:	d1fb      	bne.n	d742 <f_write+0x16e>
					fp->flag &= ~FA__DIRTY;
    d74a:	2240      	movs	r2, #64	; 0x40
    d74c:	79a3      	ldrb	r3, [r4, #6]
    d74e:	4393      	bics	r3, r2
    d750:	71a3      	strb	r3, [r4, #6]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    d752:	026d      	lsls	r5, r5, #9
    d754:	68a3      	ldr	r3, [r4, #8]
				continue;
    d756:	e051      	b.n	d7fc <f_write+0x228>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    d758:	69a3      	ldr	r3, [r4, #24]
    d75a:	9a00      	ldr	r2, [sp, #0]
    d75c:	429a      	cmp	r2, r3
    d75e:	d07d      	beq.n	d85c <f_write+0x288>
				if (fp->fptr < fp->fsize &&
    d760:	68a3      	ldr	r3, [r4, #8]
    d762:	68e2      	ldr	r2, [r4, #12]
    d764:	4293      	cmp	r3, r2
    d766:	d370      	bcc.n	d84a <f_write+0x276>
			fp->dsect = sect;
    d768:	9a00      	ldr	r2, [sp, #0]
    d76a:	05db      	lsls	r3, r3, #23
    d76c:	61a2      	str	r2, [r4, #24]
    d76e:	0ddb      	lsrs	r3, r3, #23
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    d770:	2580      	movs	r5, #128	; 0x80
    d772:	00ad      	lsls	r5, r5, #2
    d774:	1aed      	subs	r5, r5, r3
    d776:	4545      	cmp	r5, r8
    d778:	d900      	bls.n	d77c <f_write+0x1a8>
    d77a:	4645      	mov	r5, r8
    d77c:	2100      	movs	r1, #0
    d77e:	000f      	movs	r7, r1
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    d780:	001a      	movs	r2, r3
    d782:	3328      	adds	r3, #40	; 0x28
    d784:	18e3      	adds	r3, r4, r3
    d786:	429e      	cmp	r6, r3
    d788:	414f      	adcs	r7, r1
    d78a:	3224      	adds	r2, #36	; 0x24
    d78c:	003b      	movs	r3, r7
    d78e:	18a2      	adds	r2, r4, r2
    d790:	1d37      	adds	r7, r6, #4
    d792:	42ba      	cmp	r2, r7
    d794:	4149      	adcs	r1, r1
    d796:	4319      	orrs	r1, r3
    d798:	2309      	movs	r3, #9
    d79a:	42ab      	cmp	r3, r5
    d79c:	419b      	sbcs	r3, r3
    d79e:	425b      	negs	r3, r3
	while (cnt--)
    d7a0:	1e68      	subs	r0, r5, #1
    d7a2:	420b      	tst	r3, r1
    d7a4:	d03c      	beq.n	d820 <f_write+0x24c>
    d7a6:	0013      	movs	r3, r2
    d7a8:	4333      	orrs	r3, r6
    d7aa:	079b      	lsls	r3, r3, #30
    d7ac:	d138      	bne.n	d820 <f_write+0x24c>
    d7ae:	1f2b      	subs	r3, r5, #4
    d7b0:	089b      	lsrs	r3, r3, #2
    d7b2:	3301      	adds	r3, #1
    d7b4:	0099      	lsls	r1, r3, #2
    d7b6:	468c      	mov	ip, r1
    d7b8:	2802      	cmp	r0, #2
    d7ba:	d92f      	bls.n	d81c <f_write+0x248>
    d7bc:	2100      	movs	r1, #0
    d7be:	2700      	movs	r7, #0
    d7c0:	4681      	mov	r9, r0
		*d++ = *s++;
    d7c2:	5870      	ldr	r0, [r6, r1]
    d7c4:	3701      	adds	r7, #1
    d7c6:	5050      	str	r0, [r2, r1]
    d7c8:	3104      	adds	r1, #4
    d7ca:	42bb      	cmp	r3, r7
    d7cc:	d8f9      	bhi.n	d7c2 <f_write+0x1ee>
    d7ce:	4648      	mov	r0, r9
    d7d0:	4663      	mov	r3, ip
    d7d2:	4661      	mov	r1, ip
    d7d4:	4462      	add	r2, ip
    d7d6:	18f3      	adds	r3, r6, r3
    d7d8:	1a40      	subs	r0, r0, r1
    d7da:	45ac      	cmp	ip, r5
    d7dc:	d009      	beq.n	d7f2 <f_write+0x21e>
    d7de:	7819      	ldrb	r1, [r3, #0]
    d7e0:	7011      	strb	r1, [r2, #0]
	while (cnt--)
    d7e2:	2800      	cmp	r0, #0
    d7e4:	d005      	beq.n	d7f2 <f_write+0x21e>
		*d++ = *s++;
    d7e6:	7859      	ldrb	r1, [r3, #1]
    d7e8:	7051      	strb	r1, [r2, #1]
	while (cnt--)
    d7ea:	2801      	cmp	r0, #1
    d7ec:	d001      	beq.n	d7f2 <f_write+0x21e>
		*d++ = *s++;
    d7ee:	789b      	ldrb	r3, [r3, #2]
    d7f0:	7093      	strb	r3, [r2, #2]
		fp->flag |= FA__DIRTY;
    d7f2:	2140      	movs	r1, #64	; 0x40
    d7f4:	79a2      	ldrb	r2, [r4, #6]
    d7f6:	68a3      	ldr	r3, [r4, #8]
    d7f8:	430a      	orrs	r2, r1
    d7fa:	71a2      	strb	r2, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    d7fc:	18eb      	adds	r3, r5, r3
    d7fe:	60a3      	str	r3, [r4, #8]
    d800:	465b      	mov	r3, fp
    d802:	465a      	mov	r2, fp
    d804:	681b      	ldr	r3, [r3, #0]
    d806:	1976      	adds	r6, r6, r5
    d808:	195b      	adds	r3, r3, r5
    d80a:	6013      	str	r3, [r2, #0]
    d80c:	4643      	mov	r3, r8
    d80e:	1b5b      	subs	r3, r3, r5
    d810:	4698      	mov	r8, r3
	for ( ;  btw;							/* Repeat until all data written */
    d812:	d000      	beq.n	d816 <f_write+0x242>
    d814:	e722      	b.n	d65c <f_write+0x88>
    d816:	68e2      	ldr	r2, [r4, #12]
    d818:	79a3      	ldrb	r3, [r4, #6]
    d81a:	e710      	b.n	d63e <f_write+0x6a>
	while (cnt--)
    d81c:	0033      	movs	r3, r6
    d81e:	e7de      	b.n	d7de <f_write+0x20a>
    d820:	2300      	movs	r3, #0
		*d++ = *s++;
    d822:	5cf1      	ldrb	r1, [r6, r3]
    d824:	54d1      	strb	r1, [r2, r3]
    d826:	3301      	adds	r3, #1
	while (cnt--)
    d828:	429d      	cmp	r5, r3
    d82a:	d1fa      	bne.n	d822 <f_write+0x24e>
    d82c:	e7e1      	b.n	d7f2 <f_write+0x21e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    d82e:	0021      	movs	r1, r4
    d830:	69a2      	ldr	r2, [r4, #24]
    d832:	7840      	ldrb	r0, [r0, #1]
    d834:	2301      	movs	r3, #1
    d836:	3124      	adds	r1, #36	; 0x24
    d838:	4f23      	ldr	r7, [pc, #140]	; (d8c8 <f_write+0x2f4>)
    d83a:	47b8      	blx	r7
					ABORT(fp->fs, FR_DISK_ERR);
    d83c:	79a2      	ldrb	r2, [r4, #6]
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    d83e:	2800      	cmp	r0, #0
    d840:	d10f      	bne.n	d862 <f_write+0x28e>
				fp->flag &= ~FA__DIRTY;
    d842:	43aa      	bics	r2, r5
    d844:	71a2      	strb	r2, [r4, #6]
    d846:	6820      	ldr	r0, [r4, #0]
    d848:	e72a      	b.n	d6a0 <f_write+0xcc>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    d84a:	0021      	movs	r1, r4
    d84c:	7840      	ldrb	r0, [r0, #1]
    d84e:	2301      	movs	r3, #1
    d850:	9a00      	ldr	r2, [sp, #0]
    d852:	3124      	adds	r1, #36	; 0x24
    d854:	4d1d      	ldr	r5, [pc, #116]	; (d8cc <f_write+0x2f8>)
    d856:	47a8      	blx	r5
				if (fp->fptr < fp->fsize &&
    d858:	2800      	cmp	r0, #0
    d85a:	d101      	bne.n	d860 <f_write+0x28c>
    d85c:	68a3      	ldr	r3, [r4, #8]
    d85e:	e783      	b.n	d768 <f_write+0x194>
					ABORT(fp->fs, FR_DISK_ERR);
    d860:	79a2      	ldrb	r2, [r4, #6]
    d862:	2380      	movs	r3, #128	; 0x80
    d864:	425b      	negs	r3, r3
    d866:	4313      	orrs	r3, r2
    d868:	71a3      	strb	r3, [r4, #6]
    d86a:	2001      	movs	r0, #1
    d86c:	e6c7      	b.n	d5fe <f_write+0x2a>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    d86e:	4b18      	ldr	r3, [pc, #96]	; (d8d0 <f_write+0x2fc>)
    d870:	6961      	ldr	r1, [r4, #20]
    d872:	4798      	blx	r3
    d874:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    d876:	2b00      	cmp	r3, #0
    d878:	d000      	beq.n	d87c <f_write+0x2a8>
    d87a:	e704      	b.n	d686 <f_write+0xb2>
    d87c:	e7cb      	b.n	d816 <f_write+0x242>
	while (cnt--)
    d87e:	2080      	movs	r0, #128	; 0x80
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    d880:	2300      	movs	r3, #0
	while (cnt--)
    d882:	9f00      	ldr	r7, [sp, #0]
    d884:	0080      	lsls	r0, r0, #2
		*d++ = *s++;
    d886:	5cf9      	ldrb	r1, [r7, r3]
    d888:	54d1      	strb	r1, [r2, r3]
    d88a:	3301      	adds	r3, #1
	while (cnt--)
    d88c:	4283      	cmp	r3, r0
    d88e:	d1fa      	bne.n	d886 <f_write+0x2b2>
    d890:	e75b      	b.n	d74a <f_write+0x176>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    d892:	4b0f      	ldr	r3, [pc, #60]	; (d8d0 <f_write+0x2fc>)
    d894:	2100      	movs	r1, #0
    d896:	4798      	blx	r3
    d898:	0003      	movs	r3, r0
    d89a:	6120      	str	r0, [r4, #16]
    d89c:	e7eb      	b.n	d876 <f_write+0x2a2>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    d89e:	2380      	movs	r3, #128	; 0x80
    d8a0:	425b      	negs	r3, r3
    d8a2:	431a      	orrs	r2, r3
    d8a4:	71a2      	strb	r2, [r4, #6]
    d8a6:	2002      	movs	r0, #2
    d8a8:	e6a9      	b.n	d5fe <f_write+0x2a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    d8aa:	79a2      	ldrb	r2, [r4, #6]
    d8ac:	3b81      	subs	r3, #129	; 0x81
    d8ae:	4313      	orrs	r3, r2
    d8b0:	71a3      	strb	r3, [r4, #6]
    d8b2:	2002      	movs	r0, #2
    d8b4:	e6a3      	b.n	d5fe <f_write+0x2a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    d8b6:	79a2      	ldrb	r2, [r4, #6]
    d8b8:	3b7f      	subs	r3, #127	; 0x7f
    d8ba:	4313      	orrs	r3, r2
    d8bc:	71a3      	strb	r3, [r4, #6]
    d8be:	2001      	movs	r0, #1
    d8c0:	e69d      	b.n	d5fe <f_write+0x2a>
    d8c2:	46c0      	nop			; (mov r8, r8)
    d8c4:	00009d1d 	.word	0x00009d1d
    d8c8:	00009dc1 	.word	0x00009dc1
    d8cc:	00009d3d 	.word	0x00009d3d
    d8d0:	0000b1cd 	.word	0x0000b1cd

0000d8d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    d8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8d6:	46d6      	mov	lr, sl
    d8d8:	464f      	mov	r7, r9
    d8da:	4646      	mov	r6, r8
    d8dc:	b5c0      	push	{r6, r7, lr}
	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    d8de:	6803      	ldr	r3, [r0, #0]
{
    d8e0:	0004      	movs	r4, r0
	if (!fs || !fs->fs_type || fs->id != id)
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	d063      	beq.n	d9ae <f_close+0xda>
    d8e6:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    d8e8:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    d8ea:	2a00      	cmp	r2, #0
    d8ec:	d104      	bne.n	d8f8 <f_close+0x24>
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	return res;
#endif
}
    d8ee:	bc1c      	pop	{r2, r3, r4}
    d8f0:	4690      	mov	r8, r2
    d8f2:	4699      	mov	r9, r3
    d8f4:	46a2      	mov	sl, r4
    d8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    d8f8:	88a1      	ldrh	r1, [r4, #4]
    d8fa:	88da      	ldrh	r2, [r3, #6]
    d8fc:	4291      	cmp	r1, r2
    d8fe:	d1f6      	bne.n	d8ee <f_close+0x1a>
	if (disk_status(fs->drv) & STA_NOINIT)
    d900:	7858      	ldrb	r0, [r3, #1]
    d902:	4b44      	ldr	r3, [pc, #272]	; (da14 <f_close+0x140>)
    d904:	4798      	blx	r3
    d906:	0003      	movs	r3, r0
		return FR_NOT_READY;
    d908:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    d90a:	07db      	lsls	r3, r3, #31
    d90c:	d4ef      	bmi.n	d8ee <f_close+0x1a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    d90e:	79a3      	ldrb	r3, [r4, #6]
    d910:	069a      	lsls	r2, r3, #26
    d912:	d548      	bpl.n	d9a6 <f_close+0xd2>
			if (fp->flag & FA__DIRTY) {
    d914:	2540      	movs	r5, #64	; 0x40
    d916:	421d      	tst	r5, r3
    d918:	d00c      	beq.n	d934 <f_close+0x60>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    d91a:	0021      	movs	r1, r4
    d91c:	6823      	ldr	r3, [r4, #0]
    d91e:	69a2      	ldr	r2, [r4, #24]
    d920:	7858      	ldrb	r0, [r3, #1]
    d922:	3124      	adds	r1, #36	; 0x24
    d924:	2301      	movs	r3, #1
    d926:	4e3c      	ldr	r6, [pc, #240]	; (da18 <f_close+0x144>)
    d928:	47b0      	blx	r6
    d92a:	2800      	cmp	r0, #0
    d92c:	d14d      	bne.n	d9ca <f_close+0xf6>
				fp->flag &= ~FA__DIRTY;
    d92e:	79a3      	ldrb	r3, [r4, #6]
    d930:	43ab      	bics	r3, r5
    d932:	71a3      	strb	r3, [r4, #6]
			res = move_window(fp->fs, fp->dir_sect);
    d934:	6825      	ldr	r5, [r4, #0]
    d936:	69e3      	ldr	r3, [r4, #28]
	wsect = fs->winsect;
    d938:	6b2e      	ldr	r6, [r5, #48]	; 0x30
			res = move_window(fp->fs, fp->dir_sect);
    d93a:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    d93c:	42b3      	cmp	r3, r6
    d93e:	d005      	beq.n	d94c <f_close+0x78>
		if (fs->wflag) {	/* Write back dirty window if needed */
    d940:	792b      	ldrb	r3, [r5, #4]
    d942:	2b00      	cmp	r3, #0
    d944:	d135      	bne.n	d9b2 <f_close+0xde>
		if (sector) {
    d946:	4643      	mov	r3, r8
    d948:	2b00      	cmp	r3, #0
    d94a:	d140      	bne.n	d9ce <f_close+0xfa>
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    d94c:	2220      	movs	r2, #32
				dir = fp->dir_ptr;
    d94e:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    d950:	7aeb      	ldrb	r3, [r5, #11]
    d952:	4313      	orrs	r3, r2
    d954:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    d956:	7b23      	ldrb	r3, [r4, #12]
    d958:	772b      	strb	r3, [r5, #28]
    d95a:	89a3      	ldrh	r3, [r4, #12]
    d95c:	0a1b      	lsrs	r3, r3, #8
    d95e:	776b      	strb	r3, [r5, #29]
    d960:	89e3      	ldrh	r3, [r4, #14]
    d962:	77ab      	strb	r3, [r5, #30]
    d964:	7be3      	ldrb	r3, [r4, #15]
    d966:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    d968:	7c23      	ldrb	r3, [r4, #16]
    d96a:	76ab      	strb	r3, [r5, #26]
    d96c:	8a23      	ldrh	r3, [r4, #16]
    d96e:	0a1b      	lsrs	r3, r3, #8
    d970:	76eb      	strb	r3, [r5, #27]
    d972:	8a63      	ldrh	r3, [r4, #18]
    d974:	752b      	strb	r3, [r5, #20]
    d976:	8a63      	ldrh	r3, [r4, #18]
    d978:	0a1b      	lsrs	r3, r3, #8
    d97a:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    d97c:	4b27      	ldr	r3, [pc, #156]	; (da1c <f_close+0x148>)
    d97e:	4798      	blx	r3
				fp->flag &= ~FA__WRITTEN;
    d980:	2220      	movs	r2, #32
				ST_DWORD(dir+DIR_WrtTime, tim);
    d982:	0a03      	lsrs	r3, r0, #8
    d984:	75a8      	strb	r0, [r5, #22]
    d986:	75eb      	strb	r3, [r5, #23]
    d988:	0c03      	lsrs	r3, r0, #16
    d98a:	0e00      	lsrs	r0, r0, #24
    d98c:	762b      	strb	r3, [r5, #24]
    d98e:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    d990:	79a3      	ldrb	r3, [r4, #6]
    d992:	4393      	bics	r3, r2
    d994:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    d996:	2301      	movs	r3, #1
    d998:	6822      	ldr	r2, [r4, #0]
    d99a:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    d99c:	6820      	ldr	r0, [r4, #0]
    d99e:	4b20      	ldr	r3, [pc, #128]	; (da20 <f_close+0x14c>)
    d9a0:	4798      	blx	r3
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    d9a2:	2800      	cmp	r0, #0
    d9a4:	d1a3      	bne.n	d8ee <f_close+0x1a>
    d9a6:	2300      	movs	r3, #0
    d9a8:	2000      	movs	r0, #0
    d9aa:	6023      	str	r3, [r4, #0]
    d9ac:	e79f      	b.n	d8ee <f_close+0x1a>
		return FR_INVALID_OBJECT;
    d9ae:	2009      	movs	r0, #9
    d9b0:	e79d      	b.n	d8ee <f_close+0x1a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    d9b2:	2334      	movs	r3, #52	; 0x34
    d9b4:	4699      	mov	r9, r3
    d9b6:	4f18      	ldr	r7, [pc, #96]	; (da18 <f_close+0x144>)
    d9b8:	44a9      	add	r9, r5
    d9ba:	7868      	ldrb	r0, [r5, #1]
    d9bc:	3b33      	subs	r3, #51	; 0x33
    d9be:	0032      	movs	r2, r6
    d9c0:	4649      	mov	r1, r9
    d9c2:	46ba      	mov	sl, r7
    d9c4:	47b8      	blx	r7
    d9c6:	2800      	cmp	r0, #0
    d9c8:	d00d      	beq.n	d9e6 <f_close+0x112>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    d9ca:	2001      	movs	r0, #1
    d9cc:	e78f      	b.n	d8ee <f_close+0x1a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    d9ce:	0029      	movs	r1, r5
    d9d0:	7868      	ldrb	r0, [r5, #1]
    d9d2:	2301      	movs	r3, #1
    d9d4:	4642      	mov	r2, r8
    d9d6:	3134      	adds	r1, #52	; 0x34
    d9d8:	4e12      	ldr	r6, [pc, #72]	; (da24 <f_close+0x150>)
    d9da:	47b0      	blx	r6
    d9dc:	2800      	cmp	r0, #0
    d9de:	d1f4      	bne.n	d9ca <f_close+0xf6>
			fs->winsect = sector;
    d9e0:	4643      	mov	r3, r8
    d9e2:	632b      	str	r3, [r5, #48]	; 0x30
    d9e4:	e7b2      	b.n	d94c <f_close+0x78>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    d9e6:	6a2b      	ldr	r3, [r5, #32]
    d9e8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			fs->wflag = 0;
    d9ea:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    d9ec:	189a      	adds	r2, r3, r2
    d9ee:	4296      	cmp	r6, r2
    d9f0:	d2a9      	bcs.n	d946 <f_close+0x72>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    d9f2:	78ef      	ldrb	r7, [r5, #3]
    d9f4:	2f01      	cmp	r7, #1
    d9f6:	d801      	bhi.n	d9fc <f_close+0x128>
    d9f8:	e7a5      	b.n	d946 <f_close+0x72>
    d9fa:	6a2b      	ldr	r3, [r5, #32]
					wsect += fs->fsize;
    d9fc:	18f6      	adds	r6, r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    d9fe:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    da00:	7868      	ldrb	r0, [r5, #1]
    da02:	2301      	movs	r3, #1
    da04:	0032      	movs	r2, r6
    da06:	4649      	mov	r1, r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    da08:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    da0a:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    da0c:	2f01      	cmp	r7, #1
    da0e:	d1f4      	bne.n	d9fa <f_close+0x126>
    da10:	e799      	b.n	d946 <f_close+0x72>
    da12:	46c0      	nop			; (mov r8, r8)
    da14:	00009d1d 	.word	0x00009d1d
    da18:	00009dc1 	.word	0x00009dc1
    da1c:	00009eb1 	.word	0x00009eb1
    da20:	0000a609 	.word	0x0000a609
    da24:	00009d3d 	.word	0x00009d3d

0000da28 <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
    da28:	b5f0      	push	{r4, r5, r6, r7, lr}
    da2a:	46de      	mov	lr, fp
    da2c:	4657      	mov	r7, sl
    da2e:	464e      	mov	r6, r9
    da30:	4645      	mov	r5, r8
    da32:	b5e0      	push	{r5, r6, r7, lr}
	vol = p[0] - '0';					/* Is there a drive number? */
    da34:	7803      	ldrb	r3, [r0, #0]
{
    da36:	4cc2      	ldr	r4, [pc, #776]	; (dd40 <f_chdir+0x318>)
	vol = p[0] - '0';					/* Is there a drive number? */
    da38:	3b30      	subs	r3, #48	; 0x30
{
    da3a:	44a5      	add	sp, r4
    da3c:	0004      	movs	r4, r0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    da3e:	2b09      	cmp	r3, #9
    da40:	d802      	bhi.n	da48 <f_chdir+0x20>
    da42:	7842      	ldrb	r2, [r0, #1]
    da44:	2a3a      	cmp	r2, #58	; 0x3a
    da46:	d038      	beq.n	daba <f_chdir+0x92>
		vol = CurrVol;					/* Use current drive */
    da48:	4bbe      	ldr	r3, [pc, #760]	; (dd44 <f_chdir+0x31c>)
    da4a:	781b      	ldrb	r3, [r3, #0]
		return FR_INVALID_DRIVE;
    da4c:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    da4e:	2b00      	cmp	r3, #0
    da50:	d008      	beq.n	da64 <f_chdir+0x3c>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj.fs, res);
}
    da52:	2391      	movs	r3, #145	; 0x91
    da54:	009b      	lsls	r3, r3, #2
    da56:	449d      	add	sp, r3
    da58:	bc3c      	pop	{r2, r3, r4, r5}
    da5a:	4690      	mov	r8, r2
    da5c:	4699      	mov	r9, r3
    da5e:	46a2      	mov	sl, r4
    da60:	46ab      	mov	fp, r5
    da62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    da64:	4bb8      	ldr	r3, [pc, #736]	; (dd48 <f_chdir+0x320>)
    da66:	681d      	ldr	r5, [r3, #0]
    da68:	9507      	str	r5, [sp, #28]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    da6a:	2d00      	cmp	r5, #0
    da6c:	d041      	beq.n	daf2 <f_chdir+0xca>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    da6e:	782b      	ldrb	r3, [r5, #0]
    da70:	2b00      	cmp	r3, #0
    da72:	d024      	beq.n	dabe <f_chdir+0x96>
		stat = disk_status(fs->drv);
    da74:	4bb5      	ldr	r3, [pc, #724]	; (dd4c <f_chdir+0x324>)
    da76:	7868      	ldrb	r0, [r5, #1]
    da78:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    da7a:	07c3      	lsls	r3, r0, #31
    da7c:	d41f      	bmi.n	dabe <f_chdir+0x96>
		INIT_BUF(dj);
    da7e:	ab04      	add	r3, sp, #16
    da80:	930d      	str	r3, [sp, #52]	; 0x34
    da82:	ab10      	add	r3, sp, #64	; 0x40
    da84:	930e      	str	r3, [sp, #56]	; 0x38
		res = follow_path(&dj, path);		/* Follow the path */
    da86:	0021      	movs	r1, r4
    da88:	a807      	add	r0, sp, #28
    da8a:	4bb1      	ldr	r3, [pc, #708]	; (dd50 <f_chdir+0x328>)
    da8c:	4798      	blx	r3
		if (res == FR_OK) {					/* Follow completed */
    da8e:	2800      	cmp	r0, #0
    da90:	d12b      	bne.n	daea <f_chdir+0xc2>
			if (!dj.dir) {
    da92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    da94:	2b00      	cmp	r3, #0
    da96:	d100      	bne.n	da9a <f_chdir+0x72>
    da98:	e12c      	b.n	dcf4 <f_chdir+0x2cc>
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    da9a:	7ada      	ldrb	r2, [r3, #11]
    da9c:	06d2      	lsls	r2, r2, #27
    da9e:	d526      	bpl.n	daee <f_chdir+0xc6>
					dj.fs->cdir = LD_CLUST(dj.dir);
    daa0:	7d59      	ldrb	r1, [r3, #21]
    daa2:	7d1a      	ldrb	r2, [r3, #20]
    daa4:	0209      	lsls	r1, r1, #8
    daa6:	430a      	orrs	r2, r1
    daa8:	7ed9      	ldrb	r1, [r3, #27]
    daaa:	7e9b      	ldrb	r3, [r3, #26]
    daac:	0209      	lsls	r1, r1, #8
    daae:	9c07      	ldr	r4, [sp, #28]
    dab0:	0412      	lsls	r2, r2, #16
    dab2:	430b      	orrs	r3, r1
    dab4:	4313      	orrs	r3, r2
    dab6:	61a3      	str	r3, [r4, #24]
    dab8:	e7cb      	b.n	da52 <f_chdir+0x2a>
		p += 2; *path = p;				/* Return pointer to the path name */
    daba:	3402      	adds	r4, #2
    dabc:	e7c6      	b.n	da4c <f_chdir+0x24>
	fs->fs_type = 0;					/* Clear the file system object */
    dabe:	2300      	movs	r3, #0
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    dac0:	2000      	movs	r0, #0
	fs->fs_type = 0;					/* Clear the file system object */
    dac2:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    dac4:	706b      	strb	r3, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    dac6:	4ba3      	ldr	r3, [pc, #652]	; (dd54 <f_chdir+0x32c>)
    dac8:	4798      	blx	r3
    daca:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    dacc:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    dace:	07db      	lsls	r3, r3, #31
    dad0:	d4bf      	bmi.n	da52 <f_chdir+0x2a>
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    dad2:	002f      	movs	r7, r5
    dad4:	3734      	adds	r7, #52	; 0x34
    dad6:	7868      	ldrb	r0, [r5, #1]
    dad8:	2301      	movs	r3, #1
    dada:	2200      	movs	r2, #0
    dadc:	0039      	movs	r1, r7
    dade:	4e9e      	ldr	r6, [pc, #632]	; (dd58 <f_chdir+0x330>)
    dae0:	47b0      	blx	r6
    dae2:	2800      	cmp	r0, #0
    dae4:	d007      	beq.n	daf6 <f_chdir+0xce>
	if (fmt == 3) return FR_DISK_ERR;
    dae6:	2001      	movs	r0, #1
    dae8:	e7b3      	b.n	da52 <f_chdir+0x2a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    daea:	2804      	cmp	r0, #4
    daec:	d1b1      	bne.n	da52 <f_chdir+0x2a>
					res = FR_NO_PATH;		/* Reached but a file */
    daee:	2005      	movs	r0, #5
    daf0:	e7af      	b.n	da52 <f_chdir+0x2a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    daf2:	200c      	movs	r0, #12
    daf4:	e7ad      	b.n	da52 <f_chdir+0x2a>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    daf6:	4b99      	ldr	r3, [pc, #612]	; (dd5c <f_chdir+0x334>)
    daf8:	5cea      	ldrb	r2, [r5, r3]
    dafa:	469a      	mov	sl, r3
    dafc:	4b98      	ldr	r3, [pc, #608]	; (dd60 <f_chdir+0x338>)
    dafe:	0212      	lsls	r2, r2, #8
    db00:	469b      	mov	fp, r3
    db02:	5ceb      	ldrb	r3, [r5, r3]
    db04:	4313      	orrs	r3, r2
    db06:	4a97      	ldr	r2, [pc, #604]	; (dd64 <f_chdir+0x33c>)
    db08:	b21b      	sxth	r3, r3
    db0a:	4699      	mov	r9, r3
    db0c:	4293      	cmp	r3, r2
    db0e:	d001      	beq.n	db14 <f_chdir+0xec>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    db10:	200d      	movs	r0, #13
	LEAVE_FF(dj.fs, res);
    db12:	e79e      	b.n	da52 <f_chdir+0x2a>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    db14:	236a      	movs	r3, #106	; 0x6a
    db16:	469c      	mov	ip, r3
    db18:	44ac      	add	ip, r5
    db1a:	4663      	mov	r3, ip
    db1c:	881a      	ldrh	r2, [r3, #0]
    db1e:	9303      	str	r3, [sp, #12]
    db20:	885b      	ldrh	r3, [r3, #2]
    db22:	041b      	lsls	r3, r3, #16
    db24:	4313      	orrs	r3, r2
    db26:	4a90      	ldr	r2, [pc, #576]	; (dd68 <f_chdir+0x340>)
    db28:	021b      	lsls	r3, r3, #8
    db2a:	0a1b      	lsrs	r3, r3, #8
    db2c:	4690      	mov	r8, r2
    db2e:	4293      	cmp	r3, r2
    db30:	d100      	bne.n	db34 <f_chdir+0x10c>
    db32:	e0e3      	b.n	dcfc <f_chdir+0x2d4>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    db34:	2386      	movs	r3, #134	; 0x86
    db36:	469c      	mov	ip, r3
    db38:	44ac      	add	ip, r5
    db3a:	5aea      	ldrh	r2, [r5, r3]
    db3c:	4663      	mov	r3, ip
    db3e:	9301      	str	r3, [sp, #4]
    db40:	885b      	ldrh	r3, [r3, #2]
    db42:	041b      	lsls	r3, r3, #16
    db44:	4313      	orrs	r3, r2
    db46:	021b      	lsls	r3, r3, #8
    db48:	0a1b      	lsrs	r3, r3, #8
    db4a:	4543      	cmp	r3, r8
    db4c:	d100      	bne.n	db50 <f_chdir+0x128>
    db4e:	e0d5      	b.n	dcfc <f_chdir+0x2d4>
		if (tbl[4]) {						/* Is the partition existing? */
    db50:	23fb      	movs	r3, #251	; 0xfb
    db52:	005b      	lsls	r3, r3, #1
    db54:	5ceb      	ldrb	r3, [r5, r3]
    db56:	2b00      	cmp	r3, #0
    db58:	d0da      	beq.n	db10 <f_chdir+0xe8>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    db5a:	0029      	movs	r1, r5
    db5c:	23fd      	movs	r3, #253	; 0xfd
    db5e:	31fb      	adds	r1, #251	; 0xfb
    db60:	31ff      	adds	r1, #255	; 0xff
    db62:	784a      	ldrb	r2, [r1, #1]
    db64:	005b      	lsls	r3, r3, #1
    db66:	5ceb      	ldrb	r3, [r5, r3]
    db68:	0212      	lsls	r2, r2, #8
    db6a:	4313      	orrs	r3, r2
    db6c:	788a      	ldrb	r2, [r1, #2]
    db6e:	0412      	lsls	r2, r2, #16
    db70:	431a      	orrs	r2, r3
    db72:	78cb      	ldrb	r3, [r1, #3]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    db74:	0039      	movs	r1, r7
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    db76:	061b      	lsls	r3, r3, #24
    db78:	4313      	orrs	r3, r2
    db7a:	9302      	str	r3, [sp, #8]
    db7c:	001a      	movs	r2, r3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    db7e:	7868      	ldrb	r0, [r5, #1]
    db80:	2301      	movs	r3, #1
    db82:	47b0      	blx	r6
    db84:	2800      	cmp	r0, #0
    db86:	d1ae      	bne.n	dae6 <f_chdir+0xbe>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    db88:	4653      	mov	r3, sl
    db8a:	5cea      	ldrb	r2, [r5, r3]
    db8c:	465b      	mov	r3, fp
    db8e:	5ceb      	ldrb	r3, [r5, r3]
    db90:	0212      	lsls	r2, r2, #8
    db92:	4313      	orrs	r3, r2
    db94:	b21b      	sxth	r3, r3
    db96:	454b      	cmp	r3, r9
    db98:	d1ba      	bne.n	db10 <f_chdir+0xe8>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    db9a:	9b03      	ldr	r3, [sp, #12]
    db9c:	881a      	ldrh	r2, [r3, #0]
    db9e:	885b      	ldrh	r3, [r3, #2]
    dba0:	041b      	lsls	r3, r3, #16
    dba2:	4313      	orrs	r3, r2
    dba4:	021b      	lsls	r3, r3, #8
    dba6:	0a1b      	lsrs	r3, r3, #8
    dba8:	4543      	cmp	r3, r8
    dbaa:	d009      	beq.n	dbc0 <f_chdir+0x198>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    dbac:	2386      	movs	r3, #134	; 0x86
    dbae:	5aea      	ldrh	r2, [r5, r3]
    dbb0:	9b01      	ldr	r3, [sp, #4]
    dbb2:	885b      	ldrh	r3, [r3, #2]
    dbb4:	041b      	lsls	r3, r3, #16
    dbb6:	4313      	orrs	r3, r2
    dbb8:	021b      	lsls	r3, r3, #8
    dbba:	0a1b      	lsrs	r3, r3, #8
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    dbbc:	4543      	cmp	r3, r8
    dbbe:	d1a7      	bne.n	db10 <f_chdir+0xe8>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    dbc0:	2340      	movs	r3, #64	; 0x40
    dbc2:	5cea      	ldrb	r2, [r5, r3]
    dbc4:	3b01      	subs	r3, #1
    dbc6:	5ceb      	ldrb	r3, [r5, r3]
    dbc8:	0212      	lsls	r2, r2, #8
    dbca:	4313      	orrs	r3, r2
    dbcc:	2280      	movs	r2, #128	; 0x80
    dbce:	b21b      	sxth	r3, r3
    dbd0:	0092      	lsls	r2, r2, #2
    dbd2:	4293      	cmp	r3, r2
    dbd4:	d19c      	bne.n	db10 <f_chdir+0xe8>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    dbd6:	234b      	movs	r3, #75	; 0x4b
    dbd8:	5cea      	ldrb	r2, [r5, r3]
    dbda:	3b01      	subs	r3, #1
    dbdc:	5ceb      	ldrb	r3, [r5, r3]
    dbde:	0212      	lsls	r2, r2, #8
    dbe0:	4313      	orrs	r3, r2
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    dbe2:	d100      	bne.n	dbe6 <f_chdir+0x1be>
    dbe4:	6dab      	ldr	r3, [r5, #88]	; 0x58
	fs->fsize = fasize;
    dbe6:	622b      	str	r3, [r5, #32]
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    dbe8:	4699      	mov	r9, r3
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    dbea:	2344      	movs	r3, #68	; 0x44
    dbec:	5ceb      	ldrb	r3, [r5, r3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    dbee:	1e5a      	subs	r2, r3, #1
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    dbf0:	70eb      	strb	r3, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    dbf2:	2a01      	cmp	r2, #1
    dbf4:	d88c      	bhi.n	db10 <f_chdir+0xe8>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    dbf6:	2241      	movs	r2, #65	; 0x41
    dbf8:	5ca9      	ldrb	r1, [r5, r2]
    dbfa:	70a9      	strb	r1, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    dbfc:	2900      	cmp	r1, #0
    dbfe:	d100      	bne.n	dc02 <f_chdir+0x1da>
    dc00:	e786      	b.n	db10 <f_chdir+0xe8>
    dc02:	1e4a      	subs	r2, r1, #1
    dc04:	4211      	tst	r1, r2
    dc06:	d000      	beq.n	dc0a <f_chdir+0x1e2>
    dc08:	e782      	b.n	db10 <f_chdir+0xe8>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    dc0a:	2246      	movs	r2, #70	; 0x46
    dc0c:	2045      	movs	r0, #69	; 0x45
    dc0e:	5caa      	ldrb	r2, [r5, r2]
    dc10:	5c28      	ldrb	r0, [r5, r0]
    dc12:	0212      	lsls	r2, r2, #8
    dc14:	4310      	orrs	r0, r2
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    dc16:	0002      	movs	r2, r0
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    dc18:	4683      	mov	fp, r0
    dc1a:	8128      	strh	r0, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    dc1c:	0712      	lsls	r2, r2, #28
    dc1e:	d000      	beq.n	dc22 <f_chdir+0x1fa>
    dc20:	e776      	b.n	db10 <f_chdir+0xe8>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    dc22:	2248      	movs	r2, #72	; 0x48
    dc24:	2047      	movs	r0, #71	; 0x47
    dc26:	5caa      	ldrb	r2, [r5, r2]
    dc28:	5c28      	ldrb	r0, [r5, r0]
    dc2a:	0212      	lsls	r2, r2, #8
    dc2c:	4310      	orrs	r0, r2
    dc2e:	9001      	str	r0, [sp, #4]
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    dc30:	d101      	bne.n	dc36 <f_chdir+0x20e>
    dc32:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    dc34:	9201      	str	r2, [sp, #4]
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    dc36:	2243      	movs	r2, #67	; 0x43
    dc38:	2042      	movs	r0, #66	; 0x42
    dc3a:	5caa      	ldrb	r2, [r5, r2]
    dc3c:	5c28      	ldrb	r0, [r5, r0]
    dc3e:	0212      	lsls	r2, r2, #8
    dc40:	4310      	orrs	r0, r2
    dc42:	4680      	mov	r8, r0
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    dc44:	d100      	bne.n	dc48 <f_chdir+0x220>
    dc46:	e763      	b.n	db10 <f_chdir+0xe8>
	fasize *= b;										/* Number of sectors for FAT area */
    dc48:	464a      	mov	r2, r9
    dc4a:	435a      	muls	r2, r3
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    dc4c:	465b      	mov	r3, fp
    dc4e:	4692      	mov	sl, r2
    dc50:	091b      	lsrs	r3, r3, #4
    dc52:	4443      	add	r3, r8
    dc54:	449a      	add	sl, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    dc56:	9b01      	ldr	r3, [sp, #4]
	fasize *= b;										/* Number of sectors for FAT area */
    dc58:	9203      	str	r2, [sp, #12]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    dc5a:	459a      	cmp	sl, r3
    dc5c:	d900      	bls.n	dc60 <f_chdir+0x238>
    dc5e:	e757      	b.n	db10 <f_chdir+0xe8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    dc60:	4653      	mov	r3, sl
    dc62:	9a01      	ldr	r2, [sp, #4]
    dc64:	1ad0      	subs	r0, r2, r3
    dc66:	4b41      	ldr	r3, [pc, #260]	; (dd6c <f_chdir+0x344>)
    dc68:	4798      	blx	r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    dc6a:	2800      	cmp	r0, #0
    dc6c:	d100      	bne.n	dc70 <f_chdir+0x248>
    dc6e:	e74f      	b.n	db10 <f_chdir+0xe8>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    dc70:	4b3f      	ldr	r3, [pc, #252]	; (dd70 <f_chdir+0x348>)
    dc72:	4298      	cmp	r0, r3
    dc74:	d800      	bhi.n	dc78 <f_chdir+0x250>
    dc76:	e0a7      	b.n	ddc8 <f_chdir+0x3a0>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    dc78:	4b3e      	ldr	r3, [pc, #248]	; (dd74 <f_chdir+0x34c>)
    dc7a:	4298      	cmp	r0, r3
    dc7c:	d800      	bhi.n	dc80 <f_chdir+0x258>
    dc7e:	e083      	b.n	dd88 <f_chdir+0x360>
	fs->database = bsect + sysect;						/* Data start sector */
    dc80:	9a02      	ldr	r2, [sp, #8]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    dc82:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
    dc84:	0013      	movs	r3, r2
    dc86:	4453      	add	r3, sl
    dc88:	62eb      	str	r3, [r5, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    dc8a:	0013      	movs	r3, r2
    dc8c:	4443      	add	r3, r8
    dc8e:	626b      	str	r3, [r5, #36]	; 0x24
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    dc90:	465b      	mov	r3, fp
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    dc92:	61e8      	str	r0, [r5, #28]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    dc94:	2b00      	cmp	r3, #0
    dc96:	d000      	beq.n	dc9a <f_chdir+0x272>
    dc98:	e73a      	b.n	db10 <f_chdir+0xe8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    dc9a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    dc9c:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    dc9e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    dca0:	4b35      	ldr	r3, [pc, #212]	; (dd78 <f_chdir+0x350>)
    dca2:	18c3      	adds	r3, r0, r3
    dca4:	0a5b      	lsrs	r3, r3, #9
    dca6:	4599      	cmp	r9, r3
    dca8:	d200      	bcs.n	dcac <f_chdir+0x284>
    dcaa:	e731      	b.n	db10 <f_chdir+0xe8>
	fs->free_clust = 0xFFFFFFFF;
    dcac:	2301      	movs	r3, #1
    dcae:	425b      	negs	r3, r3
    dcb0:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
    dcb2:	465b      	mov	r3, fp
    dcb4:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
    dcb6:	465b      	mov	r3, fp
    dcb8:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    dcba:	2365      	movs	r3, #101	; 0x65
    dcbc:	2264      	movs	r2, #100	; 0x64
    dcbe:	5ceb      	ldrb	r3, [r5, r3]
    dcc0:	5caa      	ldrb	r2, [r5, r2]
    dcc2:	021b      	lsls	r3, r3, #8
    dcc4:	431a      	orrs	r2, r3
    dcc6:	9b02      	ldr	r3, [sp, #8]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    dcc8:	7868      	ldrb	r0, [r5, #1]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    dcca:	469c      	mov	ip, r3
    dccc:	4462      	add	r2, ip
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    dcce:	2301      	movs	r3, #1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    dcd0:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    dcd2:	0039      	movs	r1, r7
    dcd4:	47b0      	blx	r6
    dcd6:	2303      	movs	r3, #3
    dcd8:	2800      	cmp	r0, #0
    dcda:	d012      	beq.n	dd02 <f_chdir+0x2da>
	fs->id = ++Fsid;		/* File system mount ID */
    dcdc:	4a27      	ldr	r2, [pc, #156]	; (dd7c <f_chdir+0x354>)
	fs->fs_type = fmt;		/* FAT sub-type */
    dcde:	702b      	strb	r3, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    dce0:	8813      	ldrh	r3, [r2, #0]
    dce2:	3301      	adds	r3, #1
    dce4:	b29b      	uxth	r3, r3
    dce6:	8013      	strh	r3, [r2, #0]
    dce8:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    dcea:	2300      	movs	r3, #0
    dcec:	632b      	str	r3, [r5, #48]	; 0x30
	fs->wflag = 0;
    dcee:	712b      	strb	r3, [r5, #4]
	fs->cdir = 0;			/* Current directory (root dir) */
    dcf0:	61ab      	str	r3, [r5, #24]
    dcf2:	e6c4      	b.n	da7e <f_chdir+0x56>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    dcf4:	9b07      	ldr	r3, [sp, #28]
    dcf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dcf8:	619a      	str	r2, [r3, #24]
    dcfa:	e6aa      	b.n	da52 <f_chdir+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    dcfc:	2300      	movs	r3, #0
    dcfe:	9302      	str	r3, [sp, #8]
    dd00:	e75e      	b.n	dbc0 <f_chdir+0x198>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    dd02:	4b16      	ldr	r3, [pc, #88]	; (dd5c <f_chdir+0x334>)
    dd04:	4a16      	ldr	r2, [pc, #88]	; (dd60 <f_chdir+0x338>)
    dd06:	5ceb      	ldrb	r3, [r5, r3]
    dd08:	5caa      	ldrb	r2, [r5, r2]
    dd0a:	021b      	lsls	r3, r3, #8
    dd0c:	431a      	orrs	r2, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    dd0e:	4915      	ldr	r1, [pc, #84]	; (dd64 <f_chdir+0x33c>)
    dd10:	b212      	sxth	r2, r2
    dd12:	2303      	movs	r3, #3
    dd14:	428a      	cmp	r2, r1
    dd16:	d1e1      	bne.n	dcdc <f_chdir+0x2b4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    dd18:	4a19      	ldr	r2, [pc, #100]	; (dd80 <f_chdir+0x358>)
    dd1a:	6b69      	ldr	r1, [r5, #52]	; 0x34
    dd1c:	4291      	cmp	r1, r2
    dd1e:	d1dd      	bne.n	dcdc <f_chdir+0x2b4>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    dd20:	2386      	movs	r3, #134	; 0x86
    dd22:	009b      	lsls	r3, r3, #2
    dd24:	58e9      	ldr	r1, [r5, r3]
    dd26:	4a17      	ldr	r2, [pc, #92]	; (dd84 <f_chdir+0x35c>)
    dd28:	2303      	movs	r3, #3
    dd2a:	4291      	cmp	r1, r2
    dd2c:	d1d6      	bne.n	dcdc <f_chdir+0x2b4>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    dd2e:	2288      	movs	r2, #136	; 0x88
    dd30:	0092      	lsls	r2, r2, #2
    dd32:	58aa      	ldr	r2, [r5, r2]
    dd34:	60ea      	str	r2, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    dd36:	2287      	movs	r2, #135	; 0x87
    dd38:	0092      	lsls	r2, r2, #2
    dd3a:	58aa      	ldr	r2, [r5, r2]
    dd3c:	612a      	str	r2, [r5, #16]
    dd3e:	e7cd      	b.n	dcdc <f_chdir+0x2b4>
    dd40:	fffffdbc 	.word	0xfffffdbc
    dd44:	20000ca0 	.word	0x20000ca0
    dd48:	20000ca4 	.word	0x20000ca4
    dd4c:	00009d1d 	.word	0x00009d1d
    dd50:	0000b9d5 	.word	0x0000b9d5
    dd54:	00009ce9 	.word	0x00009ce9
    dd58:	00009d3d 	.word	0x00009d3d
    dd5c:	00000233 	.word	0x00000233
    dd60:	00000232 	.word	0x00000232
    dd64:	ffffaa55 	.word	0xffffaa55
    dd68:	00544146 	.word	0x00544146
    dd6c:	0002593d 	.word	0x0002593d
    dd70:	00000ff5 	.word	0x00000ff5
    dd74:	0000fff5 	.word	0x0000fff5
    dd78:	000001ff 	.word	0x000001ff
    dd7c:	20000ca8 	.word	0x20000ca8
    dd80:	41615252 	.word	0x41615252
    dd84:	61417272 	.word	0x61417272
	fs->database = bsect + sysect;						/* Data start sector */
    dd88:	9a02      	ldr	r2, [sp, #8]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    dd8a:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
    dd8c:	0013      	movs	r3, r2
    dd8e:	4453      	add	r3, sl
    dd90:	62eb      	str	r3, [r5, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    dd92:	0013      	movs	r3, r2
    dd94:	4443      	add	r3, r8
    dd96:	001a      	movs	r2, r3
    dd98:	626b      	str	r3, [r5, #36]	; 0x24
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    dd9a:	465b      	mov	r3, fp
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    dd9c:	61e8      	str	r0, [r5, #28]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    dd9e:	2b00      	cmp	r3, #0
    dda0:	d100      	bne.n	dda4 <f_chdir+0x37c>
    dda2:	e6b5      	b.n	db10 <f_chdir+0xe8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    dda4:	9b03      	ldr	r3, [sp, #12]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    dda6:	0040      	lsls	r0, r0, #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    dda8:	469c      	mov	ip, r3
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    ddaa:	4b1a      	ldr	r3, [pc, #104]	; (de14 <f_chdir+0x3ec>)
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    ddac:	4462      	add	r2, ip
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    ddae:	18c3      	adds	r3, r0, r3
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    ddb0:	62aa      	str	r2, [r5, #40]	; 0x28
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    ddb2:	0a5b      	lsrs	r3, r3, #9
    ddb4:	454b      	cmp	r3, r9
    ddb6:	d900      	bls.n	ddba <f_chdir+0x392>
    ddb8:	e6aa      	b.n	db10 <f_chdir+0xe8>
	fs->free_clust = 0xFFFFFFFF;
    ddba:	2301      	movs	r3, #1
    ddbc:	425b      	negs	r3, r3
    ddbe:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
    ddc0:	2300      	movs	r3, #0
    ddc2:	60eb      	str	r3, [r5, #12]
    ddc4:	3302      	adds	r3, #2
    ddc6:	e789      	b.n	dcdc <f_chdir+0x2b4>
	fs->database = bsect + sysect;						/* Data start sector */
    ddc8:	9a02      	ldr	r2, [sp, #8]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    ddca:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
    ddcc:	0013      	movs	r3, r2
    ddce:	4453      	add	r3, sl
    ddd0:	62eb      	str	r3, [r5, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    ddd2:	0013      	movs	r3, r2
    ddd4:	4443      	add	r3, r8
    ddd6:	001a      	movs	r2, r3
    ddd8:	626b      	str	r3, [r5, #36]	; 0x24
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    ddda:	465b      	mov	r3, fp
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    dddc:	61e8      	str	r0, [r5, #28]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    ddde:	2b00      	cmp	r3, #0
    dde0:	d100      	bne.n	dde4 <f_chdir+0x3bc>
    dde2:	e695      	b.n	db10 <f_chdir+0xe8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    dde4:	9b03      	ldr	r3, [sp, #12]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    dde6:	490b      	ldr	r1, [pc, #44]	; (de14 <f_chdir+0x3ec>)
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    dde8:	469c      	mov	ip, r3
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    ddea:	2303      	movs	r3, #3
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    ddec:	4462      	add	r2, ip
    ddee:	62aa      	str	r2, [r5, #40]	; 0x28
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    ddf0:	2201      	movs	r2, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    ddf2:	468c      	mov	ip, r1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    ddf4:	4343      	muls	r3, r0
    ddf6:	4010      	ands	r0, r2
    ddf8:	085b      	lsrs	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    ddfa:	4460      	add	r0, ip
    ddfc:	181b      	adds	r3, r3, r0
    ddfe:	0a5b      	lsrs	r3, r3, #9
    de00:	4599      	cmp	r9, r3
    de02:	d200      	bcs.n	de06 <f_chdir+0x3de>
    de04:	e684      	b.n	db10 <f_chdir+0xe8>
	fs->free_clust = 0xFFFFFFFF;
    de06:	2301      	movs	r3, #1
    de08:	425b      	negs	r3, r3
    de0a:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
    de0c:	2300      	movs	r3, #0
    de0e:	60eb      	str	r3, [r5, #12]
    de10:	0013      	movs	r3, r2
    de12:	e763      	b.n	dcdc <f_chdir+0x2b4>
    de14:	000001ff 	.word	0x000001ff

0000de18 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    de18:	b5f0      	push	{r4, r5, r6, r7, lr}
    de1a:	46de      	mov	lr, fp
    de1c:	4657      	mov	r7, sl
    de1e:	464e      	mov	r6, r9
    de20:	4645      	mov	r5, r8
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    de22:	2200      	movs	r2, #0
{
    de24:	b5e0      	push	{r5, r6, r7, lr}
    de26:	4c8a      	ldr	r4, [pc, #552]	; (e050 <f_getcwd+0x238>)
    de28:	000d      	movs	r5, r1
    de2a:	44a5      	add	sp, r4
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    de2c:	ae0f      	add	r6, sp, #60	; 0x3c
{
    de2e:	9003      	str	r0, [sp, #12]
    de30:	9101      	str	r1, [sp, #4]
	*path = 0;
    de32:	7002      	strb	r2, [r0, #0]
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    de34:	0031      	movs	r1, r6
    de36:	a803      	add	r0, sp, #12
    de38:	4b86      	ldr	r3, [pc, #536]	; (e054 <f_getcwd+0x23c>)
    de3a:	4798      	blx	r3
    de3c:	4682      	mov	sl, r0
	if (res == FR_OK) {
    de3e:	2800      	cmp	r0, #0
    de40:	d148      	bne.n	ded4 <f_getcwd+0xbc>
		INIT_BUF(dj);
    de42:	ab04      	add	r3, sp, #16
    de44:	61b3      	str	r3, [r6, #24]
    de46:	ab18      	add	r3, sp, #96	; 0x60
    de48:	61f3      	str	r3, [r6, #28]
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    de4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    de4c:	699f      	ldr	r7, [r3, #24]
    de4e:	60b7      	str	r7, [r6, #8]
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    de50:	2f00      	cmp	r7, #0
    de52:	d100      	bne.n	de56 <f_getcwd+0x3e>
    de54:	e0f1      	b.n	e03a <f_getcwd+0x222>
    de56:	4b80      	ldr	r3, [pc, #512]	; (e058 <f_getcwd+0x240>)
    de58:	9002      	str	r0, [sp, #8]
    de5a:	469b      	mov	fp, r3
			res = dir_sdi(&dj, 1);			/* Get parent dir */
			if (res != FR_OK) break;
			res = dir_read(&dj);
    de5c:	4b7f      	ldr	r3, [pc, #508]	; (e05c <f_getcwd+0x244>)
    de5e:	4698      	mov	r8, r3
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    de60:	2101      	movs	r1, #1
    de62:	0030      	movs	r0, r6
    de64:	47d8      	blx	fp
			if (res != FR_OK) break;
    de66:	2800      	cmp	r0, #0
    de68:	d000      	beq.n	de6c <f_getcwd+0x54>
    de6a:	e0c3      	b.n	dff4 <f_getcwd+0x1dc>
			res = dir_read(&dj);
    de6c:	0030      	movs	r0, r6
    de6e:	47c0      	blx	r8
			if (res != FR_OK) break;
    de70:	2800      	cmp	r0, #0
    de72:	d000      	beq.n	de76 <f_getcwd+0x5e>
    de74:	e0be      	b.n	dff4 <f_getcwd+0x1dc>
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    de76:	6972      	ldr	r2, [r6, #20]
			res = dir_sdi(&dj, 0);
    de78:	0030      	movs	r0, r6
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    de7a:	7d51      	ldrb	r1, [r2, #21]
    de7c:	7d13      	ldrb	r3, [r2, #20]
    de7e:	0209      	lsls	r1, r1, #8
    de80:	430b      	orrs	r3, r1
    de82:	7ed1      	ldrb	r1, [r2, #27]
    de84:	7e92      	ldrb	r2, [r2, #26]
    de86:	0209      	lsls	r1, r1, #8
    de88:	430a      	orrs	r2, r1
    de8a:	041b      	lsls	r3, r3, #16
    de8c:	4313      	orrs	r3, r2
			res = dir_sdi(&dj, 0);
    de8e:	2100      	movs	r1, #0
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    de90:	60b3      	str	r3, [r6, #8]
			res = dir_sdi(&dj, 0);
    de92:	47d8      	blx	fp
			if (res != FR_OK) break;
    de94:	2800      	cmp	r0, #0
    de96:	d000      	beq.n	de9a <f_getcwd+0x82>
    de98:	e0ac      	b.n	dff4 <f_getcwd+0x1dc>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    de9a:	230f      	movs	r3, #15
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
    de9c:	0030      	movs	r0, r6
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    de9e:	469a      	mov	sl, r3
				res = dir_read(&dj);
    dea0:	47c0      	blx	r8
				if (res != FR_OK) break;
    dea2:	2800      	cmp	r0, #0
    dea4:	d132      	bne.n	df0c <f_getcwd+0xf4>
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
    dea6:	6972      	ldr	r2, [r6, #20]
    dea8:	7d51      	ldrb	r1, [r2, #21]
    deaa:	7d13      	ldrb	r3, [r2, #20]
    deac:	0209      	lsls	r1, r1, #8
    deae:	430b      	orrs	r3, r1
    deb0:	7ed1      	ldrb	r1, [r2, #27]
    deb2:	7e92      	ldrb	r2, [r2, #26]
    deb4:	0209      	lsls	r1, r1, #8
    deb6:	041b      	lsls	r3, r3, #16
    deb8:	430a      	orrs	r2, r1
    deba:	4313      	orrs	r3, r2
    debc:	42bb      	cmp	r3, r7
    debe:	d02d      	beq.n	df1c <f_getcwd+0x104>
	i = dj->index + 1;
    dec0:	88f4      	ldrh	r4, [r6, #6]
    dec2:	3401      	adds	r4, #1
    dec4:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    dec6:	2c00      	cmp	r4, #0
    dec8:	d10e      	bne.n	dee8 <f_getcwd+0xd0>
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    deca:	2302      	movs	r3, #2
    decc:	469a      	mov	sl, r3
    dece:	9903      	ldr	r1, [sp, #12]
				do		/* Add stacked path str */
					*tp++ = path[i++];
				while (i < sz_path);
			}
		}
		*tp = 0;
    ded0:	2300      	movs	r3, #0
    ded2:	700b      	strb	r3, [r1, #0]
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    ded4:	4650      	mov	r0, sl
    ded6:	2399      	movs	r3, #153	; 0x99
    ded8:	009b      	lsls	r3, r3, #2
    deda:	449d      	add	sp, r3
    dedc:	bc3c      	pop	{r2, r3, r4, r5}
    dede:	4690      	mov	r8, r2
    dee0:	4699      	mov	r9, r3
    dee2:	46a2      	mov	sl, r4
    dee4:	46ab      	mov	fp, r5
    dee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    dee8:	6933      	ldr	r3, [r6, #16]
    deea:	2b00      	cmp	r3, #0
    deec:	d0ed      	beq.n	deca <f_getcwd+0xb2>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    deee:	4652      	mov	r2, sl
    def0:	4022      	ands	r2, r4
    def2:	4691      	mov	r9, r2
    def4:	d051      	beq.n	df9a <f_getcwd+0x182>
    def6:	6833      	ldr	r3, [r6, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    def8:	464a      	mov	r2, r9
    defa:	3334      	adds	r3, #52	; 0x34
    defc:	0150      	lsls	r0, r2, #5
    defe:	181b      	adds	r3, r3, r0
				res = dir_read(&dj);
    df00:	0030      	movs	r0, r6
	dj->index = i;
    df02:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    df04:	6173      	str	r3, [r6, #20]
				res = dir_read(&dj);
    df06:	47c0      	blx	r8
				if (res != FR_OK) break;
    df08:	2800      	cmp	r0, #0
    df0a:	d0cc      	beq.n	dea6 <f_getcwd+0x8e>
				res = dir_read(&dj);
    df0c:	4682      	mov	sl, r0
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    df0e:	0003      	movs	r3, r0
    df10:	2804      	cmp	r0, #4
    df12:	d162      	bne.n	dfda <f_getcwd+0x1c2>
    df14:	3b02      	subs	r3, #2
    df16:	9903      	ldr	r1, [sp, #12]
    df18:	469a      	mov	sl, r3
    df1a:	e7d9      	b.n	ded0 <f_getcwd+0xb8>
			fno.lfname = path;
    df1c:	9b03      	ldr	r3, [sp, #12]
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    df1e:	a907      	add	r1, sp, #28
			fno.lfname = path;
    df20:	930d      	str	r3, [sp, #52]	; 0x34
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    df22:	0030      	movs	r0, r6
    df24:	4b4e      	ldr	r3, [pc, #312]	; (e060 <f_getcwd+0x248>)
			fno.lfsize = i;
    df26:	950e      	str	r5, [sp, #56]	; 0x38
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    df28:	4798      	blx	r3
			if (_USE_LFN && *path) tp = path;
    df2a:	9903      	ldr	r1, [sp, #12]
    df2c:	780b      	ldrb	r3, [r1, #0]
    df2e:	2b00      	cmp	r3, #0
    df30:	d03e      	beq.n	dfb0 <f_getcwd+0x198>
    df32:	0008      	movs	r0, r1
    df34:	2200      	movs	r2, #0
    df36:	e000      	b.n	df3a <f_getcwd+0x122>
			for (n = 0; tp[n]; n++) ;
    df38:	001a      	movs	r2, r3
    df3a:	1c53      	adds	r3, r2, #1
    df3c:	5cc4      	ldrb	r4, [r0, r3]
    df3e:	2c00      	cmp	r4, #0
    df40:	d1fa      	bne.n	df38 <f_getcwd+0x120>
			if (i < n + 3) {
    df42:	3204      	adds	r2, #4
    df44:	42aa      	cmp	r2, r5
    df46:	d871      	bhi.n	e02c <f_getcwd+0x214>
    df48:	1aec      	subs	r4, r5, r3
    df4a:	1b5b      	subs	r3, r3, r5
			while (n) path[--i] = tp[--n];
    df4c:	18c3      	adds	r3, r0, r3
    df4e:	3d01      	subs	r5, #1
    df50:	5d5a      	ldrb	r2, [r3, r5]
    df52:	554a      	strb	r2, [r1, r5]
    df54:	9903      	ldr	r1, [sp, #12]
    df56:	42a5      	cmp	r5, r4
    df58:	d1f9      	bne.n	df4e <f_getcwd+0x136>
			path[--i] = '/';
    df5a:	232f      	movs	r3, #47	; 0x2f
    df5c:	1e65      	subs	r5, r4, #1
    df5e:	554b      	strb	r3, [r1, r5]
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    df60:	68b7      	ldr	r7, [r6, #8]
    df62:	2f00      	cmp	r7, #0
    df64:	d000      	beq.n	df68 <f_getcwd+0x150>
    df66:	e77b      	b.n	de60 <f_getcwd+0x48>
			*tp++ = ':';
    df68:	213a      	movs	r1, #58	; 0x3a
    df6a:	9b02      	ldr	r3, [sp, #8]
		tp = path;
    df6c:	9a03      	ldr	r2, [sp, #12]
    df6e:	469a      	mov	sl, r3
			*tp++ = '0' + CurrVol;			/* Put drive number */
    df70:	4b3c      	ldr	r3, [pc, #240]	; (e064 <f_getcwd+0x24c>)
			*tp++ = ':';
    df72:	7051      	strb	r1, [r2, #1]
			*tp++ = '0' + CurrVol;			/* Put drive number */
    df74:	781b      	ldrb	r3, [r3, #0]
			if (i == sz_path) {				/* Root-dir */
    df76:	9901      	ldr	r1, [sp, #4]
			*tp++ = '0' + CurrVol;			/* Put drive number */
    df78:	3330      	adds	r3, #48	; 0x30
    df7a:	7013      	strb	r3, [r2, #0]
    df7c:	0008      	movs	r0, r1
			*tp++ = ':';
    df7e:	1c93      	adds	r3, r2, #2
			if (i == sz_path) {				/* Root-dir */
    df80:	42a9      	cmp	r1, r5
    df82:	d061      	beq.n	e048 <f_getcwd+0x230>
					*tp++ = path[i++];
    df84:	9a03      	ldr	r2, [sp, #12]
    df86:	1c59      	adds	r1, r3, #1
    df88:	5d52      	ldrb	r2, [r2, r5]
    df8a:	3501      	adds	r5, #1
    df8c:	701a      	strb	r2, [r3, #0]
    df8e:	000b      	movs	r3, r1
				while (i < sz_path);
    df90:	42a8      	cmp	r0, r5
    df92:	d8f7      	bhi.n	df84 <f_getcwd+0x16c>
    df94:	2300      	movs	r3, #0
    df96:	469a      	mov	sl, r3
    df98:	e79a      	b.n	ded0 <f_getcwd+0xb8>
		if (dj->clust == 0) {	/* Static table */
    df9a:	68f1      	ldr	r1, [r6, #12]
		dj->sect++;					/* Next sector */
    df9c:	3301      	adds	r3, #1
    df9e:	6133      	str	r3, [r6, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    dfa0:	6833      	ldr	r3, [r6, #0]
		if (dj->clust == 0) {	/* Static table */
    dfa2:	2900      	cmp	r1, #0
    dfa4:	d10d      	bne.n	dfc2 <f_getcwd+0x1aa>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    dfa6:	891a      	ldrh	r2, [r3, #8]
    dfa8:	42a2      	cmp	r2, r4
    dfaa:	d800      	bhi.n	dfae <f_getcwd+0x196>
    dfac:	e78d      	b.n	deca <f_getcwd+0xb2>
    dfae:	e7a3      	b.n	def8 <f_getcwd+0xe0>
			for (n = 0; tp[n]; n++) ;
    dfb0:	ab02      	add	r3, sp, #8
    dfb2:	7f5b      	ldrb	r3, [r3, #29]
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	d012      	beq.n	dfde <f_getcwd+0x1c6>
			tp = fno.fname;
    dfb8:	ab02      	add	r3, sp, #8
    dfba:	201d      	movs	r0, #29
    dfbc:	469c      	mov	ip, r3
    dfbe:	4460      	add	r0, ip
    dfc0:	e7b8      	b.n	df34 <f_getcwd+0x11c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    dfc2:	789a      	ldrb	r2, [r3, #2]
    dfc4:	0920      	lsrs	r0, r4, #4
    dfc6:	3a01      	subs	r2, #1
    dfc8:	4210      	tst	r0, r2
    dfca:	d195      	bne.n	def8 <f_getcwd+0xe0>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    dfcc:	2901      	cmp	r1, #1
    dfce:	d902      	bls.n	dfd6 <f_getcwd+0x1be>
    dfd0:	69da      	ldr	r2, [r3, #28]
    dfd2:	4291      	cmp	r1, r2
    dfd4:	d311      	bcc.n	dffa <f_getcwd+0x1e2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    dfd6:	2302      	movs	r3, #2
    dfd8:	469a      	mov	sl, r3
    dfda:	9903      	ldr	r1, [sp, #12]
    dfdc:	e778      	b.n	ded0 <f_getcwd+0xb8>
			if (i < n + 3) {
    dfde:	2d02      	cmp	r5, #2
    dfe0:	d924      	bls.n	e02c <f_getcwd+0x214>
    dfe2:	002c      	movs	r4, r5
			path[--i] = '/';
    dfe4:	232f      	movs	r3, #47	; 0x2f
    dfe6:	1e65      	subs	r5, r4, #1
    dfe8:	554b      	strb	r3, [r1, r5]
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    dfea:	68b7      	ldr	r7, [r6, #8]
    dfec:	2f00      	cmp	r7, #0
    dfee:	d000      	beq.n	dff2 <f_getcwd+0x1da>
    dff0:	e736      	b.n	de60 <f_getcwd+0x48>
    dff2:	e7b9      	b.n	df68 <f_getcwd+0x150>
    dff4:	9903      	ldr	r1, [sp, #12]
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    dff6:	4682      	mov	sl, r0
    dff8:	e76a      	b.n	ded0 <f_getcwd+0xb8>
    dffa:	0018      	movs	r0, r3
    dffc:	4b1a      	ldr	r3, [pc, #104]	; (e068 <f_getcwd+0x250>)
    dffe:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
    e000:	2801      	cmp	r0, #1
    e002:	d9e8      	bls.n	dfd6 <f_getcwd+0x1be>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    e004:	1c43      	adds	r3, r0, #1
    e006:	d014      	beq.n	e032 <f_getcwd+0x21a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    e008:	6833      	ldr	r3, [r6, #0]
    e00a:	69da      	ldr	r2, [r3, #28]
    e00c:	4290      	cmp	r0, r2
    e00e:	d300      	bcc.n	e012 <f_getcwd+0x1fa>
    e010:	e75b      	b.n	deca <f_getcwd+0xb2>
				dj->clust = clst;				/* Initialize data for new cluster */
    e012:	60f0      	str	r0, [r6, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    e014:	3a02      	subs	r2, #2
	clst -= 2;
    e016:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    e018:	2100      	movs	r1, #0
    e01a:	4290      	cmp	r0, r2
    e01c:	d204      	bcs.n	e028 <f_getcwd+0x210>
	return clst * fs->csize + fs->database;
    e01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e020:	7899      	ldrb	r1, [r3, #2]
    e022:	4694      	mov	ip, r2
    e024:	4341      	muls	r1, r0
    e026:	4461      	add	r1, ip
				dj->sect = clust2sect(dj->fs, clst);
    e028:	6131      	str	r1, [r6, #16]
    e02a:	e765      	b.n	def8 <f_getcwd+0xe0>
				res = FR_NOT_ENOUGH_CORE; break;
    e02c:	2311      	movs	r3, #17
    e02e:	469a      	mov	sl, r3
    e030:	e74e      	b.n	ded0 <f_getcwd+0xb8>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    e032:	2301      	movs	r3, #1
    e034:	9903      	ldr	r1, [sp, #12]
    e036:	469a      	mov	sl, r3
    e038:	e74a      	b.n	ded0 <f_getcwd+0xb8>
			*tp++ = '0' + CurrVol;			/* Put drive number */
    e03a:	4b0a      	ldr	r3, [pc, #40]	; (e064 <f_getcwd+0x24c>)
		tp = path;
    e03c:	9a03      	ldr	r2, [sp, #12]
			*tp++ = '0' + CurrVol;			/* Put drive number */
    e03e:	781b      	ldrb	r3, [r3, #0]
    e040:	3330      	adds	r3, #48	; 0x30
    e042:	7013      	strb	r3, [r2, #0]
			*tp++ = ':';
    e044:	233a      	movs	r3, #58	; 0x3a
    e046:	7053      	strb	r3, [r2, #1]
				*tp++ = '/';
    e048:	232f      	movs	r3, #47	; 0x2f
    e04a:	1cd1      	adds	r1, r2, #3
    e04c:	7093      	strb	r3, [r2, #2]
    e04e:	e73f      	b.n	ded0 <f_getcwd+0xb8>
    e050:	fffffd9c 	.word	0xfffffd9c
    e054:	0000a26d 	.word	0x0000a26d
    e058:	0000b11d 	.word	0x0000b11d
    e05c:	0000bde5 	.word	0x0000bde5
    e060:	00009ee5 	.word	0x00009ee5
    e064:	20000ca0 	.word	0x20000ca0
    e068:	0000ae05 	.word	0x0000ae05

0000e06c <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    e06c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e06e:	4646      	mov	r6, r8
    e070:	46d6      	mov	lr, sl
    e072:	464f      	mov	r7, r9
    e074:	b5c0      	push	{r6, r7, lr}
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    e076:	6803      	ldr	r3, [r0, #0]
{
    e078:	0004      	movs	r4, r0
    e07a:	000e      	movs	r6, r1
	if (!fs || !fs->fs_type || fs->id != id)
    e07c:	2b00      	cmp	r3, #0
    e07e:	d100      	bne.n	e082 <f_lseek+0x16>
    e080:	e078      	b.n	e174 <f_lseek+0x108>
    e082:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    e084:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    e086:	2a00      	cmp	r2, #0
    e088:	d104      	bne.n	e094 <f_lseek+0x28>
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    e08a:	bc1c      	pop	{r2, r3, r4}
    e08c:	4690      	mov	r8, r2
    e08e:	4699      	mov	r9, r3
    e090:	46a2      	mov	sl, r4
    e092:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    e094:	88a1      	ldrh	r1, [r4, #4]
    e096:	88da      	ldrh	r2, [r3, #6]
    e098:	4291      	cmp	r1, r2
    e09a:	d1f6      	bne.n	e08a <f_lseek+0x1e>
	if (disk_status(fs->drv) & STA_NOINIT)
    e09c:	7858      	ldrb	r0, [r3, #1]
    e09e:	4b65      	ldr	r3, [pc, #404]	; (e234 <f_lseek+0x1c8>)
    e0a0:	4798      	blx	r3
    e0a2:	0003      	movs	r3, r0
		return FR_NOT_READY;
    e0a4:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    e0a6:	07db      	lsls	r3, r3, #31
    e0a8:	d4ef      	bmi.n	e08a <f_lseek+0x1e>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    e0aa:	79a3      	ldrb	r3, [r4, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
    e0ac:	2002      	movs	r0, #2
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    e0ae:	b25a      	sxtb	r2, r3
    e0b0:	2a00      	cmp	r2, #0
    e0b2:	dbea      	blt.n	e08a <f_lseek+0x1e>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    e0b4:	68e2      	ldr	r2, [r4, #12]
    e0b6:	42b2      	cmp	r2, r6
    e0b8:	d202      	bcs.n	e0c0 <f_lseek+0x54>
			 && !(fp->flag & FA_WRITE)
    e0ba:	4218      	tst	r0, r3
    e0bc:	d100      	bne.n	e0c0 <f_lseek+0x54>
    e0be:	0016      	movs	r6, r2
		fp->fptr = nsect = 0;
    e0c0:	2300      	movs	r3, #0
		ifptr = fp->fptr;
    e0c2:	68a5      	ldr	r5, [r4, #8]
    e0c4:	2000      	movs	r0, #0
		fp->fptr = nsect = 0;
    e0c6:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    e0c8:	2e00      	cmp	r6, #0
    e0ca:	d0de      	beq.n	e08a <f_lseek+0x1e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    e0cc:	6823      	ldr	r3, [r4, #0]
    e0ce:	789f      	ldrb	r7, [r3, #2]
    e0d0:	4698      	mov	r8, r3
    e0d2:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    e0d4:	2d00      	cmp	r5, #0
    e0d6:	d011      	beq.n	e0fc <f_lseek+0x90>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    e0d8:	4b57      	ldr	r3, [pc, #348]	; (e238 <f_lseek+0x1cc>)
    e0da:	0039      	movs	r1, r7
    e0dc:	1e70      	subs	r0, r6, #1
    e0de:	4699      	mov	r9, r3
    e0e0:	4798      	blx	r3
    e0e2:	3d01      	subs	r5, #1
    e0e4:	4682      	mov	sl, r0
    e0e6:	0039      	movs	r1, r7
    e0e8:	0028      	movs	r0, r5
    e0ea:	47c8      	blx	r9
			if (ifptr > 0 &&
    e0ec:	4582      	cmp	sl, r0
    e0ee:	d305      	bcc.n	e0fc <f_lseek+0x90>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    e0f0:	427a      	negs	r2, r7
    e0f2:	402a      	ands	r2, r5
    e0f4:	60a2      	str	r2, [r4, #8]
				ofs -= fp->fptr;
    e0f6:	1ab6      	subs	r6, r6, r2
				clst = fp->clust;
    e0f8:	6965      	ldr	r5, [r4, #20]
    e0fa:	e003      	b.n	e104 <f_lseek+0x98>
				clst = fp->sclust;						/* start from the first cluster */
    e0fc:	6925      	ldr	r5, [r4, #16]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    e0fe:	2d00      	cmp	r5, #0
    e100:	d07c      	beq.n	e1fc <f_lseek+0x190>
				fp->clust = clst;
    e102:	6165      	str	r5, [r4, #20]
			if (clst != 0) {
    e104:	2d00      	cmp	r5, #0
    e106:	d137      	bne.n	e178 <f_lseek+0x10c>
    e108:	68a3      	ldr	r3, [r4, #8]
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    e10a:	05da      	lsls	r2, r3, #23
    e10c:	d021      	beq.n	e152 <f_lseek+0xe6>
    e10e:	69a2      	ldr	r2, [r4, #24]
    e110:	4295      	cmp	r5, r2
    e112:	d01e      	beq.n	e152 <f_lseek+0xe6>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    e114:	2340      	movs	r3, #64	; 0x40
    e116:	4699      	mov	r9, r3
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    e118:	0026      	movs	r6, r4
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    e11a:	4649      	mov	r1, r9
    e11c:	79a3      	ldrb	r3, [r4, #6]
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    e11e:	3624      	adds	r6, #36	; 0x24
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    e120:	4219      	tst	r1, r3
    e122:	d00b      	beq.n	e13c <f_lseek+0xd0>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    e124:	6823      	ldr	r3, [r4, #0]
    e126:	0031      	movs	r1, r6
    e128:	7858      	ldrb	r0, [r3, #1]
    e12a:	4f44      	ldr	r7, [pc, #272]	; (e23c <f_lseek+0x1d0>)
    e12c:	2301      	movs	r3, #1
    e12e:	47b8      	blx	r7
    e130:	2800      	cmp	r0, #0
    e132:	d118      	bne.n	e166 <f_lseek+0xfa>
				fp->flag &= ~FA__DIRTY;
    e134:	464a      	mov	r2, r9
    e136:	79a3      	ldrb	r3, [r4, #6]
    e138:	4393      	bics	r3, r2
    e13a:	71a3      	strb	r3, [r4, #6]
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
    e13c:	6823      	ldr	r3, [r4, #0]
    e13e:	0031      	movs	r1, r6
    e140:	7858      	ldrb	r0, [r3, #1]
    e142:	002a      	movs	r2, r5
    e144:	2301      	movs	r3, #1
    e146:	4e3e      	ldr	r6, [pc, #248]	; (e240 <f_lseek+0x1d4>)
    e148:	47b0      	blx	r6
    e14a:	2800      	cmp	r0, #0
    e14c:	d10b      	bne.n	e166 <f_lseek+0xfa>
    e14e:	68a3      	ldr	r3, [r4, #8]
			fp->dsect = nsect;
    e150:	61a5      	str	r5, [r4, #24]
    e152:	68e2      	ldr	r2, [r4, #12]
    e154:	2000      	movs	r0, #0
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    e156:	4293      	cmp	r3, r2
    e158:	d997      	bls.n	e08a <f_lseek+0x1e>
			fp->flag |= FA__WRITTEN;
    e15a:	2220      	movs	r2, #32
			fp->fsize = fp->fptr;
    e15c:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    e15e:	79a3      	ldrb	r3, [r4, #6]
    e160:	4313      	orrs	r3, r2
    e162:	71a3      	strb	r3, [r4, #6]
    e164:	e791      	b.n	e08a <f_lseek+0x1e>
				ABORT(fp->fs, FR_DISK_ERR);
    e166:	2380      	movs	r3, #128	; 0x80
    e168:	79a2      	ldrb	r2, [r4, #6]
    e16a:	425b      	negs	r3, r3
    e16c:	4313      	orrs	r3, r2
    e16e:	71a3      	strb	r3, [r4, #6]
    e170:	2001      	movs	r0, #1
    e172:	e78a      	b.n	e08a <f_lseek+0x1e>
		return FR_INVALID_OBJECT;
    e174:	2009      	movs	r0, #9
    e176:	e788      	b.n	e08a <f_lseek+0x1e>
				while (ofs > bcs) {						/* Cluster following loop */
    e178:	42be      	cmp	r6, r7
    e17a:	d958      	bls.n	e22e <f_lseek+0x1c2>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    e17c:	2302      	movs	r3, #2
    e17e:	4698      	mov	r8, r3
    e180:	4b30      	ldr	r3, [pc, #192]	; (e244 <f_lseek+0x1d8>)
    e182:	6820      	ldr	r0, [r4, #0]
    e184:	469a      	mov	sl, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    e186:	4b30      	ldr	r3, [pc, #192]	; (e248 <f_lseek+0x1dc>)
    e188:	4699      	mov	r9, r3
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    e18a:	4642      	mov	r2, r8
    e18c:	79a3      	ldrb	r3, [r4, #6]
    e18e:	421a      	tst	r2, r3
    e190:	d10a      	bne.n	e1a8 <f_lseek+0x13c>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    e192:	2d01      	cmp	r5, #1
    e194:	d902      	bls.n	e19c <f_lseek+0x130>
    e196:	69c2      	ldr	r2, [r0, #28]
    e198:	42aa      	cmp	r2, r5
    e19a:	d82b      	bhi.n	e1f4 <f_lseek+0x188>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    e19c:	2280      	movs	r2, #128	; 0x80
    e19e:	4252      	negs	r2, r2
    e1a0:	4313      	orrs	r3, r2
    e1a2:	71a3      	strb	r3, [r4, #6]
    e1a4:	2002      	movs	r0, #2
    e1a6:	e770      	b.n	e08a <f_lseek+0x1e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    e1a8:	0029      	movs	r1, r5
    e1aa:	47c8      	blx	r9
    e1ac:	1e05      	subs	r5, r0, #0
						if (clst == 0) {				/* When disk gets full, clip file size */
    e1ae:	d03b      	beq.n	e228 <f_lseek+0x1bc>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    e1b0:	1c6b      	adds	r3, r5, #1
    e1b2:	d0d8      	beq.n	e166 <f_lseek+0xfa>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    e1b4:	2d01      	cmp	r5, #1
    e1b6:	d92c      	bls.n	e212 <f_lseek+0x1a6>
    e1b8:	6820      	ldr	r0, [r4, #0]
    e1ba:	69c3      	ldr	r3, [r0, #28]
    e1bc:	429d      	cmp	r5, r3
    e1be:	d228      	bcs.n	e212 <f_lseek+0x1a6>
					fp->fptr += bcs;
    e1c0:	68a3      	ldr	r3, [r4, #8]
					fp->clust = clst;
    e1c2:	6165      	str	r5, [r4, #20]
					fp->fptr += bcs;
    e1c4:	18fb      	adds	r3, r7, r3
    e1c6:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    e1c8:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    e1ca:	42b7      	cmp	r7, r6
    e1cc:	d3dd      	bcc.n	e18a <f_lseek+0x11e>
				fp->fptr += ofs;
    e1ce:	18f3      	adds	r3, r6, r3
    e1d0:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    e1d2:	05f2      	lsls	r2, r6, #23
    e1d4:	d026      	beq.n	e224 <f_lseek+0x1b8>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    e1d6:	6821      	ldr	r1, [r4, #0]
	clst -= 2;
    e1d8:	3d02      	subs	r5, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    e1da:	69ca      	ldr	r2, [r1, #28]
    e1dc:	3a02      	subs	r2, #2
    e1de:	4295      	cmp	r5, r2
    e1e0:	d219      	bcs.n	e216 <f_lseek+0x1aa>
	return clst * fs->csize + fs->database;
    e1e2:	788a      	ldrb	r2, [r1, #2]
    e1e4:	4355      	muls	r5, r2
    e1e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    e1e8:	18ad      	adds	r5, r5, r2
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    e1ea:	2d00      	cmp	r5, #0
    e1ec:	d013      	beq.n	e216 <f_lseek+0x1aa>
					nsect += ofs / SS(fp->fs);
    e1ee:	0a76      	lsrs	r6, r6, #9
    e1f0:	1975      	adds	r5, r6, r5
    e1f2:	e78a      	b.n	e10a <f_lseek+0x9e>
    e1f4:	0029      	movs	r1, r5
    e1f6:	47d0      	blx	sl
    e1f8:	0005      	movs	r5, r0
    e1fa:	e7d9      	b.n	e1b0 <f_lseek+0x144>
					clst = create_chain(fp->fs, 0);
    e1fc:	2100      	movs	r1, #0
    e1fe:	4640      	mov	r0, r8
    e200:	4b11      	ldr	r3, [pc, #68]	; (e248 <f_lseek+0x1dc>)
    e202:	4798      	blx	r3
    e204:	0005      	movs	r5, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    e206:	2801      	cmp	r0, #1
    e208:	d005      	beq.n	e216 <f_lseek+0x1aa>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    e20a:	1c43      	adds	r3, r0, #1
    e20c:	d0ab      	beq.n	e166 <f_lseek+0xfa>
					fp->sclust = clst;
    e20e:	6120      	str	r0, [r4, #16]
    e210:	e777      	b.n	e102 <f_lseek+0x96>
    e212:	79a3      	ldrb	r3, [r4, #6]
    e214:	e7c2      	b.n	e19c <f_lseek+0x130>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    e216:	2380      	movs	r3, #128	; 0x80
    e218:	79a2      	ldrb	r2, [r4, #6]
    e21a:	425b      	negs	r3, r3
    e21c:	4313      	orrs	r3, r2
    e21e:	71a3      	strb	r3, [r4, #6]
    e220:	2002      	movs	r0, #2
    e222:	e732      	b.n	e08a <f_lseek+0x1e>
		fp->fptr = nsect = 0;
    e224:	2500      	movs	r5, #0
    e226:	e770      	b.n	e10a <f_lseek+0x9e>
    e228:	68a3      	ldr	r3, [r4, #8]
						if (clst == 0) {				/* When disk gets full, clip file size */
    e22a:	003e      	movs	r6, r7
    e22c:	e7cf      	b.n	e1ce <f_lseek+0x162>
    e22e:	68a3      	ldr	r3, [r4, #8]
    e230:	e7cd      	b.n	e1ce <f_lseek+0x162>
    e232:	46c0      	nop			; (mov r8, r8)
    e234:	00009d1d 	.word	0x00009d1d
    e238:	0002593d 	.word	0x0002593d
    e23c:	00009dc1 	.word	0x00009dc1
    e240:	00009d3d 	.word	0x00009d3d
    e244:	0000ae05 	.word	0x0000ae05
    e248:	0000b1cd 	.word	0x0000b1cd

0000e24c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    e24c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e24e:	46de      	mov	lr, fp
    e250:	4645      	mov	r5, r8
    e252:	4657      	mov	r7, sl
    e254:	464e      	mov	r6, r9
    e256:	b5e0      	push	{r5, r6, r7, lr}
    e258:	4cc6      	ldr	r4, [pc, #792]	; (e574 <f_mkdir+0x328>)
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    e25a:	4bc7      	ldr	r3, [pc, #796]	; (e578 <f_mkdir+0x32c>)
{
    e25c:	44a5      	add	sp, r4
    e25e:	900b      	str	r0, [sp, #44]	; 0x2c
	DWORD dsc, dcl, pcl, tim = get_fattime();
    e260:	4798      	blx	r3
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    e262:	2201      	movs	r2, #1
	DWORD dsc, dcl, pcl, tim = get_fattime();
    e264:	0005      	movs	r5, r0
	res = chk_mounted(&path, &dj.fs, 1);
    e266:	a90f      	add	r1, sp, #60	; 0x3c
    e268:	a80b      	add	r0, sp, #44	; 0x2c
    e26a:	4bc4      	ldr	r3, [pc, #784]	; (e57c <f_mkdir+0x330>)
    e26c:	4798      	blx	r3
    e26e:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    e270:	d009      	beq.n	e286 <f_mkdir+0x3a>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    e272:	0020      	movs	r0, r4
    e274:	2399      	movs	r3, #153	; 0x99
    e276:	009b      	lsls	r3, r3, #2
    e278:	449d      	add	sp, r3
    e27a:	bc3c      	pop	{r2, r3, r4, r5}
    e27c:	4690      	mov	r8, r2
    e27e:	4699      	mov	r9, r3
    e280:	46a2      	mov	sl, r4
    e282:	46ab      	mov	fp, r5
    e284:	bdf0      	pop	{r4, r5, r6, r7, pc}
		INIT_BUF(dj);
    e286:	ab0c      	add	r3, sp, #48	; 0x30
    e288:	9315      	str	r3, [sp, #84]	; 0x54
    e28a:	ab18      	add	r3, sp, #96	; 0x60
    e28c:	9316      	str	r3, [sp, #88]	; 0x58
		res = follow_path(&dj, path);			/* Follow the file path */
    e28e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e290:	a80f      	add	r0, sp, #60	; 0x3c
    e292:	4bbb      	ldr	r3, [pc, #748]	; (e580 <f_mkdir+0x334>)
    e294:	4798      	blx	r3
    e296:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    e298:	d100      	bne.n	e29c <f_mkdir+0x50>
    e29a:	e0f3      	b.n	e484 <f_mkdir+0x238>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    e29c:	2804      	cmp	r0, #4
    e29e:	d1e8      	bne.n	e272 <f_mkdir+0x26>
    e2a0:	2720      	movs	r7, #32
    e2a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
			res = FR_INVALID_NAME;
    e2a4:	3402      	adds	r4, #2
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    e2a6:	9301      	str	r3, [sp, #4]
    e2a8:	7adb      	ldrb	r3, [r3, #11]
    e2aa:	401f      	ands	r7, r3
    e2ac:	d1e1      	bne.n	e272 <f_mkdir+0x26>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    e2ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e2b0:	2100      	movs	r1, #0
    e2b2:	9301      	str	r3, [sp, #4]
    e2b4:	0018      	movs	r0, r3
    e2b6:	4bb3      	ldr	r3, [pc, #716]	; (e584 <f_mkdir+0x338>)
    e2b8:	4798      	blx	r3
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    e2ba:	2407      	movs	r4, #7
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    e2bc:	4682      	mov	sl, r0
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    e2be:	2800      	cmp	r0, #0
    e2c0:	d0d7      	beq.n	e272 <f_mkdir+0x26>
			if (dcl == 1) res = FR_INT_ERR;
    e2c2:	4653      	mov	r3, sl
    e2c4:	2402      	movs	r4, #2
    e2c6:	2b01      	cmp	r3, #1
    e2c8:	d0d3      	beq.n	e272 <f_mkdir+0x26>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    e2ca:	3c01      	subs	r4, #1
    e2cc:	3301      	adds	r3, #1
    e2ce:	d0d0      	beq.n	e272 <f_mkdir+0x26>
				res = move_window(dj.fs, 0);
    e2d0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	wsect = fs->winsect;
    e2d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    e2d4:	9301      	str	r3, [sp, #4]
	if (wsect != sector) {	/* Changed current window */
    e2d6:	2b00      	cmp	r3, #0
    e2d8:	d003      	beq.n	e2e2 <f_mkdir+0x96>
		if (fs->wflag) {	/* Write back dirty window if needed */
    e2da:	7933      	ldrb	r3, [r6, #4]
    e2dc:	2b00      	cmp	r3, #0
    e2de:	d000      	beq.n	e2e2 <f_mkdir+0x96>
    e2e0:	e11f      	b.n	e522 <f_mkdir+0x2d6>
	clst -= 2;
    e2e2:	4653      	mov	r3, sl
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    e2e4:	69f2      	ldr	r2, [r6, #28]
	clst -= 2;
    e2e6:	3b02      	subs	r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    e2e8:	3a02      	subs	r2, #2
    e2ea:	2400      	movs	r4, #0
    e2ec:	4293      	cmp	r3, r2
    e2ee:	d204      	bcs.n	e2fa <f_mkdir+0xae>
	return clst * fs->csize + fs->database;
    e2f0:	78b4      	ldrb	r4, [r6, #2]
    e2f2:	435c      	muls	r4, r3
    e2f4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    e2f6:	469c      	mov	ip, r3
    e2f8:	4464      	add	r4, ip
				dir = dj.fs->win;
    e2fa:	2334      	movs	r3, #52	; 0x34
    e2fc:	4698      	mov	r8, r3
    e2fe:	2280      	movs	r2, #128	; 0x80
    e300:	4ba1      	ldr	r3, [pc, #644]	; (e588 <f_mkdir+0x33c>)
    e302:	44b0      	add	r8, r6
    e304:	0092      	lsls	r2, r2, #2
    e306:	2100      	movs	r1, #0
    e308:	4640      	mov	r0, r8
    e30a:	4699      	mov	r9, r3
    e30c:	4798      	blx	r3
    e30e:	220b      	movs	r2, #11
    e310:	2120      	movs	r1, #32
    e312:	4640      	mov	r0, r8
    e314:	47c8      	blx	r9
				dir[DIR_Name] = '.';
    e316:	222e      	movs	r2, #46	; 0x2e
    e318:	2334      	movs	r3, #52	; 0x34
    e31a:	54f2      	strb	r2, [r6, r3]
				dir[DIR_Attr] = AM_DIR;
    e31c:	3a1e      	subs	r2, #30
    e31e:	330b      	adds	r3, #11
    e320:	54f2      	strb	r2, [r6, r3]
				ST_DWORD(dir+DIR_WrtTime, tim);
    e322:	b2eb      	uxtb	r3, r5
    e324:	001a      	movs	r2, r3
    e326:	9303      	str	r3, [sp, #12]
    e328:	234a      	movs	r3, #74	; 0x4a
    e32a:	54f2      	strb	r2, [r6, r3]
    e32c:	b2ab      	uxth	r3, r5
    e32e:	0a1b      	lsrs	r3, r3, #8
    e330:	001a      	movs	r2, r3
    e332:	9304      	str	r3, [sp, #16]
    e334:	234b      	movs	r3, #75	; 0x4b
    e336:	54f2      	strb	r2, [r6, r3]
    e338:	0c2b      	lsrs	r3, r5, #16
    e33a:	b2db      	uxtb	r3, r3
    e33c:	001a      	movs	r2, r3
    e33e:	9305      	str	r3, [sp, #20]
    e340:	234c      	movs	r3, #76	; 0x4c
    e342:	54f2      	strb	r2, [r6, r3]
    e344:	0e2b      	lsrs	r3, r5, #24
    e346:	001a      	movs	r2, r3
    e348:	9306      	str	r3, [sp, #24]
    e34a:	234d      	movs	r3, #77	; 0x4d
    e34c:	54f2      	strb	r2, [r6, r3]
				ST_CLUST(dir, dcl);
    e34e:	466a      	mov	r2, sp
    e350:	4653      	mov	r3, sl
    e352:	7113      	strb	r3, [r2, #4]
    e354:	7913      	ldrb	r3, [r2, #4]
    e356:	4645      	mov	r5, r8
    e358:	001a      	movs	r2, r3
    e35a:	9307      	str	r3, [sp, #28]
    e35c:	234e      	movs	r3, #78	; 0x4e
    e35e:	54f2      	strb	r2, [r6, r3]
    e360:	466a      	mov	r2, sp
    e362:	4653      	mov	r3, sl
    e364:	8093      	strh	r3, [r2, #4]
    e366:	8893      	ldrh	r3, [r2, #4]
    e368:	0a1b      	lsrs	r3, r3, #8
    e36a:	001a      	movs	r2, r3
    e36c:	9308      	str	r3, [sp, #32]
    e36e:	234f      	movs	r3, #79	; 0x4f
    e370:	54f2      	strb	r2, [r6, r3]
    e372:	4653      	mov	r3, sl
    e374:	0c1b      	lsrs	r3, r3, #16
    e376:	b2da      	uxtb	r2, r3
    e378:	0011      	movs	r1, r2
    e37a:	9209      	str	r2, [sp, #36]	; 0x24
    e37c:	2248      	movs	r2, #72	; 0x48
    e37e:	0a1b      	lsrs	r3, r3, #8
    e380:	54b1      	strb	r1, [r6, r2]
    e382:	930a      	str	r3, [sp, #40]	; 0x28
    e384:	001a      	movs	r2, r3
    e386:	2349      	movs	r3, #73	; 0x49
    e388:	54f2      	strb	r2, [r6, r3]
    e38a:	2300      	movs	r3, #0
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    e38c:	0031      	movs	r1, r6
    e38e:	0032      	movs	r2, r6
    e390:	0018      	movs	r0, r3
    e392:	3238      	adds	r2, #56	; 0x38
    e394:	3154      	adds	r1, #84	; 0x54
    e396:	4291      	cmp	r1, r2
    e398:	4158      	adcs	r0, r3
    e39a:	0002      	movs	r2, r0
    e39c:	0030      	movs	r0, r6
    e39e:	3058      	adds	r0, #88	; 0x58
    e3a0:	4285      	cmp	r5, r0
    e3a2:	415b      	adcs	r3, r3
    e3a4:	4313      	orrs	r3, r2
    e3a6:	b2db      	uxtb	r3, r3
    e3a8:	2b00      	cmp	r3, #0
    e3aa:	d100      	bne.n	e3ae <f_mkdir+0x162>
    e3ac:	e0b0      	b.n	e510 <f_mkdir+0x2c4>
    e3ae:	4643      	mov	r3, r8
    e3b0:	430b      	orrs	r3, r1
    e3b2:	079b      	lsls	r3, r3, #30
    e3b4:	d000      	beq.n	e3b8 <f_mkdir+0x16c>
    e3b6:	e0ab      	b.n	e510 <f_mkdir+0x2c4>
		*d++ = *s++;
    e3b8:	6b73      	ldr	r3, [r6, #52]	; 0x34
    e3ba:	6573      	str	r3, [r6, #84]	; 0x54
    e3bc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    e3be:	65b3      	str	r3, [r6, #88]	; 0x58
    e3c0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    e3c2:	65f3      	str	r3, [r6, #92]	; 0x5c
    e3c4:	6c33      	ldr	r3, [r6, #64]	; 0x40
    e3c6:	6633      	str	r3, [r6, #96]	; 0x60
    e3c8:	6c73      	ldr	r3, [r6, #68]	; 0x44
    e3ca:	6673      	str	r3, [r6, #100]	; 0x64
    e3cc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    e3ce:	66b3      	str	r3, [r6, #104]	; 0x68
    e3d0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
    e3d2:	66f3      	str	r3, [r6, #108]	; 0x6c
    e3d4:	6d33      	ldr	r3, [r6, #80]	; 0x50
    e3d6:	6733      	str	r3, [r6, #112]	; 0x70
				dir[33] = '.'; pcl = dj.sclust;
    e3d8:	222e      	movs	r2, #46	; 0x2e
    e3da:	2355      	movs	r3, #85	; 0x55
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    e3dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
				dir[33] = '.'; pcl = dj.sclust;
    e3de:	54f2      	strb	r2, [r6, r3]
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    e3e0:	782a      	ldrb	r2, [r5, #0]
				dir[33] = '.'; pcl = dj.sclust;
    e3e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    e3e4:	2a03      	cmp	r2, #3
    e3e6:	d100      	bne.n	e3ea <f_mkdir+0x19e>
    e3e8:	e08a      	b.n	e500 <f_mkdir+0x2b4>
    e3ea:	b29a      	uxth	r2, r3
    e3ec:	b2df      	uxtb	r7, r3
    e3ee:	0c1b      	lsrs	r3, r3, #16
    e3f0:	b2d9      	uxtb	r1, r3
    e3f2:	0a12      	lsrs	r2, r2, #8
    e3f4:	0a1b      	lsrs	r3, r3, #8
				ST_CLUST(dir+SZ_DIR, pcl);
    e3f6:	206e      	movs	r0, #110	; 0x6e
    e3f8:	5437      	strb	r7, [r6, r0]
    e3fa:	3001      	adds	r0, #1
    e3fc:	5432      	strb	r2, [r6, r0]
    e3fe:	2268      	movs	r2, #104	; 0x68
    e400:	54b1      	strb	r1, [r6, r2]
    e402:	3201      	adds	r2, #1
    e404:	54b3      	strb	r3, [r6, r2]
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    e406:	78ab      	ldrb	r3, [r5, #2]
    e408:	2b00      	cmp	r3, #0
    e40a:	d04b      	beq.n	e4a4 <f_mkdir+0x258>
    e40c:	3b01      	subs	r3, #1
    e40e:	b2db      	uxtb	r3, r3
    e410:	3301      	adds	r3, #1
    e412:	191b      	adds	r3, r3, r4
    e414:	9301      	str	r3, [sp, #4]
					dj.fs->wflag = 1;
    e416:	2301      	movs	r3, #1
					dj.fs->winsect = dsc++;
    e418:	632c      	str	r4, [r5, #48]	; 0x30
					dj.fs->wflag = 1;
    e41a:	712b      	strb	r3, [r5, #4]
	if (wsect != sector) {	/* Changed current window */
    e41c:	2c00      	cmp	r4, #0
    e41e:	d026      	beq.n	e46e <f_mkdir+0x222>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    e420:	2334      	movs	r3, #52	; 0x34
    e422:	469b      	mov	fp, r3
    e424:	44ab      	add	fp, r5
    e426:	7868      	ldrb	r0, [r5, #1]
    e428:	3b33      	subs	r3, #51	; 0x33
    e42a:	0022      	movs	r2, r4
    e42c:	4659      	mov	r1, fp
    e42e:	4e57      	ldr	r6, [pc, #348]	; (e58c <f_mkdir+0x340>)
    e430:	47b0      	blx	r6
    e432:	2800      	cmp	r0, #0
    e434:	d128      	bne.n	e488 <f_mkdir+0x23c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    e436:	6a2b      	ldr	r3, [r5, #32]
    e438:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			fs->wflag = 0;
    e43a:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    e43c:	189a      	adds	r2, r3, r2
    e43e:	4294      	cmp	r4, r2
    e440:	d215      	bcs.n	e46e <f_mkdir+0x222>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    e442:	78ee      	ldrb	r6, [r5, #3]
    e444:	2e01      	cmp	r6, #1
    e446:	d912      	bls.n	e46e <f_mkdir+0x222>
    e448:	465a      	mov	r2, fp
    e44a:	0027      	movs	r7, r4
    e44c:	46a3      	mov	fp, r4
    e44e:	9202      	str	r2, [sp, #8]
    e450:	0011      	movs	r1, r2
    e452:	e001      	b.n	e458 <f_mkdir+0x20c>
    e454:	6a2b      	ldr	r3, [r5, #32]
    e456:	9902      	ldr	r1, [sp, #8]
					wsect += fs->fsize;
    e458:	18ff      	adds	r7, r7, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    e45a:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    e45c:	7868      	ldrb	r0, [r5, #1]
    e45e:	2301      	movs	r3, #1
    e460:	003a      	movs	r2, r7
    e462:	4c4a      	ldr	r4, [pc, #296]	; (e58c <f_mkdir+0x340>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    e464:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    e466:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    e468:	2e01      	cmp	r6, #1
    e46a:	d1f3      	bne.n	e454 <f_mkdir+0x208>
    e46c:	465c      	mov	r4, fp
    e46e:	2280      	movs	r2, #128	; 0x80
    e470:	2100      	movs	r1, #0
    e472:	0092      	lsls	r2, r2, #2
    e474:	4640      	mov	r0, r8
    e476:	47c8      	blx	r9
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    e478:	9b01      	ldr	r3, [sp, #4]
    e47a:	3401      	adds	r4, #1
    e47c:	429c      	cmp	r4, r3
    e47e:	d011      	beq.n	e4a4 <f_mkdir+0x258>
    e480:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    e482:	e7c8      	b.n	e416 <f_mkdir+0x1ca>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    e484:	2408      	movs	r4, #8
    e486:	e6f4      	b.n	e272 <f_mkdir+0x26>
				return FR_DISK_ERR;
    e488:	2401      	movs	r4, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    e48a:	4653      	mov	r3, sl
    e48c:	2b01      	cmp	r3, #1
    e48e:	d800      	bhi.n	e492 <f_mkdir+0x246>
    e490:	e6ef      	b.n	e272 <f_mkdir+0x26>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    e492:	980f      	ldr	r0, [sp, #60]	; 0x3c
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    e494:	69c3      	ldr	r3, [r0, #28]
    e496:	459a      	cmp	sl, r3
    e498:	d300      	bcc.n	e49c <f_mkdir+0x250>
    e49a:	e6ea      	b.n	e272 <f_mkdir+0x26>
    e49c:	4651      	mov	r1, sl
    e49e:	4b3c      	ldr	r3, [pc, #240]	; (e590 <f_mkdir+0x344>)
    e4a0:	4798      	blx	r3
    e4a2:	e6e6      	b.n	e272 <f_mkdir+0x26>
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    e4a4:	a80f      	add	r0, sp, #60	; 0x3c
    e4a6:	4b3b      	ldr	r3, [pc, #236]	; (e594 <f_mkdir+0x348>)
    e4a8:	4798      	blx	r3
    e4aa:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) {
    e4ac:	d1ed      	bne.n	e48a <f_mkdir+0x23e>
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    e4ae:	2210      	movs	r2, #16
				dir = dj.dir;
    e4b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
				ST_CLUST(dir, dcl);					/* Table start cluster */
    e4b2:	2120      	movs	r1, #32
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    e4b4:	72da      	strb	r2, [r3, #11]
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    e4b6:	466a      	mov	r2, sp
    e4b8:	7b12      	ldrb	r2, [r2, #12]
    e4ba:	759a      	strb	r2, [r3, #22]
    e4bc:	466a      	mov	r2, sp
    e4be:	7c12      	ldrb	r2, [r2, #16]
    e4c0:	75da      	strb	r2, [r3, #23]
    e4c2:	466a      	mov	r2, sp
    e4c4:	7d12      	ldrb	r2, [r2, #20]
    e4c6:	761a      	strb	r2, [r3, #24]
    e4c8:	466a      	mov	r2, sp
    e4ca:	7e12      	ldrb	r2, [r2, #24]
    e4cc:	765a      	strb	r2, [r3, #25]
				ST_CLUST(dir, dcl);					/* Table start cluster */
    e4ce:	466a      	mov	r2, sp
    e4d0:	7f12      	ldrb	r2, [r2, #28]
    e4d2:	769a      	strb	r2, [r3, #26]
    e4d4:	466a      	mov	r2, sp
    e4d6:	1852      	adds	r2, r2, r1
    e4d8:	7812      	ldrb	r2, [r2, #0]
    e4da:	3104      	adds	r1, #4
    e4dc:	76da      	strb	r2, [r3, #27]
    e4de:	466a      	mov	r2, sp
    e4e0:	1852      	adds	r2, r2, r1
    e4e2:	7812      	ldrb	r2, [r2, #0]
    e4e4:	3104      	adds	r1, #4
    e4e6:	751a      	strb	r2, [r3, #20]
    e4e8:	466a      	mov	r2, sp
    e4ea:	1852      	adds	r2, r2, r1
    e4ec:	7812      	ldrb	r2, [r2, #0]
    e4ee:	755a      	strb	r2, [r3, #21]
				dj.fs->wflag = 1;
    e4f0:	2301      	movs	r3, #1
    e4f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e4f4:	7113      	strb	r3, [r2, #4]
				res = sync(dj.fs);
    e4f6:	0010      	movs	r0, r2
    e4f8:	4b27      	ldr	r3, [pc, #156]	; (e598 <f_mkdir+0x34c>)
    e4fa:	4798      	blx	r3
    e4fc:	0004      	movs	r4, r0
    e4fe:	e6b8      	b.n	e272 <f_mkdir+0x26>
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    e500:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e502:	4293      	cmp	r3, r2
    e504:	d000      	beq.n	e508 <f_mkdir+0x2bc>
    e506:	e770      	b.n	e3ea <f_mkdir+0x19e>
    e508:	2300      	movs	r3, #0
    e50a:	2100      	movs	r1, #0
    e50c:	2200      	movs	r2, #0
    e50e:	e772      	b.n	e3f6 <f_mkdir+0x1aa>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    e510:	2300      	movs	r3, #0
    e512:	4640      	mov	r0, r8
		*d++ = *s++;
    e514:	5cc2      	ldrb	r2, [r0, r3]
    e516:	54ca      	strb	r2, [r1, r3]
    e518:	3301      	adds	r3, #1
	while (cnt--)
    e51a:	2b20      	cmp	r3, #32
    e51c:	d1fa      	bne.n	e514 <f_mkdir+0x2c8>
    e51e:	4680      	mov	r8, r0
    e520:	e75a      	b.n	e3d8 <f_mkdir+0x18c>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    e522:	2334      	movs	r3, #52	; 0x34
    e524:	4699      	mov	r9, r3
    e526:	4c19      	ldr	r4, [pc, #100]	; (e58c <f_mkdir+0x340>)
    e528:	44b1      	add	r9, r6
    e52a:	7870      	ldrb	r0, [r6, #1]
    e52c:	3b33      	subs	r3, #51	; 0x33
    e52e:	9a01      	ldr	r2, [sp, #4]
    e530:	4649      	mov	r1, r9
    e532:	46a3      	mov	fp, r4
    e534:	47a0      	blx	r4
    e536:	2800      	cmp	r0, #0
    e538:	d1a6      	bne.n	e488 <f_mkdir+0x23c>
			fs->wflag = 0;
    e53a:	2300      	movs	r3, #0
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    e53c:	6a72      	ldr	r2, [r6, #36]	; 0x24
			fs->wflag = 0;
    e53e:	7133      	strb	r3, [r6, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    e540:	6a33      	ldr	r3, [r6, #32]
    e542:	9901      	ldr	r1, [sp, #4]
    e544:	189a      	adds	r2, r3, r2
    e546:	4291      	cmp	r1, r2
    e548:	d212      	bcs.n	e570 <f_mkdir+0x324>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    e54a:	78f2      	ldrb	r2, [r6, #3]
    e54c:	4690      	mov	r8, r2
    e54e:	2a01      	cmp	r2, #1
    e550:	d90e      	bls.n	e570 <f_mkdir+0x324>
    e552:	000c      	movs	r4, r1
    e554:	e000      	b.n	e558 <f_mkdir+0x30c>
    e556:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
    e558:	18e4      	adds	r4, r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
    e55a:	7870      	ldrb	r0, [r6, #1]
    e55c:	2301      	movs	r3, #1
    e55e:	0022      	movs	r2, r4
    e560:	4649      	mov	r1, r9
    e562:	47d8      	blx	fp
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    e564:	4643      	mov	r3, r8
    e566:	3b01      	subs	r3, #1
    e568:	b2db      	uxtb	r3, r3
    e56a:	4698      	mov	r8, r3
    e56c:	2b01      	cmp	r3, #1
    e56e:	d1f2      	bne.n	e556 <f_mkdir+0x30a>
    e570:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    e572:	e6b6      	b.n	e2e2 <f_mkdir+0x96>
    e574:	fffffd9c 	.word	0xfffffd9c
    e578:	00009eb1 	.word	0x00009eb1
    e57c:	0000a26d 	.word	0x0000a26d
    e580:	0000b9d5 	.word	0x0000b9d5
    e584:	0000b1cd 	.word	0x0000b1cd
    e588:	00028a1d 	.word	0x00028a1d
    e58c:	00009dc1 	.word	0x00009dc1
    e590:	0000aaad 	.word	0x0000aaad
    e594:	0000c319 	.word	0x0000c319
    e598:	0000a609 	.word	0x0000a609

0000e59c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    e59c:	0003      	movs	r3, r0
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    e59e:	287f      	cmp	r0, #127	; 0x7f
    e5a0:	d90e      	bls.n	e5c0 <ff_convert+0x24>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
    e5a2:	2900      	cmp	r1, #0
    e5a4:	d10e      	bne.n	e5c4 <ff_convert+0x28>
    e5a6:	4a0c      	ldr	r2, [pc, #48]	; (e5d8 <ff_convert+0x3c>)
    e5a8:	2300      	movs	r3, #0
    e5aa:	e004      	b.n	e5b6 <ff_convert+0x1a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    e5ac:	3301      	adds	r3, #1
    e5ae:	b29b      	uxth	r3, r3
    e5b0:	3202      	adds	r2, #2
    e5b2:	2b80      	cmp	r3, #128	; 0x80
    e5b4:	d00e      	beq.n	e5d4 <ff_convert+0x38>
				if (src == Tbl[c]) break;
    e5b6:	8811      	ldrh	r1, [r2, #0]
    e5b8:	4281      	cmp	r1, r0
    e5ba:	d1f7      	bne.n	e5ac <ff_convert+0x10>
    e5bc:	3380      	adds	r3, #128	; 0x80
    e5be:	b29b      	uxth	r3, r3
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    e5c0:	0018      	movs	r0, r3
    e5c2:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    e5c4:	2300      	movs	r3, #0
    e5c6:	28ff      	cmp	r0, #255	; 0xff
    e5c8:	d8fa      	bhi.n	e5c0 <ff_convert+0x24>
    e5ca:	3880      	subs	r0, #128	; 0x80
    e5cc:	4b02      	ldr	r3, [pc, #8]	; (e5d8 <ff_convert+0x3c>)
    e5ce:	0040      	lsls	r0, r0, #1
    e5d0:	5ac3      	ldrh	r3, [r0, r3]
    e5d2:	e7f5      	b.n	e5c0 <ff_convert+0x24>
    e5d4:	2300      	movs	r3, #0
    e5d6:	e7f3      	b.n	e5c0 <ff_convert+0x24>
    e5d8:	0002d4ec 	.word	0x0002d4ec

0000e5dc <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    e5dc:	2861      	cmp	r0, #97	; 0x61
    e5de:	d010      	beq.n	e602 <ff_wtoupper+0x26>
    e5e0:	2101      	movs	r1, #1
    e5e2:	2262      	movs	r2, #98	; 0x62
    e5e4:	4b08      	ldr	r3, [pc, #32]	; (e608 <ff_wtoupper+0x2c>)
    e5e6:	3304      	adds	r3, #4
    e5e8:	4290      	cmp	r0, r2
    e5ea:	d006      	beq.n	e5fa <ff_wtoupper+0x1e>
    e5ec:	3302      	adds	r3, #2
    e5ee:	1e9a      	subs	r2, r3, #2
    e5f0:	8812      	ldrh	r2, [r2, #0]
    e5f2:	3101      	adds	r1, #1
    e5f4:	2a00      	cmp	r2, #0
    e5f6:	d1f7      	bne.n	e5e8 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
    e5f8:	4770      	bx	lr
    e5fa:	4b04      	ldr	r3, [pc, #16]	; (e60c <ff_wtoupper+0x30>)
    e5fc:	0049      	lsls	r1, r1, #1
    e5fe:	5ac8      	ldrh	r0, [r1, r3]
    e600:	e7fa      	b.n	e5f8 <ff_wtoupper+0x1c>
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    e602:	3820      	subs	r0, #32
    e604:	e7f8      	b.n	e5f8 <ff_wtoupper+0x1c>
    e606:	46c0      	nop			; (mov r8, r8)
    e608:	0002d5ec 	.word	0x0002d5ec
    e60c:	0002d7cc 	.word	0x0002d7cc

0000e610 <backlightCustomAdjust>:


struct BACKLIGHT_COLOR * backlightCustomAdjust(char color, int8_t adjustment){
	uint8_t * colorPtr;
	
	switch (color){
    e610:	2862      	cmp	r0, #98	; 0x62
    e612:	d017      	beq.n	e644 <backlightCustomAdjust+0x34>
    e614:	2867      	cmp	r0, #103	; 0x67
    e616:	d009      	beq.n	e62c <backlightCustomAdjust+0x1c>
		case 'r':
			colorPtr = &colorCustom.red;
    e618:	480c      	ldr	r0, [pc, #48]	; (e64c <backlightCustomAdjust+0x3c>)
    e61a:	1d02      	adds	r2, r0, #4
			break;	
		default:
			colorPtr = &colorCustom.red;
	}
	
	if (adjustment>0){
    e61c:	2900      	cmp	r1, #0
    e61e:	dd09      	ble.n	e634 <backlightCustomAdjust+0x24>
		if (*colorPtr < COLOR_MAX){
    e620:	7813      	ldrb	r3, [r2, #0]
    e622:	2b1d      	cmp	r3, #29
    e624:	d801      	bhi.n	e62a <backlightCustomAdjust+0x1a>
			(*colorPtr)++;
    e626:	3301      	adds	r3, #1
    e628:	7013      	strb	r3, [r2, #0]
	}
	
	return &colorCustom;
	
	
}
    e62a:	4770      	bx	lr
			colorPtr = &colorCustom.green;
    e62c:	4807      	ldr	r0, [pc, #28]	; (e64c <backlightCustomAdjust+0x3c>)
    e62e:	1d82      	adds	r2, r0, #6
	if (adjustment>0){
    e630:	2900      	cmp	r1, #0
    e632:	dcf5      	bgt.n	e620 <backlightCustomAdjust+0x10>
	}else if (adjustment<0){
    e634:	2900      	cmp	r1, #0
    e636:	d0f8      	beq.n	e62a <backlightCustomAdjust+0x1a>
		if (*colorPtr>0){
    e638:	7813      	ldrb	r3, [r2, #0]
    e63a:	2b00      	cmp	r3, #0
    e63c:	d0f5      	beq.n	e62a <backlightCustomAdjust+0x1a>
			(*colorPtr)--;
    e63e:	3b01      	subs	r3, #1
    e640:	7013      	strb	r3, [r2, #0]
    e642:	e7f2      	b.n	e62a <backlightCustomAdjust+0x1a>
			colorPtr = &colorCustom.blue;
    e644:	4801      	ldr	r0, [pc, #4]	; (e64c <backlightCustomAdjust+0x3c>)
    e646:	1d42      	adds	r2, r0, #5
    e648:	e7e8      	b.n	e61c <backlightCustomAdjust+0xc>
    e64a:	46c0      	nop			; (mov r8, r8)
    e64c:	200000d4 	.word	0x200000d4

0000e650 <backlightColorToggle>:


void backlightColorToggle(struct BACKLIGHT_SETTING *blset){
    e650:	b5f0      	push	{r4, r5, r6, r7, lr}
    e652:	46d6      	mov	lr, sl
    e654:	464f      	mov	r7, r9
    e656:	4646      	mov	r6, r8
    e658:	b5c0      	push	{r6, r7, lr}
	blset->colorRef ++;
    e65a:	7843      	ldrb	r3, [r0, #1]
void backlightColorToggle(struct BACKLIGHT_SETTING *blset){
    e65c:	b084      	sub	sp, #16
	blset->colorRef ++;
    e65e:	3301      	adds	r3, #1
    e660:	b2db      	uxtb	r3, r3
void backlightColorToggle(struct BACKLIGHT_SETTING *blset){
    e662:	0005      	movs	r5, r0

	if ((blset->colorRef) >= (sizeof(colorOptions)/sizeof(&colorCustom))){
    e664:	2b06      	cmp	r3, #6
    e666:	d900      	bls.n	e66a <backlightColorToggle+0x1a>
		blset->colorRef = 1;
    e668:	2301      	movs	r3, #1
void backlightOn(struct BACKLIGHT_SETTING *blset){
	uint8_t u8blue, u8green, u8red;
	float fred, fblue, fgreen, brightness;
	float scale;
	
	fred = colorOptions[blset->colorRef]->red;
    e66a:	4a2e      	ldr	r2, [pc, #184]	; (e724 <backlightColorToggle+0xd4>)
		blset->colorRef = 1;
    e66c:	706b      	strb	r3, [r5, #1]
	fred = colorOptions[blset->colorRef]->red;
    e66e:	009b      	lsls	r3, r3, #2
    e670:	589e      	ldr	r6, [r3, r2]
    e672:	4c2d      	ldr	r4, [pc, #180]	; (e728 <backlightColorToggle+0xd8>)
    e674:	7930      	ldrb	r0, [r6, #4]
    e676:	47a0      	blx	r4
    e678:	1c07      	adds	r7, r0, #0
	fgreen = colorOptions[blset->colorRef]->green;
    e67a:	79b0      	ldrb	r0, [r6, #6]
    e67c:	47a0      	blx	r4
    e67e:	4680      	mov	r8, r0
	fblue = colorOptions[blset->colorRef]->blue;	
    e680:	7970      	ldrb	r0, [r6, #5]
    e682:	47a0      	blx	r4
    e684:	4682      	mov	sl, r0
	brightness = blset->brightness;
	
	
	scale = 1/(fred+fgreen+fblue);
    e686:	4e29      	ldr	r6, [pc, #164]	; (e72c <backlightColorToggle+0xdc>)
    e688:	4641      	mov	r1, r8
    e68a:	1c38      	adds	r0, r7, #0
    e68c:	47b0      	blx	r6
    e68e:	4651      	mov	r1, sl
    e690:	47b0      	blx	r6
    e692:	1c01      	adds	r1, r0, #0
    e694:	20fe      	movs	r0, #254	; 0xfe
    e696:	4e26      	ldr	r6, [pc, #152]	; (e730 <backlightColorToggle+0xe0>)
    e698:	0580      	lsls	r0, r0, #22
    e69a:	47b0      	blx	r6
    e69c:	4681      	mov	r9, r0
	brightness = blset->brightness;
    e69e:	7828      	ldrb	r0, [r5, #0]
    e6a0:	47a0      	blx	r4
	scale = (scale*brightness)/BRIGHT_MAX;
    e6a2:	4d24      	ldr	r5, [pc, #144]	; (e734 <backlightColorToggle+0xe4>)
	brightness = blset->brightness;
    e6a4:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    e6a6:	4648      	mov	r0, r9
    e6a8:	47a8      	blx	r5
    e6aa:	4923      	ldr	r1, [pc, #140]	; (e738 <backlightColorToggle+0xe8>)
    e6ac:	47b0      	blx	r6
	fred = scale*fred;
    e6ae:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    e6b0:	4681      	mov	r9, r0
	fred = scale*fred;
    e6b2:	1c38      	adds	r0, r7, #0
    e6b4:	47a8      	blx	r5
	fblue = scale*fblue;
	fgreen = scale*fgreen;
	
	u8red = fred*LED_MAX;
    e6b6:	4921      	ldr	r1, [pc, #132]	; (e73c <backlightColorToggle+0xec>)
    e6b8:	47a8      	blx	r5
    e6ba:	4f21      	ldr	r7, [pc, #132]	; (e740 <backlightColorToggle+0xf0>)
    e6bc:	47b8      	blx	r7
	fblue = scale*fblue;
    e6be:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    e6c0:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    e6c2:	4650      	mov	r0, sl
    e6c4:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    e6c6:	491d      	ldr	r1, [pc, #116]	; (e73c <backlightColorToggle+0xec>)
    e6c8:	47a8      	blx	r5
    e6ca:	47b8      	blx	r7
	if (u8blue>LED_MAX){u8blue = LED_MAX;}
	if (u8blue>LED_MAX){u8blue = LED_MAX;}
	
	uint16_t mes_len = 10;
	uint8_t temp_buf[mes_len];
	temp_buf[0]= 0x80;  //control register 0b10000000
    e6cc:	2380      	movs	r3, #128	; 0x80
    e6ce:	ac01      	add	r4, sp, #4
	u8blue = fblue*LED_MAX;
    e6d0:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    e6d2:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    e6d4:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    e6d6:	3b78      	subs	r3, #120	; 0x78
    e6d8:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    e6da:	1c03      	adds	r3, r0, #0
    e6dc:	28e1      	cmp	r0, #225	; 0xe1
    e6de:	d901      	bls.n	e6e4 <backlightColorToggle+0x94>
    e6e0:	4b18      	ldr	r3, [pc, #96]	; (e744 <backlightColorToggle+0xf4>)
    e6e2:	781b      	ldrb	r3, [r3, #0]
    e6e4:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    e6e6:	4649      	mov	r1, r9
    e6e8:	4640      	mov	r0, r8
    e6ea:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    e6ec:	4913      	ldr	r1, [pc, #76]	; (e73c <backlightColorToggle+0xec>)
    e6ee:	47a8      	blx	r5
    e6f0:	47b8      	blx	r7
	temp_buf[4]= u8green; //PWM1 - green
	temp_buf[5]= u8red; //PWM2 - red
    e6f2:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    e6f4:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    e6f6:	2ee1      	cmp	r6, #225	; 0xe1
    e6f8:	d901      	bls.n	e6fe <backlightColorToggle+0xae>
    e6fa:	4b12      	ldr	r3, [pc, #72]	; (e744 <backlightColorToggle+0xf4>)
    e6fc:	781b      	ldrb	r3, [r3, #0]
    e6fe:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    e700:	2300      	movs	r3, #0
    e702:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    e704:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    e706:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    e708:	332a      	adds	r3, #42	; 0x2a
    e70a:	7263      	strb	r3, [r4, #9]
	
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    e70c:	0022      	movs	r2, r4
    e70e:	3b20      	subs	r3, #32
    e710:	2162      	movs	r1, #98	; 0x62
    e712:	2001      	movs	r0, #1
    e714:	4c0c      	ldr	r4, [pc, #48]	; (e748 <backlightColorToggle+0xf8>)
    e716:	47a0      	blx	r4
}
    e718:	b004      	add	sp, #16
    e71a:	bc1c      	pop	{r2, r3, r4}
    e71c:	4690      	mov	r8, r2
    e71e:	4699      	mov	r9, r3
    e720:	46a2      	mov	sl, r4
    e722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e724:	200000ec 	.word	0x200000ec
    e728:	00026bb1 	.word	0x00026bb1
    e72c:	00025e55 	.word	0x00025e55
    e730:	00026179 	.word	0x00026179
    e734:	00026559 	.word	0x00026559
    e738:	40a00000 	.word	0x40a00000
    e73c:	43610000 	.word	0x43610000
    e740:	00025de9 	.word	0x00025de9
    e744:	0002d9ac 	.word	0x0002d9ac
    e748:	0001c3d9 	.word	0x0001c3d9

0000e74c <backlightPlus>:
void backlightPlus(struct BACKLIGHT_SETTING *blset){
    e74c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e74e:	46d6      	mov	lr, sl
    e750:	464f      	mov	r7, r9
    e752:	4646      	mov	r6, r8
    e754:	b5c0      	push	{r6, r7, lr}
	if ((blset->brightness) < BRIGHT_MAX){
    e756:	7804      	ldrb	r4, [r0, #0]
void backlightPlus(struct BACKLIGHT_SETTING *blset){
    e758:	b084      	sub	sp, #16
	if ((blset->brightness) < BRIGHT_MAX){
    e75a:	2c04      	cmp	r4, #4
    e75c:	d802      	bhi.n	e764 <backlightPlus+0x18>
		blset->brightness++;
    e75e:	3401      	adds	r4, #1
    e760:	b2e4      	uxtb	r4, r4
    e762:	7004      	strb	r4, [r0, #0]
	fred = colorOptions[blset->colorRef]->red;
    e764:	7843      	ldrb	r3, [r0, #1]
    e766:	4a2e      	ldr	r2, [pc, #184]	; (e820 <backlightPlus+0xd4>)
    e768:	009b      	lsls	r3, r3, #2
    e76a:	589e      	ldr	r6, [r3, r2]
    e76c:	4d2d      	ldr	r5, [pc, #180]	; (e824 <backlightPlus+0xd8>)
    e76e:	7930      	ldrb	r0, [r6, #4]
    e770:	47a8      	blx	r5
    e772:	4680      	mov	r8, r0
	fgreen = colorOptions[blset->colorRef]->green;
    e774:	79b0      	ldrb	r0, [r6, #6]
    e776:	47a8      	blx	r5
    e778:	1c07      	adds	r7, r0, #0
	fblue = colorOptions[blset->colorRef]->blue;	
    e77a:	7970      	ldrb	r0, [r6, #5]
    e77c:	47a8      	blx	r5
    e77e:	4682      	mov	sl, r0
	scale = 1/(fred+fgreen+fblue);
    e780:	4e29      	ldr	r6, [pc, #164]	; (e828 <backlightPlus+0xdc>)
    e782:	1c39      	adds	r1, r7, #0
    e784:	4640      	mov	r0, r8
    e786:	47b0      	blx	r6
    e788:	4651      	mov	r1, sl
    e78a:	47b0      	blx	r6
    e78c:	1c01      	adds	r1, r0, #0
    e78e:	20fe      	movs	r0, #254	; 0xfe
    e790:	4e26      	ldr	r6, [pc, #152]	; (e82c <backlightPlus+0xe0>)
    e792:	0580      	lsls	r0, r0, #22
    e794:	47b0      	blx	r6
    e796:	4681      	mov	r9, r0
	brightness = blset->brightness;
    e798:	0020      	movs	r0, r4
    e79a:	47a8      	blx	r5
	scale = (scale*brightness)/BRIGHT_MAX;
    e79c:	4d24      	ldr	r5, [pc, #144]	; (e830 <backlightPlus+0xe4>)
	brightness = blset->brightness;
    e79e:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    e7a0:	4648      	mov	r0, r9
    e7a2:	47a8      	blx	r5
    e7a4:	4923      	ldr	r1, [pc, #140]	; (e834 <backlightPlus+0xe8>)
    e7a6:	47b0      	blx	r6
	fred = scale*fred;
    e7a8:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    e7aa:	4681      	mov	r9, r0
	fred = scale*fred;
    e7ac:	4640      	mov	r0, r8
    e7ae:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    e7b0:	4921      	ldr	r1, [pc, #132]	; (e838 <backlightPlus+0xec>)
    e7b2:	47a8      	blx	r5
    e7b4:	4b21      	ldr	r3, [pc, #132]	; (e83c <backlightPlus+0xf0>)
	temp_buf[0]= 0x80;  //control register 0b10000000
    e7b6:	ac01      	add	r4, sp, #4
	u8red = fred*LED_MAX;
    e7b8:	4698      	mov	r8, r3
    e7ba:	4798      	blx	r3
	fblue = scale*fblue;
    e7bc:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    e7be:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    e7c0:	4650      	mov	r0, sl
    e7c2:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    e7c4:	491c      	ldr	r1, [pc, #112]	; (e838 <backlightPlus+0xec>)
    e7c6:	47a8      	blx	r5
    e7c8:	47c0      	blx	r8
	temp_buf[0]= 0x80;  //control register 0b10000000
    e7ca:	2380      	movs	r3, #128	; 0x80
	u8blue = fblue*LED_MAX;
    e7cc:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    e7ce:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    e7d0:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    e7d2:	3b78      	subs	r3, #120	; 0x78
    e7d4:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    e7d6:	1c03      	adds	r3, r0, #0
    e7d8:	28e1      	cmp	r0, #225	; 0xe1
    e7da:	d901      	bls.n	e7e0 <backlightPlus+0x94>
    e7dc:	4b18      	ldr	r3, [pc, #96]	; (e840 <backlightPlus+0xf4>)
    e7de:	781b      	ldrb	r3, [r3, #0]
    e7e0:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    e7e2:	4649      	mov	r1, r9
    e7e4:	1c38      	adds	r0, r7, #0
    e7e6:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    e7e8:	4913      	ldr	r1, [pc, #76]	; (e838 <backlightPlus+0xec>)
    e7ea:	47a8      	blx	r5
    e7ec:	47c0      	blx	r8
	temp_buf[5]= u8red; //PWM2 - red
    e7ee:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    e7f0:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    e7f2:	2ee1      	cmp	r6, #225	; 0xe1
    e7f4:	d901      	bls.n	e7fa <backlightPlus+0xae>
    e7f6:	4b12      	ldr	r3, [pc, #72]	; (e840 <backlightPlus+0xf4>)
    e7f8:	781b      	ldrb	r3, [r3, #0]
    e7fa:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    e7fc:	2300      	movs	r3, #0
    e7fe:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    e800:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    e802:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    e804:	332a      	adds	r3, #42	; 0x2a
    e806:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    e808:	0022      	movs	r2, r4
    e80a:	3b20      	subs	r3, #32
    e80c:	2162      	movs	r1, #98	; 0x62
    e80e:	2001      	movs	r0, #1
    e810:	4c0c      	ldr	r4, [pc, #48]	; (e844 <backlightPlus+0xf8>)
    e812:	47a0      	blx	r4
}
    e814:	b004      	add	sp, #16
    e816:	bc1c      	pop	{r2, r3, r4}
    e818:	4690      	mov	r8, r2
    e81a:	4699      	mov	r9, r3
    e81c:	46a2      	mov	sl, r4
    e81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e820:	200000ec 	.word	0x200000ec
    e824:	00026bb1 	.word	0x00026bb1
    e828:	00025e55 	.word	0x00025e55
    e82c:	00026179 	.word	0x00026179
    e830:	00026559 	.word	0x00026559
    e834:	40a00000 	.word	0x40a00000
    e838:	43610000 	.word	0x43610000
    e83c:	00025de9 	.word	0x00025de9
    e840:	0002d9ac 	.word	0x0002d9ac
    e844:	0001c3d9 	.word	0x0001c3d9

0000e848 <backlightMinus>:
void backlightMinus(struct BACKLIGHT_SETTING *blset){	
    e848:	b5f0      	push	{r4, r5, r6, r7, lr}
    e84a:	46d6      	mov	lr, sl
    e84c:	464f      	mov	r7, r9
    e84e:	4646      	mov	r6, r8
    e850:	b5c0      	push	{r6, r7, lr}
	if ((blset->brightness) > 0){
    e852:	7804      	ldrb	r4, [r0, #0]
void backlightMinus(struct BACKLIGHT_SETTING *blset){	
    e854:	b084      	sub	sp, #16
	if ((blset->brightness) > 0){
    e856:	2c00      	cmp	r4, #0
    e858:	d002      	beq.n	e860 <backlightMinus+0x18>
		blset->brightness--;
    e85a:	3c01      	subs	r4, #1
    e85c:	b2e4      	uxtb	r4, r4
    e85e:	7004      	strb	r4, [r0, #0]
	fred = colorOptions[blset->colorRef]->red;
    e860:	7843      	ldrb	r3, [r0, #1]
    e862:	4a2e      	ldr	r2, [pc, #184]	; (e91c <backlightMinus+0xd4>)
    e864:	009b      	lsls	r3, r3, #2
    e866:	589e      	ldr	r6, [r3, r2]
    e868:	4d2d      	ldr	r5, [pc, #180]	; (e920 <backlightMinus+0xd8>)
    e86a:	7930      	ldrb	r0, [r6, #4]
    e86c:	47a8      	blx	r5
    e86e:	4680      	mov	r8, r0
	fgreen = colorOptions[blset->colorRef]->green;
    e870:	79b0      	ldrb	r0, [r6, #6]
    e872:	47a8      	blx	r5
    e874:	1c07      	adds	r7, r0, #0
	fblue = colorOptions[blset->colorRef]->blue;	
    e876:	7970      	ldrb	r0, [r6, #5]
    e878:	47a8      	blx	r5
    e87a:	4682      	mov	sl, r0
	scale = 1/(fred+fgreen+fblue);
    e87c:	4e29      	ldr	r6, [pc, #164]	; (e924 <backlightMinus+0xdc>)
    e87e:	1c39      	adds	r1, r7, #0
    e880:	4640      	mov	r0, r8
    e882:	47b0      	blx	r6
    e884:	4651      	mov	r1, sl
    e886:	47b0      	blx	r6
    e888:	1c01      	adds	r1, r0, #0
    e88a:	20fe      	movs	r0, #254	; 0xfe
    e88c:	4e26      	ldr	r6, [pc, #152]	; (e928 <backlightMinus+0xe0>)
    e88e:	0580      	lsls	r0, r0, #22
    e890:	47b0      	blx	r6
    e892:	4681      	mov	r9, r0
	brightness = blset->brightness;
    e894:	0020      	movs	r0, r4
    e896:	47a8      	blx	r5
	scale = (scale*brightness)/BRIGHT_MAX;
    e898:	4d24      	ldr	r5, [pc, #144]	; (e92c <backlightMinus+0xe4>)
	brightness = blset->brightness;
    e89a:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    e89c:	4648      	mov	r0, r9
    e89e:	47a8      	blx	r5
    e8a0:	4923      	ldr	r1, [pc, #140]	; (e930 <backlightMinus+0xe8>)
    e8a2:	47b0      	blx	r6
	fred = scale*fred;
    e8a4:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    e8a6:	4681      	mov	r9, r0
	fred = scale*fred;
    e8a8:	4640      	mov	r0, r8
    e8aa:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    e8ac:	4921      	ldr	r1, [pc, #132]	; (e934 <backlightMinus+0xec>)
    e8ae:	47a8      	blx	r5
    e8b0:	4b21      	ldr	r3, [pc, #132]	; (e938 <backlightMinus+0xf0>)
	temp_buf[0]= 0x80;  //control register 0b10000000
    e8b2:	ac01      	add	r4, sp, #4
	u8red = fred*LED_MAX;
    e8b4:	4698      	mov	r8, r3
    e8b6:	4798      	blx	r3
	fblue = scale*fblue;
    e8b8:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    e8ba:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    e8bc:	4650      	mov	r0, sl
    e8be:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    e8c0:	491c      	ldr	r1, [pc, #112]	; (e934 <backlightMinus+0xec>)
    e8c2:	47a8      	blx	r5
    e8c4:	47c0      	blx	r8
	temp_buf[0]= 0x80;  //control register 0b10000000
    e8c6:	2380      	movs	r3, #128	; 0x80
	u8blue = fblue*LED_MAX;
    e8c8:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    e8ca:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    e8cc:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    e8ce:	3b78      	subs	r3, #120	; 0x78
    e8d0:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    e8d2:	1c03      	adds	r3, r0, #0
    e8d4:	28e1      	cmp	r0, #225	; 0xe1
    e8d6:	d901      	bls.n	e8dc <backlightMinus+0x94>
    e8d8:	4b18      	ldr	r3, [pc, #96]	; (e93c <backlightMinus+0xf4>)
    e8da:	781b      	ldrb	r3, [r3, #0]
    e8dc:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    e8de:	4649      	mov	r1, r9
    e8e0:	1c38      	adds	r0, r7, #0
    e8e2:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    e8e4:	4913      	ldr	r1, [pc, #76]	; (e934 <backlightMinus+0xec>)
    e8e6:	47a8      	blx	r5
    e8e8:	47c0      	blx	r8
	temp_buf[5]= u8red; //PWM2 - red
    e8ea:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    e8ec:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    e8ee:	2ee1      	cmp	r6, #225	; 0xe1
    e8f0:	d901      	bls.n	e8f6 <backlightMinus+0xae>
    e8f2:	4b12      	ldr	r3, [pc, #72]	; (e93c <backlightMinus+0xf4>)
    e8f4:	781b      	ldrb	r3, [r3, #0]
    e8f6:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    e8f8:	2300      	movs	r3, #0
    e8fa:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    e8fc:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    e8fe:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    e900:	332a      	adds	r3, #42	; 0x2a
    e902:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    e904:	0022      	movs	r2, r4
    e906:	3b20      	subs	r3, #32
    e908:	2162      	movs	r1, #98	; 0x62
    e90a:	2001      	movs	r0, #1
    e90c:	4c0c      	ldr	r4, [pc, #48]	; (e940 <backlightMinus+0xf8>)
    e90e:	47a0      	blx	r4
}
    e910:	b004      	add	sp, #16
    e912:	bc1c      	pop	{r2, r3, r4}
    e914:	4690      	mov	r8, r2
    e916:	4699      	mov	r9, r3
    e918:	46a2      	mov	sl, r4
    e91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e91c:	200000ec 	.word	0x200000ec
    e920:	00026bb1 	.word	0x00026bb1
    e924:	00025e55 	.word	0x00025e55
    e928:	00026179 	.word	0x00026179
    e92c:	00026559 	.word	0x00026559
    e930:	40a00000 	.word	0x40a00000
    e934:	43610000 	.word	0x43610000
    e938:	00025de9 	.word	0x00025de9
    e93c:	0002d9ac 	.word	0x0002d9ac
    e940:	0001c3d9 	.word	0x0001c3d9

0000e944 <backlightLevelToggle>:
void backlightLevelToggle(struct BACKLIGHT_SETTING *blset){
    e944:	b5f0      	push	{r4, r5, r6, r7, lr}
    e946:	46d6      	mov	lr, sl
    e948:	464f      	mov	r7, r9
    e94a:	4646      	mov	r6, r8
    e94c:	b5c0      	push	{r6, r7, lr}
	blset->brightness++;
    e94e:	7804      	ldrb	r4, [r0, #0]
void backlightLevelToggle(struct BACKLIGHT_SETTING *blset){
    e950:	b084      	sub	sp, #16
	blset->brightness++;
    e952:	3401      	adds	r4, #1
    e954:	b2e4      	uxtb	r4, r4
	if ((blset->brightness) > BRIGHT_MAX){
    e956:	2c05      	cmp	r4, #5
    e958:	d960      	bls.n	ea1c <backlightLevelToggle+0xd8>
		blset->brightness = 0;
    e95a:	2300      	movs	r3, #0
    e95c:	2400      	movs	r4, #0
    e95e:	7003      	strb	r3, [r0, #0]
	fred = colorOptions[blset->colorRef]->red;
    e960:	7843      	ldrb	r3, [r0, #1]
    e962:	4a2f      	ldr	r2, [pc, #188]	; (ea20 <backlightLevelToggle+0xdc>)
    e964:	009b      	lsls	r3, r3, #2
    e966:	589e      	ldr	r6, [r3, r2]
    e968:	4d2e      	ldr	r5, [pc, #184]	; (ea24 <backlightLevelToggle+0xe0>)
    e96a:	7930      	ldrb	r0, [r6, #4]
    e96c:	47a8      	blx	r5
    e96e:	4680      	mov	r8, r0
	fgreen = colorOptions[blset->colorRef]->green;
    e970:	79b0      	ldrb	r0, [r6, #6]
    e972:	47a8      	blx	r5
    e974:	1c07      	adds	r7, r0, #0
	fblue = colorOptions[blset->colorRef]->blue;	
    e976:	7970      	ldrb	r0, [r6, #5]
    e978:	47a8      	blx	r5
    e97a:	4682      	mov	sl, r0
	scale = 1/(fred+fgreen+fblue);
    e97c:	4e2a      	ldr	r6, [pc, #168]	; (ea28 <backlightLevelToggle+0xe4>)
    e97e:	1c39      	adds	r1, r7, #0
    e980:	4640      	mov	r0, r8
    e982:	47b0      	blx	r6
    e984:	4651      	mov	r1, sl
    e986:	47b0      	blx	r6
    e988:	1c01      	adds	r1, r0, #0
    e98a:	20fe      	movs	r0, #254	; 0xfe
    e98c:	4e27      	ldr	r6, [pc, #156]	; (ea2c <backlightLevelToggle+0xe8>)
    e98e:	0580      	lsls	r0, r0, #22
    e990:	47b0      	blx	r6
    e992:	4681      	mov	r9, r0
	brightness = blset->brightness;
    e994:	0020      	movs	r0, r4
    e996:	47a8      	blx	r5
	scale = (scale*brightness)/BRIGHT_MAX;
    e998:	4d25      	ldr	r5, [pc, #148]	; (ea30 <backlightLevelToggle+0xec>)
	brightness = blset->brightness;
    e99a:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    e99c:	4648      	mov	r0, r9
    e99e:	47a8      	blx	r5
    e9a0:	4924      	ldr	r1, [pc, #144]	; (ea34 <backlightLevelToggle+0xf0>)
    e9a2:	47b0      	blx	r6
	fred = scale*fred;
    e9a4:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    e9a6:	4681      	mov	r9, r0
	fred = scale*fred;
    e9a8:	4640      	mov	r0, r8
    e9aa:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    e9ac:	4922      	ldr	r1, [pc, #136]	; (ea38 <backlightLevelToggle+0xf4>)
    e9ae:	47a8      	blx	r5
    e9b0:	4b22      	ldr	r3, [pc, #136]	; (ea3c <backlightLevelToggle+0xf8>)
	temp_buf[0]= 0x80;  //control register 0b10000000
    e9b2:	ac01      	add	r4, sp, #4
	u8red = fred*LED_MAX;
    e9b4:	4698      	mov	r8, r3
    e9b6:	4798      	blx	r3
	fblue = scale*fblue;
    e9b8:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    e9ba:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    e9bc:	4650      	mov	r0, sl
    e9be:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    e9c0:	491d      	ldr	r1, [pc, #116]	; (ea38 <backlightLevelToggle+0xf4>)
    e9c2:	47a8      	blx	r5
    e9c4:	47c0      	blx	r8
	temp_buf[0]= 0x80;  //control register 0b10000000
    e9c6:	2380      	movs	r3, #128	; 0x80
	u8blue = fblue*LED_MAX;
    e9c8:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    e9ca:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    e9cc:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    e9ce:	3b78      	subs	r3, #120	; 0x78
    e9d0:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    e9d2:	1c03      	adds	r3, r0, #0
    e9d4:	28e1      	cmp	r0, #225	; 0xe1
    e9d6:	d901      	bls.n	e9dc <backlightLevelToggle+0x98>
    e9d8:	4b19      	ldr	r3, [pc, #100]	; (ea40 <backlightLevelToggle+0xfc>)
    e9da:	781b      	ldrb	r3, [r3, #0]
    e9dc:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    e9de:	4649      	mov	r1, r9
    e9e0:	1c38      	adds	r0, r7, #0
    e9e2:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    e9e4:	4914      	ldr	r1, [pc, #80]	; (ea38 <backlightLevelToggle+0xf4>)
    e9e6:	47a8      	blx	r5
    e9e8:	47c0      	blx	r8
	temp_buf[5]= u8red; //PWM2 - red
    e9ea:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    e9ec:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    e9ee:	2ee1      	cmp	r6, #225	; 0xe1
    e9f0:	d901      	bls.n	e9f6 <backlightLevelToggle+0xb2>
    e9f2:	4b13      	ldr	r3, [pc, #76]	; (ea40 <backlightLevelToggle+0xfc>)
    e9f4:	781b      	ldrb	r3, [r3, #0]
    e9f6:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    e9f8:	2300      	movs	r3, #0
    e9fa:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    e9fc:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    e9fe:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    ea00:	332a      	adds	r3, #42	; 0x2a
    ea02:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    ea04:	0022      	movs	r2, r4
    ea06:	3b20      	subs	r3, #32
    ea08:	2162      	movs	r1, #98	; 0x62
    ea0a:	2001      	movs	r0, #1
    ea0c:	4c0d      	ldr	r4, [pc, #52]	; (ea44 <backlightLevelToggle+0x100>)
    ea0e:	47a0      	blx	r4
}
    ea10:	b004      	add	sp, #16
    ea12:	bc1c      	pop	{r2, r3, r4}
    ea14:	4690      	mov	r8, r2
    ea16:	4699      	mov	r9, r3
    ea18:	46a2      	mov	sl, r4
    ea1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	blset->brightness++;
    ea1c:	7004      	strb	r4, [r0, #0]
    ea1e:	e79f      	b.n	e960 <backlightLevelToggle+0x1c>
    ea20:	200000ec 	.word	0x200000ec
    ea24:	00026bb1 	.word	0x00026bb1
    ea28:	00025e55 	.word	0x00025e55
    ea2c:	00026179 	.word	0x00026179
    ea30:	00026559 	.word	0x00026559
    ea34:	40a00000 	.word	0x40a00000
    ea38:	43610000 	.word	0x43610000
    ea3c:	00025de9 	.word	0x00025de9
    ea40:	0002d9ac 	.word	0x0002d9ac
    ea44:	0001c3d9 	.word	0x0001c3d9

0000ea48 <backlightGetCurrentColor>:
	strPtr = colorOptions[blset->colorRef]->colorStringPtr;
    ea48:	7843      	ldrb	r3, [r0, #1]
    ea4a:	4a02      	ldr	r2, [pc, #8]	; (ea54 <backlightGetCurrentColor+0xc>)
    ea4c:	009b      	lsls	r3, r3, #2
    ea4e:	589b      	ldr	r3, [r3, r2]
	return strPtr;	
    ea50:	6818      	ldr	r0, [r3, #0]
}
    ea52:	4770      	bx	lr
    ea54:	200000ec 	.word	0x200000ec

0000ea58 <backlightOn>:
void backlightOn(struct BACKLIGHT_SETTING *blset){
    ea58:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea5a:	46de      	mov	lr, fp
    ea5c:	4657      	mov	r7, sl
    ea5e:	464e      	mov	r6, r9
    ea60:	4645      	mov	r5, r8
    ea62:	b5e0      	push	{r5, r6, r7, lr}
	fred = colorOptions[blset->colorRef]->red;
    ea64:	7843      	ldrb	r3, [r0, #1]
    ea66:	4a30      	ldr	r2, [pc, #192]	; (eb28 <backlightOn+0xd0>)
    ea68:	009b      	lsls	r3, r3, #2
    ea6a:	589d      	ldr	r5, [r3, r2]
void backlightOn(struct BACKLIGHT_SETTING *blset){
    ea6c:	b085      	sub	sp, #20
	fred = colorOptions[blset->colorRef]->red;
    ea6e:	4c2f      	ldr	r4, [pc, #188]	; (eb2c <backlightOn+0xd4>)
void backlightOn(struct BACKLIGHT_SETTING *blset){
    ea70:	0007      	movs	r7, r0
	fred = colorOptions[blset->colorRef]->red;
    ea72:	7928      	ldrb	r0, [r5, #4]
    ea74:	47a0      	blx	r4
    ea76:	1c06      	adds	r6, r0, #0
	fgreen = colorOptions[blset->colorRef]->green;
    ea78:	79a8      	ldrb	r0, [r5, #6]
    ea7a:	47a0      	blx	r4
    ea7c:	4680      	mov	r8, r0
	fblue = colorOptions[blset->colorRef]->blue;	
    ea7e:	7968      	ldrb	r0, [r5, #5]
    ea80:	47a0      	blx	r4
    ea82:	4682      	mov	sl, r0
	scale = 1/(fred+fgreen+fblue);
    ea84:	4d2a      	ldr	r5, [pc, #168]	; (eb30 <backlightOn+0xd8>)
    ea86:	4641      	mov	r1, r8
    ea88:	1c30      	adds	r0, r6, #0
    ea8a:	47a8      	blx	r5
    ea8c:	4651      	mov	r1, sl
    ea8e:	47a8      	blx	r5
    ea90:	1c01      	adds	r1, r0, #0
    ea92:	20fe      	movs	r0, #254	; 0xfe
    ea94:	4b27      	ldr	r3, [pc, #156]	; (eb34 <backlightOn+0xdc>)
    ea96:	0580      	lsls	r0, r0, #22
    ea98:	4699      	mov	r9, r3
    ea9a:	4798      	blx	r3
    ea9c:	4683      	mov	fp, r0
	brightness = blset->brightness;
    ea9e:	7838      	ldrb	r0, [r7, #0]
    eaa0:	47a0      	blx	r4
	scale = (scale*brightness)/BRIGHT_MAX;
    eaa2:	4d25      	ldr	r5, [pc, #148]	; (eb38 <backlightOn+0xe0>)
	brightness = blset->brightness;
    eaa4:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    eaa6:	4658      	mov	r0, fp
    eaa8:	47a8      	blx	r5
    eaaa:	4924      	ldr	r1, [pc, #144]	; (eb3c <backlightOn+0xe4>)
    eaac:	47c8      	blx	r9
	fred = scale*fred;
    eaae:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    eab0:	4681      	mov	r9, r0
	fred = scale*fred;
    eab2:	1c30      	adds	r0, r6, #0
    eab4:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    eab6:	4922      	ldr	r1, [pc, #136]	; (eb40 <backlightOn+0xe8>)
    eab8:	47a8      	blx	r5
    eaba:	4f22      	ldr	r7, [pc, #136]	; (eb44 <backlightOn+0xec>)
    eabc:	47b8      	blx	r7
	fblue = scale*fblue;
    eabe:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    eac0:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    eac2:	4650      	mov	r0, sl
    eac4:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    eac6:	491e      	ldr	r1, [pc, #120]	; (eb40 <backlightOn+0xe8>)
    eac8:	47a8      	blx	r5
    eaca:	47b8      	blx	r7
	temp_buf[0]= 0x80;  //control register 0b10000000
    eacc:	2380      	movs	r3, #128	; 0x80
    eace:	ac01      	add	r4, sp, #4
	u8blue = fblue*LED_MAX;
    ead0:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    ead2:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    ead4:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    ead6:	3b78      	subs	r3, #120	; 0x78
    ead8:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    eada:	1c03      	adds	r3, r0, #0
    eadc:	28e1      	cmp	r0, #225	; 0xe1
    eade:	d901      	bls.n	eae4 <backlightOn+0x8c>
    eae0:	4b19      	ldr	r3, [pc, #100]	; (eb48 <backlightOn+0xf0>)
    eae2:	781b      	ldrb	r3, [r3, #0]
    eae4:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    eae6:	4649      	mov	r1, r9
    eae8:	4640      	mov	r0, r8
    eaea:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    eaec:	4914      	ldr	r1, [pc, #80]	; (eb40 <backlightOn+0xe8>)
    eaee:	47a8      	blx	r5
    eaf0:	47b8      	blx	r7
	temp_buf[5]= u8red; //PWM2 - red
    eaf2:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    eaf4:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    eaf6:	2ee1      	cmp	r6, #225	; 0xe1
    eaf8:	d901      	bls.n	eafe <backlightOn+0xa6>
    eafa:	4b13      	ldr	r3, [pc, #76]	; (eb48 <backlightOn+0xf0>)
    eafc:	781b      	ldrb	r3, [r3, #0]
    eafe:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    eb00:	2300      	movs	r3, #0
    eb02:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    eb04:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    eb06:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    eb08:	332a      	adds	r3, #42	; 0x2a
    eb0a:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    eb0c:	0022      	movs	r2, r4
    eb0e:	3b20      	subs	r3, #32
    eb10:	2162      	movs	r1, #98	; 0x62
    eb12:	2001      	movs	r0, #1
    eb14:	4c0d      	ldr	r4, [pc, #52]	; (eb4c <backlightOn+0xf4>)
    eb16:	47a0      	blx	r4
	

}
    eb18:	b005      	add	sp, #20
    eb1a:	bc3c      	pop	{r2, r3, r4, r5}
    eb1c:	4690      	mov	r8, r2
    eb1e:	4699      	mov	r9, r3
    eb20:	46a2      	mov	sl, r4
    eb22:	46ab      	mov	fp, r5
    eb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb26:	46c0      	nop			; (mov r8, r8)
    eb28:	200000ec 	.word	0x200000ec
    eb2c:	00026bb1 	.word	0x00026bb1
    eb30:	00025e55 	.word	0x00025e55
    eb34:	00026179 	.word	0x00026179
    eb38:	00026559 	.word	0x00026559
    eb3c:	40a00000 	.word	0x40a00000
    eb40:	43610000 	.word	0x43610000
    eb44:	00025de9 	.word	0x00025de9
    eb48:	0002d9ac 	.word	0x0002d9ac
    eb4c:	0001c3d9 	.word	0x0001c3d9

0000eb50 <backlightOff>:

void backlightOff(void){
		
	uint16_t mes_len = 10;
	uint8_t temp_buf[mes_len];
	temp_buf[0]= 0x80;  //control register 0b10000000
    eb50:	2380      	movs	r3, #128	; 0x80
void backlightOff(void){
    eb52:	b510      	push	{r4, lr}
    eb54:	b084      	sub	sp, #16
	temp_buf[0]= 0x80;  //control register 0b10000000
    eb56:	aa01      	add	r2, sp, #4
    eb58:	7013      	strb	r3, [r2, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    eb5a:	7053      	strb	r3, [r2, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    eb5c:	3b78      	subs	r3, #120	; 0x78
    eb5e:	7093      	strb	r3, [r2, #2]
	temp_buf[3]= 0x00; //PWM0 - blue
    eb60:	2300      	movs	r3, #0
    eb62:	70d3      	strb	r3, [r2, #3]
	temp_buf[4]= 0x00; //PWM1 - green
    eb64:	7113      	strb	r3, [r2, #4]
	temp_buf[5]= 0x00; //PWM2 - red
    eb66:	7153      	strb	r3, [r2, #5]
	temp_buf[6]= 0x00; //PWM3
    eb68:	7193      	strb	r3, [r2, #6]
	temp_buf[7]= 0x00; //GRPPWM
    eb6a:	71d3      	strb	r3, [r2, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    eb6c:	7213      	strb	r3, [r2, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    eb6e:	332a      	adds	r3, #42	; 0x2a
    eb70:	7253      	strb	r3, [r2, #9]
	
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    eb72:	2162      	movs	r1, #98	; 0x62
    eb74:	3b20      	subs	r3, #32
    eb76:	2001      	movs	r0, #1
    eb78:	4c01      	ldr	r4, [pc, #4]	; (eb80 <backlightOff+0x30>)
    eb7a:	47a0      	blx	r4
	
}
    eb7c:	b004      	add	sp, #16
    eb7e:	bd10      	pop	{r4, pc}
    eb80:	0001c3d9 	.word	0x0001c3d9

0000eb84 <BleUpdateBattLevel>:
uint16_t VFull=0xD200;
uint16_t HibCFG;
float battVoltage;


void BleUpdateBattLevel(void){
    eb84:	b530      	push	{r4, r5, lr}
	if (current_state==st_powerdown){
    eb86:	4b13      	ldr	r3, [pc, #76]	; (ebd4 <BleUpdateBattLevel+0x50>)
void BleUpdateBattLevel(void){
    eb88:	b083      	sub	sp, #12
	if (current_state==st_powerdown){
    eb8a:	681b      	ldr	r3, [r3, #0]
    eb8c:	2b04      	cmp	r3, #4
    eb8e:	d01b      	beq.n	ebc8 <BleUpdateBattLevel+0x44>
		return;
	}
	uint8_t retBatt, currBatt;
	
	retBatt = BLE_getBatteryLevel();
    eb90:	4b11      	ldr	r3, [pc, #68]	; (ebd8 <BleUpdateBattLevel+0x54>)
    eb92:	4798      	blx	r3
}

uint16_t getBatteryLevel(void){
	//  Reads back battery state of charge in %, 0-100
	uint16_t batt_SOC;
	max17055_reg_read_write(readp, 0x06, &batt_SOC);
    eb94:	466b      	mov	r3, sp
    eb96:	1d9c      	adds	r4, r3, #6
    eb98:	0022      	movs	r2, r4
    eb9a:	2106      	movs	r1, #6
    eb9c:	4b0f      	ldr	r3, [pc, #60]	; (ebdc <BleUpdateBattLevel+0x58>)
	retBatt = BLE_getBatteryLevel();
    eb9e:	0005      	movs	r5, r0
	max17055_reg_read_write(readp, 0x06, &batt_SOC);
    eba0:	2000      	movs	r0, #0
    eba2:	4798      	blx	r3
	batt_SOC=batt_SOC>>8;
    eba4:	8820      	ldrh	r0, [r4, #0]
	//  Add margin to show topped-off battery
	batt_SOC = batt_SOC*1.03;  
    eba6:	4b0e      	ldr	r3, [pc, #56]	; (ebe0 <BleUpdateBattLevel+0x5c>)
    eba8:	0a00      	lsrs	r0, r0, #8
    ebaa:	4798      	blx	r3
    ebac:	4a0d      	ldr	r2, [pc, #52]	; (ebe4 <BleUpdateBattLevel+0x60>)
    ebae:	4b0e      	ldr	r3, [pc, #56]	; (ebe8 <BleUpdateBattLevel+0x64>)
    ebb0:	4c0e      	ldr	r4, [pc, #56]	; (ebec <BleUpdateBattLevel+0x68>)
    ebb2:	47a0      	blx	r4
    ebb4:	4b0e      	ldr	r3, [pc, #56]	; (ebf0 <BleUpdateBattLevel+0x6c>)
    ebb6:	4798      	blx	r3
    ebb8:	b283      	uxth	r3, r0
	if (batt_SOC>100){
    ebba:	2064      	movs	r0, #100	; 0x64
    ebbc:	2b64      	cmp	r3, #100	; 0x64
    ebbe:	d905      	bls.n	ebcc <BleUpdateBattLevel+0x48>
	if (retBatt!=currBatt){
    ebc0:	4285      	cmp	r5, r0
    ebc2:	d001      	beq.n	ebc8 <BleUpdateBattLevel+0x44>
		BLE_setBatteryLevel(currBatt);
    ebc4:	4b0b      	ldr	r3, [pc, #44]	; (ebf4 <BleUpdateBattLevel+0x70>)
    ebc6:	4798      	blx	r3
}
    ebc8:	b003      	add	sp, #12
    ebca:	bd30      	pop	{r4, r5, pc}
    ebcc:	b2d8      	uxtb	r0, r3
	if (retBatt!=currBatt){
    ebce:	4285      	cmp	r5, r0
    ebd0:	d1f8      	bne.n	ebc4 <BleUpdateBattLevel+0x40>
    ebd2:	e7f9      	b.n	ebc8 <BleUpdateBattLevel+0x44>
    ebd4:	20002630 	.word	0x20002630
    ebd8:	0000f465 	.word	0x0000f465
    ebdc:	0001c489 	.word	0x0001c489
    ebe0:	00028699 	.word	0x00028699
    ebe4:	47ae147b 	.word	0x47ae147b
    ebe8:	3ff07ae1 	.word	0x3ff07ae1
    ebec:	00027ac5 	.word	0x00027ac5
    ebf0:	00025e19 	.word	0x00025e19
    ebf4:	0000f4ad 	.word	0x0000f4ad

0000ebf8 <config_batt>:
void config_batt(void){
    ebf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebfa:	46ce      	mov	lr, r9
    ebfc:	4647      	mov	r7, r8
    ebfe:	b580      	push	{r7, lr}
    ec00:	b083      	sub	sp, #12
	max17055_reg_read_write(readp, 0x3D, &data1);//check DNR bit 0x3D bit 1
    ec02:	466b      	mov	r3, sp
    ec04:	1d9c      	adds	r4, r3, #6
    ec06:	0022      	movs	r2, r4
    ec08:	213d      	movs	r1, #61	; 0x3d
    ec0a:	2000      	movs	r0, #0
    ec0c:	4d34      	ldr	r5, [pc, #208]	; (ece0 <config_batt+0xe8>)
    ec0e:	47a8      	blx	r5
	while(data1 & 0x0001){
    ec10:	8823      	ldrh	r3, [r4, #0]
    ec12:	4e34      	ldr	r6, [pc, #208]	; (ece4 <config_batt+0xec>)
    ec14:	07db      	lsls	r3, r3, #31
    ec16:	d509      	bpl.n	ec2c <config_batt+0x34>
    ec18:	2701      	movs	r7, #1
		delay_ms(10);
    ec1a:	200a      	movs	r0, #10
    ec1c:	47b0      	blx	r6
		max17055_reg_read_write(readp, 0x3D, &data1);
    ec1e:	0022      	movs	r2, r4
    ec20:	213d      	movs	r1, #61	; 0x3d
    ec22:	2000      	movs	r0, #0
    ec24:	47a8      	blx	r5
	while(data1 & 0x0001){
    ec26:	8823      	ldrh	r3, [r4, #0]
    ec28:	421f      	tst	r7, r3
    ec2a:	d1f6      	bne.n	ec1a <config_batt+0x22>
	max17055_reg_read_write(writep, 0x18, &DesignCap);//Write design capacity register 0x18
    ec2c:	4b2e      	ldr	r3, [pc, #184]	; (ece8 <config_batt+0xf0>)
    ec2e:	2118      	movs	r1, #24
    ec30:	4699      	mov	r9, r3
    ec32:	001a      	movs	r2, r3
    ec34:	2001      	movs	r0, #1
    ec36:	47a8      	blx	r5
	data1=DesignCap/32;
    ec38:	464b      	mov	r3, r9
    ec3a:	881b      	ldrh	r3, [r3, #0]
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    ec3c:	0022      	movs	r2, r4
	data1=DesignCap/32;
    ec3e:	095b      	lsrs	r3, r3, #5
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    ec40:	2145      	movs	r1, #69	; 0x45
    ec42:	2001      	movs	r0, #1
	data1=DesignCap/32;
    ec44:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    ec46:	47a8      	blx	r5
	max17055_reg_read_write(writep, 0x1E, &IchgTerm);//Write termination charge register 0x1E
    ec48:	4a28      	ldr	r2, [pc, #160]	; (ecec <config_batt+0xf4>)
    ec4a:	211e      	movs	r1, #30
    ec4c:	2001      	movs	r0, #1
    ec4e:	47a8      	blx	r5
	max17055_reg_read_write(writep, 0x3A, &VEmpty);//Write empty voltage, register 0x3A
    ec50:	4a27      	ldr	r2, [pc, #156]	; (ecf0 <config_batt+0xf8>)
    ec52:	213a      	movs	r1, #58	; 0x3a
    ec54:	2001      	movs	r0, #1
    ec56:	47a8      	blx	r5
	max17055_reg_read_write(readp, 0xBA, &HibCFG);//Save hibernation configuration
    ec58:	4f26      	ldr	r7, [pc, #152]	; (ecf4 <config_batt+0xfc>)
    ec5a:	21ba      	movs	r1, #186	; 0xba
    ec5c:	003a      	movs	r2, r7
    ec5e:	2000      	movs	r0, #0
    ec60:	47a8      	blx	r5
	data1=0x90;
    ec62:	2390      	movs	r3, #144	; 0x90
	max17055_reg_read_write(writep, 0x60, &data1);//Exit hibernate mode step 1
    ec64:	0022      	movs	r2, r4
    ec66:	2160      	movs	r1, #96	; 0x60
    ec68:	2001      	movs	r0, #1
	data1=0x90;
    ec6a:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0x60, &data1);//Exit hibernate mode step 1
    ec6c:	47a8      	blx	r5
	data1=0x00;
    ec6e:	2300      	movs	r3, #0
    ec70:	4698      	mov	r8, r3
	max17055_reg_read_write(writep,0xBA, &data1);//exit hibernate mode step 2
    ec72:	0022      	movs	r2, r4
    ec74:	21ba      	movs	r1, #186	; 0xba
    ec76:	2001      	movs	r0, #1
	data1=0x00;
    ec78:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep,0xBA, &data1);//exit hibernate mode step 2
    ec7a:	47a8      	blx	r5
	data1=0x00;
    ec7c:	4643      	mov	r3, r8
	max17055_reg_read_write(writep, 0x60, &data1);//exit hibernate mode step 3
    ec7e:	0022      	movs	r2, r4
    ec80:	2160      	movs	r1, #96	; 0x60
    ec82:	2001      	movs	r0, #1
	data1=0x00;
    ec84:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0x60, &data1);//exit hibernate mode step 3
    ec86:	47a8      	blx	r5
	data1=DesignCap/32;
    ec88:	464b      	mov	r3, r9
    ec8a:	8819      	ldrh	r1, [r3, #0]
	data1=data1*44138;
    ec8c:	481a      	ldr	r0, [pc, #104]	; (ecf8 <config_batt+0x100>)
	data1=DesignCap/32;
    ec8e:	094b      	lsrs	r3, r1, #5
	data1=data1*44138;
    ec90:	4358      	muls	r0, r3
	data1=data1/DesignCap;
    ec92:	4b1a      	ldr	r3, [pc, #104]	; (ecfc <config_batt+0x104>)
    ec94:	b280      	uxth	r0, r0
    ec96:	4798      	blx	r3
	max17055_reg_read_write(writep, 0x46, &data1);//write dPAcc register 0x46
    ec98:	0022      	movs	r2, r4
	data1=data1/DesignCap;
    ec9a:	8020      	strh	r0, [r4, #0]
	max17055_reg_read_write(writep, 0x46, &data1);//write dPAcc register 0x46
    ec9c:	2146      	movs	r1, #70	; 0x46
    ec9e:	2001      	movs	r0, #1
    eca0:	47a8      	blx	r5
	data1=0x8000;//model 0
    eca2:	4b17      	ldr	r3, [pc, #92]	; (ed00 <config_batt+0x108>)
	max17055_reg_read_write(writep, 0xD8, &data1);//write model configuration at register D8
    eca4:	0022      	movs	r2, r4
    eca6:	21d8      	movs	r1, #216	; 0xd8
    eca8:	2001      	movs	r0, #1
	data1=0x8000;//model 0
    ecaa:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0xD8, &data1);//write model configuration at register D8
    ecac:	47a8      	blx	r5
	data1=0x0000;
    ecae:	4643      	mov	r3, r8
    ecb0:	8023      	strh	r3, [r4, #0]
		delay_ms(10);
    ecb2:	200a      	movs	r0, #10
    ecb4:	47b0      	blx	r6
		max17055_reg_read_write(readp,0xD8,&data1);
    ecb6:	0022      	movs	r2, r4
    ecb8:	21d8      	movs	r1, #216	; 0xd8
    ecba:	2000      	movs	r0, #0
    ecbc:	47a8      	blx	r5
		data1=data1 & 0x8000;
    ecbe:	8823      	ldrh	r3, [r4, #0]
    ecc0:	0bda      	lsrs	r2, r3, #15
    ecc2:	03d2      	lsls	r2, r2, #15
	while(!data1){
    ecc4:	b21b      	sxth	r3, r3
		data1=data1 & 0x8000;
    ecc6:	8022      	strh	r2, [r4, #0]
	while(!data1){
    ecc8:	2b00      	cmp	r3, #0
    ecca:	daf2      	bge.n	ecb2 <config_batt+0xba>
	max17055_reg_read_write(writep, 0xBA, &HibCFG);//restore hiberation configuration at register 0xBA
    eccc:	003a      	movs	r2, r7
    ecce:	21ba      	movs	r1, #186	; 0xba
    ecd0:	2001      	movs	r0, #1
    ecd2:	47a8      	blx	r5
}
    ecd4:	b003      	add	sp, #12
    ecd6:	bc0c      	pop	{r2, r3}
    ecd8:	4690      	mov	r8, r2
    ecda:	4699      	mov	r9, r3
    ecdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ecde:	46c0      	nop			; (mov r8, r8)
    ece0:	0001c489 	.word	0x0001c489
    ece4:	0001f509 	.word	0x0001f509
    ece8:	20000158 	.word	0x20000158
    ecec:	2000015a 	.word	0x2000015a
    ecf0:	2000015c 	.word	0x2000015c
    ecf4:	20001244 	.word	0x20001244
    ecf8:	ffffac6a 	.word	0xffffac6a
    ecfc:	0002593d 	.word	0x0002593d
    ed00:	ffff8000 	.word	0xffff8000

0000ed04 <setup_batt>:
void setup_batt(void){
    ed04:	b530      	push	{r4, r5, lr}
    ed06:	b083      	sub	sp, #12
	max17055_reg_read_write(readp, 0x00, &data1);
    ed08:	466b      	mov	r3, sp
    ed0a:	1d9c      	adds	r4, r3, #6
    ed0c:	0022      	movs	r2, r4
    ed0e:	2100      	movs	r1, #0
    ed10:	2000      	movs	r0, #0
    ed12:	4d0b      	ldr	r5, [pc, #44]	; (ed40 <setup_batt+0x3c>)
    ed14:	47a8      	blx	r5
	data1=data1 & 0x0002;//bit two is POR
    ed16:	2302      	movs	r3, #2
    ed18:	8822      	ldrh	r2, [r4, #0]
    ed1a:	4013      	ands	r3, r2
    ed1c:	8023      	strh	r3, [r4, #0]
	if (data1){
    ed1e:	d001      	beq.n	ed24 <setup_batt+0x20>
		config_batt();
    ed20:	4b08      	ldr	r3, [pc, #32]	; (ed44 <setup_batt+0x40>)
    ed22:	4798      	blx	r3
	max17055_reg_read_write(readp, 0x00, &data1);
    ed24:	0022      	movs	r2, r4
    ed26:	2100      	movs	r1, #0
    ed28:	2000      	movs	r0, #0
    ed2a:	47a8      	blx	r5
	data1=data1 & 0xFFFD;//clear POR bit
    ed2c:	2202      	movs	r2, #2
    ed2e:	8823      	ldrh	r3, [r4, #0]
	max17055_reg_read_write(writep ,0x00, &data1);
    ed30:	2100      	movs	r1, #0
	data1=data1 & 0xFFFD;//clear POR bit
    ed32:	4393      	bics	r3, r2
	max17055_reg_read_write(writep ,0x00, &data1);
    ed34:	2001      	movs	r0, #1
    ed36:	0022      	movs	r2, r4
	data1=data1 & 0xFFFD;//clear POR bit
    ed38:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep ,0x00, &data1);
    ed3a:	47a8      	blx	r5
}
    ed3c:	b003      	add	sp, #12
    ed3e:	bd30      	pop	{r4, r5, pc}
    ed40:	0001c489 	.word	0x0001c489
    ed44:	0000ebf9 	.word	0x0000ebf9

0000ed48 <getBatteryLevel>:
uint16_t getBatteryLevel(void){
    ed48:	b510      	push	{r4, lr}
    ed4a:	b082      	sub	sp, #8
	max17055_reg_read_write(readp, 0x06, &batt_SOC);
    ed4c:	466b      	mov	r3, sp
    ed4e:	1d9c      	adds	r4, r3, #6
    ed50:	0022      	movs	r2, r4
    ed52:	2106      	movs	r1, #6
    ed54:	2000      	movs	r0, #0
    ed56:	4b0a      	ldr	r3, [pc, #40]	; (ed80 <getBatteryLevel+0x38>)
    ed58:	4798      	blx	r3
	batt_SOC=batt_SOC>>8;
    ed5a:	8820      	ldrh	r0, [r4, #0]
	batt_SOC = batt_SOC*1.03;  
    ed5c:	4b09      	ldr	r3, [pc, #36]	; (ed84 <getBatteryLevel+0x3c>)
    ed5e:	0a00      	lsrs	r0, r0, #8
    ed60:	4798      	blx	r3
    ed62:	4a09      	ldr	r2, [pc, #36]	; (ed88 <getBatteryLevel+0x40>)
    ed64:	4b09      	ldr	r3, [pc, #36]	; (ed8c <getBatteryLevel+0x44>)
    ed66:	4c0a      	ldr	r4, [pc, #40]	; (ed90 <getBatteryLevel+0x48>)
    ed68:	47a0      	blx	r4
    ed6a:	4b0a      	ldr	r3, [pc, #40]	; (ed94 <getBatteryLevel+0x4c>)
    ed6c:	4798      	blx	r3
    ed6e:	b282      	uxth	r2, r0
    ed70:	2364      	movs	r3, #100	; 0x64
    ed72:	2a63      	cmp	r2, #99	; 0x63
    ed74:	d800      	bhi.n	ed78 <getBatteryLevel+0x30>
    ed76:	1c03      	adds	r3, r0, #0
    ed78:	b298      	uxth	r0, r3
		batt_SOC = 100;
	}
	
	return batt_SOC;
}
    ed7a:	b002      	add	sp, #8
    ed7c:	bd10      	pop	{r4, pc}
    ed7e:	46c0      	nop			; (mov r8, r8)
    ed80:	0001c489 	.word	0x0001c489
    ed84:	00028699 	.word	0x00028699
    ed88:	47ae147b 	.word	0x47ae147b
    ed8c:	3ff07ae1 	.word	0x3ff07ae1
    ed90:	00027ac5 	.word	0x00027ac5
    ed94:	00025e19 	.word	0x00025e19

0000ed98 <setupCharger>:


void setupCharger(void){
    ed98:	b530      	push	{r4, r5, lr}
    ed9a:	b083      	sub	sp, #12
	uint8_t temp;
	
	//  Set Termination Voltage
	temp = 0x8C;
    ed9c:	466b      	mov	r3, sp
    ed9e:	1d9c      	adds	r4, r3, #6
    eda0:	238c      	movs	r3, #140	; 0x8c
	adp5062_reg_read_write(writep, 0x03, &temp);
    eda2:	4d11      	ldr	r5, [pc, #68]	; (ede8 <setupCharger+0x50>)
    eda4:	0022      	movs	r2, r4
    eda6:	2103      	movs	r1, #3
    eda8:	2001      	movs	r0, #1
	temp = 0x8C;
    edaa:	7023      	strb	r3, [r4, #0]
	adp5062_reg_read_write(writep, 0x03, &temp);
    edac:	47a8      	blx	r5
	
	//  Set Charge Limit
	temp = 0x3A;
    edae:	233a      	movs	r3, #58	; 0x3a
	adp5062_reg_read_write(writep, 0x04, &temp);
    edb0:	0022      	movs	r2, r4
    edb2:	2104      	movs	r1, #4
    edb4:	2001      	movs	r0, #1
	temp = 0x3A;
    edb6:	7023      	strb	r3, [r4, #0]
	adp5062_reg_read_write(writep, 0x04, &temp);
    edb8:	47a8      	blx	r5
	
	//  Set Timer limits
	temp = 0x28;
    edba:	2328      	movs	r3, #40	; 0x28
	adp5062_reg_read_write(writep, 0x06, &temp);
    edbc:	0022      	movs	r2, r4
    edbe:	2106      	movs	r1, #6
    edc0:	2001      	movs	r0, #1
	temp = 0x28;
    edc2:	7023      	strb	r3, [r4, #0]
	adp5062_reg_read_write(writep, 0x06, &temp);
    edc4:	47a8      	blx	r5
}

void setChargeCurrent(uint32_t chargeCurrent){
	// ILIM is lower 3 bits of addr 0x02
	uint8_t data;
	if (chargeCurrent==500){
    edc6:	23fa      	movs	r3, #250	; 0xfa
    edc8:	4a08      	ldr	r2, [pc, #32]	; (edec <setupCharger+0x54>)
    edca:	005b      	lsls	r3, r3, #1
    edcc:	68d2      	ldr	r2, [r2, #12]
    edce:	429a      	cmp	r2, r3
    edd0:	d008      	beq.n	ede4 <setupCharger+0x4c>
		data = 0x06;
	}else{
		data = 0x00;
    edd2:	2300      	movs	r3, #0
    edd4:	466a      	mov	r2, sp
	}
	adp5062_reg_read_write(writep, 0x02, &data);
    edd6:	2102      	movs	r1, #2
    edd8:	3207      	adds	r2, #7
    edda:	2001      	movs	r0, #1
    eddc:	7013      	strb	r3, [r2, #0]
    edde:	47a8      	blx	r5
}
    ede0:	b003      	add	sp, #12
    ede2:	bd30      	pop	{r4, r5, pc}
		data = 0x06;
    ede4:	2306      	movs	r3, #6
    ede6:	e7f5      	b.n	edd4 <setupCharger+0x3c>
    ede8:	0001c561 	.word	0x0001c561
    edec:	20002d20 	.word	0x20002d20

0000edf0 <setChargeCurrent>:
	if (chargeCurrent==500){
    edf0:	23fa      	movs	r3, #250	; 0xfa
void setChargeCurrent(uint32_t chargeCurrent){
    edf2:	b500      	push	{lr}
	if (chargeCurrent==500){
    edf4:	005b      	lsls	r3, r3, #1
void setChargeCurrent(uint32_t chargeCurrent){
    edf6:	b083      	sub	sp, #12
	if (chargeCurrent==500){
    edf8:	4298      	cmp	r0, r3
    edfa:	d009      	beq.n	ee10 <setChargeCurrent+0x20>
		data = 0x00;
    edfc:	2300      	movs	r3, #0
    edfe:	466a      	mov	r2, sp
    ee00:	3207      	adds	r2, #7
    ee02:	7013      	strb	r3, [r2, #0]
	adp5062_reg_read_write(writep, 0x02, &data);
    ee04:	2102      	movs	r1, #2
    ee06:	2001      	movs	r0, #1
    ee08:	4b02      	ldr	r3, [pc, #8]	; (ee14 <setChargeCurrent+0x24>)
    ee0a:	4798      	blx	r3
	
	
	
}
    ee0c:	b003      	add	sp, #12
    ee0e:	bd00      	pop	{pc}
		data = 0x06;
    ee10:	2306      	movs	r3, #6
    ee12:	e7f4      	b.n	edfe <setChargeCurrent+0xe>
    ee14:	0001c561 	.word	0x0001c561

0000ee18 <getChargerStatus>:

uint8_t getChargerStatus(void){
    ee18:	b510      	push	{r4, lr}
    ee1a:	b082      	sub	sp, #8

uint8_t getChargerRegister(uint8_t address){
	//  Read data from address on Charger
	uint8_t registerData;
	
	adp5062_reg_read_write(readp, address, &registerData); 
    ee1c:	466b      	mov	r3, sp
    ee1e:	1ddc      	adds	r4, r3, #7
    ee20:	0022      	movs	r2, r4
    ee22:	210b      	movs	r1, #11
    ee24:	2000      	movs	r0, #0
    ee26:	4b03      	ldr	r3, [pc, #12]	; (ee34 <getChargerStatus+0x1c>)
    ee28:	4798      	blx	r3
	return status;
    ee2a:	2007      	movs	r0, #7
	
	return registerData;
    ee2c:	7823      	ldrb	r3, [r4, #0]
	return status;
    ee2e:	4018      	ands	r0, r3
}
    ee30:	b002      	add	sp, #8
    ee32:	bd10      	pop	{r4, pc}
    ee34:	0001c561 	.word	0x0001c561

0000ee38 <getChargerRegister>:
uint8_t getChargerRegister(uint8_t address){
    ee38:	b510      	push	{r4, lr}
    ee3a:	b082      	sub	sp, #8
	adp5062_reg_read_write(readp, address, &registerData); 
    ee3c:	466b      	mov	r3, sp
    ee3e:	1ddc      	adds	r4, r3, #7
uint8_t getChargerRegister(uint8_t address){
    ee40:	0001      	movs	r1, r0
	adp5062_reg_read_write(readp, address, &registerData); 
    ee42:	0022      	movs	r2, r4
    ee44:	2000      	movs	r0, #0
    ee46:	4b02      	ldr	r3, [pc, #8]	; (ee50 <getChargerRegister+0x18>)
    ee48:	4798      	blx	r3
	return registerData;
    ee4a:	7820      	ldrb	r0, [r4, #0]
}
    ee4c:	b002      	add	sp, #8
    ee4e:	bd10      	pop	{r4, pc}
    ee50:	0001c561 	.word	0x0001c561

0000ee54 <bin2str>:
void  bin2str(uint8_t data, char *strPtr){
	uint8_t i;
	uint8_t shifter = 128;
	
	for (i=0;i<8;i++){
		if (data&shifter){
    ee54:	b243      	sxtb	r3, r0
    ee56:	2b00      	cmp	r3, #0
    ee58:	db20      	blt.n	ee9c <bin2str+0x48>
			strPtr[i] = '1';
		}else{
			strPtr[i] = '0';
    ee5a:	2330      	movs	r3, #48	; 0x30
    ee5c:	700b      	strb	r3, [r1, #0]
		if (data&shifter){
    ee5e:	0643      	lsls	r3, r0, #25
    ee60:	d420      	bmi.n	eea4 <bin2str+0x50>
			strPtr[i] = '0';
    ee62:	2330      	movs	r3, #48	; 0x30
    ee64:	704b      	strb	r3, [r1, #1]
		if (data&shifter){
    ee66:	0683      	lsls	r3, r0, #26
    ee68:	d420      	bmi.n	eeac <bin2str+0x58>
			strPtr[i] = '0';
    ee6a:	2330      	movs	r3, #48	; 0x30
    ee6c:	708b      	strb	r3, [r1, #2]
		if (data&shifter){
    ee6e:	06c3      	lsls	r3, r0, #27
    ee70:	d420      	bmi.n	eeb4 <bin2str+0x60>
			strPtr[i] = '0';
    ee72:	2330      	movs	r3, #48	; 0x30
    ee74:	70cb      	strb	r3, [r1, #3]
		if (data&shifter){
    ee76:	0703      	lsls	r3, r0, #28
    ee78:	d420      	bmi.n	eebc <bin2str+0x68>
			strPtr[i] = '0';
    ee7a:	2330      	movs	r3, #48	; 0x30
    ee7c:	710b      	strb	r3, [r1, #4]
		if (data&shifter){
    ee7e:	0743      	lsls	r3, r0, #29
    ee80:	d420      	bmi.n	eec4 <bin2str+0x70>
			strPtr[i] = '0';
    ee82:	2330      	movs	r3, #48	; 0x30
    ee84:	714b      	strb	r3, [r1, #5]
		if (data&shifter){
    ee86:	0783      	lsls	r3, r0, #30
    ee88:	d420      	bmi.n	eecc <bin2str+0x78>
			strPtr[i] = '0';
    ee8a:	2330      	movs	r3, #48	; 0x30
    ee8c:	718b      	strb	r3, [r1, #6]
		if (data&shifter){
    ee8e:	07c3      	lsls	r3, r0, #31
    ee90:	d520      	bpl.n	eed4 <bin2str+0x80>
			strPtr[i] = '1';
    ee92:	2331      	movs	r3, #49	; 0x31
    ee94:	71cb      	strb	r3, [r1, #7]
		}
		shifter = shifter>>1;
	}
	strPtr[8] = '\0';
    ee96:	2300      	movs	r3, #0
    ee98:	720b      	strb	r3, [r1, #8]
	
}
    ee9a:	4770      	bx	lr
			strPtr[i] = '1';
    ee9c:	2331      	movs	r3, #49	; 0x31
    ee9e:	700b      	strb	r3, [r1, #0]
		if (data&shifter){
    eea0:	0643      	lsls	r3, r0, #25
    eea2:	d5de      	bpl.n	ee62 <bin2str+0xe>
			strPtr[i] = '1';
    eea4:	2331      	movs	r3, #49	; 0x31
    eea6:	704b      	strb	r3, [r1, #1]
		if (data&shifter){
    eea8:	0683      	lsls	r3, r0, #26
    eeaa:	d5de      	bpl.n	ee6a <bin2str+0x16>
			strPtr[i] = '1';
    eeac:	2331      	movs	r3, #49	; 0x31
    eeae:	708b      	strb	r3, [r1, #2]
		if (data&shifter){
    eeb0:	06c3      	lsls	r3, r0, #27
    eeb2:	d5de      	bpl.n	ee72 <bin2str+0x1e>
			strPtr[i] = '1';
    eeb4:	2331      	movs	r3, #49	; 0x31
    eeb6:	70cb      	strb	r3, [r1, #3]
		if (data&shifter){
    eeb8:	0703      	lsls	r3, r0, #28
    eeba:	d5de      	bpl.n	ee7a <bin2str+0x26>
			strPtr[i] = '1';
    eebc:	2331      	movs	r3, #49	; 0x31
    eebe:	710b      	strb	r3, [r1, #4]
		if (data&shifter){
    eec0:	0743      	lsls	r3, r0, #29
    eec2:	d5de      	bpl.n	ee82 <bin2str+0x2e>
			strPtr[i] = '1';
    eec4:	2331      	movs	r3, #49	; 0x31
    eec6:	714b      	strb	r3, [r1, #5]
		if (data&shifter){
    eec8:	0783      	lsls	r3, r0, #30
    eeca:	d5de      	bpl.n	ee8a <bin2str+0x36>
			strPtr[i] = '1';
    eecc:	2331      	movs	r3, #49	; 0x31
    eece:	718b      	strb	r3, [r1, #6]
		if (data&shifter){
    eed0:	07c3      	lsls	r3, r0, #31
    eed2:	d4de      	bmi.n	ee92 <bin2str+0x3e>
			strPtr[i] = '0';
    eed4:	2330      	movs	r3, #48	; 0x30
    eed6:	71cb      	strb	r3, [r1, #7]
    eed8:	e7dd      	b.n	ee96 <bin2str+0x42>
    eeda:	46c0      	nop			; (mov r8, r8)

0000eedc <BLE_handleMessage>:


volatile bool isBleConnectedBool = false;


void BLE_handleMessage(void){
    eedc:	b530      	push	{r4, r5, lr}
    eede:	b083      	sub	sp, #12
	//}

	
	//  Read back any messages
	//  Also clears buffer
	commStatus = BLE_read_message(&rcvCmd, write_str1, &rcvLength, sizeof(write_str1));
    eee0:	23c8      	movs	r3, #200	; 0xc8
    eee2:	466a      	mov	r2, sp
    eee4:	4668      	mov	r0, sp
    eee6:	4c18      	ldr	r4, [pc, #96]	; (ef48 <BLE_handleMessage+0x6c>)
    eee8:	005b      	lsls	r3, r3, #1
    eeea:	3207      	adds	r2, #7
    eeec:	0021      	movs	r1, r4
    eeee:	3006      	adds	r0, #6
    eef0:	4d16      	ldr	r5, [pc, #88]	; (ef4c <BLE_handleMessage+0x70>)
    eef2:	47a8      	blx	r5
	if (commStatus!= STATUS_OK){
    eef4:	2800      	cmp	r0, #0
    eef6:	d001      	beq.n	eefc <BLE_handleMessage+0x20>
		
		
	//current_input = tempInput;
	
	
}
    eef8:	b003      	add	sp, #12
    eefa:	bd30      	pop	{r4, r5, pc}
	idle_timeout();
    eefc:	4b14      	ldr	r3, [pc, #80]	; (ef50 <BLE_handleMessage+0x74>)
    eefe:	4798      	blx	r3
	switch (rcvCmd){
    ef00:	466b      	mov	r3, sp
    ef02:	799b      	ldrb	r3, [r3, #6]
    ef04:	3b28      	subs	r3, #40	; 0x28
    ef06:	b2db      	uxtb	r3, r3
    ef08:	2b2d      	cmp	r3, #45	; 0x2d
    ef0a:	d8f5      	bhi.n	eef8 <BLE_handleMessage+0x1c>
    ef0c:	4a11      	ldr	r2, [pc, #68]	; (ef54 <BLE_handleMessage+0x78>)
    ef0e:	009b      	lsls	r3, r3, #2
    ef10:	58d3      	ldr	r3, [r2, r3]
    ef12:	469f      	mov	pc, r3
			strncpy(BleCommandQueue,write_str1, sizeof(BleCommandQueue));
    ef14:	2214      	movs	r2, #20
    ef16:	4b10      	ldr	r3, [pc, #64]	; (ef58 <BLE_handleMessage+0x7c>)
    ef18:	0021      	movs	r1, r4
    ef1a:	4810      	ldr	r0, [pc, #64]	; (ef5c <BLE_handleMessage+0x80>)
    ef1c:	4798      	blx	r3
			current_input = input_BLE_command;			
    ef1e:	2209      	movs	r2, #9
    ef20:	4b0f      	ldr	r3, [pc, #60]	; (ef60 <BLE_handleMessage+0x84>)
    ef22:	601a      	str	r2, [r3, #0]
			break;
    ef24:	e7e8      	b.n	eef8 <BLE_handleMessage+0x1c>
			BLE_update_tracker(write_str1);
    ef26:	0020      	movs	r0, r4
    ef28:	4b0e      	ldr	r3, [pc, #56]	; (ef64 <BLE_handleMessage+0x88>)
    ef2a:	4798      	blx	r3
			break;
    ef2c:	e7e4      	b.n	eef8 <BLE_handleMessage+0x1c>
			isBleConnectedBool = false;
    ef2e:	2200      	movs	r2, #0
    ef30:	4b0d      	ldr	r3, [pc, #52]	; (ef68 <BLE_handleMessage+0x8c>)
    ef32:	701a      	strb	r2, [r3, #0]
			break;
    ef34:	e7e0      	b.n	eef8 <BLE_handleMessage+0x1c>
			isBleConnectedBool = true;
    ef36:	2201      	movs	r2, #1
    ef38:	4b0b      	ldr	r3, [pc, #44]	; (ef68 <BLE_handleMessage+0x8c>)
    ef3a:	701a      	strb	r2, [r3, #0]
			break;
    ef3c:	e7dc      	b.n	eef8 <BLE_handleMessage+0x1c>
			BLE_adjLastDate_tracker(write_str1);
    ef3e:	0020      	movs	r0, r4
    ef40:	4b0a      	ldr	r3, [pc, #40]	; (ef6c <BLE_handleMessage+0x90>)
    ef42:	4798      	blx	r3
			break;
    ef44:	e7d8      	b.n	eef8 <BLE_handleMessage+0x1c>
    ef46:	46c0      	nop			; (mov r8, r8)
    ef48:	20002b78 	.word	0x20002b78
    ef4c:	0001bf61 	.word	0x0001bf61
    ef50:	00016a3d 	.word	0x00016a3d
    ef54:	0002d9b0 	.word	0x0002d9b0
    ef58:	00028d15 	.word	0x00028d15
    ef5c:	20002e68 	.word	0x20002e68
    ef60:	20003d24 	.word	0x20003d24
    ef64:	00015d59 	.word	0x00015d59
    ef68:	20000caa 	.word	0x20000caa
    ef6c:	00015d79 	.word	0x00015d79

0000ef70 <BLE_remoteCommand>:



void  BLE_remoteCommand(char *commandStr){
    ef70:	b570      	push	{r4, r5, r6, lr}
	
	if (current_state==st_powerdown){
    ef72:	4c21      	ldr	r4, [pc, #132]	; (eff8 <BLE_remoteCommand+0x88>)
void  BLE_remoteCommand(char *commandStr){
    ef74:	b0aa      	sub	sp, #168	; 0xa8
	if (current_state==st_powerdown){
    ef76:	6823      	ldr	r3, [r4, #0]
void  BLE_remoteCommand(char *commandStr){
    ef78:	0005      	movs	r5, r0
	if (current_state==st_powerdown){
    ef7a:	2b04      	cmp	r3, #4
    ef7c:	d009      	beq.n	ef92 <BLE_remoteCommand+0x22>
		return;
	}
	
	
	if (current_state == st_scan){
    ef7e:	6823      	ldr	r3, [r4, #0]
    ef80:	2b01      	cmp	r3, #1
    ef82:	d018      	beq.n	efb6 <BLE_remoteCommand+0x46>
		//  If in scan mode, any command exits
		//  Turn on laser for measuring
		rangefinder_on_off(false);
		current_state = st_main_display;
	}else if(strstr(commandStr,"scan")){
    ef84:	491d      	ldr	r1, [pc, #116]	; (effc <BLE_remoteCommand+0x8c>)
    ef86:	4e1e      	ldr	r6, [pc, #120]	; (f000 <BLE_remoteCommand+0x90>)
    ef88:	47b0      	blx	r6
    ef8a:	2800      	cmp	r0, #0
    ef8c:	d003      	beq.n	ef96 <BLE_remoteCommand+0x26>
		current_state = st_scan;
    ef8e:	2301      	movs	r3, #1
    ef90:	6023      	str	r3, [r4, #0]
		
		
	}

	
};
    ef92:	b02a      	add	sp, #168	; 0xa8
    ef94:	bd70      	pop	{r4, r5, r6, pc}
	}else if (strstr(commandStr,"laser")){
    ef96:	491b      	ldr	r1, [pc, #108]	; (f004 <BLE_remoteCommand+0x94>)
    ef98:	0028      	movs	r0, r5
    ef9a:	47b0      	blx	r6
    ef9c:	2800      	cmp	r0, #0
    ef9e:	d022      	beq.n	efe6 <BLE_remoteCommand+0x76>
		if(isLaserOn()){
    efa0:	4b19      	ldr	r3, [pc, #100]	; (f008 <BLE_remoteCommand+0x98>)
    efa2:	4798      	blx	r3
    efa4:	2800      	cmp	r0, #0
    efa6:	d11a      	bne.n	efde <BLE_remoteCommand+0x6e>
			rangefinder_on_off(true);
    efa8:	2001      	movs	r0, #1
    efaa:	4b18      	ldr	r3, [pc, #96]	; (f00c <BLE_remoteCommand+0x9c>)
    efac:	4798      	blx	r3
			laser_on_off(true);
    efae:	2001      	movs	r0, #1
    efb0:	4b17      	ldr	r3, [pc, #92]	; (f010 <BLE_remoteCommand+0xa0>)
    efb2:	4798      	blx	r3
    efb4:	e7ed      	b.n	ef92 <BLE_remoteCommand+0x22>
		rangefinder_on_off(false);
    efb6:	4b15      	ldr	r3, [pc, #84]	; (f00c <BLE_remoteCommand+0x9c>)
    efb8:	2000      	movs	r0, #0
    efba:	4798      	blx	r3
		current_state = st_main_display;
    efbc:	2302      	movs	r3, #2
    efbe:	6023      	str	r3, [r4, #0]
    efc0:	e7e7      	b.n	ef92 <BLE_remoteCommand+0x22>
	}else if(strstr(commandStr,"shot")){
    efc2:	4914      	ldr	r1, [pc, #80]	; (f014 <BLE_remoteCommand+0xa4>)
    efc4:	0028      	movs	r0, r5
    efc6:	47b0      	blx	r6
    efc8:	2800      	cmp	r0, #0
    efca:	d0e2      	beq.n	ef92 <BLE_remoteCommand+0x22>
		if(isLaserOn()){
    efcc:	4b0e      	ldr	r3, [pc, #56]	; (f008 <BLE_remoteCommand+0x98>)
    efce:	4798      	blx	r3
    efd0:	2800      	cmp	r0, #0
    efd2:	d0e9      	beq.n	efa8 <BLE_remoteCommand+0x38>
			full_measurement(&measTemp, 0, measRegular);
    efd4:	2200      	movs	r2, #0
    efd6:	2100      	movs	r1, #0
    efd8:	4668      	mov	r0, sp
    efda:	4b0f      	ldr	r3, [pc, #60]	; (f018 <BLE_remoteCommand+0xa8>)
    efdc:	4798      	blx	r3
			rangefinder_on_off(false);
    efde:	2000      	movs	r0, #0
    efe0:	4b0a      	ldr	r3, [pc, #40]	; (f00c <BLE_remoteCommand+0x9c>)
    efe2:	4798      	blx	r3
    efe4:	e7d5      	b.n	ef92 <BLE_remoteCommand+0x22>
	}else if (strstr(commandStr,"power off")){
    efe6:	490d      	ldr	r1, [pc, #52]	; (f01c <BLE_remoteCommand+0xac>)
    efe8:	0028      	movs	r0, r5
    efea:	47b0      	blx	r6
    efec:	2800      	cmp	r0, #0
    efee:	d0e8      	beq.n	efc2 <BLE_remoteCommand+0x52>
		current_input = input_pwrDown;
    eff0:	2205      	movs	r2, #5
    eff2:	4b0b      	ldr	r3, [pc, #44]	; (f020 <BLE_remoteCommand+0xb0>)
    eff4:	601a      	str	r2, [r3, #0]
    eff6:	e7cc      	b.n	ef92 <BLE_remoteCommand+0x22>
    eff8:	20002630 	.word	0x20002630
    effc:	0002dae4 	.word	0x0002dae4
    f000:	00029051 	.word	0x00029051
    f004:	0002daec 	.word	0x0002daec
    f008:	00015ed5 	.word	0x00015ed5
    f00c:	000160dd 	.word	0x000160dd
    f010:	00016109 	.word	0x00016109
    f014:	0002db00 	.word	0x0002db00
    f018:	00016539 	.word	0x00016539
    f01c:	0002daf4 	.word	0x0002daf4
    f020:	20003d24 	.word	0x20003d24

0000f024 <BLE_get_device_MAC>:
	
	
	
}

void BLE_get_device_MAC(void){
    f024:	b530      	push	{r4, r5, lr}
	char rcvCmd;
	uint8_t rcvLength;
	char temp;
	enum status_code commStatus;
	
	if (current_state==st_powerdown){
    f026:	4b10      	ldr	r3, [pc, #64]	; (f068 <BLE_get_device_MAC+0x44>)
void BLE_get_device_MAC(void){
    f028:	b087      	sub	sp, #28
	if (current_state==st_powerdown){
    f02a:	681b      	ldr	r3, [r3, #0]
    f02c:	2b04      	cmp	r3, #4
    f02e:	d018      	beq.n	f062 <BLE_get_device_MAC+0x3e>
		return;
	}
	
	commStatus = BLE_send_parse_CMD(cmdGetMacAdd, &temp, 0,
    f030:	23c8      	movs	r3, #200	; 0xc8
    f032:	005b      	lsls	r3, r3, #1
    f034:	9302      	str	r3, [sp, #8]
    f036:	3b7b      	subs	r3, #123	; 0x7b
    f038:	3bff      	subs	r3, #255	; 0xff
    f03a:	446b      	add	r3, sp
    f03c:	9301      	str	r3, [sp, #4]
    f03e:	2117      	movs	r1, #23
    f040:	2315      	movs	r3, #21
    f042:	4c0a      	ldr	r4, [pc, #40]	; (f06c <BLE_get_device_MAC+0x48>)
    f044:	446b      	add	r3, sp
    f046:	2200      	movs	r2, #0
    f048:	4469      	add	r1, sp
    f04a:	4d09      	ldr	r5, [pc, #36]	; (f070 <BLE_get_device_MAC+0x4c>)
    f04c:	9400      	str	r4, [sp, #0]
    f04e:	2052      	movs	r0, #82	; 0x52
    f050:	47a8      	blx	r5
    f052:	4d08      	ldr	r5, [pc, #32]	; (f074 <BLE_get_device_MAC+0x50>)
    f054:	4b08      	ldr	r3, [pc, #32]	; (f078 <BLE_get_device_MAC+0x54>)
    f056:	1ca1      	adds	r1, r4, #2
    f058:	2210      	movs	r2, #16
    f05a:	0028      	movs	r0, r5
    f05c:	4798      	blx	r3
	macAdd[16] = 0;//  Terminate with Null character
    f05e:	2300      	movs	r3, #0
    f060:	742b      	strb	r3, [r5, #16]
		&rcvCmd, write_str1 , &rcvLength, sizeof(write_str1));
	
	//  Format returned string into MAC address
	BLE_MAC_format(BleDeviceMAC, write_str1);

}
    f062:	b007      	add	sp, #28
    f064:	bd30      	pop	{r4, r5, pc}
    f066:	46c0      	nop			; (mov r8, r8)
    f068:	20002630 	.word	0x20002630
    f06c:	20002b78 	.word	0x20002b78
    f070:	0001bde1 	.word	0x0001bde1
    f074:	20004374 	.word	0x20004374
    f078:	00028999 	.word	0x00028999

0000f07c <BLE_get_client_MAC>:

void BLE_get_client_MAC(){
    f07c:	b570      	push	{r4, r5, r6, lr}
	char rcvCmd, temp;
	uint8_t rcvLength;

	enum status_code commStatus;
	
	if (current_state==st_powerdown){
    f07e:	4b17      	ldr	r3, [pc, #92]	; (f0dc <BLE_get_client_MAC+0x60>)
void BLE_get_client_MAC(){
    f080:	b086      	sub	sp, #24
	if (current_state==st_powerdown){
    f082:	681b      	ldr	r3, [r3, #0]
    f084:	2b04      	cmp	r3, #4
    f086:	d01e      	beq.n	f0c6 <BLE_get_client_MAC+0x4a>
		return;
	}
	
	
	commStatus = BLE_send_parse_CMD(cmdGetConnectedDev, &temp, 0,
    f088:	23c8      	movs	r3, #200	; 0xc8
    f08a:	2517      	movs	r5, #23
    f08c:	2116      	movs	r1, #22
    f08e:	005b      	lsls	r3, r3, #1
    f090:	9302      	str	r3, [sp, #8]
    f092:	4c13      	ldr	r4, [pc, #76]	; (f0e0 <BLE_get_client_MAC+0x64>)
    f094:	3b7c      	subs	r3, #124	; 0x7c
    f096:	446d      	add	r5, sp
    f098:	3bff      	subs	r3, #255	; 0xff
    f09a:	9501      	str	r5, [sp, #4]
    f09c:	9400      	str	r4, [sp, #0]
    f09e:	446b      	add	r3, sp
    f0a0:	2200      	movs	r2, #0
    f0a2:	4469      	add	r1, sp
    f0a4:	2053      	movs	r0, #83	; 0x53
    f0a6:	4e0f      	ldr	r6, [pc, #60]	; (f0e4 <BLE_get_client_MAC+0x68>)
    f0a8:	47b0      	blx	r6
		&rcvCmd, write_str1, &rcvLength, sizeof(write_str1));
	if(rcvLength==0){
    f0aa:	782d      	ldrb	r5, [r5, #0]
    f0ac:	2d00      	cmp	r5, #0
    f0ae:	d00c      	beq.n	f0ca <BLE_get_client_MAC+0x4e>
    f0b0:	4d0d      	ldr	r5, [pc, #52]	; (f0e8 <BLE_get_client_MAC+0x6c>)
    f0b2:	2210      	movs	r2, #16
    f0b4:	4b0d      	ldr	r3, [pc, #52]	; (f0ec <BLE_get_client_MAC+0x70>)
    f0b6:	1ca1      	adds	r1, r4, #2
    f0b8:	0028      	movs	r0, r5
    f0ba:	4798      	blx	r3
	macAdd[16] = 0;//  Terminate with Null character
    f0bc:	2300      	movs	r3, #0
		strcpy(BleClientMAC,"Not Connected");
		isBleConnectedBool = false;
	}else{
		//  Format returned string into MAC address
		BLE_MAC_format(BleClientMAC, write_str1);
		isBleConnectedBool = true;
    f0be:	2201      	movs	r2, #1
	macAdd[16] = 0;//  Terminate with Null character
    f0c0:	742b      	strb	r3, [r5, #16]
		isBleConnectedBool = true;
    f0c2:	4b0b      	ldr	r3, [pc, #44]	; (f0f0 <BLE_get_client_MAC+0x74>)
    f0c4:	701a      	strb	r2, [r3, #0]
	}
	
}
    f0c6:	b006      	add	sp, #24
    f0c8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(BleClientMAC,"Not Connected");
    f0ca:	4b08      	ldr	r3, [pc, #32]	; (f0ec <BLE_get_client_MAC+0x70>)
    f0cc:	220e      	movs	r2, #14
    f0ce:	4909      	ldr	r1, [pc, #36]	; (f0f4 <BLE_get_client_MAC+0x78>)
    f0d0:	4805      	ldr	r0, [pc, #20]	; (f0e8 <BLE_get_client_MAC+0x6c>)
    f0d2:	4798      	blx	r3
		isBleConnectedBool = false;
    f0d4:	4b06      	ldr	r3, [pc, #24]	; (f0f0 <BLE_get_client_MAC+0x74>)
    f0d6:	701d      	strb	r5, [r3, #0]
    f0d8:	e7f5      	b.n	f0c6 <BLE_get_client_MAC+0x4a>
    f0da:	46c0      	nop			; (mov r8, r8)
    f0dc:	20002630 	.word	0x20002630
    f0e0:	20002b78 	.word	0x20002b78
    f0e4:	0001bde1 	.word	0x0001bde1
    f0e8:	20002ae4 	.word	0x20002ae4
    f0ec:	00028999 	.word	0x00028999
    f0f0:	20000caa 	.word	0x20000caa
    f0f4:	0002dac0 	.word	0x0002dac0

0000f0f8 <isBleConnected>:
bool isBleConnected(void){
	return isBleConnectedBool;
    f0f8:	4b01      	ldr	r3, [pc, #4]	; (f100 <isBleConnected+0x8>)
    f0fa:	7818      	ldrb	r0, [r3, #0]
    f0fc:	b2c0      	uxtb	r0, r0
}
    f0fe:	4770      	bx	lr
    f100:	20000caa 	.word	0x20000caa

0000f104 <BLE_get_device_name>:

void BLE_get_device_name(void){
    f104:	b570      	push	{r4, r5, r6, lr}
	char rcvCmd;
	uint8_t rcvLength;
	enum status_code commStatus;
	
	commStatus = BLE_send_parse_CMD(cmdGetDeviceName, write_str1, 0,
    f106:	2314      	movs	r3, #20
    f108:	2517      	movs	r5, #23
void BLE_get_device_name(void){
    f10a:	b086      	sub	sp, #24
	commStatus = BLE_send_parse_CMD(cmdGetDeviceName, write_str1, 0,
    f10c:	4c08      	ldr	r4, [pc, #32]	; (f130 <BLE_get_device_name+0x2c>)
    f10e:	9302      	str	r3, [sp, #8]
    f110:	446d      	add	r5, sp
    f112:	3302      	adds	r3, #2
    f114:	446b      	add	r3, sp
    f116:	9501      	str	r5, [sp, #4]
    f118:	9400      	str	r4, [sp, #0]
    f11a:	2200      	movs	r2, #0
    f11c:	4905      	ldr	r1, [pc, #20]	; (f134 <BLE_get_device_name+0x30>)
    f11e:	4e06      	ldr	r6, [pc, #24]	; (f138 <BLE_get_device_name+0x34>)
    f120:	201b      	movs	r0, #27
    f122:	47b0      	blx	r6
		&rcvCmd, BleDeviceName, &rcvLength, sizeof(BleDeviceName) );
		
	BleDeviceName[rcvLength] = 00;// Terminate with null character
    f124:	2200      	movs	r2, #0
    f126:	782b      	ldrb	r3, [r5, #0]
    f128:	54e2      	strb	r2, [r4, r3]
}
    f12a:	b006      	add	sp, #24
    f12c:	bd70      	pop	{r4, r5, r6, pc}
    f12e:	46c0      	nop			; (mov r8, r8)
    f130:	20005344 	.word	0x20005344
    f134:	20002b78 	.word	0x20002b78
    f138:	0001bde1 	.word	0x0001bde1

0000f13c <BLE_advert_OnOff>:
	uint8_t rcvLength;

	if (onOff){
		write_str1[0] = '1';
	}else{
		write_str1[0] = '0';
    f13c:	1e43      	subs	r3, r0, #1
    f13e:	4198      	sbcs	r0, r3

	}
	
	commStatus = BLE_send_parse_CMD(cmdSetAdvert, write_str1, 1,
    f140:	23c8      	movs	r3, #200	; 0xc8
void BLE_advert_OnOff(bool onOff){
    f142:	b510      	push	{r4, lr}
    f144:	4909      	ldr	r1, [pc, #36]	; (f16c <BLE_advert_OnOff+0x30>)
    f146:	b086      	sub	sp, #24
		write_str1[0] = '0';
    f148:	3030      	adds	r0, #48	; 0x30
	commStatus = BLE_send_parse_CMD(cmdSetAdvert, write_str1, 1,
    f14a:	005b      	lsls	r3, r3, #1
    f14c:	7008      	strb	r0, [r1, #0]
    f14e:	9302      	str	r3, [sp, #8]
    f150:	3b7a      	subs	r3, #122	; 0x7a
    f152:	3bff      	subs	r3, #255	; 0xff
    f154:	446b      	add	r3, sp
    f156:	9301      	str	r3, [sp, #4]
    f158:	4b05      	ldr	r3, [pc, #20]	; (f170 <BLE_advert_OnOff+0x34>)
    f15a:	2201      	movs	r2, #1
    f15c:	9300      	str	r3, [sp, #0]
    f15e:	2316      	movs	r3, #22
    f160:	4c04      	ldr	r4, [pc, #16]	; (f174 <BLE_advert_OnOff+0x38>)
    f162:	446b      	add	r3, sp
    f164:	2005      	movs	r0, #5
    f166:	47a0      	blx	r4
		&rcvCmd, write_str2, &rcvLength, sizeof(write_str2));

}
    f168:	b006      	add	sp, #24
    f16a:	bd10      	pop	{r4, pc}
    f16c:	20002b78 	.word	0x20002b78
    f170:	200041dc 	.word	0x200041dc
    f174:	0001bde1 	.word	0x0001bde1

0000f178 <BLE_reset_to_AT_mode>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    f178:	2380      	movs	r3, #128	; 0x80


void BLE_reset_to_AT_mode(void){
    f17a:	b570      	push	{r4, r5, r6, lr}
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    f17c:	2508      	movs	r5, #8
    f17e:	2280      	movs	r2, #128	; 0x80
    f180:	4c06      	ldr	r4, [pc, #24]	; (f19c <BLE_reset_to_AT_mode+0x24>)
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    f182:	01db      	lsls	r3, r3, #7
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    f184:	6165      	str	r5, [r4, #20]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    f186:	61a3      	str	r3, [r4, #24]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    f188:	4b05      	ldr	r3, [pc, #20]	; (f1a0 <BLE_reset_to_AT_mode+0x28>)
    f18a:	03d2      	lsls	r2, r2, #15
    f18c:	615a      	str	r2, [r3, #20]
	//  Turn off Autorun
	ioport_set_pin_level(BLE_nAUTORUN_pin, true);//low for autorun enabled, high for development mode
	//  Disable OTA
	ioport_set_pin_level(BLE_OTA_sendMode_pin, false);
	//  Isolate UART for debug/programming interface
	BLE_usart_isolate();
    f18e:	4b05      	ldr	r3, [pc, #20]	; (f1a4 <BLE_reset_to_AT_mode+0x2c>)
    f190:	4798      	blx	r3
	
	// Turn on Module
	delay_ms(100);//  Ensure held in reset for min 100 ms
    f192:	2064      	movs	r0, #100	; 0x64
    f194:	4b04      	ldr	r3, [pc, #16]	; (f1a8 <BLE_reset_to_AT_mode+0x30>)
    f196:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    f198:	61a5      	str	r5, [r4, #24]
	ioport_set_pin_level(BLE_nRESET_pin, true);
	
}
    f19a:	bd70      	pop	{r4, r5, r6, pc}
    f19c:	40002800 	.word	0x40002800
    f1a0:	40002880 	.word	0x40002880
    f1a4:	0001c121 	.word	0x0001c121
    f1a8:	0001f509 	.word	0x0001f509

0000f1ac <BLE_error>:
    f1ac:	2380      	movs	r3, #128	; 0x80

void BLE_error(void){
    f1ae:	b570      	push	{r4, r5, r6, lr}
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    f1b0:	2508      	movs	r5, #8
    f1b2:	2280      	movs	r2, #128	; 0x80
    f1b4:	4c24      	ldr	r4, [pc, #144]	; (f248 <BLE_error+0x9c>)
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    f1b6:	01db      	lsls	r3, r3, #7
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    f1b8:	6165      	str	r5, [r4, #20]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    f1ba:	61a3      	str	r3, [r4, #24]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    f1bc:	4b23      	ldr	r3, [pc, #140]	; (f24c <BLE_error+0xa0>)
    f1be:	03d2      	lsls	r2, r2, #15
    f1c0:	615a      	str	r2, [r3, #20]
	BLE_usart_isolate();
    f1c2:	4b23      	ldr	r3, [pc, #140]	; (f250 <BLE_error+0xa4>)
    f1c4:	4798      	blx	r3
	delay_ms(100);//  Ensure held in reset for min 100 ms
    f1c6:	2064      	movs	r0, #100	; 0x64
    f1c8:	4b22      	ldr	r3, [pc, #136]	; (f254 <BLE_error+0xa8>)
    f1ca:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    f1cc:	61a5      	str	r5, [r4, #24]
	
	
	BLE_reset_to_AT_mode();
	
	
	wdt_disable();
    f1ce:	4b22      	ldr	r3, [pc, #136]	; (f258 <BLE_error+0xac>)
    f1d0:	4798      	blx	r3
	
	glcd_clear_buffer();
    f1d2:	4b22      	ldr	r3, [pc, #136]	; (f25c <BLE_error+0xb0>)
    f1d4:	4798      	blx	r3
	
	sprintf(display_str, "BLE Error");
    f1d6:	4c22      	ldr	r4, [pc, #136]	; (f260 <BLE_error+0xb4>)
    f1d8:	4e22      	ldr	r6, [pc, #136]	; (f264 <BLE_error+0xb8>)
    f1da:	220a      	movs	r2, #10
    f1dc:	4922      	ldr	r1, [pc, #136]	; (f268 <BLE_error+0xbc>)
    f1de:	0020      	movs	r0, r4
    f1e0:	47b0      	blx	r6
	glcd_tiny_draw_string(0,1,display_str);
    f1e2:	4d22      	ldr	r5, [pc, #136]	; (f26c <BLE_error+0xc0>)
    f1e4:	0022      	movs	r2, r4
    f1e6:	2101      	movs	r1, #1
    f1e8:	2000      	movs	r0, #0
    f1ea:	47a8      	blx	r5
	sprintf(display_str, "Setting BLE in");
    f1ec:	220f      	movs	r2, #15
    f1ee:	4920      	ldr	r1, [pc, #128]	; (f270 <BLE_error+0xc4>)
    f1f0:	0020      	movs	r0, r4
    f1f2:	47b0      	blx	r6
	glcd_tiny_draw_string(0,2,display_str);
    f1f4:	0022      	movs	r2, r4
    f1f6:	2102      	movs	r1, #2
    f1f8:	2000      	movs	r0, #0
    f1fa:	47a8      	blx	r5
	sprintf(display_str, "AT Mode for program");
    f1fc:	2214      	movs	r2, #20
    f1fe:	491d      	ldr	r1, [pc, #116]	; (f274 <BLE_error+0xc8>)
    f200:	0020      	movs	r0, r4
    f202:	47b0      	blx	r6
	glcd_tiny_draw_string(0,3,display_str);
    f204:	0022      	movs	r2, r4
    f206:	2103      	movs	r1, #3
    f208:	2000      	movs	r0, #0
    f20a:	47a8      	blx	r5
	sprintf(display_str, "Reset after program");
    f20c:	2214      	movs	r2, #20
    f20e:	491a      	ldr	r1, [pc, #104]	; (f278 <BLE_error+0xcc>)
    f210:	0020      	movs	r0, r4
    f212:	47b0      	blx	r6
	glcd_tiny_draw_string(0,5,display_str);
    f214:	0022      	movs	r2, r4
    f216:	2105      	movs	r1, #5
    f218:	2000      	movs	r0, #0
    f21a:	47a8      	blx	r5
	
	

	//hold here until an input
	sprintf(display_str, "Press any button...");
    f21c:	2214      	movs	r2, #20
    f21e:	4917      	ldr	r1, [pc, #92]	; (f27c <BLE_error+0xd0>)
    f220:	0020      	movs	r0, r4
    f222:	47b0      	blx	r6
	glcd_tiny_draw_string(10,7,display_str);
    f224:	0022      	movs	r2, r4
    f226:	2107      	movs	r1, #7
    f228:	200a      	movs	r0, #10
    f22a:	47a8      	blx	r5
	glcd_write();
    f22c:	4b14      	ldr	r3, [pc, #80]	; (f280 <BLE_error+0xd4>)
    f22e:	4798      	blx	r3
    f230:	4a14      	ldr	r2, [pc, #80]	; (f284 <BLE_error+0xd8>)
	while((current_input == input_none) || (current_input == input_1sec));
    f232:	6813      	ldr	r3, [r2, #0]
    f234:	2b06      	cmp	r3, #6
    f236:	d0fc      	beq.n	f232 <BLE_error+0x86>
    f238:	6813      	ldr	r3, [r2, #0]
    f23a:	2b07      	cmp	r3, #7
    f23c:	d0f9      	beq.n	f232 <BLE_error+0x86>
	
	//Resume normal operation
	current_input = input_none;
    f23e:	2306      	movs	r3, #6
    f240:	6013      	str	r3, [r2, #0]
	wdt_enable();
    f242:	4b11      	ldr	r3, [pc, #68]	; (f288 <BLE_error+0xdc>)
    f244:	4798      	blx	r3
	
}
    f246:	bd70      	pop	{r4, r5, r6, pc}
    f248:	40002800 	.word	0x40002800
    f24c:	40002880 	.word	0x40002880
    f250:	0001c121 	.word	0x0001c121
    f254:	0001f509 	.word	0x0001f509
    f258:	00016a19 	.word	0x00016a19
    f25c:	0001ca59 	.word	0x0001ca59
    f260:	20002da0 	.word	0x20002da0
    f264:	00028999 	.word	0x00028999
    f268:	0002da68 	.word	0x0002da68
    f26c:	0001e2f5 	.word	0x0001e2f5
    f270:	0002da74 	.word	0x0002da74
    f274:	0002da84 	.word	0x0002da84
    f278:	0002da98 	.word	0x0002da98
    f27c:	0002daac 	.word	0x0002daac
    f280:	0001db91 	.word	0x0001db91
    f284:	20003d24 	.word	0x20003d24
    f288:	000169f1 	.word	0x000169f1

0000f28c <BLE_init>:


void BLE_init(void){
    f28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f28e:	46d6      	mov	lr, sl
    f290:	464f      	mov	r7, r9
    f292:	4646      	mov	r6, r8
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    f294:	2208      	movs	r2, #8
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    f296:	2043      	movs	r0, #67	; 0x43
    f298:	2402      	movs	r4, #2
    f29a:	b5c0      	push	{r6, r7, lr}
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    f29c:	4b5f      	ldr	r3, [pc, #380]	; (f41c <BLE_init+0x190>)
    f29e:	2580      	movs	r5, #128	; 0x80
    f2a0:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    f2a2:	5c19      	ldrb	r1, [r3, r0]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    f2a4:	03ed      	lsls	r5, r5, #15
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    f2a6:	4321      	orrs	r1, r4
    f2a8:	b2c9      	uxtb	r1, r1
    f2aa:	5419      	strb	r1, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    f2ac:	615a      	str	r2, [r3, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    f2ae:	2280      	movs	r2, #128	; 0x80
    f2b0:	01d2      	lsls	r2, r2, #7
    f2b2:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    f2b4:	300b      	adds	r0, #11
    f2b6:	5c19      	ldrb	r1, [r3, r0]
    f2b8:	b086      	sub	sp, #24
    f2ba:	4321      	orrs	r1, r4
    f2bc:	b2c9      	uxtb	r1, r1
    f2be:	5419      	strb	r1, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    f2c0:	615a      	str	r2, [r3, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    f2c2:	4a57      	ldr	r2, [pc, #348]	; (f420 <BLE_init+0x194>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    f2c4:	3008      	adds	r0, #8
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    f2c6:	6095      	str	r5, [r2, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    f2c8:	5c11      	ldrb	r1, [r2, r0]
    f2ca:	4321      	orrs	r1, r4
    f2cc:	b2c9      	uxtb	r1, r1
    f2ce:	5411      	strb	r1, [r2, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    f2d0:	6155      	str	r5, [r2, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    f2d2:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    f2d4:	5c1a      	ldrb	r2, [r3, r0]
    f2d6:	4322      	orrs	r2, r4
    f2d8:	b2d2      	uxtb	r2, r2
    f2da:	541a      	strb	r2, [r3, r0]
	ioport_set_pin_level(BLE_OTA_sendMode_pin, false);//  Start low; no data
	//  Configure Receive-mode pin
	ioport_set_pin_dir(BLE_rcvMode_pin, IOPORT_DIR_INPUT);
	
	//  Initialize communications	
	if (!isBleCommEnabled()){
    f2dc:	4b51      	ldr	r3, [pc, #324]	; (f424 <BLE_init+0x198>)
    f2de:	4798      	blx	r3
    f2e0:	2800      	cmp	r0, #0
    f2e2:	d031      	beq.n	f348 <BLE_init+0xbc>
		configure_usart_BLE();
	}
	//  Ensure minimum of 100 ms lowbefore release of reset
	delay_ms(100);
    f2e4:	4c50      	ldr	r4, [pc, #320]	; (f428 <BLE_init+0x19c>)
    f2e6:	2064      	movs	r0, #100	; 0x64
    f2e8:	47a0      	blx	r4
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    f2ea:	2208      	movs	r2, #8
	// Turn on Module, release reset pin
	ioport_set_pin_level(BLE_nRESET_pin, true);
	delay_ms(500);
    f2ec:	20fa      	movs	r0, #250	; 0xfa
    f2ee:	4b4b      	ldr	r3, [pc, #300]	; (f41c <BLE_init+0x190>)
    f2f0:	0040      	lsls	r0, r0, #1
    f2f2:	619a      	str	r2, [r3, #24]
    f2f4:	47a0      	blx	r4

		
	//  Assign Device Name
	sprintf(write_str1,"BRIC4_%04d", options.SerialNumber);
    f2f6:	4b4d      	ldr	r3, [pc, #308]	; (f42c <BLE_init+0x1a0>)
    f2f8:	4c4d      	ldr	r4, [pc, #308]	; (f430 <BLE_init+0x1a4>)
    f2fa:	685a      	ldr	r2, [r3, #4]
    f2fc:	4699      	mov	r9, r3
    f2fe:	4b4d      	ldr	r3, [pc, #308]	; (f434 <BLE_init+0x1a8>)
    f300:	494d      	ldr	r1, [pc, #308]	; (f438 <BLE_init+0x1ac>)
    f302:	0020      	movs	r0, r4
    f304:	4698      	mov	r8, r3
    f306:	4798      	blx	r3
	commStatus = BLE_send_parse_CMD(cmdSetDeviceName, write_str1, strlen(write_str1),
    f308:	0020      	movs	r0, r4
    f30a:	4f4c      	ldr	r7, [pc, #304]	; (f43c <BLE_init+0x1b0>)
    f30c:	47b8      	blx	r7
    f30e:	23c8      	movs	r3, #200	; 0xc8
    f310:	005b      	lsls	r3, r3, #1
    f312:	469a      	mov	sl, r3
    f314:	9302      	str	r3, [sp, #8]
    f316:	ab05      	add	r3, sp, #20
    f318:	9301      	str	r3, [sp, #4]
    f31a:	2315      	movs	r3, #21
    f31c:	4e48      	ldr	r6, [pc, #288]	; (f440 <BLE_init+0x1b4>)
    f31e:	b2c2      	uxtb	r2, r0
    f320:	9600      	str	r6, [sp, #0]
    f322:	446b      	add	r3, sp
    f324:	0021      	movs	r1, r4
    f326:	2014      	movs	r0, #20
    f328:	4d46      	ldr	r5, [pc, #280]	; (f444 <BLE_init+0x1b8>)
    f32a:	47a8      	blx	r5
			&rcvCmd, write_str2, &rcvLength, sizeof(write_str2));
	if ((commStatus!= STATUS_OK)||(rcvCmd!= cmdOK)){
    f32c:	2800      	cmp	r0, #0
    f32e:	d103      	bne.n	f338 <BLE_init+0xac>
    f330:	466b      	mov	r3, sp
    f332:	7d5b      	ldrb	r3, [r3, #21]
    f334:	2bfe      	cmp	r3, #254	; 0xfe
    f336:	d00a      	beq.n	f34e <BLE_init+0xc2>
		BLE_error();			
    f338:	4b43      	ldr	r3, [pc, #268]	; (f448 <BLE_init+0x1bc>)
    f33a:	4798      	blx	r3
	//  Start Advertising
	BLE_advert_OnOff(true);
	

	
}
    f33c:	b006      	add	sp, #24
    f33e:	bc1c      	pop	{r2, r3, r4}
    f340:	4690      	mov	r8, r2
    f342:	4699      	mov	r9, r3
    f344:	46a2      	mov	sl, r4
    f346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		configure_usart_BLE();
    f348:	4b40      	ldr	r3, [pc, #256]	; (f44c <BLE_init+0x1c0>)
    f34a:	4798      	blx	r3
    f34c:	e7ca      	b.n	f2e4 <BLE_init+0x58>
	sprintf(write_str1,"%04d", options.SerialNumber);
    f34e:	464b      	mov	r3, r9
    f350:	493f      	ldr	r1, [pc, #252]	; (f450 <BLE_init+0x1c4>)
    f352:	685a      	ldr	r2, [r3, #4]
    f354:	0020      	movs	r0, r4
    f356:	47c0      	blx	r8
	commStatus = BLE_send_parse_CMD(cmdSetSn, write_str1, strlen(write_str1),
    f358:	0020      	movs	r0, r4
    f35a:	47b8      	blx	r7
    f35c:	4653      	mov	r3, sl
    f35e:	9302      	str	r3, [sp, #8]
    f360:	ab05      	add	r3, sp, #20
    f362:	9301      	str	r3, [sp, #4]
    f364:	2315      	movs	r3, #21
    f366:	b2c2      	uxtb	r2, r0
    f368:	9600      	str	r6, [sp, #0]
    f36a:	446b      	add	r3, sp
    f36c:	0021      	movs	r1, r4
    f36e:	2015      	movs	r0, #21
    f370:	47a8      	blx	r5
	if ((commStatus!= STATUS_OK)||(rcvCmd!= cmdOK)){
    f372:	2800      	cmp	r0, #0
    f374:	d1e0      	bne.n	f338 <BLE_init+0xac>
    f376:	466b      	mov	r3, sp
    f378:	7d5b      	ldrb	r3, [r3, #21]
    f37a:	2bfe      	cmp	r3, #254	; 0xfe
    f37c:	d1dc      	bne.n	f338 <BLE_init+0xac>
	sprintf(write_str1,"%0.2f", SOFTWARE_VERSION);
    f37e:	2200      	movs	r2, #0
    f380:	4b34      	ldr	r3, [pc, #208]	; (f454 <BLE_init+0x1c8>)
    f382:	4935      	ldr	r1, [pc, #212]	; (f458 <BLE_init+0x1cc>)
    f384:	0020      	movs	r0, r4
    f386:	47c0      	blx	r8
	commStatus = BLE_send_parse_CMD(cmdSetSoftwareVer, write_str1, strlen(write_str1),
    f388:	0020      	movs	r0, r4
    f38a:	47b8      	blx	r7
    f38c:	4653      	mov	r3, sl
    f38e:	9302      	str	r3, [sp, #8]
    f390:	ab05      	add	r3, sp, #20
    f392:	9301      	str	r3, [sp, #4]
    f394:	2315      	movs	r3, #21
    f396:	b2c2      	uxtb	r2, r0
    f398:	9600      	str	r6, [sp, #0]
    f39a:	446b      	add	r3, sp
    f39c:	0021      	movs	r1, r4
    f39e:	201a      	movs	r0, #26
    f3a0:	47a8      	blx	r5
	if ((commStatus!= STATUS_OK)||(rcvCmd!= cmdOK)){
    f3a2:	2800      	cmp	r0, #0
    f3a4:	d1c8      	bne.n	f338 <BLE_init+0xac>
    f3a6:	466b      	mov	r3, sp
    f3a8:	7d5b      	ldrb	r3, [r3, #21]
    f3aa:	2bfe      	cmp	r3, #254	; 0xfe
    f3ac:	d1c4      	bne.n	f338 <BLE_init+0xac>
	sprintf(write_str1,"%s", HARDWARE_VERSION);
    f3ae:	2202      	movs	r2, #2
    f3b0:	492a      	ldr	r1, [pc, #168]	; (f45c <BLE_init+0x1d0>)
    f3b2:	4b2b      	ldr	r3, [pc, #172]	; (f460 <BLE_init+0x1d4>)
    f3b4:	0020      	movs	r0, r4
    f3b6:	4798      	blx	r3
	commStatus = BLE_send_parse_CMD(cmdSetHardwareVer, write_str1, strlen(write_str1),
    f3b8:	4653      	mov	r3, sl
    f3ba:	9302      	str	r3, [sp, #8]
    f3bc:	ab05      	add	r3, sp, #20
    f3be:	9301      	str	r3, [sp, #4]
    f3c0:	2315      	movs	r3, #21
    f3c2:	2201      	movs	r2, #1
    f3c4:	9600      	str	r6, [sp, #0]
    f3c6:	446b      	add	r3, sp
    f3c8:	0021      	movs	r1, r4
    f3ca:	2018      	movs	r0, #24
    f3cc:	47a8      	blx	r5
    f3ce:	1e02      	subs	r2, r0, #0
	if ((commStatus!= STATUS_OK)||(rcvCmd!= cmdOK)){
    f3d0:	d1b2      	bne.n	f338 <BLE_init+0xac>
    f3d2:	466b      	mov	r3, sp
    f3d4:	7d5b      	ldrb	r3, [r3, #21]
    f3d6:	2bfe      	cmp	r3, #254	; 0xfe
    f3d8:	d1ae      	bne.n	f338 <BLE_init+0xac>
	commStatus = BLE_send_parse_CMD(cmdStartup, write_str1, 0,
    f3da:	4653      	mov	r3, sl
    f3dc:	9302      	str	r3, [sp, #8]
    f3de:	ab05      	add	r3, sp, #20
    f3e0:	9301      	str	r3, [sp, #4]
    f3e2:	2315      	movs	r3, #21
    f3e4:	9600      	str	r6, [sp, #0]
    f3e6:	446b      	add	r3, sp
    f3e8:	0021      	movs	r1, r4
    f3ea:	2050      	movs	r0, #80	; 0x50
    f3ec:	47a8      	blx	r5
	if ((commStatus!= STATUS_OK)||(rcvCmd!= cmdOK)){
    f3ee:	2800      	cmp	r0, #0
    f3f0:	d1a2      	bne.n	f338 <BLE_init+0xac>
    f3f2:	466b      	mov	r3, sp
    f3f4:	7d5b      	ldrb	r3, [r3, #21]
    f3f6:	2bfe      	cmp	r3, #254	; 0xfe
    f3f8:	d19e      	bne.n	f338 <BLE_init+0xac>
		write_str1[0] = '1';
    f3fa:	3bcd      	subs	r3, #205	; 0xcd
    f3fc:	7023      	strb	r3, [r4, #0]
	commStatus = BLE_send_parse_CMD(cmdSetAdvert, write_str1, 1,
    f3fe:	3360      	adds	r3, #96	; 0x60
    f400:	33ff      	adds	r3, #255	; 0xff
    f402:	9302      	str	r3, [sp, #8]
    f404:	3b7a      	subs	r3, #122	; 0x7a
    f406:	3bff      	subs	r3, #255	; 0xff
    f408:	446b      	add	r3, sp
    f40a:	9301      	str	r3, [sp, #4]
    f40c:	2316      	movs	r3, #22
    f40e:	9600      	str	r6, [sp, #0]
    f410:	446b      	add	r3, sp
    f412:	2201      	movs	r2, #1
    f414:	0021      	movs	r1, r4
    f416:	3005      	adds	r0, #5
    f418:	47a8      	blx	r5
    f41a:	e78f      	b.n	f33c <BLE_init+0xb0>
    f41c:	40002800 	.word	0x40002800
    f420:	40002880 	.word	0x40002880
    f424:	0001c111 	.word	0x0001c111
    f428:	0001f509 	.word	0x0001f509
    f42c:	20002d20 	.word	0x20002d20
    f430:	20002b78 	.word	0x20002b78
    f434:	00028ab1 	.word	0x00028ab1
    f438:	0002dad0 	.word	0x0002dad0
    f43c:	00028c1d 	.word	0x00028c1d
    f440:	200041dc 	.word	0x200041dc
    f444:	0001bde1 	.word	0x0001bde1
    f448:	0000f1ad 	.word	0x0000f1ad
    f44c:	0001bfc1 	.word	0x0001bfc1
    f450:	0002f498 	.word	0x0002f498
    f454:	40160000 	.word	0x40160000
    f458:	0002dadc 	.word	0x0002dadc
    f45c:	0002f56c 	.word	0x0002f56c
    f460:	00028999 	.word	0x00028999

0000f464 <BLE_getBatteryLevel>:
	uint8_t bleErr;
	char rcvCmd;
	uint8_t rcvLength;
	uint8_t battLevel;
	
	write_str1[0] = cmdGetBattery;
    f464:	230b      	movs	r3, #11
    f466:	490e      	ldr	r1, [pc, #56]	; (f4a0 <BLE_getBatteryLevel+0x3c>)
uint8_t BLE_getBatteryLevel(void){
    f468:	b530      	push	{r4, r5, lr}
	write_str1[0] = cmdGetBattery;
    f46a:	700b      	strb	r3, [r1, #0]
	write_str1[1] = 0x00;
    f46c:	2300      	movs	r3, #0
    f46e:	704b      	strb	r3, [r1, #1]
	bleErr = BLE_send_parse_CMD(cmdGetBattery, write_str1, 0,
    f470:	3391      	adds	r3, #145	; 0x91
uint8_t BLE_getBatteryLevel(void){
    f472:	b087      	sub	sp, #28
	bleErr = BLE_send_parse_CMD(cmdGetBattery, write_str1, 0,
    f474:	33ff      	adds	r3, #255	; 0xff
    f476:	9302      	str	r3, [sp, #8]
    f478:	3b7a      	subs	r3, #122	; 0x7a
    f47a:	3bff      	subs	r3, #255	; 0xff
    f47c:	446b      	add	r3, sp
    f47e:	9301      	str	r3, [sp, #4]
    f480:	2316      	movs	r3, #22
    f482:	4c08      	ldr	r4, [pc, #32]	; (f4a4 <BLE_getBatteryLevel+0x40>)
    f484:	446b      	add	r3, sp
    f486:	9400      	str	r4, [sp, #0]
    f488:	2200      	movs	r2, #0
    f48a:	200b      	movs	r0, #11
    f48c:	4d06      	ldr	r5, [pc, #24]	; (f4a8 <BLE_getBatteryLevel+0x44>)
    f48e:	47a8      	blx	r5
		&rcvCmd, write_str2, &rcvLength, sizeof(write_str2));
	if (bleErr){
		//BLE_error();
		return 0;
    f490:	2300      	movs	r3, #0
	if (bleErr){
    f492:	2800      	cmp	r0, #0
    f494:	d100      	bne.n	f498 <BLE_getBatteryLevel+0x34>
	}
	//  Data returned in hex format, 0-100
	//  for example, "64" is 100
	battLevel = write_str2[0];
    f496:	7823      	ldrb	r3, [r4, #0]
	
	return battLevel;
	
}
    f498:	0018      	movs	r0, r3
    f49a:	b007      	add	sp, #28
    f49c:	bd30      	pop	{r4, r5, pc}
    f49e:	46c0      	nop			; (mov r8, r8)
    f4a0:	20002b78 	.word	0x20002b78
    f4a4:	200041dc 	.word	0x200041dc
    f4a8:	0001bde1 	.word	0x0001bde1

0000f4ac <BLE_setBatteryLevel>:
void BLE_setBatteryLevel(uint8_t battLevel){
	uint8_t bleErr, rcvLength;
	char rcvCmd;
	
	write_str1[0] = battLevel;	
	bleErr = BLE_send_parse_CMD(cmdSetBattery, write_str1, 1,
    f4ac:	23c8      	movs	r3, #200	; 0xc8
void BLE_setBatteryLevel(uint8_t battLevel){
    f4ae:	b510      	push	{r4, lr}
	write_str1[0] = battLevel;	
    f4b0:	4909      	ldr	r1, [pc, #36]	; (f4d8 <BLE_setBatteryLevel+0x2c>)
void BLE_setBatteryLevel(uint8_t battLevel){
    f4b2:	b086      	sub	sp, #24
	bleErr = BLE_send_parse_CMD(cmdSetBattery, write_str1, 1,
    f4b4:	005b      	lsls	r3, r3, #1
	write_str1[0] = battLevel;	
    f4b6:	7008      	strb	r0, [r1, #0]
	bleErr = BLE_send_parse_CMD(cmdSetBattery, write_str1, 1,
    f4b8:	9302      	str	r3, [sp, #8]
    f4ba:	3b7b      	subs	r3, #123	; 0x7b
    f4bc:	3bff      	subs	r3, #255	; 0xff
    f4be:	446b      	add	r3, sp
    f4c0:	9301      	str	r3, [sp, #4]
    f4c2:	4b06      	ldr	r3, [pc, #24]	; (f4dc <BLE_setBatteryLevel+0x30>)
    f4c4:	2201      	movs	r2, #1
    f4c6:	9300      	str	r3, [sp, #0]
    f4c8:	2317      	movs	r3, #23
    f4ca:	4c05      	ldr	r4, [pc, #20]	; (f4e0 <BLE_setBatteryLevel+0x34>)
    f4cc:	446b      	add	r3, sp
    f4ce:	200a      	movs	r0, #10
    f4d0:	47a0      	blx	r4
		&rcvCmd, write_str2, &rcvLength, sizeof(write_str2));
	if (bleErr){
		//BLE_error();
		return;
	}
}
    f4d2:	b006      	add	sp, #24
    f4d4:	bd10      	pop	{r4, pc}
    f4d6:	46c0      	nop			; (mov r8, r8)
    f4d8:	20002b78 	.word	0x20002b78
    f4dc:	200041dc 	.word	0x200041dc
    f4e0:	0001bde1 	.word	0x0001bde1

0000f4e4 <BLE_sendMeas>:


void BLE_sendMeas(struct MEASUREMENT *meas){
    f4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return isBleConnectedBool;
    f4e6:	4b39      	ldr	r3, [pc, #228]	; (f5cc <BLE_sendMeas+0xe8>)
void BLE_sendMeas(struct MEASUREMENT *meas){
    f4e8:	b087      	sub	sp, #28
	return isBleConnectedBool;
    f4ea:	781b      	ldrb	r3, [r3, #0]
void BLE_sendMeas(struct MEASUREMENT *meas){
    f4ec:	0004      	movs	r4, r0
	char rcvCmd;
	uint8_t bleErr, rcvLength;
	
	if (!isBleConnected()){
    f4ee:	2b00      	cmp	r3, #0
    f4f0:	d101      	bne.n	f4f6 <BLE_sendMeas+0x12>
	bleErr = BLE_send_parse_CMD(cmdSetMeasurementAll, write_str1, 60,
	&rcvCmd, write_str2, &rcvLength, sizeof(write_str2));
	
	

}
    f4f2:	b007      	add	sp, #28
    f4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(write_str1, &meas->measTime, 8);
    f4f6:	0001      	movs	r1, r0
    f4f8:	4d35      	ldr	r5, [pc, #212]	; (f5d0 <BLE_sendMeas+0xec>)
    f4fa:	4e36      	ldr	r6, [pc, #216]	; (f5d4 <BLE_sendMeas+0xf0>)
    f4fc:	3108      	adds	r1, #8
    f4fe:	2208      	movs	r2, #8
    f500:	0028      	movs	r0, r5
    f502:	47b0      	blx	r6
	memcpy(write_str1+8, &meas->distMeters, 4);
    f504:	0028      	movs	r0, r5
    f506:	0021      	movs	r1, r4
    f508:	2204      	movs	r2, #4
    f50a:	3110      	adds	r1, #16
    f50c:	3008      	adds	r0, #8
    f50e:	47b0      	blx	r6
	memcpy(write_str1+12, &meas->azimuth, 4);
    f510:	0028      	movs	r0, r5
    f512:	0021      	movs	r1, r4
    f514:	2204      	movs	r2, #4
    f516:	3114      	adds	r1, #20
    f518:	300c      	adds	r0, #12
    f51a:	47b0      	blx	r6
	memcpy(write_str1+16, &meas->inclination, 4);
    f51c:	0028      	movs	r0, r5
    f51e:	0021      	movs	r1, r4
    f520:	2204      	movs	r2, #4
    f522:	3118      	adds	r1, #24
    f524:	3010      	adds	r0, #16
    f526:	47b0      	blx	r6
	memcpy(write_str1+20, &meas->refIndex, 4);
    f528:	0028      	movs	r0, r5
    f52a:	0021      	movs	r1, r4
    f52c:	2204      	movs	r2, #4
    f52e:	3014      	adds	r0, #20
    f530:	47b0      	blx	r6
	memcpy(write_str1+24, &meas->dip, 4);
    f532:	0028      	movs	r0, r5
    f534:	0021      	movs	r1, r4
    f536:	2204      	movs	r2, #4
    f538:	311c      	adds	r1, #28
    f53a:	3018      	adds	r0, #24
    f53c:	47b0      	blx	r6
	memcpy(write_str1+28, &meas->roll, 4);
    f53e:	0028      	movs	r0, r5
    f540:	0021      	movs	r1, r4
    f542:	2204      	movs	r2, #4
    f544:	3120      	adds	r1, #32
    f546:	301c      	adds	r0, #28
    f548:	47b0      	blx	r6
	memcpy(write_str1+32, &meas->temperatureC, 4);
    f54a:	0028      	movs	r0, r5
    f54c:	0021      	movs	r1, r4
    f54e:	2204      	movs	r2, #4
    f550:	3124      	adds	r1, #36	; 0x24
    f552:	3020      	adds	r0, #32
    f554:	47b0      	blx	r6
	memcpy(write_str1+36, &meas->samples, 2);
    f556:	0028      	movs	r0, r5
    f558:	0021      	movs	r1, r4
    f55a:	2202      	movs	r2, #2
    f55c:	312a      	adds	r1, #42	; 0x2a
    f55e:	3024      	adds	r0, #36	; 0x24
    f560:	47b0      	blx	r6
	memcpy(write_str1+38, &meas->meas_type, 1);
    f562:	2328      	movs	r3, #40	; 0x28
    f564:	2226      	movs	r2, #38	; 0x26
    f566:	5ce1      	ldrb	r1, [r4, r3]
	memcpy(write_str1+41, &meas->measurement_error_data1[0], 4);
    f568:	0028      	movs	r0, r5
	memcpy(write_str1+38, &meas->meas_type, 1);
    f56a:	54a9      	strb	r1, [r5, r2]
	memcpy(write_str1+41, &meas->measurement_error_data1[0], 4);
    f56c:	0021      	movs	r1, r4
	memcpy(write_str1+40, &meas->errCode[0], 1);
    f56e:	3206      	adds	r2, #6
    f570:	5ca2      	ldrb	r2, [r4, r2]
	memcpy(write_str1+41, &meas->measurement_error_data1[0], 4);
    f572:	3130      	adds	r1, #48	; 0x30
	memcpy(write_str1+40, &meas->errCode[0], 1);
    f574:	54ea      	strb	r2, [r5, r3]
	memcpy(write_str1+45, &meas->measurement_error_data2[0], 4);
    f576:	0027      	movs	r7, r4
	memcpy(write_str1+41, &meas->measurement_error_data1[0], 4);
    f578:	2204      	movs	r2, #4
    f57a:	3029      	adds	r0, #41	; 0x29
    f57c:	47b0      	blx	r6
	memcpy(write_str1+45, &meas->measurement_error_data2[0], 4);
    f57e:	0028      	movs	r0, r5
    f580:	3738      	adds	r7, #56	; 0x38
    f582:	0039      	movs	r1, r7
    f584:	2204      	movs	r2, #4
    f586:	302d      	adds	r0, #45	; 0x2d
    f588:	47b0      	blx	r6
	memcpy(write_str1+49, &meas->errCode[2], 1);
    f58a:	232e      	movs	r3, #46	; 0x2e
	memcpy(write_str1+50, &meas->measurement_error_data1[2], 4);
    f58c:	0028      	movs	r0, r5
	memcpy(write_str1+49, &meas->errCode[2], 1);
    f58e:	5ce2      	ldrb	r2, [r4, r3]
    f590:	3303      	adds	r3, #3
    f592:	54ea      	strb	r2, [r5, r3]
	memcpy(write_str1+50, &meas->measurement_error_data1[2], 4);
    f594:	0039      	movs	r1, r7
    f596:	2204      	movs	r2, #4
    f598:	3032      	adds	r0, #50	; 0x32
    f59a:	47b0      	blx	r6
	memcpy(write_str1+54, &meas->measurement_error_data2[2], 4);
    f59c:	0028      	movs	r0, r5
    f59e:	0021      	movs	r1, r4
    f5a0:	2204      	movs	r2, #4
    f5a2:	3140      	adds	r1, #64	; 0x40
    f5a4:	3036      	adds	r0, #54	; 0x36
    f5a6:	47b0      	blx	r6
	bleErr = BLE_send_parse_CMD(cmdSetMeasurementAll, write_str1, 60,
    f5a8:	23c8      	movs	r3, #200	; 0xc8
    f5aa:	005b      	lsls	r3, r3, #1
    f5ac:	9302      	str	r3, [sp, #8]
    f5ae:	3b7a      	subs	r3, #122	; 0x7a
    f5b0:	3bff      	subs	r3, #255	; 0xff
    f5b2:	446b      	add	r3, sp
    f5b4:	9301      	str	r3, [sp, #4]
    f5b6:	4b08      	ldr	r3, [pc, #32]	; (f5d8 <BLE_sendMeas+0xf4>)
    f5b8:	223c      	movs	r2, #60	; 0x3c
    f5ba:	9300      	str	r3, [sp, #0]
    f5bc:	2316      	movs	r3, #22
    f5be:	0029      	movs	r1, r5
    f5c0:	446b      	add	r3, sp
    f5c2:	4c06      	ldr	r4, [pc, #24]	; (f5dc <BLE_sendMeas+0xf8>)
    f5c4:	202b      	movs	r0, #43	; 0x2b
    f5c6:	47a0      	blx	r4
    f5c8:	e793      	b.n	f4f2 <BLE_sendMeas+0xe>
    f5ca:	46c0      	nop			; (mov r8, r8)
    f5cc:	20000caa 	.word	0x20000caa
    f5d0:	20002b78 	.word	0x20002b78
    f5d4:	00028999 	.word	0x00028999
    f5d8:	200041dc 	.word	0x200041dc
    f5dc:	0001bde1 	.word	0x0001bde1

0000f5e0 <config_buttons>:
#include <buttons.h>




void config_buttons(void){
    f5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5e2:	46d6      	mov	lr, sl
    f5e4:	464f      	mov	r7, r9
    f5e6:	4646      	mov	r6, r8
    f5e8:	b5c0      	push	{r6, r7, lr}
    f5ea:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
    f5ec:	ac01      	add	r4, sp, #4
    f5ee:	0020      	movs	r0, r4
    f5f0:	4b2c      	ldr	r3, [pc, #176]	; (f6a4 <config_buttons+0xc4>)
    f5f2:	4798      	blx	r3
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    f5f4:	2301      	movs	r3, #1
    f5f6:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_LOW;
	config_extint_chan.filter_input_signal  = true;
    f5f8:	72a3      	strb	r3, [r4, #10]
	//config_extint_chan.enable_async_edge_detection = true;
	// button 4
	config_extint_chan.gpio_pin           = PIN_PA07A_EIC_EXTINT7;
    f5fa:	3306      	adds	r3, #6
    f5fc:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA07A_EIC_EXTINT7;
    f5fe:	2300      	movs	r3, #0
	config_extint_chan.detection_criteria = EXTINT_DETECT_LOW;
    f600:	2205      	movs	r2, #5
	config_extint_chan.gpio_pin_mux       = MUX_PA07A_EIC_EXTINT7;
    f602:	4699      	mov	r9, r3
    f604:	6063      	str	r3, [r4, #4]
	extint_chan_set_config(7, &config_extint_chan);
    f606:	4b28      	ldr	r3, [pc, #160]	; (f6a8 <config_buttons+0xc8>)
    f608:	0021      	movs	r1, r4
    f60a:	2007      	movs	r0, #7
    f60c:	4698      	mov	r8, r3
	config_extint_chan.detection_criteria = EXTINT_DETECT_LOW;
    f60e:	4692      	mov	sl, r2
    f610:	72e2      	strb	r2, [r4, #11]
	extint_chan_set_config(7, &config_extint_chan);
    f612:	4798      	blx	r3
	extint_register_callback(extint_routine, 7,	EXTINT_CALLBACK_TYPE_DETECT);
    f614:	4f25      	ldr	r7, [pc, #148]	; (f6ac <config_buttons+0xcc>)
    f616:	4e26      	ldr	r6, [pc, #152]	; (f6b0 <config_buttons+0xd0>)
    f618:	2200      	movs	r2, #0
    f61a:	2107      	movs	r1, #7
    f61c:	0038      	movs	r0, r7
    f61e:	47b0      	blx	r6
	extint_chan_enable_callback(7,EXTINT_CALLBACK_TYPE_DETECT);
    f620:	4d24      	ldr	r5, [pc, #144]	; (f6b4 <config_buttons+0xd4>)
    f622:	2100      	movs	r1, #0
    f624:	2007      	movs	r0, #7
    f626:	47a8      	blx	r5
	// button 3
	config_extint_chan.gpio_pin           = PIN_PA06A_EIC_EXTINT6;
    f628:	2306      	movs	r3, #6
    f62a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA06A_EIC_EXTINT6;
    f62c:	464b      	mov	r3, r9
	extint_chan_set_config(6, &config_extint_chan);
    f62e:	0021      	movs	r1, r4
    f630:	2006      	movs	r0, #6
	config_extint_chan.gpio_pin_mux       = MUX_PA06A_EIC_EXTINT6;
    f632:	6063      	str	r3, [r4, #4]
	extint_chan_set_config(6, &config_extint_chan);
    f634:	47c0      	blx	r8
	extint_register_callback(extint_routine, 6,	EXTINT_CALLBACK_TYPE_DETECT);
    f636:	2200      	movs	r2, #0
    f638:	2106      	movs	r1, #6
    f63a:	0038      	movs	r0, r7
    f63c:	47b0      	blx	r6
	extint_chan_enable_callback(6,EXTINT_CALLBACK_TYPE_DETECT);
    f63e:	2100      	movs	r1, #0
    f640:	2006      	movs	r0, #6
    f642:	47a8      	blx	r5
	// button 2
	config_extint_chan.gpio_pin           = PIN_PA04A_EIC_EXTINT4;
    f644:	2304      	movs	r3, #4
    f646:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA04A_EIC_EXTINT4;
    f648:	464b      	mov	r3, r9
	extint_chan_set_config(4, &config_extint_chan);
    f64a:	0021      	movs	r1, r4
    f64c:	2004      	movs	r0, #4
	config_extint_chan.gpio_pin_mux       = MUX_PA04A_EIC_EXTINT4;
    f64e:	6063      	str	r3, [r4, #4]
	extint_chan_set_config(4, &config_extint_chan);
    f650:	47c0      	blx	r8
	extint_register_callback(extint_routine, 4,	EXTINT_CALLBACK_TYPE_DETECT);
    f652:	2200      	movs	r2, #0
    f654:	2104      	movs	r1, #4
    f656:	0038      	movs	r0, r7
    f658:	47b0      	blx	r6
	extint_chan_enable_callback(4,EXTINT_CALLBACK_TYPE_DETECT);
    f65a:	2100      	movs	r1, #0
    f65c:	2004      	movs	r0, #4
    f65e:	47a8      	blx	r5
	// button 1
	config_extint_chan.gpio_pin           = PIN_PB09A_EIC_EXTINT9;
    f660:	2329      	movs	r3, #41	; 0x29
    f662:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PB09A_EIC_EXTINT9;
    f664:	464b      	mov	r3, r9
	extint_chan_set_config(9, &config_extint_chan);
    f666:	0021      	movs	r1, r4
    f668:	2009      	movs	r0, #9
	config_extint_chan.gpio_pin_mux       = MUX_PB09A_EIC_EXTINT9;
    f66a:	6063      	str	r3, [r4, #4]
	extint_chan_set_config(9, &config_extint_chan);
    f66c:	47c0      	blx	r8
	extint_register_callback(extint_routine, 9,	EXTINT_CALLBACK_TYPE_DETECT);
    f66e:	2200      	movs	r2, #0
    f670:	2109      	movs	r1, #9
    f672:	0038      	movs	r0, r7
    f674:	47b0      	blx	r6
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
    f676:	2100      	movs	r1, #0
    f678:	2009      	movs	r0, #9
    f67a:	47a8      	blx	r5
	
	// button Ext
	//config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
	config_extint_chan.gpio_pin           = PIN_PA05A_EIC_EXTINT5;
    f67c:	4653      	mov	r3, sl
    f67e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA05A_EIC_EXTINT5;
    f680:	464b      	mov	r3, r9
	extint_chan_set_config(5, &config_extint_chan);
    f682:	0021      	movs	r1, r4
    f684:	2005      	movs	r0, #5
	config_extint_chan.gpio_pin_mux       = MUX_PA05A_EIC_EXTINT5;
    f686:	6063      	str	r3, [r4, #4]
	extint_chan_set_config(5, &config_extint_chan);
    f688:	47c0      	blx	r8
	extint_register_callback(extint_routine, 5,	EXTINT_CALLBACK_TYPE_DETECT);
    f68a:	2200      	movs	r2, #0
    f68c:	2105      	movs	r1, #5
    f68e:	0038      	movs	r0, r7
    f690:	47b0      	blx	r6
	extint_chan_enable_callback(5,EXTINT_CALLBACK_TYPE_DETECT);
    f692:	2100      	movs	r1, #0
    f694:	2005      	movs	r0, #5
    f696:	47a8      	blx	r5
	
	
	
	
	
}
    f698:	b004      	add	sp, #16
    f69a:	bc1c      	pop	{r2, r3, r4}
    f69c:	4690      	mov	r8, r2
    f69e:	4699      	mov	r9, r3
    f6a0:	46a2      	mov	sl, r4
    f6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f6a4:	000184ad 	.word	0x000184ad
    f6a8:	000184c1 	.word	0x000184c1
    f6ac:	0000f739 	.word	0x0000f739
    f6b0:	000183a5 	.word	0x000183a5
    f6b4:	000183cd 	.word	0x000183cd

0000f6b8 <extIntToggle>:

bool extIntToggle(const uint8_t channel){
    f6b8:	b570      	push	{r4, r5, r6, lr}
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    f6ba:	281f      	cmp	r0, #31
    f6bc:	d833      	bhi.n	f726 <extIntToggle+0x6e>
	uint32_t config_pos;
	uint32_t currentConfig, newConfig;
	enum extint_detect currentDetection, newDetection;
	
	//  Disable for modification
	EIC_module->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    f6be:	2102      	movs	r1, #2
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    f6c0:	2402      	movs	r4, #2
    f6c2:	4b1c      	ldr	r3, [pc, #112]	; (f734 <extIntToggle+0x7c>)
    f6c4:	781a      	ldrb	r2, [r3, #0]
    f6c6:	438a      	bics	r2, r1
    f6c8:	701a      	strb	r2, [r3, #0]
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f6ca:	3901      	subs	r1, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    f6cc:	685a      	ldr	r2, [r3, #4]
    f6ce:	4214      	tst	r4, r2
    f6d0:	d1fc      	bne.n	f6cc <extIntToggle+0x14>
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f6d2:	685a      	ldr	r2, [r3, #4]
    f6d4:	4211      	tst	r1, r2
    f6d6:	d1f9      	bne.n	f6cc <extIntToggle+0x14>
		/* Wait for all hardware modules to complete synchronization */
	}
	
	extint_chan_clear_detected(channel);
	//  Start position of this channel's config
	config_pos = (4 * (channel % 8));
    f6d8:	2207      	movs	r2, #7
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    f6da:	4081      	lsls	r1, r0
    f6dc:	0014      	movs	r4, r2

	eic_module->INTFLAG.reg = eic_mask;
    f6de:	6159      	str	r1, [r3, #20]
    f6e0:	4004      	ands	r4, r0
    f6e2:	08c3      	lsrs	r3, r0, #3
    f6e4:	4813      	ldr	r0, [pc, #76]	; (f734 <extIntToggle+0x7c>)
    f6e6:	009b      	lsls	r3, r3, #2
    f6e8:	4684      	mov	ip, r0
    f6ea:	4463      	add	r3, ip
	//  Current configuration and detection
	currentConfig = EIC_module->CONFIG[channel / 8].reg;
    f6ec:	69dd      	ldr	r5, [r3, #28]
	config_pos = (4 * (channel % 8));
    f6ee:	00a4      	lsls	r4, r4, #2

	currentDetection = (currentConfig>>config_pos) & CONFIG_SENSE_MASK;
    f6f0:	0028      	movs	r0, r5
    f6f2:	40e0      	lsrs	r0, r4

	//  Find current condition
	if(currentDetection==EXTINT_DETECT_LOW){
    f6f4:	4002      	ands	r2, r0
    f6f6:	2a05      	cmp	r2, #5
    f6f8:	d018      	beq.n	f72c <extIntToggle+0x74>
    f6fa:	2205      	movs	r2, #5
		newDetection = EXTINT_DETECT_HIGH;
		pinLevel = false;
	}else{
		newDetection = EXTINT_DETECT_LOW;
		pinLevel = true;
    f6fc:	2001      	movs	r0, #1
	}
	
	//  Set new configuration
	newConfig = currentConfig & (~(CONFIG_SENSE_MASK<<config_pos));
    f6fe:	2607      	movs	r6, #7
    f700:	40a6      	lsls	r6, r4
	newConfig = newConfig | (newDetection<<config_pos);
    f702:	40a2      	lsls	r2, r4
	
	EIC_module->CONFIG[channel / 8].reg = newConfig;

	//  Re-Enable
	EIC_module->CTRLA.reg |= EIC_CTRLA_ENABLE;
    f704:	2402      	movs	r4, #2
	newConfig = currentConfig & (~(CONFIG_SENSE_MASK<<config_pos));
    f706:	43b5      	bics	r5, r6
	newConfig = newConfig | (newDetection<<config_pos);
    f708:	432a      	orrs	r2, r5
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f70a:	2501      	movs	r5, #1
	EIC_module->CONFIG[channel / 8].reg = newConfig;
    f70c:	61da      	str	r2, [r3, #28]
	EIC_module->CTRLA.reg |= EIC_CTRLA_ENABLE;
    f70e:	4b09      	ldr	r3, [pc, #36]	; (f734 <extIntToggle+0x7c>)
    f710:	781a      	ldrb	r2, [r3, #0]
    f712:	4322      	orrs	r2, r4
    f714:	701a      	strb	r2, [r3, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    f716:	685a      	ldr	r2, [r3, #4]
    f718:	4214      	tst	r4, r2
    f71a:	d1fc      	bne.n	f716 <extIntToggle+0x5e>
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f71c:	685a      	ldr	r2, [r3, #4]
    f71e:	4215      	tst	r5, r2
    f720:	d1f9      	bne.n	f716 <extIntToggle+0x5e>
	eic_module->INTFLAG.reg = eic_mask;
    f722:	6159      	str	r1, [r3, #20]
	}
	
	extint_chan_clear_detected(channel);
	
	return pinLevel;
}
    f724:	bd70      	pop	{r4, r5, r6, pc}
	EIC_module->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    f726:	2300      	movs	r3, #0
    f728:	781b      	ldrb	r3, [r3, #0]
    f72a:	deff      	udf	#255	; 0xff
	if(currentDetection==EXTINT_DETECT_LOW){
    f72c:	3a01      	subs	r2, #1
		pinLevel = false;
    f72e:	2000      	movs	r0, #0
    f730:	e7e5      	b.n	f6fe <extIntToggle+0x46>
    f732:	46c0      	nop			; (mov r8, r8)
    f734:	40002400 	.word	0x40002400

0000f738 <extint_routine>:
	}
	
}

void extint_routine(void)
{
    f738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t current_channel;
	
	current_channel = extint_get_current_channel();
    f73a:	4b4d      	ldr	r3, [pc, #308]	; (f870 <extint_routine+0x138>)
    f73c:	4798      	blx	r3
	
	//return;
	//tempInput = input_none;
	switch (current_channel){
    f73e:	1f03      	subs	r3, r0, #4
    f740:	b2db      	uxtb	r3, r3
	current_channel = extint_get_current_channel();
    f742:	0004      	movs	r4, r0
	switch (current_channel){
    f744:	2b05      	cmp	r3, #5
    f746:	d85c      	bhi.n	f802 <extint_routine+0xca>
    f748:	4a4a      	ldr	r2, [pc, #296]	; (f874 <extint_routine+0x13c>)
    f74a:	009b      	lsls	r3, r3, #2
    f74c:	58d3      	ldr	r3, [r2, r3]
    f74e:	469f      	mov	pc, r3
					current_input = input_button2;
				}
			}
			break;
		case 9:
			if(!extIntToggle(current_channel)){
    f750:	2009      	movs	r0, #9
    f752:	4b49      	ldr	r3, [pc, #292]	; (f878 <extint_routine+0x140>)
    f754:	4798      	blx	r3
    f756:	1e05      	subs	r5, r0, #0
    f758:	d100      	bne.n	f75c <extint_routine+0x24>
    f75a:	e079      	b.n	f850 <extint_routine+0x118>
	uint32_t eic_mask   = (1UL << (channel % 32));
    f75c:	201f      	movs	r0, #31
    f75e:	2301      	movs	r3, #1
    f760:	4020      	ands	r0, r4
    f762:	4083      	lsls	r3, r0
	eic_module->INTFLAG.reg = eic_mask;
    f764:	4a45      	ldr	r2, [pc, #276]	; (f87c <extint_routine+0x144>)
    f766:	6153      	str	r3, [r2, #20]
	
	extint_chan_clear_detected(current_channel);
	//cpu_irq_enable();
	
	
}
    f768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(!extIntToggle(current_channel)){
    f76a:	2004      	movs	r0, #4
    f76c:	4b42      	ldr	r3, [pc, #264]	; (f878 <extint_routine+0x140>)
    f76e:	4798      	blx	r3
    f770:	2800      	cmp	r0, #0
    f772:	d1f3      	bne.n	f75c <extint_routine+0x24>
	current_ms = getCurrentMs();
    f774:	4b42      	ldr	r3, [pc, #264]	; (f880 <extint_routine+0x148>)
    f776:	4798      	blx	r3
	if((current_ms-last_ms)>DEBOUNCE_MS){
    f778:	4a42      	ldr	r2, [pc, #264]	; (f884 <extint_routine+0x14c>)
    f77a:	6813      	ldr	r3, [r2, #0]
    f77c:	1ac3      	subs	r3, r0, r3
    f77e:	2b96      	cmp	r3, #150	; 0x96
    f780:	d9ec      	bls.n	f75c <extint_routine+0x24>
		last_ms = current_ms;
    f782:	6010      	str	r0, [r2, #0]
					current_input = input_button2;
    f784:	2201      	movs	r2, #1
    f786:	4b40      	ldr	r3, [pc, #256]	; (f888 <extint_routine+0x150>)
    f788:	601a      	str	r2, [r3, #0]
    f78a:	e7e7      	b.n	f75c <extint_routine+0x24>
			if(externalButtonRoutine(!extIntToggle(current_channel))){
    f78c:	4b3a      	ldr	r3, [pc, #232]	; (f878 <extint_routine+0x140>)
    f78e:	2005      	movs	r0, #5
    f790:	4798      	blx	r3
    f792:	2301      	movs	r3, #1
	// When in powerdown state, 3 quick clicks provides powerup input
	static uint32_t last_time_ms;
	uint32_t current_time_ms;
	
	static uint8_t click_counter=0;
	current_time_ms = getCurrentMs();
    f794:	4e3a      	ldr	r6, [pc, #232]	; (f880 <extint_routine+0x148>)
			if(externalButtonRoutine(!extIntToggle(current_channel))){
    f796:	4058      	eors	r0, r3
    f798:	b2c5      	uxtb	r5, r0
	current_time_ms = getCurrentMs();
    f79a:	47b0      	blx	r6
	
	switch (current_state){
    f79c:	4b3b      	ldr	r3, [pc, #236]	; (f88c <extint_routine+0x154>)
			if(externalButtonRoutine(!extIntToggle(current_channel))){
    f79e:	2701      	movs	r7, #1
	switch (current_state){
    f7a0:	681b      	ldr	r3, [r3, #0]
    f7a2:	2b04      	cmp	r3, #4
    f7a4:	d032      	beq.n	f80c <extint_routine+0xd4>
    f7a6:	2b05      	cmp	r3, #5
    f7a8:	d0d8      	beq.n	f75c <extint_routine+0x24>
		default:
			if (buttonPressed){
				//  Button Pressed
				
				//  Trigger on if button is pressed
				if(!buttonE_triggered){
    f7aa:	4b39      	ldr	r3, [pc, #228]	; (f890 <extint_routine+0x158>)
			if (buttonPressed){
    f7ac:	2d00      	cmp	r5, #0
    f7ae:	d04b      	beq.n	f848 <extint_routine+0x110>
				if(!buttonE_triggered){
    f7b0:	781a      	ldrb	r2, [r3, #0]
    f7b2:	2a00      	cmp	r2, #0
    f7b4:	d1d2      	bne.n	f75c <extint_routine+0x24>
					buttonE_triggered=true;
    f7b6:	701f      	strb	r7, [r3, #0]
						//trigger timer
					timerStartExt();
    f7b8:	4b36      	ldr	r3, [pc, #216]	; (f894 <extint_routine+0x15c>)
    f7ba:	4798      	blx	r3
    f7bc:	e7ce      	b.n	f75c <extint_routine+0x24>
			if(!extIntToggle(current_channel)){
    f7be:	2006      	movs	r0, #6
    f7c0:	4b2d      	ldr	r3, [pc, #180]	; (f878 <extint_routine+0x140>)
    f7c2:	4798      	blx	r3
    f7c4:	2800      	cmp	r0, #0
    f7c6:	d1c9      	bne.n	f75c <extint_routine+0x24>
	current_ms = getCurrentMs();
    f7c8:	4b2d      	ldr	r3, [pc, #180]	; (f880 <extint_routine+0x148>)
    f7ca:	4798      	blx	r3
	if((current_ms-last_ms)>DEBOUNCE_MS){
    f7cc:	4a2d      	ldr	r2, [pc, #180]	; (f884 <extint_routine+0x14c>)
    f7ce:	6813      	ldr	r3, [r2, #0]
    f7d0:	1ac3      	subs	r3, r0, r3
    f7d2:	2b96      	cmp	r3, #150	; 0x96
    f7d4:	d9c2      	bls.n	f75c <extint_routine+0x24>
		last_ms = current_ms;
    f7d6:	6010      	str	r0, [r2, #0]
					current_input = input_button3;
    f7d8:	2202      	movs	r2, #2
    f7da:	4b2b      	ldr	r3, [pc, #172]	; (f888 <extint_routine+0x150>)
    f7dc:	601a      	str	r2, [r3, #0]
    f7de:	e7bd      	b.n	f75c <extint_routine+0x24>
			if(!extIntToggle(current_channel)){
    f7e0:	2007      	movs	r0, #7
    f7e2:	4b25      	ldr	r3, [pc, #148]	; (f878 <extint_routine+0x140>)
    f7e4:	4798      	blx	r3
    f7e6:	2800      	cmp	r0, #0
    f7e8:	d1b8      	bne.n	f75c <extint_routine+0x24>
	current_ms = getCurrentMs();
    f7ea:	4b25      	ldr	r3, [pc, #148]	; (f880 <extint_routine+0x148>)
    f7ec:	4798      	blx	r3
	if((current_ms-last_ms)>DEBOUNCE_MS){
    f7ee:	4a25      	ldr	r2, [pc, #148]	; (f884 <extint_routine+0x14c>)
    f7f0:	6813      	ldr	r3, [r2, #0]
    f7f2:	1ac3      	subs	r3, r0, r3
    f7f4:	2b96      	cmp	r3, #150	; 0x96
    f7f6:	d9b1      	bls.n	f75c <extint_routine+0x24>
		last_ms = current_ms;
    f7f8:	6010      	str	r0, [r2, #0]
					current_input = input_button4;
    f7fa:	2203      	movs	r2, #3
    f7fc:	4b22      	ldr	r3, [pc, #136]	; (f888 <extint_routine+0x150>)
    f7fe:	601a      	str	r2, [r3, #0]
    f800:	e7ac      	b.n	f75c <extint_routine+0x24>
	if (eic_index < EIC_INST_NUM) {
    f802:	2c1f      	cmp	r4, #31
    f804:	d9aa      	bls.n	f75c <extint_routine+0x24>
	eic_module->INTFLAG.reg = eic_mask;
    f806:	2300      	movs	r3, #0
    f808:	615b      	str	r3, [r3, #20]
    f80a:	deff      	udf	#255	; 0xff
			if (buttonPressed){
    f80c:	2d00      	cmp	r5, #0
    f80e:	d0a5      	beq.n	f75c <extint_routine+0x24>
				if( (current_time_ms-last_time_ms)<QUICK3_MS){
    f810:	4a21      	ldr	r2, [pc, #132]	; (f898 <extint_routine+0x160>)
    f812:	4922      	ldr	r1, [pc, #136]	; (f89c <extint_routine+0x164>)
    f814:	6813      	ldr	r3, [r2, #0]
    f816:	1ac3      	subs	r3, r0, r3
    f818:	428b      	cmp	r3, r1
    f81a:	d825      	bhi.n	f868 <extint_routine+0x130>
					click_counter++;
    f81c:	4920      	ldr	r1, [pc, #128]	; (f8a0 <extint_routine+0x168>)
				last_time_ms = current_time_ms;
    f81e:	6010      	str	r0, [r2, #0]
					click_counter++;
    f820:	780b      	ldrb	r3, [r1, #0]
    f822:	3301      	adds	r3, #1
    f824:	b2db      	uxtb	r3, r3
    f826:	700b      	strb	r3, [r1, #0]
				if (click_counter>=3){
    f828:	2b02      	cmp	r3, #2
    f82a:	d997      	bls.n	f75c <extint_routine+0x24>
					click_counter = 0;
    f82c:	2300      	movs	r3, #0
    f82e:	700b      	strb	r3, [r1, #0]
	current_ms = getCurrentMs();
    f830:	47b0      	blx	r6
	if((current_ms-last_ms)>DEBOUNCE_MS){
    f832:	4a14      	ldr	r2, [pc, #80]	; (f884 <extint_routine+0x14c>)
    f834:	6813      	ldr	r3, [r2, #0]
    f836:	1ac3      	subs	r3, r0, r3
    f838:	2b96      	cmp	r3, #150	; 0x96
    f83a:	d800      	bhi.n	f83e <extint_routine+0x106>
    f83c:	e78e      	b.n	f75c <extint_routine+0x24>
		last_ms = current_ms;
    f83e:	6010      	str	r0, [r2, #0]
					current_input = input_buttonE;
    f840:	2204      	movs	r2, #4
    f842:	4b11      	ldr	r3, [pc, #68]	; (f888 <extint_routine+0x150>)
    f844:	601a      	str	r2, [r3, #0]
    f846:	e789      	b.n	f75c <extint_routine+0x24>
				}
				return false;
			}else{
				//  Released in a short amount of time, normal input
				buttonE_triggered=false;
    f848:	701d      	strb	r5, [r3, #0]
				timerStopExt();
    f84a:	4b16      	ldr	r3, [pc, #88]	; (f8a4 <extint_routine+0x16c>)
    f84c:	4798      	blx	r3
    f84e:	e7ef      	b.n	f830 <extint_routine+0xf8>
	current_ms = getCurrentMs();
    f850:	4b0b      	ldr	r3, [pc, #44]	; (f880 <extint_routine+0x148>)
    f852:	4798      	blx	r3
	if((current_ms-last_ms)>DEBOUNCE_MS){
    f854:	4a0b      	ldr	r2, [pc, #44]	; (f884 <extint_routine+0x14c>)
    f856:	6813      	ldr	r3, [r2, #0]
    f858:	1ac3      	subs	r3, r0, r3
    f85a:	2b96      	cmp	r3, #150	; 0x96
    f85c:	d800      	bhi.n	f860 <extint_routine+0x128>
    f85e:	e77d      	b.n	f75c <extint_routine+0x24>
					current_input = input_button1;
    f860:	4b09      	ldr	r3, [pc, #36]	; (f888 <extint_routine+0x150>)
		last_ms = current_ms;
    f862:	6010      	str	r0, [r2, #0]
					current_input = input_button1;
    f864:	601d      	str	r5, [r3, #0]
    f866:	e779      	b.n	f75c <extint_routine+0x24>
    f868:	4b0d      	ldr	r3, [pc, #52]	; (f8a0 <extint_routine+0x168>)
				last_time_ms = current_time_ms;
    f86a:	6010      	str	r0, [r2, #0]
    f86c:	701f      	strb	r7, [r3, #0]
    f86e:	e775      	b.n	f75c <extint_routine+0x24>
    f870:	000183f1 	.word	0x000183f1
    f874:	0002db08 	.word	0x0002db08
    f878:	0000f6b9 	.word	0x0000f6b9
    f87c:	40002400 	.word	0x40002400
    f880:	00016df9 	.word	0x00016df9
    f884:	20000cac 	.word	0x20000cac
    f888:	20003d24 	.word	0x20003d24
    f88c:	20002630 	.word	0x20002630
    f890:	20000d51 	.word	0x20000d51
    f894:	00016e19 	.word	0x00016e19
    f898:	20000cb0 	.word	0x20000cb0
    f89c:	000003e7 	.word	0x000003e7
    f8a0:	20000cab 	.word	0x20000cab
    f8a4:	00016e45 	.word	0x00016e45

0000f8a8 <buzzOn>:





void buzzOn(enum TONE tone, uint32_t buzzMs){
    f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8aa:	46d6      	mov	lr, sl
    f8ac:	4646      	mov	r6, r8
    f8ae:	464f      	mov	r7, r9
    f8b0:	000c      	movs	r4, r1
    f8b2:	b5c0      	push	{r6, r7, lr}
	uint32_t period;// = 220;//us
	//uint32_t period = 150;//us
	uint32_t maxCycles;// = 4000;
	
	//  For some reason, clock runs half expected speed
	period = (1000000)/tone;
    f8b4:	0001      	movs	r1, r0
    f8b6:	4b12      	ldr	r3, [pc, #72]	; (f900 <buzzOn+0x58>)
    f8b8:	4812      	ldr	r0, [pc, #72]	; (f904 <buzzOn+0x5c>)
    f8ba:	4798      	blx	r3
    f8bc:	0005      	movs	r5, r0
	maxCycles = buzzMs*1000/(2*period);
    f8be:	20fa      	movs	r0, #250	; 0xfa
    f8c0:	0080      	lsls	r0, r0, #2
    f8c2:	4360      	muls	r0, r4
    f8c4:	0069      	lsls	r1, r5, #1
    f8c6:	4b10      	ldr	r3, [pc, #64]	; (f908 <buzzOn+0x60>)
    f8c8:	4798      	blx	r3
    f8ca:	4680      	mov	r8, r0
	
	uint32_t cycles;
	for (cycles=0;cycles<maxCycles;cycles++){
    f8cc:	2800      	cmp	r0, #0
    f8ce:	d011      	beq.n	f8f4 <buzzOn+0x4c>
    f8d0:	2308      	movs	r3, #8
    f8d2:	2400      	movs	r4, #0
    f8d4:	469a      	mov	sl, r3
    f8d6:	4699      	mov	r9, r3
    f8d8:	4f0c      	ldr	r7, [pc, #48]	; (f90c <buzzOn+0x64>)
    f8da:	4e0d      	ldr	r6, [pc, #52]	; (f910 <buzzOn+0x68>)
    f8dc:	086d      	lsrs	r5, r5, #1
    f8de:	464b      	mov	r3, r9
		ioport_set_pin_level(BuzzerPin,true);
		delay_cycles_us(period/2);
    f8e0:	0028      	movs	r0, r5
    f8e2:	61b3      	str	r3, [r6, #24]
    f8e4:	47b8      	blx	r7
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    f8e6:	4653      	mov	r3, sl
		ioport_set_pin_level(BuzzerPin,false);
		delay_cycles_us(period/2);
    f8e8:	0028      	movs	r0, r5
    f8ea:	6173      	str	r3, [r6, #20]
	for (cycles=0;cycles<maxCycles;cycles++){
    f8ec:	3401      	adds	r4, #1
		delay_cycles_us(period/2);
    f8ee:	47b8      	blx	r7
	for (cycles=0;cycles<maxCycles;cycles++){
    f8f0:	45a0      	cmp	r8, r4
    f8f2:	d1f4      	bne.n	f8de <buzzOn+0x36>
		
	}
	
	
};
    f8f4:	bc1c      	pop	{r2, r3, r4}
    f8f6:	4690      	mov	r8, r2
    f8f8:	4699      	mov	r9, r3
    f8fa:	46a2      	mov	sl, r4
    f8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8fe:	46c0      	nop			; (mov r8, r8)
    f900:	00025a51 	.word	0x00025a51
    f904:	000f4240 	.word	0x000f4240
    f908:	0002593d 	.word	0x0002593d
    f90c:	0001f4d9 	.word	0x0001f4d9
    f910:	40002880 	.word	0x40002880

0000f914 <mainClockPowerdown>:
void mainClockPowerdown(void){
	struct system_gclk_gen_config gclk_conf; 
	
	//  Set GCLK 0 to use ULP32k
	system_gclk_gen_get_config_defaults(&gclk_conf);                  \
	gclk_conf.source_clock    = SYSTEM_CLOCK_SOURCE_ULP32K;   \
    f914:	2303      	movs	r3, #3
void mainClockPowerdown(void){
    f916:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    f918:	2400      	movs	r4, #0
	config->division_factor    = 1;
    f91a:	2501      	movs	r5, #1
    f91c:	b085      	sub	sp, #20
    f91e:	a901      	add	r1, sp, #4
	gclk_conf.source_clock    = SYSTEM_CLOCK_SOURCE_ULP32K;   \
    f920:	700b      	strb	r3, [r1, #0]
	gclk_conf.division_factor = 1;      \
	gclk_conf.run_in_standby  = true; \
	gclk_conf.output_enable   = false;  \
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);       \
    f922:	2000      	movs	r0, #0
    f924:	4b10      	ldr	r3, [pc, #64]	; (f968 <mainClockPowerdown+0x54>)
    f926:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    f928:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    f92a:	724c      	strb	r4, [r1, #9]
	gclk_conf.run_in_standby  = true; \
    f92c:	720d      	strb	r5, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);       \
    f92e:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_0);   
    f930:	4b0e      	ldr	r3, [pc, #56]	; (f96c <mainClockPowerdown+0x58>)
    f932:	2000      	movs	r0, #0
    f934:	4798      	blx	r3
	
	//  Turn off DFLL	
	OSCCTRL->DFLLCTRL.reg = OSCCTRL->DFLLCTRL.reg & (!dfllctrEnable);
    f936:	4b0e      	ldr	r3, [pc, #56]	; (f970 <mainClockPowerdown+0x5c>)
    f938:	2100      	movs	r1, #0
    f93a:	8b1a      	ldrh	r2, [r3, #24]
    f93c:	831c      	strh	r4, [r3, #24]
	
	//  Turn off 16MHZ oscillator
	//  Should already be turned off
	OSCCTRL->OSC16MCTRL.reg = OSCCTRL->OSC16MCTRL.reg &(!0x02);
    f93e:	7d1a      	ldrb	r2, [r3, #20]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    f940:	2280      	movs	r2, #128	; 0x80
    f942:	7519      	strb	r1, [r3, #20]
    f944:	05d2      	lsls	r2, r2, #23
    f946:	7893      	ldrb	r3, [r2, #2]
    f948:	2b00      	cmp	r3, #0
    f94a:	d008      	beq.n	f95e <mainClockPowerdown+0x4a>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    f94c:	7893      	ldrb	r3, [r2, #2]
    f94e:	b25b      	sxtb	r3, r3
    f950:	2b00      	cmp	r3, #0
    f952:	db04      	blt.n	f95e <mainClockPowerdown+0x4a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    f954:	7195      	strb	r5, [r2, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    f956:	7091      	strb	r1, [r2, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    f958:	7993      	ldrb	r3, [r2, #6]
    f95a:	2b00      	cmp	r3, #0
    f95c:	d0fc      	beq.n	f958 <mainClockPowerdown+0x44>
	
	//  Set performance level
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	
	//  Re-initialize delay with new main clock
	delay_init();
    f95e:	4b05      	ldr	r3, [pc, #20]	; (f974 <mainClockPowerdown+0x60>)
    f960:	4798      	blx	r3
}
    f962:	b005      	add	sp, #20
    f964:	bd30      	pop	{r4, r5, pc}
    f966:	46c0      	nop			; (mov r8, r8)
    f968:	0001fabd 	.word	0x0001fabd
    f96c:	0001fb69 	.word	0x0001fb69
    f970:	40000c00 	.word	0x40000c00
    f974:	0001f499 	.word	0x0001f499

0000f978 <DFLL_Enable>:
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    f978:	2380      	movs	r3, #128	; 0x80
	
	
}


void DFLL_Enable(void){
    f97a:	b510      	push	{r4, lr}
    f97c:	05db      	lsls	r3, r3, #23
    f97e:	789a      	ldrb	r2, [r3, #2]
    f980:	b086      	sub	sp, #24
    f982:	2a02      	cmp	r2, #2
    f984:	d00a      	beq.n	f99c <DFLL_Enable+0x24>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    f986:	789a      	ldrb	r2, [r3, #2]
    f988:	b252      	sxtb	r2, r2
    f98a:	2a00      	cmp	r2, #0
    f98c:	db06      	blt.n	f99c <DFLL_Enable+0x24>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    f98e:	2201      	movs	r2, #1
    f990:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    f992:	3201      	adds	r2, #1
    f994:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    f996:	799a      	ldrb	r2, [r3, #6]
    f998:	2a00      	cmp	r2, #0
    f99a:	d0fc      	beq.n	f996 <DFLL_Enable+0x1e>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    f99c:	2300      	movs	r3, #0
	config->fine_value      = 0xff / 4; /* Midpoint */
    f99e:	223f      	movs	r2, #63	; 0x3f
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    f9a0:	a801      	add	r0, sp, #4
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    f9a2:	9302      	str	r3, [sp, #8]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    f9a4:	7203      	strb	r3, [r0, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    f9a6:	7243      	strb	r3, [r0, #9]
	config->run_in_stanby   = false;
    f9a8:	7083      	strb	r3, [r0, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    f9aa:	8182      	strh	r2, [r0, #12]
	
		struct system_clock_source_dfll_config dfll_conf;
		system_clock_source_dfll_get_config_defaults(&dfll_conf);
	
		dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
		dfll_conf.on_demand      = false;
    f9ac:	7043      	strb	r3, [r0, #1]
		dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    f9ae:	3a3b      	subs	r2, #59	; 0x3b
		// Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
		// in DFLL.COARSE helps to output a frequency close to 48 MHz.
	#define NVM_DFLL_COARSE_POS    26 // DFLL48M Coarse calibration value bit position.
	#define NVM_DFLL_COARSE_SIZE   6  // DFLL48M Coarse calibration value bit size.

		uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    f9b0:	4b11      	ldr	r3, [pc, #68]	; (f9f8 <DFLL_Enable+0x80>)
		dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    f9b2:	7002      	strb	r2, [r0, #0]
		uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    f9b4:	681b      	ldr	r3, [r3, #0]
    f9b6:	0e9b      	lsrs	r3, r3, #26
				+ (NVM_DFLL_COARSE_POS / 32))
				>> (NVM_DFLL_COARSE_POS % 32))
				& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
		// In some revision chip, the Calibration value is not correct 
		if (coarse == 0x3f) {
    f9b8:	2b3f      	cmp	r3, #63	; 0x3f
    f9ba:	d01a      	beq.n	f9f2 <DFLL_Enable+0x7a>
			coarse = 0x1f;
		}

		dfll_conf.coarse_value = coarse;
    f9bc:	7283      	strb	r3, [r0, #10]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
	#  endif
		
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;

		dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    f9be:	2307      	movs	r3, #7
    f9c0:	7383      	strb	r3, [r0, #14]
		dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    f9c2:	4b0e      	ldr	r3, [pc, #56]	; (f9fc <DFLL_Enable+0x84>)
    f9c4:	9305      	str	r3, [sp, #20]


		system_clock_source_dfll_set_config(&dfll_conf);
    f9c6:	4b0e      	ldr	r3, [pc, #56]	; (fa00 <DFLL_Enable+0x88>)
    f9c8:	4798      	blx	r3
	
	
		//  Set up clock channel for closed loop
		struct system_gclk_chan_config dfll_gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    f9ca:	466a      	mov	r2, sp
    f9cc:	2302      	movs	r3, #2
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    f9ce:	4669      	mov	r1, sp
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    f9d0:	7013      	strb	r3, [r2, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    f9d2:	2000      	movs	r0, #0
    f9d4:	4b0b      	ldr	r3, [pc, #44]	; (fa04 <DFLL_Enable+0x8c>)
    f9d6:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    f9d8:	2000      	movs	r0, #0
    f9da:	4b0b      	ldr	r3, [pc, #44]	; (fa08 <DFLL_Enable+0x90>)
    f9dc:	4798      	blx	r3
	
		//  Turn on closed loop mode	
		system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    f9de:	2007      	movs	r0, #7
    f9e0:	4b0a      	ldr	r3, [pc, #40]	; (fa0c <DFLL_Enable+0x94>)
    f9e2:	4798      	blx	r3
    f9e4:	4c0a      	ldr	r4, [pc, #40]	; (fa10 <DFLL_Enable+0x98>)
		while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    f9e6:	2007      	movs	r0, #7
    f9e8:	47a0      	blx	r4
    f9ea:	2800      	cmp	r0, #0
    f9ec:	d0fb      	beq.n	f9e6 <DFLL_Enable+0x6e>
		if (CONF_CLOCK_DFLL_ON_DEMAND) {
			OSCCTRL->DFLLCTRL.bit.ONDEMAND = 1;
		}
	
}
    f9ee:	b006      	add	sp, #24
    f9f0:	bd10      	pop	{r4, pc}
		if (coarse == 0x3f) {
    f9f2:	3b20      	subs	r3, #32
    f9f4:	e7e2      	b.n	f9bc <DFLL_Enable+0x44>
    f9f6:	46c0      	nop			; (mov r8, r8)
    f9f8:	00806020 	.word	0x00806020
    f9fc:	05b8003f 	.word	0x05b8003f
    fa00:	0001f689 	.word	0x0001f689
    fa04:	0001fc15 	.word	0x0001fc15
    fa08:	0001fc55 	.word	0x0001fc55
    fa0c:	0001f709 	.word	0x0001f709
    fa10:	0001f845 	.word	0x0001f845

0000fa14 <mainClockPowerup>:
void mainClockPowerup(void){
    fa14:	b500      	push	{lr}
	if (!(OSCCTRL->DFLLCTRL.reg & dfllctrEnable)){
    fa16:	4b0d      	ldr	r3, [pc, #52]	; (fa4c <mainClockPowerup+0x38>)
void mainClockPowerup(void){
    fa18:	b085      	sub	sp, #20
	if (!(OSCCTRL->DFLLCTRL.reg & dfllctrEnable)){
    fa1a:	8b1b      	ldrh	r3, [r3, #24]
    fa1c:	079b      	lsls	r3, r3, #30
    fa1e:	d401      	bmi.n	fa24 <mainClockPowerup+0x10>
		DFLL_Enable();
    fa20:	4b0b      	ldr	r3, [pc, #44]	; (fa50 <mainClockPowerup+0x3c>)
    fa22:	4798      	blx	r3
	config->division_factor    = 1;
    fa24:	2301      	movs	r3, #1
    fa26:	a901      	add	r1, sp, #4
    fa28:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    fa2a:	2300      	movs	r3, #0
    fa2c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    fa2e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    fa30:	724b      	strb	r3, [r1, #9]
	gclk_conf.source_clock    = CONF_CLOCK_GCLK_0_CLOCK_SOURCE;   \
    fa32:	3307      	adds	r3, #7
    fa34:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);       \
    fa36:	2000      	movs	r0, #0
    fa38:	4b06      	ldr	r3, [pc, #24]	; (fa54 <mainClockPowerup+0x40>)
    fa3a:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_0);                       \
    fa3c:	2000      	movs	r0, #0
    fa3e:	4b06      	ldr	r3, [pc, #24]	; (fa58 <mainClockPowerup+0x44>)
    fa40:	4798      	blx	r3
	delay_init();
    fa42:	4b06      	ldr	r3, [pc, #24]	; (fa5c <mainClockPowerup+0x48>)
    fa44:	4798      	blx	r3
}
    fa46:	b005      	add	sp, #20
    fa48:	bd00      	pop	{pc}
    fa4a:	46c0      	nop			; (mov r8, r8)
    fa4c:	40000c00 	.word	0x40000c00
    fa50:	0000f979 	.word	0x0000f979
    fa54:	0001fabd 	.word	0x0001fabd
    fa58:	0001fb69 	.word	0x0001fb69
    fa5c:	0001f499 	.word	0x0001f499

0000fa60 <get_time>:
//  External Clock Functions *************************************************************

void get_time(void){
	uint8_t temp_buf[20];
	int16_t temp_var16;
	temp_buf[0]=0x00;
    fa60:	2300      	movs	r3, #0
void get_time(void){
    fa62:	b530      	push	{r4, r5, lr}
    fa64:	b087      	sub	sp, #28
	temp_buf[0]=0x00;
    fa66:	ac01      	add	r4, sp, #4
    fa68:	7023      	strb	r3, [r4, #0]
	i2c_read_write(readp, rtc_add, temp_buf, 19);
    fa6a:	0022      	movs	r2, r4
    fa6c:	3313      	adds	r3, #19
    fa6e:	2168      	movs	r1, #104	; 0x68
    fa70:	2000      	movs	r0, #0
    fa72:	4d26      	ldr	r5, [pc, #152]	; (fb0c <get_time+0xac>)
    fa74:	47a8      	blx	r5
	//Parse Data
	current_time.seconds=	bcd2int(temp_buf[0x01]);
    fa76:	7862      	ldrb	r2, [r4, #1]
    fa78:	4d25      	ldr	r5, [pc, #148]	; (fb10 <get_time+0xb0>)

uint32_t bcd2int(uint8_t bcd_var){
	uint8_t dec;
	dec = bcd_var & 0xF0;
	dec = dec>>4;
	dec = dec*10;
    fa7a:	0913      	lsrs	r3, r2, #4
    fa7c:	0099      	lsls	r1, r3, #2
    fa7e:	185b      	adds	r3, r3, r1
	dec = dec + (bcd_var & 0x0F);
    fa80:	210f      	movs	r1, #15
	dec = dec*10;
    fa82:	005b      	lsls	r3, r3, #1
	dec = dec + (bcd_var & 0x0F);
    fa84:	400a      	ands	r2, r1
    fa86:	189b      	adds	r3, r3, r2
	current_time.seconds=	bcd2int(temp_buf[0x01]);
    fa88:	71ab      	strb	r3, [r5, #6]
	current_time.minutes=	bcd2int(temp_buf[0x02]);
    fa8a:	78a2      	ldrb	r2, [r4, #2]
	dec = dec*10;
    fa8c:	0913      	lsrs	r3, r2, #4
    fa8e:	0098      	lsls	r0, r3, #2
    fa90:	181b      	adds	r3, r3, r0
	dec = dec + (bcd_var & 0x0F);
    fa92:	400a      	ands	r2, r1
	dec = dec*10;
    fa94:	005b      	lsls	r3, r3, #1
	dec = dec + (bcd_var & 0x0F);
    fa96:	189b      	adds	r3, r3, r2
	current_time.minutes=	bcd2int(temp_buf[0x02]);
    fa98:	716b      	strb	r3, [r5, #5]
	current_time.hours=		bcd2int(temp_buf[0x03]);
    fa9a:	78e2      	ldrb	r2, [r4, #3]
	dec = dec*10;
    fa9c:	0913      	lsrs	r3, r2, #4
    fa9e:	0098      	lsls	r0, r3, #2
    faa0:	181b      	adds	r3, r3, r0
	dec = dec + (bcd_var & 0x0F);
    faa2:	400a      	ands	r2, r1
	dec = dec*10;
    faa4:	005b      	lsls	r3, r3, #1
	dec = dec + (bcd_var & 0x0F);
    faa6:	189b      	adds	r3, r3, r2
	current_time.hours=		bcd2int(temp_buf[0x03]);
    faa8:	712b      	strb	r3, [r5, #4]
	current_time.day=		bcd2int(temp_buf[0x05]);
    faaa:	7962      	ldrb	r2, [r4, #5]
	dec = dec*10;
    faac:	0913      	lsrs	r3, r2, #4
    faae:	0098      	lsls	r0, r3, #2
    fab0:	181b      	adds	r3, r3, r0
	dec = dec + (bcd_var & 0x0F);
    fab2:	400a      	ands	r2, r1
	dec = dec*10;
    fab4:	005b      	lsls	r3, r3, #1
	dec = dec + (bcd_var & 0x0F);
    fab6:	189b      	adds	r3, r3, r2
	current_time.day=		bcd2int(temp_buf[0x05]);
    fab8:	70eb      	strb	r3, [r5, #3]
	current_time.month=		bcd2int(temp_buf[0x06] & 0x7F);//mask out first "century" bit
    faba:	79a3      	ldrb	r3, [r4, #6]
	dec = dec*10;
    fabc:	065a      	lsls	r2, r3, #25
    fabe:	0f52      	lsrs	r2, r2, #29
    fac0:	0090      	lsls	r0, r2, #2
    fac2:	1812      	adds	r2, r2, r0
	dec = dec + (bcd_var & 0x0F);
    fac4:	400b      	ands	r3, r1
	dec = dec*10;
    fac6:	0052      	lsls	r2, r2, #1
	dec = dec + (bcd_var & 0x0F);
    fac8:	18d2      	adds	r2, r2, r3
	current_time.month=		bcd2int(temp_buf[0x06] & 0x7F);//mask out first "century" bit
    faca:	70aa      	strb	r2, [r5, #2]
	current_time.year=		bcd2int(temp_buf[0x07])+2000;
    facc:	79e2      	ldrb	r2, [r4, #7]
	dec = dec + (bcd_var & 0x0F);
    face:	4011      	ands	r1, r2
	dec = dec*10;
    fad0:	0913      	lsrs	r3, r2, #4
	current_time.year=		bcd2int(temp_buf[0x07])+2000;
    fad2:	22fa      	movs	r2, #250	; 0xfa
    fad4:	00d2      	lsls	r2, r2, #3
    fad6:	4694      	mov	ip, r2
	dec = dec*10;
    fad8:	0098      	lsls	r0, r3, #2
    fada:	181b      	adds	r3, r3, r0
    fadc:	005b      	lsls	r3, r3, #1
	dec = dec + (bcd_var & 0x0F);
    fade:	185b      	adds	r3, r3, r1
	current_time.year=		bcd2int(temp_buf[0x07])+2000;
    fae0:	b2db      	uxtb	r3, r3
    fae2:	4463      	add	r3, ip
    fae4:	802b      	strh	r3, [r5, #0]
	current_time.centiseconds = getCentiSeconds();
    fae6:	4b0b      	ldr	r3, [pc, #44]	; (fb14 <get_time+0xb4>)
    fae8:	4798      	blx	r3
    faea:	71e8      	strb	r0, [r5, #7]
	temp_var16=temp_var16<<8;
    faec:	7ca3      	ldrb	r3, [r4, #18]
	temp_var16=temp_var16+temp_buf[0x13];
    faee:	7ce0      	ldrb	r0, [r4, #19]
	temp_var16=temp_var16<<8;
    faf0:	021b      	lsls	r3, r3, #8
	temp_var16=temp_var16+temp_buf[0x13];
    faf2:	18c0      	adds	r0, r0, r3
	currentTempC=temp_var16;
    faf4:	b200      	sxth	r0, r0
    faf6:	4b08      	ldr	r3, [pc, #32]	; (fb18 <get_time+0xb8>)
    faf8:	4798      	blx	r3
	currentTempC=currentTempC/256;
    fafa:	21ee      	movs	r1, #238	; 0xee
    fafc:	4b07      	ldr	r3, [pc, #28]	; (fb1c <get_time+0xbc>)
    fafe:	0589      	lsls	r1, r1, #22
    fb00:	4798      	blx	r3
    fb02:	4b07      	ldr	r3, [pc, #28]	; (fb20 <get_time+0xc0>)
    fb04:	6018      	str	r0, [r3, #0]
}
    fb06:	b007      	add	sp, #28
    fb08:	bd30      	pop	{r4, r5, pc}
    fb0a:	46c0      	nop			; (mov r8, r8)
    fb0c:	0001c3d9 	.word	0x0001c3d9
    fb10:	20002628 	.word	0x20002628
    fb14:	00016dc5 	.word	0x00016dc5
    fb18:	00026b11 	.word	0x00026b11
    fb1c:	00026559 	.word	0x00026559
    fb20:	20002174 	.word	0x20002174

0000fb24 <set_time>:
void set_time(struct TIME *temp_time){
    fb24:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb26:	464e      	mov	r6, r9
    fb28:	4645      	mov	r5, r8
    fb2a:	46de      	mov	lr, fp
    fb2c:	4657      	mov	r7, sl
    fb2e:	b5e0      	push	{r5, r6, r7, lr}
    fb30:	b087      	sub	sp, #28
	temp_buf[0]=0x00;
    fb32:	2300      	movs	r3, #0
    fb34:	466a      	mov	r2, sp
    fb36:	7113      	strb	r3, [r2, #4]
	temp_buf[0x01]= int2bcd(temp_time->seconds);
    fb38:	7985      	ldrb	r5, [r0, #6]
void set_time(struct TIME *temp_time){
    fb3a:	4681      	mov	r9, r0
	while (binaryInput > 0) {
    fb3c:	2400      	movs	r4, #0
    fb3e:	2d00      	cmp	r5, #0
    fb40:	d017      	beq.n	fb72 <set_time+0x4e>
    fb42:	2300      	movs	r3, #0
    fb44:	469b      	mov	fp, r3
    fb46:	4f62      	ldr	r7, [pc, #392]	; (fcd0 <set_time+0x1ac>)
    fb48:	4e62      	ldr	r6, [pc, #392]	; (fcd4 <set_time+0x1b0>)
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fb4a:	465b      	mov	r3, fp
    fb4c:	3301      	adds	r3, #1
    fb4e:	b2db      	uxtb	r3, r3
    fb50:	0028      	movs	r0, r5
    fb52:	210a      	movs	r1, #10
    fb54:	4698      	mov	r8, r3
    fb56:	47b8      	blx	r7
    fb58:	465b      	mov	r3, fp
    fb5a:	b2c9      	uxtb	r1, r1
    fb5c:	009b      	lsls	r3, r3, #2
    fb5e:	4099      	lsls	r1, r3
		binaryInput /= 10;
    fb60:	0028      	movs	r0, r5
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fb62:	430c      	orrs	r4, r1
		binaryInput /= 10;
    fb64:	210a      	movs	r1, #10
    fb66:	47b0      	blx	r6
    fb68:	b2c5      	uxtb	r5, r0
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fb6a:	b2e4      	uxtb	r4, r4
    fb6c:	46c3      	mov	fp, r8
	while (binaryInput > 0) {
    fb6e:	2d00      	cmp	r5, #0
    fb70:	d1eb      	bne.n	fb4a <set_time+0x26>
	temp_buf[0x01]= int2bcd(temp_time->seconds);
    fb72:	466b      	mov	r3, sp
    fb74:	715c      	strb	r4, [r3, #5]
	temp_buf[0x02]= int2bcd(temp_time->minutes);
    fb76:	464b      	mov	r3, r9
    fb78:	795d      	ldrb	r5, [r3, #5]
	while (binaryInput > 0) {
    fb7a:	2400      	movs	r4, #0
    fb7c:	2d00      	cmp	r5, #0
    fb7e:	d017      	beq.n	fbb0 <set_time+0x8c>
    fb80:	2300      	movs	r3, #0
    fb82:	469b      	mov	fp, r3
    fb84:	4f52      	ldr	r7, [pc, #328]	; (fcd0 <set_time+0x1ac>)
    fb86:	4e53      	ldr	r6, [pc, #332]	; (fcd4 <set_time+0x1b0>)
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fb88:	465b      	mov	r3, fp
    fb8a:	3301      	adds	r3, #1
    fb8c:	b2db      	uxtb	r3, r3
    fb8e:	0028      	movs	r0, r5
    fb90:	210a      	movs	r1, #10
    fb92:	4698      	mov	r8, r3
    fb94:	47b8      	blx	r7
    fb96:	465b      	mov	r3, fp
    fb98:	b2c9      	uxtb	r1, r1
    fb9a:	009b      	lsls	r3, r3, #2
    fb9c:	4099      	lsls	r1, r3
		binaryInput /= 10;
    fb9e:	0028      	movs	r0, r5
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fba0:	430c      	orrs	r4, r1
		binaryInput /= 10;
    fba2:	210a      	movs	r1, #10
    fba4:	47b0      	blx	r6
    fba6:	b2c5      	uxtb	r5, r0
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fba8:	b2e4      	uxtb	r4, r4
    fbaa:	46c3      	mov	fp, r8
	while (binaryInput > 0) {
    fbac:	2d00      	cmp	r5, #0
    fbae:	d1eb      	bne.n	fb88 <set_time+0x64>
	temp_buf[0x02]= int2bcd(temp_time->minutes);
    fbb0:	466b      	mov	r3, sp
    fbb2:	719c      	strb	r4, [r3, #6]
	temp_buf[0x03]= int2bcd(temp_time->hours);
    fbb4:	464b      	mov	r3, r9
    fbb6:	791d      	ldrb	r5, [r3, #4]
	while (binaryInput > 0) {
    fbb8:	2400      	movs	r4, #0
    fbba:	2d00      	cmp	r5, #0
    fbbc:	d017      	beq.n	fbee <set_time+0xca>
    fbbe:	2300      	movs	r3, #0
    fbc0:	469b      	mov	fp, r3
    fbc2:	4f43      	ldr	r7, [pc, #268]	; (fcd0 <set_time+0x1ac>)
    fbc4:	4e43      	ldr	r6, [pc, #268]	; (fcd4 <set_time+0x1b0>)
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fbc6:	465b      	mov	r3, fp
    fbc8:	3301      	adds	r3, #1
    fbca:	b2db      	uxtb	r3, r3
    fbcc:	0028      	movs	r0, r5
    fbce:	210a      	movs	r1, #10
    fbd0:	4698      	mov	r8, r3
    fbd2:	47b8      	blx	r7
    fbd4:	465b      	mov	r3, fp
    fbd6:	b2c9      	uxtb	r1, r1
    fbd8:	009b      	lsls	r3, r3, #2
    fbda:	4099      	lsls	r1, r3
		binaryInput /= 10;
    fbdc:	0028      	movs	r0, r5
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fbde:	430c      	orrs	r4, r1
		binaryInput /= 10;
    fbe0:	210a      	movs	r1, #10
    fbe2:	47b0      	blx	r6
    fbe4:	b2c5      	uxtb	r5, r0
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fbe6:	b2e4      	uxtb	r4, r4
    fbe8:	46c3      	mov	fp, r8
	while (binaryInput > 0) {
    fbea:	2d00      	cmp	r5, #0
    fbec:	d1eb      	bne.n	fbc6 <set_time+0xa2>
	temp_buf[0x03]= int2bcd(temp_time->hours);
    fbee:	466b      	mov	r3, sp
	temp_buf[0x04]= 0x00;
    fbf0:	466a      	mov	r2, sp
	temp_buf[0x03]= int2bcd(temp_time->hours);
    fbf2:	71dc      	strb	r4, [r3, #7]
	temp_buf[0x04]= 0x00;
    fbf4:	2300      	movs	r3, #0
    fbf6:	7213      	strb	r3, [r2, #8]
	temp_buf[0x05]= int2bcd(temp_time->day);
    fbf8:	464b      	mov	r3, r9
    fbfa:	78dd      	ldrb	r5, [r3, #3]
	while (binaryInput > 0) {
    fbfc:	2400      	movs	r4, #0
    fbfe:	2d00      	cmp	r5, #0
    fc00:	d017      	beq.n	fc32 <set_time+0x10e>
    fc02:	2300      	movs	r3, #0
    fc04:	469b      	mov	fp, r3
    fc06:	4f32      	ldr	r7, [pc, #200]	; (fcd0 <set_time+0x1ac>)
    fc08:	4e32      	ldr	r6, [pc, #200]	; (fcd4 <set_time+0x1b0>)
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fc0a:	465b      	mov	r3, fp
    fc0c:	3301      	adds	r3, #1
    fc0e:	b2db      	uxtb	r3, r3
    fc10:	0028      	movs	r0, r5
    fc12:	210a      	movs	r1, #10
    fc14:	4698      	mov	r8, r3
    fc16:	47b8      	blx	r7
    fc18:	465b      	mov	r3, fp
    fc1a:	b2c9      	uxtb	r1, r1
    fc1c:	009b      	lsls	r3, r3, #2
    fc1e:	4099      	lsls	r1, r3
		binaryInput /= 10;
    fc20:	0028      	movs	r0, r5
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fc22:	430c      	orrs	r4, r1
		binaryInput /= 10;
    fc24:	210a      	movs	r1, #10
    fc26:	47b0      	blx	r6
    fc28:	b2c5      	uxtb	r5, r0
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fc2a:	b2e4      	uxtb	r4, r4
    fc2c:	46c3      	mov	fp, r8
	while (binaryInput > 0) {
    fc2e:	2d00      	cmp	r5, #0
    fc30:	d1eb      	bne.n	fc0a <set_time+0xe6>
	temp_buf[0x05]= int2bcd(temp_time->day);
    fc32:	466b      	mov	r3, sp
    fc34:	725c      	strb	r4, [r3, #9]
	temp_buf[0x06]= int2bcd(temp_time->month);
    fc36:	464b      	mov	r3, r9
    fc38:	789d      	ldrb	r5, [r3, #2]
	while (binaryInput > 0) {
    fc3a:	2400      	movs	r4, #0
    fc3c:	2d00      	cmp	r5, #0
    fc3e:	d017      	beq.n	fc70 <set_time+0x14c>
    fc40:	2300      	movs	r3, #0
    fc42:	469b      	mov	fp, r3
    fc44:	4f22      	ldr	r7, [pc, #136]	; (fcd0 <set_time+0x1ac>)
    fc46:	4e23      	ldr	r6, [pc, #140]	; (fcd4 <set_time+0x1b0>)
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fc48:	465b      	mov	r3, fp
    fc4a:	3301      	adds	r3, #1
    fc4c:	b2db      	uxtb	r3, r3
    fc4e:	0028      	movs	r0, r5
    fc50:	210a      	movs	r1, #10
    fc52:	4698      	mov	r8, r3
    fc54:	47b8      	blx	r7
    fc56:	465b      	mov	r3, fp
    fc58:	b2c9      	uxtb	r1, r1
    fc5a:	009b      	lsls	r3, r3, #2
    fc5c:	4099      	lsls	r1, r3
		binaryInput /= 10;
    fc5e:	0028      	movs	r0, r5
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fc60:	430c      	orrs	r4, r1
		binaryInput /= 10;
    fc62:	210a      	movs	r1, #10
    fc64:	47b0      	blx	r6
    fc66:	b2c5      	uxtb	r5, r0
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fc68:	b2e4      	uxtb	r4, r4
    fc6a:	46c3      	mov	fp, r8
	while (binaryInput > 0) {
    fc6c:	2d00      	cmp	r5, #0
    fc6e:	d1eb      	bne.n	fc48 <set_time+0x124>
	temp_buf[0x06]= int2bcd(temp_time->month);
    fc70:	466b      	mov	r3, sp
    fc72:	729c      	strb	r4, [r3, #10]
	temp_buf[0x07]= int2bcd(temp_time->year-2000);
    fc74:	464b      	mov	r3, r9
    fc76:	881d      	ldrh	r5, [r3, #0]
	while (binaryInput > 0) {
    fc78:	2400      	movs	r4, #0
	temp_buf[0x07]= int2bcd(temp_time->year-2000);
    fc7a:	3530      	adds	r5, #48	; 0x30
    fc7c:	b2ed      	uxtb	r5, r5
	while (binaryInput > 0) {
    fc7e:	2d00      	cmp	r5, #0
    fc80:	d017      	beq.n	fcb2 <set_time+0x18e>
    fc82:	2300      	movs	r3, #0
    fc84:	469a      	mov	sl, r3
    fc86:	4f12      	ldr	r7, [pc, #72]	; (fcd0 <set_time+0x1ac>)
    fc88:	4e12      	ldr	r6, [pc, #72]	; (fcd4 <set_time+0x1b0>)
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fc8a:	4653      	mov	r3, sl
    fc8c:	3301      	adds	r3, #1
    fc8e:	b2db      	uxtb	r3, r3
    fc90:	0028      	movs	r0, r5
    fc92:	210a      	movs	r1, #10
    fc94:	4698      	mov	r8, r3
    fc96:	47b8      	blx	r7
    fc98:	4653      	mov	r3, sl
    fc9a:	b2c9      	uxtb	r1, r1
    fc9c:	009b      	lsls	r3, r3, #2
    fc9e:	4099      	lsls	r1, r3
		binaryInput /= 10;
    fca0:	0028      	movs	r0, r5
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fca2:	430c      	orrs	r4, r1
		binaryInput /= 10;
    fca4:	210a      	movs	r1, #10
    fca6:	47b0      	blx	r6
    fca8:	b2c5      	uxtb	r5, r0
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    fcaa:	b2e4      	uxtb	r4, r4
    fcac:	46c2      	mov	sl, r8
	while (binaryInput > 0) {
    fcae:	2d00      	cmp	r5, #0
    fcb0:	d1eb      	bne.n	fc8a <set_time+0x166>
	temp_buf[0x07]= int2bcd(temp_time->year-2000);
    fcb2:	466b      	mov	r3, sp
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    fcb4:	aa01      	add	r2, sp, #4
	temp_buf[0x07]= int2bcd(temp_time->year-2000);
    fcb6:	72dc      	strb	r4, [r3, #11]
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    fcb8:	2168      	movs	r1, #104	; 0x68
    fcba:	2308      	movs	r3, #8
    fcbc:	2001      	movs	r0, #1
    fcbe:	4c06      	ldr	r4, [pc, #24]	; (fcd8 <set_time+0x1b4>)
    fcc0:	47a0      	blx	r4
}
    fcc2:	b007      	add	sp, #28
    fcc4:	bc3c      	pop	{r2, r3, r4, r5}
    fcc6:	4690      	mov	r8, r2
    fcc8:	4699      	mov	r9, r3
    fcca:	46a2      	mov	sl, r4
    fccc:	46ab      	mov	fp, r5
    fcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcd0:	00025a49 	.word	0x00025a49
    fcd4:	0002593d 	.word	0x0002593d
    fcd8:	0001c3d9 	.word	0x0001c3d9

0000fcdc <ext_osc_onoff>:
void ext_osc_onoff(bool onoff){
    fcdc:	b530      	push	{r4, r5, lr}
    fcde:	0004      	movs	r4, r0
    fce0:	b085      	sub	sp, #20
	if (!onoff){
    fce2:	2800      	cmp	r0, #0
    fce4:	d03e      	beq.n	fd64 <ext_osc_onoff+0x88>
	temp_buf[0] = 0x0E;
    fce6:	466a      	mov	r2, sp
    fce8:	230e      	movs	r3, #14
		isExtClockEnabled = true;
    fcea:	2501      	movs	r5, #1
	temp_buf[0] = 0x0E;
    fcec:	7013      	strb	r3, [r2, #0]
	temp_buf[1] = 0x04;
    fcee:	3b0a      	subs	r3, #10
    fcf0:	7053      	strb	r3, [r2, #1]
		temp_buf[2] = 0x08;
    fcf2:	3304      	adds	r3, #4
    fcf4:	7093      	strb	r3, [r2, #2]
		isExtClockEnabled = true;
    fcf6:	4b2c      	ldr	r3, [pc, #176]	; (fda8 <ext_osc_onoff+0xcc>)
	i2c_read_write(writep, rtc_add, temp_buf, 3);
    fcf8:	2168      	movs	r1, #104	; 0x68
		isExtClockEnabled = true;
    fcfa:	701d      	strb	r5, [r3, #0]
	i2c_read_write(writep, rtc_add, temp_buf, 3);
    fcfc:	4c2b      	ldr	r4, [pc, #172]	; (fdac <ext_osc_onoff+0xd0>)
    fcfe:	2303      	movs	r3, #3
    fd00:	2001      	movs	r0, #1
    fd02:	47a0      	blx	r4
	delay_ms(10);	
    fd04:	200a      	movs	r0, #10
    fd06:	4b2a      	ldr	r3, [pc, #168]	; (fdb0 <ext_osc_onoff+0xd4>)
    fd08:	4798      	blx	r3
	config->frequency           = 32768UL;
    fd0a:	2380      	movs	r3, #128	; 0x80
    fd0c:	ac01      	add	r4, sp, #4
    fd0e:	021b      	lsls	r3, r3, #8
    fd10:	6063      	str	r3, [r4, #4]
	config->write_once          = false;
    fd12:	2300      	movs	r3, #0
		system_clock_source_xosc32k_set_config(&xosc32k_conf);
    fd14:	0020      	movs	r0, r4
    fd16:	72a3      	strb	r3, [r4, #10]
		xosc32k_conf.startup_time        = SYSTEM_XOSC32K_STARTUP_2048;//CONF_CLOCK_XOSC32K_STARTUP_TIME;
    fd18:	7063      	strb	r3, [r4, #1]
		xosc32k_conf.on_demand           = false;
    fd1a:	7263      	strb	r3, [r4, #9]
		system_clock_source_xosc32k_set_config(&xosc32k_conf);
    fd1c:	4b25      	ldr	r3, [pc, #148]	; (fdb4 <ext_osc_onoff+0xd8>)
	config->enable_32khz_output = true;
    fd1e:	70e5      	strb	r5, [r4, #3]
		xosc32k_conf.external_clock      = SYSTEM_CLOCK_EXTERNAL_CLOCK;//CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    fd20:	7025      	strb	r5, [r4, #0]
		xosc32k_conf.enable_1khz_output  = true;//CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    fd22:	70a5      	strb	r5, [r4, #2]
		xosc32k_conf.run_in_standby      = true;//CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    fd24:	7225      	strb	r5, [r4, #8]
		system_clock_source_xosc32k_set_config(&xosc32k_conf);
    fd26:	4798      	blx	r3
		system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    fd28:	2005      	movs	r0, #5
    fd2a:	4b23      	ldr	r3, [pc, #140]	; (fdb8 <ext_osc_onoff+0xdc>)
    fd2c:	4798      	blx	r3
    fd2e:	4d23      	ldr	r5, [pc, #140]	; (fdbc <ext_osc_onoff+0xe0>)
		while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    fd30:	2005      	movs	r0, #5
    fd32:	47a8      	blx	r5
    fd34:	2800      	cmp	r0, #0
    fd36:	d0fb      	beq.n	fd30 <ext_osc_onoff+0x54>
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    fd38:	2180      	movs	r1, #128	; 0x80
    fd3a:	4a21      	ldr	r2, [pc, #132]	; (fdc0 <ext_osc_onoff+0xe4>)
	system_gclk_gen_set_config(GCLK_FOR_32khz, &gclock_gen_conf);
    fd3c:	2002      	movs	r0, #2
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    fd3e:	6953      	ldr	r3, [r2, #20]
    fd40:	430b      	orrs	r3, r1
    fd42:	6153      	str	r3, [r2, #20]
	config->division_factor    = 1;
    fd44:	2301      	movs	r3, #1
	config->high_when_disabled = false;
    fd46:	2200      	movs	r2, #0
	config->division_factor    = 1;
    fd48:	6063      	str	r3, [r4, #4]
	gclock_gen_conf.run_in_standby = true;
    fd4a:	7223      	strb	r3, [r4, #8]
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_XOSC32K;
    fd4c:	3304      	adds	r3, #4
    fd4e:	7023      	strb	r3, [r4, #0]
	system_gclk_gen_set_config(GCLK_FOR_32khz, &gclock_gen_conf);
    fd50:	0021      	movs	r1, r4
    fd52:	4b1c      	ldr	r3, [pc, #112]	; (fdc4 <ext_osc_onoff+0xe8>)
	config->high_when_disabled = false;
    fd54:	7062      	strb	r2, [r4, #1]
	config->output_enable      = false;
    fd56:	7262      	strb	r2, [r4, #9]
    fd58:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_FOR_32khz);
    fd5a:	2002      	movs	r0, #2
    fd5c:	4b1a      	ldr	r3, [pc, #104]	; (fdc8 <ext_osc_onoff+0xec>)
    fd5e:	4798      	blx	r3
}
    fd60:	b005      	add	sp, #20
    fd62:	bd30      	pop	{r4, r5, pc}
	config->division_factor    = 1;
    fd64:	2301      	movs	r3, #1
    fd66:	a901      	add	r1, sp, #4
    fd68:	604b      	str	r3, [r1, #4]
	gclock_gen_conf.run_in_standby = true;
    fd6a:	720b      	strb	r3, [r1, #8]
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    fd6c:	3302      	adds	r3, #2
	config->high_when_disabled = false;
    fd6e:	7048      	strb	r0, [r1, #1]
	config->output_enable      = false;
    fd70:	7248      	strb	r0, [r1, #9]
    fd72:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_FOR_32khz, &gclock_gen_conf);
    fd74:	2002      	movs	r0, #2
    fd76:	4b13      	ldr	r3, [pc, #76]	; (fdc4 <ext_osc_onoff+0xe8>)
    fd78:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_FOR_32khz);
    fd7a:	2002      	movs	r0, #2
    fd7c:	4b12      	ldr	r3, [pc, #72]	; (fdc8 <ext_osc_onoff+0xec>)
    fd7e:	4798      	blx	r3
	temp_buf[0] = 0x0E;
    fd80:	466a      	mov	r2, sp
    fd82:	230e      	movs	r3, #14
    fd84:	7013      	strb	r3, [r2, #0]
	temp_buf[1] = 0x04;
    fd86:	3b0a      	subs	r3, #10
    fd88:	7053      	strb	r3, [r2, #1]
		isExtClockEnabled = false;
    fd8a:	4b07      	ldr	r3, [pc, #28]	; (fda8 <ext_osc_onoff+0xcc>)
		temp_buf[2] = 0x00;
    fd8c:	7094      	strb	r4, [r2, #2]
		isExtClockEnabled = false;
    fd8e:	701c      	strb	r4, [r3, #0]
	i2c_read_write(writep, rtc_add, temp_buf, 3);
    fd90:	2168      	movs	r1, #104	; 0x68
    fd92:	2303      	movs	r3, #3
    fd94:	2001      	movs	r0, #1
    fd96:	4c05      	ldr	r4, [pc, #20]	; (fdac <ext_osc_onoff+0xd0>)
    fd98:	47a0      	blx	r4
	delay_ms(10);	
    fd9a:	200a      	movs	r0, #10
    fd9c:	4b04      	ldr	r3, [pc, #16]	; (fdb0 <ext_osc_onoff+0xd4>)
    fd9e:	4798      	blx	r3
		system_clock_source_disable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    fda0:	4b0a      	ldr	r3, [pc, #40]	; (fdcc <ext_osc_onoff+0xf0>)
    fda2:	2005      	movs	r0, #5
    fda4:	4798      	blx	r3
    fda6:	e7db      	b.n	fd60 <ext_osc_onoff+0x84>
    fda8:	20000cb4 	.word	0x20000cb4
    fdac:	0001c3d9 	.word	0x0001c3d9
    fdb0:	0001f509 	.word	0x0001f509
    fdb4:	0001f5ed 	.word	0x0001f5ed
    fdb8:	0001f709 	.word	0x0001f709
    fdbc:	0001f845 	.word	0x0001f845
    fdc0:	40001000 	.word	0x40001000
    fdc4:	0001fabd 	.word	0x0001fabd
    fdc8:	0001fb69 	.word	0x0001fb69
    fdcc:	0001f7c5 	.word	0x0001f7c5

0000fdd0 <time_quality_check>:
	if(time_inst->year<1900){
    fdd0:	8801      	ldrh	r1, [r0, #0]
    fdd2:	4a13      	ldr	r2, [pc, #76]	; (fe20 <time_quality_check+0x50>)
bool time_quality_check(struct TIME *time_inst){
    fdd4:	0003      	movs	r3, r0
	bool isValid = true;
    fdd6:	2001      	movs	r0, #1
	if(time_inst->year<1900){
    fdd8:	4291      	cmp	r1, r2
    fdda:	d802      	bhi.n	fde2 <time_quality_check+0x12>
		isValid = false;
    fddc:	2000      	movs	r0, #0
		time_inst->year = 1900;
    fdde:	4a11      	ldr	r2, [pc, #68]	; (fe24 <time_quality_check+0x54>)
    fde0:	801a      	strh	r2, [r3, #0]
	if(time_inst->month<1){
    fde2:	789a      	ldrb	r2, [r3, #2]
    fde4:	2a00      	cmp	r2, #0
    fde6:	d115      	bne.n	fe14 <time_quality_check+0x44>
		isValid = false;
    fde8:	2000      	movs	r0, #0
		time_inst->month = 1;
    fdea:	3201      	adds	r2, #1
    fdec:	709a      	strb	r2, [r3, #2]
	if(time_inst->day<1){
    fdee:	78da      	ldrb	r2, [r3, #3]
    fdf0:	2a00      	cmp	r2, #0
    fdf2:	d109      	bne.n	fe08 <time_quality_check+0x38>
		isValid = false;
    fdf4:	2000      	movs	r0, #0
		time_inst->day = 1;
    fdf6:	3201      	adds	r2, #1
    fdf8:	70da      	strb	r2, [r3, #3]
	if(time_inst->hours>24){
    fdfa:	791a      	ldrb	r2, [r3, #4]
    fdfc:	2a18      	cmp	r2, #24
    fdfe:	d902      	bls.n	fe06 <time_quality_check+0x36>
		time_inst->hours = 24;
    fe00:	2218      	movs	r2, #24
		isValid = false;
    fe02:	2000      	movs	r0, #0
		time_inst->hours = 24;
    fe04:	711a      	strb	r2, [r3, #4]
}
    fe06:	4770      	bx	lr
	}else if(time_inst->day>31){
    fe08:	2a1f      	cmp	r2, #31
    fe0a:	d9f6      	bls.n	fdfa <time_quality_check+0x2a>
		time_inst->day = 31;
    fe0c:	221f      	movs	r2, #31
		isValid = false;
    fe0e:	2000      	movs	r0, #0
		time_inst->day = 31;
    fe10:	70da      	strb	r2, [r3, #3]
    fe12:	e7f2      	b.n	fdfa <time_quality_check+0x2a>
	}else if(time_inst->month>12){
    fe14:	2a0c      	cmp	r2, #12
    fe16:	d9ea      	bls.n	fdee <time_quality_check+0x1e>
		time_inst->month = 12;
    fe18:	220c      	movs	r2, #12
		isValid = false;
    fe1a:	2000      	movs	r0, #0
		time_inst->month = 12;
    fe1c:	709a      	strb	r2, [r3, #2]
    fe1e:	e7e6      	b.n	fdee <time_quality_check+0x1e>
    fe20:	0000076b 	.word	0x0000076b
    fe24:	0000076c 	.word	0x0000076c

0000fe28 <gen_posix_time>:
uint32_t gen_posix_time(struct TIME *time_inst){
    fe28:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe2a:	46c6      	mov	lr, r8
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    fe2c:	21c8      	movs	r1, #200	; 0xc8
uint32_t gen_posix_time(struct TIME *time_inst){
    fe2e:	b500      	push	{lr}
	tm_year = time_inst->year-1900;//  Years since 1900 per algorithm
    fe30:	4b19      	ldr	r3, [pc, #100]	; (fe98 <gen_posix_time+0x70>)
    fe32:	8807      	ldrh	r7, [r0, #0]
	tm_yday = tm_yday + days_per_month_acc[(tm_month-1)] -1;
    fe34:	4a19      	ldr	r2, [pc, #100]	; (fe9c <gen_posix_time+0x74>)
	tm_year = time_inst->year-1900;//  Years since 1900 per algorithm
    fe36:	18fd      	adds	r5, r7, r3
	tm_month = time_inst->month;
    fe38:	7883      	ldrb	r3, [r0, #2]
	tm_yday = time_inst->day;
    fe3a:	78c4      	ldrb	r4, [r0, #3]
	tm_yday = tm_yday + days_per_month_acc[(tm_month-1)] -1;
    fe3c:	3b01      	subs	r3, #1
    fe3e:	009b      	lsls	r3, r3, #2
uint32_t gen_posix_time(struct TIME *time_inst){
    fe40:	0006      	movs	r6, r0
	tm_yday = tm_yday + days_per_month_acc[(tm_month-1)] -1;
    fe42:	5898      	ldr	r0, [r3, r2]
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    fe44:	4b16      	ldr	r3, [pc, #88]	; (fea0 <gen_posix_time+0x78>)
    fe46:	3c01      	subs	r4, #1
	tm_yday = tm_yday + days_per_month_acc[(tm_month-1)] -1;
    fe48:	1824      	adds	r4, r4, r0
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    fe4a:	18f8      	adds	r0, r7, r3
    fe4c:	4b15      	ldr	r3, [pc, #84]	; (fea4 <gen_posix_time+0x7c>)
    fe4e:	0880      	lsrs	r0, r0, #2
    fe50:	1824      	adds	r4, r4, r0
    fe52:	18f8      	adds	r0, r7, r3
    fe54:	4b14      	ldr	r3, [pc, #80]	; (fea8 <gen_posix_time+0x80>)
    fe56:	0049      	lsls	r1, r1, #1
    fe58:	4698      	mov	r8, r3
    fe5a:	4798      	blx	r3
    fe5c:	4b13      	ldr	r3, [pc, #76]	; (feac <gen_posix_time+0x84>)
    fe5e:	1824      	adds	r4, r4, r0
    fe60:	2164      	movs	r1, #100	; 0x64
    fe62:	18f8      	adds	r0, r7, r3
    fe64:	47c0      	blx	r8
    fe66:	4a12      	ldr	r2, [pc, #72]	; (feb0 <gen_posix_time+0x88>)
    fe68:	1a20      	subs	r0, r4, r0
    fe6a:	4694      	mov	ip, r2
    fe6c:	4c11      	ldr	r4, [pc, #68]	; (feb4 <gen_posix_time+0x8c>)
	tm_hour = time_inst->hours;
    fe6e:	7932      	ldrb	r2, [r6, #4]
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    fe70:	4344      	muls	r4, r0
	tm_min = time_inst->minutes;
    fe72:	7970      	ldrb	r0, [r6, #5]
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    fe74:	0103      	lsls	r3, r0, #4
    fe76:	1a1b      	subs	r3, r3, r0
	tm_sec = time_inst->seconds;
    fe78:	79b0      	ldrb	r0, [r6, #6]
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    fe7a:	009b      	lsls	r3, r3, #2
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    fe7c:	4460      	add	r0, ip
    fe7e:	181b      	adds	r3, r3, r0
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    fe80:	20e1      	movs	r0, #225	; 0xe1
    fe82:	0100      	lsls	r0, r0, #4
    fe84:	4350      	muls	r0, r2
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    fe86:	181b      	adds	r3, r3, r0
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    fe88:	480b      	ldr	r0, [pc, #44]	; (feb8 <gen_posix_time+0x90>)
    fe8a:	4368      	muls	r0, r5
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    fe8c:	1818      	adds	r0, r3, r0
    fe8e:	1820      	adds	r0, r4, r0
}
    fe90:	bc04      	pop	{r2}
    fe92:	4690      	mov	r8, r2
    fe94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe96:	46c0      	nop			; (mov r8, r8)
    fe98:	fffff894 	.word	0xfffff894
    fe9c:	20000160 	.word	0x20000160
    fea0:	fffff84f 	.word	0xfffff84f
    fea4:	fffff9bf 	.word	0xfffff9bf
    fea8:	0002593d 	.word	0x0002593d
    feac:	fffff893 	.word	0xfffff893
    feb0:	7c6beb00 	.word	0x7c6beb00
    feb4:	00015180 	.word	0x00015180
    feb8:	01e13380 	.word	0x01e13380

0000febc <genTimestampString>:
#define x4 98 //  Starting X position for Inclination data
#define y1 0  //  Starting Y position for header
#define y2 10 //  Starting Y position for data


void genTimestampString(char  *timeString, struct TIME *timePtr, uint8_t style){
    febc:	b510      	push	{r4, lr}
    febe:	b084      	sub	sp, #16
	switch (style){
    fec0:	2a02      	cmp	r2, #2
    fec2:	d01b      	beq.n	fefc <genTimestampString+0x40>
    fec4:	2a03      	cmp	r2, #3
    fec6:	d011      	beq.n	feec <genTimestampString+0x30>
    fec8:	2a01      	cmp	r2, #1
    feca:	d001      	beq.n	fed0 <genTimestampString+0x14>
			break;
		
	}
	
	
}
    fecc:	b004      	add	sp, #16
    fece:	bd10      	pop	{r4, pc}
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
    fed0:	798c      	ldrb	r4, [r1, #6]
    fed2:	788b      	ldrb	r3, [r1, #2]
    fed4:	880a      	ldrh	r2, [r1, #0]
    fed6:	9403      	str	r4, [sp, #12]
    fed8:	794c      	ldrb	r4, [r1, #5]
    feda:	9402      	str	r4, [sp, #8]
    fedc:	790c      	ldrb	r4, [r1, #4]
    fede:	9401      	str	r4, [sp, #4]
    fee0:	78c9      	ldrb	r1, [r1, #3]
    fee2:	4c0d      	ldr	r4, [pc, #52]	; (ff18 <genTimestampString+0x5c>)
    fee4:	9100      	str	r1, [sp, #0]
    fee6:	490d      	ldr	r1, [pc, #52]	; (ff1c <genTimestampString+0x60>)
    fee8:	47a0      	blx	r4
    feea:	e7ef      	b.n	fecc <genTimestampString+0x10>
			sprintf(timeString,"%04d%02d%02d",
    feec:	788b      	ldrb	r3, [r1, #2]
    feee:	880a      	ldrh	r2, [r1, #0]
    fef0:	78c9      	ldrb	r1, [r1, #3]
    fef2:	4c09      	ldr	r4, [pc, #36]	; (ff18 <genTimestampString+0x5c>)
    fef4:	9100      	str	r1, [sp, #0]
    fef6:	490a      	ldr	r1, [pc, #40]	; (ff20 <genTimestampString+0x64>)
    fef8:	47a0      	blx	r4
}
    fefa:	e7e7      	b.n	fecc <genTimestampString+0x10>
			sprintf(timeString,"%04d%02d%02d_%02d%02d%02d",
    fefc:	798c      	ldrb	r4, [r1, #6]
    fefe:	788b      	ldrb	r3, [r1, #2]
    ff00:	880a      	ldrh	r2, [r1, #0]
    ff02:	9403      	str	r4, [sp, #12]
    ff04:	794c      	ldrb	r4, [r1, #5]
    ff06:	9402      	str	r4, [sp, #8]
    ff08:	790c      	ldrb	r4, [r1, #4]
    ff0a:	9401      	str	r4, [sp, #4]
    ff0c:	78c9      	ldrb	r1, [r1, #3]
    ff0e:	4c02      	ldr	r4, [pc, #8]	; (ff18 <genTimestampString+0x5c>)
    ff10:	9100      	str	r1, [sp, #0]
    ff12:	4904      	ldr	r1, [pc, #16]	; (ff24 <genTimestampString+0x68>)
    ff14:	47a0      	blx	r4
			break;
    ff16:	e7d9      	b.n	fecc <genTimestampString+0x10>
    ff18:	00028ab1 	.word	0x00028ab1
    ff1c:	0002dc60 	.word	0x0002dc60
    ff20:	0002dc9c 	.word	0x0002dc9c
    ff24:	0002dc80 	.word	0x0002dc80

0000ff28 <print_line>:

void print_line(uint8_t y_line, struct MEASUREMENT *measPtr){
    ff28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff2a:	464e      	mov	r6, r9
    ff2c:	46de      	mov	lr, fp
    ff2e:	4657      	mov	r7, sl
    ff30:	4645      	mov	r5, r8
    ff32:	b5e0      	push	{r5, r6, r7, lr}
	if((measPtr->refIndex==0)&&(measPtr->meas_type!=measQuick)){
    ff34:	680b      	ldr	r3, [r1, #0]
void print_line(uint8_t y_line, struct MEASUREMENT *measPtr){
    ff36:	0006      	movs	r6, r0
    ff38:	000c      	movs	r4, r1
	if((measPtr->refIndex==0)&&(measPtr->meas_type!=measQuick)){
    ff3a:	2b00      	cmp	r3, #0
    ff3c:	d109      	bne.n	ff52 <print_line+0x2a>
    ff3e:	3328      	adds	r3, #40	; 0x28
    ff40:	5ccb      	ldrb	r3, [r1, r3]
    ff42:	2b02      	cmp	r3, #2
    ff44:	d005      	beq.n	ff52 <print_line+0x2a>
		
	}
		

	
}
    ff46:	bc3c      	pop	{r2, r3, r4, r5}
    ff48:	4690      	mov	r8, r2
    ff4a:	4699      	mov	r9, r3
    ff4c:	46a2      	mov	sl, r4
    ff4e:	46ab      	mov	fp, r5
    ff50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sprintf(display_str, "%.1f", measPtr->azimuth);
    ff52:	4b26      	ldr	r3, [pc, #152]	; (ffec <print_line+0xc4>)
    ff54:	6960      	ldr	r0, [r4, #20]
    ff56:	4699      	mov	r9, r3
    ff58:	4798      	blx	r3
    ff5a:	4d25      	ldr	r5, [pc, #148]	; (fff0 <print_line+0xc8>)
    ff5c:	000b      	movs	r3, r1
    ff5e:	4925      	ldr	r1, [pc, #148]	; (fff4 <print_line+0xcc>)
    ff60:	0002      	movs	r2, r0
    ff62:	4f25      	ldr	r7, [pc, #148]	; (fff8 <print_line+0xd0>)
    ff64:	0028      	movs	r0, r5
    ff66:	468a      	mov	sl, r1
    ff68:	47b8      	blx	r7
	glcd_draw_string_xy(x3, y_line, display_str);
    ff6a:	4b24      	ldr	r3, [pc, #144]	; (fffc <print_line+0xd4>)
    ff6c:	002a      	movs	r2, r5
    ff6e:	0031      	movs	r1, r6
    ff70:	203f      	movs	r0, #63	; 0x3f
    ff72:	469b      	mov	fp, r3
    ff74:	4798      	blx	r3
	sprintf(display_str, "%.1f", measPtr->inclination);
    ff76:	69a0      	ldr	r0, [r4, #24]
    ff78:	47c8      	blx	r9
    ff7a:	000b      	movs	r3, r1
    ff7c:	0002      	movs	r2, r0
    ff7e:	4651      	mov	r1, sl
    ff80:	0028      	movs	r0, r5
    ff82:	47b8      	blx	r7
	glcd_draw_string_xy(x4, y_line, display_str);
    ff84:	002a      	movs	r2, r5
    ff86:	0031      	movs	r1, r6
    ff88:	2062      	movs	r0, #98	; 0x62
    ff8a:	47d8      	blx	fp
	if(measPtr->meas_type!=measQuick){
    ff8c:	2328      	movs	r3, #40	; 0x28
    ff8e:	5ce3      	ldrb	r3, [r4, r3]
	sprintf(display_str, "%.1f", measPtr->azimuth);
    ff90:	46b8      	mov	r8, r7
	if(measPtr->meas_type!=measQuick){
    ff92:	2b02      	cmp	r3, #2
    ff94:	d0d7      	beq.n	ff46 <print_line+0x1e>
		sprintf(display_str, "%d", measPtr->refIndex);//reference
    ff96:	6822      	ldr	r2, [r4, #0]
    ff98:	4919      	ldr	r1, [pc, #100]	; (10000 <print_line+0xd8>)
    ff9a:	0028      	movs	r0, r5
    ff9c:	47b8      	blx	r7
		glcd_draw_string_xy(x1, y_line, display_str);
    ff9e:	2000      	movs	r0, #0
    ffa0:	002a      	movs	r2, r5
    ffa2:	0031      	movs	r1, r6
    ffa4:	47d8      	blx	fp
		if (options.current_unit_dist==meters){
    ffa6:	4b17      	ldr	r3, [pc, #92]	; (10004 <print_line+0xdc>)
			sprintf(display_str, "%.2f", measPtr->distMeters);//distance
    ffa8:	6920      	ldr	r0, [r4, #16]
		if (options.current_unit_dist==meters){
    ffaa:	7a1b      	ldrb	r3, [r3, #8]
    ffac:	2b01      	cmp	r3, #1
    ffae:	d016      	beq.n	ffde <print_line+0xb6>
			sprintf(display_str, "%.1f", MT2FT*(measPtr->distMeters));//distance
    ffb0:	47c8      	blx	r9
    ffb2:	4a15      	ldr	r2, [pc, #84]	; (10008 <print_line+0xe0>)
    ffb4:	4b15      	ldr	r3, [pc, #84]	; (1000c <print_line+0xe4>)
    ffb6:	4f16      	ldr	r7, [pc, #88]	; (10010 <print_line+0xe8>)
    ffb8:	47b8      	blx	r7
    ffba:	0002      	movs	r2, r0
    ffbc:	000b      	movs	r3, r1
    ffbe:	0028      	movs	r0, r5
    ffc0:	4651      	mov	r1, sl
    ffc2:	47c0      	blx	r8
		glcd_draw_string_xy(x2, y_line, display_str);
    ffc4:	002a      	movs	r2, r5
    ffc6:	0031      	movs	r1, r6
    ffc8:	201c      	movs	r0, #28
    ffca:	47d8      	blx	fp
		if (measPtr->errCode[0]!=0){
    ffcc:	232c      	movs	r3, #44	; 0x2c
    ffce:	5ce3      	ldrb	r3, [r4, r3]
    ffd0:	2b00      	cmp	r3, #0
    ffd2:	d0b8      	beq.n	ff46 <print_line+0x1e>
			glcd_draw_string_xy(x1+18, y_line, "E");
    ffd4:	4a0f      	ldr	r2, [pc, #60]	; (10014 <print_line+0xec>)
    ffd6:	0031      	movs	r1, r6
    ffd8:	2012      	movs	r0, #18
    ffda:	47d8      	blx	fp
    ffdc:	e7b3      	b.n	ff46 <print_line+0x1e>
			sprintf(display_str, "%.2f", measPtr->distMeters);//distance
    ffde:	47c8      	blx	r9
    ffe0:	0002      	movs	r2, r0
    ffe2:	000b      	movs	r3, r1
    ffe4:	0028      	movs	r0, r5
    ffe6:	490c      	ldr	r1, [pc, #48]	; (10018 <print_line+0xf0>)
    ffe8:	47b8      	blx	r7
    ffea:	e7eb      	b.n	ffc4 <print_line+0x9c>
    ffec:	0002878d 	.word	0x0002878d
    fff0:	20002da0 	.word	0x20002da0
    fff4:	0002f2d4 	.word	0x0002f2d4
    fff8:	00028ab1 	.word	0x00028ab1
    fffc:	0001e1fd 	.word	0x0001e1fd
   10000:	0002db48 	.word	0x0002db48
   10004:	20002d20 	.word	0x20002d20
   10008:	0abb44e5 	.word	0x0abb44e5
   1000c:	400a3f29 	.word	0x400a3f29
   10010:	00027ac5 	.word	0x00027ac5
   10014:	0002f34c 	.word	0x0002f34c
   10018:	0002dd00 	.word	0x0002dd00

0001001c <print_data_screen>:



void print_data_screen(void){
   1001c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1001e:	46de      	mov	lr, fp
   10020:	464e      	mov	r6, r9
   10022:	4657      	mov	r7, sl
   10024:	4645      	mov	r5, r8
   10026:	b5e0      	push	{r5, r6, r7, lr}
	static bool percFlipper;
	uint8_t battery_level;
	

	glcd_clear_buffer();
   10028:	4b98      	ldr	r3, [pc, #608]	; (1028c <print_data_screen+0x270>)
void print_data_screen(void){
   1002a:	b085      	sub	sp, #20
	glcd_clear_buffer();
   1002c:	4798      	blx	r3
	
	//Print Data Headers
	sprintf(display_str,"REF");
   1002e:	4e98      	ldr	r6, [pc, #608]	; (10290 <print_data_screen+0x274>)
   10030:	4b98      	ldr	r3, [pc, #608]	; (10294 <print_data_screen+0x278>)
   10032:	2204      	movs	r2, #4
   10034:	4998      	ldr	r1, [pc, #608]	; (10298 <print_data_screen+0x27c>)
   10036:	0030      	movs	r0, r6
   10038:	4798      	blx	r3
	glcd_draw_string_xy(x1,y1, display_str);	
   1003a:	4c98      	ldr	r4, [pc, #608]	; (1029c <print_data_screen+0x280>)
   1003c:	0032      	movs	r2, r6
   1003e:	2100      	movs	r1, #0
   10040:	2000      	movs	r0, #0
   10042:	47a0      	blx	r4
	sprintf(display_str,"DIST");
   10044:	4b93      	ldr	r3, [pc, #588]	; (10294 <print_data_screen+0x278>)
   10046:	2205      	movs	r2, #5
   10048:	4995      	ldr	r1, [pc, #596]	; (102a0 <print_data_screen+0x284>)
   1004a:	0030      	movs	r0, r6
   1004c:	4798      	blx	r3
	glcd_draw_string_xy(x2,y1,display_str);	
   1004e:	0032      	movs	r2, r6
   10050:	2100      	movs	r1, #0
   10052:	201c      	movs	r0, #28
   10054:	47a0      	blx	r4
	sprintf(display_str,"AZM");
   10056:	4b8f      	ldr	r3, [pc, #572]	; (10294 <print_data_screen+0x278>)
   10058:	2204      	movs	r2, #4
   1005a:	4992      	ldr	r1, [pc, #584]	; (102a4 <print_data_screen+0x288>)
   1005c:	0030      	movs	r0, r6
   1005e:	4798      	blx	r3
	glcd_draw_string_xy(x3, y1, display_str);
   10060:	0032      	movs	r2, r6
   10062:	2100      	movs	r1, #0
   10064:	203f      	movs	r0, #63	; 0x3f
   10066:	47a0      	blx	r4
	glcd_draw_circle(x3+21, y1+2, 2, BLACK);
   10068:	2301      	movs	r3, #1
   1006a:	2202      	movs	r2, #2
   1006c:	2102      	movs	r1, #2
   1006e:	2054      	movs	r0, #84	; 0x54
   10070:	4d8d      	ldr	r5, [pc, #564]	; (102a8 <print_data_screen+0x28c>)
   10072:	47a8      	blx	r5
	sprintf(display_str,"INCL");
   10074:	4b87      	ldr	r3, [pc, #540]	; (10294 <print_data_screen+0x278>)
   10076:	2205      	movs	r2, #5
   10078:	498c      	ldr	r1, [pc, #560]	; (102ac <print_data_screen+0x290>)
   1007a:	0030      	movs	r0, r6
   1007c:	4798      	blx	r3
	glcd_draw_string_xy(x4, y1, display_str);
   1007e:	0032      	movs	r2, r6
   10080:	2100      	movs	r1, #0
   10082:	2062      	movs	r0, #98	; 0x62
   10084:	47a0      	blx	r4
	glcd_draw_circle(x4+26, y1+2, 2, BLACK);

	//Print Grid Lines
	glcd_draw_line(0, y1+8, 128, y1+8, BLACK);
   10086:	2401      	movs	r4, #1
	glcd_draw_circle(x4+26, y1+2, 2, BLACK);
   10088:	2301      	movs	r3, #1
   1008a:	2202      	movs	r2, #2
   1008c:	2102      	movs	r1, #2
   1008e:	207c      	movs	r0, #124	; 0x7c
   10090:	47a8      	blx	r5
	glcd_draw_line(0, y1+8, 128, y1+8, BLACK);
   10092:	4f87      	ldr	r7, [pc, #540]	; (102b0 <print_data_screen+0x294>)
   10094:	2308      	movs	r3, #8
   10096:	2280      	movs	r2, #128	; 0x80
   10098:	2108      	movs	r1, #8
   1009a:	2000      	movs	r0, #0
   1009c:	9400      	str	r4, [sp, #0]
   1009e:	47b8      	blx	r7
	glcd_draw_line(0, y2+8, 128, y2+8, BLACK);
   100a0:	2312      	movs	r3, #18
   100a2:	2280      	movs	r2, #128	; 0x80
   100a4:	2112      	movs	r1, #18
   100a6:	2000      	movs	r0, #0
   100a8:	9400      	str	r4, [sp, #0]
   100aa:	47b8      	blx	r7
	glcd_draw_line(x2-2, 0, x2-2, 53, BLACK);
   100ac:	2335      	movs	r3, #53	; 0x35
   100ae:	221a      	movs	r2, #26
   100b0:	2100      	movs	r1, #0
   100b2:	201a      	movs	r0, #26
   100b4:	9400      	str	r4, [sp, #0]
   100b6:	47b8      	blx	r7
	glcd_draw_line(x3-2, 0, x3-2, 53, BLACK);
   100b8:	2335      	movs	r3, #53	; 0x35
   100ba:	223d      	movs	r2, #61	; 0x3d
   100bc:	2100      	movs	r1, #0
   100be:	203d      	movs	r0, #61	; 0x3d
   100c0:	9400      	str	r4, [sp, #0]
   100c2:	47b8      	blx	r7
	glcd_draw_line(x4-2, 0, x4-2, 53, BLACK);
   100c4:	2335      	movs	r3, #53	; 0x35
   100c6:	2260      	movs	r2, #96	; 0x60
   100c8:	2100      	movs	r1, #0
   100ca:	2060      	movs	r0, #96	; 0x60
   100cc:	9400      	str	r4, [sp, #0]
   100ce:	47b8      	blx	r7
	//Print Data
	uint16_t line;
	uint16_t y_line;
	uint32_t dispInd;
	//  Temporary reading stored at buffer index		
	dispInd = measBufInd;
   100d0:	4b78      	ldr	r3, [pc, #480]	; (102b4 <print_data_screen+0x298>)
   100d2:	681b      	ldr	r3, [r3, #0]
   100d4:	9303      	str	r3, [sp, #12]
	if (!isLaserOn()){
   100d6:	4b78      	ldr	r3, [pc, #480]	; (102b8 <print_data_screen+0x29c>)
   100d8:	4798      	blx	r3
		//  If not displaying temporary reading, move back 1 to first measurement
		circBuffDec(&dispInd, N_MEASBUF);	
   100da:	ab03      	add	r3, sp, #12
   100dc:	4699      	mov	r9, r3
	if (!isLaserOn()){
   100de:	2800      	cmp	r0, #0
   100e0:	d100      	bne.n	100e4 <print_data_screen+0xc8>
   100e2:	e0a1      	b.n	10228 <print_data_screen+0x20c>
   100e4:	4b75      	ldr	r3, [pc, #468]	; (102bc <print_data_screen+0x2a0>)
   100e6:	4698      	mov	r8, r3
   100e8:	4b75      	ldr	r3, [pc, #468]	; (102c0 <print_data_screen+0x2a4>)
void print_data_screen(void){
   100ea:	2401      	movs	r4, #1
   100ec:	469b      	mov	fp, r3
   100ee:	4b75      	ldr	r3, [pc, #468]	; (102c4 <print_data_screen+0x2a8>)
   100f0:	250b      	movs	r5, #11
   100f2:	469a      	mov	sl, r3
		if(line==0){
			y_line = y2;
		}else{			
			y_line = line*9+1+y2;
		}
		print_line(y_line, &measBuf[dispInd]);
   100f4:	9b03      	ldr	r3, [sp, #12]
   100f6:	0199      	lsls	r1, r3, #6
   100f8:	4459      	add	r1, fp
		if(line==0){
   100fa:	2c01      	cmp	r4, #1
   100fc:	d00f      	beq.n	1011e <print_data_screen+0x102>
		print_line(y_line, &measBuf[dispInd]);
   100fe:	0028      	movs	r0, r5
   10100:	47d0      	blx	sl
		circBuffDec(&dispInd, N_MEASBUF);	
   10102:	210a      	movs	r1, #10
   10104:	4648      	mov	r0, r9
   10106:	47c0      	blx	r8
	for (line=0;line<num_lines;line++){
   10108:	2c05      	cmp	r4, #5
   1010a:	d00e      	beq.n	1012a <print_data_screen+0x10e>
		print_line(y_line, &measBuf[dispInd]);
   1010c:	9b03      	ldr	r3, [sp, #12]
   1010e:	3401      	adds	r4, #1
   10110:	3509      	adds	r5, #9
   10112:	0199      	lsls	r1, r3, #6
   10114:	b2a4      	uxth	r4, r4
   10116:	b2ed      	uxtb	r5, r5
   10118:	4459      	add	r1, fp
		if(line==0){
   1011a:	2c01      	cmp	r4, #1
   1011c:	d1ef      	bne.n	100fe <print_data_screen+0xe2>
		print_line(y_line, &measBuf[dispInd]);
   1011e:	200a      	movs	r0, #10
   10120:	47d0      	blx	sl
		circBuffDec(&dispInd, N_MEASBUF);	
   10122:	210a      	movs	r1, #10
   10124:	4648      	mov	r0, r9
   10126:	47c0      	blx	r8
   10128:	e7f0      	b.n	1010c <print_data_screen+0xf0>
	}//  Loop for each line
	
	//  Add extra information on bottom	
	
	//  Temperature
	if (options.current_unit_temp == celsius){
   1012a:	4b67      	ldr	r3, [pc, #412]	; (102c8 <print_data_screen+0x2ac>)
   1012c:	7a5b      	ldrb	r3, [r3, #9]
   1012e:	2b04      	cmp	r3, #4
   10130:	d100      	bne.n	10134 <print_data_screen+0x118>
   10132:	e09f      	b.n	10274 <print_data_screen+0x258>
		sprintf(display_str,"T:%4.1fC", currentTempC);
	}else{
		sprintf(display_str,"T:%0.1fF", celsius2fahrenheit(currentTempC));
   10134:	4b65      	ldr	r3, [pc, #404]	; (102cc <print_data_screen+0x2b0>)
   10136:	6818      	ldr	r0, [r3, #0]
   10138:	4b65      	ldr	r3, [pc, #404]	; (102d0 <print_data_screen+0x2b4>)
   1013a:	4798      	blx	r3
   1013c:	4b65      	ldr	r3, [pc, #404]	; (102d4 <print_data_screen+0x2b8>)
   1013e:	4798      	blx	r3
   10140:	4d65      	ldr	r5, [pc, #404]	; (102d8 <print_data_screen+0x2bc>)
   10142:	0002      	movs	r2, r0
   10144:	000b      	movs	r3, r1
   10146:	0030      	movs	r0, r6
   10148:	4964      	ldr	r1, [pc, #400]	; (102dc <print_data_screen+0x2c0>)
   1014a:	47a8      	blx	r5
	}
	glcd_tiny_draw_string(81,7,display_str);
   1014c:	0032      	movs	r2, r6
   1014e:	2107      	movs	r1, #7
   10150:	2051      	movs	r0, #81	; 0x51
   10152:	4c63      	ldr	r4, [pc, #396]	; (102e0 <print_data_screen+0x2c4>)
   10154:	47a0      	blx	r4
	
	//  Draw Current Time
	get_time();
   10156:	4b63      	ldr	r3, [pc, #396]	; (102e4 <print_data_screen+0x2c8>)
   10158:	4798      	blx	r3
	sprintf(display_str,"%02d:%02d:%02d", current_time.hours, current_time.minutes, current_time.seconds);
   1015a:	4963      	ldr	r1, [pc, #396]	; (102e8 <print_data_screen+0x2cc>)
   1015c:	0030      	movs	r0, r6
   1015e:	794b      	ldrb	r3, [r1, #5]
   10160:	790a      	ldrb	r2, [r1, #4]
   10162:	7989      	ldrb	r1, [r1, #6]
   10164:	9100      	str	r1, [sp, #0]
   10166:	4961      	ldr	r1, [pc, #388]	; (102ec <print_data_screen+0x2d0>)
   10168:	47a8      	blx	r5
	glcd_tiny_draw_string(0,7,display_str);
   1016a:	0032      	movs	r2, r6
   1016c:	2107      	movs	r1, #7
   1016e:	2000      	movs	r0, #0
   10170:	47a0      	blx	r4

	//  Draw Charge Status	
	isCharging = getChargerStatus();
   10172:	4b5f      	ldr	r3, [pc, #380]	; (102f0 <print_data_screen+0x2d4>)
   10174:	4798      	blx	r3
   10176:	1e43      	subs	r3, r0, #1
   10178:	4198      	sbcs	r0, r3
   1017a:	4b5e      	ldr	r3, [pc, #376]	; (102f4 <print_data_screen+0x2d8>)
   1017c:	b2c0      	uxtb	r0, r0
   1017e:	7018      	strb	r0, [r3, #0]
	if (isCharging){
   10180:	781b      	ldrb	r3, [r3, #0]
   10182:	2b00      	cmp	r3, #0
   10184:	d156      	bne.n	10234 <print_data_screen+0x218>
		glcd_draw_line(48, 64, 48, 54, BLACK);
		glcd_draw_line(48, 54, 79, 54, BLACK);
		glcd_draw_line(79, 64, 79, 54, BLACK);
	
	}else{
		percFlipper = true;
   10186:	4b5c      	ldr	r3, [pc, #368]	; (102f8 <print_data_screen+0x2dc>)
   10188:	4698      	mov	r8, r3
   1018a:	2301      	movs	r3, #1
   1018c:	4642      	mov	r2, r8
   1018e:	7013      	strb	r3, [r2, #0]
	}
	//  Format Battery String
	battery_level = getBatteryLevel();
   10190:	4b5a      	ldr	r3, [pc, #360]	; (102fc <print_data_screen+0x2e0>)
   10192:	4798      	blx	r3
   10194:	b2c2      	uxtb	r2, r0
	if (battery_level>=100){
   10196:	2a63      	cmp	r2, #99	; 0x63
   10198:	d936      	bls.n	10208 <print_data_screen+0x1ec>
		//  Only room for 3 digits, remove ":"
		sprintf(display_str,"B%02d", battery_level);
   1019a:	4959      	ldr	r1, [pc, #356]	; (10300 <print_data_screen+0x2e4>)
   1019c:	0030      	movs	r0, r6
   1019e:	47a8      	blx	r5
	}else{
		sprintf(display_str,"B:%02d",battery_level);
	}
	if (percFlipper){
   101a0:	4643      	mov	r3, r8
   101a2:	781b      	ldrb	r3, [r3, #0]
   101a4:	2b00      	cmp	r3, #0
   101a6:	d136      	bne.n	10216 <print_data_screen+0x1fa>
		//  Blink % sign on/off
		strcat(display_str,"%");
	}
	glcd_tiny_draw_string(50,7,display_str);
   101a8:	0032      	movs	r2, r6
   101aa:	2107      	movs	r1, #7
   101ac:	2032      	movs	r0, #50	; 0x32
   101ae:	47a0      	blx	r4
	
	//  Draw Bluetooth Connection Status
	if(isBleConnected()){
   101b0:	4b54      	ldr	r3, [pc, #336]	; (10304 <print_data_screen+0x2e8>)
   101b2:	4798      	blx	r3
   101b4:	2800      	cmp	r0, #0
   101b6:	d01e      	beq.n	101f6 <print_data_screen+0x1da>
}


void draw_BLE_symbol(uint8_t horiz, uint8_t vert){
	//  vertical line
	glcd_draw_line(horiz+2, vert, horiz+2, vert+8, BLACK);
   101b8:	2401      	movs	r4, #1
   101ba:	233f      	movs	r3, #63	; 0x3f
   101bc:	227d      	movs	r2, #125	; 0x7d
   101be:	2137      	movs	r1, #55	; 0x37
   101c0:	207d      	movs	r0, #125	; 0x7d
   101c2:	9400      	str	r4, [sp, #0]
   101c4:	47b8      	blx	r7
	//  Crosses
	glcd_draw_line(horiz, vert+2, horiz+4, vert+6, BLACK);
   101c6:	233d      	movs	r3, #61	; 0x3d
   101c8:	227f      	movs	r2, #127	; 0x7f
   101ca:	2139      	movs	r1, #57	; 0x39
   101cc:	207b      	movs	r0, #123	; 0x7b
   101ce:	9400      	str	r4, [sp, #0]
   101d0:	47b8      	blx	r7
	glcd_draw_line(horiz, vert+6, horiz+4, vert+2, BLACK);
   101d2:	2339      	movs	r3, #57	; 0x39
   101d4:	227f      	movs	r2, #127	; 0x7f
   101d6:	213d      	movs	r1, #61	; 0x3d
   101d8:	207b      	movs	r0, #123	; 0x7b
   101da:	9400      	str	r4, [sp, #0]
   101dc:	47b8      	blx	r7
	glcd_draw_line(horiz+2, vert, horiz+4, vert+2, BLACK);
   101de:	2339      	movs	r3, #57	; 0x39
   101e0:	227f      	movs	r2, #127	; 0x7f
   101e2:	2137      	movs	r1, #55	; 0x37
   101e4:	207d      	movs	r0, #125	; 0x7d
   101e6:	9400      	str	r4, [sp, #0]
   101e8:	47b8      	blx	r7
	glcd_draw_line(horiz+2, vert+8, horiz+4,vert+6, BLACK );
   101ea:	9400      	str	r4, [sp, #0]
   101ec:	233d      	movs	r3, #61	; 0x3d
   101ee:	227f      	movs	r2, #127	; 0x7f
   101f0:	213f      	movs	r1, #63	; 0x3f
   101f2:	207d      	movs	r0, #125	; 0x7d
   101f4:	47b8      	blx	r7
	glcd_write();
   101f6:	4b44      	ldr	r3, [pc, #272]	; (10308 <print_data_screen+0x2ec>)
   101f8:	4798      	blx	r3
}
   101fa:	b005      	add	sp, #20
   101fc:	bc3c      	pop	{r2, r3, r4, r5}
   101fe:	4690      	mov	r8, r2
   10200:	4699      	mov	r9, r3
   10202:	46a2      	mov	sl, r4
   10204:	46ab      	mov	fp, r5
   10206:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(display_str,"B:%02d",battery_level);
   10208:	4940      	ldr	r1, [pc, #256]	; (1030c <print_data_screen+0x2f0>)
   1020a:	0030      	movs	r0, r6
   1020c:	47a8      	blx	r5
	if (percFlipper){
   1020e:	4643      	mov	r3, r8
   10210:	781b      	ldrb	r3, [r3, #0]
   10212:	2b00      	cmp	r3, #0
   10214:	d0c8      	beq.n	101a8 <print_data_screen+0x18c>
		strcat(display_str,"%");
   10216:	0030      	movs	r0, r6
   10218:	4b3d      	ldr	r3, [pc, #244]	; (10310 <print_data_screen+0x2f4>)
   1021a:	4798      	blx	r3
   1021c:	2202      	movs	r2, #2
   1021e:	1830      	adds	r0, r6, r0
   10220:	493c      	ldr	r1, [pc, #240]	; (10314 <print_data_screen+0x2f8>)
   10222:	4b1c      	ldr	r3, [pc, #112]	; (10294 <print_data_screen+0x278>)
   10224:	4798      	blx	r3
   10226:	e7bf      	b.n	101a8 <print_data_screen+0x18c>
		circBuffDec(&dispInd, N_MEASBUF);	
   10228:	0018      	movs	r0, r3
   1022a:	4b24      	ldr	r3, [pc, #144]	; (102bc <print_data_screen+0x2a0>)
   1022c:	210a      	movs	r1, #10
   1022e:	4698      	mov	r8, r3
   10230:	4798      	blx	r3
   10232:	e759      	b.n	100e8 <print_data_screen+0xcc>
		percFlipper = !percFlipper; //  Toggle % sign 
   10234:	4b30      	ldr	r3, [pc, #192]	; (102f8 <print_data_screen+0x2dc>)
   10236:	2201      	movs	r2, #1
   10238:	4698      	mov	r8, r3
   1023a:	2301      	movs	r3, #1
   1023c:	4699      	mov	r9, r3
   1023e:	4643      	mov	r3, r8
   10240:	781b      	ldrb	r3, [r3, #0]
		glcd_draw_line(48, 64, 48, 54, BLACK);
   10242:	2140      	movs	r1, #64	; 0x40
		percFlipper = !percFlipper; //  Toggle % sign 
   10244:	4053      	eors	r3, r2
   10246:	4642      	mov	r2, r8
   10248:	7013      	strb	r3, [r2, #0]
		glcd_draw_line(48, 64, 48, 54, BLACK);
   1024a:	464b      	mov	r3, r9
   1024c:	2230      	movs	r2, #48	; 0x30
   1024e:	9300      	str	r3, [sp, #0]
   10250:	2030      	movs	r0, #48	; 0x30
   10252:	3335      	adds	r3, #53	; 0x35
   10254:	47b8      	blx	r7
		glcd_draw_line(48, 54, 79, 54, BLACK);
   10256:	464b      	mov	r3, r9
   10258:	224f      	movs	r2, #79	; 0x4f
   1025a:	9300      	str	r3, [sp, #0]
   1025c:	2136      	movs	r1, #54	; 0x36
   1025e:	3335      	adds	r3, #53	; 0x35
   10260:	2030      	movs	r0, #48	; 0x30
   10262:	47b8      	blx	r7
		glcd_draw_line(79, 64, 79, 54, BLACK);
   10264:	464b      	mov	r3, r9
   10266:	224f      	movs	r2, #79	; 0x4f
   10268:	9300      	str	r3, [sp, #0]
   1026a:	2140      	movs	r1, #64	; 0x40
   1026c:	3335      	adds	r3, #53	; 0x35
   1026e:	204f      	movs	r0, #79	; 0x4f
   10270:	47b8      	blx	r7
   10272:	e78d      	b.n	10190 <print_data_screen+0x174>
		sprintf(display_str,"T:%4.1fC", currentTempC);
   10274:	4b15      	ldr	r3, [pc, #84]	; (102cc <print_data_screen+0x2b0>)
   10276:	6818      	ldr	r0, [r3, #0]
   10278:	4b16      	ldr	r3, [pc, #88]	; (102d4 <print_data_screen+0x2b8>)
   1027a:	4798      	blx	r3
   1027c:	4d16      	ldr	r5, [pc, #88]	; (102d8 <print_data_screen+0x2bc>)
   1027e:	0002      	movs	r2, r0
   10280:	000b      	movs	r3, r1
   10282:	0030      	movs	r0, r6
   10284:	4924      	ldr	r1, [pc, #144]	; (10318 <print_data_screen+0x2fc>)
   10286:	47a8      	blx	r5
   10288:	e760      	b.n	1014c <print_data_screen+0x130>
   1028a:	46c0      	nop			; (mov r8, r8)
   1028c:	0001ca59 	.word	0x0001ca59
   10290:	20002da0 	.word	0x20002da0
   10294:	00028999 	.word	0x00028999
   10298:	0002dcac 	.word	0x0002dcac
   1029c:	0001e1fd 	.word	0x0001e1fd
   102a0:	0002dcb0 	.word	0x0002dcb0
   102a4:	0002dcb8 	.word	0x0002dcb8
   102a8:	0001d159 	.word	0x0001d159
   102ac:	0002dcbc 	.word	0x0002dcbc
   102b0:	0001cb05 	.word	0x0001cb05
   102b4:	20000d68 	.word	0x20000d68
   102b8:	00015ed5 	.word	0x00015ed5
   102bc:	00011eb9 	.word	0x00011eb9
   102c0:	20003a44 	.word	0x20003a44
   102c4:	0000ff29 	.word	0x0000ff29
   102c8:	20002d20 	.word	0x20002d20
   102cc:	20002174 	.word	0x20002174
   102d0:	00014661 	.word	0x00014661
   102d4:	0002878d 	.word	0x0002878d
   102d8:	00028ab1 	.word	0x00028ab1
   102dc:	0002dcd0 	.word	0x0002dcd0
   102e0:	0001e2f5 	.word	0x0001e2f5
   102e4:	0000fa61 	.word	0x0000fa61
   102e8:	20002628 	.word	0x20002628
   102ec:	0002dcdc 	.word	0x0002dcdc
   102f0:	0000ee19 	.word	0x0000ee19
   102f4:	20000d5c 	.word	0x20000d5c
   102f8:	20000cb5 	.word	0x20000cb5
   102fc:	0000ed49 	.word	0x0000ed49
   10300:	0002dcec 	.word	0x0002dcec
   10304:	0000f0f9 	.word	0x0000f0f9
   10308:	0001db91 	.word	0x0001db91
   1030c:	0002dcf4 	.word	0x0002dcf4
   10310:	00028c1d 	.word	0x00028c1d
   10314:	0002dcfc 	.word	0x0002dcfc
   10318:	0002dcc4 	.word	0x0002dcc4

0001031c <print_Buff_to_Box>:
	
}



void print_Buff_to_Box(char strBuff[], uint32_t currInd, uint8_t xMin, uint8_t yMin, uint8_t xCharMax, uint8_t yCharMax){
   1031c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1031e:	46de      	mov	lr, fp
   10320:	4657      	mov	r7, sl
   10322:	464e      	mov	r6, r9
   10324:	4645      	mov	r5, r8
   10326:	b5e0      	push	{r5, r6, r7, lr}
   10328:	b083      	sub	sp, #12
   1032a:	001e      	movs	r6, r3
   1032c:	ab0c      	add	r3, sp, #48	; 0x30
   1032e:	781f      	ldrb	r7, [r3, #0]
   10330:	ab0d      	add	r3, sp, #52	; 0x34
   10332:	781b      	ldrb	r3, [r3, #0]
   10334:	9200      	str	r2, [sp, #0]
   10336:	469b      	mov	fp, r3
	int32_t bI;
	
	uint32_t totalChars = xCharMax*yCharMax;
   10338:	437b      	muls	r3, r7
   1033a:	2200      	movs	r2, #0
	
	if(totalChars>currInd){
   1033c:	428b      	cmp	r3, r1
   1033e:	d801      	bhi.n	10344 <print_Buff_to_Box+0x28>
		//  Enough room to display everything, start at beginning
		bI = 0;
	}else{
		bI = currInd-totalChars+1;
   10340:	3101      	adds	r1, #1
   10342:	1aca      	subs	r2, r1, r3
	}
	uint8_t i,j;
	char dispChar;
	for (j=0;j<yCharMax;j++){
   10344:	465b      	mov	r3, fp
   10346:	2b00      	cmp	r3, #0
   10348:	d036      	beq.n	103b8 <print_Buff_to_Box+0x9c>
   1034a:	2f00      	cmp	r7, #0
   1034c:	d034      	beq.n	103b8 <print_Buff_to_Box+0x9c>
   1034e:	1e7b      	subs	r3, r7, #1
   10350:	b2db      	uxtb	r3, r3
   10352:	3301      	adds	r3, #1
   10354:	9301      	str	r3, [sp, #4]
   10356:	00bb      	lsls	r3, r7, #2
   10358:	18ff      	adds	r7, r7, r3
   1035a:	9b00      	ldr	r3, [sp, #0]
   1035c:	4682      	mov	sl, r0
   1035e:	469c      	mov	ip, r3
   10360:	2300      	movs	r3, #0
   10362:	4699      	mov	r9, r3
   10364:	4b18      	ldr	r3, [pc, #96]	; (103c8 <print_Buff_to_Box+0xac>)
   10366:	4467      	add	r7, ip
   10368:	4698      	mov	r8, r3
   1036a:	4492      	add	sl, r2
   1036c:	b2ff      	uxtb	r7, r7
   1036e:	9c00      	ldr	r4, [sp, #0]
   10370:	4655      	mov	r5, sl
   10372:	e00a      	b.n	1038a <print_Buff_to_Box+0x6e>
		for(i = 0;i<xCharMax;i++){
			switch (strBuff[bI]){
   10374:	2a0d      	cmp	r2, #13
   10376:	d100      	bne.n	1037a <print_Buff_to_Box+0x5e>
				case 0x0a:
					dispChar = 'N';
					break;
				case 0x0d:
					dispChar = 'C';
   10378:	2243      	movs	r2, #67	; 0x43
					break;
				default:
					dispChar = strBuff[bI];
			};
			glcd_tiny_draw_char_xy(i*5+xMin, j*8+yMin, dispChar);	
   1037a:	0020      	movs	r0, r4
   1037c:	3405      	adds	r4, #5
   1037e:	0031      	movs	r1, r6
   10380:	b2e4      	uxtb	r4, r4
   10382:	47c0      	blx	r8
   10384:	3501      	adds	r5, #1
		for(i = 0;i<xCharMax;i++){
   10386:	42bc      	cmp	r4, r7
   10388:	d00b      	beq.n	103a2 <print_Buff_to_Box+0x86>
			switch (strBuff[bI]){
   1038a:	782a      	ldrb	r2, [r5, #0]
   1038c:	2a0a      	cmp	r2, #10
   1038e:	d1f1      	bne.n	10374 <print_Buff_to_Box+0x58>
			glcd_tiny_draw_char_xy(i*5+xMin, j*8+yMin, dispChar);	
   10390:	0020      	movs	r0, r4
   10392:	3405      	adds	r4, #5
					dispChar = 'N';
   10394:	224e      	movs	r2, #78	; 0x4e
			glcd_tiny_draw_char_xy(i*5+xMin, j*8+yMin, dispChar);	
   10396:	0031      	movs	r1, r6
   10398:	b2e4      	uxtb	r4, r4
   1039a:	47c0      	blx	r8
   1039c:	3501      	adds	r5, #1
		for(i = 0;i<xCharMax;i++){
   1039e:	42bc      	cmp	r4, r7
   103a0:	d1f3      	bne.n	1038a <print_Buff_to_Box+0x6e>
	for (j=0;j<yCharMax;j++){
   103a2:	464b      	mov	r3, r9
   103a4:	3301      	adds	r3, #1
   103a6:	b2db      	uxtb	r3, r3
   103a8:	4699      	mov	r9, r3
   103aa:	9b01      	ldr	r3, [sp, #4]
   103ac:	3608      	adds	r6, #8
   103ae:	469c      	mov	ip, r3
   103b0:	b2f6      	uxtb	r6, r6
   103b2:	44e2      	add	sl, ip
   103b4:	45cb      	cmp	fp, r9
   103b6:	d1da      	bne.n	1036e <print_Buff_to_Box+0x52>
		}
	}
	
	
	
}
   103b8:	b003      	add	sp, #12
   103ba:	bc3c      	pop	{r2, r3, r4, r5}
   103bc:	4690      	mov	r8, r2
   103be:	4699      	mov	r9, r3
   103c0:	46a2      	mov	sl, r4
   103c2:	46ab      	mov	fp, r5
   103c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103c6:	46c0      	nop			; (mov r8, r8)
   103c8:	0001e415 	.word	0x0001e415

000103cc <getCursor>:


uint8_t getCursor(enum INPUT input_temp, uint8_t cursor, uint8_t cursorN){

	switch (input_temp){
   103cc:	2801      	cmp	r0, #1
   103ce:	d007      	beq.n	103e0 <getCursor+0x14>
   103d0:	2802      	cmp	r0, #2
   103d2:	d103      	bne.n	103dc <getCursor+0x10>
			if (cursor>0){
				cursor--;
			}
			break;
		case input_button3:
			if ((cursor+1)<cursorN){
   103d4:	1c4b      	adds	r3, r1, #1
   103d6:	4293      	cmp	r3, r2
   103d8:	da00      	bge.n	103dc <getCursor+0x10>
				cursor++;
   103da:	b2d9      	uxtb	r1, r3
			break;
		default:
			break;
	};
	return cursor;
}
   103dc:	0008      	movs	r0, r1
   103de:	4770      	bx	lr
			if (cursor>0){
   103e0:	2900      	cmp	r1, #0
   103e2:	d0fb      	beq.n	103dc <getCursor+0x10>
				cursor--;
   103e4:	3901      	subs	r1, #1
   103e6:	b2c9      	uxtb	r1, r1
   103e8:	e7f8      	b.n	103dc <getCursor+0x10>
   103ea:	46c0      	nop			; (mov r8, r8)

000103ec <getDispX>:

float getDispX(float XYZ[3], uint8_t boxMin, uint8_t boxWidth, bool invert){
   103ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   103ee:	46de      	mov	lr, fp
   103f0:	4657      	mov	r7, sl
   103f2:	464e      	mov	r6, r9
   103f4:	4645      	mov	r5, r8
   103f6:	4680      	mov	r8, r0
   103f8:	b5e0      	push	{r5, r6, r7, lr}
   103fa:	469a      	mov	sl, r3
	//  X is displacement of vector along X axis
	//  Returned X dimension normalized to box width and offset by box min
	float magnitude, xPos;
	
	//  Total magnitude of vector
	magnitude = sqrt(pow(XYZ[0],2)+pow(XYZ[1],2)+pow(XYZ[2],2));
   103fc:	4b2e      	ldr	r3, [pc, #184]	; (104b8 <getDispX+0xcc>)
float getDispX(float XYZ[3], uint8_t boxMin, uint8_t boxWidth, bool invert){
   103fe:	b085      	sub	sp, #20
	magnitude = sqrt(pow(XYZ[0],2)+pow(XYZ[1],2)+pow(XYZ[2],2));
   10400:	4699      	mov	r9, r3
   10402:	6800      	ldr	r0, [r0, #0]
float getDispX(float XYZ[3], uint8_t boxMin, uint8_t boxWidth, bool invert){
   10404:	9103      	str	r1, [sp, #12]
   10406:	4693      	mov	fp, r2
	magnitude = sqrt(pow(XYZ[0],2)+pow(XYZ[1],2)+pow(XYZ[2],2));
   10408:	47c8      	blx	r9
   1040a:	4643      	mov	r3, r8
   1040c:	0004      	movs	r4, r0
   1040e:	6858      	ldr	r0, [r3, #4]
   10410:	000d      	movs	r5, r1
   10412:	47c8      	blx	r9
   10414:	4643      	mov	r3, r8
   10416:	0006      	movs	r6, r0
   10418:	6898      	ldr	r0, [r3, #8]
   1041a:	000f      	movs	r7, r1
   1041c:	47c8      	blx	r9
   1041e:	4b27      	ldr	r3, [pc, #156]	; (104bc <getDispX+0xd0>)
   10420:	9000      	str	r0, [sp, #0]
   10422:	9101      	str	r1, [sp, #4]
   10424:	4699      	mov	r9, r3
   10426:	0022      	movs	r2, r4
   10428:	002b      	movs	r3, r5
   1042a:	0020      	movs	r0, r4
   1042c:	0029      	movs	r1, r5
   1042e:	47c8      	blx	r9
   10430:	0032      	movs	r2, r6
   10432:	0004      	movs	r4, r0
   10434:	000d      	movs	r5, r1
   10436:	003b      	movs	r3, r7
   10438:	0030      	movs	r0, r6
   1043a:	0039      	movs	r1, r7
   1043c:	47c8      	blx	r9
   1043e:	4e20      	ldr	r6, [pc, #128]	; (104c0 <getDispX+0xd4>)
   10440:	0002      	movs	r2, r0
   10442:	000b      	movs	r3, r1
   10444:	0020      	movs	r0, r4
   10446:	0029      	movs	r1, r5
   10448:	47b0      	blx	r6
   1044a:	0004      	movs	r4, r0
   1044c:	000d      	movs	r5, r1
   1044e:	9800      	ldr	r0, [sp, #0]
   10450:	9901      	ldr	r1, [sp, #4]
   10452:	0002      	movs	r2, r0
   10454:	000b      	movs	r3, r1
   10456:	47c8      	blx	r9
   10458:	0002      	movs	r2, r0
   1045a:	000b      	movs	r3, r1
   1045c:	0020      	movs	r0, r4
   1045e:	0029      	movs	r1, r5
   10460:	47b0      	blx	r6
   10462:	4b18      	ldr	r3, [pc, #96]	; (104c4 <getDispX+0xd8>)
   10464:	4798      	blx	r3
   10466:	4b18      	ldr	r3, [pc, #96]	; (104c8 <getDispX+0xdc>)
   10468:	4798      	blx	r3
	// Normalize X dimension by magnitude
	// Scale -1:1
	xPos = XYZ[0]/magnitude;
   1046a:	4643      	mov	r3, r8
	magnitude = sqrt(pow(XYZ[0],2)+pow(XYZ[1],2)+pow(XYZ[2],2));
   1046c:	1c01      	adds	r1, r0, #0
	xPos = XYZ[0]/magnitude;
   1046e:	6818      	ldr	r0, [r3, #0]
   10470:	4b16      	ldr	r3, [pc, #88]	; (104cc <getDispX+0xe0>)
   10472:	4798      	blx	r3
	if (invert){
   10474:	4653      	mov	r3, sl
   10476:	2b00      	cmp	r3, #0
   10478:	d003      	beq.n	10482 <getDispX+0x96>
		xPos = -1*xPos;
   1047a:	2380      	movs	r3, #128	; 0x80
   1047c:	061b      	lsls	r3, r3, #24
   1047e:	469c      	mov	ip, r3
   10480:	4460      	add	r0, ip
	}
	//  Normalize to requested range
	xPos = ((xPos+1)/2) ;
   10482:	21fe      	movs	r1, #254	; 0xfe
   10484:	4c12      	ldr	r4, [pc, #72]	; (104d0 <getDispX+0xe4>)
   10486:	0589      	lsls	r1, r1, #22
   10488:	47a0      	blx	r4
   1048a:	21fc      	movs	r1, #252	; 0xfc
   1048c:	4e11      	ldr	r6, [pc, #68]	; (104d4 <getDispX+0xe8>)
   1048e:	0589      	lsls	r1, r1, #22
   10490:	47b0      	blx	r6
	xPos = xPos*boxWidth+boxMin;
   10492:	4d11      	ldr	r5, [pc, #68]	; (104d8 <getDispX+0xec>)
	xPos = ((xPos+1)/2) ;
   10494:	1c07      	adds	r7, r0, #0
	xPos = xPos*boxWidth+boxMin;
   10496:	4658      	mov	r0, fp
   10498:	47a8      	blx	r5
   1049a:	1c01      	adds	r1, r0, #0
   1049c:	1c38      	adds	r0, r7, #0
   1049e:	47b0      	blx	r6
   104a0:	1c06      	adds	r6, r0, #0
   104a2:	9803      	ldr	r0, [sp, #12]
   104a4:	47a8      	blx	r5
   104a6:	1c31      	adds	r1, r6, #0
   104a8:	47a0      	blx	r4
	
	return xPos;
	
}
   104aa:	b005      	add	sp, #20
   104ac:	bc3c      	pop	{r2, r3, r4, r5}
   104ae:	4690      	mov	r8, r2
   104b0:	4699      	mov	r9, r3
   104b2:	46a2      	mov	sl, r4
   104b4:	46ab      	mov	fp, r5
   104b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104b8:	0002878d 	.word	0x0002878d
   104bc:	00027ac5 	.word	0x00027ac5
   104c0:	00026c3d 	.word	0x00026c3d
   104c4:	00023365 	.word	0x00023365
   104c8:	00028831 	.word	0x00028831
   104cc:	00026179 	.word	0x00026179
   104d0:	00025e55 	.word	0x00025e55
   104d4:	00026559 	.word	0x00026559
   104d8:	00026b11 	.word	0x00026b11

000104dc <drawSoftKeys>:
	glcd_draw_line(xLine, yLine[button-1], xLine, yLine[button], BLACK); //  Vertical
	
}


void drawSoftKeys(const char *str1, const char *str2, const char *str3, const char *str4){
   104dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   104de:	46de      	mov	lr, fp
   104e0:	4657      	mov	r7, sl
   104e2:	464e      	mov	r6, r9
   104e4:	4645      	mov	r5, r8
   104e6:	b5e0      	push	{r5, r6, r7, lr}
	
	
	uint8_t strLength[4];
	char *strPtr[4];
	
	strLength[0] = strlen(str1);
   104e8:	4c44      	ldr	r4, [pc, #272]	; (105fc <drawSoftKeys+0x120>)
void drawSoftKeys(const char *str1, const char *str2, const char *str3, const char *str4){
   104ea:	b089      	sub	sp, #36	; 0x24
   104ec:	4688      	mov	r8, r1
   104ee:	0016      	movs	r6, r2
   104f0:	001d      	movs	r5, r3
   104f2:	4681      	mov	r9, r0
	strLength[0] = strlen(str1);
   104f4:	47a0      	blx	r4
   104f6:	466b      	mov	r3, sp
   104f8:	7318      	strb	r0, [r3, #12]
	strLength[1] = strlen(str2);
   104fa:	4640      	mov	r0, r8
   104fc:	47a0      	blx	r4
   104fe:	466b      	mov	r3, sp
   10500:	7358      	strb	r0, [r3, #13]
	strLength[2] = strlen(str3);
   10502:	0030      	movs	r0, r6
   10504:	47a0      	blx	r4
   10506:	466b      	mov	r3, sp
   10508:	7398      	strb	r0, [r3, #14]
	strLength[3] = strlen(str4);
   1050a:	0028      	movs	r0, r5
   1050c:	47a0      	blx	r4
   1050e:	466b      	mov	r3, sp
   10510:	73d8      	strb	r0, [r3, #15]
	
	strPtr[0] = str1;
   10512:	464b      	mov	r3, r9
   10514:	9304      	str	r3, [sp, #16]
	strPtr[1] = str2;
   10516:	4643      	mov	r3, r8
	strPtr[2] = str3;
	strPtr[3] = str4;
   10518:	2400      	movs	r4, #0
	strPtr[0] = str1;
   1051a:	af04      	add	r7, sp, #16
	strPtr[3] = str4;
   1051c:	60fd      	str	r5, [r7, #12]
   1051e:	4d38      	ldr	r5, [pc, #224]	; (10600 <drawSoftKeys+0x124>)
	strPtr[1] = str2;
   10520:	607b      	str	r3, [r7, #4]
	strPtr[2] = str3;
   10522:	60be      	str	r6, [r7, #8]
	
	for (i=0;i<4;i++){
		if (strLength[i]>0){
   10524:	466b      	mov	r3, sp
   10526:	220c      	movs	r2, #12
   10528:	189b      	adds	r3, r3, r2
   1052a:	5d1e      	ldrb	r6, [r3, r4]
   1052c:	2e00      	cmp	r6, #0
   1052e:	d041      	beq.n	105b4 <drawSoftKeys+0xd8>
			//  Draw Box
			xLine = 128-(strLength[i]*6)-1;
			
			//  Draw Text
			if (!strcmp(strPtr[i],"<")){
   10530:	00a3      	lsls	r3, r4, #2
   10532:	58fb      	ldr	r3, [r7, r3]
   10534:	4933      	ldr	r1, [pc, #204]	; (10604 <drawSoftKeys+0x128>)
   10536:	4698      	mov	r8, r3
   10538:	0018      	movs	r0, r3
   1053a:	4b33      	ldr	r3, [pc, #204]	; (10608 <drawSoftKeys+0x12c>)
   1053c:	4798      	blx	r3
   1053e:	2800      	cmp	r0, #0
   10540:	d055      	beq.n	105ee <drawSoftKeys+0x112>
				//  Arrow Up
				xLine = 117;
				glcd_draw_line(119, yLine[i]+10, 123, yLine[i]+6, BLACK);
				glcd_draw_line(123, yLine[i]+6, 127, yLine[i]+10, BLACK);
			}else if (!strcmp(strPtr[i],">")){
   10542:	4932      	ldr	r1, [pc, #200]	; (1060c <drawSoftKeys+0x130>)
   10544:	4640      	mov	r0, r8
   10546:	4b30      	ldr	r3, [pc, #192]	; (10608 <drawSoftKeys+0x12c>)
   10548:	4798      	blx	r3
   1054a:	2800      	cmp	r0, #0
   1054c:	d13d      	bne.n	105ca <drawSoftKeys+0xee>
				//  Arrow Down
				xLine = 117;
				glcd_draw_line(119, yLine[i]+6, 123, yLine[i]+10, BLACK);
   1054e:	782e      	ldrb	r6, [r5, #0]
   10550:	1db3      	adds	r3, r6, #6
   10552:	b2db      	uxtb	r3, r3
   10554:	4699      	mov	r9, r3
   10556:	360a      	adds	r6, #10
   10558:	b2f3      	uxtb	r3, r6
   1055a:	469b      	mov	fp, r3
   1055c:	2301      	movs	r3, #1
   1055e:	469a      	mov	sl, r3
   10560:	4e2b      	ldr	r6, [pc, #172]	; (10610 <drawSoftKeys+0x134>)
   10562:	9300      	str	r3, [sp, #0]
   10564:	227b      	movs	r2, #123	; 0x7b
   10566:	465b      	mov	r3, fp
   10568:	4649      	mov	r1, r9
   1056a:	3077      	adds	r0, #119	; 0x77
   1056c:	47b0      	blx	r6
				glcd_draw_line(123, yLine[i]+10, 127, yLine[i]+6, BLACK);
   1056e:	4653      	mov	r3, sl
   10570:	227f      	movs	r2, #127	; 0x7f
   10572:	9300      	str	r3, [sp, #0]
   10574:	4659      	mov	r1, fp
   10576:	464b      	mov	r3, r9
   10578:	207b      	movs	r0, #123	; 0x7b
				glcd_draw_line(119, yLine[i]+6, 123, yLine[i]+10, BLACK);
   1057a:	46b0      	mov	r8, r6
				glcd_draw_line(123, yLine[i]+10, 127, yLine[i]+6, BLACK);
   1057c:	47b0      	blx	r6
				xLine = 117;
   1057e:	2675      	movs	r6, #117	; 0x75
	glcd_draw_line(xLine, yLine[button-1],   128, yLine[button-1],   BLACK);//  Horizontal Top
   10580:	782b      	ldrb	r3, [r5, #0]
   10582:	2280      	movs	r2, #128	; 0x80
   10584:	4699      	mov	r9, r3
   10586:	2301      	movs	r3, #1
   10588:	469b      	mov	fp, r3
   1058a:	9300      	str	r3, [sp, #0]
   1058c:	4649      	mov	r1, r9
   1058e:	464b      	mov	r3, r9
   10590:	0030      	movs	r0, r6
   10592:	47c0      	blx	r8
	glcd_draw_line(xLine, yLine[button], 128, yLine[button], BLACK);//  Horizontal Bottom
   10594:	786b      	ldrb	r3, [r5, #1]
   10596:	2280      	movs	r2, #128	; 0x80
   10598:	469a      	mov	sl, r3
   1059a:	465b      	mov	r3, fp
   1059c:	4651      	mov	r1, sl
   1059e:	9300      	str	r3, [sp, #0]
   105a0:	0030      	movs	r0, r6
   105a2:	4653      	mov	r3, sl
   105a4:	47c0      	blx	r8
	glcd_draw_line(xLine, yLine[button-1], xLine, yLine[button], BLACK); //  Vertical
   105a6:	465b      	mov	r3, fp
   105a8:	0032      	movs	r2, r6
   105aa:	9300      	str	r3, [sp, #0]
   105ac:	4649      	mov	r1, r9
   105ae:	4653      	mov	r3, sl
   105b0:	0030      	movs	r0, r6
   105b2:	47c0      	blx	r8
   105b4:	3401      	adds	r4, #1
   105b6:	3501      	adds	r5, #1
	for (i=0;i<4;i++){
   105b8:	2c04      	cmp	r4, #4
   105ba:	d1b3      	bne.n	10524 <drawSoftKeys+0x48>
			
			
		}
	}
	
}
   105bc:	b009      	add	sp, #36	; 0x24
   105be:	bc3c      	pop	{r2, r3, r4, r5}
   105c0:	4690      	mov	r8, r2
   105c2:	4699      	mov	r9, r3
   105c4:	46a2      	mov	sl, r4
   105c6:	46ab      	mov	fp, r5
   105c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xLine = 128-(strLength[i]*6)-1;
   105ca:	00b0      	lsls	r0, r6, #2
   105cc:	1a36      	subs	r6, r6, r0
   105ce:	0076      	lsls	r6, r6, #1
   105d0:	b2f0      	uxtb	r0, r6
   105d2:	0006      	movs	r6, r0
				glcd_draw_string_xy(xLine+2,yLine[i]+4,strPtr[i]);
   105d4:	7829      	ldrb	r1, [r5, #0]
   105d6:	387f      	subs	r0, #127	; 0x7f
   105d8:	3104      	adds	r1, #4
   105da:	4642      	mov	r2, r8
   105dc:	4b0d      	ldr	r3, [pc, #52]	; (10614 <drawSoftKeys+0x138>)
   105de:	b2c9      	uxtb	r1, r1
   105e0:	b2c0      	uxtb	r0, r0
   105e2:	4798      	blx	r3
   105e4:	4b0a      	ldr	r3, [pc, #40]	; (10610 <drawSoftKeys+0x134>)
			xLine = 128-(strLength[i]*6)-1;
   105e6:	367f      	adds	r6, #127	; 0x7f
   105e8:	b2f6      	uxtb	r6, r6
   105ea:	4698      	mov	r8, r3
   105ec:	e7c8      	b.n	10580 <drawSoftKeys+0xa4>
				glcd_draw_line(119, yLine[i]+10, 123, yLine[i]+6, BLACK);
   105ee:	782e      	ldrb	r6, [r5, #0]
   105f0:	0033      	movs	r3, r6
   105f2:	330a      	adds	r3, #10
   105f4:	b2db      	uxtb	r3, r3
   105f6:	4699      	mov	r9, r3
   105f8:	3606      	adds	r6, #6
   105fa:	e7ad      	b.n	10558 <drawSoftKeys+0x7c>
   105fc:	00028c1d 	.word	0x00028c1d
   10600:	0002dd08 	.word	0x0002dd08
   10604:	0002dc58 	.word	0x0002dc58
   10608:	00028b85 	.word	0x00028b85
   1060c:	0002dc5c 	.word	0x0002dc5c
   10610:	0001cb05 	.word	0x0001cb05
   10614:	0001e1fd 	.word	0x0001e1fd

00010618 <draw2LineSoftKey>:


void draw2LineSoftKey(char *str1, char *str2, uint8_t button){
   10618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1061a:	4645      	mov	r5, r8
   1061c:	46de      	mov	lr, fp
   1061e:	4657      	mov	r7, sl
   10620:	464e      	mov	r6, r9
   10622:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t strLength;
	uint8_t xLine;
	
	if (strlen(str1)>strlen(str2)){
   10624:	4c24      	ldr	r4, [pc, #144]	; (106b8 <draw2LineSoftKey+0xa0>)
void draw2LineSoftKey(char *str1, char *str2, uint8_t button){
   10626:	b085      	sub	sp, #20
   10628:	4688      	mov	r8, r1
   1062a:	4681      	mov	r9, r0
   1062c:	4692      	mov	sl, r2
	if (strlen(str1)>strlen(str2)){
   1062e:	47a0      	blx	r4
   10630:	0005      	movs	r5, r0
   10632:	4640      	mov	r0, r8
   10634:	47a0      	blx	r4
   10636:	4285      	cmp	r5, r0
   10638:	d83c      	bhi.n	106b4 <draw2LineSoftKey+0x9c>
		strLength = strlen(str1);
	}else{
		strLength = strlen(str2);
   1063a:	b2c0      	uxtb	r0, r0
	}
	
	xLine = 128-(strLength*6)-1;	
   1063c:	0083      	lsls	r3, r0, #2
	glcd_draw_line(xLine, yLine[button-1],   128, yLine[button-1],   BLACK);//  Horizontal Top
   1063e:	4a1f      	ldr	r2, [pc, #124]	; (106bc <draw2LineSoftKey+0xa4>)
	xLine = 128-(strLength*6)-1;	
   10640:	1ac0      	subs	r0, r0, r3
   10642:	0040      	lsls	r0, r0, #1
   10644:	b2c3      	uxtb	r3, r0
	glcd_draw_line(xLine, yLine[button-1],   128, yLine[button-1],   BLACK);//  Horizontal Top
   10646:	4693      	mov	fp, r2
   10648:	4452      	add	r2, sl
	xLine = 128-(strLength*6)-1;	
   1064a:	9303      	str	r3, [sp, #12]
   1064c:	001d      	movs	r5, r3
	glcd_draw_line(xLine, yLine[button-1],   128, yLine[button-1],   BLACK);//  Horizontal Top
   1064e:	0013      	movs	r3, r2
   10650:	2701      	movs	r7, #1
   10652:	3b01      	subs	r3, #1
   10654:	781c      	ldrb	r4, [r3, #0]
	xLine = 128-(strLength*6)-1;	
   10656:	357f      	adds	r5, #127	; 0x7f
   10658:	b2ed      	uxtb	r5, r5
	glcd_draw_line(xLine, yLine[button-1],   128, yLine[button-1],   BLACK);//  Horizontal Top
   1065a:	4e19      	ldr	r6, [pc, #100]	; (106c0 <draw2LineSoftKey+0xa8>)
   1065c:	0023      	movs	r3, r4
   1065e:	0021      	movs	r1, r4
   10660:	0028      	movs	r0, r5
   10662:	9700      	str	r7, [sp, #0]
   10664:	2280      	movs	r2, #128	; 0x80
   10666:	47b0      	blx	r6
	glcd_draw_line(xLine, yLine[button], 128, yLine[button], BLACK);//  Horizontal Bottom
   10668:	4651      	mov	r1, sl
   1066a:	465a      	mov	r2, fp
   1066c:	5c52      	ldrb	r2, [r2, r1]
   1066e:	0028      	movs	r0, r5
   10670:	4692      	mov	sl, r2
   10672:	0013      	movs	r3, r2
   10674:	4651      	mov	r1, sl
   10676:	9700      	str	r7, [sp, #0]
   10678:	2280      	movs	r2, #128	; 0x80
   1067a:	47b0      	blx	r6
	glcd_draw_line(xLine, yLine[button-1], xLine, yLine[button], BLACK); //  Vertical
   1067c:	4653      	mov	r3, sl
   1067e:	002a      	movs	r2, r5
   10680:	0021      	movs	r1, r4
   10682:	0028      	movs	r0, r5
   10684:	9700      	str	r7, [sp, #0]
   10686:	47b0      	blx	r6
	
	drawBox(xLine, button);
	
	glcd_draw_string_xy(xLine+2,yLine[button-1]+1,str1);
   10688:	9d03      	ldr	r5, [sp, #12]
   1068a:	1c61      	adds	r1, r4, #1
   1068c:	3d7f      	subs	r5, #127	; 0x7f
   1068e:	b2ed      	uxtb	r5, r5
   10690:	464a      	mov	r2, r9
   10692:	0028      	movs	r0, r5
   10694:	4e0b      	ldr	r6, [pc, #44]	; (106c4 <draw2LineSoftKey+0xac>)
   10696:	b2c9      	uxtb	r1, r1
   10698:	47b0      	blx	r6
	glcd_draw_string_xy(xLine+2,yLine[button-1]+8,str2);
   1069a:	0021      	movs	r1, r4
   1069c:	3108      	adds	r1, #8
   1069e:	b2c9      	uxtb	r1, r1
   106a0:	4642      	mov	r2, r8
   106a2:	0028      	movs	r0, r5
   106a4:	47b0      	blx	r6
}
   106a6:	b005      	add	sp, #20
   106a8:	bc3c      	pop	{r2, r3, r4, r5}
   106aa:	4690      	mov	r8, r2
   106ac:	4699      	mov	r9, r3
   106ae:	46a2      	mov	sl, r4
   106b0:	46ab      	mov	fp, r5
   106b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strLength = strlen(str1);
   106b4:	b2e8      	uxtb	r0, r5
   106b6:	e7c1      	b.n	1063c <draw2LineSoftKey+0x24>
   106b8:	00028c1d 	.word	0x00028c1d
   106bc:	0002dd08 	.word	0x0002dd08
   106c0:	0001cb05 	.word	0x0001cb05
   106c4:	0001e1fd 	.word	0x0001e1fd

000106c8 <disp_report>:


void disp_report(uint8_t pageView){
   106c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   106ca:	46de      	mov	lr, fp
   106cc:	4657      	mov	r7, sl
   106ce:	464e      	mov	r6, r9
   106d0:	4645      	mov	r5, r8
   106d2:	b5e0      	push	{r5, r6, r7, lr}
   106d4:	b085      	sub	sp, #20
	switch(pageView){
   106d6:	2802      	cmp	r0, #2
   106d8:	d100      	bne.n	106dc <disp_report+0x14>
   106da:	e122      	b.n	10922 <disp_report+0x25a>
   106dc:	d800      	bhi.n	106e0 <disp_report+0x18>
   106de:	e0bd      	b.n	1085c <disp_report+0x194>
   106e0:	2803      	cmp	r0, #3
   106e2:	d052      	beq.n	1078a <disp_report+0xc2>
   106e4:	2804      	cmp	r0, #4
   106e6:	d149      	bne.n	1077c <disp_report+0xb4>
			sprintf(display_str,"M1:%.3f M2:%.3f", cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
			glcd_tiny_draw_string(0,6,display_str);
			break;
		//////////////////////// Distance Report
		case 4:
			sprintf(display_str, "Distance");
   106e8:	4cc4      	ldr	r4, [pc, #784]	; (109fc <disp_report+0x334>)
   106ea:	4fc5      	ldr	r7, [pc, #788]	; (10a00 <disp_report+0x338>)
   106ec:	2209      	movs	r2, #9
   106ee:	49c5      	ldr	r1, [pc, #788]	; (10a04 <disp_report+0x33c>)
   106f0:	0020      	movs	r0, r4
   106f2:	47b8      	blx	r7
			glcd_tiny_draw_string(0,1,display_str);
   106f4:	4dc4      	ldr	r5, [pc, #784]	; (10a08 <disp_report+0x340>)
   106f6:	0022      	movs	r2, r4
   106f8:	2101      	movs	r1, #1
   106fa:	2000      	movs	r0, #0
   106fc:	47a8      	blx	r5
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   106fe:	206e      	movs	r0, #110	; 0x6e
				timePtr->year,timePtr->month, timePtr->day,
   10700:	236a      	movs	r3, #106	; 0x6a
   10702:	2268      	movs	r2, #104	; 0x68
   10704:	49c1      	ldr	r1, [pc, #772]	; (10a0c <disp_report+0x344>)
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   10706:	4ec2      	ldr	r6, [pc, #776]	; (10a10 <disp_report+0x348>)
   10708:	5c08      	ldrb	r0, [r1, r0]
   1070a:	5ccb      	ldrb	r3, [r1, r3]
   1070c:	5a8a      	ldrh	r2, [r1, r2]
   1070e:	9003      	str	r0, [sp, #12]
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   10710:	206d      	movs	r0, #109	; 0x6d
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   10712:	5c08      	ldrb	r0, [r1, r0]
   10714:	9002      	str	r0, [sp, #8]
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   10716:	206c      	movs	r0, #108	; 0x6c
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   10718:	5c08      	ldrb	r0, [r1, r0]
   1071a:	9001      	str	r0, [sp, #4]
				timePtr->year,timePtr->month, timePtr->day,
   1071c:	206b      	movs	r0, #107	; 0x6b
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   1071e:	5c09      	ldrb	r1, [r1, r0]
   10720:	0020      	movs	r0, r4
   10722:	9100      	str	r1, [sp, #0]
   10724:	49bb      	ldr	r1, [pc, #748]	; (10a14 <disp_report+0x34c>)
   10726:	47b0      	blx	r6
			genTimestampString(display_str, &cal_report.time_rangeFinder,  1);
			glcd_tiny_draw_string(0,2,display_str);
   10728:	0022      	movs	r2, r4
   1072a:	2102      	movs	r1, #2
   1072c:	2000      	movs	r0, #0
   1072e:	47a8      	blx	r5
			sprintf(display_str,"Rangefinder Offset:");
   10730:	2214      	movs	r2, #20
   10732:	49b9      	ldr	r1, [pc, #740]	; (10a18 <disp_report+0x350>)
   10734:	0020      	movs	r0, r4
   10736:	47b8      	blx	r7
			glcd_tiny_draw_string(0,4,display_str);
   10738:	0022      	movs	r2, r4
   1073a:	2104      	movs	r1, #4
   1073c:	2000      	movs	r0, #0
   1073e:	47a8      	blx	r5
			sprintf(display_str,"  %.4f meters", dist_calst.dist_offset);
   10740:	4bb6      	ldr	r3, [pc, #728]	; (10a1c <disp_report+0x354>)
   10742:	4fb7      	ldr	r7, [pc, #732]	; (10a20 <disp_report+0x358>)
   10744:	6d98      	ldr	r0, [r3, #88]	; 0x58
   10746:	4698      	mov	r8, r3
   10748:	47b8      	blx	r7
   1074a:	000b      	movs	r3, r1
   1074c:	0002      	movs	r2, r0
   1074e:	49b5      	ldr	r1, [pc, #724]	; (10a24 <disp_report+0x35c>)
   10750:	0020      	movs	r0, r4
   10752:	47b0      	blx	r6
			glcd_tiny_draw_string(0,5,display_str);
   10754:	0022      	movs	r2, r4
   10756:	2105      	movs	r1, #5
   10758:	2000      	movs	r0, #0
   1075a:	47a8      	blx	r5
			sprintf(display_str,"  %.4f feet", dist_calst.dist_offset*MT2FT);
   1075c:	4643      	mov	r3, r8
   1075e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   10760:	47b8      	blx	r7
   10762:	4ab1      	ldr	r2, [pc, #708]	; (10a28 <disp_report+0x360>)
   10764:	4bb1      	ldr	r3, [pc, #708]	; (10a2c <disp_report+0x364>)
   10766:	4fb2      	ldr	r7, [pc, #712]	; (10a30 <disp_report+0x368>)
   10768:	47b8      	blx	r7
   1076a:	0002      	movs	r2, r0
   1076c:	000b      	movs	r3, r1
   1076e:	0020      	movs	r0, r4
   10770:	49b0      	ldr	r1, [pc, #704]	; (10a34 <disp_report+0x36c>)
   10772:	47b0      	blx	r6
			glcd_tiny_draw_string(0,6,display_str);
   10774:	0022      	movs	r2, r4
   10776:	2106      	movs	r1, #6
   10778:	2000      	movs	r0, #0
   1077a:	47a8      	blx	r5
			
		break;
	}
}
   1077c:	b005      	add	sp, #20
   1077e:	bc3c      	pop	{r2, r3, r4, r5}
   10780:	4690      	mov	r8, r2
   10782:	4699      	mov	r9, r3
   10784:	46a2      	mov	sl, r4
   10786:	46ab      	mov	fp, r5
   10788:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(display_str, "Azimuth");
   1078a:	4c9c      	ldr	r4, [pc, #624]	; (109fc <disp_report+0x334>)
   1078c:	2208      	movs	r2, #8
   1078e:	49aa      	ldr	r1, [pc, #680]	; (10a38 <disp_report+0x370>)
   10790:	4b9b      	ldr	r3, [pc, #620]	; (10a00 <disp_report+0x338>)
   10792:	0020      	movs	r0, r4
   10794:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   10796:	4b9c      	ldr	r3, [pc, #624]	; (10a08 <disp_report+0x340>)
   10798:	0022      	movs	r2, r4
   1079a:	2101      	movs	r1, #1
   1079c:	2000      	movs	r0, #0
   1079e:	4698      	mov	r8, r3
   107a0:	4798      	blx	r3
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   107a2:	2166      	movs	r1, #102	; 0x66
				timePtr->year,timePtr->month, timePtr->day,
   107a4:	2362      	movs	r3, #98	; 0x62
   107a6:	2260      	movs	r2, #96	; 0x60
   107a8:	4d98      	ldr	r5, [pc, #608]	; (10a0c <disp_report+0x344>)
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   107aa:	4e99      	ldr	r6, [pc, #612]	; (10a10 <disp_report+0x348>)
   107ac:	5c69      	ldrb	r1, [r5, r1]
   107ae:	5ceb      	ldrb	r3, [r5, r3]
   107b0:	5aaa      	ldrh	r2, [r5, r2]
   107b2:	9103      	str	r1, [sp, #12]
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   107b4:	2165      	movs	r1, #101	; 0x65
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   107b6:	5c69      	ldrb	r1, [r5, r1]
   107b8:	0020      	movs	r0, r4
   107ba:	9102      	str	r1, [sp, #8]
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   107bc:	2164      	movs	r1, #100	; 0x64
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   107be:	5c69      	ldrb	r1, [r5, r1]
   107c0:	46b1      	mov	r9, r6
   107c2:	9101      	str	r1, [sp, #4]
				timePtr->year,timePtr->month, timePtr->day,
   107c4:	2163      	movs	r1, #99	; 0x63
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   107c6:	5c69      	ldrb	r1, [r5, r1]
   107c8:	9100      	str	r1, [sp, #0]
   107ca:	4992      	ldr	r1, [pc, #584]	; (10a14 <disp_report+0x34c>)
   107cc:	47b0      	blx	r6
			glcd_tiny_draw_string(0,2,display_str);
   107ce:	0022      	movs	r2, r4
   107d0:	2102      	movs	r1, #2
   107d2:	2000      	movs	r0, #0
   107d4:	47c0      	blx	r8
			sprintf(display_str,"M1-M2 Delta X,Y,Z %%");
   107d6:	4999      	ldr	r1, [pc, #612]	; (10a3c <disp_report+0x374>)
   107d8:	0020      	movs	r0, r4
   107da:	47b0      	blx	r6
			glcd_tiny_draw_string(0,3,display_str);
   107dc:	0022      	movs	r2, r4
   107de:	2103      	movs	r1, #3
   107e0:	2000      	movs	r0, #0
   107e2:	47c0      	blx	r8
			cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   107e4:	4b96      	ldr	r3, [pc, #600]	; (10a40 <disp_report+0x378>)
   107e6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   107e8:	4996      	ldr	r1, [pc, #600]	; (10a44 <disp_report+0x37c>)
   107ea:	469b      	mov	fp, r3
   107ec:	4798      	blx	r3
			sprintf(display_str,"%.3f, %.3f, %.3f",
   107ee:	4b8c      	ldr	r3, [pc, #560]	; (10a20 <disp_report+0x358>)
   107f0:	469a      	mov	sl, r3
   107f2:	4798      	blx	r3
   107f4:	0006      	movs	r6, r0
   107f6:	000f      	movs	r7, r1
			cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   107f8:	6d68      	ldr	r0, [r5, #84]	; 0x54
   107fa:	4992      	ldr	r1, [pc, #584]	; (10a44 <disp_report+0x37c>)
   107fc:	47d8      	blx	fp
			sprintf(display_str,"%.3f, %.3f, %.3f",
   107fe:	47d0      	blx	sl
   10800:	9002      	str	r0, [sp, #8]
   10802:	9103      	str	r1, [sp, #12]
			cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   10804:	498f      	ldr	r1, [pc, #572]	; (10a44 <disp_report+0x37c>)
   10806:	6d28      	ldr	r0, [r5, #80]	; 0x50
   10808:	47d8      	blx	fp
			sprintf(display_str,"%.3f, %.3f, %.3f",
   1080a:	47d0      	blx	sl
   1080c:	003b      	movs	r3, r7
   1080e:	9000      	str	r0, [sp, #0]
   10810:	9101      	str	r1, [sp, #4]
   10812:	0032      	movs	r2, r6
   10814:	498c      	ldr	r1, [pc, #560]	; (10a48 <disp_report+0x380>)
   10816:	0020      	movs	r0, r4
   10818:	47c8      	blx	r9
			glcd_tiny_draw_string(0,4,display_str);
   1081a:	0022      	movs	r2, r4
   1081c:	2104      	movs	r1, #4
   1081e:	2000      	movs	r0, #0
   10820:	47c0      	blx	r8
			sprintf(display_str,"Magnitude Error %%");
   10822:	498a      	ldr	r1, [pc, #552]	; (10a4c <disp_report+0x384>)
   10824:	0020      	movs	r0, r4
   10826:	47c8      	blx	r9
			glcd_tiny_draw_string(0,5,display_str);
   10828:	0022      	movs	r2, r4
   1082a:	2105      	movs	r1, #5
   1082c:	2000      	movs	r0, #0
   1082e:	47c0      	blx	r8
			sprintf(display_str,"M1:%.3f M2:%.3f", cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
   10830:	4984      	ldr	r1, [pc, #528]	; (10a44 <disp_report+0x37c>)
   10832:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   10834:	47d8      	blx	fp
   10836:	47d0      	blx	sl
   10838:	0006      	movs	r6, r0
   1083a:	000f      	movs	r7, r1
   1083c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   1083e:	4981      	ldr	r1, [pc, #516]	; (10a44 <disp_report+0x37c>)
   10840:	47d8      	blx	fp
   10842:	47d0      	blx	sl
   10844:	0032      	movs	r2, r6
   10846:	003b      	movs	r3, r7
   10848:	9000      	str	r0, [sp, #0]
   1084a:	9101      	str	r1, [sp, #4]
   1084c:	4980      	ldr	r1, [pc, #512]	; (10a50 <disp_report+0x388>)
   1084e:	0020      	movs	r0, r4
   10850:	47c8      	blx	r9
			glcd_tiny_draw_string(0,6,display_str);
   10852:	0022      	movs	r2, r4
   10854:	2106      	movs	r1, #6
   10856:	2000      	movs	r0, #0
   10858:	47c0      	blx	r8
			break;
   1085a:	e78f      	b.n	1077c <disp_report+0xb4>
	switch(pageView){
   1085c:	2801      	cmp	r0, #1
   1085e:	d000      	beq.n	10862 <disp_report+0x19a>
   10860:	e78c      	b.n	1077c <disp_report+0xb4>
			sprintf(display_str, "Inclination & Azimuth");
   10862:	4c66      	ldr	r4, [pc, #408]	; (109fc <disp_report+0x334>)
   10864:	4b66      	ldr	r3, [pc, #408]	; (10a00 <disp_report+0x338>)
   10866:	2216      	movs	r2, #22
   10868:	497a      	ldr	r1, [pc, #488]	; (10a54 <disp_report+0x38c>)
   1086a:	0020      	movs	r0, r4
   1086c:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   1086e:	4e66      	ldr	r6, [pc, #408]	; (10a08 <disp_report+0x340>)
   10870:	0022      	movs	r2, r4
   10872:	2101      	movs	r1, #1
   10874:	2000      	movs	r0, #0
   10876:	47b0      	blx	r6
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   10878:	215e      	movs	r1, #94	; 0x5e
				timePtr->year,timePtr->month, timePtr->day,
   1087a:	235a      	movs	r3, #90	; 0x5a
   1087c:	2258      	movs	r2, #88	; 0x58
   1087e:	4d63      	ldr	r5, [pc, #396]	; (10a0c <disp_report+0x344>)
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   10880:	4f63      	ldr	r7, [pc, #396]	; (10a10 <disp_report+0x348>)
   10882:	5c69      	ldrb	r1, [r5, r1]
   10884:	5ceb      	ldrb	r3, [r5, r3]
   10886:	5aaa      	ldrh	r2, [r5, r2]
   10888:	9103      	str	r1, [sp, #12]
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   1088a:	215d      	movs	r1, #93	; 0x5d
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   1088c:	5c69      	ldrb	r1, [r5, r1]
   1088e:	0020      	movs	r0, r4
   10890:	9102      	str	r1, [sp, #8]
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   10892:	215c      	movs	r1, #92	; 0x5c
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   10894:	5c69      	ldrb	r1, [r5, r1]
   10896:	46ba      	mov	sl, r7
   10898:	9101      	str	r1, [sp, #4]
				timePtr->year,timePtr->month, timePtr->day,
   1089a:	215b      	movs	r1, #91	; 0x5b
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   1089c:	5c69      	ldrb	r1, [r5, r1]
   1089e:	9100      	str	r1, [sp, #0]
   108a0:	495c      	ldr	r1, [pc, #368]	; (10a14 <disp_report+0x34c>)
   108a2:	47b8      	blx	r7
			glcd_tiny_draw_string(0,2,display_str);
   108a4:	0022      	movs	r2, r4
   108a6:	2102      	movs	r1, #2
   108a8:	2000      	movs	r0, #0
   108aa:	47b0      	blx	r6
			sprintf(display_str,"4-Point Groups: %d", cal_report.groups);
   108ac:	686a      	ldr	r2, [r5, #4]
   108ae:	496a      	ldr	r1, [pc, #424]	; (10a58 <disp_report+0x390>)
   108b0:	0020      	movs	r0, r4
   108b2:	47b8      	blx	r7
			glcd_tiny_draw_string(0,3,display_str);
   108b4:	0022      	movs	r2, r4
   108b6:	2103      	movs	r1, #3
   108b8:	2000      	movs	r0, #0
   108ba:	47b0      	blx	r6
			sprintf(display_str,"Azm Stdev: %.3f", cal_report.azm_angle_err);
   108bc:	4b58      	ldr	r3, [pc, #352]	; (10a20 <disp_report+0x358>)
   108be:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   108c0:	4698      	mov	r8, r3
   108c2:	4798      	blx	r3
   108c4:	000b      	movs	r3, r1
   108c6:	0002      	movs	r2, r0
   108c8:	4964      	ldr	r1, [pc, #400]	; (10a5c <disp_report+0x394>)
   108ca:	0020      	movs	r0, r4
   108cc:	47b8      	blx	r7
			glcd_tiny_draw_string(0,5,display_str);
   108ce:	0022      	movs	r2, r4
   108d0:	2105      	movs	r1, #5
   108d2:	2000      	movs	r0, #0
   108d4:	47b0      	blx	r6
			glcd_draw_circle(98, 41, 1, BLACK);// Draw degree symbol
   108d6:	2301      	movs	r3, #1
   108d8:	2201      	movs	r2, #1
   108da:	2129      	movs	r1, #41	; 0x29
   108dc:	2062      	movs	r0, #98	; 0x62
   108de:	4f60      	ldr	r7, [pc, #384]	; (10a60 <disp_report+0x398>)
   108e0:	47b8      	blx	r7
			sprintf(display_str,"Inc Stdev: %.3f", cal_report.inc_angle_err);
   108e2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   108e4:	47c0      	blx	r8
   108e6:	000b      	movs	r3, r1
   108e8:	0002      	movs	r2, r0
   108ea:	495e      	ldr	r1, [pc, #376]	; (10a64 <disp_report+0x39c>)
   108ec:	0020      	movs	r0, r4
   108ee:	47d0      	blx	sl
			glcd_tiny_draw_string(0,6,display_str);
   108f0:	0022      	movs	r2, r4
   108f2:	2106      	movs	r1, #6
   108f4:	2000      	movs	r0, #0
   108f6:	47b0      	blx	r6
			glcd_draw_circle(98, 49, 1, BLACK);// Draw degree symbol
   108f8:	2301      	movs	r3, #1
   108fa:	2062      	movs	r0, #98	; 0x62
   108fc:	2201      	movs	r2, #1
   108fe:	2131      	movs	r1, #49	; 0x31
   10900:	47b8      	blx	r7
			if (options.current_unit_temp==fahrenheit){
   10902:	4b59      	ldr	r3, [pc, #356]	; (10a68 <disp_report+0x3a0>)
				sprintf(display_str,"Temp: %0.1f F", celsius2fahrenheit( cal_report.tempC_inc_azm));
   10904:	6f28      	ldr	r0, [r5, #112]	; 0x70
			if (options.current_unit_temp==fahrenheit){
   10906:	7a5b      	ldrb	r3, [r3, #9]
   10908:	2b05      	cmp	r3, #5
   1090a:	d06d      	beq.n	109e8 <disp_report+0x320>
				sprintf(display_str,"Temp: %0.1f C", cal_report.tempC_inc_azm);
   1090c:	47c0      	blx	r8
   1090e:	0002      	movs	r2, r0
   10910:	000b      	movs	r3, r1
   10912:	0020      	movs	r0, r4
   10914:	4955      	ldr	r1, [pc, #340]	; (10a6c <disp_report+0x3a4>)
   10916:	47d0      	blx	sl
			glcd_tiny_draw_string(0,7,display_str);
   10918:	0022      	movs	r2, r4
   1091a:	2107      	movs	r1, #7
   1091c:	2000      	movs	r0, #0
   1091e:	47b0      	blx	r6
			break;
   10920:	e72c      	b.n	1077c <disp_report+0xb4>
			sprintf(display_str, "Inclination:");
   10922:	4c36      	ldr	r4, [pc, #216]	; (109fc <disp_report+0x334>)
   10924:	220d      	movs	r2, #13
   10926:	4952      	ldr	r1, [pc, #328]	; (10a70 <disp_report+0x3a8>)
   10928:	4b35      	ldr	r3, [pc, #212]	; (10a00 <disp_report+0x338>)
   1092a:	0020      	movs	r0, r4
   1092c:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   1092e:	4b36      	ldr	r3, [pc, #216]	; (10a08 <disp_report+0x340>)
   10930:	0022      	movs	r2, r4
   10932:	2101      	movs	r1, #1
   10934:	2000      	movs	r0, #0
   10936:	4698      	mov	r8, r3
   10938:	4798      	blx	r3
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   1093a:	215e      	movs	r1, #94	; 0x5e
				timePtr->year,timePtr->month, timePtr->day,
   1093c:	235a      	movs	r3, #90	; 0x5a
   1093e:	2258      	movs	r2, #88	; 0x58
   10940:	4d32      	ldr	r5, [pc, #200]	; (10a0c <disp_report+0x344>)
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   10942:	4e33      	ldr	r6, [pc, #204]	; (10a10 <disp_report+0x348>)
   10944:	5c69      	ldrb	r1, [r5, r1]
   10946:	5ceb      	ldrb	r3, [r5, r3]
   10948:	5aaa      	ldrh	r2, [r5, r2]
   1094a:	9103      	str	r1, [sp, #12]
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   1094c:	215d      	movs	r1, #93	; 0x5d
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   1094e:	5c69      	ldrb	r1, [r5, r1]
   10950:	0020      	movs	r0, r4
   10952:	9102      	str	r1, [sp, #8]
				timePtr->hours, timePtr->minutes, timePtr->seconds);
   10954:	215c      	movs	r1, #92	; 0x5c
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   10956:	5c69      	ldrb	r1, [r5, r1]
   10958:	46b1      	mov	r9, r6
   1095a:	9101      	str	r1, [sp, #4]
				timePtr->year,timePtr->month, timePtr->day,
   1095c:	215b      	movs	r1, #91	; 0x5b
			sprintf(timeString,"%04d.%02d.%02d@%02d:%02d:%02d",
   1095e:	5c69      	ldrb	r1, [r5, r1]
   10960:	9100      	str	r1, [sp, #0]
   10962:	492c      	ldr	r1, [pc, #176]	; (10a14 <disp_report+0x34c>)
   10964:	47b0      	blx	r6
			glcd_tiny_draw_string(0,2,display_str);
   10966:	0022      	movs	r2, r4
   10968:	2102      	movs	r1, #2
   1096a:	2000      	movs	r0, #0
   1096c:	47c0      	blx	r8
			sprintf(display_str,"A1-A2 Delta X,Y,Z %%");
   1096e:	4941      	ldr	r1, [pc, #260]	; (10a74 <disp_report+0x3ac>)
   10970:	0020      	movs	r0, r4
   10972:	47b0      	blx	r6
			glcd_tiny_draw_string(0,3,display_str);
   10974:	0022      	movs	r2, r4
   10976:	2103      	movs	r1, #3
   10978:	2000      	movs	r0, #0
   1097a:	47c0      	blx	r8
				cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100);
   1097c:	4b30      	ldr	r3, [pc, #192]	; (10a40 <disp_report+0x378>)
   1097e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   10980:	4930      	ldr	r1, [pc, #192]	; (10a44 <disp_report+0x37c>)
   10982:	469b      	mov	fp, r3
   10984:	4798      	blx	r3
			sprintf(display_str,"%.3f, %.3f, %.3f",
   10986:	4b26      	ldr	r3, [pc, #152]	; (10a20 <disp_report+0x358>)
   10988:	469a      	mov	sl, r3
   1098a:	4798      	blx	r3
   1098c:	0006      	movs	r6, r0
   1098e:	000f      	movs	r7, r1
				cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100);
   10990:	6ca8      	ldr	r0, [r5, #72]	; 0x48
   10992:	492c      	ldr	r1, [pc, #176]	; (10a44 <disp_report+0x37c>)
   10994:	47d8      	blx	fp
			sprintf(display_str,"%.3f, %.3f, %.3f",
   10996:	47d0      	blx	sl
   10998:	9002      	str	r0, [sp, #8]
   1099a:	9103      	str	r1, [sp, #12]
				cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100);
   1099c:	4929      	ldr	r1, [pc, #164]	; (10a44 <disp_report+0x37c>)
   1099e:	6c68      	ldr	r0, [r5, #68]	; 0x44
   109a0:	47d8      	blx	fp
			sprintf(display_str,"%.3f, %.3f, %.3f",
   109a2:	47d0      	blx	sl
   109a4:	003b      	movs	r3, r7
   109a6:	9000      	str	r0, [sp, #0]
   109a8:	9101      	str	r1, [sp, #4]
   109aa:	0032      	movs	r2, r6
   109ac:	4926      	ldr	r1, [pc, #152]	; (10a48 <disp_report+0x380>)
   109ae:	0020      	movs	r0, r4
   109b0:	47c8      	blx	r9
			glcd_tiny_draw_string(0,4,display_str);
   109b2:	0022      	movs	r2, r4
   109b4:	2104      	movs	r1, #4
   109b6:	2000      	movs	r0, #0
   109b8:	47c0      	blx	r8
			sprintf(display_str,"Magnitude Error %%");
   109ba:	4924      	ldr	r1, [pc, #144]	; (10a4c <disp_report+0x384>)
   109bc:	0020      	movs	r0, r4
   109be:	47c8      	blx	r9
			glcd_tiny_draw_string(0,5,display_str);
   109c0:	0022      	movs	r2, r4
   109c2:	2105      	movs	r1, #5
   109c4:	2000      	movs	r0, #0
   109c6:	47c0      	blx	r8
			sprintf(display_str,"A1:%.3f A2:%.3f", cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100);
   109c8:	491e      	ldr	r1, [pc, #120]	; (10a44 <disp_report+0x37c>)
   109ca:	6b28      	ldr	r0, [r5, #48]	; 0x30
   109cc:	47d8      	blx	fp
   109ce:	47d0      	blx	sl
   109d0:	0006      	movs	r6, r0
   109d2:	000f      	movs	r7, r1
   109d4:	6b68      	ldr	r0, [r5, #52]	; 0x34
   109d6:	491b      	ldr	r1, [pc, #108]	; (10a44 <disp_report+0x37c>)
   109d8:	47d8      	blx	fp
   109da:	47d0      	blx	sl
   109dc:	0032      	movs	r2, r6
   109de:	9000      	str	r0, [sp, #0]
   109e0:	9101      	str	r1, [sp, #4]
   109e2:	003b      	movs	r3, r7
   109e4:	4924      	ldr	r1, [pc, #144]	; (10a78 <disp_report+0x3b0>)
   109e6:	e732      	b.n	1084e <disp_report+0x186>
				sprintf(display_str,"Temp: %0.1f F", celsius2fahrenheit( cal_report.tempC_inc_azm));
   109e8:	4b24      	ldr	r3, [pc, #144]	; (10a7c <disp_report+0x3b4>)
   109ea:	4798      	blx	r3
   109ec:	47c0      	blx	r8
   109ee:	0002      	movs	r2, r0
   109f0:	000b      	movs	r3, r1
   109f2:	0020      	movs	r0, r4
   109f4:	4922      	ldr	r1, [pc, #136]	; (10a80 <disp_report+0x3b8>)
   109f6:	47d0      	blx	sl
   109f8:	e78e      	b.n	10918 <disp_report+0x250>
   109fa:	46c0      	nop			; (mov r8, r8)
   109fc:	20002da0 	.word	0x20002da0
   10a00:	00028999 	.word	0x00028999
   10a04:	0002dc1c 	.word	0x0002dc1c
   10a08:	0001e2f5 	.word	0x0001e2f5
   10a0c:	20004870 	.word	0x20004870
   10a10:	00028ab1 	.word	0x00028ab1
   10a14:	0002dc60 	.word	0x0002dc60
   10a18:	0002dc28 	.word	0x0002dc28
   10a1c:	20005164 	.word	0x20005164
   10a20:	0002878d 	.word	0x0002878d
   10a24:	0002dc3c 	.word	0x0002dc3c
   10a28:	0abb44e5 	.word	0x0abb44e5
   10a2c:	400a3f29 	.word	0x400a3f29
   10a30:	00027ac5 	.word	0x00027ac5
   10a34:	0002dc4c 	.word	0x0002dc4c
   10a38:	0002dbec 	.word	0x0002dbec
   10a3c:	0002dbf4 	.word	0x0002dbf4
   10a40:	00026559 	.word	0x00026559
   10a44:	42c80000 	.word	0x42c80000
   10a48:	0002dbb4 	.word	0x0002dbb4
   10a4c:	0002dbc8 	.word	0x0002dbc8
   10a50:	0002dc0c 	.word	0x0002dc0c
   10a54:	0002db20 	.word	0x0002db20
   10a58:	0002db38 	.word	0x0002db38
   10a5c:	0002db4c 	.word	0x0002db4c
   10a60:	0001d159 	.word	0x0001d159
   10a64:	0002db5c 	.word	0x0002db5c
   10a68:	20002d20 	.word	0x20002d20
   10a6c:	0002db7c 	.word	0x0002db7c
   10a70:	0002db8c 	.word	0x0002db8c
   10a74:	0002db9c 	.word	0x0002db9c
   10a78:	0002dbdc 	.word	0x0002dbdc
   10a7c:	00014661 	.word	0x00014661
   10a80:	0002db6c 	.word	0x0002db6c

00010a84 <incDecData>:

uint16_t incDecData(uint16_t intData, int8_t increment, uint16_t dataMin, uint16_t dataMax){
	//  Increments "intData" by increment, assuming increment is either +1 or -1;
	
	//  Subtract 1
	if(increment<0){
   10a84:	2900      	cmp	r1, #0
   10a86:	db07      	blt.n	10a98 <incDecData+0x14>
			return (dataMax);
		}
	}
	
	//  Add 1
	if(increment>0){
   10a88:	d00c      	beq.n	10aa4 <incDecData+0x20>
   10a8a:	0011      	movs	r1, r2
		if(intData<dataMax){
   10a8c:	4298      	cmp	r0, r3
   10a8e:	d201      	bcs.n	10a94 <incDecData+0x10>
			return(intData+1);
   10a90:	3001      	adds	r0, #1
   10a92:	b281      	uxth	r1, r0
		}
	}
	
	// For increment == 0
	return intData;
}
   10a94:	0008      	movs	r0, r1
   10a96:	4770      	bx	lr
   10a98:	0019      	movs	r1, r3
		if(intData>dataMin){
   10a9a:	4290      	cmp	r0, r2
   10a9c:	d9fa      	bls.n	10a94 <incDecData+0x10>
			return(intData-1);
   10a9e:	3801      	subs	r0, #1
   10aa0:	b281      	uxth	r1, r0
   10aa2:	e7f7      	b.n	10a94 <incDecData+0x10>
   10aa4:	0001      	movs	r1, r0
   10aa6:	e7f5      	b.n	10a94 <incDecData+0x10>

00010aa8 <EEPROM_saveCalRawData>:
	}
	return tempAddr;
}


void EEPROM_saveCalRawData(enum CALTYPE caltype){
   10aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10aaa:	46de      	mov	lr, fp
   10aac:	4657      	mov	r7, sl
   10aae:	464e      	mov	r6, r9
   10ab0:	4645      	mov	r5, r8
   10ab2:	b5e0      	push	{r5, r6, r7, lr}
   10ab4:	b0a7      	sub	sp, #156	; 0x9c
	switch (caltype){
   10ab6:	2800      	cmp	r0, #0
   10ab8:	d100      	bne.n	10abc <EEPROM_saveCalRawData+0x14>
   10aba:	e13c      	b.n	10d36 <EEPROM_saveCalRawData+0x28e>
   10abc:	2801      	cmp	r0, #1
   10abe:	d100      	bne.n	10ac2 <EEPROM_saveCalRawData+0x1a>
   10ac0:	e110      	b.n	10ce4 <EEPROM_saveCalRawData+0x23c>
   10ac2:	23e1      	movs	r3, #225	; 0xe1
   10ac4:	011b      	lsls	r3, r3, #4
   10ac6:	469b      	mov	fp, r3
   10ac8:	2396      	movs	r3, #150	; 0x96
   10aca:	011b      	lsls	r3, r3, #4
   10acc:	9300      	str	r3, [sp, #0]
			tempAddr = 0;
   10ace:	2300      	movs	r3, #0
   10ad0:	2696      	movs	r6, #150	; 0x96
   10ad2:	4698      	mov	r8, r3
   10ad4:	00f6      	lsls	r6, r6, #3

	uint8_t send_buf[PAGE_SIZE+2];
	
	//  Packet template
	struct i2c_master_packet packet;
	packet.data = send_buf;
   10ad6:	ab05      	add	r3, sp, #20
   10ad8:	9303      	str	r3, [sp, #12]
	packet.ten_bit_address = false;
   10ada:	2300      	movs	r3, #0
   10adc:	aa02      	add	r2, sp, #8
   10ade:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
   10ae0:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
   10ae2:	7293      	strb	r3, [r2, #10]
	packet.address = EEPROM_add;
   10ae4:	3357      	adds	r3, #87	; 0x57
   10ae6:	8013      	strh	r3, [r2, #0]


	//  Initialize variables
	bytes_written = 0;
   10ae8:	2300      	movs	r3, #0
	address_packet = address_init;
	bytes_remainder = bytes_to_write;
   10aea:	2296      	movs	r2, #150	; 0x96
   10aec:	46b1      	mov	r9, r6
	bytes_written = 0;
   10aee:	469a      	mov	sl, r3
   10af0:	4646      	mov	r6, r8
   10af2:	4c96      	ldr	r4, [pc, #600]	; (10d4c <EEPROM_saveCalRawData+0x2a4>)
   10af4:	4d96      	ldr	r5, [pc, #600]	; (10d50 <EEPROM_saveCalRawData+0x2a8>)
	bytes_remainder = bytes_to_write;
   10af6:	00d2      	lsls	r2, r2, #3
	
	//  Send packets until everything is written
	while(bytes_written<bytes_to_write){
		//  Can only send in 32-byte page increments 
		//  Cannot pass page boundaries
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
   10af8:	237f      	movs	r3, #127	; 0x7f
   10afa:	2780      	movs	r7, #128	; 0x80
   10afc:	4033      	ands	r3, r6
   10afe:	1aff      	subs	r7, r7, r3
   10b00:	b2bf      	uxth	r7, r7
		//  Determine number of bytes to send in packet
		if (bytes_possible<bytes_remainder){
   10b02:	46b8      	mov	r8, r7
   10b04:	4297      	cmp	r7, r2
   10b06:	d200      	bcs.n	10b0a <EEPROM_saveCalRawData+0x62>
   10b08:	e10d      	b.n	10d26 <EEPROM_saveCalRawData+0x27e>
			bytes_packet = bytes_possible;
		}else{
			bytes_packet = bytes_remainder;
   10b0a:	b297      	uxth	r7, r2
   10b0c:	0412      	lsls	r2, r2, #16
   10b0e:	0c13      	lsrs	r3, r2, #16
   10b10:	4698      	mov	r8, r3
		}
		//  Set up Packet
		send_buf[0] = address_packet>>8;
   10b12:	aa02      	add	r2, sp, #8
   10b14:	0a33      	lsrs	r3, r6, #8
   10b16:	7313      	strb	r3, [r2, #12]
		send_buf[1] = address_packet & 0x00FF;
		packet.data_length = bytes_packet+2; //2 for data address
   10b18:	1cbb      	adds	r3, r7, #2
		send_buf[1] = address_packet & 0x00FF;
   10b1a:	7356      	strb	r6, [r2, #13]
		packet.data_length = bytes_packet+2; //2 for data address
   10b1c:	8053      	strh	r3, [r2, #2]
		for (i=0;i<bytes_packet;i++){
   10b1e:	2f00      	cmp	r7, #0
   10b20:	d00b      	beq.n	10b3a <EEPROM_saveCalRawData+0x92>
   10b22:	4b8c      	ldr	r3, [pc, #560]	; (10d54 <EEPROM_saveCalRawData+0x2ac>)
   10b24:	200e      	movs	r0, #14
   10b26:	4453      	add	r3, sl
   10b28:	0019      	movs	r1, r3
   10b2a:	ab02      	add	r3, sp, #8
   10b2c:	469c      	mov	ip, r3
			send_buf[i+2] = data_buf[bytes_written+i];
   10b2e:	1e7a      	subs	r2, r7, #1
   10b30:	b292      	uxth	r2, r2
   10b32:	3201      	adds	r2, #1
   10b34:	4460      	add	r0, ip
   10b36:	4b88      	ldr	r3, [pc, #544]	; (10d58 <EEPROM_saveCalRawData+0x2b0>)
   10b38:	4798      	blx	r3
		}
		
		// Send Packet
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10b3a:	a902      	add	r1, sp, #8
   10b3c:	0020      	movs	r0, r4
   10b3e:	47a8      	blx	r5
   10b40:	2800      	cmp	r0, #0
   10b42:	d1fa      	bne.n	10b3a <EEPROM_saveCalRawData+0x92>
		}
		//  Increment Variables
		bytes_written = bytes_written+bytes_packet;
   10b44:	44c2      	add	sl, r8
		bytes_remainder = bytes_to_write-bytes_written;
   10b46:	2196      	movs	r1, #150	; 0x96
   10b48:	4653      	mov	r3, sl
   10b4a:	00c9      	lsls	r1, r1, #3
   10b4c:	1aca      	subs	r2, r1, r3
	while(bytes_written<bytes_to_write){
   10b4e:	4b83      	ldr	r3, [pc, #524]	; (10d5c <EEPROM_saveCalRawData+0x2b4>)
		address_packet = address_packet+bytes_packet;
   10b50:	19be      	adds	r6, r7, r6
   10b52:	b2b6      	uxth	r6, r6
	while(bytes_written<bytes_to_write){
   10b54:	459a      	cmp	sl, r3
   10b56:	d9cf      	bls.n	10af8 <EEPROM_saveCalRawData+0x50>
	packet.data = send_buf;
   10b58:	ab05      	add	r3, sp, #20
   10b5a:	9303      	str	r3, [sp, #12]
	packet.ten_bit_address = false;
   10b5c:	ab02      	add	r3, sp, #8
   10b5e:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
   10b60:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
   10b62:	7298      	strb	r0, [r3, #10]
	packet.address = EEPROM_add;
   10b64:	2357      	movs	r3, #87	; 0x57
   10b66:	aa02      	add	r2, sp, #8
   10b68:	8013      	strh	r3, [r2, #0]
	bytes_written = 0;
   10b6a:	2300      	movs	r3, #0
   10b6c:	464e      	mov	r6, r9
   10b6e:	4699      	mov	r9, r3
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
   10b70:	337f      	adds	r3, #127	; 0x7f
   10b72:	469a      	mov	sl, r3
   10b74:	4653      	mov	r3, sl
   10b76:	2780      	movs	r7, #128	; 0x80
   10b78:	4033      	ands	r3, r6
   10b7a:	1aff      	subs	r7, r7, r3
   10b7c:	b2bf      	uxth	r7, r7
		if (bytes_possible<bytes_remainder){
   10b7e:	46b8      	mov	r8, r7
   10b80:	428f      	cmp	r7, r1
   10b82:	d200      	bcs.n	10b86 <EEPROM_saveCalRawData+0xde>
   10b84:	e0c7      	b.n	10d16 <EEPROM_saveCalRawData+0x26e>
			bytes_packet = bytes_remainder;
   10b86:	b28f      	uxth	r7, r1
   10b88:	0409      	lsls	r1, r1, #16
   10b8a:	0c0b      	lsrs	r3, r1, #16
		send_buf[0] = address_packet>>8;
   10b8c:	aa02      	add	r2, sp, #8
   10b8e:	4698      	mov	r8, r3
   10b90:	0a33      	lsrs	r3, r6, #8
   10b92:	7313      	strb	r3, [r2, #12]
		packet.data_length = bytes_packet+2; //2 for data address
   10b94:	1cbb      	adds	r3, r7, #2
		send_buf[1] = address_packet & 0x00FF;
   10b96:	7356      	strb	r6, [r2, #13]
		packet.data_length = bytes_packet+2; //2 for data address
   10b98:	8053      	strh	r3, [r2, #2]
		for (i=0;i<bytes_packet;i++){
   10b9a:	2f00      	cmp	r7, #0
   10b9c:	d00b      	beq.n	10bb6 <EEPROM_saveCalRawData+0x10e>
   10b9e:	4b70      	ldr	r3, [pc, #448]	; (10d60 <EEPROM_saveCalRawData+0x2b8>)
   10ba0:	200e      	movs	r0, #14
   10ba2:	444b      	add	r3, r9
   10ba4:	0019      	movs	r1, r3
   10ba6:	ab02      	add	r3, sp, #8
   10ba8:	469c      	mov	ip, r3
			send_buf[i+2] = data_buf[bytes_written+i];
   10baa:	1e7a      	subs	r2, r7, #1
   10bac:	b292      	uxth	r2, r2
   10bae:	3201      	adds	r2, #1
   10bb0:	4460      	add	r0, ip
   10bb2:	4b69      	ldr	r3, [pc, #420]	; (10d58 <EEPROM_saveCalRawData+0x2b0>)
   10bb4:	4798      	blx	r3
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10bb6:	a902      	add	r1, sp, #8
   10bb8:	0020      	movs	r0, r4
   10bba:	47a8      	blx	r5
   10bbc:	2800      	cmp	r0, #0
   10bbe:	d1fa      	bne.n	10bb6 <EEPROM_saveCalRawData+0x10e>
		bytes_written = bytes_written+bytes_packet;
   10bc0:	44c1      	add	r9, r8
		bytes_remainder = bytes_to_write-bytes_written;
   10bc2:	2296      	movs	r2, #150	; 0x96
   10bc4:	464b      	mov	r3, r9
   10bc6:	00d2      	lsls	r2, r2, #3
   10bc8:	1ad1      	subs	r1, r2, r3
	while(bytes_written<bytes_to_write){
   10bca:	4b64      	ldr	r3, [pc, #400]	; (10d5c <EEPROM_saveCalRawData+0x2b4>)
		address_packet = address_packet+bytes_packet;
   10bcc:	19be      	adds	r6, r7, r6
   10bce:	b2b6      	uxth	r6, r6
	while(bytes_written<bytes_to_write){
   10bd0:	4599      	cmp	r9, r3
   10bd2:	d9cf      	bls.n	10b74 <EEPROM_saveCalRawData+0xcc>
	packet.data = send_buf;
   10bd4:	ab05      	add	r3, sp, #20
   10bd6:	9303      	str	r3, [sp, #12]
	packet.ten_bit_address = false;
   10bd8:	ab02      	add	r3, sp, #8
   10bda:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
   10bdc:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
   10bde:	7298      	strb	r0, [r3, #10]
	packet.address = EEPROM_add;
   10be0:	2357      	movs	r3, #87	; 0x57
   10be2:	a902      	add	r1, sp, #8
   10be4:	800b      	strh	r3, [r1, #0]
	bytes_written = 0;
   10be6:	2300      	movs	r3, #0
   10be8:	4698      	mov	r8, r3
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
   10bea:	337f      	adds	r3, #127	; 0x7f
   10bec:	4699      	mov	r9, r3
   10bee:	4b5a      	ldr	r3, [pc, #360]	; (10d58 <EEPROM_saveCalRawData+0x2b0>)
   10bf0:	9f00      	ldr	r7, [sp, #0]
   10bf2:	469a      	mov	sl, r3
   10bf4:	465b      	mov	r3, fp
   10bf6:	9301      	str	r3, [sp, #4]
   10bf8:	464b      	mov	r3, r9
   10bfa:	2680      	movs	r6, #128	; 0x80
   10bfc:	403b      	ands	r3, r7
   10bfe:	1af6      	subs	r6, r6, r3
   10c00:	b2b6      	uxth	r6, r6
		if (bytes_possible<bytes_remainder){
   10c02:	46b3      	mov	fp, r6
   10c04:	4296      	cmp	r6, r2
   10c06:	d200      	bcs.n	10c0a <EEPROM_saveCalRawData+0x162>
   10c08:	e07d      	b.n	10d06 <EEPROM_saveCalRawData+0x25e>
			bytes_packet = bytes_remainder;
   10c0a:	b296      	uxth	r6, r2
   10c0c:	0412      	lsls	r2, r2, #16
   10c0e:	0c13      	lsrs	r3, r2, #16
   10c10:	469b      	mov	fp, r3
		send_buf[0] = address_packet>>8;
   10c12:	aa02      	add	r2, sp, #8
   10c14:	0a3b      	lsrs	r3, r7, #8
   10c16:	7313      	strb	r3, [r2, #12]
		packet.data_length = bytes_packet+2; //2 for data address
   10c18:	1cb3      	adds	r3, r6, #2
		send_buf[1] = address_packet & 0x00FF;
   10c1a:	7357      	strb	r7, [r2, #13]
		packet.data_length = bytes_packet+2; //2 for data address
   10c1c:	8053      	strh	r3, [r2, #2]
		for (i=0;i<bytes_packet;i++){
   10c1e:	2e00      	cmp	r6, #0
   10c20:	d00a      	beq.n	10c38 <EEPROM_saveCalRawData+0x190>
   10c22:	4b50      	ldr	r3, [pc, #320]	; (10d64 <EEPROM_saveCalRawData+0x2bc>)
   10c24:	200e      	movs	r0, #14
   10c26:	4443      	add	r3, r8
   10c28:	0019      	movs	r1, r3
   10c2a:	ab02      	add	r3, sp, #8
   10c2c:	469c      	mov	ip, r3
			send_buf[i+2] = data_buf[bytes_written+i];
   10c2e:	1e72      	subs	r2, r6, #1
   10c30:	b292      	uxth	r2, r2
   10c32:	3201      	adds	r2, #1
   10c34:	4460      	add	r0, ip
   10c36:	47d0      	blx	sl
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10c38:	a902      	add	r1, sp, #8
   10c3a:	0020      	movs	r0, r4
   10c3c:	47a8      	blx	r5
   10c3e:	2800      	cmp	r0, #0
   10c40:	d1fa      	bne.n	10c38 <EEPROM_saveCalRawData+0x190>
		bytes_written = bytes_written+bytes_packet;
   10c42:	44d8      	add	r8, fp
		bytes_remainder = bytes_to_write-bytes_written;
   10c44:	2396      	movs	r3, #150	; 0x96
   10c46:	4642      	mov	r2, r8
	while(bytes_written<bytes_to_write){
   10c48:	4944      	ldr	r1, [pc, #272]	; (10d5c <EEPROM_saveCalRawData+0x2b4>)
		bytes_remainder = bytes_to_write-bytes_written;
   10c4a:	00db      	lsls	r3, r3, #3
		address_packet = address_packet+bytes_packet;
   10c4c:	19f7      	adds	r7, r6, r7
		bytes_remainder = bytes_to_write-bytes_written;
   10c4e:	1a9a      	subs	r2, r3, r2
		address_packet = address_packet+bytes_packet;
   10c50:	b2bf      	uxth	r7, r7
	while(bytes_written<bytes_to_write){
   10c52:	4588      	cmp	r8, r1
   10c54:	d9d0      	bls.n	10bf8 <EEPROM_saveCalRawData+0x150>
   10c56:	9a01      	ldr	r2, [sp, #4]
	packet.address = EEPROM_add;
   10c58:	a902      	add	r1, sp, #8
   10c5a:	4693      	mov	fp, r2
	packet.data = send_buf;
   10c5c:	aa05      	add	r2, sp, #20
   10c5e:	9203      	str	r2, [sp, #12]
	packet.ten_bit_address = false;
   10c60:	aa02      	add	r2, sp, #8
   10c62:	7210      	strb	r0, [r2, #8]
	packet.high_speed = false;
   10c64:	7250      	strb	r0, [r2, #9]
	packet.hs_master_code = 0x0;
   10c66:	7290      	strb	r0, [r2, #10]
	packet.address = EEPROM_add;
   10c68:	2257      	movs	r2, #87	; 0x57
   10c6a:	800a      	strh	r2, [r1, #0]
	bytes_written = 0;
   10c6c:	2200      	movs	r2, #0
   10c6e:	4690      	mov	r8, r2
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
   10c70:	327f      	adds	r2, #127	; 0x7f
   10c72:	4691      	mov	r9, r2
   10c74:	4a38      	ldr	r2, [pc, #224]	; (10d58 <EEPROM_saveCalRawData+0x2b0>)
   10c76:	465f      	mov	r7, fp
   10c78:	4692      	mov	sl, r2
   10c7a:	464a      	mov	r2, r9
   10c7c:	2680      	movs	r6, #128	; 0x80
   10c7e:	403a      	ands	r2, r7
   10c80:	1ab6      	subs	r6, r6, r2
   10c82:	b2b6      	uxth	r6, r6
		if (bytes_possible<bytes_remainder){
   10c84:	46b3      	mov	fp, r6
   10c86:	429e      	cmp	r6, r3
   10c88:	d335      	bcc.n	10cf6 <EEPROM_saveCalRawData+0x24e>
			bytes_packet = bytes_remainder;
   10c8a:	b29e      	uxth	r6, r3
   10c8c:	041b      	lsls	r3, r3, #16
   10c8e:	0c1b      	lsrs	r3, r3, #16
		send_buf[0] = address_packet>>8;
   10c90:	aa02      	add	r2, sp, #8
   10c92:	469b      	mov	fp, r3
   10c94:	0a3b      	lsrs	r3, r7, #8
   10c96:	7313      	strb	r3, [r2, #12]
		packet.data_length = bytes_packet+2; //2 for data address
   10c98:	1cb3      	adds	r3, r6, #2
		send_buf[1] = address_packet & 0x00FF;
   10c9a:	7357      	strb	r7, [r2, #13]
		packet.data_length = bytes_packet+2; //2 for data address
   10c9c:	8053      	strh	r3, [r2, #2]
		for (i=0;i<bytes_packet;i++){
   10c9e:	2e00      	cmp	r6, #0
   10ca0:	d00a      	beq.n	10cb8 <EEPROM_saveCalRawData+0x210>
   10ca2:	4b31      	ldr	r3, [pc, #196]	; (10d68 <EEPROM_saveCalRawData+0x2c0>)
   10ca4:	200e      	movs	r0, #14
   10ca6:	4443      	add	r3, r8
   10ca8:	0019      	movs	r1, r3
   10caa:	ab02      	add	r3, sp, #8
   10cac:	469c      	mov	ip, r3
			send_buf[i+2] = data_buf[bytes_written+i];
   10cae:	1e72      	subs	r2, r6, #1
   10cb0:	b292      	uxth	r2, r2
   10cb2:	3201      	adds	r2, #1
   10cb4:	4460      	add	r0, ip
   10cb6:	47d0      	blx	sl
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10cb8:	a902      	add	r1, sp, #8
   10cba:	0020      	movs	r0, r4
   10cbc:	47a8      	blx	r5
   10cbe:	2800      	cmp	r0, #0
   10cc0:	d1fa      	bne.n	10cb8 <EEPROM_saveCalRawData+0x210>
		bytes_written = bytes_written+bytes_packet;
   10cc2:	44d8      	add	r8, fp
		bytes_remainder = bytes_to_write-bytes_written;
   10cc4:	2396      	movs	r3, #150	; 0x96
   10cc6:	4642      	mov	r2, r8
   10cc8:	00db      	lsls	r3, r3, #3
   10cca:	1a9b      	subs	r3, r3, r2
	while(bytes_written<bytes_to_write){
   10ccc:	4a23      	ldr	r2, [pc, #140]	; (10d5c <EEPROM_saveCalRawData+0x2b4>)
		address_packet = address_packet+bytes_packet;
   10cce:	19f7      	adds	r7, r6, r7
   10cd0:	b2bf      	uxth	r7, r7
	while(bytes_written<bytes_to_write){
   10cd2:	4590      	cmp	r8, r2
   10cd4:	d9d1      	bls.n	10c7a <EEPROM_saveCalRawData+0x1d2>
}
   10cd6:	b027      	add	sp, #156	; 0x9c
   10cd8:	bc3c      	pop	{r2, r3, r4, r5}
   10cda:	4690      	mov	r8, r2
   10cdc:	4699      	mov	r9, r3
   10cde:	46a2      	mov	sl, r4
   10ce0:	46ab      	mov	fp, r5
   10ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (caltype){
   10ce4:	4b21      	ldr	r3, [pc, #132]	; (10d6c <EEPROM_saveCalRawData+0x2c4>)
   10ce6:	4e22      	ldr	r6, [pc, #136]	; (10d70 <EEPROM_saveCalRawData+0x2c8>)
   10ce8:	469b      	mov	fp, r3
   10cea:	4b22      	ldr	r3, [pc, #136]	; (10d74 <EEPROM_saveCalRawData+0x2cc>)
   10cec:	9300      	str	r3, [sp, #0]
			tempAddr = add_calRawData_qazm;
   10cee:	2394      	movs	r3, #148	; 0x94
   10cf0:	019b      	lsls	r3, r3, #6
   10cf2:	4698      	mov	r8, r3
   10cf4:	e6ef      	b.n	10ad6 <EEPROM_saveCalRawData+0x2e>
		send_buf[0] = address_packet>>8;
   10cf6:	a902      	add	r1, sp, #8
   10cf8:	0a3b      	lsrs	r3, r7, #8
   10cfa:	730b      	strb	r3, [r1, #12]
		packet.data_length = bytes_packet+2; //2 for data address
   10cfc:	2382      	movs	r3, #130	; 0x82
   10cfe:	1a9a      	subs	r2, r3, r2
		send_buf[1] = address_packet & 0x00FF;
   10d00:	734f      	strb	r7, [r1, #13]
		packet.data_length = bytes_packet+2; //2 for data address
   10d02:	804a      	strh	r2, [r1, #2]
   10d04:	e7cd      	b.n	10ca2 <EEPROM_saveCalRawData+0x1fa>
		send_buf[0] = address_packet>>8;
   10d06:	a902      	add	r1, sp, #8
   10d08:	0a3a      	lsrs	r2, r7, #8
   10d0a:	730a      	strb	r2, [r1, #12]
		packet.data_length = bytes_packet+2; //2 for data address
   10d0c:	2282      	movs	r2, #130	; 0x82
   10d0e:	1ad3      	subs	r3, r2, r3
		send_buf[1] = address_packet & 0x00FF;
   10d10:	734f      	strb	r7, [r1, #13]
		packet.data_length = bytes_packet+2; //2 for data address
   10d12:	804b      	strh	r3, [r1, #2]
   10d14:	e785      	b.n	10c22 <EEPROM_saveCalRawData+0x17a>
		send_buf[0] = address_packet>>8;
   10d16:	a902      	add	r1, sp, #8
   10d18:	0a32      	lsrs	r2, r6, #8
   10d1a:	730a      	strb	r2, [r1, #12]
		packet.data_length = bytes_packet+2; //2 for data address
   10d1c:	2282      	movs	r2, #130	; 0x82
   10d1e:	1ad3      	subs	r3, r2, r3
		send_buf[1] = address_packet & 0x00FF;
   10d20:	734e      	strb	r6, [r1, #13]
		packet.data_length = bytes_packet+2; //2 for data address
   10d22:	804b      	strh	r3, [r1, #2]
   10d24:	e73b      	b.n	10b9e <EEPROM_saveCalRawData+0xf6>
		send_buf[0] = address_packet>>8;
   10d26:	a902      	add	r1, sp, #8
   10d28:	0a32      	lsrs	r2, r6, #8
   10d2a:	730a      	strb	r2, [r1, #12]
		packet.data_length = bytes_packet+2; //2 for data address
   10d2c:	2282      	movs	r2, #130	; 0x82
   10d2e:	1ad3      	subs	r3, r2, r3
		send_buf[1] = address_packet & 0x00FF;
   10d30:	734e      	strb	r6, [r1, #13]
		packet.data_length = bytes_packet+2; //2 for data address
   10d32:	804b      	strh	r3, [r1, #2]
   10d34:	e6f5      	b.n	10b22 <EEPROM_saveCalRawData+0x7a>
	switch (caltype){
   10d36:	4b10      	ldr	r3, [pc, #64]	; (10d78 <EEPROM_saveCalRawData+0x2d0>)
   10d38:	4e10      	ldr	r6, [pc, #64]	; (10d7c <EEPROM_saveCalRawData+0x2d4>)
   10d3a:	469b      	mov	fp, r3
   10d3c:	23cb      	movs	r3, #203	; 0xcb
   10d3e:	015b      	lsls	r3, r3, #5
   10d40:	9300      	str	r3, [sp, #0]
			tempAddr = add_calRawData_full;
   10d42:	2380      	movs	r3, #128	; 0x80
   10d44:	015b      	lsls	r3, r3, #5
   10d46:	4698      	mov	r8, r3
   10d48:	e6c5      	b.n	10ad6 <EEPROM_saveCalRawData+0x2e>
   10d4a:	46c0      	nop			; (mov r8, r8)
   10d4c:	20000e78 	.word	0x20000e78
   10d50:	00018c95 	.word	0x00018c95
   10d54:	20003d28 	.word	0x20003d28
   10d58:	00028999 	.word	0x00028999
   10d5c:	000004af 	.word	0x000004af
   10d60:	20002178 	.word	0x20002178
   10d64:	20002e80 	.word	0x20002e80
   10d68:	20001b30 	.word	0x20001b30
   10d6c:	00003310 	.word	0x00003310
   10d70:	000029b0 	.word	0x000029b0
   10d74:	00002e60 	.word	0x00002e60
   10d78:	00001e10 	.word	0x00001e10
   10d7c:	000014b0 	.word	0x000014b0

00010d80 <EEPROM_loadCalRawData>:
void EEPROM_loadCalRawData(enum CALTYPE caltype){
   10d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d82:	46de      	mov	lr, fp
   10d84:	4657      	mov	r7, sl
   10d86:	464e      	mov	r6, r9
   10d88:	4645      	mov	r5, r8
   10d8a:	b5e0      	push	{r5, r6, r7, lr}
   10d8c:	b085      	sub	sp, #20
	switch (caltype){
   10d8e:	2800      	cmp	r0, #0
   10d90:	d100      	bne.n	10d94 <EEPROM_loadCalRawData+0x14>
   10d92:	e088      	b.n	10ea6 <EEPROM_loadCalRawData+0x126>
   10d94:	2801      	cmp	r0, #1
   10d96:	d100      	bne.n	10d9a <EEPROM_loadCalRawData+0x1a>
   10d98:	e082      	b.n	10ea0 <EEPROM_loadCalRawData+0x120>
   10d9a:	2500      	movs	r5, #0
   10d9c:	2304      	movs	r3, #4
   10d9e:	469b      	mov	fp, r3
   10da0:	3305      	adds	r3, #5
   10da2:	469a      	mov	sl, r3
   10da4:	3305      	adds	r3, #5
	struct i2c_master_packet packet = {
   10da6:	ac01      	add	r4, sp, #4
	switch (caltype){
   10da8:	4699      	mov	r9, r3
	struct i2c_master_packet packet = {
   10daa:	4b40      	ldr	r3, [pc, #256]	; (10eac <EEPROM_loadCalRawData+0x12c>)
   10dac:	220c      	movs	r2, #12
   10dae:	2100      	movs	r1, #0
   10db0:	0020      	movs	r0, r4
   10db2:	4698      	mov	r8, r3
   10db4:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
   10db6:	466b      	mov	r3, sp
	add_buf[1] = data_address & 0xff;//low byte
   10db8:	466a      	mov	r2, sp
	add_buf[0] = data_address>>8;//high byte
   10dba:	701d      	strb	r5, [r3, #0]
	add_buf[1] = data_address & 0xff;//low byte
   10dbc:	2300      	movs	r3, #0
   10dbe:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
   10dc0:	4b3b      	ldr	r3, [pc, #236]	; (10eb0 <EEPROM_loadCalRawData+0x130>)
   10dc2:	4d3c      	ldr	r5, [pc, #240]	; (10eb4 <EEPROM_loadCalRawData+0x134>)
   10dc4:	4f3c      	ldr	r7, [pc, #240]	; (10eb8 <EEPROM_loadCalRawData+0x138>)
	packet.data = add_buf;
   10dc6:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
   10dc8:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10dca:	0021      	movs	r1, r4
   10dcc:	0028      	movs	r0, r5
   10dce:	47b8      	blx	r7
   10dd0:	2800      	cmp	r0, #0
   10dd2:	d1fa      	bne.n	10dca <EEPROM_loadCalRawData+0x4a>
	packet.data = data_buf;
   10dd4:	4b39      	ldr	r3, [pc, #228]	; (10ebc <EEPROM_loadCalRawData+0x13c>)
   10dd6:	4e3a      	ldr	r6, [pc, #232]	; (10ec0 <EEPROM_loadCalRawData+0x140>)
   10dd8:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
   10dda:	2396      	movs	r3, #150	; 0x96
   10ddc:	00db      	lsls	r3, r3, #3
   10dde:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10de0:	0021      	movs	r1, r4
   10de2:	0028      	movs	r0, r5
   10de4:	47b0      	blx	r6
   10de6:	2800      	cmp	r0, #0
   10de8:	d1fa      	bne.n	10de0 <EEPROM_loadCalRawData+0x60>
	struct i2c_master_packet packet = {
   10dea:	220c      	movs	r2, #12
   10dec:	2100      	movs	r1, #0
   10dee:	0020      	movs	r0, r4
   10df0:	47c0      	blx	r8
	add_buf[0] = data_address>>8;//high byte
   10df2:	466b      	mov	r3, sp
   10df4:	465a      	mov	r2, fp
   10df6:	701a      	strb	r2, [r3, #0]
	add_buf[1] = data_address & 0xff;//low byte
   10df8:	23b0      	movs	r3, #176	; 0xb0
   10dfa:	466a      	mov	r2, sp
   10dfc:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
   10dfe:	4b2c      	ldr	r3, [pc, #176]	; (10eb0 <EEPROM_loadCalRawData+0x130>)
	packet.data = add_buf;
   10e00:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
   10e02:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10e04:	0021      	movs	r1, r4
   10e06:	0028      	movs	r0, r5
   10e08:	47b8      	blx	r7
   10e0a:	2800      	cmp	r0, #0
   10e0c:	d1fa      	bne.n	10e04 <EEPROM_loadCalRawData+0x84>
	packet.data = data_buf;
   10e0e:	4b2d      	ldr	r3, [pc, #180]	; (10ec4 <EEPROM_loadCalRawData+0x144>)
   10e10:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
   10e12:	2396      	movs	r3, #150	; 0x96
   10e14:	00db      	lsls	r3, r3, #3
   10e16:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10e18:	0021      	movs	r1, r4
   10e1a:	0028      	movs	r0, r5
   10e1c:	47b0      	blx	r6
   10e1e:	2800      	cmp	r0, #0
   10e20:	d1fa      	bne.n	10e18 <EEPROM_loadCalRawData+0x98>
	struct i2c_master_packet packet = {
   10e22:	220c      	movs	r2, #12
   10e24:	2100      	movs	r1, #0
   10e26:	0020      	movs	r0, r4
   10e28:	47c0      	blx	r8
	add_buf[0] = data_address>>8;//high byte
   10e2a:	466b      	mov	r3, sp
   10e2c:	4652      	mov	r2, sl
   10e2e:	701a      	strb	r2, [r3, #0]
	add_buf[1] = data_address & 0xff;//low byte
   10e30:	2360      	movs	r3, #96	; 0x60
   10e32:	466a      	mov	r2, sp
   10e34:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
   10e36:	4b1e      	ldr	r3, [pc, #120]	; (10eb0 <EEPROM_loadCalRawData+0x130>)
	packet.data = add_buf;
   10e38:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
   10e3a:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10e3c:	0021      	movs	r1, r4
   10e3e:	0028      	movs	r0, r5
   10e40:	47b8      	blx	r7
   10e42:	2800      	cmp	r0, #0
   10e44:	d1fa      	bne.n	10e3c <EEPROM_loadCalRawData+0xbc>
	packet.data = data_buf;
   10e46:	4b20      	ldr	r3, [pc, #128]	; (10ec8 <EEPROM_loadCalRawData+0x148>)
   10e48:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
   10e4a:	2396      	movs	r3, #150	; 0x96
   10e4c:	00db      	lsls	r3, r3, #3
   10e4e:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10e50:	0021      	movs	r1, r4
   10e52:	0028      	movs	r0, r5
   10e54:	47b0      	blx	r6
   10e56:	2800      	cmp	r0, #0
   10e58:	d1fa      	bne.n	10e50 <EEPROM_loadCalRawData+0xd0>
	struct i2c_master_packet packet = {
   10e5a:	220c      	movs	r2, #12
   10e5c:	2100      	movs	r1, #0
   10e5e:	0020      	movs	r0, r4
   10e60:	47c0      	blx	r8
	add_buf[0] = data_address>>8;//high byte
   10e62:	466b      	mov	r3, sp
   10e64:	464a      	mov	r2, r9
   10e66:	701a      	strb	r2, [r3, #0]
	add_buf[1] = data_address & 0xff;//low byte
   10e68:	2310      	movs	r3, #16
   10e6a:	466a      	mov	r2, sp
   10e6c:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
   10e6e:	4b10      	ldr	r3, [pc, #64]	; (10eb0 <EEPROM_loadCalRawData+0x130>)
	packet.data = add_buf;
   10e70:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
   10e72:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10e74:	0021      	movs	r1, r4
   10e76:	0028      	movs	r0, r5
   10e78:	47b8      	blx	r7
   10e7a:	2800      	cmp	r0, #0
   10e7c:	d1fa      	bne.n	10e74 <EEPROM_loadCalRawData+0xf4>
	packet.data = data_buf;
   10e7e:	4b13      	ldr	r3, [pc, #76]	; (10ecc <EEPROM_loadCalRawData+0x14c>)
   10e80:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
   10e82:	2396      	movs	r3, #150	; 0x96
   10e84:	00db      	lsls	r3, r3, #3
   10e86:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10e88:	0021      	movs	r1, r4
   10e8a:	0028      	movs	r0, r5
   10e8c:	47b0      	blx	r6
   10e8e:	2800      	cmp	r0, #0
   10e90:	d1fa      	bne.n	10e88 <EEPROM_loadCalRawData+0x108>
}
   10e92:	b005      	add	sp, #20
   10e94:	bc3c      	pop	{r2, r3, r4, r5}
   10e96:	4690      	mov	r8, r2
   10e98:	4699      	mov	r9, r3
   10e9a:	46a2      	mov	sl, r4
   10e9c:	46ab      	mov	fp, r5
   10e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (caltype){
   10ea0:	2525      	movs	r5, #37	; 0x25
   10ea2:	2329      	movs	r3, #41	; 0x29
   10ea4:	e77b      	b.n	10d9e <EEPROM_loadCalRawData+0x1e>
   10ea6:	2510      	movs	r5, #16
   10ea8:	2314      	movs	r3, #20
   10eaa:	e778      	b.n	10d9e <EEPROM_loadCalRawData+0x1e>
   10eac:	00028a1d 	.word	0x00028a1d
   10eb0:	00020057 	.word	0x00020057
   10eb4:	20000e78 	.word	0x20000e78
   10eb8:	00018c95 	.word	0x00018c95
   10ebc:	20003d28 	.word	0x20003d28
   10ec0:	00018c81 	.word	0x00018c81
   10ec4:	20002178 	.word	0x20002178
   10ec8:	20002e80 	.word	0x20002e80
   10ecc:	20001b30 	.word	0x20001b30

00010ed0 <load_sync_tracker>:
void load_sync_tracker(void){
   10ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ed2:	4647      	mov	r7, r8
   10ed4:	46ce      	mov	lr, r9
   10ed6:	b580      	push	{r7, lr}
   10ed8:	b0a5      	sub	sp, #148	; 0x94
	struct i2c_master_packet packet = {
   10eda:	af03      	add	r7, sp, #12
   10edc:	220c      	movs	r2, #12
   10ede:	4b20      	ldr	r3, [pc, #128]	; (10f60 <load_sync_tracker+0x90>)
   10ee0:	2100      	movs	r1, #0
   10ee2:	0038      	movs	r0, r7
   10ee4:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
   10ee6:	2300      	movs	r3, #0
   10ee8:	466a      	mov	r2, sp
   10eea:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
   10eec:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
   10eee:	4b1d      	ldr	r3, [pc, #116]	; (10f64 <load_sync_tracker+0x94>)
   10ef0:	4c1d      	ldr	r4, [pc, #116]	; (10f68 <load_sync_tracker+0x98>)
   10ef2:	4d1e      	ldr	r5, [pc, #120]	; (10f6c <load_sync_tracker+0x9c>)
	packet.data = add_buf;
   10ef4:	607a      	str	r2, [r7, #4]
	struct i2c_master_packet packet = {
   10ef6:	9303      	str	r3, [sp, #12]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10ef8:	0039      	movs	r1, r7
   10efa:	0020      	movs	r0, r4
   10efc:	47a8      	blx	r5
   10efe:	2800      	cmp	r0, #0
   10f00:	d1fa      	bne.n	10ef8 <load_sync_tracker+0x28>
	packet.data = data_buf;
   10f02:	4b1b      	ldr	r3, [pc, #108]	; (10f70 <load_sync_tracker+0xa0>)
   10f04:	4698      	mov	r8, r3
   10f06:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
   10f08:	2324      	movs	r3, #36	; 0x24
   10f0a:	807b      	strh	r3, [r7, #2]
   10f0c:	4b19      	ldr	r3, [pc, #100]	; (10f74 <load_sync_tracker+0xa4>)
   10f0e:	4699      	mov	r9, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10f10:	0039      	movs	r1, r7
   10f12:	0020      	movs	r0, r4
   10f14:	47c8      	blx	r9
   10f16:	1e06      	subs	r6, r0, #0
   10f18:	d1fa      	bne.n	10f10 <load_sync_tracker+0x40>
	if (bleSyncTracker.keyMeasTrackerInitialized != KEY_MEASUREMENT_TRACKER){
   10f1a:	4643      	mov	r3, r8
   10f1c:	781b      	ldrb	r3, [r3, #0]
   10f1e:	2ba1      	cmp	r3, #161	; 0xa1
   10f20:	d018      	beq.n	10f54 <load_sync_tracker+0x84>
		initSyncTracker();
   10f22:	4b15      	ldr	r3, [pc, #84]	; (10f78 <load_sync_tracker+0xa8>)
   10f24:	4798      	blx	r3
		bleSyncTracker.keyMeasTrackerInitialized = KEY_MEASUREMENT_TRACKER;
   10f26:	23a1      	movs	r3, #161	; 0xa1
   10f28:	4642      	mov	r2, r8
   10f2a:	7013      	strb	r3, [r2, #0]
	packet.ten_bit_address = false;
   10f2c:	466b      	mov	r3, sp
   10f2e:	200e      	movs	r0, #14
   10f30:	721e      	strb	r6, [r3, #8]
	packet.high_speed = false;
   10f32:	725e      	strb	r6, [r3, #9]
	packet.hs_master_code = 0x0;
   10f34:	729e      	strb	r6, [r3, #10]
	packet.address = EEPROM_add;
   10f36:	4b11      	ldr	r3, [pc, #68]	; (10f7c <load_sync_tracker+0xac>)
   10f38:	2224      	movs	r2, #36	; 0x24
   10f3a:	9300      	str	r3, [sp, #0]
   10f3c:	4641      	mov	r1, r8
   10f3e:	4468      	add	r0, sp
   10f40:	4b0f      	ldr	r3, [pc, #60]	; (10f80 <load_sync_tracker+0xb0>)
	packet.data = send_buf;
   10f42:	9701      	str	r7, [sp, #4]
		send_buf[0] = address_packet>>8;
   10f44:	703e      	strb	r6, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;
   10f46:	707e      	strb	r6, [r7, #1]
   10f48:	4798      	blx	r3
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10f4a:	4669      	mov	r1, sp
   10f4c:	0020      	movs	r0, r4
   10f4e:	47a8      	blx	r5
   10f50:	2800      	cmp	r0, #0
   10f52:	d1fa      	bne.n	10f4a <load_sync_tracker+0x7a>
}
   10f54:	b025      	add	sp, #148	; 0x94
   10f56:	bc0c      	pop	{r2, r3}
   10f58:	4690      	mov	r8, r2
   10f5a:	4699      	mov	r9, r3
   10f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f5e:	46c0      	nop			; (mov r8, r8)
   10f60:	00028a1d 	.word	0x00028a1d
   10f64:	00020057 	.word	0x00020057
   10f68:	20000e78 	.word	0x20000e78
   10f6c:	00018c95 	.word	0x00018c95
   10f70:	20004388 	.word	0x20004388
   10f74:	00018c81 	.word	0x00018c81
   10f78:	000159a9 	.word	0x000159a9
   10f7c:	00260057 	.word	0x00260057
   10f80:	00028999 	.word	0x00028999

00010f84 <save_sync_tracker>:
void save_sync_tracker(void){
   10f84:	b530      	push	{r4, r5, lr}
   10f86:	b0a5      	sub	sp, #148	; 0x94
	packet.ten_bit_address = false;
   10f88:	2300      	movs	r3, #0
   10f8a:	4669      	mov	r1, sp
   10f8c:	200e      	movs	r0, #14
	packet.data = send_buf;
   10f8e:	aa03      	add	r2, sp, #12
	packet.ten_bit_address = false;
   10f90:	720b      	strb	r3, [r1, #8]
	packet.high_speed = false;
   10f92:	724b      	strb	r3, [r1, #9]
	packet.hs_master_code = 0x0;
   10f94:	728b      	strb	r3, [r1, #10]
		send_buf[0] = address_packet>>8;
   10f96:	7013      	strb	r3, [r2, #0]
		send_buf[1] = address_packet & 0x00FF;
   10f98:	7053      	strb	r3, [r2, #1]
	packet.address = EEPROM_add;
   10f9a:	4b08      	ldr	r3, [pc, #32]	; (10fbc <save_sync_tracker+0x38>)
	packet.data = send_buf;
   10f9c:	9201      	str	r2, [sp, #4]
	packet.address = EEPROM_add;
   10f9e:	9300      	str	r3, [sp, #0]
   10fa0:	2224      	movs	r2, #36	; 0x24
   10fa2:	4907      	ldr	r1, [pc, #28]	; (10fc0 <save_sync_tracker+0x3c>)
   10fa4:	4468      	add	r0, sp
   10fa6:	4b07      	ldr	r3, [pc, #28]	; (10fc4 <save_sync_tracker+0x40>)
   10fa8:	4798      	blx	r3
   10faa:	4d07      	ldr	r5, [pc, #28]	; (10fc8 <save_sync_tracker+0x44>)
   10fac:	4c07      	ldr	r4, [pc, #28]	; (10fcc <save_sync_tracker+0x48>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10fae:	4669      	mov	r1, sp
   10fb0:	0028      	movs	r0, r5
   10fb2:	47a0      	blx	r4
   10fb4:	2800      	cmp	r0, #0
   10fb6:	d1fa      	bne.n	10fae <save_sync_tracker+0x2a>
}
   10fb8:	b025      	add	sp, #148	; 0x94
   10fba:	bd30      	pop	{r4, r5, pc}
   10fbc:	00260057 	.word	0x00260057
   10fc0:	20004388 	.word	0x20004388
   10fc4:	00028999 	.word	0x00028999
   10fc8:	20000e78 	.word	0x20000e78
   10fcc:	00018c95 	.word	0x00018c95

00010fd0 <load_user_settings>:
void load_user_settings(void){
   10fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fd2:	4647      	mov	r7, r8
   10fd4:	46ce      	mov	lr, r9
   10fd6:	b580      	push	{r7, lr}
   10fd8:	b0a5      	sub	sp, #148	; 0x94
	struct i2c_master_packet packet = {
   10fda:	af03      	add	r7, sp, #12
   10fdc:	220c      	movs	r2, #12
   10fde:	4b21      	ldr	r3, [pc, #132]	; (11064 <load_user_settings+0x94>)
   10fe0:	2100      	movs	r1, #0
   10fe2:	0038      	movs	r0, r7
   10fe4:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
   10fe6:	466a      	mov	r2, sp
   10fe8:	2301      	movs	r3, #1
   10fea:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
   10fec:	2300      	movs	r3, #0
   10fee:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
   10ff0:	4b1d      	ldr	r3, [pc, #116]	; (11068 <load_user_settings+0x98>)
   10ff2:	4c1e      	ldr	r4, [pc, #120]	; (1106c <load_user_settings+0x9c>)
   10ff4:	4d1e      	ldr	r5, [pc, #120]	; (11070 <load_user_settings+0xa0>)
	packet.data = add_buf;
   10ff6:	607a      	str	r2, [r7, #4]
	struct i2c_master_packet packet = {
   10ff8:	9303      	str	r3, [sp, #12]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10ffa:	0039      	movs	r1, r7
   10ffc:	0020      	movs	r0, r4
   10ffe:	47a8      	blx	r5
   11000:	2800      	cmp	r0, #0
   11002:	d1fa      	bne.n	10ffa <load_user_settings+0x2a>
	packet.data = data_buf;
   11004:	4b1b      	ldr	r3, [pc, #108]	; (11074 <load_user_settings+0xa4>)
   11006:	4698      	mov	r8, r3
   11008:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
   1100a:	2318      	movs	r3, #24
   1100c:	807b      	strh	r3, [r7, #2]
   1100e:	4b1a      	ldr	r3, [pc, #104]	; (11078 <load_user_settings+0xa8>)
   11010:	4699      	mov	r9, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11012:	0039      	movs	r1, r7
   11014:	0020      	movs	r0, r4
   11016:	47c8      	blx	r9
   11018:	1e06      	subs	r6, r0, #0
   1101a:	d1fa      	bne.n	11012 <load_user_settings+0x42>
	if (options.keySettingsInitialized != KEY_SETTINGS_INITIALIZED){
   1101c:	4643      	mov	r3, r8
   1101e:	781b      	ldrb	r3, [r3, #0]
   11020:	2bc3      	cmp	r3, #195	; 0xc3
   11022:	d01a      	beq.n	1105a <load_user_settings+0x8a>
		getDefaultOptions(&options);
   11024:	4640      	mov	r0, r8
   11026:	4b15      	ldr	r3, [pc, #84]	; (1107c <load_user_settings+0xac>)
   11028:	4798      	blx	r3
		options.keySettingsInitialized = KEY_SETTINGS_INITIALIZED;
   1102a:	23c3      	movs	r3, #195	; 0xc3
   1102c:	4642      	mov	r2, r8
   1102e:	7013      	strb	r3, [r2, #0]
	packet.ten_bit_address = false;
   11030:	466b      	mov	r3, sp
   11032:	721e      	strb	r6, [r3, #8]
	packet.high_speed = false;
   11034:	725e      	strb	r6, [r3, #9]
	packet.hs_master_code = 0x0;
   11036:	729e      	strb	r6, [r3, #10]
		send_buf[0] = address_packet>>8;
   11038:	2301      	movs	r3, #1
   1103a:	200e      	movs	r0, #14
   1103c:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
   1103e:	4b10      	ldr	r3, [pc, #64]	; (11080 <load_user_settings+0xb0>)
   11040:	2218      	movs	r2, #24
   11042:	9300      	str	r3, [sp, #0]
   11044:	4641      	mov	r1, r8
   11046:	4468      	add	r0, sp
   11048:	4b0e      	ldr	r3, [pc, #56]	; (11084 <load_user_settings+0xb4>)
	packet.data = send_buf;
   1104a:	9701      	str	r7, [sp, #4]
		send_buf[1] = address_packet & 0x00FF;
   1104c:	707e      	strb	r6, [r7, #1]
   1104e:	4798      	blx	r3
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11050:	4669      	mov	r1, sp
   11052:	0020      	movs	r0, r4
   11054:	47a8      	blx	r5
   11056:	2800      	cmp	r0, #0
   11058:	d1fa      	bne.n	11050 <load_user_settings+0x80>
}
   1105a:	b025      	add	sp, #148	; 0x94
   1105c:	bc0c      	pop	{r2, r3}
   1105e:	4690      	mov	r8, r2
   11060:	4699      	mov	r9, r3
   11062:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11064:	00028a1d 	.word	0x00028a1d
   11068:	00020057 	.word	0x00020057
   1106c:	20000e78 	.word	0x20000e78
   11070:	00018c95 	.word	0x00018c95
   11074:	20002d20 	.word	0x20002d20
   11078:	00018c81 	.word	0x00018c81
   1107c:	00022e35 	.word	0x00022e35
   11080:	001a0057 	.word	0x001a0057
   11084:	00028999 	.word	0x00028999

00011088 <save_user_settings>:
void save_user_settings(void){
   11088:	b530      	push	{r4, r5, lr}
   1108a:	b0a5      	sub	sp, #148	; 0x94
	packet.ten_bit_address = false;
   1108c:	2300      	movs	r3, #0
   1108e:	4669      	mov	r1, sp
   11090:	200e      	movs	r0, #14
   11092:	720b      	strb	r3, [r1, #8]
	packet.high_speed = false;
   11094:	724b      	strb	r3, [r1, #9]
	packet.hs_master_code = 0x0;
   11096:	728b      	strb	r3, [r1, #10]
		send_buf[0] = address_packet>>8;
   11098:	2101      	movs	r1, #1
	packet.data = send_buf;
   1109a:	aa03      	add	r2, sp, #12
		send_buf[1] = address_packet & 0x00FF;
   1109c:	7053      	strb	r3, [r2, #1]
	packet.address = EEPROM_add;
   1109e:	4b09      	ldr	r3, [pc, #36]	; (110c4 <save_user_settings+0x3c>)
		send_buf[0] = address_packet>>8;
   110a0:	7011      	strb	r1, [r2, #0]
	packet.data = send_buf;
   110a2:	9201      	str	r2, [sp, #4]
	packet.address = EEPROM_add;
   110a4:	9300      	str	r3, [sp, #0]
   110a6:	2218      	movs	r2, #24
   110a8:	4907      	ldr	r1, [pc, #28]	; (110c8 <save_user_settings+0x40>)
   110aa:	4468      	add	r0, sp
   110ac:	4b07      	ldr	r3, [pc, #28]	; (110cc <save_user_settings+0x44>)
   110ae:	4798      	blx	r3
   110b0:	4d07      	ldr	r5, [pc, #28]	; (110d0 <save_user_settings+0x48>)
   110b2:	4c08      	ldr	r4, [pc, #32]	; (110d4 <save_user_settings+0x4c>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   110b4:	4669      	mov	r1, sp
   110b6:	0028      	movs	r0, r5
   110b8:	47a0      	blx	r4
   110ba:	2800      	cmp	r0, #0
   110bc:	d1fa      	bne.n	110b4 <save_user_settings+0x2c>
}
   110be:	b025      	add	sp, #148	; 0x94
   110c0:	bd30      	pop	{r4, r5, pc}
   110c2:	46c0      	nop			; (mov r8, r8)
   110c4:	001a0057 	.word	0x001a0057
   110c8:	20002d20 	.word	0x20002d20
   110cc:	00028999 	.word	0x00028999
   110d0:	20000e78 	.word	0x20000e78
   110d4:	00018c95 	.word	0x00018c95

000110d8 <load_calibration>:
void load_calibration(void){
   110d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   110da:	4657      	mov	r7, sl
   110dc:	46de      	mov	lr, fp
   110de:	464e      	mov	r6, r9
   110e0:	4645      	mov	r5, r8
   110e2:	b5e0      	push	{r5, r6, r7, lr}
	cal_init_struct(&tempCal);
   110e4:	4ba0      	ldr	r3, [pc, #640]	; (11368 <load_calibration+0x290>)
void load_calibration(void){
   110e6:	b0bd      	sub	sp, #244	; 0xf4
	cal_init_struct(&tempCal);
   110e8:	a804      	add	r0, sp, #16
	struct i2c_master_packet packet = {
   110ea:	af1b      	add	r7, sp, #108	; 0x6c
	cal_init_struct(&tempCal);
   110ec:	469a      	mov	sl, r3
   110ee:	4798      	blx	r3
	struct i2c_master_packet packet = {
   110f0:	4b9e      	ldr	r3, [pc, #632]	; (1136c <load_calibration+0x294>)
   110f2:	220c      	movs	r2, #12
   110f4:	2100      	movs	r1, #0
   110f6:	0038      	movs	r0, r7
   110f8:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
   110fa:	2303      	movs	r3, #3
   110fc:	ac01      	add	r4, sp, #4
   110fe:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
   11100:	2300      	movs	r3, #0
   11102:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
   11104:	4b9a      	ldr	r3, [pc, #616]	; (11370 <load_calibration+0x298>)
   11106:	4d9b      	ldr	r5, [pc, #620]	; (11374 <load_calibration+0x29c>)
   11108:	4e9b      	ldr	r6, [pc, #620]	; (11378 <load_calibration+0x2a0>)
	packet.data = add_buf;
   1110a:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
   1110c:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1110e:	0039      	movs	r1, r7
   11110:	0028      	movs	r0, r5
   11112:	47b0      	blx	r6
   11114:	2800      	cmp	r0, #0
   11116:	d1fa      	bne.n	1110e <load_calibration+0x36>
	packet.data = data_buf;
   11118:	4b98      	ldr	r3, [pc, #608]	; (1137c <load_calibration+0x2a4>)
   1111a:	469b      	mov	fp, r3
   1111c:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
   1111e:	235c      	movs	r3, #92	; 0x5c
   11120:	807b      	strh	r3, [r7, #2]
   11122:	4b97      	ldr	r3, [pc, #604]	; (11380 <load_calibration+0x2a8>)
   11124:	4698      	mov	r8, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11126:	0039      	movs	r1, r7
   11128:	0028      	movs	r0, r5
   1112a:	47c0      	blx	r8
   1112c:	2800      	cmp	r0, #0
   1112e:	d1fa      	bne.n	11126 <load_calibration+0x4e>
   11130:	4681      	mov	r9, r0
	struct i2c_master_packet packet = {
   11132:	4b8e      	ldr	r3, [pc, #568]	; (1136c <load_calibration+0x294>)
   11134:	220c      	movs	r2, #12
   11136:	2100      	movs	r1, #0
   11138:	0038      	movs	r0, r7
   1113a:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
   1113c:	2304      	movs	r3, #4
   1113e:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
   11140:	464b      	mov	r3, r9
   11142:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
   11144:	4b8a      	ldr	r3, [pc, #552]	; (11370 <load_calibration+0x298>)
	packet.data = add_buf;
   11146:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
   11148:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1114a:	0039      	movs	r1, r7
   1114c:	0028      	movs	r0, r5
   1114e:	47b0      	blx	r6
   11150:	2800      	cmp	r0, #0
   11152:	d1fa      	bne.n	1114a <load_calibration+0x72>
	packet.data = data_buf;
   11154:	4b8b      	ldr	r3, [pc, #556]	; (11384 <load_calibration+0x2ac>)
   11156:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
   11158:	235c      	movs	r3, #92	; 0x5c
   1115a:	807b      	strh	r3, [r7, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1115c:	0039      	movs	r1, r7
   1115e:	0028      	movs	r0, r5
   11160:	47c0      	blx	r8
   11162:	2800      	cmp	r0, #0
   11164:	d1fa      	bne.n	1115c <load_calibration+0x84>
   11166:	4681      	mov	r9, r0
	struct i2c_master_packet packet = {
   11168:	4b80      	ldr	r3, [pc, #512]	; (1136c <load_calibration+0x294>)
   1116a:	220c      	movs	r2, #12
   1116c:	2100      	movs	r1, #0
   1116e:	0038      	movs	r0, r7
   11170:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
   11172:	2305      	movs	r3, #5
   11174:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
   11176:	464b      	mov	r3, r9
   11178:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
   1117a:	4b7d      	ldr	r3, [pc, #500]	; (11370 <load_calibration+0x298>)
	packet.data = add_buf;
   1117c:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
   1117e:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11180:	0039      	movs	r1, r7
   11182:	0028      	movs	r0, r5
   11184:	47b0      	blx	r6
   11186:	2800      	cmp	r0, #0
   11188:	d1fa      	bne.n	11180 <load_calibration+0xa8>
	packet.data = data_buf;
   1118a:	4b7f      	ldr	r3, [pc, #508]	; (11388 <load_calibration+0x2b0>)
   1118c:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
   1118e:	235c      	movs	r3, #92	; 0x5c
   11190:	807b      	strh	r3, [r7, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11192:	0039      	movs	r1, r7
   11194:	0028      	movs	r0, r5
   11196:	47c0      	blx	r8
   11198:	2800      	cmp	r0, #0
   1119a:	d1fa      	bne.n	11192 <load_calibration+0xba>
   1119c:	4681      	mov	r9, r0
	struct i2c_master_packet packet = {
   1119e:	4b73      	ldr	r3, [pc, #460]	; (1136c <load_calibration+0x294>)
   111a0:	220c      	movs	r2, #12
   111a2:	2100      	movs	r1, #0
   111a4:	0038      	movs	r0, r7
   111a6:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
   111a8:	2306      	movs	r3, #6
   111aa:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
   111ac:	464b      	mov	r3, r9
   111ae:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
   111b0:	4b6f      	ldr	r3, [pc, #444]	; (11370 <load_calibration+0x298>)
	packet.data = add_buf;
   111b2:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
   111b4:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   111b6:	0039      	movs	r1, r7
   111b8:	0028      	movs	r0, r5
   111ba:	47b0      	blx	r6
   111bc:	2800      	cmp	r0, #0
   111be:	d1fa      	bne.n	111b6 <load_calibration+0xde>
	packet.data = data_buf;
   111c0:	4b72      	ldr	r3, [pc, #456]	; (1138c <load_calibration+0x2b4>)
   111c2:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
   111c4:	235c      	movs	r3, #92	; 0x5c
   111c6:	807b      	strh	r3, [r7, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   111c8:	0039      	movs	r1, r7
   111ca:	0028      	movs	r0, r5
   111cc:	47c0      	blx	r8
   111ce:	2800      	cmp	r0, #0
   111d0:	d1fa      	bne.n	111c8 <load_calibration+0xf0>
   111d2:	4681      	mov	r9, r0
	struct i2c_master_packet packet = {
   111d4:	4b65      	ldr	r3, [pc, #404]	; (1136c <load_calibration+0x294>)
   111d6:	220c      	movs	r2, #12
   111d8:	2100      	movs	r1, #0
   111da:	0038      	movs	r0, r7
   111dc:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
   111de:	2307      	movs	r3, #7
   111e0:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
   111e2:	464b      	mov	r3, r9
   111e4:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
   111e6:	4b62      	ldr	r3, [pc, #392]	; (11370 <load_calibration+0x298>)
	packet.data = add_buf;
   111e8:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
   111ea:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   111ec:	0039      	movs	r1, r7
   111ee:	0028      	movs	r0, r5
   111f0:	47b0      	blx	r6
   111f2:	2800      	cmp	r0, #0
   111f4:	d1fa      	bne.n	111ec <load_calibration+0x114>
	packet.data = data_buf;
   111f6:	4b66      	ldr	r3, [pc, #408]	; (11390 <load_calibration+0x2b8>)
   111f8:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
   111fa:	235c      	movs	r3, #92	; 0x5c
   111fc:	807b      	strh	r3, [r7, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   111fe:	0039      	movs	r1, r7
   11200:	0028      	movs	r0, r5
   11202:	47c0      	blx	r8
   11204:	2800      	cmp	r0, #0
   11206:	d1fa      	bne.n	111fe <load_calibration+0x126>
   11208:	4681      	mov	r9, r0
	struct i2c_master_packet packet = {
   1120a:	4b58      	ldr	r3, [pc, #352]	; (1136c <load_calibration+0x294>)
   1120c:	220c      	movs	r2, #12
   1120e:	2100      	movs	r1, #0
   11210:	0038      	movs	r0, r7
   11212:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
   11214:	2308      	movs	r3, #8
   11216:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
   11218:	464b      	mov	r3, r9
   1121a:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
   1121c:	4b54      	ldr	r3, [pc, #336]	; (11370 <load_calibration+0x298>)
	packet.data = add_buf;
   1121e:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
   11220:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11222:	0039      	movs	r1, r7
   11224:	0028      	movs	r0, r5
   11226:	47b0      	blx	r6
   11228:	2800      	cmp	r0, #0
   1122a:	d1fa      	bne.n	11222 <load_calibration+0x14a>
	packet.data = data_buf;
   1122c:	4b59      	ldr	r3, [pc, #356]	; (11394 <load_calibration+0x2bc>)
   1122e:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
   11230:	237c      	movs	r3, #124	; 0x7c
   11232:	807b      	strh	r3, [r7, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11234:	0039      	movs	r1, r7
   11236:	0028      	movs	r0, r5
   11238:	47c0      	blx	r8
   1123a:	2800      	cmp	r0, #0
   1123c:	d1fa      	bne.n	11234 <load_calibration+0x15c>
	if(tempCal.Cal_Initialized_Key != a1_calst.Cal_Initialized_Key){
   1123e:	466b      	mov	r3, sp
   11240:	7c1a      	ldrb	r2, [r3, #16]
   11242:	465b      	mov	r3, fp
   11244:	781b      	ldrb	r3, [r3, #0]
   11246:	4681      	mov	r9, r0
   11248:	429a      	cmp	r2, r3
   1124a:	d100      	bne.n	1124e <load_calibration+0x176>
   1124c:	e085      	b.n	1135a <load_calibration+0x282>
		cal_init_struct(&a1_calst);
   1124e:	4658      	mov	r0, fp
   11250:	47d0      	blx	sl
		cal_init_struct(&a2_calst);
   11252:	484c      	ldr	r0, [pc, #304]	; (11384 <load_calibration+0x2ac>)
   11254:	47d0      	blx	sl
		cal_init_struct(&m1_calst);
   11256:	484c      	ldr	r0, [pc, #304]	; (11388 <load_calibration+0x2b0>)
   11258:	47d0      	blx	sl
		cal_init_struct(&m2_calst);
   1125a:	484c      	ldr	r0, [pc, #304]	; (1138c <load_calibration+0x2b4>)
   1125c:	47d0      	blx	sl
		cal_init_struct(&dist_calst);
   1125e:	484c      	ldr	r0, [pc, #304]	; (11390 <load_calibration+0x2b8>)
   11260:	47d0      	blx	sl
	packet.ten_bit_address = false;
   11262:	464b      	mov	r3, r9
   11264:	7223      	strb	r3, [r4, #8]
	packet.high_speed = false;
   11266:	7263      	strb	r3, [r4, #9]
	packet.hs_master_code = 0x0;
   11268:	72a3      	strb	r3, [r4, #10]
		send_buf[0] = address_packet>>8;
   1126a:	2303      	movs	r3, #3
   1126c:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;
   1126e:	464b      	mov	r3, r9
   11270:	707b      	strb	r3, [r7, #1]
	packet.address = EEPROM_add;
   11272:	4b49      	ldr	r3, [pc, #292]	; (11398 <load_calibration+0x2c0>)
	packet.data = send_buf;
   11274:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
   11276:	9301      	str	r3, [sp, #4]
   11278:	236e      	movs	r3, #110	; 0x6e
   1127a:	446b      	add	r3, sp
   1127c:	0018      	movs	r0, r3
   1127e:	4b47      	ldr	r3, [pc, #284]	; (1139c <load_calibration+0x2c4>)
   11280:	225c      	movs	r2, #92	; 0x5c
   11282:	4659      	mov	r1, fp
   11284:	4698      	mov	r8, r3
   11286:	4798      	blx	r3
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11288:	0021      	movs	r1, r4
   1128a:	0028      	movs	r0, r5
   1128c:	47b0      	blx	r6
   1128e:	2800      	cmp	r0, #0
   11290:	d1fa      	bne.n	11288 <load_calibration+0x1b0>
		send_buf[0] = address_packet>>8;
   11292:	2304      	movs	r3, #4
   11294:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
   11296:	4b40      	ldr	r3, [pc, #256]	; (11398 <load_calibration+0x2c0>)
	packet.ten_bit_address = false;
   11298:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
   1129a:	7260      	strb	r0, [r4, #9]
	packet.hs_master_code = 0x0;
   1129c:	72a0      	strb	r0, [r4, #10]
	packet.data = send_buf;
   1129e:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
   112a0:	9301      	str	r3, [sp, #4]
   112a2:	236e      	movs	r3, #110	; 0x6e
   112a4:	446b      	add	r3, sp
		send_buf[1] = address_packet & 0x00FF;
   112a6:	7078      	strb	r0, [r7, #1]
   112a8:	225c      	movs	r2, #92	; 0x5c
   112aa:	4936      	ldr	r1, [pc, #216]	; (11384 <load_calibration+0x2ac>)
   112ac:	0018      	movs	r0, r3
   112ae:	47c0      	blx	r8
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   112b0:	0021      	movs	r1, r4
   112b2:	0028      	movs	r0, r5
   112b4:	47b0      	blx	r6
   112b6:	2800      	cmp	r0, #0
   112b8:	d1fa      	bne.n	112b0 <load_calibration+0x1d8>
		send_buf[0] = address_packet>>8;
   112ba:	2305      	movs	r3, #5
   112bc:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
   112be:	4b36      	ldr	r3, [pc, #216]	; (11398 <load_calibration+0x2c0>)
	packet.ten_bit_address = false;
   112c0:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
   112c2:	7260      	strb	r0, [r4, #9]
	packet.hs_master_code = 0x0;
   112c4:	72a0      	strb	r0, [r4, #10]
	packet.data = send_buf;
   112c6:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
   112c8:	9301      	str	r3, [sp, #4]
   112ca:	236e      	movs	r3, #110	; 0x6e
   112cc:	446b      	add	r3, sp
		send_buf[1] = address_packet & 0x00FF;
   112ce:	7078      	strb	r0, [r7, #1]
   112d0:	225c      	movs	r2, #92	; 0x5c
   112d2:	492d      	ldr	r1, [pc, #180]	; (11388 <load_calibration+0x2b0>)
   112d4:	0018      	movs	r0, r3
   112d6:	47c0      	blx	r8
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   112d8:	0021      	movs	r1, r4
   112da:	0028      	movs	r0, r5
   112dc:	47b0      	blx	r6
   112de:	2800      	cmp	r0, #0
   112e0:	d1fa      	bne.n	112d8 <load_calibration+0x200>
		send_buf[0] = address_packet>>8;
   112e2:	2306      	movs	r3, #6
   112e4:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
   112e6:	4b2c      	ldr	r3, [pc, #176]	; (11398 <load_calibration+0x2c0>)
	packet.ten_bit_address = false;
   112e8:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
   112ea:	7260      	strb	r0, [r4, #9]
	packet.hs_master_code = 0x0;
   112ec:	72a0      	strb	r0, [r4, #10]
	packet.data = send_buf;
   112ee:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
   112f0:	9301      	str	r3, [sp, #4]
   112f2:	236e      	movs	r3, #110	; 0x6e
   112f4:	446b      	add	r3, sp
		send_buf[1] = address_packet & 0x00FF;
   112f6:	7078      	strb	r0, [r7, #1]
   112f8:	225c      	movs	r2, #92	; 0x5c
   112fa:	4924      	ldr	r1, [pc, #144]	; (1138c <load_calibration+0x2b4>)
   112fc:	0018      	movs	r0, r3
   112fe:	47c0      	blx	r8
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11300:	0021      	movs	r1, r4
   11302:	0028      	movs	r0, r5
   11304:	47b0      	blx	r6
   11306:	2800      	cmp	r0, #0
   11308:	d1fa      	bne.n	11300 <load_calibration+0x228>
		send_buf[0] = address_packet>>8;
   1130a:	2307      	movs	r3, #7
   1130c:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
   1130e:	4b22      	ldr	r3, [pc, #136]	; (11398 <load_calibration+0x2c0>)
	packet.ten_bit_address = false;
   11310:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
   11312:	7260      	strb	r0, [r4, #9]
	packet.hs_master_code = 0x0;
   11314:	72a0      	strb	r0, [r4, #10]
	packet.data = send_buf;
   11316:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
   11318:	9301      	str	r3, [sp, #4]
   1131a:	236e      	movs	r3, #110	; 0x6e
   1131c:	446b      	add	r3, sp
		send_buf[1] = address_packet & 0x00FF;
   1131e:	7078      	strb	r0, [r7, #1]
   11320:	225c      	movs	r2, #92	; 0x5c
   11322:	491b      	ldr	r1, [pc, #108]	; (11390 <load_calibration+0x2b8>)
   11324:	0018      	movs	r0, r3
   11326:	47c0      	blx	r8
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11328:	0021      	movs	r1, r4
   1132a:	0028      	movs	r0, r5
   1132c:	47b0      	blx	r6
   1132e:	2800      	cmp	r0, #0
   11330:	d1fa      	bne.n	11328 <load_calibration+0x250>
		send_buf[0] = address_packet>>8;
   11332:	2308      	movs	r3, #8
   11334:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
   11336:	4b1a      	ldr	r3, [pc, #104]	; (113a0 <load_calibration+0x2c8>)
	packet.ten_bit_address = false;
   11338:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
   1133a:	7260      	strb	r0, [r4, #9]
	packet.hs_master_code = 0x0;
   1133c:	72a0      	strb	r0, [r4, #10]
	packet.data = send_buf;
   1133e:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
   11340:	9301      	str	r3, [sp, #4]
   11342:	236e      	movs	r3, #110	; 0x6e
   11344:	446b      	add	r3, sp
		send_buf[1] = address_packet & 0x00FF;
   11346:	7078      	strb	r0, [r7, #1]
   11348:	227c      	movs	r2, #124	; 0x7c
   1134a:	4912      	ldr	r1, [pc, #72]	; (11394 <load_calibration+0x2bc>)
   1134c:	0018      	movs	r0, r3
   1134e:	47c0      	blx	r8
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11350:	0021      	movs	r1, r4
   11352:	0028      	movs	r0, r5
   11354:	47b0      	blx	r6
   11356:	2800      	cmp	r0, #0
   11358:	d1fa      	bne.n	11350 <load_calibration+0x278>
}
   1135a:	b03d      	add	sp, #244	; 0xf4
   1135c:	bc3c      	pop	{r2, r3, r4, r5}
   1135e:	4690      	mov	r8, r2
   11360:	4699      	mov	r9, r3
   11362:	46a2      	mov	sl, r4
   11364:	46ab      	mov	fp, r5
   11366:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11368:	0001a9e1 	.word	0x0001a9e1
   1136c:	00028a1d 	.word	0x00028a1d
   11370:	00020057 	.word	0x00020057
   11374:	20000e78 	.word	0x20000e78
   11378:	00018c95 	.word	0x00018c95
   1137c:	200052e8 	.word	0x200052e8
   11380:	00018c81 	.word	0x00018c81
   11384:	20005224 	.word	0x20005224
   11388:	200051c8 	.word	0x200051c8
   1138c:	20003cc8 	.word	0x20003cc8
   11390:	20005164 	.word	0x20005164
   11394:	20004870 	.word	0x20004870
   11398:	005e0057 	.word	0x005e0057
   1139c:	00028999 	.word	0x00028999
   113a0:	007e0057 	.word	0x007e0057

000113a4 <save_calibration>:
void save_calibration(void){
   113a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   113a6:	b0a5      	sub	sp, #148	; 0x94
	packet.ten_bit_address = false;
   113a8:	2300      	movs	r3, #0
   113aa:	466a      	mov	r2, sp
	packet.data = send_buf;
   113ac:	ae03      	add	r6, sp, #12
	packet.ten_bit_address = false;
   113ae:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
   113b0:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
   113b2:	7293      	strb	r3, [r2, #10]
		send_buf[1] = address_packet & 0x00FF;
   113b4:	7073      	strb	r3, [r6, #1]
	packet.address = EEPROM_add;
   113b6:	4b3f      	ldr	r3, [pc, #252]	; (114b4 <save_calibration+0x110>)
		send_buf[0] = address_packet>>8;
   113b8:	2203      	movs	r2, #3
	packet.address = EEPROM_add;
   113ba:	9300      	str	r3, [sp, #0]
   113bc:	230e      	movs	r3, #14
   113be:	446b      	add	r3, sp
		send_buf[0] = address_packet>>8;
   113c0:	7032      	strb	r2, [r6, #0]
   113c2:	493d      	ldr	r1, [pc, #244]	; (114b8 <save_calibration+0x114>)
   113c4:	3259      	adds	r2, #89	; 0x59
   113c6:	0018      	movs	r0, r3
   113c8:	4f3c      	ldr	r7, [pc, #240]	; (114bc <save_calibration+0x118>)
	packet.data = send_buf;
   113ca:	9601      	str	r6, [sp, #4]
   113cc:	47b8      	blx	r7
   113ce:	4c3c      	ldr	r4, [pc, #240]	; (114c0 <save_calibration+0x11c>)
   113d0:	4d3c      	ldr	r5, [pc, #240]	; (114c4 <save_calibration+0x120>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   113d2:	4669      	mov	r1, sp
   113d4:	0020      	movs	r0, r4
   113d6:	47a8      	blx	r5
   113d8:	2800      	cmp	r0, #0
   113da:	d1fa      	bne.n	113d2 <save_calibration+0x2e>
	packet.ten_bit_address = false;
   113dc:	466b      	mov	r3, sp
   113de:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
   113e0:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
   113e2:	7298      	strb	r0, [r3, #10]
		send_buf[0] = address_packet>>8;
   113e4:	2304      	movs	r3, #4
   113e6:	7033      	strb	r3, [r6, #0]
	packet.address = EEPROM_add;
   113e8:	4b32      	ldr	r3, [pc, #200]	; (114b4 <save_calibration+0x110>)
		send_buf[1] = address_packet & 0x00FF;
   113ea:	7070      	strb	r0, [r6, #1]
	packet.address = EEPROM_add;
   113ec:	9300      	str	r3, [sp, #0]
   113ee:	230e      	movs	r3, #14
   113f0:	446b      	add	r3, sp
   113f2:	225c      	movs	r2, #92	; 0x5c
   113f4:	4934      	ldr	r1, [pc, #208]	; (114c8 <save_calibration+0x124>)
   113f6:	0018      	movs	r0, r3
	packet.data = send_buf;
   113f8:	9601      	str	r6, [sp, #4]
   113fa:	47b8      	blx	r7
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   113fc:	4669      	mov	r1, sp
   113fe:	0020      	movs	r0, r4
   11400:	47a8      	blx	r5
   11402:	2800      	cmp	r0, #0
   11404:	d1fa      	bne.n	113fc <save_calibration+0x58>
	packet.ten_bit_address = false;
   11406:	466b      	mov	r3, sp
   11408:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
   1140a:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
   1140c:	7298      	strb	r0, [r3, #10]
		send_buf[0] = address_packet>>8;
   1140e:	2305      	movs	r3, #5
   11410:	7033      	strb	r3, [r6, #0]
	packet.address = EEPROM_add;
   11412:	4b28      	ldr	r3, [pc, #160]	; (114b4 <save_calibration+0x110>)
		send_buf[1] = address_packet & 0x00FF;
   11414:	7070      	strb	r0, [r6, #1]
	packet.address = EEPROM_add;
   11416:	9300      	str	r3, [sp, #0]
   11418:	230e      	movs	r3, #14
   1141a:	446b      	add	r3, sp
   1141c:	225c      	movs	r2, #92	; 0x5c
   1141e:	492b      	ldr	r1, [pc, #172]	; (114cc <save_calibration+0x128>)
   11420:	0018      	movs	r0, r3
	packet.data = send_buf;
   11422:	9601      	str	r6, [sp, #4]
   11424:	47b8      	blx	r7
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11426:	4669      	mov	r1, sp
   11428:	0020      	movs	r0, r4
   1142a:	47a8      	blx	r5
   1142c:	2800      	cmp	r0, #0
   1142e:	d1fa      	bne.n	11426 <save_calibration+0x82>
	packet.ten_bit_address = false;
   11430:	466b      	mov	r3, sp
   11432:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
   11434:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
   11436:	7298      	strb	r0, [r3, #10]
		send_buf[0] = address_packet>>8;
   11438:	2306      	movs	r3, #6
   1143a:	7033      	strb	r3, [r6, #0]
	packet.address = EEPROM_add;
   1143c:	4b1d      	ldr	r3, [pc, #116]	; (114b4 <save_calibration+0x110>)
		send_buf[1] = address_packet & 0x00FF;
   1143e:	7070      	strb	r0, [r6, #1]
	packet.address = EEPROM_add;
   11440:	9300      	str	r3, [sp, #0]
   11442:	230e      	movs	r3, #14
   11444:	446b      	add	r3, sp
   11446:	225c      	movs	r2, #92	; 0x5c
   11448:	4921      	ldr	r1, [pc, #132]	; (114d0 <save_calibration+0x12c>)
   1144a:	0018      	movs	r0, r3
	packet.data = send_buf;
   1144c:	9601      	str	r6, [sp, #4]
   1144e:	47b8      	blx	r7
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11450:	4669      	mov	r1, sp
   11452:	0020      	movs	r0, r4
   11454:	47a8      	blx	r5
   11456:	2800      	cmp	r0, #0
   11458:	d1fa      	bne.n	11450 <save_calibration+0xac>
	packet.ten_bit_address = false;
   1145a:	466b      	mov	r3, sp
   1145c:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
   1145e:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
   11460:	7298      	strb	r0, [r3, #10]
		send_buf[0] = address_packet>>8;
   11462:	2307      	movs	r3, #7
   11464:	7033      	strb	r3, [r6, #0]
	packet.address = EEPROM_add;
   11466:	4b13      	ldr	r3, [pc, #76]	; (114b4 <save_calibration+0x110>)
		send_buf[1] = address_packet & 0x00FF;
   11468:	7070      	strb	r0, [r6, #1]
	packet.address = EEPROM_add;
   1146a:	9300      	str	r3, [sp, #0]
   1146c:	230e      	movs	r3, #14
   1146e:	446b      	add	r3, sp
   11470:	225c      	movs	r2, #92	; 0x5c
   11472:	4918      	ldr	r1, [pc, #96]	; (114d4 <save_calibration+0x130>)
   11474:	0018      	movs	r0, r3
	packet.data = send_buf;
   11476:	9601      	str	r6, [sp, #4]
   11478:	47b8      	blx	r7
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1147a:	4669      	mov	r1, sp
   1147c:	0020      	movs	r0, r4
   1147e:	47a8      	blx	r5
   11480:	2800      	cmp	r0, #0
   11482:	d1fa      	bne.n	1147a <save_calibration+0xd6>
	packet.ten_bit_address = false;
   11484:	466b      	mov	r3, sp
   11486:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
   11488:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
   1148a:	7298      	strb	r0, [r3, #10]
		send_buf[0] = address_packet>>8;
   1148c:	2308      	movs	r3, #8
   1148e:	7033      	strb	r3, [r6, #0]
	packet.address = EEPROM_add;
   11490:	4b11      	ldr	r3, [pc, #68]	; (114d8 <save_calibration+0x134>)
		send_buf[1] = address_packet & 0x00FF;
   11492:	7070      	strb	r0, [r6, #1]
	packet.address = EEPROM_add;
   11494:	9300      	str	r3, [sp, #0]
   11496:	230e      	movs	r3, #14
   11498:	446b      	add	r3, sp
   1149a:	227c      	movs	r2, #124	; 0x7c
   1149c:	490f      	ldr	r1, [pc, #60]	; (114dc <save_calibration+0x138>)
   1149e:	0018      	movs	r0, r3
	packet.data = send_buf;
   114a0:	9601      	str	r6, [sp, #4]
   114a2:	47b8      	blx	r7
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   114a4:	4669      	mov	r1, sp
   114a6:	0020      	movs	r0, r4
   114a8:	47a8      	blx	r5
   114aa:	2800      	cmp	r0, #0
   114ac:	d1fa      	bne.n	114a4 <save_calibration+0x100>
}
   114ae:	b025      	add	sp, #148	; 0x94
   114b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114b2:	46c0      	nop			; (mov r8, r8)
   114b4:	005e0057 	.word	0x005e0057
   114b8:	200052e8 	.word	0x200052e8
   114bc:	00028999 	.word	0x00028999
   114c0:	20000e78 	.word	0x20000e78
   114c4:	00018c95 	.word	0x00018c95
   114c8:	20005224 	.word	0x20005224
   114cc:	200051c8 	.word	0x200051c8
   114d0:	20003cc8 	.word	0x20003cc8
   114d4:	20005164 	.word	0x20005164
   114d8:	007e0057 	.word	0x007e0057
   114dc:	20004870 	.word	0x20004870

000114e0 <save_cal_report>:
void save_cal_report(void){
   114e0:	b530      	push	{r4, r5, lr}
   114e2:	b0a5      	sub	sp, #148	; 0x94
	packet.ten_bit_address = false;
   114e4:	2300      	movs	r3, #0
   114e6:	4669      	mov	r1, sp
   114e8:	200e      	movs	r0, #14
   114ea:	720b      	strb	r3, [r1, #8]
	packet.high_speed = false;
   114ec:	724b      	strb	r3, [r1, #9]
	packet.hs_master_code = 0x0;
   114ee:	728b      	strb	r3, [r1, #10]
		send_buf[0] = address_packet>>8;
   114f0:	2108      	movs	r1, #8
	packet.data = send_buf;
   114f2:	aa03      	add	r2, sp, #12
		send_buf[1] = address_packet & 0x00FF;
   114f4:	7053      	strb	r3, [r2, #1]
	packet.address = EEPROM_add;
   114f6:	4b09      	ldr	r3, [pc, #36]	; (1151c <save_cal_report+0x3c>)
		send_buf[0] = address_packet>>8;
   114f8:	7011      	strb	r1, [r2, #0]
	packet.data = send_buf;
   114fa:	9201      	str	r2, [sp, #4]
	packet.address = EEPROM_add;
   114fc:	9300      	str	r3, [sp, #0]
   114fe:	227c      	movs	r2, #124	; 0x7c
   11500:	4907      	ldr	r1, [pc, #28]	; (11520 <save_cal_report+0x40>)
   11502:	4468      	add	r0, sp
   11504:	4b07      	ldr	r3, [pc, #28]	; (11524 <save_cal_report+0x44>)
   11506:	4798      	blx	r3
   11508:	4d07      	ldr	r5, [pc, #28]	; (11528 <save_cal_report+0x48>)
   1150a:	4c08      	ldr	r4, [pc, #32]	; (1152c <save_cal_report+0x4c>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1150c:	4669      	mov	r1, sp
   1150e:	0028      	movs	r0, r5
   11510:	47a0      	blx	r4
   11512:	2800      	cmp	r0, #0
   11514:	d1fa      	bne.n	1150c <save_cal_report+0x2c>
}
   11516:	b025      	add	sp, #148	; 0x94
   11518:	bd30      	pop	{r4, r5, pc}
   1151a:	46c0      	nop			; (mov r8, r8)
   1151c:	007e0057 	.word	0x007e0057
   11520:	20004870 	.word	0x20004870
   11524:	00028999 	.word	0x00028999
   11528:	20000e78 	.word	0x20000e78
   1152c:	00018c95 	.word	0x00018c95

00011530 <load_cal_report>:
void load_cal_report(void){
   11530:	b570      	push	{r4, r5, r6, lr}
   11532:	b084      	sub	sp, #16
	struct i2c_master_packet packet = {
   11534:	ac01      	add	r4, sp, #4
   11536:	220c      	movs	r2, #12
   11538:	4b0f      	ldr	r3, [pc, #60]	; (11578 <load_cal_report+0x48>)
   1153a:	2100      	movs	r1, #0
   1153c:	0020      	movs	r0, r4
   1153e:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
   11540:	466a      	mov	r2, sp
   11542:	2308      	movs	r3, #8
   11544:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
   11546:	2300      	movs	r3, #0
   11548:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
   1154a:	4b0c      	ldr	r3, [pc, #48]	; (1157c <load_cal_report+0x4c>)
   1154c:	4d0c      	ldr	r5, [pc, #48]	; (11580 <load_cal_report+0x50>)
   1154e:	4e0d      	ldr	r6, [pc, #52]	; (11584 <load_cal_report+0x54>)
	packet.data = add_buf;
   11550:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
   11552:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11554:	0021      	movs	r1, r4
   11556:	0028      	movs	r0, r5
   11558:	47b0      	blx	r6
   1155a:	2800      	cmp	r0, #0
   1155c:	d1fa      	bne.n	11554 <load_cal_report+0x24>
	packet.data = data_buf;
   1155e:	4b0a      	ldr	r3, [pc, #40]	; (11588 <load_cal_report+0x58>)
   11560:	4e0a      	ldr	r6, [pc, #40]	; (1158c <load_cal_report+0x5c>)
   11562:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
   11564:	237c      	movs	r3, #124	; 0x7c
   11566:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   11568:	0021      	movs	r1, r4
   1156a:	0028      	movs	r0, r5
   1156c:	47b0      	blx	r6
   1156e:	2800      	cmp	r0, #0
   11570:	d1fa      	bne.n	11568 <load_cal_report+0x38>
}
   11572:	b004      	add	sp, #16
   11574:	bd70      	pop	{r4, r5, r6, pc}
   11576:	46c0      	nop			; (mov r8, r8)
   11578:	00028a1d 	.word	0x00028a1d
   1157c:	00020057 	.word	0x00020057
   11580:	20000e78 	.word	0x20000e78
   11584:	00018c95 	.word	0x00018c95
   11588:	20004870 	.word	0x20004870
   1158c:	00018c81 	.word	0x00018c81

00011590 <gen_err_message>:


#include <errorsBRIC4.h>


void gen_err_message(char *err_str, struct MEASUREMENT *meas_inst, uint8_t errN){
   11590:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t axis;
	data1 = meas_inst->measurement_error_data1[errN];
	data2 = meas_inst->measurement_error_data2[errN];
	axis = data2;
	
	if (meas_inst->errCode[errN] == 0){
   11592:	188b      	adds	r3, r1, r2
   11594:	332c      	adds	r3, #44	; 0x2c
   11596:	781c      	ldrb	r4, [r3, #0]
void gen_err_message(char *err_str, struct MEASUREMENT *meas_inst, uint8_t errN){
   11598:	b083      	sub	sp, #12
   1159a:	0005      	movs	r5, r0
	if (meas_inst->errCode[errN] == 0){
   1159c:	2c00      	cmp	r4, #0
   1159e:	d00d      	beq.n	115bc <gen_err_message+0x2c>
   115a0:	0092      	lsls	r2, r2, #2
   115a2:	1889      	adds	r1, r1, r2
	axis = data2;
   115a4:	6b88      	ldr	r0, [r1, #56]	; 0x38
   115a6:	4b6e      	ldr	r3, [pc, #440]	; (11760 <gen_err_message+0x1d0>)
	data1 = meas_inst->measurement_error_data1[errN];
   115a8:	6b0f      	ldr	r7, [r1, #48]	; 0x30
	axis = data2;
   115aa:	4798      	blx	r3
   115ac:	b2c6      	uxtb	r6, r0
		*err_str = 0x00;
		return;
	}
	
	switch(meas_inst->errCode[errN]){
   115ae:	2c0f      	cmp	r4, #15
   115b0:	d900      	bls.n	115b4 <gen_err_message+0x24>
   115b2:	e0a6      	b.n	11702 <gen_err_message+0x172>
   115b4:	4a6b      	ldr	r2, [pc, #428]	; (11764 <gen_err_message+0x1d4>)
   115b6:	00a3      	lsls	r3, r4, #2
   115b8:	58d3      	ldr	r3, [r2, r3]
   115ba:	469f      	mov	pc, r3
		*err_str = 0x00;
   115bc:	7004      	strb	r4, [r0, #0]
	};
	
	
	
	
}
   115be:	b003      	add	sp, #12
   115c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(err_str,"Azm Delta: %0.3fdeg", data1);
   115c2:	1c38      	adds	r0, r7, #0
   115c4:	4b68      	ldr	r3, [pc, #416]	; (11768 <gen_err_message+0x1d8>)
   115c6:	4798      	blx	r3
   115c8:	4c68      	ldr	r4, [pc, #416]	; (1176c <gen_err_message+0x1dc>)
   115ca:	0002      	movs	r2, r0
   115cc:	000b      	movs	r3, r1
   115ce:	0028      	movs	r0, r5
   115d0:	4967      	ldr	r1, [pc, #412]	; (11770 <gen_err_message+0x1e0>)
   115d2:	47a0      	blx	r4
			break;
   115d4:	e7f3      	b.n	115be <gen_err_message+0x2e>
			sprintf(err_str,"Inc Delta: %0.3fdeg", data1);
   115d6:	1c38      	adds	r0, r7, #0
   115d8:	4b63      	ldr	r3, [pc, #396]	; (11768 <gen_err_message+0x1d8>)
   115da:	4798      	blx	r3
   115dc:	4c63      	ldr	r4, [pc, #396]	; (1176c <gen_err_message+0x1dc>)
   115de:	0002      	movs	r2, r0
   115e0:	000b      	movs	r3, r1
   115e2:	0028      	movs	r0, r5
   115e4:	4963      	ldr	r1, [pc, #396]	; (11774 <gen_err_message+0x1e4>)
   115e6:	47a0      	blx	r4
			break;
   115e8:	e7e9      	b.n	115be <gen_err_message+0x2e>
			sprintf(err_str,"laser wrong message, %f",data1);
   115ea:	1c38      	adds	r0, r7, #0
   115ec:	4b5e      	ldr	r3, [pc, #376]	; (11768 <gen_err_message+0x1d8>)
   115ee:	4798      	blx	r3
   115f0:	4c5e      	ldr	r4, [pc, #376]	; (1176c <gen_err_message+0x1dc>)
   115f2:	0002      	movs	r2, r0
   115f4:	000b      	movs	r3, r1
   115f6:	0028      	movs	r0, r5
   115f8:	495f      	ldr	r1, [pc, #380]	; (11778 <gen_err_message+0x1e8>)
   115fa:	47a0      	blx	r4
			break;
   115fc:	e7df      	b.n	115be <gen_err_message+0x2e>
			sprintf(err_str,"laser error unknown, %f",data1);
   115fe:	1c38      	adds	r0, r7, #0
   11600:	4b59      	ldr	r3, [pc, #356]	; (11768 <gen_err_message+0x1d8>)
   11602:	4798      	blx	r3
   11604:	4c59      	ldr	r4, [pc, #356]	; (1176c <gen_err_message+0x1dc>)
   11606:	0002      	movs	r2, r0
   11608:	000b      	movs	r3, r1
   1160a:	0028      	movs	r0, r5
   1160c:	495b      	ldr	r1, [pc, #364]	; (1177c <gen_err_message+0x1ec>)
   1160e:	47a0      	blx	r4
			break;
   11610:	e7d5      	b.n	115be <gen_err_message+0x2e>
			sprintf(err_str,"laser comm timeout");
   11612:	2213      	movs	r2, #19
   11614:	495a      	ldr	r1, [pc, #360]	; (11780 <gen_err_message+0x1f0>)
   11616:	0028      	movs	r0, r5
   11618:	4b5a      	ldr	r3, [pc, #360]	; (11784 <gen_err_message+0x1f4>)
   1161a:	4798      	blx	r3
			break;
   1161c:	e7cf      	b.n	115be <gen_err_message+0x2e>
			sprintf(err_str,"laser strong signal");
   1161e:	2214      	movs	r2, #20
   11620:	4959      	ldr	r1, [pc, #356]	; (11788 <gen_err_message+0x1f8>)
   11622:	0028      	movs	r0, r5
   11624:	4b57      	ldr	r3, [pc, #348]	; (11784 <gen_err_message+0x1f4>)
   11626:	4798      	blx	r3
			break;
   11628:	e7c9      	b.n	115be <gen_err_message+0x2e>
			sprintf(err_str,"laser weak signal");
   1162a:	2212      	movs	r2, #18
   1162c:	4957      	ldr	r1, [pc, #348]	; (1178c <gen_err_message+0x1fc>)
   1162e:	0028      	movs	r0, r5
   11630:	4b54      	ldr	r3, [pc, #336]	; (11784 <gen_err_message+0x1f4>)
   11632:	4798      	blx	r3
			break;
   11634:	e7c3      	b.n	115be <gen_err_message+0x2e>
			sprintf(err_str,"laser calc error");
   11636:	2211      	movs	r2, #17
   11638:	4955      	ldr	r1, [pc, #340]	; (11790 <gen_err_message+0x200>)
   1163a:	0028      	movs	r0, r5
   1163c:	4b51      	ldr	r3, [pc, #324]	; (11784 <gen_err_message+0x1f4>)
   1163e:	4798      	blx	r3
			break;
   11640:	e7bd      	b.n	115be <gen_err_message+0x2e>
			sprintf(err_str,"Mag delta ax%d %0.3f%%", axis, 100*data1);
   11642:	4954      	ldr	r1, [pc, #336]	; (11794 <gen_err_message+0x204>)
   11644:	1c38      	adds	r0, r7, #0
   11646:	4b54      	ldr	r3, [pc, #336]	; (11798 <gen_err_message+0x208>)
   11648:	4798      	blx	r3
   1164a:	4b47      	ldr	r3, [pc, #284]	; (11768 <gen_err_message+0x1d8>)
   1164c:	4798      	blx	r3
   1164e:	0032      	movs	r2, r6
   11650:	9000      	str	r0, [sp, #0]
   11652:	9101      	str	r1, [sp, #4]
   11654:	4b45      	ldr	r3, [pc, #276]	; (1176c <gen_err_message+0x1dc>)
   11656:	4951      	ldr	r1, [pc, #324]	; (1179c <gen_err_message+0x20c>)
   11658:	0028      	movs	r0, r5
   1165a:	4798      	blx	r3
			break;
   1165c:	e7af      	b.n	115be <gen_err_message+0x2e>
			sprintf(err_str,"Acc delta ax%d %0.3f%%", axis, 100*data1);
   1165e:	494d      	ldr	r1, [pc, #308]	; (11794 <gen_err_message+0x204>)
   11660:	1c38      	adds	r0, r7, #0
   11662:	4b4d      	ldr	r3, [pc, #308]	; (11798 <gen_err_message+0x208>)
   11664:	4798      	blx	r3
   11666:	4b40      	ldr	r3, [pc, #256]	; (11768 <gen_err_message+0x1d8>)
   11668:	4798      	blx	r3
   1166a:	0032      	movs	r2, r6
   1166c:	9000      	str	r0, [sp, #0]
   1166e:	9101      	str	r1, [sp, #4]
   11670:	4b3e      	ldr	r3, [pc, #248]	; (1176c <gen_err_message+0x1dc>)
   11672:	494b      	ldr	r1, [pc, #300]	; (117a0 <gen_err_message+0x210>)
   11674:	0028      	movs	r0, r5
   11676:	4798      	blx	r3
			break;
   11678:	e7a1      	b.n	115be <gen_err_message+0x2e>
			if (data1>1){sprintf(err_str,"Comp2 High: %0.4f", data1);}
   1167a:	21fe      	movs	r1, #254	; 0xfe
   1167c:	1c38      	adds	r0, r7, #0
   1167e:	0589      	lsls	r1, r1, #22
   11680:	4b48      	ldr	r3, [pc, #288]	; (117a4 <gen_err_message+0x214>)
   11682:	4798      	blx	r3
   11684:	2800      	cmp	r0, #0
   11686:	d056      	beq.n	11736 <gen_err_message+0x1a6>
   11688:	1c38      	adds	r0, r7, #0
   1168a:	4b37      	ldr	r3, [pc, #220]	; (11768 <gen_err_message+0x1d8>)
   1168c:	4798      	blx	r3
   1168e:	4c37      	ldr	r4, [pc, #220]	; (1176c <gen_err_message+0x1dc>)
   11690:	0002      	movs	r2, r0
   11692:	000b      	movs	r3, r1
   11694:	0028      	movs	r0, r5
   11696:	4944      	ldr	r1, [pc, #272]	; (117a8 <gen_err_message+0x218>)
   11698:	47a0      	blx	r4
   1169a:	e790      	b.n	115be <gen_err_message+0x2e>
			if (data1>1){sprintf(err_str,"Comp1 High: %0.4f", data1);}
   1169c:	21fe      	movs	r1, #254	; 0xfe
   1169e:	1c38      	adds	r0, r7, #0
   116a0:	0589      	lsls	r1, r1, #22
   116a2:	4b40      	ldr	r3, [pc, #256]	; (117a4 <gen_err_message+0x214>)
   116a4:	4798      	blx	r3
   116a6:	2800      	cmp	r0, #0
   116a8:	d031      	beq.n	1170e <gen_err_message+0x17e>
   116aa:	1c38      	adds	r0, r7, #0
   116ac:	4b2e      	ldr	r3, [pc, #184]	; (11768 <gen_err_message+0x1d8>)
   116ae:	4798      	blx	r3
   116b0:	4c2e      	ldr	r4, [pc, #184]	; (1176c <gen_err_message+0x1dc>)
   116b2:	0002      	movs	r2, r0
   116b4:	000b      	movs	r3, r1
   116b6:	0028      	movs	r0, r5
   116b8:	493c      	ldr	r1, [pc, #240]	; (117ac <gen_err_message+0x21c>)
   116ba:	47a0      	blx	r4
   116bc:	e77f      	b.n	115be <gen_err_message+0x2e>
			if (data1>1){sprintf(err_str,"Acc2 High: %0.4f", data1);}
   116be:	21fe      	movs	r1, #254	; 0xfe
   116c0:	1c38      	adds	r0, r7, #0
   116c2:	0589      	lsls	r1, r1, #22
   116c4:	4b37      	ldr	r3, [pc, #220]	; (117a4 <gen_err_message+0x214>)
   116c6:	4798      	blx	r3
   116c8:	2800      	cmp	r0, #0
   116ca:	d02a      	beq.n	11722 <gen_err_message+0x192>
   116cc:	1c38      	adds	r0, r7, #0
   116ce:	4b26      	ldr	r3, [pc, #152]	; (11768 <gen_err_message+0x1d8>)
   116d0:	4798      	blx	r3
   116d2:	4c26      	ldr	r4, [pc, #152]	; (1176c <gen_err_message+0x1dc>)
   116d4:	0002      	movs	r2, r0
   116d6:	000b      	movs	r3, r1
   116d8:	0028      	movs	r0, r5
   116da:	4935      	ldr	r1, [pc, #212]	; (117b0 <gen_err_message+0x220>)
   116dc:	47a0      	blx	r4
   116de:	e76e      	b.n	115be <gen_err_message+0x2e>
			if (data1>1){sprintf(err_str,"Acc1 High: %0.4f", data1);}
   116e0:	21fe      	movs	r1, #254	; 0xfe
   116e2:	1c38      	adds	r0, r7, #0
   116e4:	0589      	lsls	r1, r1, #22
   116e6:	4b2f      	ldr	r3, [pc, #188]	; (117a4 <gen_err_message+0x214>)
   116e8:	4798      	blx	r3
   116ea:	2800      	cmp	r0, #0
   116ec:	d02d      	beq.n	1174a <gen_err_message+0x1ba>
   116ee:	1c38      	adds	r0, r7, #0
   116f0:	4b1d      	ldr	r3, [pc, #116]	; (11768 <gen_err_message+0x1d8>)
   116f2:	4798      	blx	r3
   116f4:	4c1d      	ldr	r4, [pc, #116]	; (1176c <gen_err_message+0x1dc>)
   116f6:	0002      	movs	r2, r0
   116f8:	000b      	movs	r3, r1
   116fa:	0028      	movs	r0, r5
   116fc:	492d      	ldr	r1, [pc, #180]	; (117b4 <gen_err_message+0x224>)
   116fe:	47a0      	blx	r4
   11700:	e75d      	b.n	115be <gen_err_message+0x2e>
			sprintf(err_str,"Unknown error %d",meas_inst->errCode[errN]);
   11702:	0022      	movs	r2, r4
   11704:	492c      	ldr	r1, [pc, #176]	; (117b8 <gen_err_message+0x228>)
   11706:	0028      	movs	r0, r5
   11708:	4b18      	ldr	r3, [pc, #96]	; (1176c <gen_err_message+0x1dc>)
   1170a:	4798      	blx	r3
   1170c:	e757      	b.n	115be <gen_err_message+0x2e>
			else{sprintf(err_str,"Comp1 Low: %0.4f", data1);}
   1170e:	1c38      	adds	r0, r7, #0
   11710:	4b15      	ldr	r3, [pc, #84]	; (11768 <gen_err_message+0x1d8>)
   11712:	4798      	blx	r3
   11714:	4c15      	ldr	r4, [pc, #84]	; (1176c <gen_err_message+0x1dc>)
   11716:	0002      	movs	r2, r0
   11718:	000b      	movs	r3, r1
   1171a:	0028      	movs	r0, r5
   1171c:	4927      	ldr	r1, [pc, #156]	; (117bc <gen_err_message+0x22c>)
   1171e:	47a0      	blx	r4
   11720:	e74d      	b.n	115be <gen_err_message+0x2e>
			else{sprintf(err_str,"Acc2 Low: %0.4f", data1);}
   11722:	1c38      	adds	r0, r7, #0
   11724:	4b10      	ldr	r3, [pc, #64]	; (11768 <gen_err_message+0x1d8>)
   11726:	4798      	blx	r3
   11728:	4c10      	ldr	r4, [pc, #64]	; (1176c <gen_err_message+0x1dc>)
   1172a:	0002      	movs	r2, r0
   1172c:	000b      	movs	r3, r1
   1172e:	0028      	movs	r0, r5
   11730:	4923      	ldr	r1, [pc, #140]	; (117c0 <gen_err_message+0x230>)
   11732:	47a0      	blx	r4
   11734:	e743      	b.n	115be <gen_err_message+0x2e>
			else{sprintf(err_str,"Comp2 Low: %0.4f", data1);}
   11736:	1c38      	adds	r0, r7, #0
   11738:	4b0b      	ldr	r3, [pc, #44]	; (11768 <gen_err_message+0x1d8>)
   1173a:	4798      	blx	r3
   1173c:	4c0b      	ldr	r4, [pc, #44]	; (1176c <gen_err_message+0x1dc>)
   1173e:	0002      	movs	r2, r0
   11740:	000b      	movs	r3, r1
   11742:	0028      	movs	r0, r5
   11744:	491f      	ldr	r1, [pc, #124]	; (117c4 <gen_err_message+0x234>)
   11746:	47a0      	blx	r4
   11748:	e739      	b.n	115be <gen_err_message+0x2e>
			else{sprintf(err_str,"Acc1 Low: %0.4f", data1);}
   1174a:	1c38      	adds	r0, r7, #0
   1174c:	4b06      	ldr	r3, [pc, #24]	; (11768 <gen_err_message+0x1d8>)
   1174e:	4798      	blx	r3
   11750:	4c06      	ldr	r4, [pc, #24]	; (1176c <gen_err_message+0x1dc>)
   11752:	0002      	movs	r2, r0
   11754:	000b      	movs	r3, r1
   11756:	0028      	movs	r0, r5
   11758:	491b      	ldr	r1, [pc, #108]	; (117c8 <gen_err_message+0x238>)
   1175a:	47a0      	blx	r4
   1175c:	e72f      	b.n	115be <gen_err_message+0x2e>
   1175e:	46c0      	nop			; (mov r8, r8)
   11760:	00025de9 	.word	0x00025de9
   11764:	0002dd10 	.word	0x0002dd10
   11768:	0002878d 	.word	0x0002878d
   1176c:	00028ab1 	.word	0x00028ab1
   11770:	0002de2c 	.word	0x0002de2c
   11774:	0002de18 	.word	0x0002de18
   11778:	0002dea8 	.word	0x0002dea8
   1177c:	0002de90 	.word	0x0002de90
   11780:	0002de7c 	.word	0x0002de7c
   11784:	00028999 	.word	0x00028999
   11788:	0002de68 	.word	0x0002de68
   1178c:	0002de54 	.word	0x0002de54
   11790:	0002de40 	.word	0x0002de40
   11794:	42c80000 	.word	0x42c80000
   11798:	00026559 	.word	0x00026559
   1179c:	0002de00 	.word	0x0002de00
   117a0:	0002dde8 	.word	0x0002dde8
   117a4:	00025cf1 	.word	0x00025cf1
   117a8:	0002ddc0 	.word	0x0002ddc0
   117ac:	0002dd98 	.word	0x0002dd98
   117b0:	0002dd74 	.word	0x0002dd74
   117b4:	0002dd50 	.word	0x0002dd50
   117b8:	0002dec0 	.word	0x0002dec0
   117bc:	0002ddac 	.word	0x0002ddac
   117c0:	0002dd88 	.word	0x0002dd88
   117c4:	0002ddd4 	.word	0x0002ddd4
   117c8:	0002dd64 	.word	0x0002dd64

000117cc <error_check>:



void error_check(struct MEASUREMENT_FULL *meas_inst){
   117cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   117ce:	46de      	mov	lr, fp
   117d0:	4657      	mov	r7, sl
   117d2:	464e      	mov	r6, r9
   117d4:	4645      	mov	r5, r8
   117d6:	4682      	mov	sl, r0
	comp_err_limit  = errlim_mag*max(cal_report.mag_stdev_m1, cal_report.mag_stdev_m2);
	
	accel_err_limit = 0.5;
	comp_err_limit  = 0.5;
	
	magA1 = calc_magnitude(meas_inst->a1Cal);
   117d8:	2378      	movs	r3, #120	; 0x78
void error_check(struct MEASUREMENT_FULL *meas_inst){
   117da:	b5e0      	push	{r5, r6, r7, lr}
	magA1 = calc_magnitude(meas_inst->a1Cal);
   117dc:	4453      	add	r3, sl
void error_check(struct MEASUREMENT_FULL *meas_inst){
   117de:	b093      	sub	sp, #76	; 0x4c
	magA1 = calc_magnitude(meas_inst->a1Cal);
   117e0:	4cdf      	ldr	r4, [pc, #892]	; (11b60 <error_check+0x394>)
   117e2:	0018      	movs	r0, r3
   117e4:	9304      	str	r3, [sp, #16]
   117e6:	47a0      	blx	r4
	magA2 = calc_magnitude(meas_inst->a2Cal);
   117e8:	2384      	movs	r3, #132	; 0x84
   117ea:	4453      	add	r3, sl
	magA1 = calc_magnitude(meas_inst->a1Cal);
   117ec:	1c06      	adds	r6, r0, #0
	magA2 = calc_magnitude(meas_inst->a2Cal);
   117ee:	0018      	movs	r0, r3
   117f0:	9305      	str	r3, [sp, #20]
   117f2:	47a0      	blx	r4
	magM1 = calc_magnitude(meas_inst->m1Cal);
   117f4:	2390      	movs	r3, #144	; 0x90
   117f6:	4453      	add	r3, sl
	magA2 = calc_magnitude(meas_inst->a2Cal);
   117f8:	1c07      	adds	r7, r0, #0
	magM1 = calc_magnitude(meas_inst->m1Cal);
   117fa:	0018      	movs	r0, r3
   117fc:	9306      	str	r3, [sp, #24]
   117fe:	47a0      	blx	r4
	magM2 = calc_magnitude(meas_inst->m2Cal);
   11800:	239c      	movs	r3, #156	; 0x9c
   11802:	4453      	add	r3, sl
	magM1 = calc_magnitude(meas_inst->m1Cal);
   11804:	9003      	str	r0, [sp, #12]
	magM2 = calc_magnitude(meas_inst->m2Cal);
   11806:	0018      	movs	r0, r3
   11808:	9307      	str	r3, [sp, #28]
   1180a:	47a0      	blx	r4
	
	//  Magnitude Check accelerometer 1
	//mag = calc_magnitude(meas_inst->a1xyz);
	delta = fabs(magA1-1);
   1180c:	21fe      	movs	r1, #254	; 0xfe
   1180e:	4bd5      	ldr	r3, [pc, #852]	; (11b64 <error_check+0x398>)
   11810:	0589      	lsls	r1, r1, #22
	magM2 = calc_magnitude(meas_inst->m2Cal);
   11812:	4681      	mov	r9, r0
	delta = fabs(magA1-1);
   11814:	1c30      	adds	r0, r6, #0
   11816:	469b      	mov	fp, r3
   11818:	4798      	blx	r3
	if (fabs(magA1-1)>accel_err_limit)
   1181a:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magA1-1);
   1181c:	0040      	lsls	r0, r0, #1
	if (fabs(magA1-1)>accel_err_limit)
   1181e:	4bd2      	ldr	r3, [pc, #840]	; (11b68 <error_check+0x39c>)
	delta = fabs(magA1-1);
   11820:	0840      	lsrs	r0, r0, #1
	if (fabs(magA1-1)>accel_err_limit)
   11822:	0589      	lsls	r1, r1, #22
   11824:	4698      	mov	r8, r3
   11826:	4798      	blx	r3
   11828:	2800      	cmp	r0, #0
   1182a:	d100      	bne.n	1182e <error_check+0x62>
   1182c:	e1ec      	b.n	11c08 <error_check+0x43c>
{
	bool error_incremented = false;
	uint8_t i;
	
	for (i=0;i<MAX_ERRORS;i++){
		if(meas_inst->errCode[i]==0){
   1182e:	232c      	movs	r3, #44	; 0x2c
   11830:	4652      	mov	r2, sl
   11832:	5cd3      	ldrb	r3, [r2, r3]
   11834:	2b00      	cmp	r3, #0
   11836:	d100      	bne.n	1183a <error_check+0x6e>
   11838:	e1db      	b.n	11bf2 <error_check+0x426>
   1183a:	232d      	movs	r3, #45	; 0x2d
   1183c:	5cd3      	ldrb	r3, [r2, r3]
   1183e:	2b00      	cmp	r3, #0
   11840:	d100      	bne.n	11844 <error_check+0x78>
   11842:	e2e1      	b.n	11e08 <error_check+0x63c>
	delta = fabs(magA2-1);
   11844:	21fe      	movs	r1, #254	; 0xfe
   11846:	1c38      	adds	r0, r7, #0
   11848:	0589      	lsls	r1, r1, #22
   1184a:	47d8      	blx	fp
	if (delta>accel_err_limit)
   1184c:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magA2-1);
   1184e:	0040      	lsls	r0, r0, #1
   11850:	0840      	lsrs	r0, r0, #1
	if (delta>accel_err_limit)
   11852:	0589      	lsls	r1, r1, #22
   11854:	47c0      	blx	r8
   11856:	2800      	cmp	r0, #0
   11858:	d100      	bne.n	1185c <error_check+0x90>
   1185a:	e1f6      	b.n	11c4a <error_check+0x47e>
	delta = fabs(magM1-1);
   1185c:	21fe      	movs	r1, #254	; 0xfe
   1185e:	9803      	ldr	r0, [sp, #12]
   11860:	0589      	lsls	r1, r1, #22
   11862:	47d8      	blx	fp
	if (delta>comp_err_limit)
   11864:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magM1-1);
   11866:	0040      	lsls	r0, r0, #1
   11868:	0840      	lsrs	r0, r0, #1
	if (delta>comp_err_limit)
   1186a:	0589      	lsls	r1, r1, #22
   1186c:	47c0      	blx	r8
   1186e:	2800      	cmp	r0, #0
   11870:	d100      	bne.n	11874 <error_check+0xa8>
   11872:	e20c      	b.n	11c8e <error_check+0x4c2>
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
   11874:	4653      	mov	r3, sl
   11876:	4cbd      	ldr	r4, [pc, #756]	; (11b6c <error_check+0x3a0>)
   11878:	1c31      	adds	r1, r6, #0
   1187a:	6f98      	ldr	r0, [r3, #120]	; 0x78
   1187c:	47a0      	blx	r4
   1187e:	2384      	movs	r3, #132	; 0x84
   11880:	4652      	mov	r2, sl
   11882:	1c05      	adds	r5, r0, #0
   11884:	1c39      	adds	r1, r7, #0
   11886:	58d0      	ldr	r0, [r2, r3]
   11888:	47a0      	blx	r4
   1188a:	1c01      	adds	r1, r0, #0
   1188c:	1c28      	adds	r0, r5, #0
   1188e:	47d8      	blx	fp
		if (delta>accel_err_limit){
   11890:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
   11892:	0045      	lsls	r5, r0, #1
   11894:	086d      	lsrs	r5, r5, #1
		if (delta>accel_err_limit){
   11896:	0589      	lsls	r1, r1, #22
   11898:	1c28      	adds	r0, r5, #0
   1189a:	47c0      	blx	r8
   1189c:	2800      	cmp	r0, #0
   1189e:	d00b      	beq.n	118b8 <error_check+0xec>
		if(meas_inst->errCode[i]==0){
   118a0:	232c      	movs	r3, #44	; 0x2c
   118a2:	4652      	mov	r2, sl
   118a4:	5cd3      	ldrb	r3, [r2, r3]
   118a6:	2b00      	cmp	r3, #0
   118a8:	d100      	bne.n	118ac <error_check+0xe0>
   118aa:	e256      	b.n	11d5a <error_check+0x58e>
   118ac:	232d      	movs	r3, #45	; 0x2d
   118ae:	4652      	mov	r2, sl
   118b0:	5cd3      	ldrb	r3, [r2, r3]
   118b2:	2b00      	cmp	r3, #0
   118b4:	d100      	bne.n	118b8 <error_check+0xec>
   118b6:	e24f      	b.n	11d58 <error_check+0x58c>
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
   118b8:	4653      	mov	r3, sl
   118ba:	1c31      	adds	r1, r6, #0
   118bc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   118be:	47a0      	blx	r4
   118c0:	2388      	movs	r3, #136	; 0x88
   118c2:	4652      	mov	r2, sl
   118c4:	1c05      	adds	r5, r0, #0
   118c6:	1c39      	adds	r1, r7, #0
   118c8:	58d0      	ldr	r0, [r2, r3]
   118ca:	47a0      	blx	r4
   118cc:	1c01      	adds	r1, r0, #0
   118ce:	1c28      	adds	r0, r5, #0
   118d0:	47d8      	blx	fp
		if (delta>accel_err_limit){
   118d2:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
   118d4:	0045      	lsls	r5, r0, #1
   118d6:	086d      	lsrs	r5, r5, #1
		if (delta>accel_err_limit){
   118d8:	0589      	lsls	r1, r1, #22
   118da:	1c28      	adds	r0, r5, #0
   118dc:	47c0      	blx	r8
   118de:	2800      	cmp	r0, #0
   118e0:	d00b      	beq.n	118fa <error_check+0x12e>
		if(meas_inst->errCode[i]==0){
   118e2:	232c      	movs	r3, #44	; 0x2c
   118e4:	4652      	mov	r2, sl
   118e6:	5cd3      	ldrb	r3, [r2, r3]
   118e8:	2b00      	cmp	r3, #0
   118ea:	d100      	bne.n	118ee <error_check+0x122>
   118ec:	e228      	b.n	11d40 <error_check+0x574>
   118ee:	232d      	movs	r3, #45	; 0x2d
   118f0:	4652      	mov	r2, sl
   118f2:	5cd3      	ldrb	r3, [r2, r3]
   118f4:	2b00      	cmp	r3, #0
   118f6:	d100      	bne.n	118fa <error_check+0x12e>
   118f8:	e221      	b.n	11d3e <error_check+0x572>
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
   118fa:	2380      	movs	r3, #128	; 0x80
   118fc:	4652      	mov	r2, sl
   118fe:	1c31      	adds	r1, r6, #0
   11900:	58d0      	ldr	r0, [r2, r3]
   11902:	47a0      	blx	r4
   11904:	238c      	movs	r3, #140	; 0x8c
   11906:	4652      	mov	r2, sl
   11908:	1c05      	adds	r5, r0, #0
   1190a:	1c39      	adds	r1, r7, #0
   1190c:	58d0      	ldr	r0, [r2, r3]
   1190e:	47a0      	blx	r4
   11910:	1c01      	adds	r1, r0, #0
   11912:	1c28      	adds	r0, r5, #0
   11914:	47d8      	blx	fp
		if (delta>accel_err_limit){
   11916:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
   11918:	0045      	lsls	r5, r0, #1
   1191a:	086d      	lsrs	r5, r5, #1
		if (delta>accel_err_limit){
   1191c:	0589      	lsls	r1, r1, #22
   1191e:	1c28      	adds	r0, r5, #0
   11920:	47c0      	blx	r8
   11922:	2800      	cmp	r0, #0
   11924:	d00a      	beq.n	1193c <error_check+0x170>
		if(meas_inst->errCode[i]==0){
   11926:	232c      	movs	r3, #44	; 0x2c
   11928:	4652      	mov	r2, sl
   1192a:	5cd3      	ldrb	r3, [r2, r3]
   1192c:	2b00      	cmp	r3, #0
   1192e:	d100      	bne.n	11932 <error_check+0x166>
   11930:	e244      	b.n	11dbc <error_check+0x5f0>
   11932:	232d      	movs	r3, #45	; 0x2d
   11934:	5cd3      	ldrb	r3, [r2, r3]
   11936:	2b00      	cmp	r3, #0
   11938:	d100      	bne.n	1193c <error_check+0x170>
   1193a:	e24b      	b.n	11dd4 <error_check+0x608>
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
   1193c:	2390      	movs	r3, #144	; 0x90
   1193e:	4652      	mov	r2, sl
   11940:	9903      	ldr	r1, [sp, #12]
   11942:	58d0      	ldr	r0, [r2, r3]
   11944:	47a0      	blx	r4
   11946:	239c      	movs	r3, #156	; 0x9c
   11948:	4652      	mov	r2, sl
   1194a:	1c05      	adds	r5, r0, #0
   1194c:	4649      	mov	r1, r9
   1194e:	58d0      	ldr	r0, [r2, r3]
   11950:	47a0      	blx	r4
   11952:	1c01      	adds	r1, r0, #0
   11954:	1c28      	adds	r0, r5, #0
   11956:	47d8      	blx	fp
		if (delta>comp_err_limit){
   11958:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
   1195a:	0045      	lsls	r5, r0, #1
   1195c:	086d      	lsrs	r5, r5, #1
		if (delta>comp_err_limit){
   1195e:	0589      	lsls	r1, r1, #22
   11960:	1c28      	adds	r0, r5, #0
   11962:	47c0      	blx	r8
   11964:	2800      	cmp	r0, #0
   11966:	d00b      	beq.n	11980 <error_check+0x1b4>
		if(meas_inst->errCode[i]==0){
   11968:	232c      	movs	r3, #44	; 0x2c
   1196a:	4652      	mov	r2, sl
   1196c:	5cd3      	ldrb	r3, [r2, r3]
   1196e:	2b00      	cmp	r3, #0
   11970:	d100      	bne.n	11974 <error_check+0x1a8>
   11972:	e1d8      	b.n	11d26 <error_check+0x55a>
   11974:	232d      	movs	r3, #45	; 0x2d
   11976:	4652      	mov	r2, sl
   11978:	5cd3      	ldrb	r3, [r2, r3]
   1197a:	2b00      	cmp	r3, #0
   1197c:	d100      	bne.n	11980 <error_check+0x1b4>
   1197e:	e1d1      	b.n	11d24 <error_check+0x558>
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
   11980:	2394      	movs	r3, #148	; 0x94
   11982:	4652      	mov	r2, sl
   11984:	9903      	ldr	r1, [sp, #12]
   11986:	58d0      	ldr	r0, [r2, r3]
   11988:	47a0      	blx	r4
   1198a:	23a0      	movs	r3, #160	; 0xa0
   1198c:	4652      	mov	r2, sl
   1198e:	1c05      	adds	r5, r0, #0
   11990:	4649      	mov	r1, r9
   11992:	58d0      	ldr	r0, [r2, r3]
   11994:	47a0      	blx	r4
   11996:	1c01      	adds	r1, r0, #0
   11998:	1c28      	adds	r0, r5, #0
   1199a:	47d8      	blx	fp
		if (delta>comp_err_limit){
   1199c:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
   1199e:	0045      	lsls	r5, r0, #1
   119a0:	086d      	lsrs	r5, r5, #1
		if (delta>comp_err_limit){
   119a2:	0589      	lsls	r1, r1, #22
   119a4:	1c28      	adds	r0, r5, #0
   119a6:	47c0      	blx	r8
   119a8:	2800      	cmp	r0, #0
   119aa:	d00b      	beq.n	119c4 <error_check+0x1f8>
		if(meas_inst->errCode[i]==0){
   119ac:	232c      	movs	r3, #44	; 0x2c
   119ae:	4652      	mov	r2, sl
   119b0:	5cd3      	ldrb	r3, [r2, r3]
   119b2:	2b00      	cmp	r3, #0
   119b4:	d100      	bne.n	119b8 <error_check+0x1ec>
   119b6:	e1dd      	b.n	11d74 <error_check+0x5a8>
   119b8:	232d      	movs	r3, #45	; 0x2d
   119ba:	4652      	mov	r2, sl
   119bc:	5cd3      	ldrb	r3, [r2, r3]
   119be:	2b00      	cmp	r3, #0
   119c0:	d100      	bne.n	119c4 <error_check+0x1f8>
   119c2:	e1d6      	b.n	11d72 <error_check+0x5a6>
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
   119c4:	2398      	movs	r3, #152	; 0x98
   119c6:	4652      	mov	r2, sl
   119c8:	9903      	ldr	r1, [sp, #12]
   119ca:	58d0      	ldr	r0, [r2, r3]
   119cc:	47a0      	blx	r4
   119ce:	23a4      	movs	r3, #164	; 0xa4
   119d0:	4652      	mov	r2, sl
   119d2:	1c05      	adds	r5, r0, #0
   119d4:	4649      	mov	r1, r9
   119d6:	58d0      	ldr	r0, [r2, r3]
   119d8:	47a0      	blx	r4
   119da:	1c01      	adds	r1, r0, #0
   119dc:	1c28      	adds	r0, r5, #0
   119de:	47d8      	blx	fp
		if (delta>comp_err_limit){
   119e0:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
   119e2:	0044      	lsls	r4, r0, #1
   119e4:	0864      	lsrs	r4, r4, #1
		if (delta>comp_err_limit){
   119e6:	0589      	lsls	r1, r1, #22
   119e8:	1c20      	adds	r0, r4, #0
   119ea:	47c0      	blx	r8
   119ec:	2800      	cmp	r0, #0
   119ee:	d00a      	beq.n	11a06 <error_check+0x23a>
		if(meas_inst->errCode[i]==0){
   119f0:	232c      	movs	r3, #44	; 0x2c
   119f2:	4652      	mov	r2, sl
   119f4:	5cd3      	ldrb	r3, [r2, r3]
   119f6:	2b00      	cmp	r3, #0
   119f8:	d100      	bne.n	119fc <error_check+0x230>
   119fa:	e1c7      	b.n	11d8c <error_check+0x5c0>
   119fc:	232d      	movs	r3, #45	; 0x2d
   119fe:	5cd3      	ldrb	r3, [r2, r3]
   11a00:	2b00      	cmp	r3, #0
   11a02:	d100      	bne.n	11a06 <error_check+0x23a>
   11a04:	e1e8      	b.n	11dd8 <error_check+0x60c>
	calc_azm_inc_roll_dec(meas_inst->a1Cal, meas_inst->m1Cal, &azm_arr[0], &inc_arr[0], &foo1, &foo2);
   11a06:	9f06      	ldr	r7, [sp, #24]
   11a08:	ad09      	add	r5, sp, #36	; 0x24
   11a0a:	ac08      	add	r4, sp, #32
   11a0c:	4e58      	ldr	r6, [pc, #352]	; (11b70 <error_check+0x3a4>)
   11a0e:	0039      	movs	r1, r7
   11a10:	9501      	str	r5, [sp, #4]
   11a12:	9400      	str	r4, [sp, #0]
   11a14:	ab0e      	add	r3, sp, #56	; 0x38
   11a16:	aa0a      	add	r2, sp, #40	; 0x28
   11a18:	9804      	ldr	r0, [sp, #16]
   11a1a:	47b0      	blx	r6
	calc_azm_inc_roll_dec(meas_inst->a2Cal, meas_inst->m1Cal, &azm_arr[1], &inc_arr[1], &foo1, &foo2);
   11a1c:	0039      	movs	r1, r7
   11a1e:	9f05      	ldr	r7, [sp, #20]
   11a20:	9501      	str	r5, [sp, #4]
   11a22:	46b9      	mov	r9, r7
   11a24:	0038      	movs	r0, r7
   11a26:	9400      	str	r4, [sp, #0]
   11a28:	ab0f      	add	r3, sp, #60	; 0x3c
   11a2a:	aa0b      	add	r2, sp, #44	; 0x2c
   11a2c:	47b0      	blx	r6
	calc_azm_inc_roll_dec(meas_inst->a1Cal, meas_inst->m2Cal, &azm_arr[2], &inc_arr[2], &foo1, &foo2);
   11a2e:	9f07      	ldr	r7, [sp, #28]
   11a30:	9501      	str	r5, [sp, #4]
   11a32:	0039      	movs	r1, r7
   11a34:	9400      	str	r4, [sp, #0]
   11a36:	ab10      	add	r3, sp, #64	; 0x40
   11a38:	aa0c      	add	r2, sp, #48	; 0x30
   11a3a:	9804      	ldr	r0, [sp, #16]
   11a3c:	47b0      	blx	r6
	calc_azm_inc_roll_dec(meas_inst->a2Cal, meas_inst->m2Cal, &azm_arr[3], &inc_arr[3], &foo1, &foo2);
   11a3e:	0039      	movs	r1, r7
   11a40:	9501      	str	r5, [sp, #4]
   11a42:	9400      	str	r4, [sp, #0]
   11a44:	ab11      	add	r3, sp, #68	; 0x44
   11a46:	aa0d      	add	r2, sp, #52	; 0x34
   11a48:	4648      	mov	r0, r9
   11a4a:	47b0      	blx	r6
	angMin = inc_arr[0]; angMax = inc_arr[0];
   11a4c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		angMin = min(angMin, inc_arr[i]);
   11a4e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   11a50:	4d48      	ldr	r5, [pc, #288]	; (11b74 <error_check+0x3a8>)
   11a52:	1c31      	adds	r1, r6, #0
   11a54:	1c20      	adds	r0, r4, #0
   11a56:	47a8      	blx	r5
   11a58:	1c27      	adds	r7, r4, #0
   11a5a:	2800      	cmp	r0, #0
   11a5c:	d100      	bne.n	11a60 <error_check+0x294>
   11a5e:	1c37      	adds	r7, r6, #0
   11a60:	1c31      	adds	r1, r6, #0
   11a62:	1c20      	adds	r0, r4, #0
   11a64:	47c0      	blx	r8
   11a66:	2800      	cmp	r0, #0
   11a68:	d100      	bne.n	11a6c <error_check+0x2a0>
   11a6a:	1c34      	adds	r4, r6, #0
   11a6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
   11a6e:	1c39      	adds	r1, r7, #0
   11a70:	1c30      	adds	r0, r6, #0
   11a72:	47c0      	blx	r8
   11a74:	2800      	cmp	r0, #0
   11a76:	d100      	bne.n	11a7a <error_check+0x2ae>
   11a78:	1c37      	adds	r7, r6, #0
   11a7a:	1c21      	adds	r1, r4, #0
   11a7c:	1c30      	adds	r0, r6, #0
   11a7e:	47a8      	blx	r5
   11a80:	2800      	cmp	r0, #0
   11a82:	d100      	bne.n	11a86 <error_check+0x2ba>
   11a84:	1c34      	adds	r4, r6, #0
   11a86:	9e11      	ldr	r6, [sp, #68]	; 0x44
	delta = angMax-angMin;
   11a88:	1c21      	adds	r1, r4, #0
   11a8a:	1c30      	adds	r0, r6, #0
   11a8c:	47a8      	blx	r5
   11a8e:	2800      	cmp	r0, #0
   11a90:	d100      	bne.n	11a94 <error_check+0x2c8>
   11a92:	1c34      	adds	r4, r6, #0
   11a94:	1c39      	adds	r1, r7, #0
   11a96:	1c30      	adds	r0, r6, #0
   11a98:	47c0      	blx	r8
   11a9a:	1c39      	adds	r1, r7, #0
   11a9c:	2800      	cmp	r0, #0
   11a9e:	d100      	bne.n	11aa2 <error_check+0x2d6>
   11aa0:	1c31      	adds	r1, r6, #0
   11aa2:	1c20      	adds	r0, r4, #0
   11aa4:	47d8      	blx	fp
	if (delta>options.errorSensitivity){
   11aa6:	4b34      	ldr	r3, [pc, #208]	; (11b78 <error_check+0x3ac>)
	delta = angMax-angMin;
   11aa8:	1c04      	adds	r4, r0, #0
	if (delta>options.errorSensitivity){
   11aaa:	691b      	ldr	r3, [r3, #16]
   11aac:	9304      	str	r3, [sp, #16]
   11aae:	1c19      	adds	r1, r3, #0
   11ab0:	47c0      	blx	r8
   11ab2:	2800      	cmp	r0, #0
   11ab4:	d00a      	beq.n	11acc <error_check+0x300>
		if(meas_inst->errCode[i]==0){
   11ab6:	232c      	movs	r3, #44	; 0x2c
   11ab8:	4652      	mov	r2, sl
   11aba:	5cd3      	ldrb	r3, [r2, r3]
   11abc:	2b00      	cmp	r3, #0
   11abe:	d100      	bne.n	11ac2 <error_check+0x2f6>
   11ac0:	e170      	b.n	11da4 <error_check+0x5d8>
   11ac2:	232d      	movs	r3, #45	; 0x2d
   11ac4:	5cd3      	ldrb	r3, [r2, r3]
   11ac6:	2b00      	cmp	r3, #0
   11ac8:	d100      	bne.n	11acc <error_check+0x300>
   11aca:	e187      	b.n	11ddc <error_check+0x610>
		if (azm_arr[i]<90){ wrapFlag = true;}
   11acc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11ace:	492b      	ldr	r1, [pc, #172]	; (11b7c <error_check+0x3b0>)
   11ad0:	1c20      	adds	r0, r4, #0
   11ad2:	2601      	movs	r6, #1
   11ad4:	47a8      	blx	r5
   11ad6:	2800      	cmp	r0, #0
   11ad8:	d100      	bne.n	11adc <error_check+0x310>
   11ada:	2600      	movs	r6, #0
   11adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ade:	4927      	ldr	r1, [pc, #156]	; (11b7c <error_check+0x3b0>)
   11ae0:	1c18      	adds	r0, r3, #0
   11ae2:	4699      	mov	r9, r3
   11ae4:	47a8      	blx	r5
   11ae6:	2701      	movs	r7, #1
   11ae8:	2800      	cmp	r0, #0
   11aea:	d100      	bne.n	11aee <error_check+0x322>
   11aec:	1c37      	adds	r7, r6, #0
   11aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11af0:	4922      	ldr	r1, [pc, #136]	; (11b7c <error_check+0x3b0>)
   11af2:	9303      	str	r3, [sp, #12]
   11af4:	1c18      	adds	r0, r3, #0
   11af6:	47a8      	blx	r5
   11af8:	2601      	movs	r6, #1
   11afa:	2800      	cmp	r0, #0
   11afc:	d100      	bne.n	11b00 <error_check+0x334>
   11afe:	1c3e      	adds	r6, r7, #0
   11b00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (wrapFlag){
   11b02:	491e      	ldr	r1, [pc, #120]	; (11b7c <error_check+0x3b0>)
   11b04:	1c38      	adds	r0, r7, #0
   11b06:	47a8      	blx	r5
   11b08:	2800      	cmp	r0, #0
   11b0a:	d000      	beq.n	11b0e <error_check+0x342>
   11b0c:	e0e3      	b.n	11cd6 <error_check+0x50a>
   11b0e:	b2f6      	uxtb	r6, r6
   11b10:	2e00      	cmp	r6, #0
   11b12:	d000      	beq.n	11b16 <error_check+0x34a>
   11b14:	e0df      	b.n	11cd6 <error_check+0x50a>
		angMin = min(angMin, azm_arr[i]);
   11b16:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11b18:	1c20      	adds	r0, r4, #0
   11b1a:	1c31      	adds	r1, r6, #0
   11b1c:	47a8      	blx	r5
   11b1e:	1c27      	adds	r7, r4, #0
   11b20:	2800      	cmp	r0, #0
   11b22:	d100      	bne.n	11b26 <error_check+0x35a>
   11b24:	1c37      	adds	r7, r6, #0
   11b26:	1c31      	adds	r1, r6, #0
   11b28:	1c20      	adds	r0, r4, #0
   11b2a:	47c0      	blx	r8
   11b2c:	2800      	cmp	r0, #0
   11b2e:	d100      	bne.n	11b32 <error_check+0x366>
   11b30:	1c34      	adds	r4, r6, #0
   11b32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11b34:	1c39      	adds	r1, r7, #0
   11b36:	1c30      	adds	r0, r6, #0
   11b38:	47c0      	blx	r8
   11b3a:	9703      	str	r7, [sp, #12]
   11b3c:	2800      	cmp	r0, #0
   11b3e:	d100      	bne.n	11b42 <error_check+0x376>
   11b40:	9603      	str	r6, [sp, #12]
   11b42:	1c21      	adds	r1, r4, #0
   11b44:	1c30      	adds	r0, r6, #0
   11b46:	47a8      	blx	r5
   11b48:	2800      	cmp	r0, #0
   11b4a:	d100      	bne.n	11b4e <error_check+0x382>
   11b4c:	1c34      	adds	r4, r6, #0
   11b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	delta = (angMax-angMin)*cos(meas_inst->inclination*DEG2RAD); //  Adjust for high angle shots
   11b50:	490b      	ldr	r1, [pc, #44]	; (11b80 <error_check+0x3b4>)
		angMin = min(angMin, azm_arr[i]);
   11b52:	4699      	mov	r9, r3
	delta = (angMax-angMin)*cos(meas_inst->inclination*DEG2RAD); //  Adjust for high angle shots
   11b54:	4653      	mov	r3, sl
   11b56:	6998      	ldr	r0, [r3, #24]
   11b58:	4b0a      	ldr	r3, [pc, #40]	; (11b84 <error_check+0x3b8>)
   11b5a:	4798      	blx	r3
   11b5c:	e014      	b.n	11b88 <error_check+0x3bc>
   11b5e:	46c0      	nop			; (mov r8, r8)
   11b60:	00011ec9 	.word	0x00011ec9
   11b64:	00026799 	.word	0x00026799
   11b68:	00025cf1 	.word	0x00025cf1
   11b6c:	00026179 	.word	0x00026179
   11b70:	000123e5 	.word	0x000123e5
   11b74:	00025cc9 	.word	0x00025cc9
   11b78:	20002d20 	.word	0x20002d20
   11b7c:	42b40000 	.word	0x42b40000
   11b80:	3c8efa35 	.word	0x3c8efa35
   11b84:	00026559 	.word	0x00026559
   11b88:	4ba0      	ldr	r3, [pc, #640]	; (11e0c <error_check+0x640>)
   11b8a:	4798      	blx	r3
   11b8c:	4ba0      	ldr	r3, [pc, #640]	; (11e10 <error_check+0x644>)
   11b8e:	4798      	blx	r3
   11b90:	0006      	movs	r6, r0
   11b92:	000f      	movs	r7, r1
   11b94:	4648      	mov	r0, r9
   11b96:	1c21      	adds	r1, r4, #0
   11b98:	47a8      	blx	r5
   11b9a:	2800      	cmp	r0, #0
   11b9c:	d100      	bne.n	11ba0 <error_check+0x3d4>
   11b9e:	464c      	mov	r4, r9
   11ba0:	9903      	ldr	r1, [sp, #12]
   11ba2:	4648      	mov	r0, r9
   11ba4:	47c0      	blx	r8
   11ba6:	9903      	ldr	r1, [sp, #12]
   11ba8:	2800      	cmp	r0, #0
   11baa:	d100      	bne.n	11bae <error_check+0x3e2>
   11bac:	4649      	mov	r1, r9
   11bae:	1c20      	adds	r0, r4, #0
   11bb0:	47d8      	blx	fp
   11bb2:	4b96      	ldr	r3, [pc, #600]	; (11e0c <error_check+0x640>)
   11bb4:	4798      	blx	r3
   11bb6:	0032      	movs	r2, r6
   11bb8:	003b      	movs	r3, r7
   11bba:	4c96      	ldr	r4, [pc, #600]	; (11e14 <error_check+0x648>)
   11bbc:	47a0      	blx	r4
   11bbe:	4b96      	ldr	r3, [pc, #600]	; (11e18 <error_check+0x64c>)
   11bc0:	4798      	blx	r3
   11bc2:	1c04      	adds	r4, r0, #0
	if (delta>options.errorSensitivity){
   11bc4:	1c01      	adds	r1, r0, #0
   11bc6:	9804      	ldr	r0, [sp, #16]
   11bc8:	47a8      	blx	r5
   11bca:	2800      	cmp	r0, #0
   11bcc:	d00a      	beq.n	11be4 <error_check+0x418>
		if(meas_inst->errCode[i]==0){
   11bce:	232c      	movs	r3, #44	; 0x2c
   11bd0:	4652      	mov	r2, sl
   11bd2:	5cd3      	ldrb	r3, [r2, r3]
   11bd4:	2b00      	cmp	r3, #0
   11bd6:	d100      	bne.n	11bda <error_check+0x40e>
   11bd8:	e102      	b.n	11de0 <error_check+0x614>
   11bda:	232d      	movs	r3, #45	; 0x2d
   11bdc:	5cd3      	ldrb	r3, [r2, r3]
   11bde:	2b00      	cmp	r3, #0
   11be0:	d100      	bne.n	11be4 <error_check+0x418>
   11be2:	e109      	b.n	11df8 <error_check+0x62c>
}
   11be4:	b013      	add	sp, #76	; 0x4c
   11be6:	bc3c      	pop	{r2, r3, r4, r5}
   11be8:	4690      	mov	r8, r2
   11bea:	4699      	mov	r9, r3
   11bec:	46a2      	mov	sl, r4
   11bee:	46ab      	mov	fp, r5
   11bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(meas_inst->errCode[i]==0){
   11bf2:	2300      	movs	r3, #0
			meas_inst->errCode[i] = errCode;
   11bf4:	4652      	mov	r2, sl
   11bf6:	2101      	movs	r1, #1
   11bf8:	18d2      	adds	r2, r2, r3
   11bfa:	322c      	adds	r2, #44	; 0x2c
   11bfc:	7011      	strb	r1, [r2, #0]
			meas_inst->measurement_error_data1[i] = data1;
			meas_inst->measurement_error_data2[i] = data2;
   11bfe:	2200      	movs	r2, #0
   11c00:	009b      	lsls	r3, r3, #2
   11c02:	4453      	add	r3, sl
			meas_inst->measurement_error_data1[i] = data1;
   11c04:	631e      	str	r6, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11c06:	639a      	str	r2, [r3, #56]	; 0x38
	delta = fabs(magA2-1);
   11c08:	21fe      	movs	r1, #254	; 0xfe
   11c0a:	1c38      	adds	r0, r7, #0
   11c0c:	0589      	lsls	r1, r1, #22
   11c0e:	47d8      	blx	fp
	if (delta>accel_err_limit)
   11c10:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magA2-1);
   11c12:	0040      	lsls	r0, r0, #1
   11c14:	0840      	lsrs	r0, r0, #1
	if (delta>accel_err_limit)
   11c16:	0589      	lsls	r1, r1, #22
   11c18:	47c0      	blx	r8
   11c1a:	2800      	cmp	r0, #0
   11c1c:	d015      	beq.n	11c4a <error_check+0x47e>
		if(meas_inst->errCode[i]==0){
   11c1e:	232c      	movs	r3, #44	; 0x2c
   11c20:	4652      	mov	r2, sl
   11c22:	5cd3      	ldrb	r3, [r2, r3]
   11c24:	2b00      	cmp	r3, #0
   11c26:	d100      	bne.n	11c2a <error_check+0x45e>
   11c28:	e0e8      	b.n	11dfc <error_check+0x630>
   11c2a:	232d      	movs	r3, #45	; 0x2d
   11c2c:	5cd3      	ldrb	r3, [r2, r3]
   11c2e:	2b00      	cmp	r3, #0
   11c30:	d000      	beq.n	11c34 <error_check+0x468>
   11c32:	e613      	b.n	1185c <error_check+0x90>
   11c34:	3301      	adds	r3, #1
			meas_inst->errCode[i] = errCode;
   11c36:	4652      	mov	r2, sl
   11c38:	2102      	movs	r1, #2
   11c3a:	18d2      	adds	r2, r2, r3
   11c3c:	322c      	adds	r2, #44	; 0x2c
   11c3e:	7011      	strb	r1, [r2, #0]
			meas_inst->measurement_error_data2[i] = data2;
   11c40:	2200      	movs	r2, #0
   11c42:	009b      	lsls	r3, r3, #2
   11c44:	4453      	add	r3, sl
			meas_inst->measurement_error_data1[i] = data1;
   11c46:	631f      	str	r7, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11c48:	639a      	str	r2, [r3, #56]	; 0x38
	delta = fabs(magM1-1);
   11c4a:	21fe      	movs	r1, #254	; 0xfe
   11c4c:	9803      	ldr	r0, [sp, #12]
   11c4e:	0589      	lsls	r1, r1, #22
   11c50:	47d8      	blx	fp
	if (delta>comp_err_limit)
   11c52:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magM1-1);
   11c54:	0040      	lsls	r0, r0, #1
   11c56:	0840      	lsrs	r0, r0, #1
	if (delta>comp_err_limit)
   11c58:	0589      	lsls	r1, r1, #22
   11c5a:	47c0      	blx	r8
   11c5c:	2800      	cmp	r0, #0
   11c5e:	d016      	beq.n	11c8e <error_check+0x4c2>
		if(meas_inst->errCode[i]==0){
   11c60:	232c      	movs	r3, #44	; 0x2c
   11c62:	4652      	mov	r2, sl
   11c64:	5cd3      	ldrb	r3, [r2, r3]
   11c66:	2b00      	cmp	r3, #0
   11c68:	d100      	bne.n	11c6c <error_check+0x4a0>
   11c6a:	e0cb      	b.n	11e04 <error_check+0x638>
   11c6c:	232d      	movs	r3, #45	; 0x2d
   11c6e:	5cd3      	ldrb	r3, [r2, r3]
   11c70:	2b00      	cmp	r3, #0
   11c72:	d000      	beq.n	11c76 <error_check+0x4aa>
   11c74:	e5fe      	b.n	11874 <error_check+0xa8>
   11c76:	3301      	adds	r3, #1
			meas_inst->errCode[i] = errCode;
   11c78:	4652      	mov	r2, sl
   11c7a:	2103      	movs	r1, #3
   11c7c:	18d2      	adds	r2, r2, r3
   11c7e:	322c      	adds	r2, #44	; 0x2c
   11c80:	7011      	strb	r1, [r2, #0]
   11c82:	009b      	lsls	r3, r3, #2
			meas_inst->measurement_error_data1[i] = data1;
   11c84:	9a03      	ldr	r2, [sp, #12]
   11c86:	4453      	add	r3, sl
   11c88:	631a      	str	r2, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11c8a:	2200      	movs	r2, #0
   11c8c:	639a      	str	r2, [r3, #56]	; 0x38
	delta = fabs(magM2-1);
   11c8e:	21fe      	movs	r1, #254	; 0xfe
   11c90:	4648      	mov	r0, r9
   11c92:	0589      	lsls	r1, r1, #22
   11c94:	47d8      	blx	fp
	if (delta>comp_err_limit)
   11c96:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magM2-1);
   11c98:	0040      	lsls	r0, r0, #1
   11c9a:	0840      	lsrs	r0, r0, #1
	if (delta>comp_err_limit)
   11c9c:	0589      	lsls	r1, r1, #22
   11c9e:	47c0      	blx	r8
   11ca0:	2800      	cmp	r0, #0
   11ca2:	d100      	bne.n	11ca6 <error_check+0x4da>
   11ca4:	e5e6      	b.n	11874 <error_check+0xa8>
		if(meas_inst->errCode[i]==0){
   11ca6:	232c      	movs	r3, #44	; 0x2c
   11ca8:	4652      	mov	r2, sl
   11caa:	5cd3      	ldrb	r3, [r2, r3]
   11cac:	2b00      	cmp	r3, #0
   11cae:	d100      	bne.n	11cb2 <error_check+0x4e6>
   11cb0:	e0a6      	b.n	11e00 <error_check+0x634>
   11cb2:	232d      	movs	r3, #45	; 0x2d
   11cb4:	5cd3      	ldrb	r3, [r2, r3]
   11cb6:	2b00      	cmp	r3, #0
   11cb8:	d000      	beq.n	11cbc <error_check+0x4f0>
   11cba:	e5db      	b.n	11874 <error_check+0xa8>
   11cbc:	3301      	adds	r3, #1
			meas_inst->errCode[i] = errCode;
   11cbe:	4652      	mov	r2, sl
   11cc0:	2104      	movs	r1, #4
   11cc2:	18d2      	adds	r2, r2, r3
   11cc4:	322c      	adds	r2, #44	; 0x2c
   11cc6:	7011      	strb	r1, [r2, #0]
			meas_inst->measurement_error_data1[i] = data1;
   11cc8:	464a      	mov	r2, r9
   11cca:	009b      	lsls	r3, r3, #2
   11ccc:	4453      	add	r3, sl
   11cce:	631a      	str	r2, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11cd0:	2200      	movs	r2, #0
   11cd2:	639a      	str	r2, [r3, #56]	; 0x38
   11cd4:	e5ce      	b.n	11874 <error_check+0xa8>
			if (azm_arr[i]>270){ azm_arr[i]= azm_arr[i]-360;}
   11cd6:	4951      	ldr	r1, [pc, #324]	; (11e1c <error_check+0x650>)
   11cd8:	1c20      	adds	r0, r4, #0
   11cda:	47c0      	blx	r8
   11cdc:	2800      	cmp	r0, #0
   11cde:	d003      	beq.n	11ce8 <error_check+0x51c>
   11ce0:	1c20      	adds	r0, r4, #0
   11ce2:	494f      	ldr	r1, [pc, #316]	; (11e20 <error_check+0x654>)
   11ce4:	47d8      	blx	fp
   11ce6:	1c04      	adds	r4, r0, #0
   11ce8:	494c      	ldr	r1, [pc, #304]	; (11e1c <error_check+0x650>)
   11cea:	4648      	mov	r0, r9
   11cec:	47c0      	blx	r8
   11cee:	2800      	cmp	r0, #0
   11cf0:	d003      	beq.n	11cfa <error_check+0x52e>
   11cf2:	494b      	ldr	r1, [pc, #300]	; (11e20 <error_check+0x654>)
   11cf4:	4648      	mov	r0, r9
   11cf6:	47d8      	blx	fp
   11cf8:	900b      	str	r0, [sp, #44]	; 0x2c
   11cfa:	9e03      	ldr	r6, [sp, #12]
   11cfc:	4947      	ldr	r1, [pc, #284]	; (11e1c <error_check+0x650>)
   11cfe:	1c30      	adds	r0, r6, #0
   11d00:	47c0      	blx	r8
   11d02:	2800      	cmp	r0, #0
   11d04:	d003      	beq.n	11d0e <error_check+0x542>
   11d06:	4946      	ldr	r1, [pc, #280]	; (11e20 <error_check+0x654>)
   11d08:	1c30      	adds	r0, r6, #0
   11d0a:	47d8      	blx	fp
   11d0c:	900c      	str	r0, [sp, #48]	; 0x30
   11d0e:	4943      	ldr	r1, [pc, #268]	; (11e1c <error_check+0x650>)
   11d10:	1c38      	adds	r0, r7, #0
   11d12:	47c0      	blx	r8
   11d14:	2800      	cmp	r0, #0
   11d16:	d100      	bne.n	11d1a <error_check+0x54e>
   11d18:	e6fd      	b.n	11b16 <error_check+0x34a>
   11d1a:	4941      	ldr	r1, [pc, #260]	; (11e20 <error_check+0x654>)
   11d1c:	1c38      	adds	r0, r7, #0
   11d1e:	47d8      	blx	fp
   11d20:	900d      	str	r0, [sp, #52]	; 0x34
   11d22:	e6f8      	b.n	11b16 <error_check+0x34a>
		if(meas_inst->errCode[i]==0){
   11d24:	2301      	movs	r3, #1
			meas_inst->errCode[i] = errCode;
   11d26:	4652      	mov	r2, sl
   11d28:	2106      	movs	r1, #6
   11d2a:	18d2      	adds	r2, r2, r3
   11d2c:	322c      	adds	r2, #44	; 0x2c
   11d2e:	7011      	strb	r1, [r2, #0]
			meas_inst->measurement_error_data2[i] = data2;
   11d30:	22fe      	movs	r2, #254	; 0xfe
   11d32:	009b      	lsls	r3, r3, #2
   11d34:	4453      	add	r3, sl
   11d36:	0592      	lsls	r2, r2, #22
			meas_inst->measurement_error_data1[i] = data1;
   11d38:	631d      	str	r5, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11d3a:	639a      	str	r2, [r3, #56]	; 0x38
   11d3c:	e620      	b.n	11980 <error_check+0x1b4>
		if(meas_inst->errCode[i]==0){
   11d3e:	2301      	movs	r3, #1
			meas_inst->errCode[i] = errCode;
   11d40:	4652      	mov	r2, sl
   11d42:	2105      	movs	r1, #5
   11d44:	18d2      	adds	r2, r2, r3
   11d46:	322c      	adds	r2, #44	; 0x2c
   11d48:	7011      	strb	r1, [r2, #0]
			meas_inst->measurement_error_data2[i] = data2;
   11d4a:	2280      	movs	r2, #128	; 0x80
   11d4c:	009b      	lsls	r3, r3, #2
   11d4e:	4453      	add	r3, sl
   11d50:	05d2      	lsls	r2, r2, #23
			meas_inst->measurement_error_data1[i] = data1;
   11d52:	631d      	str	r5, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11d54:	639a      	str	r2, [r3, #56]	; 0x38
   11d56:	e5d0      	b.n	118fa <error_check+0x12e>
		if(meas_inst->errCode[i]==0){
   11d58:	2301      	movs	r3, #1
			meas_inst->errCode[i] = errCode;
   11d5a:	4652      	mov	r2, sl
   11d5c:	2105      	movs	r1, #5
   11d5e:	18d2      	adds	r2, r2, r3
   11d60:	322c      	adds	r2, #44	; 0x2c
   11d62:	7011      	strb	r1, [r2, #0]
			meas_inst->measurement_error_data2[i] = data2;
   11d64:	22fe      	movs	r2, #254	; 0xfe
   11d66:	009b      	lsls	r3, r3, #2
   11d68:	4453      	add	r3, sl
   11d6a:	0592      	lsls	r2, r2, #22
			meas_inst->measurement_error_data1[i] = data1;
   11d6c:	631d      	str	r5, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11d6e:	639a      	str	r2, [r3, #56]	; 0x38
   11d70:	e5a2      	b.n	118b8 <error_check+0xec>
		if(meas_inst->errCode[i]==0){
   11d72:	2301      	movs	r3, #1
			meas_inst->errCode[i] = errCode;
   11d74:	4652      	mov	r2, sl
   11d76:	2106      	movs	r1, #6
   11d78:	18d2      	adds	r2, r2, r3
   11d7a:	322c      	adds	r2, #44	; 0x2c
   11d7c:	7011      	strb	r1, [r2, #0]
			meas_inst->measurement_error_data2[i] = data2;
   11d7e:	2280      	movs	r2, #128	; 0x80
   11d80:	009b      	lsls	r3, r3, #2
   11d82:	4453      	add	r3, sl
   11d84:	05d2      	lsls	r2, r2, #23
			meas_inst->measurement_error_data1[i] = data1;
   11d86:	631d      	str	r5, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11d88:	639a      	str	r2, [r3, #56]	; 0x38
   11d8a:	e61b      	b.n	119c4 <error_check+0x1f8>
		if(meas_inst->errCode[i]==0){
   11d8c:	2300      	movs	r3, #0
			meas_inst->errCode[i] = errCode;
   11d8e:	4652      	mov	r2, sl
   11d90:	2106      	movs	r1, #6
   11d92:	18d2      	adds	r2, r2, r3
   11d94:	322c      	adds	r2, #44	; 0x2c
   11d96:	7011      	strb	r1, [r2, #0]
   11d98:	009b      	lsls	r3, r3, #2
			meas_inst->measurement_error_data2[i] = data2;
   11d9a:	4a22      	ldr	r2, [pc, #136]	; (11e24 <error_check+0x658>)
   11d9c:	4453      	add	r3, sl
			meas_inst->measurement_error_data1[i] = data1;
   11d9e:	631c      	str	r4, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11da0:	639a      	str	r2, [r3, #56]	; 0x38
   11da2:	e630      	b.n	11a06 <error_check+0x23a>
		if(meas_inst->errCode[i]==0){
   11da4:	2300      	movs	r3, #0
			meas_inst->errCode[i] = errCode;
   11da6:	4652      	mov	r2, sl
   11da8:	210e      	movs	r1, #14
   11daa:	18d2      	adds	r2, r2, r3
   11dac:	322c      	adds	r2, #44	; 0x2c
   11dae:	7011      	strb	r1, [r2, #0]
			meas_inst->measurement_error_data2[i] = data2;
   11db0:	2200      	movs	r2, #0
   11db2:	009b      	lsls	r3, r3, #2
   11db4:	4453      	add	r3, sl
			meas_inst->measurement_error_data1[i] = data1;
   11db6:	631c      	str	r4, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11db8:	639a      	str	r2, [r3, #56]	; 0x38
   11dba:	e687      	b.n	11acc <error_check+0x300>
		if(meas_inst->errCode[i]==0){
   11dbc:	2300      	movs	r3, #0
			meas_inst->errCode[i] = errCode;
   11dbe:	4652      	mov	r2, sl
   11dc0:	2105      	movs	r1, #5
   11dc2:	18d2      	adds	r2, r2, r3
   11dc4:	322c      	adds	r2, #44	; 0x2c
   11dc6:	7011      	strb	r1, [r2, #0]
   11dc8:	009b      	lsls	r3, r3, #2
			meas_inst->measurement_error_data2[i] = data2;
   11dca:	4a16      	ldr	r2, [pc, #88]	; (11e24 <error_check+0x658>)
   11dcc:	4453      	add	r3, sl
			meas_inst->measurement_error_data1[i] = data1;
   11dce:	631d      	str	r5, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11dd0:	639a      	str	r2, [r3, #56]	; 0x38
   11dd2:	e5b3      	b.n	1193c <error_check+0x170>
		if(meas_inst->errCode[i]==0){
   11dd4:	3301      	adds	r3, #1
   11dd6:	e7f2      	b.n	11dbe <error_check+0x5f2>
   11dd8:	3301      	adds	r3, #1
   11dda:	e7d8      	b.n	11d8e <error_check+0x5c2>
   11ddc:	3301      	adds	r3, #1
   11dde:	e7e2      	b.n	11da6 <error_check+0x5da>
   11de0:	2300      	movs	r3, #0
			meas_inst->errCode[i] = errCode;
   11de2:	4652      	mov	r2, sl
   11de4:	210f      	movs	r1, #15
   11de6:	18d2      	adds	r2, r2, r3
   11de8:	322c      	adds	r2, #44	; 0x2c
   11dea:	7011      	strb	r1, [r2, #0]
			meas_inst->measurement_error_data2[i] = data2;
   11dec:	2200      	movs	r2, #0
   11dee:	009b      	lsls	r3, r3, #2
   11df0:	4453      	add	r3, sl
			meas_inst->measurement_error_data1[i] = data1;
   11df2:	631c      	str	r4, [r3, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11df4:	639a      	str	r2, [r3, #56]	; 0x38
}
   11df6:	e6f5      	b.n	11be4 <error_check+0x418>
		if(meas_inst->errCode[i]==0){
   11df8:	3301      	adds	r3, #1
   11dfa:	e7f2      	b.n	11de2 <error_check+0x616>
   11dfc:	2300      	movs	r3, #0
   11dfe:	e71a      	b.n	11c36 <error_check+0x46a>
   11e00:	2300      	movs	r3, #0
   11e02:	e75c      	b.n	11cbe <error_check+0x4f2>
   11e04:	2300      	movs	r3, #0
   11e06:	e737      	b.n	11c78 <error_check+0x4ac>
   11e08:	3301      	adds	r3, #1
   11e0a:	e6f3      	b.n	11bf4 <error_check+0x428>
   11e0c:	0002878d 	.word	0x0002878d
   11e10:	00022ee9 	.word	0x00022ee9
   11e14:	00027ac5 	.word	0x00027ac5
   11e18:	00028831 	.word	0x00028831
   11e1c:	43870000 	.word	0x43870000
   11e20:	43b40000 	.word	0x43b40000
   11e24:	40400000 	.word	0x40400000

00011e28 <increment_error_count>:
{
   11e28:	b530      	push	{r4, r5, lr}
   11e2a:	0004      	movs	r4, r0
		if(meas_inst->errCode[i]==0){
   11e2c:	202c      	movs	r0, #44	; 0x2c
   11e2e:	5c20      	ldrb	r0, [r4, r0]
   11e30:	2800      	cmp	r0, #0
   11e32:	d005      	beq.n	11e40 <increment_error_count+0x18>
   11e34:	202d      	movs	r0, #45	; 0x2d
   11e36:	5c25      	ldrb	r5, [r4, r0]
	bool error_incremented = false;
   11e38:	2000      	movs	r0, #0
		if(meas_inst->errCode[i]==0){
   11e3a:	2d00      	cmp	r5, #0
   11e3c:	d00a      	beq.n	11e54 <increment_error_count+0x2c>
			break;
		}
	}
	
	return error_incremented;
}
   11e3e:	bd30      	pop	{r4, r5, pc}
		if(meas_inst->errCode[i]==0){
   11e40:	2000      	movs	r0, #0
			meas_inst->errCode[i] = errCode;
   11e42:	1825      	adds	r5, r4, r0
   11e44:	0080      	lsls	r0, r0, #2
   11e46:	1824      	adds	r4, r4, r0
   11e48:	352c      	adds	r5, #44	; 0x2c
   11e4a:	7029      	strb	r1, [r5, #0]
			error_incremented = true;
   11e4c:	2001      	movs	r0, #1
			meas_inst->measurement_error_data1[i] = data1;
   11e4e:	6322      	str	r2, [r4, #48]	; 0x30
			meas_inst->measurement_error_data2[i] = data2;
   11e50:	63a3      	str	r3, [r4, #56]	; 0x38
			break;
   11e52:	e7f4      	b.n	11e3e <increment_error_count+0x16>
		if(meas_inst->errCode[i]==0){
   11e54:	3001      	adds	r0, #1
   11e56:	e7f4      	b.n	11e42 <increment_error_count+0x1a>

00011e58 <adjustErrorSensitivity>:



void adjustErrorSensitivity(void){
   11e58:	b570      	push	{r4, r5, r6, lr}
	options.errorSensitivity = options.errorSensitivity+STEP_ERROR_SENSITIVITY;
   11e5a:	4c0a      	ldr	r4, [pc, #40]	; (11e84 <adjustErrorSensitivity+0x2c>)
   11e5c:	4b0a      	ldr	r3, [pc, #40]	; (11e88 <adjustErrorSensitivity+0x30>)
   11e5e:	6920      	ldr	r0, [r4, #16]
   11e60:	4798      	blx	r3
   11e62:	4a0a      	ldr	r2, [pc, #40]	; (11e8c <adjustErrorSensitivity+0x34>)
   11e64:	4b0a      	ldr	r3, [pc, #40]	; (11e90 <adjustErrorSensitivity+0x38>)
   11e66:	4d0b      	ldr	r5, [pc, #44]	; (11e94 <adjustErrorSensitivity+0x3c>)
   11e68:	47a8      	blx	r5
   11e6a:	4b0b      	ldr	r3, [pc, #44]	; (11e98 <adjustErrorSensitivity+0x40>)
   11e6c:	4798      	blx	r3
	
	if (options.errorSensitivity>MAX_ERROR_SENSITIVITY){
   11e6e:	490b      	ldr	r1, [pc, #44]	; (11e9c <adjustErrorSensitivity+0x44>)
   11e70:	4b0b      	ldr	r3, [pc, #44]	; (11ea0 <adjustErrorSensitivity+0x48>)
	options.errorSensitivity = options.errorSensitivity+STEP_ERROR_SENSITIVITY;
   11e72:	1c05      	adds	r5, r0, #0
	if (options.errorSensitivity>MAX_ERROR_SENSITIVITY){
   11e74:	4798      	blx	r3
   11e76:	2800      	cmp	r0, #0
   11e78:	d002      	beq.n	11e80 <adjustErrorSensitivity+0x28>
		options.errorSensitivity = STEP_ERROR_SENSITIVITY;
   11e7a:	4b0a      	ldr	r3, [pc, #40]	; (11ea4 <adjustErrorSensitivity+0x4c>)
   11e7c:	6123      	str	r3, [r4, #16]
		
	}
	
}
   11e7e:	bd70      	pop	{r4, r5, r6, pc}
	options.errorSensitivity = options.errorSensitivity+STEP_ERROR_SENSITIVITY;
   11e80:	6125      	str	r5, [r4, #16]
   11e82:	e7fc      	b.n	11e7e <adjustErrorSensitivity+0x26>
   11e84:	20002d20 	.word	0x20002d20
   11e88:	0002878d 	.word	0x0002878d
   11e8c:	9999999a 	.word	0x9999999a
   11e90:	3fc99999 	.word	0x3fc99999
   11e94:	00026c3d 	.word	0x00026c3d
   11e98:	00028831 	.word	0x00028831
   11e9c:	40400000 	.word	0x40400000
   11ea0:	00025cf1 	.word	0x00025cf1
   11ea4:	3e4ccccd 	.word	0x3e4ccccd

00011ea8 <circBuffInc>:
 */ 

#include <mathBRIC.h>

void circBuffInc(uint32_t *index, uint32_t size){
	*index = *index+1;
   11ea8:	6803      	ldr	r3, [r0, #0]
   11eaa:	3301      	adds	r3, #1
	if(*index>=size){
		*index = 0;
   11eac:	428b      	cmp	r3, r1
   11eae:	4189      	sbcs	r1, r1
   11eb0:	400b      	ands	r3, r1
   11eb2:	6003      	str	r3, [r0, #0]
	}
}
   11eb4:	4770      	bx	lr
   11eb6:	46c0      	nop			; (mov r8, r8)

00011eb8 <circBuffDec>:
void circBuffDec(uint32_t *index, uint32_t size){
	if(*index==0){
   11eb8:	6803      	ldr	r3, [r0, #0]
		*index = size-1;
		}else{
		*index = *index-1;
   11eba:	1e5a      	subs	r2, r3, #1
	if(*index==0){
   11ebc:	2b00      	cmp	r3, #0
   11ebe:	d100      	bne.n	11ec2 <circBuffDec+0xa>
		*index = size-1;
   11ec0:	1e4a      	subs	r2, r1, #1
   11ec2:	6002      	str	r2, [r0, #0]
	}

}
   11ec4:	4770      	bx	lr
   11ec6:	46c0      	nop			; (mov r8, r8)

00011ec8 <calc_magnitude>:
	*dipP = RAD2DEG*atan2(crotXYZ[2], crxy);
	
	
}

float calc_magnitude(float xyz[3]){
   11ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11eca:	46ce      	mov	lr, r9
   11ecc:	4647      	mov	r7, r8
   11ece:	4681      	mov	r9, r0
   11ed0:	b580      	push	{r7, lr}
	float magnitude;
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
   11ed2:	4b1d      	ldr	r3, [pc, #116]	; (11f48 <calc_magnitude+0x80>)
float calc_magnitude(float xyz[3]){
   11ed4:	b083      	sub	sp, #12
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
   11ed6:	4698      	mov	r8, r3
   11ed8:	6800      	ldr	r0, [r0, #0]
   11eda:	47c0      	blx	r8
   11edc:	464b      	mov	r3, r9
   11ede:	0004      	movs	r4, r0
   11ee0:	6858      	ldr	r0, [r3, #4]
   11ee2:	000d      	movs	r5, r1
   11ee4:	47c0      	blx	r8
   11ee6:	464b      	mov	r3, r9
   11ee8:	0006      	movs	r6, r0
   11eea:	6898      	ldr	r0, [r3, #8]
   11eec:	000f      	movs	r7, r1
   11eee:	47c0      	blx	r8
   11ef0:	4b16      	ldr	r3, [pc, #88]	; (11f4c <calc_magnitude+0x84>)
   11ef2:	9000      	str	r0, [sp, #0]
   11ef4:	9101      	str	r1, [sp, #4]
   11ef6:	4698      	mov	r8, r3
   11ef8:	0022      	movs	r2, r4
   11efa:	002b      	movs	r3, r5
   11efc:	0020      	movs	r0, r4
   11efe:	0029      	movs	r1, r5
   11f00:	47c0      	blx	r8
   11f02:	0032      	movs	r2, r6
   11f04:	0004      	movs	r4, r0
   11f06:	000d      	movs	r5, r1
   11f08:	003b      	movs	r3, r7
   11f0a:	0030      	movs	r0, r6
   11f0c:	0039      	movs	r1, r7
   11f0e:	47c0      	blx	r8
   11f10:	4e0f      	ldr	r6, [pc, #60]	; (11f50 <calc_magnitude+0x88>)
   11f12:	0002      	movs	r2, r0
   11f14:	000b      	movs	r3, r1
   11f16:	0020      	movs	r0, r4
   11f18:	0029      	movs	r1, r5
   11f1a:	47b0      	blx	r6
   11f1c:	0004      	movs	r4, r0
   11f1e:	000d      	movs	r5, r1
   11f20:	9800      	ldr	r0, [sp, #0]
   11f22:	9901      	ldr	r1, [sp, #4]
   11f24:	0002      	movs	r2, r0
   11f26:	000b      	movs	r3, r1
   11f28:	47c0      	blx	r8
   11f2a:	0002      	movs	r2, r0
   11f2c:	000b      	movs	r3, r1
   11f2e:	0020      	movs	r0, r4
   11f30:	0029      	movs	r1, r5
   11f32:	47b0      	blx	r6
   11f34:	4b07      	ldr	r3, [pc, #28]	; (11f54 <calc_magnitude+0x8c>)
   11f36:	4798      	blx	r3
   11f38:	4b07      	ldr	r3, [pc, #28]	; (11f58 <calc_magnitude+0x90>)
   11f3a:	4798      	blx	r3
	return magnitude;
}
   11f3c:	b003      	add	sp, #12
   11f3e:	bc0c      	pop	{r2, r3}
   11f40:	4690      	mov	r8, r2
   11f42:	4699      	mov	r9, r3
   11f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f46:	46c0      	nop			; (mov r8, r8)
   11f48:	0002878d 	.word	0x0002878d
   11f4c:	00027ac5 	.word	0x00027ac5
   11f50:	00026c3d 	.word	0x00026c3d
   11f54:	00023365 	.word	0x00023365
   11f58:	00028831 	.word	0x00028831

00011f5c <calc_mag_stdev>:

float calc_mag_stdev(float XYZ[NBUFF][3]){
   11f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f5e:	46de      	mov	lr, fp
   11f60:	4657      	mov	r7, sl
   11f62:	464e      	mov	r6, r9
   11f64:	4645      	mov	r5, r8
   11f66:	b5e0      	push	{r5, r6, r7, lr}
	float err_mag[NBUFF];
	uint32_t p;
	float temp1;
	
	for (p=0;p<nPoints;p++){
   11f68:	4b61      	ldr	r3, [pc, #388]	; (120f0 <calc_mag_stdev+0x194>)
float calc_mag_stdev(float XYZ[NBUFF][3]){
   11f6a:	b0eb      	sub	sp, #428	; 0x1ac
	for (p=0;p<nPoints;p++){
   11f6c:	681b      	ldr	r3, [r3, #0]
   11f6e:	9300      	str	r3, [sp, #0]
   11f70:	2b00      	cmp	r3, #0
   11f72:	d100      	bne.n	11f76 <calc_mag_stdev+0x1a>
   11f74:	e0b0      	b.n	120d8 <calc_mag_stdev+0x17c>
   11f76:	2300      	movs	r3, #0
   11f78:	4680      	mov	r8, r0
   11f7a:	4699      	mov	r9, r3
   11f7c:	4b5d      	ldr	r3, [pc, #372]	; (120f4 <calc_mag_stdev+0x198>)
   11f7e:	469a      	mov	sl, r3
   11f80:	4b5d      	ldr	r3, [pc, #372]	; (120f8 <calc_mag_stdev+0x19c>)
   11f82:	469b      	mov	fp, r3
   11f84:	4b5d      	ldr	r3, [pc, #372]	; (120fc <calc_mag_stdev+0x1a0>)
   11f86:	9302      	str	r3, [sp, #8]
   11f88:	4b5d      	ldr	r3, [pc, #372]	; (12100 <calc_mag_stdev+0x1a4>)
   11f8a:	9303      	str	r3, [sp, #12]
		temp1 = sqrt(pow(XYZ[p][0],2)+pow(XYZ[p][1],2)+pow(XYZ[p][2],2));
   11f8c:	4643      	mov	r3, r8
   11f8e:	6818      	ldr	r0, [r3, #0]
   11f90:	47d0      	blx	sl
   11f92:	4643      	mov	r3, r8
   11f94:	0004      	movs	r4, r0
   11f96:	6858      	ldr	r0, [r3, #4]
   11f98:	000d      	movs	r5, r1
   11f9a:	47d0      	blx	sl
   11f9c:	4643      	mov	r3, r8
   11f9e:	0006      	movs	r6, r0
   11fa0:	6898      	ldr	r0, [r3, #8]
   11fa2:	000f      	movs	r7, r1
   11fa4:	47d0      	blx	sl
   11fa6:	0022      	movs	r2, r4
   11fa8:	9000      	str	r0, [sp, #0]
   11faa:	9101      	str	r1, [sp, #4]
   11fac:	002b      	movs	r3, r5
   11fae:	0020      	movs	r0, r4
   11fb0:	0029      	movs	r1, r5
   11fb2:	47d8      	blx	fp
   11fb4:	0032      	movs	r2, r6
   11fb6:	0004      	movs	r4, r0
   11fb8:	000d      	movs	r5, r1
   11fba:	003b      	movs	r3, r7
   11fbc:	0030      	movs	r0, r6
   11fbe:	0039      	movs	r1, r7
   11fc0:	47d8      	blx	fp
   11fc2:	0002      	movs	r2, r0
   11fc4:	000b      	movs	r3, r1
   11fc6:	0020      	movs	r0, r4
   11fc8:	0029      	movs	r1, r5
   11fca:	4c4e      	ldr	r4, [pc, #312]	; (12104 <calc_mag_stdev+0x1a8>)
   11fcc:	47a0      	blx	r4
   11fce:	0004      	movs	r4, r0
   11fd0:	000d      	movs	r5, r1
   11fd2:	9800      	ldr	r0, [sp, #0]
   11fd4:	9901      	ldr	r1, [sp, #4]
   11fd6:	0002      	movs	r2, r0
   11fd8:	000b      	movs	r3, r1
   11fda:	47d8      	blx	fp
   11fdc:	0002      	movs	r2, r0
   11fde:	000b      	movs	r3, r1
   11fe0:	0020      	movs	r0, r4
   11fe2:	0029      	movs	r1, r5
   11fe4:	4c47      	ldr	r4, [pc, #284]	; (12104 <calc_mag_stdev+0x1a8>)
   11fe6:	47a0      	blx	r4
   11fe8:	9b02      	ldr	r3, [sp, #8]
   11fea:	4798      	blx	r3
		err_mag[p] = temp1-1;
   11fec:	464b      	mov	r3, r9
   11fee:	009c      	lsls	r4, r3, #2
		temp1 = sqrt(pow(XYZ[p][0],2)+pow(XYZ[p][1],2)+pow(XYZ[p][2],2));
   11ff0:	9b03      	ldr	r3, [sp, #12]
   11ff2:	4798      	blx	r3
		err_mag[p] = temp1-1;
   11ff4:	21fe      	movs	r1, #254	; 0xfe
   11ff6:	4b44      	ldr	r3, [pc, #272]	; (12108 <calc_mag_stdev+0x1ac>)
   11ff8:	0589      	lsls	r1, r1, #22
   11ffa:	4798      	blx	r3
   11ffc:	ab06      	add	r3, sp, #24
   11ffe:	5118      	str	r0, [r3, r4]
	for (p=0;p<nPoints;p++){
   12000:	2301      	movs	r3, #1
   12002:	469c      	mov	ip, r3
   12004:	4b3a      	ldr	r3, [pc, #232]	; (120f0 <calc_mag_stdev+0x194>)
   12006:	44e1      	add	r9, ip
   12008:	681c      	ldr	r4, [r3, #0]
   1200a:	230c      	movs	r3, #12
   1200c:	469c      	mov	ip, r3
   1200e:	44e0      	add	r8, ip
   12010:	454c      	cmp	r4, r9
   12012:	d8bb      	bhi.n	11f8c <calc_mag_stdev+0x30>
	uint8_t i;
	float mean;
	
	
	mean = 0;
	for (i=0;i<n_meas;i++){
   12014:	2c00      	cmp	r4, #0
   12016:	d056      	beq.n	120c6 <calc_mag_stdev+0x16a>
   12018:	2600      	movs	r6, #0
   1201a:	2500      	movs	r5, #0
   1201c:	2300      	movs	r3, #0
   1201e:	4f3b      	ldr	r7, [pc, #236]	; (1210c <calc_mag_stdev+0x1b0>)
   12020:	1c30      	adds	r0, r6, #0
		mean = mean+data[i];
   12022:	aa6a      	add	r2, sp, #424	; 0x1a8
   12024:	4694      	mov	ip, r2
   12026:	009b      	lsls	r3, r3, #2
   12028:	4463      	add	r3, ip
   1202a:	3b91      	subs	r3, #145	; 0x91
   1202c:	3bff      	subs	r3, #255	; 0xff
	for (i=0;i<n_meas;i++){
   1202e:	3501      	adds	r5, #1
		mean = mean+data[i];
   12030:	6819      	ldr	r1, [r3, #0]
	for (i=0;i<n_meas;i++){
   12032:	b2ed      	uxtb	r5, r5
		mean = mean+data[i];
   12034:	47b8      	blx	r7
	for (i=0;i<n_meas;i++){
   12036:	002b      	movs	r3, r5
   12038:	42ac      	cmp	r4, r5
   1203a:	d8f2      	bhi.n	12022 <calc_mag_stdev+0xc6>
   1203c:	1c06      	adds	r6, r0, #0
   1203e:	4b34      	ldr	r3, [pc, #208]	; (12110 <calc_mag_stdev+0x1b4>)
   12040:	1e60      	subs	r0, r4, #1
   12042:	4798      	blx	r3
	}
	mean = mean/n_meas;
   12044:	4b33      	ldr	r3, [pc, #204]	; (12114 <calc_mag_stdev+0x1b8>)
   12046:	9004      	str	r0, [sp, #16]
   12048:	9105      	str	r1, [sp, #20]
   1204a:	0020      	movs	r0, r4
   1204c:	4798      	blx	r3
   1204e:	4b32      	ldr	r3, [pc, #200]	; (12118 <calc_mag_stdev+0x1bc>)
   12050:	1c01      	adds	r1, r0, #0
   12052:	1c30      	adds	r0, r6, #0
   12054:	4798      	blx	r3
	mean = meanArr(data, n_meas);
   12056:	47d0      	blx	sl
   12058:	2500      	movs	r5, #0
   1205a:	4a30      	ldr	r2, [pc, #192]	; (1211c <calc_mag_stdev+0x1c0>)
   1205c:	2600      	movs	r6, #0
   1205e:	2700      	movs	r7, #0
   12060:	2300      	movs	r3, #0
   12062:	4690      	mov	r8, r2
   12064:	9000      	str	r0, [sp, #0]
   12066:	9101      	str	r1, [sp, #4]
   12068:	46a1      	mov	r9, r4
   1206a:	002c      	movs	r4, r5
   1206c:	4d25      	ldr	r5, [pc, #148]	; (12104 <calc_mag_stdev+0x1a8>)
		sumsq = sumsq+pow((data[i]-mean),2);
   1206e:	aa6a      	add	r2, sp, #424	; 0x1a8
   12070:	4694      	mov	ip, r2
   12072:	009b      	lsls	r3, r3, #2
   12074:	4463      	add	r3, ip
   12076:	3b91      	subs	r3, #145	; 0x91
   12078:	3bff      	subs	r3, #255	; 0xff
   1207a:	6818      	ldr	r0, [r3, #0]
   1207c:	47d0      	blx	sl
   1207e:	9a00      	ldr	r2, [sp, #0]
   12080:	9b01      	ldr	r3, [sp, #4]
   12082:	47c0      	blx	r8
   12084:	0002      	movs	r2, r0
   12086:	000b      	movs	r3, r1
   12088:	47d8      	blx	fp
   1208a:	0002      	movs	r2, r0
   1208c:	000b      	movs	r3, r1
   1208e:	0030      	movs	r0, r6
   12090:	0039      	movs	r1, r7
   12092:	47a8      	blx	r5
	for (i=0;i<n_meas;i++){
   12094:	464a      	mov	r2, r9
   12096:	3401      	adds	r4, #1
   12098:	b2e4      	uxtb	r4, r4
		sumsq = sumsq+pow((data[i]-mean),2);
   1209a:	0006      	movs	r6, r0
   1209c:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
   1209e:	0023      	movs	r3, r4
   120a0:	42a2      	cmp	r2, r4
   120a2:	d8e4      	bhi.n	1206e <calc_mag_stdev+0x112>
   120a4:	9a04      	ldr	r2, [sp, #16]
   120a6:	9b05      	ldr	r3, [sp, #20]
	sumsq = sumsq/(n_meas-1);
   120a8:	4c1d      	ldr	r4, [pc, #116]	; (12120 <calc_mag_stdev+0x1c4>)
   120aa:	0030      	movs	r0, r6
   120ac:	0039      	movs	r1, r7
   120ae:	47a0      	blx	r4
	sumsq = sqrt(sumsq);
   120b0:	9b02      	ldr	r3, [sp, #8]
   120b2:	4798      	blx	r3
	return sumsq;
   120b4:	9b03      	ldr	r3, [sp, #12]
   120b6:	4798      	blx	r3
}
   120b8:	b06b      	add	sp, #428	; 0x1ac
   120ba:	bc3c      	pop	{r2, r3, r4, r5}
   120bc:	4690      	mov	r8, r2
   120be:	4699      	mov	r9, r3
   120c0:	46a2      	mov	sl, r4
   120c2:	46ab      	mov	fp, r5
   120c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120c6:	4b17      	ldr	r3, [pc, #92]	; (12124 <calc_mag_stdev+0x1c8>)
   120c8:	4c17      	ldr	r4, [pc, #92]	; (12128 <calc_mag_stdev+0x1cc>)
   120ca:	001a      	movs	r2, r3
   120cc:	9304      	str	r3, [sp, #16]
   120ce:	9405      	str	r4, [sp, #20]
	sumsq = 0;
   120d0:	2600      	movs	r6, #0
   120d2:	2700      	movs	r7, #0
   120d4:	0023      	movs	r3, r4
   120d6:	e7e7      	b.n	120a8 <calc_mag_stdev+0x14c>
	for (p=0;p<nPoints;p++){
   120d8:	4b12      	ldr	r3, [pc, #72]	; (12124 <calc_mag_stdev+0x1c8>)
   120da:	4c13      	ldr	r4, [pc, #76]	; (12128 <calc_mag_stdev+0x1cc>)
	sumsq = 0;
   120dc:	2600      	movs	r6, #0
	for (p=0;p<nPoints;p++){
   120de:	9304      	str	r3, [sp, #16]
   120e0:	9405      	str	r4, [sp, #20]
   120e2:	4b06      	ldr	r3, [pc, #24]	; (120fc <calc_mag_stdev+0x1a0>)
	sumsq = 0;
   120e4:	2700      	movs	r7, #0
   120e6:	9302      	str	r3, [sp, #8]
   120e8:	4b05      	ldr	r3, [pc, #20]	; (12100 <calc_mag_stdev+0x1a4>)
   120ea:	9303      	str	r3, [sp, #12]
   120ec:	e7da      	b.n	120a4 <calc_mag_stdev+0x148>
   120ee:	46c0      	nop			; (mov r8, r8)
   120f0:	20002d38 	.word	0x20002d38
   120f4:	0002878d 	.word	0x0002878d
   120f8:	00027ac5 	.word	0x00027ac5
   120fc:	00023365 	.word	0x00023365
   12100:	00028831 	.word	0x00028831
   12104:	00026c3d 	.word	0x00026c3d
   12108:	00026799 	.word	0x00026799
   1210c:	00025e55 	.word	0x00025e55
   12110:	0002871d 	.word	0x0002871d
   12114:	00026bb1 	.word	0x00026bb1
   12118:	00026179 	.word	0x00026179
   1211c:	00027fc5 	.word	0x00027fc5
   12120:	0002725d 	.word	0x0002725d
   12124:	ffe00000 	.word	0xffe00000
   12128:	41efffff 	.word	0x41efffff

0001212c <calc_disp_stdev>:
float calc_disp_stdev(float XYZ1[NBUFF][3], float XYZ2[NBUFF][3], uint8_t axis){
   1212c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1212e:	4657      	mov	r7, sl
   12130:	46de      	mov	lr, fp
   12132:	464e      	mov	r6, r9
   12134:	4645      	mov	r5, r8
   12136:	b5e0      	push	{r5, r6, r7, lr}
	for (p=0;p<nPoints;p++){
   12138:	4b40      	ldr	r3, [pc, #256]	; (1223c <calc_disp_stdev+0x110>)
float calc_disp_stdev(float XYZ1[NBUFF][3], float XYZ2[NBUFF][3], uint8_t axis){
   1213a:	b0e9      	sub	sp, #420	; 0x1a4
	for (p=0;p<nPoints;p++){
   1213c:	681b      	ldr	r3, [r3, #0]
   1213e:	469a      	mov	sl, r3
   12140:	2b00      	cmp	r3, #0
   12142:	d100      	bne.n	12146 <calc_disp_stdev+0x1a>
   12144:	e070      	b.n	12228 <calc_disp_stdev+0xfc>
   12146:	005f      	lsls	r7, r3, #1
   12148:	4457      	add	r7, sl
   1214a:	00bf      	lsls	r7, r7, #2
   1214c:	4688      	mov	r8, r1
   1214e:	003b      	movs	r3, r7
   12150:	0092      	lsls	r2, r2, #2
   12152:	4490      	add	r8, r2
   12154:	4681      	mov	r9, r0
   12156:	4647      	mov	r7, r8
   12158:	2400      	movs	r4, #0
   1215a:	4698      	mov	r8, r3
   1215c:	4d38      	ldr	r5, [pc, #224]	; (12240 <calc_disp_stdev+0x114>)
   1215e:	ae04      	add	r6, sp, #16
   12160:	4491      	add	r9, r2
		err_disp[p] =  XYZ1[p][axis]-XYZ2[p][axis];
   12162:	464b      	mov	r3, r9
   12164:	5939      	ldr	r1, [r7, r4]
   12166:	5918      	ldr	r0, [r3, r4]
   12168:	47a8      	blx	r5
   1216a:	340c      	adds	r4, #12
   1216c:	c601      	stmia	r6!, {r0}
	for (p=0;p<nPoints;p++){
   1216e:	45a0      	cmp	r8, r4
   12170:	d1f7      	bne.n	12162 <calc_disp_stdev+0x36>
   12172:	2400      	movs	r4, #0
   12174:	2600      	movs	r6, #0
   12176:	2300      	movs	r3, #0
   12178:	4655      	mov	r5, sl
   1217a:	4f32      	ldr	r7, [pc, #200]	; (12244 <calc_disp_stdev+0x118>)
   1217c:	1c20      	adds	r0, r4, #0
		mean = mean+data[i];
   1217e:	aa68      	add	r2, sp, #416	; 0x1a0
   12180:	4694      	mov	ip, r2
   12182:	009b      	lsls	r3, r3, #2
   12184:	4463      	add	r3, ip
   12186:	3b91      	subs	r3, #145	; 0x91
   12188:	3bff      	subs	r3, #255	; 0xff
	for (i=0;i<n_meas;i++){
   1218a:	3601      	adds	r6, #1
		mean = mean+data[i];
   1218c:	6819      	ldr	r1, [r3, #0]
	for (i=0;i<n_meas;i++){
   1218e:	b2f6      	uxtb	r6, r6
		mean = mean+data[i];
   12190:	47b8      	blx	r7
	for (i=0;i<n_meas;i++){
   12192:	0033      	movs	r3, r6
   12194:	42ae      	cmp	r6, r5
   12196:	d3f2      	bcc.n	1217e <calc_disp_stdev+0x52>
   12198:	4655      	mov	r5, sl
   1219a:	1c04      	adds	r4, r0, #0
   1219c:	4b2a      	ldr	r3, [pc, #168]	; (12248 <calc_disp_stdev+0x11c>)
   1219e:	1e68      	subs	r0, r5, #1
   121a0:	4798      	blx	r3
	mean = mean/n_meas;
   121a2:	4b2a      	ldr	r3, [pc, #168]	; (1224c <calc_disp_stdev+0x120>)
   121a4:	9002      	str	r0, [sp, #8]
   121a6:	9103      	str	r1, [sp, #12]
   121a8:	4650      	mov	r0, sl
   121aa:	4798      	blx	r3
   121ac:	4b28      	ldr	r3, [pc, #160]	; (12250 <calc_disp_stdev+0x124>)
   121ae:	1c01      	adds	r1, r0, #0
   121b0:	1c20      	adds	r0, r4, #0
   121b2:	4798      	blx	r3
	mean = meanArr(data, n_meas);
   121b4:	4a27      	ldr	r2, [pc, #156]	; (12254 <calc_disp_stdev+0x128>)
   121b6:	2400      	movs	r4, #0
   121b8:	4690      	mov	r8, r2
   121ba:	4790      	blx	r2
   121bc:	4a26      	ldr	r2, [pc, #152]	; (12258 <calc_disp_stdev+0x12c>)
   121be:	2600      	movs	r6, #0
   121c0:	4693      	mov	fp, r2
   121c2:	4a26      	ldr	r2, [pc, #152]	; (1225c <calc_disp_stdev+0x130>)
   121c4:	2700      	movs	r7, #0
   121c6:	4692      	mov	sl, r2
   121c8:	4a25      	ldr	r2, [pc, #148]	; (12260 <calc_disp_stdev+0x134>)
   121ca:	2300      	movs	r3, #0
   121cc:	4691      	mov	r9, r2
   121ce:	9000      	str	r0, [sp, #0]
   121d0:	9101      	str	r1, [sp, #4]
		sumsq = sumsq+pow((data[i]-mean),2);
   121d2:	aa68      	add	r2, sp, #416	; 0x1a0
   121d4:	4694      	mov	ip, r2
   121d6:	009b      	lsls	r3, r3, #2
   121d8:	4463      	add	r3, ip
   121da:	3b91      	subs	r3, #145	; 0x91
   121dc:	3bff      	subs	r3, #255	; 0xff
   121de:	6818      	ldr	r0, [r3, #0]
   121e0:	47c0      	blx	r8
   121e2:	9a00      	ldr	r2, [sp, #0]
   121e4:	9b01      	ldr	r3, [sp, #4]
   121e6:	47d8      	blx	fp
   121e8:	0002      	movs	r2, r0
   121ea:	000b      	movs	r3, r1
   121ec:	47d0      	blx	sl
   121ee:	000b      	movs	r3, r1
   121f0:	0002      	movs	r2, r0
   121f2:	0039      	movs	r1, r7
   121f4:	0030      	movs	r0, r6
   121f6:	47c8      	blx	r9
	for (i=0;i<n_meas;i++){
   121f8:	3401      	adds	r4, #1
   121fa:	b2e4      	uxtb	r4, r4
		sumsq = sumsq+pow((data[i]-mean),2);
   121fc:	0006      	movs	r6, r0
   121fe:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
   12200:	0023      	movs	r3, r4
   12202:	42ac      	cmp	r4, r5
   12204:	d3e5      	bcc.n	121d2 <calc_disp_stdev+0xa6>
   12206:	9a02      	ldr	r2, [sp, #8]
   12208:	9b03      	ldr	r3, [sp, #12]
	sumsq = sumsq/(n_meas-1);
   1220a:	4c16      	ldr	r4, [pc, #88]	; (12264 <calc_disp_stdev+0x138>)
   1220c:	0030      	movs	r0, r6
   1220e:	0039      	movs	r1, r7
   12210:	47a0      	blx	r4
	sumsq = sqrt(sumsq);
   12212:	4b15      	ldr	r3, [pc, #84]	; (12268 <calc_disp_stdev+0x13c>)
   12214:	4798      	blx	r3
	return sumsq;
   12216:	4b15      	ldr	r3, [pc, #84]	; (1226c <calc_disp_stdev+0x140>)
   12218:	4798      	blx	r3
}
   1221a:	b069      	add	sp, #420	; 0x1a4
   1221c:	bc3c      	pop	{r2, r3, r4, r5}
   1221e:	4690      	mov	r8, r2
   12220:	4699      	mov	r9, r3
   12222:	46a2      	mov	sl, r4
   12224:	46ab      	mov	fp, r5
   12226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (p=0;p<nPoints;p++){
   12228:	4b11      	ldr	r3, [pc, #68]	; (12270 <calc_disp_stdev+0x144>)
   1222a:	4c12      	ldr	r4, [pc, #72]	; (12274 <calc_disp_stdev+0x148>)
   1222c:	001a      	movs	r2, r3
   1222e:	9302      	str	r3, [sp, #8]
   12230:	9403      	str	r4, [sp, #12]
	sumsq = 0;
   12232:	2600      	movs	r6, #0
   12234:	2700      	movs	r7, #0
   12236:	0023      	movs	r3, r4
   12238:	e7e7      	b.n	1220a <calc_disp_stdev+0xde>
   1223a:	46c0      	nop			; (mov r8, r8)
   1223c:	20002d38 	.word	0x20002d38
   12240:	00026799 	.word	0x00026799
   12244:	00025e55 	.word	0x00025e55
   12248:	0002871d 	.word	0x0002871d
   1224c:	00026bb1 	.word	0x00026bb1
   12250:	00026179 	.word	0x00026179
   12254:	0002878d 	.word	0x0002878d
   12258:	00027fc5 	.word	0x00027fc5
   1225c:	00027ac5 	.word	0x00027ac5
   12260:	00026c3d 	.word	0x00026c3d
   12264:	0002725d 	.word	0x0002725d
   12268:	00023365 	.word	0x00023365
   1226c:	00028831 	.word	0x00028831
   12270:	ffe00000 	.word	0xffe00000
   12274:	41efffff 	.word	0x41efffff

00012278 <rotvec_theta_XY>:
void rotvec_theta_XY(float XYZ[3], float rotXYZ[3], float thetaX, float thetaY){
   12278:	b5f0      	push	{r4, r5, r6, r7, lr}
   1227a:	46de      	mov	lr, fp
   1227c:	4657      	mov	r7, sl
   1227e:	464e      	mov	r6, r9
   12280:	4645      	mov	r5, r8
   12282:	b5e0      	push	{r5, r6, r7, lr}
   12284:	b087      	sub	sp, #28
   12286:	9305      	str	r3, [sp, #20]
	rthetaX = thetaX*DEG2RAD;
   12288:	4d4f      	ldr	r5, [pc, #316]	; (123c8 <rotvec_theta_XY+0x150>)
void rotvec_theta_XY(float XYZ[3], float rotXYZ[3], float thetaX, float thetaY){
   1228a:	0004      	movs	r4, r0
   1228c:	468a      	mov	sl, r1
	rthetaX = thetaX*DEG2RAD;
   1228e:	1c10      	adds	r0, r2, #0
   12290:	494e      	ldr	r1, [pc, #312]	; (123cc <rotvec_theta_XY+0x154>)
   12292:	47a8      	blx	r5
	rotM[1][1] = cos(rthetaX);
   12294:	4a4e      	ldr	r2, [pc, #312]	; (123d0 <rotvec_theta_XY+0x158>)
   12296:	4790      	blx	r2
   12298:	4a4e      	ldr	r2, [pc, #312]	; (123d4 <rotvec_theta_XY+0x15c>)
   1229a:	0006      	movs	r6, r0
   1229c:	000f      	movs	r7, r1
   1229e:	4790      	blx	r2
   122a0:	4a4d      	ldr	r2, [pc, #308]	; (123d8 <rotvec_theta_XY+0x160>)
   122a2:	4693      	mov	fp, r2
   122a4:	4790      	blx	r2
	rotM[1][2] = -1*sin(rthetaX);
   122a6:	4a4d      	ldr	r2, [pc, #308]	; (123dc <rotvec_theta_XY+0x164>)
	rotM[1][1] = cos(rthetaX);
   122a8:	9002      	str	r0, [sp, #8]
	rotM[1][2] = -1*sin(rthetaX);
   122aa:	0039      	movs	r1, r7
   122ac:	0030      	movs	r0, r6
   122ae:	4790      	blx	r2
   122b0:	47d8      	blx	fp
   122b2:	6867      	ldr	r7, [r4, #4]
   122b4:	6822      	ldr	r2, [r4, #0]
   122b6:	9003      	str	r0, [sp, #12]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   122b8:	2100      	movs	r1, #0
   122ba:	1c38      	adds	r0, r7, #0
   122bc:	4690      	mov	r8, r2
   122be:	47a8      	blx	r5
   122c0:	68a6      	ldr	r6, [r4, #8]
   122c2:	4681      	mov	r9, r0
   122c4:	4c46      	ldr	r4, [pc, #280]	; (123e0 <rotvec_theta_XY+0x168>)
   122c6:	2100      	movs	r1, #0
   122c8:	4640      	mov	r0, r8
   122ca:	47a0      	blx	r4
   122cc:	1c01      	adds	r1, r0, #0
   122ce:	4648      	mov	r0, r9
   122d0:	47a0      	blx	r4
   122d2:	2100      	movs	r1, #0
   122d4:	4681      	mov	r9, r0
   122d6:	1c30      	adds	r0, r6, #0
   122d8:	47a8      	blx	r5
   122da:	1c01      	adds	r1, r0, #0
   122dc:	4648      	mov	r0, r9
   122de:	47a0      	blx	r4
   122e0:	2100      	movs	r1, #0
   122e2:	9001      	str	r0, [sp, #4]
   122e4:	4640      	mov	r0, r8
   122e6:	47a8      	blx	r5
   122e8:	2100      	movs	r1, #0
   122ea:	47a0      	blx	r4
	rotM[1][2] = -1*sin(rthetaX);
   122ec:	2180      	movs	r1, #128	; 0x80
   122ee:	0609      	lsls	r1, r1, #24
   122f0:	468c      	mov	ip, r1
   122f2:	9a03      	ldr	r2, [sp, #12]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   122f4:	4680      	mov	r8, r0
	rotM[1][2] = -1*sin(rthetaX);
   122f6:	4462      	add	r2, ip
   122f8:	0010      	movs	r0, r2
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   122fa:	1c31      	adds	r1, r6, #0
   122fc:	47a8      	blx	r5
   122fe:	1c39      	adds	r1, r7, #0
   12300:	4681      	mov	r9, r0
   12302:	9802      	ldr	r0, [sp, #8]
   12304:	47a8      	blx	r5
   12306:	4641      	mov	r1, r8
   12308:	47a0      	blx	r4
   1230a:	1c01      	adds	r1, r0, #0
   1230c:	4648      	mov	r0, r9
   1230e:	47a0      	blx	r4
   12310:	1c39      	adds	r1, r7, #0
   12312:	9004      	str	r0, [sp, #16]
   12314:	9803      	ldr	r0, [sp, #12]
   12316:	47a8      	blx	r5
   12318:	4641      	mov	r1, r8
   1231a:	47a0      	blx	r4
   1231c:	1c31      	adds	r1, r6, #0
   1231e:	1c07      	adds	r7, r0, #0
   12320:	9802      	ldr	r0, [sp, #8]
   12322:	47a8      	blx	r5
   12324:	1c01      	adds	r1, r0, #0
   12326:	1c38      	adds	r0, r7, #0
   12328:	47a0      	blx	r4
	rthetaY = thetaY*DEG2RAD;
   1232a:	4928      	ldr	r1, [pc, #160]	; (123cc <rotvec_theta_XY+0x154>)
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   1232c:	4680      	mov	r8, r0
	rthetaY = thetaY*DEG2RAD;
   1232e:	9805      	ldr	r0, [sp, #20]
   12330:	47a8      	blx	r5
	rotM[0][0] = cos(rthetaY);
   12332:	4b27      	ldr	r3, [pc, #156]	; (123d0 <rotvec_theta_XY+0x158>)
   12334:	4798      	blx	r3
   12336:	4b27      	ldr	r3, [pc, #156]	; (123d4 <rotvec_theta_XY+0x15c>)
   12338:	0006      	movs	r6, r0
   1233a:	000f      	movs	r7, r1
   1233c:	4798      	blx	r3
   1233e:	47d8      	blx	fp
	rotM[0][2] = sin(rthetaY);
   12340:	4b26      	ldr	r3, [pc, #152]	; (123dc <rotvec_theta_XY+0x164>)
	rotM[0][0] = cos(rthetaY);
   12342:	4681      	mov	r9, r0
	rotM[0][2] = sin(rthetaY);
   12344:	0039      	movs	r1, r7
   12346:	0030      	movs	r0, r6
   12348:	4798      	blx	r3
   1234a:	47d8      	blx	fp
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   1234c:	2100      	movs	r1, #0
	rotM[0][2] = sin(rthetaY);
   1234e:	1c06      	adds	r6, r0, #0
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   12350:	9804      	ldr	r0, [sp, #16]
   12352:	47a8      	blx	r5
   12354:	9901      	ldr	r1, [sp, #4]
   12356:	1c07      	adds	r7, r0, #0
   12358:	4648      	mov	r0, r9
   1235a:	47a8      	blx	r5
   1235c:	2100      	movs	r1, #0
   1235e:	47a0      	blx	r4
   12360:	1c39      	adds	r1, r7, #0
   12362:	47a0      	blx	r4
   12364:	4641      	mov	r1, r8
   12366:	4683      	mov	fp, r0
   12368:	1c30      	adds	r0, r6, #0
   1236a:	47a8      	blx	r5
   1236c:	1c01      	adds	r1, r0, #0
   1236e:	4658      	mov	r0, fp
   12370:	47a0      	blx	r4
		ret3[i] = temp[i];
   12372:	4653      	mov	r3, sl
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   12374:	2100      	movs	r1, #0
		ret3[i] = temp[i];
   12376:	6018      	str	r0, [r3, #0]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   12378:	9801      	ldr	r0, [sp, #4]
   1237a:	47a8      	blx	r5
   1237c:	2100      	movs	r1, #0
   1237e:	47a0      	blx	r4
   12380:	9904      	ldr	r1, [sp, #16]
   12382:	47a0      	blx	r4
   12384:	2100      	movs	r1, #0
   12386:	4683      	mov	fp, r0
   12388:	4640      	mov	r0, r8
   1238a:	47a8      	blx	r5
   1238c:	1c01      	adds	r1, r0, #0
   1238e:	4658      	mov	r0, fp
   12390:	47a0      	blx	r4
		ret3[i] = temp[i];
   12392:	4653      	mov	r3, sl
   12394:	6058      	str	r0, [r3, #4]
	rotM[2][0] = -1*sin(rthetaY);
   12396:	2380      	movs	r3, #128	; 0x80
   12398:	061b      	lsls	r3, r3, #24
   1239a:	18f0      	adds	r0, r6, r3
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   1239c:	9901      	ldr	r1, [sp, #4]
   1239e:	47a8      	blx	r5
   123a0:	2100      	movs	r1, #0
   123a2:	47a0      	blx	r4
   123a4:	1c39      	adds	r1, r7, #0
   123a6:	47a0      	blx	r4
   123a8:	4641      	mov	r1, r8
   123aa:	1c06      	adds	r6, r0, #0
   123ac:	4648      	mov	r0, r9
   123ae:	47a8      	blx	r5
   123b0:	1c01      	adds	r1, r0, #0
   123b2:	1c30      	adds	r0, r6, #0
   123b4:	47a0      	blx	r4
		ret3[i] = temp[i];
   123b6:	4653      	mov	r3, sl
   123b8:	6098      	str	r0, [r3, #8]
}
   123ba:	b007      	add	sp, #28
   123bc:	bc3c      	pop	{r2, r3, r4, r5}
   123be:	4690      	mov	r8, r2
   123c0:	4699      	mov	r9, r3
   123c2:	46a2      	mov	sl, r4
   123c4:	46ab      	mov	fp, r5
   123c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123c8:	00026559 	.word	0x00026559
   123cc:	3c8efa35 	.word	0x3c8efa35
   123d0:	0002878d 	.word	0x0002878d
   123d4:	00022ee9 	.word	0x00022ee9
   123d8:	00028831 	.word	0x00028831
   123dc:	00022f75 	.word	0x00022f75
   123e0:	00025e55 	.word	0x00025e55

000123e4 <calc_azm_inc_roll_dec>:
void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *dipP){
   123e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   123e6:	46de      	mov	lr, fp
   123e8:	4657      	mov	r7, sl
   123ea:	464e      	mov	r6, r9
   123ec:	4645      	mov	r5, r8
   123ee:	4683      	mov	fp, r0
   123f0:	b5e0      	push	{r5, r6, r7, lr}
   123f2:	b08b      	sub	sp, #44	; 0x2c
   123f4:	9205      	str	r2, [sp, #20]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   123f6:	4a57      	ldr	r2, [pc, #348]	; (12554 <calc_azm_inc_roll_dec+0x170>)
void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *dipP){
   123f8:	9304      	str	r3, [sp, #16]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   123fa:	4690      	mov	r8, r2
   123fc:	6840      	ldr	r0, [r0, #4]
void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *dipP){
   123fe:	9103      	str	r1, [sp, #12]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   12400:	47c0      	blx	r8
   12402:	465a      	mov	r2, fp
   12404:	0004      	movs	r4, r0
   12406:	6890      	ldr	r0, [r2, #8]
   12408:	000d      	movs	r5, r1
   1240a:	47c0      	blx	r8
   1240c:	4a52      	ldr	r2, [pc, #328]	; (12558 <calc_azm_inc_roll_dec+0x174>)
   1240e:	0006      	movs	r6, r0
   12410:	4691      	mov	r9, r2
   12412:	000f      	movs	r7, r1
   12414:	0022      	movs	r2, r4
   12416:	002b      	movs	r3, r5
   12418:	0020      	movs	r0, r4
   1241a:	0029      	movs	r1, r5
   1241c:	47c8      	blx	r9
   1241e:	0032      	movs	r2, r6
   12420:	0004      	movs	r4, r0
   12422:	000d      	movs	r5, r1
   12424:	003b      	movs	r3, r7
   12426:	0030      	movs	r0, r6
   12428:	0039      	movs	r1, r7
   1242a:	47c8      	blx	r9
   1242c:	000b      	movs	r3, r1
   1242e:	0002      	movs	r2, r0
   12430:	0029      	movs	r1, r5
   12432:	0020      	movs	r0, r4
   12434:	4c49      	ldr	r4, [pc, #292]	; (1255c <calc_azm_inc_roll_dec+0x178>)
   12436:	47a0      	blx	r4
   12438:	4a49      	ldr	r2, [pc, #292]	; (12560 <calc_azm_inc_roll_dec+0x17c>)
   1243a:	4790      	blx	r2
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
   1243c:	465a      	mov	r2, fp
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   1243e:	9000      	str	r0, [sp, #0]
   12440:	9101      	str	r1, [sp, #4]
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
   12442:	6890      	ldr	r0, [r2, #8]
   12444:	47c0      	blx	r8
   12446:	465a      	mov	r2, fp
   12448:	0004      	movs	r4, r0
   1244a:	000d      	movs	r5, r1
   1244c:	6850      	ldr	r0, [r2, #4]
   1244e:	47c0      	blx	r8
   12450:	0022      	movs	r2, r4
   12452:	002b      	movs	r3, r5
   12454:	4c43      	ldr	r4, [pc, #268]	; (12564 <calc_azm_inc_roll_dec+0x180>)
   12456:	47a0      	blx	r4
   12458:	4b43      	ldr	r3, [pc, #268]	; (12568 <calc_azm_inc_roll_dec+0x184>)
   1245a:	2200      	movs	r2, #0
   1245c:	47c8      	blx	r9
   1245e:	4a43      	ldr	r2, [pc, #268]	; (1256c <calc_azm_inc_roll_dec+0x188>)
   12460:	4692      	mov	sl, r2
   12462:	4790      	blx	r2
   12464:	1c06      	adds	r6, r0, #0
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   12466:	9800      	ldr	r0, [sp, #0]
   12468:	9901      	ldr	r1, [sp, #4]
   1246a:	47d0      	blx	sl
	*thetaY = -1*RAD2DEG*atan2(XYZ[0], ryz);
   1246c:	47c0      	blx	r8
   1246e:	465a      	mov	r2, fp
   12470:	0004      	movs	r4, r0
   12472:	000d      	movs	r5, r1
   12474:	6810      	ldr	r0, [r2, #0]
   12476:	47c0      	blx	r8
   12478:	0022      	movs	r2, r4
   1247a:	002b      	movs	r3, r5
   1247c:	4c39      	ldr	r4, [pc, #228]	; (12564 <calc_azm_inc_roll_dec+0x180>)
   1247e:	47a0      	blx	r4
   12480:	2200      	movs	r2, #0
   12482:	4b3b      	ldr	r3, [pc, #236]	; (12570 <calc_azm_inc_roll_dec+0x18c>)
   12484:	47c8      	blx	r9
   12486:	47d0      	blx	sl
	*inclinationP = -1*thetaY;
   12488:	2280      	movs	r2, #128	; 0x80
   1248a:	0612      	lsls	r2, r2, #24
   1248c:	1883      	adds	r3, r0, r2
   1248e:	9a04      	ldr	r2, [sp, #16]
	*thetaY = -1*RAD2DEG*atan2(XYZ[0], ryz);
   12490:	1c04      	adds	r4, r0, #0
	*inclinationP = -1*thetaY;
   12492:	6013      	str	r3, [r2, #0]
	if ((*rollP)<0){
   12494:	4f37      	ldr	r7, [pc, #220]	; (12574 <calc_azm_inc_roll_dec+0x190>)
   12496:	2100      	movs	r1, #0
   12498:	1c30      	adds	r0, r6, #0
   1249a:	47b8      	blx	r7
   1249c:	2800      	cmp	r0, #0
   1249e:	d152      	bne.n	12546 <calc_azm_inc_roll_dec+0x162>
	*rollP = thetaX;
   124a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   124a2:	601e      	str	r6, [r3, #0]
	rotvec_theta_XY(cXYZ, crotXYZ, thetaX, thetaY);
   124a4:	1c23      	adds	r3, r4, #0
   124a6:	1c32      	adds	r2, r6, #0
   124a8:	a907      	add	r1, sp, #28
   124aa:	9803      	ldr	r0, [sp, #12]
   124ac:	4c32      	ldr	r4, [pc, #200]	; (12578 <calc_azm_inc_roll_dec+0x194>)
   124ae:	47a0      	blx	r4
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
   124b0:	9807      	ldr	r0, [sp, #28]
   124b2:	47c0      	blx	r8
   124b4:	0004      	movs	r4, r0
   124b6:	000d      	movs	r5, r1
   124b8:	9808      	ldr	r0, [sp, #32]
   124ba:	47c0      	blx	r8
   124bc:	0022      	movs	r2, r4
   124be:	002b      	movs	r3, r5
   124c0:	4c28      	ldr	r4, [pc, #160]	; (12564 <calc_azm_inc_roll_dec+0x180>)
   124c2:	47a0      	blx	r4
   124c4:	2200      	movs	r2, #0
   124c6:	4b28      	ldr	r3, [pc, #160]	; (12568 <calc_azm_inc_roll_dec+0x184>)
   124c8:	47c8      	blx	r9
   124ca:	47d0      	blx	sl
	if ((*azimuthP)<0){
   124cc:	2100      	movs	r1, #0
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
   124ce:	1c04      	adds	r4, r0, #0
	if ((*azimuthP)<0){
   124d0:	47b8      	blx	r7
   124d2:	2800      	cmp	r0, #0
   124d4:	d130      	bne.n	12538 <calc_azm_inc_roll_dec+0x154>
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
   124d6:	9b05      	ldr	r3, [sp, #20]
   124d8:	601c      	str	r4, [r3, #0]
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
   124da:	9807      	ldr	r0, [sp, #28]
   124dc:	47c0      	blx	r8
   124de:	0004      	movs	r4, r0
   124e0:	9808      	ldr	r0, [sp, #32]
   124e2:	000d      	movs	r5, r1
   124e4:	47c0      	blx	r8
   124e6:	0002      	movs	r2, r0
   124e8:	000b      	movs	r3, r1
   124ea:	47c8      	blx	r9
   124ec:	0022      	movs	r2, r4
   124ee:	0006      	movs	r6, r0
   124f0:	000f      	movs	r7, r1
   124f2:	002b      	movs	r3, r5
   124f4:	0020      	movs	r0, r4
   124f6:	0029      	movs	r1, r5
   124f8:	47c8      	blx	r9
   124fa:	4c18      	ldr	r4, [pc, #96]	; (1255c <calc_azm_inc_roll_dec+0x178>)
   124fc:	0002      	movs	r2, r0
   124fe:	000b      	movs	r3, r1
   12500:	0030      	movs	r0, r6
   12502:	0039      	movs	r1, r7
   12504:	47a0      	blx	r4
   12506:	4b16      	ldr	r3, [pc, #88]	; (12560 <calc_azm_inc_roll_dec+0x17c>)
   12508:	4798      	blx	r3
   1250a:	47d0      	blx	sl
	*dipP = RAD2DEG*atan2(crotXYZ[2], crxy);
   1250c:	47c0      	blx	r8
   1250e:	0004      	movs	r4, r0
   12510:	000d      	movs	r5, r1
   12512:	9809      	ldr	r0, [sp, #36]	; 0x24
   12514:	47c0      	blx	r8
   12516:	0022      	movs	r2, r4
   12518:	002b      	movs	r3, r5
   1251a:	4c12      	ldr	r4, [pc, #72]	; (12564 <calc_azm_inc_roll_dec+0x180>)
   1251c:	47a0      	blx	r4
   1251e:	2200      	movs	r2, #0
   12520:	4b11      	ldr	r3, [pc, #68]	; (12568 <calc_azm_inc_roll_dec+0x184>)
   12522:	47c8      	blx	r9
   12524:	47d0      	blx	sl
   12526:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12528:	6018      	str	r0, [r3, #0]
}
   1252a:	b00b      	add	sp, #44	; 0x2c
   1252c:	bc3c      	pop	{r2, r3, r4, r5}
   1252e:	4690      	mov	r8, r2
   12530:	4699      	mov	r9, r3
   12532:	46a2      	mov	sl, r4
   12534:	46ab      	mov	fp, r5
   12536:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*azimuthP = *azimuthP+360;
   12538:	4b10      	ldr	r3, [pc, #64]	; (1257c <calc_azm_inc_roll_dec+0x198>)
   1253a:	4911      	ldr	r1, [pc, #68]	; (12580 <calc_azm_inc_roll_dec+0x19c>)
   1253c:	1c20      	adds	r0, r4, #0
   1253e:	4798      	blx	r3
   12540:	9b05      	ldr	r3, [sp, #20]
   12542:	6018      	str	r0, [r3, #0]
   12544:	e7c9      	b.n	124da <calc_azm_inc_roll_dec+0xf6>
		*rollP = *rollP+360;
   12546:	4b0d      	ldr	r3, [pc, #52]	; (1257c <calc_azm_inc_roll_dec+0x198>)
   12548:	490d      	ldr	r1, [pc, #52]	; (12580 <calc_azm_inc_roll_dec+0x19c>)
   1254a:	1c30      	adds	r0, r6, #0
   1254c:	4798      	blx	r3
   1254e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12550:	6018      	str	r0, [r3, #0]
   12552:	e7a7      	b.n	124a4 <calc_azm_inc_roll_dec+0xc0>
   12554:	0002878d 	.word	0x0002878d
   12558:	00027ac5 	.word	0x00027ac5
   1255c:	00026c3d 	.word	0x00026c3d
   12560:	00023365 	.word	0x00023365
   12564:	00023005 	.word	0x00023005
   12568:	404ca5dc 	.word	0x404ca5dc
   1256c:	00028831 	.word	0x00028831
   12570:	c04ca5dc 	.word	0xc04ca5dc
   12574:	00025cc9 	.word	0x00025cc9
   12578:	00012279 	.word	0x00012279
   1257c:	00025e55 	.word	0x00025e55
   12580:	43b40000 	.word	0x43b40000

00012584 <calc_orientation>:
void calc_orientation(struct MEASUREMENT_FULL *meas_inst){
   12584:	b5f0      	push	{r4, r5, r6, r7, lr}
   12586:	46de      	mov	lr, fp
   12588:	4657      	mov	r7, sl
   1258a:	464e      	mov	r6, r9
   1258c:	4645      	mov	r5, r8
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
   1258e:	2384      	movs	r3, #132	; 0x84
void calc_orientation(struct MEASUREMENT_FULL *meas_inst){
   12590:	b5e0      	push	{r5, r6, r7, lr}
   12592:	4680      	mov	r8, r0
   12594:	b08d      	sub	sp, #52	; 0x34
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
   12596:	6f81      	ldr	r1, [r0, #120]	; 0x78
   12598:	58c0      	ldr	r0, [r0, r3]
   1259a:	4b71      	ldr	r3, [pc, #452]	; (12760 <calc_orientation+0x1dc>)
   1259c:	4798      	blx	r3
   1259e:	21fc      	movs	r1, #252	; 0xfc
   125a0:	4c70      	ldr	r4, [pc, #448]	; (12764 <calc_orientation+0x1e0>)
   125a2:	0589      	lsls	r1, r1, #22
   125a4:	47a0      	blx	r4
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
   125a6:	4642      	mov	r2, r8
   125a8:	2390      	movs	r3, #144	; 0x90
   125aa:	58d1      	ldr	r1, [r2, r3]
   125ac:	330c      	adds	r3, #12
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
   125ae:	9005      	str	r0, [sp, #20]
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
   125b0:	58d0      	ldr	r0, [r2, r3]
   125b2:	4b6b      	ldr	r3, [pc, #428]	; (12760 <calc_orientation+0x1dc>)
   125b4:	4798      	blx	r3
   125b6:	21fc      	movs	r1, #252	; 0xfc
   125b8:	0589      	lsls	r1, r1, #22
   125ba:	47a0      	blx	r4
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
   125bc:	4642      	mov	r2, r8
   125be:	2388      	movs	r3, #136	; 0x88
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
   125c0:	9006      	str	r0, [sp, #24]
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
   125c2:	58d1      	ldr	r1, [r2, r3]
   125c4:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
   125c6:	4b66      	ldr	r3, [pc, #408]	; (12760 <calc_orientation+0x1dc>)
   125c8:	4798      	blx	r3
   125ca:	21fc      	movs	r1, #252	; 0xfc
   125cc:	0589      	lsls	r1, r1, #22
   125ce:	47a0      	blx	r4
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
   125d0:	4642      	mov	r2, r8
   125d2:	23a0      	movs	r3, #160	; 0xa0
   125d4:	58d1      	ldr	r1, [r2, r3]
   125d6:	3b0c      	subs	r3, #12
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
   125d8:	1c05      	adds	r5, r0, #0
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
   125da:	58d0      	ldr	r0, [r2, r3]
   125dc:	4b60      	ldr	r3, [pc, #384]	; (12760 <calc_orientation+0x1dc>)
   125de:	4798      	blx	r3
   125e0:	21fc      	movs	r1, #252	; 0xfc
   125e2:	0589      	lsls	r1, r1, #22
   125e4:	47a0      	blx	r4
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
   125e6:	4642      	mov	r2, r8
   125e8:	238c      	movs	r3, #140	; 0x8c
   125ea:	58d1      	ldr	r1, [r2, r3]
   125ec:	3b0c      	subs	r3, #12
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
   125ee:	9007      	str	r0, [sp, #28]
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
   125f0:	58d0      	ldr	r0, [r2, r3]
   125f2:	4b5b      	ldr	r3, [pc, #364]	; (12760 <calc_orientation+0x1dc>)
   125f4:	4798      	blx	r3
   125f6:	21fc      	movs	r1, #252	; 0xfc
   125f8:	0589      	lsls	r1, r1, #22
   125fa:	47a0      	blx	r4
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
   125fc:	4642      	mov	r2, r8
   125fe:	23a4      	movs	r3, #164	; 0xa4
   12600:	58d1      	ldr	r1, [r2, r3]
   12602:	3b0c      	subs	r3, #12
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
   12604:	1c06      	adds	r6, r0, #0
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
   12606:	58d0      	ldr	r0, [r2, r3]
   12608:	4b55      	ldr	r3, [pc, #340]	; (12760 <calc_orientation+0x1dc>)
   1260a:	4798      	blx	r3
   1260c:	21fc      	movs	r1, #252	; 0xfc
   1260e:	0589      	lsls	r1, r1, #22
   12610:	47a0      	blx	r4
   12612:	9008      	str	r0, [sp, #32]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   12614:	4b54      	ldr	r3, [pc, #336]	; (12768 <calc_orientation+0x1e4>)
   12616:	1c28      	adds	r0, r5, #0
   12618:	4699      	mov	r9, r3
   1261a:	4798      	blx	r3
   1261c:	9000      	str	r0, [sp, #0]
   1261e:	9101      	str	r1, [sp, #4]
   12620:	1c30      	adds	r0, r6, #0
   12622:	47c8      	blx	r9
   12624:	4b51      	ldr	r3, [pc, #324]	; (1276c <calc_orientation+0x1e8>)
   12626:	0006      	movs	r6, r0
   12628:	000f      	movs	r7, r1
   1262a:	469a      	mov	sl, r3
   1262c:	9a00      	ldr	r2, [sp, #0]
   1262e:	9b01      	ldr	r3, [sp, #4]
   12630:	0010      	movs	r0, r2
   12632:	0019      	movs	r1, r3
   12634:	47d0      	blx	sl
   12636:	0032      	movs	r2, r6
   12638:	0004      	movs	r4, r0
   1263a:	000d      	movs	r5, r1
   1263c:	003b      	movs	r3, r7
   1263e:	0030      	movs	r0, r6
   12640:	0039      	movs	r1, r7
   12642:	47d0      	blx	sl
   12644:	0002      	movs	r2, r0
   12646:	000b      	movs	r3, r1
   12648:	0020      	movs	r0, r4
   1264a:	0029      	movs	r1, r5
   1264c:	4c48      	ldr	r4, [pc, #288]	; (12770 <calc_orientation+0x1ec>)
   1264e:	47a0      	blx	r4
   12650:	4b48      	ldr	r3, [pc, #288]	; (12774 <calc_orientation+0x1f0>)
   12652:	4798      	blx	r3
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
   12654:	0032      	movs	r2, r6
   12656:	003b      	movs	r3, r7
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   12658:	9002      	str	r0, [sp, #8]
   1265a:	9103      	str	r1, [sp, #12]
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
   1265c:	9800      	ldr	r0, [sp, #0]
   1265e:	9901      	ldr	r1, [sp, #4]
   12660:	4c45      	ldr	r4, [pc, #276]	; (12778 <calc_orientation+0x1f4>)
   12662:	47a0      	blx	r4
   12664:	2200      	movs	r2, #0
   12666:	4b45      	ldr	r3, [pc, #276]	; (1277c <calc_orientation+0x1f8>)
   12668:	47d0      	blx	sl
   1266a:	4b45      	ldr	r3, [pc, #276]	; (12780 <calc_orientation+0x1fc>)
   1266c:	469b      	mov	fp, r3
   1266e:	4798      	blx	r3
   12670:	1c06      	adds	r6, r0, #0
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   12672:	9802      	ldr	r0, [sp, #8]
   12674:	9903      	ldr	r1, [sp, #12]
   12676:	47d8      	blx	fp
	*thetaY = -1*RAD2DEG*atan2(XYZ[0], ryz);
   12678:	47c8      	blx	r9
   1267a:	0004      	movs	r4, r0
   1267c:	000d      	movs	r5, r1
   1267e:	9805      	ldr	r0, [sp, #20]
   12680:	47c8      	blx	r9
   12682:	0022      	movs	r2, r4
   12684:	002b      	movs	r3, r5
   12686:	4c3c      	ldr	r4, [pc, #240]	; (12778 <calc_orientation+0x1f4>)
   12688:	47a0      	blx	r4
   1268a:	2200      	movs	r2, #0
   1268c:	4b3d      	ldr	r3, [pc, #244]	; (12784 <calc_orientation+0x200>)
   1268e:	47d0      	blx	sl
   12690:	47d8      	blx	fp
	*inclinationP = -1*thetaY;
   12692:	2380      	movs	r3, #128	; 0x80
   12694:	4642      	mov	r2, r8
   12696:	061b      	lsls	r3, r3, #24
   12698:	18c3      	adds	r3, r0, r3
	*thetaY = -1*RAD2DEG*atan2(XYZ[0], ryz);
   1269a:	1c04      	adds	r4, r0, #0
	*inclinationP = -1*thetaY;
   1269c:	6193      	str	r3, [r2, #24]
	if ((*rollP)<0){
   1269e:	4f3a      	ldr	r7, [pc, #232]	; (12788 <calc_orientation+0x204>)
   126a0:	2100      	movs	r1, #0
   126a2:	1c30      	adds	r0, r6, #0
   126a4:	47b8      	blx	r7
   126a6:	2800      	cmp	r0, #0
   126a8:	d152      	bne.n	12750 <calc_orientation+0x1cc>
	*rollP = thetaX;
   126aa:	4643      	mov	r3, r8
   126ac:	621e      	str	r6, [r3, #32]
	rotvec_theta_XY(cXYZ, crotXYZ, thetaX, thetaY);
   126ae:	1c23      	adds	r3, r4, #0
   126b0:	1c32      	adds	r2, r6, #0
   126b2:	a909      	add	r1, sp, #36	; 0x24
   126b4:	a806      	add	r0, sp, #24
   126b6:	4c35      	ldr	r4, [pc, #212]	; (1278c <calc_orientation+0x208>)
   126b8:	47a0      	blx	r4
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
   126ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   126bc:	47c8      	blx	r9
   126be:	0004      	movs	r4, r0
   126c0:	000d      	movs	r5, r1
   126c2:	980a      	ldr	r0, [sp, #40]	; 0x28
   126c4:	47c8      	blx	r9
   126c6:	0022      	movs	r2, r4
   126c8:	002b      	movs	r3, r5
   126ca:	4c2b      	ldr	r4, [pc, #172]	; (12778 <calc_orientation+0x1f4>)
   126cc:	47a0      	blx	r4
   126ce:	2200      	movs	r2, #0
   126d0:	4b2a      	ldr	r3, [pc, #168]	; (1277c <calc_orientation+0x1f8>)
   126d2:	47d0      	blx	sl
   126d4:	47d8      	blx	fp
	if ((*azimuthP)<0){
   126d6:	2100      	movs	r1, #0
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
   126d8:	1c04      	adds	r4, r0, #0
	if ((*azimuthP)<0){
   126da:	47b8      	blx	r7
   126dc:	2800      	cmp	r0, #0
   126de:	d130      	bne.n	12742 <calc_orientation+0x1be>
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
   126e0:	4643      	mov	r3, r8
   126e2:	615c      	str	r4, [r3, #20]
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
   126e4:	9809      	ldr	r0, [sp, #36]	; 0x24
   126e6:	47c8      	blx	r9
   126e8:	0004      	movs	r4, r0
   126ea:	980a      	ldr	r0, [sp, #40]	; 0x28
   126ec:	000d      	movs	r5, r1
   126ee:	47c8      	blx	r9
   126f0:	0002      	movs	r2, r0
   126f2:	000b      	movs	r3, r1
   126f4:	47d0      	blx	sl
   126f6:	0022      	movs	r2, r4
   126f8:	0006      	movs	r6, r0
   126fa:	000f      	movs	r7, r1
   126fc:	002b      	movs	r3, r5
   126fe:	0020      	movs	r0, r4
   12700:	0029      	movs	r1, r5
   12702:	47d0      	blx	sl
   12704:	4c1a      	ldr	r4, [pc, #104]	; (12770 <calc_orientation+0x1ec>)
   12706:	0002      	movs	r2, r0
   12708:	000b      	movs	r3, r1
   1270a:	0030      	movs	r0, r6
   1270c:	0039      	movs	r1, r7
   1270e:	47a0      	blx	r4
   12710:	4b18      	ldr	r3, [pc, #96]	; (12774 <calc_orientation+0x1f0>)
   12712:	4798      	blx	r3
   12714:	47d8      	blx	fp
	*dipP = RAD2DEG*atan2(crotXYZ[2], crxy);
   12716:	47c8      	blx	r9
   12718:	0004      	movs	r4, r0
   1271a:	000d      	movs	r5, r1
   1271c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1271e:	47c8      	blx	r9
   12720:	0022      	movs	r2, r4
   12722:	002b      	movs	r3, r5
   12724:	4c14      	ldr	r4, [pc, #80]	; (12778 <calc_orientation+0x1f4>)
   12726:	47a0      	blx	r4
   12728:	2200      	movs	r2, #0
   1272a:	4b14      	ldr	r3, [pc, #80]	; (1277c <calc_orientation+0x1f8>)
   1272c:	47d0      	blx	sl
   1272e:	47d8      	blx	fp
   12730:	4643      	mov	r3, r8
   12732:	61d8      	str	r0, [r3, #28]
}
   12734:	b00d      	add	sp, #52	; 0x34
   12736:	bc3c      	pop	{r2, r3, r4, r5}
   12738:	4690      	mov	r8, r2
   1273a:	4699      	mov	r9, r3
   1273c:	46a2      	mov	sl, r4
   1273e:	46ab      	mov	fp, r5
   12740:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*azimuthP = *azimuthP+360;
   12742:	4b07      	ldr	r3, [pc, #28]	; (12760 <calc_orientation+0x1dc>)
   12744:	4912      	ldr	r1, [pc, #72]	; (12790 <calc_orientation+0x20c>)
   12746:	1c20      	adds	r0, r4, #0
   12748:	4798      	blx	r3
   1274a:	4643      	mov	r3, r8
   1274c:	6158      	str	r0, [r3, #20]
   1274e:	e7c9      	b.n	126e4 <calc_orientation+0x160>
		*rollP = *rollP+360;
   12750:	4b03      	ldr	r3, [pc, #12]	; (12760 <calc_orientation+0x1dc>)
   12752:	490f      	ldr	r1, [pc, #60]	; (12790 <calc_orientation+0x20c>)
   12754:	1c30      	adds	r0, r6, #0
   12756:	4798      	blx	r3
   12758:	4643      	mov	r3, r8
   1275a:	6218      	str	r0, [r3, #32]
   1275c:	e7a7      	b.n	126ae <calc_orientation+0x12a>
   1275e:	46c0      	nop			; (mov r8, r8)
   12760:	00025e55 	.word	0x00025e55
   12764:	00026559 	.word	0x00026559
   12768:	0002878d 	.word	0x0002878d
   1276c:	00027ac5 	.word	0x00027ac5
   12770:	00026c3d 	.word	0x00026c3d
   12774:	00023365 	.word	0x00023365
   12778:	00023005 	.word	0x00023005
   1277c:	404ca5dc 	.word	0x404ca5dc
   12780:	00028831 	.word	0x00028831
   12784:	c04ca5dc 	.word	0xc04ca5dc
   12788:	00025cc9 	.word	0x00025cc9
   1278c:	00012279 	.word	0x00012279
   12790:	43b40000 	.word	0x43b40000

00012794 <mat_mult_33_31>:
void mat_mult_33_31(float mat33[3][3], float mat3[3], float ret3[3]){
   12794:	b5f0      	push	{r4, r5, r6, r7, lr}
   12796:	46de      	mov	lr, fp
   12798:	4657      	mov	r7, sl
   1279a:	464e      	mov	r6, r9
   1279c:	4645      	mov	r5, r8
   1279e:	b5e0      	push	{r5, r6, r7, lr}
   127a0:	680b      	ldr	r3, [r1, #0]
   127a2:	b083      	sub	sp, #12
   127a4:	469a      	mov	sl, r3
   127a6:	684b      	ldr	r3, [r1, #4]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   127a8:	4d26      	ldr	r5, [pc, #152]	; (12844 <mat_mult_33_31+0xb0>)
   127aa:	4699      	mov	r9, r3
   127ac:	688b      	ldr	r3, [r1, #8]
void mat_mult_33_31(float mat33[3][3], float mat3[3], float ret3[3]){
   127ae:	0006      	movs	r6, r0
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   127b0:	68c1      	ldr	r1, [r0, #12]
   127b2:	4650      	mov	r0, sl
   127b4:	4698      	mov	r8, r3
void mat_mult_33_31(float mat33[3][3], float mat3[3], float ret3[3]){
   127b6:	0017      	movs	r7, r2
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
   127b8:	47a8      	blx	r5
   127ba:	4c23      	ldr	r4, [pc, #140]	; (12848 <mat_mult_33_31+0xb4>)
   127bc:	2100      	movs	r1, #0
   127be:	47a0      	blx	r4
   127c0:	6931      	ldr	r1, [r6, #16]
   127c2:	4683      	mov	fp, r0
   127c4:	4648      	mov	r0, r9
   127c6:	47a8      	blx	r5
   127c8:	1c01      	adds	r1, r0, #0
   127ca:	4658      	mov	r0, fp
   127cc:	47a0      	blx	r4
   127ce:	6971      	ldr	r1, [r6, #20]
   127d0:	4683      	mov	fp, r0
   127d2:	4640      	mov	r0, r8
   127d4:	47a8      	blx	r5
   127d6:	1c01      	adds	r1, r0, #0
   127d8:	4658      	mov	r0, fp
   127da:	47a0      	blx	r4
   127dc:	69b1      	ldr	r1, [r6, #24]
   127de:	9001      	str	r0, [sp, #4]
   127e0:	4650      	mov	r0, sl
   127e2:	47a8      	blx	r5
   127e4:	2100      	movs	r1, #0
   127e6:	47a0      	blx	r4
   127e8:	69f1      	ldr	r1, [r6, #28]
   127ea:	4683      	mov	fp, r0
   127ec:	4648      	mov	r0, r9
   127ee:	47a8      	blx	r5
   127f0:	1c01      	adds	r1, r0, #0
   127f2:	4658      	mov	r0, fp
   127f4:	47a0      	blx	r4
   127f6:	6a31      	ldr	r1, [r6, #32]
   127f8:	4683      	mov	fp, r0
   127fa:	4640      	mov	r0, r8
   127fc:	47a8      	blx	r5
   127fe:	1c01      	adds	r1, r0, #0
   12800:	4658      	mov	r0, fp
   12802:	47a0      	blx	r4
   12804:	6831      	ldr	r1, [r6, #0]
   12806:	4683      	mov	fp, r0
   12808:	4650      	mov	r0, sl
   1280a:	47a8      	blx	r5
   1280c:	2100      	movs	r1, #0
   1280e:	47a0      	blx	r4
   12810:	6871      	ldr	r1, [r6, #4]
   12812:	4682      	mov	sl, r0
   12814:	4648      	mov	r0, r9
   12816:	47a8      	blx	r5
   12818:	1c01      	adds	r1, r0, #0
   1281a:	4650      	mov	r0, sl
   1281c:	47a0      	blx	r4
   1281e:	68b1      	ldr	r1, [r6, #8]
   12820:	4681      	mov	r9, r0
   12822:	4640      	mov	r0, r8
   12824:	47a8      	blx	r5
   12826:	1c01      	adds	r1, r0, #0
   12828:	4648      	mov	r0, r9
   1282a:	47a0      	blx	r4
		ret3[i] = temp[i];
   1282c:	6038      	str	r0, [r7, #0]
   1282e:	9b01      	ldr	r3, [sp, #4]
   12830:	607b      	str	r3, [r7, #4]
   12832:	465b      	mov	r3, fp
   12834:	60bb      	str	r3, [r7, #8]
}
   12836:	b003      	add	sp, #12
   12838:	bc3c      	pop	{r2, r3, r4, r5}
   1283a:	4690      	mov	r8, r2
   1283c:	4699      	mov	r9, r3
   1283e:	46a2      	mov	sl, r4
   12840:	46ab      	mov	fp, r5
   12842:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12844:	00026559 	.word	0x00026559
   12848:	00025e55 	.word	0x00025e55

0001284c <calc_theta_XY>:
void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
   1284c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1284e:	46de      	mov	lr, fp
   12850:	4657      	mov	r7, sl
   12852:	464e      	mov	r6, r9
   12854:	4645      	mov	r5, r8
   12856:	4681      	mov	r9, r0
   12858:	b5e0      	push	{r5, r6, r7, lr}
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   1285a:	4b29      	ldr	r3, [pc, #164]	; (12900 <calc_theta_XY+0xb4>)
void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
   1285c:	b083      	sub	sp, #12
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   1285e:	4698      	mov	r8, r3
void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
   12860:	9201      	str	r2, [sp, #4]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   12862:	6840      	ldr	r0, [r0, #4]
void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
   12864:	468b      	mov	fp, r1
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   12866:	47c0      	blx	r8
   12868:	464b      	mov	r3, r9
   1286a:	0004      	movs	r4, r0
   1286c:	6898      	ldr	r0, [r3, #8]
   1286e:	000d      	movs	r5, r1
   12870:	47c0      	blx	r8
   12872:	4b24      	ldr	r3, [pc, #144]	; (12904 <calc_theta_XY+0xb8>)
   12874:	0006      	movs	r6, r0
   12876:	469a      	mov	sl, r3
   12878:	000f      	movs	r7, r1
   1287a:	0022      	movs	r2, r4
   1287c:	002b      	movs	r3, r5
   1287e:	0020      	movs	r0, r4
   12880:	0029      	movs	r1, r5
   12882:	47d0      	blx	sl
   12884:	0032      	movs	r2, r6
   12886:	0004      	movs	r4, r0
   12888:	000d      	movs	r5, r1
   1288a:	003b      	movs	r3, r7
   1288c:	0030      	movs	r0, r6
   1288e:	0039      	movs	r1, r7
   12890:	47d0      	blx	sl
   12892:	0002      	movs	r2, r0
   12894:	000b      	movs	r3, r1
   12896:	0020      	movs	r0, r4
   12898:	0029      	movs	r1, r5
   1289a:	4c1b      	ldr	r4, [pc, #108]	; (12908 <calc_theta_XY+0xbc>)
   1289c:	47a0      	blx	r4
   1289e:	4b1b      	ldr	r3, [pc, #108]	; (1290c <calc_theta_XY+0xc0>)
   128a0:	4798      	blx	r3
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
   128a2:	464b      	mov	r3, r9
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   128a4:	0004      	movs	r4, r0
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
   128a6:	6898      	ldr	r0, [r3, #8]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   128a8:	000d      	movs	r5, r1
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
   128aa:	47c0      	blx	r8
   128ac:	464b      	mov	r3, r9
   128ae:	0006      	movs	r6, r0
   128b0:	000f      	movs	r7, r1
   128b2:	6858      	ldr	r0, [r3, #4]
   128b4:	47c0      	blx	r8
   128b6:	0032      	movs	r2, r6
   128b8:	003b      	movs	r3, r7
   128ba:	4f15      	ldr	r7, [pc, #84]	; (12910 <calc_theta_XY+0xc4>)
   128bc:	47b8      	blx	r7
   128be:	2200      	movs	r2, #0
   128c0:	4b14      	ldr	r3, [pc, #80]	; (12914 <calc_theta_XY+0xc8>)
   128c2:	47d0      	blx	sl
   128c4:	4e14      	ldr	r6, [pc, #80]	; (12918 <calc_theta_XY+0xcc>)
   128c6:	47b0      	blx	r6
   128c8:	465b      	mov	r3, fp
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   128ca:	0029      	movs	r1, r5
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
   128cc:	6018      	str	r0, [r3, #0]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
   128ce:	0020      	movs	r0, r4
   128d0:	47b0      	blx	r6
	*thetaY = -1*RAD2DEG*atan2(XYZ[0], ryz);
   128d2:	47c0      	blx	r8
   128d4:	464b      	mov	r3, r9
   128d6:	0004      	movs	r4, r0
   128d8:	000d      	movs	r5, r1
   128da:	6818      	ldr	r0, [r3, #0]
   128dc:	47c0      	blx	r8
   128de:	0022      	movs	r2, r4
   128e0:	002b      	movs	r3, r5
   128e2:	47b8      	blx	r7
   128e4:	2200      	movs	r2, #0
   128e6:	4b0d      	ldr	r3, [pc, #52]	; (1291c <calc_theta_XY+0xd0>)
   128e8:	47d0      	blx	sl
   128ea:	47b0      	blx	r6
   128ec:	9b01      	ldr	r3, [sp, #4]
   128ee:	6018      	str	r0, [r3, #0]
}
   128f0:	b003      	add	sp, #12
   128f2:	bc3c      	pop	{r2, r3, r4, r5}
   128f4:	4690      	mov	r8, r2
   128f6:	4699      	mov	r9, r3
   128f8:	46a2      	mov	sl, r4
   128fa:	46ab      	mov	fp, r5
   128fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   128fe:	46c0      	nop			; (mov r8, r8)
   12900:	0002878d 	.word	0x0002878d
   12904:	00027ac5 	.word	0x00027ac5
   12908:	00026c3d 	.word	0x00026c3d
   1290c:	00023365 	.word	0x00023365
   12910:	00023005 	.word	0x00023005
   12914:	404ca5dc 	.word	0x404ca5dc
   12918:	00028831 	.word	0x00028831
   1291c:	c04ca5dc 	.word	0xc04ca5dc

00012920 <stdev>:
float stdev(float data[], uint32_t n_meas){
   12920:	b5f0      	push	{r4, r5, r6, r7, lr}
   12922:	4645      	mov	r5, r8
   12924:	46de      	mov	lr, fp
   12926:	4657      	mov	r7, sl
   12928:	464e      	mov	r6, r9
   1292a:	b5e0      	push	{r5, r6, r7, lr}
   1292c:	4680      	mov	r8, r0
   1292e:	b083      	sub	sp, #12
   12930:	1e0d      	subs	r5, r1, #0
	for (i=0;i<n_meas;i++){
   12932:	d04e      	beq.n	129d2 <stdev+0xb2>
   12934:	2600      	movs	r6, #0
   12936:	2400      	movs	r4, #0
   12938:	1c30      	adds	r0, r6, #0
   1293a:	2300      	movs	r3, #0
   1293c:	4646      	mov	r6, r8
   1293e:	4f26      	ldr	r7, [pc, #152]	; (129d8 <stdev+0xb8>)
		mean = mean+data[i];
   12940:	009b      	lsls	r3, r3, #2
	for (i=0;i<n_meas;i++){
   12942:	3401      	adds	r4, #1
		mean = mean+data[i];
   12944:	5999      	ldr	r1, [r3, r6]
	for (i=0;i<n_meas;i++){
   12946:	b2e4      	uxtb	r4, r4
		mean = mean+data[i];
   12948:	47b8      	blx	r7
	for (i=0;i<n_meas;i++){
   1294a:	0023      	movs	r3, r4
   1294c:	42a5      	cmp	r5, r4
   1294e:	d8f7      	bhi.n	12940 <stdev+0x20>
	mean = mean/n_meas;
   12950:	4b22      	ldr	r3, [pc, #136]	; (129dc <stdev+0xbc>)
   12952:	46b0      	mov	r8, r6
   12954:	1c06      	adds	r6, r0, #0
   12956:	0028      	movs	r0, r5
   12958:	4798      	blx	r3
   1295a:	4b21      	ldr	r3, [pc, #132]	; (129e0 <stdev+0xc0>)
   1295c:	1c01      	adds	r1, r0, #0
   1295e:	1c30      	adds	r0, r6, #0
   12960:	4798      	blx	r3
	mean = meanArr(data, n_meas);
   12962:	4b20      	ldr	r3, [pc, #128]	; (129e4 <stdev+0xc4>)
   12964:	2600      	movs	r6, #0
   12966:	4699      	mov	r9, r3
   12968:	4798      	blx	r3
   1296a:	4a1f      	ldr	r2, [pc, #124]	; (129e8 <stdev+0xc8>)
   1296c:	2300      	movs	r3, #0
   1296e:	4693      	mov	fp, r2
   12970:	4a1e      	ldr	r2, [pc, #120]	; (129ec <stdev+0xcc>)
   12972:	2700      	movs	r7, #0
   12974:	2400      	movs	r4, #0
   12976:	4692      	mov	sl, r2
   12978:	9000      	str	r0, [sp, #0]
   1297a:	9101      	str	r1, [sp, #4]
		sumsq = sumsq+pow((data[i]-mean),2);
   1297c:	4642      	mov	r2, r8
   1297e:	009b      	lsls	r3, r3, #2
   12980:	5898      	ldr	r0, [r3, r2]
   12982:	47c8      	blx	r9
   12984:	9a00      	ldr	r2, [sp, #0]
   12986:	9b01      	ldr	r3, [sp, #4]
   12988:	47d8      	blx	fp
   1298a:	0002      	movs	r2, r0
   1298c:	000b      	movs	r3, r1
   1298e:	47d0      	blx	sl
   12990:	000b      	movs	r3, r1
   12992:	0002      	movs	r2, r0
   12994:	0039      	movs	r1, r7
   12996:	0030      	movs	r0, r6
   12998:	4e15      	ldr	r6, [pc, #84]	; (129f0 <stdev+0xd0>)
   1299a:	47b0      	blx	r6
	for (i=0;i<n_meas;i++){
   1299c:	3401      	adds	r4, #1
   1299e:	b2e4      	uxtb	r4, r4
		sumsq = sumsq+pow((data[i]-mean),2);
   129a0:	0006      	movs	r6, r0
   129a2:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
   129a4:	0023      	movs	r3, r4
   129a6:	42a5      	cmp	r5, r4
   129a8:	d8e8      	bhi.n	1297c <stdev+0x5c>
	sumsq = sumsq/(n_meas-1);
   129aa:	4b12      	ldr	r3, [pc, #72]	; (129f4 <stdev+0xd4>)
   129ac:	1e68      	subs	r0, r5, #1
   129ae:	4798      	blx	r3
   129b0:	4c11      	ldr	r4, [pc, #68]	; (129f8 <stdev+0xd8>)
   129b2:	0002      	movs	r2, r0
   129b4:	000b      	movs	r3, r1
   129b6:	0030      	movs	r0, r6
   129b8:	0039      	movs	r1, r7
   129ba:	47a0      	blx	r4
	sumsq = sqrt(sumsq);
   129bc:	4b0f      	ldr	r3, [pc, #60]	; (129fc <stdev+0xdc>)
   129be:	4798      	blx	r3
	return sumsq;
   129c0:	4b0f      	ldr	r3, [pc, #60]	; (12a00 <stdev+0xe0>)
   129c2:	4798      	blx	r3
}
   129c4:	b003      	add	sp, #12
   129c6:	bc3c      	pop	{r2, r3, r4, r5}
   129c8:	4690      	mov	r8, r2
   129ca:	4699      	mov	r9, r3
   129cc:	46a2      	mov	sl, r4
   129ce:	46ab      	mov	fp, r5
   129d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sumsq = 0;
   129d2:	2600      	movs	r6, #0
   129d4:	2700      	movs	r7, #0
   129d6:	e7e8      	b.n	129aa <stdev+0x8a>
   129d8:	00025e55 	.word	0x00025e55
   129dc:	00026bb1 	.word	0x00026bb1
   129e0:	00026179 	.word	0x00026179
   129e4:	0002878d 	.word	0x0002878d
   129e8:	00027fc5 	.word	0x00027fc5
   129ec:	00027ac5 	.word	0x00027ac5
   129f0:	00026c3d 	.word	0x00026c3d
   129f4:	0002871d 	.word	0x0002871d
   129f8:	0002725d 	.word	0x0002725d
   129fc:	00023365 	.word	0x00023365
   12a00:	00028831 	.word	0x00028831

00012a04 <meanArr>:
float meanArr(float data[], uint32_t n_meas){
   12a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a06:	46c6      	mov	lr, r8
   12a08:	0007      	movs	r7, r0
   12a0a:	b500      	push	{lr}
   12a0c:	1e0e      	subs	r6, r1, #0
	for (i=0;i<n_meas;i++){
   12a0e:	d018      	beq.n	12a42 <meanArr+0x3e>
   12a10:	4a0d      	ldr	r2, [pc, #52]	; (12a48 <meanArr+0x44>)
   12a12:	2300      	movs	r3, #0
   12a14:	2500      	movs	r5, #0
   12a16:	2400      	movs	r4, #0
   12a18:	4690      	mov	r8, r2
		mean = mean+data[i];
   12a1a:	009b      	lsls	r3, r3, #2
   12a1c:	59d9      	ldr	r1, [r3, r7]
   12a1e:	1c28      	adds	r0, r5, #0
   12a20:	47c0      	blx	r8
	for (i=0;i<n_meas;i++){
   12a22:	3401      	adds	r4, #1
   12a24:	b2e4      	uxtb	r4, r4
		mean = mean+data[i];
   12a26:	1c05      	adds	r5, r0, #0
	for (i=0;i<n_meas;i++){
   12a28:	0023      	movs	r3, r4
   12a2a:	42b4      	cmp	r4, r6
   12a2c:	d3f5      	bcc.n	12a1a <meanArr+0x16>
	mean = mean/n_meas;
   12a2e:	0030      	movs	r0, r6
   12a30:	4b06      	ldr	r3, [pc, #24]	; (12a4c <meanArr+0x48>)
   12a32:	4798      	blx	r3
   12a34:	4b06      	ldr	r3, [pc, #24]	; (12a50 <meanArr+0x4c>)
   12a36:	1c01      	adds	r1, r0, #0
   12a38:	1c28      	adds	r0, r5, #0
   12a3a:	4798      	blx	r3
	return mean;
	
}
   12a3c:	bc04      	pop	{r2}
   12a3e:	4690      	mov	r8, r2
   12a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mean = 0;
   12a42:	2500      	movs	r5, #0
   12a44:	e7f3      	b.n	12a2e <meanArr+0x2a>
   12a46:	46c0      	nop			; (mov r8, r8)
   12a48:	00025e55 	.word	0x00025e55
   12a4c:	00026bb1 	.word	0x00026bb1
   12a50:	00026179 	.word	0x00026179

00012a54 <determinant>:
	
}


float determinant(float a[6][6], uint8_t k)
{
   12a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a56:	46de      	mov	lr, fp
   12a58:	4657      	mov	r7, sl
   12a5a:	464e      	mov	r6, r9
   12a5c:	4645      	mov	r5, r8
   12a5e:	b5e0      	push	{r5, r6, r7, lr}
   12a60:	4ce0      	ldr	r4, [pc, #896]	; (12de4 <determinant+0x390>)
   12a62:	44a5      	add	sp, r4
   12a64:	9017      	str	r0, [sp, #92]	; 0x5c
   12a66:	911c      	str	r1, [sp, #112]	; 0x70
	float s = 1, det = 0, b[6][6];
	uint8_t i, j, m, n, c;
	if (k == 1)
   12a68:	2901      	cmp	r1, #1
   12a6a:	d100      	bne.n	12a6e <determinant+0x1a>
   12a6c:	e1ed      	b.n	12e4a <determinant+0x3f6>
		return (a[0][0]);
	}
	else
	{
		det = 0;
		for (c = 0; c < k; c++)
   12a6e:	2900      	cmp	r1, #0
   12a70:	d100      	bne.n	12a74 <determinant+0x20>
   12a72:	e1d9      	b.n	12e28 <determinant+0x3d4>
							m++;
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, k - 1));
   12a74:	000b      	movs	r3, r1
   12a76:	000a      	movs	r2, r1
   12a78:	3b01      	subs	r3, #1
   12a7a:	b2db      	uxtb	r3, r3
   12a7c:	0019      	movs	r1, r3
   12a7e:	930e      	str	r3, [sp, #56]	; 0x38
   12a80:	0013      	movs	r3, r2
   12a82:	3a02      	subs	r2, #2
   12a84:	9222      	str	r2, [sp, #136]	; 0x88
   12a86:	b2d2      	uxtb	r2, r2
   12a88:	9214      	str	r2, [sp, #80]	; 0x50
   12a8a:	001a      	movs	r2, r3
   12a8c:	3b03      	subs	r3, #3
   12a8e:	b2db      	uxtb	r3, r3
   12a90:	9315      	str	r3, [sp, #84]	; 0x54
   12a92:	0013      	movs	r3, r2
   12a94:	3b04      	subs	r3, #4
   12a96:	b2db      	uxtb	r3, r3
   12a98:	930b      	str	r3, [sp, #44]	; 0x2c
   12a9a:	0013      	movs	r3, r2
   12a9c:	3b05      	subs	r3, #5
   12a9e:	b2db      	uxtb	r3, r3
   12aa0:	469a      	mov	sl, r3
   12aa2:	000b      	movs	r3, r1
   12aa4:	3301      	adds	r3, #1
   12aa6:	9321      	str	r3, [sp, #132]	; 0x84
   12aa8:	2300      	movs	r3, #0
   12aaa:	9306      	str	r3, [sp, #24]
   12aac:	2300      	movs	r3, #0
   12aae:	930d      	str	r3, [sp, #52]	; 0x34
   12ab0:	23fe      	movs	r3, #254	; 0xfe
   12ab2:	059b      	lsls	r3, r3, #22
   12ab4:	9318      	str	r3, [sp, #96]	; 0x60
			for (i = 0;i < k; i++)
   12ab6:	2000      	movs	r0, #0
   12ab8:	466b      	mov	r3, sp
   12aba:	900c      	str	r0, [sp, #48]	; 0x30
					b[i][j] = 0;
   12abc:	2000      	movs	r0, #0
   12abe:	7e1e      	ldrb	r6, [r3, #24]
   12ac0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   12ac2:	46b0      	mov	r8, r6
   12ac4:	46ac      	mov	ip, r5
   12ac6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   12ac8:	9d22      	ldr	r5, [sp, #136]	; 0x88
			for (i = 0;i < k; i++)
   12aca:	a924      	add	r1, sp, #144	; 0x90
   12acc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   12ace:	2300      	movs	r3, #0
   12ad0:	2200      	movs	r2, #0
   12ad2:	46a9      	mov	r9, r5
					b[i][j] = 0;
   12ad4:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
   12ad6:	2e00      	cmp	r6, #0
   12ad8:	d100      	bne.n	12adc <determinant+0x88>
   12ada:	e08c      	b.n	12bf6 <determinant+0x1a2>
   12adc:	9e06      	ldr	r6, [sp, #24]
   12ade:	2e00      	cmp	r6, #0
   12ae0:	d100      	bne.n	12ae4 <determinant+0x90>
   12ae2:	e190      	b.n	12e06 <determinant+0x3b2>
						b[m][n] = a[i][j];
   12ae4:	0056      	lsls	r6, r2, #1
   12ae6:	18b6      	adds	r6, r6, r2
   12ae8:	0076      	lsls	r6, r6, #1
   12aea:	18f6      	adds	r6, r6, r3
   12aec:	6825      	ldr	r5, [r4, #0]
   12aee:	00b6      	lsls	r6, r6, #2
   12af0:	af24      	add	r7, sp, #144	; 0x90
   12af2:	51bd      	str	r5, [r7, r6]
						if (n < (k - 2))
   12af4:	454b      	cmp	r3, r9
   12af6:	da00      	bge.n	12afa <determinant+0xa6>
   12af8:	e179      	b.n	12dee <determinant+0x39a>
					if (i != 0 && j != c)
   12afa:	4645      	mov	r5, r8
							m++;
   12afc:	3201      	adds	r2, #1
   12afe:	b2d2      	uxtb	r2, r2
							n = 0;
   12b00:	2300      	movs	r3, #0
					b[i][j] = 0;
   12b02:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
   12b04:	2d01      	cmp	r5, #1
   12b06:	d100      	bne.n	12b0a <determinant+0xb6>
   12b08:	e178      	b.n	12dfc <determinant+0x3a8>
						b[m][n] = a[i][j];
   12b0a:	0056      	lsls	r6, r2, #1
   12b0c:	18b6      	adds	r6, r6, r2
   12b0e:	0076      	lsls	r6, r6, #1
   12b10:	18f6      	adds	r6, r6, r3
   12b12:	6867      	ldr	r7, [r4, #4]
   12b14:	00b6      	lsls	r6, r6, #2
   12b16:	ad24      	add	r5, sp, #144	; 0x90
   12b18:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
   12b1a:	454b      	cmp	r3, r9
   12b1c:	da00      	bge.n	12b20 <determinant+0xcc>
   12b1e:	e163      	b.n	12de8 <determinant+0x394>
							n = 0;
   12b20:	2300      	movs	r3, #0
							m++;
   12b22:	3201      	adds	r2, #1
   12b24:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   12b26:	4665      	mov	r5, ip
   12b28:	2d02      	cmp	r5, #2
   12b2a:	d100      	bne.n	12b2e <determinant+0xda>
   12b2c:	e151      	b.n	12dd2 <determinant+0x37e>
					if (i != 0 && j != c)
   12b2e:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
   12b30:	6088      	str	r0, [r1, #8]
					if (i != 0 && j != c)
   12b32:	2d02      	cmp	r5, #2
   12b34:	d100      	bne.n	12b38 <determinant+0xe4>
   12b36:	e172      	b.n	12e1e <determinant+0x3ca>
						b[m][n] = a[i][j];
   12b38:	0056      	lsls	r6, r2, #1
   12b3a:	18b6      	adds	r6, r6, r2
   12b3c:	0076      	lsls	r6, r6, #1
   12b3e:	18f6      	adds	r6, r6, r3
   12b40:	68a7      	ldr	r7, [r4, #8]
   12b42:	00b6      	lsls	r6, r6, #2
   12b44:	ad24      	add	r5, sp, #144	; 0x90
   12b46:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
   12b48:	454b      	cmp	r3, r9
   12b4a:	da00      	bge.n	12b4e <determinant+0xfa>
   12b4c:	e146      	b.n	12ddc <determinant+0x388>
							n = 0;
   12b4e:	2300      	movs	r3, #0
							m++;
   12b50:	3201      	adds	r2, #1
   12b52:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   12b54:	4665      	mov	r5, ip
   12b56:	2d03      	cmp	r5, #3
   12b58:	d100      	bne.n	12b5c <determinant+0x108>
   12b5a:	e13a      	b.n	12dd2 <determinant+0x37e>
					if (i != 0 && j != c)
   12b5c:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
   12b5e:	60c8      	str	r0, [r1, #12]
					if (i != 0 && j != c)
   12b60:	2d03      	cmp	r5, #3
   12b62:	d100      	bne.n	12b66 <determinant+0x112>
   12b64:	e156      	b.n	12e14 <determinant+0x3c0>
						b[m][n] = a[i][j];
   12b66:	0056      	lsls	r6, r2, #1
   12b68:	18b6      	adds	r6, r6, r2
   12b6a:	0076      	lsls	r6, r6, #1
   12b6c:	18f6      	adds	r6, r6, r3
   12b6e:	68e7      	ldr	r7, [r4, #12]
   12b70:	00b6      	lsls	r6, r6, #2
   12b72:	ad24      	add	r5, sp, #144	; 0x90
   12b74:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
   12b76:	454b      	cmp	r3, r9
   12b78:	da00      	bge.n	12b7c <determinant+0x128>
   12b7a:	e12c      	b.n	12dd6 <determinant+0x382>
							n = 0;
   12b7c:	2300      	movs	r3, #0
							m++;
   12b7e:	3201      	adds	r2, #1
   12b80:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   12b82:	4665      	mov	r5, ip
   12b84:	2d04      	cmp	r5, #4
   12b86:	d100      	bne.n	12b8a <determinant+0x136>
   12b88:	e123      	b.n	12dd2 <determinant+0x37e>
					if (i != 0 && j != c)
   12b8a:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
   12b8c:	6108      	str	r0, [r1, #16]
					if (i != 0 && j != c)
   12b8e:	2d04      	cmp	r5, #4
   12b90:	d100      	bne.n	12b94 <determinant+0x140>
   12b92:	e13a      	b.n	12e0a <determinant+0x3b6>
						b[m][n] = a[i][j];
   12b94:	0056      	lsls	r6, r2, #1
   12b96:	18b6      	adds	r6, r6, r2
   12b98:	0076      	lsls	r6, r6, #1
   12b9a:	18f6      	adds	r6, r6, r3
   12b9c:	6927      	ldr	r7, [r4, #16]
   12b9e:	00b6      	lsls	r6, r6, #2
   12ba0:	ad24      	add	r5, sp, #144	; 0x90
   12ba2:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
   12ba4:	454b      	cmp	r3, r9
   12ba6:	da00      	bge.n	12baa <determinant+0x156>
   12ba8:	e10d      	b.n	12dc6 <determinant+0x372>
				for (j = 0 ;j < k; j++)
   12baa:	4665      	mov	r5, ip
							m++;
   12bac:	3201      	adds	r2, #1
   12bae:	b2d2      	uxtb	r2, r2
							n = 0;
   12bb0:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
   12bb2:	2d05      	cmp	r5, #5
   12bb4:	d100      	bne.n	12bb8 <determinant+0x164>
   12bb6:	e10c      	b.n	12dd2 <determinant+0x37e>
					if (i != 0 && j != c)
   12bb8:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
   12bba:	6148      	str	r0, [r1, #20]
					if (i != 0 && j != c)
   12bbc:	2d05      	cmp	r5, #5
   12bbe:	d100      	bne.n	12bc2 <determinant+0x16e>
   12bc0:	e107      	b.n	12dd2 <determinant+0x37e>
						b[m][n] = a[i][j];
   12bc2:	0056      	lsls	r6, r2, #1
   12bc4:	18b6      	adds	r6, r6, r2
   12bc6:	0076      	lsls	r6, r6, #1
   12bc8:	18f6      	adds	r6, r6, r3
   12bca:	6967      	ldr	r7, [r4, #20]
   12bcc:	00b6      	lsls	r6, r6, #2
   12bce:	ad24      	add	r5, sp, #144	; 0x90
   12bd0:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
   12bd2:	454b      	cmp	r3, r9
   12bd4:	da00      	bge.n	12bd8 <determinant+0x184>
   12bd6:	e0f2      	b.n	12dbe <determinant+0x36a>
							n = 0;
   12bd8:	2300      	movs	r3, #0
							m++;
   12bda:	3201      	adds	r2, #1
   12bdc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   12bde:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
   12be0:	3601      	adds	r6, #1
   12be2:	b2f6      	uxtb	r6, r6
   12be4:	3118      	adds	r1, #24
   12be6:	3418      	adds	r4, #24
   12be8:	45b4      	cmp	ip, r6
   12bea:	d01f      	beq.n	12c2c <determinant+0x1d8>
   12bec:	960c      	str	r6, [sp, #48]	; 0x30
					b[i][j] = 0;
   12bee:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
   12bf0:	2e00      	cmp	r6, #0
   12bf2:	d000      	beq.n	12bf6 <determinant+0x1a2>
   12bf4:	e772      	b.n	12adc <determinant+0x88>
				for (j = 0 ;j < k; j++)
   12bf6:	4665      	mov	r5, ip
					b[i][j] = 0;
   12bf8:	6048      	str	r0, [r1, #4]
				for (j = 0 ;j < k; j++)
   12bfa:	2d02      	cmp	r5, #2
   12bfc:	d100      	bne.n	12c00 <determinant+0x1ac>
   12bfe:	e11f      	b.n	12e40 <determinant+0x3ec>
   12c00:	4665      	mov	r5, ip
					b[i][j] = 0;
   12c02:	6088      	str	r0, [r1, #8]
				for (j = 0 ;j < k; j++)
   12c04:	2d03      	cmp	r5, #3
   12c06:	d100      	bne.n	12c0a <determinant+0x1b6>
   12c08:	e11a      	b.n	12e40 <determinant+0x3ec>
   12c0a:	4665      	mov	r5, ip
					b[i][j] = 0;
   12c0c:	60c8      	str	r0, [r1, #12]
				for (j = 0 ;j < k; j++)
   12c0e:	2d04      	cmp	r5, #4
   12c10:	d100      	bne.n	12c14 <determinant+0x1c0>
   12c12:	e115      	b.n	12e40 <determinant+0x3ec>
   12c14:	4665      	mov	r5, ip
					b[i][j] = 0;
   12c16:	6108      	str	r0, [r1, #16]
				for (j = 0 ;j < k; j++)
   12c18:	2d05      	cmp	r5, #5
   12c1a:	d100      	bne.n	12c1e <determinant+0x1ca>
   12c1c:	e110      	b.n	12e40 <determinant+0x3ec>
			for (i = 0;i < k; i++)
   12c1e:	3601      	adds	r6, #1
   12c20:	b2f6      	uxtb	r6, r6
					b[i][j] = 0;
   12c22:	6148      	str	r0, [r1, #20]
   12c24:	3418      	adds	r4, #24
   12c26:	3118      	adds	r1, #24
			for (i = 0;i < k; i++)
   12c28:	45b4      	cmp	ip, r6
   12c2a:	d1df      	bne.n	12bec <determinant+0x198>
			det = det + s * (a[0][c] * determinant(b, k - 1));
   12c2c:	9b06      	ldr	r3, [sp, #24]
   12c2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12c30:	009b      	lsls	r3, r3, #2
   12c32:	58d3      	ldr	r3, [r2, r3]
   12c34:	931d      	str	r3, [sp, #116]	; 0x74
	if (k == 1)
   12c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12c38:	2b01      	cmp	r3, #1
   12c3a:	d100      	bne.n	12c3e <determinant+0x1ea>
   12c3c:	e209      	b.n	13052 <determinant+0x5fe>
   12c3e:	2300      	movs	r3, #0
   12c40:	9308      	str	r3, [sp, #32]
   12c42:	2300      	movs	r3, #0
   12c44:	2700      	movs	r7, #0
   12c46:	930f      	str	r3, [sp, #60]	; 0x3c
   12c48:	23fe      	movs	r3, #254	; 0xfe
   12c4a:	4655      	mov	r5, sl
   12c4c:	46bc      	mov	ip, r7
   12c4e:	059b      	lsls	r3, r3, #22
   12c50:	9319      	str	r3, [sp, #100]	; 0x64
   12c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12c54:	3b02      	subs	r3, #2
   12c56:	9323      	str	r3, [sp, #140]	; 0x8c
   12c58:	2601      	movs	r6, #1
   12c5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   12c5c:	af24      	add	r7, sp, #144	; 0x90
   12c5e:	46a2      	mov	sl, r4
   12c60:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   12c62:	46b0      	mov	r8, r6
   12c64:	a948      	add	r1, sp, #288	; 0x120
   12c66:	2300      	movs	r3, #0
   12c68:	2200      	movs	r2, #0
					b[i][j] = 0;
   12c6a:	2000      	movs	r0, #0
   12c6c:	46a9      	mov	r9, r5
   12c6e:	003e      	movs	r6, r7
   12c70:	46a3      	mov	fp, r4
   12c72:	e081      	b.n	12d78 <determinant+0x324>
					if (i != 0 && j != c)
   12c74:	4664      	mov	r4, ip
							m++;
   12c76:	3201      	adds	r2, #1
   12c78:	b2d2      	uxtb	r2, r2
							n = 0;
   12c7a:	2300      	movs	r3, #0
					b[i][j] = 0;
   12c7c:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
   12c7e:	2c01      	cmp	r4, #1
   12c80:	d100      	bne.n	12c84 <determinant+0x230>
   12c82:	e097      	b.n	12db4 <determinant+0x360>
						b[m][n] = a[i][j];
   12c84:	2790      	movs	r7, #144	; 0x90
   12c86:	0055      	lsls	r5, r2, #1
   12c88:	18ad      	adds	r5, r5, r2
   12c8a:	006d      	lsls	r5, r5, #1
   12c8c:	ac24      	add	r4, sp, #144	; 0x90
   12c8e:	19e4      	adds	r4, r4, r7
   12c90:	18ed      	adds	r5, r5, r3
   12c92:	6877      	ldr	r7, [r6, #4]
   12c94:	00ad      	lsls	r5, r5, #2
   12c96:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
   12c98:	455b      	cmp	r3, fp
   12c9a:	da00      	bge.n	12c9e <determinant+0x24a>
   12c9c:	e0d9      	b.n	12e52 <determinant+0x3fe>
				for (j = 0 ;j < k; j++)
   12c9e:	4654      	mov	r4, sl
							m++;
   12ca0:	3201      	adds	r2, #1
   12ca2:	b2d2      	uxtb	r2, r2
							n = 0;
   12ca4:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
   12ca6:	2c02      	cmp	r4, #2
   12ca8:	d100      	bne.n	12cac <determinant+0x258>
   12caa:	e0d8      	b.n	12e5e <determinant+0x40a>
					if (i != 0 && j != c)
   12cac:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
   12cae:	6088      	str	r0, [r1, #8]
					if (i != 0 && j != c)
   12cb0:	2c02      	cmp	r4, #2
   12cb2:	d101      	bne.n	12cb8 <determinant+0x264>
   12cb4:	f000 fed2 	bl	13a5c <determinant+0x1008>
						b[m][n] = a[i][j];
   12cb8:	2790      	movs	r7, #144	; 0x90
   12cba:	0055      	lsls	r5, r2, #1
   12cbc:	18ad      	adds	r5, r5, r2
   12cbe:	006d      	lsls	r5, r5, #1
   12cc0:	ac24      	add	r4, sp, #144	; 0x90
   12cc2:	19e4      	adds	r4, r4, r7
   12cc4:	18ed      	adds	r5, r5, r3
   12cc6:	68b7      	ldr	r7, [r6, #8]
   12cc8:	00ad      	lsls	r5, r5, #2
   12cca:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
   12ccc:	455b      	cmp	r3, fp
   12cce:	da00      	bge.n	12cd2 <determinant+0x27e>
   12cd0:	e197      	b.n	13002 <determinant+0x5ae>
							n = 0;
   12cd2:	2300      	movs	r3, #0
							m++;
   12cd4:	3201      	adds	r2, #1
   12cd6:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   12cd8:	4654      	mov	r4, sl
   12cda:	2c03      	cmp	r4, #3
   12cdc:	d043      	beq.n	12d66 <determinant+0x312>
					if (i != 0 && j != c)
   12cde:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
   12ce0:	60c8      	str	r0, [r1, #12]
					if (i != 0 && j != c)
   12ce2:	2c03      	cmp	r4, #3
   12ce4:	d100      	bne.n	12ce8 <determinant+0x294>
   12ce6:	e1ae      	b.n	13046 <determinant+0x5f2>
						b[m][n] = a[i][j];
   12ce8:	2790      	movs	r7, #144	; 0x90
   12cea:	0055      	lsls	r5, r2, #1
   12cec:	18ad      	adds	r5, r5, r2
   12cee:	006d      	lsls	r5, r5, #1
   12cf0:	ac24      	add	r4, sp, #144	; 0x90
   12cf2:	19e4      	adds	r4, r4, r7
   12cf4:	18ed      	adds	r5, r5, r3
   12cf6:	68f7      	ldr	r7, [r6, #12]
   12cf8:	00ad      	lsls	r5, r5, #2
   12cfa:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
   12cfc:	455b      	cmp	r3, fp
   12cfe:	da00      	bge.n	12d02 <determinant+0x2ae>
   12d00:	e19e      	b.n	13040 <determinant+0x5ec>
							n = 0;
   12d02:	2300      	movs	r3, #0
							m++;
   12d04:	3201      	adds	r2, #1
   12d06:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   12d08:	4654      	mov	r4, sl
   12d0a:	2c04      	cmp	r4, #4
   12d0c:	d02b      	beq.n	12d66 <determinant+0x312>
					if (i != 0 && j != c)
   12d0e:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
   12d10:	6108      	str	r0, [r1, #16]
					if (i != 0 && j != c)
   12d12:	2c04      	cmp	r4, #4
   12d14:	d100      	bne.n	12d18 <determinant+0x2c4>
   12d16:	e1b9      	b.n	1308c <determinant+0x638>
						b[m][n] = a[i][j];
   12d18:	2790      	movs	r7, #144	; 0x90
   12d1a:	0055      	lsls	r5, r2, #1
   12d1c:	18ad      	adds	r5, r5, r2
   12d1e:	006d      	lsls	r5, r5, #1
   12d20:	ac24      	add	r4, sp, #144	; 0x90
   12d22:	19e4      	adds	r4, r4, r7
   12d24:	18ed      	adds	r5, r5, r3
   12d26:	6937      	ldr	r7, [r6, #16]
   12d28:	00ad      	lsls	r5, r5, #2
   12d2a:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
   12d2c:	455b      	cmp	r3, fp
   12d2e:	da00      	bge.n	12d32 <determinant+0x2de>
   12d30:	e183      	b.n	1303a <determinant+0x5e6>
							n = 0;
   12d32:	2300      	movs	r3, #0
							m++;
   12d34:	3201      	adds	r2, #1
   12d36:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   12d38:	4654      	mov	r4, sl
   12d3a:	2c05      	cmp	r4, #5
   12d3c:	d013      	beq.n	12d66 <determinant+0x312>
					if (i != 0 && j != c)
   12d3e:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
   12d40:	6148      	str	r0, [r1, #20]
					if (i != 0 && j != c)
   12d42:	2c05      	cmp	r4, #5
   12d44:	d00f      	beq.n	12d66 <determinant+0x312>
						b[m][n] = a[i][j];
   12d46:	2790      	movs	r7, #144	; 0x90
   12d48:	0055      	lsls	r5, r2, #1
   12d4a:	18ad      	adds	r5, r5, r2
   12d4c:	006d      	lsls	r5, r5, #1
   12d4e:	ac24      	add	r4, sp, #144	; 0x90
   12d50:	19e4      	adds	r4, r4, r7
   12d52:	18ed      	adds	r5, r5, r3
   12d54:	6977      	ldr	r7, [r6, #20]
   12d56:	00ad      	lsls	r5, r5, #2
   12d58:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
   12d5a:	455b      	cmp	r3, fp
   12d5c:	da00      	bge.n	12d60 <determinant+0x30c>
   12d5e:	e169      	b.n	13034 <determinant+0x5e0>
							n = 0;
   12d60:	2300      	movs	r3, #0
							m++;
   12d62:	3201      	adds	r2, #1
   12d64:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
   12d66:	45c2      	cmp	sl, r8
   12d68:	d800      	bhi.n	12d6c <determinant+0x318>
   12d6a:	e078      	b.n	12e5e <determinant+0x40a>
   12d6c:	4645      	mov	r5, r8
   12d6e:	3501      	adds	r5, #1
   12d70:	b2ed      	uxtb	r5, r5
   12d72:	46a8      	mov	r8, r5
   12d74:	3118      	adds	r1, #24
   12d76:	3618      	adds	r6, #24
					if (i != 0 && j != c)
   12d78:	4645      	mov	r5, r8
					b[i][j] = 0;
   12d7a:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
   12d7c:	2d01      	cmp	r5, #1
   12d7e:	d100      	bne.n	12d82 <determinant+0x32e>
   12d80:	e142      	b.n	13008 <determinant+0x5b4>
   12d82:	9d08      	ldr	r5, [sp, #32]
   12d84:	2d00      	cmp	r5, #0
   12d86:	d101      	bne.n	12d8c <determinant+0x338>
   12d88:	f000 fe70 	bl	13a6c <determinant+0x1018>
						b[m][n] = a[i][j];
   12d8c:	2490      	movs	r4, #144	; 0x90
   12d8e:	0055      	lsls	r5, r2, #1
   12d90:	18ad      	adds	r5, r5, r2
   12d92:	006d      	lsls	r5, r5, #1
   12d94:	af24      	add	r7, sp, #144	; 0x90
   12d96:	193f      	adds	r7, r7, r4
   12d98:	18ed      	adds	r5, r5, r3
   12d9a:	6834      	ldr	r4, [r6, #0]
   12d9c:	00ad      	lsls	r5, r5, #2
   12d9e:	517c      	str	r4, [r7, r5]
						if (n < (k - 2))
   12da0:	455b      	cmp	r3, fp
   12da2:	db00      	blt.n	12da6 <determinant+0x352>
   12da4:	e766      	b.n	12c74 <determinant+0x220>
					if (i != 0 && j != c)
   12da6:	4664      	mov	r4, ip
						n++;
   12da8:	3301      	adds	r3, #1
   12daa:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   12dac:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
   12dae:	2c01      	cmp	r4, #1
   12db0:	d000      	beq.n	12db4 <determinant+0x360>
   12db2:	e767      	b.n	12c84 <determinant+0x230>
				for (j = 0 ;j < k; j++)
   12db4:	4654      	mov	r4, sl
   12db6:	2c02      	cmp	r4, #2
   12db8:	d051      	beq.n	12e5e <determinant+0x40a>
					b[i][j] = 0;
   12dba:	6088      	str	r0, [r1, #8]
   12dbc:	e77c      	b.n	12cb8 <determinant+0x264>
						n++;
   12dbe:	3301      	adds	r3, #1
   12dc0:	b2db      	uxtb	r3, r3
   12dc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   12dc4:	e70c      	b.n	12be0 <determinant+0x18c>
				for (j = 0 ;j < k; j++)
   12dc6:	4665      	mov	r5, ip
						n++;
   12dc8:	3301      	adds	r3, #1
   12dca:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
   12dcc:	2d05      	cmp	r5, #5
   12dce:	d000      	beq.n	12dd2 <determinant+0x37e>
   12dd0:	e6f2      	b.n	12bb8 <determinant+0x164>
   12dd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   12dd4:	e704      	b.n	12be0 <determinant+0x18c>
						n++;
   12dd6:	3301      	adds	r3, #1
   12dd8:	b2db      	uxtb	r3, r3
   12dda:	e6d2      	b.n	12b82 <determinant+0x12e>
   12ddc:	3301      	adds	r3, #1
   12dde:	b2db      	uxtb	r3, r3
   12de0:	e6b8      	b.n	12b54 <determinant+0x100>
   12de2:	46c0      	nop			; (mov r8, r8)
   12de4:	fffffc0c 	.word	0xfffffc0c
   12de8:	3301      	adds	r3, #1
   12dea:	b2db      	uxtb	r3, r3
   12dec:	e69b      	b.n	12b26 <determinant+0xd2>
					if (i != 0 && j != c)
   12dee:	4645      	mov	r5, r8
						n++;
   12df0:	3301      	adds	r3, #1
   12df2:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
   12df4:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
   12df6:	2d01      	cmp	r5, #1
   12df8:	d000      	beq.n	12dfc <determinant+0x3a8>
   12dfa:	e686      	b.n	12b0a <determinant+0xb6>
				for (j = 0 ;j < k; j++)
   12dfc:	4665      	mov	r5, ip
   12dfe:	2d02      	cmp	r5, #2
   12e00:	d0e7      	beq.n	12dd2 <determinant+0x37e>
					b[i][j] = 0;
   12e02:	6088      	str	r0, [r1, #8]
   12e04:	e698      	b.n	12b38 <determinant+0xe4>
   12e06:	6048      	str	r0, [r1, #4]
   12e08:	e67f      	b.n	12b0a <determinant+0xb6>
				for (j = 0 ;j < k; j++)
   12e0a:	4665      	mov	r5, ip
   12e0c:	2d05      	cmp	r5, #5
   12e0e:	d0e0      	beq.n	12dd2 <determinant+0x37e>
					b[i][j] = 0;
   12e10:	6148      	str	r0, [r1, #20]
   12e12:	e6d6      	b.n	12bc2 <determinant+0x16e>
				for (j = 0 ;j < k; j++)
   12e14:	4665      	mov	r5, ip
   12e16:	2d04      	cmp	r5, #4
   12e18:	d0db      	beq.n	12dd2 <determinant+0x37e>
					b[i][j] = 0;
   12e1a:	6108      	str	r0, [r1, #16]
   12e1c:	e6ba      	b.n	12b94 <determinant+0x140>
				for (j = 0 ;j < k; j++)
   12e1e:	4665      	mov	r5, ip
   12e20:	2d03      	cmp	r5, #3
   12e22:	d0d6      	beq.n	12dd2 <determinant+0x37e>
					b[i][j] = 0;
   12e24:	60c8      	str	r0, [r1, #12]
   12e26:	e69e      	b.n	12b66 <determinant+0x112>
		for (c = 0; c < k; c++)
   12e28:	2300      	movs	r3, #0
   12e2a:	930d      	str	r3, [sp, #52]	; 0x34
   12e2c:	1c18      	adds	r0, r3, #0
			s = -1 * s;
		}
	}
	
	return (det);
}
   12e2e:	23fd      	movs	r3, #253	; 0xfd
   12e30:	009b      	lsls	r3, r3, #2
   12e32:	449d      	add	sp, r3
   12e34:	bc3c      	pop	{r2, r3, r4, r5}
   12e36:	4690      	mov	r8, r2
   12e38:	4699      	mov	r9, r3
   12e3a:	46a2      	mov	sl, r4
   12e3c:	46ab      	mov	fp, r5
   12e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0;i < k; i++)
   12e40:	2601      	movs	r6, #1
   12e42:	3118      	adds	r1, #24
   12e44:	3418      	adds	r4, #24
   12e46:	960c      	str	r6, [sp, #48]	; 0x30
   12e48:	e6d1      	b.n	12bee <determinant+0x19a>
		return (a[0][0]);
   12e4a:	6803      	ldr	r3, [r0, #0]
   12e4c:	930d      	str	r3, [sp, #52]	; 0x34
   12e4e:	1c18      	adds	r0, r3, #0
   12e50:	e7ed      	b.n	12e2e <determinant+0x3da>
				for (j = 0 ;j < k; j++)
   12e52:	4654      	mov	r4, sl
						n++;
   12e54:	3301      	adds	r3, #1
   12e56:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
   12e58:	2c02      	cmp	r4, #2
   12e5a:	d000      	beq.n	12e5e <determinant+0x40a>
   12e5c:	e726      	b.n	12cac <determinant+0x258>
			det = det + s * (a[0][c] * determinant(b, k - 1));
   12e5e:	9b08      	ldr	r3, [sp, #32]
   12e60:	aa24      	add	r2, sp, #144	; 0x90
   12e62:	009b      	lsls	r3, r3, #2
   12e64:	58d3      	ldr	r3, [r2, r3]
   12e66:	464d      	mov	r5, r9
   12e68:	931e      	str	r3, [sp, #120]	; 0x78
	if (k == 1)
   12e6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12e6c:	2b01      	cmp	r3, #1
   12e6e:	d101      	bne.n	12e74 <determinant+0x420>
   12e70:	f000 fdf0 	bl	13a54 <determinant+0x1000>
   12e74:	2300      	movs	r3, #0
   12e76:	9309      	str	r3, [sp, #36]	; 0x24
   12e78:	2300      	movs	r3, #0
   12e7a:	9310      	str	r3, [sp, #64]	; 0x40
   12e7c:	23fe      	movs	r3, #254	; 0xfe
   12e7e:	059b      	lsls	r3, r3, #22
   12e80:	931a      	str	r3, [sp, #104]	; 0x68
   12e82:	2300      	movs	r3, #0
   12e84:	469c      	mov	ip, r3
					b[i][j] = 0;
   12e86:	2000      	movs	r0, #0
							n = 0;
   12e88:	2701      	movs	r7, #1
   12e8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
					b[i][j] = 0;
   12e8c:	4681      	mov	r9, r0
   12e8e:	1ea0      	subs	r0, r4, #2
   12e90:	4680      	mov	r8, r0
   12e92:	0038      	movs	r0, r7
							n = 0;
   12e94:	ae48      	add	r6, sp, #288	; 0x120
   12e96:	a96c      	add	r1, sp, #432	; 0x1b0
   12e98:	2300      	movs	r3, #0
   12e9a:	2200      	movs	r2, #0
   12e9c:	46aa      	mov	sl, r5
   12e9e:	0037      	movs	r7, r6
   12ea0:	4683      	mov	fp, r0
   12ea2:	e088      	b.n	12fb6 <determinant+0x562>
					b[i][j] = 0;
   12ea4:	4648      	mov	r0, r9
   12ea6:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
   12ea8:	4660      	mov	r0, ip
							m++;
   12eaa:	3201      	adds	r2, #1
   12eac:	b2d2      	uxtb	r2, r2
							n = 0;
   12eae:	2300      	movs	r3, #0
					if (i != 0 && j != c)
   12eb0:	2801      	cmp	r0, #1
   12eb2:	d100      	bne.n	12eb6 <determinant+0x462>
   12eb4:	e0a0      	b.n	12ff8 <determinant+0x5a4>
						b[m][n] = a[i][j];
   12eb6:	2690      	movs	r6, #144	; 0x90
   12eb8:	0055      	lsls	r5, r2, #1
   12eba:	18ad      	adds	r5, r5, r2
   12ebc:	0076      	lsls	r6, r6, #1
   12ebe:	006d      	lsls	r5, r5, #1
   12ec0:	a824      	add	r0, sp, #144	; 0x90
   12ec2:	1980      	adds	r0, r0, r6
   12ec4:	18ed      	adds	r5, r5, r3
   12ec6:	687e      	ldr	r6, [r7, #4]
   12ec8:	00ad      	lsls	r5, r5, #2
   12eca:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
   12ecc:	4543      	cmp	r3, r8
   12ece:	da00      	bge.n	12ed2 <determinant+0x47e>
   12ed0:	e0e5      	b.n	1309e <determinant+0x64a>
							m++;
   12ed2:	3201      	adds	r2, #1
   12ed4:	b2d2      	uxtb	r2, r2
							n = 0;
   12ed6:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
   12ed8:	2c02      	cmp	r4, #2
   12eda:	d100      	bne.n	12ede <determinant+0x48a>
   12edc:	e0e4      	b.n	130a8 <determinant+0x654>
					b[i][j] = 0;
   12ede:	4648      	mov	r0, r9
   12ee0:	6088      	str	r0, [r1, #8]
					if (i != 0 && j != c)
   12ee2:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ee4:	2802      	cmp	r0, #2
   12ee6:	d101      	bne.n	12eec <determinant+0x498>
   12ee8:	f000 fdd3 	bl	13a92 <determinant+0x103e>
						b[m][n] = a[i][j];
   12eec:	2690      	movs	r6, #144	; 0x90
   12eee:	0055      	lsls	r5, r2, #1
   12ef0:	18ad      	adds	r5, r5, r2
   12ef2:	0076      	lsls	r6, r6, #1
   12ef4:	006d      	lsls	r5, r5, #1
   12ef6:	a824      	add	r0, sp, #144	; 0x90
   12ef8:	1980      	adds	r0, r0, r6
   12efa:	18ed      	adds	r5, r5, r3
   12efc:	68be      	ldr	r6, [r7, #8]
   12efe:	00ad      	lsls	r5, r5, #2
   12f00:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
   12f02:	4543      	cmp	r3, r8
   12f04:	da00      	bge.n	12f08 <determinant+0x4b4>
   12f06:	e0c7      	b.n	13098 <determinant+0x644>
							n = 0;
   12f08:	2300      	movs	r3, #0
							m++;
   12f0a:	3201      	adds	r2, #1
   12f0c:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   12f0e:	2c03      	cmp	r4, #3
   12f10:	d049      	beq.n	12fa6 <determinant+0x552>
					b[i][j] = 0;
   12f12:	4648      	mov	r0, r9
   12f14:	60c8      	str	r0, [r1, #12]
					if (i != 0 && j != c)
   12f16:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f18:	2803      	cmp	r0, #3
   12f1a:	d101      	bne.n	12f20 <determinant+0x4cc>
   12f1c:	f000 fdb1 	bl	13a82 <determinant+0x102e>
						b[m][n] = a[i][j];
   12f20:	2690      	movs	r6, #144	; 0x90
   12f22:	0055      	lsls	r5, r2, #1
   12f24:	18ad      	adds	r5, r5, r2
   12f26:	0076      	lsls	r6, r6, #1
   12f28:	006d      	lsls	r5, r5, #1
   12f2a:	a824      	add	r0, sp, #144	; 0x90
   12f2c:	1980      	adds	r0, r0, r6
   12f2e:	18ed      	adds	r5, r5, r3
   12f30:	68fe      	ldr	r6, [r7, #12]
   12f32:	00ad      	lsls	r5, r5, #2
   12f34:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
   12f36:	4543      	cmp	r3, r8
   12f38:	da00      	bge.n	12f3c <determinant+0x4e8>
   12f3a:	e1d9      	b.n	132f0 <determinant+0x89c>
							n = 0;
   12f3c:	2300      	movs	r3, #0
							m++;
   12f3e:	3201      	adds	r2, #1
   12f40:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   12f42:	2c04      	cmp	r4, #4
   12f44:	d02f      	beq.n	12fa6 <determinant+0x552>
					b[i][j] = 0;
   12f46:	4648      	mov	r0, r9
   12f48:	6108      	str	r0, [r1, #16]
					if (i != 0 && j != c)
   12f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f4c:	2804      	cmp	r0, #4
   12f4e:	d101      	bne.n	12f54 <determinant+0x500>
   12f50:	f000 fd8f 	bl	13a72 <determinant+0x101e>
						b[m][n] = a[i][j];
   12f54:	2690      	movs	r6, #144	; 0x90
   12f56:	0055      	lsls	r5, r2, #1
   12f58:	18ad      	adds	r5, r5, r2
   12f5a:	0076      	lsls	r6, r6, #1
   12f5c:	006d      	lsls	r5, r5, #1
   12f5e:	a824      	add	r0, sp, #144	; 0x90
   12f60:	1980      	adds	r0, r0, r6
   12f62:	18ed      	adds	r5, r5, r3
   12f64:	693e      	ldr	r6, [r7, #16]
   12f66:	00ad      	lsls	r5, r5, #2
   12f68:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
   12f6a:	4543      	cmp	r3, r8
   12f6c:	da00      	bge.n	12f70 <determinant+0x51c>
   12f6e:	e1bc      	b.n	132ea <determinant+0x896>
							n = 0;
   12f70:	2300      	movs	r3, #0
							m++;
   12f72:	3201      	adds	r2, #1
   12f74:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   12f76:	2c05      	cmp	r4, #5
   12f78:	d015      	beq.n	12fa6 <determinant+0x552>
					b[i][j] = 0;
   12f7a:	4648      	mov	r0, r9
   12f7c:	6148      	str	r0, [r1, #20]
					if (i != 0 && j != c)
   12f7e:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f80:	2805      	cmp	r0, #5
   12f82:	d010      	beq.n	12fa6 <determinant+0x552>
						b[m][n] = a[i][j];
   12f84:	2690      	movs	r6, #144	; 0x90
   12f86:	0055      	lsls	r5, r2, #1
   12f88:	18ad      	adds	r5, r5, r2
   12f8a:	0076      	lsls	r6, r6, #1
   12f8c:	006d      	lsls	r5, r5, #1
   12f8e:	a824      	add	r0, sp, #144	; 0x90
   12f90:	1980      	adds	r0, r0, r6
   12f92:	18ed      	adds	r5, r5, r3
   12f94:	697e      	ldr	r6, [r7, #20]
   12f96:	00ad      	lsls	r5, r5, #2
   12f98:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
   12f9a:	4543      	cmp	r3, r8
   12f9c:	da00      	bge.n	12fa0 <determinant+0x54c>
   12f9e:	e1a1      	b.n	132e4 <determinant+0x890>
							n = 0;
   12fa0:	2300      	movs	r3, #0
							m++;
   12fa2:	3201      	adds	r2, #1
   12fa4:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
   12fa6:	455c      	cmp	r4, fp
   12fa8:	d97e      	bls.n	130a8 <determinant+0x654>
   12faa:	465e      	mov	r6, fp
   12fac:	3601      	adds	r6, #1
   12fae:	b2f0      	uxtb	r0, r6
   12fb0:	4683      	mov	fp, r0
   12fb2:	3118      	adds	r1, #24
   12fb4:	3718      	adds	r7, #24
					b[i][j] = 0;
   12fb6:	4648      	mov	r0, r9
   12fb8:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
   12fba:	4658      	mov	r0, fp
   12fbc:	2801      	cmp	r0, #1
   12fbe:	d100      	bne.n	12fc2 <determinant+0x56e>
   12fc0:	e199      	b.n	132f6 <determinant+0x8a2>
   12fc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   12fc4:	2d00      	cmp	r5, #0
   12fc6:	d101      	bne.n	12fcc <determinant+0x578>
   12fc8:	f000 fd73 	bl	13ab2 <determinant+0x105e>
						b[m][n] = a[i][j];
   12fcc:	2090      	movs	r0, #144	; 0x90
   12fce:	0055      	lsls	r5, r2, #1
   12fd0:	18ad      	adds	r5, r5, r2
   12fd2:	0040      	lsls	r0, r0, #1
   12fd4:	006d      	lsls	r5, r5, #1
   12fd6:	ae24      	add	r6, sp, #144	; 0x90
   12fd8:	1836      	adds	r6, r6, r0
   12fda:	18ed      	adds	r5, r5, r3
   12fdc:	6838      	ldr	r0, [r7, #0]
   12fde:	00ad      	lsls	r5, r5, #2
   12fe0:	5170      	str	r0, [r6, r5]
						if (n < (k - 2))
   12fe2:	4543      	cmp	r3, r8
   12fe4:	db00      	blt.n	12fe8 <determinant+0x594>
   12fe6:	e75d      	b.n	12ea4 <determinant+0x450>
					b[i][j] = 0;
   12fe8:	4648      	mov	r0, r9
   12fea:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
   12fec:	4660      	mov	r0, ip
						n++;
   12fee:	3301      	adds	r3, #1
   12ff0:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   12ff2:	2801      	cmp	r0, #1
   12ff4:	d000      	beq.n	12ff8 <determinant+0x5a4>
   12ff6:	e75e      	b.n	12eb6 <determinant+0x462>
				for (j = 0 ;j < k; j++)
   12ff8:	2c02      	cmp	r4, #2
   12ffa:	d055      	beq.n	130a8 <determinant+0x654>
					b[i][j] = 0;
   12ffc:	4648      	mov	r0, r9
   12ffe:	6088      	str	r0, [r1, #8]
   13000:	e774      	b.n	12eec <determinant+0x498>
						n++;
   13002:	3301      	adds	r3, #1
   13004:	b2db      	uxtb	r3, r3
   13006:	e667      	b.n	12cd8 <determinant+0x284>
				for (j = 0 ;j < k; j++)
   13008:	4654      	mov	r4, sl
					b[i][j] = 0;
   1300a:	6048      	str	r0, [r1, #4]
				for (j = 0 ;j < k; j++)
   1300c:	2c02      	cmp	r4, #2
   1300e:	d100      	bne.n	13012 <determinant+0x5be>
   13010:	e6ac      	b.n	12d6c <determinant+0x318>
   13012:	4654      	mov	r4, sl
					b[i][j] = 0;
   13014:	6088      	str	r0, [r1, #8]
				for (j = 0 ;j < k; j++)
   13016:	2c03      	cmp	r4, #3
   13018:	d100      	bne.n	1301c <determinant+0x5c8>
   1301a:	e6a7      	b.n	12d6c <determinant+0x318>
   1301c:	4654      	mov	r4, sl
					b[i][j] = 0;
   1301e:	60c8      	str	r0, [r1, #12]
				for (j = 0 ;j < k; j++)
   13020:	2c04      	cmp	r4, #4
   13022:	d100      	bne.n	13026 <determinant+0x5d2>
   13024:	e6a2      	b.n	12d6c <determinant+0x318>
   13026:	4654      	mov	r4, sl
					b[i][j] = 0;
   13028:	6108      	str	r0, [r1, #16]
				for (j = 0 ;j < k; j++)
   1302a:	2c05      	cmp	r4, #5
   1302c:	d100      	bne.n	13030 <determinant+0x5dc>
   1302e:	e69d      	b.n	12d6c <determinant+0x318>
					b[i][j] = 0;
   13030:	6148      	str	r0, [r1, #20]
   13032:	e69b      	b.n	12d6c <determinant+0x318>
						n++;
   13034:	3301      	adds	r3, #1
   13036:	b2db      	uxtb	r3, r3
   13038:	e695      	b.n	12d66 <determinant+0x312>
   1303a:	3301      	adds	r3, #1
   1303c:	b2db      	uxtb	r3, r3
   1303e:	e67b      	b.n	12d38 <determinant+0x2e4>
   13040:	3301      	adds	r3, #1
   13042:	b2db      	uxtb	r3, r3
   13044:	e660      	b.n	12d08 <determinant+0x2b4>
				for (j = 0 ;j < k; j++)
   13046:	4654      	mov	r4, sl
   13048:	2c04      	cmp	r4, #4
   1304a:	d100      	bne.n	1304e <determinant+0x5fa>
   1304c:	e68b      	b.n	12d66 <determinant+0x312>
					b[i][j] = 0;
   1304e:	6108      	str	r0, [r1, #16]
   13050:	e662      	b.n	12d18 <determinant+0x2c4>
		return (a[0][0]);
   13052:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13054:	930f      	str	r3, [sp, #60]	; 0x3c
   13056:	1c19      	adds	r1, r3, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
   13058:	4bcb      	ldr	r3, [pc, #812]	; (13388 <determinant+0x934>)
   1305a:	981d      	ldr	r0, [sp, #116]	; 0x74
   1305c:	4798      	blx	r3
   1305e:	9c18      	ldr	r4, [sp, #96]	; 0x60
   13060:	4bc9      	ldr	r3, [pc, #804]	; (13388 <determinant+0x934>)
   13062:	1c21      	adds	r1, r4, #0
   13064:	4798      	blx	r3
   13066:	4bc9      	ldr	r3, [pc, #804]	; (1338c <determinant+0x938>)
   13068:	1c01      	adds	r1, r0, #0
   1306a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1306c:	4798      	blx	r3
			s = -1 * s;
   1306e:	2280      	movs	r2, #128	; 0x80
   13070:	0612      	lsls	r2, r2, #24
   13072:	4694      	mov	ip, r2
   13074:	0023      	movs	r3, r4
   13076:	4463      	add	r3, ip
   13078:	9318      	str	r3, [sp, #96]	; 0x60
   1307a:	9b06      	ldr	r3, [sp, #24]
		for (c = 0; c < k; c++)
   1307c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1307e:	3301      	adds	r3, #1
			det = det + s * (a[0][c] * determinant(b, k - 1));
   13080:	900d      	str	r0, [sp, #52]	; 0x34
   13082:	9306      	str	r3, [sp, #24]
		for (c = 0; c < k; c++)
   13084:	429a      	cmp	r2, r3
   13086:	d000      	beq.n	1308a <determinant+0x636>
   13088:	e515      	b.n	12ab6 <determinant+0x62>
   1308a:	e6d0      	b.n	12e2e <determinant+0x3da>
				for (j = 0 ;j < k; j++)
   1308c:	4654      	mov	r4, sl
   1308e:	2c05      	cmp	r4, #5
   13090:	d100      	bne.n	13094 <determinant+0x640>
   13092:	e668      	b.n	12d66 <determinant+0x312>
					b[i][j] = 0;
   13094:	6148      	str	r0, [r1, #20]
   13096:	e656      	b.n	12d46 <determinant+0x2f2>
						n++;
   13098:	3301      	adds	r3, #1
   1309a:	b2db      	uxtb	r3, r3
   1309c:	e737      	b.n	12f0e <determinant+0x4ba>
   1309e:	3301      	adds	r3, #1
   130a0:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
   130a2:	2c02      	cmp	r4, #2
   130a4:	d000      	beq.n	130a8 <determinant+0x654>
   130a6:	e71a      	b.n	12ede <determinant+0x48a>
			det = det + s * (a[0][c] * determinant(b, k - 1));
   130a8:	2190      	movs	r1, #144	; 0x90
   130aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   130ac:	aa24      	add	r2, sp, #144	; 0x90
   130ae:	009b      	lsls	r3, r3, #2
   130b0:	1852      	adds	r2, r2, r1
   130b2:	58d3      	ldr	r3, [r2, r3]
   130b4:	4655      	mov	r5, sl
   130b6:	931f      	str	r3, [sp, #124]	; 0x7c
	if (k == 1)
   130b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   130ba:	2b01      	cmp	r3, #1
   130bc:	d101      	bne.n	130c2 <determinant+0x66e>
   130be:	f000 fd2a 	bl	13b16 <determinant+0x10c2>
   130c2:	2300      	movs	r3, #0
   130c4:	9313      	str	r3, [sp, #76]	; 0x4c
   130c6:	2300      	movs	r3, #0
   130c8:	9311      	str	r3, [sp, #68]	; 0x44
   130ca:	23fe      	movs	r3, #254	; 0xfe
   130cc:	059b      	lsls	r3, r3, #22
   130ce:	931b      	str	r3, [sp, #108]	; 0x6c
   130d0:	2300      	movs	r3, #0
   130d2:	46aa      	mov	sl, r5
   130d4:	469b      	mov	fp, r3
   130d6:	22ff      	movs	r2, #255	; 0xff
   130d8:	4694      	mov	ip, r2
   130da:	9a15      	ldr	r2, [sp, #84]	; 0x54
							n = 0;
   130dc:	2301      	movs	r3, #1
   130de:	1e96      	subs	r6, r2, #2
   130e0:	9200      	str	r2, [sp, #0]
   130e2:	4652      	mov	r2, sl
   130e4:	9204      	str	r2, [sp, #16]
   130e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   130e8:	4699      	mov	r9, r3
   130ea:	4692      	mov	sl, r2
   130ec:	465a      	mov	r2, fp
   130ee:	2000      	movs	r0, #0
   130f0:	2300      	movs	r3, #0
   130f2:	2100      	movs	r1, #0
					b[i][j] = 0;
   130f4:	2500      	movs	r5, #0
   130f6:	9203      	str	r2, [sp, #12]
   130f8:	46b0      	mov	r8, r6
   130fa:	e0c9      	b.n	13290 <determinant+0x83c>
							n = 0;
   130fc:	2300      	movs	r3, #0
							m++;
   130fe:	3101      	adds	r1, #1
   13100:	b2c9      	uxtb	r1, r1
					b[i][j] = 0;
   13102:	9c01      	ldr	r4, [sp, #4]
   13104:	1826      	adds	r6, r4, r0
   13106:	ac90      	add	r4, sp, #576	; 0x240
   13108:	46a3      	mov	fp, r4
   1310a:	00f6      	lsls	r6, r6, #3
					if (i != 0 && j != c)
   1310c:	9c03      	ldr	r4, [sp, #12]
					b[i][j] = 0;
   1310e:	445e      	add	r6, fp
   13110:	6075      	str	r5, [r6, #4]
					if (i != 0 && j != c)
   13112:	4693      	mov	fp, r2
   13114:	2c01      	cmp	r4, #1
   13116:	d101      	bne.n	1311c <determinant+0x6c8>
   13118:	f000 fcc3 	bl	13aa2 <determinant+0x104e>
						b[m][n] = a[i][j];
   1311c:	465c      	mov	r4, fp
   1311e:	26d8      	movs	r6, #216	; 0xd8
   13120:	6864      	ldr	r4, [r4, #4]
   13122:	004a      	lsls	r2, r1, #1
   13124:	1852      	adds	r2, r2, r1
   13126:	9402      	str	r4, [sp, #8]
   13128:	0076      	lsls	r6, r6, #1
   1312a:	0052      	lsls	r2, r2, #1
   1312c:	ac24      	add	r4, sp, #144	; 0x90
   1312e:	19a4      	adds	r4, r4, r6
   13130:	18d2      	adds	r2, r2, r3
   13132:	9e02      	ldr	r6, [sp, #8]
   13134:	0092      	lsls	r2, r2, #2
   13136:	50a6      	str	r6, [r4, r2]
						if (n < (k - 2))
   13138:	4543      	cmp	r3, r8
   1313a:	da00      	bge.n	1313e <determinant+0x6ea>
   1313c:	e0f2      	b.n	13324 <determinant+0x8d0>
							n = 0;
   1313e:	2300      	movs	r3, #0
							m++;
   13140:	3101      	adds	r1, #1
   13142:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
   13144:	9a00      	ldr	r2, [sp, #0]
   13146:	2a02      	cmp	r2, #2
   13148:	d100      	bne.n	1314c <determinant+0x6f8>
   1314a:	e099      	b.n	13280 <determinant+0x82c>
					b[i][j] = 0;
   1314c:	ac90      	add	r4, sp, #576	; 0x240
   1314e:	46a3      	mov	fp, r4
					if (i != 0 && j != c)
   13150:	4654      	mov	r4, sl
					b[i][j] = 0;
   13152:	9a01      	ldr	r2, [sp, #4]
   13154:	1812      	adds	r2, r2, r0
   13156:	00d2      	lsls	r2, r2, #3
   13158:	445a      	add	r2, fp
   1315a:	6095      	str	r5, [r2, #8]
					if (i != 0 && j != c)
   1315c:	2c02      	cmp	r4, #2
   1315e:	d101      	bne.n	13164 <determinant+0x710>
   13160:	f000 fcc3 	bl	13aea <determinant+0x1096>
   13164:	4666      	mov	r6, ip
   13166:	ac6c      	add	r4, sp, #432	; 0x1b0
   13168:	46a3      	mov	fp, r4
   1316a:	4006      	ands	r6, r0
   1316c:	0072      	lsls	r2, r6, #1
   1316e:	1992      	adds	r2, r2, r6
   13170:	00d2      	lsls	r2, r2, #3
   13172:	445a      	add	r2, fp
						b[m][n] = a[i][j];
   13174:	24d8      	movs	r4, #216	; 0xd8
   13176:	6892      	ldr	r2, [r2, #8]
   13178:	004e      	lsls	r6, r1, #1
   1317a:	1876      	adds	r6, r6, r1
   1317c:	9202      	str	r2, [sp, #8]
   1317e:	0064      	lsls	r4, r4, #1
   13180:	0076      	lsls	r6, r6, #1
   13182:	aa24      	add	r2, sp, #144	; 0x90
   13184:	1912      	adds	r2, r2, r4
   13186:	18f6      	adds	r6, r6, r3
   13188:	9c02      	ldr	r4, [sp, #8]
   1318a:	00b6      	lsls	r6, r6, #2
   1318c:	5194      	str	r4, [r2, r6]
						if (n < (k - 2))
   1318e:	4543      	cmp	r3, r8
   13190:	da00      	bge.n	13194 <determinant+0x740>
   13192:	e1f7      	b.n	13584 <determinant+0xb30>
							n = 0;
   13194:	2300      	movs	r3, #0
							m++;
   13196:	3101      	adds	r1, #1
   13198:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
   1319a:	9a00      	ldr	r2, [sp, #0]
   1319c:	2a03      	cmp	r2, #3
   1319e:	d06f      	beq.n	13280 <determinant+0x82c>
					b[i][j] = 0;
   131a0:	ac90      	add	r4, sp, #576	; 0x240
   131a2:	46a3      	mov	fp, r4
					if (i != 0 && j != c)
   131a4:	4654      	mov	r4, sl
					b[i][j] = 0;
   131a6:	9a01      	ldr	r2, [sp, #4]
   131a8:	1812      	adds	r2, r2, r0
   131aa:	00d2      	lsls	r2, r2, #3
   131ac:	445a      	add	r2, fp
   131ae:	60d5      	str	r5, [r2, #12]
					if (i != 0 && j != c)
   131b0:	2c03      	cmp	r4, #3
   131b2:	d101      	bne.n	131b8 <determinant+0x764>
   131b4:	f000 fc89 	bl	13aca <determinant+0x1076>
						b[m][n] = a[i][j];
   131b8:	4666      	mov	r6, ip
   131ba:	ac6c      	add	r4, sp, #432	; 0x1b0
   131bc:	46a3      	mov	fp, r4
   131be:	27d8      	movs	r7, #216	; 0xd8
   131c0:	4006      	ands	r6, r0
   131c2:	0072      	lsls	r2, r6, #1
   131c4:	1992      	adds	r2, r2, r6
   131c6:	004e      	lsls	r6, r1, #1
   131c8:	00d2      	lsls	r2, r2, #3
   131ca:	1876      	adds	r6, r6, r1
   131cc:	007f      	lsls	r7, r7, #1
   131ce:	445a      	add	r2, fp
   131d0:	0076      	lsls	r6, r6, #1
   131d2:	ac24      	add	r4, sp, #144	; 0x90
   131d4:	19e4      	adds	r4, r4, r7
   131d6:	18f6      	adds	r6, r6, r3
   131d8:	68d7      	ldr	r7, [r2, #12]
   131da:	00b6      	lsls	r6, r6, #2
   131dc:	51a7      	str	r7, [r4, r6]
						if (n < (k - 2))
   131de:	4543      	cmp	r3, r8
   131e0:	da00      	bge.n	131e4 <determinant+0x790>
   131e2:	e1cc      	b.n	1357e <determinant+0xb2a>
							n = 0;
   131e4:	2300      	movs	r3, #0
							m++;
   131e6:	3101      	adds	r1, #1
   131e8:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
   131ea:	9c00      	ldr	r4, [sp, #0]
   131ec:	2c04      	cmp	r4, #4
   131ee:	d047      	beq.n	13280 <determinant+0x82c>
					b[i][j] = 0;
   131f0:	9c01      	ldr	r4, [sp, #4]
   131f2:	1826      	adds	r6, r4, r0
   131f4:	ac90      	add	r4, sp, #576	; 0x240
   131f6:	46a3      	mov	fp, r4
					if (i != 0 && j != c)
   131f8:	4654      	mov	r4, sl
					b[i][j] = 0;
   131fa:	00f6      	lsls	r6, r6, #3
   131fc:	445e      	add	r6, fp
   131fe:	6135      	str	r5, [r6, #16]
					if (i != 0 && j != c)
   13200:	4693      	mov	fp, r2
   13202:	2c04      	cmp	r4, #4
   13204:	d101      	bne.n	1320a <determinant+0x7b6>
   13206:	f000 fc58 	bl	13aba <determinant+0x1066>
						b[m][n] = a[i][j];
   1320a:	465c      	mov	r4, fp
   1320c:	26d8      	movs	r6, #216	; 0xd8
   1320e:	6924      	ldr	r4, [r4, #16]
   13210:	004a      	lsls	r2, r1, #1
   13212:	1852      	adds	r2, r2, r1
   13214:	9402      	str	r4, [sp, #8]
   13216:	0076      	lsls	r6, r6, #1
   13218:	0052      	lsls	r2, r2, #1
   1321a:	ac24      	add	r4, sp, #144	; 0x90
   1321c:	19a4      	adds	r4, r4, r6
   1321e:	18d2      	adds	r2, r2, r3
   13220:	9e02      	ldr	r6, [sp, #8]
   13222:	0092      	lsls	r2, r2, #2
   13224:	50a6      	str	r6, [r4, r2]
						if (n < (k - 2))
   13226:	4543      	cmp	r3, r8
   13228:	da00      	bge.n	1322c <determinant+0x7d8>
   1322a:	e1a5      	b.n	13578 <determinant+0xb24>
							n = 0;
   1322c:	2300      	movs	r3, #0
							m++;
   1322e:	3101      	adds	r1, #1
   13230:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
   13232:	9a00      	ldr	r2, [sp, #0]
   13234:	2a05      	cmp	r2, #5
   13236:	d023      	beq.n	13280 <determinant+0x82c>
					b[i][j] = 0;
   13238:	9a01      	ldr	r2, [sp, #4]
   1323a:	1814      	adds	r4, r2, r0
   1323c:	aa90      	add	r2, sp, #576	; 0x240
   1323e:	4693      	mov	fp, r2
					if (i != 0 && j != c)
   13240:	4652      	mov	r2, sl
					b[i][j] = 0;
   13242:	00e4      	lsls	r4, r4, #3
   13244:	445c      	add	r4, fp
   13246:	6165      	str	r5, [r4, #20]
					if (i != 0 && j != c)
   13248:	2a05      	cmp	r2, #5
   1324a:	d019      	beq.n	13280 <determinant+0x82c>
   1324c:	4664      	mov	r4, ip
   1324e:	4004      	ands	r4, r0
   13250:	0062      	lsls	r2, r4, #1
   13252:	1912      	adds	r2, r2, r4
   13254:	ac6c      	add	r4, sp, #432	; 0x1b0
   13256:	46a3      	mov	fp, r4
   13258:	00d2      	lsls	r2, r2, #3
   1325a:	445a      	add	r2, fp
						b[m][n] = a[i][j];
   1325c:	26d8      	movs	r6, #216	; 0xd8
   1325e:	6952      	ldr	r2, [r2, #20]
   13260:	004c      	lsls	r4, r1, #1
   13262:	1864      	adds	r4, r4, r1
   13264:	9201      	str	r2, [sp, #4]
   13266:	0076      	lsls	r6, r6, #1
   13268:	0064      	lsls	r4, r4, #1
   1326a:	aa24      	add	r2, sp, #144	; 0x90
   1326c:	1992      	adds	r2, r2, r6
   1326e:	18e4      	adds	r4, r4, r3
   13270:	9e01      	ldr	r6, [sp, #4]
   13272:	00a4      	lsls	r4, r4, #2
   13274:	5116      	str	r6, [r2, r4]
						if (n < (k - 2))
   13276:	4543      	cmp	r3, r8
   13278:	db57      	blt.n	1332a <determinant+0x8d6>
							n = 0;
   1327a:	2300      	movs	r3, #0
							m++;
   1327c:	3101      	adds	r1, #1
   1327e:	b2c9      	uxtb	r1, r1
			for (i = 0;i < k; i++)
   13280:	9a00      	ldr	r2, [sp, #0]
   13282:	454a      	cmp	r2, r9
   13284:	d956      	bls.n	13334 <determinant+0x8e0>
   13286:	464a      	mov	r2, r9
   13288:	3201      	adds	r2, #1
   1328a:	b2d2      	uxtb	r2, r2
   1328c:	4691      	mov	r9, r2
   1328e:	3001      	adds	r0, #1
					b[i][j] = 0;
   13290:	27d8      	movs	r7, #216	; 0xd8
   13292:	0042      	lsls	r2, r0, #1
   13294:	9201      	str	r2, [sp, #4]
   13296:	ae24      	add	r6, sp, #144	; 0x90
   13298:	1812      	adds	r2, r2, r0
   1329a:	007f      	lsls	r7, r7, #1
   1329c:	00d2      	lsls	r2, r2, #3
   1329e:	19f6      	adds	r6, r6, r7
   132a0:	50b5      	str	r5, [r6, r2]
					if (i != 0 && j != c)
   132a2:	2800      	cmp	r0, #0
   132a4:	d100      	bne.n	132a8 <determinant+0x854>
   132a6:	e170      	b.n	1358a <determinant+0xb36>
   132a8:	4656      	mov	r6, sl
   132aa:	2e00      	cmp	r6, #0
   132ac:	d101      	bne.n	132b2 <determinant+0x85e>
   132ae:	f000 fc24 	bl	13afa <determinant+0x10a6>
						b[m][n] = a[i][j];
   132b2:	4666      	mov	r6, ip
   132b4:	4006      	ands	r6, r0
   132b6:	0072      	lsls	r2, r6, #1
   132b8:	1992      	adds	r2, r2, r6
   132ba:	ae6c      	add	r6, sp, #432	; 0x1b0
   132bc:	46b3      	mov	fp, r6
   132be:	24d8      	movs	r4, #216	; 0xd8
   132c0:	004e      	lsls	r6, r1, #1
   132c2:	00d2      	lsls	r2, r2, #3
   132c4:	1876      	adds	r6, r6, r1
   132c6:	0064      	lsls	r4, r4, #1
   132c8:	445a      	add	r2, fp
   132ca:	0076      	lsls	r6, r6, #1
   132cc:	af24      	add	r7, sp, #144	; 0x90
   132ce:	193f      	adds	r7, r7, r4
   132d0:	18f6      	adds	r6, r6, r3
   132d2:	6814      	ldr	r4, [r2, #0]
   132d4:	00b6      	lsls	r6, r6, #2
   132d6:	51bc      	str	r4, [r7, r6]
						if (n < (k - 2))
   132d8:	4543      	cmp	r3, r8
   132da:	db00      	blt.n	132de <determinant+0x88a>
   132dc:	e70e      	b.n	130fc <determinant+0x6a8>
						n++;
   132de:	3301      	adds	r3, #1
   132e0:	b2db      	uxtb	r3, r3
   132e2:	e70e      	b.n	13102 <determinant+0x6ae>
   132e4:	3301      	adds	r3, #1
   132e6:	b2db      	uxtb	r3, r3
   132e8:	e65d      	b.n	12fa6 <determinant+0x552>
   132ea:	3301      	adds	r3, #1
   132ec:	b2db      	uxtb	r3, r3
   132ee:	e642      	b.n	12f76 <determinant+0x522>
   132f0:	3301      	adds	r3, #1
   132f2:	b2db      	uxtb	r3, r3
   132f4:	e625      	b.n	12f42 <determinant+0x4ee>
					b[i][j] = 0;
   132f6:	4648      	mov	r0, r9
   132f8:	6048      	str	r0, [r1, #4]
				for (j = 0 ;j < k; j++)
   132fa:	2c02      	cmp	r4, #2
   132fc:	d100      	bne.n	13300 <determinant+0x8ac>
   132fe:	e654      	b.n	12faa <determinant+0x556>
					b[i][j] = 0;
   13300:	4648      	mov	r0, r9
   13302:	6088      	str	r0, [r1, #8]
				for (j = 0 ;j < k; j++)
   13304:	2c03      	cmp	r4, #3
   13306:	d100      	bne.n	1330a <determinant+0x8b6>
   13308:	e64d      	b.n	12fa6 <determinant+0x552>
					b[i][j] = 0;
   1330a:	4648      	mov	r0, r9
   1330c:	60c8      	str	r0, [r1, #12]
				for (j = 0 ;j < k; j++)
   1330e:	2c04      	cmp	r4, #4
   13310:	d100      	bne.n	13314 <determinant+0x8c0>
   13312:	e648      	b.n	12fa6 <determinant+0x552>
					b[i][j] = 0;
   13314:	4648      	mov	r0, r9
   13316:	6108      	str	r0, [r1, #16]
				for (j = 0 ;j < k; j++)
   13318:	2c05      	cmp	r4, #5
   1331a:	d100      	bne.n	1331e <determinant+0x8ca>
   1331c:	e643      	b.n	12fa6 <determinant+0x552>
					b[i][j] = 0;
   1331e:	4648      	mov	r0, r9
   13320:	6148      	str	r0, [r1, #20]
   13322:	e642      	b.n	12faa <determinant+0x556>
						n++;
   13324:	3301      	adds	r3, #1
   13326:	b2db      	uxtb	r3, r3
   13328:	e70c      	b.n	13144 <determinant+0x6f0>
			for (i = 0;i < k; i++)
   1332a:	9a00      	ldr	r2, [sp, #0]
						n++;
   1332c:	3301      	adds	r3, #1
   1332e:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
   13330:	454a      	cmp	r2, r9
   13332:	d8a8      	bhi.n	13286 <determinant+0x832>
			det = det + s * (a[0][c] * determinant(b, k - 1));
   13334:	2190      	movs	r1, #144	; 0x90
   13336:	9b04      	ldr	r3, [sp, #16]
   13338:	aa24      	add	r2, sp, #144	; 0x90
   1333a:	469a      	mov	sl, r3
   1333c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1333e:	0049      	lsls	r1, r1, #1
   13340:	009b      	lsls	r3, r3, #2
   13342:	1852      	adds	r2, r2, r1
   13344:	58d3      	ldr	r3, [r2, r3]
   13346:	9320      	str	r3, [sp, #128]	; 0x80
	if (k == 1)
   13348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1334a:	2b01      	cmp	r3, #1
   1334c:	d100      	bne.n	13350 <determinant+0x8fc>
   1334e:	e323      	b.n	13998 <determinant+0xf44>
   13350:	2300      	movs	r3, #0
   13352:	9307      	str	r3, [sp, #28]
   13354:	2300      	movs	r3, #0
   13356:	930a      	str	r3, [sp, #40]	; 0x28
   13358:	23fe      	movs	r3, #254	; 0xfe
   1335a:	059b      	lsls	r3, r3, #22
   1335c:	9312      	str	r3, [sp, #72]	; 0x48
   1335e:	2300      	movs	r3, #0
   13360:	469b      	mov	fp, r3
   13362:	21ff      	movs	r1, #255	; 0xff
   13364:	4688      	mov	r8, r1
   13366:	990b      	ldr	r1, [sp, #44]	; 0x2c
							n = 0;
   13368:	2301      	movs	r3, #1
   1336a:	1e8e      	subs	r6, r1, #2
   1336c:	4689      	mov	r9, r1
   1336e:	4651      	mov	r1, sl
   13370:	9103      	str	r1, [sp, #12]
   13372:	9907      	ldr	r1, [sp, #28]
   13374:	469c      	mov	ip, r3
   13376:	468a      	mov	sl, r1
   13378:	4659      	mov	r1, fp
   1337a:	2000      	movs	r0, #0
   1337c:	2300      	movs	r3, #0
   1337e:	2200      	movs	r2, #0
   13380:	9102      	str	r1, [sp, #8]
   13382:	9600      	str	r6, [sp, #0]
   13384:	e0ce      	b.n	13524 <determinant+0xad0>
   13386:	46c0      	nop			; (mov r8, r8)
   13388:	00026559 	.word	0x00026559
   1338c:	00025e55 	.word	0x00025e55
   13390:	2300      	movs	r3, #0
							m++;
   13392:	3201      	adds	r2, #1
   13394:	b2d2      	uxtb	r2, r2
					b[i][j] = 0;
   13396:	adb4      	add	r5, sp, #720	; 0x2d0
   13398:	46ab      	mov	fp, r5
   1339a:	2500      	movs	r5, #0
   1339c:	1827      	adds	r7, r4, r0
   1339e:	00ff      	lsls	r7, r7, #3
   133a0:	445f      	add	r7, fp
   133a2:	607d      	str	r5, [r7, #4]
					if (i != 0 && j != c)
   133a4:	9d02      	ldr	r5, [sp, #8]
   133a6:	468b      	mov	fp, r1
   133a8:	2d01      	cmp	r5, #1
   133aa:	d100      	bne.n	133ae <determinant+0x95a>
   133ac:	e344      	b.n	13a38 <determinant+0xfe4>
						b[m][n] = a[i][j];
   133ae:	465d      	mov	r5, fp
   133b0:	2690      	movs	r6, #144	; 0x90
   133b2:	686d      	ldr	r5, [r5, #4]
   133b4:	0051      	lsls	r1, r2, #1
   133b6:	1889      	adds	r1, r1, r2
   133b8:	9501      	str	r5, [sp, #4]
   133ba:	00b6      	lsls	r6, r6, #2
   133bc:	0049      	lsls	r1, r1, #1
   133be:	ad24      	add	r5, sp, #144	; 0x90
   133c0:	19ad      	adds	r5, r5, r6
   133c2:	18c9      	adds	r1, r1, r3
   133c4:	9e01      	ldr	r6, [sp, #4]
   133c6:	0089      	lsls	r1, r1, #2
   133c8:	506e      	str	r6, [r5, r1]
						if (n < (k - 2))
   133ca:	9900      	ldr	r1, [sp, #0]
   133cc:	428b      	cmp	r3, r1
   133ce:	da00      	bge.n	133d2 <determinant+0x97e>
   133d0:	e0ee      	b.n	135b0 <determinant+0xb5c>
							n = 0;
   133d2:	2300      	movs	r3, #0
							m++;
   133d4:	3201      	adds	r2, #1
   133d6:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   133d8:	4649      	mov	r1, r9
   133da:	2902      	cmp	r1, #2
   133dc:	d100      	bne.n	133e0 <determinant+0x98c>
   133de:	e09a      	b.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   133e0:	adb4      	add	r5, sp, #720	; 0x2d0
   133e2:	46ab      	mov	fp, r5
   133e4:	2500      	movs	r5, #0
   133e6:	1821      	adds	r1, r4, r0
   133e8:	00c9      	lsls	r1, r1, #3
   133ea:	4459      	add	r1, fp
   133ec:	608d      	str	r5, [r1, #8]
					if (i != 0 && j != c)
   133ee:	4655      	mov	r5, sl
   133f0:	2d02      	cmp	r5, #2
   133f2:	d100      	bne.n	133f6 <determinant+0x9a2>
   133f4:	e2e3      	b.n	139be <determinant+0xf6a>
   133f6:	4647      	mov	r7, r8
   133f8:	ad90      	add	r5, sp, #576	; 0x240
   133fa:	46ab      	mov	fp, r5
   133fc:	4007      	ands	r7, r0
   133fe:	0079      	lsls	r1, r7, #1
   13400:	19c9      	adds	r1, r1, r7
   13402:	00c9      	lsls	r1, r1, #3
   13404:	4459      	add	r1, fp
						b[m][n] = a[i][j];
   13406:	2590      	movs	r5, #144	; 0x90
   13408:	6889      	ldr	r1, [r1, #8]
   1340a:	0057      	lsls	r7, r2, #1
   1340c:	18bf      	adds	r7, r7, r2
   1340e:	9101      	str	r1, [sp, #4]
   13410:	00ad      	lsls	r5, r5, #2
   13412:	007f      	lsls	r7, r7, #1
   13414:	a924      	add	r1, sp, #144	; 0x90
   13416:	1949      	adds	r1, r1, r5
   13418:	18ff      	adds	r7, r7, r3
   1341a:	9d01      	ldr	r5, [sp, #4]
   1341c:	00bf      	lsls	r7, r7, #2
   1341e:	51cd      	str	r5, [r1, r7]
						if (n < (k - 2))
   13420:	9900      	ldr	r1, [sp, #0]
   13422:	428b      	cmp	r3, r1
   13424:	da00      	bge.n	13428 <determinant+0x9d4>
   13426:	e1cd      	b.n	137c4 <determinant+0xd70>
							n = 0;
   13428:	2300      	movs	r3, #0
							m++;
   1342a:	3201      	adds	r2, #1
   1342c:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   1342e:	4649      	mov	r1, r9
   13430:	2903      	cmp	r1, #3
   13432:	d070      	beq.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   13434:	adb4      	add	r5, sp, #720	; 0x2d0
   13436:	46ab      	mov	fp, r5
   13438:	2500      	movs	r5, #0
   1343a:	1821      	adds	r1, r4, r0
   1343c:	00c9      	lsls	r1, r1, #3
   1343e:	4459      	add	r1, fp
   13440:	60cd      	str	r5, [r1, #12]
					if (i != 0 && j != c)
   13442:	4655      	mov	r5, sl
   13444:	2d03      	cmp	r5, #3
   13446:	d100      	bne.n	1344a <determinant+0x9f6>
   13448:	e2aa      	b.n	139a0 <determinant+0xf4c>
						b[m][n] = a[i][j];
   1344a:	4647      	mov	r7, r8
   1344c:	ad90      	add	r5, sp, #576	; 0x240
   1344e:	46ab      	mov	fp, r5
   13450:	2690      	movs	r6, #144	; 0x90
   13452:	4007      	ands	r7, r0
   13454:	0079      	lsls	r1, r7, #1
   13456:	19c9      	adds	r1, r1, r7
   13458:	0057      	lsls	r7, r2, #1
   1345a:	00c9      	lsls	r1, r1, #3
   1345c:	18bf      	adds	r7, r7, r2
   1345e:	00b6      	lsls	r6, r6, #2
   13460:	4459      	add	r1, fp
   13462:	007f      	lsls	r7, r7, #1
   13464:	ad24      	add	r5, sp, #144	; 0x90
   13466:	19ad      	adds	r5, r5, r6
   13468:	18ff      	adds	r7, r7, r3
   1346a:	68ce      	ldr	r6, [r1, #12]
   1346c:	00bf      	lsls	r7, r7, #2
   1346e:	51ee      	str	r6, [r5, r7]
						if (n < (k - 2))
   13470:	9d00      	ldr	r5, [sp, #0]
   13472:	42ab      	cmp	r3, r5
   13474:	da00      	bge.n	13478 <determinant+0xa24>
   13476:	e1a2      	b.n	137be <determinant+0xd6a>
							n = 0;
   13478:	2300      	movs	r3, #0
							m++;
   1347a:	3201      	adds	r2, #1
   1347c:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   1347e:	464d      	mov	r5, r9
   13480:	2d04      	cmp	r5, #4
   13482:	d048      	beq.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   13484:	adb4      	add	r5, sp, #720	; 0x2d0
   13486:	46ab      	mov	fp, r5
   13488:	2500      	movs	r5, #0
   1348a:	1827      	adds	r7, r4, r0
   1348c:	00ff      	lsls	r7, r7, #3
   1348e:	445f      	add	r7, fp
   13490:	613d      	str	r5, [r7, #16]
					if (i != 0 && j != c)
   13492:	4655      	mov	r5, sl
   13494:	468b      	mov	fp, r1
   13496:	2d04      	cmp	r5, #4
   13498:	d100      	bne.n	1349c <determinant+0xa48>
   1349a:	e2d4      	b.n	13a46 <determinant+0xff2>
						b[m][n] = a[i][j];
   1349c:	465d      	mov	r5, fp
   1349e:	2690      	movs	r6, #144	; 0x90
   134a0:	692d      	ldr	r5, [r5, #16]
   134a2:	0051      	lsls	r1, r2, #1
   134a4:	1889      	adds	r1, r1, r2
   134a6:	9501      	str	r5, [sp, #4]
   134a8:	00b6      	lsls	r6, r6, #2
   134aa:	0049      	lsls	r1, r1, #1
   134ac:	ad24      	add	r5, sp, #144	; 0x90
   134ae:	19ad      	adds	r5, r5, r6
   134b0:	18c9      	adds	r1, r1, r3
   134b2:	9e01      	ldr	r6, [sp, #4]
   134b4:	0089      	lsls	r1, r1, #2
   134b6:	506e      	str	r6, [r5, r1]
						if (n < (k - 2))
   134b8:	9900      	ldr	r1, [sp, #0]
   134ba:	428b      	cmp	r3, r1
   134bc:	da00      	bge.n	134c0 <determinant+0xa6c>
   134be:	e17b      	b.n	137b8 <determinant+0xd64>
							n = 0;
   134c0:	2300      	movs	r3, #0
							m++;
   134c2:	3201      	adds	r2, #1
   134c4:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   134c6:	4649      	mov	r1, r9
   134c8:	2905      	cmp	r1, #5
   134ca:	d024      	beq.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   134cc:	a9b4      	add	r1, sp, #720	; 0x2d0
   134ce:	468b      	mov	fp, r1
   134d0:	2100      	movs	r1, #0
   134d2:	1824      	adds	r4, r4, r0
   134d4:	00e4      	lsls	r4, r4, #3
   134d6:	445c      	add	r4, fp
   134d8:	6161      	str	r1, [r4, #20]
					if (i != 0 && j != c)
   134da:	4651      	mov	r1, sl
   134dc:	2905      	cmp	r1, #5
   134de:	d01a      	beq.n	13516 <determinant+0xac2>
   134e0:	4644      	mov	r4, r8
   134e2:	4004      	ands	r4, r0
   134e4:	0061      	lsls	r1, r4, #1
   134e6:	1909      	adds	r1, r1, r4
   134e8:	ac90      	add	r4, sp, #576	; 0x240
   134ea:	46a3      	mov	fp, r4
   134ec:	00c9      	lsls	r1, r1, #3
   134ee:	4459      	add	r1, fp
						b[m][n] = a[i][j];
   134f0:	2590      	movs	r5, #144	; 0x90
   134f2:	6949      	ldr	r1, [r1, #20]
   134f4:	0054      	lsls	r4, r2, #1
   134f6:	18a4      	adds	r4, r4, r2
   134f8:	9101      	str	r1, [sp, #4]
   134fa:	00ad      	lsls	r5, r5, #2
   134fc:	0064      	lsls	r4, r4, #1
   134fe:	a924      	add	r1, sp, #144	; 0x90
   13500:	1949      	adds	r1, r1, r5
   13502:	18e4      	adds	r4, r4, r3
   13504:	9d01      	ldr	r5, [sp, #4]
   13506:	00a4      	lsls	r4, r4, #2
   13508:	510d      	str	r5, [r1, r4]
						if (n < (k - 2))
   1350a:	9900      	ldr	r1, [sp, #0]
   1350c:	428b      	cmp	r3, r1
   1350e:	db52      	blt.n	135b6 <determinant+0xb62>
							n = 0;
   13510:	2300      	movs	r3, #0
							m++;
   13512:	3201      	adds	r2, #1
   13514:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
   13516:	45e1      	cmp	r9, ip
   13518:	d951      	bls.n	135be <determinant+0xb6a>
   1351a:	4661      	mov	r1, ip
   1351c:	3101      	adds	r1, #1
   1351e:	b2c9      	uxtb	r1, r1
   13520:	468c      	mov	ip, r1
   13522:	3001      	adds	r0, #1
					b[i][j] = 0;
   13524:	2690      	movs	r6, #144	; 0x90
   13526:	2500      	movs	r5, #0
   13528:	0044      	lsls	r4, r0, #1
   1352a:	1821      	adds	r1, r4, r0
   1352c:	af24      	add	r7, sp, #144	; 0x90
   1352e:	00b6      	lsls	r6, r6, #2
   13530:	00c9      	lsls	r1, r1, #3
   13532:	19bf      	adds	r7, r7, r6
   13534:	507d      	str	r5, [r7, r1]
					if (i != 0 && j != c)
   13536:	2800      	cmp	r0, #0
   13538:	d100      	bne.n	1353c <determinant+0xae8>
   1353a:	e146      	b.n	137ca <determinant+0xd76>
   1353c:	4656      	mov	r6, sl
   1353e:	2e00      	cmp	r6, #0
   13540:	d100      	bne.n	13544 <determinant+0xaf0>
   13542:	e243      	b.n	139cc <determinant+0xf78>
						b[m][n] = a[i][j];
   13544:	4647      	mov	r7, r8
   13546:	ae90      	add	r6, sp, #576	; 0x240
   13548:	46b3      	mov	fp, r6
   1354a:	2590      	movs	r5, #144	; 0x90
   1354c:	4007      	ands	r7, r0
   1354e:	0079      	lsls	r1, r7, #1
   13550:	19c9      	adds	r1, r1, r7
   13552:	0057      	lsls	r7, r2, #1
   13554:	00c9      	lsls	r1, r1, #3
   13556:	18bf      	adds	r7, r7, r2
   13558:	00ad      	lsls	r5, r5, #2
   1355a:	4459      	add	r1, fp
   1355c:	007f      	lsls	r7, r7, #1
   1355e:	ae24      	add	r6, sp, #144	; 0x90
   13560:	1976      	adds	r6, r6, r5
   13562:	18ff      	adds	r7, r7, r3
   13564:	680d      	ldr	r5, [r1, #0]
   13566:	00bf      	lsls	r7, r7, #2
   13568:	51f5      	str	r5, [r6, r7]
						if (n < (k - 2))
   1356a:	9d00      	ldr	r5, [sp, #0]
   1356c:	42ab      	cmp	r3, r5
   1356e:	db00      	blt.n	13572 <determinant+0xb1e>
   13570:	e70e      	b.n	13390 <determinant+0x93c>
						n++;
   13572:	3301      	adds	r3, #1
   13574:	b2db      	uxtb	r3, r3
   13576:	e70e      	b.n	13396 <determinant+0x942>
   13578:	3301      	adds	r3, #1
   1357a:	b2db      	uxtb	r3, r3
   1357c:	e659      	b.n	13232 <determinant+0x7de>
   1357e:	3301      	adds	r3, #1
   13580:	b2db      	uxtb	r3, r3
   13582:	e632      	b.n	131ea <determinant+0x796>
   13584:	3301      	adds	r3, #1
   13586:	b2db      	uxtb	r3, r3
   13588:	e607      	b.n	1319a <determinant+0x746>
				for (j = 0 ;j < k; j++)
   1358a:	9a00      	ldr	r2, [sp, #0]
					b[i][j] = 0;
   1358c:	9591      	str	r5, [sp, #580]	; 0x244
				for (j = 0 ;j < k; j++)
   1358e:	2a02      	cmp	r2, #2
   13590:	d100      	bne.n	13594 <determinant+0xb40>
   13592:	e675      	b.n	13280 <determinant+0x82c>
					b[i][j] = 0;
   13594:	9592      	str	r5, [sp, #584]	; 0x248
				for (j = 0 ;j < k; j++)
   13596:	2a03      	cmp	r2, #3
   13598:	d100      	bne.n	1359c <determinant+0xb48>
   1359a:	e671      	b.n	13280 <determinant+0x82c>
					b[i][j] = 0;
   1359c:	9593      	str	r5, [sp, #588]	; 0x24c
				for (j = 0 ;j < k; j++)
   1359e:	2a04      	cmp	r2, #4
   135a0:	d100      	bne.n	135a4 <determinant+0xb50>
   135a2:	e66d      	b.n	13280 <determinant+0x82c>
					b[i][j] = 0;
   135a4:	9594      	str	r5, [sp, #592]	; 0x250
				for (j = 0 ;j < k; j++)
   135a6:	2a05      	cmp	r2, #5
   135a8:	d100      	bne.n	135ac <determinant+0xb58>
   135aa:	e669      	b.n	13280 <determinant+0x82c>
					b[i][j] = 0;
   135ac:	9595      	str	r5, [sp, #596]	; 0x254
   135ae:	e66a      	b.n	13286 <determinant+0x832>
						n++;
   135b0:	3301      	adds	r3, #1
   135b2:	b2db      	uxtb	r3, r3
   135b4:	e710      	b.n	133d8 <determinant+0x984>
   135b6:	3301      	adds	r3, #1
   135b8:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
   135ba:	45e1      	cmp	r9, ip
   135bc:	d8ad      	bhi.n	1351a <determinant+0xac6>
			det = det + s * (a[0][c] * determinant(b, k - 1));
   135be:	21d8      	movs	r1, #216	; 0xd8
   135c0:	9b03      	ldr	r3, [sp, #12]
   135c2:	aa24      	add	r2, sp, #144	; 0x90
   135c4:	469a      	mov	sl, r3
   135c6:	9b07      	ldr	r3, [sp, #28]
   135c8:	0049      	lsls	r1, r1, #1
   135ca:	009b      	lsls	r3, r3, #2
   135cc:	1852      	adds	r2, r2, r1
   135ce:	58d3      	ldr	r3, [r2, r3]
   135d0:	9316      	str	r3, [sp, #88]	; 0x58
	if (k == 1)
   135d2:	4653      	mov	r3, sl
   135d4:	2b01      	cmp	r3, #1
   135d6:	d100      	bne.n	135da <determinant+0xb86>
   135d8:	e1da      	b.n	13990 <determinant+0xf3c>
   135da:	2300      	movs	r3, #0
   135dc:	9303      	str	r3, [sp, #12]
   135de:	23fe      	movs	r3, #254	; 0xfe
   135e0:	059b      	lsls	r3, r3, #22
   135e2:	9304      	str	r3, [sp, #16]
   135e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   135e6:	2600      	movs	r6, #0
   135e8:	3b05      	subs	r3, #5
   135ea:	9305      	str	r3, [sp, #20]
   135ec:	2300      	movs	r3, #0
   135ee:	4657      	mov	r7, sl
   135f0:	acd8      	add	r4, sp, #864	; 0x360
   135f2:	9302      	str	r3, [sp, #8]
					b[i][j] = 0;
   135f4:	2100      	movs	r1, #0
   135f6:	4688      	mov	r8, r1
   135f8:	21ff      	movs	r1, #255	; 0xff
							n = 0;
   135fa:	2301      	movs	r3, #1
   135fc:	468a      	mov	sl, r1
   135fe:	1eb9      	subs	r1, r7, #2
   13600:	9301      	str	r3, [sp, #4]
   13602:	2000      	movs	r0, #0
   13604:	2300      	movs	r3, #0
   13606:	2200      	movs	r2, #0
   13608:	46bc      	mov	ip, r7
   1360a:	9100      	str	r1, [sp, #0]
   1360c:	46b1      	mov	r9, r6
   1360e:	e0b1      	b.n	13774 <determinant+0xd20>
   13610:	2300      	movs	r3, #0
							m++;
   13612:	3201      	adds	r2, #1
   13614:	b2d2      	uxtb	r2, r2
					b[i][j] = 0;
   13616:	4647      	mov	r7, r8
   13618:	182e      	adds	r6, r5, r0
   1361a:	00f6      	lsls	r6, r6, #3
   1361c:	19a6      	adds	r6, r4, r6
   1361e:	6077      	str	r7, [r6, #4]
					if (i != 0 && j != c)
   13620:	9f02      	ldr	r7, [sp, #8]
   13622:	468b      	mov	fp, r1
   13624:	2f01      	cmp	r7, #1
   13626:	d100      	bne.n	1362a <determinant+0xbd6>
   13628:	e1ea      	b.n	13a00 <determinant+0xfac>
						b[m][n] = a[i][j];
   1362a:	465e      	mov	r6, fp
   1362c:	0051      	lsls	r1, r2, #1
   1362e:	1889      	adds	r1, r1, r2
   13630:	0049      	lsls	r1, r1, #1
   13632:	18c9      	adds	r1, r1, r3
   13634:	6876      	ldr	r6, [r6, #4]
   13636:	0089      	lsls	r1, r1, #2
   13638:	5066      	str	r6, [r4, r1]
						if (n < (k - 2))
   1363a:	9900      	ldr	r1, [sp, #0]
   1363c:	428b      	cmp	r3, r1
   1363e:	da00      	bge.n	13642 <determinant+0xbee>
   13640:	e0de      	b.n	13800 <determinant+0xdac>
							n = 0;
   13642:	2300      	movs	r3, #0
							m++;
   13644:	3201      	adds	r2, #1
   13646:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   13648:	4661      	mov	r1, ip
   1364a:	2902      	cmp	r1, #2
   1364c:	d100      	bne.n	13650 <determinant+0xbfc>
   1364e:	e08a      	b.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   13650:	4646      	mov	r6, r8
   13652:	1829      	adds	r1, r5, r0
   13654:	00c9      	lsls	r1, r1, #3
   13656:	1861      	adds	r1, r4, r1
   13658:	608e      	str	r6, [r1, #8]
					if (i != 0 && j != c)
   1365a:	464e      	mov	r6, r9
   1365c:	2e02      	cmp	r6, #2
   1365e:	d100      	bne.n	13662 <determinant+0xc0e>
   13660:	e1dc      	b.n	13a1c <determinant+0xfc8>
   13662:	4656      	mov	r6, sl
   13664:	4006      	ands	r6, r0
   13666:	0071      	lsls	r1, r6, #1
   13668:	1989      	adds	r1, r1, r6
   1366a:	aeb4      	add	r6, sp, #720	; 0x2d0
   1366c:	46b3      	mov	fp, r6
   1366e:	00c9      	lsls	r1, r1, #3
   13670:	4459      	add	r1, fp
						b[m][n] = a[i][j];
   13672:	0056      	lsls	r6, r2, #1
   13674:	18b6      	adds	r6, r6, r2
   13676:	0076      	lsls	r6, r6, #1
   13678:	6889      	ldr	r1, [r1, #8]
   1367a:	18f6      	adds	r6, r6, r3
   1367c:	00b6      	lsls	r6, r6, #2
   1367e:	51a1      	str	r1, [r4, r6]
						if (n < (k - 2))
   13680:	9900      	ldr	r1, [sp, #0]
   13682:	428b      	cmp	r3, r1
   13684:	da00      	bge.n	13688 <determinant+0xc34>
   13686:	e165      	b.n	13954 <determinant+0xf00>
							n = 0;
   13688:	2300      	movs	r3, #0
							m++;
   1368a:	3201      	adds	r2, #1
   1368c:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   1368e:	4661      	mov	r1, ip
   13690:	2903      	cmp	r1, #3
   13692:	d068      	beq.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   13694:	4646      	mov	r6, r8
   13696:	1829      	adds	r1, r5, r0
   13698:	00c9      	lsls	r1, r1, #3
   1369a:	1861      	adds	r1, r4, r1
   1369c:	60ce      	str	r6, [r1, #12]
					if (i != 0 && j != c)
   1369e:	464e      	mov	r6, r9
   136a0:	2e03      	cmp	r6, #3
   136a2:	d100      	bne.n	136a6 <determinant+0xc52>
   136a4:	e1b3      	b.n	13a0e <determinant+0xfba>
						b[m][n] = a[i][j];
   136a6:	4656      	mov	r6, sl
   136a8:	4006      	ands	r6, r0
   136aa:	46b3      	mov	fp, r6
   136ac:	affc      	add	r7, sp, #1008	; 0x3f0
   136ae:	0076      	lsls	r6, r6, #1
   136b0:	445e      	add	r6, fp
   136b2:	46bb      	mov	fp, r7
   136b4:	00f6      	lsls	r6, r6, #3
   136b6:	0051      	lsls	r1, r2, #1
   136b8:	445e      	add	r6, fp
   136ba:	1889      	adds	r1, r1, r2
   136bc:	3e21      	subs	r6, #33	; 0x21
   136be:	0049      	lsls	r1, r1, #1
   136c0:	3eff      	subs	r6, #255	; 0xff
   136c2:	18c9      	adds	r1, r1, r3
   136c4:	68f6      	ldr	r6, [r6, #12]
   136c6:	0089      	lsls	r1, r1, #2
   136c8:	5066      	str	r6, [r4, r1]
						if (n < (k - 2))
   136ca:	9900      	ldr	r1, [sp, #0]
   136cc:	428b      	cmp	r3, r1
   136ce:	da00      	bge.n	136d2 <determinant+0xc7e>
   136d0:	e13d      	b.n	1394e <determinant+0xefa>
							n = 0;
   136d2:	2300      	movs	r3, #0
							m++;
   136d4:	3201      	adds	r2, #1
   136d6:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   136d8:	4661      	mov	r1, ip
   136da:	2904      	cmp	r1, #4
   136dc:	d043      	beq.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   136de:	4646      	mov	r6, r8
   136e0:	1829      	adds	r1, r5, r0
   136e2:	00c9      	lsls	r1, r1, #3
   136e4:	1861      	adds	r1, r4, r1
   136e6:	610e      	str	r6, [r1, #16]
					if (i != 0 && j != c)
   136e8:	464e      	mov	r6, r9
   136ea:	2e04      	cmp	r6, #4
   136ec:	d100      	bne.n	136f0 <determinant+0xc9c>
   136ee:	e19c      	b.n	13a2a <determinant+0xfd6>
						b[m][n] = a[i][j];
   136f0:	4656      	mov	r6, sl
   136f2:	4006      	ands	r6, r0
   136f4:	46b3      	mov	fp, r6
   136f6:	affc      	add	r7, sp, #1008	; 0x3f0
   136f8:	0076      	lsls	r6, r6, #1
   136fa:	445e      	add	r6, fp
   136fc:	46bb      	mov	fp, r7
   136fe:	00f6      	lsls	r6, r6, #3
   13700:	0051      	lsls	r1, r2, #1
   13702:	445e      	add	r6, fp
   13704:	1889      	adds	r1, r1, r2
   13706:	3e21      	subs	r6, #33	; 0x21
   13708:	0049      	lsls	r1, r1, #1
   1370a:	3eff      	subs	r6, #255	; 0xff
   1370c:	18c9      	adds	r1, r1, r3
   1370e:	6936      	ldr	r6, [r6, #16]
   13710:	0089      	lsls	r1, r1, #2
   13712:	5066      	str	r6, [r4, r1]
						if (n < (k - 2))
   13714:	9900      	ldr	r1, [sp, #0]
   13716:	428b      	cmp	r3, r1
   13718:	da00      	bge.n	1371c <determinant+0xcc8>
   1371a:	e115      	b.n	13948 <determinant+0xef4>
							n = 0;
   1371c:	2300      	movs	r3, #0
							m++;
   1371e:	3201      	adds	r2, #1
   13720:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   13722:	4661      	mov	r1, ip
   13724:	2905      	cmp	r1, #5
   13726:	d01e      	beq.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   13728:	4641      	mov	r1, r8
   1372a:	182d      	adds	r5, r5, r0
   1372c:	00ed      	lsls	r5, r5, #3
   1372e:	1965      	adds	r5, r4, r5
   13730:	6169      	str	r1, [r5, #20]
					if (i != 0 && j != c)
   13732:	4649      	mov	r1, r9
   13734:	2905      	cmp	r1, #5
   13736:	d016      	beq.n	13766 <determinant+0xd12>
						b[m][n] = a[i][j];
   13738:	4656      	mov	r6, sl
   1373a:	4006      	ands	r6, r0
   1373c:	0075      	lsls	r5, r6, #1
   1373e:	19ad      	adds	r5, r5, r6
   13740:	aefc      	add	r6, sp, #1008	; 0x3f0
   13742:	46b3      	mov	fp, r6
   13744:	00ed      	lsls	r5, r5, #3
   13746:	0051      	lsls	r1, r2, #1
   13748:	445d      	add	r5, fp
   1374a:	1889      	adds	r1, r1, r2
   1374c:	3d21      	subs	r5, #33	; 0x21
   1374e:	0049      	lsls	r1, r1, #1
   13750:	3dff      	subs	r5, #255	; 0xff
   13752:	18c9      	adds	r1, r1, r3
   13754:	696d      	ldr	r5, [r5, #20]
   13756:	0089      	lsls	r1, r1, #2
   13758:	5065      	str	r5, [r4, r1]
						if (n < (k - 2))
   1375a:	9900      	ldr	r1, [sp, #0]
   1375c:	428b      	cmp	r3, r1
   1375e:	db52      	blt.n	13806 <determinant+0xdb2>
							n = 0;
   13760:	2300      	movs	r3, #0
							m++;
   13762:	3201      	adds	r2, #1
   13764:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
   13766:	9901      	ldr	r1, [sp, #4]
   13768:	458c      	cmp	ip, r1
   1376a:	d951      	bls.n	13810 <determinant+0xdbc>
   1376c:	3101      	adds	r1, #1
   1376e:	b2c9      	uxtb	r1, r1
   13770:	3001      	adds	r0, #1
   13772:	9101      	str	r1, [sp, #4]
					b[i][j] = 0;
   13774:	4646      	mov	r6, r8
   13776:	0045      	lsls	r5, r0, #1
   13778:	1829      	adds	r1, r5, r0
   1377a:	00c9      	lsls	r1, r1, #3
   1377c:	5066      	str	r6, [r4, r1]
					if (i != 0 && j != c)
   1377e:	2800      	cmp	r0, #0
   13780:	d100      	bne.n	13784 <determinant+0xd30>
   13782:	e0ea      	b.n	1395a <determinant+0xf06>
   13784:	464e      	mov	r6, r9
   13786:	2e00      	cmp	r6, #0
   13788:	d100      	bne.n	1378c <determinant+0xd38>
   1378a:	e12d      	b.n	139e8 <determinant+0xf94>
						b[m][n] = a[i][j];
   1378c:	4656      	mov	r6, sl
   1378e:	4006      	ands	r6, r0
   13790:	0071      	lsls	r1, r6, #1
   13792:	1989      	adds	r1, r1, r6
   13794:	aeb4      	add	r6, sp, #720	; 0x2d0
   13796:	46b3      	mov	fp, r6
   13798:	0056      	lsls	r6, r2, #1
   1379a:	00c9      	lsls	r1, r1, #3
   1379c:	18b6      	adds	r6, r6, r2
   1379e:	4459      	add	r1, fp
   137a0:	0076      	lsls	r6, r6, #1
   137a2:	18f6      	adds	r6, r6, r3
   137a4:	680f      	ldr	r7, [r1, #0]
   137a6:	00b6      	lsls	r6, r6, #2
   137a8:	51a7      	str	r7, [r4, r6]
						if (n < (k - 2))
   137aa:	9e00      	ldr	r6, [sp, #0]
   137ac:	42b3      	cmp	r3, r6
   137ae:	db00      	blt.n	137b2 <determinant+0xd5e>
   137b0:	e72e      	b.n	13610 <determinant+0xbbc>
						n++;
   137b2:	3301      	adds	r3, #1
   137b4:	b2db      	uxtb	r3, r3
   137b6:	e72e      	b.n	13616 <determinant+0xbc2>
   137b8:	3301      	adds	r3, #1
   137ba:	b2db      	uxtb	r3, r3
   137bc:	e683      	b.n	134c6 <determinant+0xa72>
   137be:	3301      	adds	r3, #1
   137c0:	b2db      	uxtb	r3, r3
   137c2:	e65c      	b.n	1347e <determinant+0xa2a>
   137c4:	3301      	adds	r3, #1
   137c6:	b2db      	uxtb	r3, r3
   137c8:	e631      	b.n	1342e <determinant+0x9da>
					b[i][j] = 0;
   137ca:	2100      	movs	r1, #0
   137cc:	91b5      	str	r1, [sp, #724]	; 0x2d4
				for (j = 0 ;j < k; j++)
   137ce:	4649      	mov	r1, r9
   137d0:	2902      	cmp	r1, #2
   137d2:	d100      	bne.n	137d6 <determinant+0xd82>
   137d4:	e69f      	b.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   137d6:	2100      	movs	r1, #0
   137d8:	91b6      	str	r1, [sp, #728]	; 0x2d8
				for (j = 0 ;j < k; j++)
   137da:	4649      	mov	r1, r9
   137dc:	2903      	cmp	r1, #3
   137de:	d100      	bne.n	137e2 <determinant+0xd8e>
   137e0:	e699      	b.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   137e2:	2100      	movs	r1, #0
   137e4:	91b7      	str	r1, [sp, #732]	; 0x2dc
				for (j = 0 ;j < k; j++)
   137e6:	4649      	mov	r1, r9
   137e8:	2904      	cmp	r1, #4
   137ea:	d100      	bne.n	137ee <determinant+0xd9a>
   137ec:	e693      	b.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   137ee:	2100      	movs	r1, #0
   137f0:	91b8      	str	r1, [sp, #736]	; 0x2e0
				for (j = 0 ;j < k; j++)
   137f2:	4649      	mov	r1, r9
   137f4:	2905      	cmp	r1, #5
   137f6:	d100      	bne.n	137fa <determinant+0xda6>
   137f8:	e68d      	b.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   137fa:	2100      	movs	r1, #0
   137fc:	91b9      	str	r1, [sp, #740]	; 0x2e4
   137fe:	e68c      	b.n	1351a <determinant+0xac6>
						n++;
   13800:	3301      	adds	r3, #1
   13802:	b2db      	uxtb	r3, r3
   13804:	e720      	b.n	13648 <determinant+0xbf4>
			for (i = 0;i < k; i++)
   13806:	9901      	ldr	r1, [sp, #4]
						n++;
   13808:	3301      	adds	r3, #1
   1380a:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
   1380c:	458c      	cmp	ip, r1
   1380e:	d8ad      	bhi.n	1376c <determinant+0xd18>
			det = det + s * (a[0][c] * determinant(b, k - 1));
   13810:	466b      	mov	r3, sp
   13812:	0020      	movs	r0, r4
   13814:	7d19      	ldrb	r1, [r3, #20]
   13816:	4667      	mov	r7, ip
   13818:	f7ff f91c 	bl	12a54 <determinant>
   1381c:	2190      	movs	r1, #144	; 0x90
   1381e:	464e      	mov	r6, r9
   13820:	0089      	lsls	r1, r1, #2
   13822:	aa24      	add	r2, sp, #144	; 0x90
   13824:	1852      	adds	r2, r2, r1
   13826:	00b3      	lsls	r3, r6, #2
   13828:	58d1      	ldr	r1, [r2, r3]
   1382a:	4bbd      	ldr	r3, [pc, #756]	; (13b20 <determinant+0x10cc>)
   1382c:	4798      	blx	r3
   1382e:	9d04      	ldr	r5, [sp, #16]
   13830:	4bbb      	ldr	r3, [pc, #748]	; (13b20 <determinant+0x10cc>)
   13832:	1c29      	adds	r1, r5, #0
   13834:	4798      	blx	r3
   13836:	4bbb      	ldr	r3, [pc, #748]	; (13b24 <determinant+0x10d0>)
   13838:	1c01      	adds	r1, r0, #0
   1383a:	9803      	ldr	r0, [sp, #12]
   1383c:	4798      	blx	r3
			s = -1 * s;
   1383e:	2280      	movs	r2, #128	; 0x80
   13840:	0612      	lsls	r2, r2, #24
   13842:	002b      	movs	r3, r5
   13844:	4694      	mov	ip, r2
   13846:	3601      	adds	r6, #1
   13848:	4463      	add	r3, ip
   1384a:	9304      	str	r3, [sp, #16]
		for (c = 0; c < k; c++)
   1384c:	b2f3      	uxtb	r3, r6
			det = det + s * (a[0][c] * determinant(b, k - 1));
   1384e:	9003      	str	r0, [sp, #12]
		for (c = 0; c < k; c++)
   13850:	9302      	str	r3, [sp, #8]
   13852:	429f      	cmp	r7, r3
   13854:	d900      	bls.n	13858 <determinant+0xe04>
   13856:	e6cd      	b.n	135f4 <determinant+0xba0>
   13858:	46ba      	mov	sl, r7
   1385a:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
   1385c:	4bb0      	ldr	r3, [pc, #704]	; (13b20 <determinant+0x10cc>)
   1385e:	9816      	ldr	r0, [sp, #88]	; 0x58
   13860:	4798      	blx	r3
   13862:	9c12      	ldr	r4, [sp, #72]	; 0x48
   13864:	4bae      	ldr	r3, [pc, #696]	; (13b20 <determinant+0x10cc>)
   13866:	1c21      	adds	r1, r4, #0
   13868:	4798      	blx	r3
   1386a:	4bae      	ldr	r3, [pc, #696]	; (13b24 <determinant+0x10d0>)
   1386c:	1c01      	adds	r1, r0, #0
   1386e:	980a      	ldr	r0, [sp, #40]	; 0x28
   13870:	4798      	blx	r3
			s = -1 * s;
   13872:	2280      	movs	r2, #128	; 0x80
   13874:	0612      	lsls	r2, r2, #24
   13876:	0023      	movs	r3, r4
   13878:	4694      	mov	ip, r2
   1387a:	4463      	add	r3, ip
   1387c:	9312      	str	r3, [sp, #72]	; 0x48
   1387e:	9b07      	ldr	r3, [sp, #28]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   13880:	900a      	str	r0, [sp, #40]	; 0x28
   13882:	3301      	adds	r3, #1
   13884:	9307      	str	r3, [sp, #28]
		for (c = 0; c < k; c++)
   13886:	b2db      	uxtb	r3, r3
   13888:	469b      	mov	fp, r3
   1388a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1388c:	455b      	cmp	r3, fp
   1388e:	d900      	bls.n	13892 <determinant+0xe3e>
   13890:	e567      	b.n	13362 <determinant+0x90e>
   13892:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
   13894:	4ba2      	ldr	r3, [pc, #648]	; (13b20 <determinant+0x10cc>)
   13896:	9820      	ldr	r0, [sp, #128]	; 0x80
   13898:	4798      	blx	r3
   1389a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1389c:	4ba0      	ldr	r3, [pc, #640]	; (13b20 <determinant+0x10cc>)
   1389e:	1c21      	adds	r1, r4, #0
   138a0:	4798      	blx	r3
   138a2:	4ba0      	ldr	r3, [pc, #640]	; (13b24 <determinant+0x10d0>)
   138a4:	1c01      	adds	r1, r0, #0
   138a6:	9811      	ldr	r0, [sp, #68]	; 0x44
   138a8:	4798      	blx	r3
			s = -1 * s;
   138aa:	2280      	movs	r2, #128	; 0x80
   138ac:	0612      	lsls	r2, r2, #24
   138ae:	0023      	movs	r3, r4
   138b0:	4694      	mov	ip, r2
   138b2:	4463      	add	r3, ip
   138b4:	931b      	str	r3, [sp, #108]	; 0x6c
   138b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			det = det + s * (a[0][c] * determinant(b, k - 1));
   138b8:	9011      	str	r0, [sp, #68]	; 0x44
   138ba:	3301      	adds	r3, #1
   138bc:	9313      	str	r3, [sp, #76]	; 0x4c
		for (c = 0; c < k; c++)
   138be:	b2db      	uxtb	r3, r3
   138c0:	469b      	mov	fp, r3
   138c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   138c4:	455b      	cmp	r3, fp
   138c6:	d900      	bls.n	138ca <determinant+0xe76>
   138c8:	e405      	b.n	130d6 <determinant+0x682>
   138ca:	4655      	mov	r5, sl
   138cc:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
   138ce:	4b94      	ldr	r3, [pc, #592]	; (13b20 <determinant+0x10cc>)
   138d0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   138d2:	4798      	blx	r3
   138d4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   138d6:	4b92      	ldr	r3, [pc, #584]	; (13b20 <determinant+0x10cc>)
   138d8:	1c21      	adds	r1, r4, #0
   138da:	4798      	blx	r3
   138dc:	4b91      	ldr	r3, [pc, #580]	; (13b24 <determinant+0x10d0>)
   138de:	1c01      	adds	r1, r0, #0
   138e0:	9810      	ldr	r0, [sp, #64]	; 0x40
   138e2:	4798      	blx	r3
			s = -1 * s;
   138e4:	2280      	movs	r2, #128	; 0x80
   138e6:	0612      	lsls	r2, r2, #24
   138e8:	4694      	mov	ip, r2
   138ea:	0023      	movs	r3, r4
   138ec:	4463      	add	r3, ip
   138ee:	931a      	str	r3, [sp, #104]	; 0x68
   138f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
			det = det + s * (a[0][c] * determinant(b, k - 1));
   138f2:	9010      	str	r0, [sp, #64]	; 0x40
   138f4:	3301      	adds	r3, #1
   138f6:	9309      	str	r3, [sp, #36]	; 0x24
		for (c = 0; c < k; c++)
   138f8:	b2db      	uxtb	r3, r3
   138fa:	469c      	mov	ip, r3
   138fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   138fe:	4563      	cmp	r3, ip
   13900:	d901      	bls.n	13906 <determinant+0xeb2>
   13902:	f7ff fac0 	bl	12e86 <determinant+0x432>
   13906:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
   13908:	4b85      	ldr	r3, [pc, #532]	; (13b20 <determinant+0x10cc>)
   1390a:	981e      	ldr	r0, [sp, #120]	; 0x78
   1390c:	4798      	blx	r3
   1390e:	9c19      	ldr	r4, [sp, #100]	; 0x64
   13910:	4b83      	ldr	r3, [pc, #524]	; (13b20 <determinant+0x10cc>)
   13912:	1c21      	adds	r1, r4, #0
   13914:	4798      	blx	r3
   13916:	4b83      	ldr	r3, [pc, #524]	; (13b24 <determinant+0x10d0>)
   13918:	1c01      	adds	r1, r0, #0
   1391a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1391c:	4798      	blx	r3
			s = -1 * s;
   1391e:	2280      	movs	r2, #128	; 0x80
   13920:	0612      	lsls	r2, r2, #24
   13922:	4694      	mov	ip, r2
   13924:	0023      	movs	r3, r4
   13926:	4463      	add	r3, ip
   13928:	9319      	str	r3, [sp, #100]	; 0x64
   1392a:	9b08      	ldr	r3, [sp, #32]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   1392c:	900f      	str	r0, [sp, #60]	; 0x3c
   1392e:	3301      	adds	r3, #1
   13930:	9308      	str	r3, [sp, #32]
		for (c = 0; c < k; c++)
   13932:	b2db      	uxtb	r3, r3
   13934:	469c      	mov	ip, r3
   13936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13938:	4563      	cmp	r3, ip
   1393a:	d901      	bls.n	13940 <determinant+0xeec>
   1393c:	f7ff f98c 	bl	12c58 <determinant+0x204>
   13940:	46aa      	mov	sl, r5
   13942:	1c01      	adds	r1, r0, #0
   13944:	f7ff fb88 	bl	13058 <determinant+0x604>
						n++;
   13948:	3301      	adds	r3, #1
   1394a:	b2db      	uxtb	r3, r3
   1394c:	e6e9      	b.n	13722 <determinant+0xcce>
   1394e:	3301      	adds	r3, #1
   13950:	b2db      	uxtb	r3, r3
   13952:	e6c1      	b.n	136d8 <determinant+0xc84>
   13954:	3301      	adds	r3, #1
   13956:	b2db      	uxtb	r3, r3
   13958:	e699      	b.n	1368e <determinant+0xc3a>
				for (j = 0 ;j < k; j++)
   1395a:	4661      	mov	r1, ip
					b[i][j] = 0;
   1395c:	6066      	str	r6, [r4, #4]
				for (j = 0 ;j < k; j++)
   1395e:	2902      	cmp	r1, #2
   13960:	d100      	bne.n	13964 <determinant+0xf10>
   13962:	e700      	b.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   13964:	4641      	mov	r1, r8
   13966:	60a1      	str	r1, [r4, #8]
				for (j = 0 ;j < k; j++)
   13968:	4661      	mov	r1, ip
   1396a:	2903      	cmp	r1, #3
   1396c:	d100      	bne.n	13970 <determinant+0xf1c>
   1396e:	e6fa      	b.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   13970:	4641      	mov	r1, r8
   13972:	60e1      	str	r1, [r4, #12]
				for (j = 0 ;j < k; j++)
   13974:	4661      	mov	r1, ip
   13976:	2904      	cmp	r1, #4
   13978:	d100      	bne.n	1397c <determinant+0xf28>
   1397a:	e6f4      	b.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   1397c:	4641      	mov	r1, r8
   1397e:	6121      	str	r1, [r4, #16]
				for (j = 0 ;j < k; j++)
   13980:	4661      	mov	r1, ip
   13982:	2905      	cmp	r1, #5
   13984:	d100      	bne.n	13988 <determinant+0xf34>
   13986:	e6ee      	b.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   13988:	4641      	mov	r1, r8
   1398a:	6161      	str	r1, [r4, #20]
   1398c:	9901      	ldr	r1, [sp, #4]
   1398e:	e6ed      	b.n	1376c <determinant+0xd18>
		return (a[0][0]);
   13990:	9bb4      	ldr	r3, [sp, #720]	; 0x2d0
   13992:	9303      	str	r3, [sp, #12]
   13994:	1c19      	adds	r1, r3, #0
   13996:	e761      	b.n	1385c <determinant+0xe08>
   13998:	9b90      	ldr	r3, [sp, #576]	; 0x240
   1399a:	930a      	str	r3, [sp, #40]	; 0x28
   1399c:	1c19      	adds	r1, r3, #0
   1399e:	e779      	b.n	13894 <determinant+0xe40>
				for (j = 0 ;j < k; j++)
   139a0:	464d      	mov	r5, r9
   139a2:	2d04      	cmp	r5, #4
   139a4:	d100      	bne.n	139a8 <determinant+0xf54>
   139a6:	e5b6      	b.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   139a8:	2500      	movs	r5, #0
   139aa:	4647      	mov	r7, r8
   139ac:	610d      	str	r5, [r1, #16]
   139ae:	ad90      	add	r5, sp, #576	; 0x240
   139b0:	46ab      	mov	fp, r5
   139b2:	4007      	ands	r7, r0
   139b4:	0079      	lsls	r1, r7, #1
   139b6:	19c9      	adds	r1, r1, r7
   139b8:	00c9      	lsls	r1, r1, #3
   139ba:	448b      	add	fp, r1
   139bc:	e56e      	b.n	1349c <determinant+0xa48>
				for (j = 0 ;j < k; j++)
   139be:	464d      	mov	r5, r9
   139c0:	2d03      	cmp	r5, #3
   139c2:	d100      	bne.n	139c6 <determinant+0xf72>
   139c4:	e5a7      	b.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   139c6:	2500      	movs	r5, #0
   139c8:	60cd      	str	r5, [r1, #12]
   139ca:	e53e      	b.n	1344a <determinant+0x9f6>
   139cc:	adb4      	add	r5, sp, #720	; 0x2d0
   139ce:	46ab      	mov	fp, r5
   139d0:	2500      	movs	r5, #0
   139d2:	4647      	mov	r7, r8
   139d4:	4459      	add	r1, fp
   139d6:	604d      	str	r5, [r1, #4]
   139d8:	ad90      	add	r5, sp, #576	; 0x240
   139da:	46ab      	mov	fp, r5
   139dc:	4007      	ands	r7, r0
   139de:	0079      	lsls	r1, r7, #1
   139e0:	19c9      	adds	r1, r1, r7
   139e2:	00c9      	lsls	r1, r1, #3
   139e4:	448b      	add	fp, r1
   139e6:	e4e2      	b.n	133ae <determinant+0x95a>
   139e8:	4646      	mov	r6, r8
   139ea:	1861      	adds	r1, r4, r1
   139ec:	604e      	str	r6, [r1, #4]
   139ee:	4656      	mov	r6, sl
   139f0:	4006      	ands	r6, r0
   139f2:	0071      	lsls	r1, r6, #1
   139f4:	1989      	adds	r1, r1, r6
   139f6:	aeb4      	add	r6, sp, #720	; 0x2d0
   139f8:	46b3      	mov	fp, r6
   139fa:	00c9      	lsls	r1, r1, #3
   139fc:	448b      	add	fp, r1
   139fe:	e614      	b.n	1362a <determinant+0xbd6>
				for (j = 0 ;j < k; j++)
   13a00:	4667      	mov	r7, ip
   13a02:	2f02      	cmp	r7, #2
   13a04:	d100      	bne.n	13a08 <determinant+0xfb4>
   13a06:	e6ae      	b.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   13a08:	4647      	mov	r7, r8
   13a0a:	60b7      	str	r7, [r6, #8]
   13a0c:	e631      	b.n	13672 <determinant+0xc1e>
				for (j = 0 ;j < k; j++)
   13a0e:	4666      	mov	r6, ip
   13a10:	2e04      	cmp	r6, #4
   13a12:	d100      	bne.n	13a16 <determinant+0xfc2>
   13a14:	e6a7      	b.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   13a16:	4646      	mov	r6, r8
   13a18:	610e      	str	r6, [r1, #16]
   13a1a:	e669      	b.n	136f0 <determinant+0xc9c>
				for (j = 0 ;j < k; j++)
   13a1c:	4666      	mov	r6, ip
   13a1e:	2e03      	cmp	r6, #3
   13a20:	d100      	bne.n	13a24 <determinant+0xfd0>
   13a22:	e6a0      	b.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   13a24:	4646      	mov	r6, r8
   13a26:	60ce      	str	r6, [r1, #12]
   13a28:	e63d      	b.n	136a6 <determinant+0xc52>
				for (j = 0 ;j < k; j++)
   13a2a:	4665      	mov	r5, ip
   13a2c:	2d05      	cmp	r5, #5
   13a2e:	d100      	bne.n	13a32 <determinant+0xfde>
   13a30:	e699      	b.n	13766 <determinant+0xd12>
					b[i][j] = 0;
   13a32:	4645      	mov	r5, r8
   13a34:	614d      	str	r5, [r1, #20]
   13a36:	e67f      	b.n	13738 <determinant+0xce4>
				for (j = 0 ;j < k; j++)
   13a38:	464d      	mov	r5, r9
   13a3a:	2d02      	cmp	r5, #2
   13a3c:	d100      	bne.n	13a40 <determinant+0xfec>
   13a3e:	e56a      	b.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   13a40:	2500      	movs	r5, #0
   13a42:	60bd      	str	r5, [r7, #8]
   13a44:	e4df      	b.n	13406 <determinant+0x9b2>
				for (j = 0 ;j < k; j++)
   13a46:	464c      	mov	r4, r9
   13a48:	2c05      	cmp	r4, #5
   13a4a:	d100      	bne.n	13a4e <determinant+0xffa>
   13a4c:	e563      	b.n	13516 <determinant+0xac2>
					b[i][j] = 0;
   13a4e:	2400      	movs	r4, #0
   13a50:	617c      	str	r4, [r7, #20]
   13a52:	e54d      	b.n	134f0 <determinant+0xa9c>
		return (a[0][0]);
   13a54:	9b48      	ldr	r3, [sp, #288]	; 0x120
   13a56:	9310      	str	r3, [sp, #64]	; 0x40
   13a58:	1c19      	adds	r1, r3, #0
   13a5a:	e755      	b.n	13908 <determinant+0xeb4>
				for (j = 0 ;j < k; j++)
   13a5c:	4654      	mov	r4, sl
   13a5e:	2c03      	cmp	r4, #3
   13a60:	d101      	bne.n	13a66 <determinant+0x1012>
   13a62:	f7ff f980 	bl	12d66 <determinant+0x312>
					b[i][j] = 0;
   13a66:	60c8      	str	r0, [r1, #12]
   13a68:	f7ff f93e 	bl	12ce8 <determinant+0x294>
   13a6c:	6048      	str	r0, [r1, #4]
   13a6e:	f7ff f909 	bl	12c84 <determinant+0x230>
				for (j = 0 ;j < k; j++)
   13a72:	2c05      	cmp	r4, #5
   13a74:	d101      	bne.n	13a7a <determinant+0x1026>
   13a76:	f7ff fa96 	bl	12fa6 <determinant+0x552>
					b[i][j] = 0;
   13a7a:	4648      	mov	r0, r9
   13a7c:	6148      	str	r0, [r1, #20]
   13a7e:	f7ff fa81 	bl	12f84 <determinant+0x530>
				for (j = 0 ;j < k; j++)
   13a82:	2c04      	cmp	r4, #4
   13a84:	d101      	bne.n	13a8a <determinant+0x1036>
   13a86:	f7ff fa8e 	bl	12fa6 <determinant+0x552>
					b[i][j] = 0;
   13a8a:	4648      	mov	r0, r9
   13a8c:	6108      	str	r0, [r1, #16]
   13a8e:	f7ff fa61 	bl	12f54 <determinant+0x500>
				for (j = 0 ;j < k; j++)
   13a92:	2c03      	cmp	r4, #3
   13a94:	d101      	bne.n	13a9a <determinant+0x1046>
   13a96:	f7ff fa86 	bl	12fa6 <determinant+0x552>
					b[i][j] = 0;
   13a9a:	4648      	mov	r0, r9
   13a9c:	60c8      	str	r0, [r1, #12]
   13a9e:	f7ff fa3f 	bl	12f20 <determinant+0x4cc>
				for (j = 0 ;j < k; j++)
   13aa2:	9c00      	ldr	r4, [sp, #0]
   13aa4:	2c02      	cmp	r4, #2
   13aa6:	d101      	bne.n	13aac <determinant+0x1058>
   13aa8:	f7ff fbea 	bl	13280 <determinant+0x82c>
					b[i][j] = 0;
   13aac:	60b5      	str	r5, [r6, #8]
   13aae:	f7ff fb61 	bl	13174 <determinant+0x720>
   13ab2:	4648      	mov	r0, r9
   13ab4:	6048      	str	r0, [r1, #4]
   13ab6:	f7ff f9fe 	bl	12eb6 <determinant+0x462>
				for (j = 0 ;j < k; j++)
   13aba:	9c00      	ldr	r4, [sp, #0]
   13abc:	2c05      	cmp	r4, #5
   13abe:	d101      	bne.n	13ac4 <determinant+0x1070>
   13ac0:	f7ff fbde 	bl	13280 <determinant+0x82c>
					b[i][j] = 0;
   13ac4:	6175      	str	r5, [r6, #20]
   13ac6:	f7ff fbc9 	bl	1325c <determinant+0x808>
				for (j = 0 ;j < k; j++)
   13aca:	9c00      	ldr	r4, [sp, #0]
   13acc:	2c04      	cmp	r4, #4
   13ace:	d101      	bne.n	13ad4 <determinant+0x1080>
   13ad0:	f7ff fbd6 	bl	13280 <determinant+0x82c>
   13ad4:	4666      	mov	r6, ip
   13ad6:	ac6c      	add	r4, sp, #432	; 0x1b0
   13ad8:	46a3      	mov	fp, r4
   13ada:	4006      	ands	r6, r0
					b[i][j] = 0;
   13adc:	6115      	str	r5, [r2, #16]
   13ade:	0072      	lsls	r2, r6, #1
   13ae0:	1992      	adds	r2, r2, r6
   13ae2:	00d2      	lsls	r2, r2, #3
   13ae4:	4493      	add	fp, r2
   13ae6:	f7ff fb90 	bl	1320a <determinant+0x7b6>
				for (j = 0 ;j < k; j++)
   13aea:	9c00      	ldr	r4, [sp, #0]
   13aec:	2c03      	cmp	r4, #3
   13aee:	d101      	bne.n	13af4 <determinant+0x10a0>
   13af0:	f7ff fbc6 	bl	13280 <determinant+0x82c>
					b[i][j] = 0;
   13af4:	60d5      	str	r5, [r2, #12]
   13af6:	f7ff fb5f 	bl	131b8 <determinant+0x764>
   13afa:	ac90      	add	r4, sp, #576	; 0x240
   13afc:	46a3      	mov	fp, r4
   13afe:	4666      	mov	r6, ip
   13b00:	ac6c      	add	r4, sp, #432	; 0x1b0
   13b02:	445a      	add	r2, fp
   13b04:	46a3      	mov	fp, r4
   13b06:	4006      	ands	r6, r0
   13b08:	6055      	str	r5, [r2, #4]
   13b0a:	0072      	lsls	r2, r6, #1
   13b0c:	1992      	adds	r2, r2, r6
   13b0e:	00d2      	lsls	r2, r2, #3
   13b10:	4493      	add	fp, r2
   13b12:	f7ff fb03 	bl	1311c <determinant+0x6c8>
		return (a[0][0]);
   13b16:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
   13b18:	9311      	str	r3, [sp, #68]	; 0x44
   13b1a:	1c19      	adds	r1, r3, #0
   13b1c:	e6d7      	b.n	138ce <determinant+0xe7a>
   13b1e:	46c0      	nop			; (mov r8, r8)
   13b20:	00026559 	.word	0x00026559
   13b24:	00025e55 	.word	0x00025e55

00013b28 <inverse>:
{
   13b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b2a:	46de      	mov	lr, fp
   13b2c:	4657      	mov	r7, sl
   13b2e:	464e      	mov	r6, r9
   13b30:	4645      	mov	r5, r8
   13b32:	b5e0      	push	{r5, r6, r7, lr}
   13b34:	4c9b      	ldr	r4, [pc, #620]	; (13da4 <inverse+0x27c>)
   13b36:	0013      	movs	r3, r2
   13b38:	44a5      	add	sp, r4
   13b3a:	9004      	str	r0, [sp, #16]
   13b3c:	9109      	str	r1, [sp, #36]	; 0x24
   13b3e:	920a      	str	r2, [sp, #40]	; 0x28
	for (q = 0;q < f; q++)
   13b40:	2a00      	cmp	r2, #0
   13b42:	d101      	bne.n	13b48 <inverse+0x20>
   13b44:	f000 fc36 	bl	143b4 <inverse+0x88c>
   13b48:	3b01      	subs	r3, #1
   13b4a:	b2df      	uxtb	r7, r3
   13b4c:	9313      	str	r3, [sp, #76]	; 0x4c
   13b4e:	ab38      	add	r3, sp, #224	; 0xe0
   13b50:	9310      	str	r3, [sp, #64]	; 0x40
   13b52:	1c7b      	adds	r3, r7, #1
   13b54:	9312      	str	r3, [sp, #72]	; 0x48
   13b56:	2300      	movs	r3, #0
   13b58:	003e      	movs	r6, r7
   13b5a:	930c      	str	r3, [sp, #48]	; 0x30
   13b5c:	466b      	mov	r3, sp
   13b5e:	2230      	movs	r2, #48	; 0x30
   13b60:	189b      	adds	r3, r3, r2
   13b62:	781b      	ldrb	r3, [r3, #0]
   13b64:	9311      	str	r3, [sp, #68]	; 0x44
		for (c = 0; c < k; c++)
   13b66:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13b68:	930d      	str	r3, [sp, #52]	; 0x34
   13b6a:	2300      	movs	r3, #0
   13b6c:	9308      	str	r3, [sp, #32]
   13b6e:	2220      	movs	r2, #32
   13b70:	466b      	mov	r3, sp
   13b72:	189b      	adds	r3, r3, r2
   13b74:	781d      	ldrb	r5, [r3, #0]
   13b76:	9b04      	ldr	r3, [sp, #16]
   13b78:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13b7a:	469c      	mov	ip, r3
							n = 0;
   13b7c:	2300      	movs	r3, #0
   13b7e:	4698      	mov	r8, r3
						if (n < (f - 2))
   13b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b82:	46b2      	mov	sl, r6
   13b84:	1e9c      	subs	r4, r3, #2
   13b86:	0026      	movs	r6, r4
							n = 0;
   13b88:	2100      	movs	r1, #0
   13b8a:	2000      	movs	r0, #0
   13b8c:	4691      	mov	r9, r2
   13b8e:	001c      	movs	r4, r3
{
   13b90:	4667      	mov	r7, ip
   13b92:	2200      	movs	r2, #0
   13b94:	45c1      	cmp	r9, r8
   13b96:	d021      	beq.n	13bdc <inverse+0xb4>
   13b98:	46ab      	mov	fp, r5
   13b9a:	9400      	str	r4, [sp, #0]
   13b9c:	e007      	b.n	13bae <inverse+0x86>
						n++;
   13b9e:	3101      	adds	r1, #1
   13ba0:	b2c9      	uxtb	r1, r1
				for (j = 0;j < f; j++)
   13ba2:	3201      	adds	r2, #1
   13ba4:	9b00      	ldr	r3, [sp, #0]
   13ba6:	b2d2      	uxtb	r2, r2
   13ba8:	3704      	adds	r7, #4
   13baa:	4293      	cmp	r3, r2
   13bac:	d014      	beq.n	13bd8 <inverse+0xb0>
					if (i != q && j != p)
   13bae:	4593      	cmp	fp, r2
   13bb0:	d0f7      	beq.n	13ba2 <inverse+0x7a>
						b[m][n] = source[i][j];
   13bb2:	0043      	lsls	r3, r0, #1
   13bb4:	181b      	adds	r3, r3, r0
   13bb6:	005b      	lsls	r3, r3, #1
   13bb8:	185b      	adds	r3, r3, r1
   13bba:	683d      	ldr	r5, [r7, #0]
   13bbc:	009b      	lsls	r3, r3, #2
   13bbe:	ac14      	add	r4, sp, #80	; 0x50
   13bc0:	50e5      	str	r5, [r4, r3]
						if (n < (f - 2))
   13bc2:	42b1      	cmp	r1, r6
   13bc4:	dbeb      	blt.n	13b9e <inverse+0x76>
				for (j = 0;j < f; j++)
   13bc6:	3201      	adds	r2, #1
   13bc8:	9b00      	ldr	r3, [sp, #0]
							m++;
   13bca:	3001      	adds	r0, #1
				for (j = 0;j < f; j++)
   13bcc:	b2d2      	uxtb	r2, r2
							m++;
   13bce:	b2c0      	uxtb	r0, r0
							n = 0;
   13bd0:	2100      	movs	r1, #0
   13bd2:	3704      	adds	r7, #4
				for (j = 0;j < f; j++)
   13bd4:	4293      	cmp	r3, r2
   13bd6:	d1ea      	bne.n	13bae <inverse+0x86>
   13bd8:	465d      	mov	r5, fp
   13bda:	001c      	movs	r4, r3
   13bdc:	2218      	movs	r2, #24
			for (i = 0;i < f; i++)
   13bde:	4643      	mov	r3, r8
   13be0:	4693      	mov	fp, r2
   13be2:	3301      	adds	r3, #1
   13be4:	b2db      	uxtb	r3, r3
   13be6:	44dc      	add	ip, fp
   13be8:	429c      	cmp	r4, r3
   13bea:	d001      	beq.n	13bf0 <inverse+0xc8>
   13bec:	4698      	mov	r8, r3
   13bee:	e7cf      	b.n	13b90 <inverse+0x68>
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
   13bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13bf2:	930b      	str	r3, [sp, #44]	; 0x2c
   13bf4:	4694      	mov	ip, r2
   13bf6:	9b08      	ldr	r3, [sp, #32]
   13bf8:	4656      	mov	r6, sl
   13bfa:	4463      	add	r3, ip
   13bfc:	0018      	movs	r0, r3
   13bfe:	4b6a      	ldr	r3, [pc, #424]	; (13da8 <inverse+0x280>)
   13c00:	4798      	blx	r3
   13c02:	4c6a      	ldr	r4, [pc, #424]	; (13dac <inverse+0x284>)
   13c04:	0002      	movs	r2, r0
   13c06:	000b      	movs	r3, r1
   13c08:	2000      	movs	r0, #0
   13c0a:	4969      	ldr	r1, [pc, #420]	; (13db0 <inverse+0x288>)
   13c0c:	47a0      	blx	r4
   13c0e:	900e      	str	r0, [sp, #56]	; 0x38
   13c10:	910f      	str	r1, [sp, #60]	; 0x3c
	if (k == 1)
   13c12:	2e01      	cmp	r6, #1
   13c14:	d100      	bne.n	13c18 <inverse+0xf0>
   13c16:	e2de      	b.n	141d6 <inverse+0x6ae>
		for (c = 0; c < k; c++)
   13c18:	2e00      	cmp	r6, #0
   13c1a:	d100      	bne.n	13c1e <inverse+0xf6>
   13c1c:	e2df      	b.n	141de <inverse+0x6b6>
   13c1e:	2300      	movs	r3, #0
   13c20:	9301      	str	r3, [sp, #4]
   13c22:	2300      	movs	r3, #0
   13c24:	9302      	str	r3, [sp, #8]
   13c26:	23fe      	movs	r3, #254	; 0xfe
   13c28:	059b      	lsls	r3, r3, #22
   13c2a:	9303      	str	r3, [sp, #12]
   13c2c:	2300      	movs	r3, #0
   13c2e:	469b      	mov	fp, r3
   13c30:	4643      	mov	r3, r8
   13c32:	3b01      	subs	r3, #1
   13c34:	46dc      	mov	ip, fp
   13c36:	469b      	mov	fp, r3
   13c38:	4a5e      	ldr	r2, [pc, #376]	; (13db4 <inverse+0x28c>)
   13c3a:	ac80      	add	r4, sp, #512	; 0x200
   13c3c:	9207      	str	r2, [sp, #28]
   13c3e:	4a5e      	ldr	r2, [pc, #376]	; (13db8 <inverse+0x290>)
   13c40:	9206      	str	r2, [sp, #24]
   13c42:	4a5e      	ldr	r2, [pc, #376]	; (13dbc <inverse+0x294>)
   13c44:	9205      	str	r2, [sp, #20]
   13c46:	2301      	movs	r3, #1
					b[i][j] = 0;
   13c48:	2100      	movs	r1, #0
		for (c = 0; c < k; c++)
   13c4a:	4699      	mov	r9, r3
					b[i][j] = 0;
   13c4c:	4688      	mov	r8, r1
   13c4e:	9901      	ldr	r1, [sp, #4]
   13c50:	1eb7      	subs	r7, r6, #2
   13c52:	468a      	mov	sl, r1
   13c54:	4649      	mov	r1, r9
   13c56:	0020      	movs	r0, r4
   13c58:	46b1      	mov	r9, r6
   13c5a:	ad14      	add	r5, sp, #80	; 0x50
		for (c = 0; c < k; c++)
   13c5c:	2300      	movs	r3, #0
   13c5e:	2200      	movs	r2, #0
   13c60:	9100      	str	r1, [sp, #0]
   13c62:	003e      	movs	r6, r7
   13c64:	e078      	b.n	13d58 <inverse+0x230>
					b[i][j] = 0;
   13c66:	4641      	mov	r1, r8
   13c68:	6041      	str	r1, [r0, #4]
					if (i != 0 && j != c)
   13c6a:	4661      	mov	r1, ip
							m++;
   13c6c:	3201      	adds	r2, #1
   13c6e:	b2d2      	uxtb	r2, r2
							n = 0;
   13c70:	2300      	movs	r3, #0
					if (i != 0 && j != c)
   13c72:	2901      	cmp	r1, #1
   13c74:	d100      	bne.n	13c78 <inverse+0x150>
   13c76:	e08c      	b.n	13d92 <inverse+0x26a>
						b[m][n] = a[i][j];
   13c78:	0051      	lsls	r1, r2, #1
   13c7a:	1889      	adds	r1, r1, r2
   13c7c:	0049      	lsls	r1, r1, #1
   13c7e:	18c9      	adds	r1, r1, r3
   13c80:	686f      	ldr	r7, [r5, #4]
   13c82:	0089      	lsls	r1, r1, #2
   13c84:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
   13c86:	429e      	cmp	r6, r3
   13c88:	dd00      	ble.n	13c8c <inverse+0x164>
   13c8a:	e099      	b.n	13dc0 <inverse+0x298>
				for (j = 0 ;j < k; j++)
   13c8c:	4649      	mov	r1, r9
							m++;
   13c8e:	3201      	adds	r2, #1
   13c90:	b2d2      	uxtb	r2, r2
							n = 0;
   13c92:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
   13c94:	2902      	cmp	r1, #2
   13c96:	d100      	bne.n	13c9a <inverse+0x172>
   13c98:	e098      	b.n	13dcc <inverse+0x2a4>
					b[i][j] = 0;
   13c9a:	4641      	mov	r1, r8
   13c9c:	6081      	str	r1, [r0, #8]
					if (i != 0 && j != c)
   13c9e:	4651      	mov	r1, sl
   13ca0:	2902      	cmp	r1, #2
   13ca2:	d101      	bne.n	13ca8 <inverse+0x180>
   13ca4:	f000 fc5a 	bl	1455c <inverse+0xa34>
						b[m][n] = a[i][j];
   13ca8:	0051      	lsls	r1, r2, #1
   13caa:	1889      	adds	r1, r1, r2
   13cac:	0049      	lsls	r1, r1, #1
   13cae:	18c9      	adds	r1, r1, r3
   13cb0:	68af      	ldr	r7, [r5, #8]
   13cb2:	0089      	lsls	r1, r1, #2
   13cb4:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
   13cb6:	429e      	cmp	r6, r3
   13cb8:	dc71      	bgt.n	13d9e <inverse+0x276>
							n = 0;
   13cba:	2300      	movs	r3, #0
							m++;
   13cbc:	3201      	adds	r2, #1
   13cbe:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   13cc0:	4649      	mov	r1, r9
   13cc2:	2903      	cmp	r1, #3
   13cc4:	d03f      	beq.n	13d46 <inverse+0x21e>
					b[i][j] = 0;
   13cc6:	4641      	mov	r1, r8
   13cc8:	60c1      	str	r1, [r0, #12]
					if (i != 0 && j != c)
   13cca:	4651      	mov	r1, sl
   13ccc:	2903      	cmp	r1, #3
   13cce:	d101      	bne.n	13cd4 <inverse+0x1ac>
   13cd0:	f000 fc37 	bl	14542 <inverse+0xa1a>
						b[m][n] = a[i][j];
   13cd4:	0051      	lsls	r1, r2, #1
   13cd6:	1889      	adds	r1, r1, r2
   13cd8:	0049      	lsls	r1, r1, #1
   13cda:	18c9      	adds	r1, r1, r3
   13cdc:	68ef      	ldr	r7, [r5, #12]
   13cde:	0089      	lsls	r1, r1, #2
   13ce0:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
   13ce2:	42b3      	cmp	r3, r6
   13ce4:	da00      	bge.n	13ce8 <inverse+0x1c0>
   13ce6:	e24b      	b.n	14180 <inverse+0x658>
							n = 0;
   13ce8:	2300      	movs	r3, #0
							m++;
   13cea:	3201      	adds	r2, #1
   13cec:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   13cee:	4649      	mov	r1, r9
   13cf0:	2904      	cmp	r1, #4
   13cf2:	d028      	beq.n	13d46 <inverse+0x21e>
					b[i][j] = 0;
   13cf4:	4641      	mov	r1, r8
   13cf6:	6101      	str	r1, [r0, #16]
					if (i != 0 && j != c)
   13cf8:	4651      	mov	r1, sl
   13cfa:	2904      	cmp	r1, #4
   13cfc:	d101      	bne.n	13d02 <inverse+0x1da>
   13cfe:	f000 fc17 	bl	14530 <inverse+0xa08>
						b[m][n] = a[i][j];
   13d02:	0051      	lsls	r1, r2, #1
   13d04:	1889      	adds	r1, r1, r2
   13d06:	0049      	lsls	r1, r1, #1
   13d08:	18c9      	adds	r1, r1, r3
   13d0a:	692f      	ldr	r7, [r5, #16]
   13d0c:	0089      	lsls	r1, r1, #2
   13d0e:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
   13d10:	429e      	cmp	r6, r3
   13d12:	dd00      	ble.n	13d16 <inverse+0x1ee>
   13d14:	e231      	b.n	1417a <inverse+0x652>
							n = 0;
   13d16:	2300      	movs	r3, #0
							m++;
   13d18:	3201      	adds	r2, #1
   13d1a:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   13d1c:	4649      	mov	r1, r9
   13d1e:	2905      	cmp	r1, #5
   13d20:	d011      	beq.n	13d46 <inverse+0x21e>
					b[i][j] = 0;
   13d22:	4641      	mov	r1, r8
   13d24:	6141      	str	r1, [r0, #20]
					if (i != 0 && j != c)
   13d26:	4651      	mov	r1, sl
   13d28:	2905      	cmp	r1, #5
   13d2a:	d00c      	beq.n	13d46 <inverse+0x21e>
						b[m][n] = a[i][j];
   13d2c:	0051      	lsls	r1, r2, #1
   13d2e:	1889      	adds	r1, r1, r2
   13d30:	0049      	lsls	r1, r1, #1
   13d32:	18c9      	adds	r1, r1, r3
   13d34:	696f      	ldr	r7, [r5, #20]
   13d36:	0089      	lsls	r1, r1, #2
   13d38:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
   13d3a:	429e      	cmp	r6, r3
   13d3c:	dd00      	ble.n	13d40 <inverse+0x218>
   13d3e:	e219      	b.n	14174 <inverse+0x64c>
							n = 0;
   13d40:	2300      	movs	r3, #0
							m++;
   13d42:	3201      	adds	r2, #1
   13d44:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
   13d46:	9900      	ldr	r1, [sp, #0]
   13d48:	4589      	cmp	r9, r1
   13d4a:	d93f      	bls.n	13dcc <inverse+0x2a4>
   13d4c:	9f00      	ldr	r7, [sp, #0]
   13d4e:	3018      	adds	r0, #24
   13d50:	3701      	adds	r7, #1
   13d52:	b2f9      	uxtb	r1, r7
   13d54:	9100      	str	r1, [sp, #0]
   13d56:	3518      	adds	r5, #24
					b[i][j] = 0;
   13d58:	4641      	mov	r1, r8
   13d5a:	6001      	str	r1, [r0, #0]
					if (i != 0 && j != c)
   13d5c:	9900      	ldr	r1, [sp, #0]
   13d5e:	2901      	cmp	r1, #1
   13d60:	d100      	bne.n	13d64 <inverse+0x23c>
   13d62:	e21d      	b.n	141a0 <inverse+0x678>
   13d64:	4651      	mov	r1, sl
   13d66:	2900      	cmp	r1, #0
   13d68:	d101      	bne.n	13d6e <inverse+0x246>
   13d6a:	f000 fc00 	bl	1456e <inverse+0xa46>
						b[m][n] = a[i][j];
   13d6e:	0051      	lsls	r1, r2, #1
   13d70:	1889      	adds	r1, r1, r2
   13d72:	0049      	lsls	r1, r1, #1
   13d74:	18c9      	adds	r1, r1, r3
   13d76:	682f      	ldr	r7, [r5, #0]
   13d78:	0089      	lsls	r1, r1, #2
   13d7a:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
   13d7c:	42b3      	cmp	r3, r6
   13d7e:	db00      	blt.n	13d82 <inverse+0x25a>
   13d80:	e771      	b.n	13c66 <inverse+0x13e>
					b[i][j] = 0;
   13d82:	4641      	mov	r1, r8
   13d84:	6041      	str	r1, [r0, #4]
					if (i != 0 && j != c)
   13d86:	4661      	mov	r1, ip
						n++;
   13d88:	3301      	adds	r3, #1
   13d8a:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
   13d8c:	2901      	cmp	r1, #1
   13d8e:	d000      	beq.n	13d92 <inverse+0x26a>
   13d90:	e772      	b.n	13c78 <inverse+0x150>
				for (j = 0 ;j < k; j++)
   13d92:	4649      	mov	r1, r9
   13d94:	2902      	cmp	r1, #2
   13d96:	d019      	beq.n	13dcc <inverse+0x2a4>
					b[i][j] = 0;
   13d98:	4641      	mov	r1, r8
   13d9a:	6081      	str	r1, [r0, #8]
   13d9c:	e784      	b.n	13ca8 <inverse+0x180>
						n++;
   13d9e:	3301      	adds	r3, #1
   13da0:	b2db      	uxtb	r3, r3
   13da2:	e78d      	b.n	13cc0 <inverse+0x198>
   13da4:	fffffd6c 	.word	0xfffffd6c
   13da8:	00028699 	.word	0x00028699
   13dac:	0002300d 	.word	0x0002300d
   13db0:	bff00000 	.word	0xbff00000
   13db4:	00012a55 	.word	0x00012a55
   13db8:	00026559 	.word	0x00026559
   13dbc:	00025e55 	.word	0x00025e55
				for (j = 0 ;j < k; j++)
   13dc0:	4649      	mov	r1, r9
						n++;
   13dc2:	3301      	adds	r3, #1
   13dc4:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
   13dc6:	2902      	cmp	r1, #2
   13dc8:	d000      	beq.n	13dcc <inverse+0x2a4>
   13dca:	e766      	b.n	13c9a <inverse+0x172>
			det = det + s * (a[0][c] * determinant(b, k - 1));
   13dcc:	466a      	mov	r2, sp
   13dce:	465b      	mov	r3, fp
   13dd0:	7013      	strb	r3, [r2, #0]
   13dd2:	7811      	ldrb	r1, [r2, #0]
   13dd4:	9b07      	ldr	r3, [sp, #28]
   13dd6:	0020      	movs	r0, r4
   13dd8:	4798      	blx	r3
   13dda:	9d01      	ldr	r5, [sp, #4]
   13ddc:	aa14      	add	r2, sp, #80	; 0x50
   13dde:	00ab      	lsls	r3, r5, #2
   13de0:	58d1      	ldr	r1, [r2, r3]
   13de2:	9f06      	ldr	r7, [sp, #24]
   13de4:	47b8      	blx	r7
   13de6:	9b03      	ldr	r3, [sp, #12]
   13de8:	464e      	mov	r6, r9
   13dea:	1c19      	adds	r1, r3, #0
   13dec:	4698      	mov	r8, r3
   13dee:	47b8      	blx	r7
   13df0:	9b05      	ldr	r3, [sp, #20]
   13df2:	1c01      	adds	r1, r0, #0
   13df4:	9802      	ldr	r0, [sp, #8]
   13df6:	4798      	blx	r3
			s = -1 * s;
   13df8:	2280      	movs	r2, #128	; 0x80
   13dfa:	0612      	lsls	r2, r2, #24
   13dfc:	4694      	mov	ip, r2
   13dfe:	4643      	mov	r3, r8
   13e00:	4463      	add	r3, ip
   13e02:	9303      	str	r3, [sp, #12]
   13e04:	002b      	movs	r3, r5
   13e06:	3301      	adds	r3, #1
   13e08:	9301      	str	r3, [sp, #4]
		for (c = 0; c < k; c++)
   13e0a:	b2db      	uxtb	r3, r3
			det = det + s * (a[0][c] * determinant(b, k - 1));
   13e0c:	9002      	str	r0, [sp, #8]
		for (c = 0; c < k; c++)
   13e0e:	469c      	mov	ip, r3
   13e10:	429e      	cmp	r6, r3
   13e12:	d900      	bls.n	13e16 <inverse+0x2ee>
   13e14:	e717      	b.n	13c46 <inverse+0x11e>
   13e16:	4bdc      	ldr	r3, [pc, #880]	; (14188 <inverse+0x660>)
   13e18:	4798      	blx	r3
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
   13e1a:	0002      	movs	r2, r0
   13e1c:	000b      	movs	r3, r1
   13e1e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13e20:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13e22:	4cda      	ldr	r4, [pc, #872]	; (1418c <inverse+0x664>)
   13e24:	47a0      	blx	r4
   13e26:	4bda      	ldr	r3, [pc, #872]	; (14190 <inverse+0x668>)
   13e28:	4798      	blx	r3
   13e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		for (p = 0;p < f; p++)
   13e2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
   13e2e:	c301      	stmia	r3!, {r0}
   13e30:	930d      	str	r3, [sp, #52]	; 0x34
   13e32:	9b08      	ldr	r3, [sp, #32]
   13e34:	3301      	adds	r3, #1
   13e36:	9308      	str	r3, [sp, #32]
		for (p = 0;p < f; p++)
   13e38:	4293      	cmp	r3, r2
   13e3a:	d000      	beq.n	13e3e <inverse+0x316>
   13e3c:	e697      	b.n	13b6e <inverse+0x46>
   13e3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13e42:	3218      	adds	r2, #24
   13e44:	9210      	str	r2, [sp, #64]	; 0x40
	for (q = 0;q < f; q++)
   13e46:	9a08      	ldr	r2, [sp, #32]
   13e48:	3301      	adds	r3, #1
   13e4a:	930c      	str	r3, [sp, #48]	; 0x30
   13e4c:	429a      	cmp	r2, r3
   13e4e:	d000      	beq.n	13e52 <inverse+0x32a>
   13e50:	e684      	b.n	13b5c <inverse+0x34>
   13e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13e54:	2b01      	cmp	r3, #1
   13e56:	d100      	bne.n	13e5a <inverse+0x332>
   13e58:	e2d6      	b.n	14408 <inverse+0x8e0>
   13e5a:	2b02      	cmp	r3, #2
   13e5c:	d100      	bne.n	13e60 <inverse+0x338>
   13e5e:	e35d      	b.n	1451c <inverse+0x9f4>
   13e60:	2b03      	cmp	r3, #3
   13e62:	d100      	bne.n	13e66 <inverse+0x33e>
   13e64:	e346      	b.n	144f4 <inverse+0x9cc>
   13e66:	2b04      	cmp	r3, #4
   13e68:	d100      	bne.n	13e6c <inverse+0x344>
   13e6a:	e321      	b.n	144b0 <inverse+0x988>
			b[i][j] = fac[j][i];
   13e6c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   13e6e:	935c      	str	r3, [sp, #368]	; 0x170
   13e70:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   13e72:	935d      	str	r3, [sp, #372]	; 0x174
   13e74:	9b44      	ldr	r3, [sp, #272]	; 0x110
   13e76:	935e      	str	r3, [sp, #376]	; 0x178
   13e78:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   13e7a:	935f      	str	r3, [sp, #380]	; 0x17c
   13e7c:	9b50      	ldr	r3, [sp, #320]	; 0x140
   13e7e:	9300      	str	r3, [sp, #0]
   13e80:	9360      	str	r3, [sp, #384]	; 0x180
		for (j = 0;j < r; j++)
   13e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13e84:	2b05      	cmp	r3, #5
   13e86:	d100      	bne.n	13e8a <inverse+0x362>
   13e88:	e2e8      	b.n	1445c <inverse+0x934>
			b[i][j] = fac[j][i];
   13e8a:	2290      	movs	r2, #144	; 0x90
   13e8c:	2180      	movs	r1, #128	; 0x80
   13e8e:	9b56      	ldr	r3, [sp, #344]	; 0x158
   13e90:	2090      	movs	r0, #144	; 0x90
   13e92:	9361      	str	r3, [sp, #388]	; 0x184
   13e94:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   13e96:	2490      	movs	r4, #144	; 0x90
   13e98:	9362      	str	r3, [sp, #392]	; 0x188
   13e9a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   13e9c:	9363      	str	r3, [sp, #396]	; 0x18c
   13e9e:	9b45      	ldr	r3, [sp, #276]	; 0x114
   13ea0:	9364      	str	r3, [sp, #400]	; 0x190
   13ea2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   13ea4:	9365      	str	r3, [sp, #404]	; 0x194
   13ea6:	9b51      	ldr	r3, [sp, #324]	; 0x144
   13ea8:	9366      	str	r3, [sp, #408]	; 0x198
   13eaa:	9b57      	ldr	r3, [sp, #348]	; 0x15c
   13eac:	9367      	str	r3, [sp, #412]	; 0x19c
   13eae:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   13eb0:	9368      	str	r3, [sp, #416]	; 0x1a0
   13eb2:	9b40      	ldr	r3, [sp, #256]	; 0x100
   13eb4:	9369      	str	r3, [sp, #420]	; 0x1a4
   13eb6:	9b46      	ldr	r3, [sp, #280]	; 0x118
   13eb8:	936a      	str	r3, [sp, #424]	; 0x1a8
   13eba:	9b4c      	ldr	r3, [sp, #304]	; 0x130
   13ebc:	936b      	str	r3, [sp, #428]	; 0x1ac
   13ebe:	9b52      	ldr	r3, [sp, #328]	; 0x148
   13ec0:	936c      	str	r3, [sp, #432]	; 0x1b0
   13ec2:	ab14      	add	r3, sp, #80	; 0x50
   13ec4:	189b      	adds	r3, r3, r2
   13ec6:	585b      	ldr	r3, [r3, r1]
   13ec8:	3a0c      	subs	r2, #12
   13eca:	936d      	str	r3, [sp, #436]	; 0x1b4
   13ecc:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   13ece:	936e      	str	r3, [sp, #440]	; 0x1b8
   13ed0:	9b41      	ldr	r3, [sp, #260]	; 0x104
   13ed2:	936f      	str	r3, [sp, #444]	; 0x1bc
   13ed4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   13ed6:	9370      	str	r3, [sp, #448]	; 0x1c0
   13ed8:	9b4d      	ldr	r3, [sp, #308]	; 0x134
   13eda:	9371      	str	r3, [sp, #452]	; 0x1c4
   13edc:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   13ede:	9372      	str	r3, [sp, #456]	; 0x1c8
   13ee0:	ab14      	add	r3, sp, #80	; 0x50
   13ee2:	181b      	adds	r3, r3, r0
   13ee4:	589b      	ldr	r3, [r3, r2]
   13ee6:	a814      	add	r0, sp, #80	; 0x50
   13ee8:	9373      	str	r3, [sp, #460]	; 0x1cc
   13eea:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   13eec:	1900      	adds	r0, r0, r4
   13eee:	9374      	str	r3, [sp, #464]	; 0x1d0
   13ef0:	9b42      	ldr	r3, [sp, #264]	; 0x108
   13ef2:	3490      	adds	r4, #144	; 0x90
   13ef4:	9375      	str	r3, [sp, #468]	; 0x1d4
   13ef6:	9b48      	ldr	r3, [sp, #288]	; 0x120
   13ef8:	9376      	str	r3, [sp, #472]	; 0x1d8
   13efa:	9b4e      	ldr	r3, [sp, #312]	; 0x138
   13efc:	9377      	str	r3, [sp, #476]	; 0x1dc
   13efe:	9b54      	ldr	r3, [sp, #336]	; 0x150
   13f00:	9378      	str	r3, [sp, #480]	; 0x1e0
   13f02:	2388      	movs	r3, #136	; 0x88
   13f04:	58c0      	ldr	r0, [r0, r3]
   13f06:	9079      	str	r0, [sp, #484]	; 0x1e4
   13f08:	983d      	ldr	r0, [sp, #244]	; 0xf4
   13f0a:	907a      	str	r0, [sp, #488]	; 0x1e8
   13f0c:	9843      	ldr	r0, [sp, #268]	; 0x10c
   13f0e:	907b      	str	r0, [sp, #492]	; 0x1ec
   13f10:	9849      	ldr	r0, [sp, #292]	; 0x124
   13f12:	9000      	str	r0, [sp, #0]
   13f14:	a814      	add	r0, sp, #80	; 0x50
   13f16:	1900      	adds	r0, r0, r4
   13f18:	9c00      	ldr	r4, [sp, #0]
   13f1a:	5044      	str	r4, [r0, r1]
   13f1c:	2090      	movs	r0, #144	; 0x90
   13f1e:	994f      	ldr	r1, [sp, #316]	; 0x13c
   13f20:	0040      	lsls	r0, r0, #1
   13f22:	9100      	str	r1, [sp, #0]
   13f24:	a914      	add	r1, sp, #80	; 0x50
   13f26:	1809      	adds	r1, r1, r0
   13f28:	9800      	ldr	r0, [sp, #0]
   13f2a:	5088      	str	r0, [r1, r2]
   13f2c:	2190      	movs	r1, #144	; 0x90
   13f2e:	9a55      	ldr	r2, [sp, #340]	; 0x154
   13f30:	0049      	lsls	r1, r1, #1
   13f32:	9200      	str	r2, [sp, #0]
   13f34:	aa14      	add	r2, sp, #80	; 0x50
   13f36:	1852      	adds	r2, r2, r1
   13f38:	9900      	ldr	r1, [sp, #0]
   13f3a:	50d1      	str	r1, [r2, r3]
   13f3c:	2190      	movs	r1, #144	; 0x90
   13f3e:	aa14      	add	r2, sp, #80	; 0x50
   13f40:	3304      	adds	r3, #4
   13f42:	1852      	adds	r2, r2, r1
   13f44:	58d2      	ldr	r2, [r2, r3]
   13f46:	3190      	adds	r1, #144	; 0x90
   13f48:	9200      	str	r2, [sp, #0]
   13f4a:	aa14      	add	r2, sp, #80	; 0x50
   13f4c:	1852      	adds	r2, r2, r1
   13f4e:	9900      	ldr	r1, [sp, #0]
   13f50:	50d1      	str	r1, [r2, r3]
   13f52:	466b      	mov	r3, sp
   13f54:	224c      	movs	r2, #76	; 0x4c
   13f56:	189b      	adds	r3, r3, r2
   13f58:	781b      	ldrb	r3, [r3, #0]
   13f5a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   13f5c:	9307      	str	r3, [sp, #28]
   13f5e:	3301      	adds	r3, #1
   13f60:	9308      	str	r3, [sp, #32]
							n = 0;
   13f62:	2300      	movs	r3, #0
   13f64:	4698      	mov	r8, r3
   13f66:	2300      	movs	r3, #0
   13f68:	469b      	mov	fp, r3
   13f6a:	23fe      	movs	r3, #254	; 0xfe
   13f6c:	059b      	lsls	r3, r3, #22
   13f6e:	9305      	str	r3, [sp, #20]
   13f70:	ab80      	add	r3, sp, #512	; 0x200
   13f72:	4699      	mov	r9, r3
   13f74:	4b87      	ldr	r3, [pc, #540]	; (14194 <inverse+0x66c>)
   13f76:	4647      	mov	r7, r8
   13f78:	930b      	str	r3, [sp, #44]	; 0x2c
   13f7a:	4b87      	ldr	r3, [pc, #540]	; (14198 <inverse+0x670>)
   13f7c:	464c      	mov	r4, r9
   13f7e:	930c      	str	r3, [sp, #48]	; 0x30
   13f80:	4b86      	ldr	r3, [pc, #536]	; (1419c <inverse+0x674>)
   13f82:	930d      	str	r3, [sp, #52]	; 0x34
   13f84:	465b      	mov	r3, fp
   13f86:	9303      	str	r3, [sp, #12]
   13f88:	b2fb      	uxtb	r3, r7
   13f8a:	1ea8      	subs	r0, r5, #2
   13f8c:	9306      	str	r3, [sp, #24]
   13f8e:	4682      	mov	sl, r0
	for (q = 0;q < f; q++)
   13f90:	2301      	movs	r3, #1
						b[m][n] = a[i][j];
   13f92:	20ff      	movs	r0, #255	; 0xff
	for (q = 0;q < f; q++)
   13f94:	9301      	str	r3, [sp, #4]
   13f96:	2100      	movs	r1, #0
   13f98:	2300      	movs	r3, #0
   13f9a:	2200      	movs	r2, #0
					b[i][j] = 0;
   13f9c:	2600      	movs	r6, #0
						b[m][n] = a[i][j];
   13f9e:	4681      	mov	r9, r0
   13fa0:	46bc      	mov	ip, r7
   13fa2:	e0c1      	b.n	14128 <inverse+0x600>
							n = 0;
   13fa4:	2300      	movs	r3, #0
							m++;
   13fa6:	3201      	adds	r2, #1
   13fa8:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   13faa:	2d01      	cmp	r5, #1
   13fac:	d100      	bne.n	13fb0 <inverse+0x488>
   13fae:	e0b3      	b.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   13fb0:	9800      	ldr	r0, [sp, #0]
   13fb2:	1847      	adds	r7, r0, r1
   13fb4:	00ff      	lsls	r7, r7, #3
					if (i != 0 && j != c)
   13fb6:	9806      	ldr	r0, [sp, #24]
					b[i][j] = 0;
   13fb8:	19e7      	adds	r7, r4, r7
   13fba:	607e      	str	r6, [r7, #4]
					if (i != 0 && j != c)
   13fbc:	2801      	cmp	r0, #1
   13fbe:	d100      	bne.n	13fc2 <inverse+0x49a>
   13fc0:	e23d      	b.n	1443e <inverse+0x916>
						b[m][n] = a[i][j];
   13fc2:	4648      	mov	r0, r9
   13fc4:	4008      	ands	r0, r1
   13fc6:	4683      	mov	fp, r0
   13fc8:	0040      	lsls	r0, r0, #1
   13fca:	4680      	mov	r8, r0
   13fcc:	44d8      	add	r8, fp
   13fce:	4640      	mov	r0, r8
   13fd0:	00c0      	lsls	r0, r0, #3
   13fd2:	4680      	mov	r8, r0
   13fd4:	9804      	ldr	r0, [sp, #16]
   13fd6:	0057      	lsls	r7, r2, #1
   13fd8:	4683      	mov	fp, r0
   13fda:	44d8      	add	r8, fp
   13fdc:	4640      	mov	r0, r8
   13fde:	18bf      	adds	r7, r7, r2
   13fe0:	007f      	lsls	r7, r7, #1
   13fe2:	18ff      	adds	r7, r7, r3
   13fe4:	6840      	ldr	r0, [r0, #4]
   13fe6:	00bf      	lsls	r7, r7, #2
   13fe8:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
   13fea:	4553      	cmp	r3, sl
   13fec:	da00      	bge.n	13ff0 <inverse+0x4c8>
   13fee:	e1f3      	b.n	143d8 <inverse+0x8b0>
							n = 0;
   13ff0:	2300      	movs	r3, #0
							m++;
   13ff2:	3201      	adds	r2, #1
   13ff4:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   13ff6:	2d02      	cmp	r5, #2
   13ff8:	d100      	bne.n	13ffc <inverse+0x4d4>
   13ffa:	e08d      	b.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   13ffc:	9800      	ldr	r0, [sp, #0]
   13ffe:	1847      	adds	r7, r0, r1
					if (i != 0 && j != c)
   14000:	4660      	mov	r0, ip
					b[i][j] = 0;
   14002:	00ff      	lsls	r7, r7, #3
   14004:	19e7      	adds	r7, r4, r7
   14006:	60be      	str	r6, [r7, #8]
					if (i != 0 && j != c)
   14008:	2802      	cmp	r0, #2
   1400a:	d100      	bne.n	1400e <inverse+0x4e6>
   1400c:	e212      	b.n	14434 <inverse+0x90c>
						b[m][n] = a[i][j];
   1400e:	4648      	mov	r0, r9
   14010:	4008      	ands	r0, r1
   14012:	4683      	mov	fp, r0
   14014:	0040      	lsls	r0, r0, #1
   14016:	4680      	mov	r8, r0
   14018:	44d8      	add	r8, fp
   1401a:	4640      	mov	r0, r8
   1401c:	00c0      	lsls	r0, r0, #3
   1401e:	4680      	mov	r8, r0
   14020:	9804      	ldr	r0, [sp, #16]
   14022:	0057      	lsls	r7, r2, #1
   14024:	4683      	mov	fp, r0
   14026:	44d8      	add	r8, fp
   14028:	4640      	mov	r0, r8
   1402a:	18bf      	adds	r7, r7, r2
   1402c:	007f      	lsls	r7, r7, #1
   1402e:	18ff      	adds	r7, r7, r3
   14030:	6880      	ldr	r0, [r0, #8]
   14032:	00bf      	lsls	r7, r7, #2
   14034:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
   14036:	4553      	cmp	r3, sl
   14038:	da00      	bge.n	1403c <inverse+0x514>
   1403a:	e1ca      	b.n	143d2 <inverse+0x8aa>
							n = 0;
   1403c:	2300      	movs	r3, #0
							m++;
   1403e:	3201      	adds	r2, #1
   14040:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   14042:	2d03      	cmp	r5, #3
   14044:	d068      	beq.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   14046:	9800      	ldr	r0, [sp, #0]
   14048:	1847      	adds	r7, r0, r1
					if (i != 0 && j != c)
   1404a:	4660      	mov	r0, ip
					b[i][j] = 0;
   1404c:	00ff      	lsls	r7, r7, #3
   1404e:	19e7      	adds	r7, r4, r7
   14050:	60fe      	str	r6, [r7, #12]
					if (i != 0 && j != c)
   14052:	2803      	cmp	r0, #3
   14054:	d100      	bne.n	14058 <inverse+0x530>
   14056:	e1fc      	b.n	14452 <inverse+0x92a>
						b[m][n] = a[i][j];
   14058:	4648      	mov	r0, r9
   1405a:	4008      	ands	r0, r1
   1405c:	4683      	mov	fp, r0
   1405e:	0040      	lsls	r0, r0, #1
   14060:	4680      	mov	r8, r0
   14062:	44d8      	add	r8, fp
   14064:	4640      	mov	r0, r8
   14066:	00c0      	lsls	r0, r0, #3
   14068:	4680      	mov	r8, r0
   1406a:	9804      	ldr	r0, [sp, #16]
   1406c:	0057      	lsls	r7, r2, #1
   1406e:	4683      	mov	fp, r0
   14070:	44d8      	add	r8, fp
   14072:	4640      	mov	r0, r8
   14074:	18bf      	adds	r7, r7, r2
   14076:	007f      	lsls	r7, r7, #1
   14078:	18ff      	adds	r7, r7, r3
   1407a:	68c0      	ldr	r0, [r0, #12]
   1407c:	00bf      	lsls	r7, r7, #2
   1407e:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
   14080:	4553      	cmp	r3, sl
   14082:	da00      	bge.n	14086 <inverse+0x55e>
   14084:	e1a2      	b.n	143cc <inverse+0x8a4>
							n = 0;
   14086:	2300      	movs	r3, #0
							m++;
   14088:	3201      	adds	r2, #1
   1408a:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   1408c:	2d04      	cmp	r5, #4
   1408e:	d043      	beq.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   14090:	9800      	ldr	r0, [sp, #0]
   14092:	1847      	adds	r7, r0, r1
					if (i != 0 && j != c)
   14094:	4660      	mov	r0, ip
					b[i][j] = 0;
   14096:	00ff      	lsls	r7, r7, #3
   14098:	19e7      	adds	r7, r4, r7
   1409a:	613e      	str	r6, [r7, #16]
					if (i != 0 && j != c)
   1409c:	2804      	cmp	r0, #4
   1409e:	d100      	bne.n	140a2 <inverse+0x57a>
   140a0:	e1d2      	b.n	14448 <inverse+0x920>
						b[m][n] = a[i][j];
   140a2:	4648      	mov	r0, r9
   140a4:	4008      	ands	r0, r1
   140a6:	4683      	mov	fp, r0
   140a8:	0040      	lsls	r0, r0, #1
   140aa:	4680      	mov	r8, r0
   140ac:	44d8      	add	r8, fp
   140ae:	4640      	mov	r0, r8
   140b0:	00c0      	lsls	r0, r0, #3
   140b2:	4680      	mov	r8, r0
   140b4:	9804      	ldr	r0, [sp, #16]
   140b6:	0057      	lsls	r7, r2, #1
   140b8:	4683      	mov	fp, r0
   140ba:	44d8      	add	r8, fp
   140bc:	4640      	mov	r0, r8
   140be:	18bf      	adds	r7, r7, r2
   140c0:	007f      	lsls	r7, r7, #1
   140c2:	18ff      	adds	r7, r7, r3
   140c4:	6900      	ldr	r0, [r0, #16]
   140c6:	00bf      	lsls	r7, r7, #2
   140c8:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
   140ca:	4553      	cmp	r3, sl
   140cc:	da00      	bge.n	140d0 <inverse+0x5a8>
   140ce:	e17a      	b.n	143c6 <inverse+0x89e>
							n = 0;
   140d0:	2300      	movs	r3, #0
							m++;
   140d2:	3201      	adds	r2, #1
   140d4:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
   140d6:	2d05      	cmp	r5, #5
   140d8:	d01e      	beq.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   140da:	9800      	ldr	r0, [sp, #0]
   140dc:	1840      	adds	r0, r0, r1
   140de:	00c0      	lsls	r0, r0, #3
   140e0:	1820      	adds	r0, r4, r0
   140e2:	6146      	str	r6, [r0, #20]
					if (i != 0 && j != c)
   140e4:	4660      	mov	r0, ip
   140e6:	2805      	cmp	r0, #5
   140e8:	d016      	beq.n	14118 <inverse+0x5f0>
						b[m][n] = a[i][j];
   140ea:	464f      	mov	r7, r9
   140ec:	400f      	ands	r7, r1
   140ee:	46b8      	mov	r8, r7
   140f0:	0050      	lsls	r0, r2, #1
   140f2:	1880      	adds	r0, r0, r2
   140f4:	0040      	lsls	r0, r0, #1
   140f6:	18c0      	adds	r0, r0, r3
   140f8:	0080      	lsls	r0, r0, #2
   140fa:	4683      	mov	fp, r0
   140fc:	9804      	ldr	r0, [sp, #16]
   140fe:	007f      	lsls	r7, r7, #1
   14100:	4447      	add	r7, r8
   14102:	4680      	mov	r8, r0
   14104:	00ff      	lsls	r7, r7, #3
   14106:	4447      	add	r7, r8
   14108:	6978      	ldr	r0, [r7, #20]
   1410a:	465f      	mov	r7, fp
   1410c:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
   1410e:	4553      	cmp	r3, sl
   14110:	db68      	blt.n	141e4 <inverse+0x6bc>
							n = 0;
   14112:	2300      	movs	r3, #0
							m++;
   14114:	3201      	adds	r2, #1
   14116:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
   14118:	9801      	ldr	r0, [sp, #4]
   1411a:	4285      	cmp	r5, r0
   1411c:	d967      	bls.n	141ee <inverse+0x6c6>
   1411e:	9801      	ldr	r0, [sp, #4]
   14120:	3101      	adds	r1, #1
   14122:	3001      	adds	r0, #1
   14124:	b2c0      	uxtb	r0, r0
   14126:	9001      	str	r0, [sp, #4]
					b[i][j] = 0;
   14128:	0048      	lsls	r0, r1, #1
   1412a:	1847      	adds	r7, r0, r1
   1412c:	00ff      	lsls	r7, r7, #3
   1412e:	9000      	str	r0, [sp, #0]
   14130:	51e6      	str	r6, [r4, r7]
					if (i != 0 && j != c)
   14132:	2900      	cmp	r1, #0
   14134:	d100      	bne.n	14138 <inverse+0x610>
   14136:	e152      	b.n	143de <inverse+0x8b6>
   14138:	4660      	mov	r0, ip
   1413a:	2800      	cmp	r0, #0
   1413c:	d100      	bne.n	14140 <inverse+0x618>
   1413e:	e173      	b.n	14428 <inverse+0x900>
						b[m][n] = a[i][j];
   14140:	4648      	mov	r0, r9
   14142:	4008      	ands	r0, r1
   14144:	4683      	mov	fp, r0
   14146:	0040      	lsls	r0, r0, #1
   14148:	4680      	mov	r8, r0
   1414a:	44d8      	add	r8, fp
   1414c:	4640      	mov	r0, r8
   1414e:	00c0      	lsls	r0, r0, #3
   14150:	4680      	mov	r8, r0
   14152:	0057      	lsls	r7, r2, #1
   14154:	18bf      	adds	r7, r7, r2
   14156:	007f      	lsls	r7, r7, #1
   14158:	18ff      	adds	r7, r7, r3
   1415a:	00bf      	lsls	r7, r7, #2
   1415c:	9702      	str	r7, [sp, #8]
   1415e:	4647      	mov	r7, r8
   14160:	9804      	ldr	r0, [sp, #16]
   14162:	5838      	ldr	r0, [r7, r0]
   14164:	9f02      	ldr	r7, [sp, #8]
   14166:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
   14168:	4553      	cmp	r3, sl
   1416a:	db00      	blt.n	1416e <inverse+0x646>
   1416c:	e71a      	b.n	13fa4 <inverse+0x47c>
						n++;
   1416e:	3301      	adds	r3, #1
   14170:	b2db      	uxtb	r3, r3
   14172:	e71a      	b.n	13faa <inverse+0x482>
   14174:	3301      	adds	r3, #1
   14176:	b2db      	uxtb	r3, r3
   14178:	e5e5      	b.n	13d46 <inverse+0x21e>
   1417a:	3301      	adds	r3, #1
   1417c:	b2db      	uxtb	r3, r3
   1417e:	e5cd      	b.n	13d1c <inverse+0x1f4>
   14180:	3301      	adds	r3, #1
   14182:	b2db      	uxtb	r3, r3
   14184:	e5b3      	b.n	13cee <inverse+0x1c6>
   14186:	46c0      	nop			; (mov r8, r8)
   14188:	0002878d 	.word	0x0002878d
   1418c:	00027ac5 	.word	0x00027ac5
   14190:	00028831 	.word	0x00028831
   14194:	00012a55 	.word	0x00012a55
   14198:	00026559 	.word	0x00026559
   1419c:	00025e55 	.word	0x00025e55
					b[i][j] = 0;
   141a0:	4641      	mov	r1, r8
   141a2:	6041      	str	r1, [r0, #4]
				for (j = 0 ;j < k; j++)
   141a4:	4649      	mov	r1, r9
   141a6:	2902      	cmp	r1, #2
   141a8:	d100      	bne.n	141ac <inverse+0x684>
   141aa:	e5cf      	b.n	13d4c <inverse+0x224>
					b[i][j] = 0;
   141ac:	4641      	mov	r1, r8
   141ae:	6081      	str	r1, [r0, #8]
				for (j = 0 ;j < k; j++)
   141b0:	4649      	mov	r1, r9
   141b2:	2903      	cmp	r1, #3
   141b4:	d100      	bne.n	141b8 <inverse+0x690>
   141b6:	e5c6      	b.n	13d46 <inverse+0x21e>
					b[i][j] = 0;
   141b8:	4641      	mov	r1, r8
   141ba:	60c1      	str	r1, [r0, #12]
				for (j = 0 ;j < k; j++)
   141bc:	4649      	mov	r1, r9
   141be:	2904      	cmp	r1, #4
   141c0:	d100      	bne.n	141c4 <inverse+0x69c>
   141c2:	e5c0      	b.n	13d46 <inverse+0x21e>
					b[i][j] = 0;
   141c4:	4641      	mov	r1, r8
   141c6:	6101      	str	r1, [r0, #16]
				for (j = 0 ;j < k; j++)
   141c8:	4649      	mov	r1, r9
   141ca:	2905      	cmp	r1, #5
   141cc:	d100      	bne.n	141d0 <inverse+0x6a8>
   141ce:	e5ba      	b.n	13d46 <inverse+0x21e>
					b[i][j] = 0;
   141d0:	4641      	mov	r1, r8
   141d2:	6141      	str	r1, [r0, #20]
   141d4:	e5ba      	b.n	13d4c <inverse+0x224>
   141d6:	9814      	ldr	r0, [sp, #80]	; 0x50
   141d8:	4bde      	ldr	r3, [pc, #888]	; (14554 <inverse+0xa2c>)
   141da:	4798      	blx	r3
   141dc:	e61d      	b.n	13e1a <inverse+0x2f2>
		for (c = 0; c < k; c++)
   141de:	2000      	movs	r0, #0
   141e0:	2100      	movs	r1, #0
   141e2:	e61a      	b.n	13e1a <inverse+0x2f2>
			for (i = 0;i < k; i++)
   141e4:	9801      	ldr	r0, [sp, #4]
						n++;
   141e6:	3301      	adds	r3, #1
   141e8:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
   141ea:	4285      	cmp	r5, r0
   141ec:	d897      	bhi.n	1411e <inverse+0x5f6>
   141ee:	4667      	mov	r7, ip
			det = det + s * (a[0][c] * determinant(b, k - 1));
   141f0:	9a04      	ldr	r2, [sp, #16]
   141f2:	00bb      	lsls	r3, r7, #2
   141f4:	58d6      	ldr	r6, [r2, r3]
   141f6:	9907      	ldr	r1, [sp, #28]
   141f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141fa:	0020      	movs	r0, r4
   141fc:	4798      	blx	r3
   141fe:	1c01      	adds	r1, r0, #0
   14200:	1c30      	adds	r0, r6, #0
   14202:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14204:	47b0      	blx	r6
   14206:	9b05      	ldr	r3, [sp, #20]
   14208:	3701      	adds	r7, #1
   1420a:	1c19      	adds	r1, r3, #0
   1420c:	4698      	mov	r8, r3
   1420e:	47b0      	blx	r6
   14210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14212:	1c01      	adds	r1, r0, #0
   14214:	9803      	ldr	r0, [sp, #12]
   14216:	4798      	blx	r3
			s = -1 * s;
   14218:	2280      	movs	r2, #128	; 0x80
   1421a:	0612      	lsls	r2, r2, #24
   1421c:	4643      	mov	r3, r8
   1421e:	4694      	mov	ip, r2
   14220:	4463      	add	r3, ip
   14222:	9305      	str	r3, [sp, #20]
		for (c = 0; c < k; c++)
   14224:	9b08      	ldr	r3, [sp, #32]
			det = det + s * (a[0][c] * determinant(b, k - 1));
   14226:	9003      	str	r0, [sp, #12]
		for (c = 0; c < k; c++)
   14228:	429f      	cmp	r7, r3
   1422a:	d000      	beq.n	1422e <inverse+0x706>
   1422c:	e6ac      	b.n	13f88 <inverse+0x460>
   1422e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   14230:	4683      	mov	fp, r0
   14232:	2e01      	cmp	r6, #1
   14234:	d800      	bhi.n	14238 <inverse+0x710>
   14236:	e0f0      	b.n	1441a <inverse+0x8f2>
			dest[i][j] = b[i][j] / d;
   14238:	1c01      	adds	r1, r0, #0
   1423a:	4cc7      	ldr	r4, [pc, #796]	; (14558 <inverse+0xa30>)
   1423c:	985c      	ldr	r0, [sp, #368]	; 0x170
   1423e:	2e02      	cmp	r6, #2
   14240:	d100      	bne.n	14244 <inverse+0x71c>
   14242:	e1fc      	b.n	1463e <inverse+0xb16>
   14244:	2e03      	cmp	r6, #3
   14246:	d100      	bne.n	1424a <inverse+0x722>
   14248:	e1d5      	b.n	145f6 <inverse+0xace>
   1424a:	2e04      	cmp	r6, #4
   1424c:	d100      	bne.n	14250 <inverse+0x728>
   1424e:	e192      	b.n	14576 <inverse+0xa4e>
   14250:	47a0      	blx	r4
   14252:	9d09      	ldr	r5, [sp, #36]	; 0x24
   14254:	4659      	mov	r1, fp
   14256:	6028      	str	r0, [r5, #0]
   14258:	985d      	ldr	r0, [sp, #372]	; 0x174
   1425a:	47a0      	blx	r4
   1425c:	4659      	mov	r1, fp
   1425e:	6068      	str	r0, [r5, #4]
   14260:	985e      	ldr	r0, [sp, #376]	; 0x178
   14262:	47a0      	blx	r4
   14264:	4659      	mov	r1, fp
   14266:	60a8      	str	r0, [r5, #8]
   14268:	985f      	ldr	r0, [sp, #380]	; 0x17c
   1426a:	47a0      	blx	r4
   1426c:	4659      	mov	r1, fp
   1426e:	60e8      	str	r0, [r5, #12]
   14270:	9860      	ldr	r0, [sp, #384]	; 0x180
   14272:	47a0      	blx	r4
   14274:	6128      	str	r0, [r5, #16]
		for (j = 0;j < r; j++)
   14276:	2e05      	cmp	r6, #5
   14278:	d003      	beq.n	14282 <inverse+0x75a>
			dest[i][j] = b[i][j] / d;
   1427a:	4659      	mov	r1, fp
   1427c:	9861      	ldr	r0, [sp, #388]	; 0x184
   1427e:	47a0      	blx	r4
   14280:	6168      	str	r0, [r5, #20]
   14282:	4659      	mov	r1, fp
   14284:	9862      	ldr	r0, [sp, #392]	; 0x188
   14286:	47a0      	blx	r4
   14288:	4659      	mov	r1, fp
   1428a:	61a8      	str	r0, [r5, #24]
   1428c:	9863      	ldr	r0, [sp, #396]	; 0x18c
   1428e:	47a0      	blx	r4
   14290:	4659      	mov	r1, fp
   14292:	61e8      	str	r0, [r5, #28]
   14294:	9864      	ldr	r0, [sp, #400]	; 0x190
   14296:	47a0      	blx	r4
   14298:	4659      	mov	r1, fp
   1429a:	6228      	str	r0, [r5, #32]
   1429c:	9865      	ldr	r0, [sp, #404]	; 0x194
   1429e:	47a0      	blx	r4
   142a0:	4659      	mov	r1, fp
   142a2:	6268      	str	r0, [r5, #36]	; 0x24
   142a4:	9866      	ldr	r0, [sp, #408]	; 0x198
   142a6:	47a0      	blx	r4
		for (j = 0;j < r; j++)
   142a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			dest[i][j] = b[i][j] / d;
   142aa:	62a8      	str	r0, [r5, #40]	; 0x28
		for (j = 0;j < r; j++)
   142ac:	2b05      	cmp	r3, #5
   142ae:	d003      	beq.n	142b8 <inverse+0x790>
			dest[i][j] = b[i][j] / d;
   142b0:	4659      	mov	r1, fp
   142b2:	9867      	ldr	r0, [sp, #412]	; 0x19c
   142b4:	47a0      	blx	r4
   142b6:	62e8      	str	r0, [r5, #44]	; 0x2c
   142b8:	4659      	mov	r1, fp
   142ba:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   142bc:	47a0      	blx	r4
   142be:	4659      	mov	r1, fp
   142c0:	6328      	str	r0, [r5, #48]	; 0x30
   142c2:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   142c4:	47a0      	blx	r4
   142c6:	4659      	mov	r1, fp
   142c8:	6368      	str	r0, [r5, #52]	; 0x34
   142ca:	986a      	ldr	r0, [sp, #424]	; 0x1a8
   142cc:	47a0      	blx	r4
   142ce:	4659      	mov	r1, fp
   142d0:	63a8      	str	r0, [r5, #56]	; 0x38
   142d2:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   142d4:	47a0      	blx	r4
   142d6:	4659      	mov	r1, fp
   142d8:	63e8      	str	r0, [r5, #60]	; 0x3c
   142da:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   142dc:	47a0      	blx	r4
		for (j = 0;j < r; j++)
   142de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			dest[i][j] = b[i][j] / d;
   142e0:	6428      	str	r0, [r5, #64]	; 0x40
		for (j = 0;j < r; j++)
   142e2:	2b05      	cmp	r3, #5
   142e4:	d003      	beq.n	142ee <inverse+0x7c6>
			dest[i][j] = b[i][j] / d;
   142e6:	4659      	mov	r1, fp
   142e8:	986d      	ldr	r0, [sp, #436]	; 0x1b4
   142ea:	47a0      	blx	r4
   142ec:	6468      	str	r0, [r5, #68]	; 0x44
   142ee:	4659      	mov	r1, fp
   142f0:	986e      	ldr	r0, [sp, #440]	; 0x1b8
   142f2:	47a0      	blx	r4
   142f4:	4659      	mov	r1, fp
   142f6:	64a8      	str	r0, [r5, #72]	; 0x48
   142f8:	986f      	ldr	r0, [sp, #444]	; 0x1bc
   142fa:	47a0      	blx	r4
   142fc:	4659      	mov	r1, fp
   142fe:	64e8      	str	r0, [r5, #76]	; 0x4c
   14300:	9870      	ldr	r0, [sp, #448]	; 0x1c0
   14302:	47a0      	blx	r4
   14304:	4659      	mov	r1, fp
   14306:	6528      	str	r0, [r5, #80]	; 0x50
   14308:	9871      	ldr	r0, [sp, #452]	; 0x1c4
   1430a:	47a0      	blx	r4
   1430c:	4659      	mov	r1, fp
   1430e:	6568      	str	r0, [r5, #84]	; 0x54
   14310:	9872      	ldr	r0, [sp, #456]	; 0x1c8
   14312:	47a0      	blx	r4
		for (j = 0;j < r; j++)
   14314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			dest[i][j] = b[i][j] / d;
   14316:	65a8      	str	r0, [r5, #88]	; 0x58
		for (j = 0;j < r; j++)
   14318:	2b05      	cmp	r3, #5
   1431a:	d003      	beq.n	14324 <inverse+0x7fc>
			dest[i][j] = b[i][j] / d;
   1431c:	4659      	mov	r1, fp
   1431e:	9873      	ldr	r0, [sp, #460]	; 0x1cc
   14320:	47a0      	blx	r4
   14322:	65e8      	str	r0, [r5, #92]	; 0x5c
   14324:	4659      	mov	r1, fp
   14326:	9874      	ldr	r0, [sp, #464]	; 0x1d0
   14328:	47a0      	blx	r4
   1432a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1432c:	4659      	mov	r1, fp
   1432e:	6630      	str	r0, [r6, #96]	; 0x60
   14330:	9875      	ldr	r0, [sp, #468]	; 0x1d4
   14332:	47a0      	blx	r4
   14334:	4659      	mov	r1, fp
   14336:	6670      	str	r0, [r6, #100]	; 0x64
   14338:	9876      	ldr	r0, [sp, #472]	; 0x1d8
   1433a:	47a0      	blx	r4
   1433c:	4659      	mov	r1, fp
   1433e:	66b0      	str	r0, [r6, #104]	; 0x68
   14340:	9877      	ldr	r0, [sp, #476]	; 0x1dc
   14342:	47a0      	blx	r4
   14344:	4659      	mov	r1, fp
   14346:	66f0      	str	r0, [r6, #108]	; 0x6c
   14348:	9878      	ldr	r0, [sp, #480]	; 0x1e0
   1434a:	47a0      	blx	r4
		for (j = 0;j < r; j++)
   1434c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			dest[i][j] = b[i][j] / d;
   1434e:	6730      	str	r0, [r6, #112]	; 0x70
		for (j = 0;j < r; j++)
   14350:	2b05      	cmp	r3, #5
   14352:	d02f      	beq.n	143b4 <inverse+0x88c>
			dest[i][j] = b[i][j] / d;
   14354:	4659      	mov	r1, fp
   14356:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   14358:	47a0      	blx	r4
   1435a:	4659      	mov	r1, fp
   1435c:	6770      	str	r0, [r6, #116]	; 0x74
   1435e:	987a      	ldr	r0, [sp, #488]	; 0x1e8
   14360:	47a0      	blx	r4
   14362:	4659      	mov	r1, fp
   14364:	67b0      	str	r0, [r6, #120]	; 0x78
   14366:	987b      	ldr	r0, [sp, #492]	; 0x1ec
   14368:	47a0      	blx	r4
   1436a:	2290      	movs	r2, #144	; 0x90
   1436c:	2580      	movs	r5, #128	; 0x80
   1436e:	0052      	lsls	r2, r2, #1
   14370:	ab14      	add	r3, sp, #80	; 0x50
   14372:	189b      	adds	r3, r3, r2
   14374:	67f0      	str	r0, [r6, #124]	; 0x7c
   14376:	4659      	mov	r1, fp
   14378:	5958      	ldr	r0, [r3, r5]
   1437a:	47a0      	blx	r4
   1437c:	2290      	movs	r2, #144	; 0x90
   1437e:	ab14      	add	r3, sp, #80	; 0x50
   14380:	0052      	lsls	r2, r2, #1
   14382:	189b      	adds	r3, r3, r2
   14384:	5170      	str	r0, [r6, r5]
   14386:	3504      	adds	r5, #4
   14388:	5958      	ldr	r0, [r3, r5]
   1438a:	4659      	mov	r1, fp
   1438c:	47a0      	blx	r4
   1438e:	2290      	movs	r2, #144	; 0x90
   14390:	ab14      	add	r3, sp, #80	; 0x50
   14392:	0052      	lsls	r2, r2, #1
   14394:	189b      	adds	r3, r3, r2
   14396:	5170      	str	r0, [r6, r5]
   14398:	3504      	adds	r5, #4
   1439a:	5958      	ldr	r0, [r3, r5]
   1439c:	4659      	mov	r1, fp
   1439e:	47a0      	blx	r4
   143a0:	2290      	movs	r2, #144	; 0x90
   143a2:	ab14      	add	r3, sp, #80	; 0x50
   143a4:	0052      	lsls	r2, r2, #1
   143a6:	5170      	str	r0, [r6, r5]
   143a8:	189b      	adds	r3, r3, r2
   143aa:	3504      	adds	r5, #4
   143ac:	4659      	mov	r1, fp
   143ae:	5958      	ldr	r0, [r3, r5]
   143b0:	47a0      	blx	r4
   143b2:	5170      	str	r0, [r6, r5]
}
   143b4:	23a5      	movs	r3, #165	; 0xa5
   143b6:	009b      	lsls	r3, r3, #2
   143b8:	449d      	add	sp, r3
   143ba:	bc3c      	pop	{r2, r3, r4, r5}
   143bc:	4690      	mov	r8, r2
   143be:	4699      	mov	r9, r3
   143c0:	46a2      	mov	sl, r4
   143c2:	46ab      	mov	fp, r5
   143c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
						n++;
   143c6:	3301      	adds	r3, #1
   143c8:	b2db      	uxtb	r3, r3
   143ca:	e684      	b.n	140d6 <inverse+0x5ae>
   143cc:	3301      	adds	r3, #1
   143ce:	b2db      	uxtb	r3, r3
   143d0:	e65c      	b.n	1408c <inverse+0x564>
   143d2:	3301      	adds	r3, #1
   143d4:	b2db      	uxtb	r3, r3
   143d6:	e634      	b.n	14042 <inverse+0x51a>
   143d8:	3301      	adds	r3, #1
   143da:	b2db      	uxtb	r3, r3
   143dc:	e60b      	b.n	13ff6 <inverse+0x4ce>
				for (j = 0 ;j < k; j++)
   143de:	2d01      	cmp	r5, #1
   143e0:	d100      	bne.n	143e4 <inverse+0x8bc>
   143e2:	e699      	b.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   143e4:	6066      	str	r6, [r4, #4]
				for (j = 0 ;j < k; j++)
   143e6:	2d02      	cmp	r5, #2
   143e8:	d100      	bne.n	143ec <inverse+0x8c4>
   143ea:	e698      	b.n	1411e <inverse+0x5f6>
					b[i][j] = 0;
   143ec:	60a6      	str	r6, [r4, #8]
				for (j = 0 ;j < k; j++)
   143ee:	2d03      	cmp	r5, #3
   143f0:	d100      	bne.n	143f4 <inverse+0x8cc>
   143f2:	e694      	b.n	1411e <inverse+0x5f6>
					b[i][j] = 0;
   143f4:	60e6      	str	r6, [r4, #12]
				for (j = 0 ;j < k; j++)
   143f6:	2d04      	cmp	r5, #4
   143f8:	d100      	bne.n	143fc <inverse+0x8d4>
   143fa:	e690      	b.n	1411e <inverse+0x5f6>
					b[i][j] = 0;
   143fc:	6126      	str	r6, [r4, #16]
				for (j = 0 ;j < k; j++)
   143fe:	2d05      	cmp	r5, #5
   14400:	d100      	bne.n	14404 <inverse+0x8dc>
   14402:	e68c      	b.n	1411e <inverse+0x5f6>
					b[i][j] = 0;
   14404:	6166      	str	r6, [r4, #20]
   14406:	e68a      	b.n	1411e <inverse+0x5f6>
			b[i][j] = fac[j][i];
   14408:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   1440a:	935c      	str	r3, [sp, #368]	; 0x170
	if (k == 1)
   1440c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1440e:	2b01      	cmp	r3, #1
   14410:	d000      	beq.n	14414 <inverse+0x8ec>
   14412:	e59e      	b.n	13f52 <inverse+0x42a>
		return (a[0][0]);
   14414:	9b04      	ldr	r3, [sp, #16]
   14416:	681b      	ldr	r3, [r3, #0]
   14418:	469b      	mov	fp, r3
			dest[i][j] = b[i][j] / d;
   1441a:	4b4f      	ldr	r3, [pc, #316]	; (14558 <inverse+0xa30>)
   1441c:	4659      	mov	r1, fp
   1441e:	985c      	ldr	r0, [sp, #368]	; 0x170
   14420:	4798      	blx	r3
   14422:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14424:	6018      	str	r0, [r3, #0]
   14426:	e7c5      	b.n	143b4 <inverse+0x88c>
				for (j = 0 ;j < k; j++)
   14428:	2d01      	cmp	r5, #1
   1442a:	d100      	bne.n	1442e <inverse+0x906>
   1442c:	e674      	b.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   1442e:	19e7      	adds	r7, r4, r7
   14430:	607e      	str	r6, [r7, #4]
   14432:	e5c6      	b.n	13fc2 <inverse+0x49a>
				for (j = 0 ;j < k; j++)
   14434:	2d03      	cmp	r5, #3
   14436:	d100      	bne.n	1443a <inverse+0x912>
   14438:	e66e      	b.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   1443a:	60fe      	str	r6, [r7, #12]
   1443c:	e60c      	b.n	14058 <inverse+0x530>
				for (j = 0 ;j < k; j++)
   1443e:	2d02      	cmp	r5, #2
   14440:	d100      	bne.n	14444 <inverse+0x91c>
   14442:	e669      	b.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   14444:	60be      	str	r6, [r7, #8]
   14446:	e5e2      	b.n	1400e <inverse+0x4e6>
				for (j = 0 ;j < k; j++)
   14448:	2d05      	cmp	r5, #5
   1444a:	d100      	bne.n	1444e <inverse+0x926>
   1444c:	e664      	b.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   1444e:	617e      	str	r6, [r7, #20]
   14450:	e64b      	b.n	140ea <inverse+0x5c2>
				for (j = 0 ;j < k; j++)
   14452:	2d04      	cmp	r5, #4
   14454:	d100      	bne.n	14458 <inverse+0x930>
   14456:	e65f      	b.n	14118 <inverse+0x5f0>
					b[i][j] = 0;
   14458:	613e      	str	r6, [r7, #16]
   1445a:	e622      	b.n	140a2 <inverse+0x57a>
			b[i][j] = fac[j][i];
   1445c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   1445e:	9362      	str	r3, [sp, #392]	; 0x188
   14460:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   14462:	9363      	str	r3, [sp, #396]	; 0x18c
   14464:	9b45      	ldr	r3, [sp, #276]	; 0x114
   14466:	9364      	str	r3, [sp, #400]	; 0x190
   14468:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   1446a:	9365      	str	r3, [sp, #404]	; 0x194
   1446c:	9b51      	ldr	r3, [sp, #324]	; 0x144
   1446e:	9366      	str	r3, [sp, #408]	; 0x198
   14470:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   14472:	9368      	str	r3, [sp, #416]	; 0x1a0
   14474:	9b40      	ldr	r3, [sp, #256]	; 0x100
   14476:	9369      	str	r3, [sp, #420]	; 0x1a4
   14478:	9b46      	ldr	r3, [sp, #280]	; 0x118
   1447a:	936a      	str	r3, [sp, #424]	; 0x1a8
   1447c:	9b4c      	ldr	r3, [sp, #304]	; 0x130
   1447e:	936b      	str	r3, [sp, #428]	; 0x1ac
   14480:	9b52      	ldr	r3, [sp, #328]	; 0x148
   14482:	936c      	str	r3, [sp, #432]	; 0x1b0
   14484:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   14486:	936e      	str	r3, [sp, #440]	; 0x1b8
   14488:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1448a:	936f      	str	r3, [sp, #444]	; 0x1bc
   1448c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1448e:	9370      	str	r3, [sp, #448]	; 0x1c0
   14490:	9b4d      	ldr	r3, [sp, #308]	; 0x134
   14492:	9371      	str	r3, [sp, #452]	; 0x1c4
   14494:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   14496:	9372      	str	r3, [sp, #456]	; 0x1c8
   14498:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   1449a:	9374      	str	r3, [sp, #464]	; 0x1d0
   1449c:	9b42      	ldr	r3, [sp, #264]	; 0x108
   1449e:	9375      	str	r3, [sp, #468]	; 0x1d4
   144a0:	9b48      	ldr	r3, [sp, #288]	; 0x120
   144a2:	9376      	str	r3, [sp, #472]	; 0x1d8
   144a4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
   144a6:	9377      	str	r3, [sp, #476]	; 0x1dc
   144a8:	9b54      	ldr	r3, [sp, #336]	; 0x150
   144aa:	9300      	str	r3, [sp, #0]
   144ac:	9378      	str	r3, [sp, #480]	; 0x1e0
   144ae:	e7ad      	b.n	1440c <inverse+0x8e4>
   144b0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   144b2:	935c      	str	r3, [sp, #368]	; 0x170
   144b4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   144b6:	935d      	str	r3, [sp, #372]	; 0x174
   144b8:	9b44      	ldr	r3, [sp, #272]	; 0x110
   144ba:	935e      	str	r3, [sp, #376]	; 0x178
   144bc:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   144be:	935f      	str	r3, [sp, #380]	; 0x17c
   144c0:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   144c2:	9362      	str	r3, [sp, #392]	; 0x188
   144c4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   144c6:	9363      	str	r3, [sp, #396]	; 0x18c
   144c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
   144ca:	9364      	str	r3, [sp, #400]	; 0x190
   144cc:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   144ce:	9365      	str	r3, [sp, #404]	; 0x194
   144d0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   144d2:	9368      	str	r3, [sp, #416]	; 0x1a0
   144d4:	9b40      	ldr	r3, [sp, #256]	; 0x100
   144d6:	9369      	str	r3, [sp, #420]	; 0x1a4
   144d8:	9b46      	ldr	r3, [sp, #280]	; 0x118
   144da:	936a      	str	r3, [sp, #424]	; 0x1a8
   144dc:	9b4c      	ldr	r3, [sp, #304]	; 0x130
   144de:	936b      	str	r3, [sp, #428]	; 0x1ac
   144e0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   144e2:	936e      	str	r3, [sp, #440]	; 0x1b8
   144e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   144e6:	936f      	str	r3, [sp, #444]	; 0x1bc
   144e8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   144ea:	9370      	str	r3, [sp, #448]	; 0x1c0
   144ec:	9b4d      	ldr	r3, [sp, #308]	; 0x134
   144ee:	9300      	str	r3, [sp, #0]
   144f0:	9371      	str	r3, [sp, #452]	; 0x1c4
   144f2:	e52e      	b.n	13f52 <inverse+0x42a>
   144f4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   144f6:	935c      	str	r3, [sp, #368]	; 0x170
   144f8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   144fa:	935d      	str	r3, [sp, #372]	; 0x174
   144fc:	9b44      	ldr	r3, [sp, #272]	; 0x110
   144fe:	935e      	str	r3, [sp, #376]	; 0x178
   14500:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   14502:	9362      	str	r3, [sp, #392]	; 0x188
   14504:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   14506:	9363      	str	r3, [sp, #396]	; 0x18c
   14508:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1450a:	9364      	str	r3, [sp, #400]	; 0x190
   1450c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   1450e:	9368      	str	r3, [sp, #416]	; 0x1a0
   14510:	9b40      	ldr	r3, [sp, #256]	; 0x100
   14512:	9369      	str	r3, [sp, #420]	; 0x1a4
   14514:	9b46      	ldr	r3, [sp, #280]	; 0x118
   14516:	9300      	str	r3, [sp, #0]
   14518:	936a      	str	r3, [sp, #424]	; 0x1a8
   1451a:	e51a      	b.n	13f52 <inverse+0x42a>
   1451c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   1451e:	935c      	str	r3, [sp, #368]	; 0x170
   14520:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   14522:	935d      	str	r3, [sp, #372]	; 0x174
   14524:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   14526:	9362      	str	r3, [sp, #392]	; 0x188
   14528:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   1452a:	9300      	str	r3, [sp, #0]
   1452c:	9363      	str	r3, [sp, #396]	; 0x18c
   1452e:	e510      	b.n	13f52 <inverse+0x42a>
				for (j = 0 ;j < k; j++)
   14530:	4649      	mov	r1, r9
   14532:	2905      	cmp	r1, #5
   14534:	d101      	bne.n	1453a <inverse+0xa12>
   14536:	f7ff fc06 	bl	13d46 <inverse+0x21e>
					b[i][j] = 0;
   1453a:	4641      	mov	r1, r8
   1453c:	6141      	str	r1, [r0, #20]
   1453e:	f7ff fbf5 	bl	13d2c <inverse+0x204>
				for (j = 0 ;j < k; j++)
   14542:	4649      	mov	r1, r9
   14544:	2904      	cmp	r1, #4
   14546:	d101      	bne.n	1454c <inverse+0xa24>
   14548:	f7ff fbfd 	bl	13d46 <inverse+0x21e>
					b[i][j] = 0;
   1454c:	4641      	mov	r1, r8
   1454e:	6101      	str	r1, [r0, #16]
   14550:	f7ff fbd7 	bl	13d02 <inverse+0x1da>
   14554:	0002878d 	.word	0x0002878d
   14558:	00026179 	.word	0x00026179
				for (j = 0 ;j < k; j++)
   1455c:	4649      	mov	r1, r9
   1455e:	2903      	cmp	r1, #3
   14560:	d101      	bne.n	14566 <inverse+0xa3e>
   14562:	f7ff fbf0 	bl	13d46 <inverse+0x21e>
					b[i][j] = 0;
   14566:	4641      	mov	r1, r8
   14568:	60c1      	str	r1, [r0, #12]
   1456a:	f7ff fbb3 	bl	13cd4 <inverse+0x1ac>
   1456e:	4641      	mov	r1, r8
   14570:	6041      	str	r1, [r0, #4]
   14572:	f7ff fb81 	bl	13c78 <inverse+0x150>
			dest[i][j] = b[i][j] / d;
   14576:	47a0      	blx	r4
   14578:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1457a:	4659      	mov	r1, fp
   1457c:	6028      	str	r0, [r5, #0]
   1457e:	985d      	ldr	r0, [sp, #372]	; 0x174
   14580:	47a0      	blx	r4
   14582:	4659      	mov	r1, fp
   14584:	6068      	str	r0, [r5, #4]
   14586:	985e      	ldr	r0, [sp, #376]	; 0x178
   14588:	47a0      	blx	r4
   1458a:	4659      	mov	r1, fp
   1458c:	60a8      	str	r0, [r5, #8]
   1458e:	985f      	ldr	r0, [sp, #380]	; 0x17c
   14590:	47a0      	blx	r4
   14592:	4659      	mov	r1, fp
   14594:	60e8      	str	r0, [r5, #12]
   14596:	9862      	ldr	r0, [sp, #392]	; 0x188
   14598:	47a0      	blx	r4
   1459a:	4659      	mov	r1, fp
   1459c:	61a8      	str	r0, [r5, #24]
   1459e:	9863      	ldr	r0, [sp, #396]	; 0x18c
   145a0:	47a0      	blx	r4
   145a2:	4659      	mov	r1, fp
   145a4:	61e8      	str	r0, [r5, #28]
   145a6:	9864      	ldr	r0, [sp, #400]	; 0x190
   145a8:	47a0      	blx	r4
   145aa:	4659      	mov	r1, fp
   145ac:	6228      	str	r0, [r5, #32]
   145ae:	9865      	ldr	r0, [sp, #404]	; 0x194
   145b0:	47a0      	blx	r4
   145b2:	4659      	mov	r1, fp
   145b4:	6268      	str	r0, [r5, #36]	; 0x24
   145b6:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   145b8:	47a0      	blx	r4
   145ba:	4659      	mov	r1, fp
   145bc:	6328      	str	r0, [r5, #48]	; 0x30
   145be:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   145c0:	47a0      	blx	r4
   145c2:	4659      	mov	r1, fp
   145c4:	6368      	str	r0, [r5, #52]	; 0x34
   145c6:	986a      	ldr	r0, [sp, #424]	; 0x1a8
   145c8:	47a0      	blx	r4
   145ca:	4659      	mov	r1, fp
   145cc:	63a8      	str	r0, [r5, #56]	; 0x38
   145ce:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   145d0:	47a0      	blx	r4
   145d2:	4659      	mov	r1, fp
   145d4:	63e8      	str	r0, [r5, #60]	; 0x3c
   145d6:	986e      	ldr	r0, [sp, #440]	; 0x1b8
   145d8:	47a0      	blx	r4
   145da:	4659      	mov	r1, fp
   145dc:	64a8      	str	r0, [r5, #72]	; 0x48
   145de:	986f      	ldr	r0, [sp, #444]	; 0x1bc
   145e0:	47a0      	blx	r4
   145e2:	4659      	mov	r1, fp
   145e4:	64e8      	str	r0, [r5, #76]	; 0x4c
   145e6:	9870      	ldr	r0, [sp, #448]	; 0x1c0
   145e8:	47a0      	blx	r4
   145ea:	4659      	mov	r1, fp
   145ec:	6528      	str	r0, [r5, #80]	; 0x50
   145ee:	9871      	ldr	r0, [sp, #452]	; 0x1c4
   145f0:	47a0      	blx	r4
   145f2:	6568      	str	r0, [r5, #84]	; 0x54
   145f4:	e6de      	b.n	143b4 <inverse+0x88c>
   145f6:	47a0      	blx	r4
   145f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   145fa:	4659      	mov	r1, fp
   145fc:	6028      	str	r0, [r5, #0]
   145fe:	985d      	ldr	r0, [sp, #372]	; 0x174
   14600:	47a0      	blx	r4
   14602:	4659      	mov	r1, fp
   14604:	6068      	str	r0, [r5, #4]
   14606:	985e      	ldr	r0, [sp, #376]	; 0x178
   14608:	47a0      	blx	r4
   1460a:	4659      	mov	r1, fp
   1460c:	60a8      	str	r0, [r5, #8]
   1460e:	9862      	ldr	r0, [sp, #392]	; 0x188
   14610:	47a0      	blx	r4
   14612:	4659      	mov	r1, fp
   14614:	61a8      	str	r0, [r5, #24]
   14616:	9863      	ldr	r0, [sp, #396]	; 0x18c
   14618:	47a0      	blx	r4
   1461a:	4659      	mov	r1, fp
   1461c:	61e8      	str	r0, [r5, #28]
   1461e:	9864      	ldr	r0, [sp, #400]	; 0x190
   14620:	47a0      	blx	r4
   14622:	4659      	mov	r1, fp
   14624:	6228      	str	r0, [r5, #32]
   14626:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   14628:	47a0      	blx	r4
   1462a:	4659      	mov	r1, fp
   1462c:	6328      	str	r0, [r5, #48]	; 0x30
   1462e:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   14630:	47a0      	blx	r4
   14632:	4659      	mov	r1, fp
   14634:	6368      	str	r0, [r5, #52]	; 0x34
   14636:	986a      	ldr	r0, [sp, #424]	; 0x1a8
   14638:	47a0      	blx	r4
   1463a:	63a8      	str	r0, [r5, #56]	; 0x38
   1463c:	e6ba      	b.n	143b4 <inverse+0x88c>
   1463e:	47a0      	blx	r4
   14640:	9d09      	ldr	r5, [sp, #36]	; 0x24
   14642:	4659      	mov	r1, fp
   14644:	6028      	str	r0, [r5, #0]
   14646:	985d      	ldr	r0, [sp, #372]	; 0x174
   14648:	47a0      	blx	r4
   1464a:	4659      	mov	r1, fp
   1464c:	6068      	str	r0, [r5, #4]
   1464e:	9862      	ldr	r0, [sp, #392]	; 0x188
   14650:	47a0      	blx	r4
   14652:	4659      	mov	r1, fp
   14654:	61a8      	str	r0, [r5, #24]
   14656:	9863      	ldr	r0, [sp, #396]	; 0x18c
   14658:	47a0      	blx	r4
   1465a:	61e8      	str	r0, [r5, #28]
   1465c:	e6aa      	b.n	143b4 <inverse+0x88c>
   1465e:	46c0      	nop			; (mov r8, r8)

00014660 <celsius2fahrenheit>:


float celsius2fahrenheit(float dataCelsius){
   14660:	b510      	push	{r4, lr}
	
	return (dataCelsius*9/5+32);
   14662:	4905      	ldr	r1, [pc, #20]	; (14678 <celsius2fahrenheit+0x18>)
   14664:	4b05      	ldr	r3, [pc, #20]	; (1467c <celsius2fahrenheit+0x1c>)
   14666:	4798      	blx	r3
   14668:	4905      	ldr	r1, [pc, #20]	; (14680 <celsius2fahrenheit+0x20>)
   1466a:	4b06      	ldr	r3, [pc, #24]	; (14684 <celsius2fahrenheit+0x24>)
   1466c:	4798      	blx	r3
   1466e:	2184      	movs	r1, #132	; 0x84
   14670:	4b05      	ldr	r3, [pc, #20]	; (14688 <celsius2fahrenheit+0x28>)
   14672:	05c9      	lsls	r1, r1, #23
   14674:	4798      	blx	r3
}
   14676:	bd10      	pop	{r4, pc}
   14678:	41100000 	.word	0x41100000
   1467c:	00026559 	.word	0x00026559
   14680:	40a00000 	.word	0x40a00000
   14684:	00026179 	.word	0x00026179
   14688:	00025e55 	.word	0x00025e55

0001468c <SD_add_cal_history>:
#include <SDcardBRIC.h>

#define FILENAME_RAW_DATA_BUFFER "rawDataBuffer.bin"


FRESULT SD_add_cal_history(enum CALTYPE calType){
   1468c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1468e:	464e      	mov	r6, r9
   14690:	46de      	mov	lr, fp
   14692:	4657      	mov	r7, sl
   14694:	4645      	mov	r5, r8
   14696:	b5e0      	push	{r5, r6, r7, lr}
	struct INST_CAL *calStPtr;
	struct TIME *timePtr;
	float calTempC;
	
	//  Exit if USB is attached
	if (SD_WriteLockout){
   14698:	4bd8      	ldr	r3, [pc, #864]	; (149fc <SD_add_cal_history+0x370>)
FRESULT SD_add_cal_history(enum CALTYPE calType){
   1469a:	4cd9      	ldr	r4, [pc, #868]	; (14a00 <SD_add_cal_history+0x374>)
	if (SD_WriteLockout){
   1469c:	781b      	ldrb	r3, [r3, #0]
FRESULT SD_add_cal_history(enum CALTYPE calType){
   1469e:	44a5      	add	sp, r4
   146a0:	0006      	movs	r6, r0
		return FR_DENIED;
   146a2:	2407      	movs	r4, #7
	if (SD_WriteLockout){
   146a4:	2b00      	cmp	r3, #0
   146a6:	d009      	beq.n	146bc <SD_add_cal_history+0x30>
		
	}
	f_close(&file1);
	
	return fdebug1;
};
   146a8:	0020      	movs	r0, r4
   146aa:	23a7      	movs	r3, #167	; 0xa7
   146ac:	009b      	lsls	r3, r3, #2
   146ae:	449d      	add	sp, r3
   146b0:	bc3c      	pop	{r2, r3, r4, r5}
   146b2:	4690      	mov	r8, r2
   146b4:	4699      	mov	r9, r3
   146b6:	46a2      	mov	sl, r4
   146b8:	46ab      	mov	fp, r5
   146ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	diskio_status = disk_status(0);
   146bc:	2000      	movs	r0, #0
   146be:	4cd1      	ldr	r4, [pc, #836]	; (14a04 <SD_add_cal_history+0x378>)
   146c0:	47a0      	blx	r4
	if(diskio_status){
   146c2:	2800      	cmp	r0, #0
   146c4:	d010      	beq.n	146e8 <SD_add_cal_history+0x5c>


FRESULT configure_SD(void){
	FRESULT fdebug1;
	//spi_select_slave(&spi_main, &slave_SD, true);
	sd_mmc_init();
   146c6:	4bd0      	ldr	r3, [pc, #832]	; (14a08 <SD_add_cal_history+0x37c>)
   146c8:	4798      	blx	r3
	
	disk_status(0);
   146ca:	2000      	movs	r0, #0
   146cc:	47a0      	blx	r4

	fdebug1 = f_mount(0, &FatFS);
   146ce:	49cf      	ldr	r1, [pc, #828]	; (14a0c <SD_add_cal_history+0x380>)
   146d0:	2000      	movs	r0, #0
   146d2:	4bcf      	ldr	r3, [pc, #828]	; (14a10 <SD_add_cal_history+0x384>)
   146d4:	4798      	blx	r3
		diskio_status = disk_status(0);
   146d6:	2000      	movs	r0, #0
   146d8:	47a0      	blx	r4
		if(diskio_status){
   146da:	2800      	cmp	r0, #0
   146dc:	d004      	beq.n	146e8 <SD_add_cal_history+0x5c>
			SD_status = fdebug1;
   146de:	2203      	movs	r2, #3
   146e0:	4bcc      	ldr	r3, [pc, #816]	; (14a14 <SD_add_cal_history+0x388>)
			return fdebug1;
   146e2:	2403      	movs	r4, #3
			SD_status = fdebug1;
   146e4:	701a      	strb	r2, [r3, #0]
			return fdebug1;
   146e6:	e7df      	b.n	146a8 <SD_add_cal_history+0x1c>
			break;
		case folderRaw:
			strcpy(folderName,"raw");
			break;
		case folderCalibration:
			strcpy(folderName,"calibration");
   146e8:	ab1d      	add	r3, sp, #116	; 0x74
   146ea:	469b      	mov	fp, r3
   146ec:	465a      	mov	r2, fp
   146ee:	4bca      	ldr	r3, [pc, #808]	; (14a18 <SD_add_cal_history+0x38c>)
   146f0:	cb13      	ldmia	r3!, {r0, r1, r4}
   146f2:	c213      	stmia	r2!, {r0, r1, r4}
			break;
	}
	
	//  Get current directory
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   146f4:	21c8      	movs	r1, #200	; 0xc8
   146f6:	4bc9      	ldr	r3, [pc, #804]	; (14a1c <SD_add_cal_history+0x390>)
   146f8:	0049      	lsls	r1, r1, #1
   146fa:	0018      	movs	r0, r3
   146fc:	469a      	mov	sl, r3
   146fe:	4bc8      	ldr	r3, [pc, #800]	; (14a20 <SD_add_cal_history+0x394>)
   14700:	4798      	blx	r3
   14702:	1e04      	subs	r4, r0, #0
	if(fdebug1!=FR_OK){
   14704:	d1d0      	bne.n	146a8 <SD_add_cal_history+0x1c>
		return fdebug1;
	}
	
	//  Check to see if it's the correct directory
	sprintf(write_str2,"0:/%s",folderName);
   14706:	4bc7      	ldr	r3, [pc, #796]	; (14a24 <SD_add_cal_history+0x398>)
   14708:	465a      	mov	r2, fp
   1470a:	4699      	mov	r9, r3
   1470c:	49c6      	ldr	r1, [pc, #792]	; (14a28 <SD_add_cal_history+0x39c>)
   1470e:	0018      	movs	r0, r3
   14710:	4bc6      	ldr	r3, [pc, #792]	; (14a2c <SD_add_cal_history+0x3a0>)
   14712:	4798      	blx	r3
	if (strncmp(write_str1,write_str2,20)!=0){
   14714:	2214      	movs	r2, #20
   14716:	4649      	mov	r1, r9
   14718:	4650      	mov	r0, sl
   1471a:	4bc5      	ldr	r3, [pc, #788]	; (14a30 <SD_add_cal_history+0x3a4>)
   1471c:	4798      	blx	r3
   1471e:	2800      	cmp	r0, #0
   14720:	d000      	beq.n	14724 <SD_add_cal_history+0x98>
   14722:	e12f      	b.n	14984 <SD_add_cal_history+0x2f8>
	sprintf(filename, "Calibration_History_%04d.csv", options.SerialNumber);
   14724:	4dc3      	ldr	r5, [pc, #780]	; (14a34 <SD_add_cal_history+0x3a8>)
   14726:	4bc4      	ldr	r3, [pc, #784]	; (14a38 <SD_add_cal_history+0x3ac>)
   14728:	49c4      	ldr	r1, [pc, #784]	; (14a3c <SD_add_cal_history+0x3b0>)
   1472a:	685a      	ldr	r2, [r3, #4]
   1472c:	0028      	movs	r0, r5
   1472e:	4bbf      	ldr	r3, [pc, #764]	; (14a2c <SD_add_cal_history+0x3a0>)
   14730:	4798      	blx	r3
	fdebug1 = f_open(&file1,filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   14732:	4bc3      	ldr	r3, [pc, #780]	; (14a40 <SD_add_cal_history+0x3b4>)
   14734:	2203      	movs	r2, #3
   14736:	0029      	movs	r1, r5
   14738:	4658      	mov	r0, fp
   1473a:	4698      	mov	r8, r3
   1473c:	4798      	blx	r3
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
   1473e:	2800      	cmp	r0, #0
   14740:	d000      	beq.n	14744 <SD_add_cal_history+0xb8>
   14742:	e10b      	b.n	1495c <SD_add_cal_history+0x2d0>
   14744:	ab19      	add	r3, sp, #100	; 0x64
   14746:	9312      	str	r3, [sp, #72]	; 0x48
   14748:	4bbe      	ldr	r3, [pc, #760]	; (14a44 <SD_add_cal_history+0x3b8>)
   1474a:	930e      	str	r3, [sp, #56]	; 0x38
   1474c:	4bbe      	ldr	r3, [pc, #760]	; (14a48 <SD_add_cal_history+0x3bc>)
   1474e:	930f      	str	r3, [sp, #60]	; 0x3c
	fdebug2 = f_lseek(&file1, f_size(&file1));
   14750:	465b      	mov	r3, fp
   14752:	4658      	mov	r0, fp
   14754:	68d9      	ldr	r1, [r3, #12]
   14756:	4bbd      	ldr	r3, [pc, #756]	; (14a4c <SD_add_cal_history+0x3c0>)
   14758:	4798      	blx	r3
	switch (calType){
   1475a:	2e01      	cmp	r6, #1
   1475c:	d100      	bne.n	14760 <SD_add_cal_history+0xd4>
   1475e:	e138      	b.n	149d2 <SD_add_cal_history+0x346>
   14760:	2e00      	cmp	r6, #0
   14762:	d100      	bne.n	14766 <SD_add_cal_history+0xda>
   14764:	e126      	b.n	149b4 <SD_add_cal_history+0x328>
   14766:	2e02      	cmp	r6, #2
   14768:	d100      	bne.n	1476c <SD_add_cal_history+0xe0>
   1476a:	e13c      	b.n	149e6 <SD_add_cal_history+0x35a>
   1476c:	4eb8      	ldr	r6, [pc, #736]	; (14a50 <SD_add_cal_history+0x3c4>)
   1476e:	9910      	ldr	r1, [sp, #64]	; 0x40
	genTimestampString(display_str, timePtr, 1);
   14770:	4bb8      	ldr	r3, [pc, #736]	; (14a54 <SD_add_cal_history+0x3c8>)
   14772:	2201      	movs	r2, #1
   14774:	4698      	mov	r8, r3
   14776:	0018      	movs	r0, r3
   14778:	4bb7      	ldr	r3, [pc, #732]	; (14a58 <SD_add_cal_history+0x3cc>)
   1477a:	4798      	blx	r3
	sprintf(write_str1,"\r\n%s,%s,%04d,%0.1f,%0.1f,",
   1477c:	4db7      	ldr	r5, [pc, #732]	; (14a5c <SD_add_cal_history+0x3d0>)
   1477e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   14780:	47a8      	blx	r5
   14782:	2200      	movs	r2, #0
   14784:	4bb6      	ldr	r3, [pc, #728]	; (14a60 <SD_add_cal_history+0x3d4>)
   14786:	9004      	str	r0, [sp, #16]
   14788:	9105      	str	r1, [sp, #20]
   1478a:	9202      	str	r2, [sp, #8]
   1478c:	9303      	str	r3, [sp, #12]
   1478e:	4baa      	ldr	r3, [pc, #680]	; (14a38 <SD_add_cal_history+0x3ac>)
   14790:	4642      	mov	r2, r8
   14792:	685b      	ldr	r3, [r3, #4]
   14794:	49b3      	ldr	r1, [pc, #716]	; (14a64 <SD_add_cal_history+0x3d8>)
   14796:	9300      	str	r3, [sp, #0]
   14798:	4fa4      	ldr	r7, [pc, #656]	; (14a2c <SD_add_cal_history+0x3a0>)
   1479a:	464b      	mov	r3, r9
   1479c:	4650      	mov	r0, sl
   1479e:	47b8      	blx	r7
	f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   147a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   147a2:	4650      	mov	r0, sl
   147a4:	4798      	blx	r3
   147a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   147a8:	0002      	movs	r2, r0
   147aa:	4651      	mov	r1, sl
   147ac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   147ae:	4658      	mov	r0, fp
   147b0:	4698      	mov	r8, r3
   147b2:	47b8      	blx	r7
	dist_calst.dist_offset, cal_report.groups, cal_report.points,
   147b4:	4bac      	ldr	r3, [pc, #688]	; (14a68 <SD_add_cal_history+0x3dc>)
	sprintf(write_str1,"%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   147b6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   147b8:	47a8      	blx	r5
   147ba:	9010      	str	r0, [sp, #64]	; 0x40
   147bc:	9111      	str	r1, [sp, #68]	; 0x44
	cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
   147be:	49ab      	ldr	r1, [pc, #684]	; (14a6c <SD_add_cal_history+0x3e0>)
   147c0:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   147c2:	4689      	mov	r9, r1
   147c4:	49aa      	ldr	r1, [pc, #680]	; (14a70 <SD_add_cal_history+0x3e4>)
   147c6:	47c8      	blx	r9
	sprintf(write_str1,"%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   147c8:	47a8      	blx	r5
   147ca:	900c      	str	r0, [sp, #48]	; 0x30
   147cc:	910d      	str	r1, [sp, #52]	; 0x34
	cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
   147ce:	49a8      	ldr	r1, [pc, #672]	; (14a70 <SD_add_cal_history+0x3e4>)
   147d0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   147d2:	47c8      	blx	r9
	sprintf(write_str1,"%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   147d4:	47a8      	blx	r5
   147d6:	900a      	str	r0, [sp, #40]	; 0x28
   147d8:	910b      	str	r1, [sp, #44]	; 0x2c
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100, 
   147da:	49a5      	ldr	r1, [pc, #660]	; (14a70 <SD_add_cal_history+0x3e4>)
   147dc:	6b70      	ldr	r0, [r6, #52]	; 0x34
   147de:	47c8      	blx	r9
	sprintf(write_str1,"%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   147e0:	47a8      	blx	r5
   147e2:	9008      	str	r0, [sp, #32]
   147e4:	9109      	str	r1, [sp, #36]	; 0x24
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100, 
   147e6:	49a2      	ldr	r1, [pc, #648]	; (14a70 <SD_add_cal_history+0x3e4>)
   147e8:	6b30      	ldr	r0, [r6, #48]	; 0x30
   147ea:	47c8      	blx	r9
	sprintf(write_str1,"%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   147ec:	47a8      	blx	r5
   147ee:	9006      	str	r0, [sp, #24]
   147f0:	9107      	str	r1, [sp, #28]
   147f2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   147f4:	47a8      	blx	r5
   147f6:	9004      	str	r0, [sp, #16]
   147f8:	9105      	str	r1, [sp, #20]
   147fa:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   147fc:	47a8      	blx	r5
   147fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14800:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14802:	9002      	str	r0, [sp, #8]
   14804:	9103      	str	r1, [sp, #12]
   14806:	68b1      	ldr	r1, [r6, #8]
   14808:	4f88      	ldr	r7, [pc, #544]	; (14a2c <SD_add_cal_history+0x3a0>)
   1480a:	9101      	str	r1, [sp, #4]
   1480c:	6871      	ldr	r1, [r6, #4]
   1480e:	46bc      	mov	ip, r7
   14810:	9100      	str	r1, [sp, #0]
   14812:	4650      	mov	r0, sl
   14814:	4997      	ldr	r1, [pc, #604]	; (14a74 <SD_add_cal_history+0x3e8>)
   14816:	47e0      	blx	ip
	f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
   14818:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1481a:	4650      	mov	r0, sl
   1481c:	4790      	blx	r2
   1481e:	4643      	mov	r3, r8
   14820:	0002      	movs	r2, r0
   14822:	4651      	mov	r1, sl
   14824:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   14826:	4658      	mov	r0, fp
   14828:	47b8      	blx	r7
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100,
   1482a:	6c30      	ldr	r0, [r6, #64]	; 0x40
   1482c:	4990      	ldr	r1, [pc, #576]	; (14a70 <SD_add_cal_history+0x3e4>)
   1482e:	47c8      	blx	r9
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   14830:	47a8      	blx	r5
   14832:	9010      	str	r0, [sp, #64]	; 0x40
   14834:	9111      	str	r1, [sp, #68]	; 0x44
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   14836:	6d70      	ldr	r0, [r6, #84]	; 0x54
   14838:	498d      	ldr	r1, [pc, #564]	; (14a70 <SD_add_cal_history+0x3e4>)
   1483a:	47c8      	blx	r9
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   1483c:	47a8      	blx	r5
   1483e:	9008      	str	r0, [sp, #32]
   14840:	9109      	str	r1, [sp, #36]	; 0x24
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   14842:	498b      	ldr	r1, [pc, #556]	; (14a70 <SD_add_cal_history+0x3e4>)
   14844:	6d30      	ldr	r0, [r6, #80]	; 0x50
   14846:	47c8      	blx	r9
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   14848:	47a8      	blx	r5
   1484a:	9006      	str	r0, [sp, #24]
   1484c:	9107      	str	r1, [sp, #28]
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   1484e:	4988      	ldr	r1, [pc, #544]	; (14a70 <SD_add_cal_history+0x3e4>)
   14850:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
   14852:	47c8      	blx	r9
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   14854:	47a8      	blx	r5
   14856:	9004      	str	r0, [sp, #16]
   14858:	9105      	str	r1, [sp, #20]
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100,
   1485a:	4985      	ldr	r1, [pc, #532]	; (14a70 <SD_add_cal_history+0x3e4>)
   1485c:	6cb0      	ldr	r0, [r6, #72]	; 0x48
   1485e:	47c8      	blx	r9
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   14860:	47a8      	blx	r5
   14862:	9002      	str	r0, [sp, #8]
   14864:	9103      	str	r1, [sp, #12]
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100,
   14866:	4982      	ldr	r1, [pc, #520]	; (14a70 <SD_add_cal_history+0x3e4>)
   14868:	6c70      	ldr	r0, [r6, #68]	; 0x44
   1486a:	47c8      	blx	r9
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   1486c:	47a8      	blx	r5
   1486e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14870:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14872:	9000      	str	r0, [sp, #0]
   14874:	9101      	str	r1, [sp, #4]
   14876:	4e6d      	ldr	r6, [pc, #436]	; (14a2c <SD_add_cal_history+0x3a0>)
   14878:	497f      	ldr	r1, [pc, #508]	; (14a78 <SD_add_cal_history+0x3ec>)
   1487a:	4650      	mov	r0, sl
   1487c:	47b0      	blx	r6
	f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
   1487e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14880:	4650      	mov	r0, sl
   14882:	4790      	blx	r2
   14884:	4643      	mov	r3, r8
   14886:	0002      	movs	r2, r0
   14888:	4651      	mov	r1, sl
   1488a:	4658      	mov	r0, fp
   1488c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1488e:	47b8      	blx	r7
	for (i=0;i<4;i++){
   14890:	2300      	movs	r3, #0
   14892:	9310      	str	r3, [sp, #64]	; 0x40
			calStPtr = &a1_calst;
   14894:	4b79      	ldr	r3, [pc, #484]	; (14a7c <SD_add_cal_history+0x3f0>)
   14896:	4698      	mov	r8, r3
   14898:	0023      	movs	r3, r4
   1489a:	4644      	mov	r4, r8
   1489c:	4698      	mov	r8, r3
		sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   1489e:	6860      	ldr	r0, [r4, #4]
   148a0:	47a8      	blx	r5
   148a2:	0006      	movs	r6, r0
   148a4:	69a0      	ldr	r0, [r4, #24]
   148a6:	000f      	movs	r7, r1
   148a8:	47a8      	blx	r5
   148aa:	9008      	str	r0, [sp, #32]
   148ac:	9109      	str	r1, [sp, #36]	; 0x24
   148ae:	6960      	ldr	r0, [r4, #20]
   148b0:	47a8      	blx	r5
   148b2:	9006      	str	r0, [sp, #24]
   148b4:	9107      	str	r1, [sp, #28]
   148b6:	6920      	ldr	r0, [r4, #16]
   148b8:	47a8      	blx	r5
   148ba:	9004      	str	r0, [sp, #16]
   148bc:	9105      	str	r1, [sp, #20]
   148be:	68e0      	ldr	r0, [r4, #12]
   148c0:	47a8      	blx	r5
   148c2:	9002      	str	r0, [sp, #8]
   148c4:	9103      	str	r1, [sp, #12]
   148c6:	68a0      	ldr	r0, [r4, #8]
   148c8:	47a8      	blx	r5
   148ca:	0032      	movs	r2, r6
   148cc:	9000      	str	r0, [sp, #0]
   148ce:	9101      	str	r1, [sp, #4]
   148d0:	003b      	movs	r3, r7
   148d2:	4969      	ldr	r1, [pc, #420]	; (14a78 <SD_add_cal_history+0x3ec>)
   148d4:	4e55      	ldr	r6, [pc, #340]	; (14a2c <SD_add_cal_history+0x3a0>)
   148d6:	4650      	mov	r0, sl
   148d8:	47b0      	blx	r6
		f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
   148da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   148dc:	4650      	mov	r0, sl
   148de:	4798      	blx	r3
   148e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   148e2:	0002      	movs	r2, r0
   148e4:	4651      	mov	r1, sl
   148e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   148e8:	4658      	mov	r0, fp
   148ea:	47b0      	blx	r6
		RAD2DEG*calStPtr->axmYX,RAD2DEG*calStPtr->axmZY, RAD2DEG*calStPtr->axmZX,
   148ec:	69e0      	ldr	r0, [r4, #28]
   148ee:	4964      	ldr	r1, [pc, #400]	; (14a80 <SD_add_cal_history+0x3f4>)
   148f0:	47c8      	blx	r9
		sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   148f2:	47a8      	blx	r5
   148f4:	0006      	movs	r6, r0
   148f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   148f8:	000f      	movs	r7, r1
   148fa:	47a8      	blx	r5
   148fc:	9008      	str	r0, [sp, #32]
   148fe:	9109      	str	r1, [sp, #36]	; 0x24
   14900:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   14902:	47a8      	blx	r5
   14904:	9006      	str	r0, [sp, #24]
   14906:	9107      	str	r1, [sp, #28]
   14908:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1490a:	47a8      	blx	r5
   1490c:	9004      	str	r0, [sp, #16]
   1490e:	9105      	str	r1, [sp, #20]
		RAD2DEG*calStPtr->axmYX,RAD2DEG*calStPtr->axmZY, RAD2DEG*calStPtr->axmZX,
   14910:	495b      	ldr	r1, [pc, #364]	; (14a80 <SD_add_cal_history+0x3f4>)
   14912:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14914:	47c8      	blx	r9
		sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   14916:	47a8      	blx	r5
   14918:	9002      	str	r0, [sp, #8]
   1491a:	9103      	str	r1, [sp, #12]
		RAD2DEG*calStPtr->axmYX,RAD2DEG*calStPtr->axmZY, RAD2DEG*calStPtr->axmZX,
   1491c:	4958      	ldr	r1, [pc, #352]	; (14a80 <SD_add_cal_history+0x3f4>)
   1491e:	6a20      	ldr	r0, [r4, #32]
   14920:	47c8      	blx	r9
		sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
   14922:	47a8      	blx	r5
   14924:	0032      	movs	r2, r6
   14926:	9000      	str	r0, [sp, #0]
   14928:	9101      	str	r1, [sp, #4]
   1492a:	003b      	movs	r3, r7
   1492c:	4952      	ldr	r1, [pc, #328]	; (14a78 <SD_add_cal_history+0x3ec>)
   1492e:	4650      	mov	r0, sl
   14930:	4c3e      	ldr	r4, [pc, #248]	; (14a2c <SD_add_cal_history+0x3a0>)
   14932:	47a0      	blx	r4
		f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14934:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14936:	4650      	mov	r0, sl
   14938:	4790      	blx	r2
   1493a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1493c:	0002      	movs	r2, r0
   1493e:	4651      	mov	r1, sl
   14940:	4658      	mov	r0, fp
   14942:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14944:	47b0      	blx	r6
	for (i=0;i<4;i++){
   14946:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14948:	3301      	adds	r3, #1
   1494a:	9310      	str	r3, [sp, #64]	; 0x40
   1494c:	2b04      	cmp	r3, #4
   1494e:	d014      	beq.n	1497a <SD_add_cal_history+0x2ee>
		switch (i){
   14950:	2b02      	cmp	r3, #2
   14952:	d02d      	beq.n	149b0 <SD_add_cal_history+0x324>
   14954:	2b03      	cmp	r3, #3
   14956:	d129      	bne.n	149ac <SD_add_cal_history+0x320>
			calStPtr = &m2_calst;
   14958:	4c4a      	ldr	r4, [pc, #296]	; (14a84 <SD_add_cal_history+0x3f8>)
			break;
   1495a:	e7a0      	b.n	1489e <SD_add_cal_history+0x212>
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
   1495c:	2804      	cmp	r0, #4
   1495e:	d001      	beq.n	14964 <SD_add_cal_history+0x2d8>
		//  Wrong directory
		//  Try to change it
		fdebug1 = f_chdir(write_str2);
		if (fdebug1==FR_OK){
			return fdebug1;
		}else if(fdebug1==FR_NO_PATH){
   14960:	0004      	movs	r4, r0
   14962:	e6a1      	b.n	146a8 <SD_add_cal_history+0x1c>
		fdebug1 = f_open(&file1, filename, FA_CREATE_NEW | FA_READ | FA_WRITE);
   14964:	2207      	movs	r2, #7
   14966:	0029      	movs	r1, r5
   14968:	4658      	mov	r0, fp
   1496a:	47c0      	blx	r8
		if(fdebug1!=FR_OK){
   1496c:	2800      	cmp	r0, #0
   1496e:	d100      	bne.n	14972 <SD_add_cal_history+0x2e6>
   14970:	e09e      	b.n	14ab0 <SD_add_cal_history+0x424>
			SD_status = fdebug1;
   14972:	4b28      	ldr	r3, [pc, #160]	; (14a14 <SD_add_cal_history+0x388>)
			return fdebug1;
   14974:	0004      	movs	r4, r0
			SD_status = fdebug1;
   14976:	7018      	strb	r0, [r3, #0]
			return fdebug1;
   14978:	e696      	b.n	146a8 <SD_add_cal_history+0x1c>
	f_close(&file1);
   1497a:	4658      	mov	r0, fp
   1497c:	4b42      	ldr	r3, [pc, #264]	; (14a88 <SD_add_cal_history+0x3fc>)
   1497e:	4644      	mov	r4, r8
   14980:	4798      	blx	r3
	return fdebug1;
   14982:	e691      	b.n	146a8 <SD_add_cal_history+0x1c>
		fdebug1 = f_chdir(write_str2);
   14984:	4648      	mov	r0, r9
   14986:	4d41      	ldr	r5, [pc, #260]	; (14a8c <SD_add_cal_history+0x400>)
   14988:	47a8      	blx	r5
		if (fdebug1==FR_OK){
   1498a:	2800      	cmp	r0, #0
   1498c:	d100      	bne.n	14990 <SD_add_cal_history+0x304>
   1498e:	e6c9      	b.n	14724 <SD_add_cal_history+0x98>
		}else if(fdebug1==FR_NO_PATH){
   14990:	2805      	cmp	r0, #5
   14992:	d1e5      	bne.n	14960 <SD_add_cal_history+0x2d4>
			//  Make directory and change to it
			fdebug1 = f_chdir("0:/");
   14994:	483e      	ldr	r0, [pc, #248]	; (14a90 <SD_add_cal_history+0x404>)
   14996:	47a8      	blx	r5
			fdebug1 = f_mkdir(folderName);
   14998:	4658      	mov	r0, fp
   1499a:	4b3e      	ldr	r3, [pc, #248]	; (14a94 <SD_add_cal_history+0x408>)
   1499c:	4798      	blx	r3
			fdebug1 = f_chdir(write_str2);
   1499e:	4648      	mov	r0, r9
   149a0:	47a8      	blx	r5
	if(fdebug1!=FR_OK){
   149a2:	2800      	cmp	r0, #0
   149a4:	d100      	bne.n	149a8 <SD_add_cal_history+0x31c>
   149a6:	e6bd      	b.n	14724 <SD_add_cal_history+0x98>
		}else if(fdebug1==FR_NO_PATH){
   149a8:	0004      	movs	r4, r0
   149aa:	e67d      	b.n	146a8 <SD_add_cal_history+0x1c>
			calStPtr = &a2_calst;
   149ac:	4c3a      	ldr	r4, [pc, #232]	; (14a98 <SD_add_cal_history+0x40c>)
   149ae:	e776      	b.n	1489e <SD_add_cal_history+0x212>
			calStPtr = &m1_calst;
   149b0:	4c3a      	ldr	r4, [pc, #232]	; (14a9c <SD_add_cal_history+0x410>)
   149b2:	e774      	b.n	1489e <SD_add_cal_history+0x212>
		strcpy(write_str2,"Inclination & Azimuth Full Calibration");
   149b4:	4b3a      	ldr	r3, [pc, #232]	; (14aa0 <SD_add_cal_history+0x414>)
   149b6:	2227      	movs	r2, #39	; 0x27
   149b8:	493a      	ldr	r1, [pc, #232]	; (14aa4 <SD_add_cal_history+0x418>)
   149ba:	4648      	mov	r0, r9
   149bc:	4798      	blx	r3
		calTempC = cal_report.tempC_inc_azm;
   149be:	4e24      	ldr	r6, [pc, #144]	; (14a50 <SD_add_cal_history+0x3c4>)
   149c0:	6f33      	ldr	r3, [r6, #112]	; 0x70
   149c2:	9313      	str	r3, [sp, #76]	; 0x4c
		timePtr = &cal_report.time_inc_azm;
   149c4:	2358      	movs	r3, #88	; 0x58
		timePtr = &cal_report.time_rangeFinder;
   149c6:	469c      	mov	ip, r3
   149c8:	44b4      	add	ip, r6
   149ca:	4663      	mov	r3, ip
   149cc:	4661      	mov	r1, ip
   149ce:	9310      	str	r3, [sp, #64]	; 0x40
		break;
   149d0:	e6ce      	b.n	14770 <SD_add_cal_history+0xe4>
		strcpy(write_str2,"Azimuth Quick Calibration");
   149d2:	4b33      	ldr	r3, [pc, #204]	; (14aa0 <SD_add_cal_history+0x414>)
   149d4:	221a      	movs	r2, #26
   149d6:	4934      	ldr	r1, [pc, #208]	; (14aa8 <SD_add_cal_history+0x41c>)
   149d8:	4648      	mov	r0, r9
   149da:	4798      	blx	r3
		calTempC = cal_report.tempC_quick_azm;
   149dc:	4e1c      	ldr	r6, [pc, #112]	; (14a50 <SD_add_cal_history+0x3c4>)
   149de:	6f73      	ldr	r3, [r6, #116]	; 0x74
   149e0:	9313      	str	r3, [sp, #76]	; 0x4c
		timePtr = &cal_report.time_quick_azm;
   149e2:	2360      	movs	r3, #96	; 0x60
   149e4:	e7ef      	b.n	149c6 <SD_add_cal_history+0x33a>
		strcpy(write_str2,"Rangefinder Calibration");
   149e6:	4b2e      	ldr	r3, [pc, #184]	; (14aa0 <SD_add_cal_history+0x414>)
   149e8:	2218      	movs	r2, #24
   149ea:	4930      	ldr	r1, [pc, #192]	; (14aac <SD_add_cal_history+0x420>)
   149ec:	4648      	mov	r0, r9
   149ee:	4798      	blx	r3
		calTempC = cal_report.tempC_rangeFinder;
   149f0:	4e17      	ldr	r6, [pc, #92]	; (14a50 <SD_add_cal_history+0x3c4>)
   149f2:	6fb3      	ldr	r3, [r6, #120]	; 0x78
   149f4:	9313      	str	r3, [sp, #76]	; 0x4c
		timePtr = &cal_report.time_rangeFinder;
   149f6:	2368      	movs	r3, #104	; 0x68
   149f8:	e7e5      	b.n	149c6 <SD_add_cal_history+0x33a>
   149fa:	46c0      	nop			; (mov r8, r8)
   149fc:	20000d50 	.word	0x20000d50
   14a00:	fffffd64 	.word	0xfffffd64
   14a04:	00009d1d 	.word	0x00009d1d
   14a08:	00016e99 	.word	0x00016e99
   14a0c:	20004f2c 	.word	0x20004f2c
   14a10:	0000cc15 	.word	0x0000cc15
   14a14:	20003d25 	.word	0x20003d25
   14a18:	0002ded4 	.word	0x0002ded4
   14a1c:	20002b78 	.word	0x20002b78
   14a20:	0000de19 	.word	0x0000de19
   14a24:	200041dc 	.word	0x200041dc
   14a28:	0002dee0 	.word	0x0002dee0
   14a2c:	00028ab1 	.word	0x00028ab1
   14a30:	00028c81 	.word	0x00028c81
   14a34:	20002d3c 	.word	0x20002d3c
   14a38:	20002d20 	.word	0x20002d20
   14a3c:	0002deec 	.word	0x0002deec
   14a40:	0000cc3d 	.word	0x0000cc3d
   14a44:	0000d5d5 	.word	0x0000d5d5
   14a48:	00028c1d 	.word	0x00028c1d
   14a4c:	0000e06d 	.word	0x0000e06d
   14a50:	20004870 	.word	0x20004870
   14a54:	20002da0 	.word	0x20002da0
   14a58:	0000febd 	.word	0x0000febd
   14a5c:	0002878d 	.word	0x0002878d
   14a60:	40160000 	.word	0x40160000
   14a64:	0002e200 	.word	0x0002e200
   14a68:	20005164 	.word	0x20005164
   14a6c:	00026559 	.word	0x00026559
   14a70:	42c80000 	.word	0x42c80000
   14a74:	0002e21c 	.word	0x0002e21c
   14a78:	0002e228 	.word	0x0002e228
   14a7c:	200052e8 	.word	0x200052e8
   14a80:	42652ee0 	.word	0x42652ee0
   14a84:	20003cc8 	.word	0x20003cc8
   14a88:	0000d8d5 	.word	0x0000d8d5
   14a8c:	0000da29 	.word	0x0000da29
   14a90:	0002dee8 	.word	0x0002dee8
   14a94:	0000e24d 	.word	0x0000e24d
   14a98:	20005224 	.word	0x20005224
   14a9c:	200051c8 	.word	0x200051c8
   14aa0:	00028999 	.word	0x00028999
   14aa4:	0002e1a4 	.word	0x0002e1a4
   14aa8:	0002e1cc 	.word	0x0002e1cc
   14aac:	0002e1e8 	.word	0x0002e1e8
		sprintf(write_str1,"YYYY.MM.DD@HH:mm:ss,Calibration Type,SN,Software Version,Temp C, ");
   14ab0:	2242      	movs	r2, #66	; 0x42
   14ab2:	497d      	ldr	r1, [pc, #500]	; (14ca8 <SD_add_cal_history+0x61c>)
   14ab4:	4b7d      	ldr	r3, [pc, #500]	; (14cac <SD_add_cal_history+0x620>)
   14ab6:	4650      	mov	r0, sl
   14ab8:	4798      	blx	r3
		f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
   14aba:	4d7d      	ldr	r5, [pc, #500]	; (14cb0 <SD_add_cal_history+0x624>)
   14abc:	ab19      	add	r3, sp, #100	; 0x64
   14abe:	2241      	movs	r2, #65	; 0x41
   14ac0:	4651      	mov	r1, sl
   14ac2:	4658      	mov	r0, fp
   14ac4:	001f      	movs	r7, r3
   14ac6:	9312      	str	r3, [sp, #72]	; 0x48
   14ac8:	950e      	str	r5, [sp, #56]	; 0x38
   14aca:	47a8      	blx	r5
		sprintf(write_str1,"Rangefinder Offset (Mt), Groups, Points,Inc Angle Error stdev (deg),Azm Angle Error stdev (deg),Acc1 magnitude stdev (%%),Acc2 magnitude stdev (%%),Mag1 magnitude stdev (%%),Mag2 magnitude stdev (%%),");
   14acc:	4979      	ldr	r1, [pc, #484]	; (14cb4 <SD_add_cal_history+0x628>)
   14ace:	4a7a      	ldr	r2, [pc, #488]	; (14cb8 <SD_add_cal_history+0x62c>)
   14ad0:	4650      	mov	r0, sl
   14ad2:	4790      	blx	r2
		f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14ad4:	4b79      	ldr	r3, [pc, #484]	; (14cbc <SD_add_cal_history+0x630>)
   14ad6:	4650      	mov	r0, sl
   14ad8:	930f      	str	r3, [sp, #60]	; 0x3c
   14ada:	4798      	blx	r3
   14adc:	003b      	movs	r3, r7
   14ade:	0002      	movs	r2, r0
   14ae0:	4651      	mov	r1, sl
   14ae2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14ae4:	4658      	mov	r0, fp
   14ae6:	47a8      	blx	r5
		sprintf(write_str1,"Acc X disparity (%%),Acc Y disparity (%%),Acc Z disparity (%%),Mag X disparity (%%),Mag Y disparity (%%),Mag Z disparity (%%),");
   14ae8:	4975      	ldr	r1, [pc, #468]	; (14cc0 <SD_add_cal_history+0x634>)
   14aea:	4a73      	ldr	r2, [pc, #460]	; (14cb8 <SD_add_cal_history+0x62c>)
   14aec:	4650      	mov	r0, sl
   14aee:	4790      	blx	r2
		f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14af2:	4650      	mov	r0, sl
   14af4:	4798      	blx	r3
   14af6:	003b      	movs	r3, r7
   14af8:	0002      	movs	r2, r0
   14afa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14afc:	4651      	mov	r1, sl
   14afe:	4658      	mov	r0, fp
   14b00:	47a8      	blx	r5
   14b02:	2201      	movs	r2, #1
   14b04:	0013      	movs	r3, r2
			switch (i){
   14b06:	3b01      	subs	r3, #1
   14b08:	ad1a      	add	r5, sp, #104	; 0x68
   14b0a:	9214      	str	r2, [sp, #80]	; 0x50
   14b0c:	9617      	str	r6, [sp, #92]	; 0x5c
   14b0e:	9715      	str	r7, [sp, #84]	; 0x54
   14b10:	46a0      	mov	r8, r4
   14b12:	2b02      	cmp	r3, #2
   14b14:	d045      	beq.n	14ba2 <SD_add_cal_history+0x516>
   14b16:	2b03      	cmp	r3, #3
   14b18:	d100      	bne.n	14b1c <SD_add_cal_history+0x490>
   14b1a:	e084      	b.n	14c26 <SD_add_cal_history+0x59a>
   14b1c:	2b01      	cmp	r3, #1
   14b1e:	d07a      	beq.n	14c16 <SD_add_cal_history+0x58a>
				strcpy(str_temp,"Acc1");
   14b20:	4b68      	ldr	r3, [pc, #416]	; (14cc4 <SD_add_cal_history+0x638>)
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
   14b22:	002a      	movs	r2, r5
				strcpy(str_temp,"Acc1");
   14b24:	681b      	ldr	r3, [r3, #0]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
   14b26:	4968      	ldr	r1, [pc, #416]	; (14cc8 <SD_add_cal_history+0x63c>)
				strcpy(str_temp,"Acc1");
   14b28:	9316      	str	r3, [sp, #88]	; 0x58
   14b2a:	602b      	str	r3, [r5, #0]
   14b2c:	4b65      	ldr	r3, [pc, #404]	; (14cc4 <SD_add_cal_history+0x638>)
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
   14b2e:	4650      	mov	r0, sl
				strcpy(str_temp,"Acc1");
   14b30:	791b      	ldrb	r3, [r3, #4]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
   14b32:	4c61      	ldr	r4, [pc, #388]	; (14cb8 <SD_add_cal_history+0x62c>)
				strcpy(str_temp,"Acc1");
   14b34:	712b      	strb	r3, [r5, #4]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
   14b36:	002b      	movs	r3, r5
   14b38:	9503      	str	r5, [sp, #12]
   14b3a:	9502      	str	r5, [sp, #8]
   14b3c:	9501      	str	r5, [sp, #4]
   14b3e:	9500      	str	r5, [sp, #0]
   14b40:	47a0      	blx	r4
			f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
   14b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14b44:	4650      	mov	r0, sl
   14b46:	4798      	blx	r3
   14b48:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   14b4a:	0002      	movs	r2, r0
   14b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14b4e:	4651      	mov	r1, sl
   14b50:	4658      	mov	r0, fp
   14b52:	47b8      	blx	r7
			sprintf(write_str1,"%s YX Misalignment (deg),%s ZY Misalignment (deg),%s ZX Misalignment (deg),",str_temp,str_temp,str_temp);
   14b54:	002a      	movs	r2, r5
   14b56:	495d      	ldr	r1, [pc, #372]	; (14ccc <SD_add_cal_history+0x640>)
   14b58:	002b      	movs	r3, r5
   14b5a:	4e57      	ldr	r6, [pc, #348]	; (14cb8 <SD_add_cal_history+0x62c>)
   14b5c:	9500      	str	r5, [sp, #0]
   14b5e:	4650      	mov	r0, sl
   14b60:	47b0      	blx	r6
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14b62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14b64:	4650      	mov	r0, sl
   14b66:	4798      	blx	r3
   14b68:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14b6a:	0002      	movs	r2, r0
   14b6c:	4651      	mov	r1, sl
   14b6e:	4658      	mov	r0, fp
   14b70:	47b8      	blx	r7
			sprintf(write_str1,"%s thetaX Misalignment (deg),%s thetaY Misalignment (deg),%s thetaZ Misalignment (deg),",str_temp,str_temp,str_temp);
   14b72:	002a      	movs	r2, r5
   14b74:	4956      	ldr	r1, [pc, #344]	; (14cd0 <SD_add_cal_history+0x644>)
   14b76:	002b      	movs	r3, r5
   14b78:	9500      	str	r5, [sp, #0]
   14b7a:	4650      	mov	r0, sl
   14b7c:	4e4e      	ldr	r6, [pc, #312]	; (14cb8 <SD_add_cal_history+0x62c>)
   14b7e:	47b0      	blx	r6
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14b82:	4650      	mov	r0, sl
   14b84:	4798      	blx	r3
   14b86:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14b88:	0002      	movs	r2, r0
   14b8a:	4651      	mov	r1, sl
   14b8c:	4658      	mov	r0, fp
   14b8e:	47b8      	blx	r7
		for (i=0;i<4;i++){
   14b90:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14b92:	2b04      	cmp	r3, #4
   14b94:	d100      	bne.n	14b98 <SD_add_cal_history+0x50c>
   14b96:	e083      	b.n	14ca0 <SD_add_cal_history+0x614>
   14b98:	3301      	adds	r3, #1
   14b9a:	9314      	str	r3, [sp, #80]	; 0x50
			switch (i){
   14b9c:	3b01      	subs	r3, #1
   14b9e:	2b02      	cmp	r3, #2
   14ba0:	d1b9      	bne.n	14b16 <SD_add_cal_history+0x48a>
				strcpy(str_temp,"Mag1");
   14ba2:	4b4c      	ldr	r3, [pc, #304]	; (14cd4 <SD_add_cal_history+0x648>)
   14ba4:	681b      	ldr	r3, [r3, #0]
   14ba6:	9316      	str	r3, [sp, #88]	; 0x58
   14ba8:	602b      	str	r3, [r5, #0]
   14baa:	4b4a      	ldr	r3, [pc, #296]	; (14cd4 <SD_add_cal_history+0x648>)
   14bac:	791b      	ldrb	r3, [r3, #4]
   14bae:	712b      	strb	r3, [r5, #4]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
   14bb0:	002b      	movs	r3, r5
   14bb2:	002a      	movs	r2, r5
   14bb4:	4944      	ldr	r1, [pc, #272]	; (14cc8 <SD_add_cal_history+0x63c>)
   14bb6:	4c40      	ldr	r4, [pc, #256]	; (14cb8 <SD_add_cal_history+0x62c>)
   14bb8:	9503      	str	r5, [sp, #12]
   14bba:	9502      	str	r5, [sp, #8]
   14bbc:	9501      	str	r5, [sp, #4]
   14bbe:	9500      	str	r5, [sp, #0]
   14bc0:	4650      	mov	r0, sl
   14bc2:	47a0      	blx	r4
			f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
   14bc4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   14bc6:	4650      	mov	r0, sl
   14bc8:	47a0      	blx	r4
   14bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14bcc:	0002      	movs	r2, r0
   14bce:	4651      	mov	r1, sl
   14bd0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14bd2:	4658      	mov	r0, fp
   14bd4:	47b0      	blx	r6
			sprintf(write_str1,"%s YX Misalignment (deg),%s ZY Misalignment (deg),%s ZX Misalignment (deg),",str_temp,str_temp,str_temp);
   14bd6:	002b      	movs	r3, r5
   14bd8:	002a      	movs	r2, r5
   14bda:	493c      	ldr	r1, [pc, #240]	; (14ccc <SD_add_cal_history+0x640>)
   14bdc:	4f36      	ldr	r7, [pc, #216]	; (14cb8 <SD_add_cal_history+0x62c>)
   14bde:	9500      	str	r5, [sp, #0]
   14be0:	4650      	mov	r0, sl
   14be2:	47b8      	blx	r7
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14be4:	4650      	mov	r0, sl
   14be6:	47a0      	blx	r4
   14be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14bea:	0002      	movs	r2, r0
   14bec:	4651      	mov	r1, sl
   14bee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14bf0:	4658      	mov	r0, fp
   14bf2:	47b0      	blx	r6
			sprintf(write_str1,"%s thetaX Misalignment (deg),%s thetaY Misalignment (deg),%s thetaZ Misalignment (deg),",str_temp,str_temp,str_temp);
   14bf4:	002b      	movs	r3, r5
   14bf6:	002a      	movs	r2, r5
   14bf8:	4935      	ldr	r1, [pc, #212]	; (14cd0 <SD_add_cal_history+0x644>)
   14bfa:	9500      	str	r5, [sp, #0]
   14bfc:	4650      	mov	r0, sl
   14bfe:	4f2e      	ldr	r7, [pc, #184]	; (14cb8 <SD_add_cal_history+0x62c>)
   14c00:	47b8      	blx	r7
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14c02:	4650      	mov	r0, sl
   14c04:	47a0      	blx	r4
   14c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14c08:	0002      	movs	r2, r0
   14c0a:	4651      	mov	r1, sl
   14c0c:	4658      	mov	r0, fp
   14c0e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14c10:	47b0      	blx	r6
   14c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14c14:	e7c0      	b.n	14b98 <SD_add_cal_history+0x50c>
				strcpy(str_temp,"Acc2");
   14c16:	4b30      	ldr	r3, [pc, #192]	; (14cd8 <SD_add_cal_history+0x64c>)
   14c18:	681b      	ldr	r3, [r3, #0]
   14c1a:	9316      	str	r3, [sp, #88]	; 0x58
   14c1c:	602b      	str	r3, [r5, #0]
   14c1e:	4b2e      	ldr	r3, [pc, #184]	; (14cd8 <SD_add_cal_history+0x64c>)
   14c20:	791b      	ldrb	r3, [r3, #4]
   14c22:	712b      	strb	r3, [r5, #4]
				break;
   14c24:	e7c4      	b.n	14bb0 <SD_add_cal_history+0x524>
				strcpy(str_temp,"Mag2");
   14c26:	4b2d      	ldr	r3, [pc, #180]	; (14cdc <SD_add_cal_history+0x650>)
   14c28:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   14c2a:	681a      	ldr	r2, [r3, #0]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
   14c2c:	4926      	ldr	r1, [pc, #152]	; (14cc8 <SD_add_cal_history+0x63c>)
				strcpy(str_temp,"Mag2");
   14c2e:	921a      	str	r2, [sp, #104]	; 0x68
   14c30:	791b      	ldrb	r3, [r3, #4]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
   14c32:	002a      	movs	r2, r5
				strcpy(str_temp,"Mag2");
   14c34:	712b      	strb	r3, [r5, #4]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
   14c36:	4650      	mov	r0, sl
   14c38:	9503      	str	r5, [sp, #12]
   14c3a:	9502      	str	r5, [sp, #8]
   14c3c:	9501      	str	r5, [sp, #4]
   14c3e:	9500      	str	r5, [sp, #0]
   14c40:	002b      	movs	r3, r5
   14c42:	4f1d      	ldr	r7, [pc, #116]	; (14cb8 <SD_add_cal_history+0x62c>)
   14c44:	47b8      	blx	r7
			f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
   14c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14c48:	4650      	mov	r0, sl
   14c4a:	4798      	blx	r3
   14c4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14c4e:	0002      	movs	r2, r0
   14c50:	4651      	mov	r1, sl
   14c52:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   14c54:	4658      	mov	r0, fp
   14c56:	4644      	mov	r4, r8
   14c58:	4698      	mov	r8, r3
   14c5a:	47b8      	blx	r7
			sprintf(write_str1,"%s YX Misalignment (deg),%s ZY Misalignment (deg),%s ZX Misalignment (deg),",str_temp,str_temp,str_temp);
   14c5c:	4f16      	ldr	r7, [pc, #88]	; (14cb8 <SD_add_cal_history+0x62c>)
   14c5e:	002a      	movs	r2, r5
   14c60:	46bc      	mov	ip, r7
   14c62:	9500      	str	r5, [sp, #0]
   14c64:	002b      	movs	r3, r5
   14c66:	4919      	ldr	r1, [pc, #100]	; (14ccc <SD_add_cal_history+0x640>)
   14c68:	4650      	mov	r0, sl
   14c6a:	47e0      	blx	ip
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14c6e:	4650      	mov	r0, sl
   14c70:	4798      	blx	r3
   14c72:	4643      	mov	r3, r8
   14c74:	0002      	movs	r2, r0
   14c76:	4651      	mov	r1, sl
   14c78:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   14c7a:	4658      	mov	r0, fp
   14c7c:	47b8      	blx	r7
			sprintf(write_str1,"%s thetaX Misalignment (deg),%s thetaY Misalignment (deg),%s thetaZ Misalignment (deg),",str_temp,str_temp,str_temp);
   14c7e:	002a      	movs	r2, r5
   14c80:	9500      	str	r5, [sp, #0]
   14c82:	002b      	movs	r3, r5
   14c84:	4912      	ldr	r1, [pc, #72]	; (14cd0 <SD_add_cal_history+0x644>)
   14c86:	4650      	mov	r0, sl
   14c88:	4d0b      	ldr	r5, [pc, #44]	; (14cb8 <SD_add_cal_history+0x62c>)
   14c8a:	47a8      	blx	r5
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14c8e:	4650      	mov	r0, sl
   14c90:	4798      	blx	r3
   14c92:	4643      	mov	r3, r8
   14c94:	0002      	movs	r2, r0
   14c96:	4651      	mov	r1, sl
   14c98:	4658      	mov	r0, fp
   14c9a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   14c9c:	47b8      	blx	r7
   14c9e:	e557      	b.n	14750 <SD_add_cal_history+0xc4>
   14ca0:	4644      	mov	r4, r8
   14ca2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   14ca4:	e554      	b.n	14750 <SD_add_cal_history+0xc4>
   14ca6:	46c0      	nop			; (mov r8, r8)
   14ca8:	0002df0c 	.word	0x0002df0c
   14cac:	00028999 	.word	0x00028999
   14cb0:	0000d5d5 	.word	0x0000d5d5
   14cb4:	0002df50 	.word	0x0002df50
   14cb8:	00028ab1 	.word	0x00028ab1
   14cbc:	00028c1d 	.word	0x00028c1d
   14cc0:	0002e01c 	.word	0x0002e01c
   14cc4:	0002e09c 	.word	0x0002e09c
   14cc8:	0002e0a4 	.word	0x0002e0a4
   14ccc:	0002e0e8 	.word	0x0002e0e8
   14cd0:	0002e134 	.word	0x0002e134
   14cd4:	0002e194 	.word	0x0002e194
   14cd8:	0002e18c 	.word	0x0002e18c
   14cdc:	0002e19c 	.word	0x0002e19c

00014ce0 <SD_write_report>:
FRESULT SD_write_report(void){
   14ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ce2:	4657      	mov	r7, sl
   14ce4:	46de      	mov	lr, fp
   14ce6:	464e      	mov	r6, r9
   14ce8:	4645      	mov	r5, r8
   14cea:	b5e0      	push	{r5, r6, r7, lr}
	if (SD_WriteLockout){
   14cec:	4b34      	ldr	r3, [pc, #208]	; (14dc0 <SD_write_report+0xe0>)
FRESULT SD_write_report(void){
   14cee:	4c35      	ldr	r4, [pc, #212]	; (14dc4 <SD_write_report+0xe4>)
	if (SD_WriteLockout){
   14cf0:	781b      	ldrb	r3, [r3, #0]
FRESULT SD_write_report(void){
   14cf2:	44a5      	add	sp, r4
		return FR_DENIED;
   14cf4:	2707      	movs	r7, #7
	if (SD_WriteLockout){
   14cf6:	2b00      	cmp	r3, #0
   14cf8:	d009      	beq.n	14d0e <SD_write_report+0x2e>
}
   14cfa:	0038      	movs	r0, r7
   14cfc:	23e3      	movs	r3, #227	; 0xe3
   14cfe:	009b      	lsls	r3, r3, #2
   14d00:	449d      	add	sp, r3
   14d02:	bc3c      	pop	{r2, r3, r4, r5}
   14d04:	4690      	mov	r8, r2
   14d06:	4699      	mov	r9, r3
   14d08:	46a2      	mov	sl, r4
   14d0a:	46ab      	mov	fp, r5
   14d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	diskio_status = disk_status(0);
   14d0e:	2000      	movs	r0, #0
   14d10:	4c2d      	ldr	r4, [pc, #180]	; (14dc8 <SD_write_report+0xe8>)
   14d12:	47a0      	blx	r4
	if(diskio_status){
   14d14:	2800      	cmp	r0, #0
   14d16:	d010      	beq.n	14d3a <SD_write_report+0x5a>
	sd_mmc_init();
   14d18:	4b2c      	ldr	r3, [pc, #176]	; (14dcc <SD_write_report+0xec>)
   14d1a:	4798      	blx	r3
	disk_status(0);
   14d1c:	2000      	movs	r0, #0
   14d1e:	47a0      	blx	r4
	fdebug1 = f_mount(0, &FatFS);
   14d20:	492b      	ldr	r1, [pc, #172]	; (14dd0 <SD_write_report+0xf0>)
   14d22:	2000      	movs	r0, #0
   14d24:	4b2b      	ldr	r3, [pc, #172]	; (14dd4 <SD_write_report+0xf4>)
   14d26:	4798      	blx	r3
		diskio_status = disk_status(0);
   14d28:	2000      	movs	r0, #0
   14d2a:	47a0      	blx	r4
		if(diskio_status){
   14d2c:	2800      	cmp	r0, #0
   14d2e:	d004      	beq.n	14d3a <SD_write_report+0x5a>
			SD_status = fdebug1;
   14d30:	2203      	movs	r2, #3
   14d32:	4b29      	ldr	r3, [pc, #164]	; (14dd8 <SD_write_report+0xf8>)
			return fdebug1;
   14d34:	3f04      	subs	r7, #4
			SD_status = fdebug1;
   14d36:	701a      	strb	r2, [r3, #0]
			return fdebug1;
   14d38:	e7df      	b.n	14cfa <SD_write_report+0x1a>
			strcpy(folderName,"calibration");
   14d3a:	4b28      	ldr	r3, [pc, #160]	; (14ddc <SD_write_report+0xfc>)
   14d3c:	aa59      	add	r2, sp, #356	; 0x164
   14d3e:	cb13      	ldmia	r3!, {r0, r1, r4}
   14d40:	c213      	stmia	r2!, {r0, r1, r4}
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   14d42:	21c8      	movs	r1, #200	; 0xc8
   14d44:	4b26      	ldr	r3, [pc, #152]	; (14de0 <SD_write_report+0x100>)
   14d46:	0049      	lsls	r1, r1, #1
   14d48:	0018      	movs	r0, r3
   14d4a:	469b      	mov	fp, r3
   14d4c:	4b25      	ldr	r3, [pc, #148]	; (14de4 <SD_write_report+0x104>)
   14d4e:	4798      	blx	r3
   14d50:	1e07      	subs	r7, r0, #0
	if(fdebug1!=FR_OK){
   14d52:	d1d2      	bne.n	14cfa <SD_write_report+0x1a>
	sprintf(write_str2,"0:/%s",folderName);
   14d54:	4b24      	ldr	r3, [pc, #144]	; (14de8 <SD_write_report+0x108>)
   14d56:	aa59      	add	r2, sp, #356	; 0x164
   14d58:	4699      	mov	r9, r3
   14d5a:	4924      	ldr	r1, [pc, #144]	; (14dec <SD_write_report+0x10c>)
   14d5c:	0018      	movs	r0, r3
   14d5e:	4b24      	ldr	r3, [pc, #144]	; (14df0 <SD_write_report+0x110>)
   14d60:	4798      	blx	r3
	if (strncmp(write_str1,write_str2,20)!=0){
   14d62:	2214      	movs	r2, #20
   14d64:	4649      	mov	r1, r9
   14d66:	4658      	mov	r0, fp
   14d68:	4b22      	ldr	r3, [pc, #136]	; (14df4 <SD_write_report+0x114>)
   14d6a:	4798      	blx	r3
   14d6c:	2800      	cmp	r0, #0
   14d6e:	d116      	bne.n	14d9e <SD_write_report+0xbe>
	genTimestampString(write_str2, &current_time, 2);
   14d70:	4e21      	ldr	r6, [pc, #132]	; (14df8 <SD_write_report+0x118>)
   14d72:	2202      	movs	r2, #2
   14d74:	0031      	movs	r1, r6
   14d76:	4648      	mov	r0, r9
   14d78:	4d20      	ldr	r5, [pc, #128]	; (14dfc <SD_write_report+0x11c>)
   14d7a:	47a8      	blx	r5
	sprintf(file_name, "Calibration_Report_%s_SN%04d.txt",
   14d7c:	4c20      	ldr	r4, [pc, #128]	; (14e00 <SD_write_report+0x120>)
   14d7e:	464a      	mov	r2, r9
   14d80:	6863      	ldr	r3, [r4, #4]
   14d82:	4920      	ldr	r1, [pc, #128]	; (14e04 <SD_write_report+0x124>)
   14d84:	4f1a      	ldr	r7, [pc, #104]	; (14df0 <SD_write_report+0x110>)
   14d86:	a816      	add	r0, sp, #88	; 0x58
   14d88:	47b8      	blx	r7
	fdebug2 = f_open(&file1, file_name, FA_CREATE_NEW | FA_READ | FA_WRITE);
   14d8a:	2207      	movs	r2, #7
   14d8c:	a916      	add	r1, sp, #88	; 0x58
   14d8e:	a859      	add	r0, sp, #356	; 0x164
   14d90:	4b1d      	ldr	r3, [pc, #116]	; (14e08 <SD_write_report+0x128>)
   14d92:	4798      	blx	r3
   14d94:	1e07      	subs	r7, r0, #0
	if(fdebug2!=FR_OK){
   14d96:	d03f      	beq.n	14e18 <SD_write_report+0x138>
		SD_status = fdebug2;
   14d98:	4b0f      	ldr	r3, [pc, #60]	; (14dd8 <SD_write_report+0xf8>)
   14d9a:	7018      	strb	r0, [r3, #0]
		return fdebug2;
   14d9c:	e7ad      	b.n	14cfa <SD_write_report+0x1a>
		fdebug1 = f_chdir(write_str2);
   14d9e:	4648      	mov	r0, r9
   14da0:	4c1a      	ldr	r4, [pc, #104]	; (14e0c <SD_write_report+0x12c>)
   14da2:	47a0      	blx	r4
   14da4:	1e07      	subs	r7, r0, #0
		if (fdebug1==FR_OK){
   14da6:	d0e3      	beq.n	14d70 <SD_write_report+0x90>
		}else if(fdebug1==FR_NO_PATH){
   14da8:	2805      	cmp	r0, #5
   14daa:	d1a6      	bne.n	14cfa <SD_write_report+0x1a>
			fdebug1 = f_chdir("0:/");
   14dac:	4818      	ldr	r0, [pc, #96]	; (14e10 <SD_write_report+0x130>)
   14dae:	47a0      	blx	r4
			fdebug1 = f_mkdir(folderName);
   14db0:	4b18      	ldr	r3, [pc, #96]	; (14e14 <SD_write_report+0x134>)
   14db2:	a859      	add	r0, sp, #356	; 0x164
   14db4:	4798      	blx	r3
			fdebug1 = f_chdir(write_str2);
   14db6:	4648      	mov	r0, r9
   14db8:	47a0      	blx	r4
   14dba:	1e07      	subs	r7, r0, #0
	if(fdebug1!=FR_OK){
   14dbc:	d0d8      	beq.n	14d70 <SD_write_report+0x90>
   14dbe:	e79c      	b.n	14cfa <SD_write_report+0x1a>
   14dc0:	20000d50 	.word	0x20000d50
   14dc4:	fffffc74 	.word	0xfffffc74
   14dc8:	00009d1d 	.word	0x00009d1d
   14dcc:	00016e99 	.word	0x00016e99
   14dd0:	20004f2c 	.word	0x20004f2c
   14dd4:	0000cc15 	.word	0x0000cc15
   14dd8:	20003d25 	.word	0x20003d25
   14ddc:	0002ded4 	.word	0x0002ded4
   14de0:	20002b78 	.word	0x20002b78
   14de4:	0000de19 	.word	0x0000de19
   14de8:	200041dc 	.word	0x200041dc
   14dec:	0002dee0 	.word	0x0002dee0
   14df0:	00028ab1 	.word	0x00028ab1
   14df4:	00028c81 	.word	0x00028c81
   14df8:	20002628 	.word	0x20002628
   14dfc:	0000febd 	.word	0x0000febd
   14e00:	20002d20 	.word	0x20002d20
   14e04:	0002e284 	.word	0x0002e284
   14e08:	0000cc3d 	.word	0x0000cc3d
   14e0c:	0000da29 	.word	0x0000da29
   14e10:	0002dee8 	.word	0x0002dee8
   14e14:	0000e24d 	.word	0x0000e24d
	genTimestampString(write_str2, &current_time, 1);
   14e18:	0031      	movs	r1, r6
   14e1a:	2201      	movs	r2, #1
   14e1c:	4648      	mov	r0, r9
   14e1e:	47a8      	blx	r5
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n%s\r\n\r\n",write_str2);
   14e20:	464a      	mov	r2, r9
   14e22:	49f8      	ldr	r1, [pc, #992]	; (15204 <SD_write_report+0x524>)
   14e24:	4bf8      	ldr	r3, [pc, #992]	; (15208 <SD_write_report+0x528>)
   14e26:	4658      	mov	r0, fp
   14e28:	4798      	blx	r3
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14e2a:	4bf8      	ldr	r3, [pc, #992]	; (1520c <SD_write_report+0x52c>)
   14e2c:	4658      	mov	r0, fp
   14e2e:	4798      	blx	r3
   14e30:	ab15      	add	r3, sp, #84	; 0x54
   14e32:	0002      	movs	r2, r0
   14e34:	4659      	mov	r1, fp
   14e36:	4df6      	ldr	r5, [pc, #984]	; (15210 <SD_write_report+0x530>)
   14e38:	a859      	add	r0, sp, #356	; 0x164
   14e3a:	47a8      	blx	r5
	sprintf(write_str1,"SN: %04d\r\nSoftware Version: %1.1f\r\n", options.SerialNumber, cal_report.software_version);
   14e3c:	4ef5      	ldr	r6, [pc, #980]	; (15214 <SD_write_report+0x534>)
   14e3e:	4bf6      	ldr	r3, [pc, #984]	; (15218 <SD_write_report+0x538>)
   14e40:	6830      	ldr	r0, [r6, #0]
   14e42:	469a      	mov	sl, r3
   14e44:	4798      	blx	r3
   14e46:	6864      	ldr	r4, [r4, #4]
   14e48:	4bef      	ldr	r3, [pc, #956]	; (15208 <SD_write_report+0x528>)
   14e4a:	0022      	movs	r2, r4
   14e4c:	9000      	str	r0, [sp, #0]
   14e4e:	9101      	str	r1, [sp, #4]
   14e50:	49f2      	ldr	r1, [pc, #968]	; (1521c <SD_write_report+0x53c>)
   14e52:	4658      	mov	r0, fp
   14e54:	4798      	blx	r3
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14e56:	4bed      	ldr	r3, [pc, #948]	; (1520c <SD_write_report+0x52c>)
   14e58:	4658      	mov	r0, fp
   14e5a:	4798      	blx	r3
   14e5c:	4659      	mov	r1, fp
   14e5e:	0002      	movs	r2, r0
   14e60:	ab15      	add	r3, sp, #84	; 0x54
   14e62:	4ceb      	ldr	r4, [pc, #940]	; (15210 <SD_write_report+0x530>)
   14e64:	a859      	add	r0, sp, #356	; 0x164
   14e66:	47a0      	blx	r4
			cal_report.tempC_inc_azm, celsius2fahrenheit(cal_report.tempC_inc_azm));
   14e68:	6f34      	ldr	r4, [r6, #112]	; 0x70
   14e6a:	4bed      	ldr	r3, [pc, #948]	; (15220 <SD_write_report+0x540>)
   14e6c:	1c20      	adds	r0, r4, #0
   14e6e:	4798      	blx	r3
   14e70:	4680      	mov	r8, r0
	sprintf(write_str1,"Temperature: %0.2f celsius, %0.2f fahrenheit\r\n\r\n", 
   14e72:	1c20      	adds	r0, r4, #0
   14e74:	47d0      	blx	sl
   14e76:	0004      	movs	r4, r0
   14e78:	4640      	mov	r0, r8
   14e7a:	000d      	movs	r5, r1
   14e7c:	47d0      	blx	sl
   14e7e:	0022      	movs	r2, r4
   14e80:	9000      	str	r0, [sp, #0]
   14e82:	9101      	str	r1, [sp, #4]
   14e84:	002b      	movs	r3, r5
   14e86:	49e7      	ldr	r1, [pc, #924]	; (15224 <SD_write_report+0x544>)
   14e88:	4cdf      	ldr	r4, [pc, #892]	; (15208 <SD_write_report+0x528>)
   14e8a:	4658      	mov	r0, fp
   14e8c:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
   14e8e:	4bdf      	ldr	r3, [pc, #892]	; (1520c <SD_write_report+0x52c>)
   14e90:	4658      	mov	r0, fp
   14e92:	4798      	blx	r3
   14e94:	ab15      	add	r3, sp, #84	; 0x54
   14e96:	0002      	movs	r2, r0
   14e98:	4659      	mov	r1, fp
   14e9a:	4cdd      	ldr	r4, [pc, #884]	; (15210 <SD_write_report+0x530>)
   14e9c:	a859      	add	r0, sp, #356	; 0x164
   14e9e:	47a0      	blx	r4
	sprintf(write_str1,"Measurements: %d\r\n4-Point Groups: %d\r\n\r\n",
   14ea0:	68b2      	ldr	r2, [r6, #8]
   14ea2:	49e1      	ldr	r1, [pc, #900]	; (15228 <SD_write_report+0x548>)
   14ea4:	6873      	ldr	r3, [r6, #4]
   14ea6:	4cd8      	ldr	r4, [pc, #864]	; (15208 <SD_write_report+0x528>)
   14ea8:	4658      	mov	r0, fp
   14eaa:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14eac:	4bd7      	ldr	r3, [pc, #860]	; (1520c <SD_write_report+0x52c>)
   14eae:	4658      	mov	r0, fp
   14eb0:	4798      	blx	r3
   14eb2:	ab15      	add	r3, sp, #84	; 0x54
   14eb4:	0002      	movs	r2, r0
   14eb6:	4659      	mov	r1, fp
   14eb8:	4cd5      	ldr	r4, [pc, #852]	; (15210 <SD_write_report+0x530>)
   14eba:	a859      	add	r0, sp, #356	; 0x164
   14ebc:	47a0      	blx	r4
	sprintf(write_str1,"Angle Error Standard Deviation:\r\n  Azimuth: %3.6f degrees\r\n  Inclination: %3.6f degrees\r\n",
   14ebe:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   14ec0:	47d0      	blx	sl
   14ec2:	0004      	movs	r4, r0
   14ec4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   14ec6:	000d      	movs	r5, r1
   14ec8:	47d0      	blx	sl
   14eca:	0022      	movs	r2, r4
   14ecc:	9000      	str	r0, [sp, #0]
   14ece:	9101      	str	r1, [sp, #4]
   14ed0:	002b      	movs	r3, r5
   14ed2:	49d6      	ldr	r1, [pc, #856]	; (1522c <SD_write_report+0x54c>)
   14ed4:	4ccc      	ldr	r4, [pc, #816]	; (15208 <SD_write_report+0x528>)
   14ed6:	4658      	mov	r0, fp
   14ed8:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14eda:	4bcc      	ldr	r3, [pc, #816]	; (1520c <SD_write_report+0x52c>)
   14edc:	4658      	mov	r0, fp
   14ede:	4798      	blx	r3
   14ee0:	ab15      	add	r3, sp, #84	; 0x54
   14ee2:	0002      	movs	r2, r0
   14ee4:	4659      	mov	r1, fp
   14ee6:	4cca      	ldr	r4, [pc, #808]	; (15210 <SD_write_report+0x530>)
   14ee8:	a859      	add	r0, sp, #356	; 0x164
   14eea:	47a0      	blx	r4
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100,cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
   14eec:	6b30      	ldr	r0, [r6, #48]	; 0x30
   14eee:	4bd0      	ldr	r3, [pc, #832]	; (15230 <SD_write_report+0x550>)
   14ef0:	49d0      	ldr	r1, [pc, #832]	; (15234 <SD_write_report+0x554>)
   14ef2:	4798      	blx	r3
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
   14ef4:	47d0      	blx	sl
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100,cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
   14ef6:	4bce      	ldr	r3, [pc, #824]	; (15230 <SD_write_report+0x550>)
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
   14ef8:	0004      	movs	r4, r0
   14efa:	000d      	movs	r5, r1
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100,cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
   14efc:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   14efe:	49cd      	ldr	r1, [pc, #820]	; (15234 <SD_write_report+0x554>)
   14f00:	4798      	blx	r3
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
   14f02:	47d0      	blx	sl
   14f04:	9004      	str	r0, [sp, #16]
   14f06:	9105      	str	r1, [sp, #20]
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100,cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
   14f08:	4bc9      	ldr	r3, [pc, #804]	; (15230 <SD_write_report+0x550>)
   14f0a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   14f0c:	49c9      	ldr	r1, [pc, #804]	; (15234 <SD_write_report+0x554>)
   14f0e:	4798      	blx	r3
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
   14f10:	47d0      	blx	sl
   14f12:	9002      	str	r0, [sp, #8]
   14f14:	9103      	str	r1, [sp, #12]
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100,cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
   14f16:	4bc6      	ldr	r3, [pc, #792]	; (15230 <SD_write_report+0x550>)
   14f18:	6b70      	ldr	r0, [r6, #52]	; 0x34
   14f1a:	49c6      	ldr	r1, [pc, #792]	; (15234 <SD_write_report+0x554>)
   14f1c:	4798      	blx	r3
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
   14f1e:	47d0      	blx	sl
   14f20:	0022      	movs	r2, r4
   14f22:	9000      	str	r0, [sp, #0]
   14f24:	9101      	str	r1, [sp, #4]
   14f26:	002b      	movs	r3, r5
   14f28:	49c3      	ldr	r1, [pc, #780]	; (15238 <SD_write_report+0x558>)
   14f2a:	4cb7      	ldr	r4, [pc, #732]	; (15208 <SD_write_report+0x528>)
   14f2c:	4658      	mov	r0, fp
   14f2e:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14f30:	4bb6      	ldr	r3, [pc, #728]	; (1520c <SD_write_report+0x52c>)
   14f32:	4658      	mov	r0, fp
   14f34:	4798      	blx	r3
   14f36:	ab15      	add	r3, sp, #84	; 0x54
   14f38:	0002      	movs	r2, r0
   14f3a:	4659      	mov	r1, fp
   14f3c:	4cb4      	ldr	r4, [pc, #720]	; (15210 <SD_write_report+0x530>)
   14f3e:	a859      	add	r0, sp, #356	; 0x164
   14f40:	47a0      	blx	r4
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100,cal_report.disp_stdev_acc[2]*100);
   14f42:	6c30      	ldr	r0, [r6, #64]	; 0x40
   14f44:	4bba      	ldr	r3, [pc, #744]	; (15230 <SD_write_report+0x550>)
   14f46:	49bb      	ldr	r1, [pc, #748]	; (15234 <SD_write_report+0x554>)
   14f48:	4798      	blx	r3
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
   14f4a:	47d0      	blx	sl
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100,cal_report.disp_stdev_acc[2]*100);
   14f4c:	4bb8      	ldr	r3, [pc, #736]	; (15230 <SD_write_report+0x550>)
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
   14f4e:	0004      	movs	r4, r0
   14f50:	000d      	movs	r5, r1
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100,cal_report.disp_stdev_acc[2]*100);
   14f52:	6cb0      	ldr	r0, [r6, #72]	; 0x48
   14f54:	49b7      	ldr	r1, [pc, #732]	; (15234 <SD_write_report+0x554>)
   14f56:	4798      	blx	r3
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
   14f58:	47d0      	blx	sl
   14f5a:	9002      	str	r0, [sp, #8]
   14f5c:	9103      	str	r1, [sp, #12]
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100,cal_report.disp_stdev_acc[2]*100);
   14f5e:	4bb4      	ldr	r3, [pc, #720]	; (15230 <SD_write_report+0x550>)
   14f60:	6c70      	ldr	r0, [r6, #68]	; 0x44
   14f62:	49b4      	ldr	r1, [pc, #720]	; (15234 <SD_write_report+0x554>)
   14f64:	4798      	blx	r3
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
   14f66:	47d0      	blx	sl
   14f68:	0022      	movs	r2, r4
   14f6a:	9000      	str	r0, [sp, #0]
   14f6c:	9101      	str	r1, [sp, #4]
   14f6e:	002b      	movs	r3, r5
   14f70:	49b2      	ldr	r1, [pc, #712]	; (1523c <SD_write_report+0x55c>)
   14f72:	4ca5      	ldr	r4, [pc, #660]	; (15208 <SD_write_report+0x528>)
   14f74:	4658      	mov	r0, fp
   14f76:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14f78:	4ba4      	ldr	r3, [pc, #656]	; (1520c <SD_write_report+0x52c>)
   14f7a:	4658      	mov	r0, fp
   14f7c:	4798      	blx	r3
   14f7e:	ab15      	add	r3, sp, #84	; 0x54
   14f80:	0002      	movs	r2, r0
   14f82:	4659      	mov	r1, fp
   14f84:	4ca2      	ldr	r4, [pc, #648]	; (15210 <SD_write_report+0x530>)
   14f86:	a859      	add	r0, sp, #356	; 0x164
   14f88:	47a0      	blx	r4
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100,cal_report.disp_stdev_comp[2]*100);
   14f8a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
   14f8c:	4ba8      	ldr	r3, [pc, #672]	; (15230 <SD_write_report+0x550>)
   14f8e:	49a9      	ldr	r1, [pc, #676]	; (15234 <SD_write_report+0x554>)
   14f90:	4798      	blx	r3
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
   14f92:	47d0      	blx	sl
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100,cal_report.disp_stdev_comp[2]*100);
   14f94:	4ba6      	ldr	r3, [pc, #664]	; (15230 <SD_write_report+0x550>)
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
   14f96:	0004      	movs	r4, r0
   14f98:	000d      	movs	r5, r1
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100,cal_report.disp_stdev_comp[2]*100);
   14f9a:	6d70      	ldr	r0, [r6, #84]	; 0x54
   14f9c:	49a5      	ldr	r1, [pc, #660]	; (15234 <SD_write_report+0x554>)
   14f9e:	4798      	blx	r3
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
   14fa0:	47d0      	blx	sl
   14fa2:	9002      	str	r0, [sp, #8]
   14fa4:	9103      	str	r1, [sp, #12]
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100,cal_report.disp_stdev_comp[2]*100);
   14fa6:	4ba2      	ldr	r3, [pc, #648]	; (15230 <SD_write_report+0x550>)
   14fa8:	6d30      	ldr	r0, [r6, #80]	; 0x50
   14faa:	49a2      	ldr	r1, [pc, #648]	; (15234 <SD_write_report+0x554>)
   14fac:	4798      	blx	r3
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
   14fae:	47d0      	blx	sl
   14fb0:	0022      	movs	r2, r4
   14fb2:	9000      	str	r0, [sp, #0]
   14fb4:	9101      	str	r1, [sp, #4]
   14fb6:	002b      	movs	r3, r5
   14fb8:	49a1      	ldr	r1, [pc, #644]	; (15240 <SD_write_report+0x560>)
   14fba:	4c93      	ldr	r4, [pc, #588]	; (15208 <SD_write_report+0x528>)
   14fbc:	4658      	mov	r0, fp
   14fbe:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   14fc0:	4b92      	ldr	r3, [pc, #584]	; (1520c <SD_write_report+0x52c>)
   14fc2:	4658      	mov	r0, fp
   14fc4:	4798      	blx	r3
   14fc6:	ab15      	add	r3, sp, #84	; 0x54
   14fc8:	0002      	movs	r2, r0
   14fca:	4c91      	ldr	r4, [pc, #580]	; (15210 <SD_write_report+0x530>)
   14fcc:	4659      	mov	r1, fp
   14fce:	a859      	add	r0, sp, #356	; 0x164
   14fd0:	47a0      	blx	r4
   14fd2:	2300      	movs	r3, #0
   14fd4:	0034      	movs	r4, r6
			strcpy(write_str2,"Inclination");
   14fd6:	001d      	movs	r5, r3
   14fd8:	46b8      	mov	r8, r7
		if(cal_report.groupRemoved[i]==0){	break;	}
   14fda:	7d27      	ldrb	r7, [r4, #20]
   14fdc:	2f00      	cmp	r7, #0
   14fde:	d021      	beq.n	15024 <SD_write_report+0x344>
		if(cal_report.groupRemovedSource[i]==1){
   14fe0:	7de3      	ldrb	r3, [r4, #23]
   14fe2:	2b01      	cmp	r3, #1
   14fe4:	d100      	bne.n	14fe8 <SD_write_report+0x308>
   14fe6:	e22a      	b.n	1543e <SD_write_report+0x75e>
			strcpy(write_str2,"Azimuth");
   14fe8:	2208      	movs	r2, #8
   14fea:	4996      	ldr	r1, [pc, #600]	; (15244 <SD_write_report+0x564>)
   14fec:	4b96      	ldr	r3, [pc, #600]	; (15248 <SD_write_report+0x568>)
   14fee:	4648      	mov	r0, r9
   14ff0:	4798      	blx	r3
		sprintf(write_str1,"Removed Group %d for %f deg improvement in %s\r\n",
   14ff2:	464b      	mov	r3, r9
   14ff4:	9302      	str	r3, [sp, #8]
				cal_report.groupRemoved[i], cal_report.groupRemovedImprovement[i], write_str2);
   14ff6:	1973      	adds	r3, r6, r5
		sprintf(write_str1,"Removed Group %d for %f deg improvement in %s\r\n",
   14ff8:	69d8      	ldr	r0, [r3, #28]
   14ffa:	47d0      	blx	sl
   14ffc:	003a      	movs	r2, r7
   14ffe:	9000      	str	r0, [sp, #0]
   15000:	9101      	str	r1, [sp, #4]
   15002:	4b81      	ldr	r3, [pc, #516]	; (15208 <SD_write_report+0x528>)
   15004:	4991      	ldr	r1, [pc, #580]	; (1524c <SD_write_report+0x56c>)
   15006:	4658      	mov	r0, fp
   15008:	4798      	blx	r3
		fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   1500a:	4b80      	ldr	r3, [pc, #512]	; (1520c <SD_write_report+0x52c>)
   1500c:	4658      	mov	r0, fp
   1500e:	4798      	blx	r3
   15010:	3504      	adds	r5, #4
   15012:	0002      	movs	r2, r0
   15014:	ab15      	add	r3, sp, #84	; 0x54
   15016:	4659      	mov	r1, fp
   15018:	a859      	add	r0, sp, #356	; 0x164
   1501a:	4f7d      	ldr	r7, [pc, #500]	; (15210 <SD_write_report+0x530>)
   1501c:	47b8      	blx	r7
   1501e:	3401      	adds	r4, #1
	for(i=0;i<MAX_BAD_GROUPS;i++){
   15020:	2d0c      	cmp	r5, #12
   15022:	d1da      	bne.n	14fda <SD_write_report+0x2fa>
	strcpy(write_str1,"\r\n\r\n");
   15024:	2205      	movs	r2, #5
   15026:	498a      	ldr	r1, [pc, #552]	; (15250 <SD_write_report+0x570>)
   15028:	4b87      	ldr	r3, [pc, #540]	; (15248 <SD_write_report+0x568>)
   1502a:	4658      	mov	r0, fp
   1502c:	4798      	blx	r3
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   1502e:	ab15      	add	r3, sp, #84	; 0x54
   15030:	2204      	movs	r2, #4
   15032:	4659      	mov	r1, fp
   15034:	a859      	add	r0, sp, #356	; 0x164
   15036:	4c76      	ldr	r4, [pc, #472]	; (15210 <SD_write_report+0x530>)
   15038:	4647      	mov	r7, r8
   1503a:	47a0      	blx	r4
	for (i=0;i<4;i++){
   1503c:	2300      	movs	r3, #0
   1503e:	46b8      	mov	r8, r7
   15040:	001d      	movs	r5, r3
		switch(i){
   15042:	2d02      	cmp	r5, #2
   15044:	d100      	bne.n	15048 <SD_write_report+0x368>
   15046:	e1f3      	b.n	15430 <SD_write_report+0x750>
   15048:	2d03      	cmp	r5, #3
   1504a:	d100      	bne.n	1504e <SD_write_report+0x36e>
   1504c:	e1e9      	b.n	15422 <SD_write_report+0x742>
			sprintf(write_str1,"Inclinometer 2 Calibration:\r\n");
   1504e:	221e      	movs	r2, #30
		switch(i){
   15050:	2d01      	cmp	r5, #1
   15052:	d100      	bne.n	15056 <SD_write_report+0x376>
   15054:	e1df      	b.n	15416 <SD_write_report+0x736>
			sprintf(write_str1,"Inclinometer 1 Calibration:\r\n");
   15056:	497f      	ldr	r1, [pc, #508]	; (15254 <SD_write_report+0x574>)
   15058:	4658      	mov	r0, fp
   1505a:	4b7b      	ldr	r3, [pc, #492]	; (15248 <SD_write_report+0x568>)
   1505c:	4798      	blx	r3
			pcal_struct = &a1_calst;
   1505e:	4c7e      	ldr	r4, [pc, #504]	; (15258 <SD_write_report+0x578>)
		sprintf(write_str2,"  Gain X: %.6f\r\n  Gain Y: %.6f\r\n  GainZ: %.6f\r\n", pcal_struct->gain[0], pcal_struct->gain[1], pcal_struct->gain[2]);
   15060:	6920      	ldr	r0, [r4, #16]
   15062:	47d0      	blx	sl
   15064:	0006      	movs	r6, r0
   15066:	69a0      	ldr	r0, [r4, #24]
   15068:	000f      	movs	r7, r1
   1506a:	47d0      	blx	sl
   1506c:	9002      	str	r0, [sp, #8]
   1506e:	9103      	str	r1, [sp, #12]
   15070:	6960      	ldr	r0, [r4, #20]
   15072:	47d0      	blx	sl
   15074:	0032      	movs	r2, r6
   15076:	9000      	str	r0, [sp, #0]
   15078:	9101      	str	r1, [sp, #4]
   1507a:	003b      	movs	r3, r7
   1507c:	4977      	ldr	r1, [pc, #476]	; (1525c <SD_write_report+0x57c>)
   1507e:	4e62      	ldr	r6, [pc, #392]	; (15208 <SD_write_report+0x528>)
   15080:	4648      	mov	r0, r9
   15082:	47b0      	blx	r6
		strcat(write_str1, write_str2);
   15084:	4b76      	ldr	r3, [pc, #472]	; (15260 <SD_write_report+0x580>)
   15086:	4649      	mov	r1, r9
   15088:	4658      	mov	r0, fp
   1508a:	4798      	blx	r3
		sprintf(write_str2,"  Offset X: %.6f\r\n  Offset Y: %.6f\r\n  Offset Z: %.6f\r\n", pcal_struct->offset[0], pcal_struct->offset[1], pcal_struct->offset[2]);
   1508c:	6860      	ldr	r0, [r4, #4]
   1508e:	47d0      	blx	sl
   15090:	0006      	movs	r6, r0
   15092:	68e0      	ldr	r0, [r4, #12]
   15094:	000f      	movs	r7, r1
   15096:	47d0      	blx	sl
   15098:	9002      	str	r0, [sp, #8]
   1509a:	9103      	str	r1, [sp, #12]
   1509c:	68a0      	ldr	r0, [r4, #8]
   1509e:	47d0      	blx	sl
   150a0:	0032      	movs	r2, r6
   150a2:	9000      	str	r0, [sp, #0]
   150a4:	9101      	str	r1, [sp, #4]
   150a6:	003b      	movs	r3, r7
   150a8:	496e      	ldr	r1, [pc, #440]	; (15264 <SD_write_report+0x584>)
   150aa:	4e57      	ldr	r6, [pc, #348]	; (15208 <SD_write_report+0x528>)
   150ac:	4648      	mov	r0, r9
   150ae:	47b0      	blx	r6
		strcat(write_str1, write_str2);
   150b0:	4649      	mov	r1, r9
   150b2:	4b6b      	ldr	r3, [pc, #428]	; (15260 <SD_write_report+0x580>)
   150b4:	4658      	mov	r0, fp
   150b6:	4798      	blx	r3
		RAD2DEG*pcal_struct->axmYX, RAD2DEG*pcal_struct->axmZX, RAD2DEG*pcal_struct->axmZY);
   150b8:	69e0      	ldr	r0, [r4, #28]
   150ba:	4b5d      	ldr	r3, [pc, #372]	; (15230 <SD_write_report+0x550>)
   150bc:	496a      	ldr	r1, [pc, #424]	; (15268 <SD_write_report+0x588>)
   150be:	4798      	blx	r3
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n",
   150c0:	47d0      	blx	sl
		RAD2DEG*pcal_struct->axmYX, RAD2DEG*pcal_struct->axmZX, RAD2DEG*pcal_struct->axmZY);
   150c2:	4b5b      	ldr	r3, [pc, #364]	; (15230 <SD_write_report+0x550>)
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n",
   150c4:	0006      	movs	r6, r0
   150c6:	000f      	movs	r7, r1
		RAD2DEG*pcal_struct->axmYX, RAD2DEG*pcal_struct->axmZX, RAD2DEG*pcal_struct->axmZY);
   150c8:	6a20      	ldr	r0, [r4, #32]
   150ca:	4967      	ldr	r1, [pc, #412]	; (15268 <SD_write_report+0x588>)
   150cc:	4798      	blx	r3
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n",
   150ce:	47d0      	blx	sl
   150d0:	9002      	str	r0, [sp, #8]
   150d2:	9103      	str	r1, [sp, #12]
		RAD2DEG*pcal_struct->axmYX, RAD2DEG*pcal_struct->axmZX, RAD2DEG*pcal_struct->axmZY);
   150d4:	4b56      	ldr	r3, [pc, #344]	; (15230 <SD_write_report+0x550>)
   150d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   150d8:	4963      	ldr	r1, [pc, #396]	; (15268 <SD_write_report+0x588>)
   150da:	4798      	blx	r3
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n",
   150dc:	47d0      	blx	sl
   150de:	0032      	movs	r2, r6
   150e0:	9000      	str	r0, [sp, #0]
   150e2:	9101      	str	r1, [sp, #4]
   150e4:	003b      	movs	r3, r7
   150e6:	4961      	ldr	r1, [pc, #388]	; (1526c <SD_write_report+0x58c>)
   150e8:	4e47      	ldr	r6, [pc, #284]	; (15208 <SD_write_report+0x528>)
   150ea:	4648      	mov	r0, r9
   150ec:	47b0      	blx	r6
		strcat(write_str1, write_str2);
   150ee:	4b5c      	ldr	r3, [pc, #368]	; (15260 <SD_write_report+0x580>)
   150f0:	4649      	mov	r1, r9
   150f2:	4658      	mov	r0, fp
   150f4:	4798      	blx	r3
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n",
   150f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   150f8:	47d0      	blx	sl
   150fa:	0006      	movs	r6, r0
   150fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   150fe:	000f      	movs	r7, r1
   15100:	47d0      	blx	sl
   15102:	9002      	str	r0, [sp, #8]
   15104:	9103      	str	r1, [sp, #12]
   15106:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   15108:	47d0      	blx	sl
   1510a:	0032      	movs	r2, r6
   1510c:	9000      	str	r0, [sp, #0]
   1510e:	9101      	str	r1, [sp, #4]
   15110:	003b      	movs	r3, r7
   15112:	4957      	ldr	r1, [pc, #348]	; (15270 <SD_write_report+0x590>)
   15114:	4c3c      	ldr	r4, [pc, #240]	; (15208 <SD_write_report+0x528>)
   15116:	4648      	mov	r0, r9
   15118:	47a0      	blx	r4
   1511a:	4b3c      	ldr	r3, [pc, #240]	; (1520c <SD_write_report+0x52c>)
   1511c:	4658      	mov	r0, fp
   1511e:	4798      	blx	r3
		strcat(write_str1, write_str2);
   15120:	4649      	mov	r1, r9
   15122:	4b54      	ldr	r3, [pc, #336]	; (15274 <SD_write_report+0x594>)
   15124:	4458      	add	r0, fp
   15126:	4798      	blx	r3
   15128:	465b      	mov	r3, fp
		fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   1512a:	4659      	mov	r1, fp
		strcat(write_str1, write_str2);
   1512c:	1ac2      	subs	r2, r0, r3
		fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   1512e:	4c38      	ldr	r4, [pc, #224]	; (15210 <SD_write_report+0x530>)
   15130:	ab15      	add	r3, sp, #84	; 0x54
   15132:	a859      	add	r0, sp, #356	; 0x164
	for (i=0;i<4;i++){
   15134:	3501      	adds	r5, #1
		fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   15136:	47a0      	blx	r4
	for (i=0;i<4;i++){
   15138:	2d04      	cmp	r5, #4
   1513a:	d182      	bne.n	15042 <SD_write_report+0x362>
	sprintf(write_str1,"\r\nCalibration Measurements:\r\n");
   1513c:	221e      	movs	r2, #30
   1513e:	494e      	ldr	r1, [pc, #312]	; (15278 <SD_write_report+0x598>)
   15140:	4b41      	ldr	r3, [pc, #260]	; (15248 <SD_write_report+0x568>)
   15142:	4658      	mov	r0, fp
   15144:	4798      	blx	r3
	sprintf(write_str2,"                Uncalibrated                     Calibrated\r\n");
   15146:	223e      	movs	r2, #62	; 0x3e
   15148:	494c      	ldr	r1, [pc, #304]	; (1527c <SD_write_report+0x59c>)
   1514a:	4648      	mov	r0, r9
   1514c:	4b3e      	ldr	r3, [pc, #248]	; (15248 <SD_write_report+0x568>)
   1514e:	4798      	blx	r3
	strcat(write_str1, write_str2);
   15150:	4658      	mov	r0, fp
   15152:	4649      	mov	r1, r9
   15154:	223e      	movs	r2, #62	; 0x3e
   15156:	4b3c      	ldr	r3, [pc, #240]	; (15248 <SD_write_report+0x568>)
   15158:	301d      	adds	r0, #29
   1515a:	4798      	blx	r3
	sprintf(write_str2,"Group, Point,   Azimuth,  Inclination, Roll,     Azimuth,  Inclination, Roll\r\n");
   1515c:	224f      	movs	r2, #79	; 0x4f
   1515e:	4948      	ldr	r1, [pc, #288]	; (15280 <SD_write_report+0x5a0>)
   15160:	4648      	mov	r0, r9
   15162:	4b39      	ldr	r3, [pc, #228]	; (15248 <SD_write_report+0x568>)
   15164:	4798      	blx	r3
	strcat(write_str1, write_str2);
   15166:	4658      	mov	r0, fp
   15168:	4649      	mov	r1, r9
   1516a:	224f      	movs	r2, #79	; 0x4f
   1516c:	4b36      	ldr	r3, [pc, #216]	; (15248 <SD_write_report+0x568>)
   1516e:	305a      	adds	r0, #90	; 0x5a
   15170:	4798      	blx	r3
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   15172:	ab15      	add	r3, sp, #84	; 0x54
   15174:	22a8      	movs	r2, #168	; 0xa8
   15176:	4659      	mov	r1, fp
   15178:	a859      	add	r0, sp, #356	; 0x164
   1517a:	4c25      	ldr	r4, [pc, #148]	; (15210 <SD_write_report+0x530>)
   1517c:	47a0      	blx	r4
	for (i=0;i<nPoints;i++){
   1517e:	4b41      	ldr	r3, [pc, #260]	; (15284 <SD_write_report+0x5a4>)
   15180:	4647      	mov	r7, r8
   15182:	4699      	mov	r9, r3
   15184:	681b      	ldr	r3, [r3, #0]
   15186:	2b00      	cmp	r3, #0
   15188:	d100      	bne.n	1518c <SD_write_report+0x4ac>
   1518a:	e140      	b.n	1540e <SD_write_report+0x72e>
   1518c:	4b3e      	ldr	r3, [pc, #248]	; (15288 <SD_write_report+0x5a8>)
   1518e:	2600      	movs	r6, #0
   15190:	4698      	mov	r8, r3
   15192:	2300      	movs	r3, #0
			temp_meas.m1Cal[j] = m1Raw[i][j];
   15194:	4642      	mov	r2, r8
   15196:	9713      	str	r7, [sp, #76]	; 0x4c
   15198:	4698      	mov	r8, r3
   1519a:	0037      	movs	r7, r6
   1519c:	4d3b      	ldr	r5, [pc, #236]	; (1528c <SD_write_report+0x5ac>)
   1519e:	4c3c      	ldr	r4, [pc, #240]	; (15290 <SD_write_report+0x5b0>)
   151a0:	950d      	str	r5, [sp, #52]	; 0x34
   151a2:	940c      	str	r4, [sp, #48]	; 0x30
   151a4:	920e      	str	r2, [sp, #56]	; 0x38
			temp_meas.a2Cal[j] = a2Raw[i][j];
   151a6:	219c      	movs	r1, #156	; 0x9c
   151a8:	2284      	movs	r2, #132	; 0x84
			temp_meas.a1Cal[j] = a1Raw[i][j];
   151aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
			temp_meas.a2Cal[j] = a2Raw[i][j];
   151ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
			temp_meas.a1Cal[j] = a1Raw[i][j];
   151ae:	6833      	ldr	r3, [r6, #0]
			temp_meas.m1Cal[j] = m1Raw[i][j];
   151b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
			temp_meas.a1Cal[j] = a1Raw[i][j];
   151b2:	934d      	str	r3, [sp, #308]	; 0x134
			temp_meas.a2Cal[j] = a2Raw[i][j];
   151b4:	ab08      	add	r3, sp, #32
   151b6:	185b      	adds	r3, r3, r1
   151b8:	6829      	ldr	r1, [r5, #0]
			temp_meas.m2Cal[j] = m2Raw[i][j];
   151ba:	209c      	movs	r0, #156	; 0x9c
			temp_meas.a2Cal[j] = a2Raw[i][j];
   151bc:	5099      	str	r1, [r3, r2]
			temp_meas.m1Cal[j] = m1Raw[i][j];
   151be:	219c      	movs	r1, #156	; 0x9c
   151c0:	ab08      	add	r3, sp, #32
   151c2:	185b      	adds	r3, r3, r1
   151c4:	6821      	ldr	r1, [r4, #0]
   151c6:	320c      	adds	r2, #12
   151c8:	5099      	str	r1, [r3, r2]
			temp_meas.m2Cal[j] = m2Raw[i][j];
   151ca:	219c      	movs	r1, #156	; 0x9c
   151cc:	4b31      	ldr	r3, [pc, #196]	; (15294 <SD_write_report+0x5b4>)
   151ce:	aa08      	add	r2, sp, #32
   151d0:	19db      	adds	r3, r3, r7
   151d2:	1812      	adds	r2, r2, r0
   151d4:	6818      	ldr	r0, [r3, #0]
   151d6:	5050      	str	r0, [r2, r1]
			temp_meas.a2Cal[j] = a2Raw[i][j];
   151d8:	209c      	movs	r0, #156	; 0x9c
   151da:	2188      	movs	r1, #136	; 0x88
			temp_meas.a1Cal[j] = a1Raw[i][j];
   151dc:	6872      	ldr	r2, [r6, #4]
   151de:	924e      	str	r2, [sp, #312]	; 0x138
			temp_meas.a2Cal[j] = a2Raw[i][j];
   151e0:	aa08      	add	r2, sp, #32
   151e2:	1812      	adds	r2, r2, r0
   151e4:	6868      	ldr	r0, [r5, #4]
   151e6:	5050      	str	r0, [r2, r1]
			temp_meas.m1Cal[j] = m1Raw[i][j];
   151e8:	209c      	movs	r0, #156	; 0x9c
   151ea:	aa08      	add	r2, sp, #32
   151ec:	1812      	adds	r2, r2, r0
   151ee:	6860      	ldr	r0, [r4, #4]
   151f0:	310c      	adds	r1, #12
   151f2:	5050      	str	r0, [r2, r1]
			temp_meas.m2Cal[j] = m2Raw[i][j];
   151f4:	209c      	movs	r0, #156	; 0x9c
   151f6:	aa08      	add	r2, sp, #32
   151f8:	1812      	adds	r2, r2, r0
   151fa:	6858      	ldr	r0, [r3, #4]
   151fc:	310c      	adds	r1, #12
   151fe:	5050      	str	r0, [r2, r1]
			temp_meas.a1Cal[j] = a1Raw[i][j];
   15200:	209c      	movs	r0, #156	; 0x9c
   15202:	e049      	b.n	15298 <SD_write_report+0x5b8>
   15204:	0002e2a8 	.word	0x0002e2a8
   15208:	00028ab1 	.word	0x00028ab1
   1520c:	00028c1d 	.word	0x00028c1d
   15210:	0000d5d5 	.word	0x0000d5d5
   15214:	20004870 	.word	0x20004870
   15218:	0002878d 	.word	0x0002878d
   1521c:	0002e2ec 	.word	0x0002e2ec
   15220:	00014661 	.word	0x00014661
   15224:	0002e310 	.word	0x0002e310
   15228:	0002e344 	.word	0x0002e344
   1522c:	0002e370 	.word	0x0002e370
   15230:	00026559 	.word	0x00026559
   15234:	42c80000 	.word	0x42c80000
   15238:	0002e3cc 	.word	0x0002e3cc
   1523c:	0002e45c 	.word	0x0002e45c
   15240:	0002e4a0 	.word	0x0002e4a0
   15244:	0002dbec 	.word	0x0002dbec
   15248:	00028999 	.word	0x00028999
   1524c:	0002e4dc 	.word	0x0002e4dc
   15250:	0002e368 	.word	0x0002e368
   15254:	0002e50c 	.word	0x0002e50c
   15258:	200052e8 	.word	0x200052e8
   1525c:	0002e584 	.word	0x0002e584
   15260:	00028b39 	.word	0x00028b39
   15264:	0002e5b4 	.word	0x0002e5b4
   15268:	42652ee0 	.word	0x42652ee0
   1526c:	0002e5ec 	.word	0x0002e5ec
   15270:	0002e65c 	.word	0x0002e65c
   15274:	00028af5 	.word	0x00028af5
   15278:	0002e6e0 	.word	0x0002e6e0
   1527c:	0002e700 	.word	0x0002e700
   15280:	0002e740 	.word	0x0002e740
   15284:	20002d38 	.word	0x20002d38
   15288:	20003d28 	.word	0x20003d28
   1528c:	20002178 	.word	0x20002178
   15290:	20002e80 	.word	0x20002e80
   15294:	20001b30 	.word	0x20001b30
   15298:	aa08      	add	r2, sp, #32
   1529a:	1812      	adds	r2, r2, r0
   1529c:	68b0      	ldr	r0, [r6, #8]
   1529e:	3920      	subs	r1, #32
   152a0:	5050      	str	r0, [r2, r1]
			temp_meas.a2Cal[j] = a2Raw[i][j];
   152a2:	209c      	movs	r0, #156	; 0x9c
   152a4:	aa08      	add	r2, sp, #32
   152a6:	1812      	adds	r2, r2, r0
   152a8:	68a8      	ldr	r0, [r5, #8]
   152aa:	310c      	adds	r1, #12
   152ac:	5050      	str	r0, [r2, r1]
			temp_meas.m1Cal[j] = m1Raw[i][j];
   152ae:	209c      	movs	r0, #156	; 0x9c
   152b0:	aa08      	add	r2, sp, #32
   152b2:	1812      	adds	r2, r2, r0
   152b4:	68a0      	ldr	r0, [r4, #8]
   152b6:	310c      	adds	r1, #12
   152b8:	5050      	str	r0, [r2, r1]
			temp_meas.m2Cal[j] = m2Raw[i][j];
   152ba:	22a4      	movs	r2, #164	; 0xa4
   152bc:	689b      	ldr	r3, [r3, #8]
   152be:	3104      	adds	r1, #4
   152c0:	930f      	str	r3, [sp, #60]	; 0x3c
   152c2:	ab08      	add	r3, sp, #32
   152c4:	185b      	adds	r3, r3, r1
   152c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
		calc_orientation(&temp_meas);
   152c8:	a82f      	add	r0, sp, #188	; 0xbc
			temp_meas.m2Cal[j] = m2Raw[i][j];
   152ca:	5099      	str	r1, [r3, r2]
		calc_orientation(&temp_meas);
   152cc:	4b5d      	ldr	r3, [pc, #372]	; (15444 <SD_write_report+0x764>)
   152ce:	4798      	blx	r3
			temp_meas.a2Cal[j] = a2Cal[i][j];
   152d0:	249c      	movs	r4, #156	; 0x9c
		inc_raw = temp_meas.inclination;
   152d2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
		azm_raw = temp_meas.azimuth;
   152d4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
		inc_raw = temp_meas.inclination;
   152d6:	9210      	str	r2, [sp, #64]	; 0x40
			temp_meas.a2Cal[j] = a2Cal[i][j];
   152d8:	2284      	movs	r2, #132	; 0x84
		azm_raw = temp_meas.azimuth;
   152da:	930f      	str	r3, [sp, #60]	; 0x3c
			temp_meas.a1Cal[j] = a1Cal[i][j];
   152dc:	4b5a      	ldr	r3, [pc, #360]	; (15448 <SD_write_report+0x768>)
		roll_raw = temp_meas.roll;
   152de:	9937      	ldr	r1, [sp, #220]	; 0xdc
			temp_meas.a1Cal[j] = a1Cal[i][j];
   152e0:	19d8      	adds	r0, r3, r7
   152e2:	6803      	ldr	r3, [r0, #0]
		roll_raw = temp_meas.roll;
   152e4:	9111      	str	r1, [sp, #68]	; 0x44
			temp_meas.a1Cal[j] = a1Cal[i][j];
   152e6:	934d      	str	r3, [sp, #308]	; 0x134
			temp_meas.a2Cal[j] = a2Cal[i][j];
   152e8:	4b58      	ldr	r3, [pc, #352]	; (1544c <SD_write_report+0x76c>)
			temp_meas.m1Cal[j] = m1Cal[i][j];
   152ea:	259c      	movs	r5, #156	; 0x9c
			temp_meas.a2Cal[j] = a2Cal[i][j];
   152ec:	19d9      	adds	r1, r3, r7
   152ee:	ab08      	add	r3, sp, #32
   152f0:	191b      	adds	r3, r3, r4
   152f2:	680c      	ldr	r4, [r1, #0]
			temp_meas.m2Cal[j] = m2Cal[i][j];
   152f4:	269c      	movs	r6, #156	; 0x9c
			temp_meas.a2Cal[j] = a2Cal[i][j];
   152f6:	509c      	str	r4, [r3, r2]
			temp_meas.m1Cal[j] = m1Cal[i][j];
   152f8:	2390      	movs	r3, #144	; 0x90
   152fa:	4c55      	ldr	r4, [pc, #340]	; (15450 <SD_write_report+0x770>)
   152fc:	19e2      	adds	r2, r4, r7
   152fe:	ac08      	add	r4, sp, #32
   15300:	1964      	adds	r4, r4, r5
   15302:	6815      	ldr	r5, [r2, #0]
   15304:	50e5      	str	r5, [r4, r3]
			temp_meas.m2Cal[j] = m2Cal[i][j];
   15306:	259c      	movs	r5, #156	; 0x9c
   15308:	4c52      	ldr	r4, [pc, #328]	; (15454 <SD_write_report+0x774>)
   1530a:	19e3      	adds	r3, r4, r7
   1530c:	ac08      	add	r4, sp, #32
   1530e:	19a4      	adds	r4, r4, r6
   15310:	681e      	ldr	r6, [r3, #0]
   15312:	370c      	adds	r7, #12
   15314:	5166      	str	r6, [r4, r5]
			temp_meas.a2Cal[j] = a2Cal[i][j];
   15316:	269c      	movs	r6, #156	; 0x9c
			temp_meas.a1Cal[j] = a1Cal[i][j];
   15318:	6844      	ldr	r4, [r0, #4]
			temp_meas.a2Cal[j] = a2Cal[i][j];
   1531a:	3d14      	subs	r5, #20
			temp_meas.a1Cal[j] = a1Cal[i][j];
   1531c:	944e      	str	r4, [sp, #312]	; 0x138
			temp_meas.a2Cal[j] = a2Cal[i][j];
   1531e:	ac08      	add	r4, sp, #32
   15320:	19a4      	adds	r4, r4, r6
   15322:	684e      	ldr	r6, [r1, #4]
   15324:	5166      	str	r6, [r4, r5]
			temp_meas.m1Cal[j] = m1Cal[i][j];
   15326:	269c      	movs	r6, #156	; 0x9c
   15328:	ac08      	add	r4, sp, #32
   1532a:	19a4      	adds	r4, r4, r6
   1532c:	6856      	ldr	r6, [r2, #4]
   1532e:	350c      	adds	r5, #12
   15330:	5166      	str	r6, [r4, r5]
			temp_meas.m2Cal[j] = m2Cal[i][j];
   15332:	269c      	movs	r6, #156	; 0x9c
   15334:	ac08      	add	r4, sp, #32
   15336:	19a4      	adds	r4, r4, r6
   15338:	685e      	ldr	r6, [r3, #4]
   1533a:	350c      	adds	r5, #12
   1533c:	5166      	str	r6, [r4, r5]
			temp_meas.a1Cal[j] = a1Cal[i][j];
   1533e:	269c      	movs	r6, #156	; 0x9c
   15340:	6884      	ldr	r4, [r0, #8]
   15342:	3d20      	subs	r5, #32
   15344:	9412      	str	r4, [sp, #72]	; 0x48
   15346:	ac08      	add	r4, sp, #32
   15348:	19a4      	adds	r4, r4, r6
   1534a:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1534c:	5166      	str	r6, [r4, r5]
			temp_meas.a2Cal[j] = a2Cal[i][j];
   1534e:	269c      	movs	r6, #156	; 0x9c
   15350:	688c      	ldr	r4, [r1, #8]
   15352:	350c      	adds	r5, #12
   15354:	9412      	str	r4, [sp, #72]	; 0x48
   15356:	ac08      	add	r4, sp, #32
   15358:	19a4      	adds	r4, r4, r6
   1535a:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1535c:	5166      	str	r6, [r4, r5]
			temp_meas.m1Cal[j] = m1Cal[i][j];
   1535e:	269c      	movs	r6, #156	; 0x9c
   15360:	6894      	ldr	r4, [r2, #8]
   15362:	350c      	adds	r5, #12
   15364:	9412      	str	r4, [sp, #72]	; 0x48
   15366:	ac08      	add	r4, sp, #32
   15368:	19a4      	adds	r4, r4, r6
   1536a:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1536c:	5166      	str	r6, [r4, r5]
			temp_meas.m2Cal[j] = m2Cal[i][j];
   1536e:	269c      	movs	r6, #156	; 0x9c
   15370:	689c      	ldr	r4, [r3, #8]
   15372:	350c      	adds	r5, #12
   15374:	9412      	str	r4, [sp, #72]	; 0x48
   15376:	ac08      	add	r4, sp, #32
   15378:	19a4      	adds	r4, r4, r6
   1537a:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1537c:	5166      	str	r6, [r4, r5]
		calc_orientation(&temp_meas);
   1537e:	ac2f      	add	r4, sp, #188	; 0xbc
   15380:	0020      	movs	r0, r4
   15382:	4c30      	ldr	r4, [pc, #192]	; (15444 <SD_write_report+0x764>)
   15384:	47a0      	blx	r4
		group_current = floor(i/GROUP_SIZE)+1;
   15386:	4644      	mov	r4, r8
   15388:	08a0      	lsrs	r0, r4, #2
   1538a:	4c33      	ldr	r4, [pc, #204]	; (15458 <SD_write_report+0x778>)
   1538c:	47a0      	blx	r4
   1538e:	2200      	movs	r2, #0
   15390:	4b32      	ldr	r3, [pc, #200]	; (1545c <SD_write_report+0x77c>)
   15392:	4c33      	ldr	r4, [pc, #204]	; (15460 <SD_write_report+0x780>)
   15394:	47a0      	blx	r4
   15396:	4c33      	ldr	r4, [pc, #204]	; (15464 <SD_write_report+0x784>)
   15398:	47a0      	blx	r4
		sprintf(write_str1,"%02d,    %02d,      %06.2f,   %+06.2f,      %06.2f,   %06.2f,   %+06.2f,      %06.2f\r\n",
   1539a:	2401      	movs	r4, #1
   1539c:	46a4      	mov	ip, r4
		group_current = floor(i/GROUP_SIZE)+1;
   1539e:	0005      	movs	r5, r0
		sprintf(write_str1,"%02d,    %02d,      %06.2f,   %+06.2f,      %06.2f,   %06.2f,   %+06.2f,      %06.2f\r\n",
   153a0:	9837      	ldr	r0, [sp, #220]	; 0xdc
   153a2:	44e0      	add	r8, ip
   153a4:	47d0      	blx	sl
   153a6:	900a      	str	r0, [sp, #40]	; 0x28
   153a8:	910b      	str	r1, [sp, #44]	; 0x2c
   153aa:	9835      	ldr	r0, [sp, #212]	; 0xd4
   153ac:	47d0      	blx	sl
   153ae:	9008      	str	r0, [sp, #32]
   153b0:	9109      	str	r1, [sp, #36]	; 0x24
   153b2:	9834      	ldr	r0, [sp, #208]	; 0xd0
   153b4:	47d0      	blx	sl
   153b6:	9006      	str	r0, [sp, #24]
   153b8:	9107      	str	r1, [sp, #28]
   153ba:	9811      	ldr	r0, [sp, #68]	; 0x44
   153bc:	47d0      	blx	sl
   153be:	9004      	str	r0, [sp, #16]
   153c0:	9105      	str	r1, [sp, #20]
   153c2:	9810      	ldr	r0, [sp, #64]	; 0x40
   153c4:	47d0      	blx	sl
   153c6:	9002      	str	r0, [sp, #8]
   153c8:	9103      	str	r1, [sp, #12]
   153ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
   153cc:	47d0      	blx	sl
   153ce:	002a      	movs	r2, r5
   153d0:	9000      	str	r0, [sp, #0]
   153d2:	9101      	str	r1, [sp, #4]
   153d4:	4643      	mov	r3, r8
   153d6:	4924      	ldr	r1, [pc, #144]	; (15468 <SD_write_report+0x788>)
   153d8:	4c24      	ldr	r4, [pc, #144]	; (1546c <SD_write_report+0x78c>)
   153da:	4658      	mov	r0, fp
   153dc:	47a0      	blx	r4
		fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
   153de:	4b24      	ldr	r3, [pc, #144]	; (15470 <SD_write_report+0x790>)
   153e0:	4658      	mov	r0, fp
   153e2:	4798      	blx	r3
   153e4:	ab15      	add	r3, sp, #84	; 0x54
   153e6:	0002      	movs	r2, r0
   153e8:	4659      	mov	r1, fp
   153ea:	a859      	add	r0, sp, #356	; 0x164
   153ec:	4c21      	ldr	r4, [pc, #132]	; (15474 <SD_write_report+0x794>)
   153ee:	47a0      	blx	r4
   153f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   153f2:	990e      	ldr	r1, [sp, #56]	; 0x38
   153f4:	330c      	adds	r3, #12
   153f6:	930c      	str	r3, [sp, #48]	; 0x30
	for (i=0;i<nPoints;i++){
   153f8:	464b      	mov	r3, r9
   153fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   153fc:	681b      	ldr	r3, [r3, #0]
   153fe:	310c      	adds	r1, #12
   15400:	320c      	adds	r2, #12
   15402:	910e      	str	r1, [sp, #56]	; 0x38
   15404:	920d      	str	r2, [sp, #52]	; 0x34
   15406:	4543      	cmp	r3, r8
   15408:	d900      	bls.n	1540c <SD_write_report+0x72c>
   1540a:	e6cc      	b.n	151a6 <SD_write_report+0x4c6>
   1540c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	f_close(&file1);
   1540e:	a859      	add	r0, sp, #356	; 0x164
   15410:	4b19      	ldr	r3, [pc, #100]	; (15478 <SD_write_report+0x798>)
   15412:	4798      	blx	r3
	return fdebug1;
   15414:	e471      	b.n	14cfa <SD_write_report+0x1a>
			sprintf(write_str1,"Inclinometer 2 Calibration:\r\n");
   15416:	4919      	ldr	r1, [pc, #100]	; (1547c <SD_write_report+0x79c>)
   15418:	4658      	mov	r0, fp
   1541a:	4b19      	ldr	r3, [pc, #100]	; (15480 <SD_write_report+0x7a0>)
   1541c:	4798      	blx	r3
			pcal_struct = &a2_calst;
   1541e:	4c19      	ldr	r4, [pc, #100]	; (15484 <SD_write_report+0x7a4>)
			break;
   15420:	e61e      	b.n	15060 <SD_write_report+0x380>
			sprintf(write_str1,"Compass 2 Calibration:\r\n");
   15422:	2219      	movs	r2, #25
   15424:	4918      	ldr	r1, [pc, #96]	; (15488 <SD_write_report+0x7a8>)
   15426:	4658      	mov	r0, fp
   15428:	4b15      	ldr	r3, [pc, #84]	; (15480 <SD_write_report+0x7a0>)
   1542a:	4798      	blx	r3
			pcal_struct = &m2_calst;
   1542c:	4c17      	ldr	r4, [pc, #92]	; (1548c <SD_write_report+0x7ac>)
			break;
   1542e:	e617      	b.n	15060 <SD_write_report+0x380>
			sprintf(write_str1,"Compass 1 Calibration:\r\n");
   15430:	2219      	movs	r2, #25
   15432:	4917      	ldr	r1, [pc, #92]	; (15490 <SD_write_report+0x7b0>)
   15434:	4658      	mov	r0, fp
   15436:	4b12      	ldr	r3, [pc, #72]	; (15480 <SD_write_report+0x7a0>)
   15438:	4798      	blx	r3
			pcal_struct = &m1_calst;
   1543a:	4c16      	ldr	r4, [pc, #88]	; (15494 <SD_write_report+0x7b4>)
			break;
   1543c:	e610      	b.n	15060 <SD_write_report+0x380>
			strcpy(write_str2,"Inclination");
   1543e:	220c      	movs	r2, #12
   15440:	4915      	ldr	r1, [pc, #84]	; (15498 <SD_write_report+0x7b8>)
   15442:	e5d3      	b.n	14fec <SD_write_report+0x30c>
   15444:	00012585 	.word	0x00012585
   15448:	200043c0 	.word	0x200043c0
   1544c:	2000339c 	.word	0x2000339c
   15450:	200048ec 	.word	0x200048ec
   15454:	20002634 	.word	0x20002634
   15458:	0002871d 	.word	0x0002871d
   1545c:	3ff00000 	.word	0x3ff00000
   15460:	00026c3d 	.word	0x00026c3d
   15464:	00025e19 	.word	0x00025e19
   15468:	0002e790 	.word	0x0002e790
   1546c:	00028ab1 	.word	0x00028ab1
   15470:	00028c1d 	.word	0x00028c1d
   15474:	0000d5d5 	.word	0x0000d5d5
   15478:	0000d8d5 	.word	0x0000d8d5
   1547c:	0002e52c 	.word	0x0002e52c
   15480:	00028999 	.word	0x00028999
   15484:	20005224 	.word	0x20005224
   15488:	0002e568 	.word	0x0002e568
   1548c:	20003cc8 	.word	0x20003cc8
   15490:	0002e54c 	.word	0x0002e54c
   15494:	200051c8 	.word	0x200051c8
   15498:	0002e4d0 	.word	0x0002e4d0

0001549c <SD_save_raw_data>:
FRESULT SD_save_raw_data(enum CALTYPE calType ){
   1549c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1549e:	4645      	mov	r5, r8
   154a0:	46de      	mov	lr, fp
   154a2:	4657      	mov	r7, sl
   154a4:	464e      	mov	r6, r9
   154a6:	b5e0      	push	{r5, r6, r7, lr}
	if (SD_WriteLockout){
   154a8:	4b52      	ldr	r3, [pc, #328]	; (155f4 <SD_save_raw_data+0x158>)
FRESULT SD_save_raw_data(enum CALTYPE calType ){
   154aa:	4c53      	ldr	r4, [pc, #332]	; (155f8 <SD_save_raw_data+0x15c>)
	if (SD_WriteLockout){
   154ac:	781b      	ldrb	r3, [r3, #0]
FRESULT SD_save_raw_data(enum CALTYPE calType ){
   154ae:	44a5      	add	sp, r4
   154b0:	0005      	movs	r5, r0
		return FR_DENIED;
   154b2:	2407      	movs	r4, #7
	if (SD_WriteLockout){
   154b4:	2b00      	cmp	r3, #0
   154b6:	d009      	beq.n	154cc <SD_save_raw_data+0x30>
}
   154b8:	0020      	movs	r0, r4
   154ba:	23b3      	movs	r3, #179	; 0xb3
   154bc:	009b      	lsls	r3, r3, #2
   154be:	449d      	add	sp, r3
   154c0:	bc3c      	pop	{r2, r3, r4, r5}
   154c2:	4690      	mov	r8, r2
   154c4:	4699      	mov	r9, r3
   154c6:	46a2      	mov	sl, r4
   154c8:	46ab      	mov	fp, r5
   154ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(folderName,"calibration");
   154cc:	ab29      	add	r3, sp, #164	; 0xa4
   154ce:	469a      	mov	sl, r3
   154d0:	4652      	mov	r2, sl
   154d2:	4b4a      	ldr	r3, [pc, #296]	; (155fc <SD_save_raw_data+0x160>)
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   154d4:	4e4a      	ldr	r6, [pc, #296]	; (15600 <SD_save_raw_data+0x164>)
			strcpy(folderName,"calibration");
   154d6:	cb13      	ldmia	r3!, {r0, r1, r4}
   154d8:	c213      	stmia	r2!, {r0, r1, r4}
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   154da:	21c8      	movs	r1, #200	; 0xc8
   154dc:	0030      	movs	r0, r6
   154de:	0049      	lsls	r1, r1, #1
   154e0:	4b48      	ldr	r3, [pc, #288]	; (15604 <SD_save_raw_data+0x168>)
   154e2:	4798      	blx	r3
   154e4:	1e04      	subs	r4, r0, #0
	if(fdebug1!=FR_OK){
   154e6:	d1e7      	bne.n	154b8 <SD_save_raw_data+0x1c>
	sprintf(write_str2,"0:/%s",folderName);
   154e8:	4f47      	ldr	r7, [pc, #284]	; (15608 <SD_save_raw_data+0x16c>)
   154ea:	4b48      	ldr	r3, [pc, #288]	; (1560c <SD_save_raw_data+0x170>)
   154ec:	4652      	mov	r2, sl
   154ee:	4948      	ldr	r1, [pc, #288]	; (15610 <SD_save_raw_data+0x174>)
   154f0:	0038      	movs	r0, r7
   154f2:	4698      	mov	r8, r3
   154f4:	4798      	blx	r3
	if (strncmp(write_str1,write_str2,20)!=0){
   154f6:	2214      	movs	r2, #20
   154f8:	0039      	movs	r1, r7
   154fa:	0030      	movs	r0, r6
   154fc:	4b45      	ldr	r3, [pc, #276]	; (15614 <SD_save_raw_data+0x178>)
   154fe:	4798      	blx	r3
   15500:	2800      	cmp	r0, #0
   15502:	d15b      	bne.n	155bc <SD_save_raw_data+0x120>
	switch (calType){
   15504:	2d00      	cmp	r5, #0
   15506:	d06f      	beq.n	155e8 <SD_save_raw_data+0x14c>
   15508:	2d01      	cmp	r5, #1
   1550a:	d051      	beq.n	155b0 <SD_save_raw_data+0x114>
	genTimestampString(write_str2, &current_time, 2);
   1550c:	2202      	movs	r2, #2
   1550e:	4942      	ldr	r1, [pc, #264]	; (15618 <SD_save_raw_data+0x17c>)
   15510:	0038      	movs	r0, r7
   15512:	4b42      	ldr	r3, [pc, #264]	; (1561c <SD_save_raw_data+0x180>)
   15514:	4798      	blx	r3
	sprintf(file_name, "raw_%s_SN%04d_%s.bin",
   15516:	4b42      	ldr	r3, [pc, #264]	; (15620 <SD_save_raw_data+0x184>)
   15518:	003a      	movs	r2, r7
   1551a:	685b      	ldr	r3, [r3, #4]
   1551c:	4941      	ldr	r1, [pc, #260]	; (15624 <SD_save_raw_data+0x188>)
   1551e:	9600      	str	r6, [sp, #0]
   15520:	a810      	add	r0, sp, #64	; 0x40
   15522:	47c0      	blx	r8
	fdebug2 = f_open(&file1, file_name, FA_CREATE_NEW | FA_READ | FA_WRITE);
   15524:	2207      	movs	r2, #7
   15526:	a910      	add	r1, sp, #64	; 0x40
   15528:	4650      	mov	r0, sl
   1552a:	4b3f      	ldr	r3, [pc, #252]	; (15628 <SD_save_raw_data+0x18c>)
   1552c:	4798      	blx	r3
   1552e:	1e04      	subs	r4, r0, #0
	if(fdebug2 != FR_OK){
   15530:	d157      	bne.n	155e2 <SD_save_raw_data+0x146>
	for (i=0;i<nPoints;i++){
   15532:	4b3e      	ldr	r3, [pc, #248]	; (1562c <SD_save_raw_data+0x190>)
   15534:	469b      	mov	fp, r3
   15536:	681b      	ldr	r3, [r3, #0]
   15538:	2b00      	cmp	r3, #0
   1553a:	d035      	beq.n	155a8 <SD_save_raw_data+0x10c>
   1553c:	4b3c      	ldr	r3, [pc, #240]	; (15630 <SD_save_raw_data+0x194>)
   1553e:	4f3d      	ldr	r7, [pc, #244]	; (15634 <SD_save_raw_data+0x198>)
   15540:	4698      	mov	r8, r3
   15542:	2300      	movs	r3, #0
   15544:	4699      	mov	r9, r3
   15546:	4e3c      	ldr	r6, [pc, #240]	; (15638 <SD_save_raw_data+0x19c>)
   15548:	4d3c      	ldr	r5, [pc, #240]	; (1563c <SD_save_raw_data+0x1a0>)
			raw_data_entry[k] = a1Raw[i][k];
   1554a:	4643      	mov	r3, r8
   1554c:	681b      	ldr	r3, [r3, #0]
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
   1554e:	4c3c      	ldr	r4, [pc, #240]	; (15640 <SD_save_raw_data+0x1a4>)
			raw_data_entry[k] = a1Raw[i][k];
   15550:	9304      	str	r3, [sp, #16]
			raw_data_entry[k+3] = a2Raw[i][k];
   15552:	683b      	ldr	r3, [r7, #0]
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
   15554:	2230      	movs	r2, #48	; 0x30
			raw_data_entry[k+3] = a2Raw[i][k];
   15556:	9307      	str	r3, [sp, #28]
			raw_data_entry[k+6] = m1Raw[i][k];
   15558:	6833      	ldr	r3, [r6, #0]
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
   1555a:	a904      	add	r1, sp, #16
			raw_data_entry[k+6] = m1Raw[i][k];
   1555c:	930a      	str	r3, [sp, #40]	; 0x28
			raw_data_entry[k+9] = m2Raw[i][k];
   1555e:	682b      	ldr	r3, [r5, #0]
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
   15560:	4650      	mov	r0, sl
			raw_data_entry[k+9] = m2Raw[i][k];
   15562:	930d      	str	r3, [sp, #52]	; 0x34
			raw_data_entry[k] = a1Raw[i][k];
   15564:	4643      	mov	r3, r8
   15566:	685b      	ldr	r3, [r3, #4]
   15568:	9305      	str	r3, [sp, #20]
			raw_data_entry[k+3] = a2Raw[i][k];
   1556a:	687b      	ldr	r3, [r7, #4]
   1556c:	9308      	str	r3, [sp, #32]
			raw_data_entry[k+6] = m1Raw[i][k];
   1556e:	6873      	ldr	r3, [r6, #4]
   15570:	930b      	str	r3, [sp, #44]	; 0x2c
			raw_data_entry[k+9] = m2Raw[i][k];
   15572:	686b      	ldr	r3, [r5, #4]
   15574:	930e      	str	r3, [sp, #56]	; 0x38
			raw_data_entry[k] = a1Raw[i][k];
   15576:	4643      	mov	r3, r8
   15578:	689b      	ldr	r3, [r3, #8]
   1557a:	9306      	str	r3, [sp, #24]
			raw_data_entry[k+3] = a2Raw[i][k];
   1557c:	68bb      	ldr	r3, [r7, #8]
   1557e:	370c      	adds	r7, #12
   15580:	9309      	str	r3, [sp, #36]	; 0x24
			raw_data_entry[k+6] = m1Raw[i][k];
   15582:	68b3      	ldr	r3, [r6, #8]
   15584:	360c      	adds	r6, #12
   15586:	930c      	str	r3, [sp, #48]	; 0x30
			raw_data_entry[k+9] = m2Raw[i][k];
   15588:	68ab      	ldr	r3, [r5, #8]
   1558a:	350c      	adds	r5, #12
   1558c:	930f      	str	r3, [sp, #60]	; 0x3c
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
   1558e:	ab03      	add	r3, sp, #12
   15590:	47a0      	blx	r4
	for (i=0;i<nPoints;i++){
   15592:	2301      	movs	r3, #1
   15594:	469c      	mov	ip, r3
   15596:	330b      	adds	r3, #11
   15598:	44e1      	add	r9, ip
   1559a:	469c      	mov	ip, r3
   1559c:	465b      	mov	r3, fp
   1559e:	681b      	ldr	r3, [r3, #0]
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
   155a0:	0004      	movs	r4, r0
   155a2:	44e0      	add	r8, ip
	for (i=0;i<nPoints;i++){
   155a4:	454b      	cmp	r3, r9
   155a6:	d8d0      	bhi.n	1554a <SD_save_raw_data+0xae>
	f_close(&file1);
   155a8:	4650      	mov	r0, sl
   155aa:	4b26      	ldr	r3, [pc, #152]	; (15644 <SD_save_raw_data+0x1a8>)
   155ac:	4798      	blx	r3
	return fdebug3;
   155ae:	e783      	b.n	154b8 <SD_save_raw_data+0x1c>
			strcpy(write_str1,"azmQuick");
   155b0:	2209      	movs	r2, #9
   155b2:	4925      	ldr	r1, [pc, #148]	; (15648 <SD_save_raw_data+0x1ac>)
   155b4:	0030      	movs	r0, r6
   155b6:	4b25      	ldr	r3, [pc, #148]	; (1564c <SD_save_raw_data+0x1b0>)
   155b8:	4798      	blx	r3
			break;
   155ba:	e7a7      	b.n	1550c <SD_save_raw_data+0x70>
		fdebug1 = f_chdir(write_str2);
   155bc:	4b24      	ldr	r3, [pc, #144]	; (15650 <SD_save_raw_data+0x1b4>)
   155be:	0038      	movs	r0, r7
   155c0:	4699      	mov	r9, r3
   155c2:	4798      	blx	r3
   155c4:	1e04      	subs	r4, r0, #0
		if (fdebug1==FR_OK){
   155c6:	d09d      	beq.n	15504 <SD_save_raw_data+0x68>
		}else if(fdebug1==FR_NO_PATH){
   155c8:	2805      	cmp	r0, #5
   155ca:	d000      	beq.n	155ce <SD_save_raw_data+0x132>
   155cc:	e774      	b.n	154b8 <SD_save_raw_data+0x1c>
			fdebug1 = f_chdir("0:/");
   155ce:	4821      	ldr	r0, [pc, #132]	; (15654 <SD_save_raw_data+0x1b8>)
   155d0:	47c8      	blx	r9
			fdebug1 = f_mkdir(folderName);
   155d2:	4b21      	ldr	r3, [pc, #132]	; (15658 <SD_save_raw_data+0x1bc>)
   155d4:	4650      	mov	r0, sl
   155d6:	4798      	blx	r3
			fdebug1 = f_chdir(write_str2);
   155d8:	0038      	movs	r0, r7
   155da:	47c8      	blx	r9
   155dc:	1e04      	subs	r4, r0, #0
	if(fdebug1!=FR_OK){
   155de:	d091      	beq.n	15504 <SD_save_raw_data+0x68>
   155e0:	e76a      	b.n	154b8 <SD_save_raw_data+0x1c>
		SD_status = fdebug2;
   155e2:	4b1e      	ldr	r3, [pc, #120]	; (1565c <SD_save_raw_data+0x1c0>)
   155e4:	7018      	strb	r0, [r3, #0]
		return fdebug2;
   155e6:	e767      	b.n	154b8 <SD_save_raw_data+0x1c>
			strcpy(write_str1,"fullCal");
   155e8:	2208      	movs	r2, #8
   155ea:	491d      	ldr	r1, [pc, #116]	; (15660 <SD_save_raw_data+0x1c4>)
   155ec:	0030      	movs	r0, r6
   155ee:	4b17      	ldr	r3, [pc, #92]	; (1564c <SD_save_raw_data+0x1b0>)
   155f0:	4798      	blx	r3
			break;
   155f2:	e78b      	b.n	1550c <SD_save_raw_data+0x70>
   155f4:	20000d50 	.word	0x20000d50
   155f8:	fffffd34 	.word	0xfffffd34
   155fc:	0002ded4 	.word	0x0002ded4
   15600:	20002b78 	.word	0x20002b78
   15604:	0000de19 	.word	0x0000de19
   15608:	200041dc 	.word	0x200041dc
   1560c:	00028ab1 	.word	0x00028ab1
   15610:	0002dee0 	.word	0x0002dee0
   15614:	00028c81 	.word	0x00028c81
   15618:	20002628 	.word	0x20002628
   1561c:	0000febd 	.word	0x0000febd
   15620:	20002d20 	.word	0x20002d20
   15624:	0002e26c 	.word	0x0002e26c
   15628:	0000cc3d 	.word	0x0000cc3d
   1562c:	20002d38 	.word	0x20002d38
   15630:	20003d28 	.word	0x20003d28
   15634:	20002178 	.word	0x20002178
   15638:	20002e80 	.word	0x20002e80
   1563c:	20001b30 	.word	0x20001b30
   15640:	0000d5d5 	.word	0x0000d5d5
   15644:	0000d8d5 	.word	0x0000d8d5
   15648:	0002e258 	.word	0x0002e258
   1564c:	00028999 	.word	0x00028999
   15650:	0000da29 	.word	0x0000da29
   15654:	0002dee8 	.word	0x0002dee8
   15658:	0000e24d 	.word	0x0000e24d
   1565c:	20003d25 	.word	0x20003d25
   15660:	0002e264 	.word	0x0002e264

00015664 <configure_SD>:
FRESULT configure_SD(void){
   15664:	b510      	push	{r4, lr}
	sd_mmc_init();
   15666:	4b05      	ldr	r3, [pc, #20]	; (1567c <configure_SD+0x18>)
   15668:	4798      	blx	r3
	disk_status(0);
   1566a:	4b05      	ldr	r3, [pc, #20]	; (15680 <configure_SD+0x1c>)
   1566c:	2000      	movs	r0, #0
   1566e:	4798      	blx	r3
	fdebug1 = f_mount(0, &FatFS);
   15670:	4904      	ldr	r1, [pc, #16]	; (15684 <configure_SD+0x20>)
   15672:	2000      	movs	r0, #0
   15674:	4b04      	ldr	r3, [pc, #16]	; (15688 <configure_SD+0x24>)
   15676:	4798      	blx	r3
}
   15678:	bd10      	pop	{r4, pc}
   1567a:	46c0      	nop			; (mov r8, r8)
   1567c:	00016e99 	.word	0x00016e99
   15680:	00009d1d 	.word	0x00009d1d
   15684:	20004f2c 	.word	0x20004f2c
   15688:	0000cc15 	.word	0x0000cc15

0001568c <getSN>:
void getSN(void){
   1568c:	b530      	push	{r4, r5, lr}
   1568e:	4c1b      	ldr	r4, [pc, #108]	; (156fc <getSN+0x70>)
	fdebug1 = f_chdir("0:/");
   15690:	4b1b      	ldr	r3, [pc, #108]	; (15700 <getSN+0x74>)
void getSN(void){
   15692:	44a5      	add	sp, r4
	fdebug1 = f_chdir("0:/");
   15694:	481b      	ldr	r0, [pc, #108]	; (15704 <getSN+0x78>)
   15696:	4798      	blx	r3
	fdebug1 = f_open(&file1,"SN.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   15698:	2203      	movs	r2, #3
   1569a:	491b      	ldr	r1, [pc, #108]	; (15708 <getSN+0x7c>)
   1569c:	a803      	add	r0, sp, #12
   1569e:	4b1b      	ldr	r3, [pc, #108]	; (1570c <getSN+0x80>)
   156a0:	4798      	blx	r3
	if (fdebug1!=FR_OK){
   156a2:	2800      	cmp	r0, #0
   156a4:	d003      	beq.n	156ae <getSN+0x22>
}
   156a6:	238d      	movs	r3, #141	; 0x8d
   156a8:	009b      	lsls	r3, r3, #2
   156aa:	449d      	add	sp, r3
   156ac:	bd30      	pop	{r4, r5, pc}
	f_read(&file1, snStr, 4, &bytesWritten);
   156ae:	ad01      	add	r5, sp, #4
   156b0:	ab02      	add	r3, sp, #8
   156b2:	2204      	movs	r2, #4
   156b4:	0029      	movs	r1, r5
   156b6:	4c16      	ldr	r4, [pc, #88]	; (15710 <getSN+0x84>)
   156b8:	a803      	add	r0, sp, #12
   156ba:	47a0      	blx	r4
		temp = snStr[i] & 0x0f;
   156bc:	230f      	movs	r3, #15
		SN = SN + (temp*mult);
   156be:	24fa      	movs	r4, #250	; 0xfa
		temp = snStr[i] & 0x0f;
   156c0:	782a      	ldrb	r2, [r5, #0]
		SN = SN + (temp*mult);
   156c2:	00a4      	lsls	r4, r4, #2
   156c4:	401a      	ands	r2, r3
   156c6:	4354      	muls	r4, r2
   156c8:	2264      	movs	r2, #100	; 0x64
		temp = snStr[i] & 0x0f;
   156ca:	7869      	ldrb	r1, [r5, #1]
	f_close(&file1);
   156cc:	a803      	add	r0, sp, #12
		SN = SN + (temp*mult);
   156ce:	4019      	ands	r1, r3
   156d0:	434a      	muls	r2, r1
		temp = snStr[i] & 0x0f;
   156d2:	78a9      	ldrb	r1, [r5, #2]
		SN = SN + (temp*mult);
   156d4:	18a2      	adds	r2, r4, r2
   156d6:	4019      	ands	r1, r3
   156d8:	008c      	lsls	r4, r1, #2
   156da:	1864      	adds	r4, r4, r1
   156dc:	0064      	lsls	r4, r4, #1
   156de:	18a4      	adds	r4, r4, r2
		temp = snStr[i] & 0x0f;
   156e0:	78ea      	ldrb	r2, [r5, #3]
		SN = SN + (temp*mult);
   156e2:	4013      	ands	r3, r2
   156e4:	191c      	adds	r4, r3, r4
	f_close(&file1);
   156e6:	4b0b      	ldr	r3, [pc, #44]	; (15714 <getSN+0x88>)
   156e8:	4798      	blx	r3
	if (SN!=options.SerialNumber){
   156ea:	4b0b      	ldr	r3, [pc, #44]	; (15718 <getSN+0x8c>)
   156ec:	685a      	ldr	r2, [r3, #4]
   156ee:	4294      	cmp	r4, r2
   156f0:	d0d9      	beq.n	156a6 <getSN+0x1a>
		options.SerialNumber = SN;
   156f2:	605c      	str	r4, [r3, #4]
		save_user_settings();
   156f4:	4b09      	ldr	r3, [pc, #36]	; (1571c <getSN+0x90>)
   156f6:	4798      	blx	r3
   156f8:	e7d5      	b.n	156a6 <getSN+0x1a>
   156fa:	46c0      	nop			; (mov r8, r8)
   156fc:	fffffdcc 	.word	0xfffffdcc
   15700:	0000da29 	.word	0x0000da29
   15704:	0002dee8 	.word	0x0002dee8
   15708:	0002e7e8 	.word	0x0002e7e8
   1570c:	0000cc3d 	.word	0x0000cc3d
   15710:	0000d2c9 	.word	0x0000d2c9
   15714:	0000d8d5 	.word	0x0000d8d5
   15718:	20002d20 	.word	0x20002d20
   1571c:	00011089 	.word	0x00011089

00015720 <loadMeasBuffer>:
	return fdebug1;

}


void loadMeasBuffer(void){
   15720:	b5f0      	push	{r4, r5, r6, r7, lr}
   15722:	4645      	mov	r5, r8
   15724:	46de      	mov	lr, fp
   15726:	4657      	mov	r7, sl
   15728:	464e      	mov	r6, r9
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   1572a:	21c8      	movs	r1, #200	; 0xc8
void loadMeasBuffer(void){
   1572c:	b5e0      	push	{r5, r6, r7, lr}
			strcpy(folderName,"data");
   1572e:	4b32      	ldr	r3, [pc, #200]	; (157f8 <loadMeasBuffer+0xd8>)
void loadMeasBuffer(void){
   15730:	4c32      	ldr	r4, [pc, #200]	; (157fc <loadMeasBuffer+0xdc>)
			strcpy(folderName,"data");
   15732:	681a      	ldr	r2, [r3, #0]
void loadMeasBuffer(void){
   15734:	44a5      	add	sp, r4
			strcpy(folderName,"data");
   15736:	9201      	str	r2, [sp, #4]
   15738:	791b      	ldrb	r3, [r3, #4]
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   1573a:	4d31      	ldr	r5, [pc, #196]	; (15800 <loadMeasBuffer+0xe0>)
			strcpy(folderName,"data");
   1573c:	ac01      	add	r4, sp, #4
   1573e:	7123      	strb	r3, [r4, #4]
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15740:	0049      	lsls	r1, r1, #1
   15742:	0028      	movs	r0, r5
   15744:	4b2f      	ldr	r3, [pc, #188]	; (15804 <loadMeasBuffer+0xe4>)
   15746:	4798      	blx	r3
	if(fdebug1!=FR_OK){
   15748:	2800      	cmp	r0, #0
   1574a:	d039      	beq.n	157c0 <loadMeasBuffer+0xa0>
	DSTATUS diskio_status;
	uint32_t i;
	
	//  Open the file
	fdebug1 = SD_change_directory(folderData);
	fdebug1 = f_open(&bufferFile, FILENAME_RAW_DATA_BUFFER, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   1574c:	2203      	movs	r2, #3
   1574e:	492e      	ldr	r1, [pc, #184]	; (15808 <loadMeasBuffer+0xe8>)
   15750:	0020      	movs	r0, r4
   15752:	4b2e      	ldr	r3, [pc, #184]	; (1580c <loadMeasBuffer+0xec>)
   15754:	4798      	blx	r3
	if (fdebug1!=FR_OK){
   15756:	2800      	cmp	r0, #0
   15758:	d129      	bne.n	157ae <loadMeasBuffer+0x8e>
	}
	
	unsigned long fileSize, fileIndex;
	uint32_t nMeasSD, measSize, nMeasCopy;
	measSize = sizeof(measBuf[0]);
	fileSize = f_size(&bufferFile);
   1575a:	68e3      	ldr	r3, [r4, #12]
   1575c:	4698      	mov	r8, r3
	// Find number of measurements stored:
	nMeasSD = fileSize/measSize;
   1575e:	099e      	lsrs	r6, r3, #6
	nMeasCopy = min(nMeasSD, N_MEASBUF);
	if(nMeasSD==0){
   15760:	d022      	beq.n	157a8 <loadMeasBuffer+0x88>
	nMeasCopy = min(nMeasSD, N_MEASBUF);
   15762:	2e0a      	cmp	r6, #10
   15764:	d846      	bhi.n	157f4 <loadMeasBuffer+0xd4>
		return;
	}
	
	
	//  Read Measurement
	for (measBufInd=0;measBufInd<nMeasCopy;measBufInd++){
   15766:	2300      	movs	r3, #0
   15768:	4d29      	ldr	r5, [pc, #164]	; (15810 <loadMeasBuffer+0xf0>)
   1576a:	2100      	movs	r1, #0
   1576c:	602b      	str	r3, [r5, #0]
   1576e:	4b29      	ldr	r3, [pc, #164]	; (15814 <loadMeasBuffer+0xf4>)
   15770:	4f29      	ldr	r7, [pc, #164]	; (15818 <loadMeasBuffer+0xf8>)
   15772:	469b      	mov	fp, r3
   15774:	4b29      	ldr	r3, [pc, #164]	; (1581c <loadMeasBuffer+0xfc>)
   15776:	469a      	mov	sl, r3
   15778:	4b29      	ldr	r3, [pc, #164]	; (15820 <loadMeasBuffer+0x100>)
   1577a:	4699      	mov	r9, r3
		fileIndex = fileSize-((nMeasCopy-measBufInd)*measSize);
   1577c:	4643      	mov	r3, r8
   1577e:	1a71      	subs	r1, r6, r1
   15780:	0189      	lsls	r1, r1, #6
   15782:	1a59      	subs	r1, r3, r1
		fdebug1 = f_lseek(&bufferFile, fileIndex);
   15784:	0020      	movs	r0, r4
   15786:	47d8      	blx	fp
		fdebug2 = f_read(&bufferFile, &measBuf[measBufInd],measSize, &bytesWritten);
   15788:	682b      	ldr	r3, [r5, #0]
   1578a:	2240      	movs	r2, #64	; 0x40
   1578c:	0199      	lsls	r1, r3, #6
   1578e:	1879      	adds	r1, r7, r1
   15790:	466b      	mov	r3, sp
   15792:	0020      	movs	r0, r4
   15794:	47d0      	blx	sl
		refIndex = measBuf[measBufInd].refIndex;
   15796:	464a      	mov	r2, r9
   15798:	6829      	ldr	r1, [r5, #0]
   1579a:	018b      	lsls	r3, r1, #6
   1579c:	58fb      	ldr	r3, [r7, r3]
	for (measBufInd=0;measBufInd<nMeasCopy;measBufInd++){
   1579e:	3101      	adds	r1, #1
		refIndex = measBuf[measBufInd].refIndex;
   157a0:	6013      	str	r3, [r2, #0]
	for (measBufInd=0;measBufInd<nMeasCopy;measBufInd++){
   157a2:	6029      	str	r1, [r5, #0]
   157a4:	428e      	cmp	r6, r1
   157a6:	d8e9      	bhi.n	1577c <loadMeasBuffer+0x5c>
	}
	
	f_close(&bufferFile);
   157a8:	0020      	movs	r0, r4
   157aa:	4b1e      	ldr	r3, [pc, #120]	; (15824 <loadMeasBuffer+0x104>)
   157ac:	4798      	blx	r3
	
	
}
   157ae:	238b      	movs	r3, #139	; 0x8b
   157b0:	009b      	lsls	r3, r3, #2
   157b2:	449d      	add	sp, r3
   157b4:	bc3c      	pop	{r2, r3, r4, r5}
   157b6:	4690      	mov	r8, r2
   157b8:	4699      	mov	r9, r3
   157ba:	46a2      	mov	sl, r4
   157bc:	46ab      	mov	fp, r5
   157be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sprintf(write_str2,"0:/%s",folderName);
   157c0:	4e19      	ldr	r6, [pc, #100]	; (15828 <loadMeasBuffer+0x108>)
   157c2:	0022      	movs	r2, r4
   157c4:	4919      	ldr	r1, [pc, #100]	; (1582c <loadMeasBuffer+0x10c>)
   157c6:	4b1a      	ldr	r3, [pc, #104]	; (15830 <loadMeasBuffer+0x110>)
   157c8:	0030      	movs	r0, r6
   157ca:	4798      	blx	r3
	if (strncmp(write_str1,write_str2,20)!=0){
   157cc:	2214      	movs	r2, #20
   157ce:	0031      	movs	r1, r6
   157d0:	0028      	movs	r0, r5
   157d2:	4b18      	ldr	r3, [pc, #96]	; (15834 <loadMeasBuffer+0x114>)
   157d4:	4798      	blx	r3
   157d6:	2800      	cmp	r0, #0
   157d8:	d0b8      	beq.n	1574c <loadMeasBuffer+0x2c>
		fdebug1 = f_chdir(write_str2);
   157da:	0030      	movs	r0, r6
   157dc:	4d16      	ldr	r5, [pc, #88]	; (15838 <loadMeasBuffer+0x118>)
   157de:	47a8      	blx	r5
		}else if(fdebug1==FR_NO_PATH){
   157e0:	2805      	cmp	r0, #5
   157e2:	d1b3      	bne.n	1574c <loadMeasBuffer+0x2c>
			fdebug1 = f_chdir("0:/");
   157e4:	4815      	ldr	r0, [pc, #84]	; (1583c <loadMeasBuffer+0x11c>)
   157e6:	47a8      	blx	r5
			fdebug1 = f_mkdir(folderName);
   157e8:	0020      	movs	r0, r4
   157ea:	4b15      	ldr	r3, [pc, #84]	; (15840 <loadMeasBuffer+0x120>)
   157ec:	4798      	blx	r3
			fdebug1 = f_chdir(write_str2);
   157ee:	0030      	movs	r0, r6
   157f0:	47a8      	blx	r5
   157f2:	e7ab      	b.n	1574c <loadMeasBuffer+0x2c>
	nMeasCopy = min(nMeasSD, N_MEASBUF);
   157f4:	260a      	movs	r6, #10
   157f6:	e7b6      	b.n	15766 <loadMeasBuffer+0x46>
   157f8:	0002e250 	.word	0x0002e250
   157fc:	fffffdd4 	.word	0xfffffdd4
   15800:	20002b78 	.word	0x20002b78
   15804:	0000de19 	.word	0x0000de19
   15808:	0002e7f0 	.word	0x0002e7f0
   1580c:	0000cc3d 	.word	0x0000cc3d
   15810:	20000d68 	.word	0x20000d68
   15814:	0000e06d 	.word	0x0000e06d
   15818:	20003a44 	.word	0x20003a44
   1581c:	0000d2c9 	.word	0x0000d2c9
   15820:	200001d8 	.word	0x200001d8
   15824:	0000d8d5 	.word	0x0000d8d5
   15828:	200041dc 	.word	0x200041dc
   1582c:	0002dee0 	.word	0x0002dee0
   15830:	00028ab1 	.word	0x00028ab1
   15834:	00028c81 	.word	0x00028c81
   15838:	0000da29 	.word	0x0000da29
   1583c:	0002dee8 	.word	0x0002dee8
   15840:	0000e24d 	.word	0x0000e24d

00015844 <SyncDataBLE>:
	memcpy(&bleSyncTracker.timeEnd,&meas_inst->measTime,sizeof(&bleSyncTracker.timeEnd));
	
}


void SyncDataBLE(void){
   15844:	b5f0      	push	{r4, r5, r6, r7, lr}
   15846:	46c6      	mov	lr, r8
   15848:	b500      	push	{lr}
	struct MEASUREMENT tempMeas;
	static uint32_t lastMeasAttempted;
	static uint32_t lastMS;
	
	//Check to see if device is in powerdown mode
	if (current_state== st_powerdown){
   1584a:	4b3f      	ldr	r3, [pc, #252]	; (15948 <SyncDataBLE+0x104>)
void SyncDataBLE(void){
   1584c:	4c3f      	ldr	r4, [pc, #252]	; (1594c <SyncDataBLE+0x108>)
	if (current_state== st_powerdown){
   1584e:	681b      	ldr	r3, [r3, #0]
void SyncDataBLE(void){
   15850:	44a5      	add	sp, r4
	if (current_state== st_powerdown){
   15852:	2b04      	cmp	r3, #4
   15854:	d003      	beq.n	1585e <SyncDataBLE+0x1a>
		return;
	}
	
	//  Check to see if device is connected
	if (!isBleConnected()){
   15856:	4b3e      	ldr	r3, [pc, #248]	; (15950 <SyncDataBLE+0x10c>)
   15858:	4798      	blx	r3
   1585a:	2800      	cmp	r0, #0
   1585c:	d105      	bne.n	1586a <SyncDataBLE+0x26>
	lastMeasAttempted = bleSyncTracker.measStackSync;
	lastMS = getCurrentMs();

	
	
}
   1585e:	239a      	movs	r3, #154	; 0x9a
   15860:	009b      	lsls	r3, r3, #2
   15862:	449d      	add	sp, r3
   15864:	bc04      	pop	{r2}
   15866:	4690      	mov	r8, r2
   15868:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((bleSyncTracker.measStackEnd<=bleSyncTracker.measStackSync)||
   1586a:	4c3a      	ldr	r4, [pc, #232]	; (15954 <SyncDataBLE+0x110>)
   1586c:	69e3      	ldr	r3, [r4, #28]
   1586e:	6a22      	ldr	r2, [r4, #32]
   15870:	4293      	cmp	r3, r2
   15872:	d93b      	bls.n	158ec <SyncDataBLE+0xa8>
   15874:	2b00      	cmp	r3, #0
   15876:	d039      	beq.n	158ec <SyncDataBLE+0xa8>
	if (lastMeasAttempted == bleSyncTracker.measStackSync){
   15878:	4e37      	ldr	r6, [pc, #220]	; (15958 <SyncDataBLE+0x114>)
   1587a:	6833      	ldr	r3, [r6, #0]
   1587c:	429a      	cmp	r2, r3
   1587e:	d052      	beq.n	15926 <SyncDataBLE+0xe2>
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15880:	21c8      	movs	r1, #200	; 0xc8
			strcpy(folderName,"data");
   15882:	4b36      	ldr	r3, [pc, #216]	; (1595c <SyncDataBLE+0x118>)
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15884:	4f36      	ldr	r7, [pc, #216]	; (15960 <SyncDataBLE+0x11c>)
			strcpy(folderName,"data");
   15886:	681a      	ldr	r2, [r3, #0]
   15888:	ad11      	add	r5, sp, #68	; 0x44
   1588a:	9211      	str	r2, [sp, #68]	; 0x44
   1588c:	791b      	ldrb	r3, [r3, #4]
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   1588e:	0049      	lsls	r1, r1, #1
			strcpy(folderName,"data");
   15890:	712b      	strb	r3, [r5, #4]
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15892:	0038      	movs	r0, r7
   15894:	4b33      	ldr	r3, [pc, #204]	; (15964 <SyncDataBLE+0x120>)
   15896:	4798      	blx	r3
	if(fdebug1!=FR_OK){
   15898:	2800      	cmp	r0, #0
   1589a:	d029      	beq.n	158f0 <SyncDataBLE+0xac>
	fdebug1 = f_open(&bufferFile, FILENAME_RAW_DATA_BUFFER, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   1589c:	2203      	movs	r2, #3
   1589e:	4932      	ldr	r1, [pc, #200]	; (15968 <SyncDataBLE+0x124>)
   158a0:	0028      	movs	r0, r5
   158a2:	4b32      	ldr	r3, [pc, #200]	; (1596c <SyncDataBLE+0x128>)
   158a4:	4798      	blx	r3
	if (fdebug1!=FR_OK){
   158a6:	2800      	cmp	r0, #0
   158a8:	d1d9      	bne.n	1585e <SyncDataBLE+0x1a>
	expFileSize = measSize*bleSyncTracker.measStackEnd;
   158aa:	69e3      	ldr	r3, [r4, #28]
	fileSize = f_size(&bufferFile);
   158ac:	68e9      	ldr	r1, [r5, #12]
	expFileSize = measSize*bleSyncTracker.measStackEnd;
   158ae:	019a      	lsls	r2, r3, #6
	if (expFileSize<fileSize){
   158b0:	4291      	cmp	r1, r2
   158b2:	d941      	bls.n	15938 <SyncDataBLE+0xf4>
		bleSyncTracker.measStackEnd = fileSize/measSize;
   158b4:	098b      	lsrs	r3, r1, #6
   158b6:	61e3      	str	r3, [r4, #28]
	fileLoc = fileSize-((bleSyncTracker.measStackEnd-bleSyncTracker.measStackSync)*measSize);
   158b8:	6a22      	ldr	r2, [r4, #32]
	fdebug2 = f_lseek(&bufferFile, fileLoc);
   158ba:	0028      	movs	r0, r5
	fileLoc = fileSize-((bleSyncTracker.measStackEnd-bleSyncTracker.measStackSync)*measSize);
   158bc:	1a9b      	subs	r3, r3, r2
   158be:	019b      	lsls	r3, r3, #6
   158c0:	1ac9      	subs	r1, r1, r3
	fdebug2 = f_lseek(&bufferFile, fileLoc);
   158c2:	4b2b      	ldr	r3, [pc, #172]	; (15970 <SyncDataBLE+0x12c>)
   158c4:	4798      	blx	r3
	f_read(&bufferFile, &tempMeas,measSize, &bytesWritten);
   158c6:	2240      	movs	r2, #64	; 0x40
   158c8:	a901      	add	r1, sp, #4
   158ca:	466b      	mov	r3, sp
   158cc:	0028      	movs	r0, r5
   158ce:	4f29      	ldr	r7, [pc, #164]	; (15974 <SyncDataBLE+0x130>)
   158d0:	47b8      	blx	r7
	f_close(&bufferFile);
   158d2:	4b29      	ldr	r3, [pc, #164]	; (15978 <SyncDataBLE+0x134>)
   158d4:	0028      	movs	r0, r5
   158d6:	4798      	blx	r3
	BLE_sendMeas(&tempMeas);
   158d8:	a801      	add	r0, sp, #4
   158da:	4b28      	ldr	r3, [pc, #160]	; (1597c <SyncDataBLE+0x138>)
   158dc:	4798      	blx	r3
	lastMeasAttempted = bleSyncTracker.measStackSync;
   158de:	6a23      	ldr	r3, [r4, #32]
   158e0:	6033      	str	r3, [r6, #0]
	lastMS = getCurrentMs();
   158e2:	4b27      	ldr	r3, [pc, #156]	; (15980 <SyncDataBLE+0x13c>)
   158e4:	4798      	blx	r3
   158e6:	4b27      	ldr	r3, [pc, #156]	; (15984 <SyncDataBLE+0x140>)
   158e8:	6018      	str	r0, [r3, #0]
   158ea:	e7b8      	b.n	1585e <SyncDataBLE+0x1a>
		bleSyncTracker.measStackSync=bleSyncTracker.measStackEnd;
   158ec:	6223      	str	r3, [r4, #32]
		return;
   158ee:	e7b6      	b.n	1585e <SyncDataBLE+0x1a>
	sprintf(write_str2,"0:/%s",folderName);
   158f0:	4b25      	ldr	r3, [pc, #148]	; (15988 <SyncDataBLE+0x144>)
   158f2:	002a      	movs	r2, r5
   158f4:	4698      	mov	r8, r3
   158f6:	4925      	ldr	r1, [pc, #148]	; (1598c <SyncDataBLE+0x148>)
   158f8:	0018      	movs	r0, r3
   158fa:	4b25      	ldr	r3, [pc, #148]	; (15990 <SyncDataBLE+0x14c>)
   158fc:	4798      	blx	r3
	if (strncmp(write_str1,write_str2,20)!=0){
   158fe:	2214      	movs	r2, #20
   15900:	4641      	mov	r1, r8
   15902:	0038      	movs	r0, r7
   15904:	4b23      	ldr	r3, [pc, #140]	; (15994 <SyncDataBLE+0x150>)
   15906:	4798      	blx	r3
   15908:	2800      	cmp	r0, #0
   1590a:	d0c7      	beq.n	1589c <SyncDataBLE+0x58>
		fdebug1 = f_chdir(write_str2);
   1590c:	4640      	mov	r0, r8
   1590e:	4f22      	ldr	r7, [pc, #136]	; (15998 <SyncDataBLE+0x154>)
   15910:	47b8      	blx	r7
		}else if(fdebug1==FR_NO_PATH){
   15912:	2805      	cmp	r0, #5
   15914:	d1c2      	bne.n	1589c <SyncDataBLE+0x58>
			fdebug1 = f_chdir("0:/");
   15916:	4821      	ldr	r0, [pc, #132]	; (1599c <SyncDataBLE+0x158>)
   15918:	47b8      	blx	r7
			fdebug1 = f_mkdir(folderName);
   1591a:	0028      	movs	r0, r5
   1591c:	4b20      	ldr	r3, [pc, #128]	; (159a0 <SyncDataBLE+0x15c>)
   1591e:	4798      	blx	r3
			fdebug1 = f_chdir(write_str2);
   15920:	4640      	mov	r0, r8
   15922:	47b8      	blx	r7
   15924:	e7ba      	b.n	1589c <SyncDataBLE+0x58>
		if ((getCurrentMs()-lastMS)<2000){
   15926:	4b16      	ldr	r3, [pc, #88]	; (15980 <SyncDataBLE+0x13c>)
   15928:	4798      	blx	r3
   1592a:	4b16      	ldr	r3, [pc, #88]	; (15984 <SyncDataBLE+0x140>)
   1592c:	681b      	ldr	r3, [r3, #0]
   1592e:	1ac0      	subs	r0, r0, r3
   15930:	4b1c      	ldr	r3, [pc, #112]	; (159a4 <SyncDataBLE+0x160>)
   15932:	4298      	cmp	r0, r3
   15934:	d993      	bls.n	1585e <SyncDataBLE+0x1a>
   15936:	e7a3      	b.n	15880 <SyncDataBLE+0x3c>
	}else if (expFileSize>fileSize){
   15938:	4291      	cmp	r1, r2
   1593a:	d2bd      	bcs.n	158b8 <SyncDataBLE+0x74>
		bleSyncTracker.measStackEnd = fileSize/measSize;
   1593c:	0989      	lsrs	r1, r1, #6
		f_close(&bufferFile);
   1593e:	0028      	movs	r0, r5
   15940:	4b0d      	ldr	r3, [pc, #52]	; (15978 <SyncDataBLE+0x134>)
		bleSyncTracker.measStackEnd = fileSize/measSize;
   15942:	61e1      	str	r1, [r4, #28]
		f_close(&bufferFile);
   15944:	4798      	blx	r3
		return;
   15946:	e78a      	b.n	1585e <SyncDataBLE+0x1a>
   15948:	20002630 	.word	0x20002630
   1594c:	fffffd98 	.word	0xfffffd98
   15950:	0000f0f9 	.word	0x0000f0f9
   15954:	20004388 	.word	0x20004388
   15958:	20000cbc 	.word	0x20000cbc
   1595c:	0002e250 	.word	0x0002e250
   15960:	20002b78 	.word	0x20002b78
   15964:	0000de19 	.word	0x0000de19
   15968:	0002e7f0 	.word	0x0002e7f0
   1596c:	0000cc3d 	.word	0x0000cc3d
   15970:	0000e06d 	.word	0x0000e06d
   15974:	0000d2c9 	.word	0x0000d2c9
   15978:	0000d8d5 	.word	0x0000d8d5
   1597c:	0000f4e5 	.word	0x0000f4e5
   15980:	00016df9 	.word	0x00016df9
   15984:	20000cb8 	.word	0x20000cb8
   15988:	200041dc 	.word	0x200041dc
   1598c:	0002dee0 	.word	0x0002dee0
   15990:	00028ab1 	.word	0x00028ab1
   15994:	00028c81 	.word	0x00028c81
   15998:	0000da29 	.word	0x0000da29
   1599c:	0002dee8 	.word	0x0002dee8
   159a0:	0000e24d 	.word	0x0000e24d
   159a4:	000007cf 	.word	0x000007cf

000159a8 <initSyncTracker>:
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   159a8:	21c8      	movs	r1, #200	; 0xc8



void initSyncTracker(void){
   159aa:	b5f0      	push	{r4, r5, r6, r7, lr}
			strcpy(folderName,"data");
   159ac:	4b34      	ldr	r3, [pc, #208]	; (15a80 <initSyncTracker+0xd8>)
void initSyncTracker(void){
   159ae:	4c35      	ldr	r4, [pc, #212]	; (15a84 <initSyncTracker+0xdc>)
			strcpy(folderName,"data");
   159b0:	681a      	ldr	r2, [r3, #0]
void initSyncTracker(void){
   159b2:	44a5      	add	sp, r4
			strcpy(folderName,"data");
   159b4:	9211      	str	r2, [sp, #68]	; 0x44
   159b6:	791b      	ldrb	r3, [r3, #4]
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   159b8:	4c33      	ldr	r4, [pc, #204]	; (15a88 <initSyncTracker+0xe0>)
			strcpy(folderName,"data");
   159ba:	ad11      	add	r5, sp, #68	; 0x44
   159bc:	712b      	strb	r3, [r5, #4]
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   159be:	0049      	lsls	r1, r1, #1
   159c0:	0020      	movs	r0, r4
   159c2:	4b32      	ldr	r3, [pc, #200]	; (15a8c <initSyncTracker+0xe4>)
   159c4:	4798      	blx	r3
	if(fdebug1!=FR_OK){
   159c6:	2800      	cmp	r0, #0
   159c8:	d03f      	beq.n	15a4a <initSyncTracker+0xa2>
	FRESULT fdebug1, fdebug2, fdebug3;
	DSTATUS diskio_status;
	struct MEASUREMENT tempMeas;
	
	fdebug1 = SD_change_directory(folderData);
	fdebug1 = f_open(&tempFile, FILENAME_RAW_DATA_BUFFER, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
   159ca:	2213      	movs	r2, #19
   159cc:	4930      	ldr	r1, [pc, #192]	; (15a90 <initSyncTracker+0xe8>)
   159ce:	0028      	movs	r0, r5
   159d0:	4b30      	ldr	r3, [pc, #192]	; (15a94 <initSyncTracker+0xec>)
   159d2:	4798      	blx	r3
	
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
   159d4:	26fb      	movs	r6, #251	; 0xfb
   159d6:	4006      	ands	r6, r0
   159d8:	d11c      	bne.n	15a14 <initSyncTracker+0x6c>
	
	
	//  Get size of file
	unsigned long fileSize;
	uint32_t measSize;
	fileSize = f_size(&tempFile);
   159da:	68ef      	ldr	r7, [r5, #12]
	measSize = sizeof(tempMeas);
	
	// Read Last Measurement
	if (fileSize>=measSize){
   159dc:	2f3f      	cmp	r7, #63	; 0x3f
   159de:	d81d      	bhi.n	15a1c <initSyncTracker+0x74>



void resetSyncTrackerEnd(void){
	//  Reset everything
	bleSyncTracker.measStackEnd = 0;
   159e0:	4c2d      	ldr	r4, [pc, #180]	; (15a98 <initSyncTracker+0xf0>)
	bleSyncTracker.refIndexEnd = 0;
	memset(&bleSyncTracker.timeEnd,0,sizeof(bleSyncTracker.timeEnd));
   159e2:	2208      	movs	r2, #8
   159e4:	2100      	movs	r1, #0
   159e6:	1ca0      	adds	r0, r4, #2
   159e8:	4f2c      	ldr	r7, [pc, #176]	; (15a9c <initSyncTracker+0xf4>)
	bleSyncTracker.measStackEnd = 0;
   159ea:	61e6      	str	r6, [r4, #28]
	bleSyncTracker.refIndexEnd = 0;
   159ec:	6166      	str	r6, [r4, #20]
	memset(&bleSyncTracker.timeEnd,0,sizeof(bleSyncTracker.timeEnd));
   159ee:	47b8      	blx	r7

void resetSyncTrackerSync(void){
	//  Reset everything
	bleSyncTracker.measStackSync = 0;
	bleSyncTracker.refIndexSync = 0;
	memset(&bleSyncTracker.timeSync,0,sizeof(bleSyncTracker.timeSync));
   159f0:	0020      	movs	r0, r4
   159f2:	2208      	movs	r2, #8
   159f4:	300a      	adds	r0, #10
   159f6:	2100      	movs	r1, #0
	bleSyncTracker.measStackSync = 0;
   159f8:	6226      	str	r6, [r4, #32]
	bleSyncTracker.refIndexSync = 0;
   159fa:	61a6      	str	r6, [r4, #24]
	memset(&bleSyncTracker.timeSync,0,sizeof(bleSyncTracker.timeSync));
   159fc:	47b8      	blx	r7
	f_close(&tempFile);
   159fe:	4b28      	ldr	r3, [pc, #160]	; (15aa0 <initSyncTracker+0xf8>)
   15a00:	0028      	movs	r0, r5
   15a02:	4798      	blx	r3
	memset(&bleSyncTracker.timeSync,0,sizeof(bleSyncTracker.timeSync));
   15a04:	0020      	movs	r0, r4
	bleSyncTracker.measStackSync = 0;
   15a06:	2300      	movs	r3, #0
	memset(&bleSyncTracker.timeSync,0,sizeof(bleSyncTracker.timeSync));
   15a08:	300a      	adds	r0, #10
   15a0a:	2208      	movs	r2, #8
   15a0c:	2100      	movs	r1, #0
	bleSyncTracker.measStackSync = 0;
   15a0e:	6223      	str	r3, [r4, #32]
	bleSyncTracker.refIndexSync = 0;
   15a10:	61a3      	str	r3, [r4, #24]
	memset(&bleSyncTracker.timeSync,0,sizeof(bleSyncTracker.timeSync));
   15a12:	47b8      	blx	r7
}
   15a14:	239b      	movs	r3, #155	; 0x9b
   15a16:	009b      	lsls	r3, r3, #2
   15a18:	449d      	add	sp, r3
   15a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fdebug2 = f_lseek(&tempFile, (fileSize-measSize));
   15a1c:	0039      	movs	r1, r7
   15a1e:	4b21      	ldr	r3, [pc, #132]	; (15aa4 <initSyncTracker+0xfc>)
   15a20:	3940      	subs	r1, #64	; 0x40
   15a22:	0028      	movs	r0, r5
   15a24:	4798      	blx	r3
		f_read(&tempFile, &tempMeas,measSize, &bytesWritten);
   15a26:	466b      	mov	r3, sp
   15a28:	2240      	movs	r2, #64	; 0x40
   15a2a:	a901      	add	r1, sp, #4
   15a2c:	4c1e      	ldr	r4, [pc, #120]	; (15aa8 <initSyncTracker+0x100>)
   15a2e:	0028      	movs	r0, r5
   15a30:	47a0      	blx	r4
		bleSyncTracker.measStackEnd = fileSize/measSize;
   15a32:	4c19      	ldr	r4, [pc, #100]	; (15a98 <initSyncTracker+0xf0>)
		bleSyncTracker.refIndexSync = tempMeas.refIndex;
   15a34:	9b01      	ldr	r3, [sp, #4]
		bleSyncTracker.measStackEnd = fileSize/measSize;
   15a36:	09bf      	lsrs	r7, r7, #6
		bleSyncTracker.refIndexSync = tempMeas.refIndex;
   15a38:	61a3      	str	r3, [r4, #24]
		memcpy(&bleSyncTracker.timeEnd, &tempMeas.measTime,sizeof(bleSyncTracker.timeEnd));
   15a3a:	1ca0      	adds	r0, r4, #2
   15a3c:	2208      	movs	r2, #8
   15a3e:	a903      	add	r1, sp, #12
   15a40:	4b1a      	ldr	r3, [pc, #104]	; (15aac <initSyncTracker+0x104>)
		bleSyncTracker.measStackEnd = fileSize/measSize;
   15a42:	61e7      	str	r7, [r4, #28]
		memcpy(&bleSyncTracker.timeEnd, &tempMeas.measTime,sizeof(bleSyncTracker.timeEnd));
   15a44:	4798      	blx	r3
   15a46:	4f15      	ldr	r7, [pc, #84]	; (15a9c <initSyncTracker+0xf4>)
   15a48:	e7d9      	b.n	159fe <initSyncTracker+0x56>
	sprintf(write_str2,"0:/%s",folderName);
   15a4a:	4e19      	ldr	r6, [pc, #100]	; (15ab0 <initSyncTracker+0x108>)
   15a4c:	002a      	movs	r2, r5
   15a4e:	4919      	ldr	r1, [pc, #100]	; (15ab4 <initSyncTracker+0x10c>)
   15a50:	4b19      	ldr	r3, [pc, #100]	; (15ab8 <initSyncTracker+0x110>)
   15a52:	0030      	movs	r0, r6
   15a54:	4798      	blx	r3
	if (strncmp(write_str1,write_str2,20)!=0){
   15a56:	2214      	movs	r2, #20
   15a58:	0031      	movs	r1, r6
   15a5a:	0020      	movs	r0, r4
   15a5c:	4b17      	ldr	r3, [pc, #92]	; (15abc <initSyncTracker+0x114>)
   15a5e:	4798      	blx	r3
   15a60:	2800      	cmp	r0, #0
   15a62:	d0b2      	beq.n	159ca <initSyncTracker+0x22>
		fdebug1 = f_chdir(write_str2);
   15a64:	0030      	movs	r0, r6
   15a66:	4c16      	ldr	r4, [pc, #88]	; (15ac0 <initSyncTracker+0x118>)
   15a68:	47a0      	blx	r4
		}else if(fdebug1==FR_NO_PATH){
   15a6a:	2805      	cmp	r0, #5
   15a6c:	d1ad      	bne.n	159ca <initSyncTracker+0x22>
			fdebug1 = f_chdir("0:/");
   15a6e:	4815      	ldr	r0, [pc, #84]	; (15ac4 <initSyncTracker+0x11c>)
   15a70:	47a0      	blx	r4
			fdebug1 = f_mkdir(folderName);
   15a72:	0028      	movs	r0, r5
   15a74:	4b14      	ldr	r3, [pc, #80]	; (15ac8 <initSyncTracker+0x120>)
   15a76:	4798      	blx	r3
			fdebug1 = f_chdir(write_str2);
   15a78:	0030      	movs	r0, r6
   15a7a:	47a0      	blx	r4
   15a7c:	e7a5      	b.n	159ca <initSyncTracker+0x22>
   15a7e:	46c0      	nop			; (mov r8, r8)
   15a80:	0002e250 	.word	0x0002e250
   15a84:	fffffd94 	.word	0xfffffd94
   15a88:	20002b78 	.word	0x20002b78
   15a8c:	0000de19 	.word	0x0000de19
   15a90:	0002e7f0 	.word	0x0002e7f0
   15a94:	0000cc3d 	.word	0x0000cc3d
   15a98:	20004388 	.word	0x20004388
   15a9c:	00028a1d 	.word	0x00028a1d
   15aa0:	0000d8d5 	.word	0x0000d8d5
   15aa4:	0000e06d 	.word	0x0000e06d
   15aa8:	0000d2c9 	.word	0x0000d2c9
   15aac:	00028999 	.word	0x00028999
   15ab0:	200041dc 	.word	0x200041dc
   15ab4:	0002dee0 	.word	0x0002dee0
   15ab8:	00028ab1 	.word	0x00028ab1
   15abc:	00028c81 	.word	0x00028c81
   15ac0:	0000da29 	.word	0x0000da29
   15ac4:	0002dee8 	.word	0x0002dee8
   15ac8:	0000e24d 	.word	0x0000e24d

00015acc <save_measurement>:
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
   15acc:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ace:	4645      	mov	r5, r8
   15ad0:	46de      	mov	lr, fp
   15ad2:	4657      	mov	r7, sl
   15ad4:	464e      	mov	r6, r9
   15ad6:	b5e0      	push	{r5, r6, r7, lr}
	if (SD_WriteLockout){
   15ad8:	4b7b      	ldr	r3, [pc, #492]	; (15cc8 <save_measurement+0x1fc>)
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
   15ada:	4c7c      	ldr	r4, [pc, #496]	; (15ccc <save_measurement+0x200>)
	if (SD_WriteLockout){
   15adc:	781b      	ldrb	r3, [r3, #0]
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
   15ade:	44a5      	add	sp, r4
   15ae0:	0005      	movs	r5, r0
		return FR_DENIED;
   15ae2:	2407      	movs	r4, #7
	if (SD_WriteLockout){
   15ae4:	2b00      	cmp	r3, #0
   15ae6:	d008      	beq.n	15afa <save_measurement+0x2e>
}
   15ae8:	0020      	movs	r0, r4
   15aea:	4b79      	ldr	r3, [pc, #484]	; (15cd0 <save_measurement+0x204>)
   15aec:	449d      	add	sp, r3
   15aee:	bc3c      	pop	{r2, r3, r4, r5}
   15af0:	4690      	mov	r8, r2
   15af2:	4699      	mov	r9, r3
   15af4:	46a2      	mov	sl, r4
   15af6:	46ab      	mov	fp, r5
   15af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15afa:	21c8      	movs	r1, #200	; 0xc8
			strcpy(folderName,"data");
   15afc:	4b75      	ldr	r3, [pc, #468]	; (15cd4 <save_measurement+0x208>)
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15afe:	4e76      	ldr	r6, [pc, #472]	; (15cd8 <save_measurement+0x20c>)
			strcpy(folderName,"data");
   15b00:	681a      	ldr	r2, [r3, #0]
   15b02:	af9f      	add	r7, sp, #636	; 0x27c
   15b04:	929f      	str	r2, [sp, #636]	; 0x27c
   15b06:	791b      	ldrb	r3, [r3, #4]
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15b08:	0049      	lsls	r1, r1, #1
			strcpy(folderName,"data");
   15b0a:	713b      	strb	r3, [r7, #4]
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15b0c:	0030      	movs	r0, r6
   15b0e:	4b73      	ldr	r3, [pc, #460]	; (15cdc <save_measurement+0x210>)
   15b10:	4798      	blx	r3
   15b12:	1e04      	subs	r4, r0, #0
	if(fdebug1!=FR_OK){
   15b14:	d1e8      	bne.n	15ae8 <save_measurement+0x1c>
	sprintf(write_str2,"0:/%s",folderName);
   15b16:	4b72      	ldr	r3, [pc, #456]	; (15ce0 <save_measurement+0x214>)
   15b18:	003a      	movs	r2, r7
   15b1a:	4698      	mov	r8, r3
   15b1c:	0018      	movs	r0, r3
   15b1e:	4b71      	ldr	r3, [pc, #452]	; (15ce4 <save_measurement+0x218>)
   15b20:	4971      	ldr	r1, [pc, #452]	; (15ce8 <save_measurement+0x21c>)
   15b22:	4699      	mov	r9, r3
   15b24:	4798      	blx	r3
	if (strncmp(write_str1,write_str2,20)!=0){
   15b26:	2214      	movs	r2, #20
   15b28:	4641      	mov	r1, r8
   15b2a:	0030      	movs	r0, r6
   15b2c:	4b6f      	ldr	r3, [pc, #444]	; (15cec <save_measurement+0x220>)
   15b2e:	4798      	blx	r3
   15b30:	2800      	cmp	r0, #0
   15b32:	d000      	beq.n	15b36 <save_measurement+0x6a>
   15b34:	e095      	b.n	15c62 <save_measurement+0x196>
	genTimestampString(write_str1, &current_time,  3);
   15b36:	2203      	movs	r2, #3
   15b38:	496d      	ldr	r1, [pc, #436]	; (15cf0 <save_measurement+0x224>)
   15b3a:	0030      	movs	r0, r6
   15b3c:	4b6d      	ldr	r3, [pc, #436]	; (15cf4 <save_measurement+0x228>)
   15b3e:	4798      	blx	r3
	sprintf(filename, "data_%s_SN%04d.csv", write_str1, options.SerialNumber);
   15b40:	4a6d      	ldr	r2, [pc, #436]	; (15cf8 <save_measurement+0x22c>)
   15b42:	4b6e      	ldr	r3, [pc, #440]	; (15cfc <save_measurement+0x230>)
   15b44:	4692      	mov	sl, r2
   15b46:	685b      	ldr	r3, [r3, #4]
   15b48:	0032      	movs	r2, r6
   15b4a:	496d      	ldr	r1, [pc, #436]	; (15d00 <save_measurement+0x234>)
   15b4c:	4650      	mov	r0, sl
   15b4e:	47c8      	blx	r9
	fdebug1 = f_open(&tempFile, filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   15b50:	4b6c      	ldr	r3, [pc, #432]	; (15d04 <save_measurement+0x238>)
   15b52:	2203      	movs	r2, #3
   15b54:	4651      	mov	r1, sl
   15b56:	a816      	add	r0, sp, #88	; 0x58
   15b58:	469b      	mov	fp, r3
   15b5a:	4798      	blx	r3
   15b5c:	1e04      	subs	r4, r0, #0
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
   15b5e:	d174      	bne.n	15c4a <save_measurement+0x17e>
   15b60:	ab12      	add	r3, sp, #72	; 0x48
   15b62:	9310      	str	r3, [sp, #64]	; 0x40
   15b64:	4b68      	ldr	r3, [pc, #416]	; (15d08 <save_measurement+0x23c>)
   15b66:	469a      	mov	sl, r3
	genTimestampString(display_str, &current_time, 1);
   15b68:	2201      	movs	r2, #1
   15b6a:	4961      	ldr	r1, [pc, #388]	; (15cf0 <save_measurement+0x224>)
   15b6c:	4867      	ldr	r0, [pc, #412]	; (15d0c <save_measurement+0x240>)
   15b6e:	4b61      	ldr	r3, [pc, #388]	; (15cf4 <save_measurement+0x228>)
   15b70:	4798      	blx	r3
	gen_err_message(write_str2, meas_inst, 0);
   15b72:	4b67      	ldr	r3, [pc, #412]	; (15d10 <save_measurement+0x244>)
   15b74:	2200      	movs	r2, #0
   15b76:	0029      	movs	r1, r5
   15b78:	4640      	mov	r0, r8
   15b7a:	4798      	blx	r3
	switch (meas_inst->meas_type){
   15b7c:	2328      	movs	r3, #40	; 0x28
   15b7e:	5ceb      	ldrb	r3, [r5, r3]
   15b80:	2b00      	cmp	r3, #0
   15b82:	d100      	bne.n	15b86 <save_measurement+0xba>
   15b84:	e088      	b.n	15c98 <save_measurement+0x1cc>
   15b86:	2b01      	cmp	r3, #1
   15b88:	d000      	beq.n	15b8c <save_measurement+0xc0>
   15b8a:	e07f      	b.n	15c8c <save_measurement+0x1c0>
			strcpy(measTypeStr,"Scan");
   15b8c:	4a61      	ldr	r2, [pc, #388]	; (15d14 <save_measurement+0x248>)
   15b8e:	ab13      	add	r3, sp, #76	; 0x4c
   15b90:	6811      	ldr	r1, [r2, #0]
   15b92:	9113      	str	r1, [sp, #76]	; 0x4c
   15b94:	7912      	ldrb	r2, [r2, #4]
   15b96:	711a      	strb	r2, [r3, #4]
	sprintf(write_str1,"%s,%d,%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%s,%s\r\n",
   15b98:	4641      	mov	r1, r8
   15b9a:	686a      	ldr	r2, [r5, #4]
   15b9c:	4c5e      	ldr	r4, [pc, #376]	; (15d18 <save_measurement+0x24c>)
   15b9e:	9211      	str	r2, [sp, #68]	; 0x44
   15ba0:	930e      	str	r3, [sp, #56]	; 0x38
   15ba2:	6a68      	ldr	r0, [r5, #36]	; 0x24
   15ba4:	910f      	str	r1, [sp, #60]	; 0x3c
   15ba6:	47a0      	blx	r4
   15ba8:	900c      	str	r0, [sp, #48]	; 0x30
   15baa:	910d      	str	r1, [sp, #52]	; 0x34
   15bac:	6a28      	ldr	r0, [r5, #32]
   15bae:	47a0      	blx	r4
   15bb0:	900a      	str	r0, [sp, #40]	; 0x28
   15bb2:	910b      	str	r1, [sp, #44]	; 0x2c
   15bb4:	69e8      	ldr	r0, [r5, #28]
   15bb6:	47a0      	blx	r4
   15bb8:	9008      	str	r0, [sp, #32]
   15bba:	9109      	str	r1, [sp, #36]	; 0x24
   15bbc:	69a8      	ldr	r0, [r5, #24]
   15bbe:	47a0      	blx	r4
   15bc0:	9006      	str	r0, [sp, #24]
   15bc2:	9107      	str	r1, [sp, #28]
   15bc4:	6968      	ldr	r0, [r5, #20]
   15bc6:	47a0      	blx	r4
   15bc8:	9004      	str	r0, [sp, #16]
   15bca:	9105      	str	r1, [sp, #20]
   15bcc:	6928      	ldr	r0, [r5, #16]
   15bce:	47a0      	blx	r4
   15bd0:	9002      	str	r0, [sp, #8]
   15bd2:	9103      	str	r1, [sp, #12]
   15bd4:	6829      	ldr	r1, [r5, #0]
   15bd6:	4a4d      	ldr	r2, [pc, #308]	; (15d0c <save_measurement+0x240>)
   15bd8:	9100      	str	r1, [sp, #0]
   15bda:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15bdc:	494f      	ldr	r1, [pc, #316]	; (15d1c <save_measurement+0x250>)
   15bde:	0030      	movs	r0, r6
   15be0:	47c8      	blx	r9
	fdebug2 = f_lseek(&tempFile, f_size(&tempFile));
   15be2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15be4:	a816      	add	r0, sp, #88	; 0x58
   15be6:	0019      	movs	r1, r3
   15be8:	9311      	str	r3, [sp, #68]	; 0x44
   15bea:	4b4d      	ldr	r3, [pc, #308]	; (15d20 <save_measurement+0x254>)
   15bec:	4698      	mov	r8, r3
   15bee:	4798      	blx	r3
	fdebug3 = f_write(&tempFile, write_str1, strlen(write_str1),  &bytesWritten);
   15bf0:	4b4c      	ldr	r3, [pc, #304]	; (15d24 <save_measurement+0x258>)
   15bf2:	0030      	movs	r0, r6
   15bf4:	4798      	blx	r3
   15bf6:	0031      	movs	r1, r6
   15bf8:	0002      	movs	r2, r0
   15bfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15bfc:	a816      	add	r0, sp, #88	; 0x58
   15bfe:	47d0      	blx	sl
	f_close(&tempFile);
   15c00:	a816      	add	r0, sp, #88	; 0x58
   15c02:	4e49      	ldr	r6, [pc, #292]	; (15d28 <save_measurement+0x25c>)
   15c04:	47b0      	blx	r6
	fdebug1 = f_open(&bufferFile, FILENAME_RAW_DATA_BUFFER, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   15c06:	2203      	movs	r2, #3
   15c08:	4948      	ldr	r1, [pc, #288]	; (15d2c <save_measurement+0x260>)
   15c0a:	0038      	movs	r0, r7
   15c0c:	47d8      	blx	fp
   15c0e:	0004      	movs	r4, r0
	if (fdebug1 == FR_NO_FILE){
   15c10:	2804      	cmp	r0, #4
   15c12:	d047      	beq.n	15ca4 <save_measurement+0x1d8>
	}else if (fdebug1!=FR_OK){
   15c14:	2800      	cmp	r0, #0
   15c16:	d000      	beq.n	15c1a <save_measurement+0x14e>
   15c18:	e766      	b.n	15ae8 <save_measurement+0x1c>
	fdebug2 = f_lseek(&bufferFile, f_size(&bufferFile));
   15c1a:	68f9      	ldr	r1, [r7, #12]
   15c1c:	0038      	movs	r0, r7
   15c1e:	47c0      	blx	r8
	fdebug3 = f_write(&bufferFile, meas_inst, sizeof(*meas_inst),  &bytesWritten);
   15c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15c22:	0029      	movs	r1, r5
   15c24:	2240      	movs	r2, #64	; 0x40
   15c26:	0038      	movs	r0, r7
   15c28:	47d0      	blx	sl
   15c2a:	0004      	movs	r4, r0
	f_close(&bufferFile);
   15c2c:	0038      	movs	r0, r7
   15c2e:	47b0      	blx	r6
	memcpy(&bleSyncTracker.timeEnd,&meas_inst->measTime,sizeof(&bleSyncTracker.timeEnd));
   15c30:	0029      	movs	r1, r5
	bleSyncTracker.measStackEnd++;
   15c32:	483f      	ldr	r0, [pc, #252]	; (15d30 <save_measurement+0x264>)
	memcpy(&bleSyncTracker.timeEnd,&meas_inst->measTime,sizeof(&bleSyncTracker.timeEnd));
   15c34:	3108      	adds	r1, #8
	bleSyncTracker.measStackEnd++;
   15c36:	69c3      	ldr	r3, [r0, #28]
	memcpy(&bleSyncTracker.timeEnd,&meas_inst->measTime,sizeof(&bleSyncTracker.timeEnd));
   15c38:	2204      	movs	r2, #4
	bleSyncTracker.measStackEnd++;
   15c3a:	3301      	adds	r3, #1
   15c3c:	61c3      	str	r3, [r0, #28]
	bleSyncTracker.refIndexEnd = meas_inst->refIndex;
   15c3e:	682b      	ldr	r3, [r5, #0]
   15c40:	6143      	str	r3, [r0, #20]
	memcpy(&bleSyncTracker.timeEnd,&meas_inst->measTime,sizeof(&bleSyncTracker.timeEnd));
   15c42:	4b3c      	ldr	r3, [pc, #240]	; (15d34 <save_measurement+0x268>)
   15c44:	3002      	adds	r0, #2
   15c46:	4798      	blx	r3
	return fdebug3;
   15c48:	e74e      	b.n	15ae8 <save_measurement+0x1c>
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
   15c4a:	2804      	cmp	r0, #4
   15c4c:	d000      	beq.n	15c50 <save_measurement+0x184>
   15c4e:	e74b      	b.n	15ae8 <save_measurement+0x1c>
		fdebug2 = f_open(&tempFile, filename, FA_CREATE_NEW | FA_READ | FA_WRITE);
   15c50:	2207      	movs	r2, #7
   15c52:	4651      	mov	r1, sl
   15c54:	a816      	add	r0, sp, #88	; 0x58
   15c56:	47d8      	blx	fp
   15c58:	1e04      	subs	r4, r0, #0
		if(fdebug2!=FR_OK){
   15c5a:	d026      	beq.n	15caa <save_measurement+0x1de>
			SD_status = fdebug2;
   15c5c:	4b36      	ldr	r3, [pc, #216]	; (15d38 <save_measurement+0x26c>)
   15c5e:	7018      	strb	r0, [r3, #0]
			return fdebug2;
   15c60:	e742      	b.n	15ae8 <save_measurement+0x1c>
		fdebug1 = f_chdir(write_str2);
   15c62:	4b36      	ldr	r3, [pc, #216]	; (15d3c <save_measurement+0x270>)
   15c64:	4640      	mov	r0, r8
   15c66:	469a      	mov	sl, r3
   15c68:	4798      	blx	r3
   15c6a:	1e04      	subs	r4, r0, #0
		if (fdebug1==FR_OK){
   15c6c:	d100      	bne.n	15c70 <save_measurement+0x1a4>
   15c6e:	e762      	b.n	15b36 <save_measurement+0x6a>
		}else if(fdebug1==FR_NO_PATH){
   15c70:	2805      	cmp	r0, #5
   15c72:	d000      	beq.n	15c76 <save_measurement+0x1aa>
   15c74:	e738      	b.n	15ae8 <save_measurement+0x1c>
			fdebug1 = f_chdir("0:/");
   15c76:	4832      	ldr	r0, [pc, #200]	; (15d40 <save_measurement+0x274>)
   15c78:	47d0      	blx	sl
			fdebug1 = f_mkdir(folderName);
   15c7a:	4b32      	ldr	r3, [pc, #200]	; (15d44 <save_measurement+0x278>)
   15c7c:	0038      	movs	r0, r7
   15c7e:	4798      	blx	r3
			fdebug1 = f_chdir(write_str2);
   15c80:	4640      	mov	r0, r8
   15c82:	47d0      	blx	sl
   15c84:	1e04      	subs	r4, r0, #0
	if(fdebug1!=FR_OK){
   15c86:	d100      	bne.n	15c8a <save_measurement+0x1be>
   15c88:	e755      	b.n	15b36 <save_measurement+0x6a>
   15c8a:	e72d      	b.n	15ae8 <save_measurement+0x1c>
			strcpy(measTypeStr,"Unknown");
   15c8c:	ab13      	add	r3, sp, #76	; 0x4c
   15c8e:	0019      	movs	r1, r3
   15c90:	4a2d      	ldr	r2, [pc, #180]	; (15d48 <save_measurement+0x27c>)
   15c92:	ca11      	ldmia	r2!, {r0, r4}
   15c94:	c111      	stmia	r1!, {r0, r4}
			break;
   15c96:	e77f      	b.n	15b98 <save_measurement+0xcc>
			strcpy(measTypeStr,"Regular");
   15c98:	ab13      	add	r3, sp, #76	; 0x4c
   15c9a:	0019      	movs	r1, r3
   15c9c:	4a2b      	ldr	r2, [pc, #172]	; (15d4c <save_measurement+0x280>)
   15c9e:	ca11      	ldmia	r2!, {r0, r4}
   15ca0:	c111      	stmia	r1!, {r0, r4}
			break;
   15ca2:	e779      	b.n	15b98 <save_measurement+0xcc>
		initSyncTracker();
   15ca4:	4b2a      	ldr	r3, [pc, #168]	; (15d50 <save_measurement+0x284>)
   15ca6:	4798      	blx	r3
   15ca8:	e7b7      	b.n	15c1a <save_measurement+0x14e>
		sprintf(write_str2, "Time-Stamp, POSIX Time, Index, Distance (meters), Azimuth (deg), Inclination (deg), Dip (deg), Roll (deg), Temperature (Celsius),  Measurement Type, Error Log\r\n");
   15caa:	22a1      	movs	r2, #161	; 0xa1
   15cac:	4929      	ldr	r1, [pc, #164]	; (15d54 <save_measurement+0x288>)
   15cae:	4640      	mov	r0, r8
   15cb0:	4b20      	ldr	r3, [pc, #128]	; (15d34 <save_measurement+0x268>)
   15cb2:	4798      	blx	r3
			fdebug2 = f_write(&tempFile, write_str2, strlen(write_str2),  &bytesWritten);
   15cb4:	4c14      	ldr	r4, [pc, #80]	; (15d08 <save_measurement+0x23c>)
   15cb6:	ab12      	add	r3, sp, #72	; 0x48
   15cb8:	22a0      	movs	r2, #160	; 0xa0
   15cba:	4641      	mov	r1, r8
   15cbc:	a816      	add	r0, sp, #88	; 0x58
   15cbe:	9310      	str	r3, [sp, #64]	; 0x40
   15cc0:	46a2      	mov	sl, r4
   15cc2:	47a0      	blx	r4
   15cc4:	e750      	b.n	15b68 <save_measurement+0x9c>
   15cc6:	46c0      	nop			; (mov r8, r8)
   15cc8:	20000d50 	.word	0x20000d50
   15ccc:	fffffb5c 	.word	0xfffffb5c
   15cd0:	000004a4 	.word	0x000004a4
   15cd4:	0002e250 	.word	0x0002e250
   15cd8:	20002b78 	.word	0x20002b78
   15cdc:	0000de19 	.word	0x0000de19
   15ce0:	200041dc 	.word	0x200041dc
   15ce4:	00028ab1 	.word	0x00028ab1
   15ce8:	0002dee0 	.word	0x0002dee0
   15cec:	00028c81 	.word	0x00028c81
   15cf0:	20002628 	.word	0x20002628
   15cf4:	0000febd 	.word	0x0000febd
   15cf8:	20002d3c 	.word	0x20002d3c
   15cfc:	20002d20 	.word	0x20002d20
   15d00:	0002e804 	.word	0x0002e804
   15d04:	0000cc3d 	.word	0x0000cc3d
   15d08:	0000d5d5 	.word	0x0000d5d5
   15d0c:	20002da0 	.word	0x20002da0
   15d10:	00011591 	.word	0x00011591
   15d14:	0002e8bc 	.word	0x0002e8bc
   15d18:	0002878d 	.word	0x0002878d
   15d1c:	0002e8d4 	.word	0x0002e8d4
   15d20:	0000e06d 	.word	0x0000e06d
   15d24:	00028c1d 	.word	0x00028c1d
   15d28:	0000d8d5 	.word	0x0000d8d5
   15d2c:	0002e7f0 	.word	0x0002e7f0
   15d30:	20004388 	.word	0x20004388
   15d34:	00028999 	.word	0x00028999
   15d38:	20003d25 	.word	0x20003d25
   15d3c:	0000da29 	.word	0x0000da29
   15d40:	0002dee8 	.word	0x0002dee8
   15d44:	0000e24d 	.word	0x0000e24d
   15d48:	0002e8cc 	.word	0x0002e8cc
   15d4c:	0002e8c4 	.word	0x0002e8c4
   15d50:	000159a9 	.word	0x000159a9
   15d54:	0002e818 	.word	0x0002e818

00015d58 <BLE_update_tracker>:
void BLE_update_tracker(char *strMeas){
   15d58:	b510      	push	{r4, lr}
   15d5a:	0001      	movs	r1, r0
	bleSyncTracker.measStackSync++;
   15d5c:	4804      	ldr	r0, [pc, #16]	; (15d70 <BLE_update_tracker+0x18>)
   15d5e:	6a03      	ldr	r3, [r0, #32]
   15d60:	1c5a      	adds	r2, r3, #1
   15d62:	6202      	str	r2, [r0, #32]
	memcpy(&bleSyncTracker.timeSync, strMeas, 8);
   15d64:	4b03      	ldr	r3, [pc, #12]	; (15d74 <BLE_update_tracker+0x1c>)
   15d66:	300a      	adds	r0, #10
   15d68:	2208      	movs	r2, #8
   15d6a:	4798      	blx	r3
}
   15d6c:	bd10      	pop	{r4, pc}
   15d6e:	46c0      	nop			; (mov r8, r8)
   15d70:	20004388 	.word	0x20004388
   15d74:	00028999 	.word	0x00028999

00015d78 <BLE_adjLastDate_tracker>:
void BLE_adjLastDate_tracker(char *strDate){
   15d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d7a:	46de      	mov	lr, fp
   15d7c:	4657      	mov	r7, sl
   15d7e:	464e      	mov	r6, r9
   15d80:	4645      	mov	r5, r8
   15d82:	b5e0      	push	{r5, r6, r7, lr}
   15d84:	4c3e      	ldr	r4, [pc, #248]	; (15e80 <BLE_adjLastDate_tracker+0x108>)
   15d86:	0001      	movs	r1, r0
   15d88:	44a5      	add	sp, r4
	memcpy(&timeAdj, strDate, sizeof(timeAdj));
   15d8a:	ac03      	add	r4, sp, #12
   15d8c:	4b3d      	ldr	r3, [pc, #244]	; (15e84 <BLE_adjLastDate_tracker+0x10c>)
   15d8e:	2208      	movs	r2, #8
   15d90:	0020      	movs	r0, r4
   15d92:	4798      	blx	r3
	if(timeAdj.year==0000){
   15d94:	8823      	ldrh	r3, [r4, #0]
   15d96:	2b00      	cmp	r3, #0
   15d98:	d10a      	bne.n	15db0 <BLE_adjLastDate_tracker+0x38>
		initSyncTracker();
   15d9a:	4b3b      	ldr	r3, [pc, #236]	; (15e88 <BLE_adjLastDate_tracker+0x110>)
   15d9c:	4798      	blx	r3
}
   15d9e:	239f      	movs	r3, #159	; 0x9f
   15da0:	009b      	lsls	r3, r3, #2
   15da2:	449d      	add	sp, r3
   15da4:	bc3c      	pop	{r2, r3, r4, r5}
   15da6:	4690      	mov	r8, r2
   15da8:	4699      	mov	r9, r3
   15daa:	46a2      	mov	sl, r4
   15dac:	46ab      	mov	fp, r5
   15dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	time_quality_check(&timeAdj);
   15db0:	0020      	movs	r0, r4
   15db2:	4b36      	ldr	r3, [pc, #216]	; (15e8c <BLE_adjLastDate_tracker+0x114>)
   15db4:	4798      	blx	r3
	posixTimeAdj = gen_posix_time(&timeAdj);
   15db6:	4b36      	ldr	r3, [pc, #216]	; (15e90 <BLE_adjLastDate_tracker+0x118>)
   15db8:	0020      	movs	r0, r4
   15dba:	4699      	mov	r9, r3
   15dbc:	4798      	blx	r3
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15dbe:	21c8      	movs	r1, #200	; 0xc8
			strcpy(folderName,"data");
   15dc0:	4b34      	ldr	r3, [pc, #208]	; (15e94 <BLE_adjLastDate_tracker+0x11c>)
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15dc2:	4c35      	ldr	r4, [pc, #212]	; (15e98 <BLE_adjLastDate_tracker+0x120>)
			strcpy(folderName,"data");
   15dc4:	681a      	ldr	r2, [r3, #0]
   15dc6:	ae15      	add	r6, sp, #84	; 0x54
   15dc8:	9215      	str	r2, [sp, #84]	; 0x54
   15dca:	791b      	ldrb	r3, [r3, #4]
	posixTimeAdj = gen_posix_time(&timeAdj);
   15dcc:	4682      	mov	sl, r0
			strcpy(folderName,"data");
   15dce:	7133      	strb	r3, [r6, #4]
	fdebug1 = f_getcwd(write_str1, sizeof(write_str1));
   15dd0:	0049      	lsls	r1, r1, #1
   15dd2:	0020      	movs	r0, r4
   15dd4:	4b31      	ldr	r3, [pc, #196]	; (15e9c <BLE_adjLastDate_tracker+0x124>)
   15dd6:	4798      	blx	r3
	if(fdebug1!=FR_OK){
   15dd8:	2800      	cmp	r0, #0
   15dda:	d033      	beq.n	15e44 <BLE_adjLastDate_tracker+0xcc>
	fdebug1 = f_open(&bufferFile, FILENAME_RAW_DATA_BUFFER, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   15ddc:	2203      	movs	r2, #3
   15dde:	4930      	ldr	r1, [pc, #192]	; (15ea0 <BLE_adjLastDate_tracker+0x128>)
   15de0:	0030      	movs	r0, r6
   15de2:	4b30      	ldr	r3, [pc, #192]	; (15ea4 <BLE_adjLastDate_tracker+0x12c>)
   15de4:	4798      	blx	r3
	if (fdebug1!=FR_OK){
   15de6:	2800      	cmp	r0, #0
   15de8:	d1d9      	bne.n	15d9e <BLE_adjLastDate_tracker+0x26>
	fileSize = f_size(&bufferFile);
   15dea:	68f4      	ldr	r4, [r6, #12]
	nMeas = fileSize/measSize;
   15dec:	09a3      	lsrs	r3, r4, #6
   15dee:	4698      	mov	r8, r3
	for (i=0;i<nMeas;i++){
   15df0:	d042      	beq.n	15e78 <BLE_adjLastDate_tracker+0x100>
   15df2:	4b2d      	ldr	r3, [pc, #180]	; (15ea8 <BLE_adjLastDate_tracker+0x130>)
   15df4:	3c40      	subs	r4, #64	; 0x40
   15df6:	2500      	movs	r5, #0
   15df8:	469b      	mov	fp, r3
   15dfa:	e003      	b.n	15e04 <BLE_adjLastDate_tracker+0x8c>
   15dfc:	9d01      	ldr	r5, [sp, #4]
   15dfe:	3c40      	subs	r4, #64	; 0x40
   15e00:	45a8      	cmp	r8, r5
   15e02:	d039      	beq.n	15e78 <BLE_adjLastDate_tracker+0x100>
		fdebug1 = f_lseek(&bufferFile, fileSize-((i+1)*measSize));
   15e04:	1c6b      	adds	r3, r5, #1
   15e06:	0021      	movs	r1, r4
   15e08:	0030      	movs	r0, r6
   15e0a:	9301      	str	r3, [sp, #4]
   15e0c:	47d8      	blx	fp
		fdebug2 = f_read(&bufferFile, &tempMeas,measSize, &bytesWritten);
   15e0e:	ab02      	add	r3, sp, #8
   15e10:	2240      	movs	r2, #64	; 0x40
   15e12:	a905      	add	r1, sp, #20
   15e14:	0030      	movs	r0, r6
   15e16:	4f25      	ldr	r7, [pc, #148]	; (15eac <BLE_adjLastDate_tracker+0x134>)
   15e18:	47b8      	blx	r7
		posixTimeTemp = gen_posix_time(&tempMeas.measTime);
   15e1a:	a807      	add	r0, sp, #28
   15e1c:	47c8      	blx	r9
		if (posixTimeTemp<posixTimeAdj){
   15e1e:	4582      	cmp	sl, r0
   15e20:	d9ec      	bls.n	15dfc <BLE_adjLastDate_tracker+0x84>
	f_close(&bufferFile);
   15e22:	0030      	movs	r0, r6
   15e24:	4b22      	ldr	r3, [pc, #136]	; (15eb0 <BLE_adjLastDate_tracker+0x138>)
   15e26:	4798      	blx	r3
	if(i==nMeas){
   15e28:	45a8      	cmp	r8, r5
   15e2a:	d0b6      	beq.n	15d9a <BLE_adjLastDate_tracker+0x22>
		bleSyncTracker.measStackSync = nMeas-i;
   15e2c:	4643      	mov	r3, r8
   15e2e:	4821      	ldr	r0, [pc, #132]	; (15eb4 <BLE_adjLastDate_tracker+0x13c>)
   15e30:	1b5d      	subs	r5, r3, r5
		bleSyncTracker.refIndexSync = tempMeas.refIndex;
   15e32:	9b05      	ldr	r3, [sp, #20]
		bleSyncTracker.measStackSync = nMeas-i;
   15e34:	6205      	str	r5, [r0, #32]
		bleSyncTracker.refIndexSync = tempMeas.refIndex;
   15e36:	6183      	str	r3, [r0, #24]
		memcpy(&bleSyncTracker.timeSync, &tempMeas.measTime, sizeof(timeAdj));
   15e38:	2208      	movs	r2, #8
   15e3a:	a907      	add	r1, sp, #28
   15e3c:	4b11      	ldr	r3, [pc, #68]	; (15e84 <BLE_adjLastDate_tracker+0x10c>)
   15e3e:	300a      	adds	r0, #10
   15e40:	4798      	blx	r3
   15e42:	e7ac      	b.n	15d9e <BLE_adjLastDate_tracker+0x26>
	sprintf(write_str2,"0:/%s",folderName);
   15e44:	4d1c      	ldr	r5, [pc, #112]	; (15eb8 <BLE_adjLastDate_tracker+0x140>)
   15e46:	0032      	movs	r2, r6
   15e48:	491c      	ldr	r1, [pc, #112]	; (15ebc <BLE_adjLastDate_tracker+0x144>)
   15e4a:	4b1d      	ldr	r3, [pc, #116]	; (15ec0 <BLE_adjLastDate_tracker+0x148>)
   15e4c:	0028      	movs	r0, r5
   15e4e:	4798      	blx	r3
	if (strncmp(write_str1,write_str2,20)!=0){
   15e50:	2214      	movs	r2, #20
   15e52:	0029      	movs	r1, r5
   15e54:	0020      	movs	r0, r4
   15e56:	4b1b      	ldr	r3, [pc, #108]	; (15ec4 <BLE_adjLastDate_tracker+0x14c>)
   15e58:	4798      	blx	r3
   15e5a:	2800      	cmp	r0, #0
   15e5c:	d0be      	beq.n	15ddc <BLE_adjLastDate_tracker+0x64>
		fdebug1 = f_chdir(write_str2);
   15e5e:	0028      	movs	r0, r5
   15e60:	4c19      	ldr	r4, [pc, #100]	; (15ec8 <BLE_adjLastDate_tracker+0x150>)
   15e62:	47a0      	blx	r4
		}else if(fdebug1==FR_NO_PATH){
   15e64:	2805      	cmp	r0, #5
   15e66:	d1b9      	bne.n	15ddc <BLE_adjLastDate_tracker+0x64>
			fdebug1 = f_chdir("0:/");
   15e68:	4818      	ldr	r0, [pc, #96]	; (15ecc <BLE_adjLastDate_tracker+0x154>)
   15e6a:	47a0      	blx	r4
			fdebug1 = f_mkdir(folderName);
   15e6c:	0030      	movs	r0, r6
   15e6e:	4b18      	ldr	r3, [pc, #96]	; (15ed0 <BLE_adjLastDate_tracker+0x158>)
   15e70:	4798      	blx	r3
			fdebug1 = f_chdir(write_str2);
   15e72:	0028      	movs	r0, r5
   15e74:	47a0      	blx	r4
   15e76:	e7b1      	b.n	15ddc <BLE_adjLastDate_tracker+0x64>
	f_close(&bufferFile);
   15e78:	0030      	movs	r0, r6
   15e7a:	4b0d      	ldr	r3, [pc, #52]	; (15eb0 <BLE_adjLastDate_tracker+0x138>)
   15e7c:	4798      	blx	r3
   15e7e:	e78c      	b.n	15d9a <BLE_adjLastDate_tracker+0x22>
   15e80:	fffffd84 	.word	0xfffffd84
   15e84:	00028999 	.word	0x00028999
   15e88:	000159a9 	.word	0x000159a9
   15e8c:	0000fdd1 	.word	0x0000fdd1
   15e90:	0000fe29 	.word	0x0000fe29
   15e94:	0002e250 	.word	0x0002e250
   15e98:	20002b78 	.word	0x20002b78
   15e9c:	0000de19 	.word	0x0000de19
   15ea0:	0002e7f0 	.word	0x0002e7f0
   15ea4:	0000cc3d 	.word	0x0000cc3d
   15ea8:	0000e06d 	.word	0x0000e06d
   15eac:	0000d2c9 	.word	0x0000d2c9
   15eb0:	0000d8d5 	.word	0x0000d8d5
   15eb4:	20004388 	.word	0x20004388
   15eb8:	200041dc 	.word	0x200041dc
   15ebc:	0002dee0 	.word	0x0002dee0
   15ec0:	00028ab1 	.word	0x00028ab1
   15ec4:	00028c81 	.word	0x00028c81
   15ec8:	0000da29 	.word	0x0000da29
   15ecc:	0002dee8 	.word	0x0002dee8
   15ed0:	0000e24d 	.word	0x0000e24d

00015ed4 <isLaserOn>:
//  Status
volatile bool laserStatus = false; //  Variable to track when laser is turned on


bool isLaserOn(void){
	return laserStatus;
   15ed4:	4b01      	ldr	r3, [pc, #4]	; (15edc <isLaserOn+0x8>)
   15ed6:	7818      	ldrb	r0, [r3, #0]
   15ed8:	b2c0      	uxtb	r0, r0
}
   15eda:	4770      	bx	lr
   15edc:	20000cc1 	.word	0x20000cc1

00015ee0 <laser_start_continuous>:
   15ee0:	2304      	movs	r3, #4

void laser_start_continuous(void){
   15ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ee4:	46c6      	mov	lr, r8
		delay_ms(100);
	}else{
		ioport_set_pin_level(laser_reset, false);
	}

	laserStatus = false;
   15ee6:	2600      	movs	r6, #0
   15ee8:	4698      	mov	r8, r3
   15eea:	4f0e      	ldr	r7, [pc, #56]	; (15f24 <laser_start_continuous+0x44>)
   15eec:	4d0e      	ldr	r5, [pc, #56]	; (15f28 <laser_start_continuous+0x48>)
void laser_start_continuous(void){
   15eee:	b500      	push	{lr}
	delay_ms(100);
   15ef0:	4c0e      	ldr	r4, [pc, #56]	; (15f2c <laser_start_continuous+0x4c>)
   15ef2:	617b      	str	r3, [r7, #20]
   15ef4:	2064      	movs	r0, #100	; 0x64
	laserStatus = false;
   15ef6:	702e      	strb	r6, [r5, #0]
	delay_ms(100);
   15ef8:	47a0      	blx	r4
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   15efa:	4643      	mov	r3, r8
		delay_ms(100);
   15efc:	2064      	movs	r0, #100	; 0x64
   15efe:	61bb      	str	r3, [r7, #24]
   15f00:	47a0      	blx	r4
	laserStatus = false;
   15f02:	702e      	strb	r6, [r5, #0]
	rxBufferLaserClear();
   15f04:	4e0a      	ldr	r6, [pc, #40]	; (15f30 <laser_start_continuous+0x50>)
   15f06:	47b0      	blx	r6
	writeLaser(cmd_beep_off, sizeof(cmd_laser_single));
   15f08:	2105      	movs	r1, #5
   15f0a:	4d0a      	ldr	r5, [pc, #40]	; (15f34 <laser_start_continuous+0x54>)
   15f0c:	480a      	ldr	r0, [pc, #40]	; (15f38 <laser_start_continuous+0x58>)
   15f0e:	47a8      	blx	r5
	delay_ms(100);
   15f10:	2064      	movs	r0, #100	; 0x64
   15f12:	47a0      	blx	r4
	rxBufferLaserClear();
   15f14:	47b0      	blx	r6
	writeLaser(cmd_laser_cont, sizeof(cmd_laser_single));
   15f16:	2105      	movs	r1, #5
   15f18:	4808      	ldr	r0, [pc, #32]	; (15f3c <laser_start_continuous+0x5c>)
   15f1a:	47a8      	blx	r5
}
   15f1c:	bc04      	pop	{r2}
   15f1e:	4690      	mov	r8, r2
   15f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f22:	46c0      	nop			; (mov r8, r8)
   15f24:	40002800 	.word	0x40002800
   15f28:	20000cc1 	.word	0x20000cc1
   15f2c:	0001f509 	.word	0x0001f509
   15f30:	0001c389 	.word	0x0001c389
   15f34:	0001c35d 	.word	0x0001c35d
   15f38:	20000190 	.word	0x20000190
   15f3c:	20000198 	.word	0x20000198

00015f40 <laser_parse_buffer>:
void laser_parse_buffer(struct MEASUREMENT_FULL *meas_inst){
   15f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f42:	4646      	mov	r6, r8
   15f44:	46d6      	mov	lr, sl
   15f46:	464f      	mov	r7, r9
   15f48:	2400      	movs	r4, #0
   15f4a:	b5c0      	push	{r6, r7, lr}
   15f4c:	4d58      	ldr	r5, [pc, #352]	; (160b0 <laser_parse_buffer+0x170>)
   15f4e:	0006      	movs	r6, r0
   15f50:	e003      	b.n	15f5a <laser_parse_buffer+0x1a>
   15f52:	3401      	adds	r4, #1
	for (i=0; i<sizeof(rxBufferLaser); i++){
   15f54:	2c64      	cmp	r4, #100	; 0x64
   15f56:	d100      	bne.n	15f5a <laser_parse_buffer+0x1a>
   15f58:	e070      	b.n	1603c <laser_parse_buffer+0xfc>
		if(rxBufferLaser[i]==0xAA){
   15f5a:	5d2b      	ldrb	r3, [r5, r4]
   15f5c:	2baa      	cmp	r3, #170	; 0xaa
   15f5e:	d1f8      	bne.n	15f52 <laser_parse_buffer+0x12>
	if(meas_inst->readTimeMs > MEASUREMENT_TIMEOUT){//timeout error
   15f60:	4b54      	ldr	r3, [pc, #336]	; (160b4 <laser_parse_buffer+0x174>)
   15f62:	6c72      	ldr	r2, [r6, #68]	; 0x44
   15f64:	429a      	cmp	r2, r3
   15f66:	d860      	bhi.n	1602a <laser_parse_buffer+0xea>
	}else if(rxBufferLaser[AA_index+2]!=0x44){
   15f68:	1ca3      	adds	r3, r4, #2
   15f6a:	5cea      	ldrb	r2, [r5, r3]
   15f6c:	2a44      	cmp	r2, #68	; 0x44
   15f6e:	d14f      	bne.n	16010 <laser_parse_buffer+0xd0>
	}else if (rxBufferLaser[AA_index+3]=='E'){//rangefinder generated error
   15f70:	1ce3      	adds	r3, r4, #3
   15f72:	5cea      	ldrb	r2, [r5, r3]
   15f74:	2a45      	cmp	r2, #69	; 0x45
   15f76:	d06e      	beq.n	16056 <laser_parse_buffer+0x116>
		meas_inst->distRaw = 0;
   15f78:	2200      	movs	r2, #0
			temp1=rxBufferLaser[AA_index+i] & mask;
   15f7a:	270f      	movs	r7, #15
		meas_inst->distRaw = 0;
   15f7c:	4692      	mov	sl, r2
   15f7e:	6432      	str	r2, [r6, #64]	; 0x40
			temp1=rxBufferLaser[AA_index+i] & mask;
   15f80:	5ceb      	ldrb	r3, [r5, r3]
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
   15f82:	484d      	ldr	r0, [pc, #308]	; (160b8 <laser_parse_buffer+0x178>)
			temp1=rxBufferLaser[AA_index+i] & mask;
   15f84:	403b      	ands	r3, r7
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
   15f86:	4358      	muls	r0, r3
   15f88:	4b4c      	ldr	r3, [pc, #304]	; (160bc <laser_parse_buffer+0x17c>)
   15f8a:	4699      	mov	r9, r3
   15f8c:	4798      	blx	r3
   15f8e:	4b4c      	ldr	r3, [pc, #304]	; (160c0 <laser_parse_buffer+0x180>)
   15f90:	4651      	mov	r1, sl
   15f92:	4698      	mov	r8, r3
   15f94:	4798      	blx	r3
   15f96:	4682      	mov	sl, r0
   15f98:	6430      	str	r0, [r6, #64]	; 0x40
			temp1=rxBufferLaser[AA_index+i] & mask;
   15f9a:	1d23      	adds	r3, r4, #4
   15f9c:	5ceb      	ldrb	r3, [r5, r3]
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
   15f9e:	4849      	ldr	r0, [pc, #292]	; (160c4 <laser_parse_buffer+0x184>)
			temp1=rxBufferLaser[AA_index+i] & mask;
   15fa0:	403b      	ands	r3, r7
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
   15fa2:	4358      	muls	r0, r3
   15fa4:	47c8      	blx	r9
   15fa6:	4651      	mov	r1, sl
   15fa8:	47c0      	blx	r8
   15faa:	4682      	mov	sl, r0
   15fac:	6430      	str	r0, [r6, #64]	; 0x40
   15fae:	20fa      	movs	r0, #250	; 0xfa
			temp1=rxBufferLaser[AA_index+i] & mask;
   15fb0:	1d63      	adds	r3, r4, #5
   15fb2:	5ceb      	ldrb	r3, [r5, r3]
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
   15fb4:	0080      	lsls	r0, r0, #2
			temp1=rxBufferLaser[AA_index+i] & mask;
   15fb6:	403b      	ands	r3, r7
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
   15fb8:	4358      	muls	r0, r3
   15fba:	47c8      	blx	r9
   15fbc:	4651      	mov	r1, sl
   15fbe:	47c0      	blx	r8
   15fc0:	4682      	mov	sl, r0
   15fc2:	6430      	str	r0, [r6, #64]	; 0x40
   15fc4:	2064      	movs	r0, #100	; 0x64
			temp1=rxBufferLaser[AA_index+i] & mask;
   15fc6:	1da3      	adds	r3, r4, #6
   15fc8:	5ceb      	ldrb	r3, [r5, r3]
   15fca:	403b      	ands	r3, r7
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
   15fcc:	4358      	muls	r0, r3
   15fce:	47c8      	blx	r9
   15fd0:	4651      	mov	r1, sl
   15fd2:	47c0      	blx	r8
   15fd4:	4682      	mov	sl, r0
   15fd6:	6430      	str	r0, [r6, #64]	; 0x40
			temp1=rxBufferLaser[AA_index+i] & mask;
   15fd8:	1de3      	adds	r3, r4, #7
   15fda:	5ceb      	ldrb	r3, [r5, r3]
   15fdc:	3408      	adds	r4, #8
   15fde:	403b      	ands	r3, r7
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
   15fe0:	0098      	lsls	r0, r3, #2
   15fe2:	18c0      	adds	r0, r0, r3
   15fe4:	0040      	lsls	r0, r0, #1
   15fe6:	47c8      	blx	r9
   15fe8:	4651      	mov	r1, sl
   15fea:	47c0      	blx	r8
   15fec:	4682      	mov	sl, r0
   15fee:	6430      	str	r0, [r6, #64]	; 0x40
			temp1=rxBufferLaser[AA_index+i] & mask;
   15ff0:	5d28      	ldrb	r0, [r5, r4]
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
   15ff2:	4038      	ands	r0, r7
   15ff4:	47c8      	blx	r9
   15ff6:	4651      	mov	r1, sl
   15ff8:	47c0      	blx	r8
		meas_inst->distRaw=meas_inst->distRaw/1000;
   15ffa:	4933      	ldr	r1, [pc, #204]	; (160c8 <laser_parse_buffer+0x188>)
   15ffc:	4b33      	ldr	r3, [pc, #204]	; (160cc <laser_parse_buffer+0x18c>)
   15ffe:	4798      	blx	r3
   16000:	6430      	str	r0, [r6, #64]	; 0x40
	rxBufferLaserClear();
   16002:	4b33      	ldr	r3, [pc, #204]	; (160d0 <laser_parse_buffer+0x190>)
   16004:	4798      	blx	r3
}
   16006:	bc1c      	pop	{r2, r3, r4}
   16008:	4690      	mov	r8, r2
   1600a:	4699      	mov	r9, r3
   1600c:	46a2      	mov	sl, r4
   1600e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		increment_error_count(meas_inst, laser_wrong_message, rxBufferLaser[AA_index+2], 0);
   16010:	5ce8      	ldrb	r0, [r5, r3]
   16012:	4b2a      	ldr	r3, [pc, #168]	; (160bc <laser_parse_buffer+0x17c>)
   16014:	b2c0      	uxtb	r0, r0
   16016:	4798      	blx	r3
   16018:	2400      	movs	r4, #0
   1601a:	1c02      	adds	r2, r0, #0
   1601c:	1c23      	adds	r3, r4, #0
   1601e:	210d      	movs	r1, #13
   16020:	0030      	movs	r0, r6
   16022:	4d2c      	ldr	r5, [pc, #176]	; (160d4 <laser_parse_buffer+0x194>)
   16024:	47a8      	blx	r5
		meas_inst->distRaw = 0;	
   16026:	6434      	str	r4, [r6, #64]	; 0x40
   16028:	e7eb      	b.n	16002 <laser_parse_buffer+0xc2>
		increment_error_count(meas_inst, laser_response_timeout, MEASUREMENT_TIMEOUT, 0);
   1602a:	2400      	movs	r4, #0
   1602c:	4a2a      	ldr	r2, [pc, #168]	; (160d8 <laser_parse_buffer+0x198>)
   1602e:	1c23      	adds	r3, r4, #0
   16030:	210b      	movs	r1, #11
   16032:	0030      	movs	r0, r6
   16034:	4d27      	ldr	r5, [pc, #156]	; (160d4 <laser_parse_buffer+0x194>)
   16036:	47a8      	blx	r5
		meas_inst->distRaw = 0;
   16038:	6434      	str	r4, [r6, #64]	; 0x40
   1603a:	e7e2      	b.n	16002 <laser_parse_buffer+0xc2>
	if(meas_inst->readTimeMs > MEASUREMENT_TIMEOUT){//timeout error
   1603c:	4b1d      	ldr	r3, [pc, #116]	; (160b4 <laser_parse_buffer+0x174>)
   1603e:	6c72      	ldr	r2, [r6, #68]	; 0x44
   16040:	429a      	cmp	r2, r3
   16042:	d8f2      	bhi.n	1602a <laser_parse_buffer+0xea>
		increment_error_count(meas_inst, laser_pattern_error, 0, 0);
   16044:	2400      	movs	r4, #0
   16046:	210a      	movs	r1, #10
   16048:	1c23      	adds	r3, r4, #0
   1604a:	1c22      	adds	r2, r4, #0
   1604c:	0030      	movs	r0, r6
   1604e:	4d21      	ldr	r5, [pc, #132]	; (160d4 <laser_parse_buffer+0x194>)
   16050:	47a8      	blx	r5
		meas_inst->distRaw = 0;
   16052:	6434      	str	r4, [r6, #64]	; 0x40
   16054:	e7d5      	b.n	16002 <laser_parse_buffer+0xc2>
			temp1 = rxBufferLaser[AA_index+i] & mask;
   16056:	1da3      	adds	r3, r4, #6
   16058:	5ce9      	ldrb	r1, [r5, r3]
   1605a:	1de3      	adds	r3, r4, #7
   1605c:	5cea      	ldrb	r2, [r5, r3]
   1605e:	230f      	movs	r3, #15
   16060:	401a      	ands	r2, r3
			temp_err = temp_err + temp1*mult;
   16062:	0090      	lsls	r0, r2, #2
   16064:	1880      	adds	r0, r0, r2
   16066:	2264      	movs	r2, #100	; 0x64
			temp1 = rxBufferLaser[AA_index+i] & mask;
   16068:	4019      	ands	r1, r3
			temp_err = temp_err + temp1*mult;
   1606a:	434a      	muls	r2, r1
   1606c:	0040      	lsls	r0, r0, #1
			temp1 = rxBufferLaser[AA_index+i] & mask;
   1606e:	3408      	adds	r4, #8
			temp_err = temp_err + temp1*mult;
   16070:	1880      	adds	r0, r0, r2
			temp1 = rxBufferLaser[AA_index+i] & mask;
   16072:	5d2a      	ldrb	r2, [r5, r4]
   16074:	4013      	ands	r3, r2
			temp_err = temp_err + temp1*mult;
   16076:	1818      	adds	r0, r3, r0
		switch (temp_err){
   16078:	28ff      	cmp	r0, #255	; 0xff
   1607a:	d013      	beq.n	160a4 <laser_parse_buffer+0x164>
   1607c:	2280      	movs	r2, #128	; 0x80
   1607e:	0052      	lsls	r2, r2, #1
   16080:	4290      	cmp	r0, r2
   16082:	d012      	beq.n	160aa <laser_parse_buffer+0x16a>
   16084:	28cc      	cmp	r0, #204	; 0xcc
   16086:	d00a      	beq.n	1609e <laser_parse_buffer+0x15e>
				data1 = temp_err;
   16088:	4b0c      	ldr	r3, [pc, #48]	; (160bc <laser_parse_buffer+0x17c>)
   1608a:	4798      	blx	r3
				tempErrCode = laser_unknown;
   1608c:	210c      	movs	r1, #12
				data1 = temp_err;
   1608e:	1c02      	adds	r2, r0, #0
		increment_error_count(meas_inst, tempErrCode,data1, 0);
   16090:	2400      	movs	r4, #0
   16092:	0030      	movs	r0, r6
   16094:	1c23      	adds	r3, r4, #0
   16096:	4d0f      	ldr	r5, [pc, #60]	; (160d4 <laser_parse_buffer+0x194>)
   16098:	47a8      	blx	r5
		meas_inst->distRaw = 0;
   1609a:	6434      	str	r4, [r6, #64]	; 0x40
   1609c:	e7b1      	b.n	16002 <laser_parse_buffer+0xc2>
		float data1 = 0;
   1609e:	2200      	movs	r2, #0
				tempErrCode = laser_calc_err;
   160a0:	2107      	movs	r1, #7
   160a2:	e7f5      	b.n	16090 <laser_parse_buffer+0x150>
		float data1 = 0;
   160a4:	2200      	movs	r2, #0
				tempErrCode = laser_weak_signal;
   160a6:	2108      	movs	r1, #8
   160a8:	e7f2      	b.n	16090 <laser_parse_buffer+0x150>
		float data1 = 0;
   160aa:	2200      	movs	r2, #0
				tempErrCode = laser_strong_signal;
   160ac:	2109      	movs	r1, #9
				break;
   160ae:	e7ef      	b.n	16090 <laser_parse_buffer+0x150>
   160b0:	20005280 	.word	0x20005280
   160b4:	00001388 	.word	0x00001388
   160b8:	000186a0 	.word	0x000186a0
   160bc:	00026bb1 	.word	0x00026bb1
   160c0:	00025e55 	.word	0x00025e55
   160c4:	00002710 	.word	0x00002710
   160c8:	447a0000 	.word	0x447a0000
   160cc:	00026179 	.word	0x00026179
   160d0:	0001c389 	.word	0x0001c389
   160d4:	00011e29 	.word	0x00011e29
   160d8:	459c4000 	.word	0x459c4000

000160dc <rangefinder_on_off>:
void rangefinder_on_off(bool on_off){
   160dc:	b510      	push	{r4, lr}
   160de:	2204      	movs	r2, #4
   160e0:	4b06      	ldr	r3, [pc, #24]	; (160fc <rangefinder_on_off+0x20>)
	if (on_off){
   160e2:	2800      	cmp	r0, #0
   160e4:	d104      	bne.n	160f0 <rangefinder_on_off+0x14>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   160e6:	615a      	str	r2, [r3, #20]
	laserStatus = false;
   160e8:	2200      	movs	r2, #0
   160ea:	4b05      	ldr	r3, [pc, #20]	; (16100 <rangefinder_on_off+0x24>)
   160ec:	701a      	strb	r2, [r3, #0]

}
   160ee:	bd10      	pop	{r4, pc}
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   160f0:	619a      	str	r2, [r3, #24]
		delay_ms(100);
   160f2:	2064      	movs	r0, #100	; 0x64
   160f4:	4b03      	ldr	r3, [pc, #12]	; (16104 <rangefinder_on_off+0x28>)
   160f6:	4798      	blx	r3
   160f8:	e7f6      	b.n	160e8 <rangefinder_on_off+0xc>
   160fa:	46c0      	nop			; (mov r8, r8)
   160fc:	40002800 	.word	0x40002800
   16100:	20000cc1 	.word	0x20000cc1
   16104:	0001f509 	.word	0x0001f509

00016108 <laser_on_off>:


void laser_on_off(bool on_off){
   16108:	b510      	push	{r4, lr}
	//write_complete = false;
	if(on_off){
		writeLaser(cmd_laser_on, sizeof(cmd_laser_on));
   1610a:	2105      	movs	r1, #5
void laser_on_off(bool on_off){
   1610c:	1e04      	subs	r4, r0, #0
	if(on_off){
   1610e:	d105      	bne.n	1611c <laser_on_off+0x14>
		//while(!isLaserTransmitComplete());
		laserStatus = true;
		buzzOn(tone2, 100);
	}else{
		writeLaser(cmd_laser_off, sizeof(cmd_laser_off));
   16110:	4b08      	ldr	r3, [pc, #32]	; (16134 <laser_on_off+0x2c>)
   16112:	4809      	ldr	r0, [pc, #36]	; (16138 <laser_on_off+0x30>)
   16114:	4798      	blx	r3
		//usart_write_buffer_job(&usart_laser, cmd_laser_off, 5);
		//while(!isLaserTransmitComplete());
		laserStatus = false;
   16116:	4b09      	ldr	r3, [pc, #36]	; (1613c <laser_on_off+0x34>)
   16118:	701c      	strb	r4, [r3, #0]
	}
	
}
   1611a:	bd10      	pop	{r4, pc}
		writeLaser(cmd_laser_on, sizeof(cmd_laser_on));
   1611c:	4b05      	ldr	r3, [pc, #20]	; (16134 <laser_on_off+0x2c>)
   1611e:	4808      	ldr	r0, [pc, #32]	; (16140 <laser_on_off+0x38>)
   16120:	4798      	blx	r3
		laserStatus = true;
   16122:	2201      	movs	r2, #1
   16124:	4b05      	ldr	r3, [pc, #20]	; (1613c <laser_on_off+0x34>)
		buzzOn(tone2, 100);
   16126:	2164      	movs	r1, #100	; 0x64
		laserStatus = true;
   16128:	701a      	strb	r2, [r3, #0]
		buzzOn(tone2, 100);
   1612a:	4806      	ldr	r0, [pc, #24]	; (16144 <laser_on_off+0x3c>)
   1612c:	4b06      	ldr	r3, [pc, #24]	; (16148 <laser_on_off+0x40>)
   1612e:	4798      	blx	r3
   16130:	e7f3      	b.n	1611a <laser_on_off+0x12>
   16132:	46c0      	nop			; (mov r8, r8)
   16134:	0001c35d 	.word	0x0001c35d
   16138:	200001a0 	.word	0x200001a0
   1613c:	20000cc1 	.word	0x20000cc1
   16140:	200001a8 	.word	0x200001a8
   16144:	00000f6f 	.word	0x00000f6f
   16148:	0000f8a9 	.word	0x0000f8a9

0001614c <read_accel>:




void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
   1614c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1614e:	46de      	mov	lr, fp
   16150:	4657      	mov	r7, sl
   16152:	464e      	mov	r6, r9
   16154:	4645      	mov	r5, r8
   16156:	b5e0      	push	{r5, r6, r7, lr}
   16158:	0007      	movs	r7, r0
	float tempV[3];
	uint8_t i;
	
	//select acc1 chip
	// Assumes SPI already setup for sensors
	spi_select_slave(&spi_main, sensor, true);
   1615a:	4c3a      	ldr	r4, [pc, #232]	; (16244 <read_accel+0xf8>)
void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
   1615c:	b083      	sub	sp, #12


	//Send Read X command
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, length);
   1615e:	ad01      	add	r5, sp, #4
void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
   16160:	4689      	mov	r9, r1
	spi_select_slave(&spi_main, sensor, true);
   16162:	2201      	movs	r2, #1
   16164:	0001      	movs	r1, r0
   16166:	4b38      	ldr	r3, [pc, #224]	; (16248 <read_accel+0xfc>)
   16168:	0020      	movs	r0, r4
   1616a:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, length);
   1616c:	4e37      	ldr	r6, [pc, #220]	; (1624c <read_accel+0x100>)
   1616e:	002a      	movs	r2, r5
   16170:	2304      	movs	r3, #4
   16172:	4937      	ldr	r1, [pc, #220]	; (16250 <read_accel+0x104>)
   16174:	0020      	movs	r0, r4
   16176:	47b0      	blx	r6
	spi_select_slave(&spi_main, sensor, false);
   16178:	0039      	movs	r1, r7
   1617a:	2200      	movs	r2, #0
   1617c:	0020      	movs	r0, r4
   1617e:	4b32      	ldr	r3, [pc, #200]	; (16248 <read_accel+0xfc>)
   16180:	4798      	blx	r3
	//Send Read Y command, Read X
	spi_select_slave(&spi_main, sensor, true);
   16182:	0039      	movs	r1, r7
   16184:	2201      	movs	r2, #1
   16186:	0020      	movs	r0, r4
   16188:	4b2f      	ldr	r3, [pc, #188]	; (16248 <read_accel+0xfc>)
   1618a:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_y, read_buffer, length);
   1618c:	002a      	movs	r2, r5
   1618e:	2304      	movs	r3, #4
   16190:	4930      	ldr	r1, [pc, #192]	; (16254 <read_accel+0x108>)
   16192:	0020      	movs	r0, r4
   16194:	47b0      	blx	r6
	spi_select_slave(&spi_main, sensor, false);
   16196:	0039      	movs	r1, r7
   16198:	2200      	movs	r2, #0
   1619a:	0020      	movs	r0, r4
   1619c:	4b2a      	ldr	r3, [pc, #168]	; (16248 <read_accel+0xfc>)
   1619e:	4798      	blx	r3

float parse_acc_data(uint8_t buffer[4]){
	float result=0;
	int16_t var16;
	var16= buffer[1];
	var16=var16<<8;
   161a0:	786b      	ldrb	r3, [r5, #1]
	var16=var16+buffer[2];
   161a2:	78a8      	ldrb	r0, [r5, #2]
	var16=var16<<8;
   161a4:	021b      	lsls	r3, r3, #8
	var16=var16+buffer[2];
   161a6:	18c0      	adds	r0, r0, r3
	result=var16;
   161a8:	4b2b      	ldr	r3, [pc, #172]	; (16258 <read_accel+0x10c>)
   161aa:	b200      	sxth	r0, r0
   161ac:	469a      	mov	sl, r3
   161ae:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, length);
   161b0:	46b0      	mov	r8, r6
	spi_select_slave(&spi_main, sensor, true);
   161b2:	0039      	movs	r1, r7
	result=var16;
   161b4:	1c06      	adds	r6, r0, #0
	spi_select_slave(&spi_main, sensor, true);
   161b6:	2201      	movs	r2, #1
   161b8:	0020      	movs	r0, r4
   161ba:	4b23      	ldr	r3, [pc, #140]	; (16248 <read_accel+0xfc>)
   161bc:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_z, read_buffer, length);
   161be:	002a      	movs	r2, r5
   161c0:	2304      	movs	r3, #4
   161c2:	4926      	ldr	r1, [pc, #152]	; (1625c <read_accel+0x110>)
   161c4:	0020      	movs	r0, r4
   161c6:	47c0      	blx	r8
	spi_select_slave(&spi_main, sensor, false);
   161c8:	0039      	movs	r1, r7
   161ca:	2200      	movs	r2, #0
   161cc:	0020      	movs	r0, r4
   161ce:	4b1e      	ldr	r3, [pc, #120]	; (16248 <read_accel+0xfc>)
   161d0:	4798      	blx	r3
	var16=var16<<8;
   161d2:	786b      	ldrb	r3, [r5, #1]
	var16=var16+buffer[2];
   161d4:	78a8      	ldrb	r0, [r5, #2]
	var16=var16<<8;
   161d6:	021b      	lsls	r3, r3, #8
	var16=var16+buffer[2];
   161d8:	18c0      	adds	r0, r0, r3
	result=var16;
   161da:	b200      	sxth	r0, r0
   161dc:	47d0      	blx	sl
	spi_select_slave(&spi_main, sensor, true);
   161de:	0039      	movs	r1, r7
	result=var16;
   161e0:	4683      	mov	fp, r0
	spi_select_slave(&spi_main, sensor, true);
   161e2:	2201      	movs	r2, #1
   161e4:	0020      	movs	r0, r4
   161e6:	4b18      	ldr	r3, [pc, #96]	; (16248 <read_accel+0xfc>)
   161e8:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_status, read_buffer, length);
   161ea:	002a      	movs	r2, r5
   161ec:	2304      	movs	r3, #4
   161ee:	491c      	ldr	r1, [pc, #112]	; (16260 <read_accel+0x114>)
   161f0:	0020      	movs	r0, r4
   161f2:	47c0      	blx	r8
	spi_select_slave(&spi_main, sensor, false);
   161f4:	2200      	movs	r2, #0
   161f6:	0039      	movs	r1, r7
   161f8:	0020      	movs	r0, r4
   161fa:	4b13      	ldr	r3, [pc, #76]	; (16248 <read_accel+0xfc>)
   161fc:	4798      	blx	r3
	var16=var16<<8;
   161fe:	786b      	ldrb	r3, [r5, #1]
	var16=var16+buffer[2];
   16200:	78a8      	ldrb	r0, [r5, #2]
	var16=var16<<8;
   16202:	021b      	lsls	r3, r3, #8
	var16=var16+buffer[2];
   16204:	18c0      	adds	r0, r0, r3
	result=var16;
   16206:	b200      	sxth	r0, r0
   16208:	47d0      	blx	sl
		tempV[i] = tempV[i]/a_coarse_gain;
   1620a:	4d16      	ldr	r5, [pc, #88]	; (16264 <read_accel+0x118>)
   1620c:	4916      	ldr	r1, [pc, #88]	; (16268 <read_accel+0x11c>)
   1620e:	47a8      	blx	r5
   16210:	4915      	ldr	r1, [pc, #84]	; (16268 <read_accel+0x11c>)
   16212:	1c04      	adds	r4, r0, #0
   16214:	4658      	mov	r0, fp
   16216:	47a8      	blx	r5
	vector[0] = tempV[1];
   16218:	464b      	mov	r3, r9
		tempV[i] = tempV[i]/a_coarse_gain;
   1621a:	4913      	ldr	r1, [pc, #76]	; (16268 <read_accel+0x11c>)
	vector[0] = tempV[1];
   1621c:	6018      	str	r0, [r3, #0]
		tempV[i] = tempV[i]/a_coarse_gain;
   1621e:	1c30      	adds	r0, r6, #0
   16220:	47a8      	blx	r5
	vector[1] = -1*tempV[0];
   16222:	2380      	movs	r3, #128	; 0x80
   16224:	061b      	lsls	r3, r3, #24
   16226:	469c      	mov	ip, r3
   16228:	464b      	mov	r3, r9
   1622a:	4460      	add	r0, ip
   1622c:	6058      	str	r0, [r3, #4]
	vector[2] = -1*tempV[2];
   1622e:	464b      	mov	r3, r9
   16230:	4464      	add	r4, ip
   16232:	609c      	str	r4, [r3, #8]
}
   16234:	b003      	add	sp, #12
   16236:	bc3c      	pop	{r2, r3, r4, r5}
   16238:	4690      	mov	r8, r2
   1623a:	4699      	mov	r9, r3
   1623c:	46a2      	mov	sl, r4
   1623e:	46ab      	mov	fp, r5
   16240:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16242:	46c0      	nop			; (mov r8, r8)
   16244:	20000e6c 	.word	0x20000e6c
   16248:	0001ed59 	.word	0x0001ed59
   1624c:	0001eee5 	.word	0x0001eee5
   16250:	200001bc 	.word	0x200001bc
   16254:	200001c0 	.word	0x200001c0
   16258:	00026b11 	.word	0x00026b11
   1625c:	200001c4 	.word	0x200001c4
   16260:	200001b8 	.word	0x200001b8
   16264:	00026179 	.word	0x00026179
   16268:	459c4000 	.word	0x459c4000

0001626c <setup_accel>:
	return result;
}


void setup_accel(struct spi_slave_inst *const sensor){
   1626c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1626e:	0006      	movs	r6, r0
	uint8_t read_buffer[4];
	
	//select acc1 chip
	//config_spi(sensors);
	
	spi_select_slave(&spi_main, sensor, true);
   16270:	4c11      	ldr	r4, [pc, #68]	; (162b8 <setup_accel+0x4c>)
void setup_accel(struct spi_slave_inst *const sensor){
   16272:	b083      	sub	sp, #12
	spi_select_slave(&spi_main, sensor, true);
   16274:	4d11      	ldr	r5, [pc, #68]	; (162bc <setup_accel+0x50>)
   16276:	0001      	movs	r1, r0
   16278:	2201      	movs	r2, #1
   1627a:	0020      	movs	r0, r4
   1627c:	47a8      	blx	r5
	//sw reset
	spi_transceive_buffer_wait(&spi_main, sw_reset, read_buffer, 4);
   1627e:	2304      	movs	r3, #4
   16280:	aa01      	add	r2, sp, #4
   16282:	4f0f      	ldr	r7, [pc, #60]	; (162c0 <setup_accel+0x54>)
   16284:	490f      	ldr	r1, [pc, #60]	; (162c4 <setup_accel+0x58>)
   16286:	0020      	movs	r0, r4
   16288:	47b8      	blx	r7
	//toggle CS line
	spi_select_slave(&spi_main, sensor, false);
   1628a:	0031      	movs	r1, r6
   1628c:	2200      	movs	r2, #0
   1628e:	0020      	movs	r0, r4
   16290:	47a8      	blx	r5
	delay_ms(10);
   16292:	4b0d      	ldr	r3, [pc, #52]	; (162c8 <setup_accel+0x5c>)
   16294:	200a      	movs	r0, #10
   16296:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, true);
   16298:	0031      	movs	r1, r6
   1629a:	2201      	movs	r2, #1
   1629c:	0020      	movs	r0, r4
   1629e:	47a8      	blx	r5
	//set mode
	spi_transceive_buffer_wait(&spi_main, set_mode4, read_buffer, 4);
   162a0:	2304      	movs	r3, #4
   162a2:	aa01      	add	r2, sp, #4
   162a4:	4909      	ldr	r1, [pc, #36]	; (162cc <setup_accel+0x60>)
   162a6:	0020      	movs	r0, r4
   162a8:	47b8      	blx	r7
	//toggle CS line
	spi_select_slave(&spi_main, sensor, false);
   162aa:	2200      	movs	r2, #0
   162ac:	0031      	movs	r1, r6
   162ae:	0020      	movs	r0, r4
   162b0:	47a8      	blx	r5
	//config_spi(LCD);
	
}
   162b2:	b003      	add	sp, #12
   162b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   162b6:	46c0      	nop			; (mov r8, r8)
   162b8:	20000e6c 	.word	0x20000e6c
   162bc:	0001ed59 	.word	0x0001ed59
   162c0:	0001eee5 	.word	0x0001eee5
   162c4:	200001cc 	.word	0x200001cc
   162c8:	0001f509 	.word	0x0001f509
   162cc:	200001c8 	.word	0x200001c8

000162d0 <read_mag_double>:



uint8_t read_mag_double( float mag1[3],float mag2[3]){
   162d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   162d2:	4645      	mov	r5, r8
   162d4:	4657      	mov	r7, sl
   162d6:	464e      	mov	r6, r9
   162d8:	46de      	mov	lr, fp
   162da:	b5e0      	push	{r5, r6, r7, lr}
	
	float *vecPtr[2];
	struct spi_slave_inst *slavePtr[2];
	vecPtr[0] = mag1;
	vecPtr[1] = mag2;
	slavePtr[0] = &slave_mag1;
   162dc:	4b61      	ldr	r3, [pc, #388]	; (16464 <read_mag_double+0x194>)
uint8_t read_mag_double( float mag1[3],float mag2[3]){
   162de:	b08b      	sub	sp, #44	; 0x2c
	slavePtr[0] = &slave_mag1;
   162e0:	9302      	str	r3, [sp, #8]
	slavePtr[1] = &slave_mag2;
   162e2:	4b61      	ldr	r3, [pc, #388]	; (16468 <read_mag_double+0x198>)
	
	// Poll XYZ command to address 0x00
	write_buffer[0]=0x00; //poll register
   162e4:	466a      	mov	r2, sp
	slavePtr[1] = &slave_mag2;
   162e6:	9303      	str	r3, [sp, #12]
	write_buffer[0]=0x00; //poll register
   162e8:	2300      	movs	r3, #0
   162ea:	7413      	strb	r3, [r2, #16]
	write_buffer[1]=0x70; //set to poll X,Y,Z	
   162ec:	3370      	adds	r3, #112	; 0x70
   162ee:	7453      	strb	r3, [r2, #17]
   162f0:	4b5e      	ldr	r3, [pc, #376]	; (1646c <read_mag_double+0x19c>)
   162f2:	2400      	movs	r4, #0
   162f4:	4699      	mov	r9, r3
   162f6:	4b5e      	ldr	r3, [pc, #376]	; (16470 <read_mag_double+0x1a0>)
   162f8:	4d5e      	ldr	r5, [pc, #376]	; (16474 <read_mag_double+0x1a4>)
   162fa:	469a      	mov	sl, r3
   162fc:	4b5e      	ldr	r3, [pc, #376]	; (16478 <read_mag_double+0x1a8>)
	vecPtr[0] = mag1;
   162fe:	9000      	str	r0, [sp, #0]
   16300:	4698      	mov	r8, r3
	vecPtr[1] = mag2;
   16302:	9101      	str	r1, [sp, #4]
	for (i=0;i<2;i++){
		// Select Magnetometer 
		spi_select_slave(&spi_main, slavePtr[i], true);
   16304:	2208      	movs	r2, #8
   16306:	466b      	mov	r3, sp
   16308:	189b      	adds	r3, r3, r2
   1630a:	591e      	ldr	r6, [r3, r4]
   1630c:	3a07      	subs	r2, #7
   1630e:	0031      	movs	r1, r6
   16310:	0028      	movs	r0, r5
   16312:	47c8      	blx	r9
		delay_us(1);
   16314:	2001      	movs	r0, #1
   16316:	47d0      	blx	sl
		//Send Send Poll XYZ command to 0x00
		spi_write_buffer_wait(&spi_main, write_buffer, 2);
   16318:	2202      	movs	r2, #2
   1631a:	a904      	add	r1, sp, #16
   1631c:	0028      	movs	r0, r5
   1631e:	47c0      	blx	r8
   16320:	3404      	adds	r4, #4
		spi_select_slave(&spi_main, slavePtr[i], false);
   16322:	2200      	movs	r2, #0
   16324:	0031      	movs	r1, r6
   16326:	0028      	movs	r0, r5
   16328:	47c8      	blx	r9
	for (i=0;i<2;i++){
   1632a:	2c08      	cmp	r4, #8
   1632c:	d1ea      	bne.n	16304 <read_mag_double+0x34>
		
	}
	//  Wait for Data to be ready
	counter1 = 0x00;
	write_buffer[0]=0xB4;
   1632e:	23b4      	movs	r3, #180	; 0xb4
   16330:	466a      	mov	r2, sp
   16332:	7413      	strb	r3, [r2, #16]
   16334:	2300      	movs	r3, #0
	counter1 = 0x00;
   16336:	2400      	movs	r4, #0
	write_buffer[0]=0xB4;
   16338:	469b      	mov	fp, r3
   1633a:	ae07      	add	r6, sp, #28
	//  First poll mag1
	for (i=0;i<2;i++){
		
		data_ready = false;
		while(!data_ready){
			delay_us(20);
   1633c:	2014      	movs	r0, #20
   1633e:	47d0      	blx	sl
			spi_select_slave(&spi_main, slavePtr[i], true);
   16340:	2208      	movs	r2, #8
   16342:	466b      	mov	r3, sp
   16344:	189b      	adds	r3, r3, r2
   16346:	465a      	mov	r2, fp
   16348:	589b      	ldr	r3, [r3, r2]
   1634a:	0028      	movs	r0, r5
   1634c:	4698      	mov	r8, r3
   1634e:	0019      	movs	r1, r3
   16350:	2201      	movs	r2, #1
   16352:	47c8      	blx	r9
			delay_us(1);
   16354:	2001      	movs	r0, #1
   16356:	47d0      	blx	sl
			spi_transceive_buffer_wait(&spi_main, write_buffer, read_buffer, 2);
   16358:	2302      	movs	r3, #2
   1635a:	0032      	movs	r2, r6
   1635c:	a904      	add	r1, sp, #16
   1635e:	0028      	movs	r0, r5
   16360:	4f46      	ldr	r7, [pc, #280]	; (1647c <read_mag_double+0x1ac>)
   16362:	47b8      	blx	r7
			spi_select_slave(&spi_main, slavePtr[i], false);
   16364:	2200      	movs	r2, #0
   16366:	4641      	mov	r1, r8
   16368:	0028      	movs	r0, r5
   1636a:	47c8      	blx	r9
			
			//  Check if data is ready
			if (read_buffer[1] & 0x80){
   1636c:	7873      	ldrb	r3, [r6, #1]
				data_ready = true;
			}
			
			//  Check for time-out
			counter1++;
   1636e:	3401      	adds	r4, #1
   16370:	b2e4      	uxtb	r4, r4
			if (read_buffer[1] & 0x80){
   16372:	2b7f      	cmp	r3, #127	; 0x7f
   16374:	d801      	bhi.n	1637a <read_mag_double+0xaa>
			if (counter1>=0xFF){
   16376:	2cff      	cmp	r4, #255	; 0xff
   16378:	d1e0      	bne.n	1633c <read_mag_double+0x6c>
   1637a:	2304      	movs	r3, #4
   1637c:	469c      	mov	ip, r3
   1637e:	44e3      	add	fp, ip
	for (i=0;i<2;i++){
   16380:	465b      	mov	r3, fp
   16382:	2b08      	cmp	r3, #8
   16384:	d1da      	bne.n	1633c <read_mag_double+0x6c>
			}
		}//  Loop checking for data ready
	}//  Loop for each instrument
	
	//  Read Back Data
	write_buffer[0] = 0xA4;	
   16386:	466a      	mov	r2, sp
   16388:	339c      	adds	r3, #156	; 0x9c
   1638a:	7413      	strb	r3, [r2, #16]
   1638c:	2300      	movs	r3, #0
   1638e:	46a0      	mov	r8, r4
   16390:	001f      	movs	r7, r3
	for (i=0;i<2; i++){
		spi_select_slave(&spi_main, slavePtr[i], true);
   16392:	2208      	movs	r2, #8
   16394:	466b      	mov	r3, sp
   16396:	189b      	adds	r3, r3, r2
   16398:	59db      	ldr	r3, [r3, r7]
   1639a:	3a07      	subs	r2, #7
   1639c:	469b      	mov	fp, r3
   1639e:	0019      	movs	r1, r3
   163a0:	0028      	movs	r0, r5
   163a2:	47c8      	blx	r9
		delay_us(1);		
   163a4:	2001      	movs	r0, #1
   163a6:	47d0      	blx	sl
		spi_transceive_buffer_wait(&spi_main, write_buffer, read_buffer, 10);
   163a8:	230a      	movs	r3, #10
   163aa:	0032      	movs	r2, r6
   163ac:	a904      	add	r1, sp, #16
   163ae:	4c33      	ldr	r4, [pc, #204]	; (1647c <read_mag_double+0x1ac>)
   163b0:	0028      	movs	r0, r5
   163b2:	47a0      	blx	r4
		spi_select_slave(&spi_main, slavePtr[i], false);
   163b4:	2200      	movs	r2, #0
   163b6:	4659      	mov	r1, fp
   163b8:	0028      	movs	r0, r5
   163ba:	47c8      	blx	r9
		
		parse_mag_arr(&read_buffer[1], vecPtr[i]);
   163bc:	466b      	mov	r3, sp
   163be:	59dc      	ldr	r4, [r3, r7]
	uint8_t i;
	int32_t temp;
	
	for (i=0;i<3;i++){
		temp = 0x00;
		if(array[i*3] & 0x80){//negative number
   163c0:	7873      	ldrb	r3, [r6, #1]
   163c2:	b25a      	sxtb	r2, r3
   163c4:	2a00      	cmp	r2, #0
   163c6:	db43      	blt.n	16450 <read_mag_double+0x180>
		temp = 0x00;
   163c8:	2000      	movs	r0, #0
			temp=0xff;
			temp=temp<<8;
		}
		temp=temp+array[i*3];
   163ca:	181b      	adds	r3, r3, r0
		temp=temp<<8;
		temp=temp+array[i*3+1];
   163cc:	78b0      	ldrb	r0, [r6, #2]
		temp=temp<<8;
   163ce:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+1];
   163d0:	18c3      	adds	r3, r0, r3
		temp=temp<<8;
		temp=temp+array[i*3+2];
   163d2:	78f0      	ldrb	r0, [r6, #3]
		temp=temp<<8;
   163d4:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+2];
   163d6:	18c0      	adds	r0, r0, r3
		data[i] = temp;
   163d8:	4b29      	ldr	r3, [pc, #164]	; (16480 <read_mag_double+0x1b0>)
   163da:	4798      	blx	r3
			//  Z axis inverted
			data[i] = -1*data[i];
		}
		
		//  Apply coarse gain		
		data[i] = data[i]/c_coarse_gain;
   163dc:	4b29      	ldr	r3, [pc, #164]	; (16484 <read_mag_double+0x1b4>)
   163de:	492a      	ldr	r1, [pc, #168]	; (16488 <read_mag_double+0x1b8>)
   163e0:	4798      	blx	r3
		if(array[i*3] & 0x80){//negative number
   163e2:	7933      	ldrb	r3, [r6, #4]
		data[i] = data[i]/c_coarse_gain;
   163e4:	6020      	str	r0, [r4, #0]
		if(array[i*3] & 0x80){//negative number
   163e6:	b25a      	sxtb	r2, r3
   163e8:	2a00      	cmp	r2, #0
   163ea:	db37      	blt.n	1645c <read_mag_double+0x18c>
		temp = 0x00;
   163ec:	2000      	movs	r0, #0
		temp=temp+array[i*3];
   163ee:	181b      	adds	r3, r3, r0
		temp=temp+array[i*3+1];
   163f0:	7970      	ldrb	r0, [r6, #5]
		temp=temp<<8;
   163f2:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+1];
   163f4:	18c3      	adds	r3, r0, r3
		temp=temp+array[i*3+2];
   163f6:	79b0      	ldrb	r0, [r6, #6]
		temp=temp<<8;
   163f8:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+2];
   163fa:	18c0      	adds	r0, r0, r3
		data[i] = temp;
   163fc:	4b20      	ldr	r3, [pc, #128]	; (16480 <read_mag_double+0x1b0>)
   163fe:	4798      	blx	r3
		data[i] = data[i]/c_coarse_gain;
   16400:	4b20      	ldr	r3, [pc, #128]	; (16484 <read_mag_double+0x1b4>)
   16402:	4921      	ldr	r1, [pc, #132]	; (16488 <read_mag_double+0x1b8>)
   16404:	4798      	blx	r3
		if(array[i*3] & 0x80){//negative number
   16406:	79f3      	ldrb	r3, [r6, #7]
		data[i] = data[i]/c_coarse_gain;
   16408:	6060      	str	r0, [r4, #4]
		if(array[i*3] & 0x80){//negative number
   1640a:	b25a      	sxtb	r2, r3
   1640c:	2a00      	cmp	r2, #0
   1640e:	db22      	blt.n	16456 <read_mag_double+0x186>
		temp = 0x00;
   16410:	2000      	movs	r0, #0
		temp=temp+array[i*3];
   16412:	181b      	adds	r3, r3, r0
		temp=temp+array[i*3+1];
   16414:	7a30      	ldrb	r0, [r6, #8]
		temp=temp<<8;
   16416:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+1];
   16418:	18c3      	adds	r3, r0, r3
		temp=temp+array[i*3+2];
   1641a:	7a70      	ldrb	r0, [r6, #9]
		temp=temp<<8;
   1641c:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+2];
   1641e:	18c0      	adds	r0, r0, r3
		data[i] = temp;
   16420:	4b17      	ldr	r3, [pc, #92]	; (16480 <read_mag_double+0x1b0>)
   16422:	4798      	blx	r3
			data[i] = -1*data[i];
   16424:	2380      	movs	r3, #128	; 0x80
   16426:	061b      	lsls	r3, r3, #24
   16428:	469c      	mov	ip, r3
		data[i] = data[i]/c_coarse_gain;
   1642a:	4917      	ldr	r1, [pc, #92]	; (16488 <read_mag_double+0x1b8>)
			data[i] = -1*data[i];
   1642c:	4460      	add	r0, ip
		data[i] = data[i]/c_coarse_gain;
   1642e:	4b15      	ldr	r3, [pc, #84]	; (16484 <read_mag_double+0x1b4>)
   16430:	4798      	blx	r3
   16432:	3704      	adds	r7, #4
   16434:	60a0      	str	r0, [r4, #8]
	for (i=0;i<2; i++){
   16436:	2f08      	cmp	r7, #8
   16438:	d1ab      	bne.n	16392 <read_mag_double+0xc2>
   1643a:	4644      	mov	r4, r8
}
   1643c:	4640      	mov	r0, r8
	debug_ct1 = counter1;
   1643e:	4b13      	ldr	r3, [pc, #76]	; (1648c <read_mag_double+0x1bc>)
   16440:	601c      	str	r4, [r3, #0]
}
   16442:	b00b      	add	sp, #44	; 0x2c
   16444:	bc3c      	pop	{r2, r3, r4, r5}
   16446:	4690      	mov	r8, r2
   16448:	4699      	mov	r9, r3
   1644a:	46a2      	mov	sl, r4
   1644c:	46ab      	mov	fp, r5
   1644e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp=temp<<8;
   16450:	20ff      	movs	r0, #255	; 0xff
   16452:	0200      	lsls	r0, r0, #8
   16454:	e7b9      	b.n	163ca <read_mag_double+0xfa>
   16456:	20ff      	movs	r0, #255	; 0xff
   16458:	0200      	lsls	r0, r0, #8
   1645a:	e7da      	b.n	16412 <read_mag_double+0x142>
   1645c:	20ff      	movs	r0, #255	; 0xff
   1645e:	0200      	lsls	r0, r0, #8
   16460:	e7c5      	b.n	163ee <read_mag_double+0x11e>
   16462:	46c0      	nop			; (mov r8, r8)
   16464:	20000e88 	.word	0x20000e88
   16468:	20000e28 	.word	0x20000e28
   1646c:	0001ed59 	.word	0x0001ed59
   16470:	0001f4d9 	.word	0x0001f4d9
   16474:	20000e6c 	.word	0x20000e6c
   16478:	0001ee2d 	.word	0x0001ee2d
   1647c:	0001eee5 	.word	0x0001eee5
   16480:	00026b11 	.word	0x00026b11
   16484:	00026179 	.word	0x00026179
   16488:	461c4000 	.word	0x461c4000
   1648c:	20002b70 	.word	0x20002b70

00016490 <quick_measurement>:
void quick_measurement(struct MEASUREMENT_FULL *meas_inst){
   16490:	b5f0      	push	{r4, r5, r6, r7, lr}
	read_accel(&slave_acc1, meas_inst->a1Raw);
   16492:	0005      	movs	r5, r0
void quick_measurement(struct MEASUREMENT_FULL *meas_inst){
   16494:	46c6      	mov	lr, r8
	read_accel(&slave_acc1, meas_inst->a1Raw);
   16496:	3548      	adds	r5, #72	; 0x48
void quick_measurement(struct MEASUREMENT_FULL *meas_inst){
   16498:	0004      	movs	r4, r0
   1649a:	b500      	push	{lr}
	read_accel(&slave_acc1, meas_inst->a1Raw);
   1649c:	0029      	movs	r1, r5
   1649e:	4e1b      	ldr	r6, [pc, #108]	; (1650c <quick_measurement+0x7c>)
   164a0:	481b      	ldr	r0, [pc, #108]	; (16510 <quick_measurement+0x80>)
   164a2:	47b0      	blx	r6
	read_accel(&slave_acc2, meas_inst->a2Raw);
   164a4:	2354      	movs	r3, #84	; 0x54
   164a6:	4698      	mov	r8, r3
   164a8:	44a0      	add	r8, r4
   164aa:	4641      	mov	r1, r8
   164ac:	4819      	ldr	r0, [pc, #100]	; (16514 <quick_measurement+0x84>)
   164ae:	47b0      	blx	r6
	read_mag_double(meas_inst->m1Raw, meas_inst->m2Raw);
   164b0:	0027      	movs	r7, r4
   164b2:	0026      	movs	r6, r4
   164b4:	3760      	adds	r7, #96	; 0x60
   164b6:	366c      	adds	r6, #108	; 0x6c
   164b8:	4b17      	ldr	r3, [pc, #92]	; (16518 <quick_measurement+0x88>)
   164ba:	0031      	movs	r1, r6
   164bc:	0038      	movs	r0, r7
   164be:	4798      	blx	r3
	cal_apply_cal(meas_inst->a1Raw, meas_inst->a1Cal, &a1_calst);
   164c0:	0021      	movs	r1, r4
   164c2:	0028      	movs	r0, r5
   164c4:	3178      	adds	r1, #120	; 0x78
   164c6:	4d15      	ldr	r5, [pc, #84]	; (1651c <quick_measurement+0x8c>)
   164c8:	4a15      	ldr	r2, [pc, #84]	; (16520 <quick_measurement+0x90>)
   164ca:	47a8      	blx	r5
	cal_apply_cal(meas_inst->a2Raw, meas_inst->a2Cal, &a2_calst);
   164cc:	0021      	movs	r1, r4
   164ce:	4640      	mov	r0, r8
   164d0:	3184      	adds	r1, #132	; 0x84
   164d2:	4a14      	ldr	r2, [pc, #80]	; (16524 <quick_measurement+0x94>)
   164d4:	47a8      	blx	r5
	cal_apply_cal(meas_inst->m1Raw, meas_inst->m1Cal, &m1_calst);
   164d6:	0021      	movs	r1, r4
   164d8:	0038      	movs	r0, r7
   164da:	3190      	adds	r1, #144	; 0x90
   164dc:	4a12      	ldr	r2, [pc, #72]	; (16528 <quick_measurement+0x98>)
   164de:	47a8      	blx	r5
	cal_apply_cal(meas_inst->m2Raw, meas_inst->m2Cal, &m2_calst);
   164e0:	0021      	movs	r1, r4
   164e2:	0030      	movs	r0, r6
   164e4:	319c      	adds	r1, #156	; 0x9c
   164e6:	4a11      	ldr	r2, [pc, #68]	; (1652c <quick_measurement+0x9c>)
   164e8:	47a8      	blx	r5
	calc_orientation(meas_inst);
   164ea:	0020      	movs	r0, r4
   164ec:	4b10      	ldr	r3, [pc, #64]	; (16530 <quick_measurement+0xa0>)
   164ee:	4798      	blx	r3
	meas_inst->refIndex = 0;
   164f0:	2300      	movs	r3, #0
	meas_inst->errCode[0] = 0;
   164f2:	222c      	movs	r2, #44	; 0x2c
	meas_inst->refIndex = 0;
   164f4:	6023      	str	r3, [r4, #0]
	meas_inst->posix_time = 0;
   164f6:	6063      	str	r3, [r4, #4]
	meas_inst->errCode[0] = 0;
   164f8:	54a3      	strb	r3, [r4, r2]
	meas_inst->meas_type = measQuick;
   164fa:	3a2a      	subs	r2, #42	; 0x2a
   164fc:	3328      	adds	r3, #40	; 0x28
   164fe:	54e2      	strb	r2, [r4, r3]
	processMeasurement(meas_inst);
   16500:	0020      	movs	r0, r4
   16502:	4b0c      	ldr	r3, [pc, #48]	; (16534 <quick_measurement+0xa4>)
   16504:	4798      	blx	r3
}
   16506:	bc04      	pop	{r2}
   16508:	4690      	mov	r8, r2
   1650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1650c:	0001614d 	.word	0x0001614d
   16510:	20000e84 	.word	0x20000e84
   16514:	20000e30 	.word	0x20000e30
   16518:	000162d1 	.word	0x000162d1
   1651c:	0001a945 	.word	0x0001a945
   16520:	200052e8 	.word	0x200052e8
   16524:	20005224 	.word	0x20005224
   16528:	200051c8 	.word	0x200051c8
   1652c:	20003cc8 	.word	0x20003cc8
   16530:	00012585 	.word	0x00012585
   16534:	00022e55 	.word	0x00022e55

00016538 <full_measurement>:
		meas_inst->a1Raw[i] = 0;
   16538:	2348      	movs	r3, #72	; 0x48
   1653a:	469c      	mov	ip, r3
void full_measurement(struct MEASUREMENT_FULL *meas_inst, uint8_t shot_delay, enum MEAS_TYPE measType){
   1653c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1653e:	46de      	mov	lr, fp
   16540:	4657      	mov	r7, sl
   16542:	464e      	mov	r6, r9
   16544:	4645      	mov	r5, r8
		meas_inst->a1Raw[i] = 0;
   16546:	4484      	add	ip, r0
   16548:	4663      	mov	r3, ip
void full_measurement(struct MEASUREMENT_FULL *meas_inst, uint8_t shot_delay, enum MEAS_TYPE measType){
   1654a:	b5e0      	push	{r5, r6, r7, lr}
   1654c:	b093      	sub	sp, #76	; 0x4c
   1654e:	0004      	movs	r4, r0
   16550:	4da5      	ldr	r5, [pc, #660]	; (167e8 <full_measurement+0x2b0>)
   16552:	9201      	str	r2, [sp, #4]
   16554:	4660      	mov	r0, ip
   16556:	000e      	movs	r6, r1
   16558:	0017      	movs	r7, r2
   1655a:	2100      	movs	r1, #0
   1655c:	220c      	movs	r2, #12
		meas_inst->a1Raw[i] = 0;
   1655e:	9302      	str	r3, [sp, #8]
   16560:	47a8      	blx	r5
		meas_inst->a2Raw[i] = 0;
   16562:	2354      	movs	r3, #84	; 0x54
   16564:	469c      	mov	ip, r3
   16566:	44a4      	add	ip, r4
   16568:	4663      	mov	r3, ip
   1656a:	220c      	movs	r2, #12
   1656c:	2100      	movs	r1, #0
   1656e:	4660      	mov	r0, ip
   16570:	9303      	str	r3, [sp, #12]
   16572:	47a8      	blx	r5
		meas_inst->m1Raw[i] = 0;
   16574:	2360      	movs	r3, #96	; 0x60
   16576:	469c      	mov	ip, r3
   16578:	44a4      	add	ip, r4
   1657a:	4663      	mov	r3, ip
   1657c:	220c      	movs	r2, #12
   1657e:	2100      	movs	r1, #0
   16580:	4660      	mov	r0, ip
   16582:	9304      	str	r3, [sp, #16]
   16584:	47a8      	blx	r5
		meas_inst->m2Raw[i] = 0;
   16586:	236c      	movs	r3, #108	; 0x6c
   16588:	469c      	mov	ip, r3
   1658a:	44a4      	add	ip, r4
   1658c:	4663      	mov	r3, ip
   1658e:	220c      	movs	r2, #12
   16590:	2100      	movs	r1, #0
   16592:	4660      	mov	r0, ip
   16594:	9305      	str	r3, [sp, #20]
   16596:	47a8      	blx	r5
		meas_inst->errCode[i]=0;
   16598:	2300      	movs	r3, #0
   1659a:	222c      	movs	r2, #44	; 0x2c
   1659c:	54a3      	strb	r3, [r4, r2]
   1659e:	3201      	adds	r2, #1
   165a0:	54a3      	strb	r3, [r4, r2]
	meas_inst->samples = 0;
   165a2:	8563      	strh	r3, [r4, #42]	; 0x2a
	switch (measType){
   165a4:	2f01      	cmp	r7, #1
   165a6:	d000      	beq.n	165aa <full_measurement+0x72>
   165a8:	e0e2      	b.n	16770 <full_measurement+0x238>
	refMs = getCurrentMs(); //  Background clock running at 1000hz
   165aa:	4f90      	ldr	r7, [pc, #576]	; (167ec <full_measurement+0x2b4>)
   165ac:	47b8      	blx	r7
   165ae:	4b90      	ldr	r3, [pc, #576]	; (167f0 <full_measurement+0x2b8>)
   165b0:	4683      	mov	fp, r0
   165b2:	469a      	mov	sl, r3
   165b4:	4b8f      	ldr	r3, [pc, #572]	; (167f4 <full_measurement+0x2bc>)
   165b6:	4e90      	ldr	r6, [pc, #576]	; (167f8 <full_measurement+0x2c0>)
   165b8:	4699      	mov	r9, r3
   165ba:	4d90      	ldr	r5, [pc, #576]	; (167fc <full_measurement+0x2c4>)
		if (meas_inst->readTimeMs > MEASUREMENT_TIMEOUT){
   165bc:	4b90      	ldr	r3, [pc, #576]	; (16800 <full_measurement+0x2c8>)
   165be:	4698      	mov	r8, r3
   165c0:	e004      	b.n	165cc <full_measurement+0x94>
		if (isLaserReceiveComplete()){
   165c2:	4b90      	ldr	r3, [pc, #576]	; (16804 <full_measurement+0x2cc>)
   165c4:	4798      	blx	r3
   165c6:	2800      	cmp	r0, #0
   165c8:	d000      	beq.n	165cc <full_measurement+0x94>
   165ca:	e0c6      	b.n	1675a <full_measurement+0x222>
		read_accel(&slave_acc1,a1temp);
   165cc:	a906      	add	r1, sp, #24
   165ce:	4650      	mov	r0, sl
   165d0:	47b0      	blx	r6
		read_accel(&slave_acc2, a2temp);
   165d2:	a909      	add	r1, sp, #36	; 0x24
   165d4:	4648      	mov	r0, r9
   165d6:	47b0      	blx	r6
		read_mag_double(m1temp, m2temp);
   165d8:	4b8b      	ldr	r3, [pc, #556]	; (16808 <full_measurement+0x2d0>)
   165da:	a90f      	add	r1, sp, #60	; 0x3c
   165dc:	a80c      	add	r0, sp, #48	; 0x30
   165de:	4798      	blx	r3
			meas_inst->a1Raw[i] += a1temp[i];
   165e0:	9906      	ldr	r1, [sp, #24]
   165e2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   165e4:	47a8      	blx	r5
			meas_inst->a2Raw[i] += a2temp[i];
   165e6:	9909      	ldr	r1, [sp, #36]	; 0x24
			meas_inst->a1Raw[i] += a1temp[i];
   165e8:	64a0      	str	r0, [r4, #72]	; 0x48
			meas_inst->a2Raw[i] += a2temp[i];
   165ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
   165ec:	47a8      	blx	r5
			meas_inst->m1Raw[i] += m1temp[i];
   165ee:	990c      	ldr	r1, [sp, #48]	; 0x30
			meas_inst->a2Raw[i] += a2temp[i];
   165f0:	6560      	str	r0, [r4, #84]	; 0x54
			meas_inst->m1Raw[i] += m1temp[i];
   165f2:	6e20      	ldr	r0, [r4, #96]	; 0x60
   165f4:	47a8      	blx	r5
			meas_inst->m2Raw[i] += m2temp[i];
   165f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
			meas_inst->m1Raw[i] += m1temp[i];
   165f8:	6620      	str	r0, [r4, #96]	; 0x60
			meas_inst->m2Raw[i] += m2temp[i];
   165fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   165fc:	47a8      	blx	r5
			meas_inst->a1Raw[i] += a1temp[i];
   165fe:	9907      	ldr	r1, [sp, #28]
			meas_inst->m2Raw[i] += m2temp[i];
   16600:	66e0      	str	r0, [r4, #108]	; 0x6c
			meas_inst->a1Raw[i] += a1temp[i];
   16602:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   16604:	47a8      	blx	r5
			meas_inst->a2Raw[i] += a2temp[i];
   16606:	990a      	ldr	r1, [sp, #40]	; 0x28
			meas_inst->a1Raw[i] += a1temp[i];
   16608:	64e0      	str	r0, [r4, #76]	; 0x4c
			meas_inst->a2Raw[i] += a2temp[i];
   1660a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1660c:	47a8      	blx	r5
			meas_inst->m1Raw[i] += m1temp[i];
   1660e:	990d      	ldr	r1, [sp, #52]	; 0x34
			meas_inst->a2Raw[i] += a2temp[i];
   16610:	65a0      	str	r0, [r4, #88]	; 0x58
			meas_inst->m1Raw[i] += m1temp[i];
   16612:	6e60      	ldr	r0, [r4, #100]	; 0x64
   16614:	47a8      	blx	r5
			meas_inst->m2Raw[i] += m2temp[i];
   16616:	9910      	ldr	r1, [sp, #64]	; 0x40
			meas_inst->m1Raw[i] += m1temp[i];
   16618:	6660      	str	r0, [r4, #100]	; 0x64
			meas_inst->m2Raw[i] += m2temp[i];
   1661a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1661c:	47a8      	blx	r5
			meas_inst->a1Raw[i] += a1temp[i];
   1661e:	9908      	ldr	r1, [sp, #32]
			meas_inst->m2Raw[i] += m2temp[i];
   16620:	6720      	str	r0, [r4, #112]	; 0x70
			meas_inst->a1Raw[i] += a1temp[i];
   16622:	6d20      	ldr	r0, [r4, #80]	; 0x50
   16624:	47a8      	blx	r5
			meas_inst->a2Raw[i] += a2temp[i];
   16626:	990b      	ldr	r1, [sp, #44]	; 0x2c
			meas_inst->a1Raw[i] += a1temp[i];
   16628:	6520      	str	r0, [r4, #80]	; 0x50
			meas_inst->a2Raw[i] += a2temp[i];
   1662a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1662c:	47a8      	blx	r5
			meas_inst->m1Raw[i] += m1temp[i];
   1662e:	990e      	ldr	r1, [sp, #56]	; 0x38
			meas_inst->a2Raw[i] += a2temp[i];
   16630:	65e0      	str	r0, [r4, #92]	; 0x5c
			meas_inst->m1Raw[i] += m1temp[i];
   16632:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   16634:	47a8      	blx	r5
			meas_inst->m2Raw[i] += m2temp[i];
   16636:	9911      	ldr	r1, [sp, #68]	; 0x44
			meas_inst->m1Raw[i] += m1temp[i];
   16638:	66a0      	str	r0, [r4, #104]	; 0x68
			meas_inst->m2Raw[i] += m2temp[i];
   1663a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   1663c:	47a8      	blx	r5
		meas_inst->samples += 1;
   1663e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			meas_inst->m2Raw[i] += m2temp[i];
   16640:	6760      	str	r0, [r4, #116]	; 0x74
		meas_inst->samples += 1;
   16642:	3301      	adds	r3, #1
   16644:	8563      	strh	r3, [r4, #42]	; 0x2a
		meas_inst->readTimeMs = getCurrentMs()-refMs;
   16646:	47b8      	blx	r7
   16648:	465b      	mov	r3, fp
   1664a:	1ac0      	subs	r0, r0, r3
   1664c:	6460      	str	r0, [r4, #68]	; 0x44
		if (meas_inst->readTimeMs > MEASUREMENT_TIMEOUT){
   1664e:	4540      	cmp	r0, r8
   16650:	d9b7      	bls.n	165c2 <full_measurement+0x8a>
	laser_parse_buffer(meas_inst);
   16652:	0020      	movs	r0, r4
   16654:	4b6d      	ldr	r3, [pc, #436]	; (1680c <full_measurement+0x2d4>)
   16656:	4798      	blx	r3
	meas_inst->distMeters = meas_inst->distRaw+dist_calst.dist_offset;
   16658:	4b6d      	ldr	r3, [pc, #436]	; (16810 <full_measurement+0x2d8>)
   1665a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1665c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1665e:	47a8      	blx	r5
   16660:	4b6c      	ldr	r3, [pc, #432]	; (16814 <full_measurement+0x2dc>)
   16662:	6120      	str	r0, [r4, #16]
   16664:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
   16666:	4798      	blx	r3
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
   16668:	4d6b      	ldr	r5, [pc, #428]	; (16818 <full_measurement+0x2e0>)
   1666a:	1c06      	adds	r6, r0, #0
   1666c:	1c01      	adds	r1, r0, #0
   1666e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   16670:	47a8      	blx	r5
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
   16672:	1c31      	adds	r1, r6, #0
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
   16674:	64a0      	str	r0, [r4, #72]	; 0x48
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
   16676:	6d60      	ldr	r0, [r4, #84]	; 0x54
   16678:	47a8      	blx	r5
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
   1667a:	1c31      	adds	r1, r6, #0
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
   1667c:	6560      	str	r0, [r4, #84]	; 0x54
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
   1667e:	6e20      	ldr	r0, [r4, #96]	; 0x60
   16680:	47a8      	blx	r5
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
   16682:	1c31      	adds	r1, r6, #0
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
   16684:	6620      	str	r0, [r4, #96]	; 0x60
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
   16686:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   16688:	47a8      	blx	r5
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
   1668a:	1c31      	adds	r1, r6, #0
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
   1668c:	66e0      	str	r0, [r4, #108]	; 0x6c
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
   1668e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   16690:	47a8      	blx	r5
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
   16692:	1c31      	adds	r1, r6, #0
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
   16694:	64e0      	str	r0, [r4, #76]	; 0x4c
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
   16696:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16698:	47a8      	blx	r5
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
   1669a:	1c31      	adds	r1, r6, #0
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
   1669c:	65a0      	str	r0, [r4, #88]	; 0x58
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
   1669e:	6e60      	ldr	r0, [r4, #100]	; 0x64
   166a0:	47a8      	blx	r5
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
   166a2:	1c31      	adds	r1, r6, #0
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
   166a4:	6660      	str	r0, [r4, #100]	; 0x64
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
   166a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
   166a8:	47a8      	blx	r5
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
   166aa:	1c31      	adds	r1, r6, #0
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
   166ac:	6720      	str	r0, [r4, #112]	; 0x70
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
   166ae:	6d20      	ldr	r0, [r4, #80]	; 0x50
   166b0:	47a8      	blx	r5
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
   166b2:	1c31      	adds	r1, r6, #0
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
   166b4:	6520      	str	r0, [r4, #80]	; 0x50
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
   166b6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   166b8:	47a8      	blx	r5
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
   166ba:	1c31      	adds	r1, r6, #0
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
   166bc:	65e0      	str	r0, [r4, #92]	; 0x5c
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
   166be:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   166c0:	47a8      	blx	r5
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
   166c2:	1c31      	adds	r1, r6, #0
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
   166c4:	66a0      	str	r0, [r4, #104]	; 0x68
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
   166c6:	6f60      	ldr	r0, [r4, #116]	; 0x74
   166c8:	47a8      	blx	r5
	cal_apply_cal(meas_inst->a1Raw, meas_inst->a1Cal, &a1_calst);
   166ca:	0021      	movs	r1, r4
   166cc:	4d53      	ldr	r5, [pc, #332]	; (1681c <full_measurement+0x2e4>)
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
   166ce:	6760      	str	r0, [r4, #116]	; 0x74
	cal_apply_cal(meas_inst->a1Raw, meas_inst->a1Cal, &a1_calst);
   166d0:	4a53      	ldr	r2, [pc, #332]	; (16820 <full_measurement+0x2e8>)
   166d2:	3178      	adds	r1, #120	; 0x78
   166d4:	9802      	ldr	r0, [sp, #8]
   166d6:	47a8      	blx	r5
	cal_apply_cal(meas_inst->a2Raw, meas_inst->a2Cal, &a2_calst);
   166d8:	0021      	movs	r1, r4
   166da:	4a52      	ldr	r2, [pc, #328]	; (16824 <full_measurement+0x2ec>)
   166dc:	3184      	adds	r1, #132	; 0x84
   166de:	9803      	ldr	r0, [sp, #12]
   166e0:	47a8      	blx	r5
	cal_apply_cal(meas_inst->m1Raw, meas_inst->m1Cal, &m1_calst);
   166e2:	0021      	movs	r1, r4
   166e4:	4a50      	ldr	r2, [pc, #320]	; (16828 <full_measurement+0x2f0>)
   166e6:	3190      	adds	r1, #144	; 0x90
   166e8:	9804      	ldr	r0, [sp, #16]
   166ea:	47a8      	blx	r5
	cal_apply_cal(meas_inst->m2Raw, meas_inst->m2Cal, &m2_calst);
   166ec:	0021      	movs	r1, r4
   166ee:	4a4f      	ldr	r2, [pc, #316]	; (1682c <full_measurement+0x2f4>)
   166f0:	319c      	adds	r1, #156	; 0x9c
   166f2:	9805      	ldr	r0, [sp, #20]
   166f4:	47a8      	blx	r5
	calc_orientation(meas_inst);
   166f6:	0020      	movs	r0, r4
   166f8:	4b4d      	ldr	r3, [pc, #308]	; (16830 <full_measurement+0x2f8>)
   166fa:	4798      	blx	r3
	error_check(meas_inst);
   166fc:	0020      	movs	r0, r4
   166fe:	4b4d      	ldr	r3, [pc, #308]	; (16834 <full_measurement+0x2fc>)
   16700:	4798      	blx	r3
	get_time();
   16702:	4b4d      	ldr	r3, [pc, #308]	; (16838 <full_measurement+0x300>)
   16704:	4798      	blx	r3
	memcpy(&meas_inst->measTime, &current_time,sizeof(current_time));
   16706:	0020      	movs	r0, r4
   16708:	4d4c      	ldr	r5, [pc, #304]	; (1683c <full_measurement+0x304>)
   1670a:	2208      	movs	r2, #8
   1670c:	0029      	movs	r1, r5
   1670e:	4b4c      	ldr	r3, [pc, #304]	; (16840 <full_measurement+0x308>)
   16710:	3008      	adds	r0, #8
   16712:	4798      	blx	r3
	meas_inst->posix_time = gen_posix_time(&current_time);// Save POSIX time
   16714:	4b4b      	ldr	r3, [pc, #300]	; (16844 <full_measurement+0x30c>)
   16716:	0028      	movs	r0, r5
   16718:	4798      	blx	r3
	meas_inst->temperatureC = currentTempC;
   1671a:	4b4b      	ldr	r3, [pc, #300]	; (16848 <full_measurement+0x310>)
	meas_inst->meas_type = measType;
   1671c:	9901      	ldr	r1, [sp, #4]
	meas_inst->temperatureC = currentTempC;
   1671e:	681b      	ldr	r3, [r3, #0]
	meas_inst->posix_time = gen_posix_time(&current_time);// Save POSIX time
   16720:	6060      	str	r0, [r4, #4]
	meas_inst->temperatureC = currentTempC;
   16722:	6263      	str	r3, [r4, #36]	; 0x24
	meas_inst->meas_type = measType;
   16724:	2328      	movs	r3, #40	; 0x28
   16726:	54e1      	strb	r1, [r4, r3]
	switch (measType){
   16728:	2901      	cmp	r1, #1
   1672a:	d050      	beq.n	167ce <full_measurement+0x296>
   1672c:	2900      	cmp	r1, #0
   1672e:	d038      	beq.n	167a2 <full_measurement+0x26a>
   16730:	2903      	cmp	r1, #3
   16732:	d108      	bne.n	16746 <full_measurement+0x20e>
			meas_inst->refIndex = 0;
   16734:	2300      	movs	r3, #0
			backlightOn(&options.backlight_setting);
   16736:	4845      	ldr	r0, [pc, #276]	; (1684c <full_measurement+0x314>)
			meas_inst->refIndex = 0;
   16738:	6023      	str	r3, [r4, #0]
			backlightOn(&options.backlight_setting);
   1673a:	4b45      	ldr	r3, [pc, #276]	; (16850 <full_measurement+0x318>)
   1673c:	4798      	blx	r3
			buzzOn(tone3,200);
   1673e:	21c8      	movs	r1, #200	; 0xc8
   16740:	4844      	ldr	r0, [pc, #272]	; (16854 <full_measurement+0x31c>)
   16742:	4b45      	ldr	r3, [pc, #276]	; (16858 <full_measurement+0x320>)
   16744:	4798      	blx	r3
	processMeasurement(meas_inst);
   16746:	0020      	movs	r0, r4
   16748:	4b44      	ldr	r3, [pc, #272]	; (1685c <full_measurement+0x324>)
   1674a:	4798      	blx	r3
}
   1674c:	b013      	add	sp, #76	; 0x4c
   1674e:	bc3c      	pop	{r2, r3, r4, r5}
   16750:	4690      	mov	r8, r2
   16752:	4699      	mov	r9, r3
   16754:	46a2      	mov	sl, r4
   16756:	46ab      	mov	fp, r5
   16758:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp = laserMessageType() ;
   1675a:	4b41      	ldr	r3, [pc, #260]	; (16860 <full_measurement+0x328>)
   1675c:	4798      	blx	r3
			if((temp==CONT_MEASUREMENT)||(temp== SINGLE_MEASUREMENT)){
   1675e:	0003      	movs	r3, r0
   16760:	3b44      	subs	r3, #68	; 0x44
   16762:	b2db      	uxtb	r3, r3
   16764:	2b01      	cmp	r3, #1
   16766:	d800      	bhi.n	1676a <full_measurement+0x232>
   16768:	e773      	b.n	16652 <full_measurement+0x11a>
				rxBufferLaserClear();
   1676a:	4b3e      	ldr	r3, [pc, #248]	; (16864 <full_measurement+0x32c>)
   1676c:	4798      	blx	r3
   1676e:	e725      	b.n	165bc <full_measurement+0x84>
			backlightOff();
   16770:	4b3d      	ldr	r3, [pc, #244]	; (16868 <full_measurement+0x330>)
   16772:	4798      	blx	r3
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
   16774:	2e00      	cmp	r6, #0
   16776:	d00d      	beq.n	16794 <full_measurement+0x25c>
   16778:	4b37      	ldr	r3, [pc, #220]	; (16858 <full_measurement+0x320>)
   1677a:	2500      	movs	r5, #0
   1677c:	4698      	mov	r8, r3
   1677e:	4f3b      	ldr	r7, [pc, #236]	; (1686c <full_measurement+0x334>)
		buzzOn(tone2, 200);
   16780:	21c8      	movs	r1, #200	; 0xc8
   16782:	483b      	ldr	r0, [pc, #236]	; (16870 <full_measurement+0x338>)
   16784:	47c0      	blx	r8
		delay_ms(800);
   16786:	20c8      	movs	r0, #200	; 0xc8
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
   16788:	3501      	adds	r5, #1
		delay_ms(800);
   1678a:	0080      	lsls	r0, r0, #2
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
   1678c:	b2ed      	uxtb	r5, r5
		delay_ms(800);
   1678e:	47b8      	blx	r7
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
   16790:	42ae      	cmp	r6, r5
   16792:	d1f5      	bne.n	16780 <full_measurement+0x248>
			rxBufferLaserClear();
   16794:	4b33      	ldr	r3, [pc, #204]	; (16864 <full_measurement+0x32c>)
   16796:	4798      	blx	r3
			writeLaser(cmd_laser_single, sizeof(cmd_laser_single));
   16798:	2105      	movs	r1, #5
   1679a:	4b36      	ldr	r3, [pc, #216]	; (16874 <full_measurement+0x33c>)
   1679c:	4836      	ldr	r0, [pc, #216]	; (16878 <full_measurement+0x340>)
   1679e:	4798      	blx	r3
   167a0:	e703      	b.n	165aa <full_measurement+0x72>
			meas_inst->refIndex = refIndex;
   167a2:	4a36      	ldr	r2, [pc, #216]	; (1687c <full_measurement+0x344>)
			if (refIndex>REF_INDEX_MAX){
   167a4:	4936      	ldr	r1, [pc, #216]	; (16880 <full_measurement+0x348>)
			meas_inst->refIndex = refIndex;
   167a6:	6813      	ldr	r3, [r2, #0]
   167a8:	6023      	str	r3, [r4, #0]
			refIndex++;
   167aa:	6813      	ldr	r3, [r2, #0]
   167ac:	3301      	adds	r3, #1
			if (refIndex>REF_INDEX_MAX){
   167ae:	428b      	cmp	r3, r1
   167b0:	d900      	bls.n	167b4 <full_measurement+0x27c>
				refIndex = 1;
   167b2:	2301      	movs	r3, #1
   167b4:	6013      	str	r3, [r2, #0]
			backlightOn(&options.backlight_setting);
   167b6:	4825      	ldr	r0, [pc, #148]	; (1684c <full_measurement+0x314>)
   167b8:	4b25      	ldr	r3, [pc, #148]	; (16850 <full_measurement+0x318>)
   167ba:	4798      	blx	r3
			if (meas_inst->errCode[0]==0){
   167bc:	232c      	movs	r3, #44	; 0x2c
   167be:	5ce3      	ldrb	r3, [r4, r3]
				buzzOn(tone3,200);
   167c0:	21c8      	movs	r1, #200	; 0xc8
			if (meas_inst->errCode[0]==0){
   167c2:	2b00      	cmp	r3, #0
   167c4:	d0bc      	beq.n	16740 <full_measurement+0x208>
				buzzOn(tone1,50);
   167c6:	482f      	ldr	r0, [pc, #188]	; (16884 <full_measurement+0x34c>)
   167c8:	4b23      	ldr	r3, [pc, #140]	; (16858 <full_measurement+0x320>)
   167ca:	4798      	blx	r3
   167cc:	e7bb      	b.n	16746 <full_measurement+0x20e>
			meas_inst->refIndex = refIndex;
   167ce:	4b2b      	ldr	r3, [pc, #172]	; (1687c <full_measurement+0x344>)
				buzzOn(tone3,50);
   167d0:	2132      	movs	r1, #50	; 0x32
			meas_inst->refIndex = refIndex;
   167d2:	681b      	ldr	r3, [r3, #0]
   167d4:	6023      	str	r3, [r4, #0]
			if (meas_inst->errCode[0]==0){
   167d6:	232c      	movs	r3, #44	; 0x2c
   167d8:	5ce3      	ldrb	r3, [r4, r3]
   167da:	2b00      	cmp	r3, #0
   167dc:	d0b0      	beq.n	16740 <full_measurement+0x208>
				buzzOn(tone1,50);
   167de:	4829      	ldr	r0, [pc, #164]	; (16884 <full_measurement+0x34c>)
   167e0:	4b1d      	ldr	r3, [pc, #116]	; (16858 <full_measurement+0x320>)
   167e2:	4798      	blx	r3
   167e4:	e7af      	b.n	16746 <full_measurement+0x20e>
   167e6:	46c0      	nop			; (mov r8, r8)
   167e8:	00028a1d 	.word	0x00028a1d
   167ec:	00016df9 	.word	0x00016df9
   167f0:	20000e84 	.word	0x20000e84
   167f4:	20000e30 	.word	0x20000e30
   167f8:	0001614d 	.word	0x0001614d
   167fc:	00025e55 	.word	0x00025e55
   16800:	00001388 	.word	0x00001388
   16804:	0001c37d 	.word	0x0001c37d
   16808:	000162d1 	.word	0x000162d1
   1680c:	00015f41 	.word	0x00015f41
   16810:	20005164 	.word	0x20005164
   16814:	00026b11 	.word	0x00026b11
   16818:	00026179 	.word	0x00026179
   1681c:	0001a945 	.word	0x0001a945
   16820:	200052e8 	.word	0x200052e8
   16824:	20005224 	.word	0x20005224
   16828:	200051c8 	.word	0x200051c8
   1682c:	20003cc8 	.word	0x20003cc8
   16830:	00012585 	.word	0x00012585
   16834:	000117cd 	.word	0x000117cd
   16838:	0000fa61 	.word	0x0000fa61
   1683c:	20002628 	.word	0x20002628
   16840:	00028999 	.word	0x00028999
   16844:	0000fe29 	.word	0x0000fe29
   16848:	20002174 	.word	0x20002174
   1684c:	20002d34 	.word	0x20002d34
   16850:	0000ea59 	.word	0x0000ea59
   16854:	00001194 	.word	0x00001194
   16858:	0000f8a9 	.word	0x0000f8a9
   1685c:	00022e55 	.word	0x00022e55
   16860:	0001c3b5 	.word	0x0001c3b5
   16864:	0001c389 	.word	0x0001c389
   16868:	0000eb51 	.word	0x0000eb51
   1686c:	0001f509 	.word	0x0001f509
   16870:	00000f6f 	.word	0x00000f6f
   16874:	0001c35d 	.word	0x0001c35d
   16878:	200001b0 	.word	0x200001b0
   1687c:	200001d8 	.word	0x200001d8
   16880:	0000270f 	.word	0x0000270f
   16884:	00000c3f 	.word	0x00000c3f

00016888 <setup_mag>:
	}
}



void setup_mag(struct spi_slave_inst *const sensor){
   16888:	b5f0      	push	{r4, r5, r6, r7, lr}
   1688a:	46ce      	mov	lr, r9
   1688c:	4647      	mov	r7, r8
   1688e:	b580      	push	{r7, lr}
	uint8_t write_buffer[7];
	//select sensor
	//config_spi(sensors);
	spi_select_slave(&spi_main, sensor, true);
   16890:	4c31      	ldr	r4, [pc, #196]	; (16958 <setup_mag+0xd0>)
void setup_mag(struct spi_slave_inst *const sensor){
   16892:	b083      	sub	sp, #12
   16894:	0006      	movs	r6, r0
	spi_select_slave(&spi_main, sensor, true);
   16896:	4d31      	ldr	r5, [pc, #196]	; (1695c <setup_mag+0xd4>)
   16898:	0001      	movs	r1, r0
   1689a:	2201      	movs	r2, #1
   1689c:	0020      	movs	r0, r4
   1689e:	47a8      	blx	r5

	//Set cycle count registers
	write_buffer[0]=0x04;//location of first write count register
   168a0:	466a      	mov	r2, sp
   168a2:	2304      	movs	r3, #4
   168a4:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=cycle_count1;
   168a6:	4b2e      	ldr	r3, [pc, #184]	; (16960 <setup_mag+0xd8>)
	write_buffer[2]=cycle_count2;
   168a8:	4669      	mov	r1, sp
	write_buffer[1]=cycle_count1;
   168aa:	781a      	ldrb	r2, [r3, #0]
   168ac:	466b      	mov	r3, sp
   168ae:	705a      	strb	r2, [r3, #1]
	write_buffer[2]=cycle_count2;
   168b0:	4b2c      	ldr	r3, [pc, #176]	; (16964 <setup_mag+0xdc>)
	write_buffer[3]=cycle_count1;
	write_buffer[4]=cycle_count2;
	write_buffer[5]=cycle_count1;
	write_buffer[6]=cycle_count2;
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
   168b2:	4f2d      	ldr	r7, [pc, #180]	; (16968 <setup_mag+0xe0>)
	write_buffer[2]=cycle_count2;
   168b4:	781b      	ldrb	r3, [r3, #0]
	write_buffer[3]=cycle_count1;
   168b6:	70ca      	strb	r2, [r1, #3]
	write_buffer[5]=cycle_count1;
   168b8:	714a      	strb	r2, [r1, #5]
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
   168ba:	0020      	movs	r0, r4
   168bc:	2207      	movs	r2, #7
	write_buffer[2]=cycle_count2;
   168be:	708b      	strb	r3, [r1, #2]
	write_buffer[4]=cycle_count2;
   168c0:	710b      	strb	r3, [r1, #4]
	write_buffer[6]=cycle_count2;
   168c2:	718b      	strb	r3, [r1, #6]
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
   168c4:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
   168c6:	0031      	movs	r1, r6
   168c8:	2200      	movs	r2, #0
   168ca:	0020      	movs	r0, r4
   168cc:	47a8      	blx	r5
	//Turn off continuous read mode
	delay_ms(10);
   168ce:	200a      	movs	r0, #10
   168d0:	4b26      	ldr	r3, [pc, #152]	; (1696c <setup_mag+0xe4>)
   168d2:	4798      	blx	r3
	write_buffer[0]=0x01;//location of CRM register
   168d4:	466a      	mov	r2, sp
   168d6:	2301      	movs	r3, #1
   168d8:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=0x00;
   168da:	2300      	movs	r3, #0
   168dc:	4699      	mov	r9, r3
   168de:	466b      	mov	r3, sp
   168e0:	464a      	mov	r2, r9
	spi_select_slave(&spi_main, sensor, true);
   168e2:	0031      	movs	r1, r6
	write_buffer[1]=0x00;
   168e4:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
   168e6:	0020      	movs	r0, r4
   168e8:	2201      	movs	r2, #1
   168ea:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
   168ec:	4669      	mov	r1, sp
   168ee:	2202      	movs	r2, #2
   168f0:	0020      	movs	r0, r4
   168f2:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
   168f4:	0031      	movs	r1, r6
   168f6:	2200      	movs	r2, #0
   168f8:	0020      	movs	r0, r4
   168fa:	47a8      	blx	r5
	//Set BIST register
	delay_us(1);
   168fc:	4b1c      	ldr	r3, [pc, #112]	; (16970 <setup_mag+0xe8>)
   168fe:	2001      	movs	r0, #1
   16900:	4698      	mov	r8, r3
   16902:	4798      	blx	r3
	write_buffer[0]=0x33;//location of BIST register
   16904:	466a      	mov	r2, sp
   16906:	2333      	movs	r3, #51	; 0x33
   16908:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=0x00;	//default value
   1690a:	466b      	mov	r3, sp
   1690c:	464a      	mov	r2, r9
	spi_select_slave(&spi_main, sensor, true);
   1690e:	0031      	movs	r1, r6
	write_buffer[1]=0x00;	//default value
   16910:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
   16912:	0020      	movs	r0, r4
   16914:	2201      	movs	r2, #1
   16916:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
   16918:	4669      	mov	r1, sp
   1691a:	2202      	movs	r2, #2
   1691c:	0020      	movs	r0, r4
   1691e:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
   16920:	0031      	movs	r1, r6
   16922:	2200      	movs	r2, #0
   16924:	0020      	movs	r0, r4
   16926:	47a8      	blx	r5
	//SET HSHAKe register
	delay_us(1);
   16928:	2001      	movs	r0, #1
   1692a:	47c0      	blx	r8
	write_buffer[0]=0x35;//location of HSHAKE register
   1692c:	466a      	mov	r2, sp
   1692e:	2335      	movs	r3, #53	; 0x35
   16930:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=0x1B;//default value
   16932:	3b1a      	subs	r3, #26
   16934:	7053      	strb	r3, [r2, #1]
	spi_select_slave(&spi_main, sensor, true);
   16936:	0031      	movs	r1, r6
   16938:	2201      	movs	r2, #1
   1693a:	0020      	movs	r0, r4
   1693c:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
   1693e:	4669      	mov	r1, sp
   16940:	2202      	movs	r2, #2
   16942:	0020      	movs	r0, r4
   16944:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
   16946:	2200      	movs	r2, #0
   16948:	0031      	movs	r1, r6
   1694a:	0020      	movs	r0, r4
   1694c:	47a8      	blx	r5
	//config_spi(LCD);
}
   1694e:	b003      	add	sp, #12
   16950:	bc0c      	pop	{r2, r3}
   16952:	4690      	mov	r8, r2
   16954:	4699      	mov	r9, r3
   16956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16958:	20000e6c 	.word	0x20000e6c
   1695c:	0001ed59 	.word	0x0001ed59
   16960:	200001b5 	.word	0x200001b5
   16964:	20000cc0 	.word	0x20000cc0
   16968:	0001ee2d 	.word	0x0001ee2d
   1696c:	0001f509 	.word	0x0001f509
   16970:	0001f4d9 	.word	0x0001f4d9

00016974 <timer_callback_backgroundCounter>:

}

void timer_callback_backgroundCounter(void){
	
	accumulatorMs = accumulatorMs+32000;
   16974:	21fa      	movs	r1, #250	; 0xfa
   16976:	01c9      	lsls	r1, r1, #7
   16978:	468c      	mov	ip, r1
   1697a:	4a02      	ldr	r2, [pc, #8]	; (16984 <timer_callback_backgroundCounter+0x10>)
   1697c:	6813      	ldr	r3, [r2, #0]
   1697e:	4463      	add	r3, ip
   16980:	6013      	str	r3, [r2, #0]
	
}
   16982:	4770      	bx	lr
   16984:	2000129c 	.word	0x2000129c

00016988 <timer_callback_longbutton>:


void timer_callback_longbutton(void)
{
   16988:	b510      	push	{r4, lr}
   1698a:	4809      	ldr	r0, [pc, #36]	; (169b0 <timer_callback_longbutton+0x28>)
   1698c:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
   1698e:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
   16990:	2b00      	cmp	r3, #0
   16992:	d1fc      	bne.n	1698e <timer_callback_longbutton+0x6>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
   16994:	3340      	adds	r3, #64	; 0x40
   16996:	7153      	strb	r3, [r2, #5]
	
	tc_stop_counter(&timerExtLong);
	tc_set_count_value(&timerExtLong, 0);
   16998:	2100      	movs	r1, #0
   1699a:	4b06      	ldr	r3, [pc, #24]	; (169b4 <timer_callback_longbutton+0x2c>)
   1699c:	4798      	blx	r3
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   1699e:	4b06      	ldr	r3, [pc, #24]	; (169b8 <timer_callback_longbutton+0x30>)
   169a0:	6a1b      	ldr	r3, [r3, #32]
	if(!ioport_get_pin_level(buttonE)){
   169a2:	069b      	lsls	r3, r3, #26
   169a4:	d402      	bmi.n	169ac <timer_callback_longbutton+0x24>
		//  Double-check that button is still pressed
		current_input=input_pwrDown;
   169a6:	2205      	movs	r2, #5
   169a8:	4b04      	ldr	r3, [pc, #16]	; (169bc <timer_callback_longbutton+0x34>)
   169aa:	601a      	str	r2, [r3, #0]
	}
	
}
   169ac:	bd10      	pop	{r4, pc}
   169ae:	46c0      	nop			; (mov r8, r8)
   169b0:	20001248 	.word	0x20001248
   169b4:	000194c1 	.word	0x000194c1
   169b8:	40002800 	.word	0x40002800
   169bc:	20003d24 	.word	0x20003d24

000169c0 <timer_callback_1s>:
{
   169c0:	b510      	push	{r4, lr}
	//  32khz clock, 16  prescaler.
	//  (32,768 clock/sec) * (1 count/16 clock) * (1 sec / 1000 ms) = 2.048 count/ms
	//  Divide by 2 to return ms, equivalent to >>1.
	
	uint32_t currentMs;
	currentMs = tc_get_count_value(&timerCounter)>>1;
   169c2:	4b06      	ldr	r3, [pc, #24]	; (169dc <timer_callback_1s+0x1c>)
   169c4:	4806      	ldr	r0, [pc, #24]	; (169e0 <timer_callback_1s+0x20>)
   169c6:	4798      	blx	r3
	current_input=input_1sec;
   169c8:	2207      	movs	r2, #7
	currentMs = currentMs+accumulatorMs;
   169ca:	4b06      	ldr	r3, [pc, #24]	; (169e4 <timer_callback_1s+0x24>)
	currentMs = tc_get_count_value(&timerCounter)>>1;
   169cc:	0840      	lsrs	r0, r0, #1
	currentMs = currentMs+accumulatorMs;
   169ce:	681b      	ldr	r3, [r3, #0]
   169d0:	18c0      	adds	r0, r0, r3
	tick1sMs = getCurrentMs();
   169d2:	4b05      	ldr	r3, [pc, #20]	; (169e8 <timer_callback_1s+0x28>)
   169d4:	6018      	str	r0, [r3, #0]
	current_input=input_1sec;
   169d6:	4b05      	ldr	r3, [pc, #20]	; (169ec <timer_callback_1s+0x2c>)
   169d8:	601a      	str	r2, [r3, #0]
}
   169da:	bd10      	pop	{r4, pc}
   169dc:	000194f1 	.word	0x000194f1
   169e0:	20001280 	.word	0x20001280
   169e4:	2000129c 	.word	0x2000129c
   169e8:	200012a0 	.word	0x200012a0
   169ec:	20003d24 	.word	0x20003d24

000169f0 <wdt_enable>:
void wdt_enable(void){
   169f0:	b500      	push	{lr}
   169f2:	b083      	sub	sp, #12
	config->always_on            = false;
   169f4:	2300      	movs	r3, #0
   169f6:	466a      	mov	r2, sp
	config->enable               = true;
   169f8:	4669      	mov	r1, sp
	config->always_on            = false;
   169fa:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
   169fc:	2201      	movs	r2, #1
	config->window_period        = WDT_PERIOD_NONE;
   169fe:	70cb      	strb	r3, [r1, #3]
	config->enable               = true;
   16a00:	704a      	strb	r2, [r1, #1]
	config->early_warning_period = WDT_PERIOD_NONE;
   16a02:	710b      	strb	r3, [r1, #4]
	config->timeout_period       = WDT_PERIOD_16384CLK;
   16a04:	320b      	adds	r2, #11
	wdt_set_config(&wdt_configuration);
   16a06:	4668      	mov	r0, sp
   16a08:	4b02      	ldr	r3, [pc, #8]	; (16a14 <wdt_enable+0x24>)
   16a0a:	708a      	strb	r2, [r1, #2]
   16a0c:	4798      	blx	r3
}
   16a0e:	b003      	add	sp, #12
   16a10:	bd00      	pop	{pc}
   16a12:	46c0      	nop			; (mov r8, r8)
   16a14:	00009b61 	.word	0x00009b61

00016a18 <wdt_disable>:
void wdt_disable(void){
   16a18:	b500      	push	{lr}
   16a1a:	b083      	sub	sp, #12
	config->always_on            = false;
   16a1c:	2300      	movs	r3, #0
   16a1e:	466a      	mov	r2, sp
	config->timeout_period       = WDT_PERIOD_16384CLK;
   16a20:	4669      	mov	r1, sp
	config->always_on            = false;
   16a22:	7013      	strb	r3, [r2, #0]
	config->timeout_period       = WDT_PERIOD_16384CLK;
   16a24:	220c      	movs	r2, #12
	config->window_period        = WDT_PERIOD_NONE;
   16a26:	70cb      	strb	r3, [r1, #3]
	config->early_warning_period = WDT_PERIOD_NONE;
   16a28:	710b      	strb	r3, [r1, #4]
	wdt_configuration.enable = false;
   16a2a:	704b      	strb	r3, [r1, #1]
	wdt_set_config(&wdt_configuration);
   16a2c:	4668      	mov	r0, sp
   16a2e:	4b02      	ldr	r3, [pc, #8]	; (16a38 <wdt_disable+0x20>)
	config->timeout_period       = WDT_PERIOD_16384CLK;
   16a30:	708a      	strb	r2, [r1, #2]
   16a32:	4798      	blx	r3
}
   16a34:	b003      	add	sp, #12
   16a36:	bd00      	pop	{pc}
   16a38:	00009b61 	.word	0x00009b61

00016a3c <idle_timeout>:
	if ((current_input == input_1sec) && (!isCharging)&&(!SD_WriteLockout)){
   16a3c:	4b0d      	ldr	r3, [pc, #52]	; (16a74 <idle_timeout+0x38>)
   16a3e:	681a      	ldr	r2, [r3, #0]
   16a40:	2a07      	cmp	r2, #7
   16a42:	d003      	beq.n	16a4c <idle_timeout+0x10>
   16a44:	2200      	movs	r2, #0
   16a46:	4b0c      	ldr	r3, [pc, #48]	; (16a78 <idle_timeout+0x3c>)
   16a48:	601a      	str	r2, [r3, #0]
}
   16a4a:	4770      	bx	lr
	if ((current_input == input_1sec) && (!isCharging)&&(!SD_WriteLockout)){
   16a4c:	4a0b      	ldr	r2, [pc, #44]	; (16a7c <idle_timeout+0x40>)
   16a4e:	7812      	ldrb	r2, [r2, #0]
   16a50:	2a00      	cmp	r2, #0
   16a52:	d1f7      	bne.n	16a44 <idle_timeout+0x8>
   16a54:	4a0a      	ldr	r2, [pc, #40]	; (16a80 <idle_timeout+0x44>)
   16a56:	7811      	ldrb	r1, [r2, #0]
   16a58:	b2c9      	uxtb	r1, r1
   16a5a:	2900      	cmp	r1, #0
   16a5c:	d1f2      	bne.n	16a44 <idle_timeout+0x8>
		idle_seconds++;
   16a5e:	4806      	ldr	r0, [pc, #24]	; (16a78 <idle_timeout+0x3c>)
   16a60:	6802      	ldr	r2, [r0, #0]
   16a62:	3201      	adds	r2, #1
   16a64:	6002      	str	r2, [r0, #0]
	if (idle_seconds>IDLE_MAX_S){
   16a66:	2a5a      	cmp	r2, #90	; 0x5a
   16a68:	d9ef      	bls.n	16a4a <idle_timeout+0xe>
		current_input = input_pwrDown;
   16a6a:	2205      	movs	r2, #5
		idle_seconds = 0;
   16a6c:	6001      	str	r1, [r0, #0]
		current_input = input_pwrDown;
   16a6e:	601a      	str	r2, [r3, #0]
}
   16a70:	e7eb      	b.n	16a4a <idle_timeout+0xe>
   16a72:	46c0      	nop			; (mov r8, r8)
   16a74:	20003d24 	.word	0x20003d24
   16a78:	20000cc4 	.word	0x20000cc4
   16a7c:	20000d5c 	.word	0x20000d5c
   16a80:	20000d50 	.word	0x20000d50

00016a84 <laser_timeout>:
void laser_timeout(void){
   16a84:	b510      	push	{r4, lr}
	if (current_state==st_powerdown){
   16a86:	4b0f      	ldr	r3, [pc, #60]	; (16ac4 <laser_timeout+0x40>)
   16a88:	681b      	ldr	r3, [r3, #0]
   16a8a:	2b04      	cmp	r3, #4
   16a8c:	d006      	beq.n	16a9c <laser_timeout+0x18>
	if (isLaserOn() && (current_input == input_1sec))
   16a8e:	4b0e      	ldr	r3, [pc, #56]	; (16ac8 <laser_timeout+0x44>)
   16a90:	4798      	blx	r3
   16a92:	2800      	cmp	r0, #0
   16a94:	d103      	bne.n	16a9e <laser_timeout+0x1a>
		laserSecondsOn = 0;
   16a96:	2200      	movs	r2, #0
   16a98:	4b0c      	ldr	r3, [pc, #48]	; (16acc <laser_timeout+0x48>)
   16a9a:	701a      	strb	r2, [r3, #0]
}
   16a9c:	bd10      	pop	{r4, pc}
	if (isLaserOn() && (current_input == input_1sec))
   16a9e:	4b0c      	ldr	r3, [pc, #48]	; (16ad0 <laser_timeout+0x4c>)
   16aa0:	681b      	ldr	r3, [r3, #0]
   16aa2:	2b07      	cmp	r3, #7
   16aa4:	d1f7      	bne.n	16a96 <laser_timeout+0x12>
		laserSecondsOn++;
   16aa6:	4a09      	ldr	r2, [pc, #36]	; (16acc <laser_timeout+0x48>)
   16aa8:	7813      	ldrb	r3, [r2, #0]
   16aaa:	3301      	adds	r3, #1
   16aac:	b2db      	uxtb	r3, r3
   16aae:	7013      	strb	r3, [r2, #0]
		if (laserSecondsOn>LASER_TIMEOUT_S){
   16ab0:	2b1e      	cmp	r3, #30
   16ab2:	d9f3      	bls.n	16a9c <laser_timeout+0x18>
			rangefinder_on_off(false);
   16ab4:	4b07      	ldr	r3, [pc, #28]	; (16ad4 <laser_timeout+0x50>)
   16ab6:	2000      	movs	r0, #0
   16ab8:	4798      	blx	r3
			last_input = input_laser_timeout;
   16aba:	220b      	movs	r2, #11
   16abc:	4b06      	ldr	r3, [pc, #24]	; (16ad8 <laser_timeout+0x54>)
   16abe:	601a      	str	r2, [r3, #0]
   16ac0:	e7ec      	b.n	16a9c <laser_timeout+0x18>
   16ac2:	46c0      	nop			; (mov r8, r8)
   16ac4:	20002630 	.word	0x20002630
   16ac8:	00015ed5 	.word	0x00015ed5
   16acc:	20000cc8 	.word	0x20000cc8
   16ad0:	20003d24 	.word	0x20003d24
   16ad4:	000160dd 	.word	0x000160dd
   16ad8:	200041d8 	.word	0x200041d8

00016adc <configure_timer_1s>:
void configure_timer_1s(void){
   16adc:	b510      	push	{r4, lr}
   16ade:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   16ae0:	2300      	movs	r3, #0
   16ae2:	466a      	mov	r2, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   16ae4:	2000      	movs	r0, #0
   16ae6:	2100      	movs	r1, #0
	config->run_in_standby             = false;
   16ae8:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
   16aea:	7093      	strb	r3, [r2, #2]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   16aec:	9008      	str	r0, [sp, #32]
   16aee:	9109      	str	r1, [sp, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
   16af0:	8513      	strh	r3, [r2, #40]	; 0x28
	config->double_buffering_enabled = false;
   16af2:	4669      	mov	r1, sp
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   16af4:	7193      	strb	r3, [r2, #6]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
   16af6:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   16af8:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   16afa:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   16afc:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   16afe:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
   16b00:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
   16b02:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
   16b04:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
   16b06:	7713      	strb	r3, [r2, #28]
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
   16b08:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
   16b0a:	8593      	strh	r3, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
   16b0c:	2200      	movs	r2, #0
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
   16b0e:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
   16b10:	9306      	str	r3, [sp, #24]
	config->double_buffering_enabled = false;
   16b12:	3334      	adds	r3, #52	; 0x34
   16b14:	54ca      	strb	r2, [r1, r3]
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
   16b16:	3b30      	subs	r3, #48	; 0x30
   16b18:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
   16b1a:	23e0      	movs	r3, #224	; 0xe0
   16b1c:	00db      	lsls	r3, r3, #3
   16b1e:	808b      	strh	r3, [r1, #4]
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
   16b20:	2210      	movs	r2, #16
	config_tc.clock_source = GCLK_FOR_TIMERS;
   16b22:	2302      	movs	r3, #2
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
   16b24:	71ca      	strb	r2, [r1, #7]
	config_tc.clock_source = GCLK_FOR_TIMERS;
   16b26:	700b      	strb	r3, [r1, #0]
	config_tc.counter_8_bit.period = 0x1F;//0x1F = 31d, 1 second exactly on counter
   16b28:	4668      	mov	r0, sp
   16b2a:	211f      	movs	r1, #31
	if (timer1Sec.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
   16b2c:	4c20      	ldr	r4, [pc, #128]	; (16bb0 <configure_timer_1s+0xd4>)
	config_tc.counter_8_bit.period = 0x1F;//0x1F = 31d, 1 second exactly on counter
   16b2e:	3219      	adds	r2, #25
   16b30:	5481      	strb	r1, [r0, r2]
	if (timer1Sec.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
   16b32:	6822      	ldr	r2, [r4, #0]
   16b34:	6811      	ldr	r1, [r2, #0]
   16b36:	420b      	tst	r3, r1
   16b38:	d12f      	bne.n	16b9a <configure_timer_1s+0xbe>
	tc_init(&timer1Sec, TC1, &config_tc);
   16b3a:	466a      	mov	r2, sp
   16b3c:	491d      	ldr	r1, [pc, #116]	; (16bb4 <configure_timer_1s+0xd8>)
   16b3e:	0020      	movs	r0, r4
   16b40:	4b1d      	ldr	r3, [pc, #116]	; (16bb8 <configure_timer_1s+0xdc>)
   16b42:	4798      	blx	r3
   16b44:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
   16b46:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   16b48:	2b00      	cmp	r3, #0
   16b4a:	d1fc      	bne.n	16b46 <configure_timer_1s+0x6a>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
   16b4c:	2102      	movs	r1, #2
   16b4e:	6813      	ldr	r3, [r2, #0]
   16b50:	430b      	orrs	r3, r1
   16b52:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16b54:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
   16b56:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
   16b58:	2a00      	cmp	r2, #0
   16b5a:	d1fc      	bne.n	16b56 <configure_timer_1s+0x7a>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   16b5c:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
   16b5e:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
   16b60:	2a00      	cmp	r2, #0
   16b62:	d1fc      	bne.n	16b5e <configure_timer_1s+0x82>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
   16b64:	3220      	adds	r2, #32
   16b66:	715a      	strb	r2, [r3, #5]
	tc_register_callback(&timer1Sec,timer_callback_1s,TC_CALLBACK_OVERFLOW);
   16b68:	4914      	ldr	r1, [pc, #80]	; (16bbc <configure_timer_1s+0xe0>)
   16b6a:	2200      	movs	r2, #0
   16b6c:	0020      	movs	r0, r4
   16b6e:	4b14      	ldr	r3, [pc, #80]	; (16bc0 <configure_timer_1s+0xe4>)
   16b70:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
   16b72:	6820      	ldr	r0, [r4, #0]
   16b74:	4b13      	ldr	r3, [pc, #76]	; (16bc4 <configure_timer_1s+0xe8>)
   16b76:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
   16b78:	4b13      	ldr	r3, [pc, #76]	; (16bc8 <configure_timer_1s+0xec>)
   16b7a:	5c1a      	ldrb	r2, [r3, r0]
   16b7c:	231f      	movs	r3, #31
   16b7e:	4013      	ands	r3, r2
   16b80:	2201      	movs	r2, #1
   16b82:	0011      	movs	r1, r2
   16b84:	4099      	lsls	r1, r3
   16b86:	4b11      	ldr	r3, [pc, #68]	; (16bcc <configure_timer_1s+0xf0>)
   16b88:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
   16b8a:	2101      	movs	r1, #1
   16b8c:	7e63      	ldrb	r3, [r4, #25]
   16b8e:	430b      	orrs	r3, r1
   16b90:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
   16b92:	6823      	ldr	r3, [r4, #0]
   16b94:	725a      	strb	r2, [r3, #9]
}
   16b96:	b00e      	add	sp, #56	; 0x38
   16b98:	bd10      	pop	{r4, pc}
	return (tc_module->SYNCBUSY.reg);
   16b9a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   16b9c:	2b00      	cmp	r3, #0
   16b9e:	d1fc      	bne.n	16b9a <configure_timer_1s+0xbe>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16ba0:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
   16ba2:	3333      	adds	r3, #51	; 0x33
   16ba4:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
   16ba6:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16ba8:	6813      	ldr	r3, [r2, #0]
   16baa:	438b      	bics	r3, r1
   16bac:	6013      	str	r3, [r2, #0]
   16bae:	e7c4      	b.n	16b3a <configure_timer_1s+0x5e>
   16bb0:	20001264 	.word	0x20001264
   16bb4:	42002400 	.word	0x42002400
   16bb8:	0001915d 	.word	0x0001915d
   16bbc:	000169c1 	.word	0x000169c1
   16bc0:	00018fc9 	.word	0x00018fc9
   16bc4:	0001911d 	.word	0x0001911d
   16bc8:	0002e904 	.word	0x0002e904
   16bcc:	e000e100 	.word	0xe000e100

00016bd0 <configure_timer_counter>:
void configure_timer_counter(void){
   16bd0:	b510      	push	{r4, lr}
   16bd2:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
   16bd4:	2300      	movs	r3, #0
   16bd6:	466a      	mov	r2, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   16bd8:	2100      	movs	r1, #0
   16bda:	2000      	movs	r0, #0
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
   16bdc:	70d3      	strb	r3, [r2, #3]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   16bde:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
   16be0:	71d3      	strb	r3, [r2, #7]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
   16be2:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   16be4:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   16be6:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   16be8:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   16bea:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
   16bec:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
   16bee:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
   16bf0:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
   16bf2:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   16bf4:	9008      	str	r0, [sp, #32]
   16bf6:	9109      	str	r1, [sp, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
   16bf8:	8513      	strh	r3, [r2, #40]	; 0x28
	config->double_buffering_enabled = false;
   16bfa:	4669      	mov	r1, sp
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
   16bfc:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
   16bfe:	8593      	strh	r3, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
   16c00:	2200      	movs	r2, #0
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
   16c02:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
   16c04:	9306      	str	r3, [sp, #24]
	config->double_buffering_enabled = false;
   16c06:	3334      	adds	r3, #52	; 0x34
   16c08:	54ca      	strb	r2, [r1, r3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV16 ;//  TC_CLOCK_PRESCALER_DIV1024;
   16c0a:	2380      	movs	r3, #128	; 0x80
	config_tc.run_in_standby = true; //  Run during sleep mode
   16c0c:	2201      	movs	r2, #1
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV16 ;//  TC_CLOCK_PRESCALER_DIV1024;
   16c0e:	00db      	lsls	r3, r3, #3
   16c10:	808b      	strh	r3, [r1, #4]
	config_tc.clock_source =		GCLK_FOR_TIMERS;
   16c12:	2302      	movs	r3, #2
	if (timerCounter.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
   16c14:	4c23      	ldr	r4, [pc, #140]	; (16ca4 <configure_timer_counter+0xd4>)
	config_tc.run_in_standby = true; //  Run during sleep mode
   16c16:	704a      	strb	r2, [r1, #1]
	config_tc.on_demand = true;
   16c18:	708a      	strb	r2, [r1, #2]
	if (timerCounter.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
   16c1a:	6822      	ldr	r2, [r4, #0]
	config_tc.clock_source =		GCLK_FOR_TIMERS;
   16c1c:	700b      	strb	r3, [r1, #0]
	if (timerCounter.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
   16c1e:	6811      	ldr	r1, [r2, #0]
   16c20:	420b      	tst	r3, r1
   16c22:	d134      	bne.n	16c8e <configure_timer_counter+0xbe>
	tc_init(&timerCounter, TC4, &config_tc);
   16c24:	466a      	mov	r2, sp
   16c26:	4920      	ldr	r1, [pc, #128]	; (16ca8 <configure_timer_counter+0xd8>)
   16c28:	0020      	movs	r0, r4
   16c2a:	4b20      	ldr	r3, [pc, #128]	; (16cac <configure_timer_counter+0xdc>)
   16c2c:	4798      	blx	r3
   16c2e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
   16c30:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   16c32:	2b00      	cmp	r3, #0
   16c34:	d1fc      	bne.n	16c30 <configure_timer_counter+0x60>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
   16c36:	2102      	movs	r1, #2
   16c38:	6813      	ldr	r3, [r2, #0]
	tc_set_count_value(&timerCounter, 0);	
   16c3a:	0020      	movs	r0, r4
   16c3c:	430b      	orrs	r3, r1
   16c3e:	6013      	str	r3, [r2, #0]
   16c40:	2100      	movs	r1, #0
   16c42:	4b1b      	ldr	r3, [pc, #108]	; (16cb0 <configure_timer_counter+0xe0>)
   16c44:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16c46:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
   16c48:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
   16c4a:	2a00      	cmp	r2, #0
   16c4c:	d1fc      	bne.n	16c48 <configure_timer_counter+0x78>
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   16c4e:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
   16c50:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
   16c52:	2a00      	cmp	r2, #0
   16c54:	d1fc      	bne.n	16c50 <configure_timer_counter+0x80>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
   16c56:	2120      	movs	r1, #32
   16c58:	7159      	strb	r1, [r3, #5]
	accumulatorMs = 0;  //  reset ms accumulator
   16c5a:	4b16      	ldr	r3, [pc, #88]	; (16cb4 <configure_timer_counter+0xe4>)
	tc_register_callback(
   16c5c:	4916      	ldr	r1, [pc, #88]	; (16cb8 <configure_timer_counter+0xe8>)
	accumulatorMs = 0;  //  reset ms accumulator
   16c5e:	601a      	str	r2, [r3, #0]
	tc_register_callback(
   16c60:	0020      	movs	r0, r4
   16c62:	4b16      	ldr	r3, [pc, #88]	; (16cbc <configure_timer_counter+0xec>)
   16c64:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
   16c66:	6820      	ldr	r0, [r4, #0]
   16c68:	4b15      	ldr	r3, [pc, #84]	; (16cc0 <configure_timer_counter+0xf0>)
   16c6a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
   16c6c:	4b15      	ldr	r3, [pc, #84]	; (16cc4 <configure_timer_counter+0xf4>)
   16c6e:	5c1a      	ldrb	r2, [r3, r0]
   16c70:	231f      	movs	r3, #31
   16c72:	4013      	ands	r3, r2
   16c74:	2201      	movs	r2, #1
   16c76:	0011      	movs	r1, r2
   16c78:	4099      	lsls	r1, r3
   16c7a:	4b13      	ldr	r3, [pc, #76]	; (16cc8 <configure_timer_counter+0xf8>)
   16c7c:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
   16c7e:	2101      	movs	r1, #1
   16c80:	7e63      	ldrb	r3, [r4, #25]
   16c82:	430b      	orrs	r3, r1
   16c84:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
   16c86:	6823      	ldr	r3, [r4, #0]
   16c88:	725a      	strb	r2, [r3, #9]
}
   16c8a:	b00e      	add	sp, #56	; 0x38
   16c8c:	bd10      	pop	{r4, pc}
	return (tc_module->SYNCBUSY.reg);
   16c8e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   16c90:	2b00      	cmp	r3, #0
   16c92:	d1fc      	bne.n	16c8e <configure_timer_counter+0xbe>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16c94:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
   16c96:	3333      	adds	r3, #51	; 0x33
   16c98:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
   16c9a:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16c9c:	6813      	ldr	r3, [r2, #0]
   16c9e:	438b      	bics	r3, r1
   16ca0:	6013      	str	r3, [r2, #0]
   16ca2:	e7bf      	b.n	16c24 <configure_timer_counter+0x54>
   16ca4:	20001280 	.word	0x20001280
   16ca8:	43000800 	.word	0x43000800
   16cac:	0001915d 	.word	0x0001915d
   16cb0:	000194c1 	.word	0x000194c1
   16cb4:	2000129c 	.word	0x2000129c
   16cb8:	00016975 	.word	0x00016975
   16cbc:	00018fc9 	.word	0x00018fc9
   16cc0:	0001911d 	.word	0x0001911d
   16cc4:	0002e904 	.word	0x0002e904
   16cc8:	e000e100 	.word	0xe000e100

00016ccc <configure_timer_ExtLong>:
void configure_timer_ExtLong(void){
   16ccc:	b510      	push	{r4, lr}
   16cce:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   16cd0:	2300      	movs	r3, #0
   16cd2:	466a      	mov	r2, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   16cd4:	2000      	movs	r0, #0
   16cd6:	2100      	movs	r1, #0
	config->run_in_standby             = false;
   16cd8:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
   16cda:	7093      	strb	r3, [r2, #2]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   16cdc:	9008      	str	r0, [sp, #32]
   16cde:	9109      	str	r1, [sp, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
   16ce0:	8513      	strh	r3, [r2, #40]	; 0x28
	config->double_buffering_enabled = false;
   16ce2:	4669      	mov	r1, sp
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   16ce4:	7193      	strb	r3, [r2, #6]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
   16ce6:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   16ce8:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   16cea:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   16cec:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   16cee:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
   16cf0:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
   16cf2:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
   16cf4:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
   16cf6:	7713      	strb	r3, [r2, #28]
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
   16cf8:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
   16cfa:	8593      	strh	r3, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
   16cfc:	2200      	movs	r2, #0
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
   16cfe:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
   16d00:	9306      	str	r3, [sp, #24]
	config->double_buffering_enabled = false;
   16d02:	3334      	adds	r3, #52	; 0x34
   16d04:	54ca      	strb	r2, [r1, r3]
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
   16d06:	3b30      	subs	r3, #48	; 0x30
   16d08:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_prescaler =    TC_CLOCK_PRESCALER_DIV1024;
   16d0a:	23e0      	movs	r3, #224	; 0xe0
   16d0c:	00db      	lsls	r3, r3, #3
   16d0e:	808b      	strh	r3, [r1, #4]
	config_tc.reload_action = TC_RELOAD_ACTION_PRESC;
   16d10:	2210      	movs	r2, #16
	config_tc.clock_source = GCLK_FOR_TIMERS;
   16d12:	2302      	movs	r3, #2
	config_tc.reload_action = TC_RELOAD_ACTION_PRESC;
   16d14:	71ca      	strb	r2, [r1, #7]
	config_tc.clock_source = GCLK_FOR_TIMERS;
   16d16:	700b      	strb	r3, [r1, #0]
	config_tc.counter_8_bit.period = temp;
   16d18:	4668      	mov	r0, sp
   16d1a:	215d      	movs	r1, #93	; 0x5d
	if (timerExtLong.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
   16d1c:	4c20      	ldr	r4, [pc, #128]	; (16da0 <configure_timer_ExtLong+0xd4>)
	config_tc.counter_8_bit.period = temp;
   16d1e:	3219      	adds	r2, #25
   16d20:	5481      	strb	r1, [r0, r2]
	if (timerExtLong.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
   16d22:	6822      	ldr	r2, [r4, #0]
   16d24:	6811      	ldr	r1, [r2, #0]
   16d26:	420b      	tst	r3, r1
   16d28:	d12f      	bne.n	16d8a <configure_timer_ExtLong+0xbe>
	tc_init(&timerExtLong, TC0, &config_tc);
   16d2a:	466a      	mov	r2, sp
   16d2c:	491d      	ldr	r1, [pc, #116]	; (16da4 <configure_timer_ExtLong+0xd8>)
   16d2e:	0020      	movs	r0, r4
   16d30:	4b1d      	ldr	r3, [pc, #116]	; (16da8 <configure_timer_ExtLong+0xdc>)
   16d32:	4798      	blx	r3
   16d34:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
   16d36:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   16d38:	2b00      	cmp	r3, #0
   16d3a:	d1fc      	bne.n	16d36 <configure_timer_ExtLong+0x6a>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
   16d3c:	2102      	movs	r1, #2
   16d3e:	6813      	ldr	r3, [r2, #0]
   16d40:	430b      	orrs	r3, r1
   16d42:	6013      	str	r3, [r2, #0]
   16d44:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
   16d46:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   16d48:	2b00      	cmp	r3, #0
   16d4a:	d1fc      	bne.n	16d46 <configure_timer_ExtLong+0x7a>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
   16d4c:	3340      	adds	r3, #64	; 0x40
   16d4e:	7153      	strb	r3, [r2, #5]
	tc_set_count_value(&timerExtLong, 0);
   16d50:	2100      	movs	r1, #0
   16d52:	0020      	movs	r0, r4
   16d54:	4b15      	ldr	r3, [pc, #84]	; (16dac <configure_timer_ExtLong+0xe0>)
   16d56:	4798      	blx	r3
	tc_register_callback(
   16d58:	2200      	movs	r2, #0
   16d5a:	4915      	ldr	r1, [pc, #84]	; (16db0 <configure_timer_ExtLong+0xe4>)
   16d5c:	0020      	movs	r0, r4
   16d5e:	4b15      	ldr	r3, [pc, #84]	; (16db4 <configure_timer_ExtLong+0xe8>)
   16d60:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
   16d62:	6820      	ldr	r0, [r4, #0]
   16d64:	4b14      	ldr	r3, [pc, #80]	; (16db8 <configure_timer_ExtLong+0xec>)
   16d66:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
   16d68:	4b14      	ldr	r3, [pc, #80]	; (16dbc <configure_timer_ExtLong+0xf0>)
   16d6a:	5c1a      	ldrb	r2, [r3, r0]
   16d6c:	231f      	movs	r3, #31
   16d6e:	4013      	ands	r3, r2
   16d70:	2201      	movs	r2, #1
   16d72:	0011      	movs	r1, r2
   16d74:	4099      	lsls	r1, r3
   16d76:	4b12      	ldr	r3, [pc, #72]	; (16dc0 <configure_timer_ExtLong+0xf4>)
   16d78:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
   16d7a:	2101      	movs	r1, #1
   16d7c:	7e63      	ldrb	r3, [r4, #25]
   16d7e:	430b      	orrs	r3, r1
   16d80:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
   16d82:	6823      	ldr	r3, [r4, #0]
   16d84:	725a      	strb	r2, [r3, #9]
}
   16d86:	b00e      	add	sp, #56	; 0x38
   16d88:	bd10      	pop	{r4, pc}
	return (tc_module->SYNCBUSY.reg);
   16d8a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   16d8c:	2b00      	cmp	r3, #0
   16d8e:	d1fc      	bne.n	16d8a <configure_timer_ExtLong+0xbe>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16d90:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
   16d92:	3333      	adds	r3, #51	; 0x33
   16d94:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
   16d96:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16d98:	6813      	ldr	r3, [r2, #0]
   16d9a:	438b      	bics	r3, r1
   16d9c:	6013      	str	r3, [r2, #0]
   16d9e:	e7c4      	b.n	16d2a <configure_timer_ExtLong+0x5e>
   16da0:	20001248 	.word	0x20001248
   16da4:	42002000 	.word	0x42002000
   16da8:	0001915d 	.word	0x0001915d
   16dac:	000194c1 	.word	0x000194c1
   16db0:	00016989 	.word	0x00016989
   16db4:	00018fc9 	.word	0x00018fc9
   16db8:	0001911d 	.word	0x0001911d
   16dbc:	0002e904 	.word	0x0002e904
   16dc0:	e000e100 	.word	0xe000e100

00016dc4 <getCentiSeconds>:
uint8_t getCentiSeconds(void){
   16dc4:	b510      	push	{r4, lr}
	currentMs = tc_get_count_value(&timerCounter)>>1;
   16dc6:	4b07      	ldr	r3, [pc, #28]	; (16de4 <getCentiSeconds+0x20>)
   16dc8:	4807      	ldr	r0, [pc, #28]	; (16de8 <getCentiSeconds+0x24>)
   16dca:	4798      	blx	r3
	currentMs = currentMs+accumulatorMs;
   16dcc:	4b07      	ldr	r3, [pc, #28]	; (16dec <getCentiSeconds+0x28>)
	deltaMS = deltaMS-tick1sMs;
   16dce:	4a08      	ldr	r2, [pc, #32]	; (16df0 <getCentiSeconds+0x2c>)
	currentMs = currentMs+accumulatorMs;
   16dd0:	681b      	ldr	r3, [r3, #0]
	deltaMS = deltaMS-tick1sMs;
   16dd2:	6812      	ldr	r2, [r2, #0]
	currentMs = tc_get_count_value(&timerCounter)>>1;
   16dd4:	0840      	lsrs	r0, r0, #1
	deltaMS = deltaMS-tick1sMs;
   16dd6:	1a9b      	subs	r3, r3, r2
   16dd8:	18c0      	adds	r0, r0, r3
	deltaMS = deltaMS/10;
   16dda:	210a      	movs	r1, #10
   16ddc:	4b05      	ldr	r3, [pc, #20]	; (16df4 <getCentiSeconds+0x30>)
   16dde:	4798      	blx	r3
	return centiSec;
   16de0:	b2c0      	uxtb	r0, r0
}
   16de2:	bd10      	pop	{r4, pc}
   16de4:	000194f1 	.word	0x000194f1
   16de8:	20001280 	.word	0x20001280
   16dec:	2000129c 	.word	0x2000129c
   16df0:	200012a0 	.word	0x200012a0
   16df4:	0002593d 	.word	0x0002593d

00016df8 <getCurrentMs>:
uint32_t getCurrentMs(void){
   16df8:	b510      	push	{r4, lr}
	currentMs = tc_get_count_value(&timerCounter)>>1;
   16dfa:	4b04      	ldr	r3, [pc, #16]	; (16e0c <getCurrentMs+0x14>)
   16dfc:	4804      	ldr	r0, [pc, #16]	; (16e10 <getCurrentMs+0x18>)
   16dfe:	4798      	blx	r3
	currentMs = currentMs+accumulatorMs;
   16e00:	4b04      	ldr	r3, [pc, #16]	; (16e14 <getCurrentMs+0x1c>)
	currentMs = tc_get_count_value(&timerCounter)>>1;
   16e02:	0840      	lsrs	r0, r0, #1
	currentMs = currentMs+accumulatorMs;
   16e04:	681b      	ldr	r3, [r3, #0]
   16e06:	18c0      	adds	r0, r0, r3
	
	return currentMs;

}
   16e08:	bd10      	pop	{r4, pc}
   16e0a:	46c0      	nop			; (mov r8, r8)
   16e0c:	000194f1 	.word	0x000194f1
   16e10:	20001280 	.word	0x20001280
   16e14:	2000129c 	.word	0x2000129c

00016e18 <timerStartExt>:

void timerStartExt(void){
   16e18:	b510      	push	{r4, lr}
	tc_set_count_value(&timerExtLong, 0);
   16e1a:	4c08      	ldr	r4, [pc, #32]	; (16e3c <timerStartExt+0x24>)
   16e1c:	4b08      	ldr	r3, [pc, #32]	; (16e40 <timerStartExt+0x28>)
   16e1e:	2100      	movs	r1, #0
   16e20:	0020      	movs	r0, r4
   16e22:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16e24:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
   16e26:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
   16e28:	2a00      	cmp	r2, #0
   16e2a:	d1fc      	bne.n	16e26 <timerStartExt+0xe>
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   16e2c:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
   16e2e:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
   16e30:	2a00      	cmp	r2, #0
   16e32:	d1fc      	bne.n	16e2e <timerStartExt+0x16>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
   16e34:	3220      	adds	r2, #32
   16e36:	715a      	strb	r2, [r3, #5]
	tc_start_counter(&timerExtLong);
}
   16e38:	bd10      	pop	{r4, pc}
   16e3a:	46c0      	nop			; (mov r8, r8)
   16e3c:	20001248 	.word	0x20001248
   16e40:	000194c1 	.word	0x000194c1

00016e44 <timerStopExt>:
void timerStopExt(void){
   16e44:	4b03      	ldr	r3, [pc, #12]	; (16e54 <timerStopExt+0x10>)
   16e46:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
   16e48:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   16e4a:	2b00      	cmp	r3, #0
   16e4c:	d1fc      	bne.n	16e48 <timerStopExt+0x4>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
   16e4e:	3340      	adds	r3, #64	; 0x40
   16e50:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&timerExtLong);
}
   16e52:	4770      	bx	lr
   16e54:	20001248 	.word	0x20001248

00016e58 <powerdown_timer_1s>:


void powerdown_timer_1s(void){
   16e58:	4b06      	ldr	r3, [pc, #24]	; (16e74 <powerdown_timer_1s+0x1c>)
   16e5a:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
   16e5c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   16e5e:	2b00      	cmp	r3, #0
   16e60:	d1fc      	bne.n	16e5c <powerdown_timer_1s+0x4>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16e62:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
   16e64:	3333      	adds	r3, #51	; 0x33
   16e66:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
   16e68:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16e6a:	6813      	ldr	r3, [r2, #0]
   16e6c:	438b      	bics	r3, r1
   16e6e:	6013      	str	r3, [r2, #0]
	tc_disable(&timer1Sec);
}
   16e70:	4770      	bx	lr
   16e72:	46c0      	nop			; (mov r8, r8)
   16e74:	20001264 	.word	0x20001264

00016e78 <powerdown_timer_ExtLong>:

void powerdown_timer_ExtLong(void){
   16e78:	4b06      	ldr	r3, [pc, #24]	; (16e94 <powerdown_timer_ExtLong+0x1c>)
   16e7a:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
   16e7c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   16e7e:	2b00      	cmp	r3, #0
   16e80:	d1fc      	bne.n	16e7c <powerdown_timer_ExtLong+0x4>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16e82:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
   16e84:	3333      	adds	r3, #51	; 0x33
   16e86:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
   16e88:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16e8a:	6813      	ldr	r3, [r2, #0]
   16e8c:	438b      	bics	r3, r1
   16e8e:	6013      	str	r3, [r2, #0]
	tc_disable(&timerExtLong);
	
	
}
   16e90:	4770      	bx	lr
   16e92:	46c0      	nop			; (mov r8, r8)
   16e94:	20001248 	.word	0x20001248

00016e98 <sd_mmc_init>:
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   16e98:	2204      	movs	r2, #4
   16e9a:	4b03      	ldr	r3, [pc, #12]	; (16ea8 <sd_mmc_init+0x10>)
   16e9c:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   16e9e:	4b03      	ldr	r3, [pc, #12]	; (16eac <sd_mmc_init+0x14>)
   16ea0:	32fb      	adds	r2, #251	; 0xfb
   16ea2:	701a      	strb	r2, [r3, #0]
	//driver_init(); //  Kfausnight 20200721.  Not needed; SPI initiated in comm.c code
}
   16ea4:	4770      	bx	lr
   16ea6:	46c0      	nop			; (mov r8, r8)
   16ea8:	20000cd0 	.word	0x20000cd0
   16eac:	20000cf4 	.word	0x20000cf4

00016eb0 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   16eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16eb2:	4645      	mov	r5, r8
   16eb4:	46de      	mov	lr, fp
   16eb6:	4657      	mov	r7, sl
   16eb8:	464e      	mov	r6, r9
   16eba:	b5e0      	push	{r5, r6, r7, lr}
   16ebc:	0005      	movs	r5, r0
   16ebe:	b087      	sub	sp, #28
	if (slot >= SD_MMC_MEM_CNT) {
   16ec0:	2800      	cmp	r0, #0
   16ec2:	d00c      	beq.n	16ede <sd_mmc_check+0x2e>
   16ec4:	4c6f      	ldr	r4, [pc, #444]	; (17084 <sd_mmc_check+0x1d4>)
		return SD_MMC_ERR_SLOT;
   16ec6:	2504      	movs	r5, #4
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   16ec8:	7823      	ldrb	r3, [r4, #0]
   16eca:	2b00      	cmp	r3, #0
   16ecc:	d023      	beq.n	16f16 <sd_mmc_check+0x66>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   16ece:	0028      	movs	r0, r5
   16ed0:	b007      	add	sp, #28
   16ed2:	bc3c      	pop	{r2, r3, r4, r5}
   16ed4:	4690      	mov	r8, r2
   16ed6:	4699      	mov	r9, r3
   16ed8:	46a2      	mov	sl, r4
   16eda:	46ab      	mov	fp, r5
   16edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   16ede:	4e6a      	ldr	r6, [pc, #424]	; (17088 <sd_mmc_check+0x1d8>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   16ee0:	7ab3      	ldrb	r3, [r6, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   16ee2:	3b03      	subs	r3, #3
   16ee4:	2b01      	cmp	r3, #1
   16ee6:	d949      	bls.n	16f7c <sd_mmc_check+0xcc>
   16ee8:	7fb3      	ldrb	r3, [r6, #30]
   16eea:	6831      	ldr	r1, [r6, #0]
   16eec:	1e58      	subs	r0, r3, #1
   16eee:	4183      	sbcs	r3, r0
   16ef0:	7b72      	ldrb	r2, [r6, #13]
   16ef2:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
   16ef4:	2000      	movs	r0, #0
   16ef6:	4c63      	ldr	r4, [pc, #396]	; (17084 <sd_mmc_check+0x1d4>)
   16ef8:	4680      	mov	r8, r0
   16efa:	7020      	strb	r0, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   16efc:	4863      	ldr	r0, [pc, #396]	; (1708c <sd_mmc_check+0x1dc>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   16efe:	4f64      	ldr	r7, [pc, #400]	; (17090 <sd_mmc_check+0x1e0>)
	sd_mmc_card = &sd_mmc_cards[slot];
   16f00:	6006      	str	r6, [r0, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   16f02:	2000      	movs	r0, #0
   16f04:	47b8      	blx	r7
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   16f06:	7ab3      	ldrb	r3, [r6, #10]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   16f08:	46b9      	mov	r9, r7
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   16f0a:	2b02      	cmp	r3, #2
   16f0c:	d007      	beq.n	16f1e <sd_mmc_check+0x6e>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   16f0e:	7823      	ldrb	r3, [r4, #0]
   16f10:	2500      	movs	r5, #0
   16f12:	2b00      	cmp	r3, #0
   16f14:	d1db      	bne.n	16ece <sd_mmc_check+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
   16f16:	2000      	movs	r0, #0
   16f18:	4b5e      	ldr	r3, [pc, #376]	; (17094 <sd_mmc_check+0x1e4>)
   16f1a:	4798      	blx	r3
   16f1c:	e7d7      	b.n	16ece <sd_mmc_check+0x1e>
	sd_mmc_card->type = CARD_TYPE_SD;
   16f1e:	2201      	movs	r2, #1
   16f20:	4b5a      	ldr	r3, [pc, #360]	; (1708c <sd_mmc_check+0x1dc>)
   16f22:	681b      	ldr	r3, [r3, #0]
   16f24:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   16f26:	4642      	mov	r2, r8
   16f28:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   16f2a:	4642      	mov	r2, r8
   16f2c:	811a      	strh	r2, [r3, #8]
	spi_select_slave(&spi_main, &slave_SD, false);	//Added by KFausnight
   16f2e:	4b5a      	ldr	r3, [pc, #360]	; (17098 <sd_mmc_check+0x1e8>)
   16f30:	2200      	movs	r2, #0
   16f32:	469b      	mov	fp, r3
   16f34:	4b59      	ldr	r3, [pc, #356]	; (1709c <sd_mmc_check+0x1ec>)
   16f36:	4659      	mov	r1, fp
   16f38:	469a      	mov	sl, r3
   16f3a:	0018      	movs	r0, r3
   16f3c:	4b58      	ldr	r3, [pc, #352]	; (170a0 <sd_mmc_check+0x1f0>)
   16f3e:	4698      	mov	r8, r3
   16f40:	4798      	blx	r3
	delay_ms(1);//Added by KFausnight
   16f42:	4e58      	ldr	r6, [pc, #352]	; (170a4 <sd_mmc_check+0x1f4>)
   16f44:	2001      	movs	r0, #1
   16f46:	47b0      	blx	r6
	driver_send_clock();
   16f48:	4b57      	ldr	r3, [pc, #348]	; (170a8 <sd_mmc_check+0x1f8>)
   16f4a:	4798      	blx	r3
	delay_ms(1);//Added by KFausnight
   16f4c:	2001      	movs	r0, #1
   16f4e:	47b0      	blx	r6
	spi_select_slave(&spi_main, &slave_SD, true);	//Added by KFausnight
   16f50:	4659      	mov	r1, fp
   16f52:	2201      	movs	r2, #1
   16f54:	4650      	mov	r0, sl
   16f56:	47c0      	blx	r8
	delay_ms(1);//Added by KFausnight
   16f58:	2001      	movs	r0, #1
   16f5a:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   16f5c:	2088      	movs	r0, #136	; 0x88
   16f5e:	2100      	movs	r1, #0
   16f60:	0140      	lsls	r0, r0, #5
   16f62:	4e52      	ldr	r6, [pc, #328]	; (170ac <sd_mmc_check+0x1fc>)
   16f64:	47b0      	blx	r6
   16f66:	2800      	cmp	r0, #0
   16f68:	d112      	bne.n	16f90 <sd_mmc_check+0xe0>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   16f6a:	2203      	movs	r2, #3
   16f6c:	4b47      	ldr	r3, [pc, #284]	; (1708c <sd_mmc_check+0x1dc>)
	return SD_MMC_ERR_UNUSABLE;
   16f6e:	2503      	movs	r5, #3
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   16f70:	681b      	ldr	r3, [r3, #0]
   16f72:	729a      	strb	r2, [r3, #10]
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   16f74:	7823      	ldrb	r3, [r4, #0]
   16f76:	2b00      	cmp	r3, #0
   16f78:	d1a9      	bne.n	16ece <sd_mmc_check+0x1e>
   16f7a:	e7cc      	b.n	16f16 <sd_mmc_check+0x66>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   16f7c:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   16f7e:	494c      	ldr	r1, [pc, #304]	; (170b0 <sd_mmc_check+0x200>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   16f80:	72b3      	strb	r3, [r6, #10]
		sd_mmc_cards[slot].bus_width = 1;
   16f82:	3b01      	subs	r3, #1
   16f84:	7373      	strb	r3, [r6, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   16f86:	6031      	str	r1, [r6, #0]
		sd_mmc_cards[slot].high_speed = 0;
   16f88:	77b0      	strb	r0, [r6, #30]
   16f8a:	2300      	movs	r3, #0
   16f8c:	2201      	movs	r2, #1
   16f8e:	e7b1      	b.n	16ef4 <sd_mmc_check+0x44>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   16f90:	23d5      	movs	r3, #213	; 0xd5
   16f92:	005b      	lsls	r3, r3, #1
   16f94:	0019      	movs	r1, r3
   16f96:	4847      	ldr	r0, [pc, #284]	; (170b4 <sd_mmc_check+0x204>)
   16f98:	4698      	mov	r8, r3
   16f9a:	47b0      	blx	r6
   16f9c:	2800      	cmp	r0, #0
   16f9e:	d138      	bne.n	17012 <sd_mmc_check+0x162>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   16fa0:	4b3a      	ldr	r3, [pc, #232]	; (1708c <sd_mmc_check+0x1dc>)
   16fa2:	6819      	ldr	r1, [r3, #0]
   16fa4:	7aca      	ldrb	r2, [r1, #11]
   16fa6:	07d3      	lsls	r3, r2, #31
   16fa8:	d442      	bmi.n	17030 <sd_mmc_check+0x180>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   16faa:	2309      	movs	r3, #9
   16fac:	4013      	ands	r3, r2
   16fae:	2b01      	cmp	r3, #1
   16fb0:	d11e      	bne.n	16ff0 <sd_mmc_check+0x140>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   16fb2:	2180      	movs	r1, #128	; 0x80
   16fb4:	4840      	ldr	r0, [pc, #256]	; (170b8 <sd_mmc_check+0x208>)
   16fb6:	0089      	lsls	r1, r1, #2
   16fb8:	47b0      	blx	r6
   16fba:	2800      	cmp	r0, #0
   16fbc:	d0d5      	beq.n	16f6a <sd_mmc_check+0xba>
   16fbe:	4b33      	ldr	r3, [pc, #204]	; (1708c <sd_mmc_check+0x1dc>)
   16fc0:	6819      	ldr	r1, [r3, #0]
   16fc2:	7acb      	ldrb	r3, [r1, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   16fc4:	07db      	lsls	r3, r3, #31
   16fc6:	d513      	bpl.n	16ff0 <sd_mmc_check+0x140>
			if (!(driver_get_response() & 0xFF)) {
   16fc8:	4b3c      	ldr	r3, [pc, #240]	; (170bc <sd_mmc_check+0x20c>)
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   16fca:	4d3d      	ldr	r5, [pc, #244]	; (170c0 <sd_mmc_check+0x210>)
			if (!(driver_get_response() & 0xFF)) {
   16fcc:	469a      	mov	sl, r3
   16fce:	23ff      	movs	r3, #255	; 0xff
   16fd0:	4698      	mov	r8, r3
   16fd2:	e002      	b.n	16fda <sd_mmc_check+0x12a>
   16fd4:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
   16fd6:	2d00      	cmp	r5, #0
   16fd8:	d0c7      	beq.n	16f6a <sd_mmc_check+0xba>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   16fda:	2100      	movs	r1, #0
   16fdc:	4839      	ldr	r0, [pc, #228]	; (170c4 <sd_mmc_check+0x214>)
   16fde:	47b0      	blx	r6
   16fe0:	2800      	cmp	r0, #0
   16fe2:	d0c2      	beq.n	16f6a <sd_mmc_check+0xba>
			if (!(driver_get_response() & 0xFF)) {
   16fe4:	47d0      	blx	sl
   16fe6:	4643      	mov	r3, r8
   16fe8:	4203      	tst	r3, r0
   16fea:	d1f3      	bne.n	16fd4 <sd_mmc_check+0x124>
   16fec:	4b27      	ldr	r3, [pc, #156]	; (1708c <sd_mmc_check+0x1dc>)
   16fee:	6819      	ldr	r1, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   16ff0:	7f8b      	ldrb	r3, [r1, #30]
   16ff2:	7820      	ldrb	r0, [r4, #0]
   16ff4:	1e5a      	subs	r2, r3, #1
   16ff6:	4193      	sbcs	r3, r2
   16ff8:	7b4a      	ldrb	r2, [r1, #13]
   16ffa:	b2db      	uxtb	r3, r3
   16ffc:	6809      	ldr	r1, [r1, #0]
   16ffe:	47c8      	blx	r9
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   17000:	2200      	movs	r2, #0
   17002:	4b22      	ldr	r3, [pc, #136]	; (1708c <sd_mmc_check+0x1dc>)
   17004:	681b      	ldr	r3, [r3, #0]
   17006:	729a      	strb	r2, [r3, #10]
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   17008:	7823      	ldrb	r3, [r4, #0]
   1700a:	2b00      	cmp	r3, #0
   1700c:	d00b      	beq.n	17026 <sd_mmc_check+0x176>
		return SD_MMC_INIT_ONGOING;
   1700e:	2501      	movs	r5, #1
   17010:	e75d      	b.n	16ece <sd_mmc_check+0x1e>
	resp = driver_get_response();
   17012:	4b2a      	ldr	r3, [pc, #168]	; (170bc <sd_mmc_check+0x20c>)
   17014:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
   17016:	1c43      	adds	r3, r0, #1
   17018:	d0c2      	beq.n	16fa0 <sd_mmc_check+0xf0>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1701a:	0500      	lsls	r0, r0, #20
   1701c:	0d00      	lsrs	r0, r0, #20
	*v2 = 1;
   1701e:	2501      	movs	r5, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   17020:	4540      	cmp	r0, r8
   17022:	d1a2      	bne.n	16f6a <sd_mmc_check+0xba>
   17024:	e7bc      	b.n	16fa0 <sd_mmc_check+0xf0>
		driver_deselect_device(sd_mmc_slot_sel);
   17026:	2000      	movs	r0, #0
   17028:	4b1a      	ldr	r3, [pc, #104]	; (17094 <sd_mmc_check+0x1e4>)
   1702a:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
   1702c:	2501      	movs	r5, #1
   1702e:	e74e      	b.n	16ece <sd_mmc_check+0x1e>
   17030:	1e6b      	subs	r3, r5, #1
   17032:	419d      	sbcs	r5, r3
   17034:	07ab      	lsls	r3, r5, #30
   17036:	4698      	mov	r8, r3
		resp = driver_get_response();
   17038:	4b20      	ldr	r3, [pc, #128]	; (170bc <sd_mmc_check+0x20c>)
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1703a:	4d23      	ldr	r5, [pc, #140]	; (170c8 <sd_mmc_check+0x218>)
		resp = driver_get_response();
   1703c:	469a      	mov	sl, r3
   1703e:	e00b      	b.n	17058 <sd_mmc_check+0x1a8>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   17040:	4641      	mov	r1, r8
   17042:	4822      	ldr	r0, [pc, #136]	; (170cc <sd_mmc_check+0x21c>)
   17044:	47b0      	blx	r6
   17046:	2800      	cmp	r0, #0
   17048:	d00b      	beq.n	17062 <sd_mmc_check+0x1b2>
		resp = driver_get_response();
   1704a:	47d0      	blx	sl
		if (!(resp & R1_SPI_IDLE)) {
   1704c:	07c3      	lsls	r3, r0, #31
   1704e:	d400      	bmi.n	17052 <sd_mmc_check+0x1a2>
   17050:	e125      	b.n	1729e <sd_mmc_check+0x3ee>
   17052:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   17054:	2d00      	cmp	r5, #0
   17056:	d004      	beq.n	17062 <sd_mmc_check+0x1b2>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   17058:	2100      	movs	r1, #0
   1705a:	481d      	ldr	r0, [pc, #116]	; (170d0 <sd_mmc_check+0x220>)
   1705c:	47b0      	blx	r6
   1705e:	2800      	cmp	r0, #0
   17060:	d1ee      	bne.n	17040 <sd_mmc_check+0x190>
			sd_mmc_card->type = CARD_TYPE_MMC;
   17062:	2302      	movs	r3, #2
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   17064:	2088      	movs	r0, #136	; 0x88
			sd_mmc_card->type = CARD_TYPE_MMC;
   17066:	4a09      	ldr	r2, [pc, #36]	; (1708c <sd_mmc_check+0x1dc>)
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   17068:	2100      	movs	r1, #0
			sd_mmc_card->type = CARD_TYPE_MMC;
   1706a:	6812      	ldr	r2, [r2, #0]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1706c:	0140      	lsls	r0, r0, #5
			sd_mmc_card->type = CARD_TYPE_MMC;
   1706e:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   17070:	47b0      	blx	r6
   17072:	2800      	cmp	r0, #0
   17074:	d100      	bne.n	17078 <sd_mmc_check+0x1c8>
   17076:	e778      	b.n	16f6a <sd_mmc_check+0xba>
		resp = driver_get_response();
   17078:	4b10      	ldr	r3, [pc, #64]	; (170bc <sd_mmc_check+0x20c>)
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1707a:	4d13      	ldr	r5, [pc, #76]	; (170c8 <sd_mmc_check+0x218>)
		resp = driver_get_response();
   1707c:	4698      	mov	r8, r3
		if (!(resp & R1_SPI_IDLE)) {
   1707e:	2301      	movs	r3, #1
   17080:	469a      	mov	sl, r3
   17082:	e02b      	b.n	170dc <sd_mmc_check+0x22c>
   17084:	20000cf4 	.word	0x20000cf4
   17088:	20000cd0 	.word	0x20000cd0
   1708c:	20000ccc 	.word	0x20000ccc
   17090:	000178b9 	.word	0x000178b9
   17094:	000178dd 	.word	0x000178dd
   17098:	20000e68 	.word	0x20000e68
   1709c:	20000e6c 	.word	0x20000e6c
   170a0:	0001ed59 	.word	0x0001ed59
   170a4:	0001f509 	.word	0x0001f509
   170a8:	00017901 	.word	0x00017901
   170ac:	00017e7d 	.word	0x00017e7d
   170b0:	00061a80 	.word	0x00061a80
   170b4:	00005508 	.word	0x00005508
   170b8:	00001110 	.word	0x00001110
   170bc:	00017e95 	.word	0x00017e95
   170c0:	00030d41 	.word	0x00030d41
   170c4:	00001b0d 	.word	0x00001b0d
   170c8:	00001bef 	.word	0x00001bef
   170cc:	00001129 	.word	0x00001129
   170d0:	00001137 	.word	0x00001137
   170d4:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   170d6:	2d00      	cmp	r5, #0
   170d8:	d100      	bne.n	170dc <sd_mmc_check+0x22c>
   170da:	e746      	b.n	16f6a <sd_mmc_check+0xba>
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   170dc:	2100      	movs	r1, #0
   170de:	48d8      	ldr	r0, [pc, #864]	; (17440 <sd_mmc_check+0x590>)
   170e0:	47b0      	blx	r6
   170e2:	2800      	cmp	r0, #0
   170e4:	d100      	bne.n	170e8 <sd_mmc_check+0x238>
   170e6:	e740      	b.n	16f6a <sd_mmc_check+0xba>
		resp = driver_get_response();
   170e8:	47c0      	blx	r8
		if (!(resp & R1_SPI_IDLE)) {
   170ea:	4653      	mov	r3, sl
   170ec:	4203      	tst	r3, r0
   170ee:	d1f1      	bne.n	170d4 <sd_mmc_check+0x224>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   170f0:	2100      	movs	r1, #0
   170f2:	48d4      	ldr	r0, [pc, #848]	; (17444 <sd_mmc_check+0x594>)
   170f4:	47b0      	blx	r6
   170f6:	2800      	cmp	r0, #0
   170f8:	d100      	bne.n	170fc <sd_mmc_check+0x24c>
   170fa:	e736      	b.n	16f6a <sd_mmc_check+0xba>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   170fc:	47c0      	blx	r8
   170fe:	23c0      	movs	r3, #192	; 0xc0
   17100:	05db      	lsls	r3, r3, #23
   17102:	4018      	ands	r0, r3
   17104:	2380      	movs	r3, #128	; 0x80
   17106:	05db      	lsls	r3, r3, #23
   17108:	4298      	cmp	r0, r3
   1710a:	d105      	bne.n	17118 <sd_mmc_check+0x268>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1710c:	4bce      	ldr	r3, [pc, #824]	; (17448 <sd_mmc_check+0x598>)
   1710e:	681a      	ldr	r2, [r3, #0]
   17110:	2308      	movs	r3, #8
   17112:	7ad1      	ldrb	r1, [r2, #11]
   17114:	430b      	orrs	r3, r1
   17116:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   17118:	2100      	movs	r1, #0
   1711a:	48cc      	ldr	r0, [pc, #816]	; (1744c <sd_mmc_check+0x59c>)
   1711c:	47b0      	blx	r6
   1711e:	2800      	cmp	r0, #0
   17120:	d100      	bne.n	17124 <sd_mmc_check+0x274>
   17122:	e722      	b.n	16f6a <sd_mmc_check+0xba>
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   17124:	2501      	movs	r5, #1
   17126:	4bc8      	ldr	r3, [pc, #800]	; (17448 <sd_mmc_check+0x598>)
   17128:	4fc9      	ldr	r7, [pc, #804]	; (17450 <sd_mmc_check+0x5a0>)
   1712a:	681b      	ldr	r3, [r3, #0]
   1712c:	2210      	movs	r2, #16
   1712e:	8919      	ldrh	r1, [r3, #8]
   17130:	48c8      	ldr	r0, [pc, #800]	; (17454 <sd_mmc_check+0x5a4>)
   17132:	0409      	lsls	r1, r1, #16
   17134:	9500      	str	r5, [sp, #0]
   17136:	002b      	movs	r3, r5
   17138:	46ba      	mov	sl, r7
   1713a:	47b8      	blx	r7
   1713c:	2800      	cmp	r0, #0
   1713e:	d100      	bne.n	17142 <sd_mmc_check+0x292>
   17140:	e713      	b.n	16f6a <sd_mmc_check+0xba>
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   17142:	4bc1      	ldr	r3, [pc, #772]	; (17448 <sd_mmc_check+0x598>)
   17144:	0029      	movs	r1, r5
   17146:	6818      	ldr	r0, [r3, #0]
   17148:	4bc3      	ldr	r3, [pc, #780]	; (17458 <sd_mmc_check+0x5a8>)
   1714a:	300e      	adds	r0, #14
   1714c:	4798      	blx	r3
   1714e:	2800      	cmp	r0, #0
   17150:	d100      	bne.n	17154 <sd_mmc_check+0x2a4>
   17152:	e70a      	b.n	16f6a <sd_mmc_check+0xba>
	return driver_wait_end_of_read_blocks();
   17154:	4bc1      	ldr	r3, [pc, #772]	; (1745c <sd_mmc_check+0x5ac>)
   17156:	4798      	blx	r3
	if (!sd_mmc_cmd9_spi()) {
   17158:	2800      	cmp	r0, #0
   1715a:	d100      	bne.n	1715e <sd_mmc_check+0x2ae>
   1715c:	e705      	b.n	16f6a <sd_mmc_check+0xba>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1715e:	4bba      	ldr	r3, [pc, #744]	; (17448 <sd_mmc_check+0x598>)
   17160:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   17162:	7b93      	ldrb	r3, [r2, #14]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   17164:	069b      	lsls	r3, r3, #26
   17166:	0f1b      	lsrs	r3, r3, #28
   17168:	2b02      	cmp	r3, #2
   1716a:	d100      	bne.n	1716e <sd_mmc_check+0x2be>
   1716c:	e160      	b.n	17430 <sd_mmc_check+0x580>
   1716e:	d800      	bhi.n	17172 <sd_mmc_check+0x2c2>
   17170:	e194      	b.n	1749c <sd_mmc_check+0x5ec>
   17172:	2b03      	cmp	r3, #3
   17174:	d100      	bne.n	17178 <sd_mmc_check+0x2c8>
   17176:	e18e      	b.n	17496 <sd_mmc_check+0x5e6>
   17178:	2b04      	cmp	r3, #4
   1717a:	d000      	beq.n	1717e <sd_mmc_check+0x2ce>
   1717c:	e155      	b.n	1742a <sd_mmc_check+0x57a>
		sd_mmc_card->version = CARD_VER_MMC_4;
   1717e:	2340      	movs	r3, #64	; 0x40
   17180:	7313      	strb	r3, [r2, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   17182:	2507      	movs	r5, #7
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   17184:	7c53      	ldrb	r3, [r2, #17]
	sd_mmc_card->clock = unit * mul * 1000;
   17186:	4fb6      	ldr	r7, [pc, #728]	; (17460 <sd_mmc_check+0x5b0>)
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   17188:	08d9      	lsrs	r1, r3, #3
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1718a:	402b      	ands	r3, r5
   1718c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   1718e:	59db      	ldr	r3, [r3, r7]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   17190:	200f      	movs	r0, #15
	sd_mmc_card->clock = unit * mul * 1000;
   17192:	469c      	mov	ip, r3
   17194:	23fa      	movs	r3, #250	; 0xfa
   17196:	4667      	mov	r7, ip
   17198:	009b      	lsls	r3, r3, #2
   1719a:	437b      	muls	r3, r7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1719c:	4001      	ands	r1, r0
	sd_mmc_card->clock = unit * mul * 1000;
   1719e:	4fb1      	ldr	r7, [pc, #708]	; (17464 <sd_mmc_check+0x5b4>)
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   171a0:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
   171a2:	59c9      	ldr	r1, [r1, r7]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   171a4:	7d17      	ldrb	r7, [r2, #20]
   171a6:	434b      	muls	r3, r1
   171a8:	6013      	str	r3, [r2, #0]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   171aa:	7d53      	ldrb	r3, [r2, #21]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   171ac:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   171ae:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   171b0:	02bf      	lsls	r7, r7, #10
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   171b2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   171b4:	433b      	orrs	r3, r7
   171b6:	430b      	orrs	r3, r1
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   171b8:	49ab      	ldr	r1, [pc, #684]	; (17468 <sd_mmc_check+0x5b8>)
	value &=  ((uint32_t)1 << size) - 1;
   171ba:	051b      	lsls	r3, r3, #20
   171bc:	0d1b      	lsrs	r3, r3, #20
   171be:	428b      	cmp	r3, r1
   171c0:	d00f      	beq.n	171e2 <sd_mmc_check+0x332>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   171c2:	7e11      	ldrb	r1, [r2, #24]
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   171c4:	3301      	adds	r3, #1
   171c6:	4129      	asrs	r1, r5
   171c8:	468c      	mov	ip, r1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   171ca:	4667      	mov	r7, ip
   171cc:	7dd1      	ldrb	r1, [r2, #23]
   171ce:	0049      	lsls	r1, r1, #1
   171d0:	4339      	orrs	r1, r7
	value &=  ((uint32_t)1 << size) - 1;
   171d2:	4029      	ands	r1, r5
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   171d4:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   171d6:	408b      	lsls	r3, r1
   171d8:	7cd1      	ldrb	r1, [r2, #19]
   171da:	4008      	ands	r0, r1
		sd_mmc_card->capacity = blocknr *
   171dc:	4083      	lsls	r3, r0
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   171de:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   171e0:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   171e2:	7b13      	ldrb	r3, [r2, #12]
   171e4:	2b3f      	cmp	r3, #63	; 0x3f
   171e6:	d936      	bls.n	17256 <sd_mmc_check+0x3a6>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   171e8:	2100      	movs	r1, #0
   171ea:	2280      	movs	r2, #128	; 0x80
   171ec:	9100      	str	r1, [sp, #0]
   171ee:	2301      	movs	r3, #1
   171f0:	0092      	lsls	r2, r2, #2
   171f2:	489e      	ldr	r0, [pc, #632]	; (1746c <sd_mmc_check+0x5bc>)
   171f4:	47d0      	blx	sl
   171f6:	2800      	cmp	r0, #0
   171f8:	d100      	bne.n	171fc <sd_mmc_check+0x34c>
   171fa:	e6b6      	b.n	16f6a <sd_mmc_check+0xba>
   171fc:	2332      	movs	r3, #50	; 0x32
   171fe:	469a      	mov	sl, r3
   17200:	4d9b      	ldr	r5, [pc, #620]	; (17470 <sd_mmc_check+0x5c0>)
		if (!driver_read_word(&ext_csd)) {
   17202:	a803      	add	r0, sp, #12
   17204:	47a8      	blx	r5
   17206:	2800      	cmp	r0, #0
   17208:	d100      	bne.n	1720c <sd_mmc_check+0x35c>
   1720a:	e6ae      	b.n	16f6a <sd_mmc_check+0xba>
   1720c:	4653      	mov	r3, sl
   1720e:	3b01      	subs	r3, #1
   17210:	b29b      	uxth	r3, r3
   17212:	469a      	mov	sl, r3
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   17214:	2b00      	cmp	r3, #0
   17216:	d1f4      	bne.n	17202 <sd_mmc_check+0x352>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   17218:	4b8b      	ldr	r3, [pc, #556]	; (17448 <sd_mmc_check+0x598>)
   1721a:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1721c:	7d8a      	ldrb	r2, [r1, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1721e:	7d4b      	ldrb	r3, [r1, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   17220:	7d09      	ldrb	r1, [r1, #20]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   17222:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   17224:	0289      	lsls	r1, r1, #10
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   17226:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   17228:	430b      	orrs	r3, r1
   1722a:	4313      	orrs	r3, r2
   1722c:	4a8e      	ldr	r2, [pc, #568]	; (17468 <sd_mmc_check+0x5b8>)
	value &=  ((uint32_t)1 << size) - 1;
   1722e:	051b      	lsls	r3, r3, #20
   17230:	0d1b      	lsrs	r3, r3, #20
   17232:	4293      	cmp	r3, r2
   17234:	d100      	bne.n	17238 <sd_mmc_check+0x388>
   17236:	e0db      	b.n	173f0 <sd_mmc_check+0x540>
   17238:	2332      	movs	r3, #50	; 0x32
   1723a:	469a      	mov	sl, r3
   1723c:	ab04      	add	r3, sp, #16
   1723e:	469b      	mov	fp, r3
		if (!driver_read_word(&sec_count)) {
   17240:	4658      	mov	r0, fp
   17242:	47a8      	blx	r5
   17244:	2800      	cmp	r0, #0
   17246:	d100      	bne.n	1724a <sd_mmc_check+0x39a>
   17248:	e68f      	b.n	16f6a <sd_mmc_check+0xba>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1724a:	4653      	mov	r3, sl
   1724c:	3301      	adds	r3, #1
   1724e:	b29b      	uxth	r3, r3
   17250:	469a      	mov	sl, r3
   17252:	2b80      	cmp	r3, #128	; 0x80
   17254:	d1f4      	bne.n	17240 <sd_mmc_check+0x390>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   17256:	2180      	movs	r1, #128	; 0x80
   17258:	4886      	ldr	r0, [pc, #536]	; (17474 <sd_mmc_check+0x5c4>)
   1725a:	0089      	lsls	r1, r1, #2
   1725c:	47b0      	blx	r6
   1725e:	2800      	cmp	r0, #0
   17260:	d100      	bne.n	17264 <sd_mmc_check+0x3b4>
   17262:	e682      	b.n	16f6a <sd_mmc_check+0xba>
			if (!(driver_get_response() & 0xFF)) {
   17264:	23ff      	movs	r3, #255	; 0xff
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   17266:	4d84      	ldr	r5, [pc, #528]	; (17478 <sd_mmc_check+0x5c8>)
			if (!(driver_get_response() & 0xFF)) {
   17268:	469a      	mov	sl, r3
   1726a:	e003      	b.n	17274 <sd_mmc_check+0x3c4>
   1726c:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
   1726e:	2d00      	cmp	r5, #0
   17270:	d100      	bne.n	17274 <sd_mmc_check+0x3c4>
   17272:	e67a      	b.n	16f6a <sd_mmc_check+0xba>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   17274:	2100      	movs	r1, #0
   17276:	4881      	ldr	r0, [pc, #516]	; (1747c <sd_mmc_check+0x5cc>)
   17278:	47b0      	blx	r6
   1727a:	2800      	cmp	r0, #0
   1727c:	d100      	bne.n	17280 <sd_mmc_check+0x3d0>
   1727e:	e674      	b.n	16f6a <sd_mmc_check+0xba>
			if (!(driver_get_response() & 0xFF)) {
   17280:	47c0      	blx	r8
   17282:	4653      	mov	r3, sl
   17284:	4218      	tst	r0, r3
   17286:	d1f1      	bne.n	1726c <sd_mmc_check+0x3bc>
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   17288:	4b6f      	ldr	r3, [pc, #444]	; (17448 <sd_mmc_check+0x598>)
   1728a:	7820      	ldrb	r0, [r4, #0]
   1728c:	6819      	ldr	r1, [r3, #0]
   1728e:	7f8b      	ldrb	r3, [r1, #30]
   17290:	1e5a      	subs	r2, r3, #1
   17292:	4193      	sbcs	r3, r2
   17294:	7b4a      	ldrb	r2, [r1, #13]
   17296:	b2db      	uxtb	r3, r3
   17298:	6809      	ldr	r1, [r1, #0]
   1729a:	47c8      	blx	r9
   1729c:	e6b0      	b.n	17000 <sd_mmc_check+0x150>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1729e:	2100      	movs	r1, #0
   172a0:	4868      	ldr	r0, [pc, #416]	; (17444 <sd_mmc_check+0x594>)
   172a2:	47b0      	blx	r6
   172a4:	2800      	cmp	r0, #0
   172a6:	d100      	bne.n	172aa <sd_mmc_check+0x3fa>
   172a8:	e6db      	b.n	17062 <sd_mmc_check+0x1b2>
	if ((driver_get_response() & OCR_CCS) != 0) {
   172aa:	47d0      	blx	sl
   172ac:	0043      	lsls	r3, r0, #1
   172ae:	d505      	bpl.n	172bc <sd_mmc_check+0x40c>
		sd_mmc_card->type |= CARD_TYPE_HC;
   172b0:	4b65      	ldr	r3, [pc, #404]	; (17448 <sd_mmc_check+0x598>)
   172b2:	681a      	ldr	r2, [r3, #0]
   172b4:	2308      	movs	r3, #8
   172b6:	7ad1      	ldrb	r1, [r2, #11]
   172b8:	430b      	orrs	r3, r1
   172ba:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   172bc:	2100      	movs	r1, #0
   172be:	4863      	ldr	r0, [pc, #396]	; (1744c <sd_mmc_check+0x59c>)
   172c0:	47b0      	blx	r6
   172c2:	2800      	cmp	r0, #0
   172c4:	d100      	bne.n	172c8 <sd_mmc_check+0x418>
   172c6:	e650      	b.n	16f6a <sd_mmc_check+0xba>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   172c8:	2501      	movs	r5, #1
   172ca:	4b5f      	ldr	r3, [pc, #380]	; (17448 <sd_mmc_check+0x598>)
   172cc:	6819      	ldr	r1, [r3, #0]
   172ce:	7acb      	ldrb	r3, [r1, #11]
   172d0:	422b      	tst	r3, r5
   172d2:	d100      	bne.n	172d6 <sd_mmc_check+0x426>
   172d4:	e0a3      	b.n	1741e <sd_mmc_check+0x56e>
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   172d6:	8909      	ldrh	r1, [r1, #8]
   172d8:	4f5d      	ldr	r7, [pc, #372]	; (17450 <sd_mmc_check+0x5a0>)
   172da:	0409      	lsls	r1, r1, #16
   172dc:	9500      	str	r5, [sp, #0]
   172de:	002b      	movs	r3, r5
   172e0:	2210      	movs	r2, #16
   172e2:	485c      	ldr	r0, [pc, #368]	; (17454 <sd_mmc_check+0x5a4>)
   172e4:	46ba      	mov	sl, r7
   172e6:	47b8      	blx	r7
   172e8:	2800      	cmp	r0, #0
   172ea:	d100      	bne.n	172ee <sd_mmc_check+0x43e>
   172ec:	e63d      	b.n	16f6a <sd_mmc_check+0xba>
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   172ee:	4b56      	ldr	r3, [pc, #344]	; (17448 <sd_mmc_check+0x598>)
   172f0:	0029      	movs	r1, r5
   172f2:	6818      	ldr	r0, [r3, #0]
   172f4:	4b58      	ldr	r3, [pc, #352]	; (17458 <sd_mmc_check+0x5a8>)
   172f6:	300e      	adds	r0, #14
   172f8:	4698      	mov	r8, r3
   172fa:	4798      	blx	r3
   172fc:	2800      	cmp	r0, #0
   172fe:	d100      	bne.n	17302 <sd_mmc_check+0x452>
   17300:	e633      	b.n	16f6a <sd_mmc_check+0xba>
	return driver_wait_end_of_read_blocks();
   17302:	4b56      	ldr	r3, [pc, #344]	; (1745c <sd_mmc_check+0x5ac>)
   17304:	469b      	mov	fp, r3
   17306:	4798      	blx	r3
		if (!sd_mmc_cmd9_spi()) {
   17308:	2800      	cmp	r0, #0
   1730a:	d100      	bne.n	1730e <sd_mmc_check+0x45e>
   1730c:	e62d      	b.n	16f6a <sd_mmc_check+0xba>
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1730e:	2007      	movs	r0, #7
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   17310:	4b4d      	ldr	r3, [pc, #308]	; (17448 <sd_mmc_check+0x598>)
	sd_mmc_card->clock = unit * mul * 1000;
   17312:	4f53      	ldr	r7, [pc, #332]	; (17460 <sd_mmc_check+0x5b0>)
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   17314:	681a      	ldr	r2, [r3, #0]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   17316:	210f      	movs	r1, #15
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   17318:	7c53      	ldrb	r3, [r2, #17]
   1731a:	08dd      	lsrs	r5, r3, #3
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1731c:	4003      	ands	r3, r0
   1731e:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   17320:	59db      	ldr	r3, [r3, r7]
   17322:	27fa      	movs	r7, #250	; 0xfa
   17324:	00bf      	lsls	r7, r7, #2
   17326:	437b      	muls	r3, r7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   17328:	400d      	ands	r5, r1
	sd_mmc_card->clock = unit * mul * 1000;
   1732a:	4f55      	ldr	r7, [pc, #340]	; (17480 <sd_mmc_check+0x5d0>)
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1732c:	00ad      	lsls	r5, r5, #2
	sd_mmc_card->clock = unit * mul * 1000;
   1732e:	59ed      	ldr	r5, [r5, r7]
   17330:	436b      	muls	r3, r5
   17332:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   17334:	7b93      	ldrb	r3, [r2, #14]
   17336:	099b      	lsrs	r3, r3, #6
   17338:	d14c      	bne.n	173d4 <sd_mmc_check+0x524>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1733a:	7d53      	ldrb	r3, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1733c:	7d17      	ldrb	r7, [r2, #20]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1733e:	7d95      	ldrb	r5, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   17340:	02bf      	lsls	r7, r7, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   17342:	009b      	lsls	r3, r3, #2
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   17344:	11ad      	asrs	r5, r5, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   17346:	433b      	orrs	r3, r7
   17348:	432b      	orrs	r3, r5
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1734a:	7dd7      	ldrb	r7, [r2, #23]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1734c:	7e15      	ldrb	r5, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1734e:	007f      	lsls	r7, r7, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   17350:	11ed      	asrs	r5, r5, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   17352:	433d      	orrs	r5, r7
	value &=  ((uint32_t)1 << size) - 1;
   17354:	051b      	lsls	r3, r3, #20
   17356:	0d1b      	lsrs	r3, r3, #20
   17358:	4028      	ands	r0, r5
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1735a:	3002      	adds	r0, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1735c:	3301      	adds	r3, #1
   1735e:	4083      	lsls	r3, r0
   17360:	7cd0      	ldrb	r0, [r2, #19]
   17362:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   17364:	408b      	lsls	r3, r1
				/ 1024;
   17366:	0a9b      	lsrs	r3, r3, #10
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   17368:	8911      	ldrh	r1, [r2, #8]
   1736a:	6053      	str	r3, [r2, #4]
   1736c:	0409      	lsls	r1, r1, #16
   1736e:	4845      	ldr	r0, [pc, #276]	; (17484 <sd_mmc_check+0x5d4>)
   17370:	47b0      	blx	r6
   17372:	2800      	cmp	r0, #0
   17374:	d100      	bne.n	17378 <sd_mmc_check+0x4c8>
   17376:	e5f8      	b.n	16f6a <sd_mmc_check+0xba>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   17378:	2301      	movs	r3, #1
   1737a:	2208      	movs	r2, #8
   1737c:	9300      	str	r3, [sp, #0]
   1737e:	2100      	movs	r1, #0
   17380:	4841      	ldr	r0, [pc, #260]	; (17488 <sd_mmc_check+0x5d8>)
   17382:	47d0      	blx	sl
   17384:	2800      	cmp	r0, #0
   17386:	d100      	bne.n	1738a <sd_mmc_check+0x4da>
   17388:	e5ef      	b.n	16f6a <sd_mmc_check+0xba>
	if (!driver_start_read_blocks(scr, 1)) {
   1738a:	ad04      	add	r5, sp, #16
   1738c:	2101      	movs	r1, #1
   1738e:	0028      	movs	r0, r5
   17390:	47c0      	blx	r8
   17392:	2800      	cmp	r0, #0
   17394:	d100      	bne.n	17398 <sd_mmc_check+0x4e8>
   17396:	e5e8      	b.n	16f6a <sd_mmc_check+0xba>
	if (!driver_wait_end_of_read_blocks()) {
   17398:	47d8      	blx	fp
   1739a:	2800      	cmp	r0, #0
   1739c:	d100      	bne.n	173a0 <sd_mmc_check+0x4f0>
   1739e:	e5e4      	b.n	16f6a <sd_mmc_check+0xba>
	switch (SD_SCR_SD_SPEC(scr)) {
   173a0:	220f      	movs	r2, #15
   173a2:	782b      	ldrb	r3, [r5, #0]
   173a4:	4013      	ands	r3, r2
   173a6:	2b01      	cmp	r3, #1
   173a8:	d070      	beq.n	1748c <sd_mmc_check+0x5dc>
   173aa:	2b00      	cmp	r3, #0
   173ac:	d043      	beq.n	17436 <sd_mmc_check+0x586>
   173ae:	2b02      	cmp	r3, #2
   173b0:	d141      	bne.n	17436 <sd_mmc_check+0x586>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   173b2:	78ab      	ldrb	r3, [r5, #2]
   173b4:	09db      	lsrs	r3, r3, #7
   173b6:	2b01      	cmp	r3, #1
   173b8:	d075      	beq.n	174a6 <sd_mmc_check+0x5f6>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   173ba:	2320      	movs	r3, #32
   173bc:	4a22      	ldr	r2, [pc, #136]	; (17448 <sd_mmc_check+0x598>)
   173be:	6812      	ldr	r2, [r2, #0]
   173c0:	7313      	strb	r3, [r2, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   173c2:	2209      	movs	r2, #9
   173c4:	4b20      	ldr	r3, [pc, #128]	; (17448 <sd_mmc_check+0x598>)
   173c6:	6819      	ldr	r1, [r3, #0]
   173c8:	7acb      	ldrb	r3, [r1, #11]
   173ca:	401a      	ands	r2, r3
   173cc:	2a01      	cmp	r2, #1
   173ce:	d000      	beq.n	173d2 <sd_mmc_check+0x522>
   173d0:	e5f8      	b.n	16fc4 <sd_mmc_check+0x114>
   173d2:	e5ee      	b.n	16fb2 <sd_mmc_check+0x102>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   173d4:	7d93      	ldrb	r3, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   173d6:	7d51      	ldrb	r1, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   173d8:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   173da:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   173dc:	430b      	orrs	r3, r1
				* 512;
   173de:	2180      	movs	r1, #128	; 0x80
   173e0:	0089      	lsls	r1, r1, #2
   173e2:	468c      	mov	ip, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   173e4:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   173e6:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
   173e8:	029b      	lsls	r3, r3, #10
   173ea:	085b      	lsrs	r3, r3, #1
   173ec:	4463      	add	r3, ip
   173ee:	e7bb      	b.n	17368 <sd_mmc_check+0x4b8>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   173f0:	2304      	movs	r3, #4
   173f2:	469a      	mov	sl, r3
   173f4:	ab04      	add	r3, sp, #16
   173f6:	469b      	mov	fp, r3
			if (!driver_read_word(&sec_count)) {
   173f8:	4658      	mov	r0, fp
   173fa:	47a8      	blx	r5
   173fc:	2800      	cmp	r0, #0
   173fe:	d100      	bne.n	17402 <sd_mmc_check+0x552>
   17400:	e5b3      	b.n	16f6a <sd_mmc_check+0xba>
   17402:	4653      	mov	r3, sl
   17404:	3b01      	subs	r3, #1
   17406:	b29b      	uxth	r3, r3
   17408:	469a      	mov	sl, r3
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1740a:	2b00      	cmp	r3, #0
   1740c:	d1f4      	bne.n	173f8 <sd_mmc_check+0x548>
		sd_mmc_card->capacity = sec_count / 2;
   1740e:	4b0e      	ldr	r3, [pc, #56]	; (17448 <sd_mmc_check+0x598>)
   17410:	681a      	ldr	r2, [r3, #0]
   17412:	9b04      	ldr	r3, [sp, #16]
   17414:	085b      	lsrs	r3, r3, #1
   17416:	6053      	str	r3, [r2, #4]
   17418:	2336      	movs	r3, #54	; 0x36
   1741a:	469a      	mov	sl, r3
   1741c:	e710      	b.n	17240 <sd_mmc_check+0x390>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1741e:	2209      	movs	r2, #9
   17420:	4013      	ands	r3, r2
   17422:	2b01      	cmp	r3, #1
   17424:	d000      	beq.n	17428 <sd_mmc_check+0x578>
   17426:	e5e3      	b.n	16ff0 <sd_mmc_check+0x140>
   17428:	e5c3      	b.n	16fb2 <sd_mmc_check+0x102>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1742a:	2312      	movs	r3, #18
   1742c:	7313      	strb	r3, [r2, #12]
   1742e:	e6a8      	b.n	17182 <sd_mmc_check+0x2d2>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   17430:	2322      	movs	r3, #34	; 0x22
   17432:	7313      	strb	r3, [r2, #12]
   17434:	e6a5      	b.n	17182 <sd_mmc_check+0x2d2>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   17436:	2310      	movs	r3, #16
   17438:	4a03      	ldr	r2, [pc, #12]	; (17448 <sd_mmc_check+0x598>)
   1743a:	6812      	ldr	r2, [r2, #0]
   1743c:	7313      	strb	r3, [r2, #12]
   1743e:	e7c0      	b.n	173c2 <sd_mmc_check+0x512>
   17440:	00001101 	.word	0x00001101
   17444:	0000053a 	.word	0x0000053a
   17448:	20000ccc 	.word	0x20000ccc
   1744c:	0000113b 	.word	0x0000113b
   17450:	00017939 	.word	0x00017939
   17454:	00081109 	.word	0x00081109
   17458:	00017f7d 	.word	0x00017f7d
   1745c:	00018059 	.word	0x00018059
   17460:	0002e948 	.word	0x0002e948
   17464:	0002e908 	.word	0x0002e908
   17468:	00000fff 	.word	0x00000fff
   1746c:	00081108 	.word	0x00081108
   17470:	00017ea1 	.word	0x00017ea1
   17474:	00001110 	.word	0x00001110
   17478:	00030d41 	.word	0x00030d41
   1747c:	00001b0d 	.word	0x00001b0d
   17480:	0002e964 	.word	0x0002e964
   17484:	00001137 	.word	0x00001137
   17488:	00081133 	.word	0x00081133
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1748c:	231a      	movs	r3, #26
   1748e:	4a08      	ldr	r2, [pc, #32]	; (174b0 <sd_mmc_check+0x600>)
   17490:	6812      	ldr	r2, [r2, #0]
   17492:	7313      	strb	r3, [r2, #12]
   17494:	e795      	b.n	173c2 <sd_mmc_check+0x512>
		sd_mmc_card->version = CARD_VER_MMC_3;
   17496:	2330      	movs	r3, #48	; 0x30
   17498:	7313      	strb	r3, [r2, #12]
   1749a:	e672      	b.n	17182 <sd_mmc_check+0x2d2>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1749c:	42ab      	cmp	r3, r5
   1749e:	d1c4      	bne.n	1742a <sd_mmc_check+0x57a>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   174a0:	2314      	movs	r3, #20
   174a2:	7313      	strb	r3, [r2, #12]
   174a4:	e66d      	b.n	17182 <sd_mmc_check+0x2d2>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   174a6:	4a02      	ldr	r2, [pc, #8]	; (174b0 <sd_mmc_check+0x600>)
   174a8:	332f      	adds	r3, #47	; 0x2f
   174aa:	6812      	ldr	r2, [r2, #0]
   174ac:	7313      	strb	r3, [r2, #12]
   174ae:	e788      	b.n	173c2 <sd_mmc_check+0x512>
   174b0:	20000ccc 	.word	0x20000ccc

000174b4 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   174b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (slot >= SD_MMC_MEM_CNT) {
   174b6:	2800      	cmp	r0, #0
   174b8:	d001      	beq.n	174be <sd_mmc_get_type+0xa>
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
   174ba:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   174bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   174be:	4c14      	ldr	r4, [pc, #80]	; (17510 <sd_mmc_get_type+0x5c>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   174c0:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   174c2:	3b03      	subs	r3, #3
   174c4:	2b01      	cmp	r3, #1
   174c6:	d919      	bls.n	174fc <sd_mmc_get_type+0x48>
   174c8:	7fa3      	ldrb	r3, [r4, #30]
   174ca:	6821      	ldr	r1, [r4, #0]
   174cc:	1e58      	subs	r0, r3, #1
   174ce:	4183      	sbcs	r3, r0
   174d0:	7b62      	ldrb	r2, [r4, #13]
   174d2:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
   174d4:	2000      	movs	r0, #0
   174d6:	4e0f      	ldr	r6, [pc, #60]	; (17514 <sd_mmc_get_type+0x60>)
	sd_mmc_card = &sd_mmc_cards[slot];
   174d8:	4d0f      	ldr	r5, [pc, #60]	; (17518 <sd_mmc_get_type+0x64>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   174da:	4f10      	ldr	r7, [pc, #64]	; (1751c <sd_mmc_get_type+0x68>)
	sd_mmc_slot_sel = slot;
   174dc:	7030      	strb	r0, [r6, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   174de:	602c      	str	r4, [r5, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   174e0:	47b8      	blx	r7
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   174e2:	7aa3      	ldrb	r3, [r4, #10]
   174e4:	2b02      	cmp	r3, #2
   174e6:	d0e8      	beq.n	174ba <sd_mmc_get_type+0x6>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   174e8:	7833      	ldrb	r3, [r6, #0]
   174ea:	2b00      	cmp	r3, #0
   174ec:	d002      	beq.n	174f4 <sd_mmc_get_type+0x40>
	return sd_mmc_card->type;
   174ee:	682b      	ldr	r3, [r5, #0]
   174f0:	7ad8      	ldrb	r0, [r3, #11]
   174f2:	e7e3      	b.n	174bc <sd_mmc_get_type+0x8>
		driver_deselect_device(sd_mmc_slot_sel);
   174f4:	2000      	movs	r0, #0
   174f6:	4b0a      	ldr	r3, [pc, #40]	; (17520 <sd_mmc_get_type+0x6c>)
   174f8:	4798      	blx	r3
   174fa:	e7f8      	b.n	174ee <sd_mmc_get_type+0x3a>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   174fc:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   174fe:	4909      	ldr	r1, [pc, #36]	; (17524 <sd_mmc_get_type+0x70>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   17500:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
   17502:	3b01      	subs	r3, #1
   17504:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   17506:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
   17508:	77a0      	strb	r0, [r4, #30]
   1750a:	2300      	movs	r3, #0
   1750c:	2201      	movs	r2, #1
   1750e:	e7e1      	b.n	174d4 <sd_mmc_get_type+0x20>
   17510:	20000cd0 	.word	0x20000cd0
   17514:	20000cf4 	.word	0x20000cf4
   17518:	20000ccc 	.word	0x20000ccc
   1751c:	000178b9 	.word	0x000178b9
   17520:	000178dd 	.word	0x000178dd
   17524:	00061a80 	.word	0x00061a80

00017528 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   17528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (slot >= SD_MMC_MEM_CNT) {
   1752a:	2800      	cmp	r0, #0
   1752c:	d001      	beq.n	17532 <sd_mmc_get_capacity+0xa>
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
   1752e:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   17530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   17532:	4c14      	ldr	r4, [pc, #80]	; (17584 <sd_mmc_get_capacity+0x5c>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   17534:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   17536:	3b03      	subs	r3, #3
   17538:	2b01      	cmp	r3, #1
   1753a:	d919      	bls.n	17570 <sd_mmc_get_capacity+0x48>
   1753c:	7fa3      	ldrb	r3, [r4, #30]
   1753e:	6821      	ldr	r1, [r4, #0]
   17540:	1e58      	subs	r0, r3, #1
   17542:	4183      	sbcs	r3, r0
   17544:	7b62      	ldrb	r2, [r4, #13]
   17546:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
   17548:	2000      	movs	r0, #0
   1754a:	4e0f      	ldr	r6, [pc, #60]	; (17588 <sd_mmc_get_capacity+0x60>)
	sd_mmc_card = &sd_mmc_cards[slot];
   1754c:	4d0f      	ldr	r5, [pc, #60]	; (1758c <sd_mmc_get_capacity+0x64>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1754e:	4f10      	ldr	r7, [pc, #64]	; (17590 <sd_mmc_get_capacity+0x68>)
	sd_mmc_slot_sel = slot;
   17550:	7030      	strb	r0, [r6, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   17552:	602c      	str	r4, [r5, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   17554:	47b8      	blx	r7
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   17556:	7aa3      	ldrb	r3, [r4, #10]
   17558:	2b02      	cmp	r3, #2
   1755a:	d0e8      	beq.n	1752e <sd_mmc_get_capacity+0x6>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1755c:	7833      	ldrb	r3, [r6, #0]
   1755e:	2b00      	cmp	r3, #0
   17560:	d002      	beq.n	17568 <sd_mmc_get_capacity+0x40>
	return sd_mmc_card->capacity;
   17562:	682b      	ldr	r3, [r5, #0]
   17564:	6858      	ldr	r0, [r3, #4]
   17566:	e7e3      	b.n	17530 <sd_mmc_get_capacity+0x8>
		driver_deselect_device(sd_mmc_slot_sel);
   17568:	2000      	movs	r0, #0
   1756a:	4b0a      	ldr	r3, [pc, #40]	; (17594 <sd_mmc_get_capacity+0x6c>)
   1756c:	4798      	blx	r3
   1756e:	e7f8      	b.n	17562 <sd_mmc_get_capacity+0x3a>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   17570:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   17572:	4909      	ldr	r1, [pc, #36]	; (17598 <sd_mmc_get_capacity+0x70>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   17574:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
   17576:	3b01      	subs	r3, #1
   17578:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1757a:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1757c:	77a0      	strb	r0, [r4, #30]
   1757e:	2300      	movs	r3, #0
   17580:	2201      	movs	r2, #1
   17582:	e7e1      	b.n	17548 <sd_mmc_get_capacity+0x20>
   17584:	20000cd0 	.word	0x20000cd0
   17588:	20000cf4 	.word	0x20000cf4
   1758c:	20000ccc 	.word	0x20000ccc
   17590:	000178b9 	.word	0x000178b9
   17594:	000178dd 	.word	0x000178dd
   17598:	00061a80 	.word	0x00061a80

0001759c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   1759c:	2000      	movs	r0, #0
   1759e:	4770      	bx	lr

000175a0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   175a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   175a2:	464e      	mov	r6, r9
   175a4:	4645      	mov	r5, r8
   175a6:	46de      	mov	lr, fp
   175a8:	4657      	mov	r7, sl
   175aa:	b5e0      	push	{r5, r6, r7, lr}
   175ac:	4689      	mov	r9, r1
   175ae:	b083      	sub	sp, #12
   175b0:	4690      	mov	r8, r2
		return SD_MMC_ERR_SLOT;
   175b2:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
   175b4:	2800      	cmp	r0, #0
   175b6:	d007      	beq.n	175c8 <sd_mmc_init_read_blocks+0x28>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   175b8:	0018      	movs	r0, r3
   175ba:	b003      	add	sp, #12
   175bc:	bc3c      	pop	{r2, r3, r4, r5}
   175be:	4690      	mov	r8, r2
   175c0:	4699      	mov	r9, r3
   175c2:	46a2      	mov	sl, r4
   175c4:	46ab      	mov	fp, r5
   175c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   175c8:	4c2e      	ldr	r4, [pc, #184]	; (17684 <sd_mmc_init_read_blocks+0xe4>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   175ca:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   175cc:	3b03      	subs	r3, #3
   175ce:	2b01      	cmp	r3, #1
   175d0:	d94c      	bls.n	1766c <sd_mmc_init_read_blocks+0xcc>
   175d2:	7fa3      	ldrb	r3, [r4, #30]
   175d4:	6821      	ldr	r1, [r4, #0]
   175d6:	1e58      	subs	r0, r3, #1
   175d8:	4183      	sbcs	r3, r0
   175da:	7b62      	ldrb	r2, [r4, #13]
   175dc:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
   175de:	482a      	ldr	r0, [pc, #168]	; (17688 <sd_mmc_init_read_blocks+0xe8>)
   175e0:	4682      	mov	sl, r0
   175e2:	2000      	movs	r0, #0
   175e4:	4655      	mov	r5, sl
   175e6:	7028      	strb	r0, [r5, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   175e8:	4828      	ldr	r0, [pc, #160]	; (1768c <sd_mmc_init_read_blocks+0xec>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   175ea:	4d29      	ldr	r5, [pc, #164]	; (17690 <sd_mmc_init_read_blocks+0xf0>)
	sd_mmc_card = &sd_mmc_cards[slot];
   175ec:	6004      	str	r4, [r0, #0]
   175ee:	4683      	mov	fp, r0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   175f0:	2000      	movs	r0, #0
   175f2:	47a8      	blx	r5
	if (sd_mmc_err != SD_MMC_OK) {
   175f4:	7aa2      	ldrb	r2, [r4, #10]
   175f6:	2301      	movs	r3, #1
   175f8:	2a02      	cmp	r2, #2
   175fa:	d0dd      	beq.n	175b8 <sd_mmc_init_read_blocks+0x18>
   175fc:	4c25      	ldr	r4, [pc, #148]	; (17694 <sd_mmc_init_read_blocks+0xf4>)
   175fe:	4d26      	ldr	r5, [pc, #152]	; (17698 <sd_mmc_init_read_blocks+0xf8>)
			if (!(driver_get_response() & 0xFF)) {
   17600:	4f26      	ldr	r7, [pc, #152]	; (1769c <sd_mmc_init_read_blocks+0xfc>)
   17602:	26ff      	movs	r6, #255	; 0xff
   17604:	e005      	b.n	17612 <sd_mmc_init_read_blocks+0x72>
   17606:	47b8      	blx	r7
   17608:	4206      	tst	r6, r0
   1760a:	d00d      	beq.n	17628 <sd_mmc_init_read_blocks+0x88>
   1760c:	3c01      	subs	r4, #1
		if (nec_timeout-- == 0) {
   1760e:	2c00      	cmp	r4, #0
   17610:	d004      	beq.n	1761c <sd_mmc_init_read_blocks+0x7c>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   17612:	2100      	movs	r1, #0
   17614:	4822      	ldr	r0, [pc, #136]	; (176a0 <sd_mmc_init_read_blocks+0x100>)
   17616:	47a8      	blx	r5
   17618:	2800      	cmp	r0, #0
   1761a:	d1f4      	bne.n	17606 <sd_mmc_init_read_blocks+0x66>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1761c:	4653      	mov	r3, sl
   1761e:	781b      	ldrb	r3, [r3, #0]
   17620:	2b00      	cmp	r3, #0
   17622:	d01e      	beq.n	17662 <sd_mmc_init_read_blocks+0xc2>
		return SD_MMC_ERR_COMM;
   17624:	2305      	movs	r3, #5
   17626:	e7c7      	b.n	175b8 <sd_mmc_init_read_blocks+0x18>
	if (nb_block > 1) {
   17628:	4643      	mov	r3, r8
   1762a:	2b01      	cmp	r3, #1
   1762c:	d928      	bls.n	17680 <sd_mmc_init_read_blocks+0xe0>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1762e:	481d      	ldr	r0, [pc, #116]	; (176a4 <sd_mmc_init_read_blocks+0x104>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   17630:	465b      	mov	r3, fp
   17632:	681b      	ldr	r3, [r3, #0]
   17634:	7adb      	ldrb	r3, [r3, #11]
   17636:	071b      	lsls	r3, r3, #28
   17638:	d402      	bmi.n	17640 <sd_mmc_init_read_blocks+0xa0>
		arg = (start * SD_MMC_BLOCK_SIZE);
   1763a:	464b      	mov	r3, r9
   1763c:	025b      	lsls	r3, r3, #9
   1763e:	4699      	mov	r9, r3
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   17640:	2301      	movs	r3, #1
   17642:	2280      	movs	r2, #128	; 0x80
   17644:	9300      	str	r3, [sp, #0]
   17646:	0092      	lsls	r2, r2, #2
   17648:	4643      	mov	r3, r8
   1764a:	4649      	mov	r1, r9
   1764c:	4c16      	ldr	r4, [pc, #88]	; (176a8 <sd_mmc_init_read_blocks+0x108>)
   1764e:	47a0      	blx	r4
   17650:	2800      	cmp	r0, #0
   17652:	d0e3      	beq.n	1761c <sd_mmc_init_read_blocks+0x7c>
	sd_mmc_nb_block_remaining = nb_block;
   17654:	4642      	mov	r2, r8
   17656:	4b15      	ldr	r3, [pc, #84]	; (176ac <sd_mmc_init_read_blocks+0x10c>)
   17658:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1765a:	4b15      	ldr	r3, [pc, #84]	; (176b0 <sd_mmc_init_read_blocks+0x110>)
   1765c:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1765e:	2300      	movs	r3, #0
   17660:	e7aa      	b.n	175b8 <sd_mmc_init_read_blocks+0x18>
		driver_deselect_device(sd_mmc_slot_sel);
   17662:	4b14      	ldr	r3, [pc, #80]	; (176b4 <sd_mmc_init_read_blocks+0x114>)
   17664:	2000      	movs	r0, #0
   17666:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   17668:	2305      	movs	r3, #5
   1766a:	e7a5      	b.n	175b8 <sd_mmc_init_read_blocks+0x18>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1766c:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1766e:	4912      	ldr	r1, [pc, #72]	; (176b8 <sd_mmc_init_read_blocks+0x118>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   17670:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
   17672:	3b01      	subs	r3, #1
   17674:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   17676:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
   17678:	77a0      	strb	r0, [r4, #30]
   1767a:	2300      	movs	r3, #0
   1767c:	2201      	movs	r2, #1
   1767e:	e7ae      	b.n	175de <sd_mmc_init_read_blocks+0x3e>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   17680:	480e      	ldr	r0, [pc, #56]	; (176bc <sd_mmc_init_read_blocks+0x11c>)
   17682:	e7d5      	b.n	17630 <sd_mmc_init_read_blocks+0x90>
   17684:	20000cd0 	.word	0x20000cd0
   17688:	20000cf4 	.word	0x20000cf4
   1768c:	20000ccc 	.word	0x20000ccc
   17690:	000178b9 	.word	0x000178b9
   17694:	00030d41 	.word	0x00030d41
   17698:	00017e7d 	.word	0x00017e7d
   1769c:	00017e95 	.word	0x00017e95
   176a0:	00001b0d 	.word	0x00001b0d
   176a4:	00101112 	.word	0x00101112
   176a8:	00017939 	.word	0x00017939
   176ac:	20000cf0 	.word	0x20000cf0
   176b0:	20000cf2 	.word	0x20000cf2
   176b4:	000178dd 	.word	0x000178dd
   176b8:	00061a80 	.word	0x00061a80
   176bc:	00081111 	.word	0x00081111

000176c0 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   176c0:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   176c2:	4b08      	ldr	r3, [pc, #32]	; (176e4 <sd_mmc_start_read_blocks+0x24>)
{
   176c4:	000c      	movs	r4, r1
	if (!driver_start_read_blocks(dest, nb_block)) {
   176c6:	4798      	blx	r3
   176c8:	2800      	cmp	r0, #0
   176ca:	d104      	bne.n	176d6 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   176cc:	2100      	movs	r1, #0
		return SD_MMC_ERR_COMM;
   176ce:	2005      	movs	r0, #5
   176d0:	4b05      	ldr	r3, [pc, #20]	; (176e8 <sd_mmc_start_read_blocks+0x28>)
   176d2:	8019      	strh	r1, [r3, #0]
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   176d4:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   176d6:	4b04      	ldr	r3, [pc, #16]	; (176e8 <sd_mmc_start_read_blocks+0x28>)
	return SD_MMC_OK;
   176d8:	2000      	movs	r0, #0
	sd_mmc_nb_block_remaining -= nb_block;
   176da:	8819      	ldrh	r1, [r3, #0]
   176dc:	1b09      	subs	r1, r1, r4
   176de:	b289      	uxth	r1, r1
	return SD_MMC_OK;
   176e0:	e7f7      	b.n	176d2 <sd_mmc_start_read_blocks+0x12>
   176e2:	46c0      	nop			; (mov r8, r8)
   176e4:	00017f7d 	.word	0x00017f7d
   176e8:	20000cf0 	.word	0x20000cf0

000176ec <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   176ec:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_read_blocks()) {
   176ee:	4b15      	ldr	r3, [pc, #84]	; (17744 <sd_mmc_wait_end_of_read_blocks+0x58>)
{
   176f0:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
   176f2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   176f4:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
   176f6:	2800      	cmp	r0, #0
   176f8:	d101      	bne.n	176fe <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   176fa:	0018      	movs	r0, r3
   176fc:	bd10      	pop	{r4, pc}
	if (abort) {
   176fe:	2c00      	cmp	r4, #0
   17700:	d113      	bne.n	1772a <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   17702:	4b11      	ldr	r3, [pc, #68]	; (17748 <sd_mmc_wait_end_of_read_blocks+0x5c>)
   17704:	881b      	ldrh	r3, [r3, #0]
   17706:	2b00      	cmp	r3, #0
   17708:	d10d      	bne.n	17726 <sd_mmc_wait_end_of_read_blocks+0x3a>
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1770a:	4b10      	ldr	r3, [pc, #64]	; (1774c <sd_mmc_wait_end_of_read_blocks+0x60>)
   1770c:	881b      	ldrh	r3, [r3, #0]
   1770e:	2b01      	cmp	r3, #1
   17710:	d005      	beq.n	1771e <sd_mmc_wait_end_of_read_blocks+0x32>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   17712:	2100      	movs	r1, #0
   17714:	480e      	ldr	r0, [pc, #56]	; (17750 <sd_mmc_wait_end_of_read_blocks+0x64>)
   17716:	4c0f      	ldr	r4, [pc, #60]	; (17754 <sd_mmc_wait_end_of_read_blocks+0x68>)
   17718:	47a0      	blx	r4
   1771a:	2800      	cmp	r0, #0
   1771c:	d00e      	beq.n	1773c <sd_mmc_wait_end_of_read_blocks+0x50>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1771e:	4b0e      	ldr	r3, [pc, #56]	; (17758 <sd_mmc_wait_end_of_read_blocks+0x6c>)
   17720:	781b      	ldrb	r3, [r3, #0]
   17722:	2b00      	cmp	r3, #0
   17724:	d005      	beq.n	17732 <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
   17726:	2300      	movs	r3, #0
   17728:	e7e7      	b.n	176fa <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_nb_block_remaining = 0;
   1772a:	2200      	movs	r2, #0
   1772c:	4b06      	ldr	r3, [pc, #24]	; (17748 <sd_mmc_wait_end_of_read_blocks+0x5c>)
   1772e:	801a      	strh	r2, [r3, #0]
   17730:	e7eb      	b.n	1770a <sd_mmc_wait_end_of_read_blocks+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
   17732:	4b0a      	ldr	r3, [pc, #40]	; (1775c <sd_mmc_wait_end_of_read_blocks+0x70>)
   17734:	2000      	movs	r0, #0
   17736:	4798      	blx	r3
		return SD_MMC_OK;
   17738:	2300      	movs	r3, #0
   1773a:	e7de      	b.n	176fa <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1773c:	2100      	movs	r1, #0
   1773e:	4804      	ldr	r0, [pc, #16]	; (17750 <sd_mmc_wait_end_of_read_blocks+0x64>)
   17740:	47a0      	blx	r4
   17742:	e7ec      	b.n	1771e <sd_mmc_wait_end_of_read_blocks+0x32>
   17744:	00018059 	.word	0x00018059
   17748:	20000cf0 	.word	0x20000cf0
   1774c:	20000cf2 	.word	0x20000cf2
   17750:	0000310c 	.word	0x0000310c
   17754:	00017e7d 	.word	0x00017e7d
   17758:	20000cf4 	.word	0x20000cf4
   1775c:	000178dd 	.word	0x000178dd

00017760 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   17760:	b5f0      	push	{r4, r5, r6, r7, lr}
   17762:	4646      	mov	r6, r8
   17764:	46d6      	mov	lr, sl
   17766:	464f      	mov	r7, r9
   17768:	b5c0      	push	{r6, r7, lr}
   1776a:	0015      	movs	r5, r2
   1776c:	b082      	sub	sp, #8
   1776e:	000e      	movs	r6, r1
		return SD_MMC_ERR_SLOT;
   17770:	2404      	movs	r4, #4
	if (slot >= SD_MMC_MEM_CNT) {
   17772:	2800      	cmp	r0, #0
   17774:	d006      	beq.n	17784 <sd_mmc_init_write_blocks+0x24>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   17776:	0020      	movs	r0, r4
   17778:	b002      	add	sp, #8
   1777a:	bc1c      	pop	{r2, r3, r4}
   1777c:	4690      	mov	r8, r2
   1777e:	4699      	mov	r9, r3
   17780:	46a2      	mov	sl, r4
   17782:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   17784:	4c23      	ldr	r4, [pc, #140]	; (17814 <sd_mmc_init_write_blocks+0xb4>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   17786:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   17788:	3b03      	subs	r3, #3
   1778a:	2b01      	cmp	r3, #1
   1778c:	d937      	bls.n	177fe <sd_mmc_init_write_blocks+0x9e>
   1778e:	7fa3      	ldrb	r3, [r4, #30]
   17790:	6821      	ldr	r1, [r4, #0]
   17792:	1e58      	subs	r0, r3, #1
   17794:	4183      	sbcs	r3, r0
   17796:	7b62      	ldrb	r2, [r4, #13]
   17798:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
   1779a:	481f      	ldr	r0, [pc, #124]	; (17818 <sd_mmc_init_write_blocks+0xb8>)
   1779c:	4682      	mov	sl, r0
   1779e:	2000      	movs	r0, #0
   177a0:	4657      	mov	r7, sl
   177a2:	7038      	strb	r0, [r7, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   177a4:	481d      	ldr	r0, [pc, #116]	; (1781c <sd_mmc_init_write_blocks+0xbc>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   177a6:	4f1e      	ldr	r7, [pc, #120]	; (17820 <sd_mmc_init_write_blocks+0xc0>)
	sd_mmc_card = &sd_mmc_cards[slot];
   177a8:	6004      	str	r4, [r0, #0]
   177aa:	4680      	mov	r8, r0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   177ac:	2000      	movs	r0, #0
   177ae:	47b8      	blx	r7
	if (sd_mmc_err != SD_MMC_OK) {
   177b0:	7aa3      	ldrb	r3, [r4, #10]
   177b2:	2401      	movs	r4, #1
   177b4:	2b02      	cmp	r3, #2
   177b6:	d0de      	beq.n	17776 <sd_mmc_init_write_blocks+0x16>
	if (nb_block > 1) {
   177b8:	2d01      	cmp	r5, #1
   177ba:	d91e      	bls.n	177fa <sd_mmc_init_write_blocks+0x9a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   177bc:	4819      	ldr	r0, [pc, #100]	; (17824 <sd_mmc_init_write_blocks+0xc4>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   177be:	4643      	mov	r3, r8
   177c0:	681b      	ldr	r3, [r3, #0]
   177c2:	7adb      	ldrb	r3, [r3, #11]
   177c4:	071b      	lsls	r3, r3, #28
   177c6:	d400      	bmi.n	177ca <sd_mmc_init_write_blocks+0x6a>
		arg = (start * SD_MMC_BLOCK_SIZE);
   177c8:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   177ca:	2301      	movs	r3, #1
   177cc:	2280      	movs	r2, #128	; 0x80
   177ce:	9300      	str	r3, [sp, #0]
   177d0:	0092      	lsls	r2, r2, #2
   177d2:	002b      	movs	r3, r5
   177d4:	0031      	movs	r1, r6
   177d6:	4c14      	ldr	r4, [pc, #80]	; (17828 <sd_mmc_init_write_blocks+0xc8>)
   177d8:	47a0      	blx	r4
   177da:	2800      	cmp	r0, #0
   177dc:	d107      	bne.n	177ee <sd_mmc_init_write_blocks+0x8e>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   177de:	4653      	mov	r3, sl
   177e0:	781b      	ldrb	r3, [r3, #0]
		return SD_MMC_ERR_COMM;
   177e2:	2405      	movs	r4, #5
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   177e4:	2b00      	cmp	r3, #0
   177e6:	d1c6      	bne.n	17776 <sd_mmc_init_write_blocks+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   177e8:	4b10      	ldr	r3, [pc, #64]	; (1782c <sd_mmc_init_write_blocks+0xcc>)
   177ea:	4798      	blx	r3
   177ec:	e7c3      	b.n	17776 <sd_mmc_init_write_blocks+0x16>
	sd_mmc_nb_block_remaining = nb_block;
   177ee:	4b10      	ldr	r3, [pc, #64]	; (17830 <sd_mmc_init_write_blocks+0xd0>)
	return SD_MMC_OK;
   177f0:	2400      	movs	r4, #0
	sd_mmc_nb_block_remaining = nb_block;
   177f2:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   177f4:	4b0f      	ldr	r3, [pc, #60]	; (17834 <sd_mmc_init_write_blocks+0xd4>)
   177f6:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
   177f8:	e7bd      	b.n	17776 <sd_mmc_init_write_blocks+0x16>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   177fa:	480f      	ldr	r0, [pc, #60]	; (17838 <sd_mmc_init_write_blocks+0xd8>)
   177fc:	e7df      	b.n	177be <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   177fe:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   17800:	490e      	ldr	r1, [pc, #56]	; (1783c <sd_mmc_init_write_blocks+0xdc>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   17802:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
   17804:	3b01      	subs	r3, #1
   17806:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   17808:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1780a:	77a0      	strb	r0, [r4, #30]
   1780c:	2300      	movs	r3, #0
   1780e:	2201      	movs	r2, #1
   17810:	e7c3      	b.n	1779a <sd_mmc_init_write_blocks+0x3a>
   17812:	46c0      	nop			; (mov r8, r8)
   17814:	20000cd0 	.word	0x20000cd0
   17818:	20000cf4 	.word	0x20000cf4
   1781c:	20000ccc 	.word	0x20000ccc
   17820:	000178b9 	.word	0x000178b9
   17824:	00109119 	.word	0x00109119
   17828:	00017939 	.word	0x00017939
   1782c:	000178dd 	.word	0x000178dd
   17830:	20000cf0 	.word	0x20000cf0
   17834:	20000cf2 	.word	0x20000cf2
   17838:	00089118 	.word	0x00089118
   1783c:	00061a80 	.word	0x00061a80

00017840 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   17840:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   17842:	4b08      	ldr	r3, [pc, #32]	; (17864 <sd_mmc_start_write_blocks+0x24>)
{
   17844:	000c      	movs	r4, r1
	if (!driver_start_write_blocks(src, nb_block)) {
   17846:	4798      	blx	r3
   17848:	2800      	cmp	r0, #0
   1784a:	d104      	bne.n	17856 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   1784c:	2100      	movs	r1, #0
		return SD_MMC_ERR_COMM;
   1784e:	2005      	movs	r0, #5
   17850:	4b05      	ldr	r3, [pc, #20]	; (17868 <sd_mmc_start_write_blocks+0x28>)
   17852:	8019      	strh	r1, [r3, #0]
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   17854:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   17856:	4b04      	ldr	r3, [pc, #16]	; (17868 <sd_mmc_start_write_blocks+0x28>)
	return SD_MMC_OK;
   17858:	2000      	movs	r0, #0
	sd_mmc_nb_block_remaining -= nb_block;
   1785a:	8819      	ldrh	r1, [r3, #0]
   1785c:	1b09      	subs	r1, r1, r4
   1785e:	b289      	uxth	r1, r1
	return SD_MMC_OK;
   17860:	e7f7      	b.n	17852 <sd_mmc_start_write_blocks+0x12>
   17862:	46c0      	nop			; (mov r8, r8)
   17864:	0001805d 	.word	0x0001805d
   17868:	20000cf0 	.word	0x20000cf0

0001786c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1786c:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_write_blocks()) {
   1786e:	4b0e      	ldr	r3, [pc, #56]	; (178a8 <sd_mmc_wait_end_of_write_blocks+0x3c>)
{
   17870:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
   17872:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   17874:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
   17876:	2800      	cmp	r0, #0
   17878:	d101      	bne.n	1787e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   1787a:	0018      	movs	r0, r3
   1787c:	bd10      	pop	{r4, pc}
	if (abort) {
   1787e:	2c00      	cmp	r4, #0
   17880:	d109      	bne.n	17896 <sd_mmc_wait_end_of_write_blocks+0x2a>
	} else if (sd_mmc_nb_block_remaining) {
   17882:	4b0a      	ldr	r3, [pc, #40]	; (178ac <sd_mmc_wait_end_of_write_blocks+0x40>)
   17884:	881b      	ldrh	r3, [r3, #0]
   17886:	2b00      	cmp	r3, #0
   17888:	d103      	bne.n	17892 <sd_mmc_wait_end_of_write_blocks+0x26>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1788a:	4b09      	ldr	r3, [pc, #36]	; (178b0 <sd_mmc_wait_end_of_write_blocks+0x44>)
   1788c:	781b      	ldrb	r3, [r3, #0]
   1788e:	2b00      	cmp	r3, #0
   17890:	d005      	beq.n	1789e <sd_mmc_wait_end_of_write_blocks+0x32>
		return SD_MMC_OK;
   17892:	2300      	movs	r3, #0
   17894:	e7f1      	b.n	1787a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_nb_block_remaining = 0;
   17896:	2200      	movs	r2, #0
   17898:	4b04      	ldr	r3, [pc, #16]	; (178ac <sd_mmc_wait_end_of_write_blocks+0x40>)
   1789a:	801a      	strh	r2, [r3, #0]
   1789c:	e7f5      	b.n	1788a <sd_mmc_wait_end_of_write_blocks+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
   1789e:	4b05      	ldr	r3, [pc, #20]	; (178b4 <sd_mmc_wait_end_of_write_blocks+0x48>)
   178a0:	2000      	movs	r0, #0
   178a2:	4798      	blx	r3
		return SD_MMC_OK;
   178a4:	2300      	movs	r3, #0
   178a6:	e7e8      	b.n	1787a <sd_mmc_wait_end_of_write_blocks+0xe>
   178a8:	000181ad 	.word	0x000181ad
   178ac:	20000cf0 	.word	0x20000cf0
   178b0:	20000cf4 	.word	0x20000cf4
   178b4:	000178dd 	.word	0x000178dd

000178b8 <sd_mmc_spi_select_device>:
void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   178b8:	2200      	movs	r2, #0
{
   178ba:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   178bc:	4b03      	ldr	r3, [pc, #12]	; (178cc <sd_mmc_spi_select_device+0x14>)
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&spi_main, clock)) {
		clock -= clock / 8;
	}
	*/
	//spi_select_slave(&spi_main, &sd_mmc_spi_devices[slot], true);
	spi_select_slave(&spi_main, &slave_SD, true);//Kfausnight 20200721
   178be:	4904      	ldr	r1, [pc, #16]	; (178d0 <sd_mmc_spi_select_device+0x18>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   178c0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_main, &slave_SD, true);//Kfausnight 20200721
   178c2:	4804      	ldr	r0, [pc, #16]	; (178d4 <sd_mmc_spi_select_device+0x1c>)
   178c4:	3201      	adds	r2, #1
   178c6:	4b04      	ldr	r3, [pc, #16]	; (178d8 <sd_mmc_spi_select_device+0x20>)
   178c8:	4798      	blx	r3
}
   178ca:	bd10      	pop	{r4, pc}
   178cc:	20000cf8 	.word	0x20000cf8
   178d0:	20000e68 	.word	0x20000e68
   178d4:	20000e6c 	.word	0x20000e6c
   178d8:	0001ed59 	.word	0x0001ed59

000178dc <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   178dc:	2200      	movs	r2, #0
{
   178de:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   178e0:	4b03      	ldr	r3, [pc, #12]	; (178f0 <sd_mmc_spi_deselect_device+0x14>)
	//spi_select_slave(&spi_main, &sd_mmc_spi_devices[slot], false);
	spi_select_slave(&spi_main, &slave_SD, false);//Kfausnight 20200721
   178e2:	4904      	ldr	r1, [pc, #16]	; (178f4 <sd_mmc_spi_deselect_device+0x18>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   178e4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_main, &slave_SD, false);//Kfausnight 20200721
   178e6:	4804      	ldr	r0, [pc, #16]	; (178f8 <sd_mmc_spi_deselect_device+0x1c>)
   178e8:	4b04      	ldr	r3, [pc, #16]	; (178fc <sd_mmc_spi_deselect_device+0x20>)
   178ea:	4798      	blx	r3
}
   178ec:	bd10      	pop	{r4, pc}
   178ee:	46c0      	nop			; (mov r8, r8)
   178f0:	20000cf8 	.word	0x20000cf8
   178f4:	20000e68 	.word	0x20000e68
   178f8:	20000e6c 	.word	0x20000e6c
   178fc:	0001ed59 	.word	0x0001ed59

00017900 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   17900:	b5f0      	push	{r4, r5, r6, r7, lr}
   17902:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
   17904:	466b      	mov	r3, sp
   17906:	1ddd      	adds	r5, r3, #7
   17908:	23ff      	movs	r3, #255	; 0xff

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1790a:	2200      	movs	r2, #0
   1790c:	240a      	movs	r4, #10
	uint8_t dummy = 0xFF;
   1790e:	702b      	strb	r3, [r5, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   17910:	4b06      	ldr	r3, [pc, #24]	; (1792c <sd_mmc_spi_send_clock+0x2c>)
   17912:	4f07      	ldr	r7, [pc, #28]	; (17930 <sd_mmc_spi_send_clock+0x30>)
   17914:	4e07      	ldr	r6, [pc, #28]	; (17934 <sd_mmc_spi_send_clock+0x34>)
   17916:	701a      	strb	r2, [r3, #0]
   17918:	3c01      	subs	r4, #1
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&spi_main, &dummy, 1); // 8 cycles
   1791a:	2201      	movs	r2, #1
   1791c:	0029      	movs	r1, r5
   1791e:	0038      	movs	r0, r7
   17920:	b2e4      	uxtb	r4, r4
   17922:	47b0      	blx	r6
	for (i = 0; i < 10; i++) {
   17924:	2c00      	cmp	r4, #0
   17926:	d1f7      	bne.n	17918 <sd_mmc_spi_send_clock+0x18>
	}
}
   17928:	b003      	add	sp, #12
   1792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1792c:	20000cf8 	.word	0x20000cf8
   17930:	20000e6c 	.word	0x20000e6c
   17934:	0001ee2d 	.word	0x0001ee2d

00017938 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   17938:	b5f0      	push	{r4, r5, r6, r7, lr}
   1793a:	4657      	mov	r7, sl
   1793c:	464e      	mov	r6, r9
   1793e:	4645      	mov	r5, r8
   17940:	46de      	mov	lr, fp
   17942:	b5e0      	push	{r5, r6, r7, lr}
   17944:	b089      	sub	sp, #36	; 0x24
   17946:	9303      	str	r3, [sp, #12]
	uint8_t dummy = 0xFF;
   17948:	ab04      	add	r3, sp, #16
   1794a:	3305      	adds	r3, #5
   1794c:	469c      	mov	ip, r3
{
   1794e:	9202      	str	r2, [sp, #8]
	uint8_t dummy = 0xFF;
   17950:	23ff      	movs	r3, #255	; 0xff
   17952:	4662      	mov	r2, ip
{
   17954:	4680      	mov	r8, r0
	uint8_t dummy = 0xFF;
   17956:	7013      	strb	r3, [r2, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   17958:	2300      	movs	r3, #0
   1795a:	4ade      	ldr	r2, [pc, #888]	; (17cd4 <sd_mmc_spi_adtc_start+0x39c>)

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1795c:	203f      	movs	r0, #63	; 0x3f
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1795e:	7013      	strb	r3, [r2, #0]
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   17960:	4643      	mov	r3, r8
   17962:	4018      	ands	r0, r3
   17964:	2340      	movs	r3, #64	; 0x40
{
   17966:	4689      	mov	r9, r1
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   17968:	4318      	orrs	r0, r3
	cmd_token[1] = arg >> 24;
   1796a:	000b      	movs	r3, r1
	cmd_token[2] = arg >> 16;
	cmd_token[3] = arg >> 8;
	cmd_token[4] = arg;
   1796c:	466a      	mov	r2, sp
	cmd_token[3] = arg >> 8;
   1796e:	0a1d      	lsrs	r5, r3, #8
	cmd_token[4] = arg;
   17970:	464b      	mov	r3, r9
   17972:	71d3      	strb	r3, [r2, #7]
			crc <<= 1;
   17974:	2300      	movs	r3, #0
			value <<= 1;
   17976:	0046      	lsls	r6, r0, #1
			crc <<= 1;
   17978:	b2db      	uxtb	r3, r3
   1797a:	469a      	mov	sl, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   1797c:	405e      	eors	r6, r3
   1797e:	466b      	mov	r3, sp
	cmd_token[4] = arg;
   17980:	79d2      	ldrb	r2, [r2, #7]
			if ((value & 0x80) ^ (crc & 0x80)) {
   17982:	71de      	strb	r6, [r3, #7]
   17984:	79de      	ldrb	r6, [r3, #7]
				crc ^= 0x09;
   17986:	4653      	mov	r3, sl
			if ((value & 0x80) ^ (crc & 0x80)) {
   17988:	b276      	sxtb	r6, r6
   1798a:	46b1      	mov	r9, r6
				crc ^= 0x09;
   1798c:	2609      	movs	r6, #9
   1798e:	431e      	orrs	r6, r3
   17990:	46b3      	mov	fp, r6
   17992:	464e      	mov	r6, r9
	cmd_token[1] = arg >> 24;
   17994:	0e0f      	lsrs	r7, r1, #24
	cmd_token[2] = arg >> 16;
   17996:	0c09      	lsrs	r1, r1, #16
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   17998:	ac06      	add	r4, sp, #24
	cmd_token[2] = arg >> 16;
   1799a:	b2c9      	uxtb	r1, r1
	cmd_token[3] = arg >> 8;
   1799c:	b2ed      	uxtb	r5, r5
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1799e:	7020      	strb	r0, [r4, #0]
	cmd_token[1] = arg >> 24;
   179a0:	7067      	strb	r7, [r4, #1]
	cmd_token[2] = arg >> 16;
   179a2:	70a1      	strb	r1, [r4, #2]
	cmd_token[3] = arg >> 8;
   179a4:	70e5      	strb	r5, [r4, #3]
	cmd_token[4] = arg;
   179a6:	7122      	strb	r2, [r4, #4]
   179a8:	4653      	mov	r3, sl
   179aa:	2e00      	cmp	r6, #0
   179ac:	da00      	bge.n	179b0 <sd_mmc_spi_adtc_start+0x78>
   179ae:	e20f      	b.n	17dd0 <sd_mmc_spi_adtc_start+0x498>
			crc <<= 1;
   179b0:	005b      	lsls	r3, r3, #1
   179b2:	b2db      	uxtb	r3, r3
			value <<= 1;
   179b4:	0086      	lsls	r6, r0, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
   179b6:	405e      	eors	r6, r3
   179b8:	46b1      	mov	r9, r6
				crc ^= 0x09;
   179ba:	2609      	movs	r6, #9
   179bc:	405e      	eors	r6, r3
   179be:	46b3      	mov	fp, r6
   179c0:	464e      	mov	r6, r9
   179c2:	0636      	lsls	r6, r6, #24
   179c4:	d500      	bpl.n	179c8 <sd_mmc_spi_adtc_start+0x90>
   179c6:	e201      	b.n	17dcc <sd_mmc_spi_adtc_start+0x494>
			crc <<= 1;
   179c8:	005b      	lsls	r3, r3, #1
   179ca:	b2db      	uxtb	r3, r3
			value <<= 1;
   179cc:	00c6      	lsls	r6, r0, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
   179ce:	405e      	eors	r6, r3
   179d0:	46b1      	mov	r9, r6
				crc ^= 0x09;
   179d2:	2609      	movs	r6, #9
   179d4:	405e      	eors	r6, r3
   179d6:	46b3      	mov	fp, r6
   179d8:	464e      	mov	r6, r9
   179da:	0636      	lsls	r6, r6, #24
   179dc:	d500      	bpl.n	179e0 <sd_mmc_spi_adtc_start+0xa8>
   179de:	e1f3      	b.n	17dc8 <sd_mmc_spi_adtc_start+0x490>
			crc <<= 1;
   179e0:	005b      	lsls	r3, r3, #1
   179e2:	b2db      	uxtb	r3, r3
			value <<= 1;
   179e4:	0106      	lsls	r6, r0, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
   179e6:	405e      	eors	r6, r3
   179e8:	46b1      	mov	r9, r6
				crc ^= 0x09;
   179ea:	2609      	movs	r6, #9
   179ec:	405e      	eors	r6, r3
   179ee:	46b3      	mov	fp, r6
   179f0:	464e      	mov	r6, r9
   179f2:	0636      	lsls	r6, r6, #24
   179f4:	d500      	bpl.n	179f8 <sd_mmc_spi_adtc_start+0xc0>
   179f6:	e1e5      	b.n	17dc4 <sd_mmc_spi_adtc_start+0x48c>
			crc <<= 1;
   179f8:	005b      	lsls	r3, r3, #1
   179fa:	b2db      	uxtb	r3, r3
			value <<= 1;
   179fc:	0146      	lsls	r6, r0, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
   179fe:	405e      	eors	r6, r3
   17a00:	46b1      	mov	r9, r6
				crc ^= 0x09;
   17a02:	2609      	movs	r6, #9
   17a04:	405e      	eors	r6, r3
   17a06:	46b3      	mov	fp, r6
   17a08:	464e      	mov	r6, r9
   17a0a:	0636      	lsls	r6, r6, #24
   17a0c:	d500      	bpl.n	17a10 <sd_mmc_spi_adtc_start+0xd8>
   17a0e:	e1d7      	b.n	17dc0 <sd_mmc_spi_adtc_start+0x488>
			crc <<= 1;
   17a10:	005b      	lsls	r3, r3, #1
   17a12:	b2db      	uxtb	r3, r3
			value <<= 1;
   17a14:	0186      	lsls	r6, r0, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
   17a16:	405e      	eors	r6, r3
   17a18:	46b1      	mov	r9, r6
				crc ^= 0x09;
   17a1a:	2609      	movs	r6, #9
   17a1c:	405e      	eors	r6, r3
   17a1e:	46b3      	mov	fp, r6
   17a20:	464e      	mov	r6, r9
   17a22:	0636      	lsls	r6, r6, #24
   17a24:	d500      	bpl.n	17a28 <sd_mmc_spi_adtc_start+0xf0>
   17a26:	e1c9      	b.n	17dbc <sd_mmc_spi_adtc_start+0x484>
   17a28:	2609      	movs	r6, #9
			crc <<= 1;
   17a2a:	005b      	lsls	r3, r3, #1
   17a2c:	b2db      	uxtb	r3, r3
			value <<= 1;
   17a2e:	01c0      	lsls	r0, r0, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
   17a30:	4058      	eors	r0, r3
				crc ^= 0x09;
   17a32:	405e      	eors	r6, r3
   17a34:	0600      	lsls	r0, r0, #24
   17a36:	d500      	bpl.n	17a3a <sd_mmc_spi_adtc_start+0x102>
   17a38:	e1be      	b.n	17db8 <sd_mmc_spi_adtc_start+0x480>
			if ((value & 0x80) ^ (crc & 0x80)) {
   17a3a:	0038      	movs	r0, r7
				crc ^= 0x09;
   17a3c:	2609      	movs	r6, #9
			crc <<= 1;
   17a3e:	005b      	lsls	r3, r3, #1
   17a40:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   17a42:	4058      	eors	r0, r3
   17a44:	b240      	sxtb	r0, r0
				crc ^= 0x09;
   17a46:	405e      	eors	r6, r3
   17a48:	2800      	cmp	r0, #0
   17a4a:	da00      	bge.n	17a4e <sd_mmc_spi_adtc_start+0x116>
   17a4c:	e1b2      	b.n	17db4 <sd_mmc_spi_adtc_start+0x47c>
   17a4e:	2609      	movs	r6, #9
			crc <<= 1;
   17a50:	005b      	lsls	r3, r3, #1
   17a52:	b2db      	uxtb	r3, r3
			value <<= 1;
   17a54:	0078      	lsls	r0, r7, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
   17a56:	4058      	eors	r0, r3
				crc ^= 0x09;
   17a58:	405e      	eors	r6, r3
   17a5a:	0600      	lsls	r0, r0, #24
   17a5c:	d500      	bpl.n	17a60 <sd_mmc_spi_adtc_start+0x128>
   17a5e:	e1a7      	b.n	17db0 <sd_mmc_spi_adtc_start+0x478>
   17a60:	2609      	movs	r6, #9
			crc <<= 1;
   17a62:	005b      	lsls	r3, r3, #1
   17a64:	b2db      	uxtb	r3, r3
			value <<= 1;
   17a66:	00b8      	lsls	r0, r7, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
   17a68:	4058      	eors	r0, r3
				crc ^= 0x09;
   17a6a:	405e      	eors	r6, r3
   17a6c:	0600      	lsls	r0, r0, #24
   17a6e:	d500      	bpl.n	17a72 <sd_mmc_spi_adtc_start+0x13a>
   17a70:	e19c      	b.n	17dac <sd_mmc_spi_adtc_start+0x474>
   17a72:	2609      	movs	r6, #9
			crc <<= 1;
   17a74:	005b      	lsls	r3, r3, #1
   17a76:	b2db      	uxtb	r3, r3
			value <<= 1;
   17a78:	00f8      	lsls	r0, r7, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
   17a7a:	4058      	eors	r0, r3
				crc ^= 0x09;
   17a7c:	405e      	eors	r6, r3
   17a7e:	0600      	lsls	r0, r0, #24
   17a80:	d500      	bpl.n	17a84 <sd_mmc_spi_adtc_start+0x14c>
   17a82:	e191      	b.n	17da8 <sd_mmc_spi_adtc_start+0x470>
   17a84:	2609      	movs	r6, #9
			crc <<= 1;
   17a86:	005b      	lsls	r3, r3, #1
   17a88:	b2db      	uxtb	r3, r3
			value <<= 1;
   17a8a:	0138      	lsls	r0, r7, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
   17a8c:	4058      	eors	r0, r3
				crc ^= 0x09;
   17a8e:	405e      	eors	r6, r3
   17a90:	0600      	lsls	r0, r0, #24
   17a92:	d500      	bpl.n	17a96 <sd_mmc_spi_adtc_start+0x15e>
   17a94:	e186      	b.n	17da4 <sd_mmc_spi_adtc_start+0x46c>
   17a96:	2609      	movs	r6, #9
			crc <<= 1;
   17a98:	005b      	lsls	r3, r3, #1
   17a9a:	b2db      	uxtb	r3, r3
			value <<= 1;
   17a9c:	0178      	lsls	r0, r7, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
   17a9e:	4058      	eors	r0, r3
				crc ^= 0x09;
   17aa0:	405e      	eors	r6, r3
   17aa2:	0600      	lsls	r0, r0, #24
   17aa4:	d500      	bpl.n	17aa8 <sd_mmc_spi_adtc_start+0x170>
   17aa6:	e17b      	b.n	17da0 <sd_mmc_spi_adtc_start+0x468>
   17aa8:	2609      	movs	r6, #9
			crc <<= 1;
   17aaa:	005b      	lsls	r3, r3, #1
   17aac:	b2db      	uxtb	r3, r3
			value <<= 1;
   17aae:	01b8      	lsls	r0, r7, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
   17ab0:	4058      	eors	r0, r3
				crc ^= 0x09;
   17ab2:	405e      	eors	r6, r3
   17ab4:	0600      	lsls	r0, r0, #24
   17ab6:	d500      	bpl.n	17aba <sd_mmc_spi_adtc_start+0x182>
   17ab8:	e170      	b.n	17d9c <sd_mmc_spi_adtc_start+0x464>
			value <<= 1;
   17aba:	01f8      	lsls	r0, r7, #7
				crc ^= 0x09;
   17abc:	2709      	movs	r7, #9
			crc <<= 1;
   17abe:	005b      	lsls	r3, r3, #1
   17ac0:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   17ac2:	4058      	eors	r0, r3
				crc ^= 0x09;
   17ac4:	405f      	eors	r7, r3
   17ac6:	0600      	lsls	r0, r0, #24
   17ac8:	d500      	bpl.n	17acc <sd_mmc_spi_adtc_start+0x194>
   17aca:	e165      	b.n	17d98 <sd_mmc_spi_adtc_start+0x460>
			if ((value & 0x80) ^ (crc & 0x80)) {
   17acc:	0008      	movs	r0, r1
				crc ^= 0x09;
   17ace:	2709      	movs	r7, #9
			crc <<= 1;
   17ad0:	005b      	lsls	r3, r3, #1
   17ad2:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   17ad4:	4058      	eors	r0, r3
   17ad6:	b240      	sxtb	r0, r0
				crc ^= 0x09;
   17ad8:	405f      	eors	r7, r3
   17ada:	2800      	cmp	r0, #0
   17adc:	da00      	bge.n	17ae0 <sd_mmc_spi_adtc_start+0x1a8>
   17ade:	e159      	b.n	17d94 <sd_mmc_spi_adtc_start+0x45c>
   17ae0:	2709      	movs	r7, #9
			crc <<= 1;
   17ae2:	005b      	lsls	r3, r3, #1
   17ae4:	b2db      	uxtb	r3, r3
			value <<= 1;
   17ae6:	0048      	lsls	r0, r1, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
   17ae8:	4058      	eors	r0, r3
				crc ^= 0x09;
   17aea:	405f      	eors	r7, r3
   17aec:	0600      	lsls	r0, r0, #24
   17aee:	d500      	bpl.n	17af2 <sd_mmc_spi_adtc_start+0x1ba>
   17af0:	e14e      	b.n	17d90 <sd_mmc_spi_adtc_start+0x458>
   17af2:	2709      	movs	r7, #9
			crc <<= 1;
   17af4:	005b      	lsls	r3, r3, #1
   17af6:	b2db      	uxtb	r3, r3
			value <<= 1;
   17af8:	0088      	lsls	r0, r1, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
   17afa:	4058      	eors	r0, r3
				crc ^= 0x09;
   17afc:	405f      	eors	r7, r3
   17afe:	0600      	lsls	r0, r0, #24
   17b00:	d500      	bpl.n	17b04 <sd_mmc_spi_adtc_start+0x1cc>
   17b02:	e143      	b.n	17d8c <sd_mmc_spi_adtc_start+0x454>
   17b04:	2709      	movs	r7, #9
			crc <<= 1;
   17b06:	005b      	lsls	r3, r3, #1
   17b08:	b2db      	uxtb	r3, r3
			value <<= 1;
   17b0a:	00c8      	lsls	r0, r1, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
   17b0c:	4058      	eors	r0, r3
				crc ^= 0x09;
   17b0e:	405f      	eors	r7, r3
   17b10:	0600      	lsls	r0, r0, #24
   17b12:	d500      	bpl.n	17b16 <sd_mmc_spi_adtc_start+0x1de>
   17b14:	e138      	b.n	17d88 <sd_mmc_spi_adtc_start+0x450>
   17b16:	2709      	movs	r7, #9
			crc <<= 1;
   17b18:	005b      	lsls	r3, r3, #1
   17b1a:	b2db      	uxtb	r3, r3
			value <<= 1;
   17b1c:	0108      	lsls	r0, r1, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
   17b1e:	4058      	eors	r0, r3
				crc ^= 0x09;
   17b20:	405f      	eors	r7, r3
   17b22:	0600      	lsls	r0, r0, #24
   17b24:	d500      	bpl.n	17b28 <sd_mmc_spi_adtc_start+0x1f0>
   17b26:	e12d      	b.n	17d84 <sd_mmc_spi_adtc_start+0x44c>
   17b28:	2709      	movs	r7, #9
			crc <<= 1;
   17b2a:	005b      	lsls	r3, r3, #1
   17b2c:	b2db      	uxtb	r3, r3
			value <<= 1;
   17b2e:	0148      	lsls	r0, r1, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
   17b30:	4058      	eors	r0, r3
				crc ^= 0x09;
   17b32:	405f      	eors	r7, r3
   17b34:	0600      	lsls	r0, r0, #24
   17b36:	d500      	bpl.n	17b3a <sd_mmc_spi_adtc_start+0x202>
   17b38:	e122      	b.n	17d80 <sd_mmc_spi_adtc_start+0x448>
   17b3a:	2709      	movs	r7, #9
			crc <<= 1;
   17b3c:	005b      	lsls	r3, r3, #1
   17b3e:	b2db      	uxtb	r3, r3
			value <<= 1;
   17b40:	0188      	lsls	r0, r1, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
   17b42:	4058      	eors	r0, r3
				crc ^= 0x09;
   17b44:	405f      	eors	r7, r3
   17b46:	0600      	lsls	r0, r0, #24
   17b48:	d500      	bpl.n	17b4c <sd_mmc_spi_adtc_start+0x214>
   17b4a:	e117      	b.n	17d7c <sd_mmc_spi_adtc_start+0x444>
   17b4c:	2009      	movs	r0, #9
			crc <<= 1;
   17b4e:	005b      	lsls	r3, r3, #1
   17b50:	b2db      	uxtb	r3, r3
			value <<= 1;
   17b52:	01c9      	lsls	r1, r1, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
   17b54:	4059      	eors	r1, r3
				crc ^= 0x09;
   17b56:	4058      	eors	r0, r3
   17b58:	0609      	lsls	r1, r1, #24
   17b5a:	d500      	bpl.n	17b5e <sd_mmc_spi_adtc_start+0x226>
   17b5c:	e10c      	b.n	17d78 <sd_mmc_spi_adtc_start+0x440>
			if ((value & 0x80) ^ (crc & 0x80)) {
   17b5e:	0029      	movs	r1, r5
				crc ^= 0x09;
   17b60:	2009      	movs	r0, #9
			crc <<= 1;
   17b62:	005b      	lsls	r3, r3, #1
   17b64:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   17b66:	4059      	eors	r1, r3
   17b68:	b249      	sxtb	r1, r1
				crc ^= 0x09;
   17b6a:	4058      	eors	r0, r3
   17b6c:	2900      	cmp	r1, #0
   17b6e:	da00      	bge.n	17b72 <sd_mmc_spi_adtc_start+0x23a>
   17b70:	e100      	b.n	17d74 <sd_mmc_spi_adtc_start+0x43c>
   17b72:	2009      	movs	r0, #9
			crc <<= 1;
   17b74:	005b      	lsls	r3, r3, #1
   17b76:	b2db      	uxtb	r3, r3
			value <<= 1;
   17b78:	0069      	lsls	r1, r5, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
   17b7a:	4059      	eors	r1, r3
				crc ^= 0x09;
   17b7c:	4058      	eors	r0, r3
   17b7e:	0609      	lsls	r1, r1, #24
   17b80:	d500      	bpl.n	17b84 <sd_mmc_spi_adtc_start+0x24c>
   17b82:	e0f5      	b.n	17d70 <sd_mmc_spi_adtc_start+0x438>
   17b84:	2009      	movs	r0, #9
			crc <<= 1;
   17b86:	005b      	lsls	r3, r3, #1
   17b88:	b2db      	uxtb	r3, r3
			value <<= 1;
   17b8a:	00a9      	lsls	r1, r5, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
   17b8c:	4059      	eors	r1, r3
				crc ^= 0x09;
   17b8e:	4058      	eors	r0, r3
   17b90:	0609      	lsls	r1, r1, #24
   17b92:	d500      	bpl.n	17b96 <sd_mmc_spi_adtc_start+0x25e>
   17b94:	e0ea      	b.n	17d6c <sd_mmc_spi_adtc_start+0x434>
   17b96:	2009      	movs	r0, #9
			crc <<= 1;
   17b98:	005b      	lsls	r3, r3, #1
   17b9a:	b2db      	uxtb	r3, r3
			value <<= 1;
   17b9c:	00e9      	lsls	r1, r5, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
   17b9e:	4059      	eors	r1, r3
				crc ^= 0x09;
   17ba0:	4058      	eors	r0, r3
   17ba2:	0609      	lsls	r1, r1, #24
   17ba4:	d500      	bpl.n	17ba8 <sd_mmc_spi_adtc_start+0x270>
   17ba6:	e0df      	b.n	17d68 <sd_mmc_spi_adtc_start+0x430>
   17ba8:	2009      	movs	r0, #9
			crc <<= 1;
   17baa:	005b      	lsls	r3, r3, #1
   17bac:	b2db      	uxtb	r3, r3
			value <<= 1;
   17bae:	0129      	lsls	r1, r5, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
   17bb0:	4059      	eors	r1, r3
				crc ^= 0x09;
   17bb2:	4058      	eors	r0, r3
   17bb4:	0609      	lsls	r1, r1, #24
   17bb6:	d500      	bpl.n	17bba <sd_mmc_spi_adtc_start+0x282>
   17bb8:	e0d4      	b.n	17d64 <sd_mmc_spi_adtc_start+0x42c>
   17bba:	2009      	movs	r0, #9
			crc <<= 1;
   17bbc:	005b      	lsls	r3, r3, #1
   17bbe:	b2db      	uxtb	r3, r3
			value <<= 1;
   17bc0:	0169      	lsls	r1, r5, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
   17bc2:	4059      	eors	r1, r3
				crc ^= 0x09;
   17bc4:	4058      	eors	r0, r3
   17bc6:	0609      	lsls	r1, r1, #24
   17bc8:	d500      	bpl.n	17bcc <sd_mmc_spi_adtc_start+0x294>
   17bca:	e0c9      	b.n	17d60 <sd_mmc_spi_adtc_start+0x428>
   17bcc:	2009      	movs	r0, #9
			crc <<= 1;
   17bce:	005b      	lsls	r3, r3, #1
   17bd0:	b2db      	uxtb	r3, r3
			value <<= 1;
   17bd2:	01a9      	lsls	r1, r5, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
   17bd4:	4059      	eors	r1, r3
				crc ^= 0x09;
   17bd6:	4058      	eors	r0, r3
   17bd8:	0609      	lsls	r1, r1, #24
   17bda:	d500      	bpl.n	17bde <sd_mmc_spi_adtc_start+0x2a6>
   17bdc:	e0be      	b.n	17d5c <sd_mmc_spi_adtc_start+0x424>
   17bde:	2109      	movs	r1, #9
			crc <<= 1;
   17be0:	005b      	lsls	r3, r3, #1
   17be2:	b2db      	uxtb	r3, r3
			value <<= 1;
   17be4:	01ed      	lsls	r5, r5, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
   17be6:	405d      	eors	r5, r3
				crc ^= 0x09;
   17be8:	4059      	eors	r1, r3
   17bea:	0628      	lsls	r0, r5, #24
   17bec:	d500      	bpl.n	17bf0 <sd_mmc_spi_adtc_start+0x2b8>
   17bee:	e0b3      	b.n	17d58 <sd_mmc_spi_adtc_start+0x420>
			if ((value & 0x80) ^ (crc & 0x80)) {
   17bf0:	0011      	movs	r1, r2
				crc ^= 0x09;
   17bf2:	2009      	movs	r0, #9
			crc <<= 1;
   17bf4:	005b      	lsls	r3, r3, #1
   17bf6:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   17bf8:	4059      	eors	r1, r3
   17bfa:	b249      	sxtb	r1, r1
				crc ^= 0x09;
   17bfc:	4058      	eors	r0, r3
   17bfe:	2900      	cmp	r1, #0
   17c00:	da00      	bge.n	17c04 <sd_mmc_spi_adtc_start+0x2cc>
   17c02:	e0a7      	b.n	17d54 <sd_mmc_spi_adtc_start+0x41c>
   17c04:	2009      	movs	r0, #9
			crc <<= 1;
   17c06:	005b      	lsls	r3, r3, #1
   17c08:	b2db      	uxtb	r3, r3
			value <<= 1;
   17c0a:	0051      	lsls	r1, r2, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
   17c0c:	4059      	eors	r1, r3
				crc ^= 0x09;
   17c0e:	4058      	eors	r0, r3
   17c10:	0609      	lsls	r1, r1, #24
   17c12:	d500      	bpl.n	17c16 <sd_mmc_spi_adtc_start+0x2de>
   17c14:	e09c      	b.n	17d50 <sd_mmc_spi_adtc_start+0x418>
   17c16:	2009      	movs	r0, #9
			crc <<= 1;
   17c18:	005b      	lsls	r3, r3, #1
   17c1a:	b2db      	uxtb	r3, r3
			value <<= 1;
   17c1c:	0091      	lsls	r1, r2, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
   17c1e:	4059      	eors	r1, r3
				crc ^= 0x09;
   17c20:	4058      	eors	r0, r3
   17c22:	0609      	lsls	r1, r1, #24
   17c24:	d500      	bpl.n	17c28 <sd_mmc_spi_adtc_start+0x2f0>
   17c26:	e091      	b.n	17d4c <sd_mmc_spi_adtc_start+0x414>
   17c28:	2009      	movs	r0, #9
			crc <<= 1;
   17c2a:	005b      	lsls	r3, r3, #1
   17c2c:	b2db      	uxtb	r3, r3
			value <<= 1;
   17c2e:	00d1      	lsls	r1, r2, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
   17c30:	4059      	eors	r1, r3
				crc ^= 0x09;
   17c32:	4058      	eors	r0, r3
   17c34:	0609      	lsls	r1, r1, #24
   17c36:	d500      	bpl.n	17c3a <sd_mmc_spi_adtc_start+0x302>
   17c38:	e086      	b.n	17d48 <sd_mmc_spi_adtc_start+0x410>
   17c3a:	2009      	movs	r0, #9
			crc <<= 1;
   17c3c:	005b      	lsls	r3, r3, #1
   17c3e:	b2db      	uxtb	r3, r3
			value <<= 1;
   17c40:	0111      	lsls	r1, r2, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
   17c42:	4059      	eors	r1, r3
				crc ^= 0x09;
   17c44:	4058      	eors	r0, r3
   17c46:	0609      	lsls	r1, r1, #24
   17c48:	d500      	bpl.n	17c4c <sd_mmc_spi_adtc_start+0x314>
   17c4a:	e07b      	b.n	17d44 <sd_mmc_spi_adtc_start+0x40c>
   17c4c:	2009      	movs	r0, #9
			crc <<= 1;
   17c4e:	005b      	lsls	r3, r3, #1
   17c50:	b2db      	uxtb	r3, r3
			value <<= 1;
   17c52:	0151      	lsls	r1, r2, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
   17c54:	4059      	eors	r1, r3
				crc ^= 0x09;
   17c56:	4058      	eors	r0, r3
   17c58:	0609      	lsls	r1, r1, #24
   17c5a:	d500      	bpl.n	17c5e <sd_mmc_spi_adtc_start+0x326>
   17c5c:	e070      	b.n	17d40 <sd_mmc_spi_adtc_start+0x408>
   17c5e:	2009      	movs	r0, #9
			crc <<= 1;
   17c60:	005b      	lsls	r3, r3, #1
   17c62:	b2db      	uxtb	r3, r3
			value <<= 1;
   17c64:	0191      	lsls	r1, r2, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
   17c66:	4059      	eors	r1, r3
				crc ^= 0x09;
   17c68:	4058      	eors	r0, r3
   17c6a:	0609      	lsls	r1, r1, #24
   17c6c:	d466      	bmi.n	17d3c <sd_mmc_spi_adtc_start+0x404>
   17c6e:	2109      	movs	r1, #9
			crc <<= 1;
   17c70:	005b      	lsls	r3, r3, #1
   17c72:	b2db      	uxtb	r3, r3
			value <<= 1;
   17c74:	01d2      	lsls	r2, r2, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
   17c76:	405a      	eors	r2, r3
				crc ^= 0x09;
   17c78:	4059      	eors	r1, r3
	crc = (crc << 1) | 1;
   17c7a:	0612      	lsls	r2, r2, #24
   17c7c:	d45c      	bmi.n	17d38 <sd_mmc_spi_adtc_start+0x400>
   17c7e:	2201      	movs	r2, #1
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&spi_main, &dummy, 1);
   17c80:	4d15      	ldr	r5, [pc, #84]	; (17cd8 <sd_mmc_spi_adtc_start+0x3a0>)
	crc = (crc << 1) | 1;
   17c82:	b2db      	uxtb	r3, r3
   17c84:	005b      	lsls	r3, r3, #1
   17c86:	4313      	orrs	r3, r2
	spi_write_buffer_wait(&spi_main, &dummy, 1);
   17c88:	4661      	mov	r1, ip
   17c8a:	4e14      	ldr	r6, [pc, #80]	; (17cdc <sd_mmc_spi_adtc_start+0x3a4>)
   17c8c:	2201      	movs	r2, #1
   17c8e:	0028      	movs	r0, r5
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   17c90:	7163      	strb	r3, [r4, #5]
	spi_write_buffer_wait(&spi_main, &dummy, 1);
   17c92:	47b0      	blx	r6
	// Send command
	spi_write_buffer_wait(&spi_main, cmd_token, sizeof(cmd_token));
   17c94:	0021      	movs	r1, r4
   17c96:	2206      	movs	r2, #6
   17c98:	0028      	movs	r0, r5
   17c9a:	47b0      	blx	r6

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   17c9c:	ab04      	add	r3, sp, #16
   17c9e:	1d9c      	adds	r4, r3, #6
   17ca0:	23ff      	movs	r3, #255	; 0xff
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&spi_main, &r1, 1,
   17ca2:	2201      	movs	r2, #1
   17ca4:	0021      	movs	r1, r4
   17ca6:	0028      	movs	r0, r5
   17ca8:	4f0d      	ldr	r7, [pc, #52]	; (17ce0 <sd_mmc_spi_adtc_start+0x3a8>)
	r1 = 0xFF;
   17caa:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&spi_main, &r1, 1,
   17cac:	2607      	movs	r6, #7
   17cae:	47b8      	blx	r7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&spi_main, &r1, 1,
   17cb0:	23ff      	movs	r3, #255	; 0xff
   17cb2:	2201      	movs	r2, #1
   17cb4:	0021      	movs	r1, r4
   17cb6:	0028      	movs	r0, r5
   17cb8:	47b8      	blx	r7
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   17cba:	7823      	ldrb	r3, [r4, #0]
   17cbc:	b25a      	sxtb	r2, r3
   17cbe:	2a00      	cmp	r2, #0
   17cc0:	da17      	bge.n	17cf2 <sd_mmc_spi_adtc_start+0x3ba>
   17cc2:	3e01      	subs	r6, #1
   17cc4:	b2f6      	uxtb	r6, r6
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   17cc6:	2e00      	cmp	r6, #0
   17cc8:	d1f2      	bne.n	17cb0 <sd_mmc_spi_adtc_start+0x378>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   17cca:	2302      	movs	r3, #2
			return false;
   17ccc:	2000      	movs	r0, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   17cce:	4a01      	ldr	r2, [pc, #4]	; (17cd4 <sd_mmc_spi_adtc_start+0x39c>)
   17cd0:	7013      	strb	r3, [r2, #0]
   17cd2:	e007      	b.n	17ce4 <sd_mmc_spi_adtc_start+0x3ac>
   17cd4:	20000cf8 	.word	0x20000cf8
   17cd8:	20000e6c 	.word	0x20000e6c
   17cdc:	0001ee2d 	.word	0x0001ee2d
   17ce0:	0001ec39 	.word	0x0001ec39

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
   17ce4:	b009      	add	sp, #36	; 0x24
   17ce6:	bc3c      	pop	{r2, r3, r4, r5}
   17ce8:	4690      	mov	r8, r2
   17cea:	4699      	mov	r9, r3
   17cec:	46a2      	mov	sl, r4
   17cee:	46ab      	mov	fp, r5
   17cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
   17cf2:	4a5c      	ldr	r2, [pc, #368]	; (17e64 <sd_mmc_spi_adtc_start+0x52c>)
   17cf4:	4693      	mov	fp, r2
   17cf6:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
   17cf8:	071a      	lsls	r2, r3, #28
   17cfa:	d46b      	bmi.n	17dd4 <sd_mmc_spi_adtc_start+0x49c>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   17cfc:	075a      	lsls	r2, r3, #29
   17cfe:	d46e      	bmi.n	17dde <sd_mmc_spi_adtc_start+0x4a6>
	if (r1 & ~R1_SPI_IDLE) {
   17d00:	2201      	movs	r2, #1
   17d02:	4393      	bics	r3, r2
   17d04:	d000      	beq.n	17d08 <sd_mmc_spi_adtc_start+0x3d0>
   17d06:	e0a4      	b.n	17e52 <sd_mmc_spi_adtc_start+0x51a>
	if (cmd & SDMMC_RESP_BUSY) {
   17d08:	4643      	mov	r3, r8
   17d0a:	049b      	lsls	r3, r3, #18
   17d0c:	d46c      	bmi.n	17de8 <sd_mmc_spi_adtc_start+0x4b0>
	if (cmd & SDMMC_RESP_8) {
   17d0e:	4643      	mov	r3, r8
   17d10:	059b      	lsls	r3, r3, #22
   17d12:	d500      	bpl.n	17d16 <sd_mmc_spi_adtc_start+0x3de>
   17d14:	e094      	b.n	17e40 <sd_mmc_spi_adtc_start+0x508>
	if (cmd & SDMMC_RESP_32) {
   17d16:	4643      	mov	r3, r8
   17d18:	055b      	lsls	r3, r3, #21
   17d1a:	d500      	bpl.n	17d1e <sd_mmc_spi_adtc_start+0x3e6>
   17d1c:	e085      	b.n	17e2a <sd_mmc_spi_adtc_start+0x4f2>
	sd_mmc_spi_block_size = block_size;
   17d1e:	466a      	mov	r2, sp
   17d20:	4b51      	ldr	r3, [pc, #324]	; (17e68 <sd_mmc_spi_adtc_start+0x530>)
   17d22:	8912      	ldrh	r2, [r2, #8]
	return true; // Command complete
   17d24:	2001      	movs	r0, #1
	sd_mmc_spi_block_size = block_size;
   17d26:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   17d28:	466a      	mov	r2, sp
   17d2a:	4b50      	ldr	r3, [pc, #320]	; (17e6c <sd_mmc_spi_adtc_start+0x534>)
   17d2c:	8992      	ldrh	r2, [r2, #12]
   17d2e:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   17d30:	2200      	movs	r2, #0
   17d32:	4b4f      	ldr	r3, [pc, #316]	; (17e70 <sd_mmc_spi_adtc_start+0x538>)
   17d34:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   17d36:	e7d5      	b.n	17ce4 <sd_mmc_spi_adtc_start+0x3ac>
	crc = (crc << 1) | 1;
   17d38:	1c0b      	adds	r3, r1, #0
   17d3a:	e7a0      	b.n	17c7e <sd_mmc_spi_adtc_start+0x346>
   17d3c:	1c03      	adds	r3, r0, #0
   17d3e:	e796      	b.n	17c6e <sd_mmc_spi_adtc_start+0x336>
   17d40:	1c03      	adds	r3, r0, #0
   17d42:	e78c      	b.n	17c5e <sd_mmc_spi_adtc_start+0x326>
   17d44:	1c03      	adds	r3, r0, #0
   17d46:	e781      	b.n	17c4c <sd_mmc_spi_adtc_start+0x314>
   17d48:	1c03      	adds	r3, r0, #0
   17d4a:	e776      	b.n	17c3a <sd_mmc_spi_adtc_start+0x302>
   17d4c:	1c03      	adds	r3, r0, #0
   17d4e:	e76b      	b.n	17c28 <sd_mmc_spi_adtc_start+0x2f0>
   17d50:	1c03      	adds	r3, r0, #0
   17d52:	e760      	b.n	17c16 <sd_mmc_spi_adtc_start+0x2de>
   17d54:	1c03      	adds	r3, r0, #0
   17d56:	e755      	b.n	17c04 <sd_mmc_spi_adtc_start+0x2cc>
   17d58:	1c0b      	adds	r3, r1, #0
   17d5a:	e749      	b.n	17bf0 <sd_mmc_spi_adtc_start+0x2b8>
   17d5c:	1c03      	adds	r3, r0, #0
   17d5e:	e73e      	b.n	17bde <sd_mmc_spi_adtc_start+0x2a6>
   17d60:	1c03      	adds	r3, r0, #0
   17d62:	e733      	b.n	17bcc <sd_mmc_spi_adtc_start+0x294>
   17d64:	1c03      	adds	r3, r0, #0
   17d66:	e728      	b.n	17bba <sd_mmc_spi_adtc_start+0x282>
   17d68:	1c03      	adds	r3, r0, #0
   17d6a:	e71d      	b.n	17ba8 <sd_mmc_spi_adtc_start+0x270>
   17d6c:	1c03      	adds	r3, r0, #0
   17d6e:	e712      	b.n	17b96 <sd_mmc_spi_adtc_start+0x25e>
   17d70:	1c03      	adds	r3, r0, #0
   17d72:	e707      	b.n	17b84 <sd_mmc_spi_adtc_start+0x24c>
   17d74:	1c03      	adds	r3, r0, #0
   17d76:	e6fc      	b.n	17b72 <sd_mmc_spi_adtc_start+0x23a>
   17d78:	1c03      	adds	r3, r0, #0
   17d7a:	e6f0      	b.n	17b5e <sd_mmc_spi_adtc_start+0x226>
   17d7c:	1c3b      	adds	r3, r7, #0
   17d7e:	e6e5      	b.n	17b4c <sd_mmc_spi_adtc_start+0x214>
   17d80:	1c3b      	adds	r3, r7, #0
   17d82:	e6da      	b.n	17b3a <sd_mmc_spi_adtc_start+0x202>
   17d84:	1c3b      	adds	r3, r7, #0
   17d86:	e6cf      	b.n	17b28 <sd_mmc_spi_adtc_start+0x1f0>
   17d88:	1c3b      	adds	r3, r7, #0
   17d8a:	e6c4      	b.n	17b16 <sd_mmc_spi_adtc_start+0x1de>
   17d8c:	1c3b      	adds	r3, r7, #0
   17d8e:	e6b9      	b.n	17b04 <sd_mmc_spi_adtc_start+0x1cc>
   17d90:	1c3b      	adds	r3, r7, #0
   17d92:	e6ae      	b.n	17af2 <sd_mmc_spi_adtc_start+0x1ba>
   17d94:	1c3b      	adds	r3, r7, #0
   17d96:	e6a3      	b.n	17ae0 <sd_mmc_spi_adtc_start+0x1a8>
   17d98:	1c3b      	adds	r3, r7, #0
   17d9a:	e697      	b.n	17acc <sd_mmc_spi_adtc_start+0x194>
   17d9c:	1c33      	adds	r3, r6, #0
   17d9e:	e68c      	b.n	17aba <sd_mmc_spi_adtc_start+0x182>
   17da0:	1c33      	adds	r3, r6, #0
   17da2:	e681      	b.n	17aa8 <sd_mmc_spi_adtc_start+0x170>
   17da4:	1c33      	adds	r3, r6, #0
   17da6:	e676      	b.n	17a96 <sd_mmc_spi_adtc_start+0x15e>
   17da8:	1c33      	adds	r3, r6, #0
   17daa:	e66b      	b.n	17a84 <sd_mmc_spi_adtc_start+0x14c>
   17dac:	1c33      	adds	r3, r6, #0
   17dae:	e660      	b.n	17a72 <sd_mmc_spi_adtc_start+0x13a>
   17db0:	1c33      	adds	r3, r6, #0
   17db2:	e655      	b.n	17a60 <sd_mmc_spi_adtc_start+0x128>
   17db4:	1c33      	adds	r3, r6, #0
   17db6:	e64a      	b.n	17a4e <sd_mmc_spi_adtc_start+0x116>
   17db8:	1c33      	adds	r3, r6, #0
   17dba:	e63e      	b.n	17a3a <sd_mmc_spi_adtc_start+0x102>
   17dbc:	465b      	mov	r3, fp
   17dbe:	e633      	b.n	17a28 <sd_mmc_spi_adtc_start+0xf0>
   17dc0:	465b      	mov	r3, fp
   17dc2:	e625      	b.n	17a10 <sd_mmc_spi_adtc_start+0xd8>
   17dc4:	465b      	mov	r3, fp
   17dc6:	e617      	b.n	179f8 <sd_mmc_spi_adtc_start+0xc0>
   17dc8:	465b      	mov	r3, fp
   17dca:	e609      	b.n	179e0 <sd_mmc_spi_adtc_start+0xa8>
   17dcc:	465b      	mov	r3, fp
   17dce:	e5fb      	b.n	179c8 <sd_mmc_spi_adtc_start+0x90>
   17dd0:	465b      	mov	r3, fp
   17dd2:	e5ed      	b.n	179b0 <sd_mmc_spi_adtc_start+0x78>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   17dd4:	2306      	movs	r3, #6
   17dd6:	4a27      	ldr	r2, [pc, #156]	; (17e74 <sd_mmc_spi_adtc_start+0x53c>)
		return false;
   17dd8:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   17dda:	7013      	strb	r3, [r2, #0]
		return false;
   17ddc:	e782      	b.n	17ce4 <sd_mmc_spi_adtc_start+0x3ac>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   17dde:	2309      	movs	r3, #9
   17de0:	4a24      	ldr	r2, [pc, #144]	; (17e74 <sd_mmc_spi_adtc_start+0x53c>)
		return false;
   17de2:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   17de4:	7013      	strb	r3, [r2, #0]
		return false;
   17de6:	e77d      	b.n	17ce4 <sd_mmc_spi_adtc_start+0x3ac>
	uint8_t line = 0xFF;
   17de8:	ab04      	add	r3, sp, #16
   17dea:	1ddc      	adds	r4, r3, #7
   17dec:	23ff      	movs	r3, #255	; 0xff
	spi_read_buffer_wait(&spi_main, &line, 1,
   17dee:	2201      	movs	r2, #1
   17df0:	0021      	movs	r1, r4
   17df2:	0028      	movs	r0, r5
	uint8_t line = 0xFF;
   17df4:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
   17df6:	47b8      	blx	r7
	spi_read_buffer_wait(&spi_main, &line, 1,
   17df8:	23ff      	movs	r3, #255	; 0xff
   17dfa:	2201      	movs	r2, #1
   17dfc:	0021      	movs	r1, r4
   17dfe:	0028      	movs	r0, r5
   17e00:	47b8      	blx	r7
		spi_read_buffer_wait(&spi_main, &line, 1,
   17e02:	23ff      	movs	r3, #255	; 0xff
   17e04:	2201      	movs	r2, #1
   17e06:	0021      	movs	r1, r4
   17e08:	0028      	movs	r0, r5
   17e0a:	47b8      	blx	r7
   17e0c:	4b1a      	ldr	r3, [pc, #104]	; (17e78 <sd_mmc_spi_adtc_start+0x540>)
   17e0e:	001e      	movs	r6, r3
   17e10:	e007      	b.n	17e22 <sd_mmc_spi_adtc_start+0x4ea>
   17e12:	23ff      	movs	r3, #255	; 0xff
   17e14:	2201      	movs	r2, #1
   17e16:	0021      	movs	r1, r4
   17e18:	0028      	movs	r0, r5
   17e1a:	3e01      	subs	r6, #1
   17e1c:	47b8      	blx	r7
		if (!(nec_timeout--)) {
   17e1e:	2e00      	cmp	r6, #0
   17e20:	d01b      	beq.n	17e5a <sd_mmc_spi_adtc_start+0x522>
	} while (line != 0xFF);
   17e22:	7823      	ldrb	r3, [r4, #0]
   17e24:	2bff      	cmp	r3, #255	; 0xff
   17e26:	d1f4      	bne.n	17e12 <sd_mmc_spi_adtc_start+0x4da>
   17e28:	e771      	b.n	17d0e <sd_mmc_spi_adtc_start+0x3d6>
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 4,
   17e2a:	23ff      	movs	r3, #255	; 0xff
   17e2c:	2204      	movs	r2, #4
   17e2e:	4659      	mov	r1, fp
   17e30:	0028      	movs	r0, r5
   17e32:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   17e34:	465b      	mov	r3, fp
   17e36:	465a      	mov	r2, fp
   17e38:	681b      	ldr	r3, [r3, #0]
   17e3a:	ba1b      	rev	r3, r3
   17e3c:	6013      	str	r3, [r2, #0]
   17e3e:	e76e      	b.n	17d1e <sd_mmc_spi_adtc_start+0x3e6>
		sd_mmc_spi_response_32 = 0;
   17e40:	465a      	mov	r2, fp
   17e42:	2300      	movs	r3, #0
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 1,
   17e44:	4659      	mov	r1, fp
		sd_mmc_spi_response_32 = 0;
   17e46:	6013      	str	r3, [r2, #0]
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 1,
   17e48:	0028      	movs	r0, r5
   17e4a:	33ff      	adds	r3, #255	; 0xff
   17e4c:	2201      	movs	r2, #1
   17e4e:	47b8      	blx	r7
   17e50:	e761      	b.n	17d16 <sd_mmc_spi_adtc_start+0x3de>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   17e52:	4b08      	ldr	r3, [pc, #32]	; (17e74 <sd_mmc_spi_adtc_start+0x53c>)
		return false;
   17e54:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   17e56:	701a      	strb	r2, [r3, #0]
		return false;
   17e58:	e744      	b.n	17ce4 <sd_mmc_spi_adtc_start+0x3ac>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   17e5a:	2303      	movs	r3, #3
   17e5c:	4a05      	ldr	r2, [pc, #20]	; (17e74 <sd_mmc_spi_adtc_start+0x53c>)
			return false;
   17e5e:	2000      	movs	r0, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   17e60:	7013      	strb	r3, [r2, #0]
			return false;
   17e62:	e73f      	b.n	17ce4 <sd_mmc_spi_adtc_start+0x3ac>
   17e64:	20000cfc 	.word	0x20000cfc
   17e68:	20000cf6 	.word	0x20000cf6
   17e6c:	20000cfa 	.word	0x20000cfa
   17e70:	20000d00 	.word	0x20000d00
   17e74:	20000cf8 	.word	0x20000cf8
   17e78:	00030d40 	.word	0x00030d40

00017e7c <sd_mmc_spi_send_cmd>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   17e7c:	2300      	movs	r3, #0
{
   17e7e:	b510      	push	{r4, lr}
   17e80:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   17e82:	9300      	str	r3, [sp, #0]
   17e84:	2200      	movs	r2, #0
   17e86:	4c02      	ldr	r4, [pc, #8]	; (17e90 <sd_mmc_spi_send_cmd+0x14>)
   17e88:	47a0      	blx	r4
}
   17e8a:	b002      	add	sp, #8
   17e8c:	bd10      	pop	{r4, pc}
   17e8e:	46c0      	nop			; (mov r8, r8)
   17e90:	00017939 	.word	0x00017939

00017e94 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
   17e94:	4b01      	ldr	r3, [pc, #4]	; (17e9c <sd_mmc_spi_get_response+0x8>)
   17e96:	6818      	ldr	r0, [r3, #0]
}
   17e98:	4770      	bx	lr
   17e9a:	46c0      	nop			; (mov r8, r8)
   17e9c:	20000cfc 	.word	0x20000cfc

00017ea0 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   17ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   17ea2:	2300      	movs	r3, #0
{
   17ea4:	46de      	mov	lr, fp
   17ea6:	4657      	mov	r7, sl
   17ea8:	464e      	mov	r6, r9
   17eaa:	4645      	mov	r5, r8
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   17eac:	4a2c      	ldr	r2, [pc, #176]	; (17f60 <sd_mmc_spi_read_word+0xc0>)
{
   17eae:	b5e0      	push	{r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   17eb0:	7013      	strb	r3, [r2, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   17eb2:	4b2c      	ldr	r3, [pc, #176]	; (17f64 <sd_mmc_spi_read_word+0xc4>)
{
   17eb4:	b085      	sub	sp, #20
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   17eb6:	4699      	mov	r9, r3
   17eb8:	4b2b      	ldr	r3, [pc, #172]	; (17f68 <sd_mmc_spi_read_word+0xc8>)
{
   17eba:	9001      	str	r0, [sp, #4]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   17ebc:	469b      	mov	fp, r3
   17ebe:	8819      	ldrh	r1, [r3, #0]
   17ec0:	4b2a      	ldr	r3, [pc, #168]	; (17f6c <sd_mmc_spi_read_word+0xcc>)
   17ec2:	469a      	mov	sl, r3
   17ec4:	464b      	mov	r3, r9
   17ec6:	6818      	ldr	r0, [r3, #0]
   17ec8:	47d0      	blx	sl
   17eca:	2900      	cmp	r1, #0
   17ecc:	d019      	beq.n	17f02 <sd_mmc_spi_read_word+0x62>
   17ece:	4f28      	ldr	r7, [pc, #160]	; (17f70 <sd_mmc_spi_read_word+0xd0>)
   17ed0:	4e28      	ldr	r6, [pc, #160]	; (17f74 <sd_mmc_spi_read_word+0xd4>)
		if (!sd_mmc_spi_start_read_block()) {
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&spi_main, (uint8_t *)&value, 4,
   17ed2:	23ff      	movs	r3, #255	; 0xff
   17ed4:	2204      	movs	r2, #4
   17ed6:	a901      	add	r1, sp, #4
   17ed8:	0038      	movs	r0, r7
   17eda:	47b0      	blx	r6
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
   17edc:	464b      	mov	r3, r9
   17ede:	681b      	ldr	r3, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
   17ee0:	2401      	movs	r4, #1
	sd_mmc_spi_transfert_pos += 4;
   17ee2:	1d18      	adds	r0, r3, #4
   17ee4:	464b      	mov	r3, r9
   17ee6:	6018      	str	r0, [r3, #0]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   17ee8:	465b      	mov	r3, fp
   17eea:	8819      	ldrh	r1, [r3, #0]
   17eec:	47d0      	blx	sl
   17eee:	2900      	cmp	r1, #0
   17ef0:	d025      	beq.n	17f3e <sd_mmc_spi_read_word+0x9e>
}
   17ef2:	0020      	movs	r0, r4
   17ef4:	b005      	add	sp, #20
   17ef6:	bc3c      	pop	{r2, r3, r4, r5}
   17ef8:	4690      	mov	r8, r2
   17efa:	4699      	mov	r9, r3
   17efc:	46a2      	mov	sl, r4
   17efe:	46ab      	mov	fp, r5
   17f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   17f02:	230f      	movs	r3, #15
	token = 0;
   17f04:	ad03      	add	r5, sp, #12
   17f06:	7029      	strb	r1, [r5, #0]
   17f08:	4c1b      	ldr	r4, [pc, #108]	; (17f78 <sd_mmc_spi_read_word+0xd8>)
   17f0a:	4f19      	ldr	r7, [pc, #100]	; (17f70 <sd_mmc_spi_read_word+0xd0>)
   17f0c:	4e19      	ldr	r6, [pc, #100]	; (17f74 <sd_mmc_spi_read_word+0xd4>)
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   17f0e:	4698      	mov	r8, r3
   17f10:	e004      	b.n	17f1c <sd_mmc_spi_read_word+0x7c>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   17f12:	2bfe      	cmp	r3, #254	; 0xfe
   17f14:	d0dd      	beq.n	17ed2 <sd_mmc_spi_read_word+0x32>
   17f16:	3c01      	subs	r4, #1
		if (i-- == 0) {
   17f18:	2c00      	cmp	r4, #0
   17f1a:	d01b      	beq.n	17f54 <sd_mmc_spi_read_word+0xb4>
		spi_read_buffer_wait(&spi_main, &token, 1,
   17f1c:	23ff      	movs	r3, #255	; 0xff
   17f1e:	2201      	movs	r2, #1
   17f20:	0029      	movs	r1, r5
   17f22:	0038      	movs	r0, r7
   17f24:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   17f26:	782b      	ldrb	r3, [r5, #0]
   17f28:	4641      	mov	r1, r8
   17f2a:	001a      	movs	r2, r3
   17f2c:	438a      	bics	r2, r1
   17f2e:	d1f0      	bne.n	17f12 <sd_mmc_spi_read_word+0x72>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   17f30:	3207      	adds	r2, #7
   17f32:	421a      	tst	r2, r3
   17f34:	d009      	beq.n	17f4a <sd_mmc_spi_read_word+0xaa>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   17f36:	4b0a      	ldr	r3, [pc, #40]	; (17f60 <sd_mmc_spi_read_word+0xc0>)
			return false;
   17f38:	2400      	movs	r4, #0
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   17f3a:	701a      	strb	r2, [r3, #0]
   17f3c:	e7d9      	b.n	17ef2 <sd_mmc_spi_read_word+0x52>
	spi_read_buffer_wait(&spi_main, crc, 2,
   17f3e:	23ff      	movs	r3, #255	; 0xff
   17f40:	2202      	movs	r2, #2
   17f42:	a903      	add	r1, sp, #12
   17f44:	0038      	movs	r0, r7
   17f46:	47b0      	blx	r6
   17f48:	e7d3      	b.n	17ef2 <sd_mmc_spi_read_word+0x52>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   17f4a:	230b      	movs	r3, #11
   17f4c:	4a04      	ldr	r2, [pc, #16]	; (17f60 <sd_mmc_spi_read_word+0xc0>)
			return false;
   17f4e:	2400      	movs	r4, #0
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   17f50:	7013      	strb	r3, [r2, #0]
   17f52:	e7ce      	b.n	17ef2 <sd_mmc_spi_read_word+0x52>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   17f54:	2304      	movs	r3, #4
   17f56:	4a02      	ldr	r2, [pc, #8]	; (17f60 <sd_mmc_spi_read_word+0xc0>)
			return false;
   17f58:	2400      	movs	r4, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   17f5a:	7013      	strb	r3, [r2, #0]
   17f5c:	e7c9      	b.n	17ef2 <sd_mmc_spi_read_word+0x52>
   17f5e:	46c0      	nop			; (mov r8, r8)
   17f60:	20000cf8 	.word	0x20000cf8
   17f64:	20000d00 	.word	0x20000d00
   17f68:	20000cf6 	.word	0x20000cf6
   17f6c:	00025a49 	.word	0x00025a49
   17f70:	20000e6c 	.word	0x20000e6c
   17f74:	0001ec39 	.word	0x0001ec39
   17f78:	0007a120 	.word	0x0007a120

00017f7c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   17f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f7e:	464e      	mov	r6, r9
   17f80:	46de      	mov	lr, fp
   17f82:	4657      	mov	r7, sl
   17f84:	4645      	mov	r5, r8
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   17f86:	2300      	movs	r3, #0
{
   17f88:	b5e0      	push	{r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   17f8a:	4a2c      	ldr	r2, [pc, #176]	; (1803c <sd_mmc_spi_start_read_blocks+0xc0>)
{
   17f8c:	b085      	sub	sp, #20
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   17f8e:	7013      	strb	r3, [r2, #0]
	pos = 0;
	while (nb_block--) {
   17f90:	1e4b      	subs	r3, r1, #1
   17f92:	b29b      	uxth	r3, r3
{
   17f94:	9001      	str	r0, [sp, #4]
	while (nb_block--) {
   17f96:	4699      	mov	r9, r3
   17f98:	2900      	cmp	r1, #0
   17f9a:	d045      	beq.n	18028 <sd_mmc_spi_start_read_blocks+0xac>
   17f9c:	2300      	movs	r3, #0
   17f9e:	469a      	mov	sl, r3

		// Read block
		spi_read_buffer_wait(&spi_main, &((uint8_t*)dest)[pos],
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   17fa0:	4b27      	ldr	r3, [pc, #156]	; (18040 <sd_mmc_spi_start_read_blocks+0xc4>)
   17fa2:	4f28      	ldr	r7, [pc, #160]	; (18044 <sd_mmc_spi_start_read_blocks+0xc8>)
   17fa4:	469b      	mov	fp, r3
   17fa6:	4e28      	ldr	r6, [pc, #160]	; (18048 <sd_mmc_spi_start_read_blocks+0xcc>)
   17fa8:	ad03      	add	r5, sp, #12
	token = 0;
   17faa:	2300      	movs	r3, #0
   17fac:	702b      	strb	r3, [r5, #0]
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   17fae:	230f      	movs	r3, #15
	token = 0;
   17fb0:	4c26      	ldr	r4, [pc, #152]	; (1804c <sd_mmc_spi_start_read_blocks+0xd0>)
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   17fb2:	4698      	mov	r8, r3
   17fb4:	e004      	b.n	17fc0 <sd_mmc_spi_start_read_blocks+0x44>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   17fb6:	2bfe      	cmp	r3, #254	; 0xfe
   17fb8:	d019      	beq.n	17fee <sd_mmc_spi_start_read_blocks+0x72>
   17fba:	3c01      	subs	r4, #1
		if (i-- == 0) {
   17fbc:	2c00      	cmp	r4, #0
   17fbe:	d039      	beq.n	18034 <sd_mmc_spi_start_read_blocks+0xb8>
		spi_read_buffer_wait(&spi_main, &token, 1,
   17fc0:	23ff      	movs	r3, #255	; 0xff
   17fc2:	2201      	movs	r2, #1
   17fc4:	0029      	movs	r1, r5
   17fc6:	0038      	movs	r0, r7
   17fc8:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   17fca:	782b      	ldrb	r3, [r5, #0]
   17fcc:	4641      	mov	r1, r8
   17fce:	001a      	movs	r2, r3
   17fd0:	438a      	bics	r2, r1
   17fd2:	d1f0      	bne.n	17fb6 <sd_mmc_spi_start_read_blocks+0x3a>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   17fd4:	3207      	adds	r2, #7
   17fd6:	421a      	tst	r2, r3
   17fd8:	d028      	beq.n	1802c <sd_mmc_spi_start_read_blocks+0xb0>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   17fda:	4b18      	ldr	r3, [pc, #96]	; (1803c <sd_mmc_spi_start_read_blocks+0xc0>)
   17fdc:	701a      	strb	r2, [r3, #0]
			return false;
   17fde:	2000      	movs	r0, #0

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
   17fe0:	b005      	add	sp, #20
   17fe2:	bc3c      	pop	{r2, r3, r4, r5}
   17fe4:	4690      	mov	r8, r2
   17fe6:	4699      	mov	r9, r3
   17fe8:	46a2      	mov	sl, r4
   17fea:	46ab      	mov	fp, r5
   17fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		spi_read_buffer_wait(&spi_main, &((uint8_t*)dest)[pos],
   17fee:	4b18      	ldr	r3, [pc, #96]	; (18050 <sd_mmc_spi_start_read_blocks+0xd4>)
   17ff0:	0038      	movs	r0, r7
   17ff2:	881a      	ldrh	r2, [r3, #0]
   17ff4:	9b01      	ldr	r3, [sp, #4]
   17ff6:	4453      	add	r3, sl
   17ff8:	0019      	movs	r1, r3
   17ffa:	23ff      	movs	r3, #255	; 0xff
   17ffc:	47b0      	blx	r6
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   17ffe:	465a      	mov	r2, fp
   18000:	6812      	ldr	r2, [r2, #0]
		pos += sd_mmc_spi_block_size;
   18002:	4b13      	ldr	r3, [pc, #76]	; (18050 <sd_mmc_spi_start_read_blocks+0xd4>)
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   18004:	4694      	mov	ip, r2
   18006:	465a      	mov	r2, fp
		pos += sd_mmc_spi_block_size;
   18008:	881b      	ldrh	r3, [r3, #0]
	spi_read_buffer_wait(&spi_main, crc, 2,
   1800a:	0029      	movs	r1, r5
		pos += sd_mmc_spi_block_size;
   1800c:	449a      	add	sl, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1800e:	4463      	add	r3, ip
   18010:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&spi_main, crc, 2,
   18012:	0038      	movs	r0, r7
   18014:	23ff      	movs	r3, #255	; 0xff
   18016:	2202      	movs	r2, #2
   18018:	47b0      	blx	r6
	while (nb_block--) {
   1801a:	464b      	mov	r3, r9
   1801c:	3b01      	subs	r3, #1
   1801e:	b29b      	uxth	r3, r3
   18020:	4699      	mov	r9, r3
   18022:	4b0c      	ldr	r3, [pc, #48]	; (18054 <sd_mmc_spi_start_read_blocks+0xd8>)
   18024:	4599      	cmp	r9, r3
   18026:	d1c0      	bne.n	17faa <sd_mmc_spi_start_read_blocks+0x2e>
	return true;
   18028:	2001      	movs	r0, #1
   1802a:	e7d9      	b.n	17fe0 <sd_mmc_spi_start_read_blocks+0x64>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1802c:	230b      	movs	r3, #11
   1802e:	4a03      	ldr	r2, [pc, #12]	; (1803c <sd_mmc_spi_start_read_blocks+0xc0>)
   18030:	7013      	strb	r3, [r2, #0]
   18032:	e7d4      	b.n	17fde <sd_mmc_spi_start_read_blocks+0x62>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   18034:	2304      	movs	r3, #4
   18036:	4a01      	ldr	r2, [pc, #4]	; (1803c <sd_mmc_spi_start_read_blocks+0xc0>)
   18038:	7013      	strb	r3, [r2, #0]
   1803a:	e7d0      	b.n	17fde <sd_mmc_spi_start_read_blocks+0x62>
   1803c:	20000cf8 	.word	0x20000cf8
   18040:	20000d00 	.word	0x20000d00
   18044:	20000e6c 	.word	0x20000e6c
   18048:	0001ec39 	.word	0x0001ec39
   1804c:	0007a120 	.word	0x0007a120
   18050:	20000cf6 	.word	0x20000cf6
   18054:	0000ffff 	.word	0x0000ffff

00018058 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
   18058:	2001      	movs	r0, #1
   1805a:	4770      	bx	lr

0001805c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1805c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1805e:	46de      	mov	lr, fp
   18060:	4657      	mov	r7, sl
   18062:	464e      	mov	r6, r9
   18064:	4645      	mov	r5, r8
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   18066:	2300      	movs	r3, #0
{
   18068:	b5e0      	push	{r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1806a:	4a48      	ldr	r2, [pc, #288]	; (1818c <sd_mmc_spi_start_write_blocks+0x130>)
{
   1806c:	b087      	sub	sp, #28
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1806e:	7013      	strb	r3, [r2, #0]
	pos = 0;
	while (nb_block--) {
   18070:	1e4b      	subs	r3, r1, #1
   18072:	b29b      	uxth	r3, r3
{
   18074:	9003      	str	r0, [sp, #12]
	while (nb_block--) {
   18076:	9302      	str	r3, [sp, #8]
   18078:	2900      	cmp	r1, #0
   1807a:	d04c      	beq.n	18116 <sd_mmc_spi_start_write_blocks+0xba>
   1807c:	2300      	movs	r3, #0
   1807e:	9301      	str	r3, [sp, #4]
   18080:	ab04      	add	r3, sp, #16
   18082:	1d5f      	adds	r7, r3, #5
   18084:	4b42      	ldr	r3, [pc, #264]	; (18190 <sd_mmc_spi_start_write_blocks+0x134>)
   18086:	4e43      	ldr	r6, [pc, #268]	; (18194 <sd_mmc_spi_start_write_blocks+0x138>)
   18088:	4699      	mov	r9, r3
   1808a:	ab04      	add	r3, sp, #16
   1808c:	1d9c      	adds	r4, r3, #6
   1808e:	4b42      	ldr	r3, [pc, #264]	; (18198 <sd_mmc_spi_start_write_blocks+0x13c>)
   18090:	469b      	mov	fp, r3
   18092:	4b42      	ldr	r3, [pc, #264]	; (1819c <sd_mmc_spi_start_write_blocks+0x140>)
   18094:	4698      	mov	r8, r3
	uint8_t dummy = 0xFF;
   18096:	23ff      	movs	r3, #255	; 0xff
	spi_write_buffer_wait(&spi_main,&dummy, 1);
   18098:	2201      	movs	r2, #1
   1809a:	0039      	movs	r1, r7
   1809c:	0030      	movs	r0, r6
	uint8_t dummy = 0xFF;
   1809e:	703b      	strb	r3, [r7, #0]
	spi_write_buffer_wait(&spi_main,&dummy, 1);
   180a0:	47c8      	blx	r9
	if (1 == sd_mmc_spi_nb_block) {
   180a2:	4b3f      	ldr	r3, [pc, #252]	; (181a0 <sd_mmc_spi_start_write_blocks+0x144>)
   180a4:	881b      	ldrh	r3, [r3, #0]
   180a6:	2b01      	cmp	r3, #1
   180a8:	d066      	beq.n	18178 <sd_mmc_spi_start_write_blocks+0x11c>
		token = SPI_TOKEN_MULTI_WRITE;
   180aa:	23fc      	movs	r3, #252	; 0xfc
	spi_write_buffer_wait(&spi_main,&token, 1);
   180ac:	2201      	movs	r2, #1
   180ae:	0021      	movs	r1, r4
   180b0:	0030      	movs	r0, r6
   180b2:	7023      	strb	r3, [r4, #0]
   180b4:	47c8      	blx	r9
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();

		// Write block
		spi_write_buffer_wait(&spi_main, &((uint8_t*)src)[pos],
   180b6:	9801      	ldr	r0, [sp, #4]
   180b8:	4b3a      	ldr	r3, [pc, #232]	; (181a4 <sd_mmc_spi_start_write_blocks+0x148>)
   180ba:	4684      	mov	ip, r0
   180bc:	881a      	ldrh	r2, [r3, #0]
   180be:	9b03      	ldr	r3, [sp, #12]
   180c0:	0030      	movs	r0, r6
   180c2:	4463      	add	r3, ip
   180c4:	0019      	movs	r1, r3
   180c6:	47c8      	blx	r9
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   180c8:	4b36      	ldr	r3, [pc, #216]	; (181a4 <sd_mmc_spi_start_write_blocks+0x148>)
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   180ca:	465a      	mov	r2, fp
		pos += sd_mmc_spi_block_size;
   180cc:	881b      	ldrh	r3, [r3, #0]
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   180ce:	2501      	movs	r5, #1
		pos += sd_mmc_spi_block_size;
   180d0:	469a      	mov	sl, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   180d2:	465b      	mov	r3, fp
   180d4:	681b      	ldr	r3, [r3, #0]
	spi_write_buffer_wait(&spi_main, (uint8_t *)&crc, 2);
   180d6:	0021      	movs	r1, r4
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   180d8:	4453      	add	r3, sl
   180da:	6013      	str	r3, [r2, #0]
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   180dc:	426d      	negs	r5, r5
	spi_write_buffer_wait(&spi_main, (uint8_t *)&crc, 2);
   180de:	2202      	movs	r2, #2
   180e0:	0030      	movs	r0, r6
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   180e2:	8025      	strh	r5, [r4, #0]
	spi_write_buffer_wait(&spi_main, (uint8_t *)&crc, 2);
   180e4:	47c8      	blx	r9
	spi_read_buffer_wait(&spi_main, &resp, 1,
   180e6:	23ff      	movs	r3, #255	; 0xff
   180e8:	2201      	movs	r2, #1
   180ea:	0039      	movs	r1, r7
   180ec:	0030      	movs	r0, r6
   180ee:	47c0      	blx	r8
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   180f0:	2211      	movs	r2, #17
   180f2:	783b      	ldrb	r3, [r7, #0]
   180f4:	401a      	ands	r2, r3
   180f6:	2a01      	cmp	r2, #1
   180f8:	d00f      	beq.n	1811a <sd_mmc_spi_start_write_blocks+0xbe>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   180fa:	2301      	movs	r3, #1
   180fc:	4a23      	ldr	r2, [pc, #140]	; (1818c <sd_mmc_spi_start_write_blocks+0x130>)
   180fe:	7013      	strb	r3, [r2, #0]
		if (nb_block) {
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   18100:	2000      	movs	r0, #0
			}
		}
	}
	return true;
}
   18102:	b007      	add	sp, #28
   18104:	bc3c      	pop	{r2, r3, r4, r5}
   18106:	4690      	mov	r8, r2
   18108:	4699      	mov	r9, r3
   1810a:	46a2      	mov	sl, r4
   1810c:	46ab      	mov	fp, r5
   1810e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (nb_block) {
   18110:	9b02      	ldr	r3, [sp, #8]
   18112:	2b00      	cmp	r3, #0
   18114:	d10b      	bne.n	1812e <sd_mmc_spi_start_write_blocks+0xd2>
	return true;
   18116:	2001      	movs	r0, #1
   18118:	e7f3      	b.n	18102 <sd_mmc_spi_start_write_blocks+0xa6>
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1811a:	221e      	movs	r2, #30
   1811c:	4013      	ands	r3, r2
   1811e:	2b04      	cmp	r3, #4
   18120:	d0f6      	beq.n	18110 <sd_mmc_spi_start_write_blocks+0xb4>
   18122:	2b0a      	cmp	r3, #10
   18124:	d12a      	bne.n	1817c <sd_mmc_spi_start_write_blocks+0x120>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   18126:	4a19      	ldr	r2, [pc, #100]	; (1818c <sd_mmc_spi_start_write_blocks+0x130>)
   18128:	3b02      	subs	r3, #2
   1812a:	7013      	strb	r3, [r2, #0]
   1812c:	e7e8      	b.n	18100 <sd_mmc_spi_start_write_blocks+0xa4>
	spi_read_buffer_wait(&spi_main, &line, 1,
   1812e:	23ff      	movs	r3, #255	; 0xff
   18130:	2201      	movs	r2, #1
   18132:	0021      	movs	r1, r4
   18134:	0030      	movs	r0, r6
	uint8_t line = 0xFF;
   18136:	7025      	strb	r5, [r4, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
   18138:	47c0      	blx	r8
	spi_read_buffer_wait(&spi_main, &line, 1,
   1813a:	23ff      	movs	r3, #255	; 0xff
   1813c:	2201      	movs	r2, #1
   1813e:	0021      	movs	r1, r4
   18140:	0030      	movs	r0, r6
   18142:	47c0      	blx	r8
		spi_read_buffer_wait(&spi_main, &line, 1,
   18144:	23ff      	movs	r3, #255	; 0xff
   18146:	2201      	movs	r2, #1
   18148:	0021      	movs	r1, r4
   1814a:	0030      	movs	r0, r6
   1814c:	47c0      	blx	r8
   1814e:	4d16      	ldr	r5, [pc, #88]	; (181a8 <sd_mmc_spi_start_write_blocks+0x14c>)
   18150:	e007      	b.n	18162 <sd_mmc_spi_start_write_blocks+0x106>
   18152:	23ff      	movs	r3, #255	; 0xff
   18154:	2201      	movs	r2, #1
   18156:	0021      	movs	r1, r4
   18158:	0030      	movs	r0, r6
   1815a:	3d01      	subs	r5, #1
   1815c:	47c0      	blx	r8
		if (!(nec_timeout--)) {
   1815e:	2d00      	cmp	r5, #0
   18160:	d010      	beq.n	18184 <sd_mmc_spi_start_write_blocks+0x128>
	} while (line != 0xFF);
   18162:	7823      	ldrb	r3, [r4, #0]
   18164:	2bff      	cmp	r3, #255	; 0xff
   18166:	d1f4      	bne.n	18152 <sd_mmc_spi_start_write_blocks+0xf6>
		pos += sd_mmc_spi_block_size;
   18168:	9b01      	ldr	r3, [sp, #4]
   1816a:	4453      	add	r3, sl
   1816c:	9301      	str	r3, [sp, #4]
	while (nb_block--) {
   1816e:	9b02      	ldr	r3, [sp, #8]
   18170:	3b01      	subs	r3, #1
   18172:	b29b      	uxth	r3, r3
   18174:	9302      	str	r3, [sp, #8]
   18176:	e78e      	b.n	18096 <sd_mmc_spi_start_write_blocks+0x3a>
		token = SPI_TOKEN_SINGLE_WRITE;
   18178:	23fe      	movs	r3, #254	; 0xfe
   1817a:	e797      	b.n	180ac <sd_mmc_spi_start_write_blocks+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1817c:	230a      	movs	r3, #10
   1817e:	4a03      	ldr	r2, [pc, #12]	; (1818c <sd_mmc_spi_start_write_blocks+0x130>)
   18180:	7013      	strb	r3, [r2, #0]
   18182:	e7bd      	b.n	18100 <sd_mmc_spi_start_write_blocks+0xa4>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   18184:	2305      	movs	r3, #5
   18186:	4a01      	ldr	r2, [pc, #4]	; (1818c <sd_mmc_spi_start_write_blocks+0x130>)
   18188:	7013      	strb	r3, [r2, #0]
   1818a:	e7b9      	b.n	18100 <sd_mmc_spi_start_write_blocks+0xa4>
   1818c:	20000cf8 	.word	0x20000cf8
   18190:	0001ee2d 	.word	0x0001ee2d
   18194:	20000e6c 	.word	0x20000e6c
   18198:	20000d00 	.word	0x20000d00
   1819c:	0001ec39 	.word	0x0001ec39
   181a0:	20000cfa 	.word	0x20000cfa
   181a4:	20000cf6 	.word	0x20000cf6
   181a8:	00030d40 	.word	0x00030d40

000181ac <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   181ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   181ae:	46ce      	mov	lr, r9
   181b0:	4647      	mov	r7, r8
   181b2:	b580      	push	{r7, lr}
   181b4:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
   181b6:	466b      	mov	r3, sp
   181b8:	1ddd      	adds	r5, r3, #7
   181ba:	23ff      	movs	r3, #255	; 0xff
	spi_read_buffer_wait(&spi_main, &line, 1,
   181bc:	4f32      	ldr	r7, [pc, #200]	; (18288 <sd_mmc_spi_wait_end_of_write_blocks+0xdc>)
   181be:	4c33      	ldr	r4, [pc, #204]	; (1828c <sd_mmc_spi_wait_end_of_write_blocks+0xe0>)
   181c0:	2201      	movs	r2, #1
   181c2:	0029      	movs	r1, r5
   181c4:	0038      	movs	r0, r7
	uint8_t line = 0xFF;
   181c6:	702b      	strb	r3, [r5, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
   181c8:	47a0      	blx	r4
	spi_read_buffer_wait(&spi_main, &line, 1,
   181ca:	23ff      	movs	r3, #255	; 0xff
   181cc:	2201      	movs	r2, #1
   181ce:	0029      	movs	r1, r5
   181d0:	0038      	movs	r0, r7
   181d2:	47a0      	blx	r4
		spi_read_buffer_wait(&spi_main, &line, 1,
   181d4:	23ff      	movs	r3, #255	; 0xff
   181d6:	2201      	movs	r2, #1
   181d8:	0029      	movs	r1, r5
   181da:	0038      	movs	r0, r7
	spi_read_buffer_wait(&spi_main, &line, 1,
   181dc:	46a0      	mov	r8, r4
		spi_read_buffer_wait(&spi_main, &line, 1,
   181de:	47a0      	blx	r4
   181e0:	4c2b      	ldr	r4, [pc, #172]	; (18290 <sd_mmc_spi_wait_end_of_write_blocks+0xe4>)
   181e2:	e007      	b.n	181f4 <sd_mmc_spi_wait_end_of_write_blocks+0x48>
   181e4:	23ff      	movs	r3, #255	; 0xff
   181e6:	2201      	movs	r2, #1
   181e8:	0029      	movs	r1, r5
   181ea:	0038      	movs	r0, r7
   181ec:	3c01      	subs	r4, #1
   181ee:	47c0      	blx	r8
		if (!(nec_timeout--)) {
   181f0:	2c00      	cmp	r4, #0
   181f2:	d015      	beq.n	18220 <sd_mmc_spi_wait_end_of_write_blocks+0x74>
	} while (line != 0xFF);
   181f4:	782e      	ldrb	r6, [r5, #0]
   181f6:	2eff      	cmp	r6, #255	; 0xff
   181f8:	d1f4      	bne.n	181e4 <sd_mmc_spi_wait_end_of_write_blocks+0x38>
	if (1 == sd_mmc_spi_nb_block) {
   181fa:	4b26      	ldr	r3, [pc, #152]	; (18294 <sd_mmc_spi_wait_end_of_write_blocks+0xe8>)
   181fc:	881c      	ldrh	r4, [r3, #0]
   181fe:	2c01      	cmp	r4, #1
   18200:	d03f      	beq.n	18282 <sd_mmc_spi_wait_end_of_write_blocks+0xd6>
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   18202:	4b25      	ldr	r3, [pc, #148]	; (18298 <sd_mmc_spi_wait_end_of_write_blocks+0xec>)
   18204:	8819      	ldrh	r1, [r3, #0]
   18206:	4b25      	ldr	r3, [pc, #148]	; (1829c <sd_mmc_spi_wait_end_of_write_blocks+0xf0>)
   18208:	6818      	ldr	r0, [r3, #0]
   1820a:	4b25      	ldr	r3, [pc, #148]	; (182a0 <sd_mmc_spi_wait_end_of_write_blocks+0xf4>)
   1820c:	4798      	blx	r3
   1820e:	0003      	movs	r3, r0
		return true; // It is not the End of multi write
   18210:	2001      	movs	r0, #1
	if (sd_mmc_spi_nb_block >
   18212:	429c      	cmp	r4, r3
   18214:	d909      	bls.n	1822a <sd_mmc_spi_wait_end_of_write_blocks+0x7e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
   18216:	b003      	add	sp, #12
   18218:	bc0c      	pop	{r2, r3}
   1821a:	4690      	mov	r8, r2
   1821c:	4699      	mov	r9, r3
   1821e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   18220:	2205      	movs	r2, #5
   18222:	4b20      	ldr	r3, [pc, #128]	; (182a4 <sd_mmc_spi_wait_end_of_write_blocks+0xf8>)
		return false;
   18224:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   18226:	701a      	strb	r2, [r3, #0]
   18228:	e7f5      	b.n	18216 <sd_mmc_spi_wait_end_of_write_blocks+0x6a>
	value = 0xFF;
   1822a:	466b      	mov	r3, sp
   1822c:	1d9c      	adds	r4, r3, #6
   1822e:	719e      	strb	r6, [r3, #6]
	spi_write_buffer_wait(&spi_main, &value, 1);
   18230:	4b1d      	ldr	r3, [pc, #116]	; (182a8 <sd_mmc_spi_wait_end_of_write_blocks+0xfc>)
   18232:	0021      	movs	r1, r4
   18234:	2201      	movs	r2, #1
   18236:	0038      	movs	r0, r7
   18238:	4699      	mov	r9, r3
   1823a:	4798      	blx	r3
	value = SPI_TOKEN_STOP_TRAN;
   1823c:	23fd      	movs	r3, #253	; 0xfd
	spi_write_buffer_wait(&spi_main, &value, 1);
   1823e:	0021      	movs	r1, r4
   18240:	2201      	movs	r2, #1
   18242:	0038      	movs	r0, r7
	value = SPI_TOKEN_STOP_TRAN;
   18244:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&spi_main, &value, 1);
   18246:	47c8      	blx	r9
	spi_read_buffer_wait(&spi_main, &line, 1,
   18248:	23ff      	movs	r3, #255	; 0xff
   1824a:	2201      	movs	r2, #1
   1824c:	0029      	movs	r1, r5
   1824e:	0038      	movs	r0, r7
	uint8_t line = 0xFF;
   18250:	702e      	strb	r6, [r5, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
   18252:	47c0      	blx	r8
	spi_read_buffer_wait(&spi_main, &line, 1,
   18254:	23ff      	movs	r3, #255	; 0xff
   18256:	2201      	movs	r2, #1
   18258:	0029      	movs	r1, r5
   1825a:	0038      	movs	r0, r7
   1825c:	47c0      	blx	r8
		spi_read_buffer_wait(&spi_main, &line, 1,
   1825e:	23ff      	movs	r3, #255	; 0xff
   18260:	2201      	movs	r2, #1
   18262:	0029      	movs	r1, r5
   18264:	0038      	movs	r0, r7
   18266:	47c0      	blx	r8
   18268:	4c09      	ldr	r4, [pc, #36]	; (18290 <sd_mmc_spi_wait_end_of_write_blocks+0xe4>)
   1826a:	e007      	b.n	1827c <sd_mmc_spi_wait_end_of_write_blocks+0xd0>
   1826c:	23ff      	movs	r3, #255	; 0xff
   1826e:	2201      	movs	r2, #1
   18270:	0029      	movs	r1, r5
   18272:	0038      	movs	r0, r7
   18274:	3c01      	subs	r4, #1
   18276:	47c0      	blx	r8
		if (!(nec_timeout--)) {
   18278:	2c00      	cmp	r4, #0
   1827a:	d0d1      	beq.n	18220 <sd_mmc_spi_wait_end_of_write_blocks+0x74>
	} while (line != 0xFF);
   1827c:	782b      	ldrb	r3, [r5, #0]
   1827e:	2bff      	cmp	r3, #255	; 0xff
   18280:	d1f4      	bne.n	1826c <sd_mmc_spi_wait_end_of_write_blocks+0xc0>
	return true;
   18282:	2001      	movs	r0, #1
   18284:	e7c7      	b.n	18216 <sd_mmc_spi_wait_end_of_write_blocks+0x6a>
   18286:	46c0      	nop			; (mov r8, r8)
   18288:	20000e6c 	.word	0x20000e6c
   1828c:	0001ec39 	.word	0x0001ec39
   18290:	00030d40 	.word	0x00030d40
   18294:	20000cfa 	.word	0x20000cfa
   18298:	20000cf6 	.word	0x20000cf6
   1829c:	20000d00 	.word	0x20000d00
   182a0:	0002593d 	.word	0x0002593d
   182a4:	20000cf8 	.word	0x20000cf8
   182a8:	0001ee2d 	.word	0x0001ee2d

000182ac <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
   182ac:	2001      	movs	r0, #1
   182ae:	4770      	bx	lr

000182b0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   182b0:	0003      	movs	r3, r0
   182b2:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   182b4:	2001      	movs	r0, #1
   182b6:	2b00      	cmp	r3, #0
   182b8:	d101      	bne.n	182be <mem_test_unit_ready+0xe>
   182ba:	4b01      	ldr	r3, [pc, #4]	; (182c0 <mem_test_unit_ready+0x10>)
   182bc:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return status;
}
   182be:	bd10      	pop	{r4, pc}
   182c0:	0001c62d 	.word	0x0001c62d

000182c4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   182c4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   182c6:	2301      	movs	r3, #1
   182c8:	2800      	cmp	r0, #0
   182ca:	d103      	bne.n	182d4 <mem_read_capacity+0x10>
   182cc:	4b02      	ldr	r3, [pc, #8]	; (182d8 <mem_read_capacity+0x14>)
   182ce:	0008      	movs	r0, r1
   182d0:	4798      	blx	r3
   182d2:	0003      	movs	r3, r0
#endif

  Ctrl_access_unlock();

  return status;
}
   182d4:	0018      	movs	r0, r3
   182d6:	bd10      	pop	{r4, pc}
   182d8:	0001c675 	.word	0x0001c675

000182dc <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   182dc:	4243      	negs	r3, r0
   182de:	4158      	adcs	r0, r3
#endif

  Ctrl_access_unlock();

  return sector_size;
}
   182e0:	b2c0      	uxtb	r0, r0
   182e2:	4770      	bx	lr

000182e4 <mem_unload>:


bool mem_unload(U8 lun, bool unload)
{
   182e4:	b510      	push	{r4, lr}

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   182e6:	2300      	movs	r3, #0
   182e8:	2800      	cmp	r0, #0
   182ea:	d103      	bne.n	182f4 <mem_unload+0x10>
   182ec:	4b02      	ldr	r3, [pc, #8]	; (182f8 <mem_unload+0x14>)
   182ee:	0008      	movs	r0, r1
   182f0:	4798      	blx	r3
   182f2:	0003      	movs	r3, r0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
   182f4:	0018      	movs	r0, r3
   182f6:	bd10      	pop	{r4, pc}
   182f8:	0001c6d1 	.word	0x0001c6d1

000182fc <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
   182fc:	0003      	movs	r3, r0
   182fe:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   18300:	2001      	movs	r0, #1
   18302:	2b00      	cmp	r3, #0
   18304:	d101      	bne.n	1830a <mem_wr_protect+0xe>
   18306:	4b01      	ldr	r3, [pc, #4]	; (1830c <mem_wr_protect+0x10>)
   18308:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   1830a:	bd10      	pop	{r4, pc}
   1830c:	0001c6dd 	.word	0x0001c6dd

00018310 <mem_removal>:


bool mem_removal(U8 lun)
{
   18310:	0003      	movs	r3, r0
   18312:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
   18314:	2001      	movs	r0, #1
   18316:	2b00      	cmp	r3, #0
   18318:	d101      	bne.n	1831e <mem_removal+0xe>
   1831a:	4b01      	ldr	r3, [pc, #4]	; (18320 <mem_removal+0x10>)
   1831c:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return removal;
}
   1831e:	bd10      	pop	{r4, pc}
   18320:	0001c6ed 	.word	0x0001c6ed

00018324 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
   18324:	2800      	cmp	r0, #0
   18326:	d101      	bne.n	1832c <mem_name+0x8>
   18328:	4801      	ldr	r0, [pc, #4]	; (18330 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
   1832a:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
   1832c:	2000      	movs	r0, #0
   1832e:	e7fc      	b.n	1832a <mem_name+0x6>
   18330:	0002e9a4 	.word	0x0002e9a4

00018334 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
   18334:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
   18336:	2301      	movs	r3, #1
{
   18338:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
   1833a:	2800      	cmp	r0, #0
   1833c:	d104      	bne.n	18348 <memory_2_usb+0x14>
   1833e:	4b03      	ldr	r3, [pc, #12]	; (1834c <memory_2_usb+0x18>)
   18340:	0011      	movs	r1, r2
   18342:	0020      	movs	r0, r4
   18344:	4798      	blx	r3
   18346:	0003      	movs	r3, r0
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   18348:	0018      	movs	r0, r3
   1834a:	bd10      	pop	{r4, pc}
   1834c:	0001c6f1 	.word	0x0001c6f1

00018350 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
   18350:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
   18352:	2301      	movs	r3, #1
{
   18354:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
   18356:	2800      	cmp	r0, #0
   18358:	d104      	bne.n	18364 <usb_2_memory+0x14>
   1835a:	4b03      	ldr	r3, [pc, #12]	; (18368 <usb_2_memory+0x18>)
   1835c:	0011      	movs	r1, r2
   1835e:	0020      	movs	r0, r4
   18360:	4798      	blx	r3
   18362:	0003      	movs	r3, r0
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   18364:	0018      	movs	r0, r3
   18366:	bd10      	pop	{r4, pc}
   18368:	0001c7ad 	.word	0x0001c7ad

0001836c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   1836c:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   1836e:	2301      	movs	r3, #1
{
   18370:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   18372:	2800      	cmp	r0, #0
   18374:	d104      	bne.n	18380 <memory_2_ram+0x14>
   18376:	4b03      	ldr	r3, [pc, #12]	; (18384 <memory_2_ram+0x18>)
   18378:	0011      	movs	r1, r2
   1837a:	0020      	movs	r0, r4
   1837c:	4798      	blx	r3
   1837e:	0003      	movs	r3, r0
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   18380:	0018      	movs	r0, r3
   18382:	bd10      	pop	{r4, pc}
   18384:	0001c895 	.word	0x0001c895

00018388 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   18388:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1838a:	2301      	movs	r3, #1
{
   1838c:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1838e:	2800      	cmp	r0, #0
   18390:	d104      	bne.n	1839c <ram_2_memory+0x14>
   18392:	4b03      	ldr	r3, [pc, #12]	; (183a0 <ram_2_memory+0x18>)
   18394:	0011      	movs	r1, r2
   18396:	0020      	movs	r0, r4
   18398:	4798      	blx	r3
   1839a:	0003      	movs	r3, r0
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   1839c:	0018      	movs	r0, r3
   1839e:	bd10      	pop	{r4, pc}
   183a0:	0001c8dd 	.word	0x0001c8dd

000183a4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   183a4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   183a6:	2a00      	cmp	r2, #0
   183a8:	d001      	beq.n	183ae <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
   183aa:	0018      	movs	r0, r3
   183ac:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
   183ae:	4a06      	ldr	r2, [pc, #24]	; (183c8 <extint_register_callback+0x24>)
   183b0:	0089      	lsls	r1, r1, #2
   183b2:	588b      	ldr	r3, [r1, r2]
   183b4:	2b00      	cmp	r3, #0
   183b6:	d003      	beq.n	183c0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
   183b8:	4283      	cmp	r3, r0
   183ba:	d003      	beq.n	183c4 <extint_register_callback+0x20>
	return STATUS_ERR_ALREADY_INITIALIZED;
   183bc:	231d      	movs	r3, #29
   183be:	e7f4      	b.n	183aa <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
   183c0:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
   183c2:	e7f2      	b.n	183aa <extint_register_callback+0x6>
		return STATUS_OK;
   183c4:	2300      	movs	r3, #0
   183c6:	e7f0      	b.n	183aa <extint_register_callback+0x6>
   183c8:	200012ac 	.word	0x200012ac

000183cc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   183cc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   183ce:	2900      	cmp	r1, #0
   183d0:	d001      	beq.n	183d6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
   183d2:	0018      	movs	r0, r3
   183d4:	4770      	bx	lr
	if (eic_index < EIC_INST_NUM) {
   183d6:	281f      	cmp	r0, #31
   183d8:	d805      	bhi.n	183e6 <extint_chan_enable_callback+0x1a>
		eic->INTENSET.reg = (1UL << channel);
   183da:	3b16      	subs	r3, #22
   183dc:	4083      	lsls	r3, r0
   183de:	4a03      	ldr	r2, [pc, #12]	; (183ec <extint_chan_enable_callback+0x20>)
   183e0:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
   183e2:	2300      	movs	r3, #0
   183e4:	e7f5      	b.n	183d2 <extint_chan_enable_callback+0x6>
		eic->INTENSET.reg = (1UL << channel);
   183e6:	6109      	str	r1, [r1, #16]
   183e8:	deff      	udf	#255	; 0xff
   183ea:	46c0      	nop			; (mov r8, r8)
   183ec:	40002400 	.word	0x40002400

000183f0 <extint_get_current_channel>:
 *
 * \return Channel number.
 */
uint8_t extint_get_current_channel(void)
{
	return _current_channel;
   183f0:	4b01      	ldr	r3, [pc, #4]	; (183f8 <extint_get_current_channel+0x8>)
   183f2:	7818      	ldrb	r0, [r3, #0]
}
   183f4:	4770      	bx	lr
   183f6:	46c0      	nop			; (mov r8, r8)
   183f8:	200012a9 	.word	0x200012a9

000183fc <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   183fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   183fe:	2300      	movs	r3, #0
	uint32_t eic_mask   = (1UL << (channel % 32));
   18400:	2601      	movs	r6, #1
   18402:	4c0b      	ldr	r4, [pc, #44]	; (18430 <EIC_Handler+0x34>)
	return (eic_module->INTFLAG.reg & eic_mask);
   18404:	4d0b      	ldr	r5, [pc, #44]	; (18434 <EIC_Handler+0x38>)
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   18406:	4f0c      	ldr	r7, [pc, #48]	; (18438 <EIC_Handler+0x3c>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   18408:	7023      	strb	r3, [r4, #0]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1840a:	0032      	movs	r2, r6
   1840c:	409a      	lsls	r2, r3
	return (eic_module->INTFLAG.reg & eic_mask);
   1840e:	6969      	ldr	r1, [r5, #20]
		if (extint_chan_is_detected(_current_channel)) {
   18410:	4211      	tst	r1, r2
   18412:	d006      	beq.n	18422 <EIC_Handler+0x26>
	eic_module->INTFLAG.reg = eic_mask;
   18414:	616a      	str	r2, [r5, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   18416:	009b      	lsls	r3, r3, #2
   18418:	59db      	ldr	r3, [r3, r7]
   1841a:	2b00      	cmp	r3, #0
   1841c:	d000      	beq.n	18420 <EIC_Handler+0x24>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   1841e:	4798      	blx	r3
   18420:	7823      	ldrb	r3, [r4, #0]
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   18422:	3301      	adds	r3, #1
   18424:	b2db      	uxtb	r3, r3
   18426:	7023      	strb	r3, [r4, #0]
   18428:	2b0f      	cmp	r3, #15
   1842a:	d9ee      	bls.n	1840a <EIC_Handler+0xe>
			}
		}
	}
}
   1842c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1842e:	46c0      	nop			; (mov r8, r8)
   18430:	200012a9 	.word	0x200012a9
   18434:	40002400 	.word	0x40002400
   18438:	200012ac 	.word	0x200012ac

0001843c <_system_extint_init>:
			MCLK->APBAMASK.reg |= mask;
   1843c:	2380      	movs	r3, #128	; 0x80
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1843e:	b510      	push	{r4, lr}
   18440:	4a15      	ldr	r2, [pc, #84]	; (18498 <_system_extint_init+0x5c>)
   18442:	009b      	lsls	r3, r3, #2
   18444:	6951      	ldr	r1, [r2, #20]
	system_gclk_chan_enable(EIC_GCLK_ID);
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
   18446:	4c15      	ldr	r4, [pc, #84]	; (1849c <_system_extint_init+0x60>)
   18448:	430b      	orrs	r3, r1
   1844a:	6153      	str	r3, [r2, #20]
   1844c:	2201      	movs	r2, #1
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
   1844e:	2101      	movs	r1, #1
   18450:	7823      	ldrb	r3, [r4, #0]
   18452:	4313      	orrs	r3, r2
   18454:	7023      	strb	r3, [r4, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
   18456:	3201      	adds	r2, #1
   18458:	6863      	ldr	r3, [r4, #4]
   1845a:	421a      	tst	r2, r3
   1845c:	d1fc      	bne.n	18458 <_system_extint_init+0x1c>
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
   1845e:	6863      	ldr	r3, [r4, #4]
   18460:	4219      	tst	r1, r3
   18462:	d1f9      	bne.n	18458 <_system_extint_init+0x1c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
	}
#else
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
   18464:	2210      	movs	r2, #16
   18466:	7823      	ldrb	r3, [r4, #0]
   18468:	2100      	movs	r1, #0
   1846a:	4313      	orrs	r3, r2
   1846c:	7023      	strb	r3, [r4, #0]
   1846e:	2240      	movs	r2, #64	; 0x40
   18470:	4b0b      	ldr	r3, [pc, #44]	; (184a0 <_system_extint_init+0x64>)
   18472:	480c      	ldr	r0, [pc, #48]	; (184a4 <_system_extint_init+0x68>)
   18474:	4798      	blx	r3
   18476:	2208      	movs	r2, #8
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
   18478:	2102      	movs	r1, #2
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
   1847a:	2001      	movs	r0, #1
   1847c:	4b0a      	ldr	r3, [pc, #40]	; (184a8 <_system_extint_init+0x6c>)
   1847e:	601a      	str	r2, [r3, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
   18480:	7823      	ldrb	r3, [r4, #0]
   18482:	3a06      	subs	r2, #6
   18484:	4313      	orrs	r3, r2
   18486:	7023      	strb	r3, [r4, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
   18488:	4b04      	ldr	r3, [pc, #16]	; (1849c <_system_extint_init+0x60>)
   1848a:	685a      	ldr	r2, [r3, #4]
   1848c:	4211      	tst	r1, r2
   1848e:	d1fc      	bne.n	1848a <_system_extint_init+0x4e>
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
   18490:	685a      	ldr	r2, [r3, #4]
   18492:	4210      	tst	r0, r2
   18494:	d1f9      	bne.n	1848a <_system_extint_init+0x4e>
}
   18496:	bd10      	pop	{r4, pc}
   18498:	40000400 	.word	0x40000400
   1849c:	40002400 	.word	0x40002400
   184a0:	00028a1d 	.word	0x00028a1d
   184a4:	200012ac 	.word	0x200012ac
   184a8:	e000e100 	.word	0xe000e100

000184ac <extint_chan_get_config_defaults>:
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   184ac:	2201      	movs	r2, #1
	config->gpio_pin            = 0;
   184ae:	2300      	movs	r3, #0
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   184b0:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   184b2:	3201      	adds	r2, #1
	config->gpio_pin            = 0;
   184b4:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
   184b6:	6043      	str	r3, [r0, #4]
	config->filter_input_signal = false;
   184b8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   184ba:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
   184bc:	7243      	strb	r3, [r0, #9]
}
   184be:	4770      	bx	lr

000184c0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   184c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   184c2:	000c      	movs	r4, r1
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
   184c4:	2102      	movs	r1, #2
{
   184c6:	0005      	movs	r5, r0
   184c8:	2001      	movs	r0, #1
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
   184ca:	4a25      	ldr	r2, [pc, #148]	; (18560 <extint_chan_set_config+0xa0>)
{
   184cc:	b083      	sub	sp, #12
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
   184ce:	7813      	ldrb	r3, [r2, #0]
   184d0:	438b      	bics	r3, r1
   184d2:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
   184d4:	6853      	ldr	r3, [r2, #4]
   184d6:	4219      	tst	r1, r3
   184d8:	d1fc      	bne.n	184d4 <extint_chan_set_config+0x14>
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
   184da:	6853      	ldr	r3, [r2, #4]
   184dc:	4003      	ands	r3, r0
   184de:	d1f9      	bne.n	184d4 <extint_chan_set_config+0x14>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   184e0:	a901      	add	r1, sp, #4
   184e2:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   184e4:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
   184e6:	7923      	ldrb	r3, [r4, #4]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   184e8:	7820      	ldrb	r0, [r4, #0]
	pinmux_config.mux_position = config->gpio_pin_mux;
   184ea:	700b      	strb	r3, [r1, #0]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   184ec:	7a23      	ldrb	r3, [r4, #8]
   184ee:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   184f0:	4b1c      	ldr	r3, [pc, #112]	; (18564 <extint_chan_set_config+0xa4>)
   184f2:	4798      	blx	r3
		return NULL;
   184f4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
   184f6:	2d1f      	cmp	r5, #31
   184f8:	d800      	bhi.n	184fc <extint_chan_set_config+0x3c>
		return eics[eic_index];
   184fa:	4919      	ldr	r1, [pc, #100]	; (18560 <extint_chan_set_config+0xa0>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
   184fc:	2207      	movs	r2, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   184fe:	7aa3      	ldrb	r3, [r4, #10]
	uint32_t config_pos = (4 * (channel % 8));
   18500:	402a      	ands	r2, r5
   18502:	0092      	lsls	r2, r2, #2
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   18504:	7ae7      	ldrb	r7, [r4, #11]
	if (config->filter_input_signal) {
   18506:	2b00      	cmp	r3, #0
   18508:	d001      	beq.n	1850e <extint_chan_set_config+0x4e>
   1850a:	2308      	movs	r3, #8
   1850c:	431f      	orrs	r7, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1850e:	260f      	movs	r6, #15
			(new_config << config_pos);
   18510:	4097      	lsls	r7, r2
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   18512:	4096      	lsls	r6, r2
			(new_config << config_pos);
   18514:	003a      	movs	r2, r7
   18516:	08eb      	lsrs	r3, r5, #3
   18518:	009b      	lsls	r3, r3, #2
   1851a:	18cb      	adds	r3, r1, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1851c:	69d8      	ldr	r0, [r3, #28]
   1851e:	43b0      	bics	r0, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   18520:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
   18522:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
   18524:	7a63      	ldrb	r3, [r4, #9]
		EIC_module->ASYNCH.reg |= (1UL << channel);
   18526:	698a      	ldr	r2, [r1, #24]
	if (config->enable_async_edge_detection) {
   18528:	2b00      	cmp	r3, #0
   1852a:	d114      	bne.n	18556 <extint_chan_set_config+0x96>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
   1852c:	2301      	movs	r3, #1
   1852e:	40ab      	lsls	r3, r5
   18530:	43db      	mvns	r3, r3
   18532:	041b      	lsls	r3, r3, #16
   18534:	0c1b      	lsrs	r3, r3, #16
   18536:	4013      	ands	r3, r2
   18538:	618b      	str	r3, [r1, #24]
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
   1853a:	2102      	movs	r1, #2
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
   1853c:	2001      	movs	r0, #1
   1853e:	4b08      	ldr	r3, [pc, #32]	; (18560 <extint_chan_set_config+0xa0>)
   18540:	781a      	ldrb	r2, [r3, #0]
   18542:	430a      	orrs	r2, r1
   18544:	701a      	strb	r2, [r3, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
   18546:	685a      	ldr	r2, [r3, #4]
   18548:	4211      	tst	r1, r2
   1854a:	d1fc      	bne.n	18546 <extint_chan_set_config+0x86>
		|| (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
   1854c:	685a      	ldr	r2, [r3, #4]
   1854e:	4210      	tst	r0, r2
   18550:	d1f9      	bne.n	18546 <extint_chan_set_config+0x86>
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
}
   18552:	b003      	add	sp, #12
   18554:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
   18556:	2301      	movs	r3, #1
   18558:	40ab      	lsls	r3, r5
   1855a:	4313      	orrs	r3, r2
   1855c:	618b      	str	r3, [r1, #24]
   1855e:	e7ec      	b.n	1853a <extint_chan_set_config+0x7a>
   18560:	40002400 	.word	0x40002400
   18564:	0001fd11 	.word	0x0001fd11

00018568 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   18568:	b5f0      	push	{r4, r5, r6, r7, lr}
   1856a:	4645      	mov	r5, r8
   1856c:	4688      	mov	r8, r1
   1856e:	464e      	mov	r6, r9
   18570:	46de      	mov	lr, fp
   18572:	4657      	mov	r7, sl
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   18574:	4643      	mov	r3, r8
{
   18576:	b5e0      	push	{r5, r6, r7, lr}
	uint16_t tmp_data_length = packet->data_length;
   18578:	885b      	ldrh	r3, [r3, #2]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1857a:	2207      	movs	r2, #7
   1857c:	4699      	mov	r9, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1857e:	6801      	ldr	r1, [r0, #0]
   18580:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   18582:	421a      	tst	r2, r3
   18584:	d1fc      	bne.n	18580 <_i2c_master_write_packet+0x18>

	_i2c_master_wait_for_sync(module);

	/* Switch to high speed mode */
	if (packet->high_speed) {
   18586:	4643      	mov	r3, r8
   18588:	7a5b      	ldrb	r3, [r3, #9]
   1858a:	2b00      	cmp	r3, #0
   1858c:	d000      	beq.n	18590 <_i2c_master_write_packet+0x28>
   1858e:	e08d      	b.n	186ac <_i2c_master_write_packet+0x144>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   18590:	684b      	ldr	r3, [r1, #4]
   18592:	4a55      	ldr	r2, [pc, #340]	; (186e8 <_i2c_master_write_packet+0x180>)
   18594:	4013      	ands	r3, r2
   18596:	604b      	str	r3, [r1, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
   18598:	4643      	mov	r3, r8
   1859a:	7a1b      	ldrb	r3, [r3, #8]
   1859c:	2b00      	cmp	r3, #0
   1859e:	d058      	beq.n	18652 <_i2c_master_write_packet+0xea>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   185a0:	4643      	mov	r3, r8
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   185a2:	4642      	mov	r2, r8
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   185a4:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   185a6:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   185a8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   185aa:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   185ac:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   185ae:	2280      	movs	r2, #128	; 0x80
   185b0:	0212      	lsls	r2, r2, #8
   185b2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   185b4:	624b      	str	r3, [r1, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   185b6:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
   185b8:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   185ba:	2501      	movs	r5, #1
   185bc:	2602      	movs	r6, #2
   185be:	e008      	b.n	185d2 <_i2c_master_write_packet+0x6a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   185c0:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   185c2:	4226      	tst	r6, r4
   185c4:	d108      	bne.n	185d8 <_i2c_master_write_packet+0x70>
		if (++timeout_counter >= module->buffer_timeout) {
   185c6:	3301      	adds	r3, #1
   185c8:	8904      	ldrh	r4, [r0, #8]
   185ca:	b29b      	uxth	r3, r3
   185cc:	429c      	cmp	r4, r3
   185ce:	d800      	bhi.n	185d2 <_i2c_master_write_packet+0x6a>
   185d0:	e06a      	b.n	186a8 <_i2c_master_write_packet+0x140>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   185d2:	7e14      	ldrb	r4, [r2, #24]
   185d4:	4225      	tst	r5, r4
   185d6:	d0f3      	beq.n	185c0 <_i2c_master_write_packet+0x58>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   185d8:	2302      	movs	r3, #2
   185da:	7e14      	ldrb	r4, [r2, #24]
   185dc:	4223      	tst	r3, r4
   185de:	d041      	beq.n	18664 <_i2c_master_write_packet+0xfc>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   185e0:	7613      	strb	r3, [r2, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   185e2:	8b52      	ldrh	r2, [r2, #26]
   185e4:	4213      	tst	r3, r2
   185e6:	d147      	bne.n	18678 <_i2c_master_write_packet+0x110>
	uint16_t timeout_counter = 0;
   185e8:	2300      	movs	r3, #0
   185ea:	469c      	mov	ip, r3
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   185ec:	3320      	adds	r3, #32
   185ee:	469a      	mov	sl, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];
   185f0:	3308      	adds	r3, #8
   185f2:	469b      	mov	fp, r3
			if (tmp_status != STATUS_OK) {
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   185f4:	4663      	mov	r3, ip
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   185f6:	2707      	movs	r7, #7
   185f8:	468c      	mov	ip, r1
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   185fa:	2501      	movs	r5, #1
   185fc:	2602      	movs	r6, #2
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   185fe:	0019      	movs	r1, r3
		while (tmp_data_length--) {
   18600:	4549      	cmp	r1, r9
   18602:	d100      	bne.n	18606 <_i2c_master_write_packet+0x9e>
   18604:	e06d      	b.n	186e2 <_i2c_master_write_packet+0x17a>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   18606:	4663      	mov	r3, ip
   18608:	4652      	mov	r2, sl
   1860a:	8b5b      	ldrh	r3, [r3, #26]
   1860c:	421a      	tst	r2, r3
   1860e:	d033      	beq.n	18678 <_i2c_master_write_packet+0x110>
   18610:	6802      	ldr	r2, [r0, #0]
   18612:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
   18614:	421f      	tst	r7, r3
   18616:	d1fc      	bne.n	18612 <_i2c_master_write_packet+0xaa>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
   18618:	4643      	mov	r3, r8
   1861a:	4662      	mov	r2, ip
   1861c:	465c      	mov	r4, fp
   1861e:	685b      	ldr	r3, [r3, #4]
   18620:	5c5b      	ldrb	r3, [r3, r1]
   18622:	5513      	strb	r3, [r2, r4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18624:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
   18626:	2300      	movs	r3, #0
   18628:	e007      	b.n	1863a <_i2c_master_write_packet+0xd2>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1862a:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1862c:	4226      	tst	r6, r4
   1862e:	d107      	bne.n	18640 <_i2c_master_write_packet+0xd8>
		if (++timeout_counter >= module->buffer_timeout) {
   18630:	3301      	adds	r3, #1
   18632:	8904      	ldrh	r4, [r0, #8]
   18634:	b29b      	uxth	r3, r3
   18636:	429c      	cmp	r4, r3
   18638:	d926      	bls.n	18688 <_i2c_master_write_packet+0x120>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1863a:	7e14      	ldrb	r4, [r2, #24]
   1863c:	4225      	tst	r5, r4
   1863e:	d0f4      	beq.n	1862a <_i2c_master_write_packet+0xc2>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18640:	4663      	mov	r3, ip
   18642:	2204      	movs	r2, #4
   18644:	8b5b      	ldrh	r3, [r3, #26]
   18646:	3101      	adds	r1, #1
   18648:	421a      	tst	r2, r3
   1864a:	d0d9      	beq.n	18600 <_i2c_master_write_packet+0x98>
   1864c:	4661      	mov	r1, ip
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
   1864e:	221e      	movs	r2, #30
   18650:	e01c      	b.n	1868c <_i2c_master_write_packet+0x124>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   18652:	4643      	mov	r3, r8
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   18654:	4642      	mov	r2, r8
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   18656:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   18658:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1865a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   1865c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1865e:	4313      	orrs	r3, r2
   18660:	624b      	str	r3, [r1, #36]	; 0x24
   18662:	e7a8      	b.n	185b6 <_i2c_master_write_packet+0x4e>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18664:	8b53      	ldrh	r3, [r2, #26]
   18666:	075b      	lsls	r3, r3, #29
   18668:	d5be      	bpl.n	185e8 <_i2c_master_write_packet+0x80>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1866a:	23c0      	movs	r3, #192	; 0xc0
   1866c:	6851      	ldr	r1, [r2, #4]
   1866e:	029b      	lsls	r3, r3, #10
   18670:	430b      	orrs	r3, r1
   18672:	6053      	str	r3, [r2, #4]
		return STATUS_ERR_BAD_ADDRESS;
   18674:	2218      	movs	r2, #24
   18676:	e000      	b.n	1867a <_i2c_master_write_packet+0x112>
			return STATUS_ERR_PACKET_COLLISION;
   18678:	2241      	movs	r2, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
   1867a:	0010      	movs	r0, r2
   1867c:	bc3c      	pop	{r2, r3, r4, r5}
   1867e:	4690      	mov	r8, r2
   18680:	4699      	mov	r9, r3
   18682:	46a2      	mov	sl, r4
   18684:	46ab      	mov	fp, r5
   18686:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18688:	4661      	mov	r1, ip
			return STATUS_ERR_TIMEOUT;
   1868a:	2212      	movs	r2, #18
		if (module->send_stop) {
   1868c:	7a83      	ldrb	r3, [r0, #10]
   1868e:	2b00      	cmp	r3, #0
   18690:	d0f3      	beq.n	1867a <_i2c_master_write_packet+0x112>
   18692:	6804      	ldr	r4, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   18694:	2007      	movs	r0, #7
   18696:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
   18698:	4218      	tst	r0, r3
   1869a:	d1fc      	bne.n	18696 <_i2c_master_write_packet+0x12e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1869c:	23c0      	movs	r3, #192	; 0xc0
   1869e:	6848      	ldr	r0, [r1, #4]
   186a0:	029b      	lsls	r3, r3, #10
   186a2:	4303      	orrs	r3, r0
   186a4:	604b      	str	r3, [r1, #4]
   186a6:	e7e8      	b.n	1867a <_i2c_master_write_packet+0x112>
			return STATUS_ERR_TIMEOUT;
   186a8:	2212      	movs	r2, #18
   186aa:	e7e6      	b.n	1867a <_i2c_master_write_packet+0x112>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   186ac:	4643      	mov	r3, r8
   186ae:	7a9a      	ldrb	r2, [r3, #10]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   186b0:	2380      	movs	r3, #128	; 0x80
   186b2:	684c      	ldr	r4, [r1, #4]
   186b4:	02db      	lsls	r3, r3, #11
   186b6:	4323      	orrs	r3, r4
   186b8:	604b      	str	r3, [r1, #4]
	i2c_module->ADDR.reg = hs_master_code;
   186ba:	624a      	str	r2, [r1, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   186bc:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
   186be:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   186c0:	2501      	movs	r5, #1
   186c2:	2602      	movs	r6, #2
   186c4:	e007      	b.n	186d6 <_i2c_master_write_packet+0x16e>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   186c6:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   186c8:	4226      	tst	r6, r4
   186ca:	d107      	bne.n	186dc <_i2c_master_write_packet+0x174>
		if (++timeout_counter >= module->buffer_timeout) {
   186cc:	3301      	adds	r3, #1
   186ce:	8904      	ldrh	r4, [r0, #8]
   186d0:	b29b      	uxth	r3, r3
   186d2:	429c      	cmp	r4, r3
   186d4:	d902      	bls.n	186dc <_i2c_master_write_packet+0x174>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   186d6:	7e14      	ldrb	r4, [r2, #24]
   186d8:	4225      	tst	r5, r4
   186da:	d0f4      	beq.n	186c6 <_i2c_master_write_packet+0x15e>
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   186dc:	2301      	movs	r3, #1
   186de:	760b      	strb	r3, [r1, #24]
   186e0:	e756      	b.n	18590 <_i2c_master_write_packet+0x28>
   186e2:	4661      	mov	r1, ip
   186e4:	2200      	movs	r2, #0
   186e6:	e7d1      	b.n	1868c <_i2c_master_write_packet+0x124>
   186e8:	fffbffff 	.word	0xfffbffff

000186ec <_i2c_master_read_packet>:
{
   186ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   186ee:	464e      	mov	r6, r9
   186f0:	46de      	mov	lr, fp
   186f2:	4657      	mov	r7, sl
   186f4:	4645      	mov	r5, r8
   186f6:	b5e0      	push	{r5, r6, r7, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   186f8:	6803      	ldr	r3, [r0, #0]
{
   186fa:	4689      	mov	r9, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   186fc:	469c      	mov	ip, r3
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   186fe:	4663      	mov	r3, ip
   18700:	681b      	ldr	r3, [r3, #0]
{
   18702:	b083      	sub	sp, #12
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   18704:	011b      	lsls	r3, r3, #4
   18706:	0fdb      	lsrs	r3, r3, #31
	uint16_t tmp_data_length = packet->data_length;
   18708:	8849      	ldrh	r1, [r1, #2]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1870a:	9301      	str	r3, [sp, #4]
	if (packet->high_speed) {
   1870c:	464b      	mov	r3, r9
   1870e:	7a5b      	ldrb	r3, [r3, #9]
   18710:	2b00      	cmp	r3, #0
   18712:	d000      	beq.n	18716 <_i2c_master_read_packet+0x2a>
   18714:	e0fc      	b.n	18910 <_i2c_master_read_packet+0x224>
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   18716:	4663      	mov	r3, ip
   18718:	4a9b      	ldr	r2, [pc, #620]	; (18988 <_i2c_master_read_packet+0x29c>)
   1871a:	685b      	ldr	r3, [r3, #4]
   1871c:	4013      	ands	r3, r2
   1871e:	4662      	mov	r2, ip
   18720:	6053      	str	r3, [r2, #4]
	if (packet->ten_bit_address) {
   18722:	464b      	mov	r3, r9
   18724:	7a1b      	ldrb	r3, [r3, #8]
   18726:	2b00      	cmp	r3, #0
   18728:	d03c      	beq.n	187a4 <_i2c_master_read_packet+0xb8>
		i2c_module->ADDR.reg = (packet->address << 1) |
   1872a:	464b      	mov	r3, r9
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1872c:	464a      	mov	r2, r9
		i2c_module->ADDR.reg = (packet->address << 1) |
   1872e:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   18730:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) |
   18732:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   18734:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   18736:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   18738:	2280      	movs	r2, #128	; 0x80
   1873a:	0212      	lsls	r2, r2, #8
   1873c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
   1873e:	4662      	mov	r2, ip
   18740:	6253      	str	r3, [r2, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18742:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
   18744:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18746:	2501      	movs	r5, #1
   18748:	2602      	movs	r6, #2
   1874a:	e008      	b.n	1875e <_i2c_master_read_packet+0x72>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1874c:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1874e:	4226      	tst	r6, r4
   18750:	d108      	bne.n	18764 <_i2c_master_read_packet+0x78>
		if (++timeout_counter >= module->buffer_timeout) {
   18752:	3301      	adds	r3, #1
   18754:	8904      	ldrh	r4, [r0, #8]
   18756:	b29b      	uxth	r3, r3
   18758:	429c      	cmp	r4, r3
   1875a:	d800      	bhi.n	1875e <_i2c_master_read_packet+0x72>
   1875c:	e10a      	b.n	18974 <_i2c_master_read_packet+0x288>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1875e:	7e14      	ldrb	r4, [r2, #24]
   18760:	4225      	tst	r5, r4
   18762:	d0f3      	beq.n	1874c <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   18764:	4663      	mov	r3, ip
   18766:	4a88      	ldr	r2, [pc, #544]	; (18988 <_i2c_master_read_packet+0x29c>)
   18768:	685b      	ldr	r3, [r3, #4]
   1876a:	4013      	ands	r3, r2
   1876c:	4662      	mov	r2, ip
   1876e:	6053      	str	r3, [r2, #4]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   18770:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18772:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   18774:	7e1c      	ldrb	r4, [r3, #24]
   18776:	4222      	tst	r2, r4
   18778:	d100      	bne.n	1877c <_i2c_master_read_packet+0x90>
   1877a:	e0ef      	b.n	1895c <_i2c_master_read_packet+0x270>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   1877c:	761a      	strb	r2, [r3, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1877e:	8b5b      	ldrh	r3, [r3, #26]
   18780:	421a      	tst	r2, r3
   18782:	d000      	beq.n	18786 <_i2c_master_read_packet+0x9a>
   18784:	e0ad      	b.n	188e2 <_i2c_master_read_packet+0x1f6>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   18786:	464b      	mov	r3, r9
   18788:	2278      	movs	r2, #120	; 0x78
   1878a:	881b      	ldrh	r3, [r3, #0]
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1878c:	2401      	movs	r4, #1
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   1878e:	0a1b      	lsrs	r3, r3, #8
   18790:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   18792:	464a      	mov	r2, r9
   18794:	7a52      	ldrb	r2, [r2, #9]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   18796:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   18798:	0392      	lsls	r2, r2, #14
   1879a:	4322      	orrs	r2, r4
   1879c:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   1879e:	4662      	mov	r2, ip
   187a0:	6253      	str	r3, [r2, #36]	; 0x24
   187a2:	e00a      	b.n	187ba <_i2c_master_read_packet+0xce>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   187a4:	464b      	mov	r3, r9
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   187a6:	464a      	mov	r2, r9
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   187a8:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   187aa:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   187ac:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   187ae:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   187b0:	4313      	orrs	r3, r2
   187b2:	2201      	movs	r2, #1
   187b4:	4313      	orrs	r3, r2
   187b6:	4662      	mov	r2, ip
   187b8:	6253      	str	r3, [r2, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   187ba:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
   187bc:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   187be:	2501      	movs	r5, #1
   187c0:	2602      	movs	r6, #2
   187c2:	e008      	b.n	187d6 <_i2c_master_read_packet+0xea>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   187c4:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   187c6:	4226      	tst	r6, r4
   187c8:	d108      	bne.n	187dc <_i2c_master_read_packet+0xf0>
		if (++timeout_counter >= module->buffer_timeout) {
   187ca:	3301      	adds	r3, #1
   187cc:	8904      	ldrh	r4, [r0, #8]
   187ce:	b29b      	uxth	r3, r3
   187d0:	429c      	cmp	r4, r3
   187d2:	d800      	bhi.n	187d6 <_i2c_master_read_packet+0xea>
   187d4:	e0ba      	b.n	1894c <_i2c_master_read_packet+0x260>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   187d6:	7e14      	ldrb	r4, [r2, #24]
   187d8:	4225      	tst	r5, r4
   187da:	d0f3      	beq.n	187c4 <_i2c_master_read_packet+0xd8>
	return STATUS_OK;
   187dc:	2300      	movs	r3, #0
   187de:	9300      	str	r3, [sp, #0]
	if ((sclsm_flag) && (packet->data_length == 1)) {
   187e0:	9b01      	ldr	r3, [sp, #4]
   187e2:	2b00      	cmp	r3, #0
   187e4:	d000      	beq.n	187e8 <_i2c_master_read_packet+0xfc>
   187e6:	e06f      	b.n	188c8 <_i2c_master_read_packet+0x1dc>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
   187e8:	4663      	mov	r3, ip
   187ea:	4a67      	ldr	r2, [pc, #412]	; (18988 <_i2c_master_read_packet+0x29c>)
   187ec:	685b      	ldr	r3, [r3, #4]
   187ee:	4013      	ands	r3, r2
   187f0:	4662      	mov	r2, ip
   187f2:	6053      	str	r3, [r2, #4]
	if (tmp_status == STATUS_OK) {
   187f4:	9b00      	ldr	r3, [sp, #0]
   187f6:	2b00      	cmp	r3, #0
   187f8:	d15e      	bne.n	188b8 <_i2c_master_read_packet+0x1cc>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   187fa:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   187fc:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   187fe:	7e1c      	ldrb	r4, [r3, #24]
   18800:	4222      	tst	r2, r4
   18802:	d100      	bne.n	18806 <_i2c_master_read_packet+0x11a>
   18804:	e0a5      	b.n	18952 <_i2c_master_read_packet+0x266>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   18806:	761a      	strb	r2, [r3, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   18808:	8b5b      	ldrh	r3, [r3, #26]
   1880a:	421a      	tst	r2, r3
   1880c:	d169      	bne.n	188e2 <_i2c_master_read_packet+0x1f6>
		while (tmp_data_length--) {
   1880e:	4a5f      	ldr	r2, [pc, #380]	; (1898c <_i2c_master_read_packet+0x2a0>)
   18810:	3901      	subs	r1, #1
   18812:	4692      	mov	sl, r2
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   18814:	2220      	movs	r2, #32
   18816:	b289      	uxth	r1, r1
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   18818:	2300      	movs	r3, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   1881a:	4693      	mov	fp, r2
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1881c:	2707      	movs	r7, #7
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1881e:	2501      	movs	r5, #1
   18820:	2602      	movs	r6, #2
		while (tmp_data_length--) {
   18822:	4551      	cmp	r1, sl
   18824:	d02c      	beq.n	18880 <_i2c_master_read_packet+0x194>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   18826:	4662      	mov	r2, ip
   18828:	465c      	mov	r4, fp
   1882a:	8b52      	ldrh	r2, [r2, #26]
   1882c:	4214      	tst	r4, r2
   1882e:	d058      	beq.n	188e2 <_i2c_master_read_packet+0x1f6>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
   18830:	7ac2      	ldrb	r2, [r0, #11]
   18832:	2a00      	cmp	r2, #0
   18834:	d004      	beq.n	18840 <_i2c_master_read_packet+0x154>
   18836:	9a01      	ldr	r2, [sp, #4]
   18838:	2a00      	cmp	r2, #0
   1883a:	d055      	beq.n	188e8 <_i2c_master_read_packet+0x1fc>
					((sclsm_flag) && (tmp_data_length == 1)))) {
   1883c:	2901      	cmp	r1, #1
   1883e:	d055      	beq.n	188ec <_i2c_master_read_packet+0x200>
   18840:	6804      	ldr	r4, [r0, #0]
   18842:	69e2      	ldr	r2, [r4, #28]
	while (i2c_master_is_syncing(module)) {
   18844:	4217      	tst	r7, r2
   18846:	d1fc      	bne.n	18842 <_i2c_master_read_packet+0x156>
				packet->data[counter++] = i2c_module->DATA.reg;
   18848:	1c5a      	adds	r2, r3, #1
   1884a:	b292      	uxth	r2, r2
   1884c:	2428      	movs	r4, #40	; 0x28
   1884e:	4690      	mov	r8, r2
   18850:	4662      	mov	r2, ip
   18852:	5d12      	ldrb	r2, [r2, r4]
   18854:	464c      	mov	r4, r9
   18856:	6864      	ldr	r4, [r4, #4]
   18858:	54e2      	strb	r2, [r4, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1885a:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
   1885c:	2300      	movs	r3, #0
   1885e:	e007      	b.n	18870 <_i2c_master_read_packet+0x184>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   18860:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18862:	4226      	tst	r6, r4
   18864:	d107      	bne.n	18876 <_i2c_master_read_packet+0x18a>
		if (++timeout_counter >= module->buffer_timeout) {
   18866:	3301      	adds	r3, #1
   18868:	8904      	ldrh	r4, [r0, #8]
   1886a:	b29b      	uxth	r3, r3
   1886c:	429c      	cmp	r4, r3
   1886e:	d949      	bls.n	18904 <_i2c_master_read_packet+0x218>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18870:	7e14      	ldrb	r4, [r2, #24]
   18872:	4225      	tst	r5, r4
   18874:	d0f4      	beq.n	18860 <_i2c_master_read_packet+0x174>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   18876:	4643      	mov	r3, r8
   18878:	3901      	subs	r1, #1
   1887a:	b289      	uxth	r1, r1
		while (tmp_data_length--) {
   1887c:	4551      	cmp	r1, sl
   1887e:	d1d2      	bne.n	18826 <_i2c_master_read_packet+0x13a>
   18880:	4698      	mov	r8, r3
		if (module->send_stop) {
   18882:	7a83      	ldrb	r3, [r0, #10]
   18884:	6802      	ldr	r2, [r0, #0]
   18886:	2b00      	cmp	r3, #0
   18888:	d00b      	beq.n	188a2 <_i2c_master_read_packet+0x1b6>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1888a:	2107      	movs	r1, #7
   1888c:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
   1888e:	4219      	tst	r1, r3
   18890:	d1fc      	bne.n	1888c <_i2c_master_read_packet+0x1a0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   18892:	4663      	mov	r3, ip
   18894:	685a      	ldr	r2, [r3, #4]
   18896:	23c0      	movs	r3, #192	; 0xc0
   18898:	029b      	lsls	r3, r3, #10
   1889a:	4313      	orrs	r3, r2
   1889c:	4662      	mov	r2, ip
   1889e:	6053      	str	r3, [r2, #4]
   188a0:	6802      	ldr	r2, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   188a2:	2107      	movs	r1, #7
   188a4:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
   188a6:	4219      	tst	r1, r3
   188a8:	d1fc      	bne.n	188a4 <_i2c_master_read_packet+0x1b8>
		packet->data[counter] = i2c_module->DATA.reg;
   188aa:	2328      	movs	r3, #40	; 0x28
   188ac:	4662      	mov	r2, ip
   188ae:	5cd2      	ldrb	r2, [r2, r3]
   188b0:	464b      	mov	r3, r9
   188b2:	4641      	mov	r1, r8
   188b4:	685b      	ldr	r3, [r3, #4]
   188b6:	545a      	strb	r2, [r3, r1]
}
   188b8:	9800      	ldr	r0, [sp, #0]
   188ba:	b003      	add	sp, #12
   188bc:	bc3c      	pop	{r2, r3, r4, r5}
   188be:	4690      	mov	r8, r2
   188c0:	4699      	mov	r9, r3
   188c2:	46a2      	mov	sl, r4
   188c4:	46ab      	mov	fp, r5
   188c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sclsm_flag) && (packet->data_length == 1)) {
   188c8:	464b      	mov	r3, r9
   188ca:	885b      	ldrh	r3, [r3, #2]
   188cc:	2b01      	cmp	r3, #1
   188ce:	d000      	beq.n	188d2 <_i2c_master_read_packet+0x1e6>
   188d0:	e78a      	b.n	187e8 <_i2c_master_read_packet+0xfc>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   188d2:	4663      	mov	r3, ip
   188d4:	685a      	ldr	r2, [r3, #4]
   188d6:	2380      	movs	r3, #128	; 0x80
   188d8:	02db      	lsls	r3, r3, #11
   188da:	4313      	orrs	r3, r2
   188dc:	4662      	mov	r2, ip
   188de:	6053      	str	r3, [r2, #4]
   188e0:	e788      	b.n	187f4 <_i2c_master_read_packet+0x108>
			return STATUS_ERR_PACKET_COLLISION;
   188e2:	2341      	movs	r3, #65	; 0x41
   188e4:	9300      	str	r3, [sp, #0]
   188e6:	e7e7      	b.n	188b8 <_i2c_master_read_packet+0x1cc>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
   188e8:	2900      	cmp	r1, #0
   188ea:	d1a9      	bne.n	18840 <_i2c_master_read_packet+0x154>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   188ec:	4662      	mov	r2, ip
   188ee:	6854      	ldr	r4, [r2, #4]
   188f0:	2280      	movs	r2, #128	; 0x80
   188f2:	02d2      	lsls	r2, r2, #11
   188f4:	4322      	orrs	r2, r4
   188f6:	4698      	mov	r8, r3
   188f8:	4664      	mov	r4, ip
   188fa:	3901      	subs	r1, #1
   188fc:	6062      	str	r2, [r4, #4]
   188fe:	b289      	uxth	r1, r1
   18900:	4643      	mov	r3, r8
   18902:	e7bb      	b.n	1887c <_i2c_master_read_packet+0x190>
			return STATUS_ERR_TIMEOUT;
   18904:	2312      	movs	r3, #18
   18906:	9300      	str	r3, [sp, #0]
		if (module->send_stop) {
   18908:	7a83      	ldrb	r3, [r0, #10]
   1890a:	2b00      	cmp	r3, #0
   1890c:	d0c9      	beq.n	188a2 <_i2c_master_read_packet+0x1b6>
   1890e:	e7bc      	b.n	1888a <_i2c_master_read_packet+0x19e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   18910:	464b      	mov	r3, r9
   18912:	7a9a      	ldrb	r2, [r3, #10]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   18914:	4663      	mov	r3, ip
   18916:	685c      	ldr	r4, [r3, #4]
   18918:	2380      	movs	r3, #128	; 0x80
   1891a:	02db      	lsls	r3, r3, #11
   1891c:	4323      	orrs	r3, r4
   1891e:	4664      	mov	r4, ip
   18920:	6063      	str	r3, [r4, #4]
	i2c_module->ADDR.reg = hs_master_code;
   18922:	6262      	str	r2, [r4, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18924:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
   18926:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18928:	2501      	movs	r5, #1
   1892a:	2602      	movs	r6, #2
   1892c:	e007      	b.n	1893e <_i2c_master_read_packet+0x252>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1892e:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18930:	4226      	tst	r6, r4
   18932:	d107      	bne.n	18944 <_i2c_master_read_packet+0x258>
		if (++timeout_counter >= module->buffer_timeout) {
   18934:	3301      	adds	r3, #1
   18936:	8904      	ldrh	r4, [r0, #8]
   18938:	b29b      	uxth	r3, r3
   1893a:	429c      	cmp	r4, r3
   1893c:	d902      	bls.n	18944 <_i2c_master_read_packet+0x258>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1893e:	7e14      	ldrb	r4, [r2, #24]
   18940:	4225      	tst	r5, r4
   18942:	d0f4      	beq.n	1892e <_i2c_master_read_packet+0x242>
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   18944:	2301      	movs	r3, #1
   18946:	4662      	mov	r2, ip
   18948:	7613      	strb	r3, [r2, #24]
   1894a:	e6e4      	b.n	18716 <_i2c_master_read_packet+0x2a>
			return STATUS_ERR_TIMEOUT;
   1894c:	2312      	movs	r3, #18
   1894e:	9300      	str	r3, [sp, #0]
   18950:	e746      	b.n	187e0 <_i2c_master_read_packet+0xf4>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18952:	8b5a      	ldrh	r2, [r3, #26]
   18954:	0752      	lsls	r2, r2, #29
   18956:	d400      	bmi.n	1895a <_i2c_master_read_packet+0x26e>
   18958:	e759      	b.n	1880e <_i2c_master_read_packet+0x122>
   1895a:	e003      	b.n	18964 <_i2c_master_read_packet+0x278>
   1895c:	8b5a      	ldrh	r2, [r3, #26]
   1895e:	0752      	lsls	r2, r2, #29
   18960:	d400      	bmi.n	18964 <_i2c_master_read_packet+0x278>
   18962:	e710      	b.n	18786 <_i2c_master_read_packet+0x9a>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   18964:	22c0      	movs	r2, #192	; 0xc0
   18966:	6859      	ldr	r1, [r3, #4]
   18968:	0292      	lsls	r2, r2, #10
   1896a:	430a      	orrs	r2, r1
   1896c:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
   1896e:	2318      	movs	r3, #24
   18970:	9300      	str	r3, [sp, #0]
   18972:	e7a1      	b.n	188b8 <_i2c_master_read_packet+0x1cc>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   18974:	4663      	mov	r3, ip
   18976:	4a04      	ldr	r2, [pc, #16]	; (18988 <_i2c_master_read_packet+0x29c>)
   18978:	685b      	ldr	r3, [r3, #4]
   1897a:	4013      	ands	r3, r2
   1897c:	4662      	mov	r2, ip
   1897e:	6053      	str	r3, [r2, #4]
			return STATUS_ERR_TIMEOUT;
   18980:	2312      	movs	r3, #18
   18982:	9300      	str	r3, [sp, #0]
   18984:	e798      	b.n	188b8 <_i2c_master_read_packet+0x1cc>
   18986:	46c0      	nop			; (mov r8, r8)
   18988:	fffbffff 	.word	0xfffbffff
   1898c:	0000ffff 	.word	0x0000ffff

00018990 <i2c_master_init>:
{
   18990:	b5f0      	push	{r4, r5, r6, r7, lr}
   18992:	46de      	mov	lr, fp
   18994:	4657      	mov	r7, sl
   18996:	4645      	mov	r5, r8
   18998:	464e      	mov	r6, r9
   1899a:	b5e0      	push	{r5, r6, r7, lr}
   1899c:	0005      	movs	r5, r0
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1899e:	4ba3      	ldr	r3, [pc, #652]	; (18c2c <i2c_master_init+0x29c>)
{
   189a0:	b089      	sub	sp, #36	; 0x24
	module->hw = hw;
   189a2:	6029      	str	r1, [r5, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   189a4:	0008      	movs	r0, r1
{
   189a6:	0014      	movs	r4, r2
   189a8:	000f      	movs	r7, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   189aa:	469b      	mov	fp, r3
   189ac:	4798      	blx	r3

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
   189ae:	4aa0      	ldr	r2, [pc, #640]	; (18c30 <i2c_master_init+0x2a0>)
	if (sercom_index == 5) {
   189b0:	2805      	cmp	r0, #5
   189b2:	d100      	bne.n	189b6 <i2c_master_init+0x26>
   189b4:	e0dc      	b.n	18b70 <i2c_master_init+0x1e0>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   189b6:	2301      	movs	r3, #1
   189b8:	4083      	lsls	r3, r0
			MCLK->APBCMASK.reg |= mask;
   189ba:	69d1      	ldr	r1, [r2, #28]
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   189bc:	3012      	adds	r0, #18
   189be:	430b      	orrs	r3, r1
   189c0:	61d3      	str	r3, [r2, #28]
   189c2:	b2c6      	uxtb	r6, r0
	gclk_chan_conf.source_generator = config->generator_source;
   189c4:	7b23      	ldrb	r3, [r4, #12]
   189c6:	aa06      	add	r2, sp, #24
   189c8:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   189ca:	0011      	movs	r1, r2
   189cc:	0030      	movs	r0, r6
   189ce:	4b99      	ldr	r3, [pc, #612]	; (18c34 <i2c_master_init+0x2a4>)
   189d0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   189d2:	0030      	movs	r0, r6
   189d4:	4b98      	ldr	r3, [pc, #608]	; (18c38 <i2c_master_init+0x2a8>)
   189d6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   189d8:	4b98      	ldr	r3, [pc, #608]	; (18c3c <i2c_master_init+0x2ac>)
   189da:	7b20      	ldrb	r0, [r4, #12]
   189dc:	2100      	movs	r1, #0
   189de:	4798      	blx	r3
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   189e0:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
   189e2:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   189e4:	079b      	lsls	r3, r3, #30
   189e6:	d506      	bpl.n	189f6 <i2c_master_init+0x66>
}
   189e8:	b009      	add	sp, #36	; 0x24
   189ea:	bc3c      	pop	{r2, r3, r4, r5}
   189ec:	4690      	mov	r8, r2
   189ee:	4699      	mov	r9, r3
   189f0:	46a2      	mov	sl, r4
   189f2:	46ab      	mov	fp, r5
   189f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   189f6:	2201      	movs	r2, #1
   189f8:	683b      	ldr	r3, [r7, #0]
   189fa:	4692      	mov	sl, r2
   189fc:	401a      	ands	r2, r3
   189fe:	4690      	mov	r8, r2
		return STATUS_BUSY;
   18a00:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   18a02:	1e13      	subs	r3, r2, #0
   18a04:	d1f0      	bne.n	189e8 <i2c_master_init+0x58>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   18a06:	3314      	adds	r3, #20
   18a08:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18a0a:	682b      	ldr	r3, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   18a0c:	ae07      	add	r6, sp, #28
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   18a0e:	0018      	movs	r0, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18a10:	4699      	mov	r9, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   18a12:	47d8      	blx	fp
   18a14:	2380      	movs	r3, #128	; 0x80
   18a16:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   18a18:	4643      	mov	r3, r8
   18a1a:	7073      	strb	r3, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   18a1c:	4653      	mov	r3, sl
   18a1e:	70b3      	strb	r3, [r6, #2]
	config->powersave    = false;
   18a20:	4643      	mov	r3, r8
   18a22:	9000      	str	r0, [sp, #0]
	uint32_t pad0 = config->pinmux_pad0;
   18a24:	69e0      	ldr	r0, [r4, #28]
   18a26:	70f3      	strb	r3, [r6, #3]
	uint32_t pad1 = config->pinmux_pad1;
   18a28:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
   18a2a:	2800      	cmp	r0, #0
   18a2c:	d100      	bne.n	18a30 <i2c_master_init+0xa0>
   18a2e:	e0b4      	b.n	18b9a <i2c_master_init+0x20a>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18a30:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
   18a32:	7030      	strb	r0, [r6, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18a34:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   18a36:	0c00      	lsrs	r0, r0, #16
   18a38:	4b81      	ldr	r3, [pc, #516]	; (18c40 <i2c_master_init+0x2b0>)
   18a3a:	b2c0      	uxtb	r0, r0
   18a3c:	0031      	movs	r1, r6
   18a3e:	469b      	mov	fp, r3
   18a40:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
   18a42:	2f00      	cmp	r7, #0
   18a44:	d100      	bne.n	18a48 <i2c_master_init+0xb8>
   18a46:	e0ad      	b.n	18ba4 <i2c_master_init+0x214>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18a48:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
   18a4a:	7037      	strb	r7, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   18a4c:	0c3f      	lsrs	r7, r7, #16
   18a4e:	0031      	movs	r1, r6
   18a50:	b2f8      	uxtb	r0, r7
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18a52:	469a      	mov	sl, r3
   18a54:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   18a56:	47d8      	blx	fp
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   18a58:	8aa3      	ldrh	r3, [r4, #20]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   18a5a:	2180      	movs	r1, #128	; 0x80
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   18a5c:	80eb      	strh	r3, [r5, #6]
	module->buffer_timeout = config->buffer_timeout;
   18a5e:	8ae3      	ldrh	r3, [r4, #22]
   18a60:	812b      	strh	r3, [r5, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
   18a62:	7e23      	ldrb	r3, [r4, #24]
   18a64:	2b00      	cmp	r3, #0
   18a66:	d100      	bne.n	18a6a <i2c_master_init+0xda>
   18a68:	e088      	b.n	18b7c <i2c_master_init+0x1ec>
	tmp_ctrla |= config->transfer_speed;
   18a6a:	68a2      	ldr	r2, [r4, #8]
   18a6c:	6923      	ldr	r3, [r4, #16]
   18a6e:	4313      	orrs	r3, r2
   18a70:	430b      	orrs	r3, r1
	if (config->scl_low_timeout) {
   18a72:	2124      	movs	r1, #36	; 0x24
   18a74:	5c61      	ldrb	r1, [r4, r1]
   18a76:	2900      	cmp	r1, #0
   18a78:	d002      	beq.n	18a80 <i2c_master_init+0xf0>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   18a7a:	2180      	movs	r1, #128	; 0x80
   18a7c:	05c9      	lsls	r1, r1, #23
   18a7e:	430b      	orrs	r3, r1
		tmp_ctrla |= config->inactive_timeout;
   18a80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   18a82:	430b      	orrs	r3, r1
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   18a84:	212c      	movs	r1, #44	; 0x2c
   18a86:	5c61      	ldrb	r1, [r4, r1]
   18a88:	2900      	cmp	r1, #0
   18a8a:	d100      	bne.n	18a8e <i2c_master_init+0xfe>
   18a8c:	e07f      	b.n	18b8e <i2c_master_init+0x1fe>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   18a8e:	2280      	movs	r2, #128	; 0x80
   18a90:	0512      	lsls	r2, r2, #20
   18a92:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
   18a94:	222d      	movs	r2, #45	; 0x2d
   18a96:	5ca2      	ldrb	r2, [r4, r2]
   18a98:	2a00      	cmp	r2, #0
   18a9a:	d002      	beq.n	18aa2 <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   18a9c:	2280      	movs	r2, #128	; 0x80
   18a9e:	0412      	lsls	r2, r2, #16
   18aa0:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
   18aa2:	222e      	movs	r2, #46	; 0x2e
   18aa4:	5ca2      	ldrb	r2, [r4, r2]
   18aa6:	2a00      	cmp	r2, #0
   18aa8:	d002      	beq.n	18ab0 <i2c_master_init+0x120>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   18aaa:	2280      	movs	r2, #128	; 0x80
   18aac:	03d2      	lsls	r2, r2, #15
   18aae:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
   18ab0:	464a      	mov	r2, r9
   18ab2:	6812      	ldr	r2, [r2, #0]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   18ab4:	9800      	ldr	r0, [sp, #0]
	i2c_module->CTRLA.reg |= tmp_ctrla;
   18ab6:	4313      	orrs	r3, r2
   18ab8:	464a      	mov	r2, r9
   18aba:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   18abc:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   18abe:	3012      	adds	r0, #18
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   18ac0:	005b      	lsls	r3, r3, #1
	uint32_t fscl        = 1000 * config->baud_rate;
   18ac2:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   18ac4:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   18ac6:	b2c0      	uxtb	r0, r0
   18ac8:	4b5e      	ldr	r3, [pc, #376]	; (18c44 <i2c_master_init+0x2b4>)
   18aca:	4798      	blx	r3
	uint32_t fscl        = 1000 * config->baud_rate;
   18acc:	6823      	ldr	r3, [r4, #0]
   18ace:	00ad      	lsls	r5, r5, #2
   18ad0:	435d      	muls	r5, r3
	tmp_baud = (int32_t)(div_ceil(
   18ad2:	4b5d      	ldr	r3, [pc, #372]	; (18c48 <i2c_master_init+0x2b8>)
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   18ad4:	9005      	str	r0, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
   18ad6:	469b      	mov	fp, r3
   18ad8:	4798      	blx	r3
   18ada:	9000      	str	r0, [sp, #0]
   18adc:	9101      	str	r1, [sp, #4]
   18ade:	0068      	lsls	r0, r5, #1
   18ae0:	47d8      	blx	fp
   18ae2:	9002      	str	r0, [sp, #8]
   18ae4:	9103      	str	r1, [sp, #12]
   18ae6:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   18ae8:	47d8      	blx	fp
   18aea:	4b58      	ldr	r3, [pc, #352]	; (18c4c <i2c_master_init+0x2bc>)
   18aec:	0006      	movs	r6, r0
   18aee:	469a      	mov	sl, r3
   18af0:	000f      	movs	r7, r1
   18af2:	9800      	ldr	r0, [sp, #0]
   18af4:	9901      	ldr	r1, [sp, #4]
   18af6:	4a56      	ldr	r2, [pc, #344]	; (18c50 <i2c_master_init+0x2c0>)
   18af8:	4b56      	ldr	r3, [pc, #344]	; (18c54 <i2c_master_init+0x2c4>)
   18afa:	47d0      	blx	sl
   18afc:	0002      	movs	r2, r0
   18afe:	000b      	movs	r3, r1
   18b00:	0030      	movs	r0, r6
   18b02:	0039      	movs	r1, r7
   18b04:	47d0      	blx	sl
   18b06:	2200      	movs	r2, #0
   18b08:	4b53      	ldr	r3, [pc, #332]	; (18c58 <i2c_master_init+0x2c8>)
   18b0a:	4f54      	ldr	r7, [pc, #336]	; (18c5c <i2c_master_init+0x2cc>)
   18b0c:	47b8      	blx	r7
   18b0e:	0006      	movs	r6, r0
   18b10:	0028      	movs	r0, r5
   18b12:	000f      	movs	r7, r1
   18b14:	47d8      	blx	fp
   18b16:	0002      	movs	r2, r0
   18b18:	000b      	movs	r3, r1
   18b1a:	0030      	movs	r0, r6
   18b1c:	0039      	movs	r1, r7
   18b1e:	47d0      	blx	sl
   18b20:	4d4f      	ldr	r5, [pc, #316]	; (18c60 <i2c_master_init+0x2d0>)
   18b22:	0002      	movs	r2, r0
   18b24:	000b      	movs	r3, r1
   18b26:	9800      	ldr	r0, [sp, #0]
   18b28:	9901      	ldr	r1, [sp, #4]
   18b2a:	47a8      	blx	r5
   18b2c:	9e02      	ldr	r6, [sp, #8]
   18b2e:	9f03      	ldr	r7, [sp, #12]
   18b30:	4d4a      	ldr	r5, [pc, #296]	; (18c5c <i2c_master_init+0x2cc>)
   18b32:	0032      	movs	r2, r6
   18b34:	003b      	movs	r3, r7
   18b36:	47a8      	blx	r5
   18b38:	2200      	movs	r2, #0
   18b3a:	4b4a      	ldr	r3, [pc, #296]	; (18c64 <i2c_master_init+0x2d4>)
   18b3c:	4d48      	ldr	r5, [pc, #288]	; (18c60 <i2c_master_init+0x2d0>)
   18b3e:	47a8      	blx	r5
   18b40:	0032      	movs	r2, r6
   18b42:	003b      	movs	r3, r7
   18b44:	4d48      	ldr	r5, [pc, #288]	; (18c68 <i2c_master_init+0x2d8>)
   18b46:	47a8      	blx	r5
   18b48:	4f48      	ldr	r7, [pc, #288]	; (18c6c <i2c_master_init+0x2dc>)
   18b4a:	47b8      	blx	r7
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   18b4c:	2380      	movs	r3, #128	; 0x80
   18b4e:	68a2      	ldr	r2, [r4, #8]
	tmp_baud = (int32_t)(div_ceil(
   18b50:	0006      	movs	r6, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   18b52:	049b      	lsls	r3, r3, #18
   18b54:	429a      	cmp	r2, r3
   18b56:	d02b      	beq.n	18bb0 <i2c_master_init+0x220>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   18b58:	2040      	movs	r0, #64	; 0x40
   18b5a:	2eff      	cmp	r6, #255	; 0xff
   18b5c:	d900      	bls.n	18b60 <i2c_master_init+0x1d0>
   18b5e:	e743      	b.n	189e8 <i2c_master_init+0x58>
   18b60:	2300      	movs	r3, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   18b62:	4642      	mov	r2, r8
   18b64:	4313      	orrs	r3, r2
   18b66:	431e      	orrs	r6, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18b68:	464b      	mov	r3, r9
	enum status_code tmp_status_code = STATUS_OK;
   18b6a:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18b6c:	60de      	str	r6, [r3, #12]
   18b6e:	e73b      	b.n	189e8 <i2c_master_init+0x58>
			MCLK->APBDMASK.reg |= mask;
   18b70:	2102      	movs	r1, #2
   18b72:	6a13      	ldr	r3, [r2, #32]
   18b74:	2618      	movs	r6, #24
   18b76:	430b      	orrs	r3, r1
   18b78:	6213      	str	r3, [r2, #32]
   18b7a:	e723      	b.n	189c4 <i2c_master_init+0x34>
	if (config->run_in_standby || system_is_debugger_present()) {
   18b7c:	4652      	mov	r2, sl
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   18b7e:	4b3c      	ldr	r3, [pc, #240]	; (18c70 <i2c_master_init+0x2e0>)
   18b80:	789b      	ldrb	r3, [r3, #2]
   18b82:	401a      	ands	r2, r3
   18b84:	0013      	movs	r3, r2
		tmp_ctrla = 0;
   18b86:	1e5a      	subs	r2, r3, #1
   18b88:	4193      	sbcs	r3, r2
   18b8a:	01d9      	lsls	r1, r3, #7
   18b8c:	e76d      	b.n	18a6a <i2c_master_init+0xda>
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   18b8e:	2180      	movs	r1, #128	; 0x80
   18b90:	0489      	lsls	r1, r1, #18
   18b92:	428a      	cmp	r2, r1
   18b94:	d000      	beq.n	18b98 <i2c_master_init+0x208>
   18b96:	e77d      	b.n	18a94 <i2c_master_init+0x104>
   18b98:	e779      	b.n	18a8e <i2c_master_init+0xfe>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   18b9a:	2100      	movs	r1, #0
   18b9c:	4648      	mov	r0, r9
   18b9e:	4b35      	ldr	r3, [pc, #212]	; (18c74 <i2c_master_init+0x2e4>)
   18ba0:	4798      	blx	r3
   18ba2:	e745      	b.n	18a30 <i2c_master_init+0xa0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   18ba4:	2101      	movs	r1, #1
   18ba6:	4648      	mov	r0, r9
   18ba8:	4b32      	ldr	r3, [pc, #200]	; (18c74 <i2c_master_init+0x2e4>)
   18baa:	4798      	blx	r3
   18bac:	0007      	movs	r7, r0
   18bae:	e74b      	b.n	18a48 <i2c_master_init+0xb8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   18bb0:	23fa      	movs	r3, #250	; 0xfa
   18bb2:	6861      	ldr	r1, [r4, #4]
   18bb4:	009b      	lsls	r3, r3, #2
   18bb6:	434b      	muls	r3, r1
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   18bb8:	9800      	ldr	r0, [sp, #0]
   18bba:	9901      	ldr	r1, [sp, #4]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   18bbc:	4698      	mov	r8, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   18bbe:	0002      	movs	r2, r0
   18bc0:	000b      	movs	r3, r1
   18bc2:	4c26      	ldr	r4, [pc, #152]	; (18c5c <i2c_master_init+0x2cc>)
   18bc4:	47a0      	blx	r4
   18bc6:	0004      	movs	r4, r0
   18bc8:	4640      	mov	r0, r8
   18bca:	000d      	movs	r5, r1
   18bcc:	47d8      	blx	fp
   18bce:	2200      	movs	r2, #0
   18bd0:	4b29      	ldr	r3, [pc, #164]	; (18c78 <i2c_master_init+0x2e8>)
   18bd2:	47d0      	blx	sl
   18bd4:	0002      	movs	r2, r0
   18bd6:	000b      	movs	r3, r1
   18bd8:	0020      	movs	r0, r4
   18bda:	0029      	movs	r1, r5
   18bdc:	4c22      	ldr	r4, [pc, #136]	; (18c68 <i2c_master_init+0x2d8>)
   18bde:	47a0      	blx	r4
   18be0:	2200      	movs	r2, #0
   18be2:	4b20      	ldr	r3, [pc, #128]	; (18c64 <i2c_master_init+0x2d4>)
   18be4:	4c1e      	ldr	r4, [pc, #120]	; (18c60 <i2c_master_init+0x2d0>)
   18be6:	47a0      	blx	r4
   18be8:	47b8      	blx	r7
   18bea:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
   18bec:	d013      	beq.n	18c16 <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   18bee:	4b23      	ldr	r3, [pc, #140]	; (18c7c <i2c_master_init+0x2ec>)
   18bf0:	4641      	mov	r1, r8
   18bf2:	9805      	ldr	r0, [sp, #20]
   18bf4:	4798      	blx	r3
   18bf6:	3802      	subs	r0, #2
   18bf8:	1b03      	subs	r3, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   18bfa:	2040      	movs	r0, #64	; 0x40
   18bfc:	2eff      	cmp	r6, #255	; 0xff
   18bfe:	d900      	bls.n	18c02 <i2c_master_init+0x272>
   18c00:	e6f2      	b.n	189e8 <i2c_master_init+0x58>
   18c02:	2bff      	cmp	r3, #255	; 0xff
   18c04:	d900      	bls.n	18c08 <i2c_master_init+0x278>
   18c06:	e6ef      	b.n	189e8 <i2c_master_init+0x58>
   18c08:	22ff      	movs	r2, #255	; 0xff
   18c0a:	041b      	lsls	r3, r3, #16
   18c0c:	0412      	lsls	r2, r2, #16
   18c0e:	4013      	ands	r3, r2
   18c10:	4698      	mov	r8, r3
   18c12:	0623      	lsls	r3, r4, #24
   18c14:	e7a5      	b.n	18b62 <i2c_master_init+0x1d2>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   18c16:	4643      	mov	r3, r8
   18c18:	0059      	lsls	r1, r3, #1
   18c1a:	9b05      	ldr	r3, [sp, #20]
   18c1c:	1e48      	subs	r0, r1, #1
   18c1e:	469c      	mov	ip, r3
   18c20:	4b16      	ldr	r3, [pc, #88]	; (18c7c <i2c_master_init+0x2ec>)
   18c22:	4460      	add	r0, ip
   18c24:	4798      	blx	r3
   18c26:	1e43      	subs	r3, r0, #1
   18c28:	e7e7      	b.n	18bfa <i2c_master_init+0x26a>
   18c2a:	46c0      	nop			; (mov r8, r8)
   18c2c:	0001f435 	.word	0x0001f435
   18c30:	40000400 	.word	0x40000400
   18c34:	0001fc15 	.word	0x0001fc15
   18c38:	0001fc55 	.word	0x0001fc55
   18c3c:	0001f291 	.word	0x0001f291
   18c40:	0001fd11 	.word	0x0001fd11
   18c44:	0001fc8d 	.word	0x0001fc8d
   18c48:	0002871d 	.word	0x0002871d
   18c4c:	00027ac5 	.word	0x00027ac5
   18c50:	e826d695 	.word	0xe826d695
   18c54:	3e112e0b 	.word	0x3e112e0b
   18c58:	40240000 	.word	0x40240000
   18c5c:	00026c3d 	.word	0x00026c3d
   18c60:	00027fc5 	.word	0x00027fc5
   18c64:	3ff00000 	.word	0x3ff00000
   18c68:	0002725d 	.word	0x0002725d
   18c6c:	00028631 	.word	0x00028631
   18c70:	41002000 	.word	0x41002000
   18c74:	0001f2d9 	.word	0x0001f2d9
   18c78:	40080000 	.word	0x40080000
   18c7c:	0002593d 	.word	0x0002593d

00018c80 <i2c_master_read_packet_wait>:
	module->send_stop = true;
   18c80:	2301      	movs	r3, #1
{
   18c82:	b510      	push	{r4, lr}
	module->send_stop = true;
   18c84:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   18c86:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
   18c88:	4b01      	ldr	r3, [pc, #4]	; (18c90 <i2c_master_read_packet_wait+0x10>)
   18c8a:	4798      	blx	r3
}
   18c8c:	bd10      	pop	{r4, pc}
   18c8e:	46c0      	nop			; (mov r8, r8)
   18c90:	000186ed 	.word	0x000186ed

00018c94 <i2c_master_write_packet_wait>:
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
   18c94:	2301      	movs	r3, #1
{
   18c96:	b510      	push	{r4, lr}
	module->send_stop = true;
   18c98:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   18c9a:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
   18c9c:	4b01      	ldr	r3, [pc, #4]	; (18ca4 <i2c_master_write_packet_wait+0x10>)
   18c9e:	4798      	blx	r3
}
   18ca0:	bd10      	pop	{r4, pc}
   18ca2:	46c0      	nop			; (mov r8, r8)
   18ca4:	00018569 	.word	0x00018569

00018ca8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   18ca8:	4770      	bx	lr
   18caa:	46c0      	nop			; (mov r8, r8)

00018cac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   18cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   18cae:	4e0c      	ldr	r6, [pc, #48]	; (18ce0 <_sercom_set_handler+0x34>)
{
   18cb0:	0005      	movs	r5, r0
	if (_handler_table_initialized == false) {
   18cb2:	7833      	ldrb	r3, [r6, #0]
{
   18cb4:	000f      	movs	r7, r1
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   18cb6:	4c0b      	ldr	r4, [pc, #44]	; (18ce4 <_sercom_set_handler+0x38>)
	if (_handler_table_initialized == false) {
   18cb8:	2b00      	cmp	r3, #0
   18cba:	d10d      	bne.n	18cd8 <_sercom_set_handler+0x2c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   18cbc:	4b0a      	ldr	r3, [pc, #40]	; (18ce8 <_sercom_set_handler+0x3c>)
   18cbe:	2218      	movs	r2, #24
   18cc0:	6023      	str	r3, [r4, #0]
   18cc2:	6063      	str	r3, [r4, #4]
   18cc4:	60a3      	str	r3, [r4, #8]
   18cc6:	60e3      	str	r3, [r4, #12]
   18cc8:	6123      	str	r3, [r4, #16]
   18cca:	6163      	str	r3, [r4, #20]
   18ccc:	2100      	movs	r1, #0
   18cce:	4b07      	ldr	r3, [pc, #28]	; (18cec <_sercom_set_handler+0x40>)
   18cd0:	4807      	ldr	r0, [pc, #28]	; (18cf0 <_sercom_set_handler+0x44>)
   18cd2:	4798      	blx	r3
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
   18cd4:	2301      	movs	r3, #1
   18cd6:	7033      	strb	r3, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   18cd8:	00ad      	lsls	r5, r5, #2
   18cda:	5167      	str	r7, [r4, r5]
}
   18cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18cde:	46c0      	nop			; (mov r8, r8)
   18ce0:	20000d04 	.word	0x20000d04
   18ce4:	20000d08 	.word	0x20000d08
   18ce8:	00018ca9 	.word	0x00018ca9
   18cec:	00028a1d 	.word	0x00028a1d
   18cf0:	200012ec 	.word	0x200012ec

00018cf4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   18cf4:	b500      	push	{lr}
   18cf6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   18cf8:	466a      	mov	r2, sp
   18cfa:	2308      	movs	r3, #8
   18cfc:	7013      	strb	r3, [r2, #0]
   18cfe:	3301      	adds	r3, #1
   18d00:	7053      	strb	r3, [r2, #1]
   18d02:	3301      	adds	r3, #1
   18d04:	7093      	strb	r3, [r2, #2]
   18d06:	3301      	adds	r3, #1
   18d08:	70d3      	strb	r3, [r2, #3]
   18d0a:	3301      	adds	r3, #1
   18d0c:	7113      	strb	r3, [r2, #4]
   18d0e:	3301      	adds	r3, #1
   18d10:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   18d12:	4b03      	ldr	r3, [pc, #12]	; (18d20 <_sercom_get_interrupt_vector+0x2c>)
   18d14:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   18d16:	466b      	mov	r3, sp
   18d18:	5618      	ldrsb	r0, [r3, r0]
}
   18d1a:	b003      	add	sp, #12
   18d1c:	bd00      	pop	{pc}
   18d1e:	46c0      	nop			; (mov r8, r8)
   18d20:	0001f435 	.word	0x0001f435

00018d24 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   18d24:	b510      	push	{r4, lr}
   18d26:	4b02      	ldr	r3, [pc, #8]	; (18d30 <SERCOM0_Handler+0xc>)
   18d28:	2000      	movs	r0, #0
   18d2a:	681b      	ldr	r3, [r3, #0]
   18d2c:	4798      	blx	r3
   18d2e:	bd10      	pop	{r4, pc}
   18d30:	20000d08 	.word	0x20000d08

00018d34 <SERCOM1_Handler>:
   18d34:	b510      	push	{r4, lr}
   18d36:	4b02      	ldr	r3, [pc, #8]	; (18d40 <SERCOM1_Handler+0xc>)
   18d38:	2001      	movs	r0, #1
   18d3a:	685b      	ldr	r3, [r3, #4]
   18d3c:	4798      	blx	r3
   18d3e:	bd10      	pop	{r4, pc}
   18d40:	20000d08 	.word	0x20000d08

00018d44 <SERCOM2_Handler>:
   18d44:	b510      	push	{r4, lr}
   18d46:	4b02      	ldr	r3, [pc, #8]	; (18d50 <SERCOM2_Handler+0xc>)
   18d48:	2002      	movs	r0, #2
   18d4a:	689b      	ldr	r3, [r3, #8]
   18d4c:	4798      	blx	r3
   18d4e:	bd10      	pop	{r4, pc}
   18d50:	20000d08 	.word	0x20000d08

00018d54 <SERCOM3_Handler>:
   18d54:	b510      	push	{r4, lr}
   18d56:	4b02      	ldr	r3, [pc, #8]	; (18d60 <SERCOM3_Handler+0xc>)
   18d58:	2003      	movs	r0, #3
   18d5a:	68db      	ldr	r3, [r3, #12]
   18d5c:	4798      	blx	r3
   18d5e:	bd10      	pop	{r4, pc}
   18d60:	20000d08 	.word	0x20000d08

00018d64 <SERCOM4_Handler>:
   18d64:	b510      	push	{r4, lr}
   18d66:	4b02      	ldr	r3, [pc, #8]	; (18d70 <SERCOM4_Handler+0xc>)
   18d68:	2004      	movs	r0, #4
   18d6a:	691b      	ldr	r3, [r3, #16]
   18d6c:	4798      	blx	r3
   18d6e:	bd10      	pop	{r4, pc}
   18d70:	20000d08 	.word	0x20000d08

00018d74 <SERCOM5_Handler>:
   18d74:	b510      	push	{r4, lr}
   18d76:	4b02      	ldr	r3, [pc, #8]	; (18d80 <SERCOM5_Handler+0xc>)
   18d78:	2005      	movs	r0, #5
   18d7a:	695b      	ldr	r3, [r3, #20]
   18d7c:	4798      	blx	r3
   18d7e:	bd10      	pop	{r4, pc}
   18d80:	20000d08 	.word	0x20000d08

00018d84 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   18d84:	1c93      	adds	r3, r2, #2
   18d86:	009b      	lsls	r3, r3, #2
   18d88:	18c3      	adds	r3, r0, r3
   18d8a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   18d8c:	2301      	movs	r3, #1
   18d8e:	4093      	lsls	r3, r2
   18d90:	2130      	movs	r1, #48	; 0x30
   18d92:	001a      	movs	r2, r3
   18d94:	5c43      	ldrb	r3, [r0, r1]
   18d96:	4313      	orrs	r3, r2
   18d98:	5443      	strb	r3, [r0, r1]
}
   18d9a:	4770      	bx	lr

00018d9c <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
   18d9c:	b570      	push	{r4, r5, r6, lr}
   18d9e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   18da0:	4b10      	ldr	r3, [pc, #64]	; (18de4 <usart_read_job+0x48>)
   18da2:	000e      	movs	r6, r1
	SercomUsart *const usart_hw = &(module->hw->USART);
   18da4:	6805      	ldr	r5, [r0, #0]
   18da6:	4798      	blx	r3
	if (module->remaining_rx_buffer_length > 0) {
   18da8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   18daa:	2b00      	cmp	r3, #0
   18dac:	d003      	beq.n	18db6 <usart_read_job+0x1a>
	cpu_irq_leave_critical();
   18dae:	4b0e      	ldr	r3, [pc, #56]	; (18de8 <usart_read_job+0x4c>)
   18db0:	4798      	blx	r3
		return STATUS_BUSY;
   18db2:	2005      	movs	r0, #5
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
}
   18db4:	bd70      	pop	{r4, r5, r6, pc}
	module->remaining_rx_buffer_length = length;
   18db6:	2301      	movs	r3, #1
   18db8:	85a3      	strh	r3, [r4, #44]	; 0x2c
   18dba:	4b0b      	ldr	r3, [pc, #44]	; (18de8 <usart_read_job+0x4c>)
   18dbc:	4798      	blx	r3
	module->rx_status                  = STATUS_BUSY;
   18dbe:	2332      	movs	r3, #50	; 0x32
   18dc0:	2205      	movs	r2, #5
	module->rx_buffer_ptr              = rx_data;
   18dc2:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   18dc4:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   18dc6:	3b2e      	subs	r3, #46	; 0x2e
   18dc8:	75ab      	strb	r3, [r5, #22]
	if(module->lin_slave_enabled) {
   18dca:	7a23      	ldrb	r3, [r4, #8]
   18dcc:	2b00      	cmp	r3, #0
   18dce:	d106      	bne.n	18dde <usart_read_job+0x42>
	if(module->start_frame_detection_enabled) {
   18dd0:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   18dd2:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   18dd4:	2b00      	cmp	r3, #0
   18dd6:	d0ed      	beq.n	18db4 <usart_read_job+0x18>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   18dd8:	2308      	movs	r3, #8
   18dda:	75ab      	strb	r3, [r5, #22]
   18ddc:	e7ea      	b.n	18db4 <usart_read_job+0x18>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   18dde:	2320      	movs	r3, #32
   18de0:	75ab      	strb	r3, [r5, #22]
   18de2:	e7f5      	b.n	18dd0 <usart_read_job+0x34>
   18de4:	0000798d 	.word	0x0000798d
   18de8:	000079c9 	.word	0x000079c9

00018dec <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   18dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18dee:	0005      	movs	r5, r0
   18df0:	000e      	movs	r6, r1
   18df2:	0014      	movs	r4, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   18df4:	2017      	movs	r0, #23
	if (length == 0) {
   18df6:	2a00      	cmp	r2, #0
   18df8:	d100      	bne.n	18dfc <usart_write_buffer_job+0x10>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   18dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
   18dfc:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
   18dfe:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
   18e00:	2b00      	cmp	r3, #0
   18e02:	d0fa      	beq.n	18dfa <usart_write_buffer_job+0xe>
	cpu_irq_enter_critical();
   18e04:	4b0a      	ldr	r3, [pc, #40]	; (18e30 <usart_write_buffer_job+0x44>)
	SercomUsart *const usart_hw = &(module->hw->USART);
   18e06:	682f      	ldr	r7, [r5, #0]
   18e08:	4798      	blx	r3
	if (module->remaining_tx_buffer_length > 0) {
   18e0a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   18e0c:	2b00      	cmp	r3, #0
   18e0e:	d003      	beq.n	18e18 <usart_write_buffer_job+0x2c>
	cpu_irq_leave_critical();
   18e10:	4b08      	ldr	r3, [pc, #32]	; (18e34 <usart_write_buffer_job+0x48>)
   18e12:	4798      	blx	r3
		return STATUS_BUSY;
   18e14:	2005      	movs	r0, #5
   18e16:	e7f0      	b.n	18dfa <usart_write_buffer_job+0xe>
   18e18:	4b06      	ldr	r3, [pc, #24]	; (18e34 <usart_write_buffer_job+0x48>)
	module->remaining_tx_buffer_length = length;
   18e1a:	85ec      	strh	r4, [r5, #46]	; 0x2e
   18e1c:	4798      	blx	r3
	module->tx_status                  = STATUS_BUSY;
   18e1e:	2333      	movs	r3, #51	; 0x33
   18e20:	2205      	movs	r2, #5
	module->tx_buffer_ptr              = tx_data;
   18e22:	62ae      	str	r6, [r5, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   18e24:	54ea      	strb	r2, [r5, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   18e26:	3b32      	subs	r3, #50	; 0x32
   18e28:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   18e2a:	2000      	movs	r0, #0
   18e2c:	e7e5      	b.n	18dfa <usart_write_buffer_job+0xe>
   18e2e:	46c0      	nop			; (mov r8, r8)
   18e30:	0000798d 	.word	0x0000798d
   18e34:	000079c9 	.word	0x000079c9

00018e38 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   18e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   18e3a:	4b62      	ldr	r3, [pc, #392]	; (18fc4 <_usart_interrupt_handler+0x18c>)
   18e3c:	0080      	lsls	r0, r0, #2
   18e3e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   18e40:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   18e42:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   18e44:	2b00      	cmp	r3, #0
   18e46:	d1fc      	bne.n	18e42 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   18e48:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   18e4a:	7da6      	ldrb	r6, [r4, #22]
	callback_status = module->callback_reg_mask &
   18e4c:	2231      	movs	r2, #49	; 0x31
   18e4e:	401e      	ands	r6, r3
   18e50:	2330      	movs	r3, #48	; 0x30
   18e52:	5caf      	ldrb	r7, [r5, r2]
   18e54:	5ceb      	ldrb	r3, [r5, r3]
   18e56:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   18e58:	2301      	movs	r3, #1
   18e5a:	4233      	tst	r3, r6
   18e5c:	d019      	beq.n	18e92 <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
   18e5e:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
   18e60:	2a00      	cmp	r2, #0
   18e62:	d04d      	beq.n	18f00 <_usart_interrupt_handler+0xc8>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   18e64:	6aaa      	ldr	r2, [r5, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   18e66:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   18e68:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
   18e6a:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   18e6c:	7969      	ldrb	r1, [r5, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   18e6e:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   18e70:	2901      	cmp	r1, #1
   18e72:	d100      	bne.n	18e76 <_usart_interrupt_handler+0x3e>
   18e74:	e075      	b.n	18f62 <_usart_interrupt_handler+0x12a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   18e76:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   18e78:	05db      	lsls	r3, r3, #23
   18e7a:	0ddb      	lsrs	r3, r3, #23
   18e7c:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   18e7e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   18e80:	3b01      	subs	r3, #1
   18e82:	b29b      	uxth	r3, r3
   18e84:	85eb      	strh	r3, [r5, #46]	; 0x2e
   18e86:	2b00      	cmp	r3, #0
   18e88:	d103      	bne.n	18e92 <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   18e8a:	3301      	adds	r3, #1
   18e8c:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   18e8e:	3301      	adds	r3, #1
   18e90:	75a3      	strb	r3, [r4, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   18e92:	2302      	movs	r3, #2
   18e94:	4233      	tst	r3, r6
   18e96:	d005      	beq.n	18ea4 <_usart_interrupt_handler+0x6c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
		module->tx_status = STATUS_OK;
   18e98:	2200      	movs	r2, #0
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   18e9a:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   18e9c:	3331      	adds	r3, #49	; 0x31
   18e9e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   18ea0:	07fb      	lsls	r3, r7, #31
   18ea2:	d43b      	bmi.n	18f1c <_usart_interrupt_handler+0xe4>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   18ea4:	2304      	movs	r3, #4
   18ea6:	4233      	tst	r3, r6
   18ea8:	d012      	beq.n	18ed0 <_usart_interrupt_handler+0x98>

		if (module->remaining_rx_buffer_length) {
   18eaa:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   18eac:	2a00      	cmp	r2, #0
   18eae:	d025      	beq.n	18efc <_usart_interrupt_handler+0xc4>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   18eb0:	8b63      	ldrh	r3, [r4, #26]
   18eb2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   18eb4:	071a      	lsls	r2, r3, #28
   18eb6:	d535      	bpl.n	18f24 <_usart_interrupt_handler+0xec>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   18eb8:	2237      	movs	r2, #55	; 0x37
   18eba:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   18ebc:	d035      	beq.n	18f2a <_usart_interrupt_handler+0xf2>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   18ebe:	2202      	movs	r2, #2
   18ec0:	421a      	tst	r2, r3
   18ec2:	d054      	beq.n	18f6e <_usart_interrupt_handler+0x136>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   18ec4:	211a      	movs	r1, #26
   18ec6:	2332      	movs	r3, #50	; 0x32
   18ec8:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   18eca:	8362      	strh	r2, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   18ecc:	077b      	lsls	r3, r7, #29
   18ece:	d459      	bmi.n	18f84 <_usart_interrupt_handler+0x14c>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   18ed0:	2310      	movs	r3, #16
   18ed2:	4233      	tst	r3, r6
   18ed4:	d003      	beq.n	18ede <_usart_interrupt_handler+0xa6>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   18ed6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   18ed8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   18eda:	423b      	tst	r3, r7
   18edc:	d116      	bne.n	18f0c <_usart_interrupt_handler+0xd4>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   18ede:	2320      	movs	r3, #32
   18ee0:	4233      	tst	r3, r6
   18ee2:	d003      	beq.n	18eec <_usart_interrupt_handler+0xb4>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   18ee4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   18ee6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   18ee8:	073b      	lsls	r3, r7, #28
   18eea:	d413      	bmi.n	18f14 <_usart_interrupt_handler+0xdc>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   18eec:	2308      	movs	r3, #8
   18eee:	4233      	tst	r3, r6
   18ef0:	d003      	beq.n	18efa <_usart_interrupt_handler+0xc2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   18ef2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   18ef4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   18ef6:	06bb      	lsls	r3, r7, #26
   18ef8:	d404      	bmi.n	18f04 <_usart_interrupt_handler+0xcc>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   18efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   18efc:	7523      	strb	r3, [r4, #20]
   18efe:	e7e7      	b.n	18ed0 <_usart_interrupt_handler+0x98>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   18f00:	7523      	strb	r3, [r4, #20]
   18f02:	e7c6      	b.n	18e92 <_usart_interrupt_handler+0x5a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   18f04:	6a2b      	ldr	r3, [r5, #32]
   18f06:	0028      	movs	r0, r5
   18f08:	4798      	blx	r3
}
   18f0a:	e7f6      	b.n	18efa <_usart_interrupt_handler+0xc2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   18f0c:	0028      	movs	r0, r5
   18f0e:	69eb      	ldr	r3, [r5, #28]
   18f10:	4798      	blx	r3
   18f12:	e7e4      	b.n	18ede <_usart_interrupt_handler+0xa6>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   18f14:	0028      	movs	r0, r5
   18f16:	69ab      	ldr	r3, [r5, #24]
   18f18:	4798      	blx	r3
   18f1a:	e7e7      	b.n	18eec <_usart_interrupt_handler+0xb4>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   18f1c:	0028      	movs	r0, r5
   18f1e:	68eb      	ldr	r3, [r5, #12]
   18f20:	4798      	blx	r3
   18f22:	e7bf      	b.n	18ea4 <_usart_interrupt_handler+0x6c>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   18f24:	223f      	movs	r2, #63	; 0x3f
   18f26:	4013      	ands	r3, r2
			if (error_code) {
   18f28:	d1c9      	bne.n	18ebe <_usart_interrupt_handler+0x86>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   18f2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
   18f2c:	6a69      	ldr	r1, [r5, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   18f2e:	05db      	lsls	r3, r3, #23
   18f30:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
   18f32:	b2da      	uxtb	r2, r3
   18f34:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
   18f36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   18f38:	1c51      	adds	r1, r2, #1
   18f3a:	6269      	str	r1, [r5, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   18f3c:	7969      	ldrb	r1, [r5, #5]
   18f3e:	2901      	cmp	r1, #1
   18f40:	d029      	beq.n	18f96 <_usart_interrupt_handler+0x15e>
				if(--(module->remaining_rx_buffer_length) == 0) {
   18f42:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   18f44:	3b01      	subs	r3, #1
   18f46:	b29b      	uxth	r3, r3
   18f48:	85ab      	strh	r3, [r5, #44]	; 0x2c
   18f4a:	2b00      	cmp	r3, #0
   18f4c:	d1c0      	bne.n	18ed0 <_usart_interrupt_handler+0x98>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   18f4e:	2204      	movs	r2, #4
   18f50:	7522      	strb	r2, [r4, #20]
					module->rx_status = STATUS_OK;
   18f52:	322e      	adds	r2, #46	; 0x2e
   18f54:	54ab      	strb	r3, [r5, r2]
					if (callback_status
   18f56:	07bb      	lsls	r3, r7, #30
   18f58:	d5ba      	bpl.n	18ed0 <_usart_interrupt_handler+0x98>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   18f5a:	0028      	movs	r0, r5
   18f5c:	692b      	ldr	r3, [r5, #16]
   18f5e:	4798      	blx	r3
   18f60:	e7b6      	b.n	18ed0 <_usart_interrupt_handler+0x98>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   18f62:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
   18f64:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   18f66:	0209      	lsls	r1, r1, #8
   18f68:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   18f6a:	62aa      	str	r2, [r5, #40]	; 0x28
   18f6c:	e784      	b.n	18e78 <_usart_interrupt_handler+0x40>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   18f6e:	2204      	movs	r2, #4
   18f70:	421a      	tst	r2, r3
   18f72:	d10b      	bne.n	18f8c <_usart_interrupt_handler+0x154>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   18f74:	2201      	movs	r2, #1
   18f76:	421a      	tst	r2, r3
   18f78:	d013      	beq.n	18fa2 <_usart_interrupt_handler+0x16a>
					module->rx_status = STATUS_ERR_BAD_DATA;
   18f7a:	2113      	movs	r1, #19
   18f7c:	2332      	movs	r3, #50	; 0x32
   18f7e:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   18f80:	8362      	strh	r2, [r4, #26]
   18f82:	e7a3      	b.n	18ecc <_usart_interrupt_handler+0x94>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   18f84:	0028      	movs	r0, r5
   18f86:	696b      	ldr	r3, [r5, #20]
   18f88:	4798      	blx	r3
   18f8a:	e7a1      	b.n	18ed0 <_usart_interrupt_handler+0x98>
					module->rx_status = STATUS_ERR_OVERFLOW;
   18f8c:	211e      	movs	r1, #30
   18f8e:	2332      	movs	r3, #50	; 0x32
   18f90:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   18f92:	8362      	strh	r2, [r4, #26]
   18f94:	e79a      	b.n	18ecc <_usart_interrupt_handler+0x94>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   18f96:	0a1b      	lsrs	r3, r3, #8
   18f98:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   18f9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18f9c:	3301      	adds	r3, #1
   18f9e:	626b      	str	r3, [r5, #36]	; 0x24
   18fa0:	e7cf      	b.n	18f42 <_usart_interrupt_handler+0x10a>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   18fa2:	2210      	movs	r2, #16
   18fa4:	421a      	tst	r2, r3
   18fa6:	d004      	beq.n	18fb2 <_usart_interrupt_handler+0x17a>
					module->rx_status = STATUS_ERR_PROTOCOL;
   18fa8:	2142      	movs	r1, #66	; 0x42
   18faa:	2332      	movs	r3, #50	; 0x32
   18fac:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   18fae:	8362      	strh	r2, [r4, #26]
   18fb0:	e78c      	b.n	18ecc <_usart_interrupt_handler+0x94>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   18fb2:	2220      	movs	r2, #32
   18fb4:	421a      	tst	r2, r3
   18fb6:	d100      	bne.n	18fba <_usart_interrupt_handler+0x182>
   18fb8:	e788      	b.n	18ecc <_usart_interrupt_handler+0x94>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   18fba:	2141      	movs	r1, #65	; 0x41
   18fbc:	2332      	movs	r3, #50	; 0x32
   18fbe:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   18fc0:	8362      	strh	r2, [r4, #26]
   18fc2:	e783      	b.n	18ecc <_usart_interrupt_handler+0x94>
   18fc4:	200012ec 	.word	0x200012ec

00018fc8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   18fc8:	1c93      	adds	r3, r2, #2
   18fca:	009b      	lsls	r3, r3, #2
   18fcc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
   18fce:	2a02      	cmp	r2, #2
   18fd0:	d009      	beq.n	18fe6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
   18fd2:	2a03      	cmp	r2, #3
   18fd4:	d00c      	beq.n	18ff0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
   18fd6:	2301      	movs	r3, #1
   18fd8:	4093      	lsls	r3, r2
   18fda:	001a      	movs	r2, r3
   18fdc:	7e03      	ldrb	r3, [r0, #24]
   18fde:	4313      	orrs	r3, r2
   18fe0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
   18fe2:	2000      	movs	r0, #0
   18fe4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
   18fe6:	2210      	movs	r2, #16
   18fe8:	7e03      	ldrb	r3, [r0, #24]
   18fea:	4313      	orrs	r3, r2
   18fec:	7603      	strb	r3, [r0, #24]
   18fee:	e7f8      	b.n	18fe2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
   18ff0:	2220      	movs	r2, #32
   18ff2:	7e03      	ldrb	r3, [r0, #24]
   18ff4:	4313      	orrs	r3, r2
   18ff6:	7603      	strb	r3, [r0, #24]
   18ff8:	e7f3      	b.n	18fe2 <tc_register_callback+0x1a>
   18ffa:	46c0      	nop			; (mov r8, r8)

00018ffc <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
   18ffc:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18ffe:	2601      	movs	r6, #1
	struct tc_module *module
   19000:	4b15      	ldr	r3, [pc, #84]	; (19058 <TC0_Handler+0x5c>)
   19002:	681d      	ldr	r5, [r3, #0]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   19004:	682b      	ldr	r3, [r5, #0]
   19006:	7e2a      	ldrb	r2, [r5, #24]
   19008:	7e6c      	ldrb	r4, [r5, #25]
   1900a:	7a9b      	ldrb	r3, [r3, #10]
   1900c:	4014      	ands	r4, r2
   1900e:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   19010:	4226      	tst	r6, r4
   19012:	d11a      	bne.n	1904a <TC0_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   19014:	2602      	movs	r6, #2
   19016:	4226      	tst	r6, r4
   19018:	d111      	bne.n	1903e <TC0_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   1901a:	2610      	movs	r6, #16
   1901c:	4226      	tst	r6, r4
   1901e:	d108      	bne.n	19032 <TC0_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   19020:	2620      	movs	r6, #32
   19022:	4226      	tst	r6, r4
   19024:	d004      	beq.n	19030 <TC0_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   19026:	696b      	ldr	r3, [r5, #20]
   19028:	0028      	movs	r0, r5
   1902a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1902c:	682b      	ldr	r3, [r5, #0]
   1902e:	729e      	strb	r6, [r3, #10]
	_TC_INTERRUPT_HANDLER(0,0)
   19030:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   19032:	692b      	ldr	r3, [r5, #16]
   19034:	0028      	movs	r0, r5
   19036:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   19038:	682b      	ldr	r3, [r5, #0]
   1903a:	729e      	strb	r6, [r3, #10]
   1903c:	e7f0      	b.n	19020 <TC0_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
   1903e:	68eb      	ldr	r3, [r5, #12]
   19040:	0028      	movs	r0, r5
   19042:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   19044:	682b      	ldr	r3, [r5, #0]
   19046:	729e      	strb	r6, [r3, #10]
   19048:	e7e7      	b.n	1901a <TC0_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   1904a:	68ab      	ldr	r3, [r5, #8]
   1904c:	0028      	movs	r0, r5
   1904e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   19050:	682b      	ldr	r3, [r5, #0]
   19052:	729e      	strb	r6, [r3, #10]
   19054:	e7de      	b.n	19014 <TC0_Handler+0x18>
   19056:	46c0      	nop			; (mov r8, r8)
   19058:	20001304 	.word	0x20001304

0001905c <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
   1905c:	b570      	push	{r4, r5, r6, lr}
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1905e:	2601      	movs	r6, #1
	struct tc_module *module
   19060:	4b15      	ldr	r3, [pc, #84]	; (190b8 <TC1_Handler+0x5c>)
   19062:	685d      	ldr	r5, [r3, #4]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   19064:	682b      	ldr	r3, [r5, #0]
   19066:	7e2a      	ldrb	r2, [r5, #24]
   19068:	7e6c      	ldrb	r4, [r5, #25]
   1906a:	7a9b      	ldrb	r3, [r3, #10]
   1906c:	4014      	ands	r4, r2
   1906e:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   19070:	4226      	tst	r6, r4
   19072:	d11a      	bne.n	190aa <TC1_Handler+0x4e>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   19074:	2602      	movs	r6, #2
   19076:	4226      	tst	r6, r4
   19078:	d111      	bne.n	1909e <TC1_Handler+0x42>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   1907a:	2610      	movs	r6, #16
   1907c:	4226      	tst	r6, r4
   1907e:	d108      	bne.n	19092 <TC1_Handler+0x36>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   19080:	2620      	movs	r6, #32
   19082:	4226      	tst	r6, r4
   19084:	d004      	beq.n	19090 <TC1_Handler+0x34>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   19086:	696b      	ldr	r3, [r5, #20]
   19088:	0028      	movs	r0, r5
   1908a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1908c:	682b      	ldr	r3, [r5, #0]
   1908e:	729e      	strb	r6, [r3, #10]
	_TC_INTERRUPT_HANDLER(1,1)
   19090:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   19092:	692b      	ldr	r3, [r5, #16]
   19094:	0028      	movs	r0, r5
   19096:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   19098:	682b      	ldr	r3, [r5, #0]
   1909a:	729e      	strb	r6, [r3, #10]
   1909c:	e7f0      	b.n	19080 <TC1_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
   1909e:	68eb      	ldr	r3, [r5, #12]
   190a0:	0028      	movs	r0, r5
   190a2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   190a4:	682b      	ldr	r3, [r5, #0]
   190a6:	729e      	strb	r6, [r3, #10]
   190a8:	e7e7      	b.n	1907a <TC1_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   190aa:	68ab      	ldr	r3, [r5, #8]
   190ac:	0028      	movs	r0, r5
   190ae:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   190b0:	682b      	ldr	r3, [r5, #0]
   190b2:	729e      	strb	r6, [r3, #10]
   190b4:	e7de      	b.n	19074 <TC1_Handler+0x18>
   190b6:	46c0      	nop			; (mov r8, r8)
   190b8:	20001304 	.word	0x20001304

000190bc <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
   190bc:	b570      	push	{r4, r5, r6, lr}
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   190be:	2601      	movs	r6, #1
	struct tc_module *module
   190c0:	4b15      	ldr	r3, [pc, #84]	; (19118 <TC4_Handler+0x5c>)
   190c2:	689d      	ldr	r5, [r3, #8]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   190c4:	682b      	ldr	r3, [r5, #0]
   190c6:	7e2a      	ldrb	r2, [r5, #24]
   190c8:	7e6c      	ldrb	r4, [r5, #25]
   190ca:	7a9b      	ldrb	r3, [r3, #10]
   190cc:	4014      	ands	r4, r2
   190ce:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   190d0:	4226      	tst	r6, r4
   190d2:	d11a      	bne.n	1910a <TC4_Handler+0x4e>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   190d4:	2602      	movs	r6, #2
   190d6:	4226      	tst	r6, r4
   190d8:	d111      	bne.n	190fe <TC4_Handler+0x42>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   190da:	2610      	movs	r6, #16
   190dc:	4226      	tst	r6, r4
   190de:	d108      	bne.n	190f2 <TC4_Handler+0x36>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   190e0:	2620      	movs	r6, #32
   190e2:	4226      	tst	r6, r4
   190e4:	d004      	beq.n	190f0 <TC4_Handler+0x34>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   190e6:	696b      	ldr	r3, [r5, #20]
   190e8:	0028      	movs	r0, r5
   190ea:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   190ec:	682b      	ldr	r3, [r5, #0]
   190ee:	729e      	strb	r6, [r3, #10]
	_TC_INTERRUPT_HANDLER(4,2)
   190f0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   190f2:	692b      	ldr	r3, [r5, #16]
   190f4:	0028      	movs	r0, r5
   190f6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   190f8:	682b      	ldr	r3, [r5, #0]
   190fa:	729e      	strb	r6, [r3, #10]
   190fc:	e7f0      	b.n	190e0 <TC4_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
   190fe:	68eb      	ldr	r3, [r5, #12]
   19100:	0028      	movs	r0, r5
   19102:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   19104:	682b      	ldr	r3, [r5, #0]
   19106:	729e      	strb	r6, [r3, #10]
   19108:	e7e7      	b.n	190da <TC4_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   1910a:	68ab      	ldr	r3, [r5, #8]
   1910c:	0028      	movs	r0, r5
   1910e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   19110:	682b      	ldr	r3, [r5, #0]
   19112:	729e      	strb	r6, [r3, #10]
   19114:	e7de      	b.n	190d4 <TC4_Handler+0x18>
   19116:	46c0      	nop			; (mov r8, r8)
   19118:	20001304 	.word	0x20001304

0001911c <_tc_get_inst_index>:
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   1911c:	4b0e      	ldr	r3, [pc, #56]	; (19158 <_tc_get_inst_index+0x3c>)
{
   1911e:	0001      	movs	r1, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   19120:	0018      	movs	r0, r3
{
   19122:	b570      	push	{r4, r5, r6, lr}
   19124:	b084      	sub	sp, #16
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   19126:	aa01      	add	r2, sp, #4
   19128:	c870      	ldmia	r0!, {r4, r5, r6}
   1912a:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
   1912c:	9a01      	ldr	r2, [sp, #4]
   1912e:	4291      	cmp	r1, r2
   19130:	d008      	beq.n	19144 <_tc_get_inst_index+0x28>
   19132:	685a      	ldr	r2, [r3, #4]
   19134:	4291      	cmp	r1, r2
   19136:	d008      	beq.n	1914a <_tc_get_inst_index+0x2e>
   19138:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1913a:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
   1913c:	428b      	cmp	r3, r1
   1913e:	d007      	beq.n	19150 <_tc_get_inst_index+0x34>
}
   19140:	b004      	add	sp, #16
   19142:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   19144:	2000      	movs	r0, #0
			return i;
   19146:	b2c0      	uxtb	r0, r0
   19148:	e7fa      	b.n	19140 <_tc_get_inst_index+0x24>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   1914a:	2001      	movs	r0, #1
			return i;
   1914c:	b2c0      	uxtb	r0, r0
   1914e:	e7f7      	b.n	19140 <_tc_get_inst_index+0x24>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   19150:	3002      	adds	r0, #2
			return i;
   19152:	b2c0      	uxtb	r0, r0
   19154:	e7f4      	b.n	19140 <_tc_get_inst_index+0x24>
   19156:	46c0      	nop			; (mov r8, r8)
   19158:	0002e9e4 	.word	0x0002e9e4

0001915c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
   1915c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1915e:	4645      	mov	r5, r8
   19160:	46de      	mov	lr, fp
   19162:	4657      	mov	r7, sl
   19164:	464e      	mov	r6, r9
   19166:	b5e0      	push	{r5, r6, r7, lr}
   19168:	b08b      	sub	sp, #44	; 0x2c
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   1916a:	ab04      	add	r3, sp, #16
   1916c:	469b      	mov	fp, r3
   1916e:	4bc8      	ldr	r3, [pc, #800]	; (19490 <tc_init+0x334>)
{
   19170:	000f      	movs	r7, r1
   19172:	4690      	mov	r8, r2
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   19174:	0019      	movs	r1, r3
   19176:	465a      	mov	r2, fp
{
   19178:	0004      	movs	r4, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   1917a:	c961      	ldmia	r1!, {r0, r5, r6}
   1917c:	c261      	stmia	r2!, {r0, r5, r6}
		if (hw == tc_modules[i]) {
   1917e:	9a04      	ldr	r2, [sp, #16]
   19180:	42ba      	cmp	r2, r7
   19182:	d100      	bne.n	19186 <tc_init+0x2a>
   19184:	e133      	b.n	193ee <tc_init+0x292>
   19186:	685a      	ldr	r2, [r3, #4]
   19188:	42ba      	cmp	r2, r7
   1918a:	d100      	bne.n	1918e <tc_init+0x32>
   1918c:	e134      	b.n	193f8 <tc_init+0x29c>
   1918e:	2200      	movs	r2, #0
   19190:	4691      	mov	r9, r2
	return 0;
   19192:	4692      	mov	sl, r2
		if (hw == tc_modules[i]) {
   19194:	689a      	ldr	r2, [r3, #8]
   19196:	4297      	cmp	r7, r2
   19198:	d100      	bne.n	1919c <tc_init+0x40>
   1919a:	e12f      	b.n	193fc <tc_init+0x2a0>
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
   1919c:	221b      	movs	r2, #27
   1919e:	ae02      	add	r6, sp, #8
   191a0:	7032      	strb	r2, [r6, #0]
   191a2:	7072      	strb	r2, [r6, #1]
   191a4:	3202      	adds	r2, #2
   191a6:	70b2      	strb	r2, [r6, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
   191a8:	465a      	mov	r2, fp
   191aa:	330c      	adds	r3, #12
   191ac:	cb23      	ldmia	r3!, {r0, r1, r5}
   191ae:	c223      	stmia	r2!, {r0, r1, r5}
   191b0:	cb23      	ldmia	r3!, {r0, r1, r5}
   191b2:	c223      	stmia	r2!, {r0, r1, r5}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
   191b4:	2300      	movs	r3, #0
   191b6:	60a3      	str	r3, [r4, #8]
   191b8:	60e3      	str	r3, [r4, #12]
   191ba:	6123      	str	r3, [r4, #16]
   191bc:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
   191be:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
   191c0:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
   191c2:	464b      	mov	r3, r9
   191c4:	4ab3      	ldr	r2, [pc, #716]	; (19494 <tc_init+0x338>)
   191c6:	009b      	lsls	r3, r3, #2
   191c8:	509c      	str	r4, [r3, r2]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   191ca:	4642      	mov	r2, r8
   191cc:	2334      	movs	r3, #52	; 0x34
	module_inst->hw = hw;
   191ce:	6027      	str	r7, [r4, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   191d0:	5cd3      	ldrb	r3, [r2, r3]
   191d2:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   191d4:	78d3      	ldrb	r3, [r2, #3]
   191d6:	2b08      	cmp	r3, #8
   191d8:	d00c      	beq.n	191f4 <tc_init+0x98>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
   191da:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
   191dc:	2301      	movs	r3, #1
   191de:	683a      	ldr	r2, [r7, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   191e0:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
   191e2:	4213      	tst	r3, r2
   191e4:	d00b      	beq.n	191fe <tc_init+0xa2>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
   191e6:	b00b      	add	sp, #44	; 0x2c
   191e8:	bc3c      	pop	{r2, r3, r4, r5}
   191ea:	4690      	mov	r8, r2
   191ec:	4699      	mov	r9, r3
   191ee:	46a2      	mov	sl, r4
   191f0:	46ab      	mov	fp, r5
   191f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   191f4:	4652      	mov	r2, sl
		return STATUS_ERR_INVALID_ARG;
   191f6:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   191f8:	07d2      	lsls	r2, r2, #31
   191fa:	d4f4      	bmi.n	191e6 <tc_init+0x8a>
   191fc:	e7ed      	b.n	191da <tc_init+0x7e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
   191fe:	2202      	movs	r2, #2
   19200:	7af9      	ldrb	r1, [r7, #11]
		return STATUS_ERR_DENIED;
   19202:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
   19204:	420a      	tst	r2, r1
   19206:	d1ee      	bne.n	191e6 <tc_init+0x8a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
   19208:	6839      	ldr	r1, [r7, #0]
   1920a:	400a      	ands	r2, r1
   1920c:	d1eb      	bne.n	191e6 <tc_init+0x8a>
	if (config->pwm_channel[0].enabled) {
   1920e:	4641      	mov	r1, r8
   19210:	7c09      	ldrb	r1, [r1, #16]
   19212:	2900      	cmp	r1, #0
   19214:	d000      	beq.n	19218 <tc_init+0xbc>
   19216:	e0f6      	b.n	19406 <tc_init+0x2aa>
	if (config->pwm_channel[1].enabled) {
   19218:	4643      	mov	r3, r8
   1921a:	7f1b      	ldrb	r3, [r3, #28]
   1921c:	2b00      	cmp	r3, #0
   1921e:	d000      	beq.n	19222 <tc_init+0xc6>
   19220:	e0fd      	b.n	1941e <tc_init+0x2c2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
   19222:	464b      	mov	r3, r9
   19224:	4659      	mov	r1, fp
   19226:	005a      	lsls	r2, r3, #1
   19228:	1c53      	adds	r3, r2, #1
   1922a:	009b      	lsls	r3, r3, #2
   1922c:	58c9      	ldr	r1, [r1, r3]
   1922e:	464b      	mov	r3, r9
	switch (bus) {
   19230:	4658      	mov	r0, fp
   19232:	00db      	lsls	r3, r3, #3
   19234:	5cc3      	ldrb	r3, [r0, r3]
   19236:	2b04      	cmp	r3, #4
   19238:	d807      	bhi.n	1924a <tc_init+0xee>
   1923a:	4897      	ldr	r0, [pc, #604]	; (19498 <tc_init+0x33c>)
   1923c:	009b      	lsls	r3, r3, #2
   1923e:	58c3      	ldr	r3, [r0, r3]
   19240:	469f      	mov	pc, r3
			MCLK->APBDMASK.reg |= mask;
   19242:	4896      	ldr	r0, [pc, #600]	; (1949c <tc_init+0x340>)
   19244:	6a03      	ldr	r3, [r0, #32]
   19246:	4319      	orrs	r1, r3
   19248:	6201      	str	r1, [r0, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
   1924a:	4643      	mov	r3, r8
   1924c:	78db      	ldrb	r3, [r3, #3]
   1924e:	2b08      	cmp	r3, #8
   19250:	d100      	bne.n	19254 <tc_init+0xf8>
   19252:	e0f6      	b.n	19442 <tc_init+0x2e6>
	gclk_chan_config.source_generator = config->clock_source;
   19254:	4643      	mov	r3, r8
   19256:	781b      	ldrb	r3, [r3, #0]
   19258:	a901      	add	r1, sp, #4
   1925a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
   1925c:	464b      	mov	r3, r9
   1925e:	5cf5      	ldrb	r5, [r6, r3]
   19260:	4b8f      	ldr	r3, [pc, #572]	; (194a0 <tc_init+0x344>)
   19262:	0028      	movs	r0, r5
   19264:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
   19266:	4b8f      	ldr	r3, [pc, #572]	; (194a4 <tc_init+0x348>)
   19268:	0028      	movs	r0, r5
   1926a:	4798      	blx	r3
			(uint32_t)config->counter_size |
   1926c:	4643      	mov	r3, r8
   1926e:	4642      	mov	r2, r8
   19270:	78db      	ldrb	r3, [r3, #3]
   19272:	79d2      	ldrb	r2, [r2, #7]
   19274:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
   19276:	4642      	mov	r2, r8
   19278:	8892      	ldrh	r2, [r2, #4]
	ctrla_tmp =
   1927a:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
   1927c:	4642      	mov	r2, r8
   1927e:	7a52      	ldrb	r2, [r2, #9]
   19280:	2a00      	cmp	r2, #0
   19282:	d002      	beq.n	1928a <tc_init+0x12e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
   19284:	2280      	movs	r2, #128	; 0x80
   19286:	0252      	lsls	r2, r2, #9
   19288:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
   1928a:	4642      	mov	r2, r8
   1928c:	7a92      	ldrb	r2, [r2, #10]
   1928e:	2a00      	cmp	r2, #0
   19290:	d002      	beq.n	19298 <tc_init+0x13c>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
   19292:	2280      	movs	r2, #128	; 0x80
   19294:	0292      	lsls	r2, r2, #10
   19296:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
   19298:	4642      	mov	r2, r8
   1929a:	7ad2      	ldrb	r2, [r2, #11]
   1929c:	2a00      	cmp	r2, #0
   1929e:	d002      	beq.n	192a6 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
   192a0:	2280      	movs	r2, #128	; 0x80
   192a2:	0352      	lsls	r2, r2, #13
   192a4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
   192a6:	4642      	mov	r2, r8
   192a8:	7b12      	ldrb	r2, [r2, #12]
   192aa:	2a00      	cmp	r2, #0
   192ac:	d002      	beq.n	192b4 <tc_init+0x158>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
   192ae:	2280      	movs	r2, #128	; 0x80
   192b0:	0392      	lsls	r2, r2, #14
   192b2:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
   192b4:	4642      	mov	r2, r8
   192b6:	7851      	ldrb	r1, [r2, #1]
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
   192b8:	7892      	ldrb	r2, [r2, #2]
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
   192ba:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
   192bc:	01d2      	lsls	r2, r2, #7
   192be:	4311      	orrs	r1, r2
   192c0:	6822      	ldr	r2, [r4, #0]
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
   192c2:	4319      	orrs	r1, r3
	return (tc_module->SYNCBUSY.reg);
   192c4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   192c6:	2b00      	cmp	r3, #0
   192c8:	d1fc      	bne.n	192c4 <tc_init+0x168>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
   192ca:	6039      	str	r1, [r7, #0]
   192cc:	6822      	ldr	r2, [r4, #0]
   192ce:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   192d0:	2b00      	cmp	r3, #0
   192d2:	d1fc      	bne.n	192ce <tc_init+0x172>
	hw->COUNT8.WAVE.reg = config->wave_generation;
   192d4:	4643      	mov	r3, r8
   192d6:	799b      	ldrb	r3, [r3, #6]
   192d8:	733b      	strb	r3, [r7, #12]
	if (config->oneshot) {
   192da:	4643      	mov	r3, r8
   192dc:	7b5b      	ldrb	r3, [r3, #13]
   192de:	2b00      	cmp	r3, #0
   192e0:	d000      	beq.n	192e4 <tc_init+0x188>
   192e2:	e08d      	b.n	19400 <tc_init+0x2a4>
   192e4:	2101      	movs	r1, #1
	uint8_t ctrlbset_tmp = 0;
   192e6:	2200      	movs	r2, #0
	if (config->count_direction) {
   192e8:	4643      	mov	r3, r8
   192ea:	7b9b      	ldrb	r3, [r3, #14]
   192ec:	2b00      	cmp	r3, #0
   192ee:	d100      	bne.n	192f2 <tc_init+0x196>
   192f0:	0011      	movs	r1, r2
   192f2:	6822      	ldr	r2, [r4, #0]
   192f4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   192f6:	2b00      	cmp	r3, #0
   192f8:	d1fc      	bne.n	192f4 <tc_init+0x198>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
   192fa:	33ff      	adds	r3, #255	; 0xff
   192fc:	713b      	strb	r3, [r7, #4]
	if (ctrlbset_tmp) {
   192fe:	2900      	cmp	r1, #0
   19300:	d004      	beq.n	1930c <tc_init+0x1b0>
   19302:	6822      	ldr	r2, [r4, #0]
   19304:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
   19306:	2b00      	cmp	r3, #0
   19308:	d1fc      	bne.n	19304 <tc_init+0x1a8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
   1930a:	7179      	strb	r1, [r7, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
   1930c:	4643      	mov	r3, r8
   1930e:	7a1b      	ldrb	r3, [r3, #8]
   19310:	737b      	strb	r3, [r7, #13]
   19312:	6822      	ldr	r2, [r4, #0]
   19314:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   19316:	2b00      	cmp	r3, #0
   19318:	d1fc      	bne.n	19314 <tc_init+0x1b8>
	switch (module_inst->counter_size) {
   1931a:	7923      	ldrb	r3, [r4, #4]
   1931c:	2b04      	cmp	r3, #4
   1931e:	d01b      	beq.n	19358 <tc_init+0x1fc>
   19320:	2b08      	cmp	r3, #8
   19322:	d03a      	beq.n	1939a <tc_init+0x23e>
	return STATUS_ERR_INVALID_ARG;
   19324:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
   19326:	2b00      	cmp	r3, #0
   19328:	d000      	beq.n	1932c <tc_init+0x1d0>
   1932a:	e75c      	b.n	191e6 <tc_init+0x8a>
   1932c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   1932e:	2b00      	cmp	r3, #0
   19330:	d1fc      	bne.n	1932c <tc_init+0x1d0>
				= config->counter_16_bit.value;
   19332:	4643      	mov	r3, r8
   19334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   19336:	82bb      	strh	r3, [r7, #20]
   19338:	6822      	ldr	r2, [r4, #0]
   1933a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   1933c:	2b00      	cmp	r3, #0
   1933e:	d1fc      	bne.n	1933a <tc_init+0x1de>
					config->counter_16_bit.compare_capture_channel[0];
   19340:	4643      	mov	r3, r8
   19342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
   19344:	83bb      	strh	r3, [r7, #28]
   19346:	6822      	ldr	r2, [r4, #0]
   19348:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   1934a:	2b00      	cmp	r3, #0
   1934c:	d1fc      	bne.n	19348 <tc_init+0x1ec>
					config->counter_16_bit.compare_capture_channel[1];
   1934e:	4643      	mov	r3, r8
   19350:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			return STATUS_OK;
   19352:	2000      	movs	r0, #0
			hw->COUNT16.CC[1].reg =
   19354:	83fb      	strh	r3, [r7, #30]
			return STATUS_OK;
   19356:	e746      	b.n	191e6 <tc_init+0x8a>
   19358:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   1935a:	2b00      	cmp	r3, #0
   1935c:	d1fc      	bne.n	19358 <tc_init+0x1fc>
					config->counter_8_bit.value;
   1935e:	4642      	mov	r2, r8
   19360:	3328      	adds	r3, #40	; 0x28
   19362:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.COUNT.reg =
   19364:	753b      	strb	r3, [r7, #20]
   19366:	6822      	ldr	r2, [r4, #0]
   19368:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   1936a:	2b00      	cmp	r3, #0
   1936c:	d1fc      	bne.n	19368 <tc_init+0x20c>
					config->counter_8_bit.period;
   1936e:	4642      	mov	r2, r8
   19370:	3329      	adds	r3, #41	; 0x29
   19372:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.PER.reg =
   19374:	76fb      	strb	r3, [r7, #27]
   19376:	6822      	ldr	r2, [r4, #0]
   19378:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   1937a:	2b00      	cmp	r3, #0
   1937c:	d1fc      	bne.n	19378 <tc_init+0x21c>
					config->counter_8_bit.compare_capture_channel[0];
   1937e:	4642      	mov	r2, r8
   19380:	332a      	adds	r3, #42	; 0x2a
   19382:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.CC[0].reg =
   19384:	773b      	strb	r3, [r7, #28]
   19386:	6822      	ldr	r2, [r4, #0]
   19388:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   1938a:	2b00      	cmp	r3, #0
   1938c:	d1fc      	bne.n	19388 <tc_init+0x22c>
					config->counter_8_bit.compare_capture_channel[1];
   1938e:	4642      	mov	r2, r8
   19390:	332b      	adds	r3, #43	; 0x2b
   19392:	5cd3      	ldrb	r3, [r2, r3]
			return STATUS_OK;
   19394:	2000      	movs	r0, #0
			hw->COUNT8.CC[1].reg =
   19396:	777b      	strb	r3, [r7, #29]
			return STATUS_OK;
   19398:	e725      	b.n	191e6 <tc_init+0x8a>
   1939a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   1939c:	2b00      	cmp	r3, #0
   1939e:	d1fc      	bne.n	1939a <tc_init+0x23e>
				= config->counter_32_bit.value;
   193a0:	4643      	mov	r3, r8
   193a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   193a4:	617b      	str	r3, [r7, #20]
   193a6:	6822      	ldr	r2, [r4, #0]
   193a8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   193aa:	2b00      	cmp	r3, #0
   193ac:	d1fc      	bne.n	193a8 <tc_init+0x24c>
			hw->COUNT32.CC[0].reg =
   193ae:	4643      	mov	r3, r8
   193b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   193b2:	61fb      	str	r3, [r7, #28]
   193b4:	6822      	ldr	r2, [r4, #0]
   193b6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   193b8:	2b00      	cmp	r3, #0
   193ba:	d1fc      	bne.n	193b6 <tc_init+0x25a>
					config->counter_32_bit.compare_capture_channel[1];
   193bc:	4643      	mov	r3, r8
   193be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			return STATUS_OK;
   193c0:	2000      	movs	r0, #0
			hw->COUNT32.CC[1].reg =
   193c2:	623b      	str	r3, [r7, #32]
			return STATUS_OK;
   193c4:	e70f      	b.n	191e6 <tc_init+0x8a>
			MCLK->APBCMASK.reg |= mask;
   193c6:	4835      	ldr	r0, [pc, #212]	; (1949c <tc_init+0x340>)
   193c8:	69c3      	ldr	r3, [r0, #28]
   193ca:	4319      	orrs	r1, r3
   193cc:	61c1      	str	r1, [r0, #28]
   193ce:	e73c      	b.n	1924a <tc_init+0xee>
			MCLK->APBBMASK.reg |= mask;
   193d0:	4832      	ldr	r0, [pc, #200]	; (1949c <tc_init+0x340>)
   193d2:	6983      	ldr	r3, [r0, #24]
   193d4:	4319      	orrs	r1, r3
   193d6:	6181      	str	r1, [r0, #24]
   193d8:	e737      	b.n	1924a <tc_init+0xee>
			MCLK->APBAMASK.reg |= mask;
   193da:	4830      	ldr	r0, [pc, #192]	; (1949c <tc_init+0x340>)
   193dc:	6943      	ldr	r3, [r0, #20]
   193de:	4319      	orrs	r1, r3
   193e0:	6141      	str	r1, [r0, #20]
   193e2:	e732      	b.n	1924a <tc_init+0xee>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
   193e4:	4b2d      	ldr	r3, [pc, #180]	; (1949c <tc_init+0x340>)
   193e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   193e8:	4301      	orrs	r1, r0
   193ea:	6259      	str	r1, [r3, #36]	; 0x24
   193ec:	e72d      	b.n	1924a <tc_init+0xee>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   193ee:	2200      	movs	r2, #0
			return i;
   193f0:	b2d1      	uxtb	r1, r2
   193f2:	468a      	mov	sl, r1
   193f4:	4691      	mov	r9, r2
   193f6:	e6d1      	b.n	1919c <tc_init+0x40>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   193f8:	2201      	movs	r2, #1
   193fa:	e7f9      	b.n	193f0 <tc_init+0x294>
   193fc:	2202      	movs	r2, #2
   193fe:	e7f7      	b.n	193f0 <tc_init+0x294>
   19400:	2105      	movs	r1, #5
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
   19402:	2204      	movs	r2, #4
   19404:	e770      	b.n	192e8 <tc_init+0x18c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   19406:	a903      	add	r1, sp, #12
	config->powersave    = false;
   19408:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
   1940a:	4642      	mov	r2, r8
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1940c:	708b      	strb	r3, [r1, #2]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   1940e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
   19410:	4643      	mov	r3, r8
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
   19412:	7e12      	ldrb	r2, [r2, #24]
		system_pinmux_pin_set_config(
   19414:	7d18      	ldrb	r0, [r3, #20]
   19416:	4b24      	ldr	r3, [pc, #144]	; (194a8 <tc_init+0x34c>)
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
   19418:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
   1941a:	4798      	blx	r3
   1941c:	e6fc      	b.n	19218 <tc_init+0xbc>
	config->powersave    = false;
   1941e:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   19420:	a903      	add	r1, sp, #12
	config->powersave    = false;
   19422:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
   19424:	2024      	movs	r0, #36	; 0x24
   19426:	4642      	mov	r2, r8
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   19428:	2301      	movs	r3, #1
   1942a:	1812      	adds	r2, r2, r0
   1942c:	7812      	ldrb	r2, [r2, #0]
   1942e:	708b      	strb	r3, [r1, #2]
   19430:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   19432:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
   19434:	2220      	movs	r2, #32
   19436:	4643      	mov	r3, r8
   19438:	189b      	adds	r3, r3, r2
   1943a:	7818      	ldrb	r0, [r3, #0]
   1943c:	4b1a      	ldr	r3, [pc, #104]	; (194a8 <tc_init+0x34c>)
   1943e:	4798      	blx	r3
   19440:	e6ef      	b.n	19222 <tc_init+0xc6>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
   19442:	4653      	mov	r3, sl
   19444:	2b02      	cmp	r3, #2
   19446:	d100      	bne.n	1944a <tc_init+0x2ee>
   19448:	e704      	b.n	19254 <tc_init+0xf8>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
   1944a:	4659      	mov	r1, fp
   1944c:	1cd3      	adds	r3, r2, #3
   1944e:	3202      	adds	r2, #2
   19450:	0092      	lsls	r2, r2, #2
	switch (bus) {
   19452:	5c8a      	ldrb	r2, [r1, r2]
   19454:	009b      	lsls	r3, r3, #2
   19456:	58cb      	ldr	r3, [r1, r3]
   19458:	2a04      	cmp	r2, #4
   1945a:	d900      	bls.n	1945e <tc_init+0x302>
   1945c:	e6fa      	b.n	19254 <tc_init+0xf8>
   1945e:	4913      	ldr	r1, [pc, #76]	; (194ac <tc_init+0x350>)
   19460:	0092      	lsls	r2, r2, #2
   19462:	588a      	ldr	r2, [r1, r2]
   19464:	4697      	mov	pc, r2
			MCLK->APBEMASK.reg |= mask;
   19466:	4a0d      	ldr	r2, [pc, #52]	; (1949c <tc_init+0x340>)
   19468:	6a51      	ldr	r1, [r2, #36]	; 0x24
   1946a:	430b      	orrs	r3, r1
   1946c:	6253      	str	r3, [r2, #36]	; 0x24
   1946e:	e6f1      	b.n	19254 <tc_init+0xf8>
			MCLK->APBDMASK.reg |= mask;
   19470:	490a      	ldr	r1, [pc, #40]	; (1949c <tc_init+0x340>)
   19472:	6a0a      	ldr	r2, [r1, #32]
   19474:	4313      	orrs	r3, r2
   19476:	620b      	str	r3, [r1, #32]
   19478:	e6ec      	b.n	19254 <tc_init+0xf8>
			MCLK->APBCMASK.reg |= mask;
   1947a:	4908      	ldr	r1, [pc, #32]	; (1949c <tc_init+0x340>)
   1947c:	69ca      	ldr	r2, [r1, #28]
   1947e:	4313      	orrs	r3, r2
   19480:	61cb      	str	r3, [r1, #28]
   19482:	e6e7      	b.n	19254 <tc_init+0xf8>
			MCLK->APBBMASK.reg |= mask;
   19484:	4905      	ldr	r1, [pc, #20]	; (1949c <tc_init+0x340>)
   19486:	698a      	ldr	r2, [r1, #24]
   19488:	4313      	orrs	r3, r2
   1948a:	618b      	str	r3, [r1, #24]
   1948c:	e6e2      	b.n	19254 <tc_init+0xf8>
   1948e:	46c0      	nop			; (mov r8, r8)
   19490:	0002e9e4 	.word	0x0002e9e4
   19494:	20001304 	.word	0x20001304
   19498:	0002e9bc 	.word	0x0002e9bc
   1949c:	40000400 	.word	0x40000400
   194a0:	0001fc15 	.word	0x0001fc15
   194a4:	0001fc55 	.word	0x0001fc55
   194a8:	0001fd11 	.word	0x0001fd11
   194ac:	0002e9d0 	.word	0x0002e9d0
			MCLK->APBAMASK.reg |= mask;
   194b0:	4902      	ldr	r1, [pc, #8]	; (194bc <tc_init+0x360>)
   194b2:	694a      	ldr	r2, [r1, #20]
   194b4:	4313      	orrs	r3, r2
   194b6:	614b      	str	r3, [r1, #20]
   194b8:	e6cc      	b.n	19254 <tc_init+0xf8>
   194ba:	46c0      	nop			; (mov r8, r8)
   194bc:	40000400 	.word	0x40000400

000194c0 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
   194c0:	6802      	ldr	r2, [r0, #0]
   194c2:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
   194c4:	2b00      	cmp	r3, #0
   194c6:	d1fc      	bne.n	194c2 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
   194c8:	7903      	ldrb	r3, [r0, #4]
   194ca:	2b04      	cmp	r3, #4
   194cc:	d00c      	beq.n	194e8 <tc_set_count_value+0x28>
   194ce:	2b08      	cmp	r3, #8
   194d0:	d007      	beq.n	194e2 <tc_set_count_value+0x22>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
   194d2:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
   194d4:	2b00      	cmp	r3, #0
   194d6:	d000      	beq.n	194da <tc_set_count_value+0x1a>
	}
}
   194d8:	4770      	bx	lr
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
   194da:	b289      	uxth	r1, r1
   194dc:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
   194de:	2000      	movs	r0, #0
   194e0:	e7fa      	b.n	194d8 <tc_set_count_value+0x18>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
   194e2:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
   194e4:	2000      	movs	r0, #0
   194e6:	e7f7      	b.n	194d8 <tc_set_count_value+0x18>
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
   194e8:	b2c9      	uxtb	r1, r1
   194ea:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
   194ec:	2000      	movs	r0, #0
   194ee:	e7f3      	b.n	194d8 <tc_set_count_value+0x18>

000194f0 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   194f0:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
   194f2:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
   194f4:	2b00      	cmp	r3, #0
   194f6:	d1fc      	bne.n	194f2 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   194f8:	7113      	strb	r3, [r2, #4]
   194fa:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
   194fc:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
   194fe:	2b00      	cmp	r3, #0
   19500:	d1fc      	bne.n	194fc <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
   19502:	3380      	adds	r3, #128	; 0x80
   19504:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
   19506:	7953      	ldrb	r3, [r2, #5]
   19508:	b25b      	sxtb	r3, r3
   1950a:	2b00      	cmp	r3, #0
   1950c:	dbfb      	blt.n	19506 <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
   1950e:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
   19510:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
   19512:	2b00      	cmp	r3, #0
   19514:	d1fc      	bne.n	19510 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
   19516:	7903      	ldrb	r3, [r0, #4]
   19518:	2b04      	cmp	r3, #4
   1951a:	d00a      	beq.n	19532 <tc_get_count_value+0x42>
   1951c:	2b08      	cmp	r3, #8
   1951e:	d006      	beq.n	1952e <tc_get_count_value+0x3e>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
   19520:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
   19522:	2b00      	cmp	r3, #0
   19524:	d000      	beq.n	19528 <tc_get_count_value+0x38>
}
   19526:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
   19528:	8a90      	ldrh	r0, [r2, #20]
   1952a:	b280      	uxth	r0, r0
   1952c:	e7fb      	b.n	19526 <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
   1952e:	6950      	ldr	r0, [r2, #20]
   19530:	e7f9      	b.n	19526 <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
   19532:	7d10      	ldrb	r0, [r2, #20]
   19534:	b2c0      	uxtb	r0, r0
   19536:	e7f6      	b.n	19526 <tc_get_count_value+0x36>

00019538 <cal_getGroupPoints>:
#include <calibration.h>

uint8_t ind_buf, groupPoints, currentGroup;

uint8_t cal_getGroupPoints(void){
	return groupPoints;
   19538:	4b01      	ldr	r3, [pc, #4]	; (19540 <cal_getGroupPoints+0x8>)
   1953a:	7818      	ldrb	r0, [r3, #0]
	
}
   1953c:	4770      	bx	lr
   1953e:	46c0      	nop			; (mov r8, r8)
   19540:	20001312 	.word	0x20001312

00019544 <cal_getCurrentGroup>:

uint8_t cal_getCurrentGroup(void){
	return currentGroup;
   19544:	4b01      	ldr	r3, [pc, #4]	; (1954c <cal_getCurrentGroup+0x8>)
   19546:	7818      	ldrb	r0, [r3, #0]
}
   19548:	4770      	bx	lr
   1954a:	46c0      	nop			; (mov r8, r8)
   1954c:	20001310 	.word	0x20001310

00019550 <cal_resetGroup>:



void cal_resetGroup(void){
	
	ind_buf = 0;
   19550:	2300      	movs	r3, #0
   19552:	4a05      	ldr	r2, [pc, #20]	; (19568 <cal_resetGroup+0x18>)
   19554:	7013      	strb	r3, [r2, #0]
	groupPoints = 0;
   19556:	4a05      	ldr	r2, [pc, #20]	; (1956c <cal_resetGroup+0x1c>)
   19558:	7013      	strb	r3, [r2, #0]
	nGroups = currentGroup-1;
   1955a:	4b05      	ldr	r3, [pc, #20]	; (19570 <cal_resetGroup+0x20>)
   1955c:	4a05      	ldr	r2, [pc, #20]	; (19574 <cal_resetGroup+0x24>)
   1955e:	781b      	ldrb	r3, [r3, #0]
   19560:	3b01      	subs	r3, #1
   19562:	6013      	str	r3, [r2, #0]
}
   19564:	4770      	bx	lr
   19566:	46c0      	nop			; (mov r8, r8)
   19568:	20001311 	.word	0x20001311
   1956c:	20001312 	.word	0x20001312
   19570:	20001310 	.word	0x20001310
   19574:	20003394 	.word	0x20003394

00019578 <cal_removeGroup>:
			XYZ[ind1][k] = XYZ[ind2][k];
		}
	}
}

uint32_t cal_removeGroup(bool *logRemove, uint32_t groupsStart){
   19578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1957a:	4645      	mov	r5, r8
   1957c:	46de      	mov	lr, fp
   1957e:	4657      	mov	r7, sl
   19580:	464e      	mov	r6, r9
   19582:	b5e0      	push	{r5, r6, r7, lr}
   19584:	4680      	mov	r8, r0
   19586:	b083      	sub	sp, #12
	uint32_t g;
	uint32_t groupsEnd;
	
	groupsEnd = groupsStart;
	for (g=groupsStart;g>0;g--){
   19588:	2900      	cmp	r1, #0
   1958a:	d061      	beq.n	19650 <cal_removeGroup+0xd8>
   1958c:	4b32      	ldr	r3, [pc, #200]	; (19658 <cal_removeGroup+0xe0>)
   1958e:	2590      	movs	r5, #144	; 0x90
   19590:	18c8      	adds	r0, r1, r3
   19592:	4b32      	ldr	r3, [pc, #200]	; (1965c <cal_removeGroup+0xe4>)
   19594:	00ed      	lsls	r5, r5, #3
   19596:	469b      	mov	fp, r3
   19598:	4b31      	ldr	r3, [pc, #196]	; (19660 <cal_removeGroup+0xe8>)
   1959a:	2790      	movs	r7, #144	; 0x90
   1959c:	469a      	mov	sl, r3
   1959e:	4b31      	ldr	r3, [pc, #196]	; (19664 <cal_removeGroup+0xec>)
   195a0:	2690      	movs	r6, #144	; 0x90
   195a2:	4699      	mov	r9, r3
   195a4:	9301      	str	r3, [sp, #4]
   195a6:	4b30      	ldr	r3, [pc, #192]	; (19668 <cal_removeGroup+0xf0>)
   195a8:	444d      	add	r5, r9
   195aa:	001c      	movs	r4, r3
   195ac:	2390      	movs	r3, #144	; 0x90
   195ae:	00db      	lsls	r3, r3, #3
   195b0:	4699      	mov	r9, r3
   195b2:	468c      	mov	ip, r1
   195b4:	004a      	lsls	r2, r1, #1
   195b6:	1852      	adds	r2, r2, r1
   195b8:	00ff      	lsls	r7, r7, #3
   195ba:	00f6      	lsls	r6, r6, #3
   195bc:	444c      	add	r4, r9
   195be:	0080      	lsls	r0, r0, #2
   195c0:	0112      	lsls	r2, r2, #4
   195c2:	445f      	add	r7, fp
   195c4:	4456      	add	r6, sl
   195c6:	9400      	str	r4, [sp, #0]
		if(logRemove[g]){
   195c8:	4643      	mov	r3, r8
   195ca:	5c5b      	ldrb	r3, [r3, r1]
   195cc:	3a30      	subs	r2, #48	; 0x30
   195ce:	2b00      	cmp	r3, #0
   195d0:	d032      	beq.n	19638 <cal_removeGroup+0xc0>
	for (ind1=indStart;ind1<(NBUFF-GROUP_SIZE);ind1++){
   195d2:	285f      	cmp	r0, #95	; 0x5f
   195d4:	d82c      	bhi.n	19630 <cal_removeGroup+0xb8>
   195d6:	465b      	mov	r3, fp
   195d8:	189b      	adds	r3, r3, r2
			XYZ[ind1][k] = XYZ[ind2][k];
   195da:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   195dc:	601c      	str	r4, [r3, #0]
   195de:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   195e0:	605c      	str	r4, [r3, #4]
   195e2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   195e4:	609c      	str	r4, [r3, #8]
   195e6:	330c      	adds	r3, #12
	for (ind1=indStart;ind1<(NBUFF-GROUP_SIZE);ind1++){
   195e8:	429f      	cmp	r7, r3
   195ea:	d1f6      	bne.n	195da <cal_removeGroup+0x62>
   195ec:	4653      	mov	r3, sl
   195ee:	189b      	adds	r3, r3, r2
			XYZ[ind1][k] = XYZ[ind2][k];
   195f0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   195f2:	601c      	str	r4, [r3, #0]
   195f4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   195f6:	605c      	str	r4, [r3, #4]
   195f8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   195fa:	609c      	str	r4, [r3, #8]
   195fc:	330c      	adds	r3, #12
	for (ind1=indStart;ind1<(NBUFF-GROUP_SIZE);ind1++){
   195fe:	42b3      	cmp	r3, r6
   19600:	d1f6      	bne.n	195f0 <cal_removeGroup+0x78>
   19602:	9b01      	ldr	r3, [sp, #4]
   19604:	189b      	adds	r3, r3, r2
			XYZ[ind1][k] = XYZ[ind2][k];
   19606:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   19608:	601c      	str	r4, [r3, #0]
   1960a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   1960c:	605c      	str	r4, [r3, #4]
   1960e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   19610:	609c      	str	r4, [r3, #8]
   19612:	330c      	adds	r3, #12
	for (ind1=indStart;ind1<(NBUFF-GROUP_SIZE);ind1++){
   19614:	429d      	cmp	r5, r3
   19616:	d1f6      	bne.n	19606 <cal_removeGroup+0x8e>
   19618:	4b13      	ldr	r3, [pc, #76]	; (19668 <cal_removeGroup+0xf0>)
   1961a:	189b      	adds	r3, r3, r2
			XYZ[ind1][k] = XYZ[ind2][k];
   1961c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   1961e:	601c      	str	r4, [r3, #0]
   19620:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   19622:	605c      	str	r4, [r3, #4]
   19624:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   19626:	609c      	str	r4, [r3, #8]
	for (ind1=indStart;ind1<(NBUFF-GROUP_SIZE);ind1++){
   19628:	9c00      	ldr	r4, [sp, #0]
   1962a:	330c      	adds	r3, #12
   1962c:	42a3      	cmp	r3, r4
   1962e:	d1f5      	bne.n	1961c <cal_removeGroup+0xa4>
			removeGroup(a1Raw, g);
			removeGroup(a2Raw, g);
			removeGroup(m1Raw, g);
			removeGroup(m2Raw, g);			
			groupsEnd--;
   19630:	2301      	movs	r3, #1
   19632:	425b      	negs	r3, r3
   19634:	4699      	mov	r9, r3
   19636:	44cc      	add	ip, r9
	for (g=groupsStart;g>0;g--){
   19638:	3901      	subs	r1, #1
   1963a:	3804      	subs	r0, #4
   1963c:	2900      	cmp	r1, #0
   1963e:	d1c3      	bne.n	195c8 <cal_removeGroup+0x50>
	}
	
	return groupsEnd;
	
	
}
   19640:	4660      	mov	r0, ip
   19642:	b003      	add	sp, #12
   19644:	bc3c      	pop	{r2, r3, r4, r5}
   19646:	4690      	mov	r8, r2
   19648:	4699      	mov	r9, r3
   1964a:	46a2      	mov	sl, r4
   1964c:	46ab      	mov	fp, r5
   1964e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	groupsEnd = groupsStart;
   19650:	2300      	movs	r3, #0
   19652:	469c      	mov	ip, r3
	return groupsEnd;
   19654:	e7f4      	b.n	19640 <cal_removeGroup+0xc8>
   19656:	46c0      	nop			; (mov r8, r8)
   19658:	3fffffff 	.word	0x3fffffff
   1965c:	20003d28 	.word	0x20003d28
   19660:	20002178 	.word	0x20002178
   19664:	20002e80 	.word	0x20002e80
   19668:	20001b30 	.word	0x20001b30

0001966c <cal_findBadGroup>:

uint8_t cal_findBadGroup(float errArr1[], float errArr2[], uint32_t *badGroup, float *badGroupDelta){
   1966c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1966e:	46de      	mov	lr, fp
   19670:	464e      	mov	r6, r9
   19672:	4645      	mov	r5, r8
   19674:	4657      	mov	r7, sl
   19676:	b5e0      	push	{r5, r6, r7, lr}
   19678:	469b      	mov	fp, r3
	uint32_t grp;
	
	uint8_t temp_errSource = 0;
	uint8_t errSource = 0;
	
	for (grp=1;grp<=cal_report.groupsAll;grp++){
   1967a:	4b22      	ldr	r3, [pc, #136]	; (19704 <cal_findBadGroup+0x98>)
uint8_t cal_findBadGroup(float errArr1[], float errArr2[], uint32_t *badGroup, float *badGroupDelta){
   1967c:	b085      	sub	sp, #20
	for (grp=1;grp<=cal_report.groupsAll;grp++){
   1967e:	68db      	ldr	r3, [r3, #12]
uint8_t cal_findBadGroup(float errArr1[], float errArr2[], uint32_t *badGroup, float *badGroupDelta){
   19680:	4680      	mov	r8, r0
   19682:	4689      	mov	r9, r1
   19684:	9203      	str	r2, [sp, #12]
	for (grp=1;grp<=cal_report.groupsAll;grp++){
   19686:	9301      	str	r3, [sp, #4]
   19688:	2b00      	cmp	r3, #0
   1968a:	d036      	beq.n	196fa <cal_findBadGroup+0x8e>
   1968c:	2300      	movs	r3, #0
   1968e:	9302      	str	r3, [sp, #8]
   19690:	4b1d      	ldr	r3, [pc, #116]	; (19708 <cal_findBadGroup+0x9c>)
   19692:	2404      	movs	r4, #4
   19694:	2601      	movs	r6, #1
   19696:	469a      	mov	sl, r3
   19698:	e015      	b.n	196c6 <cal_findBadGroup+0x5a>
		dTemp1 = errArr1[0]-errArr1[grp];
		dTemp2 = errArr2[0]-errArr2[grp];
		if (dTemp1>dTemp2){
			tempWorst = dTemp1;
   1969a:	1c3d      	adds	r5, r7, #0
			temp_errSource = 1;
   1969c:	2701      	movs	r7, #1
		}else{
			tempWorst = dTemp2;
			temp_errSource = 2;
		}
		if (tempWorst>*badGroupDelta){
   1969e:	465b      	mov	r3, fp
   196a0:	1c28      	adds	r0, r5, #0
   196a2:	6819      	ldr	r1, [r3, #0]
   196a4:	4b19      	ldr	r3, [pc, #100]	; (1970c <cal_findBadGroup+0xa0>)
   196a6:	4798      	blx	r3
   196a8:	2800      	cmp	r0, #0
   196aa:	d007      	beq.n	196bc <cal_findBadGroup+0x50>
			*badGroupDelta = tempWorst;
   196ac:	465b      	mov	r3, fp
   196ae:	601d      	str	r5, [r3, #0]
			*badGroup = grp;
   196b0:	9b03      	ldr	r3, [sp, #12]
			errSource = temp_errSource;
   196b2:	9702      	str	r7, [sp, #8]
			*badGroup = grp;
   196b4:	601e      	str	r6, [r3, #0]
   196b6:	4b13      	ldr	r3, [pc, #76]	; (19704 <cal_findBadGroup+0x98>)
   196b8:	68db      	ldr	r3, [r3, #12]
   196ba:	9301      	str	r3, [sp, #4]
	for (grp=1;grp<=cal_report.groupsAll;grp++){
   196bc:	9b01      	ldr	r3, [sp, #4]
   196be:	3601      	adds	r6, #1
   196c0:	3404      	adds	r4, #4
   196c2:	429e      	cmp	r6, r3
   196c4:	d811      	bhi.n	196ea <cal_findBadGroup+0x7e>
		dTemp1 = errArr1[0]-errArr1[grp];
   196c6:	4643      	mov	r3, r8
   196c8:	5919      	ldr	r1, [r3, r4]
   196ca:	6818      	ldr	r0, [r3, #0]
   196cc:	47d0      	blx	sl
		dTemp2 = errArr2[0]-errArr2[grp];
   196ce:	464b      	mov	r3, r9
		dTemp1 = errArr1[0]-errArr1[grp];
   196d0:	1c07      	adds	r7, r0, #0
		dTemp2 = errArr2[0]-errArr2[grp];
   196d2:	5919      	ldr	r1, [r3, r4]
   196d4:	6818      	ldr	r0, [r3, #0]
   196d6:	47d0      	blx	sl
		if (dTemp1>dTemp2){
   196d8:	4b0c      	ldr	r3, [pc, #48]	; (1970c <cal_findBadGroup+0xa0>)
		dTemp2 = errArr2[0]-errArr2[grp];
   196da:	1c05      	adds	r5, r0, #0
		if (dTemp1>dTemp2){
   196dc:	1c01      	adds	r1, r0, #0
   196de:	1c38      	adds	r0, r7, #0
   196e0:	4798      	blx	r3
   196e2:	2800      	cmp	r0, #0
   196e4:	d1d9      	bne.n	1969a <cal_findBadGroup+0x2e>
			temp_errSource = 2;
   196e6:	2702      	movs	r7, #2
   196e8:	e7d9      	b.n	1969e <cal_findBadGroup+0x32>
   196ea:	9802      	ldr	r0, [sp, #8]

	}
	return errSource;


}
   196ec:	b005      	add	sp, #20
   196ee:	bc3c      	pop	{r2, r3, r4, r5}
   196f0:	4690      	mov	r8, r2
   196f2:	4699      	mov	r9, r3
   196f4:	46a2      	mov	sl, r4
   196f6:	46ab      	mov	fp, r5
   196f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t errSource = 0;
   196fa:	2300      	movs	r3, #0
   196fc:	9302      	str	r3, [sp, #8]
   196fe:	0018      	movs	r0, r3
   19700:	e7f4      	b.n	196ec <cal_findBadGroup+0x80>
   19702:	46c0      	nop			; (mov r8, r8)
   19704:	20004870 	.word	0x20004870
   19708:	00026799 	.word	0x00026799
   1970c:	00025cf1 	.word	0x00025cf1

00019710 <cal_init>:

void cal_init(void){
	uint32_t k;
	
	
	nGroups = 0;
   19710:	2300      	movs	r3, #0
	currentGroup = 1;
   19712:	2101      	movs	r1, #1
	nGroups = 0;
   19714:	4a15      	ldr	r2, [pc, #84]	; (1976c <cal_init+0x5c>)
void cal_init(void){
   19716:	b570      	push	{r4, r5, r6, lr}
	nGroups = 0;
   19718:	6013      	str	r3, [r2, #0]
	currentGroup = 1;
   1971a:	4a15      	ldr	r2, [pc, #84]	; (19770 <cal_init+0x60>)
   1971c:	4c15      	ldr	r4, [pc, #84]	; (19774 <cal_init+0x64>)
   1971e:	7011      	strb	r1, [r2, #0]
	nPoints = 0;
   19720:	4a15      	ldr	r2, [pc, #84]	; (19778 <cal_init+0x68>)
   19722:	2100      	movs	r1, #0
   19724:	6013      	str	r3, [r2, #0]
	ind_buf = 0;
   19726:	4a15      	ldr	r2, [pc, #84]	; (1977c <cal_init+0x6c>)
   19728:	4815      	ldr	r0, [pc, #84]	; (19780 <cal_init+0x70>)
   1972a:	7013      	strb	r3, [r2, #0]
	groupPoints = 0;
   1972c:	4a15      	ldr	r2, [pc, #84]	; (19784 <cal_init+0x74>)
   1972e:	25c8      	movs	r5, #200	; 0xc8
   19730:	7013      	strb	r3, [r2, #0]
   19732:	2210      	movs	r2, #16
   19734:	47a0      	blx	r4
   19736:	2210      	movs	r2, #16
   19738:	2100      	movs	r1, #0
   1973a:	4813      	ldr	r0, [pc, #76]	; (19788 <cal_init+0x78>)
   1973c:	47a0      	blx	r4
	for (k=0;k<SHOT_SIZE;k++){
		dist_raw_buf[k] = 0;
		dist_disp_buf[k] = 0;
	}
	
	loop_distance = 0;
   1973e:	2300      	movs	r3, #0
   19740:	4a12      	ldr	r2, [pc, #72]	; (1978c <cal_init+0x7c>)
   19742:	006d      	lsls	r5, r5, #1
   19744:	6013      	str	r3, [r2, #0]
	loop_horizontal = 0;
   19746:	4a12      	ldr	r2, [pc, #72]	; (19790 <cal_init+0x80>)
   19748:	2100      	movs	r1, #0
   1974a:	6013      	str	r3, [r2, #0]
	loop_vertical = 0;
   1974c:	4a11      	ldr	r2, [pc, #68]	; (19794 <cal_init+0x84>)
   1974e:	4812      	ldr	r0, [pc, #72]	; (19798 <cal_init+0x88>)
   19750:	6013      	str	r3, [r2, #0]
	loop_azimuth = 0;
   19752:	4a12      	ldr	r2, [pc, #72]	; (1979c <cal_init+0x8c>)
   19754:	6013      	str	r3, [r2, #0]
   19756:	002a      	movs	r2, r5
   19758:	47a0      	blx	r4
   1975a:	002a      	movs	r2, r5
   1975c:	2100      	movs	r1, #0
   1975e:	4810      	ldr	r0, [pc, #64]	; (197a0 <cal_init+0x90>)
   19760:	47a0      	blx	r4
   19762:	002a      	movs	r2, r5
   19764:	2100      	movs	r1, #0
   19766:	480f      	ldr	r0, [pc, #60]	; (197a4 <cal_init+0x94>)
   19768:	47a0      	blx	r4
	for (k=0;k<NBUFF;k++){
		azimuth[k]=0;
		inclination[k]=0;
		roll[k] = 0;
	}
}
   1976a:	bd70      	pop	{r4, r5, r6, pc}
   1976c:	20003394 	.word	0x20003394
   19770:	20001310 	.word	0x20001310
   19774:	00028a1d 	.word	0x00028a1d
   19778:	20002d38 	.word	0x20002d38
   1977c:	20001311 	.word	0x20001311
   19780:	200043b0 	.word	0x200043b0
   19784:	20001312 	.word	0x20001312
   19788:	20002afc 	.word	0x20002afc
   1978c:	20002d18 	.word	0x20002d18
   19790:	20003cc4 	.word	0x20003cc4
   19794:	20002d0c 	.word	0x20002d0c
   19798:	20001fe4 	.word	0x20001fe4
   1979c:	200052e4 	.word	0x200052e4
   197a0:	20003850 	.word	0x20003850
   197a4:	20004d9c 	.word	0x20004d9c

000197a8 <cal_done>:


void cal_done(enum CALTYPE caltype){
   197a8:	b570      	push	{r4, r5, r6, lr}
	
	switch (caltype){
   197aa:	2801      	cmp	r0, #1
   197ac:	d038      	beq.n	19820 <cal_done+0x78>
   197ae:	2800      	cmp	r0, #0
   197b0:	d017      	beq.n	197e2 <cal_done+0x3a>
   197b2:	2802      	cmp	r0, #2
   197b4:	d114      	bne.n	197e0 <cal_done+0x38>
			cal_report.tempC_quick_azm = currentTempC;
			save_cal_report();
			break;
		case rangeFinder:
			// Process Calibration data
			dist_calst.dist_offset = temp_dist_offset;
   197b6:	4b25      	ldr	r3, [pc, #148]	; (1984c <cal_done+0xa4>)
   197b8:	681a      	ldr	r2, [r3, #0]
   197ba:	4b25      	ldr	r3, [pc, #148]	; (19850 <cal_done+0xa8>)
   197bc:	659a      	str	r2, [r3, #88]	; 0x58
			
			//  Fill Out data for report structure
			get_time();//  Get current time
   197be:	4b25      	ldr	r3, [pc, #148]	; (19854 <cal_done+0xac>)
   197c0:	4798      	blx	r3
			memcpy(&cal_report.time_rangeFinder,&current_time,sizeof(current_time));
   197c2:	4c25      	ldr	r4, [pc, #148]	; (19858 <cal_done+0xb0>)
   197c4:	2208      	movs	r2, #8
   197c6:	0020      	movs	r0, r4
   197c8:	4924      	ldr	r1, [pc, #144]	; (1985c <cal_done+0xb4>)
   197ca:	4b25      	ldr	r3, [pc, #148]	; (19860 <cal_done+0xb8>)
   197cc:	3068      	adds	r0, #104	; 0x68
   197ce:	4798      	blx	r3
			cal_report.tempC_rangeFinder = currentTempC;
   197d0:	4b24      	ldr	r3, [pc, #144]	; (19864 <cal_done+0xbc>)
   197d2:	681b      	ldr	r3, [r3, #0]
   197d4:	67a3      	str	r3, [r4, #120]	; 0x78
			//  Save data to EEPROM
			save_calibration();
   197d6:	4b24      	ldr	r3, [pc, #144]	; (19868 <cal_done+0xc0>)
   197d8:	4798      	blx	r3
			//  Add cal history entry
			SD_add_cal_history(rangeFinder);
   197da:	2002      	movs	r0, #2
   197dc:	4b23      	ldr	r3, [pc, #140]	; (1986c <cal_done+0xc4>)
   197de:	4798      	blx	r3
		
	}
	
	
	
};
   197e0:	bd70      	pop	{r4, r5, r6, pc}
			EEPROM_saveCalRawData(inc_azm_full);
   197e2:	2000      	movs	r0, #0
   197e4:	4b22      	ldr	r3, [pc, #136]	; (19870 <cal_done+0xc8>)
   197e6:	4798      	blx	r3
			cal_report.points = nGroups*GROUP_SIZE;
   197e8:	4b22      	ldr	r3, [pc, #136]	; (19874 <cal_done+0xcc>)
   197ea:	4c1b      	ldr	r4, [pc, #108]	; (19858 <cal_done+0xb0>)
   197ec:	681b      	ldr	r3, [r3, #0]
   197ee:	009a      	lsls	r2, r3, #2
			cal_report.groups = nGroups;
   197f0:	6063      	str	r3, [r4, #4]
			cal_report.groupsAll = nGroups;
   197f2:	60e3      	str	r3, [r4, #12]
			get_time();//  Get current time and temp
   197f4:	4b17      	ldr	r3, [pc, #92]	; (19854 <cal_done+0xac>)
			cal_report.points = nGroups*GROUP_SIZE;
   197f6:	60a2      	str	r2, [r4, #8]
			cal_report.pointsAll = nGroups*GROUP_SIZE;;
   197f8:	6122      	str	r2, [r4, #16]
			get_time();//  Get current time and temp
   197fa:	4798      	blx	r3
			memcpy(&cal_report.time_inc_azm,&current_time,sizeof(current_time));
   197fc:	0020      	movs	r0, r4
   197fe:	4e17      	ldr	r6, [pc, #92]	; (1985c <cal_done+0xb4>)
   19800:	4d17      	ldr	r5, [pc, #92]	; (19860 <cal_done+0xb8>)
   19802:	0031      	movs	r1, r6
   19804:	2208      	movs	r2, #8
   19806:	3058      	adds	r0, #88	; 0x58
   19808:	47a8      	blx	r5
			memcpy(&cal_report.time_quick_azm,&current_time,sizeof(current_time));
   1980a:	0020      	movs	r0, r4
   1980c:	2208      	movs	r2, #8
   1980e:	0031      	movs	r1, r6
   19810:	3060      	adds	r0, #96	; 0x60
   19812:	47a8      	blx	r5
			cal_report.tempC_inc_azm = currentTempC;
   19814:	4b13      	ldr	r3, [pc, #76]	; (19864 <cal_done+0xbc>)
   19816:	681b      	ldr	r3, [r3, #0]
   19818:	6723      	str	r3, [r4, #112]	; 0x70
			save_cal_report();
   1981a:	4b17      	ldr	r3, [pc, #92]	; (19878 <cal_done+0xd0>)
   1981c:	4798      	blx	r3
			break;
   1981e:	e7df      	b.n	197e0 <cal_done+0x38>
			EEPROM_saveCalRawData(azm_quick);
   19820:	2001      	movs	r0, #1
   19822:	4b13      	ldr	r3, [pc, #76]	; (19870 <cal_done+0xc8>)
   19824:	4798      	blx	r3
			cal_report.points = nPoints;
   19826:	4b15      	ldr	r3, [pc, #84]	; (1987c <cal_done+0xd4>)
   19828:	4c0b      	ldr	r4, [pc, #44]	; (19858 <cal_done+0xb0>)
   1982a:	681b      	ldr	r3, [r3, #0]
   1982c:	60a3      	str	r3, [r4, #8]
			cal_report.pointsAll = nPoints;
   1982e:	6123      	str	r3, [r4, #16]
			get_time();//  Get current time
   19830:	4b08      	ldr	r3, [pc, #32]	; (19854 <cal_done+0xac>)
   19832:	4798      	blx	r3
			memcpy(&cal_report.time_quick_azm,&current_time,sizeof(current_time));
   19834:	0020      	movs	r0, r4
   19836:	2208      	movs	r2, #8
   19838:	4908      	ldr	r1, [pc, #32]	; (1985c <cal_done+0xb4>)
   1983a:	4b09      	ldr	r3, [pc, #36]	; (19860 <cal_done+0xb8>)
   1983c:	3060      	adds	r0, #96	; 0x60
   1983e:	4798      	blx	r3
			cal_report.tempC_quick_azm = currentTempC;
   19840:	4b08      	ldr	r3, [pc, #32]	; (19864 <cal_done+0xbc>)
   19842:	681b      	ldr	r3, [r3, #0]
   19844:	6763      	str	r3, [r4, #116]	; 0x74
			save_cal_report();
   19846:	4b0c      	ldr	r3, [pc, #48]	; (19878 <cal_done+0xd0>)
   19848:	4798      	blx	r3
			break;
   1984a:	e7c9      	b.n	197e0 <cal_done+0x38>
   1984c:	2000384c 	.word	0x2000384c
   19850:	20005164 	.word	0x20005164
   19854:	0000fa61 	.word	0x0000fa61
   19858:	20004870 	.word	0x20004870
   1985c:	20002628 	.word	0x20002628
   19860:	00028999 	.word	0x00028999
   19864:	20002174 	.word	0x20002174
   19868:	000113a5 	.word	0x000113a5
   1986c:	0001468d 	.word	0x0001468d
   19870:	00010aa9 	.word	0x00010aa9
   19874:	20003394 	.word	0x20003394
   19878:	000114e1 	.word	0x000114e1
   1987c:	20002d38 	.word	0x20002d38

00019880 <cal_apply_cal_all>:

void cal_apply_cal_all(void){
   19880:	b5f0      	push	{r4, r5, r6, r7, lr}
   19882:	46de      	mov	lr, fp
   19884:	4657      	mov	r7, sl
   19886:	464e      	mov	r6, r9
   19888:	4645      	mov	r5, r8
   1988a:	b5e0      	push	{r5, r6, r7, lr}
	uint32_t i;
	//  Apply gain and offset calibration
	for (i=0;i<nPoints;i++){
   1988c:	4ba7      	ldr	r3, [pc, #668]	; (19b2c <cal_apply_cal_all+0x2ac>)
void cal_apply_cal_all(void){
   1988e:	b089      	sub	sp, #36	; 0x24
	for (i=0;i<nPoints;i++){
   19890:	681b      	ldr	r3, [r3, #0]
   19892:	9300      	str	r3, [sp, #0]
   19894:	2b00      	cmp	r3, #0
   19896:	d100      	bne.n	1989a <cal_apply_cal_all+0x1a>
   19898:	e141      	b.n	19b1e <cal_apply_cal_all+0x29e>
   1989a:	4ba5      	ldr	r3, [pc, #660]	; (19b30 <cal_apply_cal_all+0x2b0>)
   1989c:	4ca5      	ldr	r4, [pc, #660]	; (19b34 <cal_apply_cal_all+0x2b4>)
   1989e:	9303      	str	r3, [sp, #12]
   198a0:	4ba5      	ldr	r3, [pc, #660]	; (19b38 <cal_apply_cal_all+0x2b8>)
   198a2:	4fa6      	ldr	r7, [pc, #664]	; (19b3c <cal_apply_cal_all+0x2bc>)
   198a4:	9302      	str	r3, [sp, #8]
   198a6:	4ba6      	ldr	r3, [pc, #664]	; (19b40 <cal_apply_cal_all+0x2c0>)
   198a8:	4ea6      	ldr	r6, [pc, #664]	; (19b44 <cal_apply_cal_all+0x2c4>)
   198aa:	9304      	str	r3, [sp, #16]
   198ac:	4ba6      	ldr	r3, [pc, #664]	; (19b48 <cal_apply_cal_all+0x2c8>)
   198ae:	4da7      	ldr	r5, [pc, #668]	; (19b4c <cal_apply_cal_all+0x2cc>)
   198b0:	9301      	str	r3, [sp, #4]
   198b2:	4ba7      	ldr	r3, [pc, #668]	; (19b50 <cal_apply_cal_all+0x2d0>)
   198b4:	9300      	str	r3, [sp, #0]
   198b6:	4ba7      	ldr	r3, [pc, #668]	; (19b54 <cal_apply_cal_all+0x2d4>)
   198b8:	469b      	mov	fp, r3
   198ba:	2300      	movs	r3, #0
   198bc:	9305      	str	r3, [sp, #20]
   198be:	9306      	str	r3, [sp, #24]
   198c0:	4ba5      	ldr	r3, [pc, #660]	; (19b58 <cal_apply_cal_all+0x2d8>)
   198c2:	4698      	mov	r8, r3
	uint8_t i;
	
	//  Apply gain and offset calibration
	for (i=0;i<3;i++){
		//  Subtract Offset
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   198c4:	4643      	mov	r3, r8
   198c6:	6859      	ldr	r1, [r3, #4]
   198c8:	9b03      	ldr	r3, [sp, #12]
   198ca:	6818      	ldr	r0, [r3, #0]
   198cc:	47a0      	blx	r4
		//  Divide by Gain
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   198ce:	4642      	mov	r2, r8
   198d0:	6911      	ldr	r1, [r2, #16]
   198d2:	4aa2      	ldr	r2, [pc, #648]	; (19b5c <cal_apply_cal_all+0x2dc>)
   198d4:	4790      	blx	r2
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   198d6:	4641      	mov	r1, r8
   198d8:	9b03      	ldr	r3, [sp, #12]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   198da:	9a02      	ldr	r2, [sp, #8]
   198dc:	4681      	mov	r9, r0
   198de:	6010      	str	r0, [r2, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   198e0:	68c9      	ldr	r1, [r1, #12]
   198e2:	6898      	ldr	r0, [r3, #8]
   198e4:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   198e6:	4641      	mov	r1, r8
   198e8:	4a9c      	ldr	r2, [pc, #624]	; (19b5c <cal_apply_cal_all+0x2dc>)
   198ea:	6989      	ldr	r1, [r1, #24]
   198ec:	4694      	mov	ip, r2
   198ee:	47e0      	blx	ip
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   198f0:	4641      	mov	r1, r8
   198f2:	9b03      	ldr	r3, [sp, #12]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   198f4:	4682      	mov	sl, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   198f6:	6889      	ldr	r1, [r1, #8]
   198f8:	6858      	ldr	r0, [r3, #4]
   198fa:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   198fc:	4641      	mov	r1, r8
   198fe:	4a97      	ldr	r2, [pc, #604]	; (19b5c <cal_apply_cal_all+0x2dc>)
   19900:	6949      	ldr	r1, [r1, #20]
   19902:	4694      	mov	ip, r2
   19904:	47e0      	blx	ip
	}
	//  Apply axis misalignments
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19906:	4641      	mov	r1, r8
   19908:	4a95      	ldr	r2, [pc, #596]	; (19b60 <cal_apply_cal_all+0x2e0>)
   1990a:	69c9      	ldr	r1, [r1, #28]
   1990c:	4694      	mov	ip, r2
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1990e:	9007      	str	r0, [sp, #28]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19910:	4648      	mov	r0, r9
   19912:	47e0      	blx	ip
   19914:	4a93      	ldr	r2, [pc, #588]	; (19b64 <cal_apply_cal_all+0x2e4>)
   19916:	1c01      	adds	r1, r0, #0
   19918:	4694      	mov	ip, r2
   1991a:	9807      	ldr	r0, [sp, #28]
   1991c:	47e0      	blx	ip
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   1991e:	4641      	mov	r1, r8
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19920:	9a02      	ldr	r2, [sp, #8]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   19922:	4b8f      	ldr	r3, [pc, #572]	; (19b60 <cal_apply_cal_all+0x2e0>)
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19924:	6050      	str	r0, [r2, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   19926:	469c      	mov	ip, r3
   19928:	6a09      	ldr	r1, [r1, #32]
   1992a:	47e0      	blx	ip
   1992c:	4b8d      	ldr	r3, [pc, #564]	; (19b64 <cal_apply_cal_all+0x2e4>)
   1992e:	4651      	mov	r1, sl
   19930:	469c      	mov	ip, r3
   19932:	47e0      	blx	ip
   19934:	4641      	mov	r1, r8
   19936:	4b8a      	ldr	r3, [pc, #552]	; (19b60 <cal_apply_cal_all+0x2e0>)
   19938:	4682      	mov	sl, r0
   1993a:	6a49      	ldr	r1, [r1, #36]	; 0x24
   1993c:	469c      	mov	ip, r3
   1993e:	4648      	mov	r0, r9
   19940:	47e0      	blx	ip
   19942:	4b88      	ldr	r3, [pc, #544]	; (19b64 <cal_apply_cal_all+0x2e4>)
   19944:	1c01      	adds	r1, r0, #0
   19946:	469c      	mov	ip, r3
   19948:	4650      	mov	r0, sl
   1994a:	47e0      	blx	ip


	//  Apply rotation calibration
	//  Rotate vector by rotation matrix
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   1994c:	4b86      	ldr	r3, [pc, #536]	; (19b68 <cal_apply_cal_all+0x2e8>)
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   1994e:	9902      	ldr	r1, [sp, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   19950:	469c      	mov	ip, r3
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   19952:	000a      	movs	r2, r1
   19954:	6088      	str	r0, [r1, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   19956:	4885      	ldr	r0, [pc, #532]	; (19b6c <cal_apply_cal_all+0x2ec>)
   19958:	47e0      	blx	ip
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1995a:	9a04      	ldr	r2, [sp, #16]
   1995c:	6879      	ldr	r1, [r7, #4]
   1995e:	6810      	ldr	r0, [r2, #0]
   19960:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19962:	4a7e      	ldr	r2, [pc, #504]	; (19b5c <cal_apply_cal_all+0x2dc>)
   19964:	6939      	ldr	r1, [r7, #16]
   19966:	4694      	mov	ip, r2
   19968:	47e0      	blx	ip
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1996a:	9a04      	ldr	r2, [sp, #16]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1996c:	9901      	ldr	r1, [sp, #4]
   1996e:	4681      	mov	r9, r0
   19970:	6008      	str	r0, [r1, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   19972:	68f9      	ldr	r1, [r7, #12]
   19974:	6890      	ldr	r0, [r2, #8]
   19976:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19978:	4a78      	ldr	r2, [pc, #480]	; (19b5c <cal_apply_cal_all+0x2dc>)
   1997a:	69b9      	ldr	r1, [r7, #24]
   1997c:	4694      	mov	ip, r2
   1997e:	47e0      	blx	ip
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   19980:	9a04      	ldr	r2, [sp, #16]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19982:	4682      	mov	sl, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   19984:	68b9      	ldr	r1, [r7, #8]
   19986:	6850      	ldr	r0, [r2, #4]
   19988:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1998a:	4a74      	ldr	r2, [pc, #464]	; (19b5c <cal_apply_cal_all+0x2dc>)
   1998c:	6979      	ldr	r1, [r7, #20]
   1998e:	4694      	mov	ip, r2
   19990:	47e0      	blx	ip
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19992:	4a73      	ldr	r2, [pc, #460]	; (19b60 <cal_apply_cal_all+0x2e0>)
   19994:	69f9      	ldr	r1, [r7, #28]
   19996:	4694      	mov	ip, r2
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19998:	9007      	str	r0, [sp, #28]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   1999a:	4648      	mov	r0, r9
   1999c:	47e0      	blx	ip
   1999e:	4a71      	ldr	r2, [pc, #452]	; (19b64 <cal_apply_cal_all+0x2e4>)
   199a0:	1c01      	adds	r1, r0, #0
   199a2:	4694      	mov	ip, r2
   199a4:	9807      	ldr	r0, [sp, #28]
   199a6:	47e0      	blx	ip
   199a8:	9901      	ldr	r1, [sp, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   199aa:	4a6d      	ldr	r2, [pc, #436]	; (19b60 <cal_apply_cal_all+0x2e0>)
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   199ac:	6048      	str	r0, [r1, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   199ae:	4694      	mov	ip, r2
   199b0:	6a39      	ldr	r1, [r7, #32]
   199b2:	47e0      	blx	ip
   199b4:	4a6b      	ldr	r2, [pc, #428]	; (19b64 <cal_apply_cal_all+0x2e4>)
   199b6:	4651      	mov	r1, sl
   199b8:	4694      	mov	ip, r2
   199ba:	47e0      	blx	ip
   199bc:	4a68      	ldr	r2, [pc, #416]	; (19b60 <cal_apply_cal_all+0x2e0>)
   199be:	4682      	mov	sl, r0
   199c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   199c2:	4694      	mov	ip, r2
   199c4:	4648      	mov	r0, r9
   199c6:	47e0      	blx	ip
   199c8:	4a66      	ldr	r2, [pc, #408]	; (19b64 <cal_apply_cal_all+0x2e4>)
   199ca:	1c01      	adds	r1, r0, #0
   199cc:	4694      	mov	ip, r2
   199ce:	4650      	mov	r0, sl
   199d0:	47e0      	blx	ip
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   199d2:	4b65      	ldr	r3, [pc, #404]	; (19b68 <cal_apply_cal_all+0x2e8>)
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   199d4:	9901      	ldr	r1, [sp, #4]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   199d6:	469c      	mov	ip, r3
   199d8:	000a      	movs	r2, r1
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   199da:	6088      	str	r0, [r1, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   199dc:	4864      	ldr	r0, [pc, #400]	; (19b70 <cal_apply_cal_all+0x2f0>)
   199de:	47e0      	blx	ip
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   199e0:	4864      	ldr	r0, [pc, #400]	; (19b74 <cal_apply_cal_all+0x2f4>)
   199e2:	6871      	ldr	r1, [r6, #4]
   199e4:	4682      	mov	sl, r0
   199e6:	9805      	ldr	r0, [sp, #20]
   199e8:	4684      	mov	ip, r0
   199ea:	44e2      	add	sl, ip
   199ec:	4650      	mov	r0, sl
   199ee:	6800      	ldr	r0, [r0, #0]
   199f0:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   199f2:	4a5a      	ldr	r2, [pc, #360]	; (19b5c <cal_apply_cal_all+0x2dc>)
   199f4:	6931      	ldr	r1, [r6, #16]
   199f6:	4790      	blx	r2
   199f8:	9900      	ldr	r1, [sp, #0]
   199fa:	4681      	mov	r9, r0
   199fc:	6008      	str	r0, [r1, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   199fe:	4650      	mov	r0, sl
   19a00:	68f1      	ldr	r1, [r6, #12]
   19a02:	6880      	ldr	r0, [r0, #8]
   19a04:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19a06:	4a55      	ldr	r2, [pc, #340]	; (19b5c <cal_apply_cal_all+0x2dc>)
   19a08:	69b1      	ldr	r1, [r6, #24]
   19a0a:	4694      	mov	ip, r2
   19a0c:	47e0      	blx	ip
   19a0e:	9007      	str	r0, [sp, #28]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   19a10:	4650      	mov	r0, sl
   19a12:	68b1      	ldr	r1, [r6, #8]
   19a14:	6840      	ldr	r0, [r0, #4]
   19a16:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19a18:	6971      	ldr	r1, [r6, #20]
   19a1a:	4a50      	ldr	r2, [pc, #320]	; (19b5c <cal_apply_cal_all+0x2dc>)
   19a1c:	4790      	blx	r2
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19a1e:	4a50      	ldr	r2, [pc, #320]	; (19b60 <cal_apply_cal_all+0x2e0>)
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19a20:	4682      	mov	sl, r0
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19a22:	4694      	mov	ip, r2
   19a24:	69f1      	ldr	r1, [r6, #28]
   19a26:	4648      	mov	r0, r9
   19a28:	47e0      	blx	ip
   19a2a:	4a4e      	ldr	r2, [pc, #312]	; (19b64 <cal_apply_cal_all+0x2e4>)
   19a2c:	1c01      	adds	r1, r0, #0
   19a2e:	4650      	mov	r0, sl
   19a30:	4790      	blx	r2
   19a32:	9900      	ldr	r1, [sp, #0]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   19a34:	4a4a      	ldr	r2, [pc, #296]	; (19b60 <cal_apply_cal_all+0x2e0>)
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19a36:	6048      	str	r0, [r1, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   19a38:	6a31      	ldr	r1, [r6, #32]
   19a3a:	4790      	blx	r2
   19a3c:	9907      	ldr	r1, [sp, #28]
   19a3e:	4a49      	ldr	r2, [pc, #292]	; (19b64 <cal_apply_cal_all+0x2e4>)
   19a40:	4790      	blx	r2
   19a42:	6a71      	ldr	r1, [r6, #36]	; 0x24
   19a44:	4682      	mov	sl, r0
   19a46:	4a46      	ldr	r2, [pc, #280]	; (19b60 <cal_apply_cal_all+0x2e0>)
   19a48:	4648      	mov	r0, r9
   19a4a:	4790      	blx	r2
   19a4c:	4a45      	ldr	r2, [pc, #276]	; (19b64 <cal_apply_cal_all+0x2e4>)
   19a4e:	1c01      	adds	r1, r0, #0
   19a50:	4650      	mov	r0, sl
   19a52:	4790      	blx	r2
   19a54:	9900      	ldr	r1, [sp, #0]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   19a56:	4b44      	ldr	r3, [pc, #272]	; (19b68 <cal_apply_cal_all+0x2e8>)
   19a58:	000a      	movs	r2, r1
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   19a5a:	6088      	str	r0, [r1, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   19a5c:	4846      	ldr	r0, [pc, #280]	; (19b78 <cal_apply_cal_all+0x2f8>)
   19a5e:	4798      	blx	r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   19a60:	4946      	ldr	r1, [pc, #280]	; (19b7c <cal_apply_cal_all+0x2fc>)
   19a62:	9805      	ldr	r0, [sp, #20]
   19a64:	468a      	mov	sl, r1
   19a66:	4684      	mov	ip, r0
   19a68:	44e2      	add	sl, ip
   19a6a:	4650      	mov	r0, sl
   19a6c:	6869      	ldr	r1, [r5, #4]
   19a6e:	6800      	ldr	r0, [r0, #0]
   19a70:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19a72:	4a3a      	ldr	r2, [pc, #232]	; (19b5c <cal_apply_cal_all+0x2dc>)
   19a74:	6929      	ldr	r1, [r5, #16]
   19a76:	4790      	blx	r2
   19a78:	4659      	mov	r1, fp
   19a7a:	4681      	mov	r9, r0
   19a7c:	6008      	str	r0, [r1, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   19a7e:	4650      	mov	r0, sl
   19a80:	68e9      	ldr	r1, [r5, #12]
   19a82:	6880      	ldr	r0, [r0, #8]
   19a84:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19a86:	4a35      	ldr	r2, [pc, #212]	; (19b5c <cal_apply_cal_all+0x2dc>)
   19a88:	69a9      	ldr	r1, [r5, #24]
   19a8a:	4694      	mov	ip, r2
   19a8c:	47e0      	blx	ip
   19a8e:	9007      	str	r0, [sp, #28]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   19a90:	4650      	mov	r0, sl
   19a92:	68a9      	ldr	r1, [r5, #8]
   19a94:	6840      	ldr	r0, [r0, #4]
   19a96:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19a98:	6969      	ldr	r1, [r5, #20]
   19a9a:	4a30      	ldr	r2, [pc, #192]	; (19b5c <cal_apply_cal_all+0x2dc>)
   19a9c:	4790      	blx	r2
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19a9e:	4a30      	ldr	r2, [pc, #192]	; (19b60 <cal_apply_cal_all+0x2e0>)
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   19aa0:	4682      	mov	sl, r0
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19aa2:	4694      	mov	ip, r2
   19aa4:	69e9      	ldr	r1, [r5, #28]
   19aa6:	4648      	mov	r0, r9
   19aa8:	47e0      	blx	ip
   19aaa:	4a2e      	ldr	r2, [pc, #184]	; (19b64 <cal_apply_cal_all+0x2e4>)
   19aac:	1c01      	adds	r1, r0, #0
   19aae:	4650      	mov	r0, sl
   19ab0:	4790      	blx	r2
   19ab2:	4659      	mov	r1, fp
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   19ab4:	4a2a      	ldr	r2, [pc, #168]	; (19b60 <cal_apply_cal_all+0x2e0>)
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   19ab6:	6048      	str	r0, [r1, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   19ab8:	6a29      	ldr	r1, [r5, #32]
   19aba:	4790      	blx	r2
   19abc:	9907      	ldr	r1, [sp, #28]
   19abe:	4a29      	ldr	r2, [pc, #164]	; (19b64 <cal_apply_cal_all+0x2e4>)
   19ac0:	4790      	blx	r2
   19ac2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   19ac4:	4682      	mov	sl, r0
   19ac6:	4a26      	ldr	r2, [pc, #152]	; (19b60 <cal_apply_cal_all+0x2e0>)
   19ac8:	4648      	mov	r0, r9
   19aca:	4790      	blx	r2
   19acc:	4a25      	ldr	r2, [pc, #148]	; (19b64 <cal_apply_cal_all+0x2e4>)
   19ace:	1c01      	adds	r1, r0, #0
   19ad0:	4650      	mov	r0, sl
   19ad2:	4790      	blx	r2
   19ad4:	4659      	mov	r1, fp
   19ad6:	6088      	str	r0, [r1, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   19ad8:	0028      	movs	r0, r5
   19ada:	465a      	mov	r2, fp
   19adc:	3034      	adds	r0, #52	; 0x34
   19ade:	4b22      	ldr	r3, [pc, #136]	; (19b68 <cal_apply_cal_all+0x2e8>)
   19ae0:	4798      	blx	r3
   19ae2:	9b03      	ldr	r3, [sp, #12]
	for (i=0;i<nPoints;i++){
   19ae4:	9906      	ldr	r1, [sp, #24]
   19ae6:	330c      	adds	r3, #12
   19ae8:	9303      	str	r3, [sp, #12]
   19aea:	9b02      	ldr	r3, [sp, #8]
   19aec:	9a04      	ldr	r2, [sp, #16]
   19aee:	330c      	adds	r3, #12
   19af0:	9302      	str	r3, [sp, #8]
   19af2:	9b01      	ldr	r3, [sp, #4]
   19af4:	9805      	ldr	r0, [sp, #20]
   19af6:	330c      	adds	r3, #12
   19af8:	9301      	str	r3, [sp, #4]
   19afa:	9b00      	ldr	r3, [sp, #0]
   19afc:	3101      	adds	r1, #1
   19afe:	330c      	adds	r3, #12
   19b00:	9300      	str	r3, [sp, #0]
   19b02:	230c      	movs	r3, #12
   19b04:	469c      	mov	ip, r3
   19b06:	4b09      	ldr	r3, [pc, #36]	; (19b2c <cal_apply_cal_all+0x2ac>)
   19b08:	320c      	adds	r2, #12
   19b0a:	681b      	ldr	r3, [r3, #0]
   19b0c:	300c      	adds	r0, #12
   19b0e:	9106      	str	r1, [sp, #24]
   19b10:	9204      	str	r2, [sp, #16]
   19b12:	44e3      	add	fp, ip
   19b14:	9005      	str	r0, [sp, #20]
   19b16:	9307      	str	r3, [sp, #28]
   19b18:	428b      	cmp	r3, r1
   19b1a:	d900      	bls.n	19b1e <cal_apply_cal_all+0x29e>
   19b1c:	e6d2      	b.n	198c4 <cal_apply_cal_all+0x44>
}
   19b1e:	b009      	add	sp, #36	; 0x24
   19b20:	bc3c      	pop	{r2, r3, r4, r5}
   19b22:	4690      	mov	r8, r2
   19b24:	4699      	mov	r9, r3
   19b26:	46a2      	mov	sl, r4
   19b28:	46ab      	mov	fp, r5
   19b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19b2c:	20002d38 	.word	0x20002d38
   19b30:	20003d28 	.word	0x20003d28
   19b34:	00026799 	.word	0x00026799
   19b38:	200043c0 	.word	0x200043c0
   19b3c:	20005224 	.word	0x20005224
   19b40:	20002178 	.word	0x20002178
   19b44:	200051c8 	.word	0x200051c8
   19b48:	2000339c 	.word	0x2000339c
   19b4c:	20003cc8 	.word	0x20003cc8
   19b50:	200048ec 	.word	0x200048ec
   19b54:	20002634 	.word	0x20002634
   19b58:	200052e8 	.word	0x200052e8
   19b5c:	00026179 	.word	0x00026179
   19b60:	00026559 	.word	0x00026559
   19b64:	00025e55 	.word	0x00025e55
   19b68:	00012795 	.word	0x00012795
   19b6c:	2000531c 	.word	0x2000531c
   19b70:	20005258 	.word	0x20005258
   19b74:	20002e80 	.word	0x20002e80
   19b78:	200051fc 	.word	0x200051fc
   19b7c:	20001b30 	.word	0x20001b30

00019b80 <cal_azm_quick_add_point>:
bool cal_azm_quick_add_point(float m1Buf[][3], float m2Buf[][3], uint32_t index){
   19b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b82:	464e      	mov	r6, r9
   19b84:	4645      	mov	r5, r8
   19b86:	46de      	mov	lr, fp
   19b88:	4657      	mov	r7, sl
   19b8a:	4b3b      	ldr	r3, [pc, #236]	; (19c78 <cal_azm_quick_add_point+0xf8>)
   19b8c:	b5e0      	push	{r5, r6, r7, lr}
   19b8e:	469a      	mov	sl, r3
   19b90:	4b3a      	ldr	r3, [pc, #232]	; (19c7c <cal_azm_quick_add_point+0xfc>)
   19b92:	4688      	mov	r8, r1
   19b94:	469b      	mov	fp, r3
   19b96:	4b3a      	ldr	r3, [pc, #232]	; (19c80 <cal_azm_quick_add_point+0x100>)
   19b98:	0004      	movs	r4, r0
   19b9a:	2500      	movs	r5, #0
	bool isStable = true;
   19b9c:	2601      	movs	r6, #1
   19b9e:	4699      	mov	r9, r3
bool cal_azm_quick_add_point(float m1Buf[][3], float m2Buf[][3], uint32_t index){
   19ba0:	b08f      	sub	sp, #60	; 0x3c
   19ba2:	9201      	str	r2, [sp, #4]
			temp1[i] = m1Buf[i][k];		
   19ba4:	6823      	ldr	r3, [r4, #0]
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   19ba6:	2105      	movs	r1, #5
			temp1[i] = m1Buf[i][k];		
   19ba8:	9309      	str	r3, [sp, #36]	; 0x24
   19baa:	68e3      	ldr	r3, [r4, #12]
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   19bac:	a809      	add	r0, sp, #36	; 0x24
			temp1[i] = m1Buf[i][k];		
   19bae:	930a      	str	r3, [sp, #40]	; 0x28
   19bb0:	69a3      	ldr	r3, [r4, #24]
   19bb2:	930b      	str	r3, [sp, #44]	; 0x2c
   19bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19bb6:	930c      	str	r3, [sp, #48]	; 0x30
   19bb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19bba:	930d      	str	r3, [sp, #52]	; 0x34
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   19bbc:	47d0      	blx	sl
		arrMeans[k] = meanArr(temp1, NBUFFQAZM);
   19bbe:	2105      	movs	r1, #5
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   19bc0:	1c07      	adds	r7, r0, #0
		arrMeans[k] = meanArr(temp1, NBUFFQAZM);
   19bc2:	a809      	add	r0, sp, #36	; 0x24
   19bc4:	47d8      	blx	fp
   19bc6:	ab03      	add	r3, sp, #12
   19bc8:	5158      	str	r0, [r3, r5]
		isStable = isStable & (stdev3[k]<QAZM_STDEV_MIN);
   19bca:	1c38      	adds	r0, r7, #0
   19bcc:	4b2d      	ldr	r3, [pc, #180]	; (19c84 <cal_azm_quick_add_point+0x104>)
   19bce:	4798      	blx	r3
   19bd0:	4a2d      	ldr	r2, [pc, #180]	; (19c88 <cal_azm_quick_add_point+0x108>)
   19bd2:	4b2e      	ldr	r3, [pc, #184]	; (19c8c <cal_azm_quick_add_point+0x10c>)
   19bd4:	2701      	movs	r7, #1
   19bd6:	47c8      	blx	r9
   19bd8:	2800      	cmp	r0, #0
   19bda:	d100      	bne.n	19bde <cal_azm_quick_add_point+0x5e>
   19bdc:	2700      	movs	r7, #0
   19bde:	3504      	adds	r5, #4
   19be0:	403e      	ands	r6, r7
   19be2:	3404      	adds	r4, #4
	for (k=0;k<3;k++){
   19be4:	2d0c      	cmp	r5, #12
   19be6:	d1dd      	bne.n	19ba4 <cal_azm_quick_add_point+0x24>
   19be8:	4644      	mov	r4, r8
   19bea:	2500      	movs	r5, #0
	bool isStable = true;
   19bec:	2701      	movs	r7, #1
   19bee:	46b0      	mov	r8, r6
			temp1[i] = m1Buf[i][k];		
   19bf0:	6823      	ldr	r3, [r4, #0]
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   19bf2:	2105      	movs	r1, #5
			temp1[i] = m1Buf[i][k];		
   19bf4:	9309      	str	r3, [sp, #36]	; 0x24
   19bf6:	68e3      	ldr	r3, [r4, #12]
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   19bf8:	a809      	add	r0, sp, #36	; 0x24
			temp1[i] = m1Buf[i][k];		
   19bfa:	930a      	str	r3, [sp, #40]	; 0x28
   19bfc:	69a3      	ldr	r3, [r4, #24]
   19bfe:	930b      	str	r3, [sp, #44]	; 0x2c
   19c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19c02:	930c      	str	r3, [sp, #48]	; 0x30
   19c04:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19c06:	930d      	str	r3, [sp, #52]	; 0x34
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   19c08:	47d0      	blx	sl
		arrMeans[k] = meanArr(temp1, NBUFFQAZM);
   19c0a:	2105      	movs	r1, #5
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   19c0c:	1c06      	adds	r6, r0, #0
		arrMeans[k] = meanArr(temp1, NBUFFQAZM);
   19c0e:	a809      	add	r0, sp, #36	; 0x24
   19c10:	47d8      	blx	fp
   19c12:	2210      	movs	r2, #16
   19c14:	ab02      	add	r3, sp, #8
   19c16:	189b      	adds	r3, r3, r2
   19c18:	5158      	str	r0, [r3, r5]
		isStable = isStable & (stdev3[k]<QAZM_STDEV_MIN);
   19c1a:	1c30      	adds	r0, r6, #0
   19c1c:	4b19      	ldr	r3, [pc, #100]	; (19c84 <cal_azm_quick_add_point+0x104>)
   19c1e:	4798      	blx	r3
   19c20:	4a19      	ldr	r2, [pc, #100]	; (19c88 <cal_azm_quick_add_point+0x108>)
   19c22:	4b1a      	ldr	r3, [pc, #104]	; (19c8c <cal_azm_quick_add_point+0x10c>)
   19c24:	2601      	movs	r6, #1
   19c26:	47c8      	blx	r9
   19c28:	2800      	cmp	r0, #0
   19c2a:	d100      	bne.n	19c2e <cal_azm_quick_add_point+0xae>
   19c2c:	2600      	movs	r6, #0
   19c2e:	3504      	adds	r5, #4
   19c30:	4037      	ands	r7, r6
   19c32:	3404      	adds	r4, #4
	for (k=0;k<3;k++){
   19c34:	2d0c      	cmp	r5, #12
   19c36:	d1db      	bne.n	19bf0 <cal_azm_quick_add_point+0x70>
   19c38:	4646      	mov	r6, r8
	if ( isStable1 && isStable2){
   19c3a:	2e00      	cmp	r6, #0
   19c3c:	d013      	beq.n	19c66 <cal_azm_quick_add_point+0xe6>
		isStableBoth = false;
   19c3e:	2600      	movs	r6, #0
	if ( isStable1 && isStable2){
   19c40:	2f00      	cmp	r7, #0
   19c42:	d010      	beq.n	19c66 <cal_azm_quick_add_point+0xe6>
			m1Raw[index][i] = meanArr1[i];
   19c44:	9b01      	ldr	r3, [sp, #4]
   19c46:	4812      	ldr	r0, [pc, #72]	; (19c90 <cal_azm_quick_add_point+0x110>)
   19c48:	469c      	mov	ip, r3
   19c4a:	005c      	lsls	r4, r3, #1
   19c4c:	4464      	add	r4, ip
   19c4e:	00a4      	lsls	r4, r4, #2
   19c50:	220c      	movs	r2, #12
   19c52:	a903      	add	r1, sp, #12
   19c54:	4d0f      	ldr	r5, [pc, #60]	; (19c94 <cal_azm_quick_add_point+0x114>)
   19c56:	1820      	adds	r0, r4, r0
   19c58:	47a8      	blx	r5
			m2Raw[index][i] = meanArr2[i];
   19c5a:	480f      	ldr	r0, [pc, #60]	; (19c98 <cal_azm_quick_add_point+0x118>)
   19c5c:	220c      	movs	r2, #12
   19c5e:	1820      	adds	r0, r4, r0
   19c60:	a906      	add	r1, sp, #24
   19c62:	47a8      	blx	r5
		isStableBoth = true;
   19c64:	003e      	movs	r6, r7
}
   19c66:	0030      	movs	r0, r6
   19c68:	b00f      	add	sp, #60	; 0x3c
   19c6a:	bc3c      	pop	{r2, r3, r4, r5}
   19c6c:	4690      	mov	r8, r2
   19c6e:	4699      	mov	r9, r3
   19c70:	46a2      	mov	sl, r4
   19c72:	46ab      	mov	fp, r5
   19c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c76:	46c0      	nop			; (mov r8, r8)
   19c78:	00012921 	.word	0x00012921
   19c7c:	00012a05 	.word	0x00012a05
   19c80:	00025c55 	.word	0x00025c55
   19c84:	0002878d 	.word	0x0002878d
   19c88:	47ae147b 	.word	0x47ae147b
   19c8c:	3f747ae1 	.word	0x3f747ae1
   19c90:	20002e80 	.word	0x20002e80
   19c94:	00028999 	.word	0x00028999
   19c98:	20001b30 	.word	0x20001b30

00019c9c <cal_loop_test>:
void cal_loop_test(struct MEASUREMENT_FULL *meas_inst){
   19c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c9e:	46de      	mov	lr, fp
   19ca0:	4657      	mov	r7, sl
   19ca2:	464e      	mov	r6, r9
   19ca4:	4645      	mov	r5, r8
   19ca6:	b5e0      	push	{r5, r6, r7, lr}
	nPoints = nPoints+1;
   19ca8:	4a73      	ldr	r2, [pc, #460]	; (19e78 <cal_loop_test+0x1dc>)
void cal_loop_test(struct MEASUREMENT_FULL *meas_inst){
   19caa:	b08d      	sub	sp, #52	; 0x34
	nPoints = nPoints+1;
   19cac:	6813      	ldr	r3, [r2, #0]
void cal_loop_test(struct MEASUREMENT_FULL *meas_inst){
   19cae:	4682      	mov	sl, r0
	nPoints = nPoints+1;
   19cb0:	3301      	adds	r3, #1
   19cb2:	6013      	str	r3, [r2, #0]
	loop_distance = loop_distance + meas_inst->distMeters;
   19cb4:	6903      	ldr	r3, [r0, #16]
   19cb6:	4a71      	ldr	r2, [pc, #452]	; (19e7c <cal_loop_test+0x1e0>)
   19cb8:	9300      	str	r3, [sp, #0]
   19cba:	1c19      	adds	r1, r3, #0
   19cbc:	6810      	ldr	r0, [r2, #0]
   19cbe:	4a70      	ldr	r2, [pc, #448]	; (19e80 <cal_loop_test+0x1e4>)
   19cc0:	4790      	blx	r2
   19cc2:	4a6e      	ldr	r2, [pc, #440]	; (19e7c <cal_loop_test+0x1e0>)
   19cc4:	6010      	str	r0, [r2, #0]
	N1 = loop_horizontal*cos(DEG2RAD*loop_azimuth);
   19cc6:	4a6f      	ldr	r2, [pc, #444]	; (19e84 <cal_loop_test+0x1e8>)
   19cc8:	4690      	mov	r8, r2
   19cca:	4a6f      	ldr	r2, [pc, #444]	; (19e88 <cal_loop_test+0x1ec>)
   19ccc:	6810      	ldr	r0, [r2, #0]
   19cce:	47c0      	blx	r8
   19cd0:	4a6e      	ldr	r2, [pc, #440]	; (19e8c <cal_loop_test+0x1f0>)
   19cd2:	0006      	movs	r6, r0
   19cd4:	000f      	movs	r7, r1
   19cd6:	6810      	ldr	r0, [r2, #0]
   19cd8:	496d      	ldr	r1, [pc, #436]	; (19e90 <cal_loop_test+0x1f4>)
   19cda:	4a6e      	ldr	r2, [pc, #440]	; (19e94 <cal_loop_test+0x1f8>)
   19cdc:	4790      	blx	r2
   19cde:	47c0      	blx	r8
   19ce0:	4a6d      	ldr	r2, [pc, #436]	; (19e98 <cal_loop_test+0x1fc>)
   19ce2:	0004      	movs	r4, r0
   19ce4:	000d      	movs	r5, r1
   19ce6:	4790      	blx	r2
   19ce8:	000b      	movs	r3, r1
   19cea:	496c      	ldr	r1, [pc, #432]	; (19e9c <cal_loop_test+0x200>)
   19cec:	0002      	movs	r2, r0
   19cee:	4689      	mov	r9, r1
   19cf0:	0030      	movs	r0, r6
   19cf2:	0039      	movs	r1, r7
   19cf4:	47c8      	blx	r9
   19cf6:	4a6a      	ldr	r2, [pc, #424]	; (19ea0 <cal_loop_test+0x204>)
   19cf8:	4693      	mov	fp, r2
   19cfa:	4790      	blx	r2
	E1 = loop_horizontal*sin(DEG2RAD*loop_azimuth);
   19cfc:	4a69      	ldr	r2, [pc, #420]	; (19ea4 <cal_loop_test+0x208>)
	N1 = loop_horizontal*cos(DEG2RAD*loop_azimuth);
   19cfe:	900a      	str	r0, [sp, #40]	; 0x28
	E1 = loop_horizontal*sin(DEG2RAD*loop_azimuth);
   19d00:	0029      	movs	r1, r5
   19d02:	0020      	movs	r0, r4
   19d04:	4790      	blx	r2
   19d06:	000b      	movs	r3, r1
   19d08:	0002      	movs	r2, r0
   19d0a:	0039      	movs	r1, r7
   19d0c:	0030      	movs	r0, r6
   19d0e:	47c8      	blx	r9
   19d10:	47d8      	blx	fp
	D1 = loop_vertical;
   19d12:	4a65      	ldr	r2, [pc, #404]	; (19ea8 <cal_loop_test+0x20c>)
	E1 = loop_horizontal*sin(DEG2RAD*loop_azimuth);
   19d14:	900b      	str	r0, [sp, #44]	; 0x2c
	D1 = loop_vertical;
   19d16:	6812      	ldr	r2, [r2, #0]
	delta_horizontal = meas_inst->distMeters*cos(DEG2RAD*meas_inst->inclination);
   19d18:	9800      	ldr	r0, [sp, #0]
	D1 = loop_vertical;
   19d1a:	9203      	str	r2, [sp, #12]
	delta_horizontal = meas_inst->distMeters*cos(DEG2RAD*meas_inst->inclination);
   19d1c:	47c0      	blx	r8
   19d1e:	4653      	mov	r3, sl
   19d20:	0004      	movs	r4, r0
   19d22:	000d      	movs	r5, r1
   19d24:	6998      	ldr	r0, [r3, #24]
   19d26:	495a      	ldr	r1, [pc, #360]	; (19e90 <cal_loop_test+0x1f4>)
   19d28:	4b5a      	ldr	r3, [pc, #360]	; (19e94 <cal_loop_test+0x1f8>)
   19d2a:	4798      	blx	r3
   19d2c:	47c0      	blx	r8
   19d2e:	0002      	movs	r2, r0
   19d30:	000b      	movs	r3, r1
   19d32:	9200      	str	r2, [sp, #0]
   19d34:	9301      	str	r3, [sp, #4]
   19d36:	4b58      	ldr	r3, [pc, #352]	; (19e98 <cal_loop_test+0x1fc>)
   19d38:	4798      	blx	r3
   19d3a:	9404      	str	r4, [sp, #16]
   19d3c:	9505      	str	r5, [sp, #20]
   19d3e:	0002      	movs	r2, r0
   19d40:	000b      	movs	r3, r1
   19d42:	0020      	movs	r0, r4
   19d44:	0029      	movs	r1, r5
   19d46:	47c8      	blx	r9
   19d48:	47d8      	blx	fp
	dN1 = delta_horizontal*cos(DEG2RAD*meas_inst->azimuth);
   19d4a:	47c0      	blx	r8
   19d4c:	4653      	mov	r3, sl
   19d4e:	0006      	movs	r6, r0
   19d50:	000f      	movs	r7, r1
   19d52:	6958      	ldr	r0, [r3, #20]
   19d54:	494e      	ldr	r1, [pc, #312]	; (19e90 <cal_loop_test+0x1f4>)
   19d56:	4b4f      	ldr	r3, [pc, #316]	; (19e94 <cal_loop_test+0x1f8>)
   19d58:	4798      	blx	r3
   19d5a:	47c0      	blx	r8
   19d5c:	4b4e      	ldr	r3, [pc, #312]	; (19e98 <cal_loop_test+0x1fc>)
   19d5e:	0004      	movs	r4, r0
   19d60:	000d      	movs	r5, r1
   19d62:	4798      	blx	r3
	dE1 = delta_horizontal*sin(DEG2RAD*meas_inst->azimuth);
   19d64:	4b4f      	ldr	r3, [pc, #316]	; (19ea4 <cal_loop_test+0x208>)
	dN1 = delta_horizontal*cos(DEG2RAD*meas_inst->azimuth);
   19d66:	9006      	str	r0, [sp, #24]
   19d68:	9107      	str	r1, [sp, #28]
	dE1 = delta_horizontal*sin(DEG2RAD*meas_inst->azimuth);
   19d6a:	0020      	movs	r0, r4
   19d6c:	0029      	movs	r1, r5
   19d6e:	4798      	blx	r3
	dD1 = meas_inst->distMeters*sin(DEG2RAD*meas_inst->inclination);
   19d70:	4b4c      	ldr	r3, [pc, #304]	; (19ea4 <cal_loop_test+0x208>)
	dE1 = delta_horizontal*sin(DEG2RAD*meas_inst->azimuth);
   19d72:	0004      	movs	r4, r0
   19d74:	000d      	movs	r5, r1
	dD1 = meas_inst->distMeters*sin(DEG2RAD*meas_inst->inclination);
   19d76:	9800      	ldr	r0, [sp, #0]
   19d78:	9901      	ldr	r1, [sp, #4]
   19d7a:	4798      	blx	r3
	dN1 = delta_horizontal*cos(DEG2RAD*meas_inst->azimuth);
   19d7c:	9a06      	ldr	r2, [sp, #24]
   19d7e:	9b07      	ldr	r3, [sp, #28]
	dD1 = meas_inst->distMeters*sin(DEG2RAD*meas_inst->inclination);
   19d80:	9008      	str	r0, [sp, #32]
   19d82:	9109      	str	r1, [sp, #36]	; 0x24
	dN1 = delta_horizontal*cos(DEG2RAD*meas_inst->azimuth);
   19d84:	0030      	movs	r0, r6
   19d86:	0039      	movs	r1, r7
   19d88:	47c8      	blx	r9
   19d8a:	47d8      	blx	fp
	N1 = N1 + dN1;
   19d8c:	990a      	ldr	r1, [sp, #40]	; 0x28
   19d8e:	4b3c      	ldr	r3, [pc, #240]	; (19e80 <cal_loop_test+0x1e4>)
   19d90:	4798      	blx	r3
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
   19d92:	47c0      	blx	r8
	dE1 = delta_horizontal*sin(DEG2RAD*meas_inst->azimuth);
   19d94:	0022      	movs	r2, r4
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
   19d96:	9000      	str	r0, [sp, #0]
   19d98:	9101      	str	r1, [sp, #4]
	dE1 = delta_horizontal*sin(DEG2RAD*meas_inst->azimuth);
   19d9a:	002b      	movs	r3, r5
   19d9c:	0030      	movs	r0, r6
   19d9e:	0039      	movs	r1, r7
   19da0:	47c8      	blx	r9
   19da2:	47d8      	blx	fp
	E1 = E1 + dE1;
   19da4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19da6:	4b36      	ldr	r3, [pc, #216]	; (19e80 <cal_loop_test+0x1e4>)
   19da8:	4798      	blx	r3
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
   19daa:	47c0      	blx	r8
   19dac:	9c00      	ldr	r4, [sp, #0]
   19dae:	9d01      	ldr	r5, [sp, #4]
   19db0:	0006      	movs	r6, r0
   19db2:	000f      	movs	r7, r1
   19db4:	0022      	movs	r2, r4
   19db6:	002b      	movs	r3, r5
   19db8:	0020      	movs	r0, r4
   19dba:	0029      	movs	r1, r5
   19dbc:	47c8      	blx	r9
   19dbe:	0032      	movs	r2, r6
   19dc0:	0004      	movs	r4, r0
   19dc2:	000d      	movs	r5, r1
   19dc4:	003b      	movs	r3, r7
   19dc6:	0030      	movs	r0, r6
   19dc8:	0039      	movs	r1, r7
   19dca:	47c8      	blx	r9
   19dcc:	0002      	movs	r2, r0
   19dce:	000b      	movs	r3, r1
   19dd0:	0020      	movs	r0, r4
   19dd2:	0029      	movs	r1, r5
   19dd4:	4d35      	ldr	r5, [pc, #212]	; (19eac <cal_loop_test+0x210>)
   19dd6:	47a8      	blx	r5
   19dd8:	4b35      	ldr	r3, [pc, #212]	; (19eb0 <cal_loop_test+0x214>)
   19dda:	469a      	mov	sl, r3
   19ddc:	4798      	blx	r3
   19dde:	47d8      	blx	fp
   19de0:	4b29      	ldr	r3, [pc, #164]	; (19e88 <cal_loop_test+0x1ec>)
   19de2:	6018      	str	r0, [r3, #0]
	dD1 = meas_inst->distMeters*sin(DEG2RAD*meas_inst->inclination);
   19de4:	9a08      	ldr	r2, [sp, #32]
   19de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19de8:	9804      	ldr	r0, [sp, #16]
   19dea:	9905      	ldr	r1, [sp, #20]
   19dec:	47c8      	blx	r9
   19dee:	47d8      	blx	fp
	D1 = D1 + dD1;
   19df0:	9903      	ldr	r1, [sp, #12]
   19df2:	4b23      	ldr	r3, [pc, #140]	; (19e80 <cal_loop_test+0x1e4>)
   19df4:	4798      	blx	r3
	loop_vertical = D1;
   19df6:	4b2c      	ldr	r3, [pc, #176]	; (19ea8 <cal_loop_test+0x20c>)
	loop_azimuth = RAD2DEG*atan2(E1, N1);
   19df8:	0039      	movs	r1, r7
	loop_vertical = D1;
   19dfa:	6018      	str	r0, [r3, #0]
	loop_azimuth = RAD2DEG*atan2(E1, N1);
   19dfc:	4c2d      	ldr	r4, [pc, #180]	; (19eb4 <cal_loop_test+0x218>)
   19dfe:	9a00      	ldr	r2, [sp, #0]
   19e00:	9b01      	ldr	r3, [sp, #4]
   19e02:	0030      	movs	r0, r6
   19e04:	47a0      	blx	r4
   19e06:	2200      	movs	r2, #0
   19e08:	4b2b      	ldr	r3, [pc, #172]	; (19eb8 <cal_loop_test+0x21c>)
   19e0a:	47c8      	blx	r9
   19e0c:	47d8      	blx	fp
   19e0e:	4b1f      	ldr	r3, [pc, #124]	; (19e8c <cal_loop_test+0x1f0>)
   19e10:	6018      	str	r0, [r3, #0]
	loop_error = sqrt(pow(loop_horizontal,2) + pow(loop_vertical,2))/loop_distance;
   19e12:	4b1d      	ldr	r3, [pc, #116]	; (19e88 <cal_loop_test+0x1ec>)
   19e14:	6818      	ldr	r0, [r3, #0]
   19e16:	47c0      	blx	r8
   19e18:	4b23      	ldr	r3, [pc, #140]	; (19ea8 <cal_loop_test+0x20c>)
   19e1a:	0004      	movs	r4, r0
   19e1c:	6818      	ldr	r0, [r3, #0]
   19e1e:	000d      	movs	r5, r1
   19e20:	47c0      	blx	r8
   19e22:	0022      	movs	r2, r4
   19e24:	0006      	movs	r6, r0
   19e26:	000f      	movs	r7, r1
   19e28:	002b      	movs	r3, r5
   19e2a:	0020      	movs	r0, r4
   19e2c:	0029      	movs	r1, r5
   19e2e:	47c8      	blx	r9
   19e30:	0032      	movs	r2, r6
   19e32:	0004      	movs	r4, r0
   19e34:	000d      	movs	r5, r1
   19e36:	003b      	movs	r3, r7
   19e38:	0030      	movs	r0, r6
   19e3a:	0039      	movs	r1, r7
   19e3c:	47c8      	blx	r9
   19e3e:	0002      	movs	r2, r0
   19e40:	000b      	movs	r3, r1
   19e42:	0020      	movs	r0, r4
   19e44:	0029      	movs	r1, r5
   19e46:	4c19      	ldr	r4, [pc, #100]	; (19eac <cal_loop_test+0x210>)
   19e48:	47a0      	blx	r4
   19e4a:	47d0      	blx	sl
   19e4c:	4b0b      	ldr	r3, [pc, #44]	; (19e7c <cal_loop_test+0x1e0>)
   19e4e:	0004      	movs	r4, r0
   19e50:	6818      	ldr	r0, [r3, #0]
   19e52:	000d      	movs	r5, r1
   19e54:	47c0      	blx	r8
   19e56:	0002      	movs	r2, r0
   19e58:	000b      	movs	r3, r1
   19e5a:	0020      	movs	r0, r4
   19e5c:	0029      	movs	r1, r5
   19e5e:	4c17      	ldr	r4, [pc, #92]	; (19ebc <cal_loop_test+0x220>)
   19e60:	47a0      	blx	r4
   19e62:	47d8      	blx	fp
   19e64:	4b16      	ldr	r3, [pc, #88]	; (19ec0 <cal_loop_test+0x224>)
   19e66:	6018      	str	r0, [r3, #0]
}
   19e68:	b00d      	add	sp, #52	; 0x34
   19e6a:	bc3c      	pop	{r2, r3, r4, r5}
   19e6c:	4690      	mov	r8, r2
   19e6e:	4699      	mov	r9, r3
   19e70:	46a2      	mov	sl, r4
   19e72:	46ab      	mov	fp, r5
   19e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e76:	46c0      	nop			; (mov r8, r8)
   19e78:	20002d38 	.word	0x20002d38
   19e7c:	20002d18 	.word	0x20002d18
   19e80:	00025e55 	.word	0x00025e55
   19e84:	0002878d 	.word	0x0002878d
   19e88:	20003cc4 	.word	0x20003cc4
   19e8c:	200052e4 	.word	0x200052e4
   19e90:	3c8efa35 	.word	0x3c8efa35
   19e94:	00026559 	.word	0x00026559
   19e98:	00022ee9 	.word	0x00022ee9
   19e9c:	00027ac5 	.word	0x00027ac5
   19ea0:	00028831 	.word	0x00028831
   19ea4:	00022f75 	.word	0x00022f75
   19ea8:	20002d0c 	.word	0x20002d0c
   19eac:	00026c3d 	.word	0x00026c3d
   19eb0:	00023365 	.word	0x00023365
   19eb4:	00023005 	.word	0x00023005
   19eb8:	404ca5dc 	.word	0x404ca5dc
   19ebc:	0002725d 	.word	0x0002725d
   19ec0:	200051c4 	.word	0x200051c4

00019ec4 <cal_add_dist>:
void cal_add_dist(struct MEASUREMENT_FULL *meas_inst){
   19ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ec6:	4645      	mov	r5, r8
   19ec8:	46de      	mov	lr, fp
   19eca:	4657      	mov	r7, sl
   19ecc:	464e      	mov	r6, r9
   19ece:	b5e0      	push	{r5, r6, r7, lr}
	if(ind_buf>=SHOT_SIZE){
   19ed0:	4d47      	ldr	r5, [pc, #284]	; (19ff0 <cal_add_dist+0x12c>)
			dist_raw_buf[k] = dist_raw_buf[k+1];
   19ed2:	4c48      	ldr	r4, [pc, #288]	; (19ff4 <cal_add_dist+0x130>)
	if(ind_buf>=SHOT_SIZE){
   19ed4:	7829      	ldrb	r1, [r5, #0]
   19ed6:	2903      	cmp	r1, #3
   19ed8:	d907      	bls.n	19eea <cal_add_dist+0x26>
			dist_raw_buf[k] = dist_raw_buf[k+1];
   19eda:	6863      	ldr	r3, [r4, #4]
		ind_buf--;
   19edc:	3901      	subs	r1, #1
			dist_raw_buf[k] = dist_raw_buf[k+1];
   19ede:	6023      	str	r3, [r4, #0]
   19ee0:	68a3      	ldr	r3, [r4, #8]
		ind_buf--;
   19ee2:	b2c9      	uxtb	r1, r1
			dist_raw_buf[k] = dist_raw_buf[k+1];
   19ee4:	6063      	str	r3, [r4, #4]
   19ee6:	68e3      	ldr	r3, [r4, #12]
   19ee8:	60a3      	str	r3, [r4, #8]
	dist_raw_buf[ind_buf] = meas_inst->distRaw;
   19eea:	6c02      	ldr	r2, [r0, #64]	; 0x40
   19eec:	008b      	lsls	r3, r1, #2
	ind_buf++;
   19eee:	3101      	adds	r1, #1
	dist_raw_buf[ind_buf] = meas_inst->distRaw;
   19ef0:	50e2      	str	r2, [r4, r3]
	ind_buf++;
   19ef2:	b2c9      	uxtb	r1, r1
	avg_raw = meanArr(dist_raw_buf, ind_buf);
   19ef4:	4b40      	ldr	r3, [pc, #256]	; (19ff8 <cal_add_dist+0x134>)
   19ef6:	0020      	movs	r0, r4
	ind_buf++;
   19ef8:	7029      	strb	r1, [r5, #0]
	avg_raw = meanArr(dist_raw_buf, ind_buf);
   19efa:	4798      	blx	r3
	if (options.current_unit_dist == feet){
   19efc:	4b3f      	ldr	r3, [pc, #252]	; (19ffc <cal_add_dist+0x138>)
   19efe:	7a1b      	ldrb	r3, [r3, #8]
   19f00:	2b00      	cmp	r3, #0
   19f02:	d14f      	bne.n	19fa4 <cal_add_dist+0xe0>
		temp_dist_offset = (DIST_CAL_SETPOINT_FT - avg_raw)/MT2FT;
   19f04:	4b3e      	ldr	r3, [pc, #248]	; (1a000 <cal_add_dist+0x13c>)
   19f06:	4698      	mov	r8, r3
   19f08:	4798      	blx	r3
   19f0a:	4e3e      	ldr	r6, [pc, #248]	; (1a004 <cal_add_dist+0x140>)
   19f0c:	0002      	movs	r2, r0
   19f0e:	000b      	movs	r3, r1
   19f10:	2000      	movs	r0, #0
   19f12:	493d      	ldr	r1, [pc, #244]	; (1a008 <cal_add_dist+0x144>)
   19f14:	47b0      	blx	r6
   19f16:	4a3d      	ldr	r2, [pc, #244]	; (1a00c <cal_add_dist+0x148>)
   19f18:	4b3d      	ldr	r3, [pc, #244]	; (1a010 <cal_add_dist+0x14c>)
   19f1a:	4e3e      	ldr	r6, [pc, #248]	; (1a014 <cal_add_dist+0x150>)
   19f1c:	47b0      	blx	r6
   19f1e:	4b3e      	ldr	r3, [pc, #248]	; (1a018 <cal_add_dist+0x154>)
   19f20:	4699      	mov	r9, r3
   19f22:	4798      	blx	r3
   19f24:	4b3d      	ldr	r3, [pc, #244]	; (1a01c <cal_add_dist+0x158>)
	for (k=0;k<ind_buf;k++){
   19f26:	782d      	ldrb	r5, [r5, #0]
   19f28:	6018      	str	r0, [r3, #0]
   19f2a:	2d00      	cmp	r5, #0
   19f2c:	d030      	beq.n	19f90 <cal_add_dist+0xcc>
			dist_disp_buf[k] = dist_raw_buf[k]+temp_dist_offset*MT2FT;
   19f2e:	47c0      	blx	r8
   19f30:	4a36      	ldr	r2, [pc, #216]	; (1a00c <cal_add_dist+0x148>)
   19f32:	4b37      	ldr	r3, [pc, #220]	; (1a010 <cal_add_dist+0x14c>)
   19f34:	4e3a      	ldr	r6, [pc, #232]	; (1a020 <cal_add_dist+0x15c>)
   19f36:	47b0      	blx	r6
   19f38:	4b3a      	ldr	r3, [pc, #232]	; (1a024 <cal_add_dist+0x160>)
   19f3a:	0006      	movs	r6, r0
   19f3c:	000f      	movs	r7, r1
   19f3e:	469a      	mov	sl, r3
   19f40:	6820      	ldr	r0, [r4, #0]
   19f42:	47c0      	blx	r8
   19f44:	4b38      	ldr	r3, [pc, #224]	; (1a028 <cal_add_dist+0x164>)
   19f46:	0032      	movs	r2, r6
   19f48:	469b      	mov	fp, r3
   19f4a:	003b      	movs	r3, r7
   19f4c:	47d8      	blx	fp
   19f4e:	47c8      	blx	r9
   19f50:	4653      	mov	r3, sl
   19f52:	6018      	str	r0, [r3, #0]
	for (k=0;k<ind_buf;k++){
   19f54:	2d01      	cmp	r5, #1
   19f56:	d91b      	bls.n	19f90 <cal_add_dist+0xcc>
			dist_disp_buf[k] = dist_raw_buf[k]+temp_dist_offset*MT2FT;
   19f58:	6860      	ldr	r0, [r4, #4]
   19f5a:	47c0      	blx	r8
   19f5c:	003b      	movs	r3, r7
   19f5e:	0032      	movs	r2, r6
   19f60:	47d8      	blx	fp
   19f62:	47c8      	blx	r9
   19f64:	4653      	mov	r3, sl
   19f66:	6058      	str	r0, [r3, #4]
	for (k=0;k<ind_buf;k++){
   19f68:	2d02      	cmp	r5, #2
   19f6a:	d011      	beq.n	19f90 <cal_add_dist+0xcc>
			dist_disp_buf[k] = dist_raw_buf[k]+temp_dist_offset*MT2FT;
   19f6c:	68a0      	ldr	r0, [r4, #8]
   19f6e:	47c0      	blx	r8
   19f70:	003b      	movs	r3, r7
   19f72:	0032      	movs	r2, r6
   19f74:	47d8      	blx	fp
   19f76:	47c8      	blx	r9
   19f78:	4653      	mov	r3, sl
   19f7a:	6098      	str	r0, [r3, #8]
	for (k=0;k<ind_buf;k++){
   19f7c:	2d03      	cmp	r5, #3
   19f7e:	d007      	beq.n	19f90 <cal_add_dist+0xcc>
			dist_disp_buf[k] = dist_raw_buf[k]+temp_dist_offset*MT2FT;
   19f80:	68e0      	ldr	r0, [r4, #12]
   19f82:	47c0      	blx	r8
   19f84:	003b      	movs	r3, r7
   19f86:	0032      	movs	r2, r6
   19f88:	47d8      	blx	fp
   19f8a:	47c8      	blx	r9
   19f8c:	4653      	mov	r3, sl
   19f8e:	60d8      	str	r0, [r3, #12]
	groupPoints = groupPoints+1;
   19f90:	4a26      	ldr	r2, [pc, #152]	; (1a02c <cal_add_dist+0x168>)
   19f92:	7813      	ldrb	r3, [r2, #0]
   19f94:	3301      	adds	r3, #1
   19f96:	7013      	strb	r3, [r2, #0]
}
   19f98:	bc3c      	pop	{r2, r3, r4, r5}
   19f9a:	4690      	mov	r8, r2
   19f9c:	4699      	mov	r9, r3
   19f9e:	46a2      	mov	sl, r4
   19fa0:	46ab      	mov	fp, r5
   19fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_dist_offset = DIST_CAL_SETPOINT_MT-avg_raw;
   19fa4:	1c01      	adds	r1, r0, #0
   19fa6:	20fe      	movs	r0, #254	; 0xfe
   19fa8:	4b21      	ldr	r3, [pc, #132]	; (1a030 <cal_add_dist+0x16c>)
   19faa:	0580      	lsls	r0, r0, #22
   19fac:	4798      	blx	r3
   19fae:	4b1b      	ldr	r3, [pc, #108]	; (1a01c <cal_add_dist+0x158>)
	for (k=0;k<ind_buf;k++){
   19fb0:	782d      	ldrb	r5, [r5, #0]
		temp_dist_offset = DIST_CAL_SETPOINT_MT-avg_raw;
   19fb2:	1c06      	adds	r6, r0, #0
   19fb4:	6018      	str	r0, [r3, #0]
	for (k=0;k<ind_buf;k++){
   19fb6:	2d00      	cmp	r5, #0
   19fb8:	d0ea      	beq.n	19f90 <cal_add_dist+0xcc>
			dist_disp_buf[k] = dist_raw_buf[k]+temp_dist_offset;
   19fba:	4b1e      	ldr	r3, [pc, #120]	; (1a034 <cal_add_dist+0x170>)
   19fbc:	1c01      	adds	r1, r0, #0
   19fbe:	6820      	ldr	r0, [r4, #0]
   19fc0:	4698      	mov	r8, r3
   19fc2:	4798      	blx	r3
   19fc4:	4f17      	ldr	r7, [pc, #92]	; (1a024 <cal_add_dist+0x160>)
   19fc6:	6038      	str	r0, [r7, #0]
	for (k=0;k<ind_buf;k++){
   19fc8:	2d01      	cmp	r5, #1
   19fca:	d9e1      	bls.n	19f90 <cal_add_dist+0xcc>
			dist_disp_buf[k] = dist_raw_buf[k]+temp_dist_offset;
   19fcc:	1c31      	adds	r1, r6, #0
   19fce:	6860      	ldr	r0, [r4, #4]
   19fd0:	47c0      	blx	r8
   19fd2:	6078      	str	r0, [r7, #4]
	for (k=0;k<ind_buf;k++){
   19fd4:	2d02      	cmp	r5, #2
   19fd6:	d0db      	beq.n	19f90 <cal_add_dist+0xcc>
			dist_disp_buf[k] = dist_raw_buf[k]+temp_dist_offset;
   19fd8:	1c31      	adds	r1, r6, #0
   19fda:	68a0      	ldr	r0, [r4, #8]
   19fdc:	47c0      	blx	r8
   19fde:	60b8      	str	r0, [r7, #8]
	for (k=0;k<ind_buf;k++){
   19fe0:	2d03      	cmp	r5, #3
   19fe2:	d0d5      	beq.n	19f90 <cal_add_dist+0xcc>
			dist_disp_buf[k] = dist_raw_buf[k]+temp_dist_offset;
   19fe4:	1c31      	adds	r1, r6, #0
   19fe6:	68e0      	ldr	r0, [r4, #12]
   19fe8:	47c0      	blx	r8
   19fea:	60f8      	str	r0, [r7, #12]
   19fec:	e7d0      	b.n	19f90 <cal_add_dist+0xcc>
   19fee:	46c0      	nop			; (mov r8, r8)
   19ff0:	20001311 	.word	0x20001311
   19ff4:	200043b0 	.word	0x200043b0
   19ff8:	00012a05 	.word	0x00012a05
   19ffc:	20002d20 	.word	0x20002d20
   1a000:	0002878d 	.word	0x0002878d
   1a004:	00027fc5 	.word	0x00027fc5
   1a008:	40080000 	.word	0x40080000
   1a00c:	0abb44e5 	.word	0x0abb44e5
   1a010:	400a3f29 	.word	0x400a3f29
   1a014:	0002725d 	.word	0x0002725d
   1a018:	00028831 	.word	0x00028831
   1a01c:	2000384c 	.word	0x2000384c
   1a020:	00027ac5 	.word	0x00027ac5
   1a024:	20002afc 	.word	0x20002afc
   1a028:	00026c3d 	.word	0x00026c3d
   1a02c:	20001312 	.word	0x20001312
   1a030:	00026799 	.word	0x00026799
   1a034:	00025e55 	.word	0x00025e55

0001a038 <cal_inc_azm_eval>:
void cal_inc_azm_eval(void){
   1a038:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a03a:	46de      	mov	lr, fp
   1a03c:	4657      	mov	r7, sl
   1a03e:	464e      	mov	r6, r9
   1a040:	4645      	mov	r5, r8
   1a042:	b5e0      	push	{r5, r6, r7, lr}
   1a044:	4ce4      	ldr	r4, [pc, #912]	; (1a3d8 <cal_inc_azm_eval+0x3a0>)
	get_time();//  Get current time
   1a046:	4be5      	ldr	r3, [pc, #916]	; (1a3dc <cal_inc_azm_eval+0x3a4>)
void cal_inc_azm_eval(void){
   1a048:	44a5      	add	sp, r4
	get_time();//  Get current time
   1a04a:	4798      	blx	r3
	cal_report.software_version = SOFTWARE_VERSION;
   1a04c:	4ae4      	ldr	r2, [pc, #912]	; (1a3e0 <cal_inc_azm_eval+0x3a8>)
   1a04e:	4be5      	ldr	r3, [pc, #916]	; (1a3e4 <cal_inc_azm_eval+0x3ac>)
   1a050:	6013      	str	r3, [r2, #0]
	cal_report.points = nPoints;
   1a052:	4be5      	ldr	r3, [pc, #916]	; (1a3e8 <cal_inc_azm_eval+0x3b0>)
   1a054:	6819      	ldr	r1, [r3, #0]
   1a056:	469a      	mov	sl, r3
	cal_report.groups = nGroups;
   1a058:	4be4      	ldr	r3, [pc, #912]	; (1a3ec <cal_inc_azm_eval+0x3b4>)
	cal_report.points = nPoints;
   1a05a:	6091      	str	r1, [r2, #8]
	cal_report.groups = nGroups;
   1a05c:	681b      	ldr	r3, [r3, #0]
   1a05e:	6053      	str	r3, [r2, #4]
	for (p=0;p<nPoints;p++){
   1a060:	2900      	cmp	r1, #0
   1a062:	d100      	bne.n	1a066 <cal_inc_azm_eval+0x2e>
   1a064:	e1ae      	b.n	1a3c4 <cal_inc_azm_eval+0x38c>
   1a066:	4be2      	ldr	r3, [pc, #904]	; (1a3f0 <cal_inc_azm_eval+0x3b8>)
   1a068:	930a      	str	r3, [sp, #40]	; 0x28
   1a06a:	001f      	movs	r7, r3
   1a06c:	4be1      	ldr	r3, [pc, #900]	; (1a3f4 <cal_inc_azm_eval+0x3bc>)
   1a06e:	930b      	str	r3, [sp, #44]	; 0x2c
   1a070:	001e      	movs	r6, r3
   1a072:	4be1      	ldr	r3, [pc, #900]	; (1a3f8 <cal_inc_azm_eval+0x3c0>)
   1a074:	930c      	str	r3, [sp, #48]	; 0x30
   1a076:	001d      	movs	r5, r3
   1a078:	4be0      	ldr	r3, [pc, #896]	; (1a3fc <cal_inc_azm_eval+0x3c4>)
   1a07a:	930d      	str	r3, [sp, #52]	; 0x34
   1a07c:	001c      	movs	r4, r3
   1a07e:	2300      	movs	r3, #0
   1a080:	4698      	mov	r8, r3
   1a082:	4bdf      	ldr	r3, [pc, #892]	; (1a400 <cal_inc_azm_eval+0x3c8>)
   1a084:	469b      	mov	fp, r3
			temp_meas.m2Cal[i] = m2Cal[p][i];
   1a086:	239c      	movs	r3, #156	; 0x9c
   1a088:	4699      	mov	r9, r3
			temp_meas.a2Cal[i] = a2Cal[p][i];
   1a08a:	2120      	movs	r1, #32
   1a08c:	2284      	movs	r2, #132	; 0x84
			temp_meas.a1Cal[i] = a1Cal[p][i];
   1a08e:	683b      	ldr	r3, [r7, #0]
		calc_orientation(&temp_meas);
   1a090:	a816      	add	r0, sp, #88	; 0x58
			temp_meas.a1Cal[i] = a1Cal[p][i];
   1a092:	9334      	str	r3, [sp, #208]	; 0xd0
			temp_meas.a2Cal[i] = a2Cal[p][i];
   1a094:	ab0e      	add	r3, sp, #56	; 0x38
   1a096:	185b      	adds	r3, r3, r1
   1a098:	6831      	ldr	r1, [r6, #0]
   1a09a:	5099      	str	r1, [r3, r2]
			temp_meas.m1Cal[i] = m1Cal[p][i];
   1a09c:	2120      	movs	r1, #32
   1a09e:	ab0e      	add	r3, sp, #56	; 0x38
   1a0a0:	185b      	adds	r3, r3, r1
   1a0a2:	6829      	ldr	r1, [r5, #0]
   1a0a4:	320c      	adds	r2, #12
   1a0a6:	5099      	str	r1, [r3, r2]
			temp_meas.m2Cal[i] = m2Cal[p][i];
   1a0a8:	2120      	movs	r1, #32
   1a0aa:	464a      	mov	r2, r9
   1a0ac:	ab0e      	add	r3, sp, #56	; 0x38
   1a0ae:	185b      	adds	r3, r3, r1
   1a0b0:	6821      	ldr	r1, [r4, #0]
   1a0b2:	5099      	str	r1, [r3, r2]
			temp_meas.a1Cal[i] = a1Cal[p][i];
   1a0b4:	687b      	ldr	r3, [r7, #4]
			temp_meas.a2Cal[i] = a2Cal[p][i];
   1a0b6:	2120      	movs	r1, #32
			temp_meas.a1Cal[i] = a1Cal[p][i];
   1a0b8:	9335      	str	r3, [sp, #212]	; 0xd4
			temp_meas.a2Cal[i] = a2Cal[p][i];
   1a0ba:	2388      	movs	r3, #136	; 0x88
   1a0bc:	aa0e      	add	r2, sp, #56	; 0x38
   1a0be:	1852      	adds	r2, r2, r1
   1a0c0:	6871      	ldr	r1, [r6, #4]
   1a0c2:	50d1      	str	r1, [r2, r3]
			temp_meas.m1Cal[i] = m1Cal[p][i];
   1a0c4:	2120      	movs	r1, #32
   1a0c6:	aa0e      	add	r2, sp, #56	; 0x38
   1a0c8:	1852      	adds	r2, r2, r1
   1a0ca:	6869      	ldr	r1, [r5, #4]
   1a0cc:	330c      	adds	r3, #12
   1a0ce:	50d1      	str	r1, [r2, r3]
			temp_meas.m2Cal[i] = m2Cal[p][i];
   1a0d0:	2120      	movs	r1, #32
   1a0d2:	aa0e      	add	r2, sp, #56	; 0x38
   1a0d4:	1852      	adds	r2, r2, r1
   1a0d6:	6861      	ldr	r1, [r4, #4]
   1a0d8:	330c      	adds	r3, #12
   1a0da:	50d1      	str	r1, [r2, r3]
			temp_meas.a1Cal[i] = a1Cal[p][i];
   1a0dc:	2120      	movs	r1, #32
   1a0de:	aa0e      	add	r2, sp, #56	; 0x38
   1a0e0:	1852      	adds	r2, r2, r1
   1a0e2:	68b9      	ldr	r1, [r7, #8]
   1a0e4:	3b20      	subs	r3, #32
   1a0e6:	50d1      	str	r1, [r2, r3]
			temp_meas.a2Cal[i] = a2Cal[p][i];
   1a0e8:	2120      	movs	r1, #32
   1a0ea:	aa0e      	add	r2, sp, #56	; 0x38
   1a0ec:	1852      	adds	r2, r2, r1
   1a0ee:	68b1      	ldr	r1, [r6, #8]
   1a0f0:	330c      	adds	r3, #12
   1a0f2:	50d1      	str	r1, [r2, r3]
			temp_meas.m1Cal[i] = m1Cal[p][i];
   1a0f4:	2120      	movs	r1, #32
   1a0f6:	aa0e      	add	r2, sp, #56	; 0x38
   1a0f8:	1852      	adds	r2, r2, r1
   1a0fa:	68a9      	ldr	r1, [r5, #8]
   1a0fc:	330c      	adds	r3, #12
   1a0fe:	50d1      	str	r1, [r2, r3]
			temp_meas.m2Cal[i] = m2Cal[p][i];
   1a100:	2120      	movs	r1, #32
   1a102:	aa0e      	add	r2, sp, #56	; 0x38
   1a104:	1852      	adds	r2, r2, r1
   1a106:	68a1      	ldr	r1, [r4, #8]
   1a108:	330c      	adds	r3, #12
   1a10a:	50d1      	str	r1, [r2, r3]
		calc_orientation(&temp_meas);
   1a10c:	4bbd      	ldr	r3, [pc, #756]	; (1a404 <cal_inc_azm_eval+0x3cc>)
   1a10e:	4798      	blx	r3
   1a110:	4643      	mov	r3, r8
		azimuth[p] = temp_meas.azimuth;
   1a112:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1a114:	009b      	lsls	r3, r3, #2
   1a116:	9200      	str	r2, [sp, #0]
   1a118:	9900      	ldr	r1, [sp, #0]
   1a11a:	4abb      	ldr	r2, [pc, #748]	; (1a408 <cal_inc_azm_eval+0x3d0>)
   1a11c:	370c      	adds	r7, #12
   1a11e:	50d1      	str	r1, [r2, r3]
		inclination[p] = temp_meas.inclination;
   1a120:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1a122:	360c      	adds	r6, #12
   1a124:	9200      	str	r2, [sp, #0]
   1a126:	465a      	mov	r2, fp
   1a128:	9900      	ldr	r1, [sp, #0]
   1a12a:	350c      	adds	r5, #12
   1a12c:	50d1      	str	r1, [r2, r3]
		roll[p] = temp_meas.roll;
   1a12e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1a130:	340c      	adds	r4, #12
   1a132:	9200      	str	r2, [sp, #0]
   1a134:	9900      	ldr	r1, [sp, #0]
   1a136:	4ab5      	ldr	r2, [pc, #724]	; (1a40c <cal_inc_azm_eval+0x3d4>)
   1a138:	50d1      	str	r1, [r2, r3]
	for (p=0;p<nPoints;p++){
   1a13a:	2301      	movs	r3, #1
   1a13c:	469c      	mov	ip, r3
   1a13e:	4653      	mov	r3, sl
   1a140:	6819      	ldr	r1, [r3, #0]
   1a142:	44e0      	add	r8, ip
   1a144:	4541      	cmp	r1, r8
   1a146:	d8a0      	bhi.n	1a08a <cal_inc_azm_eval+0x52>
   1a148:	4ba8      	ldr	r3, [pc, #672]	; (1a3ec <cal_inc_azm_eval+0x3b4>)
   1a14a:	681b      	ldr	r3, [r3, #0]
	for (g=0;g<nGroups;g++){
   1a14c:	2b00      	cmp	r3, #0
   1a14e:	d100      	bne.n	1a152 <cal_inc_azm_eval+0x11a>
   1a150:	e133      	b.n	1a3ba <cal_inc_azm_eval+0x382>
   1a152:	aaa4      	add	r2, sp, #656	; 0x290
   1a154:	9208      	str	r2, [sp, #32]
   1a156:	4691      	mov	r9, r2
   1a158:	2203      	movs	r2, #3
   1a15a:	9204      	str	r2, [sp, #16]
   1a15c:	2200      	movs	r2, #0
   1a15e:	4baa      	ldr	r3, [pc, #680]	; (1a408 <cal_inc_azm_eval+0x3d0>)
   1a160:	9205      	str	r2, [sp, #20]
   1a162:	4698      	mov	r8, r3
   1a164:	aa0e      	add	r2, sp, #56	; 0x38
   1a166:	ab40      	add	r3, sp, #256	; 0x100
					azm_group[k] = azm_group[k]+360;
   1a168:	0014      	movs	r4, r2
   1a16a:	469b      	mov	fp, r3
   1a16c:	4fa4      	ldr	r7, [pc, #656]	; (1a400 <cal_inc_azm_eval+0x3c8>)
   1a16e:	9309      	str	r3, [sp, #36]	; 0x24
   1a170:	ae12      	add	r6, sp, #72	; 0x48
   1a172:	9702      	str	r7, [sp, #8]
			inc_group[k] = inclination[ind1];
   1a174:	9a02      	ldr	r2, [sp, #8]
			if (azm_group[k]>340){
   1a176:	49a6      	ldr	r1, [pc, #664]	; (1a410 <cal_inc_azm_eval+0x3d8>)
			inc_group[k] = inclination[ind1];
   1a178:	6813      	ldr	r3, [r2, #0]
   1a17a:	6852      	ldr	r2, [r2, #4]
   1a17c:	6023      	str	r3, [r4, #0]
   1a17e:	6062      	str	r2, [r4, #4]
			azm_group[k] = azimuth[ind1];
   1a180:	4643      	mov	r3, r8
   1a182:	4642      	mov	r2, r8
   1a184:	681b      	ldr	r3, [r3, #0]
   1a186:	6855      	ldr	r5, [r2, #4]
   1a188:	9303      	str	r3, [sp, #12]
			if (azm_group[k]>340){
   1a18a:	4aa2      	ldr	r2, [pc, #648]	; (1a414 <cal_inc_azm_eval+0x3dc>)
			azm_group[k] = azimuth[ind1];
   1a18c:	6033      	str	r3, [r6, #0]
   1a18e:	6075      	str	r5, [r6, #4]
			if (azm_group[k]>340){
   1a190:	1c28      	adds	r0, r5, #0
			azm_group[k] = azimuth[ind1];
   1a192:	1c1f      	adds	r7, r3, #0
			if (azm_group[k]>340){
   1a194:	4790      	blx	r2
   1a196:	2201      	movs	r2, #1
   1a198:	9200      	str	r2, [sp, #0]
   1a19a:	2800      	cmp	r0, #0
   1a19c:	d10d      	bne.n	1a1ba <cal_inc_azm_eval+0x182>
   1a19e:	466b      	mov	r3, sp
   1a1a0:	499b      	ldr	r1, [pc, #620]	; (1a410 <cal_inc_azm_eval+0x3d8>)
   1a1a2:	701a      	strb	r2, [r3, #0]
   1a1a4:	1c38      	adds	r0, r7, #0
   1a1a6:	4b9b      	ldr	r3, [pc, #620]	; (1a414 <cal_inc_azm_eval+0x3dc>)
   1a1a8:	4798      	blx	r3
   1a1aa:	2800      	cmp	r0, #0
   1a1ac:	d102      	bne.n	1a1b4 <cal_inc_azm_eval+0x17c>
   1a1ae:	2300      	movs	r3, #0
   1a1b0:	466a      	mov	r2, sp
   1a1b2:	7013      	strb	r3, [r2, #0]
   1a1b4:	466b      	mov	r3, sp
   1a1b6:	781b      	ldrb	r3, [r3, #0]
   1a1b8:	9300      	str	r3, [sp, #0]
			inc_group[k] = inclination[ind1];
   1a1ba:	9f02      	ldr	r7, [sp, #8]
			if (azm_group[k]>340){
   1a1bc:	4994      	ldr	r1, [pc, #592]	; (1a410 <cal_inc_azm_eval+0x3d8>)
			inc_group[k] = inclination[ind1];
   1a1be:	68bb      	ldr	r3, [r7, #8]
   1a1c0:	60a3      	str	r3, [r4, #8]
			azm_group[k] = azimuth[ind1];
   1a1c2:	4643      	mov	r3, r8
   1a1c4:	689b      	ldr	r3, [r3, #8]
   1a1c6:	9306      	str	r3, [sp, #24]
   1a1c8:	60b3      	str	r3, [r6, #8]
			if (azm_group[k]>340){
   1a1ca:	1c18      	adds	r0, r3, #0
   1a1cc:	4b91      	ldr	r3, [pc, #580]	; (1a414 <cal_inc_azm_eval+0x3dc>)
   1a1ce:	4798      	blx	r3
			inc_group[k] = inclination[ind1];
   1a1d0:	68fb      	ldr	r3, [r7, #12]
   1a1d2:	60e3      	str	r3, [r4, #12]
			azm_group[k] = azimuth[ind1];
   1a1d4:	4643      	mov	r3, r8
   1a1d6:	68db      	ldr	r3, [r3, #12]
   1a1d8:	9307      	str	r3, [sp, #28]
   1a1da:	60f3      	str	r3, [r6, #12]
			if (azm_group[k]>340){
   1a1dc:	2800      	cmp	r0, #0
   1a1de:	d108      	bne.n	1a1f2 <cal_inc_azm_eval+0x1ba>
   1a1e0:	1c18      	adds	r0, r3, #0
   1a1e2:	498b      	ldr	r1, [pc, #556]	; (1a410 <cal_inc_azm_eval+0x3d8>)
   1a1e4:	4b8b      	ldr	r3, [pc, #556]	; (1a414 <cal_inc_azm_eval+0x3dc>)
   1a1e6:	4798      	blx	r3
   1a1e8:	2800      	cmp	r0, #0
   1a1ea:	d102      	bne.n	1a1f2 <cal_inc_azm_eval+0x1ba>
		if (wrap_around){
   1a1ec:	9b00      	ldr	r3, [sp, #0]
   1a1ee:	2b00      	cmp	r3, #0
   1a1f0:	d02e      	beq.n	1a250 <cal_inc_azm_eval+0x218>
				if (azm_group[k]<20){
   1a1f2:	9f03      	ldr	r7, [sp, #12]
   1a1f4:	4988      	ldr	r1, [pc, #544]	; (1a418 <cal_inc_azm_eval+0x3e0>)
   1a1f6:	1c38      	adds	r0, r7, #0
   1a1f8:	4b88      	ldr	r3, [pc, #544]	; (1a41c <cal_inc_azm_eval+0x3e4>)
   1a1fa:	4798      	blx	r3
   1a1fc:	2800      	cmp	r0, #0
   1a1fe:	d004      	beq.n	1a20a <cal_inc_azm_eval+0x1d2>
					azm_group[k] = azm_group[k]+360;
   1a200:	4987      	ldr	r1, [pc, #540]	; (1a420 <cal_inc_azm_eval+0x3e8>)
   1a202:	1c38      	adds	r0, r7, #0
   1a204:	4b87      	ldr	r3, [pc, #540]	; (1a424 <cal_inc_azm_eval+0x3ec>)
   1a206:	4798      	blx	r3
   1a208:	6030      	str	r0, [r6, #0]
				if (azm_group[k]<20){
   1a20a:	4983      	ldr	r1, [pc, #524]	; (1a418 <cal_inc_azm_eval+0x3e0>)
   1a20c:	1c28      	adds	r0, r5, #0
   1a20e:	4b83      	ldr	r3, [pc, #524]	; (1a41c <cal_inc_azm_eval+0x3e4>)
   1a210:	4798      	blx	r3
   1a212:	2800      	cmp	r0, #0
   1a214:	d004      	beq.n	1a220 <cal_inc_azm_eval+0x1e8>
					azm_group[k] = azm_group[k]+360;
   1a216:	4982      	ldr	r1, [pc, #520]	; (1a420 <cal_inc_azm_eval+0x3e8>)
   1a218:	1c28      	adds	r0, r5, #0
   1a21a:	4b82      	ldr	r3, [pc, #520]	; (1a424 <cal_inc_azm_eval+0x3ec>)
   1a21c:	4798      	blx	r3
   1a21e:	6070      	str	r0, [r6, #4]
				if (azm_group[k]<20){
   1a220:	9d06      	ldr	r5, [sp, #24]
   1a222:	497d      	ldr	r1, [pc, #500]	; (1a418 <cal_inc_azm_eval+0x3e0>)
   1a224:	1c28      	adds	r0, r5, #0
   1a226:	4b7d      	ldr	r3, [pc, #500]	; (1a41c <cal_inc_azm_eval+0x3e4>)
   1a228:	4798      	blx	r3
   1a22a:	2800      	cmp	r0, #0
   1a22c:	d004      	beq.n	1a238 <cal_inc_azm_eval+0x200>
					azm_group[k] = azm_group[k]+360;
   1a22e:	497c      	ldr	r1, [pc, #496]	; (1a420 <cal_inc_azm_eval+0x3e8>)
   1a230:	1c28      	adds	r0, r5, #0
   1a232:	4b7c      	ldr	r3, [pc, #496]	; (1a424 <cal_inc_azm_eval+0x3ec>)
   1a234:	4798      	blx	r3
   1a236:	60b0      	str	r0, [r6, #8]
				if (azm_group[k]<20){
   1a238:	9d07      	ldr	r5, [sp, #28]
   1a23a:	4977      	ldr	r1, [pc, #476]	; (1a418 <cal_inc_azm_eval+0x3e0>)
   1a23c:	1c28      	adds	r0, r5, #0
   1a23e:	4b77      	ldr	r3, [pc, #476]	; (1a41c <cal_inc_azm_eval+0x3e4>)
   1a240:	4798      	blx	r3
   1a242:	2800      	cmp	r0, #0
   1a244:	d004      	beq.n	1a250 <cal_inc_azm_eval+0x218>
					azm_group[k] = azm_group[k]+360;
   1a246:	4976      	ldr	r1, [pc, #472]	; (1a420 <cal_inc_azm_eval+0x3e8>)
   1a248:	1c28      	adds	r0, r5, #0
   1a24a:	4b76      	ldr	r3, [pc, #472]	; (1a424 <cal_inc_azm_eval+0x3ec>)
   1a24c:	4798      	blx	r3
   1a24e:	60f0      	str	r0, [r6, #12]
		inc_avg = meanArr(inc_group, GROUP_SIZE);
   1a250:	0020      	movs	r0, r4
   1a252:	2104      	movs	r1, #4
   1a254:	4b74      	ldr	r3, [pc, #464]	; (1a428 <cal_inc_azm_eval+0x3f0>)
   1a256:	4798      	blx	r3
		azm_avg = meanArr(azm_group, GROUP_SIZE);
   1a258:	2104      	movs	r1, #4
		inc_avg = meanArr(inc_group, GROUP_SIZE);
   1a25a:	1c05      	adds	r5, r0, #0
		azm_avg = meanArr(azm_group, GROUP_SIZE);
   1a25c:	4b72      	ldr	r3, [pc, #456]	; (1a428 <cal_inc_azm_eval+0x3f0>)
   1a25e:	0030      	movs	r0, r6
   1a260:	4798      	blx	r3
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a262:	1c29      	adds	r1, r5, #0
		azm_avg = meanArr(azm_group, GROUP_SIZE);
   1a264:	1c07      	adds	r7, r0, #0
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a266:	4b71      	ldr	r3, [pc, #452]	; (1a42c <cal_inc_azm_eval+0x3f4>)
   1a268:	980e      	ldr	r0, [sp, #56]	; 0x38
   1a26a:	4798      	blx	r3
   1a26c:	465b      	mov	r3, fp
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1a26e:	4970      	ldr	r1, [pc, #448]	; (1a430 <cal_inc_azm_eval+0x3f8>)
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a270:	6018      	str	r0, [r3, #0]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1a272:	4b70      	ldr	r3, [pc, #448]	; (1a434 <cal_inc_azm_eval+0x3fc>)
   1a274:	1c28      	adds	r0, r5, #0
   1a276:	4798      	blx	r3
   1a278:	4b6f      	ldr	r3, [pc, #444]	; (1a438 <cal_inc_azm_eval+0x400>)
   1a27a:	4798      	blx	r3
   1a27c:	4b6f      	ldr	r3, [pc, #444]	; (1a43c <cal_inc_azm_eval+0x404>)
   1a27e:	4798      	blx	r3
   1a280:	4b6a      	ldr	r3, [pc, #424]	; (1a42c <cal_inc_azm_eval+0x3f4>)
   1a282:	9000      	str	r0, [sp, #0]
   1a284:	9101      	str	r1, [sp, #4]
   1a286:	9703      	str	r7, [sp, #12]
   1a288:	1c39      	adds	r1, r7, #0
   1a28a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1a28c:	4798      	blx	r3
   1a28e:	4b6a      	ldr	r3, [pc, #424]	; (1a438 <cal_inc_azm_eval+0x400>)
   1a290:	4798      	blx	r3
   1a292:	9a00      	ldr	r2, [sp, #0]
   1a294:	9b01      	ldr	r3, [sp, #4]
   1a296:	4f6a      	ldr	r7, [pc, #424]	; (1a440 <cal_inc_azm_eval+0x408>)
   1a298:	47b8      	blx	r7
   1a29a:	4b6a      	ldr	r3, [pc, #424]	; (1a444 <cal_inc_azm_eval+0x40c>)
   1a29c:	4798      	blx	r3
   1a29e:	464b      	mov	r3, r9
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a2a0:	ac0e      	add	r4, sp, #56	; 0x38
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1a2a2:	6018      	str	r0, [r3, #0]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a2a4:	1c29      	adds	r1, r5, #0
   1a2a6:	4b61      	ldr	r3, [pc, #388]	; (1a42c <cal_inc_azm_eval+0x3f4>)
   1a2a8:	6860      	ldr	r0, [r4, #4]
   1a2aa:	4798      	blx	r3
   1a2ac:	465b      	mov	r3, fp
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1a2ae:	ae12      	add	r6, sp, #72	; 0x48
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a2b0:	6058      	str	r0, [r3, #4]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1a2b2:	9903      	ldr	r1, [sp, #12]
   1a2b4:	4b5d      	ldr	r3, [pc, #372]	; (1a42c <cal_inc_azm_eval+0x3f4>)
   1a2b6:	6870      	ldr	r0, [r6, #4]
   1a2b8:	4798      	blx	r3
   1a2ba:	4b5f      	ldr	r3, [pc, #380]	; (1a438 <cal_inc_azm_eval+0x400>)
   1a2bc:	4798      	blx	r3
   1a2be:	9a00      	ldr	r2, [sp, #0]
   1a2c0:	9b01      	ldr	r3, [sp, #4]
   1a2c2:	47b8      	blx	r7
   1a2c4:	4b5f      	ldr	r3, [pc, #380]	; (1a444 <cal_inc_azm_eval+0x40c>)
   1a2c6:	4798      	blx	r3
   1a2c8:	464b      	mov	r3, r9
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a2ca:	1c29      	adds	r1, r5, #0
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1a2cc:	6058      	str	r0, [r3, #4]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a2ce:	4b57      	ldr	r3, [pc, #348]	; (1a42c <cal_inc_azm_eval+0x3f4>)
   1a2d0:	68a0      	ldr	r0, [r4, #8]
   1a2d2:	4798      	blx	r3
   1a2d4:	465b      	mov	r3, fp
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1a2d6:	9903      	ldr	r1, [sp, #12]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a2d8:	6098      	str	r0, [r3, #8]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1a2da:	4b54      	ldr	r3, [pc, #336]	; (1a42c <cal_inc_azm_eval+0x3f4>)
   1a2dc:	68b0      	ldr	r0, [r6, #8]
   1a2de:	4798      	blx	r3
   1a2e0:	4b55      	ldr	r3, [pc, #340]	; (1a438 <cal_inc_azm_eval+0x400>)
   1a2e2:	4798      	blx	r3
   1a2e4:	9a00      	ldr	r2, [sp, #0]
   1a2e6:	9b01      	ldr	r3, [sp, #4]
   1a2e8:	47b8      	blx	r7
   1a2ea:	4b56      	ldr	r3, [pc, #344]	; (1a444 <cal_inc_azm_eval+0x40c>)
   1a2ec:	4798      	blx	r3
   1a2ee:	464b      	mov	r3, r9
   1a2f0:	6098      	str	r0, [r3, #8]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a2f2:	9b04      	ldr	r3, [sp, #16]
   1a2f4:	1c29      	adds	r1, r5, #0
   1a2f6:	009b      	lsls	r3, r3, #2
   1a2f8:	9306      	str	r3, [sp, #24]
   1a2fa:	4f4c      	ldr	r7, [pc, #304]	; (1a42c <cal_inc_azm_eval+0x3f4>)
   1a2fc:	68e0      	ldr	r0, [r4, #12]
   1a2fe:	47b8      	blx	r7
   1a300:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1a302:	9d06      	ldr	r5, [sp, #24]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1a304:	9903      	ldr	r1, [sp, #12]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1a306:	5178      	str	r0, [r7, r5]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1a308:	4f48      	ldr	r7, [pc, #288]	; (1a42c <cal_inc_azm_eval+0x3f4>)
   1a30a:	68f0      	ldr	r0, [r6, #12]
   1a30c:	47b8      	blx	r7
   1a30e:	494a      	ldr	r1, [pc, #296]	; (1a438 <cal_inc_azm_eval+0x400>)
   1a310:	4788      	blx	r1
   1a312:	9a00      	ldr	r2, [sp, #0]
   1a314:	9b01      	ldr	r3, [sp, #4]
   1a316:	4f4a      	ldr	r7, [pc, #296]	; (1a440 <cal_inc_azm_eval+0x408>)
   1a318:	47b8      	blx	r7
   1a31a:	4f4a      	ldr	r7, [pc, #296]	; (1a444 <cal_inc_azm_eval+0x40c>)
   1a31c:	47b8      	blx	r7
   1a31e:	9908      	ldr	r1, [sp, #32]
   1a320:	5148      	str	r0, [r1, r5]
   1a322:	2110      	movs	r1, #16
   1a324:	468c      	mov	ip, r1
	for (g=0;g<nGroups;g++){
   1a326:	9b05      	ldr	r3, [sp, #20]
   1a328:	9a02      	ldr	r2, [sp, #8]
   1a32a:	3301      	adds	r3, #1
   1a32c:	3210      	adds	r2, #16
   1a32e:	9202      	str	r2, [sp, #8]
   1a330:	9a04      	ldr	r2, [sp, #16]
   1a332:	9305      	str	r3, [sp, #20]
   1a334:	3204      	adds	r2, #4
   1a336:	9204      	str	r2, [sp, #16]
   1a338:	4a2c      	ldr	r2, [pc, #176]	; (1a3ec <cal_inc_azm_eval+0x3b4>)
   1a33a:	44e0      	add	r8, ip
   1a33c:	6812      	ldr	r2, [r2, #0]
   1a33e:	44e3      	add	fp, ip
   1a340:	44e1      	add	r9, ip
   1a342:	9200      	str	r2, [sp, #0]
   1a344:	429a      	cmp	r2, r3
   1a346:	d900      	bls.n	1a34a <cal_inc_azm_eval+0x312>
   1a348:	e714      	b.n	1a174 <cal_inc_azm_eval+0x13c>
   1a34a:	4653      	mov	r3, sl
   1a34c:	6819      	ldr	r1, [r3, #0]
	cal_report.inc_angle_err = stdev(inc_err_array, nPoints);	 
   1a34e:	4c3e      	ldr	r4, [pc, #248]	; (1a448 <cal_inc_azm_eval+0x410>)
   1a350:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a352:	47a0      	blx	r4
   1a354:	4b22      	ldr	r3, [pc, #136]	; (1a3e0 <cal_inc_azm_eval+0x3a8>)
   1a356:	6298      	str	r0, [r3, #40]	; 0x28
	cal_report.azm_angle_err = stdev(azm_err_array, nPoints);
   1a358:	4653      	mov	r3, sl
   1a35a:	9808      	ldr	r0, [sp, #32]
   1a35c:	6819      	ldr	r1, [r3, #0]
   1a35e:	47a0      	blx	r4
   1a360:	4b1f      	ldr	r3, [pc, #124]	; (1a3e0 <cal_inc_azm_eval+0x3a8>)
	cal_report.mag_stdev_a1 = calc_mag_stdev(a1Cal);
   1a362:	4c3a      	ldr	r4, [pc, #232]	; (1a44c <cal_inc_azm_eval+0x414>)
	cal_report.azm_angle_err = stdev(azm_err_array, nPoints);
   1a364:	62d8      	str	r0, [r3, #44]	; 0x2c
	cal_report.mag_stdev_a1 = calc_mag_stdev(a1Cal);
   1a366:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a368:	47a0      	blx	r4
   1a36a:	4b1d      	ldr	r3, [pc, #116]	; (1a3e0 <cal_inc_azm_eval+0x3a8>)
   1a36c:	6318      	str	r0, [r3, #48]	; 0x30
	cal_report.mag_stdev_a2 = calc_mag_stdev(a2Cal);
   1a36e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1a370:	47a0      	blx	r4
   1a372:	4b1b      	ldr	r3, [pc, #108]	; (1a3e0 <cal_inc_azm_eval+0x3a8>)
   1a374:	6358      	str	r0, [r3, #52]	; 0x34
	cal_report.mag_stdev_m1 = calc_mag_stdev(m1Cal);
   1a376:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a378:	47a0      	blx	r4
   1a37a:	4b19      	ldr	r3, [pc, #100]	; (1a3e0 <cal_inc_azm_eval+0x3a8>)
   1a37c:	6398      	str	r0, [r3, #56]	; 0x38
	cal_report.mag_stdev_m2 = calc_mag_stdev(m2Cal);
   1a37e:	980d      	ldr	r0, [sp, #52]	; 0x34
   1a380:	47a0      	blx	r4
   1a382:	4b17      	ldr	r3, [pc, #92]	; (1a3e0 <cal_inc_azm_eval+0x3a8>)
	for (i=0;i<3;i++){
   1a384:	2400      	movs	r4, #0
   1a386:	001d      	movs	r5, r3
   1a388:	4f31      	ldr	r7, [pc, #196]	; (1a450 <cal_inc_azm_eval+0x418>)
	cal_report.mag_stdev_m2 = calc_mag_stdev(m2Cal);
   1a38a:	63d8      	str	r0, [r3, #60]	; 0x3c
		cal_report.disp_stdev_acc[i]  = calc_disp_stdev(a1Cal, a2Cal, i);
   1a38c:	b2e6      	uxtb	r6, r4
   1a38e:	0032      	movs	r2, r6
   1a390:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a392:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a394:	47b8      	blx	r7
		cal_report.disp_stdev_comp[i] = calc_disp_stdev(m1Cal, m2Cal, i);
   1a396:	0032      	movs	r2, r6
		cal_report.disp_stdev_acc[i]  = calc_disp_stdev(a1Cal, a2Cal, i);
   1a398:	6428      	str	r0, [r5, #64]	; 0x40
		cal_report.disp_stdev_comp[i] = calc_disp_stdev(m1Cal, m2Cal, i);
   1a39a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1a39c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a39e:	47b8      	blx	r7
	for (i=0;i<3;i++){
   1a3a0:	3401      	adds	r4, #1
		cal_report.disp_stdev_comp[i] = calc_disp_stdev(m1Cal, m2Cal, i);
   1a3a2:	64e8      	str	r0, [r5, #76]	; 0x4c
   1a3a4:	3504      	adds	r5, #4
	for (i=0;i<3;i++){
   1a3a6:	2c03      	cmp	r4, #3
   1a3a8:	d1f0      	bne.n	1a38c <cal_inc_azm_eval+0x354>
}
   1a3aa:	4b2a      	ldr	r3, [pc, #168]	; (1a454 <cal_inc_azm_eval+0x41c>)
   1a3ac:	449d      	add	sp, r3
   1a3ae:	bc3c      	pop	{r2, r3, r4, r5}
   1a3b0:	4690      	mov	r8, r2
   1a3b2:	4699      	mov	r9, r3
   1a3b4:	46a2      	mov	sl, r4
   1a3b6:	46ab      	mov	fp, r5
   1a3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a3ba:	ab40      	add	r3, sp, #256	; 0x100
   1a3bc:	9309      	str	r3, [sp, #36]	; 0x24
   1a3be:	aba4      	add	r3, sp, #656	; 0x290
   1a3c0:	9308      	str	r3, [sp, #32]
   1a3c2:	e7c4      	b.n	1a34e <cal_inc_azm_eval+0x316>
   1a3c4:	4a0a      	ldr	r2, [pc, #40]	; (1a3f0 <cal_inc_azm_eval+0x3b8>)
   1a3c6:	920a      	str	r2, [sp, #40]	; 0x28
   1a3c8:	4a0a      	ldr	r2, [pc, #40]	; (1a3f4 <cal_inc_azm_eval+0x3bc>)
   1a3ca:	920b      	str	r2, [sp, #44]	; 0x2c
   1a3cc:	4a0a      	ldr	r2, [pc, #40]	; (1a3f8 <cal_inc_azm_eval+0x3c0>)
   1a3ce:	920c      	str	r2, [sp, #48]	; 0x30
   1a3d0:	4a0a      	ldr	r2, [pc, #40]	; (1a3fc <cal_inc_azm_eval+0x3c4>)
   1a3d2:	920d      	str	r2, [sp, #52]	; 0x34
   1a3d4:	e6ba      	b.n	1a14c <cal_inc_azm_eval+0x114>
   1a3d6:	46c0      	nop			; (mov r8, r8)
   1a3d8:	fffffbdc 	.word	0xfffffbdc
   1a3dc:	0000fa61 	.word	0x0000fa61
   1a3e0:	20004870 	.word	0x20004870
   1a3e4:	40b00000 	.word	0x40b00000
   1a3e8:	20002d38 	.word	0x20002d38
   1a3ec:	20003394 	.word	0x20003394
   1a3f0:	200043c0 	.word	0x200043c0
   1a3f4:	2000339c 	.word	0x2000339c
   1a3f8:	200048ec 	.word	0x200048ec
   1a3fc:	20002634 	.word	0x20002634
   1a400:	20003850 	.word	0x20003850
   1a404:	00012585 	.word	0x00012585
   1a408:	20001fe4 	.word	0x20001fe4
   1a40c:	20004d9c 	.word	0x20004d9c
   1a410:	43aa0000 	.word	0x43aa0000
   1a414:	00025cf1 	.word	0x00025cf1
   1a418:	41a00000 	.word	0x41a00000
   1a41c:	00025cc9 	.word	0x00025cc9
   1a420:	43b40000 	.word	0x43b40000
   1a424:	00025e55 	.word	0x00025e55
   1a428:	00012a05 	.word	0x00012a05
   1a42c:	00026799 	.word	0x00026799
   1a430:	3c8efa35 	.word	0x3c8efa35
   1a434:	00026559 	.word	0x00026559
   1a438:	0002878d 	.word	0x0002878d
   1a43c:	00022ee9 	.word	0x00022ee9
   1a440:	00027ac5 	.word	0x00027ac5
   1a444:	00028831 	.word	0x00028831
   1a448:	00012921 	.word	0x00012921
   1a44c:	00011f5d 	.word	0x00011f5d
   1a450:	0001212d 	.word	0x0001212d
   1a454:	00000424 	.word	0x00000424

0001a458 <cal_add_datapoint>:
void cal_add_datapoint(struct MEASUREMENT_FULL *meas_inst){
   1a458:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a45a:	4657      	mov	r7, sl
   1a45c:	46de      	mov	lr, fp
   1a45e:	464e      	mov	r6, r9
   1a460:	4645      	mov	r5, r8
   1a462:	b5e0      	push	{r5, r6, r7, lr}
	if ((nGroups==0) && (ind_buf==0) && (groupPoints == 0)){
   1a464:	4f72      	ldr	r7, [pc, #456]	; (1a630 <cal_add_datapoint+0x1d8>)
void cal_add_datapoint(struct MEASUREMENT_FULL *meas_inst){
   1a466:	b08d      	sub	sp, #52	; 0x34
	if ((nGroups==0) && (ind_buf==0) && (groupPoints == 0)){
   1a468:	683b      	ldr	r3, [r7, #0]
void cal_add_datapoint(struct MEASUREMENT_FULL *meas_inst){
   1a46a:	0004      	movs	r4, r0
	if ((nGroups==0) && (ind_buf==0) && (groupPoints == 0)){
   1a46c:	2b00      	cmp	r3, #0
   1a46e:	d100      	bne.n	1a472 <cal_add_datapoint+0x1a>
   1a470:	e0af      	b.n	1a5d2 <cal_add_datapoint+0x17a>
   1a472:	4b70      	ldr	r3, [pc, #448]	; (1a634 <cal_add_datapoint+0x1dc>)
   1a474:	9301      	str	r3, [sp, #4]
   1a476:	4b70      	ldr	r3, [pc, #448]	; (1a638 <cal_add_datapoint+0x1e0>)
   1a478:	9300      	str	r3, [sp, #0]
   1a47a:	4b70      	ldr	r3, [pc, #448]	; (1a63c <cal_add_datapoint+0x1e4>)
   1a47c:	4698      	mov	r8, r3
   1a47e:	4b70      	ldr	r3, [pc, #448]	; (1a640 <cal_add_datapoint+0x1e8>)
   1a480:	469b      	mov	fp, r3
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1a482:	4d70      	ldr	r5, [pc, #448]	; (1a644 <cal_add_datapoint+0x1ec>)
   1a484:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   1a486:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1a488:	47a8      	blx	r5
   1a48a:	21fc      	movs	r1, #252	; 0xfc
   1a48c:	4e6e      	ldr	r6, [pc, #440]	; (1a648 <cal_add_datapoint+0x1f0>)
   1a48e:	0589      	lsls	r1, r1, #22
   1a490:	47b0      	blx	r6
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1a492:	6e21      	ldr	r1, [r4, #96]	; 0x60
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1a494:	9006      	str	r0, [sp, #24]
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1a496:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   1a498:	47a8      	blx	r5
   1a49a:	21fc      	movs	r1, #252	; 0xfc
   1a49c:	0589      	lsls	r1, r1, #22
   1a49e:	47b0      	blx	r6
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1a4a0:	6da1      	ldr	r1, [r4, #88]	; 0x58
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1a4a2:	9009      	str	r0, [sp, #36]	; 0x24
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1a4a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1a4a6:	47a8      	blx	r5
   1a4a8:	21fc      	movs	r1, #252	; 0xfc
   1a4aa:	0589      	lsls	r1, r1, #22
   1a4ac:	47b0      	blx	r6
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1a4ae:	6f21      	ldr	r1, [r4, #112]	; 0x70
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1a4b0:	9007      	str	r0, [sp, #28]
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1a4b2:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1a4b4:	47a8      	blx	r5
   1a4b6:	21fc      	movs	r1, #252	; 0xfc
   1a4b8:	0589      	lsls	r1, r1, #22
   1a4ba:	47b0      	blx	r6
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1a4bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1a4be:	900a      	str	r0, [sp, #40]	; 0x28
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1a4c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1a4c2:	47a8      	blx	r5
   1a4c4:	21fc      	movs	r1, #252	; 0xfc
   1a4c6:	0589      	lsls	r1, r1, #22
   1a4c8:	47b0      	blx	r6
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1a4ca:	6f61      	ldr	r1, [r4, #116]	; 0x74
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1a4cc:	9008      	str	r0, [sp, #32]
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1a4ce:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1a4d0:	47a8      	blx	r5
   1a4d2:	21fc      	movs	r1, #252	; 0xfc
   1a4d4:	0589      	lsls	r1, r1, #22
   1a4d6:	47b0      	blx	r6
	calc_theta_XY(aXYZ, &foo, &aX_ang);
   1a4d8:	4b5c      	ldr	r3, [pc, #368]	; (1a64c <cal_add_datapoint+0x1f4>)
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1a4da:	900b      	str	r0, [sp, #44]	; 0x2c
	calc_theta_XY(aXYZ, &foo, &aX_ang);
   1a4dc:	aa03      	add	r2, sp, #12
   1a4de:	a905      	add	r1, sp, #20
   1a4e0:	a806      	add	r0, sp, #24
   1a4e2:	4699      	mov	r9, r3
   1a4e4:	4798      	blx	r3
	calc_theta_XY(mXYZ, &foo, &mX_ang);
   1a4e6:	aa04      	add	r2, sp, #16
   1a4e8:	a905      	add	r1, sp, #20
   1a4ea:	a809      	add	r0, sp, #36	; 0x24
   1a4ec:	47c8      	blx	r9
	aDelta = fabs(aX_ang - aX_ang_ref);
   1a4ee:	9b03      	ldr	r3, [sp, #12]
   1a4f0:	4699      	mov	r9, r3
	mDelta = fabs(mX_ang - mX_ang_ref);
   1a4f2:	9b04      	ldr	r3, [sp, #16]
	aDelta = fabs(aX_ang - aX_ang_ref);
   1a4f4:	4648      	mov	r0, r9
	mDelta = fabs(mX_ang - mX_ang_ref);
   1a4f6:	1c1d      	adds	r5, r3, #0
	aDelta = fabs(aX_ang - aX_ang_ref);
   1a4f8:	4b55      	ldr	r3, [pc, #340]	; (1a650 <cal_add_datapoint+0x1f8>)
   1a4fa:	469a      	mov	sl, r3
   1a4fc:	4643      	mov	r3, r8
   1a4fe:	6819      	ldr	r1, [r3, #0]
   1a500:	47d0      	blx	sl
	if ((aDelta>DELTA_ANG_MIN)||(mDelta>DELTA_ANG_MIN)){
   1a502:	2182      	movs	r1, #130	; 0x82
	aDelta = fabs(aX_ang - aX_ang_ref);
   1a504:	0040      	lsls	r0, r0, #1
   1a506:	0840      	lsrs	r0, r0, #1
	if ((aDelta>DELTA_ANG_MIN)||(mDelta>DELTA_ANG_MIN)){
   1a508:	05c9      	lsls	r1, r1, #23
   1a50a:	4b52      	ldr	r3, [pc, #328]	; (1a654 <cal_add_datapoint+0x1fc>)
   1a50c:	4798      	blx	r3
   1a50e:	2800      	cmp	r0, #0
   1a510:	d10c      	bne.n	1a52c <cal_add_datapoint+0xd4>
	mDelta = fabs(mX_ang - mX_ang_ref);
   1a512:	465b      	mov	r3, fp
   1a514:	1c28      	adds	r0, r5, #0
   1a516:	6819      	ldr	r1, [r3, #0]
   1a518:	47d0      	blx	sl
	if ((aDelta>DELTA_ANG_MIN)||(mDelta>DELTA_ANG_MIN)){
   1a51a:	2182      	movs	r1, #130	; 0x82
	mDelta = fabs(mX_ang - mX_ang_ref);
   1a51c:	0040      	lsls	r0, r0, #1
   1a51e:	0840      	lsrs	r0, r0, #1
	if ((aDelta>DELTA_ANG_MIN)||(mDelta>DELTA_ANG_MIN)){
   1a520:	05c9      	lsls	r1, r1, #23
   1a522:	4b4c      	ldr	r3, [pc, #304]	; (1a654 <cal_add_datapoint+0x1fc>)
   1a524:	4798      	blx	r3
   1a526:	2800      	cmp	r0, #0
   1a528:	d100      	bne.n	1a52c <cal_add_datapoint+0xd4>
   1a52a:	e070      	b.n	1a60e <cal_add_datapoint+0x1b6>
		if (groupPoints>= GROUP_SIZE){
   1a52c:	9b00      	ldr	r3, [sp, #0]
   1a52e:	781b      	ldrb	r3, [r3, #0]
   1a530:	2b03      	cmp	r3, #3
   1a532:	d862      	bhi.n	1a5fa <cal_add_datapoint+0x1a2>
   1a534:	4b48      	ldr	r3, [pc, #288]	; (1a658 <cal_add_datapoint+0x200>)
   1a536:	781a      	ldrb	r2, [r3, #0]
		aX_ang_ref = aX_ang;
   1a538:	4643      	mov	r3, r8
   1a53a:	4649      	mov	r1, r9
   1a53c:	6019      	str	r1, [r3, #0]
		mX_ang_ref = mX_ang;
   1a53e:	465b      	mov	r3, fp
   1a540:	601d      	str	r5, [r3, #0]
   1a542:	2301      	movs	r3, #1
   1a544:	2001      	movs	r0, #1
   1a546:	469c      	mov	ip, r3
   1a548:	2100      	movs	r1, #0
	ind_stack = (currentGroup-1)*GROUP_SIZE+ind_buf;
   1a54a:	1e53      	subs	r3, r2, #1
   1a54c:	009b      	lsls	r3, r3, #2
   1a54e:	185b      	adds	r3, r3, r1
   1a550:	2b63      	cmp	r3, #99	; 0x63
   1a552:	d900      	bls.n	1a556 <cal_add_datapoint+0xfe>
   1a554:	2363      	movs	r3, #99	; 0x63
		a1Raw[ind_stack][j] = meas_inst->a1Raw[j];
   1a556:	4941      	ldr	r1, [pc, #260]	; (1a65c <cal_add_datapoint+0x204>)
   1a558:	6ca5      	ldr	r5, [r4, #72]	; 0x48
   1a55a:	468a      	mov	sl, r1
   1a55c:	0059      	lsls	r1, r3, #1
   1a55e:	18cb      	adds	r3, r1, r3
   1a560:	4651      	mov	r1, sl
   1a562:	009b      	lsls	r3, r3, #2
   1a564:	505d      	str	r5, [r3, r1]
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   1a566:	6d65      	ldr	r5, [r4, #84]	; 0x54
   1a568:	493d      	ldr	r1, [pc, #244]	; (1a660 <cal_add_datapoint+0x208>)
		a1Raw[ind_stack][j] = meas_inst->a1Raw[j];
   1a56a:	449a      	add	sl, r3
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   1a56c:	50cd      	str	r5, [r1, r3]
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   1a56e:	6e25      	ldr	r5, [r4, #96]	; 0x60
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   1a570:	4689      	mov	r9, r1
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   1a572:	493c      	ldr	r1, [pc, #240]	; (1a664 <cal_add_datapoint+0x20c>)
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   1a574:	4499      	add	r9, r3
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   1a576:	50cd      	str	r5, [r1, r3]
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   1a578:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   1a57a:	4688      	mov	r8, r1
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   1a57c:	493a      	ldr	r1, [pc, #232]	; (1a668 <cal_add_datapoint+0x210>)
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   1a57e:	4498      	add	r8, r3
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   1a580:	50cd      	str	r5, [r1, r3]
		a1Raw[ind_stack][j] = meas_inst->a1Raw[j];
   1a582:	4655      	mov	r5, sl
   1a584:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   1a586:	18cb      	adds	r3, r1, r3
		a1Raw[ind_stack][j] = meas_inst->a1Raw[j];
   1a588:	606e      	str	r6, [r5, #4]
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   1a58a:	464d      	mov	r5, r9
   1a58c:	6da6      	ldr	r6, [r4, #88]	; 0x58
   1a58e:	606e      	str	r6, [r5, #4]
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   1a590:	4645      	mov	r5, r8
   1a592:	6e66      	ldr	r6, [r4, #100]	; 0x64
   1a594:	606e      	str	r6, [r5, #4]
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   1a596:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1a598:	6059      	str	r1, [r3, #4]
		a1Raw[ind_stack][j] = meas_inst->a1Raw[j];
   1a59a:	4651      	mov	r1, sl
   1a59c:	6d25      	ldr	r5, [r4, #80]	; 0x50
   1a59e:	608d      	str	r5, [r1, #8]
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   1a5a0:	4649      	mov	r1, r9
   1a5a2:	6de5      	ldr	r5, [r4, #92]	; 0x5c
   1a5a4:	608d      	str	r5, [r1, #8]
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   1a5a6:	4641      	mov	r1, r8
   1a5a8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
   1a5aa:	608d      	str	r5, [r1, #8]
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   1a5ac:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1a5ae:	6099      	str	r1, [r3, #8]
	groupPoints++;
   1a5b0:	4661      	mov	r1, ip
   1a5b2:	9b00      	ldr	r3, [sp, #0]
   1a5b4:	7019      	strb	r1, [r3, #0]
	ind_buf++;
   1a5b6:	9901      	ldr	r1, [sp, #4]
   1a5b8:	7008      	strb	r0, [r1, #0]
	if (ind_buf>= GROUP_SIZE){
   1a5ba:	2803      	cmp	r0, #3
   1a5bc:	d902      	bls.n	1a5c4 <cal_add_datapoint+0x16c>
		ind_buf = 0; //  Roll over
   1a5be:	2300      	movs	r3, #0
		nGroups = currentGroup;
   1a5c0:	603a      	str	r2, [r7, #0]
		ind_buf = 0; //  Roll over
   1a5c2:	700b      	strb	r3, [r1, #0]
}
   1a5c4:	b00d      	add	sp, #52	; 0x34
   1a5c6:	bc3c      	pop	{r2, r3, r4, r5}
   1a5c8:	4690      	mov	r8, r2
   1a5ca:	4699      	mov	r9, r3
   1a5cc:	46a2      	mov	sl, r4
   1a5ce:	46ab      	mov	fp, r5
   1a5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((nGroups==0) && (ind_buf==0) && (groupPoints == 0)){
   1a5d2:	4b18      	ldr	r3, [pc, #96]	; (1a634 <cal_add_datapoint+0x1dc>)
   1a5d4:	9301      	str	r3, [sp, #4]
   1a5d6:	781b      	ldrb	r3, [r3, #0]
   1a5d8:	2b00      	cmp	r3, #0
   1a5da:	d000      	beq.n	1a5de <cal_add_datapoint+0x186>
   1a5dc:	e74b      	b.n	1a476 <cal_add_datapoint+0x1e>
   1a5de:	4b16      	ldr	r3, [pc, #88]	; (1a638 <cal_add_datapoint+0x1e0>)
   1a5e0:	9300      	str	r3, [sp, #0]
   1a5e2:	781b      	ldrb	r3, [r3, #0]
   1a5e4:	2b00      	cmp	r3, #0
   1a5e6:	d11e      	bne.n	1a626 <cal_add_datapoint+0x1ce>
		aX_ang_ref = 200;//  Ensures delta will fail on first iteration
   1a5e8:	4b14      	ldr	r3, [pc, #80]	; (1a63c <cal_add_datapoint+0x1e4>)
   1a5ea:	4698      	mov	r8, r3
   1a5ec:	4642      	mov	r2, r8
   1a5ee:	4b1f      	ldr	r3, [pc, #124]	; (1a66c <cal_add_datapoint+0x214>)
   1a5f0:	6013      	str	r3, [r2, #0]
		mX_ang_ref = 200;//  Ensures delta will fail on first iteration
   1a5f2:	4a13      	ldr	r2, [pc, #76]	; (1a640 <cal_add_datapoint+0x1e8>)
   1a5f4:	4693      	mov	fp, r2
   1a5f6:	6013      	str	r3, [r2, #0]
   1a5f8:	e743      	b.n	1a482 <cal_add_datapoint+0x2a>
			currentGroup++;
   1a5fa:	4b17      	ldr	r3, [pc, #92]	; (1a658 <cal_add_datapoint+0x200>)
			nPoints =nGroups*GROUP_SIZE;
   1a5fc:	491c      	ldr	r1, [pc, #112]	; (1a670 <cal_add_datapoint+0x218>)
			currentGroup++;
   1a5fe:	781a      	ldrb	r2, [r3, #0]
   1a600:	3201      	adds	r2, #1
   1a602:	b2d2      	uxtb	r2, r2
   1a604:	701a      	strb	r2, [r3, #0]
			nPoints =nGroups*GROUP_SIZE;
   1a606:	683b      	ldr	r3, [r7, #0]
   1a608:	009b      	lsls	r3, r3, #2
   1a60a:	600b      	str	r3, [r1, #0]
   1a60c:	e794      	b.n	1a538 <cal_add_datapoint+0xe0>
   1a60e:	9b01      	ldr	r3, [sp, #4]
   1a610:	7819      	ldrb	r1, [r3, #0]
   1a612:	9b00      	ldr	r3, [sp, #0]
   1a614:	1c48      	adds	r0, r1, #1
   1a616:	781b      	ldrb	r3, [r3, #0]
   1a618:	b2c0      	uxtb	r0, r0
   1a61a:	3301      	adds	r3, #1
   1a61c:	b2db      	uxtb	r3, r3
   1a61e:	469c      	mov	ip, r3
   1a620:	4b0d      	ldr	r3, [pc, #52]	; (1a658 <cal_add_datapoint+0x200>)
   1a622:	781a      	ldrb	r2, [r3, #0]
   1a624:	e791      	b.n	1a54a <cal_add_datapoint+0xf2>
   1a626:	4b05      	ldr	r3, [pc, #20]	; (1a63c <cal_add_datapoint+0x1e4>)
   1a628:	4698      	mov	r8, r3
   1a62a:	4b05      	ldr	r3, [pc, #20]	; (1a640 <cal_add_datapoint+0x1e8>)
   1a62c:	469b      	mov	fp, r3
   1a62e:	e728      	b.n	1a482 <cal_add_datapoint+0x2a>
   1a630:	20003394 	.word	0x20003394
   1a634:	20001311 	.word	0x20001311
   1a638:	20001312 	.word	0x20001312
   1a63c:	20000d20 	.word	0x20000d20
   1a640:	20000d24 	.word	0x20000d24
   1a644:	00025e55 	.word	0x00025e55
   1a648:	00026559 	.word	0x00026559
   1a64c:	0001284d 	.word	0x0001284d
   1a650:	00026799 	.word	0x00026799
   1a654:	00025cf1 	.word	0x00025cf1
   1a658:	20001310 	.word	0x20001310
   1a65c:	20003d28 	.word	0x20003d28
   1a660:	20002178 	.word	0x20002178
   1a664:	20002e80 	.word	0x20002e80
   1a668:	20001b30 	.word	0x20001b30
   1a66c:	43480000 	.word	0x43480000
   1a670:	20002d38 	.word	0x20002d38

0001a674 <cal_axis_misalignments>:
void cal_axis_misalignments(float XYZ[NBUFF][3], struct INST_CAL *cal_struct){
   1a674:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a676:	46de      	mov	lr, fp
   1a678:	4657      	mov	r7, sl
   1a67a:	464e      	mov	r6, r9
   1a67c:	4645      	mov	r5, r8
   1a67e:	b5e0      	push	{r5, r6, r7, lr}
	for (k=0;k<nPoints;k++){
   1a680:	4ba6      	ldr	r3, [pc, #664]	; (1a91c <cal_axis_misalignments+0x2a8>)
void cal_axis_misalignments(float XYZ[NBUFF][3], struct INST_CAL *cal_struct){
   1a682:	4ca7      	ldr	r4, [pc, #668]	; (1a920 <cal_axis_misalignments+0x2ac>)
	for (k=0;k<nPoints;k++){
   1a684:	681b      	ldr	r3, [r3, #0]
void cal_axis_misalignments(float XYZ[NBUFF][3], struct INST_CAL *cal_struct){
   1a686:	44a5      	add	sp, r4
   1a688:	9107      	str	r1, [sp, #28]
	for (k=0;k<nPoints;k++){
   1a68a:	9305      	str	r3, [sp, #20]
   1a68c:	2b00      	cmp	r3, #0
   1a68e:	d100      	bne.n	1a692 <cal_axis_misalignments+0x1e>
   1a690:	e13d      	b.n	1a90e <cal_axis_misalignments+0x29a>
   1a692:	ab94      	add	r3, sp, #592	; 0x250
   1a694:	001a      	movs	r2, r3
   1a696:	9304      	str	r3, [sp, #16]
   1a698:	4699      	mov	r9, r3
   1a69a:	ab30      	add	r3, sp, #192	; 0xc0
   1a69c:	469b      	mov	fp, r3
   1a69e:	9b05      	ldr	r3, [sp, #20]
   1a6a0:	4682      	mov	sl, r0
   1a6a2:	011b      	lsls	r3, r3, #4
   1a6a4:	0019      	movs	r1, r3
   1a6a6:	9306      	str	r3, [sp, #24]
   1a6a8:	468c      	mov	ip, r1
   1a6aa:	0013      	movs	r3, r2
   1a6ac:	4463      	add	r3, ip
   1a6ae:	9303      	str	r3, [sp, #12]
   1a6b0:	4b9c      	ldr	r3, [pc, #624]	; (1a924 <cal_axis_misalignments+0x2b0>)
   1a6b2:	4698      	mov	r8, r3
		D[k][0] = 1;
   1a6b4:	22fe      	movs	r2, #254	; 0xfe
   1a6b6:	464b      	mov	r3, r9
   1a6b8:	0592      	lsls	r2, r2, #22
   1a6ba:	601a      	str	r2, [r3, #0]
		D[k][1] = -2*XYZ[k][0]*XYZ[k][1];
   1a6bc:	4653      	mov	r3, sl
   1a6be:	21c0      	movs	r1, #192	; 0xc0
   1a6c0:	681c      	ldr	r4, [r3, #0]
   1a6c2:	0609      	lsls	r1, r1, #24
   1a6c4:	1c20      	adds	r0, r4, #0
   1a6c6:	47c0      	blx	r8
   1a6c8:	4653      	mov	r3, sl
   1a6ca:	685e      	ldr	r6, [r3, #4]
   1a6cc:	1c05      	adds	r5, r0, #0
   1a6ce:	1c31      	adds	r1, r6, #0
   1a6d0:	47c0      	blx	r8
   1a6d2:	464b      	mov	r3, r9
   1a6d4:	6058      	str	r0, [r3, #4]
		D[k][2] = -2*XYZ[k][1]*XYZ[k][2];
   1a6d6:	4653      	mov	r3, sl
   1a6d8:	21c0      	movs	r1, #192	; 0xc0
   1a6da:	689b      	ldr	r3, [r3, #8]
   1a6dc:	0609      	lsls	r1, r1, #24
   1a6de:	1c1f      	adds	r7, r3, #0
   1a6e0:	1c30      	adds	r0, r6, #0
   1a6e2:	47c0      	blx	r8
   1a6e4:	1c39      	adds	r1, r7, #0
   1a6e6:	47c0      	blx	r8
   1a6e8:	464a      	mov	r2, r9
		D[k][3] = -2*XYZ[k][0]*XYZ[k][2];
   1a6ea:	1c39      	adds	r1, r7, #0
		D[k][2] = -2*XYZ[k][1]*XYZ[k][2];
   1a6ec:	6090      	str	r0, [r2, #8]
		D[k][3] = -2*XYZ[k][0]*XYZ[k][2];
   1a6ee:	9700      	str	r7, [sp, #0]
   1a6f0:	1c28      	adds	r0, r5, #0
   1a6f2:	47c0      	blx	r8
   1a6f4:	464b      	mov	r3, r9
   1a6f6:	60d8      	str	r0, [r3, #12]
		V[k] = pow(XYZ[k][0],2)+pow(XYZ[k][1],2)+pow(XYZ[k][2],2);
   1a6f8:	1c20      	adds	r0, r4, #0
   1a6fa:	4b8b      	ldr	r3, [pc, #556]	; (1a928 <cal_axis_misalignments+0x2b4>)
   1a6fc:	4798      	blx	r3
   1a6fe:	4b8a      	ldr	r3, [pc, #552]	; (1a928 <cal_axis_misalignments+0x2b4>)
   1a700:	0004      	movs	r4, r0
   1a702:	1c30      	adds	r0, r6, #0
   1a704:	000d      	movs	r5, r1
   1a706:	4798      	blx	r3
   1a708:	4b87      	ldr	r3, [pc, #540]	; (1a928 <cal_axis_misalignments+0x2b4>)
   1a70a:	0006      	movs	r6, r0
   1a70c:	9800      	ldr	r0, [sp, #0]
   1a70e:	000f      	movs	r7, r1
   1a710:	4798      	blx	r3
   1a712:	0022      	movs	r2, r4
   1a714:	9000      	str	r0, [sp, #0]
   1a716:	9101      	str	r1, [sp, #4]
   1a718:	002b      	movs	r3, r5
   1a71a:	0020      	movs	r0, r4
   1a71c:	0029      	movs	r1, r5
   1a71e:	4c83      	ldr	r4, [pc, #524]	; (1a92c <cal_axis_misalignments+0x2b8>)
   1a720:	47a0      	blx	r4
   1a722:	0032      	movs	r2, r6
   1a724:	0004      	movs	r4, r0
   1a726:	000d      	movs	r5, r1
   1a728:	003b      	movs	r3, r7
   1a72a:	0030      	movs	r0, r6
   1a72c:	0039      	movs	r1, r7
   1a72e:	4e7f      	ldr	r6, [pc, #508]	; (1a92c <cal_axis_misalignments+0x2b8>)
   1a730:	47b0      	blx	r6
   1a732:	0002      	movs	r2, r0
   1a734:	000b      	movs	r3, r1
   1a736:	0020      	movs	r0, r4
   1a738:	0029      	movs	r1, r5
   1a73a:	4c7d      	ldr	r4, [pc, #500]	; (1a930 <cal_axis_misalignments+0x2bc>)
   1a73c:	47a0      	blx	r4
   1a73e:	0004      	movs	r4, r0
   1a740:	000d      	movs	r5, r1
   1a742:	9800      	ldr	r0, [sp, #0]
   1a744:	9901      	ldr	r1, [sp, #4]
   1a746:	0002      	movs	r2, r0
   1a748:	000b      	movs	r3, r1
   1a74a:	47b0      	blx	r6
   1a74c:	0002      	movs	r2, r0
   1a74e:	000b      	movs	r3, r1
   1a750:	0020      	movs	r0, r4
   1a752:	0029      	movs	r1, r5
   1a754:	4c76      	ldr	r4, [pc, #472]	; (1a930 <cal_axis_misalignments+0x2bc>)
   1a756:	47a0      	blx	r4
   1a758:	4b76      	ldr	r3, [pc, #472]	; (1a934 <cal_axis_misalignments+0x2c0>)
   1a75a:	4798      	blx	r3
   1a75c:	465b      	mov	r3, fp
   1a75e:	c301      	stmia	r3!, {r0}
   1a760:	469b      	mov	fp, r3
   1a762:	2310      	movs	r3, #16
   1a764:	469c      	mov	ip, r3
   1a766:	3b04      	subs	r3, #4
   1a768:	44e1      	add	r9, ip
   1a76a:	469c      	mov	ip, r3
	for (k=0;k<nPoints;k++){
   1a76c:	9b03      	ldr	r3, [sp, #12]
   1a76e:	44e2      	add	sl, ip
   1a770:	4599      	cmp	r9, r3
   1a772:	d19f      	bne.n	1a6b4 <cal_axis_misalignments+0x40>
   1a774:	ab0c      	add	r3, sp, #48	; 0x30
   1a776:	469b      	mov	fp, r3
			for (k=0;k<nPoints;k++){
   1a778:	2300      	movs	r3, #0
   1a77a:	4699      	mov	r9, r3
   1a77c:	4e6e      	ldr	r6, [pc, #440]	; (1a938 <cal_axis_misalignments+0x2c4>)
   1a77e:	464a      	mov	r2, r9
   1a780:	9b06      	ldr	r3, [sp, #24]
void cal_axis_misalignments(float XYZ[NBUFF][3], struct INST_CAL *cal_struct){
   1a782:	2700      	movs	r7, #0
   1a784:	1a9b      	subs	r3, r3, r2
   1a786:	9a04      	ldr	r2, [sp, #16]
   1a788:	4692      	mov	sl, r2
   1a78a:	449a      	add	sl, r3
			DtD[i][j] = 0;
   1a78c:	465b      	mov	r3, fp
   1a78e:	2200      	movs	r2, #0
   1a790:	51da      	str	r2, [r3, r7]
			for (k=0;k<nPoints;k++){
   1a792:	9b05      	ldr	r3, [sp, #20]
   1a794:	2b00      	cmp	r3, #0
   1a796:	d017      	beq.n	1a7c8 <cal_axis_misalignments+0x154>
   1a798:	464a      	mov	r2, r9
   1a79a:	9b04      	ldr	r3, [sp, #16]
   1a79c:	2500      	movs	r5, #0
   1a79e:	1a9c      	subs	r4, r3, r2
   1a7a0:	003b      	movs	r3, r7
   1a7a2:	464f      	mov	r7, r9
   1a7a4:	4699      	mov	r9, r3
				DtD[i][j] = DtD[i][j] + D[k][i]*D[k][j];
   1a7a6:	464a      	mov	r2, r9
   1a7a8:	193b      	adds	r3, r7, r4
   1a7aa:	6821      	ldr	r1, [r4, #0]
   1a7ac:	5898      	ldr	r0, [r3, r2]
   1a7ae:	47c0      	blx	r8
   1a7b0:	1c01      	adds	r1, r0, #0
   1a7b2:	1c28      	adds	r0, r5, #0
   1a7b4:	47b0      	blx	r6
   1a7b6:	3410      	adds	r4, #16
   1a7b8:	1c05      	adds	r5, r0, #0
			for (k=0;k<nPoints;k++){
   1a7ba:	4554      	cmp	r4, sl
   1a7bc:	d1f3      	bne.n	1a7a6 <cal_axis_misalignments+0x132>
   1a7be:	464b      	mov	r3, r9
   1a7c0:	46b9      	mov	r9, r7
   1a7c2:	001f      	movs	r7, r3
   1a7c4:	465b      	mov	r3, fp
   1a7c6:	51d8      	str	r0, [r3, r7]
   1a7c8:	3704      	adds	r7, #4
		for (j=0;j<4;j++){
   1a7ca:	2f10      	cmp	r7, #16
   1a7cc:	d1de      	bne.n	1a78c <cal_axis_misalignments+0x118>
   1a7ce:	2318      	movs	r3, #24
   1a7d0:	469c      	mov	ip, r3
   1a7d2:	3b1c      	subs	r3, #28
   1a7d4:	44e3      	add	fp, ip
   1a7d6:	469c      	mov	ip, r3
   1a7d8:	44e1      	add	r9, ip
	for (i=0;i<4;i++){
   1a7da:	464b      	mov	r3, r9
   1a7dc:	3310      	adds	r3, #16
   1a7de:	d1ce      	bne.n	1a77e <cal_axis_misalignments+0x10a>
   1a7e0:	2300      	movs	r3, #0
   1a7e2:	469a      	mov	sl, r3
		DtV[i] = 0;
   1a7e4:	2300      	movs	r3, #0
   1a7e6:	469b      	mov	fp, r3
   1a7e8:	4652      	mov	r2, sl
   1a7ea:	4659      	mov	r1, fp
   1a7ec:	ab08      	add	r3, sp, #32
   1a7ee:	5099      	str	r1, [r3, r2]
		for (k=0;k<nPoints;k++){
   1a7f0:	9b05      	ldr	r3, [sp, #20]
   1a7f2:	2b00      	cmp	r3, #0
   1a7f4:	d016      	beq.n	1a824 <cal_axis_misalignments+0x1b0>
   1a7f6:	9a04      	ldr	r2, [sp, #16]
   1a7f8:	2500      	movs	r5, #0
   1a7fa:	0013      	movs	r3, r2
   1a7fc:	4691      	mov	r9, r2
   1a7fe:	4453      	add	r3, sl
   1a800:	001c      	movs	r4, r3
   1a802:	9b06      	ldr	r3, [sp, #24]
   1a804:	af30      	add	r7, sp, #192	; 0xc0
   1a806:	4453      	add	r3, sl
   1a808:	4499      	add	r9, r3
			DtV[i] = DtV[i]+D[k][i]*V[k];
   1a80a:	cf02      	ldmia	r7!, {r1}
   1a80c:	6820      	ldr	r0, [r4, #0]
   1a80e:	47c0      	blx	r8
   1a810:	1c01      	adds	r1, r0, #0
   1a812:	1c28      	adds	r0, r5, #0
   1a814:	47b0      	blx	r6
   1a816:	3410      	adds	r4, #16
   1a818:	1c05      	adds	r5, r0, #0
		for (k=0;k<nPoints;k++){
   1a81a:	45a1      	cmp	r9, r4
   1a81c:	d1f5      	bne.n	1a80a <cal_axis_misalignments+0x196>
   1a81e:	4652      	mov	r2, sl
   1a820:	ab08      	add	r3, sp, #32
   1a822:	5098      	str	r0, [r3, r2]
   1a824:	2304      	movs	r3, #4
   1a826:	469c      	mov	ip, r3
   1a828:	44e2      	add	sl, ip
	for (i=0;i<4;i++){
   1a82a:	4653      	mov	r3, sl
   1a82c:	2b10      	cmp	r3, #16
   1a82e:	d1db      	bne.n	1a7e8 <cal_axis_misalignments+0x174>
	inverse(DtD, DtD, 4);
   1a830:	a90c      	add	r1, sp, #48	; 0x30
   1a832:	2204      	movs	r2, #4
   1a834:	0008      	movs	r0, r1
   1a836:	4b41      	ldr	r3, [pc, #260]	; (1a93c <cal_axis_misalignments+0x2c8>)
   1a838:	4798      	blx	r3
   1a83a:	9b08      	ldr	r3, [sp, #32]
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
   1a83c:	9918      	ldr	r1, [sp, #96]	; 0x60
   1a83e:	1c18      	adds	r0, r3, #0
   1a840:	4699      	mov	r9, r3
   1a842:	47c0      	blx	r8
   1a844:	2100      	movs	r1, #0
   1a846:	47b0      	blx	r6
   1a848:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1a84a:	9919      	ldr	r1, [sp, #100]	; 0x64
   1a84c:	4682      	mov	sl, r0
   1a84e:	1c38      	adds	r0, r7, #0
   1a850:	47c0      	blx	r8
   1a852:	1c01      	adds	r1, r0, #0
   1a854:	4650      	mov	r0, sl
   1a856:	47b0      	blx	r6
   1a858:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a85a:	991a      	ldr	r1, [sp, #104]	; 0x68
   1a85c:	4682      	mov	sl, r0
   1a85e:	1c28      	adds	r0, r5, #0
   1a860:	47c0      	blx	r8
   1a862:	1c01      	adds	r1, r0, #0
   1a864:	4650      	mov	r0, sl
   1a866:	47b0      	blx	r6
   1a868:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1a86a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1a86c:	4682      	mov	sl, r0
   1a86e:	1c20      	adds	r0, r4, #0
   1a870:	47c0      	blx	r8
   1a872:	1c01      	adds	r1, r0, #0
   1a874:	4650      	mov	r0, sl
   1a876:	47b0      	blx	r6
   1a878:	991e      	ldr	r1, [sp, #120]	; 0x78
   1a87a:	4683      	mov	fp, r0
   1a87c:	4648      	mov	r0, r9
   1a87e:	47c0      	blx	r8
   1a880:	2100      	movs	r1, #0
   1a882:	47b0      	blx	r6
   1a884:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1a886:	4682      	mov	sl, r0
   1a888:	1c38      	adds	r0, r7, #0
   1a88a:	47c0      	blx	r8
   1a88c:	1c01      	adds	r1, r0, #0
   1a88e:	4650      	mov	r0, sl
   1a890:	47b0      	blx	r6
   1a892:	9920      	ldr	r1, [sp, #128]	; 0x80
   1a894:	4682      	mov	sl, r0
   1a896:	1c28      	adds	r0, r5, #0
   1a898:	47c0      	blx	r8
   1a89a:	1c01      	adds	r1, r0, #0
   1a89c:	4650      	mov	r0, sl
   1a89e:	47b0      	blx	r6
   1a8a0:	9921      	ldr	r1, [sp, #132]	; 0x84
   1a8a2:	4682      	mov	sl, r0
   1a8a4:	1c20      	adds	r0, r4, #0
   1a8a6:	47c0      	blx	r8
   1a8a8:	1c01      	adds	r1, r0, #0
   1a8aa:	4650      	mov	r0, sl
   1a8ac:	47b0      	blx	r6
   1a8ae:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a8b0:	4682      	mov	sl, r0
   1a8b2:	4648      	mov	r0, r9
   1a8b4:	47c0      	blx	r8
   1a8b6:	2100      	movs	r1, #0
   1a8b8:	47b0      	blx	r6
   1a8ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1a8bc:	4681      	mov	r9, r0
   1a8be:	1c38      	adds	r0, r7, #0
   1a8c0:	47c0      	blx	r8
   1a8c2:	1c01      	adds	r1, r0, #0
   1a8c4:	4648      	mov	r0, r9
   1a8c6:	47b0      	blx	r6
   1a8c8:	9914      	ldr	r1, [sp, #80]	; 0x50
   1a8ca:	1c07      	adds	r7, r0, #0
   1a8cc:	1c28      	adds	r0, r5, #0
   1a8ce:	47c0      	blx	r8
   1a8d0:	1c01      	adds	r1, r0, #0
   1a8d2:	1c38      	adds	r0, r7, #0
   1a8d4:	47b0      	blx	r6
   1a8d6:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a8d8:	1c05      	adds	r5, r0, #0
   1a8da:	1c20      	adds	r0, r4, #0
   1a8dc:	47c0      	blx	r8
   1a8de:	1c01      	adds	r1, r0, #0
   1a8e0:	1c28      	adds	r0, r5, #0
   1a8e2:	47b0      	blx	r6
	cal_struct->axmYX += Res[1];
   1a8e4:	9c07      	ldr	r4, [sp, #28]
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
   1a8e6:	1c01      	adds	r1, r0, #0
	cal_struct->axmYX += Res[1];
   1a8e8:	69e0      	ldr	r0, [r4, #28]
   1a8ea:	47b0      	blx	r6
	cal_struct->axmZY += Res[2];
   1a8ec:	4659      	mov	r1, fp
	cal_struct->axmYX += Res[1];
   1a8ee:	61e0      	str	r0, [r4, #28]
	cal_struct->axmZY += Res[2];
   1a8f0:	6a20      	ldr	r0, [r4, #32]
   1a8f2:	47b0      	blx	r6
	cal_struct->axmZX += Res[3];
   1a8f4:	4651      	mov	r1, sl
	cal_struct->axmZY += Res[2];
   1a8f6:	6220      	str	r0, [r4, #32]
	cal_struct->axmZX += Res[3];
   1a8f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1a8fa:	47b0      	blx	r6
   1a8fc:	6260      	str	r0, [r4, #36]	; 0x24
}
   1a8fe:	4b10      	ldr	r3, [pc, #64]	; (1a940 <cal_axis_misalignments+0x2cc>)
   1a900:	449d      	add	sp, r3
   1a902:	bc3c      	pop	{r2, r3, r4, r5}
   1a904:	4690      	mov	r8, r2
   1a906:	4699      	mov	r9, r3
   1a908:	46a2      	mov	sl, r4
   1a90a:	46ab      	mov	fp, r5
   1a90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a90e:	ab94      	add	r3, sp, #592	; 0x250
   1a910:	9304      	str	r3, [sp, #16]
   1a912:	2300      	movs	r3, #0
   1a914:	9306      	str	r3, [sp, #24]
   1a916:	4b03      	ldr	r3, [pc, #12]	; (1a924 <cal_axis_misalignments+0x2b0>)
   1a918:	4698      	mov	r8, r3
   1a91a:	e72b      	b.n	1a774 <cal_axis_misalignments+0x100>
   1a91c:	20002d38 	.word	0x20002d38
   1a920:	fffff76c 	.word	0xfffff76c
   1a924:	00026559 	.word	0x00026559
   1a928:	0002878d 	.word	0x0002878d
   1a92c:	00027ac5 	.word	0x00027ac5
   1a930:	00026c3d 	.word	0x00026c3d
   1a934:	00028831 	.word	0x00028831
   1a938:	00025e55 	.word	0x00025e55
   1a93c:	00013b29 	.word	0x00013b29
   1a940:	00000894 	.word	0x00000894

0001a944 <cal_apply_cal>:
void cal_apply_cal(float uncalXYZ[3], float calXYZ[3], struct INST_CAL *cal_struct){
   1a944:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a946:	46d6      	mov	lr, sl
   1a948:	464f      	mov	r7, r9
   1a94a:	4646      	mov	r6, r8
   1a94c:	b5c0      	push	{r6, r7, lr}
   1a94e:	000d      	movs	r5, r1
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1a950:	4f1e      	ldr	r7, [pc, #120]	; (1a9cc <cal_apply_cal+0x88>)
   1a952:	6851      	ldr	r1, [r2, #4]
void cal_apply_cal(float uncalXYZ[3], float calXYZ[3], struct INST_CAL *cal_struct){
   1a954:	4682      	mov	sl, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1a956:	6800      	ldr	r0, [r0, #0]
void cal_apply_cal(float uncalXYZ[3], float calXYZ[3], struct INST_CAL *cal_struct){
   1a958:	0014      	movs	r4, r2
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1a95a:	47b8      	blx	r7
   1a95c:	6028      	str	r0, [r5, #0]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1a95e:	6921      	ldr	r1, [r4, #16]
   1a960:	4e1b      	ldr	r6, [pc, #108]	; (1a9d0 <cal_apply_cal+0x8c>)
   1a962:	47b0      	blx	r6
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1a964:	4653      	mov	r3, sl
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1a966:	6028      	str	r0, [r5, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1a968:	68a1      	ldr	r1, [r4, #8]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1a96a:	4680      	mov	r8, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1a96c:	6858      	ldr	r0, [r3, #4]
   1a96e:	47b8      	blx	r7
   1a970:	6068      	str	r0, [r5, #4]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1a972:	6961      	ldr	r1, [r4, #20]
   1a974:	47b0      	blx	r6
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1a976:	4653      	mov	r3, sl
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1a978:	6068      	str	r0, [r5, #4]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1a97a:	68e1      	ldr	r1, [r4, #12]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1a97c:	4681      	mov	r9, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1a97e:	6898      	ldr	r0, [r3, #8]
   1a980:	47b8      	blx	r7
   1a982:	60a8      	str	r0, [r5, #8]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1a984:	69a1      	ldr	r1, [r4, #24]
   1a986:	47b0      	blx	r6
   1a988:	60a8      	str	r0, [r5, #8]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   1a98a:	4f12      	ldr	r7, [pc, #72]	; (1a9d4 <cal_apply_cal+0x90>)
   1a98c:	69e1      	ldr	r1, [r4, #28]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1a98e:	4682      	mov	sl, r0
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   1a990:	4640      	mov	r0, r8
   1a992:	47b8      	blx	r7
   1a994:	4e10      	ldr	r6, [pc, #64]	; (1a9d8 <cal_apply_cal+0x94>)
   1a996:	4649      	mov	r1, r9
   1a998:	47b0      	blx	r6
   1a99a:	6068      	str	r0, [r5, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   1a99c:	6a21      	ldr	r1, [r4, #32]
   1a99e:	47b8      	blx	r7
   1a9a0:	4651      	mov	r1, sl
   1a9a2:	47b0      	blx	r6
   1a9a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1a9a6:	4681      	mov	r9, r0
   1a9a8:	4640      	mov	r0, r8
   1a9aa:	47b8      	blx	r7
   1a9ac:	1c01      	adds	r1, r0, #0
   1a9ae:	4648      	mov	r0, r9
   1a9b0:	47b0      	blx	r6
   1a9b2:	60a8      	str	r0, [r5, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   1a9b4:	0020      	movs	r0, r4
   1a9b6:	002a      	movs	r2, r5
   1a9b8:	0029      	movs	r1, r5
   1a9ba:	3034      	adds	r0, #52	; 0x34
   1a9bc:	4b07      	ldr	r3, [pc, #28]	; (1a9dc <cal_apply_cal+0x98>)
   1a9be:	4798      	blx	r3
	
}
   1a9c0:	bc1c      	pop	{r2, r3, r4}
   1a9c2:	4690      	mov	r8, r2
   1a9c4:	4699      	mov	r9, r3
   1a9c6:	46a2      	mov	sl, r4
   1a9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a9ca:	46c0      	nop			; (mov r8, r8)
   1a9cc:	00026799 	.word	0x00026799
   1a9d0:	00026179 	.word	0x00026179
   1a9d4:	00026559 	.word	0x00026559
   1a9d8:	00025e55 	.word	0x00025e55
   1a9dc:	00012795 	.word	0x00012795

0001a9e0 <cal_init_struct>:
void cal_init_struct(struct INST_CAL *cal_struct){
	uint8_t i, j;
	
	for (i=0;i<3;i++){
		cal_struct->gain[i] = 1;
		cal_struct->offset[i] = 0;
   1a9e0:	2300      	movs	r3, #0
		cal_struct->gain[i] = 1;
   1a9e2:	22fe      	movs	r2, #254	; 0xfe
		cal_struct->offset[i] = 0;
   1a9e4:	6043      	str	r3, [r0, #4]
		
		for (j=0;j<3;j++){
			cal_struct->RotM[i][j] = 0;//Clear row
   1a9e6:	6383      	str	r3, [r0, #56]	; 0x38
   1a9e8:	63c3      	str	r3, [r0, #60]	; 0x3c
		cal_struct->offset[i] = 0;
   1a9ea:	6083      	str	r3, [r0, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   1a9ec:	6403      	str	r3, [r0, #64]	; 0x40
   1a9ee:	6483      	str	r3, [r0, #72]	; 0x48
		cal_struct->offset[i] = 0;
   1a9f0:	60c3      	str	r3, [r0, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   1a9f2:	64c3      	str	r3, [r0, #76]	; 0x4c
   1a9f4:	6503      	str	r3, [r0, #80]	; 0x50
		}
		cal_struct->RotM[i][i] = 1;// Create identity matrix
		
	}
	cal_struct->axmYX = 0;
   1a9f6:	61c3      	str	r3, [r0, #28]
	cal_struct->axmZY = 0;
   1a9f8:	6203      	str	r3, [r0, #32]
	cal_struct->axmZX = 0;
   1a9fa:	6243      	str	r3, [r0, #36]	; 0x24
	
	cal_struct->thetaX = 0;
   1a9fc:	6283      	str	r3, [r0, #40]	; 0x28
	cal_struct->thetaY = 0;
   1a9fe:	62c3      	str	r3, [r0, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   1aa00:	6303      	str	r3, [r0, #48]	; 0x30
	
	cal_struct->dist_offset = 0;
   1aa02:	6583      	str	r3, [r0, #88]	; 0x58
	
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1aa04:	23b2      	movs	r3, #178	; 0xb2
		cal_struct->gain[i] = 1;
   1aa06:	0592      	lsls	r2, r2, #22
   1aa08:	6102      	str	r2, [r0, #16]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1aa0a:	6342      	str	r2, [r0, #52]	; 0x34
		cal_struct->gain[i] = 1;
   1aa0c:	6142      	str	r2, [r0, #20]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1aa0e:	6442      	str	r2, [r0, #68]	; 0x44
		cal_struct->gain[i] = 1;
   1aa10:	6182      	str	r2, [r0, #24]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1aa12:	6542      	str	r2, [r0, #84]	; 0x54
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1aa14:	7003      	strb	r3, [r0, #0]
	
}
   1aa16:	4770      	bx	lr

0001aa18 <gen_RotM>:

void gen_RotM(struct INST_CAL *cal_struct){
   1aa18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa1a:	46de      	mov	lr, fp
   1aa1c:	4657      	mov	r7, sl
   1aa1e:	464e      	mov	r6, r9
   1aa20:	4645      	mov	r5, r8
   1aa22:	b5e0      	push	{r5, r6, r7, lr}
   1aa24:	0004      	movs	r4, r0
   1aa26:	b08d      	sub	sp, #52	; 0x34
	float tX, tY, tZ;
	
	tX = cal_struct->thetaX*DEG2RAD;
   1aa28:	4d4d      	ldr	r5, [pc, #308]	; (1ab60 <gen_RotM+0x148>)
   1aa2a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1aa2c:	494d      	ldr	r1, [pc, #308]	; (1ab64 <gen_RotM+0x14c>)
   1aa2e:	47a8      	blx	r5
	tY = cal_struct->thetaY*DEG2RAD;
   1aa30:	494c      	ldr	r1, [pc, #304]	; (1ab64 <gen_RotM+0x14c>)
	tX = cal_struct->thetaX*DEG2RAD;
   1aa32:	900b      	str	r0, [sp, #44]	; 0x2c
	tY = cal_struct->thetaY*DEG2RAD;
   1aa34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1aa36:	47a8      	blx	r5
	tZ = cal_struct->thetaZ*DEG2RAD;
	
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
   1aa38:	4b4b      	ldr	r3, [pc, #300]	; (1ab68 <gen_RotM+0x150>)
   1aa3a:	469a      	mov	sl, r3
   1aa3c:	4798      	blx	r3
   1aa3e:	0002      	movs	r2, r0
   1aa40:	000b      	movs	r3, r1
   1aa42:	9200      	str	r2, [sp, #0]
   1aa44:	9301      	str	r3, [sp, #4]
   1aa46:	4b49      	ldr	r3, [pc, #292]	; (1ab6c <gen_RotM+0x154>)
   1aa48:	4699      	mov	r9, r3
   1aa4a:	4798      	blx	r3
   1aa4c:	9002      	str	r0, [sp, #8]
   1aa4e:	9103      	str	r1, [sp, #12]
	tZ = cal_struct->thetaZ*DEG2RAD;
   1aa50:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1aa52:	4944      	ldr	r1, [pc, #272]	; (1ab64 <gen_RotM+0x14c>)
   1aa54:	47a8      	blx	r5
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
   1aa56:	47d0      	blx	sl
   1aa58:	0006      	movs	r6, r0
   1aa5a:	000f      	movs	r7, r1
   1aa5c:	47c8      	blx	r9
   1aa5e:	0002      	movs	r2, r0
   1aa60:	000b      	movs	r3, r1
   1aa62:	4943      	ldr	r1, [pc, #268]	; (1ab70 <gen_RotM+0x158>)
   1aa64:	9204      	str	r2, [sp, #16]
   1aa66:	9305      	str	r3, [sp, #20]
   1aa68:	468b      	mov	fp, r1
   1aa6a:	9802      	ldr	r0, [sp, #8]
   1aa6c:	9903      	ldr	r1, [sp, #12]
   1aa6e:	47d8      	blx	fp
   1aa70:	4d40      	ldr	r5, [pc, #256]	; (1ab74 <gen_RotM+0x15c>)
   1aa72:	47a8      	blx	r5
	cal_struct->RotM[0][1] = -sin(tZ);
   1aa74:	4b40      	ldr	r3, [pc, #256]	; (1ab78 <gen_RotM+0x160>)
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
   1aa76:	6360      	str	r0, [r4, #52]	; 0x34
	cal_struct->RotM[0][1] = -sin(tZ);
   1aa78:	0039      	movs	r1, r7
   1aa7a:	0030      	movs	r0, r6
   1aa7c:	4698      	mov	r8, r3
   1aa7e:	4798      	blx	r3
   1aa80:	000a      	movs	r2, r1
   1aa82:	0001      	movs	r1, r0
   1aa84:	9106      	str	r1, [sp, #24]
   1aa86:	9207      	str	r2, [sp, #28]
   1aa88:	0011      	movs	r1, r2
   1aa8a:	47a8      	blx	r5
   1aa8c:	2380      	movs	r3, #128	; 0x80
   1aa8e:	061b      	lsls	r3, r3, #24
   1aa90:	469c      	mov	ip, r3
   1aa92:	4460      	add	r0, ip
   1aa94:	63a0      	str	r0, [r4, #56]	; 0x38
	cal_struct->RotM[0][2] = sin(tY);
   1aa96:	9800      	ldr	r0, [sp, #0]
   1aa98:	9901      	ldr	r1, [sp, #4]
   1aa9a:	47c0      	blx	r8
   1aa9c:	000a      	movs	r2, r1
   1aa9e:	0001      	movs	r1, r0
   1aaa0:	9108      	str	r1, [sp, #32]
   1aaa2:	9209      	str	r2, [sp, #36]	; 0x24
   1aaa4:	0011      	movs	r1, r2
   1aaa6:	47a8      	blx	r5
   1aaa8:	63e0      	str	r0, [r4, #60]	; 0x3c
	cal_struct->RotM[1][0] = (cos(tX)*sin(tZ))+(sin(tX)*sin(tY));
   1aaaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1aaac:	47d0      	blx	sl
   1aaae:	0006      	movs	r6, r0
   1aab0:	000f      	movs	r7, r1
   1aab2:	47c8      	blx	r9
   1aab4:	9000      	str	r0, [sp, #0]
   1aab6:	9101      	str	r1, [sp, #4]
   1aab8:	0030      	movs	r0, r6
   1aaba:	0039      	movs	r1, r7
   1aabc:	47c0      	blx	r8
   1aabe:	9a00      	ldr	r2, [sp, #0]
   1aac0:	9b01      	ldr	r3, [sp, #4]
   1aac2:	4681      	mov	r9, r0
   1aac4:	4688      	mov	r8, r1
   1aac6:	9806      	ldr	r0, [sp, #24]
   1aac8:	9907      	ldr	r1, [sp, #28]
   1aaca:	47d8      	blx	fp
   1aacc:	464a      	mov	r2, r9
   1aace:	0006      	movs	r6, r0
   1aad0:	000f      	movs	r7, r1
   1aad2:	9808      	ldr	r0, [sp, #32]
   1aad4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1aad6:	4643      	mov	r3, r8
   1aad8:	47d8      	blx	fp
   1aada:	0002      	movs	r2, r0
   1aadc:	000b      	movs	r3, r1
   1aade:	0030      	movs	r0, r6
   1aae0:	0039      	movs	r1, r7
   1aae2:	4e26      	ldr	r6, [pc, #152]	; (1ab7c <gen_RotM+0x164>)
   1aae4:	47b0      	blx	r6
   1aae6:	47a8      	blx	r5
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
   1aae8:	9a00      	ldr	r2, [sp, #0]
   1aaea:	9b01      	ldr	r3, [sp, #4]
	cal_struct->RotM[1][0] = (cos(tX)*sin(tZ))+(sin(tX)*sin(tY));
   1aaec:	6420      	str	r0, [r4, #64]	; 0x40
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
   1aaee:	2680      	movs	r6, #128	; 0x80
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
   1aaf0:	9804      	ldr	r0, [sp, #16]
   1aaf2:	9905      	ldr	r1, [sp, #20]
   1aaf4:	47d8      	blx	fp
   1aaf6:	47a8      	blx	r5
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
   1aaf8:	9a02      	ldr	r2, [sp, #8]
   1aafa:	9b03      	ldr	r3, [sp, #12]
   1aafc:	0636      	lsls	r6, r6, #24
   1aafe:	4446      	add	r6, r8
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
   1ab00:	6460      	str	r0, [r4, #68]	; 0x44
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
   1ab02:	0031      	movs	r1, r6
   1ab04:	4648      	mov	r0, r9
   1ab06:	47d8      	blx	fp
   1ab08:	47a8      	blx	r5
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
   1ab0a:	464a      	mov	r2, r9
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
   1ab0c:	64a0      	str	r0, [r4, #72]	; 0x48
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
   1ab0e:	4643      	mov	r3, r8
   1ab10:	9806      	ldr	r0, [sp, #24]
   1ab12:	9907      	ldr	r1, [sp, #28]
   1ab14:	47d8      	blx	fp
   1ab16:	9a00      	ldr	r2, [sp, #0]
   1ab18:	9b01      	ldr	r3, [sp, #4]
   1ab1a:	0006      	movs	r6, r0
   1ab1c:	000f      	movs	r7, r1
   1ab1e:	9808      	ldr	r0, [sp, #32]
   1ab20:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ab22:	47d8      	blx	fp
   1ab24:	0002      	movs	r2, r0
   1ab26:	000b      	movs	r3, r1
   1ab28:	0030      	movs	r0, r6
   1ab2a:	0039      	movs	r1, r7
   1ab2c:	4e14      	ldr	r6, [pc, #80]	; (1ab80 <gen_RotM+0x168>)
   1ab2e:	47b0      	blx	r6
   1ab30:	47a8      	blx	r5
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
   1ab32:	464a      	mov	r2, r9
   1ab34:	4643      	mov	r3, r8
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
   1ab36:	64e0      	str	r0, [r4, #76]	; 0x4c
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
   1ab38:	9804      	ldr	r0, [sp, #16]
   1ab3a:	9905      	ldr	r1, [sp, #20]
   1ab3c:	47d8      	blx	fp
   1ab3e:	47a8      	blx	r5
	cal_struct->RotM[2][2] = cos(tX)*cos(tY);
   1ab40:	9a00      	ldr	r2, [sp, #0]
   1ab42:	9b01      	ldr	r3, [sp, #4]
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
   1ab44:	6520      	str	r0, [r4, #80]	; 0x50
	cal_struct->RotM[2][2] = cos(tX)*cos(tY);
   1ab46:	9802      	ldr	r0, [sp, #8]
   1ab48:	9903      	ldr	r1, [sp, #12]
   1ab4a:	47d8      	blx	fp
   1ab4c:	47a8      	blx	r5
   1ab4e:	6560      	str	r0, [r4, #84]	; 0x54
	
}
   1ab50:	b00d      	add	sp, #52	; 0x34
   1ab52:	bc3c      	pop	{r2, r3, r4, r5}
   1ab54:	4690      	mov	r8, r2
   1ab56:	4699      	mov	r9, r3
   1ab58:	46a2      	mov	sl, r4
   1ab5a:	46ab      	mov	fp, r5
   1ab5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab5e:	46c0      	nop			; (mov r8, r8)
   1ab60:	00026559 	.word	0x00026559
   1ab64:	3c8efa35 	.word	0x3c8efa35
   1ab68:	0002878d 	.word	0x0002878d
   1ab6c:	00022ee9 	.word	0x00022ee9
   1ab70:	00027ac5 	.word	0x00027ac5
   1ab74:	00028831 	.word	0x00028831
   1ab78:	00022f75 	.word	0x00022f75
   1ab7c:	00026c3d 	.word	0x00026c3d
   1ab80:	00027fc5 	.word	0x00027fc5

0001ab84 <cal_angleX>:
void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
   1ab84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab86:	46de      	mov	lr, fp
   1ab88:	4657      	mov	r7, sl
   1ab8a:	464e      	mov	r6, r9
   1ab8c:	4645      	mov	r5, r8
   1ab8e:	b5e0      	push	{r5, r6, r7, lr}
	for (i=0;i<nPoints;i++){
   1ab90:	4b43      	ldr	r3, [pc, #268]	; (1aca0 <cal_angleX+0x11c>)
void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
   1ab92:	4c44      	ldr	r4, [pc, #272]	; (1aca4 <cal_angleX+0x120>)
	for (i=0;i<nPoints;i++){
   1ab94:	681b      	ldr	r3, [r3, #0]
void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
   1ab96:	44a5      	add	sp, r4
   1ab98:	9200      	str	r2, [sp, #0]
	for (i=0;i<nPoints;i++){
   1ab9a:	9301      	str	r3, [sp, #4]
   1ab9c:	1e1a      	subs	r2, r3, #0
   1ab9e:	d100      	bne.n	1aba2 <cal_angleX+0x1e>
   1aba0:	e078      	b.n	1ac94 <cal_angleX+0x110>
   1aba2:	4694      	mov	ip, r2
   1aba4:	468b      	mov	fp, r1
   1aba6:	005b      	lsls	r3, r3, #1
   1aba8:	4463      	add	r3, ip
   1abaa:	009b      	lsls	r3, r3, #2
   1abac:	3304      	adds	r3, #4
   1abae:	449b      	add	fp, r3
   1abb0:	4b3d      	ldr	r3, [pc, #244]	; (1aca8 <cal_angleX+0x124>)
   1abb2:	2600      	movs	r6, #0
   1abb4:	469a      	mov	sl, r3
   1abb6:	4f3d      	ldr	r7, [pc, #244]	; (1acac <cal_angleX+0x128>)
   1abb8:	1d0c      	adds	r4, r1, #4
   1abba:	1d05      	adds	r5, r0, #4
		D[i] = XYZ2[i][1]-XYZ2[i][2];
   1abbc:	6823      	ldr	r3, [r4, #0]
   1abbe:	4699      	mov	r9, r3
   1abc0:	6863      	ldr	r3, [r4, #4]
   1abc2:	4648      	mov	r0, r9
   1abc4:	1c19      	adds	r1, r3, #0
   1abc6:	4698      	mov	r8, r3
   1abc8:	47b8      	blx	r7
   1abca:	ab02      	add	r3, sp, #8
   1abcc:	5198      	str	r0, [r3, r6]
		V[i] = XYZ2[i][1]-XYZ1[i][1]+XYZ2[i][2]-XYZ1[i][2];
   1abce:	6829      	ldr	r1, [r5, #0]
   1abd0:	4648      	mov	r0, r9
   1abd2:	47b8      	blx	r7
   1abd4:	4641      	mov	r1, r8
   1abd6:	47d0      	blx	sl
   1abd8:	6869      	ldr	r1, [r5, #4]
   1abda:	47b8      	blx	r7
   1abdc:	22c8      	movs	r2, #200	; 0xc8
   1abde:	ab02      	add	r3, sp, #8
   1abe0:	0052      	lsls	r2, r2, #1
   1abe2:	189b      	adds	r3, r3, r2
   1abe4:	340c      	adds	r4, #12
   1abe6:	5198      	str	r0, [r3, r6]
   1abe8:	350c      	adds	r5, #12
   1abea:	3604      	adds	r6, #4
	for (i=0;i<nPoints;i++){
   1abec:	45a3      	cmp	fp, r4
   1abee:	d1e5      	bne.n	1abbc <cal_angleX+0x38>
   1abf0:	9b01      	ldr	r3, [sp, #4]
   1abf2:	ae02      	add	r6, sp, #8
   1abf4:	009b      	lsls	r3, r3, #2
   1abf6:	469b      	mov	fp, r3
   1abf8:	4699      	mov	r9, r3
   1abfa:	4b2d      	ldr	r3, [pc, #180]	; (1acb0 <cal_angleX+0x12c>)
   1abfc:	46b4      	mov	ip, r6
   1abfe:	2700      	movs	r7, #0
   1ac00:	4698      	mov	r8, r3
   1ac02:	44e3      	add	fp, ip
		DtD = DtD + pow(D[i],2);
   1ac04:	ce01      	ldmia	r6!, {r0}
   1ac06:	47c0      	blx	r8
   1ac08:	4c2a      	ldr	r4, [pc, #168]	; (1acb4 <cal_angleX+0x130>)
   1ac0a:	0002      	movs	r2, r0
   1ac0c:	000b      	movs	r3, r1
   1ac0e:	47a0      	blx	r4
   1ac10:	0004      	movs	r4, r0
   1ac12:	1c38      	adds	r0, r7, #0
   1ac14:	000d      	movs	r5, r1
   1ac16:	47c0      	blx	r8
   1ac18:	0002      	movs	r2, r0
   1ac1a:	000b      	movs	r3, r1
   1ac1c:	0020      	movs	r0, r4
   1ac1e:	0029      	movs	r1, r5
   1ac20:	4c25      	ldr	r4, [pc, #148]	; (1acb8 <cal_angleX+0x134>)
   1ac22:	47a0      	blx	r4
   1ac24:	4b25      	ldr	r3, [pc, #148]	; (1acbc <cal_angleX+0x138>)
   1ac26:	4798      	blx	r3
   1ac28:	1c07      	adds	r7, r0, #0
	for (i=0;i<nPoints;i++){
   1ac2a:	45b3      	cmp	fp, r6
   1ac2c:	d1ea      	bne.n	1ac04 <cal_angleX+0x80>
   1ac2e:	4e24      	ldr	r6, [pc, #144]	; (1acc0 <cal_angleX+0x13c>)
   1ac30:	2400      	movs	r4, #0
   1ac32:	46b0      	mov	r8, r6
   1ac34:	2500      	movs	r5, #0
   1ac36:	464e      	mov	r6, r9
   1ac38:	4657      	mov	r7, sl
   1ac3a:	4681      	mov	r9, r0
		DtV = DtV + D[i]*V[i];
   1ac3c:	22c8      	movs	r2, #200	; 0xc8
   1ac3e:	ab02      	add	r3, sp, #8
   1ac40:	0052      	lsls	r2, r2, #1
   1ac42:	189b      	adds	r3, r3, r2
   1ac44:	5919      	ldr	r1, [r3, r4]
   1ac46:	ab02      	add	r3, sp, #8
   1ac48:	5918      	ldr	r0, [r3, r4]
   1ac4a:	47c0      	blx	r8
   1ac4c:	1c01      	adds	r1, r0, #0
   1ac4e:	1c28      	adds	r0, r5, #0
   1ac50:	47b8      	blx	r7
   1ac52:	3404      	adds	r4, #4
   1ac54:	1c05      	adds	r5, r0, #0
	for (i=0;i<nPoints;i++){
   1ac56:	42a6      	cmp	r6, r4
   1ac58:	d1f0      	bne.n	1ac3c <cal_angleX+0xb8>
   1ac5a:	46ba      	mov	sl, r7
   1ac5c:	4646      	mov	r6, r8
   1ac5e:	464f      	mov	r7, r9
	Res = (1/DtD)*DtV;
   1ac60:	20fe      	movs	r0, #254	; 0xfe
   1ac62:	4b18      	ldr	r3, [pc, #96]	; (1acc4 <cal_angleX+0x140>)
   1ac64:	1c39      	adds	r1, r7, #0
   1ac66:	0580      	lsls	r0, r0, #22
   1ac68:	4798      	blx	r3
   1ac6a:	1c29      	adds	r1, r5, #0
   1ac6c:	47b0      	blx	r6
	cal_struct->thetaX += -1*RAD2DEG*Res;
   1ac6e:	4916      	ldr	r1, [pc, #88]	; (1acc8 <cal_angleX+0x144>)
   1ac70:	47b0      	blx	r6
   1ac72:	9c00      	ldr	r4, [sp, #0]
   1ac74:	1c01      	adds	r1, r0, #0
   1ac76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1ac78:	47d0      	blx	sl
	gen_RotM(cal_struct);
   1ac7a:	4b14      	ldr	r3, [pc, #80]	; (1accc <cal_angleX+0x148>)
	cal_struct->thetaX += -1*RAD2DEG*Res;
   1ac7c:	62a0      	str	r0, [r4, #40]	; 0x28
	gen_RotM(cal_struct);
   1ac7e:	0020      	movs	r0, r4
   1ac80:	4798      	blx	r3
}
   1ac82:	23cb      	movs	r3, #203	; 0xcb
   1ac84:	009b      	lsls	r3, r3, #2
   1ac86:	449d      	add	sp, r3
   1ac88:	bc3c      	pop	{r2, r3, r4, r5}
   1ac8a:	4690      	mov	r8, r2
   1ac8c:	4699      	mov	r9, r3
   1ac8e:	46a2      	mov	sl, r4
   1ac90:	46ab      	mov	fp, r5
   1ac92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i=0;i<nPoints;i++){
   1ac94:	2700      	movs	r7, #0
   1ac96:	4b04      	ldr	r3, [pc, #16]	; (1aca8 <cal_angleX+0x124>)
   1ac98:	1c3d      	adds	r5, r7, #0
   1ac9a:	469a      	mov	sl, r3
   1ac9c:	4e08      	ldr	r6, [pc, #32]	; (1acc0 <cal_angleX+0x13c>)
   1ac9e:	e7df      	b.n	1ac60 <cal_angleX+0xdc>
   1aca0:	20002d38 	.word	0x20002d38
   1aca4:	fffffcd4 	.word	0xfffffcd4
   1aca8:	00025e55 	.word	0x00025e55
   1acac:	00026799 	.word	0x00026799
   1acb0:	0002878d 	.word	0x0002878d
   1acb4:	00027ac5 	.word	0x00027ac5
   1acb8:	00026c3d 	.word	0x00026c3d
   1acbc:	00028831 	.word	0x00028831
   1acc0:	00026559 	.word	0x00026559
   1acc4:	00026179 	.word	0x00026179
   1acc8:	c2652ee0 	.word	0xc2652ee0
   1accc:	0001aa19 	.word	0x0001aa19

0001acd0 <cal_angleYZ>:
void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
   1acd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1acd2:	46de      	mov	lr, fp
   1acd4:	4657      	mov	r7, sl
   1acd6:	464e      	mov	r6, r9
   1acd8:	4645      	mov	r5, r8
   1acda:	b5e0      	push	{r5, r6, r7, lr}
	for (k=0;k< nGroups;k++){
   1acdc:	4ba2      	ldr	r3, [pc, #648]	; (1af68 <cal_angleYZ+0x298>)
void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
   1acde:	4ca3      	ldr	r4, [pc, #652]	; (1af6c <cal_angleYZ+0x29c>)
	for (k=0;k< nGroups;k++){
   1ace0:	469b      	mov	fp, r3
   1ace2:	681b      	ldr	r3, [r3, #0]
void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
   1ace4:	44a5      	add	sp, r4
   1ace6:	4682      	mov	sl, r0
   1ace8:	9105      	str	r1, [sp, #20]
	for (k=0;k< nGroups;k++){
   1acea:	2b00      	cmp	r3, #0
   1acec:	d100      	bne.n	1acf0 <cal_angleYZ+0x20>
   1acee:	e135      	b.n	1af5c <cal_angleYZ+0x28c>
   1acf0:	2300      	movs	r3, #0
   1acf2:	2400      	movs	r4, #0
   1acf4:	4698      	mov	r8, r3
   1acf6:	ab0c      	add	r3, sp, #48	; 0x30
   1acf8:	9300      	str	r3, [sp, #0]
   1acfa:	4b9d      	ldr	r3, [pc, #628]	; (1af70 <cal_angleYZ+0x2a0>)
   1acfc:	ad70      	add	r5, sp, #448	; 0x1c0
   1acfe:	9301      	str	r3, [sp, #4]
   1ad00:	1d26      	adds	r6, r4, #4
   1ad02:	0027      	movs	r7, r4
   1ad04:	46a1      	mov	r9, r4
   1ad06:	4654      	mov	r4, sl
   1ad08:	b2f6      	uxtb	r6, r6
			calc_theta_XY(&XYZ[ind][0], &roll_ang[ind], &x_ang_shift[ind]);
   1ad0a:	9b00      	ldr	r3, [sp, #0]
   1ad0c:	0078      	lsls	r0, r7, #1
   1ad0e:	469c      	mov	ip, r3
   1ad10:	19c0      	adds	r0, r0, r7
   1ad12:	00b9      	lsls	r1, r7, #2
   1ad14:	0080      	lsls	r0, r0, #2
   1ad16:	3701      	adds	r7, #1
   1ad18:	186a      	adds	r2, r5, r1
   1ad1a:	1820      	adds	r0, r4, r0
   1ad1c:	4461      	add	r1, ip
   1ad1e:	4b95      	ldr	r3, [pc, #596]	; (1af74 <cal_angleYZ+0x2a4>)
   1ad20:	b2ff      	uxtb	r7, r7
   1ad22:	4798      	blx	r3
		for (j=0;j<GROUP_SIZE;j++){
   1ad24:	42be      	cmp	r6, r7
   1ad26:	d1f0      	bne.n	1ad0a <cal_angleYZ+0x3a>
		group_avg = meanArr( &x_ang_shift[k*GROUP_SIZE],GROUP_SIZE);
   1ad28:	4643      	mov	r3, r8
   1ad2a:	0118      	lsls	r0, r3, #4
   1ad2c:	2104      	movs	r1, #4
   1ad2e:	4b92      	ldr	r3, [pc, #584]	; (1af78 <cal_angleYZ+0x2a8>)
   1ad30:	46a2      	mov	sl, r4
   1ad32:	1828      	adds	r0, r5, r0
   1ad34:	464c      	mov	r4, r9
   1ad36:	4798      	blx	r3
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
   1ad38:	00a7      	lsls	r7, r4, #2
		group_avg = meanArr( &x_ang_shift[k*GROUP_SIZE],GROUP_SIZE);
   1ad3a:	4681      	mov	r9, r0
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
   1ad3c:	1c01      	adds	r1, r0, #0
   1ad3e:	9b01      	ldr	r3, [sp, #4]
   1ad40:	59e8      	ldr	r0, [r5, r7]
   1ad42:	4798      	blx	r3
   1ad44:	51e8      	str	r0, [r5, r7]
   1ad46:	1c67      	adds	r7, r4, #1
   1ad48:	b2ff      	uxtb	r7, r7
   1ad4a:	00bf      	lsls	r7, r7, #2
   1ad4c:	59e8      	ldr	r0, [r5, r7]
   1ad4e:	9a01      	ldr	r2, [sp, #4]
   1ad50:	4649      	mov	r1, r9
   1ad52:	4790      	blx	r2
   1ad54:	51e8      	str	r0, [r5, r7]
   1ad56:	1ca7      	adds	r7, r4, #2
   1ad58:	b2ff      	uxtb	r7, r7
   1ad5a:	00bf      	lsls	r7, r7, #2
   1ad5c:	59e8      	ldr	r0, [r5, r7]
   1ad5e:	4649      	mov	r1, r9
   1ad60:	9b01      	ldr	r3, [sp, #4]
   1ad62:	4798      	blx	r3
   1ad64:	3403      	adds	r4, #3
   1ad66:	b2e4      	uxtb	r4, r4
   1ad68:	00a4      	lsls	r4, r4, #2
   1ad6a:	51e8      	str	r0, [r5, r7]
   1ad6c:	5928      	ldr	r0, [r5, r4]
   1ad6e:	9b01      	ldr	r3, [sp, #4]
   1ad70:	4649      	mov	r1, r9
   1ad72:	4798      	blx	r3
	for (k=0;k< nGroups;k++){
   1ad74:	4643      	mov	r3, r8
   1ad76:	3301      	adds	r3, #1
   1ad78:	b2db      	uxtb	r3, r3
   1ad7a:	4698      	mov	r8, r3
   1ad7c:	465b      	mov	r3, fp
   1ad7e:	681b      	ldr	r3, [r3, #0]
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
   1ad80:	5128      	str	r0, [r5, r4]
   1ad82:	0034      	movs	r4, r6
	for (k=0;k< nGroups;k++){
   1ad84:	4598      	cmp	r8, r3
   1ad86:	d3bb      	bcc.n	1ad00 <cal_angleYZ+0x30>
	for (np=0;np<nPoints;np++){
   1ad88:	4b7c      	ldr	r3, [pc, #496]	; (1af7c <cal_angleYZ+0x2ac>)
   1ad8a:	681f      	ldr	r7, [r3, #0]
   1ad8c:	2f00      	cmp	r7, #0
   1ad8e:	d100      	bne.n	1ad92 <cal_angleYZ+0xc2>
   1ad90:	e0e7      	b.n	1af62 <cal_angleYZ+0x292>
   1ad92:	ab0c      	add	r3, sp, #48	; 0x30
   1ad94:	9300      	str	r3, [sp, #0]
   1ad96:	4b7a      	ldr	r3, [pc, #488]	; (1af80 <cal_angleYZ+0x2b0>)
   1ad98:	2600      	movs	r6, #0
   1ad9a:	469b      	mov	fp, r3
   1ad9c:	4b79      	ldr	r3, [pc, #484]	; (1af84 <cal_angleYZ+0x2b4>)
   1ad9e:	46b9      	mov	r9, r7
   1ada0:	4698      	mov	r8, r3
   1ada2:	4b79      	ldr	r3, [pc, #484]	; (1af88 <cal_angleYZ+0x2b8>)
   1ada4:	469a      	mov	sl, r3
		X[np][0] = cos(DEG2RAD*roll_ang[np]);
   1ada6:	9a00      	ldr	r2, [sp, #0]
   1ada8:	00b3      	lsls	r3, r6, #2
   1adaa:	58d0      	ldr	r0, [r2, r3]
   1adac:	4977      	ldr	r1, [pc, #476]	; (1af8c <cal_angleYZ+0x2bc>)
   1adae:	47d8      	blx	fp
   1adb0:	47c0      	blx	r8
   1adb2:	4b77      	ldr	r3, [pc, #476]	; (1af90 <cal_angleYZ+0x2c0>)
   1adb4:	0004      	movs	r4, r0
   1adb6:	000d      	movs	r5, r1
   1adb8:	4798      	blx	r3
   1adba:	47d0      	blx	sl
   1adbc:	22ce      	movs	r2, #206	; 0xce
   1adbe:	ab06      	add	r3, sp, #24
   1adc0:	0092      	lsls	r2, r2, #2
   1adc2:	189b      	adds	r3, r3, r2
   1adc4:	00f7      	lsls	r7, r6, #3
   1adc6:	51d8      	str	r0, [r3, r7]
		X[np][1] = sin(DEG2RAD*roll_ang[np]);
   1adc8:	0029      	movs	r1, r5
   1adca:	4b72      	ldr	r3, [pc, #456]	; (1af94 <cal_angleYZ+0x2c4>)
   1adcc:	0020      	movs	r0, r4
   1adce:	4798      	blx	r3
   1add0:	abd4      	add	r3, sp, #848	; 0x350
   1add2:	469c      	mov	ip, r3
   1add4:	4467      	add	r7, ip
   1add6:	47d0      	blx	sl
	for (np=0;np<nPoints;np++){
   1add8:	3601      	adds	r6, #1
   1adda:	b2f6      	uxtb	r6, r6
		X[np][1] = sin(DEG2RAD*roll_ang[np]);
   1addc:	6078      	str	r0, [r7, #4]
	for (np=0;np<nPoints;np++){
   1adde:	454e      	cmp	r6, r9
   1ade0:	d3e1      	bcc.n	1ada6 <cal_angleYZ+0xd6>
   1ade2:	464f      	mov	r7, r9
			for (np=0;np<nPoints;np++){
   1ade4:	2300      	movs	r3, #0
   1ade6:	469a      	mov	sl, r3
   1ade8:	4b6b      	ldr	r3, [pc, #428]	; (1af98 <cal_angleYZ+0x2c8>)
   1adea:	46b9      	mov	r9, r7
   1adec:	4698      	mov	r8, r3
   1adee:	aed4      	add	r6, sp, #848	; 0x350
   1adf0:	4653      	mov	r3, sl
   1adf2:	aa08      	add	r2, sp, #32
   1adf4:	4694      	mov	ip, r2
	for (np=0;np<nPoints;np++){
   1adf6:	2700      	movs	r7, #0
   1adf8:	00db      	lsls	r3, r3, #3
   1adfa:	4463      	add	r3, ip
   1adfc:	9300      	str	r3, [sp, #0]
			tempX1[i][j]=0;
   1adfe:	2200      	movs	r2, #0
   1ae00:	601a      	str	r2, [r3, #0]
			for (np=0;np<nPoints;np++){
   1ae02:	464b      	mov	r3, r9
   1ae04:	2b00      	cmp	r3, #0
   1ae06:	d01a      	beq.n	1ae3e <cal_angleYZ+0x16e>
   1ae08:	003b      	movs	r3, r7
   1ae0a:	2500      	movs	r5, #0
   1ae0c:	464f      	mov	r7, r9
   1ae0e:	2400      	movs	r4, #0
   1ae10:	4699      	mov	r9, r3
				tempX1[i][j] = tempX1[i][j]+X[np][j]*X[np][i];
   1ae12:	464a      	mov	r2, r9
   1ae14:	0063      	lsls	r3, r4, #1
   1ae16:	189a      	adds	r2, r3, r2
   1ae18:	4453      	add	r3, sl
   1ae1a:	0092      	lsls	r2, r2, #2
   1ae1c:	009b      	lsls	r3, r3, #2
   1ae1e:	58f1      	ldr	r1, [r6, r3]
   1ae20:	58b0      	ldr	r0, [r6, r2]
   1ae22:	47d8      	blx	fp
   1ae24:	1c01      	adds	r1, r0, #0
   1ae26:	1c28      	adds	r0, r5, #0
   1ae28:	47c0      	blx	r8
			for (np=0;np<nPoints;np++){
   1ae2a:	3401      	adds	r4, #1
   1ae2c:	b2e4      	uxtb	r4, r4
				tempX1[i][j] = tempX1[i][j]+X[np][j]*X[np][i];
   1ae2e:	1c05      	adds	r5, r0, #0
			for (np=0;np<nPoints;np++){
   1ae30:	42a7      	cmp	r7, r4
   1ae32:	d8ee      	bhi.n	1ae12 <cal_angleYZ+0x142>
   1ae34:	464b      	mov	r3, r9
   1ae36:	46b9      	mov	r9, r7
   1ae38:	001f      	movs	r7, r3
   1ae3a:	9b00      	ldr	r3, [sp, #0]
   1ae3c:	6018      	str	r0, [r3, #0]
   1ae3e:	9b00      	ldr	r3, [sp, #0]
   1ae40:	3701      	adds	r7, #1
   1ae42:	3304      	adds	r3, #4
   1ae44:	9300      	str	r3, [sp, #0]
		for (j=0;j<2;j++){
   1ae46:	2f02      	cmp	r7, #2
   1ae48:	d1d9      	bne.n	1adfe <cal_angleYZ+0x12e>
   1ae4a:	2301      	movs	r3, #1
   1ae4c:	469c      	mov	ip, r3
   1ae4e:	44e2      	add	sl, ip
	for (i=0;i<2;i++){
   1ae50:	4653      	mov	r3, sl
   1ae52:	2b02      	cmp	r3, #2
   1ae54:	d1cc      	bne.n	1adf0 <cal_angleYZ+0x120>
	detX = tempX1[0][0]*tempX1[1][1]-(tempX1[0][1]*tempX1[1][0]);
   1ae56:	9b08      	ldr	r3, [sp, #32]
   1ae58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ae5a:	469a      	mov	sl, r3
   1ae5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ae5e:	4650      	mov	r0, sl
   1ae60:	1c19      	adds	r1, r3, #0
   1ae62:	9300      	str	r3, [sp, #0]
   1ae64:	464f      	mov	r7, r9
   1ae66:	4691      	mov	r9, r2
   1ae68:	47d8      	blx	fp
   1ae6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1ae6c:	1c04      	adds	r4, r0, #0
   1ae6e:	4649      	mov	r1, r9
   1ae70:	1c28      	adds	r0, r5, #0
   1ae72:	47d8      	blx	fp
   1ae74:	9a01      	ldr	r2, [sp, #4]
   1ae76:	1c01      	adds	r1, r0, #0
   1ae78:	1c20      	adds	r0, r4, #0
   1ae7a:	4790      	blx	r2
	tempX2[0][0] = tempX1[1][1]/detX;
   1ae7c:	4c47      	ldr	r4, [pc, #284]	; (1af9c <cal_angleYZ+0x2cc>)
	detX = tempX1[0][0]*tempX1[1][1]-(tempX1[0][1]*tempX1[1][0]);
   1ae7e:	1c06      	adds	r6, r0, #0
	tempX2[0][0] = tempX1[1][1]/detX;
   1ae80:	1c01      	adds	r1, r0, #0
   1ae82:	9800      	ldr	r0, [sp, #0]
   1ae84:	47a0      	blx	r4
	tempX2[1][1] = tempX1[0][0]/detX;
   1ae86:	1c31      	adds	r1, r6, #0
	tempX2[0][0] = tempX1[1][1]/detX;
   1ae88:	9000      	str	r0, [sp, #0]
	tempX2[1][1] = tempX1[0][0]/detX;
   1ae8a:	4650      	mov	r0, sl
   1ae8c:	47a0      	blx	r4
	tempX2[0][1] = -1*tempX1[1][0]/detX;
   1ae8e:	2380      	movs	r3, #128	; 0x80
   1ae90:	061b      	lsls	r3, r3, #24
   1ae92:	444b      	add	r3, r9
	tempX2[1][1] = tempX1[0][0]/detX;
   1ae94:	9002      	str	r0, [sp, #8]
	tempX2[0][1] = -1*tempX1[1][0]/detX;
   1ae96:	1c31      	adds	r1, r6, #0
   1ae98:	0018      	movs	r0, r3
   1ae9a:	47a0      	blx	r4
	tempX2[1][0] = -1*tempX1[0][1]/detX;
   1ae9c:	2380      	movs	r3, #128	; 0x80
   1ae9e:	061b      	lsls	r3, r3, #24
	tempX2[0][1] = -1*tempX1[1][0]/detX;
   1aea0:	9003      	str	r0, [sp, #12]
	tempX2[1][0] = -1*tempX1[0][1]/detX;
   1aea2:	1c31      	adds	r1, r6, #0
   1aea4:	18e8      	adds	r0, r5, r3
   1aea6:	47a0      	blx	r4
   1aea8:	2300      	movs	r3, #0
   1aeaa:	4699      	mov	r9, r3
   1aeac:	003b      	movs	r3, r7
   1aeae:	464f      	mov	r7, r9
   1aeb0:	4699      	mov	r9, r3
   1aeb2:	9004      	str	r0, [sp, #16]
   1aeb4:	ac70      	add	r4, sp, #448	; 0x1c0
   1aeb6:	00bb      	lsls	r3, r7, #2
   1aeb8:	469a      	mov	sl, r3
		tempX3[i] = 0;
   1aeba:	2100      	movs	r1, #0
   1aebc:	4652      	mov	r2, sl
   1aebe:	ab06      	add	r3, sp, #24
   1aec0:	5099      	str	r1, [r3, r2]
		for (np=0;np<nPoints;np++){
   1aec2:	464b      	mov	r3, r9
   1aec4:	2600      	movs	r6, #0
   1aec6:	2500      	movs	r5, #0
   1aec8:	2b00      	cmp	r3, #0
   1aeca:	d015      	beq.n	1aef8 <cal_angleYZ+0x228>
			tempX3[i] = tempX3[i] + X[np][i]*x_ang_shift[np];
   1aecc:	20ce      	movs	r0, #206	; 0xce
   1aece:	00aa      	lsls	r2, r5, #2
   1aed0:	006b      	lsls	r3, r5, #1
   1aed2:	58a1      	ldr	r1, [r4, r2]
   1aed4:	0080      	lsls	r0, r0, #2
   1aed6:	19db      	adds	r3, r3, r7
   1aed8:	aa06      	add	r2, sp, #24
   1aeda:	009b      	lsls	r3, r3, #2
   1aedc:	1812      	adds	r2, r2, r0
   1aede:	58d0      	ldr	r0, [r2, r3]
   1aee0:	47d8      	blx	fp
   1aee2:	1c01      	adds	r1, r0, #0
   1aee4:	1c30      	adds	r0, r6, #0
   1aee6:	47c0      	blx	r8
		for (np=0;np<nPoints;np++){
   1aee8:	3501      	adds	r5, #1
   1aeea:	b2ed      	uxtb	r5, r5
			tempX3[i] = tempX3[i] + X[np][i]*x_ang_shift[np];
   1aeec:	1c06      	adds	r6, r0, #0
		for (np=0;np<nPoints;np++){
   1aeee:	45a9      	cmp	r9, r5
   1aef0:	d8ec      	bhi.n	1aecc <cal_angleYZ+0x1fc>
   1aef2:	4652      	mov	r2, sl
   1aef4:	ab06      	add	r3, sp, #24
   1aef6:	5098      	str	r0, [r3, r2]
   1aef8:	3701      	adds	r7, #1
	for (i=0;i<2;i++){
   1aefa:	2f02      	cmp	r7, #2
   1aefc:	d1db      	bne.n	1aeb6 <cal_angleYZ+0x1e6>
   1aefe:	9d06      	ldr	r5, [sp, #24]
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
   1af00:	9800      	ldr	r0, [sp, #0]
   1af02:	1c29      	adds	r1, r5, #0
   1af04:	47d8      	blx	fp
   1af06:	2100      	movs	r1, #0
   1af08:	47c0      	blx	r8
   1af0a:	9c07      	ldr	r4, [sp, #28]
   1af0c:	1c06      	adds	r6, r0, #0
   1af0e:	1c21      	adds	r1, r4, #0
   1af10:	9803      	ldr	r0, [sp, #12]
   1af12:	47d8      	blx	fp
   1af14:	1c01      	adds	r1, r0, #0
   1af16:	1c30      	adds	r0, r6, #0
   1af18:	47c0      	blx	r8
	cal_struct->thetaY += B[0];
   1af1a:	9e05      	ldr	r6, [sp, #20]
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
   1af1c:	1c01      	adds	r1, r0, #0
	cal_struct->thetaY += B[0];
   1af1e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   1af20:	47c0      	blx	r8
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
   1af22:	1c29      	adds	r1, r5, #0
	cal_struct->thetaY += B[0];
   1af24:	62f0      	str	r0, [r6, #44]	; 0x2c
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
   1af26:	9804      	ldr	r0, [sp, #16]
   1af28:	47d8      	blx	fp
   1af2a:	2100      	movs	r1, #0
   1af2c:	47c0      	blx	r8
   1af2e:	1c21      	adds	r1, r4, #0
   1af30:	1c05      	adds	r5, r0, #0
   1af32:	9802      	ldr	r0, [sp, #8]
   1af34:	47d8      	blx	fp
   1af36:	1c01      	adds	r1, r0, #0
   1af38:	1c28      	adds	r0, r5, #0
   1af3a:	47c0      	blx	r8
	cal_struct->thetaZ += -1*B[1];
   1af3c:	9b01      	ldr	r3, [sp, #4]
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
   1af3e:	1c01      	adds	r1, r0, #0
	cal_struct->thetaZ += -1*B[1];
   1af40:	6b30      	ldr	r0, [r6, #48]	; 0x30
   1af42:	4798      	blx	r3
	gen_RotM(cal_struct);
   1af44:	4b16      	ldr	r3, [pc, #88]	; (1afa0 <cal_angleYZ+0x2d0>)
	cal_struct->thetaZ += -1*B[1];
   1af46:	6330      	str	r0, [r6, #48]	; 0x30
	gen_RotM(cal_struct);
   1af48:	0030      	movs	r0, r6
   1af4a:	4798      	blx	r3
}
   1af4c:	4b15      	ldr	r3, [pc, #84]	; (1afa4 <cal_angleYZ+0x2d4>)
   1af4e:	449d      	add	sp, r3
   1af50:	bc3c      	pop	{r2, r3, r4, r5}
   1af52:	4690      	mov	r8, r2
   1af54:	4699      	mov	r9, r3
   1af56:	46a2      	mov	sl, r4
   1af58:	46ab      	mov	fp, r5
   1af5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af5c:	4b04      	ldr	r3, [pc, #16]	; (1af70 <cal_angleYZ+0x2a0>)
   1af5e:	9301      	str	r3, [sp, #4]
   1af60:	e712      	b.n	1ad88 <cal_angleYZ+0xb8>
   1af62:	4b07      	ldr	r3, [pc, #28]	; (1af80 <cal_angleYZ+0x2b0>)
   1af64:	469b      	mov	fp, r3
   1af66:	e73d      	b.n	1ade4 <cal_angleYZ+0x114>
   1af68:	20003394 	.word	0x20003394
   1af6c:	fffff98c 	.word	0xfffff98c
   1af70:	00026799 	.word	0x00026799
   1af74:	0001284d 	.word	0x0001284d
   1af78:	00012a05 	.word	0x00012a05
   1af7c:	20002d38 	.word	0x20002d38
   1af80:	00026559 	.word	0x00026559
   1af84:	0002878d 	.word	0x0002878d
   1af88:	00028831 	.word	0x00028831
   1af8c:	3c8efa35 	.word	0x3c8efa35
   1af90:	00022ee9 	.word	0x00022ee9
   1af94:	00022f75 	.word	0x00022f75
   1af98:	00025e55 	.word	0x00025e55
   1af9c:	00026179 	.word	0x00026179
   1afa0:	0001aa19 	.word	0x0001aa19
   1afa4:	00000674 	.word	0x00000674

0001afa8 <cal_gain_off>:





void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
   1afa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1afaa:	4645      	mov	r5, r8
   1afac:	46de      	mov	lr, fp
   1afae:	4657      	mov	r7, sl
   1afb0:	464e      	mov	r6, r9
   1afb2:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i,j,k;
	

	
	
	for (i=0;i<nPoints;i++){
   1afb4:	4bf5      	ldr	r3, [pc, #980]	; (1b38c <cal_gain_off+0x3e4>)
void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
   1afb6:	4cf6      	ldr	r4, [pc, #984]	; (1b390 <cal_gain_off+0x3e8>)
	for (i=0;i<nPoints;i++){
   1afb8:	681b      	ldr	r3, [r3, #0]
void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
   1afba:	44a5      	add	sp, r4
   1afbc:	9000      	str	r0, [sp, #0]
   1afbe:	9103      	str	r1, [sp, #12]
	for (i=0;i<nPoints;i++){
   1afc0:	4698      	mov	r8, r3
   1afc2:	2b00      	cmp	r3, #0
   1afc4:	d100      	bne.n	1afc8 <cal_gain_off+0x20>
   1afc6:	e253      	b.n	1b470 <cal_gain_off+0x4c8>
   1afc8:	4af2      	ldr	r2, [pc, #968]	; (1b394 <cal_gain_off+0x3ec>)
   1afca:	2300      	movs	r3, #0
   1afcc:	4692      	mov	sl, r2
   1afce:	4af2      	ldr	r2, [pc, #968]	; (1b398 <cal_gain_off+0x3f0>)
   1afd0:	2700      	movs	r7, #0
   1afd2:	4693      	mov	fp, r2
		D[i][0] = XYZ[i][0]*XYZ[i][0];
   1afd4:	005d      	lsls	r5, r3, #1
   1afd6:	18ed      	adds	r5, r5, r3
   1afd8:	9b00      	ldr	r3, [sp, #0]
   1afda:	00ad      	lsls	r5, r5, #2
   1afdc:	469c      	mov	ip, r3
   1afde:	4465      	add	r5, ip
   1afe0:	682b      	ldr	r3, [r5, #0]
   1afe2:	007c      	lsls	r4, r7, #1
   1afe4:	1c19      	adds	r1, r3, #0
   1afe6:	1c18      	adds	r0, r3, #0
   1afe8:	4699      	mov	r9, r3
   1afea:	47d0      	blx	sl
   1afec:	22c0      	movs	r2, #192	; 0xc0
   1afee:	19e4      	adds	r4, r4, r7
   1aff0:	ab08      	add	r3, sp, #32
   1aff2:	189b      	adds	r3, r3, r2
   1aff4:	00e4      	lsls	r4, r4, #3
   1aff6:	5118      	str	r0, [r3, r4]
		D[i][1] = XYZ[i][1]*XYZ[i][1];
   1aff8:	ab38      	add	r3, sp, #224	; 0xe0
   1affa:	469c      	mov	ip, r3
   1affc:	686e      	ldr	r6, [r5, #4]
   1affe:	4464      	add	r4, ip
   1b000:	1c31      	adds	r1, r6, #0
   1b002:	1c30      	adds	r0, r6, #0
   1b004:	47d0      	blx	sl
		D[i][2] = XYZ[i][2]*XYZ[i][2];
   1b006:	68ad      	ldr	r5, [r5, #8]
		D[i][1] = XYZ[i][1]*XYZ[i][1];
   1b008:	6060      	str	r0, [r4, #4]
		D[i][2] = XYZ[i][2]*XYZ[i][2];
   1b00a:	1c29      	adds	r1, r5, #0
   1b00c:	1c28      	adds	r0, r5, #0
   1b00e:	47d0      	blx	sl
		D[i][3] = 2*XYZ[i][0];
   1b010:	4649      	mov	r1, r9
		D[i][2] = XYZ[i][2]*XYZ[i][2];
   1b012:	60a0      	str	r0, [r4, #8]
		D[i][3] = 2*XYZ[i][0];
   1b014:	4648      	mov	r0, r9
   1b016:	47d8      	blx	fp
		D[i][4] = 2*XYZ[i][1];
   1b018:	1c31      	adds	r1, r6, #0
		D[i][3] = 2*XYZ[i][0];
   1b01a:	60e0      	str	r0, [r4, #12]
		D[i][4] = 2*XYZ[i][1];
   1b01c:	1c30      	adds	r0, r6, #0
   1b01e:	47d8      	blx	fp
		D[i][5] = 2*XYZ[i][2];
   1b020:	1c29      	adds	r1, r5, #0
		D[i][4] = 2*XYZ[i][1];
   1b022:	6120      	str	r0, [r4, #16]
		D[i][5] = 2*XYZ[i][2];
   1b024:	1c28      	adds	r0, r5, #0
   1b026:	47d8      	blx	fp
	for (i=0;i<nPoints;i++){
   1b028:	3701      	adds	r7, #1
   1b02a:	b2ff      	uxtb	r7, r7
		D[i][5] = 2*XYZ[i][2];
   1b02c:	6160      	str	r0, [r4, #20]
	for (i=0;i<nPoints;i++){
   1b02e:	003b      	movs	r3, r7
   1b030:	4547      	cmp	r7, r8
   1b032:	d3cf      	bcc.n	1afd4 <cal_gain_off+0x2c>
   1b034:	ab14      	add	r3, sp, #80	; 0x50
   1b036:	9302      	str	r3, [sp, #8]
	}
	
	for (i=0;i<6;i++){
		for (j=0;j<6;j++){
			temp1[i][j] = 0;
			for (k=0;k<nPoints;k++){
   1b038:	2300      	movs	r3, #0
   1b03a:	4699      	mov	r9, r3
   1b03c:	ae38      	add	r6, sp, #224	; 0xe0
	for (i=0;i<nPoints;i++){
   1b03e:	2700      	movs	r7, #0
   1b040:	9b02      	ldr	r3, [sp, #8]
   1b042:	9300      	str	r3, [sp, #0]
			temp1[i][j] = 0;
   1b044:	2200      	movs	r2, #0
   1b046:	601a      	str	r2, [r3, #0]
			for (k=0;k<nPoints;k++){
   1b048:	4643      	mov	r3, r8
   1b04a:	2b00      	cmp	r3, #0
   1b04c:	d01c      	beq.n	1b088 <cal_gain_off+0xe0>
   1b04e:	003b      	movs	r3, r7
   1b050:	2500      	movs	r5, #0
   1b052:	4647      	mov	r7, r8
   1b054:	2400      	movs	r4, #0
   1b056:	4698      	mov	r8, r3
				temp1[i][j] = temp1[i][j] + D[k][i]*D[k][j];
   1b058:	464a      	mov	r2, r9
   1b05a:	0063      	lsls	r3, r4, #1
   1b05c:	191b      	adds	r3, r3, r4
   1b05e:	005b      	lsls	r3, r3, #1
   1b060:	189a      	adds	r2, r3, r2
   1b062:	4443      	add	r3, r8
   1b064:	0092      	lsls	r2, r2, #2
   1b066:	009b      	lsls	r3, r3, #2
   1b068:	58f1      	ldr	r1, [r6, r3]
   1b06a:	58b0      	ldr	r0, [r6, r2]
   1b06c:	47d0      	blx	sl
   1b06e:	1c01      	adds	r1, r0, #0
   1b070:	1c28      	adds	r0, r5, #0
   1b072:	47d8      	blx	fp
			for (k=0;k<nPoints;k++){
   1b074:	3401      	adds	r4, #1
   1b076:	b2e4      	uxtb	r4, r4
				temp1[i][j] = temp1[i][j] + D[k][i]*D[k][j];
   1b078:	1c05      	adds	r5, r0, #0
			for (k=0;k<nPoints;k++){
   1b07a:	42a7      	cmp	r7, r4
   1b07c:	d8ec      	bhi.n	1b058 <cal_gain_off+0xb0>
   1b07e:	4643      	mov	r3, r8
   1b080:	46b8      	mov	r8, r7
   1b082:	001f      	movs	r7, r3
   1b084:	9b00      	ldr	r3, [sp, #0]
   1b086:	6018      	str	r0, [r3, #0]
   1b088:	9b00      	ldr	r3, [sp, #0]
   1b08a:	3701      	adds	r7, #1
   1b08c:	3304      	adds	r3, #4
   1b08e:	9300      	str	r3, [sp, #0]
		for (j=0;j<6;j++){
   1b090:	2f06      	cmp	r7, #6
   1b092:	d1d7      	bne.n	1b044 <cal_gain_off+0x9c>
   1b094:	2301      	movs	r3, #1
   1b096:	469c      	mov	ip, r3
   1b098:	9b02      	ldr	r3, [sp, #8]
   1b09a:	44e1      	add	r9, ip
   1b09c:	3318      	adds	r3, #24
   1b09e:	9302      	str	r3, [sp, #8]
	for (i=0;i<6;i++){
   1b0a0:	464b      	mov	r3, r9
   1b0a2:	2b06      	cmp	r3, #6
   1b0a4:	d1cb      	bne.n	1b03e <cal_gain_off+0x96>
				
			}
		}
	}
	
	inverse(temp1, temp1, 6);
   1b0a6:	a914      	add	r1, sp, #80	; 0x50
   1b0a8:	4bbc      	ldr	r3, [pc, #752]	; (1b39c <cal_gain_off+0x3f4>)
   1b0aa:	2206      	movs	r2, #6
   1b0ac:	0008      	movs	r0, r1
   1b0ae:	4798      	blx	r3
   1b0b0:	4bb6      	ldr	r3, [pc, #728]	; (1b38c <cal_gain_off+0x3e4>)
   1b0b2:	2600      	movs	r6, #0
   1b0b4:	681f      	ldr	r7, [r3, #0]
   1b0b6:	ab08      	add	r3, sp, #32
   1b0b8:	4698      	mov	r8, r3
	
	for (i=0;i<6;i++){
		temp2[i] = 0;
   1b0ba:	2300      	movs	r3, #0
   1b0bc:	4699      	mov	r9, r3
   1b0be:	ad38      	add	r5, sp, #224	; 0xe0
   1b0c0:	4643      	mov	r3, r8
   1b0c2:	464a      	mov	r2, r9
		for (k = 0;k<nPoints;k++){
   1b0c4:	2000      	movs	r0, #0
		temp2[i] = 0;
   1b0c6:	601a      	str	r2, [r3, #0]
		for (k = 0;k<nPoints;k++){
   1b0c8:	2400      	movs	r4, #0
   1b0ca:	2f00      	cmp	r7, #0
   1b0cc:	d00c      	beq.n	1b0e8 <cal_gain_off+0x140>
			temp2[i] = temp2[i]+D[k][i];
   1b0ce:	0063      	lsls	r3, r4, #1
   1b0d0:	191b      	adds	r3, r3, r4
   1b0d2:	005b      	lsls	r3, r3, #1
   1b0d4:	199b      	adds	r3, r3, r6
   1b0d6:	009b      	lsls	r3, r3, #2
		for (k = 0;k<nPoints;k++){
   1b0d8:	3401      	adds	r4, #1
			temp2[i] = temp2[i]+D[k][i];
   1b0da:	58e9      	ldr	r1, [r5, r3]
		for (k = 0;k<nPoints;k++){
   1b0dc:	b2e4      	uxtb	r4, r4
			temp2[i] = temp2[i]+D[k][i];
   1b0de:	47d8      	blx	fp
		for (k = 0;k<nPoints;k++){
   1b0e0:	42bc      	cmp	r4, r7
   1b0e2:	d3f4      	bcc.n	1b0ce <cal_gain_off+0x126>
   1b0e4:	4643      	mov	r3, r8
   1b0e6:	6018      	str	r0, [r3, #0]
   1b0e8:	2304      	movs	r3, #4
   1b0ea:	469c      	mov	ip, r3
   1b0ec:	3601      	adds	r6, #1
   1b0ee:	44e0      	add	r8, ip
	for (i=0;i<6;i++){
   1b0f0:	2e06      	cmp	r6, #6
   1b0f2:	d1e5      	bne.n	1b0c0 <cal_gain_off+0x118>
   1b0f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b0f6:	9f08      	ldr	r7, [sp, #32]
   1b0f8:	4698      	mov	r8, r3
   1b0fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	

	for (i=0;i<6;i++){
		v[i] = 0;
		for (j=0;j<6;j++){
			v[i] = v[i]+temp1[i][j]*temp2[j];
   1b0fc:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b0fe:	4699      	mov	r9, r3
   1b100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b102:	1c38      	adds	r0, r7, #0
   1b104:	9300      	str	r3, [sp, #0]
   1b106:	47d0      	blx	sl
   1b108:	2100      	movs	r1, #0
   1b10a:	47d8      	blx	fp
   1b10c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1b10e:	1c06      	adds	r6, r0, #0
   1b110:	9915      	ldr	r1, [sp, #84]	; 0x54
   1b112:	1c28      	adds	r0, r5, #0
   1b114:	47d0      	blx	sl
   1b116:	1c01      	adds	r1, r0, #0
   1b118:	1c30      	adds	r0, r6, #0
   1b11a:	47d8      	blx	fp
   1b11c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1b11e:	1c06      	adds	r6, r0, #0
   1b120:	9916      	ldr	r1, [sp, #88]	; 0x58
   1b122:	1c20      	adds	r0, r4, #0
   1b124:	47d0      	blx	sl
   1b126:	1c01      	adds	r1, r0, #0
   1b128:	1c30      	adds	r0, r6, #0
   1b12a:	47d8      	blx	fp
   1b12c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1b12e:	1c06      	adds	r6, r0, #0
   1b130:	4640      	mov	r0, r8
   1b132:	47d0      	blx	sl
   1b134:	1c01      	adds	r1, r0, #0
   1b136:	1c30      	adds	r0, r6, #0
   1b138:	47d8      	blx	fp
   1b13a:	9918      	ldr	r1, [sp, #96]	; 0x60
   1b13c:	1c06      	adds	r6, r0, #0
   1b13e:	4648      	mov	r0, r9
   1b140:	47d0      	blx	sl
   1b142:	1c01      	adds	r1, r0, #0
   1b144:	1c30      	adds	r0, r6, #0
   1b146:	47d8      	blx	fp
   1b148:	9919      	ldr	r1, [sp, #100]	; 0x64
   1b14a:	1c06      	adds	r6, r0, #0
   1b14c:	9800      	ldr	r0, [sp, #0]
   1b14e:	47d0      	blx	sl
   1b150:	1c01      	adds	r1, r0, #0
   1b152:	1c30      	adds	r0, r6, #0
   1b154:	47d8      	blx	fp
   1b156:	991a      	ldr	r1, [sp, #104]	; 0x68
   1b158:	9004      	str	r0, [sp, #16]
   1b15a:	900e      	str	r0, [sp, #56]	; 0x38
   1b15c:	1c38      	adds	r0, r7, #0
   1b15e:	47d0      	blx	sl
   1b160:	2100      	movs	r1, #0
   1b162:	47d8      	blx	fp
   1b164:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1b166:	1c06      	adds	r6, r0, #0
   1b168:	1c28      	adds	r0, r5, #0
   1b16a:	47d0      	blx	sl
   1b16c:	1c01      	adds	r1, r0, #0
   1b16e:	1c30      	adds	r0, r6, #0
   1b170:	47d8      	blx	fp
   1b172:	991c      	ldr	r1, [sp, #112]	; 0x70
   1b174:	1c06      	adds	r6, r0, #0
   1b176:	1c20      	adds	r0, r4, #0
   1b178:	47d0      	blx	sl
   1b17a:	1c01      	adds	r1, r0, #0
   1b17c:	1c30      	adds	r0, r6, #0
   1b17e:	47d8      	blx	fp
   1b180:	991d      	ldr	r1, [sp, #116]	; 0x74
   1b182:	1c06      	adds	r6, r0, #0
   1b184:	4640      	mov	r0, r8
   1b186:	47d0      	blx	sl
   1b188:	1c01      	adds	r1, r0, #0
   1b18a:	1c30      	adds	r0, r6, #0
   1b18c:	47d8      	blx	fp
   1b18e:	991e      	ldr	r1, [sp, #120]	; 0x78
   1b190:	1c06      	adds	r6, r0, #0
   1b192:	4648      	mov	r0, r9
   1b194:	47d0      	blx	sl
   1b196:	1c01      	adds	r1, r0, #0
   1b198:	1c30      	adds	r0, r6, #0
   1b19a:	47d8      	blx	fp
   1b19c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1b19e:	1c06      	adds	r6, r0, #0
   1b1a0:	9800      	ldr	r0, [sp, #0]
   1b1a2:	47d0      	blx	sl
   1b1a4:	1c01      	adds	r1, r0, #0
   1b1a6:	1c30      	adds	r0, r6, #0
   1b1a8:	47d8      	blx	fp
   1b1aa:	9920      	ldr	r1, [sp, #128]	; 0x80
   1b1ac:	9002      	str	r0, [sp, #8]
   1b1ae:	900f      	str	r0, [sp, #60]	; 0x3c
   1b1b0:	1c38      	adds	r0, r7, #0
   1b1b2:	47d0      	blx	sl
   1b1b4:	2100      	movs	r1, #0
   1b1b6:	47d8      	blx	fp
   1b1b8:	9921      	ldr	r1, [sp, #132]	; 0x84
   1b1ba:	1c06      	adds	r6, r0, #0
   1b1bc:	1c28      	adds	r0, r5, #0
   1b1be:	47d0      	blx	sl
   1b1c0:	1c01      	adds	r1, r0, #0
   1b1c2:	1c30      	adds	r0, r6, #0
   1b1c4:	47d8      	blx	fp
   1b1c6:	9922      	ldr	r1, [sp, #136]	; 0x88
   1b1c8:	1c06      	adds	r6, r0, #0
   1b1ca:	1c20      	adds	r0, r4, #0
   1b1cc:	47d0      	blx	sl
   1b1ce:	1c01      	adds	r1, r0, #0
   1b1d0:	1c30      	adds	r0, r6, #0
   1b1d2:	47d8      	blx	fp
   1b1d4:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1b1d6:	1c06      	adds	r6, r0, #0
   1b1d8:	4640      	mov	r0, r8
   1b1da:	47d0      	blx	sl
   1b1dc:	1c01      	adds	r1, r0, #0
   1b1de:	1c30      	adds	r0, r6, #0
   1b1e0:	47d8      	blx	fp
   1b1e2:	9924      	ldr	r1, [sp, #144]	; 0x90
   1b1e4:	1c06      	adds	r6, r0, #0
   1b1e6:	4648      	mov	r0, r9
   1b1e8:	47d0      	blx	sl
   1b1ea:	1c01      	adds	r1, r0, #0
   1b1ec:	1c30      	adds	r0, r6, #0
   1b1ee:	47d8      	blx	fp
   1b1f0:	9925      	ldr	r1, [sp, #148]	; 0x94
   1b1f2:	1c06      	adds	r6, r0, #0
   1b1f4:	9800      	ldr	r0, [sp, #0]
   1b1f6:	47d0      	blx	sl
   1b1f8:	1c01      	adds	r1, r0, #0
   1b1fa:	1c30      	adds	r0, r6, #0
   1b1fc:	47d8      	blx	fp
   1b1fe:	9006      	str	r0, [sp, #24]
   1b200:	9010      	str	r0, [sp, #64]	; 0x40
   1b202:	9926      	ldr	r1, [sp, #152]	; 0x98
   1b204:	1c38      	adds	r0, r7, #0
   1b206:	47d0      	blx	sl
   1b208:	2100      	movs	r1, #0
   1b20a:	47d8      	blx	fp
   1b20c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   1b20e:	1c06      	adds	r6, r0, #0
   1b210:	1c28      	adds	r0, r5, #0
   1b212:	47d0      	blx	sl
   1b214:	1c01      	adds	r1, r0, #0
   1b216:	1c30      	adds	r0, r6, #0
   1b218:	47d8      	blx	fp
   1b21a:	9928      	ldr	r1, [sp, #160]	; 0xa0
   1b21c:	1c06      	adds	r6, r0, #0
   1b21e:	1c20      	adds	r0, r4, #0
   1b220:	47d0      	blx	sl
   1b222:	1c01      	adds	r1, r0, #0
   1b224:	1c30      	adds	r0, r6, #0
   1b226:	47d8      	blx	fp
   1b228:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1b22a:	1c06      	adds	r6, r0, #0
   1b22c:	4640      	mov	r0, r8
   1b22e:	47d0      	blx	sl
   1b230:	1c01      	adds	r1, r0, #0
   1b232:	1c30      	adds	r0, r6, #0
   1b234:	47d8      	blx	fp
   1b236:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1b238:	1c06      	adds	r6, r0, #0
   1b23a:	4648      	mov	r0, r9
   1b23c:	47d0      	blx	sl
   1b23e:	1c01      	adds	r1, r0, #0
   1b240:	1c30      	adds	r0, r6, #0
   1b242:	47d8      	blx	fp
   1b244:	992b      	ldr	r1, [sp, #172]	; 0xac
   1b246:	1c06      	adds	r6, r0, #0
   1b248:	9800      	ldr	r0, [sp, #0]
   1b24a:	47d0      	blx	sl
   1b24c:	1c01      	adds	r1, r0, #0
   1b24e:	1c30      	adds	r0, r6, #0
   1b250:	47d8      	blx	fp
   1b252:	992c      	ldr	r1, [sp, #176]	; 0xb0
   1b254:	9007      	str	r0, [sp, #28]
   1b256:	9011      	str	r0, [sp, #68]	; 0x44
   1b258:	1c38      	adds	r0, r7, #0
   1b25a:	47d0      	blx	sl
   1b25c:	2100      	movs	r1, #0
   1b25e:	47d8      	blx	fp
   1b260:	992d      	ldr	r1, [sp, #180]	; 0xb4
   1b262:	1c06      	adds	r6, r0, #0
   1b264:	1c28      	adds	r0, r5, #0
   1b266:	47d0      	blx	sl
   1b268:	1c01      	adds	r1, r0, #0
   1b26a:	1c30      	adds	r0, r6, #0
   1b26c:	47d8      	blx	fp
   1b26e:	992e      	ldr	r1, [sp, #184]	; 0xb8
   1b270:	1c06      	adds	r6, r0, #0
   1b272:	1c20      	adds	r0, r4, #0
   1b274:	47d0      	blx	sl
   1b276:	1c01      	adds	r1, r0, #0
   1b278:	1c30      	adds	r0, r6, #0
   1b27a:	47d8      	blx	fp
   1b27c:	992f      	ldr	r1, [sp, #188]	; 0xbc
   1b27e:	1c06      	adds	r6, r0, #0
   1b280:	4640      	mov	r0, r8
   1b282:	47d0      	blx	sl
   1b284:	1c01      	adds	r1, r0, #0
   1b286:	1c30      	adds	r0, r6, #0
   1b288:	47d8      	blx	fp
   1b28a:	9930      	ldr	r1, [sp, #192]	; 0xc0
   1b28c:	1c06      	adds	r6, r0, #0
   1b28e:	4648      	mov	r0, r9
   1b290:	47d0      	blx	sl
   1b292:	1c01      	adds	r1, r0, #0
   1b294:	1c30      	adds	r0, r6, #0
   1b296:	47d8      	blx	fp
   1b298:	9931      	ldr	r1, [sp, #196]	; 0xc4
   1b29a:	1c06      	adds	r6, r0, #0
   1b29c:	9800      	ldr	r0, [sp, #0]
   1b29e:	47d0      	blx	sl
   1b2a0:	1c01      	adds	r1, r0, #0
   1b2a2:	1c30      	adds	r0, r6, #0
   1b2a4:	47d8      	blx	fp
   1b2a6:	9932      	ldr	r1, [sp, #200]	; 0xc8
   1b2a8:	1c06      	adds	r6, r0, #0
   1b2aa:	9012      	str	r0, [sp, #72]	; 0x48
   1b2ac:	1c38      	adds	r0, r7, #0
   1b2ae:	47d0      	blx	sl
   1b2b0:	2100      	movs	r1, #0
   1b2b2:	47d8      	blx	fp
   1b2b4:	9933      	ldr	r1, [sp, #204]	; 0xcc
   1b2b6:	1c07      	adds	r7, r0, #0
   1b2b8:	1c28      	adds	r0, r5, #0
   1b2ba:	47d0      	blx	sl
   1b2bc:	1c01      	adds	r1, r0, #0
   1b2be:	1c38      	adds	r0, r7, #0
   1b2c0:	47d8      	blx	fp
   1b2c2:	2230      	movs	r2, #48	; 0x30
   1b2c4:	2380      	movs	r3, #128	; 0x80
   1b2c6:	af08      	add	r7, sp, #32
   1b2c8:	18bf      	adds	r7, r7, r2
   1b2ca:	58f9      	ldr	r1, [r7, r3]
   1b2cc:	1c05      	adds	r5, r0, #0
   1b2ce:	1c20      	adds	r0, r4, #0
   1b2d0:	47d0      	blx	sl
   1b2d2:	2730      	movs	r7, #48	; 0x30
   1b2d4:	1c01      	adds	r1, r0, #0
   1b2d6:	1c28      	adds	r0, r5, #0
   1b2d8:	47d8      	blx	fp
   1b2da:	2384      	movs	r3, #132	; 0x84
   1b2dc:	ad08      	add	r5, sp, #32
   1b2de:	19ed      	adds	r5, r5, r7
   1b2e0:	58e9      	ldr	r1, [r5, r3]
   1b2e2:	1c04      	adds	r4, r0, #0
   1b2e4:	4640      	mov	r0, r8
   1b2e6:	47d0      	blx	sl
   1b2e8:	1c01      	adds	r1, r0, #0
   1b2ea:	1c20      	adds	r0, r4, #0
   1b2ec:	47d8      	blx	fp
   1b2ee:	2388      	movs	r3, #136	; 0x88
   1b2f0:	ad08      	add	r5, sp, #32
   1b2f2:	19ed      	adds	r5, r5, r7
   1b2f4:	58e9      	ldr	r1, [r5, r3]
   1b2f6:	1c04      	adds	r4, r0, #0
   1b2f8:	4648      	mov	r0, r9
   1b2fa:	47d0      	blx	sl
   1b2fc:	1c01      	adds	r1, r0, #0
   1b2fe:	1c20      	adds	r0, r4, #0
   1b300:	47d8      	blx	fp
   1b302:	238c      	movs	r3, #140	; 0x8c
   1b304:	ad08      	add	r5, sp, #32
   1b306:	19ed      	adds	r5, r5, r7
   1b308:	58e9      	ldr	r1, [r5, r3]
   1b30a:	1c04      	adds	r4, r0, #0
   1b30c:	9800      	ldr	r0, [sp, #0]
   1b30e:	47d0      	blx	sl
   1b310:	1c01      	adds	r1, r0, #0
   1b312:	1c20      	adds	r0, r4, #0
   1b314:	47d8      	blx	fp
		
	}
	

	for (i=0;i<3;i++){
		cal_struct->offset[i] += -1*(v[i+3]/v[i]);
   1b316:	9b04      	ldr	r3, [sp, #16]
			v[i] = v[i]+temp1[i][j]*temp2[j];
   1b318:	1c07      	adds	r7, r0, #0
		cal_struct->offset[i] += -1*(v[i+3]/v[i]);
   1b31a:	469a      	mov	sl, r3
   1b31c:	1c19      	adds	r1, r3, #0
   1b31e:	9b07      	ldr	r3, [sp, #28]
   1b320:	4c1f      	ldr	r4, [pc, #124]	; (1b3a0 <cal_gain_off+0x3f8>)
			v[i] = v[i]+temp1[i][j]*temp2[j];
   1b322:	9013      	str	r0, [sp, #76]	; 0x4c
		cal_struct->offset[i] += -1*(v[i+3]/v[i]);
   1b324:	1c18      	adds	r0, r3, #0
   1b326:	4699      	mov	r9, r3
   1b328:	47a0      	blx	r4
   1b32a:	9d03      	ldr	r5, [sp, #12]
   1b32c:	4c1d      	ldr	r4, [pc, #116]	; (1b3a4 <cal_gain_off+0x3fc>)
   1b32e:	1c01      	adds	r1, r0, #0
   1b330:	6868      	ldr	r0, [r5, #4]
   1b332:	47a0      	blx	r4
   1b334:	4b1a      	ldr	r3, [pc, #104]	; (1b3a0 <cal_gain_off+0x3f8>)
   1b336:	6068      	str	r0, [r5, #4]
   1b338:	9902      	ldr	r1, [sp, #8]
   1b33a:	1c30      	adds	r0, r6, #0
   1b33c:	4798      	blx	r3
   1b33e:	1c01      	adds	r1, r0, #0
   1b340:	68a8      	ldr	r0, [r5, #8]
   1b342:	47a0      	blx	r4
   1b344:	4b16      	ldr	r3, [pc, #88]	; (1b3a0 <cal_gain_off+0x3f8>)
   1b346:	60a8      	str	r0, [r5, #8]
   1b348:	9906      	ldr	r1, [sp, #24]
   1b34a:	1c38      	adds	r0, r7, #0
   1b34c:	4798      	blx	r3
   1b34e:	1c01      	adds	r1, r0, #0
   1b350:	68e8      	ldr	r0, [r5, #12]
   1b352:	47a0      	blx	r4
	}
	
	
	g=1 + pow(v[3],2)/v[0]+pow(v[4],2)/v[1]+pow(v[5],2)/v[2];
   1b354:	4c14      	ldr	r4, [pc, #80]	; (1b3a8 <cal_gain_off+0x400>)
		cal_struct->offset[i] += -1*(v[i+3]/v[i]);
   1b356:	60e8      	str	r0, [r5, #12]
   1b358:	9503      	str	r5, [sp, #12]
	g=1 + pow(v[3],2)/v[0]+pow(v[4],2)/v[1]+pow(v[5],2)/v[2];
   1b35a:	4648      	mov	r0, r9
   1b35c:	47a0      	blx	r4
   1b35e:	46a0      	mov	r8, r4
   1b360:	0004      	movs	r4, r0
   1b362:	1c30      	adds	r0, r6, #0
   1b364:	000d      	movs	r5, r1
   1b366:	47c0      	blx	r8
   1b368:	9000      	str	r0, [sp, #0]
   1b36a:	9101      	str	r1, [sp, #4]
   1b36c:	1c38      	adds	r0, r7, #0
   1b36e:	47c0      	blx	r8
   1b370:	4e0e      	ldr	r6, [pc, #56]	; (1b3ac <cal_gain_off+0x404>)
   1b372:	0022      	movs	r2, r4
   1b374:	002b      	movs	r3, r5
   1b376:	9004      	str	r0, [sp, #16]
   1b378:	9105      	str	r1, [sp, #20]
   1b37a:	0020      	movs	r0, r4
   1b37c:	0029      	movs	r1, r5
   1b37e:	47b0      	blx	r6
   1b380:	0004      	movs	r4, r0
   1b382:	4650      	mov	r0, sl
   1b384:	000d      	movs	r5, r1
   1b386:	47c0      	blx	r8
   1b388:	e012      	b.n	1b3b0 <cal_gain_off+0x408>
   1b38a:	46c0      	nop			; (mov r8, r8)
   1b38c:	20002d38 	.word	0x20002d38
   1b390:	fffff5bc 	.word	0xfffff5bc
   1b394:	00026559 	.word	0x00026559
   1b398:	00025e55 	.word	0x00025e55
   1b39c:	00013b29 	.word	0x00013b29
   1b3a0:	00026179 	.word	0x00026179
   1b3a4:	00026799 	.word	0x00026799
   1b3a8:	0002878d 	.word	0x0002878d
   1b3ac:	00027ac5 	.word	0x00027ac5
   1b3b0:	46b3      	mov	fp, r6
   1b3b2:	4e32      	ldr	r6, [pc, #200]	; (1b47c <cal_gain_off+0x4d4>)
   1b3b4:	0002      	movs	r2, r0
   1b3b6:	000b      	movs	r3, r1
   1b3b8:	0020      	movs	r0, r4
   1b3ba:	0029      	movs	r1, r5
   1b3bc:	47b0      	blx	r6
   1b3be:	46b2      	mov	sl, r6
   1b3c0:	2200      	movs	r2, #0
   1b3c2:	4e2f      	ldr	r6, [pc, #188]	; (1b480 <cal_gain_off+0x4d8>)
   1b3c4:	4b2f      	ldr	r3, [pc, #188]	; (1b484 <cal_gain_off+0x4dc>)
   1b3c6:	47b0      	blx	r6
   1b3c8:	9c00      	ldr	r4, [sp, #0]
   1b3ca:	9d01      	ldr	r5, [sp, #4]
   1b3cc:	46b1      	mov	r9, r6
   1b3ce:	0022      	movs	r2, r4
   1b3d0:	002b      	movs	r3, r5
   1b3d2:	0006      	movs	r6, r0
   1b3d4:	000f      	movs	r7, r1
   1b3d6:	0020      	movs	r0, r4
   1b3d8:	0029      	movs	r1, r5
   1b3da:	47d8      	blx	fp
   1b3dc:	0004      	movs	r4, r0
   1b3de:	9802      	ldr	r0, [sp, #8]
   1b3e0:	000d      	movs	r5, r1
   1b3e2:	47c0      	blx	r8
   1b3e4:	0002      	movs	r2, r0
   1b3e6:	000b      	movs	r3, r1
   1b3e8:	0020      	movs	r0, r4
   1b3ea:	0029      	movs	r1, r5
   1b3ec:	47d0      	blx	sl
   1b3ee:	0002      	movs	r2, r0
   1b3f0:	000b      	movs	r3, r1
   1b3f2:	0030      	movs	r0, r6
   1b3f4:	0039      	movs	r1, r7
   1b3f6:	47c8      	blx	r9
   1b3f8:	0006      	movs	r6, r0
   1b3fa:	000f      	movs	r7, r1
   1b3fc:	9804      	ldr	r0, [sp, #16]
   1b3fe:	9905      	ldr	r1, [sp, #20]
   1b400:	0002      	movs	r2, r0
   1b402:	000b      	movs	r3, r1
   1b404:	47d8      	blx	fp
   1b406:	0004      	movs	r4, r0
   1b408:	9806      	ldr	r0, [sp, #24]
   1b40a:	000d      	movs	r5, r1
   1b40c:	47c0      	blx	r8
   1b40e:	0002      	movs	r2, r0
   1b410:	000b      	movs	r3, r1
   1b412:	0020      	movs	r0, r4
   1b414:	0029      	movs	r1, r5
   1b416:	47d0      	blx	sl
   1b418:	000b      	movs	r3, r1
   1b41a:	0002      	movs	r2, r0
   1b41c:	0039      	movs	r1, r7
   1b41e:	0030      	movs	r0, r6
   1b420:	47c8      	blx	r9
   1b422:	4a19      	ldr	r2, [pc, #100]	; (1b488 <cal_gain_off+0x4e0>)
   1b424:	2500      	movs	r5, #0
   1b426:	4691      	mov	r9, r2
   1b428:	4790      	blx	r2
   1b42a:	9b03      	ldr	r3, [sp, #12]
   1b42c:	9000      	str	r0, [sp, #0]
   1b42e:	3310      	adds	r3, #16
   1b430:	001c      	movs	r4, r3
   1b432:	4b16      	ldr	r3, [pc, #88]	; (1b48c <cal_gain_off+0x4e4>)
   1b434:	469a      	mov	sl, r3
	
	
	for (i=0;i<3;i++){
		cal_struct->gain[i] *= sqrt(g/v[i]);
   1b436:	2218      	movs	r2, #24
   1b438:	ab08      	add	r3, sp, #32
   1b43a:	189b      	adds	r3, r3, r2
   1b43c:	5959      	ldr	r1, [r3, r5]
   1b43e:	9800      	ldr	r0, [sp, #0]
   1b440:	4b13      	ldr	r3, [pc, #76]	; (1b490 <cal_gain_off+0x4e8>)
   1b442:	4798      	blx	r3
   1b444:	47c0      	blx	r8
   1b446:	47d0      	blx	sl
   1b448:	0006      	movs	r6, r0
   1b44a:	000f      	movs	r7, r1
   1b44c:	6820      	ldr	r0, [r4, #0]
   1b44e:	47c0      	blx	r8
   1b450:	0032      	movs	r2, r6
   1b452:	003b      	movs	r3, r7
   1b454:	47d8      	blx	fp
   1b456:	47c8      	blx	r9
   1b458:	3504      	adds	r5, #4
   1b45a:	c401      	stmia	r4!, {r0}
	for (i=0;i<3;i++){
   1b45c:	2d0c      	cmp	r5, #12
   1b45e:	d1ea      	bne.n	1b436 <cal_gain_off+0x48e>
		
	}
	

}
   1b460:	4b0c      	ldr	r3, [pc, #48]	; (1b494 <cal_gain_off+0x4ec>)
   1b462:	449d      	add	sp, r3
   1b464:	bc3c      	pop	{r2, r3, r4, r5}
   1b466:	4690      	mov	r8, r2
   1b468:	4699      	mov	r9, r3
   1b46a:	46a2      	mov	sl, r4
   1b46c:	46ab      	mov	fp, r5
   1b46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b470:	4b09      	ldr	r3, [pc, #36]	; (1b498 <cal_gain_off+0x4f0>)
   1b472:	469a      	mov	sl, r3
   1b474:	4b09      	ldr	r3, [pc, #36]	; (1b49c <cal_gain_off+0x4f4>)
   1b476:	469b      	mov	fp, r3
   1b478:	e5dc      	b.n	1b034 <cal_gain_off+0x8c>
   1b47a:	46c0      	nop			; (mov r8, r8)
   1b47c:	0002725d 	.word	0x0002725d
   1b480:	00026c3d 	.word	0x00026c3d
   1b484:	3ff00000 	.word	0x3ff00000
   1b488:	00028831 	.word	0x00028831
   1b48c:	00023365 	.word	0x00023365
   1b490:	00026179 	.word	0x00026179
   1b494:	00000a44 	.word	0x00000a44
   1b498:	00026559 	.word	0x00026559
   1b49c:	00025e55 	.word	0x00025e55

0001b4a0 <cal_full_inc_azm_process>:
void cal_full_inc_azm_process(uint8_t nLoops){
   1b4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4a2:	4657      	mov	r7, sl
   1b4a4:	464e      	mov	r6, r9
   1b4a6:	4645      	mov	r5, r8
   1b4a8:	46de      	mov	lr, fp
		cal_struct->gain[i] = 1;
   1b4aa:	22fe      	movs	r2, #254	; 0xfe
		cal_struct->offset[i] = 0;
   1b4ac:	2300      	movs	r3, #0
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1b4ae:	21b2      	movs	r1, #178	; 0xb2
void cal_full_inc_azm_process(uint8_t nLoops){
   1b4b0:	b5e0      	push	{r5, r6, r7, lr}
		cal_struct->gain[i] = 1;
   1b4b2:	4c5e      	ldr	r4, [pc, #376]	; (1b62c <cal_full_inc_azm_process+0x18c>)
   1b4b4:	4e5e      	ldr	r6, [pc, #376]	; (1b630 <cal_full_inc_azm_process+0x190>)
   1b4b6:	0592      	lsls	r2, r2, #22
void cal_full_inc_azm_process(uint8_t nLoops){
   1b4b8:	b083      	sub	sp, #12
   1b4ba:	9001      	str	r0, [sp, #4]
		cal_struct->gain[i] = 1;
   1b4bc:	6132      	str	r2, [r6, #16]
		cal_struct->offset[i] = 0;
   1b4be:	6073      	str	r3, [r6, #4]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b4c0:	63b3      	str	r3, [r6, #56]	; 0x38
   1b4c2:	63f3      	str	r3, [r6, #60]	; 0x3c
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b4c4:	6372      	str	r2, [r6, #52]	; 0x34
		cal_struct->gain[i] = 1;
   1b4c6:	6172      	str	r2, [r6, #20]
		cal_struct->offset[i] = 0;
   1b4c8:	60b3      	str	r3, [r6, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b4ca:	6433      	str	r3, [r6, #64]	; 0x40
   1b4cc:	64b3      	str	r3, [r6, #72]	; 0x48
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b4ce:	6472      	str	r2, [r6, #68]	; 0x44
		cal_struct->gain[i] = 1;
   1b4d0:	61b2      	str	r2, [r6, #24]
		cal_struct->offset[i] = 0;
   1b4d2:	60f3      	str	r3, [r6, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b4d4:	64f3      	str	r3, [r6, #76]	; 0x4c
   1b4d6:	6533      	str	r3, [r6, #80]	; 0x50
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b4d8:	6572      	str	r2, [r6, #84]	; 0x54
	cal_struct->axmYX = 0;
   1b4da:	61f3      	str	r3, [r6, #28]
	cal_struct->axmZY = 0;
   1b4dc:	6233      	str	r3, [r6, #32]
	cal_struct->axmZX = 0;
   1b4de:	6273      	str	r3, [r6, #36]	; 0x24
	cal_struct->thetaX = 0;
   1b4e0:	62b3      	str	r3, [r6, #40]	; 0x28
	cal_struct->thetaY = 0;
   1b4e2:	62f3      	str	r3, [r6, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   1b4e4:	6333      	str	r3, [r6, #48]	; 0x30
	cal_struct->dist_offset = 0;
   1b4e6:	65b3      	str	r3, [r6, #88]	; 0x58
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1b4e8:	7031      	strb	r1, [r6, #0]
		cal_struct->gain[i] = 1;
   1b4ea:	6122      	str	r2, [r4, #16]
		cal_struct->offset[i] = 0;
   1b4ec:	6063      	str	r3, [r4, #4]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b4ee:	63a3      	str	r3, [r4, #56]	; 0x38
   1b4f0:	63e3      	str	r3, [r4, #60]	; 0x3c
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b4f2:	6362      	str	r2, [r4, #52]	; 0x34
		cal_struct->gain[i] = 1;
   1b4f4:	4f4f      	ldr	r7, [pc, #316]	; (1b634 <cal_full_inc_azm_process+0x194>)
   1b4f6:	6162      	str	r2, [r4, #20]
		cal_struct->offset[i] = 0;
   1b4f8:	60a3      	str	r3, [r4, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b4fa:	6423      	str	r3, [r4, #64]	; 0x40
   1b4fc:	64a3      	str	r3, [r4, #72]	; 0x48
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b4fe:	6462      	str	r2, [r4, #68]	; 0x44
		cal_struct->gain[i] = 1;
   1b500:	61a2      	str	r2, [r4, #24]
		cal_struct->offset[i] = 0;
   1b502:	60e3      	str	r3, [r4, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b504:	64e3      	str	r3, [r4, #76]	; 0x4c
   1b506:	6523      	str	r3, [r4, #80]	; 0x50
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b508:	6562      	str	r2, [r4, #84]	; 0x54
	cal_struct->axmYX = 0;
   1b50a:	61e3      	str	r3, [r4, #28]
	cal_struct->axmZY = 0;
   1b50c:	6223      	str	r3, [r4, #32]
	cal_struct->axmZX = 0;
   1b50e:	6263      	str	r3, [r4, #36]	; 0x24
	cal_struct->thetaX = 0;
   1b510:	62a3      	str	r3, [r4, #40]	; 0x28
	cal_struct->thetaY = 0;
   1b512:	62e3      	str	r3, [r4, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   1b514:	6323      	str	r3, [r4, #48]	; 0x30
	cal_struct->dist_offset = 0;
   1b516:	65a3      	str	r3, [r4, #88]	; 0x58
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1b518:	7021      	strb	r1, [r4, #0]
		cal_struct->gain[i] = 1;
   1b51a:	613a      	str	r2, [r7, #16]
		cal_struct->offset[i] = 0;
   1b51c:	607b      	str	r3, [r7, #4]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b51e:	63bb      	str	r3, [r7, #56]	; 0x38
   1b520:	63fb      	str	r3, [r7, #60]	; 0x3c
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b522:	637a      	str	r2, [r7, #52]	; 0x34
		cal_struct->gain[i] = 1;
   1b524:	617a      	str	r2, [r7, #20]
		cal_struct->offset[i] = 0;
   1b526:	60bb      	str	r3, [r7, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b528:	643b      	str	r3, [r7, #64]	; 0x40
   1b52a:	64bb      	str	r3, [r7, #72]	; 0x48
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b52c:	647a      	str	r2, [r7, #68]	; 0x44
		cal_struct->gain[i] = 1;
   1b52e:	61ba      	str	r2, [r7, #24]
		cal_struct->offset[i] = 0;
   1b530:	60fb      	str	r3, [r7, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b532:	64fb      	str	r3, [r7, #76]	; 0x4c
   1b534:	653b      	str	r3, [r7, #80]	; 0x50
		cal_struct->gain[i] = 1;
   1b536:	4d40      	ldr	r5, [pc, #256]	; (1b638 <cal_full_inc_azm_process+0x198>)
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b538:	657a      	str	r2, [r7, #84]	; 0x54
	cal_struct->axmYX = 0;
   1b53a:	61fb      	str	r3, [r7, #28]
	cal_struct->axmZY = 0;
   1b53c:	623b      	str	r3, [r7, #32]
	cal_struct->axmZX = 0;
   1b53e:	627b      	str	r3, [r7, #36]	; 0x24
	cal_struct->thetaX = 0;
   1b540:	62bb      	str	r3, [r7, #40]	; 0x28
	cal_struct->thetaY = 0;
   1b542:	62fb      	str	r3, [r7, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   1b544:	633b      	str	r3, [r7, #48]	; 0x30
	cal_struct->dist_offset = 0;
   1b546:	65bb      	str	r3, [r7, #88]	; 0x58
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1b548:	7039      	strb	r1, [r7, #0]
		cal_struct->gain[i] = 1;
   1b54a:	612a      	str	r2, [r5, #16]
		cal_struct->offset[i] = 0;
   1b54c:	606b      	str	r3, [r5, #4]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b54e:	63ab      	str	r3, [r5, #56]	; 0x38
   1b550:	63eb      	str	r3, [r5, #60]	; 0x3c
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b552:	636a      	str	r2, [r5, #52]	; 0x34
		cal_struct->gain[i] = 1;
   1b554:	616a      	str	r2, [r5, #20]
		cal_struct->offset[i] = 0;
   1b556:	60ab      	str	r3, [r5, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b558:	642b      	str	r3, [r5, #64]	; 0x40
   1b55a:	64ab      	str	r3, [r5, #72]	; 0x48
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b55c:	646a      	str	r2, [r5, #68]	; 0x44
		cal_struct->gain[i] = 1;
   1b55e:	61aa      	str	r2, [r5, #24]
		cal_struct->offset[i] = 0;
   1b560:	60eb      	str	r3, [r5, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b562:	64eb      	str	r3, [r5, #76]	; 0x4c
   1b564:	652b      	str	r3, [r5, #80]	; 0x50
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b566:	656a      	str	r2, [r5, #84]	; 0x54
	cal_struct->axmYX = 0;
   1b568:	61eb      	str	r3, [r5, #28]
	cal_struct->axmZY = 0;
   1b56a:	622b      	str	r3, [r5, #32]
	cal_struct->axmZX = 0;
   1b56c:	626b      	str	r3, [r5, #36]	; 0x24
	cal_struct->thetaX = 0;
   1b56e:	62ab      	str	r3, [r5, #40]	; 0x28
	cal_struct->thetaY = 0;
   1b570:	62eb      	str	r3, [r5, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   1b572:	632b      	str	r3, [r5, #48]	; 0x30
	cal_struct->dist_offset = 0;
   1b574:	65ab      	str	r3, [r5, #88]	; 0x58
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1b576:	7029      	strb	r1, [r5, #0]
	for (loop=0;loop<nLoops;loop++){
   1b578:	2800      	cmp	r0, #0
   1b57a:	d053      	beq.n	1b624 <cal_full_inc_azm_process+0x184>
   1b57c:	2300      	movs	r3, #0
   1b57e:	469b      	mov	fp, r3
   1b580:	4b2e      	ldr	r3, [pc, #184]	; (1b63c <cal_full_inc_azm_process+0x19c>)
   1b582:	4698      	mov	r8, r3
   1b584:	4b2e      	ldr	r3, [pc, #184]	; (1b640 <cal_full_inc_azm_process+0x1a0>)
   1b586:	469a      	mov	sl, r3
   1b588:	4b2e      	ldr	r3, [pc, #184]	; (1b644 <cal_full_inc_azm_process+0x1a4>)
   1b58a:	4699      	mov	r9, r3
		cal_apply_cal_all();
   1b58c:	47c0      	blx	r8
		cal_gain_off(a1Cal, &a1_calst);
   1b58e:	0031      	movs	r1, r6
   1b590:	482d      	ldr	r0, [pc, #180]	; (1b648 <cal_full_inc_azm_process+0x1a8>)
   1b592:	47d0      	blx	sl
		cal_gain_off(a2Cal, &a2_calst);
   1b594:	0021      	movs	r1, r4
   1b596:	482d      	ldr	r0, [pc, #180]	; (1b64c <cal_full_inc_azm_process+0x1ac>)
   1b598:	47d0      	blx	sl
		cal_gain_off(m1Cal, &m1_calst);
   1b59a:	0039      	movs	r1, r7
   1b59c:	482c      	ldr	r0, [pc, #176]	; (1b650 <cal_full_inc_azm_process+0x1b0>)
   1b59e:	47d0      	blx	sl
		cal_gain_off(m2Cal, &m2_calst);
   1b5a0:	0029      	movs	r1, r5
   1b5a2:	482c      	ldr	r0, [pc, #176]	; (1b654 <cal_full_inc_azm_process+0x1b4>)
   1b5a4:	47d0      	blx	sl
		cal_apply_cal_all();
   1b5a6:	47c0      	blx	r8
		cal_axis_misalignments(a1Cal, &a1_calst); // Sensor axis misalignments, Accelerometer 1
   1b5a8:	0031      	movs	r1, r6
   1b5aa:	4827      	ldr	r0, [pc, #156]	; (1b648 <cal_full_inc_azm_process+0x1a8>)
   1b5ac:	47c8      	blx	r9
		cal_axis_misalignments(a2Cal, &a2_calst);// Sensor axis misalignments, Accelerometer 2
   1b5ae:	0021      	movs	r1, r4
   1b5b0:	4826      	ldr	r0, [pc, #152]	; (1b64c <cal_full_inc_azm_process+0x1ac>)
   1b5b2:	47c8      	blx	r9
		cal_axis_misalignments(m1Cal, &m1_calst);// Sensor axis misalignments, Compass 1
   1b5b4:	0039      	movs	r1, r7
   1b5b6:	4826      	ldr	r0, [pc, #152]	; (1b650 <cal_full_inc_azm_process+0x1b0>)
   1b5b8:	47c8      	blx	r9
		cal_axis_misalignments(m2Cal, &m2_calst);// Sensor axis misalignments, Compass 2	
   1b5ba:	0029      	movs	r1, r5
   1b5bc:	4825      	ldr	r0, [pc, #148]	; (1b654 <cal_full_inc_azm_process+0x1b4>)
   1b5be:	47c8      	blx	r9
	for (loop=0;loop<nLoops;loop++){
   1b5c0:	2301      	movs	r3, #1
   1b5c2:	469c      	mov	ip, r3
   1b5c4:	9b01      	ldr	r3, [sp, #4]
   1b5c6:	44e3      	add	fp, ip
   1b5c8:	459b      	cmp	fp, r3
   1b5ca:	d3df      	bcc.n	1b58c <cal_full_inc_azm_process+0xec>
   1b5cc:	2300      	movs	r3, #0
   1b5ce:	469a      	mov	sl, r3
   1b5d0:	4b21      	ldr	r3, [pc, #132]	; (1b658 <cal_full_inc_azm_process+0x1b8>)
   1b5d2:	4699      	mov	r9, r3
   1b5d4:	4b21      	ldr	r3, [pc, #132]	; (1b65c <cal_full_inc_azm_process+0x1bc>)
   1b5d6:	469b      	mov	fp, r3
		cal_apply_cal_all();
   1b5d8:	47c0      	blx	r8
		cal_angleYZ(a1Cal, &a1_calst);//  Sensor Package to laser Y&Z axis alignment, Accelerometer 1
   1b5da:	0031      	movs	r1, r6
   1b5dc:	481a      	ldr	r0, [pc, #104]	; (1b648 <cal_full_inc_azm_process+0x1a8>)
   1b5de:	47c8      	blx	r9
		cal_angleYZ(a2Cal, &a2_calst);//  Sensor Package to laser Y&Z axis alignment, Accelerometer 2
   1b5e0:	0021      	movs	r1, r4
   1b5e2:	481a      	ldr	r0, [pc, #104]	; (1b64c <cal_full_inc_azm_process+0x1ac>)
   1b5e4:	47c8      	blx	r9
		cal_angleYZ(m1Cal, &m1_calst);//  Sensor Package to laser Y&Z axis alignment, Compass 1
   1b5e6:	0039      	movs	r1, r7
   1b5e8:	4819      	ldr	r0, [pc, #100]	; (1b650 <cal_full_inc_azm_process+0x1b0>)
   1b5ea:	47c8      	blx	r9
		cal_angleYZ(m2Cal, &m2_calst);//  Sensor Package to laser Y&Z axis alignment, Compass 2
   1b5ec:	0029      	movs	r1, r5
   1b5ee:	4819      	ldr	r0, [pc, #100]	; (1b654 <cal_full_inc_azm_process+0x1b4>)
   1b5f0:	47c8      	blx	r9
		cal_apply_cal_all();
   1b5f2:	47c0      	blx	r8
		cal_angleX(a1Cal, a2Cal, &a2_calst);//  Sensor package to laser X-axis alignment, Accelerometer 2
   1b5f4:	0022      	movs	r2, r4
   1b5f6:	4915      	ldr	r1, [pc, #84]	; (1b64c <cal_full_inc_azm_process+0x1ac>)
   1b5f8:	4813      	ldr	r0, [pc, #76]	; (1b648 <cal_full_inc_azm_process+0x1a8>)
   1b5fa:	47d8      	blx	fp
		cal_angleX(m1Cal, m2Cal, &m2_calst);//  Sensor package to laser X-axis alignment, Compass 2
   1b5fc:	002a      	movs	r2, r5
   1b5fe:	4915      	ldr	r1, [pc, #84]	; (1b654 <cal_full_inc_azm_process+0x1b4>)
   1b600:	4813      	ldr	r0, [pc, #76]	; (1b650 <cal_full_inc_azm_process+0x1b0>)
   1b602:	47d8      	blx	fp
	for (loop=0;loop<nLoops;loop++){
   1b604:	2301      	movs	r3, #1
   1b606:	469c      	mov	ip, r3
   1b608:	9b01      	ldr	r3, [sp, #4]
   1b60a:	44e2      	add	sl, ip
   1b60c:	459a      	cmp	sl, r3
   1b60e:	d3e3      	bcc.n	1b5d8 <cal_full_inc_azm_process+0x138>
	cal_apply_cal_all();
   1b610:	47c0      	blx	r8
	cal_inc_azm_eval();
   1b612:	4b13      	ldr	r3, [pc, #76]	; (1b660 <cal_full_inc_azm_process+0x1c0>)
   1b614:	4798      	blx	r3
}
   1b616:	b003      	add	sp, #12
   1b618:	bc3c      	pop	{r2, r3, r4, r5}
   1b61a:	4690      	mov	r8, r2
   1b61c:	4699      	mov	r9, r3
   1b61e:	46a2      	mov	sl, r4
   1b620:	46ab      	mov	fp, r5
   1b622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b624:	4b05      	ldr	r3, [pc, #20]	; (1b63c <cal_full_inc_azm_process+0x19c>)
   1b626:	4698      	mov	r8, r3
   1b628:	e7f2      	b.n	1b610 <cal_full_inc_azm_process+0x170>
   1b62a:	46c0      	nop			; (mov r8, r8)
   1b62c:	20005224 	.word	0x20005224
   1b630:	200052e8 	.word	0x200052e8
   1b634:	200051c8 	.word	0x200051c8
   1b638:	20003cc8 	.word	0x20003cc8
   1b63c:	00019881 	.word	0x00019881
   1b640:	0001afa9 	.word	0x0001afa9
   1b644:	0001a675 	.word	0x0001a675
   1b648:	200043c0 	.word	0x200043c0
   1b64c:	2000339c 	.word	0x2000339c
   1b650:	200048ec 	.word	0x200048ec
   1b654:	20002634 	.word	0x20002634
   1b658:	0001acd1 	.word	0x0001acd1
   1b65c:	0001ab85 	.word	0x0001ab85
   1b660:	0001a039 	.word	0x0001a039

0001b664 <cal_azm_quick_process>:
void cal_azm_quick_process(void){
   1b664:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b666:	46de      	mov	lr, fp
   1b668:	4657      	mov	r7, sl
   1b66a:	4645      	mov	r5, r8
   1b66c:	464e      	mov	r6, r9
	for (k=0;k<2;k++){
   1b66e:	2300      	movs	r3, #0
void cal_azm_quick_process(void){
   1b670:	b5e0      	push	{r5, r6, r7, lr}
   1b672:	b0a5      	sub	sp, #148	; 0x94
	for (k=0;k<2;k++){
   1b674:	930b      	str	r3, [sp, #44]	; 0x2c
				calStructPtr = &m1_calst;
   1b676:	4b98      	ldr	r3, [pc, #608]	; (1b8d8 <cal_azm_quick_process+0x274>)
   1b678:	ad0d      	add	r5, sp, #52	; 0x34
   1b67a:	469b      	mov	fp, r3
				calPtr = m1Cal;
   1b67c:	4b97      	ldr	r3, [pc, #604]	; (1b8dc <cal_azm_quick_process+0x278>)
   1b67e:	465c      	mov	r4, fp
   1b680:	930a      	str	r3, [sp, #40]	; 0x28
				rawPtr = m1Raw;
   1b682:	4b97      	ldr	r3, [pc, #604]	; (1b8e0 <cal_azm_quick_process+0x27c>)
   1b684:	9303      	str	r3, [sp, #12]
   1b686:	4b97      	ldr	r3, [pc, #604]	; (1b8e4 <cal_azm_quick_process+0x280>)
   1b688:	469a      	mov	sl, r3
		cal_struct->offset[i] = 0;
   1b68a:	2300      	movs	r3, #0
		cal_struct->gain[i] = 1;
   1b68c:	22fe      	movs	r2, #254	; 0xfe
		cal_struct->offset[i] = 0;
   1b68e:	606b      	str	r3, [r5, #4]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b690:	63ab      	str	r3, [r5, #56]	; 0x38
   1b692:	63eb      	str	r3, [r5, #60]	; 0x3c
		cal_struct->offset[i] = 0;
   1b694:	60ab      	str	r3, [r5, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b696:	642b      	str	r3, [r5, #64]	; 0x40
   1b698:	64ab      	str	r3, [r5, #72]	; 0x48
		cal_struct->offset[i] = 0;
   1b69a:	60eb      	str	r3, [r5, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   1b69c:	64eb      	str	r3, [r5, #76]	; 0x4c
   1b69e:	652b      	str	r3, [r5, #80]	; 0x50
	cal_struct->axmYX = 0;
   1b6a0:	61eb      	str	r3, [r5, #28]
	cal_struct->axmZY = 0;
   1b6a2:	622b      	str	r3, [r5, #32]
	cal_struct->axmZX = 0;
   1b6a4:	626b      	str	r3, [r5, #36]	; 0x24
	cal_struct->thetaX = 0;
   1b6a6:	62ab      	str	r3, [r5, #40]	; 0x28
	cal_struct->thetaY = 0;
   1b6a8:	62eb      	str	r3, [r5, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   1b6aa:	632b      	str	r3, [r5, #48]	; 0x30
	cal_struct->dist_offset = 0;
   1b6ac:	65ab      	str	r3, [r5, #88]	; 0x58
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1b6ae:	23b2      	movs	r3, #178	; 0xb2
		cal_struct->gain[i] = 1;
   1b6b0:	0592      	lsls	r2, r2, #22
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1b6b2:	702b      	strb	r3, [r5, #0]
		cal_gain_off(rawPtr, &temp_cal);
   1b6b4:	0029      	movs	r1, r5
   1b6b6:	4b8c      	ldr	r3, [pc, #560]	; (1b8e8 <cal_azm_quick_process+0x284>)
   1b6b8:	9803      	ldr	r0, [sp, #12]
		cal_struct->gain[i] = 1;
   1b6ba:	612a      	str	r2, [r5, #16]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b6bc:	636a      	str	r2, [r5, #52]	; 0x34
		cal_struct->gain[i] = 1;
   1b6be:	616a      	str	r2, [r5, #20]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b6c0:	646a      	str	r2, [r5, #68]	; 0x44
		cal_struct->gain[i] = 1;
   1b6c2:	61aa      	str	r2, [r5, #24]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1b6c4:	656a      	str	r2, [r5, #84]	; 0x54
		cal_gain_off(rawPtr, &temp_cal);
   1b6c6:	4798      	blx	r3
		for (i=0;i<nPoints;i++){
   1b6c8:	4653      	mov	r3, sl
   1b6ca:	681b      	ldr	r3, [r3, #0]
   1b6cc:	2b00      	cmp	r3, #0
   1b6ce:	d046      	beq.n	1b75e <cal_azm_quick_process+0xfa>
   1b6d0:	2300      	movs	r3, #0
   1b6d2:	4699      	mov	r9, r3
   1b6d4:	4a85      	ldr	r2, [pc, #532]	; (1b8ec <cal_azm_quick_process+0x288>)
   1b6d6:	9f03      	ldr	r7, [sp, #12]
   1b6d8:	4693      	mov	fp, r2
   1b6da:	4a85      	ldr	r2, [pc, #532]	; (1b8f0 <cal_azm_quick_process+0x28c>)
   1b6dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1b6de:	9202      	str	r2, [sp, #8]
   1b6e0:	9404      	str	r4, [sp, #16]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1b6e2:	6869      	ldr	r1, [r5, #4]
   1b6e4:	6838      	ldr	r0, [r7, #0]
   1b6e6:	4b83      	ldr	r3, [pc, #524]	; (1b8f4 <cal_azm_quick_process+0x290>)
   1b6e8:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b6ea:	6929      	ldr	r1, [r5, #16]
   1b6ec:	4b82      	ldr	r3, [pc, #520]	; (1b8f8 <cal_azm_quick_process+0x294>)
   1b6ee:	4798      	blx	r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1b6f0:	68e9      	ldr	r1, [r5, #12]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b6f2:	1c04      	adds	r4, r0, #0
   1b6f4:	6030      	str	r0, [r6, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1b6f6:	4b7f      	ldr	r3, [pc, #508]	; (1b8f4 <cal_azm_quick_process+0x290>)
   1b6f8:	68b8      	ldr	r0, [r7, #8]
   1b6fa:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b6fc:	69a9      	ldr	r1, [r5, #24]
   1b6fe:	4b7e      	ldr	r3, [pc, #504]	; (1b8f8 <cal_azm_quick_process+0x294>)
   1b700:	4798      	blx	r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1b702:	68a9      	ldr	r1, [r5, #8]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b704:	4680      	mov	r8, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1b706:	4b7b      	ldr	r3, [pc, #492]	; (1b8f4 <cal_azm_quick_process+0x290>)
   1b708:	6878      	ldr	r0, [r7, #4]
   1b70a:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b70c:	6969      	ldr	r1, [r5, #20]
   1b70e:	4b7a      	ldr	r3, [pc, #488]	; (1b8f8 <cal_azm_quick_process+0x294>)
   1b710:	4798      	blx	r3
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   1b712:	4b7a      	ldr	r3, [pc, #488]	; (1b8fc <cal_azm_quick_process+0x298>)
   1b714:	69e9      	ldr	r1, [r5, #28]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b716:	9001      	str	r0, [sp, #4]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   1b718:	1c20      	adds	r0, r4, #0
   1b71a:	4798      	blx	r3
   1b71c:	1c01      	adds	r1, r0, #0
   1b71e:	9801      	ldr	r0, [sp, #4]
   1b720:	47d8      	blx	fp
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   1b722:	4b76      	ldr	r3, [pc, #472]	; (1b8fc <cal_azm_quick_process+0x298>)
   1b724:	6a29      	ldr	r1, [r5, #32]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   1b726:	6070      	str	r0, [r6, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   1b728:	4798      	blx	r3
   1b72a:	4641      	mov	r1, r8
   1b72c:	47d8      	blx	fp
   1b72e:	4b73      	ldr	r3, [pc, #460]	; (1b8fc <cal_azm_quick_process+0x298>)
   1b730:	4680      	mov	r8, r0
   1b732:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1b734:	1c20      	adds	r0, r4, #0
   1b736:	4798      	blx	r3
   1b738:	1c01      	adds	r1, r0, #0
   1b73a:	4640      	mov	r0, r8
   1b73c:	47d8      	blx	fp
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   1b73e:	0032      	movs	r2, r6
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   1b740:	60b0      	str	r0, [r6, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   1b742:	0031      	movs	r1, r6
   1b744:	9b02      	ldr	r3, [sp, #8]
   1b746:	a81a      	add	r0, sp, #104	; 0x68
   1b748:	4798      	blx	r3
		for (i=0;i<nPoints;i++){
   1b74a:	2301      	movs	r3, #1
   1b74c:	469c      	mov	ip, r3
   1b74e:	4653      	mov	r3, sl
   1b750:	681b      	ldr	r3, [r3, #0]
   1b752:	44e1      	add	r9, ip
   1b754:	370c      	adds	r7, #12
   1b756:	360c      	adds	r6, #12
   1b758:	454b      	cmp	r3, r9
   1b75a:	d8c2      	bhi.n	1b6e2 <cal_azm_quick_process+0x7e>
   1b75c:	9c04      	ldr	r4, [sp, #16]
		cal_axis_misalignments(calPtr, &temp_cal);
   1b75e:	0029      	movs	r1, r5
   1b760:	4b67      	ldr	r3, [pc, #412]	; (1b900 <cal_azm_quick_process+0x29c>)
   1b762:	980a      	ldr	r0, [sp, #40]	; 0x28
   1b764:	4798      	blx	r3
		calStructPtr->axmYX = temp_cal.axmYX;
   1b766:	69eb      	ldr	r3, [r5, #28]
			calStructPtr->offset[i] = temp_cal.offset[i];
   1b768:	6869      	ldr	r1, [r5, #4]
		calStructPtr->axmYX = temp_cal.axmYX;
   1b76a:	9306      	str	r3, [sp, #24]
   1b76c:	61e3      	str	r3, [r4, #28]
		calStructPtr->axmZX = temp_cal.axmZX;
   1b76e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			calStructPtr->offset[i] = temp_cal.offset[i];
   1b770:	6061      	str	r1, [r4, #4]
		calStructPtr->axmZX = temp_cal.axmZX;
   1b772:	9304      	str	r3, [sp, #16]
   1b774:	6263      	str	r3, [r4, #36]	; 0x24
		calStructPtr->axmZY = temp_cal.axmZY;
   1b776:	6a2b      	ldr	r3, [r5, #32]
   1b778:	9307      	str	r3, [sp, #28]
   1b77a:	6223      	str	r3, [r4, #32]
			calStructPtr->gain[i] = temp_cal.gain[i];
   1b77c:	692b      	ldr	r3, [r5, #16]
   1b77e:	4698      	mov	r8, r3
   1b780:	6123      	str	r3, [r4, #16]
   1b782:	696b      	ldr	r3, [r5, #20]
   1b784:	9305      	str	r3, [sp, #20]
   1b786:	6163      	str	r3, [r4, #20]
			calStructPtr->offset[i] = temp_cal.offset[i];
   1b788:	68ab      	ldr	r3, [r5, #8]
   1b78a:	9308      	str	r3, [sp, #32]
   1b78c:	60a3      	str	r3, [r4, #8]
			calStructPtr->gain[i] = temp_cal.gain[i];
   1b78e:	69ab      	ldr	r3, [r5, #24]
   1b790:	4699      	mov	r9, r3
   1b792:	61a3      	str	r3, [r4, #24]
			calStructPtr->offset[i] = temp_cal.offset[i];
   1b794:	68eb      	ldr	r3, [r5, #12]
   1b796:	1c1a      	adds	r2, r3, #0
   1b798:	60e3      	str	r3, [r4, #12]
		for (i=0;i<nPoints;i++){
   1b79a:	4653      	mov	r3, sl
   1b79c:	681b      	ldr	r3, [r3, #0]
   1b79e:	2b00      	cmp	r3, #0
   1b7a0:	d061      	beq.n	1b866 <cal_azm_quick_process+0x202>
   1b7a2:	2334      	movs	r3, #52	; 0x34
   1b7a4:	469c      	mov	ip, r3
   1b7a6:	44a4      	add	ip, r4
   1b7a8:	4663      	mov	r3, ip
   1b7aa:	9309      	str	r3, [sp, #36]	; 0x24
   1b7ac:	2300      	movs	r3, #0
   1b7ae:	9f03      	ldr	r7, [sp, #12]
   1b7b0:	9303      	str	r3, [sp, #12]
   1b7b2:	4b4e      	ldr	r3, [pc, #312]	; (1b8ec <cal_azm_quick_process+0x288>)
   1b7b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1b7b6:	469b      	mov	fp, r3
   1b7b8:	4b4d      	ldr	r3, [pc, #308]	; (1b8f0 <cal_azm_quick_process+0x28c>)
   1b7ba:	9302      	str	r3, [sp, #8]
   1b7bc:	465b      	mov	r3, fp
   1b7be:	4693      	mov	fp, r2
   1b7c0:	9301      	str	r3, [sp, #4]
   1b7c2:	e010      	b.n	1b7e6 <cal_azm_quick_process+0x182>
   1b7c4:	69e3      	ldr	r3, [r4, #28]
   1b7c6:	6861      	ldr	r1, [r4, #4]
   1b7c8:	9306      	str	r3, [sp, #24]
   1b7ca:	6a23      	ldr	r3, [r4, #32]
   1b7cc:	9307      	str	r3, [sp, #28]
   1b7ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b7d0:	9304      	str	r3, [sp, #16]
   1b7d2:	6923      	ldr	r3, [r4, #16]
   1b7d4:	4698      	mov	r8, r3
   1b7d6:	68a3      	ldr	r3, [r4, #8]
   1b7d8:	9308      	str	r3, [sp, #32]
   1b7da:	6963      	ldr	r3, [r4, #20]
   1b7dc:	9305      	str	r3, [sp, #20]
   1b7de:	68e3      	ldr	r3, [r4, #12]
   1b7e0:	469b      	mov	fp, r3
   1b7e2:	69a3      	ldr	r3, [r4, #24]
   1b7e4:	4699      	mov	r9, r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1b7e6:	6838      	ldr	r0, [r7, #0]
   1b7e8:	4b42      	ldr	r3, [pc, #264]	; (1b8f4 <cal_azm_quick_process+0x290>)
   1b7ea:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b7ec:	4641      	mov	r1, r8
   1b7ee:	4b42      	ldr	r3, [pc, #264]	; (1b8f8 <cal_azm_quick_process+0x294>)
   1b7f0:	4798      	blx	r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1b7f2:	4659      	mov	r1, fp
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b7f4:	4680      	mov	r8, r0
   1b7f6:	6030      	str	r0, [r6, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1b7f8:	4b3e      	ldr	r3, [pc, #248]	; (1b8f4 <cal_azm_quick_process+0x290>)
   1b7fa:	68b8      	ldr	r0, [r7, #8]
   1b7fc:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b7fe:	4649      	mov	r1, r9
   1b800:	4b3d      	ldr	r3, [pc, #244]	; (1b8f8 <cal_azm_quick_process+0x294>)
   1b802:	4798      	blx	r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1b804:	9908      	ldr	r1, [sp, #32]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b806:	4681      	mov	r9, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1b808:	4b3a      	ldr	r3, [pc, #232]	; (1b8f4 <cal_azm_quick_process+0x290>)
   1b80a:	6878      	ldr	r0, [r7, #4]
   1b80c:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b80e:	9905      	ldr	r1, [sp, #20]
   1b810:	4b39      	ldr	r3, [pc, #228]	; (1b8f8 <cal_azm_quick_process+0x294>)
   1b812:	4798      	blx	r3
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   1b814:	4b39      	ldr	r3, [pc, #228]	; (1b8fc <cal_azm_quick_process+0x298>)
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1b816:	4683      	mov	fp, r0
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   1b818:	4641      	mov	r1, r8
   1b81a:	9806      	ldr	r0, [sp, #24]
   1b81c:	4798      	blx	r3
   1b81e:	9b01      	ldr	r3, [sp, #4]
   1b820:	1c01      	adds	r1, r0, #0
   1b822:	4658      	mov	r0, fp
   1b824:	4798      	blx	r3
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   1b826:	4b35      	ldr	r3, [pc, #212]	; (1b8fc <cal_azm_quick_process+0x298>)
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   1b828:	1c01      	adds	r1, r0, #0
   1b82a:	6070      	str	r0, [r6, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   1b82c:	9807      	ldr	r0, [sp, #28]
   1b82e:	4798      	blx	r3
   1b830:	9a01      	ldr	r2, [sp, #4]
   1b832:	4649      	mov	r1, r9
   1b834:	4790      	blx	r2
   1b836:	4b31      	ldr	r3, [pc, #196]	; (1b8fc <cal_azm_quick_process+0x298>)
   1b838:	4681      	mov	r9, r0
   1b83a:	4641      	mov	r1, r8
   1b83c:	9804      	ldr	r0, [sp, #16]
   1b83e:	4798      	blx	r3
   1b840:	9a01      	ldr	r2, [sp, #4]
   1b842:	1c01      	adds	r1, r0, #0
   1b844:	4648      	mov	r0, r9
   1b846:	4790      	blx	r2
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   1b848:	0032      	movs	r2, r6
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   1b84a:	60b0      	str	r0, [r6, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   1b84c:	0031      	movs	r1, r6
   1b84e:	9b02      	ldr	r3, [sp, #8]
   1b850:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b852:	4798      	blx	r3
		for (i=0;i<nPoints;i++){
   1b854:	4652      	mov	r2, sl
   1b856:	9b03      	ldr	r3, [sp, #12]
   1b858:	6812      	ldr	r2, [r2, #0]
   1b85a:	3301      	adds	r3, #1
   1b85c:	9303      	str	r3, [sp, #12]
   1b85e:	370c      	adds	r7, #12
   1b860:	360c      	adds	r6, #12
   1b862:	429a      	cmp	r2, r3
   1b864:	d8ae      	bhi.n	1b7c4 <cal_azm_quick_process+0x160>
   1b866:	4a27      	ldr	r2, [pc, #156]	; (1b904 <cal_azm_quick_process+0x2a0>)
	for (k=0;k<2;k++){
   1b868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b86a:	9203      	str	r2, [sp, #12]
   1b86c:	4a26      	ldr	r2, [pc, #152]	; (1b908 <cal_azm_quick_process+0x2a4>)
   1b86e:	3301      	adds	r3, #1
   1b870:	930b      	str	r3, [sp, #44]	; 0x2c
   1b872:	920a      	str	r2, [sp, #40]	; 0x28
   1b874:	4c25      	ldr	r4, [pc, #148]	; (1b90c <cal_azm_quick_process+0x2a8>)
   1b876:	2b02      	cmp	r3, #2
   1b878:	d000      	beq.n	1b87c <cal_azm_quick_process+0x218>
   1b87a:	e706      	b.n	1b68a <cal_azm_quick_process+0x26>
	get_time();//  Get current time
   1b87c:	4b24      	ldr	r3, [pc, #144]	; (1b910 <cal_azm_quick_process+0x2ac>)
   1b87e:	4798      	blx	r3
	cal_report.software_version = SOFTWARE_VERSION;
   1b880:	4d24      	ldr	r5, [pc, #144]	; (1b914 <cal_azm_quick_process+0x2b0>)
   1b882:	4b25      	ldr	r3, [pc, #148]	; (1b918 <cal_azm_quick_process+0x2b4>)
	memcpy(&cal_report.time_quick_azm,&current_time,sizeof(current_time));
   1b884:	0028      	movs	r0, r5
   1b886:	2208      	movs	r2, #8
   1b888:	4924      	ldr	r1, [pc, #144]	; (1b91c <cal_azm_quick_process+0x2b8>)
	cal_report.software_version = SOFTWARE_VERSION;
   1b88a:	602b      	str	r3, [r5, #0]
	memcpy(&cal_report.time_quick_azm,&current_time,sizeof(current_time));
   1b88c:	3060      	adds	r0, #96	; 0x60
   1b88e:	4b24      	ldr	r3, [pc, #144]	; (1b920 <cal_azm_quick_process+0x2bc>)
   1b890:	4798      	blx	r3
	cal_report.mag_stdev_m1 = calc_mag_stdev(m1Cal);
   1b892:	4c24      	ldr	r4, [pc, #144]	; (1b924 <cal_azm_quick_process+0x2c0>)
   1b894:	4811      	ldr	r0, [pc, #68]	; (1b8dc <cal_azm_quick_process+0x278>)
   1b896:	47a0      	blx	r4
   1b898:	63a8      	str	r0, [r5, #56]	; 0x38
	cal_report.mag_stdev_m2 = calc_mag_stdev(m2Cal);
   1b89a:	481b      	ldr	r0, [pc, #108]	; (1b908 <cal_azm_quick_process+0x2a4>)
   1b89c:	47a0      	blx	r4
	for (i=0;i<3;i++){
   1b89e:	2400      	movs	r4, #0
   1b8a0:	4e21      	ldr	r6, [pc, #132]	; (1b928 <cal_azm_quick_process+0x2c4>)
	cal_report.mag_stdev_m2 = calc_mag_stdev(m2Cal);
   1b8a2:	63e8      	str	r0, [r5, #60]	; 0x3c
		cal_report.disp_stdev_comp[i] = calc_disp_stdev(m1Cal, m2Cal, i);
   1b8a4:	b2e2      	uxtb	r2, r4
   1b8a6:	4918      	ldr	r1, [pc, #96]	; (1b908 <cal_azm_quick_process+0x2a4>)
   1b8a8:	480c      	ldr	r0, [pc, #48]	; (1b8dc <cal_azm_quick_process+0x278>)
   1b8aa:	47b0      	blx	r6
   1b8ac:	00a3      	lsls	r3, r4, #2
   1b8ae:	18eb      	adds	r3, r5, r3
	for (i=0;i<3;i++){
   1b8b0:	3401      	adds	r4, #1
		cal_report.disp_stdev_comp[i] = calc_disp_stdev(m1Cal, m2Cal, i);
   1b8b2:	64d8      	str	r0, [r3, #76]	; 0x4c
	for (i=0;i<3;i++){
   1b8b4:	2c03      	cmp	r4, #3
   1b8b6:	d1f5      	bne.n	1b8a4 <cal_azm_quick_process+0x240>
	SD_save_raw_data(azm_quick);
   1b8b8:	4b1c      	ldr	r3, [pc, #112]	; (1b92c <cal_azm_quick_process+0x2c8>)
   1b8ba:	2001      	movs	r0, #1
   1b8bc:	4798      	blx	r3
	SD_add_cal_history(azm_quick);	
   1b8be:	4b1c      	ldr	r3, [pc, #112]	; (1b930 <cal_azm_quick_process+0x2cc>)
   1b8c0:	2001      	movs	r0, #1
   1b8c2:	4798      	blx	r3
	save_calibration();
   1b8c4:	4b1b      	ldr	r3, [pc, #108]	; (1b934 <cal_azm_quick_process+0x2d0>)
   1b8c6:	4798      	blx	r3
}
   1b8c8:	b025      	add	sp, #148	; 0x94
   1b8ca:	bc3c      	pop	{r2, r3, r4, r5}
   1b8cc:	4690      	mov	r8, r2
   1b8ce:	4699      	mov	r9, r3
   1b8d0:	46a2      	mov	sl, r4
   1b8d2:	46ab      	mov	fp, r5
   1b8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b8d6:	46c0      	nop			; (mov r8, r8)
   1b8d8:	200051c8 	.word	0x200051c8
   1b8dc:	200048ec 	.word	0x200048ec
   1b8e0:	20002e80 	.word	0x20002e80
   1b8e4:	20002d38 	.word	0x20002d38
   1b8e8:	0001afa9 	.word	0x0001afa9
   1b8ec:	00025e55 	.word	0x00025e55
   1b8f0:	00012795 	.word	0x00012795
   1b8f4:	00026799 	.word	0x00026799
   1b8f8:	00026179 	.word	0x00026179
   1b8fc:	00026559 	.word	0x00026559
   1b900:	0001a675 	.word	0x0001a675
   1b904:	20001b30 	.word	0x20001b30
   1b908:	20002634 	.word	0x20002634
   1b90c:	20003cc8 	.word	0x20003cc8
   1b910:	0000fa61 	.word	0x0000fa61
   1b914:	20004870 	.word	0x20004870
   1b918:	40b00000 	.word	0x40b00000
   1b91c:	20002628 	.word	0x20002628
   1b920:	00028999 	.word	0x00028999
   1b924:	00011f5d 	.word	0x00011f5d
   1b928:	0001212d 	.word	0x0001212d
   1b92c:	0001549d 	.word	0x0001549d
   1b930:	0001468d 	.word	0x0001468d
   1b934:	000113a5 	.word	0x000113a5

0001b938 <writeBleCallback>:

}

void writeBleCallback(struct usart_module *const usart_module)
{
	BleTransmitComplete = true;
   1b938:	2201      	movs	r2, #1
   1b93a:	4b01      	ldr	r3, [pc, #4]	; (1b940 <writeBleCallback+0x8>)
   1b93c:	701a      	strb	r2, [r3, #0]
}
   1b93e:	4770      	bx	lr
   1b940:	20000d2b 	.word	0x20000d2b

0001b944 <writeLaserCallback>:

}

void writeLaserCallback(struct usart_module *const usart_module)
{
	LaserTransmitComplete = true;
   1b944:	2201      	movs	r2, #1
   1b946:	4b01      	ldr	r3, [pc, #4]	; (1b94c <writeLaserCallback+0x8>)
   1b948:	701a      	strb	r2, [r3, #0]
}
   1b94a:	4770      	bx	lr
   1b94c:	20000d2d 	.word	0x20000d2d

0001b950 <readLaserCallback>:
{
   1b950:	b510      	push	{r4, lr}
	laserDebugBuffPtr = &laserDebugBuff[0];
   1b952:	481e      	ldr	r0, [pc, #120]	; (1b9cc <readLaserCallback+0x7c>)
   1b954:	4b1e      	ldr	r3, [pc, #120]	; (1b9d0 <readLaserCallback+0x80>)
	laserDebugBuff[laserDebugBuffIndex] = laserRcvByte;
   1b956:	491f      	ldr	r1, [pc, #124]	; (1b9d4 <readLaserCallback+0x84>)
	laserDebugBuffPtr = &laserDebugBuff[0];
   1b958:	6018      	str	r0, [r3, #0]
	laserDebugBuff[laserDebugBuffIndex] = laserRcvByte;
   1b95a:	4b1f      	ldr	r3, [pc, #124]	; (1b9d8 <readLaserCallback+0x88>)
   1b95c:	681c      	ldr	r4, [r3, #0]
   1b95e:	780a      	ldrb	r2, [r1, #0]
   1b960:	b2d2      	uxtb	r2, r2
   1b962:	5502      	strb	r2, [r0, r4]
	laserDebugBuffIndex++;
   1b964:	681a      	ldr	r2, [r3, #0]
   1b966:	3201      	adds	r2, #1
   1b968:	601a      	str	r2, [r3, #0]
	if (laserDebugBuffIndex>=sizeof(laserDebugBuff)){laserDebugBuffIndex = 0;}
   1b96a:	681a      	ldr	r2, [r3, #0]
   1b96c:	2a63      	cmp	r2, #99	; 0x63
   1b96e:	d901      	bls.n	1b974 <readLaserCallback+0x24>
   1b970:	2200      	movs	r2, #0
   1b972:	601a      	str	r2, [r3, #0]
	if(laserRcvByte==0xA8){
   1b974:	780b      	ldrb	r3, [r1, #0]
   1b976:	2ba8      	cmp	r3, #168	; 0xa8
   1b978:	d013      	beq.n	1b9a2 <readLaserCallback+0x52>
   1b97a:	4818      	ldr	r0, [pc, #96]	; (1b9dc <readLaserCallback+0x8c>)
	rxBufferLaser[rxBufferLaserIndex] = laserRcvByte;
   1b97c:	4a18      	ldr	r2, [pc, #96]	; (1b9e0 <readLaserCallback+0x90>)
   1b97e:	7813      	ldrb	r3, [r2, #0]
   1b980:	780c      	ldrb	r4, [r1, #0]
   1b982:	b2db      	uxtb	r3, r3
   1b984:	b2e4      	uxtb	r4, r4
   1b986:	54c4      	strb	r4, [r0, r3]
	rxBufferLaserIndex++;
   1b988:	7813      	ldrb	r3, [r2, #0]
   1b98a:	3301      	adds	r3, #1
   1b98c:	b2db      	uxtb	r3, r3
   1b98e:	7013      	strb	r3, [r2, #0]
	if(rxBufferLaserIndex>=sizeof(rxBufferLaser)){rxBufferLaserIndex=0;}
   1b990:	7813      	ldrb	r3, [r2, #0]
   1b992:	2b63      	cmp	r3, #99	; 0x63
   1b994:	d901      	bls.n	1b99a <readLaserCallback+0x4a>
   1b996:	2300      	movs	r3, #0
   1b998:	7013      	strb	r3, [r2, #0]
	usart_read_job(&usart_laser, &laserRcvByte);
   1b99a:	4b12      	ldr	r3, [pc, #72]	; (1b9e4 <readLaserCallback+0x94>)
   1b99c:	4812      	ldr	r0, [pc, #72]	; (1b9e8 <readLaserCallback+0x98>)
   1b99e:	4798      	blx	r3
}
   1b9a0:	bd10      	pop	{r4, pc}
		LaserReceiveComplete=true;	
   1b9a2:	2201      	movs	r2, #1
   1b9a4:	4b11      	ldr	r3, [pc, #68]	; (1b9ec <readLaserCallback+0x9c>)
   1b9a6:	480d      	ldr	r0, [pc, #52]	; (1b9dc <readLaserCallback+0x8c>)
   1b9a8:	701a      	strb	r2, [r3, #0]
   1b9aa:	2300      	movs	r3, #0
   1b9ac:	e002      	b.n	1b9b4 <readLaserCallback+0x64>
   1b9ae:	3301      	adds	r3, #1

//  Determine the type of message currently in the buffer
enum LASER_MESSAGE_TYPE laserMessageType(void){
	uint8_t i;
	enum LASER_MESSAGE_TYPE messType = 0;
	for(i=0;i<sizeof(rxBufferLaser);i++){
   1b9b0:	2b64      	cmp	r3, #100	; 0x64
   1b9b2:	d008      	beq.n	1b9c6 <readLaserCallback+0x76>
		if(rxBufferLaser[i]==0xAA){
   1b9b4:	5cc2      	ldrb	r2, [r0, r3]
   1b9b6:	2aaa      	cmp	r2, #170	; 0xaa
   1b9b8:	d1f9      	bne.n	1b9ae <readLaserCallback+0x5e>
			messType =  rxBufferLaser[i+2];
   1b9ba:	3302      	adds	r3, #2
   1b9bc:	5cc3      	ldrb	r3, [r0, r3]
   1b9be:	b2db      	uxtb	r3, r3
		laserCurrentMessage = laserMessageType();
   1b9c0:	4a0b      	ldr	r2, [pc, #44]	; (1b9f0 <readLaserCallback+0xa0>)
   1b9c2:	7013      	strb	r3, [r2, #0]
   1b9c4:	e7da      	b.n	1b97c <readLaserCallback+0x2c>
	enum LASER_MESSAGE_TYPE messType = 0;
   1b9c6:	2300      	movs	r3, #0
   1b9c8:	e7fa      	b.n	1b9c0 <readLaserCallback+0x70>
   1b9ca:	46c0      	nop			; (mov r8, r8)
   1b9cc:	20003330 	.word	0x20003330
   1b9d0:	200043ac 	.word	0x200043ac
   1b9d4:	20001315 	.word	0x20001315
   1b9d8:	20000d60 	.word	0x20000d60
   1b9dc:	20005280 	.word	0x20005280
   1b9e0:	20005160 	.word	0x20005160
   1b9e4:	00018d9d 	.word	0x00018d9d
   1b9e8:	20000e34 	.word	0x20000e34
   1b9ec:	20000d2c 	.word	0x20000d2c
   1b9f0:	20001314 	.word	0x20001314

0001b9f4 <readBleCallback>:
{
   1b9f4:	b570      	push	{r4, r5, r6, lr}
	debugBuffPtr = &debugBuff[0];
   1b9f6:	4928      	ldr	r1, [pc, #160]	; (1ba98 <readBleCallback+0xa4>)
   1b9f8:	4b28      	ldr	r3, [pc, #160]	; (1ba9c <readBleCallback+0xa8>)
	debugBuff[debugBuffIndex] = (uint8_t)bleRcvByte;
   1b9fa:	4c29      	ldr	r4, [pc, #164]	; (1baa0 <readBleCallback+0xac>)
	debugBuffPtr = &debugBuff[0];
   1b9fc:	6019      	str	r1, [r3, #0]
	debugBuff[debugBuffIndex] = (uint8_t)bleRcvByte;
   1b9fe:	4b29      	ldr	r3, [pc, #164]	; (1baa4 <readBleCallback+0xb0>)
   1ba00:	6818      	ldr	r0, [r3, #0]
   1ba02:	8822      	ldrh	r2, [r4, #0]
   1ba04:	b2d2      	uxtb	r2, r2
   1ba06:	540a      	strb	r2, [r1, r0]
	debugBuffIndex++;
   1ba08:	681a      	ldr	r2, [r3, #0]
   1ba0a:	3201      	adds	r2, #1
   1ba0c:	601a      	str	r2, [r3, #0]
	if (debugBuffIndex>=sizeof(debugBuff)){debugBuffIndex = 0;}
   1ba0e:	681a      	ldr	r2, [r3, #0]
   1ba10:	2a63      	cmp	r2, #99	; 0x63
   1ba12:	d901      	bls.n	1ba18 <readBleCallback+0x24>
   1ba14:	2200      	movs	r2, #0
   1ba16:	601a      	str	r2, [r3, #0]
   1ba18:	2180      	movs	r1, #128	; 0x80
	bleBuffPtr = &rxBufferBle[0];
   1ba1a:	4b23      	ldr	r3, [pc, #140]	; (1baa8 <readBleCallback+0xb4>)
   1ba1c:	4a23      	ldr	r2, [pc, #140]	; (1baac <readBleCallback+0xb8>)
   1ba1e:	03c9      	lsls	r1, r1, #15
   1ba20:	601a      	str	r2, [r3, #0]
   1ba22:	4b23      	ldr	r3, [pc, #140]	; (1bab0 <readBleCallback+0xbc>)
   1ba24:	6a1b      	ldr	r3, [r3, #32]
   1ba26:	400b      	ands	r3, r1
	if(ioport_get_pin_level(BLE_rcvMode_pin)){
   1ba28:	d017      	beq.n	1ba5a <readBleCallback+0x66>
		if(!BleReceiveInProgress){
   1ba2a:	4822      	ldr	r0, [pc, #136]	; (1bab4 <readBleCallback+0xc0>)
   1ba2c:	7803      	ldrb	r3, [r0, #0]
   1ba2e:	2b00      	cmp	r3, #0
   1ba30:	d025      	beq.n	1ba7e <readBleCallback+0x8a>
   1ba32:	4b21      	ldr	r3, [pc, #132]	; (1bab8 <readBleCallback+0xc4>)
		rxBufferBle[rxBufferBleIndex] = (uint8_t)bleRcvByte;
   1ba34:	7819      	ldrb	r1, [r3, #0]
   1ba36:	8820      	ldrh	r0, [r4, #0]
   1ba38:	b2c9      	uxtb	r1, r1
   1ba3a:	b2c0      	uxtb	r0, r0
   1ba3c:	5450      	strb	r0, [r2, r1]
		rxBufferBleIndex++;
   1ba3e:	781a      	ldrb	r2, [r3, #0]
   1ba40:	3201      	adds	r2, #1
   1ba42:	b2d2      	uxtb	r2, r2
   1ba44:	701a      	strb	r2, [r3, #0]
		if (rxBufferBleIndex>=sizeof(rxBufferBle)){
   1ba46:	781a      	ldrb	r2, [r3, #0]
   1ba48:	2a63      	cmp	r2, #99	; 0x63
   1ba4a:	d901      	bls.n	1ba50 <readBleCallback+0x5c>
			rxBufferBleIndex = 0;
   1ba4c:	2200      	movs	r2, #0
   1ba4e:	701a      	strb	r2, [r3, #0]
	usart_read_job(&usart_BLE, &bleRcvByte);
   1ba50:	0021      	movs	r1, r4
   1ba52:	4b1a      	ldr	r3, [pc, #104]	; (1babc <readBleCallback+0xc8>)
   1ba54:	481a      	ldr	r0, [pc, #104]	; (1bac0 <readBleCallback+0xcc>)
   1ba56:	4798      	blx	r3
}
   1ba58:	bd70      	pop	{r4, r5, r6, pc}
		if(BleReceiveInProgress){
   1ba5a:	4a16      	ldr	r2, [pc, #88]	; (1bab4 <readBleCallback+0xc0>)
   1ba5c:	7811      	ldrb	r1, [r2, #0]
   1ba5e:	2900      	cmp	r1, #0
   1ba60:	d0f6      	beq.n	1ba50 <readBleCallback+0x5c>
			BleReceiveInProgress = false;
   1ba62:	7013      	strb	r3, [r2, #0]
			BleReceiveComplete = true;
   1ba64:	2201      	movs	r2, #1
   1ba66:	4b17      	ldr	r3, [pc, #92]	; (1bac4 <readBleCallback+0xd0>)
   1ba68:	701a      	strb	r2, [r3, #0]
			if (BleBackgroundProcess){
   1ba6a:	4b17      	ldr	r3, [pc, #92]	; (1bac8 <readBleCallback+0xd4>)
   1ba6c:	781b      	ldrb	r3, [r3, #0]
   1ba6e:	2b00      	cmp	r3, #0
   1ba70:	d0ee      	beq.n	1ba50 <readBleCallback+0x5c>
				current_input = input_BLE_message;
   1ba72:	4b16      	ldr	r3, [pc, #88]	; (1bacc <readBleCallback+0xd8>)
   1ba74:	3207      	adds	r2, #7
   1ba76:	601a      	str	r2, [r3, #0]
				BLE_handleMessage();
   1ba78:	4b15      	ldr	r3, [pc, #84]	; (1bad0 <readBleCallback+0xdc>)
   1ba7a:	4798      	blx	r3
   1ba7c:	e7e8      	b.n	1ba50 <readBleCallback+0x5c>
   1ba7e:	2300      	movs	r3, #0
		rxBufferBle[i] = 0;
   1ba80:	2100      	movs	r1, #0
   1ba82:	54d1      	strb	r1, [r2, r3]
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   1ba84:	3301      	adds	r3, #1
   1ba86:	2b64      	cmp	r3, #100	; 0x64
   1ba88:	d1fb      	bne.n	1ba82 <readBleCallback+0x8e>
	rxBufferBleIndex = 0;
   1ba8a:	4b0b      	ldr	r3, [pc, #44]	; (1bab8 <readBleCallback+0xc4>)
	BleReceiveComplete = false;
   1ba8c:	4d0d      	ldr	r5, [pc, #52]	; (1bac4 <readBleCallback+0xd0>)
	rxBufferBleIndex = 0;
   1ba8e:	7019      	strb	r1, [r3, #0]
	BleReceiveComplete = false;
   1ba90:	7029      	strb	r1, [r5, #0]
			BleReceiveInProgress = true;
   1ba92:	2101      	movs	r1, #1
   1ba94:	7001      	strb	r1, [r0, #0]
   1ba96:	e7cd      	b.n	1ba34 <readBleCallback+0x40>
   1ba98:	20002b0c 	.word	0x20002b0c
   1ba9c:	20002d1c 	.word	0x20002d1c
   1baa0:	20001316 	.word	0x20001316
   1baa4:	20000d58 	.word	0x20000d58
   1baa8:	20002e7c 	.word	0x20002e7c
   1baac:	200039e0 	.word	0x200039e0
   1bab0:	40002800 	.word	0x40002800
   1bab4:	20000d2a 	.word	0x20000d2a
   1bab8:	20003398 	.word	0x20003398
   1babc:	00018d9d 	.word	0x00018d9d
   1bac0:	20000ec4 	.word	0x20000ec4
   1bac4:	20000d29 	.word	0x20000d29
   1bac8:	20000d28 	.word	0x20000d28
   1bacc:	20003d24 	.word	0x20003d24
   1bad0:	0000eedd 	.word	0x0000eedd

0001bad4 <disable_comms>:
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1bad4:	2107      	movs	r1, #7
void disable_comms(void){
   1bad6:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1bad8:	4b1f      	ldr	r3, [pc, #124]	; (1bb58 <disable_comms+0x84>)
   1bada:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1badc:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
   1bade:	4219      	tst	r1, r3
   1bae0:	d1fc      	bne.n	1badc <disable_comms+0x8>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1bae2:	2383      	movs	r3, #131	; 0x83
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   1bae4:	2102      	movs	r1, #2
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1bae6:	7513      	strb	r3, [r2, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1bae8:	7613      	strb	r3, [r2, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   1baea:	6813      	ldr	r3, [r2, #0]
   1baec:	438b      	bics	r3, r1
   1baee:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1baf0:	4b1a      	ldr	r3, [pc, #104]	; (1bb5c <disable_comms+0x88>)
   1baf2:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
   1baf4:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   1baf6:	2b00      	cmp	r3, #0
   1baf8:	d1fc      	bne.n	1baf4 <disable_comms+0x20>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1bafa:	2102      	movs	r1, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1bafc:	338f      	adds	r3, #143	; 0x8f
   1bafe:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1bb00:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1bb02:	6813      	ldr	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1bb04:	4e16      	ldr	r6, [pc, #88]	; (1bb60 <disable_comms+0x8c>)
   1bb06:	438b      	bics	r3, r1
   1bb08:	6013      	str	r3, [r2, #0]
   1bb0a:	6834      	ldr	r4, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1bb0c:	4d15      	ldr	r5, [pc, #84]	; (1bb64 <disable_comms+0x90>)
   1bb0e:	0020      	movs	r0, r4
   1bb10:	47a8      	blx	r5
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1bb12:	231f      	movs	r3, #31
   1bb14:	4018      	ands	r0, r3
   1bb16:	3b1e      	subs	r3, #30
   1bb18:	2280      	movs	r2, #128	; 0x80
   1bb1a:	4083      	lsls	r3, r0
   1bb1c:	4912      	ldr	r1, [pc, #72]	; (1bb68 <disable_comms+0x94>)
   1bb1e:	508b      	str	r3, [r1, r2]
   1bb20:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
   1bb22:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1bb24:	2b00      	cmp	r3, #0
   1bb26:	d1fc      	bne.n	1bb22 <disable_comms+0x4e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   1bb28:	2202      	movs	r2, #2
   1bb2a:	6823      	ldr	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1bb2c:	4e0f      	ldr	r6, [pc, #60]	; (1bb6c <disable_comms+0x98>)
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   1bb2e:	4393      	bics	r3, r2
   1bb30:	6023      	str	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1bb32:	6834      	ldr	r4, [r6, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1bb34:	0020      	movs	r0, r4
   1bb36:	47a8      	blx	r5
   1bb38:	231f      	movs	r3, #31
   1bb3a:	4018      	ands	r0, r3
   1bb3c:	3b1e      	subs	r3, #30
   1bb3e:	2280      	movs	r2, #128	; 0x80
   1bb40:	4083      	lsls	r3, r0
   1bb42:	4909      	ldr	r1, [pc, #36]	; (1bb68 <disable_comms+0x94>)
   1bb44:	508b      	str	r3, [r1, r2]
   1bb46:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
   1bb48:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1bb4a:	2b00      	cmp	r3, #0
   1bb4c:	d1fc      	bne.n	1bb48 <disable_comms+0x74>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   1bb4e:	2202      	movs	r2, #2
   1bb50:	6823      	ldr	r3, [r4, #0]
   1bb52:	4393      	bics	r3, r2
   1bb54:	6023      	str	r3, [r4, #0]
}
   1bb56:	bd70      	pop	{r4, r5, r6, pc}
   1bb58:	20000e78 	.word	0x20000e78
   1bb5c:	20000e6c 	.word	0x20000e6c
   1bb60:	20000e34 	.word	0x20000e34
   1bb64:	00018cf5 	.word	0x00018cf5
   1bb68:	e000e100 	.word	0xe000e100
   1bb6c:	20000ec4 	.word	0x20000ec4

0001bb70 <spi_setBaud>:
void spi_setBaud(uint32_t baudRate){
   1bb70:	b570      	push	{r4, r5, r6, lr}
   1bb72:	b082      	sub	sp, #8
	uint16_t baud = 0;
   1bb74:	466b      	mov	r3, sp
   1bb76:	1d9c      	adds	r4, r3, #6
   1bb78:	2300      	movs	r3, #0
void spi_setBaud(uint32_t baudRate){
   1bb7a:	0006      	movs	r6, r0
	SercomSpi *const spi_module = &(module->hw->SPI);
   1bb7c:	4d12      	ldr	r5, [pc, #72]	; (1bbc8 <spi_setBaud+0x58>)
	uint16_t baud = 0;
   1bb7e:	8023      	strh	r3, [r4, #0]
   1bb80:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1bb82:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1bb84:	2b00      	cmp	r3, #0
   1bb86:	d1fc      	bne.n	1bb82 <spi_setBaud+0x12>
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1bb88:	2102      	movs	r1, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1bb8a:	338f      	adds	r3, #143	; 0x8f
   1bb8c:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1bb8e:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1bb90:	6813      	ldr	r3, [r2, #0]
   1bb92:	438b      	bics	r3, r1
   1bb94:	6013      	str	r3, [r2, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(spi_main.hw);
   1bb96:	6828      	ldr	r0, [r5, #0]
   1bb98:	4b0c      	ldr	r3, [pc, #48]	; (1bbcc <spi_setBaud+0x5c>)
   1bb9a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1bb9c:	3012      	adds	r0, #18
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1bb9e:	4b0c      	ldr	r3, [pc, #48]	; (1bbd0 <spi_setBaud+0x60>)
   1bba0:	b2c0      	uxtb	r0, r0
   1bba2:	4798      	blx	r3
	enum status_code error_code = _sercom_get_sync_baud_val(
   1bba4:	0022      	movs	r2, r4
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1bba6:	0001      	movs	r1, r0
	enum status_code error_code = _sercom_get_sync_baud_val(
   1bba8:	4b0a      	ldr	r3, [pc, #40]	; (1bbd4 <spi_setBaud+0x64>)
   1bbaa:	0030      	movs	r0, r6
   1bbac:	4798      	blx	r3
	spi_main.hw->SPI.BAUD.reg = (uint8_t)baud;
   1bbae:	682a      	ldr	r2, [r5, #0]
   1bbb0:	7823      	ldrb	r3, [r4, #0]
   1bbb2:	7313      	strb	r3, [r2, #12]
	return (spi_module->SYNCBUSY.reg);
   1bbb4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1bbb6:	2b00      	cmp	r3, #0
   1bbb8:	d1fc      	bne.n	1bbb4 <spi_setBaud+0x44>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1bbba:	2102      	movs	r1, #2
   1bbbc:	6813      	ldr	r3, [r2, #0]
   1bbbe:	430b      	orrs	r3, r1
   1bbc0:	6013      	str	r3, [r2, #0]
}
   1bbc2:	b002      	add	sp, #8
   1bbc4:	bd70      	pop	{r4, r5, r6, pc}
   1bbc6:	46c0      	nop			; (mov r8, r8)
   1bbc8:	20000e6c 	.word	0x20000e6c
   1bbcc:	0001f435 	.word	0x0001f435
   1bbd0:	0001fc8d 	.word	0x0001fc8d
   1bbd4:	0001f001 	.word	0x0001f001

0001bbd8 <setup_spi>:
void setup_spi(void){
   1bbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bbda:	46ce      	mov	lr, r9
   1bbdc:	4647      	mov	r7, r8
	slave->ss_pin          = config->ss_pin;
   1bbde:	2317      	movs	r3, #23
	slave->address_enabled = config->address_enabled;
   1bbe0:	2600      	movs	r6, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
   1bbe2:	2501      	movs	r5, #1
   1bbe4:	b580      	push	{r7, lr}
	slave->ss_pin          = config->ss_pin;
   1bbe6:	4f6d      	ldr	r7, [pc, #436]	; (1bd9c <setup_spi+0x1c4>)
   1bbe8:	b083      	sub	sp, #12
   1bbea:	ac01      	add	r4, sp, #4
   1bbec:	703b      	strb	r3, [r7, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bbee:	4b6c      	ldr	r3, [pc, #432]	; (1bda0 <setup_spi+0x1c8>)
   1bbf0:	0021      	movs	r1, r4
   1bbf2:	2017      	movs	r0, #23
   1bbf4:	4699      	mov	r9, r3
	slave->address_enabled = config->address_enabled;
   1bbf6:	707e      	strb	r6, [r7, #1]
	slave->address         = config->address;
   1bbf8:	70be      	strb	r6, [r7, #2]
   1bbfa:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1bbfc:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1bbfe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bc00:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1bc02:	783a      	ldrb	r2, [r7, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   1bc04:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
   1bc06:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   1bc08:	4688      	mov	r8, r1
   1bc0a:	2900      	cmp	r1, #0
   1bc0c:	d000      	beq.n	1bc10 <setup_spi+0x38>
   1bc0e:	e0c3      	b.n	1bd98 <setup_spi+0x1c0>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1bc10:	271f      	movs	r7, #31
   1bc12:	0029      	movs	r1, r5
   1bc14:	403a      	ands	r2, r7
   1bc16:	4091      	lsls	r1, r2
   1bc18:	000a      	movs	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
   1bc1a:	4962      	ldr	r1, [pc, #392]	; (1bda4 <setup_spi+0x1cc>)
   1bc1c:	01db      	lsls	r3, r3, #7
   1bc1e:	468c      	mov	ip, r1
   1bc20:	4463      	add	r3, ip
   1bc22:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   1bc24:	2312      	movs	r3, #18
   1bc26:	4e60      	ldr	r6, [pc, #384]	; (1bda8 <setup_spi+0x1d0>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bc28:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   1bc2a:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
   1bc2c:	4643      	mov	r3, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bc2e:	2012      	movs	r0, #18
	slave->address_enabled = config->address_enabled;
   1bc30:	7073      	strb	r3, [r6, #1]
	slave->address         = config->address;
   1bc32:	70b3      	strb	r3, [r6, #2]
	config->powersave  = false;
   1bc34:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   1bc36:	7065      	strb	r5, [r4, #1]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1bc38:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bc3a:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   1bc3c:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
   1bc3e:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   1bc40:	09d6      	lsrs	r6, r2, #7
   1bc42:	d000      	beq.n	1bc46 <setup_spi+0x6e>
   1bc44:	e0a5      	b.n	1bd92 <setup_spi+0x1ba>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1bc46:	0029      	movs	r1, r5
   1bc48:	403a      	ands	r2, r7
   1bc4a:	4091      	lsls	r1, r2
   1bc4c:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1bc4e:	4955      	ldr	r1, [pc, #340]	; (1bda4 <setup_spi+0x1cc>)
   1bc50:	01db      	lsls	r3, r3, #7
   1bc52:	468c      	mov	ip, r1
   1bc54:	4463      	add	r3, ip
   1bc56:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   1bc58:	4b54      	ldr	r3, [pc, #336]	; (1bdac <setup_spi+0x1d4>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bc5a:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   1bc5c:	4698      	mov	r8, r3
   1bc5e:	2313      	movs	r3, #19
   1bc60:	4642      	mov	r2, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bc62:	2013      	movs	r0, #19
	slave->ss_pin          = config->ss_pin;
   1bc64:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
   1bc66:	7056      	strb	r6, [r2, #1]
	slave->address         = config->address;
   1bc68:	7096      	strb	r6, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   1bc6a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1bc6c:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1bc6e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bc70:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   1bc72:	4643      	mov	r3, r8
   1bc74:	781a      	ldrb	r2, [r3, #0]
   1bc76:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
   1bc78:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   1bc7a:	4688      	mov	r8, r1
   1bc7c:	2900      	cmp	r1, #0
   1bc7e:	d000      	beq.n	1bc82 <setup_spi+0xaa>
   1bc80:	e08a      	b.n	1bd98 <setup_spi+0x1c0>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1bc82:	0029      	movs	r1, r5
   1bc84:	403a      	ands	r2, r7
   1bc86:	4091      	lsls	r1, r2
   1bc88:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1bc8a:	4946      	ldr	r1, [pc, #280]	; (1bda4 <setup_spi+0x1cc>)
   1bc8c:	01db      	lsls	r3, r3, #7
   1bc8e:	468c      	mov	ip, r1
   1bc90:	4463      	add	r3, ip
   1bc92:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   1bc94:	2315      	movs	r3, #21
   1bc96:	4e46      	ldr	r6, [pc, #280]	; (1bdb0 <setup_spi+0x1d8>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bc98:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   1bc9a:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
   1bc9c:	4643      	mov	r3, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bc9e:	2015      	movs	r0, #21
	slave->address_enabled = config->address_enabled;
   1bca0:	7073      	strb	r3, [r6, #1]
	slave->address         = config->address;
   1bca2:	70b3      	strb	r3, [r6, #2]
	config->powersave  = false;
   1bca4:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   1bca6:	7065      	strb	r5, [r4, #1]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1bca8:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bcaa:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   1bcac:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
   1bcae:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   1bcb0:	09d6      	lsrs	r6, r2, #7
   1bcb2:	d000      	beq.n	1bcb6 <setup_spi+0xde>
   1bcb4:	e06d      	b.n	1bd92 <setup_spi+0x1ba>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1bcb6:	0029      	movs	r1, r5
   1bcb8:	403a      	ands	r2, r7
   1bcba:	4091      	lsls	r1, r2
   1bcbc:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1bcbe:	4939      	ldr	r1, [pc, #228]	; (1bda4 <setup_spi+0x1cc>)
   1bcc0:	01db      	lsls	r3, r3, #7
   1bcc2:	468c      	mov	ip, r1
   1bcc4:	4463      	add	r3, ip
   1bcc6:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   1bcc8:	4b3a      	ldr	r3, [pc, #232]	; (1bdb4 <setup_spi+0x1dc>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bcca:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   1bccc:	4698      	mov	r8, r3
   1bcce:	2314      	movs	r3, #20
   1bcd0:	4642      	mov	r2, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bcd2:	2014      	movs	r0, #20
	slave->ss_pin          = config->ss_pin;
   1bcd4:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
   1bcd6:	7056      	strb	r6, [r2, #1]
	slave->address         = config->address;
   1bcd8:	7096      	strb	r6, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   1bcda:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1bcdc:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1bcde:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bce0:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   1bce2:	4643      	mov	r3, r8
   1bce4:	781a      	ldrb	r2, [r3, #0]
   1bce6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
   1bce8:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   1bcea:	4688      	mov	r8, r1
   1bcec:	2900      	cmp	r1, #0
   1bcee:	d153      	bne.n	1bd98 <setup_spi+0x1c0>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1bcf0:	0029      	movs	r1, r5
   1bcf2:	403a      	ands	r2, r7
   1bcf4:	4091      	lsls	r1, r2
   1bcf6:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1bcf8:	492a      	ldr	r1, [pc, #168]	; (1bda4 <setup_spi+0x1cc>)
   1bcfa:	01db      	lsls	r3, r3, #7
   1bcfc:	468c      	mov	ip, r1
   1bcfe:	4463      	add	r3, ip
   1bd00:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   1bd02:	230f      	movs	r3, #15
   1bd04:	4e2c      	ldr	r6, [pc, #176]	; (1bdb8 <setup_spi+0x1e0>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bd06:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   1bd08:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
   1bd0a:	4643      	mov	r3, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bd0c:	200f      	movs	r0, #15
	slave->address_enabled = config->address_enabled;
   1bd0e:	7073      	strb	r3, [r6, #1]
	slave->address         = config->address;
   1bd10:	70b3      	strb	r3, [r6, #2]
	config->powersave  = false;
   1bd12:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   1bd14:	7065      	strb	r5, [r4, #1]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1bd16:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bd18:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   1bd1a:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
   1bd1c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   1bd1e:	09d6      	lsrs	r6, r2, #7
   1bd20:	d137      	bne.n	1bd92 <setup_spi+0x1ba>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1bd22:	4017      	ands	r7, r2
   1bd24:	002a      	movs	r2, r5
		port_base->OUTSET.reg = pin_mask;
   1bd26:	491f      	ldr	r1, [pc, #124]	; (1bda4 <setup_spi+0x1cc>)
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1bd28:	40ba      	lsls	r2, r7
		port_base->OUTSET.reg = pin_mask;
   1bd2a:	468c      	mov	ip, r1
	config->mode             = SPI_MODE_MASTER;
   1bd2c:	4c23      	ldr	r4, [pc, #140]	; (1bdbc <setup_spi+0x1e4>)
   1bd2e:	01db      	lsls	r3, r3, #7
   1bd30:	4463      	add	r3, ip
   1bd32:	619a      	str	r2, [r3, #24]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1bd34:	0020      	movs	r0, r4
	config->generator_source = GCLK_GENERATOR_0;
   1bd36:	2324      	movs	r3, #36	; 0x24
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1bd38:	220c      	movs	r2, #12
	config->generator_source = GCLK_GENERATOR_0;
   1bd3a:	54e6      	strb	r6, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1bd3c:	2100      	movs	r1, #0
   1bd3e:	4b20      	ldr	r3, [pc, #128]	; (1bdc0 <setup_spi+0x1e8>)
   1bd40:	3018      	adds	r0, #24
	config->mode             = SPI_MODE_MASTER;
   1bd42:	7025      	strb	r5, [r4, #0]
	config->receiver_enable  = true;
   1bd44:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
   1bd46:	74e5      	strb	r5, [r4, #19]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1bd48:	6066      	str	r6, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1bd4a:	60a6      	str	r6, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1bd4c:	7426      	strb	r6, [r4, #16]
	config->run_in_standby   = false;
   1bd4e:	7466      	strb	r6, [r4, #17]
	config->master_slave_select_enable= false;
   1bd50:	7526      	strb	r6, [r4, #20]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1bd52:	4798      	blx	r3
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
   1bd54:	2380      	movs	r3, #128	; 0x80
   1bd56:	025b      	lsls	r3, r3, #9
   1bd58:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
   1bd5a:	4b1a      	ldr	r3, [pc, #104]	; (1bdc4 <setup_spi+0x1ec>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   1bd5c:	4d1a      	ldr	r5, [pc, #104]	; (1bdc8 <setup_spi+0x1f0>)
	config_spi_master.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
   1bd5e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
   1bd60:	4b1a      	ldr	r3, [pc, #104]	; (1bdcc <setup_spi+0x1f4>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   1bd62:	0022      	movs	r2, r4
	config_spi_master.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
   1bd64:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
   1bd66:	4b1a      	ldr	r3, [pc, #104]	; (1bdd0 <setup_spi+0x1f8>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   1bd68:	491a      	ldr	r1, [pc, #104]	; (1bdd4 <setup_spi+0x1fc>)
	config_spi_master.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
   1bd6a:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = baudRateMin;
   1bd6c:	4b1a      	ldr	r3, [pc, #104]	; (1bdd8 <setup_spi+0x200>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   1bd6e:	0028      	movs	r0, r5
	config_spi_master.mode_specific.master.baudrate = baudRateMin;
   1bd70:	61a3      	str	r3, [r4, #24]
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   1bd72:	4b1a      	ldr	r3, [pc, #104]	; (1bddc <setup_spi+0x204>)
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1bd74:	62e6      	str	r6, [r4, #44]	; 0x2c
   1bd76:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
   1bd78:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1bd7a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1bd7c:	2b00      	cmp	r3, #0
   1bd7e:	d1fc      	bne.n	1bd7a <setup_spi+0x1a2>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1bd80:	2102      	movs	r1, #2
   1bd82:	6813      	ldr	r3, [r2, #0]
   1bd84:	430b      	orrs	r3, r1
   1bd86:	6013      	str	r3, [r2, #0]
}
   1bd88:	b003      	add	sp, #12
   1bd8a:	bc0c      	pop	{r2, r3}
   1bd8c:	4690      	mov	r8, r2
   1bd8e:	4699      	mov	r9, r3
   1bd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd92:	4643      	mov	r3, r8
   1bd94:	619b      	str	r3, [r3, #24]
   1bd96:	deff      	udf	#255	; 0xff
   1bd98:	61b6      	str	r6, [r6, #24]
   1bd9a:	deff      	udf	#255	; 0xff
   1bd9c:	20000e2c 	.word	0x20000e2c
   1bda0:	0001f539 	.word	0x0001f539
   1bda4:	40002800 	.word	0x40002800
   1bda8:	20000e84 	.word	0x20000e84
   1bdac:	20000e30 	.word	0x20000e30
   1bdb0:	20000e88 	.word	0x20000e88
   1bdb4:	20000e28 	.word	0x20000e28
   1bdb8:	20000e68 	.word	0x20000e68
   1bdbc:	20000e8c 	.word	0x20000e8c
   1bdc0:	00028a1d 	.word	0x00028a1d
   1bdc4:	00280003 	.word	0x00280003
   1bdc8:	20000e6c 	.word	0x20000e6c
   1bdcc:	002a0003 	.word	0x002a0003
   1bdd0:	002b0003 	.word	0x002b0003
   1bdd4:	42001000 	.word	0x42001000
   1bdd8:	000f4240 	.word	0x000f4240
   1bddc:	0001e80d 	.word	0x0001e80d

0001bde0 <BLE_send_parse_CMD>:
	char *rcvCmd, char rcvStr[], uint8_t *rcvLength, uint16_t maxLength){
   1bde0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bde2:	4657      	mov	r7, sl
   1bde4:	464e      	mov	r6, r9
   1bde6:	4645      	mov	r5, r8
   1bde8:	46de      	mov	lr, fp
   1bdea:	b5e0      	push	{r5, r6, r7, lr}
   1bdec:	b085      	sub	sp, #20
   1bdee:	4698      	mov	r8, r3
   1bdf0:	ab10      	add	r3, sp, #64	; 0x40
   1bdf2:	881e      	ldrh	r6, [r3, #0]
	if (current_state==st_powerdown){
   1bdf4:	4b50      	ldr	r3, [pc, #320]	; (1bf38 <BLE_send_parse_CMD+0x158>)
	char *rcvCmd, char rcvStr[], uint8_t *rcvLength, uint16_t maxLength){
   1bdf6:	0017      	movs	r7, r2
	if (current_state==st_powerdown){
   1bdf8:	681a      	ldr	r2, [r3, #0]
	char *rcvCmd, char rcvStr[], uint8_t *rcvLength, uint16_t maxLength){
   1bdfa:	468a      	mov	sl, r1
		return STATUS_SUSPEND;
   1bdfc:	2306      	movs	r3, #6
	if (current_state==st_powerdown){
   1bdfe:	2a04      	cmp	r2, #4
   1be00:	d107      	bne.n	1be12 <BLE_send_parse_CMD+0x32>
}
   1be02:	0018      	movs	r0, r3
   1be04:	b005      	add	sp, #20
   1be06:	bc3c      	pop	{r2, r3, r4, r5}
   1be08:	4690      	mov	r8, r2
   1be0a:	4699      	mov	r9, r3
   1be0c:	46a2      	mov	sl, r4
   1be0e:	46ab      	mov	fp, r5
   1be10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BleBackgroundProcess = false;
   1be12:	4b4a      	ldr	r3, [pc, #296]	; (1bf3c <BLE_send_parse_CMD+0x15c>)
   1be14:	4699      	mov	r9, r3
   1be16:	2300      	movs	r3, #0
   1be18:	464a      	mov	r2, r9
   1be1a:	7013      	strb	r3, [r2, #0]
   1be1c:	ab02      	add	r3, sp, #8
   1be1e:	1dd9      	adds	r1, r3, #7
	return (usart_BLE.hw->USART.CTRLA.reg & SERCOM_USART_CTRLA_ENABLE);
   1be20:	4b47      	ldr	r3, [pc, #284]	; (1bf40 <BLE_send_parse_CMD+0x160>)
   1be22:	7008      	strb	r0, [r1, #0]
   1be24:	469b      	mov	fp, r3
   1be26:	681b      	ldr	r3, [r3, #0]
   1be28:	681b      	ldr	r3, [r3, #0]
	if (!isBleCommEnabled()){
   1be2a:	079b      	lsls	r3, r3, #30
   1be2c:	d419      	bmi.n	1be62 <BLE_send_parse_CMD+0x82>
   1be2e:	4d45      	ldr	r5, [pc, #276]	; (1bf44 <BLE_send_parse_CMD+0x164>)
   1be30:	4c45      	ldr	r4, [pc, #276]	; (1bf48 <BLE_send_parse_CMD+0x168>)
	startMs = getCurrentMs();
   1be32:	47a0      	blx	r4
   1be34:	0007      	movs	r7, r0
	while(!isBleReceiveComplete()){
   1be36:	e003      	b.n	1be40 <BLE_send_parse_CMD+0x60>
		currMs = getCurrentMs();
   1be38:	47a0      	blx	r4
		if ((currMs-startMs)>100){
   1be3a:	1bc0      	subs	r0, r0, r7
   1be3c:	2864      	cmp	r0, #100	; 0x64
   1be3e:	d80b      	bhi.n	1be58 <BLE_send_parse_CMD+0x78>
	return BleReceiveComplete;
   1be40:	782b      	ldrb	r3, [r5, #0]
	while(!isBleReceiveComplete()){
   1be42:	2b00      	cmp	r3, #0
   1be44:	d0f8      	beq.n	1be38 <BLE_send_parse_CMD+0x58>
	if (rxBufferBleIndex == 0){
   1be46:	4c41      	ldr	r4, [pc, #260]	; (1bf4c <BLE_send_parse_CMD+0x16c>)
		return STATUS_ERR_BAD_DATA;
   1be48:	2313      	movs	r3, #19
	if (rxBufferBleIndex == 0){
   1be4a:	7822      	ldrb	r2, [r4, #0]
   1be4c:	2a00      	cmp	r2, #0
   1be4e:	d14e      	bne.n	1beee <BLE_send_parse_CMD+0x10e>
	BleBackgroundProcess = true;
   1be50:	2201      	movs	r2, #1
   1be52:	4649      	mov	r1, r9
   1be54:	700a      	strb	r2, [r1, #0]
	return commStatus;
   1be56:	e7d4      	b.n	1be02 <BLE_send_parse_CMD+0x22>
			BleBackgroundProcess = true;
   1be58:	2301      	movs	r3, #1
   1be5a:	464a      	mov	r2, r9
   1be5c:	7013      	strb	r3, [r2, #0]
			return STATUS_ERR_TIMEOUT;
   1be5e:	3311      	adds	r3, #17
   1be60:	e7cf      	b.n	1be02 <BLE_send_parse_CMD+0x22>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   1be62:	2280      	movs	r2, #128	; 0x80
   1be64:	4b3a      	ldr	r3, [pc, #232]	; (1bf50 <BLE_send_parse_CMD+0x170>)
   1be66:	03d2      	lsls	r2, r2, #15
   1be68:	619a      	str	r2, [r3, #24]
		rxBufferBle[i] = 0;
   1be6a:	2000      	movs	r0, #0
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   1be6c:	2300      	movs	r3, #0
   1be6e:	4a39      	ldr	r2, [pc, #228]	; (1bf54 <BLE_send_parse_CMD+0x174>)
		rxBufferBle[i] = 0;
   1be70:	54d0      	strb	r0, [r2, r3]
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   1be72:	3301      	adds	r3, #1
   1be74:	2b64      	cmp	r3, #100	; 0x64
   1be76:	d1fb      	bne.n	1be70 <BLE_send_parse_CMD+0x90>
	rxBufferBleIndex = 0;
   1be78:	4b34      	ldr	r3, [pc, #208]	; (1bf4c <BLE_send_parse_CMD+0x16c>)
	BleReceiveComplete = false;
   1be7a:	4d32      	ldr	r5, [pc, #200]	; (1bf44 <BLE_send_parse_CMD+0x164>)
	rxBufferBleIndex = 0;
   1be7c:	7018      	strb	r0, [r3, #0]
	BleTransmitComplete=false;
   1be7e:	4b36      	ldr	r3, [pc, #216]	; (1bf58 <BLE_send_parse_CMD+0x178>)
	BleReceiveComplete = false;
   1be80:	7028      	strb	r0, [r5, #0]
	writeStatus = usart_write_buffer_job(&usart_BLE, tx_data, length);
   1be82:	2201      	movs	r2, #1
	BleTransmitComplete=false;
   1be84:	7018      	strb	r0, [r3, #0]
	writeStatus = usart_write_buffer_job(&usart_BLE, tx_data, length);
   1be86:	4b35      	ldr	r3, [pc, #212]	; (1bf5c <BLE_send_parse_CMD+0x17c>)
   1be88:	4658      	mov	r0, fp
   1be8a:	4798      	blx	r3
	startMs = getCurrentMs();
   1be8c:	4c2e      	ldr	r4, [pc, #184]	; (1bf48 <BLE_send_parse_CMD+0x168>)
	writeStatus = usart_write_buffer_job(&usart_BLE, tx_data, length);
   1be8e:	9000      	str	r0, [sp, #0]
	startMs = getCurrentMs();
   1be90:	47a0      	blx	r4
   1be92:	4653      	mov	r3, sl
   1be94:	46ba      	mov	sl, r7
   1be96:	9301      	str	r3, [sp, #4]
   1be98:	0007      	movs	r7, r0
   1be9a:	e003      	b.n	1bea4 <BLE_send_parse_CMD+0xc4>
		currMs = getCurrentMs();
   1be9c:	47a0      	blx	r4
		if ((currMs-startMs)>100){
   1be9e:	1bc0      	subs	r0, r0, r7
   1bea0:	2864      	cmp	r0, #100	; 0x64
   1bea2:	d81f      	bhi.n	1bee4 <BLE_send_parse_CMD+0x104>
	while(!BleTransmitComplete){
   1bea4:	4b2c      	ldr	r3, [pc, #176]	; (1bf58 <BLE_send_parse_CMD+0x178>)
   1bea6:	781b      	ldrb	r3, [r3, #0]
   1bea8:	2b00      	cmp	r3, #0
   1beaa:	d0f7      	beq.n	1be9c <BLE_send_parse_CMD+0xbc>
   1beac:	9b01      	ldr	r3, [sp, #4]
   1beae:	4657      	mov	r7, sl
   1beb0:	469a      	mov	sl, r3
	if(commStatus){
   1beb2:	9b00      	ldr	r3, [sp, #0]
   1beb4:	2b00      	cmp	r3, #0
   1beb6:	d115      	bne.n	1bee4 <BLE_send_parse_CMD+0x104>
	if (sendLength>0){
   1beb8:	2f00      	cmp	r7, #0
   1beba:	d013      	beq.n	1bee4 <BLE_send_parse_CMD+0x104>
	BleTransmitComplete=false;
   1bebc:	466a      	mov	r2, sp
   1bebe:	4b26      	ldr	r3, [pc, #152]	; (1bf58 <BLE_send_parse_CMD+0x178>)
   1bec0:	7812      	ldrb	r2, [r2, #0]
	writeStatus = usart_write_buffer_job(&usart_BLE, tx_data, length);
   1bec2:	4651      	mov	r1, sl
	BleTransmitComplete=false;
   1bec4:	701a      	strb	r2, [r3, #0]
	writeStatus = usart_write_buffer_job(&usart_BLE, tx_data, length);
   1bec6:	4658      	mov	r0, fp
   1bec8:	b2ba      	uxth	r2, r7
   1beca:	4b24      	ldr	r3, [pc, #144]	; (1bf5c <BLE_send_parse_CMD+0x17c>)
   1becc:	4798      	blx	r3
	startMs = getCurrentMs();
   1bece:	47a0      	blx	r4
   1bed0:	0007      	movs	r7, r0
   1bed2:	e003      	b.n	1bedc <BLE_send_parse_CMD+0xfc>
		currMs = getCurrentMs();
   1bed4:	47a0      	blx	r4
		if ((currMs-startMs)>100){
   1bed6:	1bc0      	subs	r0, r0, r7
   1bed8:	2864      	cmp	r0, #100	; 0x64
   1beda:	d803      	bhi.n	1bee4 <BLE_send_parse_CMD+0x104>
	while(!BleTransmitComplete){
   1bedc:	4b1e      	ldr	r3, [pc, #120]	; (1bf58 <BLE_send_parse_CMD+0x178>)
   1bede:	781b      	ldrb	r3, [r3, #0]
   1bee0:	2b00      	cmp	r3, #0
   1bee2:	d0f7      	beq.n	1bed4 <BLE_send_parse_CMD+0xf4>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1bee4:	2280      	movs	r2, #128	; 0x80
   1bee6:	4b1a      	ldr	r3, [pc, #104]	; (1bf50 <BLE_send_parse_CMD+0x170>)
   1bee8:	03d2      	lsls	r2, r2, #15
   1beea:	615a      	str	r2, [r3, #20]
   1beec:	e7a1      	b.n	1be32 <BLE_send_parse_CMD+0x52>
	*rcvCmd = rxBufferBle[0];
   1beee:	4641      	mov	r1, r8
   1bef0:	4a18      	ldr	r2, [pc, #96]	; (1bf54 <BLE_send_parse_CMD+0x174>)
   1bef2:	7813      	ldrb	r3, [r2, #0]
   1bef4:	700b      	strb	r3, [r1, #0]
	*rcvLength = rxBufferBleIndex-1;
   1bef6:	7823      	ldrb	r3, [r4, #0]
   1bef8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1befa:	3b01      	subs	r3, #1
   1befc:	b2db      	uxtb	r3, r3
   1befe:	700b      	strb	r3, [r1, #0]
	if (*rcvLength>0){
   1bf00:	2b00      	cmp	r3, #0
   1bf02:	d00f      	beq.n	1bf24 <BLE_send_parse_CMD+0x144>
		transferBytes = min(rxBufferBleIndex, maxLength);
   1bf04:	7823      	ldrb	r3, [r4, #0]
   1bf06:	429e      	cmp	r6, r3
   1bf08:	d900      	bls.n	1bf0c <BLE_send_parse_CMD+0x12c>
   1bf0a:	7826      	ldrb	r6, [r4, #0]
   1bf0c:	990e      	ldr	r1, [sp, #56]	; 0x38
		for (i=0;i<transferBytes;i++){
   1bf0e:	2300      	movs	r3, #0
   1bf10:	2e00      	cmp	r6, #0
   1bf12:	d005      	beq.n	1bf20 <BLE_send_parse_CMD+0x140>
			rcvStr[i] = rxBufferBle[i+1];
   1bf14:	3301      	adds	r3, #1
   1bf16:	5cd0      	ldrb	r0, [r2, r3]
   1bf18:	7008      	strb	r0, [r1, #0]
   1bf1a:	3101      	adds	r1, #1
		for (i=0;i<transferBytes;i++){
   1bf1c:	429e      	cmp	r6, r3
   1bf1e:	d1f9      	bne.n	1bf14 <BLE_send_parse_CMD+0x134>
		*rcvLength = transferBytes;
   1bf20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bf22:	701e      	strb	r6, [r3, #0]
		for (i=0;i<transferBytes;i++){
   1bf24:	2300      	movs	r3, #0
		rxBufferBle[i] = 0;
   1bf26:	2100      	movs	r1, #0
   1bf28:	54d1      	strb	r1, [r2, r3]
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   1bf2a:	3301      	adds	r3, #1
   1bf2c:	2b64      	cmp	r3, #100	; 0x64
   1bf2e:	d1fb      	bne.n	1bf28 <BLE_send_parse_CMD+0x148>
	rxBufferBleIndex = 0;
   1bf30:	7021      	strb	r1, [r4, #0]
	BleReceiveComplete = false;
   1bf32:	2300      	movs	r3, #0
   1bf34:	7029      	strb	r1, [r5, #0]
   1bf36:	e78b      	b.n	1be50 <BLE_send_parse_CMD+0x70>
   1bf38:	20002630 	.word	0x20002630
   1bf3c:	20000d28 	.word	0x20000d28
   1bf40:	20000ec4 	.word	0x20000ec4
   1bf44:	20000d29 	.word	0x20000d29
   1bf48:	00016df9 	.word	0x00016df9
   1bf4c:	20003398 	.word	0x20003398
   1bf50:	40002880 	.word	0x40002880
   1bf54:	200039e0 	.word	0x200039e0
   1bf58:	20000d2b 	.word	0x20000d2b
   1bf5c:	00018ded 	.word	0x00018ded

0001bf60 <BLE_read_message>:
enum status_code BLE_read_message(char *rcvCmd, char rcvStr[], uint8_t *rcvLength, uint16_t maxLength){
   1bf60:	b570      	push	{r4, r5, r6, lr}
	if (rxBufferBleIndex == 0){
   1bf62:	4e14      	ldr	r6, [pc, #80]	; (1bfb4 <BLE_read_message+0x54>)
enum status_code BLE_read_message(char *rcvCmd, char rcvStr[], uint8_t *rcvLength, uint16_t maxLength){
   1bf64:	0005      	movs	r5, r0
	if (rxBufferBleIndex == 0){
   1bf66:	7834      	ldrb	r4, [r6, #0]
		return STATUS_ERR_BAD_DATA;
   1bf68:	2013      	movs	r0, #19
	if (rxBufferBleIndex == 0){
   1bf6a:	2c00      	cmp	r4, #0
   1bf6c:	d100      	bne.n	1bf70 <BLE_read_message+0x10>
}
   1bf6e:	bd70      	pop	{r4, r5, r6, pc}
	*rcvCmd = rxBufferBle[0];
   1bf70:	4c11      	ldr	r4, [pc, #68]	; (1bfb8 <BLE_read_message+0x58>)
   1bf72:	7820      	ldrb	r0, [r4, #0]
   1bf74:	7028      	strb	r0, [r5, #0]
	*rcvLength = rxBufferBleIndex-1;
   1bf76:	7830      	ldrb	r0, [r6, #0]
   1bf78:	3801      	subs	r0, #1
   1bf7a:	b2c0      	uxtb	r0, r0
   1bf7c:	7010      	strb	r0, [r2, #0]
	if (*rcvLength>0){
   1bf7e:	2800      	cmp	r0, #0
   1bf80:	d00d      	beq.n	1bf9e <BLE_read_message+0x3e>
		transferBytes = min(rxBufferBleIndex, maxLength);
   1bf82:	7830      	ldrb	r0, [r6, #0]
   1bf84:	4283      	cmp	r3, r0
   1bf86:	d900      	bls.n	1bf8a <BLE_read_message+0x2a>
   1bf88:	7833      	ldrb	r3, [r6, #0]
		for (i=0;i<transferBytes;i++){
   1bf8a:	2000      	movs	r0, #0
   1bf8c:	2b00      	cmp	r3, #0
   1bf8e:	d005      	beq.n	1bf9c <BLE_read_message+0x3c>
			rcvStr[i] = rxBufferBle[i+1];
   1bf90:	3001      	adds	r0, #1
   1bf92:	5c25      	ldrb	r5, [r4, r0]
   1bf94:	700d      	strb	r5, [r1, #0]
   1bf96:	3101      	adds	r1, #1
		for (i=0;i<transferBytes;i++){
   1bf98:	4298      	cmp	r0, r3
   1bf9a:	d1f9      	bne.n	1bf90 <BLE_read_message+0x30>
		*rcvLength = transferBytes;
   1bf9c:	7013      	strb	r3, [r2, #0]
		for (i=0;i<transferBytes;i++){
   1bf9e:	2300      	movs	r3, #0
		rxBufferBle[i] = 0;
   1bfa0:	2200      	movs	r2, #0
   1bfa2:	54e2      	strb	r2, [r4, r3]
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   1bfa4:	3301      	adds	r3, #1
   1bfa6:	2b64      	cmp	r3, #100	; 0x64
   1bfa8:	d1fb      	bne.n	1bfa2 <BLE_read_message+0x42>
	BleReceiveComplete = false;
   1bfaa:	4b04      	ldr	r3, [pc, #16]	; (1bfbc <BLE_read_message+0x5c>)
	rxBufferBleIndex = 0;
   1bfac:	7032      	strb	r2, [r6, #0]
	BleReceiveComplete = false;
   1bfae:	2000      	movs	r0, #0
   1bfb0:	701a      	strb	r2, [r3, #0]
   1bfb2:	e7dc      	b.n	1bf6e <BLE_read_message+0xe>
   1bfb4:	20003398 	.word	0x20003398
   1bfb8:	200039e0 	.word	0x200039e0
   1bfbc:	20000d29 	.word	0x20000d29

0001bfc0 <configure_usart_BLE>:
void configure_usart_BLE(void){
   1bfc0:	b530      	push	{r4, r5, lr}
   1bfc2:	b091      	sub	sp, #68	; 0x44
	config->parity           = USART_PARITY_NONE;
   1bfc4:	4669      	mov	r1, sp
   1bfc6:	22ff      	movs	r2, #255	; 0xff
	config->data_order       = USART_DATAORDER_LSB;
   1bfc8:	2380      	movs	r3, #128	; 0x80
	config->parity           = USART_PARITY_NONE;
   1bfca:	810a      	strh	r2, [r1, #8]
	config->receiver_enable  = true;
   1bfcc:	2202      	movs	r2, #2
	config->data_order       = USART_DATAORDER_LSB;
   1bfce:	05db      	lsls	r3, r3, #23
   1bfd0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1bfd2:	2300      	movs	r3, #0
	config->receiver_enable  = true;
   1bfd4:	32ff      	adds	r2, #255	; 0xff
   1bfd6:	9209      	str	r2, [sp, #36]	; 0x24
	config->run_in_standby   = false;
   1bfd8:	3ad5      	subs	r2, #213	; 0xd5
   1bfda:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1bfdc:	3201      	adds	r2, #1
   1bfde:	548b      	strb	r3, [r1, r2]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1bfe0:	9301      	str	r3, [sp, #4]
	config->stopbits         = USART_STOPBITS_1;
   1bfe2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1bfe4:	72cb      	strb	r3, [r1, #11]
	config->ext_clock_freq   = 0;
   1bfe6:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1bfe8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1bfea:	820b      	strh	r3, [r1, #16]
	config->receive_pulse_length                    = 19;
   1bfec:	2313      	movs	r3, #19
   1bfee:	768b      	strb	r3, [r1, #26]
	config_usart.baudrate    = 115200;
   1bff0:	23e1      	movs	r3, #225	; 0xe1
   1bff2:	025b      	lsls	r3, r3, #9
   1bff4:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
   1bff6:	2390      	movs	r3, #144	; 0x90
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1bff8:	2200      	movs	r2, #0
   1bffa:	035b      	lsls	r3, r3, #13
   1bffc:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   1bffe:	4b29      	ldr	r3, [pc, #164]	; (1c0a4 <configure_usart_BLE+0xe4>)
	config->lin_slave_enable      = false;
   1c000:	76ca      	strb	r2, [r1, #27]
   1c002:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   1c004:	4b28      	ldr	r3, [pc, #160]	; (1c0a8 <configure_usart_BLE+0xe8>)
	config->immediate_buffer_overflow_notification  = false;
   1c006:	760a      	strb	r2, [r1, #24]
   1c008:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA10C_SERCOM0_PAD2;
   1c00a:	4b28      	ldr	r3, [pc, #160]	; (1c0ac <configure_usart_BLE+0xec>)
	config->start_frame_detection_enable            = false;
   1c00c:	770a      	strb	r2, [r1, #28]
   1c00e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA11C_SERCOM0_PAD3;
   1c010:	4b27      	ldr	r3, [pc, #156]	; (1c0b0 <configure_usart_BLE+0xf0>)
	config->encoding_format_enable                  = false;
   1c012:	764a      	strb	r2, [r1, #25]
	config->collision_detection_enable              = false;
   1c014:	774a      	strb	r2, [r1, #29]
   1c016:	930f      	str	r3, [sp, #60]	; 0x3c
   1c018:	4c26      	ldr	r4, [pc, #152]	; (1c0b4 <configure_usart_BLE+0xf4>)
   1c01a:	4d27      	ldr	r5, [pc, #156]	; (1c0b8 <configure_usart_BLE+0xf8>)
   1c01c:	e001      	b.n	1c022 <configure_usart_BLE+0x62>
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   1c01e:	281c      	cmp	r0, #28
   1c020:	d006      	beq.n	1c030 <configure_usart_BLE+0x70>
		usart_status = usart_init(&usart_BLE,	SERCOM0, &config_usart) ;
   1c022:	2184      	movs	r1, #132	; 0x84
   1c024:	466a      	mov	r2, sp
   1c026:	05c9      	lsls	r1, r1, #23
   1c028:	0020      	movs	r0, r4
   1c02a:	47a8      	blx	r5
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   1c02c:	2800      	cmp	r0, #0
   1c02e:	d1f6      	bne.n	1c01e <configure_usart_BLE+0x5e>
	SercomUsart *const usart_hw = &(module->hw->USART);
   1c030:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1c032:	4b22      	ldr	r3, [pc, #136]	; (1c0bc <configure_usart_BLE+0xfc>)
   1c034:	0028      	movs	r0, r5
   1c036:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1c038:	231f      	movs	r3, #31
   1c03a:	4018      	ands	r0, r3
   1c03c:	3b1e      	subs	r3, #30
   1c03e:	4083      	lsls	r3, r0
   1c040:	4a1f      	ldr	r2, [pc, #124]	; (1c0c0 <configure_usart_BLE+0x100>)
   1c042:	6013      	str	r3, [r2, #0]
   1c044:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
   1c046:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1c048:	2b00      	cmp	r3, #0
   1c04a:	d1fc      	bne.n	1c046 <configure_usart_BLE+0x86>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1c04c:	2202      	movs	r2, #2
   1c04e:	682b      	ldr	r3, [r5, #0]
	usart_register_callback(&usart_BLE,writeBleCallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1c050:	491c      	ldr	r1, [pc, #112]	; (1c0c4 <configure_usart_BLE+0x104>)
   1c052:	4313      	orrs	r3, r2
   1c054:	602b      	str	r3, [r5, #0]
   1c056:	2200      	movs	r2, #0
   1c058:	0020      	movs	r0, r4
   1c05a:	4d1b      	ldr	r5, [pc, #108]	; (1c0c8 <configure_usart_BLE+0x108>)
   1c05c:	47a8      	blx	r5
	usart_register_callback(&usart_BLE,readBleCallback, USART_CALLBACK_BUFFER_RECEIVED);
   1c05e:	2201      	movs	r2, #1
   1c060:	491a      	ldr	r1, [pc, #104]	; (1c0cc <configure_usart_BLE+0x10c>)
   1c062:	0020      	movs	r0, r4
   1c064:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1c066:	2231      	movs	r2, #49	; 0x31
   1c068:	2103      	movs	r1, #3
   1c06a:	5ca3      	ldrb	r3, [r4, r2]
   1c06c:	430b      	orrs	r3, r1
   1c06e:	54a3      	strb	r3, [r4, r2]
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   1c070:	2300      	movs	r3, #0
		rxBufferBle[i] = 0;
   1c072:	2200      	movs	r2, #0
   1c074:	4916      	ldr	r1, [pc, #88]	; (1c0d0 <configure_usart_BLE+0x110>)
   1c076:	54ca      	strb	r2, [r1, r3]
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   1c078:	3301      	adds	r3, #1
   1c07a:	2b64      	cmp	r3, #100	; 0x64
   1c07c:	d1fb      	bne.n	1c076 <configure_usart_BLE+0xb6>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   1c07e:	2580      	movs	r5, #128	; 0x80
	rxBufferBleIndex = 0;
   1c080:	4b14      	ldr	r3, [pc, #80]	; (1c0d4 <configure_usart_BLE+0x114>)
	usart_read_job(&usart_BLE, &bleRcvByte);
   1c082:	0020      	movs	r0, r4
	rxBufferBleIndex = 0;
   1c084:	701a      	strb	r2, [r3, #0]
	BleReceiveComplete = false;
   1c086:	4b14      	ldr	r3, [pc, #80]	; (1c0d8 <configure_usart_BLE+0x118>)
   1c088:	4c14      	ldr	r4, [pc, #80]	; (1c0dc <configure_usart_BLE+0x11c>)
   1c08a:	701a      	strb	r2, [r3, #0]
	usart_read_job(&usart_BLE, &bleRcvByte);
   1c08c:	4914      	ldr	r1, [pc, #80]	; (1c0e0 <configure_usart_BLE+0x120>)
   1c08e:	03ed      	lsls	r5, r5, #15
   1c090:	4b14      	ldr	r3, [pc, #80]	; (1c0e4 <configure_usart_BLE+0x124>)
   1c092:	4798      	blx	r3
   1c094:	61a5      	str	r5, [r4, #24]
	delay_ms(5);
   1c096:	2005      	movs	r0, #5
   1c098:	4b13      	ldr	r3, [pc, #76]	; (1c0e8 <configure_usart_BLE+0x128>)
   1c09a:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1c09c:	6165      	str	r5, [r4, #20]
}
   1c09e:	b011      	add	sp, #68	; 0x44
   1c0a0:	bd30      	pop	{r4, r5, pc}
   1c0a2:	46c0      	nop			; (mov r8, r8)
   1c0a4:	00080002 	.word	0x00080002
   1c0a8:	00090002 	.word	0x00090002
   1c0ac:	000a0002 	.word	0x000a0002
   1c0b0:	000b0002 	.word	0x000b0002
   1c0b4:	20000ec4 	.word	0x20000ec4
   1c0b8:	0001e4e1 	.word	0x0001e4e1
   1c0bc:	00018cf5 	.word	0x00018cf5
   1c0c0:	e000e100 	.word	0xe000e100
   1c0c4:	0001b939 	.word	0x0001b939
   1c0c8:	00018d85 	.word	0x00018d85
   1c0cc:	0001b9f5 	.word	0x0001b9f5
   1c0d0:	200039e0 	.word	0x200039e0
   1c0d4:	20003398 	.word	0x20003398
   1c0d8:	20000d29 	.word	0x20000d29
   1c0dc:	40002880 	.word	0x40002880
   1c0e0:	20001316 	.word	0x20001316
   1c0e4:	00018d9d 	.word	0x00018d9d
   1c0e8:	0001f509 	.word	0x0001f509

0001c0ec <rxBufferBleClear>:
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   1c0ec:	2300      	movs	r3, #0
		rxBufferBle[i] = 0;
   1c0ee:	2200      	movs	r2, #0
   1c0f0:	4904      	ldr	r1, [pc, #16]	; (1c104 <rxBufferBleClear+0x18>)
   1c0f2:	54ca      	strb	r2, [r1, r3]
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   1c0f4:	3301      	adds	r3, #1
   1c0f6:	2b64      	cmp	r3, #100	; 0x64
   1c0f8:	d1fb      	bne.n	1c0f2 <rxBufferBleClear+0x6>
	rxBufferBleIndex = 0;
   1c0fa:	4b03      	ldr	r3, [pc, #12]	; (1c108 <rxBufferBleClear+0x1c>)
   1c0fc:	701a      	strb	r2, [r3, #0]
	BleReceiveComplete = false;
   1c0fe:	4b03      	ldr	r3, [pc, #12]	; (1c10c <rxBufferBleClear+0x20>)
   1c100:	701a      	strb	r2, [r3, #0]
}
   1c102:	4770      	bx	lr
   1c104:	200039e0 	.word	0x200039e0
   1c108:	20003398 	.word	0x20003398
   1c10c:	20000d29 	.word	0x20000d29

0001c110 <isBleCommEnabled>:
	return (usart_BLE.hw->USART.CTRLA.reg & SERCOM_USART_CTRLA_ENABLE);
   1c110:	4b02      	ldr	r3, [pc, #8]	; (1c11c <isBleCommEnabled+0xc>)
   1c112:	681b      	ldr	r3, [r3, #0]
   1c114:	6818      	ldr	r0, [r3, #0]
   1c116:	0780      	lsls	r0, r0, #30
   1c118:	0fc0      	lsrs	r0, r0, #31
}
   1c11a:	4770      	bx	lr
   1c11c:	20000ec4 	.word	0x20000ec4

0001c120 <BLE_usart_isolate>:
void BLE_usart_isolate(void){
   1c120:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
   1c122:	4d1f      	ldr	r5, [pc, #124]	; (1c1a0 <BLE_usart_isolate+0x80>)
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1c124:	4b1f      	ldr	r3, [pc, #124]	; (1c1a4 <BLE_usart_isolate+0x84>)
	SercomUsart *const usart_hw = &(module->hw->USART);
   1c126:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1c128:	0020      	movs	r0, r4
   1c12a:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1c12c:	231f      	movs	r3, #31
   1c12e:	4018      	ands	r0, r3
   1c130:	3b1e      	subs	r3, #30
   1c132:	2280      	movs	r2, #128	; 0x80
   1c134:	4083      	lsls	r3, r0
   1c136:	491c      	ldr	r1, [pc, #112]	; (1c1a8 <BLE_usart_isolate+0x88>)
   1c138:	508b      	str	r3, [r1, r2]
   1c13a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1c13c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1c13e:	2b00      	cmp	r3, #0
   1c140:	d1fc      	bne.n	1c13c <BLE_usart_isolate+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   1c142:	2202      	movs	r2, #2
   1c144:	6823      	ldr	r3, [r4, #0]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c146:	2002      	movs	r0, #2
   1c148:	4393      	bics	r3, r2
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1c14a:	2280      	movs	r2, #128	; 0x80
   1c14c:	6023      	str	r3, [r4, #0]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c14e:	244a      	movs	r4, #74	; 0x4a
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1c150:	4b16      	ldr	r3, [pc, #88]	; (1c1ac <BLE_usart_isolate+0x8c>)
   1c152:	00d2      	lsls	r2, r2, #3
   1c154:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c156:	5d19      	ldrb	r1, [r3, r4]
   1c158:	4301      	orrs	r1, r0
   1c15a:	b2c9      	uxtb	r1, r1
   1c15c:	5519      	strb	r1, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1c15e:	615a      	str	r2, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1c160:	2280      	movs	r2, #128	; 0x80
   1c162:	0112      	lsls	r2, r2, #4
   1c164:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c166:	224b      	movs	r2, #75	; 0x4b
   1c168:	5c99      	ldrb	r1, [r3, r2]
   1c16a:	4301      	orrs	r1, r0
   1c16c:	b2c9      	uxtb	r1, r1
   1c16e:	5499      	strb	r1, [r3, r2]
	base->WRCONFIG.reg =
   1c170:	4a0f      	ldr	r2, [pc, #60]	; (1c1b0 <BLE_usart_isolate+0x90>)
   1c172:	4910      	ldr	r1, [pc, #64]	; (1c1b4 <BLE_usart_isolate+0x94>)
   1c174:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   1c176:	4a10      	ldr	r2, [pc, #64]	; (1c1b8 <BLE_usart_isolate+0x98>)
   1c178:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   1c17a:	6299      	str	r1, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   1c17c:	629a      	str	r2, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1c17e:	2280      	movs	r2, #128	; 0x80
   1c180:	0052      	lsls	r2, r2, #1
   1c182:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c184:	3ab8      	subs	r2, #184	; 0xb8
   1c186:	5c99      	ldrb	r1, [r3, r2]
   1c188:	4301      	orrs	r1, r0
   1c18a:	b2c9      	uxtb	r1, r1
   1c18c:	5499      	strb	r1, [r3, r2]
   1c18e:	2149      	movs	r1, #73	; 0x49
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1c190:	32b9      	adds	r2, #185	; 0xb9
   1c192:	32ff      	adds	r2, #255	; 0xff
   1c194:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c196:	5c5a      	ldrb	r2, [r3, r1]
   1c198:	4302      	orrs	r2, r0
   1c19a:	b2d2      	uxtb	r2, r2
   1c19c:	545a      	strb	r2, [r3, r1]
}
   1c19e:	bd70      	pop	{r4, r5, r6, pc}
   1c1a0:	20000ec4 	.word	0x20000ec4
   1c1a4:	00018cf5 	.word	0x00018cf5
   1c1a8:	e000e100 	.word	0xe000e100
   1c1ac:	40002800 	.word	0x40002800
   1c1b0:	50020100 	.word	0x50020100
   1c1b4:	50020200 	.word	0x50020200
   1c1b8:	d0020000 	.word	0xd0020000

0001c1bc <configure_usart_Laser>:
void configure_usart_Laser(void){
   1c1bc:	b570      	push	{r4, r5, r6, lr}
   1c1be:	b090      	sub	sp, #64	; 0x40
	config->parity           = USART_PARITY_NONE;
   1c1c0:	4669      	mov	r1, sp
   1c1c2:	22ff      	movs	r2, #255	; 0xff
   1c1c4:	810a      	strh	r2, [r1, #8]
	config->baudrate         = 9600;
   1c1c6:	2296      	movs	r2, #150	; 0x96
	config->data_order       = USART_DATAORDER_LSB;
   1c1c8:	2380      	movs	r3, #128	; 0x80
	config->baudrate         = 9600;
   1c1ca:	0192      	lsls	r2, r2, #6
   1c1cc:	9208      	str	r2, [sp, #32]
	config->receiver_enable  = true;
   1c1ce:	2202      	movs	r2, #2
	config->data_order       = USART_DATAORDER_LSB;
   1c1d0:	05db      	lsls	r3, r3, #23
   1c1d2:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1c1d4:	2300      	movs	r3, #0
	config->receiver_enable  = true;
   1c1d6:	32ff      	adds	r2, #255	; 0xff
   1c1d8:	9209      	str	r2, [sp, #36]	; 0x24
	config->run_in_standby   = false;
   1c1da:	3ad5      	subs	r2, #213	; 0xd5
   1c1dc:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1c1de:	3201      	adds	r2, #1
   1c1e0:	548b      	strb	r3, [r1, r2]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1c1e2:	9301      	str	r3, [sp, #4]
	config->stopbits         = USART_STOPBITS_1;
   1c1e4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1c1e6:	72cb      	strb	r3, [r1, #11]
	config->ext_clock_freq   = 0;
   1c1e8:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1c1ea:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1c1ec:	820b      	strh	r3, [r1, #16]
	config->receive_pulse_length                    = 19;
   1c1ee:	2313      	movs	r3, #19
   1c1f0:	768b      	strb	r3, [r1, #26]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   1c1f2:	2380      	movs	r3, #128	; 0x80
   1c1f4:	035b      	lsls	r3, r3, #13
   1c1f6:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
   1c1f8:	4b20      	ldr	r3, [pc, #128]	; (1c27c <configure_usart_Laser+0xc0>)
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1c1fa:	2200      	movs	r2, #0
   1c1fc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
   1c1fe:	4b20      	ldr	r3, [pc, #128]	; (1c280 <configure_usart_Laser+0xc4>)
	config->lin_slave_enable      = false;
   1c200:	76ca      	strb	r2, [r1, #27]
   1c202:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
   1c204:	2301      	movs	r3, #1
   1c206:	425b      	negs	r3, r3
	config->immediate_buffer_overflow_notification  = false;
   1c208:	760a      	strb	r2, [r1, #24]
	config->start_frame_detection_enable            = false;
   1c20a:	770a      	strb	r2, [r1, #28]
	config->encoding_format_enable                  = false;
   1c20c:	764a      	strb	r2, [r1, #25]
	config->collision_detection_enable              = false;
   1c20e:	774a      	strb	r2, [r1, #29]
   1c210:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
   1c212:	930f      	str	r3, [sp, #60]	; 0x3c
   1c214:	4d1b      	ldr	r5, [pc, #108]	; (1c284 <configure_usart_Laser+0xc8>)
   1c216:	4c1c      	ldr	r4, [pc, #112]	; (1c288 <configure_usart_Laser+0xcc>)
   1c218:	e001      	b.n	1c21e <configure_usart_Laser+0x62>
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   1c21a:	281c      	cmp	r0, #28
   1c21c:	d005      	beq.n	1c22a <configure_usart_Laser+0x6e>
		usart_status = usart_init(&usart_laser,	SERCOM1, &config_usart) ;
   1c21e:	466a      	mov	r2, sp
   1c220:	491a      	ldr	r1, [pc, #104]	; (1c28c <configure_usart_Laser+0xd0>)
   1c222:	0028      	movs	r0, r5
   1c224:	47a0      	blx	r4
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   1c226:	2800      	cmp	r0, #0
   1c228:	d1f7      	bne.n	1c21a <configure_usart_Laser+0x5e>
	SercomUsart *const usart_hw = &(module->hw->USART);
   1c22a:	682e      	ldr	r6, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1c22c:	4b18      	ldr	r3, [pc, #96]	; (1c290 <configure_usart_Laser+0xd4>)
   1c22e:	0030      	movs	r0, r6
   1c230:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1c232:	231f      	movs	r3, #31
   1c234:	4018      	ands	r0, r3
   1c236:	3b1e      	subs	r3, #30
   1c238:	4083      	lsls	r3, r0
   1c23a:	4a16      	ldr	r2, [pc, #88]	; (1c294 <configure_usart_Laser+0xd8>)
   1c23c:	6013      	str	r3, [r2, #0]
   1c23e:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1c240:	69dc      	ldr	r4, [r3, #28]
	while (usart_is_syncing(module)) {
   1c242:	2c00      	cmp	r4, #0
   1c244:	d1fc      	bne.n	1c240 <configure_usart_Laser+0x84>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1c246:	2202      	movs	r2, #2
   1c248:	6833      	ldr	r3, [r6, #0]
	usart_register_callback(&usart_laser,writeLaserCallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1c24a:	0028      	movs	r0, r5
   1c24c:	4313      	orrs	r3, r2
   1c24e:	6033      	str	r3, [r6, #0]
   1c250:	2200      	movs	r2, #0
   1c252:	4e11      	ldr	r6, [pc, #68]	; (1c298 <configure_usart_Laser+0xdc>)
   1c254:	4911      	ldr	r1, [pc, #68]	; (1c29c <configure_usart_Laser+0xe0>)
   1c256:	47b0      	blx	r6
	usart_register_callback(&usart_laser,readLaserCallback, USART_CALLBACK_BUFFER_RECEIVED);
   1c258:	0028      	movs	r0, r5
   1c25a:	2201      	movs	r2, #1
   1c25c:	4910      	ldr	r1, [pc, #64]	; (1c2a0 <configure_usart_Laser+0xe4>)
   1c25e:	47b0      	blx	r6
   1c260:	2231      	movs	r2, #49	; 0x31
   1c262:	2103      	movs	r1, #3
   1c264:	5cab      	ldrb	r3, [r5, r2]
	usart_read_job(&usart_laser, &laserRcvByte); //
   1c266:	0028      	movs	r0, r5
   1c268:	430b      	orrs	r3, r1
   1c26a:	54ab      	strb	r3, [r5, r2]
	rxBufferLaserIndex = 0;
   1c26c:	4b0d      	ldr	r3, [pc, #52]	; (1c2a4 <configure_usart_Laser+0xe8>)
	usart_read_job(&usart_laser, &laserRcvByte); //
   1c26e:	490e      	ldr	r1, [pc, #56]	; (1c2a8 <configure_usart_Laser+0xec>)
	rxBufferLaserIndex = 0;
   1c270:	701c      	strb	r4, [r3, #0]
	usart_read_job(&usart_laser, &laserRcvByte); //
   1c272:	4b0e      	ldr	r3, [pc, #56]	; (1c2ac <configure_usart_Laser+0xf0>)
   1c274:	4798      	blx	r3
}
   1c276:	b010      	add	sp, #64	; 0x40
   1c278:	bd70      	pop	{r4, r5, r6, pc}
   1c27a:	46c0      	nop			; (mov r8, r8)
   1c27c:	00100002 	.word	0x00100002
   1c280:	00110002 	.word	0x00110002
   1c284:	20000e34 	.word	0x20000e34
   1c288:	0001e4e1 	.word	0x0001e4e1
   1c28c:	42000400 	.word	0x42000400
   1c290:	00018cf5 	.word	0x00018cf5
   1c294:	e000e100 	.word	0xe000e100
   1c298:	00018d85 	.word	0x00018d85
   1c29c:	0001b945 	.word	0x0001b945
   1c2a0:	0001b951 	.word	0x0001b951
   1c2a4:	20005160 	.word	0x20005160
   1c2a8:	20001315 	.word	0x20001315
   1c2ac:	00018d9d 	.word	0x00018d9d

0001c2b0 <enable_comms>:
void enable_comms(void){
   1c2b0:	b510      	push	{r4, lr}
	setup_spi();
   1c2b2:	4b20      	ldr	r3, [pc, #128]	; (1c334 <enable_comms+0x84>)
void enable_comms(void){
   1c2b4:	b08e      	sub	sp, #56	; 0x38
	setup_spi();
   1c2b6:	4798      	blx	r3
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   1c2b8:	2364      	movs	r3, #100	; 0x64
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1c2ba:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   1c2bc:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1c2be:	4b1e      	ldr	r3, [pc, #120]	; (1c338 <enable_comms+0x88>)
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   1c2c0:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1c2c2:	0389      	lsls	r1, r1, #14
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1c2c4:	6053      	str	r3, [r2, #4]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1c2c6:	6111      	str	r1, [r2, #16]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   1c2c8:	2300      	movs	r3, #0
	config->scl_low_timeout  = false;
   1c2ca:	2124      	movs	r1, #36	; 0x24
   1c2cc:	5453      	strb	r3, [r2, r1]
	config->scl_stretch_only_after_ack_bit = false;
   1c2ce:	3108      	adds	r1, #8
   1c2d0:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
   1c2d2:	3101      	adds	r1, #1
   1c2d4:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
   1c2d6:	3101      	adds	r1, #1
   1c2d8:	5453      	strb	r3, [r2, r1]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   1c2da:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
   1c2dc:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
   1c2de:	7613      	strb	r3, [r2, #24]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1c2e0:	6293      	str	r3, [r2, #40]	; 0x28
	config->sda_scl_rise_time_ns = 215;
   1c2e2:	33d7      	adds	r3, #215	; 0xd7
   1c2e4:	8613      	strh	r3, [r2, #48]	; 0x30
	config->unknown_bus_state_timeout = 65535;
   1c2e6:	4b15      	ldr	r3, [pc, #84]	; (1c33c <enable_comms+0x8c>)
	/* Change buffer timeout to something longer. */
	config_i2c_master.generator_source = GCLK_FOR_I2C;
	config_i2c_master.buffer_timeout = 10000;
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   1c2e8:	4c15      	ldr	r4, [pc, #84]	; (1c340 <enable_comms+0x90>)
   1c2ea:	9306      	str	r3, [sp, #24]
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
   1c2ec:	4b15      	ldr	r3, [pc, #84]	; (1c344 <enable_comms+0x94>)
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   1c2ee:	4916      	ldr	r1, [pc, #88]	; (1c348 <enable_comms+0x98>)
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
   1c2f0:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
   1c2f2:	4b16      	ldr	r3, [pc, #88]	; (1c34c <enable_comms+0x9c>)
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   1c2f4:	0020      	movs	r0, r4
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
   1c2f6:	6213      	str	r3, [r2, #32]
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   1c2f8:	4b15      	ldr	r3, [pc, #84]	; (1c350 <enable_comms+0xa0>)
   1c2fa:	4798      	blx	r3
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1c2fc:	2107      	movs	r1, #7
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1c2fe:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1c300:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
   1c302:	4219      	tst	r1, r3
   1c304:	d1fc      	bne.n	1c300 <enable_comms+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1c306:	2102      	movs	r1, #2
   1c308:	6813      	ldr	r3, [r2, #0]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1c30a:	2010      	movs	r0, #16
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1c30c:	430b      	orrs	r3, r1
   1c30e:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   1c310:	88e4      	ldrh	r4, [r4, #6]
	uint32_t timeout_counter = 0;
   1c312:	2300      	movs	r3, #0
   1c314:	e002      	b.n	1c31c <enable_comms+0x6c>
		timeout_counter++;
   1c316:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   1c318:	42a3      	cmp	r3, r4
   1c31a:	d208      	bcs.n	1c32e <enable_comms+0x7e>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1c31c:	8b51      	ldrh	r1, [r2, #26]
   1c31e:	4208      	tst	r0, r1
   1c320:	d0f9      	beq.n	1c316 <enable_comms+0x66>
	configure_usart_Laser();
   1c322:	4b0c      	ldr	r3, [pc, #48]	; (1c354 <enable_comms+0xa4>)
   1c324:	4798      	blx	r3
	configure_usart_BLE();
   1c326:	4b0c      	ldr	r3, [pc, #48]	; (1c358 <enable_comms+0xa8>)
   1c328:	4798      	blx	r3
}
   1c32a:	b00e      	add	sp, #56	; 0x38
   1c32c:	bd10      	pop	{r4, pc}
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   1c32e:	8350      	strh	r0, [r2, #26]
   1c330:	e7f7      	b.n	1c322 <enable_comms+0x72>
   1c332:	46c0      	nop			; (mov r8, r8)
   1c334:	0001bbd9 	.word	0x0001bbd9
   1c338:	00000d48 	.word	0x00000d48
   1c33c:	2710ffff 	.word	0x2710ffff
   1c340:	20000e78 	.word	0x20000e78
   1c344:	000c0002 	.word	0x000c0002
   1c348:	42000800 	.word	0x42000800
   1c34c:	000d0002 	.word	0x000d0002
   1c350:	00018991 	.word	0x00018991
   1c354:	0001c1bd 	.word	0x0001c1bd
   1c358:	0001bfc1 	.word	0x0001bfc1

0001c35c <writeLaser>:
enum status_code writeLaser(char *tx_data, uint16_t length){
   1c35c:	000a      	movs	r2, r1
	LaserTransmitComplete=false;
   1c35e:	2100      	movs	r1, #0
enum status_code writeLaser(char *tx_data, uint16_t length){
   1c360:	b510      	push	{r4, lr}
	LaserTransmitComplete=false;
   1c362:	4b03      	ldr	r3, [pc, #12]	; (1c370 <writeLaser+0x14>)
   1c364:	7019      	strb	r1, [r3, #0]
	writeStatus = usart_write_buffer_job(&usart_laser, tx_data, length);
   1c366:	0001      	movs	r1, r0
   1c368:	4b02      	ldr	r3, [pc, #8]	; (1c374 <writeLaser+0x18>)
   1c36a:	4803      	ldr	r0, [pc, #12]	; (1c378 <writeLaser+0x1c>)
   1c36c:	4798      	blx	r3
}
   1c36e:	bd10      	pop	{r4, pc}
   1c370:	20000d2d 	.word	0x20000d2d
   1c374:	00018ded 	.word	0x00018ded
   1c378:	20000e34 	.word	0x20000e34

0001c37c <isLaserReceiveComplete>:
	return LaserReceiveComplete;
   1c37c:	4b01      	ldr	r3, [pc, #4]	; (1c384 <isLaserReceiveComplete+0x8>)
   1c37e:	7818      	ldrb	r0, [r3, #0]
   1c380:	b2c0      	uxtb	r0, r0
}
   1c382:	4770      	bx	lr
   1c384:	20000d2c 	.word	0x20000d2c

0001c388 <rxBufferLaserClear>:
void rxBufferLaserClear(void){
   1c388:	2300      	movs	r3, #0
		rxBufferLaser[i] = 0;
   1c38a:	2200      	movs	r2, #0
   1c38c:	4905      	ldr	r1, [pc, #20]	; (1c3a4 <rxBufferLaserClear+0x1c>)
   1c38e:	54ca      	strb	r2, [r1, r3]
   1c390:	3301      	adds	r3, #1
	for (i=0;i<sizeof(rxBufferLaser);i++){
   1c392:	2b64      	cmp	r3, #100	; 0x64
   1c394:	d1fb      	bne.n	1c38e <rxBufferLaserClear+0x6>
	laserCurrentMessage = NONE;
   1c396:	4b04      	ldr	r3, [pc, #16]	; (1c3a8 <rxBufferLaserClear+0x20>)
   1c398:	701a      	strb	r2, [r3, #0]
	LaserReceiveComplete=false;
   1c39a:	4b04      	ldr	r3, [pc, #16]	; (1c3ac <rxBufferLaserClear+0x24>)
   1c39c:	701a      	strb	r2, [r3, #0]
	rxBufferLaserIndex = 0;
   1c39e:	4b04      	ldr	r3, [pc, #16]	; (1c3b0 <rxBufferLaserClear+0x28>)
   1c3a0:	701a      	strb	r2, [r3, #0]
}
   1c3a2:	4770      	bx	lr
   1c3a4:	20005280 	.word	0x20005280
   1c3a8:	20001314 	.word	0x20001314
   1c3ac:	20000d2c 	.word	0x20000d2c
   1c3b0:	20005160 	.word	0x20005160

0001c3b4 <laserMessageType>:
enum LASER_MESSAGE_TYPE laserMessageType(void){
   1c3b4:	2300      	movs	r3, #0
   1c3b6:	4907      	ldr	r1, [pc, #28]	; (1c3d4 <laserMessageType+0x20>)
   1c3b8:	e002      	b.n	1c3c0 <laserMessageType+0xc>
   1c3ba:	3301      	adds	r3, #1
	for(i=0;i<sizeof(rxBufferLaser);i++){
   1c3bc:	2b64      	cmp	r3, #100	; 0x64
   1c3be:	d006      	beq.n	1c3ce <laserMessageType+0x1a>
		if(rxBufferLaser[i]==0xAA){
   1c3c0:	5cca      	ldrb	r2, [r1, r3]
   1c3c2:	2aaa      	cmp	r2, #170	; 0xaa
   1c3c4:	d1f9      	bne.n	1c3ba <laserMessageType+0x6>
			messType =  rxBufferLaser[i+2];
   1c3c6:	3302      	adds	r3, #2
   1c3c8:	5cc8      	ldrb	r0, [r1, r3]
   1c3ca:	b2c0      	uxtb	r0, r0
}
   1c3cc:	4770      	bx	lr
	enum LASER_MESSAGE_TYPE messType = 0;
   1c3ce:	2000      	movs	r0, #0
   1c3d0:	e7fc      	b.n	1c3cc <laserMessageType+0x18>
   1c3d2:	46c0      	nop			; (mov r8, r8)
   1c3d4:	20005280 	.word	0x20005280

0001c3d8 <i2c_read_write>:
	i2c_master_enable(&i2c_master_instance);
}

void i2c_read_write(enum read_write mode, uint8_t device, uint8_t *buf, uint8_t length){
   1c3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3da:	46ce      	mov	lr, r9
   1c3dc:	4647      	mov	r7, r8
   1c3de:	4690      	mov	r8, r2
   1c3e0:	b580      	push	{r7, lr}
   1c3e2:	b085      	sub	sp, #20
	//first character in buffer is read/write register address
	uint16_t limit=1000;
	uint16_t timeout;
	enum status_code debugStat;
	struct i2c_master_packet packet = {
   1c3e4:	ad01      	add	r5, sp, #4
void i2c_read_write(enum read_write mode, uint8_t device, uint8_t *buf, uint8_t length){
   1c3e6:	000e      	movs	r6, r1
   1c3e8:	0004      	movs	r4, r0
   1c3ea:	4699      	mov	r9, r3
	struct i2c_master_packet packet = {
   1c3ec:	220c      	movs	r2, #12
   1c3ee:	4b21      	ldr	r3, [pc, #132]	; (1c474 <i2c_read_write+0x9c>)
   1c3f0:	2100      	movs	r1, #0
   1c3f2:	0028      	movs	r0, r5
   1c3f4:	4798      	blx	r3
   1c3f6:	4643      	mov	r3, r8
   1c3f8:	802e      	strh	r6, [r5, #0]
   1c3fa:	606b      	str	r3, [r5, #4]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	
	if (mode==readp){
   1c3fc:	2c00      	cmp	r4, #0
   1c3fe:	d128      	bne.n	1c452 <i2c_read_write+0x7a>
		timeout=0;
		packet.data_length=1;
   1c400:	2301      	movs	r3, #1
		do{
			debugStat = i2c_master_write_packet_wait(&i2c_master_instance, &packet) ;
   1c402:	24fa      	movs	r4, #250	; 0xfa
   1c404:	4e1c      	ldr	r6, [pc, #112]	; (1c478 <i2c_read_write+0xa0>)
   1c406:	0029      	movs	r1, r5
   1c408:	0030      	movs	r0, r6
   1c40a:	4f1c      	ldr	r7, [pc, #112]	; (1c47c <i2c_read_write+0xa4>)
		packet.data_length=1;
   1c40c:	806b      	strh	r3, [r5, #2]
			debugStat = i2c_master_write_packet_wait(&i2c_master_instance, &packet) ;
   1c40e:	00a4      	lsls	r4, r4, #2
   1c410:	47b8      	blx	r7
   1c412:	e006      	b.n	1c422 <i2c_read_write+0x4a>
   1c414:	3c01      	subs	r4, #1
   1c416:	0029      	movs	r1, r5
   1c418:	0030      	movs	r0, r6
   1c41a:	b2a4      	uxth	r4, r4
   1c41c:	47b8      	blx	r7
			if (timeout++ == limit) {   
   1c41e:	2c00      	cmp	r4, #0
   1c420:	d001      	beq.n	1c426 <i2c_read_write+0x4e>
				break;   
			}
		}while(debugStat!= STATUS_OK);
   1c422:	2800      	cmp	r0, #0
   1c424:	d1f6      	bne.n	1c414 <i2c_read_write+0x3c>
		//	if (timeout++ == limit) {   
		//		break;   
		//		}
		//}
		timeout=0;
		packet.data=buf+1;
   1c426:	4643      	mov	r3, r8
   1c428:	3301      	adds	r3, #1
   1c42a:	606b      	str	r3, [r5, #4]
		packet.data_length=length;
   1c42c:	464b      	mov	r3, r9
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1c42e:	4c14      	ldr	r4, [pc, #80]	; (1c480 <i2c_read_write+0xa8>)
		packet.data_length=length;
   1c430:	806b      	strh	r3, [r5, #2]
   1c432:	4f14      	ldr	r7, [pc, #80]	; (1c484 <i2c_read_write+0xac>)
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1c434:	e003      	b.n	1c43e <i2c_read_write+0x66>
   1c436:	3c01      	subs	r4, #1
   1c438:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   
   1c43a:	2c00      	cmp	r4, #0
   1c43c:	d004      	beq.n	1c448 <i2c_read_write+0x70>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1c43e:	0029      	movs	r1, r5
   1c440:	0030      	movs	r0, r6
   1c442:	47b8      	blx	r7
   1c444:	2800      	cmp	r0, #0
   1c446:	d1f6      	bne.n	1c436 <i2c_read_write+0x5e>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
			if (timeout++ == limit) {   break;   }
		}
	}
	
}
   1c448:	b005      	add	sp, #20
   1c44a:	bc0c      	pop	{r2, r3}
   1c44c:	4690      	mov	r8, r2
   1c44e:	4699      	mov	r9, r3
   1c450:	bdf0      	pop	{r4, r5, r6, r7, pc}
		packet.data_length=length;
   1c452:	464b      	mov	r3, r9
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1c454:	4c0a      	ldr	r4, [pc, #40]	; (1c480 <i2c_read_write+0xa8>)
		packet.data_length=length;
   1c456:	806b      	strh	r3, [r5, #2]
   1c458:	4e07      	ldr	r6, [pc, #28]	; (1c478 <i2c_read_write+0xa0>)
   1c45a:	4f08      	ldr	r7, [pc, #32]	; (1c47c <i2c_read_write+0xa4>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1c45c:	e003      	b.n	1c466 <i2c_read_write+0x8e>
   1c45e:	3c01      	subs	r4, #1
   1c460:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   1c462:	2c00      	cmp	r4, #0
   1c464:	d0f0      	beq.n	1c448 <i2c_read_write+0x70>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1c466:	0029      	movs	r1, r5
   1c468:	0030      	movs	r0, r6
   1c46a:	47b8      	blx	r7
   1c46c:	2800      	cmp	r0, #0
   1c46e:	d1f6      	bne.n	1c45e <i2c_read_write+0x86>
   1c470:	e7ea      	b.n	1c448 <i2c_read_write+0x70>
   1c472:	46c0      	nop			; (mov r8, r8)
   1c474:	00028a1d 	.word	0x00028a1d
   1c478:	20000e78 	.word	0x20000e78
   1c47c:	00018c95 	.word	0x00018c95
   1c480:	000003e9 	.word	0x000003e9
   1c484:	00018c81 	.word	0x00018c81

0001c488 <max17055_reg_read_write>:


void max17055_reg_read_write(enum read_write mode, uint8_t address, uint16_t *data){
   1c488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c48a:	46c6      	mov	lr, r8
   1c48c:	b500      	push	{lr}
   1c48e:	b084      	sub	sp, #16
	//MAX17055 is the battery fuel gauge
	//MAX17055 is 16-bit register read/writes with LSB first
	uint16_t temp16;
	uint8_t temp_buf[3];
	
	temp_buf[0] = address;
   1c490:	466b      	mov	r3, sp
void max17055_reg_read_write(enum read_write mode, uint8_t address, uint16_t *data){
   1c492:	4690      	mov	r8, r2
	temp_buf[0] = address;
   1c494:	7019      	strb	r1, [r3, #0]
	if (mode==readp){
   1c496:	2800      	cmp	r0, #0
   1c498:	d01f      	beq.n	1c4da <max17055_reg_read_write+0x52>
		temp16=temp_buf[2];
		temp16=temp16<<8;
		temp16=temp16+temp_buf[1];
		*data=temp16;
	}else{
		temp16=*data;
   1c49a:	8813      	ldrh	r3, [r2, #0]
		temp_buf[1]=temp16 & 0x00FF;
   1c49c:	466a      	mov	r2, sp
	struct i2c_master_packet packet = {
   1c49e:	ad01      	add	r5, sp, #4
		temp_buf[1]=temp16 & 0x00FF;
   1c4a0:	7053      	strb	r3, [r2, #1]
		temp16=temp16>>8;
   1c4a2:	0a1b      	lsrs	r3, r3, #8
		temp_buf[2]=temp16 & 0x00FF;
   1c4a4:	7093      	strb	r3, [r2, #2]
	struct i2c_master_packet packet = {
   1c4a6:	2100      	movs	r1, #0
   1c4a8:	4b26      	ldr	r3, [pc, #152]	; (1c544 <max17055_reg_read_write+0xbc>)
   1c4aa:	220c      	movs	r2, #12
   1c4ac:	0028      	movs	r0, r5
   1c4ae:	4798      	blx	r3
   1c4b0:	466b      	mov	r3, sp
   1c4b2:	606b      	str	r3, [r5, #4]
   1c4b4:	4b24      	ldr	r3, [pc, #144]	; (1c548 <max17055_reg_read_write+0xc0>)
   1c4b6:	4c25      	ldr	r4, [pc, #148]	; (1c54c <max17055_reg_read_write+0xc4>)
   1c4b8:	9301      	str	r3, [sp, #4]
   1c4ba:	4e25      	ldr	r6, [pc, #148]	; (1c550 <max17055_reg_read_write+0xc8>)
   1c4bc:	4f25      	ldr	r7, [pc, #148]	; (1c554 <max17055_reg_read_write+0xcc>)
   1c4be:	e003      	b.n	1c4c8 <max17055_reg_read_write+0x40>
   1c4c0:	3c01      	subs	r4, #1
   1c4c2:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   1c4c4:	2c00      	cmp	r4, #0
   1c4c6:	d004      	beq.n	1c4d2 <max17055_reg_read_write+0x4a>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1c4c8:	0029      	movs	r1, r5
   1c4ca:	0030      	movs	r0, r6
   1c4cc:	47b8      	blx	r7
   1c4ce:	2800      	cmp	r0, #0
   1c4d0:	d1f6      	bne.n	1c4c0 <max17055_reg_read_write+0x38>
		i2c_read_write(writep, batt_add, temp_buf, 2);
	}
}
   1c4d2:	b004      	add	sp, #16
   1c4d4:	bc04      	pop	{r2}
   1c4d6:	4690      	mov	r8, r2
   1c4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct i2c_master_packet packet = {
   1c4da:	ad01      	add	r5, sp, #4
   1c4dc:	220c      	movs	r2, #12
   1c4de:	2100      	movs	r1, #0
   1c4e0:	4b18      	ldr	r3, [pc, #96]	; (1c544 <max17055_reg_read_write+0xbc>)
   1c4e2:	0028      	movs	r0, r5
   1c4e4:	4798      	blx	r3
   1c4e6:	466b      	mov	r3, sp
			debugStat = i2c_master_write_packet_wait(&i2c_master_instance, &packet) ;
   1c4e8:	24fa      	movs	r4, #250	; 0xfa
	struct i2c_master_packet packet = {
   1c4ea:	606b      	str	r3, [r5, #4]
			debugStat = i2c_master_write_packet_wait(&i2c_master_instance, &packet) ;
   1c4ec:	4e18      	ldr	r6, [pc, #96]	; (1c550 <max17055_reg_read_write+0xc8>)
	struct i2c_master_packet packet = {
   1c4ee:	4b1a      	ldr	r3, [pc, #104]	; (1c558 <max17055_reg_read_write+0xd0>)
			debugStat = i2c_master_write_packet_wait(&i2c_master_instance, &packet) ;
   1c4f0:	0029      	movs	r1, r5
	struct i2c_master_packet packet = {
   1c4f2:	9301      	str	r3, [sp, #4]
			debugStat = i2c_master_write_packet_wait(&i2c_master_instance, &packet) ;
   1c4f4:	0030      	movs	r0, r6
   1c4f6:	4f17      	ldr	r7, [pc, #92]	; (1c554 <max17055_reg_read_write+0xcc>)
   1c4f8:	47b8      	blx	r7
   1c4fa:	00a4      	lsls	r4, r4, #2
   1c4fc:	e006      	b.n	1c50c <max17055_reg_read_write+0x84>
   1c4fe:	3c01      	subs	r4, #1
   1c500:	0029      	movs	r1, r5
   1c502:	0030      	movs	r0, r6
   1c504:	b2a4      	uxth	r4, r4
   1c506:	47b8      	blx	r7
			if (timeout++ == limit) {   
   1c508:	2c00      	cmp	r4, #0
   1c50a:	d001      	beq.n	1c510 <max17055_reg_read_write+0x88>
		}while(debugStat!= STATUS_OK);
   1c50c:	2800      	cmp	r0, #0
   1c50e:	d1f6      	bne.n	1c4fe <max17055_reg_read_write+0x76>
		packet.data=buf+1;
   1c510:	466b      	mov	r3, sp
   1c512:	3301      	adds	r3, #1
   1c514:	606b      	str	r3, [r5, #4]
		packet.data_length=length;
   1c516:	2302      	movs	r3, #2
   1c518:	4c0c      	ldr	r4, [pc, #48]	; (1c54c <max17055_reg_read_write+0xc4>)
   1c51a:	806b      	strh	r3, [r5, #2]
   1c51c:	4f0f      	ldr	r7, [pc, #60]	; (1c55c <max17055_reg_read_write+0xd4>)
   1c51e:	e003      	b.n	1c528 <max17055_reg_read_write+0xa0>
   1c520:	3c01      	subs	r4, #1
   1c522:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   
   1c524:	2c00      	cmp	r4, #0
   1c526:	d004      	beq.n	1c532 <max17055_reg_read_write+0xaa>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1c528:	0029      	movs	r1, r5
   1c52a:	0030      	movs	r0, r6
   1c52c:	47b8      	blx	r7
   1c52e:	2800      	cmp	r0, #0
   1c530:	d1f6      	bne.n	1c520 <max17055_reg_read_write+0x98>
		temp16=temp_buf[2];
   1c532:	466b      	mov	r3, sp
		temp16=temp16+temp_buf[1];
   1c534:	466a      	mov	r2, sp
		temp16=temp_buf[2];
   1c536:	789b      	ldrb	r3, [r3, #2]
		temp16=temp16+temp_buf[1];
   1c538:	7852      	ldrb	r2, [r2, #1]
		temp16=temp16<<8;
   1c53a:	021b      	lsls	r3, r3, #8
		temp16=temp16+temp_buf[1];
   1c53c:	189b      	adds	r3, r3, r2
		*data=temp16;
   1c53e:	4642      	mov	r2, r8
   1c540:	8013      	strh	r3, [r2, #0]
   1c542:	e7c6      	b.n	1c4d2 <max17055_reg_read_write+0x4a>
   1c544:	00028a1d 	.word	0x00028a1d
   1c548:	00020036 	.word	0x00020036
   1c54c:	000003e9 	.word	0x000003e9
   1c550:	20000e78 	.word	0x20000e78
   1c554:	00018c95 	.word	0x00018c95
   1c558:	00010036 	.word	0x00010036
   1c55c:	00018c81 	.word	0x00018c81

0001c560 <adp5062_reg_read_write>:

void adp5062_reg_read_write(enum read_write mode, uint8_t address, uint8_t *data){
   1c560:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c562:	46c6      	mov	lr, r8
   1c564:	b500      	push	{lr}
   1c566:	b084      	sub	sp, #16
	// ADP5062 is the charger chip
	// Write and read 8-bit registers
	uint8_t temp_buf[2];
	
	temp_buf[0] = address;
   1c568:	466b      	mov	r3, sp
void adp5062_reg_read_write(enum read_write mode, uint8_t address, uint8_t *data){
   1c56a:	4690      	mov	r8, r2
	temp_buf[0] = address;
   1c56c:	7019      	strb	r1, [r3, #0]
	if (mode==readp){
   1c56e:	2800      	cmp	r0, #0
   1c570:	d01c      	beq.n	1c5ac <adp5062_reg_read_write+0x4c>
		i2c_read_write(readp, charger_add, temp_buf, 1);
		*data=temp_buf[1];
	}else{
		
		temp_buf[1]=data;
   1c572:	466b      	mov	r3, sp
	struct i2c_master_packet packet = {
   1c574:	ad01      	add	r5, sp, #4
		temp_buf[1]=data;
   1c576:	705a      	strb	r2, [r3, #1]
	struct i2c_master_packet packet = {
   1c578:	2100      	movs	r1, #0
   1c57a:	4b25      	ldr	r3, [pc, #148]	; (1c610 <adp5062_reg_read_write+0xb0>)
   1c57c:	220c      	movs	r2, #12
   1c57e:	0028      	movs	r0, r5
   1c580:	4798      	blx	r3
   1c582:	466b      	mov	r3, sp
   1c584:	606b      	str	r3, [r5, #4]
   1c586:	4b23      	ldr	r3, [pc, #140]	; (1c614 <adp5062_reg_read_write+0xb4>)
   1c588:	4c23      	ldr	r4, [pc, #140]	; (1c618 <adp5062_reg_read_write+0xb8>)
   1c58a:	9301      	str	r3, [sp, #4]
   1c58c:	4e23      	ldr	r6, [pc, #140]	; (1c61c <adp5062_reg_read_write+0xbc>)
   1c58e:	4f24      	ldr	r7, [pc, #144]	; (1c620 <adp5062_reg_read_write+0xc0>)
   1c590:	e003      	b.n	1c59a <adp5062_reg_read_write+0x3a>
   1c592:	3c01      	subs	r4, #1
   1c594:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   1c596:	2c00      	cmp	r4, #0
   1c598:	d004      	beq.n	1c5a4 <adp5062_reg_read_write+0x44>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1c59a:	0029      	movs	r1, r5
   1c59c:	0030      	movs	r0, r6
   1c59e:	47b8      	blx	r7
   1c5a0:	2800      	cmp	r0, #0
   1c5a2:	d1f6      	bne.n	1c592 <adp5062_reg_read_write+0x32>
		i2c_read_write(writep, charger_add, temp_buf, 2);
	}
}
   1c5a4:	b004      	add	sp, #16
   1c5a6:	bc04      	pop	{r2}
   1c5a8:	4690      	mov	r8, r2
   1c5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct i2c_master_packet packet = {
   1c5ac:	ad01      	add	r5, sp, #4
   1c5ae:	220c      	movs	r2, #12
   1c5b0:	2100      	movs	r1, #0
   1c5b2:	4b17      	ldr	r3, [pc, #92]	; (1c610 <adp5062_reg_read_write+0xb0>)
   1c5b4:	0028      	movs	r0, r5
   1c5b6:	4798      	blx	r3
   1c5b8:	466b      	mov	r3, sp
			debugStat = i2c_master_write_packet_wait(&i2c_master_instance, &packet) ;
   1c5ba:	24fa      	movs	r4, #250	; 0xfa
	struct i2c_master_packet packet = {
   1c5bc:	606b      	str	r3, [r5, #4]
			debugStat = i2c_master_write_packet_wait(&i2c_master_instance, &packet) ;
   1c5be:	4e17      	ldr	r6, [pc, #92]	; (1c61c <adp5062_reg_read_write+0xbc>)
	struct i2c_master_packet packet = {
   1c5c0:	4b18      	ldr	r3, [pc, #96]	; (1c624 <adp5062_reg_read_write+0xc4>)
			debugStat = i2c_master_write_packet_wait(&i2c_master_instance, &packet) ;
   1c5c2:	0029      	movs	r1, r5
	struct i2c_master_packet packet = {
   1c5c4:	9301      	str	r3, [sp, #4]
			debugStat = i2c_master_write_packet_wait(&i2c_master_instance, &packet) ;
   1c5c6:	0030      	movs	r0, r6
   1c5c8:	4f15      	ldr	r7, [pc, #84]	; (1c620 <adp5062_reg_read_write+0xc0>)
   1c5ca:	47b8      	blx	r7
   1c5cc:	00a4      	lsls	r4, r4, #2
   1c5ce:	e006      	b.n	1c5de <adp5062_reg_read_write+0x7e>
   1c5d0:	3c01      	subs	r4, #1
   1c5d2:	0029      	movs	r1, r5
   1c5d4:	0030      	movs	r0, r6
   1c5d6:	b2a4      	uxth	r4, r4
   1c5d8:	47b8      	blx	r7
			if (timeout++ == limit) {   
   1c5da:	2c00      	cmp	r4, #0
   1c5dc:	d001      	beq.n	1c5e2 <adp5062_reg_read_write+0x82>
		}while(debugStat!= STATUS_OK);
   1c5de:	2800      	cmp	r0, #0
   1c5e0:	d1f6      	bne.n	1c5d0 <adp5062_reg_read_write+0x70>
		packet.data=buf+1;
   1c5e2:	466b      	mov	r3, sp
   1c5e4:	3301      	adds	r3, #1
   1c5e6:	606b      	str	r3, [r5, #4]
		packet.data_length=length;
   1c5e8:	2301      	movs	r3, #1
   1c5ea:	4c0b      	ldr	r4, [pc, #44]	; (1c618 <adp5062_reg_read_write+0xb8>)
   1c5ec:	806b      	strh	r3, [r5, #2]
   1c5ee:	4f0e      	ldr	r7, [pc, #56]	; (1c628 <adp5062_reg_read_write+0xc8>)
   1c5f0:	e003      	b.n	1c5fa <adp5062_reg_read_write+0x9a>
   1c5f2:	3c01      	subs	r4, #1
   1c5f4:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   
   1c5f6:	2c00      	cmp	r4, #0
   1c5f8:	d004      	beq.n	1c604 <adp5062_reg_read_write+0xa4>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1c5fa:	0029      	movs	r1, r5
   1c5fc:	0030      	movs	r0, r6
   1c5fe:	47b8      	blx	r7
   1c600:	2800      	cmp	r0, #0
   1c602:	d1f6      	bne.n	1c5f2 <adp5062_reg_read_write+0x92>
		*data=temp_buf[1];
   1c604:	466b      	mov	r3, sp
   1c606:	4642      	mov	r2, r8
   1c608:	785b      	ldrb	r3, [r3, #1]
   1c60a:	7013      	strb	r3, [r2, #0]
   1c60c:	e7ca      	b.n	1c5a4 <adp5062_reg_read_write+0x44>
   1c60e:	46c0      	nop			; (mov r8, r8)
   1c610:	00028a1d 	.word	0x00028a1d
   1c614:	00020014 	.word	0x00020014
   1c618:	000003e9 	.word	0x000003e9
   1c61c:	20000e78 	.word	0x20000e78
   1c620:	00018c95 	.word	0x00018c95
   1c624:	00010014 	.word	0x00010014
   1c628:	00018c81 	.word	0x00018c81

0001c62c <sd_mmc_test_unit_ready_0>:
		return CTRL_FAIL;
	}
}

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1c62c:	b510      	push	{r4, lr}
	switch (sd_mmc_check(slot))
   1c62e:	2000      	movs	r0, #0
   1c630:	4b0d      	ldr	r3, [pc, #52]	; (1c668 <sd_mmc_test_unit_ready_0+0x3c>)
   1c632:	4798      	blx	r3
   1c634:	2801      	cmp	r0, #1
   1c636:	d015      	beq.n	1c664 <sd_mmc_test_unit_ready_0+0x38>
   1c638:	2800      	cmp	r0, #0
   1c63a:	d008      	beq.n	1c64e <sd_mmc_test_unit_ready_0+0x22>
   1c63c:	2802      	cmp	r0, #2
   1c63e:	d001      	beq.n	1c644 <sd_mmc_test_unit_ready_0+0x18>
		return CTRL_FAIL;
   1c640:	2001      	movs	r0, #1
	return sd_mmc_test_unit_ready(0);
}
   1c642:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
   1c644:	2200      	movs	r2, #0
   1c646:	4b09      	ldr	r3, [pc, #36]	; (1c66c <sd_mmc_test_unit_ready_0+0x40>)
   1c648:	701a      	strb	r2, [r3, #0]
		return CTRL_NO_PRESENT;
   1c64a:	2002      	movs	r0, #2
   1c64c:	e7f9      	b.n	1c642 <sd_mmc_test_unit_ready_0+0x16>
		if (sd_mmc_ejected[slot]) {
   1c64e:	4b07      	ldr	r3, [pc, #28]	; (1c66c <sd_mmc_test_unit_ready_0+0x40>)
   1c650:	781b      	ldrb	r3, [r3, #0]
   1c652:	2b00      	cmp	r3, #0
   1c654:	d1f9      	bne.n	1c64a <sd_mmc_test_unit_ready_0+0x1e>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1c656:	4b06      	ldr	r3, [pc, #24]	; (1c670 <sd_mmc_test_unit_ready_0+0x44>)
   1c658:	2000      	movs	r0, #0
   1c65a:	4798      	blx	r3
   1c65c:	0783      	lsls	r3, r0, #30
   1c65e:	d0f4      	beq.n	1c64a <sd_mmc_test_unit_ready_0+0x1e>
			return CTRL_GOOD;
   1c660:	2000      	movs	r0, #0
   1c662:	e7ee      	b.n	1c642 <sd_mmc_test_unit_ready_0+0x16>
		return CTRL_BUSY;
   1c664:	2003      	movs	r0, #3
   1c666:	e7ec      	b.n	1c642 <sd_mmc_test_unit_ready_0+0x16>
   1c668:	00016eb1 	.word	0x00016eb1
   1c66c:	20000d30 	.word	0x20000d30
   1c670:	000174b5 	.word	0x000174b5

0001c674 <sd_mmc_read_capacity_0>:
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
	return sd_mmc_test_unit_ready(slot);
}

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1c674:	b510      	push	{r4, lr}
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1c676:	4b12      	ldr	r3, [pc, #72]	; (1c6c0 <sd_mmc_read_capacity_0+0x4c>)
{
   1c678:	0004      	movs	r4, r0
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1c67a:	2000      	movs	r0, #0
   1c67c:	4798      	blx	r3
   1c67e:	0040      	lsls	r0, r0, #1
   1c680:	3801      	subs	r0, #1
   1c682:	6020      	str	r0, [r4, #0]
	switch (sd_mmc_check(slot))
   1c684:	4b0f      	ldr	r3, [pc, #60]	; (1c6c4 <sd_mmc_read_capacity_0+0x50>)
   1c686:	2000      	movs	r0, #0
   1c688:	4798      	blx	r3
   1c68a:	2801      	cmp	r0, #1
   1c68c:	d015      	beq.n	1c6ba <sd_mmc_read_capacity_0+0x46>
   1c68e:	2800      	cmp	r0, #0
   1c690:	d008      	beq.n	1c6a4 <sd_mmc_read_capacity_0+0x30>
   1c692:	2802      	cmp	r0, #2
   1c694:	d001      	beq.n	1c69a <sd_mmc_read_capacity_0+0x26>
		return CTRL_FAIL;
   1c696:	2001      	movs	r0, #1
	return sd_mmc_read_capacity(0, nb_sector);
}
   1c698:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
   1c69a:	2200      	movs	r2, #0
   1c69c:	4b0a      	ldr	r3, [pc, #40]	; (1c6c8 <sd_mmc_read_capacity_0+0x54>)
   1c69e:	701a      	strb	r2, [r3, #0]
		return CTRL_NO_PRESENT;
   1c6a0:	2002      	movs	r0, #2
   1c6a2:	e7f9      	b.n	1c698 <sd_mmc_read_capacity_0+0x24>
		if (sd_mmc_ejected[slot]) {
   1c6a4:	4b08      	ldr	r3, [pc, #32]	; (1c6c8 <sd_mmc_read_capacity_0+0x54>)
   1c6a6:	781b      	ldrb	r3, [r3, #0]
   1c6a8:	2b00      	cmp	r3, #0
   1c6aa:	d1f9      	bne.n	1c6a0 <sd_mmc_read_capacity_0+0x2c>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1c6ac:	4b07      	ldr	r3, [pc, #28]	; (1c6cc <sd_mmc_read_capacity_0+0x58>)
   1c6ae:	2000      	movs	r0, #0
   1c6b0:	4798      	blx	r3
   1c6b2:	0783      	lsls	r3, r0, #30
   1c6b4:	d0f4      	beq.n	1c6a0 <sd_mmc_read_capacity_0+0x2c>
			return CTRL_GOOD;
   1c6b6:	2000      	movs	r0, #0
   1c6b8:	e7ee      	b.n	1c698 <sd_mmc_read_capacity_0+0x24>
		return CTRL_BUSY;
   1c6ba:	2003      	movs	r0, #3
   1c6bc:	e7ec      	b.n	1c698 <sd_mmc_read_capacity_0+0x24>
   1c6be:	46c0      	nop			; (mov r8, r8)
   1c6c0:	00017529 	.word	0x00017529
   1c6c4:	00016eb1 	.word	0x00016eb1
   1c6c8:	20000d30 	.word	0x20000d30
   1c6cc:	000174b5 	.word	0x000174b5

0001c6d0 <sd_mmc_unload_0>:
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
   1c6d0:	4b01      	ldr	r3, [pc, #4]	; (1c6d8 <sd_mmc_unload_0+0x8>)
   1c6d2:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
   1c6d4:	2001      	movs	r0, #1
   1c6d6:	4770      	bx	lr
   1c6d8:	20000d30 	.word	0x20000d30

0001c6dc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
   1c6dc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
   1c6de:	2000      	movs	r0, #0
   1c6e0:	4b01      	ldr	r3, [pc, #4]	; (1c6e8 <sd_mmc_wr_protect_0+0xc>)
   1c6e2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
   1c6e4:	bd10      	pop	{r4, pc}
   1c6e6:	46c0      	nop			; (mov r8, r8)
   1c6e8:	0001759d 	.word	0x0001759d

0001c6ec <sd_mmc_removal_0>:
   1c6ec:	2001      	movs	r0, #1
   1c6ee:	4770      	bx	lr

0001c6f0 <sd_mmc_usb_read_10_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   1c6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c6f2:	46c6      	mov	lr, r8
   1c6f4:	000c      	movs	r4, r1
   1c6f6:	b500      	push	{lr}
	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   1c6f8:	000a      	movs	r2, r1
   1c6fa:	4b25      	ldr	r3, [pc, #148]	; (1c790 <sd_mmc_usb_read_10_0+0xa0>)
   1c6fc:	0001      	movs	r1, r0
   1c6fe:	2000      	movs	r0, #0
   1c700:	4798      	blx	r3
   1c702:	2800      	cmp	r0, #0
   1c704:	d006      	beq.n	1c714 <sd_mmc_usb_read_10_0+0x24>
		return CTRL_FAIL;
   1c706:	3802      	subs	r0, #2
   1c708:	4243      	negs	r3, r0
   1c70a:	4158      	adcs	r0, r3
   1c70c:	3001      	adds	r0, #1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
}
   1c70e:	bc04      	pop	{r2}
   1c710:	4690      	mov	r8, r2
   1c712:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!udi_msc_trans_block(true,
   1c714:	4b1f      	ldr	r3, [pc, #124]	; (1c794 <sd_mmc_usb_read_10_0+0xa4>)
	bool b_first_step = true;
   1c716:	2601      	movs	r6, #1
			if (!udi_msc_trans_block(true,
   1c718:	4698      	mov	r8, r3
   1c71a:	4f1f      	ldr	r7, [pc, #124]	; (1c798 <sd_mmc_usb_read_10_0+0xa8>)
	while (nb_step--) {
   1c71c:	4b1f      	ldr	r3, [pc, #124]	; (1c79c <sd_mmc_usb_read_10_0+0xac>)
   1c71e:	429c      	cmp	r4, r3
   1c720:	d028      	beq.n	1c774 <sd_mmc_usb_read_10_0+0x84>
		if (nb_step) { // Skip last step
   1c722:	2c00      	cmp	r4, #0
   1c724:	d01a      	beq.n	1c75c <sd_mmc_usb_read_10_0+0x6c>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   1c726:	2501      	movs	r5, #1
   1c728:	4025      	ands	r5, r4
   1c72a:	d12f      	bne.n	1c78c <sd_mmc_usb_read_10_0+0x9c>
   1c72c:	481c      	ldr	r0, [pc, #112]	; (1c7a0 <sd_mmc_usb_read_10_0+0xb0>)
   1c72e:	2101      	movs	r1, #1
   1c730:	4b1c      	ldr	r3, [pc, #112]	; (1c7a4 <sd_mmc_usb_read_10_0+0xb4>)
   1c732:	4798      	blx	r3
   1c734:	2800      	cmp	r0, #0
   1c736:	d10f      	bne.n	1c758 <sd_mmc_usb_read_10_0+0x68>
		if (!b_first_step) { // Skip first step
   1c738:	2e00      	cmp	r6, #0
   1c73a:	d11d      	bne.n	1c778 <sd_mmc_usb_read_10_0+0x88>
			if (!udi_msc_trans_block(true,
   1c73c:	2d00      	cmp	r5, #0
   1c73e:	d00f      	beq.n	1c760 <sd_mmc_usb_read_10_0+0x70>
   1c740:	2280      	movs	r2, #128	; 0x80
   1c742:	2300      	movs	r3, #0
   1c744:	0092      	lsls	r2, r2, #2
   1c746:	4916      	ldr	r1, [pc, #88]	; (1c7a0 <sd_mmc_usb_read_10_0+0xb0>)
   1c748:	2001      	movs	r0, #1
   1c74a:	4d13      	ldr	r5, [pc, #76]	; (1c798 <sd_mmc_usb_read_10_0+0xa8>)
   1c74c:	47a8      	blx	r5
   1c74e:	2800      	cmp	r0, #0
   1c750:	d112      	bne.n	1c778 <sd_mmc_usb_read_10_0+0x88>
					sd_mmc_wait_end_of_read_blocks(true);
   1c752:	2001      	movs	r0, #1
   1c754:	4b14      	ldr	r3, [pc, #80]	; (1c7a8 <sd_mmc_usb_read_10_0+0xb8>)
   1c756:	4798      	blx	r3
				return CTRL_FAIL;
   1c758:	2001      	movs	r0, #1
   1c75a:	e7d8      	b.n	1c70e <sd_mmc_usb_read_10_0+0x1e>
		if (!b_first_step) { // Skip first step
   1c75c:	2e00      	cmp	r6, #0
   1c75e:	d109      	bne.n	1c774 <sd_mmc_usb_read_10_0+0x84>
			if (!udi_msc_trans_block(true,
   1c760:	2280      	movs	r2, #128	; 0x80
   1c762:	2300      	movs	r3, #0
   1c764:	0092      	lsls	r2, r2, #2
   1c766:	4641      	mov	r1, r8
   1c768:	2001      	movs	r0, #1
   1c76a:	47b8      	blx	r7
   1c76c:	2800      	cmp	r0, #0
   1c76e:	d0f0      	beq.n	1c752 <sd_mmc_usb_read_10_0+0x62>
		if (nb_step) { // Skip last step
   1c770:	2c00      	cmp	r4, #0
   1c772:	d101      	bne.n	1c778 <sd_mmc_usb_read_10_0+0x88>
	return CTRL_GOOD;
   1c774:	2000      	movs	r0, #0
   1c776:	e7ca      	b.n	1c70e <sd_mmc_usb_read_10_0+0x1e>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1c778:	2000      	movs	r0, #0
   1c77a:	4b0b      	ldr	r3, [pc, #44]	; (1c7a8 <sd_mmc_usb_read_10_0+0xb8>)
   1c77c:	4798      	blx	r3
   1c77e:	3c01      	subs	r4, #1
   1c780:	b2a4      	uxth	r4, r4
   1c782:	2600      	movs	r6, #0
   1c784:	2800      	cmp	r0, #0
   1c786:	d0c9      	beq.n	1c71c <sd_mmc_usb_read_10_0+0x2c>
				return CTRL_FAIL;
   1c788:	2001      	movs	r0, #1
   1c78a:	e7c0      	b.n	1c70e <sd_mmc_usb_read_10_0+0x1e>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   1c78c:	4801      	ldr	r0, [pc, #4]	; (1c794 <sd_mmc_usb_read_10_0+0xa4>)
   1c78e:	e7ce      	b.n	1c72e <sd_mmc_usb_read_10_0+0x3e>
   1c790:	000175a1 	.word	0x000175a1
   1c794:	20001318 	.word	0x20001318
   1c798:	00006f9d 	.word	0x00006f9d
   1c79c:	0000ffff 	.word	0x0000ffff
   1c7a0:	20001518 	.word	0x20001518
   1c7a4:	000176c1 	.word	0x000176c1
   1c7a8:	000176ed 	.word	0x000176ed

0001c7ac <sd_mmc_usb_write_10_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   1c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c7ae:	46ce      	mov	lr, r9
   1c7b0:	4647      	mov	r7, r8
   1c7b2:	000c      	movs	r4, r1
   1c7b4:	b580      	push	{r7, lr}
	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   1c7b6:	000a      	movs	r2, r1
   1c7b8:	4b2f      	ldr	r3, [pc, #188]	; (1c878 <sd_mmc_usb_write_10_0+0xcc>)
   1c7ba:	0001      	movs	r1, r0
   1c7bc:	2000      	movs	r0, #0
   1c7be:	4798      	blx	r3
   1c7c0:	2800      	cmp	r0, #0
   1c7c2:	d007      	beq.n	1c7d4 <sd_mmc_usb_write_10_0+0x28>
		return CTRL_FAIL;
   1c7c4:	3802      	subs	r0, #2
   1c7c6:	4243      	negs	r3, r0
   1c7c8:	4158      	adcs	r0, r3
   1c7ca:	3001      	adds	r0, #1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
}
   1c7cc:	bc0c      	pop	{r2, r3}
   1c7ce:	4690      	mov	r8, r2
   1c7d0:	4699      	mov	r9, r3
   1c7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while (nb_step--) {
   1c7d4:	4b29      	ldr	r3, [pc, #164]	; (1c87c <sd_mmc_usb_write_10_0+0xd0>)
   1c7d6:	429c      	cmp	r4, r3
   1c7d8:	d101      	bne.n	1c7de <sd_mmc_usb_write_10_0+0x32>
	return CTRL_GOOD;
   1c7da:	2000      	movs	r0, #0
   1c7dc:	e7f6      	b.n	1c7cc <sd_mmc_usb_write_10_0+0x20>
   1c7de:	1e65      	subs	r5, r4, #1
   1c7e0:	b2ad      	uxth	r5, r5
		if (nb_step) { // Skip last step
   1c7e2:	2c00      	cmp	r4, #0
   1c7e4:	d0f9      	beq.n	1c7da <sd_mmc_usb_write_10_0+0x2e>
			if (!udi_msc_trans_block(false,
   1c7e6:	2301      	movs	r3, #1
   1c7e8:	4699      	mov	r9, r3
   1c7ea:	07e3      	lsls	r3, r4, #31
   1c7ec:	d538      	bpl.n	1c860 <sd_mmc_usb_write_10_0+0xb4>
   1c7ee:	4924      	ldr	r1, [pc, #144]	; (1c880 <sd_mmc_usb_write_10_0+0xd4>)
   1c7f0:	4f24      	ldr	r7, [pc, #144]	; (1c884 <sd_mmc_usb_write_10_0+0xd8>)
   1c7f2:	000b      	movs	r3, r1
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   1c7f4:	4698      	mov	r8, r3
   1c7f6:	4e24      	ldr	r6, [pc, #144]	; (1c888 <sd_mmc_usb_write_10_0+0xdc>)
			if (!udi_msc_trans_block(false,
   1c7f8:	2280      	movs	r2, #128	; 0x80
   1c7fa:	2300      	movs	r3, #0
   1c7fc:	0092      	lsls	r2, r2, #2
   1c7fe:	2000      	movs	r0, #0
   1c800:	47b0      	blx	r6
				if (!b_first_step) {
   1c802:	464b      	mov	r3, r9
			if (!udi_msc_trans_block(false,
   1c804:	2800      	cmp	r0, #0
   1c806:	d02f      	beq.n	1c868 <sd_mmc_usb_write_10_0+0xbc>
		if (!b_first_step) { // Skip first step
   1c808:	2b00      	cmp	r3, #0
   1c80a:	d01b      	beq.n	1c844 <sd_mmc_usb_write_10_0+0x98>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   1c80c:	0038      	movs	r0, r7
   1c80e:	07eb      	lsls	r3, r5, #31
   1c810:	d400      	bmi.n	1c814 <sd_mmc_usb_write_10_0+0x68>
   1c812:	4640      	mov	r0, r8
   1c814:	2101      	movs	r1, #1
   1c816:	4b1d      	ldr	r3, [pc, #116]	; (1c88c <sd_mmc_usb_write_10_0+0xe0>)
   1c818:	4798      	blx	r3
   1c81a:	3c01      	subs	r4, #1
   1c81c:	3d01      	subs	r5, #1
   1c81e:	b2a4      	uxth	r4, r4
   1c820:	b2ad      	uxth	r5, r5
   1c822:	2800      	cmp	r0, #0
   1c824:	d113      	bne.n	1c84e <sd_mmc_usb_write_10_0+0xa2>
		if (nb_step) { // Skip last step
   1c826:	2c00      	cmp	r4, #0
   1c828:	d013      	beq.n	1c852 <sd_mmc_usb_write_10_0+0xa6>
   1c82a:	2300      	movs	r3, #0
			if (!udi_msc_trans_block(false,
   1c82c:	4914      	ldr	r1, [pc, #80]	; (1c880 <sd_mmc_usb_write_10_0+0xd4>)
   1c82e:	4699      	mov	r9, r3
   1c830:	07e3      	lsls	r3, r4, #31
   1c832:	d4e1      	bmi.n	1c7f8 <sd_mmc_usb_write_10_0+0x4c>
   1c834:	2280      	movs	r2, #128	; 0x80
   1c836:	2300      	movs	r3, #0
   1c838:	0092      	lsls	r2, r2, #2
   1c83a:	4912      	ldr	r1, [pc, #72]	; (1c884 <sd_mmc_usb_write_10_0+0xd8>)
   1c83c:	2000      	movs	r0, #0
   1c83e:	47b0      	blx	r6
   1c840:	2800      	cmp	r0, #0
   1c842:	d013      	beq.n	1c86c <sd_mmc_usb_write_10_0+0xc0>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1c844:	2000      	movs	r0, #0
   1c846:	4b12      	ldr	r3, [pc, #72]	; (1c890 <sd_mmc_usb_write_10_0+0xe4>)
   1c848:	4798      	blx	r3
   1c84a:	2800      	cmp	r0, #0
   1c84c:	d0de      	beq.n	1c80c <sd_mmc_usb_write_10_0+0x60>
				return CTRL_FAIL;
   1c84e:	2001      	movs	r0, #1
   1c850:	e7bc      	b.n	1c7cc <sd_mmc_usb_write_10_0+0x20>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1c852:	2000      	movs	r0, #0
   1c854:	4b0e      	ldr	r3, [pc, #56]	; (1c890 <sd_mmc_usb_write_10_0+0xe4>)
   1c856:	4798      	blx	r3
   1c858:	2800      	cmp	r0, #0
   1c85a:	d1f8      	bne.n	1c84e <sd_mmc_usb_write_10_0+0xa2>
	return CTRL_GOOD;
   1c85c:	2000      	movs	r0, #0
   1c85e:	e7b5      	b.n	1c7cc <sd_mmc_usb_write_10_0+0x20>
			if (!udi_msc_trans_block(false,
   1c860:	4908      	ldr	r1, [pc, #32]	; (1c884 <sd_mmc_usb_write_10_0+0xd8>)
   1c862:	4b07      	ldr	r3, [pc, #28]	; (1c880 <sd_mmc_usb_write_10_0+0xd4>)
   1c864:	000f      	movs	r7, r1
   1c866:	e7c5      	b.n	1c7f4 <sd_mmc_usb_write_10_0+0x48>
				if (!b_first_step) {
   1c868:	2b00      	cmp	r3, #0
   1c86a:	d1f0      	bne.n	1c84e <sd_mmc_usb_write_10_0+0xa2>
					sd_mmc_wait_end_of_write_blocks(true);
   1c86c:	2001      	movs	r0, #1
   1c86e:	4b08      	ldr	r3, [pc, #32]	; (1c890 <sd_mmc_usb_write_10_0+0xe4>)
   1c870:	4798      	blx	r3
				return CTRL_FAIL;
   1c872:	2001      	movs	r0, #1
   1c874:	e7aa      	b.n	1c7cc <sd_mmc_usb_write_10_0+0x20>
   1c876:	46c0      	nop			; (mov r8, r8)
   1c878:	00017761 	.word	0x00017761
   1c87c:	0000ffff 	.word	0x0000ffff
   1c880:	20001518 	.word	0x20001518
   1c884:	20001318 	.word	0x20001318
   1c888:	00006f9d 	.word	0x00006f9d
   1c88c:	00017841 	.word	0x00017841
   1c890:	0001786d 	.word	0x0001786d

0001c894 <sd_mmc_mem_2_ram_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1c894:	b510      	push	{r4, lr}
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1c896:	2201      	movs	r2, #1
{
   1c898:	000c      	movs	r4, r1
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1c89a:	4b0d      	ldr	r3, [pc, #52]	; (1c8d0 <sd_mmc_mem_2_ram_0+0x3c>)
   1c89c:	0001      	movs	r1, r0
   1c89e:	2000      	movs	r0, #0
   1c8a0:	4798      	blx	r3
   1c8a2:	2800      	cmp	r0, #0
   1c8a4:	d004      	beq.n	1c8b0 <sd_mmc_mem_2_ram_0+0x1c>
		return CTRL_FAIL;
   1c8a6:	3802      	subs	r0, #2
   1c8a8:	4243      	negs	r3, r0
   1c8aa:	4158      	adcs	r0, r3
   1c8ac:	3001      	adds	r0, #1
	return sd_mmc_mem_2_ram(0, addr, ram);
}
   1c8ae:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1c8b0:	4b08      	ldr	r3, [pc, #32]	; (1c8d4 <sd_mmc_mem_2_ram_0+0x40>)
   1c8b2:	2101      	movs	r1, #1
   1c8b4:	0020      	movs	r0, r4
   1c8b6:	4798      	blx	r3
   1c8b8:	0003      	movs	r3, r0
		return CTRL_FAIL;
   1c8ba:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1c8bc:	2b00      	cmp	r3, #0
   1c8be:	d1f6      	bne.n	1c8ae <sd_mmc_mem_2_ram_0+0x1a>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1c8c0:	4b05      	ldr	r3, [pc, #20]	; (1c8d8 <sd_mmc_mem_2_ram_0+0x44>)
   1c8c2:	2000      	movs	r0, #0
   1c8c4:	4798      	blx	r3
   1c8c6:	1e43      	subs	r3, r0, #1
   1c8c8:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   1c8ca:	b2c0      	uxtb	r0, r0
   1c8cc:	e7ef      	b.n	1c8ae <sd_mmc_mem_2_ram_0+0x1a>
   1c8ce:	46c0      	nop			; (mov r8, r8)
   1c8d0:	000175a1 	.word	0x000175a1
   1c8d4:	000176c1 	.word	0x000176c1
   1c8d8:	000176ed 	.word	0x000176ed

0001c8dc <sd_mmc_ram_2_mem_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1c8dc:	b510      	push	{r4, lr}
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1c8de:	2201      	movs	r2, #1
{
   1c8e0:	000c      	movs	r4, r1
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1c8e2:	4b0d      	ldr	r3, [pc, #52]	; (1c918 <sd_mmc_ram_2_mem_0+0x3c>)
   1c8e4:	0001      	movs	r1, r0
   1c8e6:	2000      	movs	r0, #0
   1c8e8:	4798      	blx	r3
   1c8ea:	2800      	cmp	r0, #0
   1c8ec:	d004      	beq.n	1c8f8 <sd_mmc_ram_2_mem_0+0x1c>
		return CTRL_FAIL;
   1c8ee:	3802      	subs	r0, #2
   1c8f0:	4243      	negs	r3, r0
   1c8f2:	4158      	adcs	r0, r3
   1c8f4:	3001      	adds	r0, #1
	return sd_mmc_ram_2_mem(0, addr, ram);
}
   1c8f6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1c8f8:	4b08      	ldr	r3, [pc, #32]	; (1c91c <sd_mmc_ram_2_mem_0+0x40>)
   1c8fa:	2101      	movs	r1, #1
   1c8fc:	0020      	movs	r0, r4
   1c8fe:	4798      	blx	r3
   1c900:	0003      	movs	r3, r0
		return CTRL_FAIL;
   1c902:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1c904:	2b00      	cmp	r3, #0
   1c906:	d1f6      	bne.n	1c8f6 <sd_mmc_ram_2_mem_0+0x1a>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1c908:	4b05      	ldr	r3, [pc, #20]	; (1c920 <sd_mmc_ram_2_mem_0+0x44>)
   1c90a:	2000      	movs	r0, #0
   1c90c:	4798      	blx	r3
   1c90e:	1e43      	subs	r3, r0, #1
   1c910:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   1c912:	b2c0      	uxtb	r0, r0
   1c914:	e7ef      	b.n	1c8f6 <sd_mmc_ram_2_mem_0+0x1a>
   1c916:	46c0      	nop			; (mov r8, r8)
   1c918:	00017761 	.word	0x00017761
   1c91c:	00017841 	.word	0x00017841
   1c920:	0001786d 	.word	0x0001786d

0001c924 <glcd_init>:
//void delay_ms(uint32_t ms);

//#define BACKLIGHT_INVERT	// Uncomment if LED backlight turn on with low value

void glcd_init(void)
{
   1c924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   1c926:	2580      	movs	r5, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c928:	2157      	movs	r1, #87	; 0x57
   1c92a:	2002      	movs	r0, #2
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   1c92c:	2380      	movs	r3, #128	; 0x80
   1c92e:	4c14      	ldr	r4, [pc, #80]	; (1c980 <glcd_init+0x5c>)
   1c930:	042d      	lsls	r5, r5, #16
   1c932:	60a5      	str	r5, [r4, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c934:	5c62      	ldrb	r2, [r4, r1]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   1c936:	051b      	lsls	r3, r3, #20
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c938:	4302      	orrs	r2, r0
   1c93a:	b2d2      	uxtb	r2, r2
   1c93c:	5462      	strb	r2, [r4, r1]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   1c93e:	60a3      	str	r3, [r4, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c940:	235b      	movs	r3, #91	; 0x5b
   1c942:	5ce2      	ldrb	r2, [r4, r3]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   1c944:	4e0f      	ldr	r6, [pc, #60]	; (1c984 <glcd_init+0x60>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c946:	4302      	orrs	r2, r0
   1c948:	b2d2      	uxtb	r2, r2
   1c94a:	54e2      	strb	r2, [r4, r3]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   1c94c:	60b5      	str	r5, [r6, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1c94e:	5c73      	ldrb	r3, [r6, r1]
   1c950:	4303      	orrs	r3, r0
   1c952:	b2db      	uxtb	r3, r3
   1c954:	5473      	strb	r3, [r6, r1]

	
	GLCD_DESELECT();
	

	glcd_select_screen((uint8_t *)&glcd_buffer,&glcd_bbox);
   1c956:	480c      	ldr	r0, [pc, #48]	; (1c988 <glcd_init+0x64>)
   1c958:	490c      	ldr	r1, [pc, #48]	; (1c98c <glcd_init+0x68>)
   1c95a:	4b0d      	ldr	r3, [pc, #52]	; (1c990 <glcd_init+0x6c>)
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   1c95c:	61a5      	str	r5, [r4, #24]
   1c95e:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1c960:	6165      	str	r5, [r4, #20]
	/* Toggle RST low to reset. Minimum pulse 100ns on data sheet. */
	GLCD_SELECT();
	GLCD_RESET_LOW();


	delay_ms(GLCD_RESET_TIME);
   1c962:	4f0c      	ldr	r7, [pc, #48]	; (1c994 <glcd_init+0x70>)
   1c964:	6175      	str	r5, [r6, #20]
   1c966:	2001      	movs	r0, #1
   1c968:	47b8      	blx	r7
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   1c96a:	61b5      	str	r5, [r6, #24]
   1c96c:	2001      	movs	r0, #1
   1c96e:	61a5      	str	r5, [r4, #24]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1c970:	6165      	str	r5, [r4, #20]
   1c972:	6175      	str	r5, [r6, #20]
   1c974:	47b8      	blx	r7
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   1c976:	61b5      	str	r5, [r6, #24]
	glcd_ST7565R_init();
   1c978:	4b07      	ldr	r3, [pc, #28]	; (1c998 <glcd_init+0x74>)
   1c97a:	61a5      	str	r5, [r4, #24]
   1c97c:	4798      	blx	r3
}
   1c97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c980:	40002800 	.word	0x40002800
   1c984:	40002880 	.word	0x40002880
   1c988:	2000171c 	.word	0x2000171c
   1c98c:	20001718 	.word	0x20001718
   1c990:	0001caa9 	.word	0x0001caa9
   1c994:	0001f509 	.word	0x0001f509
   1c998:	0001dc55 	.word	0x0001dc55

0001c99c <glcd_spi_write>:
{
   1c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c99e:	0005      	movs	r5, r0
	spi_select_slave(&spi_main, &slave_lcd, true);
   1c9a0:	4f08      	ldr	r7, [pc, #32]	; (1c9c4 <glcd_spi_write+0x28>)
   1c9a2:	4c09      	ldr	r4, [pc, #36]	; (1c9c8 <glcd_spi_write+0x2c>)
   1c9a4:	0039      	movs	r1, r7
   1c9a6:	4e09      	ldr	r6, [pc, #36]	; (1c9cc <glcd_spi_write+0x30>)
   1c9a8:	2201      	movs	r2, #1
   1c9aa:	0020      	movs	r0, r4
   1c9ac:	47b0      	blx	r6
	spi_transceive_wait(&spi_main, c, &temp);
   1c9ae:	b2a9      	uxth	r1, r5
   1c9b0:	4b07      	ldr	r3, [pc, #28]	; (1c9d0 <glcd_spi_write+0x34>)
   1c9b2:	4a08      	ldr	r2, [pc, #32]	; (1c9d4 <glcd_spi_write+0x38>)
   1c9b4:	0020      	movs	r0, r4
   1c9b6:	4798      	blx	r3
	spi_select_slave(&spi_main, &slave_lcd, false);
   1c9b8:	0039      	movs	r1, r7
   1c9ba:	2200      	movs	r2, #0
   1c9bc:	0020      	movs	r0, r4
   1c9be:	47b0      	blx	r6
}
   1c9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c9c2:	46c0      	nop			; (mov r8, r8)
   1c9c4:	20000e2c 	.word	0x20000e2c
   1c9c8:	20000e6c 	.word	0x20000e6c
   1c9cc:	0001ed59 	.word	0x0001ed59
   1c9d0:	0001ecfd 	.word	0x0001ecfd
   1c9d4:	20000d32 	.word	0x20000d32

0001c9d8 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
   1c9d8:	b570      	push	{r4, r5, r6, lr}
	/* Keep and check bounding box within limits of LCD screen dimensions */
	if (xmin > (GLCD_LCD_WIDTH-1)) {
   1c9da:	b244      	sxtb	r4, r0
   1c9dc:	2c00      	cmp	r4, #0
   1c9de:	db22      	blt.n	1ca26 <glcd_update_bbox+0x4e>
		xmin = GLCD_LCD_WIDTH-1;
	}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   1c9e0:	b254      	sxtb	r4, r2
   1c9e2:	2c00      	cmp	r4, #0
   1c9e4:	db23      	blt.n	1ca2e <glcd_update_bbox+0x56>
   1c9e6:	1c0c      	adds	r4, r1, #0
   1c9e8:	293f      	cmp	r1, #63	; 0x3f
   1c9ea:	d900      	bls.n	1c9ee <glcd_update_bbox+0x16>
   1c9ec:	243f      	movs	r4, #63	; 0x3f
   1c9ee:	b2e4      	uxtb	r4, r4
   1c9f0:	1c19      	adds	r1, r3, #0
   1c9f2:	2b3f      	cmp	r3, #63	; 0x3f
   1c9f4:	d900      	bls.n	1c9f8 <glcd_update_bbox+0x20>
   1c9f6:	213f      	movs	r1, #63	; 0x3f
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
   1c9f8:	4d0e      	ldr	r5, [pc, #56]	; (1ca34 <glcd_update_bbox+0x5c>)
   1c9fa:	b2c9      	uxtb	r1, r1
   1c9fc:	682b      	ldr	r3, [r5, #0]
   1c9fe:	781e      	ldrb	r6, [r3, #0]
   1ca00:	4286      	cmp	r6, r0
   1ca02:	d901      	bls.n	1ca08 <glcd_update_bbox+0x30>
		glcd_bbox_selected->x_min = xmin;
   1ca04:	7018      	strb	r0, [r3, #0]
   1ca06:	682b      	ldr	r3, [r5, #0]
	}		
	if (xmax > glcd_bbox_selected->x_max) {
   1ca08:	7898      	ldrb	r0, [r3, #2]
   1ca0a:	4290      	cmp	r0, r2
   1ca0c:	d201      	bcs.n	1ca12 <glcd_update_bbox+0x3a>
		glcd_bbox_selected->x_max = xmax;
   1ca0e:	709a      	strb	r2, [r3, #2]
   1ca10:	682b      	ldr	r3, [r5, #0]
	}
	if (ymin < glcd_bbox_selected->y_min) {
   1ca12:	785a      	ldrb	r2, [r3, #1]
   1ca14:	42a2      	cmp	r2, r4
   1ca16:	d901      	bls.n	1ca1c <glcd_update_bbox+0x44>
		glcd_bbox_selected->y_min = ymin;
   1ca18:	705c      	strb	r4, [r3, #1]
   1ca1a:	682b      	ldr	r3, [r5, #0]
	}		
	if (ymax > glcd_bbox_selected->y_max) {
   1ca1c:	78da      	ldrb	r2, [r3, #3]
   1ca1e:	428a      	cmp	r2, r1
   1ca20:	d200      	bcs.n	1ca24 <glcd_update_bbox+0x4c>
		glcd_bbox_selected->y_max = ymax;
   1ca22:	70d9      	strb	r1, [r3, #3]
	}			
}
   1ca24:	bd70      	pop	{r4, r5, r6, pc}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   1ca26:	b254      	sxtb	r4, r2
		xmin = GLCD_LCD_WIDTH-1;
   1ca28:	207f      	movs	r0, #127	; 0x7f
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   1ca2a:	2c00      	cmp	r4, #0
   1ca2c:	dadb      	bge.n	1c9e6 <glcd_update_bbox+0xe>
		xmax = GLCD_LCD_WIDTH-1;
   1ca2e:	227f      	movs	r2, #127	; 0x7f
   1ca30:	e7d9      	b.n	1c9e6 <glcd_update_bbox+0xe>
   1ca32:	46c0      	nop			; (mov r8, r8)
   1ca34:	20001b20 	.word	0x20001b20

0001ca38 <glcd_reset_bbox>:
   1ca38:	227f      	movs	r2, #127	; 0x7f
   1ca3a:	4b06      	ldr	r3, [pc, #24]	; (1ca54 <glcd_reset_bbox+0x1c>)
   1ca3c:	6819      	ldr	r1, [r3, #0]
   1ca3e:	700a      	strb	r2, [r1, #0]
   1ca40:	2200      	movs	r2, #0
   1ca42:	6819      	ldr	r1, [r3, #0]
   1ca44:	708a      	strb	r2, [r1, #2]
   1ca46:	213f      	movs	r1, #63	; 0x3f
   1ca48:	6818      	ldr	r0, [r3, #0]
   1ca4a:	7041      	strb	r1, [r0, #1]
   1ca4c:	681b      	ldr	r3, [r3, #0]
   1ca4e:	70da      	strb	r2, [r3, #3]
   1ca50:	4770      	bx	lr
   1ca52:	46c0      	nop			; (mov r8, r8)
   1ca54:	20001b20 	.word	0x20001b20

0001ca58 <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
   1ca58:	2280      	movs	r2, #128	; 0x80
void glcd_clear_buffer(void) {
   1ca5a:	b510      	push	{r4, lr}
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
   1ca5c:	4b0f      	ldr	r3, [pc, #60]	; (1ca9c <glcd_clear_buffer+0x44>)
   1ca5e:	00d2      	lsls	r2, r2, #3
   1ca60:	6818      	ldr	r0, [r3, #0]
   1ca62:	2100      	movs	r1, #0
   1ca64:	4b0e      	ldr	r3, [pc, #56]	; (1caa0 <glcd_clear_buffer+0x48>)
   1ca66:	4798      	blx	r3
	if (xmin < glcd_bbox_selected->x_min) {
   1ca68:	4a0e      	ldr	r2, [pc, #56]	; (1caa4 <glcd_clear_buffer+0x4c>)
   1ca6a:	6813      	ldr	r3, [r2, #0]
   1ca6c:	7819      	ldrb	r1, [r3, #0]
   1ca6e:	2900      	cmp	r1, #0
   1ca70:	d002      	beq.n	1ca78 <glcd_clear_buffer+0x20>
		glcd_bbox_selected->x_min = xmin;
   1ca72:	2100      	movs	r1, #0
   1ca74:	7019      	strb	r1, [r3, #0]
   1ca76:	6813      	ldr	r3, [r2, #0]
	if (xmax > glcd_bbox_selected->x_max) {
   1ca78:	7899      	ldrb	r1, [r3, #2]
   1ca7a:	297e      	cmp	r1, #126	; 0x7e
   1ca7c:	d802      	bhi.n	1ca84 <glcd_clear_buffer+0x2c>
		glcd_bbox_selected->x_max = xmax;
   1ca7e:	217f      	movs	r1, #127	; 0x7f
   1ca80:	7099      	strb	r1, [r3, #2]
   1ca82:	6813      	ldr	r3, [r2, #0]
	if (ymin < glcd_bbox_selected->y_min) {
   1ca84:	7859      	ldrb	r1, [r3, #1]
   1ca86:	2900      	cmp	r1, #0
   1ca88:	d002      	beq.n	1ca90 <glcd_clear_buffer+0x38>
		glcd_bbox_selected->y_min = ymin;
   1ca8a:	2100      	movs	r1, #0
   1ca8c:	7059      	strb	r1, [r3, #1]
   1ca8e:	6813      	ldr	r3, [r2, #0]
	if (ymax > glcd_bbox_selected->y_max) {
   1ca90:	78da      	ldrb	r2, [r3, #3]
   1ca92:	2a3e      	cmp	r2, #62	; 0x3e
   1ca94:	d801      	bhi.n	1ca9a <glcd_clear_buffer+0x42>
		glcd_bbox_selected->y_max = ymax;
   1ca96:	223f      	movs	r2, #63	; 0x3f
   1ca98:	70da      	strb	r2, [r3, #3]
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}
   1ca9a:	bd10      	pop	{r4, pc}
   1ca9c:	20001b1c 	.word	0x20001b1c
   1caa0:	00028a1d 	.word	0x00028a1d
   1caa4:	20001b20 	.word	0x20001b20

0001caa8 <glcd_select_screen>:

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
   1caa8:	4b02      	ldr	r3, [pc, #8]	; (1cab4 <glcd_select_screen+0xc>)
   1caaa:	6018      	str	r0, [r3, #0]
	glcd_bbox_selected = bbox;
   1caac:	4b02      	ldr	r3, [pc, #8]	; (1cab8 <glcd_select_screen+0x10>)
   1caae:	6019      	str	r1, [r3, #0]
}
   1cab0:	4770      	bx	lr
   1cab2:	46c0      	nop			; (mov r8, r8)
   1cab4:	20001b1c 	.word	0x20001b1c
   1cab8:	20001b20 	.word	0x20001b20

0001cabc <glcd_set_pixel>:
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cabc:	b243      	sxtb	r3, r0
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
   1cabe:	b570      	push	{r4, r5, r6, lr}
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cac0:	2b00      	cmp	r3, #0
   1cac2:	db12      	blt.n	1caea <glcd_set_pixel+0x2e>
   1cac4:	293f      	cmp	r1, #63	; 0x3f
   1cac6:	d810      	bhi.n	1caea <glcd_set_pixel+0x2e>
		return;
	}

	if (color) {
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cac8:	08cb      	lsrs	r3, r1, #3
   1caca:	01db      	lsls	r3, r3, #7
   1cacc:	181b      	adds	r3, r3, r0
   1cace:	4d0b      	ldr	r5, [pc, #44]	; (1cafc <glcd_set_pixel+0x40>)
	if (color) {
   1cad0:	2a00      	cmp	r2, #0
   1cad2:	d00b      	beq.n	1caec <glcd_set_pixel+0x30>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cad4:	2407      	movs	r4, #7
   1cad6:	2201      	movs	r2, #1
   1cad8:	400c      	ands	r4, r1
   1cada:	40a2      	lsls	r2, r4
   1cadc:	5cec      	ldrb	r4, [r5, r3]
   1cade:	4322      	orrs	r2, r4
   1cae0:	54ea      	strb	r2, [r5, r3]
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
	}

	glcd_update_bbox(x,y,x,y);
   1cae2:	000b      	movs	r3, r1
   1cae4:	0002      	movs	r2, r0
   1cae6:	4c06      	ldr	r4, [pc, #24]	; (1cb00 <glcd_set_pixel+0x44>)
   1cae8:	47a0      	blx	r4
}
   1caea:	bd70      	pop	{r4, r5, r6, pc}
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1caec:	2207      	movs	r2, #7
   1caee:	2401      	movs	r4, #1
   1caf0:	400a      	ands	r2, r1
   1caf2:	4094      	lsls	r4, r2
   1caf4:	5cea      	ldrb	r2, [r5, r3]
   1caf6:	43a2      	bics	r2, r4
   1caf8:	54ea      	strb	r2, [r5, r3]
   1cafa:	e7f2      	b.n	1cae2 <glcd_set_pixel+0x26>
   1cafc:	2000171c 	.word	0x2000171c
   1cb00:	0001c9d9 	.word	0x0001c9d9

0001cb04 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
   1cb04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb06:	4657      	mov	r7, sl
   1cb08:	464e      	mov	r6, r9
   1cb0a:	4645      	mov	r5, r8
   1cb0c:	46de      	mov	lr, fp
   1cb0e:	001c      	movs	r4, r3
   1cb10:	b5e0      	push	{r5, r6, r7, lr}
   1cb12:	000e      	movs	r6, r1
   1cb14:	4681      	mov	r9, r0
   1cb16:	b087      	sub	sp, #28
   1cb18:	ab10      	add	r3, sp, #64	; 0x40
   1cb1a:	781b      	ldrb	r3, [r3, #0]
   1cb1c:	0015      	movs	r5, r2
   1cb1e:	9304      	str	r3, [sp, #16]
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
   1cb20:	1ba3      	subs	r3, r4, r6
   1cb22:	17d8      	asrs	r0, r3, #31
   1cb24:	181b      	adds	r3, r3, r0
   1cb26:	4043      	eors	r3, r0
   1cb28:	4698      	mov	r8, r3
   1cb2a:	464b      	mov	r3, r9
   1cb2c:	1aef      	subs	r7, r5, r3
   1cb2e:	17f8      	asrs	r0, r7, #31
   1cb30:	9301      	str	r3, [sp, #4]
   1cb32:	183b      	adds	r3, r7, r0
   1cb34:	4043      	eors	r3, r0
   1cb36:	0021      	movs	r1, r4
   1cb38:	0032      	movs	r2, r6
   1cb3a:	46aa      	mov	sl, r5
   1cb3c:	469b      	mov	fp, r3
   1cb3e:	9302      	str	r3, [sp, #8]
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
   1cb40:	4598      	cmp	r8, r3
   1cb42:	dc07      	bgt.n	1cb54 <glcd_draw_line+0x50>
   1cb44:	4643      	mov	r3, r8
   1cb46:	46a2      	mov	sl, r4
   1cb48:	9601      	str	r6, [sp, #4]
   1cb4a:	002c      	movs	r4, r5
   1cb4c:	464e      	mov	r6, r9
   1cb4e:	000d      	movs	r5, r1
   1cb50:	4691      	mov	r9, r2
   1cb52:	9302      	str	r3, [sp, #8]
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
   1cb54:	42a6      	cmp	r6, r4
   1cb56:	d800      	bhi.n	1cb5a <glcd_draw_line+0x56>
   1cb58:	e094      	b.n	1cc84 <glcd_draw_line+0x180>
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
   1cb5a:	4f59      	ldr	r7, [pc, #356]	; (1ccc0 <glcd_draw_line+0x1bc>)
   1cb5c:	464b      	mov	r3, r9
   1cb5e:	0032      	movs	r2, r6
   1cb60:	0029      	movs	r1, r5
   1cb62:	0020      	movs	r0, r4
   1cb64:	9705      	str	r7, [sp, #20]
   1cb66:	47b8      	blx	r7

	dx = x1 - x0;
	dy = abs(y1 - y0);
   1cb68:	4651      	mov	r1, sl
	dx = x1 - x0;
   1cb6a:	1b33      	subs	r3, r6, r4
   1cb6c:	b2db      	uxtb	r3, r3
   1cb6e:	001a      	movs	r2, r3
   1cb70:	9303      	str	r3, [sp, #12]
	dy = abs(y1 - y0);
   1cb72:	9b01      	ldr	r3, [sp, #4]
	
	err = dx / 2;
   1cb74:	0857      	lsrs	r7, r2, #1
	dy = abs(y1 - y0);
   1cb76:	1a5b      	subs	r3, r3, r1
   1cb78:	17d9      	asrs	r1, r3, #31
   1cb7a:	185b      	adds	r3, r3, r1
   1cb7c:	404b      	eors	r3, r1
   1cb7e:	b2db      	uxtb	r3, r3
   1cb80:	469a      	mov	sl, r3
	
	if (y0 < y1) {
   1cb82:	2301      	movs	r3, #1
   1cb84:	9302      	str	r3, [sp, #8]
   1cb86:	45a9      	cmp	r9, r5
   1cb88:	d800      	bhi.n	1cb8c <glcd_draw_line+0x88>
   1cb8a:	e096      	b.n	1ccba <glcd_draw_line+0x1b6>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cb8c:	4642      	mov	r2, r8
   1cb8e:	4b4d      	ldr	r3, [pc, #308]	; (1ccc4 <glcd_draw_line+0x1c0>)
   1cb90:	9201      	str	r2, [sp, #4]
   1cb92:	4699      	mov	r9, r3
   1cb94:	46b0      	mov	r8, r6
   1cb96:	e00d      	b.n	1cbb4 <glcd_draw_line+0xb0>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cb98:	062b      	lsls	r3, r5, #24
   1cb9a:	d401      	bmi.n	1cba0 <glcd_draw_line+0x9c>
   1cb9c:	2c3f      	cmp	r4, #63	; 0x3f
   1cb9e:	d93f      	bls.n	1cc20 <glcd_draw_line+0x11c>
		if (steep) {
			glcd_set_pixel(y0, x0, color);
		} else {
			glcd_set_pixel(x0, y0, color);
		}
		err -= dy;
   1cba0:	4653      	mov	r3, sl
   1cba2:	1aff      	subs	r7, r7, r3
   1cba4:	b2fb      	uxtb	r3, r7
   1cba6:	b25f      	sxtb	r7, r3
		if (err < 0) {
   1cba8:	2f00      	cmp	r7, #0
   1cbaa:	db26      	blt.n	1cbfa <glcd_draw_line+0xf6>
	for (; x0<=x1; x0++) {
   1cbac:	3401      	adds	r4, #1
   1cbae:	b2e4      	uxtb	r4, r4
   1cbb0:	4544      	cmp	r4, r8
   1cbb2:	d82e      	bhi.n	1cc12 <glcd_draw_line+0x10e>
		if (steep) {
   1cbb4:	9b01      	ldr	r3, [sp, #4]
   1cbb6:	455b      	cmp	r3, fp
   1cbb8:	dcee      	bgt.n	1cb98 <glcd_draw_line+0x94>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cbba:	0623      	lsls	r3, r4, #24
   1cbbc:	d4f0      	bmi.n	1cba0 <glcd_draw_line+0x9c>
   1cbbe:	2d3f      	cmp	r5, #63	; 0x3f
   1cbc0:	d8ee      	bhi.n	1cba0 <glcd_draw_line+0x9c>
	if (color) {
   1cbc2:	9b04      	ldr	r3, [sp, #16]
   1cbc4:	2b00      	cmp	r3, #0
   1cbc6:	d041      	beq.n	1cc4c <glcd_draw_line+0x148>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cbc8:	2107      	movs	r1, #7
   1cbca:	2201      	movs	r2, #1
   1cbcc:	4029      	ands	r1, r5
   1cbce:	408a      	lsls	r2, r1
   1cbd0:	08eb      	lsrs	r3, r5, #3
   1cbd2:	b2db      	uxtb	r3, r3
   1cbd4:	01db      	lsls	r3, r3, #7
   1cbd6:	493b      	ldr	r1, [pc, #236]	; (1ccc4 <glcd_draw_line+0x1c0>)
   1cbd8:	191b      	adds	r3, r3, r4
   1cbda:	5cc9      	ldrb	r1, [r1, r3]
   1cbdc:	430a      	orrs	r2, r1
   1cbde:	4939      	ldr	r1, [pc, #228]	; (1ccc4 <glcd_draw_line+0x1c0>)
   1cbe0:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   1cbe2:	002b      	movs	r3, r5
   1cbe4:	0022      	movs	r2, r4
   1cbe6:	0029      	movs	r1, r5
   1cbe8:	0020      	movs	r0, r4
   1cbea:	9e05      	ldr	r6, [sp, #20]
   1cbec:	47b0      	blx	r6
		err -= dy;
   1cbee:	4653      	mov	r3, sl
   1cbf0:	1aff      	subs	r7, r7, r3
   1cbf2:	b2fb      	uxtb	r3, r7
   1cbf4:	b25f      	sxtb	r7, r3
		if (err < 0) {
   1cbf6:	2f00      	cmp	r7, #0
   1cbf8:	dad8      	bge.n	1cbac <glcd_draw_line+0xa8>
			y0 += ystep;
   1cbfa:	9a02      	ldr	r2, [sp, #8]
	for (; x0<=x1; x0++) {
   1cbfc:	3401      	adds	r4, #1
			y0 += ystep;
   1cbfe:	4694      	mov	ip, r2
			err += dx;
   1cc00:	9a03      	ldr	r2, [sp, #12]
			y0 += ystep;
   1cc02:	4465      	add	r5, ip
			err += dx;
   1cc04:	4694      	mov	ip, r2
	for (; x0<=x1; x0++) {
   1cc06:	b2e4      	uxtb	r4, r4
			err += dx;
   1cc08:	4463      	add	r3, ip
			y0 += ystep;
   1cc0a:	b2ed      	uxtb	r5, r5
			err += dx;
   1cc0c:	b25f      	sxtb	r7, r3
	for (; x0<=x1; x0++) {
   1cc0e:	4544      	cmp	r4, r8
   1cc10:	d9d0      	bls.n	1cbb4 <glcd_draw_line+0xb0>
		}
	}
}
   1cc12:	b007      	add	sp, #28
   1cc14:	bc3c      	pop	{r2, r3, r4, r5}
   1cc16:	4690      	mov	r8, r2
   1cc18:	4699      	mov	r9, r3
   1cc1a:	46a2      	mov	sl, r4
   1cc1c:	46ab      	mov	fp, r5
   1cc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (color) {
   1cc20:	9b04      	ldr	r3, [sp, #16]
   1cc22:	2b00      	cmp	r3, #0
   1cc24:	d020      	beq.n	1cc68 <glcd_draw_line+0x164>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cc26:	2007      	movs	r0, #7
   1cc28:	2201      	movs	r2, #1
   1cc2a:	4020      	ands	r0, r4
   1cc2c:	4082      	lsls	r2, r0
   1cc2e:	08e3      	lsrs	r3, r4, #3
   1cc30:	b2db      	uxtb	r3, r3
   1cc32:	4924      	ldr	r1, [pc, #144]	; (1ccc4 <glcd_draw_line+0x1c0>)
   1cc34:	01db      	lsls	r3, r3, #7
   1cc36:	195b      	adds	r3, r3, r5
   1cc38:	5cc8      	ldrb	r0, [r1, r3]
   1cc3a:	4302      	orrs	r2, r0
   1cc3c:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   1cc3e:	0023      	movs	r3, r4
   1cc40:	002a      	movs	r2, r5
   1cc42:	0021      	movs	r1, r4
   1cc44:	0028      	movs	r0, r5
   1cc46:	9e05      	ldr	r6, [sp, #20]
   1cc48:	47b0      	blx	r6
   1cc4a:	e7a9      	b.n	1cba0 <glcd_draw_line+0x9c>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cc4c:	2207      	movs	r2, #7
   1cc4e:	2101      	movs	r1, #1
   1cc50:	402a      	ands	r2, r5
   1cc52:	4091      	lsls	r1, r2
   1cc54:	464a      	mov	r2, r9
   1cc56:	08eb      	lsrs	r3, r5, #3
   1cc58:	b2db      	uxtb	r3, r3
   1cc5a:	01db      	lsls	r3, r3, #7
   1cc5c:	191b      	adds	r3, r3, r4
   1cc5e:	5cd2      	ldrb	r2, [r2, r3]
   1cc60:	438a      	bics	r2, r1
   1cc62:	4649      	mov	r1, r9
   1cc64:	54ca      	strb	r2, [r1, r3]
   1cc66:	e7bc      	b.n	1cbe2 <glcd_draw_line+0xde>
   1cc68:	2207      	movs	r2, #7
   1cc6a:	2101      	movs	r1, #1
   1cc6c:	4022      	ands	r2, r4
   1cc6e:	4091      	lsls	r1, r2
   1cc70:	08e3      	lsrs	r3, r4, #3
   1cc72:	b2db      	uxtb	r3, r3
   1cc74:	01db      	lsls	r3, r3, #7
   1cc76:	4a13      	ldr	r2, [pc, #76]	; (1ccc4 <glcd_draw_line+0x1c0>)
   1cc78:	195b      	adds	r3, r3, r5
   1cc7a:	5cd2      	ldrb	r2, [r2, r3]
   1cc7c:	438a      	bics	r2, r1
   1cc7e:	4911      	ldr	r1, [pc, #68]	; (1ccc4 <glcd_draw_line+0x1c0>)
   1cc80:	54ca      	strb	r2, [r1, r3]
   1cc82:	e7dc      	b.n	1cc3e <glcd_draw_line+0x13a>
	glcd_update_bbox( x0, y0, x1, y1 );
   1cc84:	4f0e      	ldr	r7, [pc, #56]	; (1ccc0 <glcd_draw_line+0x1bc>)
   1cc86:	002b      	movs	r3, r5
   1cc88:	0022      	movs	r2, r4
   1cc8a:	4649      	mov	r1, r9
   1cc8c:	0030      	movs	r0, r6
   1cc8e:	9705      	str	r7, [sp, #20]
   1cc90:	47b8      	blx	r7
	dy = abs(y1 - y0);
   1cc92:	466a      	mov	r2, sp
	dx = x1 - x0;
   1cc94:	1ba3      	subs	r3, r4, r6
	dy = abs(y1 - y0);
   1cc96:	7a12      	ldrb	r2, [r2, #8]
	dx = x1 - x0;
   1cc98:	b2db      	uxtb	r3, r3
   1cc9a:	9303      	str	r3, [sp, #12]
	dy = abs(y1 - y0);
   1cc9c:	4692      	mov	sl, r2
	err = dx / 2;
   1cc9e:	085f      	lsrs	r7, r3, #1
	if (y0 < y1) {
   1cca0:	45a9      	cmp	r9, r5
   1cca2:	d206      	bcs.n	1ccb2 <glcd_draw_line+0x1ae>
   1cca4:	0023      	movs	r3, r4
   1cca6:	0034      	movs	r4, r6
   1cca8:	001e      	movs	r6, r3
   1ccaa:	2301      	movs	r3, #1
   1ccac:	464d      	mov	r5, r9
   1ccae:	9302      	str	r3, [sp, #8]
   1ccb0:	e76c      	b.n	1cb8c <glcd_draw_line+0x88>
   1ccb2:	0023      	movs	r3, r4
   1ccb4:	464d      	mov	r5, r9
   1ccb6:	0034      	movs	r4, r6
   1ccb8:	001e      	movs	r6, r3
   1ccba:	23ff      	movs	r3, #255	; 0xff
   1ccbc:	9302      	str	r3, [sp, #8]
   1ccbe:	e765      	b.n	1cb8c <glcd_draw_line+0x88>
   1ccc0:	0001c9d9 	.word	0x0001c9d9
   1ccc4:	2000171c 	.word	0x2000171c

0001ccc8 <glcd_fill_rect>:

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
   1ccc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ccca:	464e      	mov	r6, r9
   1cccc:	46de      	mov	lr, fp
   1ccce:	4657      	mov	r7, sl
   1ccd0:	4645      	mov	r5, r8
   1ccd2:	b5e0      	push	{r5, r6, r7, lr}
   1ccd4:	b089      	sub	sp, #36	; 0x24
   1ccd6:	9305      	str	r3, [sp, #20]
   1ccd8:	ab12      	add	r3, sp, #72	; 0x48
   1ccda:	9101      	str	r1, [sp, #4]
	int16_t i;
	for (i=x; i<x+w; i++) {
   1ccdc:	4684      	mov	ip, r0
{
   1ccde:	7819      	ldrb	r1, [r3, #0]
	for (i=x; i<x+w; i++) {
   1cce0:	0013      	movs	r3, r2
   1cce2:	4463      	add	r3, ip
{
   1cce4:	9006      	str	r0, [sp, #24]
   1cce6:	9207      	str	r2, [sp, #28]
   1cce8:	9104      	str	r1, [sp, #16]
	for (i=x; i<x+w; i++) {
   1ccea:	b206      	sxth	r6, r0
   1ccec:	9302      	str	r3, [sp, #8]
   1ccee:	4298      	cmp	r0, r3
   1ccf0:	db00      	blt.n	1ccf4 <glcd_fill_rect+0x2c>
   1ccf2:	e076      	b.n	1cde2 <glcd_fill_rect+0x11a>
   1ccf4:	9a01      	ldr	r2, [sp, #4]
   1ccf6:	4694      	mov	ip, r2
   1ccf8:	b213      	sxth	r3, r2
   1ccfa:	9303      	str	r3, [sp, #12]
   1ccfc:	9b05      	ldr	r3, [sp, #20]
   1ccfe:	4463      	add	r3, ip
   1cd00:	001d      	movs	r5, r3
   1cd02:	4b39      	ldr	r3, [pc, #228]	; (1cde8 <glcd_fill_rect+0x120>)
   1cd04:	4698      	mov	r8, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cd06:	4b39      	ldr	r3, [pc, #228]	; (1cdec <glcd_fill_rect+0x124>)
   1cd08:	4699      	mov	r9, r3
		int16_t j;
		for (j=y; j<y+h; j++) {
   1cd0a:	9b01      	ldr	r3, [sp, #4]
   1cd0c:	42ab      	cmp	r3, r5
   1cd0e:	da26      	bge.n	1cd5e <glcd_fill_rect+0x96>
   1cd10:	b2f7      	uxtb	r7, r6
   1cd12:	0633      	lsls	r3, r6, #24
   1cd14:	d45a      	bmi.n	1cdcc <glcd_fill_rect+0x104>
   1cd16:	9b04      	ldr	r3, [sp, #16]
   1cd18:	9c03      	ldr	r4, [sp, #12]
   1cd1a:	2b00      	cmp	r3, #0
   1cd1c:	d138      	bne.n	1cd90 <glcd_fill_rect+0xc8>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cd1e:	3307      	adds	r3, #7
   1cd20:	469b      	mov	fp, r3
   1cd22:	3b06      	subs	r3, #6
   1cd24:	469a      	mov	sl, r3
   1cd26:	e003      	b.n	1cd30 <glcd_fill_rect+0x68>
   1cd28:	3401      	adds	r4, #1
   1cd2a:	b224      	sxth	r4, r4
		for (j=y; j<y+h; j++) {
   1cd2c:	42a5      	cmp	r5, r4
   1cd2e:	dd16      	ble.n	1cd5e <glcd_fill_rect+0x96>
			glcd_set_pixel(i, j, color);
   1cd30:	b2e1      	uxtb	r1, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cd32:	293f      	cmp	r1, #63	; 0x3f
   1cd34:	d8f8      	bhi.n	1cd28 <glcd_fill_rect+0x60>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cd36:	465a      	mov	r2, fp
   1cd38:	4650      	mov	r0, sl
   1cd3a:	400a      	ands	r2, r1
   1cd3c:	4090      	lsls	r0, r2
   1cd3e:	08cb      	lsrs	r3, r1, #3
   1cd40:	4a2a      	ldr	r2, [pc, #168]	; (1cdec <glcd_fill_rect+0x124>)
   1cd42:	01db      	lsls	r3, r3, #7
   1cd44:	19db      	adds	r3, r3, r7
   1cd46:	5cd2      	ldrb	r2, [r2, r3]
   1cd48:	3401      	adds	r4, #1
   1cd4a:	4382      	bics	r2, r0
   1cd4c:	4827      	ldr	r0, [pc, #156]	; (1cdec <glcd_fill_rect+0x124>)
   1cd4e:	b224      	sxth	r4, r4
   1cd50:	54c2      	strb	r2, [r0, r3]
	glcd_update_bbox(x,y,x,y);
   1cd52:	000b      	movs	r3, r1
   1cd54:	003a      	movs	r2, r7
   1cd56:	0038      	movs	r0, r7
   1cd58:	47c0      	blx	r8
		for (j=y; j<y+h; j++) {
   1cd5a:	42a5      	cmp	r5, r4
   1cd5c:	dce8      	bgt.n	1cd30 <glcd_fill_rect+0x68>
   1cd5e:	3601      	adds	r6, #1
	for (i=x; i<x+w; i++) {
   1cd60:	9b02      	ldr	r3, [sp, #8]
   1cd62:	b236      	sxth	r6, r6
   1cd64:	429e      	cmp	r6, r3
   1cd66:	dbd0      	blt.n	1cd0a <glcd_fill_rect+0x42>
   1cd68:	9806      	ldr	r0, [sp, #24]
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
   1cd6a:	9901      	ldr	r1, [sp, #4]
   1cd6c:	9b05      	ldr	r3, [sp, #20]
   1cd6e:	468c      	mov	ip, r1
   1cd70:	3b01      	subs	r3, #1
   1cd72:	4463      	add	r3, ip
   1cd74:	4684      	mov	ip, r0
   1cd76:	9a07      	ldr	r2, [sp, #28]
   1cd78:	b2db      	uxtb	r3, r3
   1cd7a:	3a01      	subs	r2, #1
   1cd7c:	4462      	add	r2, ip
   1cd7e:	b2d2      	uxtb	r2, r2
   1cd80:	47c0      	blx	r8
}
   1cd82:	b009      	add	sp, #36	; 0x24
   1cd84:	bc3c      	pop	{r2, r3, r4, r5}
   1cd86:	4690      	mov	r8, r2
   1cd88:	4699      	mov	r9, r3
   1cd8a:	46a2      	mov	sl, r4
   1cd8c:	46ab      	mov	fp, r5
   1cd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cd90:	2307      	movs	r3, #7
   1cd92:	469b      	mov	fp, r3
   1cd94:	3b06      	subs	r3, #6
   1cd96:	469a      	mov	sl, r3
   1cd98:	e003      	b.n	1cda2 <glcd_fill_rect+0xda>
   1cd9a:	3401      	adds	r4, #1
   1cd9c:	b224      	sxth	r4, r4
		for (j=y; j<y+h; j++) {
   1cd9e:	42a5      	cmp	r5, r4
   1cda0:	dddd      	ble.n	1cd5e <glcd_fill_rect+0x96>
			glcd_set_pixel(i, j, color);
   1cda2:	b2e1      	uxtb	r1, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cda4:	293f      	cmp	r1, #63	; 0x3f
   1cda6:	d8f8      	bhi.n	1cd9a <glcd_fill_rect+0xd2>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cda8:	465a      	mov	r2, fp
   1cdaa:	4650      	mov	r0, sl
   1cdac:	400a      	ands	r2, r1
   1cdae:	4090      	lsls	r0, r2
   1cdb0:	0002      	movs	r2, r0
   1cdb2:	4648      	mov	r0, r9
   1cdb4:	08cb      	lsrs	r3, r1, #3
   1cdb6:	01db      	lsls	r3, r3, #7
   1cdb8:	19db      	adds	r3, r3, r7
   1cdba:	5cc0      	ldrb	r0, [r0, r3]
   1cdbc:	4302      	orrs	r2, r0
   1cdbe:	4648      	mov	r0, r9
   1cdc0:	54c2      	strb	r2, [r0, r3]
	glcd_update_bbox(x,y,x,y);
   1cdc2:	000b      	movs	r3, r1
   1cdc4:	003a      	movs	r2, r7
   1cdc6:	0038      	movs	r0, r7
   1cdc8:	47c0      	blx	r8
   1cdca:	e7e6      	b.n	1cd9a <glcd_fill_rect+0xd2>
		for (j=y; j<y+h; j++) {
   1cdcc:	9b03      	ldr	r3, [sp, #12]
   1cdce:	3301      	adds	r3, #1
   1cdd0:	b21b      	sxth	r3, r3
   1cdd2:	42ab      	cmp	r3, r5
   1cdd4:	dbfb      	blt.n	1cdce <glcd_fill_rect+0x106>
   1cdd6:	3601      	adds	r6, #1
	for (i=x; i<x+w; i++) {
   1cdd8:	9b02      	ldr	r3, [sp, #8]
   1cdda:	b236      	sxth	r6, r6
   1cddc:	429e      	cmp	r6, r3
   1cdde:	db94      	blt.n	1cd0a <glcd_fill_rect+0x42>
   1cde0:	e7c2      	b.n	1cd68 <glcd_fill_rect+0xa0>
   1cde2:	4b01      	ldr	r3, [pc, #4]	; (1cde8 <glcd_fill_rect+0x120>)
   1cde4:	4698      	mov	r8, r3
   1cde6:	e7c0      	b.n	1cd6a <glcd_fill_rect+0xa2>
   1cde8:	0001c9d9 	.word	0x0001c9d9
   1cdec:	2000171c 	.word	0x2000171c

0001cdf0 <glcd_draw_rect>:

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
   1cdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cdf2:	46de      	mov	lr, fp
   1cdf4:	4657      	mov	r7, sl
   1cdf6:	4645      	mov	r5, r8
   1cdf8:	464e      	mov	r6, r9
   1cdfa:	b5e0      	push	{r5, r6, r7, lr}
   1cdfc:	b08b      	sub	sp, #44	; 0x2c
   1cdfe:	9302      	str	r3, [sp, #8]
   1ce00:	ab14      	add	r3, sp, #80	; 0x50
   1ce02:	781b      	ldrb	r3, [r3, #0]
   1ce04:	4683      	mov	fp, r0
   1ce06:	9304      	str	r3, [sp, #16]
	int16_t i;
	for (i=x; i<x+w; i++) {
   1ce08:	0013      	movs	r3, r2
   1ce0a:	445b      	add	r3, fp
   1ce0c:	001d      	movs	r5, r3
   1ce0e:	9b02      	ldr	r3, [sp, #8]
{
   1ce10:	468a      	mov	sl, r1
   1ce12:	3b01      	subs	r3, #1
   1ce14:	9205      	str	r2, [sp, #20]
	for (i=x; i<x+w; i++) {
   1ce16:	b204      	sxth	r4, r0
   1ce18:	9306      	str	r3, [sp, #24]
   1ce1a:	42a8      	cmp	r0, r5
   1ce1c:	da21      	bge.n	1ce62 <glcd_draw_rect+0x72>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1ce1e:	2701      	movs	r7, #1
   1ce20:	4453      	add	r3, sl
   1ce22:	b2de      	uxtb	r6, r3
   1ce24:	08cb      	lsrs	r3, r1, #3
   1ce26:	01db      	lsls	r3, r3, #7
   1ce28:	000a      	movs	r2, r1
   1ce2a:	9307      	str	r3, [sp, #28]
   1ce2c:	2307      	movs	r3, #7
   1ce2e:	0039      	movs	r1, r7
   1ce30:	401a      	ands	r2, r3
   1ce32:	4091      	lsls	r1, r2
   1ce34:	4033      	ands	r3, r6
   1ce36:	409f      	lsls	r7, r3
   1ce38:	b24a      	sxtb	r2, r1
   1ce3a:	4690      	mov	r8, r2
   1ce3c:	43d2      	mvns	r2, r2
   1ce3e:	b27f      	sxtb	r7, r7
   1ce40:	43fb      	mvns	r3, r7
   1ce42:	9208      	str	r2, [sp, #32]
   1ce44:	08f2      	lsrs	r2, r6, #3
   1ce46:	01d2      	lsls	r2, r2, #7
   1ce48:	4699      	mov	r9, r3
   1ce4a:	9203      	str	r2, [sp, #12]
   1ce4c:	4653      	mov	r3, sl
   1ce4e:	2e3f      	cmp	r6, #63	; 0x3f
   1ce50:	d800      	bhi.n	1ce54 <glcd_draw_rect+0x64>
   1ce52:	e0a7      	b.n	1cfa4 <glcd_draw_rect+0x1b4>
   1ce54:	2b3f      	cmp	r3, #63	; 0x3f
   1ce56:	d800      	bhi.n	1ce5a <glcd_draw_rect+0x6a>
   1ce58:	e0c3      	b.n	1cfe2 <glcd_draw_rect+0x1f2>
   1ce5a:	3401      	adds	r4, #1
   1ce5c:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   1ce5e:	42ac      	cmp	r4, r5
   1ce60:	dbfb      	blt.n	1ce5a <glcd_draw_rect+0x6a>
   1ce62:	4bbb      	ldr	r3, [pc, #748]	; (1d150 <glcd_draw_rect+0x360>)
   1ce64:	9301      	str	r3, [sp, #4]
   1ce66:	9b06      	ldr	r3, [sp, #24]
   1ce68:	4453      	add	r3, sl
   1ce6a:	b2db      	uxtb	r3, r3
   1ce6c:	9306      	str	r3, [sp, #24]
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
   1ce6e:	4653      	mov	r3, sl
   1ce70:	b21c      	sxth	r4, r3
   1ce72:	9b02      	ldr	r3, [sp, #8]
   1ce74:	4453      	add	r3, sl
   1ce76:	4698      	mov	r8, r3
   1ce78:	4553      	cmp	r3, sl
   1ce7a:	dc00      	bgt.n	1ce7e <glcd_draw_rect+0x8e>
   1ce7c:	e134      	b.n	1d0e8 <glcd_draw_rect+0x2f8>
   1ce7e:	465b      	mov	r3, fp
   1ce80:	466a      	mov	r2, sp
   1ce82:	7213      	strb	r3, [r2, #8]
   1ce84:	7a13      	ldrb	r3, [r2, #8]
   1ce86:	b25b      	sxtb	r3, r3
   1ce88:	4699      	mov	r9, r3
   1ce8a:	9b05      	ldr	r3, [sp, #20]
   1ce8c:	3b01      	subs	r3, #1
   1ce8e:	9307      	str	r3, [sp, #28]
   1ce90:	445b      	add	r3, fp
   1ce92:	b2db      	uxtb	r3, r3
   1ce94:	9305      	str	r3, [sp, #20]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1ce96:	b25b      	sxtb	r3, r3
   1ce98:	9303      	str	r3, [sp, #12]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1ce9a:	4653      	mov	r3, sl
   1ce9c:	9308      	str	r3, [sp, #32]
   1ce9e:	e005      	b.n	1ceac <glcd_draw_rect+0xbc>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cea0:	2d3f      	cmp	r5, #63	; 0x3f
   1cea2:	d93f      	bls.n	1cf24 <glcd_draw_rect+0x134>
   1cea4:	3401      	adds	r4, #1
   1cea6:	b224      	sxth	r4, r4
	for (i=y; i<y+h; i++) {
   1cea8:	45a0      	cmp	r8, r4
   1ceaa:	dd2a      	ble.n	1cf02 <glcd_draw_rect+0x112>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1ceac:	464b      	mov	r3, r9
		glcd_set_pixel(x, i, color);
   1ceae:	b2e5      	uxtb	r5, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1ceb0:	2b00      	cmp	r3, #0
   1ceb2:	daf5      	bge.n	1cea0 <glcd_draw_rect+0xb0>
   1ceb4:	9b03      	ldr	r3, [sp, #12]
   1ceb6:	2b00      	cmp	r3, #0
   1ceb8:	dbf4      	blt.n	1cea4 <glcd_draw_rect+0xb4>
   1ceba:	2d3f      	cmp	r5, #63	; 0x3f
   1cebc:	d8f2      	bhi.n	1cea4 <glcd_draw_rect+0xb4>
   1cebe:	08ef      	lsrs	r7, r5, #3
   1cec0:	01fb      	lsls	r3, r7, #7
   1cec2:	9302      	str	r3, [sp, #8]
   1cec4:	2307      	movs	r3, #7
   1cec6:	2601      	movs	r6, #1
   1cec8:	402b      	ands	r3, r5
   1ceca:	409e      	lsls	r6, r3
	if (color) {
   1cecc:	9b04      	ldr	r3, [sp, #16]
   1cece:	b276      	sxtb	r6, r6
   1ced0:	2b00      	cmp	r3, #0
   1ced2:	d100      	bne.n	1ced6 <glcd_draw_rect+0xe6>
   1ced4:	e138      	b.n	1d148 <glcd_draw_rect+0x358>
   1ced6:	4b9f      	ldr	r3, [pc, #636]	; (1d154 <glcd_draw_rect+0x364>)
   1ced8:	469a      	mov	sl, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1ceda:	9b05      	ldr	r3, [sp, #20]
   1cedc:	469c      	mov	ip, r3
   1cede:	9b02      	ldr	r3, [sp, #8]
   1cee0:	4463      	add	r3, ip
   1cee2:	001f      	movs	r7, r3
   1cee4:	4653      	mov	r3, sl
   1cee6:	5ddb      	ldrb	r3, [r3, r7]
   1cee8:	431e      	orrs	r6, r3
   1ceea:	4653      	mov	r3, sl
   1ceec:	55de      	strb	r6, [r3, r7]
	glcd_update_bbox(x,y,x,y);
   1ceee:	9805      	ldr	r0, [sp, #20]
   1cef0:	3401      	adds	r4, #1
   1cef2:	002b      	movs	r3, r5
   1cef4:	0029      	movs	r1, r5
   1cef6:	0002      	movs	r2, r0
   1cef8:	9d01      	ldr	r5, [sp, #4]
   1cefa:	b224      	sxth	r4, r4
   1cefc:	47a8      	blx	r5
	for (i=y; i<y+h; i++) {
   1cefe:	45a0      	cmp	r8, r4
   1cf00:	dcd4      	bgt.n	1ceac <glcd_draw_rect+0xbc>
   1cf02:	9b08      	ldr	r3, [sp, #32]
   1cf04:	469a      	mov	sl, r3
   1cf06:	9b07      	ldr	r3, [sp, #28]
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
   1cf08:	445b      	add	r3, fp
   1cf0a:	b2da      	uxtb	r2, r3
   1cf0c:	4651      	mov	r1, sl
   1cf0e:	9b06      	ldr	r3, [sp, #24]
   1cf10:	4658      	mov	r0, fp
   1cf12:	9c01      	ldr	r4, [sp, #4]
   1cf14:	47a0      	blx	r4
}
   1cf16:	b00b      	add	sp, #44	; 0x2c
   1cf18:	bc3c      	pop	{r2, r3, r4, r5}
   1cf1a:	4690      	mov	r8, r2
   1cf1c:	4699      	mov	r9, r3
   1cf1e:	46a2      	mov	sl, r4
   1cf20:	46ab      	mov	fp, r5
   1cf22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cf24:	08ef      	lsrs	r7, r5, #3
	if (color) {
   1cf26:	9b04      	ldr	r3, [sp, #16]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cf28:	01fa      	lsls	r2, r7, #7
   1cf2a:	9202      	str	r2, [sp, #8]
	if (color) {
   1cf2c:	2b00      	cmp	r3, #0
   1cf2e:	d016      	beq.n	1cf5e <glcd_draw_rect+0x16e>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cf30:	465b      	mov	r3, fp
   1cf32:	189a      	adds	r2, r3, r2
   1cf34:	2307      	movs	r3, #7
   1cf36:	2601      	movs	r6, #1
   1cf38:	402b      	ands	r3, r5
   1cf3a:	409e      	lsls	r6, r3
   1cf3c:	4b85      	ldr	r3, [pc, #532]	; (1d154 <glcd_draw_rect+0x364>)
   1cf3e:	b276      	sxtb	r6, r6
   1cf40:	469a      	mov	sl, r3
   1cf42:	4651      	mov	r1, sl
   1cf44:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1cf46:	4658      	mov	r0, fp
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1cf48:	4333      	orrs	r3, r6
   1cf4a:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1cf4c:	9f01      	ldr	r7, [sp, #4]
   1cf4e:	002b      	movs	r3, r5
   1cf50:	465a      	mov	r2, fp
   1cf52:	0029      	movs	r1, r5
   1cf54:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cf56:	9b03      	ldr	r3, [sp, #12]
   1cf58:	2b00      	cmp	r3, #0
   1cf5a:	dba3      	blt.n	1cea4 <glcd_draw_rect+0xb4>
   1cf5c:	e7bd      	b.n	1ceda <glcd_draw_rect+0xea>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cf5e:	465b      	mov	r3, fp
   1cf60:	189a      	adds	r2, r3, r2
   1cf62:	2307      	movs	r3, #7
   1cf64:	2601      	movs	r6, #1
   1cf66:	402b      	ands	r3, r5
   1cf68:	409e      	lsls	r6, r3
   1cf6a:	4b7a      	ldr	r3, [pc, #488]	; (1d154 <glcd_draw_rect+0x364>)
   1cf6c:	b276      	sxtb	r6, r6
   1cf6e:	469a      	mov	sl, r3
   1cf70:	43f6      	mvns	r6, r6
   1cf72:	4651      	mov	r1, sl
   1cf74:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1cf76:	4658      	mov	r0, fp
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cf78:	4033      	ands	r3, r6
   1cf7a:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1cf7c:	9f01      	ldr	r7, [sp, #4]
   1cf7e:	002b      	movs	r3, r5
   1cf80:	465a      	mov	r2, fp
   1cf82:	0029      	movs	r1, r5
   1cf84:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cf86:	9b03      	ldr	r3, [sp, #12]
   1cf88:	2b00      	cmp	r3, #0
   1cf8a:	da00      	bge.n	1cf8e <glcd_draw_rect+0x19e>
   1cf8c:	e78a      	b.n	1cea4 <glcd_draw_rect+0xb4>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cf8e:	9b05      	ldr	r3, [sp, #20]
   1cf90:	469c      	mov	ip, r3
   1cf92:	9b02      	ldr	r3, [sp, #8]
   1cf94:	4463      	add	r3, ip
   1cf96:	001f      	movs	r7, r3
   1cf98:	4653      	mov	r3, sl
   1cf9a:	5ddb      	ldrb	r3, [r3, r7]
   1cf9c:	401e      	ands	r6, r3
   1cf9e:	4653      	mov	r3, sl
   1cfa0:	55de      	strb	r6, [r3, r7]
   1cfa2:	e7a4      	b.n	1ceee <glcd_draw_rect+0xfe>
   1cfa4:	2b3f      	cmp	r3, #63	; 0x3f
   1cfa6:	d93b      	bls.n	1d020 <glcd_draw_rect+0x230>
   1cfa8:	9b04      	ldr	r3, [sp, #16]
   1cfaa:	2b00      	cmp	r3, #0
   1cfac:	d168      	bne.n	1d080 <glcd_draw_rect+0x290>
   1cfae:	4b68      	ldr	r3, [pc, #416]	; (1d150 <glcd_draw_rect+0x360>)
   1cfb0:	4f68      	ldr	r7, [pc, #416]	; (1d154 <glcd_draw_rect+0x364>)
   1cfb2:	9301      	str	r3, [sp, #4]
   1cfb4:	9b03      	ldr	r3, [sp, #12]
   1cfb6:	9503      	str	r5, [sp, #12]
   1cfb8:	4698      	mov	r8, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cfba:	0623      	lsls	r3, r4, #24
   1cfbc:	d40b      	bmi.n	1cfd6 <glcd_draw_rect+0x1e6>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cfbe:	4643      	mov	r3, r8
   1cfc0:	4649      	mov	r1, r9
		glcd_set_pixel(i, y, color);
   1cfc2:	b2e0      	uxtb	r0, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cfc4:	18c2      	adds	r2, r0, r3
   1cfc6:	5cbb      	ldrb	r3, [r7, r2]
	glcd_update_bbox(x,y,x,y);
   1cfc8:	9d01      	ldr	r5, [sp, #4]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cfca:	400b      	ands	r3, r1
   1cfcc:	54bb      	strb	r3, [r7, r2]
	glcd_update_bbox(x,y,x,y);
   1cfce:	0031      	movs	r1, r6
   1cfd0:	0033      	movs	r3, r6
   1cfd2:	0002      	movs	r2, r0
   1cfd4:	47a8      	blx	r5
   1cfd6:	3401      	adds	r4, #1
	for (i=x; i<x+w; i++) {
   1cfd8:	9b03      	ldr	r3, [sp, #12]
   1cfda:	b224      	sxth	r4, r4
   1cfdc:	42a3      	cmp	r3, r4
   1cfde:	dcec      	bgt.n	1cfba <glcd_draw_rect+0x1ca>
   1cfe0:	e741      	b.n	1ce66 <glcd_draw_rect+0x76>
   1cfe2:	9b04      	ldr	r3, [sp, #16]
   1cfe4:	2b00      	cmp	r3, #0
   1cfe6:	d165      	bne.n	1d0b4 <glcd_draw_rect+0x2c4>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cfe8:	9a07      	ldr	r2, [sp, #28]
   1cfea:	4b59      	ldr	r3, [pc, #356]	; (1d150 <glcd_draw_rect+0x360>)
   1cfec:	4690      	mov	r8, r2
   1cfee:	9a08      	ldr	r2, [sp, #32]
   1cff0:	4657      	mov	r7, sl
   1cff2:	4691      	mov	r9, r2
   1cff4:	469a      	mov	sl, r3
   1cff6:	4e57      	ldr	r6, [pc, #348]	; (1d154 <glcd_draw_rect+0x364>)
   1cff8:	9301      	str	r3, [sp, #4]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1cffa:	0623      	lsls	r3, r4, #24
   1cffc:	d40a      	bmi.n	1d014 <glcd_draw_rect+0x224>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1cffe:	4643      	mov	r3, r8
   1d000:	4649      	mov	r1, r9
		glcd_set_pixel(i, y, color);
   1d002:	b2e0      	uxtb	r0, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d004:	18c2      	adds	r2, r0, r3
   1d006:	5cb3      	ldrb	r3, [r6, r2]
   1d008:	400b      	ands	r3, r1
   1d00a:	54b3      	strb	r3, [r6, r2]
	glcd_update_bbox(x,y,x,y);
   1d00c:	0039      	movs	r1, r7
   1d00e:	003b      	movs	r3, r7
   1d010:	0002      	movs	r2, r0
   1d012:	47d0      	blx	sl
   1d014:	3401      	adds	r4, #1
   1d016:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   1d018:	42a5      	cmp	r5, r4
   1d01a:	dcee      	bgt.n	1cffa <glcd_draw_rect+0x20a>
   1d01c:	46ba      	mov	sl, r7
   1d01e:	e722      	b.n	1ce66 <glcd_draw_rect+0x76>
   1d020:	9b04      	ldr	r3, [sp, #16]
   1d022:	2b00      	cmp	r3, #0
   1d024:	d164      	bne.n	1d0f0 <glcd_draw_rect+0x300>
   1d026:	4b4a      	ldr	r3, [pc, #296]	; (1d150 <glcd_draw_rect+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d028:	4a4a      	ldr	r2, [pc, #296]	; (1d154 <glcd_draw_rect+0x364>)
   1d02a:	46ab      	mov	fp, r5
   1d02c:	4690      	mov	r8, r2
   1d02e:	4655      	mov	r5, sl
   1d030:	469a      	mov	sl, r3
   1d032:	9301      	str	r3, [sp, #4]
   1d034:	9009      	str	r0, [sp, #36]	; 0x24
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d036:	0623      	lsls	r3, r4, #24
   1d038:	d41a      	bmi.n	1d070 <glcd_draw_rect+0x280>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d03a:	9b07      	ldr	r3, [sp, #28]
		glcd_set_pixel(i, y, color);
   1d03c:	b2e7      	uxtb	r7, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d03e:	19da      	adds	r2, r3, r7
   1d040:	4643      	mov	r3, r8
   1d042:	9908      	ldr	r1, [sp, #32]
   1d044:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1d046:	0038      	movs	r0, r7
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d048:	400b      	ands	r3, r1
   1d04a:	4641      	mov	r1, r8
   1d04c:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d04e:	002b      	movs	r3, r5
   1d050:	003a      	movs	r2, r7
   1d052:	0029      	movs	r1, r5
   1d054:	47d0      	blx	sl
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d056:	9b03      	ldr	r3, [sp, #12]
   1d058:	4649      	mov	r1, r9
   1d05a:	19da      	adds	r2, r3, r7
   1d05c:	4643      	mov	r3, r8
   1d05e:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1d060:	0038      	movs	r0, r7
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d062:	400b      	ands	r3, r1
   1d064:	4641      	mov	r1, r8
   1d066:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d068:	0033      	movs	r3, r6
   1d06a:	003a      	movs	r2, r7
   1d06c:	0031      	movs	r1, r6
   1d06e:	47d0      	blx	sl
   1d070:	3401      	adds	r4, #1
   1d072:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   1d074:	45a3      	cmp	fp, r4
   1d076:	dcde      	bgt.n	1d036 <glcd_draw_rect+0x246>
   1d078:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d07a:	46aa      	mov	sl, r5
   1d07c:	469b      	mov	fp, r3
   1d07e:	e6f2      	b.n	1ce66 <glcd_draw_rect+0x76>
   1d080:	4b33      	ldr	r3, [pc, #204]	; (1d150 <glcd_draw_rect+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d082:	46b9      	mov	r9, r7
   1d084:	9301      	str	r3, [sp, #4]
   1d086:	4b33      	ldr	r3, [pc, #204]	; (1d154 <glcd_draw_rect+0x364>)
   1d088:	4698      	mov	r8, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d08a:	0623      	lsls	r3, r4, #24
   1d08c:	d40d      	bmi.n	1d0aa <glcd_draw_rect+0x2ba>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d08e:	9b03      	ldr	r3, [sp, #12]
		glcd_set_pixel(i, y, color);
   1d090:	b2e0      	uxtb	r0, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d092:	18c2      	adds	r2, r0, r3
   1d094:	4643      	mov	r3, r8
   1d096:	4649      	mov	r1, r9
   1d098:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1d09a:	9f01      	ldr	r7, [sp, #4]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d09c:	430b      	orrs	r3, r1
   1d09e:	4641      	mov	r1, r8
   1d0a0:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d0a2:	0033      	movs	r3, r6
   1d0a4:	0002      	movs	r2, r0
   1d0a6:	0031      	movs	r1, r6
   1d0a8:	47b8      	blx	r7
   1d0aa:	3401      	adds	r4, #1
   1d0ac:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   1d0ae:	42ac      	cmp	r4, r5
   1d0b0:	dbeb      	blt.n	1d08a <glcd_draw_rect+0x29a>
   1d0b2:	e6d8      	b.n	1ce66 <glcd_draw_rect+0x76>
   1d0b4:	4b26      	ldr	r3, [pc, #152]	; (1d150 <glcd_draw_rect+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d0b6:	9a07      	ldr	r2, [sp, #28]
   1d0b8:	4657      	mov	r7, sl
   1d0ba:	4691      	mov	r9, r2
   1d0bc:	469a      	mov	sl, r3
   1d0be:	4e25      	ldr	r6, [pc, #148]	; (1d154 <glcd_draw_rect+0x364>)
   1d0c0:	9301      	str	r3, [sp, #4]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d0c2:	0623      	lsls	r3, r4, #24
   1d0c4:	d40a      	bmi.n	1d0dc <glcd_draw_rect+0x2ec>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d0c6:	464b      	mov	r3, r9
   1d0c8:	4641      	mov	r1, r8
		glcd_set_pixel(i, y, color);
   1d0ca:	b2e0      	uxtb	r0, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d0cc:	18c2      	adds	r2, r0, r3
   1d0ce:	5cb3      	ldrb	r3, [r6, r2]
   1d0d0:	430b      	orrs	r3, r1
   1d0d2:	54b3      	strb	r3, [r6, r2]
	glcd_update_bbox(x,y,x,y);
   1d0d4:	0039      	movs	r1, r7
   1d0d6:	003b      	movs	r3, r7
   1d0d8:	0002      	movs	r2, r0
   1d0da:	47d0      	blx	sl
   1d0dc:	3401      	adds	r4, #1
   1d0de:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   1d0e0:	42a5      	cmp	r5, r4
   1d0e2:	dcee      	bgt.n	1d0c2 <glcd_draw_rect+0x2d2>
   1d0e4:	46ba      	mov	sl, r7
   1d0e6:	e6be      	b.n	1ce66 <glcd_draw_rect+0x76>
   1d0e8:	9b05      	ldr	r3, [sp, #20]
   1d0ea:	3b01      	subs	r3, #1
   1d0ec:	9307      	str	r3, [sp, #28]
   1d0ee:	e70b      	b.n	1cf08 <glcd_draw_rect+0x118>
   1d0f0:	4b17      	ldr	r3, [pc, #92]	; (1d150 <glcd_draw_rect+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d0f2:	46bb      	mov	fp, r7
   1d0f4:	4699      	mov	r9, r3
   1d0f6:	4657      	mov	r7, sl
   1d0f8:	46aa      	mov	sl, r5
   1d0fa:	9301      	str	r3, [sp, #4]
   1d0fc:	9008      	str	r0, [sp, #32]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d0fe:	0623      	lsls	r3, r4, #24
   1d100:	d41a      	bmi.n	1d138 <glcd_draw_rect+0x348>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d102:	4641      	mov	r1, r8
   1d104:	9b07      	ldr	r3, [sp, #28]
		glcd_set_pixel(i, y, color);
   1d106:	b2e5      	uxtb	r5, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d108:	18ea      	adds	r2, r5, r3
   1d10a:	4b12      	ldr	r3, [pc, #72]	; (1d154 <glcd_draw_rect+0x364>)
	glcd_update_bbox(x,y,x,y);
   1d10c:	0028      	movs	r0, r5
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d10e:	5c9b      	ldrb	r3, [r3, r2]
   1d110:	430b      	orrs	r3, r1
   1d112:	4910      	ldr	r1, [pc, #64]	; (1d154 <glcd_draw_rect+0x364>)
   1d114:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d116:	003b      	movs	r3, r7
   1d118:	002a      	movs	r2, r5
   1d11a:	0039      	movs	r1, r7
   1d11c:	47c8      	blx	r9
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d11e:	4659      	mov	r1, fp
   1d120:	9b03      	ldr	r3, [sp, #12]
	glcd_update_bbox(x,y,x,y);
   1d122:	0028      	movs	r0, r5
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d124:	18ea      	adds	r2, r5, r3
   1d126:	4b0b      	ldr	r3, [pc, #44]	; (1d154 <glcd_draw_rect+0x364>)
   1d128:	5c9b      	ldrb	r3, [r3, r2]
   1d12a:	430b      	orrs	r3, r1
   1d12c:	4909      	ldr	r1, [pc, #36]	; (1d154 <glcd_draw_rect+0x364>)
   1d12e:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d130:	0033      	movs	r3, r6
   1d132:	002a      	movs	r2, r5
   1d134:	0031      	movs	r1, r6
   1d136:	47c8      	blx	r9
   1d138:	3401      	adds	r4, #1
   1d13a:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   1d13c:	4554      	cmp	r4, sl
   1d13e:	dbde      	blt.n	1d0fe <glcd_draw_rect+0x30e>
   1d140:	9b08      	ldr	r3, [sp, #32]
   1d142:	46ba      	mov	sl, r7
   1d144:	469b      	mov	fp, r3
   1d146:	e68e      	b.n	1ce66 <glcd_draw_rect+0x76>
   1d148:	4b02      	ldr	r3, [pc, #8]	; (1d154 <glcd_draw_rect+0x364>)
   1d14a:	43f6      	mvns	r6, r6
   1d14c:	469a      	mov	sl, r3
   1d14e:	e71e      	b.n	1cf8e <glcd_draw_rect+0x19e>
   1d150:	0001c9d9 	.word	0x0001c9d9
   1d154:	2000171c 	.word	0x2000171c

0001d158 <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
   1d158:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d15a:	46de      	mov	lr, fp
   1d15c:	4657      	mov	r7, sl
   1d15e:	464e      	mov	r6, r9
   1d160:	4645      	mov	r5, r8
   1d162:	b5e0      	push	{r5, r6, r7, lr}
   1d164:	b08b      	sub	sp, #44	; 0x2c
   1d166:	9307      	str	r3, [sp, #28]
		
	int8_t f = 1 - r;
   1d168:	2301      	movs	r3, #1
   1d16a:	2401      	movs	r4, #1
   1d16c:	1a9b      	subs	r3, r3, r2
   1d16e:	46a1      	mov	r9, r4
   1d170:	b25c      	sxtb	r4, r3
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
   1d172:	01d3      	lsls	r3, r2, #7
   1d174:	1a9b      	subs	r3, r3, r2
	int8_t x = 0;
	int8_t y = r;
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1d176:	1a87      	subs	r7, r0, r2
   1d178:	468c      	mov	ip, r1
	int8_t ddF_y = -2 * r;
   1d17a:	005b      	lsls	r3, r3, #1
	int8_t f = 1 - r;
   1d17c:	46a3      	mov	fp, r4
	int8_t ddF_y = -2 * r;
   1d17e:	b25c      	sxtb	r4, r3
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1d180:	b2fb      	uxtb	r3, r7
   1d182:	469a      	mov	sl, r3
   1d184:	1a8e      	subs	r6, r1, r2
   1d186:	1815      	adds	r5, r2, r0
	int8_t ddF_y = -2 * r;
   1d188:	9408      	str	r4, [sp, #32]
	int8_t y = r;
   1d18a:	b254      	sxtb	r4, r2
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1d18c:	4462      	add	r2, ip
	int8_t y = r;
   1d18e:	9403      	str	r4, [sp, #12]
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1d190:	b2f6      	uxtb	r6, r6
   1d192:	b2d4      	uxtb	r4, r2
   1d194:	b2ed      	uxtb	r5, r5
{
   1d196:	9106      	str	r1, [sp, #24]
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1d198:	9005      	str	r0, [sp, #20]
   1d19a:	0023      	movs	r3, r4
   1d19c:	002a      	movs	r2, r5
   1d19e:	0031      	movs	r1, r6
   1d1a0:	4650      	mov	r0, sl
   1d1a2:	4fda      	ldr	r7, [pc, #872]	; (1d50c <glcd_draw_circle+0x3b4>)
   1d1a4:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d1a6:	466b      	mov	r3, sp
   1d1a8:	7d1b      	ldrb	r3, [r3, #20]
   1d1aa:	b25b      	sxtb	r3, r3
   1d1ac:	2b00      	cmp	r3, #0
   1d1ae:	db05      	blt.n	1d1bc <glcd_draw_circle+0x64>
   1d1b0:	2c3f      	cmp	r4, #63	; 0x3f
   1d1b2:	d800      	bhi.n	1d1b6 <glcd_draw_circle+0x5e>
   1d1b4:	e281      	b.n	1d6ba <glcd_draw_circle+0x562>
   1d1b6:	2e3f      	cmp	r6, #63	; 0x3f
   1d1b8:	d800      	bhi.n	1d1bc <glcd_draw_circle+0x64>
   1d1ba:	e263      	b.n	1d684 <glcd_draw_circle+0x52c>
   1d1bc:	b26b      	sxtb	r3, r5
   1d1be:	2b00      	cmp	r3, #0
   1d1c0:	da00      	bge.n	1d1c4 <glcd_draw_circle+0x6c>
   1d1c2:	e238      	b.n	1d636 <glcd_draw_circle+0x4de>
   1d1c4:	9b06      	ldr	r3, [sp, #24]
   1d1c6:	2b3f      	cmp	r3, #63	; 0x3f
   1d1c8:	d800      	bhi.n	1d1cc <glcd_draw_circle+0x74>
   1d1ca:	e291      	b.n	1d6f0 <glcd_draw_circle+0x598>
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
   1d1cc:	9b03      	ldr	r3, [sp, #12]
   1d1ce:	2b00      	cmp	r3, #0
   1d1d0:	dc00      	bgt.n	1d1d4 <glcd_draw_circle+0x7c>
   1d1d2:	e229      	b.n	1d628 <glcd_draw_circle+0x4d0>
   1d1d4:	9b06      	ldr	r3, [sp, #24]
   1d1d6:	9a05      	ldr	r2, [sp, #20]
   1d1d8:	1e5d      	subs	r5, r3, #1
   1d1da:	1c5e      	adds	r6, r3, #1
   1d1dc:	0013      	movs	r3, r2
   1d1de:	3b01      	subs	r3, #1
   1d1e0:	b2db      	uxtb	r3, r3
   1d1e2:	9301      	str	r3, [sp, #4]
   1d1e4:	0013      	movs	r3, r2
   1d1e6:	3301      	adds	r3, #1
   1d1e8:	b2db      	uxtb	r3, r3
   1d1ea:	469a      	mov	sl, r3
   1d1ec:	2300      	movs	r3, #0
   1d1ee:	9304      	str	r3, [sp, #16]
   1d1f0:	4653      	mov	r3, sl
   1d1f2:	b2f6      	uxtb	r6, r6
   1d1f4:	b2ed      	uxtb	r5, r5
   1d1f6:	9600      	str	r6, [sp, #0]
   1d1f8:	9302      	str	r3, [sp, #8]
   1d1fa:	e044      	b.n	1d286 <glcd_draw_circle+0x12e>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d1fc:	2f3f      	cmp	r7, #63	; 0x3f
   1d1fe:	d800      	bhi.n	1d202 <glcd_draw_circle+0xaa>
   1d200:	e105      	b.n	1d40e <glcd_draw_circle+0x2b6>
   1d202:	466b      	mov	r3, sp
   1d204:	791b      	ldrb	r3, [r3, #4]
   1d206:	b25b      	sxtb	r3, r3
   1d208:	4699      	mov	r9, r3
   1d20a:	2b00      	cmp	r3, #0
   1d20c:	da00      	bge.n	1d210 <glcd_draw_circle+0xb8>
   1d20e:	e0c4      	b.n	1d39a <glcd_draw_circle+0x242>
   1d210:	2f3f      	cmp	r7, #63	; 0x3f
   1d212:	d964      	bls.n	1d2de <glcd_draw_circle+0x186>
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
		glcd_set_pixel(x0 - x, y0 + y, color);
		glcd_set_pixel(x0 + x, y0 - y, color);
   1d214:	9b06      	ldr	r3, [sp, #24]
   1d216:	1b1f      	subs	r7, r3, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d218:	4653      	mov	r3, sl
		glcd_set_pixel(x0 + x, y0 - y, color);
   1d21a:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d21c:	2b00      	cmp	r3, #0
   1d21e:	db7e      	blt.n	1d31e <glcd_draw_circle+0x1c6>
   1d220:	2f3f      	cmp	r7, #63	; 0x3f
   1d222:	d800      	bhi.n	1d226 <glcd_draw_circle+0xce>
   1d224:	e0bf      	b.n	1d3a6 <glcd_draw_circle+0x24e>
		glcd_set_pixel(x0 - x, y0 - y, color);
		
		glcd_set_pixel(x0 + y, y0 + x, color);
   1d226:	9b05      	ldr	r3, [sp, #20]
   1d228:	191f      	adds	r7, r3, r4
   1d22a:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d22c:	b27b      	sxtb	r3, r7
   1d22e:	4699      	mov	r9, r3
   1d230:	2b00      	cmp	r3, #0
   1d232:	da00      	bge.n	1d236 <glcd_draw_circle+0xde>
   1d234:	e0a8      	b.n	1d388 <glcd_draw_circle+0x230>
   1d236:	9b00      	ldr	r3, [sp, #0]
   1d238:	2b3f      	cmp	r3, #63	; 0x3f
   1d23a:	d800      	bhi.n	1d23e <glcd_draw_circle+0xe6>
   1d23c:	e121      	b.n	1d482 <glcd_draw_circle+0x32a>
		glcd_set_pixel(x0 - y, y0 + x, color);
   1d23e:	9b05      	ldr	r3, [sp, #20]
   1d240:	1b1c      	subs	r4, r3, r4
   1d242:	b2e4      	uxtb	r4, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d244:	b263      	sxtb	r3, r4
   1d246:	469a      	mov	sl, r3
   1d248:	2b00      	cmp	r3, #0
   1d24a:	db06      	blt.n	1d25a <glcd_draw_circle+0x102>
   1d24c:	9b00      	ldr	r3, [sp, #0]
   1d24e:	2b3f      	cmp	r3, #63	; 0x3f
   1d250:	d800      	bhi.n	1d254 <glcd_draw_circle+0xfc>
   1d252:	e130      	b.n	1d4b6 <glcd_draw_circle+0x35e>
   1d254:	464b      	mov	r3, r9
   1d256:	2b00      	cmp	r3, #0
   1d258:	db75      	blt.n	1d346 <glcd_draw_circle+0x1ee>
   1d25a:	2d3f      	cmp	r5, #63	; 0x3f
   1d25c:	d800      	bhi.n	1d260 <glcd_draw_circle+0x108>
   1d25e:	e0f0      	b.n	1d442 <glcd_draw_circle+0x2ea>
   1d260:	9e00      	ldr	r6, [sp, #0]
	while (x<y) {
   1d262:	9a04      	ldr	r2, [sp, #16]
   1d264:	3601      	adds	r6, #1
   1d266:	b2f3      	uxtb	r3, r6
   1d268:	9300      	str	r3, [sp, #0]
   1d26a:	9b01      	ldr	r3, [sp, #4]
   1d26c:	3d01      	subs	r5, #1
   1d26e:	3b01      	subs	r3, #1
   1d270:	b2db      	uxtb	r3, r3
   1d272:	9301      	str	r3, [sp, #4]
   1d274:	9b02      	ldr	r3, [sp, #8]
   1d276:	b2ed      	uxtb	r5, r5
   1d278:	3301      	adds	r3, #1
   1d27a:	b2db      	uxtb	r3, r3
   1d27c:	9302      	str	r3, [sp, #8]
   1d27e:	9b03      	ldr	r3, [sp, #12]
   1d280:	4293      	cmp	r3, r2
   1d282:	dc00      	bgt.n	1d286 <glcd_draw_circle+0x12e>
   1d284:	e1d0      	b.n	1d628 <glcd_draw_circle+0x4d0>
		if (f >= 0) {
   1d286:	465b      	mov	r3, fp
   1d288:	2b00      	cmp	r3, #0
   1d28a:	db0b      	blt.n	1d2a4 <glcd_draw_circle+0x14c>
			y--;
   1d28c:	9b03      	ldr	r3, [sp, #12]
   1d28e:	3b01      	subs	r3, #1
   1d290:	b25b      	sxtb	r3, r3
   1d292:	9303      	str	r3, [sp, #12]
			ddF_y += 2;
   1d294:	9b08      	ldr	r3, [sp, #32]
   1d296:	3302      	adds	r3, #2
   1d298:	b2db      	uxtb	r3, r3
   1d29a:	b25a      	sxtb	r2, r3
			f += ddF_y;
   1d29c:	445b      	add	r3, fp
   1d29e:	b25b      	sxtb	r3, r3
   1d2a0:	469b      	mov	fp, r3
			ddF_y += 2;
   1d2a2:	9208      	str	r2, [sp, #32]
   1d2a4:	9b04      	ldr	r3, [sp, #16]
   1d2a6:	3301      	adds	r3, #1
   1d2a8:	b2db      	uxtb	r3, r3
   1d2aa:	b25a      	sxtb	r2, r3
		f += ddF_x;
   1d2ac:	005b      	lsls	r3, r3, #1
   1d2ae:	3301      	adds	r3, #1
   1d2b0:	445b      	add	r3, fp
   1d2b2:	b25b      	sxtb	r3, r3
   1d2b4:	469b      	mov	fp, r3
		glcd_set_pixel(x0 + x, y0 + y, color);
   1d2b6:	466b      	mov	r3, sp
   1d2b8:	7b1c      	ldrb	r4, [r3, #12]
   1d2ba:	9b06      	ldr	r3, [sp, #24]
   1d2bc:	9204      	str	r2, [sp, #16]
   1d2be:	191f      	adds	r7, r3, r4
   1d2c0:	466b      	mov	r3, sp
   1d2c2:	7a1b      	ldrb	r3, [r3, #8]
   1d2c4:	b2ff      	uxtb	r7, r7
   1d2c6:	b25b      	sxtb	r3, r3
   1d2c8:	469a      	mov	sl, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d2ca:	2b00      	cmp	r3, #0
   1d2cc:	da96      	bge.n	1d1fc <glcd_draw_circle+0xa4>
   1d2ce:	466b      	mov	r3, sp
   1d2d0:	791b      	ldrb	r3, [r3, #4]
   1d2d2:	b25b      	sxtb	r3, r3
   1d2d4:	4699      	mov	r9, r3
   1d2d6:	2b00      	cmp	r3, #0
   1d2d8:	dba5      	blt.n	1d226 <glcd_draw_circle+0xce>
   1d2da:	2f3f      	cmp	r7, #63	; 0x3f
   1d2dc:	d89a      	bhi.n	1d214 <glcd_draw_circle+0xbc>
	if (color) {
   1d2de:	9b07      	ldr	r3, [sp, #28]
   1d2e0:	2b00      	cmp	r3, #0
   1d2e2:	d100      	bne.n	1d2e6 <glcd_draw_circle+0x18e>
   1d2e4:	e17e      	b.n	1d5e4 <glcd_draw_circle+0x48c>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d2e6:	9a01      	ldr	r2, [sp, #4]
   1d2e8:	2107      	movs	r1, #7
   1d2ea:	4694      	mov	ip, r2
   1d2ec:	4a88      	ldr	r2, [pc, #544]	; (1d510 <glcd_draw_circle+0x3b8>)
   1d2ee:	4039      	ands	r1, r7
   1d2f0:	4690      	mov	r8, r2
   1d2f2:	2201      	movs	r2, #1
   1d2f4:	408a      	lsls	r2, r1
   1d2f6:	4641      	mov	r1, r8
   1d2f8:	08fb      	lsrs	r3, r7, #3
   1d2fa:	01db      	lsls	r3, r3, #7
   1d2fc:	4463      	add	r3, ip
   1d2fe:	5cc9      	ldrb	r1, [r1, r3]
   1d300:	430a      	orrs	r2, r1
   1d302:	4641      	mov	r1, r8
   1d304:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   1d306:	9801      	ldr	r0, [sp, #4]
   1d308:	003b      	movs	r3, r7
   1d30a:	0039      	movs	r1, r7
   1d30c:	0002      	movs	r2, r0
   1d30e:	4e7f      	ldr	r6, [pc, #508]	; (1d50c <glcd_draw_circle+0x3b4>)
   1d310:	47b0      	blx	r6
		glcd_set_pixel(x0 + x, y0 - y, color);
   1d312:	9b06      	ldr	r3, [sp, #24]
   1d314:	1b1f      	subs	r7, r3, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d316:	4653      	mov	r3, sl
		glcd_set_pixel(x0 + x, y0 - y, color);
   1d318:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d31a:	2b00      	cmp	r3, #0
   1d31c:	da80      	bge.n	1d220 <glcd_draw_circle+0xc8>
   1d31e:	2f3f      	cmp	r7, #63	; 0x3f
   1d320:	d881      	bhi.n	1d226 <glcd_draw_circle+0xce>
   1d322:	08fb      	lsrs	r3, r7, #3
   1d324:	01db      	lsls	r3, r3, #7
   1d326:	2207      	movs	r2, #7
   1d328:	9309      	str	r3, [sp, #36]	; 0x24
   1d32a:	2301      	movs	r3, #1
   1d32c:	403a      	ands	r2, r7
   1d32e:	4093      	lsls	r3, r2
   1d330:	b25b      	sxtb	r3, r3
   1d332:	469a      	mov	sl, r3
   1d334:	4b76      	ldr	r3, [pc, #472]	; (1d510 <glcd_draw_circle+0x3b8>)
   1d336:	4698      	mov	r8, r3
	if (color) {
   1d338:	9b07      	ldr	r3, [sp, #28]
   1d33a:	2b00      	cmp	r3, #0
   1d33c:	d154      	bne.n	1d3e8 <glcd_draw_circle+0x290>
   1d33e:	4653      	mov	r3, sl
   1d340:	43db      	mvns	r3, r3
   1d342:	469a      	mov	sl, r3
   1d344:	e107      	b.n	1d556 <glcd_draw_circle+0x3fe>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d346:	2d3f      	cmp	r5, #63	; 0x3f
   1d348:	d88a      	bhi.n	1d260 <glcd_draw_circle+0x108>
   1d34a:	08eb      	lsrs	r3, r5, #3
   1d34c:	01db      	lsls	r3, r3, #7
   1d34e:	2207      	movs	r2, #7
   1d350:	9309      	str	r3, [sp, #36]	; 0x24
   1d352:	2301      	movs	r3, #1
   1d354:	402a      	ands	r2, r5
   1d356:	4093      	lsls	r3, r2
   1d358:	b25b      	sxtb	r3, r3
   1d35a:	4699      	mov	r9, r3
	if (color) {
   1d35c:	9b07      	ldr	r3, [sp, #28]
   1d35e:	2b00      	cmp	r3, #0
   1d360:	d100      	bne.n	1d364 <glcd_draw_circle+0x20c>
   1d362:	e22f      	b.n	1d7c4 <glcd_draw_circle+0x66c>
   1d364:	4b6a      	ldr	r3, [pc, #424]	; (1d510 <glcd_draw_circle+0x3b8>)
   1d366:	4698      	mov	r8, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d368:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d36a:	4649      	mov	r1, r9
   1d36c:	18e2      	adds	r2, r4, r3
   1d36e:	4643      	mov	r3, r8
   1d370:	5c9b      	ldrb	r3, [r3, r2]
   1d372:	4319      	orrs	r1, r3
   1d374:	000b      	movs	r3, r1
   1d376:	4641      	mov	r1, r8
   1d378:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d37a:	0022      	movs	r2, r4
   1d37c:	0020      	movs	r0, r4
   1d37e:	002b      	movs	r3, r5
   1d380:	0029      	movs	r1, r5
   1d382:	4c62      	ldr	r4, [pc, #392]	; (1d50c <glcd_draw_circle+0x3b4>)
   1d384:	47a0      	blx	r4
   1d386:	e76b      	b.n	1d260 <glcd_draw_circle+0x108>
		glcd_set_pixel(x0 - y, y0 + x, color);
   1d388:	9b05      	ldr	r3, [sp, #20]
   1d38a:	1b1c      	subs	r4, r3, r4
   1d38c:	b2e4      	uxtb	r4, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d38e:	b263      	sxtb	r3, r4
   1d390:	469a      	mov	sl, r3
   1d392:	2b00      	cmp	r3, #0
   1d394:	da00      	bge.n	1d398 <glcd_draw_circle+0x240>
   1d396:	e763      	b.n	1d260 <glcd_draw_circle+0x108>
   1d398:	e758      	b.n	1d24c <glcd_draw_circle+0xf4>
		glcd_set_pixel(x0 + x, y0 - y, color);
   1d39a:	9b06      	ldr	r3, [sp, #24]
   1d39c:	1b1f      	subs	r7, r3, r4
   1d39e:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d3a0:	2f3f      	cmp	r7, #63	; 0x3f
   1d3a2:	d900      	bls.n	1d3a6 <glcd_draw_circle+0x24e>
   1d3a4:	e73f      	b.n	1d226 <glcd_draw_circle+0xce>
	if (color) {
   1d3a6:	9b07      	ldr	r3, [sp, #28]
   1d3a8:	2b00      	cmp	r3, #0
   1d3aa:	d100      	bne.n	1d3ae <glcd_draw_circle+0x256>
   1d3ac:	e0b2      	b.n	1d514 <glcd_draw_circle+0x3bc>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d3ae:	08fb      	lsrs	r3, r7, #3
   1d3b0:	01db      	lsls	r3, r3, #7
   1d3b2:	2107      	movs	r1, #7
   1d3b4:	469c      	mov	ip, r3
   1d3b6:	9309      	str	r3, [sp, #36]	; 0x24
   1d3b8:	2301      	movs	r3, #1
   1d3ba:	4039      	ands	r1, r7
   1d3bc:	408b      	lsls	r3, r1
   1d3be:	b25b      	sxtb	r3, r3
   1d3c0:	469a      	mov	sl, r3
   1d3c2:	9802      	ldr	r0, [sp, #8]
   1d3c4:	4b52      	ldr	r3, [pc, #328]	; (1d510 <glcd_draw_circle+0x3b8>)
   1d3c6:	0002      	movs	r2, r0
   1d3c8:	4698      	mov	r8, r3
   1d3ca:	4651      	mov	r1, sl
   1d3cc:	4462      	add	r2, ip
   1d3ce:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1d3d0:	4e4e      	ldr	r6, [pc, #312]	; (1d50c <glcd_draw_circle+0x3b4>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d3d2:	430b      	orrs	r3, r1
   1d3d4:	4641      	mov	r1, r8
   1d3d6:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d3d8:	003b      	movs	r3, r7
   1d3da:	0002      	movs	r2, r0
   1d3dc:	0039      	movs	r1, r7
   1d3de:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d3e0:	464b      	mov	r3, r9
   1d3e2:	2b00      	cmp	r3, #0
   1d3e4:	da00      	bge.n	1d3e8 <glcd_draw_circle+0x290>
   1d3e6:	e71e      	b.n	1d226 <glcd_draw_circle+0xce>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d3e8:	9901      	ldr	r1, [sp, #4]
   1d3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d3ec:	468c      	mov	ip, r1
   1d3ee:	4463      	add	r3, ip
   1d3f0:	001a      	movs	r2, r3
   1d3f2:	4643      	mov	r3, r8
   1d3f4:	4651      	mov	r1, sl
   1d3f6:	5c9b      	ldrb	r3, [r3, r2]
   1d3f8:	4319      	orrs	r1, r3
   1d3fa:	000b      	movs	r3, r1
   1d3fc:	4641      	mov	r1, r8
   1d3fe:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d400:	9801      	ldr	r0, [sp, #4]
   1d402:	003b      	movs	r3, r7
   1d404:	0002      	movs	r2, r0
   1d406:	0039      	movs	r1, r7
   1d408:	4e40      	ldr	r6, [pc, #256]	; (1d50c <glcd_draw_circle+0x3b4>)
   1d40a:	47b0      	blx	r6
   1d40c:	e70b      	b.n	1d226 <glcd_draw_circle+0xce>
	if (color) {
   1d40e:	9b07      	ldr	r3, [sp, #28]
   1d410:	2b00      	cmp	r3, #0
   1d412:	d069      	beq.n	1d4e8 <glcd_draw_circle+0x390>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d414:	9a02      	ldr	r2, [sp, #8]
   1d416:	2107      	movs	r1, #7
   1d418:	4694      	mov	ip, r2
   1d41a:	4a3d      	ldr	r2, [pc, #244]	; (1d510 <glcd_draw_circle+0x3b8>)
   1d41c:	4039      	ands	r1, r7
   1d41e:	4690      	mov	r8, r2
   1d420:	2201      	movs	r2, #1
   1d422:	408a      	lsls	r2, r1
   1d424:	4641      	mov	r1, r8
   1d426:	08fb      	lsrs	r3, r7, #3
   1d428:	01db      	lsls	r3, r3, #7
   1d42a:	4463      	add	r3, ip
   1d42c:	5cc9      	ldrb	r1, [r1, r3]
   1d42e:	430a      	orrs	r2, r1
   1d430:	4641      	mov	r1, r8
   1d432:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   1d434:	9802      	ldr	r0, [sp, #8]
   1d436:	003b      	movs	r3, r7
   1d438:	0002      	movs	r2, r0
   1d43a:	0039      	movs	r1, r7
   1d43c:	4e33      	ldr	r6, [pc, #204]	; (1d50c <glcd_draw_circle+0x3b4>)
   1d43e:	47b0      	blx	r6
   1d440:	e6df      	b.n	1d202 <glcd_draw_circle+0xaa>
	if (color) {
   1d442:	9b07      	ldr	r3, [sp, #28]
   1d444:	2b00      	cmp	r3, #0
   1d446:	d100      	bne.n	1d44a <glcd_draw_circle+0x2f2>
   1d448:	e0a3      	b.n	1d592 <glcd_draw_circle+0x43a>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d44a:	08eb      	lsrs	r3, r5, #3
   1d44c:	01db      	lsls	r3, r3, #7
   1d44e:	2107      	movs	r1, #7
   1d450:	18fa      	adds	r2, r7, r3
   1d452:	9309      	str	r3, [sp, #36]	; 0x24
   1d454:	2301      	movs	r3, #1
   1d456:	4029      	ands	r1, r5
   1d458:	408b      	lsls	r3, r1
   1d45a:	b25b      	sxtb	r3, r3
   1d45c:	4699      	mov	r9, r3
   1d45e:	4b2c      	ldr	r3, [pc, #176]	; (1d510 <glcd_draw_circle+0x3b8>)
   1d460:	4649      	mov	r1, r9
   1d462:	4698      	mov	r8, r3
   1d464:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1d466:	0038      	movs	r0, r7
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d468:	430b      	orrs	r3, r1
   1d46a:	4641      	mov	r1, r8
	glcd_update_bbox(x,y,x,y);
   1d46c:	4e27      	ldr	r6, [pc, #156]	; (1d50c <glcd_draw_circle+0x3b4>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d46e:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d470:	002b      	movs	r3, r5
   1d472:	003a      	movs	r2, r7
   1d474:	0029      	movs	r1, r5
   1d476:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d478:	4653      	mov	r3, sl
   1d47a:	2b00      	cmp	r3, #0
   1d47c:	db00      	blt.n	1d480 <glcd_draw_circle+0x328>
   1d47e:	e773      	b.n	1d368 <glcd_draw_circle+0x210>
   1d480:	e6ee      	b.n	1d260 <glcd_draw_circle+0x108>
	if (color) {
   1d482:	9b07      	ldr	r3, [sp, #28]
   1d484:	2b00      	cmp	r3, #0
   1d486:	d100      	bne.n	1d48a <glcd_draw_circle+0x332>
   1d488:	e0bd      	b.n	1d606 <glcd_draw_circle+0x4ae>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d48a:	4a21      	ldr	r2, [pc, #132]	; (1d510 <glcd_draw_circle+0x3b8>)
   1d48c:	2107      	movs	r1, #7
   1d48e:	4690      	mov	r8, r2
   1d490:	2201      	movs	r2, #1
   1d492:	9800      	ldr	r0, [sp, #0]
   1d494:	4001      	ands	r1, r0
   1d496:	408a      	lsls	r2, r1
   1d498:	4641      	mov	r1, r8
   1d49a:	08c3      	lsrs	r3, r0, #3
   1d49c:	01db      	lsls	r3, r3, #7
   1d49e:	19db      	adds	r3, r3, r7
   1d4a0:	5cc9      	ldrb	r1, [r1, r3]
   1d4a2:	430a      	orrs	r2, r1
   1d4a4:	4641      	mov	r1, r8
   1d4a6:	54ca      	strb	r2, [r1, r3]
   1d4a8:	0001      	movs	r1, r0
	glcd_update_bbox(x,y,x,y);
   1d4aa:	000b      	movs	r3, r1
   1d4ac:	003a      	movs	r2, r7
   1d4ae:	0038      	movs	r0, r7
   1d4b0:	4e16      	ldr	r6, [pc, #88]	; (1d50c <glcd_draw_circle+0x3b4>)
   1d4b2:	47b0      	blx	r6
   1d4b4:	e6c3      	b.n	1d23e <glcd_draw_circle+0xe6>
	if (color) {
   1d4b6:	9b07      	ldr	r3, [sp, #28]
   1d4b8:	2b00      	cmp	r3, #0
   1d4ba:	d059      	beq.n	1d570 <glcd_draw_circle+0x418>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d4bc:	4a14      	ldr	r2, [pc, #80]	; (1d510 <glcd_draw_circle+0x3b8>)
   1d4be:	2107      	movs	r1, #7
   1d4c0:	4690      	mov	r8, r2
   1d4c2:	2201      	movs	r2, #1
   1d4c4:	9800      	ldr	r0, [sp, #0]
   1d4c6:	4001      	ands	r1, r0
   1d4c8:	408a      	lsls	r2, r1
   1d4ca:	4641      	mov	r1, r8
   1d4cc:	08c3      	lsrs	r3, r0, #3
   1d4ce:	01db      	lsls	r3, r3, #7
   1d4d0:	191b      	adds	r3, r3, r4
   1d4d2:	5cc9      	ldrb	r1, [r1, r3]
   1d4d4:	430a      	orrs	r2, r1
   1d4d6:	4641      	mov	r1, r8
   1d4d8:	54ca      	strb	r2, [r1, r3]
   1d4da:	0001      	movs	r1, r0
	glcd_update_bbox(x,y,x,y);
   1d4dc:	000b      	movs	r3, r1
   1d4de:	0022      	movs	r2, r4
   1d4e0:	0020      	movs	r0, r4
   1d4e2:	4e0a      	ldr	r6, [pc, #40]	; (1d50c <glcd_draw_circle+0x3b4>)
   1d4e4:	47b0      	blx	r6
   1d4e6:	e6b5      	b.n	1d254 <glcd_draw_circle+0xfc>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d4e8:	9a02      	ldr	r2, [sp, #8]
   1d4ea:	2101      	movs	r1, #1
   1d4ec:	4694      	mov	ip, r2
   1d4ee:	4a08      	ldr	r2, [pc, #32]	; (1d510 <glcd_draw_circle+0x3b8>)
   1d4f0:	08fb      	lsrs	r3, r7, #3
   1d4f2:	4690      	mov	r8, r2
   1d4f4:	2207      	movs	r2, #7
   1d4f6:	403a      	ands	r2, r7
   1d4f8:	4091      	lsls	r1, r2
   1d4fa:	4642      	mov	r2, r8
   1d4fc:	01db      	lsls	r3, r3, #7
   1d4fe:	4463      	add	r3, ip
   1d500:	5cd2      	ldrb	r2, [r2, r3]
   1d502:	438a      	bics	r2, r1
   1d504:	4641      	mov	r1, r8
   1d506:	54ca      	strb	r2, [r1, r3]
   1d508:	e794      	b.n	1d434 <glcd_draw_circle+0x2dc>
   1d50a:	46c0      	nop			; (mov r8, r8)
   1d50c:	0001c9d9 	.word	0x0001c9d9
   1d510:	2000171c 	.word	0x2000171c
   1d514:	08fb      	lsrs	r3, r7, #3
   1d516:	01db      	lsls	r3, r3, #7
   1d518:	2107      	movs	r1, #7
   1d51a:	469c      	mov	ip, r3
   1d51c:	9309      	str	r3, [sp, #36]	; 0x24
   1d51e:	2301      	movs	r3, #1
   1d520:	4039      	ands	r1, r7
   1d522:	408b      	lsls	r3, r1
   1d524:	b25b      	sxtb	r3, r3
   1d526:	469a      	mov	sl, r3
   1d528:	4ba9      	ldr	r3, [pc, #676]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d52a:	9802      	ldr	r0, [sp, #8]
   1d52c:	4698      	mov	r8, r3
   1d52e:	4653      	mov	r3, sl
   1d530:	43db      	mvns	r3, r3
   1d532:	469a      	mov	sl, r3
   1d534:	0002      	movs	r2, r0
   1d536:	4643      	mov	r3, r8
   1d538:	4651      	mov	r1, sl
   1d53a:	4462      	add	r2, ip
   1d53c:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1d53e:	4ea5      	ldr	r6, [pc, #660]	; (1d7d4 <glcd_draw_circle+0x67c>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d540:	400b      	ands	r3, r1
   1d542:	4641      	mov	r1, r8
   1d544:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d546:	003b      	movs	r3, r7
   1d548:	0002      	movs	r2, r0
   1d54a:	0039      	movs	r1, r7
   1d54c:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d54e:	464b      	mov	r3, r9
   1d550:	2b00      	cmp	r3, #0
   1d552:	da00      	bge.n	1d556 <glcd_draw_circle+0x3fe>
   1d554:	e667      	b.n	1d226 <glcd_draw_circle+0xce>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d556:	9901      	ldr	r1, [sp, #4]
   1d558:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d55a:	468c      	mov	ip, r1
   1d55c:	4463      	add	r3, ip
   1d55e:	001a      	movs	r2, r3
   1d560:	4643      	mov	r3, r8
   1d562:	4651      	mov	r1, sl
   1d564:	5c9b      	ldrb	r3, [r3, r2]
   1d566:	4019      	ands	r1, r3
   1d568:	000b      	movs	r3, r1
   1d56a:	4641      	mov	r1, r8
   1d56c:	548b      	strb	r3, [r1, r2]
   1d56e:	e747      	b.n	1d400 <glcd_draw_circle+0x2a8>
   1d570:	4a97      	ldr	r2, [pc, #604]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d572:	9900      	ldr	r1, [sp, #0]
   1d574:	4690      	mov	r8, r2
   1d576:	2207      	movs	r2, #7
   1d578:	08cb      	lsrs	r3, r1, #3
   1d57a:	400a      	ands	r2, r1
   1d57c:	2101      	movs	r1, #1
   1d57e:	4091      	lsls	r1, r2
   1d580:	4642      	mov	r2, r8
   1d582:	01db      	lsls	r3, r3, #7
   1d584:	191b      	adds	r3, r3, r4
   1d586:	5cd2      	ldrb	r2, [r2, r3]
   1d588:	438a      	bics	r2, r1
   1d58a:	4641      	mov	r1, r8
   1d58c:	54ca      	strb	r2, [r1, r3]
   1d58e:	9900      	ldr	r1, [sp, #0]
   1d590:	e7a4      	b.n	1d4dc <glcd_draw_circle+0x384>
   1d592:	08eb      	lsrs	r3, r5, #3
   1d594:	01db      	lsls	r3, r3, #7
   1d596:	2107      	movs	r1, #7
   1d598:	18fa      	adds	r2, r7, r3
   1d59a:	9309      	str	r3, [sp, #36]	; 0x24
   1d59c:	2301      	movs	r3, #1
   1d59e:	4029      	ands	r1, r5
   1d5a0:	408b      	lsls	r3, r1
   1d5a2:	b25b      	sxtb	r3, r3
   1d5a4:	4699      	mov	r9, r3
   1d5a6:	4b8a      	ldr	r3, [pc, #552]	; (1d7d0 <glcd_draw_circle+0x678>)
	glcd_update_bbox(x,y,x,y);
   1d5a8:	0038      	movs	r0, r7
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d5aa:	4698      	mov	r8, r3
   1d5ac:	464b      	mov	r3, r9
   1d5ae:	43db      	mvns	r3, r3
   1d5b0:	4699      	mov	r9, r3
   1d5b2:	4643      	mov	r3, r8
   1d5b4:	4649      	mov	r1, r9
   1d5b6:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1d5b8:	4e86      	ldr	r6, [pc, #536]	; (1d7d4 <glcd_draw_circle+0x67c>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d5ba:	400b      	ands	r3, r1
   1d5bc:	4641      	mov	r1, r8
   1d5be:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1d5c0:	002b      	movs	r3, r5
   1d5c2:	003a      	movs	r2, r7
   1d5c4:	0029      	movs	r1, r5
   1d5c6:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d5c8:	4653      	mov	r3, sl
   1d5ca:	2b00      	cmp	r3, #0
   1d5cc:	da00      	bge.n	1d5d0 <glcd_draw_circle+0x478>
   1d5ce:	e647      	b.n	1d260 <glcd_draw_circle+0x108>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d5d2:	4649      	mov	r1, r9
   1d5d4:	18e2      	adds	r2, r4, r3
   1d5d6:	4643      	mov	r3, r8
   1d5d8:	5c9b      	ldrb	r3, [r3, r2]
   1d5da:	4019      	ands	r1, r3
   1d5dc:	000b      	movs	r3, r1
   1d5de:	4641      	mov	r1, r8
   1d5e0:	548b      	strb	r3, [r1, r2]
   1d5e2:	e6ca      	b.n	1d37a <glcd_draw_circle+0x222>
   1d5e4:	9a01      	ldr	r2, [sp, #4]
   1d5e6:	2101      	movs	r1, #1
   1d5e8:	4694      	mov	ip, r2
   1d5ea:	4a79      	ldr	r2, [pc, #484]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d5ec:	08fb      	lsrs	r3, r7, #3
   1d5ee:	4690      	mov	r8, r2
   1d5f0:	2207      	movs	r2, #7
   1d5f2:	403a      	ands	r2, r7
   1d5f4:	4091      	lsls	r1, r2
   1d5f6:	4642      	mov	r2, r8
   1d5f8:	01db      	lsls	r3, r3, #7
   1d5fa:	4463      	add	r3, ip
   1d5fc:	5cd2      	ldrb	r2, [r2, r3]
   1d5fe:	438a      	bics	r2, r1
   1d600:	4641      	mov	r1, r8
   1d602:	54ca      	strb	r2, [r1, r3]
   1d604:	e67f      	b.n	1d306 <glcd_draw_circle+0x1ae>
   1d606:	4a72      	ldr	r2, [pc, #456]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d608:	9900      	ldr	r1, [sp, #0]
   1d60a:	4690      	mov	r8, r2
   1d60c:	2207      	movs	r2, #7
   1d60e:	08cb      	lsrs	r3, r1, #3
   1d610:	400a      	ands	r2, r1
   1d612:	2101      	movs	r1, #1
   1d614:	4091      	lsls	r1, r2
   1d616:	4642      	mov	r2, r8
   1d618:	01db      	lsls	r3, r3, #7
   1d61a:	19db      	adds	r3, r3, r7
   1d61c:	5cd2      	ldrb	r2, [r2, r3]
   1d61e:	438a      	bics	r2, r1
   1d620:	4641      	mov	r1, r8
   1d622:	54ca      	strb	r2, [r1, r3]
   1d624:	9900      	ldr	r1, [sp, #0]
   1d626:	e740      	b.n	1d4aa <glcd_draw_circle+0x352>
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
   1d628:	b00b      	add	sp, #44	; 0x2c
   1d62a:	bc3c      	pop	{r2, r3, r4, r5}
   1d62c:	4690      	mov	r8, r2
   1d62e:	4699      	mov	r9, r3
   1d630:	46a2      	mov	sl, r4
   1d632:	46ab      	mov	fp, r5
   1d634:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d636:	4653      	mov	r3, sl
   1d638:	466a      	mov	r2, sp
   1d63a:	7013      	strb	r3, [r2, #0]
   1d63c:	7813      	ldrb	r3, [r2, #0]
   1d63e:	b25b      	sxtb	r3, r3
   1d640:	2b00      	cmp	r3, #0
   1d642:	da00      	bge.n	1d646 <glcd_draw_circle+0x4ee>
   1d644:	e5c2      	b.n	1d1cc <glcd_draw_circle+0x74>
   1d646:	9b06      	ldr	r3, [sp, #24]
   1d648:	2b3f      	cmp	r3, #63	; 0x3f
   1d64a:	d900      	bls.n	1d64e <glcd_draw_circle+0x4f6>
   1d64c:	e5be      	b.n	1d1cc <glcd_draw_circle+0x74>
   1d64e:	001a      	movs	r2, r3
   1d650:	08de      	lsrs	r6, r3, #3
   1d652:	2307      	movs	r3, #7
   1d654:	2401      	movs	r4, #1
   1d656:	4013      	ands	r3, r2
   1d658:	409c      	lsls	r4, r3
	if (color) {
   1d65a:	9b07      	ldr	r3, [sp, #28]
   1d65c:	01f6      	lsls	r6, r6, #7
   1d65e:	b264      	sxtb	r4, r4
   1d660:	2b00      	cmp	r3, #0
   1d662:	d100      	bne.n	1d666 <glcd_draw_circle+0x50e>
   1d664:	e0aa      	b.n	1d7bc <glcd_draw_circle+0x664>
   1d666:	4b5a      	ldr	r3, [pc, #360]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d668:	4698      	mov	r8, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d66a:	4643      	mov	r3, r8
   1d66c:	4456      	add	r6, sl
   1d66e:	5d9b      	ldrb	r3, [r3, r6]
   1d670:	431c      	orrs	r4, r3
   1d672:	4643      	mov	r3, r8
   1d674:	559c      	strb	r4, [r3, r6]
	glcd_update_bbox(x,y,x,y);
   1d676:	9906      	ldr	r1, [sp, #24]
   1d678:	4652      	mov	r2, sl
   1d67a:	000b      	movs	r3, r1
   1d67c:	4650      	mov	r0, sl
   1d67e:	4c55      	ldr	r4, [pc, #340]	; (1d7d4 <glcd_draw_circle+0x67c>)
   1d680:	47a0      	blx	r4
   1d682:	e5a3      	b.n	1d1cc <glcd_draw_circle+0x74>
	if (color) {
   1d684:	9b07      	ldr	r3, [sp, #28]
   1d686:	2b00      	cmp	r3, #0
   1d688:	d000      	beq.n	1d68c <glcd_draw_circle+0x534>
   1d68a:	e086      	b.n	1d79a <glcd_draw_circle+0x642>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d68c:	9a05      	ldr	r2, [sp, #20]
   1d68e:	2101      	movs	r1, #1
   1d690:	4694      	mov	ip, r2
   1d692:	4a4f      	ldr	r2, [pc, #316]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d694:	08f3      	lsrs	r3, r6, #3
   1d696:	4690      	mov	r8, r2
   1d698:	2207      	movs	r2, #7
   1d69a:	4032      	ands	r2, r6
   1d69c:	4091      	lsls	r1, r2
   1d69e:	4642      	mov	r2, r8
   1d6a0:	01db      	lsls	r3, r3, #7
   1d6a2:	4463      	add	r3, ip
   1d6a4:	5cd2      	ldrb	r2, [r2, r3]
   1d6a6:	438a      	bics	r2, r1
   1d6a8:	4641      	mov	r1, r8
   1d6aa:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   1d6ac:	9805      	ldr	r0, [sp, #20]
   1d6ae:	0033      	movs	r3, r6
   1d6b0:	0002      	movs	r2, r0
   1d6b2:	0031      	movs	r1, r6
   1d6b4:	4c47      	ldr	r4, [pc, #284]	; (1d7d4 <glcd_draw_circle+0x67c>)
   1d6b6:	47a0      	blx	r4
   1d6b8:	e580      	b.n	1d1bc <glcd_draw_circle+0x64>
	if (color) {
   1d6ba:	9b07      	ldr	r3, [sp, #28]
   1d6bc:	2b00      	cmp	r3, #0
   1d6be:	d15a      	bne.n	1d776 <glcd_draw_circle+0x61e>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d6c0:	9b05      	ldr	r3, [sp, #20]
   1d6c2:	4649      	mov	r1, r9
   1d6c4:	469c      	mov	ip, r3
   1d6c6:	4b42      	ldr	r3, [pc, #264]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d6c8:	08e2      	lsrs	r2, r4, #3
   1d6ca:	4698      	mov	r8, r3
   1d6cc:	2307      	movs	r3, #7
   1d6ce:	4023      	ands	r3, r4
   1d6d0:	4099      	lsls	r1, r3
   1d6d2:	000b      	movs	r3, r1
   1d6d4:	4641      	mov	r1, r8
   1d6d6:	01d2      	lsls	r2, r2, #7
   1d6d8:	4462      	add	r2, ip
   1d6da:	5c89      	ldrb	r1, [r1, r2]
   1d6dc:	4399      	bics	r1, r3
   1d6de:	4643      	mov	r3, r8
   1d6e0:	5499      	strb	r1, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1d6e2:	9805      	ldr	r0, [sp, #20]
   1d6e4:	0023      	movs	r3, r4
   1d6e6:	0021      	movs	r1, r4
   1d6e8:	0002      	movs	r2, r0
   1d6ea:	4c3a      	ldr	r4, [pc, #232]	; (1d7d4 <glcd_draw_circle+0x67c>)
   1d6ec:	47a0      	blx	r4
   1d6ee:	e562      	b.n	1d1b6 <glcd_draw_circle+0x5e>
	if (color) {
   1d6f0:	9b07      	ldr	r3, [sp, #28]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d6f2:	9906      	ldr	r1, [sp, #24]
	if (color) {
   1d6f4:	2b00      	cmp	r3, #0
   1d6f6:	d122      	bne.n	1d73e <glcd_draw_circle+0x5e6>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d6f8:	2307      	movs	r3, #7
   1d6fa:	2401      	movs	r4, #1
   1d6fc:	400b      	ands	r3, r1
   1d6fe:	409c      	lsls	r4, r3
   1d700:	4b33      	ldr	r3, [pc, #204]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d702:	b264      	sxtb	r4, r4
   1d704:	4698      	mov	r8, r3
   1d706:	43e4      	mvns	r4, r4
   1d708:	4640      	mov	r0, r8
   1d70a:	08ce      	lsrs	r6, r1, #3
   1d70c:	01f6      	lsls	r6, r6, #7
   1d70e:	19aa      	adds	r2, r5, r6
   1d710:	5c9b      	ldrb	r3, [r3, r2]
   1d712:	4023      	ands	r3, r4
   1d714:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   1d716:	002a      	movs	r2, r5
   1d718:	000b      	movs	r3, r1
   1d71a:	0028      	movs	r0, r5
   1d71c:	4d2d      	ldr	r5, [pc, #180]	; (1d7d4 <glcd_draw_circle+0x67c>)
   1d71e:	47a8      	blx	r5
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d720:	4653      	mov	r3, sl
   1d722:	466a      	mov	r2, sp
   1d724:	7013      	strb	r3, [r2, #0]
   1d726:	7813      	ldrb	r3, [r2, #0]
   1d728:	b25b      	sxtb	r3, r3
   1d72a:	2b00      	cmp	r3, #0
   1d72c:	da00      	bge.n	1d730 <glcd_draw_circle+0x5d8>
   1d72e:	e54d      	b.n	1d1cc <glcd_draw_circle+0x74>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d730:	4643      	mov	r3, r8
   1d732:	4456      	add	r6, sl
   1d734:	5d9b      	ldrb	r3, [r3, r6]
   1d736:	401c      	ands	r4, r3
   1d738:	4643      	mov	r3, r8
   1d73a:	559c      	strb	r4, [r3, r6]
   1d73c:	e79b      	b.n	1d676 <glcd_draw_circle+0x51e>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d73e:	2307      	movs	r3, #7
   1d740:	2401      	movs	r4, #1
   1d742:	400b      	ands	r3, r1
   1d744:	409c      	lsls	r4, r3
   1d746:	4b22      	ldr	r3, [pc, #136]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d748:	08ce      	lsrs	r6, r1, #3
   1d74a:	4698      	mov	r8, r3
   1d74c:	4640      	mov	r0, r8
   1d74e:	01f6      	lsls	r6, r6, #7
   1d750:	19aa      	adds	r2, r5, r6
   1d752:	5c9b      	ldrb	r3, [r3, r2]
   1d754:	b264      	sxtb	r4, r4
   1d756:	4323      	orrs	r3, r4
   1d758:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   1d75a:	002a      	movs	r2, r5
   1d75c:	000b      	movs	r3, r1
   1d75e:	0028      	movs	r0, r5
   1d760:	4d1c      	ldr	r5, [pc, #112]	; (1d7d4 <glcd_draw_circle+0x67c>)
   1d762:	47a8      	blx	r5
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d764:	4653      	mov	r3, sl
   1d766:	466a      	mov	r2, sp
   1d768:	7013      	strb	r3, [r2, #0]
   1d76a:	7813      	ldrb	r3, [r2, #0]
   1d76c:	b25b      	sxtb	r3, r3
   1d76e:	2b00      	cmp	r3, #0
   1d770:	da00      	bge.n	1d774 <glcd_draw_circle+0x61c>
   1d772:	e52b      	b.n	1d1cc <glcd_draw_circle+0x74>
   1d774:	e779      	b.n	1d66a <glcd_draw_circle+0x512>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d776:	9a05      	ldr	r2, [sp, #20]
   1d778:	4649      	mov	r1, r9
   1d77a:	4694      	mov	ip, r2
   1d77c:	4a14      	ldr	r2, [pc, #80]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d77e:	08e3      	lsrs	r3, r4, #3
   1d780:	4690      	mov	r8, r2
   1d782:	2207      	movs	r2, #7
   1d784:	4022      	ands	r2, r4
   1d786:	4091      	lsls	r1, r2
   1d788:	000a      	movs	r2, r1
   1d78a:	4641      	mov	r1, r8
   1d78c:	01db      	lsls	r3, r3, #7
   1d78e:	4463      	add	r3, ip
   1d790:	5cc9      	ldrb	r1, [r1, r3]
   1d792:	430a      	orrs	r2, r1
   1d794:	4641      	mov	r1, r8
   1d796:	54ca      	strb	r2, [r1, r3]
   1d798:	e7a3      	b.n	1d6e2 <glcd_draw_circle+0x58a>
   1d79a:	9a05      	ldr	r2, [sp, #20]
   1d79c:	2107      	movs	r1, #7
   1d79e:	4694      	mov	ip, r2
   1d7a0:	4a0b      	ldr	r2, [pc, #44]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d7a2:	4031      	ands	r1, r6
   1d7a4:	4690      	mov	r8, r2
   1d7a6:	2201      	movs	r2, #1
   1d7a8:	408a      	lsls	r2, r1
   1d7aa:	4641      	mov	r1, r8
   1d7ac:	08f3      	lsrs	r3, r6, #3
   1d7ae:	01db      	lsls	r3, r3, #7
   1d7b0:	4463      	add	r3, ip
   1d7b2:	5cc9      	ldrb	r1, [r1, r3]
   1d7b4:	430a      	orrs	r2, r1
   1d7b6:	4641      	mov	r1, r8
   1d7b8:	54ca      	strb	r2, [r1, r3]
   1d7ba:	e777      	b.n	1d6ac <glcd_draw_circle+0x554>
   1d7bc:	4b04      	ldr	r3, [pc, #16]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d7be:	43e4      	mvns	r4, r4
   1d7c0:	4698      	mov	r8, r3
   1d7c2:	e7b5      	b.n	1d730 <glcd_draw_circle+0x5d8>
   1d7c4:	4b02      	ldr	r3, [pc, #8]	; (1d7d0 <glcd_draw_circle+0x678>)
   1d7c6:	4698      	mov	r8, r3
   1d7c8:	464b      	mov	r3, r9
   1d7ca:	43db      	mvns	r3, r3
   1d7cc:	4699      	mov	r9, r3
   1d7ce:	e6ff      	b.n	1d5d0 <glcd_draw_circle+0x478>
   1d7d0:	2000171c 	.word	0x2000171c
   1d7d4:	0001c9d9 	.word	0x0001c9d9

0001d7d8 <glcd_fill_circle>:

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
   1d7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d7da:	4645      	mov	r5, r8
   1d7dc:	46de      	mov	lr, fp
   1d7de:	4657      	mov	r7, sl
   1d7e0:	464e      	mov	r6, r9
   1d7e2:	b5e0      	push	{r5, r6, r7, lr}
   1d7e4:	b08f      	sub	sp, #60	; 0x3c
   1d7e6:	9301      	str	r3, [sp, #4]
   1d7e8:	4698      	mov	r8, r3
	
	int8_t f = 1 - r;
   1d7ea:	2301      	movs	r3, #1
{
   1d7ec:	0006      	movs	r6, r0
   1d7ee:	900d      	str	r0, [sp, #52]	; 0x34
   1d7f0:	0010      	movs	r0, r2
	int8_t f = 1 - r;
   1d7f2:	1a9b      	subs	r3, r3, r2
   1d7f4:	b25c      	sxtb	r4, r3
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
   1d7f6:	01d3      	lsls	r3, r2, #7
   1d7f8:	1a9b      	subs	r3, r3, r2
   1d7fa:	005b      	lsls	r3, r3, #1
	int8_t f = 1 - r;
   1d7fc:	9407      	str	r4, [sp, #28]
	int8_t ddF_y = -2 * r;
   1d7fe:	b25c      	sxtb	r4, r3
   1d800:	940c      	str	r4, [sp, #48]	; 0x30
	int8_t x = 0;
	int8_t y = r;
   1d802:	b254      	sxtb	r4, r2
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1d804:	1845      	adds	r5, r0, r1
	int8_t y = r;
   1d806:	9406      	str	r4, [sp, #24]
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1d808:	1982      	adds	r2, r0, r6
   1d80a:	1a0c      	subs	r4, r1, r0
   1d80c:	1a30      	subs	r0, r6, r0
{
   1d80e:	910a      	str	r1, [sp, #40]	; 0x28
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1d810:	b2eb      	uxtb	r3, r5
   1d812:	b2e1      	uxtb	r1, r4
   1d814:	b2d2      	uxtb	r2, r2
   1d816:	b2c0      	uxtb	r0, r0
   1d818:	4fc7      	ldr	r7, [pc, #796]	; (1db38 <glcd_fill_circle+0x360>)
	
	for (i=y0-r; i<=y0+r; i++) {
   1d81a:	b224      	sxth	r4, r4
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   1d81c:	47b8      	blx	r7
	for (i=y0-r; i<=y0+r; i++) {
   1d81e:	42a5      	cmp	r5, r4
   1d820:	db29      	blt.n	1d876 <glcd_fill_circle+0x9e>
   1d822:	b273      	sxtb	r3, r6
   1d824:	2b00      	cmp	r3, #0
   1d826:	da00      	bge.n	1d82a <glcd_fill_circle+0x52>
   1d828:	e0f9      	b.n	1da1e <glcd_fill_circle+0x246>
   1d82a:	4643      	mov	r3, r8
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d82c:	4ec3      	ldr	r6, [pc, #780]	; (1db3c <glcd_fill_circle+0x364>)
   1d82e:	2b00      	cmp	r3, #0
   1d830:	d000      	beq.n	1d834 <glcd_fill_circle+0x5c>
   1d832:	e17c      	b.n	1db2e <glcd_fill_circle+0x356>
   1d834:	3307      	adds	r3, #7
   1d836:	4699      	mov	r9, r3
   1d838:	3b06      	subs	r3, #6
   1d83a:	4698      	mov	r8, r3
   1d83c:	e003      	b.n	1d846 <glcd_fill_circle+0x6e>
   1d83e:	3401      	adds	r4, #1
   1d840:	b224      	sxth	r4, r4
	for (i=y0-r; i<=y0+r; i++) {
   1d842:	42a5      	cmp	r5, r4
   1d844:	db17      	blt.n	1d876 <glcd_fill_circle+0x9e>
		glcd_set_pixel(x0, i, color);
   1d846:	b2e1      	uxtb	r1, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d848:	293f      	cmp	r1, #63	; 0x3f
   1d84a:	d8f8      	bhi.n	1d83e <glcd_fill_circle+0x66>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1d84c:	464a      	mov	r2, r9
   1d84e:	4640      	mov	r0, r8
   1d850:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1d852:	400a      	ands	r2, r1
   1d854:	46bc      	mov	ip, r7
   1d856:	4090      	lsls	r0, r2
   1d858:	08cb      	lsrs	r3, r1, #3
   1d85a:	01db      	lsls	r3, r3, #7
   1d85c:	4463      	add	r3, ip
   1d85e:	5cf2      	ldrb	r2, [r6, r3]
   1d860:	3401      	adds	r4, #1
   1d862:	4382      	bics	r2, r0
   1d864:	54f2      	strb	r2, [r6, r3]
	glcd_update_bbox(x,y,x,y);
   1d866:	0038      	movs	r0, r7
   1d868:	003a      	movs	r2, r7
   1d86a:	000b      	movs	r3, r1
   1d86c:	4fb2      	ldr	r7, [pc, #712]	; (1db38 <glcd_fill_circle+0x360>)
   1d86e:	b224      	sxth	r4, r4
   1d870:	47b8      	blx	r7
	for (i=y0-r; i<=y0+r; i++) {
   1d872:	42a5      	cmp	r5, r4
   1d874:	dae7      	bge.n	1d846 <glcd_fill_circle+0x6e>
	}
	
	while (x < y) {
   1d876:	9b06      	ldr	r3, [sp, #24]
   1d878:	2b00      	cmp	r3, #0
   1d87a:	dc00      	bgt.n	1d87e <glcd_fill_circle+0xa6>
   1d87c:	e0c8      	b.n	1da10 <glcd_fill_circle+0x238>
   1d87e:	466b      	mov	r3, sp
   1d880:	2228      	movs	r2, #40	; 0x28
   1d882:	5e9b      	ldrsh	r3, [r3, r2]
   1d884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1d886:	930b      	str	r3, [sp, #44]	; 0x2c
   1d888:	0013      	movs	r3, r2
   1d88a:	3301      	adds	r3, #1
   1d88c:	b2db      	uxtb	r3, r3
   1d88e:	9305      	str	r3, [sp, #20]
   1d890:	0013      	movs	r3, r2
   1d892:	3b01      	subs	r3, #1
   1d894:	b2db      	uxtb	r3, r3
   1d896:	9302      	str	r3, [sp, #8]
   1d898:	2300      	movs	r3, #0
   1d89a:	9308      	str	r3, [sp, #32]
		if (f >= 0) {
   1d89c:	9a07      	ldr	r2, [sp, #28]
   1d89e:	2a00      	cmp	r2, #0
   1d8a0:	db0c      	blt.n	1d8bc <glcd_fill_circle+0xe4>
			y--;
			ddF_y += 2;
			f += ddF_y;
   1d8a2:	4694      	mov	ip, r2
			y--;
   1d8a4:	9b06      	ldr	r3, [sp, #24]
   1d8a6:	3b01      	subs	r3, #1
   1d8a8:	b25b      	sxtb	r3, r3
   1d8aa:	9306      	str	r3, [sp, #24]
			ddF_y += 2;
   1d8ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d8ae:	3302      	adds	r3, #2
   1d8b0:	b2db      	uxtb	r3, r3
   1d8b2:	b259      	sxtb	r1, r3
			f += ddF_y;
   1d8b4:	4463      	add	r3, ip
   1d8b6:	b25b      	sxtb	r3, r3
			ddF_y += 2;
   1d8b8:	910c      	str	r1, [sp, #48]	; 0x30
			f += ddF_y;
   1d8ba:	9307      	str	r3, [sp, #28]
   1d8bc:	9b08      	ldr	r3, [sp, #32]
   1d8be:	3301      	adds	r3, #1
   1d8c0:	b2db      	uxtb	r3, r3
   1d8c2:	b25a      	sxtb	r2, r3
   1d8c4:	9208      	str	r2, [sp, #32]
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
   1d8c6:	9a07      	ldr	r2, [sp, #28]
   1d8c8:	9304      	str	r3, [sp, #16]
   1d8ca:	4694      	mov	ip, r2
   1d8cc:	005b      	lsls	r3, r3, #1
   1d8ce:	3301      	adds	r3, #1
   1d8d0:	4463      	add	r3, ip
   1d8d2:	b25b      	sxtb	r3, r3
   1d8d4:	9307      	str	r3, [sp, #28]
		
		for (i=y0-y; i<=y0+y; i++) {
   1d8d6:	9b06      	ldr	r3, [sp, #24]
   1d8d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d8da:	469c      	mov	ip, r3
   1d8dc:	1ad4      	subs	r4, r2, r3
   1d8de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d8e0:	b224      	sxth	r4, r4
   1d8e2:	4462      	add	r2, ip
   1d8e4:	4690      	mov	r8, r2
   1d8e6:	4294      	cmp	r4, r2
   1d8e8:	dc3a      	bgt.n	1d960 <glcd_fill_circle+0x188>
   1d8ea:	466b      	mov	r3, sp
   1d8ec:	7d1b      	ldrb	r3, [r3, #20]
   1d8ee:	b25b      	sxtb	r3, r3
   1d8f0:	4699      	mov	r9, r3
   1d8f2:	466b      	mov	r3, sp
   1d8f4:	7a1b      	ldrb	r3, [r3, #8]
   1d8f6:	b25b      	sxtb	r3, r3
   1d8f8:	469b      	mov	fp, r3
   1d8fa:	e006      	b.n	1d90a <glcd_fill_circle+0x132>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d8fc:	2d3f      	cmp	r5, #63	; 0x3f
   1d8fe:	d800      	bhi.n	1d902 <glcd_fill_circle+0x12a>
   1d900:	e097      	b.n	1da32 <glcd_fill_circle+0x25a>
   1d902:	3401      	adds	r4, #1
   1d904:	b224      	sxth	r4, r4
		for (i=y0-y; i<=y0+y; i++) {
   1d906:	4544      	cmp	r4, r8
   1d908:	dc2a      	bgt.n	1d960 <glcd_fill_circle+0x188>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d90a:	464b      	mov	r3, r9
			glcd_set_pixel(x0+x, i, color);
   1d90c:	b2e5      	uxtb	r5, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d90e:	2b00      	cmp	r3, #0
   1d910:	daf4      	bge.n	1d8fc <glcd_fill_circle+0x124>
   1d912:	465b      	mov	r3, fp
   1d914:	2b00      	cmp	r3, #0
   1d916:	dbf4      	blt.n	1d902 <glcd_fill_circle+0x12a>
   1d918:	2d3f      	cmp	r5, #63	; 0x3f
   1d91a:	d8f2      	bhi.n	1d902 <glcd_fill_circle+0x12a>
   1d91c:	08ef      	lsrs	r7, r5, #3
   1d91e:	01fb      	lsls	r3, r7, #7
   1d920:	9303      	str	r3, [sp, #12]
   1d922:	2307      	movs	r3, #7
   1d924:	2601      	movs	r6, #1
   1d926:	402b      	ands	r3, r5
   1d928:	409e      	lsls	r6, r3
	if (color) {
   1d92a:	9b01      	ldr	r3, [sp, #4]
   1d92c:	b276      	sxtb	r6, r6
   1d92e:	2b00      	cmp	r3, #0
   1d930:	d100      	bne.n	1d934 <glcd_fill_circle+0x15c>
   1d932:	e124      	b.n	1db7e <glcd_fill_circle+0x3a6>
   1d934:	4b81      	ldr	r3, [pc, #516]	; (1db3c <glcd_fill_circle+0x364>)
   1d936:	469a      	mov	sl, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d938:	9b02      	ldr	r3, [sp, #8]
   1d93a:	469c      	mov	ip, r3
   1d93c:	9b03      	ldr	r3, [sp, #12]
   1d93e:	4463      	add	r3, ip
   1d940:	001f      	movs	r7, r3
   1d942:	4653      	mov	r3, sl
   1d944:	5ddb      	ldrb	r3, [r3, r7]
   1d946:	431e      	orrs	r6, r3
   1d948:	4653      	mov	r3, sl
   1d94a:	55de      	strb	r6, [r3, r7]
	glcd_update_bbox(x,y,x,y);
   1d94c:	9802      	ldr	r0, [sp, #8]
   1d94e:	3401      	adds	r4, #1
   1d950:	002b      	movs	r3, r5
   1d952:	0029      	movs	r1, r5
   1d954:	0002      	movs	r2, r0
   1d956:	4d78      	ldr	r5, [pc, #480]	; (1db38 <glcd_fill_circle+0x360>)
   1d958:	b224      	sxth	r4, r4
   1d95a:	47a8      	blx	r5
		for (i=y0-y; i<=y0+y; i++) {
   1d95c:	4544      	cmp	r4, r8
   1d95e:	ddd4      	ble.n	1d90a <glcd_fill_circle+0x132>
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
   1d960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d962:	9b04      	ldr	r3, [sp, #16]
   1d964:	1ad4      	subs	r4, r2, r3
   1d966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d968:	b224      	sxth	r4, r4
   1d96a:	4694      	mov	ip, r2
   1d96c:	4463      	add	r3, ip
   1d96e:	4699      	mov	r9, r3
   1d970:	42a3      	cmp	r3, r4
   1d972:	db40      	blt.n	1d9f6 <glcd_fill_circle+0x21e>
   1d974:	466b      	mov	r3, sp
   1d976:	990d      	ldr	r1, [sp, #52]	; 0x34
   1d978:	7e1b      	ldrb	r3, [r3, #24]
   1d97a:	18ca      	adds	r2, r1, r3
   1d97c:	b2d2      	uxtb	r2, r2
   1d97e:	9209      	str	r2, [sp, #36]	; 0x24
   1d980:	b252      	sxtb	r2, r2
   1d982:	4692      	mov	sl, r2
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d984:	466a      	mov	r2, sp
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
   1d986:	1acb      	subs	r3, r1, r3
   1d988:	b2db      	uxtb	r3, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d98a:	7313      	strb	r3, [r2, #12]
			glcd_set_pixel(x0-y, i, color);
   1d98c:	4698      	mov	r8, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d98e:	7b13      	ldrb	r3, [r2, #12]
   1d990:	b25b      	sxtb	r3, r3
   1d992:	9304      	str	r3, [sp, #16]
   1d994:	e006      	b.n	1d9a4 <glcd_fill_circle+0x1cc>
   1d996:	2d3f      	cmp	r5, #63	; 0x3f
   1d998:	d800      	bhi.n	1d99c <glcd_fill_circle+0x1c4>
   1d99a:	e08a      	b.n	1dab2 <glcd_fill_circle+0x2da>
   1d99c:	3401      	adds	r4, #1
   1d99e:	b224      	sxth	r4, r4
		for (i=y0-x; i<=y0+x; i++) {
   1d9a0:	454c      	cmp	r4, r9
   1d9a2:	dc28      	bgt.n	1d9f6 <glcd_fill_circle+0x21e>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d9a4:	4653      	mov	r3, sl
			glcd_set_pixel(x0+y, i, color);
   1d9a6:	b2e5      	uxtb	r5, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1d9a8:	2b00      	cmp	r3, #0
   1d9aa:	daf4      	bge.n	1d996 <glcd_fill_circle+0x1be>
   1d9ac:	9b04      	ldr	r3, [sp, #16]
   1d9ae:	2b00      	cmp	r3, #0
   1d9b0:	dbf4      	blt.n	1d99c <glcd_fill_circle+0x1c4>
   1d9b2:	2d3f      	cmp	r5, #63	; 0x3f
   1d9b4:	d8f2      	bhi.n	1d99c <glcd_fill_circle+0x1c4>
   1d9b6:	08ef      	lsrs	r7, r5, #3
   1d9b8:	01fb      	lsls	r3, r7, #7
   1d9ba:	9303      	str	r3, [sp, #12]
   1d9bc:	2307      	movs	r3, #7
   1d9be:	2601      	movs	r6, #1
   1d9c0:	402b      	ands	r3, r5
   1d9c2:	409e      	lsls	r6, r3
	if (color) {
   1d9c4:	9b01      	ldr	r3, [sp, #4]
   1d9c6:	b276      	sxtb	r6, r6
   1d9c8:	2b00      	cmp	r3, #0
   1d9ca:	d100      	bne.n	1d9ce <glcd_fill_circle+0x1f6>
   1d9cc:	e0d3      	b.n	1db76 <glcd_fill_circle+0x39e>
   1d9ce:	4b5b      	ldr	r3, [pc, #364]	; (1db3c <glcd_fill_circle+0x364>)
   1d9d0:	469b      	mov	fp, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1d9d2:	9b03      	ldr	r3, [sp, #12]
   1d9d4:	4443      	add	r3, r8
   1d9d6:	001f      	movs	r7, r3
   1d9d8:	465b      	mov	r3, fp
   1d9da:	5ddb      	ldrb	r3, [r3, r7]
   1d9dc:	431e      	orrs	r6, r3
   1d9de:	465b      	mov	r3, fp
   1d9e0:	55de      	strb	r6, [r3, r7]
   1d9e2:	3401      	adds	r4, #1
	glcd_update_bbox(x,y,x,y);
   1d9e4:	002b      	movs	r3, r5
   1d9e6:	0029      	movs	r1, r5
   1d9e8:	4642      	mov	r2, r8
   1d9ea:	4640      	mov	r0, r8
   1d9ec:	4d52      	ldr	r5, [pc, #328]	; (1db38 <glcd_fill_circle+0x360>)
   1d9ee:	b224      	sxth	r4, r4
   1d9f0:	47a8      	blx	r5
		for (i=y0-x; i<=y0+x; i++) {
   1d9f2:	454c      	cmp	r4, r9
   1d9f4:	ddd6      	ble.n	1d9a4 <glcd_fill_circle+0x1cc>
   1d9f6:	9b05      	ldr	r3, [sp, #20]
	while (x < y) {
   1d9f8:	9a08      	ldr	r2, [sp, #32]
   1d9fa:	3301      	adds	r3, #1
   1d9fc:	b2db      	uxtb	r3, r3
   1d9fe:	9305      	str	r3, [sp, #20]
   1da00:	9b02      	ldr	r3, [sp, #8]
   1da02:	3b01      	subs	r3, #1
   1da04:	b2db      	uxtb	r3, r3
   1da06:	9302      	str	r3, [sp, #8]
   1da08:	9b06      	ldr	r3, [sp, #24]
   1da0a:	4293      	cmp	r3, r2
   1da0c:	dd00      	ble.n	1da10 <glcd_fill_circle+0x238>
   1da0e:	e745      	b.n	1d89c <glcd_fill_circle+0xc4>
		}    
	}
}
   1da10:	b00f      	add	sp, #60	; 0x3c
   1da12:	bc3c      	pop	{r2, r3, r4, r5}
   1da14:	4690      	mov	r8, r2
   1da16:	4699      	mov	r9, r3
   1da18:	46a2      	mov	sl, r4
   1da1a:	46ab      	mov	fp, r5
   1da1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1da1e:	3401      	adds	r4, #1
   1da20:	b224      	sxth	r4, r4
	for (i=y0-r; i<=y0+r; i++) {
   1da22:	42ac      	cmp	r4, r5
   1da24:	dd00      	ble.n	1da28 <glcd_fill_circle+0x250>
   1da26:	e726      	b.n	1d876 <glcd_fill_circle+0x9e>
   1da28:	3401      	adds	r4, #1
   1da2a:	b224      	sxth	r4, r4
   1da2c:	42ac      	cmp	r4, r5
   1da2e:	ddf6      	ble.n	1da1e <glcd_fill_circle+0x246>
   1da30:	e721      	b.n	1d876 <glcd_fill_circle+0x9e>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1da32:	08ef      	lsrs	r7, r5, #3
	if (color) {
   1da34:	9b01      	ldr	r3, [sp, #4]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1da36:	01fa      	lsls	r2, r7, #7
   1da38:	9203      	str	r2, [sp, #12]
   1da3a:	9905      	ldr	r1, [sp, #20]
	if (color) {
   1da3c:	2b00      	cmp	r3, #0
   1da3e:	d016      	beq.n	1da6e <glcd_fill_circle+0x296>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1da40:	2307      	movs	r3, #7
   1da42:	2601      	movs	r6, #1
   1da44:	402b      	ands	r3, r5
   1da46:	409e      	lsls	r6, r3
   1da48:	4b3c      	ldr	r3, [pc, #240]	; (1db3c <glcd_fill_circle+0x364>)
   1da4a:	188a      	adds	r2, r1, r2
   1da4c:	469a      	mov	sl, r3
   1da4e:	4650      	mov	r0, sl
   1da50:	5c9b      	ldrb	r3, [r3, r2]
   1da52:	b276      	sxtb	r6, r6
   1da54:	4333      	orrs	r3, r6
   1da56:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   1da58:	4f37      	ldr	r7, [pc, #220]	; (1db38 <glcd_fill_circle+0x360>)
   1da5a:	002b      	movs	r3, r5
   1da5c:	0008      	movs	r0, r1
   1da5e:	000a      	movs	r2, r1
   1da60:	0029      	movs	r1, r5
   1da62:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1da64:	465b      	mov	r3, fp
   1da66:	2b00      	cmp	r3, #0
   1da68:	da00      	bge.n	1da6c <glcd_fill_circle+0x294>
   1da6a:	e74a      	b.n	1d902 <glcd_fill_circle+0x12a>
   1da6c:	e764      	b.n	1d938 <glcd_fill_circle+0x160>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1da6e:	2307      	movs	r3, #7
   1da70:	2601      	movs	r6, #1
   1da72:	402b      	ands	r3, r5
   1da74:	409e      	lsls	r6, r3
   1da76:	4b31      	ldr	r3, [pc, #196]	; (1db3c <glcd_fill_circle+0x364>)
   1da78:	b276      	sxtb	r6, r6
   1da7a:	469a      	mov	sl, r3
   1da7c:	43f6      	mvns	r6, r6
   1da7e:	4650      	mov	r0, sl
   1da80:	188a      	adds	r2, r1, r2
   1da82:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1da84:	4f2c      	ldr	r7, [pc, #176]	; (1db38 <glcd_fill_circle+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1da86:	4033      	ands	r3, r6
   1da88:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   1da8a:	002b      	movs	r3, r5
   1da8c:	0008      	movs	r0, r1
   1da8e:	000a      	movs	r2, r1
   1da90:	0029      	movs	r1, r5
   1da92:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1da94:	465b      	mov	r3, fp
   1da96:	2b00      	cmp	r3, #0
   1da98:	da00      	bge.n	1da9c <glcd_fill_circle+0x2c4>
   1da9a:	e732      	b.n	1d902 <glcd_fill_circle+0x12a>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1da9c:	9b02      	ldr	r3, [sp, #8]
   1da9e:	469c      	mov	ip, r3
   1daa0:	9b03      	ldr	r3, [sp, #12]
   1daa2:	4463      	add	r3, ip
   1daa4:	001f      	movs	r7, r3
   1daa6:	4653      	mov	r3, sl
   1daa8:	5ddb      	ldrb	r3, [r3, r7]
   1daaa:	401e      	ands	r6, r3
   1daac:	4653      	mov	r3, sl
   1daae:	55de      	strb	r6, [r3, r7]
   1dab0:	e74c      	b.n	1d94c <glcd_fill_circle+0x174>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1dab2:	08ef      	lsrs	r7, r5, #3
	if (color) {
   1dab4:	9b01      	ldr	r3, [sp, #4]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1dab6:	01fa      	lsls	r2, r7, #7
   1dab8:	9203      	str	r2, [sp, #12]
   1daba:	9909      	ldr	r1, [sp, #36]	; 0x24
	if (color) {
   1dabc:	2b00      	cmp	r3, #0
   1dabe:	d016      	beq.n	1daee <glcd_fill_circle+0x316>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1dac0:	2307      	movs	r3, #7
   1dac2:	2601      	movs	r6, #1
   1dac4:	402b      	ands	r3, r5
   1dac6:	409e      	lsls	r6, r3
   1dac8:	4b1c      	ldr	r3, [pc, #112]	; (1db3c <glcd_fill_circle+0x364>)
   1daca:	188a      	adds	r2, r1, r2
   1dacc:	469b      	mov	fp, r3
   1dace:	4658      	mov	r0, fp
   1dad0:	5c9b      	ldrb	r3, [r3, r2]
   1dad2:	b276      	sxtb	r6, r6
   1dad4:	4333      	orrs	r3, r6
   1dad6:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   1dad8:	4f17      	ldr	r7, [pc, #92]	; (1db38 <glcd_fill_circle+0x360>)
   1dada:	002b      	movs	r3, r5
   1dadc:	0008      	movs	r0, r1
   1dade:	000a      	movs	r2, r1
   1dae0:	0029      	movs	r1, r5
   1dae2:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1dae4:	9b04      	ldr	r3, [sp, #16]
   1dae6:	2b00      	cmp	r3, #0
   1dae8:	da00      	bge.n	1daec <glcd_fill_circle+0x314>
   1daea:	e757      	b.n	1d99c <glcd_fill_circle+0x1c4>
   1daec:	e771      	b.n	1d9d2 <glcd_fill_circle+0x1fa>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1daee:	2307      	movs	r3, #7
   1daf0:	2601      	movs	r6, #1
   1daf2:	402b      	ands	r3, r5
   1daf4:	409e      	lsls	r6, r3
   1daf6:	4b11      	ldr	r3, [pc, #68]	; (1db3c <glcd_fill_circle+0x364>)
   1daf8:	b276      	sxtb	r6, r6
   1dafa:	469b      	mov	fp, r3
   1dafc:	43f6      	mvns	r6, r6
   1dafe:	4658      	mov	r0, fp
   1db00:	188a      	adds	r2, r1, r2
   1db02:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1db04:	4f0c      	ldr	r7, [pc, #48]	; (1db38 <glcd_fill_circle+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1db06:	4033      	ands	r3, r6
   1db08:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   1db0a:	002b      	movs	r3, r5
   1db0c:	0008      	movs	r0, r1
   1db0e:	000a      	movs	r2, r1
   1db10:	0029      	movs	r1, r5
   1db12:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1db14:	9b04      	ldr	r3, [sp, #16]
   1db16:	2b00      	cmp	r3, #0
   1db18:	da00      	bge.n	1db1c <glcd_fill_circle+0x344>
   1db1a:	e73f      	b.n	1d99c <glcd_fill_circle+0x1c4>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1db1c:	9b03      	ldr	r3, [sp, #12]
   1db1e:	4443      	add	r3, r8
   1db20:	001f      	movs	r7, r3
   1db22:	465b      	mov	r3, fp
   1db24:	5ddb      	ldrb	r3, [r3, r7]
   1db26:	401e      	ands	r6, r3
   1db28:	465b      	mov	r3, fp
   1db2a:	55de      	strb	r6, [r3, r7]
   1db2c:	e759      	b.n	1d9e2 <glcd_fill_circle+0x20a>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1db2e:	2307      	movs	r3, #7
   1db30:	4699      	mov	r9, r3
   1db32:	3b06      	subs	r3, #6
   1db34:	4698      	mov	r8, r3
   1db36:	e008      	b.n	1db4a <glcd_fill_circle+0x372>
   1db38:	0001c9d9 	.word	0x0001c9d9
   1db3c:	2000171c 	.word	0x2000171c
   1db40:	3401      	adds	r4, #1
   1db42:	b224      	sxth	r4, r4
	for (i=y0-r; i<=y0+r; i++) {
   1db44:	42a5      	cmp	r5, r4
   1db46:	da00      	bge.n	1db4a <glcd_fill_circle+0x372>
   1db48:	e695      	b.n	1d876 <glcd_fill_circle+0x9e>
		glcd_set_pixel(x0, i, color);
   1db4a:	b2e1      	uxtb	r1, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1db4c:	293f      	cmp	r1, #63	; 0x3f
   1db4e:	d8f7      	bhi.n	1db40 <glcd_fill_circle+0x368>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1db50:	464a      	mov	r2, r9
   1db52:	4640      	mov	r0, r8
   1db54:	400a      	ands	r2, r1
   1db56:	4090      	lsls	r0, r2
   1db58:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1db5a:	0002      	movs	r2, r0
   1db5c:	46bc      	mov	ip, r7
   1db5e:	08cb      	lsrs	r3, r1, #3
   1db60:	01db      	lsls	r3, r3, #7
   1db62:	4463      	add	r3, ip
   1db64:	5cf0      	ldrb	r0, [r6, r3]
   1db66:	4302      	orrs	r2, r0
   1db68:	54f2      	strb	r2, [r6, r3]
	glcd_update_bbox(x,y,x,y);
   1db6a:	0038      	movs	r0, r7
   1db6c:	003a      	movs	r2, r7
   1db6e:	000b      	movs	r3, r1
   1db70:	4f05      	ldr	r7, [pc, #20]	; (1db88 <glcd_fill_circle+0x3b0>)
   1db72:	47b8      	blx	r7
   1db74:	e7e4      	b.n	1db40 <glcd_fill_circle+0x368>
   1db76:	4b05      	ldr	r3, [pc, #20]	; (1db8c <glcd_fill_circle+0x3b4>)
   1db78:	43f6      	mvns	r6, r6
   1db7a:	469b      	mov	fp, r3
   1db7c:	e7ce      	b.n	1db1c <glcd_fill_circle+0x344>
   1db7e:	4b03      	ldr	r3, [pc, #12]	; (1db8c <glcd_fill_circle+0x3b4>)
   1db80:	43f6      	mvns	r6, r6
   1db82:	469a      	mov	sl, r3
   1db84:	e78a      	b.n	1da9c <glcd_fill_circle+0x2c4>
   1db86:	46c0      	nop			; (mov r8, r8)
   1db88:	0001c9d9 	.word	0x0001c9d9
   1db8c:	2000171c 	.word	0x2000171c

0001db90 <glcd_write>:
void glcd_write()
{

	uint8_t bank;

	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   1db90:	2200      	movs	r2, #0
{
   1db92:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db94:	4657      	mov	r7, sl
   1db96:	4645      	mov	r5, r8
   1db98:	46de      	mov	lr, fp
   1db9a:	464e      	mov	r6, r9
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   1db9c:	4692      	mov	sl, r2
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1db9e:	4a28      	ldr	r2, [pc, #160]	; (1dc40 <glcd_write+0xb0>)
{
   1dba0:	b5e0      	push	{r5, r6, r7, lr}
   1dba2:	4690      	mov	r8, r2
   1dba4:	4a27      	ldr	r2, [pc, #156]	; (1dc44 <glcd_write+0xb4>)
   1dba6:	2500      	movs	r5, #0
   1dba8:	4693      	mov	fp, r2
   1dbaa:	4b27      	ldr	r3, [pc, #156]	; (1dc48 <glcd_write+0xb8>)
	glcd_spi_write(c);	
   1dbac:	4f27      	ldr	r7, [pc, #156]	; (1dc4c <glcd_write+0xbc>)
   1dbae:	4699      	mov	r9, r3
   1dbb0:	681b      	ldr	r3, [r3, #0]
{
   1dbb2:	b083      	sub	sp, #12
   1dbb4:	2208      	movs	r2, #8
   1dbb6:	4694      	mov	ip, r2
   1dbb8:	44ac      	add	ip, r5
   1dbba:	4662      	mov	r2, ip
   1dbbc:	9201      	str	r2, [sp, #4]
		/* Each bank is a single row 8 bits tall */
		uint8_t column;		
		
		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
   1dbbe:	785a      	ldrb	r2, [r3, #1]
   1dbc0:	4562      	cmp	r2, ip
   1dbc2:	da2d      	bge.n	1dc20 <glcd_write+0x90>
			continue; /* Skip the entire bank */
		}
		
		if (glcd_bbox_selected->y_max < bank*8) {
   1dbc4:	78db      	ldrb	r3, [r3, #3]
   1dbc6:	42ab      	cmp	r3, r5
   1dbc8:	db31      	blt.n	1dc2e <glcd_write+0x9e>
   1dbca:	2680      	movs	r6, #128	; 0x80
   1dbcc:	4643      	mov	r3, r8
   1dbce:	0536      	lsls	r6, r6, #20
   1dbd0:	615e      	str	r6, [r3, #20]
	glcd_command(ST7565R_PAGE_ADDRESS_SET | (0x0F & y)); /* 0x0F = 0b00001111 */
   1dbd2:	20b0      	movs	r0, #176	; 0xb0
	glcd_spi_write(c);	
   1dbd4:	4653      	mov	r3, sl
   1dbd6:	4318      	orrs	r0, r3
   1dbd8:	47b8      	blx	r7
			break;    /* No more banks need updating */
		}
		
		glcd_set_y_address(bank);
		glcd_set_x_address(glcd_bbox_selected->x_min);
   1dbda:	464b      	mov	r3, r9
   1dbdc:	681b      	ldr	r3, [r3, #0]
   1dbde:	781c      	ldrb	r4, [r3, #0]
   1dbe0:	4643      	mov	r3, r8
   1dbe2:	615e      	str	r6, [r3, #20]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_UPPER | (addr >> 4));
   1dbe4:	2310      	movs	r3, #16
   1dbe6:	0920      	lsrs	r0, r4, #4
	glcd_spi_write(c);	
   1dbe8:	4318      	orrs	r0, r3
   1dbea:	47b8      	blx	r7
   1dbec:	4643      	mov	r3, r8
   1dbee:	200f      	movs	r0, #15
   1dbf0:	615e      	str	r6, [r3, #20]
   1dbf2:	4020      	ands	r0, r4
   1dbf4:	47b8      	blx	r7

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
   1dbf6:	464b      	mov	r3, r9
   1dbf8:	681b      	ldr	r3, [r3, #0]
   1dbfa:	781c      	ldrb	r4, [r3, #0]
   1dbfc:	789a      	ldrb	r2, [r3, #2]
   1dbfe:	42a2      	cmp	r2, r4
   1dc00:	d30e      	bcc.n	1dc20 <glcd_write+0x90>
   1dc02:	012d      	lsls	r5, r5, #4
		{
			glcd_data( glcd_buffer_selected[GLCD_NUMBER_OF_COLS * bank + column] );
   1dc04:	465b      	mov	r3, fp
   1dc06:	681b      	ldr	r3, [r3, #0]
   1dc08:	191b      	adds	r3, r3, r4
   1dc0a:	5d58      	ldrb	r0, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   1dc0c:	4643      	mov	r3, r8
   1dc0e:	619e      	str	r6, [r3, #24]
	glcd_spi_write(c);	
   1dc10:	47b8      	blx	r7
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
   1dc12:	464b      	mov	r3, r9
   1dc14:	681b      	ldr	r3, [r3, #0]
   1dc16:	3401      	adds	r4, #1
   1dc18:	789a      	ldrb	r2, [r3, #2]
   1dc1a:	b2e4      	uxtb	r4, r4
   1dc1c:	42a2      	cmp	r2, r4
   1dc1e:	d2f1      	bcs.n	1dc04 <glcd_write+0x74>
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   1dc20:	4652      	mov	r2, sl
   1dc22:	3201      	adds	r2, #1
   1dc24:	b2d2      	uxtb	r2, r2
   1dc26:	4692      	mov	sl, r2
   1dc28:	9d01      	ldr	r5, [sp, #4]
   1dc2a:	2a10      	cmp	r2, #16
   1dc2c:	d1c2      	bne.n	1dbb4 <glcd_write+0x24>
		}
	}

	glcd_reset_bbox();
   1dc2e:	4b08      	ldr	r3, [pc, #32]	; (1dc50 <glcd_write+0xc0>)
   1dc30:	4798      	blx	r3

}
   1dc32:	b003      	add	sp, #12
   1dc34:	bc3c      	pop	{r2, r3, r4, r5}
   1dc36:	4690      	mov	r8, r2
   1dc38:	4699      	mov	r9, r3
   1dc3a:	46a2      	mov	sl, r4
   1dc3c:	46ab      	mov	fp, r5
   1dc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc40:	40002800 	.word	0x40002800
   1dc44:	20001b1c 	.word	0x20001b1c
   1dc48:	20001b20 	.word	0x20001b20
   1dc4c:	0001c99d 	.word	0x0001c99d
   1dc50:	0001ca39 	.word	0x0001ca39

0001dc54 <glcd_ST7565R_init>:

void glcd_ST7565R_init(void) {
   1dc54:	b570      	push	{r4, r5, r6, lr}
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1dc56:	2680      	movs	r6, #128	; 0x80
   1dc58:	4d0f      	ldr	r5, [pc, #60]	; (1dc98 <glcd_ST7565R_init+0x44>)
   1dc5a:	0536      	lsls	r6, r6, #20
	glcd_spi_write(c);	
   1dc5c:	4c0f      	ldr	r4, [pc, #60]	; (1dc9c <glcd_ST7565R_init+0x48>)
   1dc5e:	616e      	str	r6, [r5, #20]
   1dc60:	20a0      	movs	r0, #160	; 0xa0
   1dc62:	47a0      	blx	r4
   1dc64:	616e      	str	r6, [r5, #20]
   1dc66:	20ae      	movs	r0, #174	; 0xae
   1dc68:	47a0      	blx	r4
   1dc6a:	616e      	str	r6, [r5, #20]
   1dc6c:	20c8      	movs	r0, #200	; 0xc8
   1dc6e:	47a0      	blx	r4
   1dc70:	616e      	str	r6, [r5, #20]
   1dc72:	20a2      	movs	r0, #162	; 0xa2
   1dc74:	47a0      	blx	r4
   1dc76:	616e      	str	r6, [r5, #20]
   1dc78:	202f      	movs	r0, #47	; 0x2f
   1dc7a:	47a0      	blx	r4
   1dc7c:	616e      	str	r6, [r5, #20]
   1dc7e:	2026      	movs	r0, #38	; 0x26
   1dc80:	47a0      	blx	r4
   1dc82:	616e      	str	r6, [r5, #20]
   1dc84:	2081      	movs	r0, #129	; 0x81
   1dc86:	47a0      	blx	r4
   1dc88:	616e      	str	r6, [r5, #20]
   1dc8a:	2014      	movs	r0, #20
   1dc8c:	47a0      	blx	r4
   1dc8e:	616e      	str	r6, [r5, #20]
   1dc90:	20af      	movs	r0, #175	; 0xaf
   1dc92:	47a0      	blx	r4
	glcd_set_contrast(20); /* Set contrast, value experimentally determined, value 0 to 63 */
	glcd_command(0xaf); /* Display on */

#endif

}
   1dc94:	bd70      	pop	{r4, r5, r6, pc}
   1dc96:	46c0      	nop			; (mov r8, r8)
   1dc98:	40002800 	.word	0x40002800
   1dc9c:	0001c99d 	.word	0x0001c99d

0001dca0 <glcd_draw_char_xy>:
	font_current.end_char = end_char;
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
}

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
   1dca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dca2:	46de      	mov	lr, fp
   1dca4:	4657      	mov	r7, sl
   1dca6:	464e      	mov	r6, r9
   1dca8:	4645      	mov	r5, r8
   1dcaa:	b5e0      	push	{r5, r6, r7, lr}
	if (c < font_current.start_char || c > font_current.end_char) {
   1dcac:	4bb1      	ldr	r3, [pc, #708]	; (1df74 <glcd_draw_char_xy+0x2d4>)
{
   1dcae:	b08f      	sub	sp, #60	; 0x3c
   1dcb0:	9202      	str	r2, [sp, #8]
	if (c < font_current.start_char || c > font_current.end_char) {
   1dcb2:	4699      	mov	r9, r3
   1dcb4:	799b      	ldrb	r3, [r3, #6]
{
   1dcb6:	468b      	mov	fp, r1
   1dcb8:	4682      	mov	sl, r0
   1dcba:	0011      	movs	r1, r2
	if (c < font_current.start_char || c > font_current.end_char) {
   1dcbc:	4293      	cmp	r3, r2
   1dcbe:	d83c      	bhi.n	1dd3a <glcd_draw_char_xy+0x9a>
   1dcc0:	464a      	mov	r2, r9
   1dcc2:	79d2      	ldrb	r2, [r2, #7]
   1dcc4:	428a      	cmp	r2, r1
   1dcc6:	d338      	bcc.n	1dd3a <glcd_draw_char_xy+0x9a>
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
   1dcc8:	464a      	mov	r2, r9
   1dcca:	7a12      	ldrb	r2, [r2, #8]
   1dccc:	2a00      	cmp	r2, #0
   1dcce:	d13a      	bne.n	1dd46 <glcd_draw_char_xy+0xa6>
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
   1dcd0:	464a      	mov	r2, r9
   1dcd2:	7917      	ldrb	r7, [r2, #4]
   1dcd4:	4652      	mov	r2, sl
   1dcd6:	9203      	str	r2, [sp, #12]
   1dcd8:	2200      	movs	r2, #0
   1dcda:	9201      	str	r2, [sp, #4]
   1dcdc:	2f00      	cmp	r7, #0
   1dcde:	d037      	beq.n	1dd50 <glcd_draw_char_xy+0xb0>
					return 0;
				}
				if (dat & (1<<j)) {
					glcd_set_pixel(x+i,y+j,BLACK);
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
   1dce0:	003a      	movs	r2, r7
   1dce2:	4657      	mov	r7, sl
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   1dce4:	9902      	ldr	r1, [sp, #8]
   1dce6:	9801      	ldr	r0, [sp, #4]
   1dce8:	1acb      	subs	r3, r1, r3
   1dcea:	435a      	muls	r2, r3
   1dcec:	464b      	mov	r3, r9
   1dcee:	4684      	mov	ip, r0
   1dcf0:	681b      	ldr	r3, [r3, #0]
   1dcf2:	4463      	add	r3, ip
   1dcf4:	5c9b      	ldrb	r3, [r3, r2]
   1dcf6:	4698      	mov	r8, r3
   1dcf8:	9b03      	ldr	r3, [sp, #12]
   1dcfa:	4463      	add	r3, ip
   1dcfc:	2b7f      	cmp	r3, #127	; 0x7f
   1dcfe:	dc27      	bgt.n	1dd50 <glcd_draw_char_xy+0xb0>
   1dd00:	465e      	mov	r6, fp
				if (dat & (1<<j)) {
   1dd02:	2301      	movs	r3, #1
   1dd04:	3608      	adds	r6, #8
   1dd06:	b2f6      	uxtb	r6, r6
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   1dd08:	465c      	mov	r4, fp
   1dd0a:	2500      	movs	r5, #0
				if (dat & (1<<j)) {
   1dd0c:	469a      	mov	sl, r3
   1dd0e:	e009      	b.n	1dd24 <glcd_draw_char_xy+0x84>
					glcd_set_pixel(x+i,y+j,WHITE);
   1dd10:	2200      	movs	r2, #0
					glcd_set_pixel(x+i,y+j,BLACK);
   1dd12:	0021      	movs	r1, r4
   1dd14:	3401      	adds	r4, #1
   1dd16:	0038      	movs	r0, r7
   1dd18:	4b97      	ldr	r3, [pc, #604]	; (1df78 <glcd_draw_char_xy+0x2d8>)
   1dd1a:	b2e4      	uxtb	r4, r4
   1dd1c:	4798      	blx	r3
   1dd1e:	3501      	adds	r5, #1
			for (j = 0; j < 8; j++) {
   1dd20:	42b4      	cmp	r4, r6
   1dd22:	d01e      	beq.n	1dd62 <glcd_draw_char_xy+0xc2>
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
   1dd24:	465b      	mov	r3, fp
   1dd26:	195b      	adds	r3, r3, r5
   1dd28:	2b3f      	cmp	r3, #63	; 0x3f
   1dd2a:	d811      	bhi.n	1dd50 <glcd_draw_char_xy+0xb0>
				if (dat & (1<<j)) {
   1dd2c:	4643      	mov	r3, r8
   1dd2e:	4652      	mov	r2, sl
   1dd30:	412b      	asrs	r3, r5
   1dd32:	421a      	tst	r2, r3
   1dd34:	d0ec      	beq.n	1dd10 <glcd_draw_char_xy+0x70>
					glcd_set_pixel(x+i,y+j,BLACK);
   1dd36:	2201      	movs	r2, #1
   1dd38:	e7eb      	b.n	1dd12 <glcd_draw_char_xy+0x72>
		c = '.';
   1dd3a:	222e      	movs	r2, #46	; 0x2e
   1dd3c:	9202      	str	r2, [sp, #8]
	if (font_current.table_type == STANG) {
   1dd3e:	464a      	mov	r2, r9
   1dd40:	7a12      	ldrb	r2, [r2, #8]
   1dd42:	2a00      	cmp	r2, #0
   1dd44:	d0c4      	beq.n	1dcd0 <glcd_draw_char_xy+0x30>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
   1dd46:	2a01      	cmp	r2, #1
   1dd48:	d019      	beq.n	1dd7e <glcd_draw_char_xy+0xde>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
   1dd4a:	2a02      	cmp	r2, #2
   1dd4c:	d100      	bne.n	1dd50 <glcd_draw_char_xy+0xb0>
   1dd4e:	e0fc      	b.n	1df4a <glcd_draw_char_xy+0x2aa>
		for ( i = 0; i < font_current.width; i++ ) {
   1dd50:	2700      	movs	r7, #0
		/* Don't recognise the font table */
		return 0;
		
	}

}
   1dd52:	0038      	movs	r0, r7
   1dd54:	b00f      	add	sp, #60	; 0x3c
   1dd56:	bc3c      	pop	{r2, r3, r4, r5}
   1dd58:	4690      	mov	r8, r2
   1dd5a:	4699      	mov	r9, r3
   1dd5c:	46a2      	mov	sl, r4
   1dd5e:	46ab      	mov	fp, r5
   1dd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for ( i = 0; i < font_current.width; i++ ) {
   1dd62:	464a      	mov	r2, r9
   1dd64:	9b01      	ldr	r3, [sp, #4]
   1dd66:	3701      	adds	r7, #1
   1dd68:	3301      	adds	r3, #1
   1dd6a:	b2db      	uxtb	r3, r3
   1dd6c:	9301      	str	r3, [sp, #4]
   1dd6e:	7912      	ldrb	r2, [r2, #4]
   1dd70:	b2ff      	uxtb	r7, r7
   1dd72:	429a      	cmp	r2, r3
   1dd74:	d800      	bhi.n	1dd78 <glcd_draw_char_xy+0xd8>
   1dd76:	e21f      	b.n	1e1b8 <glcd_draw_char_xy+0x518>
   1dd78:	464b      	mov	r3, r9
   1dd7a:	799b      	ldrb	r3, [r3, #6]
   1dd7c:	e7b2      	b.n	1dce4 <glcd_draw_char_xy+0x44>
		if ((font_current.height % 8) > 0){
   1dd7e:	464a      	mov	r2, r9
   1dd80:	7952      	ldrb	r2, [r2, #5]
			bytes_high = (font_current.height / 8);
   1dd82:	08d1      	lsrs	r1, r2, #3
   1dd84:	9101      	str	r1, [sp, #4]
		if ((font_current.height % 8) > 0){
   1dd86:	0751      	lsls	r1, r2, #29
   1dd88:	d002      	beq.n	1dd90 <glcd_draw_char_xy+0xf0>
			bytes_high = (font_current.height / 8) + 1;
   1dd8a:	08d2      	lsrs	r2, r2, #3
   1dd8c:	3201      	adds	r2, #1
   1dd8e:	9201      	str	r2, [sp, #4]
		bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
   1dd90:	464a      	mov	r2, r9
   1dd92:	9901      	ldr	r1, [sp, #4]
   1dd94:	7912      	ldrb	r2, [r2, #4]
   1dd96:	434a      	muls	r2, r1
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   1dd98:	9902      	ldr	r1, [sp, #8]
		bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
   1dd9a:	3201      	adds	r2, #1
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   1dd9c:	1acb      	subs	r3, r1, r3
   1dd9e:	b2d2      	uxtb	r2, r2
   1dda0:	435a      	muls	r2, r3
   1dda2:	464b      	mov	r3, r9
   1dda4:	681b      	ldr	r3, [r3, #0]
   1dda6:	469c      	mov	ip, r3
   1dda8:	4462      	add	r2, ip
		var_width = *p;
   1ddaa:	7817      	ldrb	r7, [r2, #0]
		for ( i = 0; i < var_width; i++ ) {
   1ddac:	2f00      	cmp	r7, #0
   1ddae:	d0cf      	beq.n	1dd50 <glcd_draw_char_xy+0xb0>
   1ddb0:	9202      	str	r2, [sp, #8]
   1ddb2:	4652      	mov	r2, sl
   1ddb4:	1e7b      	subs	r3, r7, #1
   1ddb6:	3201      	adds	r2, #1
   1ddb8:	b2db      	uxtb	r3, r3
   1ddba:	189b      	adds	r3, r3, r2
   1ddbc:	9305      	str	r3, [sp, #20]
   1ddbe:	465b      	mov	r3, fp
   1ddc0:	9a01      	ldr	r2, [sp, #4]
   1ddc2:	3b01      	subs	r3, #1
   1ddc4:	00d2      	lsls	r2, r2, #3
   1ddc6:	189b      	adds	r3, r3, r2
   1ddc8:	b2db      	uxtb	r3, r3
   1ddca:	9303      	str	r3, [sp, #12]
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1ddcc:	9706      	str	r7, [sp, #24]
			for ( j = 0; j < bytes_high; j++ ) {
   1ddce:	9b01      	ldr	r3, [sp, #4]
   1ddd0:	2b00      	cmp	r3, #0
   1ddd2:	d100      	bne.n	1ddd6 <glcd_draw_char_xy+0x136>
   1ddd4:	e201      	b.n	1e1da <glcd_draw_char_xy+0x53a>
				uint8_t dat = *( p + i*bytes_high + j );
   1ddd6:	9b02      	ldr	r3, [sp, #8]
   1ddd8:	785f      	ldrb	r7, [r3, #1]
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   1ddda:	4653      	mov	r3, sl
   1dddc:	2b7f      	cmp	r3, #127	; 0x7f
   1ddde:	dcb7      	bgt.n	1dd50 <glcd_draw_char_xy+0xb0>
   1dde0:	465b      	mov	r3, fp
   1dde2:	2b3f      	cmp	r3, #63	; 0x3f
   1dde4:	dcb4      	bgt.n	1dd50 <glcd_draw_char_xy+0xb0>
   1dde6:	465b      	mov	r3, fp
   1dde8:	1dde      	adds	r6, r3, #7
   1ddea:	9b02      	ldr	r3, [sp, #8]
   1ddec:	465c      	mov	r4, fp
   1ddee:	4698      	mov	r8, r3
   1ddf0:	2500      	movs	r5, #0
   1ddf2:	b2f6      	uxtb	r6, r6
					if ((j*8 + bit) >= font_current.height) {
   1ddf4:	464b      	mov	r3, r9
   1ddf6:	795b      	ldrb	r3, [r3, #5]
   1ddf8:	42ab      	cmp	r3, r5
   1ddfa:	dd0a      	ble.n	1de12 <glcd_draw_char_xy+0x172>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1ddfc:	466a      	mov	r2, sp
   1ddfe:	4653      	mov	r3, sl
   1de00:	7413      	strb	r3, [r2, #16]
   1de02:	b2e1      	uxtb	r1, r4
   1de04:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   1de06:	07fb      	lsls	r3, r7, #31
   1de08:	d500      	bpl.n	1de0c <glcd_draw_char_xy+0x16c>
   1de0a:	e18c      	b.n	1e126 <glcd_draw_char_xy+0x486>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1de0c:	2200      	movs	r2, #0
   1de0e:	4b5a      	ldr	r3, [pc, #360]	; (1df78 <glcd_draw_char_xy+0x2d8>)
   1de10:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   1de12:	2c3f      	cmp	r4, #63	; 0x3f
   1de14:	d09c      	beq.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1de16:	464b      	mov	r3, r9
   1de18:	795a      	ldrb	r2, [r3, #5]
   1de1a:	1c6b      	adds	r3, r5, #1
   1de1c:	429a      	cmp	r2, r3
   1de1e:	dd0b      	ble.n	1de38 <glcd_draw_char_xy+0x198>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1de20:	466a      	mov	r2, sp
   1de22:	4653      	mov	r3, sl
   1de24:	1fb1      	subs	r1, r6, #6
   1de26:	7413      	strb	r3, [r2, #16]
   1de28:	b2c9      	uxtb	r1, r1
   1de2a:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   1de2c:	07bb      	lsls	r3, r7, #30
   1de2e:	d500      	bpl.n	1de32 <glcd_draw_char_xy+0x192>
   1de30:	e182      	b.n	1e138 <glcd_draw_char_xy+0x498>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1de32:	2200      	movs	r2, #0
   1de34:	4b50      	ldr	r3, [pc, #320]	; (1df78 <glcd_draw_char_xy+0x2d8>)
   1de36:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   1de38:	2c3e      	cmp	r4, #62	; 0x3e
   1de3a:	d100      	bne.n	1de3e <glcd_draw_char_xy+0x19e>
   1de3c:	e788      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1de3e:	464b      	mov	r3, r9
   1de40:	795a      	ldrb	r2, [r3, #5]
   1de42:	1cab      	adds	r3, r5, #2
   1de44:	429a      	cmp	r2, r3
   1de46:	dd0b      	ble.n	1de60 <glcd_draw_char_xy+0x1c0>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1de48:	466a      	mov	r2, sp
   1de4a:	4653      	mov	r3, sl
   1de4c:	1f71      	subs	r1, r6, #5
   1de4e:	7413      	strb	r3, [r2, #16]
   1de50:	b2c9      	uxtb	r1, r1
   1de52:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   1de54:	077b      	lsls	r3, r7, #29
   1de56:	d500      	bpl.n	1de5a <glcd_draw_char_xy+0x1ba>
   1de58:	e177      	b.n	1e14a <glcd_draw_char_xy+0x4aa>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1de5a:	2200      	movs	r2, #0
   1de5c:	4b46      	ldr	r3, [pc, #280]	; (1df78 <glcd_draw_char_xy+0x2d8>)
   1de5e:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   1de60:	2c3d      	cmp	r4, #61	; 0x3d
   1de62:	d100      	bne.n	1de66 <glcd_draw_char_xy+0x1c6>
   1de64:	e774      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1de66:	464b      	mov	r3, r9
   1de68:	795a      	ldrb	r2, [r3, #5]
   1de6a:	1ceb      	adds	r3, r5, #3
   1de6c:	429a      	cmp	r2, r3
   1de6e:	dd0b      	ble.n	1de88 <glcd_draw_char_xy+0x1e8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1de70:	466a      	mov	r2, sp
   1de72:	4653      	mov	r3, sl
   1de74:	1f31      	subs	r1, r6, #4
   1de76:	7413      	strb	r3, [r2, #16]
   1de78:	b2c9      	uxtb	r1, r1
   1de7a:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   1de7c:	073b      	lsls	r3, r7, #28
   1de7e:	d500      	bpl.n	1de82 <glcd_draw_char_xy+0x1e2>
   1de80:	e16c      	b.n	1e15c <glcd_draw_char_xy+0x4bc>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1de82:	2200      	movs	r2, #0
   1de84:	4b3c      	ldr	r3, [pc, #240]	; (1df78 <glcd_draw_char_xy+0x2d8>)
   1de86:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   1de88:	2c3c      	cmp	r4, #60	; 0x3c
   1de8a:	d100      	bne.n	1de8e <glcd_draw_char_xy+0x1ee>
   1de8c:	e760      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1de8e:	464b      	mov	r3, r9
   1de90:	795a      	ldrb	r2, [r3, #5]
   1de92:	1d2b      	adds	r3, r5, #4
   1de94:	429a      	cmp	r2, r3
   1de96:	dd0b      	ble.n	1deb0 <glcd_draw_char_xy+0x210>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1de98:	466a      	mov	r2, sp
   1de9a:	4653      	mov	r3, sl
   1de9c:	1ef1      	subs	r1, r6, #3
   1de9e:	7413      	strb	r3, [r2, #16]
   1dea0:	b2c9      	uxtb	r1, r1
   1dea2:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   1dea4:	06fb      	lsls	r3, r7, #27
   1dea6:	d500      	bpl.n	1deaa <glcd_draw_char_xy+0x20a>
   1dea8:	e161      	b.n	1e16e <glcd_draw_char_xy+0x4ce>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1deaa:	2200      	movs	r2, #0
   1deac:	4b32      	ldr	r3, [pc, #200]	; (1df78 <glcd_draw_char_xy+0x2d8>)
   1deae:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   1deb0:	2c3b      	cmp	r4, #59	; 0x3b
   1deb2:	d100      	bne.n	1deb6 <glcd_draw_char_xy+0x216>
   1deb4:	e74c      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1deb6:	464b      	mov	r3, r9
   1deb8:	795a      	ldrb	r2, [r3, #5]
   1deba:	1d6b      	adds	r3, r5, #5
   1debc:	429a      	cmp	r2, r3
   1debe:	dd0b      	ble.n	1ded8 <glcd_draw_char_xy+0x238>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1dec0:	466a      	mov	r2, sp
   1dec2:	4653      	mov	r3, sl
   1dec4:	1eb1      	subs	r1, r6, #2
   1dec6:	7413      	strb	r3, [r2, #16]
   1dec8:	b2c9      	uxtb	r1, r1
   1deca:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   1decc:	06bb      	lsls	r3, r7, #26
   1dece:	d500      	bpl.n	1ded2 <glcd_draw_char_xy+0x232>
   1ded0:	e156      	b.n	1e180 <glcd_draw_char_xy+0x4e0>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1ded2:	2200      	movs	r2, #0
   1ded4:	4b28      	ldr	r3, [pc, #160]	; (1df78 <glcd_draw_char_xy+0x2d8>)
   1ded6:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   1ded8:	2c3a      	cmp	r4, #58	; 0x3a
   1deda:	d100      	bne.n	1dede <glcd_draw_char_xy+0x23e>
   1dedc:	e738      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1dede:	464b      	mov	r3, r9
   1dee0:	795a      	ldrb	r2, [r3, #5]
   1dee2:	1dab      	adds	r3, r5, #6
   1dee4:	429a      	cmp	r2, r3
   1dee6:	dd0b      	ble.n	1df00 <glcd_draw_char_xy+0x260>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1dee8:	466a      	mov	r2, sp
   1deea:	4653      	mov	r3, sl
   1deec:	1e71      	subs	r1, r6, #1
   1deee:	7413      	strb	r3, [r2, #16]
   1def0:	b2c9      	uxtb	r1, r1
   1def2:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   1def4:	067b      	lsls	r3, r7, #25
   1def6:	d500      	bpl.n	1defa <glcd_draw_char_xy+0x25a>
   1def8:	e14b      	b.n	1e192 <glcd_draw_char_xy+0x4f2>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1defa:	2200      	movs	r2, #0
   1defc:	4b1e      	ldr	r3, [pc, #120]	; (1df78 <glcd_draw_char_xy+0x2d8>)
   1defe:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   1df00:	2c39      	cmp	r4, #57	; 0x39
   1df02:	d100      	bne.n	1df06 <glcd_draw_char_xy+0x266>
   1df04:	e724      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1df06:	464b      	mov	r3, r9
   1df08:	795a      	ldrb	r2, [r3, #5]
   1df0a:	1deb      	adds	r3, r5, #7
   1df0c:	429a      	cmp	r2, r3
   1df0e:	dd0b      	ble.n	1df28 <glcd_draw_char_xy+0x288>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1df10:	466a      	mov	r2, sp
   1df12:	4653      	mov	r3, sl
   1df14:	7413      	strb	r3, [r2, #16]
					if (dat & (1<<bit)) {
   1df16:	09ff      	lsrs	r7, r7, #7
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1df18:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   1df1a:	2f00      	cmp	r7, #0
   1df1c:	d000      	beq.n	1df20 <glcd_draw_char_xy+0x280>
   1df1e:	e141      	b.n	1e1a4 <glcd_draw_char_xy+0x504>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1df20:	2200      	movs	r2, #0
   1df22:	0031      	movs	r1, r6
   1df24:	4b14      	ldr	r3, [pc, #80]	; (1df78 <glcd_draw_char_xy+0x2d8>)
   1df26:	4798      	blx	r3
			for ( j = 0; j < bytes_high; j++ ) {
   1df28:	9b03      	ldr	r3, [sp, #12]
   1df2a:	42b3      	cmp	r3, r6
   1df2c:	d100      	bne.n	1df30 <glcd_draw_char_xy+0x290>
   1df2e:	e154      	b.n	1e1da <glcd_draw_char_xy+0x53a>
				uint8_t dat = *( p + i*bytes_high + j );
   1df30:	4643      	mov	r3, r8
   1df32:	789f      	ldrb	r7, [r3, #2]
   1df34:	2301      	movs	r3, #1
   1df36:	469c      	mov	ip, r3
   1df38:	3608      	adds	r6, #8
   1df3a:	3408      	adds	r4, #8
   1df3c:	3508      	adds	r5, #8
   1df3e:	44e0      	add	r8, ip
   1df40:	b2f6      	uxtb	r6, r6
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   1df42:	2c40      	cmp	r4, #64	; 0x40
   1df44:	d000      	beq.n	1df48 <glcd_draw_char_xy+0x2a8>
   1df46:	e755      	b.n	1ddf4 <glcd_draw_char_xy+0x154>
   1df48:	e702      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
		bytes_high = font_current.height / 8 + 1;
   1df4a:	464a      	mov	r2, r9
		bytes_per_char = font_current.width * bytes_high;
   1df4c:	4649      	mov	r1, r9
		bytes_high = font_current.height / 8 + 1;
   1df4e:	7952      	ldrb	r2, [r2, #5]
		bytes_per_char = font_current.width * bytes_high;
   1df50:	790f      	ldrb	r7, [r1, #4]
		bytes_high = font_current.height / 8 + 1;
   1df52:	08d2      	lsrs	r2, r2, #3
   1df54:	1c51      	adds	r1, r2, #1
		bytes_per_char = font_current.width * bytes_high;
   1df56:	4379      	muls	r1, r7
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   1df58:	9802      	ldr	r0, [sp, #8]
   1df5a:	b2c9      	uxtb	r1, r1
   1df5c:	1ac3      	subs	r3, r0, r3
   1df5e:	434b      	muls	r3, r1
   1df60:	4649      	mov	r1, r9
   1df62:	6809      	ldr	r1, [r1, #0]
   1df64:	1e78      	subs	r0, r7, #1
   1df66:	468c      	mov	ip, r1
   1df68:	4463      	add	r3, ip
   1df6a:	9303      	str	r3, [sp, #12]
		n = 0; /* How many columns back from the end */
   1df6c:	2100      	movs	r1, #0
   1df6e:	001c      	movs	r4, r3
   1df70:	e00a      	b.n	1df88 <glcd_draw_char_xy+0x2e8>
   1df72:	46c0      	nop			; (mov r8, r8)
   1df74:	20001b24 	.word	0x20001b24
   1df78:	0001cabd 	.word	0x0001cabd
				var_width--;
   1df7c:	3f01      	subs	r7, #1
   1df7e:	b2ff      	uxtb	r7, r7
				if (var_width == 0) {
   1df80:	2f00      	cmp	r7, #0
   1df82:	d007      	beq.n	1df94 <glcd_draw_char_xy+0x2f4>
			n++;
   1df84:	3101      	adds	r1, #1
   1df86:	b2c9      	uxtb	r1, r1
				offset = (font_current.width - 1 - n) * row;
   1df88:	1a43      	subs	r3, r0, r1
   1df8a:	4353      	muls	r3, r2
				max_byte = *(p + offset);
   1df8c:	b2db      	uxtb	r3, r3
			if (max_byte == 0) {
   1df8e:	5ce3      	ldrb	r3, [r4, r3]
   1df90:	2b00      	cmp	r3, #0
   1df92:	d0f3      	beq.n	1df7c <glcd_draw_char_xy+0x2dc>
   1df94:	465b      	mov	r3, fp
   1df96:	3307      	adds	r3, #7
   1df98:	b2db      	uxtb	r3, r3
   1df9a:	9305      	str	r3, [sp, #20]
   1df9c:	00d2      	lsls	r2, r2, #3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   1df9e:	2300      	movs	r3, #0
   1dfa0:	445a      	add	r2, fp
   1dfa2:	465c      	mov	r4, fp
   1dfa4:	2606      	movs	r6, #6
   1dfa6:	46bb      	mov	fp, r7
   1dfa8:	3208      	adds	r2, #8
   1dfaa:	920d      	str	r2, [sp, #52]	; 0x34
   1dfac:	9301      	str	r3, [sp, #4]
			for ( i = 0; i < var_width; i++ ) {
   1dfae:	465b      	mov	r3, fp
   1dfb0:	2b00      	cmp	r3, #0
   1dfb2:	d100      	bne.n	1dfb6 <glcd_draw_char_xy+0x316>
   1dfb4:	e102      	b.n	1e1bc <glcd_draw_char_xy+0x51c>
				dat = *( p + j*font_current.width + i );
   1dfb6:	464b      	mov	r3, r9
   1dfb8:	9a01      	ldr	r2, [sp, #4]
   1dfba:	791b      	ldrb	r3, [r3, #4]
   1dfbc:	9903      	ldr	r1, [sp, #12]
   1dfbe:	4353      	muls	r3, r2
   1dfc0:	5ccf      	ldrb	r7, [r1, r3]
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   1dfc2:	4653      	mov	r3, sl
   1dfc4:	2b7f      	cmp	r3, #127	; 0x7f
   1dfc6:	dd00      	ble.n	1dfca <glcd_draw_char_xy+0x32a>
   1dfc8:	e6c2      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
   1dfca:	00d3      	lsls	r3, r2, #3
   1dfcc:	9304      	str	r3, [sp, #16]
   1dfce:	2c3f      	cmp	r4, #63	; 0x3f
   1dfd0:	dd00      	ble.n	1dfd4 <glcd_draw_char_xy+0x334>
   1dfd2:	e6bd      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1dfd4:	9a05      	ldr	r2, [sp, #20]
   1dfd6:	b2e3      	uxtb	r3, r4
   1dfd8:	9306      	str	r3, [sp, #24]
   1dfda:	0013      	movs	r3, r2
   1dfdc:	3b06      	subs	r3, #6
   1dfde:	b2db      	uxtb	r3, r3
   1dfe0:	9307      	str	r3, [sp, #28]
   1dfe2:	0013      	movs	r3, r2
   1dfe4:	3b05      	subs	r3, #5
   1dfe6:	b2db      	uxtb	r3, r3
   1dfe8:	9308      	str	r3, [sp, #32]
   1dfea:	0013      	movs	r3, r2
   1dfec:	3b04      	subs	r3, #4
   1dfee:	b2db      	uxtb	r3, r3
   1dff0:	9309      	str	r3, [sp, #36]	; 0x24
   1dff2:	0013      	movs	r3, r2
   1dff4:	3b03      	subs	r3, #3
   1dff6:	b2db      	uxtb	r3, r3
   1dff8:	930a      	str	r3, [sp, #40]	; 0x28
   1dffa:	0013      	movs	r3, r2
   1dffc:	3b02      	subs	r3, #2
   1dffe:	b2db      	uxtb	r3, r3
   1e000:	930b      	str	r3, [sp, #44]	; 0x2c
   1e002:	0013      	movs	r3, r2
   1e004:	3b01      	subs	r3, #1
   1e006:	b2db      	uxtb	r3, r3
   1e008:	930c      	str	r3, [sp, #48]	; 0x30
   1e00a:	2301      	movs	r3, #1
   1e00c:	4655      	mov	r5, sl
   1e00e:	4698      	mov	r8, r3
					if ((j*8 + bit) >= font_current.height) {
   1e010:	464b      	mov	r3, r9
   1e012:	9a04      	ldr	r2, [sp, #16]
   1e014:	795b      	ldrb	r3, [r3, #5]
   1e016:	4293      	cmp	r3, r2
   1e018:	dd07      	ble.n	1e02a <glcd_draw_char_xy+0x38a>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e01a:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   1e01c:	07fb      	lsls	r3, r7, #31
   1e01e:	d500      	bpl.n	1e022 <glcd_draw_char_xy+0x382>
   1e020:	e085      	b.n	1e12e <glcd_draw_char_xy+0x48e>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1e022:	2200      	movs	r2, #0
   1e024:	9906      	ldr	r1, [sp, #24]
   1e026:	4b74      	ldr	r3, [pc, #464]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e028:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   1e02a:	2c3f      	cmp	r4, #63	; 0x3f
   1e02c:	d100      	bne.n	1e030 <glcd_draw_char_xy+0x390>
   1e02e:	e68f      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1e030:	464b      	mov	r3, r9
   1e032:	795a      	ldrb	r2, [r3, #5]
   1e034:	1f73      	subs	r3, r6, #5
   1e036:	429a      	cmp	r2, r3
   1e038:	dd06      	ble.n	1e048 <glcd_draw_char_xy+0x3a8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e03a:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   1e03c:	07bb      	lsls	r3, r7, #30
   1e03e:	d47f      	bmi.n	1e140 <glcd_draw_char_xy+0x4a0>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1e040:	2200      	movs	r2, #0
   1e042:	9907      	ldr	r1, [sp, #28]
   1e044:	4b6c      	ldr	r3, [pc, #432]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e046:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   1e048:	2c3e      	cmp	r4, #62	; 0x3e
   1e04a:	d100      	bne.n	1e04e <glcd_draw_char_xy+0x3ae>
   1e04c:	e680      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1e04e:	464a      	mov	r2, r9
   1e050:	7952      	ldrb	r2, [r2, #5]
   1e052:	1f33      	subs	r3, r6, #4
   1e054:	4293      	cmp	r3, r2
   1e056:	da06      	bge.n	1e066 <glcd_draw_char_xy+0x3c6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e058:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   1e05a:	077b      	lsls	r3, r7, #29
   1e05c:	d479      	bmi.n	1e152 <glcd_draw_char_xy+0x4b2>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1e05e:	2200      	movs	r2, #0
   1e060:	9908      	ldr	r1, [sp, #32]
   1e062:	4b65      	ldr	r3, [pc, #404]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e064:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   1e066:	2c3d      	cmp	r4, #61	; 0x3d
   1e068:	d100      	bne.n	1e06c <glcd_draw_char_xy+0x3cc>
   1e06a:	e671      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1e06c:	464a      	mov	r2, r9
   1e06e:	7952      	ldrb	r2, [r2, #5]
   1e070:	1ef3      	subs	r3, r6, #3
   1e072:	4293      	cmp	r3, r2
   1e074:	da06      	bge.n	1e084 <glcd_draw_char_xy+0x3e4>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e076:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   1e078:	073b      	lsls	r3, r7, #28
   1e07a:	d473      	bmi.n	1e164 <glcd_draw_char_xy+0x4c4>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1e07c:	2200      	movs	r2, #0
   1e07e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1e080:	4b5d      	ldr	r3, [pc, #372]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e082:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   1e084:	2c3c      	cmp	r4, #60	; 0x3c
   1e086:	d100      	bne.n	1e08a <glcd_draw_char_xy+0x3ea>
   1e088:	e662      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1e08a:	464a      	mov	r2, r9
   1e08c:	7952      	ldrb	r2, [r2, #5]
   1e08e:	1eb3      	subs	r3, r6, #2
   1e090:	4293      	cmp	r3, r2
   1e092:	da06      	bge.n	1e0a2 <glcd_draw_char_xy+0x402>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e094:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   1e096:	06fb      	lsls	r3, r7, #27
   1e098:	d46d      	bmi.n	1e176 <glcd_draw_char_xy+0x4d6>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1e09a:	2200      	movs	r2, #0
   1e09c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e09e:	4b56      	ldr	r3, [pc, #344]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e0a0:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   1e0a2:	2c3b      	cmp	r4, #59	; 0x3b
   1e0a4:	d100      	bne.n	1e0a8 <glcd_draw_char_xy+0x408>
   1e0a6:	e653      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1e0a8:	464a      	mov	r2, r9
   1e0aa:	7952      	ldrb	r2, [r2, #5]
   1e0ac:	1e73      	subs	r3, r6, #1
   1e0ae:	4293      	cmp	r3, r2
   1e0b0:	da06      	bge.n	1e0c0 <glcd_draw_char_xy+0x420>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e0b2:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   1e0b4:	06bb      	lsls	r3, r7, #26
   1e0b6:	d467      	bmi.n	1e188 <glcd_draw_char_xy+0x4e8>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1e0b8:	2200      	movs	r2, #0
   1e0ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e0bc:	4b4e      	ldr	r3, [pc, #312]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e0be:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   1e0c0:	2c3a      	cmp	r4, #58	; 0x3a
   1e0c2:	d100      	bne.n	1e0c6 <glcd_draw_char_xy+0x426>
   1e0c4:	e644      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1e0c6:	464b      	mov	r3, r9
   1e0c8:	795b      	ldrb	r3, [r3, #5]
   1e0ca:	429e      	cmp	r6, r3
   1e0cc:	da06      	bge.n	1e0dc <glcd_draw_char_xy+0x43c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e0ce:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   1e0d0:	067b      	lsls	r3, r7, #25
   1e0d2:	d462      	bmi.n	1e19a <glcd_draw_char_xy+0x4fa>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1e0d4:	2200      	movs	r2, #0
   1e0d6:	990c      	ldr	r1, [sp, #48]	; 0x30
   1e0d8:	4b47      	ldr	r3, [pc, #284]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e0da:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   1e0dc:	2c39      	cmp	r4, #57	; 0x39
   1e0de:	d100      	bne.n	1e0e2 <glcd_draw_char_xy+0x442>
   1e0e0:	e636      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   1e0e2:	464a      	mov	r2, r9
   1e0e4:	7952      	ldrb	r2, [r2, #5]
   1e0e6:	1c73      	adds	r3, r6, #1
   1e0e8:	4293      	cmp	r3, r2
   1e0ea:	da07      	bge.n	1e0fc <glcd_draw_char_xy+0x45c>
					if (dat & (1<<bit)) {
   1e0ec:	09ff      	lsrs	r7, r7, #7
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e0ee:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   1e0f0:	2f00      	cmp	r7, #0
   1e0f2:	d15c      	bne.n	1e1ae <glcd_draw_char_xy+0x50e>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   1e0f4:	2200      	movs	r2, #0
   1e0f6:	9905      	ldr	r1, [sp, #20]
   1e0f8:	4b3f      	ldr	r3, [pc, #252]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e0fa:	4798      	blx	r3
			for ( i = 0; i < var_width; i++ ) {
   1e0fc:	4643      	mov	r3, r8
   1e0fe:	466a      	mov	r2, sp
   1e100:	7213      	strb	r3, [r2, #8]
   1e102:	7a13      	ldrb	r3, [r2, #8]
   1e104:	459b      	cmp	fp, r3
   1e106:	d959      	bls.n	1e1bc <glcd_draw_char_xy+0x51c>
				dat = *( p + j*font_current.width + i );
   1e108:	464b      	mov	r3, r9
   1e10a:	9a01      	ldr	r2, [sp, #4]
   1e10c:	791b      	ldrb	r3, [r3, #4]
   1e10e:	3501      	adds	r5, #1
   1e110:	4353      	muls	r3, r2
   1e112:	9a03      	ldr	r2, [sp, #12]
   1e114:	4442      	add	r2, r8
   1e116:	5cd7      	ldrb	r7, [r2, r3]
   1e118:	2301      	movs	r3, #1
   1e11a:	469c      	mov	ip, r3
   1e11c:	44e0      	add	r8, ip
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   1e11e:	2d80      	cmp	r5, #128	; 0x80
   1e120:	d000      	beq.n	1e124 <glcd_draw_char_xy+0x484>
   1e122:	e775      	b.n	1e010 <glcd_draw_char_xy+0x370>
   1e124:	e614      	b.n	1dd50 <glcd_draw_char_xy+0xb0>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e126:	2201      	movs	r2, #1
   1e128:	4b33      	ldr	r3, [pc, #204]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e12a:	4798      	blx	r3
   1e12c:	e671      	b.n	1de12 <glcd_draw_char_xy+0x172>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e12e:	2201      	movs	r2, #1
   1e130:	9906      	ldr	r1, [sp, #24]
   1e132:	4b31      	ldr	r3, [pc, #196]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e134:	4798      	blx	r3
   1e136:	e778      	b.n	1e02a <glcd_draw_char_xy+0x38a>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e138:	2201      	movs	r2, #1
   1e13a:	4b2f      	ldr	r3, [pc, #188]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e13c:	4798      	blx	r3
   1e13e:	e67b      	b.n	1de38 <glcd_draw_char_xy+0x198>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e140:	2201      	movs	r2, #1
   1e142:	9907      	ldr	r1, [sp, #28]
   1e144:	4b2c      	ldr	r3, [pc, #176]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e146:	4798      	blx	r3
   1e148:	e77e      	b.n	1e048 <glcd_draw_char_xy+0x3a8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e14a:	2201      	movs	r2, #1
   1e14c:	4b2a      	ldr	r3, [pc, #168]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e14e:	4798      	blx	r3
   1e150:	e686      	b.n	1de60 <glcd_draw_char_xy+0x1c0>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e152:	2201      	movs	r2, #1
   1e154:	9908      	ldr	r1, [sp, #32]
   1e156:	4b28      	ldr	r3, [pc, #160]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e158:	4798      	blx	r3
   1e15a:	e784      	b.n	1e066 <glcd_draw_char_xy+0x3c6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e15c:	2201      	movs	r2, #1
   1e15e:	4b26      	ldr	r3, [pc, #152]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e160:	4798      	blx	r3
   1e162:	e691      	b.n	1de88 <glcd_draw_char_xy+0x1e8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e164:	2201      	movs	r2, #1
   1e166:	9909      	ldr	r1, [sp, #36]	; 0x24
   1e168:	4b23      	ldr	r3, [pc, #140]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e16a:	4798      	blx	r3
   1e16c:	e78a      	b.n	1e084 <glcd_draw_char_xy+0x3e4>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e16e:	2201      	movs	r2, #1
   1e170:	4b21      	ldr	r3, [pc, #132]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e172:	4798      	blx	r3
   1e174:	e69c      	b.n	1deb0 <glcd_draw_char_xy+0x210>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e176:	2201      	movs	r2, #1
   1e178:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e17a:	4b1f      	ldr	r3, [pc, #124]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e17c:	4798      	blx	r3
   1e17e:	e790      	b.n	1e0a2 <glcd_draw_char_xy+0x402>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e180:	2201      	movs	r2, #1
   1e182:	4b1d      	ldr	r3, [pc, #116]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e184:	4798      	blx	r3
   1e186:	e6a7      	b.n	1ded8 <glcd_draw_char_xy+0x238>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e188:	2201      	movs	r2, #1
   1e18a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e18c:	4b1a      	ldr	r3, [pc, #104]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e18e:	4798      	blx	r3
   1e190:	e796      	b.n	1e0c0 <glcd_draw_char_xy+0x420>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e192:	2201      	movs	r2, #1
   1e194:	4b18      	ldr	r3, [pc, #96]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e196:	4798      	blx	r3
   1e198:	e6b2      	b.n	1df00 <glcd_draw_char_xy+0x260>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e19a:	2201      	movs	r2, #1
   1e19c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1e19e:	4b16      	ldr	r3, [pc, #88]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e1a0:	4798      	blx	r3
   1e1a2:	e79b      	b.n	1e0dc <glcd_draw_char_xy+0x43c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e1a4:	2201      	movs	r2, #1
   1e1a6:	0031      	movs	r1, r6
   1e1a8:	4b13      	ldr	r3, [pc, #76]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e1aa:	4798      	blx	r3
   1e1ac:	e6bc      	b.n	1df28 <glcd_draw_char_xy+0x288>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   1e1ae:	2201      	movs	r2, #1
   1e1b0:	9905      	ldr	r1, [sp, #20]
   1e1b2:	4b11      	ldr	r3, [pc, #68]	; (1e1f8 <glcd_draw_char_xy+0x558>)
   1e1b4:	4798      	blx	r3
   1e1b6:	e7a1      	b.n	1e0fc <glcd_draw_char_xy+0x45c>
   1e1b8:	0017      	movs	r7, r2
   1e1ba:	e5ca      	b.n	1dd52 <glcd_draw_char_xy+0xb2>
   1e1bc:	9b01      	ldr	r3, [sp, #4]
   1e1be:	3408      	adds	r4, #8
   1e1c0:	3301      	adds	r3, #1
   1e1c2:	9301      	str	r3, [sp, #4]
   1e1c4:	9b05      	ldr	r3, [sp, #20]
   1e1c6:	3608      	adds	r6, #8
   1e1c8:	3308      	adds	r3, #8
   1e1ca:	b2db      	uxtb	r3, r3
   1e1cc:	9305      	str	r3, [sp, #20]
		for ( j = 0; j < bytes_high; j++ ) {
   1e1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e1d0:	42a3      	cmp	r3, r4
   1e1d2:	d000      	beq.n	1e1d6 <glcd_draw_char_xy+0x536>
   1e1d4:	e6eb      	b.n	1dfae <glcd_draw_char_xy+0x30e>
   1e1d6:	465f      	mov	r7, fp
   1e1d8:	e5bb      	b.n	1dd52 <glcd_draw_char_xy+0xb2>
   1e1da:	9a01      	ldr	r2, [sp, #4]
   1e1dc:	9b02      	ldr	r3, [sp, #8]
   1e1de:	4694      	mov	ip, r2
   1e1e0:	4463      	add	r3, ip
   1e1e2:	9302      	str	r3, [sp, #8]
   1e1e4:	2301      	movs	r3, #1
   1e1e6:	469c      	mov	ip, r3
		for ( i = 0; i < var_width; i++ ) {
   1e1e8:	9b05      	ldr	r3, [sp, #20]
   1e1ea:	44e2      	add	sl, ip
   1e1ec:	4553      	cmp	r3, sl
   1e1ee:	d000      	beq.n	1e1f2 <glcd_draw_char_xy+0x552>
   1e1f0:	e5ed      	b.n	1ddce <glcd_draw_char_xy+0x12e>
   1e1f2:	9f06      	ldr	r7, [sp, #24]
   1e1f4:	e5ad      	b.n	1dd52 <glcd_draw_char_xy+0xb2>
   1e1f6:	46c0      	nop			; (mov r8, r8)
   1e1f8:	0001cabd 	.word	0x0001cabd

0001e1fc <glcd_draw_string_xy>:

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
   1e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   1e1fe:	4b0c      	ldr	r3, [pc, #48]	; (1e230 <glcd_draw_string_xy+0x34>)
{
   1e200:	0014      	movs	r4, r2
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   1e202:	795a      	ldrb	r2, [r3, #5]
   1e204:	233f      	movs	r3, #63	; 0x3f
{
   1e206:	0005      	movs	r5, r0
   1e208:	000e      	movs	r6, r1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   1e20a:	1a9b      	subs	r3, r3, r2
   1e20c:	4299      	cmp	r1, r3
   1e20e:	dc0d      	bgt.n	1e22c <glcd_draw_string_xy+0x30>
		/* Character won't fit */
		return;
	}

	while (*c) {
   1e210:	7822      	ldrb	r2, [r4, #0]
   1e212:	2a00      	cmp	r2, #0
   1e214:	d00a      	beq.n	1e22c <glcd_draw_string_xy+0x30>
   1e216:	4f07      	ldr	r7, [pc, #28]	; (1e234 <glcd_draw_string_xy+0x38>)
		width = glcd_draw_char_xy(x,y,*c);
   1e218:	0028      	movs	r0, r5
   1e21a:	0031      	movs	r1, r6
   1e21c:	47b8      	blx	r7
		x += (width + 1);
		c++;
   1e21e:	3401      	adds	r4, #1
		x += (width + 1);
   1e220:	1940      	adds	r0, r0, r5
	while (*c) {
   1e222:	7822      	ldrb	r2, [r4, #0]
		x += (width + 1);
   1e224:	3001      	adds	r0, #1
   1e226:	b2c5      	uxtb	r5, r0
	while (*c) {
   1e228:	2a00      	cmp	r2, #0
   1e22a:	d1f5      	bne.n	1e218 <glcd_draw_string_xy+0x1c>
	}		
}
   1e22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e22e:	46c0      	nop			; (mov r8, r8)
   1e230:	20001b24 	.word	0x20001b24
   1e234:	0001dca1 	.word	0x0001dca1

0001e238 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
   1e238:	b530      	push	{r4, r5, lr}
   1e23a:	ac03      	add	r4, sp, #12
   1e23c:	7825      	ldrb	r5, [r4, #0]
	font_current.font_table = font_table;
   1e23e:	4c04      	ldr	r4, [pc, #16]	; (1e250 <glcd_tiny_set_font+0x18>)
	font_current.width = width;
	font_current.height = height;
	font_current.start_char = start_char;
   1e240:	71a3      	strb	r3, [r4, #6]
	font_current.end_char = end_char;
	font_current.table_type = STANG;
   1e242:	2300      	movs	r3, #0
	font_current.end_char = end_char;
   1e244:	71e5      	strb	r5, [r4, #7]
	font_current.font_table = font_table;
   1e246:	6020      	str	r0, [r4, #0]
	font_current.width = width;
   1e248:	7121      	strb	r1, [r4, #4]
	font_current.height = height;
   1e24a:	7162      	strb	r2, [r4, #5]
	font_current.table_type = STANG;
   1e24c:	7223      	strb	r3, [r4, #8]
}
   1e24e:	bd30      	pop	{r4, r5, pc}
   1e250:	20001b24 	.word	0x20001b24

0001e254 <glcd_tiny_draw_char>:

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
   1e254:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e256:	46c6      	mov	lr, r8
   1e258:	b500      	push	{lr}
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
   1e25a:	4c22      	ldr	r4, [pc, #136]	; (1e2e4 <glcd_tiny_draw_char+0x90>)
{
   1e25c:	0006      	movs	r6, r0
	if (font_current.height >= 8) {
   1e25e:	7967      	ldrb	r7, [r4, #5]
{
   1e260:	4688      	mov	r8, r1
   1e262:	0015      	movs	r5, r2
	if (font_current.height >= 8) {
   1e264:	2f07      	cmp	r7, #7
   1e266:	d80e      	bhi.n	1e286 <glcd_tiny_draw_char+0x32>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
   1e268:	79a3      	ldrb	r3, [r4, #6]
   1e26a:	4293      	cmp	r3, r2
   1e26c:	d90e      	bls.n	1e28c <glcd_tiny_draw_char+0x38>
		c = '.';
   1e26e:	252e      	movs	r5, #46	; 0x2e
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
   1e270:	3701      	adds	r7, #1
   1e272:	0039      	movs	r1, r7
   1e274:	2040      	movs	r0, #64	; 0x40
   1e276:	4b1c      	ldr	r3, [pc, #112]	; (1e2e8 <glcd_tiny_draw_char+0x94>)
   1e278:	4798      	blx	r3
   1e27a:	4580      	cmp	r8, r0
   1e27c:	da03      	bge.n	1e286 <glcd_tiny_draw_char+0x32>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
   1e27e:	7922      	ldrb	r2, [r4, #4]
   1e280:	18b2      	adds	r2, r6, r2
   1e282:	2a7f      	cmp	r2, #127	; 0x7f
   1e284:	dd06      	ble.n	1e294 <glcd_tiny_draw_char+0x40>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
   1e286:	bc04      	pop	{r2}
   1e288:	4690      	mov	r8, r2
   1e28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (c < font_current.start_char || c > font_current.end_char) {
   1e28c:	79e3      	ldrb	r3, [r4, #7]
   1e28e:	4293      	cmp	r3, r2
   1e290:	d2ee      	bcs.n	1e270 <glcd_tiny_draw_char+0x1c>
   1e292:	e7ec      	b.n	1e26e <glcd_tiny_draw_char+0x1a>
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
   1e294:	4643      	mov	r3, r8
   1e296:	4640      	mov	r0, r8
   1e298:	b2f9      	uxtb	r1, r7
   1e29a:	3301      	adds	r3, #1
   1e29c:	434b      	muls	r3, r1
   1e29e:	4341      	muls	r1, r0
   1e2a0:	b2d2      	uxtb	r2, r2
   1e2a2:	b2db      	uxtb	r3, r3
   1e2a4:	b2c9      	uxtb	r1, r1
   1e2a6:	0030      	movs	r0, r6
   1e2a8:	4f10      	ldr	r7, [pc, #64]	; (1e2ec <glcd_tiny_draw_char+0x98>)
   1e2aa:	47b8      	blx	r7
	for ( i = 0; i < font_current.width; i++ ) {
   1e2ac:	7922      	ldrb	r2, [r4, #4]
   1e2ae:	2a00      	cmp	r2, #0
   1e2b0:	d0e9      	beq.n	1e286 <glcd_tiny_draw_char+0x32>
   1e2b2:	4643      	mov	r3, r8
   1e2b4:	480e      	ldr	r0, [pc, #56]	; (1e2f0 <glcd_tiny_draw_char+0x9c>)
   1e2b6:	01d9      	lsls	r1, r3, #7
   1e2b8:	4680      	mov	r8, r0
   1e2ba:	2300      	movs	r3, #0
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   1e2bc:	79a0      	ldrb	r0, [r4, #6]
   1e2be:	1a28      	subs	r0, r5, r0
   1e2c0:	4342      	muls	r2, r0
   1e2c2:	6820      	ldr	r0, [r4, #0]
   1e2c4:	18c0      	adds	r0, r0, r3
   1e2c6:	5c82      	ldrb	r2, [r0, r2]
   1e2c8:	4640      	mov	r0, r8
   1e2ca:	4694      	mov	ip, r2
   1e2cc:	4667      	mov	r7, ip
   1e2ce:	6800      	ldr	r0, [r0, #0]
   1e2d0:	18f2      	adds	r2, r6, r3
   1e2d2:	b2d2      	uxtb	r2, r2
   1e2d4:	1840      	adds	r0, r0, r1
   1e2d6:	5487      	strb	r7, [r0, r2]
	for ( i = 0; i < font_current.width; i++ ) {
   1e2d8:	3301      	adds	r3, #1
   1e2da:	7922      	ldrb	r2, [r4, #4]
   1e2dc:	b2db      	uxtb	r3, r3
   1e2de:	429a      	cmp	r2, r3
   1e2e0:	d8ec      	bhi.n	1e2bc <glcd_tiny_draw_char+0x68>
   1e2e2:	e7d0      	b.n	1e286 <glcd_tiny_draw_char+0x32>
   1e2e4:	20001b24 	.word	0x20001b24
   1e2e8:	00025a51 	.word	0x00025a51
   1e2ec:	0001c9d9 	.word	0x0001c9d9
   1e2f0:	20001b1c 	.word	0x20001b1c

0001e2f4 <glcd_tiny_draw_string>:

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
   1e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e2f6:	464e      	mov	r6, r9
   1e2f8:	4645      	mov	r5, r8
   1e2fa:	4657      	mov	r7, sl
   1e2fc:	46de      	mov	lr, fp
   1e2fe:	b5e0      	push	{r5, r6, r7, lr}
	if (font_current.height >= 8) {
   1e300:	4e40      	ldr	r6, [pc, #256]	; (1e404 <glcd_tiny_draw_string+0x110>)
{
   1e302:	0005      	movs	r5, r0
	if (font_current.height >= 8) {
   1e304:	7973      	ldrb	r3, [r6, #5]
{
   1e306:	4688      	mov	r8, r1
   1e308:	4691      	mov	r9, r2
	if (font_current.height >= 8) {
   1e30a:	469a      	mov	sl, r3
   1e30c:	2b07      	cmp	r3, #7
   1e30e:	d82a      	bhi.n	1e366 <glcd_tiny_draw_string+0x72>
   1e310:	4b3d      	ldr	r3, [pc, #244]	; (1e408 <glcd_tiny_draw_string+0x114>)
   1e312:	469b      	mov	fp, r3
		return;
	}
	while (*str) {
   1e314:	464b      	mov	r3, r9
   1e316:	781f      	ldrb	r7, [r3, #0]
   1e318:	2f00      	cmp	r7, #0
   1e31a:	d024      	beq.n	1e366 <glcd_tiny_draw_string+0x72>
		glcd_tiny_draw_char(x, line, *str++);
   1e31c:	2301      	movs	r3, #1
   1e31e:	469c      	mov	ip, r3
	if (font_current.height >= 8) {
   1e320:	4653      	mov	r3, sl
		glcd_tiny_draw_char(x, line, *str++);
   1e322:	44e1      	add	r9, ip
	if (font_current.height >= 8) {
   1e324:	2b07      	cmp	r3, #7
   1e326:	d826      	bhi.n	1e376 <glcd_tiny_draw_string+0x82>
	if (c < font_current.start_char || c > font_current.end_char) {
   1e328:	79b3      	ldrb	r3, [r6, #6]
   1e32a:	42bb      	cmp	r3, r7
   1e32c:	d821      	bhi.n	1e372 <glcd_tiny_draw_string+0x7e>
   1e32e:	79f3      	ldrb	r3, [r6, #7]
   1e330:	42bb      	cmp	r3, r7
   1e332:	d31e      	bcc.n	1e372 <glcd_tiny_draw_string+0x7e>
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
   1e334:	4653      	mov	r3, sl
   1e336:	1c5c      	adds	r4, r3, #1
   1e338:	0021      	movs	r1, r4
   1e33a:	4b34      	ldr	r3, [pc, #208]	; (1e40c <glcd_tiny_draw_string+0x118>)
   1e33c:	2040      	movs	r0, #64	; 0x40
   1e33e:	4798      	blx	r3
   1e340:	7933      	ldrb	r3, [r6, #4]
   1e342:	4580      	cmp	r8, r0
   1e344:	da24      	bge.n	1e390 <glcd_tiny_draw_string+0x9c>
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
   1e346:	18ea      	adds	r2, r5, r3
   1e348:	2a7f      	cmp	r2, #127	; 0x7f
   1e34a:	dd28      	ble.n	1e39e <glcd_tiny_draw_string+0xaa>
   1e34c:	3501      	adds	r5, #1
		x += (font_current.width + 1);
   1e34e:	18ed      	adds	r5, r5, r3
   1e350:	b2ed      	uxtb	r5, r5
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   1e352:	18eb      	adds	r3, r5, r3
   1e354:	2b7f      	cmp	r3, #127	; 0x7f
   1e356:	dddd      	ble.n	1e314 <glcd_tiny_draw_string+0x20>
			x = 0; /* Ran out of this line */
			line++;
   1e358:	4643      	mov	r3, r8
   1e35a:	3301      	adds	r3, #1
   1e35c:	b2db      	uxtb	r3, r3
   1e35e:	4698      	mov	r8, r3
			x = 0; /* Ran out of this line */
   1e360:	2500      	movs	r5, #0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
   1e362:	4580      	cmp	r8, r0
   1e364:	dbd6      	blt.n	1e314 <glcd_tiny_draw_string+0x20>
			return; /* Ran out of space :( */
	}
}
   1e366:	bc3c      	pop	{r2, r3, r4, r5}
   1e368:	4690      	mov	r8, r2
   1e36a:	4699      	mov	r9, r3
   1e36c:	46a2      	mov	sl, r4
   1e36e:	46ab      	mov	fp, r5
   1e370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		c = '.';
   1e372:	272e      	movs	r7, #46	; 0x2e
   1e374:	e7de      	b.n	1e334 <glcd_tiny_draw_string+0x40>
   1e376:	7934      	ldrb	r4, [r6, #4]
   1e378:	1c59      	adds	r1, r3, #1
   1e37a:	2040      	movs	r0, #64	; 0x40
   1e37c:	4b23      	ldr	r3, [pc, #140]	; (1e40c <glcd_tiny_draw_string+0x118>)
   1e37e:	0027      	movs	r7, r4
   1e380:	4798      	blx	r3
   1e382:	3501      	adds	r5, #1
		x += (font_current.width + 1);
   1e384:	192d      	adds	r5, r5, r4
   1e386:	b2ed      	uxtb	r5, r5
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   1e388:	19ef      	adds	r7, r5, r7
   1e38a:	2f7f      	cmp	r7, #127	; 0x7f
   1e38c:	dce4      	bgt.n	1e358 <glcd_tiny_draw_string+0x64>
   1e38e:	e7e8      	b.n	1e362 <glcd_tiny_draw_string+0x6e>
   1e390:	3501      	adds	r5, #1
		x += (font_current.width + 1);
   1e392:	18ed      	adds	r5, r5, r3
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   1e394:	b2ed      	uxtb	r5, r5
   1e396:	18ed      	adds	r5, r5, r3
   1e398:	2d7f      	cmp	r5, #127	; 0x7f
   1e39a:	dcdd      	bgt.n	1e358 <glcd_tiny_draw_string+0x64>
   1e39c:	e7e3      	b.n	1e366 <glcd_tiny_draw_string+0x72>
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
   1e39e:	4643      	mov	r3, r8
   1e3a0:	4641      	mov	r1, r8
   1e3a2:	b2e4      	uxtb	r4, r4
   1e3a4:	3301      	adds	r3, #1
   1e3a6:	4363      	muls	r3, r4
   1e3a8:	434c      	muls	r4, r1
   1e3aa:	b2db      	uxtb	r3, r3
   1e3ac:	b2e1      	uxtb	r1, r4
   1e3ae:	b2d2      	uxtb	r2, r2
   1e3b0:	4c17      	ldr	r4, [pc, #92]	; (1e410 <glcd_tiny_draw_string+0x11c>)
   1e3b2:	0028      	movs	r0, r5
   1e3b4:	47a0      	blx	r4
   1e3b6:	4643      	mov	r3, r8
	for ( i = 0; i < font_current.width; i++ ) {
   1e3b8:	7934      	ldrb	r4, [r6, #4]
   1e3ba:	01d9      	lsls	r1, r3, #7
   1e3bc:	2300      	movs	r3, #0
   1e3be:	2c00      	cmp	r4, #0
   1e3c0:	d018      	beq.n	1e3f4 <glcd_tiny_draw_string+0x100>
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   1e3c2:	4658      	mov	r0, fp
   1e3c4:	79b2      	ldrb	r2, [r6, #6]
   1e3c6:	6800      	ldr	r0, [r0, #0]
   1e3c8:	1aba      	subs	r2, r7, r2
   1e3ca:	4354      	muls	r4, r2
   1e3cc:	6832      	ldr	r2, [r6, #0]
   1e3ce:	1840      	adds	r0, r0, r1
   1e3d0:	18d2      	adds	r2, r2, r3
   1e3d2:	5d14      	ldrb	r4, [r2, r4]
   1e3d4:	18ea      	adds	r2, r5, r3
   1e3d6:	b2d2      	uxtb	r2, r2
   1e3d8:	5484      	strb	r4, [r0, r2]
	for ( i = 0; i < font_current.width; i++ ) {
   1e3da:	3301      	adds	r3, #1
   1e3dc:	7934      	ldrb	r4, [r6, #4]
   1e3de:	b2db      	uxtb	r3, r3
   1e3e0:	429c      	cmp	r4, r3
   1e3e2:	d8ee      	bhi.n	1e3c2 <glcd_tiny_draw_string+0xce>
   1e3e4:	7973      	ldrb	r3, [r6, #5]
   1e3e6:	2040      	movs	r0, #64	; 0x40
   1e3e8:	469a      	mov	sl, r3
   1e3ea:	1c59      	adds	r1, r3, #1
   1e3ec:	4b07      	ldr	r3, [pc, #28]	; (1e40c <glcd_tiny_draw_string+0x118>)
   1e3ee:	0027      	movs	r7, r4
   1e3f0:	4798      	blx	r3
   1e3f2:	e7c6      	b.n	1e382 <glcd_tiny_draw_string+0x8e>
   1e3f4:	7973      	ldrb	r3, [r6, #5]
   1e3f6:	2040      	movs	r0, #64	; 0x40
   1e3f8:	1c59      	adds	r1, r3, #1
   1e3fa:	469a      	mov	sl, r3
   1e3fc:	4b03      	ldr	r3, [pc, #12]	; (1e40c <glcd_tiny_draw_string+0x118>)
   1e3fe:	4798      	blx	r3
   1e400:	2700      	movs	r7, #0
   1e402:	e7be      	b.n	1e382 <glcd_tiny_draw_string+0x8e>
   1e404:	20001b24 	.word	0x20001b24
   1e408:	20001b1c 	.word	0x20001b1c
   1e40c:	00025a51 	.word	0x00025a51
   1e410:	0001c9d9 	.word	0x0001c9d9

0001e414 <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
   1e414:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e416:	4657      	mov	r7, sl
   1e418:	464e      	mov	r6, r9
   1e41a:	46de      	mov	lr, fp
   1e41c:	4645      	mov	r5, r8
   1e41e:	b5e0      	push	{r5, r6, r7, lr}
   1e420:	b083      	sub	sp, #12
   1e422:	0003      	movs	r3, r0
   1e424:	9000      	str	r0, [sp, #0]
   1e426:	000f      	movs	r7, r1
   1e428:	0016      	movs	r6, r2
   1e42a:	9201      	str	r2, [sp, #4]
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
   1e42c:	293f      	cmp	r1, #63	; 0x3f
   1e42e:	d847      	bhi.n	1e4c0 <glcd_tiny_draw_char_xy+0xac>
   1e430:	4d28      	ldr	r5, [pc, #160]	; (1e4d4 <glcd_tiny_draw_char_xy+0xc0>)
   1e432:	7928      	ldrb	r0, [r5, #4]
   1e434:	181a      	adds	r2, r3, r0
   1e436:	2a7f      	cmp	r2, #127	; 0x7f
   1e438:	dc42      	bgt.n	1e4c0 <glcd_tiny_draw_char_xy+0xac>
   1e43a:	796b      	ldrb	r3, [r5, #5]
   1e43c:	2b07      	cmp	r3, #7
   1e43e:	d83f      	bhi.n	1e4c0 <glcd_tiny_draw_char_xy+0xac>
   1e440:	7a29      	ldrb	r1, [r5, #8]
   1e442:	2900      	cmp	r1, #0
   1e444:	d13c      	bne.n	1e4c0 <glcd_tiny_draw_char_xy+0xac>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
   1e446:	79a9      	ldrb	r1, [r5, #6]
   1e448:	42b1      	cmp	r1, r6
   1e44a:	d840      	bhi.n	1e4ce <glcd_tiny_draw_char_xy+0xba>
   1e44c:	79ec      	ldrb	r4, [r5, #7]
   1e44e:	42b4      	cmp	r4, r6
   1e450:	d33d      	bcc.n	1e4ce <glcd_tiny_draw_char_xy+0xba>
		c = '.';
	}
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
   1e452:	2800      	cmp	r0, #0
   1e454:	d02d      	beq.n	1e4b2 <glcd_tiny_draw_char_xy+0x9e>
   1e456:	2200      	movs	r2, #0
   1e458:	4693      	mov	fp, r2
   1e45a:	4a1f      	ldr	r2, [pc, #124]	; (1e4d8 <glcd_tiny_draw_char_xy+0xc4>)
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
   1e45c:	46b8      	mov	r8, r7
   1e45e:	4692      	mov	sl, r2
   1e460:	2201      	movs	r2, #1
   1e462:	4691      	mov	r9, r2
   1e464:	000a      	movs	r2, r1
   1e466:	9900      	ldr	r1, [sp, #0]
   1e468:	4459      	add	r1, fp
   1e46a:	b2ce      	uxtb	r6, r1
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   1e46c:	9901      	ldr	r1, [sp, #4]
   1e46e:	1a8a      	subs	r2, r1, r2
   1e470:	4342      	muls	r2, r0
   1e472:	6829      	ldr	r1, [r5, #0]
   1e474:	4459      	add	r1, fp
   1e476:	5c8f      	ldrb	r7, [r1, r2]
		for (yvar = 0; yvar < font_current.height; yvar++) {
   1e478:	2b00      	cmp	r3, #0
   1e47a:	d00f      	beq.n	1e49c <glcd_tiny_draw_char_xy+0x88>
   1e47c:	2400      	movs	r4, #0
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
   1e47e:	003a      	movs	r2, r7
   1e480:	464b      	mov	r3, r9
   1e482:	4122      	asrs	r2, r4
   1e484:	401a      	ands	r2, r3
   1e486:	4643      	mov	r3, r8
   1e488:	1919      	adds	r1, r3, r4
   1e48a:	b2c9      	uxtb	r1, r1
   1e48c:	0030      	movs	r0, r6
   1e48e:	47d0      	blx	sl
		for (yvar = 0; yvar < font_current.height; yvar++) {
   1e490:	3401      	adds	r4, #1
   1e492:	796b      	ldrb	r3, [r5, #5]
   1e494:	b2e4      	uxtb	r4, r4
   1e496:	42a3      	cmp	r3, r4
   1e498:	d8f1      	bhi.n	1e47e <glcd_tiny_draw_char_xy+0x6a>
   1e49a:	7928      	ldrb	r0, [r5, #4]
	for ( i = 0; i < font_current.width; i++ ) {
   1e49c:	465a      	mov	r2, fp
   1e49e:	3201      	adds	r2, #1
   1e4a0:	b2d2      	uxtb	r2, r2
   1e4a2:	4693      	mov	fp, r2
   1e4a4:	4282      	cmp	r2, r0
   1e4a6:	d201      	bcs.n	1e4ac <glcd_tiny_draw_char_xy+0x98>
   1e4a8:	79aa      	ldrb	r2, [r5, #6]
   1e4aa:	e7dc      	b.n	1e466 <glcd_tiny_draw_char_xy+0x52>
   1e4ac:	4647      	mov	r7, r8
   1e4ae:	9a00      	ldr	r2, [sp, #0]
   1e4b0:	1812      	adds	r2, r2, r0
		}
		xvar++;
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
   1e4b2:	18fb      	adds	r3, r7, r3
   1e4b4:	b2db      	uxtb	r3, r3
   1e4b6:	b2d2      	uxtb	r2, r2
   1e4b8:	0039      	movs	r1, r7
   1e4ba:	9800      	ldr	r0, [sp, #0]
   1e4bc:	4c07      	ldr	r4, [pc, #28]	; (1e4dc <glcd_tiny_draw_char_xy+0xc8>)
   1e4be:	47a0      	blx	r4
	
}
   1e4c0:	b003      	add	sp, #12
   1e4c2:	bc3c      	pop	{r2, r3, r4, r5}
   1e4c4:	4690      	mov	r8, r2
   1e4c6:	4699      	mov	r9, r3
   1e4c8:	46a2      	mov	sl, r4
   1e4ca:	46ab      	mov	fp, r5
   1e4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		c = '.';
   1e4ce:	242e      	movs	r4, #46	; 0x2e
   1e4d0:	9401      	str	r4, [sp, #4]
   1e4d2:	e7be      	b.n	1e452 <glcd_tiny_draw_char_xy+0x3e>
   1e4d4:	20001b24 	.word	0x20001b24
   1e4d8:	0001cabd 	.word	0x0001cabd
   1e4dc:	0001c9d9 	.word	0x0001c9d9

0001e4e0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   1e4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e4e2:	4645      	mov	r5, r8
   1e4e4:	46de      	mov	lr, fp
   1e4e6:	464e      	mov	r6, r9
   1e4e8:	4657      	mov	r7, sl
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   1e4ea:	0003      	movs	r3, r0
{
   1e4ec:	b5e0      	push	{r5, r6, r7, lr}
	module->hw = hw;
   1e4ee:	6019      	str	r1, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e4f0:	4bb7      	ldr	r3, [pc, #732]	; (1e7d0 <usart_init+0x2f0>)
{
   1e4f2:	b091      	sub	sp, #68	; 0x44
   1e4f4:	4680      	mov	r8, r0
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e4f6:	0008      	movs	r0, r1
   1e4f8:	4699      	mov	r9, r3
{
   1e4fa:	000c      	movs	r4, r1
   1e4fc:	0015      	movs	r5, r2
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e4fe:	4798      	blx	r3
   1e500:	0003      	movs	r3, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
   1e502:	2805      	cmp	r0, #5
   1e504:	d100      	bne.n	1e508 <usart_init+0x28>
   1e506:	e109      	b.n	1e71c <usart_init+0x23c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e508:	0006      	movs	r6, r0
   1e50a:	0007      	movs	r7, r0
   1e50c:	3612      	adds	r6, #18
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1e50e:	2201      	movs	r2, #1
   1e510:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   1e512:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1e514:	420a      	tst	r2, r1
   1e516:	d006      	beq.n	1e526 <usart_init+0x46>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   1e518:	b011      	add	sp, #68	; 0x44
   1e51a:	bc3c      	pop	{r2, r3, r4, r5}
   1e51c:	4690      	mov	r8, r2
   1e51e:	4699      	mov	r9, r3
   1e520:	46a2      	mov	sl, r4
   1e522:	46ab      	mov	fp, r5
   1e524:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1e526:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
   1e528:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1e52a:	0789      	lsls	r1, r1, #30
   1e52c:	d4f4      	bmi.n	1e518 <usart_init+0x38>
	if (sercom_index == 5) {
   1e52e:	2b05      	cmp	r3, #5
   1e530:	d100      	bne.n	1e534 <usart_init+0x54>
   1e532:	e11c      	b.n	1e76e <usart_init+0x28e>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
   1e534:	40ba      	lsls	r2, r7
			MCLK->APBCMASK.reg |= mask;
   1e536:	4ba7      	ldr	r3, [pc, #668]	; (1e7d4 <usart_init+0x2f4>)
   1e538:	69d9      	ldr	r1, [r3, #28]
   1e53a:	430a      	orrs	r2, r1
   1e53c:	61da      	str	r2, [r3, #28]
	gclk_chan_conf.source_generator = config->generator_source;
   1e53e:	272d      	movs	r7, #45	; 0x2d
   1e540:	5deb      	ldrb	r3, [r5, r7]
   1e542:	a90a      	add	r1, sp, #40	; 0x28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1e544:	b2f6      	uxtb	r6, r6
	gclk_chan_conf.source_generator = config->generator_source;
   1e546:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1e548:	0030      	movs	r0, r6
   1e54a:	4ba3      	ldr	r3, [pc, #652]	; (1e7d8 <usart_init+0x2f8>)
   1e54c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1e54e:	0030      	movs	r0, r6
   1e550:	4ba2      	ldr	r3, [pc, #648]	; (1e7dc <usart_init+0x2fc>)
   1e552:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1e554:	4ba2      	ldr	r3, [pc, #648]	; (1e7e0 <usart_init+0x300>)
   1e556:	5de8      	ldrb	r0, [r5, r7]
   1e558:	2100      	movs	r1, #0
   1e55a:	4798      	blx	r3
	module->character_size = config->character_size;
   1e55c:	4642      	mov	r2, r8
   1e55e:	7aeb      	ldrb	r3, [r5, #11]
   1e560:	7153      	strb	r3, [r2, #5]
	module->receiver_enabled = config->receiver_enable;
   1e562:	2324      	movs	r3, #36	; 0x24
   1e564:	5ceb      	ldrb	r3, [r5, r3]
   1e566:	7193      	strb	r3, [r2, #6]
	module->transmitter_enabled = config->transmitter_enable;
   1e568:	2325      	movs	r3, #37	; 0x25
   1e56a:	5ceb      	ldrb	r3, [r5, r3]
   1e56c:	71d3      	strb	r3, [r2, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   1e56e:	7eeb      	ldrb	r3, [r5, #27]
   1e570:	7213      	strb	r3, [r2, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   1e572:	7f2b      	ldrb	r3, [r5, #28]
   1e574:	7253      	strb	r3, [r2, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e576:	6813      	ldr	r3, [r2, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e578:	0018      	movs	r0, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e57a:	469a      	mov	sl, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e57c:	47c8      	blx	r9
	if (sercom_index == 5) {
   1e57e:	2805      	cmp	r0, #5
   1e580:	d100      	bne.n	1e584 <usart_init+0xa4>
   1e582:	e0f2      	b.n	1e76a <usart_init+0x28a>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e584:	3012      	adds	r0, #18
	uint16_t baud  = 0;
   1e586:	2300      	movs	r3, #0
   1e588:	ae0c      	add	r6, sp, #48	; 0x30
   1e58a:	8033      	strh	r3, [r6, #0]
	switch (config->sample_rate) {
   1e58c:	2380      	movs	r3, #128	; 0x80
   1e58e:	8a2a      	ldrh	r2, [r5, #16]
   1e590:	01db      	lsls	r3, r3, #7
   1e592:	9202      	str	r2, [sp, #8]
   1e594:	429a      	cmp	r2, r3
   1e596:	d100      	bne.n	1e59a <usart_init+0xba>
   1e598:	e0f4      	b.n	1e784 <usart_init+0x2a4>
   1e59a:	d800      	bhi.n	1e59e <usart_init+0xbe>
   1e59c:	e0dc      	b.n	1e758 <usart_init+0x278>
   1e59e:	23c0      	movs	r3, #192	; 0xc0
   1e5a0:	01db      	lsls	r3, r3, #7
   1e5a2:	429a      	cmp	r2, r3
   1e5a4:	d100      	bne.n	1e5a8 <usart_init+0xc8>
   1e5a6:	e0bc      	b.n	1e722 <usart_init+0x242>
   1e5a8:	2380      	movs	r3, #128	; 0x80
   1e5aa:	021b      	lsls	r3, r3, #8
   1e5ac:	429a      	cmp	r2, r3
   1e5ae:	d000      	beq.n	1e5b2 <usart_init+0xd2>
   1e5b0:	e0e3      	b.n	1e77a <usart_init+0x29a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   1e5b2:	2303      	movs	r3, #3
   1e5b4:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e5b6:	2300      	movs	r3, #0
   1e5b8:	9308      	str	r3, [sp, #32]
	ctrla = (uint32_t)config->data_order |
   1e5ba:	682b      	ldr	r3, [r5, #0]
   1e5bc:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
   1e5be:	68eb      	ldr	r3, [r5, #12]
   1e5c0:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
   1e5c2:	696b      	ldr	r3, [r5, #20]
   1e5c4:	9305      	str	r3, [sp, #20]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e5c6:	7e2b      	ldrb	r3, [r5, #24]
   1e5c8:	9306      	str	r3, [sp, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e5ca:	2326      	movs	r3, #38	; 0x26
   1e5cc:	5ceb      	ldrb	r3, [r5, r3]
   1e5ce:	9307      	str	r3, [sp, #28]
	transfer_mode = (uint32_t)config->transfer_mode;
   1e5d0:	686b      	ldr	r3, [r5, #4]
   1e5d2:	469b      	mov	fp, r3
	switch (transfer_mode)
   1e5d4:	2b00      	cmp	r3, #0
   1e5d6:	d100      	bne.n	1e5da <usart_init+0xfa>
   1e5d8:	e0ad      	b.n	1e736 <usart_init+0x256>
   1e5da:	2380      	movs	r3, #128	; 0x80
   1e5dc:	055b      	lsls	r3, r3, #21
   1e5de:	459b      	cmp	fp, r3
   1e5e0:	d000      	beq.n	1e5e4 <usart_init+0x104>
   1e5e2:	e0a6      	b.n	1e732 <usart_init+0x252>
			if (!config->use_external_clock) {
   1e5e4:	2327      	movs	r3, #39	; 0x27
   1e5e6:	5cea      	ldrb	r2, [r5, r3]
   1e5e8:	2300      	movs	r3, #0
   1e5ea:	2a00      	cmp	r2, #0
   1e5ec:	d100      	bne.n	1e5f0 <usart_init+0x110>
   1e5ee:	e0e4      	b.n	1e7ba <usart_init+0x2da>
	if(config->encoding_format_enable) {
   1e5f0:	7e6a      	ldrb	r2, [r5, #25]
   1e5f2:	2a00      	cmp	r2, #0
   1e5f4:	d002      	beq.n	1e5fc <usart_init+0x11c>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   1e5f6:	4651      	mov	r1, sl
   1e5f8:	7eaa      	ldrb	r2, [r5, #26]
   1e5fa:	738a      	strb	r2, [r1, #14]
	usart_hw->BAUD.reg = baud;
   1e5fc:	4652      	mov	r2, sl
   1e5fe:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   1e600:	9a04      	ldr	r2, [sp, #16]
   1e602:	9b03      	ldr	r3, [sp, #12]
   1e604:	9f02      	ldr	r7, [sp, #8]
   1e606:	4313      	orrs	r3, r2
   1e608:	9a05      	ldr	r2, [sp, #20]
   1e60a:	4313      	orrs	r3, r2
   1e60c:	465a      	mov	r2, fp
   1e60e:	4313      	orrs	r3, r2
   1e610:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e612:	9b06      	ldr	r3, [sp, #24]
   1e614:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   1e616:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e618:	9b07      	ldr	r3, [sp, #28]
   1e61a:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   1e61c:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   1e61e:	2327      	movs	r3, #39	; 0x27
   1e620:	5ceb      	ldrb	r3, [r5, r3]
   1e622:	2b00      	cmp	r3, #0
   1e624:	d101      	bne.n	1e62a <usart_init+0x14a>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   1e626:	3304      	adds	r3, #4
   1e628:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e62a:	7e6b      	ldrb	r3, [r5, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e62c:	7f2a      	ldrb	r2, [r5, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e62e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e630:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e632:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e634:	7f6a      	ldrb	r2, [r5, #29]
	ctrlb |= (uint32_t)config->character_size;
   1e636:	7ae9      	ldrb	r1, [r5, #11]
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e638:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e63a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1e63c:	2224      	movs	r2, #36	; 0x24
   1e63e:	5caa      	ldrb	r2, [r5, r2]
   1e640:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e642:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   1e644:	2225      	movs	r2, #37	; 0x25
   1e646:	5caa      	ldrb	r2, [r5, r2]
   1e648:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1e64a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   1e64c:	7aaa      	ldrb	r2, [r5, #10]
   1e64e:	430a      	orrs	r2, r1
	if (config->parity != USART_PARITY_NONE) {
   1e650:	8929      	ldrh	r1, [r5, #8]
	ctrlb |= (uint32_t)config->character_size;
   1e652:	431a      	orrs	r2, r3
   1e654:	0010      	movs	r0, r2
	if (config->parity != USART_PARITY_NONE) {
   1e656:	29ff      	cmp	r1, #255	; 0xff
   1e658:	d100      	bne.n	1e65c <usart_init+0x17c>
   1e65a:	e098      	b.n	1e78e <usart_init+0x2ae>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1e65c:	2380      	movs	r3, #128	; 0x80
   1e65e:	045b      	lsls	r3, r3, #17
   1e660:	431f      	orrs	r7, r3
		ctrlb |= config->parity;
   1e662:	4308      	orrs	r0, r1
	if (config->run_in_standby || system_is_debugger_present()) {
   1e664:	212c      	movs	r1, #44	; 0x2c
   1e666:	5c69      	ldrb	r1, [r5, r1]
   1e668:	2900      	cmp	r1, #0
   1e66a:	d103      	bne.n	1e674 <usart_init+0x194>
   1e66c:	4b5d      	ldr	r3, [pc, #372]	; (1e7e4 <usart_init+0x304>)
   1e66e:	789b      	ldrb	r3, [r3, #2]
   1e670:	079b      	lsls	r3, r3, #30
   1e672:	d501      	bpl.n	1e678 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   1e674:	2380      	movs	r3, #128	; 0x80
   1e676:	431f      	orrs	r7, r3
   1e678:	4643      	mov	r3, r8
   1e67a:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e67c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e67e:	2b00      	cmp	r3, #0
   1e680:	d1fc      	bne.n	1e67c <usart_init+0x19c>
	usart_hw->CTRLB.reg = ctrlb;
   1e682:	4653      	mov	r3, sl
   1e684:	6058      	str	r0, [r3, #4]
   1e686:	4643      	mov	r3, r8
   1e688:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e68a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e68c:	2b00      	cmp	r3, #0
   1e68e:	d1fc      	bne.n	1e68a <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
   1e690:	4652      	mov	r2, sl
   1e692:	6017      	str	r7, [r2, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1e694:	af0b      	add	r7, sp, #44	; 0x2c
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e696:	707b      	strb	r3, [r7, #1]
	config->powersave    = false;
   1e698:	70fb      	strb	r3, [r7, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1e69a:	70bb      	strb	r3, [r7, #2]
	uint32_t pad_pinmuxes[] = {
   1e69c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1e69e:	2280      	movs	r2, #128	; 0x80
   1e6a0:	930c      	str	r3, [sp, #48]	; 0x30
   1e6a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e6a4:	703a      	strb	r2, [r7, #0]
   1e6a6:	6073      	str	r3, [r6, #4]
   1e6a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1e6aa:	60b3      	str	r3, [r6, #8]
   1e6ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1e6ae:	2500      	movs	r5, #0
   1e6b0:	60f3      	str	r3, [r6, #12]
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1e6b2:	4b4d      	ldr	r3, [pc, #308]	; (1e7e8 <usart_init+0x308>)
   1e6b4:	469b      	mov	fp, r3
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1e6b6:	4b4d      	ldr	r3, [pc, #308]	; (1e7ec <usart_init+0x30c>)
   1e6b8:	469a      	mov	sl, r3
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e6ba:	00ab      	lsls	r3, r5, #2
   1e6bc:	58f0      	ldr	r0, [r6, r3]
   1e6be:	b2e9      	uxtb	r1, r5
		if (current_pinmux == PINMUX_DEFAULT) {
   1e6c0:	2800      	cmp	r0, #0
   1e6c2:	d033      	beq.n	1e72c <usart_init+0x24c>
		if (current_pinmux != PINMUX_UNUSED) {
   1e6c4:	1c43      	adds	r3, r0, #1
   1e6c6:	d004      	beq.n	1e6d2 <usart_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1e6c8:	7038      	strb	r0, [r7, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1e6ca:	0c00      	lsrs	r0, r0, #16
   1e6cc:	b2c0      	uxtb	r0, r0
   1e6ce:	0039      	movs	r1, r7
   1e6d0:	47d0      	blx	sl
   1e6d2:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1e6d4:	2d04      	cmp	r5, #4
   1e6d6:	d1f0      	bne.n	1e6ba <usart_init+0x1da>
		module->callback[i]            = NULL;
   1e6d8:	4640      	mov	r0, r8
   1e6da:	2218      	movs	r2, #24
   1e6dc:	2100      	movs	r1, #0
   1e6de:	4b44      	ldr	r3, [pc, #272]	; (1e7f0 <usart_init+0x310>)
   1e6e0:	300c      	adds	r0, #12
   1e6e2:	4798      	blx	r3
	module->tx_buffer_ptr              = NULL;
   1e6e4:	2200      	movs	r2, #0
   1e6e6:	4643      	mov	r3, r8
	module->remaining_tx_buffer_length = 0x0000;
   1e6e8:	4641      	mov	r1, r8
	module->tx_buffer_ptr              = NULL;
   1e6ea:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1e6ec:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   1e6ee:	2300      	movs	r3, #0
   1e6f0:	85ca      	strh	r2, [r1, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1e6f2:	858a      	strh	r2, [r1, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   1e6f4:	3230      	adds	r2, #48	; 0x30
   1e6f6:	548b      	strb	r3, [r1, r2]
	module->callback_enable_mask       = 0x00;
   1e6f8:	3201      	adds	r2, #1
   1e6fa:	548b      	strb	r3, [r1, r2]
	module->rx_status                  = STATUS_OK;
   1e6fc:	3201      	adds	r2, #1
   1e6fe:	548b      	strb	r3, [r1, r2]
	module->tx_status                  = STATUS_OK;
   1e700:	3201      	adds	r2, #1
   1e702:	548b      	strb	r3, [r1, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   1e704:	6808      	ldr	r0, [r1, #0]
   1e706:	47c8      	blx	r9
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   1e708:	4b3a      	ldr	r3, [pc, #232]	; (1e7f4 <usart_init+0x314>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   1e70a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   1e70c:	493a      	ldr	r1, [pc, #232]	; (1e7f8 <usart_init+0x318>)
   1e70e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1e710:	4642      	mov	r2, r8
   1e712:	4b3a      	ldr	r3, [pc, #232]	; (1e7fc <usart_init+0x31c>)
   1e714:	00a4      	lsls	r4, r4, #2
   1e716:	50e2      	str	r2, [r4, r3]
	return status_code;
   1e718:	2000      	movs	r0, #0
   1e71a:	e6fd      	b.n	1e518 <usart_init+0x38>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   1e71c:	2618      	movs	r6, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   1e71e:	2701      	movs	r7, #1
   1e720:	e6f5      	b.n	1e50e <usart_init+0x2e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1e722:	2308      	movs	r3, #8
   1e724:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1e726:	3b07      	subs	r3, #7
   1e728:	9308      	str	r3, [sp, #32]
   1e72a:	e746      	b.n	1e5ba <usart_init+0xda>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1e72c:	0020      	movs	r0, r4
   1e72e:	47d8      	blx	fp
   1e730:	e7c8      	b.n	1e6c4 <usart_init+0x1e4>
	switch (transfer_mode)
   1e732:	2300      	movs	r3, #0
   1e734:	e75c      	b.n	1e5f0 <usart_init+0x110>
			if (config->use_external_clock) {
   1e736:	2327      	movs	r3, #39	; 0x27
   1e738:	5ceb      	ldrb	r3, [r5, r3]
   1e73a:	2b00      	cmp	r3, #0
   1e73c:	d02f      	beq.n	1e79e <usart_init+0x2be>
				status_code =
   1e73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e740:	0032      	movs	r2, r6
   1e742:	9300      	str	r3, [sp, #0]
   1e744:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1e746:	9b08      	ldr	r3, [sp, #32]
   1e748:	6a28      	ldr	r0, [r5, #32]
   1e74a:	4f2d      	ldr	r7, [pc, #180]	; (1e800 <usart_init+0x320>)
   1e74c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   1e74e:	2800      	cmp	r0, #0
   1e750:	d000      	beq.n	1e754 <usart_init+0x274>
   1e752:	e6e1      	b.n	1e518 <usart_init+0x38>
   1e754:	8833      	ldrh	r3, [r6, #0]
   1e756:	e74b      	b.n	1e5f0 <usart_init+0x110>
	switch (config->sample_rate) {
   1e758:	2380      	movs	r3, #128	; 0x80
   1e75a:	019b      	lsls	r3, r3, #6
   1e75c:	429a      	cmp	r2, r3
   1e75e:	d10c      	bne.n	1e77a <usart_init+0x29a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1e760:	2310      	movs	r3, #16
   1e762:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1e764:	3b0f      	subs	r3, #15
   1e766:	9308      	str	r3, [sp, #32]
   1e768:	e727      	b.n	1e5ba <usart_init+0xda>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   1e76a:	2018      	movs	r0, #24
   1e76c:	e70b      	b.n	1e586 <usart_init+0xa6>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   1e76e:	40ba      	lsls	r2, r7
			MCLK->APBDMASK.reg |= mask;
   1e770:	4b18      	ldr	r3, [pc, #96]	; (1e7d4 <usart_init+0x2f4>)
   1e772:	6a19      	ldr	r1, [r3, #32]
   1e774:	430a      	orrs	r2, r1
   1e776:	621a      	str	r2, [r3, #32]
   1e778:	e6e1      	b.n	1e53e <usart_init+0x5e>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1e77a:	2310      	movs	r3, #16
   1e77c:	9309      	str	r3, [sp, #36]	; 0x24
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e77e:	2300      	movs	r3, #0
   1e780:	9308      	str	r3, [sp, #32]
   1e782:	e71a      	b.n	1e5ba <usart_init+0xda>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1e784:	2308      	movs	r3, #8
   1e786:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e788:	2300      	movs	r3, #0
   1e78a:	9308      	str	r3, [sp, #32]
   1e78c:	e715      	b.n	1e5ba <usart_init+0xda>
		if(config->lin_slave_enable) {
   1e78e:	7eeb      	ldrb	r3, [r5, #27]
   1e790:	2b00      	cmp	r3, #0
   1e792:	d100      	bne.n	1e796 <usart_init+0x2b6>
   1e794:	e766      	b.n	1e664 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   1e796:	2380      	movs	r3, #128	; 0x80
   1e798:	04db      	lsls	r3, r3, #19
   1e79a:	431f      	orrs	r7, r3
   1e79c:	e762      	b.n	1e664 <usart_init+0x184>
						_sercom_get_async_baud_val(config->baudrate,
   1e79e:	6a2b      	ldr	r3, [r5, #32]
   1e7a0:	b2c0      	uxtb	r0, r0
   1e7a2:	001f      	movs	r7, r3
   1e7a4:	4b17      	ldr	r3, [pc, #92]	; (1e804 <usart_init+0x324>)
   1e7a6:	4798      	blx	r3
				status_code =
   1e7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
						_sercom_get_async_baud_val(config->baudrate,
   1e7aa:	0001      	movs	r1, r0
				status_code =
   1e7ac:	9300      	str	r3, [sp, #0]
   1e7ae:	0032      	movs	r2, r6
   1e7b0:	9b08      	ldr	r3, [sp, #32]
   1e7b2:	0038      	movs	r0, r7
   1e7b4:	4f12      	ldr	r7, [pc, #72]	; (1e800 <usart_init+0x320>)
   1e7b6:	47b8      	blx	r7
   1e7b8:	e7c9      	b.n	1e74e <usart_init+0x26e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1e7ba:	6a2b      	ldr	r3, [r5, #32]
   1e7bc:	b2c0      	uxtb	r0, r0
   1e7be:	001f      	movs	r7, r3
   1e7c0:	4b10      	ldr	r3, [pc, #64]	; (1e804 <usart_init+0x324>)
   1e7c2:	4798      	blx	r3
   1e7c4:	0032      	movs	r2, r6
   1e7c6:	0001      	movs	r1, r0
   1e7c8:	4b0f      	ldr	r3, [pc, #60]	; (1e808 <usart_init+0x328>)
   1e7ca:	0038      	movs	r0, r7
   1e7cc:	4798      	blx	r3
   1e7ce:	e7be      	b.n	1e74e <usart_init+0x26e>
   1e7d0:	0001f435 	.word	0x0001f435
   1e7d4:	40000400 	.word	0x40000400
   1e7d8:	0001fc15 	.word	0x0001fc15
   1e7dc:	0001fc55 	.word	0x0001fc55
   1e7e0:	0001f291 	.word	0x0001f291
   1e7e4:	41002000 	.word	0x41002000
   1e7e8:	0001f2d9 	.word	0x0001f2d9
   1e7ec:	0001fd11 	.word	0x0001fd11
   1e7f0:	00028a1d 	.word	0x00028a1d
   1e7f4:	00018cad 	.word	0x00018cad
   1e7f8:	00018e39 	.word	0x00018e39
   1e7fc:	200012ec 	.word	0x200012ec
   1e800:	0001f029 	.word	0x0001f029
   1e804:	0001fc8d 	.word	0x0001fc8d
   1e808:	0001f001 	.word	0x0001f001

0001e80c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1e80c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e80e:	4645      	mov	r5, r8
   1e810:	464e      	mov	r6, r9
   1e812:	46de      	mov	lr, fp
   1e814:	4657      	mov	r7, sl
   1e816:	b5e0      	push	{r5, r6, r7, lr}
   1e818:	0005      	movs	r5, r0
   1e81a:	0014      	movs	r4, r2
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1e81c:	2202      	movs	r2, #2
	module->hw = hw;
   1e81e:	6029      	str	r1, [r5, #0]
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1e820:	680b      	ldr	r3, [r1, #0]
{
   1e822:	b087      	sub	sp, #28
   1e824:	000e      	movs	r6, r1
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1e826:	4690      	mov	r8, r2
   1e828:	421a      	tst	r2, r3
   1e82a:	d10c      	bne.n	1e846 <spi_init+0x3a>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1e82c:	2701      	movs	r7, #1
   1e82e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   1e830:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1e832:	421f      	tst	r7, r3
   1e834:	d100      	bne.n	1e838 <spi_init+0x2c>
   1e836:	e0df      	b.n	1e9f8 <spi_init+0x1ec>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   1e838:	b007      	add	sp, #28
   1e83a:	bc3c      	pop	{r2, r3, r4, r5}
   1e83c:	4690      	mov	r8, r2
   1e83e:	4699      	mov	r9, r3
   1e840:	46a2      	mov	sl, r4
   1e842:	46ab      	mov	fp, r5
   1e844:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config->pinmux_pad2, config->pinmux_pad3
   1e846:	6b23      	ldr	r3, [r4, #48]	; 0x30
		config->pinmux_pad0, config->pinmux_pad1,
   1e848:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		config->pinmux_pad2, config->pinmux_pad3
   1e84a:	4698      	mov	r8, r3
   1e84c:	6b63      	ldr	r3, [r4, #52]	; 0x34
		config->pinmux_pad0, config->pinmux_pad1,
   1e84e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
		config->pinmux_pad2, config->pinmux_pad3
   1e850:	4699      	mov	r9, r3
		if (current_pinmux == PINMUX_DEFAULT) {
   1e852:	2800      	cmp	r0, #0
   1e854:	d100      	bne.n	1e858 <spi_init+0x4c>
   1e856:	e0bf      	b.n	1e9d8 <spi_init+0x1cc>
		if (current_pinmux == PINMUX_UNUSED) {
   1e858:	1c43      	adds	r3, r0, #1
   1e85a:	d01e      	beq.n	1e89a <spi_init+0x8e>
		if ((current_pinmux & 0xFFFF) !=
   1e85c:	0402      	lsls	r2, r0, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1e85e:	0c00      	lsrs	r0, r0, #16
		if ((current_pinmux & 0xFFFF) !=
   1e860:	0c13      	lsrs	r3, r2, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1e862:	b2c0      	uxtb	r0, r0
		if ((current_pinmux & 0xFFFF) !=
   1e864:	469b      	mov	fp, r3
	if (port_index < PORT_INST_NUM) {
   1e866:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
   1e868:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   1e86a:	2900      	cmp	r1, #0
   1e86c:	d000      	beq.n	1e870 <spi_init+0x64>
   1e86e:	e0be      	b.n	1e9ee <spi_init+0x1e2>
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
   1e870:	311f      	adds	r1, #31
   1e872:	4001      	ands	r1, r0
   1e874:	468c      	mov	ip, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e876:	49ce      	ldr	r1, [pc, #824]	; (1ebb0 <spi_init+0x3a4>)
   1e878:	01db      	lsls	r3, r3, #7
   1e87a:	468a      	mov	sl, r1
   1e87c:	4661      	mov	r1, ip
   1e87e:	4453      	add	r3, sl
   1e880:	1859      	adds	r1, r3, r1
   1e882:	3140      	adds	r1, #64	; 0x40
   1e884:	7809      	ldrb	r1, [r1, #0]
   1e886:	468a      	mov	sl, r1
   1e888:	2101      	movs	r1, #1
   1e88a:	4652      	mov	r2, sl
   1e88c:	4211      	tst	r1, r2
   1e88e:	d000      	beq.n	1e892 <spi_init+0x86>
   1e890:	e13e      	b.n	1eb10 <spi_init+0x304>
   1e892:	2380      	movs	r3, #128	; 0x80
   1e894:	455b      	cmp	r3, fp
   1e896:	d000      	beq.n	1e89a <spi_init+0x8e>
   1e898:	e09a      	b.n	1e9d0 <spi_init+0x1c4>
		if (current_pinmux == PINMUX_DEFAULT) {
   1e89a:	2f00      	cmp	r7, #0
   1e89c:	d100      	bne.n	1e8a0 <spi_init+0x94>
   1e89e:	e0a0      	b.n	1e9e2 <spi_init+0x1d6>
		if (current_pinmux == PINMUX_UNUSED) {
   1e8a0:	1c7b      	adds	r3, r7, #1
   1e8a2:	d019      	beq.n	1e8d8 <spi_init+0xcc>
		if ((current_pinmux & 0xFFFF) !=
   1e8a4:	043a      	lsls	r2, r7, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1e8a6:	0c3f      	lsrs	r7, r7, #16
		if ((current_pinmux & 0xFFFF) !=
   1e8a8:	0c13      	lsrs	r3, r2, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1e8aa:	b2f8      	uxtb	r0, r7
		if ((current_pinmux & 0xFFFF) !=
   1e8ac:	469a      	mov	sl, r3
	if (port_index < PORT_INST_NUM) {
   1e8ae:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
   1e8b0:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   1e8b2:	2900      	cmp	r1, #0
   1e8b4:	d000      	beq.n	1e8b8 <spi_init+0xac>
   1e8b6:	e09a      	b.n	1e9ee <spi_init+0x1e2>
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e8b8:	49bd      	ldr	r1, [pc, #756]	; (1ebb0 <spi_init+0x3a4>)
	uint32_t pin_index = (gpio_pin % 32);
   1e8ba:	271f      	movs	r7, #31
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e8bc:	468c      	mov	ip, r1
   1e8be:	2201      	movs	r2, #1
   1e8c0:	01db      	lsls	r3, r3, #7
	uint32_t pin_index = (gpio_pin % 32);
   1e8c2:	4007      	ands	r7, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e8c4:	4463      	add	r3, ip
   1e8c6:	19d9      	adds	r1, r3, r7
   1e8c8:	3140      	adds	r1, #64	; 0x40
   1e8ca:	7809      	ldrb	r1, [r1, #0]
   1e8cc:	420a      	tst	r2, r1
   1e8ce:	d000      	beq.n	1e8d2 <spi_init+0xc6>
   1e8d0:	e12e      	b.n	1eb30 <spi_init+0x324>
   1e8d2:	2380      	movs	r3, #128	; 0x80
   1e8d4:	4553      	cmp	r3, sl
   1e8d6:	d17b      	bne.n	1e9d0 <spi_init+0x1c4>
		if (current_pinmux == PINMUX_DEFAULT) {
   1e8d8:	4643      	mov	r3, r8
   1e8da:	2b00      	cmp	r3, #0
   1e8dc:	d100      	bne.n	1e8e0 <spi_init+0xd4>
   1e8de:	e13f      	b.n	1eb60 <spi_init+0x354>
		if (current_pinmux == PINMUX_UNUSED) {
   1e8e0:	4643      	mov	r3, r8
   1e8e2:	3301      	adds	r3, #1
   1e8e4:	d019      	beq.n	1e91a <spi_init+0x10e>
		if ((current_pinmux & 0xFFFF) !=
   1e8e6:	4643      	mov	r3, r8
   1e8e8:	041a      	lsls	r2, r3, #16
   1e8ea:	0c13      	lsrs	r3, r2, #16
   1e8ec:	469a      	mov	sl, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1e8ee:	4643      	mov	r3, r8
   1e8f0:	0c18      	lsrs	r0, r3, #16
   1e8f2:	b2c0      	uxtb	r0, r0
	uint8_t group_index = (gpio_pin / 32);
   1e8f4:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   1e8f6:	09c1      	lsrs	r1, r0, #7
   1e8f8:	d179      	bne.n	1e9ee <spi_init+0x1e2>
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e8fa:	49ad      	ldr	r1, [pc, #692]	; (1ebb0 <spi_init+0x3a4>)
	uint32_t pin_index = (gpio_pin % 32);
   1e8fc:	271f      	movs	r7, #31
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e8fe:	468c      	mov	ip, r1
   1e900:	2201      	movs	r2, #1
   1e902:	01db      	lsls	r3, r3, #7
	uint32_t pin_index = (gpio_pin % 32);
   1e904:	4007      	ands	r7, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e906:	4463      	add	r3, ip
   1e908:	19d9      	adds	r1, r3, r7
   1e90a:	3140      	adds	r1, #64	; 0x40
   1e90c:	7809      	ldrb	r1, [r1, #0]
   1e90e:	420a      	tst	r2, r1
   1e910:	d000      	beq.n	1e914 <spi_init+0x108>
   1e912:	e119      	b.n	1eb48 <spi_init+0x33c>
   1e914:	2380      	movs	r3, #128	; 0x80
		if ((current_pinmux & 0xFFFF) !=
   1e916:	459a      	cmp	sl, r3
   1e918:	d15a      	bne.n	1e9d0 <spi_init+0x1c4>
		if (current_pinmux == PINMUX_DEFAULT) {
   1e91a:	464b      	mov	r3, r9
   1e91c:	2b00      	cmp	r3, #0
   1e91e:	d100      	bne.n	1e922 <spi_init+0x116>
   1e920:	e124      	b.n	1eb6c <spi_init+0x360>
		if (current_pinmux == PINMUX_UNUSED) {
   1e922:	464b      	mov	r3, r9
   1e924:	3301      	adds	r3, #1
   1e926:	d027      	beq.n	1e978 <spi_init+0x16c>
		if ((current_pinmux & 0xFFFF) !=
   1e928:	464b      	mov	r3, r9
   1e92a:	0419      	lsls	r1, r3, #16
   1e92c:	0c0b      	lsrs	r3, r1, #16
   1e92e:	469a      	mov	sl, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1e930:	464b      	mov	r3, r9
   1e932:	0c18      	lsrs	r0, r3, #16
   1e934:	b2c0      	uxtb	r0, r0
	uint8_t group_index = (gpio_pin / 32);
   1e936:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   1e938:	09c2      	lsrs	r2, r0, #7
   1e93a:	d158      	bne.n	1e9ee <spi_init+0x1e2>
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e93c:	4a9c      	ldr	r2, [pc, #624]	; (1ebb0 <spi_init+0x3a4>)
	uint32_t pin_index = (gpio_pin % 32);
   1e93e:	271f      	movs	r7, #31
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e940:	4694      	mov	ip, r2
   1e942:	01db      	lsls	r3, r3, #7
   1e944:	4463      	add	r3, ip
	uint32_t pin_index = (gpio_pin % 32);
   1e946:	4007      	ands	r7, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e948:	19da      	adds	r2, r3, r7
   1e94a:	3240      	adds	r2, #64	; 0x40
   1e94c:	7812      	ldrb	r2, [r2, #0]
   1e94e:	4690      	mov	r8, r2
   1e950:	2201      	movs	r2, #1
   1e952:	4694      	mov	ip, r2
   1e954:	327f      	adds	r2, #127	; 0x7f
   1e956:	4691      	mov	r9, r2
   1e958:	4661      	mov	r1, ip
   1e95a:	4642      	mov	r2, r8
   1e95c:	4211      	tst	r1, r2
   1e95e:	d009      	beq.n	1e974 <spi_init+0x168>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   1e960:	087f      	lsrs	r7, r7, #1
   1e962:	19db      	adds	r3, r3, r7
   1e964:	3330      	adds	r3, #48	; 0x30
   1e966:	781a      	ldrb	r2, [r3, #0]
   1e968:	b2d2      	uxtb	r2, r2

	if (pin_index & 1) {
   1e96a:	4201      	tst	r1, r0
   1e96c:	d100      	bne.n	1e970 <spi_init+0x164>
   1e96e:	e103      	b.n	1eb78 <spi_init+0x36c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   1e970:	0913      	lsrs	r3, r2, #4
   1e972:	4699      	mov	r9, r3
		if ((current_pinmux & 0xFFFF) !=
   1e974:	45ca      	cmp	sl, r9
   1e976:	d12b      	bne.n	1e9d0 <spi_init+0x1c4>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   1e978:	2011      	movs	r0, #17
   1e97a:	4b8e      	ldr	r3, [pc, #568]	; (1ebb4 <spi_init+0x3a8>)
   1e97c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   1e97e:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
   1e980:	2700      	movs	r7, #0
	if (config->mode == SPI_MODE_MASTER) {
   1e982:	2a01      	cmp	r2, #1
   1e984:	d100      	bne.n	1e988 <spi_init+0x17c>
   1e986:	e127      	b.n	1ebd8 <spi_init+0x3cc>
	ctrla |= config->mux_setting;
   1e988:	68a2      	ldr	r2, [r4, #8]
   1e98a:	6863      	ldr	r3, [r4, #4]
	if (config->run_in_standby) {
   1e98c:	7c61      	ldrb	r1, [r4, #17]
	ctrla |= config->mux_setting;
   1e98e:	4313      	orrs	r3, r2
   1e990:	68e2      	ldr	r2, [r4, #12]
   1e992:	4313      	orrs	r3, r2
   1e994:	433b      	orrs	r3, r7
	ctrlb |= config->character_size;
   1e996:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
   1e998:	2900      	cmp	r1, #0
   1e99a:	d001      	beq.n	1e9a0 <spi_init+0x194>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1e99c:	2180      	movs	r1, #128	; 0x80
   1e99e:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
   1e9a0:	7ca1      	ldrb	r1, [r4, #18]
   1e9a2:	2900      	cmp	r1, #0
   1e9a4:	d002      	beq.n	1e9ac <spi_init+0x1a0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   1e9a6:	2180      	movs	r1, #128	; 0x80
   1e9a8:	0289      	lsls	r1, r1, #10
   1e9aa:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
   1e9ac:	7ce1      	ldrb	r1, [r4, #19]
   1e9ae:	2900      	cmp	r1, #0
   1e9b0:	d002      	beq.n	1e9b8 <spi_init+0x1ac>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   1e9b2:	2180      	movs	r1, #128	; 0x80
   1e9b4:	0089      	lsls	r1, r1, #2
   1e9b6:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
   1e9b8:	7d21      	ldrb	r1, [r4, #20]
   1e9ba:	2900      	cmp	r1, #0
   1e9bc:	d002      	beq.n	1e9c4 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   1e9be:	2180      	movs	r1, #128	; 0x80
   1e9c0:	0189      	lsls	r1, r1, #6
   1e9c2:	430a      	orrs	r2, r1
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   1e9c4:	2002      	movs	r0, #2
	if (spi_module->CTRLA.reg == ctrla &&
   1e9c6:	6831      	ldr	r1, [r6, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   1e9c8:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
   1e9ca:	428b      	cmp	r3, r1
   1e9cc:	d100      	bne.n	1e9d0 <spi_init+0x1c4>
   1e9ce:	e0d7      	b.n	1eb80 <spi_init+0x374>
			module->hw = NULL;
   1e9d0:	2300      	movs	r3, #0
			return STATUS_ERR_DENIED;
   1e9d2:	201c      	movs	r0, #28
			module->hw = NULL;
   1e9d4:	602b      	str	r3, [r5, #0]
   1e9d6:	e72f      	b.n	1e838 <spi_init+0x2c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1e9d8:	2100      	movs	r1, #0
   1e9da:	0030      	movs	r0, r6
   1e9dc:	4b76      	ldr	r3, [pc, #472]	; (1ebb8 <spi_init+0x3ac>)
   1e9de:	4798      	blx	r3
   1e9e0:	e73a      	b.n	1e858 <spi_init+0x4c>
   1e9e2:	2101      	movs	r1, #1
   1e9e4:	0030      	movs	r0, r6
   1e9e6:	4b74      	ldr	r3, [pc, #464]	; (1ebb8 <spi_init+0x3ac>)
   1e9e8:	4798      	blx	r3
   1e9ea:	0007      	movs	r7, r0
   1e9ec:	e758      	b.n	1e8a0 <spi_init+0x94>
	uint32_t pin_index = (gpio_pin % 32);
   1e9ee:	231f      	movs	r3, #31
   1e9f0:	4018      	ands	r0, r3
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1e9f2:	3040      	adds	r0, #64	; 0x40
   1e9f4:	7803      	ldrb	r3, [r0, #0]
   1e9f6:	deff      	udf	#255	; 0xff
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e9f8:	0008      	movs	r0, r1
   1e9fa:	4b70      	ldr	r3, [pc, #448]	; (1ebbc <spi_init+0x3b0>)
   1e9fc:	4798      	blx	r3
	if (sercom_index == 5) {
   1e9fe:	2805      	cmp	r0, #5
   1ea00:	d100      	bne.n	1ea04 <spi_init+0x1f8>
   1ea02:	e0cd      	b.n	1eba0 <spi_init+0x394>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1ea04:	4087      	lsls	r7, r0
			MCLK->APBCMASK.reg |= mask;
   1ea06:	4b6e      	ldr	r3, [pc, #440]	; (1ebc0 <spi_init+0x3b4>)
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1ea08:	3012      	adds	r0, #18
   1ea0a:	69da      	ldr	r2, [r3, #28]
   1ea0c:	4317      	orrs	r7, r2
   1ea0e:	61df      	str	r7, [r3, #28]
   1ea10:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
   1ea12:	2324      	movs	r3, #36	; 0x24
   1ea14:	466a      	mov	r2, sp
   1ea16:	4698      	mov	r8, r3
   1ea18:	5ce3      	ldrb	r3, [r4, r3]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1ea1a:	4669      	mov	r1, sp
	gclk_chan_conf.source_generator = config->generator_source;
   1ea1c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1ea1e:	0038      	movs	r0, r7
   1ea20:	4b68      	ldr	r3, [pc, #416]	; (1ebc4 <spi_init+0x3b8>)
   1ea22:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1ea24:	0038      	movs	r0, r7
   1ea26:	4b68      	ldr	r3, [pc, #416]	; (1ebc8 <spi_init+0x3bc>)
   1ea28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1ea2a:	4643      	mov	r3, r8
   1ea2c:	2100      	movs	r1, #0
   1ea2e:	5ce0      	ldrb	r0, [r4, r3]
   1ea30:	4b66      	ldr	r3, [pc, #408]	; (1ebcc <spi_init+0x3c0>)
   1ea32:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   1ea34:	7823      	ldrb	r3, [r4, #0]
   1ea36:	2b01      	cmp	r3, #1
   1ea38:	d100      	bne.n	1ea3c <spi_init+0x230>
   1ea3a:	e0ab      	b.n	1eb94 <spi_init+0x388>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1ea3c:	682a      	ldr	r2, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1ea3e:	4669      	mov	r1, sp
   1ea40:	4691      	mov	r9, r2
   1ea42:	2280      	movs	r2, #128	; 0x80
   1ea44:	710a      	strb	r2, [r1, #4]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1ea46:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1ea48:	4668      	mov	r0, sp
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1ea4a:	714a      	strb	r2, [r1, #5]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1ea4c:	2101      	movs	r1, #1
	config->powersave    = false;
   1ea4e:	71c2      	strb	r2, [r0, #7]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1ea50:	7181      	strb	r1, [r0, #6]
	if(config->mode == SPI_MODE_SLAVE) {
   1ea52:	2b00      	cmp	r3, #0
   1ea54:	d100      	bne.n	1ea58 <spi_init+0x24c>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1ea56:	7183      	strb	r3, [r0, #6]
	uint32_t pad_pinmuxes[] = {
   1ea58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ea5a:	af02      	add	r7, sp, #8
   1ea5c:	9302      	str	r3, [sp, #8]
   1ea5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ea60:	2600      	movs	r6, #0
   1ea62:	607b      	str	r3, [r7, #4]
   1ea64:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ea66:	60bb      	str	r3, [r7, #8]
   1ea68:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ea6a:	60fb      	str	r3, [r7, #12]
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1ea6c:	4b52      	ldr	r3, [pc, #328]	; (1ebb8 <spi_init+0x3ac>)
   1ea6e:	469b      	mov	fp, r3
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1ea70:	4b57      	ldr	r3, [pc, #348]	; (1ebd0 <spi_init+0x3c4>)
   1ea72:	469a      	mov	sl, r3
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1ea74:	00b3      	lsls	r3, r6, #2
   1ea76:	58f8      	ldr	r0, [r7, r3]
   1ea78:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
   1ea7a:	2800      	cmp	r0, #0
   1ea7c:	d045      	beq.n	1eb0a <spi_init+0x2fe>
		if (current_pinmux != PINMUX_UNUSED) {
   1ea7e:	1c43      	adds	r3, r0, #1
   1ea80:	d005      	beq.n	1ea8e <spi_init+0x282>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1ea82:	466b      	mov	r3, sp
   1ea84:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1ea86:	0c00      	lsrs	r0, r0, #16
   1ea88:	b2c0      	uxtb	r0, r0
   1ea8a:	a901      	add	r1, sp, #4
   1ea8c:	47d0      	blx	sl
   1ea8e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1ea90:	2e04      	cmp	r6, #4
   1ea92:	d1ef      	bne.n	1ea74 <spi_init+0x268>
	module->mode             = config->mode;
   1ea94:	7823      	ldrb	r3, [r4, #0]
	uint16_t baud = 0;
   1ea96:	466a      	mov	r2, sp
	module->mode             = config->mode;
   1ea98:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   1ea9a:	7c23      	ldrb	r3, [r4, #16]
   1ea9c:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   1ea9e:	7ca3      	ldrb	r3, [r4, #18]
   1eaa0:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   1eaa2:	7d23      	ldrb	r3, [r4, #20]
   1eaa4:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   1eaa6:	2300      	movs	r3, #0
   1eaa8:	8053      	strh	r3, [r2, #2]
	if (config->mode == SPI_MODE_MASTER) {
   1eaaa:	7823      	ldrb	r3, [r4, #0]
   1eaac:	2b01      	cmp	r3, #1
   1eaae:	d100      	bne.n	1eab2 <spi_init+0x2a6>
   1eab0:	e0a5      	b.n	1ebfe <spi_init+0x3f2>
	ctrla |= config->transfer_mode;
   1eab2:	68a2      	ldr	r2, [r4, #8]
   1eab4:	6863      	ldr	r3, [r4, #4]
	ctrlb |= config->character_size;
   1eab6:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->transfer_mode;
   1eab8:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1eaba:	68e2      	ldr	r2, [r4, #12]
   1eabc:	4313      	orrs	r3, r2
	if (config->run_in_standby || system_is_debugger_present()) {
   1eabe:	7c62      	ldrb	r2, [r4, #17]
   1eac0:	2a00      	cmp	r2, #0
   1eac2:	d11f      	bne.n	1eb04 <spi_init+0x2f8>
   1eac4:	4a43      	ldr	r2, [pc, #268]	; (1ebd4 <spi_init+0x3c8>)
   1eac6:	7892      	ldrb	r2, [r2, #2]
   1eac8:	0792      	lsls	r2, r2, #30
   1eaca:	d41b      	bmi.n	1eb04 <spi_init+0x2f8>
	if (config->receiver_enable) {
   1eacc:	7ca2      	ldrb	r2, [r4, #18]
   1eace:	2a00      	cmp	r2, #0
   1ead0:	d002      	beq.n	1ead8 <spi_init+0x2cc>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   1ead2:	2280      	movs	r2, #128	; 0x80
   1ead4:	0292      	lsls	r2, r2, #10
   1ead6:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   1ead8:	7ce2      	ldrb	r2, [r4, #19]
   1eada:	2a00      	cmp	r2, #0
   1eadc:	d002      	beq.n	1eae4 <spi_init+0x2d8>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   1eade:	2280      	movs	r2, #128	; 0x80
   1eae0:	0092      	lsls	r2, r2, #2
   1eae2:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   1eae4:	7d22      	ldrb	r2, [r4, #20]
   1eae6:	2a00      	cmp	r2, #0
   1eae8:	d002      	beq.n	1eaf0 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   1eaea:	2280      	movs	r2, #128	; 0x80
   1eaec:	0192      	lsls	r2, r2, #6
   1eaee:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   1eaf0:	464a      	mov	r2, r9
   1eaf2:	6812      	ldr	r2, [r2, #0]
	return STATUS_OK;
   1eaf4:	2000      	movs	r0, #0
	spi_module->CTRLA.reg |= ctrla;
   1eaf6:	4313      	orrs	r3, r2
   1eaf8:	464a      	mov	r2, r9
   1eafa:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
   1eafc:	6853      	ldr	r3, [r2, #4]
   1eafe:	430b      	orrs	r3, r1
   1eb00:	6053      	str	r3, [r2, #4]
   1eb02:	e699      	b.n	1e838 <spi_init+0x2c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1eb04:	2280      	movs	r2, #128	; 0x80
   1eb06:	4313      	orrs	r3, r2
   1eb08:	e7e0      	b.n	1eacc <spi_init+0x2c0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1eb0a:	4648      	mov	r0, r9
   1eb0c:	47d8      	blx	fp
   1eb0e:	e7b6      	b.n	1ea7e <spi_init+0x272>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   1eb10:	4662      	mov	r2, ip
   1eb12:	0852      	lsrs	r2, r2, #1
   1eb14:	4694      	mov	ip, r2
   1eb16:	4463      	add	r3, ip
   1eb18:	3330      	adds	r3, #48	; 0x30
   1eb1a:	781b      	ldrb	r3, [r3, #0]
   1eb1c:	b2db      	uxtb	r3, r3
   1eb1e:	469c      	mov	ip, r3
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   1eb20:	091b      	lsrs	r3, r3, #4
	if (pin_index & 1) {
   1eb22:	4201      	tst	r1, r0
   1eb24:	d000      	beq.n	1eb28 <spi_init+0x31c>
   1eb26:	e6b5      	b.n	1e894 <spi_init+0x88>
   1eb28:	230f      	movs	r3, #15
   1eb2a:	4662      	mov	r2, ip
   1eb2c:	4013      	ands	r3, r2
   1eb2e:	e6b1      	b.n	1e894 <spi_init+0x88>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   1eb30:	087f      	lsrs	r7, r7, #1
   1eb32:	19db      	adds	r3, r3, r7
   1eb34:	3330      	adds	r3, #48	; 0x30
   1eb36:	7819      	ldrb	r1, [r3, #0]
   1eb38:	b2c9      	uxtb	r1, r1
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   1eb3a:	090b      	lsrs	r3, r1, #4
	if (pin_index & 1) {
   1eb3c:	4202      	tst	r2, r0
   1eb3e:	d000      	beq.n	1eb42 <spi_init+0x336>
   1eb40:	e6c8      	b.n	1e8d4 <spi_init+0xc8>
   1eb42:	230f      	movs	r3, #15
   1eb44:	400b      	ands	r3, r1
   1eb46:	e6c5      	b.n	1e8d4 <spi_init+0xc8>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   1eb48:	087f      	lsrs	r7, r7, #1
   1eb4a:	19db      	adds	r3, r3, r7
   1eb4c:	3330      	adds	r3, #48	; 0x30
   1eb4e:	7819      	ldrb	r1, [r3, #0]
   1eb50:	b2c9      	uxtb	r1, r1
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   1eb52:	090b      	lsrs	r3, r1, #4
	if (pin_index & 1) {
   1eb54:	4202      	tst	r2, r0
   1eb56:	d000      	beq.n	1eb5a <spi_init+0x34e>
   1eb58:	e6dd      	b.n	1e916 <spi_init+0x10a>
   1eb5a:	230f      	movs	r3, #15
   1eb5c:	400b      	ands	r3, r1
   1eb5e:	e6da      	b.n	1e916 <spi_init+0x10a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1eb60:	2102      	movs	r1, #2
   1eb62:	0030      	movs	r0, r6
   1eb64:	4b14      	ldr	r3, [pc, #80]	; (1ebb8 <spi_init+0x3ac>)
   1eb66:	4798      	blx	r3
   1eb68:	4680      	mov	r8, r0
   1eb6a:	e6b9      	b.n	1e8e0 <spi_init+0xd4>
   1eb6c:	2103      	movs	r1, #3
   1eb6e:	0030      	movs	r0, r6
   1eb70:	4b11      	ldr	r3, [pc, #68]	; (1ebb8 <spi_init+0x3ac>)
   1eb72:	4798      	blx	r3
   1eb74:	4681      	mov	r9, r0
   1eb76:	e6d4      	b.n	1e922 <spi_init+0x116>
   1eb78:	230f      	movs	r3, #15
   1eb7a:	401a      	ands	r2, r3
   1eb7c:	4691      	mov	r9, r2
   1eb7e:	e6f9      	b.n	1e974 <spi_init+0x168>
			spi_module->CTRLB.reg == ctrlb) {
   1eb80:	6873      	ldr	r3, [r6, #4]
	if (spi_module->CTRLA.reg == ctrla &&
   1eb82:	4293      	cmp	r3, r2
   1eb84:	d000      	beq.n	1eb88 <spi_init+0x37c>
   1eb86:	e723      	b.n	1e9d0 <spi_init+0x1c4>
		module->mode           = config->mode;
   1eb88:	7823      	ldrb	r3, [r4, #0]
		return STATUS_OK;
   1eb8a:	2000      	movs	r0, #0
		module->mode           = config->mode;
   1eb8c:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
   1eb8e:	7c23      	ldrb	r3, [r4, #16]
   1eb90:	71ab      	strb	r3, [r5, #6]
   1eb92:	e651      	b.n	1e838 <spi_init+0x2c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   1eb94:	220c      	movs	r2, #12
   1eb96:	6833      	ldr	r3, [r6, #0]
   1eb98:	4313      	orrs	r3, r2
   1eb9a:	6033      	str	r3, [r6, #0]
   1eb9c:	7823      	ldrb	r3, [r4, #0]
   1eb9e:	e74d      	b.n	1ea3c <spi_init+0x230>
			MCLK->APBDMASK.reg |= mask;
   1eba0:	4641      	mov	r1, r8
   1eba2:	4a07      	ldr	r2, [pc, #28]	; (1ebc0 <spi_init+0x3b4>)
   1eba4:	2718      	movs	r7, #24
   1eba6:	6a13      	ldr	r3, [r2, #32]
   1eba8:	430b      	orrs	r3, r1
   1ebaa:	6213      	str	r3, [r2, #32]
   1ebac:	e731      	b.n	1ea12 <spi_init+0x206>
   1ebae:	46c0      	nop			; (mov r8, r8)
   1ebb0:	40002800 	.word	0x40002800
   1ebb4:	0001fc8d 	.word	0x0001fc8d
   1ebb8:	0001f2d9 	.word	0x0001f2d9
   1ebbc:	0001f435 	.word	0x0001f435
   1ebc0:	40000400 	.word	0x40000400
   1ebc4:	0001fc15 	.word	0x0001fc15
   1ebc8:	0001fc55 	.word	0x0001fc55
   1ebcc:	0001f291 	.word	0x0001f291
   1ebd0:	0001fd11 	.word	0x0001fd11
   1ebd4:	41002000 	.word	0x41002000
		enum status_code error_code = _sercom_get_sync_baud_val(
   1ebd8:	0001      	movs	r1, r0
   1ebda:	4b14      	ldr	r3, [pc, #80]	; (1ec2c <spi_init+0x420>)
   1ebdc:	aa02      	add	r2, sp, #8
   1ebde:	69a0      	ldr	r0, [r4, #24]
   1ebe0:	4798      	blx	r3
   1ebe2:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   1ebe4:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   1ebe6:	2b00      	cmp	r3, #0
   1ebe8:	d000      	beq.n	1ebec <spi_init+0x3e0>
   1ebea:	e625      	b.n	1e838 <spi_init+0x2c>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   1ebec:	466a      	mov	r2, sp
   1ebee:	7b33      	ldrb	r3, [r6, #12]
   1ebf0:	7a12      	ldrb	r2, [r2, #8]
			return STATUS_ERR_DENIED;
   1ebf2:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   1ebf4:	429a      	cmp	r2, r3
   1ebf6:	d000      	beq.n	1ebfa <spi_init+0x3ee>
   1ebf8:	e61e      	b.n	1e838 <spi_init+0x2c>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
   1ebfa:	370c      	adds	r7, #12
   1ebfc:	e6c4      	b.n	1e988 <spi_init+0x17c>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1ebfe:	4b0c      	ldr	r3, [pc, #48]	; (1ec30 <spi_init+0x424>)
   1ec00:	6828      	ldr	r0, [r5, #0]
   1ec02:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1ec04:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1ec06:	4b0b      	ldr	r3, [pc, #44]	; (1ec34 <spi_init+0x428>)
   1ec08:	b2c0      	uxtb	r0, r0
   1ec0a:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
   1ec0c:	466b      	mov	r3, sp
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1ec0e:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   1ec10:	1c9a      	adds	r2, r3, #2
   1ec12:	69a0      	ldr	r0, [r4, #24]
   1ec14:	4b05      	ldr	r3, [pc, #20]	; (1ec2c <spi_init+0x420>)
   1ec16:	4798      	blx	r3
   1ec18:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   1ec1a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   1ec1c:	2b00      	cmp	r3, #0
   1ec1e:	d000      	beq.n	1ec22 <spi_init+0x416>
   1ec20:	e60a      	b.n	1e838 <spi_init+0x2c>
		spi_module->BAUD.reg = (uint8_t)baud;
   1ec22:	466b      	mov	r3, sp
   1ec24:	464a      	mov	r2, r9
   1ec26:	789b      	ldrb	r3, [r3, #2]
   1ec28:	7313      	strb	r3, [r2, #12]
   1ec2a:	e742      	b.n	1eab2 <spi_init+0x2a6>
   1ec2c:	0001f001 	.word	0x0001f001
   1ec30:	0001f435 	.word	0x0001f435
   1ec34:	0001fc8d 	.word	0x0001fc8d

0001ec38 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   1ec38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec3a:	46de      	mov	lr, fp
   1ec3c:	4657      	mov	r7, sl
   1ec3e:	464e      	mov	r6, r9
   1ec40:	4645      	mov	r5, r8
   1ec42:	468b      	mov	fp, r1
   1ec44:	b5e0      	push	{r5, r6, r7, lr}
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1ec46:	2417      	movs	r4, #23
	if (length == 0) {
   1ec48:	2a00      	cmp	r2, #0
   1ec4a:	d106      	bne.n	1ec5a <spi_read_buffer_wait+0x22>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   1ec4c:	0020      	movs	r0, r4
   1ec4e:	bc3c      	pop	{r2, r3, r4, r5}
   1ec50:	4690      	mov	r8, r2
   1ec52:	4699      	mov	r9, r3
   1ec54:	46a2      	mov	sl, r4
   1ec56:	46ab      	mov	fp, r5
   1ec58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   1ec5a:	79c4      	ldrb	r4, [r0, #7]
   1ec5c:	2c00      	cmp	r4, #0
   1ec5e:	d101      	bne.n	1ec64 <spi_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   1ec60:	341c      	adds	r4, #28
   1ec62:	e7f3      	b.n	1ec4c <spi_read_buffer_wait+0x14>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1ec64:	05db      	lsls	r3, r3, #23
   1ec66:	0ddb      	lsrs	r3, r3, #23
   1ec68:	469c      	mov	ip, r3
		while (!spi_is_ready_to_read(module)) {
   1ec6a:	2304      	movs	r3, #4
   1ec6c:	4698      	mov	r8, r3
	while (length--) {
   1ec6e:	4b22      	ldr	r3, [pc, #136]	; (1ecf8 <spi_read_buffer_wait+0xc0>)
   1ec70:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   1ec72:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(module)) {
   1ec74:	2404      	movs	r4, #4
	while (length--) {
   1ec76:	4699      	mov	r9, r3
   1ec78:	3a01      	subs	r2, #1
   1ec7a:	b295      	uxth	r5, r2
		if (module->mode == SPI_MODE_MASTER) {
   1ec7c:	7943      	ldrb	r3, [r0, #5]
   1ec7e:	6802      	ldr	r2, [r0, #0]
   1ec80:	2b01      	cmp	r3, #1
   1ec82:	d01e      	beq.n	1ecc2 <spi_read_buffer_wait+0x8a>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1ec84:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_read(module)) {
   1ec86:	421c      	tst	r4, r3
   1ec88:	d0fc      	beq.n	1ec84 <spi_read_buffer_wait+0x4c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1ec8a:	4641      	mov	r1, r8
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1ec8c:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   1ec8e:	4219      	tst	r1, r3
   1ec90:	d021      	beq.n	1ecd6 <spi_read_buffer_wait+0x9e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1ec92:	8b53      	ldrh	r3, [r2, #26]
   1ec94:	421c      	tst	r4, r3
   1ec96:	d126      	bne.n	1ece6 <spi_read_buffer_wait+0xae>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ec98:	7983      	ldrb	r3, [r0, #6]
   1ec9a:	2b01      	cmp	r3, #1
   1ec9c:	d027      	beq.n	1ecee <spi_read_buffer_wait+0xb6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1ec9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1eca0:	b2db      	uxtb	r3, r3
   1eca2:	469a      	mov	sl, r3
		rx_data[rx_pos++] = received_data;
   1eca4:	4652      	mov	r2, sl
   1eca6:	4659      	mov	r1, fp
   1eca8:	558a      	strb	r2, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ecaa:	7982      	ldrb	r2, [r0, #6]
		rx_data[rx_pos++] = received_data;
   1ecac:	1c73      	adds	r3, r6, #1
   1ecae:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ecb0:	2a01      	cmp	r2, #1
   1ecb2:	d012      	beq.n	1ecda <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   1ecb4:	001e      	movs	r6, r3
	while (length--) {
   1ecb6:	3d01      	subs	r5, #1
   1ecb8:	b2ad      	uxth	r5, r5
   1ecba:	454d      	cmp	r5, r9
   1ecbc:	d1de      	bne.n	1ec7c <spi_read_buffer_wait+0x44>
	return STATUS_OK;
   1ecbe:	2400      	movs	r4, #0
   1ecc0:	e7c4      	b.n	1ec4c <spi_read_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1ecc2:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_write(module)) {
   1ecc4:	421f      	tst	r7, r3
   1ecc6:	d0fc      	beq.n	1ecc2 <spi_read_buffer_wait+0x8a>
   1ecc8:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   1ecca:	421f      	tst	r7, r3
   1eccc:	d0da      	beq.n	1ec84 <spi_read_buffer_wait+0x4c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1ecce:	4663      	mov	r3, ip
   1ecd0:	6293      	str	r3, [r2, #40]	; 0x28
   1ecd2:	6802      	ldr	r2, [r0, #0]
   1ecd4:	e7d6      	b.n	1ec84 <spi_read_buffer_wait+0x4c>
		return STATUS_ERR_IO;
   1ecd6:	2410      	movs	r4, #16
   1ecd8:	e7b8      	b.n	1ec4c <spi_read_buffer_wait+0x14>
			rx_data[rx_pos++] = (received_data >> 8);
   1ecda:	4652      	mov	r2, sl
   1ecdc:	3602      	adds	r6, #2
   1ecde:	0a12      	lsrs	r2, r2, #8
   1ece0:	b2b6      	uxth	r6, r6
   1ece2:	54ca      	strb	r2, [r1, r3]
   1ece4:	e7e7      	b.n	1ecb6 <spi_read_buffer_wait+0x7e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1ece6:	8354      	strh	r4, [r2, #26]
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1ece8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		retval = STATUS_ERR_OVERFLOW;
   1ecea:	241e      	movs	r4, #30
   1ecec:	e7ae      	b.n	1ec4c <spi_read_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1ecee:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1ecf0:	05db      	lsls	r3, r3, #23
   1ecf2:	0ddb      	lsrs	r3, r3, #23
   1ecf4:	469a      	mov	sl, r3
   1ecf6:	e7d5      	b.n	1eca4 <spi_read_buffer_wait+0x6c>
   1ecf8:	0000ffff 	.word	0x0000ffff

0001ecfc <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
   1ecfc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
   1ecfe:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
   1ed00:	251c      	movs	r5, #28
	if (!(module->receiver_enabled)) {
   1ed02:	2b00      	cmp	r3, #0
   1ed04:	d101      	bne.n	1ed0a <spi_transceive_wait+0xe>

	/* Read data */
	retval = spi_read(module, rx_data);

	return retval;
}
   1ed06:	0028      	movs	r0, r5
   1ed08:	bd30      	pop	{r4, r5, pc}
   1ed0a:	6803      	ldr	r3, [r0, #0]
	while (!spi_is_ready_to_write(module)) {
   1ed0c:	3d1b      	subs	r5, #27
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1ed0e:	7e1c      	ldrb	r4, [r3, #24]
   1ed10:	4225      	tst	r5, r4
   1ed12:	d0fc      	beq.n	1ed0e <spi_transceive_wait+0x12>
   1ed14:	7e1c      	ldrb	r4, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   1ed16:	4225      	tst	r5, r4
   1ed18:	d114      	bne.n	1ed44 <spi_transceive_wait+0x48>
	while (!spi_is_ready_to_read(module)) {
   1ed1a:	2404      	movs	r4, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1ed1c:	7e19      	ldrb	r1, [r3, #24]
   1ed1e:	420c      	tst	r4, r1
   1ed20:	d0fc      	beq.n	1ed1c <spi_transceive_wait+0x20>
   1ed22:	7e19      	ldrb	r1, [r3, #24]
		return STATUS_ERR_IO;
   1ed24:	2510      	movs	r5, #16
	if (!spi_is_ready_to_read(module)) {
   1ed26:	420c      	tst	r4, r1
   1ed28:	d0ed      	beq.n	1ed06 <spi_transceive_wait+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1ed2a:	8b59      	ldrh	r1, [r3, #26]
	enum status_code retval = STATUS_OK;
   1ed2c:	2500      	movs	r5, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1ed2e:	0749      	lsls	r1, r1, #29
   1ed30:	d501      	bpl.n	1ed36 <spi_transceive_wait+0x3a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1ed32:	835c      	strh	r4, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
   1ed34:	351e      	adds	r5, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ed36:	7981      	ldrb	r1, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1ed38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ed3a:	2901      	cmp	r1, #1
   1ed3c:	d007      	beq.n	1ed4e <spi_transceive_wait+0x52>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1ed3e:	b2db      	uxtb	r3, r3
   1ed40:	8013      	strh	r3, [r2, #0]
   1ed42:	e7e0      	b.n	1ed06 <spi_transceive_wait+0xa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1ed44:	05c9      	lsls	r1, r1, #23
   1ed46:	0dc9      	lsrs	r1, r1, #23
   1ed48:	6299      	str	r1, [r3, #40]	; 0x28
   1ed4a:	6803      	ldr	r3, [r0, #0]
   1ed4c:	e7e5      	b.n	1ed1a <spi_transceive_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1ed4e:	05db      	lsls	r3, r3, #23
   1ed50:	0ddb      	lsrs	r3, r3, #23
   1ed52:	8013      	strh	r3, [r2, #0]
   1ed54:	e7d7      	b.n	1ed06 <spi_transceive_wait+0xa>
   1ed56:	46c0      	nop			; (mov r8, r8)

0001ed58 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   1ed58:	b570      	push	{r4, r5, r6, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1ed5a:	7943      	ldrb	r3, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   1ed5c:	2415      	movs	r4, #21
	if (module->mode != SPI_MODE_MASTER) {
   1ed5e:	2b01      	cmp	r3, #1
   1ed60:	d001      	beq.n	1ed66 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   1ed62:	0020      	movs	r0, r4
   1ed64:	bd70      	pop	{r4, r5, r6, pc}
	if(!(module->master_slave_select_enable))
   1ed66:	7a04      	ldrb	r4, [r0, #8]
   1ed68:	2c00      	cmp	r4, #0
   1ed6a:	d13a      	bne.n	1ede2 <spi_select_slave+0x8a>
		if (select) {
   1ed6c:	2a00      	cmp	r2, #0
   1ed6e:	d03a      	beq.n	1ede6 <spi_select_slave+0x8e>
			if (slave->address_enabled) {
   1ed70:	784a      	ldrb	r2, [r1, #1]
   1ed72:	2a00      	cmp	r2, #0
   1ed74:	d046      	beq.n	1ee04 <spi_select_slave+0xac>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1ed76:	6802      	ldr	r2, [r0, #0]
   1ed78:	7e12      	ldrb	r2, [r2, #24]
				if (!spi_is_ready_to_write(module)) {
   1ed7a:	401a      	ands	r2, r3
   1ed7c:	d10d      	bne.n	1ed9a <spi_select_slave+0x42>
					port_pin_set_output_level(slave->ss_pin, true);
   1ed7e:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ed80:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
   1ed82:	09c4      	lsrs	r4, r0, #7
   1ed84:	d13c      	bne.n	1ee00 <spi_select_slave+0xa8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ed86:	321f      	adds	r2, #31
   1ed88:	4002      	ands	r2, r0
   1ed8a:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
   1ed8c:	01ca      	lsls	r2, r1, #7
   1ed8e:	4926      	ldr	r1, [pc, #152]	; (1ee28 <spi_select_slave+0xd0>)
					return STATUS_BUSY;
   1ed90:	3405      	adds	r4, #5
   1ed92:	468c      	mov	ip, r1
   1ed94:	4462      	add	r2, ip
   1ed96:	6193      	str	r3, [r2, #24]
   1ed98:	e7e3      	b.n	1ed62 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   1ed9a:	780d      	ldrb	r5, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ed9c:	096a      	lsrs	r2, r5, #5
	if (port_index < PORT_INST_NUM) {
   1ed9e:	09ee      	lsrs	r6, r5, #7
   1eda0:	d13f      	bne.n	1ee22 <spi_select_slave+0xca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1eda2:	241f      	movs	r4, #31
   1eda4:	402c      	ands	r4, r5
   1eda6:	001d      	movs	r5, r3
   1eda8:	40a5      	lsls	r5, r4
   1edaa:	002c      	movs	r4, r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
   1edac:	4d1e      	ldr	r5, [pc, #120]	; (1ee28 <spi_select_slave+0xd0>)
   1edae:	01d2      	lsls	r2, r2, #7
   1edb0:	46ac      	mov	ip, r5
   1edb2:	4462      	add	r2, ip
   1edb4:	6154      	str	r4, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1edb6:	6802      	ldr	r2, [r0, #0]
				spi_write(module, slave->address);
   1edb8:	788c      	ldrb	r4, [r1, #2]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1edba:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   1edbc:	420b      	tst	r3, r1
   1edbe:	d000      	beq.n	1edc2 <spi_select_slave+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1edc0:	6294      	str	r4, [r2, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   1edc2:	79c3      	ldrb	r3, [r0, #7]
   1edc4:	2b00      	cmp	r3, #0
   1edc6:	d10c      	bne.n	1ede2 <spi_select_slave+0x8a>
					while (!spi_is_ready_to_read(module)) {
   1edc8:	2104      	movs	r1, #4
   1edca:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1edcc:	7e13      	ldrb	r3, [r2, #24]
   1edce:	4219      	tst	r1, r3
   1edd0:	d0fc      	beq.n	1edcc <spi_select_slave+0x74>
   1edd2:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   1edd4:	4219      	tst	r1, r3
   1edd6:	d004      	beq.n	1ede2 <spi_select_slave+0x8a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1edd8:	8b53      	ldrh	r3, [r2, #26]
   1edda:	075b      	lsls	r3, r3, #29
   1eddc:	d500      	bpl.n	1ede0 <spi_select_slave+0x88>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1edde:	8351      	strh	r1, [r2, #26]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1ede0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	return STATUS_OK;
   1ede2:	2400      	movs	r4, #0
   1ede4:	e7bd      	b.n	1ed62 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   1ede6:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ede8:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
   1edea:	09c4      	lsrs	r4, r0, #7
   1edec:	d108      	bne.n	1ee00 <spi_select_slave+0xa8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1edee:	221f      	movs	r2, #31
   1edf0:	4002      	ands	r2, r0
   1edf2:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
   1edf4:	01ca      	lsls	r2, r1, #7
   1edf6:	490c      	ldr	r1, [pc, #48]	; (1ee28 <spi_select_slave+0xd0>)
   1edf8:	468c      	mov	ip, r1
   1edfa:	4462      	add	r2, ip
   1edfc:	6193      	str	r3, [r2, #24]
   1edfe:	e7b0      	b.n	1ed62 <spi_select_slave+0xa>
   1ee00:	6192      	str	r2, [r2, #24]
   1ee02:	deff      	udf	#255	; 0xff
				port_pin_set_output_level(slave->ss_pin, false);
   1ee04:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ee06:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
   1ee08:	09c4      	lsrs	r4, r0, #7
   1ee0a:	d108      	bne.n	1ee1e <spi_select_slave+0xc6>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ee0c:	221f      	movs	r2, #31
   1ee0e:	4002      	ands	r2, r0
   1ee10:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
   1ee12:	01ca      	lsls	r2, r1, #7
   1ee14:	4904      	ldr	r1, [pc, #16]	; (1ee28 <spi_select_slave+0xd0>)
   1ee16:	468c      	mov	ip, r1
   1ee18:	4462      	add	r2, ip
   1ee1a:	6153      	str	r3, [r2, #20]
   1ee1c:	e7a1      	b.n	1ed62 <spi_select_slave+0xa>
   1ee1e:	6152      	str	r2, [r2, #20]
   1ee20:	deff      	udf	#255	; 0xff
   1ee22:	6164      	str	r4, [r4, #20]
   1ee24:	deff      	udf	#255	; 0xff
   1ee26:	46c0      	nop			; (mov r8, r8)
   1ee28:	40002800 	.word	0x40002800

0001ee2c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   1ee2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee2e:	46de      	mov	lr, fp
   1ee30:	4657      	mov	r7, sl
   1ee32:	464e      	mov	r6, r9
   1ee34:	4645      	mov	r5, r8
   1ee36:	b5e0      	push	{r5, r6, r7, lr}
   1ee38:	468b      	mov	fp, r1
   1ee3a:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1ee3c:	2317      	movs	r3, #23
	if (length == 0) {
   1ee3e:	2a00      	cmp	r2, #0
   1ee40:	d107      	bne.n	1ee52 <spi_write_buffer_wait+0x26>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   1ee42:	0018      	movs	r0, r3
   1ee44:	b003      	add	sp, #12
   1ee46:	bc3c      	pop	{r2, r3, r4, r5}
   1ee48:	4690      	mov	r8, r2
   1ee4a:	4699      	mov	r9, r3
   1ee4c:	46a2      	mov	sl, r4
   1ee4e:	46ab      	mov	fp, r5
   1ee50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while (!spi_is_ready_to_read(module)) {
   1ee52:	2304      	movs	r3, #4
   1ee54:	4698      	mov	r8, r3
	while (length--) {
   1ee56:	4b22      	ldr	r3, [pc, #136]	; (1eee0 <spi_write_buffer_wait+0xb4>)
   1ee58:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   1ee5a:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   1ee5c:	2504      	movs	r5, #4
	while (length--) {
   1ee5e:	469c      	mov	ip, r3
   1ee60:	3a01      	subs	r2, #1
   1ee62:	b296      	uxth	r6, r2
   1ee64:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1ee66:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   1ee68:	421c      	tst	r4, r3
   1ee6a:	d0fc      	beq.n	1ee66 <spi_write_buffer_wait+0x3a>
		uint16_t data_to_send = tx_data[tx_pos++];
   1ee6c:	1c7b      	adds	r3, r7, #1
   1ee6e:	b29b      	uxth	r3, r3
   1ee70:	469a      	mov	sl, r3
   1ee72:	465b      	mov	r3, fp
   1ee74:	5ddb      	ldrb	r3, [r3, r7]
   1ee76:	9301      	str	r3, [sp, #4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ee78:	7981      	ldrb	r1, [r0, #6]
   1ee7a:	2901      	cmp	r1, #1
   1ee7c:	d027      	beq.n	1eece <spi_write_buffer_wait+0xa2>
		uint16_t data_to_send = tx_data[tx_pos++];
   1ee7e:	466b      	mov	r3, sp
   1ee80:	4657      	mov	r7, sl
   1ee82:	889b      	ldrh	r3, [r3, #4]
   1ee84:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   1ee86:	420c      	tst	r4, r1
   1ee88:	d002      	beq.n	1ee90 <spi_write_buffer_wait+0x64>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1ee8a:	05db      	lsls	r3, r3, #23
   1ee8c:	0ddb      	lsrs	r3, r3, #23
   1ee8e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   1ee90:	79c3      	ldrb	r3, [r0, #7]
   1ee92:	2b00      	cmp	r3, #0
   1ee94:	d00c      	beq.n	1eeb0 <spi_write_buffer_wait+0x84>
   1ee96:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1ee98:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   1ee9a:	421d      	tst	r5, r3
   1ee9c:	d0fc      	beq.n	1ee98 <spi_write_buffer_wait+0x6c>
	if (!spi_is_ready_to_read(module)) {
   1ee9e:	4641      	mov	r1, r8
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1eea0:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   1eea2:	4219      	tst	r1, r3
   1eea4:	d004      	beq.n	1eeb0 <spi_write_buffer_wait+0x84>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1eea6:	8b53      	ldrh	r3, [r2, #26]
   1eea8:	421d      	tst	r5, r3
   1eeaa:	d000      	beq.n	1eeae <spi_write_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1eeac:	8355      	strh	r5, [r2, #26]
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1eeae:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   1eeb0:	3e01      	subs	r6, #1
   1eeb2:	b2b6      	uxth	r6, r6
   1eeb4:	4566      	cmp	r6, ip
   1eeb6:	d1d5      	bne.n	1ee64 <spi_write_buffer_wait+0x38>
	if (module->mode == SPI_MODE_MASTER) {
   1eeb8:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   1eeba:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   1eebc:	2a01      	cmp	r2, #1
   1eebe:	d1c0      	bne.n	1ee42 <spi_write_buffer_wait+0x16>
   1eec0:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   1eec2:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1eec4:	7e0b      	ldrb	r3, [r1, #24]
   1eec6:	421a      	tst	r2, r3
   1eec8:	d0fc      	beq.n	1eec4 <spi_write_buffer_wait+0x98>
	return STATUS_OK;
   1eeca:	2300      	movs	r3, #0
   1eecc:	e7b9      	b.n	1ee42 <spi_write_buffer_wait+0x16>
			data_to_send |= (tx_data[tx_pos++] << 8);
   1eece:	465b      	mov	r3, fp
   1eed0:	4651      	mov	r1, sl
   1eed2:	5c59      	ldrb	r1, [r3, r1]
   1eed4:	9b01      	ldr	r3, [sp, #4]
   1eed6:	3702      	adds	r7, #2
   1eed8:	0209      	lsls	r1, r1, #8
   1eeda:	b2bf      	uxth	r7, r7
   1eedc:	430b      	orrs	r3, r1
   1eede:	e7d1      	b.n	1ee84 <spi_write_buffer_wait+0x58>
   1eee0:	0000ffff 	.word	0x0000ffff

0001eee4 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
   1eee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eee6:	464e      	mov	r6, r9
   1eee8:	4645      	mov	r5, r8
   1eeea:	46de      	mov	lr, fp
   1eeec:	4657      	mov	r7, sl
   1eeee:	b5e0      	push	{r5, r6, r7, lr}
   1eef0:	4691      	mov	r9, r2
   1eef2:	b083      	sub	sp, #12
   1eef4:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1eef6:	2217      	movs	r2, #23
	if (length == 0) {
   1eef8:	2b00      	cmp	r3, #0
   1eefa:	d107      	bne.n	1ef0c <spi_transceive_buffer_wait+0x28>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   1eefc:	0010      	movs	r0, r2
   1eefe:	b003      	add	sp, #12
   1ef00:	bc3c      	pop	{r2, r3, r4, r5}
   1ef02:	4690      	mov	r8, r2
   1ef04:	4699      	mov	r9, r3
   1ef06:	46a2      	mov	sl, r4
   1ef08:	46ab      	mov	fp, r5
   1ef0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   1ef0c:	79c2      	ldrb	r2, [r0, #7]
   1ef0e:	2a00      	cmp	r2, #0
   1ef10:	d101      	bne.n	1ef16 <spi_transceive_buffer_wait+0x32>
		return STATUS_ERR_DENIED;
   1ef12:	321c      	adds	r2, #28
   1ef14:	e7f2      	b.n	1eefc <spi_transceive_buffer_wait+0x18>
	while (length--) {
   1ef16:	3b01      	subs	r3, #1
   1ef18:	b29e      	uxth	r6, r3
   1ef1a:	2300      	movs	r3, #0
   1ef1c:	469c      	mov	ip, r3
		while (!spi_is_ready_to_read(module)) {
   1ef1e:	3304      	adds	r3, #4
	while (length--) {
   1ef20:	2100      	movs	r1, #0
		while (!spi_is_ready_to_write(module)) {
   1ef22:	2401      	movs	r4, #1
		while (!spi_is_ready_to_read(module)) {
   1ef24:	2504      	movs	r5, #4
   1ef26:	469b      	mov	fp, r3
   1ef28:	4667      	mov	r7, ip
   1ef2a:	9600      	str	r6, [sp, #0]
   1ef2c:	6803      	ldr	r3, [r0, #0]
   1ef2e:	9e00      	ldr	r6, [sp, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1ef30:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
   1ef32:	4214      	tst	r4, r2
   1ef34:	d0fc      	beq.n	1ef30 <spi_transceive_buffer_wait+0x4c>
		uint16_t data_to_send = tx_data[tx_pos++];
   1ef36:	1c4a      	adds	r2, r1, #1
   1ef38:	b292      	uxth	r2, r2
   1ef3a:	4694      	mov	ip, r2
   1ef3c:	4642      	mov	r2, r8
   1ef3e:	5c52      	ldrb	r2, [r2, r1]
   1ef40:	9600      	str	r6, [sp, #0]
   1ef42:	9201      	str	r2, [sp, #4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ef44:	7986      	ldrb	r6, [r0, #6]
   1ef46:	2e01      	cmp	r6, #1
   1ef48:	d039      	beq.n	1efbe <spi_transceive_buffer_wait+0xda>
		uint16_t data_to_send = tx_data[tx_pos++];
   1ef4a:	4661      	mov	r1, ip
   1ef4c:	b292      	uxth	r2, r2
   1ef4e:	7e1e      	ldrb	r6, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   1ef50:	4234      	tst	r4, r6
   1ef52:	d032      	beq.n	1efba <spi_transceive_buffer_wait+0xd6>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1ef54:	05d2      	lsls	r2, r2, #23
   1ef56:	0dd2      	lsrs	r2, r2, #23
   1ef58:	629a      	str	r2, [r3, #40]	; 0x28
   1ef5a:	6803      	ldr	r3, [r0, #0]
   1ef5c:	9e00      	ldr	r6, [sp, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1ef5e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
   1ef60:	4215      	tst	r5, r2
   1ef62:	d0fc      	beq.n	1ef5e <spi_transceive_buffer_wait+0x7a>
   1ef64:	9600      	str	r6, [sp, #0]
	if (!spi_is_ready_to_read(module)) {
   1ef66:	465e      	mov	r6, fp
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1ef68:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
   1ef6a:	4216      	tst	r6, r2
   1ef6c:	d023      	beq.n	1efb6 <spi_transceive_buffer_wait+0xd2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1ef6e:	8b5a      	ldrh	r2, [r3, #26]
   1ef70:	4215      	tst	r5, r2
   1ef72:	d135      	bne.n	1efe0 <spi_transceive_buffer_wait+0xfc>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ef74:	7982      	ldrb	r2, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1ef76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ef78:	2a01      	cmp	r2, #1
   1ef7a:	d038      	beq.n	1efee <spi_transceive_buffer_wait+0x10a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1ef7c:	b2db      	uxtb	r3, r3
   1ef7e:	469c      	mov	ip, r3
		rx_data[rx_pos++] = received_data;
   1ef80:	464a      	mov	r2, r9
   1ef82:	4666      	mov	r6, ip
   1ef84:	55d6      	strb	r6, [r2, r7]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ef86:	7982      	ldrb	r2, [r0, #6]
		rx_data[rx_pos++] = received_data;
   1ef88:	1c7b      	adds	r3, r7, #1
   1ef8a:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1ef8c:	2a01      	cmp	r2, #1
   1ef8e:	d020      	beq.n	1efd2 <spi_transceive_buffer_wait+0xee>
		rx_data[rx_pos++] = received_data;
   1ef90:	001f      	movs	r7, r3
	while (length--) {
   1ef92:	9e00      	ldr	r6, [sp, #0]
   1ef94:	4b19      	ldr	r3, [pc, #100]	; (1effc <spi_transceive_buffer_wait+0x118>)
   1ef96:	3e01      	subs	r6, #1
   1ef98:	b2b2      	uxth	r2, r6
   1ef9a:	9200      	str	r2, [sp, #0]
   1ef9c:	429a      	cmp	r2, r3
   1ef9e:	d1c5      	bne.n	1ef2c <spi_transceive_buffer_wait+0x48>
	if (module->mode == SPI_MODE_MASTER) {
   1efa0:	7943      	ldrb	r3, [r0, #5]
	return STATUS_OK;
   1efa2:	2200      	movs	r2, #0
	if (module->mode == SPI_MODE_MASTER) {
   1efa4:	2b01      	cmp	r3, #1
   1efa6:	d1a9      	bne.n	1eefc <spi_transceive_buffer_wait+0x18>
   1efa8:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   1efaa:	3202      	adds	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1efac:	7e0b      	ldrb	r3, [r1, #24]
   1efae:	421a      	tst	r2, r3
   1efb0:	d0fc      	beq.n	1efac <spi_transceive_buffer_wait+0xc8>
	return STATUS_OK;
   1efb2:	2200      	movs	r2, #0
   1efb4:	e7a2      	b.n	1eefc <spi_transceive_buffer_wait+0x18>
		return STATUS_ERR_IO;
   1efb6:	2210      	movs	r2, #16
   1efb8:	e7a0      	b.n	1eefc <spi_transceive_buffer_wait+0x18>
   1efba:	9e00      	ldr	r6, [sp, #0]
   1efbc:	e7cf      	b.n	1ef5e <spi_transceive_buffer_wait+0x7a>
			data_to_send |= (tx_data[tx_pos++] << 8);
   1efbe:	4646      	mov	r6, r8
   1efc0:	4662      	mov	r2, ip
   1efc2:	5cb2      	ldrb	r2, [r6, r2]
   1efc4:	9e01      	ldr	r6, [sp, #4]
   1efc6:	0212      	lsls	r2, r2, #8
   1efc8:	3102      	adds	r1, #2
   1efca:	4316      	orrs	r6, r2
   1efcc:	b289      	uxth	r1, r1
   1efce:	0032      	movs	r2, r6
   1efd0:	e7bd      	b.n	1ef4e <spi_transceive_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
   1efd2:	4662      	mov	r2, ip
   1efd4:	464e      	mov	r6, r9
   1efd6:	3702      	adds	r7, #2
   1efd8:	0a12      	lsrs	r2, r2, #8
   1efda:	b2bf      	uxth	r7, r7
   1efdc:	54f2      	strb	r2, [r6, r3]
   1efde:	e7d8      	b.n	1ef92 <spi_transceive_buffer_wait+0xae>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1efe0:	835d      	strh	r5, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1efe2:	7982      	ldrb	r2, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1efe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1efe6:	2a01      	cmp	r2, #1
   1efe8:	d005      	beq.n	1eff6 <spi_transceive_buffer_wait+0x112>
		retval = STATUS_ERR_OVERFLOW;
   1efea:	221e      	movs	r2, #30
   1efec:	e786      	b.n	1eefc <spi_transceive_buffer_wait+0x18>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1efee:	05db      	lsls	r3, r3, #23
   1eff0:	0ddb      	lsrs	r3, r3, #23
   1eff2:	469c      	mov	ip, r3
   1eff4:	e7c4      	b.n	1ef80 <spi_transceive_buffer_wait+0x9c>
		retval = STATUS_ERR_OVERFLOW;
   1eff6:	321d      	adds	r2, #29
   1eff8:	e780      	b.n	1eefc <spi_transceive_buffer_wait+0x18>
   1effa:	46c0      	nop			; (mov r8, r8)
   1effc:	0000ffff 	.word	0x0000ffff

0001f000 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1f000:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1f002:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f004:	2340      	movs	r3, #64	; 0x40
   1f006:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
   1f008:	4281      	cmp	r1, r0
   1f00a:	d202      	bcs.n	1f012 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   1f00c:	0018      	movs	r0, r3
   1f00e:	bd10      	pop	{r4, pc}
		baud_calculated++;
   1f010:	001c      	movs	r4, r3
   1f012:	1c63      	adds	r3, r4, #1
		clock_value = clock_value - baudrate;
   1f014:	1a09      	subs	r1, r1, r0
		baud_calculated++;
   1f016:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
   1f018:	4288      	cmp	r0, r1
   1f01a:	d9f9      	bls.n	1f010 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f01c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
   1f01e:	2cff      	cmp	r4, #255	; 0xff
   1f020:	d8f4      	bhi.n	1f00c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
   1f022:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
   1f024:	2300      	movs	r3, #0
   1f026:	e7f1      	b.n	1f00c <_sercom_get_sync_baud_val+0xc>

0001f028 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1f028:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f02a:	46de      	mov	lr, fp
   1f02c:	4645      	mov	r5, r8
   1f02e:	4657      	mov	r7, sl
   1f030:	464e      	mov	r6, r9
   1f032:	b5e0      	push	{r5, r6, r7, lr}
   1f034:	b087      	sub	sp, #28
   1f036:	4693      	mov	fp, r2
   1f038:	aa10      	add	r2, sp, #64	; 0x40
   1f03a:	7814      	ldrb	r4, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1f03c:	0002      	movs	r2, r0
{
   1f03e:	4688      	mov	r8, r1
	if ((baudrate * sample_num) > peripheral_clock) {
   1f040:	4362      	muls	r2, r4
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f042:	2140      	movs	r1, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   1f044:	4542      	cmp	r2, r8
   1f046:	d907      	bls.n	1f058 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
   1f048:	0008      	movs	r0, r1
   1f04a:	b007      	add	sp, #28
   1f04c:	bc3c      	pop	{r2, r3, r4, r5}
   1f04e:	4690      	mov	r8, r2
   1f050:	4699      	mov	r9, r3
   1f052:	46a2      	mov	sl, r4
   1f054:	46ab      	mov	fp, r5
   1f056:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1f058:	2b00      	cmp	r3, #0
   1f05a:	d15f      	bne.n	1f11c <_sercom_get_async_baud_val+0xf4>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1f05c:	0002      	movs	r2, r0
   1f05e:	2100      	movs	r1, #0
   1f060:	0020      	movs	r0, r4
   1f062:	4c8a      	ldr	r4, [pc, #552]	; (1f28c <_sercom_get_async_baud_val+0x264>)
   1f064:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
   1f066:	4643      	mov	r3, r8
   1f068:	9300      	str	r3, [sp, #0]
   1f06a:	2300      	movs	r3, #0
		bit_shift = (uint64_t)1 << i;
   1f06c:	2120      	movs	r1, #32
	uint64_t q = 0, r = 0, bit_shift;
   1f06e:	4698      	mov	r8, r3
		bit_shift = (uint64_t)1 << i;
   1f070:	468a      	mov	sl, r1
   1f072:	391f      	subs	r1, #31
	uint64_t q = 0, r = 0, bit_shift;
   1f074:	2700      	movs	r7, #0
		bit_shift = (uint64_t)1 << i;
   1f076:	468c      	mov	ip, r1
   1f078:	4641      	mov	r1, r8
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1f07a:	4681      	mov	r9, r0
		ratio = long_division(temp1, peripheral_clock);
   1f07c:	9301      	str	r3, [sp, #4]
		bit_shift = (uint64_t)1 << i;
   1f07e:	46d8      	mov	r8, fp
	uint64_t q = 0, r = 0, bit_shift;
   1f080:	2200      	movs	r2, #0
   1f082:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
   1f084:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   1f086:	9102      	str	r1, [sp, #8]
   1f088:	46bb      	mov	fp, r7
   1f08a:	e00f      	b.n	1f0ac <_sercom_get_async_baud_val+0x84>
   1f08c:	42bd      	cmp	r5, r7
   1f08e:	d052      	beq.n	1f136 <_sercom_get_async_baud_val+0x10e>
   1f090:	46a3      	mov	fp, r4
   1f092:	9c00      	ldr	r4, [sp, #0]
   1f094:	9d01      	ldr	r5, [sp, #4]
   1f096:	9102      	str	r1, [sp, #8]
   1f098:	42bd      	cmp	r5, r7
   1f09a:	d834      	bhi.n	1f106 <_sercom_get_async_baud_val+0xde>
   1f09c:	42bd      	cmp	r5, r7
   1f09e:	d050      	beq.n	1f142 <_sercom_get_async_baud_val+0x11a>
   1f0a0:	0011      	movs	r1, r2
   1f0a2:	001c      	movs	r4, r3
   1f0a4:	000a      	movs	r2, r1
   1f0a6:	0023      	movs	r3, r4
	for (i = 63; i >= 0; i--) {
   1f0a8:	3801      	subs	r0, #1
   1f0aa:	d332      	bcc.n	1f112 <_sercom_get_async_baud_val+0xea>
		bit_shift = (uint64_t)1 << i;
   1f0ac:	2120      	movs	r1, #32
   1f0ae:	4249      	negs	r1, r1
   1f0b0:	1841      	adds	r1, r0, r1
   1f0b2:	d43a      	bmi.n	1f12a <_sercom_get_async_baud_val+0x102>
   1f0b4:	4664      	mov	r4, ip
   1f0b6:	408c      	lsls	r4, r1
   1f0b8:	0021      	movs	r1, r4
   1f0ba:	4664      	mov	r4, ip
   1f0bc:	4084      	lsls	r4, r0
		r = r << 1;
   1f0be:	1892      	adds	r2, r2, r2
   1f0c0:	415b      	adcs	r3, r3
		bit_shift = (uint64_t)1 << i;
   1f0c2:	9404      	str	r4, [sp, #16]
			r |= 0x01;
   1f0c4:	4666      	mov	r6, ip
   1f0c6:	464c      	mov	r4, r9
   1f0c8:	4316      	orrs	r6, r2
   1f0ca:	420c      	tst	r4, r1
   1f0cc:	d000      	beq.n	1f0d0 <_sercom_get_async_baud_val+0xa8>
   1f0ce:	0032      	movs	r2, r6
			r = r - d;
   1f0d0:	0014      	movs	r4, r2
   1f0d2:	001d      	movs	r5, r3
   1f0d4:	0016      	movs	r6, r2
   1f0d6:	001f      	movs	r7, r3
   1f0d8:	9a00      	ldr	r2, [sp, #0]
   1f0da:	9b01      	ldr	r3, [sp, #4]
   1f0dc:	1aa4      	subs	r4, r4, r2
   1f0de:	419d      	sbcs	r5, r3
   1f0e0:	0022      	movs	r2, r4
			q |= bit_shift;
   1f0e2:	465c      	mov	r4, fp
			r = r - d;
   1f0e4:	002b      	movs	r3, r5
			q |= bit_shift;
   1f0e6:	9d04      	ldr	r5, [sp, #16]
   1f0e8:	4325      	orrs	r5, r4
   1f0ea:	002c      	movs	r4, r5
   1f0ec:	9d02      	ldr	r5, [sp, #8]
   1f0ee:	4329      	orrs	r1, r5
   1f0f0:	9d01      	ldr	r5, [sp, #4]
   1f0f2:	42bd      	cmp	r5, r7
   1f0f4:	d9ca      	bls.n	1f08c <_sercom_get_async_baud_val+0x64>
   1f0f6:	465c      	mov	r4, fp
   1f0f8:	9902      	ldr	r1, [sp, #8]
   1f0fa:	46a3      	mov	fp, r4
   1f0fc:	9c00      	ldr	r4, [sp, #0]
   1f0fe:	9d01      	ldr	r5, [sp, #4]
   1f100:	9102      	str	r1, [sp, #8]
   1f102:	42bd      	cmp	r5, r7
   1f104:	d9ca      	bls.n	1f09c <_sercom_get_async_baud_val+0x74>
   1f106:	0031      	movs	r1, r6
   1f108:	003c      	movs	r4, r7
   1f10a:	000a      	movs	r2, r1
   1f10c:	0023      	movs	r3, r4
	for (i = 63; i >= 0; i--) {
   1f10e:	3801      	subs	r0, #1
   1f110:	d2cc      	bcs.n	1f0ac <_sercom_get_async_baud_val+0x84>
   1f112:	465f      	mov	r7, fp
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1f114:	427f      	negs	r7, r7
   1f116:	46c3      	mov	fp, r8
   1f118:	0c3f      	lsrs	r7, r7, #16
   1f11a:	e002      	b.n	1f122 <_sercom_get_async_baud_val+0xfa>
   1f11c:	2700      	movs	r7, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1f11e:	2b01      	cmp	r3, #1
   1f120:	d015      	beq.n	1f14e <_sercom_get_async_baud_val+0x126>
	*baudval = baud_calculated;
   1f122:	465b      	mov	r3, fp
	return STATUS_OK;
   1f124:	2100      	movs	r1, #0
	*baudval = baud_calculated;
   1f126:	801f      	strh	r7, [r3, #0]
	return STATUS_OK;
   1f128:	e78e      	b.n	1f048 <_sercom_get_async_baud_val+0x20>
		bit_shift = (uint64_t)1 << i;
   1f12a:	4651      	mov	r1, sl
   1f12c:	4664      	mov	r4, ip
   1f12e:	1a09      	subs	r1, r1, r0
   1f130:	40cc      	lsrs	r4, r1
   1f132:	0021      	movs	r1, r4
   1f134:	e7c1      	b.n	1f0ba <_sercom_get_async_baud_val+0x92>
   1f136:	9d00      	ldr	r5, [sp, #0]
   1f138:	42b5      	cmp	r5, r6
   1f13a:	d9a9      	bls.n	1f090 <_sercom_get_async_baud_val+0x68>
   1f13c:	465c      	mov	r4, fp
   1f13e:	9902      	ldr	r1, [sp, #8]
   1f140:	e7db      	b.n	1f0fa <_sercom_get_async_baud_val+0xd2>
   1f142:	9900      	ldr	r1, [sp, #0]
   1f144:	42b1      	cmp	r1, r6
   1f146:	d9ab      	bls.n	1f0a0 <_sercom_get_async_baud_val+0x78>
   1f148:	0031      	movs	r1, r6
   1f14a:	003c      	movs	r4, r7
   1f14c:	e7dd      	b.n	1f10a <_sercom_get_async_baud_val+0xe2>
		temp1 = ((uint64_t)baudrate * sample_num);
   1f14e:	0022      	movs	r2, r4
   1f150:	2300      	movs	r3, #0
   1f152:	4c4e      	ldr	r4, [pc, #312]	; (1f28c <_sercom_get_async_baud_val+0x264>)
   1f154:	2100      	movs	r1, #0
   1f156:	47a0      	blx	r4
		bit_shift = (uint64_t)1 << i;
   1f158:	2401      	movs	r4, #1
		temp1 = ((uint64_t)baudrate * sample_num);
   1f15a:	000b      	movs	r3, r1
	uint64_t q = 0, r = 0, bit_shift;
   1f15c:	2100      	movs	r1, #0
		temp1 = ((uint64_t)baudrate * sample_num);
   1f15e:	0002      	movs	r2, r0
	uint64_t q = 0, r = 0, bit_shift;
   1f160:	468c      	mov	ip, r1
   1f162:	2000      	movs	r0, #0
   1f164:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
   1f166:	263f      	movs	r6, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   1f168:	46a1      	mov	r9, r4
   1f16a:	e018      	b.n	1f19e <_sercom_get_async_baud_val+0x176>
   1f16c:	0004      	movs	r4, r0
   1f16e:	000d      	movs	r5, r1
   1f170:	0020      	movs	r0, r4
   1f172:	0029      	movs	r1, r5
			r = r - d;
   1f174:	1aa4      	subs	r4, r4, r2
   1f176:	419d      	sbcs	r5, r3
   1f178:	9400      	str	r4, [sp, #0]
   1f17a:	9501      	str	r5, [sp, #4]
			q |= bit_shift;
   1f17c:	4664      	mov	r4, ip
   1f17e:	4327      	orrs	r7, r4
   1f180:	428b      	cmp	r3, r1
   1f182:	d81e      	bhi.n	1f1c2 <_sercom_get_async_baud_val+0x19a>
   1f184:	d01b      	beq.n	1f1be <_sercom_get_async_baud_val+0x196>
   1f186:	46bc      	mov	ip, r7
   1f188:	428b      	cmp	r3, r1
   1f18a:	d815      	bhi.n	1f1b8 <_sercom_get_async_baud_val+0x190>
   1f18c:	d012      	beq.n	1f1b4 <_sercom_get_async_baud_val+0x18c>
   1f18e:	9800      	ldr	r0, [sp, #0]
   1f190:	9901      	ldr	r1, [sp, #4]
   1f192:	4682      	mov	sl, r0
   1f194:	000c      	movs	r4, r1
   1f196:	4650      	mov	r0, sl
   1f198:	0021      	movs	r1, r4
	for (i = 63; i >= 0; i--) {
   1f19a:	3e01      	subs	r6, #1
   1f19c:	d313      	bcc.n	1f1c6 <_sercom_get_async_baud_val+0x19e>
		bit_shift = (uint64_t)1 << i;
   1f19e:	464f      	mov	r7, r9
		r = r << 1;
   1f1a0:	1800      	adds	r0, r0, r0
   1f1a2:	4149      	adcs	r1, r1
			r |= 0x01;
   1f1a4:	464c      	mov	r4, r9
		bit_shift = (uint64_t)1 << i;
   1f1a6:	40b7      	lsls	r7, r6
   1f1a8:	4645      	mov	r5, r8
			r |= 0x01;
   1f1aa:	4304      	orrs	r4, r0
   1f1ac:	422f      	tst	r7, r5
   1f1ae:	d0dd      	beq.n	1f16c <_sercom_get_async_baud_val+0x144>
   1f1b0:	000d      	movs	r5, r1
   1f1b2:	e7dd      	b.n	1f170 <_sercom_get_async_baud_val+0x148>
   1f1b4:	4282      	cmp	r2, r0
   1f1b6:	d9ea      	bls.n	1f18e <_sercom_get_async_baud_val+0x166>
   1f1b8:	4682      	mov	sl, r0
   1f1ba:	000c      	movs	r4, r1
   1f1bc:	e7eb      	b.n	1f196 <_sercom_get_async_baud_val+0x16e>
   1f1be:	4282      	cmp	r2, r0
   1f1c0:	d9e1      	bls.n	1f186 <_sercom_get_async_baud_val+0x15e>
   1f1c2:	4667      	mov	r7, ip
   1f1c4:	e7df      	b.n	1f186 <_sercom_get_async_baud_val+0x15e>
		if(baud_int > BAUD_INT_MAX) {
   1f1c6:	2080      	movs	r0, #128	; 0x80
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f1c8:	2140      	movs	r1, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
   1f1ca:	0180      	lsls	r0, r0, #6
   1f1cc:	4287      	cmp	r7, r0
   1f1ce:	d900      	bls.n	1f1d2 <_sercom_get_async_baud_val+0x1aa>
   1f1d0:	e73a      	b.n	1f048 <_sercom_get_async_baud_val+0x20>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1f1d2:	4641      	mov	r1, r8
   1f1d4:	0f49      	lsrs	r1, r1, #29
   1f1d6:	000c      	movs	r4, r1
	for (i = 63; i >= 0; i--) {
   1f1d8:	263f      	movs	r6, #63	; 0x3f
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1f1da:	4641      	mov	r1, r8
	for (i = 63; i >= 0; i--) {
   1f1dc:	46b4      	mov	ip, r6
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1f1de:	00c9      	lsls	r1, r1, #3
		bit_shift = (uint64_t)1 << i;
   1f1e0:	3e3e      	subs	r6, #62	; 0x3e
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1f1e2:	000d      	movs	r5, r1
		bit_shift = (uint64_t)1 << i;
   1f1e4:	46b0      	mov	r8, r6
	uint64_t q = 0, r = 0, bit_shift;
   1f1e6:	2100      	movs	r1, #0
		bit_shift = (uint64_t)1 << i;
   1f1e8:	465e      	mov	r6, fp
	uint64_t q = 0, r = 0, bit_shift;
   1f1ea:	4689      	mov	r9, r1
		bit_shift = (uint64_t)1 << i;
   1f1ec:	9705      	str	r7, [sp, #20]
	uint64_t q = 0, r = 0, bit_shift;
   1f1ee:	2000      	movs	r0, #0
		bit_shift = (uint64_t)1 << i;
   1f1f0:	4667      	mov	r7, ip
	uint64_t q = 0, r = 0, bit_shift;
   1f1f2:	2100      	movs	r1, #0
		bit_shift = (uint64_t)1 << i;
   1f1f4:	9604      	str	r6, [sp, #16]
   1f1f6:	46a2      	mov	sl, r4
   1f1f8:	46ac      	mov	ip, r5
   1f1fa:	e018      	b.n	1f22e <_sercom_get_async_baud_val+0x206>
   1f1fc:	0004      	movs	r4, r0
   1f1fe:	000d      	movs	r5, r1
   1f200:	0020      	movs	r0, r4
   1f202:	0029      	movs	r1, r5
			r = r - d;
   1f204:	1aa4      	subs	r4, r4, r2
   1f206:	419d      	sbcs	r5, r3
			q |= bit_shift;
   1f208:	464e      	mov	r6, r9
			r = r - d;
   1f20a:	9402      	str	r4, [sp, #8]
   1f20c:	9503      	str	r5, [sp, #12]
			q |= bit_shift;
   1f20e:	9c00      	ldr	r4, [sp, #0]
   1f210:	4334      	orrs	r4, r6
   1f212:	0026      	movs	r6, r4
   1f214:	428b      	cmp	r3, r1
   1f216:	d828      	bhi.n	1f26a <_sercom_get_async_baud_val+0x242>
   1f218:	d025      	beq.n	1f266 <_sercom_get_async_baud_val+0x23e>
   1f21a:	46b1      	mov	r9, r6
   1f21c:	428b      	cmp	r3, r1
   1f21e:	d81f      	bhi.n	1f260 <_sercom_get_async_baud_val+0x238>
   1f220:	d01c      	beq.n	1f25c <_sercom_get_async_baud_val+0x234>
   1f222:	9c02      	ldr	r4, [sp, #8]
   1f224:	9d03      	ldr	r5, [sp, #12]
   1f226:	0020      	movs	r0, r4
   1f228:	0029      	movs	r1, r5
	for (i = 63; i >= 0; i--) {
   1f22a:	3f01      	subs	r7, #1
   1f22c:	d324      	bcc.n	1f278 <_sercom_get_async_baud_val+0x250>
		bit_shift = (uint64_t)1 << i;
   1f22e:	2420      	movs	r4, #32
   1f230:	4264      	negs	r4, r4
   1f232:	193c      	adds	r4, r7, r4
   1f234:	d41b      	bmi.n	1f26e <_sercom_get_async_baud_val+0x246>
   1f236:	4645      	mov	r5, r8
   1f238:	40a5      	lsls	r5, r4
		r = r << 1;
   1f23a:	1800      	adds	r0, r0, r0
   1f23c:	4149      	adcs	r1, r1
			r |= 0x01;
   1f23e:	4644      	mov	r4, r8
		bit_shift = (uint64_t)1 << i;
   1f240:	4646      	mov	r6, r8
			r |= 0x01;
   1f242:	4304      	orrs	r4, r0
		bit_shift = (uint64_t)1 << i;
   1f244:	40be      	lsls	r6, r7
			r |= 0x01;
   1f246:	46a3      	mov	fp, r4
		if (n & bit_shift) {
   1f248:	4664      	mov	r4, ip
		bit_shift = (uint64_t)1 << i;
   1f24a:	9600      	str	r6, [sp, #0]
		if (n & bit_shift) {
   1f24c:	4034      	ands	r4, r6
   1f24e:	4656      	mov	r6, sl
   1f250:	4035      	ands	r5, r6
   1f252:	4325      	orrs	r5, r4
   1f254:	d0d2      	beq.n	1f1fc <_sercom_get_async_baud_val+0x1d4>
   1f256:	465c      	mov	r4, fp
   1f258:	000d      	movs	r5, r1
   1f25a:	e7d1      	b.n	1f200 <_sercom_get_async_baud_val+0x1d8>
   1f25c:	4282      	cmp	r2, r0
   1f25e:	d9e0      	bls.n	1f222 <_sercom_get_async_baud_val+0x1fa>
   1f260:	0004      	movs	r4, r0
   1f262:	000d      	movs	r5, r1
   1f264:	e7df      	b.n	1f226 <_sercom_get_async_baud_val+0x1fe>
   1f266:	4282      	cmp	r2, r0
   1f268:	d9d7      	bls.n	1f21a <_sercom_get_async_baud_val+0x1f2>
   1f26a:	464e      	mov	r6, r9
   1f26c:	e7d5      	b.n	1f21a <_sercom_get_async_baud_val+0x1f2>
		bit_shift = (uint64_t)1 << i;
   1f26e:	2420      	movs	r4, #32
   1f270:	4645      	mov	r5, r8
   1f272:	1be4      	subs	r4, r4, r7
   1f274:	40e5      	lsrs	r5, r4
   1f276:	e7e0      	b.n	1f23a <_sercom_get_async_baud_val+0x212>
   1f278:	9b04      	ldr	r3, [sp, #16]
   1f27a:	9f05      	ldr	r7, [sp, #20]
   1f27c:	469b      	mov	fp, r3
		baud_fp = temp1 - 8 * baud_int;
   1f27e:	00fb      	lsls	r3, r7, #3
   1f280:	1af3      	subs	r3, r6, r3
		baud_calculated = baud_int | (baud_fp << 13);
   1f282:	b2db      	uxtb	r3, r3
   1f284:	035b      	lsls	r3, r3, #13
   1f286:	431f      	orrs	r7, r3
   1f288:	b2bf      	uxth	r7, r7
   1f28a:	e74a      	b.n	1f122 <_sercom_get_async_baud_val+0xfa>
   1f28c:	00025d95 	.word	0x00025d95

0001f290 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1f290:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1f292:	4c0e      	ldr	r4, [pc, #56]	; (1f2cc <sercom_set_gclk_generator+0x3c>)
{
   1f294:	b083      	sub	sp, #12
	if (!_sercom_config.generator_is_set || force_change) {
   1f296:	7823      	ldrb	r3, [r4, #0]
{
   1f298:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
   1f29a:	2b00      	cmp	r3, #0
   1f29c:	d006      	beq.n	1f2ac <sercom_set_gclk_generator+0x1c>
   1f29e:	2900      	cmp	r1, #0
   1f2a0:	d104      	bne.n	1f2ac <sercom_set_gclk_generator+0x1c>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
   1f2a2:	7863      	ldrb	r3, [r4, #1]
   1f2a4:	4283      	cmp	r3, r0
   1f2a6:	d00f      	beq.n	1f2c8 <sercom_set_gclk_generator+0x38>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1f2a8:	201d      	movs	r0, #29
   1f2aa:	e00b      	b.n	1f2c4 <sercom_set_gclk_generator+0x34>
		gclk_chan_conf.source_generator = generator_source;
   1f2ac:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1f2ae:	2011      	movs	r0, #17
   1f2b0:	4b07      	ldr	r3, [pc, #28]	; (1f2d0 <sercom_set_gclk_generator+0x40>)
		gclk_chan_conf.source_generator = generator_source;
   1f2b2:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1f2b4:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1f2b6:	2011      	movs	r0, #17
   1f2b8:	4b06      	ldr	r3, [pc, #24]	; (1f2d4 <sercom_set_gclk_generator+0x44>)
   1f2ba:	4798      	blx	r3
		_sercom_config.generator_is_set = true;
   1f2bc:	2301      	movs	r3, #1
		return STATUS_OK;
   1f2be:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
   1f2c0:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
   1f2c2:	7023      	strb	r3, [r4, #0]
}
   1f2c4:	b003      	add	sp, #12
   1f2c6:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
   1f2c8:	2000      	movs	r0, #0
   1f2ca:	e7fb      	b.n	1f2c4 <sercom_set_gclk_generator+0x34>
   1f2cc:	20000d34 	.word	0x20000d34
   1f2d0:	0001fc15 	.word	0x0001fc15
   1f2d4:	0001fc55 	.word	0x0001fc55

0001f2d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   1f2d8:	4b3a      	ldr	r3, [pc, #232]	; (1f3c4 <_sercom_get_default_pad+0xec>)
   1f2da:	4298      	cmp	r0, r3
   1f2dc:	d044      	beq.n	1f368 <_sercom_get_default_pad+0x90>
   1f2de:	d90a      	bls.n	1f2f6 <_sercom_get_default_pad+0x1e>
   1f2e0:	4b39      	ldr	r3, [pc, #228]	; (1f3c8 <_sercom_get_default_pad+0xf0>)
   1f2e2:	4298      	cmp	r0, r3
   1f2e4:	d018      	beq.n	1f318 <_sercom_get_default_pad+0x40>
   1f2e6:	4b39      	ldr	r3, [pc, #228]	; (1f3cc <_sercom_get_default_pad+0xf4>)
   1f2e8:	4298      	cmp	r0, r3
   1f2ea:	d033      	beq.n	1f354 <_sercom_get_default_pad+0x7c>
   1f2ec:	4b38      	ldr	r3, [pc, #224]	; (1f3d0 <_sercom_get_default_pad+0xf8>)
   1f2ee:	4298      	cmp	r0, r3
   1f2f0:	d01c      	beq.n	1f32c <_sercom_get_default_pad+0x54>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   1f2f2:	2000      	movs	r0, #0
}
   1f2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
   1f2f6:	2384      	movs	r3, #132	; 0x84
   1f2f8:	05db      	lsls	r3, r3, #23
   1f2fa:	4298      	cmp	r0, r3
   1f2fc:	d020      	beq.n	1f340 <_sercom_get_default_pad+0x68>
   1f2fe:	4b35      	ldr	r3, [pc, #212]	; (1f3d4 <_sercom_get_default_pad+0xfc>)
   1f300:	4298      	cmp	r0, r3
   1f302:	d1f6      	bne.n	1f2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1f304:	2901      	cmp	r1, #1
   1f306:	d043      	beq.n	1f390 <_sercom_get_default_pad+0xb8>
   1f308:	2900      	cmp	r1, #0
   1f30a:	d03f      	beq.n	1f38c <_sercom_get_default_pad+0xb4>
   1f30c:	2902      	cmp	r1, #2
   1f30e:	d03b      	beq.n	1f388 <_sercom_get_default_pad+0xb0>
   1f310:	2903      	cmp	r1, #3
   1f312:	d1ee      	bne.n	1f2f2 <_sercom_get_default_pad+0x1a>
   1f314:	4830      	ldr	r0, [pc, #192]	; (1f3d8 <_sercom_get_default_pad+0x100>)
   1f316:	e7ed      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f318:	2901      	cmp	r1, #1
   1f31a:	d031      	beq.n	1f380 <_sercom_get_default_pad+0xa8>
   1f31c:	2900      	cmp	r1, #0
   1f31e:	d02d      	beq.n	1f37c <_sercom_get_default_pad+0xa4>
   1f320:	2902      	cmp	r1, #2
   1f322:	d02f      	beq.n	1f384 <_sercom_get_default_pad+0xac>
   1f324:	2903      	cmp	r1, #3
   1f326:	d1e4      	bne.n	1f2f2 <_sercom_get_default_pad+0x1a>
   1f328:	482c      	ldr	r0, [pc, #176]	; (1f3dc <_sercom_get_default_pad+0x104>)
   1f32a:	e7e3      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f32c:	2901      	cmp	r1, #1
   1f32e:	d03f      	beq.n	1f3b0 <_sercom_get_default_pad+0xd8>
   1f330:	2900      	cmp	r1, #0
   1f332:	d03b      	beq.n	1f3ac <_sercom_get_default_pad+0xd4>
   1f334:	2902      	cmp	r1, #2
   1f336:	d037      	beq.n	1f3a8 <_sercom_get_default_pad+0xd0>
   1f338:	2903      	cmp	r1, #3
   1f33a:	d1da      	bne.n	1f2f2 <_sercom_get_default_pad+0x1a>
   1f33c:	4828      	ldr	r0, [pc, #160]	; (1f3e0 <_sercom_get_default_pad+0x108>)
   1f33e:	e7d9      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f340:	2901      	cmp	r1, #1
   1f342:	d03d      	beq.n	1f3c0 <_sercom_get_default_pad+0xe8>
   1f344:	2900      	cmp	r1, #0
   1f346:	d039      	beq.n	1f3bc <_sercom_get_default_pad+0xe4>
   1f348:	2902      	cmp	r1, #2
   1f34a:	d02b      	beq.n	1f3a4 <_sercom_get_default_pad+0xcc>
   1f34c:	2903      	cmp	r1, #3
   1f34e:	d1d0      	bne.n	1f2f2 <_sercom_get_default_pad+0x1a>
   1f350:	4824      	ldr	r0, [pc, #144]	; (1f3e4 <_sercom_get_default_pad+0x10c>)
   1f352:	e7cf      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f354:	2901      	cmp	r1, #1
   1f356:	d023      	beq.n	1f3a0 <_sercom_get_default_pad+0xc8>
   1f358:	2900      	cmp	r1, #0
   1f35a:	d01f      	beq.n	1f39c <_sercom_get_default_pad+0xc4>
   1f35c:	2902      	cmp	r1, #2
   1f35e:	d01b      	beq.n	1f398 <_sercom_get_default_pad+0xc0>
   1f360:	2903      	cmp	r1, #3
   1f362:	d1c6      	bne.n	1f2f2 <_sercom_get_default_pad+0x1a>
   1f364:	4820      	ldr	r0, [pc, #128]	; (1f3e8 <_sercom_get_default_pad+0x110>)
   1f366:	e7c5      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f368:	2901      	cmp	r1, #1
   1f36a:	d025      	beq.n	1f3b8 <_sercom_get_default_pad+0xe0>
   1f36c:	2900      	cmp	r1, #0
   1f36e:	d021      	beq.n	1f3b4 <_sercom_get_default_pad+0xdc>
   1f370:	2902      	cmp	r1, #2
   1f372:	d00f      	beq.n	1f394 <_sercom_get_default_pad+0xbc>
   1f374:	2903      	cmp	r1, #3
   1f376:	d1bc      	bne.n	1f2f2 <_sercom_get_default_pad+0x1a>
   1f378:	481c      	ldr	r0, [pc, #112]	; (1f3ec <_sercom_get_default_pad+0x114>)
   1f37a:	e7bb      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f37c:	481c      	ldr	r0, [pc, #112]	; (1f3f0 <_sercom_get_default_pad+0x118>)
   1f37e:	e7b9      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f380:	481c      	ldr	r0, [pc, #112]	; (1f3f4 <_sercom_get_default_pad+0x11c>)
   1f382:	e7b7      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f384:	481c      	ldr	r0, [pc, #112]	; (1f3f8 <_sercom_get_default_pad+0x120>)
   1f386:	e7b5      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f388:	481c      	ldr	r0, [pc, #112]	; (1f3fc <_sercom_get_default_pad+0x124>)
   1f38a:	e7b3      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f38c:	2003      	movs	r0, #3
   1f38e:	e7b1      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f390:	481b      	ldr	r0, [pc, #108]	; (1f400 <_sercom_get_default_pad+0x128>)
   1f392:	e7af      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f394:	481b      	ldr	r0, [pc, #108]	; (1f404 <_sercom_get_default_pad+0x12c>)
   1f396:	e7ad      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f398:	481b      	ldr	r0, [pc, #108]	; (1f408 <_sercom_get_default_pad+0x130>)
   1f39a:	e7ab      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f39c:	481b      	ldr	r0, [pc, #108]	; (1f40c <_sercom_get_default_pad+0x134>)
   1f39e:	e7a9      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f3a0:	481b      	ldr	r0, [pc, #108]	; (1f410 <_sercom_get_default_pad+0x138>)
   1f3a2:	e7a7      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f3a4:	481b      	ldr	r0, [pc, #108]	; (1f414 <_sercom_get_default_pad+0x13c>)
   1f3a6:	e7a5      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f3a8:	481b      	ldr	r0, [pc, #108]	; (1f418 <_sercom_get_default_pad+0x140>)
   1f3aa:	e7a3      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f3ac:	481b      	ldr	r0, [pc, #108]	; (1f41c <_sercom_get_default_pad+0x144>)
   1f3ae:	e7a1      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f3b0:	481b      	ldr	r0, [pc, #108]	; (1f420 <_sercom_get_default_pad+0x148>)
   1f3b2:	e79f      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f3b4:	481b      	ldr	r0, [pc, #108]	; (1f424 <_sercom_get_default_pad+0x14c>)
   1f3b6:	e79d      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f3b8:	481b      	ldr	r0, [pc, #108]	; (1f428 <_sercom_get_default_pad+0x150>)
   1f3ba:	e79b      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f3bc:	481b      	ldr	r0, [pc, #108]	; (1f42c <_sercom_get_default_pad+0x154>)
   1f3be:	e799      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f3c0:	481b      	ldr	r0, [pc, #108]	; (1f430 <_sercom_get_default_pad+0x158>)
   1f3c2:	e797      	b.n	1f2f4 <_sercom_get_default_pad+0x1c>
   1f3c4:	42000800 	.word	0x42000800
   1f3c8:	42001000 	.word	0x42001000
   1f3cc:	43000400 	.word	0x43000400
   1f3d0:	42000c00 	.word	0x42000c00
   1f3d4:	42000400 	.word	0x42000400
   1f3d8:	001f0003 	.word	0x001f0003
   1f3dc:	000f0003 	.word	0x000f0003
   1f3e0:	00130003 	.word	0x00130003
   1f3e4:	00070003 	.word	0x00070003
   1f3e8:	00190003 	.word	0x00190003
   1f3ec:	000b0003 	.word	0x000b0003
   1f3f0:	000c0003 	.word	0x000c0003
   1f3f4:	000d0003 	.word	0x000d0003
   1f3f8:	000e0003 	.word	0x000e0003
   1f3fc:	001e0003 	.word	0x001e0003
   1f400:	00010003 	.word	0x00010003
   1f404:	000a0003 	.word	0x000a0003
   1f408:	00180003 	.word	0x00180003
   1f40c:	00160003 	.word	0x00160003
   1f410:	00170003 	.word	0x00170003
   1f414:	00060003 	.word	0x00060003
   1f418:	00120003 	.word	0x00120003
   1f41c:	00100003 	.word	0x00100003
   1f420:	00110003 	.word	0x00110003
   1f424:	00080003 	.word	0x00080003
   1f428:	00090003 	.word	0x00090003
   1f42c:	00040003 	.word	0x00040003
   1f430:	00050003 	.word	0x00050003

0001f434 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1f434:	b570      	push	{r4, r5, r6, lr}
   1f436:	b086      	sub	sp, #24
   1f438:	0001      	movs	r1, r0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1f43a:	4668      	mov	r0, sp
   1f43c:	4b15      	ldr	r3, [pc, #84]	; (1f494 <_sercom_get_sercom_inst_index+0x60>)
   1f43e:	cb70      	ldmia	r3!, {r4, r5, r6}
   1f440:	c070      	stmia	r0!, {r4, r5, r6}
   1f442:	cb70      	ldmia	r3!, {r4, r5, r6}
   1f444:	c070      	stmia	r0!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1f446:	9b00      	ldr	r3, [sp, #0]
   1f448:	428b      	cmp	r3, r1
   1f44a:	d011      	beq.n	1f470 <_sercom_get_sercom_inst_index+0x3c>
   1f44c:	9b01      	ldr	r3, [sp, #4]
   1f44e:	428b      	cmp	r3, r1
   1f450:	d011      	beq.n	1f476 <_sercom_get_sercom_inst_index+0x42>
   1f452:	9b02      	ldr	r3, [sp, #8]
   1f454:	428b      	cmp	r3, r1
   1f456:	d011      	beq.n	1f47c <_sercom_get_sercom_inst_index+0x48>
   1f458:	9b03      	ldr	r3, [sp, #12]
   1f45a:	428b      	cmp	r3, r1
   1f45c:	d011      	beq.n	1f482 <_sercom_get_sercom_inst_index+0x4e>
   1f45e:	9b04      	ldr	r3, [sp, #16]
   1f460:	428b      	cmp	r3, r1
   1f462:	d011      	beq.n	1f488 <_sercom_get_sercom_inst_index+0x54>
   1f464:	9b05      	ldr	r3, [sp, #20]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1f466:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1f468:	428b      	cmp	r3, r1
   1f46a:	d010      	beq.n	1f48e <_sercom_get_sercom_inst_index+0x5a>
}
   1f46c:	b006      	add	sp, #24
   1f46e:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f470:	2000      	movs	r0, #0
			return i;
   1f472:	b2c0      	uxtb	r0, r0
   1f474:	e7fa      	b.n	1f46c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f476:	2001      	movs	r0, #1
			return i;
   1f478:	b2c0      	uxtb	r0, r0
   1f47a:	e7f7      	b.n	1f46c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f47c:	2002      	movs	r0, #2
			return i;
   1f47e:	b2c0      	uxtb	r0, r0
   1f480:	e7f4      	b.n	1f46c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f482:	2003      	movs	r0, #3
			return i;
   1f484:	b2c0      	uxtb	r0, r0
   1f486:	e7f1      	b.n	1f46c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f488:	2004      	movs	r0, #4
			return i;
   1f48a:	b2c0      	uxtb	r0, r0
   1f48c:	e7ee      	b.n	1f46c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f48e:	3005      	adds	r0, #5
			return i;
   1f490:	b2c0      	uxtb	r0, r0
   1f492:	e7eb      	b.n	1f46c <_sercom_get_sercom_inst_index+0x38>
   1f494:	0002ea08 	.word	0x0002ea08

0001f498 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1f498:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1f49a:	4b09      	ldr	r3, [pc, #36]	; (1f4c0 <delay_init+0x28>)
   1f49c:	2000      	movs	r0, #0
   1f49e:	4798      	blx	r3
	cycles_per_ms /= 1000;
   1f4a0:	21fa      	movs	r1, #250	; 0xfa
   1f4a2:	4c08      	ldr	r4, [pc, #32]	; (1f4c4 <delay_init+0x2c>)
   1f4a4:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1f4a6:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
   1f4a8:	47a0      	blx	r4
   1f4aa:	4b07      	ldr	r3, [pc, #28]	; (1f4c8 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
   1f4ac:	4907      	ldr	r1, [pc, #28]	; (1f4cc <delay_init+0x34>)
	cycles_per_ms /= 1000;
   1f4ae:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1f4b0:	0028      	movs	r0, r5
   1f4b2:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1f4b4:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
   1f4b6:	4b06      	ldr	r3, [pc, #24]	; (1f4d0 <delay_init+0x38>)
   1f4b8:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1f4ba:	4b06      	ldr	r3, [pc, #24]	; (1f4d4 <delay_init+0x3c>)
   1f4bc:	601a      	str	r2, [r3, #0]
}
   1f4be:	bd70      	pop	{r4, r5, r6, pc}
   1f4c0:	0001fba9 	.word	0x0001fba9
   1f4c4:	0002593d 	.word	0x0002593d
   1f4c8:	200001d0 	.word	0x200001d0
   1f4cc:	000f4240 	.word	0x000f4240
   1f4d0:	200001d4 	.word	0x200001d4
   1f4d4:	e000e010 	.word	0xe000e010

0001f4d8 <delay_cycles_us>:
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1f4d8:	2180      	movs	r1, #128	; 0x80
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
   1f4da:	b530      	push	{r4, r5, lr}
		SysTick->VAL = 0;
   1f4dc:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
   1f4de:	4b08      	ldr	r3, [pc, #32]	; (1f500 <delay_cycles_us+0x28>)
		SysTick->LOAD = n;
   1f4e0:	4a08      	ldr	r2, [pc, #32]	; (1f504 <delay_cycles_us+0x2c>)
   1f4e2:	681c      	ldr	r4, [r3, #0]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1f4e4:	0249      	lsls	r1, r1, #9
	while (n--) {
   1f4e6:	3801      	subs	r0, #1
   1f4e8:	d308      	bcc.n	1f4fc <delay_cycles_us+0x24>
	if (n > 0) {
   1f4ea:	2c00      	cmp	r4, #0
   1f4ec:	d0fb      	beq.n	1f4e6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
   1f4ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
   1f4f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1f4f2:	6813      	ldr	r3, [r2, #0]
   1f4f4:	420b      	tst	r3, r1
   1f4f6:	d0fc      	beq.n	1f4f2 <delay_cycles_us+0x1a>
   1f4f8:	3801      	subs	r0, #1
   1f4fa:	d2f6      	bcs.n	1f4ea <delay_cycles_us+0x12>
	}
}
   1f4fc:	bd30      	pop	{r4, r5, pc}
   1f4fe:	46c0      	nop			; (mov r8, r8)
   1f500:	200001d4 	.word	0x200001d4
   1f504:	e000e010 	.word	0xe000e010

0001f508 <delay_cycles_ms>:
   1f508:	2180      	movs	r1, #128	; 0x80
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   1f50a:	b530      	push	{r4, r5, lr}
		SysTick->VAL = 0;
   1f50c:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1f50e:	4b08      	ldr	r3, [pc, #32]	; (1f530 <delay_cycles_ms+0x28>)
		SysTick->LOAD = n;
   1f510:	4a08      	ldr	r2, [pc, #32]	; (1f534 <delay_cycles_ms+0x2c>)
   1f512:	681c      	ldr	r4, [r3, #0]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1f514:	0249      	lsls	r1, r1, #9
	while (n--) {
   1f516:	3801      	subs	r0, #1
   1f518:	d308      	bcc.n	1f52c <delay_cycles_ms+0x24>
	if (n > 0) {
   1f51a:	2c00      	cmp	r4, #0
   1f51c:	d0fb      	beq.n	1f516 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
   1f51e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
   1f520:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1f522:	6813      	ldr	r3, [r2, #0]
   1f524:	420b      	tst	r3, r1
   1f526:	d0fc      	beq.n	1f522 <delay_cycles_ms+0x1a>
   1f528:	3801      	subs	r0, #1
   1f52a:	d2f6      	bcs.n	1f51a <delay_cycles_ms+0x12>
	}
}
   1f52c:	bd30      	pop	{r4, r5, pc}
   1f52e:	46c0      	nop			; (mov r8, r8)
   1f530:	200001d0 	.word	0x200001d0
   1f534:	e000e010 	.word	0xe000e010

0001f538 <port_pin_set_config>:
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1f538:	2280      	movs	r2, #128	; 0x80
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1f53a:	b500      	push	{lr}
   1f53c:	b083      	sub	sp, #12
   1f53e:	ab01      	add	r3, sp, #4
   1f540:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1f542:	780a      	ldrb	r2, [r1, #0]
   1f544:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   1f546:	784a      	ldrb	r2, [r1, #1]
   1f548:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   1f54a:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1f54c:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
   1f54e:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1f550:	4b01      	ldr	r3, [pc, #4]	; (1f558 <port_pin_set_config+0x20>)
   1f552:	4798      	blx	r3
}
   1f554:	b003      	add	sp, #12
   1f556:	bd00      	pop	{pc}
   1f558:	0001fd11 	.word	0x0001fd11

0001f55c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1f55c:	b510      	push	{r4, lr}
	switch (clock_source) {
   1f55e:	2808      	cmp	r0, #8
   1f560:	d82d      	bhi.n	1f5be <system_clock_source_get_hz+0x62>
   1f562:	4b1c      	ldr	r3, [pc, #112]	; (1f5d4 <system_clock_source_get_hz+0x78>)
   1f564:	0080      	lsls	r0, r0, #2
   1f566:	581b      	ldr	r3, [r3, r0]
   1f568:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   1f56a:	2080      	movs	r0, #128	; 0x80
   1f56c:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
   1f56e:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc32k.frequency;
   1f570:	4b19      	ldr	r3, [pc, #100]	; (1f5d8 <system_clock_source_get_hz+0x7c>)
   1f572:	6958      	ldr	r0, [r3, #20]
   1f574:	e7fb      	b.n	1f56e <system_clock_source_get_hz+0x12>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
   1f576:	4b19      	ldr	r3, [pc, #100]	; (1f5dc <system_clock_source_get_hz+0x80>)
   1f578:	7d18      	ldrb	r0, [r3, #20]
   1f57a:	0700      	lsls	r0, r0, #28
   1f57c:	0f80      	lsrs	r0, r0, #30
   1f57e:	1c43      	adds	r3, r0, #1
   1f580:	4817      	ldr	r0, [pc, #92]	; (1f5e0 <system_clock_source_get_hz+0x84>)
   1f582:	4358      	muls	r0, r3
   1f584:	e7f3      	b.n	1f56e <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
   1f586:	4c14      	ldr	r4, [pc, #80]	; (1f5d8 <system_clock_source_get_hz+0x7c>)
			return 0;
   1f588:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
   1f58a:	6823      	ldr	r3, [r4, #0]
   1f58c:	079b      	lsls	r3, r3, #30
   1f58e:	d5ee      	bpl.n	1f56e <system_clock_source_get_hz+0x12>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f590:	2280      	movs	r2, #128	; 0x80
   1f592:	4912      	ldr	r1, [pc, #72]	; (1f5dc <system_clock_source_get_hz+0x80>)
   1f594:	0052      	lsls	r2, r2, #1
   1f596:	68cb      	ldr	r3, [r1, #12]
   1f598:	4213      	tst	r3, r2
   1f59a:	d0fc      	beq.n	1f596 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
   1f59c:	6823      	ldr	r3, [r4, #0]
   1f59e:	075b      	lsls	r3, r3, #29
   1f5a0:	d40f      	bmi.n	1f5c2 <system_clock_source_get_hz+0x66>
		return 48000000UL;
   1f5a2:	4810      	ldr	r0, [pc, #64]	; (1f5e4 <system_clock_source_get_hz+0x88>)
   1f5a4:	e7e3      	b.n	1f56e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc.frequency;
   1f5a6:	4b0c      	ldr	r3, [pc, #48]	; (1f5d8 <system_clock_source_get_hz+0x7c>)
   1f5a8:	6918      	ldr	r0, [r3, #16]
   1f5aa:	e7e0      	b.n	1f56e <system_clock_source_get_hz+0x12>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
   1f5ac:	2328      	movs	r3, #40	; 0x28
   1f5ae:	4a0b      	ldr	r2, [pc, #44]	; (1f5dc <system_clock_source_get_hz+0x80>)
			return 0;
   1f5b0:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
   1f5b2:	5cd3      	ldrb	r3, [r2, r3]
   1f5b4:	079b      	lsls	r3, r3, #30
   1f5b6:	d5da      	bpl.n	1f56e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.dpll.frequency;
   1f5b8:	4b07      	ldr	r3, [pc, #28]	; (1f5d8 <system_clock_source_get_hz+0x7c>)
   1f5ba:	68d8      	ldr	r0, [r3, #12]
   1f5bc:	e7d7      	b.n	1f56e <system_clock_source_get_hz+0x12>
		return 0;
   1f5be:	2000      	movs	r0, #0
   1f5c0:	e7d5      	b.n	1f56e <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   1f5c2:	4b09      	ldr	r3, [pc, #36]	; (1f5e8 <system_clock_source_get_hz+0x8c>)
   1f5c4:	2000      	movs	r0, #0
   1f5c6:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   1f5c8:	68a3      	ldr	r3, [r4, #8]
   1f5ca:	041b      	lsls	r3, r3, #16
   1f5cc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   1f5ce:	4358      	muls	r0, r3
   1f5d0:	e7cd      	b.n	1f56e <system_clock_source_get_hz+0x12>
   1f5d2:	46c0      	nop			; (mov r8, r8)
   1f5d4:	0002ea20 	.word	0x0002ea20
   1f5d8:	20000d38 	.word	0x20000d38
   1f5dc:	40000c00 	.word	0x40000c00
   1f5e0:	003d0900 	.word	0x003d0900
   1f5e4:	02dc6c00 	.word	0x02dc6c00
   1f5e8:	0001fc8d 	.word	0x0001fc8d

0001f5ec <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   1f5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f5ee:	46d6      	mov	lr, sl
   1f5f0:	464f      	mov	r7, r9
   1f5f2:	4646      	mov	r6, r8
   1f5f4:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;

	temp.bit.STARTUP = config->startup_time;

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   1f5f6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.STARTUP = config->startup_time;
   1f5f8:	7845      	ldrb	r5, [r0, #1]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   1f5fa:	424c      	negs	r4, r1
   1f5fc:	414c      	adcs	r4, r1
   1f5fe:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
   1f600:	7881      	ldrb	r1, [r0, #2]
	temp.bit.EN32K = config->enable_32khz_output;

	temp.bit.ONDEMAND = config->on_demand;
   1f602:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.EN1K = config->enable_1khz_output;
   1f604:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
   1f606:	78c1      	ldrb	r1, [r0, #3]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1f608:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
   1f60a:	7a84      	ldrb	r4, [r0, #10]
	temp.bit.EN32K = config->enable_32khz_output;
   1f60c:	4688      	mov	r8, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   1f60e:	6840      	ldr	r0, [r0, #4]
   1f610:	4919      	ldr	r1, [pc, #100]	; (1f678 <system_clock_source_xosc32k_set_config+0x8c>)
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
   1f612:	4b1a      	ldr	r3, [pc, #104]	; (1f67c <system_clock_source_xosc32k_set_config+0x90>)

	OSC32KCTRL->XOSC32K = temp;
   1f614:	2204      	movs	r2, #4
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
   1f616:	469a      	mov	sl, r3
   1f618:	695b      	ldr	r3, [r3, #20]
	_system_clock_inst.xosc32k.frequency = config->frequency;
   1f61a:	6148      	str	r0, [r1, #20]
	OSC32KCTRL->XOSC32K = temp;
   1f61c:	4648      	mov	r0, r9
   1f61e:	4393      	bics	r3, r2
   1f620:	0080      	lsls	r0, r0, #2
   1f622:	2101      	movs	r1, #1
   1f624:	4303      	orrs	r3, r0
   1f626:	4640      	mov	r0, r8
   1f628:	3204      	adds	r2, #4
   1f62a:	4008      	ands	r0, r1
   1f62c:	00c0      	lsls	r0, r0, #3
   1f62e:	4393      	bics	r3, r2
   1f630:	4303      	orrs	r3, r0
   1f632:	4660      	mov	r0, ip
   1f634:	3208      	adds	r2, #8
   1f636:	4008      	ands	r0, r1
   1f638:	0100      	lsls	r0, r0, #4
   1f63a:	4393      	bics	r3, r2
   1f63c:	4303      	orrs	r3, r0
   1f63e:	2040      	movs	r0, #64	; 0x40
   1f640:	4652      	mov	r2, sl
   1f642:	400f      	ands	r7, r1
   1f644:	01bf      	lsls	r7, r7, #6
   1f646:	4383      	bics	r3, r0
   1f648:	433b      	orrs	r3, r7
   1f64a:	3040      	adds	r0, #64	; 0x40
   1f64c:	400e      	ands	r6, r1
   1f64e:	4383      	bics	r3, r0
   1f650:	3879      	subs	r0, #121	; 0x79
   1f652:	01f6      	lsls	r6, r6, #7
   1f654:	4005      	ands	r5, r0
   1f656:	480a      	ldr	r0, [pc, #40]	; (1f680 <system_clock_source_xosc32k_set_config+0x94>)
   1f658:	4333      	orrs	r3, r6
   1f65a:	022d      	lsls	r5, r5, #8
   1f65c:	4003      	ands	r3, r0
   1f65e:	4809      	ldr	r0, [pc, #36]	; (1f684 <system_clock_source_xosc32k_set_config+0x98>)
   1f660:	432b      	orrs	r3, r5
   1f662:	4021      	ands	r1, r4
   1f664:	0309      	lsls	r1, r1, #12
   1f666:	4003      	ands	r3, r0
   1f668:	430b      	orrs	r3, r1
   1f66a:	6153      	str	r3, [r2, #20]
}
   1f66c:	bc1c      	pop	{r2, r3, r4}
   1f66e:	4690      	mov	r8, r2
   1f670:	4699      	mov	r9, r3
   1f672:	46a2      	mov	sl, r4
   1f674:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f676:	46c0      	nop			; (mov r8, r8)
   1f678:	20000d38 	.word	0x20000d38
   1f67c:	40001000 	.word	0x40001000
   1f680:	fffff8ff 	.word	0xfffff8ff
   1f684:	ffffefff 	.word	0xffffefff

0001f688 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   1f688:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1f68a:	7a83      	ldrb	r3, [r0, #10]
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
   1f68c:	8982      	ldrh	r2, [r0, #12]
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1f68e:	069b      	lsls	r3, r3, #26
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
   1f690:	0592      	lsls	r2, r2, #22
   1f692:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1f694:	0c1b      	lsrs	r3, r3, #16
   1f696:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
   1f698:	4a18      	ldr	r2, [pc, #96]	; (1f6fc <system_clock_source_dfll_set_config+0x74>)
   1f69a:	6053      	str	r3, [r2, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   1f69c:	7a41      	ldrb	r1, [r0, #9]
   1f69e:	7a03      	ldrb	r3, [r0, #8]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   1f6a0:	88c4      	ldrh	r4, [r0, #6]
			(uint32_t)config->wakeup_lock     |
   1f6a2:	430b      	orrs	r3, r1
			(uint32_t)config->quick_lock      |
   1f6a4:	8881      	ldrh	r1, [r0, #4]
   1f6a6:	4321      	orrs	r1, r4
   1f6a8:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
   1f6aa:	7841      	ldrb	r1, [r0, #1]
   1f6ac:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
   1f6ae:	430b      	orrs	r3, r1
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
   1f6b0:	7881      	ldrb	r1, [r0, #2]
   1f6b2:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
   1f6b4:	430b      	orrs	r3, r1
	_system_clock_inst.dfll.control =
   1f6b6:	6013      	str	r3, [r2, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   1f6b8:	7803      	ldrb	r3, [r0, #0]
   1f6ba:	2b04      	cmp	r3, #4
   1f6bc:	d010      	beq.n	1f6e0 <system_clock_source_dfll_set_config+0x58>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   1f6be:	2b20      	cmp	r3, #32
   1f6c0:	d10d      	bne.n	1f6de <system_clock_source_dfll_set_config+0x56>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1f6c2:	7b83      	ldrb	r3, [r0, #14]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
   1f6c4:	8a41      	ldrh	r1, [r0, #18]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1f6c6:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   1f6c8:	430b      	orrs	r3, r1
   1f6ca:	8a01      	ldrh	r1, [r0, #16]
   1f6cc:	480c      	ldr	r0, [pc, #48]	; (1f700 <system_clock_source_dfll_set_config+0x78>)
   1f6ce:	0409      	lsls	r1, r1, #16
   1f6d0:	4001      	ands	r1, r0
   1f6d2:	430b      	orrs	r3, r1
		_system_clock_inst.dfll.mul =
   1f6d4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   1f6d6:	6811      	ldr	r1, [r2, #0]
   1f6d8:	4b0a      	ldr	r3, [pc, #40]	; (1f704 <system_clock_source_dfll_set_config+0x7c>)
   1f6da:	430b      	orrs	r3, r1
   1f6dc:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
   1f6de:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1f6e0:	7b81      	ldrb	r1, [r0, #14]
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
   1f6e2:	8a44      	ldrh	r4, [r0, #18]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1f6e4:	0689      	lsls	r1, r1, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   1f6e6:	8a00      	ldrh	r0, [r0, #16]
   1f6e8:	4321      	orrs	r1, r4
   1f6ea:	4c05      	ldr	r4, [pc, #20]	; (1f700 <system_clock_source_dfll_set_config+0x78>)
   1f6ec:	0400      	lsls	r0, r0, #16
   1f6ee:	4020      	ands	r0, r4
   1f6f0:	4301      	orrs	r1, r0
		_system_clock_inst.dfll.mul =
   1f6f2:	6091      	str	r1, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
   1f6f4:	6811      	ldr	r1, [r2, #0]
   1f6f6:	430b      	orrs	r3, r1
   1f6f8:	6013      	str	r3, [r2, #0]
   1f6fa:	e7f0      	b.n	1f6de <system_clock_source_dfll_set_config+0x56>
   1f6fc:	20000d38 	.word	0x20000d38
   1f700:	03ff0000 	.word	0x03ff0000
   1f704:	00000424 	.word	0x00000424

0001f708 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   1f708:	2808      	cmp	r0, #8
   1f70a:	d850      	bhi.n	1f7ae <system_clock_source_enable+0xa6>
   1f70c:	4b29      	ldr	r3, [pc, #164]	; (1f7b4 <system_clock_source_enable+0xac>)
   1f70e:	0080      	lsls	r0, r0, #2
   1f710:	581b      	ldr	r3, [r3, r0]
   1f712:	469f      	mov	pc, r3
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
   1f714:	2128      	movs	r1, #40	; 0x28
   1f716:	2002      	movs	r0, #2
   1f718:	4a27      	ldr	r2, [pc, #156]	; (1f7b8 <system_clock_source_enable+0xb0>)
   1f71a:	5c53      	ldrb	r3, [r2, r1]
   1f71c:	4303      	orrs	r3, r0
   1f71e:	5453      	strb	r3, [r2, r1]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
   1f720:	3036      	adds	r0, #54	; 0x36
   1f722:	3926      	subs	r1, #38	; 0x26
   1f724:	5c13      	ldrb	r3, [r2, r0]
   1f726:	4219      	tst	r1, r3
   1f728:	d1fc      	bne.n	1f724 <system_clock_source_enable+0x1c>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   1f72a:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
   1f72c:	4770      	bx	lr
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
   1f72e:	2102      	movs	r1, #2
   1f730:	4a21      	ldr	r2, [pc, #132]	; (1f7b8 <system_clock_source_enable+0xb0>)
	return STATUS_OK;
   1f732:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
   1f734:	8a13      	ldrh	r3, [r2, #16]
   1f736:	430b      	orrs	r3, r1
   1f738:	8213      	strh	r3, [r2, #16]
		break;
   1f73a:	e7f7      	b.n	1f72c <system_clock_source_enable+0x24>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
   1f73c:	2102      	movs	r1, #2
   1f73e:	4a1f      	ldr	r2, [pc, #124]	; (1f7bc <system_clock_source_enable+0xb4>)
	return STATUS_OK;
   1f740:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
   1f742:	6993      	ldr	r3, [r2, #24]
   1f744:	430b      	orrs	r3, r1
   1f746:	6193      	str	r3, [r2, #24]
		break;
   1f748:	e7f0      	b.n	1f72c <system_clock_source_enable+0x24>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
   1f74a:	2102      	movs	r1, #2
   1f74c:	4a1b      	ldr	r2, [pc, #108]	; (1f7bc <system_clock_source_enable+0xb4>)
	return STATUS_OK;
   1f74e:	2000      	movs	r0, #0
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
   1f750:	6953      	ldr	r3, [r2, #20]
   1f752:	430b      	orrs	r3, r1
   1f754:	6153      	str	r3, [r2, #20]
		break;
   1f756:	e7e9      	b.n	1f72c <system_clock_source_enable+0x24>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
   1f758:	2102      	movs	r1, #2
   1f75a:	4a17      	ldr	r2, [pc, #92]	; (1f7b8 <system_clock_source_enable+0xb0>)
		return STATUS_OK;
   1f75c:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
   1f75e:	7d13      	ldrb	r3, [r2, #20]
   1f760:	430b      	orrs	r3, r1
   1f762:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
   1f764:	e7e2      	b.n	1f72c <system_clock_source_enable+0x24>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   1f766:	2102      	movs	r1, #2
   1f768:	4815      	ldr	r0, [pc, #84]	; (1f7c0 <system_clock_source_enable+0xb8>)
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   1f76a:	4a13      	ldr	r2, [pc, #76]	; (1f7b8 <system_clock_source_enable+0xb0>)
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   1f76c:	6803      	ldr	r3, [r0, #0]
   1f76e:	430b      	orrs	r3, r1
   1f770:	6003      	str	r3, [r0, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   1f772:	8311      	strh	r1, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f774:	31fe      	adds	r1, #254	; 0xfe
   1f776:	68d3      	ldr	r3, [r2, #12]
   1f778:	420b      	tst	r3, r1
   1f77a:	d0fc      	beq.n	1f776 <system_clock_source_enable+0x6e>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1f77c:	6883      	ldr	r3, [r0, #8]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f77e:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1f780:	6213      	str	r3, [r2, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   1f782:	2302      	movs	r3, #2
   1f784:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f786:	4a0c      	ldr	r2, [pc, #48]	; (1f7b8 <system_clock_source_enable+0xb0>)
   1f788:	0049      	lsls	r1, r1, #1
   1f78a:	68d3      	ldr	r3, [r2, #12]
   1f78c:	420b      	tst	r3, r1
   1f78e:	d0fc      	beq.n	1f78a <system_clock_source_enable+0x82>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1f790:	6843      	ldr	r3, [r0, #4]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f792:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1f794:	61d3      	str	r3, [r2, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
   1f796:	2300      	movs	r3, #0
   1f798:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f79a:	4a07      	ldr	r2, [pc, #28]	; (1f7b8 <system_clock_source_enable+0xb0>)
   1f79c:	0049      	lsls	r1, r1, #1
   1f79e:	68d3      	ldr	r3, [r2, #12]
   1f7a0:	420b      	tst	r3, r1
   1f7a2:	d0fc      	beq.n	1f79e <system_clock_source_enable+0x96>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1f7a4:	6803      	ldr	r3, [r0, #0]
	return STATUS_OK;
   1f7a6:	2000      	movs	r0, #0
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1f7a8:	b29b      	uxth	r3, r3
   1f7aa:	8313      	strh	r3, [r2, #24]
   1f7ac:	e7be      	b.n	1f72c <system_clock_source_enable+0x24>
		return STATUS_ERR_INVALID_ARG;
   1f7ae:	2017      	movs	r0, #23
   1f7b0:	e7bc      	b.n	1f72c <system_clock_source_enable+0x24>
   1f7b2:	46c0      	nop			; (mov r8, r8)
   1f7b4:	0002ea44 	.word	0x0002ea44
   1f7b8:	40000c00 	.word	0x40000c00
   1f7bc:	40001000 	.word	0x40001000
   1f7c0:	20000d38 	.word	0x20000d38

0001f7c4 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   1f7c4:	2808      	cmp	r0, #8
   1f7c6:	d832      	bhi.n	1f82e <system_clock_source_disable+0x6a>
   1f7c8:	4b1a      	ldr	r3, [pc, #104]	; (1f834 <system_clock_source_disable+0x70>)
   1f7ca:	0080      	lsls	r0, r0, #2
   1f7cc:	581b      	ldr	r3, [r3, r0]
   1f7ce:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
   1f7d0:	2228      	movs	r2, #40	; 0x28
   1f7d2:	2002      	movs	r0, #2
   1f7d4:	4918      	ldr	r1, [pc, #96]	; (1f838 <system_clock_source_disable+0x74>)
   1f7d6:	5c8b      	ldrb	r3, [r1, r2]
   1f7d8:	4383      	bics	r3, r0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
   1f7da:	2000      	movs	r0, #0
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
   1f7dc:	548b      	strb	r3, [r1, r2]
}
   1f7de:	4770      	bx	lr
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
   1f7e0:	2102      	movs	r1, #2
   1f7e2:	4a15      	ldr	r2, [pc, #84]	; (1f838 <system_clock_source_disable+0x74>)
	return STATUS_OK;
   1f7e4:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
   1f7e6:	8a13      	ldrh	r3, [r2, #16]
   1f7e8:	438b      	bics	r3, r1
   1f7ea:	8213      	strh	r3, [r2, #16]
		break;
   1f7ec:	e7f7      	b.n	1f7de <system_clock_source_disable+0x1a>
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
   1f7ee:	2102      	movs	r1, #2
   1f7f0:	4a12      	ldr	r2, [pc, #72]	; (1f83c <system_clock_source_disable+0x78>)
	return STATUS_OK;
   1f7f2:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
   1f7f4:	6993      	ldr	r3, [r2, #24]
   1f7f6:	438b      	bics	r3, r1
   1f7f8:	6193      	str	r3, [r2, #24]
		break;
   1f7fa:	e7f0      	b.n	1f7de <system_clock_source_disable+0x1a>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
   1f7fc:	2102      	movs	r1, #2
   1f7fe:	4a0f      	ldr	r2, [pc, #60]	; (1f83c <system_clock_source_disable+0x78>)
	return STATUS_OK;
   1f800:	2000      	movs	r0, #0
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
   1f802:	6953      	ldr	r3, [r2, #20]
   1f804:	438b      	bics	r3, r1
   1f806:	6153      	str	r3, [r2, #20]
		break;
   1f808:	e7e9      	b.n	1f7de <system_clock_source_disable+0x1a>
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
   1f80a:	2102      	movs	r1, #2
   1f80c:	4a0a      	ldr	r2, [pc, #40]	; (1f838 <system_clock_source_disable+0x74>)
	return STATUS_OK;
   1f80e:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
   1f810:	7d13      	ldrb	r3, [r2, #20]
   1f812:	438b      	bics	r3, r1
   1f814:	7513      	strb	r3, [r2, #20]
		break;
   1f816:	e7e2      	b.n	1f7de <system_clock_source_disable+0x1a>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
   1f818:	2102      	movs	r1, #2
   1f81a:	4b09      	ldr	r3, [pc, #36]	; (1f840 <system_clock_source_disable+0x7c>)
	return STATUS_OK;
   1f81c:	2000      	movs	r0, #0
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
   1f81e:	681a      	ldr	r2, [r3, #0]
   1f820:	438a      	bics	r2, r1
   1f822:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1f824:	681b      	ldr	r3, [r3, #0]
   1f826:	4a04      	ldr	r2, [pc, #16]	; (1f838 <system_clock_source_disable+0x74>)
   1f828:	b29b      	uxth	r3, r3
   1f82a:	8313      	strh	r3, [r2, #24]
		break;
   1f82c:	e7d7      	b.n	1f7de <system_clock_source_disable+0x1a>
		return STATUS_ERR_INVALID_ARG;
   1f82e:	2017      	movs	r0, #23
   1f830:	e7d5      	b.n	1f7de <system_clock_source_disable+0x1a>
   1f832:	46c0      	nop			; (mov r8, r8)
   1f834:	0002ea68 	.word	0x0002ea68
   1f838:	40000c00 	.word	0x40000c00
   1f83c:	40001000 	.word	0x40001000
   1f840:	20000d38 	.word	0x20000d38

0001f844 <system_clock_source_is_ready>:
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
	uint32_t mask = 0;

	switch (clock_source) {
   1f844:	2808      	cmp	r0, #8
   1f846:	d82f      	bhi.n	1f8a8 <system_clock_source_is_ready+0x64>
   1f848:	4b18      	ldr	r3, [pc, #96]	; (1f8ac <system_clock_source_is_ready+0x68>)
   1f84a:	0080      	lsls	r0, r0, #2
   1f84c:	581b      	ldr	r3, [r3, r0]
   1f84e:	469f      	mov	pc, r3
		return ((OSCCTRL->DPLLSTATUS.reg &
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   1f850:	2001      	movs	r0, #1

	default:
		return false;
	}
}
   1f852:	4770      	bx	lr
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   1f854:	4b16      	ldr	r3, [pc, #88]	; (1f8b0 <system_clock_source_is_ready+0x6c>)
   1f856:	68d8      	ldr	r0, [r3, #12]
   1f858:	0780      	lsls	r0, r0, #30
   1f85a:	0fc0      	lsrs	r0, r0, #31
   1f85c:	e7f9      	b.n	1f852 <system_clock_source_is_ready+0xe>
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   1f85e:	2001      	movs	r0, #1
   1f860:	4b13      	ldr	r3, [pc, #76]	; (1f8b0 <system_clock_source_is_ready+0x6c>)
   1f862:	68db      	ldr	r3, [r3, #12]
   1f864:	4018      	ands	r0, r3
   1f866:	e7f4      	b.n	1f852 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   1f868:	4b12      	ldr	r3, [pc, #72]	; (1f8b4 <system_clock_source_is_ready+0x70>)
   1f86a:	68d8      	ldr	r0, [r3, #12]
   1f86c:	06c0      	lsls	r0, r0, #27
   1f86e:	0fc0      	lsrs	r0, r0, #31
   1f870:	e7ef      	b.n	1f852 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   1f872:	4b10      	ldr	r3, [pc, #64]	; (1f8b4 <system_clock_source_is_ready+0x70>)
   1f874:	68d8      	ldr	r0, [r3, #12]
   1f876:	23d0      	movs	r3, #208	; 0xd0
   1f878:	011b      	lsls	r3, r3, #4
   1f87a:	4018      	ands	r0, r3
   1f87c:	4b0e      	ldr	r3, [pc, #56]	; (1f8b8 <system_clock_source_is_ready+0x74>)
   1f87e:	469c      	mov	ip, r3
   1f880:	4460      	add	r0, ip
   1f882:	4243      	negs	r3, r0
   1f884:	4158      	adcs	r0, r3
   1f886:	b2c0      	uxtb	r0, r0
   1f888:	e7e3      	b.n	1f852 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->DPLLSTATUS.reg &
   1f88a:	233c      	movs	r3, #60	; 0x3c
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
   1f88c:	2003      	movs	r0, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
   1f88e:	4a09      	ldr	r2, [pc, #36]	; (1f8b4 <system_clock_source_is_ready+0x70>)
   1f890:	5cd3      	ldrb	r3, [r2, r3]
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
   1f892:	4018      	ands	r0, r3
   1f894:	3803      	subs	r0, #3
   1f896:	4243      	negs	r3, r0
   1f898:	4158      	adcs	r0, r3
   1f89a:	b2c0      	uxtb	r0, r0
   1f89c:	e7d9      	b.n	1f852 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   1f89e:	2001      	movs	r0, #1
   1f8a0:	4b04      	ldr	r3, [pc, #16]	; (1f8b4 <system_clock_source_is_ready+0x70>)
   1f8a2:	68db      	ldr	r3, [r3, #12]
   1f8a4:	4018      	ands	r0, r3
   1f8a6:	e7d4      	b.n	1f852 <system_clock_source_is_ready+0xe>
		return false;
   1f8a8:	2000      	movs	r0, #0
   1f8aa:	e7d2      	b.n	1f852 <system_clock_source_is_ready+0xe>
   1f8ac:	0002ea8c 	.word	0x0002ea8c
   1f8b0:	40001000 	.word	0x40001000
   1f8b4:	40000c00 	.word	0x40000c00
   1f8b8:	fffff300 	.word	0xfffff300

0001f8bc <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   1f8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   1f8be:	2280      	movs	r2, #128	; 0x80
{
   1f8c0:	46c6      	mov	lr, r8
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1f8c2:	211e      	movs	r1, #30
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   1f8c4:	4b64      	ldr	r3, [pc, #400]	; (1fa58 <system_clock_init+0x19c>)
{
   1f8c6:	b500      	push	{lr}
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   1f8c8:	0052      	lsls	r2, r2, #1
   1f8ca:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
   1f8cc:	4b63      	ldr	r3, [pc, #396]	; (1fa5c <system_clock_init+0x1a0>)
   1f8ce:	3afd      	subs	r2, #253	; 0xfd
   1f8d0:	609a      	str	r2, [r3, #8]
   1f8d2:	4a63      	ldr	r2, [pc, #396]	; (1fa60 <system_clock_init+0x1a4>)
{
   1f8d4:	b088      	sub	sp, #32
   1f8d6:	6853      	ldr	r3, [r2, #4]
   1f8d8:	438b      	bics	r3, r1
   1f8da:	391a      	subs	r1, #26
   1f8dc:	430b      	orrs	r3, r1
   1f8de:	6053      	str	r3, [r2, #4]
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
   1f8e0:	2380      	movs	r3, #128	; 0x80
   1f8e2:	05db      	lsls	r3, r3, #23
   1f8e4:	789a      	ldrb	r2, [r3, #2]
   1f8e6:	2a02      	cmp	r2, #2
   1f8e8:	d00a      	beq.n	1f900 <system_clock_init+0x44>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
   1f8ea:	789a      	ldrb	r2, [r3, #2]
   1f8ec:	b252      	sxtb	r2, r2
   1f8ee:	2a00      	cmp	r2, #0
   1f8f0:	db06      	blt.n	1f900 <system_clock_init+0x44>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
   1f8f2:	2201      	movs	r2, #1
   1f8f4:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
   1f8f6:	3201      	adds	r2, #1
   1f8f8:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
   1f8fa:	799a      	ldrb	r2, [r3, #6]
   1f8fc:	2a00      	cmp	r2, #0
   1f8fe:	d0fc      	beq.n	1f8fa <system_clock_init+0x3e>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
   1f900:	2280      	movs	r2, #128	; 0x80
   1f902:	4b55      	ldr	r3, [pc, #340]	; (1fa58 <system_clock_init+0x19c>)
   1f904:	4252      	negs	r2, r2
   1f906:	7d19      	ldrb	r1, [r3, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   1f908:	a803      	add	r0, sp, #12
   1f90a:	430a      	orrs	r2, r1
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
   1f90c:	2140      	movs	r1, #64	; 0x40
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
   1f90e:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
   1f910:	7d1a      	ldrb	r2, [r3, #20]
   1f912:	438a      	bics	r2, r1
   1f914:	751a      	strb	r2, [r3, #20]
   1f916:	2200      	movs	r2, #0
   1f918:	2300      	movs	r3, #0
   1f91a:	8082      	strh	r2, [r0, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   1f91c:	80c2      	strh	r2, [r0, #6]
	config->fine_value      = 0xff / 4; /* Midpoint */
   1f91e:	323f      	adds	r2, #63	; 0x3f
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   1f920:	7203      	strb	r3, [r0, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   1f922:	7243      	strb	r3, [r0, #9]
	config->run_in_stanby   = false;
   1f924:	7083      	strb	r3, [r0, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
   1f926:	8182      	strh	r2, [r0, #12]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
   1f928:	7043      	strb	r3, [r0, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   1f92a:	3a3b      	subs	r2, #59	; 0x3b
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
   1f92c:	4b4d      	ldr	r3, [pc, #308]	; (1fa64 <system_clock_init+0x1a8>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   1f92e:	7002      	strb	r2, [r0, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
   1f930:	681b      	ldr	r3, [r3, #0]
   1f932:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
   1f934:	2b3f      	cmp	r3, #63	; 0x3f
   1f936:	d100      	bne.n	1f93a <system_clock_init+0x7e>
   1f938:	e08b      	b.n	1fa52 <system_clock_init+0x196>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
   1f93a:	7283      	strb	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   1f93c:	2307      	movs	r3, #7
   1f93e:	7383      	strb	r3, [r0, #14]
   1f940:	4698      	mov	r8, r3
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   1f942:	4b49      	ldr	r3, [pc, #292]	; (1fa68 <system_clock_init+0x1ac>)
	config->high_when_disabled = false;
   1f944:	2600      	movs	r6, #0
   1f946:	9307      	str	r3, [sp, #28]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   1f948:	4b48      	ldr	r3, [pc, #288]	; (1fa6c <system_clock_init+0x1b0>)
   1f94a:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1f94c:	4b48      	ldr	r3, [pc, #288]	; (1fa70 <system_clock_init+0x1b4>)
   1f94e:	4798      	blx	r3
   1f950:	466b      	mov	r3, sp

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1f952:	466a      	mov	r2, sp
	config->division_factor    = 1;
   1f954:	2701      	movs	r7, #1
	config->high_when_disabled = false;
   1f956:	705e      	strb	r6, [r3, #1]
	config->output_enable      = false;
   1f958:	725e      	strb	r6, [r3, #9]
   1f95a:	2303      	movs	r3, #3
   1f95c:	4669      	mov	r1, sp
   1f95e:	2002      	movs	r0, #2
   1f960:	4d44      	ldr	r5, [pc, #272]	; (1fa74 <system_clock_init+0x1b8>)
   1f962:	7013      	strb	r3, [r2, #0]
   1f964:	7217      	strb	r7, [r2, #8]
	config->division_factor    = 1;
   1f966:	9701      	str	r7, [sp, #4]
   1f968:	47a8      	blx	r5
   1f96a:	2002      	movs	r0, #2
   1f96c:	4c42      	ldr	r4, [pc, #264]	; (1fa78 <system_clock_init+0x1bc>)
   1f96e:	47a0      	blx	r4
	config->high_when_disabled = false;
   1f970:	466b      	mov	r3, sp
   1f972:	4642      	mov	r2, r8
   1f974:	4669      	mov	r1, sp
   1f976:	2003      	movs	r0, #3
   1f978:	701a      	strb	r2, [r3, #0]
   1f97a:	705e      	strb	r6, [r3, #1]
	config->run_in_standby     = false;
   1f97c:	721e      	strb	r6, [r3, #8]
	config->output_enable      = false;
   1f97e:	725e      	strb	r6, [r3, #9]
	config->division_factor    = 1;
   1f980:	9701      	str	r7, [sp, #4]
   1f982:	47a8      	blx	r5
   1f984:	2003      	movs	r0, #3
   1f986:	47a0      	blx	r4
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   1f988:	466b      	mov	r3, sp
   1f98a:	3602      	adds	r6, #2
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   1f98c:	4669      	mov	r1, sp
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   1f98e:	701e      	strb	r6, [r3, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   1f990:	2000      	movs	r0, #0
   1f992:	4b3a      	ldr	r3, [pc, #232]	; (1fa7c <system_clock_init+0x1c0>)
   1f994:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
   1f996:	2000      	movs	r0, #0
   1f998:	4b39      	ldr	r3, [pc, #228]	; (1fa80 <system_clock_init+0x1c4>)
   1f99a:	4798      	blx	r3
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f99c:	2180      	movs	r1, #128	; 0x80
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   1f99e:	4839      	ldr	r0, [pc, #228]	; (1fa84 <system_clock_init+0x1c8>)
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   1f9a0:	4a2d      	ldr	r2, [pc, #180]	; (1fa58 <system_clock_init+0x19c>)
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   1f9a2:	6803      	ldr	r3, [r0, #0]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f9a4:	0049      	lsls	r1, r1, #1
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   1f9a6:	4333      	orrs	r3, r6
   1f9a8:	6003      	str	r3, [r0, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   1f9aa:	8316      	strh	r6, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f9ac:	68d3      	ldr	r3, [r2, #12]
   1f9ae:	420b      	tst	r3, r1
   1f9b0:	d0fc      	beq.n	1f9ac <system_clock_init+0xf0>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1f9b2:	6883      	ldr	r3, [r0, #8]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f9b4:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1f9b6:	6213      	str	r3, [r2, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   1f9b8:	2302      	movs	r3, #2
   1f9ba:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f9bc:	4a26      	ldr	r2, [pc, #152]	; (1fa58 <system_clock_init+0x19c>)
   1f9be:	0049      	lsls	r1, r1, #1
   1f9c0:	68d3      	ldr	r3, [r2, #12]
   1f9c2:	420b      	tst	r3, r1
   1f9c4:	d0fc      	beq.n	1f9c0 <system_clock_init+0x104>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1f9c6:	6843      	ldr	r3, [r0, #4]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f9c8:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1f9ca:	61d3      	str	r3, [r2, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
   1f9cc:	2300      	movs	r3, #0
   1f9ce:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1f9d0:	4a21      	ldr	r2, [pc, #132]	; (1fa58 <system_clock_init+0x19c>)
   1f9d2:	0049      	lsls	r1, r1, #1
   1f9d4:	68d3      	ldr	r3, [r2, #12]
   1f9d6:	420b      	tst	r3, r1
   1f9d8:	d0fc      	beq.n	1f9d4 <system_clock_init+0x118>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1f9da:	6803      	ldr	r3, [r0, #0]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   1f9dc:	491e      	ldr	r1, [pc, #120]	; (1fa58 <system_clock_init+0x19c>)
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1f9de:	b29b      	uxth	r3, r3
   1f9e0:	8313      	strh	r3, [r2, #24]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   1f9e2:	22d0      	movs	r2, #208	; 0xd0
   1f9e4:	0112      	lsls	r2, r2, #4
   1f9e6:	68cb      	ldr	r3, [r1, #12]
   1f9e8:	4013      	ands	r3, r2
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   1f9ea:	4293      	cmp	r3, r2
   1f9ec:	d1fb      	bne.n	1f9e6 <system_clock_init+0x12a>
	config->high_when_disabled = false;
   1f9ee:	2300      	movs	r3, #0
   1f9f0:	4698      	mov	r8, r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
   1f9f2:	2601      	movs	r6, #1
   1f9f4:	466b      	mov	r3, sp
   1f9f6:	4642      	mov	r2, r8
   1f9f8:	4f23      	ldr	r7, [pc, #140]	; (1fa88 <system_clock_init+0x1cc>)
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   1f9fa:	4669      	mov	r1, sp
   1f9fc:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
   1f9fe:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
   1fa00:	713e      	strb	r6, [r7, #4]
   1fa02:	705a      	strb	r2, [r3, #1]
	config->run_in_standby     = false;
   1fa04:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   1fa06:	725a      	strb	r2, [r3, #9]
   1fa08:	466a      	mov	r2, sp
   1fa0a:	2307      	movs	r3, #7
   1fa0c:	2000      	movs	r0, #0
   1fa0e:	7013      	strb	r3, [r2, #0]
	config->division_factor    = 1;
   1fa10:	9601      	str	r6, [sp, #4]
   1fa12:	47a8      	blx	r5
   1fa14:	2000      	movs	r0, #0
   1fa16:	47a0      	blx	r4
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
   1fa18:	4b1c      	ldr	r3, [pc, #112]	; (1fa8c <system_clock_init+0x1d0>)
   1fa1a:	2000      	movs	r0, #0
   1fa1c:	4798      	blx	r3
   1fa1e:	7939      	ldrb	r1, [r7, #4]
   1fa20:	4b1b      	ldr	r3, [pc, #108]	; (1fa90 <system_clock_init+0x1d4>)
   1fa22:	b2c9      	uxtb	r1, r1
   1fa24:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
   1fa26:	4b1b      	ldr	r3, [pc, #108]	; (1fa94 <system_clock_init+0x1d8>)
   1fa28:	4298      	cmp	r0, r3
   1fa2a:	d80e      	bhi.n	1fa4a <system_clock_init+0x18e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
   1fa2c:	2280      	movs	r2, #128	; 0x80
   1fa2e:	05d2      	lsls	r2, r2, #23
   1fa30:	7893      	ldrb	r3, [r2, #2]
   1fa32:	2b00      	cmp	r3, #0
   1fa34:	d009      	beq.n	1fa4a <system_clock_init+0x18e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
   1fa36:	7893      	ldrb	r3, [r2, #2]
   1fa38:	b25b      	sxtb	r3, r3
   1fa3a:	2b00      	cmp	r3, #0
   1fa3c:	db05      	blt.n	1fa4a <system_clock_init+0x18e>
	PM->PLCFG.reg = performance_level;
   1fa3e:	4643      	mov	r3, r8
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
   1fa40:	7196      	strb	r6, [r2, #6]
	PM->PLCFG.reg = performance_level;
   1fa42:	7093      	strb	r3, [r2, #2]
	while (!PM->INTFLAG.reg) {
   1fa44:	7993      	ldrb	r3, [r2, #6]
   1fa46:	2b00      	cmp	r3, #0
   1fa48:	d0fc      	beq.n	1fa44 <system_clock_init+0x188>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
   1fa4a:	b008      	add	sp, #32
   1fa4c:	bc04      	pop	{r2}
   1fa4e:	4690      	mov	r8, r2
   1fa50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (coarse == 0x3f) {
   1fa52:	3b20      	subs	r3, #32
   1fa54:	e771      	b.n	1f93a <system_clock_init+0x7e>
   1fa56:	46c0      	nop			; (mov r8, r8)
   1fa58:	40000c00 	.word	0x40000c00
   1fa5c:	40001400 	.word	0x40001400
   1fa60:	41004000 	.word	0x41004000
   1fa64:	00806020 	.word	0x00806020
   1fa68:	05b8003f 	.word	0x05b8003f
   1fa6c:	0001f689 	.word	0x0001f689
   1fa70:	0001fa99 	.word	0x0001fa99
   1fa74:	0001fabd 	.word	0x0001fabd
   1fa78:	0001fb69 	.word	0x0001fb69
   1fa7c:	0001fc15 	.word	0x0001fc15
   1fa80:	0001fc55 	.word	0x0001fc55
   1fa84:	20000d38 	.word	0x20000d38
   1fa88:	40000400 	.word	0x40000400
   1fa8c:	0001fba9 	.word	0x0001fba9
   1fa90:	0002593d 	.word	0x0002593d
   1fa94:	00b71b00 	.word	0x00b71b00

0001fa98 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
   1fa98:	2140      	movs	r1, #64	; 0x40
   1fa9a:	4a06      	ldr	r2, [pc, #24]	; (1fab4 <system_gclk_init+0x1c>)
   1fa9c:	6953      	ldr	r3, [r2, #20]
   1fa9e:	430b      	orrs	r3, r1
   1faa0:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
   1faa2:	2301      	movs	r3, #1
   1faa4:	4a04      	ldr	r2, [pc, #16]	; (1fab8 <system_gclk_init+0x20>)
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
   1faa6:	393f      	subs	r1, #63	; 0x3f
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
   1faa8:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
   1faaa:	7813      	ldrb	r3, [r2, #0]
   1faac:	4219      	tst	r1, r3
   1faae:	d1fc      	bne.n	1faaa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   1fab0:	4770      	bx	lr
   1fab2:	46c0      	nop			; (mov r8, r8)
   1fab4:	40000400 	.word	0x40000400
   1fab8:	40001800 	.word	0x40001800

0001fabc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1fabc:	b570      	push	{r4, r5, r6, lr}

	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1fabe:	784b      	ldrb	r3, [r1, #1]
{
   1fac0:	0004      	movs	r4, r0
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1fac2:	780d      	ldrb	r5, [r1, #0]
	if (config->high_when_disabled) {
   1fac4:	2b00      	cmp	r3, #0
   1fac6:	d002      	beq.n	1face <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1fac8:	2380      	movs	r3, #128	; 0x80
   1faca:	00db      	lsls	r3, r3, #3
   1facc:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1face:	7a4b      	ldrb	r3, [r1, #9]
   1fad0:	2b00      	cmp	r3, #0
   1fad2:	d002      	beq.n	1fada <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   1fad4:	2380      	movs	r3, #128	; 0x80
   1fad6:	011b      	lsls	r3, r3, #4
   1fad8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1fada:	6848      	ldr	r0, [r1, #4]
   1fadc:	2801      	cmp	r0, #1
   1fade:	d90f      	bls.n	1fb00 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1fae0:	1e43      	subs	r3, r0, #1
   1fae2:	4218      	tst	r0, r3
   1fae4:	d12f      	bne.n	1fb46 <system_gclk_gen_set_config+0x8a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1fae6:	2802      	cmp	r0, #2
   1fae8:	d033      	beq.n	1fb52 <system_gclk_gen_set_config+0x96>
   1faea:	2302      	movs	r3, #2
   1faec:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1faee:	3201      	adds	r2, #1
						mask <<= 1) {
   1faf0:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   1faf2:	4298      	cmp	r0, r3
   1faf4:	d8fb      	bhi.n	1faee <system_gclk_gen_set_config+0x32>
   1faf6:	0412      	lsls	r2, r2, #16
   1faf8:	2380      	movs	r3, #128	; 0x80
   1fafa:	015b      	lsls	r3, r3, #5
   1fafc:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1fafe:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1fb00:	7a0b      	ldrb	r3, [r1, #8]
   1fb02:	2b00      	cmp	r3, #0
   1fb04:	d002      	beq.n	1fb0c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1fb06:	2380      	movs	r3, #128	; 0x80
   1fb08:	019b      	lsls	r3, r3, #6
   1fb0a:	431d      	orrs	r5, r3
   1fb0c:	2604      	movs	r6, #4
   1fb0e:	40a6      	lsls	r6, r4
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   1fb10:	4911      	ldr	r1, [pc, #68]	; (1fb58 <system_gclk_gen_set_config+0x9c>)
   1fb12:	4a12      	ldr	r2, [pc, #72]	; (1fb5c <system_gclk_gen_set_config+0xa0>)
   1fb14:	684b      	ldr	r3, [r1, #4]
   1fb16:	4013      	ands	r3, r2
   1fb18:	421e      	tst	r6, r3
   1fb1a:	d1fb      	bne.n	1fb14 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
   1fb1c:	4b10      	ldr	r3, [pc, #64]	; (1fb60 <system_gclk_gen_set_config+0xa4>)
   1fb1e:	4798      	blx	r3
   1fb20:	4b0d      	ldr	r3, [pc, #52]	; (1fb58 <system_gclk_gen_set_config+0x9c>)
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   1fb22:	2280      	movs	r2, #128	; 0x80
   1fb24:	469c      	mov	ip, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   1fb26:	4661      	mov	r1, ip
   1fb28:	00a4      	lsls	r4, r4, #2
   1fb2a:	4464      	add	r4, ip
	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   1fb2c:	6a23      	ldr	r3, [r4, #32]
   1fb2e:	0052      	lsls	r2, r2, #1
   1fb30:	4013      	ands	r3, r2
   1fb32:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   1fb34:	4a09      	ldr	r2, [pc, #36]	; (1fb5c <system_gclk_gen_set_config+0xa0>)
	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   1fb36:	6225      	str	r5, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   1fb38:	684b      	ldr	r3, [r1, #4]
   1fb3a:	4013      	ands	r3, r2
   1fb3c:	421e      	tst	r6, r3
   1fb3e:	d1fb      	bne.n	1fb38 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
   1fb40:	4b08      	ldr	r3, [pc, #32]	; (1fb64 <system_gclk_gen_set_config+0xa8>)
   1fb42:	4798      	blx	r3
	while (system_gclk_is_syncing(generator)) {
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
   1fb44:	bd70      	pop	{r4, r5, r6, pc}
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1fb46:	2380      	movs	r3, #128	; 0x80
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
   1fb48:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1fb4a:	009b      	lsls	r3, r3, #2
   1fb4c:	4318      	orrs	r0, r3
   1fb4e:	4305      	orrs	r5, r0
   1fb50:	e7d6      	b.n	1fb00 <system_gclk_gen_set_config+0x44>
			for (mask = (1UL << 1); mask < config->division_factor;
   1fb52:	2200      	movs	r2, #0
   1fb54:	e7d0      	b.n	1faf8 <system_gclk_gen_set_config+0x3c>
   1fb56:	46c0      	nop			; (mov r8, r8)
   1fb58:	40001800 	.word	0x40001800
   1fb5c:	000007fc 	.word	0x000007fc
   1fb60:	0000798d 	.word	0x0000798d
   1fb64:	000079c9 	.word	0x000079c9

0001fb68 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1fb68:	2204      	movs	r2, #4
   1fb6a:	b510      	push	{r4, lr}
   1fb6c:	4082      	lsls	r2, r0
   1fb6e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   1fb70:	4909      	ldr	r1, [pc, #36]	; (1fb98 <system_gclk_gen_enable+0x30>)
   1fb72:	480a      	ldr	r0, [pc, #40]	; (1fb9c <system_gclk_gen_enable+0x34>)
   1fb74:	6843      	ldr	r3, [r0, #4]
   1fb76:	400b      	ands	r3, r1
   1fb78:	421a      	tst	r2, r3
   1fb7a:	d1fb      	bne.n	1fb74 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
   1fb7c:	4b08      	ldr	r3, [pc, #32]	; (1fba0 <system_gclk_gen_enable+0x38>)
   1fb7e:	4798      	blx	r3
   1fb80:	4b06      	ldr	r3, [pc, #24]	; (1fb9c <system_gclk_gen_enable+0x34>)
   1fb82:	00a0      	lsls	r0, r4, #2
   1fb84:	469c      	mov	ip, r3
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
   1fb86:	2380      	movs	r3, #128	; 0x80
   1fb88:	4460      	add	r0, ip
   1fb8a:	6a02      	ldr	r2, [r0, #32]
   1fb8c:	005b      	lsls	r3, r3, #1
   1fb8e:	4313      	orrs	r3, r2
   1fb90:	6203      	str	r3, [r0, #32]
	cpu_irq_leave_critical();
   1fb92:	4b04      	ldr	r3, [pc, #16]	; (1fba4 <system_gclk_gen_enable+0x3c>)
   1fb94:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1fb96:	bd10      	pop	{r4, pc}
   1fb98:	000007fc 	.word	0x000007fc
   1fb9c:	40001800 	.word	0x40001800
   1fba0:	0000798d 	.word	0x0000798d
   1fba4:	000079c9 	.word	0x000079c9

0001fba8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   1fba8:	2204      	movs	r2, #4
   1fbaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fbac:	4082      	lsls	r2, r0
   1fbae:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   1fbb0:	4e12      	ldr	r6, [pc, #72]	; (1fbfc <system_gclk_gen_get_hz+0x54>)
   1fbb2:	4913      	ldr	r1, [pc, #76]	; (1fc00 <system_gclk_gen_get_hz+0x58>)
   1fbb4:	6873      	ldr	r3, [r6, #4]
   1fbb6:	400b      	ands	r3, r1
   1fbb8:	421a      	tst	r2, r3
   1fbba:	d1fb      	bne.n	1fbb4 <system_gclk_gen_get_hz+0xc>

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   1fbbc:	3408      	adds	r4, #8
   1fbbe:	00a4      	lsls	r4, r4, #2
	cpu_irq_enter_critical();
   1fbc0:	4b10      	ldr	r3, [pc, #64]	; (1fc04 <system_gclk_gen_get_hz+0x5c>)
   1fbc2:	4798      	blx	r3
   1fbc4:	59a0      	ldr	r0, [r4, r6]
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1fbc6:	4b10      	ldr	r3, [pc, #64]	; (1fc08 <system_gclk_gen_get_hz+0x60>)
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   1fbc8:	0700      	lsls	r0, r0, #28
   1fbca:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1fbcc:	4798      	blx	r3

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   1fbce:	59a5      	ldr	r5, [r4, r6]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   1fbd0:	59a4      	ldr	r4, [r4, r6]
	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   1fbd2:	04ed      	lsls	r5, r5, #19
	cpu_irq_leave_critical();
   1fbd4:	4b0d      	ldr	r3, [pc, #52]	; (1fc0c <system_gclk_gen_get_hz+0x64>)
   1fbd6:	0fed      	lsrs	r5, r5, #31
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1fbd8:	0007      	movs	r7, r0
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   1fbda:	0c24      	lsrs	r4, r4, #16
   1fbdc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1fbde:	2d00      	cmp	r5, #0
   1fbe0:	d003      	beq.n	1fbea <system_gclk_gen_get_hz+0x42>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   1fbe2:	3401      	adds	r4, #1
   1fbe4:	40e7      	lsrs	r7, r4
	}

	return gen_input_hz;
}
   1fbe6:	0038      	movs	r0, r7
   1fbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!divsel && divider > 1) {
   1fbea:	2c01      	cmp	r4, #1
   1fbec:	d9fb      	bls.n	1fbe6 <system_gclk_gen_get_hz+0x3e>
		gen_input_hz /= divider;
   1fbee:	0038      	movs	r0, r7
   1fbf0:	0021      	movs	r1, r4
   1fbf2:	4b07      	ldr	r3, [pc, #28]	; (1fc10 <system_gclk_gen_get_hz+0x68>)
   1fbf4:	4798      	blx	r3
   1fbf6:	0007      	movs	r7, r0
   1fbf8:	e7f5      	b.n	1fbe6 <system_gclk_gen_get_hz+0x3e>
   1fbfa:	46c0      	nop			; (mov r8, r8)
   1fbfc:	40001800 	.word	0x40001800
   1fc00:	000007fc 	.word	0x000007fc
   1fc04:	0000798d 	.word	0x0000798d
   1fc08:	0001f55d 	.word	0x0001f55d
   1fc0c:	000079c9 	.word	0x000079c9
   1fc10:	0002593d 	.word	0x0002593d

0001fc14 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   1fc14:	b570      	push	{r4, r5, r6, lr}
	cpu_irq_enter_critical();
   1fc16:	4b0c      	ldr	r3, [pc, #48]	; (1fc48 <system_gclk_chan_set_config+0x34>)
   1fc18:	0004      	movs	r4, r0
   1fc1a:	000e      	movs	r6, r1
   1fc1c:	4798      	blx	r3
   1fc1e:	4b0b      	ldr	r3, [pc, #44]	; (1fc4c <system_gclk_chan_set_config+0x38>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
   1fc20:	2280      	movs	r2, #128	; 0x80
   1fc22:	469c      	mov	ip, r3
   1fc24:	2140      	movs	r1, #64	; 0x40

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
   1fc26:	2580      	movs	r5, #128	; 0x80
   1fc28:	00a4      	lsls	r4, r4, #2
   1fc2a:	4464      	add	r4, ip
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
   1fc2c:	58a3      	ldr	r3, [r4, r2]
   1fc2e:	438b      	bics	r3, r1
   1fc30:	50a3      	str	r3, [r4, r2]
	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
   1fc32:	3a40      	subs	r2, #64	; 0x40
   1fc34:	5963      	ldr	r3, [r4, r5]
   1fc36:	421a      	tst	r2, r3
   1fc38:	d1fc      	bne.n	1fc34 <system_gclk_chan_set_config+0x20>
	cpu_irq_leave_critical();
   1fc3a:	4b05      	ldr	r3, [pc, #20]	; (1fc50 <system_gclk_chan_set_config+0x3c>)
   1fc3c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
   1fc3e:	230f      	movs	r3, #15
   1fc40:	7832      	ldrb	r2, [r6, #0]
   1fc42:	4013      	ands	r3, r2
   1fc44:	5163      	str	r3, [r4, r5]
}
   1fc46:	bd70      	pop	{r4, r5, r6, pc}
   1fc48:	0000798d 	.word	0x0000798d
   1fc4c:	40001800 	.word	0x40001800
   1fc50:	000079c9 	.word	0x000079c9

0001fc54 <system_gclk_chan_enable>:
{
   1fc54:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
   1fc56:	4b0a      	ldr	r3, [pc, #40]	; (1fc80 <system_gclk_chan_enable+0x2c>)
   1fc58:	0004      	movs	r4, r0
   1fc5a:	4798      	blx	r3
   1fc5c:	4b09      	ldr	r3, [pc, #36]	; (1fc84 <system_gclk_chan_enable+0x30>)
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
   1fc5e:	2280      	movs	r2, #128	; 0x80
   1fc60:	469c      	mov	ip, r3
   1fc62:	2140      	movs	r1, #64	; 0x40
   1fc64:	00a0      	lsls	r0, r4, #2
   1fc66:	4460      	add	r0, ip
   1fc68:	5883      	ldr	r3, [r0, r2]
   1fc6a:	430b      	orrs	r3, r1
   1fc6c:	5083      	str	r3, [r0, r2]
	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
   1fc6e:	3140      	adds	r1, #64	; 0x40
   1fc70:	3a40      	subs	r2, #64	; 0x40
   1fc72:	5843      	ldr	r3, [r0, r1]
   1fc74:	421a      	tst	r2, r3
   1fc76:	d0fc      	beq.n	1fc72 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
   1fc78:	4b03      	ldr	r3, [pc, #12]	; (1fc88 <system_gclk_chan_enable+0x34>)
   1fc7a:	4798      	blx	r3
}
   1fc7c:	bd10      	pop	{r4, pc}
   1fc7e:	46c0      	nop			; (mov r8, r8)
   1fc80:	0000798d 	.word	0x0000798d
   1fc84:	40001800 	.word	0x40001800
   1fc88:	000079c9 	.word	0x000079c9

0001fc8c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1fc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc8e:	46c6      	mov	lr, r8
   1fc90:	0004      	movs	r4, r0
   1fc92:	b500      	push	{lr}
	cpu_irq_enter_critical();
   1fc94:	4e18      	ldr	r6, [pc, #96]	; (1fcf8 <system_gclk_chan_get_hz+0x6c>)
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
   1fc96:	4d19      	ldr	r5, [pc, #100]	; (1fcfc <system_gclk_chan_get_hz+0x70>)
   1fc98:	3420      	adds	r4, #32
   1fc9a:	47b0      	blx	r6
   1fc9c:	00a4      	lsls	r4, r4, #2
	cpu_irq_leave_critical();
   1fc9e:	4f18      	ldr	r7, [pc, #96]	; (1fd00 <system_gclk_chan_get_hz+0x74>)
   1fca0:	5964      	ldr	r4, [r4, r5]
   1fca2:	47b8      	blx	r7
   1fca4:	2204      	movs	r2, #4
   1fca6:	0724      	lsls	r4, r4, #28
   1fca8:	0f24      	lsrs	r4, r4, #28
   1fcaa:	40a2      	lsls	r2, r4
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   1fcac:	4915      	ldr	r1, [pc, #84]	; (1fd04 <system_gclk_chan_get_hz+0x78>)
   1fcae:	686b      	ldr	r3, [r5, #4]
   1fcb0:	400b      	ands	r3, r1
   1fcb2:	421a      	tst	r2, r3
   1fcb4:	d1fb      	bne.n	1fcae <system_gclk_chan_get_hz+0x22>
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   1fcb6:	3408      	adds	r4, #8
   1fcb8:	00a4      	lsls	r4, r4, #2
	cpu_irq_enter_critical();
   1fcba:	47b0      	blx	r6
   1fcbc:	5960      	ldr	r0, [r4, r5]
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1fcbe:	4b12      	ldr	r3, [pc, #72]	; (1fd08 <system_gclk_chan_get_hz+0x7c>)
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   1fcc0:	0700      	lsls	r0, r0, #28
   1fcc2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1fcc4:	4798      	blx	r3
	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   1fcc6:	5966      	ldr	r6, [r4, r5]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   1fcc8:	5964      	ldr	r4, [r4, r5]
	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   1fcca:	04f6      	lsls	r6, r6, #19
   1fccc:	0ff6      	lsrs	r6, r6, #31
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1fcce:	4680      	mov	r8, r0
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   1fcd0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   1fcd2:	47b8      	blx	r7
	if (!divsel && divider > 1) {
   1fcd4:	2e00      	cmp	r6, #0
   1fcd6:	d007      	beq.n	1fce8 <system_gclk_chan_get_hz+0x5c>
		gen_input_hz >>= (divider+1);
   1fcd8:	4643      	mov	r3, r8
   1fcda:	3401      	adds	r4, #1
   1fcdc:	40e3      	lsrs	r3, r4
   1fcde:	4698      	mov	r8, r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
}
   1fce0:	4640      	mov	r0, r8
   1fce2:	bc04      	pop	{r2}
   1fce4:	4690      	mov	r8, r2
   1fce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!divsel && divider > 1) {
   1fce8:	2c01      	cmp	r4, #1
   1fcea:	d9f9      	bls.n	1fce0 <system_gclk_chan_get_hz+0x54>
		gen_input_hz /= divider;
   1fcec:	4640      	mov	r0, r8
   1fcee:	0021      	movs	r1, r4
   1fcf0:	4b06      	ldr	r3, [pc, #24]	; (1fd0c <system_gclk_chan_get_hz+0x80>)
   1fcf2:	4798      	blx	r3
   1fcf4:	4680      	mov	r8, r0
   1fcf6:	e7f3      	b.n	1fce0 <system_gclk_chan_get_hz+0x54>
   1fcf8:	0000798d 	.word	0x0000798d
   1fcfc:	40001800 	.word	0x40001800
   1fd00:	000079c9 	.word	0x000079c9
   1fd04:	000007fc 	.word	0x000007fc
   1fd08:	0001f55d 	.word	0x0001f55d
   1fd0c:	0002593d 	.word	0x0002593d

0001fd10 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   1fd10:	b570      	push	{r4, r5, r6, lr}
	if (port_index < PORT_INST_NUM) {
   1fd12:	09c2      	lsrs	r2, r0, #7
		return NULL;
   1fd14:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1fd16:	2a00      	cmp	r2, #0
   1fd18:	d104      	bne.n	1fd24 <system_pinmux_pin_set_config+0x14>
		return &(ports[port_index]->Group[group_index]);
   1fd1a:	4a2f      	ldr	r2, [pc, #188]	; (1fdd8 <system_pinmux_pin_set_config+0xc8>)
   1fd1c:	0943      	lsrs	r3, r0, #5
   1fd1e:	4694      	mov	ip, r2
   1fd20:	01db      	lsls	r3, r3, #7
   1fd22:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1fd24:	221f      	movs	r2, #31
   1fd26:	4010      	ands	r0, r2
   1fd28:	3a1e      	subs	r2, #30
   1fd2a:	4082      	lsls	r2, r0
	if (!config->powersave) {
   1fd2c:	78c8      	ldrb	r0, [r1, #3]
   1fd2e:	2800      	cmp	r0, #0
   1fd30:	d131      	bne.n	1fd96 <system_pinmux_pin_set_config+0x86>
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1fd32:	7808      	ldrb	r0, [r1, #0]
   1fd34:	2880      	cmp	r0, #128	; 0x80
   1fd36:	d047      	beq.n	1fdc8 <system_pinmux_pin_set_config+0xb8>
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1fd38:	2480      	movs	r4, #128	; 0x80
   1fd3a:	0600      	lsls	r0, r0, #24
   1fd3c:	0264      	lsls	r4, r4, #9
   1fd3e:	4320      	orrs	r0, r4
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1fd40:	784c      	ldrb	r4, [r1, #1]
   1fd42:	2502      	movs	r5, #2
   1fd44:	0026      	movs	r6, r4
   1fd46:	43ae      	bics	r6, r5
   1fd48:	d107      	bne.n	1fd5a <system_pinmux_pin_set_config+0x4a>
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1fd4a:	788c      	ldrb	r4, [r1, #2]
   1fd4c:	2c00      	cmp	r4, #0
   1fd4e:	d137      	bne.n	1fdc0 <system_pinmux_pin_set_config+0xb0>
			pin_cfg |= PORT_WRCONFIG_INEN;
   1fd50:	2480      	movs	r4, #128	; 0x80
   1fd52:	02a4      	lsls	r4, r4, #10
   1fd54:	4320      	orrs	r0, r4
			port->DIRCLR.reg = pin_mask;
   1fd56:	605a      	str	r2, [r3, #4]
   1fd58:	784c      	ldrb	r4, [r1, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1fd5a:	3c01      	subs	r4, #1
   1fd5c:	2c01      	cmp	r4, #1
   1fd5e:	d935      	bls.n	1fdcc <system_pinmux_pin_set_config+0xbc>
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1fd60:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1fd62:	0415      	lsls	r5, r2, #16
   1fd64:	0c2d      	lsrs	r5, r5, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1fd66:	05e4      	lsls	r4, r4, #23
   1fd68:	432c      	orrs	r4, r5
   1fd6a:	4304      	orrs	r4, r0
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1fd6c:	629c      	str	r4, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1fd6e:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1fd70:	0c15      	lsrs	r5, r2, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1fd72:	0624      	lsls	r4, r4, #24
   1fd74:	432c      	orrs	r4, r5
   1fd76:	4304      	orrs	r4, r0
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1fd78:	629c      	str	r4, [r3, #40]	; 0x28
	if(!config->powersave) {
   1fd7a:	78cc      	ldrb	r4, [r1, #3]
   1fd7c:	2c00      	cmp	r4, #0
   1fd7e:	d109      	bne.n	1fd94 <system_pinmux_pin_set_config+0x84>
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1fd80:	0340      	lsls	r0, r0, #13
   1fd82:	d503      	bpl.n	1fd8c <system_pinmux_pin_set_config+0x7c>
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1fd84:	7888      	ldrb	r0, [r1, #2]
   1fd86:	2801      	cmp	r0, #1
   1fd88:	d023      	beq.n	1fdd2 <system_pinmux_pin_set_config+0xc2>
				port->OUTCLR.reg = pin_mask;
   1fd8a:	615a      	str	r2, [r3, #20]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1fd8c:	7849      	ldrb	r1, [r1, #1]
   1fd8e:	3901      	subs	r1, #1
   1fd90:	2901      	cmp	r1, #1
   1fd92:	d913      	bls.n	1fdbc <system_pinmux_pin_set_config+0xac>

	_system_pinmux_config(port, pin_mask, config);
}
   1fd94:	bd70      	pop	{r4, r5, r6, pc}
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1fd96:	20a0      	movs	r0, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1fd98:	0414      	lsls	r4, r2, #16
   1fd9a:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1fd9c:	05c0      	lsls	r0, r0, #23
   1fd9e:	4320      	orrs	r0, r4
		port->DIRCLR.reg = pin_mask;
   1fda0:	605a      	str	r2, [r3, #4]
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1fda2:	6298      	str	r0, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1fda4:	20d0      	movs	r0, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1fda6:	0c14      	lsrs	r4, r2, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1fda8:	0600      	lsls	r0, r0, #24
   1fdaa:	4320      	orrs	r0, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1fdac:	6298      	str	r0, [r3, #40]	; 0x28
	if(!config->powersave) {
   1fdae:	78c8      	ldrb	r0, [r1, #3]
   1fdb0:	2800      	cmp	r0, #0
   1fdb2:	d1ef      	bne.n	1fd94 <system_pinmux_pin_set_config+0x84>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1fdb4:	7849      	ldrb	r1, [r1, #1]
   1fdb6:	3901      	subs	r1, #1
   1fdb8:	2901      	cmp	r1, #1
   1fdba:	d8eb      	bhi.n	1fd94 <system_pinmux_pin_set_config+0x84>
			port->DIRSET.reg = pin_mask;
   1fdbc:	609a      	str	r2, [r3, #8]
}
   1fdbe:	e7e9      	b.n	1fd94 <system_pinmux_pin_set_config+0x84>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1fdc0:	24c0      	movs	r4, #192	; 0xc0
   1fdc2:	02e4      	lsls	r4, r4, #11
   1fdc4:	4320      	orrs	r0, r4
   1fdc6:	e7c6      	b.n	1fd56 <system_pinmux_pin_set_config+0x46>
	uint32_t pin_cfg = 0;
   1fdc8:	2000      	movs	r0, #0
   1fdca:	e7b9      	b.n	1fd40 <system_pinmux_pin_set_config+0x30>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1fdcc:	4c03      	ldr	r4, [pc, #12]	; (1fddc <system_pinmux_pin_set_config+0xcc>)
   1fdce:	4020      	ands	r0, r4
   1fdd0:	e7c6      	b.n	1fd60 <system_pinmux_pin_set_config+0x50>
				port->OUTSET.reg = pin_mask;
   1fdd2:	619a      	str	r2, [r3, #24]
   1fdd4:	e7da      	b.n	1fd8c <system_pinmux_pin_set_config+0x7c>
   1fdd6:	46c0      	nop			; (mov r8, r8)
   1fdd8:	40002800 	.word	0x40002800
   1fddc:	fffbffff 	.word	0xfffbffff

0001fde0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   1fde0:	4770      	bx	lr
   1fde2:	46c0      	nop			; (mov r8, r8)

0001fde4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1fde4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1fde6:	4b05      	ldr	r3, [pc, #20]	; (1fdfc <system_init+0x18>)
   1fde8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1fdea:	4b05      	ldr	r3, [pc, #20]	; (1fe00 <system_init+0x1c>)
   1fdec:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1fdee:	4b05      	ldr	r3, [pc, #20]	; (1fe04 <system_init+0x20>)
   1fdf0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1fdf2:	4b05      	ldr	r3, [pc, #20]	; (1fe08 <system_init+0x24>)
   1fdf4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1fdf6:	4b05      	ldr	r3, [pc, #20]	; (1fe0c <system_init+0x28>)
   1fdf8:	4798      	blx	r3
}
   1fdfa:	bd10      	pop	{r4, pc}
   1fdfc:	0001f8bd 	.word	0x0001f8bd
   1fe00:	00006115 	.word	0x00006115
   1fe04:	0001fde1 	.word	0x0001fde1
   1fe08:	0001843d 	.word	0x0001843d
   1fe0c:	0001fde1 	.word	0x0001fde1

0001fe10 <fn_disp_loop_report>:
	}
		
	glcd_write();
}

void fn_disp_loop_report(void){
   1fe10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe12:	46c6      	mov	lr, r8
   1fe14:	b500      	push	{lr}
	char unit_str[4];
	//float total_error;
	
	if (options.current_unit_dist == feet){
   1fe16:	4b39      	ldr	r3, [pc, #228]	; (1fefc <fn_disp_loop_report+0xec>)
void fn_disp_loop_report(void){
   1fe18:	b084      	sub	sp, #16
	if (options.current_unit_dist == feet){
   1fe1a:	7a1b      	ldrb	r3, [r3, #8]
   1fe1c:	2b00      	cmp	r3, #0
   1fe1e:	d064      	beq.n	1feea <fn_disp_loop_report+0xda>
		strcpy(unit_str,"ft");
		}else{
		strcpy(unit_str,"m");
   1fe20:	ab03      	add	r3, sp, #12
   1fe22:	4698      	mov	r8, r3
   1fe24:	236d      	movs	r3, #109	; 0x6d
   1fe26:	4642      	mov	r2, r8
   1fe28:	8013      	strh	r3, [r2, #0]
	}
	
	
	glcd_clear_buffer();
   1fe2a:	4b35      	ldr	r3, [pc, #212]	; (1ff00 <fn_disp_loop_report+0xf0>)
   1fe2c:	4798      	blx	r3
	sprintf(display_str, "Loop Test Report:");
   1fe2e:	4c35      	ldr	r4, [pc, #212]	; (1ff04 <fn_disp_loop_report+0xf4>)
   1fe30:	4b35      	ldr	r3, [pc, #212]	; (1ff08 <fn_disp_loop_report+0xf8>)
   1fe32:	2212      	movs	r2, #18
   1fe34:	4935      	ldr	r1, [pc, #212]	; (1ff0c <fn_disp_loop_report+0xfc>)
   1fe36:	0020      	movs	r0, r4
   1fe38:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1fe3a:	4d35      	ldr	r5, [pc, #212]	; (1ff10 <fn_disp_loop_report+0x100>)
   1fe3c:	0022      	movs	r2, r4
   1fe3e:	2100      	movs	r1, #0
   1fe40:	2000      	movs	r0, #0
   1fe42:	47a8      	blx	r5
	
	sprintf(display_str,"Segments: %d",nPoints);
   1fe44:	4b33      	ldr	r3, [pc, #204]	; (1ff14 <fn_disp_loop_report+0x104>)
   1fe46:	4e34      	ldr	r6, [pc, #208]	; (1ff18 <fn_disp_loop_report+0x108>)
   1fe48:	681a      	ldr	r2, [r3, #0]
   1fe4a:	4934      	ldr	r1, [pc, #208]	; (1ff1c <fn_disp_loop_report+0x10c>)
   1fe4c:	0020      	movs	r0, r4
   1fe4e:	47b0      	blx	r6
	glcd_tiny_draw_string(0,1,display_str);
   1fe50:	0022      	movs	r2, r4
   1fe52:	2101      	movs	r1, #1
   1fe54:	2000      	movs	r0, #0
   1fe56:	47a8      	blx	r5
	
	sprintf(display_str,"Total Length: %.1f %s", loop_distance, unit_str);
   1fe58:	4b31      	ldr	r3, [pc, #196]	; (1ff20 <fn_disp_loop_report+0x110>)
   1fe5a:	4f32      	ldr	r7, [pc, #200]	; (1ff24 <fn_disp_loop_report+0x114>)
   1fe5c:	6818      	ldr	r0, [r3, #0]
   1fe5e:	47b8      	blx	r7
   1fe60:	000b      	movs	r3, r1
   1fe62:	4641      	mov	r1, r8
   1fe64:	0002      	movs	r2, r0
   1fe66:	9100      	str	r1, [sp, #0]
   1fe68:	0020      	movs	r0, r4
   1fe6a:	492f      	ldr	r1, [pc, #188]	; (1ff28 <fn_disp_loop_report+0x118>)
   1fe6c:	47b0      	blx	r6
	glcd_tiny_draw_string(0,2,display_str);
   1fe6e:	0022      	movs	r2, r4
   1fe70:	2102      	movs	r1, #2
   1fe72:	2000      	movs	r0, #0
   1fe74:	47a8      	blx	r5
	
	sprintf(display_str,"Horz Err: %.3f %s", loop_horizontal, unit_str);
   1fe76:	4b2d      	ldr	r3, [pc, #180]	; (1ff2c <fn_disp_loop_report+0x11c>)
   1fe78:	6818      	ldr	r0, [r3, #0]
   1fe7a:	47b8      	blx	r7
   1fe7c:	000b      	movs	r3, r1
   1fe7e:	4641      	mov	r1, r8
   1fe80:	0002      	movs	r2, r0
   1fe82:	9100      	str	r1, [sp, #0]
   1fe84:	0020      	movs	r0, r4
   1fe86:	492a      	ldr	r1, [pc, #168]	; (1ff30 <fn_disp_loop_report+0x120>)
   1fe88:	47b0      	blx	r6
	glcd_tiny_draw_string(0,3,display_str);
   1fe8a:	0022      	movs	r2, r4
   1fe8c:	2103      	movs	r1, #3
   1fe8e:	2000      	movs	r0, #0
   1fe90:	47a8      	blx	r5
	
	sprintf(display_str,"Vert Err: %.3f %s", loop_vertical, unit_str);
   1fe92:	4b28      	ldr	r3, [pc, #160]	; (1ff34 <fn_disp_loop_report+0x124>)
   1fe94:	6818      	ldr	r0, [r3, #0]
   1fe96:	47b8      	blx	r7
   1fe98:	000b      	movs	r3, r1
   1fe9a:	4641      	mov	r1, r8
   1fe9c:	0002      	movs	r2, r0
   1fe9e:	9100      	str	r1, [sp, #0]
   1fea0:	0020      	movs	r0, r4
   1fea2:	4925      	ldr	r1, [pc, #148]	; (1ff38 <fn_disp_loop_report+0x128>)
   1fea4:	47b0      	blx	r6
	glcd_tiny_draw_string(0,4,display_str);
   1fea6:	0022      	movs	r2, r4
   1fea8:	2104      	movs	r1, #4
   1feaa:	2000      	movs	r0, #0
   1feac:	47a8      	blx	r5
	
	sprintf(display_str,"  Azim Err: %.1f deg", loop_azimuth);
   1feae:	4b23      	ldr	r3, [pc, #140]	; (1ff3c <fn_disp_loop_report+0x12c>)
   1feb0:	6818      	ldr	r0, [r3, #0]
   1feb2:	47b8      	blx	r7
   1feb4:	000b      	movs	r3, r1
   1feb6:	0002      	movs	r2, r0
   1feb8:	4921      	ldr	r1, [pc, #132]	; (1ff40 <fn_disp_loop_report+0x130>)
   1feba:	0020      	movs	r0, r4
   1febc:	47b0      	blx	r6
	glcd_tiny_draw_string(0,5,display_str);
   1febe:	0022      	movs	r2, r4
   1fec0:	2105      	movs	r1, #5
   1fec2:	2000      	movs	r0, #0
   1fec4:	47a8      	blx	r5
	
	sprintf(display_str,"Loop Err: %.3f%% ", loop_error);
   1fec6:	4b1f      	ldr	r3, [pc, #124]	; (1ff44 <fn_disp_loop_report+0x134>)
   1fec8:	6818      	ldr	r0, [r3, #0]
   1feca:	47b8      	blx	r7
   1fecc:	000b      	movs	r3, r1
   1fece:	0002      	movs	r2, r0
   1fed0:	491d      	ldr	r1, [pc, #116]	; (1ff48 <fn_disp_loop_report+0x138>)
   1fed2:	0020      	movs	r0, r4
   1fed4:	47b0      	blx	r6
	glcd_tiny_draw_string(0,5,display_str);
   1fed6:	0022      	movs	r2, r4
   1fed8:	2105      	movs	r1, #5
   1feda:	2000      	movs	r0, #0
   1fedc:	47a8      	blx	r5
	
	
	
	glcd_write();
   1fede:	4b1b      	ldr	r3, [pc, #108]	; (1ff4c <fn_disp_loop_report+0x13c>)
   1fee0:	4798      	blx	r3
	
}
   1fee2:	b004      	add	sp, #16
   1fee4:	bc04      	pop	{r2}
   1fee6:	4690      	mov	r8, r2
   1fee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(unit_str,"ft");
   1feea:	ab03      	add	r3, sp, #12
   1feec:	4698      	mov	r8, r3
   1feee:	4641      	mov	r1, r8
   1fef0:	4b17      	ldr	r3, [pc, #92]	; (1ff50 <fn_disp_loop_report+0x140>)
   1fef2:	881a      	ldrh	r2, [r3, #0]
   1fef4:	800a      	strh	r2, [r1, #0]
   1fef6:	789b      	ldrb	r3, [r3, #2]
   1fef8:	708b      	strb	r3, [r1, #2]
   1fefa:	e796      	b.n	1fe2a <fn_disp_loop_report+0x1a>
   1fefc:	20002d20 	.word	0x20002d20
   1ff00:	0001ca59 	.word	0x0001ca59
   1ff04:	20002da0 	.word	0x20002da0
   1ff08:	00028999 	.word	0x00028999
   1ff0c:	0002f07c 	.word	0x0002f07c
   1ff10:	0001e2f5 	.word	0x0001e2f5
   1ff14:	20002d38 	.word	0x20002d38
   1ff18:	00028ab1 	.word	0x00028ab1
   1ff1c:	0002f090 	.word	0x0002f090
   1ff20:	20002d18 	.word	0x20002d18
   1ff24:	0002878d 	.word	0x0002878d
   1ff28:	0002f0a0 	.word	0x0002f0a0
   1ff2c:	20003cc4 	.word	0x20003cc4
   1ff30:	0002f0b8 	.word	0x0002f0b8
   1ff34:	20002d0c 	.word	0x20002d0c
   1ff38:	0002f0cc 	.word	0x0002f0cc
   1ff3c:	200052e4 	.word	0x200052e4
   1ff40:	0002f0e0 	.word	0x0002f0e0
   1ff44:	200051c4 	.word	0x200051c4
   1ff48:	0002f0f8 	.word	0x0002f0f8
   1ff4c:	0001db91 	.word	0x0001db91
   1ff50:	0002f078 	.word	0x0002f078

0001ff54 <fn_scan>:
void fn_scan(void){
   1ff54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff56:	46d6      	mov	lr, sl
   1ff58:	464f      	mov	r7, r9
   1ff5a:	4646      	mov	r6, r8
   1ff5c:	b5c0      	push	{r6, r7, lr}
	if (state_change){
   1ff5e:	4b33      	ldr	r3, [pc, #204]	; (2002c <fn_scan+0xd8>)
void fn_scan(void){
   1ff60:	b0aa      	sub	sp, #168	; 0xa8
	if (state_change){
   1ff62:	781b      	ldrb	r3, [r3, #0]
   1ff64:	2b00      	cmp	r3, #0
   1ff66:	d13a      	bne.n	1ffde <fn_scan+0x8a>
   1ff68:	4b31      	ldr	r3, [pc, #196]	; (20030 <fn_scan+0xdc>)
   1ff6a:	4698      	mov	r8, r3
   1ff6c:	4b31      	ldr	r3, [pc, #196]	; (20034 <fn_scan+0xe0>)
   1ff6e:	4699      	mov	r9, r3
   1ff70:	4b31      	ldr	r3, [pc, #196]	; (20038 <fn_scan+0xe4>)
   1ff72:	469a      	mov	sl, r3
void fn_scan(void){
   1ff74:	2400      	movs	r4, #0
   1ff76:	4d31      	ldr	r5, [pc, #196]	; (2003c <fn_scan+0xe8>)
		full_measurement(&tempMeas, 0, measScan);
   1ff78:	4f31      	ldr	r7, [pc, #196]	; (20040 <fn_scan+0xec>)
		if (tempMeas.distRaw!=0){
   1ff7a:	4e32      	ldr	r6, [pc, #200]	; (20044 <fn_scan+0xf0>)
   1ff7c:	e009      	b.n	1ff92 <fn_scan+0x3e>
		full_measurement(&tempMeas, 0, measScan);
   1ff7e:	2201      	movs	r2, #1
   1ff80:	2100      	movs	r1, #0
   1ff82:	4668      	mov	r0, sp
   1ff84:	47b8      	blx	r7
		if (tempMeas.distRaw!=0){
   1ff86:	2100      	movs	r1, #0
   1ff88:	9810      	ldr	r0, [sp, #64]	; 0x40
   1ff8a:	47b0      	blx	r6
			dataRate++;
   1ff8c:	4243      	negs	r3, r0
   1ff8e:	4158      	adcs	r0, r3
   1ff90:	1824      	adds	r4, r4, r0
	while (current_input==input_none){
   1ff92:	682b      	ldr	r3, [r5, #0]
   1ff94:	2b06      	cmp	r3, #6
   1ff96:	d0f2      	beq.n	1ff7e <fn_scan+0x2a>
	sprintf(display_str,"Meas Rate: %d hz   ", dataRate);
   1ff98:	4b2b      	ldr	r3, [pc, #172]	; (20048 <fn_scan+0xf4>)
   1ff9a:	0022      	movs	r2, r4
   1ff9c:	492b      	ldr	r1, [pc, #172]	; (2004c <fn_scan+0xf8>)
   1ff9e:	4640      	mov	r0, r8
   1ffa0:	4798      	blx	r3
	glcd_tiny_draw_string(0, 7,display_str);
   1ffa2:	4642      	mov	r2, r8
   1ffa4:	2107      	movs	r1, #7
   1ffa6:	2000      	movs	r0, #0
   1ffa8:	47c8      	blx	r9
	glcd_write();
   1ffaa:	47d0      	blx	sl
	if((current_input!=input_none)&&
   1ffac:	682b      	ldr	r3, [r5, #0]
   1ffae:	2b06      	cmp	r3, #6
   1ffb0:	d00f      	beq.n	1ffd2 <fn_scan+0x7e>
	   (current_input!=input_1sec)&&
   1ffb2:	682b      	ldr	r3, [r5, #0]
	if((current_input!=input_none)&&
   1ffb4:	2b07      	cmp	r3, #7
   1ffb6:	d00c      	beq.n	1ffd2 <fn_scan+0x7e>
	   (current_input!=input_BLE_message)){
   1ffb8:	682b      	ldr	r3, [r5, #0]
	   (current_input!=input_1sec)&&
   1ffba:	2b08      	cmp	r3, #8
   1ffbc:	d009      	beq.n	1ffd2 <fn_scan+0x7e>
		rangefinder_on_off(false);
   1ffbe:	2000      	movs	r0, #0
   1ffc0:	4b23      	ldr	r3, [pc, #140]	; (20050 <fn_scan+0xfc>)
   1ffc2:	4798      	blx	r3
		rxBufferBleClear();
   1ffc4:	4b23      	ldr	r3, [pc, #140]	; (20054 <fn_scan+0x100>)
   1ffc6:	4798      	blx	r3
		current_state = st_main_display;
   1ffc8:	2202      	movs	r2, #2
   1ffca:	4b23      	ldr	r3, [pc, #140]	; (20058 <fn_scan+0x104>)
   1ffcc:	601a      	str	r2, [r3, #0]
		current_input= input_none;
   1ffce:	2306      	movs	r3, #6
   1ffd0:	602b      	str	r3, [r5, #0]
}
   1ffd2:	b02a      	add	sp, #168	; 0xa8
   1ffd4:	bc1c      	pop	{r2, r3, r4}
   1ffd6:	4690      	mov	r8, r2
   1ffd8:	4699      	mov	r9, r3
   1ffda:	46a2      	mov	sl, r4
   1ffdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		glcd_clear_buffer();
   1ffde:	4b1f      	ldr	r3, [pc, #124]	; (2005c <fn_scan+0x108>)
   1ffe0:	4798      	blx	r3
		sprintf(display_str,"Scan Mode:");
   1ffe2:	4b13      	ldr	r3, [pc, #76]	; (20030 <fn_scan+0xdc>)
   1ffe4:	220b      	movs	r2, #11
   1ffe6:	4698      	mov	r8, r3
   1ffe8:	491d      	ldr	r1, [pc, #116]	; (20060 <fn_scan+0x10c>)
   1ffea:	0018      	movs	r0, r3
   1ffec:	4b1d      	ldr	r3, [pc, #116]	; (20064 <fn_scan+0x110>)
   1ffee:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   1fff0:	4b10      	ldr	r3, [pc, #64]	; (20034 <fn_scan+0xe0>)
   1fff2:	4642      	mov	r2, r8
   1fff4:	2100      	movs	r1, #0
   1fff6:	2000      	movs	r0, #0
   1fff8:	4699      	mov	r9, r3
   1fffa:	4798      	blx	r3
		glcd_tiny_draw_string(0, 1,"Streaming Data ");
   1fffc:	4a1a      	ldr	r2, [pc, #104]	; (20068 <fn_scan+0x114>)
   1fffe:	2101      	movs	r1, #1
   20000:	2000      	movs	r0, #0
   20002:	47c8      	blx	r9
		glcd_tiny_draw_string(0, 2,"over BLE");
   20004:	4a19      	ldr	r2, [pc, #100]	; (2006c <fn_scan+0x118>)
   20006:	2102      	movs	r1, #2
   20008:	2000      	movs	r0, #0
   2000a:	47c8      	blx	r9
		glcd_tiny_draw_string(0, 4,"Connected to:");
   2000c:	4a18      	ldr	r2, [pc, #96]	; (20070 <fn_scan+0x11c>)
   2000e:	2104      	movs	r1, #4
   20010:	2000      	movs	r0, #0
   20012:	47c8      	blx	r9
		glcd_tiny_draw_string(10, 5,BleClientMAC);
   20014:	4a17      	ldr	r2, [pc, #92]	; (20074 <fn_scan+0x120>)
   20016:	2105      	movs	r1, #5
   20018:	200a      	movs	r0, #10
   2001a:	47c8      	blx	r9
		glcd_write();
   2001c:	4b06      	ldr	r3, [pc, #24]	; (20038 <fn_scan+0xe4>)
   2001e:	469a      	mov	sl, r3
   20020:	4798      	blx	r3
		laser_start_continuous();
   20022:	4b15      	ldr	r3, [pc, #84]	; (20078 <fn_scan+0x124>)
   20024:	4798      	blx	r3
		rxBufferLaserClear();
   20026:	4b15      	ldr	r3, [pc, #84]	; (2007c <fn_scan+0x128>)
   20028:	4798      	blx	r3
   2002a:	e7a3      	b.n	1ff74 <fn_scan+0x20>
   2002c:	20004370 	.word	0x20004370
   20030:	20002da0 	.word	0x20002da0
   20034:	0001e2f5 	.word	0x0001e2f5
   20038:	0001db91 	.word	0x0001db91
   2003c:	20003d24 	.word	0x20003d24
   20040:	00016539 	.word	0x00016539
   20044:	00025cbd 	.word	0x00025cbd
   20048:	00028ab1 	.word	0x00028ab1
   2004c:	0002f470 	.word	0x0002f470
   20050:	000160dd 	.word	0x000160dd
   20054:	0001c0ed 	.word	0x0001c0ed
   20058:	20002630 	.word	0x20002630
   2005c:	0001ca59 	.word	0x0001ca59
   20060:	0002f438 	.word	0x0002f438
   20064:	00028999 	.word	0x00028999
   20068:	0002f444 	.word	0x0002f444
   2006c:	0002f454 	.word	0x0002f454
   20070:	0002f460 	.word	0x0002f460
   20074:	20002ae4 	.word	0x20002ae4
   20078:	00015ee1 	.word	0x00015ee1
   2007c:	0001c389 	.word	0x0001c389

00020080 <fn_debug_charger>:
void fn_debug_charger(void){
   20080:	b5f0      	push	{r4, r5, r6, r7, lr}
   20082:	46de      	mov	lr, fp
   20084:	4657      	mov	r7, sl
   20086:	4645      	mov	r5, r8
   20088:	464e      	mov	r6, r9
	uint8_t addressList[] = {
   2008a:	2302      	movs	r3, #2
void fn_debug_charger(void){
   2008c:	b5e0      	push	{r5, r6, r7, lr}
   2008e:	b087      	sub	sp, #28
	uint8_t addressList[] = {
   20090:	ad01      	add	r5, sp, #4
   20092:	702b      	strb	r3, [r5, #0]
   20094:	3302      	adds	r3, #2
   20096:	706b      	strb	r3, [r5, #1]
   20098:	3302      	adds	r3, #2
   2009a:	70ab      	strb	r3, [r5, #2]
   2009c:	3301      	adds	r3, #1
   2009e:	70eb      	strb	r3, [r5, #3]
   200a0:	3304      	adds	r3, #4
   200a2:	712b      	strb	r3, [r5, #4]
   200a4:	3301      	adds	r3, #1
   200a6:	716b      	strb	r3, [r5, #5]
	if (state_change) {
   200a8:	4b19      	ldr	r3, [pc, #100]	; (20110 <fn_debug_charger+0x90>)
	for (i=0;i<sizeof(addressList);i++){
   200aa:	2400      	movs	r4, #0
	if (state_change) {
   200ac:	781b      	ldrb	r3, [r3, #0]
	glcd_clear_buffer();
   200ae:	4b19      	ldr	r3, [pc, #100]	; (20114 <fn_debug_charger+0x94>)
   200b0:	4798      	blx	r3
	sprintf(display_str,"Charger Debug:");
   200b2:	4f19      	ldr	r7, [pc, #100]	; (20118 <fn_debug_charger+0x98>)
   200b4:	220f      	movs	r2, #15
   200b6:	4919      	ldr	r1, [pc, #100]	; (2011c <fn_debug_charger+0x9c>)
   200b8:	4b19      	ldr	r3, [pc, #100]	; (20120 <fn_debug_charger+0xa0>)
   200ba:	0038      	movs	r0, r7
   200bc:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   200be:	4b19      	ldr	r3, [pc, #100]	; (20124 <fn_debug_charger+0xa4>)
   200c0:	003a      	movs	r2, r7
   200c2:	2100      	movs	r1, #0
   200c4:	2000      	movs	r0, #0
   200c6:	4698      	mov	r8, r3
   200c8:	4798      	blx	r3
   200ca:	4b17      	ldr	r3, [pc, #92]	; (20128 <fn_debug_charger+0xa8>)
   200cc:	469b      	mov	fp, r3
   200ce:	4b17      	ldr	r3, [pc, #92]	; (2012c <fn_debug_charger+0xac>)
   200d0:	469a      	mov	sl, r3
   200d2:	4b17      	ldr	r3, [pc, #92]	; (20130 <fn_debug_charger+0xb0>)
   200d4:	4699      	mov	r9, r3
		data = getChargerRegister(addressList[i]);
   200d6:	782e      	ldrb	r6, [r5, #0]
		glcd_tiny_draw_string(10, i+1, display_str);
   200d8:	3401      	adds	r4, #1
		data = getChargerRegister(addressList[i]);
   200da:	0030      	movs	r0, r6
   200dc:	47d8      	blx	fp
		bin2str(data, binStr);
   200de:	a903      	add	r1, sp, #12
   200e0:	47d0      	blx	sl
		glcd_tiny_draw_string(10, i+1, display_str);
   200e2:	b2e4      	uxtb	r4, r4
		sprintf(display_str, "Add:%02x = %s", 
   200e4:	0032      	movs	r2, r6
   200e6:	ab03      	add	r3, sp, #12
   200e8:	4649      	mov	r1, r9
   200ea:	0038      	movs	r0, r7
   200ec:	4e11      	ldr	r6, [pc, #68]	; (20134 <fn_debug_charger+0xb4>)
   200ee:	47b0      	blx	r6
		glcd_tiny_draw_string(10, i+1, display_str);
   200f0:	003a      	movs	r2, r7
   200f2:	0021      	movs	r1, r4
   200f4:	200a      	movs	r0, #10
   200f6:	47c0      	blx	r8
   200f8:	3501      	adds	r5, #1
	for (i=0;i<sizeof(addressList);i++){
   200fa:	2c06      	cmp	r4, #6
   200fc:	d1eb      	bne.n	200d6 <fn_debug_charger+0x56>
	glcd_write();
   200fe:	4b0e      	ldr	r3, [pc, #56]	; (20138 <fn_debug_charger+0xb8>)
   20100:	4798      	blx	r3
}
   20102:	b007      	add	sp, #28
   20104:	bc3c      	pop	{r2, r3, r4, r5}
   20106:	4690      	mov	r8, r2
   20108:	4699      	mov	r9, r3
   2010a:	46a2      	mov	sl, r4
   2010c:	46ab      	mov	fp, r5
   2010e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20110:	20004370 	.word	0x20004370
   20114:	0001ca59 	.word	0x0001ca59
   20118:	20002da0 	.word	0x20002da0
   2011c:	0002efbc 	.word	0x0002efbc
   20120:	00028999 	.word	0x00028999
   20124:	0001e2f5 	.word	0x0001e2f5
   20128:	0000ee39 	.word	0x0000ee39
   2012c:	0000ee55 	.word	0x0000ee55
   20130:	0002efcc 	.word	0x0002efcc
   20134:	00028ab1 	.word	0x00028ab1
   20138:	0001db91 	.word	0x0001db91

0002013c <fn_debug_rawData>:
void fn_debug_rawData(void){
   2013c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2013e:	46de      	mov	lr, fp
   20140:	4657      	mov	r7, sl
   20142:	464e      	mov	r6, r9
   20144:	4645      	mov	r5, r8
   20146:	b5e0      	push	{r5, r6, r7, lr}
   20148:	b0ad      	sub	sp, #180	; 0xb4
	quick_measurement( &meas_debug);	
   2014a:	a802      	add	r0, sp, #8
   2014c:	4b47      	ldr	r3, [pc, #284]	; (2026c <fn_debug_rawData+0x130>)
   2014e:	4798      	blx	r3
	glcd_clear_buffer();	
   20150:	4b47      	ldr	r3, [pc, #284]	; (20270 <fn_debug_rawData+0x134>)
   20152:	4798      	blx	r3
	sprintf(display_str, "Acc 1     Acc 2  Done");
   20154:	4c47      	ldr	r4, [pc, #284]	; (20274 <fn_debug_rawData+0x138>)
   20156:	2216      	movs	r2, #22
   20158:	4947      	ldr	r1, [pc, #284]	; (20278 <fn_debug_rawData+0x13c>)
   2015a:	0020      	movs	r0, r4
   2015c:	4b47      	ldr	r3, [pc, #284]	; (2027c <fn_debug_rawData+0x140>)
   2015e:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   20160:	4b47      	ldr	r3, [pc, #284]	; (20280 <fn_debug_rawData+0x144>)
   20162:	0022      	movs	r2, r4
   20164:	2100      	movs	r1, #0
   20166:	2000      	movs	r0, #0
   20168:	4698      	mov	r8, r3
   2016a:	4798      	blx	r3
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.a1Raw[0], meas_debug.a2Raw[0]);
   2016c:	4d45      	ldr	r5, [pc, #276]	; (20284 <fn_debug_rawData+0x148>)
   2016e:	9814      	ldr	r0, [sp, #80]	; 0x50
   20170:	47a8      	blx	r5
   20172:	4b45      	ldr	r3, [pc, #276]	; (20288 <fn_debug_rawData+0x14c>)
   20174:	0006      	movs	r6, r0
   20176:	9817      	ldr	r0, [sp, #92]	; 0x5c
   20178:	469a      	mov	sl, r3
   2017a:	000f      	movs	r7, r1
   2017c:	47a8      	blx	r5
   2017e:	003b      	movs	r3, r7
   20180:	9000      	str	r0, [sp, #0]
   20182:	9101      	str	r1, [sp, #4]
   20184:	0032      	movs	r2, r6
   20186:	4651      	mov	r1, sl
   20188:	4e40      	ldr	r6, [pc, #256]	; (2028c <fn_debug_rawData+0x150>)
   2018a:	0020      	movs	r0, r4
   2018c:	47b0      	blx	r6
	glcd_tiny_draw_string(0,1,display_str);
   2018e:	0022      	movs	r2, r4
   20190:	2101      	movs	r1, #1
   20192:	2000      	movs	r0, #0
   20194:	47c0      	blx	r8
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.a1Raw[1], meas_debug.a2Raw[1]);
   20196:	9815      	ldr	r0, [sp, #84]	; 0x54
   20198:	47a8      	blx	r5
   2019a:	4b3d      	ldr	r3, [pc, #244]	; (20290 <fn_debug_rawData+0x154>)
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.a1Raw[0], meas_debug.a2Raw[0]);
   2019c:	46b1      	mov	r9, r6
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.a1Raw[1], meas_debug.a2Raw[1]);
   2019e:	0006      	movs	r6, r0
   201a0:	9818      	ldr	r0, [sp, #96]	; 0x60
   201a2:	469b      	mov	fp, r3
   201a4:	000f      	movs	r7, r1
   201a6:	47a8      	blx	r5
   201a8:	003b      	movs	r3, r7
   201aa:	9000      	str	r0, [sp, #0]
   201ac:	9101      	str	r1, [sp, #4]
   201ae:	0032      	movs	r2, r6
   201b0:	4659      	mov	r1, fp
   201b2:	0020      	movs	r0, r4
   201b4:	47c8      	blx	r9
	glcd_tiny_draw_string(0,2,display_str);
   201b6:	0022      	movs	r2, r4
   201b8:	2102      	movs	r1, #2
   201ba:	2000      	movs	r0, #0
   201bc:	47c0      	blx	r8
	sprintf(display_str, "Z: %+0.3f %+0.3f", meas_debug.a1Raw[2], meas_debug.a2Raw[2]);
   201be:	9816      	ldr	r0, [sp, #88]	; 0x58
   201c0:	47a8      	blx	r5
   201c2:	0006      	movs	r6, r0
   201c4:	9819      	ldr	r0, [sp, #100]	; 0x64
   201c6:	000f      	movs	r7, r1
   201c8:	47a8      	blx	r5
   201ca:	003b      	movs	r3, r7
   201cc:	9000      	str	r0, [sp, #0]
   201ce:	9101      	str	r1, [sp, #4]
   201d0:	0032      	movs	r2, r6
   201d2:	4930      	ldr	r1, [pc, #192]	; (20294 <fn_debug_rawData+0x158>)
   201d4:	0020      	movs	r0, r4
   201d6:	47c8      	blx	r9
	glcd_tiny_draw_string(0,3,display_str);
   201d8:	0022      	movs	r2, r4
   201da:	2103      	movs	r1, #3
   201dc:	2000      	movs	r0, #0
   201de:	47c0      	blx	r8
	sprintf(display_str, "Comp 1    Comp 2  ");
   201e0:	4b26      	ldr	r3, [pc, #152]	; (2027c <fn_debug_rawData+0x140>)
   201e2:	2213      	movs	r2, #19
   201e4:	492c      	ldr	r1, [pc, #176]	; (20298 <fn_debug_rawData+0x15c>)
   201e6:	0020      	movs	r0, r4
   201e8:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   201ea:	0022      	movs	r2, r4
   201ec:	2104      	movs	r1, #4
   201ee:	2000      	movs	r0, #0
   201f0:	47c0      	blx	r8
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.m1Raw[0], meas_debug.m2Raw[0]);
   201f2:	981a      	ldr	r0, [sp, #104]	; 0x68
   201f4:	47a8      	blx	r5
   201f6:	0006      	movs	r6, r0
   201f8:	981d      	ldr	r0, [sp, #116]	; 0x74
   201fa:	000f      	movs	r7, r1
   201fc:	47a8      	blx	r5
   201fe:	003b      	movs	r3, r7
   20200:	9000      	str	r0, [sp, #0]
   20202:	9101      	str	r1, [sp, #4]
   20204:	0032      	movs	r2, r6
   20206:	4651      	mov	r1, sl
   20208:	0020      	movs	r0, r4
   2020a:	47c8      	blx	r9
	glcd_tiny_draw_string(0,5,display_str);
   2020c:	0022      	movs	r2, r4
   2020e:	2105      	movs	r1, #5
   20210:	2000      	movs	r0, #0
   20212:	47c0      	blx	r8
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.m1Raw[1], meas_debug.m2Raw[1]);
   20214:	981b      	ldr	r0, [sp, #108]	; 0x6c
   20216:	47a8      	blx	r5
   20218:	0006      	movs	r6, r0
   2021a:	981e      	ldr	r0, [sp, #120]	; 0x78
   2021c:	000f      	movs	r7, r1
   2021e:	47a8      	blx	r5
   20220:	003b      	movs	r3, r7
   20222:	9000      	str	r0, [sp, #0]
   20224:	9101      	str	r1, [sp, #4]
   20226:	0032      	movs	r2, r6
   20228:	4659      	mov	r1, fp
   2022a:	0020      	movs	r0, r4
   2022c:	47c8      	blx	r9
	glcd_tiny_draw_string(0,6,display_str);
   2022e:	0022      	movs	r2, r4
   20230:	2106      	movs	r1, #6
   20232:	2000      	movs	r0, #0
   20234:	47c0      	blx	r8
	sprintf(display_str, "Z: %+0.3f %+0.3f Exit", meas_debug.m1Raw[2], meas_debug.m2Raw[2]);
   20236:	981c      	ldr	r0, [sp, #112]	; 0x70
   20238:	47a8      	blx	r5
   2023a:	0006      	movs	r6, r0
   2023c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   2023e:	000f      	movs	r7, r1
   20240:	47a8      	blx	r5
   20242:	003b      	movs	r3, r7
   20244:	9000      	str	r0, [sp, #0]
   20246:	9101      	str	r1, [sp, #4]
   20248:	0032      	movs	r2, r6
   2024a:	4914      	ldr	r1, [pc, #80]	; (2029c <fn_debug_rawData+0x160>)
   2024c:	0020      	movs	r0, r4
   2024e:	47c8      	blx	r9
	glcd_tiny_draw_string(0,7,display_str);
   20250:	0022      	movs	r2, r4
   20252:	2107      	movs	r1, #7
   20254:	2000      	movs	r0, #0
   20256:	47c0      	blx	r8
	glcd_write();	
   20258:	4b11      	ldr	r3, [pc, #68]	; (202a0 <fn_debug_rawData+0x164>)
   2025a:	4798      	blx	r3
}
   2025c:	b02d      	add	sp, #180	; 0xb4
   2025e:	bc3c      	pop	{r2, r3, r4, r5}
   20260:	4690      	mov	r8, r2
   20262:	4699      	mov	r9, r3
   20264:	46a2      	mov	sl, r4
   20266:	46ab      	mov	fp, r5
   20268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2026a:	46c0      	nop			; (mov r8, r8)
   2026c:	00016491 	.word	0x00016491
   20270:	0001ca59 	.word	0x0001ca59
   20274:	20002da0 	.word	0x20002da0
   20278:	0002efdc 	.word	0x0002efdc
   2027c:	00028999 	.word	0x00028999
   20280:	0001e2f5 	.word	0x0001e2f5
   20284:	0002878d 	.word	0x0002878d
   20288:	0002eff4 	.word	0x0002eff4
   2028c:	00028ab1 	.word	0x00028ab1
   20290:	0002f008 	.word	0x0002f008
   20294:	0002f01c 	.word	0x0002f01c
   20298:	0002f030 	.word	0x0002f030
   2029c:	0002f044 	.word	0x0002f044
   202a0:	0001db91 	.word	0x0001db91

000202a4 <fn_process_azm_quick_cal>:
void fn_process_azm_quick_cal(void){
   202a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	EEPROM_loadCalRawData(azm_quick);
   202a6:	2001      	movs	r0, #1
   202a8:	4b16      	ldr	r3, [pc, #88]	; (20304 <fn_process_azm_quick_cal+0x60>)
   202aa:	4798      	blx	r3
	load_cal_report();
   202ac:	4b16      	ldr	r3, [pc, #88]	; (20308 <fn_process_azm_quick_cal+0x64>)
   202ae:	4798      	blx	r3
	nGroups = cal_report.groups;
   202b0:	4b16      	ldr	r3, [pc, #88]	; (2030c <fn_process_azm_quick_cal+0x68>)
   202b2:	4a17      	ldr	r2, [pc, #92]	; (20310 <fn_process_azm_quick_cal+0x6c>)
   202b4:	6859      	ldr	r1, [r3, #4]
   202b6:	6011      	str	r1, [r2, #0]
	nPoints = cal_report.points;
   202b8:	689a      	ldr	r2, [r3, #8]
   202ba:	4b16      	ldr	r3, [pc, #88]	; (20314 <fn_process_azm_quick_cal+0x70>)
   202bc:	601a      	str	r2, [r3, #0]
	glcd_clear_buffer();
   202be:	4b16      	ldr	r3, [pc, #88]	; (20318 <fn_process_azm_quick_cal+0x74>)
   202c0:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   202c2:	4c16      	ldr	r4, [pc, #88]	; (2031c <fn_process_azm_quick_cal+0x78>)
   202c4:	4f16      	ldr	r7, [pc, #88]	; (20320 <fn_process_azm_quick_cal+0x7c>)
   202c6:	2213      	movs	r2, #19
   202c8:	4916      	ldr	r1, [pc, #88]	; (20324 <fn_process_azm_quick_cal+0x80>)
   202ca:	0020      	movs	r0, r4
   202cc:	47b8      	blx	r7
	glcd_tiny_draw_string(0,1,display_str);
   202ce:	0022      	movs	r2, r4
   202d0:	2101      	movs	r1, #1
   202d2:	2000      	movs	r0, #0
   202d4:	4e14      	ldr	r6, [pc, #80]	; (20328 <fn_process_azm_quick_cal+0x84>)
   202d6:	47b0      	blx	r6
	glcd_write();
   202d8:	4d14      	ldr	r5, [pc, #80]	; (2032c <fn_process_azm_quick_cal+0x88>)
   202da:	47a8      	blx	r5
	cal_azm_quick_process();
   202dc:	4b14      	ldr	r3, [pc, #80]	; (20330 <fn_process_azm_quick_cal+0x8c>)
   202de:	4798      	blx	r3
	wdt_reset_count();
   202e0:	4b14      	ldr	r3, [pc, #80]	; (20334 <fn_process_azm_quick_cal+0x90>)
   202e2:	4798      	blx	r3
	sprintf(display_str, "Calibration Complete!");
   202e4:	2216      	movs	r2, #22
   202e6:	4914      	ldr	r1, [pc, #80]	; (20338 <fn_process_azm_quick_cal+0x94>)
   202e8:	0020      	movs	r0, r4
   202ea:	47b8      	blx	r7
	glcd_tiny_draw_string(0,3,display_str);
   202ec:	0022      	movs	r2, r4
   202ee:	2103      	movs	r1, #3
   202f0:	2000      	movs	r0, #0
   202f2:	47b0      	blx	r6
	glcd_write();
   202f4:	47a8      	blx	r5
	delay_s(3);
   202f6:	4811      	ldr	r0, [pc, #68]	; (2033c <fn_process_azm_quick_cal+0x98>)
   202f8:	4b11      	ldr	r3, [pc, #68]	; (20340 <fn_process_azm_quick_cal+0x9c>)
   202fa:	4798      	blx	r3
	current_state = st_disp_cal_report;
   202fc:	220f      	movs	r2, #15
   202fe:	4b11      	ldr	r3, [pc, #68]	; (20344 <fn_process_azm_quick_cal+0xa0>)
   20300:	601a      	str	r2, [r3, #0]
}
   20302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20304:	00010d81 	.word	0x00010d81
   20308:	00011531 	.word	0x00011531
   2030c:	20004870 	.word	0x20004870
   20310:	20003394 	.word	0x20003394
   20314:	20002d38 	.word	0x20002d38
   20318:	0001ca59 	.word	0x0001ca59
   2031c:	20002da0 	.word	0x20002da0
   20320:	00028999 	.word	0x00028999
   20324:	0002f374 	.word	0x0002f374
   20328:	0001e2f5 	.word	0x0001e2f5
   2032c:	0001db91 	.word	0x0001db91
   20330:	0001b665 	.word	0x0001b665
   20334:	00009c15 	.word	0x00009c15
   20338:	0002f388 	.word	0x0002f388
   2033c:	00000bb8 	.word	0x00000bb8
   20340:	0001f509 	.word	0x0001f509
   20344:	20002630 	.word	0x20002630

00020348 <fn_firmware>:
	}
	
		
}

void fn_firmware(void){
   20348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	if (state_change) {
   2034a:	4b27      	ldr	r3, [pc, #156]	; (203e8 <fn_firmware+0xa0>)
   2034c:	781b      	ldrb	r3, [r3, #0]
		
	}
	
	
	
	glcd_clear_buffer();
   2034e:	4b27      	ldr	r3, [pc, #156]	; (203ec <fn_firmware+0xa4>)
   20350:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Firmware:");
   20352:	4c27      	ldr	r4, [pc, #156]	; (203f0 <fn_firmware+0xa8>)
   20354:	220a      	movs	r2, #10
   20356:	4927      	ldr	r1, [pc, #156]	; (203f4 <fn_firmware+0xac>)
   20358:	0020      	movs	r0, r4
   2035a:	4e27      	ldr	r6, [pc, #156]	; (203f8 <fn_firmware+0xb0>)
   2035c:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   2035e:	0022      	movs	r2, r4
   20360:	2100      	movs	r1, #0
   20362:	2000      	movs	r0, #0
   20364:	4d25      	ldr	r5, [pc, #148]	; (203fc <fn_firmware+0xb4>)
   20366:	47a8      	blx	r5
	
	if(last_input==input_button1){
   20368:	4b25      	ldr	r3, [pc, #148]	; (20400 <fn_firmware+0xb8>)
   2036a:	681b      	ldr	r3, [r3, #0]
   2036c:	2b00      	cmp	r3, #0
   2036e:	d032      	beq.n	203d6 <fn_firmware+0x8e>
		NVIC_SystemReset();

	}
	
	// Display soft keys
	drawSoftKeys("Bootloader","","","Back");
   20370:	4924      	ldr	r1, [pc, #144]	; (20404 <fn_firmware+0xbc>)
   20372:	4b25      	ldr	r3, [pc, #148]	; (20408 <fn_firmware+0xc0>)
   20374:	000a      	movs	r2, r1
   20376:	4825      	ldr	r0, [pc, #148]	; (2040c <fn_firmware+0xc4>)
   20378:	4f25      	ldr	r7, [pc, #148]	; (20410 <fn_firmware+0xc8>)
   2037a:	47b8      	blx	r7
	
	
	sprintf(display_str,"Firmware Ver: %0.2f", SOFTWARE_VERSION);
   2037c:	4b25      	ldr	r3, [pc, #148]	; (20414 <fn_firmware+0xcc>)
   2037e:	4f26      	ldr	r7, [pc, #152]	; (20418 <fn_firmware+0xd0>)
   20380:	2200      	movs	r2, #0
   20382:	4926      	ldr	r1, [pc, #152]	; (2041c <fn_firmware+0xd4>)
   20384:	0020      	movs	r0, r4
   20386:	47b8      	blx	r7
	glcd_tiny_draw_string(0, 3,display_str);
   20388:	0022      	movs	r2, r4
   2038a:	2103      	movs	r1, #3
   2038c:	2000      	movs	r0, #0
   2038e:	47a8      	blx	r5
	
	sprintf(display_str,"Hardware Ver: %s", HARDWARE_VERSION);
   20390:	4a23      	ldr	r2, [pc, #140]	; (20420 <fn_firmware+0xd8>)
   20392:	4924      	ldr	r1, [pc, #144]	; (20424 <fn_firmware+0xdc>)
   20394:	0020      	movs	r0, r4
   20396:	47b8      	blx	r7
	glcd_tiny_draw_string(0, 4,display_str);
   20398:	0022      	movs	r2, r4
   2039a:	2104      	movs	r1, #4
   2039c:	2000      	movs	r0, #0
   2039e:	47a8      	blx	r5
	
	strcpy(display_str,"Press and hold");
   203a0:	220f      	movs	r2, #15
   203a2:	4921      	ldr	r1, [pc, #132]	; (20428 <fn_firmware+0xe0>)
   203a4:	0020      	movs	r0, r4
   203a6:	47b0      	blx	r6
	glcd_tiny_draw_string(0, 5,display_str);
   203a8:	0022      	movs	r2, r4
   203aa:	2105      	movs	r1, #5
   203ac:	2000      	movs	r0, #0
   203ae:	47a8      	blx	r5
	strcpy(display_str,"\"Bootloader\" for");
   203b0:	2211      	movs	r2, #17
   203b2:	491e      	ldr	r1, [pc, #120]	; (2042c <fn_firmware+0xe4>)
   203b4:	0020      	movs	r0, r4
   203b6:	47b0      	blx	r6
	glcd_tiny_draw_string(0, 6,display_str);
   203b8:	0022      	movs	r2, r4
   203ba:	2106      	movs	r1, #6
   203bc:	2000      	movs	r0, #0
   203be:	47a8      	blx	r5
	strcpy(display_str,"USB Bootloader");
   203c0:	220f      	movs	r2, #15
   203c2:	491b      	ldr	r1, [pc, #108]	; (20430 <fn_firmware+0xe8>)
   203c4:	0020      	movs	r0, r4
   203c6:	47b0      	blx	r6
	glcd_tiny_draw_string(0, 7,display_str);
   203c8:	0022      	movs	r2, r4
   203ca:	2107      	movs	r1, #7
   203cc:	2000      	movs	r0, #0
   203ce:	47a8      	blx	r5

	
	glcd_write();
   203d0:	4b18      	ldr	r3, [pc, #96]	; (20434 <fn_firmware+0xec>)
   203d2:	4798      	blx	r3
	
	
}
   203d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("dsb 0xF":::"memory");
   203d6:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
   203da:	4a17      	ldr	r2, [pc, #92]	; (20438 <fn_firmware+0xf0>)
   203dc:	4b17      	ldr	r3, [pc, #92]	; (2043c <fn_firmware+0xf4>)
   203de:	60da      	str	r2, [r3, #12]
   203e0:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   203e4:	46c0      	nop			; (mov r8, r8)
   203e6:	e7fd      	b.n	203e4 <fn_firmware+0x9c>
   203e8:	20004370 	.word	0x20004370
   203ec:	0001ca59 	.word	0x0001ca59
   203f0:	20002da0 	.word	0x20002da0
   203f4:	0002f1c8 	.word	0x0002f1c8
   203f8:	00028999 	.word	0x00028999
   203fc:	0001e2f5 	.word	0x0001e2f5
   20400:	200041d8 	.word	0x200041d8
   20404:	0002e36c 	.word	0x0002e36c
   20408:	0002f1d4 	.word	0x0002f1d4
   2040c:	0002f22c 	.word	0x0002f22c
   20410:	000104dd 	.word	0x000104dd
   20414:	40160000 	.word	0x40160000
   20418:	00028ab1 	.word	0x00028ab1
   2041c:	0002f1dc 	.word	0x0002f1dc
   20420:	0002f56c 	.word	0x0002f56c
   20424:	0002f1f0 	.word	0x0002f1f0
   20428:	0002f204 	.word	0x0002f204
   2042c:	0002f214 	.word	0x0002f214
   20430:	0002f228 	.word	0x0002f228
   20434:	0001db91 	.word	0x0001db91
   20438:	05fa0004 	.word	0x05fa0004
   2043c:	e000ed00 	.word	0xe000ed00

00020440 <fn_process_inc_azm_full_cal>:
void fn_process_inc_azm_full_cal(void){
   20440:	b5f0      	push	{r4, r5, r6, r7, lr}
   20442:	46de      	mov	lr, fp
   20444:	4657      	mov	r7, sl
   20446:	464e      	mov	r6, r9
   20448:	4645      	mov	r5, r8
   2044a:	b5e0      	push	{r5, r6, r7, lr}
	wdt_disable();
   2044c:	4b8c      	ldr	r3, [pc, #560]	; (20680 <fn_process_inc_azm_full_cal+0x240>)
void fn_process_inc_azm_full_cal(void){
   2044e:	b0c9      	sub	sp, #292	; 0x124
	wdt_disable();
   20450:	4798      	blx	r3
   20452:	af0f      	add	r7, sp, #60	; 0x3c
	load_cal_report();
   20454:	4b8b      	ldr	r3, [pc, #556]	; (20684 <fn_process_inc_azm_full_cal+0x244>)
   20456:	4798      	blx	r3
   20458:	ad08      	add	r5, sp, #32
   2045a:	4c8b      	ldr	r4, [pc, #556]	; (20688 <fn_process_inc_azm_full_cal+0x248>)
   2045c:	2219      	movs	r2, #25
   2045e:	2100      	movs	r1, #0
   20460:	0038      	movs	r0, r7
   20462:	47a0      	blx	r4
   20464:	2219      	movs	r2, #25
   20466:	2100      	movs	r1, #0
   20468:	0028      	movs	r0, r5
   2046a:	47a0      	blx	r4
   2046c:	2264      	movs	r2, #100	; 0x64
   2046e:	2100      	movs	r1, #0
   20470:	a816      	add	r0, sp, #88	; 0x58
   20472:	47a0      	blx	r4
   20474:	2264      	movs	r2, #100	; 0x64
   20476:	2100      	movs	r1, #0
   20478:	a82f      	add	r0, sp, #188	; 0xbc
   2047a:	47a0      	blx	r4
   2047c:	4e83      	ldr	r6, [pc, #524]	; (2068c <fn_process_inc_azm_full_cal+0x24c>)
   2047e:	2203      	movs	r2, #3
   20480:	2100      	movs	r1, #0
   20482:	0030      	movs	r0, r6
   20484:	47a0      	blx	r4
   20486:	1cf0      	adds	r0, r6, #3
   20488:	2203      	movs	r2, #3
   2048a:	2100      	movs	r1, #0
   2048c:	47a0      	blx	r4
   2048e:	0030      	movs	r0, r6
   20490:	220c      	movs	r2, #12
   20492:	2100      	movs	r1, #0
   20494:	3008      	adds	r0, #8
   20496:	47a0      	blx	r4
	glcd_clear_buffer();
   20498:	4b7d      	ldr	r3, [pc, #500]	; (20690 <fn_process_inc_azm_full_cal+0x250>)
   2049a:	4798      	blx	r3
   2049c:	2300      	movs	r3, #0
   2049e:	9304      	str	r3, [sp, #16]
   204a0:	4b7c      	ldr	r3, [pc, #496]	; (20694 <fn_process_inc_azm_full_cal+0x254>)
   204a2:	3e14      	subs	r6, #20
   204a4:	469a      	mov	sl, r3
   204a6:	9605      	str	r6, [sp, #20]
   204a8:	9602      	str	r6, [sp, #8]
		for (g=cal_report.groupsAll;g>=0;g--){	
   204aa:	9b02      	ldr	r3, [sp, #8]
   204ac:	68dc      	ldr	r4, [r3, #12]
   204ae:	2c00      	cmp	r4, #0
   204b0:	db57      	blt.n	20562 <fn_process_inc_azm_full_cal+0x122>
   204b2:	00a3      	lsls	r3, r4, #2
   204b4:	4698      	mov	r8, r3
   204b6:	4b78      	ldr	r3, [pc, #480]	; (20698 <fn_process_inc_azm_full_cal+0x258>)
   204b8:	9303      	str	r3, [sp, #12]
   204ba:	4b78      	ldr	r3, [pc, #480]	; (2069c <fn_process_inc_azm_full_cal+0x25c>)
   204bc:	469b      	mov	fp, r3
   204be:	4b78      	ldr	r3, [pc, #480]	; (206a0 <fn_process_inc_azm_full_cal+0x260>)
   204c0:	4699      	mov	r9, r3
			sprintf(display_str, "Processing Cal Data:");
   204c2:	2215      	movs	r2, #21
   204c4:	4977      	ldr	r1, [pc, #476]	; (206a4 <fn_process_inc_azm_full_cal+0x264>)
   204c6:	4878      	ldr	r0, [pc, #480]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   204c8:	47d0      	blx	sl
			glcd_tiny_draw_string(0,0,display_str);
   204ca:	4a77      	ldr	r2, [pc, #476]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   204cc:	2100      	movs	r1, #0
   204ce:	2000      	movs	r0, #0
   204d0:	4b76      	ldr	r3, [pc, #472]	; (206ac <fn_process_inc_azm_full_cal+0x26c>)
   204d2:	4798      	blx	r3
			sprintf(display_str, "Iteration %d of %d     ", g, cal_report.groupsAll);
   204d4:	9b02      	ldr	r3, [sp, #8]
   204d6:	0022      	movs	r2, r4
   204d8:	68db      	ldr	r3, [r3, #12]
   204da:	4975      	ldr	r1, [pc, #468]	; (206b0 <fn_process_inc_azm_full_cal+0x270>)
   204dc:	4872      	ldr	r0, [pc, #456]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   204de:	9e03      	ldr	r6, [sp, #12]
   204e0:	47b0      	blx	r6
			glcd_tiny_draw_string(0,2,display_str);
   204e2:	2102      	movs	r1, #2
   204e4:	4a70      	ldr	r2, [pc, #448]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   204e6:	2000      	movs	r0, #0
   204e8:	4b70      	ldr	r3, [pc, #448]	; (206ac <fn_process_inc_azm_full_cal+0x26c>)
   204ea:	4798      	blx	r3
			glcd_write();
   204ec:	4b71      	ldr	r3, [pc, #452]	; (206b4 <fn_process_inc_azm_full_cal+0x274>)
   204ee:	4798      	blx	r3
			EEPROM_loadCalRawData(inc_azm_full);
   204f0:	4b71      	ldr	r3, [pc, #452]	; (206b8 <fn_process_inc_azm_full_cal+0x278>)
   204f2:	2000      	movs	r0, #0
   204f4:	4798      	blx	r3
			for (k=1;k<=cal_report.groupsAll;k++){
   204f6:	9b02      	ldr	r3, [sp, #8]
   204f8:	68d9      	ldr	r1, [r3, #12]
   204fa:	2900      	cmp	r1, #0
   204fc:	d011      	beq.n	20522 <fn_process_inc_azm_full_cal+0xe2>
   204fe:	2301      	movs	r3, #1
   20500:	e004      	b.n	2050c <fn_process_inc_azm_full_cal+0xcc>
   20502:	2201      	movs	r2, #1
   20504:	54ea      	strb	r2, [r5, r3]
   20506:	3301      	adds	r3, #1
   20508:	428b      	cmp	r3, r1
   2050a:	d80a      	bhi.n	20522 <fn_process_inc_azm_full_cal+0xe2>
   2050c:	5cfa      	ldrb	r2, [r7, r3]
   2050e:	2a00      	cmp	r2, #0
   20510:	d1f7      	bne.n	20502 <fn_process_inc_azm_full_cal+0xc2>
				if (permGroupRemove[k]||(k==g)){
   20512:	1ae2      	subs	r2, r4, r3
   20514:	4256      	negs	r6, r2
   20516:	4156      	adcs	r6, r2
   20518:	1c32      	adds	r2, r6, #0
   2051a:	54ea      	strb	r2, [r5, r3]
			for (k=1;k<=cal_report.groupsAll;k++){
   2051c:	3301      	adds	r3, #1
   2051e:	428b      	cmp	r3, r1
   20520:	d9f4      	bls.n	2050c <fn_process_inc_azm_full_cal+0xcc>
			nGroups = cal_removeGroup(tempGroupRemove, cal_report.groupsAll);
   20522:	4b66      	ldr	r3, [pc, #408]	; (206bc <fn_process_inc_azm_full_cal+0x27c>)
   20524:	0028      	movs	r0, r5
   20526:	4798      	blx	r3
   20528:	465b      	mov	r3, fp
   2052a:	6018      	str	r0, [r3, #0]
			nPoints = nGroups*GROUP_SIZE;
   2052c:	464b      	mov	r3, r9
   2052e:	0080      	lsls	r0, r0, #2
   20530:	6018      	str	r0, [r3, #0]
			if (g==0){
   20532:	2c00      	cmp	r4, #0
   20534:	d100      	bne.n	20538 <fn_process_inc_azm_full_cal+0xf8>
   20536:	e09a      	b.n	2066e <fn_process_inc_azm_full_cal+0x22e>
			cal_full_inc_azm_process(iterations);
   20538:	2001      	movs	r0, #1
   2053a:	4b61      	ldr	r3, [pc, #388]	; (206c0 <fn_process_inc_azm_full_cal+0x280>)
   2053c:	4798      	blx	r3
			incErrArray[g] = cal_report.inc_angle_err;
   2053e:	2148      	movs	r1, #72	; 0x48
   20540:	4642      	mov	r2, r8
   20542:	9802      	ldr	r0, [sp, #8]
   20544:	ab04      	add	r3, sp, #16
   20546:	185b      	adds	r3, r3, r1
   20548:	6a81      	ldr	r1, [r0, #40]	; 0x28
   2054a:	5099      	str	r1, [r3, r2]
			azmErrArray[g] = cal_report.azm_angle_err;
   2054c:	21ac      	movs	r1, #172	; 0xac
   2054e:	ab04      	add	r3, sp, #16
   20550:	185b      	adds	r3, r3, r1
   20552:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   20554:	5099      	str	r1, [r3, r2]
   20556:	2304      	movs	r3, #4
   20558:	425b      	negs	r3, r3
   2055a:	469c      	mov	ip, r3
   2055c:	44e0      	add	r8, ip
		for (g=cal_report.groupsAll;g>=0;g--){	
   2055e:	3c01      	subs	r4, #1
   20560:	d2af      	bcs.n	204c2 <fn_process_inc_azm_full_cal+0x82>
		uint32_t badGroup = 0;
   20562:	2300      	movs	r3, #0
   20564:	9306      	str	r3, [sp, #24]
		float badGroupDelta = 0;
   20566:	2300      	movs	r3, #0
		badGroupSource = cal_findBadGroup(incErrArray, azmErrArray, &badGroup, &badGroupDelta);
   20568:	aa06      	add	r2, sp, #24
		float badGroupDelta = 0;
   2056a:	9307      	str	r3, [sp, #28]
		badGroupSource = cal_findBadGroup(incErrArray, azmErrArray, &badGroup, &badGroupDelta);
   2056c:	a92f      	add	r1, sp, #188	; 0xbc
   2056e:	ab07      	add	r3, sp, #28
   20570:	4c54      	ldr	r4, [pc, #336]	; (206c4 <fn_process_inc_azm_full_cal+0x284>)
   20572:	a816      	add	r0, sp, #88	; 0x58
   20574:	47a0      	blx	r4
		if (badGroupDelta>BAD_GROUP_THRESHOLD){
   20576:	9c07      	ldr	r4, [sp, #28]
   20578:	4b53      	ldr	r3, [pc, #332]	; (206c8 <fn_process_inc_azm_full_cal+0x288>)
		badGroupSource = cal_findBadGroup(incErrArray, azmErrArray, &badGroup, &badGroupDelta);
   2057a:	4680      	mov	r8, r0
		if (badGroupDelta>BAD_GROUP_THRESHOLD){
   2057c:	1c20      	adds	r0, r4, #0
   2057e:	4798      	blx	r3
   20580:	4a52      	ldr	r2, [pc, #328]	; (206cc <fn_process_inc_azm_full_cal+0x28c>)
   20582:	4b53      	ldr	r3, [pc, #332]	; (206d0 <fn_process_inc_azm_full_cal+0x290>)
   20584:	4e53      	ldr	r6, [pc, #332]	; (206d4 <fn_process_inc_azm_full_cal+0x294>)
   20586:	47b0      	blx	r6
   20588:	2800      	cmp	r0, #0
   2058a:	d04a      	beq.n	20622 <fn_process_inc_azm_full_cal+0x1e2>
			permGroupRemove[badGroup] = true;
   2058c:	2201      	movs	r2, #1
   2058e:	9b06      	ldr	r3, [sp, #24]
			cal_report.groupRemoved[iter] = badGroup;
   20590:	9e05      	ldr	r6, [sp, #20]
			permGroupRemove[badGroup] = true;
   20592:	54fa      	strb	r2, [r7, r3]
			cal_report.groupRemoved[iter] = badGroup;
   20594:	7533      	strb	r3, [r6, #20]
			cal_report.groupRemovedImprovement[iter] = badGroupDelta;
   20596:	9a02      	ldr	r2, [sp, #8]
			cal_report.groupRemovedSource[iter] = badGroupSource;
   20598:	4643      	mov	r3, r8
			cal_report.groupRemovedImprovement[iter] = badGroupDelta;
   2059a:	4694      	mov	ip, r2
			cal_report.groupRemovedSource[iter] = badGroupSource;
   2059c:	75f3      	strb	r3, [r6, #23]
			cal_report.groupRemovedImprovement[iter] = badGroupDelta;
   2059e:	9b04      	ldr	r3, [sp, #16]
			sprintf(display_str, "Detected Bad Group");
   205a0:	2213      	movs	r2, #19
			cal_report.groupRemovedImprovement[iter] = badGroupDelta;
   205a2:	4463      	add	r3, ip
   205a4:	61dc      	str	r4, [r3, #28]
			sprintf(display_str, "Detected Bad Group");
   205a6:	494c      	ldr	r1, [pc, #304]	; (206d8 <fn_process_inc_azm_full_cal+0x298>)
   205a8:	483f      	ldr	r0, [pc, #252]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   205aa:	47d0      	blx	sl
			glcd_tiny_draw_string(0,4,display_str);
   205ac:	4a3e      	ldr	r2, [pc, #248]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   205ae:	2104      	movs	r1, #4
   205b0:	2000      	movs	r0, #0
   205b2:	4c3e      	ldr	r4, [pc, #248]	; (206ac <fn_process_inc_azm_full_cal+0x26c>)
   205b4:	47a0      	blx	r4
			sprintf(display_str, "                     ");// Clear line
   205b6:	2216      	movs	r2, #22
   205b8:	4948      	ldr	r1, [pc, #288]	; (206dc <fn_process_inc_azm_full_cal+0x29c>)
   205ba:	483b      	ldr	r0, [pc, #236]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   205bc:	47d0      	blx	sl
			glcd_tiny_draw_string(0,5,display_str);
   205be:	4a3a      	ldr	r2, [pc, #232]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   205c0:	2105      	movs	r1, #5
   205c2:	2000      	movs	r0, #0
   205c4:	4c39      	ldr	r4, [pc, #228]	; (206ac <fn_process_inc_azm_full_cal+0x26c>)
   205c6:	47a0      	blx	r4
			sprintf(display_str, "GRP %d Error %0.3fdeg", badGroup, badGroupDelta);
   205c8:	4a3f      	ldr	r2, [pc, #252]	; (206c8 <fn_process_inc_azm_full_cal+0x288>)
   205ca:	9807      	ldr	r0, [sp, #28]
   205cc:	4790      	blx	r2
   205ce:	9c06      	ldr	r4, [sp, #24]
   205d0:	9000      	str	r0, [sp, #0]
   205d2:	9101      	str	r1, [sp, #4]
   205d4:	0022      	movs	r2, r4
   205d6:	4942      	ldr	r1, [pc, #264]	; (206e0 <fn_process_inc_azm_full_cal+0x2a0>)
   205d8:	4c2f      	ldr	r4, [pc, #188]	; (20698 <fn_process_inc_azm_full_cal+0x258>)
   205da:	4833      	ldr	r0, [pc, #204]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   205dc:	47a0      	blx	r4
			glcd_tiny_draw_string(0,5,display_str);
   205de:	4a32      	ldr	r2, [pc, #200]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   205e0:	2105      	movs	r1, #5
   205e2:	2000      	movs	r0, #0
   205e4:	4c31      	ldr	r4, [pc, #196]	; (206ac <fn_process_inc_azm_full_cal+0x26c>)
   205e6:	47a0      	blx	r4
			sprintf(display_str, "Group Removed, ");
   205e8:	2210      	movs	r2, #16
   205ea:	493e      	ldr	r1, [pc, #248]	; (206e4 <fn_process_inc_azm_full_cal+0x2a4>)
   205ec:	482e      	ldr	r0, [pc, #184]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   205ee:	47d0      	blx	sl
			glcd_tiny_draw_string(0,6,display_str);
   205f0:	4a2d      	ldr	r2, [pc, #180]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   205f2:	2106      	movs	r1, #6
   205f4:	2000      	movs	r0, #0
   205f6:	4c2d      	ldr	r4, [pc, #180]	; (206ac <fn_process_inc_azm_full_cal+0x26c>)
   205f8:	47a0      	blx	r4
			sprintf(display_str, "Restarting Analysis");
   205fa:	2214      	movs	r2, #20
   205fc:	493a      	ldr	r1, [pc, #232]	; (206e8 <fn_process_inc_azm_full_cal+0x2a8>)
   205fe:	482a      	ldr	r0, [pc, #168]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   20600:	47d0      	blx	sl
			glcd_tiny_draw_string(0,7,display_str);
   20602:	4a29      	ldr	r2, [pc, #164]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   20604:	2107      	movs	r1, #7
   20606:	2000      	movs	r0, #0
   20608:	4c28      	ldr	r4, [pc, #160]	; (206ac <fn_process_inc_azm_full_cal+0x26c>)
   2060a:	47a0      	blx	r4
			glcd_write();
   2060c:	4a29      	ldr	r2, [pc, #164]	; (206b4 <fn_process_inc_azm_full_cal+0x274>)
   2060e:	4790      	blx	r2
   20610:	0032      	movs	r2, r6
   20612:	9b04      	ldr	r3, [sp, #16]
   20614:	3201      	adds	r2, #1
   20616:	3304      	adds	r3, #4
   20618:	9205      	str	r2, [sp, #20]
   2061a:	9304      	str	r3, [sp, #16]
	for (iter=0;iter<MAX_BAD_GROUPS;iter++){
   2061c:	2b0c      	cmp	r3, #12
   2061e:	d000      	beq.n	20622 <fn_process_inc_azm_full_cal+0x1e2>
   20620:	e743      	b.n	204aa <fn_process_inc_azm_full_cal+0x6a>
	SD_save_raw_data(inc_azm_full);
   20622:	4b32      	ldr	r3, [pc, #200]	; (206ec <fn_process_inc_azm_full_cal+0x2ac>)
   20624:	2000      	movs	r0, #0
   20626:	4798      	blx	r3
	SD_write_report();
   20628:	4b31      	ldr	r3, [pc, #196]	; (206f0 <fn_process_inc_azm_full_cal+0x2b0>)
   2062a:	4798      	blx	r3
	SD_add_cal_history(inc_azm_full);
   2062c:	4b31      	ldr	r3, [pc, #196]	; (206f4 <fn_process_inc_azm_full_cal+0x2b4>)
   2062e:	2000      	movs	r0, #0
   20630:	4798      	blx	r3
	save_calibration();
   20632:	4b31      	ldr	r3, [pc, #196]	; (206f8 <fn_process_inc_azm_full_cal+0x2b8>)
   20634:	4798      	blx	r3
	glcd_clear_buffer();
   20636:	4b16      	ldr	r3, [pc, #88]	; (20690 <fn_process_inc_azm_full_cal+0x250>)
   20638:	4798      	blx	r3
	sprintf(display_str, "Calibration Complete!");
   2063a:	2216      	movs	r2, #22
   2063c:	492f      	ldr	r1, [pc, #188]	; (206fc <fn_process_inc_azm_full_cal+0x2bc>)
   2063e:	481a      	ldr	r0, [pc, #104]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   20640:	47d0      	blx	sl
	glcd_tiny_draw_string(0,2,display_str);
   20642:	4a19      	ldr	r2, [pc, #100]	; (206a8 <fn_process_inc_azm_full_cal+0x268>)
   20644:	2102      	movs	r1, #2
   20646:	2000      	movs	r0, #0
   20648:	4b18      	ldr	r3, [pc, #96]	; (206ac <fn_process_inc_azm_full_cal+0x26c>)
   2064a:	4798      	blx	r3
	glcd_write();
   2064c:	4b19      	ldr	r3, [pc, #100]	; (206b4 <fn_process_inc_azm_full_cal+0x274>)
   2064e:	4798      	blx	r3
	delay_s(3);
   20650:	482b      	ldr	r0, [pc, #172]	; (20700 <fn_process_inc_azm_full_cal+0x2c0>)
   20652:	4b2c      	ldr	r3, [pc, #176]	; (20704 <fn_process_inc_azm_full_cal+0x2c4>)
   20654:	4798      	blx	r3
	wdt_enable();
   20656:	4b2c      	ldr	r3, [pc, #176]	; (20708 <fn_process_inc_azm_full_cal+0x2c8>)
   20658:	4798      	blx	r3
	current_state = st_disp_cal_report;
   2065a:	220f      	movs	r2, #15
   2065c:	4b2b      	ldr	r3, [pc, #172]	; (2070c <fn_process_inc_azm_full_cal+0x2cc>)
   2065e:	601a      	str	r2, [r3, #0]
}
   20660:	b049      	add	sp, #292	; 0x124
   20662:	bc3c      	pop	{r2, r3, r4, r5}
   20664:	4690      	mov	r8, r2
   20666:	4699      	mov	r9, r3
   20668:	46a2      	mov	sl, r4
   2066a:	46ab      	mov	fp, r5
   2066c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cal_full_inc_azm_process(iterations);
   2066e:	4b14      	ldr	r3, [pc, #80]	; (206c0 <fn_process_inc_azm_full_cal+0x280>)
   20670:	2003      	movs	r0, #3
   20672:	4798      	blx	r3
			incErrArray[g] = cal_report.inc_angle_err;
   20674:	9a02      	ldr	r2, [sp, #8]
   20676:	6a93      	ldr	r3, [r2, #40]	; 0x28
   20678:	9316      	str	r3, [sp, #88]	; 0x58
			azmErrArray[g] = cal_report.azm_angle_err;
   2067a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2067c:	932f      	str	r3, [sp, #188]	; 0xbc
   2067e:	e770      	b.n	20562 <fn_process_inc_azm_full_cal+0x122>
   20680:	00016a19 	.word	0x00016a19
   20684:	00011531 	.word	0x00011531
   20688:	00028a1d 	.word	0x00028a1d
   2068c:	20004884 	.word	0x20004884
   20690:	0001ca59 	.word	0x0001ca59
   20694:	00028999 	.word	0x00028999
   20698:	00028ab1 	.word	0x00028ab1
   2069c:	20003394 	.word	0x20003394
   206a0:	20002d38 	.word	0x20002d38
   206a4:	0002f3a0 	.word	0x0002f3a0
   206a8:	20002da0 	.word	0x20002da0
   206ac:	0001e2f5 	.word	0x0001e2f5
   206b0:	0002f3b8 	.word	0x0002f3b8
   206b4:	0001db91 	.word	0x0001db91
   206b8:	00010d81 	.word	0x00010d81
   206bc:	00019579 	.word	0x00019579
   206c0:	0001b4a1 	.word	0x0001b4a1
   206c4:	0001966d 	.word	0x0001966d
   206c8:	0002878d 	.word	0x0002878d
   206cc:	9999999a 	.word	0x9999999a
   206d0:	3fd99999 	.word	0x3fd99999
   206d4:	00025c7d 	.word	0x00025c7d
   206d8:	0002f3d0 	.word	0x0002f3d0
   206dc:	0002f3e4 	.word	0x0002f3e4
   206e0:	0002f3fc 	.word	0x0002f3fc
   206e4:	0002f414 	.word	0x0002f414
   206e8:	0002f424 	.word	0x0002f424
   206ec:	0001549d 	.word	0x0001549d
   206f0:	00014ce1 	.word	0x00014ce1
   206f4:	0001468d 	.word	0x0001468d
   206f8:	000113a5 	.word	0x000113a5
   206fc:	0002f388 	.word	0x0002f388
   20700:	00000bb8 	.word	0x00000bb8
   20704:	0001f509 	.word	0x0001f509
   20708:	000169f1 	.word	0x000169f1
   2070c:	20002630 	.word	0x20002630

00020710 <fn_disp_cal_report>:
void  fn_disp_cal_report(void){
   20710:	b570      	push	{r4, r5, r6, lr}
	if (state_change){
   20712:	4b26      	ldr	r3, [pc, #152]	; (207ac <fn_disp_cal_report+0x9c>)
   20714:	781b      	ldrb	r3, [r3, #0]
   20716:	2b00      	cmp	r3, #0
   20718:	d024      	beq.n	20764 <fn_disp_cal_report+0x54>
		pageView = 1;
   2071a:	2301      	movs	r3, #1
   2071c:	4c24      	ldr	r4, [pc, #144]	; (207b0 <fn_disp_cal_report+0xa0>)
   2071e:	7023      	strb	r3, [r4, #0]
	switch(last_input){
   20720:	4b24      	ldr	r3, [pc, #144]	; (207b4 <fn_disp_cal_report+0xa4>)
   20722:	681b      	ldr	r3, [r3, #0]
   20724:	2b02      	cmp	r3, #2
   20726:	d035      	beq.n	20794 <fn_disp_cal_report+0x84>
	glcd_clear_buffer();
   20728:	4b23      	ldr	r3, [pc, #140]	; (207b8 <fn_disp_cal_report+0xa8>)
   2072a:	4798      	blx	r3
	sprintf(display_str, "Calibration Report:");
   2072c:	4d23      	ldr	r5, [pc, #140]	; (207bc <fn_disp_cal_report+0xac>)
   2072e:	2214      	movs	r2, #20
   20730:	4923      	ldr	r1, [pc, #140]	; (207c0 <fn_disp_cal_report+0xb0>)
   20732:	4b24      	ldr	r3, [pc, #144]	; (207c4 <fn_disp_cal_report+0xb4>)
   20734:	0028      	movs	r0, r5
   20736:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   20738:	002a      	movs	r2, r5
   2073a:	2100      	movs	r1, #0
   2073c:	2000      	movs	r0, #0
   2073e:	4b22      	ldr	r3, [pc, #136]	; (207c8 <fn_disp_cal_report+0xb8>)
   20740:	4798      	blx	r3
	disp_report(pageView);
   20742:	4b22      	ldr	r3, [pc, #136]	; (207cc <fn_disp_cal_report+0xbc>)
   20744:	7820      	ldrb	r0, [r4, #0]
   20746:	4798      	blx	r3
	switch (pageView){
   20748:	7823      	ldrb	r3, [r4, #0]
   2074a:	2b01      	cmp	r3, #1
   2074c:	d026      	beq.n	2079c <fn_disp_cal_report+0x8c>
   2074e:	2b04      	cmp	r3, #4
   20750:	d013      	beq.n	2077a <fn_disp_cal_report+0x6a>
			drawSoftKeys("","<",">","Exit");
   20752:	4b1f      	ldr	r3, [pc, #124]	; (207d0 <fn_disp_cal_report+0xc0>)
   20754:	4a1f      	ldr	r2, [pc, #124]	; (207d4 <fn_disp_cal_report+0xc4>)
   20756:	4920      	ldr	r1, [pc, #128]	; (207d8 <fn_disp_cal_report+0xc8>)
   20758:	4820      	ldr	r0, [pc, #128]	; (207dc <fn_disp_cal_report+0xcc>)
   2075a:	4c21      	ldr	r4, [pc, #132]	; (207e0 <fn_disp_cal_report+0xd0>)
   2075c:	47a0      	blx	r4
	glcd_write();
   2075e:	4b21      	ldr	r3, [pc, #132]	; (207e4 <fn_disp_cal_report+0xd4>)
   20760:	4798      	blx	r3
}
   20762:	bd70      	pop	{r4, r5, r6, pc}
	switch(last_input){
   20764:	4b13      	ldr	r3, [pc, #76]	; (207b4 <fn_disp_cal_report+0xa4>)
			if (pageView>1){pageView--;}
   20766:	4c12      	ldr	r4, [pc, #72]	; (207b0 <fn_disp_cal_report+0xa0>)
	switch(last_input){
   20768:	681b      	ldr	r3, [r3, #0]
   2076a:	2b01      	cmp	r3, #1
   2076c:	d00c      	beq.n	20788 <fn_disp_cal_report+0x78>
   2076e:	2b02      	cmp	r3, #2
   20770:	d1da      	bne.n	20728 <fn_disp_cal_report+0x18>
   20772:	7823      	ldrb	r3, [r4, #0]
			if (pageView<maxPages){pageView++;}
   20774:	2b03      	cmp	r3, #3
   20776:	d8d7      	bhi.n	20728 <fn_disp_cal_report+0x18>
   20778:	e00d      	b.n	20796 <fn_disp_cal_report+0x86>
			drawSoftKeys("","<","","Exit");
   2077a:	4818      	ldr	r0, [pc, #96]	; (207dc <fn_disp_cal_report+0xcc>)
   2077c:	4b14      	ldr	r3, [pc, #80]	; (207d0 <fn_disp_cal_report+0xc0>)
   2077e:	0002      	movs	r2, r0
   20780:	4915      	ldr	r1, [pc, #84]	; (207d8 <fn_disp_cal_report+0xc8>)
   20782:	4c17      	ldr	r4, [pc, #92]	; (207e0 <fn_disp_cal_report+0xd0>)
   20784:	47a0      	blx	r4
			break;
   20786:	e7ea      	b.n	2075e <fn_disp_cal_report+0x4e>
			if (pageView>1){pageView--;}
   20788:	7823      	ldrb	r3, [r4, #0]
   2078a:	2b01      	cmp	r3, #1
   2078c:	d9cc      	bls.n	20728 <fn_disp_cal_report+0x18>
   2078e:	3b01      	subs	r3, #1
   20790:	7023      	strb	r3, [r4, #0]
   20792:	e7c9      	b.n	20728 <fn_disp_cal_report+0x18>
	switch(last_input){
   20794:	2301      	movs	r3, #1
			if (pageView<maxPages){pageView++;}
   20796:	3301      	adds	r3, #1
   20798:	7023      	strb	r3, [r4, #0]
   2079a:	e7c5      	b.n	20728 <fn_disp_cal_report+0x18>
			drawSoftKeys("","",">","Exit");
   2079c:	480f      	ldr	r0, [pc, #60]	; (207dc <fn_disp_cal_report+0xcc>)
   2079e:	4b0c      	ldr	r3, [pc, #48]	; (207d0 <fn_disp_cal_report+0xc0>)
   207a0:	4a0c      	ldr	r2, [pc, #48]	; (207d4 <fn_disp_cal_report+0xc4>)
   207a2:	0001      	movs	r1, r0
   207a4:	4c0e      	ldr	r4, [pc, #56]	; (207e0 <fn_disp_cal_report+0xd0>)
   207a6:	47a0      	blx	r4
			break;
   207a8:	e7d9      	b.n	2075e <fn_disp_cal_report+0x4e>
   207aa:	46c0      	nop			; (mov r8, r8)
   207ac:	20004370 	.word	0x20004370
   207b0:	20000d75 	.word	0x20000d75
   207b4:	200041d8 	.word	0x200041d8
   207b8:	0001ca59 	.word	0x0001ca59
   207bc:	20002da0 	.word	0x20002da0
   207c0:	0002f05c 	.word	0x0002f05c
   207c4:	00028999 	.word	0x00028999
   207c8:	0001e2f5 	.word	0x0001e2f5
   207cc:	000106c9 	.word	0x000106c9
   207d0:	0002f070 	.word	0x0002f070
   207d4:	0002dc5c 	.word	0x0002dc5c
   207d8:	0002dc58 	.word	0x0002dc58
   207dc:	0002e36c 	.word	0x0002e36c
   207e0:	000104dd 	.word	0x000104dd
   207e4:	0001db91 	.word	0x0001db91

000207e8 <fn_error_info>:
void fn_error_info(void){
   207e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   207ea:	46d6      	mov	lr, sl
   207ec:	464f      	mov	r7, r9
   207ee:	4646      	mov	r6, r8
   207f0:	b5c0      	push	{r6, r7, lr}
	if (state_change){ // Perform first time entering function
   207f2:	4b5e      	ldr	r3, [pc, #376]	; (2096c <fn_error_info+0x184>)
void fn_error_info(void){
   207f4:	b082      	sub	sp, #8
	if (state_change){ // Perform first time entering function
   207f6:	781b      	ldrb	r3, [r3, #0]
   207f8:	2b00      	cmp	r3, #0
   207fa:	d100      	bne.n	207fe <fn_error_info+0x16>
   207fc:	e073      	b.n	208e6 <fn_error_info+0xfe>
		shot_list_ind = 0;
   207fe:	2300      	movs	r3, #0
   20800:	4d5b      	ldr	r5, [pc, #364]	; (20970 <fn_error_info+0x188>)
		nshots = 0;
   20802:	4e5c      	ldr	r6, [pc, #368]	; (20974 <fn_error_info+0x18c>)
		shot_list_ind = 0;
   20804:	702b      	strb	r3, [r5, #0]
		nshots = 0;
   20806:	7033      	strb	r3, [r6, #0]
		temp_buf_ind = measBufInd;
   20808:	4b5b      	ldr	r3, [pc, #364]	; (20978 <fn_error_info+0x190>)
   2080a:	240a      	movs	r4, #10
   2080c:	681b      	ldr	r3, [r3, #0]
   2080e:	4f5b      	ldr	r7, [pc, #364]	; (2097c <fn_error_info+0x194>)
   20810:	9301      	str	r3, [sp, #4]
   20812:	4b5b      	ldr	r3, [pc, #364]	; (20980 <fn_error_info+0x198>)
   20814:	4698      	mov	r8, r3
				shot_list[shot_list_ind] = temp_buf_ind;
   20816:	4b5b      	ldr	r3, [pc, #364]	; (20984 <fn_error_info+0x19c>)
   20818:	4699      	mov	r9, r3
			circBuffDec(&temp_buf_ind, N_MEASBUF);//  Backup to last reading
   2081a:	210a      	movs	r1, #10
   2081c:	a801      	add	r0, sp, #4
   2081e:	47c0      	blx	r8
			if (measBuf[temp_buf_ind].errCode[0]>0){
   20820:	9a01      	ldr	r2, [sp, #4]
   20822:	0193      	lsls	r3, r2, #6
   20824:	18fb      	adds	r3, r7, r3
   20826:	332c      	adds	r3, #44	; 0x2c
   20828:	781b      	ldrb	r3, [r3, #0]
   2082a:	2b00      	cmp	r3, #0
   2082c:	d007      	beq.n	2083e <fn_error_info+0x56>
				shot_list[shot_list_ind] = temp_buf_ind;
   2082e:	4649      	mov	r1, r9
   20830:	782b      	ldrb	r3, [r5, #0]
   20832:	54ca      	strb	r2, [r1, r3]
				shot_list_ind++;
   20834:	3301      	adds	r3, #1
   20836:	702b      	strb	r3, [r5, #0]
				nshots++;
   20838:	7833      	ldrb	r3, [r6, #0]
   2083a:	3301      	adds	r3, #1
   2083c:	7033      	strb	r3, [r6, #0]
   2083e:	3c01      	subs	r4, #1
		for (i=0;i<N_MEASBUF;i++){
   20840:	2c00      	cmp	r4, #0
   20842:	d1ea      	bne.n	2081a <fn_error_info+0x32>
	switch(last_input){
   20844:	4b50      	ldr	r3, [pc, #320]	; (20988 <fn_error_info+0x1a0>)
		shot_list_ind = 0;
   20846:	702c      	strb	r4, [r5, #0]
	switch(last_input){
   20848:	681b      	ldr	r3, [r3, #0]
   2084a:	2b02      	cmp	r3, #2
   2084c:	d100      	bne.n	20850 <fn_error_info+0x68>
   2084e:	e08b      	b.n	20968 <fn_error_info+0x180>
	glcd_clear_buffer();
   20850:	4b4e      	ldr	r3, [pc, #312]	; (2098c <fn_error_info+0x1a4>)
   20852:	4798      	blx	r3
	sprintf(display_str,"Error Information:");
   20854:	4c4e      	ldr	r4, [pc, #312]	; (20990 <fn_error_info+0x1a8>)
   20856:	4b4f      	ldr	r3, [pc, #316]	; (20994 <fn_error_info+0x1ac>)
   20858:	2213      	movs	r2, #19
   2085a:	494f      	ldr	r1, [pc, #316]	; (20998 <fn_error_info+0x1b0>)
   2085c:	0020      	movs	r0, r4
   2085e:	4698      	mov	r8, r3
   20860:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   20862:	4b4e      	ldr	r3, [pc, #312]	; (2099c <fn_error_info+0x1b4>)
   20864:	0022      	movs	r2, r4
   20866:	2100      	movs	r1, #0
   20868:	2000      	movs	r0, #0
   2086a:	469a      	mov	sl, r3
   2086c:	4798      	blx	r3
	if(shot_list_ind==0){
   2086e:	782b      	ldrb	r3, [r5, #0]
   20870:	2b00      	cmp	r3, #0
   20872:	d100      	bne.n	20876 <fn_error_info+0x8e>
   20874:	e071      	b.n	2095a <fn_error_info+0x172>
	}else if (shot_list_ind>=nshots){
   20876:	7832      	ldrb	r2, [r6, #0]
   20878:	429a      	cmp	r2, r3
   2087a:	d943      	bls.n	20904 <fn_error_info+0x11c>
		drawSoftKeys("","<",">","Back");
   2087c:	4b48      	ldr	r3, [pc, #288]	; (209a0 <fn_error_info+0x1b8>)
   2087e:	4a49      	ldr	r2, [pc, #292]	; (209a4 <fn_error_info+0x1bc>)
   20880:	4949      	ldr	r1, [pc, #292]	; (209a8 <fn_error_info+0x1c0>)
   20882:	484a      	ldr	r0, [pc, #296]	; (209ac <fn_error_info+0x1c4>)
   20884:	4f4a      	ldr	r7, [pc, #296]	; (209b0 <fn_error_info+0x1c8>)
   20886:	47b8      	blx	r7
	if(nshots<= shot_list_ind){//  display null message
   20888:	782b      	ldrb	r3, [r5, #0]
   2088a:	7832      	ldrb	r2, [r6, #0]
   2088c:	429a      	cmp	r2, r3
   2088e:	d943      	bls.n	20918 <fn_error_info+0x130>
		temp_buf_ind = shot_list[shot_list_ind];
   20890:	4a3c      	ldr	r2, [pc, #240]	; (20984 <fn_error_info+0x19c>)
		sprintf(display_str,"Measurement %d", measBuf[temp_buf_ind].refIndex);
   20892:	4d3a      	ldr	r5, [pc, #232]	; (2097c <fn_error_info+0x194>)
		temp_buf_ind = shot_list[shot_list_ind];
   20894:	5cd3      	ldrb	r3, [r2, r3]
		sprintf(display_str,"Measurement %d", measBuf[temp_buf_ind].refIndex);
   20896:	4947      	ldr	r1, [pc, #284]	; (209b4 <fn_error_info+0x1cc>)
		temp_buf_ind = shot_list[shot_list_ind];
   20898:	9301      	str	r3, [sp, #4]
		sprintf(display_str,"Measurement %d", measBuf[temp_buf_ind].refIndex);
   2089a:	019b      	lsls	r3, r3, #6
   2089c:	595a      	ldr	r2, [r3, r5]
   2089e:	0020      	movs	r0, r4
   208a0:	4b45      	ldr	r3, [pc, #276]	; (209b8 <fn_error_info+0x1d0>)
   208a2:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);
   208a4:	0022      	movs	r2, r4
   208a6:	2101      	movs	r1, #1
   208a8:	2000      	movs	r0, #0
   208aa:	47d0      	blx	sl
			gen_err_message(display_str, &measBuf[temp_buf_ind], i);
   208ac:	9b01      	ldr	r3, [sp, #4]
   208ae:	2200      	movs	r2, #0
   208b0:	0199      	lsls	r1, r3, #6
   208b2:	1949      	adds	r1, r1, r5
   208b4:	0020      	movs	r0, r4
   208b6:	4e41      	ldr	r6, [pc, #260]	; (209bc <fn_error_info+0x1d4>)
   208b8:	47b0      	blx	r6
			glcd_tiny_draw_string(0,i+2,display_str);
   208ba:	0022      	movs	r2, r4
   208bc:	2102      	movs	r1, #2
   208be:	2000      	movs	r0, #0
   208c0:	47d0      	blx	sl
			gen_err_message(display_str, &measBuf[temp_buf_ind], i);
   208c2:	9b01      	ldr	r3, [sp, #4]
   208c4:	2201      	movs	r2, #1
   208c6:	0199      	lsls	r1, r3, #6
   208c8:	1949      	adds	r1, r1, r5
   208ca:	0020      	movs	r0, r4
   208cc:	47b0      	blx	r6
			glcd_tiny_draw_string(0,i+2,display_str);
   208ce:	0022      	movs	r2, r4
   208d0:	2103      	movs	r1, #3
   208d2:	2000      	movs	r0, #0
   208d4:	47d0      	blx	sl
	glcd_write();
   208d6:	4b3a      	ldr	r3, [pc, #232]	; (209c0 <fn_error_info+0x1d8>)
   208d8:	4798      	blx	r3
}
   208da:	b002      	add	sp, #8
   208dc:	bc1c      	pop	{r2, r3, r4}
   208de:	4690      	mov	r8, r2
   208e0:	4699      	mov	r9, r3
   208e2:	46a2      	mov	sl, r4
   208e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch(last_input){
   208e6:	4b28      	ldr	r3, [pc, #160]	; (20988 <fn_error_info+0x1a0>)
			if(shot_list_ind>0){
   208e8:	4d21      	ldr	r5, [pc, #132]	; (20970 <fn_error_info+0x188>)
	switch(last_input){
   208ea:	681b      	ldr	r3, [r3, #0]
   208ec:	2b01      	cmp	r3, #1
   208ee:	d02d      	beq.n	2094c <fn_error_info+0x164>
   208f0:	2b02      	cmp	r3, #2
   208f2:	d130      	bne.n	20956 <fn_error_info+0x16e>
   208f4:	782b      	ldrb	r3, [r5, #0]
   208f6:	4e1f      	ldr	r6, [pc, #124]	; (20974 <fn_error_info+0x18c>)
			if(shot_list_ind<nshots){
   208f8:	7832      	ldrb	r2, [r6, #0]
   208fa:	429a      	cmp	r2, r3
   208fc:	d9a8      	bls.n	20850 <fn_error_info+0x68>
				shot_list_ind++;
   208fe:	3301      	adds	r3, #1
   20900:	702b      	strb	r3, [r5, #0]
   20902:	e7a5      	b.n	20850 <fn_error_info+0x68>
		drawSoftKeys("","<","","Back");
   20904:	4829      	ldr	r0, [pc, #164]	; (209ac <fn_error_info+0x1c4>)
   20906:	4b26      	ldr	r3, [pc, #152]	; (209a0 <fn_error_info+0x1b8>)
   20908:	0002      	movs	r2, r0
   2090a:	4927      	ldr	r1, [pc, #156]	; (209a8 <fn_error_info+0x1c0>)
   2090c:	4f28      	ldr	r7, [pc, #160]	; (209b0 <fn_error_info+0x1c8>)
   2090e:	47b8      	blx	r7
	if(nshots<= shot_list_ind){//  display null message
   20910:	782b      	ldrb	r3, [r5, #0]
   20912:	7832      	ldrb	r2, [r6, #0]
   20914:	429a      	cmp	r2, r3
   20916:	d8bb      	bhi.n	20890 <fn_error_info+0xa8>
		sprintf(display_str,"No Additional Errors");
   20918:	2215      	movs	r2, #21
   2091a:	492a      	ldr	r1, [pc, #168]	; (209c4 <fn_error_info+0x1dc>)
   2091c:	0020      	movs	r0, r4
   2091e:	47c0      	blx	r8
		glcd_tiny_draw_string(8,1,display_str);
   20920:	0022      	movs	r2, r4
   20922:	2101      	movs	r1, #1
   20924:	2008      	movs	r0, #8
   20926:	47d0      	blx	sl
		sprintf(display_str,"to Report in Last");
   20928:	2212      	movs	r2, #18
   2092a:	4927      	ldr	r1, [pc, #156]	; (209c8 <fn_error_info+0x1e0>)
   2092c:	0020      	movs	r0, r4
   2092e:	47c0      	blx	r8
		glcd_tiny_draw_string(8,2,display_str);
   20930:	0022      	movs	r2, r4
   20932:	2102      	movs	r1, #2
   20934:	2008      	movs	r0, #8
   20936:	47d0      	blx	sl
		sprintf(display_str,"%d Measurements", N_MEASBUF);
   20938:	220a      	movs	r2, #10
   2093a:	4924      	ldr	r1, [pc, #144]	; (209cc <fn_error_info+0x1e4>)
   2093c:	0020      	movs	r0, r4
   2093e:	4b1e      	ldr	r3, [pc, #120]	; (209b8 <fn_error_info+0x1d0>)
   20940:	4798      	blx	r3
		glcd_tiny_draw_string(8,3,display_str);
   20942:	0022      	movs	r2, r4
   20944:	2103      	movs	r1, #3
   20946:	2008      	movs	r0, #8
   20948:	47d0      	blx	sl
   2094a:	e7c4      	b.n	208d6 <fn_error_info+0xee>
			if(shot_list_ind>0){
   2094c:	782b      	ldrb	r3, [r5, #0]
   2094e:	2b00      	cmp	r3, #0
   20950:	d001      	beq.n	20956 <fn_error_info+0x16e>
				shot_list_ind--;
   20952:	3b01      	subs	r3, #1
   20954:	702b      	strb	r3, [r5, #0]
   20956:	4e07      	ldr	r6, [pc, #28]	; (20974 <fn_error_info+0x18c>)
   20958:	e77a      	b.n	20850 <fn_error_info+0x68>
		drawSoftKeys("","",">","Back");
   2095a:	4814      	ldr	r0, [pc, #80]	; (209ac <fn_error_info+0x1c4>)
   2095c:	4b10      	ldr	r3, [pc, #64]	; (209a0 <fn_error_info+0x1b8>)
   2095e:	4a11      	ldr	r2, [pc, #68]	; (209a4 <fn_error_info+0x1bc>)
   20960:	0001      	movs	r1, r0
   20962:	4f13      	ldr	r7, [pc, #76]	; (209b0 <fn_error_info+0x1c8>)
   20964:	47b8      	blx	r7
   20966:	e78f      	b.n	20888 <fn_error_info+0xa0>
	switch(last_input){
   20968:	2300      	movs	r3, #0
   2096a:	e7c5      	b.n	208f8 <fn_error_info+0x110>
   2096c:	20004370 	.word	0x20004370
   20970:	20000d83 	.word	0x20000d83
   20974:	20000d74 	.word	0x20000d74
   20978:	20000d68 	.word	0x20000d68
   2097c:	20003a44 	.word	0x20003a44
   20980:	00011eb9 	.word	0x00011eb9
   20984:	20000d78 	.word	0x20000d78
   20988:	200041d8 	.word	0x200041d8
   2098c:	0001ca59 	.word	0x0001ca59
   20990:	20002da0 	.word	0x20002da0
   20994:	00028999 	.word	0x00028999
   20998:	0002f168 	.word	0x0002f168
   2099c:	0001e2f5 	.word	0x0001e2f5
   209a0:	0002f1d4 	.word	0x0002f1d4
   209a4:	0002dc5c 	.word	0x0002dc5c
   209a8:	0002dc58 	.word	0x0002dc58
   209ac:	0002e36c 	.word	0x0002e36c
   209b0:	000104dd 	.word	0x000104dd
   209b4:	0002f1b8 	.word	0x0002f1b8
   209b8:	00028ab1 	.word	0x00028ab1
   209bc:	00011591 	.word	0x00011591
   209c0:	0001db91 	.word	0x0001db91
   209c4:	0002f17c 	.word	0x0002f17c
   209c8:	0002f194 	.word	0x0002f194
   209cc:	0002f1a8 	.word	0x0002f1a8

000209d0 <fn_menu1>:
void fn_menu1(void){
   209d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   209d2:	4645      	mov	r5, r8
   209d4:	46de      	mov	lr, fp
   209d6:	4657      	mov	r7, sl
   209d8:	464e      	mov	r6, r9
	const enum STATE gotoList[] = {st_set_options, 
   209da:	2308      	movs	r3, #8
void fn_menu1(void){
   209dc:	b5e0      	push	{r5, r6, r7, lr}
   209de:	b08b      	sub	sp, #44	; 0x2c
	const enum STATE gotoList[] = {st_set_options, 
   209e0:	aa02      	add	r2, sp, #8
   209e2:	7013      	strb	r3, [r2, #0]
   209e4:	330d      	adds	r3, #13
   209e6:	7053      	strb	r3, [r2, #1]
   209e8:	3b0c      	subs	r3, #12
   209ea:	7093      	strb	r3, [r2, #2]
   209ec:	2307      	movs	r3, #7
   209ee:	7113      	strb	r3, [r2, #4]
   209f0:	330f      	adds	r3, #15
   209f2:	7153      	strb	r3, [r2, #5]
	const char * labels[] = {
   209f4:	ab04      	add	r3, sp, #16
   209f6:	469b      	mov	fp, r3
	const enum STATE gotoList[] = {st_set_options, 
   209f8:	2106      	movs	r1, #6
   209fa:	70d1      	strb	r1, [r2, #3]
	const char * labels[] = {
   209fc:	465a      	mov	r2, fp
   209fe:	4b34      	ldr	r3, [pc, #208]	; (20ad0 <fn_menu1+0x100>)
   20a00:	cb31      	ldmia	r3!, {r0, r4, r5}
   20a02:	c231      	stmia	r2!, {r0, r4, r5}
   20a04:	cb31      	ldmia	r3!, {r0, r4, r5}
   20a06:	c231      	stmia	r2!, {r0, r4, r5}
	if (state_change){
   20a08:	4b32      	ldr	r3, [pc, #200]	; (20ad4 <fn_menu1+0x104>)
   20a0a:	781b      	ldrb	r3, [r3, #0]
   20a0c:	2b00      	cmp	r3, #0
   20a0e:	d151      	bne.n	20ab4 <fn_menu1+0xe4>
   20a10:	4b31      	ldr	r3, [pc, #196]	; (20ad8 <fn_menu1+0x108>)
   20a12:	4d32      	ldr	r5, [pc, #200]	; (20adc <fn_menu1+0x10c>)
   20a14:	4698      	mov	r8, r3
   20a16:	7819      	ldrb	r1, [r3, #0]
   20a18:	4b31      	ldr	r3, [pc, #196]	; (20ae0 <fn_menu1+0x110>)
   20a1a:	782a      	ldrb	r2, [r5, #0]
   20a1c:	9301      	str	r3, [sp, #4]
	curY = getCursor(last_input, curY, curY_N);
   20a1e:	4e31      	ldr	r6, [pc, #196]	; (20ae4 <fn_menu1+0x114>)
   20a20:	4b31      	ldr	r3, [pc, #196]	; (20ae8 <fn_menu1+0x118>)
   20a22:	6830      	ldr	r0, [r6, #0]
   20a24:	4798      	blx	r3
   20a26:	4643      	mov	r3, r8
   20a28:	7018      	strb	r0, [r3, #0]
	if (last_input==input_button1){
   20a2a:	6833      	ldr	r3, [r6, #0]
   20a2c:	2b00      	cmp	r3, #0
   20a2e:	d103      	bne.n	20a38 <fn_menu1+0x68>
		current_state = gotoList[curY];
   20a30:	ab02      	add	r3, sp, #8
   20a32:	5c1a      	ldrb	r2, [r3, r0]
   20a34:	4b2d      	ldr	r3, [pc, #180]	; (20aec <fn_menu1+0x11c>)
   20a36:	601a      	str	r2, [r3, #0]
	glcd_clear_buffer();	
   20a38:	4b2d      	ldr	r3, [pc, #180]	; (20af0 <fn_menu1+0x120>)
   20a3a:	4798      	blx	r3
	sprintf(display_str, "Main Menu:");
   20a3c:	4c2d      	ldr	r4, [pc, #180]	; (20af4 <fn_menu1+0x124>)
   20a3e:	4b2e      	ldr	r3, [pc, #184]	; (20af8 <fn_menu1+0x128>)
   20a40:	220b      	movs	r2, #11
   20a42:	492e      	ldr	r1, [pc, #184]	; (20afc <fn_menu1+0x12c>)
   20a44:	0020      	movs	r0, r4
   20a46:	4699      	mov	r9, r3
   20a48:	4798      	blx	r3
	glcd_tiny_draw_string(0, 0,display_str);
   20a4a:	0022      	movs	r2, r4
   20a4c:	2100      	movs	r1, #0
   20a4e:	2000      	movs	r0, #0
   20a50:	4e2b      	ldr	r6, [pc, #172]	; (20b00 <fn_menu1+0x130>)
   20a52:	47b0      	blx	r6
	drawSoftKeys("Enter","<",">","Back");
   20a54:	4b2b      	ldr	r3, [pc, #172]	; (20b04 <fn_menu1+0x134>)
   20a56:	492c      	ldr	r1, [pc, #176]	; (20b08 <fn_menu1+0x138>)
   20a58:	469a      	mov	sl, r3
   20a5a:	482c      	ldr	r0, [pc, #176]	; (20b0c <fn_menu1+0x13c>)
   20a5c:	4b2c      	ldr	r3, [pc, #176]	; (20b10 <fn_menu1+0x140>)
   20a5e:	4652      	mov	r2, sl
   20a60:	4f2c      	ldr	r7, [pc, #176]	; (20b14 <fn_menu1+0x144>)
   20a62:	47b8      	blx	r7
	sprintf(display_str, ">");
   20a64:	2202      	movs	r2, #2
   20a66:	4651      	mov	r1, sl
   20a68:	0020      	movs	r0, r4
   20a6a:	47c8      	blx	r9
	glcd_tiny_draw_string(0, curY+curY_off,display_str);
   20a6c:	4643      	mov	r3, r8
   20a6e:	7819      	ldrb	r1, [r3, #0]
   20a70:	9b01      	ldr	r3, [sp, #4]
   20a72:	0022      	movs	r2, r4
   20a74:	781b      	ldrb	r3, [r3, #0]
   20a76:	2000      	movs	r0, #0
   20a78:	18c9      	adds	r1, r1, r3
   20a7a:	b2c9      	uxtb	r1, r1
   20a7c:	47b0      	blx	r6
	for (i=0;i<curY_N;i++){
   20a7e:	782b      	ldrb	r3, [r5, #0]
   20a80:	2400      	movs	r4, #0
   20a82:	2b00      	cmp	r3, #0
   20a84:	d00d      	beq.n	20aa2 <fn_menu1+0xd2>
   20a86:	9f01      	ldr	r7, [sp, #4]
		glcd_tiny_draw_string(5,i+curY_off,labels[i]);
   20a88:	465a      	mov	r2, fp
   20a8a:	7839      	ldrb	r1, [r7, #0]
   20a8c:	00a3      	lsls	r3, r4, #2
   20a8e:	1861      	adds	r1, r4, r1
   20a90:	58d2      	ldr	r2, [r2, r3]
   20a92:	b2c9      	uxtb	r1, r1
   20a94:	2005      	movs	r0, #5
   20a96:	47b0      	blx	r6
	for (i=0;i<curY_N;i++){
   20a98:	3401      	adds	r4, #1
   20a9a:	782b      	ldrb	r3, [r5, #0]
   20a9c:	b2e4      	uxtb	r4, r4
   20a9e:	42a3      	cmp	r3, r4
   20aa0:	d8f2      	bhi.n	20a88 <fn_menu1+0xb8>
	glcd_write();
   20aa2:	4b1d      	ldr	r3, [pc, #116]	; (20b18 <fn_menu1+0x148>)
   20aa4:	4798      	blx	r3
}
   20aa6:	b00b      	add	sp, #44	; 0x2c
   20aa8:	bc3c      	pop	{r2, r3, r4, r5}
   20aaa:	4690      	mov	r8, r2
   20aac:	4699      	mov	r9, r3
   20aae:	46a2      	mov	sl, r4
   20ab0:	46ab      	mov	fp, r5
   20ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curY = 0;
   20ab4:	4b08      	ldr	r3, [pc, #32]	; (20ad8 <fn_menu1+0x108>)
		curY_N = 6;
   20ab6:	4d09      	ldr	r5, [pc, #36]	; (20adc <fn_menu1+0x10c>)
		curY = 0;
   20ab8:	4698      	mov	r8, r3
   20aba:	2300      	movs	r3, #0
   20abc:	4642      	mov	r2, r8
   20abe:	7013      	strb	r3, [r2, #0]
		curY_off = 1;
   20ac0:	4a07      	ldr	r2, [pc, #28]	; (20ae0 <fn_menu1+0x110>)
   20ac2:	3301      	adds	r3, #1
		curY_N = 6;
   20ac4:	7029      	strb	r1, [r5, #0]
		curY_off = 1;
   20ac6:	9201      	str	r2, [sp, #4]
   20ac8:	7013      	strb	r3, [r2, #0]
   20aca:	2100      	movs	r1, #0
   20acc:	2206      	movs	r2, #6
   20ace:	e7a6      	b.n	20a1e <fn_menu1+0x4e>
   20ad0:	0002eae4 	.word	0x0002eae4
   20ad4:	20004370 	.word	0x20004370
   20ad8:	20002d10 	.word	0x20002d10
   20adc:	200051c0 	.word	0x200051c0
   20ae0:	20002af8 	.word	0x20002af8
   20ae4:	200041d8 	.word	0x200041d8
   20ae8:	000103cd 	.word	0x000103cd
   20aec:	20002630 	.word	0x20002630
   20af0:	0001ca59 	.word	0x0001ca59
   20af4:	20002da0 	.word	0x20002da0
   20af8:	00028999 	.word	0x00028999
   20afc:	0002f2fc 	.word	0x0002f2fc
   20b00:	0001e2f5 	.word	0x0001e2f5
   20b04:	0002dc5c 	.word	0x0002dc5c
   20b08:	0002dc58 	.word	0x0002dc58
   20b0c:	0002f308 	.word	0x0002f308
   20b10:	0002f1d4 	.word	0x0002f1d4
   20b14:	000104dd 	.word	0x000104dd
   20b18:	0001db91 	.word	0x0001db91

00020b1c <fn_menu_debug>:
void fn_menu_debug(void){
   20b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20b1e:	46de      	mov	lr, fp
   20b20:	4657      	mov	r7, sl
   20b22:	464e      	mov	r6, r9
   20b24:	4645      	mov	r5, r8
	const enum STATE gotoList[] = {st_debug_rawData,
   20b26:	2312      	movs	r3, #18
void fn_menu_debug(void){
   20b28:	b5e0      	push	{r5, r6, r7, lr}
   20b2a:	b08b      	sub	sp, #44	; 0x2c
	const enum STATE gotoList[] = {st_debug_rawData,
   20b2c:	aa02      	add	r2, sp, #8
   20b2e:	7013      	strb	r3, [r2, #0]
   20b30:	3301      	adds	r3, #1
   20b32:	7053      	strb	r3, [r2, #1]
   20b34:	3301      	adds	r3, #1
   20b36:	7093      	strb	r3, [r2, #2]
   20b38:	3b07      	subs	r3, #7
   20b3a:	70d3      	strb	r3, [r2, #3]
   20b3c:	3301      	adds	r3, #1
   20b3e:	7113      	strb	r3, [r2, #4]
   20b40:	330b      	adds	r3, #11
   20b42:	7153      	strb	r3, [r2, #5]
	const char * labels[] = {
   20b44:	ab04      	add	r3, sp, #16
   20b46:	469b      	mov	fp, r3
   20b48:	465a      	mov	r2, fp
   20b4a:	4b35      	ldr	r3, [pc, #212]	; (20c20 <fn_menu_debug+0x104>)
   20b4c:	3318      	adds	r3, #24
   20b4e:	cb13      	ldmia	r3!, {r0, r1, r4}
   20b50:	c213      	stmia	r2!, {r0, r1, r4}
   20b52:	cb13      	ldmia	r3!, {r0, r1, r4}
   20b54:	c213      	stmia	r2!, {r0, r1, r4}
	if (state_change) {
   20b56:	4b33      	ldr	r3, [pc, #204]	; (20c24 <fn_menu_debug+0x108>)
   20b58:	781b      	ldrb	r3, [r3, #0]
   20b5a:	2b00      	cmp	r3, #0
   20b5c:	d151      	bne.n	20c02 <fn_menu_debug+0xe6>
   20b5e:	4b32      	ldr	r3, [pc, #200]	; (20c28 <fn_menu_debug+0x10c>)
   20b60:	4d32      	ldr	r5, [pc, #200]	; (20c2c <fn_menu_debug+0x110>)
   20b62:	4698      	mov	r8, r3
   20b64:	7819      	ldrb	r1, [r3, #0]
   20b66:	4b32      	ldr	r3, [pc, #200]	; (20c30 <fn_menu_debug+0x114>)
   20b68:	782a      	ldrb	r2, [r5, #0]
   20b6a:	9301      	str	r3, [sp, #4]
	curY = getCursor(last_input, curY, curY_N);
   20b6c:	4e31      	ldr	r6, [pc, #196]	; (20c34 <fn_menu_debug+0x118>)
   20b6e:	4b32      	ldr	r3, [pc, #200]	; (20c38 <fn_menu_debug+0x11c>)
   20b70:	6830      	ldr	r0, [r6, #0]
   20b72:	4798      	blx	r3
   20b74:	4643      	mov	r3, r8
   20b76:	7018      	strb	r0, [r3, #0]
	if (last_input==input_button1){
   20b78:	6833      	ldr	r3, [r6, #0]
   20b7a:	2b00      	cmp	r3, #0
   20b7c:	d103      	bne.n	20b86 <fn_menu_debug+0x6a>
		current_state = gotoList[curY];
   20b7e:	ab02      	add	r3, sp, #8
   20b80:	5c1a      	ldrb	r2, [r3, r0]
   20b82:	4b2e      	ldr	r3, [pc, #184]	; (20c3c <fn_menu_debug+0x120>)
   20b84:	601a      	str	r2, [r3, #0]
	glcd_clear_buffer();
   20b86:	4b2e      	ldr	r3, [pc, #184]	; (20c40 <fn_menu_debug+0x124>)
   20b88:	4798      	blx	r3
	sprintf(display_str,"Debug Menu:");
   20b8a:	4c2e      	ldr	r4, [pc, #184]	; (20c44 <fn_menu_debug+0x128>)
   20b8c:	4b2e      	ldr	r3, [pc, #184]	; (20c48 <fn_menu_debug+0x12c>)
   20b8e:	220c      	movs	r2, #12
   20b90:	492e      	ldr	r1, [pc, #184]	; (20c4c <fn_menu_debug+0x130>)
   20b92:	0020      	movs	r0, r4
   20b94:	4699      	mov	r9, r3
   20b96:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   20b98:	0022      	movs	r2, r4
   20b9a:	2100      	movs	r1, #0
   20b9c:	2000      	movs	r0, #0
   20b9e:	4e2c      	ldr	r6, [pc, #176]	; (20c50 <fn_menu_debug+0x134>)
   20ba0:	47b0      	blx	r6
	drawSoftKeys("Enter","<",">","Back");
   20ba2:	4b2c      	ldr	r3, [pc, #176]	; (20c54 <fn_menu_debug+0x138>)
   20ba4:	492c      	ldr	r1, [pc, #176]	; (20c58 <fn_menu_debug+0x13c>)
   20ba6:	469a      	mov	sl, r3
   20ba8:	482c      	ldr	r0, [pc, #176]	; (20c5c <fn_menu_debug+0x140>)
   20baa:	4b2d      	ldr	r3, [pc, #180]	; (20c60 <fn_menu_debug+0x144>)
   20bac:	4652      	mov	r2, sl
   20bae:	4f2d      	ldr	r7, [pc, #180]	; (20c64 <fn_menu_debug+0x148>)
   20bb0:	47b8      	blx	r7
	sprintf(display_str, ">");
   20bb2:	2202      	movs	r2, #2
   20bb4:	4651      	mov	r1, sl
   20bb6:	0020      	movs	r0, r4
   20bb8:	47c8      	blx	r9
	glcd_tiny_draw_string(0, curY+curY_off,display_str);
   20bba:	4643      	mov	r3, r8
   20bbc:	7819      	ldrb	r1, [r3, #0]
   20bbe:	9b01      	ldr	r3, [sp, #4]
   20bc0:	0022      	movs	r2, r4
   20bc2:	781b      	ldrb	r3, [r3, #0]
   20bc4:	2000      	movs	r0, #0
   20bc6:	18c9      	adds	r1, r1, r3
   20bc8:	b2c9      	uxtb	r1, r1
   20bca:	47b0      	blx	r6
	for(i=0;i<curY_N;i++){
   20bcc:	782b      	ldrb	r3, [r5, #0]
   20bce:	2400      	movs	r4, #0
   20bd0:	2b00      	cmp	r3, #0
   20bd2:	d00d      	beq.n	20bf0 <fn_menu_debug+0xd4>
   20bd4:	9f01      	ldr	r7, [sp, #4]
		glcd_tiny_draw_string(5, i+curY_off, labels[i]);
   20bd6:	465a      	mov	r2, fp
   20bd8:	7839      	ldrb	r1, [r7, #0]
   20bda:	00a3      	lsls	r3, r4, #2
   20bdc:	1861      	adds	r1, r4, r1
   20bde:	58d2      	ldr	r2, [r2, r3]
   20be0:	b2c9      	uxtb	r1, r1
   20be2:	2005      	movs	r0, #5
   20be4:	47b0      	blx	r6
	for(i=0;i<curY_N;i++){
   20be6:	3401      	adds	r4, #1
   20be8:	782b      	ldrb	r3, [r5, #0]
   20bea:	b2e4      	uxtb	r4, r4
   20bec:	42a3      	cmp	r3, r4
   20bee:	d8f2      	bhi.n	20bd6 <fn_menu_debug+0xba>
	glcd_write();
   20bf0:	4b1d      	ldr	r3, [pc, #116]	; (20c68 <fn_menu_debug+0x14c>)
   20bf2:	4798      	blx	r3
}
   20bf4:	b00b      	add	sp, #44	; 0x2c
   20bf6:	bc3c      	pop	{r2, r3, r4, r5}
   20bf8:	4690      	mov	r8, r2
   20bfa:	4699      	mov	r9, r3
   20bfc:	46a2      	mov	sl, r4
   20bfe:	46ab      	mov	fp, r5
   20c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curY = 0;
   20c02:	4b09      	ldr	r3, [pc, #36]	; (20c28 <fn_menu_debug+0x10c>)
		curY_N = 6;
   20c04:	4d09      	ldr	r5, [pc, #36]	; (20c2c <fn_menu_debug+0x110>)
		curY = 0;
   20c06:	4698      	mov	r8, r3
   20c08:	2300      	movs	r3, #0
   20c0a:	4642      	mov	r2, r8
   20c0c:	7013      	strb	r3, [r2, #0]
		curY_off = 1;
   20c0e:	4a08      	ldr	r2, [pc, #32]	; (20c30 <fn_menu_debug+0x114>)
		curY_N = 6;
   20c10:	3306      	adds	r3, #6
   20c12:	702b      	strb	r3, [r5, #0]
		curY_off = 1;
   20c14:	3b05      	subs	r3, #5
   20c16:	9201      	str	r2, [sp, #4]
   20c18:	7013      	strb	r3, [r2, #0]
   20c1a:	2100      	movs	r1, #0
   20c1c:	2206      	movs	r2, #6
   20c1e:	e7a5      	b.n	20b6c <fn_menu_debug+0x50>
   20c20:	0002eae4 	.word	0x0002eae4
   20c24:	20004370 	.word	0x20004370
   20c28:	20002d10 	.word	0x20002d10
   20c2c:	200051c0 	.word	0x200051c0
   20c30:	20002af8 	.word	0x20002af8
   20c34:	200041d8 	.word	0x200041d8
   20c38:	000103cd 	.word	0x000103cd
   20c3c:	20002630 	.word	0x20002630
   20c40:	0001ca59 	.word	0x0001ca59
   20c44:	20002da0 	.word	0x20002da0
   20c48:	00028999 	.word	0x00028999
   20c4c:	0002f368 	.word	0x0002f368
   20c50:	0001e2f5 	.word	0x0001e2f5
   20c54:	0002dc5c 	.word	0x0002dc5c
   20c58:	0002dc58 	.word	0x0002dc58
   20c5c:	0002f308 	.word	0x0002f308
   20c60:	0002f1d4 	.word	0x0002f1d4
   20c64:	000104dd 	.word	0x000104dd
   20c68:	0001db91 	.word	0x0001db91

00020c6c <fn_menu_cal>:
void fn_menu_cal(void){
   20c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c6e:	464e      	mov	r6, r9
   20c70:	46de      	mov	lr, fp
   20c72:	4657      	mov	r7, sl
   20c74:	4645      	mov	r5, r8
	const enum STATE gotoList[] = {st_disp_cal_report,
   20c76:	230f      	movs	r3, #15
void fn_menu_cal(void){
   20c78:	b5e0      	push	{r5, r6, r7, lr}
   20c7a:	b08b      	sub	sp, #44	; 0x2c
	const enum STATE gotoList[] = {st_disp_cal_report,
   20c7c:	ae03      	add	r6, sp, #12
   20c7e:	7033      	strb	r3, [r6, #0]
   20c80:	3301      	adds	r3, #1
   20c82:	7073      	strb	r3, [r6, #1]
   20c84:	3b05      	subs	r3, #5
   20c86:	70b3      	strb	r3, [r6, #2]
   20c88:	3b01      	subs	r3, #1
   20c8a:	70f3      	strb	r3, [r6, #3]
   20c8c:	3302      	adds	r3, #2
   20c8e:	7133      	strb	r3, [r6, #4]
	const char * labels[] = {
   20c90:	ab05      	add	r3, sp, #20
   20c92:	4699      	mov	r9, r3
   20c94:	464a      	mov	r2, r9
   20c96:	4b35      	ldr	r3, [pc, #212]	; (20d6c <fn_menu_cal+0x100>)
   20c98:	3330      	adds	r3, #48	; 0x30
   20c9a:	cb13      	ldmia	r3!, {r0, r1, r4}
   20c9c:	c213      	stmia	r2!, {r0, r1, r4}
   20c9e:	cb03      	ldmia	r3!, {r0, r1}
   20ca0:	c203      	stmia	r2!, {r0, r1}
	if (state_change) {
   20ca2:	4b33      	ldr	r3, [pc, #204]	; (20d70 <fn_menu_cal+0x104>)
   20ca4:	781b      	ldrb	r3, [r3, #0]
   20ca6:	2b00      	cmp	r3, #0
   20ca8:	d150      	bne.n	20d4c <fn_menu_cal+0xe0>
   20caa:	4b32      	ldr	r3, [pc, #200]	; (20d74 <fn_menu_cal+0x108>)
   20cac:	4d32      	ldr	r5, [pc, #200]	; (20d78 <fn_menu_cal+0x10c>)
   20cae:	469b      	mov	fp, r3
   20cb0:	7819      	ldrb	r1, [r3, #0]
   20cb2:	4b32      	ldr	r3, [pc, #200]	; (20d7c <fn_menu_cal+0x110>)
   20cb4:	782a      	ldrb	r2, [r5, #0]
   20cb6:	9301      	str	r3, [sp, #4]
	curY = getCursor(last_input, curY, curY_N);
   20cb8:	4c31      	ldr	r4, [pc, #196]	; (20d80 <fn_menu_cal+0x114>)
   20cba:	4b32      	ldr	r3, [pc, #200]	; (20d84 <fn_menu_cal+0x118>)
   20cbc:	6820      	ldr	r0, [r4, #0]
   20cbe:	4798      	blx	r3
   20cc0:	465b      	mov	r3, fp
   20cc2:	7018      	strb	r0, [r3, #0]
	if (last_input==input_button1){
   20cc4:	6823      	ldr	r3, [r4, #0]
   20cc6:	2b00      	cmp	r3, #0
   20cc8:	d102      	bne.n	20cd0 <fn_menu_cal+0x64>
		current_state = gotoList[curY];
   20cca:	5c32      	ldrb	r2, [r6, r0]
   20ccc:	4b2e      	ldr	r3, [pc, #184]	; (20d88 <fn_menu_cal+0x11c>)
   20cce:	601a      	str	r2, [r3, #0]
	glcd_clear_buffer();
   20cd0:	4b2e      	ldr	r3, [pc, #184]	; (20d8c <fn_menu_cal+0x120>)
   20cd2:	4798      	blx	r3
	sprintf(display_str,"Calibration:");
   20cd4:	4c2e      	ldr	r4, [pc, #184]	; (20d90 <fn_menu_cal+0x124>)
   20cd6:	4b2f      	ldr	r3, [pc, #188]	; (20d94 <fn_menu_cal+0x128>)
   20cd8:	220d      	movs	r2, #13
   20cda:	492f      	ldr	r1, [pc, #188]	; (20d98 <fn_menu_cal+0x12c>)
   20cdc:	0020      	movs	r0, r4
   20cde:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   20ce0:	0022      	movs	r2, r4
   20ce2:	2100      	movs	r1, #0
   20ce4:	2000      	movs	r0, #0
   20ce6:	4e2d      	ldr	r6, [pc, #180]	; (20d9c <fn_menu_cal+0x130>)
   20ce8:	47b0      	blx	r6
	drawSoftKeys("Enter","<",">","Back");
   20cea:	4b2d      	ldr	r3, [pc, #180]	; (20da0 <fn_menu_cal+0x134>)
   20cec:	492d      	ldr	r1, [pc, #180]	; (20da4 <fn_menu_cal+0x138>)
   20cee:	469a      	mov	sl, r3
   20cf0:	482d      	ldr	r0, [pc, #180]	; (20da8 <fn_menu_cal+0x13c>)
   20cf2:	4b2e      	ldr	r3, [pc, #184]	; (20dac <fn_menu_cal+0x140>)
   20cf4:	4652      	mov	r2, sl
   20cf6:	4f2e      	ldr	r7, [pc, #184]	; (20db0 <fn_menu_cal+0x144>)
   20cf8:	47b8      	blx	r7
	sprintf(display_str, ">");
   20cfa:	2202      	movs	r2, #2
   20cfc:	4651      	mov	r1, sl
   20cfe:	0020      	movs	r0, r4
   20d00:	4b24      	ldr	r3, [pc, #144]	; (20d94 <fn_menu_cal+0x128>)
   20d02:	4798      	blx	r3
	glcd_tiny_draw_string(0, curY+curY_off,display_str);
   20d04:	465b      	mov	r3, fp
   20d06:	7819      	ldrb	r1, [r3, #0]
   20d08:	9b01      	ldr	r3, [sp, #4]
   20d0a:	0022      	movs	r2, r4
   20d0c:	781b      	ldrb	r3, [r3, #0]
   20d0e:	2000      	movs	r0, #0
   20d10:	18c9      	adds	r1, r1, r3
   20d12:	b2c9      	uxtb	r1, r1
   20d14:	47b0      	blx	r6
	for (i=0;i<curY_N;i++){	
   20d16:	782b      	ldrb	r3, [r5, #0]
   20d18:	2400      	movs	r4, #0
   20d1a:	2b00      	cmp	r3, #0
   20d1c:	d00d      	beq.n	20d3a <fn_menu_cal+0xce>
   20d1e:	9f01      	ldr	r7, [sp, #4]
		glcd_tiny_draw_string(5, i+curY_off, labels[i]);
   20d20:	464a      	mov	r2, r9
   20d22:	7839      	ldrb	r1, [r7, #0]
   20d24:	00a3      	lsls	r3, r4, #2
   20d26:	1861      	adds	r1, r4, r1
   20d28:	58d2      	ldr	r2, [r2, r3]
   20d2a:	b2c9      	uxtb	r1, r1
   20d2c:	2005      	movs	r0, #5
   20d2e:	47b0      	blx	r6
	for (i=0;i<curY_N;i++){	
   20d30:	3401      	adds	r4, #1
   20d32:	782b      	ldrb	r3, [r5, #0]
   20d34:	b2e4      	uxtb	r4, r4
   20d36:	42a3      	cmp	r3, r4
   20d38:	d8f2      	bhi.n	20d20 <fn_menu_cal+0xb4>
	glcd_write();
   20d3a:	4b1e      	ldr	r3, [pc, #120]	; (20db4 <fn_menu_cal+0x148>)
   20d3c:	4798      	blx	r3
}
   20d3e:	b00b      	add	sp, #44	; 0x2c
   20d40:	bc3c      	pop	{r2, r3, r4, r5}
   20d42:	4690      	mov	r8, r2
   20d44:	4699      	mov	r9, r3
   20d46:	46a2      	mov	sl, r4
   20d48:	46ab      	mov	fp, r5
   20d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curY = 0;
   20d4c:	4b09      	ldr	r3, [pc, #36]	; (20d74 <fn_menu_cal+0x108>)
		curY_N = 5;
   20d4e:	4d0a      	ldr	r5, [pc, #40]	; (20d78 <fn_menu_cal+0x10c>)
		curY = 0;
   20d50:	469b      	mov	fp, r3
   20d52:	2300      	movs	r3, #0
   20d54:	465a      	mov	r2, fp
   20d56:	7013      	strb	r3, [r2, #0]
		curY_off = 1;
   20d58:	4a08      	ldr	r2, [pc, #32]	; (20d7c <fn_menu_cal+0x110>)
		curY_N = 5;
   20d5a:	3305      	adds	r3, #5
   20d5c:	702b      	strb	r3, [r5, #0]
		curY_off = 1;
   20d5e:	3b04      	subs	r3, #4
   20d60:	9201      	str	r2, [sp, #4]
   20d62:	7013      	strb	r3, [r2, #0]
   20d64:	2100      	movs	r1, #0
   20d66:	2205      	movs	r2, #5
   20d68:	e7a6      	b.n	20cb8 <fn_menu_cal+0x4c>
   20d6a:	46c0      	nop			; (mov r8, r8)
   20d6c:	0002eae4 	.word	0x0002eae4
   20d70:	20004370 	.word	0x20004370
   20d74:	20002d10 	.word	0x20002d10
   20d78:	200051c0 	.word	0x200051c0
   20d7c:	20002af8 	.word	0x20002af8
   20d80:	200041d8 	.word	0x200041d8
   20d84:	000103cd 	.word	0x000103cd
   20d88:	20002630 	.word	0x20002630
   20d8c:	0001ca59 	.word	0x0001ca59
   20d90:	20002da0 	.word	0x20002da0
   20d94:	00028999 	.word	0x00028999
   20d98:	0002ed1c 	.word	0x0002ed1c
   20d9c:	0001e2f5 	.word	0x0001e2f5
   20da0:	0002dc5c 	.word	0x0002dc5c
   20da4:	0002dc58 	.word	0x0002dc58
   20da8:	0002f308 	.word	0x0002f308
   20dac:	0002f1d4 	.word	0x0002f1d4
   20db0:	000104dd 	.word	0x000104dd
   20db4:	0001db91 	.word	0x0001db91

00020db8 <fn_debug_backlight>:
void fn_debug_backlight(void){
   20db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20dba:	46ce      	mov	lr, r9
   20dbc:	4647      	mov	r7, r8
   20dbe:	b580      	push	{r7, lr}
	if (state_change) {
   20dc0:	4b42      	ldr	r3, [pc, #264]	; (20ecc <fn_debug_backlight+0x114>)
		curY = 0;
   20dc2:	4c43      	ldr	r4, [pc, #268]	; (20ed0 <fn_debug_backlight+0x118>)
	if (state_change) {
   20dc4:	781b      	ldrb	r3, [r3, #0]
   20dc6:	2b00      	cmp	r3, #0
   20dc8:	d166      	bne.n	20e98 <fn_debug_backlight+0xe0>
   20dca:	4b42      	ldr	r3, [pc, #264]	; (20ed4 <fn_debug_backlight+0x11c>)
	switch(curY){
   20dcc:	7821      	ldrb	r1, [r4, #0]
   20dce:	4f42      	ldr	r7, [pc, #264]	; (20ed8 <fn_debug_backlight+0x120>)
   20dd0:	4698      	mov	r8, r3
			colorChar = 'g';
   20dd2:	4e42      	ldr	r6, [pc, #264]	; (20edc <fn_debug_backlight+0x124>)
	switch(curY){
   20dd4:	2903      	cmp	r1, #3
   20dd6:	d100      	bne.n	20dda <fn_debug_backlight+0x22>
   20dd8:	e072      	b.n	20ec0 <fn_debug_backlight+0x108>
   20dda:	2904      	cmp	r1, #4
   20ddc:	d100      	bne.n	20de0 <fn_debug_backlight+0x28>
   20dde:	e072      	b.n	20ec6 <fn_debug_backlight+0x10e>
			colorChar = 'r';
   20de0:	2372      	movs	r3, #114	; 0x72
   20de2:	7033      	strb	r3, [r6, #0]
	curY = getCursor(last_input, curY, curY_N);
   20de4:	4d3e      	ldr	r5, [pc, #248]	; (20ee0 <fn_debug_backlight+0x128>)
   20de6:	4b3f      	ldr	r3, [pc, #252]	; (20ee4 <fn_debug_backlight+0x12c>)
   20de8:	6828      	ldr	r0, [r5, #0]
   20dea:	783a      	ldrb	r2, [r7, #0]
   20dec:	4798      	blx	r3
	switch(last_input){
   20dee:	682b      	ldr	r3, [r5, #0]
	curY = getCursor(last_input, curY, curY_N);
   20df0:	7020      	strb	r0, [r4, #0]
	switch(last_input){
   20df2:	2b00      	cmp	r3, #0
   20df4:	d049      	beq.n	20e8a <fn_debug_backlight+0xd2>
   20df6:	2b03      	cmp	r3, #3
   20df8:	d03f      	beq.n	20e7a <fn_debug_backlight+0xc2>
   20dfa:	4e3b      	ldr	r6, [pc, #236]	; (20ee8 <fn_debug_backlight+0x130>)
	glcd_clear_buffer();
   20dfc:	4b3b      	ldr	r3, [pc, #236]	; (20eec <fn_debug_backlight+0x134>)
   20dfe:	4798      	blx	r3
	sprintf(display_str,"Backlight Debug:");
   20e00:	4c3b      	ldr	r4, [pc, #236]	; (20ef0 <fn_debug_backlight+0x138>)
   20e02:	4b3c      	ldr	r3, [pc, #240]	; (20ef4 <fn_debug_backlight+0x13c>)
   20e04:	2211      	movs	r2, #17
   20e06:	493c      	ldr	r1, [pc, #240]	; (20ef8 <fn_debug_backlight+0x140>)
   20e08:	0020      	movs	r0, r4
   20e0a:	4699      	mov	r9, r3
   20e0c:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   20e0e:	4d3b      	ldr	r5, [pc, #236]	; (20efc <fn_debug_backlight+0x144>)
   20e10:	0022      	movs	r2, r4
   20e12:	2100      	movs	r1, #0
   20e14:	2000      	movs	r0, #0
   20e16:	47a8      	blx	r5
	sprintf(display_str, "Red:   %d", colorPtr->red);
   20e18:	6833      	ldr	r3, [r6, #0]
   20e1a:	4f39      	ldr	r7, [pc, #228]	; (20f00 <fn_debug_backlight+0x148>)
   20e1c:	791a      	ldrb	r2, [r3, #4]
   20e1e:	4939      	ldr	r1, [pc, #228]	; (20f04 <fn_debug_backlight+0x14c>)
   20e20:	0020      	movs	r0, r4
   20e22:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 2, display_str);
   20e24:	0022      	movs	r2, r4
   20e26:	2102      	movs	r1, #2
   20e28:	2005      	movs	r0, #5
   20e2a:	47a8      	blx	r5
	sprintf(display_str, "Green: %d", colorPtr->green);
   20e2c:	6833      	ldr	r3, [r6, #0]
   20e2e:	4936      	ldr	r1, [pc, #216]	; (20f08 <fn_debug_backlight+0x150>)
   20e30:	799a      	ldrb	r2, [r3, #6]
   20e32:	0020      	movs	r0, r4
   20e34:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 3, display_str);
   20e36:	0022      	movs	r2, r4
   20e38:	2103      	movs	r1, #3
   20e3a:	2005      	movs	r0, #5
   20e3c:	47a8      	blx	r5
	sprintf(display_str, "Blue:  %d", colorPtr->blue);
   20e3e:	6833      	ldr	r3, [r6, #0]
   20e40:	4932      	ldr	r1, [pc, #200]	; (20f0c <fn_debug_backlight+0x154>)
   20e42:	795a      	ldrb	r2, [r3, #5]
   20e44:	0020      	movs	r0, r4
   20e46:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 4, display_str);
   20e48:	0022      	movs	r2, r4
   20e4a:	2104      	movs	r1, #4
   20e4c:	2005      	movs	r0, #5
   20e4e:	47a8      	blx	r5
	drawSoftKeys("","Up","Down","");
   20e50:	482f      	ldr	r0, [pc, #188]	; (20f10 <fn_debug_backlight+0x158>)
   20e52:	4e30      	ldr	r6, [pc, #192]	; (20f14 <fn_debug_backlight+0x15c>)
   20e54:	0003      	movs	r3, r0
   20e56:	4a30      	ldr	r2, [pc, #192]	; (20f18 <fn_debug_backlight+0x160>)
   20e58:	4930      	ldr	r1, [pc, #192]	; (20f1c <fn_debug_backlight+0x164>)
   20e5a:	47b0      	blx	r6
	sprintf(display_str, ">");
   20e5c:	2202      	movs	r2, #2
   20e5e:	4930      	ldr	r1, [pc, #192]	; (20f20 <fn_debug_backlight+0x168>)
   20e60:	0020      	movs	r0, r4
   20e62:	47c8      	blx	r9
	glcd_tiny_draw_string(0, curY_off,display_str);
   20e64:	4643      	mov	r3, r8
   20e66:	0022      	movs	r2, r4
   20e68:	7819      	ldrb	r1, [r3, #0]
   20e6a:	2000      	movs	r0, #0
   20e6c:	47a8      	blx	r5
	glcd_write();
   20e6e:	4b2d      	ldr	r3, [pc, #180]	; (20f24 <fn_debug_backlight+0x16c>)
   20e70:	4798      	blx	r3
}
   20e72:	bc0c      	pop	{r2, r3}
   20e74:	4690      	mov	r8, r2
   20e76:	4699      	mov	r9, r3
   20e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			colorPtr = backlightCustomAdjust(colorChar, -1);
   20e7a:	2101      	movs	r1, #1
   20e7c:	7830      	ldrb	r0, [r6, #0]
   20e7e:	4249      	negs	r1, r1
   20e80:	4b29      	ldr	r3, [pc, #164]	; (20f28 <fn_debug_backlight+0x170>)
   20e82:	4798      	blx	r3
   20e84:	4e18      	ldr	r6, [pc, #96]	; (20ee8 <fn_debug_backlight+0x130>)
   20e86:	6030      	str	r0, [r6, #0]
			break;
   20e88:	e7b8      	b.n	20dfc <fn_debug_backlight+0x44>
			colorPtr = backlightCustomAdjust(colorChar, 1);
   20e8a:	7830      	ldrb	r0, [r6, #0]
   20e8c:	2101      	movs	r1, #1
   20e8e:	4b26      	ldr	r3, [pc, #152]	; (20f28 <fn_debug_backlight+0x170>)
   20e90:	4798      	blx	r3
   20e92:	4e15      	ldr	r6, [pc, #84]	; (20ee8 <fn_debug_backlight+0x130>)
   20e94:	6030      	str	r0, [r6, #0]
			break;
   20e96:	e7b1      	b.n	20dfc <fn_debug_backlight+0x44>
		curY_N = 3;
   20e98:	2203      	movs	r2, #3
   20e9a:	4f0f      	ldr	r7, [pc, #60]	; (20ed8 <fn_debug_backlight+0x120>)
		curY = 0;
   20e9c:	2300      	movs	r3, #0
		curY_N = 3;
   20e9e:	703a      	strb	r2, [r7, #0]
		curY_off = 2;
   20ea0:	4a0c      	ldr	r2, [pc, #48]	; (20ed4 <fn_debug_backlight+0x11c>)
		options.backlight_setting.colorRef = 0;//  0 is custom Color
   20ea2:	4822      	ldr	r0, [pc, #136]	; (20f2c <fn_debug_backlight+0x174>)
		curY_off = 2;
   20ea4:	4690      	mov	r8, r2
   20ea6:	2202      	movs	r2, #2
   20ea8:	4641      	mov	r1, r8
		options.backlight_setting.colorRef = 0;//  0 is custom Color
   20eaa:	7543      	strb	r3, [r0, #21]
		curY = 0;
   20eac:	7023      	strb	r3, [r4, #0]
		backlightOn(&options.backlight_setting);
   20eae:	3014      	adds	r0, #20
   20eb0:	4b1f      	ldr	r3, [pc, #124]	; (20f30 <fn_debug_backlight+0x178>)
		curY_off = 2;
   20eb2:	700a      	strb	r2, [r1, #0]
		backlightOn(&options.backlight_setting);
   20eb4:	4798      	blx	r3
	switch(curY){
   20eb6:	7821      	ldrb	r1, [r4, #0]
			colorChar = 'g';
   20eb8:	4e08      	ldr	r6, [pc, #32]	; (20edc <fn_debug_backlight+0x124>)
	switch(curY){
   20eba:	2903      	cmp	r1, #3
   20ebc:	d000      	beq.n	20ec0 <fn_debug_backlight+0x108>
   20ebe:	e78c      	b.n	20dda <fn_debug_backlight+0x22>
			colorChar = 'g';
   20ec0:	2367      	movs	r3, #103	; 0x67
   20ec2:	7033      	strb	r3, [r6, #0]
			break;
   20ec4:	e78e      	b.n	20de4 <fn_debug_backlight+0x2c>
			colorChar = 'b';
   20ec6:	2362      	movs	r3, #98	; 0x62
   20ec8:	7033      	strb	r3, [r6, #0]
			break;
   20eca:	e78b      	b.n	20de4 <fn_debug_backlight+0x2c>
   20ecc:	20004370 	.word	0x20004370
   20ed0:	20002d10 	.word	0x20002d10
   20ed4:	20002af8 	.word	0x20002af8
   20ed8:	200051c0 	.word	0x200051c0
   20edc:	20000d52 	.word	0x20000d52
   20ee0:	200041d8 	.word	0x200041d8
   20ee4:	000103cd 	.word	0x000103cd
   20ee8:	20000d54 	.word	0x20000d54
   20eec:	0001ca59 	.word	0x0001ca59
   20ef0:	20002da0 	.word	0x20002da0
   20ef4:	00028999 	.word	0x00028999
   20ef8:	0002ef78 	.word	0x0002ef78
   20efc:	0001e2f5 	.word	0x0001e2f5
   20f00:	00028ab1 	.word	0x00028ab1
   20f04:	0002ef8c 	.word	0x0002ef8c
   20f08:	0002ef98 	.word	0x0002ef98
   20f0c:	0002efa4 	.word	0x0002efa4
   20f10:	0002e36c 	.word	0x0002e36c
   20f14:	000104dd 	.word	0x000104dd
   20f18:	0002efb0 	.word	0x0002efb0
   20f1c:	0002efb8 	.word	0x0002efb8
   20f20:	0002dc5c 	.word	0x0002dc5c
   20f24:	0001db91 	.word	0x0001db91
   20f28:	0000e611 	.word	0x0000e611
   20f2c:	20002d20 	.word	0x20002d20
   20f30:	0000ea59 	.word	0x0000ea59

00020f34 <fn_set_options>:
void fn_set_options(void){
   20f34:	b5f0      	push	{r4, r5, r6, r7, lr}
   20f36:	46d6      	mov	lr, sl
   20f38:	464f      	mov	r7, r9
   20f3a:	4646      	mov	r6, r8
   20f3c:	b5c0      	push	{r6, r7, lr}
	if (state_change) {
   20f3e:	4b78      	ldr	r3, [pc, #480]	; (21120 <fn_set_options+0x1ec>)
   20f40:	781b      	ldrb	r3, [r3, #0]
   20f42:	2b00      	cmp	r3, #0
   20f44:	d000      	beq.n	20f48 <fn_set_options+0x14>
   20f46:	e08c      	b.n	21062 <fn_set_options+0x12e>
   20f48:	4b76      	ldr	r3, [pc, #472]	; (21124 <fn_set_options+0x1f0>)
   20f4a:	4699      	mov	r9, r3
   20f4c:	7819      	ldrb	r1, [r3, #0]
   20f4e:	4b76      	ldr	r3, [pc, #472]	; (21128 <fn_set_options+0x1f4>)
   20f50:	781a      	ldrb	r2, [r3, #0]
   20f52:	4b76      	ldr	r3, [pc, #472]	; (2112c <fn_set_options+0x1f8>)
   20f54:	469a      	mov	sl, r3
	curY = getCursor(last_input, curY, curY_N);
   20f56:	4c76      	ldr	r4, [pc, #472]	; (21130 <fn_set_options+0x1fc>)
   20f58:	4b76      	ldr	r3, [pc, #472]	; (21134 <fn_set_options+0x200>)
   20f5a:	6820      	ldr	r0, [r4, #0]
   20f5c:	4798      	blx	r3
   20f5e:	464b      	mov	r3, r9
   20f60:	7018      	strb	r0, [r3, #0]
	if (last_input==input_button1){
   20f62:	6823      	ldr	r3, [r4, #0]
   20f64:	2b00      	cmp	r3, #0
   20f66:	d109      	bne.n	20f7c <fn_set_options+0x48>
		switch (curY){
   20f68:	2806      	cmp	r0, #6
   20f6a:	d807      	bhi.n	20f7c <fn_set_options+0x48>
   20f6c:	4b72      	ldr	r3, [pc, #456]	; (21138 <fn_set_options+0x204>)
   20f6e:	0080      	lsls	r0, r0, #2
   20f70:	581b      	ldr	r3, [r3, r0]
   20f72:	469f      	mov	pc, r3
			adjustErrorSensitivity();
   20f74:	4b71      	ldr	r3, [pc, #452]	; (2113c <fn_set_options+0x208>)
   20f76:	4798      	blx	r3
			save_user_settings();
   20f78:	4b71      	ldr	r3, [pc, #452]	; (21140 <fn_set_options+0x20c>)
   20f7a:	4798      	blx	r3
   20f7c:	4e71      	ldr	r6, [pc, #452]	; (21144 <fn_set_options+0x210>)
	glcd_clear_buffer();
   20f7e:	4b72      	ldr	r3, [pc, #456]	; (21148 <fn_set_options+0x214>)
   20f80:	4798      	blx	r3
	if (options.current_unit_dist==feet){
   20f82:	7a33      	ldrb	r3, [r6, #8]
		sprintf(display_str, "Dist: Feet");
   20f84:	4c71      	ldr	r4, [pc, #452]	; (2114c <fn_set_options+0x218>)
	if (options.current_unit_dist==feet){
   20f86:	2b00      	cmp	r3, #0
   20f88:	d000      	beq.n	20f8c <fn_set_options+0x58>
   20f8a:	e07a      	b.n	21082 <fn_set_options+0x14e>
		sprintf(display_str, "Dist: Feet");
   20f8c:	4b70      	ldr	r3, [pc, #448]	; (21150 <fn_set_options+0x21c>)
   20f8e:	220b      	movs	r2, #11
   20f90:	4970      	ldr	r1, [pc, #448]	; (21154 <fn_set_options+0x220>)
   20f92:	0020      	movs	r0, r4
   20f94:	4698      	mov	r8, r3
   20f96:	4798      	blx	r3
	glcd_tiny_draw_string(5, 1, display_str);
   20f98:	0022      	movs	r2, r4
   20f9a:	2101      	movs	r1, #1
   20f9c:	2005      	movs	r0, #5
   20f9e:	4d6e      	ldr	r5, [pc, #440]	; (21158 <fn_set_options+0x224>)
   20fa0:	47a8      	blx	r5
	if (options.current_unit_temp==fahrenheit){
   20fa2:	7a73      	ldrb	r3, [r6, #9]
   20fa4:	2b05      	cmp	r3, #5
   20fa6:	d100      	bne.n	20faa <fn_set_options+0x76>
   20fa8:	e07a      	b.n	210a0 <fn_set_options+0x16c>
		sprintf(display_str, "Temp: Celsius");
   20faa:	220e      	movs	r2, #14
   20fac:	496b      	ldr	r1, [pc, #428]	; (2115c <fn_set_options+0x228>)
   20fae:	0020      	movs	r0, r4
   20fb0:	47c0      	blx	r8
	glcd_tiny_draw_string(5, 2, display_str);
   20fb2:	0022      	movs	r2, r4
   20fb4:	2102      	movs	r1, #2
   20fb6:	2005      	movs	r0, #5
   20fb8:	47a8      	blx	r5
	sprintf(display_str,"Shot Delay: %d sec",options.shot_delay);
   20fba:	4f69      	ldr	r7, [pc, #420]	; (21160 <fn_set_options+0x22c>)
   20fbc:	7ab2      	ldrb	r2, [r6, #10]
   20fbe:	4969      	ldr	r1, [pc, #420]	; (21164 <fn_set_options+0x230>)
   20fc0:	0020      	movs	r0, r4
   20fc2:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 3, display_str);
   20fc4:	0022      	movs	r2, r4
   20fc6:	2103      	movs	r1, #3
   20fc8:	2005      	movs	r0, #5
   20fca:	47a8      	blx	r5
	sprintf(display_str,"Charge Curr: %dmA",options.chargeCurrent);
   20fcc:	68f2      	ldr	r2, [r6, #12]
   20fce:	4966      	ldr	r1, [pc, #408]	; (21168 <fn_set_options+0x234>)
   20fd0:	0020      	movs	r0, r4
   20fd2:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 4, display_str);
   20fd4:	0022      	movs	r2, r4
   20fd6:	2104      	movs	r1, #4
   20fd8:	2005      	movs	r0, #5
   20fda:	47a8      	blx	r5
	sprintf(display_str,"Err Sens: %0.2f deg", options.errorSensitivity);
   20fdc:	6930      	ldr	r0, [r6, #16]
   20fde:	4b63      	ldr	r3, [pc, #396]	; (2116c <fn_set_options+0x238>)
   20fe0:	4798      	blx	r3
   20fe2:	000b      	movs	r3, r1
   20fe4:	0002      	movs	r2, r0
   20fe6:	4962      	ldr	r1, [pc, #392]	; (21170 <fn_set_options+0x23c>)
   20fe8:	0020      	movs	r0, r4
   20fea:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 5, display_str);
   20fec:	0022      	movs	r2, r4
   20fee:	2105      	movs	r1, #5
   20ff0:	2005      	movs	r0, #5
   20ff2:	47a8      	blx	r5
	sprintf(display_str,"BL Color: %s", backlightGetCurrentColor(&options.backlight_setting));
   20ff4:	0030      	movs	r0, r6
   20ff6:	4b5f      	ldr	r3, [pc, #380]	; (21174 <fn_set_options+0x240>)
   20ff8:	3014      	adds	r0, #20
   20ffa:	4798      	blx	r3
   20ffc:	495e      	ldr	r1, [pc, #376]	; (21178 <fn_set_options+0x244>)
   20ffe:	0002      	movs	r2, r0
   21000:	0020      	movs	r0, r4
   21002:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 6, display_str);
   21004:	0022      	movs	r2, r4
   21006:	2106      	movs	r1, #6
   21008:	2005      	movs	r0, #5
   2100a:	47a8      	blx	r5
	sprintf(display_str,"BL Level: %d", options.backlight_setting.brightness);
   2100c:	7d32      	ldrb	r2, [r6, #20]
   2100e:	495b      	ldr	r1, [pc, #364]	; (2117c <fn_set_options+0x248>)
   21010:	0020      	movs	r0, r4
   21012:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 7, display_str);
   21014:	0022      	movs	r2, r4
   21016:	2107      	movs	r1, #7
   21018:	2005      	movs	r0, #5
   2101a:	47a8      	blx	r5
	sprintf(display_str,"Options:");
   2101c:	2209      	movs	r2, #9
   2101e:	4958      	ldr	r1, [pc, #352]	; (21180 <fn_set_options+0x24c>)
   21020:	0020      	movs	r0, r4
   21022:	47c0      	blx	r8
	glcd_tiny_draw_string(0,0,display_str);
   21024:	0022      	movs	r2, r4
   21026:	2100      	movs	r1, #0
   21028:	2000      	movs	r0, #0
   2102a:	47a8      	blx	r5
	drawSoftKeys("Adjust","<",">","Back");
   2102c:	4e55      	ldr	r6, [pc, #340]	; (21184 <fn_set_options+0x250>)
   2102e:	4b56      	ldr	r3, [pc, #344]	; (21188 <fn_set_options+0x254>)
   21030:	0032      	movs	r2, r6
   21032:	4f56      	ldr	r7, [pc, #344]	; (2118c <fn_set_options+0x258>)
   21034:	4956      	ldr	r1, [pc, #344]	; (21190 <fn_set_options+0x25c>)
   21036:	4857      	ldr	r0, [pc, #348]	; (21194 <fn_set_options+0x260>)
   21038:	47b8      	blx	r7
	sprintf(display_str, ">");
   2103a:	0031      	movs	r1, r6
   2103c:	2202      	movs	r2, #2
   2103e:	0020      	movs	r0, r4
   21040:	47c0      	blx	r8
	glcd_tiny_draw_string(0, curY+curY_off,display_str);
   21042:	464b      	mov	r3, r9
   21044:	7819      	ldrb	r1, [r3, #0]
   21046:	4653      	mov	r3, sl
   21048:	781b      	ldrb	r3, [r3, #0]
   2104a:	0022      	movs	r2, r4
   2104c:	18c9      	adds	r1, r1, r3
   2104e:	b2c9      	uxtb	r1, r1
   21050:	2000      	movs	r0, #0
   21052:	47a8      	blx	r5
	glcd_write();
   21054:	4b50      	ldr	r3, [pc, #320]	; (21198 <fn_set_options+0x264>)
   21056:	4798      	blx	r3
}
   21058:	bc1c      	pop	{r2, r3, r4}
   2105a:	4690      	mov	r8, r2
   2105c:	4699      	mov	r9, r3
   2105e:	46a2      	mov	sl, r4
   21060:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curY = 0;
   21062:	4b30      	ldr	r3, [pc, #192]	; (21124 <fn_set_options+0x1f0>)
		curY_off = 1;
   21064:	2100      	movs	r1, #0
		curY = 0;
   21066:	4699      	mov	r9, r3
   21068:	2300      	movs	r3, #0
   2106a:	464a      	mov	r2, r9
   2106c:	7013      	strb	r3, [r2, #0]
		curY_N = 7;
   2106e:	2207      	movs	r2, #7
   21070:	4b2d      	ldr	r3, [pc, #180]	; (21128 <fn_set_options+0x1f4>)
   21072:	701a      	strb	r2, [r3, #0]
		curY_off = 1;
   21074:	4b2d      	ldr	r3, [pc, #180]	; (2112c <fn_set_options+0x1f8>)
   21076:	469a      	mov	sl, r3
   21078:	2301      	movs	r3, #1
   2107a:	4652      	mov	r2, sl
   2107c:	7013      	strb	r3, [r2, #0]
   2107e:	2207      	movs	r2, #7
   21080:	e769      	b.n	20f56 <fn_set_options+0x22>
		sprintf(display_str, "Dist: Meters");
   21082:	4b33      	ldr	r3, [pc, #204]	; (21150 <fn_set_options+0x21c>)
   21084:	220d      	movs	r2, #13
   21086:	4945      	ldr	r1, [pc, #276]	; (2119c <fn_set_options+0x268>)
   21088:	0020      	movs	r0, r4
   2108a:	4698      	mov	r8, r3
   2108c:	4798      	blx	r3
	glcd_tiny_draw_string(5, 1, display_str);
   2108e:	0022      	movs	r2, r4
   21090:	2101      	movs	r1, #1
   21092:	2005      	movs	r0, #5
   21094:	4d30      	ldr	r5, [pc, #192]	; (21158 <fn_set_options+0x224>)
   21096:	47a8      	blx	r5
	if (options.current_unit_temp==fahrenheit){
   21098:	7a73      	ldrb	r3, [r6, #9]
   2109a:	2b05      	cmp	r3, #5
   2109c:	d000      	beq.n	210a0 <fn_set_options+0x16c>
   2109e:	e784      	b.n	20faa <fn_set_options+0x76>
		sprintf(display_str, "Temp: Fahrenheit");
   210a0:	2211      	movs	r2, #17
   210a2:	493f      	ldr	r1, [pc, #252]	; (211a0 <fn_set_options+0x26c>)
   210a4:	0020      	movs	r0, r4
   210a6:	47c0      	blx	r8
   210a8:	e783      	b.n	20fb2 <fn_set_options+0x7e>
			backlightColorToggle(&options.backlight_setting);
   210aa:	4e3e      	ldr	r6, [pc, #248]	; (211a4 <fn_set_options+0x270>)
   210ac:	4b3e      	ldr	r3, [pc, #248]	; (211a8 <fn_set_options+0x274>)
   210ae:	0030      	movs	r0, r6
   210b0:	4798      	blx	r3
			save_user_settings();
   210b2:	4b23      	ldr	r3, [pc, #140]	; (21140 <fn_set_options+0x20c>)
   210b4:	4798      	blx	r3
   210b6:	3e14      	subs	r6, #20
			break;
   210b8:	e761      	b.n	20f7e <fn_set_options+0x4a>
			if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   210ba:	23fa      	movs	r3, #250	; 0xfa
   210bc:	4e21      	ldr	r6, [pc, #132]	; (21144 <fn_set_options+0x210>)
   210be:	005b      	lsls	r3, r3, #1
   210c0:	68f2      	ldr	r2, [r6, #12]
			else{options.chargeCurrent = 500;}
   210c2:	0018      	movs	r0, r3
			if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   210c4:	429a      	cmp	r2, r3
   210c6:	d028      	beq.n	2111a <fn_set_options+0x1e6>
			setChargeCurrent(options.chargeCurrent);
   210c8:	4b38      	ldr	r3, [pc, #224]	; (211ac <fn_set_options+0x278>)
   210ca:	60f0      	str	r0, [r6, #12]
   210cc:	4798      	blx	r3
			save_user_settings();
   210ce:	4b1c      	ldr	r3, [pc, #112]	; (21140 <fn_set_options+0x20c>)
   210d0:	4798      	blx	r3
			break;
   210d2:	e754      	b.n	20f7e <fn_set_options+0x4a>
			options.shot_delay = options.shot_delay+1;
   210d4:	4e1b      	ldr	r6, [pc, #108]	; (21144 <fn_set_options+0x210>)
   210d6:	7ab3      	ldrb	r3, [r6, #10]
   210d8:	3301      	adds	r3, #1
   210da:	b2db      	uxtb	r3, r3
			if (options.shot_delay>SHOT_DELAY_MAX){options.shot_delay = 0;}
   210dc:	2b05      	cmp	r3, #5
   210de:	d900      	bls.n	210e2 <fn_set_options+0x1ae>
   210e0:	2300      	movs	r3, #0
   210e2:	72b3      	strb	r3, [r6, #10]
   210e4:	e7f3      	b.n	210ce <fn_set_options+0x19a>
			if (options.current_unit_temp == celsius){ options.current_unit_temp = fahrenheit;}
   210e6:	4e17      	ldr	r6, [pc, #92]	; (21144 <fn_set_options+0x210>)
   210e8:	7a73      	ldrb	r3, [r6, #9]
   210ea:	3b04      	subs	r3, #4
   210ec:	4259      	negs	r1, r3
   210ee:	4159      	adcs	r1, r3
   210f0:	1d0b      	adds	r3, r1, #4
   210f2:	7273      	strb	r3, [r6, #9]
			save_user_settings();
   210f4:	4b12      	ldr	r3, [pc, #72]	; (21140 <fn_set_options+0x20c>)
   210f6:	4798      	blx	r3
			break;
   210f8:	e741      	b.n	20f7e <fn_set_options+0x4a>
			backlightLevelToggle(&options.backlight_setting);
   210fa:	4e2a      	ldr	r6, [pc, #168]	; (211a4 <fn_set_options+0x270>)
   210fc:	4b2c      	ldr	r3, [pc, #176]	; (211b0 <fn_set_options+0x27c>)
   210fe:	0030      	movs	r0, r6
   21100:	4798      	blx	r3
			save_user_settings();
   21102:	4b0f      	ldr	r3, [pc, #60]	; (21140 <fn_set_options+0x20c>)
   21104:	4798      	blx	r3
   21106:	3e14      	subs	r6, #20
			break;
   21108:	e739      	b.n	20f7e <fn_set_options+0x4a>
   2110a:	4e0e      	ldr	r6, [pc, #56]	; (21144 <fn_set_options+0x210>)
			if (options.current_unit_dist == feet){ options.current_unit_dist = meters;}
   2110c:	7a32      	ldrb	r2, [r6, #8]
   2110e:	4253      	negs	r3, r2
   21110:	4153      	adcs	r3, r2
   21112:	7233      	strb	r3, [r6, #8]
			save_user_settings();
   21114:	4b0a      	ldr	r3, [pc, #40]	; (21140 <fn_set_options+0x20c>)
   21116:	4798      	blx	r3
			break;
   21118:	e731      	b.n	20f7e <fn_set_options+0x4a>
			if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   2111a:	3891      	subs	r0, #145	; 0x91
   2111c:	38ff      	subs	r0, #255	; 0xff
   2111e:	e7d3      	b.n	210c8 <fn_set_options+0x194>
   21120:	20004370 	.word	0x20004370
   21124:	20002d10 	.word	0x20002d10
   21128:	200051c0 	.word	0x200051c0
   2112c:	20002af8 	.word	0x20002af8
   21130:	200041d8 	.word	0x200041d8
   21134:	000103cd 	.word	0x000103cd
   21138:	0002eab0 	.word	0x0002eab0
   2113c:	00011e59 	.word	0x00011e59
   21140:	00011089 	.word	0x00011089
   21144:	20002d20 	.word	0x20002d20
   21148:	0001ca59 	.word	0x0001ca59
   2114c:	20002da0 	.word	0x20002da0
   21150:	00028999 	.word	0x00028999
   21154:	0002f508 	.word	0x0002f508
   21158:	0001e2f5 	.word	0x0001e2f5
   2115c:	0002f538 	.word	0x0002f538
   21160:	00028ab1 	.word	0x00028ab1
   21164:	0002f548 	.word	0x0002f548
   21168:	0002f55c 	.word	0x0002f55c
   2116c:	0002878d 	.word	0x0002878d
   21170:	0002f570 	.word	0x0002f570
   21174:	0000ea49 	.word	0x0000ea49
   21178:	0002f584 	.word	0x0002f584
   2117c:	0002f594 	.word	0x0002f594
   21180:	0002f5a4 	.word	0x0002f5a4
   21184:	0002dc5c 	.word	0x0002dc5c
   21188:	0002f1d4 	.word	0x0002f1d4
   2118c:	000104dd 	.word	0x000104dd
   21190:	0002dc58 	.word	0x0002dc58
   21194:	0002f5b0 	.word	0x0002f5b0
   21198:	0001db91 	.word	0x0001db91
   2119c:	0002f514 	.word	0x0002f514
   211a0:	0002f524 	.word	0x0002f524
   211a4:	20002d34 	.word	0x20002d34
   211a8:	0000e651 	.word	0x0000e651
   211ac:	0000edf1 	.word	0x0000edf1
   211b0:	0000e945 	.word	0x0000e945

000211b4 <fn_debug_BLE>:
void fn_debug_BLE(void){
   211b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   211b6:	4657      	mov	r7, sl
   211b8:	46de      	mov	lr, fp
   211ba:	464e      	mov	r6, r9
   211bc:	4645      	mov	r5, r8
   211be:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change) {
   211c0:	4b5e      	ldr	r3, [pc, #376]	; (2133c <fn_debug_BLE+0x188>)
void fn_debug_BLE(void){
   211c2:	b087      	sub	sp, #28
	if (state_change) {
   211c4:	781b      	ldrb	r3, [r3, #0]
		curY=0;
   211c6:	4f5e      	ldr	r7, [pc, #376]	; (21340 <fn_debug_BLE+0x18c>)
	if (state_change) {
   211c8:	2b00      	cmp	r3, #0
   211ca:	d000      	beq.n	211ce <fn_debug_BLE+0x1a>
   211cc:	e0a6      	b.n	2131c <fn_debug_BLE+0x168>
   211ce:	4b5d      	ldr	r3, [pc, #372]	; (21344 <fn_debug_BLE+0x190>)
   211d0:	7839      	ldrb	r1, [r7, #0]
   211d2:	4699      	mov	r9, r3
   211d4:	781a      	ldrb	r2, [r3, #0]
   211d6:	4b5c      	ldr	r3, [pc, #368]	; (21348 <fn_debug_BLE+0x194>)
   211d8:	469a      	mov	sl, r3
	curY = getCursor(last_input, curY, curY_N);
   211da:	4b5c      	ldr	r3, [pc, #368]	; (2134c <fn_debug_BLE+0x198>)
	for (i=0;i<curY_N;i++){
   211dc:	2400      	movs	r4, #0
	curY = getCursor(last_input, curY, curY_N);
   211de:	6818      	ldr	r0, [r3, #0]
   211e0:	469b      	mov	fp, r3
   211e2:	4b5b      	ldr	r3, [pc, #364]	; (21350 <fn_debug_BLE+0x19c>)
   211e4:	4798      	blx	r3
	glcd_clear_buffer();
   211e6:	4b5b      	ldr	r3, [pc, #364]	; (21354 <fn_debug_BLE+0x1a0>)
	curY = getCursor(last_input, curY, curY_N);
   211e8:	7038      	strb	r0, [r7, #0]
	glcd_clear_buffer();
   211ea:	4798      	blx	r3
	sprintf(display_str,"BLE Advanced:");
   211ec:	4d5a      	ldr	r5, [pc, #360]	; (21358 <fn_debug_BLE+0x1a4>)
   211ee:	220e      	movs	r2, #14
   211f0:	495a      	ldr	r1, [pc, #360]	; (2135c <fn_debug_BLE+0x1a8>)
   211f2:	4b5b      	ldr	r3, [pc, #364]	; (21360 <fn_debug_BLE+0x1ac>)
   211f4:	0028      	movs	r0, r5
   211f6:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   211f8:	4b5a      	ldr	r3, [pc, #360]	; (21364 <fn_debug_BLE+0x1b0>)
   211fa:	002a      	movs	r2, r5
   211fc:	2100      	movs	r1, #0
   211fe:	2000      	movs	r0, #0
   21200:	4698      	mov	r8, r3
   21202:	4798      	blx	r3
	for (i=0;i<curY_N;i++){
   21204:	464b      	mov	r3, r9
   21206:	781b      	ldrb	r3, [r3, #0]
   21208:	ae03      	add	r6, sp, #12
   2120a:	2b00      	cmp	r3, #0
   2120c:	d122      	bne.n	21254 <fn_debug_BLE+0xa0>
   2120e:	e04b      	b.n	212a8 <fn_debug_BLE+0xf4>
		switch (i){
   21210:	2c01      	cmp	r4, #1
   21212:	d03b      	beq.n	2128c <fn_debug_BLE+0xd8>
   21214:	2c00      	cmp	r4, #0
   21216:	d032      	beq.n	2127e <fn_debug_BLE+0xca>
   21218:	2c02      	cmp	r4, #2
   2121a:	d10a      	bne.n	21232 <fn_debug_BLE+0x7e>
				strcpy(display_str,"Curr Comm: ");
   2121c:	4b50      	ldr	r3, [pc, #320]	; (21360 <fn_debug_BLE+0x1ac>)
   2121e:	220c      	movs	r2, #12
   21220:	4951      	ldr	r1, [pc, #324]	; (21368 <fn_debug_BLE+0x1b4>)
   21222:	0028      	movs	r0, r5
   21224:	4798      	blx	r3
				if (isBleCommEnabled()){
   21226:	4b51      	ldr	r3, [pc, #324]	; (2136c <fn_debug_BLE+0x1b8>)
   21228:	4798      	blx	r3
   2122a:	2800      	cmp	r0, #0
   2122c:	d036      	beq.n	2129c <fn_debug_BLE+0xe8>
					strcpy(addStr,"CPU");
   2122e:	4b50      	ldr	r3, [pc, #320]	; (21370 <fn_debug_BLE+0x1bc>)
   21230:	6033      	str	r3, [r6, #0]
		strcat(display_str, addStr);
   21232:	0031      	movs	r1, r6
   21234:	4b4f      	ldr	r3, [pc, #316]	; (21374 <fn_debug_BLE+0x1c0>)
   21236:	0028      	movs	r0, r5
   21238:	4798      	blx	r3
		glcd_tiny_draw_string(5, i+curY_off,display_str);
   2123a:	4653      	mov	r3, sl
   2123c:	7819      	ldrb	r1, [r3, #0]
   2123e:	002a      	movs	r2, r5
   21240:	1861      	adds	r1, r4, r1
   21242:	b2c9      	uxtb	r1, r1
   21244:	2005      	movs	r0, #5
   21246:	47c0      	blx	r8
	for (i=0;i<curY_N;i++){
   21248:	464b      	mov	r3, r9
   2124a:	3401      	adds	r4, #1
   2124c:	781b      	ldrb	r3, [r3, #0]
   2124e:	b2e4      	uxtb	r4, r4
   21250:	42a3      	cmp	r3, r4
   21252:	d929      	bls.n	212a8 <fn_debug_BLE+0xf4>
		if ((curY==i) && (last_input==input_button1)){
   21254:	783b      	ldrb	r3, [r7, #0]
   21256:	42a3      	cmp	r3, r4
   21258:	d1da      	bne.n	21210 <fn_debug_BLE+0x5c>
   2125a:	465b      	mov	r3, fp
   2125c:	681b      	ldr	r3, [r3, #0]
   2125e:	2b00      	cmp	r3, #0
   21260:	d1d6      	bne.n	21210 <fn_debug_BLE+0x5c>
		switch (i){
   21262:	2c01      	cmp	r4, #1
   21264:	d050      	beq.n	21308 <fn_debug_BLE+0x154>
   21266:	2c00      	cmp	r4, #0
   21268:	d1d6      	bne.n	21218 <fn_debug_BLE+0x64>
				strcpy(display_str,"RST to AT Mode ");
   2126a:	2210      	movs	r2, #16
   2126c:	4942      	ldr	r1, [pc, #264]	; (21378 <fn_debug_BLE+0x1c4>)
   2126e:	4b3c      	ldr	r3, [pc, #240]	; (21360 <fn_debug_BLE+0x1ac>)
   21270:	0028      	movs	r0, r5
   21272:	4798      	blx	r3
					BLE_reset_to_AT_mode();
   21274:	4b41      	ldr	r3, [pc, #260]	; (2137c <fn_debug_BLE+0x1c8>)
   21276:	4798      	blx	r3
					strcpy(addStr,"RST");
   21278:	4b41      	ldr	r3, [pc, #260]	; (21380 <fn_debug_BLE+0x1cc>)
   2127a:	6033      	str	r3, [r6, #0]
   2127c:	e7d9      	b.n	21232 <fn_debug_BLE+0x7e>
				strcpy(display_str,"RST to AT Mode ");
   2127e:	2210      	movs	r2, #16
   21280:	493d      	ldr	r1, [pc, #244]	; (21378 <fn_debug_BLE+0x1c4>)
   21282:	0028      	movs	r0, r5
   21284:	4b36      	ldr	r3, [pc, #216]	; (21360 <fn_debug_BLE+0x1ac>)
   21286:	4798      	blx	r3
					strcpy(addStr,"");
   21288:	7034      	strb	r4, [r6, #0]
   2128a:	e7d2      	b.n	21232 <fn_debug_BLE+0x7e>
				strcpy(display_str,"RST to Run Mode");
   2128c:	4b34      	ldr	r3, [pc, #208]	; (21360 <fn_debug_BLE+0x1ac>)
   2128e:	2210      	movs	r2, #16
   21290:	493c      	ldr	r1, [pc, #240]	; (21384 <fn_debug_BLE+0x1d0>)
   21292:	0028      	movs	r0, r5
   21294:	4798      	blx	r3
					strcpy(addStr,"");
   21296:	2300      	movs	r3, #0
   21298:	7033      	strb	r3, [r6, #0]
   2129a:	e7ca      	b.n	21232 <fn_debug_BLE+0x7e>
					strcpy(addStr,"TERM");
   2129c:	4b3a      	ldr	r3, [pc, #232]	; (21388 <fn_debug_BLE+0x1d4>)
   2129e:	681a      	ldr	r2, [r3, #0]
   212a0:	6032      	str	r2, [r6, #0]
   212a2:	791b      	ldrb	r3, [r3, #4]
   212a4:	7133      	strb	r3, [r6, #4]
   212a6:	e7c4      	b.n	21232 <fn_debug_BLE+0x7e>
	drawSoftKeys("Adjust","<",">","Back");
   212a8:	4c38      	ldr	r4, [pc, #224]	; (2138c <fn_debug_BLE+0x1d8>)
   212aa:	4b39      	ldr	r3, [pc, #228]	; (21390 <fn_debug_BLE+0x1dc>)
   212ac:	0022      	movs	r2, r4
   212ae:	4939      	ldr	r1, [pc, #228]	; (21394 <fn_debug_BLE+0x1e0>)
   212b0:	4839      	ldr	r0, [pc, #228]	; (21398 <fn_debug_BLE+0x1e4>)
   212b2:	4e3a      	ldr	r6, [pc, #232]	; (2139c <fn_debug_BLE+0x1e8>)
   212b4:	47b0      	blx	r6
	sprintf(display_str, ">");
   212b6:	0021      	movs	r1, r4
   212b8:	2202      	movs	r2, #2
   212ba:	0028      	movs	r0, r5
   212bc:	4b28      	ldr	r3, [pc, #160]	; (21360 <fn_debug_BLE+0x1ac>)
   212be:	4798      	blx	r3
	glcd_tiny_draw_string(0, curY+curY_off,display_str);
   212c0:	4653      	mov	r3, sl
   212c2:	7839      	ldrb	r1, [r7, #0]
   212c4:	781b      	ldrb	r3, [r3, #0]
   212c6:	002a      	movs	r2, r5
   212c8:	18c9      	adds	r1, r1, r3
   212ca:	b2c9      	uxtb	r1, r1
   212cc:	2000      	movs	r0, #0
   212ce:	47c0      	blx	r8
	glcd_draw_rect(0, 32, 104, 32,BLACK);
   212d0:	2301      	movs	r3, #1
   212d2:	2268      	movs	r2, #104	; 0x68
   212d4:	9300      	str	r3, [sp, #0]
   212d6:	2120      	movs	r1, #32
   212d8:	331f      	adds	r3, #31
   212da:	2000      	movs	r0, #0
   212dc:	4c30      	ldr	r4, [pc, #192]	; (213a0 <fn_debug_BLE+0x1ec>)
   212de:	47a0      	blx	r4
	print_Buff_to_Box(debugBuff, debugBuffIndex, 3, 33, 19, 3);
   212e0:	4b30      	ldr	r3, [pc, #192]	; (213a4 <fn_debug_BLE+0x1f0>)
   212e2:	2203      	movs	r2, #3
   212e4:	6819      	ldr	r1, [r3, #0]
   212e6:	2303      	movs	r3, #3
   212e8:	9301      	str	r3, [sp, #4]
   212ea:	3310      	adds	r3, #16
   212ec:	9300      	str	r3, [sp, #0]
   212ee:	482e      	ldr	r0, [pc, #184]	; (213a8 <fn_debug_BLE+0x1f4>)
   212f0:	330e      	adds	r3, #14
   212f2:	4c2e      	ldr	r4, [pc, #184]	; (213ac <fn_debug_BLE+0x1f8>)
   212f4:	47a0      	blx	r4
	glcd_write();
   212f6:	4b2e      	ldr	r3, [pc, #184]	; (213b0 <fn_debug_BLE+0x1fc>)
   212f8:	4798      	blx	r3
}
   212fa:	b007      	add	sp, #28
   212fc:	bc3c      	pop	{r2, r3, r4, r5}
   212fe:	4690      	mov	r8, r2
   21300:	4699      	mov	r9, r3
   21302:	46a2      	mov	sl, r4
   21304:	46ab      	mov	fp, r5
   21306:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strcpy(display_str,"RST to Run Mode");
   21308:	2210      	movs	r2, #16
   2130a:	491e      	ldr	r1, [pc, #120]	; (21384 <fn_debug_BLE+0x1d0>)
   2130c:	4b14      	ldr	r3, [pc, #80]	; (21360 <fn_debug_BLE+0x1ac>)
   2130e:	0028      	movs	r0, r5
   21310:	4798      	blx	r3
					BLE_init();
   21312:	4b28      	ldr	r3, [pc, #160]	; (213b4 <fn_debug_BLE+0x200>)
   21314:	4798      	blx	r3
					strcpy(addStr,"RST");
   21316:	4b1a      	ldr	r3, [pc, #104]	; (21380 <fn_debug_BLE+0x1cc>)
   21318:	6033      	str	r3, [r6, #0]
   2131a:	e78a      	b.n	21232 <fn_debug_BLE+0x7e>
		curY=0;
   2131c:	2300      	movs	r3, #0
   2131e:	703b      	strb	r3, [r7, #0]
		curY_N=3;
   21320:	4b08      	ldr	r3, [pc, #32]	; (21344 <fn_debug_BLE+0x190>)
		curY_off=1;
   21322:	2100      	movs	r1, #0
		curY_N=3;
   21324:	4699      	mov	r9, r3
   21326:	2303      	movs	r3, #3
   21328:	464a      	mov	r2, r9
   2132a:	7013      	strb	r3, [r2, #0]
		curY_off=1;
   2132c:	4b06      	ldr	r3, [pc, #24]	; (21348 <fn_debug_BLE+0x194>)
   2132e:	469a      	mov	sl, r3
   21330:	2301      	movs	r3, #1
   21332:	4652      	mov	r2, sl
   21334:	7013      	strb	r3, [r2, #0]
   21336:	2203      	movs	r2, #3
   21338:	e74f      	b.n	211da <fn_debug_BLE+0x26>
   2133a:	46c0      	nop			; (mov r8, r8)
   2133c:	20004370 	.word	0x20004370
   21340:	20002d10 	.word	0x20002d10
   21344:	200051c0 	.word	0x200051c0
   21348:	20002af8 	.word	0x20002af8
   2134c:	200041d8 	.word	0x200041d8
   21350:	000103cd 	.word	0x000103cd
   21354:	0001ca59 	.word	0x0001ca59
   21358:	20002da0 	.word	0x20002da0
   2135c:	0002ef34 	.word	0x0002ef34
   21360:	00028999 	.word	0x00028999
   21364:	0001e2f5 	.word	0x0001e2f5
   21368:	0002ef64 	.word	0x0002ef64
   2136c:	0001c111 	.word	0x0001c111
   21370:	00555043 	.word	0x00555043
   21374:	00028b39 	.word	0x00028b39
   21378:	0002ef44 	.word	0x0002ef44
   2137c:	0000f179 	.word	0x0000f179
   21380:	00545352 	.word	0x00545352
   21384:	0002ef54 	.word	0x0002ef54
   21388:	0002ef70 	.word	0x0002ef70
   2138c:	0002dc5c 	.word	0x0002dc5c
   21390:	0002f1d4 	.word	0x0002f1d4
   21394:	0002dc58 	.word	0x0002dc58
   21398:	0002f5b0 	.word	0x0002f5b0
   2139c:	000104dd 	.word	0x000104dd
   213a0:	0001cdf1 	.word	0x0001cdf1
   213a4:	20000d58 	.word	0x20000d58
   213a8:	20002b0c 	.word	0x20002b0c
   213ac:	0001031d 	.word	0x0001031d
   213b0:	0001db91 	.word	0x0001db91
   213b4:	0000f28d 	.word	0x0000f28d

000213b8 <fn_menu_BLE>:
void fn_menu_BLE(void){
   213b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   213ba:	46de      	mov	lr, fp
   213bc:	4657      	mov	r7, sl
   213be:	464e      	mov	r6, r9
   213c0:	4645      	mov	r5, r8
   213c2:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change) {
   213c4:	4b59      	ldr	r3, [pc, #356]	; (2152c <fn_menu_BLE+0x174>)
void fn_menu_BLE(void){
   213c6:	b087      	sub	sp, #28
	if (state_change) {
   213c8:	781b      	ldrb	r3, [r3, #0]
   213ca:	2b00      	cmp	r3, #0
   213cc:	d000      	beq.n	213d0 <fn_menu_BLE+0x18>
   213ce:	e09a      	b.n	21506 <fn_menu_BLE+0x14e>
   213d0:	4b57      	ldr	r3, [pc, #348]	; (21530 <fn_menu_BLE+0x178>)
   213d2:	9301      	str	r3, [sp, #4]
   213d4:	7819      	ldrb	r1, [r3, #0]
   213d6:	4b57      	ldr	r3, [pc, #348]	; (21534 <fn_menu_BLE+0x17c>)
   213d8:	4698      	mov	r8, r3
   213da:	781a      	ldrb	r2, [r3, #0]
   213dc:	4b56      	ldr	r3, [pc, #344]	; (21538 <fn_menu_BLE+0x180>)
   213de:	4699      	mov	r9, r3
	curY = getCursor(last_input, curY, curY_N);
   213e0:	4b56      	ldr	r3, [pc, #344]	; (2153c <fn_menu_BLE+0x184>)
	for(i=0;i<curY_N;i++){
   213e2:	2400      	movs	r4, #0
	curY = getCursor(last_input, curY, curY_N);
   213e4:	6818      	ldr	r0, [r3, #0]
   213e6:	469a      	mov	sl, r3
   213e8:	4b55      	ldr	r3, [pc, #340]	; (21540 <fn_menu_BLE+0x188>)
   213ea:	4798      	blx	r3
   213ec:	9b01      	ldr	r3, [sp, #4]
   213ee:	af03      	add	r7, sp, #12
   213f0:	7018      	strb	r0, [r3, #0]
	glcd_clear_buffer();
   213f2:	4b54      	ldr	r3, [pc, #336]	; (21544 <fn_menu_BLE+0x18c>)
   213f4:	4798      	blx	r3
	sprintf(display_str,"Bluetooth:");
   213f6:	4d54      	ldr	r5, [pc, #336]	; (21548 <fn_menu_BLE+0x190>)
   213f8:	4b54      	ldr	r3, [pc, #336]	; (2154c <fn_menu_BLE+0x194>)
   213fa:	220b      	movs	r2, #11
   213fc:	4954      	ldr	r1, [pc, #336]	; (21550 <fn_menu_BLE+0x198>)
   213fe:	0028      	movs	r0, r5
   21400:	469b      	mov	fp, r3
   21402:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   21404:	002a      	movs	r2, r5
   21406:	2100      	movs	r1, #0
   21408:	2000      	movs	r0, #0
   2140a:	4e52      	ldr	r6, [pc, #328]	; (21554 <fn_menu_BLE+0x19c>)
   2140c:	47b0      	blx	r6
	for(i=0;i<curY_N;i++){
   2140e:	4643      	mov	r3, r8
   21410:	781b      	ldrb	r3, [r3, #0]
   21412:	2b00      	cmp	r3, #0
   21414:	d116      	bne.n	21444 <fn_menu_BLE+0x8c>
   21416:	e031      	b.n	2147c <fn_menu_BLE+0xc4>
		switch (i){
   21418:	2c01      	cmp	r4, #1
   2141a:	d103      	bne.n	21424 <fn_menu_BLE+0x6c>
			sprintf(display_str,"Advanced Menu");
   2141c:	220e      	movs	r2, #14
   2141e:	494e      	ldr	r1, [pc, #312]	; (21558 <fn_menu_BLE+0x1a0>)
   21420:	0028      	movs	r0, r5
   21422:	47d8      	blx	fp
		strcat(display_str, addStr);
   21424:	0039      	movs	r1, r7
   21426:	4b4d      	ldr	r3, [pc, #308]	; (2155c <fn_menu_BLE+0x1a4>)
   21428:	0028      	movs	r0, r5
   2142a:	4798      	blx	r3
		glcd_tiny_draw_string(5, i+curY_off,display_str);
   2142c:	464b      	mov	r3, r9
   2142e:	7819      	ldrb	r1, [r3, #0]
   21430:	002a      	movs	r2, r5
   21432:	1909      	adds	r1, r1, r4
   21434:	b2c9      	uxtb	r1, r1
   21436:	2005      	movs	r0, #5
   21438:	47b0      	blx	r6
	for(i=0;i<curY_N;i++){
   2143a:	4643      	mov	r3, r8
   2143c:	781b      	ldrb	r3, [r3, #0]
   2143e:	3401      	adds	r4, #1
   21440:	42a3      	cmp	r3, r4
   21442:	d91b      	bls.n	2147c <fn_menu_BLE+0xc4>
		if((last_input==input_button1)&&(curY==i)){
   21444:	4653      	mov	r3, sl
   21446:	681b      	ldr	r3, [r3, #0]
   21448:	2b00      	cmp	r3, #0
   2144a:	d103      	bne.n	21454 <fn_menu_BLE+0x9c>
   2144c:	9b01      	ldr	r3, [sp, #4]
   2144e:	781b      	ldrb	r3, [r3, #0]
   21450:	42a3      	cmp	r3, r4
   21452:	d007      	beq.n	21464 <fn_menu_BLE+0xac>
		switch (i){
   21454:	2c00      	cmp	r4, #0
   21456:	d1df      	bne.n	21418 <fn_menu_BLE+0x60>
			sprintf(display_str,"Reset BLE");
   21458:	220a      	movs	r2, #10
   2145a:	4941      	ldr	r1, [pc, #260]	; (21560 <fn_menu_BLE+0x1a8>)
   2145c:	0028      	movs	r0, r5
   2145e:	47d8      	blx	fp
				sprintf(addStr,"");
   21460:	703c      	strb	r4, [r7, #0]
   21462:	e7df      	b.n	21424 <fn_menu_BLE+0x6c>
		switch (i){
   21464:	2c00      	cmp	r4, #0
   21466:	d043      	beq.n	214f0 <fn_menu_BLE+0x138>
   21468:	2c01      	cmp	r4, #1
   2146a:	d1db      	bne.n	21424 <fn_menu_BLE+0x6c>
			sprintf(display_str,"Advanced Menu");
   2146c:	220e      	movs	r2, #14
   2146e:	493a      	ldr	r1, [pc, #232]	; (21558 <fn_menu_BLE+0x1a0>)
   21470:	0028      	movs	r0, r5
   21472:	47d8      	blx	fp
				current_state=st_debug_BLE;
   21474:	2218      	movs	r2, #24
   21476:	4b3b      	ldr	r3, [pc, #236]	; (21564 <fn_menu_BLE+0x1ac>)
   21478:	601a      	str	r2, [r3, #0]
   2147a:	e7d3      	b.n	21424 <fn_menu_BLE+0x6c>
	drawSoftKeys("Adjust","<",">","Back");
   2147c:	4c3a      	ldr	r4, [pc, #232]	; (21568 <fn_menu_BLE+0x1b0>)
   2147e:	4b3b      	ldr	r3, [pc, #236]	; (2156c <fn_menu_BLE+0x1b4>)
   21480:	0022      	movs	r2, r4
   21482:	493b      	ldr	r1, [pc, #236]	; (21570 <fn_menu_BLE+0x1b8>)
   21484:	483b      	ldr	r0, [pc, #236]	; (21574 <fn_menu_BLE+0x1bc>)
   21486:	4f3c      	ldr	r7, [pc, #240]	; (21578 <fn_menu_BLE+0x1c0>)
   21488:	47b8      	blx	r7
	sprintf(display_str, ">");
   2148a:	0021      	movs	r1, r4
   2148c:	2202      	movs	r2, #2
   2148e:	0028      	movs	r0, r5
   21490:	47d8      	blx	fp
	glcd_tiny_draw_string(0, curY+curY_off,display_str);
   21492:	9b01      	ldr	r3, [sp, #4]
   21494:	002a      	movs	r2, r5
   21496:	7819      	ldrb	r1, [r3, #0]
   21498:	464b      	mov	r3, r9
   2149a:	781b      	ldrb	r3, [r3, #0]
   2149c:	2000      	movs	r0, #0
   2149e:	18c9      	adds	r1, r1, r3
   214a0:	b2c9      	uxtb	r1, r1
   214a2:	47b0      	blx	r6
	BLE_get_device_name();
   214a4:	4b35      	ldr	r3, [pc, #212]	; (2157c <fn_menu_BLE+0x1c4>)
   214a6:	4798      	blx	r3
	sprintf(display_str,"Name:%s", BleDeviceName);		
   214a8:	4b35      	ldr	r3, [pc, #212]	; (21580 <fn_menu_BLE+0x1c8>)
   214aa:	4a36      	ldr	r2, [pc, #216]	; (21584 <fn_menu_BLE+0x1cc>)
   214ac:	4936      	ldr	r1, [pc, #216]	; (21588 <fn_menu_BLE+0x1d0>)
   214ae:	0028      	movs	r0, r5
   214b0:	4798      	blx	r3
	glcd_tiny_draw_string(0, 1,display_str);
   214b2:	002a      	movs	r2, r5
   214b4:	2101      	movs	r1, #1
   214b6:	2000      	movs	r0, #0
   214b8:	47b0      	blx	r6
	BLE_get_device_MAC();
   214ba:	4b34      	ldr	r3, [pc, #208]	; (2158c <fn_menu_BLE+0x1d4>)
   214bc:	4798      	blx	r3
	glcd_tiny_draw_string(0, 2,"MAC Address:");
   214be:	4a34      	ldr	r2, [pc, #208]	; (21590 <fn_menu_BLE+0x1d8>)
   214c0:	2102      	movs	r1, #2
   214c2:	2000      	movs	r0, #0
   214c4:	47b0      	blx	r6
	glcd_tiny_draw_string(10, 3,BleDeviceMAC);
   214c6:	4a33      	ldr	r2, [pc, #204]	; (21594 <fn_menu_BLE+0x1dc>)
   214c8:	2103      	movs	r1, #3
   214ca:	200a      	movs	r0, #10
   214cc:	47b0      	blx	r6
	glcd_tiny_draw_string(0, 4,"Connected To:");
   214ce:	4a32      	ldr	r2, [pc, #200]	; (21598 <fn_menu_BLE+0x1e0>)
   214d0:	2104      	movs	r1, #4
   214d2:	2000      	movs	r0, #0
   214d4:	47b0      	blx	r6
	glcd_tiny_draw_string(10, 5,BleClientMAC);
   214d6:	4a31      	ldr	r2, [pc, #196]	; (2159c <fn_menu_BLE+0x1e4>)
   214d8:	2105      	movs	r1, #5
   214da:	200a      	movs	r0, #10
   214dc:	47b0      	blx	r6
	glcd_write();
   214de:	4b30      	ldr	r3, [pc, #192]	; (215a0 <fn_menu_BLE+0x1e8>)
   214e0:	4798      	blx	r3
}
   214e2:	b007      	add	sp, #28
   214e4:	bc3c      	pop	{r2, r3, r4, r5}
   214e6:	4690      	mov	r8, r2
   214e8:	4699      	mov	r9, r3
   214ea:	46a2      	mov	sl, r4
   214ec:	46ab      	mov	fp, r5
   214ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(display_str,"Reset BLE");
   214f0:	220a      	movs	r2, #10
   214f2:	491b      	ldr	r1, [pc, #108]	; (21560 <fn_menu_BLE+0x1a8>)
   214f4:	0028      	movs	r0, r5
   214f6:	47d8      	blx	fp
				BLE_init();
   214f8:	4b2a      	ldr	r3, [pc, #168]	; (215a4 <fn_menu_BLE+0x1ec>)
   214fa:	4798      	blx	r3
				sprintf(addStr," RST...");
   214fc:	003a      	movs	r2, r7
   214fe:	4b2a      	ldr	r3, [pc, #168]	; (215a8 <fn_menu_BLE+0x1f0>)
   21500:	cb03      	ldmia	r3!, {r0, r1}
   21502:	c203      	stmia	r2!, {r0, r1}
   21504:	e78e      	b.n	21424 <fn_menu_BLE+0x6c>
		curY=0;
   21506:	4b0a      	ldr	r3, [pc, #40]	; (21530 <fn_menu_BLE+0x178>)
		curY_off=6;
   21508:	2100      	movs	r1, #0
		curY=0;
   2150a:	001a      	movs	r2, r3
   2150c:	9301      	str	r3, [sp, #4]
   2150e:	2300      	movs	r3, #0
   21510:	7013      	strb	r3, [r2, #0]
		curY_N=2;
   21512:	4b08      	ldr	r3, [pc, #32]	; (21534 <fn_menu_BLE+0x17c>)
   21514:	4698      	mov	r8, r3
   21516:	2302      	movs	r3, #2
   21518:	4642      	mov	r2, r8
   2151a:	7013      	strb	r3, [r2, #0]
		curY_off=6;
   2151c:	4b06      	ldr	r3, [pc, #24]	; (21538 <fn_menu_BLE+0x180>)
   2151e:	4699      	mov	r9, r3
   21520:	2306      	movs	r3, #6
   21522:	464a      	mov	r2, r9
   21524:	7013      	strb	r3, [r2, #0]
   21526:	2202      	movs	r2, #2
   21528:	e75a      	b.n	213e0 <fn_menu_BLE+0x28>
   2152a:	46c0      	nop			; (mov r8, r8)
   2152c:	20004370 	.word	0x20004370
   21530:	20002d10 	.word	0x20002d10
   21534:	200051c0 	.word	0x200051c0
   21538:	20002af8 	.word	0x20002af8
   2153c:	200041d8 	.word	0x200041d8
   21540:	000103cd 	.word	0x000103cd
   21544:	0001ca59 	.word	0x0001ca59
   21548:	20002da0 	.word	0x20002da0
   2154c:	00028999 	.word	0x00028999
   21550:	0002f310 	.word	0x0002f310
   21554:	0001e2f5 	.word	0x0001e2f5
   21558:	0002f358 	.word	0x0002f358
   2155c:	00028b39 	.word	0x00028b39
   21560:	0002f344 	.word	0x0002f344
   21564:	20002630 	.word	0x20002630
   21568:	0002dc5c 	.word	0x0002dc5c
   2156c:	0002f1d4 	.word	0x0002f1d4
   21570:	0002dc58 	.word	0x0002dc58
   21574:	0002f5b0 	.word	0x0002f5b0
   21578:	000104dd 	.word	0x000104dd
   2157c:	0000f105 	.word	0x0000f105
   21580:	00028ab1 	.word	0x00028ab1
   21584:	20005344 	.word	0x20005344
   21588:	0002f31c 	.word	0x0002f31c
   2158c:	0000f025 	.word	0x0000f025
   21590:	0002f324 	.word	0x0002f324
   21594:	20004374 	.word	0x20004374
   21598:	0002f334 	.word	0x0002f334
   2159c:	20002ae4 	.word	0x20002ae4
   215a0:	0001db91 	.word	0x0001db91
   215a4:	0000f28d 	.word	0x0000f28d
   215a8:	0002f350 	.word	0x0002f350

000215ac <fn_set_clock>:
void fn_set_clock(void){
   215ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   215ae:	46d6      	mov	lr, sl
   215b0:	464f      	mov	r7, r9
   215b2:	4646      	mov	r6, r8
   215b4:	b5c0      	push	{r6, r7, lr}
	if (state_change) {
   215b6:	4b6c      	ldr	r3, [pc, #432]	; (21768 <fn_set_clock+0x1bc>)
   215b8:	781b      	ldrb	r3, [r3, #0]
   215ba:	2b00      	cmp	r3, #0
   215bc:	d000      	beq.n	215c0 <fn_set_clock+0x14>
   215be:	e076      	b.n	216ae <fn_set_clock+0x102>
   215c0:	4b6a      	ldr	r3, [pc, #424]	; (2176c <fn_set_clock+0x1c0>)
   215c2:	4d6b      	ldr	r5, [pc, #428]	; (21770 <fn_set_clock+0x1c4>)
   215c4:	4698      	mov	r8, r3
   215c6:	4b6b      	ldr	r3, [pc, #428]	; (21774 <fn_set_clock+0x1c8>)
   215c8:	4699      	mov	r9, r3
   215ca:	4b6b      	ldr	r3, [pc, #428]	; (21778 <fn_set_clock+0x1cc>)
   215cc:	469a      	mov	sl, r3
	switch(last_input){
   215ce:	4b6b      	ldr	r3, [pc, #428]	; (2177c <fn_set_clock+0x1d0>)
   215d0:	681b      	ldr	r3, [r3, #0]
   215d2:	2b01      	cmp	r3, #1
   215d4:	d100      	bne.n	215d8 <fn_set_clock+0x2c>
   215d6:	e085      	b.n	216e4 <fn_set_clock+0x138>
   215d8:	2b00      	cmp	r3, #0
   215da:	d100      	bne.n	215de <fn_set_clock+0x32>
   215dc:	e086      	b.n	216ec <fn_set_clock+0x140>
   215de:	2b02      	cmp	r3, #2
   215e0:	d008      	beq.n	215f4 <fn_set_clock+0x48>
   215e2:	4643      	mov	r3, r8
   215e4:	2100      	movs	r1, #0
   215e6:	781b      	ldrb	r3, [r3, #0]
	switch(curY){
   215e8:	2b05      	cmp	r3, #5
   215ea:	d809      	bhi.n	21600 <fn_set_clock+0x54>
   215ec:	4a64      	ldr	r2, [pc, #400]	; (21780 <fn_set_clock+0x1d4>)
   215ee:	009b      	lsls	r3, r3, #2
   215f0:	58d3      	ldr	r3, [r2, r3]
   215f2:	469f      	mov	pc, r3
   215f4:	4643      	mov	r3, r8
			break;
   215f6:	2101      	movs	r1, #1
   215f8:	781b      	ldrb	r3, [r3, #0]
   215fa:	4249      	negs	r1, r1
	switch(curY){
   215fc:	2b05      	cmp	r3, #5
   215fe:	d9f5      	bls.n	215ec <fn_set_clock+0x40>
	glcd_clear_buffer();
   21600:	4b60      	ldr	r3, [pc, #384]	; (21784 <fn_set_clock+0x1d8>)
   21602:	4798      	blx	r3
	sprintf(display_str,"Set Clock:");
   21604:	4c60      	ldr	r4, [pc, #384]	; (21788 <fn_set_clock+0x1dc>)
   21606:	220b      	movs	r2, #11
   21608:	4960      	ldr	r1, [pc, #384]	; (2178c <fn_set_clock+0x1e0>)
   2160a:	0020      	movs	r0, r4
   2160c:	47d0      	blx	sl
	glcd_tiny_draw_string(0,0,display_str);
   2160e:	4e60      	ldr	r6, [pc, #384]	; (21790 <fn_set_clock+0x1e4>)
   21610:	0022      	movs	r2, r4
   21612:	2100      	movs	r1, #0
   21614:	2000      	movs	r0, #0
   21616:	47b0      	blx	r6
	sprintf(display_str,"Year:   %04d", tempTime.year);
   21618:	4f5e      	ldr	r7, [pc, #376]	; (21794 <fn_set_clock+0x1e8>)
   2161a:	882a      	ldrh	r2, [r5, #0]
   2161c:	495e      	ldr	r1, [pc, #376]	; (21798 <fn_set_clock+0x1ec>)
   2161e:	0020      	movs	r0, r4
   21620:	47b8      	blx	r7
	glcd_tiny_draw_string(10,1,display_str);
   21622:	0022      	movs	r2, r4
   21624:	2101      	movs	r1, #1
   21626:	200a      	movs	r0, #10
   21628:	47b0      	blx	r6
	sprintf(display_str,"Month:  %02d", tempTime.month);
   2162a:	78aa      	ldrb	r2, [r5, #2]
   2162c:	495b      	ldr	r1, [pc, #364]	; (2179c <fn_set_clock+0x1f0>)
   2162e:	0020      	movs	r0, r4
   21630:	47b8      	blx	r7
	glcd_tiny_draw_string(10,2,display_str);
   21632:	0022      	movs	r2, r4
   21634:	2102      	movs	r1, #2
   21636:	200a      	movs	r0, #10
   21638:	47b0      	blx	r6
	sprintf(display_str,"Date:   %02d", tempTime.day);
   2163a:	78ea      	ldrb	r2, [r5, #3]
   2163c:	4958      	ldr	r1, [pc, #352]	; (217a0 <fn_set_clock+0x1f4>)
   2163e:	0020      	movs	r0, r4
   21640:	47b8      	blx	r7
	glcd_tiny_draw_string(10,3,display_str);
   21642:	0022      	movs	r2, r4
   21644:	2103      	movs	r1, #3
   21646:	200a      	movs	r0, #10
   21648:	47b0      	blx	r6
	sprintf(display_str,"Hour:   %02d", tempTime.hours);
   2164a:	792a      	ldrb	r2, [r5, #4]
   2164c:	4955      	ldr	r1, [pc, #340]	; (217a4 <fn_set_clock+0x1f8>)
   2164e:	0020      	movs	r0, r4
   21650:	47b8      	blx	r7
	glcd_tiny_draw_string(10,4,display_str);
   21652:	0022      	movs	r2, r4
   21654:	2104      	movs	r1, #4
   21656:	200a      	movs	r0, #10
   21658:	47b0      	blx	r6
	sprintf(display_str,"Minute: %02d", tempTime.minutes);
   2165a:	796a      	ldrb	r2, [r5, #5]
   2165c:	4952      	ldr	r1, [pc, #328]	; (217a8 <fn_set_clock+0x1fc>)
   2165e:	0020      	movs	r0, r4
   21660:	47b8      	blx	r7
	glcd_tiny_draw_string(10,5,display_str);
   21662:	0022      	movs	r2, r4
   21664:	2105      	movs	r1, #5
   21666:	200a      	movs	r0, #10
   21668:	47b0      	blx	r6
	sprintf(display_str,"Second: %02d", tempTime.seconds);
   2166a:	79aa      	ldrb	r2, [r5, #6]
   2166c:	494f      	ldr	r1, [pc, #316]	; (217ac <fn_set_clock+0x200>)
   2166e:	0020      	movs	r0, r4
   21670:	47b8      	blx	r7
	glcd_tiny_draw_string(10,6,display_str);
   21672:	0022      	movs	r2, r4
   21674:	2106      	movs	r1, #6
   21676:	200a      	movs	r0, #10
   21678:	47b0      	blx	r6
	drawSoftKeys("Next","+","-","Cancel");
   2167a:	4b4d      	ldr	r3, [pc, #308]	; (217b0 <fn_set_clock+0x204>)
   2167c:	4d4d      	ldr	r5, [pc, #308]	; (217b4 <fn_set_clock+0x208>)
   2167e:	4a4e      	ldr	r2, [pc, #312]	; (217b8 <fn_set_clock+0x20c>)
   21680:	494e      	ldr	r1, [pc, #312]	; (217bc <fn_set_clock+0x210>)
   21682:	484f      	ldr	r0, [pc, #316]	; (217c0 <fn_set_clock+0x214>)
   21684:	47a8      	blx	r5
	sprintf(display_str, ">");
   21686:	2202      	movs	r2, #2
   21688:	494e      	ldr	r1, [pc, #312]	; (217c4 <fn_set_clock+0x218>)
   2168a:	0020      	movs	r0, r4
   2168c:	47d0      	blx	sl
	glcd_tiny_draw_string(1, curY+curY_off,display_str);
   2168e:	4643      	mov	r3, r8
   21690:	7819      	ldrb	r1, [r3, #0]
   21692:	464b      	mov	r3, r9
   21694:	781b      	ldrb	r3, [r3, #0]
   21696:	0022      	movs	r2, r4
   21698:	18c9      	adds	r1, r1, r3
   2169a:	b2c9      	uxtb	r1, r1
   2169c:	2001      	movs	r0, #1
   2169e:	47b0      	blx	r6
	glcd_write();
   216a0:	4b49      	ldr	r3, [pc, #292]	; (217c8 <fn_set_clock+0x21c>)
   216a2:	4798      	blx	r3
}
   216a4:	bc1c      	pop	{r2, r3, r4}
   216a6:	4690      	mov	r8, r2
   216a8:	4699      	mov	r9, r3
   216aa:	46a2      	mov	sl, r4
   216ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curY = 0;
   216ae:	2400      	movs	r4, #0
		curY_N = 6;
   216b0:	2206      	movs	r2, #6
		curY = 0;
   216b2:	4b2e      	ldr	r3, [pc, #184]	; (2176c <fn_set_clock+0x1c0>)
   216b4:	701c      	strb	r4, [r3, #0]
   216b6:	4698      	mov	r8, r3
		curY_N = 6;
   216b8:	4b44      	ldr	r3, [pc, #272]	; (217cc <fn_set_clock+0x220>)
   216ba:	701a      	strb	r2, [r3, #0]
		curY_off = 1;
   216bc:	4b2d      	ldr	r3, [pc, #180]	; (21774 <fn_set_clock+0x1c8>)
   216be:	4699      	mov	r9, r3
   216c0:	2301      	movs	r3, #1
   216c2:	464a      	mov	r2, r9
   216c4:	7013      	strb	r3, [r2, #0]
		get_time();
   216c6:	4b42      	ldr	r3, [pc, #264]	; (217d0 <fn_set_clock+0x224>)
   216c8:	4798      	blx	r3
		memcpy(&tempTime,&current_time,sizeof(current_time));	
   216ca:	4d29      	ldr	r5, [pc, #164]	; (21770 <fn_set_clock+0x1c4>)
   216cc:	4b2a      	ldr	r3, [pc, #168]	; (21778 <fn_set_clock+0x1cc>)
   216ce:	2208      	movs	r2, #8
   216d0:	4940      	ldr	r1, [pc, #256]	; (217d4 <fn_set_clock+0x228>)
   216d2:	0028      	movs	r0, r5
   216d4:	469a      	mov	sl, r3
   216d6:	4798      	blx	r3
	switch(last_input){
   216d8:	4b28      	ldr	r3, [pc, #160]	; (2177c <fn_set_clock+0x1d0>)
		tempTime.seconds = 0;
   216da:	71ac      	strb	r4, [r5, #6]
	switch(last_input){
   216dc:	681b      	ldr	r3, [r3, #0]
   216de:	2b01      	cmp	r3, #1
   216e0:	d000      	beq.n	216e4 <fn_set_clock+0x138>
   216e2:	e779      	b.n	215d8 <fn_set_clock+0x2c>
   216e4:	4643      	mov	r3, r8
			break;
   216e6:	2101      	movs	r1, #1
   216e8:	781b      	ldrb	r3, [r3, #0]
   216ea:	e77d      	b.n	215e8 <fn_set_clock+0x3c>
			if((curY+1) >= curY_N){
   216ec:	4643      	mov	r3, r8
   216ee:	4a37      	ldr	r2, [pc, #220]	; (217cc <fn_set_clock+0x220>)
   216f0:	781b      	ldrb	r3, [r3, #0]
   216f2:	7812      	ldrb	r2, [r2, #0]
   216f4:	3301      	adds	r3, #1
   216f6:	4293      	cmp	r3, r2
   216f8:	da2f      	bge.n	2175a <fn_set_clock+0x1ae>
				curY++;
   216fa:	4642      	mov	r2, r8
   216fc:	b2db      	uxtb	r3, r3
   216fe:	7013      	strb	r3, [r2, #0]
   21700:	2100      	movs	r1, #0
   21702:	e771      	b.n	215e8 <fn_set_clock+0x3c>
			tempTime.minutes = incDecData(tempTime.minutes, adjustment, 0, 59);
   21704:	7968      	ldrb	r0, [r5, #5]
   21706:	233b      	movs	r3, #59	; 0x3b
   21708:	2200      	movs	r2, #0
   2170a:	4c33      	ldr	r4, [pc, #204]	; (217d8 <fn_set_clock+0x22c>)
   2170c:	47a0      	blx	r4
   2170e:	7168      	strb	r0, [r5, #5]
			break;
   21710:	e776      	b.n	21600 <fn_set_clock+0x54>
			tempTime.hours = incDecData(tempTime.hours, adjustment, 0, 23);
   21712:	7928      	ldrb	r0, [r5, #4]
   21714:	2317      	movs	r3, #23
   21716:	2200      	movs	r2, #0
   21718:	4c2f      	ldr	r4, [pc, #188]	; (217d8 <fn_set_clock+0x22c>)
   2171a:	47a0      	blx	r4
   2171c:	7128      	strb	r0, [r5, #4]
			break;
   2171e:	e76f      	b.n	21600 <fn_set_clock+0x54>
			tempTime.day = incDecData(tempTime.day, adjustment, 1, 31);
   21720:	78e8      	ldrb	r0, [r5, #3]
   21722:	231f      	movs	r3, #31
   21724:	2201      	movs	r2, #1
   21726:	4c2c      	ldr	r4, [pc, #176]	; (217d8 <fn_set_clock+0x22c>)
   21728:	47a0      	blx	r4
   2172a:	70e8      	strb	r0, [r5, #3]
			break;
   2172c:	e768      	b.n	21600 <fn_set_clock+0x54>
			tempTime.month = incDecData(tempTime.month, adjustment, 1, 12);
   2172e:	78a8      	ldrb	r0, [r5, #2]
   21730:	230c      	movs	r3, #12
   21732:	2201      	movs	r2, #1
   21734:	4c28      	ldr	r4, [pc, #160]	; (217d8 <fn_set_clock+0x22c>)
   21736:	47a0      	blx	r4
   21738:	70a8      	strb	r0, [r5, #2]
			break;
   2173a:	e761      	b.n	21600 <fn_set_clock+0x54>
			tempTime.year = incDecData(tempTime.year, adjustment, 2000, 2099);
   2173c:	22fa      	movs	r2, #250	; 0xfa
   2173e:	8828      	ldrh	r0, [r5, #0]
   21740:	4b26      	ldr	r3, [pc, #152]	; (217dc <fn_set_clock+0x230>)
   21742:	00d2      	lsls	r2, r2, #3
   21744:	4c24      	ldr	r4, [pc, #144]	; (217d8 <fn_set_clock+0x22c>)
   21746:	47a0      	blx	r4
   21748:	8028      	strh	r0, [r5, #0]
			break;
   2174a:	e759      	b.n	21600 <fn_set_clock+0x54>
			tempTime.seconds = incDecData(tempTime.seconds, adjustment, 0, 59);
   2174c:	79a8      	ldrb	r0, [r5, #6]
   2174e:	233b      	movs	r3, #59	; 0x3b
   21750:	2200      	movs	r2, #0
   21752:	4c21      	ldr	r4, [pc, #132]	; (217d8 <fn_set_clock+0x22c>)
   21754:	47a0      	blx	r4
   21756:	71a8      	strb	r0, [r5, #6]
			break;
   21758:	e752      	b.n	21600 <fn_set_clock+0x54>
				set_time(&tempTime);
   2175a:	4b21      	ldr	r3, [pc, #132]	; (217e0 <fn_set_clock+0x234>)
   2175c:	0028      	movs	r0, r5
   2175e:	4798      	blx	r3
				current_state = st_menu1;
   21760:	2203      	movs	r2, #3
   21762:	4b20      	ldr	r3, [pc, #128]	; (217e4 <fn_set_clock+0x238>)
   21764:	601a      	str	r2, [r3, #0]
   21766:	e73c      	b.n	215e2 <fn_set_clock+0x36>
   21768:	20004370 	.word	0x20004370
   2176c:	20002d10 	.word	0x20002d10
   21770:	20000d84 	.word	0x20000d84
   21774:	20002af8 	.word	0x20002af8
   21778:	00028999 	.word	0x00028999
   2177c:	200041d8 	.word	0x200041d8
   21780:	0002eacc 	.word	0x0002eacc
   21784:	0001ca59 	.word	0x0001ca59
   21788:	20002da0 	.word	0x20002da0
   2178c:	0002f484 	.word	0x0002f484
   21790:	0001e2f5 	.word	0x0001e2f5
   21794:	00028ab1 	.word	0x00028ab1
   21798:	0002f490 	.word	0x0002f490
   2179c:	0002f4a0 	.word	0x0002f4a0
   217a0:	0002f4b0 	.word	0x0002f4b0
   217a4:	0002f4c0 	.word	0x0002f4c0
   217a8:	0002f4d0 	.word	0x0002f4d0
   217ac:	0002f4e0 	.word	0x0002f4e0
   217b0:	0002f4f0 	.word	0x0002f4f0
   217b4:	000104dd 	.word	0x000104dd
   217b8:	0002f4f8 	.word	0x0002f4f8
   217bc:	0002f4fc 	.word	0x0002f4fc
   217c0:	0002f500 	.word	0x0002f500
   217c4:	0002dc5c 	.word	0x0002dc5c
   217c8:	0001db91 	.word	0x0001db91
   217cc:	200051c0 	.word	0x200051c0
   217d0:	0000fa61 	.word	0x0000fa61
   217d4:	20002628 	.word	0x20002628
   217d8:	00010a85 	.word	0x00010a85
   217dc:	00000833 	.word	0x00000833
   217e0:	0000fb25 	.word	0x0000fb25
   217e4:	20002630 	.word	0x20002630

000217e8 <fn_main_display>:
void fn_main_display(void){
   217e8:	b510      	push	{r4, lr}
	switch (last_input){
   217ea:	4b1b      	ldr	r3, [pc, #108]	; (21858 <fn_main_display+0x70>)
void fn_main_display(void){
   217ec:	b0d4      	sub	sp, #336	; 0x150
	switch (last_input){
   217ee:	681b      	ldr	r3, [r3, #0]
   217f0:	2b02      	cmp	r3, #2
   217f2:	d022      	beq.n	2183a <fn_main_display+0x52>
   217f4:	2b04      	cmp	r3, #4
   217f6:	d012      	beq.n	2181e <fn_main_display+0x36>
   217f8:	2b01      	cmp	r3, #1
   217fa:	d00a      	beq.n	21812 <fn_main_display+0x2a>
   217fc:	4c17      	ldr	r4, [pc, #92]	; (2185c <fn_main_display+0x74>)
	if (isLaserOn()){
   217fe:	47a0      	blx	r4
   21800:	2800      	cmp	r0, #0
   21802:	d002      	beq.n	2180a <fn_main_display+0x22>
		quick_measurement(&tempMeas);
   21804:	a82a      	add	r0, sp, #168	; 0xa8
   21806:	4b16      	ldr	r3, [pc, #88]	; (21860 <fn_main_display+0x78>)
   21808:	4798      	blx	r3
	print_data_screen();
   2180a:	4b16      	ldr	r3, [pc, #88]	; (21864 <fn_main_display+0x7c>)
   2180c:	4798      	blx	r3
}
   2180e:	b054      	add	sp, #336	; 0x150
   21810:	bd10      	pop	{r4, pc}
			backlightPlus(&options.backlight_setting);
   21812:	4815      	ldr	r0, [pc, #84]	; (21868 <fn_main_display+0x80>)
   21814:	4b15      	ldr	r3, [pc, #84]	; (2186c <fn_main_display+0x84>)
   21816:	4798      	blx	r3
			save_user_settings();
   21818:	4b15      	ldr	r3, [pc, #84]	; (21870 <fn_main_display+0x88>)
   2181a:	4798      	blx	r3
   2181c:	e7ee      	b.n	217fc <fn_main_display+0x14>
			if (isLaserOn()){
   2181e:	4c0f      	ldr	r4, [pc, #60]	; (2185c <fn_main_display+0x74>)
   21820:	47a0      	blx	r4
   21822:	2800      	cmp	r0, #0
   21824:	d010      	beq.n	21848 <fn_main_display+0x60>
				full_measurement(&measTemp, options.shot_delay, measRegular);
   21826:	4b13      	ldr	r3, [pc, #76]	; (21874 <fn_main_display+0x8c>)
   21828:	4668      	mov	r0, sp
   2182a:	7a99      	ldrb	r1, [r3, #10]
   2182c:	2200      	movs	r2, #0
   2182e:	4b12      	ldr	r3, [pc, #72]	; (21878 <fn_main_display+0x90>)
   21830:	4798      	blx	r3
				rangefinder_on_off(false);
   21832:	2000      	movs	r0, #0
   21834:	4b11      	ldr	r3, [pc, #68]	; (2187c <fn_main_display+0x94>)
   21836:	4798      	blx	r3
   21838:	e7e1      	b.n	217fe <fn_main_display+0x16>
			backlightMinus(&options.backlight_setting);
   2183a:	480b      	ldr	r0, [pc, #44]	; (21868 <fn_main_display+0x80>)
   2183c:	4b10      	ldr	r3, [pc, #64]	; (21880 <fn_main_display+0x98>)
   2183e:	4798      	blx	r3
			save_user_settings();
   21840:	4b0b      	ldr	r3, [pc, #44]	; (21870 <fn_main_display+0x88>)
   21842:	4798      	blx	r3
   21844:	4c05      	ldr	r4, [pc, #20]	; (2185c <fn_main_display+0x74>)
			break;
   21846:	e7da      	b.n	217fe <fn_main_display+0x16>
				rangefinder_on_off(true);
   21848:	2001      	movs	r0, #1
   2184a:	4b0c      	ldr	r3, [pc, #48]	; (2187c <fn_main_display+0x94>)
   2184c:	4798      	blx	r3
				laser_on_off(true);
   2184e:	2001      	movs	r0, #1
   21850:	4b0c      	ldr	r3, [pc, #48]	; (21884 <fn_main_display+0x9c>)
   21852:	4798      	blx	r3
   21854:	e7d3      	b.n	217fe <fn_main_display+0x16>
   21856:	46c0      	nop			; (mov r8, r8)
   21858:	200041d8 	.word	0x200041d8
   2185c:	00015ed5 	.word	0x00015ed5
   21860:	00016491 	.word	0x00016491
   21864:	0001001d 	.word	0x0001001d
   21868:	20002d34 	.word	0x20002d34
   2186c:	0000e74d 	.word	0x0000e74d
   21870:	00011089 	.word	0x00011089
   21874:	20002d20 	.word	0x20002d20
   21878:	00016539 	.word	0x00016539
   2187c:	000160dd 	.word	0x000160dd
   21880:	0000e849 	.word	0x0000e849
   21884:	00016109 	.word	0x00016109

00021888 <cal_disp_message>:
void cal_disp_message(void){
   21888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	glcd_clear_buffer();
   2188a:	4b6d      	ldr	r3, [pc, #436]	; (21a40 <cal_disp_message+0x1b8>)
   2188c:	4798      	blx	r3
	switch(current_state){
   2188e:	4b6d      	ldr	r3, [pc, #436]	; (21a44 <cal_disp_message+0x1bc>)
   21890:	681b      	ldr	r3, [r3, #0]
   21892:	2b0b      	cmp	r3, #11
   21894:	d100      	bne.n	21898 <cal_disp_message+0x10>
   21896:	e0a9      	b.n	219ec <cal_disp_message+0x164>
   21898:	d800      	bhi.n	2189c <cal_disp_message+0x14>
   2189a:	e085      	b.n	219a8 <cal_disp_message+0x120>
   2189c:	2b0c      	cmp	r3, #12
   2189e:	d04f      	beq.n	21940 <cal_disp_message+0xb8>
   218a0:	2b10      	cmp	r3, #16
   218a2:	d000      	beq.n	218a6 <cal_disp_message+0x1e>
   218a4:	e096      	b.n	219d4 <cal_disp_message+0x14c>
			sprintf(display_str, "Loop Test:");
   218a6:	4c68      	ldr	r4, [pc, #416]	; (21a48 <cal_disp_message+0x1c0>)
   218a8:	4e68      	ldr	r6, [pc, #416]	; (21a4c <cal_disp_message+0x1c4>)
   218aa:	220b      	movs	r2, #11
   218ac:	4968      	ldr	r1, [pc, #416]	; (21a50 <cal_disp_message+0x1c8>)
   218ae:	0020      	movs	r0, r4
   218b0:	47b0      	blx	r6
			glcd_tiny_draw_string(0,0,display_str);
   218b2:	4d68      	ldr	r5, [pc, #416]	; (21a54 <cal_disp_message+0x1cc>)
   218b4:	0022      	movs	r2, r4
   218b6:	2100      	movs	r1, #0
   218b8:	2000      	movs	r0, #0
   218ba:	47a8      	blx	r5
			sprintf(display_str, "Take a series of");
   218bc:	2211      	movs	r2, #17
   218be:	4966      	ldr	r1, [pc, #408]	; (21a58 <cal_disp_message+0x1d0>)
   218c0:	0020      	movs	r0, r4
   218c2:	47b0      	blx	r6
			glcd_tiny_draw_string(0,1,display_str);
   218c4:	0022      	movs	r2, r4
   218c6:	2101      	movs	r1, #1
   218c8:	2000      	movs	r0, #0
   218ca:	47a8      	blx	r5
			sprintf(display_str, "measurements ending");
   218cc:	2214      	movs	r2, #20
   218ce:	4963      	ldr	r1, [pc, #396]	; (21a5c <cal_disp_message+0x1d4>)
   218d0:	0020      	movs	r0, r4
   218d2:	47b0      	blx	r6
			glcd_tiny_draw_string(0,2,display_str);
   218d4:	0022      	movs	r2, r4
   218d6:	2102      	movs	r1, #2
   218d8:	2000      	movs	r0, #0
   218da:	47a8      	blx	r5
			sprintf(display_str, "back at the first");
   218dc:	2212      	movs	r2, #18
   218de:	4960      	ldr	r1, [pc, #384]	; (21a60 <cal_disp_message+0x1d8>)
   218e0:	0020      	movs	r0, r4
   218e2:	47b0      	blx	r6
			glcd_tiny_draw_string(0,3,display_str);
   218e4:	0022      	movs	r2, r4
   218e6:	2103      	movs	r1, #3
   218e8:	2000      	movs	r0, #0
   218ea:	47a8      	blx	r5
			sprintf(display_str, "point.  Press 'Done'");
   218ec:	2215      	movs	r2, #21
   218ee:	495d      	ldr	r1, [pc, #372]	; (21a64 <cal_disp_message+0x1dc>)
   218f0:	0020      	movs	r0, r4
   218f2:	47b0      	blx	r6
			glcd_tiny_draw_string(0,4,display_str);
   218f4:	0022      	movs	r2, r4
   218f6:	2104      	movs	r1, #4
   218f8:	2000      	movs	r0, #0
   218fa:	47a8      	blx	r5
			sprintf(display_str, "when complete.");
   218fc:	220f      	movs	r2, #15
   218fe:	495a      	ldr	r1, [pc, #360]	; (21a68 <cal_disp_message+0x1e0>)
   21900:	0020      	movs	r0, r4
   21902:	47b0      	blx	r6
			glcd_tiny_draw_string(0,5,display_str);
   21904:	0022      	movs	r2, r4
   21906:	2105      	movs	r1, #5
   21908:	2000      	movs	r0, #0
   2190a:	47a8      	blx	r5
	wdt_disable();
   2190c:	4b57      	ldr	r3, [pc, #348]	; (21a6c <cal_disp_message+0x1e4>)
   2190e:	4798      	blx	r3
	sprintf(display_str, "Press any button...");
   21910:	2214      	movs	r2, #20
   21912:	4957      	ldr	r1, [pc, #348]	; (21a70 <cal_disp_message+0x1e8>)
   21914:	0020      	movs	r0, r4
   21916:	47b0      	blx	r6
	glcd_tiny_draw_string(10,7,display_str);
   21918:	0022      	movs	r2, r4
   2191a:	2107      	movs	r1, #7
   2191c:	200a      	movs	r0, #10
   2191e:	47a8      	blx	r5
	glcd_write();
   21920:	4b54      	ldr	r3, [pc, #336]	; (21a74 <cal_disp_message+0x1ec>)
   21922:	4798      	blx	r3
	current_input = input_none;
   21924:	2306      	movs	r3, #6
   21926:	4a54      	ldr	r2, [pc, #336]	; (21a78 <cal_disp_message+0x1f0>)
   21928:	6013      	str	r3, [r2, #0]
	while((current_input == input_none) || (current_input == input_1sec));//hold here until an input
   2192a:	6813      	ldr	r3, [r2, #0]
   2192c:	2b06      	cmp	r3, #6
   2192e:	d0fc      	beq.n	2192a <cal_disp_message+0xa2>
   21930:	6813      	ldr	r3, [r2, #0]
   21932:	2b07      	cmp	r3, #7
   21934:	d0f9      	beq.n	2192a <cal_disp_message+0xa2>
	current_input = input_none;
   21936:	2306      	movs	r3, #6
   21938:	6013      	str	r3, [r2, #0]
	wdt_enable();
   2193a:	4b50      	ldr	r3, [pc, #320]	; (21a7c <cal_disp_message+0x1f4>)
   2193c:	4798      	blx	r3
}
   2193e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			sprintf(display_str, "Distance Calibration:");
   21940:	4c41      	ldr	r4, [pc, #260]	; (21a48 <cal_disp_message+0x1c0>)
   21942:	2216      	movs	r2, #22
   21944:	494e      	ldr	r1, [pc, #312]	; (21a80 <cal_disp_message+0x1f8>)
   21946:	4e41      	ldr	r6, [pc, #260]	; (21a4c <cal_disp_message+0x1c4>)
   21948:	0020      	movs	r0, r4
   2194a:	47b0      	blx	r6
			glcd_tiny_draw_string(0,0,display_str);
   2194c:	0022      	movs	r2, r4
   2194e:	2100      	movs	r1, #0
   21950:	2000      	movs	r0, #0
   21952:	4d40      	ldr	r5, [pc, #256]	; (21a54 <cal_disp_message+0x1cc>)
   21954:	47a8      	blx	r5
			sprintf(display_str, "Place a target at");
   21956:	2212      	movs	r2, #18
   21958:	494a      	ldr	r1, [pc, #296]	; (21a84 <cal_disp_message+0x1fc>)
   2195a:	0020      	movs	r0, r4
   2195c:	47b0      	blx	r6
			glcd_tiny_draw_string(0,1,display_str);
   2195e:	0022      	movs	r2, r4
   21960:	2101      	movs	r1, #1
   21962:	2000      	movs	r0, #0
   21964:	47a8      	blx	r5
			if (options.current_unit_dist == feet){
   21966:	4b48      	ldr	r3, [pc, #288]	; (21a88 <cal_disp_message+0x200>)
				sprintf(display_str, "  %.1f feet.", DIST_CAL_SETPOINT_FT);
   21968:	2200      	movs	r2, #0
			if (options.current_unit_dist == feet){
   2196a:	7a1b      	ldrb	r3, [r3, #8]
   2196c:	2b00      	cmp	r3, #0
   2196e:	d061      	beq.n	21a34 <cal_disp_message+0x1ac>
				sprintf(display_str, "  %.1f meters.", DIST_CAL_SETPOINT_MT);
   21970:	4b46      	ldr	r3, [pc, #280]	; (21a8c <cal_disp_message+0x204>)
   21972:	4947      	ldr	r1, [pc, #284]	; (21a90 <cal_disp_message+0x208>)
   21974:	0020      	movs	r0, r4
   21976:	4f47      	ldr	r7, [pc, #284]	; (21a94 <cal_disp_message+0x20c>)
   21978:	47b8      	blx	r7
			glcd_tiny_draw_string(0,2,display_str);
   2197a:	0022      	movs	r2, r4
   2197c:	2102      	movs	r1, #2
   2197e:	2000      	movs	r0, #0
   21980:	47a8      	blx	r5
			sprintf(display_str, "Take min. 4 shots in");
   21982:	2215      	movs	r2, #21
   21984:	4944      	ldr	r1, [pc, #272]	; (21a98 <cal_disp_message+0x210>)
   21986:	0020      	movs	r0, r4
   21988:	47b0      	blx	r6
			glcd_tiny_draw_string(0,3,display_str);
   2198a:	0022      	movs	r2, r4
   2198c:	2103      	movs	r1, #3
   2198e:	2000      	movs	r0, #0
   21990:	47a8      	blx	r5
			sprintf(display_str, "Multiple Orientations");
   21992:	2216      	movs	r2, #22
   21994:	4941      	ldr	r1, [pc, #260]	; (21a9c <cal_disp_message+0x214>)
   21996:	0020      	movs	r0, r4
   21998:	47b0      	blx	r6
			glcd_tiny_draw_string(0,4,display_str);
   2199a:	0022      	movs	r2, r4
   2199c:	2104      	movs	r1, #4
   2199e:	2000      	movs	r0, #0
   219a0:	47a8      	blx	r5
			sprintf(display_str, "Only last 4 used.");
   219a2:	2212      	movs	r2, #18
   219a4:	493e      	ldr	r1, [pc, #248]	; (21aa0 <cal_disp_message+0x218>)
   219a6:	e7ab      	b.n	21900 <cal_disp_message+0x78>
	switch(current_state){
   219a8:	2b0a      	cmp	r3, #10
   219aa:	d113      	bne.n	219d4 <cal_disp_message+0x14c>
			sprintf(display_str, "Azm/Inc Calibration:");
   219ac:	4c26      	ldr	r4, [pc, #152]	; (21a48 <cal_disp_message+0x1c0>)
   219ae:	4e27      	ldr	r6, [pc, #156]	; (21a4c <cal_disp_message+0x1c4>)
   219b0:	2215      	movs	r2, #21
   219b2:	493c      	ldr	r1, [pc, #240]	; (21aa4 <cal_disp_message+0x21c>)
   219b4:	0020      	movs	r0, r4
   219b6:	47b0      	blx	r6
			glcd_tiny_draw_string(0,0,display_str);
   219b8:	0022      	movs	r2, r4
   219ba:	2100      	movs	r1, #0
   219bc:	2000      	movs	r0, #0
   219be:	4d25      	ldr	r5, [pc, #148]	; (21a54 <cal_disp_message+0x1cc>)
   219c0:	47a8      	blx	r5
			sprintf(display_str, "Take Uni-Directional Groups of 4 Shots    while rotating       instrument. Only last4 shots of each groupwill be saved");
   219c2:	2277      	movs	r2, #119	; 0x77
   219c4:	4938      	ldr	r1, [pc, #224]	; (21aa8 <cal_disp_message+0x220>)
   219c6:	0020      	movs	r0, r4
   219c8:	47b0      	blx	r6
			glcd_tiny_draw_string(0,1,display_str);
   219ca:	0022      	movs	r2, r4
   219cc:	2101      	movs	r1, #1
   219ce:	2000      	movs	r0, #0
   219d0:	47a8      	blx	r5
			break;
   219d2:	e79b      	b.n	2190c <cal_disp_message+0x84>
			sprintf(display_str, "Hello World");
   219d4:	4c1c      	ldr	r4, [pc, #112]	; (21a48 <cal_disp_message+0x1c0>)
   219d6:	220c      	movs	r2, #12
   219d8:	4934      	ldr	r1, [pc, #208]	; (21aac <cal_disp_message+0x224>)
   219da:	0020      	movs	r0, r4
   219dc:	4e1b      	ldr	r6, [pc, #108]	; (21a4c <cal_disp_message+0x1c4>)
   219de:	47b0      	blx	r6
			glcd_tiny_draw_string(0,2,display_str);
   219e0:	0022      	movs	r2, r4
   219e2:	2102      	movs	r1, #2
   219e4:	2000      	movs	r0, #0
   219e6:	4d1b      	ldr	r5, [pc, #108]	; (21a54 <cal_disp_message+0x1cc>)
   219e8:	47a8      	blx	r5
			break;
   219ea:	e78f      	b.n	2190c <cal_disp_message+0x84>
			sprintf(display_str, "Azm Quick Calibration");
   219ec:	4c16      	ldr	r4, [pc, #88]	; (21a48 <cal_disp_message+0x1c0>)
   219ee:	4e17      	ldr	r6, [pc, #92]	; (21a4c <cal_disp_message+0x1c4>)
   219f0:	2216      	movs	r2, #22
   219f2:	492f      	ldr	r1, [pc, #188]	; (21ab0 <cal_disp_message+0x228>)
   219f4:	0020      	movs	r0, r4
   219f6:	47b0      	blx	r6
			glcd_tiny_draw_string(0,0,display_str);
   219f8:	4d16      	ldr	r5, [pc, #88]	; (21a54 <cal_disp_message+0x1cc>)
   219fa:	0022      	movs	r2, r4
   219fc:	2100      	movs	r1, #0
   219fe:	2000      	movs	r0, #0
   21a00:	47a8      	blx	r5
			sprintf(display_str, "Rotate device slowly ");
   21a02:	2216      	movs	r2, #22
   21a04:	492b      	ldr	r1, [pc, #172]	; (21ab4 <cal_disp_message+0x22c>)
   21a06:	0020      	movs	r0, r4
   21a08:	47b0      	blx	r6
			glcd_tiny_draw_string(0,2,display_str);
   21a0a:	0022      	movs	r2, r4
   21a0c:	2102      	movs	r1, #2
   21a0e:	2000      	movs	r0, #0
   21a10:	47a8      	blx	r5
			sprintf(display_str, "to cover all points  ");
   21a12:	2216      	movs	r2, #22
   21a14:	4928      	ldr	r1, [pc, #160]	; (21ab8 <cal_disp_message+0x230>)
   21a16:	0020      	movs	r0, r4
   21a18:	47b0      	blx	r6
			glcd_tiny_draw_string(0,3,display_str);
   21a1a:	0022      	movs	r2, r4
   21a1c:	2103      	movs	r1, #3
   21a1e:	2000      	movs	r0, #0
   21a20:	47a8      	blx	r5
			sprintf(display_str, "in grid.  ");
   21a22:	220b      	movs	r2, #11
   21a24:	4925      	ldr	r1, [pc, #148]	; (21abc <cal_disp_message+0x234>)
   21a26:	0020      	movs	r0, r4
   21a28:	47b0      	blx	r6
			glcd_tiny_draw_string(0,4,display_str);
   21a2a:	0022      	movs	r2, r4
   21a2c:	2104      	movs	r1, #4
   21a2e:	2000      	movs	r0, #0
   21a30:	47a8      	blx	r5
			break;
   21a32:	e76b      	b.n	2190c <cal_disp_message+0x84>
				sprintf(display_str, "  %.1f feet.", DIST_CAL_SETPOINT_FT);
   21a34:	4b22      	ldr	r3, [pc, #136]	; (21ac0 <cal_disp_message+0x238>)
   21a36:	4923      	ldr	r1, [pc, #140]	; (21ac4 <cal_disp_message+0x23c>)
   21a38:	0020      	movs	r0, r4
   21a3a:	4f16      	ldr	r7, [pc, #88]	; (21a94 <cal_disp_message+0x20c>)
   21a3c:	47b8      	blx	r7
   21a3e:	e79c      	b.n	2197a <cal_disp_message+0xf2>
   21a40:	0001ca59 	.word	0x0001ca59
   21a44:	20002630 	.word	0x20002630
   21a48:	20002da0 	.word	0x20002da0
   21a4c:	00028999 	.word	0x00028999
   21a50:	0002ee34 	.word	0x0002ee34
   21a54:	0001e2f5 	.word	0x0001e2f5
   21a58:	0002ee40 	.word	0x0002ee40
   21a5c:	0002ee54 	.word	0x0002ee54
   21a60:	0002ee68 	.word	0x0002ee68
   21a64:	0002ee7c 	.word	0x0002ee7c
   21a68:	0002ee94 	.word	0x0002ee94
   21a6c:	00016a19 	.word	0x00016a19
   21a70:	0002daac 	.word	0x0002daac
   21a74:	0001db91 	.word	0x0001db91
   21a78:	20003d24 	.word	0x20003d24
   21a7c:	000169f1 	.word	0x000169f1
   21a80:	0002eda4 	.word	0x0002eda4
   21a84:	0002edbc 	.word	0x0002edbc
   21a88:	20002d20 	.word	0x20002d20
   21a8c:	3ff00000 	.word	0x3ff00000
   21a90:	0002ede0 	.word	0x0002ede0
   21a94:	00028ab1 	.word	0x00028ab1
   21a98:	0002edf0 	.word	0x0002edf0
   21a9c:	0002ee08 	.word	0x0002ee08
   21aa0:	0002ee20 	.word	0x0002ee20
   21aa4:	0002ed14 	.word	0x0002ed14
   21aa8:	0002ed2c 	.word	0x0002ed2c
   21aac:	0002eef8 	.word	0x0002eef8
   21ab0:	0002eea4 	.word	0x0002eea4
   21ab4:	0002eebc 	.word	0x0002eebc
   21ab8:	0002eed4 	.word	0x0002eed4
   21abc:	0002eeec 	.word	0x0002eeec
   21ac0:	40080000 	.word	0x40080000
   21ac4:	0002edd0 	.word	0x0002edd0

00021ac8 <fn_azm_quick_calibration>:
void fn_azm_quick_calibration(void){
   21ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21aca:	46de      	mov	lr, fp
   21acc:	4657      	mov	r7, sl
   21ace:	464e      	mov	r6, r9
   21ad0:	4645      	mov	r5, r8
   21ad2:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t segBand[] = {3, 9, 9, 18, 18, 18, 9, 9, 3};// 96 total units
   21ad4:	4baa      	ldr	r3, [pc, #680]	; (21d80 <fn_azm_quick_calibration+0x2b8>)
void fn_azm_quick_calibration(void){
   21ad6:	b0d9      	sub	sp, #356	; 0x164
	uint8_t segBand[] = {3, 9, 9, 18, 18, 18, 9, 9, 3};// 96 total units
   21ad8:	3344      	adds	r3, #68	; 0x44
   21ada:	aa0d      	add	r2, sp, #52	; 0x34
   21adc:	cb03      	ldmia	r3!, {r0, r1}
   21ade:	c203      	stmia	r2!, {r0, r1}
   21ae0:	781b      	ldrb	r3, [r3, #0]
   21ae2:	7013      	strb	r3, [r2, #0]
	if (state_change){
   21ae4:	4ba7      	ldr	r3, [pc, #668]	; (21d84 <fn_azm_quick_calibration+0x2bc>)
   21ae6:	781b      	ldrb	r3, [r3, #0]
   21ae8:	2b00      	cmp	r3, #0
   21aea:	d000      	beq.n	21aee <fn_azm_quick_calibration+0x26>
   21aec:	e13b      	b.n	21d66 <fn_azm_quick_calibration+0x29e>
	measCounterCurrent = 0;
   21aee:	2300      	movs	r3, #0
   21af0:	4aa5      	ldr	r2, [pc, #660]	; (21d88 <fn_azm_quick_calibration+0x2c0>)
   21af2:	6013      	str	r3, [r2, #0]
					if((xPos>=xSeg1)&(xPos<xSeg2)&(yPos>=ySeg1) &(yPos<ySeg2)){
   21af4:	4ba5      	ldr	r3, [pc, #660]	; (21d8c <fn_azm_quick_calibration+0x2c4>)
   21af6:	469a      	mov	sl, r3
	while(current_input==input_none){
   21af8:	4ba5      	ldr	r3, [pc, #660]	; (21d90 <fn_azm_quick_calibration+0x2c8>)
   21afa:	681b      	ldr	r3, [r3, #0]
   21afc:	2b06      	cmp	r3, #6
   21afe:	d000      	beq.n	21b02 <fn_azm_quick_calibration+0x3a>
   21b00:	e10a      	b.n	21d18 <fn_azm_quick_calibration+0x250>
		quick_measurement(&tempM);	
   21b02:	a82e      	add	r0, sp, #184	; 0xb8
   21b04:	4ba3      	ldr	r3, [pc, #652]	; (21d94 <fn_azm_quick_calibration+0x2cc>)
   21b06:	4798      	blx	r3
		measCounterCurrent++;//  Debug; checking measurement rate
   21b08:	4b9f      	ldr	r3, [pc, #636]	; (21d88 <fn_azm_quick_calibration+0x2c0>)
   21b0a:	4a9f      	ldr	r2, [pc, #636]	; (21d88 <fn_azm_quick_calibration+0x2c0>)
   21b0c:	681b      	ldr	r3, [r3, #0]
		tempM.roll = tempM.roll+180;
   21b0e:	49a2      	ldr	r1, [pc, #648]	; (21d98 <fn_azm_quick_calibration+0x2d0>)
		measCounterCurrent++;//  Debug; checking measurement rate
   21b10:	9303      	str	r3, [sp, #12]
   21b12:	3301      	adds	r3, #1
   21b14:	6013      	str	r3, [r2, #0]
		tempM.roll = tempM.roll+180;
   21b16:	4ca1      	ldr	r4, [pc, #644]	; (21d9c <fn_azm_quick_calibration+0x2d4>)
   21b18:	9836      	ldr	r0, [sp, #216]	; 0xd8
   21b1a:	47a0      	blx	r4
		if (tempM.roll>360){tempM.roll = tempM.roll-360;}
   21b1c:	49a0      	ldr	r1, [pc, #640]	; (21da0 <fn_azm_quick_calibration+0x2d8>)
   21b1e:	4ba1      	ldr	r3, [pc, #644]	; (21da4 <fn_azm_quick_calibration+0x2dc>)
		tempM.roll = tempM.roll+180;
   21b20:	1c05      	adds	r5, r0, #0
		if (tempM.roll>360){tempM.roll = tempM.roll-360;}
   21b22:	4798      	blx	r3
   21b24:	2800      	cmp	r0, #0
   21b26:	d004      	beq.n	21b32 <fn_azm_quick_calibration+0x6a>
   21b28:	1c28      	adds	r0, r5, #0
   21b2a:	499d      	ldr	r1, [pc, #628]	; (21da0 <fn_azm_quick_calibration+0x2d8>)
   21b2c:	4b9e      	ldr	r3, [pc, #632]	; (21da8 <fn_azm_quick_calibration+0x2e0>)
   21b2e:	4798      	blx	r3
   21b30:	1c05      	adds	r5, r0, #0
		yPos = yMin+((tempM.roll)/360)*(yHeight); 
   21b32:	4e9e      	ldr	r6, [pc, #632]	; (21dac <fn_azm_quick_calibration+0x2e4>)
		if (tempM.roll>360){tempM.roll = tempM.roll-360;}
   21b34:	9536      	str	r5, [sp, #216]	; 0xd8
		yPos = yMin+((tempM.roll)/360)*(yHeight); 
   21b36:	499a      	ldr	r1, [pc, #616]	; (21da0 <fn_azm_quick_calibration+0x2d8>)
   21b38:	1c28      	adds	r0, r5, #0
   21b3a:	47b0      	blx	r6
   21b3c:	4d9c      	ldr	r5, [pc, #624]	; (21db0 <fn_azm_quick_calibration+0x2e8>)
   21b3e:	499d      	ldr	r1, [pc, #628]	; (21db4 <fn_azm_quick_calibration+0x2ec>)
   21b40:	47a8      	blx	r5
   21b42:	499d      	ldr	r1, [pc, #628]	; (21db8 <fn_azm_quick_calibration+0x2f0>)
   21b44:	47a0      	blx	r4
		calc_theta_XY( tempM.m1Raw , &temp, &angX);
   21b46:	aa0b      	add	r2, sp, #44	; 0x2c
   21b48:	4b9c      	ldr	r3, [pc, #624]	; (21dbc <fn_azm_quick_calibration+0x2f4>)
		yPos = yMin+((tempM.roll)/360)*(yHeight); 
   21b4a:	9004      	str	r0, [sp, #16]
		calc_theta_XY( tempM.m1Raw , &temp, &angX);
   21b4c:	a90c      	add	r1, sp, #48	; 0x30
   21b4e:	a846      	add	r0, sp, #280	; 0x118
   21b50:	4798      	blx	r3
		xPos = xMin+((angX+90)/180)*(nBands*bandWidth);
   21b52:	499b      	ldr	r1, [pc, #620]	; (21dc0 <fn_azm_quick_calibration+0x2f8>)
   21b54:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21b56:	47a0      	blx	r4
   21b58:	498f      	ldr	r1, [pc, #572]	; (21d98 <fn_azm_quick_calibration+0x2d0>)
   21b5a:	47b0      	blx	r6
   21b5c:	4995      	ldr	r1, [pc, #596]	; (21db4 <fn_azm_quick_calibration+0x2ec>)
   21b5e:	47a8      	blx	r5
   21b60:	4995      	ldr	r1, [pc, #596]	; (21db8 <fn_azm_quick_calibration+0x2f0>)
   21b62:	47a0      	blx	r4
		glcd_clear_buffer();
   21b64:	4b97      	ldr	r3, [pc, #604]	; (21dc4 <fn_azm_quick_calibration+0x2fc>)
		xPos = xMin+((angX+90)/180)*(nBands*bandWidth);
   21b66:	9003      	str	r0, [sp, #12]
		glcd_clear_buffer();
   21b68:	4798      	blx	r3
		nPoints = 0;
   21b6a:	4b97      	ldr	r3, [pc, #604]	; (21dc8 <fn_azm_quick_calibration+0x300>)
   21b6c:	4699      	mov	r9, r3
   21b6e:	2300      	movs	r3, #0
   21b70:	464a      	mov	r2, r9
   21b72:	6013      	str	r3, [r2, #0]
   21b74:	ab0d      	add	r3, sp, #52	; 0x34
   21b76:	9309      	str	r3, [sp, #36]	; 0x24
   21b78:	2305      	movs	r3, #5
   21b7a:	9306      	str	r3, [sp, #24]
		trackerInd = 0;
   21b7c:	2300      	movs	r3, #0
					if((xPos>=xSeg1)&(xPos<xSeg2)&(yPos>=ySeg1) &(yPos<ySeg2)){
   21b7e:	001e      	movs	r6, r3
			nSeg = segBand[band];
   21b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
			segHeight = yHeight/nSeg;
   21b82:	2036      	movs	r0, #54	; 0x36
			nSeg = segBand[band];
   21b84:	781c      	ldrb	r4, [r3, #0]
			segHeight = yHeight/nSeg;
   21b86:	4b91      	ldr	r3, [pc, #580]	; (21dcc <fn_azm_quick_calibration+0x304>)
   21b88:	0021      	movs	r1, r4
   21b8a:	4798      	blx	r3
   21b8c:	b2c3      	uxtb	r3, r0
   21b8e:	469b      	mov	fp, r3
			xSeg1 = xMin+bandWidth*band;
   21b90:	466b      	mov	r3, sp
   21b92:	7e1b      	ldrb	r3, [r3, #24]
   21b94:	9308      	str	r3, [sp, #32]
			for (seg=0;seg<nSeg;seg++){
   21b96:	2c00      	cmp	r4, #0
   21b98:	d100      	bne.n	21b9c <fn_azm_quick_calibration+0xd4>
   21b9a:	e0d8      	b.n	21d4e <fn_azm_quick_calibration+0x286>
   21b9c:	465b      	mov	r3, fp
   21b9e:	19a4      	adds	r4, r4, r6
   21ba0:	1d5f      	adds	r7, r3, #5
   21ba2:	b2e3      	uxtb	r3, r4
   21ba4:	9305      	str	r3, [sp, #20]
   21ba6:	9b06      	ldr	r3, [sp, #24]
   21ba8:	b2ff      	uxtb	r7, r7
   21baa:	3306      	adds	r3, #6
   21bac:	9307      	str	r3, [sp, #28]
				ySeg1 = yMin+segHeight*seg;
   21bae:	465b      	mov	r3, fp
   21bb0:	1afd      	subs	r5, r7, r3
				if(tracker[trackerInd]){
   21bb2:	4b87      	ldr	r3, [pc, #540]	; (21dd0 <fn_azm_quick_calibration+0x308>)
				ySeg1 = yMin+segHeight*seg;
   21bb4:	b2ed      	uxtb	r5, r5
				if(tracker[trackerInd]){
   21bb6:	5d9b      	ldrb	r3, [r3, r6]
   21bb8:	2b00      	cmp	r3, #0
   21bba:	d000      	beq.n	21bbe <fn_azm_quick_calibration+0xf6>
   21bbc:	e0b9      	b.n	21d32 <fn_azm_quick_calibration+0x26a>
					if((xPos>=xSeg1)&(xPos<xSeg2)&(yPos>=ySeg1) &(yPos<ySeg2)){
   21bbe:	9807      	ldr	r0, [sp, #28]
   21bc0:	47d0      	blx	sl
   21bc2:	2301      	movs	r3, #1
   21bc4:	1c01      	adds	r1, r0, #0
   21bc6:	4698      	mov	r8, r3
   21bc8:	9803      	ldr	r0, [sp, #12]
   21bca:	4b82      	ldr	r3, [pc, #520]	; (21dd4 <fn_azm_quick_calibration+0x30c>)
   21bcc:	4798      	blx	r3
   21bce:	2800      	cmp	r0, #0
   21bd0:	d101      	bne.n	21bd6 <fn_azm_quick_calibration+0x10e>
   21bd2:	2300      	movs	r3, #0
   21bd4:	4698      	mov	r8, r3
   21bd6:	9806      	ldr	r0, [sp, #24]
   21bd8:	47d0      	blx	sl
   21bda:	4b7f      	ldr	r3, [pc, #508]	; (21dd8 <fn_azm_quick_calibration+0x310>)
   21bdc:	1c01      	adds	r1, r0, #0
   21bde:	9803      	ldr	r0, [sp, #12]
   21be0:	2401      	movs	r4, #1
   21be2:	4798      	blx	r3
   21be4:	2800      	cmp	r0, #0
   21be6:	d100      	bne.n	21bea <fn_azm_quick_calibration+0x122>
   21be8:	2400      	movs	r4, #0
   21bea:	4643      	mov	r3, r8
   21bec:	0028      	movs	r0, r5
   21bee:	401c      	ands	r4, r3
   21bf0:	47d0      	blx	sl
   21bf2:	4b79      	ldr	r3, [pc, #484]	; (21dd8 <fn_azm_quick_calibration+0x310>)
   21bf4:	1c01      	adds	r1, r0, #0
   21bf6:	9804      	ldr	r0, [sp, #16]
   21bf8:	2501      	movs	r5, #1
   21bfa:	4798      	blx	r3
   21bfc:	2800      	cmp	r0, #0
   21bfe:	d100      	bne.n	21c02 <fn_azm_quick_calibration+0x13a>
   21c00:	2500      	movs	r5, #0
   21c02:	402c      	ands	r4, r5
   21c04:	07e3      	lsls	r3, r4, #31
   21c06:	d520      	bpl.n	21c4a <fn_azm_quick_calibration+0x182>
   21c08:	0038      	movs	r0, r7
   21c0a:	47d0      	blx	sl
   21c0c:	4b71      	ldr	r3, [pc, #452]	; (21dd4 <fn_azm_quick_calibration+0x30c>)
   21c0e:	1c01      	adds	r1, r0, #0
   21c10:	9804      	ldr	r0, [sp, #16]
   21c12:	4798      	blx	r3
   21c14:	2800      	cmp	r0, #0
   21c16:	d018      	beq.n	21c4a <fn_azm_quick_calibration+0x182>
						backlightOff();
   21c18:	2400      	movs	r4, #0
   21c1a:	4b70      	ldr	r3, [pc, #448]	; (21ddc <fn_azm_quick_calibration+0x314>)
   21c1c:	4798      	blx	r3
   21c1e:	4d70      	ldr	r5, [pc, #448]	; (21de0 <fn_azm_quick_calibration+0x318>)
							read_mag_double(m1Buf[k], m2Buf[k]);
   21c20:	ab1f      	add	r3, sp, #124	; 0x7c
   21c22:	1919      	adds	r1, r3, r4
   21c24:	ab10      	add	r3, sp, #64	; 0x40
   21c26:	1918      	adds	r0, r3, r4
   21c28:	340c      	adds	r4, #12
   21c2a:	47a8      	blx	r5
						for(k=0;k<NBUFFQAZM;k++){
   21c2c:	2c3c      	cmp	r4, #60	; 0x3c
   21c2e:	d1f7      	bne.n	21c20 <fn_azm_quick_calibration+0x158>
						backlightOn(&options.backlight_setting);
   21c30:	486c      	ldr	r0, [pc, #432]	; (21de4 <fn_azm_quick_calibration+0x31c>)
   21c32:	4b6d      	ldr	r3, [pc, #436]	; (21de8 <fn_azm_quick_calibration+0x320>)
   21c34:	4798      	blx	r3
						if (cal_azm_quick_add_point(m1Buf, m2Buf, trackerInd)){
   21c36:	0032      	movs	r2, r6
   21c38:	a91f      	add	r1, sp, #124	; 0x7c
   21c3a:	a810      	add	r0, sp, #64	; 0x40
   21c3c:	4b6b      	ldr	r3, [pc, #428]	; (21dec <fn_azm_quick_calibration+0x324>)
   21c3e:	4798      	blx	r3
   21c40:	2800      	cmp	r0, #0
   21c42:	d002      	beq.n	21c4a <fn_azm_quick_calibration+0x182>
							tracker[trackerInd] = true;
   21c44:	2301      	movs	r3, #1
   21c46:	4a62      	ldr	r2, [pc, #392]	; (21dd0 <fn_azm_quick_calibration+0x308>)
   21c48:	5593      	strb	r3, [r2, r6]
				trackerInd++;
   21c4a:	3601      	adds	r6, #1
			for (seg=0;seg<nSeg;seg++){
   21c4c:	9b05      	ldr	r3, [sp, #20]
   21c4e:	445f      	add	r7, fp
				trackerInd++;
   21c50:	b2f6      	uxtb	r6, r6
   21c52:	b2ff      	uxtb	r7, r7
			for (seg=0;seg<nSeg;seg++){
   21c54:	429e      	cmp	r6, r3
   21c56:	d1aa      	bne.n	21bae <fn_azm_quick_calibration+0xe6>
   21c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21c5a:	3301      	adds	r3, #1
   21c5c:	9309      	str	r3, [sp, #36]	; 0x24
   21c5e:	9b07      	ldr	r3, [sp, #28]
   21c60:	9306      	str	r3, [sp, #24]
		for (band=0;band<nBands;band++){
   21c62:	2b3b      	cmp	r3, #59	; 0x3b
   21c64:	d18c      	bne.n	21b80 <fn_azm_quick_calibration+0xb8>
   21c66:	46b3      	mov	fp, r6
 		glcd_draw_line(0, yPos,64, yPos, BLACK);
   21c68:	9804      	ldr	r0, [sp, #16]
   21c6a:	4e61      	ldr	r6, [pc, #388]	; (21df0 <fn_azm_quick_calibration+0x328>)
   21c6c:	47b0      	blx	r6
   21c6e:	2401      	movs	r4, #1
   21c70:	b2c1      	uxtb	r1, r0
   21c72:	000b      	movs	r3, r1
   21c74:	2240      	movs	r2, #64	; 0x40
   21c76:	4d5f      	ldr	r5, [pc, #380]	; (21df4 <fn_azm_quick_calibration+0x32c>)
   21c78:	9400      	str	r4, [sp, #0]
   21c7a:	2000      	movs	r0, #0
   21c7c:	47a8      	blx	r5
		glcd_draw_line(xPos, 0,xPos, 64, BLACK);
   21c7e:	9803      	ldr	r0, [sp, #12]
   21c80:	47b0      	blx	r6
   21c82:	b2c0      	uxtb	r0, r0
   21c84:	0002      	movs	r2, r0
   21c86:	9400      	str	r4, [sp, #0]
   21c88:	2340      	movs	r3, #64	; 0x40
   21c8a:	2100      	movs	r1, #0
   21c8c:	47a8      	blx	r5
		glcd_draw_rect(xMin-1, yMin-1, nBands*bandWidth+1, yHeight+1,BLACK);
   21c8e:	2337      	movs	r3, #55	; 0x37
   21c90:	9400      	str	r4, [sp, #0]
   21c92:	2237      	movs	r2, #55	; 0x37
   21c94:	2104      	movs	r1, #4
   21c96:	2004      	movs	r0, #4
   21c98:	4c57      	ldr	r4, [pc, #348]	; (21df8 <fn_azm_quick_calibration+0x330>)
   21c9a:	47a0      	blx	r4
		sprintf(display_str, "AZM Cal:");
   21c9c:	4c57      	ldr	r4, [pc, #348]	; (21dfc <fn_azm_quick_calibration+0x334>)
   21c9e:	4e58      	ldr	r6, [pc, #352]	; (21e00 <fn_azm_quick_calibration+0x338>)
   21ca0:	2209      	movs	r2, #9
   21ca2:	4958      	ldr	r1, [pc, #352]	; (21e04 <fn_azm_quick_calibration+0x33c>)
   21ca4:	0020      	movs	r0, r4
   21ca6:	47b0      	blx	r6
		glcd_tiny_draw_string(65,0,display_str);	
   21ca8:	4d57      	ldr	r5, [pc, #348]	; (21e08 <fn_azm_quick_calibration+0x340>)
   21caa:	0022      	movs	r2, r4
   21cac:	2100      	movs	r1, #0
   21cae:	2041      	movs	r0, #65	; 0x41
   21cb0:	47a8      	blx	r5
		sprintf(display_str, "Abort");
   21cb2:	2206      	movs	r2, #6
   21cb4:	4955      	ldr	r1, [pc, #340]	; (21e0c <fn_azm_quick_calibration+0x344>)
   21cb6:	0020      	movs	r0, r4
   21cb8:	47b0      	blx	r6
		glcd_tiny_draw_string(97,7,display_str);
   21cba:	0022      	movs	r2, r4
   21cbc:	2107      	movs	r1, #7
   21cbe:	2061      	movs	r0, #97	; 0x61
   21cc0:	47a8      	blx	r5
		sprintf(display_str, "Rate: %d", measCounterLast);
   21cc2:	4b53      	ldr	r3, [pc, #332]	; (21e10 <fn_azm_quick_calibration+0x348>)
   21cc4:	4953      	ldr	r1, [pc, #332]	; (21e14 <fn_azm_quick_calibration+0x34c>)
   21cc6:	681b      	ldr	r3, [r3, #0]
   21cc8:	4f53      	ldr	r7, [pc, #332]	; (21e18 <fn_azm_quick_calibration+0x350>)
   21cca:	001a      	movs	r2, r3
   21ccc:	0020      	movs	r0, r4
   21cce:	9303      	str	r3, [sp, #12]
   21cd0:	47b8      	blx	r7
		glcd_tiny_draw_string(70,1,display_str);
   21cd2:	0022      	movs	r2, r4
   21cd4:	2101      	movs	r1, #1
   21cd6:	2046      	movs	r0, #70	; 0x46
   21cd8:	47a8      	blx	r5
		sprintf(display_str, "Status:");
   21cda:	2208      	movs	r2, #8
   21cdc:	494f      	ldr	r1, [pc, #316]	; (21e1c <fn_azm_quick_calibration+0x354>)
   21cde:	0020      	movs	r0, r4
   21ce0:	47b0      	blx	r6
		glcd_tiny_draw_string(70,2,display_str);
   21ce2:	0022      	movs	r2, r4
   21ce4:	2102      	movs	r1, #2
   21ce6:	2046      	movs	r0, #70	; 0x46
   21ce8:	47a8      	blx	r5
		sprintf(display_str, "%d / %d", nPoints, trackerInd);
   21cea:	464a      	mov	r2, r9
   21cec:	465b      	mov	r3, fp
   21cee:	6812      	ldr	r2, [r2, #0]
   21cf0:	494b      	ldr	r1, [pc, #300]	; (21e20 <fn_azm_quick_calibration+0x358>)
   21cf2:	0020      	movs	r0, r4
   21cf4:	47b8      	blx	r7
		glcd_tiny_draw_string(70,3,display_str);
   21cf6:	0022      	movs	r2, r4
   21cf8:	2103      	movs	r1, #3
   21cfa:	2046      	movs	r0, #70	; 0x46
   21cfc:	47a8      	blx	r5
		glcd_write();
   21cfe:	4b49      	ldr	r3, [pc, #292]	; (21e24 <fn_azm_quick_calibration+0x35c>)
   21d00:	4798      	blx	r3
		if (nPoints>=trackerInd){
   21d02:	464b      	mov	r3, r9
   21d04:	681b      	ldr	r3, [r3, #0]
   21d06:	459b      	cmp	fp, r3
   21d08:	d900      	bls.n	21d0c <fn_azm_quick_calibration+0x244>
   21d0a:	e6f5      	b.n	21af8 <fn_azm_quick_calibration+0x30>
			cal_done(azm_quick);
   21d0c:	4b46      	ldr	r3, [pc, #280]	; (21e28 <fn_azm_quick_calibration+0x360>)
   21d0e:	2001      	movs	r0, #1
   21d10:	4798      	blx	r3
			current_state = st_process_azm_quick_cal;
   21d12:	220e      	movs	r2, #14
   21d14:	4b45      	ldr	r3, [pc, #276]	; (21e2c <fn_azm_quick_calibration+0x364>)
   21d16:	601a      	str	r2, [r3, #0]
	measCounterLast = measCounterCurrent;
   21d18:	4b1b      	ldr	r3, [pc, #108]	; (21d88 <fn_azm_quick_calibration+0x2c0>)
   21d1a:	681b      	ldr	r3, [r3, #0]
   21d1c:	9303      	str	r3, [sp, #12]
   21d1e:	9a03      	ldr	r2, [sp, #12]
   21d20:	4b3b      	ldr	r3, [pc, #236]	; (21e10 <fn_azm_quick_calibration+0x348>)
   21d22:	601a      	str	r2, [r3, #0]
}
   21d24:	b059      	add	sp, #356	; 0x164
   21d26:	bc3c      	pop	{r2, r3, r4, r5}
   21d28:	4690      	mov	r8, r2
   21d2a:	4699      	mov	r9, r3
   21d2c:	46a2      	mov	sl, r4
   21d2e:	46ab      	mov	fp, r5
   21d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
					nPoints++;
   21d32:	464b      	mov	r3, r9
   21d34:	464a      	mov	r2, r9
   21d36:	681b      	ldr	r3, [r3, #0]
					glcd_fill_rect(xSeg1, ySeg1, bandWidth, segHeight,BLACK);
   21d38:	0029      	movs	r1, r5
					nPoints++;
   21d3a:	3301      	adds	r3, #1
   21d3c:	6013      	str	r3, [r2, #0]
					glcd_fill_rect(xSeg1, ySeg1, bandWidth, segHeight,BLACK);
   21d3e:	2301      	movs	r3, #1
   21d40:	2206      	movs	r2, #6
   21d42:	9300      	str	r3, [sp, #0]
   21d44:	9808      	ldr	r0, [sp, #32]
   21d46:	465b      	mov	r3, fp
   21d48:	4c39      	ldr	r4, [pc, #228]	; (21e30 <fn_azm_quick_calibration+0x368>)
   21d4a:	47a0      	blx	r4
   21d4c:	e77d      	b.n	21c4a <fn_azm_quick_calibration+0x182>
   21d4e:	9b06      	ldr	r3, [sp, #24]
   21d50:	3306      	adds	r3, #6
   21d52:	9307      	str	r3, [sp, #28]
   21d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21d56:	3301      	adds	r3, #1
   21d58:	9309      	str	r3, [sp, #36]	; 0x24
   21d5a:	9b07      	ldr	r3, [sp, #28]
   21d5c:	9306      	str	r3, [sp, #24]
		for (band=0;band<nBands;band++){
   21d5e:	2b3b      	cmp	r3, #59	; 0x3b
   21d60:	d000      	beq.n	21d64 <fn_azm_quick_calibration+0x29c>
   21d62:	e70d      	b.n	21b80 <fn_azm_quick_calibration+0xb8>
   21d64:	e77f      	b.n	21c66 <fn_azm_quick_calibration+0x19e>
		cal_disp_message();
   21d66:	4b33      	ldr	r3, [pc, #204]	; (21e34 <fn_azm_quick_calibration+0x36c>)
   21d68:	4798      	blx	r3
   21d6a:	2264      	movs	r2, #100	; 0x64
   21d6c:	2100      	movs	r1, #0
   21d6e:	4b32      	ldr	r3, [pc, #200]	; (21e38 <fn_azm_quick_calibration+0x370>)
   21d70:	4817      	ldr	r0, [pc, #92]	; (21dd0 <fn_azm_quick_calibration+0x308>)
   21d72:	4798      	blx	r3
		cal_init();
   21d74:	4b31      	ldr	r3, [pc, #196]	; (21e3c <fn_azm_quick_calibration+0x374>)
   21d76:	4798      	blx	r3
		last_input = input_none;
   21d78:	2206      	movs	r2, #6
   21d7a:	4b31      	ldr	r3, [pc, #196]	; (21e40 <fn_azm_quick_calibration+0x378>)
   21d7c:	601a      	str	r2, [r3, #0]
   21d7e:	e6b6      	b.n	21aee <fn_azm_quick_calibration+0x26>
   21d80:	0002eae4 	.word	0x0002eae4
   21d84:	20004370 	.word	0x20004370
   21d88:	20000d6c 	.word	0x20000d6c
   21d8c:	00026b11 	.word	0x00026b11
   21d90:	20003d24 	.word	0x20003d24
   21d94:	00016491 	.word	0x00016491
   21d98:	43340000 	.word	0x43340000
   21d9c:	00025e55 	.word	0x00025e55
   21da0:	43b40000 	.word	0x43b40000
   21da4:	00025cf1 	.word	0x00025cf1
   21da8:	00026799 	.word	0x00026799
   21dac:	00026179 	.word	0x00026179
   21db0:	00026559 	.word	0x00026559
   21db4:	42580000 	.word	0x42580000
   21db8:	40a00000 	.word	0x40a00000
   21dbc:	0001284d 	.word	0x0001284d
   21dc0:	42b40000 	.word	0x42b40000
   21dc4:	0001ca59 	.word	0x0001ca59
   21dc8:	20002d38 	.word	0x20002d38
   21dcc:	00025a51 	.word	0x00025a51
   21dd0:	20000d8c 	.word	0x20000d8c
   21dd4:	00025cc9 	.word	0x00025cc9
   21dd8:	00025d05 	.word	0x00025d05
   21ddc:	0000eb51 	.word	0x0000eb51
   21de0:	000162d1 	.word	0x000162d1
   21de4:	20002d34 	.word	0x20002d34
   21de8:	0000ea59 	.word	0x0000ea59
   21dec:	00019b81 	.word	0x00019b81
   21df0:	00025de9 	.word	0x00025de9
   21df4:	0001cb05 	.word	0x0001cb05
   21df8:	0001cdf1 	.word	0x0001cdf1
   21dfc:	20002da0 	.word	0x20002da0
   21e00:	00028999 	.word	0x00028999
   21e04:	0002ef04 	.word	0x0002ef04
   21e08:	0001e2f5 	.word	0x0001e2f5
   21e0c:	0002ef10 	.word	0x0002ef10
   21e10:	20000d70 	.word	0x20000d70
   21e14:	0002ef18 	.word	0x0002ef18
   21e18:	00028ab1 	.word	0x00028ab1
   21e1c:	0002ef24 	.word	0x0002ef24
   21e20:	0002ef2c 	.word	0x0002ef2c
   21e24:	0001db91 	.word	0x0001db91
   21e28:	000197a9 	.word	0x000197a9
   21e2c:	20002630 	.word	0x20002630
   21e30:	0001ccc9 	.word	0x0001ccc9
   21e34:	00021889 	.word	0x00021889
   21e38:	00028a1d 	.word	0x00028a1d
   21e3c:	00019711 	.word	0x00019711
   21e40:	200041d8 	.word	0x200041d8

00021e44 <fn_inc_azm_full_calibration>:
void fn_inc_azm_full_calibration(void){
   21e44:	b5f0      	push	{r4, r5, r6, r7, lr}
   21e46:	46de      	mov	lr, fp
   21e48:	4657      	mov	r7, sl
   21e4a:	464e      	mov	r6, r9
   21e4c:	4645      	mov	r5, r8
   21e4e:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change){
   21e50:	4bab      	ldr	r3, [pc, #684]	; (22100 <fn_inc_azm_full_calibration+0x2bc>)
void fn_inc_azm_full_calibration(void){
   21e52:	b0af      	sub	sp, #188	; 0xbc
	if (state_change){
   21e54:	781b      	ldrb	r3, [r3, #0]
   21e56:	2b00      	cmp	r3, #0
   21e58:	d000      	beq.n	21e5c <fn_inc_azm_full_calibration+0x18>
   21e5a:	e124      	b.n	220a6 <fn_inc_azm_full_calibration+0x262>
   21e5c:	4ca9      	ldr	r4, [pc, #676]	; (22104 <fn_inc_azm_full_calibration+0x2c0>)
	switch(last_input){
   21e5e:	6823      	ldr	r3, [r4, #0]
   21e60:	2b02      	cmp	r3, #2
   21e62:	d100      	bne.n	21e66 <fn_inc_azm_full_calibration+0x22>
   21e64:	e12a      	b.n	220bc <fn_inc_azm_full_calibration+0x278>
   21e66:	2b04      	cmp	r3, #4
   21e68:	d100      	bne.n	21e6c <fn_inc_azm_full_calibration+0x28>
   21e6a:	e12c      	b.n	220c6 <fn_inc_azm_full_calibration+0x282>
   21e6c:	2b00      	cmp	r3, #0
   21e6e:	d100      	bne.n	21e72 <fn_inc_azm_full_calibration+0x2e>
   21e70:	e0f9      	b.n	22066 <fn_inc_azm_full_calibration+0x222>
   21e72:	4ba5      	ldr	r3, [pc, #660]	; (22108 <fn_inc_azm_full_calibration+0x2c4>)
   21e74:	469a      	mov	sl, r3
	last_input = input_none;	
   21e76:	2306      	movs	r3, #6
   21e78:	6023      	str	r3, [r4, #0]
	glcd_clear_buffer();
   21e7a:	4ba4      	ldr	r3, [pc, #656]	; (2210c <fn_inc_azm_full_calibration+0x2c8>)
   21e7c:	4798      	blx	r3
	sprintf(display_str, "Calibration Mode");
   21e7e:	4ba4      	ldr	r3, [pc, #656]	; (22110 <fn_inc_azm_full_calibration+0x2cc>)
	glcd_draw_rect(boxMinX-1, boxAminY, boxWidth+2, boxHeight, BLACK);
   21e80:	2501      	movs	r5, #1
	sprintf(display_str, "Calibration Mode");
   21e82:	469b      	mov	fp, r3
   21e84:	4ca3      	ldr	r4, [pc, #652]	; (22114 <fn_inc_azm_full_calibration+0x2d0>)
   21e86:	2211      	movs	r2, #17
   21e88:	49a3      	ldr	r1, [pc, #652]	; (22118 <fn_inc_azm_full_calibration+0x2d4>)
   21e8a:	0018      	movs	r0, r3
   21e8c:	47a0      	blx	r4
	glcd_tiny_draw_string(0,0,display_str);
   21e8e:	4ba3      	ldr	r3, [pc, #652]	; (2211c <fn_inc_azm_full_calibration+0x2d8>)
   21e90:	465a      	mov	r2, fp
   21e92:	2100      	movs	r1, #0
   21e94:	2000      	movs	r0, #0
   21e96:	4798      	blx	r3
	sprintf(display_str, "Accelerometer");
   21e98:	220e      	movs	r2, #14
   21e9a:	49a1      	ldr	r1, [pc, #644]	; (22120 <fn_inc_azm_full_calibration+0x2dc>)
   21e9c:	4658      	mov	r0, fp
   21e9e:	47a0      	blx	r4
	glcd_tiny_draw_string(0,1,display_str);
   21ea0:	4b9e      	ldr	r3, [pc, #632]	; (2211c <fn_inc_azm_full_calibration+0x2d8>)
   21ea2:	465a      	mov	r2, fp
   21ea4:	2101      	movs	r1, #1
   21ea6:	2000      	movs	r0, #0
   21ea8:	4798      	blx	r3
	sprintf(display_str, "Magnetometer");
   21eaa:	220d      	movs	r2, #13
   21eac:	499d      	ldr	r1, [pc, #628]	; (22124 <fn_inc_azm_full_calibration+0x2e0>)
   21eae:	4658      	mov	r0, fp
   21eb0:	47a0      	blx	r4
	glcd_tiny_draw_string(0,4,display_str);
   21eb2:	465a      	mov	r2, fp
   21eb4:	2104      	movs	r1, #4
   21eb6:	2000      	movs	r0, #0
   21eb8:	4b98      	ldr	r3, [pc, #608]	; (2211c <fn_inc_azm_full_calibration+0x2d8>)
   21eba:	4798      	blx	r3
	glcd_draw_rect(boxMinX-1, boxAminY, boxWidth+2, boxHeight, BLACK);
   21ebc:	2308      	movs	r3, #8
   21ebe:	2251      	movs	r2, #81	; 0x51
   21ec0:	2110      	movs	r1, #16
   21ec2:	2001      	movs	r0, #1
   21ec4:	4c98      	ldr	r4, [pc, #608]	; (22128 <fn_inc_azm_full_calibration+0x2e4>)
   21ec6:	9500      	str	r5, [sp, #0]
   21ec8:	47a0      	blx	r4
	glcd_draw_rect(boxMinX-1, boxMminY, boxWidth+2, boxHeight, BLACK);
   21eca:	2308      	movs	r3, #8
   21ecc:	9500      	str	r5, [sp, #0]
   21ece:	2251      	movs	r2, #81	; 0x51
   21ed0:	2128      	movs	r1, #40	; 0x28
   21ed2:	2001      	movs	r0, #1
   21ed4:	47a0      	blx	r4
	for (i=0;i<nGroups;i++){
   21ed6:	4653      	mov	r3, sl
   21ed8:	681b      	ldr	r3, [r3, #0]
   21eda:	2b00      	cmp	r3, #0
   21edc:	d030      	beq.n	21f40 <fn_inc_azm_full_calibration+0xfc>
   21ede:	4b93      	ldr	r3, [pc, #588]	; (2212c <fn_inc_azm_full_calibration+0x2e8>)
   21ee0:	2500      	movs	r5, #0
   21ee2:	9302      	str	r3, [sp, #8]
   21ee4:	4b92      	ldr	r3, [pc, #584]	; (22130 <fn_inc_azm_full_calibration+0x2ec>)
   21ee6:	2700      	movs	r7, #0
   21ee8:	4699      	mov	r9, r3
		glcd_draw_line(posX_A ,boxAminY, posX_A, boxAminY+boxHeight-1, BLACK);
   21eea:	2301      	movs	r3, #1
   21eec:	4698      	mov	r8, r3
   21eee:	4e91      	ldr	r6, [pc, #580]	; (22134 <fn_inc_azm_full_calibration+0x2f0>)
   21ef0:	006c      	lsls	r4, r5, #1
		posX_A = getDispX(a1Raw[ind],boxMinX, boxWidth, false);
   21ef2:	4b91      	ldr	r3, [pc, #580]	; (22138 <fn_inc_azm_full_calibration+0x2f4>)
   21ef4:	1964      	adds	r4, r4, r5
   21ef6:	00a4      	lsls	r4, r4, #2
   21ef8:	224f      	movs	r2, #79	; 0x4f
   21efa:	2102      	movs	r1, #2
   21efc:	1918      	adds	r0, r3, r4
   21efe:	2300      	movs	r3, #0
   21f00:	47b0      	blx	r6
		glcd_draw_line(posX_A ,boxAminY, posX_A, boxAminY+boxHeight-1, BLACK);
   21f02:	9b02      	ldr	r3, [sp, #8]
   21f04:	4798      	blx	r3
   21f06:	4642      	mov	r2, r8
   21f08:	b2c0      	uxtb	r0, r0
   21f0a:	9200      	str	r2, [sp, #0]
   21f0c:	2317      	movs	r3, #23
   21f0e:	0002      	movs	r2, r0
   21f10:	2110      	movs	r1, #16
   21f12:	47c8      	blx	r9
		posX_M = getDispX(m1Raw[ind],boxMinX, boxWidth, true);
   21f14:	4a89      	ldr	r2, [pc, #548]	; (2213c <fn_inc_azm_full_calibration+0x2f8>)
   21f16:	2102      	movs	r1, #2
   21f18:	1910      	adds	r0, r2, r4
   21f1a:	2301      	movs	r3, #1
   21f1c:	224f      	movs	r2, #79	; 0x4f
   21f1e:	47b0      	blx	r6
		glcd_draw_line(posX_M ,boxMminY, posX_M, boxMminY+boxHeight-1, BLACK);
   21f20:	9b02      	ldr	r3, [sp, #8]
   21f22:	4798      	blx	r3
   21f24:	4643      	mov	r3, r8
   21f26:	b2c0      	uxtb	r0, r0
   21f28:	9300      	str	r3, [sp, #0]
   21f2a:	0002      	movs	r2, r0
   21f2c:	232f      	movs	r3, #47	; 0x2f
   21f2e:	2128      	movs	r1, #40	; 0x28
   21f30:	47c8      	blx	r9
	for (i=0;i<nGroups;i++){
   21f32:	4653      	mov	r3, sl
   21f34:	681b      	ldr	r3, [r3, #0]
   21f36:	3504      	adds	r5, #4
   21f38:	3701      	adds	r7, #1
   21f3a:	b2ed      	uxtb	r5, r5
   21f3c:	42bb      	cmp	r3, r7
   21f3e:	d8d7      	bhi.n	21ef0 <fn_inc_azm_full_calibration+0xac>
			glcd_draw_circle(statBarMinX, yCir, circleRadius, BLACK);
   21f40:	4b7f      	ldr	r3, [pc, #508]	; (22140 <fn_inc_azm_full_calibration+0x2fc>)
	for (i=0;i<nGroups;i++){
   21f42:	240f      	movs	r4, #15
   21f44:	2500      	movs	r5, #0
			glcd_draw_circle(statBarMinX, yCir, circleRadius, BLACK);
   21f46:	4698      	mov	r8, r3
   21f48:	4e7e      	ldr	r6, [pc, #504]	; (22144 <fn_inc_azm_full_calibration+0x300>)
			glcd_fill_circle(statBarMinX, yCir, circleRadius, BLACK);
   21f4a:	4f7f      	ldr	r7, [pc, #508]	; (22148 <fn_inc_azm_full_calibration+0x304>)
		if (i<cal_getGroupPoints()){
   21f4c:	47b0      	blx	r6
			glcd_fill_circle(statBarMinX, yCir, circleRadius, BLACK);
   21f4e:	2301      	movs	r3, #1
   21f50:	2205      	movs	r2, #5
   21f52:	0021      	movs	r1, r4
		if (i<cal_getGroupPoints()){
   21f54:	42a8      	cmp	r0, r5
   21f56:	d800      	bhi.n	21f5a <fn_inc_azm_full_calibration+0x116>
   21f58:	e095      	b.n	22086 <fn_inc_azm_full_calibration+0x242>
   21f5a:	340a      	adds	r4, #10
			glcd_fill_circle(statBarMinX, yCir, circleRadius, BLACK);
   21f5c:	2058      	movs	r0, #88	; 0x58
   21f5e:	b2e4      	uxtb	r4, r4
   21f60:	47b8      	blx	r7
	for (i=0;i<GROUP_SIZE;i++){
   21f62:	3501      	adds	r5, #1
   21f64:	2c37      	cmp	r4, #55	; 0x37
   21f66:	d1f1      	bne.n	21f4c <fn_inc_azm_full_calibration+0x108>
	sprintf(display_str, "G%d", cal_getCurrentGroup());
   21f68:	4d78      	ldr	r5, [pc, #480]	; (2214c <fn_inc_azm_full_calibration+0x308>)
   21f6a:	47a8      	blx	r5
   21f6c:	4978      	ldr	r1, [pc, #480]	; (22150 <fn_inc_azm_full_calibration+0x30c>)
   21f6e:	0002      	movs	r2, r0
   21f70:	4c78      	ldr	r4, [pc, #480]	; (22154 <fn_inc_azm_full_calibration+0x310>)
   21f72:	4658      	mov	r0, fp
   21f74:	47a0      	blx	r4
	glcd_draw_string_xy(statBarMinX-9,statBarMinY+10*GROUP_SIZE-3,display_str);
   21f76:	465a      	mov	r2, fp
   21f78:	2134      	movs	r1, #52	; 0x34
   21f7a:	204f      	movs	r0, #79	; 0x4f
   21f7c:	4b76      	ldr	r3, [pc, #472]	; (22158 <fn_inc_azm_full_calibration+0x314>)
   21f7e:	4798      	blx	r3
	sprintf(display_str,"%d of min %d", nGroups, MIN_GROUPS);
   21f80:	4652      	mov	r2, sl
   21f82:	230e      	movs	r3, #14
   21f84:	6812      	ldr	r2, [r2, #0]
   21f86:	4975      	ldr	r1, [pc, #468]	; (2215c <fn_inc_azm_full_calibration+0x318>)
   21f88:	4658      	mov	r0, fp
   21f8a:	47a0      	blx	r4
	glcd_tiny_draw_string(0,7,display_str);
   21f8c:	4b63      	ldr	r3, [pc, #396]	; (2211c <fn_inc_azm_full_calibration+0x2d8>)
   21f8e:	465a      	mov	r2, fp
   21f90:	2107      	movs	r1, #7
   21f92:	2000      	movs	r0, #0
   21f94:	4798      	blx	r3
	if (nGroups >= MIN_GROUPS){
   21f96:	4653      	mov	r3, sl
   21f98:	681b      	ldr	r3, [r3, #0]
   21f9a:	2b0d      	cmp	r3, #13
   21f9c:	d800      	bhi.n	21fa0 <fn_inc_azm_full_calibration+0x15c>
   21f9e:	e07b      	b.n	22098 <fn_inc_azm_full_calibration+0x254>
		drawSoftKeys("Done",""," ","Abort");
   21fa0:	4b6f      	ldr	r3, [pc, #444]	; (22160 <fn_inc_azm_full_calibration+0x31c>)
   21fa2:	4a70      	ldr	r2, [pc, #448]	; (22164 <fn_inc_azm_full_calibration+0x320>)
   21fa4:	4970      	ldr	r1, [pc, #448]	; (22168 <fn_inc_azm_full_calibration+0x324>)
   21fa6:	4871      	ldr	r0, [pc, #452]	; (2216c <fn_inc_azm_full_calibration+0x328>)
   21fa8:	4e71      	ldr	r6, [pc, #452]	; (22170 <fn_inc_azm_full_calibration+0x32c>)
   21faa:	47b0      	blx	r6
	sprintf(display_str," G%d", cal_getCurrentGroup());
   21fac:	47a8      	blx	r5
   21fae:	4971      	ldr	r1, [pc, #452]	; (22174 <fn_inc_azm_full_calibration+0x330>)
   21fb0:	0002      	movs	r2, r0
   21fb2:	4658      	mov	r0, fp
   21fb4:	47a0      	blx	r4
	draw2LineSoftKey("Reset",display_str,3);
   21fb6:	4659      	mov	r1, fp
   21fb8:	2203      	movs	r2, #3
   21fba:	486f      	ldr	r0, [pc, #444]	; (22178 <fn_inc_azm_full_calibration+0x334>)
   21fbc:	4b6f      	ldr	r3, [pc, #444]	; (2217c <fn_inc_azm_full_calibration+0x338>)
   21fbe:	4798      	blx	r3
	glcd_write();
   21fc0:	4b6f      	ldr	r3, [pc, #444]	; (22180 <fn_inc_azm_full_calibration+0x33c>)
   21fc2:	4798      	blx	r3
	while(current_input==input_none){	
   21fc4:	4b6f      	ldr	r3, [pc, #444]	; (22184 <fn_inc_azm_full_calibration+0x340>)
   21fc6:	469b      	mov	fp, r3
   21fc8:	681b      	ldr	r3, [r3, #0]
   21fca:	2b06      	cmp	r3, #6
   21fcc:	d144      	bne.n	22058 <fn_inc_azm_full_calibration+0x214>
   21fce:	ab04      	add	r3, sp, #16
   21fd0:	9303      	str	r3, [sp, #12]
   21fd2:	4b56      	ldr	r3, [pc, #344]	; (2212c <fn_inc_azm_full_calibration+0x2e8>)
   21fd4:	4e57      	ldr	r6, [pc, #348]	; (22134 <fn_inc_azm_full_calibration+0x2f0>)
   21fd6:	9302      	str	r3, [sp, #8]
   21fd8:	4b6b      	ldr	r3, [pc, #428]	; (22188 <fn_inc_azm_full_calibration+0x344>)
   21fda:	4f6c      	ldr	r7, [pc, #432]	; (2218c <fn_inc_azm_full_calibration+0x348>)
   21fdc:	469a      	mov	sl, r3
   21fde:	4b6c      	ldr	r3, [pc, #432]	; (22190 <fn_inc_azm_full_calibration+0x34c>)
   21fe0:	4699      	mov	r9, r3
   21fe2:	4b6c      	ldr	r3, [pc, #432]	; (22194 <fn_inc_azm_full_calibration+0x350>)
   21fe4:	4698      	mov	r8, r3
		quick_measurement(&temp_meas);
   21fe6:	9803      	ldr	r0, [sp, #12]
   21fe8:	4b6b      	ldr	r3, [pc, #428]	; (22198 <fn_inc_azm_full_calibration+0x354>)
   21fea:	4798      	blx	r3
		posX_A = getDispX(temp_meas.a1Raw,boxMinX, boxWidth, false);
   21fec:	2300      	movs	r3, #0
   21fee:	224f      	movs	r2, #79	; 0x4f
   21ff0:	2102      	movs	r1, #2
   21ff2:	a816      	add	r0, sp, #88	; 0x58
   21ff4:	47b0      	blx	r6
		posX_M = getDispX(temp_meas.m1Raw,boxMinX, boxWidth, true);
   21ff6:	2301      	movs	r3, #1
		posX_A = getDispX(temp_meas.a1Raw,boxMinX, boxWidth, false);
   21ff8:	1c05      	adds	r5, r0, #0
		posX_M = getDispX(temp_meas.m1Raw,boxMinX, boxWidth, true);
   21ffa:	224f      	movs	r2, #79	; 0x4f
   21ffc:	2102      	movs	r1, #2
   21ffe:	a81c      	add	r0, sp, #112	; 0x70
   22000:	47b0      	blx	r6
		glcd_tiny_draw_char(lastPosA, 3, ' ');
   22002:	4653      	mov	r3, sl
		posX_M = getDispX(temp_meas.m1Raw,boxMinX, boxWidth, true);
   22004:	1c04      	adds	r4, r0, #0
		glcd_tiny_draw_char(lastPosA, 3, ' ');
   22006:	2220      	movs	r2, #32
   22008:	7818      	ldrb	r0, [r3, #0]
   2200a:	2103      	movs	r1, #3
   2200c:	47b8      	blx	r7
		glcd_tiny_draw_char(lastPosM, 6, ' ');
   2200e:	464b      	mov	r3, r9
   22010:	2220      	movs	r2, #32
   22012:	7818      	ldrb	r0, [r3, #0]
   22014:	2106      	movs	r1, #6
   22016:	47b8      	blx	r7
		posX_A = posX_A-2; // To account for width of character
   22018:	2180      	movs	r1, #128	; 0x80
   2201a:	1c28      	adds	r0, r5, #0
   2201c:	05c9      	lsls	r1, r1, #23
   2201e:	47c0      	blx	r8
		glcd_tiny_draw_char(posX_A, 3, '^');
   22020:	9b02      	ldr	r3, [sp, #8]
   22022:	4798      	blx	r3
   22024:	b2c5      	uxtb	r5, r0
   22026:	225e      	movs	r2, #94	; 0x5e
   22028:	2103      	movs	r1, #3
   2202a:	0028      	movs	r0, r5
   2202c:	47b8      	blx	r7
		posX_M = posX_M-2; // To account for width of character
   2202e:	2180      	movs	r1, #128	; 0x80
   22030:	1c20      	adds	r0, r4, #0
   22032:	05c9      	lsls	r1, r1, #23
   22034:	47c0      	blx	r8
		glcd_tiny_draw_char(posX_M, 6, '^');
   22036:	9b02      	ldr	r3, [sp, #8]
   22038:	4798      	blx	r3
   2203a:	b2c4      	uxtb	r4, r0
   2203c:	225e      	movs	r2, #94	; 0x5e
   2203e:	2106      	movs	r1, #6
   22040:	0020      	movs	r0, r4
   22042:	47b8      	blx	r7
		glcd_write();
   22044:	4b4e      	ldr	r3, [pc, #312]	; (22180 <fn_inc_azm_full_calibration+0x33c>)
   22046:	4798      	blx	r3
		lastPosA = posX_A;
   22048:	4653      	mov	r3, sl
   2204a:	701d      	strb	r5, [r3, #0]
		lastPosM = posX_M;
   2204c:	464b      	mov	r3, r9
   2204e:	701c      	strb	r4, [r3, #0]
	while(current_input==input_none){	
   22050:	465b      	mov	r3, fp
   22052:	681b      	ldr	r3, [r3, #0]
   22054:	2b06      	cmp	r3, #6
   22056:	d0c6      	beq.n	21fe6 <fn_inc_azm_full_calibration+0x1a2>
}
   22058:	b02f      	add	sp, #188	; 0xbc
   2205a:	bc3c      	pop	{r2, r3, r4, r5}
   2205c:	4690      	mov	r8, r2
   2205e:	4699      	mov	r9, r3
   22060:	46a2      	mov	sl, r4
   22062:	46ab      	mov	fp, r5
   22064:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (nGroups>=MIN_GROUPS){//  Requires min_groups to complete
   22066:	4b28      	ldr	r3, [pc, #160]	; (22108 <fn_inc_azm_full_calibration+0x2c4>)
   22068:	469a      	mov	sl, r3
   2206a:	681b      	ldr	r3, [r3, #0]
   2206c:	2b0d      	cmp	r3, #13
   2206e:	d800      	bhi.n	22072 <fn_inc_azm_full_calibration+0x22e>
   22070:	e701      	b.n	21e76 <fn_inc_azm_full_calibration+0x32>
				rangefinder_on_off(false);
   22072:	2000      	movs	r0, #0
   22074:	4b49      	ldr	r3, [pc, #292]	; (2219c <fn_inc_azm_full_calibration+0x358>)
   22076:	4798      	blx	r3
				cal_done(inc_azm_full);
   22078:	4b49      	ldr	r3, [pc, #292]	; (221a0 <fn_inc_azm_full_calibration+0x35c>)
   2207a:	2000      	movs	r0, #0
   2207c:	4798      	blx	r3
				current_state = st_process_inc_azm_full_cal;
   2207e:	220d      	movs	r2, #13
   22080:	4b48      	ldr	r3, [pc, #288]	; (221a4 <fn_inc_azm_full_calibration+0x360>)
   22082:	601a      	str	r2, [r3, #0]
   22084:	e6f7      	b.n	21e76 <fn_inc_azm_full_calibration+0x32>
   22086:	340a      	adds	r4, #10
			glcd_draw_circle(statBarMinX, yCir, circleRadius, BLACK);
   22088:	2058      	movs	r0, #88	; 0x58
   2208a:	b2e4      	uxtb	r4, r4
   2208c:	47c0      	blx	r8
	for (i=0;i<GROUP_SIZE;i++){
   2208e:	3501      	adds	r5, #1
   22090:	2c37      	cmp	r4, #55	; 0x37
   22092:	d000      	beq.n	22096 <fn_inc_azm_full_calibration+0x252>
   22094:	e75a      	b.n	21f4c <fn_inc_azm_full_calibration+0x108>
   22096:	e767      	b.n	21f68 <fn_inc_azm_full_calibration+0x124>
		drawSoftKeys(" "," ","","Abort");
   22098:	4832      	ldr	r0, [pc, #200]	; (22164 <fn_inc_azm_full_calibration+0x320>)
   2209a:	4b31      	ldr	r3, [pc, #196]	; (22160 <fn_inc_azm_full_calibration+0x31c>)
   2209c:	4a32      	ldr	r2, [pc, #200]	; (22168 <fn_inc_azm_full_calibration+0x324>)
   2209e:	0001      	movs	r1, r0
   220a0:	4e33      	ldr	r6, [pc, #204]	; (22170 <fn_inc_azm_full_calibration+0x32c>)
   220a2:	47b0      	blx	r6
   220a4:	e782      	b.n	21fac <fn_inc_azm_full_calibration+0x168>
		cal_disp_message();
   220a6:	4b40      	ldr	r3, [pc, #256]	; (221a8 <fn_inc_azm_full_calibration+0x364>)
   220a8:	4798      	blx	r3
		cal_init();
   220aa:	4b40      	ldr	r3, [pc, #256]	; (221ac <fn_inc_azm_full_calibration+0x368>)
   220ac:	4798      	blx	r3
		last_input = input_none;
   220ae:	2306      	movs	r3, #6
   220b0:	4c14      	ldr	r4, [pc, #80]	; (22104 <fn_inc_azm_full_calibration+0x2c0>)
   220b2:	6023      	str	r3, [r4, #0]
	switch(last_input){
   220b4:	6823      	ldr	r3, [r4, #0]
   220b6:	2b02      	cmp	r3, #2
   220b8:	d000      	beq.n	220bc <fn_inc_azm_full_calibration+0x278>
   220ba:	e6d4      	b.n	21e66 <fn_inc_azm_full_calibration+0x22>
			cal_resetGroup();
   220bc:	4b3c      	ldr	r3, [pc, #240]	; (221b0 <fn_inc_azm_full_calibration+0x36c>)
   220be:	4798      	blx	r3
   220c0:	4b11      	ldr	r3, [pc, #68]	; (22108 <fn_inc_azm_full_calibration+0x2c4>)
   220c2:	469a      	mov	sl, r3
			break;
   220c4:	e6d7      	b.n	21e76 <fn_inc_azm_full_calibration+0x32>
			if (!isLaserOn()){
   220c6:	4b3b      	ldr	r3, [pc, #236]	; (221b4 <fn_inc_azm_full_calibration+0x370>)
   220c8:	4798      	blx	r3
   220ca:	2800      	cmp	r0, #0
   220cc:	d108      	bne.n	220e0 <fn_inc_azm_full_calibration+0x29c>
				rangefinder_on_off(true);
   220ce:	3001      	adds	r0, #1
   220d0:	4b32      	ldr	r3, [pc, #200]	; (2219c <fn_inc_azm_full_calibration+0x358>)
   220d2:	4798      	blx	r3
				laser_on_off(true);
   220d4:	4b38      	ldr	r3, [pc, #224]	; (221b8 <fn_inc_azm_full_calibration+0x374>)
   220d6:	2001      	movs	r0, #1
   220d8:	4798      	blx	r3
   220da:	4b0b      	ldr	r3, [pc, #44]	; (22108 <fn_inc_azm_full_calibration+0x2c4>)
   220dc:	469a      	mov	sl, r3
   220de:	e6ca      	b.n	21e76 <fn_inc_azm_full_calibration+0x32>
				full_measurement(&temp_meas, options.shot_delay, measCal);
   220e0:	4b36      	ldr	r3, [pc, #216]	; (221bc <fn_inc_azm_full_calibration+0x378>)
   220e2:	2203      	movs	r2, #3
   220e4:	7a99      	ldrb	r1, [r3, #10]
   220e6:	ab04      	add	r3, sp, #16
   220e8:	001d      	movs	r5, r3
   220ea:	0018      	movs	r0, r3
   220ec:	4b34      	ldr	r3, [pc, #208]	; (221c0 <fn_inc_azm_full_calibration+0x37c>)
   220ee:	4798      	blx	r3
				rangefinder_on_off(false);
   220f0:	2000      	movs	r0, #0
   220f2:	4b2a      	ldr	r3, [pc, #168]	; (2219c <fn_inc_azm_full_calibration+0x358>)
   220f4:	4798      	blx	r3
				cal_add_datapoint(&temp_meas);
   220f6:	0028      	movs	r0, r5
   220f8:	4b32      	ldr	r3, [pc, #200]	; (221c4 <fn_inc_azm_full_calibration+0x380>)
   220fa:	4798      	blx	r3
   220fc:	e6b9      	b.n	21e72 <fn_inc_azm_full_calibration+0x2e>
   220fe:	46c0      	nop			; (mov r8, r8)
   22100:	20004370 	.word	0x20004370
   22104:	200041d8 	.word	0x200041d8
   22108:	20003394 	.word	0x20003394
   2210c:	0001ca59 	.word	0x0001ca59
   22110:	20002da0 	.word	0x20002da0
   22114:	00028999 	.word	0x00028999
   22118:	0002f238 	.word	0x0002f238
   2211c:	0001e2f5 	.word	0x0001e2f5
   22120:	0002f24c 	.word	0x0002f24c
   22124:	0002f25c 	.word	0x0002f25c
   22128:	0001cdf1 	.word	0x0001cdf1
   2212c:	00025de9 	.word	0x00025de9
   22130:	0001cb05 	.word	0x0001cb05
   22134:	000103ed 	.word	0x000103ed
   22138:	20003d28 	.word	0x20003d28
   2213c:	20002e80 	.word	0x20002e80
   22140:	0001d159 	.word	0x0001d159
   22144:	00019539 	.word	0x00019539
   22148:	0001d7d9 	.word	0x0001d7d9
   2214c:	00019545 	.word	0x00019545
   22150:	0002f26c 	.word	0x0002f26c
   22154:	00028ab1 	.word	0x00028ab1
   22158:	0001e1fd 	.word	0x0001e1fd
   2215c:	0002f270 	.word	0x0002f270
   22160:	0002ef10 	.word	0x0002ef10
   22164:	0002f3f8 	.word	0x0002f3f8
   22168:	0002e36c 	.word	0x0002e36c
   2216c:	0002f280 	.word	0x0002f280
   22170:	000104dd 	.word	0x000104dd
   22174:	0002f288 	.word	0x0002f288
   22178:	0002f290 	.word	0x0002f290
   2217c:	00010619 	.word	0x00010619
   22180:	0001db91 	.word	0x0001db91
   22184:	20003d24 	.word	0x20003d24
   22188:	20000d64 	.word	0x20000d64
   2218c:	0001e255 	.word	0x0001e255
   22190:	20000d65 	.word	0x20000d65
   22194:	00026799 	.word	0x00026799
   22198:	00016491 	.word	0x00016491
   2219c:	000160dd 	.word	0x000160dd
   221a0:	000197a9 	.word	0x000197a9
   221a4:	20002630 	.word	0x20002630
   221a8:	00021889 	.word	0x00021889
   221ac:	00019711 	.word	0x00019711
   221b0:	00019551 	.word	0x00019551
   221b4:	00015ed5 	.word	0x00015ed5
   221b8:	00016109 	.word	0x00016109
   221bc:	20002d20 	.word	0x20002d20
   221c0:	00016539 	.word	0x00016539
   221c4:	0001a459 	.word	0x0001a459

000221c8 <fn_loop_test>:
void fn_loop_test(void){
   221c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   221ca:	46d6      	mov	lr, sl
   221cc:	464f      	mov	r7, r9
   221ce:	4646      	mov	r6, r8
   221d0:	b5c0      	push	{r6, r7, lr}
	if (state_change){
   221d2:	4b6a      	ldr	r3, [pc, #424]	; (2237c <fn_loop_test+0x1b4>)
void fn_loop_test(void){
   221d4:	b0aa      	sub	sp, #168	; 0xa8
	if (state_change){
   221d6:	781b      	ldrb	r3, [r3, #0]
   221d8:	2b00      	cmp	r3, #0
   221da:	d000      	beq.n	221de <fn_loop_test+0x16>
   221dc:	e0ba      	b.n	22354 <fn_loop_test+0x18c>
	switch(last_input){
   221de:	4b68      	ldr	r3, [pc, #416]	; (22380 <fn_loop_test+0x1b8>)
   221e0:	681b      	ldr	r3, [r3, #0]
   221e2:	2b00      	cmp	r3, #0
   221e4:	d100      	bne.n	221e8 <fn_loop_test+0x20>
   221e6:	e0ae      	b.n	22346 <fn_loop_test+0x17e>
   221e8:	2b04      	cmp	r3, #4
   221ea:	d100      	bne.n	221ee <fn_loop_test+0x26>
   221ec:	e098      	b.n	22320 <fn_loop_test+0x158>
   221ee:	4b65      	ldr	r3, [pc, #404]	; (22384 <fn_loop_test+0x1bc>)
   221f0:	4699      	mov	r9, r3
	glcd_clear_buffer();
   221f2:	4b65      	ldr	r3, [pc, #404]	; (22388 <fn_loop_test+0x1c0>)
   221f4:	4798      	blx	r3
	sprintf(display_str, "Loop Test:");
   221f6:	4c65      	ldr	r4, [pc, #404]	; (2238c <fn_loop_test+0x1c4>)
   221f8:	220b      	movs	r2, #11
   221fa:	4965      	ldr	r1, [pc, #404]	; (22390 <fn_loop_test+0x1c8>)
   221fc:	0020      	movs	r0, r4
   221fe:	4e65      	ldr	r6, [pc, #404]	; (22394 <fn_loop_test+0x1cc>)
   22200:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   22202:	0022      	movs	r2, r4
   22204:	2100      	movs	r1, #0
   22206:	2000      	movs	r0, #0
   22208:	4d63      	ldr	r5, [pc, #396]	; (22398 <fn_loop_test+0x1d0>)
   2220a:	47a8      	blx	r5
	sprintf(display_str, "Segments: %d", nPoints);
   2220c:	4b63      	ldr	r3, [pc, #396]	; (2239c <fn_loop_test+0x1d4>)
   2220e:	4964      	ldr	r1, [pc, #400]	; (223a0 <fn_loop_test+0x1d8>)
   22210:	681a      	ldr	r2, [r3, #0]
   22212:	4f64      	ldr	r7, [pc, #400]	; (223a4 <fn_loop_test+0x1dc>)
   22214:	0020      	movs	r0, r4
   22216:	47b8      	blx	r7
	glcd_tiny_draw_string(0,2,display_str);
   22218:	0022      	movs	r2, r4
   2221a:	2102      	movs	r1, #2
   2221c:	2000      	movs	r0, #0
   2221e:	47a8      	blx	r5
	sprintf(display_str, "Loop length: %.1f", loop_distance);
   22220:	4b61      	ldr	r3, [pc, #388]	; (223a8 <fn_loop_test+0x1e0>)
   22222:	4698      	mov	r8, r3
   22224:	4b61      	ldr	r3, [pc, #388]	; (223ac <fn_loop_test+0x1e4>)
   22226:	6818      	ldr	r0, [r3, #0]
   22228:	47c0      	blx	r8
   2222a:	000b      	movs	r3, r1
   2222c:	0002      	movs	r2, r0
   2222e:	4960      	ldr	r1, [pc, #384]	; (223b0 <fn_loop_test+0x1e8>)
   22230:	0020      	movs	r0, r4
   22232:	47b8      	blx	r7
	if (options.current_unit_dist == feet){
   22234:	464b      	mov	r3, r9
   22236:	7a1b      	ldrb	r3, [r3, #8]
		strcat(display_str,"ft");
   22238:	0020      	movs	r0, r4
	if (options.current_unit_dist == feet){
   2223a:	2b00      	cmp	r3, #0
   2223c:	d162      	bne.n	22304 <fn_loop_test+0x13c>
		strcat(display_str,"ft");
   2223e:	4b5d      	ldr	r3, [pc, #372]	; (223b4 <fn_loop_test+0x1ec>)
   22240:	469a      	mov	sl, r3
   22242:	4798      	blx	r3
   22244:	2203      	movs	r2, #3
   22246:	1820      	adds	r0, r4, r0
   22248:	495b      	ldr	r1, [pc, #364]	; (223b8 <fn_loop_test+0x1f0>)
   2224a:	47b0      	blx	r6
	glcd_tiny_draw_string(0,3,display_str);
   2224c:	0022      	movs	r2, r4
   2224e:	2103      	movs	r1, #3
   22250:	2000      	movs	r0, #0
   22252:	47a8      	blx	r5
	sprintf(display_str, "Displacement from P1:");
   22254:	2216      	movs	r2, #22
   22256:	4959      	ldr	r1, [pc, #356]	; (223bc <fn_loop_test+0x1f4>)
   22258:	0020      	movs	r0, r4
   2225a:	47b0      	blx	r6
	glcd_tiny_draw_string(0,4,display_str);
   2225c:	0022      	movs	r2, r4
   2225e:	2104      	movs	r1, #4
   22260:	2000      	movs	r0, #0
   22262:	47a8      	blx	r5
	sprintf(display_str, "Horizontal: %.1f", loop_horizontal);
   22264:	4b56      	ldr	r3, [pc, #344]	; (223c0 <fn_loop_test+0x1f8>)
   22266:	6818      	ldr	r0, [r3, #0]
   22268:	47c0      	blx	r8
   2226a:	000b      	movs	r3, r1
   2226c:	0002      	movs	r2, r0
   2226e:	4955      	ldr	r1, [pc, #340]	; (223c4 <fn_loop_test+0x1fc>)
   22270:	0020      	movs	r0, r4
   22272:	47b8      	blx	r7
	if (options.current_unit_dist == feet){
   22274:	464b      	mov	r3, r9
   22276:	7a1b      	ldrb	r3, [r3, #8]
		strcat(display_str,"ft");
   22278:	0020      	movs	r0, r4
	if (options.current_unit_dist == feet){
   2227a:	2b00      	cmp	r3, #0
   2227c:	d14a      	bne.n	22314 <fn_loop_test+0x14c>
		strcat(display_str,"ft");
   2227e:	47d0      	blx	sl
   22280:	2203      	movs	r2, #3
   22282:	1820      	adds	r0, r4, r0
   22284:	494c      	ldr	r1, [pc, #304]	; (223b8 <fn_loop_test+0x1f0>)
   22286:	47b0      	blx	r6
	glcd_tiny_draw_string(0,5,display_str);
   22288:	0022      	movs	r2, r4
   2228a:	2105      	movs	r1, #5
   2228c:	2000      	movs	r0, #0
   2228e:	47a8      	blx	r5
	sprintf(display_str, "Vertical: %.1f", loop_vertical);
   22290:	4b4d      	ldr	r3, [pc, #308]	; (223c8 <fn_loop_test+0x200>)
   22292:	6818      	ldr	r0, [r3, #0]
   22294:	47c0      	blx	r8
   22296:	000b      	movs	r3, r1
   22298:	0002      	movs	r2, r0
   2229a:	494c      	ldr	r1, [pc, #304]	; (223cc <fn_loop_test+0x204>)
   2229c:	0020      	movs	r0, r4
   2229e:	47b8      	blx	r7
	if (options.current_unit_dist == feet){
   222a0:	464b      	mov	r3, r9
   222a2:	7a1b      	ldrb	r3, [r3, #8]
		strcat(display_str,"ft");
   222a4:	0020      	movs	r0, r4
	if (options.current_unit_dist == feet){
   222a6:	2b00      	cmp	r3, #0
   222a8:	d047      	beq.n	2233a <fn_loop_test+0x172>
		strcat(display_str,"m");
   222aa:	47d0      	blx	sl
   222ac:	2202      	movs	r2, #2
   222ae:	1820      	adds	r0, r4, r0
   222b0:	4947      	ldr	r1, [pc, #284]	; (223d0 <fn_loop_test+0x208>)
   222b2:	47b0      	blx	r6
	glcd_tiny_draw_string(0,6,display_str);
   222b4:	0022      	movs	r2, r4
   222b6:	2106      	movs	r1, #6
   222b8:	2000      	movs	r0, #0
   222ba:	47a8      	blx	r5
	sprintf(display_str, "Azimuth: %.1f", loop_azimuth);
   222bc:	4b45      	ldr	r3, [pc, #276]	; (223d4 <fn_loop_test+0x20c>)
   222be:	6818      	ldr	r0, [r3, #0]
   222c0:	47c0      	blx	r8
   222c2:	000b      	movs	r3, r1
   222c4:	0002      	movs	r2, r0
   222c6:	4944      	ldr	r1, [pc, #272]	; (223d8 <fn_loop_test+0x210>)
   222c8:	0020      	movs	r0, r4
   222ca:	47b8      	blx	r7
	glcd_tiny_draw_string(0,7,display_str);
   222cc:	0022      	movs	r2, r4
   222ce:	2107      	movs	r1, #7
   222d0:	2000      	movs	r0, #0
   222d2:	47a8      	blx	r5
	sprintf(display_str, "Done");
   222d4:	2205      	movs	r2, #5
   222d6:	4941      	ldr	r1, [pc, #260]	; (223dc <fn_loop_test+0x214>)
   222d8:	0020      	movs	r0, r4
   222da:	47b0      	blx	r6
	glcd_tiny_draw_string(100,0,display_str);
   222dc:	0022      	movs	r2, r4
   222de:	2100      	movs	r1, #0
   222e0:	2064      	movs	r0, #100	; 0x64
   222e2:	47a8      	blx	r5
	sprintf(display_str, "Abort");
   222e4:	2206      	movs	r2, #6
   222e6:	493e      	ldr	r1, [pc, #248]	; (223e0 <fn_loop_test+0x218>)
   222e8:	0020      	movs	r0, r4
   222ea:	47b0      	blx	r6
	glcd_tiny_draw_string(97,7,display_str);
   222ec:	0022      	movs	r2, r4
   222ee:	2107      	movs	r1, #7
   222f0:	2061      	movs	r0, #97	; 0x61
   222f2:	47a8      	blx	r5
	glcd_write();
   222f4:	4b3b      	ldr	r3, [pc, #236]	; (223e4 <fn_loop_test+0x21c>)
   222f6:	4798      	blx	r3
}
   222f8:	b02a      	add	sp, #168	; 0xa8
   222fa:	bc1c      	pop	{r2, r3, r4}
   222fc:	4690      	mov	r8, r2
   222fe:	4699      	mov	r9, r3
   22300:	46a2      	mov	sl, r4
   22302:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(display_str,"m");
   22304:	4b2b      	ldr	r3, [pc, #172]	; (223b4 <fn_loop_test+0x1ec>)
   22306:	469a      	mov	sl, r3
   22308:	4798      	blx	r3
   2230a:	2202      	movs	r2, #2
   2230c:	1820      	adds	r0, r4, r0
   2230e:	4930      	ldr	r1, [pc, #192]	; (223d0 <fn_loop_test+0x208>)
   22310:	47b0      	blx	r6
   22312:	e79b      	b.n	2224c <fn_loop_test+0x84>
		strcat(display_str,"m");
   22314:	47d0      	blx	sl
   22316:	2202      	movs	r2, #2
   22318:	1820      	adds	r0, r4, r0
   2231a:	492d      	ldr	r1, [pc, #180]	; (223d0 <fn_loop_test+0x208>)
   2231c:	47b0      	blx	r6
   2231e:	e7b3      	b.n	22288 <fn_loop_test+0xc0>
			if (!isLaserOn()){
   22320:	4b31      	ldr	r3, [pc, #196]	; (223e8 <fn_loop_test+0x220>)
   22322:	4798      	blx	r3
   22324:	2800      	cmp	r0, #0
   22326:	d11a      	bne.n	2235e <fn_loop_test+0x196>
				rangefinder_on_off(true);
   22328:	3001      	adds	r0, #1
   2232a:	4b30      	ldr	r3, [pc, #192]	; (223ec <fn_loop_test+0x224>)
   2232c:	4798      	blx	r3
				laser_on_off(true);
   2232e:	4b30      	ldr	r3, [pc, #192]	; (223f0 <fn_loop_test+0x228>)
   22330:	2001      	movs	r0, #1
   22332:	4798      	blx	r3
   22334:	4b13      	ldr	r3, [pc, #76]	; (22384 <fn_loop_test+0x1bc>)
   22336:	4699      	mov	r9, r3
   22338:	e75b      	b.n	221f2 <fn_loop_test+0x2a>
		strcat(display_str,"ft");
   2233a:	47d0      	blx	sl
   2233c:	2203      	movs	r2, #3
   2233e:	1820      	adds	r0, r4, r0
   22340:	491d      	ldr	r1, [pc, #116]	; (223b8 <fn_loop_test+0x1f0>)
   22342:	47b0      	blx	r6
   22344:	e7b6      	b.n	222b4 <fn_loop_test+0xec>
   22346:	2204      	movs	r2, #4
   22348:	4b2a      	ldr	r3, [pc, #168]	; (223f4 <fn_loop_test+0x22c>)
   2234a:	615a      	str	r2, [r3, #20]
			current_state = st_disp_loop_report;
   2234c:	4b2a      	ldr	r3, [pc, #168]	; (223f8 <fn_loop_test+0x230>)
   2234e:	320d      	adds	r2, #13
   22350:	601a      	str	r2, [r3, #0]
   22352:	e74c      	b.n	221ee <fn_loop_test+0x26>
		cal_disp_message();
   22354:	4b29      	ldr	r3, [pc, #164]	; (223fc <fn_loop_test+0x234>)
   22356:	4798      	blx	r3
		cal_init();
   22358:	4b29      	ldr	r3, [pc, #164]	; (22400 <fn_loop_test+0x238>)
   2235a:	4798      	blx	r3
   2235c:	e73f      	b.n	221de <fn_loop_test+0x16>
				full_measurement(&temp_meas, options.shot_delay, measCal);
   2235e:	4b09      	ldr	r3, [pc, #36]	; (22384 <fn_loop_test+0x1bc>)
   22360:	2203      	movs	r2, #3
   22362:	7a99      	ldrb	r1, [r3, #10]
   22364:	4668      	mov	r0, sp
   22366:	4699      	mov	r9, r3
   22368:	4b26      	ldr	r3, [pc, #152]	; (22404 <fn_loop_test+0x23c>)
   2236a:	4798      	blx	r3
				rangefinder_on_off(false);
   2236c:	2000      	movs	r0, #0
   2236e:	4b1f      	ldr	r3, [pc, #124]	; (223ec <fn_loop_test+0x224>)
   22370:	4798      	blx	r3
				cal_loop_test(&temp_meas);
   22372:	4668      	mov	r0, sp
   22374:	4b24      	ldr	r3, [pc, #144]	; (22408 <fn_loop_test+0x240>)
   22376:	4798      	blx	r3
   22378:	e73b      	b.n	221f2 <fn_loop_test+0x2a>
   2237a:	46c0      	nop			; (mov r8, r8)
   2237c:	20004370 	.word	0x20004370
   22380:	200041d8 	.word	0x200041d8
   22384:	20002d20 	.word	0x20002d20
   22388:	0001ca59 	.word	0x0001ca59
   2238c:	20002da0 	.word	0x20002da0
   22390:	0002ee34 	.word	0x0002ee34
   22394:	00028999 	.word	0x00028999
   22398:	0001e2f5 	.word	0x0001e2f5
   2239c:	20002d38 	.word	0x20002d38
   223a0:	0002f090 	.word	0x0002f090
   223a4:	00028ab1 	.word	0x00028ab1
   223a8:	0002878d 	.word	0x0002878d
   223ac:	20002d18 	.word	0x20002d18
   223b0:	0002f298 	.word	0x0002f298
   223b4:	00028c1d 	.word	0x00028c1d
   223b8:	0002f078 	.word	0x0002f078
   223bc:	0002f2b0 	.word	0x0002f2b0
   223c0:	20003cc4 	.word	0x20003cc4
   223c4:	0002f2c8 	.word	0x0002f2c8
   223c8:	20002d0c 	.word	0x20002d0c
   223cc:	0002f2dc 	.word	0x0002f2dc
   223d0:	0002f2ac 	.word	0x0002f2ac
   223d4:	200052e4 	.word	0x200052e4
   223d8:	0002f2ec 	.word	0x0002f2ec
   223dc:	0002f280 	.word	0x0002f280
   223e0:	0002ef10 	.word	0x0002ef10
   223e4:	0001db91 	.word	0x0001db91
   223e8:	00015ed5 	.word	0x00015ed5
   223ec:	000160dd 	.word	0x000160dd
   223f0:	00016109 	.word	0x00016109
   223f4:	40002800 	.word	0x40002800
   223f8:	20002630 	.word	0x20002630
   223fc:	00021889 	.word	0x00021889
   22400:	00019711 	.word	0x00019711
   22404:	00016539 	.word	0x00016539
   22408:	00019c9d 	.word	0x00019c9d

0002240c <fn_dist_calibration>:
void fn_dist_calibration(void){
   2240c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2240e:	46de      	mov	lr, fp
   22410:	4657      	mov	r7, sl
   22412:	464e      	mov	r6, r9
   22414:	4645      	mov	r5, r8
   22416:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change){
   22418:	4b5a      	ldr	r3, [pc, #360]	; (22584 <fn_dist_calibration+0x178>)
void fn_dist_calibration(void){
   2241a:	b0af      	sub	sp, #188	; 0xbc
	if (state_change){
   2241c:	781b      	ldrb	r3, [r3, #0]
   2241e:	2b00      	cmp	r3, #0
   22420:	d000      	beq.n	22424 <fn_dist_calibration+0x18>
   22422:	e09a      	b.n	2255a <fn_dist_calibration+0x14e>
	switch(last_input){
   22424:	4b58      	ldr	r3, [pc, #352]	; (22588 <fn_dist_calibration+0x17c>)
   22426:	681b      	ldr	r3, [r3, #0]
   22428:	2b00      	cmp	r3, #0
   2242a:	d100      	bne.n	2242e <fn_dist_calibration+0x22>
   2242c:	e085      	b.n	2253a <fn_dist_calibration+0x12e>
   2242e:	2b04      	cmp	r3, #4
   22430:	d100      	bne.n	22434 <fn_dist_calibration+0x28>
   22432:	e077      	b.n	22524 <fn_dist_calibration+0x118>
   22434:	4b55      	ldr	r3, [pc, #340]	; (2258c <fn_dist_calibration+0x180>)
   22436:	9303      	str	r3, [sp, #12]
   22438:	4b55      	ldr	r3, [pc, #340]	; (22590 <fn_dist_calibration+0x184>)
   2243a:	4699      	mov	r9, r3
	glcd_clear_buffer();
   2243c:	4b55      	ldr	r3, [pc, #340]	; (22594 <fn_dist_calibration+0x188>)
   2243e:	4798      	blx	r3
	sprintf(display_str, "Calibration Mode");
   22440:	4c55      	ldr	r4, [pc, #340]	; (22598 <fn_dist_calibration+0x18c>)
   22442:	2211      	movs	r2, #17
   22444:	4955      	ldr	r1, [pc, #340]	; (2259c <fn_dist_calibration+0x190>)
   22446:	0020      	movs	r0, r4
   22448:	4f55      	ldr	r7, [pc, #340]	; (225a0 <fn_dist_calibration+0x194>)
   2244a:	47b8      	blx	r7
	glcd_tiny_draw_string(0,0,display_str);
   2244c:	0022      	movs	r2, r4
   2244e:	2100      	movs	r1, #0
   22450:	2000      	movs	r0, #0
   22452:	4e54      	ldr	r6, [pc, #336]	; (225a4 <fn_dist_calibration+0x198>)
   22454:	47b0      	blx	r6
	if (options.current_unit_dist == feet){
   22456:	464b      	mov	r3, r9
   22458:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(display_str, " Target %.1f feet",DIST_CAL_SETPOINT_FT);
   2245a:	2200      	movs	r2, #0
	if (options.current_unit_dist == feet){
   2245c:	2b00      	cmp	r3, #0
   2245e:	d15a      	bne.n	22516 <fn_dist_calibration+0x10a>
		sprintf(display_str, " Target %.1f feet",DIST_CAL_SETPOINT_FT);
   22460:	4d51      	ldr	r5, [pc, #324]	; (225a8 <fn_dist_calibration+0x19c>)
   22462:	4b52      	ldr	r3, [pc, #328]	; (225ac <fn_dist_calibration+0x1a0>)
   22464:	4952      	ldr	r1, [pc, #328]	; (225b0 <fn_dist_calibration+0x1a4>)
   22466:	0020      	movs	r0, r4
   22468:	46a8      	mov	r8, r5
   2246a:	47a8      	blx	r5
	glcd_tiny_draw_string(0,1,display_str);
   2246c:	0022      	movs	r2, r4
   2246e:	2101      	movs	r1, #1
   22470:	2000      	movs	r0, #0
   22472:	47b0      	blx	r6
   22474:	4b4f      	ldr	r3, [pc, #316]	; (225b4 <fn_dist_calibration+0x1a8>)
   22476:	2500      	movs	r5, #0
   22478:	469b      	mov	fp, r3
   2247a:	4b4f      	ldr	r3, [pc, #316]	; (225b8 <fn_dist_calibration+0x1ac>)
   2247c:	469a      	mov	sl, r3
		sprintf(display_str,"M%d: %2.4f ",k,dist_disp_buf[k]);
   2247e:	4a4f      	ldr	r2, [pc, #316]	; (225bc <fn_dist_calibration+0x1b0>)
   22480:	00ab      	lsls	r3, r5, #2
   22482:	58d0      	ldr	r0, [r2, r3]
   22484:	47d0      	blx	sl
   22486:	002a      	movs	r2, r5
   22488:	9000      	str	r0, [sp, #0]
   2248a:	9101      	str	r1, [sp, #4]
   2248c:	4659      	mov	r1, fp
   2248e:	0020      	movs	r0, r4
   22490:	47c0      	blx	r8
		if (options.current_unit_dist == feet){
   22492:	464b      	mov	r3, r9
   22494:	7a1b      	ldrb	r3, [r3, #8]
			strcat(display_str,"ft");
   22496:	0020      	movs	r0, r4
		if (options.current_unit_dist == feet){
   22498:	2b00      	cmp	r3, #0
   2249a:	d136      	bne.n	2250a <fn_dist_calibration+0xfe>
			strcat(display_str,"ft");
   2249c:	4b48      	ldr	r3, [pc, #288]	; (225c0 <fn_dist_calibration+0x1b4>)
   2249e:	4798      	blx	r3
   224a0:	2203      	movs	r2, #3
   224a2:	4948      	ldr	r1, [pc, #288]	; (225c4 <fn_dist_calibration+0x1b8>)
   224a4:	1820      	adds	r0, r4, r0
			strcat(display_str,"m");
   224a6:	47b8      	blx	r7
		glcd_tiny_draw_string(0,k+2,display_str);
   224a8:	1ca9      	adds	r1, r5, #2
   224aa:	b2c9      	uxtb	r1, r1
   224ac:	0022      	movs	r2, r4
   224ae:	2000      	movs	r0, #0
   224b0:	3501      	adds	r5, #1
   224b2:	47b0      	blx	r6
	for (k=0;k<4;k++){
   224b4:	2d04      	cmp	r5, #4
   224b6:	d1e2      	bne.n	2247e <fn_dist_calibration+0x72>
	sprintf(display_str, "Offset: %f", temp_dist_offset);
   224b8:	4b43      	ldr	r3, [pc, #268]	; (225c8 <fn_dist_calibration+0x1bc>)
   224ba:	6818      	ldr	r0, [r3, #0]
   224bc:	47d0      	blx	sl
   224be:	000b      	movs	r3, r1
   224c0:	0002      	movs	r2, r0
   224c2:	4942      	ldr	r1, [pc, #264]	; (225cc <fn_dist_calibration+0x1c0>)
   224c4:	0020      	movs	r0, r4
   224c6:	47c0      	blx	r8
	glcd_tiny_draw_string(0,6,display_str);
   224c8:	0022      	movs	r2, r4
   224ca:	2106      	movs	r1, #6
   224cc:	2000      	movs	r0, #0
   224ce:	47b0      	blx	r6
	if (cal_getGroupPoints() >= SHOT_SIZE){
   224d0:	9b03      	ldr	r3, [sp, #12]
   224d2:	4798      	blx	r3
   224d4:	2803      	cmp	r0, #3
   224d6:	d907      	bls.n	224e8 <fn_dist_calibration+0xdc>
		sprintf(display_str, "Calibration      Done");
   224d8:	2216      	movs	r2, #22
   224da:	493d      	ldr	r1, [pc, #244]	; (225d0 <fn_dist_calibration+0x1c4>)
   224dc:	0020      	movs	r0, r4
   224de:	47b8      	blx	r7
		glcd_tiny_draw_string(0,0,display_str);
   224e0:	0022      	movs	r2, r4
   224e2:	2100      	movs	r1, #0
   224e4:	2000      	movs	r0, #0
   224e6:	47b0      	blx	r6
	sprintf(display_str, "Abort");
   224e8:	2206      	movs	r2, #6
   224ea:	493a      	ldr	r1, [pc, #232]	; (225d4 <fn_dist_calibration+0x1c8>)
   224ec:	0020      	movs	r0, r4
   224ee:	47b8      	blx	r7
	glcd_tiny_draw_string(97,7,display_str);
   224f0:	0022      	movs	r2, r4
   224f2:	2107      	movs	r1, #7
   224f4:	2061      	movs	r0, #97	; 0x61
   224f6:	47b0      	blx	r6
	glcd_write();
   224f8:	4b37      	ldr	r3, [pc, #220]	; (225d8 <fn_dist_calibration+0x1cc>)
   224fa:	4798      	blx	r3
}
   224fc:	b02f      	add	sp, #188	; 0xbc
   224fe:	bc3c      	pop	{r2, r3, r4, r5}
   22500:	4690      	mov	r8, r2
   22502:	4699      	mov	r9, r3
   22504:	46a2      	mov	sl, r4
   22506:	46ab      	mov	fp, r5
   22508:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcat(display_str,"m");
   2250a:	4b2d      	ldr	r3, [pc, #180]	; (225c0 <fn_dist_calibration+0x1b4>)
   2250c:	4798      	blx	r3
   2250e:	2202      	movs	r2, #2
   22510:	1820      	adds	r0, r4, r0
   22512:	4932      	ldr	r1, [pc, #200]	; (225dc <fn_dist_calibration+0x1d0>)
   22514:	e7c7      	b.n	224a6 <fn_dist_calibration+0x9a>
		sprintf(display_str, " Target %.1f meters.",DIST_CAL_SETPOINT_MT);
   22516:	4d24      	ldr	r5, [pc, #144]	; (225a8 <fn_dist_calibration+0x19c>)
   22518:	4b31      	ldr	r3, [pc, #196]	; (225e0 <fn_dist_calibration+0x1d4>)
   2251a:	4932      	ldr	r1, [pc, #200]	; (225e4 <fn_dist_calibration+0x1d8>)
   2251c:	0020      	movs	r0, r4
   2251e:	46a8      	mov	r8, r5
   22520:	47a8      	blx	r5
   22522:	e7a3      	b.n	2246c <fn_dist_calibration+0x60>
			if (!isLaserOn()){
   22524:	4b30      	ldr	r3, [pc, #192]	; (225e8 <fn_dist_calibration+0x1dc>)
   22526:	4798      	blx	r3
   22528:	2800      	cmp	r0, #0
   2252a:	d11b      	bne.n	22564 <fn_dist_calibration+0x158>
				rangefinder_on_off(true);
   2252c:	3001      	adds	r0, #1
   2252e:	4b2f      	ldr	r3, [pc, #188]	; (225ec <fn_dist_calibration+0x1e0>)
   22530:	4798      	blx	r3
				laser_on_off(true);
   22532:	2001      	movs	r0, #1
   22534:	4b2e      	ldr	r3, [pc, #184]	; (225f0 <fn_dist_calibration+0x1e4>)
   22536:	4798      	blx	r3
   22538:	e77c      	b.n	22434 <fn_dist_calibration+0x28>
			if (cal_getGroupPoints() >= SHOT_SIZE){
   2253a:	4b14      	ldr	r3, [pc, #80]	; (2258c <fn_dist_calibration+0x180>)
   2253c:	9303      	str	r3, [sp, #12]
   2253e:	4798      	blx	r3
   22540:	2803      	cmp	r0, #3
   22542:	d800      	bhi.n	22546 <fn_dist_calibration+0x13a>
   22544:	e778      	b.n	22438 <fn_dist_calibration+0x2c>
				rangefinder_on_off(false);
   22546:	2000      	movs	r0, #0
   22548:	4b28      	ldr	r3, [pc, #160]	; (225ec <fn_dist_calibration+0x1e0>)
   2254a:	4798      	blx	r3
				cal_done(rangeFinder);
   2254c:	4b29      	ldr	r3, [pc, #164]	; (225f4 <fn_dist_calibration+0x1e8>)
   2254e:	2002      	movs	r0, #2
   22550:	4798      	blx	r3
				current_state = st_disp_cal_report;
   22552:	220f      	movs	r2, #15
   22554:	4b28      	ldr	r3, [pc, #160]	; (225f8 <fn_dist_calibration+0x1ec>)
   22556:	601a      	str	r2, [r3, #0]
   22558:	e76e      	b.n	22438 <fn_dist_calibration+0x2c>
		cal_disp_message();
   2255a:	4b28      	ldr	r3, [pc, #160]	; (225fc <fn_dist_calibration+0x1f0>)
   2255c:	4798      	blx	r3
		cal_init();
   2255e:	4b28      	ldr	r3, [pc, #160]	; (22600 <fn_dist_calibration+0x1f4>)
   22560:	4798      	blx	r3
   22562:	e75f      	b.n	22424 <fn_dist_calibration+0x18>
				full_measurement(&temp_meas, options.shot_delay, measCal);
   22564:	4b0a      	ldr	r3, [pc, #40]	; (22590 <fn_dist_calibration+0x184>)
   22566:	2203      	movs	r2, #3
   22568:	7a99      	ldrb	r1, [r3, #10]
   2256a:	a804      	add	r0, sp, #16
   2256c:	4699      	mov	r9, r3
   2256e:	4b25      	ldr	r3, [pc, #148]	; (22604 <fn_dist_calibration+0x1f8>)
   22570:	4798      	blx	r3
				rangefinder_on_off(true);
   22572:	2001      	movs	r0, #1
   22574:	4b1d      	ldr	r3, [pc, #116]	; (225ec <fn_dist_calibration+0x1e0>)
   22576:	4798      	blx	r3
				cal_add_dist(&temp_meas);
   22578:	4b23      	ldr	r3, [pc, #140]	; (22608 <fn_dist_calibration+0x1fc>)
   2257a:	a804      	add	r0, sp, #16
   2257c:	4798      	blx	r3
   2257e:	4b03      	ldr	r3, [pc, #12]	; (2258c <fn_dist_calibration+0x180>)
   22580:	9303      	str	r3, [sp, #12]
   22582:	e75b      	b.n	2243c <fn_dist_calibration+0x30>
   22584:	20004370 	.word	0x20004370
   22588:	200041d8 	.word	0x200041d8
   2258c:	00019539 	.word	0x00019539
   22590:	20002d20 	.word	0x20002d20
   22594:	0001ca59 	.word	0x0001ca59
   22598:	20002da0 	.word	0x20002da0
   2259c:	0002f238 	.word	0x0002f238
   225a0:	00028999 	.word	0x00028999
   225a4:	0001e2f5 	.word	0x0001e2f5
   225a8:	00028ab1 	.word	0x00028ab1
   225ac:	40080000 	.word	0x40080000
   225b0:	0002f10c 	.word	0x0002f10c
   225b4:	0002f138 	.word	0x0002f138
   225b8:	0002878d 	.word	0x0002878d
   225bc:	20002afc 	.word	0x20002afc
   225c0:	00028c1d 	.word	0x00028c1d
   225c4:	0002f078 	.word	0x0002f078
   225c8:	2000384c 	.word	0x2000384c
   225cc:	0002f144 	.word	0x0002f144
   225d0:	0002f150 	.word	0x0002f150
   225d4:	0002ef10 	.word	0x0002ef10
   225d8:	0001db91 	.word	0x0001db91
   225dc:	0002f2ac 	.word	0x0002f2ac
   225e0:	3ff00000 	.word	0x3ff00000
   225e4:	0002f120 	.word	0x0002f120
   225e8:	00015ed5 	.word	0x00015ed5
   225ec:	000160dd 	.word	0x000160dd
   225f0:	00016109 	.word	0x00016109
   225f4:	000197a9 	.word	0x000197a9
   225f8:	20002630 	.word	0x20002630
   225fc:	00021889 	.word	0x00021889
   22600:	00019711 	.word	0x00019711
   22604:	00016539 	.word	0x00016539
   22608:	00019ec5 	.word	0x00019ec5

0002260c <config_pins_powerup>:
void config_pins_powerup(void){
   2260c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2260e:	46de      	mov	lr, fp
   22610:	4657      	mov	r7, sl
   22612:	464e      	mov	r6, r9
   22614:	4645      	mov	r5, r8
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22616:	2480      	movs	r4, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22618:	2049      	movs	r0, #73	; 0x49
   2261a:	2202      	movs	r2, #2
   2261c:	b5e0      	push	{r5, r6, r7, lr}
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   2261e:	4960      	ldr	r1, [pc, #384]	; (227a0 <config_pins_powerup+0x194>)
   22620:	00a4      	lsls	r4, r4, #2
   22622:	604c      	str	r4, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22624:	5c0b      	ldrb	r3, [r1, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22626:	2510      	movs	r5, #16
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22628:	4313      	orrs	r3, r2
   2262a:	b2db      	uxtb	r3, r3
   2262c:	540b      	strb	r3, [r1, r0]
	base->WRCONFIG.reg =
   2262e:	4b5d      	ldr	r3, [pc, #372]	; (227a4 <config_pins_powerup+0x198>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22630:	2644      	movs	r6, #68	; 0x44
	base->WRCONFIG.reg =
   22632:	628b      	str	r3, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   22634:	4b5c      	ldr	r3, [pc, #368]	; (227a8 <config_pins_powerup+0x19c>)
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   22636:	2780      	movs	r7, #128	; 0x80
	base->WRCONFIG.reg =
   22638:	469a      	mov	sl, r3
   2263a:	4650      	mov	r0, sl
   2263c:	628b      	str	r3, [r1, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   2263e:	4b5b      	ldr	r3, [pc, #364]	; (227ac <config_pins_powerup+0x1a0>)
		base->OUTSET.reg = mask;
   22640:	618c      	str	r4, [r1, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22642:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22644:	5d9c      	ldrb	r4, [r3, r6]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   22646:	053f      	lsls	r7, r7, #20
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22648:	4314      	orrs	r4, r2
   2264a:	b2e4      	uxtb	r4, r4
   2264c:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   2264e:	4c58      	ldr	r4, [pc, #352]	; (227b0 <config_pins_powerup+0x1a4>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22650:	3602      	adds	r6, #2
	base->WRCONFIG.reg =
   22652:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22654:	6298      	str	r0, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   22656:	619d      	str	r5, [r3, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22658:	3530      	adds	r5, #48	; 0x30
   2265a:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   2265c:	5d9c      	ldrb	r4, [r3, r6]
   2265e:	b083      	sub	sp, #12
   22660:	4314      	orrs	r4, r2
   22662:	b2e4      	uxtb	r4, r4
   22664:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   22666:	4c53      	ldr	r4, [pc, #332]	; (227b4 <config_pins_powerup+0x1a8>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22668:	3601      	adds	r6, #1
	base->WRCONFIG.reg =
   2266a:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   2266c:	6298      	str	r0, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   2266e:	619d      	str	r5, [r3, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22670:	3540      	adds	r5, #64	; 0x40
   22672:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22674:	5d9c      	ldrb	r4, [r3, r6]
   22676:	4314      	orrs	r4, r2
   22678:	b2e4      	uxtb	r4, r4
   2267a:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   2267c:	4c4e      	ldr	r4, [pc, #312]	; (227b8 <config_pins_powerup+0x1ac>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   2267e:	3e02      	subs	r6, #2
	base->WRCONFIG.reg =
   22680:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22682:	6298      	str	r0, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   22684:	619d      	str	r5, [r3, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22686:	3d60      	subs	r5, #96	; 0x60
   22688:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   2268a:	5d9c      	ldrb	r4, [r3, r6]
   2268c:	4314      	orrs	r4, r2
   2268e:	b2e4      	uxtb	r4, r4
   22690:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   22692:	4c4a      	ldr	r4, [pc, #296]	; (227bc <config_pins_powerup+0x1b0>)
   22694:	629c      	str	r4, [r3, #40]	; 0x28
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   22696:	2480      	movs	r4, #128	; 0x80
	base->WRCONFIG.reg =
   22698:	6298      	str	r0, [r3, #40]	; 0x28
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   2269a:	205b      	movs	r0, #91	; 0x5b
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   2269c:	0424      	lsls	r4, r4, #16
		base->OUTSET.reg = mask;
   2269e:	619d      	str	r5, [r3, #24]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   226a0:	3537      	adds	r5, #55	; 0x37
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   226a2:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   226a4:	5d5e      	ldrb	r6, [r3, r5]
   226a6:	4316      	orrs	r6, r2
   226a8:	b2f6      	uxtb	r6, r6
   226aa:	555e      	strb	r6, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   226ac:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   226ae:	609f      	str	r7, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   226b0:	5c1e      	ldrb	r6, [r3, r0]
   226b2:	4316      	orrs	r6, r2
   226b4:	b2f6      	uxtb	r6, r6
   226b6:	541e      	strb	r6, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   226b8:	615f      	str	r7, [r3, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   226ba:	608c      	str	r4, [r1, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   226bc:	5d4e      	ldrb	r6, [r1, r5]
   226be:	2742      	movs	r7, #66	; 0x42
   226c0:	4316      	orrs	r6, r2
   226c2:	b2f6      	uxtb	r6, r6
   226c4:	554e      	strb	r6, [r1, r5]
   226c6:	466e      	mov	r6, sp
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   226c8:	3857      	subs	r0, #87	; 0x57
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   226ca:	614c      	str	r4, [r1, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   226cc:	6088      	str	r0, [r1, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   226ce:	5dc8      	ldrb	r0, [r1, r7]
   226d0:	4310      	orrs	r0, r2
   226d2:	71f0      	strb	r0, [r6, #7]
   226d4:	79f0      	ldrb	r0, [r6, #7]
   226d6:	55c8      	strb	r0, [r1, r7]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   226d8:	2004      	movs	r0, #4
   226da:	6188      	str	r0, [r1, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   226dc:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   226de:	5d58      	ldrb	r0, [r3, r5]
   226e0:	4310      	orrs	r0, r2
   226e2:	71f0      	strb	r0, [r6, #7]
   226e4:	79f0      	ldrb	r0, [r6, #7]
   226e6:	5558      	strb	r0, [r3, r5]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   226e8:	2580      	movs	r5, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   226ea:	2052      	movs	r0, #82	; 0x52
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   226ec:	02ed      	lsls	r5, r5, #11
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   226ee:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   226f0:	609d      	str	r5, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   226f2:	5c1c      	ldrb	r4, [r3, r0]
   226f4:	4314      	orrs	r4, r2
   226f6:	b2e4      	uxtb	r4, r4
   226f8:	541c      	strb	r4, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   226fa:	619d      	str	r5, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   226fc:	2580      	movs	r5, #128	; 0x80
   226fe:	032d      	lsls	r5, r5, #12
   22700:	609d      	str	r5, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22702:	3001      	adds	r0, #1
   22704:	5c1c      	ldrb	r4, [r3, r0]
   22706:	4314      	orrs	r4, r2
   22708:	b2e4      	uxtb	r4, r4
   2270a:	541c      	strb	r4, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   2270c:	619d      	str	r5, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   2270e:	2580      	movs	r5, #128	; 0x80
   22710:	03ad      	lsls	r5, r5, #14
   22712:	609d      	str	r5, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22714:	3002      	adds	r0, #2
   22716:	5c1c      	ldrb	r4, [r3, r0]
   22718:	4314      	orrs	r4, r2
   2271a:	b2e4      	uxtb	r4, r4
   2271c:	541c      	strb	r4, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   2271e:	619d      	str	r5, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   22720:	2580      	movs	r5, #128	; 0x80
   22722:	036d      	lsls	r5, r5, #13
   22724:	609d      	str	r5, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22726:	3801      	subs	r0, #1
   22728:	5c1c      	ldrb	r4, [r3, r0]
   2272a:	4314      	orrs	r4, r2
   2272c:	b2e4      	uxtb	r4, r4
   2272e:	541c      	strb	r4, [r3, r0]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   22730:	2080      	movs	r0, #128	; 0x80
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   22732:	619d      	str	r5, [r3, #24]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22734:	254f      	movs	r5, #79	; 0x4f
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   22736:	0200      	lsls	r0, r0, #8
   22738:	4683      	mov	fp, r0
   2273a:	6098      	str	r0, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   2273c:	5d58      	ldrb	r0, [r3, r5]
   2273e:	4310      	orrs	r0, r2
   22740:	71f0      	strb	r0, [r6, #7]
   22742:	79f0      	ldrb	r0, [r6, #7]
   22744:	5558      	strb	r0, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   22746:	4658      	mov	r0, fp
   22748:	6198      	str	r0, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   2274a:	2008      	movs	r0, #8
   2274c:	6088      	str	r0, [r1, #8]
   2274e:	4680      	mov	r8, r0
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22750:	303b      	adds	r0, #59	; 0x3b
   22752:	4681      	mov	r9, r0
   22754:	5c08      	ldrb	r0, [r1, r0]
   22756:	4310      	orrs	r0, r2
   22758:	71f0      	strb	r0, [r6, #7]
   2275a:	79f0      	ldrb	r0, [r6, #7]
   2275c:	4684      	mov	ip, r0
   2275e:	4648      	mov	r0, r9
   22760:	4664      	mov	r4, ip
   22762:	540c      	strb	r4, [r1, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   22764:	4640      	mov	r0, r8
   22766:	6148      	str	r0, [r1, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   22768:	2104      	movs	r1, #4
   2276a:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   2276c:	5dd9      	ldrb	r1, [r3, r7]
   2276e:	4311      	orrs	r1, r2
   22770:	b2c9      	uxtb	r1, r1
   22772:	55d9      	strb	r1, [r3, r7]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   22774:	2104      	movs	r1, #4
   22776:	6159      	str	r1, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22778:	4659      	mov	r1, fp
   2277a:	6059      	str	r1, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   2277c:	5d59      	ldrb	r1, [r3, r5]
   2277e:	430a      	orrs	r2, r1
   22780:	b2d2      	uxtb	r2, r2
   22782:	555a      	strb	r2, [r3, r5]
	base->WRCONFIG.reg =
   22784:	4a0e      	ldr	r2, [pc, #56]	; (227c0 <config_pins_powerup+0x1b4>)
   22786:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22788:	4652      	mov	r2, sl
   2278a:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   2278c:	465a      	mov	r2, fp
   2278e:	619a      	str	r2, [r3, #24]
}
   22790:	b003      	add	sp, #12
   22792:	bc3c      	pop	{r2, r3, r4, r5}
   22794:	4690      	mov	r8, r2
   22796:	4699      	mov	r9, r3
   22798:	46a2      	mov	sl, r4
   2279a:	46ab      	mov	fp, r5
   2279c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2279e:	46c0      	nop			; (mov r8, r8)
   227a0:	40002880 	.word	0x40002880
   227a4:	50060200 	.word	0x50060200
   227a8:	d0060000 	.word	0xd0060000
   227ac:	40002800 	.word	0x40002800
   227b0:	50060010 	.word	0x50060010
   227b4:	50060040 	.word	0x50060040
   227b8:	50060080 	.word	0x50060080
   227bc:	50060020 	.word	0x50060020
   227c0:	50068000 	.word	0x50068000

000227c4 <fn_powerup>:
void fn_powerup(void){
   227c4:	b510      	push	{r4, lr}
	mainClockPowerup();
   227c6:	4b2c      	ldr	r3, [pc, #176]	; (22878 <fn_powerup+0xb4>)
void fn_powerup(void){
   227c8:	b082      	sub	sp, #8
	mainClockPowerup();
   227ca:	4798      	blx	r3
	config_pins_powerup();
   227cc:	4b2b      	ldr	r3, [pc, #172]	; (2287c <fn_powerup+0xb8>)
   227ce:	4798      	blx	r3
	buzzOn(tone1, 150);
   227d0:	4c2b      	ldr	r4, [pc, #172]	; (22880 <fn_powerup+0xbc>)
   227d2:	2196      	movs	r1, #150	; 0x96
   227d4:	482b      	ldr	r0, [pc, #172]	; (22884 <fn_powerup+0xc0>)
   227d6:	47a0      	blx	r4
	buzzOn(tone2, 150);
   227d8:	2196      	movs	r1, #150	; 0x96
   227da:	482b      	ldr	r0, [pc, #172]	; (22888 <fn_powerup+0xc4>)
   227dc:	47a0      	blx	r4
	buzzOn(tone4, 150);
   227de:	2196      	movs	r1, #150	; 0x96
   227e0:	482a      	ldr	r0, [pc, #168]	; (2288c <fn_powerup+0xc8>)
   227e2:	47a0      	blx	r4
	enable_comms();	
   227e4:	4b2a      	ldr	r3, [pc, #168]	; (22890 <fn_powerup+0xcc>)
   227e6:	4798      	blx	r3
	load_user_settings();//  Needed for backlight setting
   227e8:	4b2a      	ldr	r3, [pc, #168]	; (22894 <fn_powerup+0xd0>)
   227ea:	4798      	blx	r3
	backlightOn(&options.backlight_setting);
   227ec:	4b2a      	ldr	r3, [pc, #168]	; (22898 <fn_powerup+0xd4>)
   227ee:	482b      	ldr	r0, [pc, #172]	; (2289c <fn_powerup+0xd8>)
   227f0:	4798      	blx	r3
	setup_accel(&slave_acc1);
   227f2:	4c2b      	ldr	r4, [pc, #172]	; (228a0 <fn_powerup+0xdc>)
   227f4:	482b      	ldr	r0, [pc, #172]	; (228a4 <fn_powerup+0xe0>)
   227f6:	47a0      	blx	r4
	setup_accel(&slave_acc2);
   227f8:	482b      	ldr	r0, [pc, #172]	; (228a8 <fn_powerup+0xe4>)
   227fa:	47a0      	blx	r4
	setup_mag(&slave_mag1);
   227fc:	4c2b      	ldr	r4, [pc, #172]	; (228ac <fn_powerup+0xe8>)
   227fe:	482c      	ldr	r0, [pc, #176]	; (228b0 <fn_powerup+0xec>)
   22800:	47a0      	blx	r4
	setup_mag(&slave_mag2);
   22802:	482c      	ldr	r0, [pc, #176]	; (228b4 <fn_powerup+0xf0>)
   22804:	47a0      	blx	r4
	rangefinder_on_off(false);	
   22806:	2000      	movs	r0, #0
   22808:	4b2b      	ldr	r3, [pc, #172]	; (228b8 <fn_powerup+0xf4>)
   2280a:	4798      	blx	r3
	ext_osc_onoff(true);
   2280c:	2001      	movs	r0, #1
   2280e:	4b2b      	ldr	r3, [pc, #172]	; (228bc <fn_powerup+0xf8>)
   22810:	4798      	blx	r3
	glcd_init();
   22812:	4b2b      	ldr	r3, [pc, #172]	; (228c0 <fn_powerup+0xfc>)
   22814:	4798      	blx	r3
	glcd_tiny_set_font(Font5x7,5,7,32,127);//  All font in "tiny" mode
   22816:	237f      	movs	r3, #127	; 0x7f
   22818:	2207      	movs	r2, #7
   2281a:	2105      	movs	r1, #5
   2281c:	4829      	ldr	r0, [pc, #164]	; (228c4 <fn_powerup+0x100>)
   2281e:	9300      	str	r3, [sp, #0]
   22820:	4c29      	ldr	r4, [pc, #164]	; (228c8 <fn_powerup+0x104>)
   22822:	3b5f      	subs	r3, #95	; 0x5f
   22824:	47a0      	blx	r4
	wdt_enable();
   22826:	4b29      	ldr	r3, [pc, #164]	; (228cc <fn_powerup+0x108>)
   22828:	4798      	blx	r3
	configure_timer_1s();
   2282a:	4b29      	ldr	r3, [pc, #164]	; (228d0 <fn_powerup+0x10c>)
   2282c:	4798      	blx	r3
	configure_timer_ExtLong();
   2282e:	4b29      	ldr	r3, [pc, #164]	; (228d4 <fn_powerup+0x110>)
   22830:	4798      	blx	r3
	BLE_advert_OnOff(true);
   22832:	2001      	movs	r0, #1
   22834:	4b28      	ldr	r3, [pc, #160]	; (228d8 <fn_powerup+0x114>)
   22836:	4798      	blx	r3
	cpu_irq_enable();
   22838:	2201      	movs	r2, #1
   2283a:	4b28      	ldr	r3, [pc, #160]	; (228dc <fn_powerup+0x118>)
   2283c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   2283e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   22842:	b662      	cpsie	i
	cpu_irq_enable();
   22844:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   22846:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2284a:	b662      	cpsie	i
	configure_SD();
   2284c:	4b24      	ldr	r3, [pc, #144]	; (228e0 <fn_powerup+0x11c>)
   2284e:	4798      	blx	r3
	udc_start();
   22850:	4b24      	ldr	r3, [pc, #144]	; (228e4 <fn_powerup+0x120>)
   22852:	4798      	blx	r3
	config_buttons();
   22854:	4b24      	ldr	r3, [pc, #144]	; (228e8 <fn_powerup+0x124>)
   22856:	4798      	blx	r3
	load_sync_tracker();
   22858:	4b24      	ldr	r3, [pc, #144]	; (228ec <fn_powerup+0x128>)
   2285a:	4798      	blx	r3
	buttonE_triggered=false;//  In case button was pressed again during powerup
   2285c:	2200      	movs	r2, #0
   2285e:	4b24      	ldr	r3, [pc, #144]	; (228f0 <fn_powerup+0x12c>)
   22860:	701a      	strb	r2, [r3, #0]
	current_state = st_main_display;
   22862:	4b24      	ldr	r3, [pc, #144]	; (228f4 <fn_powerup+0x130>)
   22864:	3202      	adds	r2, #2
   22866:	601a      	str	r2, [r3, #0]
	current_input = input_none;
   22868:	2306      	movs	r3, #6
   2286a:	4a23      	ldr	r2, [pc, #140]	; (228f8 <fn_powerup+0x134>)
   2286c:	6013      	str	r3, [r2, #0]
	last_input = input_none;
   2286e:	4a23      	ldr	r2, [pc, #140]	; (228fc <fn_powerup+0x138>)
   22870:	6013      	str	r3, [r2, #0]
}
   22872:	b002      	add	sp, #8
   22874:	bd10      	pop	{r4, pc}
   22876:	46c0      	nop			; (mov r8, r8)
   22878:	0000fa15 	.word	0x0000fa15
   2287c:	0002260d 	.word	0x0002260d
   22880:	0000f8a9 	.word	0x0000f8a9
   22884:	00000c3f 	.word	0x00000c3f
   22888:	00000f6f 	.word	0x00000f6f
   2288c:	0000125a 	.word	0x0000125a
   22890:	0001c2b1 	.word	0x0001c2b1
   22894:	00010fd1 	.word	0x00010fd1
   22898:	0000ea59 	.word	0x0000ea59
   2289c:	20002d34 	.word	0x20002d34
   228a0:	0001626d 	.word	0x0001626d
   228a4:	20000e84 	.word	0x20000e84
   228a8:	20000e30 	.word	0x20000e30
   228ac:	00016889 	.word	0x00016889
   228b0:	20000e88 	.word	0x20000e88
   228b4:	20000e28 	.word	0x20000e28
   228b8:	000160dd 	.word	0x000160dd
   228bc:	0000fcdd 	.word	0x0000fcdd
   228c0:	0001c925 	.word	0x0001c925
   228c4:	0002eb34 	.word	0x0002eb34
   228c8:	0001e239 	.word	0x0001e239
   228cc:	000169f1 	.word	0x000169f1
   228d0:	00016add 	.word	0x00016add
   228d4:	00016ccd 	.word	0x00016ccd
   228d8:	0000f13d 	.word	0x0000f13d
   228dc:	200000ca 	.word	0x200000ca
   228e0:	00015665 	.word	0x00015665
   228e4:	0000714d 	.word	0x0000714d
   228e8:	0000f5e1 	.word	0x0000f5e1
   228ec:	00010ed1 	.word	0x00010ed1
   228f0:	20000d51 	.word	0x20000d51
   228f4:	20002630 	.word	0x20002630
   228f8:	20003d24 	.word	0x20003d24
   228fc:	200041d8 	.word	0x200041d8

00022900 <main>:
  {
   22900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22902:	46de      	mov	lr, fp
   22904:	4657      	mov	r7, sl
   22906:	464e      	mov	r6, r9
   22908:	4645      	mov	r5, r8
	system_init();	
   2290a:	4b79      	ldr	r3, [pc, #484]	; (22af0 <main+0x1f0>)
  {
   2290c:	b5e0      	push	{r5, r6, r7, lr}
	system_init();	
   2290e:	4798      	blx	r3
	delay_init();	
   22910:	4b78      	ldr	r3, [pc, #480]	; (22af4 <main+0x1f4>)
   22912:	4798      	blx	r3
	delay_ms(500);	
   22914:	20fa      	movs	r0, #250	; 0xfa
   22916:	4c78      	ldr	r4, [pc, #480]	; (22af8 <main+0x1f8>)
   22918:	0040      	lsls	r0, r0, #1
   2291a:	47a0      	blx	r4
	configure_timer_counter();
   2291c:	4b77      	ldr	r3, [pc, #476]	; (22afc <main+0x1fc>)
   2291e:	4798      	blx	r3
	fn_powerup();
   22920:	4b77      	ldr	r3, [pc, #476]	; (22b00 <main+0x200>)
   22922:	4798      	blx	r3
	delay_s(1);
   22924:	20fa      	movs	r0, #250	; 0xfa
   22926:	0080      	lsls	r0, r0, #2
   22928:	47a0      	blx	r4
	load_user_settings();
   2292a:	4b76      	ldr	r3, [pc, #472]	; (22b04 <main+0x204>)
   2292c:	4798      	blx	r3
	load_calibration();
   2292e:	4b76      	ldr	r3, [pc, #472]	; (22b08 <main+0x208>)
   22930:	4798      	blx	r3
	setupCharger();	
   22932:	4b76      	ldr	r3, [pc, #472]	; (22b0c <main+0x20c>)
   22934:	4798      	blx	r3
	setup_batt();
   22936:	4b76      	ldr	r3, [pc, #472]	; (22b10 <main+0x210>)
   22938:	4798      	blx	r3
		sleepmgr_locks[i] = 0;
   2293a:	2500      	movs	r5, #0
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   2293c:	2201      	movs	r2, #1
		sleepmgr_locks[i] = 0;
   2293e:	4b75      	ldr	r3, [pc, #468]	; (22b14 <main+0x214>)
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   22940:	711a      	strb	r2, [r3, #4]
		sleepmgr_locks[i] = 0;
   22942:	701d      	strb	r5, [r3, #0]
   22944:	705d      	strb	r5, [r3, #1]
   22946:	709d      	strb	r5, [r3, #2]
   22948:	70dd      	strb	r5, [r3, #3]
	getSN();
   2294a:	4b73      	ldr	r3, [pc, #460]	; (22b18 <main+0x218>)
   2294c:	4798      	blx	r3
	BLE_init();
   2294e:	4b73      	ldr	r3, [pc, #460]	; (22b1c <main+0x21c>)
   22950:	4798      	blx	r3
	load_sync_tracker();
   22952:	4b73      	ldr	r3, [pc, #460]	; (22b20 <main+0x220>)
   22954:	4798      	blx	r3
	loadMeasBuffer();
   22956:	4b73      	ldr	r3, [pc, #460]	; (22b24 <main+0x224>)
   22958:	4798      	blx	r3
	current_state = st_main_display;
   2295a:	2302      	movs	r3, #2
   2295c:	4c72      	ldr	r4, [pc, #456]	; (22b28 <main+0x228>)
	last_state = st_NULL;
   2295e:	4e73      	ldr	r6, [pc, #460]	; (22b2c <main+0x22c>)
	current_state = st_main_display;
   22960:	6023      	str	r3, [r4, #0]
	last_state = st_NULL;
   22962:	6035      	str	r5, [r6, #0]
	current_input = input_1sec;
   22964:	4d72      	ldr	r5, [pc, #456]	; (22b30 <main+0x230>)
   22966:	3305      	adds	r3, #5
   22968:	602b      	str	r3, [r5, #0]
	last_input = input_none;
   2296a:	4b72      	ldr	r3, [pc, #456]	; (22b34 <main+0x234>)
   2296c:	4f72      	ldr	r7, [pc, #456]	; (22b38 <main+0x238>)
   2296e:	469a      	mov	sl, r3
   22970:	2306      	movs	r3, #6
   22972:	4652      	mov	r2, sl
   22974:	6013      	str	r3, [r2, #0]
   22976:	4b71      	ldr	r3, [pc, #452]	; (22b3c <main+0x23c>)
   22978:	4698      	mov	r8, r3
   2297a:	4b71      	ldr	r3, [pc, #452]	; (22b40 <main+0x240>)
   2297c:	469b      	mov	fp, r3
   2297e:	4b71      	ldr	r3, [pc, #452]	; (22b44 <main+0x244>)
   22980:	4699      	mov	r9, r3
   22982:	e00e      	b.n	229a2 <main+0xa2>
			last_input = input_none;
   22984:	2306      	movs	r3, #6
   22986:	4652      	mov	r2, sl
   22988:	6013      	str	r3, [r2, #0]
		current_input = input_none;
   2298a:	2306      	movs	r3, #6
   2298c:	602b      	str	r3, [r5, #0]
		if(state_change && isLaserOn()){
   2298e:	783b      	ldrb	r3, [r7, #0]
   22990:	2b00      	cmp	r3, #0
   22992:	d14c      	bne.n	22a2e <main+0x12e>
		state_info[current_state].Function();
   22994:	6822      	ldr	r2, [r4, #0]
   22996:	0053      	lsls	r3, r2, #1
   22998:	189b      	adds	r3, r3, r2
   2299a:	464a      	mov	r2, r9
   2299c:	009b      	lsls	r3, r3, #2
   2299e:	58d3      	ldr	r3, [r2, r3]
   229a0:	4798      	blx	r3
			if (last_state!=current_state){break;}
   229a2:	6832      	ldr	r2, [r6, #0]
   229a4:	6823      	ldr	r3, [r4, #0]
   229a6:	429a      	cmp	r2, r3
   229a8:	d049      	beq.n	22a3e <main+0x13e>
		debug2++;
   229aa:	4643      	mov	r3, r8
   229ac:	4642      	mov	r2, r8
   229ae:	681b      	ldr	r3, [r3, #0]
   229b0:	3301      	adds	r3, #1
   229b2:	6013      	str	r3, [r2, #0]
		if(current_state!=st_powerdown){
   229b4:	6823      	ldr	r3, [r4, #0]
   229b6:	2b04      	cmp	r3, #4
   229b8:	d001      	beq.n	229be <main+0xbe>
			wdt_reset_count();
   229ba:	4b63      	ldr	r3, [pc, #396]	; (22b48 <main+0x248>)
   229bc:	4798      	blx	r3
		if(current_input == input_BLE_command){
   229be:	682b      	ldr	r3, [r5, #0]
   229c0:	2b09      	cmp	r3, #9
   229c2:	d05c      	beq.n	22a7e <main+0x17e>
		BLE_get_client_MAC();
   229c4:	4b61      	ldr	r3, [pc, #388]	; (22b4c <main+0x24c>)
   229c6:	4798      	blx	r3
		idle_timeout();//Will produce input = input_powerdown if idle
   229c8:	4b61      	ldr	r3, [pc, #388]	; (22b50 <main+0x250>)
   229ca:	4798      	blx	r3
		laser_timeout();
   229cc:	47d8      	blx	fp
		BleUpdateBattLevel(); //  Update battery level characteristic if it changes
   229ce:	4b61      	ldr	r3, [pc, #388]	; (22b54 <main+0x254>)
   229d0:	4798      	blx	r3
		if(!isCharging){SD_WriteLockout = false;}
   229d2:	4b61      	ldr	r3, [pc, #388]	; (22b58 <main+0x258>)
   229d4:	781b      	ldrb	r3, [r3, #0]
   229d6:	b2db      	uxtb	r3, r3
   229d8:	2b00      	cmp	r3, #0
   229da:	d101      	bne.n	229e0 <main+0xe0>
   229dc:	4a5f      	ldr	r2, [pc, #380]	; (22b5c <main+0x25c>)
   229de:	7013      	strb	r3, [r2, #0]
		if (current_input<N_GENERIC_INPUTS){
   229e0:	682b      	ldr	r3, [r5, #0]
   229e2:	2b05      	cmp	r3, #5
   229e4:	d80a      	bhi.n	229fc <main+0xfc>
			st_temp = state_info[current_state].genGOTO[current_input];
   229e6:	6821      	ldr	r1, [r4, #0]
   229e8:	682a      	ldr	r2, [r5, #0]
   229ea:	004b      	lsls	r3, r1, #1
   229ec:	185b      	adds	r3, r3, r1
   229ee:	009b      	lsls	r3, r3, #2
   229f0:	444b      	add	r3, r9
   229f2:	189b      	adds	r3, r3, r2
   229f4:	791b      	ldrb	r3, [r3, #4]
			if (st_temp!=st_NULL){
   229f6:	2b00      	cmp	r3, #0
   229f8:	d000      	beq.n	229fc <main+0xfc>
				current_state = st_temp;
   229fa:	6023      	str	r3, [r4, #0]
		if (current_state == st_NULL){current_state = last_state;}
   229fc:	6823      	ldr	r3, [r4, #0]
   229fe:	2b00      	cmp	r3, #0
   22a00:	d101      	bne.n	22a06 <main+0x106>
   22a02:	6833      	ldr	r3, [r6, #0]
   22a04:	6023      	str	r3, [r4, #0]
		state_change = !(last_state==current_state);
   22a06:	6833      	ldr	r3, [r6, #0]
   22a08:	6822      	ldr	r2, [r4, #0]
   22a0a:	1a9b      	subs	r3, r3, r2
   22a0c:	1e5a      	subs	r2, r3, #1
   22a0e:	4193      	sbcs	r3, r2
   22a10:	b2db      	uxtb	r3, r3
   22a12:	703b      	strb	r3, [r7, #0]
		last_state = current_state;
   22a14:	6823      	ldr	r3, [r4, #0]
   22a16:	6033      	str	r3, [r6, #0]
		if (state_change){
   22a18:	783b      	ldrb	r3, [r7, #0]
   22a1a:	2b00      	cmp	r3, #0
   22a1c:	d1b2      	bne.n	22984 <main+0x84>
			last_input = current_input;
   22a1e:	4652      	mov	r2, sl
   22a20:	682b      	ldr	r3, [r5, #0]
   22a22:	6013      	str	r3, [r2, #0]
		current_input = input_none;
   22a24:	2306      	movs	r3, #6
   22a26:	602b      	str	r3, [r5, #0]
		if(state_change && isLaserOn()){
   22a28:	783b      	ldrb	r3, [r7, #0]
   22a2a:	2b00      	cmp	r3, #0
   22a2c:	d0b2      	beq.n	22994 <main+0x94>
   22a2e:	4b4c      	ldr	r3, [pc, #304]	; (22b60 <main+0x260>)
   22a30:	4798      	blx	r3
   22a32:	2800      	cmp	r0, #0
   22a34:	d0ae      	beq.n	22994 <main+0x94>
			rangefinder_on_off(false);
   22a36:	2000      	movs	r0, #0
   22a38:	4b4a      	ldr	r3, [pc, #296]	; (22b64 <main+0x264>)
   22a3a:	4798      	blx	r3
   22a3c:	e7aa      	b.n	22994 <main+0x94>
	SD_WriteLockout = true;
}

void UsbHandleTransactions(void){
	
	if (current_state==st_powerdown){
   22a3e:	6823      	ldr	r3, [r4, #0]
   22a40:	2b04      	cmp	r3, #4
   22a42:	d008      	beq.n	22a56 <main+0x156>
		return;
	}
	if (usb_transaction_requested){
   22a44:	4b48      	ldr	r3, [pc, #288]	; (22b68 <main+0x268>)
   22a46:	781b      	ldrb	r3, [r3, #0]
   22a48:	2b00      	cmp	r3, #0
   22a4a:	d136      	bne.n	22aba <main+0x1ba>
		while(udi_msc_process_trans());
			
		usb_transaction_requested = false;		
		spi_setBaud(baudRateMin);		
	}
	if(current_input== input_usb_transaction){
   22a4c:	682b      	ldr	r3, [r5, #0]
   22a4e:	2b0a      	cmp	r3, #10
   22a50:	d101      	bne.n	22a56 <main+0x156>
		current_input = input_none;
   22a52:	3b04      	subs	r3, #4
   22a54:	602b      	str	r3, [r5, #0]
			SyncDataBLE();
   22a56:	4b45      	ldr	r3, [pc, #276]	; (22b6c <main+0x26c>)
   22a58:	4798      	blx	r3
			if(current_input==input_none){
   22a5a:	682b      	ldr	r3, [r5, #0]
   22a5c:	2b06      	cmp	r3, #6
   22a5e:	d012      	beq.n	22a86 <main+0x186>
			debug1++;
   22a60:	4b43      	ldr	r3, [pc, #268]	; (22b70 <main+0x270>)
   22a62:	4a43      	ldr	r2, [pc, #268]	; (22b70 <main+0x270>)
   22a64:	681b      	ldr	r3, [r3, #0]
   22a66:	3301      	adds	r3, #1
   22a68:	6013      	str	r3, [r2, #0]
		}while ((current_input==input_none)||
   22a6a:	682b      	ldr	r3, [r5, #0]
			(current_input == input_usb_transaction));
   22a6c:	2b06      	cmp	r3, #6
   22a6e:	d098      	beq.n	229a2 <main+0xa2>
			(current_input == input_BLE_message)||
   22a70:	682b      	ldr	r3, [r5, #0]
		}while ((current_input==input_none)||
   22a72:	2b08      	cmp	r3, #8
   22a74:	d095      	beq.n	229a2 <main+0xa2>
			(current_input == input_usb_transaction));
   22a76:	682b      	ldr	r3, [r5, #0]
			(current_input == input_BLE_message)||
   22a78:	2b0a      	cmp	r3, #10
   22a7a:	d196      	bne.n	229aa <main+0xaa>
   22a7c:	e791      	b.n	229a2 <main+0xa2>
			BLE_remoteCommand(BleCommandQueue);
   22a7e:	483d      	ldr	r0, [pc, #244]	; (22b74 <main+0x274>)
   22a80:	4b3d      	ldr	r3, [pc, #244]	; (22b78 <main+0x278>)
   22a82:	4798      	blx	r3
   22a84:	e79e      	b.n	229c4 <main+0xc4>
				if (current_state==st_powerdown){
   22a86:	6823      	ldr	r3, [r4, #0]
   22a88:	2b04      	cmp	r3, #4
   22a8a:	d023      	beq.n	22ad4 <main+0x1d4>
  __ASM volatile ("cpsid i" : : : "memory");
   22a8c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   22a8e:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   22a92:	2200      	movs	r2, #0
   22a94:	4b39      	ldr	r3, [pc, #228]	; (22b7c <main+0x27c>)
   22a96:	701a      	strb	r2, [r3, #0]
	PM->SLEEPCFG.reg = sleep_mode;
   22a98:	2280      	movs	r2, #128	; 0x80
   22a9a:	2302      	movs	r3, #2
   22a9c:	05d2      	lsls	r2, r2, #23
   22a9e:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
   22aa0:	7853      	ldrb	r3, [r2, #1]
   22aa2:	2b02      	cmp	r3, #2
   22aa4:	d1fc      	bne.n	22aa0 <main+0x1a0>

	/* Enter the sleep mode. */
	switch (sleep_mode) {
	case SLEEPMGR_IDLE:
		system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE);
		cpu_irq_enable();
   22aa6:	3b01      	subs	r3, #1
   22aa8:	4a34      	ldr	r2, [pc, #208]	; (22b7c <main+0x27c>)
   22aaa:	7013      	strb	r3, [r2, #0]
   22aac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   22ab0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   22ab2:	f3bf 8f4f 	dsb	sy
	__WFI();
   22ab6:	bf30      	wfi
   22ab8:	e7d2      	b.n	22a60 <main+0x160>
		spi_setBaud(baudRateMax);
   22aba:	4831      	ldr	r0, [pc, #196]	; (22b80 <main+0x280>)
   22abc:	4b31      	ldr	r3, [pc, #196]	; (22b84 <main+0x284>)
   22abe:	4798      	blx	r3
		while(udi_msc_process_trans());
   22ac0:	4b31      	ldr	r3, [pc, #196]	; (22b88 <main+0x288>)
   22ac2:	4798      	blx	r3
   22ac4:	2800      	cmp	r0, #0
   22ac6:	d1fb      	bne.n	22ac0 <main+0x1c0>
		usb_transaction_requested = false;		
   22ac8:	4b27      	ldr	r3, [pc, #156]	; (22b68 <main+0x268>)
   22aca:	7018      	strb	r0, [r3, #0]
		spi_setBaud(baudRateMin);		
   22acc:	482f      	ldr	r0, [pc, #188]	; (22b8c <main+0x28c>)
   22ace:	4b2d      	ldr	r3, [pc, #180]	; (22b84 <main+0x284>)
   22ad0:	4798      	blx	r3
   22ad2:	e7bb      	b.n	22a4c <main+0x14c>
  __ASM volatile ("cpsid i" : : : "memory");
   22ad4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   22ad6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   22ada:	2100      	movs	r1, #0
   22adc:	4a27      	ldr	r2, [pc, #156]	; (22b7c <main+0x27c>)
   22ade:	7011      	strb	r1, [r2, #0]
	PM->SLEEPCFG.reg = sleep_mode;
   22ae0:	2280      	movs	r2, #128	; 0x80
   22ae2:	05d2      	lsls	r2, r2, #23
   22ae4:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
   22ae6:	7853      	ldrb	r3, [r2, #1]
   22ae8:	2b04      	cmp	r3, #4
   22aea:	d1fc      	bne.n	22ae6 <main+0x1e6>
		system_sleep();
		break;
	case SLEEPMGR_STANDBY:
		system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
		cpu_irq_enable();
   22aec:	3b03      	subs	r3, #3
   22aee:	e7db      	b.n	22aa8 <main+0x1a8>
   22af0:	0001fde5 	.word	0x0001fde5
   22af4:	0001f499 	.word	0x0001f499
   22af8:	0001f509 	.word	0x0001f509
   22afc:	00016bd1 	.word	0x00016bd1
   22b00:	000227c5 	.word	0x000227c5
   22b04:	00010fd1 	.word	0x00010fd1
   22b08:	000110d9 	.word	0x000110d9
   22b0c:	0000ed99 	.word	0x0000ed99
   22b10:	0000ed05 	.word	0x0000ed05
   22b14:	200012a4 	.word	0x200012a4
   22b18:	0001568d 	.word	0x0001568d
   22b1c:	0000f28d 	.word	0x0000f28d
   22b20:	00010ed1 	.word	0x00010ed1
   22b24:	00015721 	.word	0x00015721
   22b28:	20002630 	.word	0x20002630
   22b2c:	20001fe0 	.word	0x20001fe0
   22b30:	20003d24 	.word	0x20003d24
   22b34:	200041d8 	.word	0x200041d8
   22b38:	20004370 	.word	0x20004370
   22b3c:	20002d08 	.word	0x20002d08
   22b40:	00016a85 	.word	0x00016a85
   22b44:	0002f5b8 	.word	0x0002f5b8
   22b48:	00009c15 	.word	0x00009c15
   22b4c:	0000f07d 	.word	0x0000f07d
   22b50:	00016a3d 	.word	0x00016a3d
   22b54:	0000eb85 	.word	0x0000eb85
   22b58:	20000d5c 	.word	0x20000d5c
   22b5c:	20000d50 	.word	0x20000d50
   22b60:	00015ed5 	.word	0x00015ed5
   22b64:	000160dd 	.word	0x000160dd
   22b68:	20000df0 	.word	0x20000df0
   22b6c:	00015845 	.word	0x00015845
   22b70:	2000436c 	.word	0x2000436c
   22b74:	20002e68 	.word	0x20002e68
   22b78:	0000ef71 	.word	0x0000ef71
   22b7c:	200000ca 	.word	0x200000ca
   22b80:	00989680 	.word	0x00989680
   22b84:	0001bb71 	.word	0x0001bb71
   22b88:	00006e29 	.word	0x00006e29
   22b8c:	000f4240 	.word	0x000f4240

00022b90 <config_pins_powerdown>:
void config_pins_powerdown(void){
   22b90:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b92:	46de      	mov	lr, fp
   22b94:	4657      	mov	r7, sl
   22b96:	464e      	mov	r6, r9
   22b98:	4645      	mov	r5, r8
	base->WRCONFIG.reg =
   22b9a:	496a      	ldr	r1, [pc, #424]	; (22d44 <config_pins_powerdown+0x1b4>)
   22b9c:	4b6a      	ldr	r3, [pc, #424]	; (22d48 <config_pins_powerdown+0x1b8>)
   22b9e:	b5e0      	push	{r5, r6, r7, lr}
	base->WRCONFIG.reg =
   22ba0:	486a      	ldr	r0, [pc, #424]	; (22d4c <config_pins_powerdown+0x1bc>)
	base->WRCONFIG.reg =
   22ba2:	628b      	str	r3, [r1, #40]	; 0x28
   22ba4:	4699      	mov	r9, r3
   22ba6:	4b6a      	ldr	r3, [pc, #424]	; (22d50 <config_pins_powerdown+0x1c0>)
	base->WRCONFIG.reg =
   22ba8:	6288      	str	r0, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   22baa:	469a      	mov	sl, r3
   22bac:	628b      	str	r3, [r1, #40]	; 0x28
   22bae:	4b69      	ldr	r3, [pc, #420]	; (22d54 <config_pins_powerdown+0x1c4>)
	base->WRCONFIG.reg =
   22bb0:	6288      	str	r0, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   22bb2:	4698      	mov	r8, r3
   22bb4:	628b      	str	r3, [r1, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22bb6:	2380      	movs	r3, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22bb8:	264a      	movs	r6, #74	; 0x4a
   22bba:	2202      	movs	r2, #2
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22bbc:	00db      	lsls	r3, r3, #3
	base->WRCONFIG.reg =
   22bbe:	6288      	str	r0, [r1, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22bc0:	604b      	str	r3, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22bc2:	5d8b      	ldrb	r3, [r1, r6]
   22bc4:	2748      	movs	r7, #72	; 0x48
   22bc6:	4313      	orrs	r3, r2
   22bc8:	b2db      	uxtb	r3, r3
   22bca:	558b      	strb	r3, [r1, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22bcc:	2380      	movs	r3, #128	; 0x80
   22bce:	005b      	lsls	r3, r3, #1
   22bd0:	604b      	str	r3, [r1, #4]
   22bd2:	469c      	mov	ip, r3
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22bd4:	5dcb      	ldrb	r3, [r1, r7]
   22bd6:	244b      	movs	r4, #75	; 0x4b
   22bd8:	4313      	orrs	r3, r2
   22bda:	b2db      	uxtb	r3, r3
   22bdc:	55cb      	strb	r3, [r1, r7]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22bde:	2380      	movs	r3, #128	; 0x80
   22be0:	011b      	lsls	r3, r3, #4
   22be2:	604b      	str	r3, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22be4:	234b      	movs	r3, #75	; 0x4b
   22be6:	5ccb      	ldrb	r3, [r1, r3]
   22be8:	4313      	orrs	r3, r2
   22bea:	b2db      	uxtb	r3, r3
   22bec:	550b      	strb	r3, [r1, r4]
	base->WRCONFIG.reg =
   22bee:	4b5a      	ldr	r3, [pc, #360]	; (22d58 <config_pins_powerdown+0x1c8>)
   22bf0:	4c5a      	ldr	r4, [pc, #360]	; (22d5c <config_pins_powerdown+0x1cc>)
   22bf2:	629c      	str	r4, [r3, #40]	; 0x28
   22bf4:	4c5a      	ldr	r4, [pc, #360]	; (22d60 <config_pins_powerdown+0x1d0>)
	base->WRCONFIG.reg =
   22bf6:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22bf8:	629c      	str	r4, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22bfa:	2480      	movs	r4, #128	; 0x80
   22bfc:	0164      	lsls	r4, r4, #5
	base->WRCONFIG.reg =
   22bfe:	6298      	str	r0, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22c00:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22c02:	244c      	movs	r4, #76	; 0x4c
   22c04:	46a3      	mov	fp, r4
   22c06:	465d      	mov	r5, fp
   22c08:	5d1c      	ldrb	r4, [r3, r4]
   22c0a:	4314      	orrs	r4, r2
   22c0c:	b2e4      	uxtb	r4, r4
   22c0e:	555c      	strb	r4, [r3, r5]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22c10:	2480      	movs	r4, #128	; 0x80
   22c12:	01a4      	lsls	r4, r4, #6
   22c14:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22c16:	244d      	movs	r4, #77	; 0x4d
   22c18:	46a3      	mov	fp, r4
   22c1a:	465d      	mov	r5, fp
   22c1c:	5d1c      	ldrb	r4, [r3, r4]
   22c1e:	4314      	orrs	r4, r2
   22c20:	b2e4      	uxtb	r4, r4
   22c22:	555c      	strb	r4, [r3, r5]
	base->WRCONFIG.reg =
   22c24:	4654      	mov	r4, sl
	base->WRCONFIG.reg =
   22c26:	4d4f      	ldr	r5, [pc, #316]	; (22d64 <config_pins_powerdown+0x1d4>)
	base->WRCONFIG.reg =
   22c28:	629c      	str	r4, [r3, #40]	; 0x28
   22c2a:	4c4f      	ldr	r4, [pc, #316]	; (22d68 <config_pins_powerdown+0x1d8>)
	base->WRCONFIG.reg =
   22c2c:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22c2e:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22c30:	629d      	str	r5, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22c32:	4d4e      	ldr	r5, [pc, #312]	; (22d6c <config_pins_powerdown+0x1dc>)
   22c34:	629d      	str	r5, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22c36:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22c38:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22c3a:	4c4d      	ldr	r4, [pc, #308]	; (22d70 <config_pins_powerdown+0x1e0>)
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22c3c:	2580      	movs	r5, #128	; 0x80
	base->WRCONFIG.reg =
   22c3e:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22c40:	464c      	mov	r4, r9
   22c42:	629c      	str	r4, [r3, #40]	; 0x28
   22c44:	4644      	mov	r4, r8
	base->WRCONFIG.reg =
   22c46:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22c48:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   22c4a:	6298      	str	r0, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22c4c:	4660      	mov	r0, ip
   22c4e:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22c50:	5dd8      	ldrb	r0, [r3, r7]
   22c52:	2450      	movs	r4, #80	; 0x50
   22c54:	4310      	orrs	r0, r2
   22c56:	b2c0      	uxtb	r0, r0
   22c58:	55d8      	strb	r0, [r3, r7]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22c5a:	2080      	movs	r0, #128	; 0x80
   22c5c:	0240      	lsls	r0, r0, #9
   22c5e:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22c60:	5d18      	ldrb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22c62:	042d      	lsls	r5, r5, #16
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22c64:	4310      	orrs	r0, r2
   22c66:	b2c0      	uxtb	r0, r0
   22c68:	5518      	strb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22c6a:	2080      	movs	r0, #128	; 0x80
   22c6c:	0080      	lsls	r0, r0, #2
   22c6e:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22c70:	3c07      	subs	r4, #7
   22c72:	5d18      	ldrb	r0, [r3, r4]
   22c74:	4310      	orrs	r0, r2
   22c76:	b2c0      	uxtb	r0, r0
   22c78:	5518      	strb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22c7a:	2080      	movs	r0, #128	; 0x80
   22c7c:	0280      	lsls	r0, r0, #10
   22c7e:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22c80:	3408      	adds	r4, #8
   22c82:	5d18      	ldrb	r0, [r3, r4]
   22c84:	4310      	orrs	r0, r2
   22c86:	b2c0      	uxtb	r0, r0
   22c88:	5518      	strb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22c8a:	2080      	movs	r0, #128	; 0x80
   22c8c:	00c0      	lsls	r0, r0, #3
   22c8e:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22c90:	5d98      	ldrb	r0, [r3, r6]
   22c92:	3c06      	subs	r4, #6
   22c94:	4310      	orrs	r0, r2
   22c96:	b2c0      	uxtb	r0, r0
   22c98:	5598      	strb	r0, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22c9a:	2080      	movs	r0, #128	; 0x80
   22c9c:	0100      	lsls	r0, r0, #4
   22c9e:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22ca0:	204b      	movs	r0, #75	; 0x4b
   22ca2:	5c18      	ldrb	r0, [r3, r0]
   22ca4:	3608      	adds	r6, #8
   22ca6:	4310      	orrs	r0, r2
   22ca8:	b2c0      	uxtb	r0, r0
   22caa:	5518      	strb	r0, [r3, r4]
   22cac:	2057      	movs	r0, #87	; 0x57
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22cae:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22cb0:	5c1c      	ldrb	r4, [r3, r0]
   22cb2:	4314      	orrs	r4, r2
   22cb4:	b2e4      	uxtb	r4, r4
   22cb6:	541c      	strb	r4, [r3, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22cb8:	2480      	movs	r4, #128	; 0x80
   22cba:	02e4      	lsls	r4, r4, #11
   22cbc:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22cbe:	5d9c      	ldrb	r4, [r3, r6]
   22cc0:	4314      	orrs	r4, r2
   22cc2:	b2e4      	uxtb	r4, r4
   22cc4:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22cc6:	2480      	movs	r4, #128	; 0x80
   22cc8:	0324      	lsls	r4, r4, #12
   22cca:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22ccc:	3601      	adds	r6, #1
   22cce:	5d9c      	ldrb	r4, [r3, r6]
   22cd0:	4314      	orrs	r4, r2
   22cd2:	b2e4      	uxtb	r4, r4
   22cd4:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22cd6:	2480      	movs	r4, #128	; 0x80
   22cd8:	03a4      	lsls	r4, r4, #14
   22cda:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22cdc:	3602      	adds	r6, #2
   22cde:	5d9c      	ldrb	r4, [r3, r6]
   22ce0:	4314      	orrs	r4, r2
   22ce2:	b2e4      	uxtb	r4, r4
   22ce4:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22ce6:	2480      	movs	r4, #128	; 0x80
   22ce8:	0364      	lsls	r4, r4, #13
   22cea:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22cec:	3e01      	subs	r6, #1
   22cee:	5d9c      	ldrb	r4, [r3, r6]
   22cf0:	4314      	orrs	r4, r2
   22cf2:	b2e4      	uxtb	r4, r4
   22cf4:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22cf6:	2480      	movs	r4, #128	; 0x80
   22cf8:	0224      	lsls	r4, r4, #8
   22cfa:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22cfc:	3e05      	subs	r6, #5
   22cfe:	5d9c      	ldrb	r4, [r3, r6]
   22d00:	4314      	orrs	r4, r2
   22d02:	b2e4      	uxtb	r4, r4
   22d04:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22d06:	2404      	movs	r4, #4
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22d08:	3e0d      	subs	r6, #13
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22d0a:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22d0c:	5d9c      	ldrb	r4, [r3, r6]
   22d0e:	4314      	orrs	r4, r2
   22d10:	b2e4      	uxtb	r4, r4
   22d12:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22d14:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22d16:	5c1c      	ldrb	r4, [r3, r0]
   22d18:	3619      	adds	r6, #25
   22d1a:	4314      	orrs	r4, r2
   22d1c:	b2e4      	uxtb	r4, r4
   22d1e:	541c      	strb	r4, [r3, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22d20:	2480      	movs	r4, #128	; 0x80
   22d22:	0524      	lsls	r4, r4, #20
   22d24:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22d26:	5d9c      	ldrb	r4, [r3, r6]
   22d28:	4314      	orrs	r4, r2
   22d2a:	b2e4      	uxtb	r4, r4
   22d2c:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   22d2e:	604d      	str	r5, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   22d30:	5c0b      	ldrb	r3, [r1, r0]
   22d32:	431a      	orrs	r2, r3
   22d34:	b2d2      	uxtb	r2, r2
   22d36:	540a      	strb	r2, [r1, r0]
}
   22d38:	bc3c      	pop	{r2, r3, r4, r5}
   22d3a:	4690      	mov	r8, r2
   22d3c:	4699      	mov	r9, r3
   22d3e:	46a2      	mov	sl, r4
   22d40:	46ab      	mov	fp, r5
   22d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22d44:	40002880 	.word	0x40002880
   22d48:	50020400 	.word	0x50020400
   22d4c:	d0020000 	.word	0xd0020000
   22d50:	50020100 	.word	0x50020100
   22d54:	50020800 	.word	0x50020800
   22d58:	40002800 	.word	0x40002800
   22d5c:	50021000 	.word	0x50021000
   22d60:	50022000 	.word	0x50022000
   22d64:	d0020001 	.word	0xd0020001
   22d68:	50020000 	.word	0x50020000
   22d6c:	50020200 	.word	0x50020200
   22d70:	d0020002 	.word	0xd0020002

00022d74 <fn_powerdown>:
void fn_powerdown(void){
   22d74:	b510      	push	{r4, lr}
	if (state_change){
   22d76:	4b1e      	ldr	r3, [pc, #120]	; (22df0 <fn_powerdown+0x7c>)
   22d78:	781b      	ldrb	r3, [r3, #0]
   22d7a:	2b00      	cmp	r3, #0
   22d7c:	d022      	beq.n	22dc4 <fn_powerdown+0x50>
		save_sync_tracker();
   22d7e:	4b1d      	ldr	r3, [pc, #116]	; (22df4 <fn_powerdown+0x80>)
   22d80:	4798      	blx	r3
		BLE_advert_OnOff(false);
   22d82:	2000      	movs	r0, #0
   22d84:	4b1c      	ldr	r3, [pc, #112]	; (22df8 <fn_powerdown+0x84>)
   22d86:	4798      	blx	r3
		wdt_disable();
   22d88:	4b1c      	ldr	r3, [pc, #112]	; (22dfc <fn_powerdown+0x88>)
   22d8a:	4798      	blx	r3
		buzzOn(tone4, 150);
   22d8c:	4c1c      	ldr	r4, [pc, #112]	; (22e00 <fn_powerdown+0x8c>)
   22d8e:	2196      	movs	r1, #150	; 0x96
   22d90:	481c      	ldr	r0, [pc, #112]	; (22e04 <fn_powerdown+0x90>)
   22d92:	47a0      	blx	r4
		buzzOn(tone2, 150);
   22d94:	2196      	movs	r1, #150	; 0x96
   22d96:	481c      	ldr	r0, [pc, #112]	; (22e08 <fn_powerdown+0x94>)
   22d98:	47a0      	blx	r4
		buzzOn(tone1, 150);			
   22d9a:	2196      	movs	r1, #150	; 0x96
   22d9c:	481b      	ldr	r0, [pc, #108]	; (22e0c <fn_powerdown+0x98>)
   22d9e:	47a0      	blx	r4
		ext_osc_onoff(false);
   22da0:	2000      	movs	r0, #0
   22da2:	4b1b      	ldr	r3, [pc, #108]	; (22e10 <fn_powerdown+0x9c>)
   22da4:	4798      	blx	r3
		disable_comms();
   22da6:	4b1b      	ldr	r3, [pc, #108]	; (22e14 <fn_powerdown+0xa0>)
   22da8:	4798      	blx	r3
		config_pins_powerdown();		
   22daa:	4b1b      	ldr	r3, [pc, #108]	; (22e18 <fn_powerdown+0xa4>)
   22dac:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   22dae:	2204      	movs	r2, #4
   22db0:	4b1a      	ldr	r3, [pc, #104]	; (22e1c <fn_powerdown+0xa8>)
   22db2:	615a      	str	r2, [r3, #20]
		udc_stop();// disable USB
   22db4:	4b1a      	ldr	r3, [pc, #104]	; (22e20 <fn_powerdown+0xac>)
   22db6:	4798      	blx	r3
		powerdown_timer_1s();
   22db8:	4b1a      	ldr	r3, [pc, #104]	; (22e24 <fn_powerdown+0xb0>)
   22dba:	4798      	blx	r3
		powerdown_timer_ExtLong();
   22dbc:	4b1a      	ldr	r3, [pc, #104]	; (22e28 <fn_powerdown+0xb4>)
   22dbe:	4798      	blx	r3
		mainClockPowerdown();
   22dc0:	4b1a      	ldr	r3, [pc, #104]	; (22e2c <fn_powerdown+0xb8>)
   22dc2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
   22dc4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   22dc6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   22dca:	2300      	movs	r3, #0
	PM->SLEEPCFG.reg = sleep_mode;
   22dcc:	2280      	movs	r2, #128	; 0x80
   22dce:	4918      	ldr	r1, [pc, #96]	; (22e30 <fn_powerdown+0xbc>)
   22dd0:	05d2      	lsls	r2, r2, #23
   22dd2:	700b      	strb	r3, [r1, #0]
   22dd4:	3304      	adds	r3, #4
   22dd6:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
   22dd8:	7853      	ldrb	r3, [r2, #1]
   22dda:	2b04      	cmp	r3, #4
   22ddc:	d1fc      	bne.n	22dd8 <fn_powerdown+0x64>
		cpu_irq_enable();
   22dde:	3b03      	subs	r3, #3
   22de0:	700b      	strb	r3, [r1, #0]
   22de2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   22de6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   22de8:	f3bf 8f4f 	dsb	sy
	__WFI();
   22dec:	bf30      	wfi
}
   22dee:	bd10      	pop	{r4, pc}
   22df0:	20004370 	.word	0x20004370
   22df4:	00010f85 	.word	0x00010f85
   22df8:	0000f13d 	.word	0x0000f13d
   22dfc:	00016a19 	.word	0x00016a19
   22e00:	0000f8a9 	.word	0x0000f8a9
   22e04:	0000125a 	.word	0x0000125a
   22e08:	00000f6f 	.word	0x00000f6f
   22e0c:	00000c3f 	.word	0x00000c3f
   22e10:	0000fcdd 	.word	0x0000fcdd
   22e14:	0001bad5 	.word	0x0001bad5
   22e18:	00022b91 	.word	0x00022b91
   22e1c:	40002880 	.word	0x40002880
   22e20:	00007159 	.word	0x00007159
   22e24:	00016e59 	.word	0x00016e59
   22e28:	00016e79 	.word	0x00016e79
   22e2c:	0000f915 	.word	0x0000f915
   22e30:	200000ca 	.word	0x200000ca

00022e34 <getDefaultOptions>:
	optionptr->chargeCurrent = 100;//mA
   22e34:	2164      	movs	r1, #100	; 0x64
	optionptr->current_unit_temp = celsius;
   22e36:	2204      	movs	r2, #4
	optionptr->chargeCurrent = 100;//mA
   22e38:	60c1      	str	r1, [r0, #12]
	optionptr->errorSensitivity = 1;
   22e3a:	21fe      	movs	r1, #254	; 0xfe
	optionptr->shot_delay = 0;//seconds
   22e3c:	2300      	movs	r3, #0
	optionptr->current_unit_temp = celsius;
   22e3e:	7242      	strb	r2, [r0, #9]
	optionptr->current_unit_dist = meters;
   22e40:	3a03      	subs	r2, #3
   22e42:	7202      	strb	r2, [r0, #8]
	optionptr->errorSensitivity = 1;
   22e44:	0589      	lsls	r1, r1, #22
	optionptr->backlight_setting.colorRef = 1;//white
   22e46:	7542      	strb	r2, [r0, #21]
	optionptr->backlight_setting.brightness = 3;
   22e48:	3202      	adds	r2, #2
	optionptr->shot_delay = 0;//seconds
   22e4a:	7283      	strb	r3, [r0, #10]
	optionptr->errorSensitivity = 1;
   22e4c:	6101      	str	r1, [r0, #16]
	optionptr->backlight_setting.brightness = 3;
   22e4e:	7502      	strb	r2, [r0, #20]
	optionptr->SerialNumber = 0;
   22e50:	6043      	str	r3, [r0, #4]
}
   22e52:	4770      	bx	lr

00022e54 <processMeasurement>:
	switch (measFullPtr->meas_type){
   22e54:	2328      	movs	r3, #40	; 0x28
void processMeasurement(struct MEASUREMENT_FULL *measFullPtr){
   22e56:	b530      	push	{r4, r5, lr}
	switch (measFullPtr->meas_type){
   22e58:	5cc3      	ldrb	r3, [r0, r3]
void processMeasurement(struct MEASUREMENT_FULL *measFullPtr){
   22e5a:	b091      	sub	sp, #68	; 0x44
   22e5c:	0005      	movs	r5, r0
	switch (measFullPtr->meas_type){
   22e5e:	2b01      	cmp	r3, #1
   22e60:	d022      	beq.n	22ea8 <processMeasurement+0x54>
   22e62:	2b00      	cmp	r3, #0
   22e64:	d017      	beq.n	22e96 <processMeasurement+0x42>
   22e66:	2b02      	cmp	r3, #2
   22e68:	d10f      	bne.n	22e8a <processMeasurement+0x36>
			measPtr = &measBuf[measBufInd];
   22e6a:	4b10      	ldr	r3, [pc, #64]	; (22eac <processMeasurement+0x58>)
   22e6c:	681c      	ldr	r4, [r3, #0]
   22e6e:	4b10      	ldr	r3, [pc, #64]	; (22eb0 <processMeasurement+0x5c>)
   22e70:	01a4      	lsls	r4, r4, #6
   22e72:	18e4      	adds	r4, r4, r3
	memcpy(measPtr,measFullPtr,sizeof(*measPtr));
   22e74:	4b0f      	ldr	r3, [pc, #60]	; (22eb4 <processMeasurement+0x60>)
   22e76:	2240      	movs	r2, #64	; 0x40
   22e78:	0029      	movs	r1, r5
   22e7a:	0020      	movs	r0, r4
   22e7c:	4798      	blx	r3
	switch (measFullPtr->meas_type){
   22e7e:	2328      	movs	r3, #40	; 0x28
   22e80:	5ceb      	ldrb	r3, [r5, r3]
   22e82:	2b01      	cmp	r3, #1
   22e84:	d003      	beq.n	22e8e <processMeasurement+0x3a>
   22e86:	2b00      	cmp	r3, #0
   22e88:	d001      	beq.n	22e8e <processMeasurement+0x3a>
}
   22e8a:	b011      	add	sp, #68	; 0x44
   22e8c:	bd30      	pop	{r4, r5, pc}
			save_measurement(measPtr);
   22e8e:	0020      	movs	r0, r4
   22e90:	4b09      	ldr	r3, [pc, #36]	; (22eb8 <processMeasurement+0x64>)
   22e92:	4798      	blx	r3
			break;
   22e94:	e7f9      	b.n	22e8a <processMeasurement+0x36>
			measPtr = &measBuf[measBufInd];
   22e96:	4805      	ldr	r0, [pc, #20]	; (22eac <processMeasurement+0x58>)
			circBuffInc(&measBufInd, N_MEASBUF);	
   22e98:	210a      	movs	r1, #10
			measPtr = &measBuf[measBufInd];
   22e9a:	6803      	ldr	r3, [r0, #0]
   22e9c:	019c      	lsls	r4, r3, #6
   22e9e:	4b04      	ldr	r3, [pc, #16]	; (22eb0 <processMeasurement+0x5c>)
   22ea0:	18e4      	adds	r4, r4, r3
			circBuffInc(&measBufInd, N_MEASBUF);	
   22ea2:	4b06      	ldr	r3, [pc, #24]	; (22ebc <processMeasurement+0x68>)
   22ea4:	4798      	blx	r3
			break;
   22ea6:	e7e5      	b.n	22e74 <processMeasurement+0x20>
			measPtr = &measTemp;
   22ea8:	466c      	mov	r4, sp
   22eaa:	e7e3      	b.n	22e74 <processMeasurement+0x20>
   22eac:	20000d68 	.word	0x20000d68
   22eb0:	20003a44 	.word	0x20003a44
   22eb4:	00028999 	.word	0x00028999
   22eb8:	00015acd 	.word	0x00015acd
   22ebc:	00011ea9 	.word	0x00011ea9

00022ec0 <msc_notify_trans>:
	usb_transaction_requested = true;
   22ec0:	2201      	movs	r2, #1
   22ec2:	4b01      	ldr	r3, [pc, #4]	; (22ec8 <msc_notify_trans+0x8>)
   22ec4:	701a      	strb	r2, [r3, #0]
}
   22ec6:	4770      	bx	lr
   22ec8:	20000df0 	.word	0x20000df0

00022ecc <my_callback_msc_enable>:
	SD_WriteLockout = true;
   22ecc:	2201      	movs	r2, #1
   22ece:	4b02      	ldr	r3, [pc, #8]	; (22ed8 <my_callback_msc_enable+0xc>)
}
   22ed0:	2001      	movs	r0, #1
	SD_WriteLockout = true;
   22ed2:	701a      	strb	r2, [r3, #0]
}
   22ed4:	4770      	bx	lr
   22ed6:	46c0      	nop			; (mov r8, r8)
   22ed8:	20000d50 	.word	0x20000d50

00022edc <my_callback_msc_disable>:
	SD_WriteLockout = true;
   22edc:	2201      	movs	r2, #1
   22ede:	4b01      	ldr	r3, [pc, #4]	; (22ee4 <my_callback_msc_disable+0x8>)
   22ee0:	701a      	strb	r2, [r3, #0]
}
   22ee2:	4770      	bx	lr
   22ee4:	20000d50 	.word	0x20000d50

00022ee8 <cos>:
   22ee8:	b530      	push	{r4, r5, lr}
   22eea:	4a20      	ldr	r2, [pc, #128]	; (22f6c <cos+0x84>)
   22eec:	004b      	lsls	r3, r1, #1
   22eee:	b087      	sub	sp, #28
   22ef0:	085b      	lsrs	r3, r3, #1
   22ef2:	4293      	cmp	r3, r2
   22ef4:	dd1c      	ble.n	22f30 <cos+0x48>
   22ef6:	4a1e      	ldr	r2, [pc, #120]	; (22f70 <cos+0x88>)
   22ef8:	4293      	cmp	r3, r2
   22efa:	dd05      	ble.n	22f08 <cos+0x20>
   22efc:	0002      	movs	r2, r0
   22efe:	000b      	movs	r3, r1
   22f00:	f005 f860 	bl	27fc4 <__aeabi_dsub>
   22f04:	b007      	add	sp, #28
   22f06:	bd30      	pop	{r4, r5, pc}
   22f08:	aa02      	add	r2, sp, #8
   22f0a:	f001 f87d 	bl	24008 <__ieee754_rem_pio2>
   22f0e:	2303      	movs	r3, #3
   22f10:	4018      	ands	r0, r3
   22f12:	9a04      	ldr	r2, [sp, #16]
   22f14:	9b05      	ldr	r3, [sp, #20]
   22f16:	2801      	cmp	r0, #1
   22f18:	d018      	beq.n	22f4c <cos+0x64>
   22f1a:	2802      	cmp	r0, #2
   22f1c:	d00d      	beq.n	22f3a <cos+0x52>
   22f1e:	2800      	cmp	r0, #0
   22f20:	d01e      	beq.n	22f60 <cos+0x78>
   22f22:	9802      	ldr	r0, [sp, #8]
   22f24:	9903      	ldr	r1, [sp, #12]
   22f26:	2401      	movs	r4, #1
   22f28:	9400      	str	r4, [sp, #0]
   22f2a:	f002 f8fb 	bl	25124 <__kernel_sin>
   22f2e:	e7e9      	b.n	22f04 <cos+0x1c>
   22f30:	2200      	movs	r2, #0
   22f32:	2300      	movs	r3, #0
   22f34:	f001 fb60 	bl	245f8 <__kernel_cos>
   22f38:	e7e4      	b.n	22f04 <cos+0x1c>
   22f3a:	9802      	ldr	r0, [sp, #8]
   22f3c:	9903      	ldr	r1, [sp, #12]
   22f3e:	f001 fb5b 	bl	245f8 <__kernel_cos>
   22f42:	2380      	movs	r3, #128	; 0x80
   22f44:	061b      	lsls	r3, r3, #24
   22f46:	469c      	mov	ip, r3
   22f48:	4461      	add	r1, ip
   22f4a:	e7db      	b.n	22f04 <cos+0x1c>
   22f4c:	9000      	str	r0, [sp, #0]
   22f4e:	9802      	ldr	r0, [sp, #8]
   22f50:	9903      	ldr	r1, [sp, #12]
   22f52:	f002 f8e7 	bl	25124 <__kernel_sin>
   22f56:	2380      	movs	r3, #128	; 0x80
   22f58:	061b      	lsls	r3, r3, #24
   22f5a:	469c      	mov	ip, r3
   22f5c:	4461      	add	r1, ip
   22f5e:	e7d1      	b.n	22f04 <cos+0x1c>
   22f60:	9802      	ldr	r0, [sp, #8]
   22f62:	9903      	ldr	r1, [sp, #12]
   22f64:	f001 fb48 	bl	245f8 <__kernel_cos>
   22f68:	e7cc      	b.n	22f04 <cos+0x1c>
   22f6a:	46c0      	nop			; (mov r8, r8)
   22f6c:	3fe921fb 	.word	0x3fe921fb
   22f70:	7fefffff 	.word	0x7fefffff

00022f74 <sin>:
   22f74:	b530      	push	{r4, r5, lr}
   22f76:	4a21      	ldr	r2, [pc, #132]	; (22ffc <sin+0x88>)
   22f78:	004b      	lsls	r3, r1, #1
   22f7a:	b087      	sub	sp, #28
   22f7c:	085b      	lsrs	r3, r3, #1
   22f7e:	4293      	cmp	r3, r2
   22f80:	dd1e      	ble.n	22fc0 <sin+0x4c>
   22f82:	4a1f      	ldr	r2, [pc, #124]	; (23000 <sin+0x8c>)
   22f84:	4293      	cmp	r3, r2
   22f86:	dd05      	ble.n	22f94 <sin+0x20>
   22f88:	0002      	movs	r2, r0
   22f8a:	000b      	movs	r3, r1
   22f8c:	f005 f81a 	bl	27fc4 <__aeabi_dsub>
   22f90:	b007      	add	sp, #28
   22f92:	bd30      	pop	{r4, r5, pc}
   22f94:	aa02      	add	r2, sp, #8
   22f96:	f001 f837 	bl	24008 <__ieee754_rem_pio2>
   22f9a:	2303      	movs	r3, #3
   22f9c:	4018      	ands	r0, r3
   22f9e:	9a04      	ldr	r2, [sp, #16]
   22fa0:	9b05      	ldr	r3, [sp, #20]
   22fa2:	2801      	cmp	r0, #1
   22fa4:	d01e      	beq.n	22fe4 <sin+0x70>
   22fa6:	2802      	cmp	r0, #2
   22fa8:	d011      	beq.n	22fce <sin+0x5a>
   22faa:	2800      	cmp	r0, #0
   22fac:	d01f      	beq.n	22fee <sin+0x7a>
   22fae:	9802      	ldr	r0, [sp, #8]
   22fb0:	9903      	ldr	r1, [sp, #12]
   22fb2:	f001 fb21 	bl	245f8 <__kernel_cos>
   22fb6:	2380      	movs	r3, #128	; 0x80
   22fb8:	061b      	lsls	r3, r3, #24
   22fba:	469c      	mov	ip, r3
   22fbc:	4461      	add	r1, ip
   22fbe:	e7e7      	b.n	22f90 <sin+0x1c>
   22fc0:	2300      	movs	r3, #0
   22fc2:	2200      	movs	r2, #0
   22fc4:	9300      	str	r3, [sp, #0]
   22fc6:	2300      	movs	r3, #0
   22fc8:	f002 f8ac 	bl	25124 <__kernel_sin>
   22fcc:	e7e0      	b.n	22f90 <sin+0x1c>
   22fce:	2401      	movs	r4, #1
   22fd0:	9802      	ldr	r0, [sp, #8]
   22fd2:	9903      	ldr	r1, [sp, #12]
   22fd4:	9400      	str	r4, [sp, #0]
   22fd6:	f002 f8a5 	bl	25124 <__kernel_sin>
   22fda:	2380      	movs	r3, #128	; 0x80
   22fdc:	061b      	lsls	r3, r3, #24
   22fde:	469c      	mov	ip, r3
   22fe0:	4461      	add	r1, ip
   22fe2:	e7d5      	b.n	22f90 <sin+0x1c>
   22fe4:	9802      	ldr	r0, [sp, #8]
   22fe6:	9903      	ldr	r1, [sp, #12]
   22fe8:	f001 fb06 	bl	245f8 <__kernel_cos>
   22fec:	e7d0      	b.n	22f90 <sin+0x1c>
   22fee:	2401      	movs	r4, #1
   22ff0:	9802      	ldr	r0, [sp, #8]
   22ff2:	9903      	ldr	r1, [sp, #12]
   22ff4:	9400      	str	r4, [sp, #0]
   22ff6:	f002 f895 	bl	25124 <__kernel_sin>
   22ffa:	e7c9      	b.n	22f90 <sin+0x1c>
   22ffc:	3fe921fb 	.word	0x3fe921fb
   23000:	7fefffff 	.word	0x7fefffff

00023004 <atan2>:
   23004:	b510      	push	{r4, lr}
   23006:	f000 fa0d 	bl	23424 <__ieee754_atan2>
   2300a:	bd10      	pop	{r4, pc}

0002300c <pow>:
   2300c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2300e:	4657      	mov	r7, sl
   23010:	464e      	mov	r6, r9
   23012:	46de      	mov	lr, fp
   23014:	4645      	mov	r5, r8
   23016:	b5e0      	push	{r5, r6, r7, lr}
   23018:	b08f      	sub	sp, #60	; 0x3c
   2301a:	001d      	movs	r5, r3
   2301c:	0006      	movs	r6, r0
   2301e:	000f      	movs	r7, r1
   23020:	0014      	movs	r4, r2
   23022:	f000 fabb 	bl	2359c <__ieee754_pow>
   23026:	4bc7      	ldr	r3, [pc, #796]	; (23344 <pow+0x338>)
   23028:	9000      	str	r0, [sp, #0]
   2302a:	9101      	str	r1, [sp, #4]
   2302c:	469a      	mov	sl, r3
   2302e:	781b      	ldrb	r3, [r3, #0]
   23030:	b25b      	sxtb	r3, r3
   23032:	4699      	mov	r9, r3
   23034:	3301      	adds	r3, #1
   23036:	d03e      	beq.n	230b6 <pow+0xaa>
   23038:	0022      	movs	r2, r4
   2303a:	002b      	movs	r3, r5
   2303c:	0020      	movs	r0, r4
   2303e:	0029      	movs	r1, r5
   23040:	f005 fad6 	bl	285f0 <__aeabi_dcmpun>
   23044:	4683      	mov	fp, r0
   23046:	2800      	cmp	r0, #0
   23048:	d135      	bne.n	230b6 <pow+0xaa>
   2304a:	0032      	movs	r2, r6
   2304c:	003b      	movs	r3, r7
   2304e:	0030      	movs	r0, r6
   23050:	0039      	movs	r1, r7
   23052:	f005 facd 	bl	285f0 <__aeabi_dcmpun>
   23056:	2200      	movs	r2, #0
   23058:	9003      	str	r0, [sp, #12]
   2305a:	2800      	cmp	r0, #0
   2305c:	d000      	beq.n	23060 <pow+0x54>
   2305e:	e0b6      	b.n	231ce <pow+0x1c2>
   23060:	2300      	movs	r3, #0
   23062:	0030      	movs	r0, r6
   23064:	0039      	movs	r1, r7
   23066:	f002 fdef 	bl	25c48 <__aeabi_dcmpeq>
   2306a:	2800      	cmp	r0, #0
   2306c:	d02c      	beq.n	230c8 <pow+0xbc>
   2306e:	2200      	movs	r2, #0
   23070:	2300      	movs	r3, #0
   23072:	0020      	movs	r0, r4
   23074:	0029      	movs	r1, r5
   23076:	f002 fde7 	bl	25c48 <__aeabi_dcmpeq>
   2307a:	4683      	mov	fp, r0
   2307c:	2800      	cmp	r0, #0
   2307e:	d100      	bne.n	23082 <pow+0x76>
   23080:	e077      	b.n	23172 <pow+0x166>
   23082:	ab04      	add	r3, sp, #16
   23084:	4698      	mov	r8, r3
   23086:	2301      	movs	r3, #1
   23088:	4642      	mov	r2, r8
   2308a:	9304      	str	r3, [sp, #16]
   2308c:	4bae      	ldr	r3, [pc, #696]	; (23348 <pow+0x33c>)
   2308e:	6053      	str	r3, [r2, #4]
   23090:	4643      	mov	r3, r8
   23092:	9a03      	ldr	r2, [sp, #12]
   23094:	611c      	str	r4, [r3, #16]
   23096:	615d      	str	r5, [r3, #20]
   23098:	621a      	str	r2, [r3, #32]
   2309a:	609e      	str	r6, [r3, #8]
   2309c:	60df      	str	r7, [r3, #12]
   2309e:	4642      	mov	r2, r8
   230a0:	2300      	movs	r3, #0
   230a2:	2400      	movs	r4, #0
   230a4:	6193      	str	r3, [r2, #24]
   230a6:	61d4      	str	r4, [r2, #28]
   230a8:	464b      	mov	r3, r9
   230aa:	2b00      	cmp	r3, #0
   230ac:	d04d      	beq.n	2314a <pow+0x13e>
   230ae:	2300      	movs	r3, #0
   230b0:	4ca6      	ldr	r4, [pc, #664]	; (2334c <pow+0x340>)
   230b2:	9300      	str	r3, [sp, #0]
   230b4:	9401      	str	r4, [sp, #4]
   230b6:	9800      	ldr	r0, [sp, #0]
   230b8:	9901      	ldr	r1, [sp, #4]
   230ba:	b00f      	add	sp, #60	; 0x3c
   230bc:	bc3c      	pop	{r2, r3, r4, r5}
   230be:	4690      	mov	r8, r2
   230c0:	4699      	mov	r9, r3
   230c2:	46a2      	mov	sl, r4
   230c4:	46ab      	mov	fp, r5
   230c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   230c8:	9800      	ldr	r0, [sp, #0]
   230ca:	9901      	ldr	r1, [sp, #4]
   230cc:	f002 fa7a 	bl	255c4 <finite>
   230d0:	4681      	mov	r9, r0
   230d2:	2800      	cmp	r0, #0
   230d4:	d100      	bne.n	230d8 <pow+0xcc>
   230d6:	e09b      	b.n	23210 <pow+0x204>
   230d8:	9800      	ldr	r0, [sp, #0]
   230da:	9901      	ldr	r1, [sp, #4]
   230dc:	2200      	movs	r2, #0
   230de:	2300      	movs	r3, #0
   230e0:	f002 fdb2 	bl	25c48 <__aeabi_dcmpeq>
   230e4:	2800      	cmp	r0, #0
   230e6:	d0e6      	beq.n	230b6 <pow+0xaa>
   230e8:	0030      	movs	r0, r6
   230ea:	0039      	movs	r1, r7
   230ec:	f002 fa6a 	bl	255c4 <finite>
   230f0:	2800      	cmp	r0, #0
   230f2:	d0e0      	beq.n	230b6 <pow+0xaa>
   230f4:	0020      	movs	r0, r4
   230f6:	0029      	movs	r1, r5
   230f8:	f002 fa64 	bl	255c4 <finite>
   230fc:	2800      	cmp	r0, #0
   230fe:	d0da      	beq.n	230b6 <pow+0xaa>
   23100:	ab04      	add	r3, sp, #16
   23102:	4698      	mov	r8, r3
   23104:	2304      	movs	r3, #4
   23106:	4642      	mov	r2, r8
   23108:	9304      	str	r3, [sp, #16]
   2310a:	4b8f      	ldr	r3, [pc, #572]	; (23348 <pow+0x33c>)
   2310c:	6114      	str	r4, [r2, #16]
   2310e:	6155      	str	r5, [r2, #20]
   23110:	6053      	str	r3, [r2, #4]
   23112:	2300      	movs	r3, #0
   23114:	2400      	movs	r4, #0
   23116:	6213      	str	r3, [r2, #32]
   23118:	2300      	movs	r3, #0
   2311a:	6193      	str	r3, [r2, #24]
   2311c:	61d4      	str	r4, [r2, #28]
   2311e:	4653      	mov	r3, sl
   23120:	781b      	ldrb	r3, [r3, #0]
   23122:	6096      	str	r6, [r2, #8]
   23124:	60d7      	str	r7, [r2, #12]
   23126:	b25b      	sxtb	r3, r3
   23128:	2b02      	cmp	r3, #2
   2312a:	d004      	beq.n	23136 <pow+0x12a>
   2312c:	4640      	mov	r0, r8
   2312e:	f002 faeb 	bl	25708 <matherr>
   23132:	2800      	cmp	r0, #0
   23134:	d10e      	bne.n	23154 <pow+0x148>
   23136:	f005 fc05 	bl	28944 <__errno>
   2313a:	2322      	movs	r3, #34	; 0x22
   2313c:	6003      	str	r3, [r0, #0]
   2313e:	e009      	b.n	23154 <pow+0x148>
   23140:	4642      	mov	r2, r8
   23142:	2300      	movs	r3, #0
   23144:	2400      	movs	r4, #0
   23146:	6193      	str	r3, [r2, #24]
   23148:	61d4      	str	r4, [r2, #28]
   2314a:	4640      	mov	r0, r8
   2314c:	f002 fadc 	bl	25708 <matherr>
   23150:	2800      	cmp	r0, #0
   23152:	d037      	beq.n	231c4 <pow+0x1b8>
   23154:	4643      	mov	r3, r8
   23156:	6a1b      	ldr	r3, [r3, #32]
   23158:	2b00      	cmp	r3, #0
   2315a:	d004      	beq.n	23166 <pow+0x15a>
   2315c:	f005 fbf2 	bl	28944 <__errno>
   23160:	4643      	mov	r3, r8
   23162:	6a1b      	ldr	r3, [r3, #32]
   23164:	6003      	str	r3, [r0, #0]
   23166:	4643      	mov	r3, r8
   23168:	69dc      	ldr	r4, [r3, #28]
   2316a:	699b      	ldr	r3, [r3, #24]
   2316c:	9300      	str	r3, [sp, #0]
   2316e:	9401      	str	r4, [sp, #4]
   23170:	e7a1      	b.n	230b6 <pow+0xaa>
   23172:	0020      	movs	r0, r4
   23174:	0029      	movs	r1, r5
   23176:	f002 fa25 	bl	255c4 <finite>
   2317a:	2800      	cmp	r0, #0
   2317c:	d09b      	beq.n	230b6 <pow+0xaa>
   2317e:	2200      	movs	r2, #0
   23180:	2300      	movs	r3, #0
   23182:	0020      	movs	r0, r4
   23184:	0029      	movs	r1, r5
   23186:	f002 fd65 	bl	25c54 <__aeabi_dcmplt>
   2318a:	2800      	cmp	r0, #0
   2318c:	d100      	bne.n	23190 <pow+0x184>
   2318e:	e792      	b.n	230b6 <pow+0xaa>
   23190:	ab04      	add	r3, sp, #16
   23192:	4698      	mov	r8, r3
   23194:	2301      	movs	r3, #1
   23196:	4642      	mov	r2, r8
   23198:	9304      	str	r3, [sp, #16]
   2319a:	4b6b      	ldr	r3, [pc, #428]	; (23348 <pow+0x33c>)
   2319c:	6053      	str	r3, [r2, #4]
   2319e:	4643      	mov	r3, r8
   231a0:	465a      	mov	r2, fp
   231a2:	609e      	str	r6, [r3, #8]
   231a4:	60df      	str	r7, [r3, #12]
   231a6:	621a      	str	r2, [r3, #32]
   231a8:	611c      	str	r4, [r3, #16]
   231aa:	615d      	str	r5, [r3, #20]
   231ac:	4653      	mov	r3, sl
   231ae:	781b      	ldrb	r3, [r3, #0]
   231b0:	b25b      	sxtb	r3, r3
   231b2:	2b00      	cmp	r3, #0
   231b4:	d0c4      	beq.n	23140 <pow+0x134>
   231b6:	2000      	movs	r0, #0
   231b8:	4642      	mov	r2, r8
   231ba:	4965      	ldr	r1, [pc, #404]	; (23350 <pow+0x344>)
   231bc:	6190      	str	r0, [r2, #24]
   231be:	61d1      	str	r1, [r2, #28]
   231c0:	2b02      	cmp	r3, #2
   231c2:	d1c2      	bne.n	2314a <pow+0x13e>
   231c4:	f005 fbbe 	bl	28944 <__errno>
   231c8:	2321      	movs	r3, #33	; 0x21
   231ca:	6003      	str	r3, [r0, #0]
   231cc:	e7c2      	b.n	23154 <pow+0x148>
   231ce:	2300      	movs	r3, #0
   231d0:	0020      	movs	r0, r4
   231d2:	0029      	movs	r1, r5
   231d4:	f002 fd38 	bl	25c48 <__aeabi_dcmpeq>
   231d8:	2800      	cmp	r0, #0
   231da:	d100      	bne.n	231de <pow+0x1d2>
   231dc:	e76b      	b.n	230b6 <pow+0xaa>
   231de:	ab04      	add	r3, sp, #16
   231e0:	4698      	mov	r8, r3
   231e2:	2301      	movs	r3, #1
   231e4:	4642      	mov	r2, r8
   231e6:	9304      	str	r3, [sp, #16]
   231e8:	4b57      	ldr	r3, [pc, #348]	; (23348 <pow+0x33c>)
   231ea:	4641      	mov	r1, r8
   231ec:	6053      	str	r3, [r2, #4]
   231ee:	4643      	mov	r3, r8
   231f0:	465a      	mov	r2, fp
   231f2:	621a      	str	r2, [r3, #32]
   231f4:	2200      	movs	r2, #0
   231f6:	609e      	str	r6, [r3, #8]
   231f8:	60df      	str	r7, [r3, #12]
   231fa:	611c      	str	r4, [r3, #16]
   231fc:	615d      	str	r5, [r3, #20]
   231fe:	4b53      	ldr	r3, [pc, #332]	; (2334c <pow+0x340>)
   23200:	618a      	str	r2, [r1, #24]
   23202:	61cb      	str	r3, [r1, #28]
   23204:	9200      	str	r2, [sp, #0]
   23206:	9301      	str	r3, [sp, #4]
   23208:	464b      	mov	r3, r9
   2320a:	2b02      	cmp	r3, #2
   2320c:	d19d      	bne.n	2314a <pow+0x13e>
   2320e:	e752      	b.n	230b6 <pow+0xaa>
   23210:	0030      	movs	r0, r6
   23212:	0039      	movs	r1, r7
   23214:	f002 f9d6 	bl	255c4 <finite>
   23218:	2800      	cmp	r0, #0
   2321a:	d100      	bne.n	2321e <pow+0x212>
   2321c:	e75c      	b.n	230d8 <pow+0xcc>
   2321e:	0020      	movs	r0, r4
   23220:	0029      	movs	r1, r5
   23222:	f002 f9cf 	bl	255c4 <finite>
   23226:	2800      	cmp	r0, #0
   23228:	d100      	bne.n	2322c <pow+0x220>
   2322a:	e755      	b.n	230d8 <pow+0xcc>
   2322c:	9800      	ldr	r0, [sp, #0]
   2322e:	9901      	ldr	r1, [sp, #4]
   23230:	000b      	movs	r3, r1
   23232:	0002      	movs	r2, r0
   23234:	f005 f9dc 	bl	285f0 <__aeabi_dcmpun>
   23238:	ab04      	add	r3, sp, #16
   2323a:	4698      	mov	r8, r3
   2323c:	2800      	cmp	r0, #0
   2323e:	d161      	bne.n	23304 <pow+0x2f8>
   23240:	2303      	movs	r3, #3
   23242:	4642      	mov	r2, r8
   23244:	9304      	str	r3, [sp, #16]
   23246:	4b40      	ldr	r3, [pc, #256]	; (23348 <pow+0x33c>)
   23248:	6210      	str	r0, [r2, #32]
   2324a:	6053      	str	r3, [r2, #4]
   2324c:	4653      	mov	r3, sl
   2324e:	781b      	ldrb	r3, [r3, #0]
   23250:	6096      	str	r6, [r2, #8]
   23252:	60d7      	str	r7, [r2, #12]
   23254:	b25b      	sxtb	r3, r3
   23256:	6114      	str	r4, [r2, #16]
   23258:	6155      	str	r5, [r2, #20]
   2325a:	4699      	mov	r9, r3
   2325c:	2b00      	cmp	r3, #0
   2325e:	d12f      	bne.n	232c0 <pow+0x2b4>
   23260:	22e0      	movs	r2, #224	; 0xe0
   23262:	4641      	mov	r1, r8
   23264:	4b3b      	ldr	r3, [pc, #236]	; (23354 <pow+0x348>)
   23266:	0612      	lsls	r2, r2, #24
   23268:	618a      	str	r2, [r1, #24]
   2326a:	61cb      	str	r3, [r1, #28]
   2326c:	0030      	movs	r0, r6
   2326e:	2200      	movs	r2, #0
   23270:	2300      	movs	r3, #0
   23272:	0039      	movs	r1, r7
   23274:	f002 fcee 	bl	25c54 <__aeabi_dcmplt>
   23278:	2800      	cmp	r0, #0
   2327a:	d100      	bne.n	2327e <pow+0x272>
   2327c:	e756      	b.n	2312c <pow+0x120>
   2327e:	2200      	movs	r2, #0
   23280:	4b35      	ldr	r3, [pc, #212]	; (23358 <pow+0x34c>)
   23282:	0020      	movs	r0, r4
   23284:	0029      	movs	r1, r5
   23286:	f004 fc1d 	bl	27ac4 <__aeabi_dmul>
   2328a:	0004      	movs	r4, r0
   2328c:	000d      	movs	r5, r1
   2328e:	f002 fa43 	bl	25718 <rint>
   23292:	0002      	movs	r2, r0
   23294:	000b      	movs	r3, r1
   23296:	0020      	movs	r0, r4
   23298:	0029      	movs	r1, r5
   2329a:	f002 fcd5 	bl	25c48 <__aeabi_dcmpeq>
   2329e:	2800      	cmp	r0, #0
   232a0:	d105      	bne.n	232ae <pow+0x2a2>
   232a2:	22e0      	movs	r2, #224	; 0xe0
   232a4:	4b2d      	ldr	r3, [pc, #180]	; (2335c <pow+0x350>)
   232a6:	0612      	lsls	r2, r2, #24
   232a8:	4641      	mov	r1, r8
   232aa:	618a      	str	r2, [r1, #24]
   232ac:	61cb      	str	r3, [r1, #28]
   232ae:	4653      	mov	r3, sl
   232b0:	781b      	ldrb	r3, [r3, #0]
   232b2:	b25b      	sxtb	r3, r3
   232b4:	4699      	mov	r9, r3
   232b6:	464b      	mov	r3, r9
   232b8:	2b02      	cmp	r3, #2
   232ba:	d000      	beq.n	232be <pow+0x2b2>
   232bc:	e736      	b.n	2312c <pow+0x120>
   232be:	e73a      	b.n	23136 <pow+0x12a>
   232c0:	2200      	movs	r2, #0
   232c2:	4641      	mov	r1, r8
   232c4:	4b26      	ldr	r3, [pc, #152]	; (23360 <pow+0x354>)
   232c6:	0030      	movs	r0, r6
   232c8:	618a      	str	r2, [r1, #24]
   232ca:	61cb      	str	r3, [r1, #28]
   232cc:	2200      	movs	r2, #0
   232ce:	2300      	movs	r3, #0
   232d0:	0039      	movs	r1, r7
   232d2:	f002 fcbf 	bl	25c54 <__aeabi_dcmplt>
   232d6:	2800      	cmp	r0, #0
   232d8:	d0ed      	beq.n	232b6 <pow+0x2aa>
   232da:	2200      	movs	r2, #0
   232dc:	4b1e      	ldr	r3, [pc, #120]	; (23358 <pow+0x34c>)
   232de:	0020      	movs	r0, r4
   232e0:	0029      	movs	r1, r5
   232e2:	f004 fbef 	bl	27ac4 <__aeabi_dmul>
   232e6:	0004      	movs	r4, r0
   232e8:	000d      	movs	r5, r1
   232ea:	f002 fa15 	bl	25718 <rint>
   232ee:	0002      	movs	r2, r0
   232f0:	000b      	movs	r3, r1
   232f2:	0020      	movs	r0, r4
   232f4:	0029      	movs	r1, r5
   232f6:	f002 fca7 	bl	25c48 <__aeabi_dcmpeq>
   232fa:	2800      	cmp	r0, #0
   232fc:	d1d7      	bne.n	232ae <pow+0x2a2>
   232fe:	2200      	movs	r2, #0
   23300:	4b13      	ldr	r3, [pc, #76]	; (23350 <pow+0x344>)
   23302:	e7d1      	b.n	232a8 <pow+0x29c>
   23304:	2301      	movs	r3, #1
   23306:	4642      	mov	r2, r8
   23308:	9304      	str	r3, [sp, #16]
   2330a:	4b0f      	ldr	r3, [pc, #60]	; (23348 <pow+0x33c>)
   2330c:	6053      	str	r3, [r2, #4]
   2330e:	4643      	mov	r3, r8
   23310:	464a      	mov	r2, r9
   23312:	611c      	str	r4, [r3, #16]
   23314:	615d      	str	r5, [r3, #20]
   23316:	621a      	str	r2, [r3, #32]
   23318:	609e      	str	r6, [r3, #8]
   2331a:	60df      	str	r7, [r3, #12]
   2331c:	2400      	movs	r4, #0
   2331e:	4653      	mov	r3, sl
   23320:	571c      	ldrsb	r4, [r3, r4]
   23322:	2c00      	cmp	r4, #0
   23324:	d100      	bne.n	23328 <pow+0x31c>
   23326:	e70b      	b.n	23140 <pow+0x134>
   23328:	2300      	movs	r3, #0
   2332a:	2200      	movs	r2, #0
   2332c:	0019      	movs	r1, r3
   2332e:	0010      	movs	r0, r2
   23330:	f003 ff94 	bl	2725c <__aeabi_ddiv>
   23334:	4643      	mov	r3, r8
   23336:	6198      	str	r0, [r3, #24]
   23338:	61d9      	str	r1, [r3, #28]
   2333a:	2c02      	cmp	r4, #2
   2333c:	d100      	bne.n	23340 <pow+0x334>
   2333e:	e741      	b.n	231c4 <pow+0x1b8>
   23340:	e703      	b.n	2314a <pow+0x13e>
   23342:	46c0      	nop			; (mov r8, r8)
   23344:	200001dc 	.word	0x200001dc
   23348:	0002f7e4 	.word	0x0002f7e4
   2334c:	3ff00000 	.word	0x3ff00000
   23350:	fff00000 	.word	0xfff00000
   23354:	47efffff 	.word	0x47efffff
   23358:	3fe00000 	.word	0x3fe00000
   2335c:	c7efffff 	.word	0xc7efffff
   23360:	7ff00000 	.word	0x7ff00000

00023364 <sqrt>:
   23364:	b5f0      	push	{r4, r5, r6, r7, lr}
   23366:	4647      	mov	r7, r8
   23368:	46ce      	mov	lr, r9
   2336a:	b580      	push	{r7, lr}
   2336c:	b08d      	sub	sp, #52	; 0x34
   2336e:	0004      	movs	r4, r0
   23370:	000d      	movs	r5, r1
   23372:	f001 f861 	bl	24438 <__ieee754_sqrt>
   23376:	4b29      	ldr	r3, [pc, #164]	; (2341c <sqrt+0xb8>)
   23378:	0006      	movs	r6, r0
   2337a:	781b      	ldrb	r3, [r3, #0]
   2337c:	000f      	movs	r7, r1
   2337e:	b25b      	sxtb	r3, r3
   23380:	4698      	mov	r8, r3
   23382:	3301      	adds	r3, #1
   23384:	d010      	beq.n	233a8 <sqrt+0x44>
   23386:	0022      	movs	r2, r4
   23388:	002b      	movs	r3, r5
   2338a:	0020      	movs	r0, r4
   2338c:	0029      	movs	r1, r5
   2338e:	f005 f92f 	bl	285f0 <__aeabi_dcmpun>
   23392:	4681      	mov	r9, r0
   23394:	2800      	cmp	r0, #0
   23396:	d107      	bne.n	233a8 <sqrt+0x44>
   23398:	2200      	movs	r2, #0
   2339a:	2300      	movs	r3, #0
   2339c:	0020      	movs	r0, r4
   2339e:	0029      	movs	r1, r5
   233a0:	f002 fc58 	bl	25c54 <__aeabi_dcmplt>
   233a4:	2800      	cmp	r0, #0
   233a6:	d106      	bne.n	233b6 <sqrt+0x52>
   233a8:	0030      	movs	r0, r6
   233aa:	0039      	movs	r1, r7
   233ac:	b00d      	add	sp, #52	; 0x34
   233ae:	bc0c      	pop	{r2, r3}
   233b0:	4690      	mov	r8, r2
   233b2:	4699      	mov	r9, r3
   233b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   233b6:	2301      	movs	r3, #1
   233b8:	9302      	str	r3, [sp, #8]
   233ba:	4b19      	ldr	r3, [pc, #100]	; (23420 <sqrt+0xbc>)
   233bc:	9406      	str	r4, [sp, #24]
   233be:	9507      	str	r5, [sp, #28]
   233c0:	9303      	str	r3, [sp, #12]
   233c2:	464b      	mov	r3, r9
   233c4:	930a      	str	r3, [sp, #40]	; 0x28
   233c6:	4643      	mov	r3, r8
   233c8:	9404      	str	r4, [sp, #16]
   233ca:	9505      	str	r5, [sp, #20]
   233cc:	2b00      	cmp	r3, #0
   233ce:	d015      	beq.n	233fc <sqrt+0x98>
   233d0:	2300      	movs	r3, #0
   233d2:	2200      	movs	r2, #0
   233d4:	0019      	movs	r1, r3
   233d6:	0010      	movs	r0, r2
   233d8:	f003 ff40 	bl	2725c <__aeabi_ddiv>
   233dc:	4643      	mov	r3, r8
   233de:	9008      	str	r0, [sp, #32]
   233e0:	9109      	str	r1, [sp, #36]	; 0x24
   233e2:	2b02      	cmp	r3, #2
   233e4:	d10e      	bne.n	23404 <sqrt+0xa0>
   233e6:	f005 faad 	bl	28944 <__errno>
   233ea:	2321      	movs	r3, #33	; 0x21
   233ec:	6003      	str	r3, [r0, #0]
   233ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   233f0:	9301      	str	r3, [sp, #4]
   233f2:	2b00      	cmp	r3, #0
   233f4:	d10c      	bne.n	23410 <sqrt+0xac>
   233f6:	9e08      	ldr	r6, [sp, #32]
   233f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   233fa:	e7d5      	b.n	233a8 <sqrt+0x44>
   233fc:	2300      	movs	r3, #0
   233fe:	2400      	movs	r4, #0
   23400:	9308      	str	r3, [sp, #32]
   23402:	9409      	str	r4, [sp, #36]	; 0x24
   23404:	a802      	add	r0, sp, #8
   23406:	f002 f97f 	bl	25708 <matherr>
   2340a:	2800      	cmp	r0, #0
   2340c:	d1ef      	bne.n	233ee <sqrt+0x8a>
   2340e:	e7ea      	b.n	233e6 <sqrt+0x82>
   23410:	f005 fa98 	bl	28944 <__errno>
   23414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23416:	9301      	str	r3, [sp, #4]
   23418:	6003      	str	r3, [r0, #0]
   2341a:	e7ec      	b.n	233f6 <sqrt+0x92>
   2341c:	200001dc 	.word	0x200001dc
   23420:	0002f7e8 	.word	0x0002f7e8

00023424 <__ieee754_atan2>:
   23424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23426:	0015      	movs	r5, r2
   23428:	4647      	mov	r7, r8
   2342a:	46ce      	mov	lr, r9
   2342c:	005a      	lsls	r2, r3, #1
   2342e:	001c      	movs	r4, r3
   23430:	426b      	negs	r3, r5
   23432:	b580      	push	{r7, lr}
   23434:	432b      	orrs	r3, r5
   23436:	4f4b      	ldr	r7, [pc, #300]	; (23564 <__ieee754_atan2+0x140>)
   23438:	0852      	lsrs	r2, r2, #1
   2343a:	0fdb      	lsrs	r3, r3, #31
   2343c:	4688      	mov	r8, r1
   2343e:	4313      	orrs	r3, r2
   23440:	42bb      	cmp	r3, r7
   23442:	d83a      	bhi.n	234ba <__ieee754_atan2+0x96>
   23444:	004b      	lsls	r3, r1, #1
   23446:	085b      	lsrs	r3, r3, #1
   23448:	4699      	mov	r9, r3
   2344a:	464e      	mov	r6, r9
   2344c:	4243      	negs	r3, r0
   2344e:	4303      	orrs	r3, r0
   23450:	0fdb      	lsrs	r3, r3, #31
   23452:	4333      	orrs	r3, r6
   23454:	42bb      	cmp	r3, r7
   23456:	d830      	bhi.n	234ba <__ieee754_atan2+0x96>
   23458:	4b43      	ldr	r3, [pc, #268]	; (23568 <__ieee754_atan2+0x144>)
   2345a:	18e3      	adds	r3, r4, r3
   2345c:	432b      	orrs	r3, r5
   2345e:	d043      	beq.n	234e8 <__ieee754_atan2+0xc4>
   23460:	2602      	movs	r6, #2
   23462:	17a3      	asrs	r3, r4, #30
   23464:	401e      	ands	r6, r3
   23466:	0fcb      	lsrs	r3, r1, #31
   23468:	431e      	orrs	r6, r3
   2346a:	464b      	mov	r3, r9
   2346c:	4303      	orrs	r3, r0
   2346e:	d02e      	beq.n	234ce <__ieee754_atan2+0xaa>
   23470:	0013      	movs	r3, r2
   23472:	432b      	orrs	r3, r5
   23474:	d032      	beq.n	234dc <__ieee754_atan2+0xb8>
   23476:	42ba      	cmp	r2, r7
   23478:	d041      	beq.n	234fe <__ieee754_atan2+0xda>
   2347a:	45b9      	cmp	r9, r7
   2347c:	d02e      	beq.n	234dc <__ieee754_atan2+0xb8>
   2347e:	464b      	mov	r3, r9
   23480:	1a9a      	subs	r2, r3, r2
   23482:	1512      	asrs	r2, r2, #20
   23484:	2a3c      	cmp	r2, #60	; 0x3c
   23486:	dc32      	bgt.n	234ee <__ieee754_atan2+0xca>
   23488:	2c00      	cmp	r4, #0
   2348a:	db55      	blt.n	23538 <__ieee754_atan2+0x114>
   2348c:	002a      	movs	r2, r5
   2348e:	0023      	movs	r3, r4
   23490:	f003 fee4 	bl	2725c <__aeabi_ddiv>
   23494:	f002 f892 	bl	255bc <fabs>
   23498:	f001 fef4 	bl	25284 <atan>
   2349c:	2e01      	cmp	r6, #1
   2349e:	d046      	beq.n	2352e <__ieee754_atan2+0x10a>
   234a0:	2e02      	cmp	r6, #2
   234a2:	d039      	beq.n	23518 <__ieee754_atan2+0xf4>
   234a4:	2e00      	cmp	r6, #0
   234a6:	d00e      	beq.n	234c6 <__ieee754_atan2+0xa2>
   234a8:	4a30      	ldr	r2, [pc, #192]	; (2356c <__ieee754_atan2+0x148>)
   234aa:	4b31      	ldr	r3, [pc, #196]	; (23570 <__ieee754_atan2+0x14c>)
   234ac:	f004 fd8a 	bl	27fc4 <__aeabi_dsub>
   234b0:	4a30      	ldr	r2, [pc, #192]	; (23574 <__ieee754_atan2+0x150>)
   234b2:	4b31      	ldr	r3, [pc, #196]	; (23578 <__ieee754_atan2+0x154>)
   234b4:	f004 fd86 	bl	27fc4 <__aeabi_dsub>
   234b8:	e005      	b.n	234c6 <__ieee754_atan2+0xa2>
   234ba:	0002      	movs	r2, r0
   234bc:	000b      	movs	r3, r1
   234be:	0028      	movs	r0, r5
   234c0:	0021      	movs	r1, r4
   234c2:	f003 fbbb 	bl	26c3c <__aeabi_dadd>
   234c6:	bc0c      	pop	{r2, r3}
   234c8:	4690      	mov	r8, r2
   234ca:	4699      	mov	r9, r3
   234cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   234ce:	2e02      	cmp	r6, #2
   234d0:	d010      	beq.n	234f4 <__ieee754_atan2+0xd0>
   234d2:	2e03      	cmp	r6, #3
   234d4:	d1f7      	bne.n	234c6 <__ieee754_atan2+0xa2>
   234d6:	4827      	ldr	r0, [pc, #156]	; (23574 <__ieee754_atan2+0x150>)
   234d8:	4928      	ldr	r1, [pc, #160]	; (2357c <__ieee754_atan2+0x158>)
   234da:	e7f4      	b.n	234c6 <__ieee754_atan2+0xa2>
   234dc:	4643      	mov	r3, r8
   234de:	4825      	ldr	r0, [pc, #148]	; (23574 <__ieee754_atan2+0x150>)
   234e0:	2b00      	cmp	r3, #0
   234e2:	db0a      	blt.n	234fa <__ieee754_atan2+0xd6>
   234e4:	4926      	ldr	r1, [pc, #152]	; (23580 <__ieee754_atan2+0x15c>)
   234e6:	e7ee      	b.n	234c6 <__ieee754_atan2+0xa2>
   234e8:	f001 fecc 	bl	25284 <atan>
   234ec:	e7eb      	b.n	234c6 <__ieee754_atan2+0xa2>
   234ee:	4821      	ldr	r0, [pc, #132]	; (23574 <__ieee754_atan2+0x150>)
   234f0:	4923      	ldr	r1, [pc, #140]	; (23580 <__ieee754_atan2+0x15c>)
   234f2:	e7d3      	b.n	2349c <__ieee754_atan2+0x78>
   234f4:	481f      	ldr	r0, [pc, #124]	; (23574 <__ieee754_atan2+0x150>)
   234f6:	4920      	ldr	r1, [pc, #128]	; (23578 <__ieee754_atan2+0x154>)
   234f8:	e7e5      	b.n	234c6 <__ieee754_atan2+0xa2>
   234fa:	4922      	ldr	r1, [pc, #136]	; (23584 <__ieee754_atan2+0x160>)
   234fc:	e7e3      	b.n	234c6 <__ieee754_atan2+0xa2>
   234fe:	4591      	cmp	r9, r2
   23500:	d01f      	beq.n	23542 <__ieee754_atan2+0x11e>
   23502:	2e02      	cmp	r6, #2
   23504:	d0f6      	beq.n	234f4 <__ieee754_atan2+0xd0>
   23506:	2e03      	cmp	r6, #3
   23508:	d0e5      	beq.n	234d6 <__ieee754_atan2+0xb2>
   2350a:	2000      	movs	r0, #0
   2350c:	2100      	movs	r1, #0
   2350e:	2e01      	cmp	r6, #1
   23510:	d1d9      	bne.n	234c6 <__ieee754_atan2+0xa2>
   23512:	2180      	movs	r1, #128	; 0x80
   23514:	0609      	lsls	r1, r1, #24
   23516:	e7d6      	b.n	234c6 <__ieee754_atan2+0xa2>
   23518:	4a14      	ldr	r2, [pc, #80]	; (2356c <__ieee754_atan2+0x148>)
   2351a:	4b15      	ldr	r3, [pc, #84]	; (23570 <__ieee754_atan2+0x14c>)
   2351c:	f004 fd52 	bl	27fc4 <__aeabi_dsub>
   23520:	0002      	movs	r2, r0
   23522:	000b      	movs	r3, r1
   23524:	4813      	ldr	r0, [pc, #76]	; (23574 <__ieee754_atan2+0x150>)
   23526:	4914      	ldr	r1, [pc, #80]	; (23578 <__ieee754_atan2+0x154>)
   23528:	f004 fd4c 	bl	27fc4 <__aeabi_dsub>
   2352c:	e7cb      	b.n	234c6 <__ieee754_atan2+0xa2>
   2352e:	2480      	movs	r4, #128	; 0x80
   23530:	0624      	lsls	r4, r4, #24
   23532:	190b      	adds	r3, r1, r4
   23534:	0019      	movs	r1, r3
   23536:	e7c6      	b.n	234c6 <__ieee754_atan2+0xa2>
   23538:	323c      	adds	r2, #60	; 0x3c
   2353a:	daa7      	bge.n	2348c <__ieee754_atan2+0x68>
   2353c:	2000      	movs	r0, #0
   2353e:	2100      	movs	r1, #0
   23540:	e7ac      	b.n	2349c <__ieee754_atan2+0x78>
   23542:	2e02      	cmp	r6, #2
   23544:	d006      	beq.n	23554 <__ieee754_atan2+0x130>
   23546:	2e03      	cmp	r6, #3
   23548:	d009      	beq.n	2355e <__ieee754_atan2+0x13a>
   2354a:	480a      	ldr	r0, [pc, #40]	; (23574 <__ieee754_atan2+0x150>)
   2354c:	2e01      	cmp	r6, #1
   2354e:	d004      	beq.n	2355a <__ieee754_atan2+0x136>
   23550:	490d      	ldr	r1, [pc, #52]	; (23588 <__ieee754_atan2+0x164>)
   23552:	e7b8      	b.n	234c6 <__ieee754_atan2+0xa2>
   23554:	480d      	ldr	r0, [pc, #52]	; (2358c <__ieee754_atan2+0x168>)
   23556:	490e      	ldr	r1, [pc, #56]	; (23590 <__ieee754_atan2+0x16c>)
   23558:	e7b5      	b.n	234c6 <__ieee754_atan2+0xa2>
   2355a:	490e      	ldr	r1, [pc, #56]	; (23594 <__ieee754_atan2+0x170>)
   2355c:	e7b3      	b.n	234c6 <__ieee754_atan2+0xa2>
   2355e:	480b      	ldr	r0, [pc, #44]	; (2358c <__ieee754_atan2+0x168>)
   23560:	490d      	ldr	r1, [pc, #52]	; (23598 <__ieee754_atan2+0x174>)
   23562:	e7b0      	b.n	234c6 <__ieee754_atan2+0xa2>
   23564:	7ff00000 	.word	0x7ff00000
   23568:	c0100000 	.word	0xc0100000
   2356c:	33145c07 	.word	0x33145c07
   23570:	3ca1a626 	.word	0x3ca1a626
   23574:	54442d18 	.word	0x54442d18
   23578:	400921fb 	.word	0x400921fb
   2357c:	c00921fb 	.word	0xc00921fb
   23580:	3ff921fb 	.word	0x3ff921fb
   23584:	bff921fb 	.word	0xbff921fb
   23588:	3fe921fb 	.word	0x3fe921fb
   2358c:	7f3321d2 	.word	0x7f3321d2
   23590:	4002d97c 	.word	0x4002d97c
   23594:	bfe921fb 	.word	0xbfe921fb
   23598:	c002d97c 	.word	0xc002d97c

0002359c <__ieee754_pow>:
   2359c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2359e:	4657      	mov	r7, sl
   235a0:	464e      	mov	r6, r9
   235a2:	4645      	mov	r5, r8
   235a4:	46de      	mov	lr, fp
   235a6:	001c      	movs	r4, r3
   235a8:	0013      	movs	r3, r2
   235aa:	b5e0      	push	{r5, r6, r7, lr}
   235ac:	0065      	lsls	r5, r4, #1
   235ae:	b091      	sub	sp, #68	; 0x44
   235b0:	086d      	lsrs	r5, r5, #1
   235b2:	9300      	str	r3, [sp, #0]
   235b4:	9401      	str	r4, [sp, #4]
   235b6:	0007      	movs	r7, r0
   235b8:	000e      	movs	r6, r1
   235ba:	4680      	mov	r8, r0
   235bc:	4689      	mov	r9, r1
   235be:	46a2      	mov	sl, r4
   235c0:	432b      	orrs	r3, r5
   235c2:	d031      	beq.n	23628 <__ieee754_pow+0x8c>
   235c4:	4b67      	ldr	r3, [pc, #412]	; (23764 <__ieee754_pow+0x1c8>)
   235c6:	0074      	lsls	r4, r6, #1
   235c8:	0864      	lsrs	r4, r4, #1
   235ca:	429c      	cmp	r4, r3
   235cc:	dc27      	bgt.n	2361e <__ieee754_pow+0x82>
   235ce:	d024      	beq.n	2361a <__ieee754_pow+0x7e>
   235d0:	429d      	cmp	r5, r3
   235d2:	dc24      	bgt.n	2361e <__ieee754_pow+0x82>
   235d4:	4b63      	ldr	r3, [pc, #396]	; (23764 <__ieee754_pow+0x1c8>)
   235d6:	429d      	cmp	r5, r3
   235d8:	d100      	bne.n	235dc <__ieee754_pow+0x40>
   235da:	e081      	b.n	236e0 <__ieee754_pow+0x144>
   235dc:	2300      	movs	r3, #0
   235de:	469b      	mov	fp, r3
   235e0:	464b      	mov	r3, r9
   235e2:	2b00      	cmp	r3, #0
   235e4:	da00      	bge.n	235e8 <__ieee754_pow+0x4c>
   235e6:	e07f      	b.n	236e8 <__ieee754_pow+0x14c>
   235e8:	2a00      	cmp	r2, #0
   235ea:	d12c      	bne.n	23646 <__ieee754_pow+0xaa>
   235ec:	4b5d      	ldr	r3, [pc, #372]	; (23764 <__ieee754_pow+0x1c8>)
   235ee:	429d      	cmp	r5, r3
   235f0:	d100      	bne.n	235f4 <__ieee754_pow+0x58>
   235f2:	e097      	b.n	23724 <__ieee754_pow+0x188>
   235f4:	4b5c      	ldr	r3, [pc, #368]	; (23768 <__ieee754_pow+0x1cc>)
   235f6:	429d      	cmp	r5, r3
   235f8:	d066      	beq.n	236c8 <__ieee754_pow+0x12c>
   235fa:	2380      	movs	r3, #128	; 0x80
   235fc:	05db      	lsls	r3, r3, #23
   235fe:	459a      	cmp	sl, r3
   23600:	d100      	bne.n	23604 <__ieee754_pow+0x68>
   23602:	e3b9      	b.n	23d78 <__ieee754_pow+0x7dc>
   23604:	4b59      	ldr	r3, [pc, #356]	; (2376c <__ieee754_pow+0x1d0>)
   23606:	459a      	cmp	sl, r3
   23608:	d11d      	bne.n	23646 <__ieee754_pow+0xaa>
   2360a:	464b      	mov	r3, r9
   2360c:	2b00      	cmp	r3, #0
   2360e:	db1a      	blt.n	23646 <__ieee754_pow+0xaa>
   23610:	0038      	movs	r0, r7
   23612:	0031      	movs	r1, r6
   23614:	f000 ff10 	bl	24438 <__ieee754_sqrt>
   23618:	e008      	b.n	2362c <__ieee754_pow+0x90>
   2361a:	2800      	cmp	r0, #0
   2361c:	d00d      	beq.n	2363a <__ieee754_pow+0x9e>
   2361e:	4b54      	ldr	r3, [pc, #336]	; (23770 <__ieee754_pow+0x1d4>)
   23620:	469c      	mov	ip, r3
   23622:	4464      	add	r4, ip
   23624:	4327      	orrs	r7, r4
   23626:	d10a      	bne.n	2363e <__ieee754_pow+0xa2>
   23628:	2000      	movs	r0, #0
   2362a:	494f      	ldr	r1, [pc, #316]	; (23768 <__ieee754_pow+0x1cc>)
   2362c:	b011      	add	sp, #68	; 0x44
   2362e:	bc3c      	pop	{r2, r3, r4, r5}
   23630:	4690      	mov	r8, r2
   23632:	4699      	mov	r9, r3
   23634:	46a2      	mov	sl, r4
   23636:	46ab      	mov	fp, r5
   23638:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2363a:	42a5      	cmp	r5, r4
   2363c:	ddca      	ble.n	235d4 <__ieee754_pow+0x38>
   2363e:	484d      	ldr	r0, [pc, #308]	; (23774 <__ieee754_pow+0x1d8>)
   23640:	f002 f864 	bl	2570c <nan>
   23644:	e7f2      	b.n	2362c <__ieee754_pow+0x90>
   23646:	0038      	movs	r0, r7
   23648:	0031      	movs	r1, r6
   2364a:	f001 ffb7 	bl	255bc <fabs>
   2364e:	4643      	mov	r3, r8
   23650:	2b00      	cmp	r3, #0
   23652:	d11d      	bne.n	23690 <__ieee754_pow+0xf4>
   23654:	2c00      	cmp	r4, #0
   23656:	d004      	beq.n	23662 <__ieee754_pow+0xc6>
   23658:	4a43      	ldr	r2, [pc, #268]	; (23768 <__ieee754_pow+0x1cc>)
   2365a:	00b3      	lsls	r3, r6, #2
   2365c:	089b      	lsrs	r3, r3, #2
   2365e:	4293      	cmp	r3, r2
   23660:	d116      	bne.n	23690 <__ieee754_pow+0xf4>
   23662:	4653      	mov	r3, sl
   23664:	2b00      	cmp	r3, #0
   23666:	da00      	bge.n	2366a <__ieee754_pow+0xce>
   23668:	e3c5      	b.n	23df6 <__ieee754_pow+0x85a>
   2366a:	464b      	mov	r3, r9
   2366c:	2b00      	cmp	r3, #0
   2366e:	dadd      	bge.n	2362c <__ieee754_pow+0x90>
   23670:	4b3f      	ldr	r3, [pc, #252]	; (23770 <__ieee754_pow+0x1d4>)
   23672:	469c      	mov	ip, r3
   23674:	465b      	mov	r3, fp
   23676:	4464      	add	r4, ip
   23678:	431c      	orrs	r4, r3
   2367a:	d101      	bne.n	23680 <__ieee754_pow+0xe4>
   2367c:	f000 fc53 	bl	23f26 <__ieee754_pow+0x98a>
   23680:	465b      	mov	r3, fp
   23682:	2b01      	cmp	r3, #1
   23684:	d1d2      	bne.n	2362c <__ieee754_pow+0x90>
   23686:	2480      	movs	r4, #128	; 0x80
   23688:	0624      	lsls	r4, r4, #24
   2368a:	190b      	adds	r3, r1, r4
   2368c:	0019      	movs	r1, r3
   2368e:	e7cd      	b.n	2362c <__ieee754_pow+0x90>
   23690:	0ff3      	lsrs	r3, r6, #31
   23692:	3b01      	subs	r3, #1
   23694:	4698      	mov	r8, r3
   23696:	465b      	mov	r3, fp
   23698:	4642      	mov	r2, r8
   2369a:	4313      	orrs	r3, r2
   2369c:	d057      	beq.n	2374e <__ieee754_pow+0x1b2>
   2369e:	4b36      	ldr	r3, [pc, #216]	; (23778 <__ieee754_pow+0x1dc>)
   236a0:	429d      	cmp	r5, r3
   236a2:	dd77      	ble.n	23794 <__ieee754_pow+0x1f8>
   236a4:	4b35      	ldr	r3, [pc, #212]	; (2377c <__ieee754_pow+0x1e0>)
   236a6:	429d      	cmp	r5, r3
   236a8:	dc00      	bgt.n	236ac <__ieee754_pow+0x110>
   236aa:	e3b1      	b.n	23e10 <__ieee754_pow+0x874>
   236ac:	4b34      	ldr	r3, [pc, #208]	; (23780 <__ieee754_pow+0x1e4>)
   236ae:	429c      	cmp	r4, r3
   236b0:	dc00      	bgt.n	236b4 <__ieee754_pow+0x118>
   236b2:	e3a8      	b.n	23e06 <__ieee754_pow+0x86a>
   236b4:	4653      	mov	r3, sl
   236b6:	2b00      	cmp	r3, #0
   236b8:	dd43      	ble.n	23742 <__ieee754_pow+0x1a6>
   236ba:	4a32      	ldr	r2, [pc, #200]	; (23784 <__ieee754_pow+0x1e8>)
   236bc:	4b32      	ldr	r3, [pc, #200]	; (23788 <__ieee754_pow+0x1ec>)
   236be:	0010      	movs	r0, r2
   236c0:	0019      	movs	r1, r3
   236c2:	f004 f9ff 	bl	27ac4 <__aeabi_dmul>
   236c6:	e7b1      	b.n	2362c <__ieee754_pow+0x90>
   236c8:	4653      	mov	r3, sl
   236ca:	0038      	movs	r0, r7
   236cc:	0031      	movs	r1, r6
   236ce:	2b00      	cmp	r3, #0
   236d0:	daac      	bge.n	2362c <__ieee754_pow+0x90>
   236d2:	003a      	movs	r2, r7
   236d4:	0033      	movs	r3, r6
   236d6:	2000      	movs	r0, #0
   236d8:	4923      	ldr	r1, [pc, #140]	; (23768 <__ieee754_pow+0x1cc>)
   236da:	f003 fdbf 	bl	2725c <__aeabi_ddiv>
   236de:	e7a5      	b.n	2362c <__ieee754_pow+0x90>
   236e0:	2a00      	cmp	r2, #0
   236e2:	d100      	bne.n	236e6 <__ieee754_pow+0x14a>
   236e4:	e77a      	b.n	235dc <__ieee754_pow+0x40>
   236e6:	e79a      	b.n	2361e <__ieee754_pow+0x82>
   236e8:	4b28      	ldr	r3, [pc, #160]	; (2378c <__ieee754_pow+0x1f0>)
   236ea:	429d      	cmp	r5, r3
   236ec:	dc2c      	bgt.n	23748 <__ieee754_pow+0x1ac>
   236ee:	4b24      	ldr	r3, [pc, #144]	; (23780 <__ieee754_pow+0x1e4>)
   236f0:	429d      	cmp	r5, r3
   236f2:	dc00      	bgt.n	236f6 <__ieee754_pow+0x15a>
   236f4:	e778      	b.n	235e8 <__ieee754_pow+0x4c>
   236f6:	4926      	ldr	r1, [pc, #152]	; (23790 <__ieee754_pow+0x1f4>)
   236f8:	152b      	asrs	r3, r5, #20
   236fa:	468c      	mov	ip, r1
   236fc:	4463      	add	r3, ip
   236fe:	2b14      	cmp	r3, #20
   23700:	dc01      	bgt.n	23706 <__ieee754_pow+0x16a>
   23702:	f000 fbf3 	bl	23eec <__ieee754_pow+0x950>
   23706:	2134      	movs	r1, #52	; 0x34
   23708:	1acb      	subs	r3, r1, r3
   2370a:	9900      	ldr	r1, [sp, #0]
   2370c:	40d9      	lsrs	r1, r3
   2370e:	0008      	movs	r0, r1
   23710:	4098      	lsls	r0, r3
   23712:	4282      	cmp	r2, r0
   23714:	d000      	beq.n	23718 <__ieee754_pow+0x17c>
   23716:	e767      	b.n	235e8 <__ieee754_pow+0x4c>
   23718:	2301      	movs	r3, #1
   2371a:	4019      	ands	r1, r3
   2371c:	3301      	adds	r3, #1
   2371e:	1a5b      	subs	r3, r3, r1
   23720:	469b      	mov	fp, r3
   23722:	e761      	b.n	235e8 <__ieee754_pow+0x4c>
   23724:	4b12      	ldr	r3, [pc, #72]	; (23770 <__ieee754_pow+0x1d4>)
   23726:	18e3      	adds	r3, r4, r3
   23728:	431f      	orrs	r7, r3
   2372a:	d100      	bne.n	2372e <__ieee754_pow+0x192>
   2372c:	e77c      	b.n	23628 <__ieee754_pow+0x8c>
   2372e:	4b14      	ldr	r3, [pc, #80]	; (23780 <__ieee754_pow+0x1e4>)
   23730:	429c      	cmp	r4, r3
   23732:	dc00      	bgt.n	23736 <__ieee754_pow+0x19a>
   23734:	e327      	b.n	23d86 <__ieee754_pow+0x7ea>
   23736:	9800      	ldr	r0, [sp, #0]
   23738:	9901      	ldr	r1, [sp, #4]
   2373a:	4653      	mov	r3, sl
   2373c:	2b00      	cmp	r3, #0
   2373e:	db00      	blt.n	23742 <__ieee754_pow+0x1a6>
   23740:	e774      	b.n	2362c <__ieee754_pow+0x90>
   23742:	2000      	movs	r0, #0
   23744:	2100      	movs	r1, #0
   23746:	e771      	b.n	2362c <__ieee754_pow+0x90>
   23748:	2302      	movs	r3, #2
   2374a:	469b      	mov	fp, r3
   2374c:	e74c      	b.n	235e8 <__ieee754_pow+0x4c>
   2374e:	003a      	movs	r2, r7
   23750:	0033      	movs	r3, r6
   23752:	0038      	movs	r0, r7
   23754:	0031      	movs	r1, r6
   23756:	f004 fc35 	bl	27fc4 <__aeabi_dsub>
   2375a:	0002      	movs	r2, r0
   2375c:	000b      	movs	r3, r1
   2375e:	f003 fd7d 	bl	2725c <__aeabi_ddiv>
   23762:	e763      	b.n	2362c <__ieee754_pow+0x90>
   23764:	7ff00000 	.word	0x7ff00000
   23768:	3ff00000 	.word	0x3ff00000
   2376c:	3fe00000 	.word	0x3fe00000
   23770:	c0100000 	.word	0xc0100000
   23774:	0002e36c 	.word	0x0002e36c
   23778:	41e00000 	.word	0x41e00000
   2377c:	43f00000 	.word	0x43f00000
   23780:	3fefffff 	.word	0x3fefffff
   23784:	8800759c 	.word	0x8800759c
   23788:	7e37e43c 	.word	0x7e37e43c
   2378c:	433fffff 	.word	0x433fffff
   23790:	fffffc01 	.word	0xfffffc01
   23794:	4be9      	ldr	r3, [pc, #932]	; (23b3c <__ieee754_pow+0x5a0>)
   23796:	2200      	movs	r2, #0
   23798:	429c      	cmp	r4, r3
   2379a:	dc06      	bgt.n	237aa <__ieee754_pow+0x20e>
   2379c:	2200      	movs	r2, #0
   2379e:	4be8      	ldr	r3, [pc, #928]	; (23b40 <__ieee754_pow+0x5a4>)
   237a0:	f004 f990 	bl	27ac4 <__aeabi_dmul>
   237a4:	2235      	movs	r2, #53	; 0x35
   237a6:	000c      	movs	r4, r1
   237a8:	4252      	negs	r2, r2
   237aa:	4de6      	ldr	r5, [pc, #920]	; (23b44 <__ieee754_pow+0x5a8>)
   237ac:	1523      	asrs	r3, r4, #20
   237ae:	46ac      	mov	ip, r5
   237b0:	4463      	add	r3, ip
   237b2:	4699      	mov	r9, r3
   237b4:	0324      	lsls	r4, r4, #12
   237b6:	4de4      	ldr	r5, [pc, #912]	; (23b48 <__ieee754_pow+0x5ac>)
   237b8:	4be4      	ldr	r3, [pc, #912]	; (23b4c <__ieee754_pow+0x5b0>)
   237ba:	0b24      	lsrs	r4, r4, #12
   237bc:	4491      	add	r9, r2
   237be:	4325      	orrs	r5, r4
   237c0:	429c      	cmp	r4, r3
   237c2:	dd09      	ble.n	237d8 <__ieee754_pow+0x23c>
   237c4:	4be2      	ldr	r3, [pc, #904]	; (23b50 <__ieee754_pow+0x5b4>)
   237c6:	429c      	cmp	r4, r3
   237c8:	dc00      	bgt.n	237cc <__ieee754_pow+0x230>
   237ca:	e3b6      	b.n	23f3a <__ieee754_pow+0x99e>
   237cc:	2301      	movs	r3, #1
   237ce:	469c      	mov	ip, r3
   237d0:	4be0      	ldr	r3, [pc, #896]	; (23b54 <__ieee754_pow+0x5b8>)
   237d2:	44e1      	add	r9, ip
   237d4:	469c      	mov	ip, r3
   237d6:	4465      	add	r5, ip
   237d8:	2300      	movs	r3, #0
   237da:	2400      	movs	r4, #0
   237dc:	2200      	movs	r2, #0
   237de:	9308      	str	r3, [sp, #32]
   237e0:	9409      	str	r4, [sp, #36]	; 0x24
   237e2:	930c      	str	r3, [sp, #48]	; 0x30
   237e4:	940d      	str	r4, [sp, #52]	; 0x34
   237e6:	2400      	movs	r4, #0
   237e8:	4bd7      	ldr	r3, [pc, #860]	; (23b48 <__ieee754_pow+0x5ac>)
   237ea:	9206      	str	r2, [sp, #24]
   237ec:	9307      	str	r3, [sp, #28]
   237ee:	9a06      	ldr	r2, [sp, #24]
   237f0:	9b07      	ldr	r3, [sp, #28]
   237f2:	0029      	movs	r1, r5
   237f4:	900a      	str	r0, [sp, #40]	; 0x28
   237f6:	910b      	str	r1, [sp, #44]	; 0x2c
   237f8:	f004 fbe4 	bl	27fc4 <__aeabi_dsub>
   237fc:	9a06      	ldr	r2, [sp, #24]
   237fe:	9b07      	ldr	r3, [sp, #28]
   23800:	0006      	movs	r6, r0
   23802:	000f      	movs	r7, r1
   23804:	980a      	ldr	r0, [sp, #40]	; 0x28
   23806:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23808:	f003 fa18 	bl	26c3c <__aeabi_dadd>
   2380c:	0002      	movs	r2, r0
   2380e:	000b      	movs	r3, r1
   23810:	2000      	movs	r0, #0
   23812:	49cd      	ldr	r1, [pc, #820]	; (23b48 <__ieee754_pow+0x5ac>)
   23814:	f003 fd22 	bl	2725c <__aeabi_ddiv>
   23818:	000a      	movs	r2, r1
   2381a:	0001      	movs	r1, r0
   2381c:	0013      	movs	r3, r2
   2381e:	910e      	str	r1, [sp, #56]	; 0x38
   23820:	920f      	str	r2, [sp, #60]	; 0x3c
   23822:	0002      	movs	r2, r0
   23824:	0039      	movs	r1, r7
   23826:	0030      	movs	r0, r6
   23828:	f004 f94c 	bl	27ac4 <__aeabi_dmul>
   2382c:	000a      	movs	r2, r1
   2382e:	0001      	movs	r1, r0
   23830:	2080      	movs	r0, #128	; 0x80
   23832:	9104      	str	r1, [sp, #16]
   23834:	9205      	str	r2, [sp, #20]
   23836:	0013      	movs	r3, r2
   23838:	2200      	movs	r2, #0
   2383a:	1069      	asrs	r1, r5, #1
   2383c:	2580      	movs	r5, #128	; 0x80
   2383e:	0300      	lsls	r0, r0, #12
   23840:	4684      	mov	ip, r0
   23842:	9202      	str	r2, [sp, #8]
   23844:	9303      	str	r3, [sp, #12]
   23846:	2200      	movs	r2, #0
   23848:	05ad      	lsls	r5, r5, #22
   2384a:	430d      	orrs	r5, r1
   2384c:	4465      	add	r5, ip
   2384e:	192b      	adds	r3, r5, r4
   23850:	9802      	ldr	r0, [sp, #8]
   23852:	9903      	ldr	r1, [sp, #12]
   23854:	0014      	movs	r4, r2
   23856:	001d      	movs	r5, r3
   23858:	f004 f934 	bl	27ac4 <__aeabi_dmul>
   2385c:	0002      	movs	r2, r0
   2385e:	000b      	movs	r3, r1
   23860:	0030      	movs	r0, r6
   23862:	0039      	movs	r1, r7
   23864:	f004 fbae 	bl	27fc4 <__aeabi_dsub>
   23868:	9a06      	ldr	r2, [sp, #24]
   2386a:	9b07      	ldr	r3, [sp, #28]
   2386c:	0006      	movs	r6, r0
   2386e:	000f      	movs	r7, r1
   23870:	0020      	movs	r0, r4
   23872:	0029      	movs	r1, r5
   23874:	f004 fba6 	bl	27fc4 <__aeabi_dsub>
   23878:	0002      	movs	r2, r0
   2387a:	000b      	movs	r3, r1
   2387c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2387e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23880:	f004 fba0 	bl	27fc4 <__aeabi_dsub>
   23884:	9a02      	ldr	r2, [sp, #8]
   23886:	9b03      	ldr	r3, [sp, #12]
   23888:	f004 f91c 	bl	27ac4 <__aeabi_dmul>
   2388c:	0002      	movs	r2, r0
   2388e:	000b      	movs	r3, r1
   23890:	0030      	movs	r0, r6
   23892:	0039      	movs	r1, r7
   23894:	f004 fb96 	bl	27fc4 <__aeabi_dsub>
   23898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2389a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2389c:	f004 f912 	bl	27ac4 <__aeabi_dmul>
   238a0:	9d04      	ldr	r5, [sp, #16]
   238a2:	9e05      	ldr	r6, [sp, #20]
   238a4:	9006      	str	r0, [sp, #24]
   238a6:	9107      	str	r1, [sp, #28]
   238a8:	002a      	movs	r2, r5
   238aa:	0033      	movs	r3, r6
   238ac:	0028      	movs	r0, r5
   238ae:	0031      	movs	r1, r6
   238b0:	f004 f908 	bl	27ac4 <__aeabi_dmul>
   238b4:	0006      	movs	r6, r0
   238b6:	000f      	movs	r7, r1
   238b8:	4aa7      	ldr	r2, [pc, #668]	; (23b58 <__ieee754_pow+0x5bc>)
   238ba:	4ba8      	ldr	r3, [pc, #672]	; (23b5c <__ieee754_pow+0x5c0>)
   238bc:	f004 f902 	bl	27ac4 <__aeabi_dmul>
   238c0:	4aa7      	ldr	r2, [pc, #668]	; (23b60 <__ieee754_pow+0x5c4>)
   238c2:	4ba8      	ldr	r3, [pc, #672]	; (23b64 <__ieee754_pow+0x5c8>)
   238c4:	f003 f9ba 	bl	26c3c <__aeabi_dadd>
   238c8:	0032      	movs	r2, r6
   238ca:	003b      	movs	r3, r7
   238cc:	f004 f8fa 	bl	27ac4 <__aeabi_dmul>
   238d0:	4aa5      	ldr	r2, [pc, #660]	; (23b68 <__ieee754_pow+0x5cc>)
   238d2:	4ba6      	ldr	r3, [pc, #664]	; (23b6c <__ieee754_pow+0x5d0>)
   238d4:	f003 f9b2 	bl	26c3c <__aeabi_dadd>
   238d8:	0032      	movs	r2, r6
   238da:	003b      	movs	r3, r7
   238dc:	f004 f8f2 	bl	27ac4 <__aeabi_dmul>
   238e0:	4aa3      	ldr	r2, [pc, #652]	; (23b70 <__ieee754_pow+0x5d4>)
   238e2:	4ba4      	ldr	r3, [pc, #656]	; (23b74 <__ieee754_pow+0x5d8>)
   238e4:	f003 f9aa 	bl	26c3c <__aeabi_dadd>
   238e8:	0032      	movs	r2, r6
   238ea:	003b      	movs	r3, r7
   238ec:	f004 f8ea 	bl	27ac4 <__aeabi_dmul>
   238f0:	4aa1      	ldr	r2, [pc, #644]	; (23b78 <__ieee754_pow+0x5dc>)
   238f2:	4ba2      	ldr	r3, [pc, #648]	; (23b7c <__ieee754_pow+0x5e0>)
   238f4:	f003 f9a2 	bl	26c3c <__aeabi_dadd>
   238f8:	0032      	movs	r2, r6
   238fa:	003b      	movs	r3, r7
   238fc:	f004 f8e2 	bl	27ac4 <__aeabi_dmul>
   23900:	4a9f      	ldr	r2, [pc, #636]	; (23b80 <__ieee754_pow+0x5e4>)
   23902:	4ba0      	ldr	r3, [pc, #640]	; (23b84 <__ieee754_pow+0x5e8>)
   23904:	f003 f99a 	bl	26c3c <__aeabi_dadd>
   23908:	0032      	movs	r2, r6
   2390a:	0004      	movs	r4, r0
   2390c:	000d      	movs	r5, r1
   2390e:	003b      	movs	r3, r7
   23910:	0030      	movs	r0, r6
   23912:	0039      	movs	r1, r7
   23914:	f004 f8d6 	bl	27ac4 <__aeabi_dmul>
   23918:	0002      	movs	r2, r0
   2391a:	000b      	movs	r3, r1
   2391c:	0020      	movs	r0, r4
   2391e:	0029      	movs	r1, r5
   23920:	f004 f8d0 	bl	27ac4 <__aeabi_dmul>
   23924:	9e02      	ldr	r6, [sp, #8]
   23926:	9f03      	ldr	r7, [sp, #12]
   23928:	0004      	movs	r4, r0
   2392a:	000d      	movs	r5, r1
   2392c:	9804      	ldr	r0, [sp, #16]
   2392e:	9905      	ldr	r1, [sp, #20]
   23930:	0032      	movs	r2, r6
   23932:	003b      	movs	r3, r7
   23934:	f003 f982 	bl	26c3c <__aeabi_dadd>
   23938:	9a06      	ldr	r2, [sp, #24]
   2393a:	9b07      	ldr	r3, [sp, #28]
   2393c:	f004 f8c2 	bl	27ac4 <__aeabi_dmul>
   23940:	0022      	movs	r2, r4
   23942:	002b      	movs	r3, r5
   23944:	f003 f97a 	bl	26c3c <__aeabi_dadd>
   23948:	0032      	movs	r2, r6
   2394a:	900a      	str	r0, [sp, #40]	; 0x28
   2394c:	910b      	str	r1, [sp, #44]	; 0x2c
   2394e:	003b      	movs	r3, r7
   23950:	0030      	movs	r0, r6
   23952:	0039      	movs	r1, r7
   23954:	9602      	str	r6, [sp, #8]
   23956:	9703      	str	r7, [sp, #12]
   23958:	f004 f8b4 	bl	27ac4 <__aeabi_dmul>
   2395c:	2200      	movs	r2, #0
   2395e:	4b8a      	ldr	r3, [pc, #552]	; (23b88 <__ieee754_pow+0x5ec>)
   23960:	0004      	movs	r4, r0
   23962:	000d      	movs	r5, r1
   23964:	f003 f96a 	bl	26c3c <__aeabi_dadd>
   23968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2396a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2396c:	f003 f966 	bl	26c3c <__aeabi_dadd>
   23970:	2600      	movs	r6, #0
   23972:	000f      	movs	r7, r1
   23974:	0032      	movs	r2, r6
   23976:	000b      	movs	r3, r1
   23978:	9802      	ldr	r0, [sp, #8]
   2397a:	9903      	ldr	r1, [sp, #12]
   2397c:	f004 f8a2 	bl	27ac4 <__aeabi_dmul>
   23980:	2200      	movs	r2, #0
   23982:	9002      	str	r0, [sp, #8]
   23984:	9103      	str	r1, [sp, #12]
   23986:	4b80      	ldr	r3, [pc, #512]	; (23b88 <__ieee754_pow+0x5ec>)
   23988:	0030      	movs	r0, r6
   2398a:	0039      	movs	r1, r7
   2398c:	f004 fb1a 	bl	27fc4 <__aeabi_dsub>
   23990:	0022      	movs	r2, r4
   23992:	002b      	movs	r3, r5
   23994:	f004 fb16 	bl	27fc4 <__aeabi_dsub>
   23998:	0002      	movs	r2, r0
   2399a:	000b      	movs	r3, r1
   2399c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2399e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   239a0:	f004 fb10 	bl	27fc4 <__aeabi_dsub>
   239a4:	9a04      	ldr	r2, [sp, #16]
   239a6:	9b05      	ldr	r3, [sp, #20]
   239a8:	f004 f88c 	bl	27ac4 <__aeabi_dmul>
   239ac:	0032      	movs	r2, r6
   239ae:	0004      	movs	r4, r0
   239b0:	000d      	movs	r5, r1
   239b2:	9806      	ldr	r0, [sp, #24]
   239b4:	9907      	ldr	r1, [sp, #28]
   239b6:	003b      	movs	r3, r7
   239b8:	f004 f884 	bl	27ac4 <__aeabi_dmul>
   239bc:	0002      	movs	r2, r0
   239be:	000b      	movs	r3, r1
   239c0:	0020      	movs	r0, r4
   239c2:	0029      	movs	r1, r5
   239c4:	f003 f93a 	bl	26c3c <__aeabi_dadd>
   239c8:	0004      	movs	r4, r0
   239ca:	000d      	movs	r5, r1
   239cc:	0002      	movs	r2, r0
   239ce:	000b      	movs	r3, r1
   239d0:	9802      	ldr	r0, [sp, #8]
   239d2:	9903      	ldr	r1, [sp, #12]
   239d4:	f003 f932 	bl	26c3c <__aeabi_dadd>
   239d8:	2600      	movs	r6, #0
   239da:	22e0      	movs	r2, #224	; 0xe0
   239dc:	4b6b      	ldr	r3, [pc, #428]	; (23b8c <__ieee754_pow+0x5f0>)
   239de:	0612      	lsls	r2, r2, #24
   239e0:	0030      	movs	r0, r6
   239e2:	000f      	movs	r7, r1
   239e4:	f004 f86e 	bl	27ac4 <__aeabi_dmul>
   239e8:	9a02      	ldr	r2, [sp, #8]
   239ea:	9b03      	ldr	r3, [sp, #12]
   239ec:	9004      	str	r0, [sp, #16]
   239ee:	9105      	str	r1, [sp, #20]
   239f0:	0030      	movs	r0, r6
   239f2:	0039      	movs	r1, r7
   239f4:	f004 fae6 	bl	27fc4 <__aeabi_dsub>
   239f8:	0002      	movs	r2, r0
   239fa:	000b      	movs	r3, r1
   239fc:	0020      	movs	r0, r4
   239fe:	0029      	movs	r1, r5
   23a00:	f004 fae0 	bl	27fc4 <__aeabi_dsub>
   23a04:	4a62      	ldr	r2, [pc, #392]	; (23b90 <__ieee754_pow+0x5f4>)
   23a06:	4b61      	ldr	r3, [pc, #388]	; (23b8c <__ieee754_pow+0x5f0>)
   23a08:	f004 f85c 	bl	27ac4 <__aeabi_dmul>
   23a0c:	4a61      	ldr	r2, [pc, #388]	; (23b94 <__ieee754_pow+0x5f8>)
   23a0e:	0004      	movs	r4, r0
   23a10:	000d      	movs	r5, r1
   23a12:	4b61      	ldr	r3, [pc, #388]	; (23b98 <__ieee754_pow+0x5fc>)
   23a14:	0030      	movs	r0, r6
   23a16:	0039      	movs	r1, r7
   23a18:	f004 f854 	bl	27ac4 <__aeabi_dmul>
   23a1c:	0002      	movs	r2, r0
   23a1e:	000b      	movs	r3, r1
   23a20:	0020      	movs	r0, r4
   23a22:	0029      	movs	r1, r5
   23a24:	f003 f90a 	bl	26c3c <__aeabi_dadd>
   23a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23a2c:	f003 f906 	bl	26c3c <__aeabi_dadd>
   23a30:	0006      	movs	r6, r0
   23a32:	4648      	mov	r0, r9
   23a34:	000f      	movs	r7, r1
   23a36:	f004 fe2f 	bl	28698 <__aeabi_i2d>
   23a3a:	0004      	movs	r4, r0
   23a3c:	000d      	movs	r5, r1
   23a3e:	9804      	ldr	r0, [sp, #16]
   23a40:	9905      	ldr	r1, [sp, #20]
   23a42:	0032      	movs	r2, r6
   23a44:	003b      	movs	r3, r7
   23a46:	f003 f8f9 	bl	26c3c <__aeabi_dadd>
   23a4a:	9a08      	ldr	r2, [sp, #32]
   23a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23a4e:	f003 f8f5 	bl	26c3c <__aeabi_dadd>
   23a52:	0022      	movs	r2, r4
   23a54:	002b      	movs	r3, r5
   23a56:	f003 f8f1 	bl	26c3c <__aeabi_dadd>
   23a5a:	2000      	movs	r0, #0
   23a5c:	0022      	movs	r2, r4
   23a5e:	002b      	movs	r3, r5
   23a60:	9002      	str	r0, [sp, #8]
   23a62:	9103      	str	r1, [sp, #12]
   23a64:	f004 faae 	bl	27fc4 <__aeabi_dsub>
   23a68:	9a08      	ldr	r2, [sp, #32]
   23a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23a6c:	f004 faaa 	bl	27fc4 <__aeabi_dsub>
   23a70:	9a04      	ldr	r2, [sp, #16]
   23a72:	9b05      	ldr	r3, [sp, #20]
   23a74:	f004 faa6 	bl	27fc4 <__aeabi_dsub>
   23a78:	0002      	movs	r2, r0
   23a7a:	000b      	movs	r3, r1
   23a7c:	0030      	movs	r0, r6
   23a7e:	0039      	movs	r1, r7
   23a80:	f004 faa0 	bl	27fc4 <__aeabi_dsub>
   23a84:	9004      	str	r0, [sp, #16]
   23a86:	9105      	str	r1, [sp, #20]
   23a88:	465b      	mov	r3, fp
   23a8a:	4642      	mov	r2, r8
   23a8c:	3b01      	subs	r3, #1
   23a8e:	4313      	orrs	r3, r2
   23a90:	d100      	bne.n	23a94 <__ieee754_pow+0x4f8>
   23a92:	e1ab      	b.n	23dec <__ieee754_pow+0x850>
   23a94:	2300      	movs	r3, #0
   23a96:	4c2c      	ldr	r4, [pc, #176]	; (23b48 <__ieee754_pow+0x5ac>)
   23a98:	9306      	str	r3, [sp, #24]
   23a9a:	9407      	str	r4, [sp, #28]
   23a9c:	9800      	ldr	r0, [sp, #0]
   23a9e:	9901      	ldr	r1, [sp, #4]
   23aa0:	2600      	movs	r6, #0
   23aa2:	000b      	movs	r3, r1
   23aa4:	0032      	movs	r2, r6
   23aa6:	000f      	movs	r7, r1
   23aa8:	f004 fa8c 	bl	27fc4 <__aeabi_dsub>
   23aac:	9a02      	ldr	r2, [sp, #8]
   23aae:	9b03      	ldr	r3, [sp, #12]
   23ab0:	f004 f808 	bl	27ac4 <__aeabi_dmul>
   23ab4:	9a00      	ldr	r2, [sp, #0]
   23ab6:	9b01      	ldr	r3, [sp, #4]
   23ab8:	0004      	movs	r4, r0
   23aba:	000d      	movs	r5, r1
   23abc:	9804      	ldr	r0, [sp, #16]
   23abe:	9905      	ldr	r1, [sp, #20]
   23ac0:	f004 f800 	bl	27ac4 <__aeabi_dmul>
   23ac4:	0002      	movs	r2, r0
   23ac6:	000b      	movs	r3, r1
   23ac8:	0020      	movs	r0, r4
   23aca:	0029      	movs	r1, r5
   23acc:	f003 f8b6 	bl	26c3c <__aeabi_dadd>
   23ad0:	0004      	movs	r4, r0
   23ad2:	000d      	movs	r5, r1
   23ad4:	9802      	ldr	r0, [sp, #8]
   23ad6:	9903      	ldr	r1, [sp, #12]
   23ad8:	0032      	movs	r2, r6
   23ada:	003b      	movs	r3, r7
   23adc:	9400      	str	r4, [sp, #0]
   23ade:	9501      	str	r5, [sp, #4]
   23ae0:	f003 fff0 	bl	27ac4 <__aeabi_dmul>
   23ae4:	0002      	movs	r2, r0
   23ae6:	000b      	movs	r3, r1
   23ae8:	0006      	movs	r6, r0
   23aea:	000f      	movs	r7, r1
   23aec:	0020      	movs	r0, r4
   23aee:	0029      	movs	r1, r5
   23af0:	f003 f8a4 	bl	26c3c <__aeabi_dadd>
   23af4:	4b29      	ldr	r3, [pc, #164]	; (23b9c <__ieee754_pow+0x600>)
   23af6:	0004      	movs	r4, r0
   23af8:	000d      	movs	r5, r1
   23afa:	0002      	movs	r2, r0
   23afc:	468b      	mov	fp, r1
   23afe:	4299      	cmp	r1, r3
   23b00:	dc00      	bgt.n	23b04 <__ieee754_pow+0x568>
   23b02:	e14f      	b.n	23da4 <__ieee754_pow+0x808>
   23b04:	4b26      	ldr	r3, [pc, #152]	; (23ba0 <__ieee754_pow+0x604>)
   23b06:	18cb      	adds	r3, r1, r3
   23b08:	4303      	orrs	r3, r0
   23b0a:	d000      	beq.n	23b0e <__ieee754_pow+0x572>
   23b0c:	e1e2      	b.n	23ed4 <__ieee754_pow+0x938>
   23b0e:	9800      	ldr	r0, [sp, #0]
   23b10:	9901      	ldr	r1, [sp, #4]
   23b12:	4a24      	ldr	r2, [pc, #144]	; (23ba4 <__ieee754_pow+0x608>)
   23b14:	4b24      	ldr	r3, [pc, #144]	; (23ba8 <__ieee754_pow+0x60c>)
   23b16:	f003 f891 	bl	26c3c <__aeabi_dadd>
   23b1a:	0032      	movs	r2, r6
   23b1c:	9002      	str	r0, [sp, #8]
   23b1e:	9103      	str	r1, [sp, #12]
   23b20:	003b      	movs	r3, r7
   23b22:	0020      	movs	r0, r4
   23b24:	0029      	movs	r1, r5
   23b26:	f004 fa4d 	bl	27fc4 <__aeabi_dsub>
   23b2a:	0002      	movs	r2, r0
   23b2c:	000b      	movs	r3, r1
   23b2e:	9802      	ldr	r0, [sp, #8]
   23b30:	9903      	ldr	r1, [sp, #12]
   23b32:	f002 f8a3 	bl	25c7c <__aeabi_dcmpgt>
   23b36:	46aa      	mov	sl, r5
   23b38:	e038      	b.n	23bac <__ieee754_pow+0x610>
   23b3a:	46c0      	nop			; (mov r8, r8)
   23b3c:	000fffff 	.word	0x000fffff
   23b40:	43400000 	.word	0x43400000
   23b44:	fffffc01 	.word	0xfffffc01
   23b48:	3ff00000 	.word	0x3ff00000
   23b4c:	0003988e 	.word	0x0003988e
   23b50:	000bb679 	.word	0x000bb679
   23b54:	fff00000 	.word	0xfff00000
   23b58:	4a454eef 	.word	0x4a454eef
   23b5c:	3fca7e28 	.word	0x3fca7e28
   23b60:	93c9db65 	.word	0x93c9db65
   23b64:	3fcd864a 	.word	0x3fcd864a
   23b68:	a91d4101 	.word	0xa91d4101
   23b6c:	3fd17460 	.word	0x3fd17460
   23b70:	518f264d 	.word	0x518f264d
   23b74:	3fd55555 	.word	0x3fd55555
   23b78:	db6fabff 	.word	0xdb6fabff
   23b7c:	3fdb6db6 	.word	0x3fdb6db6
   23b80:	33333303 	.word	0x33333303
   23b84:	3fe33333 	.word	0x3fe33333
   23b88:	40080000 	.word	0x40080000
   23b8c:	3feec709 	.word	0x3feec709
   23b90:	dc3a03fd 	.word	0xdc3a03fd
   23b94:	145b01f5 	.word	0x145b01f5
   23b98:	be3e2fe0 	.word	0xbe3e2fe0
   23b9c:	408fffff 	.word	0x408fffff
   23ba0:	bf700000 	.word	0xbf700000
   23ba4:	652b82fe 	.word	0x652b82fe
   23ba8:	3c971547 	.word	0x3c971547
   23bac:	2800      	cmp	r0, #0
   23bae:	d000      	beq.n	23bb2 <__ieee754_pow+0x616>
   23bb0:	e190      	b.n	23ed4 <__ieee754_pow+0x938>
   23bb2:	4aec      	ldr	r2, [pc, #944]	; (23f64 <__ieee754_pow+0x9c8>)
   23bb4:	4653      	mov	r3, sl
   23bb6:	4694      	mov	ip, r2
   23bb8:	2280      	movs	r2, #128	; 0x80
   23bba:	0352      	lsls	r2, r2, #13
   23bbc:	0011      	movs	r1, r2
   23bbe:	151b      	asrs	r3, r3, #20
   23bc0:	4463      	add	r3, ip
   23bc2:	4119      	asrs	r1, r3
   23bc4:	000b      	movs	r3, r1
   23bc6:	4690      	mov	r8, r2
   23bc8:	4ae7      	ldr	r2, [pc, #924]	; (23f68 <__ieee754_pow+0x9cc>)
   23bca:	445b      	add	r3, fp
   23bcc:	4694      	mov	ip, r2
   23bce:	005c      	lsls	r4, r3, #1
   23bd0:	0d64      	lsrs	r4, r4, #21
   23bd2:	4de6      	ldr	r5, [pc, #920]	; (23f6c <__ieee754_pow+0x9d0>)
   23bd4:	4464      	add	r4, ip
   23bd6:	4125      	asrs	r5, r4
   23bd8:	001a      	movs	r2, r3
   23bda:	43aa      	bics	r2, r5
   23bdc:	0011      	movs	r1, r2
   23bde:	4642      	mov	r2, r8
   23be0:	031b      	lsls	r3, r3, #12
   23be2:	0b1b      	lsrs	r3, r3, #12
   23be4:	4313      	orrs	r3, r2
   23be6:	2214      	movs	r2, #20
   23be8:	1b14      	subs	r4, r2, r4
   23bea:	4123      	asrs	r3, r4
   23bec:	4699      	mov	r9, r3
   23bee:	465b      	mov	r3, fp
   23bf0:	2000      	movs	r0, #0
   23bf2:	2b00      	cmp	r3, #0
   23bf4:	da00      	bge.n	23bf8 <__ieee754_pow+0x65c>
   23bf6:	e1b0      	b.n	23f5a <__ieee754_pow+0x9be>
   23bf8:	0002      	movs	r2, r0
   23bfa:	000b      	movs	r3, r1
   23bfc:	0030      	movs	r0, r6
   23bfe:	0039      	movs	r1, r7
   23c00:	f004 f9e0 	bl	27fc4 <__aeabi_dsub>
   23c04:	000b      	movs	r3, r1
   23c06:	0002      	movs	r2, r0
   23c08:	0006      	movs	r6, r0
   23c0a:	000f      	movs	r7, r1
   23c0c:	9800      	ldr	r0, [sp, #0]
   23c0e:	9901      	ldr	r1, [sp, #4]
   23c10:	f003 f814 	bl	26c3c <__aeabi_dadd>
   23c14:	464b      	mov	r3, r9
   23c16:	051b      	lsls	r3, r3, #20
   23c18:	000d      	movs	r5, r1
   23c1a:	4698      	mov	r8, r3
   23c1c:	2400      	movs	r4, #0
   23c1e:	2200      	movs	r2, #0
   23c20:	4bd3      	ldr	r3, [pc, #844]	; (23f70 <__ieee754_pow+0x9d4>)
   23c22:	0020      	movs	r0, r4
   23c24:	0029      	movs	r1, r5
   23c26:	f003 ff4d 	bl	27ac4 <__aeabi_dmul>
   23c2a:	0032      	movs	r2, r6
   23c2c:	9002      	str	r0, [sp, #8]
   23c2e:	9103      	str	r1, [sp, #12]
   23c30:	003b      	movs	r3, r7
   23c32:	0020      	movs	r0, r4
   23c34:	0029      	movs	r1, r5
   23c36:	f004 f9c5 	bl	27fc4 <__aeabi_dsub>
   23c3a:	0002      	movs	r2, r0
   23c3c:	000b      	movs	r3, r1
   23c3e:	9800      	ldr	r0, [sp, #0]
   23c40:	9901      	ldr	r1, [sp, #4]
   23c42:	f004 f9bf 	bl	27fc4 <__aeabi_dsub>
   23c46:	4acb      	ldr	r2, [pc, #812]	; (23f74 <__ieee754_pow+0x9d8>)
   23c48:	4bcb      	ldr	r3, [pc, #812]	; (23f78 <__ieee754_pow+0x9dc>)
   23c4a:	f003 ff3b 	bl	27ac4 <__aeabi_dmul>
   23c4e:	4acb      	ldr	r2, [pc, #812]	; (23f7c <__ieee754_pow+0x9e0>)
   23c50:	0006      	movs	r6, r0
   23c52:	000f      	movs	r7, r1
   23c54:	4bca      	ldr	r3, [pc, #808]	; (23f80 <__ieee754_pow+0x9e4>)
   23c56:	0020      	movs	r0, r4
   23c58:	0029      	movs	r1, r5
   23c5a:	f003 ff33 	bl	27ac4 <__aeabi_dmul>
   23c5e:	0002      	movs	r2, r0
   23c60:	000b      	movs	r3, r1
   23c62:	0030      	movs	r0, r6
   23c64:	0039      	movs	r1, r7
   23c66:	f002 ffe9 	bl	26c3c <__aeabi_dadd>
   23c6a:	0004      	movs	r4, r0
   23c6c:	000d      	movs	r5, r1
   23c6e:	0002      	movs	r2, r0
   23c70:	000b      	movs	r3, r1
   23c72:	9802      	ldr	r0, [sp, #8]
   23c74:	9903      	ldr	r1, [sp, #12]
   23c76:	f002 ffe1 	bl	26c3c <__aeabi_dadd>
   23c7a:	9a02      	ldr	r2, [sp, #8]
   23c7c:	9b03      	ldr	r3, [sp, #12]
   23c7e:	0006      	movs	r6, r0
   23c80:	000f      	movs	r7, r1
   23c82:	f004 f99f 	bl	27fc4 <__aeabi_dsub>
   23c86:	0002      	movs	r2, r0
   23c88:	000b      	movs	r3, r1
   23c8a:	0020      	movs	r0, r4
   23c8c:	0029      	movs	r1, r5
   23c8e:	f004 f999 	bl	27fc4 <__aeabi_dsub>
   23c92:	0032      	movs	r2, r6
   23c94:	9000      	str	r0, [sp, #0]
   23c96:	9101      	str	r1, [sp, #4]
   23c98:	003b      	movs	r3, r7
   23c9a:	0030      	movs	r0, r6
   23c9c:	0039      	movs	r1, r7
   23c9e:	f003 ff11 	bl	27ac4 <__aeabi_dmul>
   23ca2:	0004      	movs	r4, r0
   23ca4:	000d      	movs	r5, r1
   23ca6:	4ab7      	ldr	r2, [pc, #732]	; (23f84 <__ieee754_pow+0x9e8>)
   23ca8:	4bb7      	ldr	r3, [pc, #732]	; (23f88 <__ieee754_pow+0x9ec>)
   23caa:	f003 ff0b 	bl	27ac4 <__aeabi_dmul>
   23cae:	4ab7      	ldr	r2, [pc, #732]	; (23f8c <__ieee754_pow+0x9f0>)
   23cb0:	4bb7      	ldr	r3, [pc, #732]	; (23f90 <__ieee754_pow+0x9f4>)
   23cb2:	f004 f987 	bl	27fc4 <__aeabi_dsub>
   23cb6:	0022      	movs	r2, r4
   23cb8:	002b      	movs	r3, r5
   23cba:	f003 ff03 	bl	27ac4 <__aeabi_dmul>
   23cbe:	4ab5      	ldr	r2, [pc, #724]	; (23f94 <__ieee754_pow+0x9f8>)
   23cc0:	4bb5      	ldr	r3, [pc, #724]	; (23f98 <__ieee754_pow+0x9fc>)
   23cc2:	f002 ffbb 	bl	26c3c <__aeabi_dadd>
   23cc6:	0022      	movs	r2, r4
   23cc8:	002b      	movs	r3, r5
   23cca:	f003 fefb 	bl	27ac4 <__aeabi_dmul>
   23cce:	4ab3      	ldr	r2, [pc, #716]	; (23f9c <__ieee754_pow+0xa00>)
   23cd0:	4bb3      	ldr	r3, [pc, #716]	; (23fa0 <__ieee754_pow+0xa04>)
   23cd2:	f004 f977 	bl	27fc4 <__aeabi_dsub>
   23cd6:	0022      	movs	r2, r4
   23cd8:	002b      	movs	r3, r5
   23cda:	f003 fef3 	bl	27ac4 <__aeabi_dmul>
   23cde:	4ab1      	ldr	r2, [pc, #708]	; (23fa4 <__ieee754_pow+0xa08>)
   23ce0:	4bb1      	ldr	r3, [pc, #708]	; (23fa8 <__ieee754_pow+0xa0c>)
   23ce2:	f002 ffab 	bl	26c3c <__aeabi_dadd>
   23ce6:	0022      	movs	r2, r4
   23ce8:	002b      	movs	r3, r5
   23cea:	f003 feeb 	bl	27ac4 <__aeabi_dmul>
   23cee:	0002      	movs	r2, r0
   23cf0:	000b      	movs	r3, r1
   23cf2:	0030      	movs	r0, r6
   23cf4:	0039      	movs	r1, r7
   23cf6:	f004 f965 	bl	27fc4 <__aeabi_dsub>
   23cfa:	0004      	movs	r4, r0
   23cfc:	000d      	movs	r5, r1
   23cfe:	0002      	movs	r2, r0
   23d00:	000b      	movs	r3, r1
   23d02:	0030      	movs	r0, r6
   23d04:	0039      	movs	r1, r7
   23d06:	f003 fedd 	bl	27ac4 <__aeabi_dmul>
   23d0a:	2380      	movs	r3, #128	; 0x80
   23d0c:	9002      	str	r0, [sp, #8]
   23d0e:	9103      	str	r1, [sp, #12]
   23d10:	2200      	movs	r2, #0
   23d12:	05db      	lsls	r3, r3, #23
   23d14:	0020      	movs	r0, r4
   23d16:	0029      	movs	r1, r5
   23d18:	f004 f954 	bl	27fc4 <__aeabi_dsub>
   23d1c:	0002      	movs	r2, r0
   23d1e:	000b      	movs	r3, r1
   23d20:	9802      	ldr	r0, [sp, #8]
   23d22:	9903      	ldr	r1, [sp, #12]
   23d24:	f003 fa9a 	bl	2725c <__aeabi_ddiv>
   23d28:	9a00      	ldr	r2, [sp, #0]
   23d2a:	9b01      	ldr	r3, [sp, #4]
   23d2c:	0004      	movs	r4, r0
   23d2e:	000d      	movs	r5, r1
   23d30:	0030      	movs	r0, r6
   23d32:	0039      	movs	r1, r7
   23d34:	f003 fec6 	bl	27ac4 <__aeabi_dmul>
   23d38:	9a00      	ldr	r2, [sp, #0]
   23d3a:	9b01      	ldr	r3, [sp, #4]
   23d3c:	f002 ff7e 	bl	26c3c <__aeabi_dadd>
   23d40:	0002      	movs	r2, r0
   23d42:	000b      	movs	r3, r1
   23d44:	0020      	movs	r0, r4
   23d46:	0029      	movs	r1, r5
   23d48:	f004 f93c 	bl	27fc4 <__aeabi_dsub>
   23d4c:	0032      	movs	r2, r6
   23d4e:	003b      	movs	r3, r7
   23d50:	f004 f938 	bl	27fc4 <__aeabi_dsub>
   23d54:	0002      	movs	r2, r0
   23d56:	000b      	movs	r3, r1
   23d58:	2000      	movs	r0, #0
   23d5a:	4994      	ldr	r1, [pc, #592]	; (23fac <__ieee754_pow+0xa10>)
   23d5c:	f004 f932 	bl	27fc4 <__aeabi_dsub>
   23d60:	4643      	mov	r3, r8
   23d62:	185b      	adds	r3, r3, r1
   23d64:	151a      	asrs	r2, r3, #20
   23d66:	2a00      	cmp	r2, #0
   23d68:	dc00      	bgt.n	23d6c <__ieee754_pow+0x7d0>
   23d6a:	e149      	b.n	24000 <__ieee754_pow+0xa64>
   23d6c:	0019      	movs	r1, r3
   23d6e:	9a06      	ldr	r2, [sp, #24]
   23d70:	9b07      	ldr	r3, [sp, #28]
   23d72:	f003 fea7 	bl	27ac4 <__aeabi_dmul>
   23d76:	e459      	b.n	2362c <__ieee754_pow+0x90>
   23d78:	003a      	movs	r2, r7
   23d7a:	0033      	movs	r3, r6
   23d7c:	0038      	movs	r0, r7
   23d7e:	0031      	movs	r1, r6
   23d80:	f003 fea0 	bl	27ac4 <__aeabi_dmul>
   23d84:	e452      	b.n	2362c <__ieee754_pow+0x90>
   23d86:	4653      	mov	r3, sl
   23d88:	2b00      	cmp	r3, #0
   23d8a:	db00      	blt.n	23d8e <__ieee754_pow+0x7f2>
   23d8c:	e4d9      	b.n	23742 <__ieee754_pow+0x1a6>
   23d8e:	9c00      	ldr	r4, [sp, #0]
   23d90:	9d01      	ldr	r5, [sp, #4]
   23d92:	2280      	movs	r2, #128	; 0x80
   23d94:	0612      	lsls	r2, r2, #24
   23d96:	002b      	movs	r3, r5
   23d98:	4694      	mov	ip, r2
   23d9a:	4463      	add	r3, ip
   23d9c:	0020      	movs	r0, r4
   23d9e:	0019      	movs	r1, r3
   23da0:	f7ff fc44 	bl	2362c <__ieee754_pow+0x90>
   23da4:	004b      	lsls	r3, r1, #1
   23da6:	085b      	lsrs	r3, r3, #1
   23da8:	469a      	mov	sl, r3
   23daa:	4b81      	ldr	r3, [pc, #516]	; (23fb0 <__ieee754_pow+0xa14>)
   23dac:	459a      	cmp	sl, r3
   23dae:	dc00      	bgt.n	23db2 <__ieee754_pow+0x816>
   23db0:	e0b1      	b.n	23f16 <__ieee754_pow+0x97a>
   23db2:	4b80      	ldr	r3, [pc, #512]	; (23fb4 <__ieee754_pow+0xa18>)
   23db4:	445b      	add	r3, fp
   23db6:	431a      	orrs	r2, r3
   23db8:	d10c      	bne.n	23dd4 <__ieee754_pow+0x838>
   23dba:	0032      	movs	r2, r6
   23dbc:	003b      	movs	r3, r7
   23dbe:	f004 f901 	bl	27fc4 <__aeabi_dsub>
   23dc2:	0002      	movs	r2, r0
   23dc4:	000b      	movs	r3, r1
   23dc6:	9800      	ldr	r0, [sp, #0]
   23dc8:	9901      	ldr	r1, [sp, #4]
   23dca:	f001 ff4d 	bl	25c68 <__aeabi_dcmple>
   23dce:	2800      	cmp	r0, #0
   23dd0:	d100      	bne.n	23dd4 <__ieee754_pow+0x838>
   23dd2:	e6ee      	b.n	23bb2 <__ieee754_pow+0x616>
   23dd4:	9806      	ldr	r0, [sp, #24]
   23dd6:	9907      	ldr	r1, [sp, #28]
   23dd8:	4a77      	ldr	r2, [pc, #476]	; (23fb8 <__ieee754_pow+0xa1c>)
   23dda:	4b78      	ldr	r3, [pc, #480]	; (23fbc <__ieee754_pow+0xa20>)
   23ddc:	f003 fe72 	bl	27ac4 <__aeabi_dmul>
   23de0:	4a75      	ldr	r2, [pc, #468]	; (23fb8 <__ieee754_pow+0xa1c>)
   23de2:	4b76      	ldr	r3, [pc, #472]	; (23fbc <__ieee754_pow+0xa20>)
   23de4:	f003 fe6e 	bl	27ac4 <__aeabi_dmul>
   23de8:	f7ff fc20 	bl	2362c <__ieee754_pow+0x90>
   23dec:	2300      	movs	r3, #0
   23dee:	4c74      	ldr	r4, [pc, #464]	; (23fc0 <__ieee754_pow+0xa24>)
   23df0:	9306      	str	r3, [sp, #24]
   23df2:	9407      	str	r4, [sp, #28]
   23df4:	e652      	b.n	23a9c <__ieee754_pow+0x500>
   23df6:	0002      	movs	r2, r0
   23df8:	000b      	movs	r3, r1
   23dfa:	2000      	movs	r0, #0
   23dfc:	496b      	ldr	r1, [pc, #428]	; (23fac <__ieee754_pow+0xa10>)
   23dfe:	f003 fa2d 	bl	2725c <__aeabi_ddiv>
   23e02:	f7ff fc32 	bl	2366a <__ieee754_pow+0xce>
   23e06:	4653      	mov	r3, sl
   23e08:	2b00      	cmp	r3, #0
   23e0a:	db00      	blt.n	23e0e <__ieee754_pow+0x872>
   23e0c:	e499      	b.n	23742 <__ieee754_pow+0x1a6>
   23e0e:	e454      	b.n	236ba <__ieee754_pow+0x11e>
   23e10:	4b6c      	ldr	r3, [pc, #432]	; (23fc4 <__ieee754_pow+0xa28>)
   23e12:	429c      	cmp	r4, r3
   23e14:	ddf7      	ble.n	23e06 <__ieee754_pow+0x86a>
   23e16:	4b65      	ldr	r3, [pc, #404]	; (23fac <__ieee754_pow+0xa10>)
   23e18:	429c      	cmp	r4, r3
   23e1a:	dd00      	ble.n	23e1e <__ieee754_pow+0x882>
   23e1c:	e44a      	b.n	236b4 <__ieee754_pow+0x118>
   23e1e:	2200      	movs	r2, #0
   23e20:	4b62      	ldr	r3, [pc, #392]	; (23fac <__ieee754_pow+0xa10>)
   23e22:	f004 f8cf 	bl	27fc4 <__aeabi_dsub>
   23e26:	22c0      	movs	r2, #192	; 0xc0
   23e28:	4b67      	ldr	r3, [pc, #412]	; (23fc8 <__ieee754_pow+0xa2c>)
   23e2a:	05d2      	lsls	r2, r2, #23
   23e2c:	0004      	movs	r4, r0
   23e2e:	000d      	movs	r5, r1
   23e30:	f003 fe48 	bl	27ac4 <__aeabi_dmul>
   23e34:	4a65      	ldr	r2, [pc, #404]	; (23fcc <__ieee754_pow+0xa30>)
   23e36:	0006      	movs	r6, r0
   23e38:	000f      	movs	r7, r1
   23e3a:	4b65      	ldr	r3, [pc, #404]	; (23fd0 <__ieee754_pow+0xa34>)
   23e3c:	0020      	movs	r0, r4
   23e3e:	0029      	movs	r1, r5
   23e40:	f003 fe40 	bl	27ac4 <__aeabi_dmul>
   23e44:	2200      	movs	r2, #0
   23e46:	9002      	str	r0, [sp, #8]
   23e48:	9103      	str	r1, [sp, #12]
   23e4a:	4b62      	ldr	r3, [pc, #392]	; (23fd4 <__ieee754_pow+0xa38>)
   23e4c:	0020      	movs	r0, r4
   23e4e:	0029      	movs	r1, r5
   23e50:	f003 fe38 	bl	27ac4 <__aeabi_dmul>
   23e54:	0002      	movs	r2, r0
   23e56:	000b      	movs	r3, r1
   23e58:	485f      	ldr	r0, [pc, #380]	; (23fd8 <__ieee754_pow+0xa3c>)
   23e5a:	4960      	ldr	r1, [pc, #384]	; (23fdc <__ieee754_pow+0xa40>)
   23e5c:	f004 f8b2 	bl	27fc4 <__aeabi_dsub>
   23e60:	0022      	movs	r2, r4
   23e62:	002b      	movs	r3, r5
   23e64:	f003 fe2e 	bl	27ac4 <__aeabi_dmul>
   23e68:	0002      	movs	r2, r0
   23e6a:	000b      	movs	r3, r1
   23e6c:	2000      	movs	r0, #0
   23e6e:	495c      	ldr	r1, [pc, #368]	; (23fe0 <__ieee754_pow+0xa44>)
   23e70:	f004 f8a8 	bl	27fc4 <__aeabi_dsub>
   23e74:	0022      	movs	r2, r4
   23e76:	9004      	str	r0, [sp, #16]
   23e78:	9105      	str	r1, [sp, #20]
   23e7a:	002b      	movs	r3, r5
   23e7c:	0020      	movs	r0, r4
   23e7e:	0029      	movs	r1, r5
   23e80:	f003 fe20 	bl	27ac4 <__aeabi_dmul>
   23e84:	0002      	movs	r2, r0
   23e86:	000b      	movs	r3, r1
   23e88:	9804      	ldr	r0, [sp, #16]
   23e8a:	9905      	ldr	r1, [sp, #20]
   23e8c:	f003 fe1a 	bl	27ac4 <__aeabi_dmul>
   23e90:	4a54      	ldr	r2, [pc, #336]	; (23fe4 <__ieee754_pow+0xa48>)
   23e92:	4b4d      	ldr	r3, [pc, #308]	; (23fc8 <__ieee754_pow+0xa2c>)
   23e94:	f003 fe16 	bl	27ac4 <__aeabi_dmul>
   23e98:	0002      	movs	r2, r0
   23e9a:	000b      	movs	r3, r1
   23e9c:	9802      	ldr	r0, [sp, #8]
   23e9e:	9903      	ldr	r1, [sp, #12]
   23ea0:	f004 f890 	bl	27fc4 <__aeabi_dsub>
   23ea4:	0002      	movs	r2, r0
   23ea6:	000b      	movs	r3, r1
   23ea8:	0004      	movs	r4, r0
   23eaa:	000d      	movs	r5, r1
   23eac:	0030      	movs	r0, r6
   23eae:	0039      	movs	r1, r7
   23eb0:	f002 fec4 	bl	26c3c <__aeabi_dadd>
   23eb4:	2000      	movs	r0, #0
   23eb6:	0032      	movs	r2, r6
   23eb8:	003b      	movs	r3, r7
   23eba:	9002      	str	r0, [sp, #8]
   23ebc:	9103      	str	r1, [sp, #12]
   23ebe:	f004 f881 	bl	27fc4 <__aeabi_dsub>
   23ec2:	0002      	movs	r2, r0
   23ec4:	000b      	movs	r3, r1
   23ec6:	0020      	movs	r0, r4
   23ec8:	0029      	movs	r1, r5
   23eca:	f004 f87b 	bl	27fc4 <__aeabi_dsub>
   23ece:	9004      	str	r0, [sp, #16]
   23ed0:	9105      	str	r1, [sp, #20]
   23ed2:	e5d9      	b.n	23a88 <__ieee754_pow+0x4ec>
   23ed4:	4a44      	ldr	r2, [pc, #272]	; (23fe8 <__ieee754_pow+0xa4c>)
   23ed6:	4b45      	ldr	r3, [pc, #276]	; (23fec <__ieee754_pow+0xa50>)
   23ed8:	9806      	ldr	r0, [sp, #24]
   23eda:	9907      	ldr	r1, [sp, #28]
   23edc:	f003 fdf2 	bl	27ac4 <__aeabi_dmul>
   23ee0:	4a41      	ldr	r2, [pc, #260]	; (23fe8 <__ieee754_pow+0xa4c>)
   23ee2:	4b42      	ldr	r3, [pc, #264]	; (23fec <__ieee754_pow+0xa50>)
   23ee4:	f003 fdee 	bl	27ac4 <__aeabi_dmul>
   23ee8:	f7ff fba0 	bl	2362c <__ieee754_pow+0x90>
   23eec:	2a00      	cmp	r2, #0
   23eee:	d001      	beq.n	23ef4 <__ieee754_pow+0x958>
   23ef0:	f7ff fba9 	bl	23646 <__ieee754_pow+0xaa>
   23ef4:	3214      	adds	r2, #20
   23ef6:	1ad3      	subs	r3, r2, r3
   23ef8:	002a      	movs	r2, r5
   23efa:	411a      	asrs	r2, r3
   23efc:	0011      	movs	r1, r2
   23efe:	4099      	lsls	r1, r3
   23f00:	428d      	cmp	r5, r1
   23f02:	d001      	beq.n	23f08 <__ieee754_pow+0x96c>
   23f04:	f7ff fb76 	bl	235f4 <__ieee754_pow+0x58>
   23f08:	2301      	movs	r3, #1
   23f0a:	401a      	ands	r2, r3
   23f0c:	18db      	adds	r3, r3, r3
   23f0e:	1a9b      	subs	r3, r3, r2
   23f10:	469b      	mov	fp, r3
   23f12:	f7ff fb6f 	bl	235f4 <__ieee754_pow+0x58>
   23f16:	2200      	movs	r2, #0
   23f18:	4b31      	ldr	r3, [pc, #196]	; (23fe0 <__ieee754_pow+0xa44>)
   23f1a:	4690      	mov	r8, r2
   23f1c:	4691      	mov	r9, r2
   23f1e:	459a      	cmp	sl, r3
   23f20:	dc00      	bgt.n	23f24 <__ieee754_pow+0x988>
   23f22:	e67b      	b.n	23c1c <__ieee754_pow+0x680>
   23f24:	e645      	b.n	23bb2 <__ieee754_pow+0x616>
   23f26:	0002      	movs	r2, r0
   23f28:	000b      	movs	r3, r1
   23f2a:	f004 f84b 	bl	27fc4 <__aeabi_dsub>
   23f2e:	0002      	movs	r2, r0
   23f30:	000b      	movs	r3, r1
   23f32:	f003 f993 	bl	2725c <__aeabi_ddiv>
   23f36:	f7ff fb79 	bl	2362c <__ieee754_pow+0x90>
   23f3a:	2380      	movs	r3, #128	; 0x80
   23f3c:	4c2c      	ldr	r4, [pc, #176]	; (23ff0 <__ieee754_pow+0xa54>)
   23f3e:	05db      	lsls	r3, r3, #23
   23f40:	9308      	str	r3, [sp, #32]
   23f42:	9409      	str	r4, [sp, #36]	; 0x24
   23f44:	4b2b      	ldr	r3, [pc, #172]	; (23ff4 <__ieee754_pow+0xa58>)
   23f46:	4c2c      	ldr	r4, [pc, #176]	; (23ff8 <__ieee754_pow+0xa5c>)
   23f48:	2200      	movs	r2, #0
   23f4a:	930c      	str	r3, [sp, #48]	; 0x30
   23f4c:	940d      	str	r4, [sp, #52]	; 0x34
   23f4e:	2480      	movs	r4, #128	; 0x80
   23f50:	4b2a      	ldr	r3, [pc, #168]	; (23ffc <__ieee754_pow+0xa60>)
   23f52:	02e4      	lsls	r4, r4, #11
   23f54:	9206      	str	r2, [sp, #24]
   23f56:	9307      	str	r3, [sp, #28]
   23f58:	e449      	b.n	237ee <__ieee754_pow+0x252>
   23f5a:	464b      	mov	r3, r9
   23f5c:	425b      	negs	r3, r3
   23f5e:	4699      	mov	r9, r3
   23f60:	e64a      	b.n	23bf8 <__ieee754_pow+0x65c>
   23f62:	46c0      	nop			; (mov r8, r8)
   23f64:	fffffc02 	.word	0xfffffc02
   23f68:	fffffc01 	.word	0xfffffc01
   23f6c:	000fffff 	.word	0x000fffff
   23f70:	3fe62e43 	.word	0x3fe62e43
   23f74:	fefa39ef 	.word	0xfefa39ef
   23f78:	3fe62e42 	.word	0x3fe62e42
   23f7c:	0ca86c39 	.word	0x0ca86c39
   23f80:	be205c61 	.word	0xbe205c61
   23f84:	72bea4d0 	.word	0x72bea4d0
   23f88:	3e663769 	.word	0x3e663769
   23f8c:	c5d26bf1 	.word	0xc5d26bf1
   23f90:	3ebbbd41 	.word	0x3ebbbd41
   23f94:	af25de2c 	.word	0xaf25de2c
   23f98:	3f11566a 	.word	0x3f11566a
   23f9c:	16bebd93 	.word	0x16bebd93
   23fa0:	3f66c16c 	.word	0x3f66c16c
   23fa4:	5555553e 	.word	0x5555553e
   23fa8:	3fc55555 	.word	0x3fc55555
   23fac:	3ff00000 	.word	0x3ff00000
   23fb0:	4090cbff 	.word	0x4090cbff
   23fb4:	3f6f3400 	.word	0x3f6f3400
   23fb8:	c2f8f359 	.word	0xc2f8f359
   23fbc:	01a56e1f 	.word	0x01a56e1f
   23fc0:	bff00000 	.word	0xbff00000
   23fc4:	3feffffe 	.word	0x3feffffe
   23fc8:	3ff71547 	.word	0x3ff71547
   23fcc:	f85ddf44 	.word	0xf85ddf44
   23fd0:	3e54ae0b 	.word	0x3e54ae0b
   23fd4:	3fd00000 	.word	0x3fd00000
   23fd8:	55555555 	.word	0x55555555
   23fdc:	3fd55555 	.word	0x3fd55555
   23fe0:	3fe00000 	.word	0x3fe00000
   23fe4:	652b82fe 	.word	0x652b82fe
   23fe8:	8800759c 	.word	0x8800759c
   23fec:	7e37e43c 	.word	0x7e37e43c
   23ff0:	3fe2b803 	.word	0x3fe2b803
   23ff4:	43cfd006 	.word	0x43cfd006
   23ff8:	3e4cfdeb 	.word	0x3e4cfdeb
   23ffc:	3ff80000 	.word	0x3ff80000
   24000:	464a      	mov	r2, r9
   24002:	f001 fc2b 	bl	2585c <scalbn>
   24006:	e6b2      	b.n	23d6e <__ieee754_pow+0x7d2>

00024008 <__ieee754_rem_pio2>:
   24008:	b5f0      	push	{r4, r5, r6, r7, lr}
   2400a:	464e      	mov	r6, r9
   2400c:	4645      	mov	r5, r8
   2400e:	46de      	mov	lr, fp
   24010:	4657      	mov	r7, sl
   24012:	b5e0      	push	{r5, r6, r7, lr}
   24014:	4bd4      	ldr	r3, [pc, #848]	; (24368 <__ieee754_rem_pio2+0x360>)
   24016:	004c      	lsls	r4, r1, #1
   24018:	b08f      	sub	sp, #60	; 0x3c
   2401a:	4690      	mov	r8, r2
   2401c:	4689      	mov	r9, r1
   2401e:	0864      	lsrs	r4, r4, #1
   24020:	429c      	cmp	r4, r3
   24022:	dc00      	bgt.n	24026 <__ieee754_rem_pio2+0x1e>
   24024:	e087      	b.n	24136 <__ieee754_rem_pio2+0x12e>
   24026:	4bd1      	ldr	r3, [pc, #836]	; (2436c <__ieee754_rem_pio2+0x364>)
   24028:	429c      	cmp	r4, r3
   2402a:	dc22      	bgt.n	24072 <__ieee754_rem_pio2+0x6a>
   2402c:	4ad0      	ldr	r2, [pc, #832]	; (24370 <__ieee754_rem_pio2+0x368>)
   2402e:	2900      	cmp	r1, #0
   24030:	dc00      	bgt.n	24034 <__ieee754_rem_pio2+0x2c>
   24032:	e1bf      	b.n	243b4 <__ieee754_rem_pio2+0x3ac>
   24034:	4bcf      	ldr	r3, [pc, #828]	; (24374 <__ieee754_rem_pio2+0x36c>)
   24036:	f003 ffc5 	bl	27fc4 <__aeabi_dsub>
   2403a:	4bce      	ldr	r3, [pc, #824]	; (24374 <__ieee754_rem_pio2+0x36c>)
   2403c:	0006      	movs	r6, r0
   2403e:	000f      	movs	r7, r1
   24040:	429c      	cmp	r4, r3
   24042:	d100      	bne.n	24046 <__ieee754_rem_pio2+0x3e>
   24044:	e094      	b.n	24170 <__ieee754_rem_pio2+0x168>
   24046:	4acc      	ldr	r2, [pc, #816]	; (24378 <__ieee754_rem_pio2+0x370>)
   24048:	4bcc      	ldr	r3, [pc, #816]	; (2437c <__ieee754_rem_pio2+0x374>)
   2404a:	f003 ffbb 	bl	27fc4 <__aeabi_dsub>
   2404e:	0002      	movs	r2, r0
   24050:	000b      	movs	r3, r1
   24052:	4641      	mov	r1, r8
   24054:	0030      	movs	r0, r6
   24056:	600a      	str	r2, [r1, #0]
   24058:	604b      	str	r3, [r1, #4]
   2405a:	0039      	movs	r1, r7
   2405c:	f003 ffb2 	bl	27fc4 <__aeabi_dsub>
   24060:	4bc6      	ldr	r3, [pc, #792]	; (2437c <__ieee754_rem_pio2+0x374>)
   24062:	4ac5      	ldr	r2, [pc, #788]	; (24378 <__ieee754_rem_pio2+0x370>)
   24064:	f003 ffae 	bl	27fc4 <__aeabi_dsub>
   24068:	4643      	mov	r3, r8
   2406a:	2501      	movs	r5, #1
   2406c:	6098      	str	r0, [r3, #8]
   2406e:	60d9      	str	r1, [r3, #12]
   24070:	e06b      	b.n	2414a <__ieee754_rem_pio2+0x142>
   24072:	4bc3      	ldr	r3, [pc, #780]	; (24380 <__ieee754_rem_pio2+0x378>)
   24074:	429c      	cmp	r4, r3
   24076:	dc00      	bgt.n	2407a <__ieee754_rem_pio2+0x72>
   24078:	e097      	b.n	241aa <__ieee754_rem_pio2+0x1a2>
   2407a:	4bc2      	ldr	r3, [pc, #776]	; (24384 <__ieee754_rem_pio2+0x37c>)
   2407c:	429c      	cmp	r4, r3
   2407e:	dc6c      	bgt.n	2415a <__ieee754_rem_pio2+0x152>
   24080:	4ac1      	ldr	r2, [pc, #772]	; (24388 <__ieee754_rem_pio2+0x380>)
   24082:	1523      	asrs	r3, r4, #20
   24084:	4692      	mov	sl, r2
   24086:	449a      	add	sl, r3
   24088:	4651      	mov	r1, sl
   2408a:	0509      	lsls	r1, r1, #20
   2408c:	1a63      	subs	r3, r4, r1
   2408e:	0019      	movs	r1, r3
   24090:	001d      	movs	r5, r3
   24092:	0004      	movs	r4, r0
   24094:	f004 facc 	bl	28630 <__aeabi_d2iz>
   24098:	f004 fafe 	bl	28698 <__aeabi_i2d>
   2409c:	0002      	movs	r2, r0
   2409e:	000b      	movs	r3, r1
   240a0:	0020      	movs	r0, r4
   240a2:	0029      	movs	r1, r5
   240a4:	9208      	str	r2, [sp, #32]
   240a6:	9309      	str	r3, [sp, #36]	; 0x24
   240a8:	f003 ff8c 	bl	27fc4 <__aeabi_dsub>
   240ac:	2200      	movs	r2, #0
   240ae:	4bb7      	ldr	r3, [pc, #732]	; (2438c <__ieee754_rem_pio2+0x384>)
   240b0:	f003 fd08 	bl	27ac4 <__aeabi_dmul>
   240b4:	000f      	movs	r7, r1
   240b6:	0006      	movs	r6, r0
   240b8:	f004 faba 	bl	28630 <__aeabi_d2iz>
   240bc:	f004 faec 	bl	28698 <__aeabi_i2d>
   240c0:	0004      	movs	r4, r0
   240c2:	000d      	movs	r5, r1
   240c4:	0002      	movs	r2, r0
   240c6:	000b      	movs	r3, r1
   240c8:	0030      	movs	r0, r6
   240ca:	0039      	movs	r1, r7
   240cc:	940a      	str	r4, [sp, #40]	; 0x28
   240ce:	950b      	str	r5, [sp, #44]	; 0x2c
   240d0:	f003 ff78 	bl	27fc4 <__aeabi_dsub>
   240d4:	2200      	movs	r2, #0
   240d6:	4bad      	ldr	r3, [pc, #692]	; (2438c <__ieee754_rem_pio2+0x384>)
   240d8:	f003 fcf4 	bl	27ac4 <__aeabi_dmul>
   240dc:	2200      	movs	r2, #0
   240de:	2300      	movs	r3, #0
   240e0:	900c      	str	r0, [sp, #48]	; 0x30
   240e2:	910d      	str	r1, [sp, #52]	; 0x34
   240e4:	f001 fdb0 	bl	25c48 <__aeabi_dcmpeq>
   240e8:	2800      	cmp	r0, #0
   240ea:	d100      	bne.n	240ee <__ieee754_rem_pio2+0xe6>
   240ec:	e181      	b.n	243f2 <__ieee754_rem_pio2+0x3ea>
   240ee:	2300      	movs	r3, #0
   240f0:	2200      	movs	r2, #0
   240f2:	0020      	movs	r0, r4
   240f4:	0029      	movs	r1, r5
   240f6:	f001 fda7 	bl	25c48 <__aeabi_dcmpeq>
   240fa:	4243      	negs	r3, r0
   240fc:	4143      	adcs	r3, r0
   240fe:	3301      	adds	r3, #1
   24100:	4aa3      	ldr	r2, [pc, #652]	; (24390 <__ieee754_rem_pio2+0x388>)
   24102:	4641      	mov	r1, r8
   24104:	9201      	str	r2, [sp, #4]
   24106:	2202      	movs	r2, #2
   24108:	a808      	add	r0, sp, #32
   2410a:	9200      	str	r2, [sp, #0]
   2410c:	4652      	mov	r2, sl
   2410e:	f000 fb8d 	bl	2482c <__kernel_rem_pio2>
   24112:	464b      	mov	r3, r9
   24114:	0005      	movs	r5, r0
   24116:	2b00      	cmp	r3, #0
   24118:	da17      	bge.n	2414a <__ieee754_rem_pio2+0x142>
   2411a:	2280      	movs	r2, #128	; 0x80
   2411c:	4643      	mov	r3, r8
   2411e:	0612      	lsls	r2, r2, #24
   24120:	4694      	mov	ip, r2
   24122:	4642      	mov	r2, r8
   24124:	685b      	ldr	r3, [r3, #4]
   24126:	4245      	negs	r5, r0
   24128:	4463      	add	r3, ip
   2412a:	6053      	str	r3, [r2, #4]
   2412c:	68d3      	ldr	r3, [r2, #12]
   2412e:	4642      	mov	r2, r8
   24130:	4463      	add	r3, ip
   24132:	60d3      	str	r3, [r2, #12]
   24134:	e009      	b.n	2414a <__ieee754_rem_pio2+0x142>
   24136:	000b      	movs	r3, r1
   24138:	0002      	movs	r2, r0
   2413a:	4641      	mov	r1, r8
   2413c:	600a      	str	r2, [r1, #0]
   2413e:	604b      	str	r3, [r1, #4]
   24140:	2200      	movs	r2, #0
   24142:	2300      	movs	r3, #0
   24144:	2500      	movs	r5, #0
   24146:	608a      	str	r2, [r1, #8]
   24148:	60cb      	str	r3, [r1, #12]
   2414a:	0028      	movs	r0, r5
   2414c:	b00f      	add	sp, #60	; 0x3c
   2414e:	bc3c      	pop	{r2, r3, r4, r5}
   24150:	4690      	mov	r8, r2
   24152:	4699      	mov	r9, r3
   24154:	46a2      	mov	sl, r4
   24156:	46ab      	mov	fp, r5
   24158:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2415a:	000b      	movs	r3, r1
   2415c:	0002      	movs	r2, r0
   2415e:	f003 ff31 	bl	27fc4 <__aeabi_dsub>
   24162:	4643      	mov	r3, r8
   24164:	2500      	movs	r5, #0
   24166:	6098      	str	r0, [r3, #8]
   24168:	60d9      	str	r1, [r3, #12]
   2416a:	6018      	str	r0, [r3, #0]
   2416c:	6059      	str	r1, [r3, #4]
   2416e:	e7ec      	b.n	2414a <__ieee754_rem_pio2+0x142>
   24170:	22d3      	movs	r2, #211	; 0xd3
   24172:	4b82      	ldr	r3, [pc, #520]	; (2437c <__ieee754_rem_pio2+0x374>)
   24174:	0552      	lsls	r2, r2, #21
   24176:	f003 ff25 	bl	27fc4 <__aeabi_dsub>
   2417a:	4a86      	ldr	r2, [pc, #536]	; (24394 <__ieee754_rem_pio2+0x38c>)
   2417c:	4b86      	ldr	r3, [pc, #536]	; (24398 <__ieee754_rem_pio2+0x390>)
   2417e:	000d      	movs	r5, r1
   24180:	0004      	movs	r4, r0
   24182:	f003 ff1f 	bl	27fc4 <__aeabi_dsub>
   24186:	0002      	movs	r2, r0
   24188:	000b      	movs	r3, r1
   2418a:	4641      	mov	r1, r8
   2418c:	0020      	movs	r0, r4
   2418e:	600a      	str	r2, [r1, #0]
   24190:	604b      	str	r3, [r1, #4]
   24192:	0029      	movs	r1, r5
   24194:	f003 ff16 	bl	27fc4 <__aeabi_dsub>
   24198:	4b7f      	ldr	r3, [pc, #508]	; (24398 <__ieee754_rem_pio2+0x390>)
   2419a:	4a7e      	ldr	r2, [pc, #504]	; (24394 <__ieee754_rem_pio2+0x38c>)
   2419c:	f003 ff12 	bl	27fc4 <__aeabi_dsub>
   241a0:	4643      	mov	r3, r8
   241a2:	2501      	movs	r5, #1
   241a4:	6098      	str	r0, [r3, #8]
   241a6:	60d9      	str	r1, [r3, #12]
   241a8:	e7cf      	b.n	2414a <__ieee754_rem_pio2+0x142>
   241aa:	f001 fa07 	bl	255bc <fabs>
   241ae:	4a7b      	ldr	r2, [pc, #492]	; (2439c <__ieee754_rem_pio2+0x394>)
   241b0:	4b7b      	ldr	r3, [pc, #492]	; (243a0 <__ieee754_rem_pio2+0x398>)
   241b2:	0006      	movs	r6, r0
   241b4:	000f      	movs	r7, r1
   241b6:	f003 fc85 	bl	27ac4 <__aeabi_dmul>
   241ba:	2200      	movs	r2, #0
   241bc:	4b79      	ldr	r3, [pc, #484]	; (243a4 <__ieee754_rem_pio2+0x39c>)
   241be:	f002 fd3d 	bl	26c3c <__aeabi_dadd>
   241c2:	f004 fa35 	bl	28630 <__aeabi_d2iz>
   241c6:	0005      	movs	r5, r0
   241c8:	f004 fa66 	bl	28698 <__aeabi_i2d>
   241cc:	4a68      	ldr	r2, [pc, #416]	; (24370 <__ieee754_rem_pio2+0x368>)
   241ce:	4b69      	ldr	r3, [pc, #420]	; (24374 <__ieee754_rem_pio2+0x36c>)
   241d0:	9004      	str	r0, [sp, #16]
   241d2:	9105      	str	r1, [sp, #20]
   241d4:	f003 fc76 	bl	27ac4 <__aeabi_dmul>
   241d8:	0002      	movs	r2, r0
   241da:	000b      	movs	r3, r1
   241dc:	0030      	movs	r0, r6
   241de:	0039      	movs	r1, r7
   241e0:	f003 fef0 	bl	27fc4 <__aeabi_dsub>
   241e4:	4a64      	ldr	r2, [pc, #400]	; (24378 <__ieee754_rem_pio2+0x370>)
   241e6:	0006      	movs	r6, r0
   241e8:	000f      	movs	r7, r1
   241ea:	9804      	ldr	r0, [sp, #16]
   241ec:	9905      	ldr	r1, [sp, #20]
   241ee:	4b63      	ldr	r3, [pc, #396]	; (2437c <__ieee754_rem_pio2+0x374>)
   241f0:	f003 fc68 	bl	27ac4 <__aeabi_dmul>
   241f4:	9002      	str	r0, [sp, #8]
   241f6:	9103      	str	r1, [sp, #12]
   241f8:	2d1f      	cmp	r5, #31
   241fa:	dc33      	bgt.n	24264 <__ieee754_rem_pio2+0x25c>
   241fc:	1e6b      	subs	r3, r5, #1
   241fe:	4a6a      	ldr	r2, [pc, #424]	; (243a8 <__ieee754_rem_pio2+0x3a0>)
   24200:	009b      	lsls	r3, r3, #2
   24202:	589b      	ldr	r3, [r3, r2]
   24204:	429c      	cmp	r4, r3
   24206:	d02d      	beq.n	24264 <__ieee754_rem_pio2+0x25c>
   24208:	0002      	movs	r2, r0
   2420a:	000b      	movs	r3, r1
   2420c:	0030      	movs	r0, r6
   2420e:	0039      	movs	r1, r7
   24210:	f003 fed8 	bl	27fc4 <__aeabi_dsub>
   24214:	000b      	movs	r3, r1
   24216:	468a      	mov	sl, r1
   24218:	0002      	movs	r2, r0
   2421a:	4641      	mov	r1, r8
   2421c:	4683      	mov	fp, r0
   2421e:	600a      	str	r2, [r1, #0]
   24220:	604b      	str	r3, [r1, #4]
   24222:	465a      	mov	r2, fp
   24224:	4653      	mov	r3, sl
   24226:	0030      	movs	r0, r6
   24228:	0039      	movs	r1, r7
   2422a:	f003 fecb 	bl	27fc4 <__aeabi_dsub>
   2422e:	9a02      	ldr	r2, [sp, #8]
   24230:	9b03      	ldr	r3, [sp, #12]
   24232:	f003 fec7 	bl	27fc4 <__aeabi_dsub>
   24236:	4644      	mov	r4, r8
   24238:	000b      	movs	r3, r1
   2423a:	0002      	movs	r2, r0
   2423c:	60a2      	str	r2, [r4, #8]
   2423e:	60e3      	str	r3, [r4, #12]
   24240:	464b      	mov	r3, r9
   24242:	2b00      	cmp	r3, #0
   24244:	db00      	blt.n	24248 <__ieee754_rem_pio2+0x240>
   24246:	e780      	b.n	2414a <__ieee754_rem_pio2+0x142>
   24248:	465b      	mov	r3, fp
   2424a:	6023      	str	r3, [r4, #0]
   2424c:	2380      	movs	r3, #128	; 0x80
   2424e:	061b      	lsls	r3, r3, #24
   24250:	4453      	add	r3, sl
   24252:	6063      	str	r3, [r4, #4]
   24254:	2380      	movs	r3, #128	; 0x80
   24256:	061b      	lsls	r3, r3, #24
   24258:	469c      	mov	ip, r3
   2425a:	4461      	add	r1, ip
   2425c:	60a0      	str	r0, [r4, #8]
   2425e:	60e1      	str	r1, [r4, #12]
   24260:	426d      	negs	r5, r5
   24262:	e772      	b.n	2414a <__ieee754_rem_pio2+0x142>
   24264:	9a02      	ldr	r2, [sp, #8]
   24266:	9b03      	ldr	r3, [sp, #12]
   24268:	0030      	movs	r0, r6
   2426a:	0039      	movs	r1, r7
   2426c:	f003 feaa 	bl	27fc4 <__aeabi_dsub>
   24270:	000b      	movs	r3, r1
   24272:	468a      	mov	sl, r1
   24274:	0002      	movs	r2, r0
   24276:	4641      	mov	r1, r8
   24278:	600a      	str	r2, [r1, #0]
   2427a:	604b      	str	r3, [r1, #4]
   2427c:	4653      	mov	r3, sl
   2427e:	005b      	lsls	r3, r3, #1
   24280:	1524      	asrs	r4, r4, #20
   24282:	0d5b      	lsrs	r3, r3, #21
   24284:	4683      	mov	fp, r0
   24286:	1ae3      	subs	r3, r4, r3
   24288:	2b10      	cmp	r3, #16
   2428a:	ddca      	ble.n	24222 <__ieee754_rem_pio2+0x21a>
   2428c:	9804      	ldr	r0, [sp, #16]
   2428e:	9905      	ldr	r1, [sp, #20]
   24290:	22d3      	movs	r2, #211	; 0xd3
   24292:	4b3a      	ldr	r3, [pc, #232]	; (2437c <__ieee754_rem_pio2+0x374>)
   24294:	0552      	lsls	r2, r2, #21
   24296:	f003 fc15 	bl	27ac4 <__aeabi_dmul>
   2429a:	9002      	str	r0, [sp, #8]
   2429c:	9103      	str	r1, [sp, #12]
   2429e:	0002      	movs	r2, r0
   242a0:	000b      	movs	r3, r1
   242a2:	0030      	movs	r0, r6
   242a4:	0039      	movs	r1, r7
   242a6:	f003 fe8d 	bl	27fc4 <__aeabi_dsub>
   242aa:	9006      	str	r0, [sp, #24]
   242ac:	9107      	str	r1, [sp, #28]
   242ae:	0002      	movs	r2, r0
   242b0:	000b      	movs	r3, r1
   242b2:	0030      	movs	r0, r6
   242b4:	0039      	movs	r1, r7
   242b6:	f003 fe85 	bl	27fc4 <__aeabi_dsub>
   242ba:	9a02      	ldr	r2, [sp, #8]
   242bc:	9b03      	ldr	r3, [sp, #12]
   242be:	f003 fe81 	bl	27fc4 <__aeabi_dsub>
   242c2:	0006      	movs	r6, r0
   242c4:	000f      	movs	r7, r1
   242c6:	9804      	ldr	r0, [sp, #16]
   242c8:	9905      	ldr	r1, [sp, #20]
   242ca:	4a32      	ldr	r2, [pc, #200]	; (24394 <__ieee754_rem_pio2+0x38c>)
   242cc:	4b32      	ldr	r3, [pc, #200]	; (24398 <__ieee754_rem_pio2+0x390>)
   242ce:	f003 fbf9 	bl	27ac4 <__aeabi_dmul>
   242d2:	0032      	movs	r2, r6
   242d4:	003b      	movs	r3, r7
   242d6:	f003 fe75 	bl	27fc4 <__aeabi_dsub>
   242da:	9e06      	ldr	r6, [sp, #24]
   242dc:	9f07      	ldr	r7, [sp, #28]
   242de:	0002      	movs	r2, r0
   242e0:	000b      	movs	r3, r1
   242e2:	0030      	movs	r0, r6
   242e4:	0039      	movs	r1, r7
   242e6:	9202      	str	r2, [sp, #8]
   242e8:	9303      	str	r3, [sp, #12]
   242ea:	f003 fe6b 	bl	27fc4 <__aeabi_dsub>
   242ee:	000b      	movs	r3, r1
   242f0:	468a      	mov	sl, r1
   242f2:	0002      	movs	r2, r0
   242f4:	4641      	mov	r1, r8
   242f6:	600a      	str	r2, [r1, #0]
   242f8:	604b      	str	r3, [r1, #4]
   242fa:	4653      	mov	r3, sl
   242fc:	005b      	lsls	r3, r3, #1
   242fe:	0d5b      	lsrs	r3, r3, #21
   24300:	4683      	mov	fp, r0
   24302:	1ae4      	subs	r4, r4, r3
   24304:	9606      	str	r6, [sp, #24]
   24306:	9707      	str	r7, [sp, #28]
   24308:	2c31      	cmp	r4, #49	; 0x31
   2430a:	dd8a      	ble.n	24222 <__ieee754_rem_pio2+0x21a>
   2430c:	9804      	ldr	r0, [sp, #16]
   2430e:	9905      	ldr	r1, [sp, #20]
   24310:	22b8      	movs	r2, #184	; 0xb8
   24312:	4b21      	ldr	r3, [pc, #132]	; (24398 <__ieee754_rem_pio2+0x390>)
   24314:	0592      	lsls	r2, r2, #22
   24316:	f003 fbd5 	bl	27ac4 <__aeabi_dmul>
   2431a:	0003      	movs	r3, r0
   2431c:	000c      	movs	r4, r1
   2431e:	0002      	movs	r2, r0
   24320:	9302      	str	r3, [sp, #8]
   24322:	9403      	str	r4, [sp, #12]
   24324:	0030      	movs	r0, r6
   24326:	000b      	movs	r3, r1
   24328:	0039      	movs	r1, r7
   2432a:	f003 fe4b 	bl	27fc4 <__aeabi_dsub>
   2432e:	0002      	movs	r2, r0
   24330:	000b      	movs	r3, r1
   24332:	0006      	movs	r6, r0
   24334:	000f      	movs	r7, r1
   24336:	9806      	ldr	r0, [sp, #24]
   24338:	9907      	ldr	r1, [sp, #28]
   2433a:	f003 fe43 	bl	27fc4 <__aeabi_dsub>
   2433e:	9a02      	ldr	r2, [sp, #8]
   24340:	9b03      	ldr	r3, [sp, #12]
   24342:	f003 fe3f 	bl	27fc4 <__aeabi_dsub>
   24346:	4a19      	ldr	r2, [pc, #100]	; (243ac <__ieee754_rem_pio2+0x3a4>)
   24348:	9002      	str	r0, [sp, #8]
   2434a:	9103      	str	r1, [sp, #12]
   2434c:	9804      	ldr	r0, [sp, #16]
   2434e:	9905      	ldr	r1, [sp, #20]
   24350:	4b17      	ldr	r3, [pc, #92]	; (243b0 <__ieee754_rem_pio2+0x3a8>)
   24352:	f003 fbb7 	bl	27ac4 <__aeabi_dmul>
   24356:	9a02      	ldr	r2, [sp, #8]
   24358:	9b03      	ldr	r3, [sp, #12]
   2435a:	f003 fe33 	bl	27fc4 <__aeabi_dsub>
   2435e:	0002      	movs	r2, r0
   24360:	000b      	movs	r3, r1
   24362:	9202      	str	r2, [sp, #8]
   24364:	9303      	str	r3, [sp, #12]
   24366:	e751      	b.n	2420c <__ieee754_rem_pio2+0x204>
   24368:	3fe921fb 	.word	0x3fe921fb
   2436c:	4002d97b 	.word	0x4002d97b
   24370:	54400000 	.word	0x54400000
   24374:	3ff921fb 	.word	0x3ff921fb
   24378:	1a626331 	.word	0x1a626331
   2437c:	3dd0b461 	.word	0x3dd0b461
   24380:	413921fb 	.word	0x413921fb
   24384:	7fefffff 	.word	0x7fefffff
   24388:	fffffbea 	.word	0xfffffbea
   2438c:	41700000 	.word	0x41700000
   24390:	0002f870 	.word	0x0002f870
   24394:	2e037073 	.word	0x2e037073
   24398:	3ba3198a 	.word	0x3ba3198a
   2439c:	6dc9c883 	.word	0x6dc9c883
   243a0:	3fe45f30 	.word	0x3fe45f30
   243a4:	3fe00000 	.word	0x3fe00000
   243a8:	0002f7f0 	.word	0x0002f7f0
   243ac:	252049c1 	.word	0x252049c1
   243b0:	397b839a 	.word	0x397b839a
   243b4:	4b1b      	ldr	r3, [pc, #108]	; (24424 <__ieee754_rem_pio2+0x41c>)
   243b6:	f002 fc41 	bl	26c3c <__aeabi_dadd>
   243ba:	4b1a      	ldr	r3, [pc, #104]	; (24424 <__ieee754_rem_pio2+0x41c>)
   243bc:	0006      	movs	r6, r0
   243be:	000f      	movs	r7, r1
   243c0:	429c      	cmp	r4, r3
   243c2:	d018      	beq.n	243f6 <__ieee754_rem_pio2+0x3ee>
   243c4:	4a18      	ldr	r2, [pc, #96]	; (24428 <__ieee754_rem_pio2+0x420>)
   243c6:	4b19      	ldr	r3, [pc, #100]	; (2442c <__ieee754_rem_pio2+0x424>)
   243c8:	f002 fc38 	bl	26c3c <__aeabi_dadd>
   243cc:	0002      	movs	r2, r0
   243ce:	000b      	movs	r3, r1
   243d0:	4641      	mov	r1, r8
   243d2:	0030      	movs	r0, r6
   243d4:	600a      	str	r2, [r1, #0]
   243d6:	604b      	str	r3, [r1, #4]
   243d8:	0039      	movs	r1, r7
   243da:	f003 fdf3 	bl	27fc4 <__aeabi_dsub>
   243de:	4a12      	ldr	r2, [pc, #72]	; (24428 <__ieee754_rem_pio2+0x420>)
   243e0:	4b12      	ldr	r3, [pc, #72]	; (2442c <__ieee754_rem_pio2+0x424>)
   243e2:	f002 fc2b 	bl	26c3c <__aeabi_dadd>
   243e6:	2501      	movs	r5, #1
   243e8:	4643      	mov	r3, r8
   243ea:	426d      	negs	r5, r5
   243ec:	6098      	str	r0, [r3, #8]
   243ee:	60d9      	str	r1, [r3, #12]
   243f0:	e6ab      	b.n	2414a <__ieee754_rem_pio2+0x142>
   243f2:	2303      	movs	r3, #3
   243f4:	e684      	b.n	24100 <__ieee754_rem_pio2+0xf8>
   243f6:	22d3      	movs	r2, #211	; 0xd3
   243f8:	4b0c      	ldr	r3, [pc, #48]	; (2442c <__ieee754_rem_pio2+0x424>)
   243fa:	0552      	lsls	r2, r2, #21
   243fc:	f002 fc1e 	bl	26c3c <__aeabi_dadd>
   24400:	4a0b      	ldr	r2, [pc, #44]	; (24430 <__ieee754_rem_pio2+0x428>)
   24402:	4b0c      	ldr	r3, [pc, #48]	; (24434 <__ieee754_rem_pio2+0x42c>)
   24404:	0004      	movs	r4, r0
   24406:	000d      	movs	r5, r1
   24408:	f002 fc18 	bl	26c3c <__aeabi_dadd>
   2440c:	0002      	movs	r2, r0
   2440e:	000b      	movs	r3, r1
   24410:	4641      	mov	r1, r8
   24412:	0020      	movs	r0, r4
   24414:	600a      	str	r2, [r1, #0]
   24416:	604b      	str	r3, [r1, #4]
   24418:	0029      	movs	r1, r5
   2441a:	f003 fdd3 	bl	27fc4 <__aeabi_dsub>
   2441e:	4a04      	ldr	r2, [pc, #16]	; (24430 <__ieee754_rem_pio2+0x428>)
   24420:	4b04      	ldr	r3, [pc, #16]	; (24434 <__ieee754_rem_pio2+0x42c>)
   24422:	e7de      	b.n	243e2 <__ieee754_rem_pio2+0x3da>
   24424:	3ff921fb 	.word	0x3ff921fb
   24428:	1a626331 	.word	0x1a626331
   2442c:	3dd0b461 	.word	0x3dd0b461
   24430:	2e037073 	.word	0x2e037073
   24434:	3ba3198a 	.word	0x3ba3198a

00024438 <__ieee754_sqrt>:
   24438:	4b6c      	ldr	r3, [pc, #432]	; (245ec <__ieee754_sqrt+0x1b4>)
   2443a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2443c:	000a      	movs	r2, r1
   2443e:	4646      	mov	r6, r8
   24440:	000d      	movs	r5, r1
   24442:	46d6      	mov	lr, sl
   24444:	464f      	mov	r7, r9
   24446:	0019      	movs	r1, r3
   24448:	b5c0      	push	{r6, r7, lr}
   2444a:	0004      	movs	r4, r0
   2444c:	0006      	movs	r6, r0
   2444e:	4029      	ands	r1, r5
   24450:	4299      	cmp	r1, r3
   24452:	d100      	bne.n	24456 <__ieee754_sqrt+0x1e>
   24454:	e0a7      	b.n	245a6 <__ieee754_sqrt+0x16e>
   24456:	2d00      	cmp	r5, #0
   24458:	dc00      	bgt.n	2445c <__ieee754_sqrt+0x24>
   2445a:	e081      	b.n	24560 <__ieee754_sqrt+0x128>
   2445c:	152f      	asrs	r7, r5, #20
   2445e:	d100      	bne.n	24462 <__ieee754_sqrt+0x2a>
   24460:	e08e      	b.n	24580 <__ieee754_sqrt+0x148>
   24462:	4b63      	ldr	r3, [pc, #396]	; (245f0 <__ieee754_sqrt+0x1b8>)
   24464:	0312      	lsls	r2, r2, #12
   24466:	469c      	mov	ip, r3
   24468:	2380      	movs	r3, #128	; 0x80
   2446a:	0b12      	lsrs	r2, r2, #12
   2446c:	035b      	lsls	r3, r3, #13
   2446e:	4467      	add	r7, ip
   24470:	431a      	orrs	r2, r3
   24472:	07fb      	lsls	r3, r7, #31
   24474:	d468      	bmi.n	24548 <__ieee754_sqrt+0x110>
   24476:	107b      	asrs	r3, r7, #1
   24478:	469c      	mov	ip, r3
   2447a:	0fe3      	lsrs	r3, r4, #31
   2447c:	189b      	adds	r3, r3, r2
   2447e:	189b      	adds	r3, r3, r2
   24480:	2280      	movs	r2, #128	; 0x80
   24482:	2116      	movs	r1, #22
   24484:	2600      	movs	r6, #0
   24486:	2500      	movs	r5, #0
   24488:	0064      	lsls	r4, r4, #1
   2448a:	0392      	lsls	r2, r2, #14
   2448c:	18a8      	adds	r0, r5, r2
   2448e:	4298      	cmp	r0, r3
   24490:	dc02      	bgt.n	24498 <__ieee754_sqrt+0x60>
   24492:	1885      	adds	r5, r0, r2
   24494:	1a1b      	subs	r3, r3, r0
   24496:	18b6      	adds	r6, r6, r2
   24498:	0fe0      	lsrs	r0, r4, #31
   2449a:	005b      	lsls	r3, r3, #1
   2449c:	3901      	subs	r1, #1
   2449e:	181b      	adds	r3, r3, r0
   244a0:	0064      	lsls	r4, r4, #1
   244a2:	0852      	lsrs	r2, r2, #1
   244a4:	2900      	cmp	r1, #0
   244a6:	d1f1      	bne.n	2448c <__ieee754_sqrt+0x54>
   244a8:	2200      	movs	r2, #0
   244aa:	4692      	mov	sl, r2
   244ac:	4690      	mov	r8, r2
   244ae:	2280      	movs	r2, #128	; 0x80
   244b0:	2020      	movs	r0, #32
   244b2:	0612      	lsls	r2, r2, #24
   244b4:	e009      	b.n	244ca <__ieee754_sqrt+0x92>
   244b6:	42ab      	cmp	r3, r5
   244b8:	d038      	beq.n	2452c <__ieee754_sqrt+0xf4>
   244ba:	0fe1      	lsrs	r1, r4, #31
   244bc:	18c9      	adds	r1, r1, r3
   244be:	3801      	subs	r0, #1
   244c0:	18cb      	adds	r3, r1, r3
   244c2:	0064      	lsls	r4, r4, #1
   244c4:	0852      	lsrs	r2, r2, #1
   244c6:	2800      	cmp	r0, #0
   244c8:	d018      	beq.n	244fc <__ieee754_sqrt+0xc4>
   244ca:	4641      	mov	r1, r8
   244cc:	1851      	adds	r1, r2, r1
   244ce:	42ab      	cmp	r3, r5
   244d0:	ddf1      	ble.n	244b6 <__ieee754_sqrt+0x7e>
   244d2:	188f      	adds	r7, r1, r2
   244d4:	46b8      	mov	r8, r7
   244d6:	46a9      	mov	r9, r5
   244d8:	2900      	cmp	r1, #0
   244da:	db30      	blt.n	2453e <__ieee754_sqrt+0x106>
   244dc:	1b5b      	subs	r3, r3, r5
   244de:	428c      	cmp	r4, r1
   244e0:	41ad      	sbcs	r5, r5
   244e2:	426d      	negs	r5, r5
   244e4:	1b5b      	subs	r3, r3, r5
   244e6:	1a64      	subs	r4, r4, r1
   244e8:	0fe1      	lsrs	r1, r4, #31
   244ea:	18c9      	adds	r1, r1, r3
   244ec:	3801      	subs	r0, #1
   244ee:	4492      	add	sl, r2
   244f0:	464d      	mov	r5, r9
   244f2:	18cb      	adds	r3, r1, r3
   244f4:	0064      	lsls	r4, r4, #1
   244f6:	0852      	lsrs	r2, r2, #1
   244f8:	2800      	cmp	r0, #0
   244fa:	d1e6      	bne.n	244ca <__ieee754_sqrt+0x92>
   244fc:	4323      	orrs	r3, r4
   244fe:	d128      	bne.n	24552 <__ieee754_sqrt+0x11a>
   24500:	4653      	mov	r3, sl
   24502:	085b      	lsrs	r3, r3, #1
   24504:	493b      	ldr	r1, [pc, #236]	; (245f4 <__ieee754_sqrt+0x1bc>)
   24506:	1072      	asrs	r2, r6, #1
   24508:	4688      	mov	r8, r1
   2450a:	4442      	add	r2, r8
   2450c:	07f1      	lsls	r1, r6, #31
   2450e:	d502      	bpl.n	24516 <__ieee754_sqrt+0xde>
   24510:	2180      	movs	r1, #128	; 0x80
   24512:	0609      	lsls	r1, r1, #24
   24514:	430b      	orrs	r3, r1
   24516:	4661      	mov	r1, ip
   24518:	001e      	movs	r6, r3
   2451a:	050f      	lsls	r7, r1, #20
   2451c:	18bd      	adds	r5, r7, r2
   2451e:	0030      	movs	r0, r6
   24520:	0029      	movs	r1, r5
   24522:	bc1c      	pop	{r2, r3, r4}
   24524:	4690      	mov	r8, r2
   24526:	4699      	mov	r9, r3
   24528:	46a2      	mov	sl, r4
   2452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2452c:	42a1      	cmp	r1, r4
   2452e:	d8c4      	bhi.n	244ba <__ieee754_sqrt+0x82>
   24530:	188f      	adds	r7, r1, r2
   24532:	46b8      	mov	r8, r7
   24534:	2900      	cmp	r1, #0
   24536:	db42      	blt.n	245be <__ieee754_sqrt+0x186>
   24538:	4699      	mov	r9, r3
   2453a:	2300      	movs	r3, #0
   2453c:	e7d3      	b.n	244e6 <__ieee754_sqrt+0xae>
   2453e:	2f00      	cmp	r7, #0
   24540:	db2f      	blt.n	245a2 <__ieee754_sqrt+0x16a>
   24542:	1c6f      	adds	r7, r5, #1
   24544:	46b9      	mov	r9, r7
   24546:	e7c9      	b.n	244dc <__ieee754_sqrt+0xa4>
   24548:	0fe1      	lsrs	r1, r4, #31
   2454a:	0052      	lsls	r2, r2, #1
   2454c:	188a      	adds	r2, r1, r2
   2454e:	0064      	lsls	r4, r4, #1
   24550:	e791      	b.n	24476 <__ieee754_sqrt+0x3e>
   24552:	4653      	mov	r3, sl
   24554:	3301      	adds	r3, #1
   24556:	d035      	beq.n	245c4 <__ieee754_sqrt+0x18c>
   24558:	4653      	mov	r3, sl
   2455a:	3301      	adds	r3, #1
   2455c:	085b      	lsrs	r3, r3, #1
   2455e:	e7d1      	b.n	24504 <__ieee754_sqrt+0xcc>
   24560:	006b      	lsls	r3, r5, #1
   24562:	085b      	lsrs	r3, r3, #1
   24564:	4303      	orrs	r3, r0
   24566:	d0da      	beq.n	2451e <__ieee754_sqrt+0xe6>
   24568:	2700      	movs	r7, #0
   2456a:	2d00      	cmp	r5, #0
   2456c:	d132      	bne.n	245d4 <__ieee754_sqrt+0x19c>
   2456e:	0ae2      	lsrs	r2, r4, #11
   24570:	3f15      	subs	r7, #21
   24572:	0564      	lsls	r4, r4, #21
   24574:	2a00      	cmp	r2, #0
   24576:	d0fa      	beq.n	2456e <__ieee754_sqrt+0x136>
   24578:	2380      	movs	r3, #128	; 0x80
   2457a:	035b      	lsls	r3, r3, #13
   2457c:	421a      	tst	r2, r3
   2457e:	d124      	bne.n	245ca <__ieee754_sqrt+0x192>
   24580:	2080      	movs	r0, #128	; 0x80
   24582:	2300      	movs	r3, #0
   24584:	0340      	lsls	r0, r0, #13
   24586:	e000      	b.n	2458a <__ieee754_sqrt+0x152>
   24588:	000b      	movs	r3, r1
   2458a:	0052      	lsls	r2, r2, #1
   2458c:	1c59      	adds	r1, r3, #1
   2458e:	4202      	tst	r2, r0
   24590:	d0fa      	beq.n	24588 <__ieee754_sqrt+0x150>
   24592:	2020      	movs	r0, #32
   24594:	1a40      	subs	r0, r0, r1
   24596:	1aff      	subs	r7, r7, r3
   24598:	0023      	movs	r3, r4
   2459a:	40c3      	lsrs	r3, r0
   2459c:	408c      	lsls	r4, r1
   2459e:	431a      	orrs	r2, r3
   245a0:	e75f      	b.n	24462 <__ieee754_sqrt+0x2a>
   245a2:	46a9      	mov	r9, r5
   245a4:	e79a      	b.n	244dc <__ieee754_sqrt+0xa4>
   245a6:	002b      	movs	r3, r5
   245a8:	0002      	movs	r2, r0
   245aa:	0029      	movs	r1, r5
   245ac:	f003 fa8a 	bl	27ac4 <__aeabi_dmul>
   245b0:	0032      	movs	r2, r6
   245b2:	002b      	movs	r3, r5
   245b4:	f002 fb42 	bl	26c3c <__aeabi_dadd>
   245b8:	0006      	movs	r6, r0
   245ba:	000d      	movs	r5, r1
   245bc:	e7af      	b.n	2451e <__ieee754_sqrt+0xe6>
   245be:	2f00      	cmp	r7, #0
   245c0:	dabf      	bge.n	24542 <__ieee754_sqrt+0x10a>
   245c2:	e7b9      	b.n	24538 <__ieee754_sqrt+0x100>
   245c4:	3601      	adds	r6, #1
   245c6:	2300      	movs	r3, #0
   245c8:	e79c      	b.n	24504 <__ieee754_sqrt+0xcc>
   245ca:	2301      	movs	r3, #1
   245cc:	2100      	movs	r1, #0
   245ce:	2020      	movs	r0, #32
   245d0:	425b      	negs	r3, r3
   245d2:	e7e0      	b.n	24596 <__ieee754_sqrt+0x15e>
   245d4:	002b      	movs	r3, r5
   245d6:	0002      	movs	r2, r0
   245d8:	0029      	movs	r1, r5
   245da:	f003 fcf3 	bl	27fc4 <__aeabi_dsub>
   245de:	0002      	movs	r2, r0
   245e0:	000b      	movs	r3, r1
   245e2:	f002 fe3b 	bl	2725c <__aeabi_ddiv>
   245e6:	0006      	movs	r6, r0
   245e8:	000d      	movs	r5, r1
   245ea:	e798      	b.n	2451e <__ieee754_sqrt+0xe6>
   245ec:	7ff00000 	.word	0x7ff00000
   245f0:	fffffc01 	.word	0xfffffc01
   245f4:	3fe00000 	.word	0x3fe00000

000245f8 <__kernel_cos>:
   245f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   245fa:	4647      	mov	r7, r8
   245fc:	46ce      	mov	lr, r9
   245fe:	b580      	push	{r7, lr}
   24600:	b087      	sub	sp, #28
   24602:	9200      	str	r2, [sp, #0]
   24604:	9301      	str	r3, [sp, #4]
   24606:	4b75      	ldr	r3, [pc, #468]	; (247dc <__kernel_cos+0x1e4>)
   24608:	004f      	lsls	r7, r1, #1
   2460a:	4681      	mov	r9, r0
   2460c:	4688      	mov	r8, r1
   2460e:	087f      	lsrs	r7, r7, #1
   24610:	429f      	cmp	r7, r3
   24612:	dc63      	bgt.n	246dc <__kernel_cos+0xe4>
   24614:	f004 f80c 	bl	28630 <__aeabi_d2iz>
   24618:	2800      	cmp	r0, #0
   2461a:	d100      	bne.n	2461e <__kernel_cos+0x26>
   2461c:	e0da      	b.n	247d4 <__kernel_cos+0x1dc>
   2461e:	464a      	mov	r2, r9
   24620:	4643      	mov	r3, r8
   24622:	4648      	mov	r0, r9
   24624:	4641      	mov	r1, r8
   24626:	f003 fa4d 	bl	27ac4 <__aeabi_dmul>
   2462a:	0004      	movs	r4, r0
   2462c:	000d      	movs	r5, r1
   2462e:	4a6c      	ldr	r2, [pc, #432]	; (247e0 <__kernel_cos+0x1e8>)
   24630:	4b6c      	ldr	r3, [pc, #432]	; (247e4 <__kernel_cos+0x1ec>)
   24632:	f003 fa47 	bl	27ac4 <__aeabi_dmul>
   24636:	4a6c      	ldr	r2, [pc, #432]	; (247e8 <__kernel_cos+0x1f0>)
   24638:	4b6c      	ldr	r3, [pc, #432]	; (247ec <__kernel_cos+0x1f4>)
   2463a:	f002 faff 	bl	26c3c <__aeabi_dadd>
   2463e:	0022      	movs	r2, r4
   24640:	002b      	movs	r3, r5
   24642:	f003 fa3f 	bl	27ac4 <__aeabi_dmul>
   24646:	4a6a      	ldr	r2, [pc, #424]	; (247f0 <__kernel_cos+0x1f8>)
   24648:	4b6a      	ldr	r3, [pc, #424]	; (247f4 <__kernel_cos+0x1fc>)
   2464a:	f003 fcbb 	bl	27fc4 <__aeabi_dsub>
   2464e:	0022      	movs	r2, r4
   24650:	002b      	movs	r3, r5
   24652:	f003 fa37 	bl	27ac4 <__aeabi_dmul>
   24656:	4a68      	ldr	r2, [pc, #416]	; (247f8 <__kernel_cos+0x200>)
   24658:	4b68      	ldr	r3, [pc, #416]	; (247fc <__kernel_cos+0x204>)
   2465a:	f002 faef 	bl	26c3c <__aeabi_dadd>
   2465e:	0022      	movs	r2, r4
   24660:	002b      	movs	r3, r5
   24662:	f003 fa2f 	bl	27ac4 <__aeabi_dmul>
   24666:	4a66      	ldr	r2, [pc, #408]	; (24800 <__kernel_cos+0x208>)
   24668:	4b66      	ldr	r3, [pc, #408]	; (24804 <__kernel_cos+0x20c>)
   2466a:	f003 fcab 	bl	27fc4 <__aeabi_dsub>
   2466e:	0022      	movs	r2, r4
   24670:	002b      	movs	r3, r5
   24672:	f003 fa27 	bl	27ac4 <__aeabi_dmul>
   24676:	4a64      	ldr	r2, [pc, #400]	; (24808 <__kernel_cos+0x210>)
   24678:	4b64      	ldr	r3, [pc, #400]	; (2480c <__kernel_cos+0x214>)
   2467a:	f002 fadf 	bl	26c3c <__aeabi_dadd>
   2467e:	0022      	movs	r2, r4
   24680:	002b      	movs	r3, r5
   24682:	f003 fa1f 	bl	27ac4 <__aeabi_dmul>
   24686:	9002      	str	r0, [sp, #8]
   24688:	9103      	str	r1, [sp, #12]
   2468a:	2200      	movs	r2, #0
   2468c:	4b60      	ldr	r3, [pc, #384]	; (24810 <__kernel_cos+0x218>)
   2468e:	0020      	movs	r0, r4
   24690:	0029      	movs	r1, r5
   24692:	f003 fa17 	bl	27ac4 <__aeabi_dmul>
   24696:	9a02      	ldr	r2, [sp, #8]
   24698:	9b03      	ldr	r3, [sp, #12]
   2469a:	0006      	movs	r6, r0
   2469c:	000f      	movs	r7, r1
   2469e:	0020      	movs	r0, r4
   246a0:	0029      	movs	r1, r5
   246a2:	f003 fa0f 	bl	27ac4 <__aeabi_dmul>
   246a6:	9a00      	ldr	r2, [sp, #0]
   246a8:	9b01      	ldr	r3, [sp, #4]
   246aa:	0004      	movs	r4, r0
   246ac:	000d      	movs	r5, r1
   246ae:	4648      	mov	r0, r9
   246b0:	4641      	mov	r1, r8
   246b2:	f003 fa07 	bl	27ac4 <__aeabi_dmul>
   246b6:	0002      	movs	r2, r0
   246b8:	000b      	movs	r3, r1
   246ba:	0020      	movs	r0, r4
   246bc:	0029      	movs	r1, r5
   246be:	f003 fc81 	bl	27fc4 <__aeabi_dsub>
   246c2:	0002      	movs	r2, r0
   246c4:	000b      	movs	r3, r1
   246c6:	0030      	movs	r0, r6
   246c8:	0039      	movs	r1, r7
   246ca:	f003 fc7b 	bl	27fc4 <__aeabi_dsub>
   246ce:	0002      	movs	r2, r0
   246d0:	000b      	movs	r3, r1
   246d2:	2000      	movs	r0, #0
   246d4:	494f      	ldr	r1, [pc, #316]	; (24814 <__kernel_cos+0x21c>)
   246d6:	f003 fc75 	bl	27fc4 <__aeabi_dsub>
   246da:	e070      	b.n	247be <__kernel_cos+0x1c6>
   246dc:	0002      	movs	r2, r0
   246de:	000b      	movs	r3, r1
   246e0:	f003 f9f0 	bl	27ac4 <__aeabi_dmul>
   246e4:	0004      	movs	r4, r0
   246e6:	000d      	movs	r5, r1
   246e8:	4a3d      	ldr	r2, [pc, #244]	; (247e0 <__kernel_cos+0x1e8>)
   246ea:	4b3e      	ldr	r3, [pc, #248]	; (247e4 <__kernel_cos+0x1ec>)
   246ec:	f003 f9ea 	bl	27ac4 <__aeabi_dmul>
   246f0:	4a3d      	ldr	r2, [pc, #244]	; (247e8 <__kernel_cos+0x1f0>)
   246f2:	4b3e      	ldr	r3, [pc, #248]	; (247ec <__kernel_cos+0x1f4>)
   246f4:	f002 faa2 	bl	26c3c <__aeabi_dadd>
   246f8:	0022      	movs	r2, r4
   246fa:	002b      	movs	r3, r5
   246fc:	f003 f9e2 	bl	27ac4 <__aeabi_dmul>
   24700:	4a3b      	ldr	r2, [pc, #236]	; (247f0 <__kernel_cos+0x1f8>)
   24702:	4b3c      	ldr	r3, [pc, #240]	; (247f4 <__kernel_cos+0x1fc>)
   24704:	f003 fc5e 	bl	27fc4 <__aeabi_dsub>
   24708:	0022      	movs	r2, r4
   2470a:	002b      	movs	r3, r5
   2470c:	f003 f9da 	bl	27ac4 <__aeabi_dmul>
   24710:	4a39      	ldr	r2, [pc, #228]	; (247f8 <__kernel_cos+0x200>)
   24712:	4b3a      	ldr	r3, [pc, #232]	; (247fc <__kernel_cos+0x204>)
   24714:	f002 fa92 	bl	26c3c <__aeabi_dadd>
   24718:	0022      	movs	r2, r4
   2471a:	002b      	movs	r3, r5
   2471c:	f003 f9d2 	bl	27ac4 <__aeabi_dmul>
   24720:	4a37      	ldr	r2, [pc, #220]	; (24800 <__kernel_cos+0x208>)
   24722:	4b38      	ldr	r3, [pc, #224]	; (24804 <__kernel_cos+0x20c>)
   24724:	f003 fc4e 	bl	27fc4 <__aeabi_dsub>
   24728:	0022      	movs	r2, r4
   2472a:	002b      	movs	r3, r5
   2472c:	f003 f9ca 	bl	27ac4 <__aeabi_dmul>
   24730:	4a35      	ldr	r2, [pc, #212]	; (24808 <__kernel_cos+0x210>)
   24732:	4b36      	ldr	r3, [pc, #216]	; (2480c <__kernel_cos+0x214>)
   24734:	f002 fa82 	bl	26c3c <__aeabi_dadd>
   24738:	002b      	movs	r3, r5
   2473a:	0022      	movs	r2, r4
   2473c:	f003 f9c2 	bl	27ac4 <__aeabi_dmul>
   24740:	4b35      	ldr	r3, [pc, #212]	; (24818 <__kernel_cos+0x220>)
   24742:	9002      	str	r0, [sp, #8]
   24744:	9103      	str	r1, [sp, #12]
   24746:	429f      	cmp	r7, r3
   24748:	dd9f      	ble.n	2468a <__kernel_cos+0x92>
   2474a:	4b34      	ldr	r3, [pc, #208]	; (2481c <__kernel_cos+0x224>)
   2474c:	2200      	movs	r2, #0
   2474e:	429f      	cmp	r7, r3
   24750:	dc3a      	bgt.n	247c8 <__kernel_cos+0x1d0>
   24752:	4933      	ldr	r1, [pc, #204]	; (24820 <__kernel_cos+0x228>)
   24754:	2000      	movs	r0, #0
   24756:	187b      	adds	r3, r7, r1
   24758:	492e      	ldr	r1, [pc, #184]	; (24814 <__kernel_cos+0x21c>)
   2475a:	0016      	movs	r6, r2
   2475c:	001f      	movs	r7, r3
   2475e:	f003 fc31 	bl	27fc4 <__aeabi_dsub>
   24762:	9004      	str	r0, [sp, #16]
   24764:	9105      	str	r1, [sp, #20]
   24766:	2200      	movs	r2, #0
   24768:	4b29      	ldr	r3, [pc, #164]	; (24810 <__kernel_cos+0x218>)
   2476a:	0020      	movs	r0, r4
   2476c:	0029      	movs	r1, r5
   2476e:	f003 f9a9 	bl	27ac4 <__aeabi_dmul>
   24772:	0032      	movs	r2, r6
   24774:	003b      	movs	r3, r7
   24776:	f003 fc25 	bl	27fc4 <__aeabi_dsub>
   2477a:	9a02      	ldr	r2, [sp, #8]
   2477c:	9b03      	ldr	r3, [sp, #12]
   2477e:	0006      	movs	r6, r0
   24780:	000f      	movs	r7, r1
   24782:	0020      	movs	r0, r4
   24784:	0029      	movs	r1, r5
   24786:	f003 f99d 	bl	27ac4 <__aeabi_dmul>
   2478a:	9a00      	ldr	r2, [sp, #0]
   2478c:	9b01      	ldr	r3, [sp, #4]
   2478e:	0004      	movs	r4, r0
   24790:	000d      	movs	r5, r1
   24792:	4648      	mov	r0, r9
   24794:	4641      	mov	r1, r8
   24796:	f003 f995 	bl	27ac4 <__aeabi_dmul>
   2479a:	0002      	movs	r2, r0
   2479c:	000b      	movs	r3, r1
   2479e:	0020      	movs	r0, r4
   247a0:	0029      	movs	r1, r5
   247a2:	f003 fc0f 	bl	27fc4 <__aeabi_dsub>
   247a6:	0002      	movs	r2, r0
   247a8:	000b      	movs	r3, r1
   247aa:	0030      	movs	r0, r6
   247ac:	0039      	movs	r1, r7
   247ae:	f003 fc09 	bl	27fc4 <__aeabi_dsub>
   247b2:	0002      	movs	r2, r0
   247b4:	000b      	movs	r3, r1
   247b6:	9804      	ldr	r0, [sp, #16]
   247b8:	9905      	ldr	r1, [sp, #20]
   247ba:	f003 fc03 	bl	27fc4 <__aeabi_dsub>
   247be:	b007      	add	sp, #28
   247c0:	bc0c      	pop	{r2, r3}
   247c2:	4690      	mov	r8, r2
   247c4:	4699      	mov	r9, r3
   247c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   247c8:	4b16      	ldr	r3, [pc, #88]	; (24824 <__kernel_cos+0x22c>)
   247ca:	2600      	movs	r6, #0
   247cc:	9204      	str	r2, [sp, #16]
   247ce:	9305      	str	r3, [sp, #20]
   247d0:	4f15      	ldr	r7, [pc, #84]	; (24828 <__kernel_cos+0x230>)
   247d2:	e7c8      	b.n	24766 <__kernel_cos+0x16e>
   247d4:	2000      	movs	r0, #0
   247d6:	490f      	ldr	r1, [pc, #60]	; (24814 <__kernel_cos+0x21c>)
   247d8:	e7f1      	b.n	247be <__kernel_cos+0x1c6>
   247da:	46c0      	nop			; (mov r8, r8)
   247dc:	3e3fffff 	.word	0x3e3fffff
   247e0:	be8838d4 	.word	0xbe8838d4
   247e4:	bda8fae9 	.word	0xbda8fae9
   247e8:	bdb4b1c4 	.word	0xbdb4b1c4
   247ec:	3e21ee9e 	.word	0x3e21ee9e
   247f0:	809c52ad 	.word	0x809c52ad
   247f4:	3e927e4f 	.word	0x3e927e4f
   247f8:	19cb1590 	.word	0x19cb1590
   247fc:	3efa01a0 	.word	0x3efa01a0
   24800:	16c15177 	.word	0x16c15177
   24804:	3f56c16c 	.word	0x3f56c16c
   24808:	5555554c 	.word	0x5555554c
   2480c:	3fa55555 	.word	0x3fa55555
   24810:	3fe00000 	.word	0x3fe00000
   24814:	3ff00000 	.word	0x3ff00000
   24818:	3fd33332 	.word	0x3fd33332
   2481c:	3fe90000 	.word	0x3fe90000
   24820:	ffe00000 	.word	0xffe00000
   24824:	3fe70000 	.word	0x3fe70000
   24828:	3fd20000 	.word	0x3fd20000

0002482c <__kernel_rem_pio2>:
   2482c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2482e:	46de      	mov	lr, fp
   24830:	464e      	mov	r6, r9
   24832:	4645      	mov	r5, r8
   24834:	4657      	mov	r7, sl
   24836:	b5e0      	push	{r5, r6, r7, lr}
   24838:	4ca3      	ldr	r4, [pc, #652]	; (24ac8 <__kernel_rem_pio2+0x29c>)
   2483a:	44a5      	add	sp, r4
   2483c:	9107      	str	r1, [sp, #28]
   2483e:	0019      	movs	r1, r3
   24840:	0014      	movs	r4, r2
   24842:	9aa4      	ldr	r2, [sp, #656]	; 0x290
   24844:	9309      	str	r3, [sp, #36]	; 0x24
   24846:	4ba1      	ldr	r3, [pc, #644]	; (24acc <__kernel_rem_pio2+0x2a0>)
   24848:	0092      	lsls	r2, r2, #2
   2484a:	58d2      	ldr	r2, [r2, r3]
   2484c:	000b      	movs	r3, r1
   2484e:	9003      	str	r0, [sp, #12]
   24850:	3b01      	subs	r3, #1
   24852:	1ee0      	subs	r0, r4, #3
   24854:	2118      	movs	r1, #24
   24856:	001d      	movs	r5, r3
   24858:	0016      	movs	r6, r2
   2485a:	9206      	str	r2, [sp, #24]
   2485c:	9302      	str	r3, [sp, #8]
   2485e:	f001 f8f7 	bl	25a50 <__divsi3>
   24862:	43c3      	mvns	r3, r0
   24864:	0002      	movs	r2, r0
   24866:	17db      	asrs	r3, r3, #31
   24868:	401a      	ands	r2, r3
   2486a:	0013      	movs	r3, r2
   2486c:	0011      	movs	r1, r2
   2486e:	3301      	adds	r3, #1
   24870:	920b      	str	r2, [sp, #44]	; 0x2c
   24872:	009a      	lsls	r2, r3, #2
   24874:	1a9b      	subs	r3, r3, r2
   24876:	00db      	lsls	r3, r3, #3
   24878:	191b      	adds	r3, r3, r4
   2487a:	9304      	str	r3, [sp, #16]
   2487c:	1b4c      	subs	r4, r1, r5
   2487e:	1976      	adds	r6, r6, r5
   24880:	d418      	bmi.n	248b4 <__kernel_rem_pio2+0x88>
   24882:	9ba5      	ldr	r3, [sp, #660]	; 0x294
   24884:	00a5      	lsls	r5, r4, #2
   24886:	469c      	mov	ip, r3
   24888:	1936      	adds	r6, r6, r4
   2488a:	af22      	add	r7, sp, #136	; 0x88
   2488c:	4465      	add	r5, ip
   2488e:	3601      	adds	r6, #1
   24890:	e007      	b.n	248a2 <__kernel_rem_pio2+0x76>
   24892:	6828      	ldr	r0, [r5, #0]
   24894:	f003 ff00 	bl	28698 <__aeabi_i2d>
   24898:	3401      	adds	r4, #1
   2489a:	c703      	stmia	r7!, {r0, r1}
   2489c:	3504      	adds	r5, #4
   2489e:	42b4      	cmp	r4, r6
   248a0:	d008      	beq.n	248b4 <__kernel_rem_pio2+0x88>
   248a2:	2c00      	cmp	r4, #0
   248a4:	daf5      	bge.n	24892 <__kernel_rem_pio2+0x66>
   248a6:	2000      	movs	r0, #0
   248a8:	2100      	movs	r1, #0
   248aa:	3401      	adds	r4, #1
   248ac:	c703      	stmia	r7!, {r0, r1}
   248ae:	3504      	adds	r5, #4
   248b0:	42b4      	cmp	r4, r6
   248b2:	d1f6      	bne.n	248a2 <__kernel_rem_pio2+0x76>
   248b4:	9b06      	ldr	r3, [sp, #24]
   248b6:	2b00      	cmp	r3, #0
   248b8:	da01      	bge.n	248be <__kernel_rem_pio2+0x92>
   248ba:	f000 fc01 	bl	250c0 <__kernel_rem_pio2+0x894>
   248be:	ab72      	add	r3, sp, #456	; 0x1c8
   248c0:	0019      	movs	r1, r3
   248c2:	468b      	mov	fp, r1
   248c4:	aa22      	add	r2, sp, #136	; 0x88
   248c6:	4691      	mov	r9, r2
   248c8:	9a06      	ldr	r2, [sp, #24]
   248ca:	9308      	str	r3, [sp, #32]
   248cc:	3201      	adds	r2, #1
   248ce:	00d2      	lsls	r2, r2, #3
   248d0:	4493      	add	fp, r2
   248d2:	9a03      	ldr	r2, [sp, #12]
   248d4:	469a      	mov	sl, r3
   248d6:	4690      	mov	r8, r2
   248d8:	9b02      	ldr	r3, [sp, #8]
   248da:	00db      	lsls	r3, r3, #3
   248dc:	4499      	add	r9, r3
   248de:	3308      	adds	r3, #8
   248e0:	4498      	add	r8, r3
   248e2:	9b02      	ldr	r3, [sp, #8]
   248e4:	2b00      	cmp	r3, #0
   248e6:	da00      	bge.n	248ea <__kernel_rem_pio2+0xbe>
   248e8:	e28d      	b.n	24e06 <__kernel_rem_pio2+0x5da>
   248ea:	464c      	mov	r4, r9
   248ec:	2600      	movs	r6, #0
   248ee:	2700      	movs	r7, #0
   248f0:	9d03      	ldr	r5, [sp, #12]
   248f2:	6822      	ldr	r2, [r4, #0]
   248f4:	6863      	ldr	r3, [r4, #4]
   248f6:	cd03      	ldmia	r5!, {r0, r1}
   248f8:	f003 f8e4 	bl	27ac4 <__aeabi_dmul>
   248fc:	0002      	movs	r2, r0
   248fe:	000b      	movs	r3, r1
   24900:	0030      	movs	r0, r6
   24902:	0039      	movs	r1, r7
   24904:	f002 f99a 	bl	26c3c <__aeabi_dadd>
   24908:	3c08      	subs	r4, #8
   2490a:	0006      	movs	r6, r0
   2490c:	000f      	movs	r7, r1
   2490e:	4545      	cmp	r5, r8
   24910:	d1ef      	bne.n	248f2 <__kernel_rem_pio2+0xc6>
   24912:	4653      	mov	r3, sl
   24914:	c3c0      	stmia	r3!, {r6, r7}
   24916:	469a      	mov	sl, r3
   24918:	2308      	movs	r3, #8
   2491a:	469c      	mov	ip, r3
   2491c:	44e1      	add	r9, ip
   2491e:	45da      	cmp	sl, fp
   24920:	d1df      	bne.n	248e2 <__kernel_rem_pio2+0xb6>
   24922:	9a06      	ldr	r2, [sp, #24]
   24924:	496a      	ldr	r1, [pc, #424]	; (24ad0 <__kernel_rem_pio2+0x2a4>)
   24926:	0013      	movs	r3, r2
   24928:	468c      	mov	ip, r1
   2492a:	4463      	add	r3, ip
   2492c:	009b      	lsls	r3, r3, #2
   2492e:	a80e      	add	r0, sp, #56	; 0x38
   24930:	0019      	movs	r1, r3
   24932:	4684      	mov	ip, r0
   24934:	4461      	add	r1, ip
   24936:	910d      	str	r1, [sp, #52]	; 0x34
   24938:	9903      	ldr	r1, [sp, #12]
   2493a:	3b04      	subs	r3, #4
   2493c:	468b      	mov	fp, r1
   2493e:	4463      	add	r3, ip
   24940:	930c      	str	r3, [sp, #48]	; 0x30
   24942:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24944:	9200      	str	r2, [sp, #0]
   24946:	00db      	lsls	r3, r3, #3
   24948:	449b      	add	fp, r3
   2494a:	9a00      	ldr	r2, [sp, #0]
   2494c:	9808      	ldr	r0, [sp, #32]
   2494e:	00d3      	lsls	r3, r2, #3
   24950:	0019      	movs	r1, r3
   24952:	930a      	str	r3, [sp, #40]	; 0x28
   24954:	468c      	mov	ip, r1
   24956:	0003      	movs	r3, r0
   24958:	4463      	add	r3, ip
   2495a:	681e      	ldr	r6, [r3, #0]
   2495c:	685f      	ldr	r7, [r3, #4]
   2495e:	2a00      	cmp	r2, #0
   24960:	dd34      	ble.n	249cc <__kernel_rem_pio2+0x1a0>
   24962:	ab0e      	add	r3, sp, #56	; 0x38
   24964:	4699      	mov	r9, r3
   24966:	0013      	movs	r3, r2
   24968:	4a5a      	ldr	r2, [pc, #360]	; (24ad4 <__kernel_rem_pio2+0x2a8>)
   2496a:	4680      	mov	r8, r0
   2496c:	4694      	mov	ip, r2
   2496e:	4463      	add	r3, ip
   24970:	00db      	lsls	r3, r3, #3
   24972:	4498      	add	r8, r3
   24974:	ab70      	add	r3, sp, #448	; 0x1c0
   24976:	469a      	mov	sl, r3
   24978:	2200      	movs	r2, #0
   2497a:	4b57      	ldr	r3, [pc, #348]	; (24ad8 <__kernel_rem_pio2+0x2ac>)
   2497c:	0030      	movs	r0, r6
   2497e:	0039      	movs	r1, r7
   24980:	f003 f8a0 	bl	27ac4 <__aeabi_dmul>
   24984:	f003 fe54 	bl	28630 <__aeabi_d2iz>
   24988:	f003 fe86 	bl	28698 <__aeabi_i2d>
   2498c:	2200      	movs	r2, #0
   2498e:	4b53      	ldr	r3, [pc, #332]	; (24adc <__kernel_rem_pio2+0x2b0>)
   24990:	0004      	movs	r4, r0
   24992:	000d      	movs	r5, r1
   24994:	f003 f896 	bl	27ac4 <__aeabi_dmul>
   24998:	0002      	movs	r2, r0
   2499a:	000b      	movs	r3, r1
   2499c:	0030      	movs	r0, r6
   2499e:	0039      	movs	r1, r7
   249a0:	f003 fb10 	bl	27fc4 <__aeabi_dsub>
   249a4:	f003 fe44 	bl	28630 <__aeabi_d2iz>
   249a8:	464b      	mov	r3, r9
   249aa:	c301      	stmia	r3!, {r0}
   249ac:	4699      	mov	r9, r3
   249ae:	4643      	mov	r3, r8
   249b0:	0020      	movs	r0, r4
   249b2:	681a      	ldr	r2, [r3, #0]
   249b4:	685b      	ldr	r3, [r3, #4]
   249b6:	0029      	movs	r1, r5
   249b8:	f002 f940 	bl	26c3c <__aeabi_dadd>
   249bc:	2308      	movs	r3, #8
   249be:	425b      	negs	r3, r3
   249c0:	469c      	mov	ip, r3
   249c2:	44e0      	add	r8, ip
   249c4:	0006      	movs	r6, r0
   249c6:	000f      	movs	r7, r1
   249c8:	45d0      	cmp	r8, sl
   249ca:	d1d5      	bne.n	24978 <__kernel_rem_pio2+0x14c>
   249cc:	9b04      	ldr	r3, [sp, #16]
   249ce:	0030      	movs	r0, r6
   249d0:	001a      	movs	r2, r3
   249d2:	0039      	movs	r1, r7
   249d4:	4699      	mov	r9, r3
   249d6:	f000 ff41 	bl	2585c <scalbn>
   249da:	23ff      	movs	r3, #255	; 0xff
   249dc:	2200      	movs	r2, #0
   249de:	059b      	lsls	r3, r3, #22
   249e0:	0004      	movs	r4, r0
   249e2:	000d      	movs	r5, r1
   249e4:	f003 f86e 	bl	27ac4 <__aeabi_dmul>
   249e8:	f000 fdf6 	bl	255d8 <floor>
   249ec:	2200      	movs	r2, #0
   249ee:	4b3c      	ldr	r3, [pc, #240]	; (24ae0 <__kernel_rem_pio2+0x2b4>)
   249f0:	f003 f868 	bl	27ac4 <__aeabi_dmul>
   249f4:	0002      	movs	r2, r0
   249f6:	000b      	movs	r3, r1
   249f8:	0020      	movs	r0, r4
   249fa:	0029      	movs	r1, r5
   249fc:	f003 fae2 	bl	27fc4 <__aeabi_dsub>
   24a00:	000d      	movs	r5, r1
   24a02:	0004      	movs	r4, r0
   24a04:	f003 fe14 	bl	28630 <__aeabi_d2iz>
   24a08:	4680      	mov	r8, r0
   24a0a:	f003 fe45 	bl	28698 <__aeabi_i2d>
   24a0e:	0002      	movs	r2, r0
   24a10:	000b      	movs	r3, r1
   24a12:	0020      	movs	r0, r4
   24a14:	0029      	movs	r1, r5
   24a16:	f003 fad5 	bl	27fc4 <__aeabi_dsub>
   24a1a:	000f      	movs	r7, r1
   24a1c:	4649      	mov	r1, r9
   24a1e:	0006      	movs	r6, r0
   24a20:	2900      	cmp	r1, #0
   24a22:	dc00      	bgt.n	24a26 <__kernel_rem_pio2+0x1fa>
   24a24:	e110      	b.n	24c48 <__kernel_rem_pio2+0x41c>
   24a26:	9b00      	ldr	r3, [sp, #0]
   24a28:	2018      	movs	r0, #24
   24a2a:	1e5a      	subs	r2, r3, #1
   24a2c:	0092      	lsls	r2, r2, #2
   24a2e:	ab0e      	add	r3, sp, #56	; 0x38
   24a30:	589b      	ldr	r3, [r3, r2]
   24a32:	1a40      	subs	r0, r0, r1
   24a34:	001d      	movs	r5, r3
   24a36:	4105      	asrs	r5, r0
   24a38:	44a8      	add	r8, r5
   24a3a:	4085      	lsls	r5, r0
   24a3c:	1b5d      	subs	r5, r3, r5
   24a3e:	ab0e      	add	r3, sp, #56	; 0x38
   24a40:	509d      	str	r5, [r3, r2]
   24a42:	2217      	movs	r2, #23
   24a44:	1a52      	subs	r2, r2, r1
   24a46:	4115      	asrs	r5, r2
   24a48:	2d00      	cmp	r5, #0
   24a4a:	dc00      	bgt.n	24a4e <__kernel_rem_pio2+0x222>
   24a4c:	e07d      	b.n	24b4a <__kernel_rem_pio2+0x31e>
   24a4e:	2301      	movs	r3, #1
   24a50:	469c      	mov	ip, r3
   24a52:	9b00      	ldr	r3, [sp, #0]
   24a54:	44e0      	add	r8, ip
   24a56:	2b00      	cmp	r3, #0
   24a58:	dd48      	ble.n	24aec <__kernel_rem_pio2+0x2c0>
   24a5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   24a5c:	2c00      	cmp	r4, #0
   24a5e:	d100      	bne.n	24a62 <__kernel_rem_pio2+0x236>
   24a60:	e34b      	b.n	250fa <__kernel_rem_pio2+0x8ce>
   24a62:	2201      	movs	r2, #1
   24a64:	2300      	movs	r3, #0
   24a66:	2100      	movs	r1, #0
   24a68:	2080      	movs	r0, #128	; 0x80
   24a6a:	0440      	lsls	r0, r0, #17
   24a6c:	1b04      	subs	r4, r0, r4
   24a6e:	a80e      	add	r0, sp, #56	; 0x38
   24a70:	5044      	str	r4, [r0, r1]
   24a72:	9900      	ldr	r1, [sp, #0]
   24a74:	4291      	cmp	r1, r2
   24a76:	dd18      	ble.n	24aaa <__kernel_rem_pio2+0x27e>
   24a78:	0092      	lsls	r2, r2, #2
   24a7a:	a90e      	add	r1, sp, #56	; 0x38
   24a7c:	5889      	ldr	r1, [r1, r2]
   24a7e:	ac0e      	add	r4, sp, #56	; 0x38
   24a80:	9105      	str	r1, [sp, #20]
   24a82:	9805      	ldr	r0, [sp, #20]
   24a84:	4917      	ldr	r1, [pc, #92]	; (24ae4 <__kernel_rem_pio2+0x2b8>)
   24a86:	3302      	adds	r3, #2
   24a88:	1a08      	subs	r0, r1, r0
   24a8a:	50a0      	str	r0, [r4, r2]
   24a8c:	9a00      	ldr	r2, [sp, #0]
   24a8e:	429a      	cmp	r2, r3
   24a90:	dd0b      	ble.n	24aaa <__kernel_rem_pio2+0x27e>
   24a92:	aa0e      	add	r2, sp, #56	; 0x38
   24a94:	4694      	mov	ip, r2
   24a96:	9a00      	ldr	r2, [sp, #0]
   24a98:	009b      	lsls	r3, r3, #2
   24a9a:	0090      	lsls	r0, r2, #2
   24a9c:	4463      	add	r3, ip
   24a9e:	4460      	add	r0, ip
   24aa0:	681a      	ldr	r2, [r3, #0]
   24aa2:	1a8a      	subs	r2, r1, r2
   24aa4:	c304      	stmia	r3!, {r2}
   24aa6:	4283      	cmp	r3, r0
   24aa8:	d1fa      	bne.n	24aa0 <__kernel_rem_pio2+0x274>
   24aaa:	9b04      	ldr	r3, [sp, #16]
   24aac:	2401      	movs	r4, #1
   24aae:	2b00      	cmp	r3, #0
   24ab0:	dc21      	bgt.n	24af6 <__kernel_rem_pio2+0x2ca>
   24ab2:	2d02      	cmp	r5, #2
   24ab4:	d149      	bne.n	24b4a <__kernel_rem_pio2+0x31e>
   24ab6:	0032      	movs	r2, r6
   24ab8:	003b      	movs	r3, r7
   24aba:	2000      	movs	r0, #0
   24abc:	490a      	ldr	r1, [pc, #40]	; (24ae8 <__kernel_rem_pio2+0x2bc>)
   24abe:	f003 fa81 	bl	27fc4 <__aeabi_dsub>
   24ac2:	0006      	movs	r6, r0
   24ac4:	000f      	movs	r7, r1
   24ac6:	e032      	b.n	24b2e <__kernel_rem_pio2+0x302>
   24ac8:	fffffd94 	.word	0xfffffd94
   24acc:	0002f9b8 	.word	0x0002f9b8
   24ad0:	3fffffff 	.word	0x3fffffff
   24ad4:	1fffffff 	.word	0x1fffffff
   24ad8:	3e700000 	.word	0x3e700000
   24adc:	41700000 	.word	0x41700000
   24ae0:	40200000 	.word	0x40200000
   24ae4:	00ffffff 	.word	0x00ffffff
   24ae8:	3ff00000 	.word	0x3ff00000
   24aec:	9b04      	ldr	r3, [sp, #16]
   24aee:	2400      	movs	r4, #0
   24af0:	2b00      	cmp	r3, #0
   24af2:	dc00      	bgt.n	24af6 <__kernel_rem_pio2+0x2ca>
   24af4:	e292      	b.n	2501c <__kernel_rem_pio2+0x7f0>
   24af6:	9b04      	ldr	r3, [sp, #16]
   24af8:	2b01      	cmp	r3, #1
   24afa:	d100      	bne.n	24afe <__kernel_rem_pio2+0x2d2>
   24afc:	e27b      	b.n	24ff6 <__kernel_rem_pio2+0x7ca>
   24afe:	2b02      	cmp	r3, #2
   24b00:	d109      	bne.n	24b16 <__kernel_rem_pio2+0x2ea>
   24b02:	9b00      	ldr	r3, [sp, #0]
   24b04:	a90e      	add	r1, sp, #56	; 0x38
   24b06:	1e5a      	subs	r2, r3, #1
   24b08:	0092      	lsls	r2, r2, #2
   24b0a:	ab0e      	add	r3, sp, #56	; 0x38
   24b0c:	589b      	ldr	r3, [r3, r2]
   24b0e:	9305      	str	r3, [sp, #20]
   24b10:	029b      	lsls	r3, r3, #10
   24b12:	0a9b      	lsrs	r3, r3, #10
   24b14:	508b      	str	r3, [r1, r2]
   24b16:	2d02      	cmp	r5, #2
   24b18:	d117      	bne.n	24b4a <__kernel_rem_pio2+0x31e>
   24b1a:	0032      	movs	r2, r6
   24b1c:	003b      	movs	r3, r7
   24b1e:	2000      	movs	r0, #0
   24b20:	49bf      	ldr	r1, [pc, #764]	; (24e20 <__kernel_rem_pio2+0x5f4>)
   24b22:	f003 fa4f 	bl	27fc4 <__aeabi_dsub>
   24b26:	0006      	movs	r6, r0
   24b28:	000f      	movs	r7, r1
   24b2a:	2c00      	cmp	r4, #0
   24b2c:	d00d      	beq.n	24b4a <__kernel_rem_pio2+0x31e>
   24b2e:	9a04      	ldr	r2, [sp, #16]
   24b30:	2000      	movs	r0, #0
   24b32:	49bb      	ldr	r1, [pc, #748]	; (24e20 <__kernel_rem_pio2+0x5f4>)
   24b34:	f000 fe92 	bl	2585c <scalbn>
   24b38:	0002      	movs	r2, r0
   24b3a:	000b      	movs	r3, r1
   24b3c:	0030      	movs	r0, r6
   24b3e:	0039      	movs	r1, r7
   24b40:	f003 fa40 	bl	27fc4 <__aeabi_dsub>
   24b44:	2502      	movs	r5, #2
   24b46:	0006      	movs	r6, r0
   24b48:	000f      	movs	r7, r1
   24b4a:	2300      	movs	r3, #0
   24b4c:	2200      	movs	r2, #0
   24b4e:	0030      	movs	r0, r6
   24b50:	0039      	movs	r1, r7
   24b52:	f001 f879 	bl	25c48 <__aeabi_dcmpeq>
   24b56:	9b00      	ldr	r3, [sp, #0]
   24b58:	2800      	cmp	r0, #0
   24b5a:	d100      	bne.n	24b5e <__kernel_rem_pio2+0x332>
   24b5c:	e262      	b.n	25024 <__kernel_rem_pio2+0x7f8>
   24b5e:	9906      	ldr	r1, [sp, #24]
   24b60:	1e5a      	subs	r2, r3, #1
   24b62:	4291      	cmp	r1, r2
   24b64:	dc10      	bgt.n	24b88 <__kernel_rem_pio2+0x35c>
   24b66:	49af      	ldr	r1, [pc, #700]	; (24e24 <__kernel_rem_pio2+0x5f8>)
   24b68:	980d      	ldr	r0, [sp, #52]	; 0x34
   24b6a:	468c      	mov	ip, r1
   24b6c:	a90e      	add	r1, sp, #56	; 0x38
   24b6e:	4463      	add	r3, ip
   24b70:	468c      	mov	ip, r1
   24b72:	2100      	movs	r1, #0
   24b74:	009b      	lsls	r3, r3, #2
   24b76:	4463      	add	r3, ip
   24b78:	681c      	ldr	r4, [r3, #0]
   24b7a:	3b04      	subs	r3, #4
   24b7c:	4321      	orrs	r1, r4
   24b7e:	4283      	cmp	r3, r0
   24b80:	d1fa      	bne.n	24b78 <__kernel_rem_pio2+0x34c>
   24b82:	2900      	cmp	r1, #0
   24b84:	d000      	beq.n	24b88 <__kernel_rem_pio2+0x35c>
   24b86:	e084      	b.n	24c92 <__kernel_rem_pio2+0x466>
   24b88:	9b06      	ldr	r3, [sp, #24]
   24b8a:	aa0e      	add	r2, sp, #56	; 0x38
   24b8c:	3b01      	subs	r3, #1
   24b8e:	009b      	lsls	r3, r3, #2
   24b90:	58d3      	ldr	r3, [r2, r3]
   24b92:	2b00      	cmp	r3, #0
   24b94:	d000      	beq.n	24b98 <__kernel_rem_pio2+0x36c>
   24b96:	e27c      	b.n	25092 <__kernel_rem_pio2+0x866>
   24b98:	2201      	movs	r2, #1
   24b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24b9c:	3b04      	subs	r3, #4
   24b9e:	6859      	ldr	r1, [r3, #4]
   24ba0:	3201      	adds	r2, #1
   24ba2:	2900      	cmp	r1, #0
   24ba4:	d0fa      	beq.n	24b9c <__kernel_rem_pio2+0x370>
   24ba6:	9900      	ldr	r1, [sp, #0]
   24ba8:	000b      	movs	r3, r1
   24baa:	468c      	mov	ip, r1
   24bac:	3301      	adds	r3, #1
   24bae:	4462      	add	r2, ip
   24bb0:	9205      	str	r2, [sp, #20]
   24bb2:	4293      	cmp	r3, r2
   24bb4:	dc42      	bgt.n	24c3c <__kernel_rem_pio2+0x410>
   24bb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24bb8:	4694      	mov	ip, r2
   24bba:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   24bbc:	4463      	add	r3, ip
   24bbe:	4692      	mov	sl, r2
   24bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24bc2:	009b      	lsls	r3, r3, #2
   24bc4:	4694      	mov	ip, r2
   24bc6:	aa22      	add	r2, sp, #136	; 0x88
   24bc8:	4690      	mov	r8, r2
   24bca:	449a      	add	sl, r3
   24bcc:	9b00      	ldr	r3, [sp, #0]
   24bce:	9a08      	ldr	r2, [sp, #32]
   24bd0:	4463      	add	r3, ip
   24bd2:	00db      	lsls	r3, r3, #3
   24bd4:	4498      	add	r8, r3
   24bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24bd8:	4694      	mov	ip, r2
   24bda:	4699      	mov	r9, r3
   24bdc:	9b05      	ldr	r3, [sp, #20]
   24bde:	44e1      	add	r9, ip
   24be0:	00db      	lsls	r3, r3, #3
   24be2:	4463      	add	r3, ip
   24be4:	9300      	str	r3, [sp, #0]
   24be6:	4653      	mov	r3, sl
   24be8:	6818      	ldr	r0, [r3, #0]
   24bea:	f003 fd55 	bl	28698 <__aeabi_i2d>
   24bee:	4643      	mov	r3, r8
   24bf0:	6018      	str	r0, [r3, #0]
   24bf2:	6059      	str	r1, [r3, #4]
   24bf4:	9b02      	ldr	r3, [sp, #8]
   24bf6:	2b00      	cmp	r3, #0
   24bf8:	db23      	blt.n	24c42 <__kernel_rem_pio2+0x416>
   24bfa:	4644      	mov	r4, r8
   24bfc:	2600      	movs	r6, #0
   24bfe:	2700      	movs	r7, #0
   24c00:	9d03      	ldr	r5, [sp, #12]
   24c02:	6822      	ldr	r2, [r4, #0]
   24c04:	6863      	ldr	r3, [r4, #4]
   24c06:	cd03      	ldmia	r5!, {r0, r1}
   24c08:	f002 ff5c 	bl	27ac4 <__aeabi_dmul>
   24c0c:	0002      	movs	r2, r0
   24c0e:	000b      	movs	r3, r1
   24c10:	0030      	movs	r0, r6
   24c12:	0039      	movs	r1, r7
   24c14:	f002 f812 	bl	26c3c <__aeabi_dadd>
   24c18:	3c08      	subs	r4, #8
   24c1a:	0006      	movs	r6, r0
   24c1c:	000f      	movs	r7, r1
   24c1e:	455d      	cmp	r5, fp
   24c20:	d1ef      	bne.n	24c02 <__kernel_rem_pio2+0x3d6>
   24c22:	464b      	mov	r3, r9
   24c24:	609e      	str	r6, [r3, #8]
   24c26:	60df      	str	r7, [r3, #12]
   24c28:	2304      	movs	r3, #4
   24c2a:	469c      	mov	ip, r3
   24c2c:	3304      	adds	r3, #4
   24c2e:	44e2      	add	sl, ip
   24c30:	469c      	mov	ip, r3
   24c32:	9b00      	ldr	r3, [sp, #0]
   24c34:	44e1      	add	r9, ip
   24c36:	44e0      	add	r8, ip
   24c38:	4599      	cmp	r9, r3
   24c3a:	d1d4      	bne.n	24be6 <__kernel_rem_pio2+0x3ba>
   24c3c:	9b05      	ldr	r3, [sp, #20]
   24c3e:	9300      	str	r3, [sp, #0]
   24c40:	e683      	b.n	2494a <__kernel_rem_pio2+0x11e>
   24c42:	2600      	movs	r6, #0
   24c44:	2700      	movs	r7, #0
   24c46:	e7ec      	b.n	24c22 <__kernel_rem_pio2+0x3f6>
   24c48:	9b04      	ldr	r3, [sp, #16]
   24c4a:	2b00      	cmp	r3, #0
   24c4c:	d106      	bne.n	24c5c <__kernel_rem_pio2+0x430>
   24c4e:	9b00      	ldr	r3, [sp, #0]
   24c50:	aa0e      	add	r2, sp, #56	; 0x38
   24c52:	3b01      	subs	r3, #1
   24c54:	009b      	lsls	r3, r3, #2
   24c56:	58d5      	ldr	r5, [r2, r3]
   24c58:	15ed      	asrs	r5, r5, #23
   24c5a:	e6f5      	b.n	24a48 <__kernel_rem_pio2+0x21c>
   24c5c:	2200      	movs	r2, #0
   24c5e:	4b72      	ldr	r3, [pc, #456]	; (24e28 <__kernel_rem_pio2+0x5fc>)
   24c60:	0030      	movs	r0, r6
   24c62:	0039      	movs	r1, r7
   24c64:	f001 f814 	bl	25c90 <__aeabi_dcmpge>
   24c68:	2500      	movs	r5, #0
   24c6a:	2800      	cmp	r0, #0
   24c6c:	d100      	bne.n	24c70 <__kernel_rem_pio2+0x444>
   24c6e:	e76c      	b.n	24b4a <__kernel_rem_pio2+0x31e>
   24c70:	2301      	movs	r3, #1
   24c72:	469c      	mov	ip, r3
   24c74:	9b00      	ldr	r3, [sp, #0]
   24c76:	44e0      	add	r8, ip
   24c78:	2502      	movs	r5, #2
   24c7a:	2b00      	cmp	r3, #0
   24c7c:	dd00      	ble.n	24c80 <__kernel_rem_pio2+0x454>
   24c7e:	e6ec      	b.n	24a5a <__kernel_rem_pio2+0x22e>
   24c80:	0032      	movs	r2, r6
   24c82:	003b      	movs	r3, r7
   24c84:	2000      	movs	r0, #0
   24c86:	4966      	ldr	r1, [pc, #408]	; (24e20 <__kernel_rem_pio2+0x5f4>)
   24c88:	f003 f99c 	bl	27fc4 <__aeabi_dsub>
   24c8c:	0006      	movs	r6, r0
   24c8e:	000f      	movs	r7, r1
   24c90:	e75b      	b.n	24b4a <__kernel_rem_pio2+0x31e>
   24c92:	4643      	mov	r3, r8
   24c94:	9309      	str	r3, [sp, #36]	; 0x24
   24c96:	9b04      	ldr	r3, [sp, #16]
   24c98:	a80e      	add	r0, sp, #56	; 0x38
   24c9a:	3b18      	subs	r3, #24
   24c9c:	0019      	movs	r1, r3
   24c9e:	9304      	str	r3, [sp, #16]
   24ca0:	0093      	lsls	r3, r2, #2
   24ca2:	58c3      	ldr	r3, [r0, r3]
   24ca4:	9503      	str	r5, [sp, #12]
   24ca6:	9202      	str	r2, [sp, #8]
   24ca8:	2b00      	cmp	r3, #0
   24caa:	d10f      	bne.n	24ccc <__kernel_rem_pio2+0x4a0>
   24cac:	485d      	ldr	r0, [pc, #372]	; (24e24 <__kernel_rem_pio2+0x5f8>)
   24cae:	0013      	movs	r3, r2
   24cb0:	4684      	mov	ip, r0
   24cb2:	a80e      	add	r0, sp, #56	; 0x38
   24cb4:	4463      	add	r3, ip
   24cb6:	4684      	mov	ip, r0
   24cb8:	009b      	lsls	r3, r3, #2
   24cba:	4463      	add	r3, ip
   24cbc:	3b04      	subs	r3, #4
   24cbe:	6858      	ldr	r0, [r3, #4]
   24cc0:	3a01      	subs	r2, #1
   24cc2:	3918      	subs	r1, #24
   24cc4:	2800      	cmp	r0, #0
   24cc6:	d0f9      	beq.n	24cbc <__kernel_rem_pio2+0x490>
   24cc8:	9202      	str	r2, [sp, #8]
   24cca:	9104      	str	r1, [sp, #16]
   24ccc:	9a04      	ldr	r2, [sp, #16]
   24cce:	2000      	movs	r0, #0
   24cd0:	4953      	ldr	r1, [pc, #332]	; (24e20 <__kernel_rem_pio2+0x5f4>)
   24cd2:	f000 fdc3 	bl	2585c <scalbn>
   24cd6:	9b02      	ldr	r3, [sp, #8]
   24cd8:	0004      	movs	r4, r0
   24cda:	000d      	movs	r5, r1
   24cdc:	2b00      	cmp	r3, #0
   24cde:	da00      	bge.n	24ce2 <__kernel_rem_pio2+0x4b6>
   24ce0:	e1d9      	b.n	25096 <__kernel_rem_pio2+0x86a>
   24ce2:	aa0e      	add	r2, sp, #56	; 0x38
   24ce4:	4694      	mov	ip, r2
   24ce6:	009e      	lsls	r6, r3, #2
   24ce8:	00db      	lsls	r3, r3, #3
   24cea:	4466      	add	r6, ip
   24cec:	469c      	mov	ip, r3
   24cee:	9a08      	ldr	r2, [sp, #32]
   24cf0:	46b0      	mov	r8, r6
   24cf2:	4462      	add	r2, ip
   24cf4:	0016      	movs	r6, r2
   24cf6:	9304      	str	r3, [sp, #16]
   24cf8:	9200      	str	r2, [sp, #0]
   24cfa:	af70      	add	r7, sp, #448	; 0x1c0
   24cfc:	4643      	mov	r3, r8
   24cfe:	6818      	ldr	r0, [r3, #0]
   24d00:	f003 fcca 	bl	28698 <__aeabi_i2d>
   24d04:	0022      	movs	r2, r4
   24d06:	002b      	movs	r3, r5
   24d08:	f002 fedc 	bl	27ac4 <__aeabi_dmul>
   24d0c:	4b47      	ldr	r3, [pc, #284]	; (24e2c <__kernel_rem_pio2+0x600>)
   24d0e:	6030      	str	r0, [r6, #0]
   24d10:	6071      	str	r1, [r6, #4]
   24d12:	2200      	movs	r2, #0
   24d14:	0020      	movs	r0, r4
   24d16:	0029      	movs	r1, r5
   24d18:	f002 fed4 	bl	27ac4 <__aeabi_dmul>
   24d1c:	2304      	movs	r3, #4
   24d1e:	425b      	negs	r3, r3
   24d20:	469c      	mov	ip, r3
   24d22:	3e08      	subs	r6, #8
   24d24:	0004      	movs	r4, r0
   24d26:	000d      	movs	r5, r1
   24d28:	44e0      	add	r8, ip
   24d2a:	42be      	cmp	r6, r7
   24d2c:	d1e6      	bne.n	24cfc <__kernel_rem_pio2+0x4d0>
   24d2e:	2300      	movs	r3, #0
   24d30:	469a      	mov	sl, r3
   24d32:	ab4a      	add	r3, sp, #296	; 0x128
   24d34:	4699      	mov	r9, r3
   24d36:	9b06      	ldr	r3, [sp, #24]
   24d38:	9605      	str	r6, [sp, #20]
   24d3a:	469b      	mov	fp, r3
   24d3c:	465b      	mov	r3, fp
   24d3e:	2600      	movs	r6, #0
   24d40:	2700      	movs	r7, #0
   24d42:	2b00      	cmp	r3, #0
   24d44:	db21      	blt.n	24d8a <__kernel_rem_pio2+0x55e>
   24d46:	2080      	movs	r0, #128	; 0x80
   24d48:	4b39      	ldr	r3, [pc, #228]	; (24e30 <__kernel_rem_pio2+0x604>)
   24d4a:	9d00      	ldr	r5, [sp, #0]
   24d4c:	4698      	mov	r8, r3
   24d4e:	05c0      	lsls	r0, r0, #23
   24d50:	4938      	ldr	r1, [pc, #224]	; (24e34 <__kernel_rem_pio2+0x608>)
   24d52:	2600      	movs	r6, #0
   24d54:	2700      	movs	r7, #0
   24d56:	2400      	movs	r4, #0
   24d58:	e008      	b.n	24d6c <__kernel_rem_pio2+0x540>
   24d5a:	2308      	movs	r3, #8
   24d5c:	469c      	mov	ip, r3
   24d5e:	3508      	adds	r5, #8
   24d60:	44e0      	add	r8, ip
   24d62:	4554      	cmp	r4, sl
   24d64:	dc11      	bgt.n	24d8a <__kernel_rem_pio2+0x55e>
   24d66:	4643      	mov	r3, r8
   24d68:	6818      	ldr	r0, [r3, #0]
   24d6a:	6859      	ldr	r1, [r3, #4]
   24d6c:	682a      	ldr	r2, [r5, #0]
   24d6e:	686b      	ldr	r3, [r5, #4]
   24d70:	f002 fea8 	bl	27ac4 <__aeabi_dmul>
   24d74:	0002      	movs	r2, r0
   24d76:	000b      	movs	r3, r1
   24d78:	0030      	movs	r0, r6
   24d7a:	0039      	movs	r1, r7
   24d7c:	f001 ff5e 	bl	26c3c <__aeabi_dadd>
   24d80:	3401      	adds	r4, #1
   24d82:	0006      	movs	r6, r0
   24d84:	000f      	movs	r7, r1
   24d86:	45a3      	cmp	fp, r4
   24d88:	dae7      	bge.n	24d5a <__kernel_rem_pio2+0x52e>
   24d8a:	4653      	mov	r3, sl
   24d8c:	00db      	lsls	r3, r3, #3
   24d8e:	444b      	add	r3, r9
   24d90:	601e      	str	r6, [r3, #0]
   24d92:	605f      	str	r7, [r3, #4]
   24d94:	2301      	movs	r3, #1
   24d96:	469c      	mov	ip, r3
   24d98:	9b00      	ldr	r3, [sp, #0]
   24d9a:	9a05      	ldr	r2, [sp, #20]
   24d9c:	3b08      	subs	r3, #8
   24d9e:	44e2      	add	sl, ip
   24da0:	9300      	str	r3, [sp, #0]
   24da2:	429a      	cmp	r2, r3
   24da4:	d1ca      	bne.n	24d3c <__kernel_rem_pio2+0x510>
   24da6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   24da8:	2b02      	cmp	r3, #2
   24daa:	dd00      	ble.n	24dae <__kernel_rem_pio2+0x582>
   24dac:	e07a      	b.n	24ea4 <__kernel_rem_pio2+0x678>
   24dae:	2b00      	cmp	r3, #0
   24db0:	dc42      	bgt.n	24e38 <__kernel_rem_pio2+0x60c>
   24db2:	d11c      	bne.n	24dee <__kernel_rem_pio2+0x5c2>
   24db4:	9b04      	ldr	r3, [sp, #16]
   24db6:	2700      	movs	r7, #0
   24db8:	444b      	add	r3, r9
   24dba:	001e      	movs	r6, r3
   24dbc:	2400      	movs	r4, #0
   24dbe:	ad48      	add	r5, sp, #288	; 0x120
   24dc0:	6832      	ldr	r2, [r6, #0]
   24dc2:	6873      	ldr	r3, [r6, #4]
   24dc4:	0038      	movs	r0, r7
   24dc6:	0021      	movs	r1, r4
   24dc8:	f001 ff38 	bl	26c3c <__aeabi_dadd>
   24dcc:	3e08      	subs	r6, #8
   24dce:	0007      	movs	r7, r0
   24dd0:	000c      	movs	r4, r1
   24dd2:	42b5      	cmp	r5, r6
   24dd4:	d1f4      	bne.n	24dc0 <__kernel_rem_pio2+0x594>
   24dd6:	9b03      	ldr	r3, [sp, #12]
   24dd8:	2b00      	cmp	r3, #0
   24dda:	d003      	beq.n	24de4 <__kernel_rem_pio2+0x5b8>
   24ddc:	2380      	movs	r3, #128	; 0x80
   24dde:	061b      	lsls	r3, r3, #24
   24de0:	469c      	mov	ip, r3
   24de2:	4464      	add	r4, ip
   24de4:	003a      	movs	r2, r7
   24de6:	0023      	movs	r3, r4
   24de8:	9907      	ldr	r1, [sp, #28]
   24dea:	600a      	str	r2, [r1, #0]
   24dec:	604b      	str	r3, [r1, #4]
   24dee:	2007      	movs	r0, #7
   24df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24df2:	4018      	ands	r0, r3
   24df4:	239b      	movs	r3, #155	; 0x9b
   24df6:	009b      	lsls	r3, r3, #2
   24df8:	449d      	add	sp, r3
   24dfa:	bc3c      	pop	{r2, r3, r4, r5}
   24dfc:	4690      	mov	r8, r2
   24dfe:	4699      	mov	r9, r3
   24e00:	46a2      	mov	sl, r4
   24e02:	46ab      	mov	fp, r5
   24e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24e06:	4653      	mov	r3, sl
   24e08:	2600      	movs	r6, #0
   24e0a:	2700      	movs	r7, #0
   24e0c:	c3c0      	stmia	r3!, {r6, r7}
   24e0e:	469a      	mov	sl, r3
   24e10:	2308      	movs	r3, #8
   24e12:	469c      	mov	ip, r3
   24e14:	44e1      	add	r9, ip
   24e16:	45da      	cmp	sl, fp
   24e18:	d000      	beq.n	24e1c <__kernel_rem_pio2+0x5f0>
   24e1a:	e562      	b.n	248e2 <__kernel_rem_pio2+0xb6>
   24e1c:	e581      	b.n	24922 <__kernel_rem_pio2+0xf6>
   24e1e:	46c0      	nop			; (mov r8, r8)
   24e20:	3ff00000 	.word	0x3ff00000
   24e24:	3fffffff 	.word	0x3fffffff
   24e28:	3fe00000 	.word	0x3fe00000
   24e2c:	3e700000 	.word	0x3e700000
   24e30:	0002f978 	.word	0x0002f978
   24e34:	3ff921fb 	.word	0x3ff921fb
   24e38:	9b04      	ldr	r3, [sp, #16]
   24e3a:	2000      	movs	r0, #0
   24e3c:	444b      	add	r3, r9
   24e3e:	001e      	movs	r6, r3
   24e40:	2100      	movs	r1, #0
   24e42:	af48      	add	r7, sp, #288	; 0x120
   24e44:	6832      	ldr	r2, [r6, #0]
   24e46:	6873      	ldr	r3, [r6, #4]
   24e48:	3e08      	subs	r6, #8
   24e4a:	f001 fef7 	bl	26c3c <__aeabi_dadd>
   24e4e:	42be      	cmp	r6, r7
   24e50:	d1f8      	bne.n	24e44 <__kernel_rem_pio2+0x618>
   24e52:	9b03      	ldr	r3, [sp, #12]
   24e54:	2b00      	cmp	r3, #0
   24e56:	d100      	bne.n	24e5a <__kernel_rem_pio2+0x62e>
   24e58:	e0b8      	b.n	24fcc <__kernel_rem_pio2+0x7a0>
   24e5a:	2380      	movs	r3, #128	; 0x80
   24e5c:	9a07      	ldr	r2, [sp, #28]
   24e5e:	061b      	lsls	r3, r3, #24
   24e60:	18cb      	adds	r3, r1, r3
   24e62:	6010      	str	r0, [r2, #0]
   24e64:	6053      	str	r3, [r2, #4]
   24e66:	000b      	movs	r3, r1
   24e68:	0002      	movs	r2, r0
   24e6a:	984a      	ldr	r0, [sp, #296]	; 0x128
   24e6c:	994b      	ldr	r1, [sp, #300]	; 0x12c
   24e6e:	f003 f8a9 	bl	27fc4 <__aeabi_dsub>
   24e72:	9b02      	ldr	r3, [sp, #8]
   24e74:	2b00      	cmp	r3, #0
   24e76:	dd0b      	ble.n	24e90 <__kernel_rem_pio2+0x664>
   24e78:	2601      	movs	r6, #1
   24e7a:	af4c      	add	r7, sp, #304	; 0x130
   24e7c:	cf0c      	ldmia	r7!, {r2, r3}
   24e7e:	f001 fedd 	bl	26c3c <__aeabi_dadd>
   24e82:	9b02      	ldr	r3, [sp, #8]
   24e84:	3601      	adds	r6, #1
   24e86:	42b3      	cmp	r3, r6
   24e88:	daf8      	bge.n	24e7c <__kernel_rem_pio2+0x650>
   24e8a:	9b03      	ldr	r3, [sp, #12]
   24e8c:	2b00      	cmp	r3, #0
   24e8e:	d003      	beq.n	24e98 <__kernel_rem_pio2+0x66c>
   24e90:	2380      	movs	r3, #128	; 0x80
   24e92:	061b      	lsls	r3, r3, #24
   24e94:	469c      	mov	ip, r3
   24e96:	4461      	add	r1, ip
   24e98:	000b      	movs	r3, r1
   24e9a:	0002      	movs	r2, r0
   24e9c:	9907      	ldr	r1, [sp, #28]
   24e9e:	608a      	str	r2, [r1, #8]
   24ea0:	60cb      	str	r3, [r1, #12]
   24ea2:	e7a4      	b.n	24dee <__kernel_rem_pio2+0x5c2>
   24ea4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   24ea6:	2b03      	cmp	r3, #3
   24ea8:	d1a1      	bne.n	24dee <__kernel_rem_pio2+0x5c2>
   24eaa:	9b02      	ldr	r3, [sp, #8]
   24eac:	2b00      	cmp	r3, #0
   24eae:	dc00      	bgt.n	24eb2 <__kernel_rem_pio2+0x686>
   24eb0:	e120      	b.n	250f4 <__kernel_rem_pio2+0x8c8>
   24eb2:	4a99      	ldr	r2, [pc, #612]	; (25118 <__kernel_rem_pio2+0x8ec>)
   24eb4:	9b04      	ldr	r3, [sp, #16]
   24eb6:	4694      	mov	ip, r2
   24eb8:	444b      	add	r3, r9
   24eba:	681e      	ldr	r6, [r3, #0]
   24ebc:	685f      	ldr	r7, [r3, #4]
   24ebe:	9b02      	ldr	r3, [sp, #8]
   24ec0:	4463      	add	r3, ip
   24ec2:	469b      	mov	fp, r3
   24ec4:	00db      	lsls	r3, r3, #3
   24ec6:	444b      	add	r3, r9
   24ec8:	4698      	mov	r8, r3
   24eca:	ab48      	add	r3, sp, #288	; 0x120
   24ecc:	469a      	mov	sl, r3
   24ece:	4643      	mov	r3, r8
   24ed0:	685c      	ldr	r4, [r3, #4]
   24ed2:	681b      	ldr	r3, [r3, #0]
   24ed4:	0018      	movs	r0, r3
   24ed6:	0021      	movs	r1, r4
   24ed8:	0032      	movs	r2, r6
   24eda:	003b      	movs	r3, r7
   24edc:	9000      	str	r0, [sp, #0]
   24ede:	9101      	str	r1, [sp, #4]
   24ee0:	f001 feac 	bl	26c3c <__aeabi_dadd>
   24ee4:	0004      	movs	r4, r0
   24ee6:	000d      	movs	r5, r1
   24ee8:	0002      	movs	r2, r0
   24eea:	000b      	movs	r3, r1
   24eec:	9800      	ldr	r0, [sp, #0]
   24eee:	9901      	ldr	r1, [sp, #4]
   24ef0:	f003 f868 	bl	27fc4 <__aeabi_dsub>
   24ef4:	003b      	movs	r3, r7
   24ef6:	0032      	movs	r2, r6
   24ef8:	f001 fea0 	bl	26c3c <__aeabi_dadd>
   24efc:	4643      	mov	r3, r8
   24efe:	6098      	str	r0, [r3, #8]
   24f00:	60d9      	str	r1, [r3, #12]
   24f02:	601c      	str	r4, [r3, #0]
   24f04:	605d      	str	r5, [r3, #4]
   24f06:	2308      	movs	r3, #8
   24f08:	425b      	negs	r3, r3
   24f0a:	469c      	mov	ip, r3
   24f0c:	44e0      	add	r8, ip
   24f0e:	0026      	movs	r6, r4
   24f10:	002f      	movs	r7, r5
   24f12:	45c2      	cmp	sl, r8
   24f14:	d1db      	bne.n	24ece <__kernel_rem_pio2+0x6a2>
   24f16:	9b02      	ldr	r3, [sp, #8]
   24f18:	2b01      	cmp	r3, #1
   24f1a:	dc00      	bgt.n	24f1e <__kernel_rem_pio2+0x6f2>
   24f1c:	e0ea      	b.n	250f4 <__kernel_rem_pio2+0x8c8>
   24f1e:	9b04      	ldr	r3, [sp, #16]
   24f20:	46c8      	mov	r8, r9
   24f22:	444b      	add	r3, r9
   24f24:	681e      	ldr	r6, [r3, #0]
   24f26:	685f      	ldr	r7, [r3, #4]
   24f28:	465b      	mov	r3, fp
   24f2a:	00db      	lsls	r3, r3, #3
   24f2c:	469b      	mov	fp, r3
   24f2e:	44d8      	add	r8, fp
   24f30:	4643      	mov	r3, r8
   24f32:	685c      	ldr	r4, [r3, #4]
   24f34:	681b      	ldr	r3, [r3, #0]
   24f36:	0018      	movs	r0, r3
   24f38:	0021      	movs	r1, r4
   24f3a:	0032      	movs	r2, r6
   24f3c:	003b      	movs	r3, r7
   24f3e:	9000      	str	r0, [sp, #0]
   24f40:	9101      	str	r1, [sp, #4]
   24f42:	f001 fe7b 	bl	26c3c <__aeabi_dadd>
   24f46:	0004      	movs	r4, r0
   24f48:	000d      	movs	r5, r1
   24f4a:	0002      	movs	r2, r0
   24f4c:	000b      	movs	r3, r1
   24f4e:	9800      	ldr	r0, [sp, #0]
   24f50:	9901      	ldr	r1, [sp, #4]
   24f52:	f003 f837 	bl	27fc4 <__aeabi_dsub>
   24f56:	003b      	movs	r3, r7
   24f58:	0032      	movs	r2, r6
   24f5a:	f001 fe6f 	bl	26c3c <__aeabi_dadd>
   24f5e:	4643      	mov	r3, r8
   24f60:	6098      	str	r0, [r3, #8]
   24f62:	60d9      	str	r1, [r3, #12]
   24f64:	601c      	str	r4, [r3, #0]
   24f66:	605d      	str	r5, [r3, #4]
   24f68:	2308      	movs	r3, #8
   24f6a:	425b      	negs	r3, r3
   24f6c:	469c      	mov	ip, r3
   24f6e:	44e0      	add	r8, ip
   24f70:	0026      	movs	r6, r4
   24f72:	002f      	movs	r7, r5
   24f74:	45c1      	cmp	r9, r8
   24f76:	d1db      	bne.n	24f30 <__kernel_rem_pio2+0x704>
   24f78:	465d      	mov	r5, fp
   24f7a:	2700      	movs	r7, #0
   24f7c:	2400      	movs	r4, #0
   24f7e:	3508      	adds	r5, #8
   24f80:	444d      	add	r5, r9
   24f82:	ae4c      	add	r6, sp, #304	; 0x130
   24f84:	682a      	ldr	r2, [r5, #0]
   24f86:	686b      	ldr	r3, [r5, #4]
   24f88:	0038      	movs	r0, r7
   24f8a:	0021      	movs	r1, r4
   24f8c:	f001 fe56 	bl	26c3c <__aeabi_dadd>
   24f90:	3d08      	subs	r5, #8
   24f92:	0007      	movs	r7, r0
   24f94:	000c      	movs	r4, r1
   24f96:	42ae      	cmp	r6, r5
   24f98:	d1f4      	bne.n	24f84 <__kernel_rem_pio2+0x758>
   24f9a:	9b03      	ldr	r3, [sp, #12]
   24f9c:	2b00      	cmp	r3, #0
   24f9e:	d100      	bne.n	24fa2 <__kernel_rem_pio2+0x776>
   24fa0:	e091      	b.n	250c6 <__kernel_rem_pio2+0x89a>
   24fa2:	2180      	movs	r1, #128	; 0x80
   24fa4:	9a07      	ldr	r2, [sp, #28]
   24fa6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   24fa8:	0609      	lsls	r1, r1, #24
   24faa:	6013      	str	r3, [r2, #0]
   24fac:	464b      	mov	r3, r9
   24fae:	468c      	mov	ip, r1
   24fb0:	685b      	ldr	r3, [r3, #4]
   24fb2:	4464      	add	r4, ip
   24fb4:	4463      	add	r3, ip
   24fb6:	6053      	str	r3, [r2, #4]
   24fb8:	464b      	mov	r3, r9
   24fba:	689b      	ldr	r3, [r3, #8]
   24fbc:	6117      	str	r7, [r2, #16]
   24fbe:	6093      	str	r3, [r2, #8]
   24fc0:	464b      	mov	r3, r9
   24fc2:	68db      	ldr	r3, [r3, #12]
   24fc4:	6154      	str	r4, [r2, #20]
   24fc6:	4463      	add	r3, ip
   24fc8:	60d3      	str	r3, [r2, #12]
   24fca:	e710      	b.n	24dee <__kernel_rem_pio2+0x5c2>
   24fcc:	0002      	movs	r2, r0
   24fce:	000b      	movs	r3, r1
   24fd0:	9c07      	ldr	r4, [sp, #28]
   24fd2:	6022      	str	r2, [r4, #0]
   24fd4:	6063      	str	r3, [r4, #4]
   24fd6:	000b      	movs	r3, r1
   24fd8:	0002      	movs	r2, r0
   24fda:	984a      	ldr	r0, [sp, #296]	; 0x128
   24fdc:	994b      	ldr	r1, [sp, #300]	; 0x12c
   24fde:	f002 fff1 	bl	27fc4 <__aeabi_dsub>
   24fe2:	9b02      	ldr	r3, [sp, #8]
   24fe4:	2b00      	cmp	r3, #0
   24fe6:	dd00      	ble.n	24fea <__kernel_rem_pio2+0x7be>
   24fe8:	e746      	b.n	24e78 <__kernel_rem_pio2+0x64c>
   24fea:	000b      	movs	r3, r1
   24fec:	0002      	movs	r2, r0
   24fee:	9907      	ldr	r1, [sp, #28]
   24ff0:	608a      	str	r2, [r1, #8]
   24ff2:	60cb      	str	r3, [r1, #12]
   24ff4:	e6fb      	b.n	24dee <__kernel_rem_pio2+0x5c2>
   24ff6:	9b00      	ldr	r3, [sp, #0]
   24ff8:	a90e      	add	r1, sp, #56	; 0x38
   24ffa:	1e5a      	subs	r2, r3, #1
   24ffc:	0092      	lsls	r2, r2, #2
   24ffe:	ab0e      	add	r3, sp, #56	; 0x38
   25000:	589b      	ldr	r3, [r3, r2]
   25002:	9305      	str	r3, [sp, #20]
   25004:	025b      	lsls	r3, r3, #9
   25006:	0a5b      	lsrs	r3, r3, #9
   25008:	508b      	str	r3, [r1, r2]
   2500a:	e584      	b.n	24b16 <__kernel_rem_pio2+0x2ea>
   2500c:	9a00      	ldr	r2, [sp, #0]
   2500e:	3301      	adds	r3, #1
   25010:	429a      	cmp	r2, r3
   25012:	d176      	bne.n	25102 <__kernel_rem_pio2+0x8d6>
   25014:	9b04      	ldr	r3, [sp, #16]
   25016:	2b00      	cmp	r3, #0
   25018:	dd00      	ble.n	2501c <__kernel_rem_pio2+0x7f0>
   2501a:	e56c      	b.n	24af6 <__kernel_rem_pio2+0x2ca>
   2501c:	2d02      	cmp	r5, #2
   2501e:	d000      	beq.n	25022 <__kernel_rem_pio2+0x7f6>
   25020:	e593      	b.n	24b4a <__kernel_rem_pio2+0x31e>
   25022:	e62d      	b.n	24c80 <__kernel_rem_pio2+0x454>
   25024:	4699      	mov	r9, r3
   25026:	4643      	mov	r3, r8
   25028:	9309      	str	r3, [sp, #36]	; 0x24
   2502a:	9b04      	ldr	r3, [sp, #16]
   2502c:	0030      	movs	r0, r6
   2502e:	425a      	negs	r2, r3
   25030:	0039      	movs	r1, r7
   25032:	9503      	str	r5, [sp, #12]
   25034:	f000 fc12 	bl	2585c <scalbn>
   25038:	2200      	movs	r2, #0
   2503a:	4b38      	ldr	r3, [pc, #224]	; (2511c <__kernel_rem_pio2+0x8f0>)
   2503c:	0004      	movs	r4, r0
   2503e:	000d      	movs	r5, r1
   25040:	f000 fe26 	bl	25c90 <__aeabi_dcmpge>
   25044:	2800      	cmp	r0, #0
   25046:	d030      	beq.n	250aa <__kernel_rem_pio2+0x87e>
   25048:	4b35      	ldr	r3, [pc, #212]	; (25120 <__kernel_rem_pio2+0x8f4>)
   2504a:	2200      	movs	r2, #0
   2504c:	0020      	movs	r0, r4
   2504e:	0029      	movs	r1, r5
   25050:	f002 fd38 	bl	27ac4 <__aeabi_dmul>
   25054:	f003 faec 	bl	28630 <__aeabi_d2iz>
   25058:	464a      	mov	r2, r9
   2505a:	0006      	movs	r6, r0
   2505c:	0097      	lsls	r7, r2, #2
   2505e:	f003 fb1b 	bl	28698 <__aeabi_i2d>
   25062:	2200      	movs	r2, #0
   25064:	4b2d      	ldr	r3, [pc, #180]	; (2511c <__kernel_rem_pio2+0x8f0>)
   25066:	f002 fd2d 	bl	27ac4 <__aeabi_dmul>
   2506a:	0002      	movs	r2, r0
   2506c:	000b      	movs	r3, r1
   2506e:	0020      	movs	r0, r4
   25070:	0029      	movs	r1, r5
   25072:	f002 ffa7 	bl	27fc4 <__aeabi_dsub>
   25076:	f003 fadb 	bl	28630 <__aeabi_d2iz>
   2507a:	aa0e      	add	r2, sp, #56	; 0x38
   2507c:	51d0      	str	r0, [r2, r7]
   2507e:	464a      	mov	r2, r9
   25080:	9b04      	ldr	r3, [sp, #16]
   25082:	3201      	adds	r2, #1
   25084:	3318      	adds	r3, #24
   25086:	9202      	str	r2, [sp, #8]
   25088:	9304      	str	r3, [sp, #16]
   2508a:	0093      	lsls	r3, r2, #2
   2508c:	aa0e      	add	r2, sp, #56	; 0x38
   2508e:	50d6      	str	r6, [r2, r3]
   25090:	e61c      	b.n	24ccc <__kernel_rem_pio2+0x4a0>
   25092:	2201      	movs	r2, #1
   25094:	e587      	b.n	24ba6 <__kernel_rem_pio2+0x37a>
   25096:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   25098:	2b02      	cmp	r3, #2
   2509a:	dc25      	bgt.n	250e8 <__kernel_rem_pio2+0x8bc>
   2509c:	2b00      	cmp	r3, #0
   2509e:	dc38      	bgt.n	25112 <__kernel_rem_pio2+0x8e6>
   250a0:	d000      	beq.n	250a4 <__kernel_rem_pio2+0x878>
   250a2:	e6a4      	b.n	24dee <__kernel_rem_pio2+0x5c2>
   250a4:	2700      	movs	r7, #0
   250a6:	2400      	movs	r4, #0
   250a8:	e695      	b.n	24dd6 <__kernel_rem_pio2+0x5aa>
   250aa:	464b      	mov	r3, r9
   250ac:	0020      	movs	r0, r4
   250ae:	0029      	movs	r1, r5
   250b0:	009e      	lsls	r6, r3, #2
   250b2:	f003 fabd 	bl	28630 <__aeabi_d2iz>
   250b6:	ab0e      	add	r3, sp, #56	; 0x38
   250b8:	5198      	str	r0, [r3, r6]
   250ba:	464b      	mov	r3, r9
   250bc:	9302      	str	r3, [sp, #8]
   250be:	e605      	b.n	24ccc <__kernel_rem_pio2+0x4a0>
   250c0:	ab72      	add	r3, sp, #456	; 0x1c8
   250c2:	9308      	str	r3, [sp, #32]
   250c4:	e42d      	b.n	24922 <__kernel_rem_pio2+0xf6>
   250c6:	9907      	ldr	r1, [sp, #28]
   250c8:	9a4a      	ldr	r2, [sp, #296]	; 0x128
   250ca:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   250cc:	600a      	str	r2, [r1, #0]
   250ce:	604b      	str	r3, [r1, #4]
   250d0:	464b      	mov	r3, r9
   250d2:	689a      	ldr	r2, [r3, #8]
   250d4:	68db      	ldr	r3, [r3, #12]
   250d6:	9200      	str	r2, [sp, #0]
   250d8:	9301      	str	r3, [sp, #4]
   250da:	608a      	str	r2, [r1, #8]
   250dc:	60cb      	str	r3, [r1, #12]
   250de:	003a      	movs	r2, r7
   250e0:	0023      	movs	r3, r4
   250e2:	610a      	str	r2, [r1, #16]
   250e4:	614b      	str	r3, [r1, #20]
   250e6:	e682      	b.n	24dee <__kernel_rem_pio2+0x5c2>
   250e8:	ab4a      	add	r3, sp, #296	; 0x128
   250ea:	4699      	mov	r9, r3
   250ec:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   250ee:	2b03      	cmp	r3, #3
   250f0:	d000      	beq.n	250f4 <__kernel_rem_pio2+0x8c8>
   250f2:	e67c      	b.n	24dee <__kernel_rem_pio2+0x5c2>
   250f4:	2700      	movs	r7, #0
   250f6:	2400      	movs	r4, #0
   250f8:	e74f      	b.n	24f9a <__kernel_rem_pio2+0x76e>
   250fa:	9a00      	ldr	r2, [sp, #0]
   250fc:	2301      	movs	r3, #1
   250fe:	2a01      	cmp	r2, #1
   25100:	dd88      	ble.n	25014 <__kernel_rem_pio2+0x7e8>
   25102:	0099      	lsls	r1, r3, #2
   25104:	aa0e      	add	r2, sp, #56	; 0x38
   25106:	5854      	ldr	r4, [r2, r1]
   25108:	2c00      	cmp	r4, #0
   2510a:	d100      	bne.n	2510e <__kernel_rem_pio2+0x8e2>
   2510c:	e77e      	b.n	2500c <__kernel_rem_pio2+0x7e0>
   2510e:	1c5a      	adds	r2, r3, #1
   25110:	e4aa      	b.n	24a68 <__kernel_rem_pio2+0x23c>
   25112:	2000      	movs	r0, #0
   25114:	2100      	movs	r1, #0
   25116:	e69c      	b.n	24e52 <__kernel_rem_pio2+0x626>
   25118:	1fffffff 	.word	0x1fffffff
   2511c:	41700000 	.word	0x41700000
   25120:	3e700000 	.word	0x3e700000

00025124 <__kernel_sin>:
   25124:	b5f0      	push	{r4, r5, r6, r7, lr}
   25126:	46ce      	mov	lr, r9
   25128:	4647      	mov	r7, r8
   2512a:	b580      	push	{r7, lr}
   2512c:	b087      	sub	sp, #28
   2512e:	9200      	str	r2, [sp, #0]
   25130:	9301      	str	r3, [sp, #4]
   25132:	4a46      	ldr	r2, [pc, #280]	; (2524c <__kernel_sin+0x128>)
   25134:	004b      	lsls	r3, r1, #1
   25136:	4681      	mov	r9, r0
   25138:	4688      	mov	r8, r1
   2513a:	085b      	lsrs	r3, r3, #1
   2513c:	4293      	cmp	r3, r2
   2513e:	dc05      	bgt.n	2514c <__kernel_sin+0x28>
   25140:	f003 fa76 	bl	28630 <__aeabi_d2iz>
   25144:	4641      	mov	r1, r8
   25146:	1e03      	subs	r3, r0, #0
   25148:	4648      	mov	r0, r9
   2514a:	d066      	beq.n	2521a <__kernel_sin+0xf6>
   2514c:	464a      	mov	r2, r9
   2514e:	4643      	mov	r3, r8
   25150:	4648      	mov	r0, r9
   25152:	4641      	mov	r1, r8
   25154:	f002 fcb6 	bl	27ac4 <__aeabi_dmul>
   25158:	0004      	movs	r4, r0
   2515a:	000d      	movs	r5, r1
   2515c:	0002      	movs	r2, r0
   2515e:	000b      	movs	r3, r1
   25160:	4648      	mov	r0, r9
   25162:	4641      	mov	r1, r8
   25164:	f002 fcae 	bl	27ac4 <__aeabi_dmul>
   25168:	4a39      	ldr	r2, [pc, #228]	; (25250 <__kernel_sin+0x12c>)
   2516a:	4b3a      	ldr	r3, [pc, #232]	; (25254 <__kernel_sin+0x130>)
   2516c:	0006      	movs	r6, r0
   2516e:	000f      	movs	r7, r1
   25170:	0020      	movs	r0, r4
   25172:	0029      	movs	r1, r5
   25174:	f002 fca6 	bl	27ac4 <__aeabi_dmul>
   25178:	4a37      	ldr	r2, [pc, #220]	; (25258 <__kernel_sin+0x134>)
   2517a:	4b38      	ldr	r3, [pc, #224]	; (2525c <__kernel_sin+0x138>)
   2517c:	f002 ff22 	bl	27fc4 <__aeabi_dsub>
   25180:	0022      	movs	r2, r4
   25182:	002b      	movs	r3, r5
   25184:	f002 fc9e 	bl	27ac4 <__aeabi_dmul>
   25188:	4a35      	ldr	r2, [pc, #212]	; (25260 <__kernel_sin+0x13c>)
   2518a:	4b36      	ldr	r3, [pc, #216]	; (25264 <__kernel_sin+0x140>)
   2518c:	f001 fd56 	bl	26c3c <__aeabi_dadd>
   25190:	0022      	movs	r2, r4
   25192:	002b      	movs	r3, r5
   25194:	f002 fc96 	bl	27ac4 <__aeabi_dmul>
   25198:	4a33      	ldr	r2, [pc, #204]	; (25268 <__kernel_sin+0x144>)
   2519a:	4b34      	ldr	r3, [pc, #208]	; (2526c <__kernel_sin+0x148>)
   2519c:	f002 ff12 	bl	27fc4 <__aeabi_dsub>
   251a0:	0022      	movs	r2, r4
   251a2:	002b      	movs	r3, r5
   251a4:	f002 fc8e 	bl	27ac4 <__aeabi_dmul>
   251a8:	4b31      	ldr	r3, [pc, #196]	; (25270 <__kernel_sin+0x14c>)
   251aa:	4a32      	ldr	r2, [pc, #200]	; (25274 <__kernel_sin+0x150>)
   251ac:	f001 fd46 	bl	26c3c <__aeabi_dadd>
   251b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   251b2:	9002      	str	r0, [sp, #8]
   251b4:	9103      	str	r1, [sp, #12]
   251b6:	2b00      	cmp	r3, #0
   251b8:	d034      	beq.n	25224 <__kernel_sin+0x100>
   251ba:	9800      	ldr	r0, [sp, #0]
   251bc:	9901      	ldr	r1, [sp, #4]
   251be:	2200      	movs	r2, #0
   251c0:	4b2d      	ldr	r3, [pc, #180]	; (25278 <__kernel_sin+0x154>)
   251c2:	f002 fc7f 	bl	27ac4 <__aeabi_dmul>
   251c6:	9a02      	ldr	r2, [sp, #8]
   251c8:	9b03      	ldr	r3, [sp, #12]
   251ca:	9004      	str	r0, [sp, #16]
   251cc:	9105      	str	r1, [sp, #20]
   251ce:	0030      	movs	r0, r6
   251d0:	0039      	movs	r1, r7
   251d2:	f002 fc77 	bl	27ac4 <__aeabi_dmul>
   251d6:	0002      	movs	r2, r0
   251d8:	000b      	movs	r3, r1
   251da:	9804      	ldr	r0, [sp, #16]
   251dc:	9905      	ldr	r1, [sp, #20]
   251de:	f002 fef1 	bl	27fc4 <__aeabi_dsub>
   251e2:	0022      	movs	r2, r4
   251e4:	002b      	movs	r3, r5
   251e6:	f002 fc6d 	bl	27ac4 <__aeabi_dmul>
   251ea:	9a00      	ldr	r2, [sp, #0]
   251ec:	9b01      	ldr	r3, [sp, #4]
   251ee:	f002 fee9 	bl	27fc4 <__aeabi_dsub>
   251f2:	4a22      	ldr	r2, [pc, #136]	; (2527c <__kernel_sin+0x158>)
   251f4:	0004      	movs	r4, r0
   251f6:	000d      	movs	r5, r1
   251f8:	4b21      	ldr	r3, [pc, #132]	; (25280 <__kernel_sin+0x15c>)
   251fa:	0030      	movs	r0, r6
   251fc:	0039      	movs	r1, r7
   251fe:	f002 fc61 	bl	27ac4 <__aeabi_dmul>
   25202:	0002      	movs	r2, r0
   25204:	000b      	movs	r3, r1
   25206:	0020      	movs	r0, r4
   25208:	0029      	movs	r1, r5
   2520a:	f001 fd17 	bl	26c3c <__aeabi_dadd>
   2520e:	0002      	movs	r2, r0
   25210:	000b      	movs	r3, r1
   25212:	4648      	mov	r0, r9
   25214:	4641      	mov	r1, r8
   25216:	f002 fed5 	bl	27fc4 <__aeabi_dsub>
   2521a:	b007      	add	sp, #28
   2521c:	bc0c      	pop	{r2, r3}
   2521e:	4690      	mov	r8, r2
   25220:	4699      	mov	r9, r3
   25222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25224:	0002      	movs	r2, r0
   25226:	000b      	movs	r3, r1
   25228:	0020      	movs	r0, r4
   2522a:	0029      	movs	r1, r5
   2522c:	f002 fc4a 	bl	27ac4 <__aeabi_dmul>
   25230:	4a12      	ldr	r2, [pc, #72]	; (2527c <__kernel_sin+0x158>)
   25232:	4b13      	ldr	r3, [pc, #76]	; (25280 <__kernel_sin+0x15c>)
   25234:	f002 fec6 	bl	27fc4 <__aeabi_dsub>
   25238:	0032      	movs	r2, r6
   2523a:	003b      	movs	r3, r7
   2523c:	f002 fc42 	bl	27ac4 <__aeabi_dmul>
   25240:	464a      	mov	r2, r9
   25242:	4643      	mov	r3, r8
   25244:	f001 fcfa 	bl	26c3c <__aeabi_dadd>
   25248:	e7e7      	b.n	2521a <__kernel_sin+0xf6>
   2524a:	46c0      	nop			; (mov r8, r8)
   2524c:	3e3fffff 	.word	0x3e3fffff
   25250:	5acfd57c 	.word	0x5acfd57c
   25254:	3de5d93a 	.word	0x3de5d93a
   25258:	8a2b9ceb 	.word	0x8a2b9ceb
   2525c:	3e5ae5e6 	.word	0x3e5ae5e6
   25260:	57b1fe7d 	.word	0x57b1fe7d
   25264:	3ec71de3 	.word	0x3ec71de3
   25268:	19c161d5 	.word	0x19c161d5
   2526c:	3f2a01a0 	.word	0x3f2a01a0
   25270:	3f811111 	.word	0x3f811111
   25274:	1110f8a6 	.word	0x1110f8a6
   25278:	3fe00000 	.word	0x3fe00000
   2527c:	55555549 	.word	0x55555549
   25280:	3fc55555 	.word	0x3fc55555

00025284 <atan>:
   25284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25286:	464e      	mov	r6, r9
   25288:	4657      	mov	r7, sl
   2528a:	4645      	mov	r5, r8
   2528c:	46de      	mov	lr, fp
   2528e:	4ba4      	ldr	r3, [pc, #656]	; (25520 <atan+0x29c>)
   25290:	b5e0      	push	{r5, r6, r7, lr}
   25292:	004e      	lsls	r6, r1, #1
   25294:	4680      	mov	r8, r0
   25296:	4689      	mov	r9, r1
   25298:	468a      	mov	sl, r1
   2529a:	0876      	lsrs	r6, r6, #1
   2529c:	429e      	cmp	r6, r3
   2529e:	dd0c      	ble.n	252ba <atan+0x36>
   252a0:	4ba0      	ldr	r3, [pc, #640]	; (25524 <atan+0x2a0>)
   252a2:	429e      	cmp	r6, r3
   252a4:	dd00      	ble.n	252a8 <atan+0x24>
   252a6:	e0a3      	b.n	253f0 <atan+0x16c>
   252a8:	d100      	bne.n	252ac <atan+0x28>
   252aa:	e09e      	b.n	253ea <atan+0x166>
   252ac:	4653      	mov	r3, sl
   252ae:	2b00      	cmp	r3, #0
   252b0:	dc00      	bgt.n	252b4 <atan+0x30>
   252b2:	e0e1      	b.n	25478 <atan+0x1f4>
   252b4:	4b9c      	ldr	r3, [pc, #624]	; (25528 <atan+0x2a4>)
   252b6:	4a9d      	ldr	r2, [pc, #628]	; (2552c <atan+0x2a8>)
   252b8:	e0a2      	b.n	25400 <atan+0x17c>
   252ba:	4b9d      	ldr	r3, [pc, #628]	; (25530 <atan+0x2ac>)
   252bc:	429e      	cmp	r6, r3
   252be:	dd00      	ble.n	252c2 <atan+0x3e>
   252c0:	e0b4      	b.n	2542c <atan+0x1a8>
   252c2:	4b9c      	ldr	r3, [pc, #624]	; (25534 <atan+0x2b0>)
   252c4:	429e      	cmp	r6, r3
   252c6:	dc00      	bgt.n	252ca <atan+0x46>
   252c8:	e0a2      	b.n	25410 <atan+0x18c>
   252ca:	2301      	movs	r3, #1
   252cc:	425b      	negs	r3, r3
   252ce:	469b      	mov	fp, r3
   252d0:	4642      	mov	r2, r8
   252d2:	464b      	mov	r3, r9
   252d4:	4640      	mov	r0, r8
   252d6:	4649      	mov	r1, r9
   252d8:	f002 fbf4 	bl	27ac4 <__aeabi_dmul>
   252dc:	0002      	movs	r2, r0
   252de:	000b      	movs	r3, r1
   252e0:	0006      	movs	r6, r0
   252e2:	000f      	movs	r7, r1
   252e4:	f002 fbee 	bl	27ac4 <__aeabi_dmul>
   252e8:	0004      	movs	r4, r0
   252ea:	000d      	movs	r5, r1
   252ec:	4a92      	ldr	r2, [pc, #584]	; (25538 <atan+0x2b4>)
   252ee:	4b93      	ldr	r3, [pc, #588]	; (2553c <atan+0x2b8>)
   252f0:	f002 fbe8 	bl	27ac4 <__aeabi_dmul>
   252f4:	4a92      	ldr	r2, [pc, #584]	; (25540 <atan+0x2bc>)
   252f6:	4b93      	ldr	r3, [pc, #588]	; (25544 <atan+0x2c0>)
   252f8:	f001 fca0 	bl	26c3c <__aeabi_dadd>
   252fc:	0022      	movs	r2, r4
   252fe:	002b      	movs	r3, r5
   25300:	f002 fbe0 	bl	27ac4 <__aeabi_dmul>
   25304:	4a90      	ldr	r2, [pc, #576]	; (25548 <atan+0x2c4>)
   25306:	4b91      	ldr	r3, [pc, #580]	; (2554c <atan+0x2c8>)
   25308:	f001 fc98 	bl	26c3c <__aeabi_dadd>
   2530c:	0022      	movs	r2, r4
   2530e:	002b      	movs	r3, r5
   25310:	f002 fbd8 	bl	27ac4 <__aeabi_dmul>
   25314:	4a8e      	ldr	r2, [pc, #568]	; (25550 <atan+0x2cc>)
   25316:	4b8f      	ldr	r3, [pc, #572]	; (25554 <atan+0x2d0>)
   25318:	f001 fc90 	bl	26c3c <__aeabi_dadd>
   2531c:	0022      	movs	r2, r4
   2531e:	002b      	movs	r3, r5
   25320:	f002 fbd0 	bl	27ac4 <__aeabi_dmul>
   25324:	4a8c      	ldr	r2, [pc, #560]	; (25558 <atan+0x2d4>)
   25326:	4b8d      	ldr	r3, [pc, #564]	; (2555c <atan+0x2d8>)
   25328:	f001 fc88 	bl	26c3c <__aeabi_dadd>
   2532c:	0022      	movs	r2, r4
   2532e:	002b      	movs	r3, r5
   25330:	f002 fbc8 	bl	27ac4 <__aeabi_dmul>
   25334:	4a8a      	ldr	r2, [pc, #552]	; (25560 <atan+0x2dc>)
   25336:	4b8b      	ldr	r3, [pc, #556]	; (25564 <atan+0x2e0>)
   25338:	f001 fc80 	bl	26c3c <__aeabi_dadd>
   2533c:	0032      	movs	r2, r6
   2533e:	003b      	movs	r3, r7
   25340:	f002 fbc0 	bl	27ac4 <__aeabi_dmul>
   25344:	4a88      	ldr	r2, [pc, #544]	; (25568 <atan+0x2e4>)
   25346:	4b89      	ldr	r3, [pc, #548]	; (2556c <atan+0x2e8>)
   25348:	0006      	movs	r6, r0
   2534a:	000f      	movs	r7, r1
   2534c:	0020      	movs	r0, r4
   2534e:	0029      	movs	r1, r5
   25350:	f002 fbb8 	bl	27ac4 <__aeabi_dmul>
   25354:	4a86      	ldr	r2, [pc, #536]	; (25570 <atan+0x2ec>)
   25356:	4b87      	ldr	r3, [pc, #540]	; (25574 <atan+0x2f0>)
   25358:	f002 fe34 	bl	27fc4 <__aeabi_dsub>
   2535c:	0022      	movs	r2, r4
   2535e:	002b      	movs	r3, r5
   25360:	f002 fbb0 	bl	27ac4 <__aeabi_dmul>
   25364:	4a84      	ldr	r2, [pc, #528]	; (25578 <atan+0x2f4>)
   25366:	4b85      	ldr	r3, [pc, #532]	; (2557c <atan+0x2f8>)
   25368:	f002 fe2c 	bl	27fc4 <__aeabi_dsub>
   2536c:	0022      	movs	r2, r4
   2536e:	002b      	movs	r3, r5
   25370:	f002 fba8 	bl	27ac4 <__aeabi_dmul>
   25374:	4a82      	ldr	r2, [pc, #520]	; (25580 <atan+0x2fc>)
   25376:	4b83      	ldr	r3, [pc, #524]	; (25584 <atan+0x300>)
   25378:	f002 fe24 	bl	27fc4 <__aeabi_dsub>
   2537c:	0022      	movs	r2, r4
   2537e:	002b      	movs	r3, r5
   25380:	f002 fba0 	bl	27ac4 <__aeabi_dmul>
   25384:	4a80      	ldr	r2, [pc, #512]	; (25588 <atan+0x304>)
   25386:	4b81      	ldr	r3, [pc, #516]	; (2558c <atan+0x308>)
   25388:	f002 fe1c 	bl	27fc4 <__aeabi_dsub>
   2538c:	0022      	movs	r2, r4
   2538e:	002b      	movs	r3, r5
   25390:	f002 fb98 	bl	27ac4 <__aeabi_dmul>
   25394:	000b      	movs	r3, r1
   25396:	4659      	mov	r1, fp
   25398:	0002      	movs	r2, r0
   2539a:	3101      	adds	r1, #1
   2539c:	d100      	bne.n	253a0 <atan+0x11c>
   2539e:	e06e      	b.n	2547e <atan+0x1fa>
   253a0:	4659      	mov	r1, fp
   253a2:	0030      	movs	r0, r6
   253a4:	00cc      	lsls	r4, r1, #3
   253a6:	0039      	movs	r1, r7
   253a8:	f001 fc48 	bl	26c3c <__aeabi_dadd>
   253ac:	4642      	mov	r2, r8
   253ae:	464b      	mov	r3, r9
   253b0:	f002 fb88 	bl	27ac4 <__aeabi_dmul>
   253b4:	4d76      	ldr	r5, [pc, #472]	; (25590 <atan+0x30c>)
   253b6:	4b77      	ldr	r3, [pc, #476]	; (25594 <atan+0x310>)
   253b8:	192d      	adds	r5, r5, r4
   253ba:	191c      	adds	r4, r3, r4
   253bc:	6822      	ldr	r2, [r4, #0]
   253be:	6863      	ldr	r3, [r4, #4]
   253c0:	f002 fe00 	bl	27fc4 <__aeabi_dsub>
   253c4:	4642      	mov	r2, r8
   253c6:	464b      	mov	r3, r9
   253c8:	f002 fdfc 	bl	27fc4 <__aeabi_dsub>
   253cc:	0002      	movs	r2, r0
   253ce:	000b      	movs	r3, r1
   253d0:	6828      	ldr	r0, [r5, #0]
   253d2:	6869      	ldr	r1, [r5, #4]
   253d4:	f002 fdf6 	bl	27fc4 <__aeabi_dsub>
   253d8:	0003      	movs	r3, r0
   253da:	4650      	mov	r0, sl
   253dc:	000a      	movs	r2, r1
   253de:	2800      	cmp	r0, #0
   253e0:	da0e      	bge.n	25400 <atan+0x17c>
   253e2:	2280      	movs	r2, #128	; 0x80
   253e4:	0612      	lsls	r2, r2, #24
   253e6:	188a      	adds	r2, r1, r2
   253e8:	e00a      	b.n	25400 <atan+0x17c>
   253ea:	2800      	cmp	r0, #0
   253ec:	d100      	bne.n	253f0 <atan+0x16c>
   253ee:	e75d      	b.n	252ac <atan+0x28>
   253f0:	4642      	mov	r2, r8
   253f2:	464b      	mov	r3, r9
   253f4:	4640      	mov	r0, r8
   253f6:	4649      	mov	r1, r9
   253f8:	f001 fc20 	bl	26c3c <__aeabi_dadd>
   253fc:	0003      	movs	r3, r0
   253fe:	000a      	movs	r2, r1
   25400:	0018      	movs	r0, r3
   25402:	0011      	movs	r1, r2
   25404:	bc3c      	pop	{r2, r3, r4, r5}
   25406:	4690      	mov	r8, r2
   25408:	4699      	mov	r9, r3
   2540a:	46a2      	mov	sl, r4
   2540c:	46ab      	mov	fp, r5
   2540e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25410:	4a61      	ldr	r2, [pc, #388]	; (25598 <atan+0x314>)
   25412:	4b62      	ldr	r3, [pc, #392]	; (2559c <atan+0x318>)
   25414:	f001 fc12 	bl	26c3c <__aeabi_dadd>
   25418:	2200      	movs	r2, #0
   2541a:	4b61      	ldr	r3, [pc, #388]	; (255a0 <atan+0x31c>)
   2541c:	f000 fc2e 	bl	25c7c <__aeabi_dcmpgt>
   25420:	2800      	cmp	r0, #0
   25422:	d100      	bne.n	25426 <atan+0x1a2>
   25424:	e751      	b.n	252ca <atan+0x46>
   25426:	4643      	mov	r3, r8
   25428:	464a      	mov	r2, r9
   2542a:	e7e9      	b.n	25400 <atan+0x17c>
   2542c:	f000 f8c6 	bl	255bc <fabs>
   25430:	4b5c      	ldr	r3, [pc, #368]	; (255a4 <atan+0x320>)
   25432:	0004      	movs	r4, r0
   25434:	000d      	movs	r5, r1
   25436:	429e      	cmp	r6, r3
   25438:	dc32      	bgt.n	254a0 <atan+0x21c>
   2543a:	4b5b      	ldr	r3, [pc, #364]	; (255a8 <atan+0x324>)
   2543c:	429e      	cmp	r6, r3
   2543e:	dc58      	bgt.n	254f2 <atan+0x26e>
   25440:	0002      	movs	r2, r0
   25442:	000b      	movs	r3, r1
   25444:	f001 fbfa 	bl	26c3c <__aeabi_dadd>
   25448:	2200      	movs	r2, #0
   2544a:	4b55      	ldr	r3, [pc, #340]	; (255a0 <atan+0x31c>)
   2544c:	f002 fdba 	bl	27fc4 <__aeabi_dsub>
   25450:	2380      	movs	r3, #128	; 0x80
   25452:	0006      	movs	r6, r0
   25454:	000f      	movs	r7, r1
   25456:	2200      	movs	r2, #0
   25458:	05db      	lsls	r3, r3, #23
   2545a:	0020      	movs	r0, r4
   2545c:	0029      	movs	r1, r5
   2545e:	f001 fbed 	bl	26c3c <__aeabi_dadd>
   25462:	000b      	movs	r3, r1
   25464:	0002      	movs	r2, r0
   25466:	0039      	movs	r1, r7
   25468:	0030      	movs	r0, r6
   2546a:	f001 fef7 	bl	2725c <__aeabi_ddiv>
   2546e:	2300      	movs	r3, #0
   25470:	4680      	mov	r8, r0
   25472:	4689      	mov	r9, r1
   25474:	469b      	mov	fp, r3
   25476:	e72b      	b.n	252d0 <atan+0x4c>
   25478:	4b2b      	ldr	r3, [pc, #172]	; (25528 <atan+0x2a4>)
   2547a:	4a4c      	ldr	r2, [pc, #304]	; (255ac <atan+0x328>)
   2547c:	e7c0      	b.n	25400 <atan+0x17c>
   2547e:	0030      	movs	r0, r6
   25480:	0039      	movs	r1, r7
   25482:	f001 fbdb 	bl	26c3c <__aeabi_dadd>
   25486:	4642      	mov	r2, r8
   25488:	464b      	mov	r3, r9
   2548a:	f002 fb1b 	bl	27ac4 <__aeabi_dmul>
   2548e:	0002      	movs	r2, r0
   25490:	000b      	movs	r3, r1
   25492:	4640      	mov	r0, r8
   25494:	4649      	mov	r1, r9
   25496:	f002 fd95 	bl	27fc4 <__aeabi_dsub>
   2549a:	0003      	movs	r3, r0
   2549c:	000a      	movs	r2, r1
   2549e:	e7af      	b.n	25400 <atan+0x17c>
   254a0:	4b43      	ldr	r3, [pc, #268]	; (255b0 <atan+0x32c>)
   254a2:	429e      	cmp	r6, r3
   254a4:	dc1a      	bgt.n	254dc <atan+0x258>
   254a6:	2200      	movs	r2, #0
   254a8:	4b42      	ldr	r3, [pc, #264]	; (255b4 <atan+0x330>)
   254aa:	f002 fd8b 	bl	27fc4 <__aeabi_dsub>
   254ae:	2200      	movs	r2, #0
   254b0:	0006      	movs	r6, r0
   254b2:	000f      	movs	r7, r1
   254b4:	4b3f      	ldr	r3, [pc, #252]	; (255b4 <atan+0x330>)
   254b6:	0020      	movs	r0, r4
   254b8:	0029      	movs	r1, r5
   254ba:	f002 fb03 	bl	27ac4 <__aeabi_dmul>
   254be:	2200      	movs	r2, #0
   254c0:	4b37      	ldr	r3, [pc, #220]	; (255a0 <atan+0x31c>)
   254c2:	f001 fbbb 	bl	26c3c <__aeabi_dadd>
   254c6:	000b      	movs	r3, r1
   254c8:	0002      	movs	r2, r0
   254ca:	0039      	movs	r1, r7
   254cc:	0030      	movs	r0, r6
   254ce:	f001 fec5 	bl	2725c <__aeabi_ddiv>
   254d2:	2302      	movs	r3, #2
   254d4:	4680      	mov	r8, r0
   254d6:	4689      	mov	r9, r1
   254d8:	469b      	mov	fp, r3
   254da:	e6f9      	b.n	252d0 <atan+0x4c>
   254dc:	000b      	movs	r3, r1
   254de:	0002      	movs	r2, r0
   254e0:	4935      	ldr	r1, [pc, #212]	; (255b8 <atan+0x334>)
   254e2:	2000      	movs	r0, #0
   254e4:	f001 feba 	bl	2725c <__aeabi_ddiv>
   254e8:	2303      	movs	r3, #3
   254ea:	4680      	mov	r8, r0
   254ec:	4689      	mov	r9, r1
   254ee:	469b      	mov	fp, r3
   254f0:	e6ee      	b.n	252d0 <atan+0x4c>
   254f2:	2200      	movs	r2, #0
   254f4:	4b2a      	ldr	r3, [pc, #168]	; (255a0 <atan+0x31c>)
   254f6:	f002 fd65 	bl	27fc4 <__aeabi_dsub>
   254fa:	2200      	movs	r2, #0
   254fc:	0006      	movs	r6, r0
   254fe:	000f      	movs	r7, r1
   25500:	4b27      	ldr	r3, [pc, #156]	; (255a0 <atan+0x31c>)
   25502:	0020      	movs	r0, r4
   25504:	0029      	movs	r1, r5
   25506:	f001 fb99 	bl	26c3c <__aeabi_dadd>
   2550a:	000b      	movs	r3, r1
   2550c:	0002      	movs	r2, r0
   2550e:	0039      	movs	r1, r7
   25510:	0030      	movs	r0, r6
   25512:	f001 fea3 	bl	2725c <__aeabi_ddiv>
   25516:	2301      	movs	r3, #1
   25518:	4680      	mov	r8, r0
   2551a:	4689      	mov	r9, r1
   2551c:	469b      	mov	fp, r3
   2551e:	e6d7      	b.n	252d0 <atan+0x4c>
   25520:	440fffff 	.word	0x440fffff
   25524:	7ff00000 	.word	0x7ff00000
   25528:	54442d18 	.word	0x54442d18
   2552c:	3ff921fb 	.word	0x3ff921fb
   25530:	3fdbffff 	.word	0x3fdbffff
   25534:	3e1fffff 	.word	0x3e1fffff
   25538:	e322da11 	.word	0xe322da11
   2553c:	3f90ad3a 	.word	0x3f90ad3a
   25540:	24760deb 	.word	0x24760deb
   25544:	3fa97b4b 	.word	0x3fa97b4b
   25548:	a0d03d51 	.word	0xa0d03d51
   2554c:	3fb10d66 	.word	0x3fb10d66
   25550:	c54c206e 	.word	0xc54c206e
   25554:	3fb745cd 	.word	0x3fb745cd
   25558:	920083ff 	.word	0x920083ff
   2555c:	3fc24924 	.word	0x3fc24924
   25560:	5555550d 	.word	0x5555550d
   25564:	3fd55555 	.word	0x3fd55555
   25568:	2c6a6c2f 	.word	0x2c6a6c2f
   2556c:	bfa2b444 	.word	0xbfa2b444
   25570:	52defd9a 	.word	0x52defd9a
   25574:	3fadde2d 	.word	0x3fadde2d
   25578:	af749a6d 	.word	0xaf749a6d
   2557c:	3fb3b0f2 	.word	0x3fb3b0f2
   25580:	fe231671 	.word	0xfe231671
   25584:	3fbc71c6 	.word	0x3fbc71c6
   25588:	9998ebc4 	.word	0x9998ebc4
   2558c:	3fc99999 	.word	0x3fc99999
   25590:	0002f9c8 	.word	0x0002f9c8
   25594:	0002f9e8 	.word	0x0002f9e8
   25598:	8800759c 	.word	0x8800759c
   2559c:	7e37e43c 	.word	0x7e37e43c
   255a0:	3ff00000 	.word	0x3ff00000
   255a4:	3ff2ffff 	.word	0x3ff2ffff
   255a8:	3fe5ffff 	.word	0x3fe5ffff
   255ac:	bff921fb 	.word	0xbff921fb
   255b0:	40037fff 	.word	0x40037fff
   255b4:	3ff80000 	.word	0x3ff80000
   255b8:	bff00000 	.word	0xbff00000

000255bc <fabs>:
   255bc:	0049      	lsls	r1, r1, #1
   255be:	084b      	lsrs	r3, r1, #1
   255c0:	0019      	movs	r1, r3
   255c2:	4770      	bx	lr

000255c4 <finite>:
   255c4:	4b03      	ldr	r3, [pc, #12]	; (255d4 <finite+0x10>)
   255c6:	0048      	lsls	r0, r1, #1
   255c8:	469c      	mov	ip, r3
   255ca:	0840      	lsrs	r0, r0, #1
   255cc:	4460      	add	r0, ip
   255ce:	0fc0      	lsrs	r0, r0, #31
   255d0:	4770      	bx	lr
   255d2:	46c0      	nop			; (mov r8, r8)
   255d4:	80100000 	.word	0x80100000

000255d8 <floor>:
   255d8:	4a45      	ldr	r2, [pc, #276]	; (256f0 <floor+0x118>)
   255da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   255dc:	4657      	mov	r7, sl
   255de:	4692      	mov	sl, r2
   255e0:	004b      	lsls	r3, r1, #1
   255e2:	0d5b      	lsrs	r3, r3, #21
   255e4:	449a      	add	sl, r3
   255e6:	464e      	mov	r6, r9
   255e8:	4645      	mov	r5, r8
   255ea:	46de      	mov	lr, fp
   255ec:	4652      	mov	r2, sl
   255ee:	b5e0      	push	{r5, r6, r7, lr}
   255f0:	000c      	movs	r4, r1
   255f2:	0005      	movs	r5, r0
   255f4:	000e      	movs	r6, r1
   255f6:	4689      	mov	r9, r1
   255f8:	0007      	movs	r7, r0
   255fa:	2a13      	cmp	r2, #19
   255fc:	dc22      	bgt.n	25644 <floor+0x6c>
   255fe:	2a00      	cmp	r2, #0
   25600:	db47      	blt.n	25692 <floor+0xba>
   25602:	4652      	mov	r2, sl
   25604:	4b3b      	ldr	r3, [pc, #236]	; (256f4 <floor+0x11c>)
   25606:	4113      	asrs	r3, r2
   25608:	4698      	mov	r8, r3
   2560a:	000b      	movs	r3, r1
   2560c:	4642      	mov	r2, r8
   2560e:	4013      	ands	r3, r2
   25610:	4303      	orrs	r3, r0
   25612:	d011      	beq.n	25638 <floor+0x60>
   25614:	4a38      	ldr	r2, [pc, #224]	; (256f8 <floor+0x120>)
   25616:	4b39      	ldr	r3, [pc, #228]	; (256fc <floor+0x124>)
   25618:	f001 fb10 	bl	26c3c <__aeabi_dadd>
   2561c:	2200      	movs	r2, #0
   2561e:	2300      	movs	r3, #0
   25620:	f000 fb2c 	bl	25c7c <__aeabi_dcmpgt>
   25624:	2800      	cmp	r0, #0
   25626:	d005      	beq.n	25634 <floor+0x5c>
   25628:	2c00      	cmp	r4, #0
   2562a:	db41      	blt.n	256b0 <floor+0xd8>
   2562c:	464e      	mov	r6, r9
   2562e:	4643      	mov	r3, r8
   25630:	2700      	movs	r7, #0
   25632:	439e      	bics	r6, r3
   25634:	0038      	movs	r0, r7
   25636:	0031      	movs	r1, r6
   25638:	bc3c      	pop	{r2, r3, r4, r5}
   2563a:	4690      	mov	r8, r2
   2563c:	4699      	mov	r9, r3
   2563e:	46a2      	mov	sl, r4
   25640:	46ab      	mov	fp, r5
   25642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25644:	4652      	mov	r2, sl
   25646:	2a33      	cmp	r2, #51	; 0x33
   25648:	dd08      	ble.n	2565c <floor+0x84>
   2564a:	2380      	movs	r3, #128	; 0x80
   2564c:	00db      	lsls	r3, r3, #3
   2564e:	459a      	cmp	sl, r3
   25650:	d1f2      	bne.n	25638 <floor+0x60>
   25652:	0002      	movs	r2, r0
   25654:	000b      	movs	r3, r1
   25656:	f001 faf1 	bl	26c3c <__aeabi_dadd>
   2565a:	e7ed      	b.n	25638 <floor+0x60>
   2565c:	4a28      	ldr	r2, [pc, #160]	; (25700 <floor+0x128>)
   2565e:	4694      	mov	ip, r2
   25660:	2201      	movs	r2, #1
   25662:	4463      	add	r3, ip
   25664:	4252      	negs	r2, r2
   25666:	40da      	lsrs	r2, r3
   25668:	4693      	mov	fp, r2
   2566a:	4202      	tst	r2, r0
   2566c:	d0e4      	beq.n	25638 <floor+0x60>
   2566e:	4a22      	ldr	r2, [pc, #136]	; (256f8 <floor+0x120>)
   25670:	4b22      	ldr	r3, [pc, #136]	; (256fc <floor+0x124>)
   25672:	f001 fae3 	bl	26c3c <__aeabi_dadd>
   25676:	2200      	movs	r2, #0
   25678:	2300      	movs	r3, #0
   2567a:	f000 faff 	bl	25c7c <__aeabi_dcmpgt>
   2567e:	2800      	cmp	r0, #0
   25680:	d0d8      	beq.n	25634 <floor+0x5c>
   25682:	2c00      	cmp	r4, #0
   25684:	db1a      	blt.n	256bc <floor+0xe4>
   25686:	465b      	mov	r3, fp
   25688:	464e      	mov	r6, r9
   2568a:	439f      	bics	r7, r3
   2568c:	0038      	movs	r0, r7
   2568e:	0031      	movs	r1, r6
   25690:	e7d2      	b.n	25638 <floor+0x60>
   25692:	4a19      	ldr	r2, [pc, #100]	; (256f8 <floor+0x120>)
   25694:	4b19      	ldr	r3, [pc, #100]	; (256fc <floor+0x124>)
   25696:	f001 fad1 	bl	26c3c <__aeabi_dadd>
   2569a:	2200      	movs	r2, #0
   2569c:	2300      	movs	r3, #0
   2569e:	f000 faed 	bl	25c7c <__aeabi_dcmpgt>
   256a2:	2800      	cmp	r0, #0
   256a4:	d0c6      	beq.n	25634 <floor+0x5c>
   256a6:	2c00      	cmp	r4, #0
   256a8:	db16      	blt.n	256d8 <floor+0x100>
   256aa:	2700      	movs	r7, #0
   256ac:	2600      	movs	r6, #0
   256ae:	e7c1      	b.n	25634 <floor+0x5c>
   256b0:	2380      	movs	r3, #128	; 0x80
   256b2:	4652      	mov	r2, sl
   256b4:	035b      	lsls	r3, r3, #13
   256b6:	4113      	asrs	r3, r2
   256b8:	4499      	add	r9, r3
   256ba:	e7b7      	b.n	2562c <floor+0x54>
   256bc:	4653      	mov	r3, sl
   256be:	2b14      	cmp	r3, #20
   256c0:	d012      	beq.n	256e8 <floor+0x110>
   256c2:	2334      	movs	r3, #52	; 0x34
   256c4:	4652      	mov	r2, sl
   256c6:	2701      	movs	r7, #1
   256c8:	1a9b      	subs	r3, r3, r2
   256ca:	409f      	lsls	r7, r3
   256cc:	197f      	adds	r7, r7, r5
   256ce:	42af      	cmp	r7, r5
   256d0:	419b      	sbcs	r3, r3
   256d2:	425b      	negs	r3, r3
   256d4:	4499      	add	r9, r3
   256d6:	e7d6      	b.n	25686 <floor+0xae>
   256d8:	0064      	lsls	r4, r4, #1
   256da:	0864      	lsrs	r4, r4, #1
   256dc:	4325      	orrs	r5, r4
   256de:	2700      	movs	r7, #0
   256e0:	2d00      	cmp	r5, #0
   256e2:	d0a7      	beq.n	25634 <floor+0x5c>
   256e4:	4e07      	ldr	r6, [pc, #28]	; (25704 <floor+0x12c>)
   256e6:	e7a5      	b.n	25634 <floor+0x5c>
   256e8:	3b13      	subs	r3, #19
   256ea:	469c      	mov	ip, r3
   256ec:	44e1      	add	r9, ip
   256ee:	e7ca      	b.n	25686 <floor+0xae>
   256f0:	fffffc01 	.word	0xfffffc01
   256f4:	000fffff 	.word	0x000fffff
   256f8:	8800759c 	.word	0x8800759c
   256fc:	7e37e43c 	.word	0x7e37e43c
   25700:	fffffbed 	.word	0xfffffbed
   25704:	bff00000 	.word	0xbff00000

00025708 <matherr>:
   25708:	2000      	movs	r0, #0
   2570a:	4770      	bx	lr

0002570c <nan>:
   2570c:	2000      	movs	r0, #0
   2570e:	4901      	ldr	r1, [pc, #4]	; (25714 <nan+0x8>)
   25710:	4770      	bx	lr
   25712:	46c0      	nop			; (mov r8, r8)
   25714:	7ff80000 	.word	0x7ff80000

00025718 <rint>:
   25718:	b5f0      	push	{r4, r5, r6, r7, lr}
   2571a:	46c6      	mov	lr, r8
   2571c:	b500      	push	{lr}
   2571e:	0fcb      	lsrs	r3, r1, #31
   25720:	4698      	mov	r8, r3
   25722:	4c4a      	ldr	r4, [pc, #296]	; (2584c <rint+0x134>)
   25724:	004b      	lsls	r3, r1, #1
   25726:	0d5b      	lsrs	r3, r3, #21
   25728:	191e      	adds	r6, r3, r4
   2572a:	b082      	sub	sp, #8
   2572c:	0007      	movs	r7, r0
   2572e:	000a      	movs	r2, r1
   25730:	2e13      	cmp	r6, #19
   25732:	dc35      	bgt.n	257a0 <rint+0x88>
   25734:	2e00      	cmp	r6, #0
   25736:	db57      	blt.n	257e8 <rint+0xd0>
   25738:	4b45      	ldr	r3, [pc, #276]	; (25850 <rint+0x138>)
   2573a:	0004      	movs	r4, r0
   2573c:	4133      	asrs	r3, r6
   2573e:	001f      	movs	r7, r3
   25740:	400f      	ands	r7, r1
   25742:	4307      	orrs	r7, r0
   25744:	000d      	movs	r5, r1
   25746:	2f00      	cmp	r7, #0
   25748:	d024      	beq.n	25794 <rint+0x7c>
   2574a:	085b      	lsrs	r3, r3, #1
   2574c:	001c      	movs	r4, r3
   2574e:	400c      	ands	r4, r1
   25750:	4320      	orrs	r0, r4
   25752:	2700      	movs	r7, #0
   25754:	2800      	cmp	r0, #0
   25756:	d007      	beq.n	25768 <rint+0x50>
   25758:	2e13      	cmp	r6, #19
   2575a:	d100      	bne.n	2575e <rint+0x46>
   2575c:	e073      	b.n	25846 <rint+0x12e>
   2575e:	2280      	movs	r2, #128	; 0x80
   25760:	02d2      	lsls	r2, r2, #11
   25762:	4132      	asrs	r2, r6
   25764:	4399      	bics	r1, r3
   25766:	430a      	orrs	r2, r1
   25768:	4643      	mov	r3, r8
   2576a:	00de      	lsls	r6, r3, #3
   2576c:	4b39      	ldr	r3, [pc, #228]	; (25854 <rint+0x13c>)
   2576e:	0011      	movs	r1, r2
   25770:	199e      	adds	r6, r3, r6
   25772:	6834      	ldr	r4, [r6, #0]
   25774:	6875      	ldr	r5, [r6, #4]
   25776:	0038      	movs	r0, r7
   25778:	0022      	movs	r2, r4
   2577a:	002b      	movs	r3, r5
   2577c:	f001 fa5e 	bl	26c3c <__aeabi_dadd>
   25780:	9000      	str	r0, [sp, #0]
   25782:	9101      	str	r1, [sp, #4]
   25784:	9800      	ldr	r0, [sp, #0]
   25786:	9901      	ldr	r1, [sp, #4]
   25788:	0022      	movs	r2, r4
   2578a:	002b      	movs	r3, r5
   2578c:	f002 fc1a 	bl	27fc4 <__aeabi_dsub>
   25790:	0004      	movs	r4, r0
   25792:	000d      	movs	r5, r1
   25794:	0020      	movs	r0, r4
   25796:	0029      	movs	r1, r5
   25798:	b002      	add	sp, #8
   2579a:	bc04      	pop	{r2}
   2579c:	4690      	mov	r8, r2
   2579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   257a0:	2e33      	cmp	r6, #51	; 0x33
   257a2:	dd0c      	ble.n	257be <rint+0xa6>
   257a4:	2380      	movs	r3, #128	; 0x80
   257a6:	0004      	movs	r4, r0
   257a8:	00db      	lsls	r3, r3, #3
   257aa:	000d      	movs	r5, r1
   257ac:	429e      	cmp	r6, r3
   257ae:	d1f1      	bne.n	25794 <rint+0x7c>
   257b0:	0002      	movs	r2, r0
   257b2:	000b      	movs	r3, r1
   257b4:	f001 fa42 	bl	26c3c <__aeabi_dadd>
   257b8:	0004      	movs	r4, r0
   257ba:	000d      	movs	r5, r1
   257bc:	e7ea      	b.n	25794 <rint+0x7c>
   257be:	4c26      	ldr	r4, [pc, #152]	; (25858 <rint+0x140>)
   257c0:	000d      	movs	r5, r1
   257c2:	46a4      	mov	ip, r4
   257c4:	2401      	movs	r4, #1
   257c6:	4463      	add	r3, ip
   257c8:	4264      	negs	r4, r4
   257ca:	40dc      	lsrs	r4, r3
   257cc:	46a4      	mov	ip, r4
   257ce:	4661      	mov	r1, ip
   257d0:	0004      	movs	r4, r0
   257d2:	4201      	tst	r1, r0
   257d4:	d0de      	beq.n	25794 <rint+0x7c>
   257d6:	0849      	lsrs	r1, r1, #1
   257d8:	4201      	tst	r1, r0
   257da:	d0c5      	beq.n	25768 <rint+0x50>
   257dc:	2780      	movs	r7, #128	; 0x80
   257de:	05ff      	lsls	r7, r7, #23
   257e0:	411f      	asrs	r7, r3
   257e2:	4388      	bics	r0, r1
   257e4:	4307      	orrs	r7, r0
   257e6:	e7bf      	b.n	25768 <rint+0x50>
   257e8:	004b      	lsls	r3, r1, #1
   257ea:	085b      	lsrs	r3, r3, #1
   257ec:	4303      	orrs	r3, r0
   257ee:	0004      	movs	r4, r0
   257f0:	000d      	movs	r5, r1
   257f2:	2b00      	cmp	r3, #0
   257f4:	d0ce      	beq.n	25794 <rint+0x7c>
   257f6:	030b      	lsls	r3, r1, #12
   257f8:	0b1b      	lsrs	r3, r3, #12
   257fa:	4303      	orrs	r3, r0
   257fc:	001a      	movs	r2, r3
   257fe:	425b      	negs	r3, r3
   25800:	4313      	orrs	r3, r2
   25802:	2280      	movs	r2, #128	; 0x80
   25804:	0b1b      	lsrs	r3, r3, #12
   25806:	0312      	lsls	r2, r2, #12
   25808:	4013      	ands	r3, r2
   2580a:	0c4a      	lsrs	r2, r1, #17
   2580c:	0452      	lsls	r2, r2, #17
   2580e:	4313      	orrs	r3, r2
   25810:	0019      	movs	r1, r3
   25812:	4643      	mov	r3, r8
   25814:	00da      	lsls	r2, r3, #3
   25816:	4b0f      	ldr	r3, [pc, #60]	; (25854 <rint+0x13c>)
   25818:	189b      	adds	r3, r3, r2
   2581a:	681c      	ldr	r4, [r3, #0]
   2581c:	685d      	ldr	r5, [r3, #4]
   2581e:	0022      	movs	r2, r4
   25820:	002b      	movs	r3, r5
   25822:	f001 fa0b 	bl	26c3c <__aeabi_dadd>
   25826:	9000      	str	r0, [sp, #0]
   25828:	9101      	str	r1, [sp, #4]
   2582a:	9800      	ldr	r0, [sp, #0]
   2582c:	9901      	ldr	r1, [sp, #4]
   2582e:	0022      	movs	r2, r4
   25830:	002b      	movs	r3, r5
   25832:	f002 fbc7 	bl	27fc4 <__aeabi_dsub>
   25836:	4642      	mov	r2, r8
   25838:	004b      	lsls	r3, r1, #1
   2583a:	085b      	lsrs	r3, r3, #1
   2583c:	07d6      	lsls	r6, r2, #31
   2583e:	4333      	orrs	r3, r6
   25840:	0004      	movs	r4, r0
   25842:	001d      	movs	r5, r3
   25844:	e7a6      	b.n	25794 <rint+0x7c>
   25846:	2780      	movs	r7, #128	; 0x80
   25848:	063f      	lsls	r7, r7, #24
   2584a:	e788      	b.n	2575e <rint+0x46>
   2584c:	fffffc01 	.word	0xfffffc01
   25850:	000fffff 	.word	0x000fffff
   25854:	0002fa08 	.word	0x0002fa08
   25858:	fffffbed 	.word	0xfffffbed

0002585c <scalbn>:
   2585c:	004b      	lsls	r3, r1, #1
   2585e:	b570      	push	{r4, r5, r6, lr}
   25860:	0d5b      	lsrs	r3, r3, #21
   25862:	0014      	movs	r4, r2
   25864:	000a      	movs	r2, r1
   25866:	2b00      	cmp	r3, #0
   25868:	d11a      	bne.n	258a0 <scalbn+0x44>
   2586a:	004b      	lsls	r3, r1, #1
   2586c:	085b      	lsrs	r3, r3, #1
   2586e:	4303      	orrs	r3, r0
   25870:	d015      	beq.n	2589e <scalbn+0x42>
   25872:	2200      	movs	r2, #0
   25874:	4b22      	ldr	r3, [pc, #136]	; (25900 <scalbn+0xa4>)
   25876:	f002 f925 	bl	27ac4 <__aeabi_dmul>
   2587a:	4b22      	ldr	r3, [pc, #136]	; (25904 <scalbn+0xa8>)
   2587c:	000a      	movs	r2, r1
   2587e:	429c      	cmp	r4, r3
   25880:	db22      	blt.n	258c8 <scalbn+0x6c>
   25882:	004b      	lsls	r3, r1, #1
   25884:	0d5b      	lsrs	r3, r3, #21
   25886:	3b36      	subs	r3, #54	; 0x36
   25888:	4d1f      	ldr	r5, [pc, #124]	; (25908 <scalbn+0xac>)
   2588a:	18e3      	adds	r3, r4, r3
   2588c:	42ab      	cmp	r3, r5
   2588e:	dc20      	bgt.n	258d2 <scalbn+0x76>
   25890:	2b00      	cmp	r3, #0
   25892:	dd0d      	ble.n	258b0 <scalbn+0x54>
   25894:	4c1d      	ldr	r4, [pc, #116]	; (2590c <scalbn+0xb0>)
   25896:	051b      	lsls	r3, r3, #20
   25898:	4022      	ands	r2, r4
   2589a:	431a      	orrs	r2, r3
   2589c:	0011      	movs	r1, r2
   2589e:	bd70      	pop	{r4, r5, r6, pc}
   258a0:	4d1b      	ldr	r5, [pc, #108]	; (25910 <scalbn+0xb4>)
   258a2:	42ab      	cmp	r3, r5
   258a4:	d1f0      	bne.n	25888 <scalbn+0x2c>
   258a6:	0002      	movs	r2, r0
   258a8:	000b      	movs	r3, r1
   258aa:	f001 f9c7 	bl	26c3c <__aeabi_dadd>
   258ae:	e7f6      	b.n	2589e <scalbn+0x42>
   258b0:	001d      	movs	r5, r3
   258b2:	3535      	adds	r5, #53	; 0x35
   258b4:	da18      	bge.n	258e8 <scalbn+0x8c>
   258b6:	4b17      	ldr	r3, [pc, #92]	; (25914 <scalbn+0xb8>)
   258b8:	0002      	movs	r2, r0
   258ba:	429c      	cmp	r4, r3
   258bc:	dc0a      	bgt.n	258d4 <scalbn+0x78>
   258be:	000b      	movs	r3, r1
   258c0:	4815      	ldr	r0, [pc, #84]	; (25918 <scalbn+0xbc>)
   258c2:	4916      	ldr	r1, [pc, #88]	; (2591c <scalbn+0xc0>)
   258c4:	f000 f832 	bl	2592c <copysign>
   258c8:	4a13      	ldr	r2, [pc, #76]	; (25918 <scalbn+0xbc>)
   258ca:	4b14      	ldr	r3, [pc, #80]	; (2591c <scalbn+0xc0>)
   258cc:	f002 f8fa 	bl	27ac4 <__aeabi_dmul>
   258d0:	e7e5      	b.n	2589e <scalbn+0x42>
   258d2:	0002      	movs	r2, r0
   258d4:	000b      	movs	r3, r1
   258d6:	4812      	ldr	r0, [pc, #72]	; (25920 <scalbn+0xc4>)
   258d8:	4912      	ldr	r1, [pc, #72]	; (25924 <scalbn+0xc8>)
   258da:	f000 f827 	bl	2592c <copysign>
   258de:	4a10      	ldr	r2, [pc, #64]	; (25920 <scalbn+0xc4>)
   258e0:	4b10      	ldr	r3, [pc, #64]	; (25924 <scalbn+0xc8>)
   258e2:	f002 f8ef 	bl	27ac4 <__aeabi_dmul>
   258e6:	e7da      	b.n	2589e <scalbn+0x42>
   258e8:	4c08      	ldr	r4, [pc, #32]	; (2590c <scalbn+0xb0>)
   258ea:	3336      	adds	r3, #54	; 0x36
   258ec:	4022      	ands	r2, r4
   258ee:	051b      	lsls	r3, r3, #20
   258f0:	4313      	orrs	r3, r2
   258f2:	0019      	movs	r1, r3
   258f4:	2200      	movs	r2, #0
   258f6:	4b0c      	ldr	r3, [pc, #48]	; (25928 <scalbn+0xcc>)
   258f8:	f002 f8e4 	bl	27ac4 <__aeabi_dmul>
   258fc:	e7cf      	b.n	2589e <scalbn+0x42>
   258fe:	46c0      	nop			; (mov r8, r8)
   25900:	43500000 	.word	0x43500000
   25904:	ffff3cb0 	.word	0xffff3cb0
   25908:	000007fe 	.word	0x000007fe
   2590c:	800fffff 	.word	0x800fffff
   25910:	000007ff 	.word	0x000007ff
   25914:	0000c350 	.word	0x0000c350
   25918:	c2f8f359 	.word	0xc2f8f359
   2591c:	01a56e1f 	.word	0x01a56e1f
   25920:	8800759c 	.word	0x8800759c
   25924:	7e37e43c 	.word	0x7e37e43c
   25928:	3c900000 	.word	0x3c900000

0002592c <copysign>:
   2592c:	b530      	push	{r4, r5, lr}
   2592e:	004a      	lsls	r2, r1, #1
   25930:	0fdb      	lsrs	r3, r3, #31
   25932:	07db      	lsls	r3, r3, #31
   25934:	0852      	lsrs	r2, r2, #1
   25936:	431a      	orrs	r2, r3
   25938:	0011      	movs	r1, r2
   2593a:	bd30      	pop	{r4, r5, pc}

0002593c <__udivsi3>:
   2593c:	2200      	movs	r2, #0
   2593e:	0843      	lsrs	r3, r0, #1
   25940:	428b      	cmp	r3, r1
   25942:	d374      	bcc.n	25a2e <__udivsi3+0xf2>
   25944:	0903      	lsrs	r3, r0, #4
   25946:	428b      	cmp	r3, r1
   25948:	d35f      	bcc.n	25a0a <__udivsi3+0xce>
   2594a:	0a03      	lsrs	r3, r0, #8
   2594c:	428b      	cmp	r3, r1
   2594e:	d344      	bcc.n	259da <__udivsi3+0x9e>
   25950:	0b03      	lsrs	r3, r0, #12
   25952:	428b      	cmp	r3, r1
   25954:	d328      	bcc.n	259a8 <__udivsi3+0x6c>
   25956:	0c03      	lsrs	r3, r0, #16
   25958:	428b      	cmp	r3, r1
   2595a:	d30d      	bcc.n	25978 <__udivsi3+0x3c>
   2595c:	22ff      	movs	r2, #255	; 0xff
   2595e:	0209      	lsls	r1, r1, #8
   25960:	ba12      	rev	r2, r2
   25962:	0c03      	lsrs	r3, r0, #16
   25964:	428b      	cmp	r3, r1
   25966:	d302      	bcc.n	2596e <__udivsi3+0x32>
   25968:	1212      	asrs	r2, r2, #8
   2596a:	0209      	lsls	r1, r1, #8
   2596c:	d065      	beq.n	25a3a <__udivsi3+0xfe>
   2596e:	0b03      	lsrs	r3, r0, #12
   25970:	428b      	cmp	r3, r1
   25972:	d319      	bcc.n	259a8 <__udivsi3+0x6c>
   25974:	e000      	b.n	25978 <__udivsi3+0x3c>
   25976:	0a09      	lsrs	r1, r1, #8
   25978:	0bc3      	lsrs	r3, r0, #15
   2597a:	428b      	cmp	r3, r1
   2597c:	d301      	bcc.n	25982 <__udivsi3+0x46>
   2597e:	03cb      	lsls	r3, r1, #15
   25980:	1ac0      	subs	r0, r0, r3
   25982:	4152      	adcs	r2, r2
   25984:	0b83      	lsrs	r3, r0, #14
   25986:	428b      	cmp	r3, r1
   25988:	d301      	bcc.n	2598e <__udivsi3+0x52>
   2598a:	038b      	lsls	r3, r1, #14
   2598c:	1ac0      	subs	r0, r0, r3
   2598e:	4152      	adcs	r2, r2
   25990:	0b43      	lsrs	r3, r0, #13
   25992:	428b      	cmp	r3, r1
   25994:	d301      	bcc.n	2599a <__udivsi3+0x5e>
   25996:	034b      	lsls	r3, r1, #13
   25998:	1ac0      	subs	r0, r0, r3
   2599a:	4152      	adcs	r2, r2
   2599c:	0b03      	lsrs	r3, r0, #12
   2599e:	428b      	cmp	r3, r1
   259a0:	d301      	bcc.n	259a6 <__udivsi3+0x6a>
   259a2:	030b      	lsls	r3, r1, #12
   259a4:	1ac0      	subs	r0, r0, r3
   259a6:	4152      	adcs	r2, r2
   259a8:	0ac3      	lsrs	r3, r0, #11
   259aa:	428b      	cmp	r3, r1
   259ac:	d301      	bcc.n	259b2 <__udivsi3+0x76>
   259ae:	02cb      	lsls	r3, r1, #11
   259b0:	1ac0      	subs	r0, r0, r3
   259b2:	4152      	adcs	r2, r2
   259b4:	0a83      	lsrs	r3, r0, #10
   259b6:	428b      	cmp	r3, r1
   259b8:	d301      	bcc.n	259be <__udivsi3+0x82>
   259ba:	028b      	lsls	r3, r1, #10
   259bc:	1ac0      	subs	r0, r0, r3
   259be:	4152      	adcs	r2, r2
   259c0:	0a43      	lsrs	r3, r0, #9
   259c2:	428b      	cmp	r3, r1
   259c4:	d301      	bcc.n	259ca <__udivsi3+0x8e>
   259c6:	024b      	lsls	r3, r1, #9
   259c8:	1ac0      	subs	r0, r0, r3
   259ca:	4152      	adcs	r2, r2
   259cc:	0a03      	lsrs	r3, r0, #8
   259ce:	428b      	cmp	r3, r1
   259d0:	d301      	bcc.n	259d6 <__udivsi3+0x9a>
   259d2:	020b      	lsls	r3, r1, #8
   259d4:	1ac0      	subs	r0, r0, r3
   259d6:	4152      	adcs	r2, r2
   259d8:	d2cd      	bcs.n	25976 <__udivsi3+0x3a>
   259da:	09c3      	lsrs	r3, r0, #7
   259dc:	428b      	cmp	r3, r1
   259de:	d301      	bcc.n	259e4 <__udivsi3+0xa8>
   259e0:	01cb      	lsls	r3, r1, #7
   259e2:	1ac0      	subs	r0, r0, r3
   259e4:	4152      	adcs	r2, r2
   259e6:	0983      	lsrs	r3, r0, #6
   259e8:	428b      	cmp	r3, r1
   259ea:	d301      	bcc.n	259f0 <__udivsi3+0xb4>
   259ec:	018b      	lsls	r3, r1, #6
   259ee:	1ac0      	subs	r0, r0, r3
   259f0:	4152      	adcs	r2, r2
   259f2:	0943      	lsrs	r3, r0, #5
   259f4:	428b      	cmp	r3, r1
   259f6:	d301      	bcc.n	259fc <__udivsi3+0xc0>
   259f8:	014b      	lsls	r3, r1, #5
   259fa:	1ac0      	subs	r0, r0, r3
   259fc:	4152      	adcs	r2, r2
   259fe:	0903      	lsrs	r3, r0, #4
   25a00:	428b      	cmp	r3, r1
   25a02:	d301      	bcc.n	25a08 <__udivsi3+0xcc>
   25a04:	010b      	lsls	r3, r1, #4
   25a06:	1ac0      	subs	r0, r0, r3
   25a08:	4152      	adcs	r2, r2
   25a0a:	08c3      	lsrs	r3, r0, #3
   25a0c:	428b      	cmp	r3, r1
   25a0e:	d301      	bcc.n	25a14 <__udivsi3+0xd8>
   25a10:	00cb      	lsls	r3, r1, #3
   25a12:	1ac0      	subs	r0, r0, r3
   25a14:	4152      	adcs	r2, r2
   25a16:	0883      	lsrs	r3, r0, #2
   25a18:	428b      	cmp	r3, r1
   25a1a:	d301      	bcc.n	25a20 <__udivsi3+0xe4>
   25a1c:	008b      	lsls	r3, r1, #2
   25a1e:	1ac0      	subs	r0, r0, r3
   25a20:	4152      	adcs	r2, r2
   25a22:	0843      	lsrs	r3, r0, #1
   25a24:	428b      	cmp	r3, r1
   25a26:	d301      	bcc.n	25a2c <__udivsi3+0xf0>
   25a28:	004b      	lsls	r3, r1, #1
   25a2a:	1ac0      	subs	r0, r0, r3
   25a2c:	4152      	adcs	r2, r2
   25a2e:	1a41      	subs	r1, r0, r1
   25a30:	d200      	bcs.n	25a34 <__udivsi3+0xf8>
   25a32:	4601      	mov	r1, r0
   25a34:	4152      	adcs	r2, r2
   25a36:	4610      	mov	r0, r2
   25a38:	4770      	bx	lr
   25a3a:	e7ff      	b.n	25a3c <__udivsi3+0x100>
   25a3c:	b501      	push	{r0, lr}
   25a3e:	2000      	movs	r0, #0
   25a40:	f000 f8f0 	bl	25c24 <__aeabi_idiv0>
   25a44:	bd02      	pop	{r1, pc}
   25a46:	46c0      	nop			; (mov r8, r8)

00025a48 <__aeabi_uidivmod>:
   25a48:	2900      	cmp	r1, #0
   25a4a:	d0f7      	beq.n	25a3c <__udivsi3+0x100>
   25a4c:	e776      	b.n	2593c <__udivsi3>
   25a4e:	4770      	bx	lr

00025a50 <__divsi3>:
   25a50:	4603      	mov	r3, r0
   25a52:	430b      	orrs	r3, r1
   25a54:	d47f      	bmi.n	25b56 <__divsi3+0x106>
   25a56:	2200      	movs	r2, #0
   25a58:	0843      	lsrs	r3, r0, #1
   25a5a:	428b      	cmp	r3, r1
   25a5c:	d374      	bcc.n	25b48 <__divsi3+0xf8>
   25a5e:	0903      	lsrs	r3, r0, #4
   25a60:	428b      	cmp	r3, r1
   25a62:	d35f      	bcc.n	25b24 <__divsi3+0xd4>
   25a64:	0a03      	lsrs	r3, r0, #8
   25a66:	428b      	cmp	r3, r1
   25a68:	d344      	bcc.n	25af4 <__divsi3+0xa4>
   25a6a:	0b03      	lsrs	r3, r0, #12
   25a6c:	428b      	cmp	r3, r1
   25a6e:	d328      	bcc.n	25ac2 <__divsi3+0x72>
   25a70:	0c03      	lsrs	r3, r0, #16
   25a72:	428b      	cmp	r3, r1
   25a74:	d30d      	bcc.n	25a92 <__divsi3+0x42>
   25a76:	22ff      	movs	r2, #255	; 0xff
   25a78:	0209      	lsls	r1, r1, #8
   25a7a:	ba12      	rev	r2, r2
   25a7c:	0c03      	lsrs	r3, r0, #16
   25a7e:	428b      	cmp	r3, r1
   25a80:	d302      	bcc.n	25a88 <__divsi3+0x38>
   25a82:	1212      	asrs	r2, r2, #8
   25a84:	0209      	lsls	r1, r1, #8
   25a86:	d065      	beq.n	25b54 <__divsi3+0x104>
   25a88:	0b03      	lsrs	r3, r0, #12
   25a8a:	428b      	cmp	r3, r1
   25a8c:	d319      	bcc.n	25ac2 <__divsi3+0x72>
   25a8e:	e000      	b.n	25a92 <__divsi3+0x42>
   25a90:	0a09      	lsrs	r1, r1, #8
   25a92:	0bc3      	lsrs	r3, r0, #15
   25a94:	428b      	cmp	r3, r1
   25a96:	d301      	bcc.n	25a9c <__divsi3+0x4c>
   25a98:	03cb      	lsls	r3, r1, #15
   25a9a:	1ac0      	subs	r0, r0, r3
   25a9c:	4152      	adcs	r2, r2
   25a9e:	0b83      	lsrs	r3, r0, #14
   25aa0:	428b      	cmp	r3, r1
   25aa2:	d301      	bcc.n	25aa8 <__divsi3+0x58>
   25aa4:	038b      	lsls	r3, r1, #14
   25aa6:	1ac0      	subs	r0, r0, r3
   25aa8:	4152      	adcs	r2, r2
   25aaa:	0b43      	lsrs	r3, r0, #13
   25aac:	428b      	cmp	r3, r1
   25aae:	d301      	bcc.n	25ab4 <__divsi3+0x64>
   25ab0:	034b      	lsls	r3, r1, #13
   25ab2:	1ac0      	subs	r0, r0, r3
   25ab4:	4152      	adcs	r2, r2
   25ab6:	0b03      	lsrs	r3, r0, #12
   25ab8:	428b      	cmp	r3, r1
   25aba:	d301      	bcc.n	25ac0 <__divsi3+0x70>
   25abc:	030b      	lsls	r3, r1, #12
   25abe:	1ac0      	subs	r0, r0, r3
   25ac0:	4152      	adcs	r2, r2
   25ac2:	0ac3      	lsrs	r3, r0, #11
   25ac4:	428b      	cmp	r3, r1
   25ac6:	d301      	bcc.n	25acc <__divsi3+0x7c>
   25ac8:	02cb      	lsls	r3, r1, #11
   25aca:	1ac0      	subs	r0, r0, r3
   25acc:	4152      	adcs	r2, r2
   25ace:	0a83      	lsrs	r3, r0, #10
   25ad0:	428b      	cmp	r3, r1
   25ad2:	d301      	bcc.n	25ad8 <__divsi3+0x88>
   25ad4:	028b      	lsls	r3, r1, #10
   25ad6:	1ac0      	subs	r0, r0, r3
   25ad8:	4152      	adcs	r2, r2
   25ada:	0a43      	lsrs	r3, r0, #9
   25adc:	428b      	cmp	r3, r1
   25ade:	d301      	bcc.n	25ae4 <__divsi3+0x94>
   25ae0:	024b      	lsls	r3, r1, #9
   25ae2:	1ac0      	subs	r0, r0, r3
   25ae4:	4152      	adcs	r2, r2
   25ae6:	0a03      	lsrs	r3, r0, #8
   25ae8:	428b      	cmp	r3, r1
   25aea:	d301      	bcc.n	25af0 <__divsi3+0xa0>
   25aec:	020b      	lsls	r3, r1, #8
   25aee:	1ac0      	subs	r0, r0, r3
   25af0:	4152      	adcs	r2, r2
   25af2:	d2cd      	bcs.n	25a90 <__divsi3+0x40>
   25af4:	09c3      	lsrs	r3, r0, #7
   25af6:	428b      	cmp	r3, r1
   25af8:	d301      	bcc.n	25afe <__divsi3+0xae>
   25afa:	01cb      	lsls	r3, r1, #7
   25afc:	1ac0      	subs	r0, r0, r3
   25afe:	4152      	adcs	r2, r2
   25b00:	0983      	lsrs	r3, r0, #6
   25b02:	428b      	cmp	r3, r1
   25b04:	d301      	bcc.n	25b0a <__divsi3+0xba>
   25b06:	018b      	lsls	r3, r1, #6
   25b08:	1ac0      	subs	r0, r0, r3
   25b0a:	4152      	adcs	r2, r2
   25b0c:	0943      	lsrs	r3, r0, #5
   25b0e:	428b      	cmp	r3, r1
   25b10:	d301      	bcc.n	25b16 <__divsi3+0xc6>
   25b12:	014b      	lsls	r3, r1, #5
   25b14:	1ac0      	subs	r0, r0, r3
   25b16:	4152      	adcs	r2, r2
   25b18:	0903      	lsrs	r3, r0, #4
   25b1a:	428b      	cmp	r3, r1
   25b1c:	d301      	bcc.n	25b22 <__divsi3+0xd2>
   25b1e:	010b      	lsls	r3, r1, #4
   25b20:	1ac0      	subs	r0, r0, r3
   25b22:	4152      	adcs	r2, r2
   25b24:	08c3      	lsrs	r3, r0, #3
   25b26:	428b      	cmp	r3, r1
   25b28:	d301      	bcc.n	25b2e <__divsi3+0xde>
   25b2a:	00cb      	lsls	r3, r1, #3
   25b2c:	1ac0      	subs	r0, r0, r3
   25b2e:	4152      	adcs	r2, r2
   25b30:	0883      	lsrs	r3, r0, #2
   25b32:	428b      	cmp	r3, r1
   25b34:	d301      	bcc.n	25b3a <__divsi3+0xea>
   25b36:	008b      	lsls	r3, r1, #2
   25b38:	1ac0      	subs	r0, r0, r3
   25b3a:	4152      	adcs	r2, r2
   25b3c:	0843      	lsrs	r3, r0, #1
   25b3e:	428b      	cmp	r3, r1
   25b40:	d301      	bcc.n	25b46 <__divsi3+0xf6>
   25b42:	004b      	lsls	r3, r1, #1
   25b44:	1ac0      	subs	r0, r0, r3
   25b46:	4152      	adcs	r2, r2
   25b48:	1a41      	subs	r1, r0, r1
   25b4a:	d200      	bcs.n	25b4e <__divsi3+0xfe>
   25b4c:	4601      	mov	r1, r0
   25b4e:	4152      	adcs	r2, r2
   25b50:	4610      	mov	r0, r2
   25b52:	4770      	bx	lr
   25b54:	e05d      	b.n	25c12 <__divsi3+0x1c2>
   25b56:	0fca      	lsrs	r2, r1, #31
   25b58:	d000      	beq.n	25b5c <__divsi3+0x10c>
   25b5a:	4249      	negs	r1, r1
   25b5c:	1003      	asrs	r3, r0, #32
   25b5e:	d300      	bcc.n	25b62 <__divsi3+0x112>
   25b60:	4240      	negs	r0, r0
   25b62:	4053      	eors	r3, r2
   25b64:	2200      	movs	r2, #0
   25b66:	469c      	mov	ip, r3
   25b68:	0903      	lsrs	r3, r0, #4
   25b6a:	428b      	cmp	r3, r1
   25b6c:	d32d      	bcc.n	25bca <__divsi3+0x17a>
   25b6e:	0a03      	lsrs	r3, r0, #8
   25b70:	428b      	cmp	r3, r1
   25b72:	d312      	bcc.n	25b9a <__divsi3+0x14a>
   25b74:	22fc      	movs	r2, #252	; 0xfc
   25b76:	0189      	lsls	r1, r1, #6
   25b78:	ba12      	rev	r2, r2
   25b7a:	0a03      	lsrs	r3, r0, #8
   25b7c:	428b      	cmp	r3, r1
   25b7e:	d30c      	bcc.n	25b9a <__divsi3+0x14a>
   25b80:	0189      	lsls	r1, r1, #6
   25b82:	1192      	asrs	r2, r2, #6
   25b84:	428b      	cmp	r3, r1
   25b86:	d308      	bcc.n	25b9a <__divsi3+0x14a>
   25b88:	0189      	lsls	r1, r1, #6
   25b8a:	1192      	asrs	r2, r2, #6
   25b8c:	428b      	cmp	r3, r1
   25b8e:	d304      	bcc.n	25b9a <__divsi3+0x14a>
   25b90:	0189      	lsls	r1, r1, #6
   25b92:	d03a      	beq.n	25c0a <__divsi3+0x1ba>
   25b94:	1192      	asrs	r2, r2, #6
   25b96:	e000      	b.n	25b9a <__divsi3+0x14a>
   25b98:	0989      	lsrs	r1, r1, #6
   25b9a:	09c3      	lsrs	r3, r0, #7
   25b9c:	428b      	cmp	r3, r1
   25b9e:	d301      	bcc.n	25ba4 <__divsi3+0x154>
   25ba0:	01cb      	lsls	r3, r1, #7
   25ba2:	1ac0      	subs	r0, r0, r3
   25ba4:	4152      	adcs	r2, r2
   25ba6:	0983      	lsrs	r3, r0, #6
   25ba8:	428b      	cmp	r3, r1
   25baa:	d301      	bcc.n	25bb0 <__divsi3+0x160>
   25bac:	018b      	lsls	r3, r1, #6
   25bae:	1ac0      	subs	r0, r0, r3
   25bb0:	4152      	adcs	r2, r2
   25bb2:	0943      	lsrs	r3, r0, #5
   25bb4:	428b      	cmp	r3, r1
   25bb6:	d301      	bcc.n	25bbc <__divsi3+0x16c>
   25bb8:	014b      	lsls	r3, r1, #5
   25bba:	1ac0      	subs	r0, r0, r3
   25bbc:	4152      	adcs	r2, r2
   25bbe:	0903      	lsrs	r3, r0, #4
   25bc0:	428b      	cmp	r3, r1
   25bc2:	d301      	bcc.n	25bc8 <__divsi3+0x178>
   25bc4:	010b      	lsls	r3, r1, #4
   25bc6:	1ac0      	subs	r0, r0, r3
   25bc8:	4152      	adcs	r2, r2
   25bca:	08c3      	lsrs	r3, r0, #3
   25bcc:	428b      	cmp	r3, r1
   25bce:	d301      	bcc.n	25bd4 <__divsi3+0x184>
   25bd0:	00cb      	lsls	r3, r1, #3
   25bd2:	1ac0      	subs	r0, r0, r3
   25bd4:	4152      	adcs	r2, r2
   25bd6:	0883      	lsrs	r3, r0, #2
   25bd8:	428b      	cmp	r3, r1
   25bda:	d301      	bcc.n	25be0 <__divsi3+0x190>
   25bdc:	008b      	lsls	r3, r1, #2
   25bde:	1ac0      	subs	r0, r0, r3
   25be0:	4152      	adcs	r2, r2
   25be2:	d2d9      	bcs.n	25b98 <__divsi3+0x148>
   25be4:	0843      	lsrs	r3, r0, #1
   25be6:	428b      	cmp	r3, r1
   25be8:	d301      	bcc.n	25bee <__divsi3+0x19e>
   25bea:	004b      	lsls	r3, r1, #1
   25bec:	1ac0      	subs	r0, r0, r3
   25bee:	4152      	adcs	r2, r2
   25bf0:	1a41      	subs	r1, r0, r1
   25bf2:	d200      	bcs.n	25bf6 <__divsi3+0x1a6>
   25bf4:	4601      	mov	r1, r0
   25bf6:	4663      	mov	r3, ip
   25bf8:	4152      	adcs	r2, r2
   25bfa:	105b      	asrs	r3, r3, #1
   25bfc:	4610      	mov	r0, r2
   25bfe:	d301      	bcc.n	25c04 <__divsi3+0x1b4>
   25c00:	4240      	negs	r0, r0
   25c02:	2b00      	cmp	r3, #0
   25c04:	d500      	bpl.n	25c08 <__divsi3+0x1b8>
   25c06:	4249      	negs	r1, r1
   25c08:	4770      	bx	lr
   25c0a:	4663      	mov	r3, ip
   25c0c:	105b      	asrs	r3, r3, #1
   25c0e:	d300      	bcc.n	25c12 <__divsi3+0x1c2>
   25c10:	4240      	negs	r0, r0
   25c12:	b501      	push	{r0, lr}
   25c14:	2000      	movs	r0, #0
   25c16:	f000 f805 	bl	25c24 <__aeabi_idiv0>
   25c1a:	bd02      	pop	{r1, pc}

00025c1c <__aeabi_idivmod>:
   25c1c:	2900      	cmp	r1, #0
   25c1e:	d0f8      	beq.n	25c12 <__divsi3+0x1c2>
   25c20:	e716      	b.n	25a50 <__divsi3>
   25c22:	4770      	bx	lr

00025c24 <__aeabi_idiv0>:
   25c24:	4770      	bx	lr
   25c26:	46c0      	nop			; (mov r8, r8)

00025c28 <__aeabi_cdrcmple>:
   25c28:	4684      	mov	ip, r0
   25c2a:	1c10      	adds	r0, r2, #0
   25c2c:	4662      	mov	r2, ip
   25c2e:	468c      	mov	ip, r1
   25c30:	1c19      	adds	r1, r3, #0
   25c32:	4663      	mov	r3, ip
   25c34:	e000      	b.n	25c38 <__aeabi_cdcmpeq>
   25c36:	46c0      	nop			; (mov r8, r8)

00025c38 <__aeabi_cdcmpeq>:
   25c38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   25c3a:	f001 fee1 	bl	27a00 <__ledf2>
   25c3e:	2800      	cmp	r0, #0
   25c40:	d401      	bmi.n	25c46 <__aeabi_cdcmpeq+0xe>
   25c42:	2100      	movs	r1, #0
   25c44:	42c8      	cmn	r0, r1
   25c46:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00025c48 <__aeabi_dcmpeq>:
   25c48:	b510      	push	{r4, lr}
   25c4a:	f001 fe3b 	bl	278c4 <__eqdf2>
   25c4e:	4240      	negs	r0, r0
   25c50:	3001      	adds	r0, #1
   25c52:	bd10      	pop	{r4, pc}

00025c54 <__aeabi_dcmplt>:
   25c54:	b510      	push	{r4, lr}
   25c56:	f001 fed3 	bl	27a00 <__ledf2>
   25c5a:	2800      	cmp	r0, #0
   25c5c:	db01      	blt.n	25c62 <__aeabi_dcmplt+0xe>
   25c5e:	2000      	movs	r0, #0
   25c60:	bd10      	pop	{r4, pc}
   25c62:	2001      	movs	r0, #1
   25c64:	bd10      	pop	{r4, pc}
   25c66:	46c0      	nop			; (mov r8, r8)

00025c68 <__aeabi_dcmple>:
   25c68:	b510      	push	{r4, lr}
   25c6a:	f001 fec9 	bl	27a00 <__ledf2>
   25c6e:	2800      	cmp	r0, #0
   25c70:	dd01      	ble.n	25c76 <__aeabi_dcmple+0xe>
   25c72:	2000      	movs	r0, #0
   25c74:	bd10      	pop	{r4, pc}
   25c76:	2001      	movs	r0, #1
   25c78:	bd10      	pop	{r4, pc}
   25c7a:	46c0      	nop			; (mov r8, r8)

00025c7c <__aeabi_dcmpgt>:
   25c7c:	b510      	push	{r4, lr}
   25c7e:	f001 fe5b 	bl	27938 <__gedf2>
   25c82:	2800      	cmp	r0, #0
   25c84:	dc01      	bgt.n	25c8a <__aeabi_dcmpgt+0xe>
   25c86:	2000      	movs	r0, #0
   25c88:	bd10      	pop	{r4, pc}
   25c8a:	2001      	movs	r0, #1
   25c8c:	bd10      	pop	{r4, pc}
   25c8e:	46c0      	nop			; (mov r8, r8)

00025c90 <__aeabi_dcmpge>:
   25c90:	b510      	push	{r4, lr}
   25c92:	f001 fe51 	bl	27938 <__gedf2>
   25c96:	2800      	cmp	r0, #0
   25c98:	da01      	bge.n	25c9e <__aeabi_dcmpge+0xe>
   25c9a:	2000      	movs	r0, #0
   25c9c:	bd10      	pop	{r4, pc}
   25c9e:	2001      	movs	r0, #1
   25ca0:	bd10      	pop	{r4, pc}
   25ca2:	46c0      	nop			; (mov r8, r8)

00025ca4 <__aeabi_cfrcmple>:
   25ca4:	4684      	mov	ip, r0
   25ca6:	1c08      	adds	r0, r1, #0
   25ca8:	4661      	mov	r1, ip
   25caa:	e7ff      	b.n	25cac <__aeabi_cfcmpeq>

00025cac <__aeabi_cfcmpeq>:
   25cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   25cae:	f000 fc11 	bl	264d4 <__lesf2>
   25cb2:	2800      	cmp	r0, #0
   25cb4:	d401      	bmi.n	25cba <__aeabi_cfcmpeq+0xe>
   25cb6:	2100      	movs	r1, #0
   25cb8:	42c8      	cmn	r0, r1
   25cba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00025cbc <__aeabi_fcmpeq>:
   25cbc:	b510      	push	{r4, lr}
   25cbe:	f000 fba3 	bl	26408 <__eqsf2>
   25cc2:	4240      	negs	r0, r0
   25cc4:	3001      	adds	r0, #1
   25cc6:	bd10      	pop	{r4, pc}

00025cc8 <__aeabi_fcmplt>:
   25cc8:	b510      	push	{r4, lr}
   25cca:	f000 fc03 	bl	264d4 <__lesf2>
   25cce:	2800      	cmp	r0, #0
   25cd0:	db01      	blt.n	25cd6 <__aeabi_fcmplt+0xe>
   25cd2:	2000      	movs	r0, #0
   25cd4:	bd10      	pop	{r4, pc}
   25cd6:	2001      	movs	r0, #1
   25cd8:	bd10      	pop	{r4, pc}
   25cda:	46c0      	nop			; (mov r8, r8)

00025cdc <__aeabi_fcmple>:
   25cdc:	b510      	push	{r4, lr}
   25cde:	f000 fbf9 	bl	264d4 <__lesf2>
   25ce2:	2800      	cmp	r0, #0
   25ce4:	dd01      	ble.n	25cea <__aeabi_fcmple+0xe>
   25ce6:	2000      	movs	r0, #0
   25ce8:	bd10      	pop	{r4, pc}
   25cea:	2001      	movs	r0, #1
   25cec:	bd10      	pop	{r4, pc}
   25cee:	46c0      	nop			; (mov r8, r8)

00025cf0 <__aeabi_fcmpgt>:
   25cf0:	b510      	push	{r4, lr}
   25cf2:	f000 fbaf 	bl	26454 <__gesf2>
   25cf6:	2800      	cmp	r0, #0
   25cf8:	dc01      	bgt.n	25cfe <__aeabi_fcmpgt+0xe>
   25cfa:	2000      	movs	r0, #0
   25cfc:	bd10      	pop	{r4, pc}
   25cfe:	2001      	movs	r0, #1
   25d00:	bd10      	pop	{r4, pc}
   25d02:	46c0      	nop			; (mov r8, r8)

00025d04 <__aeabi_fcmpge>:
   25d04:	b510      	push	{r4, lr}
   25d06:	f000 fba5 	bl	26454 <__gesf2>
   25d0a:	2800      	cmp	r0, #0
   25d0c:	da01      	bge.n	25d12 <__aeabi_fcmpge+0xe>
   25d0e:	2000      	movs	r0, #0
   25d10:	bd10      	pop	{r4, pc}
   25d12:	2001      	movs	r0, #1
   25d14:	bd10      	pop	{r4, pc}
   25d16:	46c0      	nop			; (mov r8, r8)

00025d18 <__clzsi2>:
   25d18:	211c      	movs	r1, #28
   25d1a:	2301      	movs	r3, #1
   25d1c:	041b      	lsls	r3, r3, #16
   25d1e:	4298      	cmp	r0, r3
   25d20:	d301      	bcc.n	25d26 <__clzsi2+0xe>
   25d22:	0c00      	lsrs	r0, r0, #16
   25d24:	3910      	subs	r1, #16
   25d26:	0a1b      	lsrs	r3, r3, #8
   25d28:	4298      	cmp	r0, r3
   25d2a:	d301      	bcc.n	25d30 <__clzsi2+0x18>
   25d2c:	0a00      	lsrs	r0, r0, #8
   25d2e:	3908      	subs	r1, #8
   25d30:	091b      	lsrs	r3, r3, #4
   25d32:	4298      	cmp	r0, r3
   25d34:	d301      	bcc.n	25d3a <__clzsi2+0x22>
   25d36:	0900      	lsrs	r0, r0, #4
   25d38:	3904      	subs	r1, #4
   25d3a:	a202      	add	r2, pc, #8	; (adr r2, 25d44 <__clzsi2+0x2c>)
   25d3c:	5c10      	ldrb	r0, [r2, r0]
   25d3e:	1840      	adds	r0, r0, r1
   25d40:	4770      	bx	lr
   25d42:	46c0      	nop			; (mov r8, r8)
   25d44:	02020304 	.word	0x02020304
   25d48:	01010101 	.word	0x01010101
	...

00025d54 <__ctzsi2>:
   25d54:	4241      	negs	r1, r0
   25d56:	4008      	ands	r0, r1
   25d58:	211c      	movs	r1, #28
   25d5a:	2301      	movs	r3, #1
   25d5c:	041b      	lsls	r3, r3, #16
   25d5e:	4298      	cmp	r0, r3
   25d60:	d301      	bcc.n	25d66 <__ctzsi2+0x12>
   25d62:	0c00      	lsrs	r0, r0, #16
   25d64:	3910      	subs	r1, #16
   25d66:	0a1b      	lsrs	r3, r3, #8
   25d68:	4298      	cmp	r0, r3
   25d6a:	d301      	bcc.n	25d70 <__ctzsi2+0x1c>
   25d6c:	0a00      	lsrs	r0, r0, #8
   25d6e:	3908      	subs	r1, #8
   25d70:	091b      	lsrs	r3, r3, #4
   25d72:	4298      	cmp	r0, r3
   25d74:	d301      	bcc.n	25d7a <__ctzsi2+0x26>
   25d76:	0900      	lsrs	r0, r0, #4
   25d78:	3904      	subs	r1, #4
   25d7a:	a202      	add	r2, pc, #8	; (adr r2, 25d84 <__ctzsi2+0x30>)
   25d7c:	5c10      	ldrb	r0, [r2, r0]
   25d7e:	1a40      	subs	r0, r0, r1
   25d80:	4770      	bx	lr
   25d82:	46c0      	nop			; (mov r8, r8)
   25d84:	1d1d1c1b 	.word	0x1d1d1c1b
   25d88:	1e1e1e1e 	.word	0x1e1e1e1e
   25d8c:	1f1f1f1f 	.word	0x1f1f1f1f
   25d90:	1f1f1f1f 	.word	0x1f1f1f1f

00025d94 <__aeabi_lmul>:
   25d94:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d96:	46ce      	mov	lr, r9
   25d98:	4647      	mov	r7, r8
   25d9a:	0415      	lsls	r5, r2, #16
   25d9c:	0c2d      	lsrs	r5, r5, #16
   25d9e:	002e      	movs	r6, r5
   25da0:	b580      	push	{r7, lr}
   25da2:	0407      	lsls	r7, r0, #16
   25da4:	0c14      	lsrs	r4, r2, #16
   25da6:	0c3f      	lsrs	r7, r7, #16
   25da8:	4699      	mov	r9, r3
   25daa:	0c03      	lsrs	r3, r0, #16
   25dac:	437e      	muls	r6, r7
   25dae:	435d      	muls	r5, r3
   25db0:	4367      	muls	r7, r4
   25db2:	4363      	muls	r3, r4
   25db4:	197f      	adds	r7, r7, r5
   25db6:	0c34      	lsrs	r4, r6, #16
   25db8:	19e4      	adds	r4, r4, r7
   25dba:	469c      	mov	ip, r3
   25dbc:	42a5      	cmp	r5, r4
   25dbe:	d903      	bls.n	25dc8 <__aeabi_lmul+0x34>
   25dc0:	2380      	movs	r3, #128	; 0x80
   25dc2:	025b      	lsls	r3, r3, #9
   25dc4:	4698      	mov	r8, r3
   25dc6:	44c4      	add	ip, r8
   25dc8:	464b      	mov	r3, r9
   25dca:	4351      	muls	r1, r2
   25dcc:	4343      	muls	r3, r0
   25dce:	0436      	lsls	r6, r6, #16
   25dd0:	0c36      	lsrs	r6, r6, #16
   25dd2:	0c25      	lsrs	r5, r4, #16
   25dd4:	0424      	lsls	r4, r4, #16
   25dd6:	4465      	add	r5, ip
   25dd8:	19a4      	adds	r4, r4, r6
   25dda:	1859      	adds	r1, r3, r1
   25ddc:	1949      	adds	r1, r1, r5
   25dde:	0020      	movs	r0, r4
   25de0:	bc0c      	pop	{r2, r3}
   25de2:	4690      	mov	r8, r2
   25de4:	4699      	mov	r9, r3
   25de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025de8 <__aeabi_f2uiz>:
   25de8:	219e      	movs	r1, #158	; 0x9e
   25dea:	b510      	push	{r4, lr}
   25dec:	05c9      	lsls	r1, r1, #23
   25dee:	1c04      	adds	r4, r0, #0
   25df0:	f7ff ff88 	bl	25d04 <__aeabi_fcmpge>
   25df4:	2800      	cmp	r0, #0
   25df6:	d103      	bne.n	25e00 <__aeabi_f2uiz+0x18>
   25df8:	1c20      	adds	r0, r4, #0
   25dfa:	f000 fe69 	bl	26ad0 <__aeabi_f2iz>
   25dfe:	bd10      	pop	{r4, pc}
   25e00:	219e      	movs	r1, #158	; 0x9e
   25e02:	1c20      	adds	r0, r4, #0
   25e04:	05c9      	lsls	r1, r1, #23
   25e06:	f000 fcc7 	bl	26798 <__aeabi_fsub>
   25e0a:	f000 fe61 	bl	26ad0 <__aeabi_f2iz>
   25e0e:	2380      	movs	r3, #128	; 0x80
   25e10:	061b      	lsls	r3, r3, #24
   25e12:	469c      	mov	ip, r3
   25e14:	4460      	add	r0, ip
   25e16:	e7f2      	b.n	25dfe <__aeabi_f2uiz+0x16>

00025e18 <__aeabi_d2uiz>:
   25e18:	b570      	push	{r4, r5, r6, lr}
   25e1a:	2200      	movs	r2, #0
   25e1c:	4b0c      	ldr	r3, [pc, #48]	; (25e50 <__aeabi_d2uiz+0x38>)
   25e1e:	0004      	movs	r4, r0
   25e20:	000d      	movs	r5, r1
   25e22:	f7ff ff35 	bl	25c90 <__aeabi_dcmpge>
   25e26:	2800      	cmp	r0, #0
   25e28:	d104      	bne.n	25e34 <__aeabi_d2uiz+0x1c>
   25e2a:	0020      	movs	r0, r4
   25e2c:	0029      	movs	r1, r5
   25e2e:	f002 fbff 	bl	28630 <__aeabi_d2iz>
   25e32:	bd70      	pop	{r4, r5, r6, pc}
   25e34:	4b06      	ldr	r3, [pc, #24]	; (25e50 <__aeabi_d2uiz+0x38>)
   25e36:	2200      	movs	r2, #0
   25e38:	0020      	movs	r0, r4
   25e3a:	0029      	movs	r1, r5
   25e3c:	f002 f8c2 	bl	27fc4 <__aeabi_dsub>
   25e40:	f002 fbf6 	bl	28630 <__aeabi_d2iz>
   25e44:	2380      	movs	r3, #128	; 0x80
   25e46:	061b      	lsls	r3, r3, #24
   25e48:	469c      	mov	ip, r3
   25e4a:	4460      	add	r0, ip
   25e4c:	e7f1      	b.n	25e32 <__aeabi_d2uiz+0x1a>
   25e4e:	46c0      	nop			; (mov r8, r8)
   25e50:	41e00000 	.word	0x41e00000

00025e54 <__aeabi_fadd>:
   25e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e56:	46c6      	mov	lr, r8
   25e58:	024e      	lsls	r6, r1, #9
   25e5a:	0247      	lsls	r7, r0, #9
   25e5c:	0a76      	lsrs	r6, r6, #9
   25e5e:	0a7b      	lsrs	r3, r7, #9
   25e60:	0044      	lsls	r4, r0, #1
   25e62:	0fc5      	lsrs	r5, r0, #31
   25e64:	00f7      	lsls	r7, r6, #3
   25e66:	0048      	lsls	r0, r1, #1
   25e68:	4698      	mov	r8, r3
   25e6a:	b500      	push	{lr}
   25e6c:	0e24      	lsrs	r4, r4, #24
   25e6e:	002a      	movs	r2, r5
   25e70:	00db      	lsls	r3, r3, #3
   25e72:	0e00      	lsrs	r0, r0, #24
   25e74:	0fc9      	lsrs	r1, r1, #31
   25e76:	46bc      	mov	ip, r7
   25e78:	428d      	cmp	r5, r1
   25e7a:	d067      	beq.n	25f4c <__aeabi_fadd+0xf8>
   25e7c:	1a22      	subs	r2, r4, r0
   25e7e:	2a00      	cmp	r2, #0
   25e80:	dc00      	bgt.n	25e84 <__aeabi_fadd+0x30>
   25e82:	e0a5      	b.n	25fd0 <__aeabi_fadd+0x17c>
   25e84:	2800      	cmp	r0, #0
   25e86:	d13a      	bne.n	25efe <__aeabi_fadd+0xaa>
   25e88:	2f00      	cmp	r7, #0
   25e8a:	d100      	bne.n	25e8e <__aeabi_fadd+0x3a>
   25e8c:	e093      	b.n	25fb6 <__aeabi_fadd+0x162>
   25e8e:	1e51      	subs	r1, r2, #1
   25e90:	2900      	cmp	r1, #0
   25e92:	d000      	beq.n	25e96 <__aeabi_fadd+0x42>
   25e94:	e0bc      	b.n	26010 <__aeabi_fadd+0x1bc>
   25e96:	2401      	movs	r4, #1
   25e98:	1bdb      	subs	r3, r3, r7
   25e9a:	015a      	lsls	r2, r3, #5
   25e9c:	d546      	bpl.n	25f2c <__aeabi_fadd+0xd8>
   25e9e:	019b      	lsls	r3, r3, #6
   25ea0:	099e      	lsrs	r6, r3, #6
   25ea2:	0030      	movs	r0, r6
   25ea4:	f7ff ff38 	bl	25d18 <__clzsi2>
   25ea8:	3805      	subs	r0, #5
   25eaa:	4086      	lsls	r6, r0
   25eac:	4284      	cmp	r4, r0
   25eae:	dd00      	ble.n	25eb2 <__aeabi_fadd+0x5e>
   25eb0:	e09d      	b.n	25fee <__aeabi_fadd+0x19a>
   25eb2:	1b04      	subs	r4, r0, r4
   25eb4:	0032      	movs	r2, r6
   25eb6:	2020      	movs	r0, #32
   25eb8:	3401      	adds	r4, #1
   25eba:	40e2      	lsrs	r2, r4
   25ebc:	1b04      	subs	r4, r0, r4
   25ebe:	40a6      	lsls	r6, r4
   25ec0:	0033      	movs	r3, r6
   25ec2:	1e5e      	subs	r6, r3, #1
   25ec4:	41b3      	sbcs	r3, r6
   25ec6:	2400      	movs	r4, #0
   25ec8:	4313      	orrs	r3, r2
   25eca:	075a      	lsls	r2, r3, #29
   25ecc:	d004      	beq.n	25ed8 <__aeabi_fadd+0x84>
   25ece:	220f      	movs	r2, #15
   25ed0:	401a      	ands	r2, r3
   25ed2:	2a04      	cmp	r2, #4
   25ed4:	d000      	beq.n	25ed8 <__aeabi_fadd+0x84>
   25ed6:	3304      	adds	r3, #4
   25ed8:	015a      	lsls	r2, r3, #5
   25eda:	d529      	bpl.n	25f30 <__aeabi_fadd+0xdc>
   25edc:	3401      	adds	r4, #1
   25ede:	2cff      	cmp	r4, #255	; 0xff
   25ee0:	d100      	bne.n	25ee4 <__aeabi_fadd+0x90>
   25ee2:	e081      	b.n	25fe8 <__aeabi_fadd+0x194>
   25ee4:	002a      	movs	r2, r5
   25ee6:	019b      	lsls	r3, r3, #6
   25ee8:	0a5b      	lsrs	r3, r3, #9
   25eea:	b2e4      	uxtb	r4, r4
   25eec:	025b      	lsls	r3, r3, #9
   25eee:	05e4      	lsls	r4, r4, #23
   25ef0:	0a58      	lsrs	r0, r3, #9
   25ef2:	07d2      	lsls	r2, r2, #31
   25ef4:	4320      	orrs	r0, r4
   25ef6:	4310      	orrs	r0, r2
   25ef8:	bc04      	pop	{r2}
   25efa:	4690      	mov	r8, r2
   25efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25efe:	2cff      	cmp	r4, #255	; 0xff
   25f00:	d0e3      	beq.n	25eca <__aeabi_fadd+0x76>
   25f02:	2180      	movs	r1, #128	; 0x80
   25f04:	0038      	movs	r0, r7
   25f06:	04c9      	lsls	r1, r1, #19
   25f08:	4308      	orrs	r0, r1
   25f0a:	4684      	mov	ip, r0
   25f0c:	2a1b      	cmp	r2, #27
   25f0e:	dd00      	ble.n	25f12 <__aeabi_fadd+0xbe>
   25f10:	e082      	b.n	26018 <__aeabi_fadd+0x1c4>
   25f12:	2020      	movs	r0, #32
   25f14:	4661      	mov	r1, ip
   25f16:	40d1      	lsrs	r1, r2
   25f18:	1a82      	subs	r2, r0, r2
   25f1a:	4660      	mov	r0, ip
   25f1c:	4090      	lsls	r0, r2
   25f1e:	0002      	movs	r2, r0
   25f20:	1e50      	subs	r0, r2, #1
   25f22:	4182      	sbcs	r2, r0
   25f24:	430a      	orrs	r2, r1
   25f26:	1a9b      	subs	r3, r3, r2
   25f28:	015a      	lsls	r2, r3, #5
   25f2a:	d4b8      	bmi.n	25e9e <__aeabi_fadd+0x4a>
   25f2c:	075a      	lsls	r2, r3, #29
   25f2e:	d1ce      	bne.n	25ece <__aeabi_fadd+0x7a>
   25f30:	08de      	lsrs	r6, r3, #3
   25f32:	002a      	movs	r2, r5
   25f34:	2cff      	cmp	r4, #255	; 0xff
   25f36:	d13a      	bne.n	25fae <__aeabi_fadd+0x15a>
   25f38:	2e00      	cmp	r6, #0
   25f3a:	d100      	bne.n	25f3e <__aeabi_fadd+0xea>
   25f3c:	e0ae      	b.n	2609c <__aeabi_fadd+0x248>
   25f3e:	2380      	movs	r3, #128	; 0x80
   25f40:	03db      	lsls	r3, r3, #15
   25f42:	4333      	orrs	r3, r6
   25f44:	025b      	lsls	r3, r3, #9
   25f46:	0a5b      	lsrs	r3, r3, #9
   25f48:	24ff      	movs	r4, #255	; 0xff
   25f4a:	e7cf      	b.n	25eec <__aeabi_fadd+0x98>
   25f4c:	1a21      	subs	r1, r4, r0
   25f4e:	2900      	cmp	r1, #0
   25f50:	dd52      	ble.n	25ff8 <__aeabi_fadd+0x1a4>
   25f52:	2800      	cmp	r0, #0
   25f54:	d031      	beq.n	25fba <__aeabi_fadd+0x166>
   25f56:	2cff      	cmp	r4, #255	; 0xff
   25f58:	d0b7      	beq.n	25eca <__aeabi_fadd+0x76>
   25f5a:	2080      	movs	r0, #128	; 0x80
   25f5c:	003e      	movs	r6, r7
   25f5e:	04c0      	lsls	r0, r0, #19
   25f60:	4306      	orrs	r6, r0
   25f62:	46b4      	mov	ip, r6
   25f64:	291b      	cmp	r1, #27
   25f66:	dd00      	ble.n	25f6a <__aeabi_fadd+0x116>
   25f68:	e0aa      	b.n	260c0 <__aeabi_fadd+0x26c>
   25f6a:	2620      	movs	r6, #32
   25f6c:	4660      	mov	r0, ip
   25f6e:	40c8      	lsrs	r0, r1
   25f70:	1a71      	subs	r1, r6, r1
   25f72:	4666      	mov	r6, ip
   25f74:	408e      	lsls	r6, r1
   25f76:	0031      	movs	r1, r6
   25f78:	1e4e      	subs	r6, r1, #1
   25f7a:	41b1      	sbcs	r1, r6
   25f7c:	4301      	orrs	r1, r0
   25f7e:	185b      	adds	r3, r3, r1
   25f80:	0159      	lsls	r1, r3, #5
   25f82:	d5d3      	bpl.n	25f2c <__aeabi_fadd+0xd8>
   25f84:	3401      	adds	r4, #1
   25f86:	2cff      	cmp	r4, #255	; 0xff
   25f88:	d100      	bne.n	25f8c <__aeabi_fadd+0x138>
   25f8a:	e087      	b.n	2609c <__aeabi_fadd+0x248>
   25f8c:	2201      	movs	r2, #1
   25f8e:	4978      	ldr	r1, [pc, #480]	; (26170 <__aeabi_fadd+0x31c>)
   25f90:	401a      	ands	r2, r3
   25f92:	085b      	lsrs	r3, r3, #1
   25f94:	400b      	ands	r3, r1
   25f96:	4313      	orrs	r3, r2
   25f98:	e797      	b.n	25eca <__aeabi_fadd+0x76>
   25f9a:	2c00      	cmp	r4, #0
   25f9c:	d000      	beq.n	25fa0 <__aeabi_fadd+0x14c>
   25f9e:	e0a7      	b.n	260f0 <__aeabi_fadd+0x29c>
   25fa0:	2b00      	cmp	r3, #0
   25fa2:	d000      	beq.n	25fa6 <__aeabi_fadd+0x152>
   25fa4:	e0b6      	b.n	26114 <__aeabi_fadd+0x2c0>
   25fa6:	1e3b      	subs	r3, r7, #0
   25fa8:	d162      	bne.n	26070 <__aeabi_fadd+0x21c>
   25faa:	2600      	movs	r6, #0
   25fac:	2200      	movs	r2, #0
   25fae:	0273      	lsls	r3, r6, #9
   25fb0:	0a5b      	lsrs	r3, r3, #9
   25fb2:	b2e4      	uxtb	r4, r4
   25fb4:	e79a      	b.n	25eec <__aeabi_fadd+0x98>
   25fb6:	0014      	movs	r4, r2
   25fb8:	e787      	b.n	25eca <__aeabi_fadd+0x76>
   25fba:	2f00      	cmp	r7, #0
   25fbc:	d04d      	beq.n	2605a <__aeabi_fadd+0x206>
   25fbe:	1e48      	subs	r0, r1, #1
   25fc0:	2800      	cmp	r0, #0
   25fc2:	d157      	bne.n	26074 <__aeabi_fadd+0x220>
   25fc4:	4463      	add	r3, ip
   25fc6:	2401      	movs	r4, #1
   25fc8:	015a      	lsls	r2, r3, #5
   25fca:	d5af      	bpl.n	25f2c <__aeabi_fadd+0xd8>
   25fcc:	2402      	movs	r4, #2
   25fce:	e7dd      	b.n	25f8c <__aeabi_fadd+0x138>
   25fd0:	2a00      	cmp	r2, #0
   25fd2:	d124      	bne.n	2601e <__aeabi_fadd+0x1ca>
   25fd4:	1c62      	adds	r2, r4, #1
   25fd6:	b2d2      	uxtb	r2, r2
   25fd8:	2a01      	cmp	r2, #1
   25fda:	ddde      	ble.n	25f9a <__aeabi_fadd+0x146>
   25fdc:	1bde      	subs	r6, r3, r7
   25fde:	0172      	lsls	r2, r6, #5
   25fe0:	d535      	bpl.n	2604e <__aeabi_fadd+0x1fa>
   25fe2:	1afe      	subs	r6, r7, r3
   25fe4:	000d      	movs	r5, r1
   25fe6:	e75c      	b.n	25ea2 <__aeabi_fadd+0x4e>
   25fe8:	002a      	movs	r2, r5
   25fea:	2300      	movs	r3, #0
   25fec:	e77e      	b.n	25eec <__aeabi_fadd+0x98>
   25fee:	0033      	movs	r3, r6
   25ff0:	4a60      	ldr	r2, [pc, #384]	; (26174 <__aeabi_fadd+0x320>)
   25ff2:	1a24      	subs	r4, r4, r0
   25ff4:	4013      	ands	r3, r2
   25ff6:	e768      	b.n	25eca <__aeabi_fadd+0x76>
   25ff8:	2900      	cmp	r1, #0
   25ffa:	d163      	bne.n	260c4 <__aeabi_fadd+0x270>
   25ffc:	1c61      	adds	r1, r4, #1
   25ffe:	b2c8      	uxtb	r0, r1
   26000:	2801      	cmp	r0, #1
   26002:	dd4e      	ble.n	260a2 <__aeabi_fadd+0x24e>
   26004:	29ff      	cmp	r1, #255	; 0xff
   26006:	d049      	beq.n	2609c <__aeabi_fadd+0x248>
   26008:	4463      	add	r3, ip
   2600a:	085b      	lsrs	r3, r3, #1
   2600c:	000c      	movs	r4, r1
   2600e:	e75c      	b.n	25eca <__aeabi_fadd+0x76>
   26010:	2aff      	cmp	r2, #255	; 0xff
   26012:	d041      	beq.n	26098 <__aeabi_fadd+0x244>
   26014:	000a      	movs	r2, r1
   26016:	e779      	b.n	25f0c <__aeabi_fadd+0xb8>
   26018:	2201      	movs	r2, #1
   2601a:	1a9b      	subs	r3, r3, r2
   2601c:	e784      	b.n	25f28 <__aeabi_fadd+0xd4>
   2601e:	2c00      	cmp	r4, #0
   26020:	d01d      	beq.n	2605e <__aeabi_fadd+0x20a>
   26022:	28ff      	cmp	r0, #255	; 0xff
   26024:	d022      	beq.n	2606c <__aeabi_fadd+0x218>
   26026:	2480      	movs	r4, #128	; 0x80
   26028:	04e4      	lsls	r4, r4, #19
   2602a:	4252      	negs	r2, r2
   2602c:	4323      	orrs	r3, r4
   2602e:	2a1b      	cmp	r2, #27
   26030:	dd00      	ble.n	26034 <__aeabi_fadd+0x1e0>
   26032:	e08a      	b.n	2614a <__aeabi_fadd+0x2f6>
   26034:	001c      	movs	r4, r3
   26036:	2520      	movs	r5, #32
   26038:	40d4      	lsrs	r4, r2
   2603a:	1aaa      	subs	r2, r5, r2
   2603c:	4093      	lsls	r3, r2
   2603e:	1e5a      	subs	r2, r3, #1
   26040:	4193      	sbcs	r3, r2
   26042:	4323      	orrs	r3, r4
   26044:	4662      	mov	r2, ip
   26046:	0004      	movs	r4, r0
   26048:	1ad3      	subs	r3, r2, r3
   2604a:	000d      	movs	r5, r1
   2604c:	e725      	b.n	25e9a <__aeabi_fadd+0x46>
   2604e:	2e00      	cmp	r6, #0
   26050:	d000      	beq.n	26054 <__aeabi_fadd+0x200>
   26052:	e726      	b.n	25ea2 <__aeabi_fadd+0x4e>
   26054:	2200      	movs	r2, #0
   26056:	2400      	movs	r4, #0
   26058:	e7a9      	b.n	25fae <__aeabi_fadd+0x15a>
   2605a:	000c      	movs	r4, r1
   2605c:	e735      	b.n	25eca <__aeabi_fadd+0x76>
   2605e:	2b00      	cmp	r3, #0
   26060:	d04d      	beq.n	260fe <__aeabi_fadd+0x2aa>
   26062:	43d2      	mvns	r2, r2
   26064:	2a00      	cmp	r2, #0
   26066:	d0ed      	beq.n	26044 <__aeabi_fadd+0x1f0>
   26068:	28ff      	cmp	r0, #255	; 0xff
   2606a:	d1e0      	bne.n	2602e <__aeabi_fadd+0x1da>
   2606c:	4663      	mov	r3, ip
   2606e:	24ff      	movs	r4, #255	; 0xff
   26070:	000d      	movs	r5, r1
   26072:	e72a      	b.n	25eca <__aeabi_fadd+0x76>
   26074:	29ff      	cmp	r1, #255	; 0xff
   26076:	d00f      	beq.n	26098 <__aeabi_fadd+0x244>
   26078:	0001      	movs	r1, r0
   2607a:	e773      	b.n	25f64 <__aeabi_fadd+0x110>
   2607c:	2b00      	cmp	r3, #0
   2607e:	d061      	beq.n	26144 <__aeabi_fadd+0x2f0>
   26080:	24ff      	movs	r4, #255	; 0xff
   26082:	2f00      	cmp	r7, #0
   26084:	d100      	bne.n	26088 <__aeabi_fadd+0x234>
   26086:	e720      	b.n	25eca <__aeabi_fadd+0x76>
   26088:	2280      	movs	r2, #128	; 0x80
   2608a:	4641      	mov	r1, r8
   2608c:	03d2      	lsls	r2, r2, #15
   2608e:	4211      	tst	r1, r2
   26090:	d002      	beq.n	26098 <__aeabi_fadd+0x244>
   26092:	4216      	tst	r6, r2
   26094:	d100      	bne.n	26098 <__aeabi_fadd+0x244>
   26096:	003b      	movs	r3, r7
   26098:	24ff      	movs	r4, #255	; 0xff
   2609a:	e716      	b.n	25eca <__aeabi_fadd+0x76>
   2609c:	24ff      	movs	r4, #255	; 0xff
   2609e:	2300      	movs	r3, #0
   260a0:	e724      	b.n	25eec <__aeabi_fadd+0x98>
   260a2:	2c00      	cmp	r4, #0
   260a4:	d1ea      	bne.n	2607c <__aeabi_fadd+0x228>
   260a6:	2b00      	cmp	r3, #0
   260a8:	d058      	beq.n	2615c <__aeabi_fadd+0x308>
   260aa:	2f00      	cmp	r7, #0
   260ac:	d100      	bne.n	260b0 <__aeabi_fadd+0x25c>
   260ae:	e70c      	b.n	25eca <__aeabi_fadd+0x76>
   260b0:	4463      	add	r3, ip
   260b2:	015a      	lsls	r2, r3, #5
   260b4:	d400      	bmi.n	260b8 <__aeabi_fadd+0x264>
   260b6:	e739      	b.n	25f2c <__aeabi_fadd+0xd8>
   260b8:	4a2e      	ldr	r2, [pc, #184]	; (26174 <__aeabi_fadd+0x320>)
   260ba:	000c      	movs	r4, r1
   260bc:	4013      	ands	r3, r2
   260be:	e704      	b.n	25eca <__aeabi_fadd+0x76>
   260c0:	2101      	movs	r1, #1
   260c2:	e75c      	b.n	25f7e <__aeabi_fadd+0x12a>
   260c4:	2c00      	cmp	r4, #0
   260c6:	d11e      	bne.n	26106 <__aeabi_fadd+0x2b2>
   260c8:	2b00      	cmp	r3, #0
   260ca:	d040      	beq.n	2614e <__aeabi_fadd+0x2fa>
   260cc:	43c9      	mvns	r1, r1
   260ce:	2900      	cmp	r1, #0
   260d0:	d00b      	beq.n	260ea <__aeabi_fadd+0x296>
   260d2:	28ff      	cmp	r0, #255	; 0xff
   260d4:	d036      	beq.n	26144 <__aeabi_fadd+0x2f0>
   260d6:	291b      	cmp	r1, #27
   260d8:	dc47      	bgt.n	2616a <__aeabi_fadd+0x316>
   260da:	001c      	movs	r4, r3
   260dc:	2620      	movs	r6, #32
   260de:	40cc      	lsrs	r4, r1
   260e0:	1a71      	subs	r1, r6, r1
   260e2:	408b      	lsls	r3, r1
   260e4:	1e59      	subs	r1, r3, #1
   260e6:	418b      	sbcs	r3, r1
   260e8:	4323      	orrs	r3, r4
   260ea:	4463      	add	r3, ip
   260ec:	0004      	movs	r4, r0
   260ee:	e747      	b.n	25f80 <__aeabi_fadd+0x12c>
   260f0:	2b00      	cmp	r3, #0
   260f2:	d118      	bne.n	26126 <__aeabi_fadd+0x2d2>
   260f4:	1e3b      	subs	r3, r7, #0
   260f6:	d02d      	beq.n	26154 <__aeabi_fadd+0x300>
   260f8:	000d      	movs	r5, r1
   260fa:	24ff      	movs	r4, #255	; 0xff
   260fc:	e6e5      	b.n	25eca <__aeabi_fadd+0x76>
   260fe:	003b      	movs	r3, r7
   26100:	0004      	movs	r4, r0
   26102:	000d      	movs	r5, r1
   26104:	e6e1      	b.n	25eca <__aeabi_fadd+0x76>
   26106:	28ff      	cmp	r0, #255	; 0xff
   26108:	d01c      	beq.n	26144 <__aeabi_fadd+0x2f0>
   2610a:	2480      	movs	r4, #128	; 0x80
   2610c:	04e4      	lsls	r4, r4, #19
   2610e:	4249      	negs	r1, r1
   26110:	4323      	orrs	r3, r4
   26112:	e7e0      	b.n	260d6 <__aeabi_fadd+0x282>
   26114:	2f00      	cmp	r7, #0
   26116:	d100      	bne.n	2611a <__aeabi_fadd+0x2c6>
   26118:	e6d7      	b.n	25eca <__aeabi_fadd+0x76>
   2611a:	1bde      	subs	r6, r3, r7
   2611c:	0172      	lsls	r2, r6, #5
   2611e:	d51f      	bpl.n	26160 <__aeabi_fadd+0x30c>
   26120:	1afb      	subs	r3, r7, r3
   26122:	000d      	movs	r5, r1
   26124:	e6d1      	b.n	25eca <__aeabi_fadd+0x76>
   26126:	24ff      	movs	r4, #255	; 0xff
   26128:	2f00      	cmp	r7, #0
   2612a:	d100      	bne.n	2612e <__aeabi_fadd+0x2da>
   2612c:	e6cd      	b.n	25eca <__aeabi_fadd+0x76>
   2612e:	2280      	movs	r2, #128	; 0x80
   26130:	4640      	mov	r0, r8
   26132:	03d2      	lsls	r2, r2, #15
   26134:	4210      	tst	r0, r2
   26136:	d0af      	beq.n	26098 <__aeabi_fadd+0x244>
   26138:	4216      	tst	r6, r2
   2613a:	d1ad      	bne.n	26098 <__aeabi_fadd+0x244>
   2613c:	003b      	movs	r3, r7
   2613e:	000d      	movs	r5, r1
   26140:	24ff      	movs	r4, #255	; 0xff
   26142:	e6c2      	b.n	25eca <__aeabi_fadd+0x76>
   26144:	4663      	mov	r3, ip
   26146:	24ff      	movs	r4, #255	; 0xff
   26148:	e6bf      	b.n	25eca <__aeabi_fadd+0x76>
   2614a:	2301      	movs	r3, #1
   2614c:	e77a      	b.n	26044 <__aeabi_fadd+0x1f0>
   2614e:	003b      	movs	r3, r7
   26150:	0004      	movs	r4, r0
   26152:	e6ba      	b.n	25eca <__aeabi_fadd+0x76>
   26154:	2680      	movs	r6, #128	; 0x80
   26156:	2200      	movs	r2, #0
   26158:	03f6      	lsls	r6, r6, #15
   2615a:	e6f0      	b.n	25f3e <__aeabi_fadd+0xea>
   2615c:	003b      	movs	r3, r7
   2615e:	e6b4      	b.n	25eca <__aeabi_fadd+0x76>
   26160:	1e33      	subs	r3, r6, #0
   26162:	d000      	beq.n	26166 <__aeabi_fadd+0x312>
   26164:	e6e2      	b.n	25f2c <__aeabi_fadd+0xd8>
   26166:	2200      	movs	r2, #0
   26168:	e721      	b.n	25fae <__aeabi_fadd+0x15a>
   2616a:	2301      	movs	r3, #1
   2616c:	e7bd      	b.n	260ea <__aeabi_fadd+0x296>
   2616e:	46c0      	nop			; (mov r8, r8)
   26170:	7dffffff 	.word	0x7dffffff
   26174:	fbffffff 	.word	0xfbffffff

00026178 <__aeabi_fdiv>:
   26178:	b5f0      	push	{r4, r5, r6, r7, lr}
   2617a:	4657      	mov	r7, sl
   2617c:	464e      	mov	r6, r9
   2617e:	46de      	mov	lr, fp
   26180:	4645      	mov	r5, r8
   26182:	b5e0      	push	{r5, r6, r7, lr}
   26184:	0244      	lsls	r4, r0, #9
   26186:	0043      	lsls	r3, r0, #1
   26188:	0fc6      	lsrs	r6, r0, #31
   2618a:	b083      	sub	sp, #12
   2618c:	1c0f      	adds	r7, r1, #0
   2618e:	0a64      	lsrs	r4, r4, #9
   26190:	0e1b      	lsrs	r3, r3, #24
   26192:	46b2      	mov	sl, r6
   26194:	d053      	beq.n	2623e <__aeabi_fdiv+0xc6>
   26196:	2bff      	cmp	r3, #255	; 0xff
   26198:	d027      	beq.n	261ea <__aeabi_fdiv+0x72>
   2619a:	2280      	movs	r2, #128	; 0x80
   2619c:	00e4      	lsls	r4, r4, #3
   2619e:	04d2      	lsls	r2, r2, #19
   261a0:	4314      	orrs	r4, r2
   261a2:	227f      	movs	r2, #127	; 0x7f
   261a4:	4252      	negs	r2, r2
   261a6:	4690      	mov	r8, r2
   261a8:	4498      	add	r8, r3
   261aa:	2300      	movs	r3, #0
   261ac:	4699      	mov	r9, r3
   261ae:	469b      	mov	fp, r3
   261b0:	027d      	lsls	r5, r7, #9
   261b2:	0078      	lsls	r0, r7, #1
   261b4:	0ffb      	lsrs	r3, r7, #31
   261b6:	0a6d      	lsrs	r5, r5, #9
   261b8:	0e00      	lsrs	r0, r0, #24
   261ba:	9300      	str	r3, [sp, #0]
   261bc:	d024      	beq.n	26208 <__aeabi_fdiv+0x90>
   261be:	28ff      	cmp	r0, #255	; 0xff
   261c0:	d046      	beq.n	26250 <__aeabi_fdiv+0xd8>
   261c2:	2380      	movs	r3, #128	; 0x80
   261c4:	2100      	movs	r1, #0
   261c6:	00ed      	lsls	r5, r5, #3
   261c8:	04db      	lsls	r3, r3, #19
   261ca:	431d      	orrs	r5, r3
   261cc:	387f      	subs	r0, #127	; 0x7f
   261ce:	4647      	mov	r7, r8
   261d0:	1a38      	subs	r0, r7, r0
   261d2:	464f      	mov	r7, r9
   261d4:	430f      	orrs	r7, r1
   261d6:	00bf      	lsls	r7, r7, #2
   261d8:	46b9      	mov	r9, r7
   261da:	0033      	movs	r3, r6
   261dc:	9a00      	ldr	r2, [sp, #0]
   261de:	4f87      	ldr	r7, [pc, #540]	; (263fc <__aeabi_fdiv+0x284>)
   261e0:	4053      	eors	r3, r2
   261e2:	464a      	mov	r2, r9
   261e4:	58ba      	ldr	r2, [r7, r2]
   261e6:	9301      	str	r3, [sp, #4]
   261e8:	4697      	mov	pc, r2
   261ea:	2c00      	cmp	r4, #0
   261ec:	d14e      	bne.n	2628c <__aeabi_fdiv+0x114>
   261ee:	2308      	movs	r3, #8
   261f0:	4699      	mov	r9, r3
   261f2:	33f7      	adds	r3, #247	; 0xf7
   261f4:	4698      	mov	r8, r3
   261f6:	3bfd      	subs	r3, #253	; 0xfd
   261f8:	469b      	mov	fp, r3
   261fa:	027d      	lsls	r5, r7, #9
   261fc:	0078      	lsls	r0, r7, #1
   261fe:	0ffb      	lsrs	r3, r7, #31
   26200:	0a6d      	lsrs	r5, r5, #9
   26202:	0e00      	lsrs	r0, r0, #24
   26204:	9300      	str	r3, [sp, #0]
   26206:	d1da      	bne.n	261be <__aeabi_fdiv+0x46>
   26208:	2d00      	cmp	r5, #0
   2620a:	d126      	bne.n	2625a <__aeabi_fdiv+0xe2>
   2620c:	2000      	movs	r0, #0
   2620e:	2101      	movs	r1, #1
   26210:	0033      	movs	r3, r6
   26212:	9a00      	ldr	r2, [sp, #0]
   26214:	4f7a      	ldr	r7, [pc, #488]	; (26400 <__aeabi_fdiv+0x288>)
   26216:	4053      	eors	r3, r2
   26218:	4642      	mov	r2, r8
   2621a:	1a10      	subs	r0, r2, r0
   2621c:	464a      	mov	r2, r9
   2621e:	430a      	orrs	r2, r1
   26220:	0092      	lsls	r2, r2, #2
   26222:	58ba      	ldr	r2, [r7, r2]
   26224:	001d      	movs	r5, r3
   26226:	4697      	mov	pc, r2
   26228:	9b00      	ldr	r3, [sp, #0]
   2622a:	002c      	movs	r4, r5
   2622c:	469a      	mov	sl, r3
   2622e:	468b      	mov	fp, r1
   26230:	465b      	mov	r3, fp
   26232:	2b02      	cmp	r3, #2
   26234:	d131      	bne.n	2629a <__aeabi_fdiv+0x122>
   26236:	4653      	mov	r3, sl
   26238:	21ff      	movs	r1, #255	; 0xff
   2623a:	2400      	movs	r4, #0
   2623c:	e038      	b.n	262b0 <__aeabi_fdiv+0x138>
   2623e:	2c00      	cmp	r4, #0
   26240:	d117      	bne.n	26272 <__aeabi_fdiv+0xfa>
   26242:	2304      	movs	r3, #4
   26244:	4699      	mov	r9, r3
   26246:	2300      	movs	r3, #0
   26248:	4698      	mov	r8, r3
   2624a:	3301      	adds	r3, #1
   2624c:	469b      	mov	fp, r3
   2624e:	e7af      	b.n	261b0 <__aeabi_fdiv+0x38>
   26250:	20ff      	movs	r0, #255	; 0xff
   26252:	2d00      	cmp	r5, #0
   26254:	d10b      	bne.n	2626e <__aeabi_fdiv+0xf6>
   26256:	2102      	movs	r1, #2
   26258:	e7da      	b.n	26210 <__aeabi_fdiv+0x98>
   2625a:	0028      	movs	r0, r5
   2625c:	f7ff fd5c 	bl	25d18 <__clzsi2>
   26260:	1f43      	subs	r3, r0, #5
   26262:	409d      	lsls	r5, r3
   26264:	2376      	movs	r3, #118	; 0x76
   26266:	425b      	negs	r3, r3
   26268:	1a18      	subs	r0, r3, r0
   2626a:	2100      	movs	r1, #0
   2626c:	e7af      	b.n	261ce <__aeabi_fdiv+0x56>
   2626e:	2103      	movs	r1, #3
   26270:	e7ad      	b.n	261ce <__aeabi_fdiv+0x56>
   26272:	0020      	movs	r0, r4
   26274:	f7ff fd50 	bl	25d18 <__clzsi2>
   26278:	1f43      	subs	r3, r0, #5
   2627a:	409c      	lsls	r4, r3
   2627c:	2376      	movs	r3, #118	; 0x76
   2627e:	425b      	negs	r3, r3
   26280:	1a1b      	subs	r3, r3, r0
   26282:	4698      	mov	r8, r3
   26284:	2300      	movs	r3, #0
   26286:	4699      	mov	r9, r3
   26288:	469b      	mov	fp, r3
   2628a:	e791      	b.n	261b0 <__aeabi_fdiv+0x38>
   2628c:	230c      	movs	r3, #12
   2628e:	4699      	mov	r9, r3
   26290:	33f3      	adds	r3, #243	; 0xf3
   26292:	4698      	mov	r8, r3
   26294:	3bfc      	subs	r3, #252	; 0xfc
   26296:	469b      	mov	fp, r3
   26298:	e78a      	b.n	261b0 <__aeabi_fdiv+0x38>
   2629a:	2b03      	cmp	r3, #3
   2629c:	d100      	bne.n	262a0 <__aeabi_fdiv+0x128>
   2629e:	e0a5      	b.n	263ec <__aeabi_fdiv+0x274>
   262a0:	4655      	mov	r5, sl
   262a2:	2b01      	cmp	r3, #1
   262a4:	d000      	beq.n	262a8 <__aeabi_fdiv+0x130>
   262a6:	e081      	b.n	263ac <__aeabi_fdiv+0x234>
   262a8:	2301      	movs	r3, #1
   262aa:	2100      	movs	r1, #0
   262ac:	2400      	movs	r4, #0
   262ae:	402b      	ands	r3, r5
   262b0:	0264      	lsls	r4, r4, #9
   262b2:	05c9      	lsls	r1, r1, #23
   262b4:	0a60      	lsrs	r0, r4, #9
   262b6:	07db      	lsls	r3, r3, #31
   262b8:	4308      	orrs	r0, r1
   262ba:	4318      	orrs	r0, r3
   262bc:	b003      	add	sp, #12
   262be:	bc3c      	pop	{r2, r3, r4, r5}
   262c0:	4690      	mov	r8, r2
   262c2:	4699      	mov	r9, r3
   262c4:	46a2      	mov	sl, r4
   262c6:	46ab      	mov	fp, r5
   262c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   262ca:	2480      	movs	r4, #128	; 0x80
   262cc:	2300      	movs	r3, #0
   262ce:	03e4      	lsls	r4, r4, #15
   262d0:	21ff      	movs	r1, #255	; 0xff
   262d2:	e7ed      	b.n	262b0 <__aeabi_fdiv+0x138>
   262d4:	21ff      	movs	r1, #255	; 0xff
   262d6:	2400      	movs	r4, #0
   262d8:	e7ea      	b.n	262b0 <__aeabi_fdiv+0x138>
   262da:	2301      	movs	r3, #1
   262dc:	1a59      	subs	r1, r3, r1
   262de:	291b      	cmp	r1, #27
   262e0:	dd66      	ble.n	263b0 <__aeabi_fdiv+0x238>
   262e2:	9a01      	ldr	r2, [sp, #4]
   262e4:	4013      	ands	r3, r2
   262e6:	2100      	movs	r1, #0
   262e8:	2400      	movs	r4, #0
   262ea:	e7e1      	b.n	262b0 <__aeabi_fdiv+0x138>
   262ec:	2380      	movs	r3, #128	; 0x80
   262ee:	03db      	lsls	r3, r3, #15
   262f0:	421c      	tst	r4, r3
   262f2:	d038      	beq.n	26366 <__aeabi_fdiv+0x1ee>
   262f4:	421d      	tst	r5, r3
   262f6:	d051      	beq.n	2639c <__aeabi_fdiv+0x224>
   262f8:	431c      	orrs	r4, r3
   262fa:	0264      	lsls	r4, r4, #9
   262fc:	0a64      	lsrs	r4, r4, #9
   262fe:	0033      	movs	r3, r6
   26300:	21ff      	movs	r1, #255	; 0xff
   26302:	e7d5      	b.n	262b0 <__aeabi_fdiv+0x138>
   26304:	0163      	lsls	r3, r4, #5
   26306:	016c      	lsls	r4, r5, #5
   26308:	42a3      	cmp	r3, r4
   2630a:	d23b      	bcs.n	26384 <__aeabi_fdiv+0x20c>
   2630c:	261b      	movs	r6, #27
   2630e:	2100      	movs	r1, #0
   26310:	3801      	subs	r0, #1
   26312:	2501      	movs	r5, #1
   26314:	001f      	movs	r7, r3
   26316:	0049      	lsls	r1, r1, #1
   26318:	005b      	lsls	r3, r3, #1
   2631a:	2f00      	cmp	r7, #0
   2631c:	db01      	blt.n	26322 <__aeabi_fdiv+0x1aa>
   2631e:	429c      	cmp	r4, r3
   26320:	d801      	bhi.n	26326 <__aeabi_fdiv+0x1ae>
   26322:	1b1b      	subs	r3, r3, r4
   26324:	4329      	orrs	r1, r5
   26326:	3e01      	subs	r6, #1
   26328:	2e00      	cmp	r6, #0
   2632a:	d1f3      	bne.n	26314 <__aeabi_fdiv+0x19c>
   2632c:	001c      	movs	r4, r3
   2632e:	1e63      	subs	r3, r4, #1
   26330:	419c      	sbcs	r4, r3
   26332:	430c      	orrs	r4, r1
   26334:	0001      	movs	r1, r0
   26336:	317f      	adds	r1, #127	; 0x7f
   26338:	2900      	cmp	r1, #0
   2633a:	ddce      	ble.n	262da <__aeabi_fdiv+0x162>
   2633c:	0763      	lsls	r3, r4, #29
   2633e:	d004      	beq.n	2634a <__aeabi_fdiv+0x1d2>
   26340:	230f      	movs	r3, #15
   26342:	4023      	ands	r3, r4
   26344:	2b04      	cmp	r3, #4
   26346:	d000      	beq.n	2634a <__aeabi_fdiv+0x1d2>
   26348:	3404      	adds	r4, #4
   2634a:	0123      	lsls	r3, r4, #4
   2634c:	d503      	bpl.n	26356 <__aeabi_fdiv+0x1de>
   2634e:	0001      	movs	r1, r0
   26350:	4b2c      	ldr	r3, [pc, #176]	; (26404 <__aeabi_fdiv+0x28c>)
   26352:	3180      	adds	r1, #128	; 0x80
   26354:	401c      	ands	r4, r3
   26356:	29fe      	cmp	r1, #254	; 0xfe
   26358:	dd0d      	ble.n	26376 <__aeabi_fdiv+0x1fe>
   2635a:	2301      	movs	r3, #1
   2635c:	9a01      	ldr	r2, [sp, #4]
   2635e:	21ff      	movs	r1, #255	; 0xff
   26360:	4013      	ands	r3, r2
   26362:	2400      	movs	r4, #0
   26364:	e7a4      	b.n	262b0 <__aeabi_fdiv+0x138>
   26366:	2380      	movs	r3, #128	; 0x80
   26368:	03db      	lsls	r3, r3, #15
   2636a:	431c      	orrs	r4, r3
   2636c:	0264      	lsls	r4, r4, #9
   2636e:	0a64      	lsrs	r4, r4, #9
   26370:	0033      	movs	r3, r6
   26372:	21ff      	movs	r1, #255	; 0xff
   26374:	e79c      	b.n	262b0 <__aeabi_fdiv+0x138>
   26376:	2301      	movs	r3, #1
   26378:	9a01      	ldr	r2, [sp, #4]
   2637a:	01a4      	lsls	r4, r4, #6
   2637c:	0a64      	lsrs	r4, r4, #9
   2637e:	b2c9      	uxtb	r1, r1
   26380:	4013      	ands	r3, r2
   26382:	e795      	b.n	262b0 <__aeabi_fdiv+0x138>
   26384:	1b1b      	subs	r3, r3, r4
   26386:	261a      	movs	r6, #26
   26388:	2101      	movs	r1, #1
   2638a:	e7c2      	b.n	26312 <__aeabi_fdiv+0x19a>
   2638c:	9b00      	ldr	r3, [sp, #0]
   2638e:	468b      	mov	fp, r1
   26390:	469a      	mov	sl, r3
   26392:	2400      	movs	r4, #0
   26394:	e74c      	b.n	26230 <__aeabi_fdiv+0xb8>
   26396:	0263      	lsls	r3, r4, #9
   26398:	d5e5      	bpl.n	26366 <__aeabi_fdiv+0x1ee>
   2639a:	2500      	movs	r5, #0
   2639c:	2480      	movs	r4, #128	; 0x80
   2639e:	03e4      	lsls	r4, r4, #15
   263a0:	432c      	orrs	r4, r5
   263a2:	0264      	lsls	r4, r4, #9
   263a4:	0a64      	lsrs	r4, r4, #9
   263a6:	9b00      	ldr	r3, [sp, #0]
   263a8:	21ff      	movs	r1, #255	; 0xff
   263aa:	e781      	b.n	262b0 <__aeabi_fdiv+0x138>
   263ac:	9501      	str	r5, [sp, #4]
   263ae:	e7c1      	b.n	26334 <__aeabi_fdiv+0x1bc>
   263b0:	0023      	movs	r3, r4
   263b2:	2020      	movs	r0, #32
   263b4:	40cb      	lsrs	r3, r1
   263b6:	1a41      	subs	r1, r0, r1
   263b8:	408c      	lsls	r4, r1
   263ba:	1e61      	subs	r1, r4, #1
   263bc:	418c      	sbcs	r4, r1
   263be:	431c      	orrs	r4, r3
   263c0:	0763      	lsls	r3, r4, #29
   263c2:	d004      	beq.n	263ce <__aeabi_fdiv+0x256>
   263c4:	230f      	movs	r3, #15
   263c6:	4023      	ands	r3, r4
   263c8:	2b04      	cmp	r3, #4
   263ca:	d000      	beq.n	263ce <__aeabi_fdiv+0x256>
   263cc:	3404      	adds	r4, #4
   263ce:	0163      	lsls	r3, r4, #5
   263d0:	d505      	bpl.n	263de <__aeabi_fdiv+0x266>
   263d2:	2301      	movs	r3, #1
   263d4:	9a01      	ldr	r2, [sp, #4]
   263d6:	2101      	movs	r1, #1
   263d8:	4013      	ands	r3, r2
   263da:	2400      	movs	r4, #0
   263dc:	e768      	b.n	262b0 <__aeabi_fdiv+0x138>
   263de:	2301      	movs	r3, #1
   263e0:	9a01      	ldr	r2, [sp, #4]
   263e2:	01a4      	lsls	r4, r4, #6
   263e4:	0a64      	lsrs	r4, r4, #9
   263e6:	4013      	ands	r3, r2
   263e8:	2100      	movs	r1, #0
   263ea:	e761      	b.n	262b0 <__aeabi_fdiv+0x138>
   263ec:	2380      	movs	r3, #128	; 0x80
   263ee:	03db      	lsls	r3, r3, #15
   263f0:	431c      	orrs	r4, r3
   263f2:	0264      	lsls	r4, r4, #9
   263f4:	0a64      	lsrs	r4, r4, #9
   263f6:	4653      	mov	r3, sl
   263f8:	21ff      	movs	r1, #255	; 0xff
   263fa:	e759      	b.n	262b0 <__aeabi_fdiv+0x138>
   263fc:	0002fa18 	.word	0x0002fa18
   26400:	0002fa58 	.word	0x0002fa58
   26404:	f7ffffff 	.word	0xf7ffffff

00026408 <__eqsf2>:
   26408:	b570      	push	{r4, r5, r6, lr}
   2640a:	0042      	lsls	r2, r0, #1
   2640c:	0245      	lsls	r5, r0, #9
   2640e:	024e      	lsls	r6, r1, #9
   26410:	004c      	lsls	r4, r1, #1
   26412:	0fc3      	lsrs	r3, r0, #31
   26414:	0a6d      	lsrs	r5, r5, #9
   26416:	0e12      	lsrs	r2, r2, #24
   26418:	0a76      	lsrs	r6, r6, #9
   2641a:	0e24      	lsrs	r4, r4, #24
   2641c:	0fc9      	lsrs	r1, r1, #31
   2641e:	2001      	movs	r0, #1
   26420:	2aff      	cmp	r2, #255	; 0xff
   26422:	d006      	beq.n	26432 <__eqsf2+0x2a>
   26424:	2cff      	cmp	r4, #255	; 0xff
   26426:	d003      	beq.n	26430 <__eqsf2+0x28>
   26428:	42a2      	cmp	r2, r4
   2642a:	d101      	bne.n	26430 <__eqsf2+0x28>
   2642c:	42b5      	cmp	r5, r6
   2642e:	d006      	beq.n	2643e <__eqsf2+0x36>
   26430:	bd70      	pop	{r4, r5, r6, pc}
   26432:	2d00      	cmp	r5, #0
   26434:	d1fc      	bne.n	26430 <__eqsf2+0x28>
   26436:	2cff      	cmp	r4, #255	; 0xff
   26438:	d1fa      	bne.n	26430 <__eqsf2+0x28>
   2643a:	2e00      	cmp	r6, #0
   2643c:	d1f8      	bne.n	26430 <__eqsf2+0x28>
   2643e:	428b      	cmp	r3, r1
   26440:	d006      	beq.n	26450 <__eqsf2+0x48>
   26442:	2001      	movs	r0, #1
   26444:	2a00      	cmp	r2, #0
   26446:	d1f3      	bne.n	26430 <__eqsf2+0x28>
   26448:	0028      	movs	r0, r5
   2644a:	1e45      	subs	r5, r0, #1
   2644c:	41a8      	sbcs	r0, r5
   2644e:	e7ef      	b.n	26430 <__eqsf2+0x28>
   26450:	2000      	movs	r0, #0
   26452:	e7ed      	b.n	26430 <__eqsf2+0x28>

00026454 <__gesf2>:
   26454:	b5f0      	push	{r4, r5, r6, r7, lr}
   26456:	0042      	lsls	r2, r0, #1
   26458:	0245      	lsls	r5, r0, #9
   2645a:	024c      	lsls	r4, r1, #9
   2645c:	0fc3      	lsrs	r3, r0, #31
   2645e:	0048      	lsls	r0, r1, #1
   26460:	0a6d      	lsrs	r5, r5, #9
   26462:	0e12      	lsrs	r2, r2, #24
   26464:	0a64      	lsrs	r4, r4, #9
   26466:	0e00      	lsrs	r0, r0, #24
   26468:	0fc9      	lsrs	r1, r1, #31
   2646a:	2aff      	cmp	r2, #255	; 0xff
   2646c:	d01e      	beq.n	264ac <__gesf2+0x58>
   2646e:	28ff      	cmp	r0, #255	; 0xff
   26470:	d021      	beq.n	264b6 <__gesf2+0x62>
   26472:	2a00      	cmp	r2, #0
   26474:	d10a      	bne.n	2648c <__gesf2+0x38>
   26476:	426e      	negs	r6, r5
   26478:	416e      	adcs	r6, r5
   2647a:	b2f6      	uxtb	r6, r6
   2647c:	2800      	cmp	r0, #0
   2647e:	d10f      	bne.n	264a0 <__gesf2+0x4c>
   26480:	2c00      	cmp	r4, #0
   26482:	d10d      	bne.n	264a0 <__gesf2+0x4c>
   26484:	2000      	movs	r0, #0
   26486:	2d00      	cmp	r5, #0
   26488:	d009      	beq.n	2649e <__gesf2+0x4a>
   2648a:	e005      	b.n	26498 <__gesf2+0x44>
   2648c:	2800      	cmp	r0, #0
   2648e:	d101      	bne.n	26494 <__gesf2+0x40>
   26490:	2c00      	cmp	r4, #0
   26492:	d001      	beq.n	26498 <__gesf2+0x44>
   26494:	428b      	cmp	r3, r1
   26496:	d011      	beq.n	264bc <__gesf2+0x68>
   26498:	2101      	movs	r1, #1
   2649a:	4258      	negs	r0, r3
   2649c:	4308      	orrs	r0, r1
   2649e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   264a0:	2e00      	cmp	r6, #0
   264a2:	d0f7      	beq.n	26494 <__gesf2+0x40>
   264a4:	2001      	movs	r0, #1
   264a6:	3901      	subs	r1, #1
   264a8:	4308      	orrs	r0, r1
   264aa:	e7f8      	b.n	2649e <__gesf2+0x4a>
   264ac:	2d00      	cmp	r5, #0
   264ae:	d0de      	beq.n	2646e <__gesf2+0x1a>
   264b0:	2002      	movs	r0, #2
   264b2:	4240      	negs	r0, r0
   264b4:	e7f3      	b.n	2649e <__gesf2+0x4a>
   264b6:	2c00      	cmp	r4, #0
   264b8:	d0db      	beq.n	26472 <__gesf2+0x1e>
   264ba:	e7f9      	b.n	264b0 <__gesf2+0x5c>
   264bc:	4282      	cmp	r2, r0
   264be:	dceb      	bgt.n	26498 <__gesf2+0x44>
   264c0:	db04      	blt.n	264cc <__gesf2+0x78>
   264c2:	42a5      	cmp	r5, r4
   264c4:	d8e8      	bhi.n	26498 <__gesf2+0x44>
   264c6:	2000      	movs	r0, #0
   264c8:	42a5      	cmp	r5, r4
   264ca:	d2e8      	bcs.n	2649e <__gesf2+0x4a>
   264cc:	2101      	movs	r1, #1
   264ce:	1e58      	subs	r0, r3, #1
   264d0:	4308      	orrs	r0, r1
   264d2:	e7e4      	b.n	2649e <__gesf2+0x4a>

000264d4 <__lesf2>:
   264d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   264d6:	0042      	lsls	r2, r0, #1
   264d8:	024d      	lsls	r5, r1, #9
   264da:	004c      	lsls	r4, r1, #1
   264dc:	0246      	lsls	r6, r0, #9
   264de:	0a76      	lsrs	r6, r6, #9
   264e0:	0e12      	lsrs	r2, r2, #24
   264e2:	0fc3      	lsrs	r3, r0, #31
   264e4:	0a6d      	lsrs	r5, r5, #9
   264e6:	0e24      	lsrs	r4, r4, #24
   264e8:	0fc9      	lsrs	r1, r1, #31
   264ea:	2aff      	cmp	r2, #255	; 0xff
   264ec:	d016      	beq.n	2651c <__lesf2+0x48>
   264ee:	2cff      	cmp	r4, #255	; 0xff
   264f0:	d018      	beq.n	26524 <__lesf2+0x50>
   264f2:	2a00      	cmp	r2, #0
   264f4:	d10a      	bne.n	2650c <__lesf2+0x38>
   264f6:	4270      	negs	r0, r6
   264f8:	4170      	adcs	r0, r6
   264fa:	b2c0      	uxtb	r0, r0
   264fc:	2c00      	cmp	r4, #0
   264fe:	d015      	beq.n	2652c <__lesf2+0x58>
   26500:	2800      	cmp	r0, #0
   26502:	d005      	beq.n	26510 <__lesf2+0x3c>
   26504:	2001      	movs	r0, #1
   26506:	3901      	subs	r1, #1
   26508:	4308      	orrs	r0, r1
   2650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2650c:	2c00      	cmp	r4, #0
   2650e:	d013      	beq.n	26538 <__lesf2+0x64>
   26510:	4299      	cmp	r1, r3
   26512:	d014      	beq.n	2653e <__lesf2+0x6a>
   26514:	2001      	movs	r0, #1
   26516:	425b      	negs	r3, r3
   26518:	4318      	orrs	r0, r3
   2651a:	e7f6      	b.n	2650a <__lesf2+0x36>
   2651c:	2002      	movs	r0, #2
   2651e:	2e00      	cmp	r6, #0
   26520:	d1f3      	bne.n	2650a <__lesf2+0x36>
   26522:	e7e4      	b.n	264ee <__lesf2+0x1a>
   26524:	2002      	movs	r0, #2
   26526:	2d00      	cmp	r5, #0
   26528:	d1ef      	bne.n	2650a <__lesf2+0x36>
   2652a:	e7e2      	b.n	264f2 <__lesf2+0x1e>
   2652c:	2d00      	cmp	r5, #0
   2652e:	d1e7      	bne.n	26500 <__lesf2+0x2c>
   26530:	2000      	movs	r0, #0
   26532:	2e00      	cmp	r6, #0
   26534:	d0e9      	beq.n	2650a <__lesf2+0x36>
   26536:	e7ed      	b.n	26514 <__lesf2+0x40>
   26538:	2d00      	cmp	r5, #0
   2653a:	d1e9      	bne.n	26510 <__lesf2+0x3c>
   2653c:	e7ea      	b.n	26514 <__lesf2+0x40>
   2653e:	42a2      	cmp	r2, r4
   26540:	dc06      	bgt.n	26550 <__lesf2+0x7c>
   26542:	dbdf      	blt.n	26504 <__lesf2+0x30>
   26544:	42ae      	cmp	r6, r5
   26546:	d803      	bhi.n	26550 <__lesf2+0x7c>
   26548:	2000      	movs	r0, #0
   2654a:	42ae      	cmp	r6, r5
   2654c:	d3da      	bcc.n	26504 <__lesf2+0x30>
   2654e:	e7dc      	b.n	2650a <__lesf2+0x36>
   26550:	2001      	movs	r0, #1
   26552:	4249      	negs	r1, r1
   26554:	4308      	orrs	r0, r1
   26556:	e7d8      	b.n	2650a <__lesf2+0x36>

00026558 <__aeabi_fmul>:
   26558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2655a:	4657      	mov	r7, sl
   2655c:	464e      	mov	r6, r9
   2655e:	4645      	mov	r5, r8
   26560:	46de      	mov	lr, fp
   26562:	b5e0      	push	{r5, r6, r7, lr}
   26564:	0247      	lsls	r7, r0, #9
   26566:	0046      	lsls	r6, r0, #1
   26568:	4688      	mov	r8, r1
   2656a:	0a7f      	lsrs	r7, r7, #9
   2656c:	0e36      	lsrs	r6, r6, #24
   2656e:	0fc4      	lsrs	r4, r0, #31
   26570:	2e00      	cmp	r6, #0
   26572:	d047      	beq.n	26604 <__aeabi_fmul+0xac>
   26574:	2eff      	cmp	r6, #255	; 0xff
   26576:	d024      	beq.n	265c2 <__aeabi_fmul+0x6a>
   26578:	00fb      	lsls	r3, r7, #3
   2657a:	2780      	movs	r7, #128	; 0x80
   2657c:	04ff      	lsls	r7, r7, #19
   2657e:	431f      	orrs	r7, r3
   26580:	2300      	movs	r3, #0
   26582:	4699      	mov	r9, r3
   26584:	469a      	mov	sl, r3
   26586:	3e7f      	subs	r6, #127	; 0x7f
   26588:	4643      	mov	r3, r8
   2658a:	025d      	lsls	r5, r3, #9
   2658c:	0058      	lsls	r0, r3, #1
   2658e:	0fdb      	lsrs	r3, r3, #31
   26590:	0a6d      	lsrs	r5, r5, #9
   26592:	0e00      	lsrs	r0, r0, #24
   26594:	4698      	mov	r8, r3
   26596:	d043      	beq.n	26620 <__aeabi_fmul+0xc8>
   26598:	28ff      	cmp	r0, #255	; 0xff
   2659a:	d03b      	beq.n	26614 <__aeabi_fmul+0xbc>
   2659c:	00eb      	lsls	r3, r5, #3
   2659e:	2580      	movs	r5, #128	; 0x80
   265a0:	2200      	movs	r2, #0
   265a2:	04ed      	lsls	r5, r5, #19
   265a4:	431d      	orrs	r5, r3
   265a6:	387f      	subs	r0, #127	; 0x7f
   265a8:	1836      	adds	r6, r6, r0
   265aa:	1c73      	adds	r3, r6, #1
   265ac:	4641      	mov	r1, r8
   265ae:	469b      	mov	fp, r3
   265b0:	464b      	mov	r3, r9
   265b2:	4061      	eors	r1, r4
   265b4:	4313      	orrs	r3, r2
   265b6:	2b0f      	cmp	r3, #15
   265b8:	d864      	bhi.n	26684 <__aeabi_fmul+0x12c>
   265ba:	4875      	ldr	r0, [pc, #468]	; (26790 <__aeabi_fmul+0x238>)
   265bc:	009b      	lsls	r3, r3, #2
   265be:	58c3      	ldr	r3, [r0, r3]
   265c0:	469f      	mov	pc, r3
   265c2:	2f00      	cmp	r7, #0
   265c4:	d142      	bne.n	2664c <__aeabi_fmul+0xf4>
   265c6:	2308      	movs	r3, #8
   265c8:	4699      	mov	r9, r3
   265ca:	3b06      	subs	r3, #6
   265cc:	26ff      	movs	r6, #255	; 0xff
   265ce:	469a      	mov	sl, r3
   265d0:	e7da      	b.n	26588 <__aeabi_fmul+0x30>
   265d2:	4641      	mov	r1, r8
   265d4:	2a02      	cmp	r2, #2
   265d6:	d028      	beq.n	2662a <__aeabi_fmul+0xd2>
   265d8:	2a03      	cmp	r2, #3
   265da:	d100      	bne.n	265de <__aeabi_fmul+0x86>
   265dc:	e0ce      	b.n	2677c <__aeabi_fmul+0x224>
   265de:	2a01      	cmp	r2, #1
   265e0:	d000      	beq.n	265e4 <__aeabi_fmul+0x8c>
   265e2:	e0ac      	b.n	2673e <__aeabi_fmul+0x1e6>
   265e4:	4011      	ands	r1, r2
   265e6:	2000      	movs	r0, #0
   265e8:	2200      	movs	r2, #0
   265ea:	b2cc      	uxtb	r4, r1
   265ec:	0240      	lsls	r0, r0, #9
   265ee:	05d2      	lsls	r2, r2, #23
   265f0:	0a40      	lsrs	r0, r0, #9
   265f2:	07e4      	lsls	r4, r4, #31
   265f4:	4310      	orrs	r0, r2
   265f6:	4320      	orrs	r0, r4
   265f8:	bc3c      	pop	{r2, r3, r4, r5}
   265fa:	4690      	mov	r8, r2
   265fc:	4699      	mov	r9, r3
   265fe:	46a2      	mov	sl, r4
   26600:	46ab      	mov	fp, r5
   26602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26604:	2f00      	cmp	r7, #0
   26606:	d115      	bne.n	26634 <__aeabi_fmul+0xdc>
   26608:	2304      	movs	r3, #4
   2660a:	4699      	mov	r9, r3
   2660c:	3b03      	subs	r3, #3
   2660e:	2600      	movs	r6, #0
   26610:	469a      	mov	sl, r3
   26612:	e7b9      	b.n	26588 <__aeabi_fmul+0x30>
   26614:	20ff      	movs	r0, #255	; 0xff
   26616:	2202      	movs	r2, #2
   26618:	2d00      	cmp	r5, #0
   2661a:	d0c5      	beq.n	265a8 <__aeabi_fmul+0x50>
   2661c:	2203      	movs	r2, #3
   2661e:	e7c3      	b.n	265a8 <__aeabi_fmul+0x50>
   26620:	2d00      	cmp	r5, #0
   26622:	d119      	bne.n	26658 <__aeabi_fmul+0x100>
   26624:	2000      	movs	r0, #0
   26626:	2201      	movs	r2, #1
   26628:	e7be      	b.n	265a8 <__aeabi_fmul+0x50>
   2662a:	2401      	movs	r4, #1
   2662c:	22ff      	movs	r2, #255	; 0xff
   2662e:	400c      	ands	r4, r1
   26630:	2000      	movs	r0, #0
   26632:	e7db      	b.n	265ec <__aeabi_fmul+0x94>
   26634:	0038      	movs	r0, r7
   26636:	f7ff fb6f 	bl	25d18 <__clzsi2>
   2663a:	2676      	movs	r6, #118	; 0x76
   2663c:	1f43      	subs	r3, r0, #5
   2663e:	409f      	lsls	r7, r3
   26640:	2300      	movs	r3, #0
   26642:	4276      	negs	r6, r6
   26644:	1a36      	subs	r6, r6, r0
   26646:	4699      	mov	r9, r3
   26648:	469a      	mov	sl, r3
   2664a:	e79d      	b.n	26588 <__aeabi_fmul+0x30>
   2664c:	230c      	movs	r3, #12
   2664e:	4699      	mov	r9, r3
   26650:	3b09      	subs	r3, #9
   26652:	26ff      	movs	r6, #255	; 0xff
   26654:	469a      	mov	sl, r3
   26656:	e797      	b.n	26588 <__aeabi_fmul+0x30>
   26658:	0028      	movs	r0, r5
   2665a:	f7ff fb5d 	bl	25d18 <__clzsi2>
   2665e:	1f43      	subs	r3, r0, #5
   26660:	409d      	lsls	r5, r3
   26662:	2376      	movs	r3, #118	; 0x76
   26664:	425b      	negs	r3, r3
   26666:	1a18      	subs	r0, r3, r0
   26668:	2200      	movs	r2, #0
   2666a:	e79d      	b.n	265a8 <__aeabi_fmul+0x50>
   2666c:	2080      	movs	r0, #128	; 0x80
   2666e:	2400      	movs	r4, #0
   26670:	03c0      	lsls	r0, r0, #15
   26672:	22ff      	movs	r2, #255	; 0xff
   26674:	e7ba      	b.n	265ec <__aeabi_fmul+0x94>
   26676:	003d      	movs	r5, r7
   26678:	4652      	mov	r2, sl
   2667a:	e7ab      	b.n	265d4 <__aeabi_fmul+0x7c>
   2667c:	003d      	movs	r5, r7
   2667e:	0021      	movs	r1, r4
   26680:	4652      	mov	r2, sl
   26682:	e7a7      	b.n	265d4 <__aeabi_fmul+0x7c>
   26684:	0c3b      	lsrs	r3, r7, #16
   26686:	469c      	mov	ip, r3
   26688:	042a      	lsls	r2, r5, #16
   2668a:	0c12      	lsrs	r2, r2, #16
   2668c:	0c2b      	lsrs	r3, r5, #16
   2668e:	0014      	movs	r4, r2
   26690:	4660      	mov	r0, ip
   26692:	4665      	mov	r5, ip
   26694:	043f      	lsls	r7, r7, #16
   26696:	0c3f      	lsrs	r7, r7, #16
   26698:	437c      	muls	r4, r7
   2669a:	4342      	muls	r2, r0
   2669c:	435d      	muls	r5, r3
   2669e:	437b      	muls	r3, r7
   266a0:	0c27      	lsrs	r7, r4, #16
   266a2:	189b      	adds	r3, r3, r2
   266a4:	18ff      	adds	r7, r7, r3
   266a6:	42ba      	cmp	r2, r7
   266a8:	d903      	bls.n	266b2 <__aeabi_fmul+0x15a>
   266aa:	2380      	movs	r3, #128	; 0x80
   266ac:	025b      	lsls	r3, r3, #9
   266ae:	469c      	mov	ip, r3
   266b0:	4465      	add	r5, ip
   266b2:	0424      	lsls	r4, r4, #16
   266b4:	043a      	lsls	r2, r7, #16
   266b6:	0c24      	lsrs	r4, r4, #16
   266b8:	1912      	adds	r2, r2, r4
   266ba:	0193      	lsls	r3, r2, #6
   266bc:	1e5c      	subs	r4, r3, #1
   266be:	41a3      	sbcs	r3, r4
   266c0:	0c3f      	lsrs	r7, r7, #16
   266c2:	0e92      	lsrs	r2, r2, #26
   266c4:	197d      	adds	r5, r7, r5
   266c6:	431a      	orrs	r2, r3
   266c8:	01ad      	lsls	r5, r5, #6
   266ca:	4315      	orrs	r5, r2
   266cc:	012b      	lsls	r3, r5, #4
   266ce:	d504      	bpl.n	266da <__aeabi_fmul+0x182>
   266d0:	2301      	movs	r3, #1
   266d2:	465e      	mov	r6, fp
   266d4:	086a      	lsrs	r2, r5, #1
   266d6:	401d      	ands	r5, r3
   266d8:	4315      	orrs	r5, r2
   266da:	0032      	movs	r2, r6
   266dc:	327f      	adds	r2, #127	; 0x7f
   266de:	2a00      	cmp	r2, #0
   266e0:	dd25      	ble.n	2672e <__aeabi_fmul+0x1d6>
   266e2:	076b      	lsls	r3, r5, #29
   266e4:	d004      	beq.n	266f0 <__aeabi_fmul+0x198>
   266e6:	230f      	movs	r3, #15
   266e8:	402b      	ands	r3, r5
   266ea:	2b04      	cmp	r3, #4
   266ec:	d000      	beq.n	266f0 <__aeabi_fmul+0x198>
   266ee:	3504      	adds	r5, #4
   266f0:	012b      	lsls	r3, r5, #4
   266f2:	d503      	bpl.n	266fc <__aeabi_fmul+0x1a4>
   266f4:	0032      	movs	r2, r6
   266f6:	4b27      	ldr	r3, [pc, #156]	; (26794 <__aeabi_fmul+0x23c>)
   266f8:	3280      	adds	r2, #128	; 0x80
   266fa:	401d      	ands	r5, r3
   266fc:	2afe      	cmp	r2, #254	; 0xfe
   266fe:	dc94      	bgt.n	2662a <__aeabi_fmul+0xd2>
   26700:	2401      	movs	r4, #1
   26702:	01a8      	lsls	r0, r5, #6
   26704:	0a40      	lsrs	r0, r0, #9
   26706:	b2d2      	uxtb	r2, r2
   26708:	400c      	ands	r4, r1
   2670a:	e76f      	b.n	265ec <__aeabi_fmul+0x94>
   2670c:	2080      	movs	r0, #128	; 0x80
   2670e:	03c0      	lsls	r0, r0, #15
   26710:	4207      	tst	r7, r0
   26712:	d007      	beq.n	26724 <__aeabi_fmul+0x1cc>
   26714:	4205      	tst	r5, r0
   26716:	d105      	bne.n	26724 <__aeabi_fmul+0x1cc>
   26718:	4328      	orrs	r0, r5
   2671a:	0240      	lsls	r0, r0, #9
   2671c:	0a40      	lsrs	r0, r0, #9
   2671e:	4644      	mov	r4, r8
   26720:	22ff      	movs	r2, #255	; 0xff
   26722:	e763      	b.n	265ec <__aeabi_fmul+0x94>
   26724:	4338      	orrs	r0, r7
   26726:	0240      	lsls	r0, r0, #9
   26728:	0a40      	lsrs	r0, r0, #9
   2672a:	22ff      	movs	r2, #255	; 0xff
   2672c:	e75e      	b.n	265ec <__aeabi_fmul+0x94>
   2672e:	2401      	movs	r4, #1
   26730:	1aa3      	subs	r3, r4, r2
   26732:	2b1b      	cmp	r3, #27
   26734:	dd05      	ble.n	26742 <__aeabi_fmul+0x1ea>
   26736:	400c      	ands	r4, r1
   26738:	2200      	movs	r2, #0
   2673a:	2000      	movs	r0, #0
   2673c:	e756      	b.n	265ec <__aeabi_fmul+0x94>
   2673e:	465e      	mov	r6, fp
   26740:	e7cb      	b.n	266da <__aeabi_fmul+0x182>
   26742:	002a      	movs	r2, r5
   26744:	2020      	movs	r0, #32
   26746:	40da      	lsrs	r2, r3
   26748:	1ac3      	subs	r3, r0, r3
   2674a:	409d      	lsls	r5, r3
   2674c:	002b      	movs	r3, r5
   2674e:	1e5d      	subs	r5, r3, #1
   26750:	41ab      	sbcs	r3, r5
   26752:	4313      	orrs	r3, r2
   26754:	075a      	lsls	r2, r3, #29
   26756:	d004      	beq.n	26762 <__aeabi_fmul+0x20a>
   26758:	220f      	movs	r2, #15
   2675a:	401a      	ands	r2, r3
   2675c:	2a04      	cmp	r2, #4
   2675e:	d000      	beq.n	26762 <__aeabi_fmul+0x20a>
   26760:	3304      	adds	r3, #4
   26762:	015a      	lsls	r2, r3, #5
   26764:	d504      	bpl.n	26770 <__aeabi_fmul+0x218>
   26766:	2401      	movs	r4, #1
   26768:	2201      	movs	r2, #1
   2676a:	400c      	ands	r4, r1
   2676c:	2000      	movs	r0, #0
   2676e:	e73d      	b.n	265ec <__aeabi_fmul+0x94>
   26770:	2401      	movs	r4, #1
   26772:	019b      	lsls	r3, r3, #6
   26774:	0a58      	lsrs	r0, r3, #9
   26776:	400c      	ands	r4, r1
   26778:	2200      	movs	r2, #0
   2677a:	e737      	b.n	265ec <__aeabi_fmul+0x94>
   2677c:	2080      	movs	r0, #128	; 0x80
   2677e:	2401      	movs	r4, #1
   26780:	03c0      	lsls	r0, r0, #15
   26782:	4328      	orrs	r0, r5
   26784:	0240      	lsls	r0, r0, #9
   26786:	0a40      	lsrs	r0, r0, #9
   26788:	400c      	ands	r4, r1
   2678a:	22ff      	movs	r2, #255	; 0xff
   2678c:	e72e      	b.n	265ec <__aeabi_fmul+0x94>
   2678e:	46c0      	nop			; (mov r8, r8)
   26790:	0002fa98 	.word	0x0002fa98
   26794:	f7ffffff 	.word	0xf7ffffff

00026798 <__aeabi_fsub>:
   26798:	b5f0      	push	{r4, r5, r6, r7, lr}
   2679a:	464f      	mov	r7, r9
   2679c:	46d6      	mov	lr, sl
   2679e:	4646      	mov	r6, r8
   267a0:	0044      	lsls	r4, r0, #1
   267a2:	b5c0      	push	{r6, r7, lr}
   267a4:	0fc2      	lsrs	r2, r0, #31
   267a6:	0247      	lsls	r7, r0, #9
   267a8:	0248      	lsls	r0, r1, #9
   267aa:	0a40      	lsrs	r0, r0, #9
   267ac:	4684      	mov	ip, r0
   267ae:	4666      	mov	r6, ip
   267b0:	0a7b      	lsrs	r3, r7, #9
   267b2:	0048      	lsls	r0, r1, #1
   267b4:	0fc9      	lsrs	r1, r1, #31
   267b6:	469a      	mov	sl, r3
   267b8:	0e24      	lsrs	r4, r4, #24
   267ba:	0015      	movs	r5, r2
   267bc:	00db      	lsls	r3, r3, #3
   267be:	0e00      	lsrs	r0, r0, #24
   267c0:	4689      	mov	r9, r1
   267c2:	00f6      	lsls	r6, r6, #3
   267c4:	28ff      	cmp	r0, #255	; 0xff
   267c6:	d100      	bne.n	267ca <__aeabi_fsub+0x32>
   267c8:	e08f      	b.n	268ea <__aeabi_fsub+0x152>
   267ca:	2101      	movs	r1, #1
   267cc:	464f      	mov	r7, r9
   267ce:	404f      	eors	r7, r1
   267d0:	0039      	movs	r1, r7
   267d2:	4291      	cmp	r1, r2
   267d4:	d066      	beq.n	268a4 <__aeabi_fsub+0x10c>
   267d6:	1a22      	subs	r2, r4, r0
   267d8:	2a00      	cmp	r2, #0
   267da:	dc00      	bgt.n	267de <__aeabi_fsub+0x46>
   267dc:	e09d      	b.n	2691a <__aeabi_fsub+0x182>
   267de:	2800      	cmp	r0, #0
   267e0:	d13d      	bne.n	2685e <__aeabi_fsub+0xc6>
   267e2:	2e00      	cmp	r6, #0
   267e4:	d100      	bne.n	267e8 <__aeabi_fsub+0x50>
   267e6:	e08b      	b.n	26900 <__aeabi_fsub+0x168>
   267e8:	1e51      	subs	r1, r2, #1
   267ea:	2900      	cmp	r1, #0
   267ec:	d000      	beq.n	267f0 <__aeabi_fsub+0x58>
   267ee:	e0b5      	b.n	2695c <__aeabi_fsub+0x1c4>
   267f0:	2401      	movs	r4, #1
   267f2:	1b9b      	subs	r3, r3, r6
   267f4:	015a      	lsls	r2, r3, #5
   267f6:	d544      	bpl.n	26882 <__aeabi_fsub+0xea>
   267f8:	019b      	lsls	r3, r3, #6
   267fa:	099f      	lsrs	r7, r3, #6
   267fc:	0038      	movs	r0, r7
   267fe:	f7ff fa8b 	bl	25d18 <__clzsi2>
   26802:	3805      	subs	r0, #5
   26804:	4087      	lsls	r7, r0
   26806:	4284      	cmp	r4, r0
   26808:	dd00      	ble.n	2680c <__aeabi_fsub+0x74>
   2680a:	e096      	b.n	2693a <__aeabi_fsub+0x1a2>
   2680c:	1b04      	subs	r4, r0, r4
   2680e:	003a      	movs	r2, r7
   26810:	2020      	movs	r0, #32
   26812:	3401      	adds	r4, #1
   26814:	40e2      	lsrs	r2, r4
   26816:	1b04      	subs	r4, r0, r4
   26818:	40a7      	lsls	r7, r4
   2681a:	003b      	movs	r3, r7
   2681c:	1e5f      	subs	r7, r3, #1
   2681e:	41bb      	sbcs	r3, r7
   26820:	2400      	movs	r4, #0
   26822:	4313      	orrs	r3, r2
   26824:	075a      	lsls	r2, r3, #29
   26826:	d004      	beq.n	26832 <__aeabi_fsub+0x9a>
   26828:	220f      	movs	r2, #15
   2682a:	401a      	ands	r2, r3
   2682c:	2a04      	cmp	r2, #4
   2682e:	d000      	beq.n	26832 <__aeabi_fsub+0x9a>
   26830:	3304      	adds	r3, #4
   26832:	015a      	lsls	r2, r3, #5
   26834:	d527      	bpl.n	26886 <__aeabi_fsub+0xee>
   26836:	3401      	adds	r4, #1
   26838:	2cff      	cmp	r4, #255	; 0xff
   2683a:	d100      	bne.n	2683e <__aeabi_fsub+0xa6>
   2683c:	e079      	b.n	26932 <__aeabi_fsub+0x19a>
   2683e:	2201      	movs	r2, #1
   26840:	019b      	lsls	r3, r3, #6
   26842:	0a5b      	lsrs	r3, r3, #9
   26844:	b2e4      	uxtb	r4, r4
   26846:	402a      	ands	r2, r5
   26848:	025b      	lsls	r3, r3, #9
   2684a:	05e4      	lsls	r4, r4, #23
   2684c:	0a58      	lsrs	r0, r3, #9
   2684e:	07d2      	lsls	r2, r2, #31
   26850:	4320      	orrs	r0, r4
   26852:	4310      	orrs	r0, r2
   26854:	bc1c      	pop	{r2, r3, r4}
   26856:	4690      	mov	r8, r2
   26858:	4699      	mov	r9, r3
   2685a:	46a2      	mov	sl, r4
   2685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2685e:	2cff      	cmp	r4, #255	; 0xff
   26860:	d0e0      	beq.n	26824 <__aeabi_fsub+0x8c>
   26862:	2180      	movs	r1, #128	; 0x80
   26864:	04c9      	lsls	r1, r1, #19
   26866:	430e      	orrs	r6, r1
   26868:	2a1b      	cmp	r2, #27
   2686a:	dc7b      	bgt.n	26964 <__aeabi_fsub+0x1cc>
   2686c:	0031      	movs	r1, r6
   2686e:	2020      	movs	r0, #32
   26870:	40d1      	lsrs	r1, r2
   26872:	1a82      	subs	r2, r0, r2
   26874:	4096      	lsls	r6, r2
   26876:	1e72      	subs	r2, r6, #1
   26878:	4196      	sbcs	r6, r2
   2687a:	430e      	orrs	r6, r1
   2687c:	1b9b      	subs	r3, r3, r6
   2687e:	015a      	lsls	r2, r3, #5
   26880:	d4ba      	bmi.n	267f8 <__aeabi_fsub+0x60>
   26882:	075a      	lsls	r2, r3, #29
   26884:	d1d0      	bne.n	26828 <__aeabi_fsub+0x90>
   26886:	2201      	movs	r2, #1
   26888:	08df      	lsrs	r7, r3, #3
   2688a:	402a      	ands	r2, r5
   2688c:	2cff      	cmp	r4, #255	; 0xff
   2688e:	d133      	bne.n	268f8 <__aeabi_fsub+0x160>
   26890:	2f00      	cmp	r7, #0
   26892:	d100      	bne.n	26896 <__aeabi_fsub+0xfe>
   26894:	e0a8      	b.n	269e8 <__aeabi_fsub+0x250>
   26896:	2380      	movs	r3, #128	; 0x80
   26898:	03db      	lsls	r3, r3, #15
   2689a:	433b      	orrs	r3, r7
   2689c:	025b      	lsls	r3, r3, #9
   2689e:	0a5b      	lsrs	r3, r3, #9
   268a0:	24ff      	movs	r4, #255	; 0xff
   268a2:	e7d1      	b.n	26848 <__aeabi_fsub+0xb0>
   268a4:	1a21      	subs	r1, r4, r0
   268a6:	2900      	cmp	r1, #0
   268a8:	dd4c      	ble.n	26944 <__aeabi_fsub+0x1ac>
   268aa:	2800      	cmp	r0, #0
   268ac:	d02a      	beq.n	26904 <__aeabi_fsub+0x16c>
   268ae:	2cff      	cmp	r4, #255	; 0xff
   268b0:	d0b8      	beq.n	26824 <__aeabi_fsub+0x8c>
   268b2:	2080      	movs	r0, #128	; 0x80
   268b4:	04c0      	lsls	r0, r0, #19
   268b6:	4306      	orrs	r6, r0
   268b8:	291b      	cmp	r1, #27
   268ba:	dd00      	ble.n	268be <__aeabi_fsub+0x126>
   268bc:	e0af      	b.n	26a1e <__aeabi_fsub+0x286>
   268be:	0030      	movs	r0, r6
   268c0:	2720      	movs	r7, #32
   268c2:	40c8      	lsrs	r0, r1
   268c4:	1a79      	subs	r1, r7, r1
   268c6:	408e      	lsls	r6, r1
   268c8:	1e71      	subs	r1, r6, #1
   268ca:	418e      	sbcs	r6, r1
   268cc:	4306      	orrs	r6, r0
   268ce:	199b      	adds	r3, r3, r6
   268d0:	0159      	lsls	r1, r3, #5
   268d2:	d5d6      	bpl.n	26882 <__aeabi_fsub+0xea>
   268d4:	3401      	adds	r4, #1
   268d6:	2cff      	cmp	r4, #255	; 0xff
   268d8:	d100      	bne.n	268dc <__aeabi_fsub+0x144>
   268da:	e085      	b.n	269e8 <__aeabi_fsub+0x250>
   268dc:	2201      	movs	r2, #1
   268de:	497a      	ldr	r1, [pc, #488]	; (26ac8 <__aeabi_fsub+0x330>)
   268e0:	401a      	ands	r2, r3
   268e2:	085b      	lsrs	r3, r3, #1
   268e4:	400b      	ands	r3, r1
   268e6:	4313      	orrs	r3, r2
   268e8:	e79c      	b.n	26824 <__aeabi_fsub+0x8c>
   268ea:	2e00      	cmp	r6, #0
   268ec:	d000      	beq.n	268f0 <__aeabi_fsub+0x158>
   268ee:	e770      	b.n	267d2 <__aeabi_fsub+0x3a>
   268f0:	e76b      	b.n	267ca <__aeabi_fsub+0x32>
   268f2:	1e3b      	subs	r3, r7, #0
   268f4:	d1c5      	bne.n	26882 <__aeabi_fsub+0xea>
   268f6:	2200      	movs	r2, #0
   268f8:	027b      	lsls	r3, r7, #9
   268fa:	0a5b      	lsrs	r3, r3, #9
   268fc:	b2e4      	uxtb	r4, r4
   268fe:	e7a3      	b.n	26848 <__aeabi_fsub+0xb0>
   26900:	0014      	movs	r4, r2
   26902:	e78f      	b.n	26824 <__aeabi_fsub+0x8c>
   26904:	2e00      	cmp	r6, #0
   26906:	d04d      	beq.n	269a4 <__aeabi_fsub+0x20c>
   26908:	1e48      	subs	r0, r1, #1
   2690a:	2800      	cmp	r0, #0
   2690c:	d157      	bne.n	269be <__aeabi_fsub+0x226>
   2690e:	199b      	adds	r3, r3, r6
   26910:	2401      	movs	r4, #1
   26912:	015a      	lsls	r2, r3, #5
   26914:	d5b5      	bpl.n	26882 <__aeabi_fsub+0xea>
   26916:	2402      	movs	r4, #2
   26918:	e7e0      	b.n	268dc <__aeabi_fsub+0x144>
   2691a:	2a00      	cmp	r2, #0
   2691c:	d125      	bne.n	2696a <__aeabi_fsub+0x1d2>
   2691e:	1c62      	adds	r2, r4, #1
   26920:	b2d2      	uxtb	r2, r2
   26922:	2a01      	cmp	r2, #1
   26924:	dd72      	ble.n	26a0c <__aeabi_fsub+0x274>
   26926:	1b9f      	subs	r7, r3, r6
   26928:	017a      	lsls	r2, r7, #5
   2692a:	d535      	bpl.n	26998 <__aeabi_fsub+0x200>
   2692c:	1af7      	subs	r7, r6, r3
   2692e:	000d      	movs	r5, r1
   26930:	e764      	b.n	267fc <__aeabi_fsub+0x64>
   26932:	2201      	movs	r2, #1
   26934:	2300      	movs	r3, #0
   26936:	402a      	ands	r2, r5
   26938:	e786      	b.n	26848 <__aeabi_fsub+0xb0>
   2693a:	003b      	movs	r3, r7
   2693c:	4a63      	ldr	r2, [pc, #396]	; (26acc <__aeabi_fsub+0x334>)
   2693e:	1a24      	subs	r4, r4, r0
   26940:	4013      	ands	r3, r2
   26942:	e76f      	b.n	26824 <__aeabi_fsub+0x8c>
   26944:	2900      	cmp	r1, #0
   26946:	d16c      	bne.n	26a22 <__aeabi_fsub+0x28a>
   26948:	1c61      	adds	r1, r4, #1
   2694a:	b2c8      	uxtb	r0, r1
   2694c:	2801      	cmp	r0, #1
   2694e:	dd4e      	ble.n	269ee <__aeabi_fsub+0x256>
   26950:	29ff      	cmp	r1, #255	; 0xff
   26952:	d049      	beq.n	269e8 <__aeabi_fsub+0x250>
   26954:	199b      	adds	r3, r3, r6
   26956:	085b      	lsrs	r3, r3, #1
   26958:	000c      	movs	r4, r1
   2695a:	e763      	b.n	26824 <__aeabi_fsub+0x8c>
   2695c:	2aff      	cmp	r2, #255	; 0xff
   2695e:	d041      	beq.n	269e4 <__aeabi_fsub+0x24c>
   26960:	000a      	movs	r2, r1
   26962:	e781      	b.n	26868 <__aeabi_fsub+0xd0>
   26964:	2601      	movs	r6, #1
   26966:	1b9b      	subs	r3, r3, r6
   26968:	e789      	b.n	2687e <__aeabi_fsub+0xe6>
   2696a:	2c00      	cmp	r4, #0
   2696c:	d01c      	beq.n	269a8 <__aeabi_fsub+0x210>
   2696e:	28ff      	cmp	r0, #255	; 0xff
   26970:	d021      	beq.n	269b6 <__aeabi_fsub+0x21e>
   26972:	2480      	movs	r4, #128	; 0x80
   26974:	04e4      	lsls	r4, r4, #19
   26976:	4252      	negs	r2, r2
   26978:	4323      	orrs	r3, r4
   2697a:	2a1b      	cmp	r2, #27
   2697c:	dd00      	ble.n	26980 <__aeabi_fsub+0x1e8>
   2697e:	e096      	b.n	26aae <__aeabi_fsub+0x316>
   26980:	001c      	movs	r4, r3
   26982:	2520      	movs	r5, #32
   26984:	40d4      	lsrs	r4, r2
   26986:	1aaa      	subs	r2, r5, r2
   26988:	4093      	lsls	r3, r2
   2698a:	1e5a      	subs	r2, r3, #1
   2698c:	4193      	sbcs	r3, r2
   2698e:	4323      	orrs	r3, r4
   26990:	1af3      	subs	r3, r6, r3
   26992:	0004      	movs	r4, r0
   26994:	000d      	movs	r5, r1
   26996:	e72d      	b.n	267f4 <__aeabi_fsub+0x5c>
   26998:	2f00      	cmp	r7, #0
   2699a:	d000      	beq.n	2699e <__aeabi_fsub+0x206>
   2699c:	e72e      	b.n	267fc <__aeabi_fsub+0x64>
   2699e:	2200      	movs	r2, #0
   269a0:	2400      	movs	r4, #0
   269a2:	e7a9      	b.n	268f8 <__aeabi_fsub+0x160>
   269a4:	000c      	movs	r4, r1
   269a6:	e73d      	b.n	26824 <__aeabi_fsub+0x8c>
   269a8:	2b00      	cmp	r3, #0
   269aa:	d058      	beq.n	26a5e <__aeabi_fsub+0x2c6>
   269ac:	43d2      	mvns	r2, r2
   269ae:	2a00      	cmp	r2, #0
   269b0:	d0ee      	beq.n	26990 <__aeabi_fsub+0x1f8>
   269b2:	28ff      	cmp	r0, #255	; 0xff
   269b4:	d1e1      	bne.n	2697a <__aeabi_fsub+0x1e2>
   269b6:	0033      	movs	r3, r6
   269b8:	24ff      	movs	r4, #255	; 0xff
   269ba:	000d      	movs	r5, r1
   269bc:	e732      	b.n	26824 <__aeabi_fsub+0x8c>
   269be:	29ff      	cmp	r1, #255	; 0xff
   269c0:	d010      	beq.n	269e4 <__aeabi_fsub+0x24c>
   269c2:	0001      	movs	r1, r0
   269c4:	e778      	b.n	268b8 <__aeabi_fsub+0x120>
   269c6:	2b00      	cmp	r3, #0
   269c8:	d06e      	beq.n	26aa8 <__aeabi_fsub+0x310>
   269ca:	24ff      	movs	r4, #255	; 0xff
   269cc:	2e00      	cmp	r6, #0
   269ce:	d100      	bne.n	269d2 <__aeabi_fsub+0x23a>
   269d0:	e728      	b.n	26824 <__aeabi_fsub+0x8c>
   269d2:	2280      	movs	r2, #128	; 0x80
   269d4:	4651      	mov	r1, sl
   269d6:	03d2      	lsls	r2, r2, #15
   269d8:	4211      	tst	r1, r2
   269da:	d003      	beq.n	269e4 <__aeabi_fsub+0x24c>
   269dc:	4661      	mov	r1, ip
   269de:	4211      	tst	r1, r2
   269e0:	d100      	bne.n	269e4 <__aeabi_fsub+0x24c>
   269e2:	0033      	movs	r3, r6
   269e4:	24ff      	movs	r4, #255	; 0xff
   269e6:	e71d      	b.n	26824 <__aeabi_fsub+0x8c>
   269e8:	24ff      	movs	r4, #255	; 0xff
   269ea:	2300      	movs	r3, #0
   269ec:	e72c      	b.n	26848 <__aeabi_fsub+0xb0>
   269ee:	2c00      	cmp	r4, #0
   269f0:	d1e9      	bne.n	269c6 <__aeabi_fsub+0x22e>
   269f2:	2b00      	cmp	r3, #0
   269f4:	d063      	beq.n	26abe <__aeabi_fsub+0x326>
   269f6:	2e00      	cmp	r6, #0
   269f8:	d100      	bne.n	269fc <__aeabi_fsub+0x264>
   269fa:	e713      	b.n	26824 <__aeabi_fsub+0x8c>
   269fc:	199b      	adds	r3, r3, r6
   269fe:	015a      	lsls	r2, r3, #5
   26a00:	d400      	bmi.n	26a04 <__aeabi_fsub+0x26c>
   26a02:	e73e      	b.n	26882 <__aeabi_fsub+0xea>
   26a04:	4a31      	ldr	r2, [pc, #196]	; (26acc <__aeabi_fsub+0x334>)
   26a06:	000c      	movs	r4, r1
   26a08:	4013      	ands	r3, r2
   26a0a:	e70b      	b.n	26824 <__aeabi_fsub+0x8c>
   26a0c:	2c00      	cmp	r4, #0
   26a0e:	d11e      	bne.n	26a4e <__aeabi_fsub+0x2b6>
   26a10:	2b00      	cmp	r3, #0
   26a12:	d12f      	bne.n	26a74 <__aeabi_fsub+0x2dc>
   26a14:	2e00      	cmp	r6, #0
   26a16:	d04f      	beq.n	26ab8 <__aeabi_fsub+0x320>
   26a18:	0033      	movs	r3, r6
   26a1a:	000d      	movs	r5, r1
   26a1c:	e702      	b.n	26824 <__aeabi_fsub+0x8c>
   26a1e:	2601      	movs	r6, #1
   26a20:	e755      	b.n	268ce <__aeabi_fsub+0x136>
   26a22:	2c00      	cmp	r4, #0
   26a24:	d11f      	bne.n	26a66 <__aeabi_fsub+0x2ce>
   26a26:	2b00      	cmp	r3, #0
   26a28:	d043      	beq.n	26ab2 <__aeabi_fsub+0x31a>
   26a2a:	43c9      	mvns	r1, r1
   26a2c:	2900      	cmp	r1, #0
   26a2e:	d00b      	beq.n	26a48 <__aeabi_fsub+0x2b0>
   26a30:	28ff      	cmp	r0, #255	; 0xff
   26a32:	d039      	beq.n	26aa8 <__aeabi_fsub+0x310>
   26a34:	291b      	cmp	r1, #27
   26a36:	dc44      	bgt.n	26ac2 <__aeabi_fsub+0x32a>
   26a38:	001c      	movs	r4, r3
   26a3a:	2720      	movs	r7, #32
   26a3c:	40cc      	lsrs	r4, r1
   26a3e:	1a79      	subs	r1, r7, r1
   26a40:	408b      	lsls	r3, r1
   26a42:	1e59      	subs	r1, r3, #1
   26a44:	418b      	sbcs	r3, r1
   26a46:	4323      	orrs	r3, r4
   26a48:	199b      	adds	r3, r3, r6
   26a4a:	0004      	movs	r4, r0
   26a4c:	e740      	b.n	268d0 <__aeabi_fsub+0x138>
   26a4e:	2b00      	cmp	r3, #0
   26a50:	d11a      	bne.n	26a88 <__aeabi_fsub+0x2f0>
   26a52:	2e00      	cmp	r6, #0
   26a54:	d124      	bne.n	26aa0 <__aeabi_fsub+0x308>
   26a56:	2780      	movs	r7, #128	; 0x80
   26a58:	2200      	movs	r2, #0
   26a5a:	03ff      	lsls	r7, r7, #15
   26a5c:	e71b      	b.n	26896 <__aeabi_fsub+0xfe>
   26a5e:	0033      	movs	r3, r6
   26a60:	0004      	movs	r4, r0
   26a62:	000d      	movs	r5, r1
   26a64:	e6de      	b.n	26824 <__aeabi_fsub+0x8c>
   26a66:	28ff      	cmp	r0, #255	; 0xff
   26a68:	d01e      	beq.n	26aa8 <__aeabi_fsub+0x310>
   26a6a:	2480      	movs	r4, #128	; 0x80
   26a6c:	04e4      	lsls	r4, r4, #19
   26a6e:	4249      	negs	r1, r1
   26a70:	4323      	orrs	r3, r4
   26a72:	e7df      	b.n	26a34 <__aeabi_fsub+0x29c>
   26a74:	2e00      	cmp	r6, #0
   26a76:	d100      	bne.n	26a7a <__aeabi_fsub+0x2e2>
   26a78:	e6d4      	b.n	26824 <__aeabi_fsub+0x8c>
   26a7a:	1b9f      	subs	r7, r3, r6
   26a7c:	017a      	lsls	r2, r7, #5
   26a7e:	d400      	bmi.n	26a82 <__aeabi_fsub+0x2ea>
   26a80:	e737      	b.n	268f2 <__aeabi_fsub+0x15a>
   26a82:	1af3      	subs	r3, r6, r3
   26a84:	000d      	movs	r5, r1
   26a86:	e6cd      	b.n	26824 <__aeabi_fsub+0x8c>
   26a88:	24ff      	movs	r4, #255	; 0xff
   26a8a:	2e00      	cmp	r6, #0
   26a8c:	d100      	bne.n	26a90 <__aeabi_fsub+0x2f8>
   26a8e:	e6c9      	b.n	26824 <__aeabi_fsub+0x8c>
   26a90:	2280      	movs	r2, #128	; 0x80
   26a92:	4650      	mov	r0, sl
   26a94:	03d2      	lsls	r2, r2, #15
   26a96:	4210      	tst	r0, r2
   26a98:	d0a4      	beq.n	269e4 <__aeabi_fsub+0x24c>
   26a9a:	4660      	mov	r0, ip
   26a9c:	4210      	tst	r0, r2
   26a9e:	d1a1      	bne.n	269e4 <__aeabi_fsub+0x24c>
   26aa0:	0033      	movs	r3, r6
   26aa2:	000d      	movs	r5, r1
   26aa4:	24ff      	movs	r4, #255	; 0xff
   26aa6:	e6bd      	b.n	26824 <__aeabi_fsub+0x8c>
   26aa8:	0033      	movs	r3, r6
   26aaa:	24ff      	movs	r4, #255	; 0xff
   26aac:	e6ba      	b.n	26824 <__aeabi_fsub+0x8c>
   26aae:	2301      	movs	r3, #1
   26ab0:	e76e      	b.n	26990 <__aeabi_fsub+0x1f8>
   26ab2:	0033      	movs	r3, r6
   26ab4:	0004      	movs	r4, r0
   26ab6:	e6b5      	b.n	26824 <__aeabi_fsub+0x8c>
   26ab8:	2700      	movs	r7, #0
   26aba:	2200      	movs	r2, #0
   26abc:	e71c      	b.n	268f8 <__aeabi_fsub+0x160>
   26abe:	0033      	movs	r3, r6
   26ac0:	e6b0      	b.n	26824 <__aeabi_fsub+0x8c>
   26ac2:	2301      	movs	r3, #1
   26ac4:	e7c0      	b.n	26a48 <__aeabi_fsub+0x2b0>
   26ac6:	46c0      	nop			; (mov r8, r8)
   26ac8:	7dffffff 	.word	0x7dffffff
   26acc:	fbffffff 	.word	0xfbffffff

00026ad0 <__aeabi_f2iz>:
   26ad0:	0241      	lsls	r1, r0, #9
   26ad2:	0043      	lsls	r3, r0, #1
   26ad4:	0fc2      	lsrs	r2, r0, #31
   26ad6:	0a49      	lsrs	r1, r1, #9
   26ad8:	0e1b      	lsrs	r3, r3, #24
   26ada:	2000      	movs	r0, #0
   26adc:	2b7e      	cmp	r3, #126	; 0x7e
   26ade:	dd0d      	ble.n	26afc <__aeabi_f2iz+0x2c>
   26ae0:	2b9d      	cmp	r3, #157	; 0x9d
   26ae2:	dc0c      	bgt.n	26afe <__aeabi_f2iz+0x2e>
   26ae4:	2080      	movs	r0, #128	; 0x80
   26ae6:	0400      	lsls	r0, r0, #16
   26ae8:	4301      	orrs	r1, r0
   26aea:	2b95      	cmp	r3, #149	; 0x95
   26aec:	dc0a      	bgt.n	26b04 <__aeabi_f2iz+0x34>
   26aee:	2096      	movs	r0, #150	; 0x96
   26af0:	1ac3      	subs	r3, r0, r3
   26af2:	40d9      	lsrs	r1, r3
   26af4:	4248      	negs	r0, r1
   26af6:	2a00      	cmp	r2, #0
   26af8:	d100      	bne.n	26afc <__aeabi_f2iz+0x2c>
   26afa:	0008      	movs	r0, r1
   26afc:	4770      	bx	lr
   26afe:	4b03      	ldr	r3, [pc, #12]	; (26b0c <__aeabi_f2iz+0x3c>)
   26b00:	18d0      	adds	r0, r2, r3
   26b02:	e7fb      	b.n	26afc <__aeabi_f2iz+0x2c>
   26b04:	3b96      	subs	r3, #150	; 0x96
   26b06:	4099      	lsls	r1, r3
   26b08:	e7f4      	b.n	26af4 <__aeabi_f2iz+0x24>
   26b0a:	46c0      	nop			; (mov r8, r8)
   26b0c:	7fffffff 	.word	0x7fffffff

00026b10 <__aeabi_i2f>:
   26b10:	b570      	push	{r4, r5, r6, lr}
   26b12:	2800      	cmp	r0, #0
   26b14:	d030      	beq.n	26b78 <__aeabi_i2f+0x68>
   26b16:	17c3      	asrs	r3, r0, #31
   26b18:	18c4      	adds	r4, r0, r3
   26b1a:	405c      	eors	r4, r3
   26b1c:	0fc5      	lsrs	r5, r0, #31
   26b1e:	0020      	movs	r0, r4
   26b20:	f7ff f8fa 	bl	25d18 <__clzsi2>
   26b24:	239e      	movs	r3, #158	; 0x9e
   26b26:	1a1b      	subs	r3, r3, r0
   26b28:	2b96      	cmp	r3, #150	; 0x96
   26b2a:	dc0d      	bgt.n	26b48 <__aeabi_i2f+0x38>
   26b2c:	2296      	movs	r2, #150	; 0x96
   26b2e:	1ad2      	subs	r2, r2, r3
   26b30:	4094      	lsls	r4, r2
   26b32:	002a      	movs	r2, r5
   26b34:	0264      	lsls	r4, r4, #9
   26b36:	0a64      	lsrs	r4, r4, #9
   26b38:	b2db      	uxtb	r3, r3
   26b3a:	0264      	lsls	r4, r4, #9
   26b3c:	05db      	lsls	r3, r3, #23
   26b3e:	0a60      	lsrs	r0, r4, #9
   26b40:	07d2      	lsls	r2, r2, #31
   26b42:	4318      	orrs	r0, r3
   26b44:	4310      	orrs	r0, r2
   26b46:	bd70      	pop	{r4, r5, r6, pc}
   26b48:	2b99      	cmp	r3, #153	; 0x99
   26b4a:	dc19      	bgt.n	26b80 <__aeabi_i2f+0x70>
   26b4c:	2299      	movs	r2, #153	; 0x99
   26b4e:	1ad2      	subs	r2, r2, r3
   26b50:	2a00      	cmp	r2, #0
   26b52:	dd29      	ble.n	26ba8 <__aeabi_i2f+0x98>
   26b54:	4094      	lsls	r4, r2
   26b56:	0022      	movs	r2, r4
   26b58:	4c14      	ldr	r4, [pc, #80]	; (26bac <__aeabi_i2f+0x9c>)
   26b5a:	4014      	ands	r4, r2
   26b5c:	0751      	lsls	r1, r2, #29
   26b5e:	d004      	beq.n	26b6a <__aeabi_i2f+0x5a>
   26b60:	210f      	movs	r1, #15
   26b62:	400a      	ands	r2, r1
   26b64:	2a04      	cmp	r2, #4
   26b66:	d000      	beq.n	26b6a <__aeabi_i2f+0x5a>
   26b68:	3404      	adds	r4, #4
   26b6a:	0162      	lsls	r2, r4, #5
   26b6c:	d413      	bmi.n	26b96 <__aeabi_i2f+0x86>
   26b6e:	01a4      	lsls	r4, r4, #6
   26b70:	0a64      	lsrs	r4, r4, #9
   26b72:	b2db      	uxtb	r3, r3
   26b74:	002a      	movs	r2, r5
   26b76:	e7e0      	b.n	26b3a <__aeabi_i2f+0x2a>
   26b78:	2200      	movs	r2, #0
   26b7a:	2300      	movs	r3, #0
   26b7c:	2400      	movs	r4, #0
   26b7e:	e7dc      	b.n	26b3a <__aeabi_i2f+0x2a>
   26b80:	2205      	movs	r2, #5
   26b82:	0021      	movs	r1, r4
   26b84:	1a12      	subs	r2, r2, r0
   26b86:	40d1      	lsrs	r1, r2
   26b88:	22b9      	movs	r2, #185	; 0xb9
   26b8a:	1ad2      	subs	r2, r2, r3
   26b8c:	4094      	lsls	r4, r2
   26b8e:	1e62      	subs	r2, r4, #1
   26b90:	4194      	sbcs	r4, r2
   26b92:	430c      	orrs	r4, r1
   26b94:	e7da      	b.n	26b4c <__aeabi_i2f+0x3c>
   26b96:	4b05      	ldr	r3, [pc, #20]	; (26bac <__aeabi_i2f+0x9c>)
   26b98:	002a      	movs	r2, r5
   26b9a:	401c      	ands	r4, r3
   26b9c:	239f      	movs	r3, #159	; 0x9f
   26b9e:	01a4      	lsls	r4, r4, #6
   26ba0:	1a1b      	subs	r3, r3, r0
   26ba2:	0a64      	lsrs	r4, r4, #9
   26ba4:	b2db      	uxtb	r3, r3
   26ba6:	e7c8      	b.n	26b3a <__aeabi_i2f+0x2a>
   26ba8:	0022      	movs	r2, r4
   26baa:	e7d5      	b.n	26b58 <__aeabi_i2f+0x48>
   26bac:	fbffffff 	.word	0xfbffffff

00026bb0 <__aeabi_ui2f>:
   26bb0:	b510      	push	{r4, lr}
   26bb2:	1e04      	subs	r4, r0, #0
   26bb4:	d027      	beq.n	26c06 <__aeabi_ui2f+0x56>
   26bb6:	f7ff f8af 	bl	25d18 <__clzsi2>
   26bba:	239e      	movs	r3, #158	; 0x9e
   26bbc:	1a1b      	subs	r3, r3, r0
   26bbe:	2b96      	cmp	r3, #150	; 0x96
   26bc0:	dc0a      	bgt.n	26bd8 <__aeabi_ui2f+0x28>
   26bc2:	2296      	movs	r2, #150	; 0x96
   26bc4:	1ad2      	subs	r2, r2, r3
   26bc6:	4094      	lsls	r4, r2
   26bc8:	0264      	lsls	r4, r4, #9
   26bca:	0a64      	lsrs	r4, r4, #9
   26bcc:	b2db      	uxtb	r3, r3
   26bce:	0264      	lsls	r4, r4, #9
   26bd0:	05db      	lsls	r3, r3, #23
   26bd2:	0a60      	lsrs	r0, r4, #9
   26bd4:	4318      	orrs	r0, r3
   26bd6:	bd10      	pop	{r4, pc}
   26bd8:	2b99      	cmp	r3, #153	; 0x99
   26bda:	dc17      	bgt.n	26c0c <__aeabi_ui2f+0x5c>
   26bdc:	2299      	movs	r2, #153	; 0x99
   26bde:	1ad2      	subs	r2, r2, r3
   26be0:	2a00      	cmp	r2, #0
   26be2:	dd27      	ble.n	26c34 <__aeabi_ui2f+0x84>
   26be4:	4094      	lsls	r4, r2
   26be6:	0022      	movs	r2, r4
   26be8:	4c13      	ldr	r4, [pc, #76]	; (26c38 <__aeabi_ui2f+0x88>)
   26bea:	4014      	ands	r4, r2
   26bec:	0751      	lsls	r1, r2, #29
   26bee:	d004      	beq.n	26bfa <__aeabi_ui2f+0x4a>
   26bf0:	210f      	movs	r1, #15
   26bf2:	400a      	ands	r2, r1
   26bf4:	2a04      	cmp	r2, #4
   26bf6:	d000      	beq.n	26bfa <__aeabi_ui2f+0x4a>
   26bf8:	3404      	adds	r4, #4
   26bfa:	0162      	lsls	r2, r4, #5
   26bfc:	d412      	bmi.n	26c24 <__aeabi_ui2f+0x74>
   26bfe:	01a4      	lsls	r4, r4, #6
   26c00:	0a64      	lsrs	r4, r4, #9
   26c02:	b2db      	uxtb	r3, r3
   26c04:	e7e3      	b.n	26bce <__aeabi_ui2f+0x1e>
   26c06:	2300      	movs	r3, #0
   26c08:	2400      	movs	r4, #0
   26c0a:	e7e0      	b.n	26bce <__aeabi_ui2f+0x1e>
   26c0c:	22b9      	movs	r2, #185	; 0xb9
   26c0e:	0021      	movs	r1, r4
   26c10:	1ad2      	subs	r2, r2, r3
   26c12:	4091      	lsls	r1, r2
   26c14:	000a      	movs	r2, r1
   26c16:	1e51      	subs	r1, r2, #1
   26c18:	418a      	sbcs	r2, r1
   26c1a:	2105      	movs	r1, #5
   26c1c:	1a09      	subs	r1, r1, r0
   26c1e:	40cc      	lsrs	r4, r1
   26c20:	4314      	orrs	r4, r2
   26c22:	e7db      	b.n	26bdc <__aeabi_ui2f+0x2c>
   26c24:	4b04      	ldr	r3, [pc, #16]	; (26c38 <__aeabi_ui2f+0x88>)
   26c26:	401c      	ands	r4, r3
   26c28:	239f      	movs	r3, #159	; 0x9f
   26c2a:	01a4      	lsls	r4, r4, #6
   26c2c:	1a1b      	subs	r3, r3, r0
   26c2e:	0a64      	lsrs	r4, r4, #9
   26c30:	b2db      	uxtb	r3, r3
   26c32:	e7cc      	b.n	26bce <__aeabi_ui2f+0x1e>
   26c34:	0022      	movs	r2, r4
   26c36:	e7d7      	b.n	26be8 <__aeabi_ui2f+0x38>
   26c38:	fbffffff 	.word	0xfbffffff

00026c3c <__aeabi_dadd>:
   26c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c3e:	4645      	mov	r5, r8
   26c40:	46de      	mov	lr, fp
   26c42:	4657      	mov	r7, sl
   26c44:	464e      	mov	r6, r9
   26c46:	030c      	lsls	r4, r1, #12
   26c48:	b5e0      	push	{r5, r6, r7, lr}
   26c4a:	004e      	lsls	r6, r1, #1
   26c4c:	0fc9      	lsrs	r1, r1, #31
   26c4e:	4688      	mov	r8, r1
   26c50:	000d      	movs	r5, r1
   26c52:	0a61      	lsrs	r1, r4, #9
   26c54:	0f44      	lsrs	r4, r0, #29
   26c56:	430c      	orrs	r4, r1
   26c58:	00c7      	lsls	r7, r0, #3
   26c5a:	0319      	lsls	r1, r3, #12
   26c5c:	0058      	lsls	r0, r3, #1
   26c5e:	0fdb      	lsrs	r3, r3, #31
   26c60:	469b      	mov	fp, r3
   26c62:	0a4b      	lsrs	r3, r1, #9
   26c64:	0f51      	lsrs	r1, r2, #29
   26c66:	430b      	orrs	r3, r1
   26c68:	0d76      	lsrs	r6, r6, #21
   26c6a:	0d40      	lsrs	r0, r0, #21
   26c6c:	0019      	movs	r1, r3
   26c6e:	00d2      	lsls	r2, r2, #3
   26c70:	45d8      	cmp	r8, fp
   26c72:	d100      	bne.n	26c76 <__aeabi_dadd+0x3a>
   26c74:	e0ae      	b.n	26dd4 <__aeabi_dadd+0x198>
   26c76:	1a35      	subs	r5, r6, r0
   26c78:	2d00      	cmp	r5, #0
   26c7a:	dc00      	bgt.n	26c7e <__aeabi_dadd+0x42>
   26c7c:	e0f6      	b.n	26e6c <__aeabi_dadd+0x230>
   26c7e:	2800      	cmp	r0, #0
   26c80:	d10f      	bne.n	26ca2 <__aeabi_dadd+0x66>
   26c82:	4313      	orrs	r3, r2
   26c84:	d100      	bne.n	26c88 <__aeabi_dadd+0x4c>
   26c86:	e0db      	b.n	26e40 <__aeabi_dadd+0x204>
   26c88:	1e6b      	subs	r3, r5, #1
   26c8a:	2b00      	cmp	r3, #0
   26c8c:	d000      	beq.n	26c90 <__aeabi_dadd+0x54>
   26c8e:	e137      	b.n	26f00 <__aeabi_dadd+0x2c4>
   26c90:	1aba      	subs	r2, r7, r2
   26c92:	4297      	cmp	r7, r2
   26c94:	41bf      	sbcs	r7, r7
   26c96:	1a64      	subs	r4, r4, r1
   26c98:	427f      	negs	r7, r7
   26c9a:	1be4      	subs	r4, r4, r7
   26c9c:	2601      	movs	r6, #1
   26c9e:	0017      	movs	r7, r2
   26ca0:	e024      	b.n	26cec <__aeabi_dadd+0xb0>
   26ca2:	4bc6      	ldr	r3, [pc, #792]	; (26fbc <__aeabi_dadd+0x380>)
   26ca4:	429e      	cmp	r6, r3
   26ca6:	d04d      	beq.n	26d44 <__aeabi_dadd+0x108>
   26ca8:	2380      	movs	r3, #128	; 0x80
   26caa:	041b      	lsls	r3, r3, #16
   26cac:	4319      	orrs	r1, r3
   26cae:	2d38      	cmp	r5, #56	; 0x38
   26cb0:	dd00      	ble.n	26cb4 <__aeabi_dadd+0x78>
   26cb2:	e107      	b.n	26ec4 <__aeabi_dadd+0x288>
   26cb4:	2d1f      	cmp	r5, #31
   26cb6:	dd00      	ble.n	26cba <__aeabi_dadd+0x7e>
   26cb8:	e138      	b.n	26f2c <__aeabi_dadd+0x2f0>
   26cba:	2020      	movs	r0, #32
   26cbc:	1b43      	subs	r3, r0, r5
   26cbe:	469a      	mov	sl, r3
   26cc0:	000b      	movs	r3, r1
   26cc2:	4650      	mov	r0, sl
   26cc4:	4083      	lsls	r3, r0
   26cc6:	4699      	mov	r9, r3
   26cc8:	0013      	movs	r3, r2
   26cca:	4648      	mov	r0, r9
   26ccc:	40eb      	lsrs	r3, r5
   26cce:	4318      	orrs	r0, r3
   26cd0:	0003      	movs	r3, r0
   26cd2:	4650      	mov	r0, sl
   26cd4:	4082      	lsls	r2, r0
   26cd6:	1e50      	subs	r0, r2, #1
   26cd8:	4182      	sbcs	r2, r0
   26cda:	40e9      	lsrs	r1, r5
   26cdc:	431a      	orrs	r2, r3
   26cde:	1aba      	subs	r2, r7, r2
   26ce0:	1a61      	subs	r1, r4, r1
   26ce2:	4297      	cmp	r7, r2
   26ce4:	41a4      	sbcs	r4, r4
   26ce6:	0017      	movs	r7, r2
   26ce8:	4264      	negs	r4, r4
   26cea:	1b0c      	subs	r4, r1, r4
   26cec:	0223      	lsls	r3, r4, #8
   26cee:	d562      	bpl.n	26db6 <__aeabi_dadd+0x17a>
   26cf0:	0264      	lsls	r4, r4, #9
   26cf2:	0a65      	lsrs	r5, r4, #9
   26cf4:	2d00      	cmp	r5, #0
   26cf6:	d100      	bne.n	26cfa <__aeabi_dadd+0xbe>
   26cf8:	e0df      	b.n	26eba <__aeabi_dadd+0x27e>
   26cfa:	0028      	movs	r0, r5
   26cfc:	f7ff f80c 	bl	25d18 <__clzsi2>
   26d00:	0003      	movs	r3, r0
   26d02:	3b08      	subs	r3, #8
   26d04:	2b1f      	cmp	r3, #31
   26d06:	dd00      	ble.n	26d0a <__aeabi_dadd+0xce>
   26d08:	e0d2      	b.n	26eb0 <__aeabi_dadd+0x274>
   26d0a:	2220      	movs	r2, #32
   26d0c:	003c      	movs	r4, r7
   26d0e:	1ad2      	subs	r2, r2, r3
   26d10:	409d      	lsls	r5, r3
   26d12:	40d4      	lsrs	r4, r2
   26d14:	409f      	lsls	r7, r3
   26d16:	4325      	orrs	r5, r4
   26d18:	429e      	cmp	r6, r3
   26d1a:	dd00      	ble.n	26d1e <__aeabi_dadd+0xe2>
   26d1c:	e0c4      	b.n	26ea8 <__aeabi_dadd+0x26c>
   26d1e:	1b9e      	subs	r6, r3, r6
   26d20:	1c73      	adds	r3, r6, #1
   26d22:	2b1f      	cmp	r3, #31
   26d24:	dd00      	ble.n	26d28 <__aeabi_dadd+0xec>
   26d26:	e0f1      	b.n	26f0c <__aeabi_dadd+0x2d0>
   26d28:	2220      	movs	r2, #32
   26d2a:	0038      	movs	r0, r7
   26d2c:	0029      	movs	r1, r5
   26d2e:	1ad2      	subs	r2, r2, r3
   26d30:	40d8      	lsrs	r0, r3
   26d32:	4091      	lsls	r1, r2
   26d34:	4097      	lsls	r7, r2
   26d36:	002c      	movs	r4, r5
   26d38:	4301      	orrs	r1, r0
   26d3a:	1e78      	subs	r0, r7, #1
   26d3c:	4187      	sbcs	r7, r0
   26d3e:	40dc      	lsrs	r4, r3
   26d40:	2600      	movs	r6, #0
   26d42:	430f      	orrs	r7, r1
   26d44:	077b      	lsls	r3, r7, #29
   26d46:	d009      	beq.n	26d5c <__aeabi_dadd+0x120>
   26d48:	230f      	movs	r3, #15
   26d4a:	403b      	ands	r3, r7
   26d4c:	2b04      	cmp	r3, #4
   26d4e:	d005      	beq.n	26d5c <__aeabi_dadd+0x120>
   26d50:	1d3b      	adds	r3, r7, #4
   26d52:	42bb      	cmp	r3, r7
   26d54:	41bf      	sbcs	r7, r7
   26d56:	427f      	negs	r7, r7
   26d58:	19e4      	adds	r4, r4, r7
   26d5a:	001f      	movs	r7, r3
   26d5c:	0223      	lsls	r3, r4, #8
   26d5e:	d52c      	bpl.n	26dba <__aeabi_dadd+0x17e>
   26d60:	4b96      	ldr	r3, [pc, #600]	; (26fbc <__aeabi_dadd+0x380>)
   26d62:	3601      	adds	r6, #1
   26d64:	429e      	cmp	r6, r3
   26d66:	d100      	bne.n	26d6a <__aeabi_dadd+0x12e>
   26d68:	e09a      	b.n	26ea0 <__aeabi_dadd+0x264>
   26d6a:	4645      	mov	r5, r8
   26d6c:	4b94      	ldr	r3, [pc, #592]	; (26fc0 <__aeabi_dadd+0x384>)
   26d6e:	08ff      	lsrs	r7, r7, #3
   26d70:	401c      	ands	r4, r3
   26d72:	0760      	lsls	r0, r4, #29
   26d74:	0576      	lsls	r6, r6, #21
   26d76:	0264      	lsls	r4, r4, #9
   26d78:	4307      	orrs	r7, r0
   26d7a:	0b24      	lsrs	r4, r4, #12
   26d7c:	0d76      	lsrs	r6, r6, #21
   26d7e:	2100      	movs	r1, #0
   26d80:	0324      	lsls	r4, r4, #12
   26d82:	0b23      	lsrs	r3, r4, #12
   26d84:	0d0c      	lsrs	r4, r1, #20
   26d86:	4a8f      	ldr	r2, [pc, #572]	; (26fc4 <__aeabi_dadd+0x388>)
   26d88:	0524      	lsls	r4, r4, #20
   26d8a:	431c      	orrs	r4, r3
   26d8c:	4014      	ands	r4, r2
   26d8e:	0533      	lsls	r3, r6, #20
   26d90:	4323      	orrs	r3, r4
   26d92:	005b      	lsls	r3, r3, #1
   26d94:	07ed      	lsls	r5, r5, #31
   26d96:	085b      	lsrs	r3, r3, #1
   26d98:	432b      	orrs	r3, r5
   26d9a:	0038      	movs	r0, r7
   26d9c:	0019      	movs	r1, r3
   26d9e:	bc3c      	pop	{r2, r3, r4, r5}
   26da0:	4690      	mov	r8, r2
   26da2:	4699      	mov	r9, r3
   26da4:	46a2      	mov	sl, r4
   26da6:	46ab      	mov	fp, r5
   26da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26daa:	4664      	mov	r4, ip
   26dac:	4304      	orrs	r4, r0
   26dae:	d100      	bne.n	26db2 <__aeabi_dadd+0x176>
   26db0:	e211      	b.n	271d6 <__aeabi_dadd+0x59a>
   26db2:	0004      	movs	r4, r0
   26db4:	4667      	mov	r7, ip
   26db6:	077b      	lsls	r3, r7, #29
   26db8:	d1c6      	bne.n	26d48 <__aeabi_dadd+0x10c>
   26dba:	4645      	mov	r5, r8
   26dbc:	0760      	lsls	r0, r4, #29
   26dbe:	08ff      	lsrs	r7, r7, #3
   26dc0:	4307      	orrs	r7, r0
   26dc2:	08e4      	lsrs	r4, r4, #3
   26dc4:	4b7d      	ldr	r3, [pc, #500]	; (26fbc <__aeabi_dadd+0x380>)
   26dc6:	429e      	cmp	r6, r3
   26dc8:	d030      	beq.n	26e2c <__aeabi_dadd+0x1f0>
   26dca:	0324      	lsls	r4, r4, #12
   26dcc:	0576      	lsls	r6, r6, #21
   26dce:	0b24      	lsrs	r4, r4, #12
   26dd0:	0d76      	lsrs	r6, r6, #21
   26dd2:	e7d4      	b.n	26d7e <__aeabi_dadd+0x142>
   26dd4:	1a33      	subs	r3, r6, r0
   26dd6:	469a      	mov	sl, r3
   26dd8:	2b00      	cmp	r3, #0
   26dda:	dd78      	ble.n	26ece <__aeabi_dadd+0x292>
   26ddc:	2800      	cmp	r0, #0
   26dde:	d031      	beq.n	26e44 <__aeabi_dadd+0x208>
   26de0:	4876      	ldr	r0, [pc, #472]	; (26fbc <__aeabi_dadd+0x380>)
   26de2:	4286      	cmp	r6, r0
   26de4:	d0ae      	beq.n	26d44 <__aeabi_dadd+0x108>
   26de6:	2080      	movs	r0, #128	; 0x80
   26de8:	0400      	lsls	r0, r0, #16
   26dea:	4301      	orrs	r1, r0
   26dec:	4653      	mov	r3, sl
   26dee:	2b38      	cmp	r3, #56	; 0x38
   26df0:	dc00      	bgt.n	26df4 <__aeabi_dadd+0x1b8>
   26df2:	e0e9      	b.n	26fc8 <__aeabi_dadd+0x38c>
   26df4:	430a      	orrs	r2, r1
   26df6:	1e51      	subs	r1, r2, #1
   26df8:	418a      	sbcs	r2, r1
   26dfa:	2100      	movs	r1, #0
   26dfc:	19d2      	adds	r2, r2, r7
   26dfe:	42ba      	cmp	r2, r7
   26e00:	41bf      	sbcs	r7, r7
   26e02:	1909      	adds	r1, r1, r4
   26e04:	427c      	negs	r4, r7
   26e06:	0017      	movs	r7, r2
   26e08:	190c      	adds	r4, r1, r4
   26e0a:	0223      	lsls	r3, r4, #8
   26e0c:	d5d3      	bpl.n	26db6 <__aeabi_dadd+0x17a>
   26e0e:	4b6b      	ldr	r3, [pc, #428]	; (26fbc <__aeabi_dadd+0x380>)
   26e10:	3601      	adds	r6, #1
   26e12:	429e      	cmp	r6, r3
   26e14:	d100      	bne.n	26e18 <__aeabi_dadd+0x1dc>
   26e16:	e13a      	b.n	2708e <__aeabi_dadd+0x452>
   26e18:	2001      	movs	r0, #1
   26e1a:	4b69      	ldr	r3, [pc, #420]	; (26fc0 <__aeabi_dadd+0x384>)
   26e1c:	401c      	ands	r4, r3
   26e1e:	087b      	lsrs	r3, r7, #1
   26e20:	4007      	ands	r7, r0
   26e22:	431f      	orrs	r7, r3
   26e24:	07e0      	lsls	r0, r4, #31
   26e26:	4307      	orrs	r7, r0
   26e28:	0864      	lsrs	r4, r4, #1
   26e2a:	e78b      	b.n	26d44 <__aeabi_dadd+0x108>
   26e2c:	0023      	movs	r3, r4
   26e2e:	433b      	orrs	r3, r7
   26e30:	d100      	bne.n	26e34 <__aeabi_dadd+0x1f8>
   26e32:	e1cb      	b.n	271cc <__aeabi_dadd+0x590>
   26e34:	2280      	movs	r2, #128	; 0x80
   26e36:	0312      	lsls	r2, r2, #12
   26e38:	4314      	orrs	r4, r2
   26e3a:	0324      	lsls	r4, r4, #12
   26e3c:	0b24      	lsrs	r4, r4, #12
   26e3e:	e79e      	b.n	26d7e <__aeabi_dadd+0x142>
   26e40:	002e      	movs	r6, r5
   26e42:	e77f      	b.n	26d44 <__aeabi_dadd+0x108>
   26e44:	0008      	movs	r0, r1
   26e46:	4310      	orrs	r0, r2
   26e48:	d100      	bne.n	26e4c <__aeabi_dadd+0x210>
   26e4a:	e0b4      	b.n	26fb6 <__aeabi_dadd+0x37a>
   26e4c:	1e58      	subs	r0, r3, #1
   26e4e:	2800      	cmp	r0, #0
   26e50:	d000      	beq.n	26e54 <__aeabi_dadd+0x218>
   26e52:	e0de      	b.n	27012 <__aeabi_dadd+0x3d6>
   26e54:	18ba      	adds	r2, r7, r2
   26e56:	42ba      	cmp	r2, r7
   26e58:	419b      	sbcs	r3, r3
   26e5a:	1864      	adds	r4, r4, r1
   26e5c:	425b      	negs	r3, r3
   26e5e:	18e4      	adds	r4, r4, r3
   26e60:	0017      	movs	r7, r2
   26e62:	2601      	movs	r6, #1
   26e64:	0223      	lsls	r3, r4, #8
   26e66:	d5a6      	bpl.n	26db6 <__aeabi_dadd+0x17a>
   26e68:	2602      	movs	r6, #2
   26e6a:	e7d5      	b.n	26e18 <__aeabi_dadd+0x1dc>
   26e6c:	2d00      	cmp	r5, #0
   26e6e:	d16e      	bne.n	26f4e <__aeabi_dadd+0x312>
   26e70:	1c70      	adds	r0, r6, #1
   26e72:	0540      	lsls	r0, r0, #21
   26e74:	0d40      	lsrs	r0, r0, #21
   26e76:	2801      	cmp	r0, #1
   26e78:	dc00      	bgt.n	26e7c <__aeabi_dadd+0x240>
   26e7a:	e0f9      	b.n	27070 <__aeabi_dadd+0x434>
   26e7c:	1ab8      	subs	r0, r7, r2
   26e7e:	4684      	mov	ip, r0
   26e80:	4287      	cmp	r7, r0
   26e82:	4180      	sbcs	r0, r0
   26e84:	1ae5      	subs	r5, r4, r3
   26e86:	4240      	negs	r0, r0
   26e88:	1a2d      	subs	r5, r5, r0
   26e8a:	0228      	lsls	r0, r5, #8
   26e8c:	d400      	bmi.n	26e90 <__aeabi_dadd+0x254>
   26e8e:	e089      	b.n	26fa4 <__aeabi_dadd+0x368>
   26e90:	1bd7      	subs	r7, r2, r7
   26e92:	42ba      	cmp	r2, r7
   26e94:	4192      	sbcs	r2, r2
   26e96:	1b1c      	subs	r4, r3, r4
   26e98:	4252      	negs	r2, r2
   26e9a:	1aa5      	subs	r5, r4, r2
   26e9c:	46d8      	mov	r8, fp
   26e9e:	e729      	b.n	26cf4 <__aeabi_dadd+0xb8>
   26ea0:	4645      	mov	r5, r8
   26ea2:	2400      	movs	r4, #0
   26ea4:	2700      	movs	r7, #0
   26ea6:	e76a      	b.n	26d7e <__aeabi_dadd+0x142>
   26ea8:	4c45      	ldr	r4, [pc, #276]	; (26fc0 <__aeabi_dadd+0x384>)
   26eaa:	1af6      	subs	r6, r6, r3
   26eac:	402c      	ands	r4, r5
   26eae:	e749      	b.n	26d44 <__aeabi_dadd+0x108>
   26eb0:	003d      	movs	r5, r7
   26eb2:	3828      	subs	r0, #40	; 0x28
   26eb4:	4085      	lsls	r5, r0
   26eb6:	2700      	movs	r7, #0
   26eb8:	e72e      	b.n	26d18 <__aeabi_dadd+0xdc>
   26eba:	0038      	movs	r0, r7
   26ebc:	f7fe ff2c 	bl	25d18 <__clzsi2>
   26ec0:	3020      	adds	r0, #32
   26ec2:	e71d      	b.n	26d00 <__aeabi_dadd+0xc4>
   26ec4:	430a      	orrs	r2, r1
   26ec6:	1e51      	subs	r1, r2, #1
   26ec8:	418a      	sbcs	r2, r1
   26eca:	2100      	movs	r1, #0
   26ecc:	e707      	b.n	26cde <__aeabi_dadd+0xa2>
   26ece:	2b00      	cmp	r3, #0
   26ed0:	d000      	beq.n	26ed4 <__aeabi_dadd+0x298>
   26ed2:	e0f3      	b.n	270bc <__aeabi_dadd+0x480>
   26ed4:	1c70      	adds	r0, r6, #1
   26ed6:	0543      	lsls	r3, r0, #21
   26ed8:	0d5b      	lsrs	r3, r3, #21
   26eda:	2b01      	cmp	r3, #1
   26edc:	dc00      	bgt.n	26ee0 <__aeabi_dadd+0x2a4>
   26ede:	e0ad      	b.n	2703c <__aeabi_dadd+0x400>
   26ee0:	4b36      	ldr	r3, [pc, #216]	; (26fbc <__aeabi_dadd+0x380>)
   26ee2:	4298      	cmp	r0, r3
   26ee4:	d100      	bne.n	26ee8 <__aeabi_dadd+0x2ac>
   26ee6:	e0d1      	b.n	2708c <__aeabi_dadd+0x450>
   26ee8:	18ba      	adds	r2, r7, r2
   26eea:	42ba      	cmp	r2, r7
   26eec:	41bf      	sbcs	r7, r7
   26eee:	1864      	adds	r4, r4, r1
   26ef0:	427f      	negs	r7, r7
   26ef2:	19e4      	adds	r4, r4, r7
   26ef4:	07e7      	lsls	r7, r4, #31
   26ef6:	0852      	lsrs	r2, r2, #1
   26ef8:	4317      	orrs	r7, r2
   26efa:	0864      	lsrs	r4, r4, #1
   26efc:	0006      	movs	r6, r0
   26efe:	e721      	b.n	26d44 <__aeabi_dadd+0x108>
   26f00:	482e      	ldr	r0, [pc, #184]	; (26fbc <__aeabi_dadd+0x380>)
   26f02:	4285      	cmp	r5, r0
   26f04:	d100      	bne.n	26f08 <__aeabi_dadd+0x2cc>
   26f06:	e093      	b.n	27030 <__aeabi_dadd+0x3f4>
   26f08:	001d      	movs	r5, r3
   26f0a:	e6d0      	b.n	26cae <__aeabi_dadd+0x72>
   26f0c:	0029      	movs	r1, r5
   26f0e:	3e1f      	subs	r6, #31
   26f10:	40f1      	lsrs	r1, r6
   26f12:	2b20      	cmp	r3, #32
   26f14:	d100      	bne.n	26f18 <__aeabi_dadd+0x2dc>
   26f16:	e08d      	b.n	27034 <__aeabi_dadd+0x3f8>
   26f18:	2240      	movs	r2, #64	; 0x40
   26f1a:	1ad3      	subs	r3, r2, r3
   26f1c:	409d      	lsls	r5, r3
   26f1e:	432f      	orrs	r7, r5
   26f20:	1e7d      	subs	r5, r7, #1
   26f22:	41af      	sbcs	r7, r5
   26f24:	2400      	movs	r4, #0
   26f26:	430f      	orrs	r7, r1
   26f28:	2600      	movs	r6, #0
   26f2a:	e744      	b.n	26db6 <__aeabi_dadd+0x17a>
   26f2c:	002b      	movs	r3, r5
   26f2e:	0008      	movs	r0, r1
   26f30:	3b20      	subs	r3, #32
   26f32:	40d8      	lsrs	r0, r3
   26f34:	0003      	movs	r3, r0
   26f36:	2d20      	cmp	r5, #32
   26f38:	d100      	bne.n	26f3c <__aeabi_dadd+0x300>
   26f3a:	e07d      	b.n	27038 <__aeabi_dadd+0x3fc>
   26f3c:	2040      	movs	r0, #64	; 0x40
   26f3e:	1b45      	subs	r5, r0, r5
   26f40:	40a9      	lsls	r1, r5
   26f42:	430a      	orrs	r2, r1
   26f44:	1e51      	subs	r1, r2, #1
   26f46:	418a      	sbcs	r2, r1
   26f48:	2100      	movs	r1, #0
   26f4a:	431a      	orrs	r2, r3
   26f4c:	e6c7      	b.n	26cde <__aeabi_dadd+0xa2>
   26f4e:	2e00      	cmp	r6, #0
   26f50:	d050      	beq.n	26ff4 <__aeabi_dadd+0x3b8>
   26f52:	4e1a      	ldr	r6, [pc, #104]	; (26fbc <__aeabi_dadd+0x380>)
   26f54:	42b0      	cmp	r0, r6
   26f56:	d057      	beq.n	27008 <__aeabi_dadd+0x3cc>
   26f58:	2680      	movs	r6, #128	; 0x80
   26f5a:	426b      	negs	r3, r5
   26f5c:	4699      	mov	r9, r3
   26f5e:	0436      	lsls	r6, r6, #16
   26f60:	4334      	orrs	r4, r6
   26f62:	464b      	mov	r3, r9
   26f64:	2b38      	cmp	r3, #56	; 0x38
   26f66:	dd00      	ble.n	26f6a <__aeabi_dadd+0x32e>
   26f68:	e0d6      	b.n	27118 <__aeabi_dadd+0x4dc>
   26f6a:	2b1f      	cmp	r3, #31
   26f6c:	dd00      	ble.n	26f70 <__aeabi_dadd+0x334>
   26f6e:	e135      	b.n	271dc <__aeabi_dadd+0x5a0>
   26f70:	2620      	movs	r6, #32
   26f72:	1af5      	subs	r5, r6, r3
   26f74:	0026      	movs	r6, r4
   26f76:	40ae      	lsls	r6, r5
   26f78:	46b2      	mov	sl, r6
   26f7a:	003e      	movs	r6, r7
   26f7c:	40de      	lsrs	r6, r3
   26f7e:	46ac      	mov	ip, r5
   26f80:	0035      	movs	r5, r6
   26f82:	4656      	mov	r6, sl
   26f84:	432e      	orrs	r6, r5
   26f86:	4665      	mov	r5, ip
   26f88:	40af      	lsls	r7, r5
   26f8a:	1e7d      	subs	r5, r7, #1
   26f8c:	41af      	sbcs	r7, r5
   26f8e:	40dc      	lsrs	r4, r3
   26f90:	4337      	orrs	r7, r6
   26f92:	1bd7      	subs	r7, r2, r7
   26f94:	42ba      	cmp	r2, r7
   26f96:	4192      	sbcs	r2, r2
   26f98:	1b0c      	subs	r4, r1, r4
   26f9a:	4252      	negs	r2, r2
   26f9c:	1aa4      	subs	r4, r4, r2
   26f9e:	0006      	movs	r6, r0
   26fa0:	46d8      	mov	r8, fp
   26fa2:	e6a3      	b.n	26cec <__aeabi_dadd+0xb0>
   26fa4:	4664      	mov	r4, ip
   26fa6:	4667      	mov	r7, ip
   26fa8:	432c      	orrs	r4, r5
   26faa:	d000      	beq.n	26fae <__aeabi_dadd+0x372>
   26fac:	e6a2      	b.n	26cf4 <__aeabi_dadd+0xb8>
   26fae:	2500      	movs	r5, #0
   26fb0:	2600      	movs	r6, #0
   26fb2:	2700      	movs	r7, #0
   26fb4:	e706      	b.n	26dc4 <__aeabi_dadd+0x188>
   26fb6:	001e      	movs	r6, r3
   26fb8:	e6c4      	b.n	26d44 <__aeabi_dadd+0x108>
   26fba:	46c0      	nop			; (mov r8, r8)
   26fbc:	000007ff 	.word	0x000007ff
   26fc0:	ff7fffff 	.word	0xff7fffff
   26fc4:	800fffff 	.word	0x800fffff
   26fc8:	2b1f      	cmp	r3, #31
   26fca:	dc63      	bgt.n	27094 <__aeabi_dadd+0x458>
   26fcc:	2020      	movs	r0, #32
   26fce:	1ac3      	subs	r3, r0, r3
   26fd0:	0008      	movs	r0, r1
   26fd2:	4098      	lsls	r0, r3
   26fd4:	469c      	mov	ip, r3
   26fd6:	4683      	mov	fp, r0
   26fd8:	4653      	mov	r3, sl
   26fda:	0010      	movs	r0, r2
   26fdc:	40d8      	lsrs	r0, r3
   26fde:	0003      	movs	r3, r0
   26fe0:	4658      	mov	r0, fp
   26fe2:	4318      	orrs	r0, r3
   26fe4:	4663      	mov	r3, ip
   26fe6:	409a      	lsls	r2, r3
   26fe8:	1e53      	subs	r3, r2, #1
   26fea:	419a      	sbcs	r2, r3
   26fec:	4653      	mov	r3, sl
   26fee:	4302      	orrs	r2, r0
   26ff0:	40d9      	lsrs	r1, r3
   26ff2:	e703      	b.n	26dfc <__aeabi_dadd+0x1c0>
   26ff4:	0026      	movs	r6, r4
   26ff6:	433e      	orrs	r6, r7
   26ff8:	d006      	beq.n	27008 <__aeabi_dadd+0x3cc>
   26ffa:	43eb      	mvns	r3, r5
   26ffc:	4699      	mov	r9, r3
   26ffe:	2b00      	cmp	r3, #0
   27000:	d0c7      	beq.n	26f92 <__aeabi_dadd+0x356>
   27002:	4e94      	ldr	r6, [pc, #592]	; (27254 <__aeabi_dadd+0x618>)
   27004:	42b0      	cmp	r0, r6
   27006:	d1ac      	bne.n	26f62 <__aeabi_dadd+0x326>
   27008:	000c      	movs	r4, r1
   2700a:	0017      	movs	r7, r2
   2700c:	0006      	movs	r6, r0
   2700e:	46d8      	mov	r8, fp
   27010:	e698      	b.n	26d44 <__aeabi_dadd+0x108>
   27012:	4b90      	ldr	r3, [pc, #576]	; (27254 <__aeabi_dadd+0x618>)
   27014:	459a      	cmp	sl, r3
   27016:	d00b      	beq.n	27030 <__aeabi_dadd+0x3f4>
   27018:	4682      	mov	sl, r0
   2701a:	e6e7      	b.n	26dec <__aeabi_dadd+0x1b0>
   2701c:	2800      	cmp	r0, #0
   2701e:	d000      	beq.n	27022 <__aeabi_dadd+0x3e6>
   27020:	e09e      	b.n	27160 <__aeabi_dadd+0x524>
   27022:	0018      	movs	r0, r3
   27024:	4310      	orrs	r0, r2
   27026:	d100      	bne.n	2702a <__aeabi_dadd+0x3ee>
   27028:	e0e9      	b.n	271fe <__aeabi_dadd+0x5c2>
   2702a:	001c      	movs	r4, r3
   2702c:	0017      	movs	r7, r2
   2702e:	46d8      	mov	r8, fp
   27030:	4e88      	ldr	r6, [pc, #544]	; (27254 <__aeabi_dadd+0x618>)
   27032:	e687      	b.n	26d44 <__aeabi_dadd+0x108>
   27034:	2500      	movs	r5, #0
   27036:	e772      	b.n	26f1e <__aeabi_dadd+0x2e2>
   27038:	2100      	movs	r1, #0
   2703a:	e782      	b.n	26f42 <__aeabi_dadd+0x306>
   2703c:	0023      	movs	r3, r4
   2703e:	433b      	orrs	r3, r7
   27040:	2e00      	cmp	r6, #0
   27042:	d000      	beq.n	27046 <__aeabi_dadd+0x40a>
   27044:	e0ab      	b.n	2719e <__aeabi_dadd+0x562>
   27046:	2b00      	cmp	r3, #0
   27048:	d100      	bne.n	2704c <__aeabi_dadd+0x410>
   2704a:	e0e7      	b.n	2721c <__aeabi_dadd+0x5e0>
   2704c:	000b      	movs	r3, r1
   2704e:	4313      	orrs	r3, r2
   27050:	d100      	bne.n	27054 <__aeabi_dadd+0x418>
   27052:	e677      	b.n	26d44 <__aeabi_dadd+0x108>
   27054:	18ba      	adds	r2, r7, r2
   27056:	42ba      	cmp	r2, r7
   27058:	41bf      	sbcs	r7, r7
   2705a:	1864      	adds	r4, r4, r1
   2705c:	427f      	negs	r7, r7
   2705e:	19e4      	adds	r4, r4, r7
   27060:	0223      	lsls	r3, r4, #8
   27062:	d400      	bmi.n	27066 <__aeabi_dadd+0x42a>
   27064:	e0f2      	b.n	2724c <__aeabi_dadd+0x610>
   27066:	4b7c      	ldr	r3, [pc, #496]	; (27258 <__aeabi_dadd+0x61c>)
   27068:	0017      	movs	r7, r2
   2706a:	401c      	ands	r4, r3
   2706c:	0006      	movs	r6, r0
   2706e:	e669      	b.n	26d44 <__aeabi_dadd+0x108>
   27070:	0020      	movs	r0, r4
   27072:	4338      	orrs	r0, r7
   27074:	2e00      	cmp	r6, #0
   27076:	d1d1      	bne.n	2701c <__aeabi_dadd+0x3e0>
   27078:	2800      	cmp	r0, #0
   2707a:	d15b      	bne.n	27134 <__aeabi_dadd+0x4f8>
   2707c:	001c      	movs	r4, r3
   2707e:	4314      	orrs	r4, r2
   27080:	d100      	bne.n	27084 <__aeabi_dadd+0x448>
   27082:	e0a8      	b.n	271d6 <__aeabi_dadd+0x59a>
   27084:	001c      	movs	r4, r3
   27086:	0017      	movs	r7, r2
   27088:	46d8      	mov	r8, fp
   2708a:	e65b      	b.n	26d44 <__aeabi_dadd+0x108>
   2708c:	0006      	movs	r6, r0
   2708e:	2400      	movs	r4, #0
   27090:	2700      	movs	r7, #0
   27092:	e697      	b.n	26dc4 <__aeabi_dadd+0x188>
   27094:	4650      	mov	r0, sl
   27096:	000b      	movs	r3, r1
   27098:	3820      	subs	r0, #32
   2709a:	40c3      	lsrs	r3, r0
   2709c:	4699      	mov	r9, r3
   2709e:	4653      	mov	r3, sl
   270a0:	2b20      	cmp	r3, #32
   270a2:	d100      	bne.n	270a6 <__aeabi_dadd+0x46a>
   270a4:	e095      	b.n	271d2 <__aeabi_dadd+0x596>
   270a6:	2340      	movs	r3, #64	; 0x40
   270a8:	4650      	mov	r0, sl
   270aa:	1a1b      	subs	r3, r3, r0
   270ac:	4099      	lsls	r1, r3
   270ae:	430a      	orrs	r2, r1
   270b0:	1e51      	subs	r1, r2, #1
   270b2:	418a      	sbcs	r2, r1
   270b4:	464b      	mov	r3, r9
   270b6:	2100      	movs	r1, #0
   270b8:	431a      	orrs	r2, r3
   270ba:	e69f      	b.n	26dfc <__aeabi_dadd+0x1c0>
   270bc:	2e00      	cmp	r6, #0
   270be:	d130      	bne.n	27122 <__aeabi_dadd+0x4e6>
   270c0:	0026      	movs	r6, r4
   270c2:	433e      	orrs	r6, r7
   270c4:	d067      	beq.n	27196 <__aeabi_dadd+0x55a>
   270c6:	43db      	mvns	r3, r3
   270c8:	469a      	mov	sl, r3
   270ca:	2b00      	cmp	r3, #0
   270cc:	d01c      	beq.n	27108 <__aeabi_dadd+0x4cc>
   270ce:	4e61      	ldr	r6, [pc, #388]	; (27254 <__aeabi_dadd+0x618>)
   270d0:	42b0      	cmp	r0, r6
   270d2:	d060      	beq.n	27196 <__aeabi_dadd+0x55a>
   270d4:	4653      	mov	r3, sl
   270d6:	2b38      	cmp	r3, #56	; 0x38
   270d8:	dd00      	ble.n	270dc <__aeabi_dadd+0x4a0>
   270da:	e096      	b.n	2720a <__aeabi_dadd+0x5ce>
   270dc:	2b1f      	cmp	r3, #31
   270de:	dd00      	ble.n	270e2 <__aeabi_dadd+0x4a6>
   270e0:	e09f      	b.n	27222 <__aeabi_dadd+0x5e6>
   270e2:	2620      	movs	r6, #32
   270e4:	1af3      	subs	r3, r6, r3
   270e6:	0026      	movs	r6, r4
   270e8:	409e      	lsls	r6, r3
   270ea:	469c      	mov	ip, r3
   270ec:	46b3      	mov	fp, r6
   270ee:	4653      	mov	r3, sl
   270f0:	003e      	movs	r6, r7
   270f2:	40de      	lsrs	r6, r3
   270f4:	0033      	movs	r3, r6
   270f6:	465e      	mov	r6, fp
   270f8:	431e      	orrs	r6, r3
   270fa:	4663      	mov	r3, ip
   270fc:	409f      	lsls	r7, r3
   270fe:	1e7b      	subs	r3, r7, #1
   27100:	419f      	sbcs	r7, r3
   27102:	4653      	mov	r3, sl
   27104:	40dc      	lsrs	r4, r3
   27106:	4337      	orrs	r7, r6
   27108:	18bf      	adds	r7, r7, r2
   2710a:	4297      	cmp	r7, r2
   2710c:	4192      	sbcs	r2, r2
   2710e:	1864      	adds	r4, r4, r1
   27110:	4252      	negs	r2, r2
   27112:	18a4      	adds	r4, r4, r2
   27114:	0006      	movs	r6, r0
   27116:	e678      	b.n	26e0a <__aeabi_dadd+0x1ce>
   27118:	4327      	orrs	r7, r4
   2711a:	1e7c      	subs	r4, r7, #1
   2711c:	41a7      	sbcs	r7, r4
   2711e:	2400      	movs	r4, #0
   27120:	e737      	b.n	26f92 <__aeabi_dadd+0x356>
   27122:	4e4c      	ldr	r6, [pc, #304]	; (27254 <__aeabi_dadd+0x618>)
   27124:	42b0      	cmp	r0, r6
   27126:	d036      	beq.n	27196 <__aeabi_dadd+0x55a>
   27128:	2680      	movs	r6, #128	; 0x80
   2712a:	425b      	negs	r3, r3
   2712c:	0436      	lsls	r6, r6, #16
   2712e:	469a      	mov	sl, r3
   27130:	4334      	orrs	r4, r6
   27132:	e7cf      	b.n	270d4 <__aeabi_dadd+0x498>
   27134:	0018      	movs	r0, r3
   27136:	4310      	orrs	r0, r2
   27138:	d100      	bne.n	2713c <__aeabi_dadd+0x500>
   2713a:	e603      	b.n	26d44 <__aeabi_dadd+0x108>
   2713c:	1ab8      	subs	r0, r7, r2
   2713e:	4684      	mov	ip, r0
   27140:	4567      	cmp	r7, ip
   27142:	41ad      	sbcs	r5, r5
   27144:	1ae0      	subs	r0, r4, r3
   27146:	426d      	negs	r5, r5
   27148:	1b40      	subs	r0, r0, r5
   2714a:	0205      	lsls	r5, r0, #8
   2714c:	d400      	bmi.n	27150 <__aeabi_dadd+0x514>
   2714e:	e62c      	b.n	26daa <__aeabi_dadd+0x16e>
   27150:	1bd7      	subs	r7, r2, r7
   27152:	42ba      	cmp	r2, r7
   27154:	4192      	sbcs	r2, r2
   27156:	1b1c      	subs	r4, r3, r4
   27158:	4252      	negs	r2, r2
   2715a:	1aa4      	subs	r4, r4, r2
   2715c:	46d8      	mov	r8, fp
   2715e:	e5f1      	b.n	26d44 <__aeabi_dadd+0x108>
   27160:	0018      	movs	r0, r3
   27162:	4310      	orrs	r0, r2
   27164:	d100      	bne.n	27168 <__aeabi_dadd+0x52c>
   27166:	e763      	b.n	27030 <__aeabi_dadd+0x3f4>
   27168:	08f8      	lsrs	r0, r7, #3
   2716a:	0767      	lsls	r7, r4, #29
   2716c:	4307      	orrs	r7, r0
   2716e:	2080      	movs	r0, #128	; 0x80
   27170:	08e4      	lsrs	r4, r4, #3
   27172:	0300      	lsls	r0, r0, #12
   27174:	4204      	tst	r4, r0
   27176:	d008      	beq.n	2718a <__aeabi_dadd+0x54e>
   27178:	08dd      	lsrs	r5, r3, #3
   2717a:	4205      	tst	r5, r0
   2717c:	d105      	bne.n	2718a <__aeabi_dadd+0x54e>
   2717e:	08d2      	lsrs	r2, r2, #3
   27180:	0759      	lsls	r1, r3, #29
   27182:	4311      	orrs	r1, r2
   27184:	000f      	movs	r7, r1
   27186:	002c      	movs	r4, r5
   27188:	46d8      	mov	r8, fp
   2718a:	0f7b      	lsrs	r3, r7, #29
   2718c:	00e4      	lsls	r4, r4, #3
   2718e:	431c      	orrs	r4, r3
   27190:	00ff      	lsls	r7, r7, #3
   27192:	4e30      	ldr	r6, [pc, #192]	; (27254 <__aeabi_dadd+0x618>)
   27194:	e5d6      	b.n	26d44 <__aeabi_dadd+0x108>
   27196:	000c      	movs	r4, r1
   27198:	0017      	movs	r7, r2
   2719a:	0006      	movs	r6, r0
   2719c:	e5d2      	b.n	26d44 <__aeabi_dadd+0x108>
   2719e:	2b00      	cmp	r3, #0
   271a0:	d038      	beq.n	27214 <__aeabi_dadd+0x5d8>
   271a2:	000b      	movs	r3, r1
   271a4:	4313      	orrs	r3, r2
   271a6:	d100      	bne.n	271aa <__aeabi_dadd+0x56e>
   271a8:	e742      	b.n	27030 <__aeabi_dadd+0x3f4>
   271aa:	08f8      	lsrs	r0, r7, #3
   271ac:	0767      	lsls	r7, r4, #29
   271ae:	4307      	orrs	r7, r0
   271b0:	2080      	movs	r0, #128	; 0x80
   271b2:	08e4      	lsrs	r4, r4, #3
   271b4:	0300      	lsls	r0, r0, #12
   271b6:	4204      	tst	r4, r0
   271b8:	d0e7      	beq.n	2718a <__aeabi_dadd+0x54e>
   271ba:	08cb      	lsrs	r3, r1, #3
   271bc:	4203      	tst	r3, r0
   271be:	d1e4      	bne.n	2718a <__aeabi_dadd+0x54e>
   271c0:	08d2      	lsrs	r2, r2, #3
   271c2:	0749      	lsls	r1, r1, #29
   271c4:	4311      	orrs	r1, r2
   271c6:	000f      	movs	r7, r1
   271c8:	001c      	movs	r4, r3
   271ca:	e7de      	b.n	2718a <__aeabi_dadd+0x54e>
   271cc:	2700      	movs	r7, #0
   271ce:	2400      	movs	r4, #0
   271d0:	e5d5      	b.n	26d7e <__aeabi_dadd+0x142>
   271d2:	2100      	movs	r1, #0
   271d4:	e76b      	b.n	270ae <__aeabi_dadd+0x472>
   271d6:	2500      	movs	r5, #0
   271d8:	2700      	movs	r7, #0
   271da:	e5f3      	b.n	26dc4 <__aeabi_dadd+0x188>
   271dc:	464e      	mov	r6, r9
   271de:	0025      	movs	r5, r4
   271e0:	3e20      	subs	r6, #32
   271e2:	40f5      	lsrs	r5, r6
   271e4:	464b      	mov	r3, r9
   271e6:	002e      	movs	r6, r5
   271e8:	2b20      	cmp	r3, #32
   271ea:	d02d      	beq.n	27248 <__aeabi_dadd+0x60c>
   271ec:	2540      	movs	r5, #64	; 0x40
   271ee:	1aed      	subs	r5, r5, r3
   271f0:	40ac      	lsls	r4, r5
   271f2:	4327      	orrs	r7, r4
   271f4:	1e7c      	subs	r4, r7, #1
   271f6:	41a7      	sbcs	r7, r4
   271f8:	2400      	movs	r4, #0
   271fa:	4337      	orrs	r7, r6
   271fc:	e6c9      	b.n	26f92 <__aeabi_dadd+0x356>
   271fe:	2480      	movs	r4, #128	; 0x80
   27200:	2500      	movs	r5, #0
   27202:	0324      	lsls	r4, r4, #12
   27204:	4e13      	ldr	r6, [pc, #76]	; (27254 <__aeabi_dadd+0x618>)
   27206:	2700      	movs	r7, #0
   27208:	e5dc      	b.n	26dc4 <__aeabi_dadd+0x188>
   2720a:	4327      	orrs	r7, r4
   2720c:	1e7c      	subs	r4, r7, #1
   2720e:	41a7      	sbcs	r7, r4
   27210:	2400      	movs	r4, #0
   27212:	e779      	b.n	27108 <__aeabi_dadd+0x4cc>
   27214:	000c      	movs	r4, r1
   27216:	0017      	movs	r7, r2
   27218:	4e0e      	ldr	r6, [pc, #56]	; (27254 <__aeabi_dadd+0x618>)
   2721a:	e593      	b.n	26d44 <__aeabi_dadd+0x108>
   2721c:	000c      	movs	r4, r1
   2721e:	0017      	movs	r7, r2
   27220:	e590      	b.n	26d44 <__aeabi_dadd+0x108>
   27222:	4656      	mov	r6, sl
   27224:	0023      	movs	r3, r4
   27226:	3e20      	subs	r6, #32
   27228:	40f3      	lsrs	r3, r6
   2722a:	4699      	mov	r9, r3
   2722c:	4653      	mov	r3, sl
   2722e:	2b20      	cmp	r3, #32
   27230:	d00e      	beq.n	27250 <__aeabi_dadd+0x614>
   27232:	2340      	movs	r3, #64	; 0x40
   27234:	4656      	mov	r6, sl
   27236:	1b9b      	subs	r3, r3, r6
   27238:	409c      	lsls	r4, r3
   2723a:	4327      	orrs	r7, r4
   2723c:	1e7c      	subs	r4, r7, #1
   2723e:	41a7      	sbcs	r7, r4
   27240:	464b      	mov	r3, r9
   27242:	2400      	movs	r4, #0
   27244:	431f      	orrs	r7, r3
   27246:	e75f      	b.n	27108 <__aeabi_dadd+0x4cc>
   27248:	2400      	movs	r4, #0
   2724a:	e7d2      	b.n	271f2 <__aeabi_dadd+0x5b6>
   2724c:	0017      	movs	r7, r2
   2724e:	e5b2      	b.n	26db6 <__aeabi_dadd+0x17a>
   27250:	2400      	movs	r4, #0
   27252:	e7f2      	b.n	2723a <__aeabi_dadd+0x5fe>
   27254:	000007ff 	.word	0x000007ff
   27258:	ff7fffff 	.word	0xff7fffff

0002725c <__aeabi_ddiv>:
   2725c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2725e:	4657      	mov	r7, sl
   27260:	4645      	mov	r5, r8
   27262:	46de      	mov	lr, fp
   27264:	464e      	mov	r6, r9
   27266:	b5e0      	push	{r5, r6, r7, lr}
   27268:	004c      	lsls	r4, r1, #1
   2726a:	030e      	lsls	r6, r1, #12
   2726c:	b087      	sub	sp, #28
   2726e:	4683      	mov	fp, r0
   27270:	4692      	mov	sl, r2
   27272:	001d      	movs	r5, r3
   27274:	4680      	mov	r8, r0
   27276:	0b36      	lsrs	r6, r6, #12
   27278:	0d64      	lsrs	r4, r4, #21
   2727a:	0fcf      	lsrs	r7, r1, #31
   2727c:	2c00      	cmp	r4, #0
   2727e:	d04f      	beq.n	27320 <__aeabi_ddiv+0xc4>
   27280:	4b6f      	ldr	r3, [pc, #444]	; (27440 <__aeabi_ddiv+0x1e4>)
   27282:	429c      	cmp	r4, r3
   27284:	d035      	beq.n	272f2 <__aeabi_ddiv+0x96>
   27286:	2380      	movs	r3, #128	; 0x80
   27288:	0f42      	lsrs	r2, r0, #29
   2728a:	041b      	lsls	r3, r3, #16
   2728c:	00f6      	lsls	r6, r6, #3
   2728e:	4313      	orrs	r3, r2
   27290:	4333      	orrs	r3, r6
   27292:	4699      	mov	r9, r3
   27294:	00c3      	lsls	r3, r0, #3
   27296:	4698      	mov	r8, r3
   27298:	4b6a      	ldr	r3, [pc, #424]	; (27444 <__aeabi_ddiv+0x1e8>)
   2729a:	2600      	movs	r6, #0
   2729c:	469c      	mov	ip, r3
   2729e:	2300      	movs	r3, #0
   272a0:	4464      	add	r4, ip
   272a2:	9303      	str	r3, [sp, #12]
   272a4:	032b      	lsls	r3, r5, #12
   272a6:	0b1b      	lsrs	r3, r3, #12
   272a8:	469b      	mov	fp, r3
   272aa:	006b      	lsls	r3, r5, #1
   272ac:	0fed      	lsrs	r5, r5, #31
   272ae:	4650      	mov	r0, sl
   272b0:	0d5b      	lsrs	r3, r3, #21
   272b2:	9501      	str	r5, [sp, #4]
   272b4:	d05e      	beq.n	27374 <__aeabi_ddiv+0x118>
   272b6:	4a62      	ldr	r2, [pc, #392]	; (27440 <__aeabi_ddiv+0x1e4>)
   272b8:	4293      	cmp	r3, r2
   272ba:	d053      	beq.n	27364 <__aeabi_ddiv+0x108>
   272bc:	465a      	mov	r2, fp
   272be:	00d1      	lsls	r1, r2, #3
   272c0:	2280      	movs	r2, #128	; 0x80
   272c2:	0f40      	lsrs	r0, r0, #29
   272c4:	0412      	lsls	r2, r2, #16
   272c6:	4302      	orrs	r2, r0
   272c8:	430a      	orrs	r2, r1
   272ca:	4693      	mov	fp, r2
   272cc:	4652      	mov	r2, sl
   272ce:	00d1      	lsls	r1, r2, #3
   272d0:	4a5c      	ldr	r2, [pc, #368]	; (27444 <__aeabi_ddiv+0x1e8>)
   272d2:	4694      	mov	ip, r2
   272d4:	2200      	movs	r2, #0
   272d6:	4463      	add	r3, ip
   272d8:	0038      	movs	r0, r7
   272da:	4068      	eors	r0, r5
   272dc:	4684      	mov	ip, r0
   272de:	9002      	str	r0, [sp, #8]
   272e0:	1ae4      	subs	r4, r4, r3
   272e2:	4316      	orrs	r6, r2
   272e4:	2e0f      	cmp	r6, #15
   272e6:	d900      	bls.n	272ea <__aeabi_ddiv+0x8e>
   272e8:	e0b4      	b.n	27454 <__aeabi_ddiv+0x1f8>
   272ea:	4b57      	ldr	r3, [pc, #348]	; (27448 <__aeabi_ddiv+0x1ec>)
   272ec:	00b6      	lsls	r6, r6, #2
   272ee:	599b      	ldr	r3, [r3, r6]
   272f0:	469f      	mov	pc, r3
   272f2:	0003      	movs	r3, r0
   272f4:	4333      	orrs	r3, r6
   272f6:	4699      	mov	r9, r3
   272f8:	d16c      	bne.n	273d4 <__aeabi_ddiv+0x178>
   272fa:	2300      	movs	r3, #0
   272fc:	4698      	mov	r8, r3
   272fe:	3302      	adds	r3, #2
   27300:	2608      	movs	r6, #8
   27302:	9303      	str	r3, [sp, #12]
   27304:	e7ce      	b.n	272a4 <__aeabi_ddiv+0x48>
   27306:	46cb      	mov	fp, r9
   27308:	4641      	mov	r1, r8
   2730a:	9a03      	ldr	r2, [sp, #12]
   2730c:	9701      	str	r7, [sp, #4]
   2730e:	2a02      	cmp	r2, #2
   27310:	d165      	bne.n	273de <__aeabi_ddiv+0x182>
   27312:	9b01      	ldr	r3, [sp, #4]
   27314:	4c4a      	ldr	r4, [pc, #296]	; (27440 <__aeabi_ddiv+0x1e4>)
   27316:	469c      	mov	ip, r3
   27318:	2300      	movs	r3, #0
   2731a:	2200      	movs	r2, #0
   2731c:	4698      	mov	r8, r3
   2731e:	e06b      	b.n	273f8 <__aeabi_ddiv+0x19c>
   27320:	0003      	movs	r3, r0
   27322:	4333      	orrs	r3, r6
   27324:	4699      	mov	r9, r3
   27326:	d04e      	beq.n	273c6 <__aeabi_ddiv+0x16a>
   27328:	2e00      	cmp	r6, #0
   2732a:	d100      	bne.n	2732e <__aeabi_ddiv+0xd2>
   2732c:	e1bc      	b.n	276a8 <__aeabi_ddiv+0x44c>
   2732e:	0030      	movs	r0, r6
   27330:	f7fe fcf2 	bl	25d18 <__clzsi2>
   27334:	0003      	movs	r3, r0
   27336:	3b0b      	subs	r3, #11
   27338:	2b1c      	cmp	r3, #28
   2733a:	dd00      	ble.n	2733e <__aeabi_ddiv+0xe2>
   2733c:	e1ac      	b.n	27698 <__aeabi_ddiv+0x43c>
   2733e:	221d      	movs	r2, #29
   27340:	1ad3      	subs	r3, r2, r3
   27342:	465a      	mov	r2, fp
   27344:	0001      	movs	r1, r0
   27346:	40da      	lsrs	r2, r3
   27348:	3908      	subs	r1, #8
   2734a:	408e      	lsls	r6, r1
   2734c:	0013      	movs	r3, r2
   2734e:	4333      	orrs	r3, r6
   27350:	4699      	mov	r9, r3
   27352:	465b      	mov	r3, fp
   27354:	408b      	lsls	r3, r1
   27356:	4698      	mov	r8, r3
   27358:	2300      	movs	r3, #0
   2735a:	4c3c      	ldr	r4, [pc, #240]	; (2744c <__aeabi_ddiv+0x1f0>)
   2735c:	2600      	movs	r6, #0
   2735e:	1a24      	subs	r4, r4, r0
   27360:	9303      	str	r3, [sp, #12]
   27362:	e79f      	b.n	272a4 <__aeabi_ddiv+0x48>
   27364:	4651      	mov	r1, sl
   27366:	465a      	mov	r2, fp
   27368:	4311      	orrs	r1, r2
   2736a:	d129      	bne.n	273c0 <__aeabi_ddiv+0x164>
   2736c:	2200      	movs	r2, #0
   2736e:	4693      	mov	fp, r2
   27370:	3202      	adds	r2, #2
   27372:	e7b1      	b.n	272d8 <__aeabi_ddiv+0x7c>
   27374:	4659      	mov	r1, fp
   27376:	4301      	orrs	r1, r0
   27378:	d01e      	beq.n	273b8 <__aeabi_ddiv+0x15c>
   2737a:	465b      	mov	r3, fp
   2737c:	2b00      	cmp	r3, #0
   2737e:	d100      	bne.n	27382 <__aeabi_ddiv+0x126>
   27380:	e19e      	b.n	276c0 <__aeabi_ddiv+0x464>
   27382:	4658      	mov	r0, fp
   27384:	f7fe fcc8 	bl	25d18 <__clzsi2>
   27388:	0003      	movs	r3, r0
   2738a:	3b0b      	subs	r3, #11
   2738c:	2b1c      	cmp	r3, #28
   2738e:	dd00      	ble.n	27392 <__aeabi_ddiv+0x136>
   27390:	e18f      	b.n	276b2 <__aeabi_ddiv+0x456>
   27392:	0002      	movs	r2, r0
   27394:	4659      	mov	r1, fp
   27396:	3a08      	subs	r2, #8
   27398:	4091      	lsls	r1, r2
   2739a:	468b      	mov	fp, r1
   2739c:	211d      	movs	r1, #29
   2739e:	1acb      	subs	r3, r1, r3
   273a0:	4651      	mov	r1, sl
   273a2:	40d9      	lsrs	r1, r3
   273a4:	000b      	movs	r3, r1
   273a6:	4659      	mov	r1, fp
   273a8:	430b      	orrs	r3, r1
   273aa:	4651      	mov	r1, sl
   273ac:	469b      	mov	fp, r3
   273ae:	4091      	lsls	r1, r2
   273b0:	4b26      	ldr	r3, [pc, #152]	; (2744c <__aeabi_ddiv+0x1f0>)
   273b2:	2200      	movs	r2, #0
   273b4:	1a1b      	subs	r3, r3, r0
   273b6:	e78f      	b.n	272d8 <__aeabi_ddiv+0x7c>
   273b8:	2300      	movs	r3, #0
   273ba:	2201      	movs	r2, #1
   273bc:	469b      	mov	fp, r3
   273be:	e78b      	b.n	272d8 <__aeabi_ddiv+0x7c>
   273c0:	4651      	mov	r1, sl
   273c2:	2203      	movs	r2, #3
   273c4:	e788      	b.n	272d8 <__aeabi_ddiv+0x7c>
   273c6:	2300      	movs	r3, #0
   273c8:	4698      	mov	r8, r3
   273ca:	3301      	adds	r3, #1
   273cc:	2604      	movs	r6, #4
   273ce:	2400      	movs	r4, #0
   273d0:	9303      	str	r3, [sp, #12]
   273d2:	e767      	b.n	272a4 <__aeabi_ddiv+0x48>
   273d4:	2303      	movs	r3, #3
   273d6:	46b1      	mov	r9, r6
   273d8:	9303      	str	r3, [sp, #12]
   273da:	260c      	movs	r6, #12
   273dc:	e762      	b.n	272a4 <__aeabi_ddiv+0x48>
   273de:	2a03      	cmp	r2, #3
   273e0:	d100      	bne.n	273e4 <__aeabi_ddiv+0x188>
   273e2:	e25c      	b.n	2789e <__aeabi_ddiv+0x642>
   273e4:	9b01      	ldr	r3, [sp, #4]
   273e6:	2a01      	cmp	r2, #1
   273e8:	d000      	beq.n	273ec <__aeabi_ddiv+0x190>
   273ea:	e1e4      	b.n	277b6 <__aeabi_ddiv+0x55a>
   273ec:	4013      	ands	r3, r2
   273ee:	469c      	mov	ip, r3
   273f0:	2300      	movs	r3, #0
   273f2:	2400      	movs	r4, #0
   273f4:	2200      	movs	r2, #0
   273f6:	4698      	mov	r8, r3
   273f8:	2100      	movs	r1, #0
   273fa:	0312      	lsls	r2, r2, #12
   273fc:	0b13      	lsrs	r3, r2, #12
   273fe:	0d0a      	lsrs	r2, r1, #20
   27400:	0512      	lsls	r2, r2, #20
   27402:	431a      	orrs	r2, r3
   27404:	0523      	lsls	r3, r4, #20
   27406:	4c12      	ldr	r4, [pc, #72]	; (27450 <__aeabi_ddiv+0x1f4>)
   27408:	4640      	mov	r0, r8
   2740a:	4022      	ands	r2, r4
   2740c:	4313      	orrs	r3, r2
   2740e:	4662      	mov	r2, ip
   27410:	005b      	lsls	r3, r3, #1
   27412:	07d2      	lsls	r2, r2, #31
   27414:	085b      	lsrs	r3, r3, #1
   27416:	4313      	orrs	r3, r2
   27418:	0019      	movs	r1, r3
   2741a:	b007      	add	sp, #28
   2741c:	bc3c      	pop	{r2, r3, r4, r5}
   2741e:	4690      	mov	r8, r2
   27420:	4699      	mov	r9, r3
   27422:	46a2      	mov	sl, r4
   27424:	46ab      	mov	fp, r5
   27426:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27428:	2300      	movs	r3, #0
   2742a:	2280      	movs	r2, #128	; 0x80
   2742c:	469c      	mov	ip, r3
   2742e:	0312      	lsls	r2, r2, #12
   27430:	4698      	mov	r8, r3
   27432:	4c03      	ldr	r4, [pc, #12]	; (27440 <__aeabi_ddiv+0x1e4>)
   27434:	e7e0      	b.n	273f8 <__aeabi_ddiv+0x19c>
   27436:	2300      	movs	r3, #0
   27438:	4c01      	ldr	r4, [pc, #4]	; (27440 <__aeabi_ddiv+0x1e4>)
   2743a:	2200      	movs	r2, #0
   2743c:	4698      	mov	r8, r3
   2743e:	e7db      	b.n	273f8 <__aeabi_ddiv+0x19c>
   27440:	000007ff 	.word	0x000007ff
   27444:	fffffc01 	.word	0xfffffc01
   27448:	0002fad8 	.word	0x0002fad8
   2744c:	fffffc0d 	.word	0xfffffc0d
   27450:	800fffff 	.word	0x800fffff
   27454:	45d9      	cmp	r9, fp
   27456:	d900      	bls.n	2745a <__aeabi_ddiv+0x1fe>
   27458:	e139      	b.n	276ce <__aeabi_ddiv+0x472>
   2745a:	d100      	bne.n	2745e <__aeabi_ddiv+0x202>
   2745c:	e134      	b.n	276c8 <__aeabi_ddiv+0x46c>
   2745e:	2300      	movs	r3, #0
   27460:	4646      	mov	r6, r8
   27462:	464d      	mov	r5, r9
   27464:	469a      	mov	sl, r3
   27466:	3c01      	subs	r4, #1
   27468:	465b      	mov	r3, fp
   2746a:	0e0a      	lsrs	r2, r1, #24
   2746c:	021b      	lsls	r3, r3, #8
   2746e:	431a      	orrs	r2, r3
   27470:	020b      	lsls	r3, r1, #8
   27472:	0c17      	lsrs	r7, r2, #16
   27474:	9303      	str	r3, [sp, #12]
   27476:	0413      	lsls	r3, r2, #16
   27478:	0c1b      	lsrs	r3, r3, #16
   2747a:	0039      	movs	r1, r7
   2747c:	0028      	movs	r0, r5
   2747e:	4690      	mov	r8, r2
   27480:	9301      	str	r3, [sp, #4]
   27482:	f7fe fa5b 	bl	2593c <__udivsi3>
   27486:	0002      	movs	r2, r0
   27488:	9b01      	ldr	r3, [sp, #4]
   2748a:	4683      	mov	fp, r0
   2748c:	435a      	muls	r2, r3
   2748e:	0028      	movs	r0, r5
   27490:	0039      	movs	r1, r7
   27492:	4691      	mov	r9, r2
   27494:	f7fe fad8 	bl	25a48 <__aeabi_uidivmod>
   27498:	0c35      	lsrs	r5, r6, #16
   2749a:	0409      	lsls	r1, r1, #16
   2749c:	430d      	orrs	r5, r1
   2749e:	45a9      	cmp	r9, r5
   274a0:	d90d      	bls.n	274be <__aeabi_ddiv+0x262>
   274a2:	465b      	mov	r3, fp
   274a4:	4445      	add	r5, r8
   274a6:	3b01      	subs	r3, #1
   274a8:	45a8      	cmp	r8, r5
   274aa:	d900      	bls.n	274ae <__aeabi_ddiv+0x252>
   274ac:	e13a      	b.n	27724 <__aeabi_ddiv+0x4c8>
   274ae:	45a9      	cmp	r9, r5
   274b0:	d800      	bhi.n	274b4 <__aeabi_ddiv+0x258>
   274b2:	e137      	b.n	27724 <__aeabi_ddiv+0x4c8>
   274b4:	2302      	movs	r3, #2
   274b6:	425b      	negs	r3, r3
   274b8:	469c      	mov	ip, r3
   274ba:	4445      	add	r5, r8
   274bc:	44e3      	add	fp, ip
   274be:	464b      	mov	r3, r9
   274c0:	1aeb      	subs	r3, r5, r3
   274c2:	0039      	movs	r1, r7
   274c4:	0018      	movs	r0, r3
   274c6:	9304      	str	r3, [sp, #16]
   274c8:	f7fe fa38 	bl	2593c <__udivsi3>
   274cc:	9b01      	ldr	r3, [sp, #4]
   274ce:	0005      	movs	r5, r0
   274d0:	4343      	muls	r3, r0
   274d2:	0039      	movs	r1, r7
   274d4:	9804      	ldr	r0, [sp, #16]
   274d6:	4699      	mov	r9, r3
   274d8:	f7fe fab6 	bl	25a48 <__aeabi_uidivmod>
   274dc:	0433      	lsls	r3, r6, #16
   274de:	0409      	lsls	r1, r1, #16
   274e0:	0c1b      	lsrs	r3, r3, #16
   274e2:	430b      	orrs	r3, r1
   274e4:	4599      	cmp	r9, r3
   274e6:	d909      	bls.n	274fc <__aeabi_ddiv+0x2a0>
   274e8:	4443      	add	r3, r8
   274ea:	1e6a      	subs	r2, r5, #1
   274ec:	4598      	cmp	r8, r3
   274ee:	d900      	bls.n	274f2 <__aeabi_ddiv+0x296>
   274f0:	e11a      	b.n	27728 <__aeabi_ddiv+0x4cc>
   274f2:	4599      	cmp	r9, r3
   274f4:	d800      	bhi.n	274f8 <__aeabi_ddiv+0x29c>
   274f6:	e117      	b.n	27728 <__aeabi_ddiv+0x4cc>
   274f8:	3d02      	subs	r5, #2
   274fa:	4443      	add	r3, r8
   274fc:	464a      	mov	r2, r9
   274fe:	1a9b      	subs	r3, r3, r2
   27500:	465a      	mov	r2, fp
   27502:	0412      	lsls	r2, r2, #16
   27504:	432a      	orrs	r2, r5
   27506:	9903      	ldr	r1, [sp, #12]
   27508:	4693      	mov	fp, r2
   2750a:	0c10      	lsrs	r0, r2, #16
   2750c:	0c0a      	lsrs	r2, r1, #16
   2750e:	4691      	mov	r9, r2
   27510:	0409      	lsls	r1, r1, #16
   27512:	465a      	mov	r2, fp
   27514:	0c09      	lsrs	r1, r1, #16
   27516:	464e      	mov	r6, r9
   27518:	000d      	movs	r5, r1
   2751a:	0412      	lsls	r2, r2, #16
   2751c:	0c12      	lsrs	r2, r2, #16
   2751e:	4345      	muls	r5, r0
   27520:	9105      	str	r1, [sp, #20]
   27522:	4351      	muls	r1, r2
   27524:	4372      	muls	r2, r6
   27526:	4370      	muls	r0, r6
   27528:	1952      	adds	r2, r2, r5
   2752a:	0c0e      	lsrs	r6, r1, #16
   2752c:	18b2      	adds	r2, r6, r2
   2752e:	4295      	cmp	r5, r2
   27530:	d903      	bls.n	2753a <__aeabi_ddiv+0x2de>
   27532:	2580      	movs	r5, #128	; 0x80
   27534:	026d      	lsls	r5, r5, #9
   27536:	46ac      	mov	ip, r5
   27538:	4460      	add	r0, ip
   2753a:	0c15      	lsrs	r5, r2, #16
   2753c:	0409      	lsls	r1, r1, #16
   2753e:	0412      	lsls	r2, r2, #16
   27540:	0c09      	lsrs	r1, r1, #16
   27542:	1828      	adds	r0, r5, r0
   27544:	1852      	adds	r2, r2, r1
   27546:	4283      	cmp	r3, r0
   27548:	d200      	bcs.n	2754c <__aeabi_ddiv+0x2f0>
   2754a:	e0ce      	b.n	276ea <__aeabi_ddiv+0x48e>
   2754c:	d100      	bne.n	27550 <__aeabi_ddiv+0x2f4>
   2754e:	e0c8      	b.n	276e2 <__aeabi_ddiv+0x486>
   27550:	1a1d      	subs	r5, r3, r0
   27552:	4653      	mov	r3, sl
   27554:	1a9e      	subs	r6, r3, r2
   27556:	45b2      	cmp	sl, r6
   27558:	4192      	sbcs	r2, r2
   2755a:	4252      	negs	r2, r2
   2755c:	1aab      	subs	r3, r5, r2
   2755e:	469a      	mov	sl, r3
   27560:	4598      	cmp	r8, r3
   27562:	d100      	bne.n	27566 <__aeabi_ddiv+0x30a>
   27564:	e117      	b.n	27796 <__aeabi_ddiv+0x53a>
   27566:	0039      	movs	r1, r7
   27568:	0018      	movs	r0, r3
   2756a:	f7fe f9e7 	bl	2593c <__udivsi3>
   2756e:	9b01      	ldr	r3, [sp, #4]
   27570:	0005      	movs	r5, r0
   27572:	4343      	muls	r3, r0
   27574:	0039      	movs	r1, r7
   27576:	4650      	mov	r0, sl
   27578:	9304      	str	r3, [sp, #16]
   2757a:	f7fe fa65 	bl	25a48 <__aeabi_uidivmod>
   2757e:	9804      	ldr	r0, [sp, #16]
   27580:	040b      	lsls	r3, r1, #16
   27582:	0c31      	lsrs	r1, r6, #16
   27584:	4319      	orrs	r1, r3
   27586:	4288      	cmp	r0, r1
   27588:	d909      	bls.n	2759e <__aeabi_ddiv+0x342>
   2758a:	4441      	add	r1, r8
   2758c:	1e6b      	subs	r3, r5, #1
   2758e:	4588      	cmp	r8, r1
   27590:	d900      	bls.n	27594 <__aeabi_ddiv+0x338>
   27592:	e107      	b.n	277a4 <__aeabi_ddiv+0x548>
   27594:	4288      	cmp	r0, r1
   27596:	d800      	bhi.n	2759a <__aeabi_ddiv+0x33e>
   27598:	e104      	b.n	277a4 <__aeabi_ddiv+0x548>
   2759a:	3d02      	subs	r5, #2
   2759c:	4441      	add	r1, r8
   2759e:	9b04      	ldr	r3, [sp, #16]
   275a0:	1acb      	subs	r3, r1, r3
   275a2:	0018      	movs	r0, r3
   275a4:	0039      	movs	r1, r7
   275a6:	9304      	str	r3, [sp, #16]
   275a8:	f7fe f9c8 	bl	2593c <__udivsi3>
   275ac:	9b01      	ldr	r3, [sp, #4]
   275ae:	4682      	mov	sl, r0
   275b0:	4343      	muls	r3, r0
   275b2:	0039      	movs	r1, r7
   275b4:	9804      	ldr	r0, [sp, #16]
   275b6:	9301      	str	r3, [sp, #4]
   275b8:	f7fe fa46 	bl	25a48 <__aeabi_uidivmod>
   275bc:	9801      	ldr	r0, [sp, #4]
   275be:	040b      	lsls	r3, r1, #16
   275c0:	0431      	lsls	r1, r6, #16
   275c2:	0c09      	lsrs	r1, r1, #16
   275c4:	4319      	orrs	r1, r3
   275c6:	4288      	cmp	r0, r1
   275c8:	d90d      	bls.n	275e6 <__aeabi_ddiv+0x38a>
   275ca:	4653      	mov	r3, sl
   275cc:	4441      	add	r1, r8
   275ce:	3b01      	subs	r3, #1
   275d0:	4588      	cmp	r8, r1
   275d2:	d900      	bls.n	275d6 <__aeabi_ddiv+0x37a>
   275d4:	e0e8      	b.n	277a8 <__aeabi_ddiv+0x54c>
   275d6:	4288      	cmp	r0, r1
   275d8:	d800      	bhi.n	275dc <__aeabi_ddiv+0x380>
   275da:	e0e5      	b.n	277a8 <__aeabi_ddiv+0x54c>
   275dc:	2302      	movs	r3, #2
   275de:	425b      	negs	r3, r3
   275e0:	469c      	mov	ip, r3
   275e2:	4441      	add	r1, r8
   275e4:	44e2      	add	sl, ip
   275e6:	9b01      	ldr	r3, [sp, #4]
   275e8:	042d      	lsls	r5, r5, #16
   275ea:	1ace      	subs	r6, r1, r3
   275ec:	4651      	mov	r1, sl
   275ee:	4329      	orrs	r1, r5
   275f0:	9d05      	ldr	r5, [sp, #20]
   275f2:	464f      	mov	r7, r9
   275f4:	002a      	movs	r2, r5
   275f6:	040b      	lsls	r3, r1, #16
   275f8:	0c08      	lsrs	r0, r1, #16
   275fa:	0c1b      	lsrs	r3, r3, #16
   275fc:	435a      	muls	r2, r3
   275fe:	4345      	muls	r5, r0
   27600:	437b      	muls	r3, r7
   27602:	4378      	muls	r0, r7
   27604:	195b      	adds	r3, r3, r5
   27606:	0c17      	lsrs	r7, r2, #16
   27608:	18fb      	adds	r3, r7, r3
   2760a:	429d      	cmp	r5, r3
   2760c:	d903      	bls.n	27616 <__aeabi_ddiv+0x3ba>
   2760e:	2580      	movs	r5, #128	; 0x80
   27610:	026d      	lsls	r5, r5, #9
   27612:	46ac      	mov	ip, r5
   27614:	4460      	add	r0, ip
   27616:	0c1d      	lsrs	r5, r3, #16
   27618:	0412      	lsls	r2, r2, #16
   2761a:	041b      	lsls	r3, r3, #16
   2761c:	0c12      	lsrs	r2, r2, #16
   2761e:	1828      	adds	r0, r5, r0
   27620:	189b      	adds	r3, r3, r2
   27622:	4286      	cmp	r6, r0
   27624:	d200      	bcs.n	27628 <__aeabi_ddiv+0x3cc>
   27626:	e093      	b.n	27750 <__aeabi_ddiv+0x4f4>
   27628:	d100      	bne.n	2762c <__aeabi_ddiv+0x3d0>
   2762a:	e08e      	b.n	2774a <__aeabi_ddiv+0x4ee>
   2762c:	2301      	movs	r3, #1
   2762e:	4319      	orrs	r1, r3
   27630:	4ba0      	ldr	r3, [pc, #640]	; (278b4 <__aeabi_ddiv+0x658>)
   27632:	18e3      	adds	r3, r4, r3
   27634:	2b00      	cmp	r3, #0
   27636:	dc00      	bgt.n	2763a <__aeabi_ddiv+0x3de>
   27638:	e099      	b.n	2776e <__aeabi_ddiv+0x512>
   2763a:	074a      	lsls	r2, r1, #29
   2763c:	d000      	beq.n	27640 <__aeabi_ddiv+0x3e4>
   2763e:	e09e      	b.n	2777e <__aeabi_ddiv+0x522>
   27640:	465a      	mov	r2, fp
   27642:	01d2      	lsls	r2, r2, #7
   27644:	d506      	bpl.n	27654 <__aeabi_ddiv+0x3f8>
   27646:	465a      	mov	r2, fp
   27648:	4b9b      	ldr	r3, [pc, #620]	; (278b8 <__aeabi_ddiv+0x65c>)
   2764a:	401a      	ands	r2, r3
   2764c:	2380      	movs	r3, #128	; 0x80
   2764e:	4693      	mov	fp, r2
   27650:	00db      	lsls	r3, r3, #3
   27652:	18e3      	adds	r3, r4, r3
   27654:	4a99      	ldr	r2, [pc, #612]	; (278bc <__aeabi_ddiv+0x660>)
   27656:	4293      	cmp	r3, r2
   27658:	dd68      	ble.n	2772c <__aeabi_ddiv+0x4d0>
   2765a:	2301      	movs	r3, #1
   2765c:	9a02      	ldr	r2, [sp, #8]
   2765e:	4c98      	ldr	r4, [pc, #608]	; (278c0 <__aeabi_ddiv+0x664>)
   27660:	401a      	ands	r2, r3
   27662:	2300      	movs	r3, #0
   27664:	4694      	mov	ip, r2
   27666:	4698      	mov	r8, r3
   27668:	2200      	movs	r2, #0
   2766a:	e6c5      	b.n	273f8 <__aeabi_ddiv+0x19c>
   2766c:	2280      	movs	r2, #128	; 0x80
   2766e:	464b      	mov	r3, r9
   27670:	0312      	lsls	r2, r2, #12
   27672:	4213      	tst	r3, r2
   27674:	d00a      	beq.n	2768c <__aeabi_ddiv+0x430>
   27676:	465b      	mov	r3, fp
   27678:	4213      	tst	r3, r2
   2767a:	d106      	bne.n	2768a <__aeabi_ddiv+0x42e>
   2767c:	431a      	orrs	r2, r3
   2767e:	0312      	lsls	r2, r2, #12
   27680:	0b12      	lsrs	r2, r2, #12
   27682:	46ac      	mov	ip, r5
   27684:	4688      	mov	r8, r1
   27686:	4c8e      	ldr	r4, [pc, #568]	; (278c0 <__aeabi_ddiv+0x664>)
   27688:	e6b6      	b.n	273f8 <__aeabi_ddiv+0x19c>
   2768a:	464b      	mov	r3, r9
   2768c:	431a      	orrs	r2, r3
   2768e:	0312      	lsls	r2, r2, #12
   27690:	0b12      	lsrs	r2, r2, #12
   27692:	46bc      	mov	ip, r7
   27694:	4c8a      	ldr	r4, [pc, #552]	; (278c0 <__aeabi_ddiv+0x664>)
   27696:	e6af      	b.n	273f8 <__aeabi_ddiv+0x19c>
   27698:	0003      	movs	r3, r0
   2769a:	465a      	mov	r2, fp
   2769c:	3b28      	subs	r3, #40	; 0x28
   2769e:	409a      	lsls	r2, r3
   276a0:	2300      	movs	r3, #0
   276a2:	4691      	mov	r9, r2
   276a4:	4698      	mov	r8, r3
   276a6:	e657      	b.n	27358 <__aeabi_ddiv+0xfc>
   276a8:	4658      	mov	r0, fp
   276aa:	f7fe fb35 	bl	25d18 <__clzsi2>
   276ae:	3020      	adds	r0, #32
   276b0:	e640      	b.n	27334 <__aeabi_ddiv+0xd8>
   276b2:	0003      	movs	r3, r0
   276b4:	4652      	mov	r2, sl
   276b6:	3b28      	subs	r3, #40	; 0x28
   276b8:	409a      	lsls	r2, r3
   276ba:	2100      	movs	r1, #0
   276bc:	4693      	mov	fp, r2
   276be:	e677      	b.n	273b0 <__aeabi_ddiv+0x154>
   276c0:	f7fe fb2a 	bl	25d18 <__clzsi2>
   276c4:	3020      	adds	r0, #32
   276c6:	e65f      	b.n	27388 <__aeabi_ddiv+0x12c>
   276c8:	4588      	cmp	r8, r1
   276ca:	d200      	bcs.n	276ce <__aeabi_ddiv+0x472>
   276cc:	e6c7      	b.n	2745e <__aeabi_ddiv+0x202>
   276ce:	464b      	mov	r3, r9
   276d0:	07de      	lsls	r6, r3, #31
   276d2:	085d      	lsrs	r5, r3, #1
   276d4:	4643      	mov	r3, r8
   276d6:	085b      	lsrs	r3, r3, #1
   276d8:	431e      	orrs	r6, r3
   276da:	4643      	mov	r3, r8
   276dc:	07db      	lsls	r3, r3, #31
   276de:	469a      	mov	sl, r3
   276e0:	e6c2      	b.n	27468 <__aeabi_ddiv+0x20c>
   276e2:	2500      	movs	r5, #0
   276e4:	4592      	cmp	sl, r2
   276e6:	d300      	bcc.n	276ea <__aeabi_ddiv+0x48e>
   276e8:	e733      	b.n	27552 <__aeabi_ddiv+0x2f6>
   276ea:	9e03      	ldr	r6, [sp, #12]
   276ec:	4659      	mov	r1, fp
   276ee:	46b4      	mov	ip, r6
   276f0:	44e2      	add	sl, ip
   276f2:	45b2      	cmp	sl, r6
   276f4:	41ad      	sbcs	r5, r5
   276f6:	426d      	negs	r5, r5
   276f8:	4445      	add	r5, r8
   276fa:	18eb      	adds	r3, r5, r3
   276fc:	3901      	subs	r1, #1
   276fe:	4598      	cmp	r8, r3
   27700:	d207      	bcs.n	27712 <__aeabi_ddiv+0x4b6>
   27702:	4298      	cmp	r0, r3
   27704:	d900      	bls.n	27708 <__aeabi_ddiv+0x4ac>
   27706:	e07f      	b.n	27808 <__aeabi_ddiv+0x5ac>
   27708:	d100      	bne.n	2770c <__aeabi_ddiv+0x4b0>
   2770a:	e0bc      	b.n	27886 <__aeabi_ddiv+0x62a>
   2770c:	1a1d      	subs	r5, r3, r0
   2770e:	468b      	mov	fp, r1
   27710:	e71f      	b.n	27552 <__aeabi_ddiv+0x2f6>
   27712:	4598      	cmp	r8, r3
   27714:	d1fa      	bne.n	2770c <__aeabi_ddiv+0x4b0>
   27716:	9d03      	ldr	r5, [sp, #12]
   27718:	4555      	cmp	r5, sl
   2771a:	d9f2      	bls.n	27702 <__aeabi_ddiv+0x4a6>
   2771c:	4643      	mov	r3, r8
   2771e:	468b      	mov	fp, r1
   27720:	1a1d      	subs	r5, r3, r0
   27722:	e716      	b.n	27552 <__aeabi_ddiv+0x2f6>
   27724:	469b      	mov	fp, r3
   27726:	e6ca      	b.n	274be <__aeabi_ddiv+0x262>
   27728:	0015      	movs	r5, r2
   2772a:	e6e7      	b.n	274fc <__aeabi_ddiv+0x2a0>
   2772c:	465a      	mov	r2, fp
   2772e:	08c9      	lsrs	r1, r1, #3
   27730:	0752      	lsls	r2, r2, #29
   27732:	430a      	orrs	r2, r1
   27734:	055b      	lsls	r3, r3, #21
   27736:	4690      	mov	r8, r2
   27738:	0d5c      	lsrs	r4, r3, #21
   2773a:	465a      	mov	r2, fp
   2773c:	2301      	movs	r3, #1
   2773e:	9902      	ldr	r1, [sp, #8]
   27740:	0252      	lsls	r2, r2, #9
   27742:	4019      	ands	r1, r3
   27744:	0b12      	lsrs	r2, r2, #12
   27746:	468c      	mov	ip, r1
   27748:	e656      	b.n	273f8 <__aeabi_ddiv+0x19c>
   2774a:	2b00      	cmp	r3, #0
   2774c:	d100      	bne.n	27750 <__aeabi_ddiv+0x4f4>
   2774e:	e76f      	b.n	27630 <__aeabi_ddiv+0x3d4>
   27750:	4446      	add	r6, r8
   27752:	1e4a      	subs	r2, r1, #1
   27754:	45b0      	cmp	r8, r6
   27756:	d929      	bls.n	277ac <__aeabi_ddiv+0x550>
   27758:	0011      	movs	r1, r2
   2775a:	4286      	cmp	r6, r0
   2775c:	d000      	beq.n	27760 <__aeabi_ddiv+0x504>
   2775e:	e765      	b.n	2762c <__aeabi_ddiv+0x3d0>
   27760:	9a03      	ldr	r2, [sp, #12]
   27762:	4293      	cmp	r3, r2
   27764:	d000      	beq.n	27768 <__aeabi_ddiv+0x50c>
   27766:	e761      	b.n	2762c <__aeabi_ddiv+0x3d0>
   27768:	e762      	b.n	27630 <__aeabi_ddiv+0x3d4>
   2776a:	2101      	movs	r1, #1
   2776c:	4249      	negs	r1, r1
   2776e:	2001      	movs	r0, #1
   27770:	1ac2      	subs	r2, r0, r3
   27772:	2a38      	cmp	r2, #56	; 0x38
   27774:	dd21      	ble.n	277ba <__aeabi_ddiv+0x55e>
   27776:	9b02      	ldr	r3, [sp, #8]
   27778:	4003      	ands	r3, r0
   2777a:	469c      	mov	ip, r3
   2777c:	e638      	b.n	273f0 <__aeabi_ddiv+0x194>
   2777e:	220f      	movs	r2, #15
   27780:	400a      	ands	r2, r1
   27782:	2a04      	cmp	r2, #4
   27784:	d100      	bne.n	27788 <__aeabi_ddiv+0x52c>
   27786:	e75b      	b.n	27640 <__aeabi_ddiv+0x3e4>
   27788:	000a      	movs	r2, r1
   2778a:	1d11      	adds	r1, r2, #4
   2778c:	4291      	cmp	r1, r2
   2778e:	4192      	sbcs	r2, r2
   27790:	4252      	negs	r2, r2
   27792:	4493      	add	fp, r2
   27794:	e754      	b.n	27640 <__aeabi_ddiv+0x3e4>
   27796:	4b47      	ldr	r3, [pc, #284]	; (278b4 <__aeabi_ddiv+0x658>)
   27798:	18e3      	adds	r3, r4, r3
   2779a:	2b00      	cmp	r3, #0
   2779c:	dde5      	ble.n	2776a <__aeabi_ddiv+0x50e>
   2779e:	2201      	movs	r2, #1
   277a0:	4252      	negs	r2, r2
   277a2:	e7f2      	b.n	2778a <__aeabi_ddiv+0x52e>
   277a4:	001d      	movs	r5, r3
   277a6:	e6fa      	b.n	2759e <__aeabi_ddiv+0x342>
   277a8:	469a      	mov	sl, r3
   277aa:	e71c      	b.n	275e6 <__aeabi_ddiv+0x38a>
   277ac:	42b0      	cmp	r0, r6
   277ae:	d839      	bhi.n	27824 <__aeabi_ddiv+0x5c8>
   277b0:	d06e      	beq.n	27890 <__aeabi_ddiv+0x634>
   277b2:	0011      	movs	r1, r2
   277b4:	e73a      	b.n	2762c <__aeabi_ddiv+0x3d0>
   277b6:	9302      	str	r3, [sp, #8]
   277b8:	e73a      	b.n	27630 <__aeabi_ddiv+0x3d4>
   277ba:	2a1f      	cmp	r2, #31
   277bc:	dc3c      	bgt.n	27838 <__aeabi_ddiv+0x5dc>
   277be:	2320      	movs	r3, #32
   277c0:	1a9b      	subs	r3, r3, r2
   277c2:	000c      	movs	r4, r1
   277c4:	4658      	mov	r0, fp
   277c6:	4099      	lsls	r1, r3
   277c8:	4098      	lsls	r0, r3
   277ca:	1e4b      	subs	r3, r1, #1
   277cc:	4199      	sbcs	r1, r3
   277ce:	465b      	mov	r3, fp
   277d0:	40d4      	lsrs	r4, r2
   277d2:	40d3      	lsrs	r3, r2
   277d4:	4320      	orrs	r0, r4
   277d6:	4308      	orrs	r0, r1
   277d8:	001a      	movs	r2, r3
   277da:	0743      	lsls	r3, r0, #29
   277dc:	d009      	beq.n	277f2 <__aeabi_ddiv+0x596>
   277de:	230f      	movs	r3, #15
   277e0:	4003      	ands	r3, r0
   277e2:	2b04      	cmp	r3, #4
   277e4:	d005      	beq.n	277f2 <__aeabi_ddiv+0x596>
   277e6:	0001      	movs	r1, r0
   277e8:	1d08      	adds	r0, r1, #4
   277ea:	4288      	cmp	r0, r1
   277ec:	419b      	sbcs	r3, r3
   277ee:	425b      	negs	r3, r3
   277f0:	18d2      	adds	r2, r2, r3
   277f2:	0213      	lsls	r3, r2, #8
   277f4:	d53a      	bpl.n	2786c <__aeabi_ddiv+0x610>
   277f6:	2301      	movs	r3, #1
   277f8:	9a02      	ldr	r2, [sp, #8]
   277fa:	2401      	movs	r4, #1
   277fc:	401a      	ands	r2, r3
   277fe:	2300      	movs	r3, #0
   27800:	4694      	mov	ip, r2
   27802:	4698      	mov	r8, r3
   27804:	2200      	movs	r2, #0
   27806:	e5f7      	b.n	273f8 <__aeabi_ddiv+0x19c>
   27808:	2102      	movs	r1, #2
   2780a:	4249      	negs	r1, r1
   2780c:	468c      	mov	ip, r1
   2780e:	9d03      	ldr	r5, [sp, #12]
   27810:	44e3      	add	fp, ip
   27812:	46ac      	mov	ip, r5
   27814:	44e2      	add	sl, ip
   27816:	45aa      	cmp	sl, r5
   27818:	41ad      	sbcs	r5, r5
   2781a:	426d      	negs	r5, r5
   2781c:	4445      	add	r5, r8
   2781e:	18ed      	adds	r5, r5, r3
   27820:	1a2d      	subs	r5, r5, r0
   27822:	e696      	b.n	27552 <__aeabi_ddiv+0x2f6>
   27824:	1e8a      	subs	r2, r1, #2
   27826:	9903      	ldr	r1, [sp, #12]
   27828:	004d      	lsls	r5, r1, #1
   2782a:	428d      	cmp	r5, r1
   2782c:	4189      	sbcs	r1, r1
   2782e:	4249      	negs	r1, r1
   27830:	4441      	add	r1, r8
   27832:	1876      	adds	r6, r6, r1
   27834:	9503      	str	r5, [sp, #12]
   27836:	e78f      	b.n	27758 <__aeabi_ddiv+0x4fc>
   27838:	201f      	movs	r0, #31
   2783a:	4240      	negs	r0, r0
   2783c:	1ac3      	subs	r3, r0, r3
   2783e:	4658      	mov	r0, fp
   27840:	40d8      	lsrs	r0, r3
   27842:	0003      	movs	r3, r0
   27844:	2a20      	cmp	r2, #32
   27846:	d028      	beq.n	2789a <__aeabi_ddiv+0x63e>
   27848:	2040      	movs	r0, #64	; 0x40
   2784a:	465d      	mov	r5, fp
   2784c:	1a82      	subs	r2, r0, r2
   2784e:	4095      	lsls	r5, r2
   27850:	4329      	orrs	r1, r5
   27852:	1e4a      	subs	r2, r1, #1
   27854:	4191      	sbcs	r1, r2
   27856:	4319      	orrs	r1, r3
   27858:	2307      	movs	r3, #7
   2785a:	2200      	movs	r2, #0
   2785c:	400b      	ands	r3, r1
   2785e:	d009      	beq.n	27874 <__aeabi_ddiv+0x618>
   27860:	230f      	movs	r3, #15
   27862:	2200      	movs	r2, #0
   27864:	400b      	ands	r3, r1
   27866:	0008      	movs	r0, r1
   27868:	2b04      	cmp	r3, #4
   2786a:	d1bd      	bne.n	277e8 <__aeabi_ddiv+0x58c>
   2786c:	0001      	movs	r1, r0
   2786e:	0753      	lsls	r3, r2, #29
   27870:	0252      	lsls	r2, r2, #9
   27872:	0b12      	lsrs	r2, r2, #12
   27874:	08c9      	lsrs	r1, r1, #3
   27876:	4319      	orrs	r1, r3
   27878:	2301      	movs	r3, #1
   2787a:	4688      	mov	r8, r1
   2787c:	9902      	ldr	r1, [sp, #8]
   2787e:	2400      	movs	r4, #0
   27880:	4019      	ands	r1, r3
   27882:	468c      	mov	ip, r1
   27884:	e5b8      	b.n	273f8 <__aeabi_ddiv+0x19c>
   27886:	4552      	cmp	r2, sl
   27888:	d8be      	bhi.n	27808 <__aeabi_ddiv+0x5ac>
   2788a:	468b      	mov	fp, r1
   2788c:	2500      	movs	r5, #0
   2788e:	e660      	b.n	27552 <__aeabi_ddiv+0x2f6>
   27890:	9d03      	ldr	r5, [sp, #12]
   27892:	429d      	cmp	r5, r3
   27894:	d3c6      	bcc.n	27824 <__aeabi_ddiv+0x5c8>
   27896:	0011      	movs	r1, r2
   27898:	e762      	b.n	27760 <__aeabi_ddiv+0x504>
   2789a:	2500      	movs	r5, #0
   2789c:	e7d8      	b.n	27850 <__aeabi_ddiv+0x5f4>
   2789e:	2280      	movs	r2, #128	; 0x80
   278a0:	465b      	mov	r3, fp
   278a2:	0312      	lsls	r2, r2, #12
   278a4:	431a      	orrs	r2, r3
   278a6:	9b01      	ldr	r3, [sp, #4]
   278a8:	0312      	lsls	r2, r2, #12
   278aa:	0b12      	lsrs	r2, r2, #12
   278ac:	469c      	mov	ip, r3
   278ae:	4688      	mov	r8, r1
   278b0:	4c03      	ldr	r4, [pc, #12]	; (278c0 <__aeabi_ddiv+0x664>)
   278b2:	e5a1      	b.n	273f8 <__aeabi_ddiv+0x19c>
   278b4:	000003ff 	.word	0x000003ff
   278b8:	feffffff 	.word	0xfeffffff
   278bc:	000007fe 	.word	0x000007fe
   278c0:	000007ff 	.word	0x000007ff

000278c4 <__eqdf2>:
   278c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   278c6:	464f      	mov	r7, r9
   278c8:	4646      	mov	r6, r8
   278ca:	46d6      	mov	lr, sl
   278cc:	005c      	lsls	r4, r3, #1
   278ce:	b5c0      	push	{r6, r7, lr}
   278d0:	031f      	lsls	r7, r3, #12
   278d2:	0fdb      	lsrs	r3, r3, #31
   278d4:	469a      	mov	sl, r3
   278d6:	4b17      	ldr	r3, [pc, #92]	; (27934 <__eqdf2+0x70>)
   278d8:	030e      	lsls	r6, r1, #12
   278da:	004d      	lsls	r5, r1, #1
   278dc:	4684      	mov	ip, r0
   278de:	4680      	mov	r8, r0
   278e0:	0b36      	lsrs	r6, r6, #12
   278e2:	0d6d      	lsrs	r5, r5, #21
   278e4:	0fc9      	lsrs	r1, r1, #31
   278e6:	4691      	mov	r9, r2
   278e8:	0b3f      	lsrs	r7, r7, #12
   278ea:	0d64      	lsrs	r4, r4, #21
   278ec:	2001      	movs	r0, #1
   278ee:	429d      	cmp	r5, r3
   278f0:	d008      	beq.n	27904 <__eqdf2+0x40>
   278f2:	429c      	cmp	r4, r3
   278f4:	d001      	beq.n	278fa <__eqdf2+0x36>
   278f6:	42a5      	cmp	r5, r4
   278f8:	d00b      	beq.n	27912 <__eqdf2+0x4e>
   278fa:	bc1c      	pop	{r2, r3, r4}
   278fc:	4690      	mov	r8, r2
   278fe:	4699      	mov	r9, r3
   27900:	46a2      	mov	sl, r4
   27902:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27904:	4663      	mov	r3, ip
   27906:	4333      	orrs	r3, r6
   27908:	d1f7      	bne.n	278fa <__eqdf2+0x36>
   2790a:	42ac      	cmp	r4, r5
   2790c:	d1f5      	bne.n	278fa <__eqdf2+0x36>
   2790e:	433a      	orrs	r2, r7
   27910:	d1f3      	bne.n	278fa <__eqdf2+0x36>
   27912:	2001      	movs	r0, #1
   27914:	42be      	cmp	r6, r7
   27916:	d1f0      	bne.n	278fa <__eqdf2+0x36>
   27918:	45c8      	cmp	r8, r9
   2791a:	d1ee      	bne.n	278fa <__eqdf2+0x36>
   2791c:	4551      	cmp	r1, sl
   2791e:	d007      	beq.n	27930 <__eqdf2+0x6c>
   27920:	2d00      	cmp	r5, #0
   27922:	d1ea      	bne.n	278fa <__eqdf2+0x36>
   27924:	4663      	mov	r3, ip
   27926:	431e      	orrs	r6, r3
   27928:	0030      	movs	r0, r6
   2792a:	1e46      	subs	r6, r0, #1
   2792c:	41b0      	sbcs	r0, r6
   2792e:	e7e4      	b.n	278fa <__eqdf2+0x36>
   27930:	2000      	movs	r0, #0
   27932:	e7e2      	b.n	278fa <__eqdf2+0x36>
   27934:	000007ff 	.word	0x000007ff

00027938 <__gedf2>:
   27938:	b5f0      	push	{r4, r5, r6, r7, lr}
   2793a:	4645      	mov	r5, r8
   2793c:	46de      	mov	lr, fp
   2793e:	4657      	mov	r7, sl
   27940:	464e      	mov	r6, r9
   27942:	b5e0      	push	{r5, r6, r7, lr}
   27944:	031f      	lsls	r7, r3, #12
   27946:	0b3d      	lsrs	r5, r7, #12
   27948:	4f2c      	ldr	r7, [pc, #176]	; (279fc <__gedf2+0xc4>)
   2794a:	030e      	lsls	r6, r1, #12
   2794c:	004c      	lsls	r4, r1, #1
   2794e:	46ab      	mov	fp, r5
   27950:	005d      	lsls	r5, r3, #1
   27952:	4684      	mov	ip, r0
   27954:	0b36      	lsrs	r6, r6, #12
   27956:	0d64      	lsrs	r4, r4, #21
   27958:	0fc9      	lsrs	r1, r1, #31
   2795a:	4690      	mov	r8, r2
   2795c:	0d6d      	lsrs	r5, r5, #21
   2795e:	0fdb      	lsrs	r3, r3, #31
   27960:	42bc      	cmp	r4, r7
   27962:	d02a      	beq.n	279ba <__gedf2+0x82>
   27964:	4f25      	ldr	r7, [pc, #148]	; (279fc <__gedf2+0xc4>)
   27966:	42bd      	cmp	r5, r7
   27968:	d02d      	beq.n	279c6 <__gedf2+0x8e>
   2796a:	2c00      	cmp	r4, #0
   2796c:	d10f      	bne.n	2798e <__gedf2+0x56>
   2796e:	4330      	orrs	r0, r6
   27970:	0007      	movs	r7, r0
   27972:	4681      	mov	r9, r0
   27974:	4278      	negs	r0, r7
   27976:	4178      	adcs	r0, r7
   27978:	b2c0      	uxtb	r0, r0
   2797a:	2d00      	cmp	r5, #0
   2797c:	d117      	bne.n	279ae <__gedf2+0x76>
   2797e:	465f      	mov	r7, fp
   27980:	433a      	orrs	r2, r7
   27982:	d114      	bne.n	279ae <__gedf2+0x76>
   27984:	464b      	mov	r3, r9
   27986:	2000      	movs	r0, #0
   27988:	2b00      	cmp	r3, #0
   2798a:	d00a      	beq.n	279a2 <__gedf2+0x6a>
   2798c:	e006      	b.n	2799c <__gedf2+0x64>
   2798e:	2d00      	cmp	r5, #0
   27990:	d102      	bne.n	27998 <__gedf2+0x60>
   27992:	4658      	mov	r0, fp
   27994:	4302      	orrs	r2, r0
   27996:	d001      	beq.n	2799c <__gedf2+0x64>
   27998:	4299      	cmp	r1, r3
   2799a:	d018      	beq.n	279ce <__gedf2+0x96>
   2799c:	4248      	negs	r0, r1
   2799e:	2101      	movs	r1, #1
   279a0:	4308      	orrs	r0, r1
   279a2:	bc3c      	pop	{r2, r3, r4, r5}
   279a4:	4690      	mov	r8, r2
   279a6:	4699      	mov	r9, r3
   279a8:	46a2      	mov	sl, r4
   279aa:	46ab      	mov	fp, r5
   279ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   279ae:	2800      	cmp	r0, #0
   279b0:	d0f2      	beq.n	27998 <__gedf2+0x60>
   279b2:	2001      	movs	r0, #1
   279b4:	3b01      	subs	r3, #1
   279b6:	4318      	orrs	r0, r3
   279b8:	e7f3      	b.n	279a2 <__gedf2+0x6a>
   279ba:	0037      	movs	r7, r6
   279bc:	4307      	orrs	r7, r0
   279be:	d0d1      	beq.n	27964 <__gedf2+0x2c>
   279c0:	2002      	movs	r0, #2
   279c2:	4240      	negs	r0, r0
   279c4:	e7ed      	b.n	279a2 <__gedf2+0x6a>
   279c6:	465f      	mov	r7, fp
   279c8:	4317      	orrs	r7, r2
   279ca:	d0ce      	beq.n	2796a <__gedf2+0x32>
   279cc:	e7f8      	b.n	279c0 <__gedf2+0x88>
   279ce:	42ac      	cmp	r4, r5
   279d0:	dce4      	bgt.n	2799c <__gedf2+0x64>
   279d2:	da03      	bge.n	279dc <__gedf2+0xa4>
   279d4:	1e48      	subs	r0, r1, #1
   279d6:	2101      	movs	r1, #1
   279d8:	4308      	orrs	r0, r1
   279da:	e7e2      	b.n	279a2 <__gedf2+0x6a>
   279dc:	455e      	cmp	r6, fp
   279de:	d8dd      	bhi.n	2799c <__gedf2+0x64>
   279e0:	d006      	beq.n	279f0 <__gedf2+0xb8>
   279e2:	2000      	movs	r0, #0
   279e4:	455e      	cmp	r6, fp
   279e6:	d2dc      	bcs.n	279a2 <__gedf2+0x6a>
   279e8:	2301      	movs	r3, #1
   279ea:	1e48      	subs	r0, r1, #1
   279ec:	4318      	orrs	r0, r3
   279ee:	e7d8      	b.n	279a2 <__gedf2+0x6a>
   279f0:	45c4      	cmp	ip, r8
   279f2:	d8d3      	bhi.n	2799c <__gedf2+0x64>
   279f4:	2000      	movs	r0, #0
   279f6:	45c4      	cmp	ip, r8
   279f8:	d3f6      	bcc.n	279e8 <__gedf2+0xb0>
   279fa:	e7d2      	b.n	279a2 <__gedf2+0x6a>
   279fc:	000007ff 	.word	0x000007ff

00027a00 <__ledf2>:
   27a00:	b5f0      	push	{r4, r5, r6, r7, lr}
   27a02:	464e      	mov	r6, r9
   27a04:	4645      	mov	r5, r8
   27a06:	46de      	mov	lr, fp
   27a08:	4657      	mov	r7, sl
   27a0a:	005c      	lsls	r4, r3, #1
   27a0c:	b5e0      	push	{r5, r6, r7, lr}
   27a0e:	031f      	lsls	r7, r3, #12
   27a10:	0fdb      	lsrs	r3, r3, #31
   27a12:	4699      	mov	r9, r3
   27a14:	4b2a      	ldr	r3, [pc, #168]	; (27ac0 <__ledf2+0xc0>)
   27a16:	030e      	lsls	r6, r1, #12
   27a18:	004d      	lsls	r5, r1, #1
   27a1a:	0fc9      	lsrs	r1, r1, #31
   27a1c:	4684      	mov	ip, r0
   27a1e:	0b36      	lsrs	r6, r6, #12
   27a20:	0d6d      	lsrs	r5, r5, #21
   27a22:	468b      	mov	fp, r1
   27a24:	4690      	mov	r8, r2
   27a26:	0b3f      	lsrs	r7, r7, #12
   27a28:	0d64      	lsrs	r4, r4, #21
   27a2a:	429d      	cmp	r5, r3
   27a2c:	d020      	beq.n	27a70 <__ledf2+0x70>
   27a2e:	4b24      	ldr	r3, [pc, #144]	; (27ac0 <__ledf2+0xc0>)
   27a30:	429c      	cmp	r4, r3
   27a32:	d022      	beq.n	27a7a <__ledf2+0x7a>
   27a34:	2d00      	cmp	r5, #0
   27a36:	d112      	bne.n	27a5e <__ledf2+0x5e>
   27a38:	4330      	orrs	r0, r6
   27a3a:	4243      	negs	r3, r0
   27a3c:	4143      	adcs	r3, r0
   27a3e:	b2db      	uxtb	r3, r3
   27a40:	2c00      	cmp	r4, #0
   27a42:	d01f      	beq.n	27a84 <__ledf2+0x84>
   27a44:	2b00      	cmp	r3, #0
   27a46:	d00c      	beq.n	27a62 <__ledf2+0x62>
   27a48:	464b      	mov	r3, r9
   27a4a:	2001      	movs	r0, #1
   27a4c:	3b01      	subs	r3, #1
   27a4e:	4303      	orrs	r3, r0
   27a50:	0018      	movs	r0, r3
   27a52:	bc3c      	pop	{r2, r3, r4, r5}
   27a54:	4690      	mov	r8, r2
   27a56:	4699      	mov	r9, r3
   27a58:	46a2      	mov	sl, r4
   27a5a:	46ab      	mov	fp, r5
   27a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27a5e:	2c00      	cmp	r4, #0
   27a60:	d016      	beq.n	27a90 <__ledf2+0x90>
   27a62:	45cb      	cmp	fp, r9
   27a64:	d017      	beq.n	27a96 <__ledf2+0x96>
   27a66:	465b      	mov	r3, fp
   27a68:	4259      	negs	r1, r3
   27a6a:	2301      	movs	r3, #1
   27a6c:	430b      	orrs	r3, r1
   27a6e:	e7ef      	b.n	27a50 <__ledf2+0x50>
   27a70:	0031      	movs	r1, r6
   27a72:	2302      	movs	r3, #2
   27a74:	4301      	orrs	r1, r0
   27a76:	d1eb      	bne.n	27a50 <__ledf2+0x50>
   27a78:	e7d9      	b.n	27a2e <__ledf2+0x2e>
   27a7a:	0039      	movs	r1, r7
   27a7c:	2302      	movs	r3, #2
   27a7e:	4311      	orrs	r1, r2
   27a80:	d1e6      	bne.n	27a50 <__ledf2+0x50>
   27a82:	e7d7      	b.n	27a34 <__ledf2+0x34>
   27a84:	433a      	orrs	r2, r7
   27a86:	d1dd      	bne.n	27a44 <__ledf2+0x44>
   27a88:	2300      	movs	r3, #0
   27a8a:	2800      	cmp	r0, #0
   27a8c:	d0e0      	beq.n	27a50 <__ledf2+0x50>
   27a8e:	e7ea      	b.n	27a66 <__ledf2+0x66>
   27a90:	433a      	orrs	r2, r7
   27a92:	d1e6      	bne.n	27a62 <__ledf2+0x62>
   27a94:	e7e7      	b.n	27a66 <__ledf2+0x66>
   27a96:	42a5      	cmp	r5, r4
   27a98:	dce5      	bgt.n	27a66 <__ledf2+0x66>
   27a9a:	db05      	blt.n	27aa8 <__ledf2+0xa8>
   27a9c:	42be      	cmp	r6, r7
   27a9e:	d8e2      	bhi.n	27a66 <__ledf2+0x66>
   27aa0:	d007      	beq.n	27ab2 <__ledf2+0xb2>
   27aa2:	2300      	movs	r3, #0
   27aa4:	42be      	cmp	r6, r7
   27aa6:	d2d3      	bcs.n	27a50 <__ledf2+0x50>
   27aa8:	4659      	mov	r1, fp
   27aaa:	2301      	movs	r3, #1
   27aac:	3901      	subs	r1, #1
   27aae:	430b      	orrs	r3, r1
   27ab0:	e7ce      	b.n	27a50 <__ledf2+0x50>
   27ab2:	45c4      	cmp	ip, r8
   27ab4:	d8d7      	bhi.n	27a66 <__ledf2+0x66>
   27ab6:	2300      	movs	r3, #0
   27ab8:	45c4      	cmp	ip, r8
   27aba:	d3f5      	bcc.n	27aa8 <__ledf2+0xa8>
   27abc:	e7c8      	b.n	27a50 <__ledf2+0x50>
   27abe:	46c0      	nop			; (mov r8, r8)
   27ac0:	000007ff 	.word	0x000007ff

00027ac4 <__aeabi_dmul>:
   27ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27ac6:	4657      	mov	r7, sl
   27ac8:	4645      	mov	r5, r8
   27aca:	46de      	mov	lr, fp
   27acc:	464e      	mov	r6, r9
   27ace:	b5e0      	push	{r5, r6, r7, lr}
   27ad0:	030c      	lsls	r4, r1, #12
   27ad2:	4698      	mov	r8, r3
   27ad4:	004e      	lsls	r6, r1, #1
   27ad6:	0b23      	lsrs	r3, r4, #12
   27ad8:	b087      	sub	sp, #28
   27ada:	0007      	movs	r7, r0
   27adc:	4692      	mov	sl, r2
   27ade:	469b      	mov	fp, r3
   27ae0:	0d76      	lsrs	r6, r6, #21
   27ae2:	0fcd      	lsrs	r5, r1, #31
   27ae4:	2e00      	cmp	r6, #0
   27ae6:	d06b      	beq.n	27bc0 <__aeabi_dmul+0xfc>
   27ae8:	4b6d      	ldr	r3, [pc, #436]	; (27ca0 <__aeabi_dmul+0x1dc>)
   27aea:	429e      	cmp	r6, r3
   27aec:	d035      	beq.n	27b5a <__aeabi_dmul+0x96>
   27aee:	2480      	movs	r4, #128	; 0x80
   27af0:	465b      	mov	r3, fp
   27af2:	0f42      	lsrs	r2, r0, #29
   27af4:	0424      	lsls	r4, r4, #16
   27af6:	00db      	lsls	r3, r3, #3
   27af8:	4314      	orrs	r4, r2
   27afa:	431c      	orrs	r4, r3
   27afc:	00c3      	lsls	r3, r0, #3
   27afe:	4699      	mov	r9, r3
   27b00:	4b68      	ldr	r3, [pc, #416]	; (27ca4 <__aeabi_dmul+0x1e0>)
   27b02:	46a3      	mov	fp, r4
   27b04:	469c      	mov	ip, r3
   27b06:	2300      	movs	r3, #0
   27b08:	2700      	movs	r7, #0
   27b0a:	4466      	add	r6, ip
   27b0c:	9302      	str	r3, [sp, #8]
   27b0e:	4643      	mov	r3, r8
   27b10:	031c      	lsls	r4, r3, #12
   27b12:	005a      	lsls	r2, r3, #1
   27b14:	0fdb      	lsrs	r3, r3, #31
   27b16:	4650      	mov	r0, sl
   27b18:	0b24      	lsrs	r4, r4, #12
   27b1a:	0d52      	lsrs	r2, r2, #21
   27b1c:	4698      	mov	r8, r3
   27b1e:	d100      	bne.n	27b22 <__aeabi_dmul+0x5e>
   27b20:	e076      	b.n	27c10 <__aeabi_dmul+0x14c>
   27b22:	4b5f      	ldr	r3, [pc, #380]	; (27ca0 <__aeabi_dmul+0x1dc>)
   27b24:	429a      	cmp	r2, r3
   27b26:	d06d      	beq.n	27c04 <__aeabi_dmul+0x140>
   27b28:	2380      	movs	r3, #128	; 0x80
   27b2a:	0f41      	lsrs	r1, r0, #29
   27b2c:	041b      	lsls	r3, r3, #16
   27b2e:	430b      	orrs	r3, r1
   27b30:	495c      	ldr	r1, [pc, #368]	; (27ca4 <__aeabi_dmul+0x1e0>)
   27b32:	00e4      	lsls	r4, r4, #3
   27b34:	468c      	mov	ip, r1
   27b36:	431c      	orrs	r4, r3
   27b38:	00c3      	lsls	r3, r0, #3
   27b3a:	2000      	movs	r0, #0
   27b3c:	4462      	add	r2, ip
   27b3e:	4641      	mov	r1, r8
   27b40:	18b6      	adds	r6, r6, r2
   27b42:	4069      	eors	r1, r5
   27b44:	1c72      	adds	r2, r6, #1
   27b46:	9101      	str	r1, [sp, #4]
   27b48:	4694      	mov	ip, r2
   27b4a:	4307      	orrs	r7, r0
   27b4c:	2f0f      	cmp	r7, #15
   27b4e:	d900      	bls.n	27b52 <__aeabi_dmul+0x8e>
   27b50:	e0b0      	b.n	27cb4 <__aeabi_dmul+0x1f0>
   27b52:	4a55      	ldr	r2, [pc, #340]	; (27ca8 <__aeabi_dmul+0x1e4>)
   27b54:	00bf      	lsls	r7, r7, #2
   27b56:	59d2      	ldr	r2, [r2, r7]
   27b58:	4697      	mov	pc, r2
   27b5a:	465b      	mov	r3, fp
   27b5c:	4303      	orrs	r3, r0
   27b5e:	4699      	mov	r9, r3
   27b60:	d000      	beq.n	27b64 <__aeabi_dmul+0xa0>
   27b62:	e087      	b.n	27c74 <__aeabi_dmul+0x1b0>
   27b64:	2300      	movs	r3, #0
   27b66:	469b      	mov	fp, r3
   27b68:	3302      	adds	r3, #2
   27b6a:	2708      	movs	r7, #8
   27b6c:	9302      	str	r3, [sp, #8]
   27b6e:	e7ce      	b.n	27b0e <__aeabi_dmul+0x4a>
   27b70:	4642      	mov	r2, r8
   27b72:	9201      	str	r2, [sp, #4]
   27b74:	2802      	cmp	r0, #2
   27b76:	d067      	beq.n	27c48 <__aeabi_dmul+0x184>
   27b78:	2803      	cmp	r0, #3
   27b7a:	d100      	bne.n	27b7e <__aeabi_dmul+0xba>
   27b7c:	e20e      	b.n	27f9c <__aeabi_dmul+0x4d8>
   27b7e:	2801      	cmp	r0, #1
   27b80:	d000      	beq.n	27b84 <__aeabi_dmul+0xc0>
   27b82:	e162      	b.n	27e4a <__aeabi_dmul+0x386>
   27b84:	2300      	movs	r3, #0
   27b86:	2400      	movs	r4, #0
   27b88:	2200      	movs	r2, #0
   27b8a:	4699      	mov	r9, r3
   27b8c:	9901      	ldr	r1, [sp, #4]
   27b8e:	4001      	ands	r1, r0
   27b90:	b2cd      	uxtb	r5, r1
   27b92:	2100      	movs	r1, #0
   27b94:	0312      	lsls	r2, r2, #12
   27b96:	0d0b      	lsrs	r3, r1, #20
   27b98:	0b12      	lsrs	r2, r2, #12
   27b9a:	051b      	lsls	r3, r3, #20
   27b9c:	4313      	orrs	r3, r2
   27b9e:	4a43      	ldr	r2, [pc, #268]	; (27cac <__aeabi_dmul+0x1e8>)
   27ba0:	0524      	lsls	r4, r4, #20
   27ba2:	4013      	ands	r3, r2
   27ba4:	431c      	orrs	r4, r3
   27ba6:	0064      	lsls	r4, r4, #1
   27ba8:	07ed      	lsls	r5, r5, #31
   27baa:	0864      	lsrs	r4, r4, #1
   27bac:	432c      	orrs	r4, r5
   27bae:	4648      	mov	r0, r9
   27bb0:	0021      	movs	r1, r4
   27bb2:	b007      	add	sp, #28
   27bb4:	bc3c      	pop	{r2, r3, r4, r5}
   27bb6:	4690      	mov	r8, r2
   27bb8:	4699      	mov	r9, r3
   27bba:	46a2      	mov	sl, r4
   27bbc:	46ab      	mov	fp, r5
   27bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27bc0:	4303      	orrs	r3, r0
   27bc2:	4699      	mov	r9, r3
   27bc4:	d04f      	beq.n	27c66 <__aeabi_dmul+0x1a2>
   27bc6:	465b      	mov	r3, fp
   27bc8:	2b00      	cmp	r3, #0
   27bca:	d100      	bne.n	27bce <__aeabi_dmul+0x10a>
   27bcc:	e189      	b.n	27ee2 <__aeabi_dmul+0x41e>
   27bce:	4658      	mov	r0, fp
   27bd0:	f7fe f8a2 	bl	25d18 <__clzsi2>
   27bd4:	0003      	movs	r3, r0
   27bd6:	3b0b      	subs	r3, #11
   27bd8:	2b1c      	cmp	r3, #28
   27bda:	dd00      	ble.n	27bde <__aeabi_dmul+0x11a>
   27bdc:	e17a      	b.n	27ed4 <__aeabi_dmul+0x410>
   27bde:	221d      	movs	r2, #29
   27be0:	1ad3      	subs	r3, r2, r3
   27be2:	003a      	movs	r2, r7
   27be4:	0001      	movs	r1, r0
   27be6:	465c      	mov	r4, fp
   27be8:	40da      	lsrs	r2, r3
   27bea:	3908      	subs	r1, #8
   27bec:	408c      	lsls	r4, r1
   27bee:	0013      	movs	r3, r2
   27bf0:	408f      	lsls	r7, r1
   27bf2:	4323      	orrs	r3, r4
   27bf4:	469b      	mov	fp, r3
   27bf6:	46b9      	mov	r9, r7
   27bf8:	2300      	movs	r3, #0
   27bfa:	4e2d      	ldr	r6, [pc, #180]	; (27cb0 <__aeabi_dmul+0x1ec>)
   27bfc:	2700      	movs	r7, #0
   27bfe:	1a36      	subs	r6, r6, r0
   27c00:	9302      	str	r3, [sp, #8]
   27c02:	e784      	b.n	27b0e <__aeabi_dmul+0x4a>
   27c04:	4653      	mov	r3, sl
   27c06:	4323      	orrs	r3, r4
   27c08:	d12a      	bne.n	27c60 <__aeabi_dmul+0x19c>
   27c0a:	2400      	movs	r4, #0
   27c0c:	2002      	movs	r0, #2
   27c0e:	e796      	b.n	27b3e <__aeabi_dmul+0x7a>
   27c10:	4653      	mov	r3, sl
   27c12:	4323      	orrs	r3, r4
   27c14:	d020      	beq.n	27c58 <__aeabi_dmul+0x194>
   27c16:	2c00      	cmp	r4, #0
   27c18:	d100      	bne.n	27c1c <__aeabi_dmul+0x158>
   27c1a:	e157      	b.n	27ecc <__aeabi_dmul+0x408>
   27c1c:	0020      	movs	r0, r4
   27c1e:	f7fe f87b 	bl	25d18 <__clzsi2>
   27c22:	0003      	movs	r3, r0
   27c24:	3b0b      	subs	r3, #11
   27c26:	2b1c      	cmp	r3, #28
   27c28:	dd00      	ble.n	27c2c <__aeabi_dmul+0x168>
   27c2a:	e149      	b.n	27ec0 <__aeabi_dmul+0x3fc>
   27c2c:	211d      	movs	r1, #29
   27c2e:	1acb      	subs	r3, r1, r3
   27c30:	4651      	mov	r1, sl
   27c32:	0002      	movs	r2, r0
   27c34:	40d9      	lsrs	r1, r3
   27c36:	4653      	mov	r3, sl
   27c38:	3a08      	subs	r2, #8
   27c3a:	4094      	lsls	r4, r2
   27c3c:	4093      	lsls	r3, r2
   27c3e:	430c      	orrs	r4, r1
   27c40:	4a1b      	ldr	r2, [pc, #108]	; (27cb0 <__aeabi_dmul+0x1ec>)
   27c42:	1a12      	subs	r2, r2, r0
   27c44:	2000      	movs	r0, #0
   27c46:	e77a      	b.n	27b3e <__aeabi_dmul+0x7a>
   27c48:	2501      	movs	r5, #1
   27c4a:	9b01      	ldr	r3, [sp, #4]
   27c4c:	4c14      	ldr	r4, [pc, #80]	; (27ca0 <__aeabi_dmul+0x1dc>)
   27c4e:	401d      	ands	r5, r3
   27c50:	2300      	movs	r3, #0
   27c52:	2200      	movs	r2, #0
   27c54:	4699      	mov	r9, r3
   27c56:	e79c      	b.n	27b92 <__aeabi_dmul+0xce>
   27c58:	2400      	movs	r4, #0
   27c5a:	2200      	movs	r2, #0
   27c5c:	2001      	movs	r0, #1
   27c5e:	e76e      	b.n	27b3e <__aeabi_dmul+0x7a>
   27c60:	4653      	mov	r3, sl
   27c62:	2003      	movs	r0, #3
   27c64:	e76b      	b.n	27b3e <__aeabi_dmul+0x7a>
   27c66:	2300      	movs	r3, #0
   27c68:	469b      	mov	fp, r3
   27c6a:	3301      	adds	r3, #1
   27c6c:	2704      	movs	r7, #4
   27c6e:	2600      	movs	r6, #0
   27c70:	9302      	str	r3, [sp, #8]
   27c72:	e74c      	b.n	27b0e <__aeabi_dmul+0x4a>
   27c74:	2303      	movs	r3, #3
   27c76:	4681      	mov	r9, r0
   27c78:	270c      	movs	r7, #12
   27c7a:	9302      	str	r3, [sp, #8]
   27c7c:	e747      	b.n	27b0e <__aeabi_dmul+0x4a>
   27c7e:	2280      	movs	r2, #128	; 0x80
   27c80:	2300      	movs	r3, #0
   27c82:	2500      	movs	r5, #0
   27c84:	0312      	lsls	r2, r2, #12
   27c86:	4699      	mov	r9, r3
   27c88:	4c05      	ldr	r4, [pc, #20]	; (27ca0 <__aeabi_dmul+0x1dc>)
   27c8a:	e782      	b.n	27b92 <__aeabi_dmul+0xce>
   27c8c:	465c      	mov	r4, fp
   27c8e:	464b      	mov	r3, r9
   27c90:	9802      	ldr	r0, [sp, #8]
   27c92:	e76f      	b.n	27b74 <__aeabi_dmul+0xb0>
   27c94:	465c      	mov	r4, fp
   27c96:	464b      	mov	r3, r9
   27c98:	9501      	str	r5, [sp, #4]
   27c9a:	9802      	ldr	r0, [sp, #8]
   27c9c:	e76a      	b.n	27b74 <__aeabi_dmul+0xb0>
   27c9e:	46c0      	nop			; (mov r8, r8)
   27ca0:	000007ff 	.word	0x000007ff
   27ca4:	fffffc01 	.word	0xfffffc01
   27ca8:	0002fb18 	.word	0x0002fb18
   27cac:	800fffff 	.word	0x800fffff
   27cb0:	fffffc0d 	.word	0xfffffc0d
   27cb4:	464a      	mov	r2, r9
   27cb6:	4649      	mov	r1, r9
   27cb8:	0c17      	lsrs	r7, r2, #16
   27cba:	0c1a      	lsrs	r2, r3, #16
   27cbc:	041b      	lsls	r3, r3, #16
   27cbe:	0c1b      	lsrs	r3, r3, #16
   27cc0:	0408      	lsls	r0, r1, #16
   27cc2:	0019      	movs	r1, r3
   27cc4:	0c00      	lsrs	r0, r0, #16
   27cc6:	4341      	muls	r1, r0
   27cc8:	0015      	movs	r5, r2
   27cca:	4688      	mov	r8, r1
   27ccc:	0019      	movs	r1, r3
   27cce:	437d      	muls	r5, r7
   27cd0:	4379      	muls	r1, r7
   27cd2:	9503      	str	r5, [sp, #12]
   27cd4:	4689      	mov	r9, r1
   27cd6:	0029      	movs	r1, r5
   27cd8:	0015      	movs	r5, r2
   27cda:	4345      	muls	r5, r0
   27cdc:	444d      	add	r5, r9
   27cde:	9502      	str	r5, [sp, #8]
   27ce0:	4645      	mov	r5, r8
   27ce2:	0c2d      	lsrs	r5, r5, #16
   27ce4:	46aa      	mov	sl, r5
   27ce6:	9d02      	ldr	r5, [sp, #8]
   27ce8:	4455      	add	r5, sl
   27cea:	45a9      	cmp	r9, r5
   27cec:	d906      	bls.n	27cfc <__aeabi_dmul+0x238>
   27cee:	468a      	mov	sl, r1
   27cf0:	2180      	movs	r1, #128	; 0x80
   27cf2:	0249      	lsls	r1, r1, #9
   27cf4:	4689      	mov	r9, r1
   27cf6:	44ca      	add	sl, r9
   27cf8:	4651      	mov	r1, sl
   27cfa:	9103      	str	r1, [sp, #12]
   27cfc:	0c29      	lsrs	r1, r5, #16
   27cfe:	9104      	str	r1, [sp, #16]
   27d00:	4641      	mov	r1, r8
   27d02:	0409      	lsls	r1, r1, #16
   27d04:	042d      	lsls	r5, r5, #16
   27d06:	0c09      	lsrs	r1, r1, #16
   27d08:	4688      	mov	r8, r1
   27d0a:	0029      	movs	r1, r5
   27d0c:	0c25      	lsrs	r5, r4, #16
   27d0e:	0424      	lsls	r4, r4, #16
   27d10:	4441      	add	r1, r8
   27d12:	0c24      	lsrs	r4, r4, #16
   27d14:	9105      	str	r1, [sp, #20]
   27d16:	0021      	movs	r1, r4
   27d18:	4341      	muls	r1, r0
   27d1a:	4688      	mov	r8, r1
   27d1c:	0021      	movs	r1, r4
   27d1e:	4379      	muls	r1, r7
   27d20:	468a      	mov	sl, r1
   27d22:	4368      	muls	r0, r5
   27d24:	4641      	mov	r1, r8
   27d26:	4450      	add	r0, sl
   27d28:	4681      	mov	r9, r0
   27d2a:	0c08      	lsrs	r0, r1, #16
   27d2c:	4448      	add	r0, r9
   27d2e:	436f      	muls	r7, r5
   27d30:	4582      	cmp	sl, r0
   27d32:	d903      	bls.n	27d3c <__aeabi_dmul+0x278>
   27d34:	2180      	movs	r1, #128	; 0x80
   27d36:	0249      	lsls	r1, r1, #9
   27d38:	4689      	mov	r9, r1
   27d3a:	444f      	add	r7, r9
   27d3c:	0c01      	lsrs	r1, r0, #16
   27d3e:	4689      	mov	r9, r1
   27d40:	0039      	movs	r1, r7
   27d42:	4449      	add	r1, r9
   27d44:	9102      	str	r1, [sp, #8]
   27d46:	4641      	mov	r1, r8
   27d48:	040f      	lsls	r7, r1, #16
   27d4a:	9904      	ldr	r1, [sp, #16]
   27d4c:	0c3f      	lsrs	r7, r7, #16
   27d4e:	4688      	mov	r8, r1
   27d50:	0400      	lsls	r0, r0, #16
   27d52:	19c0      	adds	r0, r0, r7
   27d54:	4480      	add	r8, r0
   27d56:	4641      	mov	r1, r8
   27d58:	9104      	str	r1, [sp, #16]
   27d5a:	4659      	mov	r1, fp
   27d5c:	0c0f      	lsrs	r7, r1, #16
   27d5e:	0409      	lsls	r1, r1, #16
   27d60:	0c09      	lsrs	r1, r1, #16
   27d62:	4688      	mov	r8, r1
   27d64:	4359      	muls	r1, r3
   27d66:	468a      	mov	sl, r1
   27d68:	0039      	movs	r1, r7
   27d6a:	4351      	muls	r1, r2
   27d6c:	4689      	mov	r9, r1
   27d6e:	4641      	mov	r1, r8
   27d70:	434a      	muls	r2, r1
   27d72:	4651      	mov	r1, sl
   27d74:	0c09      	lsrs	r1, r1, #16
   27d76:	468b      	mov	fp, r1
   27d78:	437b      	muls	r3, r7
   27d7a:	18d2      	adds	r2, r2, r3
   27d7c:	445a      	add	r2, fp
   27d7e:	4293      	cmp	r3, r2
   27d80:	d903      	bls.n	27d8a <__aeabi_dmul+0x2c6>
   27d82:	2380      	movs	r3, #128	; 0x80
   27d84:	025b      	lsls	r3, r3, #9
   27d86:	469b      	mov	fp, r3
   27d88:	44d9      	add	r9, fp
   27d8a:	4651      	mov	r1, sl
   27d8c:	0409      	lsls	r1, r1, #16
   27d8e:	0c09      	lsrs	r1, r1, #16
   27d90:	468a      	mov	sl, r1
   27d92:	4641      	mov	r1, r8
   27d94:	4361      	muls	r1, r4
   27d96:	437c      	muls	r4, r7
   27d98:	0c13      	lsrs	r3, r2, #16
   27d9a:	0412      	lsls	r2, r2, #16
   27d9c:	444b      	add	r3, r9
   27d9e:	4452      	add	r2, sl
   27da0:	46a1      	mov	r9, r4
   27da2:	468a      	mov	sl, r1
   27da4:	003c      	movs	r4, r7
   27da6:	4641      	mov	r1, r8
   27da8:	436c      	muls	r4, r5
   27daa:	434d      	muls	r5, r1
   27dac:	4651      	mov	r1, sl
   27dae:	444d      	add	r5, r9
   27db0:	0c0f      	lsrs	r7, r1, #16
   27db2:	197d      	adds	r5, r7, r5
   27db4:	45a9      	cmp	r9, r5
   27db6:	d903      	bls.n	27dc0 <__aeabi_dmul+0x2fc>
   27db8:	2180      	movs	r1, #128	; 0x80
   27dba:	0249      	lsls	r1, r1, #9
   27dbc:	4688      	mov	r8, r1
   27dbe:	4444      	add	r4, r8
   27dc0:	9f04      	ldr	r7, [sp, #16]
   27dc2:	9903      	ldr	r1, [sp, #12]
   27dc4:	46b8      	mov	r8, r7
   27dc6:	4441      	add	r1, r8
   27dc8:	468b      	mov	fp, r1
   27dca:	4583      	cmp	fp, r0
   27dcc:	4180      	sbcs	r0, r0
   27dce:	4241      	negs	r1, r0
   27dd0:	4688      	mov	r8, r1
   27dd2:	4651      	mov	r1, sl
   27dd4:	0408      	lsls	r0, r1, #16
   27dd6:	042f      	lsls	r7, r5, #16
   27dd8:	0c00      	lsrs	r0, r0, #16
   27dda:	183f      	adds	r7, r7, r0
   27ddc:	4658      	mov	r0, fp
   27dde:	9902      	ldr	r1, [sp, #8]
   27de0:	1810      	adds	r0, r2, r0
   27de2:	4689      	mov	r9, r1
   27de4:	4290      	cmp	r0, r2
   27de6:	4192      	sbcs	r2, r2
   27de8:	444f      	add	r7, r9
   27dea:	46ba      	mov	sl, r7
   27dec:	4252      	negs	r2, r2
   27dee:	4699      	mov	r9, r3
   27df0:	4693      	mov	fp, r2
   27df2:	44c2      	add	sl, r8
   27df4:	44d1      	add	r9, sl
   27df6:	44cb      	add	fp, r9
   27df8:	428f      	cmp	r7, r1
   27dfa:	41bf      	sbcs	r7, r7
   27dfc:	45c2      	cmp	sl, r8
   27dfe:	4189      	sbcs	r1, r1
   27e00:	4599      	cmp	r9, r3
   27e02:	419b      	sbcs	r3, r3
   27e04:	4593      	cmp	fp, r2
   27e06:	4192      	sbcs	r2, r2
   27e08:	427f      	negs	r7, r7
   27e0a:	4249      	negs	r1, r1
   27e0c:	0c2d      	lsrs	r5, r5, #16
   27e0e:	4252      	negs	r2, r2
   27e10:	430f      	orrs	r7, r1
   27e12:	425b      	negs	r3, r3
   27e14:	4313      	orrs	r3, r2
   27e16:	197f      	adds	r7, r7, r5
   27e18:	18ff      	adds	r7, r7, r3
   27e1a:	465b      	mov	r3, fp
   27e1c:	193c      	adds	r4, r7, r4
   27e1e:	0ddb      	lsrs	r3, r3, #23
   27e20:	9a05      	ldr	r2, [sp, #20]
   27e22:	0264      	lsls	r4, r4, #9
   27e24:	431c      	orrs	r4, r3
   27e26:	0243      	lsls	r3, r0, #9
   27e28:	4313      	orrs	r3, r2
   27e2a:	1e5d      	subs	r5, r3, #1
   27e2c:	41ab      	sbcs	r3, r5
   27e2e:	465a      	mov	r2, fp
   27e30:	0dc0      	lsrs	r0, r0, #23
   27e32:	4303      	orrs	r3, r0
   27e34:	0252      	lsls	r2, r2, #9
   27e36:	4313      	orrs	r3, r2
   27e38:	01e2      	lsls	r2, r4, #7
   27e3a:	d556      	bpl.n	27eea <__aeabi_dmul+0x426>
   27e3c:	2001      	movs	r0, #1
   27e3e:	085a      	lsrs	r2, r3, #1
   27e40:	4003      	ands	r3, r0
   27e42:	4313      	orrs	r3, r2
   27e44:	07e2      	lsls	r2, r4, #31
   27e46:	4313      	orrs	r3, r2
   27e48:	0864      	lsrs	r4, r4, #1
   27e4a:	485a      	ldr	r0, [pc, #360]	; (27fb4 <__aeabi_dmul+0x4f0>)
   27e4c:	4460      	add	r0, ip
   27e4e:	2800      	cmp	r0, #0
   27e50:	dd4d      	ble.n	27eee <__aeabi_dmul+0x42a>
   27e52:	075a      	lsls	r2, r3, #29
   27e54:	d009      	beq.n	27e6a <__aeabi_dmul+0x3a6>
   27e56:	220f      	movs	r2, #15
   27e58:	401a      	ands	r2, r3
   27e5a:	2a04      	cmp	r2, #4
   27e5c:	d005      	beq.n	27e6a <__aeabi_dmul+0x3a6>
   27e5e:	1d1a      	adds	r2, r3, #4
   27e60:	429a      	cmp	r2, r3
   27e62:	419b      	sbcs	r3, r3
   27e64:	425b      	negs	r3, r3
   27e66:	18e4      	adds	r4, r4, r3
   27e68:	0013      	movs	r3, r2
   27e6a:	01e2      	lsls	r2, r4, #7
   27e6c:	d504      	bpl.n	27e78 <__aeabi_dmul+0x3b4>
   27e6e:	2080      	movs	r0, #128	; 0x80
   27e70:	4a51      	ldr	r2, [pc, #324]	; (27fb8 <__aeabi_dmul+0x4f4>)
   27e72:	00c0      	lsls	r0, r0, #3
   27e74:	4014      	ands	r4, r2
   27e76:	4460      	add	r0, ip
   27e78:	4a50      	ldr	r2, [pc, #320]	; (27fbc <__aeabi_dmul+0x4f8>)
   27e7a:	4290      	cmp	r0, r2
   27e7c:	dd00      	ble.n	27e80 <__aeabi_dmul+0x3bc>
   27e7e:	e6e3      	b.n	27c48 <__aeabi_dmul+0x184>
   27e80:	2501      	movs	r5, #1
   27e82:	08db      	lsrs	r3, r3, #3
   27e84:	0762      	lsls	r2, r4, #29
   27e86:	431a      	orrs	r2, r3
   27e88:	0264      	lsls	r4, r4, #9
   27e8a:	9b01      	ldr	r3, [sp, #4]
   27e8c:	4691      	mov	r9, r2
   27e8e:	0b22      	lsrs	r2, r4, #12
   27e90:	0544      	lsls	r4, r0, #21
   27e92:	0d64      	lsrs	r4, r4, #21
   27e94:	401d      	ands	r5, r3
   27e96:	e67c      	b.n	27b92 <__aeabi_dmul+0xce>
   27e98:	2280      	movs	r2, #128	; 0x80
   27e9a:	4659      	mov	r1, fp
   27e9c:	0312      	lsls	r2, r2, #12
   27e9e:	4211      	tst	r1, r2
   27ea0:	d008      	beq.n	27eb4 <__aeabi_dmul+0x3f0>
   27ea2:	4214      	tst	r4, r2
   27ea4:	d106      	bne.n	27eb4 <__aeabi_dmul+0x3f0>
   27ea6:	4322      	orrs	r2, r4
   27ea8:	0312      	lsls	r2, r2, #12
   27eaa:	0b12      	lsrs	r2, r2, #12
   27eac:	4645      	mov	r5, r8
   27eae:	4699      	mov	r9, r3
   27eb0:	4c43      	ldr	r4, [pc, #268]	; (27fc0 <__aeabi_dmul+0x4fc>)
   27eb2:	e66e      	b.n	27b92 <__aeabi_dmul+0xce>
   27eb4:	465b      	mov	r3, fp
   27eb6:	431a      	orrs	r2, r3
   27eb8:	0312      	lsls	r2, r2, #12
   27eba:	0b12      	lsrs	r2, r2, #12
   27ebc:	4c40      	ldr	r4, [pc, #256]	; (27fc0 <__aeabi_dmul+0x4fc>)
   27ebe:	e668      	b.n	27b92 <__aeabi_dmul+0xce>
   27ec0:	0003      	movs	r3, r0
   27ec2:	4654      	mov	r4, sl
   27ec4:	3b28      	subs	r3, #40	; 0x28
   27ec6:	409c      	lsls	r4, r3
   27ec8:	2300      	movs	r3, #0
   27eca:	e6b9      	b.n	27c40 <__aeabi_dmul+0x17c>
   27ecc:	f7fd ff24 	bl	25d18 <__clzsi2>
   27ed0:	3020      	adds	r0, #32
   27ed2:	e6a6      	b.n	27c22 <__aeabi_dmul+0x15e>
   27ed4:	0003      	movs	r3, r0
   27ed6:	3b28      	subs	r3, #40	; 0x28
   27ed8:	409f      	lsls	r7, r3
   27eda:	2300      	movs	r3, #0
   27edc:	46bb      	mov	fp, r7
   27ede:	4699      	mov	r9, r3
   27ee0:	e68a      	b.n	27bf8 <__aeabi_dmul+0x134>
   27ee2:	f7fd ff19 	bl	25d18 <__clzsi2>
   27ee6:	3020      	adds	r0, #32
   27ee8:	e674      	b.n	27bd4 <__aeabi_dmul+0x110>
   27eea:	46b4      	mov	ip, r6
   27eec:	e7ad      	b.n	27e4a <__aeabi_dmul+0x386>
   27eee:	2501      	movs	r5, #1
   27ef0:	1a2a      	subs	r2, r5, r0
   27ef2:	2a38      	cmp	r2, #56	; 0x38
   27ef4:	dd06      	ble.n	27f04 <__aeabi_dmul+0x440>
   27ef6:	9b01      	ldr	r3, [sp, #4]
   27ef8:	2400      	movs	r4, #0
   27efa:	401d      	ands	r5, r3
   27efc:	2300      	movs	r3, #0
   27efe:	2200      	movs	r2, #0
   27f00:	4699      	mov	r9, r3
   27f02:	e646      	b.n	27b92 <__aeabi_dmul+0xce>
   27f04:	2a1f      	cmp	r2, #31
   27f06:	dc21      	bgt.n	27f4c <__aeabi_dmul+0x488>
   27f08:	2520      	movs	r5, #32
   27f0a:	0020      	movs	r0, r4
   27f0c:	1aad      	subs	r5, r5, r2
   27f0e:	001e      	movs	r6, r3
   27f10:	40ab      	lsls	r3, r5
   27f12:	40a8      	lsls	r0, r5
   27f14:	40d6      	lsrs	r6, r2
   27f16:	1e5d      	subs	r5, r3, #1
   27f18:	41ab      	sbcs	r3, r5
   27f1a:	4330      	orrs	r0, r6
   27f1c:	4318      	orrs	r0, r3
   27f1e:	40d4      	lsrs	r4, r2
   27f20:	0743      	lsls	r3, r0, #29
   27f22:	d009      	beq.n	27f38 <__aeabi_dmul+0x474>
   27f24:	230f      	movs	r3, #15
   27f26:	4003      	ands	r3, r0
   27f28:	2b04      	cmp	r3, #4
   27f2a:	d005      	beq.n	27f38 <__aeabi_dmul+0x474>
   27f2c:	0003      	movs	r3, r0
   27f2e:	1d18      	adds	r0, r3, #4
   27f30:	4298      	cmp	r0, r3
   27f32:	419b      	sbcs	r3, r3
   27f34:	425b      	negs	r3, r3
   27f36:	18e4      	adds	r4, r4, r3
   27f38:	0223      	lsls	r3, r4, #8
   27f3a:	d521      	bpl.n	27f80 <__aeabi_dmul+0x4bc>
   27f3c:	2501      	movs	r5, #1
   27f3e:	9b01      	ldr	r3, [sp, #4]
   27f40:	2401      	movs	r4, #1
   27f42:	401d      	ands	r5, r3
   27f44:	2300      	movs	r3, #0
   27f46:	2200      	movs	r2, #0
   27f48:	4699      	mov	r9, r3
   27f4a:	e622      	b.n	27b92 <__aeabi_dmul+0xce>
   27f4c:	251f      	movs	r5, #31
   27f4e:	0021      	movs	r1, r4
   27f50:	426d      	negs	r5, r5
   27f52:	1a28      	subs	r0, r5, r0
   27f54:	40c1      	lsrs	r1, r0
   27f56:	0008      	movs	r0, r1
   27f58:	2a20      	cmp	r2, #32
   27f5a:	d01d      	beq.n	27f98 <__aeabi_dmul+0x4d4>
   27f5c:	355f      	adds	r5, #95	; 0x5f
   27f5e:	1aaa      	subs	r2, r5, r2
   27f60:	4094      	lsls	r4, r2
   27f62:	4323      	orrs	r3, r4
   27f64:	1e5c      	subs	r4, r3, #1
   27f66:	41a3      	sbcs	r3, r4
   27f68:	2507      	movs	r5, #7
   27f6a:	4303      	orrs	r3, r0
   27f6c:	401d      	ands	r5, r3
   27f6e:	2200      	movs	r2, #0
   27f70:	2d00      	cmp	r5, #0
   27f72:	d009      	beq.n	27f88 <__aeabi_dmul+0x4c4>
   27f74:	220f      	movs	r2, #15
   27f76:	2400      	movs	r4, #0
   27f78:	401a      	ands	r2, r3
   27f7a:	0018      	movs	r0, r3
   27f7c:	2a04      	cmp	r2, #4
   27f7e:	d1d6      	bne.n	27f2e <__aeabi_dmul+0x46a>
   27f80:	0003      	movs	r3, r0
   27f82:	0765      	lsls	r5, r4, #29
   27f84:	0264      	lsls	r4, r4, #9
   27f86:	0b22      	lsrs	r2, r4, #12
   27f88:	08db      	lsrs	r3, r3, #3
   27f8a:	432b      	orrs	r3, r5
   27f8c:	2501      	movs	r5, #1
   27f8e:	4699      	mov	r9, r3
   27f90:	9b01      	ldr	r3, [sp, #4]
   27f92:	2400      	movs	r4, #0
   27f94:	401d      	ands	r5, r3
   27f96:	e5fc      	b.n	27b92 <__aeabi_dmul+0xce>
   27f98:	2400      	movs	r4, #0
   27f9a:	e7e2      	b.n	27f62 <__aeabi_dmul+0x49e>
   27f9c:	2280      	movs	r2, #128	; 0x80
   27f9e:	2501      	movs	r5, #1
   27fa0:	0312      	lsls	r2, r2, #12
   27fa2:	4322      	orrs	r2, r4
   27fa4:	9901      	ldr	r1, [sp, #4]
   27fa6:	0312      	lsls	r2, r2, #12
   27fa8:	0b12      	lsrs	r2, r2, #12
   27faa:	400d      	ands	r5, r1
   27fac:	4699      	mov	r9, r3
   27fae:	4c04      	ldr	r4, [pc, #16]	; (27fc0 <__aeabi_dmul+0x4fc>)
   27fb0:	e5ef      	b.n	27b92 <__aeabi_dmul+0xce>
   27fb2:	46c0      	nop			; (mov r8, r8)
   27fb4:	000003ff 	.word	0x000003ff
   27fb8:	feffffff 	.word	0xfeffffff
   27fbc:	000007fe 	.word	0x000007fe
   27fc0:	000007ff 	.word	0x000007ff

00027fc4 <__aeabi_dsub>:
   27fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27fc6:	4646      	mov	r6, r8
   27fc8:	46d6      	mov	lr, sl
   27fca:	464f      	mov	r7, r9
   27fcc:	030c      	lsls	r4, r1, #12
   27fce:	b5c0      	push	{r6, r7, lr}
   27fd0:	0fcd      	lsrs	r5, r1, #31
   27fd2:	004e      	lsls	r6, r1, #1
   27fd4:	0a61      	lsrs	r1, r4, #9
   27fd6:	0f44      	lsrs	r4, r0, #29
   27fd8:	430c      	orrs	r4, r1
   27fda:	00c1      	lsls	r1, r0, #3
   27fdc:	0058      	lsls	r0, r3, #1
   27fde:	0d40      	lsrs	r0, r0, #21
   27fe0:	4684      	mov	ip, r0
   27fe2:	468a      	mov	sl, r1
   27fe4:	000f      	movs	r7, r1
   27fe6:	0319      	lsls	r1, r3, #12
   27fe8:	0f50      	lsrs	r0, r2, #29
   27fea:	0a49      	lsrs	r1, r1, #9
   27fec:	4301      	orrs	r1, r0
   27fee:	48c6      	ldr	r0, [pc, #792]	; (28308 <__aeabi_dsub+0x344>)
   27ff0:	0d76      	lsrs	r6, r6, #21
   27ff2:	46a8      	mov	r8, r5
   27ff4:	0fdb      	lsrs	r3, r3, #31
   27ff6:	00d2      	lsls	r2, r2, #3
   27ff8:	4584      	cmp	ip, r0
   27ffa:	d100      	bne.n	27ffe <__aeabi_dsub+0x3a>
   27ffc:	e0d8      	b.n	281b0 <__aeabi_dsub+0x1ec>
   27ffe:	2001      	movs	r0, #1
   28000:	4043      	eors	r3, r0
   28002:	42ab      	cmp	r3, r5
   28004:	d100      	bne.n	28008 <__aeabi_dsub+0x44>
   28006:	e0a6      	b.n	28156 <__aeabi_dsub+0x192>
   28008:	4660      	mov	r0, ip
   2800a:	1a35      	subs	r5, r6, r0
   2800c:	2d00      	cmp	r5, #0
   2800e:	dc00      	bgt.n	28012 <__aeabi_dsub+0x4e>
   28010:	e105      	b.n	2821e <__aeabi_dsub+0x25a>
   28012:	2800      	cmp	r0, #0
   28014:	d110      	bne.n	28038 <__aeabi_dsub+0x74>
   28016:	000b      	movs	r3, r1
   28018:	4313      	orrs	r3, r2
   2801a:	d100      	bne.n	2801e <__aeabi_dsub+0x5a>
   2801c:	e0d7      	b.n	281ce <__aeabi_dsub+0x20a>
   2801e:	1e6b      	subs	r3, r5, #1
   28020:	2b00      	cmp	r3, #0
   28022:	d000      	beq.n	28026 <__aeabi_dsub+0x62>
   28024:	e14b      	b.n	282be <__aeabi_dsub+0x2fa>
   28026:	4653      	mov	r3, sl
   28028:	1a9f      	subs	r7, r3, r2
   2802a:	45ba      	cmp	sl, r7
   2802c:	4180      	sbcs	r0, r0
   2802e:	1a64      	subs	r4, r4, r1
   28030:	4240      	negs	r0, r0
   28032:	1a24      	subs	r4, r4, r0
   28034:	2601      	movs	r6, #1
   28036:	e01e      	b.n	28076 <__aeabi_dsub+0xb2>
   28038:	4bb3      	ldr	r3, [pc, #716]	; (28308 <__aeabi_dsub+0x344>)
   2803a:	429e      	cmp	r6, r3
   2803c:	d048      	beq.n	280d0 <__aeabi_dsub+0x10c>
   2803e:	2380      	movs	r3, #128	; 0x80
   28040:	041b      	lsls	r3, r3, #16
   28042:	4319      	orrs	r1, r3
   28044:	2d38      	cmp	r5, #56	; 0x38
   28046:	dd00      	ble.n	2804a <__aeabi_dsub+0x86>
   28048:	e119      	b.n	2827e <__aeabi_dsub+0x2ba>
   2804a:	2d1f      	cmp	r5, #31
   2804c:	dd00      	ble.n	28050 <__aeabi_dsub+0x8c>
   2804e:	e14c      	b.n	282ea <__aeabi_dsub+0x326>
   28050:	2320      	movs	r3, #32
   28052:	000f      	movs	r7, r1
   28054:	1b5b      	subs	r3, r3, r5
   28056:	0010      	movs	r0, r2
   28058:	409a      	lsls	r2, r3
   2805a:	409f      	lsls	r7, r3
   2805c:	40e8      	lsrs	r0, r5
   2805e:	1e53      	subs	r3, r2, #1
   28060:	419a      	sbcs	r2, r3
   28062:	40e9      	lsrs	r1, r5
   28064:	4307      	orrs	r7, r0
   28066:	4317      	orrs	r7, r2
   28068:	4653      	mov	r3, sl
   2806a:	1bdf      	subs	r7, r3, r7
   2806c:	1a61      	subs	r1, r4, r1
   2806e:	45ba      	cmp	sl, r7
   28070:	41a4      	sbcs	r4, r4
   28072:	4264      	negs	r4, r4
   28074:	1b0c      	subs	r4, r1, r4
   28076:	0223      	lsls	r3, r4, #8
   28078:	d400      	bmi.n	2807c <__aeabi_dsub+0xb8>
   2807a:	e0c5      	b.n	28208 <__aeabi_dsub+0x244>
   2807c:	0264      	lsls	r4, r4, #9
   2807e:	0a65      	lsrs	r5, r4, #9
   28080:	2d00      	cmp	r5, #0
   28082:	d100      	bne.n	28086 <__aeabi_dsub+0xc2>
   28084:	e0f6      	b.n	28274 <__aeabi_dsub+0x2b0>
   28086:	0028      	movs	r0, r5
   28088:	f7fd fe46 	bl	25d18 <__clzsi2>
   2808c:	0003      	movs	r3, r0
   2808e:	3b08      	subs	r3, #8
   28090:	2b1f      	cmp	r3, #31
   28092:	dd00      	ble.n	28096 <__aeabi_dsub+0xd2>
   28094:	e0e9      	b.n	2826a <__aeabi_dsub+0x2a6>
   28096:	2220      	movs	r2, #32
   28098:	003c      	movs	r4, r7
   2809a:	1ad2      	subs	r2, r2, r3
   2809c:	409d      	lsls	r5, r3
   2809e:	40d4      	lsrs	r4, r2
   280a0:	409f      	lsls	r7, r3
   280a2:	4325      	orrs	r5, r4
   280a4:	429e      	cmp	r6, r3
   280a6:	dd00      	ble.n	280aa <__aeabi_dsub+0xe6>
   280a8:	e0db      	b.n	28262 <__aeabi_dsub+0x29e>
   280aa:	1b9e      	subs	r6, r3, r6
   280ac:	1c73      	adds	r3, r6, #1
   280ae:	2b1f      	cmp	r3, #31
   280b0:	dd00      	ble.n	280b4 <__aeabi_dsub+0xf0>
   280b2:	e10a      	b.n	282ca <__aeabi_dsub+0x306>
   280b4:	2220      	movs	r2, #32
   280b6:	0038      	movs	r0, r7
   280b8:	1ad2      	subs	r2, r2, r3
   280ba:	0029      	movs	r1, r5
   280bc:	4097      	lsls	r7, r2
   280be:	002c      	movs	r4, r5
   280c0:	4091      	lsls	r1, r2
   280c2:	40d8      	lsrs	r0, r3
   280c4:	1e7a      	subs	r2, r7, #1
   280c6:	4197      	sbcs	r7, r2
   280c8:	40dc      	lsrs	r4, r3
   280ca:	2600      	movs	r6, #0
   280cc:	4301      	orrs	r1, r0
   280ce:	430f      	orrs	r7, r1
   280d0:	077b      	lsls	r3, r7, #29
   280d2:	d009      	beq.n	280e8 <__aeabi_dsub+0x124>
   280d4:	230f      	movs	r3, #15
   280d6:	403b      	ands	r3, r7
   280d8:	2b04      	cmp	r3, #4
   280da:	d005      	beq.n	280e8 <__aeabi_dsub+0x124>
   280dc:	1d3b      	adds	r3, r7, #4
   280de:	42bb      	cmp	r3, r7
   280e0:	41bf      	sbcs	r7, r7
   280e2:	427f      	negs	r7, r7
   280e4:	19e4      	adds	r4, r4, r7
   280e6:	001f      	movs	r7, r3
   280e8:	0223      	lsls	r3, r4, #8
   280ea:	d525      	bpl.n	28138 <__aeabi_dsub+0x174>
   280ec:	4b86      	ldr	r3, [pc, #536]	; (28308 <__aeabi_dsub+0x344>)
   280ee:	3601      	adds	r6, #1
   280f0:	429e      	cmp	r6, r3
   280f2:	d100      	bne.n	280f6 <__aeabi_dsub+0x132>
   280f4:	e0af      	b.n	28256 <__aeabi_dsub+0x292>
   280f6:	4b85      	ldr	r3, [pc, #532]	; (2830c <__aeabi_dsub+0x348>)
   280f8:	2501      	movs	r5, #1
   280fa:	401c      	ands	r4, r3
   280fc:	4643      	mov	r3, r8
   280fe:	0762      	lsls	r2, r4, #29
   28100:	08ff      	lsrs	r7, r7, #3
   28102:	0264      	lsls	r4, r4, #9
   28104:	0576      	lsls	r6, r6, #21
   28106:	4317      	orrs	r7, r2
   28108:	0b24      	lsrs	r4, r4, #12
   2810a:	0d76      	lsrs	r6, r6, #21
   2810c:	401d      	ands	r5, r3
   2810e:	2100      	movs	r1, #0
   28110:	0324      	lsls	r4, r4, #12
   28112:	0b23      	lsrs	r3, r4, #12
   28114:	0d0c      	lsrs	r4, r1, #20
   28116:	4a7e      	ldr	r2, [pc, #504]	; (28310 <__aeabi_dsub+0x34c>)
   28118:	0524      	lsls	r4, r4, #20
   2811a:	431c      	orrs	r4, r3
   2811c:	4014      	ands	r4, r2
   2811e:	0533      	lsls	r3, r6, #20
   28120:	4323      	orrs	r3, r4
   28122:	005b      	lsls	r3, r3, #1
   28124:	07ed      	lsls	r5, r5, #31
   28126:	085b      	lsrs	r3, r3, #1
   28128:	432b      	orrs	r3, r5
   2812a:	0038      	movs	r0, r7
   2812c:	0019      	movs	r1, r3
   2812e:	bc1c      	pop	{r2, r3, r4}
   28130:	4690      	mov	r8, r2
   28132:	4699      	mov	r9, r3
   28134:	46a2      	mov	sl, r4
   28136:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28138:	2501      	movs	r5, #1
   2813a:	4643      	mov	r3, r8
   2813c:	0762      	lsls	r2, r4, #29
   2813e:	08ff      	lsrs	r7, r7, #3
   28140:	4317      	orrs	r7, r2
   28142:	08e4      	lsrs	r4, r4, #3
   28144:	401d      	ands	r5, r3
   28146:	4b70      	ldr	r3, [pc, #448]	; (28308 <__aeabi_dsub+0x344>)
   28148:	429e      	cmp	r6, r3
   2814a:	d036      	beq.n	281ba <__aeabi_dsub+0x1f6>
   2814c:	0324      	lsls	r4, r4, #12
   2814e:	0576      	lsls	r6, r6, #21
   28150:	0b24      	lsrs	r4, r4, #12
   28152:	0d76      	lsrs	r6, r6, #21
   28154:	e7db      	b.n	2810e <__aeabi_dsub+0x14a>
   28156:	4663      	mov	r3, ip
   28158:	1af3      	subs	r3, r6, r3
   2815a:	2b00      	cmp	r3, #0
   2815c:	dc00      	bgt.n	28160 <__aeabi_dsub+0x19c>
   2815e:	e094      	b.n	2828a <__aeabi_dsub+0x2c6>
   28160:	4660      	mov	r0, ip
   28162:	2800      	cmp	r0, #0
   28164:	d035      	beq.n	281d2 <__aeabi_dsub+0x20e>
   28166:	4868      	ldr	r0, [pc, #416]	; (28308 <__aeabi_dsub+0x344>)
   28168:	4286      	cmp	r6, r0
   2816a:	d0b1      	beq.n	280d0 <__aeabi_dsub+0x10c>
   2816c:	2780      	movs	r7, #128	; 0x80
   2816e:	043f      	lsls	r7, r7, #16
   28170:	4339      	orrs	r1, r7
   28172:	2b38      	cmp	r3, #56	; 0x38
   28174:	dc00      	bgt.n	28178 <__aeabi_dsub+0x1b4>
   28176:	e0fd      	b.n	28374 <__aeabi_dsub+0x3b0>
   28178:	430a      	orrs	r2, r1
   2817a:	0017      	movs	r7, r2
   2817c:	2100      	movs	r1, #0
   2817e:	1e7a      	subs	r2, r7, #1
   28180:	4197      	sbcs	r7, r2
   28182:	4457      	add	r7, sl
   28184:	4557      	cmp	r7, sl
   28186:	4180      	sbcs	r0, r0
   28188:	1909      	adds	r1, r1, r4
   2818a:	4244      	negs	r4, r0
   2818c:	190c      	adds	r4, r1, r4
   2818e:	0223      	lsls	r3, r4, #8
   28190:	d53a      	bpl.n	28208 <__aeabi_dsub+0x244>
   28192:	4b5d      	ldr	r3, [pc, #372]	; (28308 <__aeabi_dsub+0x344>)
   28194:	3601      	adds	r6, #1
   28196:	429e      	cmp	r6, r3
   28198:	d100      	bne.n	2819c <__aeabi_dsub+0x1d8>
   2819a:	e14b      	b.n	28434 <__aeabi_dsub+0x470>
   2819c:	2201      	movs	r2, #1
   2819e:	4b5b      	ldr	r3, [pc, #364]	; (2830c <__aeabi_dsub+0x348>)
   281a0:	401c      	ands	r4, r3
   281a2:	087b      	lsrs	r3, r7, #1
   281a4:	4017      	ands	r7, r2
   281a6:	431f      	orrs	r7, r3
   281a8:	07e2      	lsls	r2, r4, #31
   281aa:	4317      	orrs	r7, r2
   281ac:	0864      	lsrs	r4, r4, #1
   281ae:	e78f      	b.n	280d0 <__aeabi_dsub+0x10c>
   281b0:	0008      	movs	r0, r1
   281b2:	4310      	orrs	r0, r2
   281b4:	d000      	beq.n	281b8 <__aeabi_dsub+0x1f4>
   281b6:	e724      	b.n	28002 <__aeabi_dsub+0x3e>
   281b8:	e721      	b.n	27ffe <__aeabi_dsub+0x3a>
   281ba:	0023      	movs	r3, r4
   281bc:	433b      	orrs	r3, r7
   281be:	d100      	bne.n	281c2 <__aeabi_dsub+0x1fe>
   281c0:	e1b9      	b.n	28536 <__aeabi_dsub+0x572>
   281c2:	2280      	movs	r2, #128	; 0x80
   281c4:	0312      	lsls	r2, r2, #12
   281c6:	4314      	orrs	r4, r2
   281c8:	0324      	lsls	r4, r4, #12
   281ca:	0b24      	lsrs	r4, r4, #12
   281cc:	e79f      	b.n	2810e <__aeabi_dsub+0x14a>
   281ce:	002e      	movs	r6, r5
   281d0:	e77e      	b.n	280d0 <__aeabi_dsub+0x10c>
   281d2:	0008      	movs	r0, r1
   281d4:	4310      	orrs	r0, r2
   281d6:	d100      	bne.n	281da <__aeabi_dsub+0x216>
   281d8:	e0ca      	b.n	28370 <__aeabi_dsub+0x3ac>
   281da:	1e58      	subs	r0, r3, #1
   281dc:	4684      	mov	ip, r0
   281de:	2800      	cmp	r0, #0
   281e0:	d000      	beq.n	281e4 <__aeabi_dsub+0x220>
   281e2:	e0e7      	b.n	283b4 <__aeabi_dsub+0x3f0>
   281e4:	4452      	add	r2, sl
   281e6:	4552      	cmp	r2, sl
   281e8:	4180      	sbcs	r0, r0
   281ea:	1864      	adds	r4, r4, r1
   281ec:	4240      	negs	r0, r0
   281ee:	1824      	adds	r4, r4, r0
   281f0:	0017      	movs	r7, r2
   281f2:	2601      	movs	r6, #1
   281f4:	0223      	lsls	r3, r4, #8
   281f6:	d507      	bpl.n	28208 <__aeabi_dsub+0x244>
   281f8:	2602      	movs	r6, #2
   281fa:	e7cf      	b.n	2819c <__aeabi_dsub+0x1d8>
   281fc:	4664      	mov	r4, ip
   281fe:	432c      	orrs	r4, r5
   28200:	d100      	bne.n	28204 <__aeabi_dsub+0x240>
   28202:	e1b3      	b.n	2856c <__aeabi_dsub+0x5a8>
   28204:	002c      	movs	r4, r5
   28206:	4667      	mov	r7, ip
   28208:	077b      	lsls	r3, r7, #29
   2820a:	d000      	beq.n	2820e <__aeabi_dsub+0x24a>
   2820c:	e762      	b.n	280d4 <__aeabi_dsub+0x110>
   2820e:	0763      	lsls	r3, r4, #29
   28210:	08ff      	lsrs	r7, r7, #3
   28212:	431f      	orrs	r7, r3
   28214:	2501      	movs	r5, #1
   28216:	4643      	mov	r3, r8
   28218:	08e4      	lsrs	r4, r4, #3
   2821a:	401d      	ands	r5, r3
   2821c:	e793      	b.n	28146 <__aeabi_dsub+0x182>
   2821e:	2d00      	cmp	r5, #0
   28220:	d178      	bne.n	28314 <__aeabi_dsub+0x350>
   28222:	1c75      	adds	r5, r6, #1
   28224:	056d      	lsls	r5, r5, #21
   28226:	0d6d      	lsrs	r5, r5, #21
   28228:	2d01      	cmp	r5, #1
   2822a:	dc00      	bgt.n	2822e <__aeabi_dsub+0x26a>
   2822c:	e0f2      	b.n	28414 <__aeabi_dsub+0x450>
   2822e:	4650      	mov	r0, sl
   28230:	1a80      	subs	r0, r0, r2
   28232:	4582      	cmp	sl, r0
   28234:	41bf      	sbcs	r7, r7
   28236:	1a65      	subs	r5, r4, r1
   28238:	427f      	negs	r7, r7
   2823a:	1bed      	subs	r5, r5, r7
   2823c:	4684      	mov	ip, r0
   2823e:	0228      	lsls	r0, r5, #8
   28240:	d400      	bmi.n	28244 <__aeabi_dsub+0x280>
   28242:	e08c      	b.n	2835e <__aeabi_dsub+0x39a>
   28244:	4650      	mov	r0, sl
   28246:	1a17      	subs	r7, r2, r0
   28248:	42ba      	cmp	r2, r7
   2824a:	4192      	sbcs	r2, r2
   2824c:	1b0c      	subs	r4, r1, r4
   2824e:	4255      	negs	r5, r2
   28250:	1b65      	subs	r5, r4, r5
   28252:	4698      	mov	r8, r3
   28254:	e714      	b.n	28080 <__aeabi_dsub+0xbc>
   28256:	2501      	movs	r5, #1
   28258:	4643      	mov	r3, r8
   2825a:	2400      	movs	r4, #0
   2825c:	401d      	ands	r5, r3
   2825e:	2700      	movs	r7, #0
   28260:	e755      	b.n	2810e <__aeabi_dsub+0x14a>
   28262:	4c2a      	ldr	r4, [pc, #168]	; (2830c <__aeabi_dsub+0x348>)
   28264:	1af6      	subs	r6, r6, r3
   28266:	402c      	ands	r4, r5
   28268:	e732      	b.n	280d0 <__aeabi_dsub+0x10c>
   2826a:	003d      	movs	r5, r7
   2826c:	3828      	subs	r0, #40	; 0x28
   2826e:	4085      	lsls	r5, r0
   28270:	2700      	movs	r7, #0
   28272:	e717      	b.n	280a4 <__aeabi_dsub+0xe0>
   28274:	0038      	movs	r0, r7
   28276:	f7fd fd4f 	bl	25d18 <__clzsi2>
   2827a:	3020      	adds	r0, #32
   2827c:	e706      	b.n	2808c <__aeabi_dsub+0xc8>
   2827e:	430a      	orrs	r2, r1
   28280:	0017      	movs	r7, r2
   28282:	2100      	movs	r1, #0
   28284:	1e7a      	subs	r2, r7, #1
   28286:	4197      	sbcs	r7, r2
   28288:	e6ee      	b.n	28068 <__aeabi_dsub+0xa4>
   2828a:	2b00      	cmp	r3, #0
   2828c:	d000      	beq.n	28290 <__aeabi_dsub+0x2cc>
   2828e:	e0e5      	b.n	2845c <__aeabi_dsub+0x498>
   28290:	1c73      	adds	r3, r6, #1
   28292:	469c      	mov	ip, r3
   28294:	055b      	lsls	r3, r3, #21
   28296:	0d5b      	lsrs	r3, r3, #21
   28298:	2b01      	cmp	r3, #1
   2829a:	dc00      	bgt.n	2829e <__aeabi_dsub+0x2da>
   2829c:	e09f      	b.n	283de <__aeabi_dsub+0x41a>
   2829e:	4b1a      	ldr	r3, [pc, #104]	; (28308 <__aeabi_dsub+0x344>)
   282a0:	459c      	cmp	ip, r3
   282a2:	d100      	bne.n	282a6 <__aeabi_dsub+0x2e2>
   282a4:	e0c5      	b.n	28432 <__aeabi_dsub+0x46e>
   282a6:	4452      	add	r2, sl
   282a8:	4552      	cmp	r2, sl
   282aa:	4180      	sbcs	r0, r0
   282ac:	1864      	adds	r4, r4, r1
   282ae:	4240      	negs	r0, r0
   282b0:	1824      	adds	r4, r4, r0
   282b2:	07e7      	lsls	r7, r4, #31
   282b4:	0852      	lsrs	r2, r2, #1
   282b6:	4317      	orrs	r7, r2
   282b8:	0864      	lsrs	r4, r4, #1
   282ba:	4666      	mov	r6, ip
   282bc:	e708      	b.n	280d0 <__aeabi_dsub+0x10c>
   282be:	4812      	ldr	r0, [pc, #72]	; (28308 <__aeabi_dsub+0x344>)
   282c0:	4285      	cmp	r5, r0
   282c2:	d100      	bne.n	282c6 <__aeabi_dsub+0x302>
   282c4:	e085      	b.n	283d2 <__aeabi_dsub+0x40e>
   282c6:	001d      	movs	r5, r3
   282c8:	e6bc      	b.n	28044 <__aeabi_dsub+0x80>
   282ca:	0029      	movs	r1, r5
   282cc:	3e1f      	subs	r6, #31
   282ce:	40f1      	lsrs	r1, r6
   282d0:	2b20      	cmp	r3, #32
   282d2:	d100      	bne.n	282d6 <__aeabi_dsub+0x312>
   282d4:	e07f      	b.n	283d6 <__aeabi_dsub+0x412>
   282d6:	2240      	movs	r2, #64	; 0x40
   282d8:	1ad3      	subs	r3, r2, r3
   282da:	409d      	lsls	r5, r3
   282dc:	432f      	orrs	r7, r5
   282de:	1e7d      	subs	r5, r7, #1
   282e0:	41af      	sbcs	r7, r5
   282e2:	2400      	movs	r4, #0
   282e4:	430f      	orrs	r7, r1
   282e6:	2600      	movs	r6, #0
   282e8:	e78e      	b.n	28208 <__aeabi_dsub+0x244>
   282ea:	002b      	movs	r3, r5
   282ec:	000f      	movs	r7, r1
   282ee:	3b20      	subs	r3, #32
   282f0:	40df      	lsrs	r7, r3
   282f2:	2d20      	cmp	r5, #32
   282f4:	d071      	beq.n	283da <__aeabi_dsub+0x416>
   282f6:	2340      	movs	r3, #64	; 0x40
   282f8:	1b5d      	subs	r5, r3, r5
   282fa:	40a9      	lsls	r1, r5
   282fc:	430a      	orrs	r2, r1
   282fe:	1e51      	subs	r1, r2, #1
   28300:	418a      	sbcs	r2, r1
   28302:	2100      	movs	r1, #0
   28304:	4317      	orrs	r7, r2
   28306:	e6af      	b.n	28068 <__aeabi_dsub+0xa4>
   28308:	000007ff 	.word	0x000007ff
   2830c:	ff7fffff 	.word	0xff7fffff
   28310:	800fffff 	.word	0x800fffff
   28314:	2e00      	cmp	r6, #0
   28316:	d03e      	beq.n	28396 <__aeabi_dsub+0x3d2>
   28318:	4eb3      	ldr	r6, [pc, #716]	; (285e8 <__aeabi_dsub+0x624>)
   2831a:	45b4      	cmp	ip, r6
   2831c:	d045      	beq.n	283aa <__aeabi_dsub+0x3e6>
   2831e:	2680      	movs	r6, #128	; 0x80
   28320:	0436      	lsls	r6, r6, #16
   28322:	426d      	negs	r5, r5
   28324:	4334      	orrs	r4, r6
   28326:	2d38      	cmp	r5, #56	; 0x38
   28328:	dd00      	ble.n	2832c <__aeabi_dsub+0x368>
   2832a:	e0a8      	b.n	2847e <__aeabi_dsub+0x4ba>
   2832c:	2d1f      	cmp	r5, #31
   2832e:	dd00      	ble.n	28332 <__aeabi_dsub+0x36e>
   28330:	e11f      	b.n	28572 <__aeabi_dsub+0x5ae>
   28332:	2620      	movs	r6, #32
   28334:	0027      	movs	r7, r4
   28336:	4650      	mov	r0, sl
   28338:	1b76      	subs	r6, r6, r5
   2833a:	40b7      	lsls	r7, r6
   2833c:	40e8      	lsrs	r0, r5
   2833e:	4307      	orrs	r7, r0
   28340:	4650      	mov	r0, sl
   28342:	40b0      	lsls	r0, r6
   28344:	1e46      	subs	r6, r0, #1
   28346:	41b0      	sbcs	r0, r6
   28348:	40ec      	lsrs	r4, r5
   2834a:	4338      	orrs	r0, r7
   2834c:	1a17      	subs	r7, r2, r0
   2834e:	42ba      	cmp	r2, r7
   28350:	4192      	sbcs	r2, r2
   28352:	1b0c      	subs	r4, r1, r4
   28354:	4252      	negs	r2, r2
   28356:	1aa4      	subs	r4, r4, r2
   28358:	4666      	mov	r6, ip
   2835a:	4698      	mov	r8, r3
   2835c:	e68b      	b.n	28076 <__aeabi_dsub+0xb2>
   2835e:	4664      	mov	r4, ip
   28360:	4667      	mov	r7, ip
   28362:	432c      	orrs	r4, r5
   28364:	d000      	beq.n	28368 <__aeabi_dsub+0x3a4>
   28366:	e68b      	b.n	28080 <__aeabi_dsub+0xbc>
   28368:	2500      	movs	r5, #0
   2836a:	2600      	movs	r6, #0
   2836c:	2700      	movs	r7, #0
   2836e:	e6ea      	b.n	28146 <__aeabi_dsub+0x182>
   28370:	001e      	movs	r6, r3
   28372:	e6ad      	b.n	280d0 <__aeabi_dsub+0x10c>
   28374:	2b1f      	cmp	r3, #31
   28376:	dc60      	bgt.n	2843a <__aeabi_dsub+0x476>
   28378:	2720      	movs	r7, #32
   2837a:	1af8      	subs	r0, r7, r3
   2837c:	000f      	movs	r7, r1
   2837e:	4684      	mov	ip, r0
   28380:	4087      	lsls	r7, r0
   28382:	0010      	movs	r0, r2
   28384:	40d8      	lsrs	r0, r3
   28386:	4307      	orrs	r7, r0
   28388:	4660      	mov	r0, ip
   2838a:	4082      	lsls	r2, r0
   2838c:	1e50      	subs	r0, r2, #1
   2838e:	4182      	sbcs	r2, r0
   28390:	40d9      	lsrs	r1, r3
   28392:	4317      	orrs	r7, r2
   28394:	e6f5      	b.n	28182 <__aeabi_dsub+0x1be>
   28396:	0026      	movs	r6, r4
   28398:	4650      	mov	r0, sl
   2839a:	4306      	orrs	r6, r0
   2839c:	d005      	beq.n	283aa <__aeabi_dsub+0x3e6>
   2839e:	43ed      	mvns	r5, r5
   283a0:	2d00      	cmp	r5, #0
   283a2:	d0d3      	beq.n	2834c <__aeabi_dsub+0x388>
   283a4:	4e90      	ldr	r6, [pc, #576]	; (285e8 <__aeabi_dsub+0x624>)
   283a6:	45b4      	cmp	ip, r6
   283a8:	d1bd      	bne.n	28326 <__aeabi_dsub+0x362>
   283aa:	000c      	movs	r4, r1
   283ac:	0017      	movs	r7, r2
   283ae:	4666      	mov	r6, ip
   283b0:	4698      	mov	r8, r3
   283b2:	e68d      	b.n	280d0 <__aeabi_dsub+0x10c>
   283b4:	488c      	ldr	r0, [pc, #560]	; (285e8 <__aeabi_dsub+0x624>)
   283b6:	4283      	cmp	r3, r0
   283b8:	d00b      	beq.n	283d2 <__aeabi_dsub+0x40e>
   283ba:	4663      	mov	r3, ip
   283bc:	e6d9      	b.n	28172 <__aeabi_dsub+0x1ae>
   283be:	2d00      	cmp	r5, #0
   283c0:	d000      	beq.n	283c4 <__aeabi_dsub+0x400>
   283c2:	e096      	b.n	284f2 <__aeabi_dsub+0x52e>
   283c4:	0008      	movs	r0, r1
   283c6:	4310      	orrs	r0, r2
   283c8:	d100      	bne.n	283cc <__aeabi_dsub+0x408>
   283ca:	e0e2      	b.n	28592 <__aeabi_dsub+0x5ce>
   283cc:	000c      	movs	r4, r1
   283ce:	0017      	movs	r7, r2
   283d0:	4698      	mov	r8, r3
   283d2:	4e85      	ldr	r6, [pc, #532]	; (285e8 <__aeabi_dsub+0x624>)
   283d4:	e67c      	b.n	280d0 <__aeabi_dsub+0x10c>
   283d6:	2500      	movs	r5, #0
   283d8:	e780      	b.n	282dc <__aeabi_dsub+0x318>
   283da:	2100      	movs	r1, #0
   283dc:	e78e      	b.n	282fc <__aeabi_dsub+0x338>
   283de:	0023      	movs	r3, r4
   283e0:	4650      	mov	r0, sl
   283e2:	4303      	orrs	r3, r0
   283e4:	2e00      	cmp	r6, #0
   283e6:	d000      	beq.n	283ea <__aeabi_dsub+0x426>
   283e8:	e0a8      	b.n	2853c <__aeabi_dsub+0x578>
   283ea:	2b00      	cmp	r3, #0
   283ec:	d100      	bne.n	283f0 <__aeabi_dsub+0x42c>
   283ee:	e0de      	b.n	285ae <__aeabi_dsub+0x5ea>
   283f0:	000b      	movs	r3, r1
   283f2:	4313      	orrs	r3, r2
   283f4:	d100      	bne.n	283f8 <__aeabi_dsub+0x434>
   283f6:	e66b      	b.n	280d0 <__aeabi_dsub+0x10c>
   283f8:	4452      	add	r2, sl
   283fa:	4552      	cmp	r2, sl
   283fc:	4180      	sbcs	r0, r0
   283fe:	1864      	adds	r4, r4, r1
   28400:	4240      	negs	r0, r0
   28402:	1824      	adds	r4, r4, r0
   28404:	0017      	movs	r7, r2
   28406:	0223      	lsls	r3, r4, #8
   28408:	d400      	bmi.n	2840c <__aeabi_dsub+0x448>
   2840a:	e6fd      	b.n	28208 <__aeabi_dsub+0x244>
   2840c:	4b77      	ldr	r3, [pc, #476]	; (285ec <__aeabi_dsub+0x628>)
   2840e:	4666      	mov	r6, ip
   28410:	401c      	ands	r4, r3
   28412:	e65d      	b.n	280d0 <__aeabi_dsub+0x10c>
   28414:	0025      	movs	r5, r4
   28416:	4650      	mov	r0, sl
   28418:	4305      	orrs	r5, r0
   2841a:	2e00      	cmp	r6, #0
   2841c:	d1cf      	bne.n	283be <__aeabi_dsub+0x3fa>
   2841e:	2d00      	cmp	r5, #0
   28420:	d14f      	bne.n	284c2 <__aeabi_dsub+0x4fe>
   28422:	000c      	movs	r4, r1
   28424:	4314      	orrs	r4, r2
   28426:	d100      	bne.n	2842a <__aeabi_dsub+0x466>
   28428:	e0a0      	b.n	2856c <__aeabi_dsub+0x5a8>
   2842a:	000c      	movs	r4, r1
   2842c:	0017      	movs	r7, r2
   2842e:	4698      	mov	r8, r3
   28430:	e64e      	b.n	280d0 <__aeabi_dsub+0x10c>
   28432:	4666      	mov	r6, ip
   28434:	2400      	movs	r4, #0
   28436:	2700      	movs	r7, #0
   28438:	e685      	b.n	28146 <__aeabi_dsub+0x182>
   2843a:	001f      	movs	r7, r3
   2843c:	0008      	movs	r0, r1
   2843e:	3f20      	subs	r7, #32
   28440:	40f8      	lsrs	r0, r7
   28442:	0007      	movs	r7, r0
   28444:	2b20      	cmp	r3, #32
   28446:	d100      	bne.n	2844a <__aeabi_dsub+0x486>
   28448:	e08e      	b.n	28568 <__aeabi_dsub+0x5a4>
   2844a:	2040      	movs	r0, #64	; 0x40
   2844c:	1ac3      	subs	r3, r0, r3
   2844e:	4099      	lsls	r1, r3
   28450:	430a      	orrs	r2, r1
   28452:	1e51      	subs	r1, r2, #1
   28454:	418a      	sbcs	r2, r1
   28456:	2100      	movs	r1, #0
   28458:	4317      	orrs	r7, r2
   2845a:	e692      	b.n	28182 <__aeabi_dsub+0x1be>
   2845c:	2e00      	cmp	r6, #0
   2845e:	d114      	bne.n	2848a <__aeabi_dsub+0x4c6>
   28460:	0026      	movs	r6, r4
   28462:	4650      	mov	r0, sl
   28464:	4306      	orrs	r6, r0
   28466:	d062      	beq.n	2852e <__aeabi_dsub+0x56a>
   28468:	43db      	mvns	r3, r3
   2846a:	2b00      	cmp	r3, #0
   2846c:	d15c      	bne.n	28528 <__aeabi_dsub+0x564>
   2846e:	1887      	adds	r7, r0, r2
   28470:	4297      	cmp	r7, r2
   28472:	4192      	sbcs	r2, r2
   28474:	1864      	adds	r4, r4, r1
   28476:	4252      	negs	r2, r2
   28478:	18a4      	adds	r4, r4, r2
   2847a:	4666      	mov	r6, ip
   2847c:	e687      	b.n	2818e <__aeabi_dsub+0x1ca>
   2847e:	4650      	mov	r0, sl
   28480:	4320      	orrs	r0, r4
   28482:	1e44      	subs	r4, r0, #1
   28484:	41a0      	sbcs	r0, r4
   28486:	2400      	movs	r4, #0
   28488:	e760      	b.n	2834c <__aeabi_dsub+0x388>
   2848a:	4e57      	ldr	r6, [pc, #348]	; (285e8 <__aeabi_dsub+0x624>)
   2848c:	45b4      	cmp	ip, r6
   2848e:	d04e      	beq.n	2852e <__aeabi_dsub+0x56a>
   28490:	2680      	movs	r6, #128	; 0x80
   28492:	0436      	lsls	r6, r6, #16
   28494:	425b      	negs	r3, r3
   28496:	4334      	orrs	r4, r6
   28498:	2b38      	cmp	r3, #56	; 0x38
   2849a:	dd00      	ble.n	2849e <__aeabi_dsub+0x4da>
   2849c:	e07f      	b.n	2859e <__aeabi_dsub+0x5da>
   2849e:	2b1f      	cmp	r3, #31
   284a0:	dd00      	ble.n	284a4 <__aeabi_dsub+0x4e0>
   284a2:	e08b      	b.n	285bc <__aeabi_dsub+0x5f8>
   284a4:	2620      	movs	r6, #32
   284a6:	0027      	movs	r7, r4
   284a8:	4650      	mov	r0, sl
   284aa:	1af6      	subs	r6, r6, r3
   284ac:	40b7      	lsls	r7, r6
   284ae:	40d8      	lsrs	r0, r3
   284b0:	4307      	orrs	r7, r0
   284b2:	4650      	mov	r0, sl
   284b4:	40b0      	lsls	r0, r6
   284b6:	1e46      	subs	r6, r0, #1
   284b8:	41b0      	sbcs	r0, r6
   284ba:	4307      	orrs	r7, r0
   284bc:	40dc      	lsrs	r4, r3
   284be:	18bf      	adds	r7, r7, r2
   284c0:	e7d6      	b.n	28470 <__aeabi_dsub+0x4ac>
   284c2:	000d      	movs	r5, r1
   284c4:	4315      	orrs	r5, r2
   284c6:	d100      	bne.n	284ca <__aeabi_dsub+0x506>
   284c8:	e602      	b.n	280d0 <__aeabi_dsub+0x10c>
   284ca:	4650      	mov	r0, sl
   284cc:	1a80      	subs	r0, r0, r2
   284ce:	4582      	cmp	sl, r0
   284d0:	41bf      	sbcs	r7, r7
   284d2:	1a65      	subs	r5, r4, r1
   284d4:	427f      	negs	r7, r7
   284d6:	1bed      	subs	r5, r5, r7
   284d8:	4684      	mov	ip, r0
   284da:	0228      	lsls	r0, r5, #8
   284dc:	d400      	bmi.n	284e0 <__aeabi_dsub+0x51c>
   284de:	e68d      	b.n	281fc <__aeabi_dsub+0x238>
   284e0:	4650      	mov	r0, sl
   284e2:	1a17      	subs	r7, r2, r0
   284e4:	42ba      	cmp	r2, r7
   284e6:	4192      	sbcs	r2, r2
   284e8:	1b0c      	subs	r4, r1, r4
   284ea:	4252      	negs	r2, r2
   284ec:	1aa4      	subs	r4, r4, r2
   284ee:	4698      	mov	r8, r3
   284f0:	e5ee      	b.n	280d0 <__aeabi_dsub+0x10c>
   284f2:	000d      	movs	r5, r1
   284f4:	4315      	orrs	r5, r2
   284f6:	d100      	bne.n	284fa <__aeabi_dsub+0x536>
   284f8:	e76b      	b.n	283d2 <__aeabi_dsub+0x40e>
   284fa:	4650      	mov	r0, sl
   284fc:	0767      	lsls	r7, r4, #29
   284fe:	08c0      	lsrs	r0, r0, #3
   28500:	4307      	orrs	r7, r0
   28502:	2080      	movs	r0, #128	; 0x80
   28504:	08e4      	lsrs	r4, r4, #3
   28506:	0300      	lsls	r0, r0, #12
   28508:	4204      	tst	r4, r0
   2850a:	d007      	beq.n	2851c <__aeabi_dsub+0x558>
   2850c:	08cd      	lsrs	r5, r1, #3
   2850e:	4205      	tst	r5, r0
   28510:	d104      	bne.n	2851c <__aeabi_dsub+0x558>
   28512:	002c      	movs	r4, r5
   28514:	4698      	mov	r8, r3
   28516:	08d7      	lsrs	r7, r2, #3
   28518:	0749      	lsls	r1, r1, #29
   2851a:	430f      	orrs	r7, r1
   2851c:	0f7b      	lsrs	r3, r7, #29
   2851e:	00e4      	lsls	r4, r4, #3
   28520:	431c      	orrs	r4, r3
   28522:	00ff      	lsls	r7, r7, #3
   28524:	4e30      	ldr	r6, [pc, #192]	; (285e8 <__aeabi_dsub+0x624>)
   28526:	e5d3      	b.n	280d0 <__aeabi_dsub+0x10c>
   28528:	4e2f      	ldr	r6, [pc, #188]	; (285e8 <__aeabi_dsub+0x624>)
   2852a:	45b4      	cmp	ip, r6
   2852c:	d1b4      	bne.n	28498 <__aeabi_dsub+0x4d4>
   2852e:	000c      	movs	r4, r1
   28530:	0017      	movs	r7, r2
   28532:	4666      	mov	r6, ip
   28534:	e5cc      	b.n	280d0 <__aeabi_dsub+0x10c>
   28536:	2700      	movs	r7, #0
   28538:	2400      	movs	r4, #0
   2853a:	e5e8      	b.n	2810e <__aeabi_dsub+0x14a>
   2853c:	2b00      	cmp	r3, #0
   2853e:	d039      	beq.n	285b4 <__aeabi_dsub+0x5f0>
   28540:	000b      	movs	r3, r1
   28542:	4313      	orrs	r3, r2
   28544:	d100      	bne.n	28548 <__aeabi_dsub+0x584>
   28546:	e744      	b.n	283d2 <__aeabi_dsub+0x40e>
   28548:	08c0      	lsrs	r0, r0, #3
   2854a:	0767      	lsls	r7, r4, #29
   2854c:	4307      	orrs	r7, r0
   2854e:	2080      	movs	r0, #128	; 0x80
   28550:	08e4      	lsrs	r4, r4, #3
   28552:	0300      	lsls	r0, r0, #12
   28554:	4204      	tst	r4, r0
   28556:	d0e1      	beq.n	2851c <__aeabi_dsub+0x558>
   28558:	08cb      	lsrs	r3, r1, #3
   2855a:	4203      	tst	r3, r0
   2855c:	d1de      	bne.n	2851c <__aeabi_dsub+0x558>
   2855e:	08d7      	lsrs	r7, r2, #3
   28560:	0749      	lsls	r1, r1, #29
   28562:	430f      	orrs	r7, r1
   28564:	001c      	movs	r4, r3
   28566:	e7d9      	b.n	2851c <__aeabi_dsub+0x558>
   28568:	2100      	movs	r1, #0
   2856a:	e771      	b.n	28450 <__aeabi_dsub+0x48c>
   2856c:	2500      	movs	r5, #0
   2856e:	2700      	movs	r7, #0
   28570:	e5e9      	b.n	28146 <__aeabi_dsub+0x182>
   28572:	002e      	movs	r6, r5
   28574:	0027      	movs	r7, r4
   28576:	3e20      	subs	r6, #32
   28578:	40f7      	lsrs	r7, r6
   2857a:	2d20      	cmp	r5, #32
   2857c:	d02f      	beq.n	285de <__aeabi_dsub+0x61a>
   2857e:	2640      	movs	r6, #64	; 0x40
   28580:	1b75      	subs	r5, r6, r5
   28582:	40ac      	lsls	r4, r5
   28584:	4650      	mov	r0, sl
   28586:	4320      	orrs	r0, r4
   28588:	1e44      	subs	r4, r0, #1
   2858a:	41a0      	sbcs	r0, r4
   2858c:	2400      	movs	r4, #0
   2858e:	4338      	orrs	r0, r7
   28590:	e6dc      	b.n	2834c <__aeabi_dsub+0x388>
   28592:	2480      	movs	r4, #128	; 0x80
   28594:	2500      	movs	r5, #0
   28596:	0324      	lsls	r4, r4, #12
   28598:	4e13      	ldr	r6, [pc, #76]	; (285e8 <__aeabi_dsub+0x624>)
   2859a:	2700      	movs	r7, #0
   2859c:	e5d3      	b.n	28146 <__aeabi_dsub+0x182>
   2859e:	4650      	mov	r0, sl
   285a0:	4320      	orrs	r0, r4
   285a2:	0007      	movs	r7, r0
   285a4:	1e78      	subs	r0, r7, #1
   285a6:	4187      	sbcs	r7, r0
   285a8:	2400      	movs	r4, #0
   285aa:	18bf      	adds	r7, r7, r2
   285ac:	e760      	b.n	28470 <__aeabi_dsub+0x4ac>
   285ae:	000c      	movs	r4, r1
   285b0:	0017      	movs	r7, r2
   285b2:	e58d      	b.n	280d0 <__aeabi_dsub+0x10c>
   285b4:	000c      	movs	r4, r1
   285b6:	0017      	movs	r7, r2
   285b8:	4e0b      	ldr	r6, [pc, #44]	; (285e8 <__aeabi_dsub+0x624>)
   285ba:	e589      	b.n	280d0 <__aeabi_dsub+0x10c>
   285bc:	001e      	movs	r6, r3
   285be:	0027      	movs	r7, r4
   285c0:	3e20      	subs	r6, #32
   285c2:	40f7      	lsrs	r7, r6
   285c4:	2b20      	cmp	r3, #32
   285c6:	d00c      	beq.n	285e2 <__aeabi_dsub+0x61e>
   285c8:	2640      	movs	r6, #64	; 0x40
   285ca:	1af3      	subs	r3, r6, r3
   285cc:	409c      	lsls	r4, r3
   285ce:	4650      	mov	r0, sl
   285d0:	4320      	orrs	r0, r4
   285d2:	1e44      	subs	r4, r0, #1
   285d4:	41a0      	sbcs	r0, r4
   285d6:	4307      	orrs	r7, r0
   285d8:	2400      	movs	r4, #0
   285da:	18bf      	adds	r7, r7, r2
   285dc:	e748      	b.n	28470 <__aeabi_dsub+0x4ac>
   285de:	2400      	movs	r4, #0
   285e0:	e7d0      	b.n	28584 <__aeabi_dsub+0x5c0>
   285e2:	2400      	movs	r4, #0
   285e4:	e7f3      	b.n	285ce <__aeabi_dsub+0x60a>
   285e6:	46c0      	nop			; (mov r8, r8)
   285e8:	000007ff 	.word	0x000007ff
   285ec:	ff7fffff 	.word	0xff7fffff

000285f0 <__aeabi_dcmpun>:
   285f0:	b570      	push	{r4, r5, r6, lr}
   285f2:	4e0e      	ldr	r6, [pc, #56]	; (2862c <__aeabi_dcmpun+0x3c>)
   285f4:	030d      	lsls	r5, r1, #12
   285f6:	031c      	lsls	r4, r3, #12
   285f8:	0049      	lsls	r1, r1, #1
   285fa:	005b      	lsls	r3, r3, #1
   285fc:	0b2d      	lsrs	r5, r5, #12
   285fe:	0d49      	lsrs	r1, r1, #21
   28600:	0b24      	lsrs	r4, r4, #12
   28602:	0d5b      	lsrs	r3, r3, #21
   28604:	42b1      	cmp	r1, r6
   28606:	d004      	beq.n	28612 <__aeabi_dcmpun+0x22>
   28608:	4908      	ldr	r1, [pc, #32]	; (2862c <__aeabi_dcmpun+0x3c>)
   2860a:	2000      	movs	r0, #0
   2860c:	428b      	cmp	r3, r1
   2860e:	d008      	beq.n	28622 <__aeabi_dcmpun+0x32>
   28610:	bd70      	pop	{r4, r5, r6, pc}
   28612:	4305      	orrs	r5, r0
   28614:	2001      	movs	r0, #1
   28616:	2d00      	cmp	r5, #0
   28618:	d1fa      	bne.n	28610 <__aeabi_dcmpun+0x20>
   2861a:	4904      	ldr	r1, [pc, #16]	; (2862c <__aeabi_dcmpun+0x3c>)
   2861c:	2000      	movs	r0, #0
   2861e:	428b      	cmp	r3, r1
   28620:	d1f6      	bne.n	28610 <__aeabi_dcmpun+0x20>
   28622:	4314      	orrs	r4, r2
   28624:	0020      	movs	r0, r4
   28626:	1e44      	subs	r4, r0, #1
   28628:	41a0      	sbcs	r0, r4
   2862a:	e7f1      	b.n	28610 <__aeabi_dcmpun+0x20>
   2862c:	000007ff 	.word	0x000007ff

00028630 <__aeabi_d2iz>:
   28630:	b530      	push	{r4, r5, lr}
   28632:	4d13      	ldr	r5, [pc, #76]	; (28680 <__aeabi_d2iz+0x50>)
   28634:	030a      	lsls	r2, r1, #12
   28636:	004b      	lsls	r3, r1, #1
   28638:	0b12      	lsrs	r2, r2, #12
   2863a:	0d5b      	lsrs	r3, r3, #21
   2863c:	0fc9      	lsrs	r1, r1, #31
   2863e:	2400      	movs	r4, #0
   28640:	42ab      	cmp	r3, r5
   28642:	dd10      	ble.n	28666 <__aeabi_d2iz+0x36>
   28644:	4c0f      	ldr	r4, [pc, #60]	; (28684 <__aeabi_d2iz+0x54>)
   28646:	42a3      	cmp	r3, r4
   28648:	dc0f      	bgt.n	2866a <__aeabi_d2iz+0x3a>
   2864a:	2480      	movs	r4, #128	; 0x80
   2864c:	4d0e      	ldr	r5, [pc, #56]	; (28688 <__aeabi_d2iz+0x58>)
   2864e:	0364      	lsls	r4, r4, #13
   28650:	4322      	orrs	r2, r4
   28652:	1aed      	subs	r5, r5, r3
   28654:	2d1f      	cmp	r5, #31
   28656:	dd0b      	ble.n	28670 <__aeabi_d2iz+0x40>
   28658:	480c      	ldr	r0, [pc, #48]	; (2868c <__aeabi_d2iz+0x5c>)
   2865a:	1ac3      	subs	r3, r0, r3
   2865c:	40da      	lsrs	r2, r3
   2865e:	4254      	negs	r4, r2
   28660:	2900      	cmp	r1, #0
   28662:	d100      	bne.n	28666 <__aeabi_d2iz+0x36>
   28664:	0014      	movs	r4, r2
   28666:	0020      	movs	r0, r4
   28668:	bd30      	pop	{r4, r5, pc}
   2866a:	4b09      	ldr	r3, [pc, #36]	; (28690 <__aeabi_d2iz+0x60>)
   2866c:	18cc      	adds	r4, r1, r3
   2866e:	e7fa      	b.n	28666 <__aeabi_d2iz+0x36>
   28670:	4c08      	ldr	r4, [pc, #32]	; (28694 <__aeabi_d2iz+0x64>)
   28672:	40e8      	lsrs	r0, r5
   28674:	46a4      	mov	ip, r4
   28676:	4463      	add	r3, ip
   28678:	409a      	lsls	r2, r3
   2867a:	4302      	orrs	r2, r0
   2867c:	e7ef      	b.n	2865e <__aeabi_d2iz+0x2e>
   2867e:	46c0      	nop			; (mov r8, r8)
   28680:	000003fe 	.word	0x000003fe
   28684:	0000041d 	.word	0x0000041d
   28688:	00000433 	.word	0x00000433
   2868c:	00000413 	.word	0x00000413
   28690:	7fffffff 	.word	0x7fffffff
   28694:	fffffbed 	.word	0xfffffbed

00028698 <__aeabi_i2d>:
   28698:	b570      	push	{r4, r5, r6, lr}
   2869a:	2800      	cmp	r0, #0
   2869c:	d030      	beq.n	28700 <__aeabi_i2d+0x68>
   2869e:	17c3      	asrs	r3, r0, #31
   286a0:	18c4      	adds	r4, r0, r3
   286a2:	405c      	eors	r4, r3
   286a4:	0fc5      	lsrs	r5, r0, #31
   286a6:	0020      	movs	r0, r4
   286a8:	f7fd fb36 	bl	25d18 <__clzsi2>
   286ac:	4b17      	ldr	r3, [pc, #92]	; (2870c <__aeabi_i2d+0x74>)
   286ae:	4a18      	ldr	r2, [pc, #96]	; (28710 <__aeabi_i2d+0x78>)
   286b0:	1a1b      	subs	r3, r3, r0
   286b2:	1ad2      	subs	r2, r2, r3
   286b4:	2a1f      	cmp	r2, #31
   286b6:	dd18      	ble.n	286ea <__aeabi_i2d+0x52>
   286b8:	4a16      	ldr	r2, [pc, #88]	; (28714 <__aeabi_i2d+0x7c>)
   286ba:	1ad2      	subs	r2, r2, r3
   286bc:	4094      	lsls	r4, r2
   286be:	2200      	movs	r2, #0
   286c0:	0324      	lsls	r4, r4, #12
   286c2:	055b      	lsls	r3, r3, #21
   286c4:	0b24      	lsrs	r4, r4, #12
   286c6:	0d5b      	lsrs	r3, r3, #21
   286c8:	2100      	movs	r1, #0
   286ca:	0010      	movs	r0, r2
   286cc:	0324      	lsls	r4, r4, #12
   286ce:	0d0a      	lsrs	r2, r1, #20
   286d0:	0b24      	lsrs	r4, r4, #12
   286d2:	0512      	lsls	r2, r2, #20
   286d4:	4322      	orrs	r2, r4
   286d6:	4c10      	ldr	r4, [pc, #64]	; (28718 <__aeabi_i2d+0x80>)
   286d8:	051b      	lsls	r3, r3, #20
   286da:	4022      	ands	r2, r4
   286dc:	4313      	orrs	r3, r2
   286de:	005b      	lsls	r3, r3, #1
   286e0:	07ed      	lsls	r5, r5, #31
   286e2:	085b      	lsrs	r3, r3, #1
   286e4:	432b      	orrs	r3, r5
   286e6:	0019      	movs	r1, r3
   286e8:	bd70      	pop	{r4, r5, r6, pc}
   286ea:	0021      	movs	r1, r4
   286ec:	4091      	lsls	r1, r2
   286ee:	000a      	movs	r2, r1
   286f0:	210b      	movs	r1, #11
   286f2:	1a08      	subs	r0, r1, r0
   286f4:	40c4      	lsrs	r4, r0
   286f6:	055b      	lsls	r3, r3, #21
   286f8:	0324      	lsls	r4, r4, #12
   286fa:	0b24      	lsrs	r4, r4, #12
   286fc:	0d5b      	lsrs	r3, r3, #21
   286fe:	e7e3      	b.n	286c8 <__aeabi_i2d+0x30>
   28700:	2500      	movs	r5, #0
   28702:	2300      	movs	r3, #0
   28704:	2400      	movs	r4, #0
   28706:	2200      	movs	r2, #0
   28708:	e7de      	b.n	286c8 <__aeabi_i2d+0x30>
   2870a:	46c0      	nop			; (mov r8, r8)
   2870c:	0000041e 	.word	0x0000041e
   28710:	00000433 	.word	0x00000433
   28714:	00000413 	.word	0x00000413
   28718:	800fffff 	.word	0x800fffff

0002871c <__aeabi_ui2d>:
   2871c:	b510      	push	{r4, lr}
   2871e:	1e04      	subs	r4, r0, #0
   28720:	d028      	beq.n	28774 <__aeabi_ui2d+0x58>
   28722:	f7fd faf9 	bl	25d18 <__clzsi2>
   28726:	4b15      	ldr	r3, [pc, #84]	; (2877c <__aeabi_ui2d+0x60>)
   28728:	4a15      	ldr	r2, [pc, #84]	; (28780 <__aeabi_ui2d+0x64>)
   2872a:	1a1b      	subs	r3, r3, r0
   2872c:	1ad2      	subs	r2, r2, r3
   2872e:	2a1f      	cmp	r2, #31
   28730:	dd15      	ble.n	2875e <__aeabi_ui2d+0x42>
   28732:	4a14      	ldr	r2, [pc, #80]	; (28784 <__aeabi_ui2d+0x68>)
   28734:	1ad2      	subs	r2, r2, r3
   28736:	4094      	lsls	r4, r2
   28738:	2200      	movs	r2, #0
   2873a:	0324      	lsls	r4, r4, #12
   2873c:	055b      	lsls	r3, r3, #21
   2873e:	0b24      	lsrs	r4, r4, #12
   28740:	0d5b      	lsrs	r3, r3, #21
   28742:	2100      	movs	r1, #0
   28744:	0010      	movs	r0, r2
   28746:	0324      	lsls	r4, r4, #12
   28748:	0d0a      	lsrs	r2, r1, #20
   2874a:	0b24      	lsrs	r4, r4, #12
   2874c:	0512      	lsls	r2, r2, #20
   2874e:	4322      	orrs	r2, r4
   28750:	4c0d      	ldr	r4, [pc, #52]	; (28788 <__aeabi_ui2d+0x6c>)
   28752:	051b      	lsls	r3, r3, #20
   28754:	4022      	ands	r2, r4
   28756:	4313      	orrs	r3, r2
   28758:	005b      	lsls	r3, r3, #1
   2875a:	0859      	lsrs	r1, r3, #1
   2875c:	bd10      	pop	{r4, pc}
   2875e:	0021      	movs	r1, r4
   28760:	4091      	lsls	r1, r2
   28762:	000a      	movs	r2, r1
   28764:	210b      	movs	r1, #11
   28766:	1a08      	subs	r0, r1, r0
   28768:	40c4      	lsrs	r4, r0
   2876a:	055b      	lsls	r3, r3, #21
   2876c:	0324      	lsls	r4, r4, #12
   2876e:	0b24      	lsrs	r4, r4, #12
   28770:	0d5b      	lsrs	r3, r3, #21
   28772:	e7e6      	b.n	28742 <__aeabi_ui2d+0x26>
   28774:	2300      	movs	r3, #0
   28776:	2400      	movs	r4, #0
   28778:	2200      	movs	r2, #0
   2877a:	e7e2      	b.n	28742 <__aeabi_ui2d+0x26>
   2877c:	0000041e 	.word	0x0000041e
   28780:	00000433 	.word	0x00000433
   28784:	00000413 	.word	0x00000413
   28788:	800fffff 	.word	0x800fffff

0002878c <__aeabi_f2d>:
   2878c:	0041      	lsls	r1, r0, #1
   2878e:	0e09      	lsrs	r1, r1, #24
   28790:	1c4b      	adds	r3, r1, #1
   28792:	b570      	push	{r4, r5, r6, lr}
   28794:	b2db      	uxtb	r3, r3
   28796:	0246      	lsls	r6, r0, #9
   28798:	0a75      	lsrs	r5, r6, #9
   2879a:	0fc4      	lsrs	r4, r0, #31
   2879c:	2b01      	cmp	r3, #1
   2879e:	dd14      	ble.n	287ca <__aeabi_f2d+0x3e>
   287a0:	23e0      	movs	r3, #224	; 0xe0
   287a2:	009b      	lsls	r3, r3, #2
   287a4:	076d      	lsls	r5, r5, #29
   287a6:	0b36      	lsrs	r6, r6, #12
   287a8:	18cb      	adds	r3, r1, r3
   287aa:	2100      	movs	r1, #0
   287ac:	0d0a      	lsrs	r2, r1, #20
   287ae:	0028      	movs	r0, r5
   287b0:	0512      	lsls	r2, r2, #20
   287b2:	4d1c      	ldr	r5, [pc, #112]	; (28824 <__aeabi_f2d+0x98>)
   287b4:	4332      	orrs	r2, r6
   287b6:	055b      	lsls	r3, r3, #21
   287b8:	402a      	ands	r2, r5
   287ba:	085b      	lsrs	r3, r3, #1
   287bc:	4313      	orrs	r3, r2
   287be:	005b      	lsls	r3, r3, #1
   287c0:	07e4      	lsls	r4, r4, #31
   287c2:	085b      	lsrs	r3, r3, #1
   287c4:	4323      	orrs	r3, r4
   287c6:	0019      	movs	r1, r3
   287c8:	bd70      	pop	{r4, r5, r6, pc}
   287ca:	2900      	cmp	r1, #0
   287cc:	d114      	bne.n	287f8 <__aeabi_f2d+0x6c>
   287ce:	2d00      	cmp	r5, #0
   287d0:	d01e      	beq.n	28810 <__aeabi_f2d+0x84>
   287d2:	0028      	movs	r0, r5
   287d4:	f7fd faa0 	bl	25d18 <__clzsi2>
   287d8:	280a      	cmp	r0, #10
   287da:	dc1c      	bgt.n	28816 <__aeabi_f2d+0x8a>
   287dc:	230b      	movs	r3, #11
   287de:	002a      	movs	r2, r5
   287e0:	1a1b      	subs	r3, r3, r0
   287e2:	40da      	lsrs	r2, r3
   287e4:	0003      	movs	r3, r0
   287e6:	3315      	adds	r3, #21
   287e8:	409d      	lsls	r5, r3
   287ea:	4b0f      	ldr	r3, [pc, #60]	; (28828 <__aeabi_f2d+0x9c>)
   287ec:	0312      	lsls	r2, r2, #12
   287ee:	1a1b      	subs	r3, r3, r0
   287f0:	055b      	lsls	r3, r3, #21
   287f2:	0b16      	lsrs	r6, r2, #12
   287f4:	0d5b      	lsrs	r3, r3, #21
   287f6:	e7d8      	b.n	287aa <__aeabi_f2d+0x1e>
   287f8:	2d00      	cmp	r5, #0
   287fa:	d006      	beq.n	2880a <__aeabi_f2d+0x7e>
   287fc:	0b32      	lsrs	r2, r6, #12
   287fe:	2680      	movs	r6, #128	; 0x80
   28800:	0336      	lsls	r6, r6, #12
   28802:	076d      	lsls	r5, r5, #29
   28804:	4316      	orrs	r6, r2
   28806:	4b09      	ldr	r3, [pc, #36]	; (2882c <__aeabi_f2d+0xa0>)
   28808:	e7cf      	b.n	287aa <__aeabi_f2d+0x1e>
   2880a:	4b08      	ldr	r3, [pc, #32]	; (2882c <__aeabi_f2d+0xa0>)
   2880c:	2600      	movs	r6, #0
   2880e:	e7cc      	b.n	287aa <__aeabi_f2d+0x1e>
   28810:	2300      	movs	r3, #0
   28812:	2600      	movs	r6, #0
   28814:	e7c9      	b.n	287aa <__aeabi_f2d+0x1e>
   28816:	0003      	movs	r3, r0
   28818:	002a      	movs	r2, r5
   2881a:	3b0b      	subs	r3, #11
   2881c:	409a      	lsls	r2, r3
   2881e:	2500      	movs	r5, #0
   28820:	e7e3      	b.n	287ea <__aeabi_f2d+0x5e>
   28822:	46c0      	nop			; (mov r8, r8)
   28824:	800fffff 	.word	0x800fffff
   28828:	00000389 	.word	0x00000389
   2882c:	000007ff 	.word	0x000007ff

00028830 <__aeabi_d2f>:
   28830:	b5f0      	push	{r4, r5, r6, r7, lr}
   28832:	004c      	lsls	r4, r1, #1
   28834:	0d64      	lsrs	r4, r4, #21
   28836:	030b      	lsls	r3, r1, #12
   28838:	1c62      	adds	r2, r4, #1
   2883a:	0f45      	lsrs	r5, r0, #29
   2883c:	0a5b      	lsrs	r3, r3, #9
   2883e:	0552      	lsls	r2, r2, #21
   28840:	432b      	orrs	r3, r5
   28842:	0fc9      	lsrs	r1, r1, #31
   28844:	00c5      	lsls	r5, r0, #3
   28846:	0d52      	lsrs	r2, r2, #21
   28848:	2a01      	cmp	r2, #1
   2884a:	dd28      	ble.n	2889e <__aeabi_d2f+0x6e>
   2884c:	4a3a      	ldr	r2, [pc, #232]	; (28938 <__aeabi_d2f+0x108>)
   2884e:	18a6      	adds	r6, r4, r2
   28850:	2efe      	cmp	r6, #254	; 0xfe
   28852:	dc1b      	bgt.n	2888c <__aeabi_d2f+0x5c>
   28854:	2e00      	cmp	r6, #0
   28856:	dd3e      	ble.n	288d6 <__aeabi_d2f+0xa6>
   28858:	0180      	lsls	r0, r0, #6
   2885a:	0002      	movs	r2, r0
   2885c:	1e50      	subs	r0, r2, #1
   2885e:	4182      	sbcs	r2, r0
   28860:	0f6d      	lsrs	r5, r5, #29
   28862:	432a      	orrs	r2, r5
   28864:	00db      	lsls	r3, r3, #3
   28866:	4313      	orrs	r3, r2
   28868:	075a      	lsls	r2, r3, #29
   2886a:	d004      	beq.n	28876 <__aeabi_d2f+0x46>
   2886c:	220f      	movs	r2, #15
   2886e:	401a      	ands	r2, r3
   28870:	2a04      	cmp	r2, #4
   28872:	d000      	beq.n	28876 <__aeabi_d2f+0x46>
   28874:	3304      	adds	r3, #4
   28876:	2280      	movs	r2, #128	; 0x80
   28878:	04d2      	lsls	r2, r2, #19
   2887a:	401a      	ands	r2, r3
   2887c:	d05a      	beq.n	28934 <__aeabi_d2f+0x104>
   2887e:	3601      	adds	r6, #1
   28880:	2eff      	cmp	r6, #255	; 0xff
   28882:	d003      	beq.n	2888c <__aeabi_d2f+0x5c>
   28884:	019b      	lsls	r3, r3, #6
   28886:	0a5b      	lsrs	r3, r3, #9
   28888:	b2f4      	uxtb	r4, r6
   2888a:	e001      	b.n	28890 <__aeabi_d2f+0x60>
   2888c:	24ff      	movs	r4, #255	; 0xff
   2888e:	2300      	movs	r3, #0
   28890:	0258      	lsls	r0, r3, #9
   28892:	05e4      	lsls	r4, r4, #23
   28894:	0a40      	lsrs	r0, r0, #9
   28896:	07c9      	lsls	r1, r1, #31
   28898:	4320      	orrs	r0, r4
   2889a:	4308      	orrs	r0, r1
   2889c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2889e:	2c00      	cmp	r4, #0
   288a0:	d007      	beq.n	288b2 <__aeabi_d2f+0x82>
   288a2:	431d      	orrs	r5, r3
   288a4:	d0f2      	beq.n	2888c <__aeabi_d2f+0x5c>
   288a6:	2080      	movs	r0, #128	; 0x80
   288a8:	00db      	lsls	r3, r3, #3
   288aa:	0480      	lsls	r0, r0, #18
   288ac:	4303      	orrs	r3, r0
   288ae:	26ff      	movs	r6, #255	; 0xff
   288b0:	e7da      	b.n	28868 <__aeabi_d2f+0x38>
   288b2:	432b      	orrs	r3, r5
   288b4:	d003      	beq.n	288be <__aeabi_d2f+0x8e>
   288b6:	2305      	movs	r3, #5
   288b8:	08db      	lsrs	r3, r3, #3
   288ba:	2cff      	cmp	r4, #255	; 0xff
   288bc:	d003      	beq.n	288c6 <__aeabi_d2f+0x96>
   288be:	025b      	lsls	r3, r3, #9
   288c0:	0a5b      	lsrs	r3, r3, #9
   288c2:	b2e4      	uxtb	r4, r4
   288c4:	e7e4      	b.n	28890 <__aeabi_d2f+0x60>
   288c6:	2b00      	cmp	r3, #0
   288c8:	d032      	beq.n	28930 <__aeabi_d2f+0x100>
   288ca:	2080      	movs	r0, #128	; 0x80
   288cc:	03c0      	lsls	r0, r0, #15
   288ce:	4303      	orrs	r3, r0
   288d0:	025b      	lsls	r3, r3, #9
   288d2:	0a5b      	lsrs	r3, r3, #9
   288d4:	e7dc      	b.n	28890 <__aeabi_d2f+0x60>
   288d6:	0032      	movs	r2, r6
   288d8:	3217      	adds	r2, #23
   288da:	db14      	blt.n	28906 <__aeabi_d2f+0xd6>
   288dc:	2280      	movs	r2, #128	; 0x80
   288de:	271e      	movs	r7, #30
   288e0:	0412      	lsls	r2, r2, #16
   288e2:	4313      	orrs	r3, r2
   288e4:	1bbf      	subs	r7, r7, r6
   288e6:	2f1f      	cmp	r7, #31
   288e8:	dc0f      	bgt.n	2890a <__aeabi_d2f+0xda>
   288ea:	4a14      	ldr	r2, [pc, #80]	; (2893c <__aeabi_d2f+0x10c>)
   288ec:	4694      	mov	ip, r2
   288ee:	4464      	add	r4, ip
   288f0:	002a      	movs	r2, r5
   288f2:	40a5      	lsls	r5, r4
   288f4:	002e      	movs	r6, r5
   288f6:	40a3      	lsls	r3, r4
   288f8:	1e75      	subs	r5, r6, #1
   288fa:	41ae      	sbcs	r6, r5
   288fc:	40fa      	lsrs	r2, r7
   288fe:	4333      	orrs	r3, r6
   28900:	4313      	orrs	r3, r2
   28902:	2600      	movs	r6, #0
   28904:	e7b0      	b.n	28868 <__aeabi_d2f+0x38>
   28906:	2400      	movs	r4, #0
   28908:	e7d5      	b.n	288b6 <__aeabi_d2f+0x86>
   2890a:	2202      	movs	r2, #2
   2890c:	4252      	negs	r2, r2
   2890e:	1b96      	subs	r6, r2, r6
   28910:	001a      	movs	r2, r3
   28912:	40f2      	lsrs	r2, r6
   28914:	2f20      	cmp	r7, #32
   28916:	d009      	beq.n	2892c <__aeabi_d2f+0xfc>
   28918:	4809      	ldr	r0, [pc, #36]	; (28940 <__aeabi_d2f+0x110>)
   2891a:	4684      	mov	ip, r0
   2891c:	4464      	add	r4, ip
   2891e:	40a3      	lsls	r3, r4
   28920:	432b      	orrs	r3, r5
   28922:	1e5d      	subs	r5, r3, #1
   28924:	41ab      	sbcs	r3, r5
   28926:	2600      	movs	r6, #0
   28928:	4313      	orrs	r3, r2
   2892a:	e79d      	b.n	28868 <__aeabi_d2f+0x38>
   2892c:	2300      	movs	r3, #0
   2892e:	e7f7      	b.n	28920 <__aeabi_d2f+0xf0>
   28930:	2300      	movs	r3, #0
   28932:	e7ad      	b.n	28890 <__aeabi_d2f+0x60>
   28934:	0034      	movs	r4, r6
   28936:	e7bf      	b.n	288b8 <__aeabi_d2f+0x88>
   28938:	fffffc80 	.word	0xfffffc80
   2893c:	fffffc82 	.word	0xfffffc82
   28940:	fffffca2 	.word	0xfffffca2

00028944 <__errno>:
   28944:	4b01      	ldr	r3, [pc, #4]	; (2894c <__errno+0x8>)
   28946:	6818      	ldr	r0, [r3, #0]
   28948:	4770      	bx	lr
   2894a:	46c0      	nop			; (mov r8, r8)
   2894c:	200001e0 	.word	0x200001e0

00028950 <__libc_init_array>:
   28950:	b570      	push	{r4, r5, r6, lr}
   28952:	4e0d      	ldr	r6, [pc, #52]	; (28988 <__libc_init_array+0x38>)
   28954:	4d0d      	ldr	r5, [pc, #52]	; (2898c <__libc_init_array+0x3c>)
   28956:	2400      	movs	r4, #0
   28958:	1bad      	subs	r5, r5, r6
   2895a:	10ad      	asrs	r5, r5, #2
   2895c:	d005      	beq.n	2896a <__libc_init_array+0x1a>
   2895e:	00a3      	lsls	r3, r4, #2
   28960:	58f3      	ldr	r3, [r6, r3]
   28962:	3401      	adds	r4, #1
   28964:	4798      	blx	r3
   28966:	42a5      	cmp	r5, r4
   28968:	d1f9      	bne.n	2895e <__libc_init_array+0xe>
   2896a:	f007 fae9 	bl	2ff40 <_init>
   2896e:	4e08      	ldr	r6, [pc, #32]	; (28990 <__libc_init_array+0x40>)
   28970:	4d08      	ldr	r5, [pc, #32]	; (28994 <__libc_init_array+0x44>)
   28972:	2400      	movs	r4, #0
   28974:	1bad      	subs	r5, r5, r6
   28976:	10ad      	asrs	r5, r5, #2
   28978:	d005      	beq.n	28986 <__libc_init_array+0x36>
   2897a:	00a3      	lsls	r3, r4, #2
   2897c:	58f3      	ldr	r3, [r6, r3]
   2897e:	3401      	adds	r4, #1
   28980:	4798      	blx	r3
   28982:	42a5      	cmp	r5, r4
   28984:	d1f9      	bne.n	2897a <__libc_init_array+0x2a>
   28986:	bd70      	pop	{r4, r5, r6, pc}
   28988:	0002ff4c 	.word	0x0002ff4c
   2898c:	0002ff4c 	.word	0x0002ff4c
   28990:	0002ff4c 	.word	0x0002ff4c
   28994:	0002ff54 	.word	0x0002ff54

00028998 <memcpy>:
   28998:	b5f0      	push	{r4, r5, r6, r7, lr}
   2899a:	0005      	movs	r5, r0
   2899c:	2a0f      	cmp	r2, #15
   2899e:	d92f      	bls.n	28a00 <memcpy+0x68>
   289a0:	000b      	movs	r3, r1
   289a2:	4303      	orrs	r3, r0
   289a4:	079b      	lsls	r3, r3, #30
   289a6:	d134      	bne.n	28a12 <memcpy+0x7a>
   289a8:	0016      	movs	r6, r2
   289aa:	000c      	movs	r4, r1
   289ac:	0003      	movs	r3, r0
   289ae:	3e10      	subs	r6, #16
   289b0:	0935      	lsrs	r5, r6, #4
   289b2:	3501      	adds	r5, #1
   289b4:	012d      	lsls	r5, r5, #4
   289b6:	1945      	adds	r5, r0, r5
   289b8:	6827      	ldr	r7, [r4, #0]
   289ba:	601f      	str	r7, [r3, #0]
   289bc:	6867      	ldr	r7, [r4, #4]
   289be:	605f      	str	r7, [r3, #4]
   289c0:	68a7      	ldr	r7, [r4, #8]
   289c2:	609f      	str	r7, [r3, #8]
   289c4:	68e7      	ldr	r7, [r4, #12]
   289c6:	3410      	adds	r4, #16
   289c8:	60df      	str	r7, [r3, #12]
   289ca:	3310      	adds	r3, #16
   289cc:	429d      	cmp	r5, r3
   289ce:	d1f3      	bne.n	289b8 <memcpy+0x20>
   289d0:	230f      	movs	r3, #15
   289d2:	439e      	bics	r6, r3
   289d4:	3610      	adds	r6, #16
   289d6:	1985      	adds	r5, r0, r6
   289d8:	1989      	adds	r1, r1, r6
   289da:	4013      	ands	r3, r2
   289dc:	2b03      	cmp	r3, #3
   289de:	d91a      	bls.n	28a16 <memcpy+0x7e>
   289e0:	1f1e      	subs	r6, r3, #4
   289e2:	2300      	movs	r3, #0
   289e4:	08b4      	lsrs	r4, r6, #2
   289e6:	3401      	adds	r4, #1
   289e8:	00a4      	lsls	r4, r4, #2
   289ea:	58cf      	ldr	r7, [r1, r3]
   289ec:	50ef      	str	r7, [r5, r3]
   289ee:	3304      	adds	r3, #4
   289f0:	42a3      	cmp	r3, r4
   289f2:	d1fa      	bne.n	289ea <memcpy+0x52>
   289f4:	2403      	movs	r4, #3
   289f6:	43a6      	bics	r6, r4
   289f8:	1d33      	adds	r3, r6, #4
   289fa:	4022      	ands	r2, r4
   289fc:	18c9      	adds	r1, r1, r3
   289fe:	18ed      	adds	r5, r5, r3
   28a00:	2a00      	cmp	r2, #0
   28a02:	d005      	beq.n	28a10 <memcpy+0x78>
   28a04:	2300      	movs	r3, #0
   28a06:	5ccc      	ldrb	r4, [r1, r3]
   28a08:	54ec      	strb	r4, [r5, r3]
   28a0a:	3301      	adds	r3, #1
   28a0c:	4293      	cmp	r3, r2
   28a0e:	d1fa      	bne.n	28a06 <memcpy+0x6e>
   28a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28a12:	0005      	movs	r5, r0
   28a14:	e7f6      	b.n	28a04 <memcpy+0x6c>
   28a16:	001a      	movs	r2, r3
   28a18:	e7f2      	b.n	28a00 <memcpy+0x68>
   28a1a:	46c0      	nop			; (mov r8, r8)

00028a1c <memset>:
   28a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   28a1e:	0783      	lsls	r3, r0, #30
   28a20:	d043      	beq.n	28aaa <memset+0x8e>
   28a22:	1e54      	subs	r4, r2, #1
   28a24:	2a00      	cmp	r2, #0
   28a26:	d03f      	beq.n	28aa8 <memset+0x8c>
   28a28:	b2ce      	uxtb	r6, r1
   28a2a:	0002      	movs	r2, r0
   28a2c:	2503      	movs	r5, #3
   28a2e:	e002      	b.n	28a36 <memset+0x1a>
   28a30:	001a      	movs	r2, r3
   28a32:	3c01      	subs	r4, #1
   28a34:	d338      	bcc.n	28aa8 <memset+0x8c>
   28a36:	1c53      	adds	r3, r2, #1
   28a38:	7016      	strb	r6, [r2, #0]
   28a3a:	422b      	tst	r3, r5
   28a3c:	d1f8      	bne.n	28a30 <memset+0x14>
   28a3e:	2c03      	cmp	r4, #3
   28a40:	d92a      	bls.n	28a98 <memset+0x7c>
   28a42:	22ff      	movs	r2, #255	; 0xff
   28a44:	400a      	ands	r2, r1
   28a46:	0215      	lsls	r5, r2, #8
   28a48:	4315      	orrs	r5, r2
   28a4a:	042a      	lsls	r2, r5, #16
   28a4c:	4315      	orrs	r5, r2
   28a4e:	2c0f      	cmp	r4, #15
   28a50:	d914      	bls.n	28a7c <memset+0x60>
   28a52:	0027      	movs	r7, r4
   28a54:	001a      	movs	r2, r3
   28a56:	3f10      	subs	r7, #16
   28a58:	093e      	lsrs	r6, r7, #4
   28a5a:	3601      	adds	r6, #1
   28a5c:	0136      	lsls	r6, r6, #4
   28a5e:	199e      	adds	r6, r3, r6
   28a60:	6015      	str	r5, [r2, #0]
   28a62:	6055      	str	r5, [r2, #4]
   28a64:	6095      	str	r5, [r2, #8]
   28a66:	60d5      	str	r5, [r2, #12]
   28a68:	3210      	adds	r2, #16
   28a6a:	4296      	cmp	r6, r2
   28a6c:	d1f8      	bne.n	28a60 <memset+0x44>
   28a6e:	220f      	movs	r2, #15
   28a70:	4397      	bics	r7, r2
   28a72:	3710      	adds	r7, #16
   28a74:	19db      	adds	r3, r3, r7
   28a76:	4014      	ands	r4, r2
   28a78:	2c03      	cmp	r4, #3
   28a7a:	d90d      	bls.n	28a98 <memset+0x7c>
   28a7c:	001a      	movs	r2, r3
   28a7e:	1f27      	subs	r7, r4, #4
   28a80:	08be      	lsrs	r6, r7, #2
   28a82:	3601      	adds	r6, #1
   28a84:	00b6      	lsls	r6, r6, #2
   28a86:	199e      	adds	r6, r3, r6
   28a88:	c220      	stmia	r2!, {r5}
   28a8a:	42b2      	cmp	r2, r6
   28a8c:	d1fc      	bne.n	28a88 <memset+0x6c>
   28a8e:	2203      	movs	r2, #3
   28a90:	4397      	bics	r7, r2
   28a92:	3704      	adds	r7, #4
   28a94:	19db      	adds	r3, r3, r7
   28a96:	4014      	ands	r4, r2
   28a98:	2c00      	cmp	r4, #0
   28a9a:	d005      	beq.n	28aa8 <memset+0x8c>
   28a9c:	b2c9      	uxtb	r1, r1
   28a9e:	191c      	adds	r4, r3, r4
   28aa0:	7019      	strb	r1, [r3, #0]
   28aa2:	3301      	adds	r3, #1
   28aa4:	429c      	cmp	r4, r3
   28aa6:	d1fb      	bne.n	28aa0 <memset+0x84>
   28aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28aaa:	0014      	movs	r4, r2
   28aac:	0003      	movs	r3, r0
   28aae:	e7c6      	b.n	28a3e <memset+0x22>

00028ab0 <sprintf>:
   28ab0:	b40e      	push	{r1, r2, r3}
   28ab2:	b510      	push	{r4, lr}
   28ab4:	b09d      	sub	sp, #116	; 0x74
   28ab6:	a902      	add	r1, sp, #8
   28ab8:	9002      	str	r0, [sp, #8]
   28aba:	6108      	str	r0, [r1, #16]
   28abc:	480b      	ldr	r0, [pc, #44]	; (28aec <sprintf+0x3c>)
   28abe:	2482      	movs	r4, #130	; 0x82
   28ac0:	6088      	str	r0, [r1, #8]
   28ac2:	6148      	str	r0, [r1, #20]
   28ac4:	2001      	movs	r0, #1
   28ac6:	4240      	negs	r0, r0
   28ac8:	ab1f      	add	r3, sp, #124	; 0x7c
   28aca:	81c8      	strh	r0, [r1, #14]
   28acc:	4808      	ldr	r0, [pc, #32]	; (28af0 <sprintf+0x40>)
   28ace:	cb04      	ldmia	r3!, {r2}
   28ad0:	00a4      	lsls	r4, r4, #2
   28ad2:	6800      	ldr	r0, [r0, #0]
   28ad4:	9301      	str	r3, [sp, #4]
   28ad6:	818c      	strh	r4, [r1, #12]
   28ad8:	f000 fbbe 	bl	29258 <_svfprintf_r>
   28adc:	2300      	movs	r3, #0
   28ade:	9a02      	ldr	r2, [sp, #8]
   28ae0:	7013      	strb	r3, [r2, #0]
   28ae2:	b01d      	add	sp, #116	; 0x74
   28ae4:	bc10      	pop	{r4}
   28ae6:	bc08      	pop	{r3}
   28ae8:	b003      	add	sp, #12
   28aea:	4718      	bx	r3
   28aec:	7fffffff 	.word	0x7fffffff
   28af0:	200001e0 	.word	0x200001e0

00028af4 <stpcpy>:
   28af4:	000b      	movs	r3, r1
   28af6:	4303      	orrs	r3, r0
   28af8:	b510      	push	{r4, lr}
   28afa:	079b      	lsls	r3, r3, #30
   28afc:	d10f      	bne.n	28b1e <stpcpy+0x2a>
   28afe:	680b      	ldr	r3, [r1, #0]
   28b00:	4a0b      	ldr	r2, [pc, #44]	; (28b30 <stpcpy+0x3c>)
   28b02:	4c0c      	ldr	r4, [pc, #48]	; (28b34 <stpcpy+0x40>)
   28b04:	189a      	adds	r2, r3, r2
   28b06:	439a      	bics	r2, r3
   28b08:	4222      	tst	r2, r4
   28b0a:	d108      	bne.n	28b1e <stpcpy+0x2a>
   28b0c:	3104      	adds	r1, #4
   28b0e:	6003      	str	r3, [r0, #0]
   28b10:	4a07      	ldr	r2, [pc, #28]	; (28b30 <stpcpy+0x3c>)
   28b12:	680b      	ldr	r3, [r1, #0]
   28b14:	3004      	adds	r0, #4
   28b16:	189a      	adds	r2, r3, r2
   28b18:	439a      	bics	r2, r3
   28b1a:	4222      	tst	r2, r4
   28b1c:	d0f6      	beq.n	28b0c <stpcpy+0x18>
   28b1e:	0003      	movs	r3, r0
   28b20:	780a      	ldrb	r2, [r1, #0]
   28b22:	0018      	movs	r0, r3
   28b24:	701a      	strb	r2, [r3, #0]
   28b26:	3101      	adds	r1, #1
   28b28:	3301      	adds	r3, #1
   28b2a:	2a00      	cmp	r2, #0
   28b2c:	d1f8      	bne.n	28b20 <stpcpy+0x2c>
   28b2e:	bd10      	pop	{r4, pc}
   28b30:	fefefeff 	.word	0xfefefeff
   28b34:	80808080 	.word	0x80808080

00028b38 <strcat>:
   28b38:	b570      	push	{r4, r5, r6, lr}
   28b3a:	0005      	movs	r5, r0
   28b3c:	0783      	lsls	r3, r0, #30
   28b3e:	d116      	bne.n	28b6e <strcat+0x36>
   28b40:	6802      	ldr	r2, [r0, #0]
   28b42:	4b0e      	ldr	r3, [pc, #56]	; (28b7c <strcat+0x44>)
   28b44:	4c0e      	ldr	r4, [pc, #56]	; (28b80 <strcat+0x48>)
   28b46:	18d3      	adds	r3, r2, r3
   28b48:	4393      	bics	r3, r2
   28b4a:	4223      	tst	r3, r4
   28b4c:	d10f      	bne.n	28b6e <strcat+0x36>
   28b4e:	3004      	adds	r0, #4
   28b50:	6802      	ldr	r2, [r0, #0]
   28b52:	4b0a      	ldr	r3, [pc, #40]	; (28b7c <strcat+0x44>)
   28b54:	18d3      	adds	r3, r2, r3
   28b56:	4393      	bics	r3, r2
   28b58:	4223      	tst	r3, r4
   28b5a:	d108      	bne.n	28b6e <strcat+0x36>
   28b5c:	3004      	adds	r0, #4
   28b5e:	6802      	ldr	r2, [r0, #0]
   28b60:	4b06      	ldr	r3, [pc, #24]	; (28b7c <strcat+0x44>)
   28b62:	18d3      	adds	r3, r2, r3
   28b64:	4393      	bics	r3, r2
   28b66:	4223      	tst	r3, r4
   28b68:	d0f1      	beq.n	28b4e <strcat+0x16>
   28b6a:	e000      	b.n	28b6e <strcat+0x36>
   28b6c:	3001      	adds	r0, #1
   28b6e:	7803      	ldrb	r3, [r0, #0]
   28b70:	2b00      	cmp	r3, #0
   28b72:	d1fb      	bne.n	28b6c <strcat+0x34>
   28b74:	f000 f84a 	bl	28c0c <strcpy>
   28b78:	0028      	movs	r0, r5
   28b7a:	bd70      	pop	{r4, r5, r6, pc}
   28b7c:	fefefeff 	.word	0xfefefeff
   28b80:	80808080 	.word	0x80808080

00028b84 <strcmp>:
   28b84:	4602      	mov	r2, r0
   28b86:	b570      	push	{r4, r5, r6, lr}
   28b88:	430a      	orrs	r2, r1
   28b8a:	0792      	lsls	r2, r2, #30
   28b8c:	d12a      	bne.n	28be4 <strcmp+0x60>
   28b8e:	4d1e      	ldr	r5, [pc, #120]	; (28c08 <strcmp+0x84>)
   28b90:	01ee      	lsls	r6, r5, #7
   28b92:	c804      	ldmia	r0!, {r2}
   28b94:	c908      	ldmia	r1!, {r3}
   28b96:	1b54      	subs	r4, r2, r5
   28b98:	4394      	bics	r4, r2
   28b9a:	4034      	ands	r4, r6
   28b9c:	d017      	beq.n	28bce <strcmp+0x4a>
   28b9e:	b2d0      	uxtb	r0, r2
   28ba0:	b2d9      	uxtb	r1, r3
   28ba2:	1a40      	subs	r0, r0, r1
   28ba4:	0621      	lsls	r1, r4, #24
   28ba6:	4301      	orrs	r1, r0
   28ba8:	d110      	bne.n	28bcc <strcmp+0x48>
   28baa:	b290      	uxth	r0, r2
   28bac:	b299      	uxth	r1, r3
   28bae:	1a40      	subs	r0, r0, r1
   28bb0:	0421      	lsls	r1, r4, #16
   28bb2:	4301      	orrs	r1, r0
   28bb4:	d10a      	bne.n	28bcc <strcmp+0x48>
   28bb6:	0210      	lsls	r0, r2, #8
   28bb8:	0219      	lsls	r1, r3, #8
   28bba:	0a00      	lsrs	r0, r0, #8
   28bbc:	0a09      	lsrs	r1, r1, #8
   28bbe:	1a40      	subs	r0, r0, r1
   28bc0:	0221      	lsls	r1, r4, #8
   28bc2:	4301      	orrs	r1, r0
   28bc4:	d102      	bne.n	28bcc <strcmp+0x48>
   28bc6:	0e10      	lsrs	r0, r2, #24
   28bc8:	0e19      	lsrs	r1, r3, #24
   28bca:	1a40      	subs	r0, r0, r1
   28bcc:	bd70      	pop	{r4, r5, r6, pc}
   28bce:	429a      	cmp	r2, r3
   28bd0:	d0df      	beq.n	28b92 <strcmp+0xe>
   28bd2:	ba10      	rev	r0, r2
   28bd4:	ba19      	rev	r1, r3
   28bd6:	4288      	cmp	r0, r1
   28bd8:	d901      	bls.n	28bde <strcmp+0x5a>
   28bda:	2001      	movs	r0, #1
   28bdc:	bd70      	pop	{r4, r5, r6, pc}
   28bde:	2000      	movs	r0, #0
   28be0:	43c0      	mvns	r0, r0
   28be2:	bd70      	pop	{r4, r5, r6, pc}
   28be4:	7802      	ldrb	r2, [r0, #0]
   28be6:	780b      	ldrb	r3, [r1, #0]
   28be8:	3001      	adds	r0, #1
   28bea:	3101      	adds	r1, #1
   28bec:	2a00      	cmp	r2, #0
   28bee:	d009      	beq.n	28c04 <strcmp+0x80>
   28bf0:	429a      	cmp	r2, r3
   28bf2:	d107      	bne.n	28c04 <strcmp+0x80>
   28bf4:	7802      	ldrb	r2, [r0, #0]
   28bf6:	780b      	ldrb	r3, [r1, #0]
   28bf8:	3001      	adds	r0, #1
   28bfa:	3101      	adds	r1, #1
   28bfc:	2a00      	cmp	r2, #0
   28bfe:	d001      	beq.n	28c04 <strcmp+0x80>
   28c00:	429a      	cmp	r2, r3
   28c02:	d0ef      	beq.n	28be4 <strcmp+0x60>
   28c04:	1ad0      	subs	r0, r2, r3
   28c06:	bd70      	pop	{r4, r5, r6, pc}
   28c08:	01010101 	.word	0x01010101

00028c0c <strcpy>:
   28c0c:	1c03      	adds	r3, r0, #0
   28c0e:	780a      	ldrb	r2, [r1, #0]
   28c10:	3101      	adds	r1, #1
   28c12:	701a      	strb	r2, [r3, #0]
   28c14:	3301      	adds	r3, #1
   28c16:	2a00      	cmp	r2, #0
   28c18:	d1f9      	bne.n	28c0e <strcpy+0x2>
   28c1a:	4770      	bx	lr

00028c1c <strlen>:
   28c1c:	b510      	push	{r4, lr}
   28c1e:	0783      	lsls	r3, r0, #30
   28c20:	d025      	beq.n	28c6e <strlen+0x52>
   28c22:	7803      	ldrb	r3, [r0, #0]
   28c24:	2b00      	cmp	r3, #0
   28c26:	d024      	beq.n	28c72 <strlen+0x56>
   28c28:	0003      	movs	r3, r0
   28c2a:	2103      	movs	r1, #3
   28c2c:	e002      	b.n	28c34 <strlen+0x18>
   28c2e:	781a      	ldrb	r2, [r3, #0]
   28c30:	2a00      	cmp	r2, #0
   28c32:	d01a      	beq.n	28c6a <strlen+0x4e>
   28c34:	3301      	adds	r3, #1
   28c36:	420b      	tst	r3, r1
   28c38:	d1f9      	bne.n	28c2e <strlen+0x12>
   28c3a:	6819      	ldr	r1, [r3, #0]
   28c3c:	4a0e      	ldr	r2, [pc, #56]	; (28c78 <strlen+0x5c>)
   28c3e:	4c0f      	ldr	r4, [pc, #60]	; (28c7c <strlen+0x60>)
   28c40:	188a      	adds	r2, r1, r2
   28c42:	438a      	bics	r2, r1
   28c44:	4222      	tst	r2, r4
   28c46:	d106      	bne.n	28c56 <strlen+0x3a>
   28c48:	3304      	adds	r3, #4
   28c4a:	6819      	ldr	r1, [r3, #0]
   28c4c:	4a0a      	ldr	r2, [pc, #40]	; (28c78 <strlen+0x5c>)
   28c4e:	188a      	adds	r2, r1, r2
   28c50:	438a      	bics	r2, r1
   28c52:	4222      	tst	r2, r4
   28c54:	d0f8      	beq.n	28c48 <strlen+0x2c>
   28c56:	001a      	movs	r2, r3
   28c58:	781b      	ldrb	r3, [r3, #0]
   28c5a:	2b00      	cmp	r3, #0
   28c5c:	d003      	beq.n	28c66 <strlen+0x4a>
   28c5e:	3201      	adds	r2, #1
   28c60:	7811      	ldrb	r1, [r2, #0]
   28c62:	2900      	cmp	r1, #0
   28c64:	d1fb      	bne.n	28c5e <strlen+0x42>
   28c66:	1a10      	subs	r0, r2, r0
   28c68:	bd10      	pop	{r4, pc}
   28c6a:	1a18      	subs	r0, r3, r0
   28c6c:	e7fc      	b.n	28c68 <strlen+0x4c>
   28c6e:	0003      	movs	r3, r0
   28c70:	e7e3      	b.n	28c3a <strlen+0x1e>
   28c72:	2000      	movs	r0, #0
   28c74:	e7f8      	b.n	28c68 <strlen+0x4c>
   28c76:	46c0      	nop			; (mov r8, r8)
   28c78:	fefefeff 	.word	0xfefefeff
   28c7c:	80808080 	.word	0x80808080

00028c80 <strncmp>:
   28c80:	b530      	push	{r4, r5, lr}
   28c82:	2400      	movs	r4, #0
   28c84:	2a00      	cmp	r2, #0
   28c86:	d039      	beq.n	28cfc <strncmp+0x7c>
   28c88:	0003      	movs	r3, r0
   28c8a:	430b      	orrs	r3, r1
   28c8c:	079b      	lsls	r3, r3, #30
   28c8e:	d120      	bne.n	28cd2 <strncmp+0x52>
   28c90:	2a03      	cmp	r2, #3
   28c92:	d91e      	bls.n	28cd2 <strncmp+0x52>
   28c94:	6803      	ldr	r3, [r0, #0]
   28c96:	680d      	ldr	r5, [r1, #0]
   28c98:	42ab      	cmp	r3, r5
   28c9a:	d11a      	bne.n	28cd2 <strncmp+0x52>
   28c9c:	3a04      	subs	r2, #4
   28c9e:	2a00      	cmp	r2, #0
   28ca0:	d02c      	beq.n	28cfc <strncmp+0x7c>
   28ca2:	4d1a      	ldr	r5, [pc, #104]	; (28d0c <strncmp+0x8c>)
   28ca4:	195d      	adds	r5, r3, r5
   28ca6:	439d      	bics	r5, r3
   28ca8:	002b      	movs	r3, r5
   28caa:	4d19      	ldr	r5, [pc, #100]	; (28d10 <strncmp+0x90>)
   28cac:	422b      	tst	r3, r5
   28cae:	d00c      	beq.n	28cca <strncmp+0x4a>
   28cb0:	e024      	b.n	28cfc <strncmp+0x7c>
   28cb2:	6803      	ldr	r3, [r0, #0]
   28cb4:	680c      	ldr	r4, [r1, #0]
   28cb6:	42a3      	cmp	r3, r4
   28cb8:	d10b      	bne.n	28cd2 <strncmp+0x52>
   28cba:	3a04      	subs	r2, #4
   28cbc:	2a00      	cmp	r2, #0
   28cbe:	d01f      	beq.n	28d00 <strncmp+0x80>
   28cc0:	4c12      	ldr	r4, [pc, #72]	; (28d0c <strncmp+0x8c>)
   28cc2:	191c      	adds	r4, r3, r4
   28cc4:	439c      	bics	r4, r3
   28cc6:	422c      	tst	r4, r5
   28cc8:	d11a      	bne.n	28d00 <strncmp+0x80>
   28cca:	3004      	adds	r0, #4
   28ccc:	3104      	adds	r1, #4
   28cce:	2a03      	cmp	r2, #3
   28cd0:	d8ef      	bhi.n	28cb2 <strncmp+0x32>
   28cd2:	7803      	ldrb	r3, [r0, #0]
   28cd4:	780d      	ldrb	r5, [r1, #0]
   28cd6:	3a01      	subs	r2, #1
   28cd8:	429d      	cmp	r5, r3
   28cda:	d113      	bne.n	28d04 <strncmp+0x84>
   28cdc:	2a00      	cmp	r2, #0
   28cde:	d00f      	beq.n	28d00 <strncmp+0x80>
   28ce0:	2d00      	cmp	r5, #0
   28ce2:	d00d      	beq.n	28d00 <strncmp+0x80>
   28ce4:	2301      	movs	r3, #1
   28ce6:	e004      	b.n	28cf2 <strncmp+0x72>
   28ce8:	429a      	cmp	r2, r3
   28cea:	d009      	beq.n	28d00 <strncmp+0x80>
   28cec:	3301      	adds	r3, #1
   28cee:	2c00      	cmp	r4, #0
   28cf0:	d006      	beq.n	28d00 <strncmp+0x80>
   28cf2:	5cc4      	ldrb	r4, [r0, r3]
   28cf4:	5ccd      	ldrb	r5, [r1, r3]
   28cf6:	42ac      	cmp	r4, r5
   28cf8:	d0f6      	beq.n	28ce8 <strncmp+0x68>
   28cfa:	1b64      	subs	r4, r4, r5
   28cfc:	0020      	movs	r0, r4
   28cfe:	bd30      	pop	{r4, r5, pc}
   28d00:	2400      	movs	r4, #0
   28d02:	e7fb      	b.n	28cfc <strncmp+0x7c>
   28d04:	001c      	movs	r4, r3
   28d06:	1b64      	subs	r4, r4, r5
   28d08:	e7f8      	b.n	28cfc <strncmp+0x7c>
   28d0a:	46c0      	nop			; (mov r8, r8)
   28d0c:	fefefeff 	.word	0xfefefeff
   28d10:	80808080 	.word	0x80808080

00028d14 <strncpy>:
   28d14:	000b      	movs	r3, r1
   28d16:	4303      	orrs	r3, r0
   28d18:	b5f0      	push	{r4, r5, r6, r7, lr}
   28d1a:	079b      	lsls	r3, r3, #30
   28d1c:	d101      	bne.n	28d22 <strncpy+0xe>
   28d1e:	2a03      	cmp	r2, #3
   28d20:	d814      	bhi.n	28d4c <strncpy+0x38>
   28d22:	0006      	movs	r6, r0
   28d24:	2a00      	cmp	r2, #0
   28d26:	d010      	beq.n	28d4a <strncpy+0x36>
   28d28:	780c      	ldrb	r4, [r1, #0]
   28d2a:	3a01      	subs	r2, #1
   28d2c:	1c73      	adds	r3, r6, #1
   28d2e:	7034      	strb	r4, [r6, #0]
   28d30:	2c00      	cmp	r4, #0
   28d32:	d01d      	beq.n	28d70 <strncpy+0x5c>
   28d34:	2401      	movs	r4, #1
   28d36:	e006      	b.n	28d46 <strncpy+0x32>
   28d38:	5d0d      	ldrb	r5, [r1, r4]
   28d3a:	3a01      	subs	r2, #1
   28d3c:	5535      	strb	r5, [r6, r4]
   28d3e:	3301      	adds	r3, #1
   28d40:	3401      	adds	r4, #1
   28d42:	2d00      	cmp	r5, #0
   28d44:	d014      	beq.n	28d70 <strncpy+0x5c>
   28d46:	2a00      	cmp	r2, #0
   28d48:	d1f6      	bne.n	28d38 <strncpy+0x24>
   28d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28d4c:	0005      	movs	r5, r0
   28d4e:	4f0d      	ldr	r7, [pc, #52]	; (28d84 <strncpy+0x70>)
   28d50:	e006      	b.n	28d60 <strncpy+0x4c>
   28d52:	3a04      	subs	r2, #4
   28d54:	1d2e      	adds	r6, r5, #4
   28d56:	3104      	adds	r1, #4
   28d58:	602c      	str	r4, [r5, #0]
   28d5a:	2a03      	cmp	r2, #3
   28d5c:	d9e2      	bls.n	28d24 <strncpy+0x10>
   28d5e:	0035      	movs	r5, r6
   28d60:	680c      	ldr	r4, [r1, #0]
   28d62:	4b09      	ldr	r3, [pc, #36]	; (28d88 <strncpy+0x74>)
   28d64:	18e3      	adds	r3, r4, r3
   28d66:	43a3      	bics	r3, r4
   28d68:	423b      	tst	r3, r7
   28d6a:	d0f2      	beq.n	28d52 <strncpy+0x3e>
   28d6c:	002e      	movs	r6, r5
   28d6e:	e7db      	b.n	28d28 <strncpy+0x14>
   28d70:	189c      	adds	r4, r3, r2
   28d72:	2100      	movs	r1, #0
   28d74:	2a00      	cmp	r2, #0
   28d76:	d0e8      	beq.n	28d4a <strncpy+0x36>
   28d78:	7019      	strb	r1, [r3, #0]
   28d7a:	3301      	adds	r3, #1
   28d7c:	42a3      	cmp	r3, r4
   28d7e:	d1fb      	bne.n	28d78 <strncpy+0x64>
   28d80:	e7e3      	b.n	28d4a <strncpy+0x36>
   28d82:	46c0      	nop			; (mov r8, r8)
   28d84:	80808080 	.word	0x80808080
   28d88:	fefefeff 	.word	0xfefefeff

00028d8c <critical_factorization>:
   28d8c:	2301      	movs	r3, #1
   28d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   28d90:	4647      	mov	r7, r8
   28d92:	46ce      	mov	lr, r9
   28d94:	4694      	mov	ip, r2
   28d96:	2201      	movs	r2, #1
   28d98:	4698      	mov	r8, r3
   28d9a:	2401      	movs	r4, #1
   28d9c:	2500      	movs	r5, #0
   28d9e:	b580      	push	{r7, lr}
   28da0:	4252      	negs	r2, r2
   28da2:	192b      	adds	r3, r5, r4
   28da4:	428b      	cmp	r3, r1
   28da6:	d20b      	bcs.n	28dc0 <critical_factorization+0x34>
   28da8:	1886      	adds	r6, r0, r2
   28daa:	5cc7      	ldrb	r7, [r0, r3]
   28dac:	5d36      	ldrb	r6, [r6, r4]
   28dae:	42b7      	cmp	r7, r6
   28db0:	d22d      	bcs.n	28e0e <critical_factorization+0x82>
   28db2:	1a9c      	subs	r4, r3, r2
   28db4:	46a0      	mov	r8, r4
   28db6:	001d      	movs	r5, r3
   28db8:	2401      	movs	r4, #1
   28dba:	192b      	adds	r3, r5, r4
   28dbc:	428b      	cmp	r3, r1
   28dbe:	d3f3      	bcc.n	28da8 <critical_factorization+0x1c>
   28dc0:	4644      	mov	r4, r8
   28dc2:	4663      	mov	r3, ip
   28dc4:	601c      	str	r4, [r3, #0]
   28dc6:	2301      	movs	r3, #1
   28dc8:	4699      	mov	r9, r3
   28dca:	3b02      	subs	r3, #2
   28dcc:	2401      	movs	r4, #1
   28dce:	2500      	movs	r5, #0
   28dd0:	4698      	mov	r8, r3
   28dd2:	192b      	adds	r3, r5, r4
   28dd4:	4299      	cmp	r1, r3
   28dd6:	d90d      	bls.n	28df4 <critical_factorization+0x68>
   28dd8:	4646      	mov	r6, r8
   28dda:	1986      	adds	r6, r0, r6
   28ddc:	5cc7      	ldrb	r7, [r0, r3]
   28dde:	5d36      	ldrb	r6, [r6, r4]
   28de0:	42b7      	cmp	r7, r6
   28de2:	d91c      	bls.n	28e1e <critical_factorization+0x92>
   28de4:	4644      	mov	r4, r8
   28de6:	1b1c      	subs	r4, r3, r4
   28de8:	46a1      	mov	r9, r4
   28dea:	001d      	movs	r5, r3
   28dec:	2401      	movs	r4, #1
   28dee:	192b      	adds	r3, r5, r4
   28df0:	4299      	cmp	r1, r3
   28df2:	d8f1      	bhi.n	28dd8 <critical_factorization+0x4c>
   28df4:	4643      	mov	r3, r8
   28df6:	1c50      	adds	r0, r2, #1
   28df8:	3301      	adds	r3, #1
   28dfa:	4283      	cmp	r3, r0
   28dfc:	d303      	bcc.n	28e06 <critical_factorization+0x7a>
   28dfe:	4662      	mov	r2, ip
   28e00:	4649      	mov	r1, r9
   28e02:	0018      	movs	r0, r3
   28e04:	6011      	str	r1, [r2, #0]
   28e06:	bc0c      	pop	{r2, r3}
   28e08:	4690      	mov	r8, r2
   28e0a:	4699      	mov	r9, r3
   28e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28e0e:	42b7      	cmp	r7, r6
   28e10:	d00d      	beq.n	28e2e <critical_factorization+0xa2>
   28e12:	2301      	movs	r3, #1
   28e14:	002a      	movs	r2, r5
   28e16:	4698      	mov	r8, r3
   28e18:	3501      	adds	r5, #1
   28e1a:	2401      	movs	r4, #1
   28e1c:	e7c1      	b.n	28da2 <critical_factorization+0x16>
   28e1e:	42b7      	cmp	r7, r6
   28e20:	d009      	beq.n	28e36 <critical_factorization+0xaa>
   28e22:	2301      	movs	r3, #1
   28e24:	46a8      	mov	r8, r5
   28e26:	4699      	mov	r9, r3
   28e28:	3501      	adds	r5, #1
   28e2a:	2401      	movs	r4, #1
   28e2c:	e7d1      	b.n	28dd2 <critical_factorization+0x46>
   28e2e:	4544      	cmp	r4, r8
   28e30:	d005      	beq.n	28e3e <critical_factorization+0xb2>
   28e32:	3401      	adds	r4, #1
   28e34:	e7b5      	b.n	28da2 <critical_factorization+0x16>
   28e36:	454c      	cmp	r4, r9
   28e38:	d004      	beq.n	28e44 <critical_factorization+0xb8>
   28e3a:	3401      	adds	r4, #1
   28e3c:	e7c9      	b.n	28dd2 <critical_factorization+0x46>
   28e3e:	001d      	movs	r5, r3
   28e40:	2401      	movs	r4, #1
   28e42:	e7ae      	b.n	28da2 <critical_factorization+0x16>
   28e44:	001d      	movs	r5, r3
   28e46:	2401      	movs	r4, #1
   28e48:	e7c3      	b.n	28dd2 <critical_factorization+0x46>
   28e4a:	46c0      	nop			; (mov r8, r8)

00028e4c <two_way_long_needle>:
   28e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   28e4e:	46de      	mov	lr, fp
   28e50:	4657      	mov	r7, sl
   28e52:	464e      	mov	r6, r9
   28e54:	4645      	mov	r5, r8
   28e56:	b5e0      	push	{r5, r6, r7, lr}
   28e58:	0015      	movs	r5, r2
   28e5a:	4c7b      	ldr	r4, [pc, #492]	; (29048 <two_way_long_needle+0x1fc>)
   28e5c:	0006      	movs	r6, r0
   28e5e:	44a5      	add	sp, r4
   28e60:	aa03      	add	r2, sp, #12
   28e62:	000f      	movs	r7, r1
   28e64:	0028      	movs	r0, r5
   28e66:	0019      	movs	r1, r3
   28e68:	001c      	movs	r4, r3
   28e6a:	f7ff ff8f 	bl	28d8c <critical_factorization>
   28e6e:	4683      	mov	fp, r0
   28e70:	aaff      	add	r2, sp, #1020	; 0x3fc
   28e72:	ab04      	add	r3, sp, #16
   28e74:	3214      	adds	r2, #20
   28e76:	c310      	stmia	r3!, {r4}
   28e78:	4293      	cmp	r3, r2
   28e7a:	d1fc      	bne.n	28e76 <two_way_long_needle+0x2a>
   28e7c:	1e63      	subs	r3, r4, #1
   28e7e:	0029      	movs	r1, r5
   28e80:	46a4      	mov	ip, r4
   28e82:	2c00      	cmp	r4, #0
   28e84:	d009      	beq.n	28e9a <two_way_long_needle+0x4e>
   28e86:	2408      	movs	r4, #8
   28e88:	780a      	ldrb	r2, [r1, #0]
   28e8a:	a802      	add	r0, sp, #8
   28e8c:	0092      	lsls	r2, r2, #2
   28e8e:	1900      	adds	r0, r0, r4
   28e90:	5083      	str	r3, [r0, r2]
   28e92:	3101      	adds	r1, #1
   28e94:	3b01      	subs	r3, #1
   28e96:	d2f6      	bcs.n	28e86 <two_way_long_needle+0x3a>
   28e98:	4664      	mov	r4, ip
   28e9a:	9b03      	ldr	r3, [sp, #12]
   28e9c:	465a      	mov	r2, fp
   28e9e:	18e9      	adds	r1, r5, r3
   28ea0:	0028      	movs	r0, r5
   28ea2:	f003 f87f 	bl	2bfa4 <memcmp>
   28ea6:	2800      	cmp	r0, #0
   28ea8:	d000      	beq.n	28eac <two_way_long_needle+0x60>
   28eaa:	e074      	b.n	28f96 <two_way_long_needle+0x14a>
   28eac:	2300      	movs	r3, #0
   28eae:	001a      	movs	r2, r3
   28eb0:	469a      	mov	sl, r3
   28eb2:	1e63      	subs	r3, r4, #1
   28eb4:	4698      	mov	r8, r3
   28eb6:	4659      	mov	r1, fp
   28eb8:	2301      	movs	r3, #1
   28eba:	0038      	movs	r0, r7
   28ebc:	46a1      	mov	r9, r4
   28ebe:	0017      	movs	r7, r2
   28ec0:	4644      	mov	r4, r8
   28ec2:	46b0      	mov	r8, r6
   28ec4:	1a5b      	subs	r3, r3, r1
   28ec6:	9301      	str	r3, [sp, #4]
   28ec8:	9100      	str	r1, [sp, #0]
   28eca:	4656      	mov	r6, sl
   28ecc:	444e      	add	r6, r9
   28ece:	1a32      	subs	r2, r6, r0
   28ed0:	2100      	movs	r1, #0
   28ed2:	4440      	add	r0, r8
   28ed4:	f003 f826 	bl	2bf24 <memchr>
   28ed8:	2800      	cmp	r0, #0
   28eda:	d153      	bne.n	28f84 <two_way_long_needle+0x138>
   28edc:	2e00      	cmp	r6, #0
   28ede:	d051      	beq.n	28f84 <two_way_long_needle+0x138>
   28ee0:	4643      	mov	r3, r8
   28ee2:	2108      	movs	r1, #8
   28ee4:	199b      	adds	r3, r3, r6
   28ee6:	3b01      	subs	r3, #1
   28ee8:	781b      	ldrb	r3, [r3, #0]
   28eea:	aa02      	add	r2, sp, #8
   28eec:	009b      	lsls	r3, r3, #2
   28eee:	1852      	adds	r2, r2, r1
   28ef0:	58d3      	ldr	r3, [r2, r3]
   28ef2:	2b00      	cmp	r3, #0
   28ef4:	d00a      	beq.n	28f0c <two_way_long_needle+0xc0>
   28ef6:	2f00      	cmp	r7, #0
   28ef8:	d004      	beq.n	28f04 <two_way_long_needle+0xb8>
   28efa:	9a03      	ldr	r2, [sp, #12]
   28efc:	4293      	cmp	r3, r2
   28efe:	d201      	bcs.n	28f04 <two_way_long_needle+0xb8>
   28f00:	464b      	mov	r3, r9
   28f02:	1a9b      	subs	r3, r3, r2
   28f04:	449a      	add	sl, r3
   28f06:	2700      	movs	r7, #0
   28f08:	0030      	movs	r0, r6
   28f0a:	e7de      	b.n	28eca <two_way_long_needle+0x7e>
   28f0c:	9900      	ldr	r1, [sp, #0]
   28f0e:	003b      	movs	r3, r7
   28f10:	428f      	cmp	r7, r1
   28f12:	d200      	bcs.n	28f16 <two_way_long_needle+0xca>
   28f14:	000b      	movs	r3, r1
   28f16:	42a3      	cmp	r3, r4
   28f18:	d20d      	bcs.n	28f36 <two_way_long_needle+0xea>
   28f1a:	4642      	mov	r2, r8
   28f1c:	4452      	add	r2, sl
   28f1e:	e002      	b.n	28f26 <two_way_long_needle+0xda>
   28f20:	3301      	adds	r3, #1
   28f22:	42a3      	cmp	r3, r4
   28f24:	d207      	bcs.n	28f36 <two_way_long_needle+0xea>
   28f26:	5ce8      	ldrb	r0, [r5, r3]
   28f28:	5cd1      	ldrb	r1, [r2, r3]
   28f2a:	4288      	cmp	r0, r1
   28f2c:	d0f8      	beq.n	28f20 <two_way_long_needle+0xd4>
   28f2e:	9a01      	ldr	r2, [sp, #4]
   28f30:	4452      	add	r2, sl
   28f32:	4692      	mov	sl, r2
   28f34:	e7e6      	b.n	28f04 <two_way_long_needle+0xb8>
   28f36:	9b00      	ldr	r3, [sp, #0]
   28f38:	1e59      	subs	r1, r3, #1
   28f3a:	429f      	cmp	r7, r3
   28f3c:	d300      	bcc.n	28f40 <two_way_long_needle+0xf4>
   28f3e:	e07d      	b.n	2903c <two_way_long_needle+0x1f0>
   28f40:	4642      	mov	r2, r8
   28f42:	4452      	add	r2, sl
   28f44:	5c50      	ldrb	r0, [r2, r1]
   28f46:	5c6b      	ldrb	r3, [r5, r1]
   28f48:	4298      	cmp	r0, r3
   28f4a:	d000      	beq.n	28f4e <two_way_long_needle+0x102>
   28f4c:	e074      	b.n	29038 <two_way_long_needle+0x1ec>
   28f4e:	1e7b      	subs	r3, r7, #1
   28f50:	469b      	mov	fp, r3
   28f52:	0023      	movs	r3, r4
   28f54:	46b4      	mov	ip, r6
   28f56:	465c      	mov	r4, fp
   28f58:	0016      	movs	r6, r2
   28f5a:	469b      	mov	fp, r3
   28f5c:	e004      	b.n	28f68 <two_way_long_needle+0x11c>
   28f5e:	5cea      	ldrb	r2, [r5, r3]
   28f60:	5cf0      	ldrb	r0, [r6, r3]
   28f62:	4282      	cmp	r2, r0
   28f64:	d103      	bne.n	28f6e <two_way_long_needle+0x122>
   28f66:	0019      	movs	r1, r3
   28f68:	1e4b      	subs	r3, r1, #1
   28f6a:	42a3      	cmp	r3, r4
   28f6c:	d1f7      	bne.n	28f5e <two_way_long_needle+0x112>
   28f6e:	4666      	mov	r6, ip
   28f70:	465c      	mov	r4, fp
   28f72:	3701      	adds	r7, #1
   28f74:	428f      	cmp	r7, r1
   28f76:	d863      	bhi.n	29040 <two_way_long_needle+0x1f4>
   28f78:	464b      	mov	r3, r9
   28f7a:	9f03      	ldr	r7, [sp, #12]
   28f7c:	0030      	movs	r0, r6
   28f7e:	44ba      	add	sl, r7
   28f80:	1bdf      	subs	r7, r3, r7
   28f82:	e7a2      	b.n	28eca <two_way_long_needle+0x7e>
   28f84:	2000      	movs	r0, #0
   28f86:	4b31      	ldr	r3, [pc, #196]	; (2904c <two_way_long_needle+0x200>)
   28f88:	449d      	add	sp, r3
   28f8a:	bc3c      	pop	{r2, r3, r4, r5}
   28f8c:	4690      	mov	r8, r2
   28f8e:	4699      	mov	r9, r3
   28f90:	46a2      	mov	sl, r4
   28f92:	46ab      	mov	fp, r5
   28f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28f96:	465b      	mov	r3, fp
   28f98:	1ae3      	subs	r3, r4, r3
   28f9a:	455b      	cmp	r3, fp
   28f9c:	d34a      	bcc.n	29034 <two_way_long_needle+0x1e8>
   28f9e:	3301      	adds	r3, #1
   28fa0:	9303      	str	r3, [sp, #12]
   28fa2:	2300      	movs	r3, #0
   28fa4:	469a      	mov	sl, r3
   28fa6:	1e63      	subs	r3, r4, #1
   28fa8:	4698      	mov	r8, r3
   28faa:	465a      	mov	r2, fp
   28fac:	2301      	movs	r3, #1
   28fae:	0038      	movs	r0, r7
   28fb0:	46a1      	mov	r9, r4
   28fb2:	4657      	mov	r7, sl
   28fb4:	4644      	mov	r4, r8
   28fb6:	46b0      	mov	r8, r6
   28fb8:	1a9b      	subs	r3, r3, r2
   28fba:	9300      	str	r3, [sp, #0]
   28fbc:	464b      	mov	r3, r9
   28fbe:	18fe      	adds	r6, r7, r3
   28fc0:	1a32      	subs	r2, r6, r0
   28fc2:	2100      	movs	r1, #0
   28fc4:	4440      	add	r0, r8
   28fc6:	f002 ffad 	bl	2bf24 <memchr>
   28fca:	2800      	cmp	r0, #0
   28fcc:	d1da      	bne.n	28f84 <two_way_long_needle+0x138>
   28fce:	2e00      	cmp	r6, #0
   28fd0:	d0d8      	beq.n	28f84 <two_way_long_needle+0x138>
   28fd2:	4643      	mov	r3, r8
   28fd4:	2108      	movs	r1, #8
   28fd6:	199b      	adds	r3, r3, r6
   28fd8:	3b01      	subs	r3, #1
   28fda:	781b      	ldrb	r3, [r3, #0]
   28fdc:	aa02      	add	r2, sp, #8
   28fde:	009b      	lsls	r3, r3, #2
   28fe0:	1852      	adds	r2, r2, r1
   28fe2:	58d3      	ldr	r3, [r2, r3]
   28fe4:	2b00      	cmp	r3, #0
   28fe6:	d122      	bne.n	2902e <two_way_long_needle+0x1e2>
   28fe8:	4643      	mov	r3, r8
   28fea:	19d8      	adds	r0, r3, r7
   28fec:	45a3      	cmp	fp, r4
   28fee:	d20c      	bcs.n	2900a <two_way_long_needle+0x1be>
   28ff0:	465b      	mov	r3, fp
   28ff2:	5cc1      	ldrb	r1, [r0, r3]
   28ff4:	5cea      	ldrb	r2, [r5, r3]
   28ff6:	4291      	cmp	r1, r2
   28ff8:	d004      	beq.n	29004 <two_way_long_needle+0x1b8>
   28ffa:	e015      	b.n	29028 <two_way_long_needle+0x1dc>
   28ffc:	5ce9      	ldrb	r1, [r5, r3]
   28ffe:	5cc2      	ldrb	r2, [r0, r3]
   29000:	4291      	cmp	r1, r2
   29002:	d111      	bne.n	29028 <two_way_long_needle+0x1dc>
   29004:	3301      	adds	r3, #1
   29006:	42a3      	cmp	r3, r4
   29008:	d3f8      	bcc.n	28ffc <two_way_long_needle+0x1b0>
   2900a:	465b      	mov	r3, fp
   2900c:	3b01      	subs	r3, #1
   2900e:	d202      	bcs.n	29016 <two_way_long_needle+0x1ca>
   29010:	e7b9      	b.n	28f86 <two_way_long_needle+0x13a>
   29012:	3b01      	subs	r3, #1
   29014:	d3b7      	bcc.n	28f86 <two_way_long_needle+0x13a>
   29016:	5ce9      	ldrb	r1, [r5, r3]
   29018:	5cc2      	ldrb	r2, [r0, r3]
   2901a:	4291      	cmp	r1, r2
   2901c:	d0f9      	beq.n	29012 <two_way_long_needle+0x1c6>
   2901e:	9b03      	ldr	r3, [sp, #12]
   29020:	0030      	movs	r0, r6
   29022:	469c      	mov	ip, r3
   29024:	4467      	add	r7, ip
   29026:	e7c9      	b.n	28fbc <two_way_long_needle+0x170>
   29028:	9a00      	ldr	r2, [sp, #0]
   2902a:	4694      	mov	ip, r2
   2902c:	4467      	add	r7, ip
   2902e:	18ff      	adds	r7, r7, r3
   29030:	0030      	movs	r0, r6
   29032:	e7c3      	b.n	28fbc <two_way_long_needle+0x170>
   29034:	465b      	mov	r3, fp
   29036:	e7b2      	b.n	28f9e <two_way_long_needle+0x152>
   29038:	9900      	ldr	r1, [sp, #0]
   2903a:	e79a      	b.n	28f72 <two_way_long_needle+0x126>
   2903c:	0019      	movs	r1, r3
   2903e:	e798      	b.n	28f72 <two_way_long_needle+0x126>
   29040:	4640      	mov	r0, r8
   29042:	4450      	add	r0, sl
   29044:	e79f      	b.n	28f86 <two_way_long_needle+0x13a>
   29046:	46c0      	nop			; (mov r8, r8)
   29048:	fffffbec 	.word	0xfffffbec
   2904c:	00000414 	.word	0x00000414

00029050 <strstr>:
   29050:	b5f0      	push	{r4, r5, r6, r7, lr}
   29052:	4657      	mov	r7, sl
   29054:	4645      	mov	r5, r8
   29056:	46de      	mov	lr, fp
   29058:	464e      	mov	r6, r9
   2905a:	b5e0      	push	{r5, r6, r7, lr}
   2905c:	7803      	ldrb	r3, [r0, #0]
   2905e:	b085      	sub	sp, #20
   29060:	0007      	movs	r7, r0
   29062:	000d      	movs	r5, r1
   29064:	2b00      	cmp	r3, #0
   29066:	d035      	beq.n	290d4 <strstr+0x84>
   29068:	7809      	ldrb	r1, [r1, #0]
   2906a:	1e0a      	subs	r2, r1, #0
   2906c:	d100      	bne.n	29070 <strstr+0x20>
   2906e:	e09f      	b.n	291b0 <strstr+0x160>
   29070:	002c      	movs	r4, r5
   29072:	2601      	movs	r6, #1
   29074:	e002      	b.n	2907c <strstr+0x2c>
   29076:	7822      	ldrb	r2, [r4, #0]
   29078:	2a00      	cmp	r2, #0
   2907a:	d00b      	beq.n	29094 <strstr+0x44>
   2907c:	1a9b      	subs	r3, r3, r2
   2907e:	425a      	negs	r2, r3
   29080:	4153      	adcs	r3, r2
   29082:	3001      	adds	r0, #1
   29084:	401e      	ands	r6, r3
   29086:	7803      	ldrb	r3, [r0, #0]
   29088:	3401      	adds	r4, #1
   2908a:	2b00      	cmp	r3, #0
   2908c:	d1f3      	bne.n	29076 <strstr+0x26>
   2908e:	7823      	ldrb	r3, [r4, #0]
   29090:	2b00      	cmp	r3, #0
   29092:	d122      	bne.n	290da <strstr+0x8a>
   29094:	0038      	movs	r0, r7
   29096:	2e00      	cmp	r6, #0
   29098:	d006      	beq.n	290a8 <strstr+0x58>
   2909a:	b005      	add	sp, #20
   2909c:	bc3c      	pop	{r2, r3, r4, r5}
   2909e:	4690      	mov	r8, r2
   290a0:	4699      	mov	r9, r3
   290a2:	46a2      	mov	sl, r4
   290a4:	46ab      	mov	fp, r5
   290a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   290a8:	1c78      	adds	r0, r7, #1
   290aa:	f003 fb0b 	bl	2c6c4 <strchr>
   290ae:	1b64      	subs	r4, r4, r5
   290b0:	1e06      	subs	r6, r0, #0
   290b2:	d012      	beq.n	290da <strstr+0x8a>
   290b4:	2c01      	cmp	r4, #1
   290b6:	d0f0      	beq.n	2909a <strstr+0x4a>
   290b8:	193f      	adds	r7, r7, r4
   290ba:	2101      	movs	r1, #1
   290bc:	42b8      	cmp	r0, r7
   290be:	d800      	bhi.n	290c2 <strstr+0x72>
   290c0:	1a39      	subs	r1, r7, r0
   290c2:	000f      	movs	r7, r1
   290c4:	2c1f      	cmp	r4, #31
   290c6:	d90a      	bls.n	290de <strstr+0x8e>
   290c8:	0023      	movs	r3, r4
   290ca:	002a      	movs	r2, r5
   290cc:	0030      	movs	r0, r6
   290ce:	f7ff febd 	bl	28e4c <two_way_long_needle>
   290d2:	e7e2      	b.n	2909a <strstr+0x4a>
   290d4:	780b      	ldrb	r3, [r1, #0]
   290d6:	2b00      	cmp	r3, #0
   290d8:	d06a      	beq.n	291b0 <strstr+0x160>
   290da:	2000      	movs	r0, #0
   290dc:	e7dd      	b.n	2909a <strstr+0x4a>
   290de:	aa03      	add	r2, sp, #12
   290e0:	0021      	movs	r1, r4
   290e2:	0028      	movs	r0, r5
   290e4:	f7ff fe52 	bl	28d8c <critical_factorization>
   290e8:	9b03      	ldr	r3, [sp, #12]
   290ea:	4680      	mov	r8, r0
   290ec:	0002      	movs	r2, r0
   290ee:	18e9      	adds	r1, r5, r3
   290f0:	0028      	movs	r0, r5
   290f2:	f002 ff57 	bl	2bfa4 <memcmp>
   290f6:	2800      	cmp	r0, #0
   290f8:	d15c      	bne.n	291b4 <strstr+0x164>
   290fa:	2300      	movs	r3, #0
   290fc:	4699      	mov	r9, r3
   290fe:	4643      	mov	r3, r8
   29100:	3b01      	subs	r3, #1
   29102:	9300      	str	r3, [sp, #0]
   29104:	4642      	mov	r2, r8
   29106:	2301      	movs	r3, #1
   29108:	46b2      	mov	sl, r6
   2910a:	0038      	movs	r0, r7
   2910c:	464e      	mov	r6, r9
   2910e:	464f      	mov	r7, r9
   29110:	1a9b      	subs	r3, r3, r2
   29112:	9301      	str	r3, [sp, #4]
   29114:	19e3      	adds	r3, r4, r7
   29116:	1a1a      	subs	r2, r3, r0
   29118:	2100      	movs	r1, #0
   2911a:	4450      	add	r0, sl
   2911c:	4699      	mov	r9, r3
   2911e:	f002 ff01 	bl	2bf24 <memchr>
   29122:	2800      	cmp	r0, #0
   29124:	d1d9      	bne.n	290da <strstr+0x8a>
   29126:	464b      	mov	r3, r9
   29128:	2b00      	cmp	r3, #0
   2912a:	d0d6      	beq.n	290da <strstr+0x8a>
   2912c:	4643      	mov	r3, r8
   2912e:	45b0      	cmp	r8, r6
   29130:	d200      	bcs.n	29134 <strstr+0xe4>
   29132:	0033      	movs	r3, r6
   29134:	429c      	cmp	r4, r3
   29136:	d90f      	bls.n	29158 <strstr+0x108>
   29138:	4652      	mov	r2, sl
   2913a:	18d2      	adds	r2, r2, r3
   2913c:	5ce9      	ldrb	r1, [r5, r3]
   2913e:	5dd2      	ldrb	r2, [r2, r7]
   29140:	4291      	cmp	r1, r2
   29142:	d12e      	bne.n	291a2 <strstr+0x152>
   29144:	4652      	mov	r2, sl
   29146:	19d0      	adds	r0, r2, r7
   29148:	e003      	b.n	29152 <strstr+0x102>
   2914a:	5ce9      	ldrb	r1, [r5, r3]
   2914c:	5cc2      	ldrb	r2, [r0, r3]
   2914e:	4291      	cmp	r1, r2
   29150:	d127      	bne.n	291a2 <strstr+0x152>
   29152:	3301      	adds	r3, #1
   29154:	429c      	cmp	r4, r3
   29156:	d1f8      	bne.n	2914a <strstr+0xfa>
   29158:	9a00      	ldr	r2, [sp, #0]
   2915a:	45b0      	cmp	r8, r6
   2915c:	d976      	bls.n	2924c <strstr+0x1fc>
   2915e:	46bc      	mov	ip, r7
   29160:	44d4      	add	ip, sl
   29162:	4661      	mov	r1, ip
   29164:	9b00      	ldr	r3, [sp, #0]
   29166:	5cc9      	ldrb	r1, [r1, r3]
   29168:	5ceb      	ldrb	r3, [r5, r3]
   2916a:	4299      	cmp	r1, r3
   2916c:	d16e      	bne.n	2924c <strstr+0x1fc>
   2916e:	1e73      	subs	r3, r6, #1
   29170:	469b      	mov	fp, r3
   29172:	4663      	mov	r3, ip
   29174:	46a4      	mov	ip, r4
   29176:	465c      	mov	r4, fp
   29178:	46b3      	mov	fp, r6
   2917a:	001e      	movs	r6, r3
   2917c:	e004      	b.n	29188 <strstr+0x138>
   2917e:	5ce8      	ldrb	r0, [r5, r3]
   29180:	5cf1      	ldrb	r1, [r6, r3]
   29182:	4288      	cmp	r0, r1
   29184:	d103      	bne.n	2918e <strstr+0x13e>
   29186:	001a      	movs	r2, r3
   29188:	1e53      	subs	r3, r2, #1
   2918a:	42a3      	cmp	r3, r4
   2918c:	d1f7      	bne.n	2917e <strstr+0x12e>
   2918e:	4664      	mov	r4, ip
   29190:	465e      	mov	r6, fp
   29192:	3601      	adds	r6, #1
   29194:	4296      	cmp	r6, r2
   29196:	d85b      	bhi.n	29250 <strstr+0x200>
   29198:	9e03      	ldr	r6, [sp, #12]
   2919a:	4648      	mov	r0, r9
   2919c:	19bf      	adds	r7, r7, r6
   2919e:	1ba6      	subs	r6, r4, r6
   291a0:	e7b8      	b.n	29114 <strstr+0xc4>
   291a2:	9a01      	ldr	r2, [sp, #4]
   291a4:	2600      	movs	r6, #0
   291a6:	4694      	mov	ip, r2
   291a8:	4467      	add	r7, ip
   291aa:	18ff      	adds	r7, r7, r3
   291ac:	4648      	mov	r0, r9
   291ae:	e7b1      	b.n	29114 <strstr+0xc4>
   291b0:	0038      	movs	r0, r7
   291b2:	e772      	b.n	2909a <strstr+0x4a>
   291b4:	4643      	mov	r3, r8
   291b6:	1ae3      	subs	r3, r4, r3
   291b8:	4543      	cmp	r3, r8
   291ba:	d200      	bcs.n	291be <strstr+0x16e>
   291bc:	4643      	mov	r3, r8
   291be:	3301      	adds	r3, #1
   291c0:	9303      	str	r3, [sp, #12]
   291c2:	2300      	movs	r3, #0
   291c4:	4642      	mov	r2, r8
   291c6:	4699      	mov	r9, r3
   291c8:	3301      	adds	r3, #1
   291ca:	1a9b      	subs	r3, r3, r2
   291cc:	464a      	mov	r2, r9
   291ce:	46b3      	mov	fp, r6
   291d0:	46b1      	mov	r9, r6
   291d2:	0038      	movs	r0, r7
   291d4:	469a      	mov	sl, r3
   291d6:	0016      	movs	r6, r2
   291d8:	44c3      	add	fp, r8
   291da:	19a7      	adds	r7, r4, r6
   291dc:	1a3a      	subs	r2, r7, r0
   291de:	2100      	movs	r1, #0
   291e0:	4448      	add	r0, r9
   291e2:	f002 fe9f 	bl	2bf24 <memchr>
   291e6:	2800      	cmp	r0, #0
   291e8:	d000      	beq.n	291ec <strstr+0x19c>
   291ea:	e776      	b.n	290da <strstr+0x8a>
   291ec:	2f00      	cmp	r7, #0
   291ee:	d100      	bne.n	291f2 <strstr+0x1a2>
   291f0:	e773      	b.n	290da <strstr+0x8a>
   291f2:	464b      	mov	r3, r9
   291f4:	1998      	adds	r0, r3, r6
   291f6:	4544      	cmp	r4, r8
   291f8:	d90f      	bls.n	2921a <strstr+0x1ca>
   291fa:	465b      	mov	r3, fp
   291fc:	5d99      	ldrb	r1, [r3, r6]
   291fe:	4643      	mov	r3, r8
   29200:	4648      	mov	r0, r9
   29202:	5cea      	ldrb	r2, [r5, r3]
   29204:	1980      	adds	r0, r0, r6
   29206:	4291      	cmp	r1, r2
   29208:	d004      	beq.n	29214 <strstr+0x1c4>
   2920a:	e016      	b.n	2923a <strstr+0x1ea>
   2920c:	5ce9      	ldrb	r1, [r5, r3]
   2920e:	5cc2      	ldrb	r2, [r0, r3]
   29210:	4291      	cmp	r1, r2
   29212:	d112      	bne.n	2923a <strstr+0x1ea>
   29214:	3301      	adds	r3, #1
   29216:	429c      	cmp	r4, r3
   29218:	d1f8      	bne.n	2920c <strstr+0x1bc>
   2921a:	4643      	mov	r3, r8
   2921c:	3b01      	subs	r3, #1
   2921e:	d200      	bcs.n	29222 <strstr+0x1d2>
   29220:	e73b      	b.n	2909a <strstr+0x4a>
   29222:	5cc1      	ldrb	r1, [r0, r3]
   29224:	5cea      	ldrb	r2, [r5, r3]
   29226:	4291      	cmp	r1, r2
   29228:	d004      	beq.n	29234 <strstr+0x1e4>
   2922a:	e00a      	b.n	29242 <strstr+0x1f2>
   2922c:	5ce9      	ldrb	r1, [r5, r3]
   2922e:	5cc2      	ldrb	r2, [r0, r3]
   29230:	4291      	cmp	r1, r2
   29232:	d106      	bne.n	29242 <strstr+0x1f2>
   29234:	3b01      	subs	r3, #1
   29236:	d2f9      	bcs.n	2922c <strstr+0x1dc>
   29238:	e72f      	b.n	2909a <strstr+0x4a>
   2923a:	4456      	add	r6, sl
   2923c:	18f6      	adds	r6, r6, r3
   2923e:	0038      	movs	r0, r7
   29240:	e7cb      	b.n	291da <strstr+0x18a>
   29242:	9b03      	ldr	r3, [sp, #12]
   29244:	0038      	movs	r0, r7
   29246:	469c      	mov	ip, r3
   29248:	4466      	add	r6, ip
   2924a:	e7c6      	b.n	291da <strstr+0x18a>
   2924c:	4642      	mov	r2, r8
   2924e:	e7a0      	b.n	29192 <strstr+0x142>
   29250:	46b9      	mov	r9, r7
   29252:	4650      	mov	r0, sl
   29254:	4448      	add	r0, r9
   29256:	e720      	b.n	2909a <strstr+0x4a>

00029258 <_svfprintf_r>:
   29258:	b5f0      	push	{r4, r5, r6, r7, lr}
   2925a:	46de      	mov	lr, fp
   2925c:	4645      	mov	r5, r8
   2925e:	4657      	mov	r7, sl
   29260:	464e      	mov	r6, r9
   29262:	b5e0      	push	{r5, r6, r7, lr}
   29264:	b0c3      	sub	sp, #268	; 0x10c
   29266:	000d      	movs	r5, r1
   29268:	9106      	str	r1, [sp, #24]
   2926a:	0014      	movs	r4, r2
   2926c:	930f      	str	r3, [sp, #60]	; 0x3c
   2926e:	9009      	str	r0, [sp, #36]	; 0x24
   29270:	f002 fb92 	bl	2b998 <_localeconv_r>
   29274:	6803      	ldr	r3, [r0, #0]
   29276:	0018      	movs	r0, r3
   29278:	9319      	str	r3, [sp, #100]	; 0x64
   2927a:	f7ff fccf 	bl	28c1c <strlen>
   2927e:	9018      	str	r0, [sp, #96]	; 0x60
   29280:	89ab      	ldrh	r3, [r5, #12]
   29282:	061b      	lsls	r3, r3, #24
   29284:	d505      	bpl.n	29292 <_svfprintf_r+0x3a>
   29286:	692b      	ldr	r3, [r5, #16]
   29288:	9307      	str	r3, [sp, #28]
   2928a:	2b00      	cmp	r3, #0
   2928c:	d101      	bne.n	29292 <_svfprintf_r+0x3a>
   2928e:	f001 f863 	bl	2a358 <_svfprintf_r+0x1100>
   29292:	ab32      	add	r3, sp, #200	; 0xc8
   29294:	9325      	str	r3, [sp, #148]	; 0x94
   29296:	2300      	movs	r3, #0
   29298:	46a3      	mov	fp, r4
   2929a:	af25      	add	r7, sp, #148	; 0x94
   2929c:	60bb      	str	r3, [r7, #8]
   2929e:	607b      	str	r3, [r7, #4]
   292a0:	9314      	str	r3, [sp, #80]	; 0x50
   292a2:	9316      	str	r3, [sp, #88]	; 0x58
   292a4:	9315      	str	r3, [sp, #84]	; 0x54
   292a6:	ae32      	add	r6, sp, #200	; 0xc8
   292a8:	9317      	str	r3, [sp, #92]	; 0x5c
   292aa:	931a      	str	r3, [sp, #104]	; 0x68
   292ac:	930a      	str	r3, [sp, #40]	; 0x28
   292ae:	465b      	mov	r3, fp
   292b0:	781b      	ldrb	r3, [r3, #0]
   292b2:	465c      	mov	r4, fp
   292b4:	2b00      	cmp	r3, #0
   292b6:	d01c      	beq.n	292f2 <_svfprintf_r+0x9a>
   292b8:	2b25      	cmp	r3, #37	; 0x25
   292ba:	d102      	bne.n	292c2 <_svfprintf_r+0x6a>
   292bc:	e019      	b.n	292f2 <_svfprintf_r+0x9a>
   292be:	2b25      	cmp	r3, #37	; 0x25
   292c0:	d003      	beq.n	292ca <_svfprintf_r+0x72>
   292c2:	3401      	adds	r4, #1
   292c4:	7823      	ldrb	r3, [r4, #0]
   292c6:	2b00      	cmp	r3, #0
   292c8:	d1f9      	bne.n	292be <_svfprintf_r+0x66>
   292ca:	465b      	mov	r3, fp
   292cc:	1ae5      	subs	r5, r4, r3
   292ce:	d010      	beq.n	292f2 <_svfprintf_r+0x9a>
   292d0:	465b      	mov	r3, fp
   292d2:	6033      	str	r3, [r6, #0]
   292d4:	68bb      	ldr	r3, [r7, #8]
   292d6:	6075      	str	r5, [r6, #4]
   292d8:	195b      	adds	r3, r3, r5
   292da:	60bb      	str	r3, [r7, #8]
   292dc:	687b      	ldr	r3, [r7, #4]
   292de:	3301      	adds	r3, #1
   292e0:	607b      	str	r3, [r7, #4]
   292e2:	2b07      	cmp	r3, #7
   292e4:	dc2e      	bgt.n	29344 <_svfprintf_r+0xec>
   292e6:	3608      	adds	r6, #8
   292e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   292ea:	469c      	mov	ip, r3
   292ec:	44ac      	add	ip, r5
   292ee:	4663      	mov	r3, ip
   292f0:	930a      	str	r3, [sp, #40]	; 0x28
   292f2:	7823      	ldrb	r3, [r4, #0]
   292f4:	2b00      	cmp	r3, #0
   292f6:	d02e      	beq.n	29356 <_svfprintf_r+0xfe>
   292f8:	1c63      	adds	r3, r4, #1
   292fa:	469b      	mov	fp, r3
   292fc:	2300      	movs	r3, #0
   292fe:	aa16      	add	r2, sp, #88	; 0x58
   29300:	77d3      	strb	r3, [r2, #31]
   29302:	2201      	movs	r2, #1
   29304:	4252      	negs	r2, r2
   29306:	4692      	mov	sl, r2
   29308:	2200      	movs	r2, #0
   2930a:	2100      	movs	r1, #0
   2930c:	920b      	str	r2, [sp, #44]	; 0x2c
   2930e:	3220      	adds	r2, #32
   29310:	4691      	mov	r9, r2
   29312:	3220      	adds	r2, #32
   29314:	7863      	ldrb	r3, [r4, #1]
   29316:	4688      	mov	r8, r1
   29318:	2000      	movs	r0, #0
   2931a:	2400      	movs	r4, #0
   2931c:	4694      	mov	ip, r2
   2931e:	4659      	mov	r1, fp
   29320:	3101      	adds	r1, #1
   29322:	001a      	movs	r2, r3
   29324:	3a20      	subs	r2, #32
   29326:	2a58      	cmp	r2, #88	; 0x58
   29328:	d900      	bls.n	2932c <_svfprintf_r+0xd4>
   2932a:	e2fd      	b.n	29928 <_svfprintf_r+0x6d0>
   2932c:	4dd7      	ldr	r5, [pc, #860]	; (2968c <_svfprintf_r+0x434>)
   2932e:	0092      	lsls	r2, r2, #2
   29330:	58aa      	ldr	r2, [r5, r2]
   29332:	4697      	mov	pc, r2
   29334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   29336:	920f      	str	r2, [sp, #60]	; 0x3c
   29338:	425b      	negs	r3, r3
   2933a:	930b      	str	r3, [sp, #44]	; 0x2c
   2933c:	2304      	movs	r3, #4
   2933e:	431c      	orrs	r4, r3
   29340:	780b      	ldrb	r3, [r1, #0]
   29342:	e7ed      	b.n	29320 <_svfprintf_r+0xc8>
   29344:	003a      	movs	r2, r7
   29346:	9906      	ldr	r1, [sp, #24]
   29348:	9809      	ldr	r0, [sp, #36]	; 0x24
   2934a:	f003 fa29 	bl	2c7a0 <__ssprint_r>
   2934e:	2800      	cmp	r0, #0
   29350:	d109      	bne.n	29366 <_svfprintf_r+0x10e>
   29352:	ae32      	add	r6, sp, #200	; 0xc8
   29354:	e7c8      	b.n	292e8 <_svfprintf_r+0x90>
   29356:	68bb      	ldr	r3, [r7, #8]
   29358:	2b00      	cmp	r3, #0
   2935a:	d004      	beq.n	29366 <_svfprintf_r+0x10e>
   2935c:	003a      	movs	r2, r7
   2935e:	9906      	ldr	r1, [sp, #24]
   29360:	9809      	ldr	r0, [sp, #36]	; 0x24
   29362:	f003 fa1d 	bl	2c7a0 <__ssprint_r>
   29366:	9b06      	ldr	r3, [sp, #24]
   29368:	899b      	ldrh	r3, [r3, #12]
   2936a:	065b      	lsls	r3, r3, #25
   2936c:	d501      	bpl.n	29372 <_svfprintf_r+0x11a>
   2936e:	f001 f8ce 	bl	2a50e <_svfprintf_r+0x12b6>
   29372:	980a      	ldr	r0, [sp, #40]	; 0x28
   29374:	b043      	add	sp, #268	; 0x10c
   29376:	bc3c      	pop	{r2, r3, r4, r5}
   29378:	4690      	mov	r8, r2
   2937a:	4699      	mov	r9, r3
   2937c:	46a2      	mov	sl, r4
   2937e:	46ab      	mov	fp, r5
   29380:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29382:	2201      	movs	r2, #1
   29384:	780b      	ldrb	r3, [r1, #0]
   29386:	4690      	mov	r8, r2
   29388:	202b      	movs	r0, #43	; 0x2b
   2938a:	e7c9      	b.n	29320 <_svfprintf_r+0xc8>
   2938c:	1c4b      	adds	r3, r1, #1
   2938e:	469b      	mov	fp, r3
   29390:	780b      	ldrb	r3, [r1, #0]
   29392:	2b2a      	cmp	r3, #42	; 0x2a
   29394:	d101      	bne.n	2939a <_svfprintf_r+0x142>
   29396:	f001 fa1b 	bl	2a7d0 <_svfprintf_r+0x1578>
   2939a:	001a      	movs	r2, r3
   2939c:	2100      	movs	r1, #0
   2939e:	3a30      	subs	r2, #48	; 0x30
   293a0:	468a      	mov	sl, r1
   293a2:	4659      	mov	r1, fp
   293a4:	2a09      	cmp	r2, #9
   293a6:	d8bc      	bhi.n	29322 <_svfprintf_r+0xca>
   293a8:	0003      	movs	r3, r0
   293aa:	0011      	movs	r1, r2
   293ac:	4650      	mov	r0, sl
   293ae:	465a      	mov	r2, fp
   293b0:	469a      	mov	sl, r3
   293b2:	46a3      	mov	fp, r4
   293b4:	0083      	lsls	r3, r0, #2
   293b6:	181b      	adds	r3, r3, r0
   293b8:	7814      	ldrb	r4, [r2, #0]
   293ba:	005b      	lsls	r3, r3, #1
   293bc:	1858      	adds	r0, r3, r1
   293be:	0021      	movs	r1, r4
   293c0:	1c53      	adds	r3, r2, #1
   293c2:	3930      	subs	r1, #48	; 0x30
   293c4:	001a      	movs	r2, r3
   293c6:	2909      	cmp	r1, #9
   293c8:	d9f4      	bls.n	293b4 <_svfprintf_r+0x15c>
   293ca:	4652      	mov	r2, sl
   293cc:	0019      	movs	r1, r3
   293ce:	4682      	mov	sl, r0
   293d0:	0023      	movs	r3, r4
   293d2:	0010      	movs	r0, r2
   293d4:	465c      	mov	r4, fp
   293d6:	e7a4      	b.n	29322 <_svfprintf_r+0xca>
   293d8:	2380      	movs	r3, #128	; 0x80
   293da:	431c      	orrs	r4, r3
   293dc:	780b      	ldrb	r3, [r1, #0]
   293de:	e79f      	b.n	29320 <_svfprintf_r+0xc8>
   293e0:	468b      	mov	fp, r1
   293e2:	4641      	mov	r1, r8
   293e4:	9312      	str	r3, [sp, #72]	; 0x48
   293e6:	2900      	cmp	r1, #0
   293e8:	d001      	beq.n	293ee <_svfprintf_r+0x196>
   293ea:	f001 fa1f 	bl	2a82c <_svfprintf_r+0x15d4>
   293ee:	2310      	movs	r3, #16
   293f0:	431c      	orrs	r4, r3
   293f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   293f4:	06a3      	lsls	r3, r4, #26
   293f6:	d501      	bpl.n	293fc <_svfprintf_r+0x1a4>
   293f8:	f000 fe88 	bl	2a10c <_svfprintf_r+0xeb4>
   293fc:	06e3      	lsls	r3, r4, #27
   293fe:	d501      	bpl.n	29404 <_svfprintf_r+0x1ac>
   29400:	f000 fd80 	bl	29f04 <_svfprintf_r+0xcac>
   29404:	0663      	lsls	r3, r4, #25
   29406:	d401      	bmi.n	2940c <_svfprintf_r+0x1b4>
   29408:	f000 fd7c 	bl	29f04 <_svfprintf_r+0xcac>
   2940c:	2100      	movs	r1, #0
   2940e:	5e53      	ldrsh	r3, [r2, r1]
   29410:	930c      	str	r3, [sp, #48]	; 0x30
   29412:	3204      	adds	r2, #4
   29414:	17db      	asrs	r3, r3, #31
   29416:	930d      	str	r3, [sp, #52]	; 0x34
   29418:	920f      	str	r2, [sp, #60]	; 0x3c
   2941a:	d501      	bpl.n	29420 <_svfprintf_r+0x1c8>
   2941c:	f000 fe86 	bl	2a12c <_svfprintf_r+0xed4>
   29420:	990c      	ldr	r1, [sp, #48]	; 0x30
   29422:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   29424:	0008      	movs	r0, r1
   29426:	ab16      	add	r3, sp, #88	; 0x58
   29428:	7fdb      	ldrb	r3, [r3, #31]
   2942a:	4310      	orrs	r0, r2
   2942c:	4698      	mov	r8, r3
   2942e:	0002      	movs	r2, r0
   29430:	2301      	movs	r3, #1
   29432:	4651      	mov	r1, sl
   29434:	3101      	adds	r1, #1
   29436:	d100      	bne.n	2943a <_svfprintf_r+0x1e2>
   29438:	e0ff      	b.n	2963a <_svfprintf_r+0x3e2>
   2943a:	2180      	movs	r1, #128	; 0x80
   2943c:	0020      	movs	r0, r4
   2943e:	4388      	bics	r0, r1
   29440:	9008      	str	r0, [sp, #32]
   29442:	2a00      	cmp	r2, #0
   29444:	d000      	beq.n	29448 <_svfprintf_r+0x1f0>
   29446:	e0fc      	b.n	29642 <_svfprintf_r+0x3ea>
   29448:	4652      	mov	r2, sl
   2944a:	2a00      	cmp	r2, #0
   2944c:	d001      	beq.n	29452 <_svfprintf_r+0x1fa>
   2944e:	f000 fc2c 	bl	29caa <_svfprintf_r+0xa52>
   29452:	2b00      	cmp	r3, #0
   29454:	d001      	beq.n	2945a <_svfprintf_r+0x202>
   29456:	f000 fd04 	bl	29e62 <_svfprintf_r+0xc0a>
   2945a:	2001      	movs	r0, #1
   2945c:	ab32      	add	r3, sp, #200	; 0xc8
   2945e:	4020      	ands	r0, r4
   29460:	900e      	str	r0, [sp, #56]	; 0x38
   29462:	9311      	str	r3, [sp, #68]	; 0x44
   29464:	d008      	beq.n	29478 <_svfprintf_r+0x220>
   29466:	2327      	movs	r3, #39	; 0x27
   29468:	2130      	movs	r1, #48	; 0x30
   2946a:	aa28      	add	r2, sp, #160	; 0xa0
   2946c:	54d1      	strb	r1, [r2, r3]
   2946e:	aa16      	add	r2, sp, #88	; 0x58
   29470:	4694      	mov	ip, r2
   29472:	3348      	adds	r3, #72	; 0x48
   29474:	4463      	add	r3, ip
   29476:	9311      	str	r3, [sp, #68]	; 0x44
   29478:	4653      	mov	r3, sl
   2947a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2947c:	9307      	str	r3, [sp, #28]
   2947e:	4592      	cmp	sl, r2
   29480:	da00      	bge.n	29484 <_svfprintf_r+0x22c>
   29482:	9207      	str	r2, [sp, #28]
   29484:	2300      	movs	r3, #0
   29486:	9313      	str	r3, [sp, #76]	; 0x4c
   29488:	4643      	mov	r3, r8
   2948a:	2b00      	cmp	r3, #0
   2948c:	d002      	beq.n	29494 <_svfprintf_r+0x23c>
   2948e:	9b07      	ldr	r3, [sp, #28]
   29490:	3301      	adds	r3, #1
   29492:	9307      	str	r3, [sp, #28]
   29494:	2302      	movs	r3, #2
   29496:	9a08      	ldr	r2, [sp, #32]
   29498:	401a      	ands	r2, r3
   2949a:	4691      	mov	r9, r2
   2949c:	d002      	beq.n	294a4 <_svfprintf_r+0x24c>
   2949e:	9b07      	ldr	r3, [sp, #28]
   294a0:	3302      	adds	r3, #2
   294a2:	9307      	str	r3, [sp, #28]
   294a4:	2384      	movs	r3, #132	; 0x84
   294a6:	9a08      	ldr	r2, [sp, #32]
   294a8:	401a      	ands	r2, r3
   294aa:	9210      	str	r2, [sp, #64]	; 0x40
   294ac:	d000      	beq.n	294b0 <_svfprintf_r+0x258>
   294ae:	e24d      	b.n	2994c <_svfprintf_r+0x6f4>
   294b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   294b2:	9a07      	ldr	r2, [sp, #28]
   294b4:	1a9c      	subs	r4, r3, r2
   294b6:	2c00      	cmp	r4, #0
   294b8:	dc00      	bgt.n	294bc <_svfprintf_r+0x264>
   294ba:	e247      	b.n	2994c <_svfprintf_r+0x6f4>
   294bc:	4974      	ldr	r1, [pc, #464]	; (29690 <_svfprintf_r+0x438>)
   294be:	68ba      	ldr	r2, [r7, #8]
   294c0:	687b      	ldr	r3, [r7, #4]
   294c2:	4688      	mov	r8, r1
   294c4:	2c10      	cmp	r4, #16
   294c6:	dd1f      	ble.n	29508 <_svfprintf_r+0x2b0>
   294c8:	0031      	movs	r1, r6
   294ca:	2510      	movs	r5, #16
   294cc:	4646      	mov	r6, r8
   294ce:	e003      	b.n	294d8 <_svfprintf_r+0x280>
   294d0:	3c10      	subs	r4, #16
   294d2:	3108      	adds	r1, #8
   294d4:	2c10      	cmp	r4, #16
   294d6:	dd15      	ble.n	29504 <_svfprintf_r+0x2ac>
   294d8:	3210      	adds	r2, #16
   294da:	3301      	adds	r3, #1
   294dc:	600e      	str	r6, [r1, #0]
   294de:	604d      	str	r5, [r1, #4]
   294e0:	60ba      	str	r2, [r7, #8]
   294e2:	607b      	str	r3, [r7, #4]
   294e4:	2b07      	cmp	r3, #7
   294e6:	ddf3      	ble.n	294d0 <_svfprintf_r+0x278>
   294e8:	003a      	movs	r2, r7
   294ea:	9906      	ldr	r1, [sp, #24]
   294ec:	9809      	ldr	r0, [sp, #36]	; 0x24
   294ee:	f003 f957 	bl	2c7a0 <__ssprint_r>
   294f2:	2800      	cmp	r0, #0
   294f4:	d000      	beq.n	294f8 <_svfprintf_r+0x2a0>
   294f6:	e736      	b.n	29366 <_svfprintf_r+0x10e>
   294f8:	3c10      	subs	r4, #16
   294fa:	68ba      	ldr	r2, [r7, #8]
   294fc:	687b      	ldr	r3, [r7, #4]
   294fe:	a932      	add	r1, sp, #200	; 0xc8
   29500:	2c10      	cmp	r4, #16
   29502:	dce9      	bgt.n	294d8 <_svfprintf_r+0x280>
   29504:	46b0      	mov	r8, r6
   29506:	000e      	movs	r6, r1
   29508:	4641      	mov	r1, r8
   2950a:	6074      	str	r4, [r6, #4]
   2950c:	3301      	adds	r3, #1
   2950e:	18a4      	adds	r4, r4, r2
   29510:	6031      	str	r1, [r6, #0]
   29512:	60bc      	str	r4, [r7, #8]
   29514:	607b      	str	r3, [r7, #4]
   29516:	2b07      	cmp	r3, #7
   29518:	dd01      	ble.n	2951e <_svfprintf_r+0x2c6>
   2951a:	f000 fca8 	bl	29e6e <_svfprintf_r+0xc16>
   2951e:	ab16      	add	r3, sp, #88	; 0x58
   29520:	7fdb      	ldrb	r3, [r3, #31]
   29522:	3608      	adds	r6, #8
   29524:	4698      	mov	r8, r3
   29526:	e212      	b.n	2994e <_svfprintf_r+0x6f6>
   29528:	468b      	mov	fp, r1
   2952a:	4641      	mov	r1, r8
   2952c:	9312      	str	r3, [sp, #72]	; 0x48
   2952e:	2900      	cmp	r1, #0
   29530:	d001      	beq.n	29536 <_svfprintf_r+0x2de>
   29532:	f001 f977 	bl	2a824 <_svfprintf_r+0x15cc>
   29536:	2207      	movs	r2, #7
   29538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2953a:	3307      	adds	r3, #7
   2953c:	4393      	bics	r3, r2
   2953e:	3201      	adds	r2, #1
   29540:	4694      	mov	ip, r2
   29542:	449c      	add	ip, r3
   29544:	4662      	mov	r2, ip
   29546:	920f      	str	r2, [sp, #60]	; 0x3c
   29548:	681a      	ldr	r2, [r3, #0]
   2954a:	9216      	str	r2, [sp, #88]	; 0x58
   2954c:	685b      	ldr	r3, [r3, #4]
   2954e:	2201      	movs	r2, #1
   29550:	9315      	str	r3, [sp, #84]	; 0x54
   29552:	9b15      	ldr	r3, [sp, #84]	; 0x54
   29554:	9d16      	ldr	r5, [sp, #88]	; 0x58
   29556:	005b      	lsls	r3, r3, #1
   29558:	085b      	lsrs	r3, r3, #1
   2955a:	4698      	mov	r8, r3
   2955c:	4252      	negs	r2, r2
   2955e:	4b4d      	ldr	r3, [pc, #308]	; (29694 <_svfprintf_r+0x43c>)
   29560:	0028      	movs	r0, r5
   29562:	4641      	mov	r1, r8
   29564:	f7ff f844 	bl	285f0 <__aeabi_dcmpun>
   29568:	2800      	cmp	r0, #0
   2956a:	d001      	beq.n	29570 <_svfprintf_r+0x318>
   2956c:	f000 fdfd 	bl	2a16a <_svfprintf_r+0xf12>
   29570:	2201      	movs	r2, #1
   29572:	4b48      	ldr	r3, [pc, #288]	; (29694 <_svfprintf_r+0x43c>)
   29574:	4252      	negs	r2, r2
   29576:	0028      	movs	r0, r5
   29578:	4641      	mov	r1, r8
   2957a:	f7fc fb75 	bl	25c68 <__aeabi_dcmple>
   2957e:	2800      	cmp	r0, #0
   29580:	d001      	beq.n	29586 <_svfprintf_r+0x32e>
   29582:	f000 fdf2 	bl	2a16a <_svfprintf_r+0xf12>
   29586:	2200      	movs	r2, #0
   29588:	2300      	movs	r3, #0
   2958a:	9816      	ldr	r0, [sp, #88]	; 0x58
   2958c:	9915      	ldr	r1, [sp, #84]	; 0x54
   2958e:	f7fc fb61 	bl	25c54 <__aeabi_dcmplt>
   29592:	2800      	cmp	r0, #0
   29594:	d001      	beq.n	2959a <_svfprintf_r+0x342>
   29596:	f001 f822 	bl	2a5de <_svfprintf_r+0x1386>
   2959a:	ab16      	add	r3, sp, #88	; 0x58
   2959c:	7fdb      	ldrb	r3, [r3, #31]
   2959e:	4698      	mov	r8, r3
   295a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   295a2:	2b47      	cmp	r3, #71	; 0x47
   295a4:	dd01      	ble.n	295aa <_svfprintf_r+0x352>
   295a6:	f000 fec7 	bl	2a338 <_svfprintf_r+0x10e0>
   295aa:	4b3b      	ldr	r3, [pc, #236]	; (29698 <_svfprintf_r+0x440>)
   295ac:	9311      	str	r3, [sp, #68]	; 0x44
   295ae:	2380      	movs	r3, #128	; 0x80
   295b0:	439c      	bics	r4, r3
   295b2:	3b7d      	subs	r3, #125	; 0x7d
   295b4:	9307      	str	r3, [sp, #28]
   295b6:	930e      	str	r3, [sp, #56]	; 0x38
   295b8:	2300      	movs	r3, #0
   295ba:	9408      	str	r4, [sp, #32]
   295bc:	469a      	mov	sl, r3
   295be:	9313      	str	r3, [sp, #76]	; 0x4c
   295c0:	e762      	b.n	29488 <_svfprintf_r+0x230>
   295c2:	2200      	movs	r2, #0
   295c4:	3b30      	subs	r3, #48	; 0x30
   295c6:	0015      	movs	r5, r2
   295c8:	001a      	movs	r2, r3
   295ca:	0003      	movs	r3, r0
   295cc:	9407      	str	r4, [sp, #28]
   295ce:	0008      	movs	r0, r1
   295d0:	002c      	movs	r4, r5
   295d2:	469b      	mov	fp, r3
   295d4:	00a3      	lsls	r3, r4, #2
   295d6:	191c      	adds	r4, r3, r4
   295d8:	7803      	ldrb	r3, [r0, #0]
   295da:	0064      	lsls	r4, r4, #1
   295dc:	1914      	adds	r4, r2, r4
   295de:	001a      	movs	r2, r3
   295e0:	3101      	adds	r1, #1
   295e2:	3a30      	subs	r2, #48	; 0x30
   295e4:	0008      	movs	r0, r1
   295e6:	2a09      	cmp	r2, #9
   295e8:	d9f4      	bls.n	295d4 <_svfprintf_r+0x37c>
   295ea:	940b      	str	r4, [sp, #44]	; 0x2c
   295ec:	4658      	mov	r0, fp
   295ee:	9c07      	ldr	r4, [sp, #28]
   295f0:	e697      	b.n	29322 <_svfprintf_r+0xca>
   295f2:	2308      	movs	r3, #8
   295f4:	431c      	orrs	r4, r3
   295f6:	780b      	ldrb	r3, [r1, #0]
   295f8:	e692      	b.n	29320 <_svfprintf_r+0xc8>
   295fa:	9312      	str	r3, [sp, #72]	; 0x48
   295fc:	2310      	movs	r3, #16
   295fe:	431c      	orrs	r4, r3
   29600:	468b      	mov	fp, r1
   29602:	06a3      	lsls	r3, r4, #26
   29604:	d500      	bpl.n	29608 <_svfprintf_r+0x3b0>
   29606:	e17b      	b.n	29900 <_svfprintf_r+0x6a8>
   29608:	06e3      	lsls	r3, r4, #27
   2960a:	d501      	bpl.n	29610 <_svfprintf_r+0x3b8>
   2960c:	f000 fc7e 	bl	29f0c <_svfprintf_r+0xcb4>
   29610:	0663      	lsls	r3, r4, #25
   29612:	d401      	bmi.n	29618 <_svfprintf_r+0x3c0>
   29614:	f000 fc7a 	bl	29f0c <_svfprintf_r+0xcb4>
   29618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2961a:	881a      	ldrh	r2, [r3, #0]
   2961c:	920c      	str	r2, [sp, #48]	; 0x30
   2961e:	2200      	movs	r2, #0
   29620:	3304      	adds	r3, #4
   29622:	930f      	str	r3, [sp, #60]	; 0x3c
   29624:	2300      	movs	r3, #0
   29626:	920d      	str	r2, [sp, #52]	; 0x34
   29628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2962a:	2100      	movs	r1, #0
   2962c:	a816      	add	r0, sp, #88	; 0x58
   2962e:	77c1      	strb	r1, [r0, #31]
   29630:	4688      	mov	r8, r1
   29632:	4651      	mov	r1, sl
   29634:	3101      	adds	r1, #1
   29636:	d000      	beq.n	2963a <_svfprintf_r+0x3e2>
   29638:	e6ff      	b.n	2943a <_svfprintf_r+0x1e2>
   2963a:	2a00      	cmp	r2, #0
   2963c:	d100      	bne.n	29640 <_svfprintf_r+0x3e8>
   2963e:	e335      	b.n	29cac <_svfprintf_r+0xa54>
   29640:	9408      	str	r4, [sp, #32]
   29642:	2b01      	cmp	r3, #1
   29644:	d100      	bne.n	29648 <_svfprintf_r+0x3f0>
   29646:	e3e5      	b.n	29e14 <_svfprintf_r+0xbbc>
   29648:	2b02      	cmp	r3, #2
   2964a:	d000      	beq.n	2964e <_svfprintf_r+0x3f6>
   2964c:	e362      	b.n	29d14 <_svfprintf_r+0xabc>
   2964e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   29650:	200f      	movs	r0, #15
   29652:	46a1      	mov	r9, r4
   29654:	46b4      	mov	ip, r6
   29656:	ab32      	add	r3, sp, #200	; 0xc8
   29658:	0019      	movs	r1, r3
   2965a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2965c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2965e:	0004      	movs	r4, r0
   29660:	464d      	mov	r5, r9
   29662:	4014      	ands	r4, r2
   29664:	5d2c      	ldrb	r4, [r5, r4]
   29666:	071e      	lsls	r6, r3, #28
   29668:	0915      	lsrs	r5, r2, #4
   2966a:	3901      	subs	r1, #1
   2966c:	432e      	orrs	r6, r5
   2966e:	700c      	strb	r4, [r1, #0]
   29670:	091c      	lsrs	r4, r3, #4
   29672:	0023      	movs	r3, r4
   29674:	0034      	movs	r4, r6
   29676:	0032      	movs	r2, r6
   29678:	431c      	orrs	r4, r3
   2967a:	d1f0      	bne.n	2965e <_svfprintf_r+0x406>
   2967c:	920c      	str	r2, [sp, #48]	; 0x30
   2967e:	930d      	str	r3, [sp, #52]	; 0x34
   29680:	ab32      	add	r3, sp, #200	; 0xc8
   29682:	1a5b      	subs	r3, r3, r1
   29684:	9111      	str	r1, [sp, #68]	; 0x44
   29686:	4666      	mov	r6, ip
   29688:	930e      	str	r3, [sp, #56]	; 0x38
   2968a:	e6f5      	b.n	29478 <_svfprintf_r+0x220>
   2968c:	0002fb5c 	.word	0x0002fb5c
   29690:	0002fd04 	.word	0x0002fd04
   29694:	7fefffff 	.word	0x7fefffff
   29698:	0002fcc0 	.word	0x0002fcc0
   2969c:	9312      	str	r3, [sp, #72]	; 0x48
   2969e:	2310      	movs	r3, #16
   296a0:	431c      	orrs	r4, r3
   296a2:	468b      	mov	fp, r1
   296a4:	06a3      	lsls	r3, r4, #26
   296a6:	d500      	bpl.n	296aa <_svfprintf_r+0x452>
   296a8:	e111      	b.n	298ce <_svfprintf_r+0x676>
   296aa:	06e3      	lsls	r3, r4, #27
   296ac:	d501      	bpl.n	296b2 <_svfprintf_r+0x45a>
   296ae:	f000 fc31 	bl	29f14 <_svfprintf_r+0xcbc>
   296b2:	0663      	lsls	r3, r4, #25
   296b4:	d401      	bmi.n	296ba <_svfprintf_r+0x462>
   296b6:	f000 fc2d 	bl	29f14 <_svfprintf_r+0xcbc>
   296ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   296bc:	881a      	ldrh	r2, [r3, #0]
   296be:	920c      	str	r2, [sp, #48]	; 0x30
   296c0:	2200      	movs	r2, #0
   296c2:	3304      	adds	r3, #4
   296c4:	920d      	str	r2, [sp, #52]	; 0x34
   296c6:	930f      	str	r3, [sp, #60]	; 0x3c
   296c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   296ca:	2301      	movs	r3, #1
   296cc:	e7ad      	b.n	2962a <_svfprintf_r+0x3d2>
   296ce:	468b      	mov	fp, r1
   296d0:	4641      	mov	r1, r8
   296d2:	9312      	str	r3, [sp, #72]	; 0x48
   296d4:	2900      	cmp	r1, #0
   296d6:	d001      	beq.n	296dc <_svfprintf_r+0x484>
   296d8:	f001 f890 	bl	2a7fc <_svfprintf_r+0x15a4>
   296dc:	4bb8      	ldr	r3, [pc, #736]	; (299c0 <_svfprintf_r+0x768>)
   296de:	9317      	str	r3, [sp, #92]	; 0x5c
   296e0:	06a3      	lsls	r3, r4, #26
   296e2:	d500      	bpl.n	296e6 <_svfprintf_r+0x48e>
   296e4:	e0ab      	b.n	2983e <_svfprintf_r+0x5e6>
   296e6:	06e3      	lsls	r3, r4, #27
   296e8:	d501      	bpl.n	296ee <_svfprintf_r+0x496>
   296ea:	f000 fc07 	bl	29efc <_svfprintf_r+0xca4>
   296ee:	0663      	lsls	r3, r4, #25
   296f0:	d401      	bmi.n	296f6 <_svfprintf_r+0x49e>
   296f2:	f000 fc03 	bl	29efc <_svfprintf_r+0xca4>
   296f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   296f8:	881a      	ldrh	r2, [r3, #0]
   296fa:	920c      	str	r2, [sp, #48]	; 0x30
   296fc:	2200      	movs	r2, #0
   296fe:	3304      	adds	r3, #4
   29700:	920d      	str	r2, [sp, #52]	; 0x34
   29702:	930f      	str	r3, [sp, #60]	; 0x3c
   29704:	07e3      	lsls	r3, r4, #31
   29706:	d400      	bmi.n	2970a <_svfprintf_r+0x4b2>
   29708:	e0a9      	b.n	2985e <_svfprintf_r+0x606>
   2970a:	990c      	ldr	r1, [sp, #48]	; 0x30
   2970c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2970e:	000b      	movs	r3, r1
   29710:	4313      	orrs	r3, r2
   29712:	001a      	movs	r2, r3
   29714:	2302      	movs	r3, #2
   29716:	2a00      	cmp	r2, #0
   29718:	d100      	bne.n	2971c <_svfprintf_r+0x4c4>
   2971a:	e786      	b.n	2962a <_svfprintf_r+0x3d2>
   2971c:	2030      	movs	r0, #48	; 0x30
   2971e:	a91e      	add	r1, sp, #120	; 0x78
   29720:	7008      	strb	r0, [r1, #0]
   29722:	2548      	movs	r5, #72	; 0x48
   29724:	4668      	mov	r0, sp
   29726:	1940      	adds	r0, r0, r5
   29728:	7800      	ldrb	r0, [r0, #0]
   2972a:	431c      	orrs	r4, r3
   2972c:	7048      	strb	r0, [r1, #1]
   2972e:	e77c      	b.n	2962a <_svfprintf_r+0x3d2>
   29730:	468b      	mov	fp, r1
   29732:	4641      	mov	r1, r8
   29734:	2900      	cmp	r1, #0
   29736:	d001      	beq.n	2973c <_svfprintf_r+0x4e4>
   29738:	f001 f883 	bl	2a842 <_svfprintf_r+0x15ea>
   2973c:	06a3      	lsls	r3, r4, #26
   2973e:	d501      	bpl.n	29744 <_svfprintf_r+0x4ec>
   29740:	f000 fde9 	bl	2a316 <_svfprintf_r+0x10be>
   29744:	06e3      	lsls	r3, r4, #27
   29746:	d501      	bpl.n	2974c <_svfprintf_r+0x4f4>
   29748:	f000 fd9b 	bl	2a282 <_svfprintf_r+0x102a>
   2974c:	0663      	lsls	r3, r4, #25
   2974e:	d401      	bmi.n	29754 <_svfprintf_r+0x4fc>
   29750:	f000 fd97 	bl	2a282 <_svfprintf_r+0x102a>
   29754:	4669      	mov	r1, sp
   29756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29758:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   2975a:	681a      	ldr	r2, [r3, #0]
   2975c:	3304      	adds	r3, #4
   2975e:	9207      	str	r2, [sp, #28]
   29760:	8011      	strh	r1, [r2, #0]
   29762:	930f      	str	r3, [sp, #60]	; 0x3c
   29764:	e5a3      	b.n	292ae <_svfprintf_r+0x56>
   29766:	464b      	mov	r3, r9
   29768:	431c      	orrs	r4, r3
   2976a:	780b      	ldrb	r3, [r1, #0]
   2976c:	e5d8      	b.n	29320 <_svfprintf_r+0xc8>
   2976e:	9312      	str	r3, [sp, #72]	; 0x48
   29770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29772:	468b      	mov	fp, r1
   29774:	1d1d      	adds	r5, r3, #4
   29776:	681b      	ldr	r3, [r3, #0]
   29778:	a916      	add	r1, sp, #88	; 0x58
   2977a:	001a      	movs	r2, r3
   2977c:	9311      	str	r3, [sp, #68]	; 0x44
   2977e:	2300      	movs	r3, #0
   29780:	77cb      	strb	r3, [r1, #31]
   29782:	2a00      	cmp	r2, #0
   29784:	d101      	bne.n	2978a <_svfprintf_r+0x532>
   29786:	f000 fefb 	bl	2a580 <_svfprintf_r+0x1328>
   2978a:	4653      	mov	r3, sl
   2978c:	3301      	adds	r3, #1
   2978e:	d101      	bne.n	29794 <_svfprintf_r+0x53c>
   29790:	f000 fe38 	bl	2a404 <_svfprintf_r+0x11ac>
   29794:	4652      	mov	r2, sl
   29796:	2100      	movs	r1, #0
   29798:	9811      	ldr	r0, [sp, #68]	; 0x44
   2979a:	f002 fbc3 	bl	2bf24 <memchr>
   2979e:	2800      	cmp	r0, #0
   297a0:	d101      	bne.n	297a6 <_svfprintf_r+0x54e>
   297a2:	f000 ff54 	bl	2a64e <_svfprintf_r+0x13f6>
   297a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   297a8:	1ac3      	subs	r3, r0, r3
   297aa:	001a      	movs	r2, r3
   297ac:	930e      	str	r3, [sp, #56]	; 0x38
   297ae:	43db      	mvns	r3, r3
   297b0:	17db      	asrs	r3, r3, #31
   297b2:	401a      	ands	r2, r3
   297b4:	ab16      	add	r3, sp, #88	; 0x58
   297b6:	7fdb      	ldrb	r3, [r3, #31]
   297b8:	9207      	str	r2, [sp, #28]
   297ba:	4698      	mov	r8, r3
   297bc:	2300      	movs	r3, #0
   297be:	950f      	str	r5, [sp, #60]	; 0x3c
   297c0:	9408      	str	r4, [sp, #32]
   297c2:	469a      	mov	sl, r3
   297c4:	9313      	str	r3, [sp, #76]	; 0x4c
   297c6:	e65f      	b.n	29488 <_svfprintf_r+0x230>
   297c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   297ca:	9312      	str	r3, [sp, #72]	; 0x48
   297cc:	6813      	ldr	r3, [r2, #0]
   297ce:	ad28      	add	r5, sp, #160	; 0xa0
   297d0:	9307      	str	r3, [sp, #28]
   297d2:	466b      	mov	r3, sp
   297d4:	7f1b      	ldrb	r3, [r3, #28]
   297d6:	468b      	mov	fp, r1
   297d8:	702b      	strb	r3, [r5, #0]
   297da:	2300      	movs	r3, #0
   297dc:	a916      	add	r1, sp, #88	; 0x58
   297de:	77cb      	strb	r3, [r1, #31]
   297e0:	0013      	movs	r3, r2
   297e2:	3304      	adds	r3, #4
   297e4:	930f      	str	r3, [sp, #60]	; 0x3c
   297e6:	2300      	movs	r3, #0
   297e8:	9408      	str	r4, [sp, #32]
   297ea:	4698      	mov	r8, r3
   297ec:	3301      	adds	r3, #1
   297ee:	9307      	str	r3, [sp, #28]
   297f0:	930e      	str	r3, [sp, #56]	; 0x38
   297f2:	2300      	movs	r3, #0
   297f4:	9511      	str	r5, [sp, #68]	; 0x44
   297f6:	469a      	mov	sl, r3
   297f8:	9313      	str	r3, [sp, #76]	; 0x4c
   297fa:	e64b      	b.n	29494 <_svfprintf_r+0x23c>
   297fc:	468b      	mov	fp, r1
   297fe:	4641      	mov	r1, r8
   29800:	9312      	str	r3, [sp, #72]	; 0x48
   29802:	2900      	cmp	r1, #0
   29804:	d100      	bne.n	29808 <_svfprintf_r+0x5b0>
   29806:	e5f4      	b.n	293f2 <_svfprintf_r+0x19a>
   29808:	ab16      	add	r3, sp, #88	; 0x58
   2980a:	77d8      	strb	r0, [r3, #31]
   2980c:	e5f1      	b.n	293f2 <_svfprintf_r+0x19a>
   2980e:	4663      	mov	r3, ip
   29810:	431c      	orrs	r4, r3
   29812:	780b      	ldrb	r3, [r1, #0]
   29814:	e584      	b.n	29320 <_svfprintf_r+0xc8>
   29816:	780b      	ldrb	r3, [r1, #0]
   29818:	2b6c      	cmp	r3, #108	; 0x6c
   2981a:	d101      	bne.n	29820 <_svfprintf_r+0x5c8>
   2981c:	f000 fd86 	bl	2a32c <_svfprintf_r+0x10d4>
   29820:	2210      	movs	r2, #16
   29822:	4314      	orrs	r4, r2
   29824:	e57c      	b.n	29320 <_svfprintf_r+0xc8>
   29826:	468b      	mov	fp, r1
   29828:	4641      	mov	r1, r8
   2982a:	9312      	str	r3, [sp, #72]	; 0x48
   2982c:	2900      	cmp	r1, #0
   2982e:	d001      	beq.n	29834 <_svfprintf_r+0x5dc>
   29830:	f000 ffe8 	bl	2a804 <_svfprintf_r+0x15ac>
   29834:	4b63      	ldr	r3, [pc, #396]	; (299c4 <_svfprintf_r+0x76c>)
   29836:	9317      	str	r3, [sp, #92]	; 0x5c
   29838:	06a3      	lsls	r3, r4, #26
   2983a:	d400      	bmi.n	2983e <_svfprintf_r+0x5e6>
   2983c:	e753      	b.n	296e6 <_svfprintf_r+0x48e>
   2983e:	2207      	movs	r2, #7
   29840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29842:	3307      	adds	r3, #7
   29844:	4393      	bics	r3, r2
   29846:	3201      	adds	r2, #1
   29848:	4694      	mov	ip, r2
   2984a:	449c      	add	ip, r3
   2984c:	4662      	mov	r2, ip
   2984e:	920f      	str	r2, [sp, #60]	; 0x3c
   29850:	681a      	ldr	r2, [r3, #0]
   29852:	685b      	ldr	r3, [r3, #4]
   29854:	920c      	str	r2, [sp, #48]	; 0x30
   29856:	930d      	str	r3, [sp, #52]	; 0x34
   29858:	07e3      	lsls	r3, r4, #31
   2985a:	d500      	bpl.n	2985e <_svfprintf_r+0x606>
   2985c:	e755      	b.n	2970a <_svfprintf_r+0x4b2>
   2985e:	990c      	ldr	r1, [sp, #48]	; 0x30
   29860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   29862:	0008      	movs	r0, r1
   29864:	4310      	orrs	r0, r2
   29866:	2302      	movs	r3, #2
   29868:	0002      	movs	r2, r0
   2986a:	e6de      	b.n	2962a <_svfprintf_r+0x3d2>
   2986c:	468b      	mov	fp, r1
   2986e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   29870:	2230      	movs	r2, #48	; 0x30
   29872:	680b      	ldr	r3, [r1, #0]
   29874:	930c      	str	r3, [sp, #48]	; 0x30
   29876:	2300      	movs	r3, #0
   29878:	930d      	str	r3, [sp, #52]	; 0x34
   2987a:	3302      	adds	r3, #2
   2987c:	431c      	orrs	r4, r3
   2987e:	ab1e      	add	r3, sp, #120	; 0x78
   29880:	701a      	strb	r2, [r3, #0]
   29882:	3248      	adds	r2, #72	; 0x48
   29884:	705a      	strb	r2, [r3, #1]
   29886:	000b      	movs	r3, r1
   29888:	3304      	adds	r3, #4
   2988a:	930f      	str	r3, [sp, #60]	; 0x3c
   2988c:	4b4d      	ldr	r3, [pc, #308]	; (299c4 <_svfprintf_r+0x76c>)
   2988e:	9212      	str	r2, [sp, #72]	; 0x48
   29890:	9317      	str	r3, [sp, #92]	; 0x5c
   29892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   29894:	2302      	movs	r3, #2
   29896:	e6c8      	b.n	2962a <_svfprintf_r+0x3d2>
   29898:	2301      	movs	r3, #1
   2989a:	431c      	orrs	r4, r3
   2989c:	780b      	ldrb	r3, [r1, #0]
   2989e:	e53f      	b.n	29320 <_svfprintf_r+0xc8>
   298a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   298a2:	1d1a      	adds	r2, r3, #4
   298a4:	681b      	ldr	r3, [r3, #0]
   298a6:	930b      	str	r3, [sp, #44]	; 0x2c
   298a8:	2b00      	cmp	r3, #0
   298aa:	da00      	bge.n	298ae <_svfprintf_r+0x656>
   298ac:	e542      	b.n	29334 <_svfprintf_r+0xdc>
   298ae:	780b      	ldrb	r3, [r1, #0]
   298b0:	920f      	str	r2, [sp, #60]	; 0x3c
   298b2:	e535      	b.n	29320 <_svfprintf_r+0xc8>
   298b4:	780b      	ldrb	r3, [r1, #0]
   298b6:	2800      	cmp	r0, #0
   298b8:	d000      	beq.n	298bc <_svfprintf_r+0x664>
   298ba:	e531      	b.n	29320 <_svfprintf_r+0xc8>
   298bc:	2201      	movs	r2, #1
   298be:	3020      	adds	r0, #32
   298c0:	4690      	mov	r8, r2
   298c2:	e52d      	b.n	29320 <_svfprintf_r+0xc8>
   298c4:	468b      	mov	fp, r1
   298c6:	9312      	str	r3, [sp, #72]	; 0x48
   298c8:	06a3      	lsls	r3, r4, #26
   298ca:	d400      	bmi.n	298ce <_svfprintf_r+0x676>
   298cc:	e6ed      	b.n	296aa <_svfprintf_r+0x452>
   298ce:	2207      	movs	r2, #7
   298d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   298d2:	3307      	adds	r3, #7
   298d4:	4393      	bics	r3, r2
   298d6:	3201      	adds	r2, #1
   298d8:	4694      	mov	ip, r2
   298da:	449c      	add	ip, r3
   298dc:	4662      	mov	r2, ip
   298de:	920f      	str	r2, [sp, #60]	; 0x3c
   298e0:	681a      	ldr	r2, [r3, #0]
   298e2:	685b      	ldr	r3, [r3, #4]
   298e4:	0011      	movs	r1, r2
   298e6:	001a      	movs	r2, r3
   298e8:	0008      	movs	r0, r1
   298ea:	4310      	orrs	r0, r2
   298ec:	910c      	str	r1, [sp, #48]	; 0x30
   298ee:	920d      	str	r2, [sp, #52]	; 0x34
   298f0:	2301      	movs	r3, #1
   298f2:	0002      	movs	r2, r0
   298f4:	e699      	b.n	2962a <_svfprintf_r+0x3d2>
   298f6:	468b      	mov	fp, r1
   298f8:	9312      	str	r3, [sp, #72]	; 0x48
   298fa:	06a3      	lsls	r3, r4, #26
   298fc:	d400      	bmi.n	29900 <_svfprintf_r+0x6a8>
   298fe:	e683      	b.n	29608 <_svfprintf_r+0x3b0>
   29900:	2207      	movs	r2, #7
   29902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29904:	3307      	adds	r3, #7
   29906:	4393      	bics	r3, r2
   29908:	3201      	adds	r2, #1
   2990a:	4694      	mov	ip, r2
   2990c:	449c      	add	ip, r3
   2990e:	4662      	mov	r2, ip
   29910:	920f      	str	r2, [sp, #60]	; 0x3c
   29912:	681a      	ldr	r2, [r3, #0]
   29914:	685b      	ldr	r3, [r3, #4]
   29916:	0011      	movs	r1, r2
   29918:	001a      	movs	r2, r3
   2991a:	0008      	movs	r0, r1
   2991c:	4310      	orrs	r0, r2
   2991e:	910c      	str	r1, [sp, #48]	; 0x30
   29920:	920d      	str	r2, [sp, #52]	; 0x34
   29922:	2300      	movs	r3, #0
   29924:	0002      	movs	r2, r0
   29926:	e680      	b.n	2962a <_svfprintf_r+0x3d2>
   29928:	468b      	mov	fp, r1
   2992a:	4641      	mov	r1, r8
   2992c:	9312      	str	r3, [sp, #72]	; 0x48
   2992e:	2900      	cmp	r1, #0
   29930:	d001      	beq.n	29936 <_svfprintf_r+0x6de>
   29932:	f000 ff7f 	bl	2a834 <_svfprintf_r+0x15dc>
   29936:	9b12      	ldr	r3, [sp, #72]	; 0x48
   29938:	2b00      	cmp	r3, #0
   2993a:	d100      	bne.n	2993e <_svfprintf_r+0x6e6>
   2993c:	e50b      	b.n	29356 <_svfprintf_r+0xfe>
   2993e:	ad28      	add	r5, sp, #160	; 0xa0
   29940:	702b      	strb	r3, [r5, #0]
   29942:	2300      	movs	r3, #0
   29944:	aa16      	add	r2, sp, #88	; 0x58
   29946:	77d3      	strb	r3, [r2, #31]
   29948:	9408      	str	r4, [sp, #32]
   2994a:	e74e      	b.n	297ea <_svfprintf_r+0x592>
   2994c:	68bc      	ldr	r4, [r7, #8]
   2994e:	4643      	mov	r3, r8
   29950:	2b00      	cmp	r3, #0
   29952:	d00f      	beq.n	29974 <_svfprintf_r+0x71c>
   29954:	aa16      	add	r2, sp, #88	; 0x58
   29956:	231f      	movs	r3, #31
   29958:	4694      	mov	ip, r2
   2995a:	4463      	add	r3, ip
   2995c:	6033      	str	r3, [r6, #0]
   2995e:	2301      	movs	r3, #1
   29960:	6073      	str	r3, [r6, #4]
   29962:	687b      	ldr	r3, [r7, #4]
   29964:	3401      	adds	r4, #1
   29966:	3301      	adds	r3, #1
   29968:	60bc      	str	r4, [r7, #8]
   2996a:	607b      	str	r3, [r7, #4]
   2996c:	2b07      	cmp	r3, #7
   2996e:	dd00      	ble.n	29972 <_svfprintf_r+0x71a>
   29970:	e1b3      	b.n	29cda <_svfprintf_r+0xa82>
   29972:	3608      	adds	r6, #8
   29974:	464b      	mov	r3, r9
   29976:	2b00      	cmp	r3, #0
   29978:	d00c      	beq.n	29994 <_svfprintf_r+0x73c>
   2997a:	ab1e      	add	r3, sp, #120	; 0x78
   2997c:	6033      	str	r3, [r6, #0]
   2997e:	2302      	movs	r3, #2
   29980:	6073      	str	r3, [r6, #4]
   29982:	687b      	ldr	r3, [r7, #4]
   29984:	3402      	adds	r4, #2
   29986:	3301      	adds	r3, #1
   29988:	60bc      	str	r4, [r7, #8]
   2998a:	607b      	str	r3, [r7, #4]
   2998c:	2b07      	cmp	r3, #7
   2998e:	dd00      	ble.n	29992 <_svfprintf_r+0x73a>
   29990:	e1af      	b.n	29cf2 <_svfprintf_r+0xa9a>
   29992:	3608      	adds	r6, #8
   29994:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29996:	2b80      	cmp	r3, #128	; 0x80
   29998:	d100      	bne.n	2999c <_svfprintf_r+0x744>
   2999a:	e120      	b.n	29bde <_svfprintf_r+0x986>
   2999c:	4653      	mov	r3, sl
   2999e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   299a0:	1a9d      	subs	r5, r3, r2
   299a2:	2d00      	cmp	r5, #0
   299a4:	dd3c      	ble.n	29a20 <_svfprintf_r+0x7c8>
   299a6:	4a08      	ldr	r2, [pc, #32]	; (299c8 <_svfprintf_r+0x770>)
   299a8:	687b      	ldr	r3, [r7, #4]
   299aa:	4691      	mov	r9, r2
   299ac:	2d10      	cmp	r5, #16
   299ae:	dd2c      	ble.n	29a0a <_svfprintf_r+0x7b2>
   299b0:	2210      	movs	r2, #16
   299b2:	0021      	movs	r1, r4
   299b4:	4692      	mov	sl, r2
   299b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   299b8:	0032      	movs	r2, r6
   299ba:	002e      	movs	r6, r5
   299bc:	464d      	mov	r5, r9
   299be:	e009      	b.n	299d4 <_svfprintf_r+0x77c>
   299c0:	0002fcd0 	.word	0x0002fcd0
   299c4:	0002fce4 	.word	0x0002fce4
   299c8:	0002fd14 	.word	0x0002fd14
   299cc:	3e10      	subs	r6, #16
   299ce:	3208      	adds	r2, #8
   299d0:	2e10      	cmp	r6, #16
   299d2:	dd16      	ble.n	29a02 <_svfprintf_r+0x7aa>
   299d4:	4650      	mov	r0, sl
   299d6:	3110      	adds	r1, #16
   299d8:	3301      	adds	r3, #1
   299da:	6015      	str	r5, [r2, #0]
   299dc:	6050      	str	r0, [r2, #4]
   299de:	60b9      	str	r1, [r7, #8]
   299e0:	607b      	str	r3, [r7, #4]
   299e2:	2b07      	cmp	r3, #7
   299e4:	ddf2      	ble.n	299cc <_svfprintf_r+0x774>
   299e6:	003a      	movs	r2, r7
   299e8:	9906      	ldr	r1, [sp, #24]
   299ea:	0020      	movs	r0, r4
   299ec:	f002 fed8 	bl	2c7a0 <__ssprint_r>
   299f0:	2800      	cmp	r0, #0
   299f2:	d000      	beq.n	299f6 <_svfprintf_r+0x79e>
   299f4:	e4b7      	b.n	29366 <_svfprintf_r+0x10e>
   299f6:	3e10      	subs	r6, #16
   299f8:	68b9      	ldr	r1, [r7, #8]
   299fa:	687b      	ldr	r3, [r7, #4]
   299fc:	aa32      	add	r2, sp, #200	; 0xc8
   299fe:	2e10      	cmp	r6, #16
   29a00:	dce8      	bgt.n	299d4 <_svfprintf_r+0x77c>
   29a02:	46a9      	mov	r9, r5
   29a04:	000c      	movs	r4, r1
   29a06:	0035      	movs	r5, r6
   29a08:	0016      	movs	r6, r2
   29a0a:	464a      	mov	r2, r9
   29a0c:	1964      	adds	r4, r4, r5
   29a0e:	3301      	adds	r3, #1
   29a10:	6032      	str	r2, [r6, #0]
   29a12:	6075      	str	r5, [r6, #4]
   29a14:	60bc      	str	r4, [r7, #8]
   29a16:	607b      	str	r3, [r7, #4]
   29a18:	2b07      	cmp	r3, #7
   29a1a:	dd00      	ble.n	29a1e <_svfprintf_r+0x7c6>
   29a1c:	e151      	b.n	29cc2 <_svfprintf_r+0xa6a>
   29a1e:	3608      	adds	r6, #8
   29a20:	9b08      	ldr	r3, [sp, #32]
   29a22:	05db      	lsls	r3, r3, #23
   29a24:	d500      	bpl.n	29a28 <_svfprintf_r+0x7d0>
   29a26:	e0b6      	b.n	29b96 <_svfprintf_r+0x93e>
   29a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   29a2a:	6033      	str	r3, [r6, #0]
   29a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29a2e:	469c      	mov	ip, r3
   29a30:	6073      	str	r3, [r6, #4]
   29a32:	687b      	ldr	r3, [r7, #4]
   29a34:	4464      	add	r4, ip
   29a36:	3301      	adds	r3, #1
   29a38:	60bc      	str	r4, [r7, #8]
   29a3a:	607b      	str	r3, [r7, #4]
   29a3c:	2b07      	cmp	r3, #7
   29a3e:	dd00      	ble.n	29a42 <_svfprintf_r+0x7ea>
   29a40:	e09d      	b.n	29b7e <_svfprintf_r+0x926>
   29a42:	3608      	adds	r6, #8
   29a44:	9b08      	ldr	r3, [sp, #32]
   29a46:	075b      	lsls	r3, r3, #29
   29a48:	d541      	bpl.n	29ace <_svfprintf_r+0x876>
   29a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   29a4c:	9a07      	ldr	r2, [sp, #28]
   29a4e:	1a9d      	subs	r5, r3, r2
   29a50:	2d00      	cmp	r5, #0
   29a52:	dd3c      	ble.n	29ace <_svfprintf_r+0x876>
   29a54:	4ac4      	ldr	r2, [pc, #784]	; (29d68 <_svfprintf_r+0xb10>)
   29a56:	687b      	ldr	r3, [r7, #4]
   29a58:	4690      	mov	r8, r2
   29a5a:	2d10      	cmp	r5, #16
   29a5c:	dd26      	ble.n	29aac <_svfprintf_r+0x854>
   29a5e:	2210      	movs	r2, #16
   29a60:	0021      	movs	r1, r4
   29a62:	4691      	mov	r9, r2
   29a64:	9c09      	ldr	r4, [sp, #36]	; 0x24
   29a66:	0032      	movs	r2, r6
   29a68:	002e      	movs	r6, r5
   29a6a:	9d06      	ldr	r5, [sp, #24]
   29a6c:	e003      	b.n	29a76 <_svfprintf_r+0x81e>
   29a6e:	3e10      	subs	r6, #16
   29a70:	3208      	adds	r2, #8
   29a72:	2e10      	cmp	r6, #16
   29a74:	dd17      	ble.n	29aa6 <_svfprintf_r+0x84e>
   29a76:	48bc      	ldr	r0, [pc, #752]	; (29d68 <_svfprintf_r+0xb10>)
   29a78:	3110      	adds	r1, #16
   29a7a:	6010      	str	r0, [r2, #0]
   29a7c:	4648      	mov	r0, r9
   29a7e:	3301      	adds	r3, #1
   29a80:	6050      	str	r0, [r2, #4]
   29a82:	60b9      	str	r1, [r7, #8]
   29a84:	607b      	str	r3, [r7, #4]
   29a86:	2b07      	cmp	r3, #7
   29a88:	ddf1      	ble.n	29a6e <_svfprintf_r+0x816>
   29a8a:	003a      	movs	r2, r7
   29a8c:	0029      	movs	r1, r5
   29a8e:	0020      	movs	r0, r4
   29a90:	f002 fe86 	bl	2c7a0 <__ssprint_r>
   29a94:	2800      	cmp	r0, #0
   29a96:	d000      	beq.n	29a9a <_svfprintf_r+0x842>
   29a98:	e465      	b.n	29366 <_svfprintf_r+0x10e>
   29a9a:	3e10      	subs	r6, #16
   29a9c:	68b9      	ldr	r1, [r7, #8]
   29a9e:	687b      	ldr	r3, [r7, #4]
   29aa0:	aa32      	add	r2, sp, #200	; 0xc8
   29aa2:	2e10      	cmp	r6, #16
   29aa4:	dce7      	bgt.n	29a76 <_svfprintf_r+0x81e>
   29aa6:	0035      	movs	r5, r6
   29aa8:	000c      	movs	r4, r1
   29aaa:	0016      	movs	r6, r2
   29aac:	4642      	mov	r2, r8
   29aae:	1964      	adds	r4, r4, r5
   29ab0:	3301      	adds	r3, #1
   29ab2:	c624      	stmia	r6!, {r2, r5}
   29ab4:	60bc      	str	r4, [r7, #8]
   29ab6:	607b      	str	r3, [r7, #4]
   29ab8:	2b07      	cmp	r3, #7
   29aba:	dd08      	ble.n	29ace <_svfprintf_r+0x876>
   29abc:	003a      	movs	r2, r7
   29abe:	9906      	ldr	r1, [sp, #24]
   29ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
   29ac2:	f002 fe6d 	bl	2c7a0 <__ssprint_r>
   29ac6:	2800      	cmp	r0, #0
   29ac8:	d000      	beq.n	29acc <_svfprintf_r+0x874>
   29aca:	e44c      	b.n	29366 <_svfprintf_r+0x10e>
   29acc:	68bc      	ldr	r4, [r7, #8]
   29ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   29ad0:	9907      	ldr	r1, [sp, #28]
   29ad2:	428b      	cmp	r3, r1
   29ad4:	da00      	bge.n	29ad8 <_svfprintf_r+0x880>
   29ad6:	000b      	movs	r3, r1
   29ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   29ada:	4694      	mov	ip, r2
   29adc:	449c      	add	ip, r3
   29ade:	4663      	mov	r3, ip
   29ae0:	930a      	str	r3, [sp, #40]	; 0x28
   29ae2:	2c00      	cmp	r4, #0
   29ae4:	d000      	beq.n	29ae8 <_svfprintf_r+0x890>
   29ae6:	e0d6      	b.n	29c96 <_svfprintf_r+0xa3e>
   29ae8:	2300      	movs	r3, #0
   29aea:	ae32      	add	r6, sp, #200	; 0xc8
   29aec:	607b      	str	r3, [r7, #4]
   29aee:	f7ff fbde 	bl	292ae <_svfprintf_r+0x56>
   29af2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   29af4:	2b01      	cmp	r3, #1
   29af6:	dc00      	bgt.n	29afa <_svfprintf_r+0x8a2>
   29af8:	e0ae      	b.n	29c58 <_svfprintf_r+0xa00>
   29afa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   29afc:	3401      	adds	r4, #1
   29afe:	6033      	str	r3, [r6, #0]
   29b00:	2301      	movs	r3, #1
   29b02:	6073      	str	r3, [r6, #4]
   29b04:	687b      	ldr	r3, [r7, #4]
   29b06:	60bc      	str	r4, [r7, #8]
   29b08:	3301      	adds	r3, #1
   29b0a:	607b      	str	r3, [r7, #4]
   29b0c:	2b07      	cmp	r3, #7
   29b0e:	dd00      	ble.n	29b12 <_svfprintf_r+0x8ba>
   29b10:	e2df      	b.n	2a0d2 <_svfprintf_r+0xe7a>
   29b12:	3608      	adds	r6, #8
   29b14:	9a19      	ldr	r2, [sp, #100]	; 0x64
   29b16:	3301      	adds	r3, #1
   29b18:	6032      	str	r2, [r6, #0]
   29b1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   29b1c:	4698      	mov	r8, r3
   29b1e:	4694      	mov	ip, r2
   29b20:	4464      	add	r4, ip
   29b22:	6072      	str	r2, [r6, #4]
   29b24:	60bc      	str	r4, [r7, #8]
   29b26:	607b      	str	r3, [r7, #4]
   29b28:	2b07      	cmp	r3, #7
   29b2a:	dd00      	ble.n	29b2e <_svfprintf_r+0x8d6>
   29b2c:	e2de      	b.n	2a0ec <_svfprintf_r+0xe94>
   29b2e:	3608      	adds	r6, #8
   29b30:	2200      	movs	r2, #0
   29b32:	2300      	movs	r3, #0
   29b34:	9816      	ldr	r0, [sp, #88]	; 0x58
   29b36:	9915      	ldr	r1, [sp, #84]	; 0x54
   29b38:	f7fc f886 	bl	25c48 <__aeabi_dcmpeq>
   29b3c:	2800      	cmp	r0, #0
   29b3e:	d000      	beq.n	29b42 <_svfprintf_r+0x8ea>
   29b40:	e1a4      	b.n	29e8c <_svfprintf_r+0xc34>
   29b42:	9d11      	ldr	r5, [sp, #68]	; 0x44
   29b44:	9b14      	ldr	r3, [sp, #80]	; 0x50
   29b46:	3501      	adds	r5, #1
   29b48:	3b01      	subs	r3, #1
   29b4a:	6035      	str	r5, [r6, #0]
   29b4c:	6073      	str	r3, [r6, #4]
   29b4e:	18e4      	adds	r4, r4, r3
   29b50:	2301      	movs	r3, #1
   29b52:	469c      	mov	ip, r3
   29b54:	44e0      	add	r8, ip
   29b56:	4643      	mov	r3, r8
   29b58:	60bc      	str	r4, [r7, #8]
   29b5a:	607b      	str	r3, [r7, #4]
   29b5c:	2b07      	cmp	r3, #7
   29b5e:	dd00      	ble.n	29b62 <_svfprintf_r+0x90a>
   29b60:	e08b      	b.n	29c7a <_svfprintf_r+0xa22>
   29b62:	3608      	adds	r6, #8
   29b64:	ab21      	add	r3, sp, #132	; 0x84
   29b66:	6033      	str	r3, [r6, #0]
   29b68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   29b6a:	469c      	mov	ip, r3
   29b6c:	6073      	str	r3, [r6, #4]
   29b6e:	4643      	mov	r3, r8
   29b70:	4464      	add	r4, ip
   29b72:	3301      	adds	r3, #1
   29b74:	60bc      	str	r4, [r7, #8]
   29b76:	607b      	str	r3, [r7, #4]
   29b78:	2b07      	cmp	r3, #7
   29b7a:	dc00      	bgt.n	29b7e <_svfprintf_r+0x926>
   29b7c:	e761      	b.n	29a42 <_svfprintf_r+0x7ea>
   29b7e:	003a      	movs	r2, r7
   29b80:	9906      	ldr	r1, [sp, #24]
   29b82:	9809      	ldr	r0, [sp, #36]	; 0x24
   29b84:	f002 fe0c 	bl	2c7a0 <__ssprint_r>
   29b88:	2800      	cmp	r0, #0
   29b8a:	d001      	beq.n	29b90 <_svfprintf_r+0x938>
   29b8c:	f7ff fbeb 	bl	29366 <_svfprintf_r+0x10e>
   29b90:	68bc      	ldr	r4, [r7, #8]
   29b92:	ae32      	add	r6, sp, #200	; 0xc8
   29b94:	e756      	b.n	29a44 <_svfprintf_r+0x7ec>
   29b96:	9b12      	ldr	r3, [sp, #72]	; 0x48
   29b98:	2b65      	cmp	r3, #101	; 0x65
   29b9a:	ddaa      	ble.n	29af2 <_svfprintf_r+0x89a>
   29b9c:	2200      	movs	r2, #0
   29b9e:	2300      	movs	r3, #0
   29ba0:	9816      	ldr	r0, [sp, #88]	; 0x58
   29ba2:	9915      	ldr	r1, [sp, #84]	; 0x54
   29ba4:	f7fc f850 	bl	25c48 <__aeabi_dcmpeq>
   29ba8:	2800      	cmp	r0, #0
   29baa:	d100      	bne.n	29bae <_svfprintf_r+0x956>
   29bac:	e0e2      	b.n	29d74 <_svfprintf_r+0xb1c>
   29bae:	4b6f      	ldr	r3, [pc, #444]	; (29d6c <_svfprintf_r+0xb14>)
   29bb0:	3401      	adds	r4, #1
   29bb2:	6033      	str	r3, [r6, #0]
   29bb4:	2301      	movs	r3, #1
   29bb6:	6073      	str	r3, [r6, #4]
   29bb8:	687b      	ldr	r3, [r7, #4]
   29bba:	60bc      	str	r4, [r7, #8]
   29bbc:	3301      	adds	r3, #1
   29bbe:	607b      	str	r3, [r7, #4]
   29bc0:	2b07      	cmp	r3, #7
   29bc2:	dd00      	ble.n	29bc6 <_svfprintf_r+0x96e>
   29bc4:	e366      	b.n	2a294 <_svfprintf_r+0x103c>
   29bc6:	3608      	adds	r6, #8
   29bc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   29bca:	9a14      	ldr	r2, [sp, #80]	; 0x50
   29bcc:	4293      	cmp	r3, r2
   29bce:	da00      	bge.n	29bd2 <_svfprintf_r+0x97a>
   29bd0:	e1a4      	b.n	29f1c <_svfprintf_r+0xcc4>
   29bd2:	9b08      	ldr	r3, [sp, #32]
   29bd4:	07db      	lsls	r3, r3, #31
   29bd6:	d500      	bpl.n	29bda <_svfprintf_r+0x982>
   29bd8:	e1a0      	b.n	29f1c <_svfprintf_r+0xcc4>
   29bda:	68bc      	ldr	r4, [r7, #8]
   29bdc:	e732      	b.n	29a44 <_svfprintf_r+0x7ec>
   29bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   29be0:	9a07      	ldr	r2, [sp, #28]
   29be2:	1a9d      	subs	r5, r3, r2
   29be4:	2d00      	cmp	r5, #0
   29be6:	dc00      	bgt.n	29bea <_svfprintf_r+0x992>
   29be8:	e6d8      	b.n	2999c <_svfprintf_r+0x744>
   29bea:	4a61      	ldr	r2, [pc, #388]	; (29d70 <_svfprintf_r+0xb18>)
   29bec:	687b      	ldr	r3, [r7, #4]
   29bee:	4691      	mov	r9, r2
   29bf0:	2d10      	cmp	r5, #16
   29bf2:	dd25      	ble.n	29c40 <_svfprintf_r+0x9e8>
   29bf4:	2210      	movs	r2, #16
   29bf6:	0021      	movs	r1, r4
   29bf8:	4690      	mov	r8, r2
   29bfa:	9c09      	ldr	r4, [sp, #36]	; 0x24
   29bfc:	0032      	movs	r2, r6
   29bfe:	464e      	mov	r6, r9
   29c00:	e003      	b.n	29c0a <_svfprintf_r+0x9b2>
   29c02:	3d10      	subs	r5, #16
   29c04:	3208      	adds	r2, #8
   29c06:	2d10      	cmp	r5, #16
   29c08:	dd17      	ble.n	29c3a <_svfprintf_r+0x9e2>
   29c0a:	4640      	mov	r0, r8
   29c0c:	3110      	adds	r1, #16
   29c0e:	3301      	adds	r3, #1
   29c10:	6016      	str	r6, [r2, #0]
   29c12:	6050      	str	r0, [r2, #4]
   29c14:	60b9      	str	r1, [r7, #8]
   29c16:	607b      	str	r3, [r7, #4]
   29c18:	2b07      	cmp	r3, #7
   29c1a:	ddf2      	ble.n	29c02 <_svfprintf_r+0x9aa>
   29c1c:	003a      	movs	r2, r7
   29c1e:	9906      	ldr	r1, [sp, #24]
   29c20:	0020      	movs	r0, r4
   29c22:	f002 fdbd 	bl	2c7a0 <__ssprint_r>
   29c26:	2800      	cmp	r0, #0
   29c28:	d001      	beq.n	29c2e <_svfprintf_r+0x9d6>
   29c2a:	f7ff fb9c 	bl	29366 <_svfprintf_r+0x10e>
   29c2e:	3d10      	subs	r5, #16
   29c30:	68b9      	ldr	r1, [r7, #8]
   29c32:	687b      	ldr	r3, [r7, #4]
   29c34:	aa32      	add	r2, sp, #200	; 0xc8
   29c36:	2d10      	cmp	r5, #16
   29c38:	dce7      	bgt.n	29c0a <_svfprintf_r+0x9b2>
   29c3a:	46b1      	mov	r9, r6
   29c3c:	000c      	movs	r4, r1
   29c3e:	0016      	movs	r6, r2
   29c40:	464a      	mov	r2, r9
   29c42:	1964      	adds	r4, r4, r5
   29c44:	3301      	adds	r3, #1
   29c46:	6032      	str	r2, [r6, #0]
   29c48:	6075      	str	r5, [r6, #4]
   29c4a:	60bc      	str	r4, [r7, #8]
   29c4c:	607b      	str	r3, [r7, #4]
   29c4e:	2b07      	cmp	r3, #7
   29c50:	dd00      	ble.n	29c54 <_svfprintf_r+0x9fc>
   29c52:	e27e      	b.n	2a152 <_svfprintf_r+0xefa>
   29c54:	3608      	adds	r6, #8
   29c56:	e6a1      	b.n	2999c <_svfprintf_r+0x744>
   29c58:	2301      	movs	r3, #1
   29c5a:	9a08      	ldr	r2, [sp, #32]
   29c5c:	4213      	tst	r3, r2
   29c5e:	d000      	beq.n	29c62 <_svfprintf_r+0xa0a>
   29c60:	e74b      	b.n	29afa <_svfprintf_r+0x8a2>
   29c62:	6073      	str	r3, [r6, #4]
   29c64:	687b      	ldr	r3, [r7, #4]
   29c66:	9a11      	ldr	r2, [sp, #68]	; 0x44
   29c68:	3301      	adds	r3, #1
   29c6a:	3401      	adds	r4, #1
   29c6c:	6032      	str	r2, [r6, #0]
   29c6e:	60bc      	str	r4, [r7, #8]
   29c70:	4698      	mov	r8, r3
   29c72:	607b      	str	r3, [r7, #4]
   29c74:	2b07      	cmp	r3, #7
   29c76:	dc00      	bgt.n	29c7a <_svfprintf_r+0xa22>
   29c78:	e773      	b.n	29b62 <_svfprintf_r+0x90a>
   29c7a:	003a      	movs	r2, r7
   29c7c:	9906      	ldr	r1, [sp, #24]
   29c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
   29c80:	f002 fd8e 	bl	2c7a0 <__ssprint_r>
   29c84:	2800      	cmp	r0, #0
   29c86:	d001      	beq.n	29c8c <_svfprintf_r+0xa34>
   29c88:	f7ff fb6d 	bl	29366 <_svfprintf_r+0x10e>
   29c8c:	687b      	ldr	r3, [r7, #4]
   29c8e:	68bc      	ldr	r4, [r7, #8]
   29c90:	4698      	mov	r8, r3
   29c92:	ae32      	add	r6, sp, #200	; 0xc8
   29c94:	e766      	b.n	29b64 <_svfprintf_r+0x90c>
   29c96:	003a      	movs	r2, r7
   29c98:	9906      	ldr	r1, [sp, #24]
   29c9a:	9809      	ldr	r0, [sp, #36]	; 0x24
   29c9c:	f002 fd80 	bl	2c7a0 <__ssprint_r>
   29ca0:	2800      	cmp	r0, #0
   29ca2:	d100      	bne.n	29ca6 <_svfprintf_r+0xa4e>
   29ca4:	e720      	b.n	29ae8 <_svfprintf_r+0x890>
   29ca6:	f7ff fb5e 	bl	29366 <_svfprintf_r+0x10e>
   29caa:	9c08      	ldr	r4, [sp, #32]
   29cac:	2b01      	cmp	r3, #1
   29cae:	d100      	bne.n	29cb2 <_svfprintf_r+0xa5a>
   29cb0:	e184      	b.n	29fbc <_svfprintf_r+0xd64>
   29cb2:	2b02      	cmp	r3, #2
   29cb4:	d129      	bne.n	29d0a <_svfprintf_r+0xab2>
   29cb6:	9408      	str	r4, [sp, #32]
   29cb8:	2300      	movs	r3, #0
   29cba:	2400      	movs	r4, #0
   29cbc:	930c      	str	r3, [sp, #48]	; 0x30
   29cbe:	940d      	str	r4, [sp, #52]	; 0x34
   29cc0:	e4c5      	b.n	2964e <_svfprintf_r+0x3f6>
   29cc2:	003a      	movs	r2, r7
   29cc4:	9906      	ldr	r1, [sp, #24]
   29cc6:	9809      	ldr	r0, [sp, #36]	; 0x24
   29cc8:	f002 fd6a 	bl	2c7a0 <__ssprint_r>
   29ccc:	2800      	cmp	r0, #0
   29cce:	d001      	beq.n	29cd4 <_svfprintf_r+0xa7c>
   29cd0:	f7ff fb49 	bl	29366 <_svfprintf_r+0x10e>
   29cd4:	68bc      	ldr	r4, [r7, #8]
   29cd6:	ae32      	add	r6, sp, #200	; 0xc8
   29cd8:	e6a2      	b.n	29a20 <_svfprintf_r+0x7c8>
   29cda:	003a      	movs	r2, r7
   29cdc:	9906      	ldr	r1, [sp, #24]
   29cde:	9809      	ldr	r0, [sp, #36]	; 0x24
   29ce0:	f002 fd5e 	bl	2c7a0 <__ssprint_r>
   29ce4:	2800      	cmp	r0, #0
   29ce6:	d001      	beq.n	29cec <_svfprintf_r+0xa94>
   29ce8:	f7ff fb3d 	bl	29366 <_svfprintf_r+0x10e>
   29cec:	68bc      	ldr	r4, [r7, #8]
   29cee:	ae32      	add	r6, sp, #200	; 0xc8
   29cf0:	e640      	b.n	29974 <_svfprintf_r+0x71c>
   29cf2:	003a      	movs	r2, r7
   29cf4:	9906      	ldr	r1, [sp, #24]
   29cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
   29cf8:	f002 fd52 	bl	2c7a0 <__ssprint_r>
   29cfc:	2800      	cmp	r0, #0
   29cfe:	d001      	beq.n	29d04 <_svfprintf_r+0xaac>
   29d00:	f7ff fb31 	bl	29366 <_svfprintf_r+0x10e>
   29d04:	68bc      	ldr	r4, [r7, #8]
   29d06:	ae32      	add	r6, sp, #200	; 0xc8
   29d08:	e644      	b.n	29994 <_svfprintf_r+0x73c>
   29d0a:	9408      	str	r4, [sp, #32]
   29d0c:	2300      	movs	r3, #0
   29d0e:	2400      	movs	r4, #0
   29d10:	930c      	str	r3, [sp, #48]	; 0x30
   29d12:	940d      	str	r4, [sp, #52]	; 0x34
   29d14:	980c      	ldr	r0, [sp, #48]	; 0x30
   29d16:	990d      	ldr	r1, [sp, #52]	; 0x34
   29d18:	465b      	mov	r3, fp
   29d1a:	aa32      	add	r2, sp, #200	; 0xc8
   29d1c:	9307      	str	r3, [sp, #28]
   29d1e:	4691      	mov	r9, r2
   29d20:	46b3      	mov	fp, r6
   29d22:	e000      	b.n	29d26 <_svfprintf_r+0xace>
   29d24:	46a1      	mov	r9, r4
   29d26:	074a      	lsls	r2, r1, #29
   29d28:	4694      	mov	ip, r2
   29d2a:	464b      	mov	r3, r9
   29d2c:	4665      	mov	r5, ip
   29d2e:	1e5c      	subs	r4, r3, #1
   29d30:	08c6      	lsrs	r6, r0, #3
   29d32:	2307      	movs	r3, #7
   29d34:	08ca      	lsrs	r2, r1, #3
   29d36:	4335      	orrs	r5, r6
   29d38:	0011      	movs	r1, r2
   29d3a:	002a      	movs	r2, r5
   29d3c:	4003      	ands	r3, r0
   29d3e:	3330      	adds	r3, #48	; 0x30
   29d40:	7023      	strb	r3, [r4, #0]
   29d42:	0028      	movs	r0, r5
   29d44:	430a      	orrs	r2, r1
   29d46:	d1ed      	bne.n	29d24 <_svfprintf_r+0xacc>
   29d48:	900c      	str	r0, [sp, #48]	; 0x30
   29d4a:	910d      	str	r1, [sp, #52]	; 0x34
   29d4c:	9907      	ldr	r1, [sp, #28]
   29d4e:	465e      	mov	r6, fp
   29d50:	468b      	mov	fp, r1
   29d52:	9908      	ldr	r1, [sp, #32]
   29d54:	464a      	mov	r2, r9
   29d56:	9411      	str	r4, [sp, #68]	; 0x44
   29d58:	07c9      	lsls	r1, r1, #31
   29d5a:	d500      	bpl.n	29d5e <_svfprintf_r+0xb06>
   29d5c:	e13d      	b.n	29fda <_svfprintf_r+0xd82>
   29d5e:	ab32      	add	r3, sp, #200	; 0xc8
   29d60:	1b1b      	subs	r3, r3, r4
   29d62:	930e      	str	r3, [sp, #56]	; 0x38
   29d64:	f7ff fb88 	bl	29478 <_svfprintf_r+0x220>
   29d68:	0002fd04 	.word	0x0002fd04
   29d6c:	0002fd00 	.word	0x0002fd00
   29d70:	0002fd14 	.word	0x0002fd14
   29d74:	981f      	ldr	r0, [sp, #124]	; 0x7c
   29d76:	2800      	cmp	r0, #0
   29d78:	dc00      	bgt.n	29d7c <_svfprintf_r+0xb24>
   29d7a:	e296      	b.n	2a2aa <_svfprintf_r+0x1052>
   29d7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   29d7e:	9914      	ldr	r1, [sp, #80]	; 0x50
   29d80:	0013      	movs	r3, r2
   29d82:	4690      	mov	r8, r2
   29d84:	428b      	cmp	r3, r1
   29d86:	dd00      	ble.n	29d8a <_svfprintf_r+0xb32>
   29d88:	4688      	mov	r8, r1
   29d8a:	4643      	mov	r3, r8
   29d8c:	2b00      	cmp	r3, #0
   29d8e:	dd0c      	ble.n	29daa <_svfprintf_r+0xb52>
   29d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
   29d92:	4444      	add	r4, r8
   29d94:	6033      	str	r3, [r6, #0]
   29d96:	4643      	mov	r3, r8
   29d98:	6073      	str	r3, [r6, #4]
   29d9a:	687b      	ldr	r3, [r7, #4]
   29d9c:	60bc      	str	r4, [r7, #8]
   29d9e:	3301      	adds	r3, #1
   29da0:	607b      	str	r3, [r7, #4]
   29da2:	2b07      	cmp	r3, #7
   29da4:	dd00      	ble.n	29da8 <_svfprintf_r+0xb50>
   29da6:	e3b7      	b.n	2a518 <_svfprintf_r+0x12c0>
   29da8:	3608      	adds	r6, #8
   29daa:	4643      	mov	r3, r8
   29dac:	43db      	mvns	r3, r3
   29dae:	4642      	mov	r2, r8
   29db0:	17db      	asrs	r3, r3, #31
   29db2:	4013      	ands	r3, r2
   29db4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   29db6:	1ad3      	subs	r3, r2, r3
   29db8:	4698      	mov	r8, r3
   29dba:	2b00      	cmp	r3, #0
   29dbc:	dc00      	bgt.n	29dc0 <_svfprintf_r+0xb68>
   29dbe:	e128      	b.n	2a012 <_svfprintf_r+0xdba>
   29dc0:	2b10      	cmp	r3, #16
   29dc2:	dc01      	bgt.n	29dc8 <_svfprintf_r+0xb70>
   29dc4:	f000 fce7 	bl	2a796 <_svfprintf_r+0x153e>
   29dc8:	4acf      	ldr	r2, [pc, #828]	; (2a108 <_svfprintf_r+0xeb0>)
   29dca:	0021      	movs	r1, r4
   29dcc:	4691      	mov	r9, r2
   29dce:	2210      	movs	r2, #16
   29dd0:	687b      	ldr	r3, [r7, #4]
   29dd2:	4692      	mov	sl, r2
   29dd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   29dd6:	0032      	movs	r2, r6
   29dd8:	464c      	mov	r4, r9
   29dda:	4646      	mov	r6, r8
   29ddc:	e004      	b.n	29de8 <_svfprintf_r+0xb90>
   29dde:	3208      	adds	r2, #8
   29de0:	3e10      	subs	r6, #16
   29de2:	2e10      	cmp	r6, #16
   29de4:	dc00      	bgt.n	29de8 <_svfprintf_r+0xb90>
   29de6:	e104      	b.n	29ff2 <_svfprintf_r+0xd9a>
   29de8:	4650      	mov	r0, sl
   29dea:	3110      	adds	r1, #16
   29dec:	3301      	adds	r3, #1
   29dee:	6014      	str	r4, [r2, #0]
   29df0:	6050      	str	r0, [r2, #4]
   29df2:	60b9      	str	r1, [r7, #8]
   29df4:	607b      	str	r3, [r7, #4]
   29df6:	2b07      	cmp	r3, #7
   29df8:	ddf1      	ble.n	29dde <_svfprintf_r+0xb86>
   29dfa:	003a      	movs	r2, r7
   29dfc:	9906      	ldr	r1, [sp, #24]
   29dfe:	0028      	movs	r0, r5
   29e00:	f002 fcce 	bl	2c7a0 <__ssprint_r>
   29e04:	2800      	cmp	r0, #0
   29e06:	d001      	beq.n	29e0c <_svfprintf_r+0xbb4>
   29e08:	f7ff faad 	bl	29366 <_svfprintf_r+0x10e>
   29e0c:	68b9      	ldr	r1, [r7, #8]
   29e0e:	687b      	ldr	r3, [r7, #4]
   29e10:	aa32      	add	r2, sp, #200	; 0xc8
   29e12:	e7e5      	b.n	29de0 <_svfprintf_r+0xb88>
   29e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29e16:	2b00      	cmp	r3, #0
   29e18:	d100      	bne.n	29e1c <_svfprintf_r+0xbc4>
   29e1a:	e0ca      	b.n	29fb2 <_svfprintf_r+0xd5a>
   29e1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   29e1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   29e20:	ab32      	add	r3, sp, #200	; 0xc8
   29e22:	46b1      	mov	r9, r6
   29e24:	001e      	movs	r6, r3
   29e26:	0020      	movs	r0, r4
   29e28:	0029      	movs	r1, r5
   29e2a:	220a      	movs	r2, #10
   29e2c:	2300      	movs	r3, #0
   29e2e:	f003 f94d 	bl	2d0cc <__aeabi_uldivmod>
   29e32:	3e01      	subs	r6, #1
   29e34:	3230      	adds	r2, #48	; 0x30
   29e36:	7032      	strb	r2, [r6, #0]
   29e38:	2300      	movs	r3, #0
   29e3a:	0020      	movs	r0, r4
   29e3c:	0029      	movs	r1, r5
   29e3e:	220a      	movs	r2, #10
   29e40:	f003 f944 	bl	2d0cc <__aeabi_uldivmod>
   29e44:	0003      	movs	r3, r0
   29e46:	0004      	movs	r4, r0
   29e48:	000d      	movs	r5, r1
   29e4a:	430b      	orrs	r3, r1
   29e4c:	d1eb      	bne.n	29e26 <_svfprintf_r+0xbce>
   29e4e:	0032      	movs	r2, r6
   29e50:	ab32      	add	r3, sp, #200	; 0xc8
   29e52:	1a9b      	subs	r3, r3, r2
   29e54:	9611      	str	r6, [sp, #68]	; 0x44
   29e56:	940c      	str	r4, [sp, #48]	; 0x30
   29e58:	950d      	str	r5, [sp, #52]	; 0x34
   29e5a:	464e      	mov	r6, r9
   29e5c:	930e      	str	r3, [sp, #56]	; 0x38
   29e5e:	f7ff fb0b 	bl	29478 <_svfprintf_r+0x220>
   29e62:	2300      	movs	r3, #0
   29e64:	930e      	str	r3, [sp, #56]	; 0x38
   29e66:	ab32      	add	r3, sp, #200	; 0xc8
   29e68:	9311      	str	r3, [sp, #68]	; 0x44
   29e6a:	f7ff fb05 	bl	29478 <_svfprintf_r+0x220>
   29e6e:	003a      	movs	r2, r7
   29e70:	9906      	ldr	r1, [sp, #24]
   29e72:	9809      	ldr	r0, [sp, #36]	; 0x24
   29e74:	f002 fc94 	bl	2c7a0 <__ssprint_r>
   29e78:	2800      	cmp	r0, #0
   29e7a:	d001      	beq.n	29e80 <_svfprintf_r+0xc28>
   29e7c:	f7ff fa73 	bl	29366 <_svfprintf_r+0x10e>
   29e80:	ab16      	add	r3, sp, #88	; 0x58
   29e82:	7fdb      	ldrb	r3, [r3, #31]
   29e84:	68bc      	ldr	r4, [r7, #8]
   29e86:	4698      	mov	r8, r3
   29e88:	ae32      	add	r6, sp, #200	; 0xc8
   29e8a:	e560      	b.n	2994e <_svfprintf_r+0x6f6>
   29e8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   29e8e:	1e5d      	subs	r5, r3, #1
   29e90:	2d00      	cmp	r5, #0
   29e92:	dc00      	bgt.n	29e96 <_svfprintf_r+0xc3e>
   29e94:	e666      	b.n	29b64 <_svfprintf_r+0x90c>
   29e96:	4b9c      	ldr	r3, [pc, #624]	; (2a108 <_svfprintf_r+0xeb0>)
   29e98:	4699      	mov	r9, r3
   29e9a:	2d10      	cmp	r5, #16
   29e9c:	dd29      	ble.n	29ef2 <_svfprintf_r+0xc9a>
   29e9e:	2310      	movs	r3, #16
   29ea0:	0032      	movs	r2, r6
   29ea2:	469a      	mov	sl, r3
   29ea4:	002e      	movs	r6, r5
   29ea6:	0021      	movs	r1, r4
   29ea8:	4643      	mov	r3, r8
   29eaa:	9c09      	ldr	r4, [sp, #36]	; 0x24
   29eac:	464d      	mov	r5, r9
   29eae:	e003      	b.n	29eb8 <_svfprintf_r+0xc60>
   29eb0:	3e10      	subs	r6, #16
   29eb2:	3208      	adds	r2, #8
   29eb4:	2e10      	cmp	r6, #16
   29eb6:	dd17      	ble.n	29ee8 <_svfprintf_r+0xc90>
   29eb8:	4650      	mov	r0, sl
   29eba:	3110      	adds	r1, #16
   29ebc:	3301      	adds	r3, #1
   29ebe:	6015      	str	r5, [r2, #0]
   29ec0:	6050      	str	r0, [r2, #4]
   29ec2:	60b9      	str	r1, [r7, #8]
   29ec4:	607b      	str	r3, [r7, #4]
   29ec6:	2b07      	cmp	r3, #7
   29ec8:	ddf2      	ble.n	29eb0 <_svfprintf_r+0xc58>
   29eca:	003a      	movs	r2, r7
   29ecc:	9906      	ldr	r1, [sp, #24]
   29ece:	0020      	movs	r0, r4
   29ed0:	f002 fc66 	bl	2c7a0 <__ssprint_r>
   29ed4:	2800      	cmp	r0, #0
   29ed6:	d001      	beq.n	29edc <_svfprintf_r+0xc84>
   29ed8:	f7ff fa45 	bl	29366 <_svfprintf_r+0x10e>
   29edc:	3e10      	subs	r6, #16
   29ede:	68b9      	ldr	r1, [r7, #8]
   29ee0:	687b      	ldr	r3, [r7, #4]
   29ee2:	aa32      	add	r2, sp, #200	; 0xc8
   29ee4:	2e10      	cmp	r6, #16
   29ee6:	dce7      	bgt.n	29eb8 <_svfprintf_r+0xc60>
   29ee8:	46a9      	mov	r9, r5
   29eea:	000c      	movs	r4, r1
   29eec:	0035      	movs	r5, r6
   29eee:	4698      	mov	r8, r3
   29ef0:	0016      	movs	r6, r2
   29ef2:	464b      	mov	r3, r9
   29ef4:	6075      	str	r5, [r6, #4]
   29ef6:	6033      	str	r3, [r6, #0]
   29ef8:	1964      	adds	r4, r4, r5
   29efa:	e629      	b.n	29b50 <_svfprintf_r+0x8f8>
   29efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29efe:	681a      	ldr	r2, [r3, #0]
   29f00:	f7ff fbfb 	bl	296fa <_svfprintf_r+0x4a2>
   29f04:	6813      	ldr	r3, [r2, #0]
   29f06:	9307      	str	r3, [sp, #28]
   29f08:	f7ff fa82 	bl	29410 <_svfprintf_r+0x1b8>
   29f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29f0e:	681a      	ldr	r2, [r3, #0]
   29f10:	f7ff fb84 	bl	2961c <_svfprintf_r+0x3c4>
   29f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29f16:	681a      	ldr	r2, [r3, #0]
   29f18:	f7ff fbd1 	bl	296be <_svfprintf_r+0x466>
   29f1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   29f1e:	68ba      	ldr	r2, [r7, #8]
   29f20:	6033      	str	r3, [r6, #0]
   29f22:	9b18      	ldr	r3, [sp, #96]	; 0x60
   29f24:	469c      	mov	ip, r3
   29f26:	6073      	str	r3, [r6, #4]
   29f28:	687b      	ldr	r3, [r7, #4]
   29f2a:	4462      	add	r2, ip
   29f2c:	3301      	adds	r3, #1
   29f2e:	0014      	movs	r4, r2
   29f30:	60ba      	str	r2, [r7, #8]
   29f32:	607b      	str	r3, [r7, #4]
   29f34:	2b07      	cmp	r3, #7
   29f36:	dd00      	ble.n	29f3a <_svfprintf_r+0xce2>
   29f38:	e202      	b.n	2a340 <_svfprintf_r+0x10e8>
   29f3a:	3608      	adds	r6, #8
   29f3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   29f3e:	1e5d      	subs	r5, r3, #1
   29f40:	2d00      	cmp	r5, #0
   29f42:	dc00      	bgt.n	29f46 <_svfprintf_r+0xcee>
   29f44:	e57e      	b.n	29a44 <_svfprintf_r+0x7ec>
   29f46:	4a70      	ldr	r2, [pc, #448]	; (2a108 <_svfprintf_r+0xeb0>)
   29f48:	687b      	ldr	r3, [r7, #4]
   29f4a:	4691      	mov	r9, r2
   29f4c:	2d10      	cmp	r5, #16
   29f4e:	dd25      	ble.n	29f9c <_svfprintf_r+0xd44>
   29f50:	2210      	movs	r2, #16
   29f52:	0021      	movs	r1, r4
   29f54:	4690      	mov	r8, r2
   29f56:	9c09      	ldr	r4, [sp, #36]	; 0x24
   29f58:	0032      	movs	r2, r6
   29f5a:	002e      	movs	r6, r5
   29f5c:	464d      	mov	r5, r9
   29f5e:	e003      	b.n	29f68 <_svfprintf_r+0xd10>
   29f60:	3208      	adds	r2, #8
   29f62:	3e10      	subs	r6, #16
   29f64:	2e10      	cmp	r6, #16
   29f66:	dd15      	ble.n	29f94 <_svfprintf_r+0xd3c>
   29f68:	4640      	mov	r0, r8
   29f6a:	3110      	adds	r1, #16
   29f6c:	3301      	adds	r3, #1
   29f6e:	6015      	str	r5, [r2, #0]
   29f70:	6050      	str	r0, [r2, #4]
   29f72:	60b9      	str	r1, [r7, #8]
   29f74:	607b      	str	r3, [r7, #4]
   29f76:	2b07      	cmp	r3, #7
   29f78:	ddf2      	ble.n	29f60 <_svfprintf_r+0xd08>
   29f7a:	003a      	movs	r2, r7
   29f7c:	9906      	ldr	r1, [sp, #24]
   29f7e:	0020      	movs	r0, r4
   29f80:	f002 fc0e 	bl	2c7a0 <__ssprint_r>
   29f84:	2800      	cmp	r0, #0
   29f86:	d001      	beq.n	29f8c <_svfprintf_r+0xd34>
   29f88:	f7ff f9ed 	bl	29366 <_svfprintf_r+0x10e>
   29f8c:	68b9      	ldr	r1, [r7, #8]
   29f8e:	687b      	ldr	r3, [r7, #4]
   29f90:	aa32      	add	r2, sp, #200	; 0xc8
   29f92:	e7e6      	b.n	29f62 <_svfprintf_r+0xd0a>
   29f94:	46a9      	mov	r9, r5
   29f96:	000c      	movs	r4, r1
   29f98:	0035      	movs	r5, r6
   29f9a:	0016      	movs	r6, r2
   29f9c:	464a      	mov	r2, r9
   29f9e:	1964      	adds	r4, r4, r5
   29fa0:	3301      	adds	r3, #1
   29fa2:	6032      	str	r2, [r6, #0]
   29fa4:	6075      	str	r5, [r6, #4]
   29fa6:	60bc      	str	r4, [r7, #8]
   29fa8:	607b      	str	r3, [r7, #4]
   29faa:	2b07      	cmp	r3, #7
   29fac:	dc00      	bgt.n	29fb0 <_svfprintf_r+0xd58>
   29fae:	e548      	b.n	29a42 <_svfprintf_r+0x7ea>
   29fb0:	e5e5      	b.n	29b7e <_svfprintf_r+0x926>
   29fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   29fb4:	2b09      	cmp	r3, #9
   29fb6:	d900      	bls.n	29fba <_svfprintf_r+0xd62>
   29fb8:	e730      	b.n	29e1c <_svfprintf_r+0xbc4>
   29fba:	9c08      	ldr	r4, [sp, #32]
   29fbc:	2227      	movs	r2, #39	; 0x27
   29fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   29fc0:	a928      	add	r1, sp, #160	; 0xa0
   29fc2:	3330      	adds	r3, #48	; 0x30
   29fc4:	548b      	strb	r3, [r1, r2]
   29fc6:	2301      	movs	r3, #1
   29fc8:	aa16      	add	r2, sp, #88	; 0x58
   29fca:	4694      	mov	ip, r2
   29fcc:	930e      	str	r3, [sp, #56]	; 0x38
   29fce:	336e      	adds	r3, #110	; 0x6e
   29fd0:	4463      	add	r3, ip
   29fd2:	9408      	str	r4, [sp, #32]
   29fd4:	9311      	str	r3, [sp, #68]	; 0x44
   29fd6:	f7ff fa4f 	bl	29478 <_svfprintf_r+0x220>
   29fda:	2b30      	cmp	r3, #48	; 0x30
   29fdc:	d100      	bne.n	29fe0 <_svfprintf_r+0xd88>
   29fde:	e20b      	b.n	2a3f8 <_svfprintf_r+0x11a0>
   29fe0:	2330      	movs	r3, #48	; 0x30
   29fe2:	3a02      	subs	r2, #2
   29fe4:	7013      	strb	r3, [r2, #0]
   29fe6:	ab32      	add	r3, sp, #200	; 0xc8
   29fe8:	1a9b      	subs	r3, r3, r2
   29fea:	930e      	str	r3, [sp, #56]	; 0x38
   29fec:	9211      	str	r2, [sp, #68]	; 0x44
   29fee:	f7ff fa43 	bl	29478 <_svfprintf_r+0x220>
   29ff2:	46b0      	mov	r8, r6
   29ff4:	46a1      	mov	r9, r4
   29ff6:	0016      	movs	r6, r2
   29ff8:	000c      	movs	r4, r1
   29ffa:	464a      	mov	r2, r9
   29ffc:	6032      	str	r2, [r6, #0]
   29ffe:	4642      	mov	r2, r8
   2a000:	4444      	add	r4, r8
   2a002:	3301      	adds	r3, #1
   2a004:	6072      	str	r2, [r6, #4]
   2a006:	60bc      	str	r4, [r7, #8]
   2a008:	607b      	str	r3, [r7, #4]
   2a00a:	2b07      	cmp	r3, #7
   2a00c:	dd00      	ble.n	2a010 <_svfprintf_r+0xdb8>
   2a00e:	e29c      	b.n	2a54a <_svfprintf_r+0x12f2>
   2a010:	3608      	adds	r6, #8
   2a012:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2a014:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2a016:	4293      	cmp	r3, r2
   2a018:	db4c      	blt.n	2a0b4 <_svfprintf_r+0xe5c>
   2a01a:	9a08      	ldr	r2, [sp, #32]
   2a01c:	07d2      	lsls	r2, r2, #31
   2a01e:	d449      	bmi.n	2a0b4 <_svfprintf_r+0xe5c>
   2a020:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2a022:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2a024:	1ad3      	subs	r3, r2, r3
   2a026:	1a52      	subs	r2, r2, r1
   2a028:	4690      	mov	r8, r2
   2a02a:	429a      	cmp	r2, r3
   2a02c:	dd00      	ble.n	2a030 <_svfprintf_r+0xdd8>
   2a02e:	4698      	mov	r8, r3
   2a030:	4642      	mov	r2, r8
   2a032:	2a00      	cmp	r2, #0
   2a034:	dd0f      	ble.n	2a056 <_svfprintf_r+0xdfe>
   2a036:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2a038:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2a03a:	468c      	mov	ip, r1
   2a03c:	4462      	add	r2, ip
   2a03e:	6032      	str	r2, [r6, #0]
   2a040:	4642      	mov	r2, r8
   2a042:	6072      	str	r2, [r6, #4]
   2a044:	687a      	ldr	r2, [r7, #4]
   2a046:	4444      	add	r4, r8
   2a048:	3201      	adds	r2, #1
   2a04a:	60bc      	str	r4, [r7, #8]
   2a04c:	607a      	str	r2, [r7, #4]
   2a04e:	2a07      	cmp	r2, #7
   2a050:	dd00      	ble.n	2a054 <_svfprintf_r+0xdfc>
   2a052:	e286      	b.n	2a562 <_svfprintf_r+0x130a>
   2a054:	3608      	adds	r6, #8
   2a056:	4642      	mov	r2, r8
   2a058:	43d5      	mvns	r5, r2
   2a05a:	17ed      	asrs	r5, r5, #31
   2a05c:	4015      	ands	r5, r2
   2a05e:	1b5d      	subs	r5, r3, r5
   2a060:	2d00      	cmp	r5, #0
   2a062:	dc00      	bgt.n	2a066 <_svfprintf_r+0xe0e>
   2a064:	e4ee      	b.n	29a44 <_svfprintf_r+0x7ec>
   2a066:	4a28      	ldr	r2, [pc, #160]	; (2a108 <_svfprintf_r+0xeb0>)
   2a068:	687b      	ldr	r3, [r7, #4]
   2a06a:	4691      	mov	r9, r2
   2a06c:	2d10      	cmp	r5, #16
   2a06e:	dd95      	ble.n	29f9c <_svfprintf_r+0xd44>
   2a070:	2210      	movs	r2, #16
   2a072:	0021      	movs	r1, r4
   2a074:	4690      	mov	r8, r2
   2a076:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2a078:	0032      	movs	r2, r6
   2a07a:	002e      	movs	r6, r5
   2a07c:	464d      	mov	r5, r9
   2a07e:	e003      	b.n	2a088 <_svfprintf_r+0xe30>
   2a080:	3208      	adds	r2, #8
   2a082:	3e10      	subs	r6, #16
   2a084:	2e10      	cmp	r6, #16
   2a086:	dd85      	ble.n	29f94 <_svfprintf_r+0xd3c>
   2a088:	4640      	mov	r0, r8
   2a08a:	3110      	adds	r1, #16
   2a08c:	3301      	adds	r3, #1
   2a08e:	6015      	str	r5, [r2, #0]
   2a090:	6050      	str	r0, [r2, #4]
   2a092:	60b9      	str	r1, [r7, #8]
   2a094:	607b      	str	r3, [r7, #4]
   2a096:	2b07      	cmp	r3, #7
   2a098:	ddf2      	ble.n	2a080 <_svfprintf_r+0xe28>
   2a09a:	003a      	movs	r2, r7
   2a09c:	9906      	ldr	r1, [sp, #24]
   2a09e:	0020      	movs	r0, r4
   2a0a0:	f002 fb7e 	bl	2c7a0 <__ssprint_r>
   2a0a4:	2800      	cmp	r0, #0
   2a0a6:	d001      	beq.n	2a0ac <_svfprintf_r+0xe54>
   2a0a8:	f7ff f95d 	bl	29366 <_svfprintf_r+0x10e>
   2a0ac:	68b9      	ldr	r1, [r7, #8]
   2a0ae:	687b      	ldr	r3, [r7, #4]
   2a0b0:	aa32      	add	r2, sp, #200	; 0xc8
   2a0b2:	e7e6      	b.n	2a082 <_svfprintf_r+0xe2a>
   2a0b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2a0b6:	6032      	str	r2, [r6, #0]
   2a0b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2a0ba:	4694      	mov	ip, r2
   2a0bc:	6072      	str	r2, [r6, #4]
   2a0be:	687a      	ldr	r2, [r7, #4]
   2a0c0:	4464      	add	r4, ip
   2a0c2:	3201      	adds	r2, #1
   2a0c4:	60bc      	str	r4, [r7, #8]
   2a0c6:	607a      	str	r2, [r7, #4]
   2a0c8:	2a07      	cmp	r2, #7
   2a0ca:	dd00      	ble.n	2a0ce <_svfprintf_r+0xe76>
   2a0cc:	e230      	b.n	2a530 <_svfprintf_r+0x12d8>
   2a0ce:	3608      	adds	r6, #8
   2a0d0:	e7a6      	b.n	2a020 <_svfprintf_r+0xdc8>
   2a0d2:	003a      	movs	r2, r7
   2a0d4:	9906      	ldr	r1, [sp, #24]
   2a0d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a0d8:	f002 fb62 	bl	2c7a0 <__ssprint_r>
   2a0dc:	2800      	cmp	r0, #0
   2a0de:	d001      	beq.n	2a0e4 <_svfprintf_r+0xe8c>
   2a0e0:	f7ff f941 	bl	29366 <_svfprintf_r+0x10e>
   2a0e4:	68bc      	ldr	r4, [r7, #8]
   2a0e6:	687b      	ldr	r3, [r7, #4]
   2a0e8:	ae32      	add	r6, sp, #200	; 0xc8
   2a0ea:	e513      	b.n	29b14 <_svfprintf_r+0x8bc>
   2a0ec:	003a      	movs	r2, r7
   2a0ee:	9906      	ldr	r1, [sp, #24]
   2a0f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a0f2:	f002 fb55 	bl	2c7a0 <__ssprint_r>
   2a0f6:	2800      	cmp	r0, #0
   2a0f8:	d001      	beq.n	2a0fe <_svfprintf_r+0xea6>
   2a0fa:	f7ff f934 	bl	29366 <_svfprintf_r+0x10e>
   2a0fe:	687b      	ldr	r3, [r7, #4]
   2a100:	68bc      	ldr	r4, [r7, #8]
   2a102:	4698      	mov	r8, r3
   2a104:	ae32      	add	r6, sp, #200	; 0xc8
   2a106:	e513      	b.n	29b30 <_svfprintf_r+0x8d8>
   2a108:	0002fd14 	.word	0x0002fd14
   2a10c:	2307      	movs	r3, #7
   2a10e:	3207      	adds	r2, #7
   2a110:	439a      	bics	r2, r3
   2a112:	3301      	adds	r3, #1
   2a114:	469c      	mov	ip, r3
   2a116:	4494      	add	ip, r2
   2a118:	4663      	mov	r3, ip
   2a11a:	930f      	str	r3, [sp, #60]	; 0x3c
   2a11c:	6853      	ldr	r3, [r2, #4]
   2a11e:	6812      	ldr	r2, [r2, #0]
   2a120:	930d      	str	r3, [sp, #52]	; 0x34
   2a122:	920c      	str	r2, [sp, #48]	; 0x30
   2a124:	2b00      	cmp	r3, #0
   2a126:	db01      	blt.n	2a12c <_svfprintf_r+0xed4>
   2a128:	f7ff f97a 	bl	29420 <_svfprintf_r+0x1c8>
   2a12c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2a12e:	990d      	ldr	r1, [sp, #52]	; 0x34
   2a130:	2300      	movs	r3, #0
   2a132:	4242      	negs	r2, r0
   2a134:	418b      	sbcs	r3, r1
   2a136:	0011      	movs	r1, r2
   2a138:	001a      	movs	r2, r3
   2a13a:	232d      	movs	r3, #45	; 0x2d
   2a13c:	a816      	add	r0, sp, #88	; 0x58
   2a13e:	77c3      	strb	r3, [r0, #31]
   2a140:	0008      	movs	r0, r1
   2a142:	4310      	orrs	r0, r2
   2a144:	910c      	str	r1, [sp, #48]	; 0x30
   2a146:	920d      	str	r2, [sp, #52]	; 0x34
   2a148:	4698      	mov	r8, r3
   2a14a:	0002      	movs	r2, r0
   2a14c:	3b2c      	subs	r3, #44	; 0x2c
   2a14e:	f7ff f970 	bl	29432 <_svfprintf_r+0x1da>
   2a152:	003a      	movs	r2, r7
   2a154:	9906      	ldr	r1, [sp, #24]
   2a156:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a158:	f002 fb22 	bl	2c7a0 <__ssprint_r>
   2a15c:	2800      	cmp	r0, #0
   2a15e:	d001      	beq.n	2a164 <_svfprintf_r+0xf0c>
   2a160:	f7ff f901 	bl	29366 <_svfprintf_r+0x10e>
   2a164:	68bc      	ldr	r4, [r7, #8]
   2a166:	ae32      	add	r6, sp, #200	; 0xc8
   2a168:	e418      	b.n	2999c <_svfprintf_r+0x744>
   2a16a:	9916      	ldr	r1, [sp, #88]	; 0x58
   2a16c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2a16e:	000a      	movs	r2, r1
   2a170:	0008      	movs	r0, r1
   2a172:	002b      	movs	r3, r5
   2a174:	0029      	movs	r1, r5
   2a176:	f7fe fa3b 	bl	285f0 <__aeabi_dcmpun>
   2a17a:	2800      	cmp	r0, #0
   2a17c:	d000      	beq.n	2a180 <_svfprintf_r+0xf28>
   2a17e:	e2e6      	b.n	2a74e <_svfprintf_r+0x14f6>
   2a180:	4653      	mov	r3, sl
   2a182:	3301      	adds	r3, #1
   2a184:	d100      	bne.n	2a188 <_svfprintf_r+0xf30>
   2a186:	e20d      	b.n	2a5a4 <_svfprintf_r+0x134c>
   2a188:	2320      	movs	r3, #32
   2a18a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2a18c:	439a      	bics	r2, r3
   2a18e:	920e      	str	r2, [sp, #56]	; 0x38
   2a190:	2a47      	cmp	r2, #71	; 0x47
   2a192:	d100      	bne.n	2a196 <_svfprintf_r+0xf3e>
   2a194:	e11c      	b.n	2a3d0 <_svfprintf_r+0x1178>
   2a196:	2380      	movs	r3, #128	; 0x80
   2a198:	005b      	lsls	r3, r3, #1
   2a19a:	4323      	orrs	r3, r4
   2a19c:	9308      	str	r3, [sp, #32]
   2a19e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2a1a0:	2b00      	cmp	r3, #0
   2a1a2:	da00      	bge.n	2a1a6 <_svfprintf_r+0xf4e>
   2a1a4:	e221      	b.n	2a5ea <_svfprintf_r+0x1392>
   2a1a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a1a8:	9307      	str	r3, [sp, #28]
   2a1aa:	2300      	movs	r3, #0
   2a1ac:	4691      	mov	r9, r2
   2a1ae:	9310      	str	r3, [sp, #64]	; 0x40
   2a1b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2a1b2:	2b66      	cmp	r3, #102	; 0x66
   2a1b4:	d100      	bne.n	2a1b8 <_svfprintf_r+0xf60>
   2a1b6:	e1fc      	b.n	2a5b2 <_svfprintf_r+0x135a>
   2a1b8:	2b46      	cmp	r3, #70	; 0x46
   2a1ba:	d100      	bne.n	2a1be <_svfprintf_r+0xf66>
   2a1bc:	e0db      	b.n	2a376 <_svfprintf_r+0x111e>
   2a1be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2a1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a1c2:	3a45      	subs	r2, #69	; 0x45
   2a1c4:	0013      	movs	r3, r2
   2a1c6:	4259      	negs	r1, r3
   2a1c8:	4159      	adcs	r1, r3
   2a1ca:	ab20      	add	r3, sp, #128	; 0x80
   2a1cc:	000d      	movs	r5, r1
   2a1ce:	9303      	str	r3, [sp, #12]
   2a1d0:	ab1f      	add	r3, sp, #124	; 0x7c
   2a1d2:	9302      	str	r3, [sp, #8]
   2a1d4:	2302      	movs	r3, #2
   2a1d6:	aa23      	add	r2, sp, #140	; 0x8c
   2a1d8:	4455      	add	r5, sl
   2a1da:	921b      	str	r2, [sp, #108]	; 0x6c
   2a1dc:	9204      	str	r2, [sp, #16]
   2a1de:	9300      	str	r3, [sp, #0]
   2a1e0:	9501      	str	r5, [sp, #4]
   2a1e2:	9b07      	ldr	r3, [sp, #28]
   2a1e4:	464a      	mov	r2, r9
   2a1e6:	f000 fbf9 	bl	2a9dc <_dtoa_r>
   2a1ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2a1ec:	9011      	str	r0, [sp, #68]	; 0x44
   2a1ee:	2b67      	cmp	r3, #103	; 0x67
   2a1f0:	d000      	beq.n	2a1f4 <_svfprintf_r+0xf9c>
   2a1f2:	e239      	b.n	2a668 <_svfprintf_r+0x1410>
   2a1f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2a1f6:	4698      	mov	r8, r3
   2a1f8:	44a8      	add	r8, r5
   2a1fa:	07e3      	lsls	r3, r4, #31
   2a1fc:	d400      	bmi.n	2a200 <_svfprintf_r+0xfa8>
   2a1fe:	e28b      	b.n	2a718 <_svfprintf_r+0x14c0>
   2a200:	2300      	movs	r3, #0
   2a202:	2200      	movs	r2, #0
   2a204:	4648      	mov	r0, r9
   2a206:	9907      	ldr	r1, [sp, #28]
   2a208:	f7fb fd1e 	bl	25c48 <__aeabi_dcmpeq>
   2a20c:	4643      	mov	r3, r8
   2a20e:	2800      	cmp	r0, #0
   2a210:	d10a      	bne.n	2a228 <_svfprintf_r+0xfd0>
   2a212:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2a214:	4543      	cmp	r3, r8
   2a216:	d207      	bcs.n	2a228 <_svfprintf_r+0xfd0>
   2a218:	2130      	movs	r1, #48	; 0x30
   2a21a:	4640      	mov	r0, r8
   2a21c:	1c5a      	adds	r2, r3, #1
   2a21e:	9223      	str	r2, [sp, #140]	; 0x8c
   2a220:	7019      	strb	r1, [r3, #0]
   2a222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2a224:	4298      	cmp	r0, r3
   2a226:	d8f9      	bhi.n	2a21c <_svfprintf_r+0xfc4>
   2a228:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2a22a:	1a9b      	subs	r3, r3, r2
   2a22c:	9314      	str	r3, [sp, #80]	; 0x50
   2a22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a230:	2b47      	cmp	r3, #71	; 0x47
   2a232:	d100      	bne.n	2a236 <_svfprintf_r+0xfde>
   2a234:	e0f6      	b.n	2a424 <_svfprintf_r+0x11cc>
   2a236:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2a238:	2b65      	cmp	r3, #101	; 0x65
   2a23a:	dc00      	bgt.n	2a23e <_svfprintf_r+0xfe6>
   2a23c:	e226      	b.n	2a68c <_svfprintf_r+0x1434>
   2a23e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2a240:	2b66      	cmp	r3, #102	; 0x66
   2a242:	d100      	bne.n	2a246 <_svfprintf_r+0xfee>
   2a244:	e1f4      	b.n	2a630 <_svfprintf_r+0x13d8>
   2a246:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2a248:	9313      	str	r3, [sp, #76]	; 0x4c
   2a24a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2a24c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2a24e:	0019      	movs	r1, r3
   2a250:	4291      	cmp	r1, r2
   2a252:	dd00      	ble.n	2a256 <_svfprintf_r+0xffe>
   2a254:	e1d4      	b.n	2a600 <_svfprintf_r+0x13a8>
   2a256:	07e3      	lsls	r3, r4, #31
   2a258:	d500      	bpl.n	2a25c <_svfprintf_r+0x1004>
   2a25a:	e249      	b.n	2a6f0 <_svfprintf_r+0x1498>
   2a25c:	43d3      	mvns	r3, r2
   2a25e:	17db      	asrs	r3, r3, #31
   2a260:	0011      	movs	r1, r2
   2a262:	401a      	ands	r2, r3
   2a264:	2367      	movs	r3, #103	; 0x67
   2a266:	9207      	str	r2, [sp, #28]
   2a268:	910e      	str	r1, [sp, #56]	; 0x38
   2a26a:	9312      	str	r3, [sp, #72]	; 0x48
   2a26c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2a26e:	2b00      	cmp	r3, #0
   2a270:	d000      	beq.n	2a274 <_svfprintf_r+0x101c>
   2a272:	e0cf      	b.n	2a414 <_svfprintf_r+0x11bc>
   2a274:	ab16      	add	r3, sp, #88	; 0x58
   2a276:	7fdb      	ldrb	r3, [r3, #31]
   2a278:	4698      	mov	r8, r3
   2a27a:	2300      	movs	r3, #0
   2a27c:	469a      	mov	sl, r3
   2a27e:	f7ff f903 	bl	29488 <_svfprintf_r+0x230>
   2a282:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a284:	990a      	ldr	r1, [sp, #40]	; 0x28
   2a286:	6813      	ldr	r3, [r2, #0]
   2a288:	6019      	str	r1, [r3, #0]
   2a28a:	0013      	movs	r3, r2
   2a28c:	3304      	adds	r3, #4
   2a28e:	930f      	str	r3, [sp, #60]	; 0x3c
   2a290:	f7ff f80d 	bl	292ae <_svfprintf_r+0x56>
   2a294:	003a      	movs	r2, r7
   2a296:	9906      	ldr	r1, [sp, #24]
   2a298:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a29a:	f002 fa81 	bl	2c7a0 <__ssprint_r>
   2a29e:	2800      	cmp	r0, #0
   2a2a0:	d001      	beq.n	2a2a6 <_svfprintf_r+0x104e>
   2a2a2:	f7ff f860 	bl	29366 <_svfprintf_r+0x10e>
   2a2a6:	ae32      	add	r6, sp, #200	; 0xc8
   2a2a8:	e48e      	b.n	29bc8 <_svfprintf_r+0x970>
   2a2aa:	4bde      	ldr	r3, [pc, #888]	; (2a624 <_svfprintf_r+0x13cc>)
   2a2ac:	3401      	adds	r4, #1
   2a2ae:	6033      	str	r3, [r6, #0]
   2a2b0:	2301      	movs	r3, #1
   2a2b2:	6073      	str	r3, [r6, #4]
   2a2b4:	687b      	ldr	r3, [r7, #4]
   2a2b6:	60bc      	str	r4, [r7, #8]
   2a2b8:	3301      	adds	r3, #1
   2a2ba:	607b      	str	r3, [r7, #4]
   2a2bc:	2b07      	cmp	r3, #7
   2a2be:	dc7a      	bgt.n	2a3b6 <_svfprintf_r+0x115e>
   2a2c0:	3608      	adds	r6, #8
   2a2c2:	2800      	cmp	r0, #0
   2a2c4:	d107      	bne.n	2a2d6 <_svfprintf_r+0x107e>
   2a2c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2a2c8:	2b00      	cmp	r3, #0
   2a2ca:	d104      	bne.n	2a2d6 <_svfprintf_r+0x107e>
   2a2cc:	9b08      	ldr	r3, [sp, #32]
   2a2ce:	07db      	lsls	r3, r3, #31
   2a2d0:	d401      	bmi.n	2a2d6 <_svfprintf_r+0x107e>
   2a2d2:	f7ff fbb7 	bl	29a44 <_svfprintf_r+0x7ec>
   2a2d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2a2d8:	6033      	str	r3, [r6, #0]
   2a2da:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2a2dc:	1919      	adds	r1, r3, r4
   2a2de:	6073      	str	r3, [r6, #4]
   2a2e0:	687b      	ldr	r3, [r7, #4]
   2a2e2:	60b9      	str	r1, [r7, #8]
   2a2e4:	3301      	adds	r3, #1
   2a2e6:	607b      	str	r3, [r7, #4]
   2a2e8:	2b07      	cmp	r3, #7
   2a2ea:	dd00      	ble.n	2a2ee <_svfprintf_r+0x1096>
   2a2ec:	e1f2      	b.n	2a6d4 <_svfprintf_r+0x147c>
   2a2ee:	0032      	movs	r2, r6
   2a2f0:	3208      	adds	r2, #8
   2a2f2:	2800      	cmp	r0, #0
   2a2f4:	da00      	bge.n	2a2f8 <_svfprintf_r+0x10a0>
   2a2f6:	e1cc      	b.n	2a692 <_svfprintf_r+0x143a>
   2a2f8:	9811      	ldr	r0, [sp, #68]	; 0x44
   2a2fa:	3301      	adds	r3, #1
   2a2fc:	6010      	str	r0, [r2, #0]
   2a2fe:	9814      	ldr	r0, [sp, #80]	; 0x50
   2a300:	607b      	str	r3, [r7, #4]
   2a302:	1844      	adds	r4, r0, r1
   2a304:	6050      	str	r0, [r2, #4]
   2a306:	60bc      	str	r4, [r7, #8]
   2a308:	2b07      	cmp	r3, #7
   2a30a:	dd00      	ble.n	2a30e <_svfprintf_r+0x10b6>
   2a30c:	e437      	b.n	29b7e <_svfprintf_r+0x926>
   2a30e:	3208      	adds	r2, #8
   2a310:	0016      	movs	r6, r2
   2a312:	f7ff fb97 	bl	29a44 <_svfprintf_r+0x7ec>
   2a316:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2a318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2a31a:	680b      	ldr	r3, [r1, #0]
   2a31c:	601a      	str	r2, [r3, #0]
   2a31e:	17d2      	asrs	r2, r2, #31
   2a320:	605a      	str	r2, [r3, #4]
   2a322:	000b      	movs	r3, r1
   2a324:	3304      	adds	r3, #4
   2a326:	930f      	str	r3, [sp, #60]	; 0x3c
   2a328:	f7fe ffc1 	bl	292ae <_svfprintf_r+0x56>
   2a32c:	464b      	mov	r3, r9
   2a32e:	3101      	adds	r1, #1
   2a330:	431c      	orrs	r4, r3
   2a332:	780b      	ldrb	r3, [r1, #0]
   2a334:	f7fe fff4 	bl	29320 <_svfprintf_r+0xc8>
   2a338:	4bbb      	ldr	r3, [pc, #748]	; (2a628 <_svfprintf_r+0x13d0>)
   2a33a:	9311      	str	r3, [sp, #68]	; 0x44
   2a33c:	f7ff f937 	bl	295ae <_svfprintf_r+0x356>
   2a340:	003a      	movs	r2, r7
   2a342:	9906      	ldr	r1, [sp, #24]
   2a344:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a346:	f002 fa2b 	bl	2c7a0 <__ssprint_r>
   2a34a:	2800      	cmp	r0, #0
   2a34c:	d001      	beq.n	2a352 <_svfprintf_r+0x10fa>
   2a34e:	f7ff f80a 	bl	29366 <_svfprintf_r+0x10e>
   2a352:	68bc      	ldr	r4, [r7, #8]
   2a354:	ae32      	add	r6, sp, #200	; 0xc8
   2a356:	e5f1      	b.n	29f3c <_svfprintf_r+0xce4>
   2a358:	2140      	movs	r1, #64	; 0x40
   2a35a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a35c:	f001 fb2e 	bl	2b9bc <_malloc_r>
   2a360:	9b06      	ldr	r3, [sp, #24]
   2a362:	6018      	str	r0, [r3, #0]
   2a364:	6118      	str	r0, [r3, #16]
   2a366:	2800      	cmp	r0, #0
   2a368:	d100      	bne.n	2a36c <_svfprintf_r+0x1114>
   2a36a:	e24f      	b.n	2a80c <_svfprintf_r+0x15b4>
   2a36c:	2340      	movs	r3, #64	; 0x40
   2a36e:	9a06      	ldr	r2, [sp, #24]
   2a370:	6153      	str	r3, [r2, #20]
   2a372:	f7fe ff8e 	bl	29292 <_svfprintf_r+0x3a>
   2a376:	ab23      	add	r3, sp, #140	; 0x8c
   2a378:	931b      	str	r3, [sp, #108]	; 0x6c
   2a37a:	9304      	str	r3, [sp, #16]
   2a37c:	ab20      	add	r3, sp, #128	; 0x80
   2a37e:	9303      	str	r3, [sp, #12]
   2a380:	ab1f      	add	r3, sp, #124	; 0x7c
   2a382:	9302      	str	r3, [sp, #8]
   2a384:	4653      	mov	r3, sl
   2a386:	9301      	str	r3, [sp, #4]
   2a388:	2303      	movs	r3, #3
   2a38a:	464a      	mov	r2, r9
   2a38c:	9300      	str	r3, [sp, #0]
   2a38e:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a390:	9b07      	ldr	r3, [sp, #28]
   2a392:	f000 fb23 	bl	2a9dc <_dtoa_r>
   2a396:	4655      	mov	r5, sl
   2a398:	9011      	str	r0, [sp, #68]	; 0x44
   2a39a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2a39c:	4698      	mov	r8, r3
   2a39e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2a3a0:	44a8      	add	r8, r5
   2a3a2:	2b46      	cmp	r3, #70	; 0x46
   2a3a4:	d000      	beq.n	2a3a8 <_svfprintf_r+0x1150>
   2a3a6:	e72b      	b.n	2a200 <_svfprintf_r+0xfa8>
   2a3a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2a3aa:	781b      	ldrb	r3, [r3, #0]
   2a3ac:	2b30      	cmp	r3, #48	; 0x30
   2a3ae:	d016      	beq.n	2a3de <_svfprintf_r+0x1186>
   2a3b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2a3b2:	4498      	add	r8, r3
   2a3b4:	e724      	b.n	2a200 <_svfprintf_r+0xfa8>
   2a3b6:	003a      	movs	r2, r7
   2a3b8:	9906      	ldr	r1, [sp, #24]
   2a3ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a3bc:	f002 f9f0 	bl	2c7a0 <__ssprint_r>
   2a3c0:	2800      	cmp	r0, #0
   2a3c2:	d001      	beq.n	2a3c8 <_svfprintf_r+0x1170>
   2a3c4:	f7fe ffcf 	bl	29366 <_svfprintf_r+0x10e>
   2a3c8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   2a3ca:	68bc      	ldr	r4, [r7, #8]
   2a3cc:	ae32      	add	r6, sp, #200	; 0xc8
   2a3ce:	e778      	b.n	2a2c2 <_svfprintf_r+0x106a>
   2a3d0:	4653      	mov	r3, sl
   2a3d2:	2b00      	cmp	r3, #0
   2a3d4:	d000      	beq.n	2a3d8 <_svfprintf_r+0x1180>
   2a3d6:	e6de      	b.n	2a196 <_svfprintf_r+0xf3e>
   2a3d8:	3301      	adds	r3, #1
   2a3da:	469a      	mov	sl, r3
   2a3dc:	e6db      	b.n	2a196 <_svfprintf_r+0xf3e>
   2a3de:	2200      	movs	r2, #0
   2a3e0:	2300      	movs	r3, #0
   2a3e2:	4648      	mov	r0, r9
   2a3e4:	9907      	ldr	r1, [sp, #28]
   2a3e6:	f7fb fc2f 	bl	25c48 <__aeabi_dcmpeq>
   2a3ea:	2800      	cmp	r0, #0
   2a3ec:	d1e0      	bne.n	2a3b0 <_svfprintf_r+0x1158>
   2a3ee:	2301      	movs	r3, #1
   2a3f0:	1b5b      	subs	r3, r3, r5
   2a3f2:	931f      	str	r3, [sp, #124]	; 0x7c
   2a3f4:	4498      	add	r8, r3
   2a3f6:	e703      	b.n	2a200 <_svfprintf_r+0xfa8>
   2a3f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2a3fa:	ab32      	add	r3, sp, #200	; 0xc8
   2a3fc:	1a9b      	subs	r3, r3, r2
   2a3fe:	930e      	str	r3, [sp, #56]	; 0x38
   2a400:	f7ff f83a 	bl	29478 <_svfprintf_r+0x220>
   2a404:	9811      	ldr	r0, [sp, #68]	; 0x44
   2a406:	f7fe fc09 	bl	28c1c <strlen>
   2a40a:	0002      	movs	r2, r0
   2a40c:	900e      	str	r0, [sp, #56]	; 0x38
   2a40e:	0003      	movs	r3, r0
   2a410:	f7ff f9cd 	bl	297ae <_svfprintf_r+0x556>
   2a414:	232d      	movs	r3, #45	; 0x2d
   2a416:	aa16      	add	r2, sp, #88	; 0x58
   2a418:	77d3      	strb	r3, [r2, #31]
   2a41a:	4698      	mov	r8, r3
   2a41c:	2300      	movs	r3, #0
   2a41e:	469a      	mov	sl, r3
   2a420:	f7ff f835 	bl	2948e <_svfprintf_r+0x236>
   2a424:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2a426:	9313      	str	r3, [sp, #76]	; 0x4c
   2a428:	1cda      	adds	r2, r3, #3
   2a42a:	db02      	blt.n	2a432 <_svfprintf_r+0x11da>
   2a42c:	459a      	cmp	sl, r3
   2a42e:	db00      	blt.n	2a432 <_svfprintf_r+0x11da>
   2a430:	e70b      	b.n	2a24a <_svfprintf_r+0xff2>
   2a432:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2a434:	3b02      	subs	r3, #2
   2a436:	9312      	str	r3, [sp, #72]	; 0x48
   2a438:	222c      	movs	r2, #44	; 0x2c
   2a43a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2a43c:	2148      	movs	r1, #72	; 0x48
   2a43e:	1e5d      	subs	r5, r3, #1
   2a440:	ab16      	add	r3, sp, #88	; 0x58
   2a442:	189b      	adds	r3, r3, r2
   2a444:	466a      	mov	r2, sp
   2a446:	1852      	adds	r2, r2, r1
   2a448:	7812      	ldrb	r2, [r2, #0]
   2a44a:	951f      	str	r5, [sp, #124]	; 0x7c
   2a44c:	701a      	strb	r2, [r3, #0]
   2a44e:	2d00      	cmp	r5, #0
   2a450:	da00      	bge.n	2a454 <_svfprintf_r+0x11fc>
   2a452:	e1a4      	b.n	2a79e <_svfprintf_r+0x1546>
   2a454:	212d      	movs	r1, #45	; 0x2d
   2a456:	232b      	movs	r3, #43	; 0x2b
   2a458:	aa16      	add	r2, sp, #88	; 0x58
   2a45a:	1852      	adds	r2, r2, r1
   2a45c:	7013      	strb	r3, [r2, #0]
   2a45e:	2d09      	cmp	r5, #9
   2a460:	dc00      	bgt.n	2a464 <_svfprintf_r+0x120c>
   2a462:	e14c      	b.n	2a6fe <_svfprintf_r+0x14a6>
   2a464:	aa16      	add	r2, sp, #88	; 0x58
   2a466:	233b      	movs	r3, #59	; 0x3b
   2a468:	4694      	mov	ip, r2
   2a46a:	4463      	add	r3, ip
   2a46c:	469a      	mov	sl, r3
   2a46e:	46b1      	mov	r9, r6
   2a470:	46a0      	mov	r8, r4
   2a472:	4656      	mov	r6, sl
   2a474:	e000      	b.n	2a478 <_svfprintf_r+0x1220>
   2a476:	0026      	movs	r6, r4
   2a478:	0028      	movs	r0, r5
   2a47a:	210a      	movs	r1, #10
   2a47c:	f7fb fbce 	bl	25c1c <__aeabi_idivmod>
   2a480:	1e74      	subs	r4, r6, #1
   2a482:	3130      	adds	r1, #48	; 0x30
   2a484:	7021      	strb	r1, [r4, #0]
   2a486:	0028      	movs	r0, r5
   2a488:	210a      	movs	r1, #10
   2a48a:	f7fb fae1 	bl	25a50 <__divsi3>
   2a48e:	0005      	movs	r5, r0
   2a490:	2809      	cmp	r0, #9
   2a492:	dcf0      	bgt.n	2a476 <_svfprintf_r+0x121e>
   2a494:	0023      	movs	r3, r4
   2a496:	4644      	mov	r4, r8
   2a498:	46b0      	mov	r8, r6
   2a49a:	464e      	mov	r6, r9
   2a49c:	4699      	mov	r9, r3
   2a49e:	0003      	movs	r3, r0
   2a4a0:	3330      	adds	r3, #48	; 0x30
   2a4a2:	b2d8      	uxtb	r0, r3
   2a4a4:	4643      	mov	r3, r8
   2a4a6:	3b02      	subs	r3, #2
   2a4a8:	7018      	strb	r0, [r3, #0]
   2a4aa:	459a      	cmp	sl, r3
   2a4ac:	d800      	bhi.n	2a4b0 <_svfprintf_r+0x1258>
   2a4ae:	e1b4      	b.n	2a81a <_svfprintf_r+0x15c2>
   2a4b0:	4642      	mov	r2, r8
   2a4b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2a4b4:	4645      	mov	r5, r8
   2a4b6:	1a99      	subs	r1, r3, r2
   2a4b8:	2301      	movs	r3, #1
   2a4ba:	3107      	adds	r1, #7
   2a4bc:	425b      	negs	r3, r3
   2a4be:	e001      	b.n	2a4c4 <_svfprintf_r+0x126c>
   2a4c0:	5ce8      	ldrb	r0, [r5, r3]
   2a4c2:	3301      	adds	r3, #1
   2a4c4:	aa21      	add	r2, sp, #132	; 0x84
   2a4c6:	18d2      	adds	r2, r2, r3
   2a4c8:	70d0      	strb	r0, [r2, #3]
   2a4ca:	428b      	cmp	r3, r1
   2a4cc:	d1f8      	bne.n	2a4c0 <_svfprintf_r+0x1268>
   2a4ce:	a916      	add	r1, sp, #88	; 0x58
   2a4d0:	468c      	mov	ip, r1
   2a4d2:	222e      	movs	r2, #46	; 0x2e
   2a4d4:	464b      	mov	r3, r9
   2a4d6:	4462      	add	r2, ip
   2a4d8:	4694      	mov	ip, r2
   2a4da:	1afb      	subs	r3, r7, r3
   2a4dc:	4463      	add	r3, ip
   2a4de:	aa21      	add	r2, sp, #132	; 0x84
   2a4e0:	9914      	ldr	r1, [sp, #80]	; 0x50
   2a4e2:	1a9b      	subs	r3, r3, r2
   2a4e4:	469c      	mov	ip, r3
   2a4e6:	000a      	movs	r2, r1
   2a4e8:	4462      	add	r2, ip
   2a4ea:	931a      	str	r3, [sp, #104]	; 0x68
   2a4ec:	920e      	str	r2, [sp, #56]	; 0x38
   2a4ee:	2901      	cmp	r1, #1
   2a4f0:	dc00      	bgt.n	2a4f4 <_svfprintf_r+0x129c>
   2a4f2:	e145      	b.n	2a780 <_svfprintf_r+0x1528>
   2a4f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2a4f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a4f8:	4694      	mov	ip, r2
   2a4fa:	4463      	add	r3, ip
   2a4fc:	001a      	movs	r2, r3
   2a4fe:	930e      	str	r3, [sp, #56]	; 0x38
   2a500:	43db      	mvns	r3, r3
   2a502:	17db      	asrs	r3, r3, #31
   2a504:	401a      	ands	r2, r3
   2a506:	2300      	movs	r3, #0
   2a508:	9207      	str	r2, [sp, #28]
   2a50a:	9313      	str	r3, [sp, #76]	; 0x4c
   2a50c:	e6ae      	b.n	2a26c <_svfprintf_r+0x1014>
   2a50e:	2301      	movs	r3, #1
   2a510:	425b      	negs	r3, r3
   2a512:	930a      	str	r3, [sp, #40]	; 0x28
   2a514:	f7fe ff2d 	bl	29372 <_svfprintf_r+0x11a>
   2a518:	003a      	movs	r2, r7
   2a51a:	9906      	ldr	r1, [sp, #24]
   2a51c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a51e:	f002 f93f 	bl	2c7a0 <__ssprint_r>
   2a522:	2800      	cmp	r0, #0
   2a524:	d001      	beq.n	2a52a <_svfprintf_r+0x12d2>
   2a526:	f7fe ff1e 	bl	29366 <_svfprintf_r+0x10e>
   2a52a:	68bc      	ldr	r4, [r7, #8]
   2a52c:	ae32      	add	r6, sp, #200	; 0xc8
   2a52e:	e43c      	b.n	29daa <_svfprintf_r+0xb52>
   2a530:	003a      	movs	r2, r7
   2a532:	9906      	ldr	r1, [sp, #24]
   2a534:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a536:	f002 f933 	bl	2c7a0 <__ssprint_r>
   2a53a:	2800      	cmp	r0, #0
   2a53c:	d001      	beq.n	2a542 <_svfprintf_r+0x12ea>
   2a53e:	f7fe ff12 	bl	29366 <_svfprintf_r+0x10e>
   2a542:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2a544:	68bc      	ldr	r4, [r7, #8]
   2a546:	ae32      	add	r6, sp, #200	; 0xc8
   2a548:	e56a      	b.n	2a020 <_svfprintf_r+0xdc8>
   2a54a:	003a      	movs	r2, r7
   2a54c:	9906      	ldr	r1, [sp, #24]
   2a54e:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a550:	f002 f926 	bl	2c7a0 <__ssprint_r>
   2a554:	2800      	cmp	r0, #0
   2a556:	d001      	beq.n	2a55c <_svfprintf_r+0x1304>
   2a558:	f7fe ff05 	bl	29366 <_svfprintf_r+0x10e>
   2a55c:	68bc      	ldr	r4, [r7, #8]
   2a55e:	ae32      	add	r6, sp, #200	; 0xc8
   2a560:	e557      	b.n	2a012 <_svfprintf_r+0xdba>
   2a562:	003a      	movs	r2, r7
   2a564:	9906      	ldr	r1, [sp, #24]
   2a566:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a568:	f002 f91a 	bl	2c7a0 <__ssprint_r>
   2a56c:	2800      	cmp	r0, #0
   2a56e:	d001      	beq.n	2a574 <_svfprintf_r+0x131c>
   2a570:	f7fe fef9 	bl	29366 <_svfprintf_r+0x10e>
   2a574:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2a576:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2a578:	68bc      	ldr	r4, [r7, #8]
   2a57a:	1a9b      	subs	r3, r3, r2
   2a57c:	ae32      	add	r6, sp, #200	; 0xc8
   2a57e:	e56a      	b.n	2a056 <_svfprintf_r+0xdfe>
   2a580:	4653      	mov	r3, sl
   2a582:	9307      	str	r3, [sp, #28]
   2a584:	2b06      	cmp	r3, #6
   2a586:	d901      	bls.n	2a58c <_svfprintf_r+0x1334>
   2a588:	2306      	movs	r3, #6
   2a58a:	9307      	str	r3, [sp, #28]
   2a58c:	9b07      	ldr	r3, [sp, #28]
   2a58e:	950f      	str	r5, [sp, #60]	; 0x3c
   2a590:	930e      	str	r3, [sp, #56]	; 0x38
   2a592:	2300      	movs	r3, #0
   2a594:	4698      	mov	r8, r3
   2a596:	469a      	mov	sl, r3
   2a598:	9313      	str	r3, [sp, #76]	; 0x4c
   2a59a:	4b24      	ldr	r3, [pc, #144]	; (2a62c <_svfprintf_r+0x13d4>)
   2a59c:	9408      	str	r4, [sp, #32]
   2a59e:	9311      	str	r3, [sp, #68]	; 0x44
   2a5a0:	f7fe ff78 	bl	29494 <_svfprintf_r+0x23c>
   2a5a4:	2320      	movs	r3, #32
   2a5a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2a5a8:	439a      	bics	r2, r3
   2a5aa:	3b1a      	subs	r3, #26
   2a5ac:	920e      	str	r2, [sp, #56]	; 0x38
   2a5ae:	469a      	mov	sl, r3
   2a5b0:	e5f1      	b.n	2a196 <_svfprintf_r+0xf3e>
   2a5b2:	ab23      	add	r3, sp, #140	; 0x8c
   2a5b4:	931b      	str	r3, [sp, #108]	; 0x6c
   2a5b6:	9304      	str	r3, [sp, #16]
   2a5b8:	ab20      	add	r3, sp, #128	; 0x80
   2a5ba:	9303      	str	r3, [sp, #12]
   2a5bc:	ab1f      	add	r3, sp, #124	; 0x7c
   2a5be:	9302      	str	r3, [sp, #8]
   2a5c0:	4653      	mov	r3, sl
   2a5c2:	9301      	str	r3, [sp, #4]
   2a5c4:	2303      	movs	r3, #3
   2a5c6:	464a      	mov	r2, r9
   2a5c8:	9300      	str	r3, [sp, #0]
   2a5ca:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a5cc:	9b07      	ldr	r3, [sp, #28]
   2a5ce:	f000 fa05 	bl	2a9dc <_dtoa_r>
   2a5d2:	0003      	movs	r3, r0
   2a5d4:	4453      	add	r3, sl
   2a5d6:	9011      	str	r0, [sp, #68]	; 0x44
   2a5d8:	4698      	mov	r8, r3
   2a5da:	4655      	mov	r5, sl
   2a5dc:	e6e4      	b.n	2a3a8 <_svfprintf_r+0x1150>
   2a5de:	232d      	movs	r3, #45	; 0x2d
   2a5e0:	aa16      	add	r2, sp, #88	; 0x58
   2a5e2:	77d3      	strb	r3, [r2, #31]
   2a5e4:	4698      	mov	r8, r3
   2a5e6:	f7fe ffdb 	bl	295a0 <_svfprintf_r+0x348>
   2a5ea:	2280      	movs	r2, #128	; 0x80
   2a5ec:	0612      	lsls	r2, r2, #24
   2a5ee:	4694      	mov	ip, r2
   2a5f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a5f2:	4699      	mov	r9, r3
   2a5f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2a5f6:	4463      	add	r3, ip
   2a5f8:	9307      	str	r3, [sp, #28]
   2a5fa:	232d      	movs	r3, #45	; 0x2d
   2a5fc:	9310      	str	r3, [sp, #64]	; 0x40
   2a5fe:	e5d7      	b.n	2a1b0 <_svfprintf_r+0xf58>
   2a600:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2a602:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2a604:	4694      	mov	ip, r2
   2a606:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2a608:	4463      	add	r3, ip
   2a60a:	930e      	str	r3, [sp, #56]	; 0x38
   2a60c:	2a00      	cmp	r2, #0
   2a60e:	dc00      	bgt.n	2a612 <_svfprintf_r+0x13ba>
   2a610:	e0ce      	b.n	2a7b0 <_svfprintf_r+0x1558>
   2a612:	001a      	movs	r2, r3
   2a614:	43db      	mvns	r3, r3
   2a616:	17db      	asrs	r3, r3, #31
   2a618:	401a      	ands	r2, r3
   2a61a:	2367      	movs	r3, #103	; 0x67
   2a61c:	9207      	str	r2, [sp, #28]
   2a61e:	9312      	str	r3, [sp, #72]	; 0x48
   2a620:	e624      	b.n	2a26c <_svfprintf_r+0x1014>
   2a622:	46c0      	nop			; (mov r8, r8)
   2a624:	0002fd00 	.word	0x0002fd00
   2a628:	0002fcc4 	.word	0x0002fcc4
   2a62c:	0002fcf8 	.word	0x0002fcf8
   2a630:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2a632:	9313      	str	r3, [sp, #76]	; 0x4c
   2a634:	2b00      	cmp	r3, #0
   2a636:	dc00      	bgt.n	2a63a <_svfprintf_r+0x13e2>
   2a638:	e0d5      	b.n	2a7e6 <_svfprintf_r+0x158e>
   2a63a:	4652      	mov	r2, sl
   2a63c:	2a00      	cmp	r2, #0
   2a63e:	d000      	beq.n	2a642 <_svfprintf_r+0x13ea>
   2a640:	e092      	b.n	2a768 <_svfprintf_r+0x1510>
   2a642:	07e2      	lsls	r2, r4, #31
   2a644:	d500      	bpl.n	2a648 <_svfprintf_r+0x13f0>
   2a646:	e08f      	b.n	2a768 <_svfprintf_r+0x1510>
   2a648:	9307      	str	r3, [sp, #28]
   2a64a:	930e      	str	r3, [sp, #56]	; 0x38
   2a64c:	e60e      	b.n	2a26c <_svfprintf_r+0x1014>
   2a64e:	ab16      	add	r3, sp, #88	; 0x58
   2a650:	7fdb      	ldrb	r3, [r3, #31]
   2a652:	950f      	str	r5, [sp, #60]	; 0x3c
   2a654:	4698      	mov	r8, r3
   2a656:	4653      	mov	r3, sl
   2a658:	9307      	str	r3, [sp, #28]
   2a65a:	930e      	str	r3, [sp, #56]	; 0x38
   2a65c:	2300      	movs	r3, #0
   2a65e:	9408      	str	r4, [sp, #32]
   2a660:	469a      	mov	sl, r3
   2a662:	9313      	str	r3, [sp, #76]	; 0x4c
   2a664:	f7fe ff10 	bl	29488 <_svfprintf_r+0x230>
   2a668:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2a66a:	4698      	mov	r8, r3
   2a66c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2a66e:	44a8      	add	r8, r5
   2a670:	2b47      	cmp	r3, #71	; 0x47
   2a672:	d000      	beq.n	2a676 <_svfprintf_r+0x141e>
   2a674:	e5c4      	b.n	2a200 <_svfprintf_r+0xfa8>
   2a676:	07e3      	lsls	r3, r4, #31
   2a678:	d500      	bpl.n	2a67c <_svfprintf_r+0x1424>
   2a67a:	e68e      	b.n	2a39a <_svfprintf_r+0x1142>
   2a67c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2a67e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2a680:	1a9b      	subs	r3, r3, r2
   2a682:	9314      	str	r3, [sp, #80]	; 0x50
   2a684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a686:	2b47      	cmp	r3, #71	; 0x47
   2a688:	d100      	bne.n	2a68c <_svfprintf_r+0x1434>
   2a68a:	e6cb      	b.n	2a424 <_svfprintf_r+0x11cc>
   2a68c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2a68e:	9313      	str	r3, [sp, #76]	; 0x4c
   2a690:	e6d2      	b.n	2a438 <_svfprintf_r+0x11e0>
   2a692:	4244      	negs	r4, r0
   2a694:	3010      	adds	r0, #16
   2a696:	db00      	blt.n	2a69a <_svfprintf_r+0x1442>
   2a698:	e0d0      	b.n	2a83c <_svfprintf_r+0x15e4>
   2a69a:	486e      	ldr	r0, [pc, #440]	; (2a854 <_svfprintf_r+0x15fc>)
   2a69c:	2610      	movs	r6, #16
   2a69e:	0005      	movs	r5, r0
   2a6a0:	e003      	b.n	2a6aa <_svfprintf_r+0x1452>
   2a6a2:	3208      	adds	r2, #8
   2a6a4:	3c10      	subs	r4, #16
   2a6a6:	2c10      	cmp	r4, #16
   2a6a8:	dd38      	ble.n	2a71c <_svfprintf_r+0x14c4>
   2a6aa:	3110      	adds	r1, #16
   2a6ac:	3301      	adds	r3, #1
   2a6ae:	6015      	str	r5, [r2, #0]
   2a6b0:	6056      	str	r6, [r2, #4]
   2a6b2:	60b9      	str	r1, [r7, #8]
   2a6b4:	607b      	str	r3, [r7, #4]
   2a6b6:	2b07      	cmp	r3, #7
   2a6b8:	ddf3      	ble.n	2a6a2 <_svfprintf_r+0x144a>
   2a6ba:	003a      	movs	r2, r7
   2a6bc:	9906      	ldr	r1, [sp, #24]
   2a6be:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a6c0:	f002 f86e 	bl	2c7a0 <__ssprint_r>
   2a6c4:	2800      	cmp	r0, #0
   2a6c6:	d001      	beq.n	2a6cc <_svfprintf_r+0x1474>
   2a6c8:	f7fe fe4d 	bl	29366 <_svfprintf_r+0x10e>
   2a6cc:	68b9      	ldr	r1, [r7, #8]
   2a6ce:	687b      	ldr	r3, [r7, #4]
   2a6d0:	aa32      	add	r2, sp, #200	; 0xc8
   2a6d2:	e7e7      	b.n	2a6a4 <_svfprintf_r+0x144c>
   2a6d4:	003a      	movs	r2, r7
   2a6d6:	9906      	ldr	r1, [sp, #24]
   2a6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a6da:	f002 f861 	bl	2c7a0 <__ssprint_r>
   2a6de:	2800      	cmp	r0, #0
   2a6e0:	d001      	beq.n	2a6e6 <_svfprintf_r+0x148e>
   2a6e2:	f7fe fe40 	bl	29366 <_svfprintf_r+0x10e>
   2a6e6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   2a6e8:	68b9      	ldr	r1, [r7, #8]
   2a6ea:	687b      	ldr	r3, [r7, #4]
   2a6ec:	aa32      	add	r2, sp, #200	; 0xc8
   2a6ee:	e600      	b.n	2a2f2 <_svfprintf_r+0x109a>
   2a6f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2a6f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2a6f4:	4694      	mov	ip, r2
   2a6f6:	4463      	add	r3, ip
   2a6f8:	001a      	movs	r2, r3
   2a6fa:	930e      	str	r3, [sp, #56]	; 0x38
   2a6fc:	e78a      	b.n	2a614 <_svfprintf_r+0x13bc>
   2a6fe:	212e      	movs	r1, #46	; 0x2e
   2a700:	2330      	movs	r3, #48	; 0x30
   2a702:	aa16      	add	r2, sp, #88	; 0x58
   2a704:	1852      	adds	r2, r2, r1
   2a706:	7013      	strb	r3, [r2, #0]
   2a708:	002b      	movs	r3, r5
   2a70a:	aa16      	add	r2, sp, #88	; 0x58
   2a70c:	3101      	adds	r1, #1
   2a70e:	3330      	adds	r3, #48	; 0x30
   2a710:	1852      	adds	r2, r2, r1
   2a712:	7013      	strb	r3, [r2, #0]
   2a714:	ab22      	add	r3, sp, #136	; 0x88
   2a716:	e6e2      	b.n	2a4de <_svfprintf_r+0x1286>
   2a718:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2a71a:	e585      	b.n	2a228 <_svfprintf_r+0xfd0>
   2a71c:	46a9      	mov	r9, r5
   2a71e:	4648      	mov	r0, r9
   2a720:	1909      	adds	r1, r1, r4
   2a722:	3301      	adds	r3, #1
   2a724:	6010      	str	r0, [r2, #0]
   2a726:	6054      	str	r4, [r2, #4]
   2a728:	60b9      	str	r1, [r7, #8]
   2a72a:	3208      	adds	r2, #8
   2a72c:	607b      	str	r3, [r7, #4]
   2a72e:	2b07      	cmp	r3, #7
   2a730:	dc00      	bgt.n	2a734 <_svfprintf_r+0x14dc>
   2a732:	e5e1      	b.n	2a2f8 <_svfprintf_r+0x10a0>
   2a734:	003a      	movs	r2, r7
   2a736:	9906      	ldr	r1, [sp, #24]
   2a738:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a73a:	f002 f831 	bl	2c7a0 <__ssprint_r>
   2a73e:	2800      	cmp	r0, #0
   2a740:	d001      	beq.n	2a746 <_svfprintf_r+0x14ee>
   2a742:	f7fe fe10 	bl	29366 <_svfprintf_r+0x10e>
   2a746:	68b9      	ldr	r1, [r7, #8]
   2a748:	687b      	ldr	r3, [r7, #4]
   2a74a:	aa32      	add	r2, sp, #200	; 0xc8
   2a74c:	e5d4      	b.n	2a2f8 <_svfprintf_r+0x10a0>
   2a74e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2a750:	2b00      	cmp	r3, #0
   2a752:	db38      	blt.n	2a7c6 <_svfprintf_r+0x156e>
   2a754:	ab16      	add	r3, sp, #88	; 0x58
   2a756:	7fdb      	ldrb	r3, [r3, #31]
   2a758:	4698      	mov	r8, r3
   2a75a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2a75c:	2b47      	cmp	r3, #71	; 0x47
   2a75e:	dc2e      	bgt.n	2a7be <_svfprintf_r+0x1566>
   2a760:	4b3d      	ldr	r3, [pc, #244]	; (2a858 <_svfprintf_r+0x1600>)
   2a762:	9311      	str	r3, [sp, #68]	; 0x44
   2a764:	f7fe ff23 	bl	295ae <_svfprintf_r+0x356>
   2a768:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2a76a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2a76c:	4694      	mov	ip, r2
   2a76e:	4463      	add	r3, ip
   2a770:	4453      	add	r3, sl
   2a772:	001a      	movs	r2, r3
   2a774:	930e      	str	r3, [sp, #56]	; 0x38
   2a776:	43db      	mvns	r3, r3
   2a778:	17db      	asrs	r3, r3, #31
   2a77a:	401a      	ands	r2, r3
   2a77c:	9207      	str	r2, [sp, #28]
   2a77e:	e575      	b.n	2a26c <_svfprintf_r+0x1014>
   2a780:	2301      	movs	r3, #1
   2a782:	4023      	ands	r3, r4
   2a784:	9313      	str	r3, [sp, #76]	; 0x4c
   2a786:	d000      	beq.n	2a78a <_svfprintf_r+0x1532>
   2a788:	e6b4      	b.n	2a4f4 <_svfprintf_r+0x129c>
   2a78a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2a78c:	43d3      	mvns	r3, r2
   2a78e:	17db      	asrs	r3, r3, #31
   2a790:	401a      	ands	r2, r3
   2a792:	9207      	str	r2, [sp, #28]
   2a794:	e56a      	b.n	2a26c <_svfprintf_r+0x1014>
   2a796:	4a2f      	ldr	r2, [pc, #188]	; (2a854 <_svfprintf_r+0x15fc>)
   2a798:	687b      	ldr	r3, [r7, #4]
   2a79a:	4691      	mov	r9, r2
   2a79c:	e42d      	b.n	29ffa <_svfprintf_r+0xda2>
   2a79e:	2301      	movs	r3, #1
   2a7a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2a7a2:	391b      	subs	r1, #27
   2a7a4:	1a9d      	subs	r5, r3, r2
   2a7a6:	aa16      	add	r2, sp, #88	; 0x58
   2a7a8:	332c      	adds	r3, #44	; 0x2c
   2a7aa:	1852      	adds	r2, r2, r1
   2a7ac:	7013      	strb	r3, [r2, #0]
   2a7ae:	e656      	b.n	2a45e <_svfprintf_r+0x1206>
   2a7b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a7b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2a7b4:	1a98      	subs	r0, r3, r2
   2a7b6:	1c43      	adds	r3, r0, #1
   2a7b8:	001a      	movs	r2, r3
   2a7ba:	930e      	str	r3, [sp, #56]	; 0x38
   2a7bc:	e72a      	b.n	2a614 <_svfprintf_r+0x13bc>
   2a7be:	4b27      	ldr	r3, [pc, #156]	; (2a85c <_svfprintf_r+0x1604>)
   2a7c0:	9311      	str	r3, [sp, #68]	; 0x44
   2a7c2:	f7fe fef4 	bl	295ae <_svfprintf_r+0x356>
   2a7c6:	232d      	movs	r3, #45	; 0x2d
   2a7c8:	aa16      	add	r2, sp, #88	; 0x58
   2a7ca:	77d3      	strb	r3, [r2, #31]
   2a7cc:	4698      	mov	r8, r3
   2a7ce:	e7c4      	b.n	2a75a <_svfprintf_r+0x1502>
   2a7d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2a7d2:	1d1a      	adds	r2, r3, #4
   2a7d4:	681b      	ldr	r3, [r3, #0]
   2a7d6:	469a      	mov	sl, r3
   2a7d8:	2b00      	cmp	r3, #0
   2a7da:	db36      	blt.n	2a84a <_svfprintf_r+0x15f2>
   2a7dc:	784b      	ldrb	r3, [r1, #1]
   2a7de:	920f      	str	r2, [sp, #60]	; 0x3c
   2a7e0:	4659      	mov	r1, fp
   2a7e2:	f7fe fd9d 	bl	29320 <_svfprintf_r+0xc8>
   2a7e6:	4653      	mov	r3, sl
   2a7e8:	2b00      	cmp	r3, #0
   2a7ea:	d101      	bne.n	2a7f0 <_svfprintf_r+0x1598>
   2a7ec:	07e3      	lsls	r3, r4, #31
   2a7ee:	d503      	bpl.n	2a7f8 <_svfprintf_r+0x15a0>
   2a7f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2a7f2:	1c58      	adds	r0, r3, #1
   2a7f4:	0003      	movs	r3, r0
   2a7f6:	e7bb      	b.n	2a770 <_svfprintf_r+0x1518>
   2a7f8:	2301      	movs	r3, #1
   2a7fa:	e725      	b.n	2a648 <_svfprintf_r+0x13f0>
   2a7fc:	ab16      	add	r3, sp, #88	; 0x58
   2a7fe:	77d8      	strb	r0, [r3, #31]
   2a800:	f7fe ff6c 	bl	296dc <_svfprintf_r+0x484>
   2a804:	ab16      	add	r3, sp, #88	; 0x58
   2a806:	77d8      	strb	r0, [r3, #31]
   2a808:	f7ff f814 	bl	29834 <_svfprintf_r+0x5dc>
   2a80c:	230c      	movs	r3, #12
   2a80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a810:	6013      	str	r3, [r2, #0]
   2a812:	3b0d      	subs	r3, #13
   2a814:	930a      	str	r3, [sp, #40]	; 0x28
   2a816:	f7fe fdac 	bl	29372 <_svfprintf_r+0x11a>
   2a81a:	aa16      	add	r2, sp, #88	; 0x58
   2a81c:	232e      	movs	r3, #46	; 0x2e
   2a81e:	4694      	mov	ip, r2
   2a820:	4463      	add	r3, ip
   2a822:	e65c      	b.n	2a4de <_svfprintf_r+0x1286>
   2a824:	ab16      	add	r3, sp, #88	; 0x58
   2a826:	77d8      	strb	r0, [r3, #31]
   2a828:	f7fe fe85 	bl	29536 <_svfprintf_r+0x2de>
   2a82c:	ab16      	add	r3, sp, #88	; 0x58
   2a82e:	77d8      	strb	r0, [r3, #31]
   2a830:	f7fe fddd 	bl	293ee <_svfprintf_r+0x196>
   2a834:	ab16      	add	r3, sp, #88	; 0x58
   2a836:	77d8      	strb	r0, [r3, #31]
   2a838:	f7ff f87d 	bl	29936 <_svfprintf_r+0x6de>
   2a83c:	4805      	ldr	r0, [pc, #20]	; (2a854 <_svfprintf_r+0x15fc>)
   2a83e:	4681      	mov	r9, r0
   2a840:	e76d      	b.n	2a71e <_svfprintf_r+0x14c6>
   2a842:	ab16      	add	r3, sp, #88	; 0x58
   2a844:	77d8      	strb	r0, [r3, #31]
   2a846:	f7fe ff79 	bl	2973c <_svfprintf_r+0x4e4>
   2a84a:	2301      	movs	r3, #1
   2a84c:	425b      	negs	r3, r3
   2a84e:	469a      	mov	sl, r3
   2a850:	e7c4      	b.n	2a7dc <_svfprintf_r+0x1584>
   2a852:	46c0      	nop			; (mov r8, r8)
   2a854:	0002fd14 	.word	0x0002fd14
   2a858:	0002fcc8 	.word	0x0002fcc8
   2a85c:	0002fccc 	.word	0x0002fccc

0002a860 <register_fini>:
   2a860:	4b03      	ldr	r3, [pc, #12]	; (2a870 <register_fini+0x10>)
   2a862:	b510      	push	{r4, lr}
   2a864:	2b00      	cmp	r3, #0
   2a866:	d002      	beq.n	2a86e <register_fini+0xe>
   2a868:	4802      	ldr	r0, [pc, #8]	; (2a874 <register_fini+0x14>)
   2a86a:	f000 f805 	bl	2a878 <atexit>
   2a86e:	bd10      	pop	{r4, pc}
   2a870:	00000000 	.word	0x00000000
   2a874:	0002b965 	.word	0x0002b965

0002a878 <atexit>:
   2a878:	b510      	push	{r4, lr}
   2a87a:	0001      	movs	r1, r0
   2a87c:	2300      	movs	r3, #0
   2a87e:	2200      	movs	r2, #0
   2a880:	2000      	movs	r0, #0
   2a882:	f002 f81d 	bl	2c8c0 <__register_exitproc>
   2a886:	bd10      	pop	{r4, pc}

0002a888 <quorem>:
   2a888:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a88a:	4645      	mov	r5, r8
   2a88c:	4680      	mov	r8, r0
   2a88e:	46de      	mov	lr, fp
   2a890:	4657      	mov	r7, sl
   2a892:	464e      	mov	r6, r9
   2a894:	4642      	mov	r2, r8
   2a896:	b5e0      	push	{r5, r6, r7, lr}
   2a898:	690c      	ldr	r4, [r1, #16]
   2a89a:	6912      	ldr	r2, [r2, #16]
   2a89c:	b085      	sub	sp, #20
   2a89e:	000b      	movs	r3, r1
   2a8a0:	9102      	str	r1, [sp, #8]
   2a8a2:	2000      	movs	r0, #0
   2a8a4:	4294      	cmp	r4, r2
   2a8a6:	dd00      	ble.n	2a8aa <quorem+0x22>
   2a8a8:	e090      	b.n	2a9cc <quorem+0x144>
   2a8aa:	2214      	movs	r2, #20
   2a8ac:	4694      	mov	ip, r2
   2a8ae:	4463      	add	r3, ip
   2a8b0:	4699      	mov	r9, r3
   2a8b2:	464a      	mov	r2, r9
   2a8b4:	3c01      	subs	r4, #1
   2a8b6:	00a3      	lsls	r3, r4, #2
   2a8b8:	18d6      	adds	r6, r2, r3
   2a8ba:	2214      	movs	r2, #20
   2a8bc:	4442      	add	r2, r8
   2a8be:	4693      	mov	fp, r2
   2a8c0:	449b      	add	fp, r3
   2a8c2:	6833      	ldr	r3, [r6, #0]
   2a8c4:	0015      	movs	r5, r2
   2a8c6:	1c59      	adds	r1, r3, #1
   2a8c8:	465b      	mov	r3, fp
   2a8ca:	6818      	ldr	r0, [r3, #0]
   2a8cc:	9201      	str	r2, [sp, #4]
   2a8ce:	f7fb f835 	bl	2593c <__udivsi3>
   2a8d2:	1e03      	subs	r3, r0, #0
   2a8d4:	9000      	str	r0, [sp, #0]
   2a8d6:	d042      	beq.n	2a95e <quorem+0xd6>
   2a8d8:	0029      	movs	r1, r5
   2a8da:	2700      	movs	r7, #0
   2a8dc:	464d      	mov	r5, r9
   2a8de:	2000      	movs	r0, #0
   2a8e0:	46b1      	mov	r9, r6
   2a8e2:	46a2      	mov	sl, r4
   2a8e4:	003e      	movs	r6, r7
   2a8e6:	0004      	movs	r4, r0
   2a8e8:	469c      	mov	ip, r3
   2a8ea:	002f      	movs	r7, r5
   2a8ec:	0008      	movs	r0, r1
   2a8ee:	9503      	str	r5, [sp, #12]
   2a8f0:	4663      	mov	r3, ip
   2a8f2:	cf04      	ldmia	r7!, {r2}
   2a8f4:	0415      	lsls	r5, r2, #16
   2a8f6:	0c2d      	lsrs	r5, r5, #16
   2a8f8:	435d      	muls	r5, r3
   2a8fa:	0c12      	lsrs	r2, r2, #16
   2a8fc:	435a      	muls	r2, r3
   2a8fe:	19ad      	adds	r5, r5, r6
   2a900:	0c2b      	lsrs	r3, r5, #16
   2a902:	18d2      	adds	r2, r2, r3
   2a904:	6803      	ldr	r3, [r0, #0]
   2a906:	042d      	lsls	r5, r5, #16
   2a908:	0419      	lsls	r1, r3, #16
   2a90a:	0c09      	lsrs	r1, r1, #16
   2a90c:	1909      	adds	r1, r1, r4
   2a90e:	0c16      	lsrs	r6, r2, #16
   2a910:	0c2d      	lsrs	r5, r5, #16
   2a912:	0412      	lsls	r2, r2, #16
   2a914:	1b49      	subs	r1, r1, r5
   2a916:	0c12      	lsrs	r2, r2, #16
   2a918:	0c1b      	lsrs	r3, r3, #16
   2a91a:	1a9b      	subs	r3, r3, r2
   2a91c:	140a      	asrs	r2, r1, #16
   2a91e:	189b      	adds	r3, r3, r2
   2a920:	0409      	lsls	r1, r1, #16
   2a922:	141c      	asrs	r4, r3, #16
   2a924:	0c09      	lsrs	r1, r1, #16
   2a926:	041b      	lsls	r3, r3, #16
   2a928:	4319      	orrs	r1, r3
   2a92a:	c002      	stmia	r0!, {r1}
   2a92c:	45b9      	cmp	r9, r7
   2a92e:	d2df      	bcs.n	2a8f0 <quorem+0x68>
   2a930:	9b03      	ldr	r3, [sp, #12]
   2a932:	464e      	mov	r6, r9
   2a934:	4699      	mov	r9, r3
   2a936:	465b      	mov	r3, fp
   2a938:	681b      	ldr	r3, [r3, #0]
   2a93a:	4654      	mov	r4, sl
   2a93c:	2b00      	cmp	r3, #0
   2a93e:	d10e      	bne.n	2a95e <quorem+0xd6>
   2a940:	465b      	mov	r3, fp
   2a942:	9a01      	ldr	r2, [sp, #4]
   2a944:	3b04      	subs	r3, #4
   2a946:	429a      	cmp	r2, r3
   2a948:	d304      	bcc.n	2a954 <quorem+0xcc>
   2a94a:	e006      	b.n	2a95a <quorem+0xd2>
   2a94c:	3b04      	subs	r3, #4
   2a94e:	3c01      	subs	r4, #1
   2a950:	429a      	cmp	r2, r3
   2a952:	d202      	bcs.n	2a95a <quorem+0xd2>
   2a954:	6819      	ldr	r1, [r3, #0]
   2a956:	2900      	cmp	r1, #0
   2a958:	d0f8      	beq.n	2a94c <quorem+0xc4>
   2a95a:	4643      	mov	r3, r8
   2a95c:	611c      	str	r4, [r3, #16]
   2a95e:	9902      	ldr	r1, [sp, #8]
   2a960:	4640      	mov	r0, r8
   2a962:	f001 fd89 	bl	2c478 <__mcmp>
   2a966:	2800      	cmp	r0, #0
   2a968:	db2f      	blt.n	2a9ca <quorem+0x142>
   2a96a:	464f      	mov	r7, r9
   2a96c:	2000      	movs	r0, #0
   2a96e:	9b00      	ldr	r3, [sp, #0]
   2a970:	9d01      	ldr	r5, [sp, #4]
   2a972:	3301      	adds	r3, #1
   2a974:	9300      	str	r3, [sp, #0]
   2a976:	682b      	ldr	r3, [r5, #0]
   2a978:	cf02      	ldmia	r7!, {r1}
   2a97a:	041a      	lsls	r2, r3, #16
   2a97c:	0c12      	lsrs	r2, r2, #16
   2a97e:	1810      	adds	r0, r2, r0
   2a980:	040a      	lsls	r2, r1, #16
   2a982:	0c12      	lsrs	r2, r2, #16
   2a984:	1a82      	subs	r2, r0, r2
   2a986:	0c09      	lsrs	r1, r1, #16
   2a988:	0c1b      	lsrs	r3, r3, #16
   2a98a:	1a5b      	subs	r3, r3, r1
   2a98c:	1411      	asrs	r1, r2, #16
   2a98e:	185b      	adds	r3, r3, r1
   2a990:	0412      	lsls	r2, r2, #16
   2a992:	1418      	asrs	r0, r3, #16
   2a994:	0c12      	lsrs	r2, r2, #16
   2a996:	041b      	lsls	r3, r3, #16
   2a998:	4313      	orrs	r3, r2
   2a99a:	c508      	stmia	r5!, {r3}
   2a99c:	42be      	cmp	r6, r7
   2a99e:	d2ea      	bcs.n	2a976 <quorem+0xee>
   2a9a0:	9901      	ldr	r1, [sp, #4]
   2a9a2:	00a3      	lsls	r3, r4, #2
   2a9a4:	468c      	mov	ip, r1
   2a9a6:	4463      	add	r3, ip
   2a9a8:	681a      	ldr	r2, [r3, #0]
   2a9aa:	2a00      	cmp	r2, #0
   2a9ac:	d10d      	bne.n	2a9ca <quorem+0x142>
   2a9ae:	3b04      	subs	r3, #4
   2a9b0:	000a      	movs	r2, r1
   2a9b2:	4299      	cmp	r1, r3
   2a9b4:	d304      	bcc.n	2a9c0 <quorem+0x138>
   2a9b6:	e006      	b.n	2a9c6 <quorem+0x13e>
   2a9b8:	3b04      	subs	r3, #4
   2a9ba:	3c01      	subs	r4, #1
   2a9bc:	429a      	cmp	r2, r3
   2a9be:	d202      	bcs.n	2a9c6 <quorem+0x13e>
   2a9c0:	6819      	ldr	r1, [r3, #0]
   2a9c2:	2900      	cmp	r1, #0
   2a9c4:	d0f8      	beq.n	2a9b8 <quorem+0x130>
   2a9c6:	4643      	mov	r3, r8
   2a9c8:	611c      	str	r4, [r3, #16]
   2a9ca:	9800      	ldr	r0, [sp, #0]
   2a9cc:	b005      	add	sp, #20
   2a9ce:	bc3c      	pop	{r2, r3, r4, r5}
   2a9d0:	4690      	mov	r8, r2
   2a9d2:	4699      	mov	r9, r3
   2a9d4:	46a2      	mov	sl, r4
   2a9d6:	46ab      	mov	fp, r5
   2a9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a9da:	46c0      	nop			; (mov r8, r8)

0002a9dc <_dtoa_r>:
   2a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9de:	4657      	mov	r7, sl
   2a9e0:	464e      	mov	r6, r9
   2a9e2:	4645      	mov	r5, r8
   2a9e4:	46de      	mov	lr, fp
   2a9e6:	b5e0      	push	{r5, r6, r7, lr}
   2a9e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2a9ea:	b099      	sub	sp, #100	; 0x64
   2a9ec:	4682      	mov	sl, r0
   2a9ee:	001d      	movs	r5, r3
   2a9f0:	0016      	movs	r6, r2
   2a9f2:	001f      	movs	r7, r3
   2a9f4:	2900      	cmp	r1, #0
   2a9f6:	d009      	beq.n	2aa0c <_dtoa_r+0x30>
   2a9f8:	2301      	movs	r3, #1
   2a9fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2a9fc:	4093      	lsls	r3, r2
   2a9fe:	604a      	str	r2, [r1, #4]
   2aa00:	608b      	str	r3, [r1, #8]
   2aa02:	f001 fb2d 	bl	2c060 <_Bfree>
   2aa06:	2300      	movs	r3, #0
   2aa08:	4652      	mov	r2, sl
   2aa0a:	6413      	str	r3, [r2, #64]	; 0x40
   2aa0c:	46b8      	mov	r8, r7
   2aa0e:	2f00      	cmp	r7, #0
   2aa10:	db37      	blt.n	2aa82 <_dtoa_r+0xa6>
   2aa12:	2300      	movs	r3, #0
   2aa14:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2aa16:	6013      	str	r3, [r2, #0]
   2aa18:	4642      	mov	r2, r8
   2aa1a:	4bd6      	ldr	r3, [pc, #856]	; (2ad74 <_dtoa_r+0x398>)
   2aa1c:	401a      	ands	r2, r3
   2aa1e:	429a      	cmp	r2, r3
   2aa20:	d018      	beq.n	2aa54 <_dtoa_r+0x78>
   2aa22:	2200      	movs	r2, #0
   2aa24:	2300      	movs	r3, #0
   2aa26:	0030      	movs	r0, r6
   2aa28:	0039      	movs	r1, r7
   2aa2a:	f7fb f90d 	bl	25c48 <__aeabi_dcmpeq>
   2aa2e:	2800      	cmp	r0, #0
   2aa30:	d02f      	beq.n	2aa92 <_dtoa_r+0xb6>
   2aa32:	2301      	movs	r3, #1
   2aa34:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2aa36:	6013      	str	r3, [r2, #0]
   2aa38:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2aa3a:	2b00      	cmp	r3, #0
   2aa3c:	d100      	bne.n	2aa40 <_dtoa_r+0x64>
   2aa3e:	e22a      	b.n	2ae96 <_dtoa_r+0x4ba>
   2aa40:	48cd      	ldr	r0, [pc, #820]	; (2ad78 <_dtoa_r+0x39c>)
   2aa42:	6018      	str	r0, [r3, #0]
   2aa44:	3801      	subs	r0, #1
   2aa46:	b019      	add	sp, #100	; 0x64
   2aa48:	bc3c      	pop	{r2, r3, r4, r5}
   2aa4a:	4690      	mov	r8, r2
   2aa4c:	4699      	mov	r9, r3
   2aa4e:	46a2      	mov	sl, r4
   2aa50:	46ab      	mov	fp, r5
   2aa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aa54:	4bc9      	ldr	r3, [pc, #804]	; (2ad7c <_dtoa_r+0x3a0>)
   2aa56:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2aa58:	6013      	str	r3, [r2, #0]
   2aa5a:	2e00      	cmp	r6, #0
   2aa5c:	d10b      	bne.n	2aa76 <_dtoa_r+0x9a>
   2aa5e:	4643      	mov	r3, r8
   2aa60:	0318      	lsls	r0, r3, #12
   2aa62:	d108      	bne.n	2aa76 <_dtoa_r+0x9a>
   2aa64:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2aa66:	48c6      	ldr	r0, [pc, #792]	; (2ad80 <_dtoa_r+0x3a4>)
   2aa68:	2b00      	cmp	r3, #0
   2aa6a:	d0ec      	beq.n	2aa46 <_dtoa_r+0x6a>
   2aa6c:	0003      	movs	r3, r0
   2aa6e:	3308      	adds	r3, #8
   2aa70:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2aa72:	6013      	str	r3, [r2, #0]
   2aa74:	e7e7      	b.n	2aa46 <_dtoa_r+0x6a>
   2aa76:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2aa78:	48c2      	ldr	r0, [pc, #776]	; (2ad84 <_dtoa_r+0x3a8>)
   2aa7a:	2b00      	cmp	r3, #0
   2aa7c:	d0e3      	beq.n	2aa46 <_dtoa_r+0x6a>
   2aa7e:	1cc3      	adds	r3, r0, #3
   2aa80:	e7f6      	b.n	2aa70 <_dtoa_r+0x94>
   2aa82:	2301      	movs	r3, #1
   2aa84:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2aa86:	0068      	lsls	r0, r5, #1
   2aa88:	6013      	str	r3, [r2, #0]
   2aa8a:	0843      	lsrs	r3, r0, #1
   2aa8c:	4698      	mov	r8, r3
   2aa8e:	001f      	movs	r7, r3
   2aa90:	e7c2      	b.n	2aa18 <_dtoa_r+0x3c>
   2aa92:	ab16      	add	r3, sp, #88	; 0x58
   2aa94:	9301      	str	r3, [sp, #4]
   2aa96:	ab17      	add	r3, sp, #92	; 0x5c
   2aa98:	9300      	str	r3, [sp, #0]
   2aa9a:	0032      	movs	r2, r6
   2aa9c:	003b      	movs	r3, r7
   2aa9e:	4650      	mov	r0, sl
   2aaa0:	f001 fda0 	bl	2c5e4 <__d2b>
   2aaa4:	4643      	mov	r3, r8
   2aaa6:	4683      	mov	fp, r0
   2aaa8:	0d1a      	lsrs	r2, r3, #20
   2aaaa:	d100      	bne.n	2aaae <_dtoa_r+0xd2>
   2aaac:	e1d6      	b.n	2ae5c <_dtoa_r+0x480>
   2aaae:	033b      	lsls	r3, r7, #12
   2aab0:	4cb5      	ldr	r4, [pc, #724]	; (2ad88 <_dtoa_r+0x3ac>)
   2aab2:	0b1b      	lsrs	r3, r3, #12
   2aab4:	431c      	orrs	r4, r3
   2aab6:	4bb5      	ldr	r3, [pc, #724]	; (2ad8c <_dtoa_r+0x3b0>)
   2aab8:	0030      	movs	r0, r6
   2aaba:	4698      	mov	r8, r3
   2aabc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2aabe:	0021      	movs	r1, r4
   2aac0:	4699      	mov	r9, r3
   2aac2:	2300      	movs	r3, #0
   2aac4:	4490      	add	r8, r2
   2aac6:	930f      	str	r3, [sp, #60]	; 0x3c
   2aac8:	2200      	movs	r2, #0
   2aaca:	4bb1      	ldr	r3, [pc, #708]	; (2ad90 <_dtoa_r+0x3b4>)
   2aacc:	f7fd fa7a 	bl	27fc4 <__aeabi_dsub>
   2aad0:	4ab0      	ldr	r2, [pc, #704]	; (2ad94 <_dtoa_r+0x3b8>)
   2aad2:	4bb1      	ldr	r3, [pc, #708]	; (2ad98 <_dtoa_r+0x3bc>)
   2aad4:	f7fc fff6 	bl	27ac4 <__aeabi_dmul>
   2aad8:	4ab0      	ldr	r2, [pc, #704]	; (2ad9c <_dtoa_r+0x3c0>)
   2aada:	4bb1      	ldr	r3, [pc, #708]	; (2ada0 <_dtoa_r+0x3c4>)
   2aadc:	f7fc f8ae 	bl	26c3c <__aeabi_dadd>
   2aae0:	0004      	movs	r4, r0
   2aae2:	4640      	mov	r0, r8
   2aae4:	000d      	movs	r5, r1
   2aae6:	f7fd fdd7 	bl	28698 <__aeabi_i2d>
   2aaea:	4aae      	ldr	r2, [pc, #696]	; (2ada4 <_dtoa_r+0x3c8>)
   2aaec:	4bae      	ldr	r3, [pc, #696]	; (2ada8 <_dtoa_r+0x3cc>)
   2aaee:	f7fc ffe9 	bl	27ac4 <__aeabi_dmul>
   2aaf2:	0002      	movs	r2, r0
   2aaf4:	000b      	movs	r3, r1
   2aaf6:	0020      	movs	r0, r4
   2aaf8:	0029      	movs	r1, r5
   2aafa:	f7fc f89f 	bl	26c3c <__aeabi_dadd>
   2aafe:	0004      	movs	r4, r0
   2ab00:	000d      	movs	r5, r1
   2ab02:	f7fd fd95 	bl	28630 <__aeabi_d2iz>
   2ab06:	2200      	movs	r2, #0
   2ab08:	9003      	str	r0, [sp, #12]
   2ab0a:	2300      	movs	r3, #0
   2ab0c:	0020      	movs	r0, r4
   2ab0e:	0029      	movs	r1, r5
   2ab10:	f7fb f8a0 	bl	25c54 <__aeabi_dcmplt>
   2ab14:	2800      	cmp	r0, #0
   2ab16:	d000      	beq.n	2ab1a <_dtoa_r+0x13e>
   2ab18:	e2b1      	b.n	2b07e <_dtoa_r+0x6a2>
   2ab1a:	2301      	movs	r3, #1
   2ab1c:	9c03      	ldr	r4, [sp, #12]
   2ab1e:	930c      	str	r3, [sp, #48]	; 0x30
   2ab20:	2c16      	cmp	r4, #22
   2ab22:	d810      	bhi.n	2ab46 <_dtoa_r+0x16a>
   2ab24:	49a1      	ldr	r1, [pc, #644]	; (2adac <_dtoa_r+0x3d0>)
   2ab26:	00e3      	lsls	r3, r4, #3
   2ab28:	18c9      	adds	r1, r1, r3
   2ab2a:	0032      	movs	r2, r6
   2ab2c:	6808      	ldr	r0, [r1, #0]
   2ab2e:	6849      	ldr	r1, [r1, #4]
   2ab30:	003b      	movs	r3, r7
   2ab32:	f7fb f8a3 	bl	25c7c <__aeabi_dcmpgt>
   2ab36:	2800      	cmp	r0, #0
   2ab38:	d100      	bne.n	2ab3c <_dtoa_r+0x160>
   2ab3a:	e31d      	b.n	2b178 <_dtoa_r+0x79c>
   2ab3c:	0023      	movs	r3, r4
   2ab3e:	3b01      	subs	r3, #1
   2ab40:	9303      	str	r3, [sp, #12]
   2ab42:	2300      	movs	r3, #0
   2ab44:	930c      	str	r3, [sp, #48]	; 0x30
   2ab46:	464b      	mov	r3, r9
   2ab48:	4642      	mov	r2, r8
   2ab4a:	1a9a      	subs	r2, r3, r2
   2ab4c:	2300      	movs	r3, #0
   2ab4e:	9306      	str	r3, [sp, #24]
   2ab50:	0013      	movs	r3, r2
   2ab52:	3b01      	subs	r3, #1
   2ab54:	9304      	str	r3, [sp, #16]
   2ab56:	d500      	bpl.n	2ab5a <_dtoa_r+0x17e>
   2ab58:	e2a1      	b.n	2b09e <_dtoa_r+0x6c2>
   2ab5a:	9b03      	ldr	r3, [sp, #12]
   2ab5c:	2b00      	cmp	r3, #0
   2ab5e:	da00      	bge.n	2ab62 <_dtoa_r+0x186>
   2ab60:	e284      	b.n	2b06c <_dtoa_r+0x690>
   2ab62:	469c      	mov	ip, r3
   2ab64:	930d      	str	r3, [sp, #52]	; 0x34
   2ab66:	2300      	movs	r3, #0
   2ab68:	9a04      	ldr	r2, [sp, #16]
   2ab6a:	4699      	mov	r9, r3
   2ab6c:	0011      	movs	r1, r2
   2ab6e:	4461      	add	r1, ip
   2ab70:	9104      	str	r1, [sp, #16]
   2ab72:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2ab74:	2b09      	cmp	r3, #9
   2ab76:	d900      	bls.n	2ab7a <_dtoa_r+0x19e>
   2ab78:	e18f      	b.n	2ae9a <_dtoa_r+0x4be>
   2ab7a:	2401      	movs	r4, #1
   2ab7c:	2b05      	cmp	r3, #5
   2ab7e:	dd02      	ble.n	2ab86 <_dtoa_r+0x1aa>
   2ab80:	2400      	movs	r4, #0
   2ab82:	3b04      	subs	r3, #4
   2ab84:	9322      	str	r3, [sp, #136]	; 0x88
   2ab86:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2ab88:	2b03      	cmp	r3, #3
   2ab8a:	d101      	bne.n	2ab90 <_dtoa_r+0x1b4>
   2ab8c:	f000 fcce 	bl	2b52c <_dtoa_r+0xb50>
   2ab90:	dc01      	bgt.n	2ab96 <_dtoa_r+0x1ba>
   2ab92:	f000 fc92 	bl	2b4ba <_dtoa_r+0xade>
   2ab96:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2ab98:	2b04      	cmp	r3, #4
   2ab9a:	d101      	bne.n	2aba0 <_dtoa_r+0x1c4>
   2ab9c:	f000 fc40 	bl	2b420 <_dtoa_r+0xa44>
   2aba0:	2301      	movs	r3, #1
   2aba2:	930b      	str	r3, [sp, #44]	; 0x2c
   2aba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2aba6:	2b05      	cmp	r3, #5
   2aba8:	d001      	beq.n	2abae <_dtoa_r+0x1d2>
   2abaa:	f000 fc8b 	bl	2b4c4 <_dtoa_r+0xae8>
   2abae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   2abb0:	9b03      	ldr	r3, [sp, #12]
   2abb2:	4694      	mov	ip, r2
   2abb4:	4463      	add	r3, ip
   2abb6:	930e      	str	r3, [sp, #56]	; 0x38
   2abb8:	3301      	adds	r3, #1
   2abba:	9307      	str	r3, [sp, #28]
   2abbc:	1e1d      	subs	r5, r3, #0
   2abbe:	dc01      	bgt.n	2abc4 <_dtoa_r+0x1e8>
   2abc0:	f000 fd49 	bl	2b656 <_dtoa_r+0xc7a>
   2abc4:	9b07      	ldr	r3, [sp, #28]
   2abc6:	4698      	mov	r8, r3
   2abc8:	2300      	movs	r3, #0
   2abca:	4652      	mov	r2, sl
   2abcc:	2100      	movs	r1, #0
   2abce:	6453      	str	r3, [r2, #68]	; 0x44
   2abd0:	2d17      	cmp	r5, #23
   2abd2:	d90a      	bls.n	2abea <_dtoa_r+0x20e>
   2abd4:	2201      	movs	r2, #1
   2abd6:	3304      	adds	r3, #4
   2abd8:	005b      	lsls	r3, r3, #1
   2abda:	0018      	movs	r0, r3
   2abdc:	3014      	adds	r0, #20
   2abde:	0011      	movs	r1, r2
   2abe0:	3201      	adds	r2, #1
   2abe2:	4285      	cmp	r5, r0
   2abe4:	d2f8      	bcs.n	2abd8 <_dtoa_r+0x1fc>
   2abe6:	4653      	mov	r3, sl
   2abe8:	6459      	str	r1, [r3, #68]	; 0x44
   2abea:	4650      	mov	r0, sl
   2abec:	f001 fa10 	bl	2c010 <_Balloc>
   2abf0:	4653      	mov	r3, sl
   2abf2:	6418      	str	r0, [r3, #64]	; 0x40
   2abf4:	4643      	mov	r3, r8
   2abf6:	900a      	str	r0, [sp, #40]	; 0x28
   2abf8:	2b0e      	cmp	r3, #14
   2abfa:	d900      	bls.n	2abfe <_dtoa_r+0x222>
   2abfc:	e161      	b.n	2aec2 <_dtoa_r+0x4e6>
   2abfe:	2c00      	cmp	r4, #0
   2ac00:	d100      	bne.n	2ac04 <_dtoa_r+0x228>
   2ac02:	e15e      	b.n	2aec2 <_dtoa_r+0x4e6>
   2ac04:	9610      	str	r6, [sp, #64]	; 0x40
   2ac06:	9711      	str	r7, [sp, #68]	; 0x44
   2ac08:	9e03      	ldr	r6, [sp, #12]
   2ac0a:	2e00      	cmp	r6, #0
   2ac0c:	dc01      	bgt.n	2ac12 <_dtoa_r+0x236>
   2ac0e:	f000 fd25 	bl	2b65c <_dtoa_r+0xc80>
   2ac12:	0032      	movs	r2, r6
   2ac14:	210f      	movs	r1, #15
   2ac16:	4b65      	ldr	r3, [pc, #404]	; (2adac <_dtoa_r+0x3d0>)
   2ac18:	400a      	ands	r2, r1
   2ac1a:	00d2      	lsls	r2, r2, #3
   2ac1c:	189b      	adds	r3, r3, r2
   2ac1e:	1136      	asrs	r6, r6, #4
   2ac20:	681c      	ldr	r4, [r3, #0]
   2ac22:	685d      	ldr	r5, [r3, #4]
   2ac24:	06f3      	lsls	r3, r6, #27
   2ac26:	d401      	bmi.n	2ac2c <_dtoa_r+0x250>
   2ac28:	f000 fcca 	bl	2b5c0 <_dtoa_r+0xbe4>
   2ac2c:	4b60      	ldr	r3, [pc, #384]	; (2adb0 <_dtoa_r+0x3d4>)
   2ac2e:	400e      	ands	r6, r1
   2ac30:	6a1a      	ldr	r2, [r3, #32]
   2ac32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ac34:	9810      	ldr	r0, [sp, #64]	; 0x40
   2ac36:	9911      	ldr	r1, [sp, #68]	; 0x44
   2ac38:	f7fc fb10 	bl	2725c <__aeabi_ddiv>
   2ac3c:	2303      	movs	r3, #3
   2ac3e:	4698      	mov	r8, r3
   2ac40:	9008      	str	r0, [sp, #32]
   2ac42:	9109      	str	r1, [sp, #36]	; 0x24
   2ac44:	2e00      	cmp	r6, #0
   2ac46:	d011      	beq.n	2ac6c <_dtoa_r+0x290>
   2ac48:	4f59      	ldr	r7, [pc, #356]	; (2adb0 <_dtoa_r+0x3d4>)
   2ac4a:	2301      	movs	r3, #1
   2ac4c:	4233      	tst	r3, r6
   2ac4e:	d009      	beq.n	2ac64 <_dtoa_r+0x288>
   2ac50:	469c      	mov	ip, r3
   2ac52:	683a      	ldr	r2, [r7, #0]
   2ac54:	687b      	ldr	r3, [r7, #4]
   2ac56:	0020      	movs	r0, r4
   2ac58:	0029      	movs	r1, r5
   2ac5a:	44e0      	add	r8, ip
   2ac5c:	f7fc ff32 	bl	27ac4 <__aeabi_dmul>
   2ac60:	0004      	movs	r4, r0
   2ac62:	000d      	movs	r5, r1
   2ac64:	1076      	asrs	r6, r6, #1
   2ac66:	3708      	adds	r7, #8
   2ac68:	2e00      	cmp	r6, #0
   2ac6a:	d1ee      	bne.n	2ac4a <_dtoa_r+0x26e>
   2ac6c:	0022      	movs	r2, r4
   2ac6e:	9808      	ldr	r0, [sp, #32]
   2ac70:	9909      	ldr	r1, [sp, #36]	; 0x24
   2ac72:	002b      	movs	r3, r5
   2ac74:	f7fc faf2 	bl	2725c <__aeabi_ddiv>
   2ac78:	0006      	movs	r6, r0
   2ac7a:	000f      	movs	r7, r1
   2ac7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2ac7e:	2b00      	cmp	r3, #0
   2ac80:	d009      	beq.n	2ac96 <_dtoa_r+0x2ba>
   2ac82:	2200      	movs	r2, #0
   2ac84:	4b40      	ldr	r3, [pc, #256]	; (2ad88 <_dtoa_r+0x3ac>)
   2ac86:	0030      	movs	r0, r6
   2ac88:	0039      	movs	r1, r7
   2ac8a:	f7fa ffe3 	bl	25c54 <__aeabi_dcmplt>
   2ac8e:	2800      	cmp	r0, #0
   2ac90:	d001      	beq.n	2ac96 <_dtoa_r+0x2ba>
   2ac92:	f000 fdc2 	bl	2b81a <_dtoa_r+0xe3e>
   2ac96:	4640      	mov	r0, r8
   2ac98:	f7fd fcfe 	bl	28698 <__aeabi_i2d>
   2ac9c:	0032      	movs	r2, r6
   2ac9e:	003b      	movs	r3, r7
   2aca0:	f7fc ff10 	bl	27ac4 <__aeabi_dmul>
   2aca4:	2200      	movs	r2, #0
   2aca6:	4b43      	ldr	r3, [pc, #268]	; (2adb4 <_dtoa_r+0x3d8>)
   2aca8:	f7fb ffc8 	bl	26c3c <__aeabi_dadd>
   2acac:	4a42      	ldr	r2, [pc, #264]	; (2adb8 <_dtoa_r+0x3dc>)
   2acae:	000b      	movs	r3, r1
   2acb0:	4694      	mov	ip, r2
   2acb2:	4463      	add	r3, ip
   2acb4:	9008      	str	r0, [sp, #32]
   2acb6:	9109      	str	r1, [sp, #36]	; 0x24
   2acb8:	9309      	str	r3, [sp, #36]	; 0x24
   2acba:	9b07      	ldr	r3, [sp, #28]
   2acbc:	2b00      	cmp	r3, #0
   2acbe:	d101      	bne.n	2acc4 <_dtoa_r+0x2e8>
   2acc0:	f000 fc50 	bl	2b564 <_dtoa_r+0xb88>
   2acc4:	9b03      	ldr	r3, [sp, #12]
   2acc6:	9313      	str	r3, [sp, #76]	; 0x4c
   2acc8:	9b07      	ldr	r3, [sp, #28]
   2acca:	9312      	str	r3, [sp, #72]	; 0x48
   2accc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2acce:	2b00      	cmp	r3, #0
   2acd0:	d101      	bne.n	2acd6 <_dtoa_r+0x2fa>
   2acd2:	f000 fd1d 	bl	2b710 <_dtoa_r+0xd34>
   2acd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2acd8:	2000      	movs	r0, #0
   2acda:	1e5a      	subs	r2, r3, #1
   2acdc:	4b33      	ldr	r3, [pc, #204]	; (2adac <_dtoa_r+0x3d0>)
   2acde:	00d2      	lsls	r2, r2, #3
   2ace0:	189b      	adds	r3, r3, r2
   2ace2:	681a      	ldr	r2, [r3, #0]
   2ace4:	685b      	ldr	r3, [r3, #4]
   2ace6:	4935      	ldr	r1, [pc, #212]	; (2adbc <_dtoa_r+0x3e0>)
   2ace8:	f7fc fab8 	bl	2725c <__aeabi_ddiv>
   2acec:	9a08      	ldr	r2, [sp, #32]
   2acee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2acf0:	f7fd f968 	bl	27fc4 <__aeabi_dsub>
   2acf4:	9008      	str	r0, [sp, #32]
   2acf6:	9109      	str	r1, [sp, #36]	; 0x24
   2acf8:	0039      	movs	r1, r7
   2acfa:	0030      	movs	r0, r6
   2acfc:	f7fd fc98 	bl	28630 <__aeabi_d2iz>
   2ad00:	0004      	movs	r4, r0
   2ad02:	f7fd fcc9 	bl	28698 <__aeabi_i2d>
   2ad06:	0002      	movs	r2, r0
   2ad08:	000b      	movs	r3, r1
   2ad0a:	0030      	movs	r0, r6
   2ad0c:	0039      	movs	r1, r7
   2ad0e:	f7fd f959 	bl	27fc4 <__aeabi_dsub>
   2ad12:	0005      	movs	r5, r0
   2ad14:	000e      	movs	r6, r1
   2ad16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2ad18:	3430      	adds	r4, #48	; 0x30
   2ad1a:	1c51      	adds	r1, r2, #1
   2ad1c:	b2e7      	uxtb	r7, r4
   2ad1e:	9114      	str	r1, [sp, #80]	; 0x50
   2ad20:	7017      	strb	r7, [r2, #0]
   2ad22:	0033      	movs	r3, r6
   2ad24:	9808      	ldr	r0, [sp, #32]
   2ad26:	9909      	ldr	r1, [sp, #36]	; 0x24
   2ad28:	002a      	movs	r2, r5
   2ad2a:	f7fa ffa7 	bl	25c7c <__aeabi_dcmpgt>
   2ad2e:	2800      	cmp	r0, #0
   2ad30:	d001      	beq.n	2ad36 <_dtoa_r+0x35a>
   2ad32:	f000 fdfe 	bl	2b932 <_dtoa_r+0xf56>
   2ad36:	002a      	movs	r2, r5
   2ad38:	0033      	movs	r3, r6
   2ad3a:	2000      	movs	r0, #0
   2ad3c:	4912      	ldr	r1, [pc, #72]	; (2ad88 <_dtoa_r+0x3ac>)
   2ad3e:	f7fd f941 	bl	27fc4 <__aeabi_dsub>
   2ad42:	0002      	movs	r2, r0
   2ad44:	000b      	movs	r3, r1
   2ad46:	9808      	ldr	r0, [sp, #32]
   2ad48:	9909      	ldr	r1, [sp, #36]	; 0x24
   2ad4a:	f7fa ff97 	bl	25c7c <__aeabi_dcmpgt>
   2ad4e:	2800      	cmp	r0, #0
   2ad50:	d001      	beq.n	2ad56 <_dtoa_r+0x37a>
   2ad52:	f000 fde7 	bl	2b924 <_dtoa_r+0xf48>
   2ad56:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2ad58:	2b01      	cmp	r3, #1
   2ad5a:	d101      	bne.n	2ad60 <_dtoa_r+0x384>
   2ad5c:	f000 fc78 	bl	2b650 <_dtoa_r+0xc74>
   2ad60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2ad62:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2ad64:	4694      	mov	ip, r2
   2ad66:	4463      	add	r3, ip
   2ad68:	4698      	mov	r8, r3
   2ad6a:	464b      	mov	r3, r9
   2ad6c:	9312      	str	r3, [sp, #72]	; 0x48
   2ad6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2ad70:	4699      	mov	r9, r3
   2ad72:	e038      	b.n	2ade6 <_dtoa_r+0x40a>
   2ad74:	7ff00000 	.word	0x7ff00000
   2ad78:	0002fd01 	.word	0x0002fd01
   2ad7c:	0000270f 	.word	0x0000270f
   2ad80:	0002fd24 	.word	0x0002fd24
   2ad84:	0002fd30 	.word	0x0002fd30
   2ad88:	3ff00000 	.word	0x3ff00000
   2ad8c:	fffffc01 	.word	0xfffffc01
   2ad90:	3ff80000 	.word	0x3ff80000
   2ad94:	636f4361 	.word	0x636f4361
   2ad98:	3fd287a7 	.word	0x3fd287a7
   2ad9c:	8b60c8b3 	.word	0x8b60c8b3
   2ada0:	3fc68a28 	.word	0x3fc68a28
   2ada4:	509f79fb 	.word	0x509f79fb
   2ada8:	3fd34413 	.word	0x3fd34413
   2adac:	0002fd60 	.word	0x0002fd60
   2adb0:	0002fd38 	.word	0x0002fd38
   2adb4:	401c0000 	.word	0x401c0000
   2adb8:	fcc00000 	.word	0xfcc00000
   2adbc:	3fe00000 	.word	0x3fe00000
   2adc0:	002a      	movs	r2, r5
   2adc2:	0033      	movs	r3, r6
   2adc4:	2000      	movs	r0, #0
   2adc6:	49b9      	ldr	r1, [pc, #740]	; (2b0ac <_dtoa_r+0x6d0>)
   2adc8:	f7fd f8fc 	bl	27fc4 <__aeabi_dsub>
   2adcc:	9a08      	ldr	r2, [sp, #32]
   2adce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2add0:	f7fa ff40 	bl	25c54 <__aeabi_dcmplt>
   2add4:	2800      	cmp	r0, #0
   2add6:	d001      	beq.n	2addc <_dtoa_r+0x400>
   2add8:	f000 fd74 	bl	2b8c4 <_dtoa_r+0xee8>
   2addc:	46a1      	mov	r9, r4
   2adde:	4544      	cmp	r4, r8
   2ade0:	d101      	bne.n	2ade6 <_dtoa_r+0x40a>
   2ade2:	f000 fc33 	bl	2b64c <_dtoa_r+0xc70>
   2ade6:	9808      	ldr	r0, [sp, #32]
   2ade8:	9909      	ldr	r1, [sp, #36]	; 0x24
   2adea:	2200      	movs	r2, #0
   2adec:	4bb0      	ldr	r3, [pc, #704]	; (2b0b0 <_dtoa_r+0x6d4>)
   2adee:	f7fc fe69 	bl	27ac4 <__aeabi_dmul>
   2adf2:	2200      	movs	r2, #0
   2adf4:	4bae      	ldr	r3, [pc, #696]	; (2b0b0 <_dtoa_r+0x6d4>)
   2adf6:	9008      	str	r0, [sp, #32]
   2adf8:	9109      	str	r1, [sp, #36]	; 0x24
   2adfa:	0028      	movs	r0, r5
   2adfc:	0031      	movs	r1, r6
   2adfe:	f7fc fe61 	bl	27ac4 <__aeabi_dmul>
   2ae02:	000d      	movs	r5, r1
   2ae04:	0004      	movs	r4, r0
   2ae06:	f7fd fc13 	bl	28630 <__aeabi_d2iz>
   2ae0a:	0007      	movs	r7, r0
   2ae0c:	f7fd fc44 	bl	28698 <__aeabi_i2d>
   2ae10:	0002      	movs	r2, r0
   2ae12:	000b      	movs	r3, r1
   2ae14:	0020      	movs	r0, r4
   2ae16:	0029      	movs	r1, r5
   2ae18:	f7fd f8d4 	bl	27fc4 <__aeabi_dsub>
   2ae1c:	464b      	mov	r3, r9
   2ae1e:	3730      	adds	r7, #48	; 0x30
   2ae20:	b2ff      	uxtb	r7, r7
   2ae22:	1c5c      	adds	r4, r3, #1
   2ae24:	701f      	strb	r7, [r3, #0]
   2ae26:	9a08      	ldr	r2, [sp, #32]
   2ae28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ae2a:	0005      	movs	r5, r0
   2ae2c:	000e      	movs	r6, r1
   2ae2e:	f7fa ff11 	bl	25c54 <__aeabi_dcmplt>
   2ae32:	2800      	cmp	r0, #0
   2ae34:	d0c4      	beq.n	2adc0 <_dtoa_r+0x3e4>
   2ae36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2ae38:	9303      	str	r3, [sp, #12]
   2ae3a:	4659      	mov	r1, fp
   2ae3c:	4650      	mov	r0, sl
   2ae3e:	f001 f90f 	bl	2c060 <_Bfree>
   2ae42:	2300      	movs	r3, #0
   2ae44:	7023      	strb	r3, [r4, #0]
   2ae46:	9b03      	ldr	r3, [sp, #12]
   2ae48:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2ae4a:	3301      	adds	r3, #1
   2ae4c:	6013      	str	r3, [r2, #0]
   2ae4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ae50:	2b00      	cmp	r3, #0
   2ae52:	d100      	bne.n	2ae56 <_dtoa_r+0x47a>
   2ae54:	e3a8      	b.n	2b5a8 <_dtoa_r+0xbcc>
   2ae56:	601c      	str	r4, [r3, #0]
   2ae58:	980a      	ldr	r0, [sp, #40]	; 0x28
   2ae5a:	e5f4      	b.n	2aa46 <_dtoa_r+0x6a>
   2ae5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2ae5e:	4699      	mov	r9, r3
   2ae60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2ae62:	444b      	add	r3, r9
   2ae64:	001c      	movs	r4, r3
   2ae66:	4b93      	ldr	r3, [pc, #588]	; (2b0b4 <_dtoa_r+0x6d8>)
   2ae68:	18e3      	adds	r3, r4, r3
   2ae6a:	2b20      	cmp	r3, #32
   2ae6c:	dc00      	bgt.n	2ae70 <_dtoa_r+0x494>
   2ae6e:	e17e      	b.n	2b16e <_dtoa_r+0x792>
   2ae70:	0031      	movs	r1, r6
   2ae72:	4a91      	ldr	r2, [pc, #580]	; (2b0b8 <_dtoa_r+0x6dc>)
   2ae74:	4640      	mov	r0, r8
   2ae76:	18a2      	adds	r2, r4, r2
   2ae78:	40d1      	lsrs	r1, r2
   2ae7a:	000a      	movs	r2, r1
   2ae7c:	2140      	movs	r1, #64	; 0x40
   2ae7e:	1acb      	subs	r3, r1, r3
   2ae80:	4098      	lsls	r0, r3
   2ae82:	4310      	orrs	r0, r2
   2ae84:	f7fd fc4a 	bl	2871c <__aeabi_ui2d>
   2ae88:	1e63      	subs	r3, r4, #1
   2ae8a:	4698      	mov	r8, r3
   2ae8c:	2301      	movs	r3, #1
   2ae8e:	4d8b      	ldr	r5, [pc, #556]	; (2b0bc <_dtoa_r+0x6e0>)
   2ae90:	930f      	str	r3, [sp, #60]	; 0x3c
   2ae92:	1949      	adds	r1, r1, r5
   2ae94:	e618      	b.n	2aac8 <_dtoa_r+0xec>
   2ae96:	488a      	ldr	r0, [pc, #552]	; (2b0c0 <_dtoa_r+0x6e4>)
   2ae98:	e5d5      	b.n	2aa46 <_dtoa_r+0x6a>
   2ae9a:	2300      	movs	r3, #0
   2ae9c:	4652      	mov	r2, sl
   2ae9e:	2100      	movs	r1, #0
   2aea0:	6453      	str	r3, [r2, #68]	; 0x44
   2aea2:	4650      	mov	r0, sl
   2aea4:	f001 f8b4 	bl	2c010 <_Balloc>
   2aea8:	4653      	mov	r3, sl
   2aeaa:	6418      	str	r0, [r3, #64]	; 0x40
   2aeac:	2301      	movs	r3, #1
   2aeae:	425b      	negs	r3, r3
   2aeb0:	9307      	str	r3, [sp, #28]
   2aeb2:	930e      	str	r3, [sp, #56]	; 0x38
   2aeb4:	3302      	adds	r3, #2
   2aeb6:	2200      	movs	r2, #0
   2aeb8:	930b      	str	r3, [sp, #44]	; 0x2c
   2aeba:	2300      	movs	r3, #0
   2aebc:	900a      	str	r0, [sp, #40]	; 0x28
   2aebe:	9223      	str	r2, [sp, #140]	; 0x8c
   2aec0:	9322      	str	r3, [sp, #136]	; 0x88
   2aec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2aec4:	2b00      	cmp	r3, #0
   2aec6:	da00      	bge.n	2aeca <_dtoa_r+0x4ee>
   2aec8:	e0ab      	b.n	2b022 <_dtoa_r+0x646>
   2aeca:	9a03      	ldr	r2, [sp, #12]
   2aecc:	2a0e      	cmp	r2, #14
   2aece:	dd00      	ble.n	2aed2 <_dtoa_r+0x4f6>
   2aed0:	e0a7      	b.n	2b022 <_dtoa_r+0x646>
   2aed2:	4b7c      	ldr	r3, [pc, #496]	; (2b0c4 <_dtoa_r+0x6e8>)
   2aed4:	00d2      	lsls	r2, r2, #3
   2aed6:	189b      	adds	r3, r3, r2
   2aed8:	685c      	ldr	r4, [r3, #4]
   2aeda:	681b      	ldr	r3, [r3, #0]
   2aedc:	9304      	str	r3, [sp, #16]
   2aede:	9405      	str	r4, [sp, #20]
   2aee0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2aee2:	2b00      	cmp	r3, #0
   2aee4:	da00      	bge.n	2aee8 <_dtoa_r+0x50c>
   2aee6:	e2a7      	b.n	2b438 <_dtoa_r+0xa5c>
   2aee8:	9c04      	ldr	r4, [sp, #16]
   2aeea:	9d05      	ldr	r5, [sp, #20]
   2aeec:	0030      	movs	r0, r6
   2aeee:	0022      	movs	r2, r4
   2aef0:	002b      	movs	r3, r5
   2aef2:	0039      	movs	r1, r7
   2aef4:	f7fc f9b2 	bl	2725c <__aeabi_ddiv>
   2aef8:	f7fd fb9a 	bl	28630 <__aeabi_d2iz>
   2aefc:	4680      	mov	r8, r0
   2aefe:	f7fd fbcb 	bl	28698 <__aeabi_i2d>
   2af02:	0022      	movs	r2, r4
   2af04:	002b      	movs	r3, r5
   2af06:	f7fc fddd 	bl	27ac4 <__aeabi_dmul>
   2af0a:	0002      	movs	r2, r0
   2af0c:	000b      	movs	r3, r1
   2af0e:	0030      	movs	r0, r6
   2af10:	0039      	movs	r1, r7
   2af12:	f7fd f857 	bl	27fc4 <__aeabi_dsub>
   2af16:	4643      	mov	r3, r8
   2af18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2af1a:	3330      	adds	r3, #48	; 0x30
   2af1c:	7013      	strb	r3, [r2, #0]
   2af1e:	9b07      	ldr	r3, [sp, #28]
   2af20:	0006      	movs	r6, r0
   2af22:	000f      	movs	r7, r1
   2af24:	1c54      	adds	r4, r2, #1
   2af26:	2b01      	cmp	r3, #1
   2af28:	d04e      	beq.n	2afc8 <_dtoa_r+0x5ec>
   2af2a:	2200      	movs	r2, #0
   2af2c:	4b60      	ldr	r3, [pc, #384]	; (2b0b0 <_dtoa_r+0x6d4>)
   2af2e:	f7fc fdc9 	bl	27ac4 <__aeabi_dmul>
   2af32:	2200      	movs	r2, #0
   2af34:	2300      	movs	r3, #0
   2af36:	0006      	movs	r6, r0
   2af38:	000f      	movs	r7, r1
   2af3a:	f7fa fe85 	bl	25c48 <__aeabi_dcmpeq>
   2af3e:	2800      	cmp	r0, #0
   2af40:	d000      	beq.n	2af44 <_dtoa_r+0x568>
   2af42:	e77a      	b.n	2ae3a <_dtoa_r+0x45e>
   2af44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2af46:	9a07      	ldr	r2, [sp, #28]
   2af48:	1c9d      	adds	r5, r3, #2
   2af4a:	469c      	mov	ip, r3
   2af4c:	465b      	mov	r3, fp
   2af4e:	9306      	str	r3, [sp, #24]
   2af50:	4653      	mov	r3, sl
   2af52:	4462      	add	r2, ip
   2af54:	46aa      	mov	sl, r5
   2af56:	9c04      	ldr	r4, [sp, #16]
   2af58:	9d05      	ldr	r5, [sp, #20]
   2af5a:	4691      	mov	r9, r2
   2af5c:	9307      	str	r3, [sp, #28]
   2af5e:	e00f      	b.n	2af80 <_dtoa_r+0x5a4>
   2af60:	2200      	movs	r2, #0
   2af62:	4b53      	ldr	r3, [pc, #332]	; (2b0b0 <_dtoa_r+0x6d4>)
   2af64:	f7fc fdae 	bl	27ac4 <__aeabi_dmul>
   2af68:	2301      	movs	r3, #1
   2af6a:	469c      	mov	ip, r3
   2af6c:	2200      	movs	r2, #0
   2af6e:	2300      	movs	r3, #0
   2af70:	0006      	movs	r6, r0
   2af72:	000f      	movs	r7, r1
   2af74:	44e2      	add	sl, ip
   2af76:	f7fa fe67 	bl	25c48 <__aeabi_dcmpeq>
   2af7a:	2800      	cmp	r0, #0
   2af7c:	d000      	beq.n	2af80 <_dtoa_r+0x5a4>
   2af7e:	e2d9      	b.n	2b534 <_dtoa_r+0xb58>
   2af80:	0022      	movs	r2, r4
   2af82:	002b      	movs	r3, r5
   2af84:	0030      	movs	r0, r6
   2af86:	0039      	movs	r1, r7
   2af88:	f7fc f968 	bl	2725c <__aeabi_ddiv>
   2af8c:	f7fd fb50 	bl	28630 <__aeabi_d2iz>
   2af90:	4680      	mov	r8, r0
   2af92:	f7fd fb81 	bl	28698 <__aeabi_i2d>
   2af96:	0022      	movs	r2, r4
   2af98:	002b      	movs	r3, r5
   2af9a:	f7fc fd93 	bl	27ac4 <__aeabi_dmul>
   2af9e:	0002      	movs	r2, r0
   2afa0:	000b      	movs	r3, r1
   2afa2:	0030      	movs	r0, r6
   2afa4:	0039      	movs	r1, r7
   2afa6:	f7fd f80d 	bl	27fc4 <__aeabi_dsub>
   2afaa:	4653      	mov	r3, sl
   2afac:	4642      	mov	r2, r8
   2afae:	3b01      	subs	r3, #1
   2afb0:	3230      	adds	r2, #48	; 0x30
   2afb2:	0006      	movs	r6, r0
   2afb4:	000f      	movs	r7, r1
   2afb6:	46d3      	mov	fp, sl
   2afb8:	701a      	strb	r2, [r3, #0]
   2afba:	45d1      	cmp	r9, sl
   2afbc:	d1d0      	bne.n	2af60 <_dtoa_r+0x584>
   2afbe:	9b06      	ldr	r3, [sp, #24]
   2afc0:	4654      	mov	r4, sl
   2afc2:	469b      	mov	fp, r3
   2afc4:	9b07      	ldr	r3, [sp, #28]
   2afc6:	469a      	mov	sl, r3
   2afc8:	0032      	movs	r2, r6
   2afca:	003b      	movs	r3, r7
   2afcc:	0030      	movs	r0, r6
   2afce:	0039      	movs	r1, r7
   2afd0:	f7fb fe34 	bl	26c3c <__aeabi_dadd>
   2afd4:	0006      	movs	r6, r0
   2afd6:	000f      	movs	r7, r1
   2afd8:	0002      	movs	r2, r0
   2afda:	000b      	movs	r3, r1
   2afdc:	9804      	ldr	r0, [sp, #16]
   2afde:	9905      	ldr	r1, [sp, #20]
   2afe0:	f7fa fe38 	bl	25c54 <__aeabi_dcmplt>
   2afe4:	2800      	cmp	r0, #0
   2afe6:	d10c      	bne.n	2b002 <_dtoa_r+0x626>
   2afe8:	9804      	ldr	r0, [sp, #16]
   2afea:	9905      	ldr	r1, [sp, #20]
   2afec:	0032      	movs	r2, r6
   2afee:	003b      	movs	r3, r7
   2aff0:	f7fa fe2a 	bl	25c48 <__aeabi_dcmpeq>
   2aff4:	2800      	cmp	r0, #0
   2aff6:	d100      	bne.n	2affa <_dtoa_r+0x61e>
   2aff8:	e71f      	b.n	2ae3a <_dtoa_r+0x45e>
   2affa:	4643      	mov	r3, r8
   2affc:	07db      	lsls	r3, r3, #31
   2affe:	d400      	bmi.n	2b002 <_dtoa_r+0x626>
   2b000:	e71b      	b.n	2ae3a <_dtoa_r+0x45e>
   2b002:	1e65      	subs	r5, r4, #1
   2b004:	782f      	ldrb	r7, [r5, #0]
   2b006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b008:	e006      	b.n	2b018 <_dtoa_r+0x63c>
   2b00a:	429d      	cmp	r5, r3
   2b00c:	d100      	bne.n	2b010 <_dtoa_r+0x634>
   2b00e:	e351      	b.n	2b6b4 <_dtoa_r+0xcd8>
   2b010:	3c02      	subs	r4, #2
   2b012:	7827      	ldrb	r7, [r4, #0]
   2b014:	002c      	movs	r4, r5
   2b016:	3d01      	subs	r5, #1
   2b018:	2f39      	cmp	r7, #57	; 0x39
   2b01a:	d0f6      	beq.n	2b00a <_dtoa_r+0x62e>
   2b01c:	3701      	adds	r7, #1
   2b01e:	702f      	strb	r7, [r5, #0]
   2b020:	e70b      	b.n	2ae3a <_dtoa_r+0x45e>
   2b022:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2b024:	2a00      	cmp	r2, #0
   2b026:	d04f      	beq.n	2b0c8 <_dtoa_r+0x6ec>
   2b028:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2b02a:	2a01      	cmp	r2, #1
   2b02c:	dc00      	bgt.n	2b030 <_dtoa_r+0x654>
   2b02e:	e22c      	b.n	2b48a <_dtoa_r+0xaae>
   2b030:	9b07      	ldr	r3, [sp, #28]
   2b032:	1e5c      	subs	r4, r3, #1
   2b034:	464b      	mov	r3, r9
   2b036:	45a1      	cmp	r9, r4
   2b038:	da00      	bge.n	2b03c <_dtoa_r+0x660>
   2b03a:	e2b8      	b.n	2b5ae <_dtoa_r+0xbd2>
   2b03c:	1b1c      	subs	r4, r3, r4
   2b03e:	9b07      	ldr	r3, [sp, #28]
   2b040:	2b00      	cmp	r3, #0
   2b042:	da00      	bge.n	2b046 <_dtoa_r+0x66a>
   2b044:	e3d4      	b.n	2b7f0 <_dtoa_r+0xe14>
   2b046:	9b06      	ldr	r3, [sp, #24]
   2b048:	9308      	str	r3, [sp, #32]
   2b04a:	9b07      	ldr	r3, [sp, #28]
   2b04c:	9a06      	ldr	r2, [sp, #24]
   2b04e:	2101      	movs	r1, #1
   2b050:	4694      	mov	ip, r2
   2b052:	449c      	add	ip, r3
   2b054:	4662      	mov	r2, ip
   2b056:	9206      	str	r2, [sp, #24]
   2b058:	9a04      	ldr	r2, [sp, #16]
   2b05a:	4650      	mov	r0, sl
   2b05c:	4694      	mov	ip, r2
   2b05e:	449c      	add	ip, r3
   2b060:	4663      	mov	r3, ip
   2b062:	9304      	str	r3, [sp, #16]
   2b064:	f001 f894 	bl	2c190 <__i2b>
   2b068:	4680      	mov	r8, r0
   2b06a:	e032      	b.n	2b0d2 <_dtoa_r+0x6f6>
   2b06c:	9a06      	ldr	r2, [sp, #24]
   2b06e:	9b03      	ldr	r3, [sp, #12]
   2b070:	1ad2      	subs	r2, r2, r3
   2b072:	425b      	negs	r3, r3
   2b074:	4699      	mov	r9, r3
   2b076:	2300      	movs	r3, #0
   2b078:	9206      	str	r2, [sp, #24]
   2b07a:	930d      	str	r3, [sp, #52]	; 0x34
   2b07c:	e579      	b.n	2ab72 <_dtoa_r+0x196>
   2b07e:	9803      	ldr	r0, [sp, #12]
   2b080:	f7fd fb0a 	bl	28698 <__aeabi_i2d>
   2b084:	000b      	movs	r3, r1
   2b086:	0002      	movs	r2, r0
   2b088:	0029      	movs	r1, r5
   2b08a:	0020      	movs	r0, r4
   2b08c:	f7fa fddc 	bl	25c48 <__aeabi_dcmpeq>
   2b090:	0002      	movs	r2, r0
   2b092:	4250      	negs	r0, r2
   2b094:	4150      	adcs	r0, r2
   2b096:	9b03      	ldr	r3, [sp, #12]
   2b098:	1a1b      	subs	r3, r3, r0
   2b09a:	9303      	str	r3, [sp, #12]
   2b09c:	e53d      	b.n	2ab1a <_dtoa_r+0x13e>
   2b09e:	2301      	movs	r3, #1
   2b0a0:	1a9b      	subs	r3, r3, r2
   2b0a2:	9306      	str	r3, [sp, #24]
   2b0a4:	2300      	movs	r3, #0
   2b0a6:	9304      	str	r3, [sp, #16]
   2b0a8:	e557      	b.n	2ab5a <_dtoa_r+0x17e>
   2b0aa:	46c0      	nop			; (mov r8, r8)
   2b0ac:	3ff00000 	.word	0x3ff00000
   2b0b0:	40240000 	.word	0x40240000
   2b0b4:	00000432 	.word	0x00000432
   2b0b8:	00000412 	.word	0x00000412
   2b0bc:	fe100000 	.word	0xfe100000
   2b0c0:	0002fd00 	.word	0x0002fd00
   2b0c4:	0002fd60 	.word	0x0002fd60
   2b0c8:	9b06      	ldr	r3, [sp, #24]
   2b0ca:	464c      	mov	r4, r9
   2b0cc:	9308      	str	r3, [sp, #32]
   2b0ce:	2300      	movs	r3, #0
   2b0d0:	4698      	mov	r8, r3
   2b0d2:	9908      	ldr	r1, [sp, #32]
   2b0d4:	1e0b      	subs	r3, r1, #0
   2b0d6:	dd0e      	ble.n	2b0f6 <_dtoa_r+0x71a>
   2b0d8:	9a04      	ldr	r2, [sp, #16]
   2b0da:	2a00      	cmp	r2, #0
   2b0dc:	dd0b      	ble.n	2b0f6 <_dtoa_r+0x71a>
   2b0de:	4293      	cmp	r3, r2
   2b0e0:	dd00      	ble.n	2b0e4 <_dtoa_r+0x708>
   2b0e2:	e187      	b.n	2b3f4 <_dtoa_r+0xa18>
   2b0e4:	9a06      	ldr	r2, [sp, #24]
   2b0e6:	1ad2      	subs	r2, r2, r3
   2b0e8:	9206      	str	r2, [sp, #24]
   2b0ea:	9a08      	ldr	r2, [sp, #32]
   2b0ec:	1ad2      	subs	r2, r2, r3
   2b0ee:	9208      	str	r2, [sp, #32]
   2b0f0:	9a04      	ldr	r2, [sp, #16]
   2b0f2:	1ad3      	subs	r3, r2, r3
   2b0f4:	9304      	str	r3, [sp, #16]
   2b0f6:	464b      	mov	r3, r9
   2b0f8:	2b00      	cmp	r3, #0
   2b0fa:	d01a      	beq.n	2b132 <_dtoa_r+0x756>
   2b0fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b0fe:	2b00      	cmp	r3, #0
   2b100:	d100      	bne.n	2b104 <_dtoa_r+0x728>
   2b102:	e1bb      	b.n	2b47c <_dtoa_r+0xaa0>
   2b104:	2c00      	cmp	r4, #0
   2b106:	dd10      	ble.n	2b12a <_dtoa_r+0x74e>
   2b108:	4641      	mov	r1, r8
   2b10a:	0022      	movs	r2, r4
   2b10c:	4650      	mov	r0, sl
   2b10e:	f001 f8f3 	bl	2c2f8 <__pow5mult>
   2b112:	465a      	mov	r2, fp
   2b114:	0001      	movs	r1, r0
   2b116:	4680      	mov	r8, r0
   2b118:	4650      	mov	r0, sl
   2b11a:	f001 f843 	bl	2c1a4 <__multiply>
   2b11e:	0005      	movs	r5, r0
   2b120:	4659      	mov	r1, fp
   2b122:	4650      	mov	r0, sl
   2b124:	f000 ff9c 	bl	2c060 <_Bfree>
   2b128:	46ab      	mov	fp, r5
   2b12a:	464b      	mov	r3, r9
   2b12c:	1b1a      	subs	r2, r3, r4
   2b12e:	d000      	beq.n	2b132 <_dtoa_r+0x756>
   2b130:	e1a5      	b.n	2b47e <_dtoa_r+0xaa2>
   2b132:	2101      	movs	r1, #1
   2b134:	4650      	mov	r0, sl
   2b136:	f001 f82b 	bl	2c190 <__i2b>
   2b13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b13c:	4681      	mov	r9, r0
   2b13e:	2b00      	cmp	r3, #0
   2b140:	dd1d      	ble.n	2b17e <_dtoa_r+0x7a2>
   2b142:	001a      	movs	r2, r3
   2b144:	0001      	movs	r1, r0
   2b146:	4650      	mov	r0, sl
   2b148:	f001 f8d6 	bl	2c2f8 <__pow5mult>
   2b14c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2b14e:	4681      	mov	r9, r0
   2b150:	2b01      	cmp	r3, #1
   2b152:	dc00      	bgt.n	2b156 <_dtoa_r+0x77a>
   2b154:	e150      	b.n	2b3f8 <_dtoa_r+0xa1c>
   2b156:	2400      	movs	r4, #0
   2b158:	464b      	mov	r3, r9
   2b15a:	691b      	ldr	r3, [r3, #16]
   2b15c:	3303      	adds	r3, #3
   2b15e:	009b      	lsls	r3, r3, #2
   2b160:	444b      	add	r3, r9
   2b162:	6858      	ldr	r0, [r3, #4]
   2b164:	f000 ffcc 	bl	2c100 <__hi0bits>
   2b168:	2320      	movs	r3, #32
   2b16a:	1a1b      	subs	r3, r3, r0
   2b16c:	e010      	b.n	2b190 <_dtoa_r+0x7b4>
   2b16e:	2220      	movs	r2, #32
   2b170:	0030      	movs	r0, r6
   2b172:	1ad3      	subs	r3, r2, r3
   2b174:	4098      	lsls	r0, r3
   2b176:	e685      	b.n	2ae84 <_dtoa_r+0x4a8>
   2b178:	2300      	movs	r3, #0
   2b17a:	930c      	str	r3, [sp, #48]	; 0x30
   2b17c:	e4e3      	b.n	2ab46 <_dtoa_r+0x16a>
   2b17e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2b180:	2400      	movs	r4, #0
   2b182:	2b01      	cmp	r3, #1
   2b184:	dc00      	bgt.n	2b188 <_dtoa_r+0x7ac>
   2b186:	e18b      	b.n	2b4a0 <_dtoa_r+0xac4>
   2b188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b18a:	2301      	movs	r3, #1
   2b18c:	2a00      	cmp	r2, #0
   2b18e:	d1e3      	bne.n	2b158 <_dtoa_r+0x77c>
   2b190:	9904      	ldr	r1, [sp, #16]
   2b192:	201f      	movs	r0, #31
   2b194:	468c      	mov	ip, r1
   2b196:	4463      	add	r3, ip
   2b198:	4018      	ands	r0, r3
   2b19a:	d100      	bne.n	2b19e <_dtoa_r+0x7c2>
   2b19c:	e0ae      	b.n	2b2fc <_dtoa_r+0x920>
   2b19e:	2320      	movs	r3, #32
   2b1a0:	1a1b      	subs	r3, r3, r0
   2b1a2:	2b04      	cmp	r3, #4
   2b1a4:	dc00      	bgt.n	2b1a8 <_dtoa_r+0x7cc>
   2b1a6:	e3cc      	b.n	2b942 <_dtoa_r+0xf66>
   2b1a8:	231c      	movs	r3, #28
   2b1aa:	1a18      	subs	r0, r3, r0
   2b1ac:	9b06      	ldr	r3, [sp, #24]
   2b1ae:	469c      	mov	ip, r3
   2b1b0:	4484      	add	ip, r0
   2b1b2:	4663      	mov	r3, ip
   2b1b4:	9306      	str	r3, [sp, #24]
   2b1b6:	9b08      	ldr	r3, [sp, #32]
   2b1b8:	469c      	mov	ip, r3
   2b1ba:	4484      	add	ip, r0
   2b1bc:	4663      	mov	r3, ip
   2b1be:	468c      	mov	ip, r1
   2b1c0:	4484      	add	ip, r0
   2b1c2:	9308      	str	r3, [sp, #32]
   2b1c4:	4663      	mov	r3, ip
   2b1c6:	9304      	str	r3, [sp, #16]
   2b1c8:	9b06      	ldr	r3, [sp, #24]
   2b1ca:	2b00      	cmp	r3, #0
   2b1cc:	dd05      	ble.n	2b1da <_dtoa_r+0x7fe>
   2b1ce:	4659      	mov	r1, fp
   2b1d0:	001a      	movs	r2, r3
   2b1d2:	4650      	mov	r0, sl
   2b1d4:	f001 f8f0 	bl	2c3b8 <__lshift>
   2b1d8:	4683      	mov	fp, r0
   2b1da:	9b04      	ldr	r3, [sp, #16]
   2b1dc:	2b00      	cmp	r3, #0
   2b1de:	dd05      	ble.n	2b1ec <_dtoa_r+0x810>
   2b1e0:	4649      	mov	r1, r9
   2b1e2:	001a      	movs	r2, r3
   2b1e4:	4650      	mov	r0, sl
   2b1e6:	f001 f8e7 	bl	2c3b8 <__lshift>
   2b1ea:	4681      	mov	r9, r0
   2b1ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b1ee:	2b00      	cmp	r3, #0
   2b1f0:	d000      	beq.n	2b1f4 <_dtoa_r+0x818>
   2b1f2:	e094      	b.n	2b31e <_dtoa_r+0x942>
   2b1f4:	9b07      	ldr	r3, [sp, #28]
   2b1f6:	2b00      	cmp	r3, #0
   2b1f8:	dc00      	bgt.n	2b1fc <_dtoa_r+0x820>
   2b1fa:	e175      	b.n	2b4e8 <_dtoa_r+0xb0c>
   2b1fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b1fe:	2b00      	cmp	r3, #0
   2b200:	d100      	bne.n	2b204 <_dtoa_r+0x828>
   2b202:	e0a6      	b.n	2b352 <_dtoa_r+0x976>
   2b204:	9b08      	ldr	r3, [sp, #32]
   2b206:	2b00      	cmp	r3, #0
   2b208:	dd05      	ble.n	2b216 <_dtoa_r+0x83a>
   2b20a:	4641      	mov	r1, r8
   2b20c:	001a      	movs	r2, r3
   2b20e:	4650      	mov	r0, sl
   2b210:	f001 f8d2 	bl	2c3b8 <__lshift>
   2b214:	4680      	mov	r8, r0
   2b216:	4643      	mov	r3, r8
   2b218:	930c      	str	r3, [sp, #48]	; 0x30
   2b21a:	2c00      	cmp	r4, #0
   2b21c:	d000      	beq.n	2b220 <_dtoa_r+0x844>
   2b21e:	e250      	b.n	2b6c2 <_dtoa_r+0xce6>
   2b220:	9c07      	ldr	r4, [sp, #28]
   2b222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b224:	3c01      	subs	r4, #1
   2b226:	0023      	movs	r3, r4
   2b228:	4694      	mov	ip, r2
   2b22a:	4463      	add	r3, ip
   2b22c:	9308      	str	r3, [sp, #32]
   2b22e:	2301      	movs	r3, #1
   2b230:	4033      	ands	r3, r6
   2b232:	9307      	str	r3, [sp, #28]
   2b234:	464b      	mov	r3, r9
   2b236:	9306      	str	r3, [sp, #24]
   2b238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b23a:	4657      	mov	r7, sl
   2b23c:	4645      	mov	r5, r8
   2b23e:	465e      	mov	r6, fp
   2b240:	4692      	mov	sl, r2
   2b242:	4698      	mov	r8, r3
   2b244:	9b06      	ldr	r3, [sp, #24]
   2b246:	0030      	movs	r0, r6
   2b248:	0019      	movs	r1, r3
   2b24a:	4699      	mov	r9, r3
   2b24c:	f7ff fb1c 	bl	2a888 <quorem>
   2b250:	0003      	movs	r3, r0
   2b252:	900b      	str	r0, [sp, #44]	; 0x2c
   2b254:	3330      	adds	r3, #48	; 0x30
   2b256:	0029      	movs	r1, r5
   2b258:	0030      	movs	r0, r6
   2b25a:	9304      	str	r3, [sp, #16]
   2b25c:	f001 f90c 	bl	2c478 <__mcmp>
   2b260:	4649      	mov	r1, r9
   2b262:	0004      	movs	r4, r0
   2b264:	4642      	mov	r2, r8
   2b266:	0038      	movs	r0, r7
   2b268:	f001 f920 	bl	2c4ac <__mdiff>
   2b26c:	68c3      	ldr	r3, [r0, #12]
   2b26e:	4681      	mov	r9, r0
   2b270:	2b00      	cmp	r3, #0
   2b272:	d000      	beq.n	2b276 <_dtoa_r+0x89a>
   2b274:	e11e      	b.n	2b4b4 <_dtoa_r+0xad8>
   2b276:	0001      	movs	r1, r0
   2b278:	0030      	movs	r0, r6
   2b27a:	f001 f8fd 	bl	2c478 <__mcmp>
   2b27e:	4683      	mov	fp, r0
   2b280:	4649      	mov	r1, r9
   2b282:	0038      	movs	r0, r7
   2b284:	f000 feec 	bl	2c060 <_Bfree>
   2b288:	465b      	mov	r3, fp
   2b28a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2b28c:	4313      	orrs	r3, r2
   2b28e:	d103      	bne.n	2b298 <_dtoa_r+0x8bc>
   2b290:	9b07      	ldr	r3, [sp, #28]
   2b292:	2b00      	cmp	r3, #0
   2b294:	d100      	bne.n	2b298 <_dtoa_r+0x8bc>
   2b296:	e306      	b.n	2b8a6 <_dtoa_r+0xeca>
   2b298:	2c00      	cmp	r4, #0
   2b29a:	da00      	bge.n	2b29e <_dtoa_r+0x8c2>
   2b29c:	e1a8      	b.n	2b5f0 <_dtoa_r+0xc14>
   2b29e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2b2a0:	431c      	orrs	r4, r3
   2b2a2:	d103      	bne.n	2b2ac <_dtoa_r+0x8d0>
   2b2a4:	9b07      	ldr	r3, [sp, #28]
   2b2a6:	2b00      	cmp	r3, #0
   2b2a8:	d100      	bne.n	2b2ac <_dtoa_r+0x8d0>
   2b2aa:	e1a1      	b.n	2b5f0 <_dtoa_r+0xc14>
   2b2ac:	465b      	mov	r3, fp
   2b2ae:	2b00      	cmp	r3, #0
   2b2b0:	dd00      	ble.n	2b2b4 <_dtoa_r+0x8d8>
   2b2b2:	e282      	b.n	2b7ba <_dtoa_r+0xdde>
   2b2b4:	4669      	mov	r1, sp
   2b2b6:	4652      	mov	r2, sl
   2b2b8:	4653      	mov	r3, sl
   2b2ba:	7c09      	ldrb	r1, [r1, #16]
   2b2bc:	1c5c      	adds	r4, r3, #1
   2b2be:	7011      	strb	r1, [r2, #0]
   2b2c0:	9a08      	ldr	r2, [sp, #32]
   2b2c2:	4552      	cmp	r2, sl
   2b2c4:	d100      	bne.n	2b2c8 <_dtoa_r+0x8ec>
   2b2c6:	e28a      	b.n	2b7de <_dtoa_r+0xe02>
   2b2c8:	0031      	movs	r1, r6
   2b2ca:	2300      	movs	r3, #0
   2b2cc:	220a      	movs	r2, #10
   2b2ce:	0038      	movs	r0, r7
   2b2d0:	f000 fed0 	bl	2c074 <__multadd>
   2b2d4:	2300      	movs	r3, #0
   2b2d6:	0006      	movs	r6, r0
   2b2d8:	220a      	movs	r2, #10
   2b2da:	0029      	movs	r1, r5
   2b2dc:	0038      	movs	r0, r7
   2b2de:	4545      	cmp	r5, r8
   2b2e0:	d100      	bne.n	2b2e4 <_dtoa_r+0x908>
   2b2e2:	e0e1      	b.n	2b4a8 <_dtoa_r+0xacc>
   2b2e4:	f000 fec6 	bl	2c074 <__multadd>
   2b2e8:	4641      	mov	r1, r8
   2b2ea:	0005      	movs	r5, r0
   2b2ec:	2300      	movs	r3, #0
   2b2ee:	220a      	movs	r2, #10
   2b2f0:	0038      	movs	r0, r7
   2b2f2:	f000 febf 	bl	2c074 <__multadd>
   2b2f6:	46a2      	mov	sl, r4
   2b2f8:	4680      	mov	r8, r0
   2b2fa:	e7a3      	b.n	2b244 <_dtoa_r+0x868>
   2b2fc:	201c      	movs	r0, #28
   2b2fe:	9b06      	ldr	r3, [sp, #24]
   2b300:	469c      	mov	ip, r3
   2b302:	4484      	add	ip, r0
   2b304:	4663      	mov	r3, ip
   2b306:	9306      	str	r3, [sp, #24]
   2b308:	9b08      	ldr	r3, [sp, #32]
   2b30a:	469c      	mov	ip, r3
   2b30c:	4484      	add	ip, r0
   2b30e:	4663      	mov	r3, ip
   2b310:	9308      	str	r3, [sp, #32]
   2b312:	9b04      	ldr	r3, [sp, #16]
   2b314:	469c      	mov	ip, r3
   2b316:	4484      	add	ip, r0
   2b318:	4663      	mov	r3, ip
   2b31a:	9304      	str	r3, [sp, #16]
   2b31c:	e754      	b.n	2b1c8 <_dtoa_r+0x7ec>
   2b31e:	4649      	mov	r1, r9
   2b320:	4658      	mov	r0, fp
   2b322:	f001 f8a9 	bl	2c478 <__mcmp>
   2b326:	2800      	cmp	r0, #0
   2b328:	db00      	blt.n	2b32c <_dtoa_r+0x950>
   2b32a:	e763      	b.n	2b1f4 <_dtoa_r+0x818>
   2b32c:	9b03      	ldr	r3, [sp, #12]
   2b32e:	4659      	mov	r1, fp
   2b330:	3b01      	subs	r3, #1
   2b332:	9303      	str	r3, [sp, #12]
   2b334:	220a      	movs	r2, #10
   2b336:	2300      	movs	r3, #0
   2b338:	4650      	mov	r0, sl
   2b33a:	f000 fe9b 	bl	2c074 <__multadd>
   2b33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b340:	4683      	mov	fp, r0
   2b342:	2b00      	cmp	r3, #0
   2b344:	d000      	beq.n	2b348 <_dtoa_r+0x96c>
   2b346:	e2ca      	b.n	2b8de <_dtoa_r+0xf02>
   2b348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b34a:	2b00      	cmp	r3, #0
   2b34c:	dc00      	bgt.n	2b350 <_dtoa_r+0x974>
   2b34e:	e2d8      	b.n	2b902 <_dtoa_r+0xf26>
   2b350:	9307      	str	r3, [sp, #28]
   2b352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b354:	465d      	mov	r5, fp
   2b356:	2400      	movs	r4, #0
   2b358:	9f07      	ldr	r7, [sp, #28]
   2b35a:	469b      	mov	fp, r3
   2b35c:	e006      	b.n	2b36c <_dtoa_r+0x990>
   2b35e:	0029      	movs	r1, r5
   2b360:	2300      	movs	r3, #0
   2b362:	220a      	movs	r2, #10
   2b364:	4650      	mov	r0, sl
   2b366:	f000 fe85 	bl	2c074 <__multadd>
   2b36a:	0005      	movs	r5, r0
   2b36c:	4649      	mov	r1, r9
   2b36e:	0028      	movs	r0, r5
   2b370:	f7ff fa8a 	bl	2a888 <quorem>
   2b374:	465b      	mov	r3, fp
   2b376:	3030      	adds	r0, #48	; 0x30
   2b378:	5518      	strb	r0, [r3, r4]
   2b37a:	3401      	adds	r4, #1
   2b37c:	42bc      	cmp	r4, r7
   2b37e:	dbee      	blt.n	2b35e <_dtoa_r+0x982>
   2b380:	46ab      	mov	fp, r5
   2b382:	0006      	movs	r6, r0
   2b384:	9c07      	ldr	r4, [sp, #28]
   2b386:	2c00      	cmp	r4, #0
   2b388:	dc00      	bgt.n	2b38c <_dtoa_r+0x9b0>
   2b38a:	e237      	b.n	2b7fc <_dtoa_r+0xe20>
   2b38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b38e:	2700      	movs	r7, #0
   2b390:	469c      	mov	ip, r3
   2b392:	4464      	add	r4, ip
   2b394:	4659      	mov	r1, fp
   2b396:	2201      	movs	r2, #1
   2b398:	4650      	mov	r0, sl
   2b39a:	f001 f80d 	bl	2c3b8 <__lshift>
   2b39e:	4649      	mov	r1, r9
   2b3a0:	4683      	mov	fp, r0
   2b3a2:	f001 f869 	bl	2c478 <__mcmp>
   2b3a6:	2800      	cmp	r0, #0
   2b3a8:	dc00      	bgt.n	2b3ac <_dtoa_r+0x9d0>
   2b3aa:	e144      	b.n	2b636 <_dtoa_r+0xc5a>
   2b3ac:	1e65      	subs	r5, r4, #1
   2b3ae:	782b      	ldrb	r3, [r5, #0]
   2b3b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b3b2:	e006      	b.n	2b3c2 <_dtoa_r+0x9e6>
   2b3b4:	4295      	cmp	r5, r2
   2b3b6:	d100      	bne.n	2b3ba <_dtoa_r+0x9de>
   2b3b8:	e0b1      	b.n	2b51e <_dtoa_r+0xb42>
   2b3ba:	3c02      	subs	r4, #2
   2b3bc:	7823      	ldrb	r3, [r4, #0]
   2b3be:	002c      	movs	r4, r5
   2b3c0:	3d01      	subs	r5, #1
   2b3c2:	2b39      	cmp	r3, #57	; 0x39
   2b3c4:	d0f6      	beq.n	2b3b4 <_dtoa_r+0x9d8>
   2b3c6:	3301      	adds	r3, #1
   2b3c8:	702b      	strb	r3, [r5, #0]
   2b3ca:	4649      	mov	r1, r9
   2b3cc:	4650      	mov	r0, sl
   2b3ce:	f000 fe47 	bl	2c060 <_Bfree>
   2b3d2:	4643      	mov	r3, r8
   2b3d4:	2b00      	cmp	r3, #0
   2b3d6:	d100      	bne.n	2b3da <_dtoa_r+0x9fe>
   2b3d8:	e52f      	b.n	2ae3a <_dtoa_r+0x45e>
   2b3da:	2f00      	cmp	r7, #0
   2b3dc:	d005      	beq.n	2b3ea <_dtoa_r+0xa0e>
   2b3de:	4547      	cmp	r7, r8
   2b3e0:	d003      	beq.n	2b3ea <_dtoa_r+0xa0e>
   2b3e2:	0039      	movs	r1, r7
   2b3e4:	4650      	mov	r0, sl
   2b3e6:	f000 fe3b 	bl	2c060 <_Bfree>
   2b3ea:	4641      	mov	r1, r8
   2b3ec:	4650      	mov	r0, sl
   2b3ee:	f000 fe37 	bl	2c060 <_Bfree>
   2b3f2:	e522      	b.n	2ae3a <_dtoa_r+0x45e>
   2b3f4:	0013      	movs	r3, r2
   2b3f6:	e675      	b.n	2b0e4 <_dtoa_r+0x708>
   2b3f8:	2e00      	cmp	r6, #0
   2b3fa:	d000      	beq.n	2b3fe <_dtoa_r+0xa22>
   2b3fc:	e6ab      	b.n	2b156 <_dtoa_r+0x77a>
   2b3fe:	033b      	lsls	r3, r7, #12
   2b400:	2400      	movs	r4, #0
   2b402:	2b00      	cmp	r3, #0
   2b404:	d000      	beq.n	2b408 <_dtoa_r+0xa2c>
   2b406:	e6bf      	b.n	2b188 <_dtoa_r+0x7ac>
   2b408:	4bba      	ldr	r3, [pc, #744]	; (2b6f4 <_dtoa_r+0xd18>)
   2b40a:	423b      	tst	r3, r7
   2b40c:	d100      	bne.n	2b410 <_dtoa_r+0xa34>
   2b40e:	e6bb      	b.n	2b188 <_dtoa_r+0x7ac>
   2b410:	9b06      	ldr	r3, [sp, #24]
   2b412:	3401      	adds	r4, #1
   2b414:	3301      	adds	r3, #1
   2b416:	9306      	str	r3, [sp, #24]
   2b418:	9b04      	ldr	r3, [sp, #16]
   2b41a:	3301      	adds	r3, #1
   2b41c:	9304      	str	r3, [sp, #16]
   2b41e:	e6b3      	b.n	2b188 <_dtoa_r+0x7ac>
   2b420:	2301      	movs	r3, #1
   2b422:	930b      	str	r3, [sp, #44]	; 0x2c
   2b424:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2b426:	2b00      	cmp	r3, #0
   2b428:	dc00      	bgt.n	2b42c <_dtoa_r+0xa50>
   2b42a:	e0d1      	b.n	2b5d0 <_dtoa_r+0xbf4>
   2b42c:	001d      	movs	r5, r3
   2b42e:	4698      	mov	r8, r3
   2b430:	930e      	str	r3, [sp, #56]	; 0x38
   2b432:	9307      	str	r3, [sp, #28]
   2b434:	f7ff fbc8 	bl	2abc8 <_dtoa_r+0x1ec>
   2b438:	9b07      	ldr	r3, [sp, #28]
   2b43a:	2b00      	cmp	r3, #0
   2b43c:	dd00      	ble.n	2b440 <_dtoa_r+0xa64>
   2b43e:	e553      	b.n	2aee8 <_dtoa_r+0x50c>
   2b440:	d000      	beq.n	2b444 <_dtoa_r+0xa68>
   2b442:	e0ad      	b.n	2b5a0 <_dtoa_r+0xbc4>
   2b444:	9804      	ldr	r0, [sp, #16]
   2b446:	9905      	ldr	r1, [sp, #20]
   2b448:	2200      	movs	r2, #0
   2b44a:	4bab      	ldr	r3, [pc, #684]	; (2b6f8 <_dtoa_r+0xd1c>)
   2b44c:	f7fc fb3a 	bl	27ac4 <__aeabi_dmul>
   2b450:	003b      	movs	r3, r7
   2b452:	0032      	movs	r2, r6
   2b454:	f7fa fc1c 	bl	25c90 <__aeabi_dcmpge>
   2b458:	2300      	movs	r3, #0
   2b45a:	4699      	mov	r9, r3
   2b45c:	4698      	mov	r8, r3
   2b45e:	2800      	cmp	r0, #0
   2b460:	d055      	beq.n	2b50e <_dtoa_r+0xb32>
   2b462:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2b464:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2b466:	43db      	mvns	r3, r3
   2b468:	9303      	str	r3, [sp, #12]
   2b46a:	4649      	mov	r1, r9
   2b46c:	4650      	mov	r0, sl
   2b46e:	f000 fdf7 	bl	2c060 <_Bfree>
   2b472:	4643      	mov	r3, r8
   2b474:	2b00      	cmp	r3, #0
   2b476:	d100      	bne.n	2b47a <_dtoa_r+0xa9e>
   2b478:	e4df      	b.n	2ae3a <_dtoa_r+0x45e>
   2b47a:	e7b6      	b.n	2b3ea <_dtoa_r+0xa0e>
   2b47c:	464a      	mov	r2, r9
   2b47e:	4659      	mov	r1, fp
   2b480:	4650      	mov	r0, sl
   2b482:	f000 ff39 	bl	2c2f8 <__pow5mult>
   2b486:	4683      	mov	fp, r0
   2b488:	e653      	b.n	2b132 <_dtoa_r+0x756>
   2b48a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b48c:	2a00      	cmp	r2, #0
   2b48e:	d100      	bne.n	2b492 <_dtoa_r+0xab6>
   2b490:	e1b6      	b.n	2b800 <_dtoa_r+0xe24>
   2b492:	4a9a      	ldr	r2, [pc, #616]	; (2b6fc <_dtoa_r+0xd20>)
   2b494:	464c      	mov	r4, r9
   2b496:	4694      	mov	ip, r2
   2b498:	9a06      	ldr	r2, [sp, #24]
   2b49a:	4463      	add	r3, ip
   2b49c:	9208      	str	r2, [sp, #32]
   2b49e:	e5d5      	b.n	2b04c <_dtoa_r+0x670>
   2b4a0:	2e00      	cmp	r6, #0
   2b4a2:	d000      	beq.n	2b4a6 <_dtoa_r+0xaca>
   2b4a4:	e670      	b.n	2b188 <_dtoa_r+0x7ac>
   2b4a6:	e7aa      	b.n	2b3fe <_dtoa_r+0xa22>
   2b4a8:	f000 fde4 	bl	2c074 <__multadd>
   2b4ac:	46a2      	mov	sl, r4
   2b4ae:	0005      	movs	r5, r0
   2b4b0:	4680      	mov	r8, r0
   2b4b2:	e6c7      	b.n	2b244 <_dtoa_r+0x868>
   2b4b4:	2301      	movs	r3, #1
   2b4b6:	469b      	mov	fp, r3
   2b4b8:	e6e2      	b.n	2b280 <_dtoa_r+0x8a4>
   2b4ba:	2300      	movs	r3, #0
   2b4bc:	930b      	str	r3, [sp, #44]	; 0x2c
   2b4be:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2b4c0:	2b02      	cmp	r3, #2
   2b4c2:	d0af      	beq.n	2b424 <_dtoa_r+0xa48>
   2b4c4:	2400      	movs	r4, #0
   2b4c6:	4653      	mov	r3, sl
   2b4c8:	0021      	movs	r1, r4
   2b4ca:	645c      	str	r4, [r3, #68]	; 0x44
   2b4cc:	4650      	mov	r0, sl
   2b4ce:	f000 fd9f 	bl	2c010 <_Balloc>
   2b4d2:	4653      	mov	r3, sl
   2b4d4:	6418      	str	r0, [r3, #64]	; 0x40
   2b4d6:	2301      	movs	r3, #1
   2b4d8:	425b      	negs	r3, r3
   2b4da:	9307      	str	r3, [sp, #28]
   2b4dc:	930e      	str	r3, [sp, #56]	; 0x38
   2b4de:	3302      	adds	r3, #2
   2b4e0:	900a      	str	r0, [sp, #40]	; 0x28
   2b4e2:	9423      	str	r4, [sp, #140]	; 0x8c
   2b4e4:	930b      	str	r3, [sp, #44]	; 0x2c
   2b4e6:	e4ec      	b.n	2aec2 <_dtoa_r+0x4e6>
   2b4e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2b4ea:	2b02      	cmp	r3, #2
   2b4ec:	dc00      	bgt.n	2b4f0 <_dtoa_r+0xb14>
   2b4ee:	e685      	b.n	2b1fc <_dtoa_r+0x820>
   2b4f0:	9b07      	ldr	r3, [sp, #28]
   2b4f2:	2b00      	cmp	r3, #0
   2b4f4:	d1b5      	bne.n	2b462 <_dtoa_r+0xa86>
   2b4f6:	4649      	mov	r1, r9
   2b4f8:	2205      	movs	r2, #5
   2b4fa:	4650      	mov	r0, sl
   2b4fc:	f000 fdba 	bl	2c074 <__multadd>
   2b500:	4681      	mov	r9, r0
   2b502:	0001      	movs	r1, r0
   2b504:	4658      	mov	r0, fp
   2b506:	f000 ffb7 	bl	2c478 <__mcmp>
   2b50a:	2800      	cmp	r0, #0
   2b50c:	dda9      	ble.n	2b462 <_dtoa_r+0xa86>
   2b50e:	2331      	movs	r3, #49	; 0x31
   2b510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b512:	7013      	strb	r3, [r2, #0]
   2b514:	9b03      	ldr	r3, [sp, #12]
   2b516:	1c54      	adds	r4, r2, #1
   2b518:	3301      	adds	r3, #1
   2b51a:	9303      	str	r3, [sp, #12]
   2b51c:	e7a5      	b.n	2b46a <_dtoa_r+0xa8e>
   2b51e:	9b03      	ldr	r3, [sp, #12]
   2b520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b522:	3301      	adds	r3, #1
   2b524:	9303      	str	r3, [sp, #12]
   2b526:	2331      	movs	r3, #49	; 0x31
   2b528:	7013      	strb	r3, [r2, #0]
   2b52a:	e74e      	b.n	2b3ca <_dtoa_r+0x9ee>
   2b52c:	2300      	movs	r3, #0
   2b52e:	930b      	str	r3, [sp, #44]	; 0x2c
   2b530:	f7ff fb3d 	bl	2abae <_dtoa_r+0x1d2>
   2b534:	9b06      	ldr	r3, [sp, #24]
   2b536:	465c      	mov	r4, fp
   2b538:	469b      	mov	fp, r3
   2b53a:	9b07      	ldr	r3, [sp, #28]
   2b53c:	469a      	mov	sl, r3
   2b53e:	e47c      	b.n	2ae3a <_dtoa_r+0x45e>
   2b540:	4640      	mov	r0, r8
   2b542:	f7fd f8a9 	bl	28698 <__aeabi_i2d>
   2b546:	0032      	movs	r2, r6
   2b548:	003b      	movs	r3, r7
   2b54a:	f7fc fabb 	bl	27ac4 <__aeabi_dmul>
   2b54e:	2200      	movs	r2, #0
   2b550:	4b6b      	ldr	r3, [pc, #428]	; (2b700 <_dtoa_r+0xd24>)
   2b552:	f7fb fb73 	bl	26c3c <__aeabi_dadd>
   2b556:	4a6b      	ldr	r2, [pc, #428]	; (2b704 <_dtoa_r+0xd28>)
   2b558:	000b      	movs	r3, r1
   2b55a:	4694      	mov	ip, r2
   2b55c:	4463      	add	r3, ip
   2b55e:	9008      	str	r0, [sp, #32]
   2b560:	9109      	str	r1, [sp, #36]	; 0x24
   2b562:	9309      	str	r3, [sp, #36]	; 0x24
   2b564:	2200      	movs	r2, #0
   2b566:	4b64      	ldr	r3, [pc, #400]	; (2b6f8 <_dtoa_r+0xd1c>)
   2b568:	0030      	movs	r0, r6
   2b56a:	0039      	movs	r1, r7
   2b56c:	f7fc fd2a 	bl	27fc4 <__aeabi_dsub>
   2b570:	9e08      	ldr	r6, [sp, #32]
   2b572:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2b574:	0032      	movs	r2, r6
   2b576:	003b      	movs	r3, r7
   2b578:	0004      	movs	r4, r0
   2b57a:	000d      	movs	r5, r1
   2b57c:	f7fa fb7e 	bl	25c7c <__aeabi_dcmpgt>
   2b580:	2800      	cmp	r0, #0
   2b582:	d000      	beq.n	2b586 <_dtoa_r+0xbaa>
   2b584:	e0b2      	b.n	2b6ec <_dtoa_r+0xd10>
   2b586:	2080      	movs	r0, #128	; 0x80
   2b588:	0600      	lsls	r0, r0, #24
   2b58a:	4684      	mov	ip, r0
   2b58c:	0039      	movs	r1, r7
   2b58e:	4461      	add	r1, ip
   2b590:	000b      	movs	r3, r1
   2b592:	0032      	movs	r2, r6
   2b594:	0020      	movs	r0, r4
   2b596:	0029      	movs	r1, r5
   2b598:	f7fa fb5c 	bl	25c54 <__aeabi_dcmplt>
   2b59c:	2800      	cmp	r0, #0
   2b59e:	d057      	beq.n	2b650 <_dtoa_r+0xc74>
   2b5a0:	2300      	movs	r3, #0
   2b5a2:	4699      	mov	r9, r3
   2b5a4:	4698      	mov	r8, r3
   2b5a6:	e75c      	b.n	2b462 <_dtoa_r+0xa86>
   2b5a8:	980a      	ldr	r0, [sp, #40]	; 0x28
   2b5aa:	f7ff fa4c 	bl	2aa46 <_dtoa_r+0x6a>
   2b5ae:	1ae2      	subs	r2, r4, r3
   2b5b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b5b2:	46a1      	mov	r9, r4
   2b5b4:	469c      	mov	ip, r3
   2b5b6:	4494      	add	ip, r2
   2b5b8:	4663      	mov	r3, ip
   2b5ba:	2400      	movs	r4, #0
   2b5bc:	930d      	str	r3, [sp, #52]	; 0x34
   2b5be:	e53e      	b.n	2b03e <_dtoa_r+0x662>
   2b5c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2b5c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b5c4:	9208      	str	r2, [sp, #32]
   2b5c6:	9309      	str	r3, [sp, #36]	; 0x24
   2b5c8:	2302      	movs	r3, #2
   2b5ca:	4698      	mov	r8, r3
   2b5cc:	f7ff fb3a 	bl	2ac44 <_dtoa_r+0x268>
   2b5d0:	2300      	movs	r3, #0
   2b5d2:	4652      	mov	r2, sl
   2b5d4:	2100      	movs	r1, #0
   2b5d6:	6453      	str	r3, [r2, #68]	; 0x44
   2b5d8:	4650      	mov	r0, sl
   2b5da:	f000 fd19 	bl	2c010 <_Balloc>
   2b5de:	4653      	mov	r3, sl
   2b5e0:	6418      	str	r0, [r3, #64]	; 0x40
   2b5e2:	2301      	movs	r3, #1
   2b5e4:	900a      	str	r0, [sp, #40]	; 0x28
   2b5e6:	9307      	str	r3, [sp, #28]
   2b5e8:	9323      	str	r3, [sp, #140]	; 0x8c
   2b5ea:	930e      	str	r3, [sp, #56]	; 0x38
   2b5ec:	f7ff fb07 	bl	2abfe <_dtoa_r+0x222>
   2b5f0:	4643      	mov	r3, r8
   2b5f2:	930c      	str	r3, [sp, #48]	; 0x30
   2b5f4:	465b      	mov	r3, fp
   2b5f6:	9a06      	ldr	r2, [sp, #24]
   2b5f8:	46a8      	mov	r8, r5
   2b5fa:	46b3      	mov	fp, r6
   2b5fc:	4655      	mov	r5, sl
   2b5fe:	9e04      	ldr	r6, [sp, #16]
   2b600:	4691      	mov	r9, r2
   2b602:	46ba      	mov	sl, r7
   2b604:	2b00      	cmp	r3, #0
   2b606:	dd10      	ble.n	2b62a <_dtoa_r+0xc4e>
   2b608:	4659      	mov	r1, fp
   2b60a:	2201      	movs	r2, #1
   2b60c:	0038      	movs	r0, r7
   2b60e:	f000 fed3 	bl	2c3b8 <__lshift>
   2b612:	4649      	mov	r1, r9
   2b614:	4683      	mov	fp, r0
   2b616:	f000 ff2f 	bl	2c478 <__mcmp>
   2b61a:	2800      	cmp	r0, #0
   2b61c:	dc00      	bgt.n	2b620 <_dtoa_r+0xc44>
   2b61e:	e157      	b.n	2b8d0 <_dtoa_r+0xef4>
   2b620:	2e39      	cmp	r6, #57	; 0x39
   2b622:	d100      	bne.n	2b626 <_dtoa_r+0xc4a>
   2b624:	e122      	b.n	2b86c <_dtoa_r+0xe90>
   2b626:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2b628:	3631      	adds	r6, #49	; 0x31
   2b62a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b62c:	4647      	mov	r7, r8
   2b62e:	1c6c      	adds	r4, r5, #1
   2b630:	702e      	strb	r6, [r5, #0]
   2b632:	4698      	mov	r8, r3
   2b634:	e6c9      	b.n	2b3ca <_dtoa_r+0x9ee>
   2b636:	2800      	cmp	r0, #0
   2b638:	d103      	bne.n	2b642 <_dtoa_r+0xc66>
   2b63a:	07f3      	lsls	r3, r6, #31
   2b63c:	d501      	bpl.n	2b642 <_dtoa_r+0xc66>
   2b63e:	e6b5      	b.n	2b3ac <_dtoa_r+0x9d0>
   2b640:	001c      	movs	r4, r3
   2b642:	1e63      	subs	r3, r4, #1
   2b644:	781a      	ldrb	r2, [r3, #0]
   2b646:	2a30      	cmp	r2, #48	; 0x30
   2b648:	d0fa      	beq.n	2b640 <_dtoa_r+0xc64>
   2b64a:	e6be      	b.n	2b3ca <_dtoa_r+0x9ee>
   2b64c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b64e:	4699      	mov	r9, r3
   2b650:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2b652:	9f11      	ldr	r7, [sp, #68]	; 0x44
   2b654:	e435      	b.n	2aec2 <_dtoa_r+0x4e6>
   2b656:	2501      	movs	r5, #1
   2b658:	f7ff fab4 	bl	2abc4 <_dtoa_r+0x1e8>
   2b65c:	9b03      	ldr	r3, [sp, #12]
   2b65e:	2b00      	cmp	r3, #0
   2b660:	d100      	bne.n	2b664 <_dtoa_r+0xc88>
   2b662:	e0d4      	b.n	2b80e <_dtoa_r+0xe32>
   2b664:	9810      	ldr	r0, [sp, #64]	; 0x40
   2b666:	9911      	ldr	r1, [sp, #68]	; 0x44
   2b668:	425c      	negs	r4, r3
   2b66a:	230f      	movs	r3, #15
   2b66c:	4a26      	ldr	r2, [pc, #152]	; (2b708 <_dtoa_r+0xd2c>)
   2b66e:	4023      	ands	r3, r4
   2b670:	00db      	lsls	r3, r3, #3
   2b672:	18d3      	adds	r3, r2, r3
   2b674:	681a      	ldr	r2, [r3, #0]
   2b676:	685b      	ldr	r3, [r3, #4]
   2b678:	f7fc fa24 	bl	27ac4 <__aeabi_dmul>
   2b67c:	1124      	asrs	r4, r4, #4
   2b67e:	0006      	movs	r6, r0
   2b680:	000f      	movs	r7, r1
   2b682:	2c00      	cmp	r4, #0
   2b684:	d100      	bne.n	2b688 <_dtoa_r+0xcac>
   2b686:	e149      	b.n	2b91c <_dtoa_r+0xf40>
   2b688:	2302      	movs	r3, #2
   2b68a:	4698      	mov	r8, r3
   2b68c:	4d1f      	ldr	r5, [pc, #124]	; (2b70c <_dtoa_r+0xd30>)
   2b68e:	2301      	movs	r3, #1
   2b690:	4223      	tst	r3, r4
   2b692:	d009      	beq.n	2b6a8 <_dtoa_r+0xccc>
   2b694:	469c      	mov	ip, r3
   2b696:	682a      	ldr	r2, [r5, #0]
   2b698:	686b      	ldr	r3, [r5, #4]
   2b69a:	0030      	movs	r0, r6
   2b69c:	0039      	movs	r1, r7
   2b69e:	44e0      	add	r8, ip
   2b6a0:	f7fc fa10 	bl	27ac4 <__aeabi_dmul>
   2b6a4:	0006      	movs	r6, r0
   2b6a6:	000f      	movs	r7, r1
   2b6a8:	1064      	asrs	r4, r4, #1
   2b6aa:	3508      	adds	r5, #8
   2b6ac:	2c00      	cmp	r4, #0
   2b6ae:	d1ee      	bne.n	2b68e <_dtoa_r+0xcb2>
   2b6b0:	f7ff fae4 	bl	2ac7c <_dtoa_r+0x2a0>
   2b6b4:	9b03      	ldr	r3, [sp, #12]
   2b6b6:	2730      	movs	r7, #48	; 0x30
   2b6b8:	3301      	adds	r3, #1
   2b6ba:	9303      	str	r3, [sp, #12]
   2b6bc:	2330      	movs	r3, #48	; 0x30
   2b6be:	702b      	strb	r3, [r5, #0]
   2b6c0:	e4ac      	b.n	2b01c <_dtoa_r+0x640>
   2b6c2:	6859      	ldr	r1, [r3, #4]
   2b6c4:	4650      	mov	r0, sl
   2b6c6:	f000 fca3 	bl	2c010 <_Balloc>
   2b6ca:	4643      	mov	r3, r8
   2b6cc:	4641      	mov	r1, r8
   2b6ce:	0004      	movs	r4, r0
   2b6d0:	691b      	ldr	r3, [r3, #16]
   2b6d2:	310c      	adds	r1, #12
   2b6d4:	1c9a      	adds	r2, r3, #2
   2b6d6:	0092      	lsls	r2, r2, #2
   2b6d8:	300c      	adds	r0, #12
   2b6da:	f7fd f95d 	bl	28998 <memcpy>
   2b6de:	2201      	movs	r2, #1
   2b6e0:	0021      	movs	r1, r4
   2b6e2:	4650      	mov	r0, sl
   2b6e4:	f000 fe68 	bl	2c3b8 <__lshift>
   2b6e8:	900c      	str	r0, [sp, #48]	; 0x30
   2b6ea:	e599      	b.n	2b220 <_dtoa_r+0x844>
   2b6ec:	2300      	movs	r3, #0
   2b6ee:	4699      	mov	r9, r3
   2b6f0:	4698      	mov	r8, r3
   2b6f2:	e70c      	b.n	2b50e <_dtoa_r+0xb32>
   2b6f4:	7ff00000 	.word	0x7ff00000
   2b6f8:	40140000 	.word	0x40140000
   2b6fc:	00000433 	.word	0x00000433
   2b700:	401c0000 	.word	0x401c0000
   2b704:	fcc00000 	.word	0xfcc00000
   2b708:	0002fd60 	.word	0x0002fd60
   2b70c:	0002fd38 	.word	0x0002fd38
   2b710:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b712:	498f      	ldr	r1, [pc, #572]	; (2b950 <_dtoa_r+0xf74>)
   2b714:	3b01      	subs	r3, #1
   2b716:	00db      	lsls	r3, r3, #3
   2b718:	18c9      	adds	r1, r1, r3
   2b71a:	6808      	ldr	r0, [r1, #0]
   2b71c:	6849      	ldr	r1, [r1, #4]
   2b71e:	9a08      	ldr	r2, [sp, #32]
   2b720:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b722:	f7fc f9cf 	bl	27ac4 <__aeabi_dmul>
   2b726:	9014      	str	r0, [sp, #80]	; 0x50
   2b728:	9115      	str	r1, [sp, #84]	; 0x54
   2b72a:	0039      	movs	r1, r7
   2b72c:	0030      	movs	r0, r6
   2b72e:	f7fc ff7f 	bl	28630 <__aeabi_d2iz>
   2b732:	0005      	movs	r5, r0
   2b734:	f7fc ffb0 	bl	28698 <__aeabi_i2d>
   2b738:	0002      	movs	r2, r0
   2b73a:	000b      	movs	r3, r1
   2b73c:	0030      	movs	r0, r6
   2b73e:	0039      	movs	r1, r7
   2b740:	f7fc fc40 	bl	27fc4 <__aeabi_dsub>
   2b744:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b746:	9008      	str	r0, [sp, #32]
   2b748:	9109      	str	r1, [sp, #36]	; 0x24
   2b74a:	990a      	ldr	r1, [sp, #40]	; 0x28
   2b74c:	001a      	movs	r2, r3
   2b74e:	468c      	mov	ip, r1
   2b750:	3530      	adds	r5, #48	; 0x30
   2b752:	4462      	add	r2, ip
   2b754:	1c4c      	adds	r4, r1, #1
   2b756:	700d      	strb	r5, [r1, #0]
   2b758:	4690      	mov	r8, r2
   2b75a:	2b01      	cmp	r3, #1
   2b75c:	d01b      	beq.n	2b796 <_dtoa_r+0xdba>
   2b75e:	9808      	ldr	r0, [sp, #32]
   2b760:	9909      	ldr	r1, [sp, #36]	; 0x24
   2b762:	0025      	movs	r5, r4
   2b764:	2200      	movs	r2, #0
   2b766:	4b7b      	ldr	r3, [pc, #492]	; (2b954 <_dtoa_r+0xf78>)
   2b768:	f7fc f9ac 	bl	27ac4 <__aeabi_dmul>
   2b76c:	000f      	movs	r7, r1
   2b76e:	0006      	movs	r6, r0
   2b770:	f7fc ff5e 	bl	28630 <__aeabi_d2iz>
   2b774:	0004      	movs	r4, r0
   2b776:	f7fc ff8f 	bl	28698 <__aeabi_i2d>
   2b77a:	3430      	adds	r4, #48	; 0x30
   2b77c:	0002      	movs	r2, r0
   2b77e:	000b      	movs	r3, r1
   2b780:	0030      	movs	r0, r6
   2b782:	0039      	movs	r1, r7
   2b784:	f7fc fc1e 	bl	27fc4 <__aeabi_dsub>
   2b788:	702c      	strb	r4, [r5, #0]
   2b78a:	3501      	adds	r5, #1
   2b78c:	45a8      	cmp	r8, r5
   2b78e:	d1e9      	bne.n	2b764 <_dtoa_r+0xd88>
   2b790:	4644      	mov	r4, r8
   2b792:	9008      	str	r0, [sp, #32]
   2b794:	9109      	str	r1, [sp, #36]	; 0x24
   2b796:	9814      	ldr	r0, [sp, #80]	; 0x50
   2b798:	9915      	ldr	r1, [sp, #84]	; 0x54
   2b79a:	2200      	movs	r2, #0
   2b79c:	4b6e      	ldr	r3, [pc, #440]	; (2b958 <_dtoa_r+0xf7c>)
   2b79e:	f7fb fa4d 	bl	26c3c <__aeabi_dadd>
   2b7a2:	9a08      	ldr	r2, [sp, #32]
   2b7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b7a6:	f7fa fa55 	bl	25c54 <__aeabi_dcmplt>
   2b7aa:	2800      	cmp	r0, #0
   2b7ac:	d067      	beq.n	2b87e <_dtoa_r+0xea2>
   2b7ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b7b0:	1e65      	subs	r5, r4, #1
   2b7b2:	9303      	str	r3, [sp, #12]
   2b7b4:	782f      	ldrb	r7, [r5, #0]
   2b7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b7b8:	e42e      	b.n	2b018 <_dtoa_r+0x63c>
   2b7ba:	4643      	mov	r3, r8
   2b7bc:	46b3      	mov	fp, r6
   2b7be:	930c      	str	r3, [sp, #48]	; 0x30
   2b7c0:	9e04      	ldr	r6, [sp, #16]
   2b7c2:	9b06      	ldr	r3, [sp, #24]
   2b7c4:	46a8      	mov	r8, r5
   2b7c6:	4699      	mov	r9, r3
   2b7c8:	4655      	mov	r5, sl
   2b7ca:	46ba      	mov	sl, r7
   2b7cc:	2e39      	cmp	r6, #57	; 0x39
   2b7ce:	d04d      	beq.n	2b86c <_dtoa_r+0xe90>
   2b7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b7d2:	3601      	adds	r6, #1
   2b7d4:	4647      	mov	r7, r8
   2b7d6:	1c6c      	adds	r4, r5, #1
   2b7d8:	702e      	strb	r6, [r5, #0]
   2b7da:	4698      	mov	r8, r3
   2b7dc:	e5f5      	b.n	2b3ca <_dtoa_r+0x9ee>
   2b7de:	4642      	mov	r2, r8
   2b7e0:	9b06      	ldr	r3, [sp, #24]
   2b7e2:	46b3      	mov	fp, r6
   2b7e4:	46ba      	mov	sl, r7
   2b7e6:	9e04      	ldr	r6, [sp, #16]
   2b7e8:	4699      	mov	r9, r3
   2b7ea:	002f      	movs	r7, r5
   2b7ec:	4690      	mov	r8, r2
   2b7ee:	e5d1      	b.n	2b394 <_dtoa_r+0x9b8>
   2b7f0:	9b06      	ldr	r3, [sp, #24]
   2b7f2:	9a07      	ldr	r2, [sp, #28]
   2b7f4:	1a9b      	subs	r3, r3, r2
   2b7f6:	9308      	str	r3, [sp, #32]
   2b7f8:	2300      	movs	r3, #0
   2b7fa:	e427      	b.n	2b04c <_dtoa_r+0x670>
   2b7fc:	2401      	movs	r4, #1
   2b7fe:	e5c5      	b.n	2b38c <_dtoa_r+0x9b0>
   2b800:	2336      	movs	r3, #54	; 0x36
   2b802:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2b804:	464c      	mov	r4, r9
   2b806:	1a9b      	subs	r3, r3, r2
   2b808:	9a06      	ldr	r2, [sp, #24]
   2b80a:	9208      	str	r2, [sp, #32]
   2b80c:	e41e      	b.n	2b04c <_dtoa_r+0x670>
   2b80e:	2302      	movs	r3, #2
   2b810:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2b812:	9f11      	ldr	r7, [sp, #68]	; 0x44
   2b814:	4698      	mov	r8, r3
   2b816:	f7ff fa31 	bl	2ac7c <_dtoa_r+0x2a0>
   2b81a:	9b07      	ldr	r3, [sp, #28]
   2b81c:	2b00      	cmp	r3, #0
   2b81e:	d100      	bne.n	2b822 <_dtoa_r+0xe46>
   2b820:	e68e      	b.n	2b540 <_dtoa_r+0xb64>
   2b822:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2b824:	2c00      	cmp	r4, #0
   2b826:	dc00      	bgt.n	2b82a <_dtoa_r+0xe4e>
   2b828:	e712      	b.n	2b650 <_dtoa_r+0xc74>
   2b82a:	9b03      	ldr	r3, [sp, #12]
   2b82c:	2200      	movs	r2, #0
   2b82e:	3b01      	subs	r3, #1
   2b830:	9313      	str	r3, [sp, #76]	; 0x4c
   2b832:	0030      	movs	r0, r6
   2b834:	4b47      	ldr	r3, [pc, #284]	; (2b954 <_dtoa_r+0xf78>)
   2b836:	0039      	movs	r1, r7
   2b838:	f7fc f944 	bl	27ac4 <__aeabi_dmul>
   2b83c:	0006      	movs	r6, r0
   2b83e:	4640      	mov	r0, r8
   2b840:	000f      	movs	r7, r1
   2b842:	3001      	adds	r0, #1
   2b844:	f7fc ff28 	bl	28698 <__aeabi_i2d>
   2b848:	0032      	movs	r2, r6
   2b84a:	003b      	movs	r3, r7
   2b84c:	f7fc f93a 	bl	27ac4 <__aeabi_dmul>
   2b850:	2200      	movs	r2, #0
   2b852:	4b42      	ldr	r3, [pc, #264]	; (2b95c <_dtoa_r+0xf80>)
   2b854:	f7fb f9f2 	bl	26c3c <__aeabi_dadd>
   2b858:	4a41      	ldr	r2, [pc, #260]	; (2b960 <_dtoa_r+0xf84>)
   2b85a:	000b      	movs	r3, r1
   2b85c:	4694      	mov	ip, r2
   2b85e:	4463      	add	r3, ip
   2b860:	9008      	str	r0, [sp, #32]
   2b862:	9109      	str	r1, [sp, #36]	; 0x24
   2b864:	9412      	str	r4, [sp, #72]	; 0x48
   2b866:	9309      	str	r3, [sp, #36]	; 0x24
   2b868:	f7ff fa30 	bl	2accc <_dtoa_r+0x2f0>
   2b86c:	2339      	movs	r3, #57	; 0x39
   2b86e:	702b      	strb	r3, [r5, #0]
   2b870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b872:	4647      	mov	r7, r8
   2b874:	1c6c      	adds	r4, r5, #1
   2b876:	4698      	mov	r8, r3
   2b878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b87a:	2339      	movs	r3, #57	; 0x39
   2b87c:	e5a1      	b.n	2b3c2 <_dtoa_r+0x9e6>
   2b87e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2b880:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2b882:	2000      	movs	r0, #0
   2b884:	4934      	ldr	r1, [pc, #208]	; (2b958 <_dtoa_r+0xf7c>)
   2b886:	f7fc fb9d 	bl	27fc4 <__aeabi_dsub>
   2b88a:	9a08      	ldr	r2, [sp, #32]
   2b88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b88e:	f7fa f9f5 	bl	25c7c <__aeabi_dcmpgt>
   2b892:	2800      	cmp	r0, #0
   2b894:	d101      	bne.n	2b89a <_dtoa_r+0xebe>
   2b896:	e6db      	b.n	2b650 <_dtoa_r+0xc74>
   2b898:	001c      	movs	r4, r3
   2b89a:	1e63      	subs	r3, r4, #1
   2b89c:	781a      	ldrb	r2, [r3, #0]
   2b89e:	2a30      	cmp	r2, #48	; 0x30
   2b8a0:	d0fa      	beq.n	2b898 <_dtoa_r+0xebc>
   2b8a2:	f7ff fac8 	bl	2ae36 <_dtoa_r+0x45a>
   2b8a6:	4643      	mov	r3, r8
   2b8a8:	46b3      	mov	fp, r6
   2b8aa:	930c      	str	r3, [sp, #48]	; 0x30
   2b8ac:	9e04      	ldr	r6, [sp, #16]
   2b8ae:	9b06      	ldr	r3, [sp, #24]
   2b8b0:	46a8      	mov	r8, r5
   2b8b2:	4699      	mov	r9, r3
   2b8b4:	4655      	mov	r5, sl
   2b8b6:	46ba      	mov	sl, r7
   2b8b8:	2e39      	cmp	r6, #57	; 0x39
   2b8ba:	d0d7      	beq.n	2b86c <_dtoa_r+0xe90>
   2b8bc:	2c00      	cmp	r4, #0
   2b8be:	dd00      	ble.n	2b8c2 <_dtoa_r+0xee6>
   2b8c0:	e6b1      	b.n	2b626 <_dtoa_r+0xc4a>
   2b8c2:	e6b2      	b.n	2b62a <_dtoa_r+0xc4e>
   2b8c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2b8c6:	464d      	mov	r5, r9
   2b8c8:	9203      	str	r2, [sp, #12]
   2b8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b8cc:	f7ff fba4 	bl	2b018 <_dtoa_r+0x63c>
   2b8d0:	2800      	cmp	r0, #0
   2b8d2:	d000      	beq.n	2b8d6 <_dtoa_r+0xefa>
   2b8d4:	e6a9      	b.n	2b62a <_dtoa_r+0xc4e>
   2b8d6:	07f3      	lsls	r3, r6, #31
   2b8d8:	d400      	bmi.n	2b8dc <_dtoa_r+0xf00>
   2b8da:	e6a6      	b.n	2b62a <_dtoa_r+0xc4e>
   2b8dc:	e6a0      	b.n	2b620 <_dtoa_r+0xc44>
   2b8de:	2300      	movs	r3, #0
   2b8e0:	4641      	mov	r1, r8
   2b8e2:	220a      	movs	r2, #10
   2b8e4:	4650      	mov	r0, sl
   2b8e6:	f000 fbc5 	bl	2c074 <__multadd>
   2b8ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b8ec:	4680      	mov	r8, r0
   2b8ee:	2b00      	cmp	r3, #0
   2b8f0:	dd01      	ble.n	2b8f6 <_dtoa_r+0xf1a>
   2b8f2:	9307      	str	r3, [sp, #28]
   2b8f4:	e486      	b.n	2b204 <_dtoa_r+0x828>
   2b8f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2b8f8:	2b02      	cmp	r3, #2
   2b8fa:	dc1f      	bgt.n	2b93c <_dtoa_r+0xf60>
   2b8fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b8fe:	9307      	str	r3, [sp, #28]
   2b900:	e480      	b.n	2b204 <_dtoa_r+0x828>
   2b902:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2b904:	2b02      	cmp	r3, #2
   2b906:	dc19      	bgt.n	2b93c <_dtoa_r+0xf60>
   2b908:	4649      	mov	r1, r9
   2b90a:	f7fe ffbd 	bl	2a888 <quorem>
   2b90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b910:	3030      	adds	r0, #48	; 0x30
   2b912:	7018      	strb	r0, [r3, #0]
   2b914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b916:	0006      	movs	r6, r0
   2b918:	9307      	str	r3, [sp, #28]
   2b91a:	e533      	b.n	2b384 <_dtoa_r+0x9a8>
   2b91c:	2302      	movs	r3, #2
   2b91e:	4698      	mov	r8, r3
   2b920:	f7ff f9ac 	bl	2ac7c <_dtoa_r+0x2a0>
   2b924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b926:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2b928:	9303      	str	r3, [sp, #12]
   2b92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b92c:	001d      	movs	r5, r3
   2b92e:	f7ff fb73 	bl	2b018 <_dtoa_r+0x63c>
   2b932:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b934:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2b936:	9303      	str	r3, [sp, #12]
   2b938:	f7ff fa7f 	bl	2ae3a <_dtoa_r+0x45e>
   2b93c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b93e:	9307      	str	r3, [sp, #28]
   2b940:	e5d6      	b.n	2b4f0 <_dtoa_r+0xb14>
   2b942:	2b04      	cmp	r3, #4
   2b944:	d100      	bne.n	2b948 <_dtoa_r+0xf6c>
   2b946:	e43f      	b.n	2b1c8 <_dtoa_r+0x7ec>
   2b948:	233c      	movs	r3, #60	; 0x3c
   2b94a:	1a18      	subs	r0, r3, r0
   2b94c:	e4d7      	b.n	2b2fe <_dtoa_r+0x922>
   2b94e:	46c0      	nop			; (mov r8, r8)
   2b950:	0002fd60 	.word	0x0002fd60
   2b954:	40240000 	.word	0x40240000
   2b958:	3fe00000 	.word	0x3fe00000
   2b95c:	401c0000 	.word	0x401c0000
   2b960:	fcc00000 	.word	0xfcc00000

0002b964 <__libc_fini_array>:
   2b964:	b570      	push	{r4, r5, r6, lr}
   2b966:	4b09      	ldr	r3, [pc, #36]	; (2b98c <__libc_fini_array+0x28>)
   2b968:	4c09      	ldr	r4, [pc, #36]	; (2b990 <__libc_fini_array+0x2c>)
   2b96a:	1ae4      	subs	r4, r4, r3
   2b96c:	10a4      	asrs	r4, r4, #2
   2b96e:	d009      	beq.n	2b984 <__libc_fini_array+0x20>
   2b970:	4a08      	ldr	r2, [pc, #32]	; (2b994 <__libc_fini_array+0x30>)
   2b972:	18a5      	adds	r5, r4, r2
   2b974:	00ad      	lsls	r5, r5, #2
   2b976:	18ed      	adds	r5, r5, r3
   2b978:	682b      	ldr	r3, [r5, #0]
   2b97a:	3c01      	subs	r4, #1
   2b97c:	4798      	blx	r3
   2b97e:	3d04      	subs	r5, #4
   2b980:	2c00      	cmp	r4, #0
   2b982:	d1f9      	bne.n	2b978 <__libc_fini_array+0x14>
   2b984:	f004 fae6 	bl	2ff54 <_fini>
   2b988:	bd70      	pop	{r4, r5, r6, pc}
   2b98a:	46c0      	nop			; (mov r8, r8)
   2b98c:	0002ff60 	.word	0x0002ff60
   2b990:	0002ff64 	.word	0x0002ff64
   2b994:	3fffffff 	.word	0x3fffffff

0002b998 <_localeconv_r>:
   2b998:	4b04      	ldr	r3, [pc, #16]	; (2b9ac <_localeconv_r+0x14>)
   2b99a:	681b      	ldr	r3, [r3, #0]
   2b99c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   2b99e:	2800      	cmp	r0, #0
   2b9a0:	d001      	beq.n	2b9a6 <_localeconv_r+0xe>
   2b9a2:	30f0      	adds	r0, #240	; 0xf0
   2b9a4:	4770      	bx	lr
   2b9a6:	4802      	ldr	r0, [pc, #8]	; (2b9b0 <_localeconv_r+0x18>)
   2b9a8:	e7fb      	b.n	2b9a2 <_localeconv_r+0xa>
   2b9aa:	46c0      	nop			; (mov r8, r8)
   2b9ac:	200001e0 	.word	0x200001e0
   2b9b0:	20000a24 	.word	0x20000a24

0002b9b4 <__retarget_lock_acquire_recursive>:
   2b9b4:	4770      	bx	lr
   2b9b6:	46c0      	nop			; (mov r8, r8)

0002b9b8 <__retarget_lock_release_recursive>:
   2b9b8:	4770      	bx	lr
   2b9ba:	46c0      	nop			; (mov r8, r8)

0002b9bc <_malloc_r>:
   2b9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b9be:	4657      	mov	r7, sl
   2b9c0:	4645      	mov	r5, r8
   2b9c2:	46de      	mov	lr, fp
   2b9c4:	464e      	mov	r6, r9
   2b9c6:	b5e0      	push	{r5, r6, r7, lr}
   2b9c8:	000d      	movs	r5, r1
   2b9ca:	350b      	adds	r5, #11
   2b9cc:	b083      	sub	sp, #12
   2b9ce:	0007      	movs	r7, r0
   2b9d0:	2d16      	cmp	r5, #22
   2b9d2:	d800      	bhi.n	2b9d6 <_malloc_r+0x1a>
   2b9d4:	e09f      	b.n	2bb16 <_malloc_r+0x15a>
   2b9d6:	2307      	movs	r3, #7
   2b9d8:	439d      	bics	r5, r3
   2b9da:	d500      	bpl.n	2b9de <_malloc_r+0x22>
   2b9dc:	e0c4      	b.n	2bb68 <_malloc_r+0x1ac>
   2b9de:	42a9      	cmp	r1, r5
   2b9e0:	d900      	bls.n	2b9e4 <_malloc_r+0x28>
   2b9e2:	e0c1      	b.n	2bb68 <_malloc_r+0x1ac>
   2b9e4:	f000 fb04 	bl	2bff0 <__malloc_lock>
   2b9e8:	23f8      	movs	r3, #248	; 0xf8
   2b9ea:	33ff      	adds	r3, #255	; 0xff
   2b9ec:	429d      	cmp	r5, r3
   2b9ee:	d800      	bhi.n	2b9f2 <_malloc_r+0x36>
   2b9f0:	e28f      	b.n	2bf12 <_malloc_r+0x556>
   2b9f2:	0a68      	lsrs	r0, r5, #9
   2b9f4:	d100      	bne.n	2b9f8 <_malloc_r+0x3c>
   2b9f6:	e0bb      	b.n	2bb70 <_malloc_r+0x1b4>
   2b9f8:	2804      	cmp	r0, #4
   2b9fa:	d900      	bls.n	2b9fe <_malloc_r+0x42>
   2b9fc:	e162      	b.n	2bcc4 <_malloc_r+0x308>
   2b9fe:	2338      	movs	r3, #56	; 0x38
   2ba00:	4698      	mov	r8, r3
   2ba02:	09a8      	lsrs	r0, r5, #6
   2ba04:	4480      	add	r8, r0
   2ba06:	3039      	adds	r0, #57	; 0x39
   2ba08:	00c1      	lsls	r1, r0, #3
   2ba0a:	4ed2      	ldr	r6, [pc, #840]	; (2bd54 <_malloc_r+0x398>)
   2ba0c:	1871      	adds	r1, r6, r1
   2ba0e:	3908      	subs	r1, #8
   2ba10:	68cc      	ldr	r4, [r1, #12]
   2ba12:	42a1      	cmp	r1, r4
   2ba14:	d019      	beq.n	2ba4a <_malloc_r+0x8e>
   2ba16:	2303      	movs	r3, #3
   2ba18:	6862      	ldr	r2, [r4, #4]
   2ba1a:	439a      	bics	r2, r3
   2ba1c:	0013      	movs	r3, r2
   2ba1e:	1b52      	subs	r2, r2, r5
   2ba20:	2a0f      	cmp	r2, #15
   2ba22:	dd00      	ble.n	2ba26 <_malloc_r+0x6a>
   2ba24:	e0aa      	b.n	2bb7c <_malloc_r+0x1c0>
   2ba26:	2a00      	cmp	r2, #0
   2ba28:	db00      	blt.n	2ba2c <_malloc_r+0x70>
   2ba2a:	e088      	b.n	2bb3e <_malloc_r+0x182>
   2ba2c:	2303      	movs	r3, #3
   2ba2e:	469c      	mov	ip, r3
   2ba30:	e008      	b.n	2ba44 <_malloc_r+0x88>
   2ba32:	4662      	mov	r2, ip
   2ba34:	6863      	ldr	r3, [r4, #4]
   2ba36:	4393      	bics	r3, r2
   2ba38:	1b5a      	subs	r2, r3, r5
   2ba3a:	2a0f      	cmp	r2, #15
   2ba3c:	dd00      	ble.n	2ba40 <_malloc_r+0x84>
   2ba3e:	e09d      	b.n	2bb7c <_malloc_r+0x1c0>
   2ba40:	2a00      	cmp	r2, #0
   2ba42:	da7c      	bge.n	2bb3e <_malloc_r+0x182>
   2ba44:	68e4      	ldr	r4, [r4, #12]
   2ba46:	42a1      	cmp	r1, r4
   2ba48:	d1f3      	bne.n	2ba32 <_malloc_r+0x76>
   2ba4a:	0032      	movs	r2, r6
   2ba4c:	6934      	ldr	r4, [r6, #16]
   2ba4e:	3208      	adds	r2, #8
   2ba50:	4294      	cmp	r4, r2
   2ba52:	d100      	bne.n	2ba56 <_malloc_r+0x9a>
   2ba54:	e190      	b.n	2bd78 <_malloc_r+0x3bc>
   2ba56:	2303      	movs	r3, #3
   2ba58:	6861      	ldr	r1, [r4, #4]
   2ba5a:	4399      	bics	r1, r3
   2ba5c:	4689      	mov	r9, r1
   2ba5e:	1b49      	subs	r1, r1, r5
   2ba60:	290f      	cmp	r1, #15
   2ba62:	dd00      	ble.n	2ba66 <_malloc_r+0xaa>
   2ba64:	e162      	b.n	2bd2c <_malloc_r+0x370>
   2ba66:	6172      	str	r2, [r6, #20]
   2ba68:	6132      	str	r2, [r6, #16]
   2ba6a:	2900      	cmp	r1, #0
   2ba6c:	db00      	blt.n	2ba70 <_malloc_r+0xb4>
   2ba6e:	e087      	b.n	2bb80 <_malloc_r+0x1c4>
   2ba70:	4ab9      	ldr	r2, [pc, #740]	; (2bd58 <_malloc_r+0x39c>)
   2ba72:	464b      	mov	r3, r9
   2ba74:	4591      	cmp	r9, r2
   2ba76:	d900      	bls.n	2ba7a <_malloc_r+0xbe>
   2ba78:	e130      	b.n	2bcdc <_malloc_r+0x320>
   2ba7a:	08db      	lsrs	r3, r3, #3
   2ba7c:	3aff      	subs	r2, #255	; 0xff
   2ba7e:	1099      	asrs	r1, r3, #2
   2ba80:	3aff      	subs	r2, #255	; 0xff
   2ba82:	408a      	lsls	r2, r1
   2ba84:	00db      	lsls	r3, r3, #3
   2ba86:	6871      	ldr	r1, [r6, #4]
   2ba88:	199b      	adds	r3, r3, r6
   2ba8a:	430a      	orrs	r2, r1
   2ba8c:	6899      	ldr	r1, [r3, #8]
   2ba8e:	6072      	str	r2, [r6, #4]
   2ba90:	60e3      	str	r3, [r4, #12]
   2ba92:	60a1      	str	r1, [r4, #8]
   2ba94:	609c      	str	r4, [r3, #8]
   2ba96:	0013      	movs	r3, r2
   2ba98:	60cc      	str	r4, [r1, #12]
   2ba9a:	2101      	movs	r1, #1
   2ba9c:	1082      	asrs	r2, r0, #2
   2ba9e:	4091      	lsls	r1, r2
   2baa0:	4299      	cmp	r1, r3
   2baa2:	d86f      	bhi.n	2bb84 <_malloc_r+0x1c8>
   2baa4:	420b      	tst	r3, r1
   2baa6:	d105      	bne.n	2bab4 <_malloc_r+0xf8>
   2baa8:	2203      	movs	r2, #3
   2baaa:	4390      	bics	r0, r2
   2baac:	0049      	lsls	r1, r1, #1
   2baae:	3004      	adds	r0, #4
   2bab0:	420b      	tst	r3, r1
   2bab2:	d0fb      	beq.n	2baac <_malloc_r+0xf0>
   2bab4:	2303      	movs	r3, #3
   2bab6:	4698      	mov	r8, r3
   2bab8:	00c3      	lsls	r3, r0, #3
   2baba:	4699      	mov	r9, r3
   2babc:	44b1      	add	r9, r6
   2babe:	46cc      	mov	ip, r9
   2bac0:	4682      	mov	sl, r0
   2bac2:	4663      	mov	r3, ip
   2bac4:	68dc      	ldr	r4, [r3, #12]
   2bac6:	45a4      	cmp	ip, r4
   2bac8:	d107      	bne.n	2bada <_malloc_r+0x11e>
   2baca:	e157      	b.n	2bd7c <_malloc_r+0x3c0>
   2bacc:	2a00      	cmp	r2, #0
   2bace:	db00      	blt.n	2bad2 <_malloc_r+0x116>
   2bad0:	e166      	b.n	2bda0 <_malloc_r+0x3e4>
   2bad2:	68e4      	ldr	r4, [r4, #12]
   2bad4:	45a4      	cmp	ip, r4
   2bad6:	d100      	bne.n	2bada <_malloc_r+0x11e>
   2bad8:	e150      	b.n	2bd7c <_malloc_r+0x3c0>
   2bada:	4642      	mov	r2, r8
   2badc:	6863      	ldr	r3, [r4, #4]
   2bade:	4393      	bics	r3, r2
   2bae0:	1b5a      	subs	r2, r3, r5
   2bae2:	2a0f      	cmp	r2, #15
   2bae4:	ddf2      	ble.n	2bacc <_malloc_r+0x110>
   2bae6:	2001      	movs	r0, #1
   2bae8:	4680      	mov	r8, r0
   2baea:	1961      	adds	r1, r4, r5
   2baec:	4305      	orrs	r5, r0
   2baee:	6065      	str	r5, [r4, #4]
   2baf0:	68a0      	ldr	r0, [r4, #8]
   2baf2:	68e5      	ldr	r5, [r4, #12]
   2baf4:	3608      	adds	r6, #8
   2baf6:	60c5      	str	r5, [r0, #12]
   2baf8:	60a8      	str	r0, [r5, #8]
   2bafa:	4640      	mov	r0, r8
   2bafc:	60f1      	str	r1, [r6, #12]
   2bafe:	60b1      	str	r1, [r6, #8]
   2bb00:	4310      	orrs	r0, r2
   2bb02:	6048      	str	r0, [r1, #4]
   2bb04:	60ce      	str	r6, [r1, #12]
   2bb06:	608e      	str	r6, [r1, #8]
   2bb08:	0038      	movs	r0, r7
   2bb0a:	50e2      	str	r2, [r4, r3]
   2bb0c:	f000 fa78 	bl	2c000 <__malloc_unlock>
   2bb10:	0020      	movs	r0, r4
   2bb12:	3008      	adds	r0, #8
   2bb14:	e021      	b.n	2bb5a <_malloc_r+0x19e>
   2bb16:	2910      	cmp	r1, #16
   2bb18:	d826      	bhi.n	2bb68 <_malloc_r+0x1ac>
   2bb1a:	0038      	movs	r0, r7
   2bb1c:	f000 fa68 	bl	2bff0 <__malloc_lock>
   2bb20:	2510      	movs	r5, #16
   2bb22:	2318      	movs	r3, #24
   2bb24:	2002      	movs	r0, #2
   2bb26:	4e8b      	ldr	r6, [pc, #556]	; (2bd54 <_malloc_r+0x398>)
   2bb28:	18f3      	adds	r3, r6, r3
   2bb2a:	001a      	movs	r2, r3
   2bb2c:	685c      	ldr	r4, [r3, #4]
   2bb2e:	3a08      	subs	r2, #8
   2bb30:	4294      	cmp	r4, r2
   2bb32:	d100      	bne.n	2bb36 <_malloc_r+0x17a>
   2bb34:	e12e      	b.n	2bd94 <_malloc_r+0x3d8>
   2bb36:	2303      	movs	r3, #3
   2bb38:	6862      	ldr	r2, [r4, #4]
   2bb3a:	439a      	bics	r2, r3
   2bb3c:	0013      	movs	r3, r2
   2bb3e:	68e2      	ldr	r2, [r4, #12]
   2bb40:	68a1      	ldr	r1, [r4, #8]
   2bb42:	60ca      	str	r2, [r1, #12]
   2bb44:	6091      	str	r1, [r2, #8]
   2bb46:	2201      	movs	r2, #1
   2bb48:	18e3      	adds	r3, r4, r3
   2bb4a:	6859      	ldr	r1, [r3, #4]
   2bb4c:	0038      	movs	r0, r7
   2bb4e:	430a      	orrs	r2, r1
   2bb50:	605a      	str	r2, [r3, #4]
   2bb52:	f000 fa55 	bl	2c000 <__malloc_unlock>
   2bb56:	0020      	movs	r0, r4
   2bb58:	3008      	adds	r0, #8
   2bb5a:	b003      	add	sp, #12
   2bb5c:	bc3c      	pop	{r2, r3, r4, r5}
   2bb5e:	4690      	mov	r8, r2
   2bb60:	4699      	mov	r9, r3
   2bb62:	46a2      	mov	sl, r4
   2bb64:	46ab      	mov	fp, r5
   2bb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bb68:	230c      	movs	r3, #12
   2bb6a:	2000      	movs	r0, #0
   2bb6c:	603b      	str	r3, [r7, #0]
   2bb6e:	e7f4      	b.n	2bb5a <_malloc_r+0x19e>
   2bb70:	2180      	movs	r1, #128	; 0x80
   2bb72:	233f      	movs	r3, #63	; 0x3f
   2bb74:	2040      	movs	r0, #64	; 0x40
   2bb76:	0089      	lsls	r1, r1, #2
   2bb78:	4698      	mov	r8, r3
   2bb7a:	e746      	b.n	2ba0a <_malloc_r+0x4e>
   2bb7c:	4640      	mov	r0, r8
   2bb7e:	e764      	b.n	2ba4a <_malloc_r+0x8e>
   2bb80:	464b      	mov	r3, r9
   2bb82:	e7e0      	b.n	2bb46 <_malloc_r+0x18a>
   2bb84:	2303      	movs	r3, #3
   2bb86:	68b4      	ldr	r4, [r6, #8]
   2bb88:	6862      	ldr	r2, [r4, #4]
   2bb8a:	439a      	bics	r2, r3
   2bb8c:	4690      	mov	r8, r2
   2bb8e:	42aa      	cmp	r2, r5
   2bb90:	d303      	bcc.n	2bb9a <_malloc_r+0x1de>
   2bb92:	1b53      	subs	r3, r2, r5
   2bb94:	2b0f      	cmp	r3, #15
   2bb96:	dd00      	ble.n	2bb9a <_malloc_r+0x1de>
   2bb98:	e086      	b.n	2bca8 <_malloc_r+0x2ec>
   2bb9a:	0023      	movs	r3, r4
   2bb9c:	4443      	add	r3, r8
   2bb9e:	4a6f      	ldr	r2, [pc, #444]	; (2bd5c <_malloc_r+0x3a0>)
   2bba0:	9301      	str	r3, [sp, #4]
   2bba2:	4b6f      	ldr	r3, [pc, #444]	; (2bd60 <_malloc_r+0x3a4>)
   2bba4:	4693      	mov	fp, r2
   2bba6:	681b      	ldr	r3, [r3, #0]
   2bba8:	6812      	ldr	r2, [r2, #0]
   2bbaa:	18eb      	adds	r3, r5, r3
   2bbac:	3201      	adds	r2, #1
   2bbae:	d100      	bne.n	2bbb2 <_malloc_r+0x1f6>
   2bbb0:	e168      	b.n	2be84 <_malloc_r+0x4c8>
   2bbb2:	4a6c      	ldr	r2, [pc, #432]	; (2bd64 <_malloc_r+0x3a8>)
   2bbb4:	4694      	mov	ip, r2
   2bbb6:	4463      	add	r3, ip
   2bbb8:	0b1b      	lsrs	r3, r3, #12
   2bbba:	031b      	lsls	r3, r3, #12
   2bbbc:	9300      	str	r3, [sp, #0]
   2bbbe:	9900      	ldr	r1, [sp, #0]
   2bbc0:	0038      	movs	r0, r7
   2bbc2:	f000 fd6d 	bl	2c6a0 <_sbrk_r>
   2bbc6:	0003      	movs	r3, r0
   2bbc8:	4681      	mov	r9, r0
   2bbca:	3301      	adds	r3, #1
   2bbcc:	d061      	beq.n	2bc92 <_malloc_r+0x2d6>
   2bbce:	9b01      	ldr	r3, [sp, #4]
   2bbd0:	4283      	cmp	r3, r0
   2bbd2:	d900      	bls.n	2bbd6 <_malloc_r+0x21a>
   2bbd4:	e0ff      	b.n	2bdd6 <_malloc_r+0x41a>
   2bbd6:	4b64      	ldr	r3, [pc, #400]	; (2bd68 <_malloc_r+0x3ac>)
   2bbd8:	9a00      	ldr	r2, [sp, #0]
   2bbda:	469a      	mov	sl, r3
   2bbdc:	681b      	ldr	r3, [r3, #0]
   2bbde:	469c      	mov	ip, r3
   2bbe0:	4653      	mov	r3, sl
   2bbe2:	4462      	add	r2, ip
   2bbe4:	601a      	str	r2, [r3, #0]
   2bbe6:	9b01      	ldr	r3, [sp, #4]
   2bbe8:	0011      	movs	r1, r2
   2bbea:	4283      	cmp	r3, r0
   2bbec:	d100      	bne.n	2bbf0 <_malloc_r+0x234>
   2bbee:	e155      	b.n	2be9c <_malloc_r+0x4e0>
   2bbf0:	465b      	mov	r3, fp
   2bbf2:	681b      	ldr	r3, [r3, #0]
   2bbf4:	3301      	adds	r3, #1
   2bbf6:	d100      	bne.n	2bbfa <_malloc_r+0x23e>
   2bbf8:	e16c      	b.n	2bed4 <_malloc_r+0x518>
   2bbfa:	464b      	mov	r3, r9
   2bbfc:	9a01      	ldr	r2, [sp, #4]
   2bbfe:	1a9b      	subs	r3, r3, r2
   2bc00:	1859      	adds	r1, r3, r1
   2bc02:	4653      	mov	r3, sl
   2bc04:	6019      	str	r1, [r3, #0]
   2bc06:	2307      	movs	r3, #7
   2bc08:	464a      	mov	r2, r9
   2bc0a:	4013      	ands	r3, r2
   2bc0c:	d100      	bne.n	2bc10 <_malloc_r+0x254>
   2bc0e:	e124      	b.n	2be5a <_malloc_r+0x49e>
   2bc10:	2108      	movs	r1, #8
   2bc12:	4689      	mov	r9, r1
   2bc14:	4955      	ldr	r1, [pc, #340]	; (2bd6c <_malloc_r+0x3b0>)
   2bc16:	1ad2      	subs	r2, r2, r3
   2bc18:	4491      	add	r9, r2
   2bc1a:	1acb      	subs	r3, r1, r3
   2bc1c:	9a00      	ldr	r2, [sp, #0]
   2bc1e:	0038      	movs	r0, r7
   2bc20:	444a      	add	r2, r9
   2bc22:	0511      	lsls	r1, r2, #20
   2bc24:	0d09      	lsrs	r1, r1, #20
   2bc26:	1a5b      	subs	r3, r3, r1
   2bc28:	0019      	movs	r1, r3
   2bc2a:	469b      	mov	fp, r3
   2bc2c:	f000 fd38 	bl	2c6a0 <_sbrk_r>
   2bc30:	1c43      	adds	r3, r0, #1
   2bc32:	d100      	bne.n	2bc36 <_malloc_r+0x27a>
   2bc34:	e142      	b.n	2bebc <_malloc_r+0x500>
   2bc36:	464b      	mov	r3, r9
   2bc38:	1ac0      	subs	r0, r0, r3
   2bc3a:	2301      	movs	r3, #1
   2bc3c:	4458      	add	r0, fp
   2bc3e:	4318      	orrs	r0, r3
   2bc40:	4653      	mov	r3, sl
   2bc42:	681b      	ldr	r3, [r3, #0]
   2bc44:	445b      	add	r3, fp
   2bc46:	0019      	movs	r1, r3
   2bc48:	4653      	mov	r3, sl
   2bc4a:	6019      	str	r1, [r3, #0]
   2bc4c:	464b      	mov	r3, r9
   2bc4e:	60b3      	str	r3, [r6, #8]
   2bc50:	6058      	str	r0, [r3, #4]
   2bc52:	42b4      	cmp	r4, r6
   2bc54:	d013      	beq.n	2bc7e <_malloc_r+0x2c2>
   2bc56:	4643      	mov	r3, r8
   2bc58:	2b0f      	cmp	r3, #15
   2bc5a:	d800      	bhi.n	2bc5e <_malloc_r+0x2a2>
   2bc5c:	e0e8      	b.n	2be30 <_malloc_r+0x474>
   2bc5e:	4643      	mov	r3, r8
   2bc60:	2207      	movs	r2, #7
   2bc62:	6860      	ldr	r0, [r4, #4]
   2bc64:	3b0c      	subs	r3, #12
   2bc66:	4393      	bics	r3, r2
   2bc68:	3a06      	subs	r2, #6
   2bc6a:	4002      	ands	r2, r0
   2bc6c:	2005      	movs	r0, #5
   2bc6e:	431a      	orrs	r2, r3
   2bc70:	6062      	str	r2, [r4, #4]
   2bc72:	18e2      	adds	r2, r4, r3
   2bc74:	6050      	str	r0, [r2, #4]
   2bc76:	6090      	str	r0, [r2, #8]
   2bc78:	2b0f      	cmp	r3, #15
   2bc7a:	d900      	bls.n	2bc7e <_malloc_r+0x2c2>
   2bc7c:	e122      	b.n	2bec4 <_malloc_r+0x508>
   2bc7e:	4b3c      	ldr	r3, [pc, #240]	; (2bd70 <_malloc_r+0x3b4>)
   2bc80:	681a      	ldr	r2, [r3, #0]
   2bc82:	4291      	cmp	r1, r2
   2bc84:	d900      	bls.n	2bc88 <_malloc_r+0x2cc>
   2bc86:	6019      	str	r1, [r3, #0]
   2bc88:	4b3a      	ldr	r3, [pc, #232]	; (2bd74 <_malloc_r+0x3b8>)
   2bc8a:	681a      	ldr	r2, [r3, #0]
   2bc8c:	4291      	cmp	r1, r2
   2bc8e:	d900      	bls.n	2bc92 <_malloc_r+0x2d6>
   2bc90:	6019      	str	r1, [r3, #0]
   2bc92:	2303      	movs	r3, #3
   2bc94:	68b4      	ldr	r4, [r6, #8]
   2bc96:	6862      	ldr	r2, [r4, #4]
   2bc98:	439a      	bics	r2, r3
   2bc9a:	1b53      	subs	r3, r2, r5
   2bc9c:	4295      	cmp	r5, r2
   2bc9e:	d900      	bls.n	2bca2 <_malloc_r+0x2e6>
   2bca0:	e0c9      	b.n	2be36 <_malloc_r+0x47a>
   2bca2:	2b0f      	cmp	r3, #15
   2bca4:	dc00      	bgt.n	2bca8 <_malloc_r+0x2ec>
   2bca6:	e0c6      	b.n	2be36 <_malloc_r+0x47a>
   2bca8:	2201      	movs	r2, #1
   2bcaa:	0029      	movs	r1, r5
   2bcac:	4313      	orrs	r3, r2
   2bcae:	4311      	orrs	r1, r2
   2bcb0:	1965      	adds	r5, r4, r5
   2bcb2:	6061      	str	r1, [r4, #4]
   2bcb4:	0038      	movs	r0, r7
   2bcb6:	60b5      	str	r5, [r6, #8]
   2bcb8:	606b      	str	r3, [r5, #4]
   2bcba:	f000 f9a1 	bl	2c000 <__malloc_unlock>
   2bcbe:	0020      	movs	r0, r4
   2bcc0:	3008      	adds	r0, #8
   2bcc2:	e74a      	b.n	2bb5a <_malloc_r+0x19e>
   2bcc4:	2814      	cmp	r0, #20
   2bcc6:	d97a      	bls.n	2bdbe <_malloc_r+0x402>
   2bcc8:	2854      	cmp	r0, #84	; 0x54
   2bcca:	d900      	bls.n	2bcce <_malloc_r+0x312>
   2bccc:	e0ba      	b.n	2be44 <_malloc_r+0x488>
   2bcce:	236e      	movs	r3, #110	; 0x6e
   2bcd0:	4698      	mov	r8, r3
   2bcd2:	0b28      	lsrs	r0, r5, #12
   2bcd4:	4480      	add	r8, r0
   2bcd6:	306f      	adds	r0, #111	; 0x6f
   2bcd8:	00c1      	lsls	r1, r0, #3
   2bcda:	e696      	b.n	2ba0a <_malloc_r+0x4e>
   2bcdc:	0a5a      	lsrs	r2, r3, #9
   2bcde:	2a04      	cmp	r2, #4
   2bce0:	d973      	bls.n	2bdca <_malloc_r+0x40e>
   2bce2:	2a14      	cmp	r2, #20
   2bce4:	d900      	bls.n	2bce8 <_malloc_r+0x32c>
   2bce6:	e0d0      	b.n	2be8a <_malloc_r+0x4ce>
   2bce8:	0011      	movs	r1, r2
   2bcea:	325c      	adds	r2, #92	; 0x5c
   2bcec:	315b      	adds	r1, #91	; 0x5b
   2bcee:	00d2      	lsls	r2, r2, #3
   2bcf0:	2308      	movs	r3, #8
   2bcf2:	425b      	negs	r3, r3
   2bcf4:	469c      	mov	ip, r3
   2bcf6:	18b2      	adds	r2, r6, r2
   2bcf8:	4494      	add	ip, r2
   2bcfa:	4663      	mov	r3, ip
   2bcfc:	689a      	ldr	r2, [r3, #8]
   2bcfe:	2303      	movs	r3, #3
   2bd00:	4698      	mov	r8, r3
   2bd02:	4594      	cmp	ip, r2
   2bd04:	d100      	bne.n	2bd08 <_malloc_r+0x34c>
   2bd06:	e0ab      	b.n	2be60 <_malloc_r+0x4a4>
   2bd08:	4643      	mov	r3, r8
   2bd0a:	6851      	ldr	r1, [r2, #4]
   2bd0c:	4399      	bics	r1, r3
   2bd0e:	4589      	cmp	r9, r1
   2bd10:	d300      	bcc.n	2bd14 <_malloc_r+0x358>
   2bd12:	e095      	b.n	2be40 <_malloc_r+0x484>
   2bd14:	6892      	ldr	r2, [r2, #8]
   2bd16:	4594      	cmp	ip, r2
   2bd18:	d1f6      	bne.n	2bd08 <_malloc_r+0x34c>
   2bd1a:	4663      	mov	r3, ip
   2bd1c:	68da      	ldr	r2, [r3, #12]
   2bd1e:	6873      	ldr	r3, [r6, #4]
   2bd20:	4661      	mov	r1, ip
   2bd22:	60e2      	str	r2, [r4, #12]
   2bd24:	60a1      	str	r1, [r4, #8]
   2bd26:	6094      	str	r4, [r2, #8]
   2bd28:	60cc      	str	r4, [r1, #12]
   2bd2a:	e6b6      	b.n	2ba9a <_malloc_r+0xde>
   2bd2c:	2301      	movs	r3, #1
   2bd2e:	1960      	adds	r0, r4, r5
   2bd30:	431d      	orrs	r5, r3
   2bd32:	6065      	str	r5, [r4, #4]
   2bd34:	6170      	str	r0, [r6, #20]
   2bd36:	6130      	str	r0, [r6, #16]
   2bd38:	60c2      	str	r2, [r0, #12]
   2bd3a:	6082      	str	r2, [r0, #8]
   2bd3c:	001a      	movs	r2, r3
   2bd3e:	464b      	mov	r3, r9
   2bd40:	430a      	orrs	r2, r1
   2bd42:	6042      	str	r2, [r0, #4]
   2bd44:	0038      	movs	r0, r7
   2bd46:	50e1      	str	r1, [r4, r3]
   2bd48:	f000 f95a 	bl	2c000 <__malloc_unlock>
   2bd4c:	0020      	movs	r0, r4
   2bd4e:	3008      	adds	r0, #8
   2bd50:	e703      	b.n	2bb5a <_malloc_r+0x19e>
   2bd52:	46c0      	nop			; (mov r8, r8)
   2bd54:	20000614 	.word	0x20000614
   2bd58:	000001ff 	.word	0x000001ff
   2bd5c:	20000a1c 	.word	0x20000a1c
   2bd60:	20000e24 	.word	0x20000e24
   2bd64:	0000100f 	.word	0x0000100f
   2bd68:	20000df4 	.word	0x20000df4
   2bd6c:	00001008 	.word	0x00001008
   2bd70:	20000e1c 	.word	0x20000e1c
   2bd74:	20000e20 	.word	0x20000e20
   2bd78:	6873      	ldr	r3, [r6, #4]
   2bd7a:	e68e      	b.n	2ba9a <_malloc_r+0xde>
   2bd7c:	2308      	movs	r3, #8
   2bd7e:	469b      	mov	fp, r3
   2bd80:	3b07      	subs	r3, #7
   2bd82:	44dc      	add	ip, fp
   2bd84:	469b      	mov	fp, r3
   2bd86:	44da      	add	sl, fp
   2bd88:	4643      	mov	r3, r8
   2bd8a:	4652      	mov	r2, sl
   2bd8c:	4213      	tst	r3, r2
   2bd8e:	d000      	beq.n	2bd92 <_malloc_r+0x3d6>
   2bd90:	e697      	b.n	2bac2 <_malloc_r+0x106>
   2bd92:	e037      	b.n	2be04 <_malloc_r+0x448>
   2bd94:	68dc      	ldr	r4, [r3, #12]
   2bd96:	3002      	adds	r0, #2
   2bd98:	42a3      	cmp	r3, r4
   2bd9a:	d100      	bne.n	2bd9e <_malloc_r+0x3e2>
   2bd9c:	e655      	b.n	2ba4a <_malloc_r+0x8e>
   2bd9e:	e6ca      	b.n	2bb36 <_malloc_r+0x17a>
   2bda0:	2201      	movs	r2, #1
   2bda2:	18e3      	adds	r3, r4, r3
   2bda4:	6859      	ldr	r1, [r3, #4]
   2bda6:	0038      	movs	r0, r7
   2bda8:	430a      	orrs	r2, r1
   2bdaa:	605a      	str	r2, [r3, #4]
   2bdac:	68e3      	ldr	r3, [r4, #12]
   2bdae:	68a2      	ldr	r2, [r4, #8]
   2bdb0:	60d3      	str	r3, [r2, #12]
   2bdb2:	609a      	str	r2, [r3, #8]
   2bdb4:	f000 f924 	bl	2c000 <__malloc_unlock>
   2bdb8:	0020      	movs	r0, r4
   2bdba:	3008      	adds	r0, #8
   2bdbc:	e6cd      	b.n	2bb5a <_malloc_r+0x19e>
   2bdbe:	235b      	movs	r3, #91	; 0x5b
   2bdc0:	4698      	mov	r8, r3
   2bdc2:	4480      	add	r8, r0
   2bdc4:	305c      	adds	r0, #92	; 0x5c
   2bdc6:	00c1      	lsls	r1, r0, #3
   2bdc8:	e61f      	b.n	2ba0a <_malloc_r+0x4e>
   2bdca:	099a      	lsrs	r2, r3, #6
   2bdcc:	0011      	movs	r1, r2
   2bdce:	3239      	adds	r2, #57	; 0x39
   2bdd0:	3138      	adds	r1, #56	; 0x38
   2bdd2:	00d2      	lsls	r2, r2, #3
   2bdd4:	e78c      	b.n	2bcf0 <_malloc_r+0x334>
   2bdd6:	42b4      	cmp	r4, r6
   2bdd8:	d000      	beq.n	2bddc <_malloc_r+0x420>
   2bdda:	e75a      	b.n	2bc92 <_malloc_r+0x2d6>
   2bddc:	4b4f      	ldr	r3, [pc, #316]	; (2bf1c <_malloc_r+0x560>)
   2bdde:	9a00      	ldr	r2, [sp, #0]
   2bde0:	469a      	mov	sl, r3
   2bde2:	681b      	ldr	r3, [r3, #0]
   2bde4:	469c      	mov	ip, r3
   2bde6:	4653      	mov	r3, sl
   2bde8:	4462      	add	r2, ip
   2bdea:	0011      	movs	r1, r2
   2bdec:	601a      	str	r2, [r3, #0]
   2bdee:	e6ff      	b.n	2bbf0 <_malloc_r+0x234>
   2bdf0:	2308      	movs	r3, #8
   2bdf2:	425b      	negs	r3, r3
   2bdf4:	469c      	mov	ip, r3
   2bdf6:	44e1      	add	r9, ip
   2bdf8:	464b      	mov	r3, r9
   2bdfa:	689b      	ldr	r3, [r3, #8]
   2bdfc:	3801      	subs	r0, #1
   2bdfe:	4599      	cmp	r9, r3
   2be00:	d000      	beq.n	2be04 <_malloc_r+0x448>
   2be02:	e084      	b.n	2bf0e <_malloc_r+0x552>
   2be04:	4643      	mov	r3, r8
   2be06:	4203      	tst	r3, r0
   2be08:	d1f2      	bne.n	2bdf0 <_malloc_r+0x434>
   2be0a:	6873      	ldr	r3, [r6, #4]
   2be0c:	438b      	bics	r3, r1
   2be0e:	6073      	str	r3, [r6, #4]
   2be10:	0049      	lsls	r1, r1, #1
   2be12:	4299      	cmp	r1, r3
   2be14:	d900      	bls.n	2be18 <_malloc_r+0x45c>
   2be16:	e6b5      	b.n	2bb84 <_malloc_r+0x1c8>
   2be18:	2900      	cmp	r1, #0
   2be1a:	d100      	bne.n	2be1e <_malloc_r+0x462>
   2be1c:	e6b2      	b.n	2bb84 <_malloc_r+0x1c8>
   2be1e:	4650      	mov	r0, sl
   2be20:	420b      	tst	r3, r1
   2be22:	d000      	beq.n	2be26 <_malloc_r+0x46a>
   2be24:	e648      	b.n	2bab8 <_malloc_r+0xfc>
   2be26:	0049      	lsls	r1, r1, #1
   2be28:	3004      	adds	r0, #4
   2be2a:	420b      	tst	r3, r1
   2be2c:	d0fb      	beq.n	2be26 <_malloc_r+0x46a>
   2be2e:	e643      	b.n	2bab8 <_malloc_r+0xfc>
   2be30:	2301      	movs	r3, #1
   2be32:	464a      	mov	r2, r9
   2be34:	6053      	str	r3, [r2, #4]
   2be36:	0038      	movs	r0, r7
   2be38:	f000 f8e2 	bl	2c000 <__malloc_unlock>
   2be3c:	2000      	movs	r0, #0
   2be3e:	e68c      	b.n	2bb5a <_malloc_r+0x19e>
   2be40:	4694      	mov	ip, r2
   2be42:	e76a      	b.n	2bd1a <_malloc_r+0x35e>
   2be44:	23aa      	movs	r3, #170	; 0xaa
   2be46:	005b      	lsls	r3, r3, #1
   2be48:	4298      	cmp	r0, r3
   2be4a:	d811      	bhi.n	2be70 <_malloc_r+0x4b4>
   2be4c:	3bdd      	subs	r3, #221	; 0xdd
   2be4e:	4698      	mov	r8, r3
   2be50:	0be8      	lsrs	r0, r5, #15
   2be52:	4480      	add	r8, r0
   2be54:	3078      	adds	r0, #120	; 0x78
   2be56:	00c1      	lsls	r1, r0, #3
   2be58:	e5d7      	b.n	2ba0a <_malloc_r+0x4e>
   2be5a:	2380      	movs	r3, #128	; 0x80
   2be5c:	015b      	lsls	r3, r3, #5
   2be5e:	e6dd      	b.n	2bc1c <_malloc_r+0x260>
   2be60:	1089      	asrs	r1, r1, #2
   2be62:	3b02      	subs	r3, #2
   2be64:	408b      	lsls	r3, r1
   2be66:	6872      	ldr	r2, [r6, #4]
   2be68:	4313      	orrs	r3, r2
   2be6a:	6073      	str	r3, [r6, #4]
   2be6c:	4662      	mov	r2, ip
   2be6e:	e757      	b.n	2bd20 <_malloc_r+0x364>
   2be70:	4b2b      	ldr	r3, [pc, #172]	; (2bf20 <_malloc_r+0x564>)
   2be72:	4298      	cmp	r0, r3
   2be74:	d81c      	bhi.n	2beb0 <_malloc_r+0x4f4>
   2be76:	237c      	movs	r3, #124	; 0x7c
   2be78:	4698      	mov	r8, r3
   2be7a:	0ca8      	lsrs	r0, r5, #18
   2be7c:	4480      	add	r8, r0
   2be7e:	307d      	adds	r0, #125	; 0x7d
   2be80:	00c1      	lsls	r1, r0, #3
   2be82:	e5c2      	b.n	2ba0a <_malloc_r+0x4e>
   2be84:	3310      	adds	r3, #16
   2be86:	9300      	str	r3, [sp, #0]
   2be88:	e699      	b.n	2bbbe <_malloc_r+0x202>
   2be8a:	2a54      	cmp	r2, #84	; 0x54
   2be8c:	d826      	bhi.n	2bedc <_malloc_r+0x520>
   2be8e:	464b      	mov	r3, r9
   2be90:	0b1a      	lsrs	r2, r3, #12
   2be92:	0011      	movs	r1, r2
   2be94:	326f      	adds	r2, #111	; 0x6f
   2be96:	316e      	adds	r1, #110	; 0x6e
   2be98:	00d2      	lsls	r2, r2, #3
   2be9a:	e729      	b.n	2bcf0 <_malloc_r+0x334>
   2be9c:	051b      	lsls	r3, r3, #20
   2be9e:	d000      	beq.n	2bea2 <_malloc_r+0x4e6>
   2bea0:	e6a6      	b.n	2bbf0 <_malloc_r+0x234>
   2bea2:	2001      	movs	r0, #1
   2bea4:	9b00      	ldr	r3, [sp, #0]
   2bea6:	68b2      	ldr	r2, [r6, #8]
   2bea8:	4443      	add	r3, r8
   2beaa:	4303      	orrs	r3, r0
   2beac:	6053      	str	r3, [r2, #4]
   2beae:	e6e6      	b.n	2bc7e <_malloc_r+0x2c2>
   2beb0:	21fe      	movs	r1, #254	; 0xfe
   2beb2:	237e      	movs	r3, #126	; 0x7e
   2beb4:	207f      	movs	r0, #127	; 0x7f
   2beb6:	0089      	lsls	r1, r1, #2
   2beb8:	4698      	mov	r8, r3
   2beba:	e5a6      	b.n	2ba0a <_malloc_r+0x4e>
   2bebc:	2300      	movs	r3, #0
   2bebe:	2001      	movs	r0, #1
   2bec0:	469b      	mov	fp, r3
   2bec2:	e6bd      	b.n	2bc40 <_malloc_r+0x284>
   2bec4:	0021      	movs	r1, r4
   2bec6:	0038      	movs	r0, r7
   2bec8:	3108      	adds	r1, #8
   2beca:	f000 fdef 	bl	2caac <_free_r>
   2bece:	4653      	mov	r3, sl
   2bed0:	6819      	ldr	r1, [r3, #0]
   2bed2:	e6d4      	b.n	2bc7e <_malloc_r+0x2c2>
   2bed4:	465b      	mov	r3, fp
   2bed6:	464a      	mov	r2, r9
   2bed8:	601a      	str	r2, [r3, #0]
   2beda:	e694      	b.n	2bc06 <_malloc_r+0x24a>
   2bedc:	21aa      	movs	r1, #170	; 0xaa
   2bede:	0049      	lsls	r1, r1, #1
   2bee0:	428a      	cmp	r2, r1
   2bee2:	d806      	bhi.n	2bef2 <_malloc_r+0x536>
   2bee4:	464b      	mov	r3, r9
   2bee6:	0bda      	lsrs	r2, r3, #15
   2bee8:	0011      	movs	r1, r2
   2beea:	3278      	adds	r2, #120	; 0x78
   2beec:	3177      	adds	r1, #119	; 0x77
   2beee:	00d2      	lsls	r2, r2, #3
   2bef0:	e6fe      	b.n	2bcf0 <_malloc_r+0x334>
   2bef2:	490b      	ldr	r1, [pc, #44]	; (2bf20 <_malloc_r+0x564>)
   2bef4:	428a      	cmp	r2, r1
   2bef6:	d806      	bhi.n	2bf06 <_malloc_r+0x54a>
   2bef8:	464b      	mov	r3, r9
   2befa:	0c9a      	lsrs	r2, r3, #18
   2befc:	0011      	movs	r1, r2
   2befe:	327d      	adds	r2, #125	; 0x7d
   2bf00:	317c      	adds	r1, #124	; 0x7c
   2bf02:	00d2      	lsls	r2, r2, #3
   2bf04:	e6f4      	b.n	2bcf0 <_malloc_r+0x334>
   2bf06:	22fe      	movs	r2, #254	; 0xfe
   2bf08:	217e      	movs	r1, #126	; 0x7e
   2bf0a:	0092      	lsls	r2, r2, #2
   2bf0c:	e6f0      	b.n	2bcf0 <_malloc_r+0x334>
   2bf0e:	6873      	ldr	r3, [r6, #4]
   2bf10:	e77e      	b.n	2be10 <_malloc_r+0x454>
   2bf12:	002b      	movs	r3, r5
   2bf14:	08e8      	lsrs	r0, r5, #3
   2bf16:	3308      	adds	r3, #8
   2bf18:	e605      	b.n	2bb26 <_malloc_r+0x16a>
   2bf1a:	46c0      	nop			; (mov r8, r8)
   2bf1c:	20000df4 	.word	0x20000df4
   2bf20:	00000554 	.word	0x00000554

0002bf24 <memchr>:
   2bf24:	b570      	push	{r4, r5, r6, lr}
   2bf26:	b2cd      	uxtb	r5, r1
   2bf28:	0783      	lsls	r3, r0, #30
   2bf2a:	d034      	beq.n	2bf96 <memchr+0x72>
   2bf2c:	1e54      	subs	r4, r2, #1
   2bf2e:	2a00      	cmp	r2, #0
   2bf30:	d01b      	beq.n	2bf6a <memchr+0x46>
   2bf32:	7803      	ldrb	r3, [r0, #0]
   2bf34:	42ab      	cmp	r3, r5
   2bf36:	d019      	beq.n	2bf6c <memchr+0x48>
   2bf38:	2203      	movs	r2, #3
   2bf3a:	e004      	b.n	2bf46 <memchr+0x22>
   2bf3c:	3c01      	subs	r4, #1
   2bf3e:	d314      	bcc.n	2bf6a <memchr+0x46>
   2bf40:	7803      	ldrb	r3, [r0, #0]
   2bf42:	42ab      	cmp	r3, r5
   2bf44:	d012      	beq.n	2bf6c <memchr+0x48>
   2bf46:	3001      	adds	r0, #1
   2bf48:	4210      	tst	r0, r2
   2bf4a:	d1f7      	bne.n	2bf3c <memchr+0x18>
   2bf4c:	2c03      	cmp	r4, #3
   2bf4e:	d80e      	bhi.n	2bf6e <memchr+0x4a>
   2bf50:	2c00      	cmp	r4, #0
   2bf52:	d00a      	beq.n	2bf6a <memchr+0x46>
   2bf54:	7803      	ldrb	r3, [r0, #0]
   2bf56:	42ab      	cmp	r3, r5
   2bf58:	d008      	beq.n	2bf6c <memchr+0x48>
   2bf5a:	1904      	adds	r4, r0, r4
   2bf5c:	e002      	b.n	2bf64 <memchr+0x40>
   2bf5e:	7803      	ldrb	r3, [r0, #0]
   2bf60:	42ab      	cmp	r3, r5
   2bf62:	d003      	beq.n	2bf6c <memchr+0x48>
   2bf64:	3001      	adds	r0, #1
   2bf66:	4284      	cmp	r4, r0
   2bf68:	d1f9      	bne.n	2bf5e <memchr+0x3a>
   2bf6a:	2000      	movs	r0, #0
   2bf6c:	bd70      	pop	{r4, r5, r6, pc}
   2bf6e:	22ff      	movs	r2, #255	; 0xff
   2bf70:	060b      	lsls	r3, r1, #24
   2bf72:	0c1b      	lsrs	r3, r3, #16
   2bf74:	4011      	ands	r1, r2
   2bf76:	4319      	orrs	r1, r3
   2bf78:	040b      	lsls	r3, r1, #16
   2bf7a:	4e08      	ldr	r6, [pc, #32]	; (2bf9c <memchr+0x78>)
   2bf7c:	4319      	orrs	r1, r3
   2bf7e:	6803      	ldr	r3, [r0, #0]
   2bf80:	4a07      	ldr	r2, [pc, #28]	; (2bfa0 <memchr+0x7c>)
   2bf82:	404b      	eors	r3, r1
   2bf84:	189a      	adds	r2, r3, r2
   2bf86:	439a      	bics	r2, r3
   2bf88:	4232      	tst	r2, r6
   2bf8a:	d1e3      	bne.n	2bf54 <memchr+0x30>
   2bf8c:	3c04      	subs	r4, #4
   2bf8e:	3004      	adds	r0, #4
   2bf90:	2c03      	cmp	r4, #3
   2bf92:	d8f4      	bhi.n	2bf7e <memchr+0x5a>
   2bf94:	e7dc      	b.n	2bf50 <memchr+0x2c>
   2bf96:	0014      	movs	r4, r2
   2bf98:	e7d8      	b.n	2bf4c <memchr+0x28>
   2bf9a:	46c0      	nop			; (mov r8, r8)
   2bf9c:	80808080 	.word	0x80808080
   2bfa0:	fefefeff 	.word	0xfefefeff

0002bfa4 <memcmp>:
   2bfa4:	b510      	push	{r4, lr}
   2bfa6:	2a03      	cmp	r2, #3
   2bfa8:	d91c      	bls.n	2bfe4 <memcmp+0x40>
   2bfaa:	0003      	movs	r3, r0
   2bfac:	430b      	orrs	r3, r1
   2bfae:	079b      	lsls	r3, r3, #30
   2bfb0:	d00f      	beq.n	2bfd2 <memcmp+0x2e>
   2bfb2:	7803      	ldrb	r3, [r0, #0]
   2bfb4:	780c      	ldrb	r4, [r1, #0]
   2bfb6:	1882      	adds	r2, r0, r2
   2bfb8:	42a3      	cmp	r3, r4
   2bfba:	d004      	beq.n	2bfc6 <memcmp+0x22>
   2bfbc:	e015      	b.n	2bfea <memcmp+0x46>
   2bfbe:	7803      	ldrb	r3, [r0, #0]
   2bfc0:	780c      	ldrb	r4, [r1, #0]
   2bfc2:	42a3      	cmp	r3, r4
   2bfc4:	d111      	bne.n	2bfea <memcmp+0x46>
   2bfc6:	3001      	adds	r0, #1
   2bfc8:	3101      	adds	r1, #1
   2bfca:	4282      	cmp	r2, r0
   2bfcc:	d1f7      	bne.n	2bfbe <memcmp+0x1a>
   2bfce:	2000      	movs	r0, #0
   2bfd0:	bd10      	pop	{r4, pc}
   2bfd2:	6803      	ldr	r3, [r0, #0]
   2bfd4:	680c      	ldr	r4, [r1, #0]
   2bfd6:	42a3      	cmp	r3, r4
   2bfd8:	d1eb      	bne.n	2bfb2 <memcmp+0xe>
   2bfda:	3a04      	subs	r2, #4
   2bfdc:	3004      	adds	r0, #4
   2bfde:	3104      	adds	r1, #4
   2bfe0:	2a03      	cmp	r2, #3
   2bfe2:	d8f6      	bhi.n	2bfd2 <memcmp+0x2e>
   2bfe4:	2a00      	cmp	r2, #0
   2bfe6:	d1e4      	bne.n	2bfb2 <memcmp+0xe>
   2bfe8:	e7f1      	b.n	2bfce <memcmp+0x2a>
   2bfea:	1b18      	subs	r0, r3, r4
   2bfec:	e7f0      	b.n	2bfd0 <memcmp+0x2c>
   2bfee:	46c0      	nop			; (mov r8, r8)

0002bff0 <__malloc_lock>:
   2bff0:	b510      	push	{r4, lr}
   2bff2:	4802      	ldr	r0, [pc, #8]	; (2bffc <__malloc_lock+0xc>)
   2bff4:	f7ff fcde 	bl	2b9b4 <__retarget_lock_acquire_recursive>
   2bff8:	bd10      	pop	{r4, pc}
   2bffa:	46c0      	nop			; (mov r8, r8)
   2bffc:	2000536c 	.word	0x2000536c

0002c000 <__malloc_unlock>:
   2c000:	b510      	push	{r4, lr}
   2c002:	4802      	ldr	r0, [pc, #8]	; (2c00c <__malloc_unlock+0xc>)
   2c004:	f7ff fcd8 	bl	2b9b8 <__retarget_lock_release_recursive>
   2c008:	bd10      	pop	{r4, pc}
   2c00a:	46c0      	nop			; (mov r8, r8)
   2c00c:	2000536c 	.word	0x2000536c

0002c010 <_Balloc>:
   2c010:	b570      	push	{r4, r5, r6, lr}
   2c012:	0004      	movs	r4, r0
   2c014:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   2c016:	000d      	movs	r5, r1
   2c018:	2800      	cmp	r0, #0
   2c01a:	d00a      	beq.n	2c032 <_Balloc+0x22>
   2c01c:	00ab      	lsls	r3, r5, #2
   2c01e:	18c3      	adds	r3, r0, r3
   2c020:	6818      	ldr	r0, [r3, #0]
   2c022:	2800      	cmp	r0, #0
   2c024:	d00f      	beq.n	2c046 <_Balloc+0x36>
   2c026:	6802      	ldr	r2, [r0, #0]
   2c028:	601a      	str	r2, [r3, #0]
   2c02a:	2300      	movs	r3, #0
   2c02c:	6103      	str	r3, [r0, #16]
   2c02e:	60c3      	str	r3, [r0, #12]
   2c030:	bd70      	pop	{r4, r5, r6, pc}
   2c032:	2221      	movs	r2, #33	; 0x21
   2c034:	2104      	movs	r1, #4
   2c036:	0020      	movs	r0, r4
   2c038:	f000 fcbc 	bl	2c9b4 <_calloc_r>
   2c03c:	64e0      	str	r0, [r4, #76]	; 0x4c
   2c03e:	2800      	cmp	r0, #0
   2c040:	d1ec      	bne.n	2c01c <_Balloc+0xc>
   2c042:	2000      	movs	r0, #0
   2c044:	e7f4      	b.n	2c030 <_Balloc+0x20>
   2c046:	2601      	movs	r6, #1
   2c048:	40ae      	lsls	r6, r5
   2c04a:	1d72      	adds	r2, r6, #5
   2c04c:	0092      	lsls	r2, r2, #2
   2c04e:	2101      	movs	r1, #1
   2c050:	0020      	movs	r0, r4
   2c052:	f000 fcaf 	bl	2c9b4 <_calloc_r>
   2c056:	2800      	cmp	r0, #0
   2c058:	d0f3      	beq.n	2c042 <_Balloc+0x32>
   2c05a:	6045      	str	r5, [r0, #4]
   2c05c:	6086      	str	r6, [r0, #8]
   2c05e:	e7e4      	b.n	2c02a <_Balloc+0x1a>

0002c060 <_Bfree>:
   2c060:	2900      	cmp	r1, #0
   2c062:	d006      	beq.n	2c072 <_Bfree+0x12>
   2c064:	684b      	ldr	r3, [r1, #4]
   2c066:	009a      	lsls	r2, r3, #2
   2c068:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2c06a:	189b      	adds	r3, r3, r2
   2c06c:	681a      	ldr	r2, [r3, #0]
   2c06e:	600a      	str	r2, [r1, #0]
   2c070:	6019      	str	r1, [r3, #0]
   2c072:	4770      	bx	lr

0002c074 <__multadd>:
   2c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c076:	46ce      	mov	lr, r9
   2c078:	4647      	mov	r7, r8
   2c07a:	4681      	mov	r9, r0
   2c07c:	0008      	movs	r0, r1
   2c07e:	b580      	push	{r7, lr}
   2c080:	000d      	movs	r5, r1
   2c082:	690c      	ldr	r4, [r1, #16]
   2c084:	001f      	movs	r7, r3
   2c086:	2100      	movs	r1, #0
   2c088:	3014      	adds	r0, #20
   2c08a:	6803      	ldr	r3, [r0, #0]
   2c08c:	3101      	adds	r1, #1
   2c08e:	041e      	lsls	r6, r3, #16
   2c090:	0c36      	lsrs	r6, r6, #16
   2c092:	4356      	muls	r6, r2
   2c094:	0c1b      	lsrs	r3, r3, #16
   2c096:	4353      	muls	r3, r2
   2c098:	19f6      	adds	r6, r6, r7
   2c09a:	0c37      	lsrs	r7, r6, #16
   2c09c:	19db      	adds	r3, r3, r7
   2c09e:	0436      	lsls	r6, r6, #16
   2c0a0:	0c1f      	lsrs	r7, r3, #16
   2c0a2:	0c36      	lsrs	r6, r6, #16
   2c0a4:	041b      	lsls	r3, r3, #16
   2c0a6:	199b      	adds	r3, r3, r6
   2c0a8:	c008      	stmia	r0!, {r3}
   2c0aa:	428c      	cmp	r4, r1
   2c0ac:	dced      	bgt.n	2c08a <__multadd+0x16>
   2c0ae:	2f00      	cmp	r7, #0
   2c0b0:	d008      	beq.n	2c0c4 <__multadd+0x50>
   2c0b2:	68ab      	ldr	r3, [r5, #8]
   2c0b4:	429c      	cmp	r4, r3
   2c0b6:	da0a      	bge.n	2c0ce <__multadd+0x5a>
   2c0b8:	1d23      	adds	r3, r4, #4
   2c0ba:	009b      	lsls	r3, r3, #2
   2c0bc:	18eb      	adds	r3, r5, r3
   2c0be:	3401      	adds	r4, #1
   2c0c0:	605f      	str	r7, [r3, #4]
   2c0c2:	612c      	str	r4, [r5, #16]
   2c0c4:	0028      	movs	r0, r5
   2c0c6:	bc0c      	pop	{r2, r3}
   2c0c8:	4690      	mov	r8, r2
   2c0ca:	4699      	mov	r9, r3
   2c0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c0ce:	686b      	ldr	r3, [r5, #4]
   2c0d0:	4648      	mov	r0, r9
   2c0d2:	1c59      	adds	r1, r3, #1
   2c0d4:	f7ff ff9c 	bl	2c010 <_Balloc>
   2c0d8:	0029      	movs	r1, r5
   2c0da:	692b      	ldr	r3, [r5, #16]
   2c0dc:	4680      	mov	r8, r0
   2c0de:	1c9a      	adds	r2, r3, #2
   2c0e0:	0092      	lsls	r2, r2, #2
   2c0e2:	310c      	adds	r1, #12
   2c0e4:	300c      	adds	r0, #12
   2c0e6:	f7fc fc57 	bl	28998 <memcpy>
   2c0ea:	686b      	ldr	r3, [r5, #4]
   2c0ec:	009a      	lsls	r2, r3, #2
   2c0ee:	464b      	mov	r3, r9
   2c0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2c0f2:	189b      	adds	r3, r3, r2
   2c0f4:	681a      	ldr	r2, [r3, #0]
   2c0f6:	602a      	str	r2, [r5, #0]
   2c0f8:	601d      	str	r5, [r3, #0]
   2c0fa:	4645      	mov	r5, r8
   2c0fc:	e7dc      	b.n	2c0b8 <__multadd+0x44>
   2c0fe:	46c0      	nop			; (mov r8, r8)

0002c100 <__hi0bits>:
   2c100:	0003      	movs	r3, r0
   2c102:	0c02      	lsrs	r2, r0, #16
   2c104:	2000      	movs	r0, #0
   2c106:	2a00      	cmp	r2, #0
   2c108:	d101      	bne.n	2c10e <__hi0bits+0xe>
   2c10a:	041b      	lsls	r3, r3, #16
   2c10c:	3010      	adds	r0, #16
   2c10e:	0e1a      	lsrs	r2, r3, #24
   2c110:	d101      	bne.n	2c116 <__hi0bits+0x16>
   2c112:	3008      	adds	r0, #8
   2c114:	021b      	lsls	r3, r3, #8
   2c116:	0f1a      	lsrs	r2, r3, #28
   2c118:	d101      	bne.n	2c11e <__hi0bits+0x1e>
   2c11a:	3004      	adds	r0, #4
   2c11c:	011b      	lsls	r3, r3, #4
   2c11e:	0f9a      	lsrs	r2, r3, #30
   2c120:	d101      	bne.n	2c126 <__hi0bits+0x26>
   2c122:	3002      	adds	r0, #2
   2c124:	009b      	lsls	r3, r3, #2
   2c126:	2b00      	cmp	r3, #0
   2c128:	db03      	blt.n	2c132 <__hi0bits+0x32>
   2c12a:	3001      	adds	r0, #1
   2c12c:	005b      	lsls	r3, r3, #1
   2c12e:	d400      	bmi.n	2c132 <__hi0bits+0x32>
   2c130:	2020      	movs	r0, #32
   2c132:	4770      	bx	lr

0002c134 <__lo0bits>:
   2c134:	6803      	ldr	r3, [r0, #0]
   2c136:	075a      	lsls	r2, r3, #29
   2c138:	d009      	beq.n	2c14e <__lo0bits+0x1a>
   2c13a:	2200      	movs	r2, #0
   2c13c:	07d9      	lsls	r1, r3, #31
   2c13e:	d404      	bmi.n	2c14a <__lo0bits+0x16>
   2c140:	079a      	lsls	r2, r3, #30
   2c142:	d420      	bmi.n	2c186 <__lo0bits+0x52>
   2c144:	2202      	movs	r2, #2
   2c146:	089b      	lsrs	r3, r3, #2
   2c148:	6003      	str	r3, [r0, #0]
   2c14a:	0010      	movs	r0, r2
   2c14c:	4770      	bx	lr
   2c14e:	0419      	lsls	r1, r3, #16
   2c150:	2200      	movs	r2, #0
   2c152:	2900      	cmp	r1, #0
   2c154:	d101      	bne.n	2c15a <__lo0bits+0x26>
   2c156:	0c1b      	lsrs	r3, r3, #16
   2c158:	3210      	adds	r2, #16
   2c15a:	21ff      	movs	r1, #255	; 0xff
   2c15c:	4219      	tst	r1, r3
   2c15e:	d101      	bne.n	2c164 <__lo0bits+0x30>
   2c160:	3208      	adds	r2, #8
   2c162:	0a1b      	lsrs	r3, r3, #8
   2c164:	0719      	lsls	r1, r3, #28
   2c166:	d101      	bne.n	2c16c <__lo0bits+0x38>
   2c168:	3204      	adds	r2, #4
   2c16a:	091b      	lsrs	r3, r3, #4
   2c16c:	0799      	lsls	r1, r3, #30
   2c16e:	d101      	bne.n	2c174 <__lo0bits+0x40>
   2c170:	3202      	adds	r2, #2
   2c172:	089b      	lsrs	r3, r3, #2
   2c174:	07d9      	lsls	r1, r3, #31
   2c176:	d404      	bmi.n	2c182 <__lo0bits+0x4e>
   2c178:	085b      	lsrs	r3, r3, #1
   2c17a:	d101      	bne.n	2c180 <__lo0bits+0x4c>
   2c17c:	2220      	movs	r2, #32
   2c17e:	e7e4      	b.n	2c14a <__lo0bits+0x16>
   2c180:	3201      	adds	r2, #1
   2c182:	6003      	str	r3, [r0, #0]
   2c184:	e7e1      	b.n	2c14a <__lo0bits+0x16>
   2c186:	085b      	lsrs	r3, r3, #1
   2c188:	6003      	str	r3, [r0, #0]
   2c18a:	2201      	movs	r2, #1
   2c18c:	e7dd      	b.n	2c14a <__lo0bits+0x16>
   2c18e:	46c0      	nop			; (mov r8, r8)

0002c190 <__i2b>:
   2c190:	b510      	push	{r4, lr}
   2c192:	000c      	movs	r4, r1
   2c194:	2101      	movs	r1, #1
   2c196:	f7ff ff3b 	bl	2c010 <_Balloc>
   2c19a:	2301      	movs	r3, #1
   2c19c:	6144      	str	r4, [r0, #20]
   2c19e:	6103      	str	r3, [r0, #16]
   2c1a0:	bd10      	pop	{r4, pc}
   2c1a2:	46c0      	nop			; (mov r8, r8)

0002c1a4 <__multiply>:
   2c1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c1a6:	4657      	mov	r7, sl
   2c1a8:	464e      	mov	r6, r9
   2c1aa:	4645      	mov	r5, r8
   2c1ac:	46de      	mov	lr, fp
   2c1ae:	b5e0      	push	{r5, r6, r7, lr}
   2c1b0:	6914      	ldr	r4, [r2, #16]
   2c1b2:	690e      	ldr	r6, [r1, #16]
   2c1b4:	b085      	sub	sp, #20
   2c1b6:	000f      	movs	r7, r1
   2c1b8:	0015      	movs	r5, r2
   2c1ba:	42a6      	cmp	r6, r4
   2c1bc:	da04      	bge.n	2c1c8 <__multiply+0x24>
   2c1be:	0033      	movs	r3, r6
   2c1c0:	0017      	movs	r7, r2
   2c1c2:	0026      	movs	r6, r4
   2c1c4:	000d      	movs	r5, r1
   2c1c6:	001c      	movs	r4, r3
   2c1c8:	1933      	adds	r3, r6, r4
   2c1ca:	4698      	mov	r8, r3
   2c1cc:	68bb      	ldr	r3, [r7, #8]
   2c1ce:	6879      	ldr	r1, [r7, #4]
   2c1d0:	4598      	cmp	r8, r3
   2c1d2:	dd00      	ble.n	2c1d6 <__multiply+0x32>
   2c1d4:	3101      	adds	r1, #1
   2c1d6:	f7ff ff1b 	bl	2c010 <_Balloc>
   2c1da:	2214      	movs	r2, #20
   2c1dc:	0003      	movs	r3, r0
   2c1de:	4694      	mov	ip, r2
   2c1e0:	4463      	add	r3, ip
   2c1e2:	469b      	mov	fp, r3
   2c1e4:	4643      	mov	r3, r8
   2c1e6:	009b      	lsls	r3, r3, #2
   2c1e8:	445b      	add	r3, fp
   2c1ea:	0019      	movs	r1, r3
   2c1ec:	9302      	str	r3, [sp, #8]
   2c1ee:	9003      	str	r0, [sp, #12]
   2c1f0:	465b      	mov	r3, fp
   2c1f2:	2200      	movs	r2, #0
   2c1f4:	458b      	cmp	fp, r1
   2c1f6:	d203      	bcs.n	2c200 <__multiply+0x5c>
   2c1f8:	9902      	ldr	r1, [sp, #8]
   2c1fa:	c304      	stmia	r3!, {r2}
   2c1fc:	4299      	cmp	r1, r3
   2c1fe:	d8fc      	bhi.n	2c1fa <__multiply+0x56>
   2c200:	2314      	movs	r3, #20
   2c202:	00a4      	lsls	r4, r4, #2
   2c204:	469a      	mov	sl, r3
   2c206:	3714      	adds	r7, #20
   2c208:	0023      	movs	r3, r4
   2c20a:	46bc      	mov	ip, r7
   2c20c:	44aa      	add	sl, r5
   2c20e:	00b6      	lsls	r6, r6, #2
   2c210:	4453      	add	r3, sl
   2c212:	9700      	str	r7, [sp, #0]
   2c214:	44b4      	add	ip, r6
   2c216:	9301      	str	r3, [sp, #4]
   2c218:	459a      	cmp	sl, r3
   2c21a:	d24f      	bcs.n	2c2bc <__multiply+0x118>
   2c21c:	4653      	mov	r3, sl
   2c21e:	681b      	ldr	r3, [r3, #0]
   2c220:	041e      	lsls	r6, r3, #16
   2c222:	0c36      	lsrs	r6, r6, #16
   2c224:	d020      	beq.n	2c268 <__multiply+0xc4>
   2c226:	465c      	mov	r4, fp
   2c228:	2700      	movs	r7, #0
   2c22a:	9d00      	ldr	r5, [sp, #0]
   2c22c:	0021      	movs	r1, r4
   2c22e:	cc08      	ldmia	r4!, {r3}
   2c230:	cd04      	ldmia	r5!, {r2}
   2c232:	4699      	mov	r9, r3
   2c234:	4648      	mov	r0, r9
   2c236:	0413      	lsls	r3, r2, #16
   2c238:	0c1b      	lsrs	r3, r3, #16
   2c23a:	4373      	muls	r3, r6
   2c23c:	0400      	lsls	r0, r0, #16
   2c23e:	0c00      	lsrs	r0, r0, #16
   2c240:	181b      	adds	r3, r3, r0
   2c242:	19d8      	adds	r0, r3, r7
   2c244:	0c13      	lsrs	r3, r2, #16
   2c246:	464a      	mov	r2, r9
   2c248:	4373      	muls	r3, r6
   2c24a:	0c12      	lsrs	r2, r2, #16
   2c24c:	189b      	adds	r3, r3, r2
   2c24e:	0c02      	lsrs	r2, r0, #16
   2c250:	189b      	adds	r3, r3, r2
   2c252:	0402      	lsls	r2, r0, #16
   2c254:	0c1f      	lsrs	r7, r3, #16
   2c256:	0c12      	lsrs	r2, r2, #16
   2c258:	041b      	lsls	r3, r3, #16
   2c25a:	4313      	orrs	r3, r2
   2c25c:	600b      	str	r3, [r1, #0]
   2c25e:	45ac      	cmp	ip, r5
   2c260:	d8e4      	bhi.n	2c22c <__multiply+0x88>
   2c262:	4653      	mov	r3, sl
   2c264:	6027      	str	r7, [r4, #0]
   2c266:	681b      	ldr	r3, [r3, #0]
   2c268:	0c1e      	lsrs	r6, r3, #16
   2c26a:	d020      	beq.n	2c2ae <__multiply+0x10a>
   2c26c:	465b      	mov	r3, fp
   2c26e:	2100      	movs	r1, #0
   2c270:	681b      	ldr	r3, [r3, #0]
   2c272:	465c      	mov	r4, fp
   2c274:	0018      	movs	r0, r3
   2c276:	000f      	movs	r7, r1
   2c278:	4662      	mov	r2, ip
   2c27a:	9d00      	ldr	r5, [sp, #0]
   2c27c:	8829      	ldrh	r1, [r5, #0]
   2c27e:	0c00      	lsrs	r0, r0, #16
   2c280:	4371      	muls	r1, r6
   2c282:	1809      	adds	r1, r1, r0
   2c284:	19c9      	adds	r1, r1, r7
   2c286:	041b      	lsls	r3, r3, #16
   2c288:	0408      	lsls	r0, r1, #16
   2c28a:	0c1b      	lsrs	r3, r3, #16
   2c28c:	4303      	orrs	r3, r0
   2c28e:	6023      	str	r3, [r4, #0]
   2c290:	cd08      	ldmia	r5!, {r3}
   2c292:	6860      	ldr	r0, [r4, #4]
   2c294:	0c1b      	lsrs	r3, r3, #16
   2c296:	4373      	muls	r3, r6
   2c298:	0407      	lsls	r7, r0, #16
   2c29a:	0c3f      	lsrs	r7, r7, #16
   2c29c:	19db      	adds	r3, r3, r7
   2c29e:	0c09      	lsrs	r1, r1, #16
   2c2a0:	185b      	adds	r3, r3, r1
   2c2a2:	0c1f      	lsrs	r7, r3, #16
   2c2a4:	3404      	adds	r4, #4
   2c2a6:	42aa      	cmp	r2, r5
   2c2a8:	d8e8      	bhi.n	2c27c <__multiply+0xd8>
   2c2aa:	4694      	mov	ip, r2
   2c2ac:	6023      	str	r3, [r4, #0]
   2c2ae:	2304      	movs	r3, #4
   2c2b0:	4699      	mov	r9, r3
   2c2b2:	9b01      	ldr	r3, [sp, #4]
   2c2b4:	44ca      	add	sl, r9
   2c2b6:	44cb      	add	fp, r9
   2c2b8:	4553      	cmp	r3, sl
   2c2ba:	d8af      	bhi.n	2c21c <__multiply+0x78>
   2c2bc:	4643      	mov	r3, r8
   2c2be:	2b00      	cmp	r3, #0
   2c2c0:	dd0e      	ble.n	2c2e0 <__multiply+0x13c>
   2c2c2:	9b02      	ldr	r3, [sp, #8]
   2c2c4:	3b04      	subs	r3, #4
   2c2c6:	681a      	ldr	r2, [r3, #0]
   2c2c8:	2a00      	cmp	r2, #0
   2c2ca:	d109      	bne.n	2c2e0 <__multiply+0x13c>
   2c2cc:	4642      	mov	r2, r8
   2c2ce:	e003      	b.n	2c2d8 <__multiply+0x134>
   2c2d0:	3b04      	subs	r3, #4
   2c2d2:	6819      	ldr	r1, [r3, #0]
   2c2d4:	2900      	cmp	r1, #0
   2c2d6:	d102      	bne.n	2c2de <__multiply+0x13a>
   2c2d8:	3a01      	subs	r2, #1
   2c2da:	2a00      	cmp	r2, #0
   2c2dc:	d1f8      	bne.n	2c2d0 <__multiply+0x12c>
   2c2de:	4690      	mov	r8, r2
   2c2e0:	9b03      	ldr	r3, [sp, #12]
   2c2e2:	4642      	mov	r2, r8
   2c2e4:	0018      	movs	r0, r3
   2c2e6:	611a      	str	r2, [r3, #16]
   2c2e8:	b005      	add	sp, #20
   2c2ea:	bc3c      	pop	{r2, r3, r4, r5}
   2c2ec:	4690      	mov	r8, r2
   2c2ee:	4699      	mov	r9, r3
   2c2f0:	46a2      	mov	sl, r4
   2c2f2:	46ab      	mov	fp, r5
   2c2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c2f6:	46c0      	nop			; (mov r8, r8)

0002c2f8 <__pow5mult>:
   2c2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c2fa:	4647      	mov	r7, r8
   2c2fc:	46ce      	mov	lr, r9
   2c2fe:	2303      	movs	r3, #3
   2c300:	b580      	push	{r7, lr}
   2c302:	4680      	mov	r8, r0
   2c304:	000f      	movs	r7, r1
   2c306:	0014      	movs	r4, r2
   2c308:	4013      	ands	r3, r2
   2c30a:	d13a      	bne.n	2c382 <__pow5mult+0x8a>
   2c30c:	10a4      	asrs	r4, r4, #2
   2c30e:	003e      	movs	r6, r7
   2c310:	2c00      	cmp	r4, #0
   2c312:	d025      	beq.n	2c360 <__pow5mult+0x68>
   2c314:	4643      	mov	r3, r8
   2c316:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   2c318:	2d00      	cmp	r5, #0
   2c31a:	d03b      	beq.n	2c394 <__pow5mult+0x9c>
   2c31c:	003e      	movs	r6, r7
   2c31e:	2300      	movs	r3, #0
   2c320:	2701      	movs	r7, #1
   2c322:	4699      	mov	r9, r3
   2c324:	4227      	tst	r7, r4
   2c326:	d107      	bne.n	2c338 <__pow5mult+0x40>
   2c328:	1064      	asrs	r4, r4, #1
   2c32a:	d019      	beq.n	2c360 <__pow5mult+0x68>
   2c32c:	6828      	ldr	r0, [r5, #0]
   2c32e:	2800      	cmp	r0, #0
   2c330:	d01b      	beq.n	2c36a <__pow5mult+0x72>
   2c332:	0005      	movs	r5, r0
   2c334:	4227      	tst	r7, r4
   2c336:	d0f7      	beq.n	2c328 <__pow5mult+0x30>
   2c338:	002a      	movs	r2, r5
   2c33a:	0031      	movs	r1, r6
   2c33c:	4640      	mov	r0, r8
   2c33e:	f7ff ff31 	bl	2c1a4 <__multiply>
   2c342:	2e00      	cmp	r6, #0
   2c344:	d01b      	beq.n	2c37e <__pow5mult+0x86>
   2c346:	4642      	mov	r2, r8
   2c348:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   2c34a:	6873      	ldr	r3, [r6, #4]
   2c34c:	4694      	mov	ip, r2
   2c34e:	009b      	lsls	r3, r3, #2
   2c350:	4463      	add	r3, ip
   2c352:	681a      	ldr	r2, [r3, #0]
   2c354:	1064      	asrs	r4, r4, #1
   2c356:	6032      	str	r2, [r6, #0]
   2c358:	601e      	str	r6, [r3, #0]
   2c35a:	0006      	movs	r6, r0
   2c35c:	2c00      	cmp	r4, #0
   2c35e:	d1e5      	bne.n	2c32c <__pow5mult+0x34>
   2c360:	0030      	movs	r0, r6
   2c362:	bc0c      	pop	{r2, r3}
   2c364:	4690      	mov	r8, r2
   2c366:	4699      	mov	r9, r3
   2c368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c36a:	002a      	movs	r2, r5
   2c36c:	0029      	movs	r1, r5
   2c36e:	4640      	mov	r0, r8
   2c370:	f7ff ff18 	bl	2c1a4 <__multiply>
   2c374:	464b      	mov	r3, r9
   2c376:	6028      	str	r0, [r5, #0]
   2c378:	6003      	str	r3, [r0, #0]
   2c37a:	0005      	movs	r5, r0
   2c37c:	e7da      	b.n	2c334 <__pow5mult+0x3c>
   2c37e:	0006      	movs	r6, r0
   2c380:	e7d2      	b.n	2c328 <__pow5mult+0x30>
   2c382:	4a0b      	ldr	r2, [pc, #44]	; (2c3b0 <__pow5mult+0xb8>)
   2c384:	3b01      	subs	r3, #1
   2c386:	009b      	lsls	r3, r3, #2
   2c388:	589a      	ldr	r2, [r3, r2]
   2c38a:	2300      	movs	r3, #0
   2c38c:	f7ff fe72 	bl	2c074 <__multadd>
   2c390:	0007      	movs	r7, r0
   2c392:	e7bb      	b.n	2c30c <__pow5mult+0x14>
   2c394:	2101      	movs	r1, #1
   2c396:	4640      	mov	r0, r8
   2c398:	f7ff fe3a 	bl	2c010 <_Balloc>
   2c39c:	4b05      	ldr	r3, [pc, #20]	; (2c3b4 <__pow5mult+0xbc>)
   2c39e:	0005      	movs	r5, r0
   2c3a0:	6143      	str	r3, [r0, #20]
   2c3a2:	2301      	movs	r3, #1
   2c3a4:	6103      	str	r3, [r0, #16]
   2c3a6:	4643      	mov	r3, r8
   2c3a8:	6498      	str	r0, [r3, #72]	; 0x48
   2c3aa:	2300      	movs	r3, #0
   2c3ac:	6003      	str	r3, [r0, #0]
   2c3ae:	e7b5      	b.n	2c31c <__pow5mult+0x24>
   2c3b0:	0002fe28 	.word	0x0002fe28
   2c3b4:	00000271 	.word	0x00000271

0002c3b8 <__lshift>:
   2c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c3ba:	464e      	mov	r6, r9
   2c3bc:	4645      	mov	r5, r8
   2c3be:	46de      	mov	lr, fp
   2c3c0:	4657      	mov	r7, sl
   2c3c2:	b5e0      	push	{r5, r6, r7, lr}
   2c3c4:	000e      	movs	r6, r1
   2c3c6:	6933      	ldr	r3, [r6, #16]
   2c3c8:	1154      	asrs	r4, r2, #5
   2c3ca:	4698      	mov	r8, r3
   2c3cc:	44a0      	add	r8, r4
   2c3ce:	4643      	mov	r3, r8
   2c3d0:	1c5d      	adds	r5, r3, #1
   2c3d2:	68b3      	ldr	r3, [r6, #8]
   2c3d4:	4683      	mov	fp, r0
   2c3d6:	4691      	mov	r9, r2
   2c3d8:	6849      	ldr	r1, [r1, #4]
   2c3da:	429d      	cmp	r5, r3
   2c3dc:	dd03      	ble.n	2c3e6 <__lshift+0x2e>
   2c3de:	3101      	adds	r1, #1
   2c3e0:	005b      	lsls	r3, r3, #1
   2c3e2:	429d      	cmp	r5, r3
   2c3e4:	dcfb      	bgt.n	2c3de <__lshift+0x26>
   2c3e6:	4658      	mov	r0, fp
   2c3e8:	f7ff fe12 	bl	2c010 <_Balloc>
   2c3ec:	0003      	movs	r3, r0
   2c3ee:	4684      	mov	ip, r0
   2c3f0:	3314      	adds	r3, #20
   2c3f2:	2c00      	cmp	r4, #0
   2c3f4:	dd06      	ble.n	2c404 <__lshift+0x4c>
   2c3f6:	2100      	movs	r1, #0
   2c3f8:	00a4      	lsls	r4, r4, #2
   2c3fa:	001a      	movs	r2, r3
   2c3fc:	191b      	adds	r3, r3, r4
   2c3fe:	c202      	stmia	r2!, {r1}
   2c400:	4293      	cmp	r3, r2
   2c402:	d1fc      	bne.n	2c3fe <__lshift+0x46>
   2c404:	6932      	ldr	r2, [r6, #16]
   2c406:	4648      	mov	r0, r9
   2c408:	0097      	lsls	r7, r2, #2
   2c40a:	0031      	movs	r1, r6
   2c40c:	221f      	movs	r2, #31
   2c40e:	3114      	adds	r1, #20
   2c410:	4010      	ands	r0, r2
   2c412:	19cf      	adds	r7, r1, r7
   2c414:	4681      	mov	r9, r0
   2c416:	2800      	cmp	r0, #0
   2c418:	d025      	beq.n	2c466 <__lshift+0xae>
   2c41a:	2220      	movs	r2, #32
   2c41c:	1a12      	subs	r2, r2, r0
   2c41e:	4692      	mov	sl, r2
   2c420:	2200      	movs	r2, #0
   2c422:	4648      	mov	r0, r9
   2c424:	680c      	ldr	r4, [r1, #0]
   2c426:	4084      	lsls	r4, r0
   2c428:	4650      	mov	r0, sl
   2c42a:	4314      	orrs	r4, r2
   2c42c:	601c      	str	r4, [r3, #0]
   2c42e:	c904      	ldmia	r1!, {r2}
   2c430:	3304      	adds	r3, #4
   2c432:	40c2      	lsrs	r2, r0
   2c434:	428f      	cmp	r7, r1
   2c436:	d8f4      	bhi.n	2c422 <__lshift+0x6a>
   2c438:	601a      	str	r2, [r3, #0]
   2c43a:	2a00      	cmp	r2, #0
   2c43c:	d001      	beq.n	2c442 <__lshift+0x8a>
   2c43e:	4645      	mov	r5, r8
   2c440:	3502      	adds	r5, #2
   2c442:	4663      	mov	r3, ip
   2c444:	3d01      	subs	r5, #1
   2c446:	611d      	str	r5, [r3, #16]
   2c448:	6873      	ldr	r3, [r6, #4]
   2c44a:	4660      	mov	r0, ip
   2c44c:	009a      	lsls	r2, r3, #2
   2c44e:	465b      	mov	r3, fp
   2c450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2c452:	189b      	adds	r3, r3, r2
   2c454:	681a      	ldr	r2, [r3, #0]
   2c456:	6032      	str	r2, [r6, #0]
   2c458:	601e      	str	r6, [r3, #0]
   2c45a:	bc3c      	pop	{r2, r3, r4, r5}
   2c45c:	4690      	mov	r8, r2
   2c45e:	4699      	mov	r9, r3
   2c460:	46a2      	mov	sl, r4
   2c462:	46ab      	mov	fp, r5
   2c464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c466:	c904      	ldmia	r1!, {r2}
   2c468:	c304      	stmia	r3!, {r2}
   2c46a:	428f      	cmp	r7, r1
   2c46c:	d9e9      	bls.n	2c442 <__lshift+0x8a>
   2c46e:	c904      	ldmia	r1!, {r2}
   2c470:	c304      	stmia	r3!, {r2}
   2c472:	428f      	cmp	r7, r1
   2c474:	d8f7      	bhi.n	2c466 <__lshift+0xae>
   2c476:	e7e4      	b.n	2c442 <__lshift+0x8a>

0002c478 <__mcmp>:
   2c478:	690a      	ldr	r2, [r1, #16]
   2c47a:	6903      	ldr	r3, [r0, #16]
   2c47c:	b530      	push	{r4, r5, lr}
   2c47e:	0005      	movs	r5, r0
   2c480:	1a98      	subs	r0, r3, r2
   2c482:	d111      	bne.n	2c4a8 <__mcmp+0x30>
   2c484:	0092      	lsls	r2, r2, #2
   2c486:	3514      	adds	r5, #20
   2c488:	3114      	adds	r1, #20
   2c48a:	18ab      	adds	r3, r5, r2
   2c48c:	1889      	adds	r1, r1, r2
   2c48e:	e001      	b.n	2c494 <__mcmp+0x1c>
   2c490:	429d      	cmp	r5, r3
   2c492:	d209      	bcs.n	2c4a8 <__mcmp+0x30>
   2c494:	3b04      	subs	r3, #4
   2c496:	3904      	subs	r1, #4
   2c498:	681c      	ldr	r4, [r3, #0]
   2c49a:	680a      	ldr	r2, [r1, #0]
   2c49c:	4294      	cmp	r4, r2
   2c49e:	d0f7      	beq.n	2c490 <__mcmp+0x18>
   2c4a0:	4294      	cmp	r4, r2
   2c4a2:	4180      	sbcs	r0, r0
   2c4a4:	2201      	movs	r2, #1
   2c4a6:	4310      	orrs	r0, r2
   2c4a8:	bd30      	pop	{r4, r5, pc}
   2c4aa:	46c0      	nop			; (mov r8, r8)

0002c4ac <__mdiff>:
   2c4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c4ae:	4645      	mov	r5, r8
   2c4b0:	46de      	mov	lr, fp
   2c4b2:	4657      	mov	r7, sl
   2c4b4:	464e      	mov	r6, r9
   2c4b6:	0014      	movs	r4, r2
   2c4b8:	690b      	ldr	r3, [r1, #16]
   2c4ba:	6912      	ldr	r2, [r2, #16]
   2c4bc:	b5e0      	push	{r5, r6, r7, lr}
   2c4be:	4688      	mov	r8, r1
   2c4c0:	1a9d      	subs	r5, r3, r2
   2c4c2:	d11a      	bne.n	2c4fa <__mdiff+0x4e>
   2c4c4:	000f      	movs	r7, r1
   2c4c6:	2114      	movs	r1, #20
   2c4c8:	468c      	mov	ip, r1
   2c4ca:	0092      	lsls	r2, r2, #2
   2c4cc:	3714      	adds	r7, #20
   2c4ce:	44a4      	add	ip, r4
   2c4d0:	18bb      	adds	r3, r7, r2
   2c4d2:	4462      	add	r2, ip
   2c4d4:	e002      	b.n	2c4dc <__mdiff+0x30>
   2c4d6:	429f      	cmp	r7, r3
   2c4d8:	d300      	bcc.n	2c4dc <__mdiff+0x30>
   2c4da:	e070      	b.n	2c5be <__mdiff+0x112>
   2c4dc:	3b04      	subs	r3, #4
   2c4de:	3a04      	subs	r2, #4
   2c4e0:	681e      	ldr	r6, [r3, #0]
   2c4e2:	6811      	ldr	r1, [r2, #0]
   2c4e4:	428e      	cmp	r6, r1
   2c4e6:	d0f6      	beq.n	2c4d6 <__mdiff+0x2a>
   2c4e8:	d300      	bcc.n	2c4ec <__mdiff+0x40>
   2c4ea:	e071      	b.n	2c5d0 <__mdiff+0x124>
   2c4ec:	4643      	mov	r3, r8
   2c4ee:	003e      	movs	r6, r7
   2c4f0:	46a0      	mov	r8, r4
   2c4f2:	4667      	mov	r7, ip
   2c4f4:	001c      	movs	r4, r3
   2c4f6:	2501      	movs	r5, #1
   2c4f8:	e006      	b.n	2c508 <__mdiff+0x5c>
   2c4fa:	2d00      	cmp	r5, #0
   2c4fc:	db6a      	blt.n	2c5d4 <__mdiff+0x128>
   2c4fe:	4647      	mov	r7, r8
   2c500:	0026      	movs	r6, r4
   2c502:	2500      	movs	r5, #0
   2c504:	3714      	adds	r7, #20
   2c506:	3614      	adds	r6, #20
   2c508:	4643      	mov	r3, r8
   2c50a:	6859      	ldr	r1, [r3, #4]
   2c50c:	f7ff fd80 	bl	2c010 <_Balloc>
   2c510:	4643      	mov	r3, r8
   2c512:	4681      	mov	r9, r0
   2c514:	60c5      	str	r5, [r0, #12]
   2c516:	6918      	ldr	r0, [r3, #16]
   2c518:	464d      	mov	r5, r9
   2c51a:	0083      	lsls	r3, r0, #2
   2c51c:	469c      	mov	ip, r3
   2c51e:	6923      	ldr	r3, [r4, #16]
   2c520:	44bc      	add	ip, r7
   2c522:	009b      	lsls	r3, r3, #2
   2c524:	4698      	mov	r8, r3
   2c526:	2300      	movs	r3, #0
   2c528:	44b0      	add	r8, r6
   2c52a:	3514      	adds	r5, #20
   2c52c:	469a      	mov	sl, r3
   2c52e:	e000      	b.n	2c532 <__mdiff+0x86>
   2c530:	0027      	movs	r7, r4
   2c532:	ce04      	ldmia	r6!, {r2}
   2c534:	003c      	movs	r4, r7
   2c536:	4693      	mov	fp, r2
   2c538:	4659      	mov	r1, fp
   2c53a:	cc08      	ldmia	r4!, {r3}
   2c53c:	0409      	lsls	r1, r1, #16
   2c53e:	041a      	lsls	r2, r3, #16
   2c540:	0c12      	lsrs	r2, r2, #16
   2c542:	4452      	add	r2, sl
   2c544:	0c09      	lsrs	r1, r1, #16
   2c546:	1a52      	subs	r2, r2, r1
   2c548:	0c19      	lsrs	r1, r3, #16
   2c54a:	465b      	mov	r3, fp
   2c54c:	0c1b      	lsrs	r3, r3, #16
   2c54e:	1acb      	subs	r3, r1, r3
   2c550:	1411      	asrs	r1, r2, #16
   2c552:	185b      	adds	r3, r3, r1
   2c554:	0412      	lsls	r2, r2, #16
   2c556:	1419      	asrs	r1, r3, #16
   2c558:	0c12      	lsrs	r2, r2, #16
   2c55a:	041b      	lsls	r3, r3, #16
   2c55c:	468a      	mov	sl, r1
   2c55e:	4313      	orrs	r3, r2
   2c560:	1d29      	adds	r1, r5, #4
   2c562:	602b      	str	r3, [r5, #0]
   2c564:	000d      	movs	r5, r1
   2c566:	45b0      	cmp	r8, r6
   2c568:	d8e2      	bhi.n	2c530 <__mdiff+0x84>
   2c56a:	45a4      	cmp	ip, r4
   2c56c:	d916      	bls.n	2c59c <__mdiff+0xf0>
   2c56e:	cc08      	ldmia	r4!, {r3}
   2c570:	041a      	lsls	r2, r3, #16
   2c572:	0c12      	lsrs	r2, r2, #16
   2c574:	4452      	add	r2, sl
   2c576:	1416      	asrs	r6, r2, #16
   2c578:	0c1b      	lsrs	r3, r3, #16
   2c57a:	199b      	adds	r3, r3, r6
   2c57c:	0412      	lsls	r2, r2, #16
   2c57e:	141e      	asrs	r6, r3, #16
   2c580:	0c12      	lsrs	r2, r2, #16
   2c582:	041b      	lsls	r3, r3, #16
   2c584:	4313      	orrs	r3, r2
   2c586:	46b2      	mov	sl, r6
   2c588:	c508      	stmia	r5!, {r3}
   2c58a:	45a4      	cmp	ip, r4
   2c58c:	d8ef      	bhi.n	2c56e <__mdiff+0xc2>
   2c58e:	4662      	mov	r2, ip
   2c590:	2403      	movs	r4, #3
   2c592:	1bd2      	subs	r2, r2, r7
   2c594:	3a05      	subs	r2, #5
   2c596:	43a2      	bics	r2, r4
   2c598:	3204      	adds	r2, #4
   2c59a:	1889      	adds	r1, r1, r2
   2c59c:	3904      	subs	r1, #4
   2c59e:	2b00      	cmp	r3, #0
   2c5a0:	d104      	bne.n	2c5ac <__mdiff+0x100>
   2c5a2:	3904      	subs	r1, #4
   2c5a4:	680b      	ldr	r3, [r1, #0]
   2c5a6:	3801      	subs	r0, #1
   2c5a8:	2b00      	cmp	r3, #0
   2c5aa:	d0fa      	beq.n	2c5a2 <__mdiff+0xf6>
   2c5ac:	464b      	mov	r3, r9
   2c5ae:	6118      	str	r0, [r3, #16]
   2c5b0:	4648      	mov	r0, r9
   2c5b2:	bc3c      	pop	{r2, r3, r4, r5}
   2c5b4:	4690      	mov	r8, r2
   2c5b6:	4699      	mov	r9, r3
   2c5b8:	46a2      	mov	sl, r4
   2c5ba:	46ab      	mov	fp, r5
   2c5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c5be:	2100      	movs	r1, #0
   2c5c0:	f7ff fd26 	bl	2c010 <_Balloc>
   2c5c4:	2301      	movs	r3, #1
   2c5c6:	6103      	str	r3, [r0, #16]
   2c5c8:	2300      	movs	r3, #0
   2c5ca:	4681      	mov	r9, r0
   2c5cc:	6143      	str	r3, [r0, #20]
   2c5ce:	e7ef      	b.n	2c5b0 <__mdiff+0x104>
   2c5d0:	4666      	mov	r6, ip
   2c5d2:	e799      	b.n	2c508 <__mdiff+0x5c>
   2c5d4:	0027      	movs	r7, r4
   2c5d6:	000e      	movs	r6, r1
   2c5d8:	46a0      	mov	r8, r4
   2c5da:	3714      	adds	r7, #20
   2c5dc:	3614      	adds	r6, #20
   2c5de:	000c      	movs	r4, r1
   2c5e0:	2501      	movs	r5, #1
   2c5e2:	e791      	b.n	2c508 <__mdiff+0x5c>

0002c5e4 <__d2b>:
   2c5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c5e6:	2101      	movs	r1, #1
   2c5e8:	001c      	movs	r4, r3
   2c5ea:	b083      	sub	sp, #12
   2c5ec:	9e08      	ldr	r6, [sp, #32]
   2c5ee:	0015      	movs	r5, r2
   2c5f0:	f7ff fd0e 	bl	2c010 <_Balloc>
   2c5f4:	0323      	lsls	r3, r4, #12
   2c5f6:	0064      	lsls	r4, r4, #1
   2c5f8:	0007      	movs	r7, r0
   2c5fa:	0b1b      	lsrs	r3, r3, #12
   2c5fc:	0d64      	lsrs	r4, r4, #21
   2c5fe:	d002      	beq.n	2c606 <__d2b+0x22>
   2c600:	2280      	movs	r2, #128	; 0x80
   2c602:	0352      	lsls	r2, r2, #13
   2c604:	4313      	orrs	r3, r2
   2c606:	9301      	str	r3, [sp, #4]
   2c608:	2d00      	cmp	r5, #0
   2c60a:	d019      	beq.n	2c640 <__d2b+0x5c>
   2c60c:	4668      	mov	r0, sp
   2c60e:	9500      	str	r5, [sp, #0]
   2c610:	f7ff fd90 	bl	2c134 <__lo0bits>
   2c614:	2800      	cmp	r0, #0
   2c616:	d130      	bne.n	2c67a <__d2b+0x96>
   2c618:	9b00      	ldr	r3, [sp, #0]
   2c61a:	617b      	str	r3, [r7, #20]
   2c61c:	9b01      	ldr	r3, [sp, #4]
   2c61e:	61bb      	str	r3, [r7, #24]
   2c620:	1e5a      	subs	r2, r3, #1
   2c622:	4193      	sbcs	r3, r2
   2c624:	1c5d      	adds	r5, r3, #1
   2c626:	613d      	str	r5, [r7, #16]
   2c628:	2c00      	cmp	r4, #0
   2c62a:	d014      	beq.n	2c656 <__d2b+0x72>
   2c62c:	4b19      	ldr	r3, [pc, #100]	; (2c694 <__d2b+0xb0>)
   2c62e:	469c      	mov	ip, r3
   2c630:	2335      	movs	r3, #53	; 0x35
   2c632:	4464      	add	r4, ip
   2c634:	1824      	adds	r4, r4, r0
   2c636:	1a18      	subs	r0, r3, r0
   2c638:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c63a:	6034      	str	r4, [r6, #0]
   2c63c:	6018      	str	r0, [r3, #0]
   2c63e:	e019      	b.n	2c674 <__d2b+0x90>
   2c640:	a801      	add	r0, sp, #4
   2c642:	f7ff fd77 	bl	2c134 <__lo0bits>
   2c646:	9b01      	ldr	r3, [sp, #4]
   2c648:	3020      	adds	r0, #32
   2c64a:	617b      	str	r3, [r7, #20]
   2c64c:	2301      	movs	r3, #1
   2c64e:	2501      	movs	r5, #1
   2c650:	613b      	str	r3, [r7, #16]
   2c652:	2c00      	cmp	r4, #0
   2c654:	d1ea      	bne.n	2c62c <__d2b+0x48>
   2c656:	4b10      	ldr	r3, [pc, #64]	; (2c698 <__d2b+0xb4>)
   2c658:	469c      	mov	ip, r3
   2c65a:	4b10      	ldr	r3, [pc, #64]	; (2c69c <__d2b+0xb8>)
   2c65c:	4460      	add	r0, ip
   2c65e:	18eb      	adds	r3, r5, r3
   2c660:	009b      	lsls	r3, r3, #2
   2c662:	18fb      	adds	r3, r7, r3
   2c664:	6030      	str	r0, [r6, #0]
   2c666:	6958      	ldr	r0, [r3, #20]
   2c668:	f7ff fd4a 	bl	2c100 <__hi0bits>
   2c66c:	016b      	lsls	r3, r5, #5
   2c66e:	1a18      	subs	r0, r3, r0
   2c670:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c672:	6018      	str	r0, [r3, #0]
   2c674:	0038      	movs	r0, r7
   2c676:	b003      	add	sp, #12
   2c678:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c67a:	9b01      	ldr	r3, [sp, #4]
   2c67c:	2220      	movs	r2, #32
   2c67e:	0019      	movs	r1, r3
   2c680:	1a12      	subs	r2, r2, r0
   2c682:	4091      	lsls	r1, r2
   2c684:	000a      	movs	r2, r1
   2c686:	40c3      	lsrs	r3, r0
   2c688:	9900      	ldr	r1, [sp, #0]
   2c68a:	9301      	str	r3, [sp, #4]
   2c68c:	430a      	orrs	r2, r1
   2c68e:	617a      	str	r2, [r7, #20]
   2c690:	e7c5      	b.n	2c61e <__d2b+0x3a>
   2c692:	46c0      	nop			; (mov r8, r8)
   2c694:	fffffbcd 	.word	0xfffffbcd
   2c698:	fffffbce 	.word	0xfffffbce
   2c69c:	3fffffff 	.word	0x3fffffff

0002c6a0 <_sbrk_r>:
   2c6a0:	2300      	movs	r3, #0
   2c6a2:	b570      	push	{r4, r5, r6, lr}
   2c6a4:	4c06      	ldr	r4, [pc, #24]	; (2c6c0 <_sbrk_r+0x20>)
   2c6a6:	0005      	movs	r5, r0
   2c6a8:	0008      	movs	r0, r1
   2c6aa:	6023      	str	r3, [r4, #0]
   2c6ac:	f7dd fb0e 	bl	9ccc <_sbrk>
   2c6b0:	1c43      	adds	r3, r0, #1
   2c6b2:	d000      	beq.n	2c6b6 <_sbrk_r+0x16>
   2c6b4:	bd70      	pop	{r4, r5, r6, pc}
   2c6b6:	6823      	ldr	r3, [r4, #0]
   2c6b8:	2b00      	cmp	r3, #0
   2c6ba:	d0fb      	beq.n	2c6b4 <_sbrk_r+0x14>
   2c6bc:	602b      	str	r3, [r5, #0]
   2c6be:	e7f9      	b.n	2c6b4 <_sbrk_r+0x14>
   2c6c0:	20005380 	.word	0x20005380

0002c6c4 <strchr>:
   2c6c4:	b570      	push	{r4, r5, r6, lr}
   2c6c6:	b2cc      	uxtb	r4, r1
   2c6c8:	2c00      	cmp	r4, #0
   2c6ca:	d03b      	beq.n	2c744 <strchr+0x80>
   2c6cc:	0783      	lsls	r3, r0, #30
   2c6ce:	d00e      	beq.n	2c6ee <strchr+0x2a>
   2c6d0:	7803      	ldrb	r3, [r0, #0]
   2c6d2:	2b00      	cmp	r3, #0
   2c6d4:	d05b      	beq.n	2c78e <strchr+0xca>
   2c6d6:	429c      	cmp	r4, r3
   2c6d8:	d033      	beq.n	2c742 <strchr+0x7e>
   2c6da:	2203      	movs	r2, #3
   2c6dc:	e004      	b.n	2c6e8 <strchr+0x24>
   2c6de:	7803      	ldrb	r3, [r0, #0]
   2c6e0:	2b00      	cmp	r3, #0
   2c6e2:	d054      	beq.n	2c78e <strchr+0xca>
   2c6e4:	429c      	cmp	r4, r3
   2c6e6:	d02c      	beq.n	2c742 <strchr+0x7e>
   2c6e8:	3001      	adds	r0, #1
   2c6ea:	4210      	tst	r0, r2
   2c6ec:	d1f7      	bne.n	2c6de <strchr+0x1a>
   2c6ee:	25ff      	movs	r5, #255	; 0xff
   2c6f0:	4029      	ands	r1, r5
   2c6f2:	020d      	lsls	r5, r1, #8
   2c6f4:	4329      	orrs	r1, r5
   2c6f6:	040d      	lsls	r5, r1, #16
   2c6f8:	430d      	orrs	r5, r1
   2c6fa:	0029      	movs	r1, r5
   2c6fc:	6802      	ldr	r2, [r0, #0]
   2c6fe:	4b26      	ldr	r3, [pc, #152]	; (2c798 <strchr+0xd4>)
   2c700:	4051      	eors	r1, r2
   2c702:	18d3      	adds	r3, r2, r3
   2c704:	4393      	bics	r3, r2
   2c706:	4a24      	ldr	r2, [pc, #144]	; (2c798 <strchr+0xd4>)
   2c708:	4e24      	ldr	r6, [pc, #144]	; (2c79c <strchr+0xd8>)
   2c70a:	188a      	adds	r2, r1, r2
   2c70c:	438a      	bics	r2, r1
   2c70e:	4313      	orrs	r3, r2
   2c710:	4233      	tst	r3, r6
   2c712:	d10c      	bne.n	2c72e <strchr+0x6a>
   2c714:	0029      	movs	r1, r5
   2c716:	3004      	adds	r0, #4
   2c718:	6802      	ldr	r2, [r0, #0]
   2c71a:	4b1f      	ldr	r3, [pc, #124]	; (2c798 <strchr+0xd4>)
   2c71c:	4051      	eors	r1, r2
   2c71e:	18d3      	adds	r3, r2, r3
   2c720:	4393      	bics	r3, r2
   2c722:	4a1d      	ldr	r2, [pc, #116]	; (2c798 <strchr+0xd4>)
   2c724:	188a      	adds	r2, r1, r2
   2c726:	438a      	bics	r2, r1
   2c728:	4313      	orrs	r3, r2
   2c72a:	4233      	tst	r3, r6
   2c72c:	d0f2      	beq.n	2c714 <strchr+0x50>
   2c72e:	7803      	ldrb	r3, [r0, #0]
   2c730:	2b00      	cmp	r3, #0
   2c732:	d104      	bne.n	2c73e <strchr+0x7a>
   2c734:	e02b      	b.n	2c78e <strchr+0xca>
   2c736:	3001      	adds	r0, #1
   2c738:	7803      	ldrb	r3, [r0, #0]
   2c73a:	2b00      	cmp	r3, #0
   2c73c:	d027      	beq.n	2c78e <strchr+0xca>
   2c73e:	429c      	cmp	r4, r3
   2c740:	d1f9      	bne.n	2c736 <strchr+0x72>
   2c742:	bd70      	pop	{r4, r5, r6, pc}
   2c744:	0783      	lsls	r3, r0, #30
   2c746:	d00a      	beq.n	2c75e <strchr+0x9a>
   2c748:	7803      	ldrb	r3, [r0, #0]
   2c74a:	2b00      	cmp	r3, #0
   2c74c:	d0f9      	beq.n	2c742 <strchr+0x7e>
   2c74e:	2203      	movs	r2, #3
   2c750:	e002      	b.n	2c758 <strchr+0x94>
   2c752:	7803      	ldrb	r3, [r0, #0]
   2c754:	2b00      	cmp	r3, #0
   2c756:	d0f4      	beq.n	2c742 <strchr+0x7e>
   2c758:	3001      	adds	r0, #1
   2c75a:	4210      	tst	r0, r2
   2c75c:	d1f9      	bne.n	2c752 <strchr+0x8e>
   2c75e:	6801      	ldr	r1, [r0, #0]
   2c760:	4a0d      	ldr	r2, [pc, #52]	; (2c798 <strchr+0xd4>)
   2c762:	0003      	movs	r3, r0
   2c764:	188a      	adds	r2, r1, r2
   2c766:	480d      	ldr	r0, [pc, #52]	; (2c79c <strchr+0xd8>)
   2c768:	438a      	bics	r2, r1
   2c76a:	4202      	tst	r2, r0
   2c76c:	d106      	bne.n	2c77c <strchr+0xb8>
   2c76e:	3304      	adds	r3, #4
   2c770:	6819      	ldr	r1, [r3, #0]
   2c772:	4a09      	ldr	r2, [pc, #36]	; (2c798 <strchr+0xd4>)
   2c774:	188a      	adds	r2, r1, r2
   2c776:	438a      	bics	r2, r1
   2c778:	4202      	tst	r2, r0
   2c77a:	d0f8      	beq.n	2c76e <strchr+0xaa>
   2c77c:	781a      	ldrb	r2, [r3, #0]
   2c77e:	0018      	movs	r0, r3
   2c780:	2a00      	cmp	r2, #0
   2c782:	d006      	beq.n	2c792 <strchr+0xce>
   2c784:	3001      	adds	r0, #1
   2c786:	7803      	ldrb	r3, [r0, #0]
   2c788:	2b00      	cmp	r3, #0
   2c78a:	d1fb      	bne.n	2c784 <strchr+0xc0>
   2c78c:	e7d9      	b.n	2c742 <strchr+0x7e>
   2c78e:	2000      	movs	r0, #0
   2c790:	e7d7      	b.n	2c742 <strchr+0x7e>
   2c792:	0018      	movs	r0, r3
   2c794:	e7d5      	b.n	2c742 <strchr+0x7e>
   2c796:	46c0      	nop			; (mov r8, r8)
   2c798:	fefefeff 	.word	0xfefefeff
   2c79c:	80808080 	.word	0x80808080

0002c7a0 <__ssprint_r>:
   2c7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c7a2:	4657      	mov	r7, sl
   2c7a4:	464e      	mov	r6, r9
   2c7a6:	46de      	mov	lr, fp
   2c7a8:	4645      	mov	r5, r8
   2c7aa:	b5e0      	push	{r5, r6, r7, lr}
   2c7ac:	6893      	ldr	r3, [r2, #8]
   2c7ae:	b083      	sub	sp, #12
   2c7b0:	9001      	str	r0, [sp, #4]
   2c7b2:	000e      	movs	r6, r1
   2c7b4:	4692      	mov	sl, r2
   2c7b6:	2b00      	cmp	r3, #0
   2c7b8:	d070      	beq.n	2c89c <__ssprint_r+0xfc>
   2c7ba:	688d      	ldr	r5, [r1, #8]
   2c7bc:	6813      	ldr	r3, [r2, #0]
   2c7be:	002c      	movs	r4, r5
   2c7c0:	6808      	ldr	r0, [r1, #0]
   2c7c2:	001d      	movs	r5, r3
   2c7c4:	e046      	b.n	2c854 <__ssprint_r+0xb4>
   2c7c6:	2290      	movs	r2, #144	; 0x90
   2c7c8:	89b3      	ldrh	r3, [r6, #12]
   2c7ca:	00d2      	lsls	r2, r2, #3
   2c7cc:	4213      	tst	r3, r2
   2c7ce:	d030      	beq.n	2c832 <__ssprint_r+0x92>
   2c7d0:	6931      	ldr	r1, [r6, #16]
   2c7d2:	1a42      	subs	r2, r0, r1
   2c7d4:	4693      	mov	fp, r2
   2c7d6:	6970      	ldr	r0, [r6, #20]
   2c7d8:	0042      	lsls	r2, r0, #1
   2c7da:	1812      	adds	r2, r2, r0
   2c7dc:	0fd0      	lsrs	r0, r2, #31
   2c7de:	1882      	adds	r2, r0, r2
   2c7e0:	1052      	asrs	r2, r2, #1
   2c7e2:	4690      	mov	r8, r2
   2c7e4:	465a      	mov	r2, fp
   2c7e6:	1c50      	adds	r0, r2, #1
   2c7e8:	19c0      	adds	r0, r0, r7
   2c7ea:	4642      	mov	r2, r8
   2c7ec:	4540      	cmp	r0, r8
   2c7ee:	d901      	bls.n	2c7f4 <__ssprint_r+0x54>
   2c7f0:	4680      	mov	r8, r0
   2c7f2:	0002      	movs	r2, r0
   2c7f4:	2080      	movs	r0, #128	; 0x80
   2c7f6:	00c0      	lsls	r0, r0, #3
   2c7f8:	4203      	tst	r3, r0
   2c7fa:	d038      	beq.n	2c86e <__ssprint_r+0xce>
   2c7fc:	0011      	movs	r1, r2
   2c7fe:	9801      	ldr	r0, [sp, #4]
   2c800:	f7ff f8dc 	bl	2b9bc <_malloc_r>
   2c804:	1e04      	subs	r4, r0, #0
   2c806:	d054      	beq.n	2c8b2 <__ssprint_r+0x112>
   2c808:	465a      	mov	r2, fp
   2c80a:	6931      	ldr	r1, [r6, #16]
   2c80c:	f7fc f8c4 	bl	28998 <memcpy>
   2c810:	89b3      	ldrh	r3, [r6, #12]
   2c812:	4a2a      	ldr	r2, [pc, #168]	; (2c8bc <__ssprint_r+0x11c>)
   2c814:	4013      	ands	r3, r2
   2c816:	2280      	movs	r2, #128	; 0x80
   2c818:	4313      	orrs	r3, r2
   2c81a:	81b3      	strh	r3, [r6, #12]
   2c81c:	4643      	mov	r3, r8
   2c81e:	0020      	movs	r0, r4
   2c820:	465a      	mov	r2, fp
   2c822:	6134      	str	r4, [r6, #16]
   2c824:	46b8      	mov	r8, r7
   2c826:	003c      	movs	r4, r7
   2c828:	4458      	add	r0, fp
   2c82a:	6173      	str	r3, [r6, #20]
   2c82c:	1a9b      	subs	r3, r3, r2
   2c82e:	6030      	str	r0, [r6, #0]
   2c830:	60b3      	str	r3, [r6, #8]
   2c832:	4642      	mov	r2, r8
   2c834:	4649      	mov	r1, r9
   2c836:	f000 fa2d 	bl	2cc94 <memmove>
   2c83a:	68b3      	ldr	r3, [r6, #8]
   2c83c:	1b1c      	subs	r4, r3, r4
   2c83e:	6833      	ldr	r3, [r6, #0]
   2c840:	60b4      	str	r4, [r6, #8]
   2c842:	4443      	add	r3, r8
   2c844:	6033      	str	r3, [r6, #0]
   2c846:	0018      	movs	r0, r3
   2c848:	4653      	mov	r3, sl
   2c84a:	689b      	ldr	r3, [r3, #8]
   2c84c:	1bdf      	subs	r7, r3, r7
   2c84e:	4653      	mov	r3, sl
   2c850:	609f      	str	r7, [r3, #8]
   2c852:	d023      	beq.n	2c89c <__ssprint_r+0xfc>
   2c854:	686f      	ldr	r7, [r5, #4]
   2c856:	002b      	movs	r3, r5
   2c858:	3508      	adds	r5, #8
   2c85a:	2f00      	cmp	r7, #0
   2c85c:	d0fa      	beq.n	2c854 <__ssprint_r+0xb4>
   2c85e:	681b      	ldr	r3, [r3, #0]
   2c860:	46a0      	mov	r8, r4
   2c862:	4699      	mov	r9, r3
   2c864:	42a7      	cmp	r7, r4
   2c866:	d2ae      	bcs.n	2c7c6 <__ssprint_r+0x26>
   2c868:	003c      	movs	r4, r7
   2c86a:	46b8      	mov	r8, r7
   2c86c:	e7e1      	b.n	2c832 <__ssprint_r+0x92>
   2c86e:	9801      	ldr	r0, [sp, #4]
   2c870:	f000 fa60 	bl	2cd34 <_realloc_r>
   2c874:	1e04      	subs	r4, r0, #0
   2c876:	d1d1      	bne.n	2c81c <__ssprint_r+0x7c>
   2c878:	9c01      	ldr	r4, [sp, #4]
   2c87a:	6931      	ldr	r1, [r6, #16]
   2c87c:	0020      	movs	r0, r4
   2c87e:	f000 f915 	bl	2caac <_free_r>
   2c882:	230c      	movs	r3, #12
   2c884:	6023      	str	r3, [r4, #0]
   2c886:	2240      	movs	r2, #64	; 0x40
   2c888:	89b3      	ldrh	r3, [r6, #12]
   2c88a:	2001      	movs	r0, #1
   2c88c:	4313      	orrs	r3, r2
   2c88e:	81b3      	strh	r3, [r6, #12]
   2c890:	4652      	mov	r2, sl
   2c892:	2300      	movs	r3, #0
   2c894:	4240      	negs	r0, r0
   2c896:	6093      	str	r3, [r2, #8]
   2c898:	6053      	str	r3, [r2, #4]
   2c89a:	e003      	b.n	2c8a4 <__ssprint_r+0x104>
   2c89c:	2300      	movs	r3, #0
   2c89e:	4652      	mov	r2, sl
   2c8a0:	2000      	movs	r0, #0
   2c8a2:	6053      	str	r3, [r2, #4]
   2c8a4:	b003      	add	sp, #12
   2c8a6:	bc3c      	pop	{r2, r3, r4, r5}
   2c8a8:	4690      	mov	r8, r2
   2c8aa:	4699      	mov	r9, r3
   2c8ac:	46a2      	mov	sl, r4
   2c8ae:	46ab      	mov	fp, r5
   2c8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c8b2:	230c      	movs	r3, #12
   2c8b4:	9a01      	ldr	r2, [sp, #4]
   2c8b6:	6013      	str	r3, [r2, #0]
   2c8b8:	e7e5      	b.n	2c886 <__ssprint_r+0xe6>
   2c8ba:	46c0      	nop			; (mov r8, r8)
   2c8bc:	fffffb7f 	.word	0xfffffb7f

0002c8c0 <__register_exitproc>:
   2c8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c8c2:	464e      	mov	r6, r9
   2c8c4:	4645      	mov	r5, r8
   2c8c6:	46de      	mov	lr, fp
   2c8c8:	4657      	mov	r7, sl
   2c8ca:	b5e0      	push	{r5, r6, r7, lr}
   2c8cc:	4d36      	ldr	r5, [pc, #216]	; (2c9a8 <__register_exitproc+0xe8>)
   2c8ce:	b083      	sub	sp, #12
   2c8d0:	0006      	movs	r6, r0
   2c8d2:	6828      	ldr	r0, [r5, #0]
   2c8d4:	4698      	mov	r8, r3
   2c8d6:	000f      	movs	r7, r1
   2c8d8:	4691      	mov	r9, r2
   2c8da:	f7ff f86b 	bl	2b9b4 <__retarget_lock_acquire_recursive>
   2c8de:	4b33      	ldr	r3, [pc, #204]	; (2c9ac <__register_exitproc+0xec>)
   2c8e0:	681c      	ldr	r4, [r3, #0]
   2c8e2:	23a4      	movs	r3, #164	; 0xa4
   2c8e4:	005b      	lsls	r3, r3, #1
   2c8e6:	58e0      	ldr	r0, [r4, r3]
   2c8e8:	2800      	cmp	r0, #0
   2c8ea:	d052      	beq.n	2c992 <__register_exitproc+0xd2>
   2c8ec:	6843      	ldr	r3, [r0, #4]
   2c8ee:	2b1f      	cmp	r3, #31
   2c8f0:	dc13      	bgt.n	2c91a <__register_exitproc+0x5a>
   2c8f2:	1c5a      	adds	r2, r3, #1
   2c8f4:	9201      	str	r2, [sp, #4]
   2c8f6:	2e00      	cmp	r6, #0
   2c8f8:	d128      	bne.n	2c94c <__register_exitproc+0x8c>
   2c8fa:	9a01      	ldr	r2, [sp, #4]
   2c8fc:	3302      	adds	r3, #2
   2c8fe:	009b      	lsls	r3, r3, #2
   2c900:	6042      	str	r2, [r0, #4]
   2c902:	501f      	str	r7, [r3, r0]
   2c904:	6828      	ldr	r0, [r5, #0]
   2c906:	f7ff f857 	bl	2b9b8 <__retarget_lock_release_recursive>
   2c90a:	2000      	movs	r0, #0
   2c90c:	b003      	add	sp, #12
   2c90e:	bc3c      	pop	{r2, r3, r4, r5}
   2c910:	4690      	mov	r8, r2
   2c912:	4699      	mov	r9, r3
   2c914:	46a2      	mov	sl, r4
   2c916:	46ab      	mov	fp, r5
   2c918:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c91a:	4b25      	ldr	r3, [pc, #148]	; (2c9b0 <__register_exitproc+0xf0>)
   2c91c:	2b00      	cmp	r3, #0
   2c91e:	d03d      	beq.n	2c99c <__register_exitproc+0xdc>
   2c920:	20c8      	movs	r0, #200	; 0xc8
   2c922:	0040      	lsls	r0, r0, #1
   2c924:	e000      	b.n	2c928 <__register_exitproc+0x68>
   2c926:	bf00      	nop
   2c928:	2800      	cmp	r0, #0
   2c92a:	d037      	beq.n	2c99c <__register_exitproc+0xdc>
   2c92c:	22a4      	movs	r2, #164	; 0xa4
   2c92e:	2300      	movs	r3, #0
   2c930:	0052      	lsls	r2, r2, #1
   2c932:	58a1      	ldr	r1, [r4, r2]
   2c934:	6043      	str	r3, [r0, #4]
   2c936:	6001      	str	r1, [r0, #0]
   2c938:	50a0      	str	r0, [r4, r2]
   2c93a:	3240      	adds	r2, #64	; 0x40
   2c93c:	5083      	str	r3, [r0, r2]
   2c93e:	3204      	adds	r2, #4
   2c940:	5083      	str	r3, [r0, r2]
   2c942:	3301      	adds	r3, #1
   2c944:	9301      	str	r3, [sp, #4]
   2c946:	2300      	movs	r3, #0
   2c948:	2e00      	cmp	r6, #0
   2c94a:	d0d6      	beq.n	2c8fa <__register_exitproc+0x3a>
   2c94c:	009a      	lsls	r2, r3, #2
   2c94e:	4692      	mov	sl, r2
   2c950:	4482      	add	sl, r0
   2c952:	464a      	mov	r2, r9
   2c954:	2188      	movs	r1, #136	; 0x88
   2c956:	4654      	mov	r4, sl
   2c958:	5062      	str	r2, [r4, r1]
   2c95a:	22c4      	movs	r2, #196	; 0xc4
   2c95c:	0052      	lsls	r2, r2, #1
   2c95e:	4691      	mov	r9, r2
   2c960:	4481      	add	r9, r0
   2c962:	464a      	mov	r2, r9
   2c964:	3987      	subs	r1, #135	; 0x87
   2c966:	4099      	lsls	r1, r3
   2c968:	6812      	ldr	r2, [r2, #0]
   2c96a:	468b      	mov	fp, r1
   2c96c:	430a      	orrs	r2, r1
   2c96e:	4694      	mov	ip, r2
   2c970:	464a      	mov	r2, r9
   2c972:	4661      	mov	r1, ip
   2c974:	6011      	str	r1, [r2, #0]
   2c976:	2284      	movs	r2, #132	; 0x84
   2c978:	4641      	mov	r1, r8
   2c97a:	0052      	lsls	r2, r2, #1
   2c97c:	50a1      	str	r1, [r4, r2]
   2c97e:	2e02      	cmp	r6, #2
   2c980:	d1bb      	bne.n	2c8fa <__register_exitproc+0x3a>
   2c982:	0002      	movs	r2, r0
   2c984:	465c      	mov	r4, fp
   2c986:	328d      	adds	r2, #141	; 0x8d
   2c988:	32ff      	adds	r2, #255	; 0xff
   2c98a:	6811      	ldr	r1, [r2, #0]
   2c98c:	430c      	orrs	r4, r1
   2c98e:	6014      	str	r4, [r2, #0]
   2c990:	e7b3      	b.n	2c8fa <__register_exitproc+0x3a>
   2c992:	0020      	movs	r0, r4
   2c994:	304d      	adds	r0, #77	; 0x4d
   2c996:	30ff      	adds	r0, #255	; 0xff
   2c998:	50e0      	str	r0, [r4, r3]
   2c99a:	e7a7      	b.n	2c8ec <__register_exitproc+0x2c>
   2c99c:	6828      	ldr	r0, [r5, #0]
   2c99e:	f7ff f80b 	bl	2b9b8 <__retarget_lock_release_recursive>
   2c9a2:	2001      	movs	r0, #1
   2c9a4:	4240      	negs	r0, r0
   2c9a6:	e7b1      	b.n	2c90c <__register_exitproc+0x4c>
   2c9a8:	20000610 	.word	0x20000610
   2c9ac:	0002fb58 	.word	0x0002fb58
   2c9b0:	00000000 	.word	0x00000000

0002c9b4 <_calloc_r>:
   2c9b4:	b510      	push	{r4, lr}
   2c9b6:	4351      	muls	r1, r2
   2c9b8:	f7ff f800 	bl	2b9bc <_malloc_r>
   2c9bc:	1e04      	subs	r4, r0, #0
   2c9be:	d01c      	beq.n	2c9fa <_calloc_r+0x46>
   2c9c0:	0003      	movs	r3, r0
   2c9c2:	3b08      	subs	r3, #8
   2c9c4:	685a      	ldr	r2, [r3, #4]
   2c9c6:	2303      	movs	r3, #3
   2c9c8:	439a      	bics	r2, r3
   2c9ca:	3a04      	subs	r2, #4
   2c9cc:	2a24      	cmp	r2, #36	; 0x24
   2c9ce:	d816      	bhi.n	2c9fe <_calloc_r+0x4a>
   2c9d0:	0003      	movs	r3, r0
   2c9d2:	2a13      	cmp	r2, #19
   2c9d4:	d90d      	bls.n	2c9f2 <_calloc_r+0x3e>
   2c9d6:	2100      	movs	r1, #0
   2c9d8:	3308      	adds	r3, #8
   2c9da:	6001      	str	r1, [r0, #0]
   2c9dc:	6041      	str	r1, [r0, #4]
   2c9de:	2a1b      	cmp	r2, #27
   2c9e0:	d907      	bls.n	2c9f2 <_calloc_r+0x3e>
   2c9e2:	6081      	str	r1, [r0, #8]
   2c9e4:	60c1      	str	r1, [r0, #12]
   2c9e6:	2a24      	cmp	r2, #36	; 0x24
   2c9e8:	d10d      	bne.n	2ca06 <_calloc_r+0x52>
   2c9ea:	0003      	movs	r3, r0
   2c9ec:	6101      	str	r1, [r0, #16]
   2c9ee:	3318      	adds	r3, #24
   2c9f0:	6141      	str	r1, [r0, #20]
   2c9f2:	2200      	movs	r2, #0
   2c9f4:	601a      	str	r2, [r3, #0]
   2c9f6:	605a      	str	r2, [r3, #4]
   2c9f8:	609a      	str	r2, [r3, #8]
   2c9fa:	0020      	movs	r0, r4
   2c9fc:	bd10      	pop	{r4, pc}
   2c9fe:	2100      	movs	r1, #0
   2ca00:	f7fc f80c 	bl	28a1c <memset>
   2ca04:	e7f9      	b.n	2c9fa <_calloc_r+0x46>
   2ca06:	0003      	movs	r3, r0
   2ca08:	3310      	adds	r3, #16
   2ca0a:	e7f2      	b.n	2c9f2 <_calloc_r+0x3e>

0002ca0c <_malloc_trim_r>:
   2ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ca0e:	000c      	movs	r4, r1
   2ca10:	0006      	movs	r6, r0
   2ca12:	f7ff faed 	bl	2bff0 <__malloc_lock>
   2ca16:	4f20      	ldr	r7, [pc, #128]	; (2ca98 <_malloc_trim_r+0x8c>)
   2ca18:	68bb      	ldr	r3, [r7, #8]
   2ca1a:	685d      	ldr	r5, [r3, #4]
   2ca1c:	2303      	movs	r3, #3
   2ca1e:	439d      	bics	r5, r3
   2ca20:	4b1e      	ldr	r3, [pc, #120]	; (2ca9c <_malloc_trim_r+0x90>)
   2ca22:	1b2c      	subs	r4, r5, r4
   2ca24:	469c      	mov	ip, r3
   2ca26:	4464      	add	r4, ip
   2ca28:	0b24      	lsrs	r4, r4, #12
   2ca2a:	4b1d      	ldr	r3, [pc, #116]	; (2caa0 <_malloc_trim_r+0x94>)
   2ca2c:	3c01      	subs	r4, #1
   2ca2e:	0324      	lsls	r4, r4, #12
   2ca30:	429c      	cmp	r4, r3
   2ca32:	dd07      	ble.n	2ca44 <_malloc_trim_r+0x38>
   2ca34:	2100      	movs	r1, #0
   2ca36:	0030      	movs	r0, r6
   2ca38:	f7ff fe32 	bl	2c6a0 <_sbrk_r>
   2ca3c:	68bb      	ldr	r3, [r7, #8]
   2ca3e:	195b      	adds	r3, r3, r5
   2ca40:	4298      	cmp	r0, r3
   2ca42:	d004      	beq.n	2ca4e <_malloc_trim_r+0x42>
   2ca44:	0030      	movs	r0, r6
   2ca46:	f7ff fadb 	bl	2c000 <__malloc_unlock>
   2ca4a:	2000      	movs	r0, #0
   2ca4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ca4e:	4261      	negs	r1, r4
   2ca50:	0030      	movs	r0, r6
   2ca52:	f7ff fe25 	bl	2c6a0 <_sbrk_r>
   2ca56:	1c43      	adds	r3, r0, #1
   2ca58:	d00d      	beq.n	2ca76 <_malloc_trim_r+0x6a>
   2ca5a:	2201      	movs	r2, #1
   2ca5c:	68bb      	ldr	r3, [r7, #8]
   2ca5e:	1b2d      	subs	r5, r5, r4
   2ca60:	4315      	orrs	r5, r2
   2ca62:	605d      	str	r5, [r3, #4]
   2ca64:	4b0f      	ldr	r3, [pc, #60]	; (2caa4 <_malloc_trim_r+0x98>)
   2ca66:	0030      	movs	r0, r6
   2ca68:	681a      	ldr	r2, [r3, #0]
   2ca6a:	1b14      	subs	r4, r2, r4
   2ca6c:	601c      	str	r4, [r3, #0]
   2ca6e:	f7ff fac7 	bl	2c000 <__malloc_unlock>
   2ca72:	2001      	movs	r0, #1
   2ca74:	e7ea      	b.n	2ca4c <_malloc_trim_r+0x40>
   2ca76:	2100      	movs	r1, #0
   2ca78:	0030      	movs	r0, r6
   2ca7a:	f7ff fe11 	bl	2c6a0 <_sbrk_r>
   2ca7e:	68ba      	ldr	r2, [r7, #8]
   2ca80:	1a83      	subs	r3, r0, r2
   2ca82:	2b0f      	cmp	r3, #15
   2ca84:	ddde      	ble.n	2ca44 <_malloc_trim_r+0x38>
   2ca86:	4908      	ldr	r1, [pc, #32]	; (2caa8 <_malloc_trim_r+0x9c>)
   2ca88:	6809      	ldr	r1, [r1, #0]
   2ca8a:	1a40      	subs	r0, r0, r1
   2ca8c:	4905      	ldr	r1, [pc, #20]	; (2caa4 <_malloc_trim_r+0x98>)
   2ca8e:	6008      	str	r0, [r1, #0]
   2ca90:	2101      	movs	r1, #1
   2ca92:	430b      	orrs	r3, r1
   2ca94:	6053      	str	r3, [r2, #4]
   2ca96:	e7d5      	b.n	2ca44 <_malloc_trim_r+0x38>
   2ca98:	20000614 	.word	0x20000614
   2ca9c:	00000fef 	.word	0x00000fef
   2caa0:	00000fff 	.word	0x00000fff
   2caa4:	20000df4 	.word	0x20000df4
   2caa8:	20000a1c 	.word	0x20000a1c

0002caac <_free_r>:
   2caac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2caae:	0004      	movs	r4, r0
   2cab0:	1e0d      	subs	r5, r1, #0
   2cab2:	d03c      	beq.n	2cb2e <_free_r+0x82>
   2cab4:	f7ff fa9c 	bl	2bff0 <__malloc_lock>
   2cab8:	0029      	movs	r1, r5
   2caba:	3908      	subs	r1, #8
   2cabc:	6848      	ldr	r0, [r1, #4]
   2cabe:	2301      	movs	r3, #1
   2cac0:	0005      	movs	r5, r0
   2cac2:	2603      	movs	r6, #3
   2cac4:	439d      	bics	r5, r3
   2cac6:	194a      	adds	r2, r1, r5
   2cac8:	469c      	mov	ip, r3
   2caca:	4f61      	ldr	r7, [pc, #388]	; (2cc50 <_free_r+0x1a4>)
   2cacc:	6853      	ldr	r3, [r2, #4]
   2cace:	43b3      	bics	r3, r6
   2cad0:	68be      	ldr	r6, [r7, #8]
   2cad2:	42b2      	cmp	r2, r6
   2cad4:	d056      	beq.n	2cb84 <_free_r+0xd8>
   2cad6:	4666      	mov	r6, ip
   2cad8:	6053      	str	r3, [r2, #4]
   2cada:	4206      	tst	r6, r0
   2cadc:	d10a      	bne.n	2caf4 <_free_r+0x48>
   2cade:	003e      	movs	r6, r7
   2cae0:	6808      	ldr	r0, [r1, #0]
   2cae2:	3608      	adds	r6, #8
   2cae4:	1a09      	subs	r1, r1, r0
   2cae6:	182d      	adds	r5, r5, r0
   2cae8:	6888      	ldr	r0, [r1, #8]
   2caea:	42b0      	cmp	r0, r6
   2caec:	d065      	beq.n	2cbba <_free_r+0x10e>
   2caee:	68ce      	ldr	r6, [r1, #12]
   2caf0:	60c6      	str	r6, [r0, #12]
   2caf2:	60b0      	str	r0, [r6, #8]
   2caf4:	2001      	movs	r0, #1
   2caf6:	18d6      	adds	r6, r2, r3
   2caf8:	6876      	ldr	r6, [r6, #4]
   2cafa:	4206      	tst	r6, r0
   2cafc:	d033      	beq.n	2cb66 <_free_r+0xba>
   2cafe:	4b55      	ldr	r3, [pc, #340]	; (2cc54 <_free_r+0x1a8>)
   2cb00:	4328      	orrs	r0, r5
   2cb02:	6048      	str	r0, [r1, #4]
   2cb04:	514d      	str	r5, [r1, r5]
   2cb06:	429d      	cmp	r5, r3
   2cb08:	d812      	bhi.n	2cb30 <_free_r+0x84>
   2cb0a:	08ed      	lsrs	r5, r5, #3
   2cb0c:	3bff      	subs	r3, #255	; 0xff
   2cb0e:	10aa      	asrs	r2, r5, #2
   2cb10:	3bff      	subs	r3, #255	; 0xff
   2cb12:	4093      	lsls	r3, r2
   2cb14:	687a      	ldr	r2, [r7, #4]
   2cb16:	00ed      	lsls	r5, r5, #3
   2cb18:	4313      	orrs	r3, r2
   2cb1a:	607b      	str	r3, [r7, #4]
   2cb1c:	19ef      	adds	r7, r5, r7
   2cb1e:	68bb      	ldr	r3, [r7, #8]
   2cb20:	60cf      	str	r7, [r1, #12]
   2cb22:	608b      	str	r3, [r1, #8]
   2cb24:	60b9      	str	r1, [r7, #8]
   2cb26:	60d9      	str	r1, [r3, #12]
   2cb28:	0020      	movs	r0, r4
   2cb2a:	f7ff fa69 	bl	2c000 <__malloc_unlock>
   2cb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2cb30:	0a68      	lsrs	r0, r5, #9
   2cb32:	2804      	cmp	r0, #4
   2cb34:	d850      	bhi.n	2cbd8 <_free_r+0x12c>
   2cb36:	09a8      	lsrs	r0, r5, #6
   2cb38:	0002      	movs	r2, r0
   2cb3a:	3039      	adds	r0, #57	; 0x39
   2cb3c:	3238      	adds	r2, #56	; 0x38
   2cb3e:	00c0      	lsls	r0, r0, #3
   2cb40:	1838      	adds	r0, r7, r0
   2cb42:	3808      	subs	r0, #8
   2cb44:	6883      	ldr	r3, [r0, #8]
   2cb46:	2603      	movs	r6, #3
   2cb48:	4298      	cmp	r0, r3
   2cb4a:	d04c      	beq.n	2cbe6 <_free_r+0x13a>
   2cb4c:	685a      	ldr	r2, [r3, #4]
   2cb4e:	43b2      	bics	r2, r6
   2cb50:	4295      	cmp	r5, r2
   2cb52:	d230      	bcs.n	2cbb6 <_free_r+0x10a>
   2cb54:	689b      	ldr	r3, [r3, #8]
   2cb56:	4298      	cmp	r0, r3
   2cb58:	d1f8      	bne.n	2cb4c <_free_r+0xa0>
   2cb5a:	68c3      	ldr	r3, [r0, #12]
   2cb5c:	60cb      	str	r3, [r1, #12]
   2cb5e:	6088      	str	r0, [r1, #8]
   2cb60:	6099      	str	r1, [r3, #8]
   2cb62:	60c1      	str	r1, [r0, #12]
   2cb64:	e7e0      	b.n	2cb28 <_free_r+0x7c>
   2cb66:	18ed      	adds	r5, r5, r3
   2cb68:	4e3b      	ldr	r6, [pc, #236]	; (2cc58 <_free_r+0x1ac>)
   2cb6a:	6893      	ldr	r3, [r2, #8]
   2cb6c:	42b3      	cmp	r3, r6
   2cb6e:	d042      	beq.n	2cbf6 <_free_r+0x14a>
   2cb70:	68d2      	ldr	r2, [r2, #12]
   2cb72:	4328      	orrs	r0, r5
   2cb74:	60da      	str	r2, [r3, #12]
   2cb76:	6093      	str	r3, [r2, #8]
   2cb78:	4b36      	ldr	r3, [pc, #216]	; (2cc54 <_free_r+0x1a8>)
   2cb7a:	6048      	str	r0, [r1, #4]
   2cb7c:	514d      	str	r5, [r1, r5]
   2cb7e:	429d      	cmp	r5, r3
   2cb80:	d8d6      	bhi.n	2cb30 <_free_r+0x84>
   2cb82:	e7c2      	b.n	2cb0a <_free_r+0x5e>
   2cb84:	4662      	mov	r2, ip
   2cb86:	18eb      	adds	r3, r5, r3
   2cb88:	4202      	tst	r2, r0
   2cb8a:	d106      	bne.n	2cb9a <_free_r+0xee>
   2cb8c:	680a      	ldr	r2, [r1, #0]
   2cb8e:	1a89      	subs	r1, r1, r2
   2cb90:	6888      	ldr	r0, [r1, #8]
   2cb92:	189b      	adds	r3, r3, r2
   2cb94:	68ca      	ldr	r2, [r1, #12]
   2cb96:	60c2      	str	r2, [r0, #12]
   2cb98:	6090      	str	r0, [r2, #8]
   2cb9a:	2201      	movs	r2, #1
   2cb9c:	431a      	orrs	r2, r3
   2cb9e:	604a      	str	r2, [r1, #4]
   2cba0:	4a2e      	ldr	r2, [pc, #184]	; (2cc5c <_free_r+0x1b0>)
   2cba2:	60b9      	str	r1, [r7, #8]
   2cba4:	6812      	ldr	r2, [r2, #0]
   2cba6:	4293      	cmp	r3, r2
   2cba8:	d3be      	bcc.n	2cb28 <_free_r+0x7c>
   2cbaa:	4b2d      	ldr	r3, [pc, #180]	; (2cc60 <_free_r+0x1b4>)
   2cbac:	0020      	movs	r0, r4
   2cbae:	6819      	ldr	r1, [r3, #0]
   2cbb0:	f7ff ff2c 	bl	2ca0c <_malloc_trim_r>
   2cbb4:	e7b8      	b.n	2cb28 <_free_r+0x7c>
   2cbb6:	0018      	movs	r0, r3
   2cbb8:	e7cf      	b.n	2cb5a <_free_r+0xae>
   2cbba:	4666      	mov	r6, ip
   2cbbc:	18d0      	adds	r0, r2, r3
   2cbbe:	6840      	ldr	r0, [r0, #4]
   2cbc0:	4230      	tst	r0, r6
   2cbc2:	d13f      	bne.n	2cc44 <_free_r+0x198>
   2cbc4:	6890      	ldr	r0, [r2, #8]
   2cbc6:	195d      	adds	r5, r3, r5
   2cbc8:	68d3      	ldr	r3, [r2, #12]
   2cbca:	60c3      	str	r3, [r0, #12]
   2cbcc:	6098      	str	r0, [r3, #8]
   2cbce:	4663      	mov	r3, ip
   2cbd0:	432b      	orrs	r3, r5
   2cbd2:	604b      	str	r3, [r1, #4]
   2cbd4:	514d      	str	r5, [r1, r5]
   2cbd6:	e7a7      	b.n	2cb28 <_free_r+0x7c>
   2cbd8:	2814      	cmp	r0, #20
   2cbda:	d814      	bhi.n	2cc06 <_free_r+0x15a>
   2cbdc:	0002      	movs	r2, r0
   2cbde:	305c      	adds	r0, #92	; 0x5c
   2cbe0:	325b      	adds	r2, #91	; 0x5b
   2cbe2:	00c0      	lsls	r0, r0, #3
   2cbe4:	e7ac      	b.n	2cb40 <_free_r+0x94>
   2cbe6:	2301      	movs	r3, #1
   2cbe8:	1092      	asrs	r2, r2, #2
   2cbea:	4093      	lsls	r3, r2
   2cbec:	687a      	ldr	r2, [r7, #4]
   2cbee:	4313      	orrs	r3, r2
   2cbf0:	607b      	str	r3, [r7, #4]
   2cbf2:	0003      	movs	r3, r0
   2cbf4:	e7b2      	b.n	2cb5c <_free_r+0xb0>
   2cbf6:	4328      	orrs	r0, r5
   2cbf8:	60d9      	str	r1, [r3, #12]
   2cbfa:	6099      	str	r1, [r3, #8]
   2cbfc:	60cb      	str	r3, [r1, #12]
   2cbfe:	608b      	str	r3, [r1, #8]
   2cc00:	6048      	str	r0, [r1, #4]
   2cc02:	514d      	str	r5, [r1, r5]
   2cc04:	e790      	b.n	2cb28 <_free_r+0x7c>
   2cc06:	2854      	cmp	r0, #84	; 0x54
   2cc08:	d805      	bhi.n	2cc16 <_free_r+0x16a>
   2cc0a:	0b28      	lsrs	r0, r5, #12
   2cc0c:	0002      	movs	r2, r0
   2cc0e:	306f      	adds	r0, #111	; 0x6f
   2cc10:	326e      	adds	r2, #110	; 0x6e
   2cc12:	00c0      	lsls	r0, r0, #3
   2cc14:	e794      	b.n	2cb40 <_free_r+0x94>
   2cc16:	22aa      	movs	r2, #170	; 0xaa
   2cc18:	0052      	lsls	r2, r2, #1
   2cc1a:	4290      	cmp	r0, r2
   2cc1c:	d805      	bhi.n	2cc2a <_free_r+0x17e>
   2cc1e:	0be8      	lsrs	r0, r5, #15
   2cc20:	0002      	movs	r2, r0
   2cc22:	3078      	adds	r0, #120	; 0x78
   2cc24:	3277      	adds	r2, #119	; 0x77
   2cc26:	00c0      	lsls	r0, r0, #3
   2cc28:	e78a      	b.n	2cb40 <_free_r+0x94>
   2cc2a:	4a0e      	ldr	r2, [pc, #56]	; (2cc64 <_free_r+0x1b8>)
   2cc2c:	4290      	cmp	r0, r2
   2cc2e:	d805      	bhi.n	2cc3c <_free_r+0x190>
   2cc30:	0ca8      	lsrs	r0, r5, #18
   2cc32:	0002      	movs	r2, r0
   2cc34:	307d      	adds	r0, #125	; 0x7d
   2cc36:	327c      	adds	r2, #124	; 0x7c
   2cc38:	00c0      	lsls	r0, r0, #3
   2cc3a:	e781      	b.n	2cb40 <_free_r+0x94>
   2cc3c:	20fe      	movs	r0, #254	; 0xfe
   2cc3e:	227e      	movs	r2, #126	; 0x7e
   2cc40:	0080      	lsls	r0, r0, #2
   2cc42:	e77d      	b.n	2cb40 <_free_r+0x94>
   2cc44:	4663      	mov	r3, ip
   2cc46:	432b      	orrs	r3, r5
   2cc48:	604b      	str	r3, [r1, #4]
   2cc4a:	6015      	str	r5, [r2, #0]
   2cc4c:	e76c      	b.n	2cb28 <_free_r+0x7c>
   2cc4e:	46c0      	nop			; (mov r8, r8)
   2cc50:	20000614 	.word	0x20000614
   2cc54:	000001ff 	.word	0x000001ff
   2cc58:	2000061c 	.word	0x2000061c
   2cc5c:	20000a20 	.word	0x20000a20
   2cc60:	20000e24 	.word	0x20000e24
   2cc64:	00000554 	.word	0x00000554

0002cc68 <__ascii_mbtowc>:
   2cc68:	b082      	sub	sp, #8
   2cc6a:	2900      	cmp	r1, #0
   2cc6c:	d00a      	beq.n	2cc84 <__ascii_mbtowc+0x1c>
   2cc6e:	2a00      	cmp	r2, #0
   2cc70:	d00b      	beq.n	2cc8a <__ascii_mbtowc+0x22>
   2cc72:	2b00      	cmp	r3, #0
   2cc74:	d00b      	beq.n	2cc8e <__ascii_mbtowc+0x26>
   2cc76:	7813      	ldrb	r3, [r2, #0]
   2cc78:	600b      	str	r3, [r1, #0]
   2cc7a:	7810      	ldrb	r0, [r2, #0]
   2cc7c:	1e43      	subs	r3, r0, #1
   2cc7e:	4198      	sbcs	r0, r3
   2cc80:	b002      	add	sp, #8
   2cc82:	4770      	bx	lr
   2cc84:	a901      	add	r1, sp, #4
   2cc86:	2a00      	cmp	r2, #0
   2cc88:	d1f3      	bne.n	2cc72 <__ascii_mbtowc+0xa>
   2cc8a:	2000      	movs	r0, #0
   2cc8c:	e7f8      	b.n	2cc80 <__ascii_mbtowc+0x18>
   2cc8e:	2002      	movs	r0, #2
   2cc90:	4240      	negs	r0, r0
   2cc92:	e7f5      	b.n	2cc80 <__ascii_mbtowc+0x18>

0002cc94 <memmove>:
   2cc94:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cc96:	4288      	cmp	r0, r1
   2cc98:	d90a      	bls.n	2ccb0 <memmove+0x1c>
   2cc9a:	188b      	adds	r3, r1, r2
   2cc9c:	4298      	cmp	r0, r3
   2cc9e:	d207      	bcs.n	2ccb0 <memmove+0x1c>
   2cca0:	1e53      	subs	r3, r2, #1
   2cca2:	2a00      	cmp	r2, #0
   2cca4:	d003      	beq.n	2ccae <memmove+0x1a>
   2cca6:	5cca      	ldrb	r2, [r1, r3]
   2cca8:	54c2      	strb	r2, [r0, r3]
   2ccaa:	3b01      	subs	r3, #1
   2ccac:	d2fb      	bcs.n	2cca6 <memmove+0x12>
   2ccae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ccb0:	0005      	movs	r5, r0
   2ccb2:	2a0f      	cmp	r2, #15
   2ccb4:	d808      	bhi.n	2ccc8 <memmove+0x34>
   2ccb6:	2a00      	cmp	r2, #0
   2ccb8:	d0f9      	beq.n	2ccae <memmove+0x1a>
   2ccba:	2300      	movs	r3, #0
   2ccbc:	5ccc      	ldrb	r4, [r1, r3]
   2ccbe:	54ec      	strb	r4, [r5, r3]
   2ccc0:	3301      	adds	r3, #1
   2ccc2:	4293      	cmp	r3, r2
   2ccc4:	d1fa      	bne.n	2ccbc <memmove+0x28>
   2ccc6:	e7f2      	b.n	2ccae <memmove+0x1a>
   2ccc8:	000b      	movs	r3, r1
   2ccca:	4303      	orrs	r3, r0
   2cccc:	079b      	lsls	r3, r3, #30
   2ccce:	d12d      	bne.n	2cd2c <memmove+0x98>
   2ccd0:	0015      	movs	r5, r2
   2ccd2:	000c      	movs	r4, r1
   2ccd4:	0003      	movs	r3, r0
   2ccd6:	3d10      	subs	r5, #16
   2ccd8:	092f      	lsrs	r7, r5, #4
   2ccda:	3701      	adds	r7, #1
   2ccdc:	013f      	lsls	r7, r7, #4
   2ccde:	19c7      	adds	r7, r0, r7
   2cce0:	6826      	ldr	r6, [r4, #0]
   2cce2:	601e      	str	r6, [r3, #0]
   2cce4:	6866      	ldr	r6, [r4, #4]
   2cce6:	605e      	str	r6, [r3, #4]
   2cce8:	68a6      	ldr	r6, [r4, #8]
   2ccea:	609e      	str	r6, [r3, #8]
   2ccec:	68e6      	ldr	r6, [r4, #12]
   2ccee:	3410      	adds	r4, #16
   2ccf0:	60de      	str	r6, [r3, #12]
   2ccf2:	3310      	adds	r3, #16
   2ccf4:	429f      	cmp	r7, r3
   2ccf6:	d1f3      	bne.n	2cce0 <memmove+0x4c>
   2ccf8:	240f      	movs	r4, #15
   2ccfa:	43a5      	bics	r5, r4
   2ccfc:	3510      	adds	r5, #16
   2ccfe:	1949      	adds	r1, r1, r5
   2cd00:	4014      	ands	r4, r2
   2cd02:	1945      	adds	r5, r0, r5
   2cd04:	2c03      	cmp	r4, #3
   2cd06:	d913      	bls.n	2cd30 <memmove+0x9c>
   2cd08:	2300      	movs	r3, #0
   2cd0a:	1f27      	subs	r7, r4, #4
   2cd0c:	08be      	lsrs	r6, r7, #2
   2cd0e:	3601      	adds	r6, #1
   2cd10:	00b6      	lsls	r6, r6, #2
   2cd12:	58cc      	ldr	r4, [r1, r3]
   2cd14:	50ec      	str	r4, [r5, r3]
   2cd16:	3304      	adds	r3, #4
   2cd18:	42b3      	cmp	r3, r6
   2cd1a:	d1fa      	bne.n	2cd12 <memmove+0x7e>
   2cd1c:	2603      	movs	r6, #3
   2cd1e:	43b7      	bics	r7, r6
   2cd20:	1d3c      	adds	r4, r7, #4
   2cd22:	1909      	adds	r1, r1, r4
   2cd24:	192d      	adds	r5, r5, r4
   2cd26:	4032      	ands	r2, r6
   2cd28:	d1c7      	bne.n	2ccba <memmove+0x26>
   2cd2a:	e7c0      	b.n	2ccae <memmove+0x1a>
   2cd2c:	0005      	movs	r5, r0
   2cd2e:	e7c4      	b.n	2ccba <memmove+0x26>
   2cd30:	0022      	movs	r2, r4
   2cd32:	e7c0      	b.n	2ccb6 <memmove+0x22>

0002cd34 <_realloc_r>:
   2cd34:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cd36:	464e      	mov	r6, r9
   2cd38:	4645      	mov	r5, r8
   2cd3a:	46de      	mov	lr, fp
   2cd3c:	4657      	mov	r7, sl
   2cd3e:	b5e0      	push	{r5, r6, r7, lr}
   2cd40:	b085      	sub	sp, #20
   2cd42:	9001      	str	r0, [sp, #4]
   2cd44:	000e      	movs	r6, r1
   2cd46:	0015      	movs	r5, r2
   2cd48:	2900      	cmp	r1, #0
   2cd4a:	d100      	bne.n	2cd4e <_realloc_r+0x1a>
   2cd4c:	e09e      	b.n	2ce8c <_realloc_r+0x158>
   2cd4e:	0037      	movs	r7, r6
   2cd50:	9801      	ldr	r0, [sp, #4]
   2cd52:	3f08      	subs	r7, #8
   2cd54:	f7ff f94c 	bl	2bff0 <__malloc_lock>
   2cd58:	687a      	ldr	r2, [r7, #4]
   2cd5a:	2303      	movs	r3, #3
   2cd5c:	0014      	movs	r4, r2
   2cd5e:	439c      	bics	r4, r3
   2cd60:	002b      	movs	r3, r5
   2cd62:	330b      	adds	r3, #11
   2cd64:	46b9      	mov	r9, r7
   2cd66:	2b16      	cmp	r3, #22
   2cd68:	d847      	bhi.n	2cdfa <_realloc_r+0xc6>
   2cd6a:	2110      	movs	r1, #16
   2cd6c:	2310      	movs	r3, #16
   2cd6e:	4688      	mov	r8, r1
   2cd70:	4545      	cmp	r5, r8
   2cd72:	d846      	bhi.n	2ce02 <_realloc_r+0xce>
   2cd74:	429c      	cmp	r4, r3
   2cd76:	da49      	bge.n	2ce0c <_realloc_r+0xd8>
   2cd78:	49cc      	ldr	r1, [pc, #816]	; (2d0ac <_realloc_r+0x378>)
   2cd7a:	1938      	adds	r0, r7, r4
   2cd7c:	468b      	mov	fp, r1
   2cd7e:	6889      	ldr	r1, [r1, #8]
   2cd80:	9002      	str	r0, [sp, #8]
   2cd82:	4288      	cmp	r0, r1
   2cd84:	d100      	bne.n	2cd88 <_realloc_r+0x54>
   2cd86:	e0c2      	b.n	2cf0e <_realloc_r+0x1da>
   2cd88:	2101      	movs	r1, #1
   2cd8a:	468a      	mov	sl, r1
   2cd8c:	6840      	ldr	r0, [r0, #4]
   2cd8e:	0001      	movs	r1, r0
   2cd90:	9003      	str	r0, [sp, #12]
   2cd92:	4650      	mov	r0, sl
   2cd94:	4381      	bics	r1, r0
   2cd96:	468c      	mov	ip, r1
   2cd98:	9902      	ldr	r1, [sp, #8]
   2cd9a:	468b      	mov	fp, r1
   2cd9c:	44dc      	add	ip, fp
   2cd9e:	4661      	mov	r1, ip
   2cda0:	6849      	ldr	r1, [r1, #4]
   2cda2:	4201      	tst	r1, r0
   2cda4:	d04d      	beq.n	2ce42 <_realloc_r+0x10e>
   2cda6:	4210      	tst	r0, r2
   2cda8:	d100      	bne.n	2cdac <_realloc_r+0x78>
   2cdaa:	e0a2      	b.n	2cef2 <_realloc_r+0x1be>
   2cdac:	0029      	movs	r1, r5
   2cdae:	9801      	ldr	r0, [sp, #4]
   2cdb0:	f7fe fe04 	bl	2b9bc <_malloc_r>
   2cdb4:	1e05      	subs	r5, r0, #0
   2cdb6:	d039      	beq.n	2ce2c <_realloc_r+0xf8>
   2cdb8:	2301      	movs	r3, #1
   2cdba:	0002      	movs	r2, r0
   2cdbc:	6879      	ldr	r1, [r7, #4]
   2cdbe:	3a08      	subs	r2, #8
   2cdc0:	4399      	bics	r1, r3
   2cdc2:	187f      	adds	r7, r7, r1
   2cdc4:	42ba      	cmp	r2, r7
   2cdc6:	d100      	bne.n	2cdca <_realloc_r+0x96>
   2cdc8:	e12e      	b.n	2d028 <_realloc_r+0x2f4>
   2cdca:	1f22      	subs	r2, r4, #4
   2cdcc:	2a24      	cmp	r2, #36	; 0x24
   2cdce:	d900      	bls.n	2cdd2 <_realloc_r+0x9e>
   2cdd0:	e114      	b.n	2cffc <_realloc_r+0x2c8>
   2cdd2:	2a13      	cmp	r2, #19
   2cdd4:	d900      	bls.n	2cdd8 <_realloc_r+0xa4>
   2cdd6:	e0e8      	b.n	2cfaa <_realloc_r+0x276>
   2cdd8:	0003      	movs	r3, r0
   2cdda:	0032      	movs	r2, r6
   2cddc:	6811      	ldr	r1, [r2, #0]
   2cdde:	6019      	str	r1, [r3, #0]
   2cde0:	6851      	ldr	r1, [r2, #4]
   2cde2:	6059      	str	r1, [r3, #4]
   2cde4:	6892      	ldr	r2, [r2, #8]
   2cde6:	609a      	str	r2, [r3, #8]
   2cde8:	9c01      	ldr	r4, [sp, #4]
   2cdea:	0031      	movs	r1, r6
   2cdec:	0020      	movs	r0, r4
   2cdee:	f7ff fe5d 	bl	2caac <_free_r>
   2cdf2:	0020      	movs	r0, r4
   2cdf4:	f7ff f904 	bl	2c000 <__malloc_unlock>
   2cdf8:	e01b      	b.n	2ce32 <_realloc_r+0xfe>
   2cdfa:	2107      	movs	r1, #7
   2cdfc:	438b      	bics	r3, r1
   2cdfe:	4698      	mov	r8, r3
   2ce00:	d5b6      	bpl.n	2cd70 <_realloc_r+0x3c>
   2ce02:	230c      	movs	r3, #12
   2ce04:	9a01      	ldr	r2, [sp, #4]
   2ce06:	2500      	movs	r5, #0
   2ce08:	6013      	str	r3, [r2, #0]
   2ce0a:	e012      	b.n	2ce32 <_realloc_r+0xfe>
   2ce0c:	0035      	movs	r5, r6
   2ce0e:	4643      	mov	r3, r8
   2ce10:	1ae3      	subs	r3, r4, r3
   2ce12:	2b0f      	cmp	r3, #15
   2ce14:	d825      	bhi.n	2ce62 <_realloc_r+0x12e>
   2ce16:	464b      	mov	r3, r9
   2ce18:	2201      	movs	r2, #1
   2ce1a:	4649      	mov	r1, r9
   2ce1c:	685b      	ldr	r3, [r3, #4]
   2ce1e:	4013      	ands	r3, r2
   2ce20:	4323      	orrs	r3, r4
   2ce22:	604b      	str	r3, [r1, #4]
   2ce24:	444c      	add	r4, r9
   2ce26:	6863      	ldr	r3, [r4, #4]
   2ce28:	431a      	orrs	r2, r3
   2ce2a:	6062      	str	r2, [r4, #4]
   2ce2c:	9801      	ldr	r0, [sp, #4]
   2ce2e:	f7ff f8e7 	bl	2c000 <__malloc_unlock>
   2ce32:	0028      	movs	r0, r5
   2ce34:	b005      	add	sp, #20
   2ce36:	bc3c      	pop	{r2, r3, r4, r5}
   2ce38:	4690      	mov	r8, r2
   2ce3a:	4699      	mov	r9, r3
   2ce3c:	46a2      	mov	sl, r4
   2ce3e:	46ab      	mov	fp, r5
   2ce40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ce42:	2103      	movs	r1, #3
   2ce44:	9803      	ldr	r0, [sp, #12]
   2ce46:	468c      	mov	ip, r1
   2ce48:	4388      	bics	r0, r1
   2ce4a:	1821      	adds	r1, r4, r0
   2ce4c:	468b      	mov	fp, r1
   2ce4e:	4299      	cmp	r1, r3
   2ce50:	db21      	blt.n	2ce96 <_realloc_r+0x162>
   2ce52:	9a02      	ldr	r2, [sp, #8]
   2ce54:	0035      	movs	r5, r6
   2ce56:	68d3      	ldr	r3, [r2, #12]
   2ce58:	6892      	ldr	r2, [r2, #8]
   2ce5a:	465c      	mov	r4, fp
   2ce5c:	60d3      	str	r3, [r2, #12]
   2ce5e:	609a      	str	r2, [r3, #8]
   2ce60:	e7d5      	b.n	2ce0e <_realloc_r+0xda>
   2ce62:	464a      	mov	r2, r9
   2ce64:	2001      	movs	r0, #1
   2ce66:	4646      	mov	r6, r8
   2ce68:	6852      	ldr	r2, [r2, #4]
   2ce6a:	4649      	mov	r1, r9
   2ce6c:	4002      	ands	r2, r0
   2ce6e:	4332      	orrs	r2, r6
   2ce70:	464e      	mov	r6, r9
   2ce72:	4441      	add	r1, r8
   2ce74:	4303      	orrs	r3, r0
   2ce76:	6072      	str	r2, [r6, #4]
   2ce78:	444c      	add	r4, r9
   2ce7a:	604b      	str	r3, [r1, #4]
   2ce7c:	6863      	ldr	r3, [r4, #4]
   2ce7e:	3108      	adds	r1, #8
   2ce80:	4318      	orrs	r0, r3
   2ce82:	6060      	str	r0, [r4, #4]
   2ce84:	9801      	ldr	r0, [sp, #4]
   2ce86:	f7ff fe11 	bl	2caac <_free_r>
   2ce8a:	e7cf      	b.n	2ce2c <_realloc_r+0xf8>
   2ce8c:	0011      	movs	r1, r2
   2ce8e:	f7fe fd95 	bl	2b9bc <_malloc_r>
   2ce92:	0005      	movs	r5, r0
   2ce94:	e7cd      	b.n	2ce32 <_realloc_r+0xfe>
   2ce96:	4651      	mov	r1, sl
   2ce98:	4211      	tst	r1, r2
   2ce9a:	d000      	beq.n	2ce9e <_realloc_r+0x16a>
   2ce9c:	e786      	b.n	2cdac <_realloc_r+0x78>
   2ce9e:	4661      	mov	r1, ip
   2cea0:	683a      	ldr	r2, [r7, #0]
   2cea2:	1aba      	subs	r2, r7, r2
   2cea4:	4692      	mov	sl, r2
   2cea6:	6852      	ldr	r2, [r2, #4]
   2cea8:	438a      	bics	r2, r1
   2ceaa:	1880      	adds	r0, r0, r2
   2ceac:	4683      	mov	fp, r0
   2ceae:	44a3      	add	fp, r4
   2ceb0:	459b      	cmp	fp, r3
   2ceb2:	db26      	blt.n	2cf02 <_realloc_r+0x1ce>
   2ceb4:	9a02      	ldr	r2, [sp, #8]
   2ceb6:	68d3      	ldr	r3, [r2, #12]
   2ceb8:	6892      	ldr	r2, [r2, #8]
   2ceba:	60d3      	str	r3, [r2, #12]
   2cebc:	609a      	str	r2, [r3, #8]
   2cebe:	4653      	mov	r3, sl
   2cec0:	4652      	mov	r2, sl
   2cec2:	4655      	mov	r5, sl
   2cec4:	6892      	ldr	r2, [r2, #8]
   2cec6:	68db      	ldr	r3, [r3, #12]
   2cec8:	3508      	adds	r5, #8
   2ceca:	60d3      	str	r3, [r2, #12]
   2cecc:	609a      	str	r2, [r3, #8]
   2cece:	1f22      	subs	r2, r4, #4
   2ced0:	2a24      	cmp	r2, #36	; 0x24
   2ced2:	d900      	bls.n	2ced6 <_realloc_r+0x1a2>
   2ced4:	e096      	b.n	2d004 <_realloc_r+0x2d0>
   2ced6:	2a13      	cmp	r2, #19
   2ced8:	d972      	bls.n	2cfc0 <_realloc_r+0x28c>
   2ceda:	4653      	mov	r3, sl
   2cedc:	6831      	ldr	r1, [r6, #0]
   2cede:	6099      	str	r1, [r3, #8]
   2cee0:	6871      	ldr	r1, [r6, #4]
   2cee2:	60d9      	str	r1, [r3, #12]
   2cee4:	2a1b      	cmp	r2, #27
   2cee6:	d900      	bls.n	2ceea <_realloc_r+0x1b6>
   2cee8:	e0a4      	b.n	2d034 <_realloc_r+0x300>
   2ceea:	0032      	movs	r2, r6
   2ceec:	3310      	adds	r3, #16
   2ceee:	3208      	adds	r2, #8
   2cef0:	e068      	b.n	2cfc4 <_realloc_r+0x290>
   2cef2:	683a      	ldr	r2, [r7, #0]
   2cef4:	1aba      	subs	r2, r7, r2
   2cef6:	4692      	mov	sl, r2
   2cef8:	4651      	mov	r1, sl
   2cefa:	2203      	movs	r2, #3
   2cefc:	6849      	ldr	r1, [r1, #4]
   2cefe:	4391      	bics	r1, r2
   2cf00:	000a      	movs	r2, r1
   2cf02:	4693      	mov	fp, r2
   2cf04:	44a3      	add	fp, r4
   2cf06:	459b      	cmp	fp, r3
   2cf08:	da00      	bge.n	2cf0c <_realloc_r+0x1d8>
   2cf0a:	e74f      	b.n	2cdac <_realloc_r+0x78>
   2cf0c:	e7d7      	b.n	2cebe <_realloc_r+0x18a>
   2cf0e:	2003      	movs	r0, #3
   2cf10:	9902      	ldr	r1, [sp, #8]
   2cf12:	4684      	mov	ip, r0
   2cf14:	6849      	ldr	r1, [r1, #4]
   2cf16:	4381      	bics	r1, r0
   2cf18:	4640      	mov	r0, r8
   2cf1a:	1909      	adds	r1, r1, r4
   2cf1c:	3010      	adds	r0, #16
   2cf1e:	9002      	str	r0, [sp, #8]
   2cf20:	4281      	cmp	r1, r0
   2cf22:	da58      	bge.n	2cfd6 <_realloc_r+0x2a2>
   2cf24:	07d2      	lsls	r2, r2, #31
   2cf26:	d500      	bpl.n	2cf2a <_realloc_r+0x1f6>
   2cf28:	e740      	b.n	2cdac <_realloc_r+0x78>
   2cf2a:	4660      	mov	r0, ip
   2cf2c:	683a      	ldr	r2, [r7, #0]
   2cf2e:	1aba      	subs	r2, r7, r2
   2cf30:	4692      	mov	sl, r2
   2cf32:	6852      	ldr	r2, [r2, #4]
   2cf34:	4382      	bics	r2, r0
   2cf36:	9802      	ldr	r0, [sp, #8]
   2cf38:	1851      	adds	r1, r2, r1
   2cf3a:	9103      	str	r1, [sp, #12]
   2cf3c:	4288      	cmp	r0, r1
   2cf3e:	dce0      	bgt.n	2cf02 <_realloc_r+0x1ce>
   2cf40:	4653      	mov	r3, sl
   2cf42:	4652      	mov	r2, sl
   2cf44:	4655      	mov	r5, sl
   2cf46:	6892      	ldr	r2, [r2, #8]
   2cf48:	68db      	ldr	r3, [r3, #12]
   2cf4a:	3508      	adds	r5, #8
   2cf4c:	60d3      	str	r3, [r2, #12]
   2cf4e:	609a      	str	r2, [r3, #8]
   2cf50:	1f22      	subs	r2, r4, #4
   2cf52:	2a24      	cmp	r2, #36	; 0x24
   2cf54:	d900      	bls.n	2cf58 <_realloc_r+0x224>
   2cf56:	e08e      	b.n	2d076 <_realloc_r+0x342>
   2cf58:	2a13      	cmp	r2, #19
   2cf5a:	d800      	bhi.n	2cf5e <_realloc_r+0x22a>
   2cf5c:	e088      	b.n	2d070 <_realloc_r+0x33c>
   2cf5e:	4653      	mov	r3, sl
   2cf60:	6831      	ldr	r1, [r6, #0]
   2cf62:	6099      	str	r1, [r3, #8]
   2cf64:	6871      	ldr	r1, [r6, #4]
   2cf66:	60d9      	str	r1, [r3, #12]
   2cf68:	2a1b      	cmp	r2, #27
   2cf6a:	d900      	bls.n	2cf6e <_realloc_r+0x23a>
   2cf6c:	e088      	b.n	2d080 <_realloc_r+0x34c>
   2cf6e:	0032      	movs	r2, r6
   2cf70:	3310      	adds	r3, #16
   2cf72:	3208      	adds	r2, #8
   2cf74:	6811      	ldr	r1, [r2, #0]
   2cf76:	6019      	str	r1, [r3, #0]
   2cf78:	6851      	ldr	r1, [r2, #4]
   2cf7a:	6059      	str	r1, [r3, #4]
   2cf7c:	6892      	ldr	r2, [r2, #8]
   2cf7e:	609a      	str	r2, [r3, #8]
   2cf80:	4651      	mov	r1, sl
   2cf82:	465b      	mov	r3, fp
   2cf84:	4642      	mov	r2, r8
   2cf86:	4441      	add	r1, r8
   2cf88:	6099      	str	r1, [r3, #8]
   2cf8a:	9b03      	ldr	r3, [sp, #12]
   2cf8c:	9801      	ldr	r0, [sp, #4]
   2cf8e:	1a9a      	subs	r2, r3, r2
   2cf90:	2301      	movs	r3, #1
   2cf92:	431a      	orrs	r2, r3
   2cf94:	604a      	str	r2, [r1, #4]
   2cf96:	4652      	mov	r2, sl
   2cf98:	6852      	ldr	r2, [r2, #4]
   2cf9a:	4013      	ands	r3, r2
   2cf9c:	4642      	mov	r2, r8
   2cf9e:	4313      	orrs	r3, r2
   2cfa0:	4652      	mov	r2, sl
   2cfa2:	6053      	str	r3, [r2, #4]
   2cfa4:	f7ff f82c 	bl	2c000 <__malloc_unlock>
   2cfa8:	e743      	b.n	2ce32 <_realloc_r+0xfe>
   2cfaa:	6833      	ldr	r3, [r6, #0]
   2cfac:	6003      	str	r3, [r0, #0]
   2cfae:	6873      	ldr	r3, [r6, #4]
   2cfb0:	6043      	str	r3, [r0, #4]
   2cfb2:	2a1b      	cmp	r2, #27
   2cfb4:	d82d      	bhi.n	2d012 <_realloc_r+0x2de>
   2cfb6:	0003      	movs	r3, r0
   2cfb8:	0032      	movs	r2, r6
   2cfba:	3308      	adds	r3, #8
   2cfbc:	3208      	adds	r2, #8
   2cfbe:	e70d      	b.n	2cddc <_realloc_r+0xa8>
   2cfc0:	002b      	movs	r3, r5
   2cfc2:	0032      	movs	r2, r6
   2cfc4:	6811      	ldr	r1, [r2, #0]
   2cfc6:	465c      	mov	r4, fp
   2cfc8:	6019      	str	r1, [r3, #0]
   2cfca:	6851      	ldr	r1, [r2, #4]
   2cfcc:	46d1      	mov	r9, sl
   2cfce:	6059      	str	r1, [r3, #4]
   2cfd0:	6892      	ldr	r2, [r2, #8]
   2cfd2:	609a      	str	r2, [r3, #8]
   2cfd4:	e71b      	b.n	2ce0e <_realloc_r+0xda>
   2cfd6:	4643      	mov	r3, r8
   2cfd8:	18fa      	adds	r2, r7, r3
   2cfda:	465b      	mov	r3, fp
   2cfdc:	609a      	str	r2, [r3, #8]
   2cfde:	4643      	mov	r3, r8
   2cfe0:	1ac9      	subs	r1, r1, r3
   2cfe2:	2301      	movs	r3, #1
   2cfe4:	4319      	orrs	r1, r3
   2cfe6:	6051      	str	r1, [r2, #4]
   2cfe8:	687a      	ldr	r2, [r7, #4]
   2cfea:	9801      	ldr	r0, [sp, #4]
   2cfec:	4013      	ands	r3, r2
   2cfee:	4642      	mov	r2, r8
   2cff0:	4313      	orrs	r3, r2
   2cff2:	607b      	str	r3, [r7, #4]
   2cff4:	f7ff f804 	bl	2c000 <__malloc_unlock>
   2cff8:	0035      	movs	r5, r6
   2cffa:	e71a      	b.n	2ce32 <_realloc_r+0xfe>
   2cffc:	0031      	movs	r1, r6
   2cffe:	f7ff fe49 	bl	2cc94 <memmove>
   2d002:	e6f1      	b.n	2cde8 <_realloc_r+0xb4>
   2d004:	0031      	movs	r1, r6
   2d006:	0028      	movs	r0, r5
   2d008:	f7ff fe44 	bl	2cc94 <memmove>
   2d00c:	465c      	mov	r4, fp
   2d00e:	46d1      	mov	r9, sl
   2d010:	e6fd      	b.n	2ce0e <_realloc_r+0xda>
   2d012:	68b3      	ldr	r3, [r6, #8]
   2d014:	6083      	str	r3, [r0, #8]
   2d016:	68f3      	ldr	r3, [r6, #12]
   2d018:	60c3      	str	r3, [r0, #12]
   2d01a:	2a24      	cmp	r2, #36	; 0x24
   2d01c:	d015      	beq.n	2d04a <_realloc_r+0x316>
   2d01e:	0003      	movs	r3, r0
   2d020:	0032      	movs	r2, r6
   2d022:	3310      	adds	r3, #16
   2d024:	3210      	adds	r2, #16
   2d026:	e6d9      	b.n	2cddc <_realloc_r+0xa8>
   2d028:	6853      	ldr	r3, [r2, #4]
   2d02a:	2203      	movs	r2, #3
   2d02c:	4393      	bics	r3, r2
   2d02e:	18e4      	adds	r4, r4, r3
   2d030:	0035      	movs	r5, r6
   2d032:	e6ec      	b.n	2ce0e <_realloc_r+0xda>
   2d034:	4653      	mov	r3, sl
   2d036:	68b1      	ldr	r1, [r6, #8]
   2d038:	6119      	str	r1, [r3, #16]
   2d03a:	68f1      	ldr	r1, [r6, #12]
   2d03c:	6159      	str	r1, [r3, #20]
   2d03e:	2a24      	cmp	r2, #36	; 0x24
   2d040:	d00c      	beq.n	2d05c <_realloc_r+0x328>
   2d042:	0032      	movs	r2, r6
   2d044:	3318      	adds	r3, #24
   2d046:	3210      	adds	r2, #16
   2d048:	e7bc      	b.n	2cfc4 <_realloc_r+0x290>
   2d04a:	6933      	ldr	r3, [r6, #16]
   2d04c:	0032      	movs	r2, r6
   2d04e:	6103      	str	r3, [r0, #16]
   2d050:	0003      	movs	r3, r0
   2d052:	6971      	ldr	r1, [r6, #20]
   2d054:	3318      	adds	r3, #24
   2d056:	3218      	adds	r2, #24
   2d058:	6141      	str	r1, [r0, #20]
   2d05a:	e6bf      	b.n	2cddc <_realloc_r+0xa8>
   2d05c:	4653      	mov	r3, sl
   2d05e:	6932      	ldr	r2, [r6, #16]
   2d060:	4651      	mov	r1, sl
   2d062:	619a      	str	r2, [r3, #24]
   2d064:	0032      	movs	r2, r6
   2d066:	6970      	ldr	r0, [r6, #20]
   2d068:	3320      	adds	r3, #32
   2d06a:	3218      	adds	r2, #24
   2d06c:	61c8      	str	r0, [r1, #28]
   2d06e:	e7a9      	b.n	2cfc4 <_realloc_r+0x290>
   2d070:	002b      	movs	r3, r5
   2d072:	0032      	movs	r2, r6
   2d074:	e77e      	b.n	2cf74 <_realloc_r+0x240>
   2d076:	0031      	movs	r1, r6
   2d078:	0028      	movs	r0, r5
   2d07a:	f7ff fe0b 	bl	2cc94 <memmove>
   2d07e:	e77f      	b.n	2cf80 <_realloc_r+0x24c>
   2d080:	4653      	mov	r3, sl
   2d082:	68b1      	ldr	r1, [r6, #8]
   2d084:	6119      	str	r1, [r3, #16]
   2d086:	68f1      	ldr	r1, [r6, #12]
   2d088:	6159      	str	r1, [r3, #20]
   2d08a:	2a24      	cmp	r2, #36	; 0x24
   2d08c:	d003      	beq.n	2d096 <_realloc_r+0x362>
   2d08e:	0032      	movs	r2, r6
   2d090:	3318      	adds	r3, #24
   2d092:	3210      	adds	r2, #16
   2d094:	e76e      	b.n	2cf74 <_realloc_r+0x240>
   2d096:	4653      	mov	r3, sl
   2d098:	6932      	ldr	r2, [r6, #16]
   2d09a:	4651      	mov	r1, sl
   2d09c:	619a      	str	r2, [r3, #24]
   2d09e:	0032      	movs	r2, r6
   2d0a0:	6970      	ldr	r0, [r6, #20]
   2d0a2:	3320      	adds	r3, #32
   2d0a4:	3218      	adds	r2, #24
   2d0a6:	61c8      	str	r0, [r1, #28]
   2d0a8:	e764      	b.n	2cf74 <_realloc_r+0x240>
   2d0aa:	46c0      	nop			; (mov r8, r8)
   2d0ac:	20000614 	.word	0x20000614

0002d0b0 <__ascii_wctomb>:
   2d0b0:	2900      	cmp	r1, #0
   2d0b2:	d004      	beq.n	2d0be <__ascii_wctomb+0xe>
   2d0b4:	2aff      	cmp	r2, #255	; 0xff
   2d0b6:	d804      	bhi.n	2d0c2 <__ascii_wctomb+0x12>
   2d0b8:	2001      	movs	r0, #1
   2d0ba:	700a      	strb	r2, [r1, #0]
   2d0bc:	4770      	bx	lr
   2d0be:	2000      	movs	r0, #0
   2d0c0:	e7fc      	b.n	2d0bc <__ascii_wctomb+0xc>
   2d0c2:	238a      	movs	r3, #138	; 0x8a
   2d0c4:	6003      	str	r3, [r0, #0]
   2d0c6:	2001      	movs	r0, #1
   2d0c8:	4240      	negs	r0, r0
   2d0ca:	e7f7      	b.n	2d0bc <__ascii_wctomb+0xc>

0002d0cc <__aeabi_uldivmod>:
   2d0cc:	2b00      	cmp	r3, #0
   2d0ce:	d111      	bne.n	2d0f4 <__aeabi_uldivmod+0x28>
   2d0d0:	2a00      	cmp	r2, #0
   2d0d2:	d10f      	bne.n	2d0f4 <__aeabi_uldivmod+0x28>
   2d0d4:	2900      	cmp	r1, #0
   2d0d6:	d100      	bne.n	2d0da <__aeabi_uldivmod+0xe>
   2d0d8:	2800      	cmp	r0, #0
   2d0da:	d002      	beq.n	2d0e2 <__aeabi_uldivmod+0x16>
   2d0dc:	2100      	movs	r1, #0
   2d0de:	43c9      	mvns	r1, r1
   2d0e0:	1c08      	adds	r0, r1, #0
   2d0e2:	b407      	push	{r0, r1, r2}
   2d0e4:	4802      	ldr	r0, [pc, #8]	; (2d0f0 <__aeabi_uldivmod+0x24>)
   2d0e6:	a102      	add	r1, pc, #8	; (adr r1, 2d0f0 <__aeabi_uldivmod+0x24>)
   2d0e8:	1840      	adds	r0, r0, r1
   2d0ea:	9002      	str	r0, [sp, #8]
   2d0ec:	bd03      	pop	{r0, r1, pc}
   2d0ee:	46c0      	nop			; (mov r8, r8)
   2d0f0:	ffff8b35 	.word	0xffff8b35
   2d0f4:	b403      	push	{r0, r1}
   2d0f6:	4668      	mov	r0, sp
   2d0f8:	b501      	push	{r0, lr}
   2d0fa:	9802      	ldr	r0, [sp, #8]
   2d0fc:	f000 f806 	bl	2d10c <__udivmoddi4>
   2d100:	9b01      	ldr	r3, [sp, #4]
   2d102:	469e      	mov	lr, r3
   2d104:	b002      	add	sp, #8
   2d106:	bc0c      	pop	{r2, r3}
   2d108:	4770      	bx	lr
   2d10a:	46c0      	nop			; (mov r8, r8)

0002d10c <__udivmoddi4>:
   2d10c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d10e:	4657      	mov	r7, sl
   2d110:	464e      	mov	r6, r9
   2d112:	4645      	mov	r5, r8
   2d114:	46de      	mov	lr, fp
   2d116:	b5e0      	push	{r5, r6, r7, lr}
   2d118:	0004      	movs	r4, r0
   2d11a:	b083      	sub	sp, #12
   2d11c:	000d      	movs	r5, r1
   2d11e:	4692      	mov	sl, r2
   2d120:	4699      	mov	r9, r3
   2d122:	428b      	cmp	r3, r1
   2d124:	d82f      	bhi.n	2d186 <__udivmoddi4+0x7a>
   2d126:	d02c      	beq.n	2d182 <__udivmoddi4+0x76>
   2d128:	4649      	mov	r1, r9
   2d12a:	4650      	mov	r0, sl
   2d12c:	f000 f8ae 	bl	2d28c <__clzdi2>
   2d130:	0029      	movs	r1, r5
   2d132:	0006      	movs	r6, r0
   2d134:	0020      	movs	r0, r4
   2d136:	f000 f8a9 	bl	2d28c <__clzdi2>
   2d13a:	1a33      	subs	r3, r6, r0
   2d13c:	4698      	mov	r8, r3
   2d13e:	3b20      	subs	r3, #32
   2d140:	469b      	mov	fp, r3
   2d142:	d500      	bpl.n	2d146 <__udivmoddi4+0x3a>
   2d144:	e074      	b.n	2d230 <__udivmoddi4+0x124>
   2d146:	4653      	mov	r3, sl
   2d148:	465a      	mov	r2, fp
   2d14a:	4093      	lsls	r3, r2
   2d14c:	001f      	movs	r7, r3
   2d14e:	4653      	mov	r3, sl
   2d150:	4642      	mov	r2, r8
   2d152:	4093      	lsls	r3, r2
   2d154:	001e      	movs	r6, r3
   2d156:	42af      	cmp	r7, r5
   2d158:	d829      	bhi.n	2d1ae <__udivmoddi4+0xa2>
   2d15a:	d026      	beq.n	2d1aa <__udivmoddi4+0x9e>
   2d15c:	465b      	mov	r3, fp
   2d15e:	1ba4      	subs	r4, r4, r6
   2d160:	41bd      	sbcs	r5, r7
   2d162:	2b00      	cmp	r3, #0
   2d164:	da00      	bge.n	2d168 <__udivmoddi4+0x5c>
   2d166:	e079      	b.n	2d25c <__udivmoddi4+0x150>
   2d168:	2200      	movs	r2, #0
   2d16a:	2300      	movs	r3, #0
   2d16c:	9200      	str	r2, [sp, #0]
   2d16e:	9301      	str	r3, [sp, #4]
   2d170:	2301      	movs	r3, #1
   2d172:	465a      	mov	r2, fp
   2d174:	4093      	lsls	r3, r2
   2d176:	9301      	str	r3, [sp, #4]
   2d178:	2301      	movs	r3, #1
   2d17a:	4642      	mov	r2, r8
   2d17c:	4093      	lsls	r3, r2
   2d17e:	9300      	str	r3, [sp, #0]
   2d180:	e019      	b.n	2d1b6 <__udivmoddi4+0xaa>
   2d182:	4282      	cmp	r2, r0
   2d184:	d9d0      	bls.n	2d128 <__udivmoddi4+0x1c>
   2d186:	2200      	movs	r2, #0
   2d188:	2300      	movs	r3, #0
   2d18a:	9200      	str	r2, [sp, #0]
   2d18c:	9301      	str	r3, [sp, #4]
   2d18e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d190:	2b00      	cmp	r3, #0
   2d192:	d001      	beq.n	2d198 <__udivmoddi4+0x8c>
   2d194:	601c      	str	r4, [r3, #0]
   2d196:	605d      	str	r5, [r3, #4]
   2d198:	9800      	ldr	r0, [sp, #0]
   2d19a:	9901      	ldr	r1, [sp, #4]
   2d19c:	b003      	add	sp, #12
   2d19e:	bc3c      	pop	{r2, r3, r4, r5}
   2d1a0:	4690      	mov	r8, r2
   2d1a2:	4699      	mov	r9, r3
   2d1a4:	46a2      	mov	sl, r4
   2d1a6:	46ab      	mov	fp, r5
   2d1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d1aa:	42a3      	cmp	r3, r4
   2d1ac:	d9d6      	bls.n	2d15c <__udivmoddi4+0x50>
   2d1ae:	2200      	movs	r2, #0
   2d1b0:	2300      	movs	r3, #0
   2d1b2:	9200      	str	r2, [sp, #0]
   2d1b4:	9301      	str	r3, [sp, #4]
   2d1b6:	4643      	mov	r3, r8
   2d1b8:	2b00      	cmp	r3, #0
   2d1ba:	d0e8      	beq.n	2d18e <__udivmoddi4+0x82>
   2d1bc:	07fb      	lsls	r3, r7, #31
   2d1be:	0872      	lsrs	r2, r6, #1
   2d1c0:	431a      	orrs	r2, r3
   2d1c2:	4646      	mov	r6, r8
   2d1c4:	087b      	lsrs	r3, r7, #1
   2d1c6:	e00e      	b.n	2d1e6 <__udivmoddi4+0xda>
   2d1c8:	42ab      	cmp	r3, r5
   2d1ca:	d101      	bne.n	2d1d0 <__udivmoddi4+0xc4>
   2d1cc:	42a2      	cmp	r2, r4
   2d1ce:	d80c      	bhi.n	2d1ea <__udivmoddi4+0xde>
   2d1d0:	1aa4      	subs	r4, r4, r2
   2d1d2:	419d      	sbcs	r5, r3
   2d1d4:	2001      	movs	r0, #1
   2d1d6:	1924      	adds	r4, r4, r4
   2d1d8:	416d      	adcs	r5, r5
   2d1da:	2100      	movs	r1, #0
   2d1dc:	3e01      	subs	r6, #1
   2d1de:	1824      	adds	r4, r4, r0
   2d1e0:	414d      	adcs	r5, r1
   2d1e2:	2e00      	cmp	r6, #0
   2d1e4:	d006      	beq.n	2d1f4 <__udivmoddi4+0xe8>
   2d1e6:	42ab      	cmp	r3, r5
   2d1e8:	d9ee      	bls.n	2d1c8 <__udivmoddi4+0xbc>
   2d1ea:	3e01      	subs	r6, #1
   2d1ec:	1924      	adds	r4, r4, r4
   2d1ee:	416d      	adcs	r5, r5
   2d1f0:	2e00      	cmp	r6, #0
   2d1f2:	d1f8      	bne.n	2d1e6 <__udivmoddi4+0xda>
   2d1f4:	465b      	mov	r3, fp
   2d1f6:	9800      	ldr	r0, [sp, #0]
   2d1f8:	9901      	ldr	r1, [sp, #4]
   2d1fa:	1900      	adds	r0, r0, r4
   2d1fc:	4169      	adcs	r1, r5
   2d1fe:	2b00      	cmp	r3, #0
   2d200:	db22      	blt.n	2d248 <__udivmoddi4+0x13c>
   2d202:	002b      	movs	r3, r5
   2d204:	465a      	mov	r2, fp
   2d206:	40d3      	lsrs	r3, r2
   2d208:	002a      	movs	r2, r5
   2d20a:	4644      	mov	r4, r8
   2d20c:	40e2      	lsrs	r2, r4
   2d20e:	001c      	movs	r4, r3
   2d210:	465b      	mov	r3, fp
   2d212:	0015      	movs	r5, r2
   2d214:	2b00      	cmp	r3, #0
   2d216:	db2c      	blt.n	2d272 <__udivmoddi4+0x166>
   2d218:	0026      	movs	r6, r4
   2d21a:	409e      	lsls	r6, r3
   2d21c:	0033      	movs	r3, r6
   2d21e:	0026      	movs	r6, r4
   2d220:	4647      	mov	r7, r8
   2d222:	40be      	lsls	r6, r7
   2d224:	0032      	movs	r2, r6
   2d226:	1a80      	subs	r0, r0, r2
   2d228:	4199      	sbcs	r1, r3
   2d22a:	9000      	str	r0, [sp, #0]
   2d22c:	9101      	str	r1, [sp, #4]
   2d22e:	e7ae      	b.n	2d18e <__udivmoddi4+0x82>
   2d230:	4642      	mov	r2, r8
   2d232:	2320      	movs	r3, #32
   2d234:	1a9b      	subs	r3, r3, r2
   2d236:	4652      	mov	r2, sl
   2d238:	40da      	lsrs	r2, r3
   2d23a:	4641      	mov	r1, r8
   2d23c:	0013      	movs	r3, r2
   2d23e:	464a      	mov	r2, r9
   2d240:	408a      	lsls	r2, r1
   2d242:	0017      	movs	r7, r2
   2d244:	431f      	orrs	r7, r3
   2d246:	e782      	b.n	2d14e <__udivmoddi4+0x42>
   2d248:	4642      	mov	r2, r8
   2d24a:	2320      	movs	r3, #32
   2d24c:	1a9b      	subs	r3, r3, r2
   2d24e:	002a      	movs	r2, r5
   2d250:	4646      	mov	r6, r8
   2d252:	409a      	lsls	r2, r3
   2d254:	0023      	movs	r3, r4
   2d256:	40f3      	lsrs	r3, r6
   2d258:	4313      	orrs	r3, r2
   2d25a:	e7d5      	b.n	2d208 <__udivmoddi4+0xfc>
   2d25c:	4642      	mov	r2, r8
   2d25e:	2320      	movs	r3, #32
   2d260:	2100      	movs	r1, #0
   2d262:	1a9b      	subs	r3, r3, r2
   2d264:	2200      	movs	r2, #0
   2d266:	9100      	str	r1, [sp, #0]
   2d268:	9201      	str	r2, [sp, #4]
   2d26a:	2201      	movs	r2, #1
   2d26c:	40da      	lsrs	r2, r3
   2d26e:	9201      	str	r2, [sp, #4]
   2d270:	e782      	b.n	2d178 <__udivmoddi4+0x6c>
   2d272:	4642      	mov	r2, r8
   2d274:	2320      	movs	r3, #32
   2d276:	0026      	movs	r6, r4
   2d278:	1a9b      	subs	r3, r3, r2
   2d27a:	40de      	lsrs	r6, r3
   2d27c:	002f      	movs	r7, r5
   2d27e:	46b4      	mov	ip, r6
   2d280:	4097      	lsls	r7, r2
   2d282:	4666      	mov	r6, ip
   2d284:	003b      	movs	r3, r7
   2d286:	4333      	orrs	r3, r6
   2d288:	e7c9      	b.n	2d21e <__udivmoddi4+0x112>
   2d28a:	46c0      	nop			; (mov r8, r8)

0002d28c <__clzdi2>:
   2d28c:	b510      	push	{r4, lr}
   2d28e:	2900      	cmp	r1, #0
   2d290:	d103      	bne.n	2d29a <__clzdi2+0xe>
   2d292:	f7f8 fd41 	bl	25d18 <__clzsi2>
   2d296:	3020      	adds	r0, #32
   2d298:	e002      	b.n	2d2a0 <__clzdi2+0x14>
   2d29a:	1c08      	adds	r0, r1, #0
   2d29c:	f7f8 fd3c 	bl	25d18 <__clzsi2>
   2d2a0:	bd10      	pop	{r4, pc}
   2d2a2:	46c0      	nop			; (mov r8, r8)
   2d2a4:	00006900 	.word	0x00006900
   2d2a8:	000069c4 	.word	0x000069c4
   2d2ac:	000069c4 	.word	0x000069c4
   2d2b0:	0000699a 	.word	0x0000699a
   2d2b4:	000069c4 	.word	0x000069c4
   2d2b8:	000069c4 	.word	0x000069c4
   2d2bc:	000069c4 	.word	0x000069c4
   2d2c0:	000069c4 	.word	0x000069c4
   2d2c4:	000069c4 	.word	0x000069c4
   2d2c8:	000069c4 	.word	0x000069c4
   2d2cc:	000069c4 	.word	0x000069c4
   2d2d0:	000069c4 	.word	0x000069c4
   2d2d4:	000069c4 	.word	0x000069c4
   2d2d8:	000069c4 	.word	0x000069c4
   2d2dc:	000069c4 	.word	0x000069c4
   2d2e0:	000069c4 	.word	0x000069c4
   2d2e4:	000069c4 	.word	0x000069c4
   2d2e8:	000069c4 	.word	0x000069c4
   2d2ec:	00006932 	.word	0x00006932
   2d2f0:	000069c4 	.word	0x000069c4
   2d2f4:	000069c4 	.word	0x000069c4
   2d2f8:	000069c4 	.word	0x000069c4
   2d2fc:	000069c4 	.word	0x000069c4
   2d300:	000069c4 	.word	0x000069c4
   2d304:	000069c4 	.word	0x000069c4
   2d308:	000069c4 	.word	0x000069c4
   2d30c:	000069bc 	.word	0x000069bc
   2d310:	00006798 	.word	0x00006798
   2d314:	000069c4 	.word	0x000069c4
   2d318:	000069c4 	.word	0x000069c4
   2d31c:	000068d0 	.word	0x000068d0
   2d320:	000069c4 	.word	0x000069c4
   2d324:	000069c4 	.word	0x000069c4
   2d328:	000069c4 	.word	0x000069c4
   2d32c:	000069c4 	.word	0x000069c4
   2d330:	000069c4 	.word	0x000069c4
   2d334:	000069c4 	.word	0x000069c4
   2d338:	00006896 	.word	0x00006896
   2d33c:	000069c4 	.word	0x000069c4
   2d340:	000069c4 	.word	0x000069c4
   2d344:	00006854 	.word	0x00006854
   2d348:	000069c4 	.word	0x000069c4
   2d34c:	000067f4 	.word	0x000067f4
   2d350:	000069c4 	.word	0x000069c4
   2d354:	000069c4 	.word	0x000069c4
   2d358:	000069c4 	.word	0x000069c4
   2d35c:	000069c4 	.word	0x000069c4
   2d360:	000067a8 	.word	0x000067a8
   2d364:	000069c4 	.word	0x000069c4
   2d368:	000069c4 	.word	0x000069c4
   2d36c:	000069c4 	.word	0x000069c4
   2d370:	000069c4 	.word	0x000069c4
   2d374:	000069c4 	.word	0x000069c4
   2d378:	000069c4 	.word	0x000069c4
   2d37c:	000069c4 	.word	0x000069c4
   2d380:	000069c4 	.word	0x000069c4
   2d384:	000069c4 	.word	0x000069c4
   2d388:	000069c4 	.word	0x000069c4
   2d38c:	000069c4 	.word	0x000069c4
   2d390:	000069c4 	.word	0x000069c4
   2d394:	000069c4 	.word	0x000069c4
   2d398:	000069c4 	.word	0x000069c4
   2d39c:	000069c4 	.word	0x000069c4
   2d3a0:	000069c4 	.word	0x000069c4
   2d3a4:	000069c4 	.word	0x000069c4
   2d3a8:	000069c4 	.word	0x000069c4
   2d3ac:	000069c4 	.word	0x000069c4
   2d3b0:	000069c4 	.word	0x000069c4
   2d3b4:	000069c4 	.word	0x000069c4
   2d3b8:	000069c4 	.word	0x000069c4
   2d3bc:	000069c4 	.word	0x000069c4
   2d3c0:	000069c4 	.word	0x000069c4
   2d3c4:	000069c4 	.word	0x000069c4
   2d3c8:	000069c4 	.word	0x000069c4
   2d3cc:	000069c4 	.word	0x000069c4
   2d3d0:	000069c4 	.word	0x000069c4
   2d3d4:	000069c4 	.word	0x000069c4
   2d3d8:	000069c4 	.word	0x000069c4
   2d3dc:	000069c4 	.word	0x000069c4
   2d3e0:	000069c4 	.word	0x000069c4
   2d3e4:	000069c4 	.word	0x000069c4
   2d3e8:	000069c4 	.word	0x000069c4
   2d3ec:	000069c4 	.word	0x000069c4
   2d3f0:	000069c4 	.word	0x000069c4
   2d3f4:	000069c4 	.word	0x000069c4
   2d3f8:	000069c4 	.word	0x000069c4
   2d3fc:	000069c4 	.word	0x000069c4
   2d400:	000069c4 	.word	0x000069c4
   2d404:	000069c4 	.word	0x000069c4
   2d408:	000069c4 	.word	0x000069c4
   2d40c:	0000692a 	.word	0x0000692a
   2d410:	31333231 	.word	0x31333231
   2d414:	32313332 	.word	0x32313332
   2d418:	33323133 	.word	0x33323133
   2d41c:	00000000 	.word	0x00000000
   2d420:	00008e60 	.word	0x00008e60
   2d424:	00008e6e 	.word	0x00008e6e
   2d428:	00008ee6 	.word	0x00008ee6
   2d42c:	00008e22 	.word	0x00008e22
   2d430:	00008e42 	.word	0x00008e42

0002d434 <_usb_device_irq_bits>:
   2d434:	00080004 00800070 01000001 00000200     ....p...........

0002d444 <_usb_endpoint_irq_bits>:
   2d444:	60100c03                                ...`

0002d448 <LfnOfs>:
   2d448:	07050301 12100e09 1c181614 0000001e     ................

0002d458 <excvt.4561>:
   2d458:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   2d468:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   2d478:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   2d488:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   2d498:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   2d4a8:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   2d4b8:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   2d4c8:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   2d4d8:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   2d4e8:	00005d5b                                []..

0002d4ec <Tbl>:
   2d4ec:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   2d4fc:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   2d50c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   2d51c:	00d600ff 00f800dc 00d800a3 019200d7     ................
   2d52c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   2d53c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   2d54c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   2d55c:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   2d56c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   2d57c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   2d58c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   2d59c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   2d5ac:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   2d5bc:	00da00de 00d900db 00dd00fd 00b400af     ................
   2d5cc:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   2d5dc:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0002d5ec <tbl_lower.4310>:
   2d5ec:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   2d5fc:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   2d60c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   2d61c:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   2d62c:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   2d63c:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   2d64c:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   2d65c:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   2d66c:	01050103 01090107 010d010b 0111010f     ................
   2d67c:	01150113 01190117 011d011b 0121011f     ..............!.
   2d68c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   2d69c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   2d6ac:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   2d6bc:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   2d6cc:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   2d6dc:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   2d6ec:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   2d6fc:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   2d70c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   2d71c:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   2d72c:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   2d73c:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   2d74c:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   2d75c:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   2d76c:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   2d77c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   2d78c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   2d79c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   2d7ac:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   2d7bc:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0002d7cc <tbl_upper.4311>:
   2d7cc:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   2d7dc:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   2d7ec:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   2d7fc:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   2d80c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   2d81c:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   2d82c:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   2d83c:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   2d84c:	01040102 01080106 010c010a 0110010e     ................
   2d85c:	01140112 01180116 011c011a 0120011e     .............. .
   2d86c:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   2d87c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   2d88c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   2d89c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   2d8ac:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   2d8bc:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   2d8cc:	03940393 03960395 03980397 039a0399     ................
   2d8dc:	039c039b 039e039d 03a0039f 03a303a1     ................
   2d8ec:	03a503a4 03a703a6 03a903a8 041003aa     ................
   2d8fc:	04120411 04140413 04160415 04180417     ................
   2d90c:	041a0419 041c041b 041e041d 0420041f     .............. .
   2d91c:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   2d92c:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   2d93c:	04030402 04050404 04070406 04090408     ................
   2d94c:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   2d95c:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   2d96c:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   2d97c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   2d98c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   2d99c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   2d9ac:	000000e1 0000ef26 0000eef8 0000eef8     ....&...........
   2d9bc:	0000eef8 0000ef3e 0000eef8 0000eef8     ....>...........
   2d9cc:	0000eef8 0000eef8 0000eef8 0000eef8     ................
   2d9dc:	0000eef8 0000eef8 0000eef8 0000eef8     ................
   2d9ec:	0000eef8 0000eef8 0000eef8 0000eef8     ................
   2d9fc:	0000eef8 0000ef14 0000eef8 0000eef8     ................
   2da0c:	0000eef8 0000eef8 0000eef8 0000eef8     ................
   2da1c:	0000eef8 0000eef8 0000eef8 0000eef8     ................
   2da2c:	0000eef8 0000eef8 0000eef8 0000eef8     ................
   2da3c:	0000eef8 0000eef8 0000eef8 0000eef8     ................
   2da4c:	0000eef8 0000eef8 0000eef8 0000eef8     ................
   2da5c:	0000eef8 0000ef36 0000ef2e 20454c42     ....6.......BLE 
   2da6c:	6f727245 00000072 74746553 20676e69     Error...Setting 
   2da7c:	20454c42 00006e69 4d205441 2065646f     BLE in..AT Mode 
   2da8c:	20726f66 676f7270 006d6172 65736552     for program.Rese
   2da9c:	66612074 20726574 676f7270 006d6172     t after program.
   2daac:	73657250 6e612073 75622079 6e6f7474     Press any button
   2dabc:	002e2e2e 20746f4e 6e6e6f43 65746365     ....Not Connecte
   2dacc:	00000064 43495242 30255f34 00006434     d...BRIC4_%04d..
   2dadc:	322e3025 00000066 6e616373 00000000     %0.2f...scan....
   2daec:	6573616c 00000072 65776f70 666f2072     laser...power of
   2dafc:	00000066 746f6873 00000000 0000f76a     f...shot....j...
   2db0c:	0000f78c 0000f7be 0000f7e0 0000f802     ................
   2db1c:	0000f750 6c636e49 74616e69 206e6f69     P...Inclination 
   2db2c:	7a412026 74756d69 00000068 6f502d34     & Azimuth...4-Po
   2db3c:	20746e69 756f7247 203a7370 00006425     int Groups: %d..
   2db4c:	206d7a41 65647453 25203a76 0066332e     Azm Stdev: %.3f.
   2db5c:	20636e49 65647453 25203a76 0066332e     Inc Stdev: %.3f.
   2db6c:	706d6554 3025203a 2066312e 00000046     Temp: %0.1f F...
   2db7c:	706d6554 3025203a 2066312e 00000043     Temp: %0.1f C...
   2db8c:	6c636e49 74616e69 3a6e6f69 00000000     Inclination:....
   2db9c:	412d3141 65442032 2061746c 2c592c58     A1-A2 Delta X,Y,
   2dbac:	2525205a 00000000 66332e25 2e25202c     Z %%....%.3f, %.
   2dbbc:	202c6633 66332e25 00000000 6e67614d     3f, %.3f....Magn
   2dbcc:	64757469 72452065 20726f72 00002525     itude Error %%..
   2dbdc:	253a3141 2066332e 253a3241 0066332e     A1:%.3f A2:%.3f.
   2dbec:	6d697a41 00687475 4d2d314d 65442032     Azimuth.M1-M2 De
   2dbfc:	2061746c 2c592c58 2525205a 00000000     lta X,Y,Z %%....
   2dc0c:	253a314d 2066332e 253a324d 0066332e     M1:%.3f M2:%.3f.
   2dc1c:	74736944 65636e61 00000000 676e6152     Distance....Rang
   2dc2c:	6e696665 20726564 7366664f 003a7465     efinder Offset:.
   2dc3c:	2e252020 6d206634 72657465 00000073       %.4f meters...
   2dc4c:	2e252020 66206634 00746565 0000003c       %.4f feet.<...
   2dc5c:	0000003e 64343025 3230252e 30252e64     >...%04d.%02d.%0
   2dc6c:	25406432 3a643230 64323025 3230253a     2d@%02d:%02d:%02
   2dc7c:	00000064 64343025 64323025 64323025     d...%04d%02d%02d
   2dc8c:	3230255f 32302564 32302564 00000064     _%02d%02d%02d...
   2dc9c:	64343025 64323025 64323025 00000000     %04d%02d%02d....
   2dcac:	00464552 54534944 00000000 004d5a41     REF.DIST....AZM.
   2dcbc:	4c434e49 00000000 34253a54 4366312e     INCL....T:%4.1fC
   2dccc:	00000000 30253a54 4666312e 00000000     ....T:%0.1fF....
   2dcdc:	64323025 3230253a 30253a64 00006432     %02d:%02d:%02d..
   2dcec:	32302542 00000064 30253a42 00006432     B%02d...B:%02d..
   2dcfc:	00000025 66322e25 00000000              %...%.2f....

0002dd08 <yLine>:
   2dd08:	30201001 00000040 00011702 000116e0     .. 0@...........
   2dd18:	000116be 0001169c 0001167a 0001165e     ........z...^...
   2dd28:	00011642 00011636 0001162a 0001161e     B...6...*.......
   2dd38:	00011702 00011612 000115fe 000115ea     ................
   2dd48:	000115d6 000115c2 31636341 67694820     ........Acc1 Hig
   2dd58:	25203a68 66342e30 00000000 31636341     h: %0.4f....Acc1
   2dd68:	776f4c20 3025203a 0066342e 32636341      Low: %0.4f.Acc2
   2dd78:	67694820 25203a68 66342e30 00000000      High: %0.4f....
   2dd88:	32636341 776f4c20 3025203a 0066342e     Acc2 Low: %0.4f.
   2dd98:	706d6f43 69482031 203a6867 342e3025     Comp1 High: %0.4
   2dda8:	00000066 706d6f43 6f4c2031 25203a77     f...Comp1 Low: %
   2ddb8:	66342e30 00000000 706d6f43 69482032     0.4f....Comp2 Hi
   2ddc8:	203a6867 342e3025 00000066 706d6f43     gh: %0.4f...Comp
   2ddd8:	6f4c2032 25203a77 66342e30 00000000     2 Low: %0.4f....
   2dde8:	20636341 746c6564 78612061 25206425     Acc delta ax%d %
   2ddf8:	66332e30 00002525 2067614d 746c6564     0.3f%%..Mag delt
   2de08:	78612061 25206425 66332e30 00002525     a ax%d %0.3f%%..
   2de18:	20636e49 746c6544 25203a61 66332e30     Inc Delta: %0.3f
   2de28:	00676564 206d7a41 746c6544 25203a61     deg.Azm Delta: %
   2de38:	66332e30 00676564 6573616c 61632072     0.3fdeg.laser ca
   2de48:	6520636c 726f7272 00000000 6573616c     lc error....lase
   2de58:	65772072 73206b61 616e6769 0000006c     r weak signal...
   2de68:	6573616c 74732072 676e6f72 67697320     laser strong sig
   2de78:	006c616e 6573616c 6f632072 74206d6d     nal.laser comm t
   2de88:	6f656d69 00007475 6573616c 72652072     imeout..laser er
   2de98:	20726f72 6e6b6e75 2c6e776f 00662520     ror unknown, %f.
   2dea8:	6573616c 72772072 20676e6f 7373656d     laser wrong mess
   2deb8:	2c656761 00662520 6e6b6e55 206e776f     age, %f.Unknown 
   2dec8:	6f727265 64252072 00000000 696c6163     error %d....cali
   2ded8:	74617262 006e6f69 252f3a30 00000073     bration.0:/%s...
   2dee8:	002f3a30 696c6143 74617262 5f6e6f69     0:/.Calibration_
   2def8:	74736948 5f79726f 64343025 7673632e     History_%04d.csv
   2df08:	00000000 59595959 2e4d4d2e 48404444     ....YYYY.MM.DD@H
   2df18:	6d6d3a48 2c73733a 696c6143 74617262     H:mm:ss,Calibrat
   2df28:	206e6f69 65707954 2c4e532c 74666f53     ion Type,SN,Soft
   2df38:	65726177 72655620 6e6f6973 6d65542c     ware Version,Tem
   2df48:	2c432070 00000020 676e6152 6e696665     p C, ...Rangefin
   2df58:	20726564 7366664f 28207465 2c29744d     der Offset (Mt),
   2df68:	6f724720 2c737075 696f5020 2c73746e      Groups, Points,
   2df78:	20636e49 6c676e41 72452065 20726f72     Inc Angle Error 
   2df88:	65647473 64282076 2c296765 206d7a41     stdev (deg),Azm 
   2df98:	6c676e41 72452065 20726f72 65647473     Angle Error stde
   2dfa8:	64282076 2c296765 31636341 67616d20     v (deg),Acc1 mag
   2dfb8:	7574696e 73206564 76656474 25252820     nitude stdev (%%
   2dfc8:	63412c29 6d203263 696e6761 65647574     ),Acc2 magnitude
   2dfd8:	64747320 28207665 2c292525 3167614d      stdev (%%),Mag1
   2dfe8:	67616d20 7574696e 73206564 76656474      magnitude stdev
   2dff8:	25252820 614d2c29 6d203267 696e6761      (%%),Mag2 magni
   2e008:	65647574 64747320 28207665 2c292525     tude stdev (%%),
   2e018:	00000000 20636341 69642058 72617073     ....Acc X dispar
   2e028:	20797469 29252528 6363412c 64205920     ity (%%),Acc Y d
   2e038:	61707369 79746972 25252820 63412c29     isparity (%%),Ac
   2e048:	205a2063 70736964 74697261 25282079     c Z disparity (%
   2e058:	4d2c2925 58206761 73696420 69726170     %),Mag X dispari
   2e068:	28207974 2c292525 2067614d 69642059     ty (%%),Mag Y di
   2e078:	72617073 20797469 29252528 67614d2c     sparity (%%),Mag
   2e088:	64205a20 61707369 79746972 25252820      Z disparity (%%
   2e098:	00002c29 31636341 00000000 58207325     ),..Acc1....%s X
   2e0a8:	66664f20 2c746573 59207325 66664f20      Offset,%s Y Off
   2e0b8:	2c746573 5a207325 66664f20 2c746573     set,%s Z Offset,
   2e0c8:	58207325 69614720 73252c6e 47205920     %s X Gain,%s Y G
   2e0d8:	2c6e6961 5a207325 69614720 00002c6e     ain,%s Z Gain,..
   2e0e8:	59207325 694d2058 696c6173 656d6e67     %s YX Misalignme
   2e0f8:	2820746e 29676564 2073252c 4d20595a     nt (deg),%s ZY M
   2e108:	6c617369 6d6e6769 20746e65 67656428     isalignment (deg
   2e118:	73252c29 20585a20 6173694d 6e67696c     ),%s ZX Misalign
   2e128:	746e656d 65642820 002c2967 74207325     ment (deg),.%s t
   2e138:	61746568 694d2058 696c6173 656d6e67     hetaX Misalignme
   2e148:	2820746e 29676564 2073252c 74656874     nt (deg),%s thet
   2e158:	4d205961 6c617369 6d6e6769 20746e65     aY Misalignment 
   2e168:	67656428 73252c29 65687420 205a6174     (deg),%s thetaZ 
   2e178:	6173694d 6e67696c 746e656d 65642820     Misalignment (de
   2e188:	002c2967 32636341 00000000 3167614d     g),.Acc2....Mag1
   2e198:	00000000 3267614d 00000000 6c636e49     ....Mag2....Incl
   2e1a8:	74616e69 206e6f69 7a412026 74756d69     ination & Azimut
   2e1b8:	75462068 43206c6c 62696c61 69746172     h Full Calibrati
   2e1c8:	00006e6f 6d697a41 20687475 63697551     on..Azimuth Quic
   2e1d8:	6143206b 7262696c 6f697461 0000006e     k Calibration...
   2e1e8:	676e6152 6e696665 20726564 696c6143     Rangefinder Cali
   2e1f8:	74617262 006e6f69 73250a0d 2c73252c     bration...%s,%s,
   2e208:	64343025 2e30252c 252c6631 66312e30     %04d,%0.1f,%0.1f
   2e218:	0000002c 362e3025 64252c66 2c64252c     ,...%0.6f,%d,%d,
   2e228:	362e3025 30252c66 2c66362e 362e3025     %0.6f,%0.6f,%0.6
   2e238:	30252c66 2c66362e 362e3025 30252c66     f,%0.6f,%0.6f,%0
   2e248:	2c66362e 00000000 61746164 00000000     .6f,....data....
   2e258:	516d7a61 6b636975 00000000 6c6c7566     azmQuick....full
   2e268:	006c6143 5f776172 535f7325 3430254e     Cal.raw_%s_SN%04
   2e278:	73255f64 6e69622e 00000000 696c6143     d_%s.bin....Cali
   2e288:	74617262 5f6e6f69 6f706552 255f7472     bration_Report_%
   2e298:	4e535f73 64343025 7478742e 00000000     s_SN%04d.txt....
   2e2a8:	696c6143 74617262 206e6f69 6f706552     Calibration Repo
   2e2b8:	0a0d7472 61440a0d 61206574 5420646e     rt....Date and T
   2e2c8:	3a656d69 59590a0d 4d2e5959 44442e4d     ime:..YYYY.MM.DD
   2e2d8:	3a484840 733a6d6d 250a0d73 0d0a0d73     @HH:mm:ss..%s...
   2e2e8:	0000000a 203a4e53 64343025 6f530a0d     ....SN: %04d..So
   2e2f8:	61777466 56206572 69737265 203a6e6f     ftware Version: 
   2e308:	312e3125 000a0d66 706d6554 74617265     %1.1f...Temperat
   2e318:	3a657275 2e302520 63206632 69736c65     ure: %0.2f celsi
   2e328:	202c7375 322e3025 61662066 6e657268     us, %0.2f fahren
   2e338:	74696568 0a0d0a0d 00000000 7361654d     heit........Meas
   2e348:	6d657275 73746e65 6425203a 2d340a0d     urements: %d..4-
   2e358:	6e696f50 72472074 7370756f 6425203a     Point Groups: %d
   2e368:	0a0d0a0d 00000000 6c676e41 72452065     ........Angle Er
   2e378:	20726f72 6e617453 64726164 76654420     ror Standard Dev
   2e388:	69746169 0d3a6e6f 4120200a 756d697a     iation:..  Azimu
   2e398:	203a6874 362e3325 65642066 65657267     th: %3.6f degree
   2e3a8:	200a0d73 636e4920 616e696c 6e6f6974     s..  Inclination
   2e3b8:	3325203a 2066362e 72676564 0d736565     : %3.6f degrees.
   2e3c8:	0000000a 6e67614d 64757469 72452065     ....Magnitude Er
   2e3d8:	20726f72 6e617453 64726164 76654420     ror Standard Dev
   2e3e8:	69746169 0d3a6e6f 4120200a 6c656363     iation:..  Accel
   2e3f8:	6d6f7265 72657465 203a3120 362e3325     erometer 1: %3.6
   2e408:	25252066 20200a0d 65636341 6f72656c     f %%..  Accelero
   2e418:	6574656d 3a322072 2e332520 25206636     meter 2: %3.6f %
   2e428:	200a0d25 6d6f4320 73736170 203a3120     %..  Compass 1: 
   2e438:	362e3325 25252066 20200a0d 706d6f43     %3.6f %%..  Comp
   2e448:	20737361 25203a32 66362e33 0d252520     ass 2: %3.6f %%.
   2e458:	0000000a 73697841 73694420 69726170     ....Axis Dispari
   2e468:	0d3a7974 4120200a 6c656363 6d6f7265     ty:..  Accelerom
   2e478:	72657465 2d58203a 362e3325 20252566     eter: X-%3.6f%% 
   2e488:	33252d59 2566362e 2d5a2025 362e3325     Y-%3.6f%% Z-%3.6
   2e498:	0d252566 0000000a 6f432020 7361706d     f%%.....  Compas
   2e4a8:	58203a73 2e33252d 25256636 252d5920     s: X-%3.6f%% Y-%
   2e4b8:	66362e33 5a202525 2e33252d 25256636     3.6f%% Z-%3.6f%%
   2e4c8:	0a0d0a0d 00000a0d 6c636e49 74616e69     ........Inclinat
   2e4d8:	006e6f69 6f6d6552 20646576 756f7247     ion.Removed Grou
   2e4e8:	64252070 726f6620 20662520 20676564     p %d for %f deg 
   2e4f8:	72706d69 6d65766f 20746e65 25206e69     improvement in %
   2e508:	000a0d73 6c636e49 6d6f6e69 72657465     s...Inclinometer
   2e518:	43203120 62696c61 69746172 0d3a6e6f      1 Calibration:.
   2e528:	0000000a 6c636e49 6d6f6e69 72657465     ....Inclinometer
   2e538:	43203220 62696c61 69746172 0d3a6e6f      2 Calibration:.
   2e548:	0000000a 706d6f43 20737361 61432031     ....Compass 1 Ca
   2e558:	7262696c 6f697461 0a0d3a6e 00000000     libration:......
   2e568:	706d6f43 20737361 61432032 7262696c     Compass 2 Calibr
   2e578:	6f697461 0a0d3a6e 00000000 61472020     ation:......  Ga
   2e588:	58206e69 2e25203a 0a0d6636 61472020     in X: %.6f..  Ga
   2e598:	59206e69 2e25203a 0a0d6636 61472020     in Y: %.6f..  Ga
   2e5a8:	3a5a6e69 362e2520 000a0d66 664f2020     inZ: %.6f...  Of
   2e5b8:	74657366 203a5820 66362e25 20200a0d     fset X: %.6f..  
   2e5c8:	7366664f 59207465 2e25203a 0a0d6636     Offset Y: %.6f..
   2e5d8:	664f2020 74657366 203a5a20 66362e25       Offset Z: %.6f
   2e5e8:	00000a0d 78412020 4d207369 6c617369     ....  Axis Misal
   2e5f8:	6d6e6769 2c746e65 582d5920 2e25203a     ignment, Y-X: %.
   2e608:	64206636 0a0d6765 78412020 4d207369     6f deg..  Axis M
   2e618:	6c617369 6d6e6769 2c746e65 582d5a20     isalignment, Z-X
   2e628:	2e25203a 64206636 0a0d6765 78412020     : %.6f deg..  Ax
   2e638:	4d207369 6c617369 6d6e6769 2c746e65     is Misalignment,
   2e648:	592d5a20 2e25203a 64206636 0a0d6765      Z-Y: %.6f deg..
   2e658:	00000000 61502020 67616b63 694d2065     ....  Package Mi
   2e668:	696c6173 656d6e67 4120746e 74756f62     salignment About
   2e678:	203a5820 66332e25 67656420 20200a0d      X: %.3f deg..  
   2e688:	6b636150 20656761 6173694d 6e67696c     Package Misalign
   2e698:	746e656d 6f624120 59207475 2e25203a     ment About Y: %.
   2e6a8:	64206633 0a0d6765 61502020 67616b63     3f deg..  Packag
   2e6b8:	694d2065 696c6173 656d6e67 4120746e     e Misalignment A
   2e6c8:	74756f62 203a5a20 66332e25 67656420     bout Z: %.3f deg
   2e6d8:	0a0d0a0d 00000000 61430a0d 7262696c     ..........Calibr
   2e6e8:	6f697461 654d206e 72757361 6e656d65     ation Measuremen
   2e6f8:	0d3a7374 0000000a 20202020 20202020     ts:.....        
   2e708:	20202020 20202020 61636e55 7262696c             Uncalibr
   2e718:	64657461 20202020 20202020 20202020     ated            
   2e728:	20202020 20202020 6c614320 61726269              Calibra
   2e738:	0d646574 0000000a 756f7247 50202c70     ted.....Group, P
   2e748:	746e696f 2020202c 6d697a41 2c687475     oint,   Azimuth,
   2e758:	6e492020 6e696c63 6f697461 52202c6e       Inclination, R
   2e768:	2c6c6c6f 20202020 697a4120 6874756d     oll,     Azimuth
   2e778:	4920202c 696c636e 6974616e 202c6e6f     ,  Inclination, 
   2e788:	6c6c6f52 00000a0d 64323025 2020202c     Roll....%02d,   
   2e798:	32302520 20202c64 20202020 2e363025      %02d,      %06.
   2e7a8:	202c6632 2b252020 322e3630 20202c66     2f,   %+06.2f,  
   2e7b8:	20202020 2e363025 202c6632 30252020         %06.2f,   %0
   2e7c8:	66322e36 2020202c 36302b25 2c66322e     6.2f,   %+06.2f,
   2e7d8:	20202020 30252020 66322e36 00000a0d           %06.2f....
   2e7e8:	742e4e53 00007478 44776172 42617461     SN.txt..rawDataB
   2e7f8:	65666675 69622e72 0000006e 61746164     uffer.bin...data
   2e808:	5f73255f 30254e53 632e6434 00007673     _%s_SN%04d.csv..
   2e818:	656d6954 6174532d 202c706d 49534f50     Time-Stamp, POSI
   2e828:	69542058 202c656d 65646e49 44202c78     X Time, Index, D
   2e838:	61747369 2065636e 74656d28 29737265     istance (meters)
   2e848:	7a41202c 74756d69 64282068 2c296765     , Azimuth (deg),
   2e858:	636e4920 616e696c 6e6f6974 65642820      Inclination (de
   2e868:	202c2967 20706944 67656428 52202c29     g), Dip (deg), R
   2e878:	206c6c6f 67656428 54202c29 65706d65     oll (deg), Tempe
   2e888:	75746172 28206572 736c6543 29737569     rature (Celsius)
   2e898:	4d20202c 75736165 656d6572 5420746e     ,  Measurement T
   2e8a8:	2c657079 72724520 4c20726f 0a0d676f     ype, Error Log..
   2e8b8:	00000000 6e616353 00000000 75676552     ....Scan....Regu
   2e8c8:	0072616c 6e6b6e55 006e776f 252c7325     lar.Unknown.%s,%
   2e8d8:	64252c64 322e252c 2e252c66 252c6632     d,%d,%.2f,%.2f,%
   2e8e8:	2c66322e 66322e25 322e252c 2e252c66     .2f,%.2f,%.2f,%.
   2e8f8:	252c6632 73252c73 00000a0d              2f,%s,%s....

0002e904 <tc_interrupt_vectors.19062>:
   2e904:	00151211                                ....

0002e908 <mmc_trans_multipliers>:
   2e908:	00000000 0000000a 0000000c 0000000d     ................
   2e918:	0000000f 00000014 0000001a 0000001e     ................
   2e928:	00000023 00000028 0000002d 00000034     #...(...-...4...
   2e938:	00000037 0000003c 00000046 00000050     7...<...F...P...

0002e948 <sd_mmc_trans_units>:
   2e948:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0002e964 <sd_trans_multipliers>:
   2e964:	00000000 0000000a 0000000c 0000000d     ................
   2e974:	0000000f 00000014 00000019 0000001e     ................
   2e984:	00000023 00000028 0000002d 00000032     #...(...-...2...
   2e994:	00000037 0000003c 00000046 00000050     7...<...F...P...
   2e9a4:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   2e9b4:	22302074 00000000 000193da 000193d0     t 0"............
   2e9c4:	000193c6 00019242 000193e4 000194b0     ....B...........
   2e9d4:	00019484 0001947a 00019470 00019466     ....z...p...f...
   2e9e4:	42002000 42002400 43000800 00000002     . .B.$.B...C....
   2e9f4:	00000100 00000002 00000200 00000003     ................
   2ea04:	00000004 42000000 42000400 42000800     .......B...B...B
   2ea14:	42000c00 42001000 43000400 0001f5a6     ...B...B...C....
   2ea24:	0001f5be 0001f5be 0001f56a 0001f56a     ........j...j...
   2ea34:	0001f570 0001f576 0001f586 0001f5ac     p...v...........
   2ea44:	0001f72e 0001f7ae 0001f7ae 0001f72a     ............*...
   2ea54:	0001f73c 0001f74a 0001f758 0001f766     <...J...X...f...
   2ea64:	0001f714 0001f7e0 0001f82e 0001f82e     ................
   2ea74:	0001f82e 0001f7ee 0001f7fc 0001f80a     ................
   2ea84:	0001f818 0001f7d0 0001f89e 0001f8a8     ................
   2ea94:	0001f8a8 0001f850 0001f854 0001f85e     ....P...T...^...
   2eaa4:	0001f868 0001f872 0001f88a 0002110a     h...r...........
   2eab4:	000210e6 000210d4 000210ba 00020f74     ............t...
   2eac4:	000210aa 000210fa 0002173c 0002172e     ........<.......
   2ead4:	00021720 00021712 00021704 0002174c      ...........L...
   2eae4:	0002f7ac 0002f7b4 0002e1f4 0002f7c0     ................
   2eaf4:	0002f7cc 0002f7d8 0002f744 0002f754     ........D...T...
   2eb04:	0002f768 0002f778 0002f78c 0002f7a0     h...x...........
   2eb14:	0002f6f0 0002f700 0002f70c 0002f71c     ................
   2eb24:	0002f730 12090903 09091212 00000003     0...............

0002eb34 <Font5x7>:
   2eb34:	00000000 5f000000 07000000 14000700     ......._........
   2eb44:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   2eb54:	00502255 00000305 41221c00 22410000     U"P......."A..A"
   2eb64:	2a08001c 08082a1c 08083e08 00305000     ...*.*...>...P0.
   2eb74:	08080800 60000808 20000060 02040810     .......``.. ....
   2eb84:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
   2eb94:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
   2eba4:	01304949 03050971 49494936 49490636     II0.q...6III6.II
   2ebb4:	36001e29 00000036 00003656 22140800     )..66...V6....."
   2ebc4:	14141441 22411414 02000814 06095101     A.....A".....Q..
   2ebd4:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
   2ebe4:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
   2ebf4:	3e010109 32514141 0808087f 7f41007f     ...>AAQ2......A.
   2ec04:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   2ec14:	04027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   2ec24:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
   2ec34:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
   2ec44:	7f1f2040 7f201820 14081463 78040363     @ .. . .c...c..x
   2ec54:	51610304 00434549 41417f00 10080402     ..aQIEC...AA....
   2ec64:	7f414120 02040000 40040201 40404040      AA........@@@@@
   2ec74:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
   2ec84:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
   2ec94:	08020109 3c545414 0404087f 7d440078     .....TT<....x.D}
   2eca4:	40200040 00003d44 4428107f 407f4100     @. @D=....(D.A.@
   2ecb4:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
   2ecc4:	1414147c 14140808 087c7c18 48080404     |........||....H
   2ecd4:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
   2ece4:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
   2ecf4:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
   2ed04:	36410000 08080008 08081c2a 08082a1c     ..A6....*....*..
   2ed14:	2f6d7a41 20636e49 696c6143 74617262     Azm/Inc Calibrat
   2ed24:	3a6e6f69 00000000 656b6154 696e5520     ion:....Take Uni
   2ed34:	7269442d 69746365 6c616e6f 6f724720     -Directional Gro
   2ed44:	20737075 3420666f 6f685320 20207374     ups of 4 Shots  
   2ed54:	68772020 20656c69 61746f72 676e6974       while rotating
   2ed64:	20202020 69202020 7274736e 6e656d75            instrumen
   2ed74:	4f202e74 20796c6e 7473616c 68732034     t. Only last4 sh
   2ed84:	2073746f 6520666f 20686361 756f7267     ots of each grou
   2ed94:	6c697770 6562206c 76617320 00006465     pwill be saved..
   2eda4:	74736944 65636e61 6c614320 61726269     Distance Calibra
   2edb4:	6e6f6974 0000003a 63616c50 20612065     tion:...Place a 
   2edc4:	67726174 61207465 00000074 2e252020     target at...  %.
   2edd4:	66206631 2e746565 00000000 2e252020     1f feet.....  %.
   2ede4:	6d206631 72657465 00002e73 656b6154     1f meters...Take
   2edf4:	6e696d20 2034202e 746f6873 6e692073      min. 4 shots in
   2ee04:	00000000 746c754d 656c7069 69724f20     ....Multiple Ori
   2ee14:	61746e65 6e6f6974 00000073 796c6e4f     entations...Only
   2ee24:	73616c20 20342074 64657375 0000002e      last 4 used....
   2ee34:	706f6f4c 73655420 00003a74 656b6154     Loop Test:..Take
   2ee44:	73206120 65697265 666f2073 00000000      a series of....
   2ee54:	7361656d 6d657275 73746e65 646e6520     measurements end
   2ee64:	00676e69 6b636162 20746120 20656874     ing.back at the 
   2ee74:	73726966 00000074 6e696f70 20202e74     first...point.  
   2ee84:	73657250 44272073 27656e6f 00000000     Press 'Done'....
   2ee94:	6e656877 6d6f6320 74656c70 00002e65     when complete...
   2eea4:	206d7a41 63697551 6143206b 7262696c     Azm Quick Calibr
   2eeb4:	6f697461 0000006e 61746f52 64206574     ation...Rotate d
   2eec4:	63697665 6c732065 796c776f 00000020     evice slowly ...
   2eed4:	63206f74 7265766f 6c6c6120 696f7020     to cover all poi
   2eee4:	2073746e 00000020 67206e69 2e646972     nts  ...in grid.
   2eef4:	00002020 6c6c6548 6f57206f 00646c72       ..Hello World.
   2ef04:	204d5a41 3a6c6143 00000000 726f6241     AZM Cal:....Abor
   2ef14:	00000074 65746152 6425203a 00000000     t...Rate: %d....
   2ef24:	74617453 003a7375 2f206425 00642520     Status:.%d / %d.
   2ef34:	20454c42 61766441 6465636e 0000003a     BLE Advanced:...
   2ef44:	20545352 41206f74 6f4d2054 00206564     RST to AT Mode .
   2ef54:	20545352 52206f74 4d206e75 0065646f     RST to Run Mode.
   2ef64:	72727543 6d6f4320 00203a6d 4d524554     Curr Comm: .TERM
   2ef74:	00000000 6b636142 6867696c 65442074     ....Backlight De
   2ef84:	3a677562 00000000 3a646552 25202020     bug:....Red:   %
   2ef94:	00000064 65657247 25203a6e 00000064     d...Green: %d...
   2efa4:	65756c42 2520203a 00000064 6e776f44     Blue:  %d...Down
   2efb4:	00000000 00007055 72616843 20726567     ....Up..Charger 
   2efc4:	75626544 00003a67 3a646441 78323025     Debug:..Add:%02x
   2efd4:	25203d20 00000073 20636341 20202031      = %s...Acc 1   
   2efe4:	63412020 20322063 6e6f4420 00000065       Acc 2  Done...
   2eff4:	25203a58 332e302b 2b252066 66332e30     X: %+0.3f %+0.3f
   2f004:	00000000 25203a59 332e302b 2b252066     ....Y: %+0.3f %+
   2f014:	66332e30 00000000 25203a5a 332e302b     0.3f....Z: %+0.3
   2f024:	2b252066 66332e30 00000000 706d6f43     f %+0.3f....Comp
   2f034:	20203120 6f432020 3220706d 00002020      1    Comp 2  ..
   2f044:	25203a5a 332e302b 2b252066 66332e30     Z: %+0.3f %+0.3f
   2f054:	69784520 00000074 696c6143 74617262      Exit...Calibrat
   2f064:	206e6f69 6f706552 003a7472 74697845     ion Report:.Exit
   2f074:	00000000 00007466 706f6f4c 73655420     ....ft..Loop Tes
   2f084:	65522074 74726f70 0000003a 6d676553     t Report:...Segm
   2f094:	73746e65 6425203a 00000000 61746f54     ents: %d....Tota
   2f0a4:	654c206c 6874676e 2e25203a 25206631     l Length: %.1f %
   2f0b4:	00000073 7a726f48 72724520 2e25203a     s...Horz Err: %.
   2f0c4:	25206633 00000073 74726556 72724520     3f %s...Vert Err
   2f0d4:	2e25203a 25206633 00000073 7a412020     : %.3f %s...  Az
   2f0e4:	45206d69 203a7272 66312e25 67656420     im Err: %.1f deg
   2f0f4:	00000000 706f6f4c 72724520 2e25203a     ....Loop Err: %.
   2f104:	25256633 00000020 72615420 20746567     3f%% ... Target 
   2f114:	66312e25 65656620 00000074 72615420     %.1f feet... Tar
   2f124:	20746567 66312e25 74656d20 2e737265     get %.1f meters.
   2f134:	00000000 3a64254d 2e322520 00206634     ....M%d: %2.4f .
   2f144:	7366664f 203a7465 00006625 696c6143     Offset: %f..Cali
   2f154:	74617262 206e6f69 20202020 6e6f4420     bration      Don
   2f164:	00000065 6f727245 6e492072 6d726f66     e...Error Inform
   2f174:	6f697461 00003a6e 41206f4e 74696464     ation:..No Addit
   2f184:	616e6f69 7245206c 73726f72 00000000     ional Errors....
   2f194:	52206f74 726f7065 6e692074 73614c20     to Report in Las
   2f1a4:	00000074 4d206425 75736165 656d6572     t...%d Measureme
   2f1b4:	0073746e 7361654d 6d657275 20746e65     nts.Measurement 
   2f1c4:	00006425 6d726946 65726177 0000003a     %d..Firmware:...
   2f1d4:	6b636142 00000000 6d726946 65726177     Back....Firmware
   2f1e4:	72655620 3025203a 0066322e 64726148      Ver: %0.2f.Hard
   2f1f4:	65726177 72655620 7325203a 00000000     ware Ver: %s....
   2f204:	73657250 6e612073 6f682064 0000646c     Press and hold..
   2f214:	6f6f4222 616f6c74 22726564 726f6620     "Bootloader" for
   2f224:	00000000 20425355 746f6f42 64616f6c     ....USB Bootload
   2f234:	00007265 696c6143 74617262 206e6f69     er..Calibration 
   2f244:	65646f4d 00000000 65636341 6f72656c     Mode....Accelero
   2f254:	6574656d 00000072 6e67614d 6d6f7465     meter...Magnetom
   2f264:	72657465 00000000 00642547 6f206425     eter....G%d.%d o
   2f274:	696d2066 6425206e 00000000 656e6f44     f min %d....Done
   2f284:	00000000 64254720 00000000 65736552     .... G%d....Rese
   2f294:	00000074 706f6f4c 6e656c20 3a687467     t...Loop length:
   2f2a4:	312e2520 00000066 0000006d 70736944      %.1f...m...Disp
   2f2b4:	6563616c 746e656d 6f726620 3150206d     lacement from P1
   2f2c4:	0000003a 69726f48 746e6f7a 203a6c61     :...Horizontal: 
   2f2d4:	66312e25 00000000 74726556 6c616369     %.1f....Vertical
   2f2e4:	2e25203a 00006631 6d697a41 3a687475     : %.1f..Azimuth:
   2f2f4:	312e2520 00000066 6e69614d 6e654d20      %.1f...Main Men
   2f304:	00003a75 65746e45 00000072 65756c42     u:..Enter...Blue
   2f314:	746f6f74 00003a68 656d614e 0073253a     tooth:..Name:%s.
   2f324:	2043414d 72646441 3a737365 00000000     MAC Address:....
   2f334:	6e6e6f43 65746365 6f542064 0000003a     Connected To:...
   2f344:	65736552 4c422074 00000045 54535220     Reset BLE... RST
   2f354:	002e2e2e 61766441 6465636e 6e654d20     ....Advanced Men
   2f364:	00000075 75626544 654d2067 003a756e     u...Debug Menu:.
   2f374:	636f7250 69737365 4420676e 2e617461     Processing Data.
   2f384:	00002e2e 696c6143 74617262 206e6f69     ....Calibration 
   2f394:	706d6f43 6574656c 00000021 636f7250     Complete!...Proc
   2f3a4:	69737365 4320676e 44206c61 3a617461     essing Cal Data:
   2f3b4:	00000000 72657449 6f697461 6425206e     ....Iteration %d
   2f3c4:	20666f20 20206425 00202020 65746544      of %d     .Dete
   2f3d4:	64657463 64614220 6f724720 00007075     cted Bad Group..
   2f3e4:	20202020 20202020 20202020 20202020                     
   2f3f4:	20202020 00000020 20505247 45206425          ...GRP %d E
   2f404:	726f7272 2e302520 65646633 00000067     rror %0.3fdeg...
   2f414:	756f7247 65522070 65766f6d 00202c64     Group Removed, .
   2f424:	74736552 69747261 4120676e 796c616e     Restarting Analy
   2f434:	00736973 6e616353 646f4d20 00003a65     sis.Scan Mode:..
   2f444:	65727453 6e696d61 61442067 00206174     Streaming Data .
   2f454:	7265766f 454c4220 00000000 6e6e6f43     over BLE....Conn
   2f464:	65746365 6f742064 0000003a 7361654d     ected to:...Meas
   2f474:	74615220 25203a65 7a682064 00202020      Rate: %d hz   .
   2f484:	20746553 636f6c43 00003a6b 72616559     Set Clock:..Year
   2f494:	2020203a 64343025 00000000 746e6f4d     :   %04d....Mont
   2f4a4:	20203a68 64323025 00000000 65746144     h:  %02d....Date
   2f4b4:	2020203a 64323025 00000000 72756f48     :   %02d....Hour
   2f4c4:	2020203a 64323025 00000000 756e694d     :   %02d....Minu
   2f4d4:	203a6574 64323025 00000000 6f636553     te: %02d....Seco
   2f4e4:	203a646e 64323025 00000000 636e6143     nd: %02d....Canc
   2f4f4:	00006c65 0000002d 0000002b 7478654e     el..-...+...Next
   2f504:	00000000 74736944 6546203a 00007465     ....Dist: Feet..
   2f514:	74736944 654d203a 73726574 00000000     Dist: Meters....
   2f524:	706d6554 6146203a 6e657268 74696568     Temp: Fahrenheit
   2f534:	00000000 706d6554 6543203a 7569736c     ....Temp: Celsiu
   2f544:	00000073 746f6853 6c654420 203a7961     s...Shot Delay: 
   2f554:	73206425 00006365 72616843 43206567     %d sec..Charge C
   2f564:	3a727275 6d642520 00000041 20727245     urr: %dmA...Err 
   2f574:	736e6553 3025203a 2066322e 00676564     Sens: %0.2f deg.
   2f584:	43204c42 726f6c6f 7325203a 00000000     BL Color: %s....
   2f594:	4c204c42 6c657665 6425203a 00000000     BL Level: %d....
   2f5a4:	6974704f 3a736e6f 00000000 756a6441     Options:....Adju
   2f5b4:	00007473                                st..

0002f5b8 <state_info>:
	...
   2f5c4:	0001ff55 00000000 00000000 000217e9     U...............
   2f5d4:	03000003 00000400 000209d1 02000000     ................
   2f5e4:	00000402 00022d75 05050505 00000005     ....u-..........
   2f5f4:	000227c5 00000000 00000000 000215ad     .'..............
   2f604:	03000000 00000402 000213b9 03000000     ................
   2f614:	00000002 00020f35 03000000 00000402     ....5...........
   2f624:	00020c6d 03000000 00000402 00021e45     m...........E...
   2f634:	02000000 00000000 00021ac9 02000000     ................
   2f644:	00000000 0002240d 02000000 00000000     .....$..........
   2f654:	00020441 00000000 00000000 000202a5     A...............
	...
   2f66c:	00020711 02000000 00000402 000221c9     .............!..
   2f67c:	02000000 00000000 0001fe11 02020202     ................
   2f68c:	00000402 0002013d 03000003 00000400     ....=...........
   2f69c:	00020db9 00000000 00000402 00020081     ................
   2f6ac:	16000003 00000403 000207e9 03000000     ................
   2f6bc:	00000402 00020b1d 03000000 00000402     ................
	...
   2f6d8:	000211b5 07000000 00000002 00020349     ............I...
   2f6e8:	16000000 00000402 70736944 2079616c     ........Display 
   2f6f8:	6f706552 00007472 706f6f4c 73655420     Report..Loop Tes
   2f708:	00000074 3a4c4143 69755120 41206b63     t...CAL: Quick A
   2f718:	00004d5a 3a4c4143 6c754620 4e49206c     ZM..CAL: Full IN
   2f728:	5a412643 0000004d 3a4c4143 6e615220     C&AZM...CAL: Ran
   2f738:	662d6567 65646e69 00000072 736e6553     ge-finder...Sens
   2f748:	5220726f 44207761 00617461 6b636142     or Raw Data.Back
   2f758:	6867696c 614d2074 6c61756e 00000000     light Manual....
   2f768:	72616843 20726567 6f666e49 00000000     Charger Info....
   2f778:	72706552 7365636f 75462073 43206c6c     Reprocess Full C
   2f788:	00006c61 72706552 7365636f 5a412073     al..Reprocess AZ
   2f798:	6143204d 0000006c 6d726946 65726177     M Cal...Firmware
   2f7a8:	00000000 6974704f 00736e6f 6f727245     ....Options.Erro
   2f7b8:	6e492072 00006f66 20746553 636f6c43     r Info..Set Cloc
   2f7c8:	0000006b 65756c42 746f6f74 00000068     k...Bluetooth...
   2f7d8:	75626544 654d2067 0000756e 00776f70     Debug Menu..pow.
   2f7e8:	74727173 00000000                       sqrt....

0002f7f0 <npio2_hw>:
   2f7f0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   2f800:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   2f810:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   2f820:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   2f830:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   2f840:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   2f850:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   2f860:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0002f870 <two_over_pi>:
   2f870:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   2f880:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   2f890:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   2f8a0:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   2f8b0:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   2f8c0:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   2f8d0:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   2f8e0:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   2f8f0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   2f900:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   2f910:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   2f920:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   2f930:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   2f940:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   2f950:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   2f960:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   2f970:	0060e27b 00c08c6b                       {.`.k...

0002f978 <PIo2>:
   2f978:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   2f988:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   2f998:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   2f9a8:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

0002f9b8 <init_jk>:
   2f9b8:	00000002 00000003 00000004 00000006     ................

0002f9c8 <atanhi>:
   2f9c8:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   2f9d8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

0002f9e8 <atanlo>:
   2f9e8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   2f9f8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0002fa08 <TWO52>:
   2fa08:	00000000 43300000 00000000 c3300000     ......0C......0.
   2fa18:	00026304 000262d4 000262e6 00026228     .c...b...b..(b..
   2fa28:	000262e6 000262ca 000262e6 00026228     .b...b...b..(b..
   2fa38:	000262d4 000262d4 000262ca 00026228     .b...b...b..(b..
   2fa48:	00026230 00026230 00026230 000262ec     0b..0b..0b...b..
   2fa58:	000262d4 000262d4 000262a8 0002638c     .b...b...b...c..
   2fa68:	000262a8 000262ca 000262a8 0002638c     .b...b...b...c..
   2fa78:	000262d4 000262d4 000262ca 0002638c     .b...b...b...c..
   2fa88:	00026230 00026230 00026230 00026396     0b..0b..0b...c..
   2fa98:	00026684 000265d4 000265d4 000265d2     .f...e...e...e..
   2faa8:	00026676 00026676 0002666c 000265d2     vf..vf..lf...e..
   2fab8:	00026676 0002666c 00026676 000265d2     vf..lf..vf...e..
   2fac8:	0002667c 0002667c 0002667c 0002670c     |f..|f..|f...g..
   2fad8:	00027454 00027436 000273f0 0002730e     Tt..6t...s...s..
   2fae8:	000273f0 00027428 000273f0 0002730e     .s..(t...s...s..
   2faf8:	00027436 00027436 00027428 0002730e     6t..6t..(t...s..
   2fb08:	00027306 00027306 00027306 0002766c     .s...s...s..lv..
   2fb18:	00027cb4 00027b74 00027b74 00027b70     .|..t{..t{..p{..
   2fb28:	00027c8c 00027c8c 00027c7e 00027b70     .|...|..~|..p{..
   2fb38:	00027c8c 00027c7e 00027c8c 00027b70     .|..~|...|..p{..
   2fb48:	00027c94 00027c94 00027c94 00027e98     .|...|...|...~..

0002fb58 <_global_impure_ptr>:
   2fb58:	200001e8 000298b4 00029928 00029928     ... ....(...(...
   2fb68:	00029898 00029928 00029928 00029928     ....(...(...(...
   2fb78:	00029928 00029928 00029928 000298a0     (...(...(.......
   2fb88:	00029382 00029928 0002933c 0002938c     ....(...<.......
   2fb98:	00029928 000293d8 000295c2 000295c2     (...............
   2fba8:	000295c2 000295c2 000295c2 000295c2     ................
   2fbb8:	000295c2 000295c2 000295c2 00029928     ............(...
   2fbc8:	00029928 00029928 00029928 00029928     (...(...(...(...
   2fbd8:	00029928 00029928 00029928 00029928     (...(...(...(...
   2fbe8:	00029928 000293e0 00029528 00029928     (.......(...(...
   2fbf8:	00029528 00029928 00029928 00029928     (...(...(...(...
   2fc08:	00029928 000295f2 00029928 00029928     (.......(...(...
   2fc18:	000295fa 00029928 00029928 00029928     ....(...(...(...
   2fc28:	00029928 00029928 0002969c 00029928     (...(.......(...
   2fc38:	00029928 000296ce 00029928 00029928     (.......(...(...
   2fc48:	00029928 00029928 00029928 00029928     (...(...(...(...
   2fc58:	00029928 00029928 00029928 00029928     (...(...(...(...
   2fc68:	000297c8 000297fc 00029528 00029528     ........(...(...
   2fc78:	00029528 0002980e 000297fc 00029928     (...........(...
   2fc88:	00029928 00029816 00029928 00029730     (.......(...0...
   2fc98:	000298f6 0002986c 00029766 00029928     ....l...f...(...
   2fca8:	0002976e 00029928 000298c4 00029928     n...(.......(...
   2fcb8:	00029928 00029826 00464e49 00666e69     (...&...INF.inf.
   2fcc8:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   2fcd8:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   2fce8:	37363534 62613938 66656463 00000000     456789abcdef....
   2fcf8:	6c756e28 0000296c 00000030              (null)..0...

0002fd04 <blanks.7223>:
   2fd04:	20202020 20202020 20202020 20202020                     

0002fd14 <zeroes.7224>:
   2fd14:	30303030 30303030 30303030 30303030     0000000000000000
   2fd24:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   2fd34:	00000000                                ....

0002fd38 <__mprec_bigtens>:
   2fd38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   2fd48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   2fd58:	7f73bf3c 75154fdd                       <.s..O.u

0002fd60 <__mprec_tens>:
   2fd60:	00000000 3ff00000 00000000 40240000     .......?......$@
   2fd70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   2fd80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   2fd90:	00000000 412e8480 00000000 416312d0     .......A......cA
   2fda0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   2fdb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   2fdc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   2fdd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   2fde0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   2fdf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   2fe00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   2fe10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   2fe20:	79d99db4 44ea7843                       ...yCx.D

0002fe28 <p05.6055>:
   2fe28:	00000005 00000019 0000007d 49534f50     ........}...POSI
   2fe38:	00000058                                X...

0002fe3c <_ctype_>:
   2fe3c:	20202000 20202020 28282020 20282828     .         ((((( 
   2fe4c:	20202020 20202020 20202020 20202020                     
   2fe5c:	10108820 10101010 10101010 10101010      ...............
   2fe6c:	04040410 04040404 10040404 10101010     ................
   2fe7c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2fe8c:	01010101 01010101 01010101 10101010     ................
   2fe9c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2feac:	02020202 02020202 02020202 10101010     ................
   2febc:	00000020 00000000 00000000 00000000      ...............
	...

0002ff40 <_init>:
   2ff40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ff42:	46c0      	nop			; (mov r8, r8)
   2ff44:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2ff46:	bc08      	pop	{r3}
   2ff48:	469e      	mov	lr, r3
   2ff4a:	4770      	bx	lr

0002ff4c <__init_array_start>:
   2ff4c:	0002a861 	.word	0x0002a861

0002ff50 <__frame_dummy_init_array_entry>:
   2ff50:	000060dd                                .`..

0002ff54 <_fini>:
   2ff54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ff56:	46c0      	nop			; (mov r8, r8)
   2ff58:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2ff5a:	bc08      	pop	{r3}
   2ff5c:	469e      	mov	lr, r3
   2ff5e:	4770      	bx	lr

0002ff60 <__fini_array_start>:
   2ff60:	000060b5 	.word	0x000060b5
