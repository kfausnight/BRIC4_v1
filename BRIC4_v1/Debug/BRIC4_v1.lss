
BRIC4_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002a094  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002a094  0002a094  0003a094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c50  20000000  0002a09c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00040c50  2**0
                  CONTENTS
  4 .bss          00004734  20000c50  0002acec  00040c50  2**2
                  ALLOC
  5 .stack        00002004  20005384  0002f420  00040c50  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00040c50  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00040c78  2**0
                  CONTENTS, READONLY
  8 .debug_info   000ab8c9  00000000  00000000  00040cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a7d1  00000000  00000000  000ec59a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000c8ac  00000000  00000000  000f6d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002260  00000000  00000000  00103617  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001f68  00000000  00000000  00105877  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000304dd  00000000  00000000  001077df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003456c  00000000  00000000  00137cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000acaaa  00000000  00000000  0016c228  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008b24  00000000  00000000  00218cd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
       0:	88 73 00 20 b5 93 00 00 49 94 00 00 49 94 00 00     .s. ....I...I...
	...
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0) | config->prescaler
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
#endif

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
      2c:	49 94 00 00 00 00 00 00 00 00 00 00 49 94 00 00     I...........I...
		case RTC_COUNT_MODE_32BIT:
			/* Set 32-bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
      3c:	49 94 00 00 49 94 00 00 c9 14 00 00 f5 6f 00 00     I...I........o..
				/* Set clear on match. */
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
      4c:	b1 69 00 00 49 94 00 00 49 94 00 00 4d 12 00 00     .i..I...I...M...
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
      5c:	49 94 00 00 b9 81 00 00 d1 81 00 00 e9 81 00 00     I...............
				rtc_count_set_compare(module, config->compare_values[i],
      6c:	01 82 00 00 19 82 00 00 31 82 00 00 49 94 00 00     ........1...I...
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
      7c:	49 94 00 00 49 94 00 00 9d 8c 00 00 b1 8c 00 00     I...I...........
	...
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
      94:	c5 8c 00 00 49 94 00 00 49 94 00 00 49 94 00 00     ....I...I...I...

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
      a4:	49 94 00 00 49 94 00 00 49 94 00 00 00 00 00 00     I...I...I.......

000000b4 <__do_global_dtors_aux>:
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
				rtc_count_set_compare(module, config->compare_values[i],
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000c50 	.word	0x20000c50
      d4:	00000000 	.word	0x00000000
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      d8:	0002a09c 	.word	0x0002a09c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
						(enum rtc_count_compare)i);
			}
			break;
      ee:	6803      	ldr	r3, [r0, #0]
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
      f4:	bd10      	pop	{r4, pc}
}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000c54 	.word	0x20000c54
     108:	0002a09c 	.word	0x0002a09c
     10c:	0002a09c 	.word	0x0002a09c
     110:	00000000 	.word	0x00000000

00000114 <udi_msc_trans_ack>:

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
     114:	b580      	push	{r7, lr}
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6039      	str	r1, [r7, #0]
     11c:	0011      	movs	r1, r2
     11e:	1dfb      	adds	r3, r7, #7
     120:	1c02      	adds	r2, r0, #0
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
     122:	701a      	strb	r2, [r3, #0]
     124:	1dbb      	adds	r3, r7, #6
     126:	1c0a      	adds	r2, r1, #0
     128:	701a      	strb	r2, [r3, #0]
     12a:	1dfb      	adds	r3, r7, #7
     12c:	781b      	ldrb	r3, [r3, #0]
     12e:	1e5a      	subs	r2, r3, #1
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
     130:	4193      	sbcs	r3, r2
     132:	b2da      	uxtb	r2, r3
     134:	4b04      	ldr	r3, [pc, #16]	; (148 <udi_msc_trans_ack+0x34>)
     136:	701a      	strb	r2, [r3, #0]
     138:	4b04      	ldr	r3, [pc, #16]	; (14c <udi_msc_trans_ack+0x38>)
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
     13a:	2201      	movs	r2, #1
     13c:	701a      	strb	r2, [r3, #0]
     13e:	46c0      	nop			; (mov r8, r8)
     140:	46bd      	mov	sp, r7
     142:	b002      	add	sp, #8
     144:	bd80      	pop	{r7, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	20000e88 	.word	0x20000e88
		return;
     14c:	2000000d 	.word	0x2000000d

00000150 <udi_msc_trans_block>:
}
     150:	b590      	push	{r4, r7, lr}
     152:	b087      	sub	sp, #28
     154:	af02      	add	r7, sp, #8
     156:	60b9      	str	r1, [r7, #8]
     158:	607a      	str	r2, [r7, #4]
     15a:	603b      	str	r3, [r7, #0]
     15c:	230f      	movs	r3, #15
     15e:	18fb      	adds	r3, r7, r3
     160:	1c02      	adds	r2, r0, #0
     162:	701a      	strb	r2, [r3, #0]
     164:	4b2f      	ldr	r3, [pc, #188]	; (224 <udi_msc_trans_block+0xd4>)
     166:	781b      	ldrb	r3, [r3, #0]
     168:	b2db      	uxtb	r3, r3
     16a:	2201      	movs	r2, #1
     16c:	4053      	eors	r3, r2
     16e:	b2db      	uxtb	r3, r3
     170:	2b00      	cmp	r3, #0
     172:	d001      	beq.n	178 <udi_msc_trans_block+0x28>

bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going
     174:	2300      	movs	r3, #0
     176:	e051      	b.n	21c <udi_msc_trans_block+0xcc>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
     178:	4b2a      	ldr	r3, [pc, #168]	; (224 <udi_msc_trans_block+0xd4>)
     17a:	2200      	movs	r2, #0
     17c:	701a      	strb	r2, [r3, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
     17e:	230f      	movs	r3, #15
     180:	18fb      	adds	r3, r7, r3
     182:	781b      	ldrb	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d001      	beq.n	18c <udi_msc_trans_block+0x3c>
     188:	2081      	movs	r0, #129	; 0x81
     18a:	e000      	b.n	18e <udi_msc_trans_block+0x3e>
     18c:	2002      	movs	r0, #2
     18e:	683b      	ldr	r3, [r7, #0]
     190:	2b00      	cmp	r3, #0
     192:	d001      	beq.n	198 <udi_msc_trans_block+0x48>
     194:	683b      	ldr	r3, [r7, #0]
     196:	e000      	b.n	19a <udi_msc_trans_block+0x4a>
     198:	4b23      	ldr	r3, [pc, #140]	; (228 <udi_msc_trans_block+0xd8>)
     19a:	6879      	ldr	r1, [r7, #4]
     19c:	68ba      	ldr	r2, [r7, #8]
     19e:	9300      	str	r3, [sp, #0]
     1a0:	000b      	movs	r3, r1
     1a2:	2100      	movs	r1, #0
     1a4:	4c21      	ldr	r4, [pc, #132]	; (22c <udi_msc_trans_block+0xdc>)
     1a6:	47a0      	blx	r4
     1a8:	0003      	movs	r3, r0
     1aa:	001a      	movs	r2, r3
     1ac:	2301      	movs	r3, #1
     1ae:	4053      	eors	r3, r2
     1b0:	b2db      	uxtb	r3, r3
     1b2:	2b00      	cmp	r3, #0
     1b4:	d004      	beq.n	1c0 <udi_msc_trans_block+0x70>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
     1b6:	4b1b      	ldr	r3, [pc, #108]	; (224 <udi_msc_trans_block+0xd4>)
     1b8:	2201      	movs	r2, #1
     1ba:	701a      	strb	r2, [r3, #0]
		return false;
     1bc:	2300      	movs	r3, #0
     1be:	e02d      	b.n	21c <udi_msc_trans_block+0xcc>
	}
	if (NULL == callback) {
     1c0:	683b      	ldr	r3, [r7, #0]
     1c2:	2b00      	cmp	r3, #0
     1c4:	d123      	bne.n	20e <udi_msc_trans_block+0xbe>
		while (!udi_msc_b_ack_trans);
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	4b16      	ldr	r3, [pc, #88]	; (224 <udi_msc_trans_block+0xd4>)
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	b2db      	uxtb	r3, r3
     1ce:	2201      	movs	r2, #1
     1d0:	4053      	eors	r3, r2
     1d2:	b2db      	uxtb	r3, r3
     1d4:	2b00      	cmp	r3, #0
     1d6:	d1f7      	bne.n	1c8 <udi_msc_trans_block+0x78>
		if (udi_msc_b_abort_trans) {
     1d8:	4b15      	ldr	r3, [pc, #84]	; (230 <udi_msc_trans_block+0xe0>)
     1da:	781b      	ldrb	r3, [r3, #0]
     1dc:	b2db      	uxtb	r3, r3
     1de:	2b00      	cmp	r3, #0
     1e0:	d001      	beq.n	1e6 <udi_msc_trans_block+0x96>
			return false;
     1e2:	2300      	movs	r3, #0
     1e4:	e01a      	b.n	21c <udi_msc_trans_block+0xcc>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
     1e6:	4b13      	ldr	r3, [pc, #76]	; (234 <udi_msc_trans_block+0xe4>)
     1e8:	689a      	ldr	r2, [r3, #8]
     1ea:	687b      	ldr	r3, [r7, #4]
     1ec:	1ad2      	subs	r2, r2, r3
     1ee:	4b11      	ldr	r3, [pc, #68]	; (234 <udi_msc_trans_block+0xe4>)
     1f0:	609a      	str	r2, [r3, #8]
		return (!udi_msc_b_abort_trans);
     1f2:	4b0f      	ldr	r3, [pc, #60]	; (230 <udi_msc_trans_block+0xe0>)
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	b2db      	uxtb	r3, r3
     1f8:	1e5a      	subs	r2, r3, #1
     1fa:	4193      	sbcs	r3, r2
     1fc:	b2db      	uxtb	r3, r3
     1fe:	2201      	movs	r2, #1
     200:	4053      	eors	r3, r2
     202:	b2db      	uxtb	r3, r3
     204:	1c1a      	adds	r2, r3, #0
     206:	2301      	movs	r3, #1
     208:	4013      	ands	r3, r2
     20a:	b2db      	uxtb	r3, r3
     20c:	e006      	b.n	21c <udi_msc_trans_block+0xcc>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
     20e:	4b09      	ldr	r3, [pc, #36]	; (234 <udi_msc_trans_block+0xe4>)
     210:	689a      	ldr	r2, [r3, #8]
     212:	687b      	ldr	r3, [r7, #4]
     214:	1ad2      	subs	r2, r2, r3
     216:	4b07      	ldr	r3, [pc, #28]	; (234 <udi_msc_trans_block+0xe4>)
     218:	609a      	str	r2, [r3, #8]
	return true;
     21a:	2301      	movs	r3, #1
}
     21c:	0018      	movs	r0, r3
     21e:	46bd      	mov	sp, r7
     220:	b005      	add	sp, #20
     222:	bd90      	pop	{r4, r7, pc}
     224:	2000000d 	.word	0x2000000d
     228:	00000115 	.word	0x00000115
     22c:	00000331 	.word	0x00000331
     230:	20000e88 	.word	0x20000e88
     234:	20000000 	.word	0x20000000

00000238 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
     238:	b580      	push	{r7, lr}
     23a:	b082      	sub	sp, #8
     23c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     23e:	f3ef 8310 	mrs	r3, PRIMASK
     242:	607b      	str	r3, [r7, #4]
  return(result);
     244:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
     246:	425a      	negs	r2, r3
     248:	4153      	adcs	r3, r2
     24a:	b2db      	uxtb	r3, r3
     24c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     24e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     250:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     254:	4b03      	ldr	r3, [pc, #12]	; (264 <cpu_irq_save+0x2c>)
     256:	2200      	movs	r2, #0
     258:	701a      	strb	r2, [r3, #0]
	return flags;
     25a:	683b      	ldr	r3, [r7, #0]
}
     25c:	0018      	movs	r0, r3
     25e:	46bd      	mov	sp, r7
     260:	b002      	add	sp, #8
     262:	bd80      	pop	{r7, pc}
     264:	200000ad 	.word	0x200000ad

00000268 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
     268:	b580      	push	{r7, lr}
     26a:	b082      	sub	sp, #8
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
	return (flags);
     270:	687b      	ldr	r3, [r7, #4]
     272:	1e5a      	subs	r2, r3, #1
     274:	4193      	sbcs	r3, r2
     276:	b2db      	uxtb	r3, r3
}
     278:	0018      	movs	r0, r3
     27a:	46bd      	mov	sp, r7
     27c:	b002      	add	sp, #8
     27e:	bd80      	pop	{r7, pc}

00000280 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
     288:	687b      	ldr	r3, [r7, #4]
     28a:	0018      	movs	r0, r3
     28c:	4b06      	ldr	r3, [pc, #24]	; (2a8 <cpu_irq_restore+0x28>)
     28e:	4798      	blx	r3
     290:	1e03      	subs	r3, r0, #0
     292:	d005      	beq.n	2a0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
     294:	4b05      	ldr	r3, [pc, #20]	; (2ac <cpu_irq_restore+0x2c>)
     296:	2201      	movs	r2, #1
     298:	701a      	strb	r2, [r3, #0]
     29a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     29e:	b662      	cpsie	i
}
     2a0:	46c0      	nop			; (mov r8, r8)
     2a2:	46bd      	mov	sp, r7
     2a4:	b002      	add	sp, #8
     2a6:	bd80      	pop	{r7, pc}
     2a8:	00000269 	.word	0x00000269
     2ac:	200000ad 	.word	0x200000ad

000002b0 <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
     2b0:	b580      	push	{r7, lr}
     2b2:	b082      	sub	sp, #8
     2b4:	af00      	add	r7, sp, #0
     2b6:	0002      	movs	r2, r0
     2b8:	1dfb      	adds	r3, r7, #7
     2ba:	701a      	strb	r2, [r3, #0]
	if ((ep == 0) || (ep == 0x80)) {
     2bc:	1dfb      	adds	r3, r7, #7
     2be:	781b      	ldrb	r3, [r3, #0]
     2c0:	2b00      	cmp	r3, #0
     2c2:	d003      	beq.n	2cc <udd_ep_get_job+0x1c>
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	2b80      	cmp	r3, #128	; 0x80
     2ca:	d101      	bne.n	2d0 <udd_ep_get_job+0x20>
		return NULL;
     2cc:	2300      	movs	r3, #0
     2ce:	e012      	b.n	2f6 <udd_ep_get_job+0x46>
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
     2d0:	1dfb      	adds	r3, r7, #7
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	220f      	movs	r2, #15
     2d6:	4013      	ands	r3, r2
     2d8:	005b      	lsls	r3, r3, #1
     2da:	1dfa      	adds	r2, r7, #7
     2dc:	7812      	ldrb	r2, [r2, #0]
     2de:	b252      	sxtb	r2, r2
     2e0:	b2d2      	uxtb	r2, r2
     2e2:	09d2      	lsrs	r2, r2, #7
     2e4:	b2d2      	uxtb	r2, r2
     2e6:	189b      	adds	r3, r3, r2
     2e8:	1e9a      	subs	r2, r3, #2
     2ea:	0013      	movs	r3, r2
     2ec:	009b      	lsls	r3, r3, #2
     2ee:	189b      	adds	r3, r3, r2
     2f0:	009b      	lsls	r3, r3, #2
     2f2:	4a03      	ldr	r2, [pc, #12]	; (300 <udd_ep_get_job+0x50>)
     2f4:	189b      	adds	r3, r3, r2
	}
}
     2f6:	0018      	movs	r0, r3
     2f8:	46bd      	mov	sp, r7
     2fa:	b002      	add	sp, #8
     2fc:	bd80      	pop	{r7, pc}
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	20000c6c 	.word	0x20000c6c

00000304 <udd_ep_is_halted>:

	return true;
}

bool udd_ep_is_halted(udd_ep_id_t ep)
{
     304:	b580      	push	{r7, lr}
     306:	b082      	sub	sp, #8
     308:	af00      	add	r7, sp, #0
     30a:	0002      	movs	r2, r0
     30c:	1dfb      	adds	r3, r7, #7
     30e:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
     310:	1dfb      	adds	r3, r7, #7
     312:	781a      	ldrb	r2, [r3, #0]
     314:	4b04      	ldr	r3, [pc, #16]	; (328 <udd_ep_is_halted+0x24>)
     316:	0011      	movs	r1, r2
     318:	0018      	movs	r0, r3
     31a:	4b04      	ldr	r3, [pc, #16]	; (32c <udd_ep_is_halted+0x28>)
     31c:	4798      	blx	r3
     31e:	0003      	movs	r3, r0
}
     320:	0018      	movs	r0, r3
     322:	46bd      	mov	sp, r7
     324:	b002      	add	sp, #8
     326:	bd80      	pop	{r7, pc}
     328:	20000f0c 	.word	0x20000f0c
     32c:	00000af5 	.word	0x00000af5

00000330 <udd_ep_run>:
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
}

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
     330:	b590      	push	{r4, r7, lr}
     332:	b089      	sub	sp, #36	; 0x24
     334:	af00      	add	r7, sp, #0
     336:	60ba      	str	r2, [r7, #8]
     338:	607b      	str	r3, [r7, #4]
     33a:	230f      	movs	r3, #15
     33c:	18fb      	adds	r3, r7, r3
     33e:	1c02      	adds	r2, r0, #0
     340:	701a      	strb	r2, [r3, #0]
     342:	230e      	movs	r3, #14
     344:	18fb      	adds	r3, r7, r3
     346:	1c0a      	adds	r2, r1, #0
     348:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
     34a:	231d      	movs	r3, #29
     34c:	18fb      	adds	r3, r7, r3
     34e:	220f      	movs	r2, #15
     350:	18ba      	adds	r2, r7, r2
     352:	7812      	ldrb	r2, [r2, #0]
     354:	210f      	movs	r1, #15
     356:	400a      	ands	r2, r1
     358:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
     35a:	231d      	movs	r3, #29
     35c:	18fb      	adds	r3, r7, r3
     35e:	781b      	ldrb	r3, [r3, #0]
     360:	2b02      	cmp	r3, #2
     362:	d807      	bhi.n	374 <udd_ep_run+0x44>
     364:	230f      	movs	r3, #15
     366:	18fb      	adds	r3, r7, r3
     368:	781b      	ldrb	r3, [r3, #0]
     36a:	0018      	movs	r0, r3
     36c:	4b9f      	ldr	r3, [pc, #636]	; (5ec <udd_ep_run+0x2bc>)
     36e:	4798      	blx	r3
     370:	1e03      	subs	r3, r0, #0
     372:	d001      	beq.n	378 <udd_ep_run+0x48>
		return false;
     374:	2300      	movs	r3, #0
     376:	e134      	b.n	5e2 <udd_ep_run+0x2b2>
	}

	ptr_job = udd_ep_get_job(ep);
     378:	230f      	movs	r3, #15
     37a:	18fb      	adds	r3, r7, r3
     37c:	781b      	ldrb	r3, [r3, #0]
     37e:	0018      	movs	r0, r3
     380:	4b9b      	ldr	r3, [pc, #620]	; (5f0 <udd_ep_run+0x2c0>)
     382:	4798      	blx	r3
     384:	0003      	movs	r3, r0
     386:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
     388:	4b9a      	ldr	r3, [pc, #616]	; (5f4 <udd_ep_run+0x2c4>)
     38a:	4798      	blx	r3
     38c:	0003      	movs	r3, r0
     38e:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
     390:	69bb      	ldr	r3, [r7, #24]
     392:	7c9b      	ldrb	r3, [r3, #18]
     394:	2201      	movs	r2, #1
     396:	4013      	ands	r3, r2
     398:	b2db      	uxtb	r3, r3
     39a:	2b00      	cmp	r3, #0
     39c:	d005      	beq.n	3aa <udd_ep_run+0x7a>
		cpu_irq_restore(flags);
     39e:	697b      	ldr	r3, [r7, #20]
     3a0:	0018      	movs	r0, r3
     3a2:	4b95      	ldr	r3, [pc, #596]	; (5f8 <udd_ep_run+0x2c8>)
     3a4:	4798      	blx	r3
		return false; /* Job already on going */
     3a6:	2300      	movs	r3, #0
     3a8:	e11b      	b.n	5e2 <udd_ep_run+0x2b2>
	}
	ptr_job->busy = true;
     3aa:	69bb      	ldr	r3, [r7, #24]
     3ac:	7c9a      	ldrb	r2, [r3, #18]
     3ae:	2101      	movs	r1, #1
     3b0:	430a      	orrs	r2, r1
     3b2:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
     3b4:	697b      	ldr	r3, [r7, #20]
     3b6:	0018      	movs	r0, r3
     3b8:	4b8f      	ldr	r3, [pc, #572]	; (5f8 <udd_ep_run+0x2c8>)
     3ba:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
     3bc:	69bb      	ldr	r3, [r7, #24]
     3be:	68ba      	ldr	r2, [r7, #8]
     3c0:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
     3c2:	69bb      	ldr	r3, [r7, #24]
     3c4:	687a      	ldr	r2, [r7, #4]
     3c6:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
     3c8:	69bb      	ldr	r3, [r7, #24]
     3ca:	2200      	movs	r2, #0
     3cc:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
     3ce:	69bb      	ldr	r3, [r7, #24]
     3d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     3d2:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
     3d4:	69bb      	ldr	r3, [r7, #24]
     3d6:	220e      	movs	r2, #14
     3d8:	18ba      	adds	r2, r7, r2
     3da:	7812      	ldrb	r2, [r2, #0]
     3dc:	2101      	movs	r1, #1
     3de:	400a      	ands	r2, r1
     3e0:	1890      	adds	r0, r2, r2
     3e2:	7c9a      	ldrb	r2, [r3, #18]
     3e4:	2102      	movs	r1, #2
     3e6:	438a      	bics	r2, r1
     3e8:	1c11      	adds	r1, r2, #0
     3ea:	1c02      	adds	r2, r0, #0
     3ec:	430a      	orrs	r2, r1
     3ee:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
     3f0:	69bb      	ldr	r3, [r7, #24]
     3f2:	7c9a      	ldrb	r2, [r3, #18]
     3f4:	2104      	movs	r1, #4
     3f6:	438a      	bics	r2, r1
     3f8:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
     3fa:	230f      	movs	r3, #15
     3fc:	18fb      	adds	r3, r7, r3
     3fe:	781b      	ldrb	r3, [r3, #0]
     400:	b25b      	sxtb	r3, r3
     402:	2b00      	cmp	r3, #0
     404:	db00      	blt.n	408 <udd_ep_run+0xd8>
     406:	e078      	b.n	4fa <udd_ep_run+0x1ca>
		if (0 != ptr_job->buf_size) {
     408:	69bb      	ldr	r3, [r7, #24]
     40a:	689b      	ldr	r3, [r3, #8]
     40c:	2b00      	cmp	r3, #0
     40e:	d03f      	beq.n	490 <udd_ep_run+0x160>
			next_trans = ptr_job->buf_size;
     410:	69bb      	ldr	r3, [r7, #24]
     412:	689a      	ldr	r2, [r3, #8]
     414:	231e      	movs	r3, #30
     416:	18fb      	adds	r3, r7, r3
     418:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
     41a:	231e      	movs	r3, #30
     41c:	18fb      	adds	r3, r7, r3
     41e:	881b      	ldrh	r3, [r3, #0]
     420:	4a76      	ldr	r2, [pc, #472]	; (5fc <udd_ep_run+0x2cc>)
     422:	4293      	cmp	r3, r2
     424:	d90d      	bls.n	442 <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
     426:	69bb      	ldr	r3, [r7, #24]
     428:	8a1b      	ldrh	r3, [r3, #16]
     42a:	0019      	movs	r1, r3
     42c:	4a73      	ldr	r2, [pc, #460]	; (5fc <udd_ep_run+0x2cc>)
     42e:	4b74      	ldr	r3, [pc, #464]	; (600 <udd_ep_run+0x2d0>)
     430:	0010      	movs	r0, r2
     432:	4798      	blx	r3
     434:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
     436:	b29a      	uxth	r2, r3
     438:	231e      	movs	r3, #30
     43a:	18fb      	adds	r3, r7, r3
     43c:	496f      	ldr	r1, [pc, #444]	; (5fc <udd_ep_run+0x2cc>)
     43e:	1a8a      	subs	r2, r1, r2
     440:	801a      	strh	r2, [r3, #0]
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
     442:	69bb      	ldr	r3, [r7, #24]
     444:	7c9b      	ldrb	r3, [r3, #18]
     446:	2202      	movs	r2, #2
     448:	4013      	ands	r3, r2
     44a:	b2db      	uxtb	r3, r3
     44c:	2b00      	cmp	r3, #0
     44e:	d00d      	beq.n	46c <udd_ep_run+0x13c>
					(0 == (next_trans % ptr_job->ep_size));
     450:	69bb      	ldr	r3, [r7, #24]
     452:	8a19      	ldrh	r1, [r3, #16]
     454:	231e      	movs	r3, #30
     456:	18fb      	adds	r3, r7, r3
     458:	881a      	ldrh	r2, [r3, #0]
     45a:	4b6a      	ldr	r3, [pc, #424]	; (604 <udd_ep_run+0x2d4>)
     45c:	0010      	movs	r0, r2
     45e:	4798      	blx	r3
     460:	000b      	movs	r3, r1
     462:	b29b      	uxth	r3, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
     464:	2b00      	cmp	r3, #0
     466:	d101      	bne.n	46c <udd_ep_run+0x13c>
     468:	2301      	movs	r3, #1
     46a:	e000      	b.n	46e <udd_ep_run+0x13e>
     46c:	2300      	movs	r3, #0
     46e:	b2db      	uxtb	r3, r3
     470:	1c1a      	adds	r2, r3, #0
     472:	2301      	movs	r3, #1
     474:	4013      	ands	r3, r2
     476:	b2da      	uxtb	r2, r3
     478:	69bb      	ldr	r3, [r7, #24]
     47a:	2101      	movs	r1, #1
     47c:	400a      	ands	r2, r1
     47e:	1890      	adds	r0, r2, r2
     480:	7c9a      	ldrb	r2, [r3, #18]
     482:	2102      	movs	r1, #2
     484:	438a      	bics	r2, r1
     486:	1c11      	adds	r1, r2, #0
     488:	1c02      	adds	r2, r0, #0
     48a:	430a      	orrs	r2, r1
     48c:	749a      	strb	r2, [r3, #18]
     48e:	e023      	b.n	4d8 <udd_ep_run+0x1a8>
		} else if (true == ptr_job->b_shortpacket) {
     490:	69bb      	ldr	r3, [r7, #24]
     492:	7c9b      	ldrb	r3, [r3, #18]
     494:	2202      	movs	r2, #2
     496:	4013      	ands	r3, r2
     498:	b2db      	uxtb	r3, r3
     49a:	2b00      	cmp	r3, #0
     49c:	d009      	beq.n	4b2 <udd_ep_run+0x182>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
     49e:	69bb      	ldr	r3, [r7, #24]
     4a0:	7c9a      	ldrb	r2, [r3, #18]
     4a2:	2102      	movs	r1, #2
     4a4:	438a      	bics	r2, r1
     4a6:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
     4a8:	231e      	movs	r3, #30
     4aa:	18fb      	adds	r3, r7, r3
     4ac:	2200      	movs	r2, #0
     4ae:	801a      	strh	r2, [r3, #0]
     4b0:	e012      	b.n	4d8 <udd_ep_run+0x1a8>
		} else {
			ptr_job->busy = false;
     4b2:	69bb      	ldr	r3, [r7, #24]
     4b4:	7c9a      	ldrb	r2, [r3, #18]
     4b6:	2101      	movs	r1, #1
     4b8:	438a      	bics	r2, r1
     4ba:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
     4bc:	69bb      	ldr	r3, [r7, #24]
     4be:	681b      	ldr	r3, [r3, #0]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d007      	beq.n	4d4 <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
     4c4:	69bb      	ldr	r3, [r7, #24]
     4c6:	681b      	ldr	r3, [r3, #0]
     4c8:	220f      	movs	r2, #15
     4ca:	18ba      	adds	r2, r7, r2
     4cc:	7812      	ldrb	r2, [r2, #0]
     4ce:	2100      	movs	r1, #0
     4d0:	2000      	movs	r0, #0
     4d2:	4798      	blx	r3
			}
			return true;
     4d4:	2301      	movs	r3, #1
     4d6:	e084      	b.n	5e2 <udd_ep_run+0x2b2>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
     4d8:	69bb      	ldr	r3, [r7, #24]
     4da:	685a      	ldr	r2, [r3, #4]
     4dc:	231e      	movs	r3, #30
     4de:	18fb      	adds	r3, r7, r3
     4e0:	881c      	ldrh	r4, [r3, #0]
     4e2:	231d      	movs	r3, #29
     4e4:	18fb      	adds	r3, r7, r3
     4e6:	7819      	ldrb	r1, [r3, #0]
     4e8:	4847      	ldr	r0, [pc, #284]	; (608 <udd_ep_run+0x2d8>)
     4ea:	0023      	movs	r3, r4
     4ec:	4c47      	ldr	r4, [pc, #284]	; (60c <udd_ep_run+0x2dc>)
     4ee:	47a0      	blx	r4
     4f0:	0003      	movs	r3, r0
		return (STATUS_OK ==
     4f2:	425a      	negs	r2, r3
     4f4:	4153      	adcs	r3, r2
     4f6:	b2db      	uxtb	r3, r3
     4f8:	e073      	b.n	5e2 <udd_ep_run+0x2b2>
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
     4fa:	69bb      	ldr	r3, [r7, #24]
     4fc:	689b      	ldr	r3, [r3, #8]
     4fe:	2b00      	cmp	r3, #0
     500:	d05d      	beq.n	5be <udd_ep_run+0x28e>
			next_trans = ptr_job->buf_size;
     502:	69bb      	ldr	r3, [r7, #24]
     504:	689a      	ldr	r2, [r3, #8]
     506:	231e      	movs	r3, #30
     508:	18fb      	adds	r3, r7, r3
     50a:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
     50c:	231e      	movs	r3, #30
     50e:	18fb      	adds	r3, r7, r3
     510:	881b      	ldrh	r3, [r3, #0]
     512:	4a3a      	ldr	r2, [pc, #232]	; (5fc <udd_ep_run+0x2cc>)
     514:	4293      	cmp	r3, r2
     516:	d90e      	bls.n	536 <udd_ep_run+0x206>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
     518:	69bb      	ldr	r3, [r7, #24]
     51a:	8a1b      	ldrh	r3, [r3, #16]
     51c:	0019      	movs	r1, r3
     51e:	4a37      	ldr	r2, [pc, #220]	; (5fc <udd_ep_run+0x2cc>)
     520:	4b37      	ldr	r3, [pc, #220]	; (600 <udd_ep_run+0x2d0>)
     522:	0010      	movs	r0, r2
     524:	4798      	blx	r3
     526:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
     528:	b29a      	uxth	r2, r3
     52a:	231e      	movs	r3, #30
     52c:	18fb      	adds	r3, r7, r3
     52e:	4933      	ldr	r1, [pc, #204]	; (5fc <udd_ep_run+0x2cc>)
     530:	1a8a      	subs	r2, r1, r2
     532:	801a      	strh	r2, [r3, #0]
     534:	e010      	b.n	558 <udd_ep_run+0x228>
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
     536:	69bb      	ldr	r3, [r7, #24]
     538:	8a19      	ldrh	r1, [r3, #16]
     53a:	231e      	movs	r3, #30
     53c:	18fb      	adds	r3, r7, r3
     53e:	881a      	ldrh	r2, [r3, #0]
     540:	4b30      	ldr	r3, [pc, #192]	; (604 <udd_ep_run+0x2d4>)
     542:	0010      	movs	r0, r2
     544:	4798      	blx	r3
     546:	000b      	movs	r3, r1
     548:	b29a      	uxth	r2, r3
     54a:	231e      	movs	r3, #30
     54c:	18fb      	adds	r3, r7, r3
     54e:	211e      	movs	r1, #30
     550:	1879      	adds	r1, r7, r1
     552:	8809      	ldrh	r1, [r1, #0]
     554:	1a8a      	subs	r2, r1, r2
     556:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
     558:	69bb      	ldr	r3, [r7, #24]
     55a:	8a1b      	ldrh	r3, [r3, #16]
     55c:	221e      	movs	r2, #30
     55e:	18ba      	adds	r2, r7, r2
     560:	8812      	ldrh	r2, [r2, #0]
     562:	429a      	cmp	r2, r3
     564:	d21a      	bcs.n	59c <udd_ep_run+0x26c>
				ptr_job->b_use_out_cache_buffer = true;
     566:	69bb      	ldr	r3, [r7, #24]
     568:	7c9a      	ldrb	r2, [r3, #18]
     56a:	2104      	movs	r1, #4
     56c:	430a      	orrs	r2, r1
     56e:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
     570:	231d      	movs	r3, #29
     572:	18fb      	adds	r3, r7, r3
     574:	781b      	ldrb	r3, [r3, #0]
     576:	3b01      	subs	r3, #1
     578:	019a      	lsls	r2, r3, #6
     57a:	4b25      	ldr	r3, [pc, #148]	; (610 <udd_ep_run+0x2e0>)
     57c:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
     57e:	69bb      	ldr	r3, [r7, #24]
     580:	8a1b      	ldrh	r3, [r3, #16]
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
     582:	001c      	movs	r4, r3
     584:	231d      	movs	r3, #29
     586:	18fb      	adds	r3, r7, r3
     588:	7819      	ldrb	r1, [r3, #0]
     58a:	481f      	ldr	r0, [pc, #124]	; (608 <udd_ep_run+0x2d8>)
     58c:	0023      	movs	r3, r4
     58e:	4c21      	ldr	r4, [pc, #132]	; (614 <udd_ep_run+0x2e4>)
     590:	47a0      	blx	r4
     592:	0003      	movs	r3, r0
				return (STATUS_OK ==
     594:	425a      	negs	r2, r3
     596:	4153      	adcs	r3, r2
     598:	b2db      	uxtb	r3, r3
     59a:	e022      	b.n	5e2 <udd_ep_run+0x2b2>
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
     59c:	69bb      	ldr	r3, [r7, #24]
     59e:	685a      	ldr	r2, [r3, #4]
     5a0:	231e      	movs	r3, #30
     5a2:	18fb      	adds	r3, r7, r3
     5a4:	881c      	ldrh	r4, [r3, #0]
     5a6:	231d      	movs	r3, #29
     5a8:	18fb      	adds	r3, r7, r3
     5aa:	7819      	ldrb	r1, [r3, #0]
     5ac:	4816      	ldr	r0, [pc, #88]	; (608 <udd_ep_run+0x2d8>)
     5ae:	0023      	movs	r3, r4
     5b0:	4c18      	ldr	r4, [pc, #96]	; (614 <udd_ep_run+0x2e4>)
     5b2:	47a0      	blx	r4
     5b4:	0003      	movs	r3, r0
				return (STATUS_OK ==
     5b6:	425a      	negs	r2, r3
     5b8:	4153      	adcs	r3, r2
     5ba:	b2db      	uxtb	r3, r3
     5bc:	e011      	b.n	5e2 <udd_ep_run+0x2b2>
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
     5be:	69bb      	ldr	r3, [r7, #24]
     5c0:	7c9a      	ldrb	r2, [r3, #18]
     5c2:	2101      	movs	r1, #1
     5c4:	438a      	bics	r2, r1
     5c6:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
     5c8:	69bb      	ldr	r3, [r7, #24]
     5ca:	681b      	ldr	r3, [r3, #0]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d007      	beq.n	5e0 <udd_ep_run+0x2b0>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
     5d0:	69bb      	ldr	r3, [r7, #24]
     5d2:	681b      	ldr	r3, [r3, #0]
     5d4:	220f      	movs	r2, #15
     5d6:	18ba      	adds	r2, r7, r2
     5d8:	7812      	ldrb	r2, [r2, #0]
     5da:	2100      	movs	r1, #0
     5dc:	2000      	movs	r0, #0
     5de:	4798      	blx	r3
			}
			return true;
     5e0:	2301      	movs	r3, #1
		}
	}
}
     5e2:	0018      	movs	r0, r3
     5e4:	46bd      	mov	sp, r7
     5e6:	b009      	add	sp, #36	; 0x24
     5e8:	bd90      	pop	{r4, r7, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	00000305 	.word	0x00000305
     5f0:	000002b1 	.word	0x000002b1
     5f4:	00000239 	.word	0x00000239
     5f8:	00000281 	.word	0x00000281
     5fc:	00001fff 	.word	0x00001fff
     600:	00020e9d 	.word	0x00020e9d
     604:	00020cc9 	.word	0x00020cc9
     608:	20000f0c 	.word	0x20000f0c
     60c:	00000b69 	.word	0x00000b69
     610:	20000e8c 	.word	0x20000e8c
     614:	00000c1d 	.word	0x00000c1d

00000618 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
     618:	b580      	push	{r7, lr}
     61a:	b082      	sub	sp, #8
     61c:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     61e:	4bc0      	ldr	r3, [pc, #768]	; (920 <_usb_host_interrupt_handler+0x308>)
     620:	681b      	ldr	r3, [r3, #0]
     622:	681b      	ldr	r3, [r3, #0]
     624:	8c1b      	ldrh	r3, [r3, #32]
     626:	b29b      	uxth	r3, r3
     628:	2b00      	cmp	r3, #0
     62a:	d00a      	beq.n	642 <_usb_host_interrupt_handler+0x2a>
     62c:	4bbc      	ldr	r3, [pc, #752]	; (920 <_usb_host_interrupt_handler+0x308>)
     62e:	681b      	ldr	r3, [r3, #0]
     630:	681b      	ldr	r3, [r3, #0]
     632:	8c1b      	ldrh	r3, [r3, #32]
     634:	b29b      	uxth	r3, r3
     636:	001a      	movs	r2, r3
     638:	4bba      	ldr	r3, [pc, #744]	; (924 <_usb_host_interrupt_handler+0x30c>)
     63a:	0010      	movs	r0, r2
     63c:	4798      	blx	r3
     63e:	0003      	movs	r3, r0
     640:	e000      	b.n	644 <_usb_host_interrupt_handler+0x2c>
     642:	2320      	movs	r3, #32
     644:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
     646:	687b      	ldr	r3, [r7, #4]
     648:	2b1f      	cmp	r3, #31
     64a:	d900      	bls.n	64e <_usb_host_interrupt_handler+0x36>
     64c:	e174      	b.n	938 <_usb_host_interrupt_handler+0x320>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     64e:	4bb4      	ldr	r3, [pc, #720]	; (920 <_usb_host_interrupt_handler+0x308>)
     650:	681b      	ldr	r3, [r3, #0]
     652:	681a      	ldr	r2, [r3, #0]
     654:	687b      	ldr	r3, [r7, #4]
     656:	3308      	adds	r3, #8
     658:	015b      	lsls	r3, r3, #5
     65a:	18d3      	adds	r3, r2, r3
     65c:	3307      	adds	r3, #7
     65e:	781b      	ldrb	r3, [r3, #0]
     660:	b2db      	uxtb	r3, r3
     662:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     664:	683b      	ldr	r3, [r7, #0]
     666:	2203      	movs	r2, #3
     668:	4013      	ands	r3, r2
     66a:	d100      	bne.n	66e <_usb_host_interrupt_handler+0x56>
     66c:	e088      	b.n	780 <_usb_host_interrupt_handler+0x168>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     66e:	2201      	movs	r2, #1
     670:	687b      	ldr	r3, [r7, #4]
     672:	409a      	lsls	r2, r3
     674:	0013      	movs	r3, r2
     676:	43db      	mvns	r3, r3
     678:	001a      	movs	r2, r3
     67a:	4bab      	ldr	r3, [pc, #684]	; (928 <_usb_host_interrupt_handler+0x310>)
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	401a      	ands	r2, r3
     680:	4ba9      	ldr	r3, [pc, #676]	; (928 <_usb_host_interrupt_handler+0x310>)
     682:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     684:	4ba6      	ldr	r3, [pc, #664]	; (920 <_usb_host_interrupt_handler+0x308>)
     686:	681b      	ldr	r3, [r3, #0]
     688:	681a      	ldr	r2, [r3, #0]
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	3308      	adds	r3, #8
     68e:	015b      	lsls	r3, r3, #5
     690:	18d3      	adds	r3, r2, r3
     692:	3307      	adds	r3, #7
     694:	2203      	movs	r2, #3
     696:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     698:	4ba1      	ldr	r3, [pc, #644]	; (920 <_usb_host_interrupt_handler+0x308>)
     69a:	681a      	ldr	r2, [r3, #0]
     69c:	21ae      	movs	r1, #174	; 0xae
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	18d3      	adds	r3, r2, r3
     6a2:	185b      	adds	r3, r3, r1
     6a4:	781b      	ldrb	r3, [r3, #0]
     6a6:	001a      	movs	r2, r3
     6a8:	2301      	movs	r3, #1
     6aa:	4013      	ands	r3, r2
     6ac:	d068      	beq.n	780 <_usb_host_interrupt_handler+0x168>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	b2da      	uxtb	r2, r3
     6b2:	4b9e      	ldr	r3, [pc, #632]	; (92c <_usb_host_interrupt_handler+0x314>)
     6b4:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     6b6:	4b9a      	ldr	r3, [pc, #616]	; (920 <_usb_host_interrupt_handler+0x308>)
     6b8:	681b      	ldr	r3, [r3, #0]
     6ba:	681b      	ldr	r3, [r3, #0]
     6bc:	687a      	ldr	r2, [r7, #4]
     6be:	3208      	adds	r2, #8
     6c0:	0152      	lsls	r2, r2, #5
     6c2:	5cd3      	ldrb	r3, [r2, r3]
     6c4:	079b      	lsls	r3, r3, #30
     6c6:	0f9b      	lsrs	r3, r3, #30
     6c8:	b2db      	uxtb	r3, r3
     6ca:	2b01      	cmp	r3, #1
     6cc:	d11e      	bne.n	70c <_usb_host_interrupt_handler+0xf4>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     6ce:	4a98      	ldr	r2, [pc, #608]	; (930 <_usb_host_interrupt_handler+0x318>)
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	015b      	lsls	r3, r3, #5
     6d4:	18d3      	adds	r3, r2, r3
     6d6:	685b      	ldr	r3, [r3, #4]
     6d8:	049b      	lsls	r3, r3, #18
     6da:	0c9b      	lsrs	r3, r3, #18
     6dc:	b29b      	uxth	r3, r3
     6de:	001a      	movs	r2, r3
     6e0:	4b92      	ldr	r3, [pc, #584]	; (92c <_usb_host_interrupt_handler+0x314>)
     6e2:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     6e4:	4a92      	ldr	r2, [pc, #584]	; (930 <_usb_host_interrupt_handler+0x318>)
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	015b      	lsls	r3, r3, #5
     6ea:	18d3      	adds	r3, r2, r3
     6ec:	685b      	ldr	r3, [r3, #4]
     6ee:	011b      	lsls	r3, r3, #4
     6f0:	0c9b      	lsrs	r3, r3, #18
     6f2:	b29b      	uxth	r3, r3
     6f4:	001a      	movs	r2, r3
     6f6:	4b8d      	ldr	r3, [pc, #564]	; (92c <_usb_host_interrupt_handler+0x314>)
     6f8:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
     6fa:	4a8d      	ldr	r2, [pc, #564]	; (930 <_usb_host_interrupt_handler+0x318>)
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	015b      	lsls	r3, r3, #5
     700:	18d3      	adds	r3, r2, r3
     702:	685a      	ldr	r2, [r3, #4]
     704:	0b92      	lsrs	r2, r2, #14
     706:	0392      	lsls	r2, r2, #14
     708:	605a      	str	r2, [r3, #4]
     70a:	e02c      	b.n	766 <_usb_host_interrupt_handler+0x14e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     70c:	4a88      	ldr	r2, [pc, #544]	; (930 <_usb_host_interrupt_handler+0x318>)
     70e:	687b      	ldr	r3, [r7, #4]
     710:	015b      	lsls	r3, r3, #5
     712:	18d3      	adds	r3, r2, r3
     714:	685b      	ldr	r3, [r3, #4]
     716:	011b      	lsls	r3, r3, #4
     718:	0c9b      	lsrs	r3, r3, #18
     71a:	b29b      	uxth	r3, r3
     71c:	001a      	movs	r2, r3
     71e:	4b83      	ldr	r3, [pc, #524]	; (92c <_usb_host_interrupt_handler+0x314>)
     720:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     722:	4a83      	ldr	r2, [pc, #524]	; (930 <_usb_host_interrupt_handler+0x318>)
     724:	687b      	ldr	r3, [r7, #4]
     726:	015b      	lsls	r3, r3, #5
     728:	18d3      	adds	r3, r2, r3
     72a:	685b      	ldr	r3, [r3, #4]
     72c:	049b      	lsls	r3, r3, #18
     72e:	0c9b      	lsrs	r3, r3, #18
     730:	b29b      	uxth	r3, r3
     732:	001a      	movs	r2, r3
     734:	4b7d      	ldr	r3, [pc, #500]	; (92c <_usb_host_interrupt_handler+0x314>)
     736:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     738:	4a7d      	ldr	r2, [pc, #500]	; (930 <_usb_host_interrupt_handler+0x318>)
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	015b      	lsls	r3, r3, #5
     73e:	18d3      	adds	r3, r2, r3
     740:	685a      	ldr	r2, [r3, #4]
     742:	497c      	ldr	r1, [pc, #496]	; (934 <_usb_host_interrupt_handler+0x31c>)
     744:	400a      	ands	r2, r1
     746:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
     748:	4b78      	ldr	r3, [pc, #480]	; (92c <_usb_host_interrupt_handler+0x314>)
     74a:	885b      	ldrh	r3, [r3, #2]
     74c:	2b00      	cmp	r3, #0
     74e:	d10a      	bne.n	766 <_usb_host_interrupt_handler+0x14e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     750:	4a77      	ldr	r2, [pc, #476]	; (930 <_usb_host_interrupt_handler+0x318>)
     752:	687b      	ldr	r3, [r7, #4]
     754:	015b      	lsls	r3, r3, #5
     756:	18d3      	adds	r3, r2, r3
     758:	685b      	ldr	r3, [r3, #4]
     75a:	049b      	lsls	r3, r3, #18
     75c:	0c9b      	lsrs	r3, r3, #18
     75e:	b29b      	uxth	r3, r3
     760:	001a      	movs	r2, r3
     762:	4b72      	ldr	r3, [pc, #456]	; (92c <_usb_host_interrupt_handler+0x314>)
     764:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
     766:	4b6e      	ldr	r3, [pc, #440]	; (920 <_usb_host_interrupt_handler+0x308>)
     768:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
     76a:	687b      	ldr	r3, [r7, #4]
     76c:	3302      	adds	r3, #2
     76e:	011b      	lsls	r3, r3, #4
     770:	18d3      	adds	r3, r2, r3
     772:	3304      	adds	r3, #4
     774:	681a      	ldr	r2, [r3, #0]
     776:	4b6a      	ldr	r3, [pc, #424]	; (920 <_usb_host_interrupt_handler+0x308>)
     778:	681b      	ldr	r3, [r3, #0]
     77a:	496c      	ldr	r1, [pc, #432]	; (92c <_usb_host_interrupt_handler+0x314>)
     77c:	0018      	movs	r0, r3
     77e:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
     780:	683b      	ldr	r3, [r7, #0]
     782:	2204      	movs	r2, #4
     784:	4013      	ands	r3, r2
     786:	d014      	beq.n	7b2 <_usb_host_interrupt_handler+0x19a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     788:	2201      	movs	r2, #1
     78a:	687b      	ldr	r3, [r7, #4]
     78c:	409a      	lsls	r2, r3
     78e:	0013      	movs	r3, r2
     790:	43db      	mvns	r3, r3
     792:	001a      	movs	r2, r3
     794:	4b64      	ldr	r3, [pc, #400]	; (928 <_usb_host_interrupt_handler+0x310>)
     796:	681b      	ldr	r3, [r3, #0]
     798:	401a      	ands	r2, r3
     79a:	4b63      	ldr	r3, [pc, #396]	; (928 <_usb_host_interrupt_handler+0x310>)
     79c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     79e:	4b60      	ldr	r3, [pc, #384]	; (920 <_usb_host_interrupt_handler+0x308>)
     7a0:	681b      	ldr	r3, [r3, #0]
     7a2:	681a      	ldr	r2, [r3, #0]
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	3308      	adds	r3, #8
     7a8:	015b      	lsls	r3, r3, #5
     7aa:	18d3      	adds	r3, r2, r3
     7ac:	3307      	adds	r3, #7
     7ae:	2204      	movs	r2, #4
     7b0:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
     7b2:	683b      	ldr	r3, [r7, #0]
     7b4:	2208      	movs	r2, #8
     7b6:	4013      	ands	r3, r2
     7b8:	d03c      	beq.n	834 <_usb_host_interrupt_handler+0x21c>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     7ba:	2201      	movs	r2, #1
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	409a      	lsls	r2, r3
     7c0:	0013      	movs	r3, r2
     7c2:	43db      	mvns	r3, r3
     7c4:	001a      	movs	r2, r3
     7c6:	4b58      	ldr	r3, [pc, #352]	; (928 <_usb_host_interrupt_handler+0x310>)
     7c8:	681b      	ldr	r3, [r3, #0]
     7ca:	401a      	ands	r2, r3
     7cc:	4b56      	ldr	r3, [pc, #344]	; (928 <_usb_host_interrupt_handler+0x310>)
     7ce:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     7d0:	4b53      	ldr	r3, [pc, #332]	; (920 <_usb_host_interrupt_handler+0x308>)
     7d2:	681b      	ldr	r3, [r3, #0]
     7d4:	681a      	ldr	r2, [r3, #0]
     7d6:	687b      	ldr	r3, [r7, #4]
     7d8:	3308      	adds	r3, #8
     7da:	015b      	lsls	r3, r3, #5
     7dc:	18d3      	adds	r3, r2, r3
     7de:	3307      	adds	r3, #7
     7e0:	2208      	movs	r2, #8
     7e2:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     7e4:	4b4e      	ldr	r3, [pc, #312]	; (920 <_usb_host_interrupt_handler+0x308>)
     7e6:	681a      	ldr	r2, [r3, #0]
     7e8:	21ae      	movs	r1, #174	; 0xae
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	18d3      	adds	r3, r2, r3
     7ee:	185b      	adds	r3, r3, r1
     7f0:	781b      	ldrb	r3, [r3, #0]
     7f2:	001a      	movs	r2, r3
     7f4:	2302      	movs	r3, #2
     7f6:	4013      	ands	r3, r2
     7f8:	d01c      	beq.n	834 <_usb_host_interrupt_handler+0x21c>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	b2da      	uxtb	r2, r3
     7fe:	4b4b      	ldr	r3, [pc, #300]	; (92c <_usb_host_interrupt_handler+0x314>)
     800:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
     802:	4a4b      	ldr	r2, [pc, #300]	; (930 <_usb_host_interrupt_handler+0x318>)
     804:	687b      	ldr	r3, [r7, #4]
     806:	015b      	lsls	r3, r3, #5
     808:	18d3      	adds	r3, r2, r3
     80a:	330e      	adds	r3, #14
     80c:	881b      	ldrh	r3, [r3, #0]
     80e:	b29b      	uxth	r3, r3
     810:	b2db      	uxtb	r3, r3
     812:	221f      	movs	r2, #31
     814:	4013      	ands	r3, r2
     816:	b2da      	uxtb	r2, r3
				pipe_callback_para.pipe_error_status =
     818:	4b44      	ldr	r3, [pc, #272]	; (92c <_usb_host_interrupt_handler+0x314>)
     81a:	705a      	strb	r2, [r3, #1]
				(_usb_instances->host_pipe_callback[pipe_int]
     81c:	4b40      	ldr	r3, [pc, #256]	; (920 <_usb_host_interrupt_handler+0x308>)
     81e:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     820:	687b      	ldr	r3, [r7, #4]
     822:	011b      	lsls	r3, r3, #4
     824:	18d3      	adds	r3, r2, r3
     826:	3328      	adds	r3, #40	; 0x28
     828:	681a      	ldr	r2, [r3, #0]
     82a:	4b3d      	ldr	r3, [pc, #244]	; (920 <_usb_host_interrupt_handler+0x308>)
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	493f      	ldr	r1, [pc, #252]	; (92c <_usb_host_interrupt_handler+0x314>)
     830:	0018      	movs	r0, r3
     832:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
     834:	683b      	ldr	r3, [r7, #0]
     836:	2210      	movs	r2, #16
     838:	4013      	ands	r3, r2
     83a:	d03a      	beq.n	8b2 <_usb_host_interrupt_handler+0x29a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     83c:	2201      	movs	r2, #1
     83e:	687b      	ldr	r3, [r7, #4]
     840:	409a      	lsls	r2, r3
     842:	0013      	movs	r3, r2
     844:	43db      	mvns	r3, r3
     846:	001a      	movs	r2, r3
     848:	4b37      	ldr	r3, [pc, #220]	; (928 <_usb_host_interrupt_handler+0x310>)
     84a:	681b      	ldr	r3, [r3, #0]
     84c:	401a      	ands	r2, r3
     84e:	4b36      	ldr	r3, [pc, #216]	; (928 <_usb_host_interrupt_handler+0x310>)
     850:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     852:	4b33      	ldr	r3, [pc, #204]	; (920 <_usb_host_interrupt_handler+0x308>)
     854:	681b      	ldr	r3, [r3, #0]
     856:	681a      	ldr	r2, [r3, #0]
     858:	687b      	ldr	r3, [r7, #4]
     85a:	3308      	adds	r3, #8
     85c:	015b      	lsls	r3, r3, #5
     85e:	18d3      	adds	r3, r2, r3
     860:	3307      	adds	r3, #7
     862:	2210      	movs	r2, #16
     864:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     866:	4b2e      	ldr	r3, [pc, #184]	; (920 <_usb_host_interrupt_handler+0x308>)
     868:	681a      	ldr	r2, [r3, #0]
     86a:	21ae      	movs	r1, #174	; 0xae
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	18d3      	adds	r3, r2, r3
     870:	185b      	adds	r3, r3, r1
     872:	781b      	ldrb	r3, [r3, #0]
     874:	001a      	movs	r2, r3
     876:	2304      	movs	r3, #4
     878:	4013      	ands	r3, r2
     87a:	d01a      	beq.n	8b2 <_usb_host_interrupt_handler+0x29a>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	b2da      	uxtb	r2, r3
     880:	4b2a      	ldr	r3, [pc, #168]	; (92c <_usb_host_interrupt_handler+0x314>)
     882:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     884:	4a2a      	ldr	r2, [pc, #168]	; (930 <_usb_host_interrupt_handler+0x318>)
     886:	687b      	ldr	r3, [r7, #4]
     888:	015b      	lsls	r3, r3, #5
     88a:	18d3      	adds	r3, r2, r3
     88c:	685b      	ldr	r3, [r3, #4]
     88e:	011b      	lsls	r3, r3, #4
     890:	0c9b      	lsrs	r3, r3, #18
     892:	b29b      	uxth	r3, r3
     894:	001a      	movs	r2, r3
     896:	4b25      	ldr	r3, [pc, #148]	; (92c <_usb_host_interrupt_handler+0x314>)
     898:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
     89a:	4b21      	ldr	r3, [pc, #132]	; (920 <_usb_host_interrupt_handler+0x308>)
     89c:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
     89e:	687b      	ldr	r3, [r7, #4]
     8a0:	011b      	lsls	r3, r3, #4
     8a2:	18d3      	adds	r3, r2, r3
     8a4:	332c      	adds	r3, #44	; 0x2c
     8a6:	681a      	ldr	r2, [r3, #0]
     8a8:	4b1d      	ldr	r3, [pc, #116]	; (920 <_usb_host_interrupt_handler+0x308>)
     8aa:	681b      	ldr	r3, [r3, #0]
     8ac:	2100      	movs	r1, #0
     8ae:	0018      	movs	r0, r3
     8b0:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
     8b2:	683b      	ldr	r3, [r7, #0]
     8b4:	2220      	movs	r2, #32
     8b6:	4013      	ands	r3, r2
     8b8:	d100      	bne.n	8bc <_usb_host_interrupt_handler+0x2a4>
     8ba:	e112      	b.n	ae2 <_usb_host_interrupt_handler+0x4ca>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     8bc:	2201      	movs	r2, #1
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	409a      	lsls	r2, r3
     8c2:	0013      	movs	r3, r2
     8c4:	43db      	mvns	r3, r3
     8c6:	001a      	movs	r2, r3
     8c8:	4b17      	ldr	r3, [pc, #92]	; (928 <_usb_host_interrupt_handler+0x310>)
     8ca:	681b      	ldr	r3, [r3, #0]
     8cc:	401a      	ands	r2, r3
     8ce:	4b16      	ldr	r3, [pc, #88]	; (928 <_usb_host_interrupt_handler+0x310>)
     8d0:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     8d2:	4b13      	ldr	r3, [pc, #76]	; (920 <_usb_host_interrupt_handler+0x308>)
     8d4:	681b      	ldr	r3, [r3, #0]
     8d6:	681a      	ldr	r2, [r3, #0]
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	3308      	adds	r3, #8
     8dc:	015b      	lsls	r3, r3, #5
     8de:	18d3      	adds	r3, r2, r3
     8e0:	3307      	adds	r3, #7
     8e2:	2220      	movs	r2, #32
     8e4:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     8e6:	4b0e      	ldr	r3, [pc, #56]	; (920 <_usb_host_interrupt_handler+0x308>)
     8e8:	681a      	ldr	r2, [r3, #0]
     8ea:	21ae      	movs	r1, #174	; 0xae
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	18d3      	adds	r3, r2, r3
     8f0:	185b      	adds	r3, r3, r1
     8f2:	781b      	ldrb	r3, [r3, #0]
     8f4:	001a      	movs	r2, r3
     8f6:	2308      	movs	r3, #8
     8f8:	4013      	ands	r3, r2
     8fa:	d100      	bne.n	8fe <_usb_host_interrupt_handler+0x2e6>
     8fc:	e0f1      	b.n	ae2 <_usb_host_interrupt_handler+0x4ca>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
     8fe:	687b      	ldr	r3, [r7, #4]
     900:	b2da      	uxtb	r2, r3
     902:	4b0a      	ldr	r3, [pc, #40]	; (92c <_usb_host_interrupt_handler+0x314>)
     904:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
     906:	4b06      	ldr	r3, [pc, #24]	; (920 <_usb_host_interrupt_handler+0x308>)
     908:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	011b      	lsls	r3, r3, #4
     90e:	18d3      	adds	r3, r2, r3
     910:	3330      	adds	r3, #48	; 0x30
     912:	681a      	ldr	r2, [r3, #0]
     914:	4b02      	ldr	r3, [pc, #8]	; (920 <_usb_host_interrupt_handler+0x308>)
     916:	681b      	ldr	r3, [r3, #0]
     918:	4904      	ldr	r1, [pc, #16]	; (92c <_usb_host_interrupt_handler+0x314>)
     91a:	0018      	movs	r0, r3
     91c:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
     91e:	e0e0      	b.n	ae2 <_usb_host_interrupt_handler+0x4ca>
     920:	20000cbc 	.word	0x20000cbc
     924:	00020fd5 	.word	0x00020fd5
     928:	20000cd4 	.word	0x20000cd4
     92c:	20000cc0 	.word	0x20000cc0
     930:	200010cc 	.word	0x200010cc
     934:	f0003fff 	.word	0xf0003fff
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
     938:	4b6c      	ldr	r3, [pc, #432]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	681b      	ldr	r3, [r3, #0]
     93e:	8b9b      	ldrh	r3, [r3, #28]
     940:	b29b      	uxth	r3, r3
     942:	603b      	str	r3, [r7, #0]
		if (flags & USB_HOST_INTFLAG_HSOF) {
     944:	683b      	ldr	r3, [r7, #0]
     946:	2204      	movs	r2, #4
     948:	4013      	ands	r3, r2
     94a:	d013      	beq.n	974 <_usb_host_interrupt_handler+0x35c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
     94c:	4b67      	ldr	r3, [pc, #412]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     94e:	681b      	ldr	r3, [r3, #0]
     950:	681b      	ldr	r3, [r3, #0]
     952:	2204      	movs	r2, #4
     954:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
     956:	4b65      	ldr	r3, [pc, #404]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     958:	681b      	ldr	r3, [r3, #0]
     95a:	22a5      	movs	r2, #165	; 0xa5
     95c:	5c9b      	ldrb	r3, [r3, r2]
     95e:	001a      	movs	r2, r3
     960:	2301      	movs	r3, #1
     962:	4013      	ands	r3, r2
     964:	d006      	beq.n	974 <_usb_host_interrupt_handler+0x35c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
     966:	4b61      	ldr	r3, [pc, #388]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     968:	681b      	ldr	r3, [r3, #0]
     96a:	685a      	ldr	r2, [r3, #4]
     96c:	4b5f      	ldr	r3, [pc, #380]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     96e:	681b      	ldr	r3, [r3, #0]
     970:	0018      	movs	r0, r3
     972:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RST) {
     974:	683b      	ldr	r3, [r7, #0]
     976:	2208      	movs	r2, #8
     978:	4013      	ands	r3, r2
     97a:	d016      	beq.n	9aa <_usb_host_interrupt_handler+0x392>
			host_pipe_job_busy_status = 0;
     97c:	4b5c      	ldr	r3, [pc, #368]	; (af0 <_usb_host_interrupt_handler+0x4d8>)
     97e:	2200      	movs	r2, #0
     980:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
     982:	4b5a      	ldr	r3, [pc, #360]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     984:	681b      	ldr	r3, [r3, #0]
     986:	681b      	ldr	r3, [r3, #0]
     988:	2208      	movs	r2, #8
     98a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
     98c:	4b57      	ldr	r3, [pc, #348]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     98e:	681b      	ldr	r3, [r3, #0]
     990:	22a5      	movs	r2, #165	; 0xa5
     992:	5c9b      	ldrb	r3, [r3, r2]
     994:	001a      	movs	r2, r3
     996:	2302      	movs	r3, #2
     998:	4013      	ands	r3, r2
     99a:	d006      	beq.n	9aa <_usb_host_interrupt_handler+0x392>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
     99c:	4b53      	ldr	r3, [pc, #332]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     99e:	681b      	ldr	r3, [r3, #0]
     9a0:	689a      	ldr	r2, [r3, #8]
     9a2:	4b52      	ldr	r3, [pc, #328]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     9a4:	681b      	ldr	r3, [r3, #0]
     9a6:	0018      	movs	r0, r3
     9a8:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_UPRSM) {
     9aa:	683b      	ldr	r3, [r7, #0]
     9ac:	2240      	movs	r2, #64	; 0x40
     9ae:	4013      	ands	r3, r2
     9b0:	d013      	beq.n	9da <_usb_host_interrupt_handler+0x3c2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
     9b2:	4b4e      	ldr	r3, [pc, #312]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     9b4:	681b      	ldr	r3, [r3, #0]
     9b6:	681b      	ldr	r3, [r3, #0]
     9b8:	2240      	movs	r2, #64	; 0x40
     9ba:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
     9bc:	4b4b      	ldr	r3, [pc, #300]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     9be:	681b      	ldr	r3, [r3, #0]
     9c0:	22a5      	movs	r2, #165	; 0xa5
     9c2:	5c9b      	ldrb	r3, [r3, r2]
     9c4:	001a      	movs	r2, r3
     9c6:	2310      	movs	r3, #16
     9c8:	4013      	ands	r3, r2
     9ca:	d006      	beq.n	9da <_usb_host_interrupt_handler+0x3c2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
     9cc:	4b47      	ldr	r3, [pc, #284]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	695a      	ldr	r2, [r3, #20]
     9d2:	4b46      	ldr	r3, [pc, #280]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     9d4:	681b      	ldr	r3, [r3, #0]
     9d6:	0018      	movs	r0, r3
     9d8:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DNRSM) {
     9da:	683b      	ldr	r3, [r7, #0]
     9dc:	2220      	movs	r2, #32
     9de:	4013      	ands	r3, r2
     9e0:	d013      	beq.n	a0a <_usb_host_interrupt_handler+0x3f2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
     9e2:	4b42      	ldr	r3, [pc, #264]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     9e4:	681b      	ldr	r3, [r3, #0]
     9e6:	681b      	ldr	r3, [r3, #0]
     9e8:	2220      	movs	r2, #32
     9ea:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
     9ec:	4b3f      	ldr	r3, [pc, #252]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	22a5      	movs	r2, #165	; 0xa5
     9f2:	5c9b      	ldrb	r3, [r3, r2]
     9f4:	001a      	movs	r2, r3
     9f6:	2308      	movs	r3, #8
     9f8:	4013      	ands	r3, r2
     9fa:	d006      	beq.n	a0a <_usb_host_interrupt_handler+0x3f2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
     9fc:	4b3b      	ldr	r3, [pc, #236]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     9fe:	681b      	ldr	r3, [r3, #0]
     a00:	691a      	ldr	r2, [r3, #16]
     a02:	4b3a      	ldr	r3, [pc, #232]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a04:	681b      	ldr	r3, [r3, #0]
     a06:	0018      	movs	r0, r3
     a08:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
     a0a:	683b      	ldr	r3, [r7, #0]
     a0c:	2210      	movs	r2, #16
     a0e:	4013      	ands	r3, r2
     a10:	d013      	beq.n	a3a <_usb_host_interrupt_handler+0x422>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
     a12:	4b36      	ldr	r3, [pc, #216]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a14:	681b      	ldr	r3, [r3, #0]
     a16:	681b      	ldr	r3, [r3, #0]
     a18:	2210      	movs	r2, #16
     a1a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
     a1c:	4b33      	ldr	r3, [pc, #204]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a1e:	681b      	ldr	r3, [r3, #0]
     a20:	22a5      	movs	r2, #165	; 0xa5
     a22:	5c9b      	ldrb	r3, [r3, r2]
     a24:	001a      	movs	r2, r3
     a26:	2304      	movs	r3, #4
     a28:	4013      	ands	r3, r2
     a2a:	d006      	beq.n	a3a <_usb_host_interrupt_handler+0x422>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
     a2c:	4b2f      	ldr	r3, [pc, #188]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a2e:	681b      	ldr	r3, [r3, #0]
     a30:	68da      	ldr	r2, [r3, #12]
     a32:	4b2e      	ldr	r3, [pc, #184]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	0018      	movs	r0, r3
     a38:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RAMACER) {
     a3a:	683b      	ldr	r3, [r7, #0]
     a3c:	2280      	movs	r2, #128	; 0x80
     a3e:	4013      	ands	r3, r2
     a40:	d016      	beq.n	a70 <_usb_host_interrupt_handler+0x458>
			host_pipe_job_busy_status = 0;
     a42:	4b2b      	ldr	r3, [pc, #172]	; (af0 <_usb_host_interrupt_handler+0x4d8>)
     a44:	2200      	movs	r2, #0
     a46:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
     a48:	4b28      	ldr	r3, [pc, #160]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a4a:	681b      	ldr	r3, [r3, #0]
     a4c:	681b      	ldr	r3, [r3, #0]
     a4e:	2280      	movs	r2, #128	; 0x80
     a50:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
     a52:	4b26      	ldr	r3, [pc, #152]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a54:	681b      	ldr	r3, [r3, #0]
     a56:	22a5      	movs	r2, #165	; 0xa5
     a58:	5c9b      	ldrb	r3, [r3, r2]
     a5a:	001a      	movs	r2, r3
     a5c:	2320      	movs	r3, #32
     a5e:	4013      	ands	r3, r2
     a60:	d006      	beq.n	a70 <_usb_host_interrupt_handler+0x458>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
     a62:	4b22      	ldr	r3, [pc, #136]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a64:	681b      	ldr	r3, [r3, #0]
     a66:	699a      	ldr	r2, [r3, #24]
     a68:	4b20      	ldr	r3, [pc, #128]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a6a:	681b      	ldr	r3, [r3, #0]
     a6c:	0018      	movs	r0, r3
     a6e:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DCONN) {
     a70:	683a      	ldr	r2, [r7, #0]
     a72:	2380      	movs	r3, #128	; 0x80
     a74:	005b      	lsls	r3, r3, #1
     a76:	4013      	ands	r3, r2
     a78:	d017      	beq.n	aaa <_usb_host_interrupt_handler+0x492>
			host_pipe_job_busy_status = 0;
     a7a:	4b1d      	ldr	r3, [pc, #116]	; (af0 <_usb_host_interrupt_handler+0x4d8>)
     a7c:	2200      	movs	r2, #0
     a7e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
     a80:	4b1a      	ldr	r3, [pc, #104]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a82:	681b      	ldr	r3, [r3, #0]
     a84:	681b      	ldr	r3, [r3, #0]
     a86:	2280      	movs	r2, #128	; 0x80
     a88:	0052      	lsls	r2, r2, #1
     a8a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
     a8c:	4b17      	ldr	r3, [pc, #92]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a8e:	681b      	ldr	r3, [r3, #0]
     a90:	22a5      	movs	r2, #165	; 0xa5
     a92:	5c9b      	ldrb	r3, [r3, r2]
     a94:	001a      	movs	r2, r3
     a96:	2340      	movs	r3, #64	; 0x40
     a98:	4013      	ands	r3, r2
     a9a:	d006      	beq.n	aaa <_usb_host_interrupt_handler+0x492>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
     a9c:	4b13      	ldr	r3, [pc, #76]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     a9e:	681b      	ldr	r3, [r3, #0]
     aa0:	69da      	ldr	r2, [r3, #28]
     aa2:	4b12      	ldr	r3, [pc, #72]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	0018      	movs	r0, r3
     aa8:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DDISC) {
     aaa:	683a      	ldr	r2, [r7, #0]
     aac:	2380      	movs	r3, #128	; 0x80
     aae:	009b      	lsls	r3, r3, #2
     ab0:	4013      	ands	r3, r2
     ab2:	d016      	beq.n	ae2 <_usb_host_interrupt_handler+0x4ca>
			host_pipe_job_busy_status = 0;
     ab4:	4b0e      	ldr	r3, [pc, #56]	; (af0 <_usb_host_interrupt_handler+0x4d8>)
     ab6:	2200      	movs	r2, #0
     ab8:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
     aba:	4b0c      	ldr	r3, [pc, #48]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	2280      	movs	r2, #128	; 0x80
     ac2:	0092      	lsls	r2, r2, #2
     ac4:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
     ac6:	4b09      	ldr	r3, [pc, #36]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     ac8:	681b      	ldr	r3, [r3, #0]
     aca:	22a5      	movs	r2, #165	; 0xa5
     acc:	5c9b      	ldrb	r3, [r3, r2]
     ace:	b25b      	sxtb	r3, r3
     ad0:	2b00      	cmp	r3, #0
     ad2:	da06      	bge.n	ae2 <_usb_host_interrupt_handler+0x4ca>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
     ad4:	4b05      	ldr	r3, [pc, #20]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     ad6:	681b      	ldr	r3, [r3, #0]
     ad8:	6a1a      	ldr	r2, [r3, #32]
     ada:	4b04      	ldr	r3, [pc, #16]	; (aec <_usb_host_interrupt_handler+0x4d4>)
     adc:	681b      	ldr	r3, [r3, #0]
     ade:	0018      	movs	r0, r3
     ae0:	4790      	blx	r2
}
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	46bd      	mov	sp, r7
     ae6:	b002      	add	sp, #8
     ae8:	bd80      	pop	{r7, pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	20000cbc 	.word	0x20000cbc
     af0:	20000cd4 	.word	0x20000cd4

00000af4 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
     af4:	b580      	push	{r7, lr}
     af6:	b084      	sub	sp, #16
     af8:	af00      	add	r7, sp, #0
     afa:	6078      	str	r0, [r7, #4]
     afc:	000a      	movs	r2, r1
     afe:	1cfb      	adds	r3, r7, #3
     b00:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
     b02:	230f      	movs	r3, #15
     b04:	18fb      	adds	r3, r7, r3
     b06:	1cfa      	adds	r2, r7, #3
     b08:	7812      	ldrb	r2, [r2, #0]
     b0a:	210f      	movs	r1, #15
     b0c:	400a      	ands	r2, r1
     b0e:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
     b10:	1cfb      	adds	r3, r7, #3
     b12:	781b      	ldrb	r3, [r3, #0]
     b14:	b25b      	sxtb	r3, r3
     b16:	2b00      	cmp	r3, #0
     b18:	da11      	bge.n	b3e <usb_device_endpoint_is_halted+0x4a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	681a      	ldr	r2, [r3, #0]
     b1e:	230f      	movs	r3, #15
     b20:	18fb      	adds	r3, r7, r3
     b22:	781b      	ldrb	r3, [r3, #0]
     b24:	3308      	adds	r3, #8
     b26:	015b      	lsls	r3, r3, #5
     b28:	18d3      	adds	r3, r2, r3
     b2a:	3306      	adds	r3, #6
     b2c:	781b      	ldrb	r3, [r3, #0]
     b2e:	b2db      	uxtb	r3, r3
     b30:	001a      	movs	r2, r3
     b32:	2320      	movs	r3, #32
     b34:	4013      	ands	r3, r2
     b36:	1e5a      	subs	r2, r3, #1
     b38:	4193      	sbcs	r3, r2
     b3a:	b2db      	uxtb	r3, r3
     b3c:	e010      	b.n	b60 <usb_device_endpoint_is_halted+0x6c>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	681a      	ldr	r2, [r3, #0]
     b42:	230f      	movs	r3, #15
     b44:	18fb      	adds	r3, r7, r3
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	3308      	adds	r3, #8
     b4a:	015b      	lsls	r3, r3, #5
     b4c:	18d3      	adds	r3, r2, r3
     b4e:	3306      	adds	r3, #6
     b50:	781b      	ldrb	r3, [r3, #0]
     b52:	b2db      	uxtb	r3, r3
     b54:	001a      	movs	r2, r3
     b56:	2310      	movs	r3, #16
     b58:	4013      	ands	r3, r2
     b5a:	1e5a      	subs	r2, r3, #1
     b5c:	4193      	sbcs	r3, r2
     b5e:	b2db      	uxtb	r3, r3
	}
}
     b60:	0018      	movs	r0, r3
     b62:	46bd      	mov	sp, r7
     b64:	b004      	add	sp, #16
     b66:	bd80      	pop	{r7, pc}

00000b68 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
     b68:	b580      	push	{r7, lr}
     b6a:	b086      	sub	sp, #24
     b6c:	af00      	add	r7, sp, #0
     b6e:	60f8      	str	r0, [r7, #12]
     b70:	607a      	str	r2, [r7, #4]
     b72:	603b      	str	r3, [r7, #0]
     b74:	230b      	movs	r3, #11
     b76:	18fb      	adds	r3, r7, r3
     b78:	1c0a      	adds	r2, r1, #0
     b7a:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
     b7c:	68fb      	ldr	r3, [r7, #12]
     b7e:	681b      	ldr	r3, [r3, #0]
     b80:	220b      	movs	r2, #11
     b82:	18ba      	adds	r2, r7, r2
     b84:	7812      	ldrb	r2, [r2, #0]
     b86:	3208      	adds	r2, #8
     b88:	0152      	lsls	r2, r2, #5
     b8a:	5cd3      	ldrb	r3, [r2, r3]
     b8c:	065b      	lsls	r3, r3, #25
     b8e:	0f5b      	lsrs	r3, r3, #29
     b90:	b2da      	uxtb	r2, r3
     b92:	2317      	movs	r3, #23
     b94:	18fb      	adds	r3, r7, r3
     b96:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
     b98:	2317      	movs	r3, #23
     b9a:	18fb      	adds	r3, r7, r3
     b9c:	781b      	ldrb	r3, [r3, #0]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d101      	bne.n	ba6 <usb_device_endpoint_write_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
     ba2:	231c      	movs	r3, #28
     ba4:	e032      	b.n	c0c <usb_device_endpoint_write_buffer_job+0xa4>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
     ba6:	230b      	movs	r3, #11
     ba8:	18fb      	adds	r3, r7, r3
     baa:	781b      	ldrb	r3, [r3, #0]
     bac:	687a      	ldr	r2, [r7, #4]
     bae:	4919      	ldr	r1, [pc, #100]	; (c14 <usb_device_endpoint_write_buffer_job+0xac>)
     bb0:	015b      	lsls	r3, r3, #5
     bb2:	18cb      	adds	r3, r1, r3
     bb4:	3310      	adds	r3, #16
     bb6:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     bb8:	230b      	movs	r3, #11
     bba:	18fb      	adds	r3, r7, r3
     bbc:	781b      	ldrb	r3, [r3, #0]
     bbe:	4a15      	ldr	r2, [pc, #84]	; (c14 <usb_device_endpoint_write_buffer_job+0xac>)
     bc0:	015b      	lsls	r3, r3, #5
     bc2:	18d3      	adds	r3, r2, r3
     bc4:	3310      	adds	r3, #16
     bc6:	685a      	ldr	r2, [r3, #4]
     bc8:	4913      	ldr	r1, [pc, #76]	; (c18 <usb_device_endpoint_write_buffer_job+0xb0>)
     bca:	400a      	ands	r2, r1
     bcc:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
     bce:	230b      	movs	r3, #11
     bd0:	18fb      	adds	r3, r7, r3
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	683a      	ldr	r2, [r7, #0]
     bd6:	b292      	uxth	r2, r2
     bd8:	0492      	lsls	r2, r2, #18
     bda:	0c92      	lsrs	r2, r2, #18
     bdc:	b291      	uxth	r1, r2
     bde:	4a0d      	ldr	r2, [pc, #52]	; (c14 <usb_device_endpoint_write_buffer_job+0xac>)
     be0:	015b      	lsls	r3, r3, #5
     be2:	18d3      	adds	r3, r2, r3
     be4:	3310      	adds	r3, #16
     be6:	685a      	ldr	r2, [r3, #4]
     be8:	0489      	lsls	r1, r1, #18
     bea:	0c89      	lsrs	r1, r1, #18
     bec:	0b92      	lsrs	r2, r2, #14
     bee:	0392      	lsls	r2, r2, #14
     bf0:	430a      	orrs	r2, r1
     bf2:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
     bf4:	68fb      	ldr	r3, [r7, #12]
     bf6:	681a      	ldr	r2, [r3, #0]
     bf8:	230b      	movs	r3, #11
     bfa:	18fb      	adds	r3, r7, r3
     bfc:	781b      	ldrb	r3, [r3, #0]
     bfe:	3308      	adds	r3, #8
     c00:	015b      	lsls	r3, r3, #5
     c02:	18d3      	adds	r3, r2, r3
     c04:	3305      	adds	r3, #5
     c06:	2280      	movs	r2, #128	; 0x80
     c08:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
     c0a:	2300      	movs	r3, #0
}
     c0c:	0018      	movs	r0, r3
     c0e:	46bd      	mov	sp, r7
     c10:	b006      	add	sp, #24
     c12:	bd80      	pop	{r7, pc}
     c14:	200010cc 	.word	0x200010cc
     c18:	f0003fff 	.word	0xf0003fff

00000c1c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
     c1c:	b580      	push	{r7, lr}
     c1e:	b086      	sub	sp, #24
     c20:	af00      	add	r7, sp, #0
     c22:	60f8      	str	r0, [r7, #12]
     c24:	607a      	str	r2, [r7, #4]
     c26:	603b      	str	r3, [r7, #0]
     c28:	230b      	movs	r3, #11
     c2a:	18fb      	adds	r3, r7, r3
     c2c:	1c0a      	adds	r2, r1, #0
     c2e:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
     c30:	68fb      	ldr	r3, [r7, #12]
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	220b      	movs	r2, #11
     c36:	18ba      	adds	r2, r7, r2
     c38:	7812      	ldrb	r2, [r2, #0]
     c3a:	3208      	adds	r2, #8
     c3c:	0152      	lsls	r2, r2, #5
     c3e:	5cd3      	ldrb	r3, [r2, r3]
     c40:	075b      	lsls	r3, r3, #29
     c42:	0f5b      	lsrs	r3, r3, #29
     c44:	b2da      	uxtb	r2, r3
     c46:	2317      	movs	r3, #23
     c48:	18fb      	adds	r3, r7, r3
     c4a:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
     c4c:	2317      	movs	r3, #23
     c4e:	18fb      	adds	r3, r7, r3
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	2b00      	cmp	r3, #0
     c54:	d101      	bne.n	c5a <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
     c56:	231c      	movs	r3, #28
     c58:	e02f      	b.n	cba <usb_device_endpoint_read_buffer_job+0x9e>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
     c5a:	230b      	movs	r3, #11
     c5c:	18fb      	adds	r3, r7, r3
     c5e:	781a      	ldrb	r2, [r3, #0]
     c60:	6879      	ldr	r1, [r7, #4]
     c62:	4b18      	ldr	r3, [pc, #96]	; (cc4 <usb_device_endpoint_read_buffer_job+0xa8>)
     c64:	0152      	lsls	r2, r2, #5
     c66:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
     c68:	230b      	movs	r3, #11
     c6a:	18fb      	adds	r3, r7, r3
     c6c:	781b      	ldrb	r3, [r3, #0]
     c6e:	683a      	ldr	r2, [r7, #0]
     c70:	b292      	uxth	r2, r2
     c72:	0492      	lsls	r2, r2, #18
     c74:	0c92      	lsrs	r2, r2, #18
     c76:	b291      	uxth	r1, r2
     c78:	4a12      	ldr	r2, [pc, #72]	; (cc4 <usb_device_endpoint_read_buffer_job+0xa8>)
     c7a:	015b      	lsls	r3, r3, #5
     c7c:	18d3      	adds	r3, r2, r3
     c7e:	685a      	ldr	r2, [r3, #4]
     c80:	0489      	lsls	r1, r1, #18
     c82:	0c89      	lsrs	r1, r1, #18
     c84:	0389      	lsls	r1, r1, #14
     c86:	4810      	ldr	r0, [pc, #64]	; (cc8 <usb_device_endpoint_read_buffer_job+0xac>)
     c88:	4002      	ands	r2, r0
     c8a:	430a      	orrs	r2, r1
     c8c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
     c8e:	230b      	movs	r3, #11
     c90:	18fb      	adds	r3, r7, r3
     c92:	781b      	ldrb	r3, [r3, #0]
     c94:	4a0b      	ldr	r2, [pc, #44]	; (cc4 <usb_device_endpoint_read_buffer_job+0xa8>)
     c96:	015b      	lsls	r3, r3, #5
     c98:	18d3      	adds	r3, r2, r3
     c9a:	685a      	ldr	r2, [r3, #4]
     c9c:	0b92      	lsrs	r2, r2, #14
     c9e:	0392      	lsls	r2, r2, #14
     ca0:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	681a      	ldr	r2, [r3, #0]
     ca6:	230b      	movs	r3, #11
     ca8:	18fb      	adds	r3, r7, r3
     caa:	781b      	ldrb	r3, [r3, #0]
     cac:	3308      	adds	r3, #8
     cae:	015b      	lsls	r3, r3, #5
     cb0:	18d3      	adds	r3, r2, r3
     cb2:	3304      	adds	r3, #4
     cb4:	2240      	movs	r2, #64	; 0x40
     cb6:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
     cb8:	2300      	movs	r3, #0
}
     cba:	0018      	movs	r0, r3
     cbc:	46bd      	mov	sp, r7
     cbe:	b006      	add	sp, #24
     cc0:	bd80      	pop	{r7, pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	200010cc 	.word	0x200010cc
     cc8:	f0003fff 	.word	0xf0003fff

00000ccc <_usb_device_interrupt_handler>:

	return STATUS_OK;
}

static void _usb_device_interrupt_handler(void)
{
     ccc:	b580      	push	{r7, lr}
     cce:	b084      	sub	sp, #16
     cd0:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
     cd2:	4bbd      	ldr	r3, [pc, #756]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     cd4:	681b      	ldr	r3, [r3, #0]
     cd6:	681a      	ldr	r2, [r3, #0]
     cd8:	2308      	movs	r3, #8
     cda:	18fb      	adds	r3, r7, r3
     cdc:	8c12      	ldrh	r2, [r2, #32]
     cde:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
     ce0:	2308      	movs	r3, #8
     ce2:	18fb      	adds	r3, r7, r3
     ce4:	881b      	ldrh	r3, [r3, #0]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d155      	bne.n	d96 <_usb_device_interrupt_handler+0xca>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
     cea:	4bb7      	ldr	r3, [pc, #732]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	681a      	ldr	r2, [r3, #0]
     cf0:	1dbb      	adds	r3, r7, #6
     cf2:	8b92      	ldrh	r2, [r2, #28]
     cf4:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
     cf6:	4bb4      	ldr	r3, [pc, #720]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     cf8:	681a      	ldr	r2, [r3, #0]
     cfa:	23ab      	movs	r3, #171	; 0xab
     cfc:	005b      	lsls	r3, r3, #1
     cfe:	5ad3      	ldrh	r3, [r2, r3]
		flags_run = flags &
     d00:	1dba      	adds	r2, r7, #6
     d02:	8812      	ldrh	r2, [r2, #0]
     d04:	4013      	ands	r3, r2
     d06:	b29a      	uxth	r2, r3
				_usb_instances->device_registered_callback_mask;
     d08:	4baf      	ldr	r3, [pc, #700]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     d0a:	6819      	ldr	r1, [r3, #0]
     d0c:	23aa      	movs	r3, #170	; 0xaa
     d0e:	005b      	lsls	r3, r3, #1
     d10:	5ac9      	ldrh	r1, [r1, r3]
		flags_run = flags &
     d12:	1d3b      	adds	r3, r7, #4
     d14:	400a      	ands	r2, r1
     d16:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     d18:	2300      	movs	r3, #0
     d1a:	60fb      	str	r3, [r7, #12]
     d1c:	e037      	b.n	d8e <_usb_device_interrupt_handler+0xc2>
			if (flags & _usb_device_irq_bits[i]) {
     d1e:	4bab      	ldr	r3, [pc, #684]	; (fcc <_usb_device_interrupt_handler+0x300>)
     d20:	68fa      	ldr	r2, [r7, #12]
     d22:	0052      	lsls	r2, r2, #1
     d24:	5ad3      	ldrh	r3, [r2, r3]
     d26:	1dba      	adds	r2, r7, #6
     d28:	8812      	ldrh	r2, [r2, #0]
     d2a:	4013      	ands	r3, r2
     d2c:	b29b      	uxth	r3, r3
     d2e:	2b00      	cmp	r3, #0
     d30:	d007      	beq.n	d42 <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     d32:	4ba5      	ldr	r3, [pc, #660]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     d34:	681b      	ldr	r3, [r3, #0]
     d36:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
     d38:	4aa4      	ldr	r2, [pc, #656]	; (fcc <_usb_device_interrupt_handler+0x300>)
     d3a:	68f9      	ldr	r1, [r7, #12]
     d3c:	0049      	lsls	r1, r1, #1
     d3e:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     d40:	839a      	strh	r2, [r3, #28]
			}
			if (flags_run & _usb_device_irq_bits[i]) {
     d42:	4ba2      	ldr	r3, [pc, #648]	; (fcc <_usb_device_interrupt_handler+0x300>)
     d44:	68fa      	ldr	r2, [r7, #12]
     d46:	0052      	lsls	r2, r2, #1
     d48:	5ad3      	ldrh	r3, [r2, r3]
     d4a:	1d3a      	adds	r2, r7, #4
     d4c:	8812      	ldrh	r2, [r2, #0]
     d4e:	4013      	ands	r3, r2
     d50:	b29b      	uxth	r3, r3
     d52:	2b00      	cmp	r3, #0
     d54:	d018      	beq.n	d88 <_usb_device_interrupt_handler+0xbc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	2b06      	cmp	r3, #6
     d5a:	d10a      	bne.n	d72 <_usb_device_interrupt_handler+0xa6>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
     d5c:	4b9c      	ldr	r3, [pc, #624]	; (fd0 <_usb_device_interrupt_handler+0x304>)
     d5e:	891b      	ldrh	r3, [r3, #8]
     d60:	045b      	lsls	r3, r3, #17
     d62:	0d5b      	lsrs	r3, r3, #21
     d64:	b29b      	uxth	r3, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
     d66:	001a      	movs	r2, r3
     d68:	2380      	movs	r3, #128	; 0x80
     d6a:	005b      	lsls	r3, r3, #1
     d6c:	401a      	ands	r2, r3
					device_callback_lpm_wakeup_enable =
     d6e:	4b99      	ldr	r3, [pc, #612]	; (fd4 <_usb_device_interrupt_handler+0x308>)
     d70:	601a      	str	r2, [r3, #0]
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     d72:	4b95      	ldr	r3, [pc, #596]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     d74:	681b      	ldr	r3, [r3, #0]
     d76:	68fa      	ldr	r2, [r7, #12]
     d78:	322e      	adds	r2, #46	; 0x2e
     d7a:	0092      	lsls	r2, r2, #2
     d7c:	58d2      	ldr	r2, [r2, r3]
     d7e:	4b92      	ldr	r3, [pc, #584]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     d80:	681b      	ldr	r3, [r3, #0]
     d82:	4994      	ldr	r1, [pc, #592]	; (fd4 <_usb_device_interrupt_handler+0x308>)
     d84:	0018      	movs	r0, r3
     d86:	4790      	blx	r2
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     d88:	68fb      	ldr	r3, [r7, #12]
     d8a:	3301      	adds	r3, #1
     d8c:	60fb      	str	r3, [r7, #12]
     d8e:	68fb      	ldr	r3, [r7, #12]
     d90:	2b06      	cmp	r3, #6
     d92:	ddc4      	ble.n	d1e <_usb_device_interrupt_handler+0x52>
     d94:	e250      	b.n	1238 <_usb_device_interrupt_handler+0x56c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
     d96:	230b      	movs	r3, #11
     d98:	18fb      	adds	r3, r7, r3
     d9a:	2200      	movs	r2, #0
     d9c:	701a      	strb	r2, [r3, #0]
     d9e:	e23b      	b.n	1218 <_usb_device_interrupt_handler+0x54c>

			if (ep_inst & (1 << i)) {
     da0:	2308      	movs	r3, #8
     da2:	18fb      	adds	r3, r7, r3
     da4:	881a      	ldrh	r2, [r3, #0]
     da6:	230b      	movs	r3, #11
     da8:	18fb      	adds	r3, r7, r3
     daa:	781b      	ldrb	r3, [r3, #0]
     dac:	411a      	asrs	r2, r3
     dae:	0013      	movs	r3, r2
     db0:	2201      	movs	r2, #1
     db2:	4013      	ands	r3, r2
     db4:	d100      	bne.n	db8 <_usb_device_interrupt_handler+0xec>
     db6:	e228      	b.n	120a <_usb_device_interrupt_handler+0x53e>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
     db8:	4b83      	ldr	r3, [pc, #524]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	681a      	ldr	r2, [r3, #0]
     dbe:	230b      	movs	r3, #11
     dc0:	18fb      	adds	r3, r7, r3
     dc2:	781b      	ldrb	r3, [r3, #0]
     dc4:	3308      	adds	r3, #8
     dc6:	015b      	lsls	r3, r3, #5
     dc8:	18d3      	adds	r3, r2, r3
     dca:	3307      	adds	r3, #7
     dcc:	781b      	ldrb	r3, [r3, #0]
     dce:	b2da      	uxtb	r2, r3
     dd0:	1dbb      	adds	r3, r7, #6
     dd2:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
     dd4:	4b7c      	ldr	r3, [pc, #496]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     dd6:	6819      	ldr	r1, [r3, #0]
     dd8:	230b      	movs	r3, #11
     dda:	18fb      	adds	r3, r7, r3
     ddc:	781a      	ldrb	r2, [r3, #0]
     dde:	23b0      	movs	r3, #176	; 0xb0
     de0:	005b      	lsls	r3, r3, #1
     de2:	188a      	adds	r2, r1, r2
     de4:	18d3      	adds	r3, r2, r3
     de6:	781b      	ldrb	r3, [r3, #0]
     de8:	b29b      	uxth	r3, r3
				flags_run = flags &
     dea:	1dba      	adds	r2, r7, #6
     dec:	8812      	ldrh	r2, [r2, #0]
     dee:	4013      	ands	r3, r2
     df0:	b29b      	uxth	r3, r3
     df2:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_registered_callback_mask[i];
     df4:	4b74      	ldr	r3, [pc, #464]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     df6:	6818      	ldr	r0, [r3, #0]
     df8:	230b      	movs	r3, #11
     dfa:	18fb      	adds	r3, r7, r3
     dfc:	7819      	ldrb	r1, [r3, #0]
     dfe:	23ac      	movs	r3, #172	; 0xac
     e00:	005b      	lsls	r3, r3, #1
     e02:	1841      	adds	r1, r0, r1
     e04:	18cb      	adds	r3, r1, r3
     e06:	781b      	ldrb	r3, [r3, #0]
     e08:	b21b      	sxth	r3, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
     e0a:	4013      	ands	r3, r2
     e0c:	b21a      	sxth	r2, r3
				flags_run = flags &
     e0e:	1d3b      	adds	r3, r7, #4
     e10:	801a      	strh	r2, [r3, #0]

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     e12:	1dbb      	adds	r3, r7, #6
     e14:	881b      	ldrh	r3, [r3, #0]
     e16:	2260      	movs	r2, #96	; 0x60
     e18:	4013      	ands	r3, r2
     e1a:	d05c      	beq.n	ed6 <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
     e1c:	4b6a      	ldr	r3, [pc, #424]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     e1e:	681b      	ldr	r3, [r3, #0]
     e20:	681a      	ldr	r2, [r3, #0]
     e22:	230b      	movs	r3, #11
     e24:	18fb      	adds	r3, r7, r3
     e26:	781b      	ldrb	r3, [r3, #0]
     e28:	3308      	adds	r3, #8
     e2a:	015b      	lsls	r3, r3, #5
     e2c:	18d3      	adds	r3, r2, r3
     e2e:	3307      	adds	r3, #7
     e30:	781b      	ldrb	r3, [r3, #0]
     e32:	b2db      	uxtb	r3, r3
     e34:	001a      	movs	r2, r3
     e36:	2340      	movs	r3, #64	; 0x40
     e38:	4013      	ands	r3, r2
     e3a:	d015      	beq.n	e68 <_usb_device_interrupt_handler+0x19c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
     e3c:	4b62      	ldr	r3, [pc, #392]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	681a      	ldr	r2, [r3, #0]
     e42:	230b      	movs	r3, #11
     e44:	18fb      	adds	r3, r7, r3
     e46:	781b      	ldrb	r3, [r3, #0]
     e48:	3308      	adds	r3, #8
     e4a:	015b      	lsls	r3, r3, #5
     e4c:	18d3      	adds	r3, r2, r3
     e4e:	3307      	adds	r3, #7
     e50:	2240      	movs	r2, #64	; 0x40
     e52:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     e54:	230b      	movs	r3, #11
     e56:	18fb      	adds	r3, r7, r3
     e58:	781b      	ldrb	r3, [r3, #0]
     e5a:	2280      	movs	r2, #128	; 0x80
     e5c:	4252      	negs	r2, r2
     e5e:	4313      	orrs	r3, r2
     e60:	b2da      	uxtb	r2, r3
     e62:	4b5d      	ldr	r3, [pc, #372]	; (fd8 <_usb_device_interrupt_handler+0x30c>)
     e64:	719a      	strb	r2, [r3, #6]
     e66:	e020      	b.n	eaa <_usb_device_interrupt_handler+0x1de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
     e68:	4b57      	ldr	r3, [pc, #348]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	681a      	ldr	r2, [r3, #0]
     e6e:	230b      	movs	r3, #11
     e70:	18fb      	adds	r3, r7, r3
     e72:	781b      	ldrb	r3, [r3, #0]
     e74:	3308      	adds	r3, #8
     e76:	015b      	lsls	r3, r3, #5
     e78:	18d3      	adds	r3, r2, r3
     e7a:	3307      	adds	r3, #7
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	b2db      	uxtb	r3, r3
     e80:	001a      	movs	r2, r3
     e82:	2320      	movs	r3, #32
     e84:	4013      	ands	r3, r2
     e86:	d010      	beq.n	eaa <_usb_device_interrupt_handler+0x1de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
     e88:	4b4f      	ldr	r3, [pc, #316]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     e8a:	681b      	ldr	r3, [r3, #0]
     e8c:	681a      	ldr	r2, [r3, #0]
     e8e:	230b      	movs	r3, #11
     e90:	18fb      	adds	r3, r7, r3
     e92:	781b      	ldrb	r3, [r3, #0]
     e94:	3308      	adds	r3, #8
     e96:	015b      	lsls	r3, r3, #5
     e98:	18d3      	adds	r3, r2, r3
     e9a:	3307      	adds	r3, #7
     e9c:	2220      	movs	r2, #32
     e9e:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     ea0:	4b4d      	ldr	r3, [pc, #308]	; (fd8 <_usb_device_interrupt_handler+0x30c>)
     ea2:	220b      	movs	r2, #11
     ea4:	18ba      	adds	r2, r7, r2
     ea6:	7812      	ldrb	r2, [r2, #0]
     ea8:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     eaa:	1d3b      	adds	r3, r7, #4
     eac:	881b      	ldrh	r3, [r3, #0]
     eae:	2260      	movs	r2, #96	; 0x60
     eb0:	4013      	ands	r3, r2
     eb2:	d100      	bne.n	eb6 <_usb_device_interrupt_handler+0x1ea>
     eb4:	e1b7      	b.n	1226 <_usb_device_interrupt_handler+0x55a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
     eb6:	4b44      	ldr	r3, [pc, #272]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     eb8:	681a      	ldr	r2, [r3, #0]
     eba:	230b      	movs	r3, #11
     ebc:	18fb      	adds	r3, r7, r3
     ebe:	781b      	ldrb	r3, [r3, #0]
     ec0:	21e0      	movs	r1, #224	; 0xe0
     ec2:	011b      	lsls	r3, r3, #4
     ec4:	18d3      	adds	r3, r2, r3
     ec6:	185b      	adds	r3, r3, r1
     ec8:	681a      	ldr	r2, [r3, #0]
     eca:	4b3f      	ldr	r3, [pc, #252]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     ecc:	681b      	ldr	r3, [r3, #0]
     ece:	4942      	ldr	r1, [pc, #264]	; (fd8 <_usb_device_interrupt_handler+0x30c>)
     ed0:	0018      	movs	r0, r3
     ed2:	4790      	blx	r2
					}
					return;
     ed4:	e1a7      	b.n	1226 <_usb_device_interrupt_handler+0x55a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     ed6:	1dbb      	adds	r3, r7, #6
     ed8:	881b      	ldrh	r3, [r3, #0]
     eda:	2210      	movs	r2, #16
     edc:	4013      	ands	r3, r2
     ede:	d038      	beq.n	f52 <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
     ee0:	4b39      	ldr	r3, [pc, #228]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	681a      	ldr	r2, [r3, #0]
     ee6:	230b      	movs	r3, #11
     ee8:	18fb      	adds	r3, r7, r3
     eea:	781b      	ldrb	r3, [r3, #0]
     eec:	3308      	adds	r3, #8
     eee:	015b      	lsls	r3, r3, #5
     ef0:	18d3      	adds	r3, r2, r3
     ef2:	3307      	adds	r3, #7
     ef4:	2210      	movs	r2, #16
     ef6:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
     ef8:	4b33      	ldr	r3, [pc, #204]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     efa:	6819      	ldr	r1, [r3, #0]
     efc:	230b      	movs	r3, #11
     efe:	18fb      	adds	r3, r7, r3
     f00:	781a      	ldrb	r2, [r3, #0]
     f02:	23b0      	movs	r3, #176	; 0xb0
     f04:	005b      	lsls	r3, r3, #1
     f06:	188a      	adds	r2, r1, r2
     f08:	18d3      	adds	r3, r2, r3
     f0a:	781b      	ldrb	r3, [r3, #0]
     f0c:	2210      	movs	r2, #16
     f0e:	4013      	ands	r3, r2
     f10:	b2db      	uxtb	r3, r3
     f12:	2b00      	cmp	r3, #0
     f14:	d100      	bne.n	f18 <_usb_device_interrupt_handler+0x24c>
     f16:	e188      	b.n	122a <_usb_device_interrupt_handler+0x55e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     f18:	230b      	movs	r3, #11
     f1a:	18fb      	adds	r3, r7, r3
     f1c:	781b      	ldrb	r3, [r3, #0]
     f1e:	4a2c      	ldr	r2, [pc, #176]	; (fd0 <_usb_device_interrupt_handler+0x304>)
     f20:	015b      	lsls	r3, r3, #5
     f22:	18d3      	adds	r3, r2, r3
     f24:	685b      	ldr	r3, [r3, #4]
     f26:	049b      	lsls	r3, r3, #18
     f28:	0c9b      	lsrs	r3, r3, #18
     f2a:	b29b      	uxth	r3, r3
     f2c:	001a      	movs	r2, r3
     f2e:	4b2a      	ldr	r3, [pc, #168]	; (fd8 <_usb_device_interrupt_handler+0x30c>)
     f30:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     f32:	4b25      	ldr	r3, [pc, #148]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     f34:	681a      	ldr	r2, [r3, #0]
     f36:	230b      	movs	r3, #11
     f38:	18fb      	adds	r3, r7, r3
     f3a:	781b      	ldrb	r3, [r3, #0]
     f3c:	21dc      	movs	r1, #220	; 0xdc
     f3e:	011b      	lsls	r3, r3, #4
     f40:	18d3      	adds	r3, r2, r3
     f42:	185b      	adds	r3, r3, r1
     f44:	681a      	ldr	r2, [r3, #0]
     f46:	4b20      	ldr	r3, [pc, #128]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     f48:	681b      	ldr	r3, [r3, #0]
     f4a:	4923      	ldr	r1, [pc, #140]	; (fd8 <_usb_device_interrupt_handler+0x30c>)
     f4c:	0018      	movs	r0, r3
     f4e:	4790      	blx	r2
					}
					return;
     f50:	e16b      	b.n	122a <_usb_device_interrupt_handler+0x55e>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     f52:	1dbb      	adds	r3, r7, #6
     f54:	881b      	ldrh	r3, [r3, #0]
     f56:	2203      	movs	r2, #3
     f58:	4013      	ands	r3, r2
     f5a:	d100      	bne.n	f5e <_usb_device_interrupt_handler+0x292>
     f5c:	e08f      	b.n	107e <_usb_device_interrupt_handler+0x3b2>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     f5e:	4b1a      	ldr	r3, [pc, #104]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	681a      	ldr	r2, [r3, #0]
     f64:	230b      	movs	r3, #11
     f66:	18fb      	adds	r3, r7, r3
     f68:	781b      	ldrb	r3, [r3, #0]
     f6a:	3308      	adds	r3, #8
     f6c:	015b      	lsls	r3, r3, #5
     f6e:	18d3      	adds	r3, r2, r3
     f70:	3307      	adds	r3, #7
     f72:	781b      	ldrb	r3, [r3, #0]
     f74:	b2db      	uxtb	r3, r3
     f76:	001a      	movs	r2, r3
     f78:	2302      	movs	r3, #2
     f7a:	4013      	ands	r3, r2
     f7c:	d02e      	beq.n	fdc <_usb_device_interrupt_handler+0x310>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
     f7e:	4b12      	ldr	r3, [pc, #72]	; (fc8 <_usb_device_interrupt_handler+0x2fc>)
     f80:	681b      	ldr	r3, [r3, #0]
     f82:	681a      	ldr	r2, [r3, #0]
     f84:	230b      	movs	r3, #11
     f86:	18fb      	adds	r3, r7, r3
     f88:	781b      	ldrb	r3, [r3, #0]
     f8a:	3308      	adds	r3, #8
     f8c:	015b      	lsls	r3, r3, #5
     f8e:	18d3      	adds	r3, r2, r3
     f90:	3307      	adds	r3, #7
     f92:	2202      	movs	r2, #2
     f94:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     f96:	230b      	movs	r3, #11
     f98:	18fb      	adds	r3, r7, r3
     f9a:	781b      	ldrb	r3, [r3, #0]
     f9c:	2280      	movs	r2, #128	; 0x80
     f9e:	4252      	negs	r2, r2
     fa0:	4313      	orrs	r3, r2
     fa2:	b2da      	uxtb	r2, r3
     fa4:	4b0c      	ldr	r3, [pc, #48]	; (fd8 <_usb_device_interrupt_handler+0x30c>)
     fa6:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
     fa8:	230b      	movs	r3, #11
     faa:	18fb      	adds	r3, r7, r3
     fac:	781b      	ldrb	r3, [r3, #0]
     fae:	4a08      	ldr	r2, [pc, #32]	; (fd0 <_usb_device_interrupt_handler+0x304>)
     fb0:	015b      	lsls	r3, r3, #5
     fb2:	18d3      	adds	r3, r2, r3
     fb4:	3310      	adds	r3, #16
     fb6:	685b      	ldr	r3, [r3, #4]
     fb8:	049b      	lsls	r3, r3, #18
     fba:	0c9b      	lsrs	r3, r3, #18
     fbc:	b29b      	uxth	r3, r3
     fbe:	001a      	movs	r2, r3
     fc0:	4b05      	ldr	r3, [pc, #20]	; (fd8 <_usb_device_interrupt_handler+0x30c>)
     fc2:	805a      	strh	r2, [r3, #2]
     fc4:	e045      	b.n	1052 <_usb_device_interrupt_handler+0x386>
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	20000cbc 	.word	0x20000cbc
     fcc:	00027d58 	.word	0x00027d58
     fd0:	200010cc 	.word	0x200010cc
     fd4:	20000cc8 	.word	0x20000cc8
     fd8:	20000ccc 	.word	0x20000ccc

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     fdc:	4b98      	ldr	r3, [pc, #608]	; (1240 <_usb_device_interrupt_handler+0x574>)
     fde:	681b      	ldr	r3, [r3, #0]
     fe0:	681a      	ldr	r2, [r3, #0]
     fe2:	230b      	movs	r3, #11
     fe4:	18fb      	adds	r3, r7, r3
     fe6:	781b      	ldrb	r3, [r3, #0]
     fe8:	3308      	adds	r3, #8
     fea:	015b      	lsls	r3, r3, #5
     fec:	18d3      	adds	r3, r2, r3
     fee:	3307      	adds	r3, #7
     ff0:	781b      	ldrb	r3, [r3, #0]
     ff2:	b2db      	uxtb	r3, r3
     ff4:	001a      	movs	r2, r3
     ff6:	2301      	movs	r3, #1
     ff8:	4013      	ands	r3, r2
     ffa:	d02a      	beq.n	1052 <_usb_device_interrupt_handler+0x386>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
     ffc:	4b90      	ldr	r3, [pc, #576]	; (1240 <_usb_device_interrupt_handler+0x574>)
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	681a      	ldr	r2, [r3, #0]
    1002:	230b      	movs	r3, #11
    1004:	18fb      	adds	r3, r7, r3
    1006:	781b      	ldrb	r3, [r3, #0]
    1008:	3308      	adds	r3, #8
    100a:	015b      	lsls	r3, r3, #5
    100c:	18d3      	adds	r3, r2, r3
    100e:	3307      	adds	r3, #7
    1010:	2201      	movs	r2, #1
    1012:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    1014:	4b8b      	ldr	r3, [pc, #556]	; (1244 <_usb_device_interrupt_handler+0x578>)
    1016:	220b      	movs	r2, #11
    1018:	18ba      	adds	r2, r7, r2
    101a:	7812      	ldrb	r2, [r2, #0]
    101c:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    101e:	230b      	movs	r3, #11
    1020:	18fb      	adds	r3, r7, r3
    1022:	781b      	ldrb	r3, [r3, #0]
    1024:	4a88      	ldr	r2, [pc, #544]	; (1248 <_usb_device_interrupt_handler+0x57c>)
    1026:	015b      	lsls	r3, r3, #5
    1028:	18d3      	adds	r3, r2, r3
    102a:	685b      	ldr	r3, [r3, #4]
    102c:	049b      	lsls	r3, r3, #18
    102e:	0c9b      	lsrs	r3, r3, #18
    1030:	b29b      	uxth	r3, r3
    1032:	001a      	movs	r2, r3
    1034:	4b83      	ldr	r3, [pc, #524]	; (1244 <_usb_device_interrupt_handler+0x578>)
    1036:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    1038:	230b      	movs	r3, #11
    103a:	18fb      	adds	r3, r7, r3
    103c:	781b      	ldrb	r3, [r3, #0]
    103e:	4a82      	ldr	r2, [pc, #520]	; (1248 <_usb_device_interrupt_handler+0x57c>)
    1040:	015b      	lsls	r3, r3, #5
    1042:	18d3      	adds	r3, r2, r3
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	011b      	lsls	r3, r3, #4
    1048:	0c9b      	lsrs	r3, r3, #18
    104a:	b29b      	uxth	r3, r3
    104c:	001a      	movs	r2, r3
    104e:	4b7d      	ldr	r3, [pc, #500]	; (1244 <_usb_device_interrupt_handler+0x578>)
    1050:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1052:	1d3b      	adds	r3, r7, #4
    1054:	881b      	ldrh	r3, [r3, #0]
    1056:	2203      	movs	r2, #3
    1058:	4013      	ands	r3, r2
    105a:	d100      	bne.n	105e <_usb_device_interrupt_handler+0x392>
    105c:	e0e7      	b.n	122e <_usb_device_interrupt_handler+0x562>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    105e:	4b78      	ldr	r3, [pc, #480]	; (1240 <_usb_device_interrupt_handler+0x574>)
    1060:	681a      	ldr	r2, [r3, #0]
    1062:	230b      	movs	r3, #11
    1064:	18fb      	adds	r3, r7, r3
    1066:	781b      	ldrb	r3, [r3, #0]
    1068:	330d      	adds	r3, #13
    106a:	011b      	lsls	r3, r3, #4
    106c:	18d3      	adds	r3, r2, r3
    106e:	3304      	adds	r3, #4
    1070:	681a      	ldr	r2, [r3, #0]
    1072:	4b73      	ldr	r3, [pc, #460]	; (1240 <_usb_device_interrupt_handler+0x574>)
    1074:	681b      	ldr	r3, [r3, #0]
    1076:	4973      	ldr	r1, [pc, #460]	; (1244 <_usb_device_interrupt_handler+0x578>)
    1078:	0018      	movs	r0, r3
    107a:	4790      	blx	r2
					}
					return;
    107c:	e0d7      	b.n	122e <_usb_device_interrupt_handler+0x562>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    107e:	1dbb      	adds	r3, r7, #6
    1080:	881b      	ldrh	r3, [r3, #0]
    1082:	220c      	movs	r2, #12
    1084:	4013      	ands	r3, r2
    1086:	d100      	bne.n	108a <_usb_device_interrupt_handler+0x3be>
    1088:	e0bf      	b.n	120a <_usb_device_interrupt_handler+0x53e>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    108a:	4b6d      	ldr	r3, [pc, #436]	; (1240 <_usb_device_interrupt_handler+0x574>)
    108c:	681b      	ldr	r3, [r3, #0]
    108e:	681a      	ldr	r2, [r3, #0]
    1090:	230b      	movs	r3, #11
    1092:	18fb      	adds	r3, r7, r3
    1094:	781b      	ldrb	r3, [r3, #0]
    1096:	3308      	adds	r3, #8
    1098:	015b      	lsls	r3, r3, #5
    109a:	18d3      	adds	r3, r2, r3
    109c:	3307      	adds	r3, #7
    109e:	781b      	ldrb	r3, [r3, #0]
    10a0:	b2db      	uxtb	r3, r3
    10a2:	001a      	movs	r2, r3
    10a4:	2308      	movs	r3, #8
    10a6:	4013      	ands	r3, r2
    10a8:	d047      	beq.n	113a <_usb_device_interrupt_handler+0x46e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    10aa:	4b65      	ldr	r3, [pc, #404]	; (1240 <_usb_device_interrupt_handler+0x574>)
    10ac:	681b      	ldr	r3, [r3, #0]
    10ae:	681a      	ldr	r2, [r3, #0]
    10b0:	230b      	movs	r3, #11
    10b2:	18fb      	adds	r3, r7, r3
    10b4:	781b      	ldrb	r3, [r3, #0]
    10b6:	3308      	adds	r3, #8
    10b8:	015b      	lsls	r3, r3, #5
    10ba:	18d3      	adds	r3, r2, r3
    10bc:	3307      	adds	r3, #7
    10be:	2208      	movs	r2, #8
    10c0:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    10c2:	230b      	movs	r3, #11
    10c4:	18fb      	adds	r3, r7, r3
    10c6:	781b      	ldrb	r3, [r3, #0]
    10c8:	4a5f      	ldr	r2, [pc, #380]	; (1248 <_usb_device_interrupt_handler+0x57c>)
    10ca:	015b      	lsls	r3, r3, #5
    10cc:	18d3      	adds	r3, r2, r3
    10ce:	331a      	adds	r3, #26
    10d0:	781b      	ldrb	r3, [r3, #0]
    10d2:	b2db      	uxtb	r3, r3
    10d4:	001a      	movs	r2, r3
    10d6:	2302      	movs	r3, #2
    10d8:	4013      	ands	r3, r2
    10da:	d014      	beq.n	1106 <_usb_device_interrupt_handler+0x43a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    10dc:	230b      	movs	r3, #11
    10de:	18fb      	adds	r3, r7, r3
    10e0:	781b      	ldrb	r3, [r3, #0]
    10e2:	220b      	movs	r2, #11
    10e4:	18ba      	adds	r2, r7, r2
    10e6:	7812      	ldrb	r2, [r2, #0]
    10e8:	4957      	ldr	r1, [pc, #348]	; (1248 <_usb_device_interrupt_handler+0x57c>)
    10ea:	0152      	lsls	r2, r2, #5
    10ec:	188a      	adds	r2, r1, r2
    10ee:	321a      	adds	r2, #26
    10f0:	7812      	ldrb	r2, [r2, #0]
    10f2:	b2d2      	uxtb	r2, r2
    10f4:	2102      	movs	r1, #2
    10f6:	438a      	bics	r2, r1
    10f8:	b2d1      	uxtb	r1, r2
    10fa:	4a53      	ldr	r2, [pc, #332]	; (1248 <_usb_device_interrupt_handler+0x57c>)
    10fc:	015b      	lsls	r3, r3, #5
    10fe:	18d3      	adds	r3, r2, r3
    1100:	331a      	adds	r3, #26
    1102:	1c0a      	adds	r2, r1, #0
    1104:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1106:	230b      	movs	r3, #11
    1108:	18fb      	adds	r3, r7, r3
    110a:	781b      	ldrb	r3, [r3, #0]
    110c:	2280      	movs	r2, #128	; 0x80
    110e:	4252      	negs	r2, r2
    1110:	4313      	orrs	r3, r2
    1112:	b2da      	uxtb	r2, r3
    1114:	4b4b      	ldr	r3, [pc, #300]	; (1244 <_usb_device_interrupt_handler+0x578>)
    1116:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1118:	4b49      	ldr	r3, [pc, #292]	; (1240 <_usb_device_interrupt_handler+0x574>)
    111a:	681b      	ldr	r3, [r3, #0]
    111c:	681a      	ldr	r2, [r3, #0]
    111e:	230b      	movs	r3, #11
    1120:	18fb      	adds	r3, r7, r3
    1122:	781b      	ldrb	r3, [r3, #0]
    1124:	3308      	adds	r3, #8
    1126:	015b      	lsls	r3, r3, #5
    1128:	18d3      	adds	r3, r2, r3
    112a:	3307      	adds	r3, #7
    112c:	781b      	ldrb	r3, [r3, #0]
    112e:	b2db      	uxtb	r3, r3
    1130:	001a      	movs	r2, r3
    1132:	2302      	movs	r3, #2
    1134:	4013      	ands	r3, r2
    1136:	d053      	beq.n	11e0 <_usb_device_interrupt_handler+0x514>
							return;
    1138:	e07e      	b.n	1238 <_usb_device_interrupt_handler+0x56c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    113a:	4b41      	ldr	r3, [pc, #260]	; (1240 <_usb_device_interrupt_handler+0x574>)
    113c:	681b      	ldr	r3, [r3, #0]
    113e:	681a      	ldr	r2, [r3, #0]
    1140:	230b      	movs	r3, #11
    1142:	18fb      	adds	r3, r7, r3
    1144:	781b      	ldrb	r3, [r3, #0]
    1146:	3308      	adds	r3, #8
    1148:	015b      	lsls	r3, r3, #5
    114a:	18d3      	adds	r3, r2, r3
    114c:	3307      	adds	r3, #7
    114e:	781b      	ldrb	r3, [r3, #0]
    1150:	b2db      	uxtb	r3, r3
    1152:	001a      	movs	r2, r3
    1154:	2304      	movs	r3, #4
    1156:	4013      	ands	r3, r2
    1158:	d042      	beq.n	11e0 <_usb_device_interrupt_handler+0x514>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    115a:	4b39      	ldr	r3, [pc, #228]	; (1240 <_usb_device_interrupt_handler+0x574>)
    115c:	681b      	ldr	r3, [r3, #0]
    115e:	681a      	ldr	r2, [r3, #0]
    1160:	230b      	movs	r3, #11
    1162:	18fb      	adds	r3, r7, r3
    1164:	781b      	ldrb	r3, [r3, #0]
    1166:	3308      	adds	r3, #8
    1168:	015b      	lsls	r3, r3, #5
    116a:	18d3      	adds	r3, r2, r3
    116c:	3307      	adds	r3, #7
    116e:	2204      	movs	r2, #4
    1170:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    1172:	230b      	movs	r3, #11
    1174:	18fb      	adds	r3, r7, r3
    1176:	781b      	ldrb	r3, [r3, #0]
    1178:	4a33      	ldr	r2, [pc, #204]	; (1248 <_usb_device_interrupt_handler+0x57c>)
    117a:	015b      	lsls	r3, r3, #5
    117c:	18d3      	adds	r3, r2, r3
    117e:	330a      	adds	r3, #10
    1180:	781b      	ldrb	r3, [r3, #0]
    1182:	b2db      	uxtb	r3, r3
    1184:	001a      	movs	r2, r3
    1186:	2302      	movs	r3, #2
    1188:	4013      	ands	r3, r2
    118a:	d014      	beq.n	11b6 <_usb_device_interrupt_handler+0x4ea>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    118c:	230b      	movs	r3, #11
    118e:	18fb      	adds	r3, r7, r3
    1190:	781b      	ldrb	r3, [r3, #0]
    1192:	220b      	movs	r2, #11
    1194:	18ba      	adds	r2, r7, r2
    1196:	7812      	ldrb	r2, [r2, #0]
    1198:	492b      	ldr	r1, [pc, #172]	; (1248 <_usb_device_interrupt_handler+0x57c>)
    119a:	0152      	lsls	r2, r2, #5
    119c:	188a      	adds	r2, r1, r2
    119e:	320a      	adds	r2, #10
    11a0:	7812      	ldrb	r2, [r2, #0]
    11a2:	b2d2      	uxtb	r2, r2
    11a4:	2102      	movs	r1, #2
    11a6:	438a      	bics	r2, r1
    11a8:	b2d1      	uxtb	r1, r2
    11aa:	4a27      	ldr	r2, [pc, #156]	; (1248 <_usb_device_interrupt_handler+0x57c>)
    11ac:	015b      	lsls	r3, r3, #5
    11ae:	18d3      	adds	r3, r2, r3
    11b0:	330a      	adds	r3, #10
    11b2:	1c0a      	adds	r2, r1, #0
    11b4:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    11b6:	4b23      	ldr	r3, [pc, #140]	; (1244 <_usb_device_interrupt_handler+0x578>)
    11b8:	220b      	movs	r2, #11
    11ba:	18ba      	adds	r2, r7, r2
    11bc:	7812      	ldrb	r2, [r2, #0]
    11be:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    11c0:	4b1f      	ldr	r3, [pc, #124]	; (1240 <_usb_device_interrupt_handler+0x574>)
    11c2:	681b      	ldr	r3, [r3, #0]
    11c4:	681a      	ldr	r2, [r3, #0]
    11c6:	230b      	movs	r3, #11
    11c8:	18fb      	adds	r3, r7, r3
    11ca:	781b      	ldrb	r3, [r3, #0]
    11cc:	3308      	adds	r3, #8
    11ce:	015b      	lsls	r3, r3, #5
    11d0:	18d3      	adds	r3, r2, r3
    11d2:	3307      	adds	r3, #7
    11d4:	781b      	ldrb	r3, [r3, #0]
    11d6:	b2db      	uxtb	r3, r3
    11d8:	001a      	movs	r2, r3
    11da:	2301      	movs	r3, #1
    11dc:	4013      	ands	r3, r2
    11de:	d128      	bne.n	1232 <_usb_device_interrupt_handler+0x566>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    11e0:	1d3b      	adds	r3, r7, #4
    11e2:	881b      	ldrh	r3, [r3, #0]
    11e4:	220c      	movs	r2, #12
    11e6:	4013      	ands	r3, r2
    11e8:	d025      	beq.n	1236 <_usb_device_interrupt_handler+0x56a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    11ea:	4b15      	ldr	r3, [pc, #84]	; (1240 <_usb_device_interrupt_handler+0x574>)
    11ec:	681a      	ldr	r2, [r3, #0]
    11ee:	230b      	movs	r3, #11
    11f0:	18fb      	adds	r3, r7, r3
    11f2:	781b      	ldrb	r3, [r3, #0]
    11f4:	21d8      	movs	r1, #216	; 0xd8
    11f6:	011b      	lsls	r3, r3, #4
    11f8:	18d3      	adds	r3, r2, r3
    11fa:	185b      	adds	r3, r3, r1
    11fc:	681a      	ldr	r2, [r3, #0]
    11fe:	4b10      	ldr	r3, [pc, #64]	; (1240 <_usb_device_interrupt_handler+0x574>)
    1200:	681b      	ldr	r3, [r3, #0]
    1202:	4910      	ldr	r1, [pc, #64]	; (1244 <_usb_device_interrupt_handler+0x578>)
    1204:	0018      	movs	r0, r3
    1206:	4790      	blx	r2
					}
					return;
    1208:	e015      	b.n	1236 <_usb_device_interrupt_handler+0x56a>
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    120a:	230b      	movs	r3, #11
    120c:	18fb      	adds	r3, r7, r3
    120e:	781a      	ldrb	r2, [r3, #0]
    1210:	230b      	movs	r3, #11
    1212:	18fb      	adds	r3, r7, r3
    1214:	3201      	adds	r2, #1
    1216:	701a      	strb	r2, [r3, #0]
    1218:	230b      	movs	r3, #11
    121a:	18fb      	adds	r3, r7, r3
    121c:	781b      	ldrb	r3, [r3, #0]
    121e:	2b07      	cmp	r3, #7
    1220:	d800      	bhi.n	1224 <_usb_device_interrupt_handler+0x558>
    1222:	e5bd      	b.n	da0 <_usb_device_interrupt_handler+0xd4>
    1224:	e008      	b.n	1238 <_usb_device_interrupt_handler+0x56c>
					return;
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	e006      	b.n	1238 <_usb_device_interrupt_handler+0x56c>
					return;
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	e004      	b.n	1238 <_usb_device_interrupt_handler+0x56c>
					return;
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	e002      	b.n	1238 <_usb_device_interrupt_handler+0x56c>
							return;
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	e000      	b.n	1238 <_usb_device_interrupt_handler+0x56c>
					return;
    1236:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    1238:	46bd      	mov	sp, r7
    123a:	b004      	add	sp, #16
    123c:	bd80      	pop	{r7, pc}
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	20000cbc 	.word	0x20000cbc
    1244:	20000ccc 	.word	0x20000ccc
    1248:	200010cc 	.word	0x200010cc

0000124c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    124c:	b580      	push	{r7, lr}
    124e:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    1250:	4b08      	ldr	r3, [pc, #32]	; (1274 <USB_Handler+0x28>)
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	781b      	ldrb	r3, [r3, #0]
    1258:	061b      	lsls	r3, r3, #24
    125a:	0fdb      	lsrs	r3, r3, #31
    125c:	b2db      	uxtb	r3, r3
    125e:	2b00      	cmp	r3, #0
    1260:	d002      	beq.n	1268 <USB_Handler+0x1c>
#if !SAML22
		/*host mode ISR */
		_usb_host_interrupt_handler();
    1262:	4b05      	ldr	r3, [pc, #20]	; (1278 <USB_Handler+0x2c>)
    1264:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    1266:	e001      	b.n	126c <USB_Handler+0x20>
		_usb_device_interrupt_handler();
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <USB_Handler+0x30>)
    126a:	4798      	blx	r3
}
    126c:	46c0      	nop			; (mov r8, r8)
    126e:	46bd      	mov	sp, r7
    1270:	bd80      	pop	{r7, pc}
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	20000cbc 	.word	0x20000cbc
    1278:	00000619 	.word	0x00000619
    127c:	00000ccd 	.word	0x00000ccd

00001280 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1280:	b580      	push	{r7, lr}
    1282:	b082      	sub	sp, #8
    1284:	af00      	add	r7, sp, #0
    1286:	0002      	movs	r2, r0
    1288:	6039      	str	r1, [r7, #0]
    128a:	1dfb      	adds	r3, r7, #7
    128c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    128e:	1dfb      	adds	r3, r7, #7
    1290:	781b      	ldrb	r3, [r3, #0]
    1292:	2b04      	cmp	r3, #4
    1294:	d827      	bhi.n	12e6 <system_apb_clock_set_mask+0x66>
    1296:	009a      	lsls	r2, r3, #2
    1298:	4b16      	ldr	r3, [pc, #88]	; (12f4 <system_apb_clock_set_mask+0x74>)
    129a:	18d3      	adds	r3, r2, r3
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    12a0:	4b15      	ldr	r3, [pc, #84]	; (12f8 <system_apb_clock_set_mask+0x78>)
    12a2:	4a15      	ldr	r2, [pc, #84]	; (12f8 <system_apb_clock_set_mask+0x78>)
    12a4:	6951      	ldr	r1, [r2, #20]
    12a6:	683a      	ldr	r2, [r7, #0]
    12a8:	430a      	orrs	r2, r1
    12aa:	615a      	str	r2, [r3, #20]
			break;
    12ac:	e01d      	b.n	12ea <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    12ae:	4b12      	ldr	r3, [pc, #72]	; (12f8 <system_apb_clock_set_mask+0x78>)
    12b0:	4a11      	ldr	r2, [pc, #68]	; (12f8 <system_apb_clock_set_mask+0x78>)
    12b2:	6991      	ldr	r1, [r2, #24]
    12b4:	683a      	ldr	r2, [r7, #0]
    12b6:	430a      	orrs	r2, r1
    12b8:	619a      	str	r2, [r3, #24]
			break;
    12ba:	e016      	b.n	12ea <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    12bc:	4b0e      	ldr	r3, [pc, #56]	; (12f8 <system_apb_clock_set_mask+0x78>)
    12be:	4a0e      	ldr	r2, [pc, #56]	; (12f8 <system_apb_clock_set_mask+0x78>)
    12c0:	69d1      	ldr	r1, [r2, #28]
    12c2:	683a      	ldr	r2, [r7, #0]
    12c4:	430a      	orrs	r2, r1
    12c6:	61da      	str	r2, [r3, #28]
			break;
    12c8:	e00f      	b.n	12ea <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    12ca:	4b0b      	ldr	r3, [pc, #44]	; (12f8 <system_apb_clock_set_mask+0x78>)
    12cc:	4a0a      	ldr	r2, [pc, #40]	; (12f8 <system_apb_clock_set_mask+0x78>)
    12ce:	6a11      	ldr	r1, [r2, #32]
    12d0:	683a      	ldr	r2, [r7, #0]
    12d2:	430a      	orrs	r2, r1
    12d4:	621a      	str	r2, [r3, #32]
			break;
    12d6:	e008      	b.n	12ea <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    12d8:	4b07      	ldr	r3, [pc, #28]	; (12f8 <system_apb_clock_set_mask+0x78>)
    12da:	4a07      	ldr	r2, [pc, #28]	; (12f8 <system_apb_clock_set_mask+0x78>)
    12dc:	6a51      	ldr	r1, [r2, #36]	; 0x24
    12de:	683a      	ldr	r2, [r7, #0]
    12e0:	430a      	orrs	r2, r1
    12e2:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    12e4:	e001      	b.n	12ea <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    12e6:	2317      	movs	r3, #23
    12e8:	e000      	b.n	12ec <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
    12ea:	2300      	movs	r3, #0
}
    12ec:	0018      	movs	r0, r3
    12ee:	46bd      	mov	sp, r7
    12f0:	b002      	add	sp, #8
    12f2:	bd80      	pop	{r7, pc}
    12f4:	00027d68 	.word	0x00027d68
    12f8:	40000400 	.word	0x40000400

000012fc <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    12fc:	b580      	push	{r7, lr}
    12fe:	b082      	sub	sp, #8
    1300:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1302:	4b06      	ldr	r3, [pc, #24]	; (131c <wdt_is_syncing+0x20>)
    1304:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	689b      	ldr	r3, [r3, #8]
    130a:	2b00      	cmp	r3, #0
    130c:	d001      	beq.n	1312 <wdt_is_syncing+0x16>
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
#endif
		return true;
    130e:	2301      	movs	r3, #1
    1310:	e000      	b.n	1314 <wdt_is_syncing+0x18>
	}

	return false;
    1312:	2300      	movs	r3, #0
}
    1314:	0018      	movs	r0, r3
    1316:	46bd      	mov	sp, r7
    1318:	b002      	add	sp, #8
    131a:	bd80      	pop	{r7, pc}
    131c:	40001c00 	.word	0x40001c00

00001320 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    1320:	b580      	push	{r7, lr}
    1322:	b082      	sub	sp, #8
    1324:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1326:	4b07      	ldr	r3, [pc, #28]	; (1344 <wdt_is_locked+0x24>)
    1328:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	781b      	ldrb	r3, [r3, #0]
    132e:	b2db      	uxtb	r3, r3
    1330:	001a      	movs	r2, r3
    1332:	2380      	movs	r3, #128	; 0x80
    1334:	4013      	ands	r3, r2
    1336:	1e5a      	subs	r2, r3, #1
    1338:	4193      	sbcs	r3, r2
    133a:	b2db      	uxtb	r3, r3
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
#endif
}
    133c:	0018      	movs	r0, r3
    133e:	46bd      	mov	sp, r7
    1340:	b002      	add	sp, #8
    1342:	bd80      	pop	{r7, pc}
    1344:	40001c00 	.word	0x40001c00

00001348 <wdt_set_config>:
 * \retval STATUS_ERR_IO  If the Watchdog module is locked to be always on
 */
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    1348:	b580      	push	{r7, lr}
    134a:	b084      	sub	sp, #16
    134c:	af00      	add	r7, sp, #0
    134e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    1350:	4b47      	ldr	r3, [pc, #284]	; (1470 <wdt_set_config+0x128>)
    1352:	60bb      	str	r3, [r7, #8]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_WDT);
    1354:	2180      	movs	r1, #128	; 0x80
    1356:	2000      	movs	r0, #0
    1358:	4b46      	ldr	r3, [pc, #280]	; (1474 <wdt_set_config+0x12c>)
    135a:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    135c:	4b46      	ldr	r3, [pc, #280]	; (1478 <wdt_set_config+0x130>)
    135e:	4798      	blx	r3
    1360:	1e03      	subs	r3, r0, #0
    1362:	d001      	beq.n	1368 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    1364:	2310      	movs	r3, #16
    1366:	e07e      	b.n	1466 <wdt_set_config+0x11e>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	789b      	ldrb	r3, [r3, #2]
    136c:	2b00      	cmp	r3, #0
    136e:	d101      	bne.n	1374 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    1370:	2317      	movs	r3, #23
    1372:	e078      	b.n	1466 <wdt_set_config+0x11e>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    1374:	687b      	ldr	r3, [r7, #4]
    1376:	789a      	ldrb	r2, [r3, #2]
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	78db      	ldrb	r3, [r3, #3]
    137c:	429a      	cmp	r2, r3
    137e:	d305      	bcc.n	138c <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	789a      	ldrb	r2, [r3, #2]
    1384:	687b      	ldr	r3, [r7, #4]
    1386:	791b      	ldrb	r3, [r3, #4]
	if ((config->timeout_period < config->window_period) ||
    1388:	429a      	cmp	r2, r3
    138a:	d201      	bcs.n	1390 <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    138c:	2317      	movs	r3, #23
    138e:	e06a      	b.n	1466 <wdt_set_config+0x11e>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    1390:	68bb      	ldr	r3, [r7, #8]
    1392:	781b      	ldrb	r3, [r3, #0]
    1394:	b2db      	uxtb	r3, r3
    1396:	2202      	movs	r2, #2
    1398:	4393      	bics	r3, r2
    139a:	b2da      	uxtb	r2, r3
    139c:	68bb      	ldr	r3, [r7, #8]
    139e:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    13a0:	46c0      	nop			; (mov r8, r8)
    13a2:	4b36      	ldr	r3, [pc, #216]	; (147c <wdt_set_config+0x134>)
    13a4:	4798      	blx	r3
    13a6:	1e03      	subs	r3, r0, #0
    13a8:	d1fb      	bne.n	13a2 <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	785b      	ldrb	r3, [r3, #1]
    13ae:	2201      	movs	r2, #1
    13b0:	4053      	eors	r3, r2
    13b2:	b2db      	uxtb	r3, r3
    13b4:	2b00      	cmp	r3, #0
    13b6:	d001      	beq.n	13bc <wdt_set_config+0x74>
		return STATUS_OK;
    13b8:	2300      	movs	r3, #0
    13ba:	e054      	b.n	1466 <wdt_set_config+0x11e>
	}

	uint32_t new_config = 0;
    13bc:	2300      	movs	r3, #0
    13be:	60fb      	str	r3, [r7, #12]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	789b      	ldrb	r3, [r3, #2]
    13c4:	3b01      	subs	r3, #1
    13c6:	001a      	movs	r2, r3
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	4313      	orrs	r3, r2
    13cc:	60fb      	str	r3, [r7, #12]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    13ce:	687b      	ldr	r3, [r7, #4]
    13d0:	78db      	ldrb	r3, [r3, #3]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d010      	beq.n	13f8 <wdt_set_config+0xb0>
		WDT_module->CTRLA.reg |= WDT_CTRLA_WEN;
    13d6:	68bb      	ldr	r3, [r7, #8]
    13d8:	781b      	ldrb	r3, [r3, #0]
    13da:	b2db      	uxtb	r3, r3
    13dc:	2204      	movs	r2, #4
    13de:	4313      	orrs	r3, r2
    13e0:	b2da      	uxtb	r2, r3
    13e2:	68bb      	ldr	r3, [r7, #8]
    13e4:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    13e6:	687b      	ldr	r3, [r7, #4]
    13e8:	78db      	ldrb	r3, [r3, #3]
    13ea:	3b01      	subs	r3, #1
    13ec:	011b      	lsls	r3, r3, #4
    13ee:	001a      	movs	r2, r3
    13f0:	68fb      	ldr	r3, [r7, #12]
    13f2:	4313      	orrs	r3, r2
    13f4:	60fb      	str	r3, [r7, #12]
    13f6:	e007      	b.n	1408 <wdt_set_config+0xc0>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRLA.reg &= ~WDT_CTRLA_WEN;
    13f8:	68bb      	ldr	r3, [r7, #8]
    13fa:	781b      	ldrb	r3, [r3, #0]
    13fc:	b2db      	uxtb	r3, r3
    13fe:	2204      	movs	r2, #4
    1400:	4393      	bics	r3, r2
    1402:	b2da      	uxtb	r2, r3
    1404:	68bb      	ldr	r3, [r7, #8]
    1406:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1408:	46c0      	nop			; (mov r8, r8)
    140a:	4b1c      	ldr	r3, [pc, #112]	; (147c <wdt_set_config+0x134>)
    140c:	4798      	blx	r3
    140e:	1e03      	subs	r3, r0, #0
    1410:	d1fb      	bne.n	140a <wdt_set_config+0xc2>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	b2da      	uxtb	r2, r3
    1416:	68bb      	ldr	r3, [r7, #8]
    1418:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    141a:	687b      	ldr	r3, [r7, #4]
    141c:	791b      	ldrb	r3, [r3, #4]
    141e:	2b00      	cmp	r3, #0
    1420:	d005      	beq.n	142e <wdt_set_config+0xe6>
		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	791b      	ldrb	r3, [r3, #4]
    1426:	3b01      	subs	r3, #1
    1428:	b2da      	uxtb	r2, r3
    142a:	68bb      	ldr	r3, [r7, #8]
    142c:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	2b00      	cmp	r3, #0
    1434:	d009      	beq.n	144a <wdt_set_config+0x102>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
    1436:	68bb      	ldr	r3, [r7, #8]
    1438:	781b      	ldrb	r3, [r3, #0]
    143a:	b2db      	uxtb	r3, r3
    143c:	2280      	movs	r2, #128	; 0x80
    143e:	4252      	negs	r2, r2
    1440:	4313      	orrs	r3, r2
    1442:	b2da      	uxtb	r2, r3
    1444:	68bb      	ldr	r3, [r7, #8]
    1446:	701a      	strb	r2, [r3, #0]
    1448:	e007      	b.n	145a <wdt_set_config+0x112>
	} else {
		WDT_module->CTRLA.reg |= WDT_CTRLA_ENABLE;
    144a:	68bb      	ldr	r3, [r7, #8]
    144c:	781b      	ldrb	r3, [r3, #0]
    144e:	b2db      	uxtb	r3, r3
    1450:	2202      	movs	r2, #2
    1452:	4313      	orrs	r3, r2
    1454:	b2da      	uxtb	r2, r3
    1456:	68bb      	ldr	r3, [r7, #8]
    1458:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	4b07      	ldr	r3, [pc, #28]	; (147c <wdt_set_config+0x134>)
    145e:	4798      	blx	r3
    1460:	1e03      	subs	r3, r0, #0
    1462:	d1fb      	bne.n	145c <wdt_set_config+0x114>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    1464:	2300      	movs	r3, #0
}
    1466:	0018      	movs	r0, r3
    1468:	46bd      	mov	sp, r7
    146a:	b004      	add	sp, #16
    146c:	bd80      	pop	{r7, pc}
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	40001c00 	.word	0x40001c00
    1474:	00001281 	.word	0x00001281
    1478:	00001321 	.word	0x00001321
    147c:	000012fd 	.word	0x000012fd

00001480 <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
    1480:	b580      	push	{r7, lr}
    1482:	b082      	sub	sp, #8
    1484:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1486:	4b07      	ldr	r3, [pc, #28]	; (14a4 <wdt_reset_count+0x24>)
    1488:	607b      	str	r3, [r7, #4]

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	22a5      	movs	r2, #165	; 0xa5
    148e:	731a      	strb	r2, [r3, #12]

	while (wdt_is_syncing()) {
    1490:	46c0      	nop			; (mov r8, r8)
    1492:	4b05      	ldr	r3, [pc, #20]	; (14a8 <wdt_reset_count+0x28>)
    1494:	4798      	blx	r3
    1496:	1e03      	subs	r3, r0, #0
    1498:	d1fb      	bne.n	1492 <wdt_reset_count+0x12>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	46bd      	mov	sp, r7
    149e:	b002      	add	sp, #8
    14a0:	bd80      	pop	{r7, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	40001c00 	.word	0x40001c00
    14a8:	000012fd 	.word	0x000012fd

000014ac <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	b082      	sub	sp, #8
    14b0:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    14b2:	4b04      	ldr	r3, [pc, #16]	; (14c4 <wdt_clear_early_warning+0x18>)
    14b4:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	2201      	movs	r2, #1
    14ba:	719a      	strb	r2, [r3, #6]
}
    14bc:	46c0      	nop			; (mov r8, r8)
    14be:	46bd      	mov	sp, r7
    14c0:	b002      	add	sp, #8
    14c2:	bd80      	pop	{r7, pc}
    14c4:	40001c00 	.word	0x40001c00

000014c8 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    14cc:	4b05      	ldr	r3, [pc, #20]	; (14e4 <WDT_Handler+0x1c>)
    14ce:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    14d0:	4b05      	ldr	r3, [pc, #20]	; (14e8 <WDT_Handler+0x20>)
    14d2:	681b      	ldr	r3, [r3, #0]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d002      	beq.n	14de <WDT_Handler+0x16>
		wdt_early_warning_callback();
    14d8:	4b03      	ldr	r3, [pc, #12]	; (14e8 <WDT_Handler+0x20>)
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	4798      	blx	r3
	}
}
    14de:	46c0      	nop			; (mov r8, r8)
    14e0:	46bd      	mov	sp, r7
    14e2:	bd80      	pop	{r7, pc}
    14e4:	000014ad 	.word	0x000014ad
    14e8:	200011cc 	.word	0x200011cc

000014ec <backlightCustomAdjust>:
//Backlight Settings
#define LED_MAX 225 //93%; limited by driver current limit per datasheet



struct BACKLIGHTCOLOR * backlightCustomAdjust(char refColor, int8_t adjustment){
    14ec:	b580      	push	{r7, lr}
    14ee:	b084      	sub	sp, #16
    14f0:	af00      	add	r7, sp, #0
    14f2:	0002      	movs	r2, r0
    14f4:	1dfb      	adds	r3, r7, #7
    14f6:	701a      	strb	r2, [r3, #0]
    14f8:	1dbb      	adds	r3, r7, #6
    14fa:	1c0a      	adds	r2, r1, #0
    14fc:	701a      	strb	r2, [r3, #0]
	uint8_t * colorPtr;
	uint8_t maxRef;
	
	switch (refColor){
    14fe:	1dfb      	adds	r3, r7, #7
    1500:	781b      	ldrb	r3, [r3, #0]
    1502:	2b62      	cmp	r3, #98	; 0x62
    1504:	d00f      	beq.n	1526 <backlightCustomAdjust+0x3a>
    1506:	dc02      	bgt.n	150e <backlightCustomAdjust+0x22>
    1508:	2b4c      	cmp	r3, #76	; 0x4c
    150a:	d01c      	beq.n	1546 <backlightCustomAdjust+0x5a>
    150c:	e023      	b.n	1556 <backlightCustomAdjust+0x6a>
    150e:	2b67      	cmp	r3, #103	; 0x67
    1510:	d011      	beq.n	1536 <backlightCustomAdjust+0x4a>
    1512:	2b72      	cmp	r3, #114	; 0x72
    1514:	d11f      	bne.n	1556 <backlightCustomAdjust+0x6a>
		case 'r':
			colorPtr = &colorCustom.red;
    1516:	4b29      	ldr	r3, [pc, #164]	; (15bc <backlightCustomAdjust+0xd0>)
    1518:	60fb      	str	r3, [r7, #12]
			maxRef = options.backlight_setting.maxColor;
    151a:	230b      	movs	r3, #11
    151c:	18fb      	adds	r3, r7, r3
    151e:	4a28      	ldr	r2, [pc, #160]	; (15c0 <backlightCustomAdjust+0xd4>)
    1520:	7c12      	ldrb	r2, [r2, #16]
    1522:	701a      	strb	r2, [r3, #0]
			break;
    1524:	e01e      	b.n	1564 <backlightCustomAdjust+0x78>
		case 'b':
			colorPtr = &colorCustom.blue;
    1526:	4b27      	ldr	r3, [pc, #156]	; (15c4 <backlightCustomAdjust+0xd8>)
    1528:	60fb      	str	r3, [r7, #12]
			maxRef = options.backlight_setting.maxColor;
    152a:	230b      	movs	r3, #11
    152c:	18fb      	adds	r3, r7, r3
    152e:	4a24      	ldr	r2, [pc, #144]	; (15c0 <backlightCustomAdjust+0xd4>)
    1530:	7c12      	ldrb	r2, [r2, #16]
    1532:	701a      	strb	r2, [r3, #0]
			break;
    1534:	e016      	b.n	1564 <backlightCustomAdjust+0x78>
		case 'g':
			colorPtr = &colorCustom.green;
    1536:	4b24      	ldr	r3, [pc, #144]	; (15c8 <backlightCustomAdjust+0xdc>)
    1538:	60fb      	str	r3, [r7, #12]
			maxRef = options.backlight_setting.maxColor;
    153a:	230b      	movs	r3, #11
    153c:	18fb      	adds	r3, r7, r3
    153e:	4a20      	ldr	r2, [pc, #128]	; (15c0 <backlightCustomAdjust+0xd4>)
    1540:	7c12      	ldrb	r2, [r2, #16]
    1542:	701a      	strb	r2, [r3, #0]
			break;	
    1544:	e00e      	b.n	1564 <backlightCustomAdjust+0x78>
		case 'L':
			colorPtr = &options.backlight_setting.brightness;
    1546:	4b21      	ldr	r3, [pc, #132]	; (15cc <backlightCustomAdjust+0xe0>)
    1548:	60fb      	str	r3, [r7, #12]
			maxRef = options.backlight_setting.maxBrightness;
    154a:	230b      	movs	r3, #11
    154c:	18fb      	adds	r3, r7, r3
    154e:	4a1c      	ldr	r2, [pc, #112]	; (15c0 <backlightCustomAdjust+0xd4>)
    1550:	7c52      	ldrb	r2, [r2, #17]
    1552:	701a      	strb	r2, [r3, #0]
			break;
    1554:	e006      	b.n	1564 <backlightCustomAdjust+0x78>
		default:
			colorPtr = &options.backlight_setting.brightness;
    1556:	4b1d      	ldr	r3, [pc, #116]	; (15cc <backlightCustomAdjust+0xe0>)
    1558:	60fb      	str	r3, [r7, #12]
			maxRef = options.backlight_setting.maxBrightness;
    155a:	230b      	movs	r3, #11
    155c:	18fb      	adds	r3, r7, r3
    155e:	4a18      	ldr	r2, [pc, #96]	; (15c0 <backlightCustomAdjust+0xd4>)
    1560:	7c52      	ldrb	r2, [r2, #17]
    1562:	701a      	strb	r2, [r3, #0]
	}
	
	if (adjustment>0){
    1564:	1dbb      	adds	r3, r7, #6
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	b25b      	sxtb	r3, r3
    156a:	2b00      	cmp	r3, #0
    156c:	dd0f      	ble.n	158e <backlightCustomAdjust+0xa2>
		if (*colorPtr<maxRef){
    156e:	68fb      	ldr	r3, [r7, #12]
    1570:	781b      	ldrb	r3, [r3, #0]
    1572:	220b      	movs	r2, #11
    1574:	18ba      	adds	r2, r7, r2
    1576:	7812      	ldrb	r2, [r2, #0]
    1578:	429a      	cmp	r2, r3
    157a:	d918      	bls.n	15ae <backlightCustomAdjust+0xc2>
			*colorPtr = *colorPtr+adjustment;
    157c:	68fb      	ldr	r3, [r7, #12]
    157e:	781a      	ldrb	r2, [r3, #0]
    1580:	1dbb      	adds	r3, r7, #6
    1582:	781b      	ldrb	r3, [r3, #0]
    1584:	18d3      	adds	r3, r2, r3
    1586:	b2da      	uxtb	r2, r3
    1588:	68fb      	ldr	r3, [r7, #12]
    158a:	701a      	strb	r2, [r3, #0]
    158c:	e00f      	b.n	15ae <backlightCustomAdjust+0xc2>
		}
	}else if (adjustment<0){
    158e:	1dbb      	adds	r3, r7, #6
    1590:	781b      	ldrb	r3, [r3, #0]
    1592:	2b7f      	cmp	r3, #127	; 0x7f
    1594:	d90b      	bls.n	15ae <backlightCustomAdjust+0xc2>
		if (*colorPtr>0){
    1596:	68fb      	ldr	r3, [r7, #12]
    1598:	781b      	ldrb	r3, [r3, #0]
    159a:	2b00      	cmp	r3, #0
    159c:	d007      	beq.n	15ae <backlightCustomAdjust+0xc2>
			*colorPtr = *colorPtr+adjustment;
    159e:	68fb      	ldr	r3, [r7, #12]
    15a0:	781a      	ldrb	r2, [r3, #0]
    15a2:	1dbb      	adds	r3, r7, #6
    15a4:	781b      	ldrb	r3, [r3, #0]
    15a6:	18d3      	adds	r3, r2, r3
    15a8:	b2da      	uxtb	r2, r3
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	701a      	strb	r2, [r3, #0]
		}
	}
	
	backlightOn();
    15ae:	4b08      	ldr	r3, [pc, #32]	; (15d0 <backlightCustomAdjust+0xe4>)
    15b0:	4798      	blx	r3
	
	return &colorCustom;
    15b2:	4b08      	ldr	r3, [pc, #32]	; (15d4 <backlightCustomAdjust+0xe8>)
	
}
    15b4:	0018      	movs	r0, r3
    15b6:	46bd      	mov	sp, r7
    15b8:	b004      	add	sp, #16
    15ba:	bd80      	pop	{r7, pc}
    15bc:	20000014 	.word	0x20000014
    15c0:	200034a8 	.word	0x200034a8
    15c4:	20000015 	.word	0x20000015
    15c8:	20000016 	.word	0x20000016
    15cc:	200034b4 	.word	0x200034b4
    15d0:	000016b9 	.word	0x000016b9
    15d4:	20000010 	.word	0x20000010

000015d8 <backlightColorToggle>:


void backlightColorToggle(void){
    15d8:	b580      	push	{r7, lr}
    15da:	af00      	add	r7, sp, #0
	options.backlight_setting.colorRef++;
    15dc:	4b08      	ldr	r3, [pc, #32]	; (1600 <backlightColorToggle+0x28>)
    15de:	7c9b      	ldrb	r3, [r3, #18]
    15e0:	3301      	adds	r3, #1
    15e2:	b2da      	uxtb	r2, r3
    15e4:	4b06      	ldr	r3, [pc, #24]	; (1600 <backlightColorToggle+0x28>)
    15e6:	749a      	strb	r2, [r3, #18]
	if (options.backlight_setting.colorRef>=(sizeof(colorOptions)/sizeof(&colorCustom))){
    15e8:	4b05      	ldr	r3, [pc, #20]	; (1600 <backlightColorToggle+0x28>)
    15ea:	7c9b      	ldrb	r3, [r3, #18]
    15ec:	2b06      	cmp	r3, #6
    15ee:	d902      	bls.n	15f6 <backlightColorToggle+0x1e>
		options.backlight_setting.colorRef = 1;
    15f0:	4b03      	ldr	r3, [pc, #12]	; (1600 <backlightColorToggle+0x28>)
    15f2:	2201      	movs	r2, #1
    15f4:	749a      	strb	r2, [r3, #18]
	}
	backlightOn();
    15f6:	4b03      	ldr	r3, [pc, #12]	; (1604 <backlightColorToggle+0x2c>)
    15f8:	4798      	blx	r3
	
}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	46bd      	mov	sp, r7
    15fe:	bd80      	pop	{r7, pc}
    1600:	200034a8 	.word	0x200034a8
    1604:	000016b9 	.word	0x000016b9

00001608 <backlightPlus>:

void backlightPlus(void){
    1608:	b580      	push	{r7, lr}
    160a:	af00      	add	r7, sp, #0
	if (options.backlight_setting.brightness<options.backlight_setting.maxBrightness){
    160c:	4b08      	ldr	r3, [pc, #32]	; (1630 <backlightPlus+0x28>)
    160e:	7b1a      	ldrb	r2, [r3, #12]
    1610:	4b07      	ldr	r3, [pc, #28]	; (1630 <backlightPlus+0x28>)
    1612:	7c5b      	ldrb	r3, [r3, #17]
    1614:	429a      	cmp	r2, r3
    1616:	d205      	bcs.n	1624 <backlightPlus+0x1c>
		options.backlight_setting.brightness = options.backlight_setting.brightness+1;
    1618:	4b05      	ldr	r3, [pc, #20]	; (1630 <backlightPlus+0x28>)
    161a:	7b1b      	ldrb	r3, [r3, #12]
    161c:	3301      	adds	r3, #1
    161e:	b2da      	uxtb	r2, r3
    1620:	4b03      	ldr	r3, [pc, #12]	; (1630 <backlightPlus+0x28>)
    1622:	731a      	strb	r2, [r3, #12]
	}	
	backlightOn();
    1624:	4b03      	ldr	r3, [pc, #12]	; (1634 <backlightPlus+0x2c>)
    1626:	4798      	blx	r3
}
    1628:	46c0      	nop			; (mov r8, r8)
    162a:	46bd      	mov	sp, r7
    162c:	bd80      	pop	{r7, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	200034a8 	.word	0x200034a8
    1634:	000016b9 	.word	0x000016b9

00001638 <backlightMinus>:

void backlightMinus(void){	
    1638:	b580      	push	{r7, lr}
    163a:	af00      	add	r7, sp, #0
	if (options.backlight_setting.brightness>0){
    163c:	4b07      	ldr	r3, [pc, #28]	; (165c <backlightMinus+0x24>)
    163e:	7b1b      	ldrb	r3, [r3, #12]
    1640:	2b00      	cmp	r3, #0
    1642:	d005      	beq.n	1650 <backlightMinus+0x18>
		options.backlight_setting.brightness = options.backlight_setting.brightness-1;
    1644:	4b05      	ldr	r3, [pc, #20]	; (165c <backlightMinus+0x24>)
    1646:	7b1b      	ldrb	r3, [r3, #12]
    1648:	3b01      	subs	r3, #1
    164a:	b2da      	uxtb	r2, r3
    164c:	4b03      	ldr	r3, [pc, #12]	; (165c <backlightMinus+0x24>)
    164e:	731a      	strb	r2, [r3, #12]
	}
	backlightOn();
    1650:	4b03      	ldr	r3, [pc, #12]	; (1660 <backlightMinus+0x28>)
    1652:	4798      	blx	r3
	
}
    1654:	46c0      	nop			; (mov r8, r8)
    1656:	46bd      	mov	sp, r7
    1658:	bd80      	pop	{r7, pc}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	200034a8 	.word	0x200034a8
    1660:	000016b9 	.word	0x000016b9

00001664 <backlightLevelToggle>:

void backlightLevelToggle(void){
    1664:	b580      	push	{r7, lr}
    1666:	af00      	add	r7, sp, #0
	options.backlight_setting.brightness = options.backlight_setting.brightness+1;
    1668:	4b09      	ldr	r3, [pc, #36]	; (1690 <backlightLevelToggle+0x2c>)
    166a:	7b1b      	ldrb	r3, [r3, #12]
    166c:	3301      	adds	r3, #1
    166e:	b2da      	uxtb	r2, r3
    1670:	4b07      	ldr	r3, [pc, #28]	; (1690 <backlightLevelToggle+0x2c>)
    1672:	731a      	strb	r2, [r3, #12]
	
	if (options.backlight_setting.brightness>options.backlight_setting.maxBrightness){
    1674:	4b06      	ldr	r3, [pc, #24]	; (1690 <backlightLevelToggle+0x2c>)
    1676:	7b1a      	ldrb	r2, [r3, #12]
    1678:	4b05      	ldr	r3, [pc, #20]	; (1690 <backlightLevelToggle+0x2c>)
    167a:	7c5b      	ldrb	r3, [r3, #17]
    167c:	429a      	cmp	r2, r3
    167e:	d902      	bls.n	1686 <backlightLevelToggle+0x22>
		options.backlight_setting.brightness = 0;
    1680:	4b03      	ldr	r3, [pc, #12]	; (1690 <backlightLevelToggle+0x2c>)
    1682:	2200      	movs	r2, #0
    1684:	731a      	strb	r2, [r3, #12]
	}
	backlightOn();
    1686:	4b03      	ldr	r3, [pc, #12]	; (1694 <backlightLevelToggle+0x30>)
    1688:	4798      	blx	r3
	
}
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	46bd      	mov	sp, r7
    168e:	bd80      	pop	{r7, pc}
    1690:	200034a8 	.word	0x200034a8
    1694:	000016b9 	.word	0x000016b9

00001698 <backlightGetCurrentColor>:

char* backlightGetCurrentColor(void){
    1698:	b580      	push	{r7, lr}
    169a:	af00      	add	r7, sp, #0
	return colorOptions[options.backlight_setting.colorRef]->colorStringPtr;	
    169c:	4b04      	ldr	r3, [pc, #16]	; (16b0 <backlightGetCurrentColor+0x18>)
    169e:	7c9b      	ldrb	r3, [r3, #18]
    16a0:	001a      	movs	r2, r3
    16a2:	4b04      	ldr	r3, [pc, #16]	; (16b4 <backlightGetCurrentColor+0x1c>)
    16a4:	0092      	lsls	r2, r2, #2
    16a6:	58d3      	ldr	r3, [r2, r3]
    16a8:	681b      	ldr	r3, [r3, #0]
}
    16aa:	0018      	movs	r0, r3
    16ac:	46bd      	mov	sp, r7
    16ae:	bd80      	pop	{r7, pc}
    16b0:	200034a8 	.word	0x200034a8
    16b4:	20000048 	.word	0x20000048

000016b8 <backlightOn>:

void backlightOn(void){
    16b8:	b580      	push	{r7, lr}
    16ba:	af00      	add	r7, sp, #0
	backlight_level(&options.backlight_setting);	
    16bc:	4b03      	ldr	r3, [pc, #12]	; (16cc <backlightOn+0x14>)
    16be:	0018      	movs	r0, r3
    16c0:	4b03      	ldr	r3, [pc, #12]	; (16d0 <backlightOn+0x18>)
    16c2:	4798      	blx	r3
}
    16c4:	46c0      	nop			; (mov r8, r8)
    16c6:	46bd      	mov	sp, r7
    16c8:	bd80      	pop	{r7, pc}
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	200034b4 	.word	0x200034b4
    16d0:	000016d5 	.word	0x000016d5

000016d4 <backlight_level>:


void backlight_level(struct BACKLIGHT_SETTING *blset){
    16d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d6:	b091      	sub	sp, #68	; 0x44
    16d8:	af00      	add	r7, sp, #0
    16da:	61f8      	str	r0, [r7, #28]
    16dc:	466b      	mov	r3, sp
    16de:	61bb      	str	r3, [r7, #24]
	uint8_t u8blue, u8green, u8red;
	float fred, fblue, fgreen;
	float scale;
	
	fred = colorOptions[blset->colorRef]->red;
    16e0:	69fb      	ldr	r3, [r7, #28]
    16e2:	799b      	ldrb	r3, [r3, #6]
    16e4:	001a      	movs	r2, r3
    16e6:	4b97      	ldr	r3, [pc, #604]	; (1944 <backlight_level+0x270>)
    16e8:	0092      	lsls	r2, r2, #2
    16ea:	58d3      	ldr	r3, [r2, r3]
    16ec:	791a      	ldrb	r2, [r3, #4]
    16ee:	4b96      	ldr	r3, [pc, #600]	; (1948 <backlight_level+0x274>)
    16f0:	0010      	movs	r0, r2
    16f2:	4798      	blx	r3
    16f4:	1c03      	adds	r3, r0, #0
    16f6:	63bb      	str	r3, [r7, #56]	; 0x38
	fgreen = colorOptions[blset->colorRef]->green;
    16f8:	69fb      	ldr	r3, [r7, #28]
    16fa:	799b      	ldrb	r3, [r3, #6]
    16fc:	001a      	movs	r2, r3
    16fe:	4b91      	ldr	r3, [pc, #580]	; (1944 <backlight_level+0x270>)
    1700:	0092      	lsls	r2, r2, #2
    1702:	58d3      	ldr	r3, [r2, r3]
    1704:	799a      	ldrb	r2, [r3, #6]
    1706:	4b90      	ldr	r3, [pc, #576]	; (1948 <backlight_level+0x274>)
    1708:	0010      	movs	r0, r2
    170a:	4798      	blx	r3
    170c:	1c03      	adds	r3, r0, #0
    170e:	637b      	str	r3, [r7, #52]	; 0x34
	fblue = colorOptions[blset->colorRef]->blue;
    1710:	69fb      	ldr	r3, [r7, #28]
    1712:	799b      	ldrb	r3, [r3, #6]
    1714:	001a      	movs	r2, r3
    1716:	4b8b      	ldr	r3, [pc, #556]	; (1944 <backlight_level+0x270>)
    1718:	0092      	lsls	r2, r2, #2
    171a:	58d3      	ldr	r3, [r2, r3]
    171c:	795a      	ldrb	r2, [r3, #5]
    171e:	4b8a      	ldr	r3, [pc, #552]	; (1948 <backlight_level+0x274>)
    1720:	0010      	movs	r0, r2
    1722:	4798      	blx	r3
    1724:	1c03      	adds	r3, r0, #0
    1726:	633b      	str	r3, [r7, #48]	; 0x30
	
	
	
	scale = 1/(fred+fgreen+fblue);
    1728:	4b88      	ldr	r3, [pc, #544]	; (194c <backlight_level+0x278>)
    172a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    172c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    172e:	4798      	blx	r3
    1730:	1c03      	adds	r3, r0, #0
    1732:	1c1a      	adds	r2, r3, #0
    1734:	4b85      	ldr	r3, [pc, #532]	; (194c <backlight_level+0x278>)
    1736:	6b39      	ldr	r1, [r7, #48]	; 0x30
    1738:	1c10      	adds	r0, r2, #0
    173a:	4798      	blx	r3
    173c:	1c03      	adds	r3, r0, #0
    173e:	1c1a      	adds	r2, r3, #0
    1740:	4b83      	ldr	r3, [pc, #524]	; (1950 <backlight_level+0x27c>)
    1742:	1c11      	adds	r1, r2, #0
    1744:	20fe      	movs	r0, #254	; 0xfe
    1746:	0580      	lsls	r0, r0, #22
    1748:	4798      	blx	r3
    174a:	1c03      	adds	r3, r0, #0
    174c:	62fb      	str	r3, [r7, #44]	; 0x2c
	scale = scale*blset->brightness/blset->maxBrightness;
    174e:	69fb      	ldr	r3, [r7, #28]
    1750:	781b      	ldrb	r3, [r3, #0]
    1752:	001a      	movs	r2, r3
    1754:	4b7f      	ldr	r3, [pc, #508]	; (1954 <backlight_level+0x280>)
    1756:	0010      	movs	r0, r2
    1758:	4798      	blx	r3
    175a:	1c02      	adds	r2, r0, #0
    175c:	4b7e      	ldr	r3, [pc, #504]	; (1958 <backlight_level+0x284>)
    175e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1760:	1c10      	adds	r0, r2, #0
    1762:	4798      	blx	r3
    1764:	1c03      	adds	r3, r0, #0
    1766:	1c1c      	adds	r4, r3, #0
    1768:	69fb      	ldr	r3, [r7, #28]
    176a:	795b      	ldrb	r3, [r3, #5]
    176c:	001a      	movs	r2, r3
    176e:	4b79      	ldr	r3, [pc, #484]	; (1954 <backlight_level+0x280>)
    1770:	0010      	movs	r0, r2
    1772:	4798      	blx	r3
    1774:	1c02      	adds	r2, r0, #0
    1776:	4b76      	ldr	r3, [pc, #472]	; (1950 <backlight_level+0x27c>)
    1778:	1c11      	adds	r1, r2, #0
    177a:	1c20      	adds	r0, r4, #0
    177c:	4798      	blx	r3
    177e:	1c03      	adds	r3, r0, #0
    1780:	62fb      	str	r3, [r7, #44]	; 0x2c
	fred = scale*fred;
    1782:	4b75      	ldr	r3, [pc, #468]	; (1958 <backlight_level+0x284>)
    1784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1786:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1788:	4798      	blx	r3
    178a:	1c03      	adds	r3, r0, #0
    178c:	63bb      	str	r3, [r7, #56]	; 0x38
	fblue = scale*fblue;
    178e:	4b72      	ldr	r3, [pc, #456]	; (1958 <backlight_level+0x284>)
    1790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1792:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1794:	4798      	blx	r3
    1796:	1c03      	adds	r3, r0, #0
    1798:	633b      	str	r3, [r7, #48]	; 0x30
	fgreen = scale*fgreen;
    179a:	4b6f      	ldr	r3, [pc, #444]	; (1958 <backlight_level+0x284>)
    179c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    179e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    17a0:	4798      	blx	r3
    17a2:	1c03      	adds	r3, r0, #0
    17a4:	637b      	str	r3, [r7, #52]	; 0x34
	
	u8red = fred*LED_MAX;
    17a6:	4b6c      	ldr	r3, [pc, #432]	; (1958 <backlight_level+0x284>)
    17a8:	496c      	ldr	r1, [pc, #432]	; (195c <backlight_level+0x288>)
    17aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    17ac:	4798      	blx	r3
    17ae:	1c03      	adds	r3, r0, #0
    17b0:	1c1a      	adds	r2, r3, #0
    17b2:	2326      	movs	r3, #38	; 0x26
    17b4:	2118      	movs	r1, #24
    17b6:	1879      	adds	r1, r7, r1
    17b8:	18cc      	adds	r4, r1, r3
    17ba:	4b69      	ldr	r3, [pc, #420]	; (1960 <backlight_level+0x28c>)
    17bc:	1c10      	adds	r0, r2, #0
    17be:	4798      	blx	r3
    17c0:	0003      	movs	r3, r0
    17c2:	7023      	strb	r3, [r4, #0]
	u8blue = fblue*LED_MAX;
    17c4:	4b64      	ldr	r3, [pc, #400]	; (1958 <backlight_level+0x284>)
    17c6:	4965      	ldr	r1, [pc, #404]	; (195c <backlight_level+0x288>)
    17c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
    17ca:	4798      	blx	r3
    17cc:	1c03      	adds	r3, r0, #0
    17ce:	1c1a      	adds	r2, r3, #0
    17d0:	2327      	movs	r3, #39	; 0x27
    17d2:	2118      	movs	r1, #24
    17d4:	1879      	adds	r1, r7, r1
    17d6:	18cc      	adds	r4, r1, r3
    17d8:	4b61      	ldr	r3, [pc, #388]	; (1960 <backlight_level+0x28c>)
    17da:	1c10      	adds	r0, r2, #0
    17dc:	4798      	blx	r3
    17de:	0003      	movs	r3, r0
    17e0:	7023      	strb	r3, [r4, #0]
	u8green = fgreen*LED_MAX;
    17e2:	4b5d      	ldr	r3, [pc, #372]	; (1958 <backlight_level+0x284>)
    17e4:	495d      	ldr	r1, [pc, #372]	; (195c <backlight_level+0x288>)
    17e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
    17e8:	4798      	blx	r3
    17ea:	1c03      	adds	r3, r0, #0
    17ec:	1c1a      	adds	r2, r3, #0
    17ee:	2313      	movs	r3, #19
    17f0:	2118      	movs	r1, #24
    17f2:	1879      	adds	r1, r7, r1
    17f4:	18cc      	adds	r4, r1, r3
    17f6:	4b5a      	ldr	r3, [pc, #360]	; (1960 <backlight_level+0x28c>)
    17f8:	1c10      	adds	r0, r2, #0
    17fa:	4798      	blx	r3
    17fc:	0003      	movs	r3, r0
    17fe:	7023      	strb	r3, [r4, #0]
	
	// Precaution to not put too much current through PWM driver
	if (u8red>LED_MAX){u8red = LED_MAX;}
    1800:	2326      	movs	r3, #38	; 0x26
    1802:	2218      	movs	r2, #24
    1804:	4694      	mov	ip, r2
    1806:	44bc      	add	ip, r7
    1808:	4463      	add	r3, ip
    180a:	781b      	ldrb	r3, [r3, #0]
    180c:	2be1      	cmp	r3, #225	; 0xe1
    180e:	d906      	bls.n	181e <backlight_level+0x14a>
    1810:	2326      	movs	r3, #38	; 0x26
    1812:	2218      	movs	r2, #24
    1814:	4694      	mov	ip, r2
    1816:	44bc      	add	ip, r7
    1818:	4463      	add	r3, ip
    181a:	22e1      	movs	r2, #225	; 0xe1
    181c:	701a      	strb	r2, [r3, #0]
	if (u8blue>LED_MAX){u8blue = LED_MAX;}
    181e:	2327      	movs	r3, #39	; 0x27
    1820:	2218      	movs	r2, #24
    1822:	4694      	mov	ip, r2
    1824:	44bc      	add	ip, r7
    1826:	4463      	add	r3, ip
    1828:	781b      	ldrb	r3, [r3, #0]
    182a:	2be1      	cmp	r3, #225	; 0xe1
    182c:	d906      	bls.n	183c <backlight_level+0x168>
    182e:	2327      	movs	r3, #39	; 0x27
    1830:	2218      	movs	r2, #24
    1832:	4694      	mov	ip, r2
    1834:	44bc      	add	ip, r7
    1836:	4463      	add	r3, ip
    1838:	22e1      	movs	r2, #225	; 0xe1
    183a:	701a      	strb	r2, [r3, #0]
	if (u8blue>LED_MAX){u8blue = LED_MAX;}
    183c:	2327      	movs	r3, #39	; 0x27
    183e:	2218      	movs	r2, #24
    1840:	4694      	mov	ip, r2
    1842:	44bc      	add	ip, r7
    1844:	4463      	add	r3, ip
    1846:	781b      	ldrb	r3, [r3, #0]
    1848:	2be1      	cmp	r3, #225	; 0xe1
    184a:	d906      	bls.n	185a <backlight_level+0x186>
    184c:	2327      	movs	r3, #39	; 0x27
    184e:	2218      	movs	r2, #24
    1850:	4694      	mov	ip, r2
    1852:	44bc      	add	ip, r7
    1854:	4463      	add	r3, ip
    1856:	22e1      	movs	r2, #225	; 0xe1
    1858:	701a      	strb	r2, [r3, #0]
	
	uint16_t mes_len = 10;
    185a:	2310      	movs	r3, #16
    185c:	2218      	movs	r2, #24
    185e:	4694      	mov	ip, r2
    1860:	44bc      	add	ip, r7
    1862:	4463      	add	r3, ip
    1864:	220a      	movs	r2, #10
    1866:	801a      	strh	r2, [r3, #0]
	uint8_t temp_buf[mes_len];
    1868:	2310      	movs	r3, #16
    186a:	2218      	movs	r2, #24
    186c:	4694      	mov	ip, r2
    186e:	44bc      	add	ip, r7
    1870:	4463      	add	r3, ip
    1872:	881b      	ldrh	r3, [r3, #0]
    1874:	001a      	movs	r2, r3
    1876:	3a01      	subs	r2, #1
    1878:	627a      	str	r2, [r7, #36]	; 0x24
    187a:	60bb      	str	r3, [r7, #8]
    187c:	2200      	movs	r2, #0
    187e:	60fa      	str	r2, [r7, #12]
    1880:	68b8      	ldr	r0, [r7, #8]
    1882:	68f9      	ldr	r1, [r7, #12]
    1884:	0002      	movs	r2, r0
    1886:	0f52      	lsrs	r2, r2, #29
    1888:	000c      	movs	r4, r1
    188a:	00e4      	lsls	r4, r4, #3
    188c:	617c      	str	r4, [r7, #20]
    188e:	697c      	ldr	r4, [r7, #20]
    1890:	4314      	orrs	r4, r2
    1892:	617c      	str	r4, [r7, #20]
    1894:	0002      	movs	r2, r0
    1896:	00d2      	lsls	r2, r2, #3
    1898:	613a      	str	r2, [r7, #16]
    189a:	603b      	str	r3, [r7, #0]
    189c:	2200      	movs	r2, #0
    189e:	607a      	str	r2, [r7, #4]
    18a0:	6838      	ldr	r0, [r7, #0]
    18a2:	6879      	ldr	r1, [r7, #4]
    18a4:	0002      	movs	r2, r0
    18a6:	0f52      	lsrs	r2, r2, #29
    18a8:	000c      	movs	r4, r1
    18aa:	00e6      	lsls	r6, r4, #3
    18ac:	4316      	orrs	r6, r2
    18ae:	0002      	movs	r2, r0
    18b0:	00d5      	lsls	r5, r2, #3
    18b2:	3307      	adds	r3, #7
    18b4:	08db      	lsrs	r3, r3, #3
    18b6:	00db      	lsls	r3, r3, #3
    18b8:	466a      	mov	r2, sp
    18ba:	1ad3      	subs	r3, r2, r3
    18bc:	469d      	mov	sp, r3
    18be:	466b      	mov	r3, sp
    18c0:	3300      	adds	r3, #0
    18c2:	623b      	str	r3, [r7, #32]
	temp_buf[0]= 0x80;  //control register 0b10000000
    18c4:	6a3b      	ldr	r3, [r7, #32]
    18c6:	2280      	movs	r2, #128	; 0x80
    18c8:	701a      	strb	r2, [r3, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    18ca:	6a3b      	ldr	r3, [r7, #32]
    18cc:	2280      	movs	r2, #128	; 0x80
    18ce:	705a      	strb	r2, [r3, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    18d0:	6a3b      	ldr	r3, [r7, #32]
    18d2:	2208      	movs	r2, #8
    18d4:	709a      	strb	r2, [r3, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    18d6:	6a3b      	ldr	r3, [r7, #32]
    18d8:	2227      	movs	r2, #39	; 0x27
    18da:	2118      	movs	r1, #24
    18dc:	468c      	mov	ip, r1
    18de:	44bc      	add	ip, r7
    18e0:	4462      	add	r2, ip
    18e2:	7812      	ldrb	r2, [r2, #0]
    18e4:	70da      	strb	r2, [r3, #3]
	temp_buf[4]= u8green; //PWM1 - green
    18e6:	6a3b      	ldr	r3, [r7, #32]
    18e8:	2213      	movs	r2, #19
    18ea:	2118      	movs	r1, #24
    18ec:	468c      	mov	ip, r1
    18ee:	44bc      	add	ip, r7
    18f0:	4462      	add	r2, ip
    18f2:	7812      	ldrb	r2, [r2, #0]
    18f4:	711a      	strb	r2, [r3, #4]
	temp_buf[5]= u8red; //PWM2 - red
    18f6:	6a3b      	ldr	r3, [r7, #32]
    18f8:	2226      	movs	r2, #38	; 0x26
    18fa:	2118      	movs	r1, #24
    18fc:	468c      	mov	ip, r1
    18fe:	44bc      	add	ip, r7
    1900:	4462      	add	r2, ip
    1902:	7812      	ldrb	r2, [r2, #0]
    1904:	715a      	strb	r2, [r3, #5]
	temp_buf[6]= 0x00; //PWM3
    1906:	6a3b      	ldr	r3, [r7, #32]
    1908:	2200      	movs	r2, #0
    190a:	719a      	strb	r2, [r3, #6]
	temp_buf[7]= 0x00; //GRPPWM
    190c:	6a3b      	ldr	r3, [r7, #32]
    190e:	2200      	movs	r2, #0
    1910:	71da      	strb	r2, [r3, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    1912:	6a3b      	ldr	r3, [r7, #32]
    1914:	2200      	movs	r2, #0
    1916:	721a      	strb	r2, [r3, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    1918:	6a3b      	ldr	r3, [r7, #32]
    191a:	222a      	movs	r2, #42	; 0x2a
    191c:	725a      	strb	r2, [r3, #9]
	
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    191e:	6a3a      	ldr	r2, [r7, #32]
    1920:	2310      	movs	r3, #16
    1922:	2118      	movs	r1, #24
    1924:	468c      	mov	ip, r1
    1926:	44bc      	add	ip, r7
    1928:	4463      	add	r3, ip
    192a:	881b      	ldrh	r3, [r3, #0]
    192c:	b2db      	uxtb	r3, r3
    192e:	2162      	movs	r1, #98	; 0x62
    1930:	2001      	movs	r0, #1
    1932:	4c0c      	ldr	r4, [pc, #48]	; (1964 <backlight_level+0x290>)
    1934:	47a0      	blx	r4
    1936:	69bb      	ldr	r3, [r7, #24]
    1938:	469d      	mov	sp, r3
	

}
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	46bd      	mov	sp, r7
    193e:	b011      	add	sp, #68	; 0x44
    1940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1942:	46c0      	nop			; (mov r8, r8)
    1944:	20000048 	.word	0x20000048
    1948:	00021e31 	.word	0x00021e31
    194c:	000210d5 	.word	0x000210d5
    1950:	000213f9 	.word	0x000213f9
    1954:	00021d91 	.word	0x00021d91
    1958:	000217d9 	.word	0x000217d9
    195c:	43610000 	.word	0x43610000
    1960:	00021069 	.word	0x00021069
    1964:	00010669 	.word	0x00010669

00001968 <backlightOff>:


void backlightOff(void){
    1968:	b5f0      	push	{r4, r5, r6, r7, lr}
    196a:	46c6      	mov	lr, r8
    196c:	b500      	push	{lr}
    196e:	b08a      	sub	sp, #40	; 0x28
    1970:	af00      	add	r7, sp, #0
    1972:	4668      	mov	r0, sp
    1974:	6078      	str	r0, [r7, #4]
		
	uint16_t mes_len = 10;
    1976:	200e      	movs	r0, #14
    1978:	2318      	movs	r3, #24
    197a:	469c      	mov	ip, r3
    197c:	44bc      	add	ip, r7
    197e:	4460      	add	r0, ip
    1980:	230a      	movs	r3, #10
    1982:	469c      	mov	ip, r3
    1984:	4663      	mov	r3, ip
    1986:	8003      	strh	r3, [r0, #0]
	uint8_t temp_buf[mes_len];
    1988:	230e      	movs	r3, #14
    198a:	2018      	movs	r0, #24
    198c:	1838      	adds	r0, r7, r0
    198e:	18c0      	adds	r0, r0, r3
    1990:	8800      	ldrh	r0, [r0, #0]
    1992:	4684      	mov	ip, r0
    1994:	2301      	movs	r3, #1
    1996:	425b      	negs	r3, r3
    1998:	4698      	mov	r8, r3
    199a:	44c4      	add	ip, r8
    199c:	4663      	mov	r3, ip
    199e:	623b      	str	r3, [r7, #32]
    19a0:	6138      	str	r0, [r7, #16]
    19a2:	2300      	movs	r3, #0
    19a4:	617b      	str	r3, [r7, #20]
    19a6:	693b      	ldr	r3, [r7, #16]
    19a8:	0f5b      	lsrs	r3, r3, #29
    19aa:	469c      	mov	ip, r3
    19ac:	697b      	ldr	r3, [r7, #20]
    19ae:	00da      	lsls	r2, r3, #3
    19b0:	4663      	mov	r3, ip
    19b2:	431a      	orrs	r2, r3
    19b4:	693b      	ldr	r3, [r7, #16]
    19b6:	00d9      	lsls	r1, r3, #3
    19b8:	0005      	movs	r5, r0
    19ba:	2200      	movs	r2, #0
    19bc:	0016      	movs	r6, r2
    19be:	0f6a      	lsrs	r2, r5, #29
    19c0:	00f3      	lsls	r3, r6, #3
    19c2:	60fb      	str	r3, [r7, #12]
    19c4:	68fb      	ldr	r3, [r7, #12]
    19c6:	4313      	orrs	r3, r2
    19c8:	60fb      	str	r3, [r7, #12]
    19ca:	00eb      	lsls	r3, r5, #3
    19cc:	60bb      	str	r3, [r7, #8]
    19ce:	0003      	movs	r3, r0
    19d0:	3307      	adds	r3, #7
    19d2:	08db      	lsrs	r3, r3, #3
    19d4:	00db      	lsls	r3, r3, #3
    19d6:	466a      	mov	r2, sp
    19d8:	1ad3      	subs	r3, r2, r3
    19da:	469d      	mov	sp, r3
    19dc:	466b      	mov	r3, sp
    19de:	3300      	adds	r3, #0
    19e0:	61fb      	str	r3, [r7, #28]
	temp_buf[0]= 0x80;  //control register 0b10000000
    19e2:	69fb      	ldr	r3, [r7, #28]
    19e4:	2280      	movs	r2, #128	; 0x80
    19e6:	701a      	strb	r2, [r3, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    19e8:	69fb      	ldr	r3, [r7, #28]
    19ea:	2280      	movs	r2, #128	; 0x80
    19ec:	705a      	strb	r2, [r3, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    19ee:	69fb      	ldr	r3, [r7, #28]
    19f0:	2208      	movs	r2, #8
    19f2:	709a      	strb	r2, [r3, #2]
	temp_buf[3]= 0x00; //PWM0 - blue
    19f4:	69fb      	ldr	r3, [r7, #28]
    19f6:	2200      	movs	r2, #0
    19f8:	70da      	strb	r2, [r3, #3]
	temp_buf[4]= 0x00; //PWM1 - green
    19fa:	69fb      	ldr	r3, [r7, #28]
    19fc:	2200      	movs	r2, #0
    19fe:	711a      	strb	r2, [r3, #4]
	temp_buf[5]= 0x00; //PWM2 - red
    1a00:	69fb      	ldr	r3, [r7, #28]
    1a02:	2200      	movs	r2, #0
    1a04:	715a      	strb	r2, [r3, #5]
	temp_buf[6]= 0x00; //PWM3
    1a06:	69fb      	ldr	r3, [r7, #28]
    1a08:	2200      	movs	r2, #0
    1a0a:	719a      	strb	r2, [r3, #6]
	temp_buf[7]= 0x00; //GRPPWM
    1a0c:	69fb      	ldr	r3, [r7, #28]
    1a0e:	2200      	movs	r2, #0
    1a10:	71da      	strb	r2, [r3, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    1a12:	69fb      	ldr	r3, [r7, #28]
    1a14:	2200      	movs	r2, #0
    1a16:	721a      	strb	r2, [r3, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    1a18:	69fb      	ldr	r3, [r7, #28]
    1a1a:	222a      	movs	r2, #42	; 0x2a
    1a1c:	725a      	strb	r2, [r3, #9]
	
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    1a1e:	69fa      	ldr	r2, [r7, #28]
    1a20:	230e      	movs	r3, #14
    1a22:	2118      	movs	r1, #24
    1a24:	468c      	mov	ip, r1
    1a26:	44bc      	add	ip, r7
    1a28:	4463      	add	r3, ip
    1a2a:	881b      	ldrh	r3, [r3, #0]
    1a2c:	b2db      	uxtb	r3, r3
    1a2e:	2162      	movs	r1, #98	; 0x62
    1a30:	2001      	movs	r0, #1
    1a32:	4c05      	ldr	r4, [pc, #20]	; (1a48 <backlightOff+0xe0>)
    1a34:	47a0      	blx	r4
    1a36:	687b      	ldr	r3, [r7, #4]
    1a38:	469d      	mov	sp, r3
	
}
    1a3a:	46c0      	nop			; (mov r8, r8)
    1a3c:	46bd      	mov	sp, r7
    1a3e:	b00a      	add	sp, #40	; 0x28
    1a40:	bc04      	pop	{r2}
    1a42:	4690      	mov	r8, r2
    1a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	00010669 	.word	0x00010669

00001a4c <setup_batt>:
extern uint32_t chargeCurrent;

//  Global Variables
extern struct OPTIONS options;

void setup_batt(void){
    1a4c:	b580      	push	{r7, lr}
    1a4e:	b082      	sub	sp, #8
    1a50:	af00      	add	r7, sp, #0
	uint16_t data1;
	
	//Read POR (powerup reset) status
	max17055_reg_read_write(readp, 0x00, &data1);
    1a52:	1dbb      	adds	r3, r7, #6
    1a54:	001a      	movs	r2, r3
    1a56:	2100      	movs	r1, #0
    1a58:	2000      	movs	r0, #0
    1a5a:	4b13      	ldr	r3, [pc, #76]	; (1aa8 <setup_batt+0x5c>)
    1a5c:	4798      	blx	r3
	data1=data1 & 0x0002;//bit two is POR
    1a5e:	1dbb      	adds	r3, r7, #6
    1a60:	881b      	ldrh	r3, [r3, #0]
    1a62:	2202      	movs	r2, #2
    1a64:	4013      	ands	r3, r2
    1a66:	b29a      	uxth	r2, r3
    1a68:	1dbb      	adds	r3, r7, #6
    1a6a:	801a      	strh	r2, [r3, #0]
	if (data1){
    1a6c:	1dbb      	adds	r3, r7, #6
    1a6e:	881b      	ldrh	r3, [r3, #0]
    1a70:	2b00      	cmp	r3, #0
    1a72:	d001      	beq.n	1a78 <setup_batt+0x2c>
		config_batt();
    1a74:	4b0d      	ldr	r3, [pc, #52]	; (1aac <setup_batt+0x60>)
    1a76:	4798      	blx	r3
	}
	max17055_reg_read_write(readp, 0x00, &data1);
    1a78:	1dbb      	adds	r3, r7, #6
    1a7a:	001a      	movs	r2, r3
    1a7c:	2100      	movs	r1, #0
    1a7e:	2000      	movs	r0, #0
    1a80:	4b09      	ldr	r3, [pc, #36]	; (1aa8 <setup_batt+0x5c>)
    1a82:	4798      	blx	r3
	data1=data1 & 0xFFFD;//clear POR bit
    1a84:	1dbb      	adds	r3, r7, #6
    1a86:	881b      	ldrh	r3, [r3, #0]
    1a88:	2202      	movs	r2, #2
    1a8a:	4393      	bics	r3, r2
    1a8c:	b29a      	uxth	r2, r3
    1a8e:	1dbb      	adds	r3, r7, #6
    1a90:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep ,0x00, &data1);
    1a92:	1dbb      	adds	r3, r7, #6
    1a94:	001a      	movs	r2, r3
    1a96:	2100      	movs	r1, #0
    1a98:	2001      	movs	r0, #1
    1a9a:	4b03      	ldr	r3, [pc, #12]	; (1aa8 <setup_batt+0x5c>)
    1a9c:	4798      	blx	r3
	
}
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	46bd      	mov	sp, r7
    1aa2:	b002      	add	sp, #8
    1aa4:	bd80      	pop	{r7, pc}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	000107a9 	.word	0x000107a9
    1aac:	00001ab1 	.word	0x00001ab1

00001ab0 <config_batt>:

void config_batt(void){
    1ab0:	b580      	push	{r7, lr}
    1ab2:	b082      	sub	sp, #8
    1ab4:	af00      	add	r7, sp, #0
	uint16_t data1;
	max17055_reg_read_write(readp, 0x3D, &data1);//check DNR bit 0x3D bit 1
    1ab6:	1dbb      	adds	r3, r7, #6
    1ab8:	001a      	movs	r2, r3
    1aba:	213d      	movs	r1, #61	; 0x3d
    1abc:	2000      	movs	r0, #0
    1abe:	4b4d      	ldr	r3, [pc, #308]	; (1bf4 <config_batt+0x144>)
    1ac0:	4798      	blx	r3
	while(data1 & 0x0001){
    1ac2:	e008      	b.n	1ad6 <config_batt+0x26>
		delay_ms(10);
    1ac4:	200a      	movs	r0, #10
    1ac6:	4b4c      	ldr	r3, [pc, #304]	; (1bf8 <config_batt+0x148>)
    1ac8:	4798      	blx	r3
		max17055_reg_read_write(readp, 0x3D, &data1);
    1aca:	1dbb      	adds	r3, r7, #6
    1acc:	001a      	movs	r2, r3
    1ace:	213d      	movs	r1, #61	; 0x3d
    1ad0:	2000      	movs	r0, #0
    1ad2:	4b48      	ldr	r3, [pc, #288]	; (1bf4 <config_batt+0x144>)
    1ad4:	4798      	blx	r3
	while(data1 & 0x0001){
    1ad6:	1dbb      	adds	r3, r7, #6
    1ad8:	881b      	ldrh	r3, [r3, #0]
    1ada:	001a      	movs	r2, r3
    1adc:	2301      	movs	r3, #1
    1ade:	4013      	ands	r3, r2
    1ae0:	d1f0      	bne.n	1ac4 <config_batt+0x14>
	}
	max17055_reg_read_write(writep, 0x18, &DesignCap);//Write design capacity register 0x18
    1ae2:	4b46      	ldr	r3, [pc, #280]	; (1bfc <config_batt+0x14c>)
    1ae4:	001a      	movs	r2, r3
    1ae6:	2118      	movs	r1, #24
    1ae8:	2001      	movs	r0, #1
    1aea:	4b42      	ldr	r3, [pc, #264]	; (1bf4 <config_batt+0x144>)
    1aec:	4798      	blx	r3
	data1=DesignCap/32;
    1aee:	4b43      	ldr	r3, [pc, #268]	; (1bfc <config_batt+0x14c>)
    1af0:	881b      	ldrh	r3, [r3, #0]
    1af2:	095b      	lsrs	r3, r3, #5
    1af4:	b29a      	uxth	r2, r3
    1af6:	1dbb      	adds	r3, r7, #6
    1af8:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    1afa:	1dbb      	adds	r3, r7, #6
    1afc:	001a      	movs	r2, r3
    1afe:	2145      	movs	r1, #69	; 0x45
    1b00:	2001      	movs	r0, #1
    1b02:	4b3c      	ldr	r3, [pc, #240]	; (1bf4 <config_batt+0x144>)
    1b04:	4798      	blx	r3
	max17055_reg_read_write(writep, 0x1E, &IchgTerm);//Write termination charge register 0x1E
    1b06:	4b3e      	ldr	r3, [pc, #248]	; (1c00 <config_batt+0x150>)
    1b08:	001a      	movs	r2, r3
    1b0a:	211e      	movs	r1, #30
    1b0c:	2001      	movs	r0, #1
    1b0e:	4b39      	ldr	r3, [pc, #228]	; (1bf4 <config_batt+0x144>)
    1b10:	4798      	blx	r3
	max17055_reg_read_write(writep, 0x3A, &VEmpty);//Write empty voltage, register 0x3A
    1b12:	4b3c      	ldr	r3, [pc, #240]	; (1c04 <config_batt+0x154>)
    1b14:	001a      	movs	r2, r3
    1b16:	213a      	movs	r1, #58	; 0x3a
    1b18:	2001      	movs	r0, #1
    1b1a:	4b36      	ldr	r3, [pc, #216]	; (1bf4 <config_batt+0x144>)
    1b1c:	4798      	blx	r3
	max17055_reg_read_write(readp, 0xBA, &HibCFG);//Save hibernation configuration
    1b1e:	4b3a      	ldr	r3, [pc, #232]	; (1c08 <config_batt+0x158>)
    1b20:	001a      	movs	r2, r3
    1b22:	21ba      	movs	r1, #186	; 0xba
    1b24:	2000      	movs	r0, #0
    1b26:	4b33      	ldr	r3, [pc, #204]	; (1bf4 <config_batt+0x144>)
    1b28:	4798      	blx	r3
	data1=0x90;
    1b2a:	1dbb      	adds	r3, r7, #6
    1b2c:	2290      	movs	r2, #144	; 0x90
    1b2e:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep, 0x60, &data1);//Exit hibernate mode step 1
    1b30:	1dbb      	adds	r3, r7, #6
    1b32:	001a      	movs	r2, r3
    1b34:	2160      	movs	r1, #96	; 0x60
    1b36:	2001      	movs	r0, #1
    1b38:	4b2e      	ldr	r3, [pc, #184]	; (1bf4 <config_batt+0x144>)
    1b3a:	4798      	blx	r3
	data1=0x00;
    1b3c:	1dbb      	adds	r3, r7, #6
    1b3e:	2200      	movs	r2, #0
    1b40:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep,0xBA, &data1);//exit hibernate mode step 2
    1b42:	1dbb      	adds	r3, r7, #6
    1b44:	001a      	movs	r2, r3
    1b46:	21ba      	movs	r1, #186	; 0xba
    1b48:	2001      	movs	r0, #1
    1b4a:	4b2a      	ldr	r3, [pc, #168]	; (1bf4 <config_batt+0x144>)
    1b4c:	4798      	blx	r3
	data1=0x00;
    1b4e:	1dbb      	adds	r3, r7, #6
    1b50:	2200      	movs	r2, #0
    1b52:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep, 0x60, &data1);//exit hibernate mode step 3
    1b54:	1dbb      	adds	r3, r7, #6
    1b56:	001a      	movs	r2, r3
    1b58:	2160      	movs	r1, #96	; 0x60
    1b5a:	2001      	movs	r0, #1
    1b5c:	4b25      	ldr	r3, [pc, #148]	; (1bf4 <config_batt+0x144>)
    1b5e:	4798      	blx	r3
	data1=DesignCap/32;
    1b60:	4b26      	ldr	r3, [pc, #152]	; (1bfc <config_batt+0x14c>)
    1b62:	881b      	ldrh	r3, [r3, #0]
    1b64:	095b      	lsrs	r3, r3, #5
    1b66:	b29a      	uxth	r2, r3
    1b68:	1dbb      	adds	r3, r7, #6
    1b6a:	801a      	strh	r2, [r3, #0]
	data1=data1*44138;
    1b6c:	1dbb      	adds	r3, r7, #6
    1b6e:	881b      	ldrh	r3, [r3, #0]
    1b70:	4a26      	ldr	r2, [pc, #152]	; (1c0c <config_batt+0x15c>)
    1b72:	4353      	muls	r3, r2
    1b74:	b29a      	uxth	r2, r3
    1b76:	1dbb      	adds	r3, r7, #6
    1b78:	801a      	strh	r2, [r3, #0]
	data1=data1/DesignCap;
    1b7a:	1dbb      	adds	r3, r7, #6
    1b7c:	881a      	ldrh	r2, [r3, #0]
    1b7e:	4b1f      	ldr	r3, [pc, #124]	; (1bfc <config_batt+0x14c>)
    1b80:	8819      	ldrh	r1, [r3, #0]
    1b82:	4b23      	ldr	r3, [pc, #140]	; (1c10 <config_batt+0x160>)
    1b84:	0010      	movs	r0, r2
    1b86:	4798      	blx	r3
    1b88:	0003      	movs	r3, r0
    1b8a:	b29a      	uxth	r2, r3
    1b8c:	1dbb      	adds	r3, r7, #6
    1b8e:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep, 0x46, &data1);//write dPAcc register 0x46
    1b90:	1dbb      	adds	r3, r7, #6
    1b92:	001a      	movs	r2, r3
    1b94:	2146      	movs	r1, #70	; 0x46
    1b96:	2001      	movs	r0, #1
    1b98:	4b16      	ldr	r3, [pc, #88]	; (1bf4 <config_batt+0x144>)
    1b9a:	4798      	blx	r3
	data1=0x8000;//model 0
    1b9c:	1dbb      	adds	r3, r7, #6
    1b9e:	4a1d      	ldr	r2, [pc, #116]	; (1c14 <config_batt+0x164>)
    1ba0:	801a      	strh	r2, [r3, #0]
	max17055_reg_read_write(writep, 0xD8, &data1);//write model configuration at register D8
    1ba2:	1dbb      	adds	r3, r7, #6
    1ba4:	001a      	movs	r2, r3
    1ba6:	21d8      	movs	r1, #216	; 0xd8
    1ba8:	2001      	movs	r0, #1
    1baa:	4b12      	ldr	r3, [pc, #72]	; (1bf4 <config_batt+0x144>)
    1bac:	4798      	blx	r3
	//wait for model to refresh
	data1=0x0000;
    1bae:	1dbb      	adds	r3, r7, #6
    1bb0:	2200      	movs	r2, #0
    1bb2:	801a      	strh	r2, [r3, #0]
	while(!data1){
    1bb4:	e00f      	b.n	1bd6 <config_batt+0x126>
		delay_ms(10);
    1bb6:	200a      	movs	r0, #10
    1bb8:	4b0f      	ldr	r3, [pc, #60]	; (1bf8 <config_batt+0x148>)
    1bba:	4798      	blx	r3
		max17055_reg_read_write(readp,0xD8,&data1);
    1bbc:	1dbb      	adds	r3, r7, #6
    1bbe:	001a      	movs	r2, r3
    1bc0:	21d8      	movs	r1, #216	; 0xd8
    1bc2:	2000      	movs	r0, #0
    1bc4:	4b0b      	ldr	r3, [pc, #44]	; (1bf4 <config_batt+0x144>)
    1bc6:	4798      	blx	r3
		data1=data1 & 0x8000;
    1bc8:	1dbb      	adds	r3, r7, #6
    1bca:	881b      	ldrh	r3, [r3, #0]
    1bcc:	0bdb      	lsrs	r3, r3, #15
    1bce:	03db      	lsls	r3, r3, #15
    1bd0:	b29a      	uxth	r2, r3
    1bd2:	1dbb      	adds	r3, r7, #6
    1bd4:	801a      	strh	r2, [r3, #0]
	while(!data1){
    1bd6:	1dbb      	adds	r3, r7, #6
    1bd8:	881b      	ldrh	r3, [r3, #0]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d0eb      	beq.n	1bb6 <config_batt+0x106>
	}
	max17055_reg_read_write(writep, 0xBA, &HibCFG);//restore hiberation configuration at register 0xBA
    1bde:	4b0a      	ldr	r3, [pc, #40]	; (1c08 <config_batt+0x158>)
    1be0:	001a      	movs	r2, r3
    1be2:	21ba      	movs	r1, #186	; 0xba
    1be4:	2001      	movs	r0, #1
    1be6:	4b03      	ldr	r3, [pc, #12]	; (1bf4 <config_batt+0x144>)
    1be8:	4798      	blx	r3
}
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	46bd      	mov	sp, r7
    1bee:	b002      	add	sp, #8
    1bf0:	bd80      	pop	{r7, pc}
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	000107a9 	.word	0x000107a9
    1bf8:	000181b5 	.word	0x000181b5
    1bfc:	20000064 	.word	0x20000064
    1c00:	20000066 	.word	0x20000066
    1c04:	20000068 	.word	0x20000068
    1c08:	20001388 	.word	0x20001388
    1c0c:	ffffac6a 	.word	0xffffac6a
    1c10:	00020bbd 	.word	0x00020bbd
    1c14:	ffff8000 	.word	0xffff8000

00001c18 <getBatteryLevel>:

uint16_t getBatteryLevel(void){
    1c18:	b590      	push	{r4, r7, lr}
    1c1a:	b083      	sub	sp, #12
    1c1c:	af00      	add	r7, sp, #0
	//  Reads back battery state of charge in %, 0-100
	uint16_t batt_SOC;
	max17055_reg_read_write(readp, 0x06, &batt_SOC);
    1c1e:	1dbb      	adds	r3, r7, #6
    1c20:	001a      	movs	r2, r3
    1c22:	2106      	movs	r1, #6
    1c24:	2000      	movs	r0, #0
    1c26:	4b15      	ldr	r3, [pc, #84]	; (1c7c <getBatteryLevel+0x64>)
    1c28:	4798      	blx	r3
	batt_SOC=batt_SOC>>8;
    1c2a:	1dbb      	adds	r3, r7, #6
    1c2c:	881b      	ldrh	r3, [r3, #0]
    1c2e:	0a1b      	lsrs	r3, r3, #8
    1c30:	b29a      	uxth	r2, r3
    1c32:	1dbb      	adds	r3, r7, #6
    1c34:	801a      	strh	r2, [r3, #0]
	//  Add margin to show topped-off battery
	batt_SOC = batt_SOC*1.03;  
    1c36:	1dbb      	adds	r3, r7, #6
    1c38:	881b      	ldrh	r3, [r3, #0]
    1c3a:	001a      	movs	r2, r3
    1c3c:	4b10      	ldr	r3, [pc, #64]	; (1c80 <getBatteryLevel+0x68>)
    1c3e:	0010      	movs	r0, r2
    1c40:	4798      	blx	r3
    1c42:	4c10      	ldr	r4, [pc, #64]	; (1c84 <getBatteryLevel+0x6c>)
    1c44:	4a10      	ldr	r2, [pc, #64]	; (1c88 <getBatteryLevel+0x70>)
    1c46:	4b11      	ldr	r3, [pc, #68]	; (1c8c <getBatteryLevel+0x74>)
    1c48:	47a0      	blx	r4
    1c4a:	0003      	movs	r3, r0
    1c4c:	000c      	movs	r4, r1
    1c4e:	0019      	movs	r1, r3
    1c50:	0022      	movs	r2, r4
    1c52:	4b0f      	ldr	r3, [pc, #60]	; (1c90 <getBatteryLevel+0x78>)
    1c54:	0008      	movs	r0, r1
    1c56:	0011      	movs	r1, r2
    1c58:	4798      	blx	r3
    1c5a:	0003      	movs	r3, r0
    1c5c:	b29a      	uxth	r2, r3
    1c5e:	1dbb      	adds	r3, r7, #6
    1c60:	801a      	strh	r2, [r3, #0]
	if (batt_SOC>100){
    1c62:	1dbb      	adds	r3, r7, #6
    1c64:	881b      	ldrh	r3, [r3, #0]
    1c66:	2b64      	cmp	r3, #100	; 0x64
    1c68:	d902      	bls.n	1c70 <getBatteryLevel+0x58>
		batt_SOC = 100;
    1c6a:	1dbb      	adds	r3, r7, #6
    1c6c:	2264      	movs	r2, #100	; 0x64
    1c6e:	801a      	strh	r2, [r3, #0]
	}
	
	return batt_SOC;
    1c70:	1dbb      	adds	r3, r7, #6
    1c72:	881b      	ldrh	r3, [r3, #0]
}
    1c74:	0018      	movs	r0, r3
    1c76:	46bd      	mov	sp, r7
    1c78:	b003      	add	sp, #12
    1c7a:	bd90      	pop	{r4, r7, pc}
    1c7c:	000107a9 	.word	0x000107a9
    1c80:	00023919 	.word	0x00023919
    1c84:	00022d45 	.word	0x00022d45
    1c88:	47ae147b 	.word	0x47ae147b
    1c8c:	3ff07ae1 	.word	0x3ff07ae1
    1c90:	00021099 	.word	0x00021099

00001c94 <setup_charger>:


void setup_charger(void){
    1c94:	b580      	push	{r7, lr}
    1c96:	b082      	sub	sp, #8
    1c98:	af00      	add	r7, sp, #0
	// ILIM is lower 3 bits of addr 0x02
	uint8_t data;
	if (options.chargeCurrent==500){
    1c9a:	4b0b      	ldr	r3, [pc, #44]	; (1cc8 <setup_charger+0x34>)
    1c9c:	685a      	ldr	r2, [r3, #4]
    1c9e:	23fa      	movs	r3, #250	; 0xfa
    1ca0:	005b      	lsls	r3, r3, #1
    1ca2:	429a      	cmp	r2, r3
    1ca4:	d103      	bne.n	1cae <setup_charger+0x1a>
		data = 0x06;
    1ca6:	1dfb      	adds	r3, r7, #7
    1ca8:	2206      	movs	r2, #6
    1caa:	701a      	strb	r2, [r3, #0]
    1cac:	e002      	b.n	1cb4 <setup_charger+0x20>
		}else{
		data = 0x00;
    1cae:	1dfb      	adds	r3, r7, #7
    1cb0:	2200      	movs	r2, #0
    1cb2:	701a      	strb	r2, [r3, #0]
	}
	adp5062_reg_read_write(writep, 0x02, &data);
    1cb4:	1dfb      	adds	r3, r7, #7
    1cb6:	001a      	movs	r2, r3
    1cb8:	2102      	movs	r1, #2
    1cba:	2001      	movs	r0, #1
    1cbc:	4b03      	ldr	r3, [pc, #12]	; (1ccc <setup_charger+0x38>)
    1cbe:	4798      	blx	r3
	
	
	
}
    1cc0:	46c0      	nop			; (mov r8, r8)
    1cc2:	46bd      	mov	sp, r7
    1cc4:	b002      	add	sp, #8
    1cc6:	bd80      	pop	{r7, pc}
    1cc8:	200034a8 	.word	0x200034a8
    1ccc:	00010869 	.word	0x00010869

00001cd0 <getChargerStatus>:

uint8_t getChargerStatus(void){
    1cd0:	b590      	push	{r4, r7, lr}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
	uint8_t status;
	// Read Charge Status 1 (add 0x0B)
	status = getChargerRegister(0x0B);
    1cd6:	1dfc      	adds	r4, r7, #7
    1cd8:	200b      	movs	r0, #11
    1cda:	4b08      	ldr	r3, [pc, #32]	; (1cfc <getChargerStatus+0x2c>)
    1cdc:	4798      	blx	r3
    1cde:	0003      	movs	r3, r0
    1ce0:	7023      	strb	r3, [r4, #0]
	
	status = status & 0x07;
    1ce2:	1dfb      	adds	r3, r7, #7
    1ce4:	1dfa      	adds	r2, r7, #7
    1ce6:	7812      	ldrb	r2, [r2, #0]
    1ce8:	2107      	movs	r1, #7
    1cea:	400a      	ands	r2, r1
    1cec:	701a      	strb	r2, [r3, #0]
	
	return status;
    1cee:	1dfb      	adds	r3, r7, #7
    1cf0:	781b      	ldrb	r3, [r3, #0]
}
    1cf2:	0018      	movs	r0, r3
    1cf4:	46bd      	mov	sp, r7
    1cf6:	b003      	add	sp, #12
    1cf8:	bd90      	pop	{r4, r7, pc}
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	00001d01 	.word	0x00001d01

00001d00 <getChargerRegister>:


uint8_t getChargerRegister(uint8_t address){
    1d00:	b580      	push	{r7, lr}
    1d02:	b084      	sub	sp, #16
    1d04:	af00      	add	r7, sp, #0
    1d06:	0002      	movs	r2, r0
    1d08:	1dfb      	adds	r3, r7, #7
    1d0a:	701a      	strb	r2, [r3, #0]
	//  Read data from address on Charger
	uint8_t registerData;
	
	adp5062_reg_read_write(readp, address, &registerData); 
    1d0c:	230f      	movs	r3, #15
    1d0e:	18fa      	adds	r2, r7, r3
    1d10:	1dfb      	adds	r3, r7, #7
    1d12:	781b      	ldrb	r3, [r3, #0]
    1d14:	0019      	movs	r1, r3
    1d16:	2000      	movs	r0, #0
    1d18:	4b04      	ldr	r3, [pc, #16]	; (1d2c <getChargerRegister+0x2c>)
    1d1a:	4798      	blx	r3
	
	return registerData;
    1d1c:	230f      	movs	r3, #15
    1d1e:	18fb      	adds	r3, r7, r3
    1d20:	781b      	ldrb	r3, [r3, #0]
}
    1d22:	0018      	movs	r0, r3
    1d24:	46bd      	mov	sp, r7
    1d26:	b004      	add	sp, #16
    1d28:	bd80      	pop	{r7, pc}
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	00010869 	.word	0x00010869

00001d30 <bin2str>:



void  bin2str(uint8_t data, char *strPtr){
    1d30:	b580      	push	{r7, lr}
    1d32:	b084      	sub	sp, #16
    1d34:	af00      	add	r7, sp, #0
    1d36:	0002      	movs	r2, r0
    1d38:	6039      	str	r1, [r7, #0]
    1d3a:	1dfb      	adds	r3, r7, #7
    1d3c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t shifter = 128;
    1d3e:	230e      	movs	r3, #14
    1d40:	18fb      	adds	r3, r7, r3
    1d42:	2280      	movs	r2, #128	; 0x80
    1d44:	701a      	strb	r2, [r3, #0]
	
	for (i=0;i<8;i++){
    1d46:	230f      	movs	r3, #15
    1d48:	18fb      	adds	r3, r7, r3
    1d4a:	2200      	movs	r2, #0
    1d4c:	701a      	strb	r2, [r3, #0]
    1d4e:	e025      	b.n	1d9c <bin2str+0x6c>
		if (data&shifter){
    1d50:	1dfb      	adds	r3, r7, #7
    1d52:	220e      	movs	r2, #14
    1d54:	18ba      	adds	r2, r7, r2
    1d56:	781b      	ldrb	r3, [r3, #0]
    1d58:	7812      	ldrb	r2, [r2, #0]
    1d5a:	4013      	ands	r3, r2
    1d5c:	b2db      	uxtb	r3, r3
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d007      	beq.n	1d72 <bin2str+0x42>
			strPtr[i] = '1';
    1d62:	230f      	movs	r3, #15
    1d64:	18fb      	adds	r3, r7, r3
    1d66:	781b      	ldrb	r3, [r3, #0]
    1d68:	683a      	ldr	r2, [r7, #0]
    1d6a:	18d3      	adds	r3, r2, r3
    1d6c:	2231      	movs	r2, #49	; 0x31
    1d6e:	701a      	strb	r2, [r3, #0]
    1d70:	e006      	b.n	1d80 <bin2str+0x50>
		}else{
			strPtr[i] = '0';
    1d72:	230f      	movs	r3, #15
    1d74:	18fb      	adds	r3, r7, r3
    1d76:	781b      	ldrb	r3, [r3, #0]
    1d78:	683a      	ldr	r2, [r7, #0]
    1d7a:	18d3      	adds	r3, r2, r3
    1d7c:	2230      	movs	r2, #48	; 0x30
    1d7e:	701a      	strb	r2, [r3, #0]
		}
		shifter = shifter>>1;
    1d80:	230e      	movs	r3, #14
    1d82:	18fb      	adds	r3, r7, r3
    1d84:	220e      	movs	r2, #14
    1d86:	18ba      	adds	r2, r7, r2
    1d88:	7812      	ldrb	r2, [r2, #0]
    1d8a:	0852      	lsrs	r2, r2, #1
    1d8c:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++){
    1d8e:	230f      	movs	r3, #15
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	781a      	ldrb	r2, [r3, #0]
    1d94:	230f      	movs	r3, #15
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	3201      	adds	r2, #1
    1d9a:	701a      	strb	r2, [r3, #0]
    1d9c:	230f      	movs	r3, #15
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	781b      	ldrb	r3, [r3, #0]
    1da2:	2b07      	cmp	r3, #7
    1da4:	d9d4      	bls.n	1d50 <bin2str+0x20>
	}
	strPtr[8] = '\0';
    1da6:	683b      	ldr	r3, [r7, #0]
    1da8:	3308      	adds	r3, #8
    1daa:	2200      	movs	r2, #0
    1dac:	701a      	strb	r2, [r3, #0]
	
}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	46bd      	mov	sp, r7
    1db2:	b004      	add	sp, #16
    1db4:	bd80      	pop	{r7, pc}
	...

00001db8 <load_user_settings>:
extern struct BACKLIGHT_SETTING backlight_setting;




void load_user_settings(void){
    1db8:	b580      	push	{r7, lr}
    1dba:	b086      	sub	sp, #24
    1dbc:	af00      	add	r7, sp, #0
	uint8_t bytes_options;
	uint8_t read_buf[2];
	
	//  Load example options structure to find initialized key
	struct OPTIONS tempOptions;
	getDefaultOptions(&tempOptions);
    1dbe:	003b      	movs	r3, r7
    1dc0:	0018      	movs	r0, r3
    1dc2:	4b0f      	ldr	r3, [pc, #60]	; (1e00 <load_user_settings+0x48>)
    1dc4:	4798      	blx	r3
	
	//  Read options structure from EEPROM
	bytes_options = sizeof(options);
    1dc6:	2317      	movs	r3, #23
    1dc8:	18fb      	adds	r3, r7, r3
    1dca:	2214      	movs	r2, #20
    1dcc:	701a      	strb	r2, [r3, #0]
	EEPROM_read(add_options, &options, bytes_options);
    1dce:	2317      	movs	r3, #23
    1dd0:	18fb      	adds	r3, r7, r3
    1dd2:	781a      	ldrb	r2, [r3, #0]
    1dd4:	490b      	ldr	r1, [pc, #44]	; (1e04 <load_user_settings+0x4c>)
    1dd6:	2381      	movs	r3, #129	; 0x81
    1dd8:	005b      	lsls	r3, r3, #1
    1dda:	0018      	movs	r0, r3
    1ddc:	4b0a      	ldr	r3, [pc, #40]	; (1e08 <load_user_settings+0x50>)
    1dde:	4798      	blx	r3
	
	if (options.Settings_Initialized_Key != tempOptions.Settings_Initialized_Key){
    1de0:	4b08      	ldr	r3, [pc, #32]	; (1e04 <load_user_settings+0x4c>)
    1de2:	7cda      	ldrb	r2, [r3, #19]
    1de4:	003b      	movs	r3, r7
    1de6:	7cdb      	ldrb	r3, [r3, #19]
    1de8:	429a      	cmp	r2, r3
    1dea:	d005      	beq.n	1df8 <load_user_settings+0x40>
		// Settings in EEPROM not initialized or are out of date
		//  Reload default settings into 
		getDefaultOptions(&options);
    1dec:	4b05      	ldr	r3, [pc, #20]	; (1e04 <load_user_settings+0x4c>)
    1dee:	0018      	movs	r0, r3
    1df0:	4b03      	ldr	r3, [pc, #12]	; (1e00 <load_user_settings+0x48>)
    1df2:	4798      	blx	r3
		//  Save into EEPROM
		save_user_settings();
    1df4:	4b05      	ldr	r3, [pc, #20]	; (1e0c <load_user_settings+0x54>)
    1df6:	4798      	blx	r3
	}
	
	
}
    1df8:	46c0      	nop			; (mov r8, r8)
    1dfa:	46bd      	mov	sp, r7
    1dfc:	b006      	add	sp, #24
    1dfe:	bd80      	pop	{r7, pc}
    1e00:	0001e119 	.word	0x0001e119
    1e04:	200034a8 	.word	0x200034a8
    1e08:	00001fed 	.word	0x00001fed
    1e0c:	00001e11 	.word	0x00001e11

00001e10 <save_user_settings>:

void save_user_settings(void){
    1e10:	b580      	push	{r7, lr}
    1e12:	b082      	sub	sp, #8
    1e14:	af00      	add	r7, sp, #0
	uint8_t write_buf[2];
	
	uint8_t bytes_options;	
	bytes_options = sizeof(options);
    1e16:	1dfb      	adds	r3, r7, #7
    1e18:	2214      	movs	r2, #20
    1e1a:	701a      	strb	r2, [r3, #0]

	// Save User Options
	EEPROM_write(add_options, &options, bytes_options);
    1e1c:	1dfb      	adds	r3, r7, #7
    1e1e:	781a      	ldrb	r2, [r3, #0]
    1e20:	4904      	ldr	r1, [pc, #16]	; (1e34 <save_user_settings+0x24>)
    1e22:	2381      	movs	r3, #129	; 0x81
    1e24:	005b      	lsls	r3, r3, #1
    1e26:	0018      	movs	r0, r3
    1e28:	4b03      	ldr	r3, [pc, #12]	; (1e38 <save_user_settings+0x28>)
    1e2a:	4798      	blx	r3
	

}
    1e2c:	46c0      	nop			; (mov r8, r8)
    1e2e:	46bd      	mov	sp, r7
    1e30:	b002      	add	sp, #8
    1e32:	bd80      	pop	{r7, pc}
    1e34:	200034a8 	.word	0x200034a8
    1e38:	000020f5 	.word	0x000020f5

00001e3c <load_calibration>:


void load_calibration(void){
    1e3c:	b580      	push	{r7, lr}
    1e3e:	b09a      	sub	sp, #104	; 0x68
    1e40:	af00      	add	r7, sp, #0
	uint8_t bytes_calst, bytes_report;
	bytes_report = sizeof(cal_report_azm_inc);
    1e42:	2367      	movs	r3, #103	; 0x67
    1e44:	18fb      	adds	r3, r7, r3
    1e46:	2254      	movs	r2, #84	; 0x54
    1e48:	701a      	strb	r2, [r3, #0]
	bytes_calst = sizeof(a1_calst);
    1e4a:	2366      	movs	r3, #102	; 0x66
    1e4c:	18fb      	adds	r3, r7, r3
    1e4e:	2260      	movs	r2, #96	; 0x60
    1e50:	701a      	strb	r2, [r3, #0]
	
	
	//  Create example calibration structure to find initialization key
	struct INST_CAL tempCal;	
	cal_init_struct(&tempCal);
    1e52:	1d3b      	adds	r3, r7, #4
    1e54:	0018      	movs	r0, r3
    1e56:	4b30      	ldr	r3, [pc, #192]	; (1f18 <load_calibration+0xdc>)
    1e58:	4798      	blx	r3
	//  Read All  calibration structure back	
	EEPROM_read(add_a1_calst, &a1_calst, bytes_calst); 
    1e5a:	2366      	movs	r3, #102	; 0x66
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	781a      	ldrb	r2, [r3, #0]
    1e60:	492e      	ldr	r1, [pc, #184]	; (1f1c <load_calibration+0xe0>)
    1e62:	23c0      	movs	r3, #192	; 0xc0
    1e64:	009b      	lsls	r3, r3, #2
    1e66:	0018      	movs	r0, r3
    1e68:	4b2d      	ldr	r3, [pc, #180]	; (1f20 <load_calibration+0xe4>)
    1e6a:	4798      	blx	r3
	EEPROM_read(add_a2_calst, &a2_calst, bytes_calst);
    1e6c:	2366      	movs	r3, #102	; 0x66
    1e6e:	18fb      	adds	r3, r7, r3
    1e70:	781a      	ldrb	r2, [r3, #0]
    1e72:	492c      	ldr	r1, [pc, #176]	; (1f24 <load_calibration+0xe8>)
    1e74:	2380      	movs	r3, #128	; 0x80
    1e76:	00db      	lsls	r3, r3, #3
    1e78:	0018      	movs	r0, r3
    1e7a:	4b29      	ldr	r3, [pc, #164]	; (1f20 <load_calibration+0xe4>)
    1e7c:	4798      	blx	r3
	EEPROM_read(add_c1_calst, &c1_calst, bytes_calst);
    1e7e:	2366      	movs	r3, #102	; 0x66
    1e80:	18fb      	adds	r3, r7, r3
    1e82:	781a      	ldrb	r2, [r3, #0]
    1e84:	4928      	ldr	r1, [pc, #160]	; (1f28 <load_calibration+0xec>)
    1e86:	23a0      	movs	r3, #160	; 0xa0
    1e88:	00db      	lsls	r3, r3, #3
    1e8a:	0018      	movs	r0, r3
    1e8c:	4b24      	ldr	r3, [pc, #144]	; (1f20 <load_calibration+0xe4>)
    1e8e:	4798      	blx	r3
	EEPROM_read(add_c2_calst, &c2_calst, bytes_calst);
    1e90:	2366      	movs	r3, #102	; 0x66
    1e92:	18fb      	adds	r3, r7, r3
    1e94:	781a      	ldrb	r2, [r3, #0]
    1e96:	4925      	ldr	r1, [pc, #148]	; (1f2c <load_calibration+0xf0>)
    1e98:	23c0      	movs	r3, #192	; 0xc0
    1e9a:	00db      	lsls	r3, r3, #3
    1e9c:	0018      	movs	r0, r3
    1e9e:	4b20      	ldr	r3, [pc, #128]	; (1f20 <load_calibration+0xe4>)
    1ea0:	4798      	blx	r3
	EEPROM_read(add_dist_calst, &dist_calst, bytes_calst);
    1ea2:	2366      	movs	r3, #102	; 0x66
    1ea4:	18fb      	adds	r3, r7, r3
    1ea6:	781a      	ldrb	r2, [r3, #0]
    1ea8:	4921      	ldr	r1, [pc, #132]	; (1f30 <load_calibration+0xf4>)
    1eaa:	23e0      	movs	r3, #224	; 0xe0
    1eac:	00db      	lsls	r3, r3, #3
    1eae:	0018      	movs	r0, r3
    1eb0:	4b1b      	ldr	r3, [pc, #108]	; (1f20 <load_calibration+0xe4>)
    1eb2:	4798      	blx	r3
	EEPROM_read(add_cal_report_azm_inc, &cal_report_azm_inc, bytes_report);
    1eb4:	2367      	movs	r3, #103	; 0x67
    1eb6:	18fb      	adds	r3, r7, r3
    1eb8:	781a      	ldrb	r2, [r3, #0]
    1eba:	491e      	ldr	r1, [pc, #120]	; (1f34 <load_calibration+0xf8>)
    1ebc:	2380      	movs	r3, #128	; 0x80
    1ebe:	011b      	lsls	r3, r3, #4
    1ec0:	0018      	movs	r0, r3
    1ec2:	4b17      	ldr	r3, [pc, #92]	; (1f20 <load_calibration+0xe4>)
    1ec4:	4798      	blx	r3
	EEPROM_read(add_cal_report_dist, &cal_report_dist, bytes_report);
    1ec6:	2367      	movs	r3, #103	; 0x67
    1ec8:	18fb      	adds	r3, r7, r3
    1eca:	781a      	ldrb	r2, [r3, #0]
    1ecc:	491a      	ldr	r1, [pc, #104]	; (1f38 <load_calibration+0xfc>)
    1ece:	2390      	movs	r3, #144	; 0x90
    1ed0:	011b      	lsls	r3, r3, #4
    1ed2:	0018      	movs	r0, r3
    1ed4:	4b12      	ldr	r3, [pc, #72]	; (1f20 <load_calibration+0xe4>)
    1ed6:	4798      	blx	r3
	
	// assume first struct is representative of remainder
	if(tempCal.Cal_Initialized_Key != a1_calst.Cal_Initialized_Key){
    1ed8:	1d3b      	adds	r3, r7, #4
    1eda:	781a      	ldrb	r2, [r3, #0]
    1edc:	4b0f      	ldr	r3, [pc, #60]	; (1f1c <load_calibration+0xe0>)
    1ede:	781b      	ldrb	r3, [r3, #0]
    1ee0:	429a      	cmp	r2, r3
    1ee2:	d015      	beq.n	1f10 <load_calibration+0xd4>
		//  EEPROM data has not been initialized or is out of date
		cal_init_struct(&a1_calst);
    1ee4:	4b0d      	ldr	r3, [pc, #52]	; (1f1c <load_calibration+0xe0>)
    1ee6:	0018      	movs	r0, r3
    1ee8:	4b0b      	ldr	r3, [pc, #44]	; (1f18 <load_calibration+0xdc>)
    1eea:	4798      	blx	r3
		cal_init_struct(&a2_calst);
    1eec:	4b0d      	ldr	r3, [pc, #52]	; (1f24 <load_calibration+0xe8>)
    1eee:	0018      	movs	r0, r3
    1ef0:	4b09      	ldr	r3, [pc, #36]	; (1f18 <load_calibration+0xdc>)
    1ef2:	4798      	blx	r3
		cal_init_struct(&c1_calst);
    1ef4:	4b0c      	ldr	r3, [pc, #48]	; (1f28 <load_calibration+0xec>)
    1ef6:	0018      	movs	r0, r3
    1ef8:	4b07      	ldr	r3, [pc, #28]	; (1f18 <load_calibration+0xdc>)
    1efa:	4798      	blx	r3
		cal_init_struct(&c2_calst);
    1efc:	4b0b      	ldr	r3, [pc, #44]	; (1f2c <load_calibration+0xf0>)
    1efe:	0018      	movs	r0, r3
    1f00:	4b05      	ldr	r3, [pc, #20]	; (1f18 <load_calibration+0xdc>)
    1f02:	4798      	blx	r3
		cal_init_struct(&dist_calst);
    1f04:	4b0a      	ldr	r3, [pc, #40]	; (1f30 <load_calibration+0xf4>)
    1f06:	0018      	movs	r0, r3
    1f08:	4b03      	ldr	r3, [pc, #12]	; (1f18 <load_calibration+0xdc>)
    1f0a:	4798      	blx	r3
		save_calibration();		
    1f0c:	4b0b      	ldr	r3, [pc, #44]	; (1f3c <load_calibration+0x100>)
    1f0e:	4798      	blx	r3
	}
		
	
	
}
    1f10:	46c0      	nop			; (mov r8, r8)
    1f12:	46bd      	mov	sp, r7
    1f14:	b01a      	add	sp, #104	; 0x68
    1f16:	bd80      	pop	{r7, pc}
    1f18:	0000e3b9 	.word	0x0000e3b9
    1f1c:	20004f38 	.word	0x20004f38
    1f20:	00001fed 	.word	0x00001fed
    1f24:	20004b14 	.word	0x20004b14
    1f28:	20003434 	.word	0x20003434
    1f2c:	200023ac 	.word	0x200023ac
    1f30:	20004888 	.word	0x20004888
    1f34:	20001e48 	.word	0x20001e48
    1f38:	200034dc 	.word	0x200034dc
    1f3c:	00001f41 	.word	0x00001f41

00001f40 <save_calibration>:

void save_calibration(void){
    1f40:	b580      	push	{r7, lr}
    1f42:	b082      	sub	sp, #8
    1f44:	af00      	add	r7, sp, #0

	uint8_t bytes_calst, bytes_report;
	
	bytes_report = sizeof(cal_report_azm_inc);
    1f46:	1dfb      	adds	r3, r7, #7
    1f48:	2254      	movs	r2, #84	; 0x54
    1f4a:	701a      	strb	r2, [r3, #0]
	bytes_calst = sizeof(a1_calst);
    1f4c:	1dbb      	adds	r3, r7, #6
    1f4e:	2260      	movs	r2, #96	; 0x60
    1f50:	701a      	strb	r2, [r3, #0]
	
	// Save calibration structures
	EEPROM_write(add_a1_calst, &a1_calst, bytes_calst);
    1f52:	1dbb      	adds	r3, r7, #6
    1f54:	781a      	ldrb	r2, [r3, #0]
    1f56:	491d      	ldr	r1, [pc, #116]	; (1fcc <save_calibration+0x8c>)
    1f58:	23c0      	movs	r3, #192	; 0xc0
    1f5a:	009b      	lsls	r3, r3, #2
    1f5c:	0018      	movs	r0, r3
    1f5e:	4b1c      	ldr	r3, [pc, #112]	; (1fd0 <save_calibration+0x90>)
    1f60:	4798      	blx	r3
	EEPROM_write(add_a2_calst, &a2_calst, bytes_calst);
    1f62:	1dbb      	adds	r3, r7, #6
    1f64:	781a      	ldrb	r2, [r3, #0]
    1f66:	491b      	ldr	r1, [pc, #108]	; (1fd4 <save_calibration+0x94>)
    1f68:	2380      	movs	r3, #128	; 0x80
    1f6a:	00db      	lsls	r3, r3, #3
    1f6c:	0018      	movs	r0, r3
    1f6e:	4b18      	ldr	r3, [pc, #96]	; (1fd0 <save_calibration+0x90>)
    1f70:	4798      	blx	r3
	EEPROM_write(add_c1_calst, &c1_calst, bytes_calst);
    1f72:	1dbb      	adds	r3, r7, #6
    1f74:	781a      	ldrb	r2, [r3, #0]
    1f76:	4918      	ldr	r1, [pc, #96]	; (1fd8 <save_calibration+0x98>)
    1f78:	23a0      	movs	r3, #160	; 0xa0
    1f7a:	00db      	lsls	r3, r3, #3
    1f7c:	0018      	movs	r0, r3
    1f7e:	4b14      	ldr	r3, [pc, #80]	; (1fd0 <save_calibration+0x90>)
    1f80:	4798      	blx	r3
	EEPROM_write(add_c2_calst, &c2_calst, bytes_calst);
    1f82:	1dbb      	adds	r3, r7, #6
    1f84:	781a      	ldrb	r2, [r3, #0]
    1f86:	4915      	ldr	r1, [pc, #84]	; (1fdc <save_calibration+0x9c>)
    1f88:	23c0      	movs	r3, #192	; 0xc0
    1f8a:	00db      	lsls	r3, r3, #3
    1f8c:	0018      	movs	r0, r3
    1f8e:	4b10      	ldr	r3, [pc, #64]	; (1fd0 <save_calibration+0x90>)
    1f90:	4798      	blx	r3
	EEPROM_write(add_dist_calst, &dist_calst, bytes_calst);
    1f92:	1dbb      	adds	r3, r7, #6
    1f94:	781a      	ldrb	r2, [r3, #0]
    1f96:	4912      	ldr	r1, [pc, #72]	; (1fe0 <save_calibration+0xa0>)
    1f98:	23e0      	movs	r3, #224	; 0xe0
    1f9a:	00db      	lsls	r3, r3, #3
    1f9c:	0018      	movs	r0, r3
    1f9e:	4b0c      	ldr	r3, [pc, #48]	; (1fd0 <save_calibration+0x90>)
    1fa0:	4798      	blx	r3
		
	// Save Calibration Report
	EEPROM_write(add_cal_report_azm_inc, &cal_report_azm_inc, bytes_report);
    1fa2:	1dfb      	adds	r3, r7, #7
    1fa4:	781a      	ldrb	r2, [r3, #0]
    1fa6:	490f      	ldr	r1, [pc, #60]	; (1fe4 <save_calibration+0xa4>)
    1fa8:	2380      	movs	r3, #128	; 0x80
    1faa:	011b      	lsls	r3, r3, #4
    1fac:	0018      	movs	r0, r3
    1fae:	4b08      	ldr	r3, [pc, #32]	; (1fd0 <save_calibration+0x90>)
    1fb0:	4798      	blx	r3
	EEPROM_write(add_cal_report_dist, &cal_report_dist, bytes_report);
    1fb2:	1dfb      	adds	r3, r7, #7
    1fb4:	781a      	ldrb	r2, [r3, #0]
    1fb6:	490c      	ldr	r1, [pc, #48]	; (1fe8 <save_calibration+0xa8>)
    1fb8:	2390      	movs	r3, #144	; 0x90
    1fba:	011b      	lsls	r3, r3, #4
    1fbc:	0018      	movs	r0, r3
    1fbe:	4b04      	ldr	r3, [pc, #16]	; (1fd0 <save_calibration+0x90>)
    1fc0:	4798      	blx	r3
	
	
}
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	46bd      	mov	sp, r7
    1fc6:	b002      	add	sp, #8
    1fc8:	bd80      	pop	{r7, pc}
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	20004f38 	.word	0x20004f38
    1fd0:	000020f5 	.word	0x000020f5
    1fd4:	20004b14 	.word	0x20004b14
    1fd8:	20003434 	.word	0x20003434
    1fdc:	200023ac 	.word	0x200023ac
    1fe0:	20004888 	.word	0x20004888
    1fe4:	20001e48 	.word	0x20001e48
    1fe8:	200034dc 	.word	0x200034dc

00001fec <EEPROM_read>:





void EEPROM_read(uint16_t data_address, uint8_t data_buf[], uint8_t bytes_to_read){
    1fec:	b580      	push	{r7, lr}
    1fee:	b088      	sub	sp, #32
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	6039      	str	r1, [r7, #0]
    1ff4:	0011      	movs	r1, r2
    1ff6:	1dbb      	adds	r3, r7, #6
    1ff8:	1c02      	adds	r2, r0, #0
    1ffa:	801a      	strh	r2, [r3, #0]
    1ffc:	1d7b      	adds	r3, r7, #5
    1ffe:	1c0a      	adds	r2, r1, #0
    2000:	701a      	strb	r2, [r3, #0]
	uint16_t limit=20;
    2002:	231c      	movs	r3, #28
    2004:	18fb      	adds	r3, r7, r3
    2006:	2214      	movs	r2, #20
    2008:	801a      	strh	r2, [r3, #0]
	uint16_t timeout;
	struct i2c_master_packet packet = {
    200a:	2310      	movs	r3, #16
    200c:	18fb      	adds	r3, r7, r3
    200e:	0018      	movs	r0, r3
    2010:	230c      	movs	r3, #12
    2012:	001a      	movs	r2, r3
    2014:	2100      	movs	r1, #0
    2016:	4b33      	ldr	r3, [pc, #204]	; (20e4 <STACK_SIZE+0xe4>)
    2018:	4798      	blx	r3
    201a:	2310      	movs	r3, #16
    201c:	18fb      	adds	r3, r7, r3
    201e:	2257      	movs	r2, #87	; 0x57
    2020:	801a      	strh	r2, [r3, #0]
    2022:	2310      	movs	r3, #16
    2024:	18fb      	adds	r3, r7, r3
    2026:	683a      	ldr	r2, [r7, #0]
    2028:	605a      	str	r2, [r3, #4]
	
	
	//  Write 16bit read address
	//  Set Up packet
	uint8_t add_buf[2];
	add_buf[0] = data_address>>8;//high byte
    202a:	1dbb      	adds	r3, r7, #6
    202c:	881b      	ldrh	r3, [r3, #0]
    202e:	0a1b      	lsrs	r3, r3, #8
    2030:	b29b      	uxth	r3, r3
    2032:	b2da      	uxtb	r2, r3
    2034:	230c      	movs	r3, #12
    2036:	18fb      	adds	r3, r7, r3
    2038:	701a      	strb	r2, [r3, #0]
	add_buf[1] = data_address & 0xff;//low byte
    203a:	1dbb      	adds	r3, r7, #6
    203c:	881b      	ldrh	r3, [r3, #0]
    203e:	b2da      	uxtb	r2, r3
    2040:	230c      	movs	r3, #12
    2042:	18fb      	adds	r3, r7, r3
    2044:	705a      	strb	r2, [r3, #1]
	packet.data = add_buf;
    2046:	2310      	movs	r3, #16
    2048:	18fb      	adds	r3, r7, r3
    204a:	220c      	movs	r2, #12
    204c:	18ba      	adds	r2, r7, r2
    204e:	605a      	str	r2, [r3, #4]
	packet.data_length=2;
    2050:	2310      	movs	r3, #16
    2052:	18fb      	adds	r3, r7, r3
    2054:	2202      	movs	r2, #2
    2056:	805a      	strh	r2, [r3, #2]
	timeout=0;
    2058:	231e      	movs	r3, #30
    205a:	18fb      	adds	r3, r7, r3
    205c:	2200      	movs	r2, #0
    205e:	801a      	strh	r2, [r3, #0]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    2060:	e00b      	b.n	207a <STACK_SIZE+0x7a>
		if (timeout++ == limit) {   break;   }
    2062:	231e      	movs	r3, #30
    2064:	18fb      	adds	r3, r7, r3
    2066:	881b      	ldrh	r3, [r3, #0]
    2068:	221e      	movs	r2, #30
    206a:	18ba      	adds	r2, r7, r2
    206c:	1c59      	adds	r1, r3, #1
    206e:	8011      	strh	r1, [r2, #0]
    2070:	221c      	movs	r2, #28
    2072:	18ba      	adds	r2, r7, r2
    2074:	8812      	ldrh	r2, [r2, #0]
    2076:	429a      	cmp	r2, r3
    2078:	d009      	beq.n	208e <STACK_SIZE+0x8e>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    207a:	2310      	movs	r3, #16
    207c:	18fa      	adds	r2, r7, r3
    207e:	4b1a      	ldr	r3, [pc, #104]	; (20e8 <STACK_SIZE+0xe8>)
    2080:	0011      	movs	r1, r2
    2082:	0018      	movs	r0, r3
    2084:	4b19      	ldr	r3, [pc, #100]	; (20ec <STACK_SIZE+0xec>)
    2086:	4798      	blx	r3
    2088:	1e03      	subs	r3, r0, #0
    208a:	d1ea      	bne.n	2062 <STACK_SIZE+0x62>
    208c:	e000      	b.n	2090 <STACK_SIZE+0x90>
		if (timeout++ == limit) {   break;   }
    208e:	46c0      	nop			; (mov r8, r8)
	}
	//  Send read request to eeprom chip
	packet.data = data_buf;
    2090:	2310      	movs	r3, #16
    2092:	18fb      	adds	r3, r7, r3
    2094:	683a      	ldr	r2, [r7, #0]
    2096:	605a      	str	r2, [r3, #4]
	packet.data_length=bytes_to_read;
    2098:	1d7b      	adds	r3, r7, #5
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	b29a      	uxth	r2, r3
    209e:	2310      	movs	r3, #16
    20a0:	18fb      	adds	r3, r7, r3
    20a2:	805a      	strh	r2, [r3, #2]
	timeout=0;
    20a4:	231e      	movs	r3, #30
    20a6:	18fb      	adds	r3, r7, r3
    20a8:	2200      	movs	r2, #0
    20aa:	801a      	strh	r2, [r3, #0]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    20ac:	e00b      	b.n	20c6 <STACK_SIZE+0xc6>
		if (timeout++ == limit) {   break;   }
    20ae:	231e      	movs	r3, #30
    20b0:	18fb      	adds	r3, r7, r3
    20b2:	881b      	ldrh	r3, [r3, #0]
    20b4:	221e      	movs	r2, #30
    20b6:	18ba      	adds	r2, r7, r2
    20b8:	1c59      	adds	r1, r3, #1
    20ba:	8011      	strh	r1, [r2, #0]
    20bc:	221c      	movs	r2, #28
    20be:	18ba      	adds	r2, r7, r2
    20c0:	8812      	ldrh	r2, [r2, #0]
    20c2:	429a      	cmp	r2, r3
    20c4:	d009      	beq.n	20da <STACK_SIZE+0xda>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    20c6:	2310      	movs	r3, #16
    20c8:	18fa      	adds	r2, r7, r3
    20ca:	4b07      	ldr	r3, [pc, #28]	; (20e8 <STACK_SIZE+0xe8>)
    20cc:	0011      	movs	r1, r2
    20ce:	0018      	movs	r0, r3
    20d0:	4b07      	ldr	r3, [pc, #28]	; (20f0 <STACK_SIZE+0xf0>)
    20d2:	4798      	blx	r3
    20d4:	1e03      	subs	r3, r0, #0
    20d6:	d1ea      	bne.n	20ae <STACK_SIZE+0xae>
	}
	
	
	
	
}
    20d8:	e000      	b.n	20dc <STACK_SIZE+0xdc>
		if (timeout++ == limit) {   break;   }
    20da:	46c0      	nop			; (mov r8, r8)
}
    20dc:	46c0      	nop			; (mov r8, r8)
    20de:	46bd      	mov	sp, r7
    20e0:	b008      	add	sp, #32
    20e2:	bd80      	pop	{r7, pc}
    20e4:	00023c9d 	.word	0x00023c9d
    20e8:	200012ac 	.word	0x200012ac
    20ec:	00007bd1 	.word	0x00007bd1
    20f0:	00007a19 	.word	0x00007a19

000020f4 <EEPROM_write>:

void EEPROM_write(uint16_t address_init, uint8_t data_buf[], uint8_t bytes_to_write){
    20f4:	b590      	push	{r4, r7, lr}
    20f6:	b093      	sub	sp, #76	; 0x4c
    20f8:	af00      	add	r7, sp, #0
    20fa:	6039      	str	r1, [r7, #0]
    20fc:	0011      	movs	r1, r2
    20fe:	1dbb      	adds	r3, r7, #6
    2100:	1c02      	adds	r2, r0, #0
    2102:	801a      	strh	r2, [r3, #0]
    2104:	1d7b      	adds	r3, r7, #5
    2106:	1c0a      	adds	r2, r1, #0
    2108:	701a      	strb	r2, [r3, #0]
	uint8_t send_buf[page_size+2];
	uint8_t bytes_packet;
	uint16_t address_packet;
	struct i2c_master_packet packet;
	
	uint16_t limit=200;
    210a:	2340      	movs	r3, #64	; 0x40
    210c:	18fb      	adds	r3, r7, r3
    210e:	22c8      	movs	r2, #200	; 0xc8
    2110:	801a      	strh	r2, [r3, #0]
	uint16_t timeout;
	//  Packet template
	packet.data = send_buf;
    2112:	230c      	movs	r3, #12
    2114:	18fb      	adds	r3, r7, r3
    2116:	2218      	movs	r2, #24
    2118:	18ba      	adds	r2, r7, r2
    211a:	605a      	str	r2, [r3, #4]
	packet.ten_bit_address = false;
    211c:	230c      	movs	r3, #12
    211e:	18fb      	adds	r3, r7, r3
    2120:	2200      	movs	r2, #0
    2122:	721a      	strb	r2, [r3, #8]
	packet.high_speed = false;
    2124:	230c      	movs	r3, #12
    2126:	18fb      	adds	r3, r7, r3
    2128:	2200      	movs	r2, #0
    212a:	725a      	strb	r2, [r3, #9]
	packet.hs_master_code = 0x0;
    212c:	230c      	movs	r3, #12
    212e:	18fb      	adds	r3, r7, r3
    2130:	2200      	movs	r2, #0
    2132:	729a      	strb	r2, [r3, #10]
	packet.address = EEPROM_add;
    2134:	230c      	movs	r3, #12
    2136:	18fb      	adds	r3, r7, r3
    2138:	2257      	movs	r2, #87	; 0x57
    213a:	801a      	strh	r2, [r3, #0]
	//  Determine number of packets
	packets = floor(bytes_to_write/page_size)+1;
    213c:	1d7b      	adds	r3, r7, #5
    213e:	781b      	ldrb	r3, [r3, #0]
    2140:	095b      	lsrs	r3, r3, #5
    2142:	b2db      	uxtb	r3, r3
    2144:	001a      	movs	r2, r3
    2146:	4b56      	ldr	r3, [pc, #344]	; (22a0 <EEPROM_write+0x1ac>)
    2148:	0010      	movs	r0, r2
    214a:	4798      	blx	r3
    214c:	0003      	movs	r3, r0
    214e:	000c      	movs	r4, r1
    2150:	0018      	movs	r0, r3
    2152:	0021      	movs	r1, r4
    2154:	4b53      	ldr	r3, [pc, #332]	; (22a4 <EEPROM_write+0x1b0>)
    2156:	4798      	blx	r3
    2158:	4c53      	ldr	r4, [pc, #332]	; (22a8 <EEPROM_write+0x1b4>)
    215a:	2200      	movs	r2, #0
    215c:	4b53      	ldr	r3, [pc, #332]	; (22ac <EEPROM_write+0x1b8>)
    215e:	47a0      	blx	r4
    2160:	0003      	movs	r3, r0
    2162:	000c      	movs	r4, r1
    2164:	0019      	movs	r1, r3
    2166:	0022      	movs	r2, r4
    2168:	233f      	movs	r3, #63	; 0x3f
    216a:	18fc      	adds	r4, r7, r3
    216c:	4b50      	ldr	r3, [pc, #320]	; (22b0 <EEPROM_write+0x1bc>)
    216e:	0008      	movs	r0, r1
    2170:	0011      	movs	r1, r2
    2172:	4798      	blx	r3
    2174:	0003      	movs	r3, r0
    2176:	7023      	strb	r3, [r4, #0]

	//  Iterate through packets
	for (p=0;p<packets;p++){
    2178:	2346      	movs	r3, #70	; 0x46
    217a:	18fb      	adds	r3, r7, r3
    217c:	2200      	movs	r2, #0
    217e:	701a      	strb	r2, [r3, #0]
    2180:	e081      	b.n	2286 <EEPROM_write+0x192>
		//  Determine bytes to write in packet
		if (bytes_to_write>page_size){
    2182:	1d7b      	adds	r3, r7, #5
    2184:	781b      	ldrb	r3, [r3, #0]
    2186:	2b20      	cmp	r3, #32
    2188:	d909      	bls.n	219e <EEPROM_write+0xaa>
			bytes_packet = page_size;
    218a:	2345      	movs	r3, #69	; 0x45
    218c:	18fb      	adds	r3, r7, r3
    218e:	2220      	movs	r2, #32
    2190:	701a      	strb	r2, [r3, #0]
			bytes_to_write = bytes_to_write-page_size;
    2192:	1d7b      	adds	r3, r7, #5
    2194:	1d7a      	adds	r2, r7, #5
    2196:	7812      	ldrb	r2, [r2, #0]
    2198:	3a20      	subs	r2, #32
    219a:	701a      	strb	r2, [r3, #0]
    219c:	e004      	b.n	21a8 <EEPROM_write+0xb4>
			}else{
			bytes_packet = bytes_to_write;
    219e:	2345      	movs	r3, #69	; 0x45
    21a0:	18fb      	adds	r3, r7, r3
    21a2:	1d7a      	adds	r2, r7, #5
    21a4:	7812      	ldrb	r2, [r2, #0]
    21a6:	701a      	strb	r2, [r3, #0]
		}
		packet.data_length = bytes_packet + 2;// Include 16-bit address
    21a8:	2345      	movs	r3, #69	; 0x45
    21aa:	18fb      	adds	r3, r7, r3
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	b29b      	uxth	r3, r3
    21b0:	3302      	adds	r3, #2
    21b2:	b29a      	uxth	r2, r3
    21b4:	230c      	movs	r3, #12
    21b6:	18fb      	adds	r3, r7, r3
    21b8:	805a      	strh	r2, [r3, #2]
		//  Set address
		address_packet = address_init + p*page_size;
    21ba:	2346      	movs	r3, #70	; 0x46
    21bc:	18fb      	adds	r3, r7, r3
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	b29b      	uxth	r3, r3
    21c2:	015b      	lsls	r3, r3, #5
    21c4:	b299      	uxth	r1, r3
    21c6:	233c      	movs	r3, #60	; 0x3c
    21c8:	18fb      	adds	r3, r7, r3
    21ca:	1dba      	adds	r2, r7, #6
    21cc:	8812      	ldrh	r2, [r2, #0]
    21ce:	188a      	adds	r2, r1, r2
    21d0:	801a      	strh	r2, [r3, #0]
		send_buf[0] = address_packet>>8;//high byte
    21d2:	233c      	movs	r3, #60	; 0x3c
    21d4:	18fb      	adds	r3, r7, r3
    21d6:	881b      	ldrh	r3, [r3, #0]
    21d8:	0a1b      	lsrs	r3, r3, #8
    21da:	b29b      	uxth	r3, r3
    21dc:	b2da      	uxtb	r2, r3
    21de:	2318      	movs	r3, #24
    21e0:	18fb      	adds	r3, r7, r3
    21e2:	701a      	strb	r2, [r3, #0]
		send_buf[1] = address_packet & 0x00FF;// low byte
    21e4:	233c      	movs	r3, #60	; 0x3c
    21e6:	18fb      	adds	r3, r7, r3
    21e8:	881b      	ldrh	r3, [r3, #0]
    21ea:	b2da      	uxtb	r2, r3
    21ec:	2318      	movs	r3, #24
    21ee:	18fb      	adds	r3, r7, r3
    21f0:	705a      	strb	r2, [r3, #1]
		//  Copy data to buffer
		for (k=0;k<bytes_packet;k++){
    21f2:	2347      	movs	r3, #71	; 0x47
    21f4:	18fb      	adds	r3, r7, r3
    21f6:	2200      	movs	r2, #0
    21f8:	701a      	strb	r2, [r3, #0]
    21fa:	e019      	b.n	2230 <EEPROM_write+0x13c>
			send_buf[k+2] = data_buf[p*page_size+k];
    21fc:	2347      	movs	r3, #71	; 0x47
    21fe:	18fb      	adds	r3, r7, r3
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	3302      	adds	r3, #2
    2204:	2246      	movs	r2, #70	; 0x46
    2206:	18ba      	adds	r2, r7, r2
    2208:	7812      	ldrb	r2, [r2, #0]
    220a:	0151      	lsls	r1, r2, #5
    220c:	2247      	movs	r2, #71	; 0x47
    220e:	18ba      	adds	r2, r7, r2
    2210:	7812      	ldrb	r2, [r2, #0]
    2212:	188a      	adds	r2, r1, r2
    2214:	0011      	movs	r1, r2
    2216:	683a      	ldr	r2, [r7, #0]
    2218:	1852      	adds	r2, r2, r1
    221a:	7811      	ldrb	r1, [r2, #0]
    221c:	2218      	movs	r2, #24
    221e:	18ba      	adds	r2, r7, r2
    2220:	54d1      	strb	r1, [r2, r3]
		for (k=0;k<bytes_packet;k++){
    2222:	2347      	movs	r3, #71	; 0x47
    2224:	18fb      	adds	r3, r7, r3
    2226:	781a      	ldrb	r2, [r3, #0]
    2228:	2347      	movs	r3, #71	; 0x47
    222a:	18fb      	adds	r3, r7, r3
    222c:	3201      	adds	r2, #1
    222e:	701a      	strb	r2, [r3, #0]
    2230:	2347      	movs	r3, #71	; 0x47
    2232:	18fa      	adds	r2, r7, r3
    2234:	2345      	movs	r3, #69	; 0x45
    2236:	18fb      	adds	r3, r7, r3
    2238:	7812      	ldrb	r2, [r2, #0]
    223a:	781b      	ldrb	r3, [r3, #0]
    223c:	429a      	cmp	r2, r3
    223e:	d3dd      	bcc.n	21fc <EEPROM_write+0x108>
		}
		// Send Packet
		timeout=0;
    2240:	2342      	movs	r3, #66	; 0x42
    2242:	18fb      	adds	r3, r7, r3
    2244:	2200      	movs	r2, #0
    2246:	801a      	strh	r2, [r3, #0]
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    2248:	e00b      	b.n	2262 <EEPROM_write+0x16e>
			if (timeout++ == limit) {   break;   }
    224a:	2342      	movs	r3, #66	; 0x42
    224c:	18fb      	adds	r3, r7, r3
    224e:	881b      	ldrh	r3, [r3, #0]
    2250:	2242      	movs	r2, #66	; 0x42
    2252:	18ba      	adds	r2, r7, r2
    2254:	1c59      	adds	r1, r3, #1
    2256:	8011      	strh	r1, [r2, #0]
    2258:	2240      	movs	r2, #64	; 0x40
    225a:	18ba      	adds	r2, r7, r2
    225c:	8812      	ldrh	r2, [r2, #0]
    225e:	429a      	cmp	r2, r3
    2260:	d009      	beq.n	2276 <EEPROM_write+0x182>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    2262:	230c      	movs	r3, #12
    2264:	18fa      	adds	r2, r7, r3
    2266:	4b13      	ldr	r3, [pc, #76]	; (22b4 <EEPROM_write+0x1c0>)
    2268:	0011      	movs	r1, r2
    226a:	0018      	movs	r0, r3
    226c:	4b12      	ldr	r3, [pc, #72]	; (22b8 <EEPROM_write+0x1c4>)
    226e:	4798      	blx	r3
    2270:	1e03      	subs	r3, r0, #0
    2272:	d1ea      	bne.n	224a <EEPROM_write+0x156>
    2274:	e000      	b.n	2278 <EEPROM_write+0x184>
			if (timeout++ == limit) {   break;   }
    2276:	46c0      	nop			; (mov r8, r8)
	for (p=0;p<packets;p++){
    2278:	2346      	movs	r3, #70	; 0x46
    227a:	18fb      	adds	r3, r7, r3
    227c:	781a      	ldrb	r2, [r3, #0]
    227e:	2346      	movs	r3, #70	; 0x46
    2280:	18fb      	adds	r3, r7, r3
    2282:	3201      	adds	r2, #1
    2284:	701a      	strb	r2, [r3, #0]
    2286:	2346      	movs	r3, #70	; 0x46
    2288:	18fa      	adds	r2, r7, r3
    228a:	233f      	movs	r3, #63	; 0x3f
    228c:	18fb      	adds	r3, r7, r3
    228e:	7812      	ldrb	r2, [r2, #0]
    2290:	781b      	ldrb	r3, [r3, #0]
    2292:	429a      	cmp	r2, r3
    2294:	d200      	bcs.n	2298 <EEPROM_write+0x1a4>
    2296:	e774      	b.n	2182 <EEPROM_write+0x8e>
		}
		
	}
	
}
    2298:	46c0      	nop			; (mov r8, r8)
    229a:	46bd      	mov	sp, r7
    229c:	b013      	add	sp, #76	; 0x4c
    229e:	bd90      	pop	{r4, r7, pc}
    22a0:	00023919 	.word	0x00023919
    22a4:	0001e1f5 	.word	0x0001e1f5
    22a8:	00021ebd 	.word	0x00021ebd
    22ac:	3ff00000 	.word	0x3ff00000
    22b0:	00021099 	.word	0x00021099
    22b4:	200012ac 	.word	0x200012ac
    22b8:	00007bd1 	.word	0x00007bd1

000022bc <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    22bc:	b580      	push	{r7, lr}
    22be:	b082      	sub	sp, #8
    22c0:	af00      	add	r7, sp, #0
    22c2:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	095b      	lsrs	r3, r3, #5
}
    22c8:	0018      	movs	r0, r3
    22ca:	46bd      	mov	sp, r7
    22cc:	b002      	add	sp, #8
    22ce:	bd80      	pop	{r7, pc}

000022d0 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    22d0:	b580      	push	{r7, lr}
    22d2:	b082      	sub	sp, #8
    22d4:	af00      	add	r7, sp, #0
    22d6:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	01db      	lsls	r3, r3, #7
    22dc:	4a03      	ldr	r2, [pc, #12]	; (22ec <arch_ioport_port_to_base+0x1c>)
    22de:	4694      	mov	ip, r2
    22e0:	4463      	add	r3, ip
}
    22e2:	0018      	movs	r0, r3
    22e4:	46bd      	mov	sp, r7
    22e6:	b002      	add	sp, #8
    22e8:	bd80      	pop	{r7, pc}
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	40002800 	.word	0x40002800

000022f0 <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
    22f0:	b580      	push	{r7, lr}
    22f2:	b082      	sub	sp, #8
    22f4:	af00      	add	r7, sp, #0
    22f6:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    22f8:	687b      	ldr	r3, [r7, #4]
    22fa:	0018      	movs	r0, r3
    22fc:	4b05      	ldr	r3, [pc, #20]	; (2314 <arch_ioport_pin_to_base+0x24>)
    22fe:	4798      	blx	r3
    2300:	0003      	movs	r3, r0
    2302:	0018      	movs	r0, r3
    2304:	4b04      	ldr	r3, [pc, #16]	; (2318 <arch_ioport_pin_to_base+0x28>)
    2306:	4798      	blx	r3
    2308:	0003      	movs	r3, r0
}
    230a:	0018      	movs	r0, r3
    230c:	46bd      	mov	sp, r7
    230e:	b002      	add	sp, #8
    2310:	bd80      	pop	{r7, pc}
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	000022bd 	.word	0x000022bd
    2318:	000022d1 	.word	0x000022d1

0000231c <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    231c:	b580      	push	{r7, lr}
    231e:	b082      	sub	sp, #8
    2320:	af00      	add	r7, sp, #0
    2322:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    2324:	687b      	ldr	r3, [r7, #4]
    2326:	221f      	movs	r2, #31
    2328:	4013      	ands	r3, r2
    232a:	2201      	movs	r2, #1
    232c:	409a      	lsls	r2, r3
    232e:	0013      	movs	r3, r2
}
    2330:	0018      	movs	r0, r3
    2332:	46bd      	mov	sp, r7
    2334:	b002      	add	sp, #8
    2336:	bd80      	pop	{r7, pc}

00002338 <arch_ioport_set_pin_level>:
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
}

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
    2338:	b590      	push	{r4, r7, lr}
    233a:	b083      	sub	sp, #12
    233c:	af00      	add	r7, sp, #0
    233e:	6078      	str	r0, [r7, #4]
    2340:	000a      	movs	r2, r1
    2342:	1cfb      	adds	r3, r7, #3
    2344:	701a      	strb	r2, [r3, #0]
	if (level) {
    2346:	1cfb      	adds	r3, r7, #3
    2348:	781b      	ldrb	r3, [r3, #0]
    234a:	2b00      	cmp	r3, #0
    234c:	d00b      	beq.n	2366 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    234e:	687b      	ldr	r3, [r7, #4]
    2350:	0018      	movs	r0, r3
    2352:	4b0c      	ldr	r3, [pc, #48]	; (2384 <arch_ioport_set_pin_level+0x4c>)
    2354:	4798      	blx	r3
    2356:	0004      	movs	r4, r0
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	0018      	movs	r0, r3
    235c:	4b0a      	ldr	r3, [pc, #40]	; (2388 <arch_ioport_set_pin_level+0x50>)
    235e:	4798      	blx	r3
    2360:	0003      	movs	r3, r0
    2362:	61a3      	str	r3, [r4, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
	}
}
    2364:	e00a      	b.n	237c <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	0018      	movs	r0, r3
    236a:	4b06      	ldr	r3, [pc, #24]	; (2384 <arch_ioport_set_pin_level+0x4c>)
    236c:	4798      	blx	r3
    236e:	0004      	movs	r4, r0
    2370:	687b      	ldr	r3, [r7, #4]
    2372:	0018      	movs	r0, r3
    2374:	4b04      	ldr	r3, [pc, #16]	; (2388 <arch_ioport_set_pin_level+0x50>)
    2376:	4798      	blx	r3
    2378:	0003      	movs	r3, r0
    237a:	6163      	str	r3, [r4, #20]
}
    237c:	46c0      	nop			; (mov r8, r8)
    237e:	46bd      	mov	sp, r7
    2380:	b003      	add	sp, #12
    2382:	bd90      	pop	{r4, r7, pc}
    2384:	000022f1 	.word	0x000022f1
    2388:	0000231d 	.word	0x0000231d

0000238c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    238c:	b580      	push	{r7, lr}
    238e:	b082      	sub	sp, #8
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
    2394:	000a      	movs	r2, r1
    2396:	1cfb      	adds	r3, r7, #3
    2398:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    239a:	1cfb      	adds	r3, r7, #3
    239c:	781a      	ldrb	r2, [r3, #0]
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	0011      	movs	r1, r2
    23a2:	0018      	movs	r0, r3
    23a4:	4b02      	ldr	r3, [pc, #8]	; (23b0 <ioport_set_pin_level+0x24>)
    23a6:	4798      	blx	r3
}
    23a8:	46c0      	nop			; (mov r8, r8)
    23aa:	46bd      	mov	sp, r7
    23ac:	b002      	add	sp, #8
    23ae:	bd80      	pop	{r7, pc}
    23b0:	00002339 	.word	0x00002339

000023b4 <adjustErrorSensitivity>:
extern struct CAL_REPORT cal_report_azm_inc;
#define errorSensitivityAdjustmentIncrement 0.25
#define errorSensitivityAdjustmentMin		 0.5
#define errorSensitivityAdjustmentMax		3

void adjustErrorSensitivity(void){
    23b4:	b580      	push	{r7, lr}
    23b6:	af00      	add	r7, sp, #0
	options.errorSensitivity = options.errorSensitivity+errorSensitivityAdjustmentIncrement;
    23b8:	4b0d      	ldr	r3, [pc, #52]	; (23f0 <adjustErrorSensitivity+0x3c>)
    23ba:	689a      	ldr	r2, [r3, #8]
    23bc:	4b0d      	ldr	r3, [pc, #52]	; (23f4 <adjustErrorSensitivity+0x40>)
    23be:	21fa      	movs	r1, #250	; 0xfa
    23c0:	0589      	lsls	r1, r1, #22
    23c2:	1c10      	adds	r0, r2, #0
    23c4:	4798      	blx	r3
    23c6:	1c03      	adds	r3, r0, #0
    23c8:	1c1a      	adds	r2, r3, #0
    23ca:	4b09      	ldr	r3, [pc, #36]	; (23f0 <adjustErrorSensitivity+0x3c>)
    23cc:	609a      	str	r2, [r3, #8]
	
	if (options.errorSensitivity>errorSensitivityAdjustmentMax){
    23ce:	4b08      	ldr	r3, [pc, #32]	; (23f0 <adjustErrorSensitivity+0x3c>)
    23d0:	689a      	ldr	r2, [r3, #8]
    23d2:	4b09      	ldr	r3, [pc, #36]	; (23f8 <adjustErrorSensitivity+0x44>)
    23d4:	4909      	ldr	r1, [pc, #36]	; (23fc <adjustErrorSensitivity+0x48>)
    23d6:	1c10      	adds	r0, r2, #0
    23d8:	4798      	blx	r3
    23da:	1e03      	subs	r3, r0, #0
    23dc:	d100      	bne.n	23e0 <adjustErrorSensitivity+0x2c>
		
	}
	
	
	
}
    23de:	e003      	b.n	23e8 <adjustErrorSensitivity+0x34>
		options.errorSensitivity = errorSensitivityAdjustmentMin;
    23e0:	4b03      	ldr	r3, [pc, #12]	; (23f0 <adjustErrorSensitivity+0x3c>)
    23e2:	22fc      	movs	r2, #252	; 0xfc
    23e4:	0592      	lsls	r2, r2, #22
    23e6:	609a      	str	r2, [r3, #8]
}
    23e8:	46c0      	nop			; (mov r8, r8)
    23ea:	46bd      	mov	sp, r7
    23ec:	bd80      	pop	{r7, pc}
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	200034a8 	.word	0x200034a8
    23f4:	000210d5 	.word	0x000210d5
    23f8:	00020f71 	.word	0x00020f71
    23fc:	40400000 	.word	0x40400000

00002400 <error_check>:


void error_check(struct MEASUREMENT *meas_inst){
    2400:	b5f0      	push	{r4, r5, r6, r7, lr}
    2402:	b099      	sub	sp, #100	; 0x64
    2404:	af02      	add	r7, sp, #8
    2406:	6078      	str	r0, [r7, #4]
	float foo1, foo2;
	uint8_t i;
	#define errlim_mag 200 // number of stdev's
	#define errlim_disp 200 // number of stdev's
	
	accel_err_limit = errlim_mag*max(cal_report_azm_inc.mag_stdev_a1, cal_report_azm_inc.mag_stdev_a2);
    2408:	4bc9      	ldr	r3, [pc, #804]	; (2730 <error_check+0x330>)
    240a:	699a      	ldr	r2, [r3, #24]
    240c:	4bc8      	ldr	r3, [pc, #800]	; (2730 <error_check+0x330>)
    240e:	69d9      	ldr	r1, [r3, #28]
    2410:	4bc8      	ldr	r3, [pc, #800]	; (2734 <error_check+0x334>)
    2412:	1c10      	adds	r0, r2, #0
    2414:	4798      	blx	r3
    2416:	1e03      	subs	r3, r0, #0
    2418:	d007      	beq.n	242a <error_check+0x2a>
    241a:	4bc5      	ldr	r3, [pc, #788]	; (2730 <error_check+0x330>)
    241c:	699a      	ldr	r2, [r3, #24]
    241e:	4bc6      	ldr	r3, [pc, #792]	; (2738 <error_check+0x338>)
    2420:	49c6      	ldr	r1, [pc, #792]	; (273c <error_check+0x33c>)
    2422:	1c10      	adds	r0, r2, #0
    2424:	4798      	blx	r3
    2426:	1c03      	adds	r3, r0, #0
    2428:	e006      	b.n	2438 <error_check+0x38>
    242a:	4bc1      	ldr	r3, [pc, #772]	; (2730 <error_check+0x330>)
    242c:	69da      	ldr	r2, [r3, #28]
    242e:	4bc2      	ldr	r3, [pc, #776]	; (2738 <error_check+0x338>)
    2430:	49c2      	ldr	r1, [pc, #776]	; (273c <error_check+0x33c>)
    2432:	1c10      	adds	r0, r2, #0
    2434:	4798      	blx	r3
    2436:	1c03      	adds	r3, r0, #0
    2438:	64bb      	str	r3, [r7, #72]	; 0x48
	comp_err_limit  = errlim_mag*max(cal_report_azm_inc.mag_stdev_c1, cal_report_azm_inc.mag_stdev_c2);
    243a:	4bbd      	ldr	r3, [pc, #756]	; (2730 <error_check+0x330>)
    243c:	6a1a      	ldr	r2, [r3, #32]
    243e:	4bbc      	ldr	r3, [pc, #752]	; (2730 <error_check+0x330>)
    2440:	6a59      	ldr	r1, [r3, #36]	; 0x24
    2442:	4bbc      	ldr	r3, [pc, #752]	; (2734 <error_check+0x334>)
    2444:	1c10      	adds	r0, r2, #0
    2446:	4798      	blx	r3
    2448:	1e03      	subs	r3, r0, #0
    244a:	d007      	beq.n	245c <error_check+0x5c>
    244c:	4bb8      	ldr	r3, [pc, #736]	; (2730 <error_check+0x330>)
    244e:	6a1a      	ldr	r2, [r3, #32]
    2450:	4bb9      	ldr	r3, [pc, #740]	; (2738 <error_check+0x338>)
    2452:	49ba      	ldr	r1, [pc, #744]	; (273c <error_check+0x33c>)
    2454:	1c10      	adds	r0, r2, #0
    2456:	4798      	blx	r3
    2458:	1c03      	adds	r3, r0, #0
    245a:	e006      	b.n	246a <error_check+0x6a>
    245c:	4bb4      	ldr	r3, [pc, #720]	; (2730 <error_check+0x330>)
    245e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2460:	4bb5      	ldr	r3, [pc, #724]	; (2738 <error_check+0x338>)
    2462:	49b6      	ldr	r1, [pc, #728]	; (273c <error_check+0x33c>)
    2464:	1c10      	adds	r0, r2, #0
    2466:	4798      	blx	r3
    2468:	1c03      	adds	r3, r0, #0
    246a:	647b      	str	r3, [r7, #68]	; 0x44
	
	accel_err_limit = 0.5;
    246c:	23fc      	movs	r3, #252	; 0xfc
    246e:	059b      	lsls	r3, r3, #22
    2470:	64bb      	str	r3, [r7, #72]	; 0x48
	comp_err_limit  = 0.5;
    2472:	23fc      	movs	r3, #252	; 0xfc
    2474:	059b      	lsls	r3, r3, #22
    2476:	647b      	str	r3, [r7, #68]	; 0x44
	
	maga1 = calc_magnitude(meas_inst->a1xyz);
    2478:	687b      	ldr	r3, [r7, #4]
    247a:	3320      	adds	r3, #32
    247c:	0018      	movs	r0, r3
    247e:	4bb0      	ldr	r3, [pc, #704]	; (2740 <error_check+0x340>)
    2480:	4798      	blx	r3
    2482:	1c03      	adds	r3, r0, #0
    2484:	643b      	str	r3, [r7, #64]	; 0x40
	maga2 = calc_magnitude(meas_inst->a2xyz);
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	332c      	adds	r3, #44	; 0x2c
    248a:	0018      	movs	r0, r3
    248c:	4bac      	ldr	r3, [pc, #688]	; (2740 <error_check+0x340>)
    248e:	4798      	blx	r3
    2490:	1c03      	adds	r3, r0, #0
    2492:	63fb      	str	r3, [r7, #60]	; 0x3c
	magc1 = calc_magnitude(meas_inst->c1xyz);
    2494:	687b      	ldr	r3, [r7, #4]
    2496:	3338      	adds	r3, #56	; 0x38
    2498:	0018      	movs	r0, r3
    249a:	4ba9      	ldr	r3, [pc, #676]	; (2740 <error_check+0x340>)
    249c:	4798      	blx	r3
    249e:	1c03      	adds	r3, r0, #0
    24a0:	63bb      	str	r3, [r7, #56]	; 0x38
	magc2 = calc_magnitude(meas_inst->c2xyz);
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	3344      	adds	r3, #68	; 0x44
    24a6:	0018      	movs	r0, r3
    24a8:	4ba5      	ldr	r3, [pc, #660]	; (2740 <error_check+0x340>)
    24aa:	4798      	blx	r3
    24ac:	1c03      	adds	r3, r0, #0
    24ae:	637b      	str	r3, [r7, #52]	; 0x34
		
	//  Magnitude Check accelerometer 1
	//mag = calc_magnitude(meas_inst->a1xyz);
	delta = fabs(maga1-1);
    24b0:	4ba4      	ldr	r3, [pc, #656]	; (2744 <error_check+0x344>)
    24b2:	21fe      	movs	r1, #254	; 0xfe
    24b4:	0589      	lsls	r1, r1, #22
    24b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
    24b8:	4798      	blx	r3
    24ba:	1c03      	adds	r3, r0, #0
    24bc:	005b      	lsls	r3, r3, #1
    24be:	085b      	lsrs	r3, r3, #1
    24c0:	633b      	str	r3, [r7, #48]	; 0x30
	if (fabs(maga1-1)>accel_err_limit)
    24c2:	4ba0      	ldr	r3, [pc, #640]	; (2744 <error_check+0x344>)
    24c4:	21fe      	movs	r1, #254	; 0xfe
    24c6:	0589      	lsls	r1, r1, #22
    24c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
    24ca:	4798      	blx	r3
    24cc:	1c03      	adds	r3, r0, #0
    24ce:	005b      	lsls	r3, r3, #1
    24d0:	085a      	lsrs	r2, r3, #1
    24d2:	4b98      	ldr	r3, [pc, #608]	; (2734 <error_check+0x334>)
    24d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    24d6:	1c10      	adds	r0, r2, #0
    24d8:	4798      	blx	r3
    24da:	1e03      	subs	r3, r0, #0
    24dc:	d014      	beq.n	2508 <error_check+0x108>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = accel1_mag_err;
    24de:	687b      	ldr	r3, [r7, #4]
    24e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    24e2:	687a      	ldr	r2, [r7, #4]
    24e4:	215c      	movs	r1, #92	; 0x5c
    24e6:	18d3      	adds	r3, r2, r3
    24e8:	185b      	adds	r3, r3, r1
    24ea:	2201      	movs	r2, #1
    24ec:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = maga1;
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    24f2:	687a      	ldr	r2, [r7, #4]
    24f4:	3318      	adds	r3, #24
    24f6:	009b      	lsls	r3, r3, #2
    24f8:	18d3      	adds	r3, r2, r3
    24fa:	3304      	adds	r3, #4
    24fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    24fe:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	0018      	movs	r0, r3
    2504:	4b90      	ldr	r3, [pc, #576]	; (2748 <error_check+0x348>)
    2506:	4798      	blx	r3
	}
	//  Magnitude Check accelerometer 2
	//mag = calc_magnitude(meas_inst->a2xyz);
	delta = fabs(maga2-1);
    2508:	4b8e      	ldr	r3, [pc, #568]	; (2744 <error_check+0x344>)
    250a:	21fe      	movs	r1, #254	; 0xfe
    250c:	0589      	lsls	r1, r1, #22
    250e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2510:	4798      	blx	r3
    2512:	1c03      	adds	r3, r0, #0
    2514:	005b      	lsls	r3, r3, #1
    2516:	085b      	lsrs	r3, r3, #1
    2518:	633b      	str	r3, [r7, #48]	; 0x30
	if (delta>accel_err_limit)
    251a:	4b86      	ldr	r3, [pc, #536]	; (2734 <error_check+0x334>)
    251c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    251e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    2520:	4798      	blx	r3
    2522:	1e03      	subs	r3, r0, #0
    2524:	d014      	beq.n	2550 <error_check+0x150>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = accel2_mag_err;
    2526:	687b      	ldr	r3, [r7, #4]
    2528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    252a:	687a      	ldr	r2, [r7, #4]
    252c:	215c      	movs	r1, #92	; 0x5c
    252e:	18d3      	adds	r3, r2, r3
    2530:	185b      	adds	r3, r3, r1
    2532:	2202      	movs	r2, #2
    2534:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = maga2;
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    253a:	687a      	ldr	r2, [r7, #4]
    253c:	3318      	adds	r3, #24
    253e:	009b      	lsls	r3, r3, #2
    2540:	18d3      	adds	r3, r2, r3
    2542:	3304      	adds	r3, #4
    2544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2546:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	0018      	movs	r0, r3
    254c:	4b7e      	ldr	r3, [pc, #504]	; (2748 <error_check+0x348>)
    254e:	4798      	blx	r3
	}
	//  Magnitude Check Compass 1
	//mag = calc_magnitude(meas_inst->c1xyz);
	delta = fabs(magc1-1);
    2550:	4b7c      	ldr	r3, [pc, #496]	; (2744 <error_check+0x344>)
    2552:	21fe      	movs	r1, #254	; 0xfe
    2554:	0589      	lsls	r1, r1, #22
    2556:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    2558:	4798      	blx	r3
    255a:	1c03      	adds	r3, r0, #0
    255c:	005b      	lsls	r3, r3, #1
    255e:	085b      	lsrs	r3, r3, #1
    2560:	633b      	str	r3, [r7, #48]	; 0x30
 	if (delta>comp_err_limit)
    2562:	4b74      	ldr	r3, [pc, #464]	; (2734 <error_check+0x334>)
    2564:	6c79      	ldr	r1, [r7, #68]	; 0x44
    2566:	6b38      	ldr	r0, [r7, #48]	; 0x30
    2568:	4798      	blx	r3
    256a:	1e03      	subs	r3, r0, #0
    256c:	d014      	beq.n	2598 <error_check+0x198>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = comp1_mag_err;
    256e:	687b      	ldr	r3, [r7, #4]
    2570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2572:	687a      	ldr	r2, [r7, #4]
    2574:	215c      	movs	r1, #92	; 0x5c
    2576:	18d3      	adds	r3, r2, r3
    2578:	185b      	adds	r3, r3, r1
    257a:	2203      	movs	r2, #3
    257c:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magc1;
    257e:	687b      	ldr	r3, [r7, #4]
    2580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2582:	687a      	ldr	r2, [r7, #4]
    2584:	3318      	adds	r3, #24
    2586:	009b      	lsls	r3, r3, #2
    2588:	18d3      	adds	r3, r2, r3
    258a:	3304      	adds	r3, #4
    258c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    258e:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    2590:	687b      	ldr	r3, [r7, #4]
    2592:	0018      	movs	r0, r3
    2594:	4b6c      	ldr	r3, [pc, #432]	; (2748 <error_check+0x348>)
    2596:	4798      	blx	r3

	}
	//  Magnitude Check Compass 2
	//mag = calc_magnitude(meas_inst->c2xyz);
	delta = fabs(magc2-1);
    2598:	4b6a      	ldr	r3, [pc, #424]	; (2744 <error_check+0x344>)
    259a:	21fe      	movs	r1, #254	; 0xfe
    259c:	0589      	lsls	r1, r1, #22
    259e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    25a0:	4798      	blx	r3
    25a2:	1c03      	adds	r3, r0, #0
    25a4:	005b      	lsls	r3, r3, #1
    25a6:	085b      	lsrs	r3, r3, #1
    25a8:	633b      	str	r3, [r7, #48]	; 0x30
	if (delta>comp_err_limit)
    25aa:	4b62      	ldr	r3, [pc, #392]	; (2734 <error_check+0x334>)
    25ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
    25ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
    25b0:	4798      	blx	r3
    25b2:	1e03      	subs	r3, r0, #0
    25b4:	d014      	beq.n	25e0 <error_check+0x1e0>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = comp2_mag_err;
    25b6:	687b      	ldr	r3, [r7, #4]
    25b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    25ba:	687a      	ldr	r2, [r7, #4]
    25bc:	215c      	movs	r1, #92	; 0x5c
    25be:	18d3      	adds	r3, r2, r3
    25c0:	185b      	adds	r3, r3, r1
    25c2:	2204      	movs	r2, #4
    25c4:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magc2;
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    25ca:	687a      	ldr	r2, [r7, #4]
    25cc:	3318      	adds	r3, #24
    25ce:	009b      	lsls	r3, r3, #2
    25d0:	18d3      	adds	r3, r2, r3
    25d2:	3304      	adds	r3, #4
    25d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    25d6:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	0018      	movs	r0, r3
    25dc:	4b5a      	ldr	r3, [pc, #360]	; (2748 <error_check+0x348>)
    25de:	4798      	blx	r3

	}
	
	accel_err_limit = errlim_disp*max(cal_report_azm_inc.mag_stdev_a1, cal_report_azm_inc.mag_stdev_a2);
    25e0:	4b53      	ldr	r3, [pc, #332]	; (2730 <error_check+0x330>)
    25e2:	699a      	ldr	r2, [r3, #24]
    25e4:	4b52      	ldr	r3, [pc, #328]	; (2730 <error_check+0x330>)
    25e6:	69d9      	ldr	r1, [r3, #28]
    25e8:	4b52      	ldr	r3, [pc, #328]	; (2734 <error_check+0x334>)
    25ea:	1c10      	adds	r0, r2, #0
    25ec:	4798      	blx	r3
    25ee:	1e03      	subs	r3, r0, #0
    25f0:	d007      	beq.n	2602 <error_check+0x202>
    25f2:	4b4f      	ldr	r3, [pc, #316]	; (2730 <error_check+0x330>)
    25f4:	699a      	ldr	r2, [r3, #24]
    25f6:	4b50      	ldr	r3, [pc, #320]	; (2738 <error_check+0x338>)
    25f8:	4950      	ldr	r1, [pc, #320]	; (273c <error_check+0x33c>)
    25fa:	1c10      	adds	r0, r2, #0
    25fc:	4798      	blx	r3
    25fe:	1c03      	adds	r3, r0, #0
    2600:	e006      	b.n	2610 <error_check+0x210>
    2602:	4b4b      	ldr	r3, [pc, #300]	; (2730 <error_check+0x330>)
    2604:	69da      	ldr	r2, [r3, #28]
    2606:	4b4c      	ldr	r3, [pc, #304]	; (2738 <error_check+0x338>)
    2608:	494c      	ldr	r1, [pc, #304]	; (273c <error_check+0x33c>)
    260a:	1c10      	adds	r0, r2, #0
    260c:	4798      	blx	r3
    260e:	1c03      	adds	r3, r0, #0
    2610:	64bb      	str	r3, [r7, #72]	; 0x48
	comp_err_limit  = errlim_disp*max(cal_report_azm_inc.mag_stdev_c1, cal_report_azm_inc.mag_stdev_c2);
    2612:	4b47      	ldr	r3, [pc, #284]	; (2730 <error_check+0x330>)
    2614:	6a1a      	ldr	r2, [r3, #32]
    2616:	4b46      	ldr	r3, [pc, #280]	; (2730 <error_check+0x330>)
    2618:	6a59      	ldr	r1, [r3, #36]	; 0x24
    261a:	4b46      	ldr	r3, [pc, #280]	; (2734 <error_check+0x334>)
    261c:	1c10      	adds	r0, r2, #0
    261e:	4798      	blx	r3
    2620:	1e03      	subs	r3, r0, #0
    2622:	d007      	beq.n	2634 <error_check+0x234>
    2624:	4b42      	ldr	r3, [pc, #264]	; (2730 <error_check+0x330>)
    2626:	6a1a      	ldr	r2, [r3, #32]
    2628:	4b43      	ldr	r3, [pc, #268]	; (2738 <error_check+0x338>)
    262a:	4944      	ldr	r1, [pc, #272]	; (273c <error_check+0x33c>)
    262c:	1c10      	adds	r0, r2, #0
    262e:	4798      	blx	r3
    2630:	1c03      	adds	r3, r0, #0
    2632:	e006      	b.n	2642 <error_check+0x242>
    2634:	4b3e      	ldr	r3, [pc, #248]	; (2730 <error_check+0x330>)
    2636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2638:	4b3f      	ldr	r3, [pc, #252]	; (2738 <error_check+0x338>)
    263a:	4940      	ldr	r1, [pc, #256]	; (273c <error_check+0x33c>)
    263c:	1c10      	adds	r0, r2, #0
    263e:	4798      	blx	r3
    2640:	1c03      	adds	r3, r0, #0
    2642:	647b      	str	r3, [r7, #68]	; 0x44
	
	
	
	// Axis check, Accelerometer
	for (i=0;i<3;i++){
    2644:	234f      	movs	r3, #79	; 0x4f
    2646:	18fb      	adds	r3, r7, r3
    2648:	2200      	movs	r2, #0
    264a:	701a      	strb	r2, [r3, #0]
    264c:	e066      	b.n	271c <error_check+0x31c>
		//  Cycle through all 3 axis
		delta = fabs((meas_inst->a1xyz[i]/maga1) - (meas_inst->a2xyz[i]/maga2));
    264e:	234f      	movs	r3, #79	; 0x4f
    2650:	18fb      	adds	r3, r7, r3
    2652:	781a      	ldrb	r2, [r3, #0]
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	3208      	adds	r2, #8
    2658:	0092      	lsls	r2, r2, #2
    265a:	58d2      	ldr	r2, [r2, r3]
    265c:	4b3b      	ldr	r3, [pc, #236]	; (274c <error_check+0x34c>)
    265e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    2660:	1c10      	adds	r0, r2, #0
    2662:	4798      	blx	r3
    2664:	1c03      	adds	r3, r0, #0
    2666:	1c1c      	adds	r4, r3, #0
    2668:	234f      	movs	r3, #79	; 0x4f
    266a:	18fb      	adds	r3, r7, r3
    266c:	781b      	ldrb	r3, [r3, #0]
    266e:	687a      	ldr	r2, [r7, #4]
    2670:	330a      	adds	r3, #10
    2672:	009b      	lsls	r3, r3, #2
    2674:	18d3      	adds	r3, r2, r3
    2676:	3304      	adds	r3, #4
    2678:	681a      	ldr	r2, [r3, #0]
    267a:	4b34      	ldr	r3, [pc, #208]	; (274c <error_check+0x34c>)
    267c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    267e:	1c10      	adds	r0, r2, #0
    2680:	4798      	blx	r3
    2682:	1c03      	adds	r3, r0, #0
    2684:	1c1a      	adds	r2, r3, #0
    2686:	4b2f      	ldr	r3, [pc, #188]	; (2744 <error_check+0x344>)
    2688:	1c11      	adds	r1, r2, #0
    268a:	1c20      	adds	r0, r4, #0
    268c:	4798      	blx	r3
    268e:	1c03      	adds	r3, r0, #0
    2690:	005b      	lsls	r3, r3, #1
    2692:	085b      	lsrs	r3, r3, #1
    2694:	633b      	str	r3, [r7, #48]	; 0x30
		accel_err_limit = errlim_disp*cal_report_azm_inc.disp_stdev_acc[i];
    2696:	234f      	movs	r3, #79	; 0x4f
    2698:	18fb      	adds	r3, r7, r3
    269a:	781a      	ldrb	r2, [r3, #0]
    269c:	4b24      	ldr	r3, [pc, #144]	; (2730 <error_check+0x330>)
    269e:	320a      	adds	r2, #10
    26a0:	0092      	lsls	r2, r2, #2
    26a2:	58d2      	ldr	r2, [r2, r3]
    26a4:	4b24      	ldr	r3, [pc, #144]	; (2738 <error_check+0x338>)
    26a6:	4925      	ldr	r1, [pc, #148]	; (273c <error_check+0x33c>)
    26a8:	1c10      	adds	r0, r2, #0
    26aa:	4798      	blx	r3
    26ac:	1c03      	adds	r3, r0, #0
    26ae:	64bb      	str	r3, [r7, #72]	; 0x48
		accel_err_limit = 0.5;
    26b0:	23fc      	movs	r3, #252	; 0xfc
    26b2:	059b      	lsls	r3, r3, #22
    26b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (delta>accel_err_limit){
    26b6:	4b1f      	ldr	r3, [pc, #124]	; (2734 <error_check+0x334>)
    26b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    26ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
    26bc:	4798      	blx	r3
    26be:	1e03      	subs	r3, r0, #0
    26c0:	d025      	beq.n	270e <error_check+0x30e>
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    26c2:	687b      	ldr	r3, [r7, #4]
    26c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    26c6:	687a      	ldr	r2, [r7, #4]
    26c8:	215c      	movs	r1, #92	; 0x5c
    26ca:	18d3      	adds	r3, r2, r3
    26cc:	185b      	adds	r3, r3, r1
    26ce:	2205      	movs	r2, #5
    26d0:	701a      	strb	r2, [r3, #0]
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    26d2:	687b      	ldr	r3, [r7, #4]
    26d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    26d6:	687a      	ldr	r2, [r7, #4]
    26d8:	3318      	adds	r3, #24
    26da:	009b      	lsls	r3, r3, #2
    26dc:	18d3      	adds	r3, r2, r3
    26de:	3304      	adds	r3, #4
    26e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    26e2:	601a      	str	r2, [r3, #0]
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	6d9c      	ldr	r4, [r3, #88]	; 0x58
    26e8:	234f      	movs	r3, #79	; 0x4f
    26ea:	18fb      	adds	r3, r7, r3
    26ec:	781b      	ldrb	r3, [r3, #0]
    26ee:	1c5a      	adds	r2, r3, #1
    26f0:	4b17      	ldr	r3, [pc, #92]	; (2750 <error_check+0x350>)
    26f2:	0010      	movs	r0, r2
    26f4:	4798      	blx	r3
    26f6:	1c01      	adds	r1, r0, #0
    26f8:	687a      	ldr	r2, [r7, #4]
    26fa:	0023      	movs	r3, r4
    26fc:	3320      	adds	r3, #32
    26fe:	009b      	lsls	r3, r3, #2
    2700:	18d3      	adds	r3, r2, r3
    2702:	3304      	adds	r3, #4
    2704:	6019      	str	r1, [r3, #0]
			increment_error_count(meas_inst);
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	0018      	movs	r0, r3
    270a:	4b0f      	ldr	r3, [pc, #60]	; (2748 <error_check+0x348>)
    270c:	4798      	blx	r3
	for (i=0;i<3;i++){
    270e:	234f      	movs	r3, #79	; 0x4f
    2710:	18fb      	adds	r3, r7, r3
    2712:	781a      	ldrb	r2, [r3, #0]
    2714:	234f      	movs	r3, #79	; 0x4f
    2716:	18fb      	adds	r3, r7, r3
    2718:	3201      	adds	r2, #1
    271a:	701a      	strb	r2, [r3, #0]
    271c:	234f      	movs	r3, #79	; 0x4f
    271e:	18fb      	adds	r3, r7, r3
    2720:	781b      	ldrb	r3, [r3, #0]
    2722:	2b02      	cmp	r3, #2
    2724:	d993      	bls.n	264e <error_check+0x24e>
		}
		
	}
	
	// Axis check, Accelerometer
	for (i=0;i<3;i++){
    2726:	234f      	movs	r3, #79	; 0x4f
    2728:	18fb      	adds	r3, r7, r3
    272a:	2200      	movs	r2, #0
    272c:	701a      	strb	r2, [r3, #0]
    272e:	e07a      	b.n	2826 <error_check+0x426>
    2730:	20001e48 	.word	0x20001e48
    2734:	00020f71 	.word	0x00020f71
    2738:	000217d9 	.word	0x000217d9
    273c:	43480000 	.word	0x43480000
    2740:	00002c3d 	.word	0x00002c3d
    2744:	00021a19 	.word	0x00021a19
    2748:	00002bf9 	.word	0x00002bf9
    274c:	000213f9 	.word	0x000213f9
    2750:	00021d91 	.word	0x00021d91
		delta = fabs((meas_inst->c1xyz[i]/magc1) - (meas_inst->c2xyz[i]/magc2));
    2754:	234f      	movs	r3, #79	; 0x4f
    2756:	18fb      	adds	r3, r7, r3
    2758:	781a      	ldrb	r2, [r3, #0]
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	320e      	adds	r2, #14
    275e:	0092      	lsls	r2, r2, #2
    2760:	58d2      	ldr	r2, [r2, r3]
    2762:	4bdb      	ldr	r3, [pc, #876]	; (2ad0 <error_check+0x6d0>)
    2764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    2766:	1c10      	adds	r0, r2, #0
    2768:	4798      	blx	r3
    276a:	1c03      	adds	r3, r0, #0
    276c:	1c1c      	adds	r4, r3, #0
    276e:	234f      	movs	r3, #79	; 0x4f
    2770:	18fb      	adds	r3, r7, r3
    2772:	781b      	ldrb	r3, [r3, #0]
    2774:	687a      	ldr	r2, [r7, #4]
    2776:	3310      	adds	r3, #16
    2778:	009b      	lsls	r3, r3, #2
    277a:	18d3      	adds	r3, r2, r3
    277c:	3304      	adds	r3, #4
    277e:	681a      	ldr	r2, [r3, #0]
    2780:	4bd3      	ldr	r3, [pc, #844]	; (2ad0 <error_check+0x6d0>)
    2782:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2784:	1c10      	adds	r0, r2, #0
    2786:	4798      	blx	r3
    2788:	1c03      	adds	r3, r0, #0
    278a:	1c1a      	adds	r2, r3, #0
    278c:	4bd1      	ldr	r3, [pc, #836]	; (2ad4 <error_check+0x6d4>)
    278e:	1c11      	adds	r1, r2, #0
    2790:	1c20      	adds	r0, r4, #0
    2792:	4798      	blx	r3
    2794:	1c03      	adds	r3, r0, #0
    2796:	005b      	lsls	r3, r3, #1
    2798:	085b      	lsrs	r3, r3, #1
    279a:	633b      	str	r3, [r7, #48]	; 0x30
		comp_err_limit = errlim_mag*cal_report_azm_inc.disp_stdev_comp[i];
    279c:	234f      	movs	r3, #79	; 0x4f
    279e:	18fb      	adds	r3, r7, r3
    27a0:	781b      	ldrb	r3, [r3, #0]
    27a2:	4acd      	ldr	r2, [pc, #820]	; (2ad8 <error_check+0x6d8>)
    27a4:	330c      	adds	r3, #12
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	18d3      	adds	r3, r2, r3
    27aa:	3304      	adds	r3, #4
    27ac:	681a      	ldr	r2, [r3, #0]
    27ae:	4bcb      	ldr	r3, [pc, #812]	; (2adc <error_check+0x6dc>)
    27b0:	49cb      	ldr	r1, [pc, #812]	; (2ae0 <error_check+0x6e0>)
    27b2:	1c10      	adds	r0, r2, #0
    27b4:	4798      	blx	r3
    27b6:	1c03      	adds	r3, r0, #0
    27b8:	647b      	str	r3, [r7, #68]	; 0x44
		comp_err_limit  = 0.5;
    27ba:	23fc      	movs	r3, #252	; 0xfc
    27bc:	059b      	lsls	r3, r3, #22
    27be:	647b      	str	r3, [r7, #68]	; 0x44
		if (delta>comp_err_limit){
    27c0:	4bc8      	ldr	r3, [pc, #800]	; (2ae4 <error_check+0x6e4>)
    27c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
    27c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
    27c6:	4798      	blx	r3
    27c8:	1e03      	subs	r3, r0, #0
    27ca:	d025      	beq.n	2818 <error_check+0x418>
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    27cc:	687b      	ldr	r3, [r7, #4]
    27ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    27d0:	687a      	ldr	r2, [r7, #4]
    27d2:	215c      	movs	r1, #92	; 0x5c
    27d4:	18d3      	adds	r3, r2, r3
    27d6:	185b      	adds	r3, r3, r1
    27d8:	2206      	movs	r2, #6
    27da:	701a      	strb	r2, [r3, #0]
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    27e0:	687a      	ldr	r2, [r7, #4]
    27e2:	3318      	adds	r3, #24
    27e4:	009b      	lsls	r3, r3, #2
    27e6:	18d3      	adds	r3, r2, r3
    27e8:	3304      	adds	r3, #4
    27ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    27ec:	601a      	str	r2, [r3, #0]
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	6d9c      	ldr	r4, [r3, #88]	; 0x58
    27f2:	234f      	movs	r3, #79	; 0x4f
    27f4:	18fb      	adds	r3, r7, r3
    27f6:	781b      	ldrb	r3, [r3, #0]
    27f8:	1c5a      	adds	r2, r3, #1
    27fa:	4bbb      	ldr	r3, [pc, #748]	; (2ae8 <error_check+0x6e8>)
    27fc:	0010      	movs	r0, r2
    27fe:	4798      	blx	r3
    2800:	1c01      	adds	r1, r0, #0
    2802:	687a      	ldr	r2, [r7, #4]
    2804:	0023      	movs	r3, r4
    2806:	3320      	adds	r3, #32
    2808:	009b      	lsls	r3, r3, #2
    280a:	18d3      	adds	r3, r2, r3
    280c:	3304      	adds	r3, #4
    280e:	6019      	str	r1, [r3, #0]
			increment_error_count(meas_inst);
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	0018      	movs	r0, r3
    2814:	4bb5      	ldr	r3, [pc, #724]	; (2aec <error_check+0x6ec>)
    2816:	4798      	blx	r3
	for (i=0;i<3;i++){
    2818:	234f      	movs	r3, #79	; 0x4f
    281a:	18fb      	adds	r3, r7, r3
    281c:	781a      	ldrb	r2, [r3, #0]
    281e:	234f      	movs	r3, #79	; 0x4f
    2820:	18fb      	adds	r3, r7, r3
    2822:	3201      	adds	r2, #1
    2824:	701a      	strb	r2, [r3, #0]
    2826:	234f      	movs	r3, #79	; 0x4f
    2828:	18fb      	adds	r3, r7, r3
    282a:	781b      	ldrb	r3, [r3, #0]
    282c:	2b02      	cmp	r3, #2
    282e:	d991      	bls.n	2754 <error_check+0x354>
	}
	
	
	
	//  Check Angle Disparity
	calc_azm_inc_roll_dec(meas_inst->a1xyz, meas_inst->c1xyz, &azm_arr[0], &inc_arr[0], &foo1, &foo2);
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	3320      	adds	r3, #32
    2834:	0018      	movs	r0, r3
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	3338      	adds	r3, #56	; 0x38
    283a:	0019      	movs	r1, r3
    283c:	2310      	movs	r3, #16
    283e:	18fc      	adds	r4, r7, r3
    2840:	2320      	movs	r3, #32
    2842:	18fa      	adds	r2, r7, r3
    2844:	2308      	movs	r3, #8
    2846:	18fb      	adds	r3, r7, r3
    2848:	9301      	str	r3, [sp, #4]
    284a:	230c      	movs	r3, #12
    284c:	18fb      	adds	r3, r7, r3
    284e:	9300      	str	r3, [sp, #0]
    2850:	0023      	movs	r3, r4
    2852:	4ca7      	ldr	r4, [pc, #668]	; (2af0 <error_check+0x6f0>)
    2854:	47a0      	blx	r4
	calc_azm_inc_roll_dec(meas_inst->a2xyz, meas_inst->c1xyz, &azm_arr[1], &inc_arr[1], &foo1, &foo2);
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	332c      	adds	r3, #44	; 0x2c
    285a:	0018      	movs	r0, r3
    285c:	687b      	ldr	r3, [r7, #4]
    285e:	3338      	adds	r3, #56	; 0x38
    2860:	0019      	movs	r1, r3
    2862:	2310      	movs	r3, #16
    2864:	18fb      	adds	r3, r7, r3
    2866:	1d1c      	adds	r4, r3, #4
    2868:	2320      	movs	r3, #32
    286a:	18fb      	adds	r3, r7, r3
    286c:	1d1a      	adds	r2, r3, #4
    286e:	2308      	movs	r3, #8
    2870:	18fb      	adds	r3, r7, r3
    2872:	9301      	str	r3, [sp, #4]
    2874:	230c      	movs	r3, #12
    2876:	18fb      	adds	r3, r7, r3
    2878:	9300      	str	r3, [sp, #0]
    287a:	0023      	movs	r3, r4
    287c:	4c9c      	ldr	r4, [pc, #624]	; (2af0 <error_check+0x6f0>)
    287e:	47a0      	blx	r4
	calc_azm_inc_roll_dec(meas_inst->a1xyz, meas_inst->c2xyz, &azm_arr[2], &inc_arr[2], &foo1, &foo2);
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	3320      	adds	r3, #32
    2884:	0018      	movs	r0, r3
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	3344      	adds	r3, #68	; 0x44
    288a:	0019      	movs	r1, r3
    288c:	2310      	movs	r3, #16
    288e:	18fb      	adds	r3, r7, r3
    2890:	3308      	adds	r3, #8
    2892:	001c      	movs	r4, r3
    2894:	2320      	movs	r3, #32
    2896:	18fb      	adds	r3, r7, r3
    2898:	3308      	adds	r3, #8
    289a:	001a      	movs	r2, r3
    289c:	2308      	movs	r3, #8
    289e:	18fb      	adds	r3, r7, r3
    28a0:	9301      	str	r3, [sp, #4]
    28a2:	230c      	movs	r3, #12
    28a4:	18fb      	adds	r3, r7, r3
    28a6:	9300      	str	r3, [sp, #0]
    28a8:	0023      	movs	r3, r4
    28aa:	4c91      	ldr	r4, [pc, #580]	; (2af0 <error_check+0x6f0>)
    28ac:	47a0      	blx	r4
	calc_azm_inc_roll_dec(meas_inst->a2xyz, meas_inst->c2xyz, &azm_arr[3], &inc_arr[3], &foo1, &foo2);
    28ae:	687b      	ldr	r3, [r7, #4]
    28b0:	332c      	adds	r3, #44	; 0x2c
    28b2:	0018      	movs	r0, r3
    28b4:	687b      	ldr	r3, [r7, #4]
    28b6:	3344      	adds	r3, #68	; 0x44
    28b8:	0019      	movs	r1, r3
    28ba:	2310      	movs	r3, #16
    28bc:	18fb      	adds	r3, r7, r3
    28be:	330c      	adds	r3, #12
    28c0:	001c      	movs	r4, r3
    28c2:	2320      	movs	r3, #32
    28c4:	18fb      	adds	r3, r7, r3
    28c6:	330c      	adds	r3, #12
    28c8:	001a      	movs	r2, r3
    28ca:	2308      	movs	r3, #8
    28cc:	18fb      	adds	r3, r7, r3
    28ce:	9301      	str	r3, [sp, #4]
    28d0:	230c      	movs	r3, #12
    28d2:	18fb      	adds	r3, r7, r3
    28d4:	9300      	str	r3, [sp, #0]
    28d6:	0023      	movs	r3, r4
    28d8:	4c85      	ldr	r4, [pc, #532]	; (2af0 <error_check+0x6f0>)
    28da:	47a0      	blx	r4
	//  Check Inclinometer
	angMin = inc_arr[0]; angMax = inc_arr[0];
    28dc:	2310      	movs	r3, #16
    28de:	18fb      	adds	r3, r7, r3
    28e0:	681b      	ldr	r3, [r3, #0]
    28e2:	653b      	str	r3, [r7, #80]	; 0x50
    28e4:	2310      	movs	r3, #16
    28e6:	18fb      	adds	r3, r7, r3
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	657b      	str	r3, [r7, #84]	; 0x54
	for (i=1;i<4;i++){
    28ec:	234f      	movs	r3, #79	; 0x4f
    28ee:	18fb      	adds	r3, r7, r3
    28f0:	2201      	movs	r2, #1
    28f2:	701a      	strb	r2, [r3, #0]
    28f4:	e034      	b.n	2960 <error_check+0x560>
		angMin = min(angMin, inc_arr[i]);
    28f6:	234f      	movs	r3, #79	; 0x4f
    28f8:	18fb      	adds	r3, r7, r3
    28fa:	781a      	ldrb	r2, [r3, #0]
    28fc:	2310      	movs	r3, #16
    28fe:	18fb      	adds	r3, r7, r3
    2900:	0092      	lsls	r2, r2, #2
    2902:	58d2      	ldr	r2, [r2, r3]
    2904:	4b77      	ldr	r3, [pc, #476]	; (2ae4 <error_check+0x6e4>)
    2906:	6d39      	ldr	r1, [r7, #80]	; 0x50
    2908:	1c10      	adds	r0, r2, #0
    290a:	4798      	blx	r3
    290c:	1e03      	subs	r3, r0, #0
    290e:	d001      	beq.n	2914 <error_check+0x514>
    2910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2912:	e006      	b.n	2922 <error_check+0x522>
    2914:	234f      	movs	r3, #79	; 0x4f
    2916:	18fb      	adds	r3, r7, r3
    2918:	781a      	ldrb	r2, [r3, #0]
    291a:	2310      	movs	r3, #16
    291c:	18fb      	adds	r3, r7, r3
    291e:	0092      	lsls	r2, r2, #2
    2920:	58d3      	ldr	r3, [r2, r3]
    2922:	653b      	str	r3, [r7, #80]	; 0x50
		angMax = max(angMax, inc_arr[i]);
    2924:	234f      	movs	r3, #79	; 0x4f
    2926:	18fb      	adds	r3, r7, r3
    2928:	781a      	ldrb	r2, [r3, #0]
    292a:	2310      	movs	r3, #16
    292c:	18fb      	adds	r3, r7, r3
    292e:	0092      	lsls	r2, r2, #2
    2930:	58d2      	ldr	r2, [r2, r3]
    2932:	4b70      	ldr	r3, [pc, #448]	; (2af4 <error_check+0x6f4>)
    2934:	6d79      	ldr	r1, [r7, #84]	; 0x54
    2936:	1c10      	adds	r0, r2, #0
    2938:	4798      	blx	r3
    293a:	1e03      	subs	r3, r0, #0
    293c:	d001      	beq.n	2942 <error_check+0x542>
    293e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2940:	e006      	b.n	2950 <error_check+0x550>
    2942:	234f      	movs	r3, #79	; 0x4f
    2944:	18fb      	adds	r3, r7, r3
    2946:	781a      	ldrb	r2, [r3, #0]
    2948:	2310      	movs	r3, #16
    294a:	18fb      	adds	r3, r7, r3
    294c:	0092      	lsls	r2, r2, #2
    294e:	58d3      	ldr	r3, [r2, r3]
    2950:	657b      	str	r3, [r7, #84]	; 0x54
	for (i=1;i<4;i++){
    2952:	234f      	movs	r3, #79	; 0x4f
    2954:	18fb      	adds	r3, r7, r3
    2956:	781a      	ldrb	r2, [r3, #0]
    2958:	234f      	movs	r3, #79	; 0x4f
    295a:	18fb      	adds	r3, r7, r3
    295c:	3201      	adds	r2, #1
    295e:	701a      	strb	r2, [r3, #0]
    2960:	234f      	movs	r3, #79	; 0x4f
    2962:	18fb      	adds	r3, r7, r3
    2964:	781b      	ldrb	r3, [r3, #0]
    2966:	2b03      	cmp	r3, #3
    2968:	d9c5      	bls.n	28f6 <error_check+0x4f6>
	}	
	delta = angMax-angMin;
    296a:	4b5a      	ldr	r3, [pc, #360]	; (2ad4 <error_check+0x6d4>)
    296c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    296e:	6d78      	ldr	r0, [r7, #84]	; 0x54
    2970:	4798      	blx	r3
    2972:	1c03      	adds	r3, r0, #0
    2974:	633b      	str	r3, [r7, #48]	; 0x30
	if (delta>options.errorSensitivity){
    2976:	4b60      	ldr	r3, [pc, #384]	; (2af8 <error_check+0x6f8>)
    2978:	689a      	ldr	r2, [r3, #8]
    297a:	4b5e      	ldr	r3, [pc, #376]	; (2af4 <error_check+0x6f4>)
    297c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    297e:	1c10      	adds	r0, r2, #0
    2980:	4798      	blx	r3
    2982:	1e03      	subs	r3, r0, #0
    2984:	d014      	beq.n	29b0 <error_check+0x5b0>
		meas_inst->measurement_error[meas_inst->num_errors] = inc_ang_err;
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    298a:	687a      	ldr	r2, [r7, #4]
    298c:	215c      	movs	r1, #92	; 0x5c
    298e:	18d3      	adds	r3, r2, r3
    2990:	185b      	adds	r3, r3, r1
    2992:	220d      	movs	r2, #13
    2994:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    2996:	687b      	ldr	r3, [r7, #4]
    2998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    299a:	687a      	ldr	r2, [r7, #4]
    299c:	3318      	adds	r3, #24
    299e:	009b      	lsls	r3, r3, #2
    29a0:	18d3      	adds	r3, r2, r3
    29a2:	3304      	adds	r3, #4
    29a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    29a6:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    29a8:	687b      	ldr	r3, [r7, #4]
    29aa:	0018      	movs	r0, r3
    29ac:	4b4f      	ldr	r3, [pc, #316]	; (2aec <error_check+0x6ec>)
    29ae:	4798      	blx	r3
	}
	// Check Compass
	//  Check for possible angle wrap-around
	bool wrapFlag = false;
    29b0:	234e      	movs	r3, #78	; 0x4e
    29b2:	18fb      	adds	r3, r7, r3
    29b4:	2200      	movs	r2, #0
    29b6:	701a      	strb	r2, [r3, #0]
	for (i=0;i<4;i++){
    29b8:	234f      	movs	r3, #79	; 0x4f
    29ba:	18fb      	adds	r3, r7, r3
    29bc:	2200      	movs	r2, #0
    29be:	701a      	strb	r2, [r3, #0]
    29c0:	e017      	b.n	29f2 <error_check+0x5f2>
		if (azm_arr[i]<90){ wrapFlag = true;}
    29c2:	234f      	movs	r3, #79	; 0x4f
    29c4:	18fb      	adds	r3, r7, r3
    29c6:	781a      	ldrb	r2, [r3, #0]
    29c8:	2320      	movs	r3, #32
    29ca:	18fb      	adds	r3, r7, r3
    29cc:	0092      	lsls	r2, r2, #2
    29ce:	58d2      	ldr	r2, [r2, r3]
    29d0:	4b48      	ldr	r3, [pc, #288]	; (2af4 <error_check+0x6f4>)
    29d2:	494a      	ldr	r1, [pc, #296]	; (2afc <error_check+0x6fc>)
    29d4:	1c10      	adds	r0, r2, #0
    29d6:	4798      	blx	r3
    29d8:	1e03      	subs	r3, r0, #0
    29da:	d003      	beq.n	29e4 <error_check+0x5e4>
    29dc:	234e      	movs	r3, #78	; 0x4e
    29de:	18fb      	adds	r3, r7, r3
    29e0:	2201      	movs	r2, #1
    29e2:	701a      	strb	r2, [r3, #0]
	for (i=0;i<4;i++){
    29e4:	234f      	movs	r3, #79	; 0x4f
    29e6:	18fb      	adds	r3, r7, r3
    29e8:	781a      	ldrb	r2, [r3, #0]
    29ea:	234f      	movs	r3, #79	; 0x4f
    29ec:	18fb      	adds	r3, r7, r3
    29ee:	3201      	adds	r2, #1
    29f0:	701a      	strb	r2, [r3, #0]
    29f2:	234f      	movs	r3, #79	; 0x4f
    29f4:	18fb      	adds	r3, r7, r3
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	2b03      	cmp	r3, #3
    29fa:	d9e2      	bls.n	29c2 <error_check+0x5c2>
	}
	if (wrapFlag){
    29fc:	234e      	movs	r3, #78	; 0x4e
    29fe:	18fb      	adds	r3, r7, r3
    2a00:	781b      	ldrb	r3, [r3, #0]
    2a02:	2b00      	cmp	r3, #0
    2a04:	d031      	beq.n	2a6a <error_check+0x66a>
		for (i=0;i<4;i++){
    2a06:	234f      	movs	r3, #79	; 0x4f
    2a08:	18fb      	adds	r3, r7, r3
    2a0a:	2200      	movs	r2, #0
    2a0c:	701a      	strb	r2, [r3, #0]
    2a0e:	e027      	b.n	2a60 <error_check+0x660>
			if (azm_arr[i]>270){ azm_arr[i]= azm_arr[i]-360;}
    2a10:	234f      	movs	r3, #79	; 0x4f
    2a12:	18fb      	adds	r3, r7, r3
    2a14:	781a      	ldrb	r2, [r3, #0]
    2a16:	2320      	movs	r3, #32
    2a18:	18fb      	adds	r3, r7, r3
    2a1a:	0092      	lsls	r2, r2, #2
    2a1c:	58d2      	ldr	r2, [r2, r3]
    2a1e:	4b31      	ldr	r3, [pc, #196]	; (2ae4 <error_check+0x6e4>)
    2a20:	4937      	ldr	r1, [pc, #220]	; (2b00 <error_check+0x700>)
    2a22:	1c10      	adds	r0, r2, #0
    2a24:	4798      	blx	r3
    2a26:	1e03      	subs	r3, r0, #0
    2a28:	d013      	beq.n	2a52 <error_check+0x652>
    2a2a:	234f      	movs	r3, #79	; 0x4f
    2a2c:	18fb      	adds	r3, r7, r3
    2a2e:	781c      	ldrb	r4, [r3, #0]
    2a30:	234f      	movs	r3, #79	; 0x4f
    2a32:	18fb      	adds	r3, r7, r3
    2a34:	781a      	ldrb	r2, [r3, #0]
    2a36:	2320      	movs	r3, #32
    2a38:	18fb      	adds	r3, r7, r3
    2a3a:	0092      	lsls	r2, r2, #2
    2a3c:	58d2      	ldr	r2, [r2, r3]
    2a3e:	4b25      	ldr	r3, [pc, #148]	; (2ad4 <error_check+0x6d4>)
    2a40:	4930      	ldr	r1, [pc, #192]	; (2b04 <error_check+0x704>)
    2a42:	1c10      	adds	r0, r2, #0
    2a44:	4798      	blx	r3
    2a46:	1c03      	adds	r3, r0, #0
    2a48:	1c19      	adds	r1, r3, #0
    2a4a:	2320      	movs	r3, #32
    2a4c:	18fb      	adds	r3, r7, r3
    2a4e:	00a2      	lsls	r2, r4, #2
    2a50:	50d1      	str	r1, [r2, r3]
		for (i=0;i<4;i++){
    2a52:	234f      	movs	r3, #79	; 0x4f
    2a54:	18fb      	adds	r3, r7, r3
    2a56:	781a      	ldrb	r2, [r3, #0]
    2a58:	234f      	movs	r3, #79	; 0x4f
    2a5a:	18fb      	adds	r3, r7, r3
    2a5c:	3201      	adds	r2, #1
    2a5e:	701a      	strb	r2, [r3, #0]
    2a60:	234f      	movs	r3, #79	; 0x4f
    2a62:	18fb      	adds	r3, r7, r3
    2a64:	781b      	ldrb	r3, [r3, #0]
    2a66:	2b03      	cmp	r3, #3
    2a68:	d9d2      	bls.n	2a10 <error_check+0x610>
		}
	}	
	angMin = azm_arr[0]; angMax = azm_arr[0]; 
    2a6a:	2320      	movs	r3, #32
    2a6c:	18fb      	adds	r3, r7, r3
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	653b      	str	r3, [r7, #80]	; 0x50
    2a72:	2320      	movs	r3, #32
    2a74:	18fb      	adds	r3, r7, r3
    2a76:	681b      	ldr	r3, [r3, #0]
    2a78:	657b      	str	r3, [r7, #84]	; 0x54
	for (i=1;i<4;i++){
    2a7a:	234f      	movs	r3, #79	; 0x4f
    2a7c:	18fb      	adds	r3, r7, r3
    2a7e:	2201      	movs	r2, #1
    2a80:	701a      	strb	r2, [r3, #0]
    2a82:	e050      	b.n	2b26 <error_check+0x726>
		angMin = min(angMin, azm_arr[i]);
    2a84:	234f      	movs	r3, #79	; 0x4f
    2a86:	18fb      	adds	r3, r7, r3
    2a88:	781a      	ldrb	r2, [r3, #0]
    2a8a:	2320      	movs	r3, #32
    2a8c:	18fb      	adds	r3, r7, r3
    2a8e:	0092      	lsls	r2, r2, #2
    2a90:	58d2      	ldr	r2, [r2, r3]
    2a92:	4b14      	ldr	r3, [pc, #80]	; (2ae4 <error_check+0x6e4>)
    2a94:	6d39      	ldr	r1, [r7, #80]	; 0x50
    2a96:	1c10      	adds	r0, r2, #0
    2a98:	4798      	blx	r3
    2a9a:	1e03      	subs	r3, r0, #0
    2a9c:	d001      	beq.n	2aa2 <error_check+0x6a2>
    2a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2aa0:	e006      	b.n	2ab0 <error_check+0x6b0>
    2aa2:	234f      	movs	r3, #79	; 0x4f
    2aa4:	18fb      	adds	r3, r7, r3
    2aa6:	781a      	ldrb	r2, [r3, #0]
    2aa8:	2320      	movs	r3, #32
    2aaa:	18fb      	adds	r3, r7, r3
    2aac:	0092      	lsls	r2, r2, #2
    2aae:	58d3      	ldr	r3, [r2, r3]
    2ab0:	653b      	str	r3, [r7, #80]	; 0x50
		angMax = max(angMax, azm_arr[i]);
    2ab2:	234f      	movs	r3, #79	; 0x4f
    2ab4:	18fb      	adds	r3, r7, r3
    2ab6:	781a      	ldrb	r2, [r3, #0]
    2ab8:	2320      	movs	r3, #32
    2aba:	18fb      	adds	r3, r7, r3
    2abc:	0092      	lsls	r2, r2, #2
    2abe:	58d2      	ldr	r2, [r2, r3]
    2ac0:	4b0c      	ldr	r3, [pc, #48]	; (2af4 <error_check+0x6f4>)
    2ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
    2ac4:	1c10      	adds	r0, r2, #0
    2ac6:	4798      	blx	r3
    2ac8:	1e03      	subs	r3, r0, #0
    2aca:	d01d      	beq.n	2b08 <error_check+0x708>
    2acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2ace:	e022      	b.n	2b16 <error_check+0x716>
    2ad0:	000213f9 	.word	0x000213f9
    2ad4:	00021a19 	.word	0x00021a19
    2ad8:	20001e48 	.word	0x20001e48
    2adc:	000217d9 	.word	0x000217d9
    2ae0:	43480000 	.word	0x43480000
    2ae4:	00020f71 	.word	0x00020f71
    2ae8:	00021d91 	.word	0x00021d91
    2aec:	00002bf9 	.word	0x00002bf9
    2af0:	0000c4d9 	.word	0x0000c4d9
    2af4:	00020f49 	.word	0x00020f49
    2af8:	200034a8 	.word	0x200034a8
    2afc:	42b40000 	.word	0x42b40000
    2b00:	43870000 	.word	0x43870000
    2b04:	43b40000 	.word	0x43b40000
    2b08:	234f      	movs	r3, #79	; 0x4f
    2b0a:	18fb      	adds	r3, r7, r3
    2b0c:	781a      	ldrb	r2, [r3, #0]
    2b0e:	2320      	movs	r3, #32
    2b10:	18fb      	adds	r3, r7, r3
    2b12:	0092      	lsls	r2, r2, #2
    2b14:	58d3      	ldr	r3, [r2, r3]
    2b16:	657b      	str	r3, [r7, #84]	; 0x54
	for (i=1;i<4;i++){
    2b18:	234f      	movs	r3, #79	; 0x4f
    2b1a:	18fb      	adds	r3, r7, r3
    2b1c:	781a      	ldrb	r2, [r3, #0]
    2b1e:	234f      	movs	r3, #79	; 0x4f
    2b20:	18fb      	adds	r3, r7, r3
    2b22:	3201      	adds	r2, #1
    2b24:	701a      	strb	r2, [r3, #0]
    2b26:	234f      	movs	r3, #79	; 0x4f
    2b28:	18fb      	adds	r3, r7, r3
    2b2a:	781b      	ldrb	r3, [r3, #0]
    2b2c:	2b03      	cmp	r3, #3
    2b2e:	d9a9      	bls.n	2a84 <error_check+0x684>
	}
	delta = (angMax-angMin)*cos(meas_inst->inclination*deg2rad); //  Adjust for high angle shots
    2b30:	4b27      	ldr	r3, [pc, #156]	; (2bd0 <error_check+0x7d0>)
    2b32:	6d39      	ldr	r1, [r7, #80]	; 0x50
    2b34:	6d78      	ldr	r0, [r7, #84]	; 0x54
    2b36:	4798      	blx	r3
    2b38:	1c03      	adds	r3, r0, #0
    2b3a:	1c1a      	adds	r2, r3, #0
    2b3c:	4b25      	ldr	r3, [pc, #148]	; (2bd4 <error_check+0x7d4>)
    2b3e:	1c10      	adds	r0, r2, #0
    2b40:	4798      	blx	r3
    2b42:	0005      	movs	r5, r0
    2b44:	000e      	movs	r6, r1
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	691a      	ldr	r2, [r3, #16]
    2b4a:	4b23      	ldr	r3, [pc, #140]	; (2bd8 <error_check+0x7d8>)
    2b4c:	6819      	ldr	r1, [r3, #0]
    2b4e:	4b23      	ldr	r3, [pc, #140]	; (2bdc <error_check+0x7dc>)
    2b50:	1c10      	adds	r0, r2, #0
    2b52:	4798      	blx	r3
    2b54:	1c03      	adds	r3, r0, #0
    2b56:	1c1a      	adds	r2, r3, #0
    2b58:	4b1e      	ldr	r3, [pc, #120]	; (2bd4 <error_check+0x7d4>)
    2b5a:	1c10      	adds	r0, r2, #0
    2b5c:	4798      	blx	r3
    2b5e:	0003      	movs	r3, r0
    2b60:	000c      	movs	r4, r1
    2b62:	0018      	movs	r0, r3
    2b64:	0021      	movs	r1, r4
    2b66:	4b1e      	ldr	r3, [pc, #120]	; (2be0 <error_check+0x7e0>)
    2b68:	4798      	blx	r3
    2b6a:	0002      	movs	r2, r0
    2b6c:	000b      	movs	r3, r1
    2b6e:	4c1d      	ldr	r4, [pc, #116]	; (2be4 <error_check+0x7e4>)
    2b70:	0028      	movs	r0, r5
    2b72:	0031      	movs	r1, r6
    2b74:	47a0      	blx	r4
    2b76:	0003      	movs	r3, r0
    2b78:	000c      	movs	r4, r1
    2b7a:	0019      	movs	r1, r3
    2b7c:	0022      	movs	r2, r4
    2b7e:	4b1a      	ldr	r3, [pc, #104]	; (2be8 <error_check+0x7e8>)
    2b80:	0008      	movs	r0, r1
    2b82:	0011      	movs	r1, r2
    2b84:	4798      	blx	r3
    2b86:	1c03      	adds	r3, r0, #0
    2b88:	633b      	str	r3, [r7, #48]	; 0x30
	if (delta>options.errorSensitivity){
    2b8a:	4b18      	ldr	r3, [pc, #96]	; (2bec <error_check+0x7ec>)
    2b8c:	689a      	ldr	r2, [r3, #8]
    2b8e:	4b18      	ldr	r3, [pc, #96]	; (2bf0 <error_check+0x7f0>)
    2b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
    2b92:	1c10      	adds	r0, r2, #0
    2b94:	4798      	blx	r3
    2b96:	1e03      	subs	r3, r0, #0
    2b98:	d100      	bne.n	2b9c <error_check+0x79c>
	}
	
	
	
	
}
    2b9a:	e014      	b.n	2bc6 <error_check+0x7c6>
		meas_inst->measurement_error[meas_inst->num_errors] = azm_ang_err;
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2ba0:	687a      	ldr	r2, [r7, #4]
    2ba2:	215c      	movs	r1, #92	; 0x5c
    2ba4:	18d3      	adds	r3, r2, r3
    2ba6:	185b      	adds	r3, r3, r1
    2ba8:	220e      	movs	r2, #14
    2baa:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2bb0:	687a      	ldr	r2, [r7, #4]
    2bb2:	3318      	adds	r3, #24
    2bb4:	009b      	lsls	r3, r3, #2
    2bb6:	18d3      	adds	r3, r2, r3
    2bb8:	3304      	adds	r3, #4
    2bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2bbc:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	0018      	movs	r0, r3
    2bc2:	4b0c      	ldr	r3, [pc, #48]	; (2bf4 <error_check+0x7f4>)
    2bc4:	4798      	blx	r3
}
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	46bd      	mov	sp, r7
    2bca:	b017      	add	sp, #92	; 0x5c
    2bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bce:	46c0      	nop			; (mov r8, r8)
    2bd0:	00021a19 	.word	0x00021a19
    2bd4:	00023a0d 	.word	0x00023a0d
    2bd8:	00028d68 	.word	0x00028d68
    2bdc:	000217d9 	.word	0x000217d9
    2be0:	0001e169 	.word	0x0001e169
    2be4:	00022d45 	.word	0x00022d45
    2be8:	00023ab1 	.word	0x00023ab1
    2bec:	200034a8 	.word	0x200034a8
    2bf0:	00020f49 	.word	0x00020f49
    2bf4:	00002bf9 	.word	0x00002bf9

00002bf8 <increment_error_count>:

bool increment_error_count(struct MEASUREMENT *meas_inst)
{
    2bf8:	b580      	push	{r7, lr}
    2bfa:	b084      	sub	sp, #16
    2bfc:	af00      	add	r7, sp, #0
    2bfe:	6078      	str	r0, [r7, #4]
	uint32_t array_max;
	bool error_incremented;
	array_max = sizeof(meas_inst->measurement_error)/sizeof(meas_inst->measurement_error[0]);
    2c00:	2308      	movs	r3, #8
    2c02:	60bb      	str	r3, [r7, #8]
	if 	((meas_inst->num_errors+1)<array_max){
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2c08:	1c5a      	adds	r2, r3, #1
    2c0a:	68bb      	ldr	r3, [r7, #8]
    2c0c:	429a      	cmp	r2, r3
    2c0e:	d209      	bcs.n	2c24 <increment_error_count+0x2c>
		meas_inst->num_errors++;
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2c14:	1c5a      	adds	r2, r3, #1
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	659a      	str	r2, [r3, #88]	; 0x58
		error_incremented = true;
    2c1a:	230f      	movs	r3, #15
    2c1c:	18fb      	adds	r3, r7, r3
    2c1e:	2201      	movs	r2, #1
    2c20:	701a      	strb	r2, [r3, #0]
    2c22:	e003      	b.n	2c2c <increment_error_count+0x34>
	}else{
		error_incremented = false;
    2c24:	230f      	movs	r3, #15
    2c26:	18fb      	adds	r3, r7, r3
    2c28:	2200      	movs	r2, #0
    2c2a:	701a      	strb	r2, [r3, #0]
	}
	return error_incremented;
    2c2c:	230f      	movs	r3, #15
    2c2e:	18fb      	adds	r3, r7, r3
    2c30:	781b      	ldrb	r3, [r3, #0]
}
    2c32:	0018      	movs	r0, r3
    2c34:	46bd      	mov	sp, r7
    2c36:	b004      	add	sp, #16
    2c38:	bd80      	pop	{r7, pc}
	...

00002c3c <calc_magnitude>:

float calc_magnitude(float xyz[3]){
    2c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c3e:	b085      	sub	sp, #20
    2c40:	af00      	add	r7, sp, #0
    2c42:	6078      	str	r0, [r7, #4]
	float magnitude;
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	681a      	ldr	r2, [r3, #0]
    2c48:	4b24      	ldr	r3, [pc, #144]	; (2cdc <calc_magnitude+0xa0>)
    2c4a:	1c10      	adds	r0, r2, #0
    2c4c:	4798      	blx	r3
    2c4e:	2300      	movs	r3, #0
    2c50:	2480      	movs	r4, #128	; 0x80
    2c52:	05e4      	lsls	r4, r4, #23
    2c54:	001a      	movs	r2, r3
    2c56:	0023      	movs	r3, r4
    2c58:	4c21      	ldr	r4, [pc, #132]	; (2ce0 <calc_magnitude+0xa4>)
    2c5a:	47a0      	blx	r4
    2c5c:	0005      	movs	r5, r0
    2c5e:	000e      	movs	r6, r1
    2c60:	687b      	ldr	r3, [r7, #4]
    2c62:	3304      	adds	r3, #4
    2c64:	681a      	ldr	r2, [r3, #0]
    2c66:	4b1d      	ldr	r3, [pc, #116]	; (2cdc <calc_magnitude+0xa0>)
    2c68:	1c10      	adds	r0, r2, #0
    2c6a:	4798      	blx	r3
    2c6c:	2300      	movs	r3, #0
    2c6e:	2480      	movs	r4, #128	; 0x80
    2c70:	05e4      	lsls	r4, r4, #23
    2c72:	001a      	movs	r2, r3
    2c74:	0023      	movs	r3, r4
    2c76:	4c1a      	ldr	r4, [pc, #104]	; (2ce0 <calc_magnitude+0xa4>)
    2c78:	47a0      	blx	r4
    2c7a:	0002      	movs	r2, r0
    2c7c:	000b      	movs	r3, r1
    2c7e:	4c19      	ldr	r4, [pc, #100]	; (2ce4 <calc_magnitude+0xa8>)
    2c80:	0028      	movs	r0, r5
    2c82:	0031      	movs	r1, r6
    2c84:	47a0      	blx	r4
    2c86:	0003      	movs	r3, r0
    2c88:	000c      	movs	r4, r1
    2c8a:	001d      	movs	r5, r3
    2c8c:	0026      	movs	r6, r4
    2c8e:	687b      	ldr	r3, [r7, #4]
    2c90:	3308      	adds	r3, #8
    2c92:	681a      	ldr	r2, [r3, #0]
    2c94:	4b11      	ldr	r3, [pc, #68]	; (2cdc <calc_magnitude+0xa0>)
    2c96:	1c10      	adds	r0, r2, #0
    2c98:	4798      	blx	r3
    2c9a:	2300      	movs	r3, #0
    2c9c:	2480      	movs	r4, #128	; 0x80
    2c9e:	05e4      	lsls	r4, r4, #23
    2ca0:	001a      	movs	r2, r3
    2ca2:	0023      	movs	r3, r4
    2ca4:	4c0e      	ldr	r4, [pc, #56]	; (2ce0 <calc_magnitude+0xa4>)
    2ca6:	47a0      	blx	r4
    2ca8:	0002      	movs	r2, r0
    2caa:	000b      	movs	r3, r1
    2cac:	4c0d      	ldr	r4, [pc, #52]	; (2ce4 <calc_magnitude+0xa8>)
    2cae:	0028      	movs	r0, r5
    2cb0:	0031      	movs	r1, r6
    2cb2:	47a0      	blx	r4
    2cb4:	0003      	movs	r3, r0
    2cb6:	000c      	movs	r4, r1
    2cb8:	0018      	movs	r0, r3
    2cba:	0021      	movs	r1, r4
    2cbc:	4b0a      	ldr	r3, [pc, #40]	; (2ce8 <calc_magnitude+0xac>)
    2cbe:	4798      	blx	r3
    2cc0:	000a      	movs	r2, r1
    2cc2:	0001      	movs	r1, r0
    2cc4:	4b09      	ldr	r3, [pc, #36]	; (2cec <calc_magnitude+0xb0>)
    2cc6:	0008      	movs	r0, r1
    2cc8:	0011      	movs	r1, r2
    2cca:	4798      	blx	r3
    2ccc:	1c03      	adds	r3, r0, #0
    2cce:	60fb      	str	r3, [r7, #12]
	return magnitude;	
    2cd0:	68fb      	ldr	r3, [r7, #12]
}
    2cd2:	1c18      	adds	r0, r3, #0
    2cd4:	46bd      	mov	sp, r7
    2cd6:	b005      	add	sp, #20
    2cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	00023a0d 	.word	0x00023a0d
    2ce0:	0001e3bd 	.word	0x0001e3bd
    2ce4:	00021ebd 	.word	0x00021ebd
    2ce8:	0001e715 	.word	0x0001e715
    2cec:	00023ab1 	.word	0x00023ab1

00002cf0 <quick_measurement>:

void quick_measurement(struct MEASUREMENT *meas_inst){
    2cf0:	b580      	push	{r7, lr}
    2cf2:	b082      	sub	sp, #8
    2cf4:	af00      	add	r7, sp, #0
    2cf6:	6078      	str	r0, [r7, #4]

	
	config_spi(sensors);
    2cf8:	2001      	movs	r0, #1
    2cfa:	4b16      	ldr	r3, [pc, #88]	; (2d54 <quick_measurement+0x64>)
    2cfc:	4798      	blx	r3
	
	read_accel(&slave_acc1, meas_inst->a1xyz);
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	3320      	adds	r3, #32
    2d02:	001a      	movs	r2, r3
    2d04:	4b14      	ldr	r3, [pc, #80]	; (2d58 <quick_measurement+0x68>)
    2d06:	0011      	movs	r1, r2
    2d08:	0018      	movs	r0, r3
    2d0a:	4b14      	ldr	r3, [pc, #80]	; (2d5c <quick_measurement+0x6c>)
    2d0c:	4798      	blx	r3
	read_accel(&slave_acc2, meas_inst->a2xyz);
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	332c      	adds	r3, #44	; 0x2c
    2d12:	001a      	movs	r2, r3
    2d14:	4b12      	ldr	r3, [pc, #72]	; (2d60 <quick_measurement+0x70>)
    2d16:	0011      	movs	r1, r2
    2d18:	0018      	movs	r0, r3
    2d1a:	4b10      	ldr	r3, [pc, #64]	; (2d5c <quick_measurement+0x6c>)
    2d1c:	4798      	blx	r3
	read_mag(&slave_mag1, meas_inst->c1xyz);
    2d1e:	687b      	ldr	r3, [r7, #4]
    2d20:	3338      	adds	r3, #56	; 0x38
    2d22:	001a      	movs	r2, r3
    2d24:	4b0f      	ldr	r3, [pc, #60]	; (2d64 <quick_measurement+0x74>)
    2d26:	0011      	movs	r1, r2
    2d28:	0018      	movs	r0, r3
    2d2a:	4b0f      	ldr	r3, [pc, #60]	; (2d68 <quick_measurement+0x78>)
    2d2c:	4798      	blx	r3
	read_mag(&slave_mag2, meas_inst->c2xyz);
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	3344      	adds	r3, #68	; 0x44
    2d32:	001a      	movs	r2, r3
    2d34:	4b0d      	ldr	r3, [pc, #52]	; (2d6c <quick_measurement+0x7c>)
    2d36:	0011      	movs	r1, r2
    2d38:	0018      	movs	r0, r3
    2d3a:	4b0b      	ldr	r3, [pc, #44]	; (2d68 <quick_measurement+0x78>)
    2d3c:	4798      	blx	r3
	config_spi(LCD);
    2d3e:	2000      	movs	r0, #0
    2d40:	4b04      	ldr	r3, [pc, #16]	; (2d54 <quick_measurement+0x64>)
    2d42:	4798      	blx	r3
	
	calc_orientation(meas_inst);
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	0018      	movs	r0, r3
    2d48:	4b09      	ldr	r3, [pc, #36]	; (2d70 <quick_measurement+0x80>)
    2d4a:	4798      	blx	r3
		
}
    2d4c:	46c0      	nop			; (mov r8, r8)
    2d4e:	46bd      	mov	sp, r7
    2d50:	b002      	add	sp, #8
    2d52:	bd80      	pop	{r7, pc}
    2d54:	00010311 	.word	0x00010311
    2d58:	200012f0 	.word	0x200012f0
    2d5c:	00003681 	.word	0x00003681
    2d60:	20001208 	.word	0x20001208
    2d64:	200012f4 	.word	0x200012f4
    2d68:	000038e9 	.word	0x000038e9
    2d6c:	200011d0 	.word	0x200011d0
    2d70:	0000c0d5 	.word	0x0000c0d5

00002d74 <full_measurement>:





void full_measurement(struct MEASUREMENT *meas_inst, bool calibrate_data){
    2d74:	b5b0      	push	{r4, r5, r7, lr}
    2d76:	b090      	sub	sp, #64	; 0x40
    2d78:	af00      	add	r7, sp, #0
    2d7a:	6078      	str	r0, [r7, #4]
    2d7c:	000a      	movs	r2, r1
    2d7e:	1cfb      	adds	r3, r7, #3
    2d80:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	float a1temp[3], a2temp[3], c1temp[3], c2temp[3];
	
	//Delay
	laser_delay(options.shot_delay);//  Also adds beep
    2d82:	4ba2      	ldr	r3, [pc, #648]	; (300c <full_measurement+0x298>)
    2d84:	789b      	ldrb	r3, [r3, #2]
    2d86:	0018      	movs	r0, r3
    2d88:	4ba1      	ldr	r3, [pc, #644]	; (3010 <full_measurement+0x29c>)
    2d8a:	4798      	blx	r3
	
	//  Turn off backlight
	backlightOff();
    2d8c:	4ba1      	ldr	r3, [pc, #644]	; (3014 <full_measurement+0x2a0>)
    2d8e:	4798      	blx	r3
	
	//  Configure SPI to talk to sensors
	config_spi(sensors);
    2d90:	2001      	movs	r0, #1
    2d92:	4ba1      	ldr	r3, [pc, #644]	; (3018 <full_measurement+0x2a4>)
    2d94:	4798      	blx	r3
	
	
	// Initialize structure
	for (i=0;i<3;i++){
    2d96:	233f      	movs	r3, #63	; 0x3f
    2d98:	18fb      	adds	r3, r7, r3
    2d9a:	2200      	movs	r2, #0
    2d9c:	701a      	strb	r2, [r3, #0]
    2d9e:	e02a      	b.n	2df6 <full_measurement+0x82>
		meas_inst->a1xyz[i] = 0;
    2da0:	233f      	movs	r3, #63	; 0x3f
    2da2:	18fb      	adds	r3, r7, r3
    2da4:	781a      	ldrb	r2, [r3, #0]
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	3208      	adds	r2, #8
    2daa:	0092      	lsls	r2, r2, #2
    2dac:	2100      	movs	r1, #0
    2dae:	50d1      	str	r1, [r2, r3]
		meas_inst->a2xyz[i] = 0;
    2db0:	233f      	movs	r3, #63	; 0x3f
    2db2:	18fb      	adds	r3, r7, r3
    2db4:	781b      	ldrb	r3, [r3, #0]
    2db6:	687a      	ldr	r2, [r7, #4]
    2db8:	330a      	adds	r3, #10
    2dba:	009b      	lsls	r3, r3, #2
    2dbc:	18d3      	adds	r3, r2, r3
    2dbe:	3304      	adds	r3, #4
    2dc0:	2200      	movs	r2, #0
    2dc2:	601a      	str	r2, [r3, #0]
		meas_inst->c1xyz[i] = 0;
    2dc4:	233f      	movs	r3, #63	; 0x3f
    2dc6:	18fb      	adds	r3, r7, r3
    2dc8:	781a      	ldrb	r2, [r3, #0]
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	320e      	adds	r2, #14
    2dce:	0092      	lsls	r2, r2, #2
    2dd0:	2100      	movs	r1, #0
    2dd2:	50d1      	str	r1, [r2, r3]
		meas_inst->c2xyz[i] = 0;
    2dd4:	233f      	movs	r3, #63	; 0x3f
    2dd6:	18fb      	adds	r3, r7, r3
    2dd8:	781b      	ldrb	r3, [r3, #0]
    2dda:	687a      	ldr	r2, [r7, #4]
    2ddc:	3310      	adds	r3, #16
    2dde:	009b      	lsls	r3, r3, #2
    2de0:	18d3      	adds	r3, r2, r3
    2de2:	3304      	adds	r3, #4
    2de4:	2200      	movs	r2, #0
    2de6:	601a      	str	r2, [r3, #0]
	for (i=0;i<3;i++){
    2de8:	233f      	movs	r3, #63	; 0x3f
    2dea:	18fb      	adds	r3, r7, r3
    2dec:	781a      	ldrb	r2, [r3, #0]
    2dee:	233f      	movs	r3, #63	; 0x3f
    2df0:	18fb      	adds	r3, r7, r3
    2df2:	3201      	adds	r2, #1
    2df4:	701a      	strb	r2, [r3, #0]
    2df6:	233f      	movs	r3, #63	; 0x3f
    2df8:	18fb      	adds	r3, r7, r3
    2dfa:	781b      	ldrb	r3, [r3, #0]
    2dfc:	2b02      	cmp	r3, #2
    2dfe:	d9cf      	bls.n	2da0 <full_measurement+0x2c>
	}
	meas_inst->num_errors = 0;
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	2200      	movs	r2, #0
    2e04:	659a      	str	r2, [r3, #88]	; 0x58
	meas_inst->samples = 0;
    2e06:	687b      	ldr	r3, [r7, #4]
    2e08:	2200      	movs	r2, #0
    2e0a:	651a      	str	r2, [r3, #80]	; 0x50
	
	//Initiate Laser Measurement	
	clear_rx_buffer();
    2e0c:	4b83      	ldr	r3, [pc, #524]	; (301c <full_measurement+0x2a8>)
    2e0e:	4798      	blx	r3
	reception_complete=false;
    2e10:	4b83      	ldr	r3, [pc, #524]	; (3020 <full_measurement+0x2ac>)
    2e12:	2200      	movs	r2, #0
    2e14:	701a      	strb	r2, [r3, #0]
	usart_write_buffer_job(&usart_laser, cmd_laser_single, sizeof(cmd_laser_single));
    2e16:	4983      	ldr	r1, [pc, #524]	; (3024 <full_measurement+0x2b0>)
    2e18:	4b83      	ldr	r3, [pc, #524]	; (3028 <full_measurement+0x2b4>)
    2e1a:	2205      	movs	r2, #5
    2e1c:	0018      	movs	r0, r3
    2e1e:	4b83      	ldr	r3, [pc, #524]	; (302c <full_measurement+0x2b8>)
    2e20:	4798      	blx	r3
	usart_read_job(&usart_laser, &rx_buffer[rx_buffer_index]);
    2e22:	4b83      	ldr	r3, [pc, #524]	; (3030 <full_measurement+0x2bc>)
    2e24:	781b      	ldrb	r3, [r3, #0]
    2e26:	b2db      	uxtb	r3, r3
    2e28:	001a      	movs	r2, r3
    2e2a:	4b82      	ldr	r3, [pc, #520]	; (3034 <full_measurement+0x2c0>)
    2e2c:	18d2      	adds	r2, r2, r3
    2e2e:	4b7e      	ldr	r3, [pc, #504]	; (3028 <full_measurement+0x2b4>)
    2e30:	0011      	movs	r1, r2
    2e32:	0018      	movs	r0, r3
    2e34:	4b80      	ldr	r3, [pc, #512]	; (3038 <full_measurement+0x2c4>)
    2e36:	4798      	blx	r3
	do {
		//Take measurements while laser is responding
		read_accel(&slave_acc1,a1temp);
    2e38:	2330      	movs	r3, #48	; 0x30
    2e3a:	18fa      	adds	r2, r7, r3
    2e3c:	4b7f      	ldr	r3, [pc, #508]	; (303c <full_measurement+0x2c8>)
    2e3e:	0011      	movs	r1, r2
    2e40:	0018      	movs	r0, r3
    2e42:	4b7f      	ldr	r3, [pc, #508]	; (3040 <full_measurement+0x2cc>)
    2e44:	4798      	blx	r3
		read_accel(&slave_acc2, a2temp);
    2e46:	2324      	movs	r3, #36	; 0x24
    2e48:	18fa      	adds	r2, r7, r3
    2e4a:	4b7e      	ldr	r3, [pc, #504]	; (3044 <full_measurement+0x2d0>)
    2e4c:	0011      	movs	r1, r2
    2e4e:	0018      	movs	r0, r3
    2e50:	4b7b      	ldr	r3, [pc, #492]	; (3040 <full_measurement+0x2cc>)
    2e52:	4798      	blx	r3
		read_mag(&slave_mag1, c1temp);
    2e54:	2318      	movs	r3, #24
    2e56:	18fa      	adds	r2, r7, r3
    2e58:	4b7b      	ldr	r3, [pc, #492]	; (3048 <full_measurement+0x2d4>)
    2e5a:	0011      	movs	r1, r2
    2e5c:	0018      	movs	r0, r3
    2e5e:	4b7b      	ldr	r3, [pc, #492]	; (304c <full_measurement+0x2d8>)
    2e60:	4798      	blx	r3
		read_mag(&slave_mag2, c2temp);
    2e62:	230c      	movs	r3, #12
    2e64:	18fa      	adds	r2, r7, r3
    2e66:	4b7a      	ldr	r3, [pc, #488]	; (3050 <full_measurement+0x2dc>)
    2e68:	0011      	movs	r1, r2
    2e6a:	0018      	movs	r0, r3
    2e6c:	4b77      	ldr	r3, [pc, #476]	; (304c <full_measurement+0x2d8>)
    2e6e:	4798      	blx	r3
		for (i=0;i<3;i++){
    2e70:	233f      	movs	r3, #63	; 0x3f
    2e72:	18fb      	adds	r3, r7, r3
    2e74:	2200      	movs	r2, #0
    2e76:	701a      	strb	r2, [r3, #0]
    2e78:	e07a      	b.n	2f70 <full_measurement+0x1fc>
			meas_inst->a1xyz[i] += a1temp[i];
    2e7a:	233f      	movs	r3, #63	; 0x3f
    2e7c:	18fb      	adds	r3, r7, r3
    2e7e:	781c      	ldrb	r4, [r3, #0]
    2e80:	233f      	movs	r3, #63	; 0x3f
    2e82:	18fb      	adds	r3, r7, r3
    2e84:	781a      	ldrb	r2, [r3, #0]
    2e86:	687b      	ldr	r3, [r7, #4]
    2e88:	3208      	adds	r2, #8
    2e8a:	0092      	lsls	r2, r2, #2
    2e8c:	58d0      	ldr	r0, [r2, r3]
    2e8e:	233f      	movs	r3, #63	; 0x3f
    2e90:	18fb      	adds	r3, r7, r3
    2e92:	781a      	ldrb	r2, [r3, #0]
    2e94:	2330      	movs	r3, #48	; 0x30
    2e96:	18fb      	adds	r3, r7, r3
    2e98:	0092      	lsls	r2, r2, #2
    2e9a:	58d2      	ldr	r2, [r2, r3]
    2e9c:	4b6d      	ldr	r3, [pc, #436]	; (3054 <full_measurement+0x2e0>)
    2e9e:	1c11      	adds	r1, r2, #0
    2ea0:	4798      	blx	r3
    2ea2:	1c03      	adds	r3, r0, #0
    2ea4:	1c19      	adds	r1, r3, #0
    2ea6:	687b      	ldr	r3, [r7, #4]
    2ea8:	0022      	movs	r2, r4
    2eaa:	3208      	adds	r2, #8
    2eac:	0092      	lsls	r2, r2, #2
    2eae:	50d1      	str	r1, [r2, r3]
			meas_inst->a2xyz[i] += a2temp[i];
    2eb0:	233f      	movs	r3, #63	; 0x3f
    2eb2:	18fb      	adds	r3, r7, r3
    2eb4:	781c      	ldrb	r4, [r3, #0]
    2eb6:	233f      	movs	r3, #63	; 0x3f
    2eb8:	18fb      	adds	r3, r7, r3
    2eba:	781b      	ldrb	r3, [r3, #0]
    2ebc:	687a      	ldr	r2, [r7, #4]
    2ebe:	330a      	adds	r3, #10
    2ec0:	009b      	lsls	r3, r3, #2
    2ec2:	18d3      	adds	r3, r2, r3
    2ec4:	3304      	adds	r3, #4
    2ec6:	6818      	ldr	r0, [r3, #0]
    2ec8:	233f      	movs	r3, #63	; 0x3f
    2eca:	18fb      	adds	r3, r7, r3
    2ecc:	781a      	ldrb	r2, [r3, #0]
    2ece:	2324      	movs	r3, #36	; 0x24
    2ed0:	18fb      	adds	r3, r7, r3
    2ed2:	0092      	lsls	r2, r2, #2
    2ed4:	58d2      	ldr	r2, [r2, r3]
    2ed6:	4b5f      	ldr	r3, [pc, #380]	; (3054 <full_measurement+0x2e0>)
    2ed8:	1c11      	adds	r1, r2, #0
    2eda:	4798      	blx	r3
    2edc:	1c03      	adds	r3, r0, #0
    2ede:	1c19      	adds	r1, r3, #0
    2ee0:	687a      	ldr	r2, [r7, #4]
    2ee2:	0023      	movs	r3, r4
    2ee4:	330a      	adds	r3, #10
    2ee6:	009b      	lsls	r3, r3, #2
    2ee8:	18d3      	adds	r3, r2, r3
    2eea:	3304      	adds	r3, #4
    2eec:	6019      	str	r1, [r3, #0]
			meas_inst->c1xyz[i] += c1temp[i];
    2eee:	233f      	movs	r3, #63	; 0x3f
    2ef0:	18fb      	adds	r3, r7, r3
    2ef2:	781c      	ldrb	r4, [r3, #0]
    2ef4:	233f      	movs	r3, #63	; 0x3f
    2ef6:	18fb      	adds	r3, r7, r3
    2ef8:	781a      	ldrb	r2, [r3, #0]
    2efa:	687b      	ldr	r3, [r7, #4]
    2efc:	320e      	adds	r2, #14
    2efe:	0092      	lsls	r2, r2, #2
    2f00:	58d0      	ldr	r0, [r2, r3]
    2f02:	233f      	movs	r3, #63	; 0x3f
    2f04:	18fb      	adds	r3, r7, r3
    2f06:	781a      	ldrb	r2, [r3, #0]
    2f08:	2318      	movs	r3, #24
    2f0a:	18fb      	adds	r3, r7, r3
    2f0c:	0092      	lsls	r2, r2, #2
    2f0e:	58d2      	ldr	r2, [r2, r3]
    2f10:	4b50      	ldr	r3, [pc, #320]	; (3054 <full_measurement+0x2e0>)
    2f12:	1c11      	adds	r1, r2, #0
    2f14:	4798      	blx	r3
    2f16:	1c03      	adds	r3, r0, #0
    2f18:	1c19      	adds	r1, r3, #0
    2f1a:	687b      	ldr	r3, [r7, #4]
    2f1c:	0022      	movs	r2, r4
    2f1e:	320e      	adds	r2, #14
    2f20:	0092      	lsls	r2, r2, #2
    2f22:	50d1      	str	r1, [r2, r3]
			meas_inst->c2xyz[i] += c2temp[i];
    2f24:	233f      	movs	r3, #63	; 0x3f
    2f26:	18fb      	adds	r3, r7, r3
    2f28:	781c      	ldrb	r4, [r3, #0]
    2f2a:	233f      	movs	r3, #63	; 0x3f
    2f2c:	18fb      	adds	r3, r7, r3
    2f2e:	781b      	ldrb	r3, [r3, #0]
    2f30:	687a      	ldr	r2, [r7, #4]
    2f32:	3310      	adds	r3, #16
    2f34:	009b      	lsls	r3, r3, #2
    2f36:	18d3      	adds	r3, r2, r3
    2f38:	3304      	adds	r3, #4
    2f3a:	6818      	ldr	r0, [r3, #0]
    2f3c:	233f      	movs	r3, #63	; 0x3f
    2f3e:	18fb      	adds	r3, r7, r3
    2f40:	781a      	ldrb	r2, [r3, #0]
    2f42:	230c      	movs	r3, #12
    2f44:	18fb      	adds	r3, r7, r3
    2f46:	0092      	lsls	r2, r2, #2
    2f48:	58d2      	ldr	r2, [r2, r3]
    2f4a:	4b42      	ldr	r3, [pc, #264]	; (3054 <full_measurement+0x2e0>)
    2f4c:	1c11      	adds	r1, r2, #0
    2f4e:	4798      	blx	r3
    2f50:	1c03      	adds	r3, r0, #0
    2f52:	1c19      	adds	r1, r3, #0
    2f54:	687a      	ldr	r2, [r7, #4]
    2f56:	0023      	movs	r3, r4
    2f58:	3310      	adds	r3, #16
    2f5a:	009b      	lsls	r3, r3, #2
    2f5c:	18d3      	adds	r3, r2, r3
    2f5e:	3304      	adds	r3, #4
    2f60:	6019      	str	r1, [r3, #0]
		for (i=0;i<3;i++){
    2f62:	233f      	movs	r3, #63	; 0x3f
    2f64:	18fb      	adds	r3, r7, r3
    2f66:	781a      	ldrb	r2, [r3, #0]
    2f68:	233f      	movs	r3, #63	; 0x3f
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	3201      	adds	r2, #1
    2f6e:	701a      	strb	r2, [r3, #0]
    2f70:	233f      	movs	r3, #63	; 0x3f
    2f72:	18fb      	adds	r3, r7, r3
    2f74:	781b      	ldrb	r3, [r3, #0]
    2f76:	2b02      	cmp	r3, #2
    2f78:	d800      	bhi.n	2f7c <full_measurement+0x208>
    2f7a:	e77e      	b.n	2e7a <full_measurement+0x106>
		}
		meas_inst->samples += 1;
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2f80:	1c5a      	adds	r2, r3, #1
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	651a      	str	r2, [r3, #80]	; 0x50
		if (meas_inst->samples > max_samples){
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2f8a:	2bc8      	cmp	r3, #200	; 0xc8
    2f8c:	d905      	bls.n	2f9a <full_measurement+0x226>
			usart_abort_job(&usart_laser, USART_TRANSCEIVER_RX);
    2f8e:	4b26      	ldr	r3, [pc, #152]	; (3028 <full_measurement+0x2b4>)
    2f90:	2100      	movs	r1, #0
    2f92:	0018      	movs	r0, r3
    2f94:	4b30      	ldr	r3, [pc, #192]	; (3058 <full_measurement+0x2e4>)
    2f96:	4798      	blx	r3
			break;
    2f98:	e008      	b.n	2fac <full_measurement+0x238>
		}
	}while(!reception_complete);
    2f9a:	4b21      	ldr	r3, [pc, #132]	; (3020 <full_measurement+0x2ac>)
    2f9c:	781b      	ldrb	r3, [r3, #0]
    2f9e:	b2db      	uxtb	r3, r3
    2fa0:	2201      	movs	r2, #1
    2fa2:	4053      	eors	r3, r2
    2fa4:	b2db      	uxtb	r3, r3
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d000      	beq.n	2fac <full_measurement+0x238>
    2faa:	e745      	b.n	2e38 <full_measurement+0xc4>
	
	// Parse Laser rangefinder data and populate measurement structure
	laser_parse_buffer(meas_inst);
    2fac:	687b      	ldr	r3, [r7, #4]
    2fae:	0018      	movs	r0, r3
    2fb0:	4b2a      	ldr	r3, [pc, #168]	; (305c <full_measurement+0x2e8>)
    2fb2:	4798      	blx	r3
	if (calibrate_data){
    2fb4:	1cfb      	adds	r3, r7, #3
    2fb6:	781b      	ldrb	r3, [r3, #0]
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d00a      	beq.n	2fd2 <full_measurement+0x25e>
		// Note:  Laser rangefinder results always in meters
		//  distance offset is in meters
		meas_inst->distance = meas_inst->distance+dist_calst.dist_offset;
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	69da      	ldr	r2, [r3, #28]
    2fc0:	4b27      	ldr	r3, [pc, #156]	; (3060 <full_measurement+0x2ec>)
    2fc2:	6d99      	ldr	r1, [r3, #88]	; 0x58
    2fc4:	4b23      	ldr	r3, [pc, #140]	; (3054 <full_measurement+0x2e0>)
    2fc6:	1c10      	adds	r0, r2, #0
    2fc8:	4798      	blx	r3
    2fca:	1c03      	adds	r3, r0, #0
    2fcc:	1c1a      	adds	r2, r3, #0
    2fce:	687b      	ldr	r3, [r7, #4]
    2fd0:	61da      	str	r2, [r3, #28]
	}
	if (options.current_unit_dist == feet){
    2fd2:	4b0e      	ldr	r3, [pc, #56]	; (300c <full_measurement+0x298>)
    2fd4:	781b      	ldrb	r3, [r3, #0]
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d10f      	bne.n	2ffa <full_measurement+0x286>
		meas_inst->distance = meas_inst->distance * mt2ft;//convert from meters to feet
    2fda:	687b      	ldr	r3, [r7, #4]
    2fdc:	69da      	ldr	r2, [r3, #28]
    2fde:	4b21      	ldr	r3, [pc, #132]	; (3064 <full_measurement+0x2f0>)
    2fe0:	6819      	ldr	r1, [r3, #0]
    2fe2:	4b21      	ldr	r3, [pc, #132]	; (3068 <full_measurement+0x2f4>)
    2fe4:	1c10      	adds	r0, r2, #0
    2fe6:	4798      	blx	r3
    2fe8:	1c03      	adds	r3, r0, #0
    2fea:	1c1a      	adds	r2, r3, #0
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	61da      	str	r2, [r3, #28]
		meas_inst->distance_units = feet;
    2ff0:	687b      	ldr	r3, [r7, #4]
    2ff2:	2254      	movs	r2, #84	; 0x54
    2ff4:	2100      	movs	r1, #0
    2ff6:	5499      	strb	r1, [r3, r2]
    2ff8:	e003      	b.n	3002 <full_measurement+0x28e>
	}else{
		meas_inst->distance_units = meters;
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	2254      	movs	r2, #84	; 0x54
    2ffe:	2101      	movs	r1, #1
    3000:	5499      	strb	r1, [r3, r2]
	}
	
	// Divide measurements by samples for average.
	for (i=0;i<3;i++){
    3002:	233f      	movs	r3, #63	; 0x3f
    3004:	18fb      	adds	r3, r7, r3
    3006:	2200      	movs	r2, #0
    3008:	701a      	strb	r2, [r3, #0]
    300a:	e0aa      	b.n	3162 <full_measurement+0x3ee>
    300c:	200034a8 	.word	0x200034a8
    3010:	00003261 	.word	0x00003261
    3014:	00001969 	.word	0x00001969
    3018:	00010311 	.word	0x00010311
    301c:	00010515 	.word	0x00010515
    3020:	200012f8 	.word	0x200012f8
    3024:	20000098 	.word	0x20000098
    3028:	2000120c 	.word	0x2000120c
    302c:	00008859 	.word	0x00008859
    3030:	2000126c 	.word	0x2000126c
    3034:	20001258 	.word	0x20001258
    3038:	00008835 	.word	0x00008835
    303c:	200012f0 	.word	0x200012f0
    3040:	00003681 	.word	0x00003681
    3044:	20001208 	.word	0x20001208
    3048:	200012f4 	.word	0x200012f4
    304c:	000038e9 	.word	0x000038e9
    3050:	200011d0 	.word	0x200011d0
    3054:	000210d5 	.word	0x000210d5
    3058:	000088a1 	.word	0x000088a1
    305c:	00003329 	.word	0x00003329
    3060:	20004888 	.word	0x20004888
    3064:	00028d6c 	.word	0x00028d6c
    3068:	000217d9 	.word	0x000217d9
		meas_inst->a1xyz[i] =meas_inst->a1xyz[i] / meas_inst->samples;
    306c:	233f      	movs	r3, #63	; 0x3f
    306e:	18fb      	adds	r3, r7, r3
    3070:	781c      	ldrb	r4, [r3, #0]
    3072:	233f      	movs	r3, #63	; 0x3f
    3074:	18fb      	adds	r3, r7, r3
    3076:	781a      	ldrb	r2, [r3, #0]
    3078:	687b      	ldr	r3, [r7, #4]
    307a:	3208      	adds	r2, #8
    307c:	0092      	lsls	r2, r2, #2
    307e:	58d5      	ldr	r5, [r2, r3]
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    3084:	4b67      	ldr	r3, [pc, #412]	; (3224 <full_measurement+0x4b0>)
    3086:	0010      	movs	r0, r2
    3088:	4798      	blx	r3
    308a:	1c02      	adds	r2, r0, #0
    308c:	4b66      	ldr	r3, [pc, #408]	; (3228 <full_measurement+0x4b4>)
    308e:	1c11      	adds	r1, r2, #0
    3090:	1c28      	adds	r0, r5, #0
    3092:	4798      	blx	r3
    3094:	1c03      	adds	r3, r0, #0
    3096:	1c19      	adds	r1, r3, #0
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	0022      	movs	r2, r4
    309c:	3208      	adds	r2, #8
    309e:	0092      	lsls	r2, r2, #2
    30a0:	50d1      	str	r1, [r2, r3]
		meas_inst->a2xyz[i] =meas_inst->a2xyz[i] / meas_inst->samples;
    30a2:	233f      	movs	r3, #63	; 0x3f
    30a4:	18fb      	adds	r3, r7, r3
    30a6:	781c      	ldrb	r4, [r3, #0]
    30a8:	233f      	movs	r3, #63	; 0x3f
    30aa:	18fb      	adds	r3, r7, r3
    30ac:	781b      	ldrb	r3, [r3, #0]
    30ae:	687a      	ldr	r2, [r7, #4]
    30b0:	330a      	adds	r3, #10
    30b2:	009b      	lsls	r3, r3, #2
    30b4:	18d3      	adds	r3, r2, r3
    30b6:	3304      	adds	r3, #4
    30b8:	681d      	ldr	r5, [r3, #0]
    30ba:	687b      	ldr	r3, [r7, #4]
    30bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    30be:	4b59      	ldr	r3, [pc, #356]	; (3224 <full_measurement+0x4b0>)
    30c0:	0010      	movs	r0, r2
    30c2:	4798      	blx	r3
    30c4:	1c02      	adds	r2, r0, #0
    30c6:	4b58      	ldr	r3, [pc, #352]	; (3228 <full_measurement+0x4b4>)
    30c8:	1c11      	adds	r1, r2, #0
    30ca:	1c28      	adds	r0, r5, #0
    30cc:	4798      	blx	r3
    30ce:	1c03      	adds	r3, r0, #0
    30d0:	1c19      	adds	r1, r3, #0
    30d2:	687a      	ldr	r2, [r7, #4]
    30d4:	0023      	movs	r3, r4
    30d6:	330a      	adds	r3, #10
    30d8:	009b      	lsls	r3, r3, #2
    30da:	18d3      	adds	r3, r2, r3
    30dc:	3304      	adds	r3, #4
    30de:	6019      	str	r1, [r3, #0]
		meas_inst->c1xyz[i] =meas_inst->c1xyz[i] / meas_inst->samples;
    30e0:	233f      	movs	r3, #63	; 0x3f
    30e2:	18fb      	adds	r3, r7, r3
    30e4:	781c      	ldrb	r4, [r3, #0]
    30e6:	233f      	movs	r3, #63	; 0x3f
    30e8:	18fb      	adds	r3, r7, r3
    30ea:	781a      	ldrb	r2, [r3, #0]
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	320e      	adds	r2, #14
    30f0:	0092      	lsls	r2, r2, #2
    30f2:	58d5      	ldr	r5, [r2, r3]
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    30f8:	4b4a      	ldr	r3, [pc, #296]	; (3224 <full_measurement+0x4b0>)
    30fa:	0010      	movs	r0, r2
    30fc:	4798      	blx	r3
    30fe:	1c02      	adds	r2, r0, #0
    3100:	4b49      	ldr	r3, [pc, #292]	; (3228 <full_measurement+0x4b4>)
    3102:	1c11      	adds	r1, r2, #0
    3104:	1c28      	adds	r0, r5, #0
    3106:	4798      	blx	r3
    3108:	1c03      	adds	r3, r0, #0
    310a:	1c19      	adds	r1, r3, #0
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	0022      	movs	r2, r4
    3110:	320e      	adds	r2, #14
    3112:	0092      	lsls	r2, r2, #2
    3114:	50d1      	str	r1, [r2, r3]
		meas_inst->c2xyz[i] =meas_inst->c2xyz[i] / meas_inst->samples;
    3116:	233f      	movs	r3, #63	; 0x3f
    3118:	18fb      	adds	r3, r7, r3
    311a:	781c      	ldrb	r4, [r3, #0]
    311c:	233f      	movs	r3, #63	; 0x3f
    311e:	18fb      	adds	r3, r7, r3
    3120:	781b      	ldrb	r3, [r3, #0]
    3122:	687a      	ldr	r2, [r7, #4]
    3124:	3310      	adds	r3, #16
    3126:	009b      	lsls	r3, r3, #2
    3128:	18d3      	adds	r3, r2, r3
    312a:	3304      	adds	r3, #4
    312c:	681d      	ldr	r5, [r3, #0]
    312e:	687b      	ldr	r3, [r7, #4]
    3130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    3132:	4b3c      	ldr	r3, [pc, #240]	; (3224 <full_measurement+0x4b0>)
    3134:	0010      	movs	r0, r2
    3136:	4798      	blx	r3
    3138:	1c02      	adds	r2, r0, #0
    313a:	4b3b      	ldr	r3, [pc, #236]	; (3228 <full_measurement+0x4b4>)
    313c:	1c11      	adds	r1, r2, #0
    313e:	1c28      	adds	r0, r5, #0
    3140:	4798      	blx	r3
    3142:	1c03      	adds	r3, r0, #0
    3144:	1c19      	adds	r1, r3, #0
    3146:	687a      	ldr	r2, [r7, #4]
    3148:	0023      	movs	r3, r4
    314a:	3310      	adds	r3, #16
    314c:	009b      	lsls	r3, r3, #2
    314e:	18d3      	adds	r3, r2, r3
    3150:	3304      	adds	r3, #4
    3152:	6019      	str	r1, [r3, #0]
	for (i=0;i<3;i++){
    3154:	233f      	movs	r3, #63	; 0x3f
    3156:	18fb      	adds	r3, r7, r3
    3158:	781a      	ldrb	r2, [r3, #0]
    315a:	233f      	movs	r3, #63	; 0x3f
    315c:	18fb      	adds	r3, r7, r3
    315e:	3201      	adds	r2, #1
    3160:	701a      	strb	r2, [r3, #0]
    3162:	233f      	movs	r3, #63	; 0x3f
    3164:	18fb      	adds	r3, r7, r3
    3166:	781b      	ldrb	r3, [r3, #0]
    3168:	2b02      	cmp	r3, #2
    316a:	d800      	bhi.n	316e <full_measurement+0x3fa>
    316c:	e77e      	b.n	306c <full_measurement+0x2f8>
	}
	//  Calibrate Results
	if (calibrate_data){
    316e:	1cfb      	adds	r3, r7, #3
    3170:	781b      	ldrb	r3, [r3, #0]
    3172:	2b00      	cmp	r3, #0
    3174:	d023      	beq.n	31be <full_measurement+0x44a>
		cal_apply_cal(meas_inst->a1xyz, meas_inst->a1xyz, &a1_calst);
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	3320      	adds	r3, #32
    317a:	0018      	movs	r0, r3
    317c:	687b      	ldr	r3, [r7, #4]
    317e:	3320      	adds	r3, #32
    3180:	4a2a      	ldr	r2, [pc, #168]	; (322c <full_measurement+0x4b8>)
    3182:	0019      	movs	r1, r3
    3184:	4b2a      	ldr	r3, [pc, #168]	; (3230 <full_measurement+0x4bc>)
    3186:	4798      	blx	r3
		cal_apply_cal(meas_inst->a2xyz, meas_inst->a2xyz, &a2_calst);
    3188:	687b      	ldr	r3, [r7, #4]
    318a:	332c      	adds	r3, #44	; 0x2c
    318c:	0018      	movs	r0, r3
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	332c      	adds	r3, #44	; 0x2c
    3192:	4a28      	ldr	r2, [pc, #160]	; (3234 <full_measurement+0x4c0>)
    3194:	0019      	movs	r1, r3
    3196:	4b26      	ldr	r3, [pc, #152]	; (3230 <full_measurement+0x4bc>)
    3198:	4798      	blx	r3
		cal_apply_cal(meas_inst->c1xyz, meas_inst->c1xyz, &c1_calst);
    319a:	687b      	ldr	r3, [r7, #4]
    319c:	3338      	adds	r3, #56	; 0x38
    319e:	0018      	movs	r0, r3
    31a0:	687b      	ldr	r3, [r7, #4]
    31a2:	3338      	adds	r3, #56	; 0x38
    31a4:	4a24      	ldr	r2, [pc, #144]	; (3238 <full_measurement+0x4c4>)
    31a6:	0019      	movs	r1, r3
    31a8:	4b21      	ldr	r3, [pc, #132]	; (3230 <full_measurement+0x4bc>)
    31aa:	4798      	blx	r3
		cal_apply_cal(meas_inst->c2xyz, meas_inst->c2xyz, &c2_calst);
    31ac:	687b      	ldr	r3, [r7, #4]
    31ae:	3344      	adds	r3, #68	; 0x44
    31b0:	0018      	movs	r0, r3
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	3344      	adds	r3, #68	; 0x44
    31b6:	4a21      	ldr	r2, [pc, #132]	; (323c <full_measurement+0x4c8>)
    31b8:	0019      	movs	r1, r3
    31ba:	4b1d      	ldr	r3, [pc, #116]	; (3230 <full_measurement+0x4bc>)
    31bc:	4798      	blx	r3
		
	}	
	// Calculate inclination and compass readings
	calc_orientation(meas_inst);
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	0018      	movs	r0, r3
    31c2:	4b1f      	ldr	r3, [pc, #124]	; (3240 <full_measurement+0x4cc>)
    31c4:	4798      	blx	r3
	
	// Perform Error Checking
	if (calibrate_data){//  Only perform error checking if data is calibrated
    31c6:	1cfb      	adds	r3, r7, #3
    31c8:	781b      	ldrb	r3, [r3, #0]
    31ca:	2b00      	cmp	r3, #0
    31cc:	d003      	beq.n	31d6 <full_measurement+0x462>
		error_check(meas_inst);
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	0018      	movs	r0, r3
    31d2:	4b1c      	ldr	r3, [pc, #112]	; (3244 <full_measurement+0x4d0>)
    31d4:	4798      	blx	r3
	}
	
	
	// Add Time-Stamp
	get_time();
    31d6:	4b1c      	ldr	r3, [pc, #112]	; (3248 <full_measurement+0x4d4>)
    31d8:	4798      	blx	r3
	meas_inst->posix_time = gen_posix_time(&current_time);// Save POSIX time
    31da:	4b1c      	ldr	r3, [pc, #112]	; (324c <full_measurement+0x4d8>)
    31dc:	0018      	movs	r0, r3
    31de:	4b1c      	ldr	r3, [pc, #112]	; (3250 <full_measurement+0x4dc>)
    31e0:	4798      	blx	r3
    31e2:	0002      	movs	r2, r0
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	605a      	str	r2, [r3, #4]
	
	//  Add Temperature
	if (options.current_unit_temp == celsius){
    31e8:	4b1a      	ldr	r3, [pc, #104]	; (3254 <full_measurement+0x4e0>)
    31ea:	785b      	ldrb	r3, [r3, #1]
    31ec:	2b04      	cmp	r3, #4
    31ee:	d108      	bne.n	3202 <full_measurement+0x48e>
		meas_inst->temperature = current_time.temperatureC;
    31f0:	4b16      	ldr	r3, [pc, #88]	; (324c <full_measurement+0x4d8>)
    31f2:	68da      	ldr	r2, [r3, #12]
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	609a      	str	r2, [r3, #8]
		meas_inst->temp_units = celsius;
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	2255      	movs	r2, #85	; 0x55
    31fc:	2104      	movs	r1, #4
    31fe:	5499      	strb	r1, [r3, r2]
    3200:	e007      	b.n	3212 <full_measurement+0x49e>
	}else{
		meas_inst->temperature = current_time.temperatureF;
    3202:	4b12      	ldr	r3, [pc, #72]	; (324c <full_measurement+0x4d8>)
    3204:	691a      	ldr	r2, [r3, #16]
    3206:	687b      	ldr	r3, [r7, #4]
    3208:	609a      	str	r2, [r3, #8]
		meas_inst->temp_units = fahrenheit;
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	2255      	movs	r2, #85	; 0x55
    320e:	2105      	movs	r1, #5
    3210:	5499      	strb	r1, [r3, r2]
	}	
	
	//  Turn backlight back on
	backlightOn();
    3212:	4b11      	ldr	r3, [pc, #68]	; (3258 <full_measurement+0x4e4>)
    3214:	4798      	blx	r3
	//  Configure SPI to speak to LCD	
	config_spi(LCD);	
    3216:	2000      	movs	r0, #0
    3218:	4b10      	ldr	r3, [pc, #64]	; (325c <full_measurement+0x4e8>)
    321a:	4798      	blx	r3
}
    321c:	46c0      	nop			; (mov r8, r8)
    321e:	46bd      	mov	sp, r7
    3220:	b010      	add	sp, #64	; 0x40
    3222:	bdb0      	pop	{r4, r5, r7, pc}
    3224:	00021e31 	.word	0x00021e31
    3228:	000213f9 	.word	0x000213f9
    322c:	20004f38 	.word	0x20004f38
    3230:	0000e289 	.word	0x0000e289
    3234:	20004b14 	.word	0x20004b14
    3238:	20003434 	.word	0x20003434
    323c:	200023ac 	.word	0x200023ac
    3240:	0000c0d5 	.word	0x0000c0d5
    3244:	00002401 	.word	0x00002401
    3248:	00011001 	.word	0x00011001
    324c:	200011f4 	.word	0x200011f4
    3250:	000111d5 	.word	0x000111d5
    3254:	200034a8 	.word	0x200034a8
    3258:	000016b9 	.word	0x000016b9
    325c:	00010311 	.word	0x00010311

00003260 <laser_delay>:


void laser_delay(uint8_t shot_delay){
    3260:	b580      	push	{r7, lr}
    3262:	b084      	sub	sp, #16
    3264:	af00      	add	r7, sp, #0
    3266:	0002      	movs	r2, r0
    3268:	1dfb      	adds	r3, r7, #7
    326a:	701a      	strb	r2, [r3, #0]
	uint8_t delay_count = 0;
    326c:	230f      	movs	r3, #15
    326e:	18fb      	adds	r3, r7, r3
    3270:	2200      	movs	r2, #0
    3272:	701a      	strb	r2, [r3, #0]


	while(delay_count<shot_delay){
    3274:	e00d      	b.n	3292 <laser_delay+0x32>
		laser_beep();
    3276:	4b0d      	ldr	r3, [pc, #52]	; (32ac <laser_delay+0x4c>)
    3278:	4798      	blx	r3
		delay_ms(800);
    327a:	23c8      	movs	r3, #200	; 0xc8
    327c:	009b      	lsls	r3, r3, #2
    327e:	0018      	movs	r0, r3
    3280:	4b0b      	ldr	r3, [pc, #44]	; (32b0 <laser_delay+0x50>)
    3282:	4798      	blx	r3
		delay_count = delay_count +1;
    3284:	230f      	movs	r3, #15
    3286:	18fb      	adds	r3, r7, r3
    3288:	220f      	movs	r2, #15
    328a:	18ba      	adds	r2, r7, r2
    328c:	7812      	ldrb	r2, [r2, #0]
    328e:	3201      	adds	r2, #1
    3290:	701a      	strb	r2, [r3, #0]
	while(delay_count<shot_delay){
    3292:	230f      	movs	r3, #15
    3294:	18fa      	adds	r2, r7, r3
    3296:	1dfb      	adds	r3, r7, #7
    3298:	7812      	ldrb	r2, [r2, #0]
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	429a      	cmp	r2, r3
    329e:	d3ea      	bcc.n	3276 <laser_delay+0x16>
	}
	laser_beep();
    32a0:	4b02      	ldr	r3, [pc, #8]	; (32ac <laser_delay+0x4c>)
    32a2:	4798      	blx	r3


}
    32a4:	46c0      	nop			; (mov r8, r8)
    32a6:	46bd      	mov	sp, r7
    32a8:	b004      	add	sp, #16
    32aa:	bd80      	pop	{r7, pc}
    32ac:	000032b5 	.word	0x000032b5
    32b0:	000181b5 	.word	0x000181b5

000032b4 <laser_beep>:

void laser_beep(void){
    32b4:	b580      	push	{r7, lr}
    32b6:	af00      	add	r7, sp, #0
	clear_rx_buffer();
    32b8:	4b12      	ldr	r3, [pc, #72]	; (3304 <laser_beep+0x50>)
    32ba:	4798      	blx	r3
	reception_complete=false;
    32bc:	4b12      	ldr	r3, [pc, #72]	; (3308 <laser_beep+0x54>)
    32be:	2200      	movs	r2, #0
    32c0:	701a      	strb	r2, [r3, #0]
	usart_write_buffer_job(&usart_laser, cmd_beep_on, sizeof(cmd_beep_on));
    32c2:	4912      	ldr	r1, [pc, #72]	; (330c <laser_beep+0x58>)
    32c4:	4b12      	ldr	r3, [pc, #72]	; (3310 <laser_beep+0x5c>)
    32c6:	2206      	movs	r2, #6
    32c8:	0018      	movs	r0, r3
    32ca:	4b12      	ldr	r3, [pc, #72]	; (3314 <laser_beep+0x60>)
    32cc:	4798      	blx	r3
	usart_read_job(&usart_laser, &rx_buffer[rx_buffer_index]);
    32ce:	4b12      	ldr	r3, [pc, #72]	; (3318 <laser_beep+0x64>)
    32d0:	781b      	ldrb	r3, [r3, #0]
    32d2:	b2db      	uxtb	r3, r3
    32d4:	001a      	movs	r2, r3
    32d6:	4b11      	ldr	r3, [pc, #68]	; (331c <laser_beep+0x68>)
    32d8:	18d2      	adds	r2, r2, r3
    32da:	4b0d      	ldr	r3, [pc, #52]	; (3310 <laser_beep+0x5c>)
    32dc:	0011      	movs	r1, r2
    32de:	0018      	movs	r0, r3
    32e0:	4b0f      	ldr	r3, [pc, #60]	; (3320 <laser_beep+0x6c>)
    32e2:	4798      	blx	r3
	while(!reception_complete);
    32e4:	46c0      	nop			; (mov r8, r8)
    32e6:	4b08      	ldr	r3, [pc, #32]	; (3308 <laser_beep+0x54>)
    32e8:	781b      	ldrb	r3, [r3, #0]
    32ea:	b2db      	uxtb	r3, r3
    32ec:	2201      	movs	r2, #1
    32ee:	4053      	eors	r3, r2
    32f0:	b2db      	uxtb	r3, r3
    32f2:	2b00      	cmp	r3, #0
    32f4:	d1f7      	bne.n	32e6 <laser_beep+0x32>
	delay_ms(15);
    32f6:	200f      	movs	r0, #15
    32f8:	4b0a      	ldr	r3, [pc, #40]	; (3324 <laser_beep+0x70>)
    32fa:	4798      	blx	r3

}
    32fc:	46c0      	nop			; (mov r8, r8)
    32fe:	46bd      	mov	sp, r7
    3300:	bd80      	pop	{r7, pc}
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	00010515 	.word	0x00010515
    3308:	200012f8 	.word	0x200012f8
    330c:	200000a0 	.word	0x200000a0
    3310:	2000120c 	.word	0x2000120c
    3314:	00008859 	.word	0x00008859
    3318:	2000126c 	.word	0x2000126c
    331c:	20001258 	.word	0x20001258
    3320:	00008835 	.word	0x00008835
    3324:	000181b5 	.word	0x000181b5

00003328 <laser_parse_buffer>:




void laser_parse_buffer(struct MEASUREMENT *meas_inst){
    3328:	b590      	push	{r4, r7, lr}
    332a:	b087      	sub	sp, #28
    332c:	af00      	add	r7, sp, #0
    332e:	6078      	str	r0, [r7, #4]
	uint32_t mult, temp1, temp_err;
	uint8_t mask = 0x0F;
    3330:	230d      	movs	r3, #13
    3332:	18fb      	adds	r3, r7, r3
    3334:	220f      	movs	r2, #15
    3336:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t AA_index;
	
	
	AA_index=0xFF;
    3338:	230e      	movs	r3, #14
    333a:	18fb      	adds	r3, r7, r3
    333c:	22ff      	movs	r2, #255	; 0xff
    333e:	701a      	strb	r2, [r3, #0]
	for (i=0; i<20; i++){
    3340:	230f      	movs	r3, #15
    3342:	18fb      	adds	r3, r7, r3
    3344:	2200      	movs	r2, #0
    3346:	701a      	strb	r2, [r3, #0]
    3348:	e015      	b.n	3376 <laser_parse_buffer+0x4e>
		if(rx_buffer[i]==0xAA){
    334a:	230f      	movs	r3, #15
    334c:	18fb      	adds	r3, r7, r3
    334e:	781b      	ldrb	r3, [r3, #0]
    3350:	4a8c      	ldr	r2, [pc, #560]	; (3584 <laser_parse_buffer+0x25c>)
    3352:	5cd3      	ldrb	r3, [r2, r3]
    3354:	b2db      	uxtb	r3, r3
    3356:	2baa      	cmp	r3, #170	; 0xaa
    3358:	d106      	bne.n	3368 <laser_parse_buffer+0x40>
			AA_index=i;
    335a:	230e      	movs	r3, #14
    335c:	18fb      	adds	r3, r7, r3
    335e:	220f      	movs	r2, #15
    3360:	18ba      	adds	r2, r7, r2
    3362:	7812      	ldrb	r2, [r2, #0]
    3364:	701a      	strb	r2, [r3, #0]
			break;
    3366:	e00b      	b.n	3380 <laser_parse_buffer+0x58>
	for (i=0; i<20; i++){
    3368:	230f      	movs	r3, #15
    336a:	18fb      	adds	r3, r7, r3
    336c:	781a      	ldrb	r2, [r3, #0]
    336e:	230f      	movs	r3, #15
    3370:	18fb      	adds	r3, r7, r3
    3372:	3201      	adds	r2, #1
    3374:	701a      	strb	r2, [r3, #0]
    3376:	230f      	movs	r3, #15
    3378:	18fb      	adds	r3, r7, r3
    337a:	781b      	ldrb	r3, [r3, #0]
    337c:	2b13      	cmp	r3, #19
    337e:	d9e4      	bls.n	334a <laser_parse_buffer+0x22>
		}
	}
	//parse data
	if(AA_index==0xFF){//No 0xAA initiate message, pattern error
    3380:	230e      	movs	r3, #14
    3382:	18fb      	adds	r3, r7, r3
    3384:	781b      	ldrb	r3, [r3, #0]
    3386:	2bff      	cmp	r3, #255	; 0xff
    3388:	d118      	bne.n	33bc <laser_parse_buffer+0x94>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_pattern_error; 		
    338a:	687b      	ldr	r3, [r7, #4]
    338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    338e:	687a      	ldr	r2, [r7, #4]
    3390:	215c      	movs	r1, #92	; 0x5c
    3392:	18d3      	adds	r3, r2, r3
    3394:	185b      	adds	r3, r3, r1
    3396:	220a      	movs	r2, #10
    3398:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    339a:	687b      	ldr	r3, [r7, #4]
    339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    339e:	687a      	ldr	r2, [r7, #4]
    33a0:	3318      	adds	r3, #24
    33a2:	009b      	lsls	r3, r3, #2
    33a4:	18d3      	adds	r3, r2, r3
    33a6:	3304      	adds	r3, #4
    33a8:	2200      	movs	r2, #0
    33aa:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    33ac:	687b      	ldr	r3, [r7, #4]
    33ae:	0018      	movs	r0, r3
    33b0:	4b75      	ldr	r3, [pc, #468]	; (3588 <laser_parse_buffer+0x260>)
    33b2:	4798      	blx	r3
		meas_inst->distance = 0;
    33b4:	687b      	ldr	r3, [r7, #4]
    33b6:	2200      	movs	r2, #0
    33b8:	61da      	str	r2, [r3, #28]
			meas_inst->distance=meas_inst->distance + temp1*mult;
			mult=mult/10;
		}
		meas_inst->distance=meas_inst->distance/1000;
	}
}
    33ba:	e0de      	b.n	357a <laser_parse_buffer+0x252>
	}else if(meas_inst->samples > max_samples){//timeout error
    33bc:	687b      	ldr	r3, [r7, #4]
    33be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    33c0:	2bc8      	cmp	r3, #200	; 0xc8
    33c2:	d918      	bls.n	33f6 <laser_parse_buffer+0xce>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_response_timeout;
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    33c8:	687a      	ldr	r2, [r7, #4]
    33ca:	215c      	movs	r1, #92	; 0x5c
    33cc:	18d3      	adds	r3, r2, r3
    33ce:	185b      	adds	r3, r3, r1
    33d0:	220b      	movs	r2, #11
    33d2:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    33d4:	687b      	ldr	r3, [r7, #4]
    33d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    33d8:	687a      	ldr	r2, [r7, #4]
    33da:	3318      	adds	r3, #24
    33dc:	009b      	lsls	r3, r3, #2
    33de:	18d3      	adds	r3, r2, r3
    33e0:	3304      	adds	r3, #4
    33e2:	2200      	movs	r2, #0
    33e4:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	0018      	movs	r0, r3
    33ea:	4b67      	ldr	r3, [pc, #412]	; (3588 <laser_parse_buffer+0x260>)
    33ec:	4798      	blx	r3
		meas_inst->distance = 0;
    33ee:	687b      	ldr	r3, [r7, #4]
    33f0:	2200      	movs	r2, #0
    33f2:	61da      	str	r2, [r3, #28]
}
    33f4:	e0c1      	b.n	357a <laser_parse_buffer+0x252>
	}else if (rx_buffer[AA_index+3]==0x45){//rangefinder generated error
    33f6:	230e      	movs	r3, #14
    33f8:	18fb      	adds	r3, r7, r3
    33fa:	781b      	ldrb	r3, [r3, #0]
    33fc:	3303      	adds	r3, #3
    33fe:	4a61      	ldr	r2, [pc, #388]	; (3584 <laser_parse_buffer+0x25c>)
    3400:	5cd3      	ldrb	r3, [r2, r3]
    3402:	b2db      	uxtb	r3, r3
    3404:	2b45      	cmp	r3, #69	; 0x45
    3406:	d16e      	bne.n	34e6 <laser_parse_buffer+0x1be>
		temp_err = 0;
    3408:	2300      	movs	r3, #0
    340a:	613b      	str	r3, [r7, #16]
		mult=100;
    340c:	2364      	movs	r3, #100	; 0x64
    340e:	617b      	str	r3, [r7, #20]
		for(i=6; i<9; i++){
    3410:	230f      	movs	r3, #15
    3412:	18fb      	adds	r3, r7, r3
    3414:	2206      	movs	r2, #6
    3416:	701a      	strb	r2, [r3, #0]
    3418:	e023      	b.n	3462 <laser_parse_buffer+0x13a>
			temp1 = rx_buffer[AA_index+i] & mask;
    341a:	230e      	movs	r3, #14
    341c:	18fb      	adds	r3, r7, r3
    341e:	781a      	ldrb	r2, [r3, #0]
    3420:	230f      	movs	r3, #15
    3422:	18fb      	adds	r3, r7, r3
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	18d3      	adds	r3, r2, r3
    3428:	4a56      	ldr	r2, [pc, #344]	; (3584 <laser_parse_buffer+0x25c>)
    342a:	5cd3      	ldrb	r3, [r2, r3]
    342c:	b2db      	uxtb	r3, r3
    342e:	220d      	movs	r2, #13
    3430:	18ba      	adds	r2, r7, r2
    3432:	7812      	ldrb	r2, [r2, #0]
    3434:	4013      	ands	r3, r2
    3436:	b2db      	uxtb	r3, r3
    3438:	60bb      	str	r3, [r7, #8]
			temp_err = temp_err + temp1*mult;
    343a:	68bb      	ldr	r3, [r7, #8]
    343c:	697a      	ldr	r2, [r7, #20]
    343e:	4353      	muls	r3, r2
    3440:	693a      	ldr	r2, [r7, #16]
    3442:	18d3      	adds	r3, r2, r3
    3444:	613b      	str	r3, [r7, #16]
			mult=mult/10;
    3446:	697a      	ldr	r2, [r7, #20]
    3448:	4b50      	ldr	r3, [pc, #320]	; (358c <laser_parse_buffer+0x264>)
    344a:	210a      	movs	r1, #10
    344c:	0010      	movs	r0, r2
    344e:	4798      	blx	r3
    3450:	0003      	movs	r3, r0
    3452:	617b      	str	r3, [r7, #20]
		for(i=6; i<9; i++){
    3454:	230f      	movs	r3, #15
    3456:	18fb      	adds	r3, r7, r3
    3458:	781a      	ldrb	r2, [r3, #0]
    345a:	230f      	movs	r3, #15
    345c:	18fb      	adds	r3, r7, r3
    345e:	3201      	adds	r2, #1
    3460:	701a      	strb	r2, [r3, #0]
    3462:	230f      	movs	r3, #15
    3464:	18fb      	adds	r3, r7, r3
    3466:	781b      	ldrb	r3, [r3, #0]
    3468:	2b08      	cmp	r3, #8
    346a:	d9d6      	bls.n	341a <laser_parse_buffer+0xf2>
		switch (temp_err){
    346c:	693b      	ldr	r3, [r7, #16]
    346e:	2bff      	cmp	r3, #255	; 0xff
    3470:	d00e      	beq.n	3490 <laser_parse_buffer+0x168>
    3472:	2280      	movs	r2, #128	; 0x80
    3474:	0052      	lsls	r2, r2, #1
    3476:	4293      	cmp	r3, r2
    3478:	d013      	beq.n	34a2 <laser_parse_buffer+0x17a>
    347a:	2bcc      	cmp	r3, #204	; 0xcc
    347c:	d11a      	bne.n	34b4 <laser_parse_buffer+0x18c>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_calc_err;
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3482:	687a      	ldr	r2, [r7, #4]
    3484:	215c      	movs	r1, #92	; 0x5c
    3486:	18d3      	adds	r3, r2, r3
    3488:	185b      	adds	r3, r3, r1
    348a:	2207      	movs	r2, #7
    348c:	701a      	strb	r2, [r3, #0]
			break;
    348e:	e019      	b.n	34c4 <laser_parse_buffer+0x19c>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_weak_signal;
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3494:	687a      	ldr	r2, [r7, #4]
    3496:	215c      	movs	r1, #92	; 0x5c
    3498:	18d3      	adds	r3, r2, r3
    349a:	185b      	adds	r3, r3, r1
    349c:	2208      	movs	r2, #8
    349e:	701a      	strb	r2, [r3, #0]
			break;
    34a0:	e010      	b.n	34c4 <laser_parse_buffer+0x19c>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_strong_signal;
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    34a6:	687a      	ldr	r2, [r7, #4]
    34a8:	215c      	movs	r1, #92	; 0x5c
    34aa:	18d3      	adds	r3, r2, r3
    34ac:	185b      	adds	r3, r3, r1
    34ae:	2209      	movs	r2, #9
    34b0:	701a      	strb	r2, [r3, #0]
			break;
    34b2:	e007      	b.n	34c4 <laser_parse_buffer+0x19c>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_unknown;
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    34b8:	687a      	ldr	r2, [r7, #4]
    34ba:	215c      	movs	r1, #92	; 0x5c
    34bc:	18d3      	adds	r3, r2, r3
    34be:	185b      	adds	r3, r3, r1
    34c0:	220c      	movs	r2, #12
    34c2:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    34c4:	687b      	ldr	r3, [r7, #4]
    34c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    34c8:	687a      	ldr	r2, [r7, #4]
    34ca:	3318      	adds	r3, #24
    34cc:	009b      	lsls	r3, r3, #2
    34ce:	18d3      	adds	r3, r2, r3
    34d0:	3304      	adds	r3, #4
    34d2:	2200      	movs	r2, #0
    34d4:	601a      	str	r2, [r3, #0]
		increment_error_count(meas_inst);
    34d6:	687b      	ldr	r3, [r7, #4]
    34d8:	0018      	movs	r0, r3
    34da:	4b2b      	ldr	r3, [pc, #172]	; (3588 <laser_parse_buffer+0x260>)
    34dc:	4798      	blx	r3
		meas_inst->distance = 0;
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	2200      	movs	r2, #0
    34e2:	61da      	str	r2, [r3, #28]
}
    34e4:	e049      	b.n	357a <laser_parse_buffer+0x252>
		mult = 100000;
    34e6:	4b2a      	ldr	r3, [pc, #168]	; (3590 <laser_parse_buffer+0x268>)
    34e8:	617b      	str	r3, [r7, #20]
		temp1=0;
    34ea:	2300      	movs	r3, #0
    34ec:	60bb      	str	r3, [r7, #8]
		meas_inst->distance = 0;
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	2200      	movs	r2, #0
    34f2:	61da      	str	r2, [r3, #28]
		for(i=3; i<9; i++){
    34f4:	230f      	movs	r3, #15
    34f6:	18fb      	adds	r3, r7, r3
    34f8:	2203      	movs	r2, #3
    34fa:	701a      	strb	r2, [r3, #0]
    34fc:	e02e      	b.n	355c <laser_parse_buffer+0x234>
			temp1=rx_buffer[AA_index+i] & mask;
    34fe:	230e      	movs	r3, #14
    3500:	18fb      	adds	r3, r7, r3
    3502:	781a      	ldrb	r2, [r3, #0]
    3504:	230f      	movs	r3, #15
    3506:	18fb      	adds	r3, r7, r3
    3508:	781b      	ldrb	r3, [r3, #0]
    350a:	18d3      	adds	r3, r2, r3
    350c:	4a1d      	ldr	r2, [pc, #116]	; (3584 <laser_parse_buffer+0x25c>)
    350e:	5cd3      	ldrb	r3, [r2, r3]
    3510:	b2db      	uxtb	r3, r3
    3512:	220d      	movs	r2, #13
    3514:	18ba      	adds	r2, r7, r2
    3516:	7812      	ldrb	r2, [r2, #0]
    3518:	4013      	ands	r3, r2
    351a:	b2db      	uxtb	r3, r3
    351c:	60bb      	str	r3, [r7, #8]
			meas_inst->distance=meas_inst->distance + temp1*mult;
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	69dc      	ldr	r4, [r3, #28]
    3522:	68bb      	ldr	r3, [r7, #8]
    3524:	697a      	ldr	r2, [r7, #20]
    3526:	435a      	muls	r2, r3
    3528:	4b1a      	ldr	r3, [pc, #104]	; (3594 <laser_parse_buffer+0x26c>)
    352a:	0010      	movs	r0, r2
    352c:	4798      	blx	r3
    352e:	1c02      	adds	r2, r0, #0
    3530:	4b19      	ldr	r3, [pc, #100]	; (3598 <laser_parse_buffer+0x270>)
    3532:	1c11      	adds	r1, r2, #0
    3534:	1c20      	adds	r0, r4, #0
    3536:	4798      	blx	r3
    3538:	1c03      	adds	r3, r0, #0
    353a:	1c1a      	adds	r2, r3, #0
    353c:	687b      	ldr	r3, [r7, #4]
    353e:	61da      	str	r2, [r3, #28]
			mult=mult/10;
    3540:	697a      	ldr	r2, [r7, #20]
    3542:	4b12      	ldr	r3, [pc, #72]	; (358c <laser_parse_buffer+0x264>)
    3544:	210a      	movs	r1, #10
    3546:	0010      	movs	r0, r2
    3548:	4798      	blx	r3
    354a:	0003      	movs	r3, r0
    354c:	617b      	str	r3, [r7, #20]
		for(i=3; i<9; i++){
    354e:	230f      	movs	r3, #15
    3550:	18fb      	adds	r3, r7, r3
    3552:	781a      	ldrb	r2, [r3, #0]
    3554:	230f      	movs	r3, #15
    3556:	18fb      	adds	r3, r7, r3
    3558:	3201      	adds	r2, #1
    355a:	701a      	strb	r2, [r3, #0]
    355c:	230f      	movs	r3, #15
    355e:	18fb      	adds	r3, r7, r3
    3560:	781b      	ldrb	r3, [r3, #0]
    3562:	2b08      	cmp	r3, #8
    3564:	d9cb      	bls.n	34fe <laser_parse_buffer+0x1d6>
		meas_inst->distance=meas_inst->distance/1000;
    3566:	687b      	ldr	r3, [r7, #4]
    3568:	69da      	ldr	r2, [r3, #28]
    356a:	4b0c      	ldr	r3, [pc, #48]	; (359c <laser_parse_buffer+0x274>)
    356c:	490c      	ldr	r1, [pc, #48]	; (35a0 <laser_parse_buffer+0x278>)
    356e:	1c10      	adds	r0, r2, #0
    3570:	4798      	blx	r3
    3572:	1c03      	adds	r3, r0, #0
    3574:	1c1a      	adds	r2, r3, #0
    3576:	687b      	ldr	r3, [r7, #4]
    3578:	61da      	str	r2, [r3, #28]
}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	46bd      	mov	sp, r7
    357e:	b007      	add	sp, #28
    3580:	bd90      	pop	{r4, r7, pc}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	20001258 	.word	0x20001258
    3588:	00002bf9 	.word	0x00002bf9
    358c:	00020bbd 	.word	0x00020bbd
    3590:	000186a0 	.word	0x000186a0
    3594:	00021e31 	.word	0x00021e31
    3598:	000210d5 	.word	0x000210d5
    359c:	000213f9 	.word	0x000213f9
    35a0:	447a0000 	.word	0x447a0000

000035a4 <rangefinder_on_off>:
		usart_write_buffer_job(&usart_laser, cmd_beep_off, 6);
		while(!write_complete);
	}
}

void rangefinder_on_off(bool on_off){
    35a4:	b580      	push	{r7, lr}
    35a6:	b082      	sub	sp, #8
    35a8:	af00      	add	r7, sp, #0
    35aa:	0002      	movs	r2, r0
    35ac:	1dfb      	adds	r3, r7, #7
    35ae:	701a      	strb	r2, [r3, #0]
	if (on_off){
    35b0:	1dfb      	adds	r3, r7, #7
    35b2:	781b      	ldrb	r3, [r3, #0]
    35b4:	2b00      	cmp	r3, #0
    35b6:	d007      	beq.n	35c8 <rangefinder_on_off+0x24>
		ioport_set_pin_level(laser_reset, true);
    35b8:	2101      	movs	r1, #1
    35ba:	2002      	movs	r0, #2
    35bc:	4b08      	ldr	r3, [pc, #32]	; (35e0 <rangefinder_on_off+0x3c>)
    35be:	4798      	blx	r3
		delay_ms(100);
    35c0:	2064      	movs	r0, #100	; 0x64
    35c2:	4b08      	ldr	r3, [pc, #32]	; (35e4 <rangefinder_on_off+0x40>)
    35c4:	4798      	blx	r3
    35c6:	e003      	b.n	35d0 <rangefinder_on_off+0x2c>
	}else{
		ioport_set_pin_level(laser_reset, false);
    35c8:	2100      	movs	r1, #0
    35ca:	2002      	movs	r0, #2
    35cc:	4b04      	ldr	r3, [pc, #16]	; (35e0 <rangefinder_on_off+0x3c>)
    35ce:	4798      	blx	r3
	}

	laser_triggered = false;
    35d0:	4b05      	ldr	r3, [pc, #20]	; (35e8 <rangefinder_on_off+0x44>)
    35d2:	2200      	movs	r2, #0
    35d4:	701a      	strb	r2, [r3, #0]

}
    35d6:	46c0      	nop			; (mov r8, r8)
    35d8:	46bd      	mov	sp, r7
    35da:	b002      	add	sp, #8
    35dc:	bd80      	pop	{r7, pc}
    35de:	46c0      	nop			; (mov r8, r8)
    35e0:	0000238d 	.word	0x0000238d
    35e4:	000181b5 	.word	0x000181b5
    35e8:	200023a8 	.word	0x200023a8

000035ec <laser_on_off>:


void laser_on_off(bool on_off){
    35ec:	b580      	push	{r7, lr}
    35ee:	b082      	sub	sp, #8
    35f0:	af00      	add	r7, sp, #0
    35f2:	0002      	movs	r2, r0
    35f4:	1dfb      	adds	r3, r7, #7
    35f6:	701a      	strb	r2, [r3, #0]
	write_complete = false;
    35f8:	4b1a      	ldr	r3, [pc, #104]	; (3664 <laser_on_off+0x78>)
    35fa:	2200      	movs	r2, #0
    35fc:	701a      	strb	r2, [r3, #0]
	if(on_off){
    35fe:	1dfb      	adds	r3, r7, #7
    3600:	781b      	ldrb	r3, [r3, #0]
    3602:	2b00      	cmp	r3, #0
    3604:	d015      	beq.n	3632 <laser_on_off+0x46>
		usart_write_buffer_job(&usart_laser, cmd_laser_on, 5);
    3606:	4918      	ldr	r1, [pc, #96]	; (3668 <laser_on_off+0x7c>)
    3608:	4b18      	ldr	r3, [pc, #96]	; (366c <laser_on_off+0x80>)
    360a:	2205      	movs	r2, #5
    360c:	0018      	movs	r0, r3
    360e:	4b18      	ldr	r3, [pc, #96]	; (3670 <laser_on_off+0x84>)
    3610:	4798      	blx	r3
		while(!write_complete);
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	4b13      	ldr	r3, [pc, #76]	; (3664 <laser_on_off+0x78>)
    3616:	781b      	ldrb	r3, [r3, #0]
    3618:	b2db      	uxtb	r3, r3
    361a:	2201      	movs	r2, #1
    361c:	4053      	eors	r3, r2
    361e:	b2db      	uxtb	r3, r3
    3620:	2b00      	cmp	r3, #0
    3622:	d1f7      	bne.n	3614 <laser_on_off+0x28>
		laser_triggered = true;
    3624:	4b13      	ldr	r3, [pc, #76]	; (3674 <laser_on_off+0x88>)
    3626:	2201      	movs	r2, #1
    3628:	701a      	strb	r2, [r3, #0]
		laser_timeout_timer(true);
    362a:	2001      	movs	r0, #1
    362c:	4b12      	ldr	r3, [pc, #72]	; (3678 <laser_on_off+0x8c>)
    362e:	4798      	blx	r3
		while(!write_complete);
		laser_triggered = false;
		laser_timeout_timer(false);
	}
	
}
    3630:	e014      	b.n	365c <laser_on_off+0x70>
		usart_write_buffer_job(&usart_laser, cmd_laser_off, 5);
    3632:	4912      	ldr	r1, [pc, #72]	; (367c <laser_on_off+0x90>)
    3634:	4b0d      	ldr	r3, [pc, #52]	; (366c <laser_on_off+0x80>)
    3636:	2205      	movs	r2, #5
    3638:	0018      	movs	r0, r3
    363a:	4b0d      	ldr	r3, [pc, #52]	; (3670 <laser_on_off+0x84>)
    363c:	4798      	blx	r3
		while(!write_complete);
    363e:	46c0      	nop			; (mov r8, r8)
    3640:	4b08      	ldr	r3, [pc, #32]	; (3664 <laser_on_off+0x78>)
    3642:	781b      	ldrb	r3, [r3, #0]
    3644:	b2db      	uxtb	r3, r3
    3646:	2201      	movs	r2, #1
    3648:	4053      	eors	r3, r2
    364a:	b2db      	uxtb	r3, r3
    364c:	2b00      	cmp	r3, #0
    364e:	d1f7      	bne.n	3640 <laser_on_off+0x54>
		laser_triggered = false;
    3650:	4b08      	ldr	r3, [pc, #32]	; (3674 <laser_on_off+0x88>)
    3652:	2200      	movs	r2, #0
    3654:	701a      	strb	r2, [r3, #0]
		laser_timeout_timer(false);
    3656:	2000      	movs	r0, #0
    3658:	4b07      	ldr	r3, [pc, #28]	; (3678 <laser_on_off+0x8c>)
    365a:	4798      	blx	r3
}
    365c:	46c0      	nop			; (mov r8, r8)
    365e:	46bd      	mov	sp, r7
    3660:	b002      	add	sp, #8
    3662:	bd80      	pop	{r7, pc}
    3664:	200012f7 	.word	0x200012f7
    3668:	20000088 	.word	0x20000088
    366c:	2000120c 	.word	0x2000120c
    3670:	00008859 	.word	0x00008859
    3674:	200023a8 	.word	0x200023a8
    3678:	00004735 	.word	0x00004735
    367c:	20000090 	.word	0x20000090

00003680 <read_accel>:




void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
    3680:	b590      	push	{r4, r7, lr}
    3682:	b087      	sub	sp, #28
    3684:	af00      	add	r7, sp, #0
    3686:	6078      	str	r0, [r7, #4]
    3688:	6039      	str	r1, [r7, #0]
	uint8_t read_buffer[4];
	uint8_t i;
	float temp;
	//select acc1 chip
	// Assumes SPI already setup for sensors
	spi_select_slave(&spi_main, sensor, true);
    368a:	6879      	ldr	r1, [r7, #4]
    368c:	4b4e      	ldr	r3, [pc, #312]	; (37c8 <read_accel+0x148>)
    368e:	2201      	movs	r2, #1
    3690:	0018      	movs	r0, r3
    3692:	4b4e      	ldr	r3, [pc, #312]	; (37cc <read_accel+0x14c>)
    3694:	4798      	blx	r3
	//clear out receive buffer
	spi_clear();
    3696:	4b4e      	ldr	r3, [pc, #312]	; (37d0 <read_accel+0x150>)
    3698:	4798      	blx	r3
	//Send Read X command
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, 4);
    369a:	230c      	movs	r3, #12
    369c:	18fa      	adds	r2, r7, r3
    369e:	494d      	ldr	r1, [pc, #308]	; (37d4 <read_accel+0x154>)
    36a0:	4849      	ldr	r0, [pc, #292]	; (37c8 <read_accel+0x148>)
    36a2:	2304      	movs	r3, #4
    36a4:	4c4c      	ldr	r4, [pc, #304]	; (37d8 <read_accel+0x158>)
    36a6:	47a0      	blx	r4
	spi_select_slave(&spi_main, sensor, false);
    36a8:	6879      	ldr	r1, [r7, #4]
    36aa:	4b47      	ldr	r3, [pc, #284]	; (37c8 <read_accel+0x148>)
    36ac:	2200      	movs	r2, #0
    36ae:	0018      	movs	r0, r3
    36b0:	4b46      	ldr	r3, [pc, #280]	; (37cc <read_accel+0x14c>)
    36b2:	4798      	blx	r3
	//Send Read Y command, Read X
	spi_select_slave(&spi_main, sensor, true);
    36b4:	6879      	ldr	r1, [r7, #4]
    36b6:	4b44      	ldr	r3, [pc, #272]	; (37c8 <read_accel+0x148>)
    36b8:	2201      	movs	r2, #1
    36ba:	0018      	movs	r0, r3
    36bc:	4b43      	ldr	r3, [pc, #268]	; (37cc <read_accel+0x14c>)
    36be:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_y, read_buffer, 4);
    36c0:	230c      	movs	r3, #12
    36c2:	18fa      	adds	r2, r7, r3
    36c4:	4945      	ldr	r1, [pc, #276]	; (37dc <read_accel+0x15c>)
    36c6:	4840      	ldr	r0, [pc, #256]	; (37c8 <read_accel+0x148>)
    36c8:	2304      	movs	r3, #4
    36ca:	4c43      	ldr	r4, [pc, #268]	; (37d8 <read_accel+0x158>)
    36cc:	47a0      	blx	r4
	spi_select_slave(&spi_main, sensor, false);
    36ce:	6879      	ldr	r1, [r7, #4]
    36d0:	4b3d      	ldr	r3, [pc, #244]	; (37c8 <read_accel+0x148>)
    36d2:	2200      	movs	r2, #0
    36d4:	0018      	movs	r0, r3
    36d6:	4b3d      	ldr	r3, [pc, #244]	; (37cc <read_accel+0x14c>)
    36d8:	4798      	blx	r3
	//Parse X data
	vector[0]=parse_acc_data(read_buffer);
    36da:	230c      	movs	r3, #12
    36dc:	18fb      	adds	r3, r7, r3
    36de:	0018      	movs	r0, r3
    36e0:	4b3f      	ldr	r3, [pc, #252]	; (37e0 <read_accel+0x160>)
    36e2:	4798      	blx	r3
    36e4:	1c02      	adds	r2, r0, #0
    36e6:	683b      	ldr	r3, [r7, #0]
    36e8:	601a      	str	r2, [r3, #0]
	//Send Read Z command, Read Y
	spi_select_slave(&spi_main, sensor, true);
    36ea:	6879      	ldr	r1, [r7, #4]
    36ec:	4b36      	ldr	r3, [pc, #216]	; (37c8 <read_accel+0x148>)
    36ee:	2201      	movs	r2, #1
    36f0:	0018      	movs	r0, r3
    36f2:	4b36      	ldr	r3, [pc, #216]	; (37cc <read_accel+0x14c>)
    36f4:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_z, read_buffer, 4);
    36f6:	230c      	movs	r3, #12
    36f8:	18fa      	adds	r2, r7, r3
    36fa:	493a      	ldr	r1, [pc, #232]	; (37e4 <read_accel+0x164>)
    36fc:	4832      	ldr	r0, [pc, #200]	; (37c8 <read_accel+0x148>)
    36fe:	2304      	movs	r3, #4
    3700:	4c35      	ldr	r4, [pc, #212]	; (37d8 <read_accel+0x158>)
    3702:	47a0      	blx	r4
	spi_select_slave(&spi_main, sensor, false);
    3704:	6879      	ldr	r1, [r7, #4]
    3706:	4b30      	ldr	r3, [pc, #192]	; (37c8 <read_accel+0x148>)
    3708:	2200      	movs	r2, #0
    370a:	0018      	movs	r0, r3
    370c:	4b2f      	ldr	r3, [pc, #188]	; (37cc <read_accel+0x14c>)
    370e:	4798      	blx	r3
	//Parse Y data
	vector[1]=parse_acc_data(read_buffer);
    3710:	683b      	ldr	r3, [r7, #0]
    3712:	1d1c      	adds	r4, r3, #4
    3714:	230c      	movs	r3, #12
    3716:	18fb      	adds	r3, r7, r3
    3718:	0018      	movs	r0, r3
    371a:	4b31      	ldr	r3, [pc, #196]	; (37e0 <read_accel+0x160>)
    371c:	4798      	blx	r3
    371e:	1c03      	adds	r3, r0, #0
    3720:	6023      	str	r3, [r4, #0]
	//Send read status command (not used), read Z
	spi_select_slave(&spi_main, sensor, true);
    3722:	6879      	ldr	r1, [r7, #4]
    3724:	4b28      	ldr	r3, [pc, #160]	; (37c8 <read_accel+0x148>)
    3726:	2201      	movs	r2, #1
    3728:	0018      	movs	r0, r3
    372a:	4b28      	ldr	r3, [pc, #160]	; (37cc <read_accel+0x14c>)
    372c:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_status, read_buffer, 4);
    372e:	230c      	movs	r3, #12
    3730:	18fa      	adds	r2, r7, r3
    3732:	492d      	ldr	r1, [pc, #180]	; (37e8 <read_accel+0x168>)
    3734:	4824      	ldr	r0, [pc, #144]	; (37c8 <read_accel+0x148>)
    3736:	2304      	movs	r3, #4
    3738:	4c27      	ldr	r4, [pc, #156]	; (37d8 <read_accel+0x158>)
    373a:	47a0      	blx	r4
	spi_select_slave(&spi_main, sensor, false);
    373c:	6879      	ldr	r1, [r7, #4]
    373e:	4b22      	ldr	r3, [pc, #136]	; (37c8 <read_accel+0x148>)
    3740:	2200      	movs	r2, #0
    3742:	0018      	movs	r0, r3
    3744:	4b21      	ldr	r3, [pc, #132]	; (37cc <read_accel+0x14c>)
    3746:	4798      	blx	r3
	//Parse Z data
	vector[2]=parse_acc_data(read_buffer);
    3748:	683b      	ldr	r3, [r7, #0]
    374a:	3308      	adds	r3, #8
    374c:	001c      	movs	r4, r3
    374e:	230c      	movs	r3, #12
    3750:	18fb      	adds	r3, r7, r3
    3752:	0018      	movs	r0, r3
    3754:	4b22      	ldr	r3, [pc, #136]	; (37e0 <read_accel+0x160>)
    3756:	4798      	blx	r3
    3758:	1c03      	adds	r3, r0, #0
    375a:	6023      	str	r3, [r4, #0]
	//Correct for sensor orientation
	temp=vector[1];
    375c:	683b      	ldr	r3, [r7, #0]
    375e:	685b      	ldr	r3, [r3, #4]
    3760:	613b      	str	r3, [r7, #16]
	vector[1]=vector[0];
    3762:	683b      	ldr	r3, [r7, #0]
    3764:	3304      	adds	r3, #4
    3766:	683a      	ldr	r2, [r7, #0]
    3768:	6812      	ldr	r2, [r2, #0]
    376a:	601a      	str	r2, [r3, #0]
	vector[0]=-1*temp;
    376c:	693b      	ldr	r3, [r7, #16]
    376e:	2280      	movs	r2, #128	; 0x80
    3770:	0612      	lsls	r2, r2, #24
    3772:	405a      	eors	r2, r3
    3774:	683b      	ldr	r3, [r7, #0]
    3776:	601a      	str	r2, [r3, #0]
	
	for (i=0;i<3;i++){
    3778:	2317      	movs	r3, #23
    377a:	18fb      	adds	r3, r7, r3
    377c:	2200      	movs	r2, #0
    377e:	701a      	strb	r2, [r3, #0]
    3780:	e019      	b.n	37b6 <read_accel+0x136>
		vector[i] = vector[i]/a_coarse_gain;
    3782:	2317      	movs	r3, #23
    3784:	18fb      	adds	r3, r7, r3
    3786:	781b      	ldrb	r3, [r3, #0]
    3788:	009b      	lsls	r3, r3, #2
    378a:	683a      	ldr	r2, [r7, #0]
    378c:	18d4      	adds	r4, r2, r3
    378e:	2317      	movs	r3, #23
    3790:	18fb      	adds	r3, r7, r3
    3792:	781b      	ldrb	r3, [r3, #0]
    3794:	009b      	lsls	r3, r3, #2
    3796:	683a      	ldr	r2, [r7, #0]
    3798:	18d3      	adds	r3, r2, r3
    379a:	681a      	ldr	r2, [r3, #0]
    379c:	4b13      	ldr	r3, [pc, #76]	; (37ec <read_accel+0x16c>)
    379e:	4914      	ldr	r1, [pc, #80]	; (37f0 <read_accel+0x170>)
    37a0:	1c10      	adds	r0, r2, #0
    37a2:	4798      	blx	r3
    37a4:	1c03      	adds	r3, r0, #0
    37a6:	6023      	str	r3, [r4, #0]
	for (i=0;i<3;i++){
    37a8:	2317      	movs	r3, #23
    37aa:	18fb      	adds	r3, r7, r3
    37ac:	781a      	ldrb	r2, [r3, #0]
    37ae:	2317      	movs	r3, #23
    37b0:	18fb      	adds	r3, r7, r3
    37b2:	3201      	adds	r2, #1
    37b4:	701a      	strb	r2, [r3, #0]
    37b6:	2317      	movs	r3, #23
    37b8:	18fb      	adds	r3, r7, r3
    37ba:	781b      	ldrb	r3, [r3, #0]
    37bc:	2b02      	cmp	r3, #2
    37be:	d9e0      	bls.n	3782 <read_accel+0x102>
	}
	
	
}
    37c0:	46c0      	nop			; (mov r8, r8)
    37c2:	46bd      	mov	sp, r7
    37c4:	b007      	add	sp, #28
    37c6:	bd90      	pop	{r4, r7, pc}
    37c8:	20001270 	.word	0x20001270
    37cc:	00017325 	.word	0x00017325
    37d0:	00010379 	.word	0x00010379
    37d4:	2000006c 	.word	0x2000006c
    37d8:	00017739 	.word	0x00017739
    37dc:	20000070 	.word	0x20000070
    37e0:	000037f5 	.word	0x000037f5
    37e4:	20000074 	.word	0x20000074
    37e8:	20000078 	.word	0x20000078
    37ec:	000213f9 	.word	0x000213f9
    37f0:	459c4000 	.word	0x459c4000

000037f4 <parse_acc_data>:




float parse_acc_data(uint8_t buffer[4]){
    37f4:	b580      	push	{r7, lr}
    37f6:	b084      	sub	sp, #16
    37f8:	af00      	add	r7, sp, #0
    37fa:	6078      	str	r0, [r7, #4]
	float result=0;
    37fc:	2300      	movs	r3, #0
    37fe:	60fb      	str	r3, [r7, #12]
	int16_t var16;
	var16= buffer[1];
    3800:	687b      	ldr	r3, [r7, #4]
    3802:	3301      	adds	r3, #1
    3804:	781a      	ldrb	r2, [r3, #0]
    3806:	230a      	movs	r3, #10
    3808:	18fb      	adds	r3, r7, r3
    380a:	801a      	strh	r2, [r3, #0]
	var16=var16<<8;
    380c:	230a      	movs	r3, #10
    380e:	18fb      	adds	r3, r7, r3
    3810:	2200      	movs	r2, #0
    3812:	5e9b      	ldrsh	r3, [r3, r2]
    3814:	021a      	lsls	r2, r3, #8
    3816:	230a      	movs	r3, #10
    3818:	18fb      	adds	r3, r7, r3
    381a:	801a      	strh	r2, [r3, #0]
	var16=var16+buffer[2];
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	3302      	adds	r3, #2
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	b29a      	uxth	r2, r3
    3824:	230a      	movs	r3, #10
    3826:	18fb      	adds	r3, r7, r3
    3828:	881b      	ldrh	r3, [r3, #0]
    382a:	18d3      	adds	r3, r2, r3
    382c:	b29a      	uxth	r2, r3
    382e:	230a      	movs	r3, #10
    3830:	18fb      	adds	r3, r7, r3
    3832:	801a      	strh	r2, [r3, #0]
	result=var16;
    3834:	230a      	movs	r3, #10
    3836:	18fb      	adds	r3, r7, r3
    3838:	2200      	movs	r2, #0
    383a:	5e9a      	ldrsh	r2, [r3, r2]
    383c:	4b04      	ldr	r3, [pc, #16]	; (3850 <parse_acc_data+0x5c>)
    383e:	0010      	movs	r0, r2
    3840:	4798      	blx	r3
    3842:	1c03      	adds	r3, r0, #0
    3844:	60fb      	str	r3, [r7, #12]
	return result;
    3846:	68fb      	ldr	r3, [r7, #12]
}
    3848:	1c18      	adds	r0, r3, #0
    384a:	46bd      	mov	sp, r7
    384c:	b004      	add	sp, #16
    384e:	bd80      	pop	{r7, pc}
    3850:	00021d91 	.word	0x00021d91

00003854 <setup_accel>:


void setup_accel(struct spi_slave_inst *const sensor){
    3854:	b590      	push	{r4, r7, lr}
    3856:	b085      	sub	sp, #20
    3858:	af00      	add	r7, sp, #0
    385a:	6078      	str	r0, [r7, #4]
	uint8_t read_buffer[4];
	
	//select acc1 chip
	config_spi(sensors);
    385c:	2001      	movs	r0, #1
    385e:	4b1a      	ldr	r3, [pc, #104]	; (38c8 <setup_accel+0x74>)
    3860:	4798      	blx	r3
	
	spi_select_slave(&spi_main, sensor, true);
    3862:	6879      	ldr	r1, [r7, #4]
    3864:	4b19      	ldr	r3, [pc, #100]	; (38cc <setup_accel+0x78>)
    3866:	2201      	movs	r2, #1
    3868:	0018      	movs	r0, r3
    386a:	4b19      	ldr	r3, [pc, #100]	; (38d0 <setup_accel+0x7c>)
    386c:	4798      	blx	r3
	spi_clear();
    386e:	4b19      	ldr	r3, [pc, #100]	; (38d4 <setup_accel+0x80>)
    3870:	4798      	blx	r3
	//sw reset
	spi_transceive_buffer_wait(&spi_main, sw_reset, read_buffer, 4);
    3872:	230c      	movs	r3, #12
    3874:	18fa      	adds	r2, r7, r3
    3876:	4918      	ldr	r1, [pc, #96]	; (38d8 <setup_accel+0x84>)
    3878:	4814      	ldr	r0, [pc, #80]	; (38cc <setup_accel+0x78>)
    387a:	2304      	movs	r3, #4
    387c:	4c17      	ldr	r4, [pc, #92]	; (38dc <setup_accel+0x88>)
    387e:	47a0      	blx	r4
	//toggle CS line
	spi_select_slave(&spi_main, sensor, false);
    3880:	6879      	ldr	r1, [r7, #4]
    3882:	4b12      	ldr	r3, [pc, #72]	; (38cc <setup_accel+0x78>)
    3884:	2200      	movs	r2, #0
    3886:	0018      	movs	r0, r3
    3888:	4b11      	ldr	r3, [pc, #68]	; (38d0 <setup_accel+0x7c>)
    388a:	4798      	blx	r3
	delay_ms(10);
    388c:	200a      	movs	r0, #10
    388e:	4b14      	ldr	r3, [pc, #80]	; (38e0 <setup_accel+0x8c>)
    3890:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, true);
    3892:	6879      	ldr	r1, [r7, #4]
    3894:	4b0d      	ldr	r3, [pc, #52]	; (38cc <setup_accel+0x78>)
    3896:	2201      	movs	r2, #1
    3898:	0018      	movs	r0, r3
    389a:	4b0d      	ldr	r3, [pc, #52]	; (38d0 <setup_accel+0x7c>)
    389c:	4798      	blx	r3
	//set mode
	spi_transceive_buffer_wait(&spi_main, set_mode4, read_buffer, 4);
    389e:	230c      	movs	r3, #12
    38a0:	18fa      	adds	r2, r7, r3
    38a2:	4910      	ldr	r1, [pc, #64]	; (38e4 <setup_accel+0x90>)
    38a4:	4809      	ldr	r0, [pc, #36]	; (38cc <setup_accel+0x78>)
    38a6:	2304      	movs	r3, #4
    38a8:	4c0c      	ldr	r4, [pc, #48]	; (38dc <setup_accel+0x88>)
    38aa:	47a0      	blx	r4
	//toggle CS line
	spi_select_slave(&spi_main, sensor, false);
    38ac:	6879      	ldr	r1, [r7, #4]
    38ae:	4b07      	ldr	r3, [pc, #28]	; (38cc <setup_accel+0x78>)
    38b0:	2200      	movs	r2, #0
    38b2:	0018      	movs	r0, r3
    38b4:	4b06      	ldr	r3, [pc, #24]	; (38d0 <setup_accel+0x7c>)
    38b6:	4798      	blx	r3
	config_spi(LCD);
    38b8:	2000      	movs	r0, #0
    38ba:	4b03      	ldr	r3, [pc, #12]	; (38c8 <setup_accel+0x74>)
    38bc:	4798      	blx	r3
	
}
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	46bd      	mov	sp, r7
    38c2:	b005      	add	sp, #20
    38c4:	bd90      	pop	{r4, r7, pc}
    38c6:	46c0      	nop			; (mov r8, r8)
    38c8:	00010311 	.word	0x00010311
    38cc:	20001270 	.word	0x20001270
    38d0:	00017325 	.word	0x00017325
    38d4:	00010379 	.word	0x00010379
    38d8:	20000080 	.word	0x20000080
    38dc:	00017739 	.word	0x00017739
    38e0:	000181b5 	.word	0x000181b5
    38e4:	2000007c 	.word	0x2000007c

000038e8 <read_mag>:




uint8_t read_mag(struct spi_slave_inst *const sensor, float vector[3]){
    38e8:	b590      	push	{r4, r7, lr}
    38ea:	b089      	sub	sp, #36	; 0x24
    38ec:	af00      	add	r7, sp, #0
    38ee:	6078      	str	r0, [r7, #4]
    38f0:	6039      	str	r1, [r7, #0]
	uint8_t data_ready;
	uint8_t counter1;
	uint8_t i;
	//select sensor
	// Assumes SPI already set up for sensors
	spi_select_slave(&spi_main, sensor, true);
    38f2:	6879      	ldr	r1, [r7, #4]
    38f4:	4b69      	ldr	r3, [pc, #420]	; (3a9c <read_mag+0x1b4>)
    38f6:	2201      	movs	r2, #1
    38f8:	0018      	movs	r0, r3
    38fa:	4b69      	ldr	r3, [pc, #420]	; (3aa0 <read_mag+0x1b8>)
    38fc:	4798      	blx	r3
	spi_clear();
    38fe:	4b69      	ldr	r3, [pc, #420]	; (3aa4 <read_mag+0x1bc>)
    3900:	4798      	blx	r3
	//Send Send Poll command to 0x00
	write_buffer[0]=0x00; //poll register
    3902:	2318      	movs	r3, #24
    3904:	18fb      	adds	r3, r7, r3
    3906:	2200      	movs	r2, #0
    3908:	701a      	strb	r2, [r3, #0]
	write_buffer[1]=0x70; //set to poll X,Y,Z
    390a:	2318      	movs	r3, #24
    390c:	18fb      	adds	r3, r7, r3
    390e:	2270      	movs	r2, #112	; 0x70
    3910:	705a      	strb	r2, [r3, #1]
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    3912:	2318      	movs	r3, #24
    3914:	18f9      	adds	r1, r7, r3
    3916:	4b61      	ldr	r3, [pc, #388]	; (3a9c <read_mag+0x1b4>)
    3918:	2202      	movs	r2, #2
    391a:	0018      	movs	r0, r3
    391c:	4b62      	ldr	r3, [pc, #392]	; (3aa8 <read_mag+0x1c0>)
    391e:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    3920:	6879      	ldr	r1, [r7, #4]
    3922:	4b5e      	ldr	r3, [pc, #376]	; (3a9c <read_mag+0x1b4>)
    3924:	2200      	movs	r2, #0
    3926:	0018      	movs	r0, r3
    3928:	4b5d      	ldr	r3, [pc, #372]	; (3aa0 <read_mag+0x1b8>)
    392a:	4798      	blx	r3
	delay_us(1);
    392c:	2001      	movs	r0, #1
    392e:	4b5f      	ldr	r3, [pc, #380]	; (3aac <read_mag+0x1c4>)
    3930:	4798      	blx	r3
	data_ready=0x00;
    3932:	231f      	movs	r3, #31
    3934:	18fb      	adds	r3, r7, r3
    3936:	2200      	movs	r2, #0
    3938:	701a      	strb	r2, [r3, #0]
	counter1 = 0x00;
    393a:	231e      	movs	r3, #30
    393c:	18fb      	adds	r3, r7, r3
    393e:	2200      	movs	r2, #0
    3940:	701a      	strb	r2, [r3, #0]
	while(!data_ready){
    3942:	e038      	b.n	39b6 <read_mag+0xce>
		spi_select_slave(&spi_main, sensor, true);
    3944:	6879      	ldr	r1, [r7, #4]
    3946:	4b55      	ldr	r3, [pc, #340]	; (3a9c <read_mag+0x1b4>)
    3948:	2201      	movs	r2, #1
    394a:	0018      	movs	r0, r3
    394c:	4b54      	ldr	r3, [pc, #336]	; (3aa0 <read_mag+0x1b8>)
    394e:	4798      	blx	r3
		write_buffer[0]=0xB4;
    3950:	2318      	movs	r3, #24
    3952:	18fb      	adds	r3, r7, r3
    3954:	22b4      	movs	r2, #180	; 0xb4
    3956:	701a      	strb	r2, [r3, #0]
		write_buffer[1]=0xFF;
    3958:	2318      	movs	r3, #24
    395a:	18fb      	adds	r3, r7, r3
    395c:	22ff      	movs	r2, #255	; 0xff
    395e:	705a      	strb	r2, [r3, #1]
		spi_transceive_buffer_wait(&spi_main, write_buffer, read_buffer, 2);
    3960:	230c      	movs	r3, #12
    3962:	18fa      	adds	r2, r7, r3
    3964:	2318      	movs	r3, #24
    3966:	18f9      	adds	r1, r7, r3
    3968:	484c      	ldr	r0, [pc, #304]	; (3a9c <read_mag+0x1b4>)
    396a:	2302      	movs	r3, #2
    396c:	4c50      	ldr	r4, [pc, #320]	; (3ab0 <read_mag+0x1c8>)
    396e:	47a0      	blx	r4
		data_ready=read_buffer[1];
    3970:	231f      	movs	r3, #31
    3972:	18fb      	adds	r3, r7, r3
    3974:	220c      	movs	r2, #12
    3976:	18ba      	adds	r2, r7, r2
    3978:	7852      	ldrb	r2, [r2, #1]
    397a:	701a      	strb	r2, [r3, #0]
		data_ready=data_ready & 0x80;
    397c:	231f      	movs	r3, #31
    397e:	18fb      	adds	r3, r7, r3
    3980:	221f      	movs	r2, #31
    3982:	18ba      	adds	r2, r7, r2
    3984:	7812      	ldrb	r2, [r2, #0]
    3986:	217f      	movs	r1, #127	; 0x7f
    3988:	438a      	bics	r2, r1
    398a:	701a      	strb	r2, [r3, #0]
		counter1=counter1+1;
    398c:	231e      	movs	r3, #30
    398e:	18fb      	adds	r3, r7, r3
    3990:	221e      	movs	r2, #30
    3992:	18ba      	adds	r2, r7, r2
    3994:	7812      	ldrb	r2, [r2, #0]
    3996:	3201      	adds	r2, #1
    3998:	701a      	strb	r2, [r3, #0]
		spi_select_slave(&spi_main, sensor, false);
    399a:	6879      	ldr	r1, [r7, #4]
    399c:	4b3f      	ldr	r3, [pc, #252]	; (3a9c <read_mag+0x1b4>)
    399e:	2200      	movs	r2, #0
    39a0:	0018      	movs	r0, r3
    39a2:	4b3f      	ldr	r3, [pc, #252]	; (3aa0 <read_mag+0x1b8>)
    39a4:	4798      	blx	r3
		delay_us(1);
    39a6:	2001      	movs	r0, #1
    39a8:	4b40      	ldr	r3, [pc, #256]	; (3aac <read_mag+0x1c4>)
    39aa:	4798      	blx	r3
		if(counter1==0xFF){break;}
    39ac:	231e      	movs	r3, #30
    39ae:	18fb      	adds	r3, r7, r3
    39b0:	781b      	ldrb	r3, [r3, #0]
    39b2:	2bff      	cmp	r3, #255	; 0xff
    39b4:	d005      	beq.n	39c2 <read_mag+0xda>
	while(!data_ready){
    39b6:	231f      	movs	r3, #31
    39b8:	18fb      	adds	r3, r7, r3
    39ba:	781b      	ldrb	r3, [r3, #0]
    39bc:	2b00      	cmp	r3, #0
    39be:	d0c1      	beq.n	3944 <read_mag+0x5c>
    39c0:	e000      	b.n	39c4 <read_mag+0xdc>
		if(counter1==0xFF){break;}
    39c2:	46c0      	nop			; (mov r8, r8)
	}
	spi_select_slave(&spi_main, sensor, true);
    39c4:	6879      	ldr	r1, [r7, #4]
    39c6:	4b35      	ldr	r3, [pc, #212]	; (3a9c <read_mag+0x1b4>)
    39c8:	2201      	movs	r2, #1
    39ca:	0018      	movs	r0, r3
    39cc:	4b34      	ldr	r3, [pc, #208]	; (3aa0 <read_mag+0x1b8>)
    39ce:	4798      	blx	r3
	write_buffer[0]=0xA4;
    39d0:	2318      	movs	r3, #24
    39d2:	18fb      	adds	r3, r7, r3
    39d4:	22a4      	movs	r2, #164	; 0xa4
    39d6:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&spi_main, write_buffer, 1);
    39d8:	2318      	movs	r3, #24
    39da:	18f9      	adds	r1, r7, r3
    39dc:	4b2f      	ldr	r3, [pc, #188]	; (3a9c <read_mag+0x1b4>)
    39de:	2201      	movs	r2, #1
    39e0:	0018      	movs	r0, r3
    39e2:	4b31      	ldr	r3, [pc, #196]	; (3aa8 <read_mag+0x1c0>)
    39e4:	4798      	blx	r3
	spi_read_buffer_wait(&spi_main, read_buffer, 9, 0xFF);
    39e6:	230c      	movs	r3, #12
    39e8:	18f9      	adds	r1, r7, r3
    39ea:	482c      	ldr	r0, [pc, #176]	; (3a9c <read_mag+0x1b4>)
    39ec:	23ff      	movs	r3, #255	; 0xff
    39ee:	2209      	movs	r2, #9
    39f0:	4c30      	ldr	r4, [pc, #192]	; (3ab4 <read_mag+0x1cc>)
    39f2:	47a0      	blx	r4
	spi_select_slave(&spi_main, sensor, false);
    39f4:	6879      	ldr	r1, [r7, #4]
    39f6:	4b29      	ldr	r3, [pc, #164]	; (3a9c <read_mag+0x1b4>)
    39f8:	2200      	movs	r2, #0
    39fa:	0018      	movs	r0, r3
    39fc:	4b28      	ldr	r3, [pc, #160]	; (3aa0 <read_mag+0x1b8>)
    39fe:	4798      	blx	r3
	delay_us(1);
    3a00:	2001      	movs	r0, #1
    3a02:	4b2a      	ldr	r3, [pc, #168]	; (3aac <read_mag+0x1c4>)
    3a04:	4798      	blx	r3
	
	vector[0]=parse_mag_data(&read_buffer[0]);
    3a06:	230c      	movs	r3, #12
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	0018      	movs	r0, r3
    3a0c:	4b2a      	ldr	r3, [pc, #168]	; (3ab8 <read_mag+0x1d0>)
    3a0e:	4798      	blx	r3
    3a10:	1c02      	adds	r2, r0, #0
    3a12:	683b      	ldr	r3, [r7, #0]
    3a14:	601a      	str	r2, [r3, #0]
	vector[1]=parse_mag_data(&read_buffer[3]);
    3a16:	683b      	ldr	r3, [r7, #0]
    3a18:	1d1c      	adds	r4, r3, #4
    3a1a:	230c      	movs	r3, #12
    3a1c:	18fb      	adds	r3, r7, r3
    3a1e:	3303      	adds	r3, #3
    3a20:	0018      	movs	r0, r3
    3a22:	4b25      	ldr	r3, [pc, #148]	; (3ab8 <read_mag+0x1d0>)
    3a24:	4798      	blx	r3
    3a26:	1c03      	adds	r3, r0, #0
    3a28:	6023      	str	r3, [r4, #0]
	vector[2]=-1* parse_mag_data(&read_buffer[6]);//Z axis inverted
    3a2a:	683b      	ldr	r3, [r7, #0]
    3a2c:	3308      	adds	r3, #8
    3a2e:	001c      	movs	r4, r3
    3a30:	230c      	movs	r3, #12
    3a32:	18fb      	adds	r3, r7, r3
    3a34:	3306      	adds	r3, #6
    3a36:	0018      	movs	r0, r3
    3a38:	4b1f      	ldr	r3, [pc, #124]	; (3ab8 <read_mag+0x1d0>)
    3a3a:	4798      	blx	r3
    3a3c:	1c02      	adds	r2, r0, #0
    3a3e:	2380      	movs	r3, #128	; 0x80
    3a40:	061b      	lsls	r3, r3, #24
    3a42:	4053      	eors	r3, r2
    3a44:	6023      	str	r3, [r4, #0]
	
	for (i=0;i<3;i++){
    3a46:	231d      	movs	r3, #29
    3a48:	18fb      	adds	r3, r7, r3
    3a4a:	2200      	movs	r2, #0
    3a4c:	701a      	strb	r2, [r3, #0]
    3a4e:	e019      	b.n	3a84 <read_mag+0x19c>
		vector[i] = vector[i]/c_coarse_gain;
    3a50:	231d      	movs	r3, #29
    3a52:	18fb      	adds	r3, r7, r3
    3a54:	781b      	ldrb	r3, [r3, #0]
    3a56:	009b      	lsls	r3, r3, #2
    3a58:	683a      	ldr	r2, [r7, #0]
    3a5a:	18d4      	adds	r4, r2, r3
    3a5c:	231d      	movs	r3, #29
    3a5e:	18fb      	adds	r3, r7, r3
    3a60:	781b      	ldrb	r3, [r3, #0]
    3a62:	009b      	lsls	r3, r3, #2
    3a64:	683a      	ldr	r2, [r7, #0]
    3a66:	18d3      	adds	r3, r2, r3
    3a68:	681a      	ldr	r2, [r3, #0]
    3a6a:	4b14      	ldr	r3, [pc, #80]	; (3abc <read_mag+0x1d4>)
    3a6c:	4914      	ldr	r1, [pc, #80]	; (3ac0 <read_mag+0x1d8>)
    3a6e:	1c10      	adds	r0, r2, #0
    3a70:	4798      	blx	r3
    3a72:	1c03      	adds	r3, r0, #0
    3a74:	6023      	str	r3, [r4, #0]
	for (i=0;i<3;i++){
    3a76:	231d      	movs	r3, #29
    3a78:	18fb      	adds	r3, r7, r3
    3a7a:	781a      	ldrb	r2, [r3, #0]
    3a7c:	231d      	movs	r3, #29
    3a7e:	18fb      	adds	r3, r7, r3
    3a80:	3201      	adds	r2, #1
    3a82:	701a      	strb	r2, [r3, #0]
    3a84:	231d      	movs	r3, #29
    3a86:	18fb      	adds	r3, r7, r3
    3a88:	781b      	ldrb	r3, [r3, #0]
    3a8a:	2b02      	cmp	r3, #2
    3a8c:	d9e0      	bls.n	3a50 <read_mag+0x168>
	}
	
	return counter1;
    3a8e:	231e      	movs	r3, #30
    3a90:	18fb      	adds	r3, r7, r3
    3a92:	781b      	ldrb	r3, [r3, #0]
}
    3a94:	0018      	movs	r0, r3
    3a96:	46bd      	mov	sp, r7
    3a98:	b009      	add	sp, #36	; 0x24
    3a9a:	bd90      	pop	{r4, r7, pc}
    3a9c:	20001270 	.word	0x20001270
    3aa0:	00017325 	.word	0x00017325
    3aa4:	00010379 	.word	0x00010379
    3aa8:	00017415 	.word	0x00017415
    3aac:	00018185 	.word	0x00018185
    3ab0:	00017739 	.word	0x00017739
    3ab4:	00017169 	.word	0x00017169
    3ab8:	00003ac5 	.word	0x00003ac5
    3abc:	000213f9 	.word	0x000213f9
    3ac0:	45dac000 	.word	0x45dac000

00003ac4 <parse_mag_data>:

float parse_mag_data(uint8_t data[3]){
    3ac4:	b580      	push	{r7, lr}
    3ac6:	b084      	sub	sp, #16
    3ac8:	af00      	add	r7, sp, #0
    3aca:	6078      	str	r0, [r7, #4]
	float result;
	int32_t temp=0x00000000;
    3acc:	2300      	movs	r3, #0
    3ace:	60fb      	str	r3, [r7, #12]
	if(data[0] & 0x80){//negative number
    3ad0:	687b      	ldr	r3, [r7, #4]
    3ad2:	781b      	ldrb	r3, [r3, #0]
    3ad4:	b25b      	sxtb	r3, r3
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	da04      	bge.n	3ae4 <parse_mag_data+0x20>
		temp=0xff;
    3ada:	23ff      	movs	r3, #255	; 0xff
    3adc:	60fb      	str	r3, [r7, #12]
		temp=temp<<8;
    3ade:	68fb      	ldr	r3, [r7, #12]
    3ae0:	021b      	lsls	r3, r3, #8
    3ae2:	60fb      	str	r3, [r7, #12]
	}
	temp=temp+data[0];
    3ae4:	687b      	ldr	r3, [r7, #4]
    3ae6:	781b      	ldrb	r3, [r3, #0]
    3ae8:	001a      	movs	r2, r3
    3aea:	68fb      	ldr	r3, [r7, #12]
    3aec:	189b      	adds	r3, r3, r2
    3aee:	60fb      	str	r3, [r7, #12]
	temp=temp<<8;
    3af0:	68fb      	ldr	r3, [r7, #12]
    3af2:	021b      	lsls	r3, r3, #8
    3af4:	60fb      	str	r3, [r7, #12]
	temp=temp+data[1];
    3af6:	687b      	ldr	r3, [r7, #4]
    3af8:	3301      	adds	r3, #1
    3afa:	781b      	ldrb	r3, [r3, #0]
    3afc:	001a      	movs	r2, r3
    3afe:	68fb      	ldr	r3, [r7, #12]
    3b00:	189b      	adds	r3, r3, r2
    3b02:	60fb      	str	r3, [r7, #12]
	temp=temp<<8;
    3b04:	68fb      	ldr	r3, [r7, #12]
    3b06:	021b      	lsls	r3, r3, #8
    3b08:	60fb      	str	r3, [r7, #12]
	temp=temp+data[2];
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	3302      	adds	r3, #2
    3b0e:	781b      	ldrb	r3, [r3, #0]
    3b10:	001a      	movs	r2, r3
    3b12:	68fb      	ldr	r3, [r7, #12]
    3b14:	189b      	adds	r3, r3, r2
    3b16:	60fb      	str	r3, [r7, #12]
	result=temp;
    3b18:	4b04      	ldr	r3, [pc, #16]	; (3b2c <parse_mag_data+0x68>)
    3b1a:	68f8      	ldr	r0, [r7, #12]
    3b1c:	4798      	blx	r3
    3b1e:	1c03      	adds	r3, r0, #0
    3b20:	60bb      	str	r3, [r7, #8]
	return result;
    3b22:	68bb      	ldr	r3, [r7, #8]
}
    3b24:	1c18      	adds	r0, r3, #0
    3b26:	46bd      	mov	sp, r7
    3b28:	b004      	add	sp, #16
    3b2a:	bd80      	pop	{r7, pc}
    3b2c:	00021d91 	.word	0x00021d91

00003b30 <setup_mag>:

void setup_mag(struct spi_slave_inst *const sensor){
    3b30:	b580      	push	{r7, lr}
    3b32:	b084      	sub	sp, #16
    3b34:	af00      	add	r7, sp, #0
    3b36:	6078      	str	r0, [r7, #4]
	uint8_t write_buffer[7];
	//select sensor
	config_spi(sensors);
    3b38:	2001      	movs	r0, #1
    3b3a:	4b4d      	ldr	r3, [pc, #308]	; (3c70 <setup_mag+0x140>)
    3b3c:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, true);
    3b3e:	6879      	ldr	r1, [r7, #4]
    3b40:	4b4c      	ldr	r3, [pc, #304]	; (3c74 <setup_mag+0x144>)
    3b42:	2201      	movs	r2, #1
    3b44:	0018      	movs	r0, r3
    3b46:	4b4c      	ldr	r3, [pc, #304]	; (3c78 <setup_mag+0x148>)
    3b48:	4798      	blx	r3
	spi_clear();
    3b4a:	4b4c      	ldr	r3, [pc, #304]	; (3c7c <setup_mag+0x14c>)
    3b4c:	4798      	blx	r3
	//Set cycle count registers
	write_buffer[0]=0x04;//location of first write count register
    3b4e:	2308      	movs	r3, #8
    3b50:	18fb      	adds	r3, r7, r3
    3b52:	2204      	movs	r2, #4
    3b54:	701a      	strb	r2, [r3, #0]
	write_buffer[1]=cycle_count1;
    3b56:	4b4a      	ldr	r3, [pc, #296]	; (3c80 <setup_mag+0x150>)
    3b58:	781a      	ldrb	r2, [r3, #0]
    3b5a:	2308      	movs	r3, #8
    3b5c:	18fb      	adds	r3, r7, r3
    3b5e:	705a      	strb	r2, [r3, #1]
	write_buffer[2]=cycle_count2;
    3b60:	4b48      	ldr	r3, [pc, #288]	; (3c84 <setup_mag+0x154>)
    3b62:	781a      	ldrb	r2, [r3, #0]
    3b64:	2308      	movs	r3, #8
    3b66:	18fb      	adds	r3, r7, r3
    3b68:	709a      	strb	r2, [r3, #2]
	write_buffer[3]=cycle_count1;
    3b6a:	4b45      	ldr	r3, [pc, #276]	; (3c80 <setup_mag+0x150>)
    3b6c:	781a      	ldrb	r2, [r3, #0]
    3b6e:	2308      	movs	r3, #8
    3b70:	18fb      	adds	r3, r7, r3
    3b72:	70da      	strb	r2, [r3, #3]
	write_buffer[4]=cycle_count2;
    3b74:	4b43      	ldr	r3, [pc, #268]	; (3c84 <setup_mag+0x154>)
    3b76:	781a      	ldrb	r2, [r3, #0]
    3b78:	2308      	movs	r3, #8
    3b7a:	18fb      	adds	r3, r7, r3
    3b7c:	711a      	strb	r2, [r3, #4]
	write_buffer[5]=cycle_count1;
    3b7e:	4b40      	ldr	r3, [pc, #256]	; (3c80 <setup_mag+0x150>)
    3b80:	781a      	ldrb	r2, [r3, #0]
    3b82:	2308      	movs	r3, #8
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	715a      	strb	r2, [r3, #5]
	write_buffer[6]=cycle_count2;
    3b88:	4b3e      	ldr	r3, [pc, #248]	; (3c84 <setup_mag+0x154>)
    3b8a:	781a      	ldrb	r2, [r3, #0]
    3b8c:	2308      	movs	r3, #8
    3b8e:	18fb      	adds	r3, r7, r3
    3b90:	719a      	strb	r2, [r3, #6]
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
    3b92:	2308      	movs	r3, #8
    3b94:	18f9      	adds	r1, r7, r3
    3b96:	4b37      	ldr	r3, [pc, #220]	; (3c74 <setup_mag+0x144>)
    3b98:	2207      	movs	r2, #7
    3b9a:	0018      	movs	r0, r3
    3b9c:	4b3a      	ldr	r3, [pc, #232]	; (3c88 <setup_mag+0x158>)
    3b9e:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    3ba0:	6879      	ldr	r1, [r7, #4]
    3ba2:	4b34      	ldr	r3, [pc, #208]	; (3c74 <setup_mag+0x144>)
    3ba4:	2200      	movs	r2, #0
    3ba6:	0018      	movs	r0, r3
    3ba8:	4b33      	ldr	r3, [pc, #204]	; (3c78 <setup_mag+0x148>)
    3baa:	4798      	blx	r3
	//Turn off continuous read mode
	delay_ms(10);
    3bac:	200a      	movs	r0, #10
    3bae:	4b37      	ldr	r3, [pc, #220]	; (3c8c <setup_mag+0x15c>)
    3bb0:	4798      	blx	r3
	write_buffer[0]=0x01;//location of CRM register
    3bb2:	2308      	movs	r3, #8
    3bb4:	18fb      	adds	r3, r7, r3
    3bb6:	2201      	movs	r2, #1
    3bb8:	701a      	strb	r2, [r3, #0]
	write_buffer[1]=0x00;
    3bba:	2308      	movs	r3, #8
    3bbc:	18fb      	adds	r3, r7, r3
    3bbe:	2200      	movs	r2, #0
    3bc0:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
    3bc2:	6879      	ldr	r1, [r7, #4]
    3bc4:	4b2b      	ldr	r3, [pc, #172]	; (3c74 <setup_mag+0x144>)
    3bc6:	2201      	movs	r2, #1
    3bc8:	0018      	movs	r0, r3
    3bca:	4b2b      	ldr	r3, [pc, #172]	; (3c78 <setup_mag+0x148>)
    3bcc:	4798      	blx	r3
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    3bce:	2308      	movs	r3, #8
    3bd0:	18f9      	adds	r1, r7, r3
    3bd2:	4b28      	ldr	r3, [pc, #160]	; (3c74 <setup_mag+0x144>)
    3bd4:	2202      	movs	r2, #2
    3bd6:	0018      	movs	r0, r3
    3bd8:	4b2b      	ldr	r3, [pc, #172]	; (3c88 <setup_mag+0x158>)
    3bda:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    3bdc:	6879      	ldr	r1, [r7, #4]
    3bde:	4b25      	ldr	r3, [pc, #148]	; (3c74 <setup_mag+0x144>)
    3be0:	2200      	movs	r2, #0
    3be2:	0018      	movs	r0, r3
    3be4:	4b24      	ldr	r3, [pc, #144]	; (3c78 <setup_mag+0x148>)
    3be6:	4798      	blx	r3
	//Set BIST register
	delay_us(1);
    3be8:	2001      	movs	r0, #1
    3bea:	4b29      	ldr	r3, [pc, #164]	; (3c90 <setup_mag+0x160>)
    3bec:	4798      	blx	r3
	write_buffer[0]=0x33;//location of BIST register
    3bee:	2308      	movs	r3, #8
    3bf0:	18fb      	adds	r3, r7, r3
    3bf2:	2233      	movs	r2, #51	; 0x33
    3bf4:	701a      	strb	r2, [r3, #0]
	write_buffer[1]=0x00;	//default value
    3bf6:	2308      	movs	r3, #8
    3bf8:	18fb      	adds	r3, r7, r3
    3bfa:	2200      	movs	r2, #0
    3bfc:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
    3bfe:	6879      	ldr	r1, [r7, #4]
    3c00:	4b1c      	ldr	r3, [pc, #112]	; (3c74 <setup_mag+0x144>)
    3c02:	2201      	movs	r2, #1
    3c04:	0018      	movs	r0, r3
    3c06:	4b1c      	ldr	r3, [pc, #112]	; (3c78 <setup_mag+0x148>)
    3c08:	4798      	blx	r3
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    3c0a:	2308      	movs	r3, #8
    3c0c:	18f9      	adds	r1, r7, r3
    3c0e:	4b19      	ldr	r3, [pc, #100]	; (3c74 <setup_mag+0x144>)
    3c10:	2202      	movs	r2, #2
    3c12:	0018      	movs	r0, r3
    3c14:	4b1c      	ldr	r3, [pc, #112]	; (3c88 <setup_mag+0x158>)
    3c16:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    3c18:	6879      	ldr	r1, [r7, #4]
    3c1a:	4b16      	ldr	r3, [pc, #88]	; (3c74 <setup_mag+0x144>)
    3c1c:	2200      	movs	r2, #0
    3c1e:	0018      	movs	r0, r3
    3c20:	4b15      	ldr	r3, [pc, #84]	; (3c78 <setup_mag+0x148>)
    3c22:	4798      	blx	r3
	//SET HSHAKe register
	delay_us(1);
    3c24:	2001      	movs	r0, #1
    3c26:	4b1a      	ldr	r3, [pc, #104]	; (3c90 <setup_mag+0x160>)
    3c28:	4798      	blx	r3
	write_buffer[0]=0x35;//location of HSHAKE register
    3c2a:	2308      	movs	r3, #8
    3c2c:	18fb      	adds	r3, r7, r3
    3c2e:	2235      	movs	r2, #53	; 0x35
    3c30:	701a      	strb	r2, [r3, #0]
	write_buffer[1]=0x1B;//default value
    3c32:	2308      	movs	r3, #8
    3c34:	18fb      	adds	r3, r7, r3
    3c36:	221b      	movs	r2, #27
    3c38:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
    3c3a:	6879      	ldr	r1, [r7, #4]
    3c3c:	4b0d      	ldr	r3, [pc, #52]	; (3c74 <setup_mag+0x144>)
    3c3e:	2201      	movs	r2, #1
    3c40:	0018      	movs	r0, r3
    3c42:	4b0d      	ldr	r3, [pc, #52]	; (3c78 <setup_mag+0x148>)
    3c44:	4798      	blx	r3
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    3c46:	2308      	movs	r3, #8
    3c48:	18f9      	adds	r1, r7, r3
    3c4a:	4b0a      	ldr	r3, [pc, #40]	; (3c74 <setup_mag+0x144>)
    3c4c:	2202      	movs	r2, #2
    3c4e:	0018      	movs	r0, r3
    3c50:	4b0d      	ldr	r3, [pc, #52]	; (3c88 <setup_mag+0x158>)
    3c52:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, false);
    3c54:	6879      	ldr	r1, [r7, #4]
    3c56:	4b07      	ldr	r3, [pc, #28]	; (3c74 <setup_mag+0x144>)
    3c58:	2200      	movs	r2, #0
    3c5a:	0018      	movs	r0, r3
    3c5c:	4b06      	ldr	r3, [pc, #24]	; (3c78 <setup_mag+0x148>)
    3c5e:	4798      	blx	r3
	config_spi(LCD);
    3c60:	2000      	movs	r0, #0
    3c62:	4b03      	ldr	r3, [pc, #12]	; (3c70 <setup_mag+0x140>)
    3c64:	4798      	blx	r3
}
    3c66:	46c0      	nop			; (mov r8, r8)
    3c68:	46bd      	mov	sp, r7
    3c6a:	b004      	add	sp, #16
    3c6c:	bd80      	pop	{r7, pc}
    3c6e:	46c0      	nop			; (mov r8, r8)
    3c70:	00010311 	.word	0x00010311
    3c74:	20001270 	.word	0x20001270
    3c78:	00017325 	.word	0x00017325
    3c7c:	00010379 	.word	0x00010379
    3c80:	20000084 	.word	0x20000084
    3c84:	20000085 	.word	0x20000085
    3c88:	00017415 	.word	0x00017415
    3c8c:	000181b5 	.word	0x000181b5
    3c90:	00018185 	.word	0x00018185

00003c94 <gen_err_message>:




void gen_err_message(char *err_str, struct MEASUREMENT *meas_inst, uint8_t errN){
    3c94:	b5b0      	push	{r4, r5, r7, lr}
    3c96:	b08a      	sub	sp, #40	; 0x28
    3c98:	af02      	add	r7, sp, #8
    3c9a:	60f8      	str	r0, [r7, #12]
    3c9c:	60b9      	str	r1, [r7, #8]
    3c9e:	1dfb      	adds	r3, r7, #7
    3ca0:	701a      	strb	r2, [r3, #0]
	float data1, data2;
	uint8_t axis;
	data1 = meas_inst->measurement_error_data1[errN];
    3ca2:	1dfb      	adds	r3, r7, #7
    3ca4:	781b      	ldrb	r3, [r3, #0]
    3ca6:	68ba      	ldr	r2, [r7, #8]
    3ca8:	3318      	adds	r3, #24
    3caa:	009b      	lsls	r3, r3, #2
    3cac:	18d3      	adds	r3, r2, r3
    3cae:	3304      	adds	r3, #4
    3cb0:	681b      	ldr	r3, [r3, #0]
    3cb2:	61fb      	str	r3, [r7, #28]
	data2 = meas_inst->measurement_error_data2[errN];
    3cb4:	1dfb      	adds	r3, r7, #7
    3cb6:	781b      	ldrb	r3, [r3, #0]
    3cb8:	68ba      	ldr	r2, [r7, #8]
    3cba:	3320      	adds	r3, #32
    3cbc:	009b      	lsls	r3, r3, #2
    3cbe:	18d3      	adds	r3, r2, r3
    3cc0:	3304      	adds	r3, #4
    3cc2:	681b      	ldr	r3, [r3, #0]
    3cc4:	61bb      	str	r3, [r7, #24]
	axis = data2;
    3cc6:	2317      	movs	r3, #23
    3cc8:	18fc      	adds	r4, r7, r3
    3cca:	4b86      	ldr	r3, [pc, #536]	; (3ee4 <gen_err_message+0x250>)
    3ccc:	69b8      	ldr	r0, [r7, #24]
    3cce:	4798      	blx	r3
    3cd0:	0003      	movs	r3, r0
    3cd2:	7023      	strb	r3, [r4, #0]
	
	switch(meas_inst->measurement_error[errN]){
    3cd4:	1dfb      	adds	r3, r7, #7
    3cd6:	781b      	ldrb	r3, [r3, #0]
    3cd8:	68ba      	ldr	r2, [r7, #8]
    3cda:	215c      	movs	r1, #92	; 0x5c
    3cdc:	18d3      	adds	r3, r2, r3
    3cde:	185b      	adds	r3, r3, r1
    3ce0:	781b      	ldrb	r3, [r3, #0]
    3ce2:	2b0e      	cmp	r3, #14
    3ce4:	d900      	bls.n	3ce8 <gen_err_message+0x54>
    3ce6:	e0f1      	b.n	3ecc <gen_err_message+0x238>
    3ce8:	009a      	lsls	r2, r3, #2
    3cea:	4b7f      	ldr	r3, [pc, #508]	; (3ee8 <gen_err_message+0x254>)
    3cec:	18d3      	adds	r3, r2, r3
    3cee:	681b      	ldr	r3, [r3, #0]
    3cf0:	469f      	mov	pc, r3
		case accel1_mag_err:
			if (data1>1){sprintf(err_str,"Acc1 High: %0.4f", data1);}
    3cf2:	4b7e      	ldr	r3, [pc, #504]	; (3eec <gen_err_message+0x258>)
    3cf4:	21fe      	movs	r1, #254	; 0xfe
    3cf6:	0589      	lsls	r1, r1, #22
    3cf8:	69f8      	ldr	r0, [r7, #28]
    3cfa:	4798      	blx	r3
    3cfc:	1e03      	subs	r3, r0, #0
    3cfe:	d00b      	beq.n	3d18 <gen_err_message+0x84>
    3d00:	4b7b      	ldr	r3, [pc, #492]	; (3ef0 <gen_err_message+0x25c>)
    3d02:	69f8      	ldr	r0, [r7, #28]
    3d04:	4798      	blx	r3
    3d06:	0003      	movs	r3, r0
    3d08:	000c      	movs	r4, r1
    3d0a:	497a      	ldr	r1, [pc, #488]	; (3ef4 <gen_err_message+0x260>)
    3d0c:	68f8      	ldr	r0, [r7, #12]
    3d0e:	001a      	movs	r2, r3
    3d10:	0023      	movs	r3, r4
    3d12:	4c79      	ldr	r4, [pc, #484]	; (3ef8 <gen_err_message+0x264>)
    3d14:	47a0      	blx	r4
			else{sprintf(err_str,"Acc1 Low: %0.4f", data1);}
			break;
    3d16:	e0e1      	b.n	3edc <gen_err_message+0x248>
			else{sprintf(err_str,"Acc1 Low: %0.4f", data1);}
    3d18:	4b75      	ldr	r3, [pc, #468]	; (3ef0 <gen_err_message+0x25c>)
    3d1a:	69f8      	ldr	r0, [r7, #28]
    3d1c:	4798      	blx	r3
    3d1e:	0003      	movs	r3, r0
    3d20:	000c      	movs	r4, r1
    3d22:	4976      	ldr	r1, [pc, #472]	; (3efc <gen_err_message+0x268>)
    3d24:	68f8      	ldr	r0, [r7, #12]
    3d26:	001a      	movs	r2, r3
    3d28:	0023      	movs	r3, r4
    3d2a:	4c73      	ldr	r4, [pc, #460]	; (3ef8 <gen_err_message+0x264>)
    3d2c:	47a0      	blx	r4
			break;
    3d2e:	e0d5      	b.n	3edc <gen_err_message+0x248>
		case accel2_mag_err:
			if (data1>1){sprintf(err_str,"Acc2 High: %0.4f", data1);}
    3d30:	4b6e      	ldr	r3, [pc, #440]	; (3eec <gen_err_message+0x258>)
    3d32:	21fe      	movs	r1, #254	; 0xfe
    3d34:	0589      	lsls	r1, r1, #22
    3d36:	69f8      	ldr	r0, [r7, #28]
    3d38:	4798      	blx	r3
    3d3a:	1e03      	subs	r3, r0, #0
    3d3c:	d00b      	beq.n	3d56 <gen_err_message+0xc2>
    3d3e:	4b6c      	ldr	r3, [pc, #432]	; (3ef0 <gen_err_message+0x25c>)
    3d40:	69f8      	ldr	r0, [r7, #28]
    3d42:	4798      	blx	r3
    3d44:	0003      	movs	r3, r0
    3d46:	000c      	movs	r4, r1
    3d48:	496d      	ldr	r1, [pc, #436]	; (3f00 <gen_err_message+0x26c>)
    3d4a:	68f8      	ldr	r0, [r7, #12]
    3d4c:	001a      	movs	r2, r3
    3d4e:	0023      	movs	r3, r4
    3d50:	4c69      	ldr	r4, [pc, #420]	; (3ef8 <gen_err_message+0x264>)
    3d52:	47a0      	blx	r4
			else{sprintf(err_str,"Acc2 Low: %0.4f", data1);}
			break;
    3d54:	e0c2      	b.n	3edc <gen_err_message+0x248>
			else{sprintf(err_str,"Acc2 Low: %0.4f", data1);}
    3d56:	4b66      	ldr	r3, [pc, #408]	; (3ef0 <gen_err_message+0x25c>)
    3d58:	69f8      	ldr	r0, [r7, #28]
    3d5a:	4798      	blx	r3
    3d5c:	0003      	movs	r3, r0
    3d5e:	000c      	movs	r4, r1
    3d60:	4968      	ldr	r1, [pc, #416]	; (3f04 <gen_err_message+0x270>)
    3d62:	68f8      	ldr	r0, [r7, #12]
    3d64:	001a      	movs	r2, r3
    3d66:	0023      	movs	r3, r4
    3d68:	4c63      	ldr	r4, [pc, #396]	; (3ef8 <gen_err_message+0x264>)
    3d6a:	47a0      	blx	r4
			break;
    3d6c:	e0b6      	b.n	3edc <gen_err_message+0x248>
		case comp1_mag_err:
			if (data1>1){sprintf(err_str,"Comp1 High: %0.4f", data1);}
    3d6e:	4b5f      	ldr	r3, [pc, #380]	; (3eec <gen_err_message+0x258>)
    3d70:	21fe      	movs	r1, #254	; 0xfe
    3d72:	0589      	lsls	r1, r1, #22
    3d74:	69f8      	ldr	r0, [r7, #28]
    3d76:	4798      	blx	r3
    3d78:	1e03      	subs	r3, r0, #0
    3d7a:	d00b      	beq.n	3d94 <gen_err_message+0x100>
    3d7c:	4b5c      	ldr	r3, [pc, #368]	; (3ef0 <gen_err_message+0x25c>)
    3d7e:	69f8      	ldr	r0, [r7, #28]
    3d80:	4798      	blx	r3
    3d82:	0003      	movs	r3, r0
    3d84:	000c      	movs	r4, r1
    3d86:	4960      	ldr	r1, [pc, #384]	; (3f08 <gen_err_message+0x274>)
    3d88:	68f8      	ldr	r0, [r7, #12]
    3d8a:	001a      	movs	r2, r3
    3d8c:	0023      	movs	r3, r4
    3d8e:	4c5a      	ldr	r4, [pc, #360]	; (3ef8 <gen_err_message+0x264>)
    3d90:	47a0      	blx	r4
			else{sprintf(err_str,"Comp1 Low: %0.4f", data1);}
			break;
    3d92:	e0a3      	b.n	3edc <gen_err_message+0x248>
			else{sprintf(err_str,"Comp1 Low: %0.4f", data1);}
    3d94:	4b56      	ldr	r3, [pc, #344]	; (3ef0 <gen_err_message+0x25c>)
    3d96:	69f8      	ldr	r0, [r7, #28]
    3d98:	4798      	blx	r3
    3d9a:	0003      	movs	r3, r0
    3d9c:	000c      	movs	r4, r1
    3d9e:	495b      	ldr	r1, [pc, #364]	; (3f0c <gen_err_message+0x278>)
    3da0:	68f8      	ldr	r0, [r7, #12]
    3da2:	001a      	movs	r2, r3
    3da4:	0023      	movs	r3, r4
    3da6:	4c54      	ldr	r4, [pc, #336]	; (3ef8 <gen_err_message+0x264>)
    3da8:	47a0      	blx	r4
			break;
    3daa:	e097      	b.n	3edc <gen_err_message+0x248>
		case comp2_mag_err:
			if (data1>1){sprintf(err_str,"Comp2 High: %0.4f", data1);}
    3dac:	4b4f      	ldr	r3, [pc, #316]	; (3eec <gen_err_message+0x258>)
    3dae:	21fe      	movs	r1, #254	; 0xfe
    3db0:	0589      	lsls	r1, r1, #22
    3db2:	69f8      	ldr	r0, [r7, #28]
    3db4:	4798      	blx	r3
    3db6:	1e03      	subs	r3, r0, #0
    3db8:	d00b      	beq.n	3dd2 <gen_err_message+0x13e>
    3dba:	4b4d      	ldr	r3, [pc, #308]	; (3ef0 <gen_err_message+0x25c>)
    3dbc:	69f8      	ldr	r0, [r7, #28]
    3dbe:	4798      	blx	r3
    3dc0:	0003      	movs	r3, r0
    3dc2:	000c      	movs	r4, r1
    3dc4:	4952      	ldr	r1, [pc, #328]	; (3f10 <gen_err_message+0x27c>)
    3dc6:	68f8      	ldr	r0, [r7, #12]
    3dc8:	001a      	movs	r2, r3
    3dca:	0023      	movs	r3, r4
    3dcc:	4c4a      	ldr	r4, [pc, #296]	; (3ef8 <gen_err_message+0x264>)
    3dce:	47a0      	blx	r4
			else{sprintf(err_str,"Comp2 Low: %0.4f", data1);}
			break;
    3dd0:	e084      	b.n	3edc <gen_err_message+0x248>
			else{sprintf(err_str,"Comp2 Low: %0.4f", data1);}
    3dd2:	4b47      	ldr	r3, [pc, #284]	; (3ef0 <gen_err_message+0x25c>)
    3dd4:	69f8      	ldr	r0, [r7, #28]
    3dd6:	4798      	blx	r3
    3dd8:	0003      	movs	r3, r0
    3dda:	000c      	movs	r4, r1
    3ddc:	494d      	ldr	r1, [pc, #308]	; (3f14 <gen_err_message+0x280>)
    3dde:	68f8      	ldr	r0, [r7, #12]
    3de0:	001a      	movs	r2, r3
    3de2:	0023      	movs	r3, r4
    3de4:	4c44      	ldr	r4, [pc, #272]	; (3ef8 <gen_err_message+0x264>)
    3de6:	47a0      	blx	r4
			break;
    3de8:	e078      	b.n	3edc <gen_err_message+0x248>
		case accel_disp_err:
			sprintf(err_str,"Acc delta ax%d: %0.3f%%", axis, 100*data1);
    3dea:	2317      	movs	r3, #23
    3dec:	18fb      	adds	r3, r7, r3
    3dee:	781d      	ldrb	r5, [r3, #0]
    3df0:	4b49      	ldr	r3, [pc, #292]	; (3f18 <gen_err_message+0x284>)
    3df2:	494a      	ldr	r1, [pc, #296]	; (3f1c <gen_err_message+0x288>)
    3df4:	69f8      	ldr	r0, [r7, #28]
    3df6:	4798      	blx	r3
    3df8:	1c03      	adds	r3, r0, #0
    3dfa:	1c1a      	adds	r2, r3, #0
    3dfc:	4b3c      	ldr	r3, [pc, #240]	; (3ef0 <gen_err_message+0x25c>)
    3dfe:	1c10      	adds	r0, r2, #0
    3e00:	4798      	blx	r3
    3e02:	0003      	movs	r3, r0
    3e04:	000c      	movs	r4, r1
    3e06:	4946      	ldr	r1, [pc, #280]	; (3f20 <gen_err_message+0x28c>)
    3e08:	68f8      	ldr	r0, [r7, #12]
    3e0a:	9300      	str	r3, [sp, #0]
    3e0c:	9401      	str	r4, [sp, #4]
    3e0e:	002a      	movs	r2, r5
    3e10:	4b39      	ldr	r3, [pc, #228]	; (3ef8 <gen_err_message+0x264>)
    3e12:	4798      	blx	r3
			break;
    3e14:	e062      	b.n	3edc <gen_err_message+0x248>
		case comp_disp_err:
			sprintf(err_str,"Cmp delta ax%d: %0.3f%%", axis, 100*data1);
    3e16:	2317      	movs	r3, #23
    3e18:	18fb      	adds	r3, r7, r3
    3e1a:	781d      	ldrb	r5, [r3, #0]
    3e1c:	4b3e      	ldr	r3, [pc, #248]	; (3f18 <gen_err_message+0x284>)
    3e1e:	493f      	ldr	r1, [pc, #252]	; (3f1c <gen_err_message+0x288>)
    3e20:	69f8      	ldr	r0, [r7, #28]
    3e22:	4798      	blx	r3
    3e24:	1c03      	adds	r3, r0, #0
    3e26:	1c1a      	adds	r2, r3, #0
    3e28:	4b31      	ldr	r3, [pc, #196]	; (3ef0 <gen_err_message+0x25c>)
    3e2a:	1c10      	adds	r0, r2, #0
    3e2c:	4798      	blx	r3
    3e2e:	0003      	movs	r3, r0
    3e30:	000c      	movs	r4, r1
    3e32:	493c      	ldr	r1, [pc, #240]	; (3f24 <gen_err_message+0x290>)
    3e34:	68f8      	ldr	r0, [r7, #12]
    3e36:	9300      	str	r3, [sp, #0]
    3e38:	9401      	str	r4, [sp, #4]
    3e3a:	002a      	movs	r2, r5
    3e3c:	4b2e      	ldr	r3, [pc, #184]	; (3ef8 <gen_err_message+0x264>)
    3e3e:	4798      	blx	r3
			break;
    3e40:	e04c      	b.n	3edc <gen_err_message+0x248>
		case inc_ang_err:
			sprintf(err_str,"Inc Delta: %0.3f deg", data1);
    3e42:	4b2b      	ldr	r3, [pc, #172]	; (3ef0 <gen_err_message+0x25c>)
    3e44:	69f8      	ldr	r0, [r7, #28]
    3e46:	4798      	blx	r3
    3e48:	0003      	movs	r3, r0
    3e4a:	000c      	movs	r4, r1
    3e4c:	4936      	ldr	r1, [pc, #216]	; (3f28 <gen_err_message+0x294>)
    3e4e:	68f8      	ldr	r0, [r7, #12]
    3e50:	001a      	movs	r2, r3
    3e52:	0023      	movs	r3, r4
    3e54:	4c28      	ldr	r4, [pc, #160]	; (3ef8 <gen_err_message+0x264>)
    3e56:	47a0      	blx	r4
			break;
    3e58:	e040      	b.n	3edc <gen_err_message+0x248>
		case azm_ang_err:
			sprintf(err_str,"Azm Delta: %0.3f deg", data1);
    3e5a:	4b25      	ldr	r3, [pc, #148]	; (3ef0 <gen_err_message+0x25c>)
    3e5c:	69f8      	ldr	r0, [r7, #28]
    3e5e:	4798      	blx	r3
    3e60:	0003      	movs	r3, r0
    3e62:	000c      	movs	r4, r1
    3e64:	4931      	ldr	r1, [pc, #196]	; (3f2c <gen_err_message+0x298>)
    3e66:	68f8      	ldr	r0, [r7, #12]
    3e68:	001a      	movs	r2, r3
    3e6a:	0023      	movs	r3, r4
    3e6c:	4c22      	ldr	r4, [pc, #136]	; (3ef8 <gen_err_message+0x264>)
    3e6e:	47a0      	blx	r4
			break;
    3e70:	e034      	b.n	3edc <gen_err_message+0x248>
		case laser_calc_err:
			sprintf(err_str,"laser calc error");
    3e72:	68fa      	ldr	r2, [r7, #12]
    3e74:	4b2e      	ldr	r3, [pc, #184]	; (3f30 <gen_err_message+0x29c>)
    3e76:	0010      	movs	r0, r2
    3e78:	0019      	movs	r1, r3
    3e7a:	2311      	movs	r3, #17
    3e7c:	001a      	movs	r2, r3
    3e7e:	4b2d      	ldr	r3, [pc, #180]	; (3f34 <gen_err_message+0x2a0>)
    3e80:	4798      	blx	r3
			break;
    3e82:	e02b      	b.n	3edc <gen_err_message+0x248>
		case laser_weak_signal:
			sprintf(err_str,"laser weak signal");
    3e84:	68fa      	ldr	r2, [r7, #12]
    3e86:	4b2c      	ldr	r3, [pc, #176]	; (3f38 <gen_err_message+0x2a4>)
    3e88:	0010      	movs	r0, r2
    3e8a:	0019      	movs	r1, r3
    3e8c:	2312      	movs	r3, #18
    3e8e:	001a      	movs	r2, r3
    3e90:	4b28      	ldr	r3, [pc, #160]	; (3f34 <gen_err_message+0x2a0>)
    3e92:	4798      	blx	r3
			break;
    3e94:	e022      	b.n	3edc <gen_err_message+0x248>
		case laser_strong_signal:
			sprintf(err_str,"laser strong signal");
    3e96:	68fa      	ldr	r2, [r7, #12]
    3e98:	4b28      	ldr	r3, [pc, #160]	; (3f3c <gen_err_message+0x2a8>)
    3e9a:	0010      	movs	r0, r2
    3e9c:	0019      	movs	r1, r3
    3e9e:	2314      	movs	r3, #20
    3ea0:	001a      	movs	r2, r3
    3ea2:	4b24      	ldr	r3, [pc, #144]	; (3f34 <gen_err_message+0x2a0>)
    3ea4:	4798      	blx	r3
			break;
    3ea6:	e019      	b.n	3edc <gen_err_message+0x248>
		case laser_response_timeout:
			sprintf(err_str,"laser comm timeout");
    3ea8:	68fa      	ldr	r2, [r7, #12]
    3eaa:	4b25      	ldr	r3, [pc, #148]	; (3f40 <gen_err_message+0x2ac>)
    3eac:	0010      	movs	r0, r2
    3eae:	0019      	movs	r1, r3
    3eb0:	2313      	movs	r3, #19
    3eb2:	001a      	movs	r2, r3
    3eb4:	4b1f      	ldr	r3, [pc, #124]	; (3f34 <gen_err_message+0x2a0>)
    3eb6:	4798      	blx	r3
			break;
    3eb8:	e010      	b.n	3edc <gen_err_message+0x248>
		case laser_unknown:
			sprintf(err_str,"laser error, unknown");
    3eba:	68fa      	ldr	r2, [r7, #12]
    3ebc:	4b21      	ldr	r3, [pc, #132]	; (3f44 <gen_err_message+0x2b0>)
    3ebe:	0010      	movs	r0, r2
    3ec0:	0019      	movs	r1, r3
    3ec2:	2315      	movs	r3, #21
    3ec4:	001a      	movs	r2, r3
    3ec6:	4b1b      	ldr	r3, [pc, #108]	; (3f34 <gen_err_message+0x2a0>)
    3ec8:	4798      	blx	r3
			break;
    3eca:	e007      	b.n	3edc <gen_err_message+0x248>
		default:
			sprintf(err_str,"unrecognized error");	
    3ecc:	68fa      	ldr	r2, [r7, #12]
    3ece:	4b1e      	ldr	r3, [pc, #120]	; (3f48 <gen_err_message+0x2b4>)
    3ed0:	0010      	movs	r0, r2
    3ed2:	0019      	movs	r1, r3
    3ed4:	2313      	movs	r3, #19
    3ed6:	001a      	movs	r2, r3
    3ed8:	4b16      	ldr	r3, [pc, #88]	; (3f34 <gen_err_message+0x2a0>)
    3eda:	4798      	blx	r3
	};
	
	
	
	
}
    3edc:	46c0      	nop			; (mov r8, r8)
    3ede:	46bd      	mov	sp, r7
    3ee0:	b008      	add	sp, #32
    3ee2:	bdb0      	pop	{r4, r5, r7, pc}
    3ee4:	00021069 	.word	0x00021069
    3ee8:	00027f28 	.word	0x00027f28
    3eec:	00020f71 	.word	0x00020f71
    3ef0:	00023a0d 	.word	0x00023a0d
    3ef4:	00027db4 	.word	0x00027db4
    3ef8:	00023d31 	.word	0x00023d31
    3efc:	00027dc8 	.word	0x00027dc8
    3f00:	00027dd8 	.word	0x00027dd8
    3f04:	00027dec 	.word	0x00027dec
    3f08:	00027dfc 	.word	0x00027dfc
    3f0c:	00027e10 	.word	0x00027e10
    3f10:	00027e24 	.word	0x00027e24
    3f14:	00027e38 	.word	0x00027e38
    3f18:	000217d9 	.word	0x000217d9
    3f1c:	42c80000 	.word	0x42c80000
    3f20:	00027e4c 	.word	0x00027e4c
    3f24:	00027e64 	.word	0x00027e64
    3f28:	00027e7c 	.word	0x00027e7c
    3f2c:	00027e94 	.word	0x00027e94
    3f30:	00027eac 	.word	0x00027eac
    3f34:	00023c19 	.word	0x00023c19
    3f38:	00027ec0 	.word	0x00027ec0
    3f3c:	00027ed4 	.word	0x00027ed4
    3f40:	00027ee8 	.word	0x00027ee8
    3f44:	00027efc 	.word	0x00027efc
    3f48:	00027f14 	.word	0x00027f14

00003f4c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3f4c:	b580      	push	{r7, lr}
    3f4e:	b082      	sub	sp, #8
    3f50:	af00      	add	r7, sp, #0
    3f52:	0002      	movs	r2, r0
    3f54:	1dfb      	adds	r3, r7, #7
    3f56:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3f58:	4b06      	ldr	r3, [pc, #24]	; (3f74 <system_interrupt_enable+0x28>)
    3f5a:	1dfa      	adds	r2, r7, #7
    3f5c:	7812      	ldrb	r2, [r2, #0]
    3f5e:	0011      	movs	r1, r2
    3f60:	221f      	movs	r2, #31
    3f62:	400a      	ands	r2, r1
    3f64:	2101      	movs	r1, #1
    3f66:	4091      	lsls	r1, r2
    3f68:	000a      	movs	r2, r1
    3f6a:	601a      	str	r2, [r3, #0]
}
    3f6c:	46c0      	nop			; (mov r8, r8)
    3f6e:	46bd      	mov	sp, r7
    3f70:	b002      	add	sp, #8
    3f72:	bd80      	pop	{r7, pc}
    3f74:	e000e100 	.word	0xe000e100

00003f78 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    3f78:	b580      	push	{r7, lr}
    3f7a:	b084      	sub	sp, #16
    3f7c:	af00      	add	r7, sp, #0
    3f7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3f80:	687b      	ldr	r3, [r7, #4]
    3f82:	681b      	ldr	r3, [r3, #0]
    3f84:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3f86:	68fb      	ldr	r3, [r7, #12]
    3f88:	691b      	ldr	r3, [r3, #16]
    3f8a:	1e5a      	subs	r2, r3, #1
    3f8c:	4193      	sbcs	r3, r2
    3f8e:	b2db      	uxtb	r3, r3
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
#endif
}
    3f90:	0018      	movs	r0, r3
    3f92:	46bd      	mov	sp, r7
    3f94:	b004      	add	sp, #16
    3f96:	bd80      	pop	{r7, pc}

00003f98 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    3f98:	b580      	push	{r7, lr}
    3f9a:	b082      	sub	sp, #8
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    3fa0:	687b      	ldr	r3, [r7, #4]
    3fa2:	2200      	movs	r2, #0
    3fa4:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	2200      	movs	r2, #0
    3faa:	70da      	strb	r2, [r3, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	2200      	movs	r2, #0
    3fb0:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	2200      	movs	r2, #0
    3fb6:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3fb8:	687b      	ldr	r3, [r7, #4]
    3fba:	2200      	movs	r2, #0
    3fbc:	71da      	strb	r2, [r3, #7]
	config->run_in_standby             = false;
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	2200      	movs	r2, #0
    3fc2:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	2200      	movs	r2, #0
    3fc8:	709a      	strb	r2, [r3, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3fca:	687b      	ldr	r3, [r7, #4]
    3fcc:	2200      	movs	r2, #0
    3fce:	721a      	strb	r2, [r3, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	2200      	movs	r2, #0
    3fd4:	725a      	strb	r2, [r3, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3fd6:	687b      	ldr	r3, [r7, #4]
    3fd8:	2200      	movs	r2, #0
    3fda:	729a      	strb	r2, [r3, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3fdc:	687b      	ldr	r3, [r7, #4]
    3fde:	2200      	movs	r2, #0
    3fe0:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	2200      	movs	r2, #0
    3fe6:	731a      	strb	r2, [r3, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	2200      	movs	r2, #0
    3fec:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	2200      	movs	r2, #0
    3ff2:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	2200      	movs	r2, #0
    3ff8:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	2200      	movs	r2, #0
    3ffe:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    4000:	687b      	ldr	r3, [r7, #4]
    4002:	2200      	movs	r2, #0
    4004:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	2200      	movs	r2, #0
    400a:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    400c:	687b      	ldr	r3, [r7, #4]
    400e:	2200      	movs	r2, #0
    4010:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	2200      	movs	r2, #0
    4016:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	2200      	movs	r2, #0
    401c:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    401e:	687b      	ldr	r3, [r7, #4]
    4020:	2200      	movs	r2, #0
    4022:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    4024:	687b      	ldr	r3, [r7, #4]
    4026:	2200      	movs	r2, #0
    4028:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	2234      	movs	r2, #52	; 0x34
    402e:	2100      	movs	r1, #0
    4030:	5499      	strb	r1, [r3, r2]
#endif

}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	46bd      	mov	sp, r7
    4036:	b002      	add	sp, #8
    4038:	bd80      	pop	{r7, pc}
	...

0000403c <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    403c:	b580      	push	{r7, lr}
    403e:	b084      	sub	sp, #16
    4040:	af00      	add	r7, sp, #0
    4042:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    404a:	46c0      	nop			; (mov r8, r8)
    404c:	687b      	ldr	r3, [r7, #4]
    404e:	0018      	movs	r0, r3
    4050:	4b06      	ldr	r3, [pc, #24]	; (406c <tc_enable+0x30>)
    4052:	4798      	blx	r3
    4054:	1e03      	subs	r3, r0, #0
    4056:	d1f9      	bne.n	404c <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    4058:	68fb      	ldr	r3, [r7, #12]
    405a:	681b      	ldr	r3, [r3, #0]
    405c:	2202      	movs	r2, #2
    405e:	431a      	orrs	r2, r3
    4060:	68fb      	ldr	r3, [r7, #12]
    4062:	601a      	str	r2, [r3, #0]
}
    4064:	46c0      	nop			; (mov r8, r8)
    4066:	46bd      	mov	sp, r7
    4068:	b004      	add	sp, #16
    406a:	bd80      	pop	{r7, pc}
    406c:	00003f79 	.word	0x00003f79

00004070 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    4070:	b580      	push	{r7, lr}
    4072:	b084      	sub	sp, #16
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	681b      	ldr	r3, [r3, #0]
    407c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	0018      	movs	r0, r3
    4084:	4b0a      	ldr	r3, [pc, #40]	; (40b0 <tc_disable+0x40>)
    4086:	4798      	blx	r3
    4088:	1e03      	subs	r3, r0, #0
    408a:	d1f9      	bne.n	4080 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    408c:	68fb      	ldr	r3, [r7, #12]
    408e:	2233      	movs	r2, #51	; 0x33
    4090:	721a      	strb	r2, [r3, #8]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    4092:	68fb      	ldr	r3, [r7, #12]
    4094:	2233      	movs	r2, #51	; 0x33
    4096:	729a      	strb	r2, [r3, #10]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    4098:	68fb      	ldr	r3, [r7, #12]
    409a:	681b      	ldr	r3, [r3, #0]
    409c:	2202      	movs	r2, #2
    409e:	4393      	bics	r3, r2
    40a0:	001a      	movs	r2, r3
    40a2:	68fb      	ldr	r3, [r7, #12]
    40a4:	601a      	str	r2, [r3, #0]
}
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	46bd      	mov	sp, r7
    40aa:	b004      	add	sp, #16
    40ac:	bd80      	pop	{r7, pc}
    40ae:	46c0      	nop			; (mov r8, r8)
    40b0:	00003f79 	.word	0x00003f79

000040b4 <tc_stop_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_stop_counter(
		const struct tc_module *const module_inst)
{
    40b4:	b580      	push	{r7, lr}
    40b6:	b084      	sub	sp, #16
    40b8:	af00      	add	r7, sp, #0
    40ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	681b      	ldr	r3, [r3, #0]
    40c0:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    40c2:	46c0      	nop			; (mov r8, r8)
    40c4:	687b      	ldr	r3, [r7, #4]
    40c6:	0018      	movs	r0, r3
    40c8:	4b05      	ldr	r3, [pc, #20]	; (40e0 <tc_stop_counter+0x2c>)
    40ca:	4798      	blx	r3
    40cc:	1e03      	subs	r3, r0, #0
    40ce:	d1f9      	bne.n	40c4 <tc_stop_counter+0x10>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    40d0:	68fb      	ldr	r3, [r7, #12]
    40d2:	2240      	movs	r2, #64	; 0x40
    40d4:	715a      	strb	r2, [r3, #5]
}
    40d6:	46c0      	nop			; (mov r8, r8)
    40d8:	46bd      	mov	sp, r7
    40da:	b004      	add	sp, #16
    40dc:	bd80      	pop	{r7, pc}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	00003f79 	.word	0x00003f79

000040e4 <tc_start_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_start_counter(
		const struct tc_module *const module_inst)
{
    40e4:	b580      	push	{r7, lr}
    40e6:	b084      	sub	sp, #16
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	681b      	ldr	r3, [r3, #0]
    40f0:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	0018      	movs	r0, r3
    40f8:	4b0a      	ldr	r3, [pc, #40]	; (4124 <tc_start_counter+0x40>)
    40fa:	4798      	blx	r3
    40fc:	1e03      	subs	r3, r0, #0
    40fe:	d1f9      	bne.n	40f4 <tc_start_counter+0x10>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    4100:	68fb      	ldr	r3, [r7, #12]
    4102:	2200      	movs	r2, #0
    4104:	711a      	strb	r2, [r3, #4]

	while (tc_is_syncing(module_inst)) {
    4106:	46c0      	nop			; (mov r8, r8)
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	0018      	movs	r0, r3
    410c:	4b05      	ldr	r3, [pc, #20]	; (4124 <tc_start_counter+0x40>)
    410e:	4798      	blx	r3
    4110:	1e03      	subs	r3, r0, #0
    4112:	d1f9      	bne.n	4108 <tc_start_counter+0x24>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    4114:	68fb      	ldr	r3, [r7, #12]
    4116:	2220      	movs	r2, #32
    4118:	715a      	strb	r2, [r3, #5]
}
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	46bd      	mov	sp, r7
    411e:	b004      	add	sp, #16
    4120:	bd80      	pop	{r7, pc}
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	00003f79 	.word	0x00003f79

00004128 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    4128:	b580      	push	{r7, lr}
    412a:	b082      	sub	sp, #8
    412c:	af00      	add	r7, sp, #0
    412e:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    4130:	4a04      	ldr	r2, [pc, #16]	; (4144 <_tc_interrupt_get_interrupt_vector+0x1c>)
    4132:	687b      	ldr	r3, [r7, #4]
    4134:	18d3      	adds	r3, r2, r3
    4136:	781b      	ldrb	r3, [r3, #0]
    4138:	b25b      	sxtb	r3, r3
}
    413a:	0018      	movs	r0, r3
    413c:	46bd      	mov	sp, r7
    413e:	b002      	add	sp, #8
    4140:	bd80      	pop	{r7, pc}
    4142:	46c0      	nop			; (mov r8, r8)
    4144:	200000a8 	.word	0x200000a8

00004148 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    4148:	b580      	push	{r7, lr}
    414a:	b082      	sub	sp, #8
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
    4150:	000a      	movs	r2, r1
    4152:	1cfb      	adds	r3, r7, #3
    4154:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	681b      	ldr	r3, [r3, #0]
    415a:	0018      	movs	r0, r3
    415c:	4b22      	ldr	r3, [pc, #136]	; (41e8 <tc_enable_callback+0xa0>)
    415e:	4798      	blx	r3
    4160:	0003      	movs	r3, r0
    4162:	0018      	movs	r0, r3
    4164:	4b21      	ldr	r3, [pc, #132]	; (41ec <tc_enable_callback+0xa4>)
    4166:	4798      	blx	r3
    4168:	0003      	movs	r3, r0
    416a:	0018      	movs	r0, r3
    416c:	4b20      	ldr	r3, [pc, #128]	; (41f0 <tc_enable_callback+0xa8>)
    416e:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    4170:	1cfb      	adds	r3, r7, #3
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	2b02      	cmp	r3, #2
    4176:	d10b      	bne.n	4190 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    4178:	687b      	ldr	r3, [r7, #4]
    417a:	7e5b      	ldrb	r3, [r3, #25]
    417c:	2210      	movs	r2, #16
    417e:	4313      	orrs	r3, r2
    4180:	b2da      	uxtb	r2, r3
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    4186:	687b      	ldr	r3, [r7, #4]
    4188:	681b      	ldr	r3, [r3, #0]
    418a:	2210      	movs	r2, #16
    418c:	725a      	strb	r2, [r3, #9]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
    418e:	e026      	b.n	41de <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    4190:	1cfb      	adds	r3, r7, #3
    4192:	781b      	ldrb	r3, [r3, #0]
    4194:	2b03      	cmp	r3, #3
    4196:	d10b      	bne.n	41b0 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	7e5b      	ldrb	r3, [r3, #25]
    419c:	2220      	movs	r2, #32
    419e:	4313      	orrs	r3, r2
    41a0:	b2da      	uxtb	r2, r3
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	681b      	ldr	r3, [r3, #0]
    41aa:	2220      	movs	r2, #32
    41ac:	725a      	strb	r2, [r3, #9]
}
    41ae:	e016      	b.n	41de <tc_enable_callback+0x96>
		module->enable_callback_mask |= (1 << callback_type);
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	7e5b      	ldrb	r3, [r3, #25]
    41b4:	b25a      	sxtb	r2, r3
    41b6:	1cfb      	adds	r3, r7, #3
    41b8:	781b      	ldrb	r3, [r3, #0]
    41ba:	2101      	movs	r1, #1
    41bc:	4099      	lsls	r1, r3
    41be:	000b      	movs	r3, r1
    41c0:	b25b      	sxtb	r3, r3
    41c2:	4313      	orrs	r3, r2
    41c4:	b25b      	sxtb	r3, r3
    41c6:	b2da      	uxtb	r2, r3
    41c8:	687b      	ldr	r3, [r7, #4]
    41ca:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	1cfa      	adds	r2, r7, #3
    41d2:	7812      	ldrb	r2, [r2, #0]
    41d4:	2101      	movs	r1, #1
    41d6:	4091      	lsls	r1, r2
    41d8:	000a      	movs	r2, r1
    41da:	b2d2      	uxtb	r2, r2
    41dc:	725a      	strb	r2, [r3, #9]
}
    41de:	46c0      	nop			; (mov r8, r8)
    41e0:	46bd      	mov	sp, r7
    41e2:	b002      	add	sp, #8
    41e4:	bd80      	pop	{r7, pc}
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	00008e6d 	.word	0x00008e6d
    41ec:	00004129 	.word	0x00004129
    41f0:	00003f4d 	.word	0x00003f4d

000041f4 <wdt_get_config_defaults>:
{
    41f4:	b580      	push	{r7, lr}
    41f6:	b082      	sub	sp, #8
    41f8:	af00      	add	r7, sp, #0
    41fa:	6078      	str	r0, [r7, #4]
	config->always_on            = false;
    41fc:	687b      	ldr	r3, [r7, #4]
    41fe:	2200      	movs	r2, #0
    4200:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
    4202:	687b      	ldr	r3, [r7, #4]
    4204:	2201      	movs	r2, #1
    4206:	705a      	strb	r2, [r3, #1]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	220c      	movs	r2, #12
    420c:	709a      	strb	r2, [r3, #2]
	config->window_period        = WDT_PERIOD_NONE;
    420e:	687b      	ldr	r3, [r7, #4]
    4210:	2200      	movs	r2, #0
    4212:	70da      	strb	r2, [r3, #3]
	config->early_warning_period = WDT_PERIOD_NONE;
    4214:	687b      	ldr	r3, [r7, #4]
    4216:	2200      	movs	r2, #0
    4218:	711a      	strb	r2, [r3, #4]
}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	46bd      	mov	sp, r7
    421e:	b002      	add	sp, #8
    4220:	bd80      	pop	{r7, pc}
	...

00004224 <wdt_enable>:
#define off_hold_time 96  // 32k, div1024 prescaler;  32 counts/second
#define idle_seconds_max 60 // seconds



void wdt_enable(void){
    4224:	b580      	push	{r7, lr}
    4226:	af00      	add	r7, sp, #0
	wdt_get_config_defaults(&wdt_configuration);
    4228:	4b06      	ldr	r3, [pc, #24]	; (4244 <wdt_enable+0x20>)
    422a:	0018      	movs	r0, r3
    422c:	4b06      	ldr	r3, [pc, #24]	; (4248 <wdt_enable+0x24>)
    422e:	4798      	blx	r3
	//wdt_configuration.clock_source = GCLK_GENERATOR_2;// Uses internal 1khz clock
	wdt_configuration.timeout_period = WDT_PERIOD_4096CLK;
    4230:	4b04      	ldr	r3, [pc, #16]	; (4244 <wdt_enable+0x20>)
    4232:	220a      	movs	r2, #10
    4234:	709a      	strb	r2, [r3, #2]
	wdt_set_config(&wdt_configuration);
    4236:	4b03      	ldr	r3, [pc, #12]	; (4244 <wdt_enable+0x20>)
    4238:	0018      	movs	r0, r3
    423a:	4b04      	ldr	r3, [pc, #16]	; (424c <wdt_enable+0x28>)
    423c:	4798      	blx	r3
	
	
}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	46bd      	mov	sp, r7
    4242:	bd80      	pop	{r7, pc}
    4244:	2000138c 	.word	0x2000138c
    4248:	000041f5 	.word	0x000041f5
    424c:	00001349 	.word	0x00001349

00004250 <wdt_disable>:

void wdt_disable(void){
    4250:	b580      	push	{r7, lr}
    4252:	af00      	add	r7, sp, #0
	wdt_get_config_defaults(&wdt_configuration);
    4254:	4b06      	ldr	r3, [pc, #24]	; (4270 <wdt_disable+0x20>)
    4256:	0018      	movs	r0, r3
    4258:	4b06      	ldr	r3, [pc, #24]	; (4274 <wdt_disable+0x24>)
    425a:	4798      	blx	r3
	//wdt_configuration.clock_source = GCLK_GENERATOR_2;// Uses internal 1khz clock
	wdt_configuration.enable = false;
    425c:	4b04      	ldr	r3, [pc, #16]	; (4270 <wdt_disable+0x20>)
    425e:	2200      	movs	r2, #0
    4260:	705a      	strb	r2, [r3, #1]
	wdt_set_config(&wdt_configuration);
    4262:	4b03      	ldr	r3, [pc, #12]	; (4270 <wdt_disable+0x20>)
    4264:	0018      	movs	r0, r3
    4266:	4b04      	ldr	r3, [pc, #16]	; (4278 <wdt_disable+0x28>)
    4268:	4798      	blx	r3
	
	
}
    426a:	46c0      	nop			; (mov r8, r8)
    426c:	46bd      	mov	sp, r7
    426e:	bd80      	pop	{r7, pc}
    4270:	2000138c 	.word	0x2000138c
    4274:	000041f5 	.word	0x000041f5
    4278:	00001349 	.word	0x00001349

0000427c <idle_timeout>:


void idle_timeout(void){
    427c:	b580      	push	{r7, lr}
    427e:	af00      	add	r7, sp, #0
	static uint32_t idle_seconds = 0;
	
	if (current_input == input_1sec){
    4280:	4b0d      	ldr	r3, [pc, #52]	; (42b8 <idle_timeout+0x3c>)
    4282:	781b      	ldrb	r3, [r3, #0]
    4284:	b2db      	uxtb	r3, r3
    4286:	2b07      	cmp	r3, #7
    4288:	d105      	bne.n	4296 <idle_timeout+0x1a>
		idle_seconds++;
    428a:	4b0c      	ldr	r3, [pc, #48]	; (42bc <idle_timeout+0x40>)
    428c:	681b      	ldr	r3, [r3, #0]
    428e:	1c5a      	adds	r2, r3, #1
    4290:	4b0a      	ldr	r3, [pc, #40]	; (42bc <idle_timeout+0x40>)
    4292:	601a      	str	r2, [r3, #0]
    4294:	e002      	b.n	429c <idle_timeout+0x20>
	}else{
		idle_seconds = 0;
    4296:	4b09      	ldr	r3, [pc, #36]	; (42bc <idle_timeout+0x40>)
    4298:	2200      	movs	r2, #0
    429a:	601a      	str	r2, [r3, #0]
	}
	
	if (idle_seconds>idle_seconds_max){
    429c:	4b07      	ldr	r3, [pc, #28]	; (42bc <idle_timeout+0x40>)
    429e:	681b      	ldr	r3, [r3, #0]
    42a0:	2b3c      	cmp	r3, #60	; 0x3c
    42a2:	d905      	bls.n	42b0 <idle_timeout+0x34>
		current_input = input_powerdown;
    42a4:	4b04      	ldr	r3, [pc, #16]	; (42b8 <idle_timeout+0x3c>)
    42a6:	2206      	movs	r2, #6
    42a8:	701a      	strb	r2, [r3, #0]
		idle_seconds = 0;
    42aa:	4b04      	ldr	r3, [pc, #16]	; (42bc <idle_timeout+0x40>)
    42ac:	2200      	movs	r2, #0
    42ae:	601a      	str	r2, [r3, #0]
	}
	
	
	
	
};
    42b0:	46c0      	nop			; (mov r8, r8)
    42b2:	46bd      	mov	sp, r7
    42b4:	bd80      	pop	{r7, pc}
    42b6:	46c0      	nop			; (mov r8, r8)
    42b8:	20004134 	.word	0x20004134
    42bc:	20000cdc 	.word	0x20000cdc

000042c0 <configure_timers>:

void configure_timers(enum STATE timer_state){
    42c0:	b580      	push	{r7, lr}
    42c2:	b082      	sub	sp, #8
    42c4:	af00      	add	r7, sp, #0
    42c6:	0002      	movs	r2, r0
    42c8:	1dfb      	adds	r3, r7, #7
    42ca:	701a      	strb	r2, [r3, #0]
	
	switch (timer_state)
    42cc:	1dfb      	adds	r3, r7, #7
    42ce:	781b      	ldrb	r3, [r3, #0]
    42d0:	2b04      	cmp	r3, #4
    42d2:	d009      	beq.n	42e8 <configure_timers+0x28>
    42d4:	2b05      	cmp	r3, #5
    42d6:	d000      	beq.n	42da <configure_timers+0x1a>

			break;
	}


}
    42d8:	e01e      	b.n	4318 <configure_timers+0x58>
			configure_timer_1s();
    42da:	4b11      	ldr	r3, [pc, #68]	; (4320 <configure_timers+0x60>)
    42dc:	4798      	blx	r3
			configure_timer_laser_timeout();
    42de:	4b11      	ldr	r3, [pc, #68]	; (4324 <configure_timers+0x64>)
    42e0:	4798      	blx	r3
			configure_timer_longbutton();			
    42e2:	4b11      	ldr	r3, [pc, #68]	; (4328 <configure_timers+0x68>)
    42e4:	4798      	blx	r3
			break;
    42e6:	e017      	b.n	4318 <configure_timers+0x58>
			tc_disable(&timer1);
    42e8:	4b10      	ldr	r3, [pc, #64]	; (432c <configure_timers+0x6c>)
    42ea:	0018      	movs	r0, r3
    42ec:	4b10      	ldr	r3, [pc, #64]	; (4330 <configure_timers+0x70>)
    42ee:	4798      	blx	r3
			timer1_on_off = false;
    42f0:	4b10      	ldr	r3, [pc, #64]	; (4334 <configure_timers+0x74>)
    42f2:	2200      	movs	r2, #0
    42f4:	701a      	strb	r2, [r3, #0]
			tc_disable(&timer2);
    42f6:	4b10      	ldr	r3, [pc, #64]	; (4338 <configure_timers+0x78>)
    42f8:	0018      	movs	r0, r3
    42fa:	4b0d      	ldr	r3, [pc, #52]	; (4330 <configure_timers+0x70>)
    42fc:	4798      	blx	r3
			timer2_on_off = false;
    42fe:	4b0f      	ldr	r3, [pc, #60]	; (433c <configure_timers+0x7c>)
    4300:	2200      	movs	r2, #0
    4302:	701a      	strb	r2, [r3, #0]
			tc_disable(&timer3);
    4304:	4b0e      	ldr	r3, [pc, #56]	; (4340 <configure_timers+0x80>)
    4306:	0018      	movs	r0, r3
    4308:	4b09      	ldr	r3, [pc, #36]	; (4330 <configure_timers+0x70>)
    430a:	4798      	blx	r3
			timer3_on_off = false;
    430c:	4b0d      	ldr	r3, [pc, #52]	; (4344 <configure_timers+0x84>)
    430e:	2200      	movs	r2, #0
    4310:	701a      	strb	r2, [r3, #0]
			configure_timer_quick3();
    4312:	4b0d      	ldr	r3, [pc, #52]	; (4348 <configure_timers+0x88>)
    4314:	4798      	blx	r3
			break;
    4316:	46c0      	nop			; (mov r8, r8)
}
    4318:	46c0      	nop			; (mov r8, r8)
    431a:	46bd      	mov	sp, r7
    431c:	b002      	add	sp, #8
    431e:	bd80      	pop	{r7, pc}
    4320:	0000434d 	.word	0x0000434d
    4324:	00004405 	.word	0x00004405
    4328:	000044c9 	.word	0x000044c9
    432c:	200012d4 	.word	0x200012d4
    4330:	00004071 	.word	0x00004071
    4334:	20000cd8 	.word	0x20000cd8
    4338:	200011d8 	.word	0x200011d8
    433c:	20000cd9 	.word	0x20000cd9
    4340:	20001334 	.word	0x20001334
    4344:	20000cda 	.word	0x20000cda
    4348:	00004591 	.word	0x00004591

0000434c <configure_timer_1s>:

void configure_timer_1s(void){
    434c:	b580      	push	{r7, lr}
    434e:	b08e      	sub	sp, #56	; 0x38
    4350:	af00      	add	r7, sp, #0
	//  Timer setup for 1 second refresh
	struct tc_config config_tc;
	
	//  Configure Timer
	tc_get_config_defaults(&config_tc);
    4352:	003b      	movs	r3, r7
    4354:	0018      	movs	r0, r3
    4356:	4b20      	ldr	r3, [pc, #128]	; (43d8 <configure_timer_1s+0x8c>)
    4358:	4798      	blx	r3
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    435a:	003b      	movs	r3, r7
    435c:	2204      	movs	r2, #4
    435e:	70da      	strb	r2, [r3, #3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
    4360:	003b      	movs	r3, r7
    4362:	22e0      	movs	r2, #224	; 0xe0
    4364:	00d2      	lsls	r2, r2, #3
    4366:	809a      	strh	r2, [r3, #4]
	config_tc.clock_source = GCLK_GENERATOR_2;
    4368:	003b      	movs	r3, r7
    436a:	2202      	movs	r2, #2
    436c:	701a      	strb	r2, [r3, #0]
	config_tc.count_direction =  TC_COUNT_DIRECTION_UP;// TC_COUNT_DIRECTION_DOWN;
    436e:	003b      	movs	r3, r7
    4370:	2200      	movs	r2, #0
    4372:	739a      	strb	r2, [r3, #14]
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
    4374:	003b      	movs	r3, r7
    4376:	2210      	movs	r2, #16
    4378:	71da      	strb	r2, [r3, #7]
	config_tc.counter_8_bit.period = 0x1F;//0x1F = 31d, 1 second exactly on counter
    437a:	003b      	movs	r3, r7
    437c:	2229      	movs	r2, #41	; 0x29
    437e:	211f      	movs	r1, #31
    4380:	5499      	strb	r1, [r3, r2]
	if(timer2_on_off){
    4382:	4b16      	ldr	r3, [pc, #88]	; (43dc <configure_timer_1s+0x90>)
    4384:	781b      	ldrb	r3, [r3, #0]
    4386:	2b00      	cmp	r3, #0
    4388:	d006      	beq.n	4398 <configure_timer_1s+0x4c>
		tc_disable(&timer2);
    438a:	4b15      	ldr	r3, [pc, #84]	; (43e0 <configure_timer_1s+0x94>)
    438c:	0018      	movs	r0, r3
    438e:	4b15      	ldr	r3, [pc, #84]	; (43e4 <configure_timer_1s+0x98>)
    4390:	4798      	blx	r3
		timer2_on_off = false;
    4392:	4b12      	ldr	r3, [pc, #72]	; (43dc <configure_timer_1s+0x90>)
    4394:	2200      	movs	r2, #0
    4396:	701a      	strb	r2, [r3, #0]
	}
	tc_init(&timer2, TC1, &config_tc);
    4398:	003a      	movs	r2, r7
    439a:	4913      	ldr	r1, [pc, #76]	; (43e8 <configure_timer_1s+0x9c>)
    439c:	4b10      	ldr	r3, [pc, #64]	; (43e0 <configure_timer_1s+0x94>)
    439e:	0018      	movs	r0, r3
    43a0:	4b12      	ldr	r3, [pc, #72]	; (43ec <configure_timer_1s+0xa0>)
    43a2:	4798      	blx	r3
	tc_enable(&timer2);
    43a4:	4b0e      	ldr	r3, [pc, #56]	; (43e0 <configure_timer_1s+0x94>)
    43a6:	0018      	movs	r0, r3
    43a8:	4b11      	ldr	r3, [pc, #68]	; (43f0 <configure_timer_1s+0xa4>)
    43aa:	4798      	blx	r3
	timer2_on_off = true;
    43ac:	4b0b      	ldr	r3, [pc, #44]	; (43dc <configure_timer_1s+0x90>)
    43ae:	2201      	movs	r2, #1
    43b0:	701a      	strb	r2, [r3, #0]
	tc_start_counter(&timer2);
    43b2:	4b0b      	ldr	r3, [pc, #44]	; (43e0 <configure_timer_1s+0x94>)
    43b4:	0018      	movs	r0, r3
    43b6:	4b0f      	ldr	r3, [pc, #60]	; (43f4 <configure_timer_1s+0xa8>)
    43b8:	4798      	blx	r3

	//  Configure Callbacks
	//1 second refresh
	tc_register_callback(
    43ba:	490f      	ldr	r1, [pc, #60]	; (43f8 <configure_timer_1s+0xac>)
    43bc:	4b08      	ldr	r3, [pc, #32]	; (43e0 <configure_timer_1s+0x94>)
    43be:	2200      	movs	r2, #0
    43c0:	0018      	movs	r0, r3
    43c2:	4b0e      	ldr	r3, [pc, #56]	; (43fc <configure_timer_1s+0xb0>)
    43c4:	4798      	blx	r3
	&timer2,
	timer_callback_1s,
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&timer2, TC_CALLBACK_OVERFLOW);
    43c6:	4b06      	ldr	r3, [pc, #24]	; (43e0 <configure_timer_1s+0x94>)
    43c8:	2100      	movs	r1, #0
    43ca:	0018      	movs	r0, r3
    43cc:	4b0c      	ldr	r3, [pc, #48]	; (4400 <configure_timer_1s+0xb4>)
    43ce:	4798      	blx	r3

}
    43d0:	46c0      	nop			; (mov r8, r8)
    43d2:	46bd      	mov	sp, r7
    43d4:	b00e      	add	sp, #56	; 0x38
    43d6:	bd80      	pop	{r7, pc}
    43d8:	00003f99 	.word	0x00003f99
    43dc:	20000cd9 	.word	0x20000cd9
    43e0:	200011d8 	.word	0x200011d8
    43e4:	00004071 	.word	0x00004071
    43e8:	42002400 	.word	0x42002400
    43ec:	00008eb5 	.word	0x00008eb5
    43f0:	0000403d 	.word	0x0000403d
    43f4:	000040e5 	.word	0x000040e5
    43f8:	00004661 	.word	0x00004661
    43fc:	00008c29 	.word	0x00008c29
    4400:	00004149 	.word	0x00004149

00004404 <configure_timer_laser_timeout>:


void configure_timer_laser_timeout(void){
    4404:	b580      	push	{r7, lr}
    4406:	b08e      	sub	sp, #56	; 0x38
    4408:	af00      	add	r7, sp, #0
	//  Timer setup for laser time-out
	struct tc_config config_tc;

	//Timer for laser timeout
	tc_get_config_defaults(&config_tc);
    440a:	003b      	movs	r3, r7
    440c:	0018      	movs	r0, r3
    440e:	4b22      	ldr	r3, [pc, #136]	; (4498 <configure_timer_laser_timeout+0x94>)
    4410:	4798      	blx	r3
	//config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
	config_tc.counter_size    = TC_COUNTER_SIZE_16BIT;
    4412:	003b      	movs	r3, r7
    4414:	2200      	movs	r2, #0
    4416:	70da      	strb	r2, [r3, #3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
    4418:	003b      	movs	r3, r7
    441a:	22e0      	movs	r2, #224	; 0xe0
    441c:	00d2      	lsls	r2, r2, #3
    441e:	809a      	strh	r2, [r3, #4]
	config_tc.clock_source = GCLK_GENERATOR_2;
    4420:	003b      	movs	r3, r7
    4422:	2202      	movs	r2, #2
    4424:	701a      	strb	r2, [r3, #0]
	config_tc.count_direction =  TC_COUNT_DIRECTION_DOWN;
    4426:	003b      	movs	r3, r7
    4428:	2201      	movs	r2, #1
    442a:	739a      	strb	r2, [r3, #14]
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
    442c:	003b      	movs	r3, r7
    442e:	2210      	movs	r2, #16
    4430:	71da      	strb	r2, [r3, #7]
	//config_tc.counter_16_bit.compare_capture_channel = 5;
	//config_tc.counter_8_bit.period = 100;
	if(timer3_on_off){
    4432:	4b1a      	ldr	r3, [pc, #104]	; (449c <configure_timer_laser_timeout+0x98>)
    4434:	781b      	ldrb	r3, [r3, #0]
    4436:	2b00      	cmp	r3, #0
    4438:	d006      	beq.n	4448 <configure_timer_laser_timeout+0x44>
		tc_disable(&timer3);
    443a:	4b19      	ldr	r3, [pc, #100]	; (44a0 <configure_timer_laser_timeout+0x9c>)
    443c:	0018      	movs	r0, r3
    443e:	4b19      	ldr	r3, [pc, #100]	; (44a4 <configure_timer_laser_timeout+0xa0>)
    4440:	4798      	blx	r3
		timer3_on_off = false;
    4442:	4b16      	ldr	r3, [pc, #88]	; (449c <configure_timer_laser_timeout+0x98>)
    4444:	2200      	movs	r2, #0
    4446:	701a      	strb	r2, [r3, #0]
	}
	tc_init(&timer3, TC4, &config_tc);
    4448:	003a      	movs	r2, r7
    444a:	4917      	ldr	r1, [pc, #92]	; (44a8 <configure_timer_laser_timeout+0xa4>)
    444c:	4b14      	ldr	r3, [pc, #80]	; (44a0 <configure_timer_laser_timeout+0x9c>)
    444e:	0018      	movs	r0, r3
    4450:	4b16      	ldr	r3, [pc, #88]	; (44ac <configure_timer_laser_timeout+0xa8>)
    4452:	4798      	blx	r3
	tc_enable(&timer3);
    4454:	4b12      	ldr	r3, [pc, #72]	; (44a0 <configure_timer_laser_timeout+0x9c>)
    4456:	0018      	movs	r0, r3
    4458:	4b15      	ldr	r3, [pc, #84]	; (44b0 <configure_timer_laser_timeout+0xac>)
    445a:	4798      	blx	r3
	timer3_on_off = true;
    445c:	4b0f      	ldr	r3, [pc, #60]	; (449c <configure_timer_laser_timeout+0x98>)
    445e:	2201      	movs	r2, #1
    4460:	701a      	strb	r2, [r3, #0]
	tc_stop_counter(&timer3);
    4462:	4b0f      	ldr	r3, [pc, #60]	; (44a0 <configure_timer_laser_timeout+0x9c>)
    4464:	0018      	movs	r0, r3
    4466:	4b13      	ldr	r3, [pc, #76]	; (44b4 <configure_timer_laser_timeout+0xb0>)
    4468:	4798      	blx	r3
	tc_set_count_value(&timer3, laser_timeout);
    446a:	23e1      	movs	r3, #225	; 0xe1
    446c:	009a      	lsls	r2, r3, #2
    446e:	4b0c      	ldr	r3, [pc, #48]	; (44a0 <configure_timer_laser_timeout+0x9c>)
    4470:	0011      	movs	r1, r2
    4472:	0018      	movs	r0, r3
    4474:	4b10      	ldr	r3, [pc, #64]	; (44b8 <configure_timer_laser_timeout+0xb4>)
    4476:	4798      	blx	r3

	//  Configure callbacks
	//laser Timeout
	tc_register_callback(
    4478:	4910      	ldr	r1, [pc, #64]	; (44bc <configure_timer_laser_timeout+0xb8>)
    447a:	4b09      	ldr	r3, [pc, #36]	; (44a0 <configure_timer_laser_timeout+0x9c>)
    447c:	2200      	movs	r2, #0
    447e:	0018      	movs	r0, r3
    4480:	4b0f      	ldr	r3, [pc, #60]	; (44c0 <configure_timer_laser_timeout+0xbc>)
    4482:	4798      	blx	r3
	&timer3,
	timer_callback_laser_timeout,
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&timer3, TC_CALLBACK_OVERFLOW);
    4484:	4b06      	ldr	r3, [pc, #24]	; (44a0 <configure_timer_laser_timeout+0x9c>)
    4486:	2100      	movs	r1, #0
    4488:	0018      	movs	r0, r3
    448a:	4b0e      	ldr	r3, [pc, #56]	; (44c4 <configure_timer_laser_timeout+0xc0>)
    448c:	4798      	blx	r3

}
    448e:	46c0      	nop			; (mov r8, r8)
    4490:	46bd      	mov	sp, r7
    4492:	b00e      	add	sp, #56	; 0x38
    4494:	bd80      	pop	{r7, pc}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	00003f99 	.word	0x00003f99
    449c:	20000cda 	.word	0x20000cda
    44a0:	20001334 	.word	0x20001334
    44a4:	00004071 	.word	0x00004071
    44a8:	43000800 	.word	0x43000800
    44ac:	00008eb5 	.word	0x00008eb5
    44b0:	0000403d 	.word	0x0000403d
    44b4:	000040b5 	.word	0x000040b5
    44b8:	00009355 	.word	0x00009355
    44bc:	0000467d 	.word	0x0000467d
    44c0:	00008c29 	.word	0x00008c29
    44c4:	00004149 	.word	0x00004149

000044c8 <configure_timer_longbutton>:


void configure_timer_longbutton(void){
    44c8:	b580      	push	{r7, lr}
    44ca:	b08e      	sub	sp, #56	; 0x38
    44cc:	af00      	add	r7, sp, #0
	//  Timer Setup for external button long-press
	struct tc_config config_tc;

	//Timer for long button press
	tc_get_config_defaults(&config_tc);
    44ce:	003b      	movs	r3, r7
    44d0:	0018      	movs	r0, r3
    44d2:	4b23      	ldr	r3, [pc, #140]	; (4560 <configure_timer_longbutton+0x98>)
    44d4:	4798      	blx	r3
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    44d6:	003b      	movs	r3, r7
    44d8:	2204      	movs	r2, #4
    44da:	70da      	strb	r2, [r3, #3]
	config_tc.clock_prescaler =    TC_CLOCK_PRESCALER_DIV1024;//  TC_CLOCK_PRESCALER_DIV1024;
    44dc:	003b      	movs	r3, r7
    44de:	22e0      	movs	r2, #224	; 0xe0
    44e0:	00d2      	lsls	r2, r2, #3
    44e2:	809a      	strh	r2, [r3, #4]
	config_tc.clock_source = GCLK_GENERATOR_2;
    44e4:	003b      	movs	r3, r7
    44e6:	2202      	movs	r2, #2
    44e8:	701a      	strb	r2, [r3, #0]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
    44ea:	003b      	movs	r3, r7
    44ec:	2200      	movs	r2, #0
    44ee:	739a      	strb	r2, [r3, #14]
	config_tc.reload_action = TC_RELOAD_ACTION_PRESC;
    44f0:	003b      	movs	r3, r7
    44f2:	2210      	movs	r2, #16
    44f4:	71da      	strb	r2, [r3, #7]
	//config_tc.counter_8_bit.value=0;
	config_tc.counter_8_bit.period = off_hold_time;
    44f6:	003b      	movs	r3, r7
    44f8:	2229      	movs	r2, #41	; 0x29
    44fa:	2160      	movs	r1, #96	; 0x60
    44fc:	5499      	strb	r1, [r3, r2]
	if(timer1_on_off){
    44fe:	4b19      	ldr	r3, [pc, #100]	; (4564 <configure_timer_longbutton+0x9c>)
    4500:	781b      	ldrb	r3, [r3, #0]
    4502:	2b00      	cmp	r3, #0
    4504:	d006      	beq.n	4514 <configure_timer_longbutton+0x4c>
		tc_disable(&timer1);
    4506:	4b18      	ldr	r3, [pc, #96]	; (4568 <configure_timer_longbutton+0xa0>)
    4508:	0018      	movs	r0, r3
    450a:	4b18      	ldr	r3, [pc, #96]	; (456c <configure_timer_longbutton+0xa4>)
    450c:	4798      	blx	r3
		timer1_on_off = false;
    450e:	4b15      	ldr	r3, [pc, #84]	; (4564 <configure_timer_longbutton+0x9c>)
    4510:	2200      	movs	r2, #0
    4512:	701a      	strb	r2, [r3, #0]
	}
	tc_init(&timer1, TC0, &config_tc);
    4514:	003a      	movs	r2, r7
    4516:	4916      	ldr	r1, [pc, #88]	; (4570 <configure_timer_longbutton+0xa8>)
    4518:	4b13      	ldr	r3, [pc, #76]	; (4568 <configure_timer_longbutton+0xa0>)
    451a:	0018      	movs	r0, r3
    451c:	4b15      	ldr	r3, [pc, #84]	; (4574 <configure_timer_longbutton+0xac>)
    451e:	4798      	blx	r3
	tc_enable(&timer1);
    4520:	4b11      	ldr	r3, [pc, #68]	; (4568 <configure_timer_longbutton+0xa0>)
    4522:	0018      	movs	r0, r3
    4524:	4b14      	ldr	r3, [pc, #80]	; (4578 <configure_timer_longbutton+0xb0>)
    4526:	4798      	blx	r3
	timer1_on_off = true;
    4528:	4b0e      	ldr	r3, [pc, #56]	; (4564 <configure_timer_longbutton+0x9c>)
    452a:	2201      	movs	r2, #1
    452c:	701a      	strb	r2, [r3, #0]
	tc_stop_counter(&timer1);//enable starts timer, stop immediately
    452e:	4b0e      	ldr	r3, [pc, #56]	; (4568 <configure_timer_longbutton+0xa0>)
    4530:	0018      	movs	r0, r3
    4532:	4b12      	ldr	r3, [pc, #72]	; (457c <configure_timer_longbutton+0xb4>)
    4534:	4798      	blx	r3
	tc_set_count_value(&timer1, 0);
    4536:	4b0c      	ldr	r3, [pc, #48]	; (4568 <configure_timer_longbutton+0xa0>)
    4538:	2100      	movs	r1, #0
    453a:	0018      	movs	r0, r3
    453c:	4b10      	ldr	r3, [pc, #64]	; (4580 <configure_timer_longbutton+0xb8>)
    453e:	4798      	blx	r3

	// Configure callback
	//Long button press
	tc_register_callback(
    4540:	4910      	ldr	r1, [pc, #64]	; (4584 <configure_timer_longbutton+0xbc>)
    4542:	4b09      	ldr	r3, [pc, #36]	; (4568 <configure_timer_longbutton+0xa0>)
    4544:	2200      	movs	r2, #0
    4546:	0018      	movs	r0, r3
    4548:	4b0f      	ldr	r3, [pc, #60]	; (4588 <configure_timer_longbutton+0xc0>)
    454a:	4798      	blx	r3
	&timer1,
	timer_callback_longbutton,
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&timer1, TC_CALLBACK_OVERFLOW);
    454c:	4b06      	ldr	r3, [pc, #24]	; (4568 <configure_timer_longbutton+0xa0>)
    454e:	2100      	movs	r1, #0
    4550:	0018      	movs	r0, r3
    4552:	4b0e      	ldr	r3, [pc, #56]	; (458c <configure_timer_longbutton+0xc4>)
    4554:	4798      	blx	r3



}
    4556:	46c0      	nop			; (mov r8, r8)
    4558:	46bd      	mov	sp, r7
    455a:	b00e      	add	sp, #56	; 0x38
    455c:	bd80      	pop	{r7, pc}
    455e:	46c0      	nop			; (mov r8, r8)
    4560:	00003f99 	.word	0x00003f99
    4564:	20000cd8 	.word	0x20000cd8
    4568:	200012d4 	.word	0x200012d4
    456c:	00004071 	.word	0x00004071
    4570:	42002000 	.word	0x42002000
    4574:	00008eb5 	.word	0x00008eb5
    4578:	0000403d 	.word	0x0000403d
    457c:	000040b5 	.word	0x000040b5
    4580:	00009355 	.word	0x00009355
    4584:	000046c5 	.word	0x000046c5
    4588:	00008c29 	.word	0x00008c29
    458c:	00004149 	.word	0x00004149

00004590 <configure_timer_quick3>:

//
void configure_timer_quick3(void)
{
    4590:	b580      	push	{r7, lr}
    4592:	b08e      	sub	sp, #56	; 0x38
    4594:	af00      	add	r7, sp, #0
	//  Timer setup for external button 3-quick presses to be used during power down
	//  Re-uses 1 second refresh timer
	struct tc_config config_tc;

	//  Configure Timer
	tc_get_config_defaults(&config_tc);
    4596:	003b      	movs	r3, r7
    4598:	0018      	movs	r0, r3
    459a:	4b24      	ldr	r3, [pc, #144]	; (462c <configure_timer_quick3+0x9c>)
    459c:	4798      	blx	r3
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    459e:	003b      	movs	r3, r7
    45a0:	2204      	movs	r2, #4
    45a2:	70da      	strb	r2, [r3, #3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
    45a4:	003b      	movs	r3, r7
    45a6:	22e0      	movs	r2, #224	; 0xe0
    45a8:	00d2      	lsls	r2, r2, #3
    45aa:	809a      	strh	r2, [r3, #4]
	config_tc.clock_source = GCLK_GENERATOR_2;
    45ac:	003b      	movs	r3, r7
    45ae:	2202      	movs	r2, #2
    45b0:	701a      	strb	r2, [r3, #0]
	config_tc.count_direction =  TC_COUNT_DIRECTION_UP;// TC_COUNT_DIRECTION_DOWN;
    45b2:	003b      	movs	r3, r7
    45b4:	2200      	movs	r2, #0
    45b6:	739a      	strb	r2, [r3, #14]
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
    45b8:	003b      	movs	r3, r7
    45ba:	2210      	movs	r2, #16
    45bc:	71da      	strb	r2, [r3, #7]
	config_tc.counter_8_bit.period = quick_click_time;
    45be:	003b      	movs	r3, r7
    45c0:	2229      	movs	r2, #41	; 0x29
    45c2:	2110      	movs	r1, #16
    45c4:	5499      	strb	r1, [r3, r2]
	if(timer2_on_off){
    45c6:	4b1a      	ldr	r3, [pc, #104]	; (4630 <configure_timer_quick3+0xa0>)
    45c8:	781b      	ldrb	r3, [r3, #0]
    45ca:	2b00      	cmp	r3, #0
    45cc:	d006      	beq.n	45dc <configure_timer_quick3+0x4c>
		tc_disable(&timer2);
    45ce:	4b19      	ldr	r3, [pc, #100]	; (4634 <configure_timer_quick3+0xa4>)
    45d0:	0018      	movs	r0, r3
    45d2:	4b19      	ldr	r3, [pc, #100]	; (4638 <configure_timer_quick3+0xa8>)
    45d4:	4798      	blx	r3
		timer2_on_off = false;
    45d6:	4b16      	ldr	r3, [pc, #88]	; (4630 <configure_timer_quick3+0xa0>)
    45d8:	2200      	movs	r2, #0
    45da:	701a      	strb	r2, [r3, #0]
	}
	tc_init(&timer2, TC1, &config_tc);
    45dc:	003a      	movs	r2, r7
    45de:	4917      	ldr	r1, [pc, #92]	; (463c <configure_timer_quick3+0xac>)
    45e0:	4b14      	ldr	r3, [pc, #80]	; (4634 <configure_timer_quick3+0xa4>)
    45e2:	0018      	movs	r0, r3
    45e4:	4b16      	ldr	r3, [pc, #88]	; (4640 <configure_timer_quick3+0xb0>)
    45e6:	4798      	blx	r3
	tc_enable(&timer2);
    45e8:	4b12      	ldr	r3, [pc, #72]	; (4634 <configure_timer_quick3+0xa4>)
    45ea:	0018      	movs	r0, r3
    45ec:	4b15      	ldr	r3, [pc, #84]	; (4644 <configure_timer_quick3+0xb4>)
    45ee:	4798      	blx	r3
	timer2_on_off = true;
    45f0:	4b0f      	ldr	r3, [pc, #60]	; (4630 <configure_timer_quick3+0xa0>)
    45f2:	2201      	movs	r2, #1
    45f4:	701a      	strb	r2, [r3, #0]
	tc_stop_counter(&timer2);
    45f6:	4b0f      	ldr	r3, [pc, #60]	; (4634 <configure_timer_quick3+0xa4>)
    45f8:	0018      	movs	r0, r3
    45fa:	4b13      	ldr	r3, [pc, #76]	; (4648 <configure_timer_quick3+0xb8>)
    45fc:	4798      	blx	r3
	tc_set_count_value(&timer2, 0);
    45fe:	4b0d      	ldr	r3, [pc, #52]	; (4634 <configure_timer_quick3+0xa4>)
    4600:	2100      	movs	r1, #0
    4602:	0018      	movs	r0, r3
    4604:	4b11      	ldr	r3, [pc, #68]	; (464c <configure_timer_quick3+0xbc>)
    4606:	4798      	blx	r3

	//  Configure Callbacks
	//1 second refresh
	tc_register_callback(
    4608:	4911      	ldr	r1, [pc, #68]	; (4650 <configure_timer_quick3+0xc0>)
    460a:	4b0a      	ldr	r3, [pc, #40]	; (4634 <configure_timer_quick3+0xa4>)
    460c:	2200      	movs	r2, #0
    460e:	0018      	movs	r0, r3
    4610:	4b10      	ldr	r3, [pc, #64]	; (4654 <configure_timer_quick3+0xc4>)
    4612:	4798      	blx	r3
	&timer2,
	timer_callback_quick3,
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&timer2, TC_CALLBACK_OVERFLOW);
    4614:	4b07      	ldr	r3, [pc, #28]	; (4634 <configure_timer_quick3+0xa4>)
    4616:	2100      	movs	r1, #0
    4618:	0018      	movs	r0, r3
    461a:	4b0f      	ldr	r3, [pc, #60]	; (4658 <configure_timer_quick3+0xc8>)
    461c:	4798      	blx	r3

	click_counter = 0;
    461e:	4b0f      	ldr	r3, [pc, #60]	; (465c <configure_timer_quick3+0xcc>)
    4620:	2200      	movs	r2, #0
    4622:	701a      	strb	r2, [r3, #0]

}
    4624:	46c0      	nop			; (mov r8, r8)
    4626:	46bd      	mov	sp, r7
    4628:	b00e      	add	sp, #56	; 0x38
    462a:	bd80      	pop	{r7, pc}
    462c:	00003f99 	.word	0x00003f99
    4630:	20000cd9 	.word	0x20000cd9
    4634:	200011d8 	.word	0x200011d8
    4638:	00004071 	.word	0x00004071
    463c:	42002400 	.word	0x42002400
    4640:	00008eb5 	.word	0x00008eb5
    4644:	0000403d 	.word	0x0000403d
    4648:	000040b5 	.word	0x000040b5
    464c:	00009355 	.word	0x00009355
    4650:	000046fd 	.word	0x000046fd
    4654:	00008c29 	.word	0x00008c29
    4658:	00004149 	.word	0x00004149
    465c:	20003530 	.word	0x20003530

00004660 <timer_callback_1s>:


void timer_callback_1s(struct tc_module *const module_inst)
{
    4660:	b580      	push	{r7, lr}
    4662:	b082      	sub	sp, #8
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]

	
	current_input=input_1sec;
    4668:	4b03      	ldr	r3, [pc, #12]	; (4678 <timer_callback_1s+0x18>)
    466a:	2207      	movs	r2, #7
    466c:	701a      	strb	r2, [r3, #0]
	//debug1++;

}
    466e:	46c0      	nop			; (mov r8, r8)
    4670:	46bd      	mov	sp, r7
    4672:	b002      	add	sp, #8
    4674:	bd80      	pop	{r7, pc}
    4676:	46c0      	nop			; (mov r8, r8)
    4678:	20004134 	.word	0x20004134

0000467c <timer_callback_laser_timeout>:

void timer_callback_laser_timeout(struct tc_module *const module_inst)
{
    467c:	b580      	push	{r7, lr}
    467e:	b082      	sub	sp, #8
    4680:	af00      	add	r7, sp, #0
    4682:	6078      	str	r0, [r7, #4]

	tc_stop_counter(&timer3);
    4684:	4b0a      	ldr	r3, [pc, #40]	; (46b0 <timer_callback_laser_timeout+0x34>)
    4686:	0018      	movs	r0, r3
    4688:	4b0a      	ldr	r3, [pc, #40]	; (46b4 <timer_callback_laser_timeout+0x38>)
    468a:	4798      	blx	r3
	tc_set_count_value(&timer3, laser_timeout);
    468c:	23e1      	movs	r3, #225	; 0xe1
    468e:	009a      	lsls	r2, r3, #2
    4690:	4b07      	ldr	r3, [pc, #28]	; (46b0 <timer_callback_laser_timeout+0x34>)
    4692:	0011      	movs	r1, r2
    4694:	0018      	movs	r0, r3
    4696:	4b08      	ldr	r3, [pc, #32]	; (46b8 <timer_callback_laser_timeout+0x3c>)
    4698:	4798      	blx	r3
	rangefinder_on_off(false);
    469a:	2000      	movs	r0, #0
    469c:	4b07      	ldr	r3, [pc, #28]	; (46bc <timer_callback_laser_timeout+0x40>)
    469e:	4798      	blx	r3
	current_input = input_laser_timeout;
    46a0:	4b07      	ldr	r3, [pc, #28]	; (46c0 <timer_callback_laser_timeout+0x44>)
    46a2:	2216      	movs	r2, #22
    46a4:	701a      	strb	r2, [r3, #0]
}
    46a6:	46c0      	nop			; (mov r8, r8)
    46a8:	46bd      	mov	sp, r7
    46aa:	b002      	add	sp, #8
    46ac:	bd80      	pop	{r7, pc}
    46ae:	46c0      	nop			; (mov r8, r8)
    46b0:	20001334 	.word	0x20001334
    46b4:	000040b5 	.word	0x000040b5
    46b8:	00009355 	.word	0x00009355
    46bc:	000035a5 	.word	0x000035a5
    46c0:	20004134 	.word	0x20004134

000046c4 <timer_callback_longbutton>:




void timer_callback_longbutton(struct tc_module *const module_inst)
{
    46c4:	b580      	push	{r7, lr}
    46c6:	b082      	sub	sp, #8
    46c8:	af00      	add	r7, sp, #0
    46ca:	6078      	str	r0, [r7, #4]
	current_input=input_powerdown;
    46cc:	4b07      	ldr	r3, [pc, #28]	; (46ec <timer_callback_longbutton+0x28>)
    46ce:	2206      	movs	r2, #6
    46d0:	701a      	strb	r2, [r3, #0]
	tc_stop_counter(&timer1);
    46d2:	4b07      	ldr	r3, [pc, #28]	; (46f0 <timer_callback_longbutton+0x2c>)
    46d4:	0018      	movs	r0, r3
    46d6:	4b07      	ldr	r3, [pc, #28]	; (46f4 <timer_callback_longbutton+0x30>)
    46d8:	4798      	blx	r3
	tc_set_count_value(&timer1, 0);
    46da:	4b05      	ldr	r3, [pc, #20]	; (46f0 <timer_callback_longbutton+0x2c>)
    46dc:	2100      	movs	r1, #0
    46de:	0018      	movs	r0, r3
    46e0:	4b05      	ldr	r3, [pc, #20]	; (46f8 <timer_callback_longbutton+0x34>)
    46e2:	4798      	blx	r3
}
    46e4:	46c0      	nop			; (mov r8, r8)
    46e6:	46bd      	mov	sp, r7
    46e8:	b002      	add	sp, #8
    46ea:	bd80      	pop	{r7, pc}
    46ec:	20004134 	.word	0x20004134
    46f0:	200012d4 	.word	0x200012d4
    46f4:	000040b5 	.word	0x000040b5
    46f8:	00009355 	.word	0x00009355

000046fc <timer_callback_quick3>:



void timer_callback_quick3(struct tc_module *const module_inst)
{
    46fc:	b580      	push	{r7, lr}
    46fe:	b082      	sub	sp, #8
    4700:	af00      	add	r7, sp, #0
    4702:	6078      	str	r0, [r7, #4]
	tc_stop_counter(&timer2);
    4704:	4b07      	ldr	r3, [pc, #28]	; (4724 <timer_callback_quick3+0x28>)
    4706:	0018      	movs	r0, r3
    4708:	4b07      	ldr	r3, [pc, #28]	; (4728 <timer_callback_quick3+0x2c>)
    470a:	4798      	blx	r3
	tc_set_count_value(&timer2, 0);
    470c:	4b05      	ldr	r3, [pc, #20]	; (4724 <timer_callback_quick3+0x28>)
    470e:	2100      	movs	r1, #0
    4710:	0018      	movs	r0, r3
    4712:	4b06      	ldr	r3, [pc, #24]	; (472c <timer_callback_quick3+0x30>)
    4714:	4798      	blx	r3
	click_counter = 0;
    4716:	4b06      	ldr	r3, [pc, #24]	; (4730 <timer_callback_quick3+0x34>)
    4718:	2200      	movs	r2, #0
    471a:	701a      	strb	r2, [r3, #0]

}
    471c:	46c0      	nop			; (mov r8, r8)
    471e:	46bd      	mov	sp, r7
    4720:	b002      	add	sp, #8
    4722:	bd80      	pop	{r7, pc}
    4724:	200011d8 	.word	0x200011d8
    4728:	000040b5 	.word	0x000040b5
    472c:	00009355 	.word	0x00009355
    4730:	20003530 	.word	0x20003530

00004734 <laser_timeout_timer>:



//*******************************
void laser_timeout_timer(bool on_off)
{
    4734:	b580      	push	{r7, lr}
    4736:	b082      	sub	sp, #8
    4738:	af00      	add	r7, sp, #0
    473a:	0002      	movs	r2, r0
    473c:	1dfb      	adds	r3, r7, #7
    473e:	701a      	strb	r2, [r3, #0]
	if (on_off){
    4740:	1dfb      	adds	r3, r7, #7
    4742:	781b      	ldrb	r3, [r3, #0]
    4744:	2b00      	cmp	r3, #0
    4746:	d00b      	beq.n	4760 <laser_timeout_timer+0x2c>
		tc_set_count_value(&timer3, laser_timeout);
    4748:	23e1      	movs	r3, #225	; 0xe1
    474a:	009a      	lsls	r2, r3, #2
    474c:	4b0c      	ldr	r3, [pc, #48]	; (4780 <laser_timeout_timer+0x4c>)
    474e:	0011      	movs	r1, r2
    4750:	0018      	movs	r0, r3
    4752:	4b0c      	ldr	r3, [pc, #48]	; (4784 <laser_timeout_timer+0x50>)
    4754:	4798      	blx	r3
		tc_start_counter(&timer3);
    4756:	4b0a      	ldr	r3, [pc, #40]	; (4780 <laser_timeout_timer+0x4c>)
    4758:	0018      	movs	r0, r3
    475a:	4b0b      	ldr	r3, [pc, #44]	; (4788 <laser_timeout_timer+0x54>)
    475c:	4798      	blx	r3
		tc_set_count_value(&timer3, laser_timeout);
	
	}


}
    475e:	e00a      	b.n	4776 <laser_timeout_timer+0x42>
		tc_stop_counter(&timer3);
    4760:	4b07      	ldr	r3, [pc, #28]	; (4780 <laser_timeout_timer+0x4c>)
    4762:	0018      	movs	r0, r3
    4764:	4b09      	ldr	r3, [pc, #36]	; (478c <laser_timeout_timer+0x58>)
    4766:	4798      	blx	r3
		tc_set_count_value(&timer3, laser_timeout);
    4768:	23e1      	movs	r3, #225	; 0xe1
    476a:	009a      	lsls	r2, r3, #2
    476c:	4b04      	ldr	r3, [pc, #16]	; (4780 <laser_timeout_timer+0x4c>)
    476e:	0011      	movs	r1, r2
    4770:	0018      	movs	r0, r3
    4772:	4b04      	ldr	r3, [pc, #16]	; (4784 <laser_timeout_timer+0x50>)
    4774:	4798      	blx	r3
}
    4776:	46c0      	nop			; (mov r8, r8)
    4778:	46bd      	mov	sp, r7
    477a:	b002      	add	sp, #8
    477c:	bd80      	pop	{r7, pc}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	20001334 	.word	0x20001334
    4784:	00009355 	.word	0x00009355
    4788:	000040e5 	.word	0x000040e5
    478c:	000040b5 	.word	0x000040b5

00004790 <quick3_timer>:


void quick3_timer(bool on_off)
{
    4790:	b580      	push	{r7, lr}
    4792:	b082      	sub	sp, #8
    4794:	af00      	add	r7, sp, #0
    4796:	0002      	movs	r2, r0
    4798:	1dfb      	adds	r3, r7, #7
    479a:	701a      	strb	r2, [r3, #0]
	if (on_off){
    479c:	1dfb      	adds	r3, r7, #7
    479e:	781b      	ldrb	r3, [r3, #0]
    47a0:	2b00      	cmp	r3, #0
    47a2:	d009      	beq.n	47b8 <quick3_timer+0x28>
		tc_set_count_value(&timer2, 0);
    47a4:	4b0b      	ldr	r3, [pc, #44]	; (47d4 <quick3_timer+0x44>)
    47a6:	2100      	movs	r1, #0
    47a8:	0018      	movs	r0, r3
    47aa:	4b0b      	ldr	r3, [pc, #44]	; (47d8 <quick3_timer+0x48>)
    47ac:	4798      	blx	r3
		tc_start_counter(&timer2);
    47ae:	4b09      	ldr	r3, [pc, #36]	; (47d4 <quick3_timer+0x44>)
    47b0:	0018      	movs	r0, r3
    47b2:	4b0a      	ldr	r3, [pc, #40]	; (47dc <quick3_timer+0x4c>)
    47b4:	4798      	blx	r3
		tc_stop_counter(&timer2);
		tc_set_count_value(&timer2, 0);
		
	}

    47b6:	e008      	b.n	47ca <quick3_timer+0x3a>
		tc_stop_counter(&timer2);
    47b8:	4b06      	ldr	r3, [pc, #24]	; (47d4 <quick3_timer+0x44>)
    47ba:	0018      	movs	r0, r3
    47bc:	4b08      	ldr	r3, [pc, #32]	; (47e0 <quick3_timer+0x50>)
    47be:	4798      	blx	r3
		tc_set_count_value(&timer2, 0);
    47c0:	4b04      	ldr	r3, [pc, #16]	; (47d4 <quick3_timer+0x44>)
    47c2:	2100      	movs	r1, #0
    47c4:	0018      	movs	r0, r3
    47c6:	4b04      	ldr	r3, [pc, #16]	; (47d8 <quick3_timer+0x48>)
    47c8:	4798      	blx	r3
    47ca:	46c0      	nop			; (mov r8, r8)
    47cc:	46bd      	mov	sp, r7
    47ce:	b002      	add	sp, #8
    47d0:	bd80      	pop	{r7, pc}
    47d2:	46c0      	nop			; (mov r8, r8)
    47d4:	200011d8 	.word	0x200011d8
    47d8:	00009355 	.word	0x00009355
    47dc:	000040e5 	.word	0x000040e5
    47e0:	000040b5 	.word	0x000040b5

000047e4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    47e4:	b580      	push	{r7, lr}
    47e6:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    47e8:	46c0      	nop			; (mov r8, r8)
    47ea:	46bd      	mov	sp, r7
    47ec:	bd80      	pop	{r7, pc}

000047ee <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    47ee:	b590      	push	{r4, r7, lr}
    47f0:	b087      	sub	sp, #28
    47f2:	af00      	add	r7, sp, #0
    47f4:	60f8      	str	r0, [r7, #12]
    47f6:	000c      	movs	r4, r1
    47f8:	0010      	movs	r0, r2
    47fa:	0019      	movs	r1, r3
    47fc:	230a      	movs	r3, #10
    47fe:	18fb      	adds	r3, r7, r3
    4800:	1c22      	adds	r2, r4, #0
    4802:	801a      	strh	r2, [r3, #0]
    4804:	2308      	movs	r3, #8
    4806:	18fb      	adds	r3, r7, r3
    4808:	1c02      	adds	r2, r0, #0
    480a:	801a      	strh	r2, [r3, #0]
    480c:	1dfb      	adds	r3, r7, #7
    480e:	1c0a      	adds	r2, r1, #0
    4810:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    4812:	230a      	movs	r3, #10
    4814:	18fb      	adds	r3, r7, r3
    4816:	881a      	ldrh	r2, [r3, #0]
    4818:	2308      	movs	r3, #8
    481a:	18fb      	adds	r3, r7, r3
    481c:	881b      	ldrh	r3, [r3, #0]
    481e:	1ad3      	subs	r3, r2, r3
    4820:	3307      	adds	r3, #7
    4822:	2b00      	cmp	r3, #0
    4824:	da00      	bge.n	4828 <SDMMC_UNSTUFF_BITS+0x3a>
    4826:	3307      	adds	r3, #7
    4828:	10db      	asrs	r3, r3, #3
    482a:	3b01      	subs	r3, #1
    482c:	68fa      	ldr	r2, [r7, #12]
    482e:	18d3      	adds	r3, r2, r3
    4830:	781b      	ldrb	r3, [r3, #0]
    4832:	0019      	movs	r1, r3
    4834:	2308      	movs	r3, #8
    4836:	18fb      	adds	r3, r7, r3
    4838:	881b      	ldrh	r3, [r3, #0]
    483a:	2207      	movs	r2, #7
    483c:	4013      	ands	r3, r2
    483e:	4119      	asrs	r1, r3
    4840:	000b      	movs	r3, r1
    4842:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    4844:	2308      	movs	r3, #8
    4846:	18fb      	adds	r3, r7, r3
    4848:	881b      	ldrh	r3, [r3, #0]
    484a:	2207      	movs	r2, #7
    484c:	401a      	ands	r2, r3
    484e:	1dfb      	adds	r3, r7, #7
    4850:	781b      	ldrb	r3, [r3, #0]
    4852:	18d3      	adds	r3, r2, r3
    4854:	2b08      	cmp	r3, #8
    4856:	dd1c      	ble.n	4892 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4858:	230a      	movs	r3, #10
    485a:	18fb      	adds	r3, r7, r3
    485c:	881a      	ldrh	r2, [r3, #0]
    485e:	2308      	movs	r3, #8
    4860:	18fb      	adds	r3, r7, r3
    4862:	881b      	ldrh	r3, [r3, #0]
    4864:	1ad3      	subs	r3, r2, r3
    4866:	3307      	adds	r3, #7
    4868:	2b00      	cmp	r3, #0
    486a:	da00      	bge.n	486e <SDMMC_UNSTUFF_BITS+0x80>
    486c:	3307      	adds	r3, #7
    486e:	10db      	asrs	r3, r3, #3
    4870:	3b02      	subs	r3, #2
    4872:	68fa      	ldr	r2, [r7, #12]
    4874:	18d3      	adds	r3, r2, r3
    4876:	781b      	ldrb	r3, [r3, #0]
    4878:	0019      	movs	r1, r3
    487a:	2308      	movs	r3, #8
    487c:	18fb      	adds	r3, r7, r3
    487e:	881b      	ldrh	r3, [r3, #0]
    4880:	2207      	movs	r2, #7
    4882:	4013      	ands	r3, r2
    4884:	2208      	movs	r2, #8
    4886:	1ad3      	subs	r3, r2, r3
    4888:	4099      	lsls	r1, r3
    488a:	000b      	movs	r3, r1
    488c:	697a      	ldr	r2, [r7, #20]
    488e:	4313      	orrs	r3, r2
    4890:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    4892:	2308      	movs	r3, #8
    4894:	18fb      	adds	r3, r7, r3
    4896:	881b      	ldrh	r3, [r3, #0]
    4898:	2207      	movs	r2, #7
    489a:	401a      	ands	r2, r3
    489c:	1dfb      	adds	r3, r7, #7
    489e:	781b      	ldrb	r3, [r3, #0]
    48a0:	18d3      	adds	r3, r2, r3
    48a2:	2b10      	cmp	r3, #16
    48a4:	dd1c      	ble.n	48e0 <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    48a6:	230a      	movs	r3, #10
    48a8:	18fb      	adds	r3, r7, r3
    48aa:	881a      	ldrh	r2, [r3, #0]
    48ac:	2308      	movs	r3, #8
    48ae:	18fb      	adds	r3, r7, r3
    48b0:	881b      	ldrh	r3, [r3, #0]
    48b2:	1ad3      	subs	r3, r2, r3
    48b4:	3307      	adds	r3, #7
    48b6:	2b00      	cmp	r3, #0
    48b8:	da00      	bge.n	48bc <SDMMC_UNSTUFF_BITS+0xce>
    48ba:	3307      	adds	r3, #7
    48bc:	10db      	asrs	r3, r3, #3
    48be:	3b03      	subs	r3, #3
    48c0:	68fa      	ldr	r2, [r7, #12]
    48c2:	18d3      	adds	r3, r2, r3
    48c4:	781b      	ldrb	r3, [r3, #0]
    48c6:	0019      	movs	r1, r3
    48c8:	2308      	movs	r3, #8
    48ca:	18fb      	adds	r3, r7, r3
    48cc:	881b      	ldrh	r3, [r3, #0]
    48ce:	2207      	movs	r2, #7
    48d0:	4013      	ands	r3, r2
    48d2:	2210      	movs	r2, #16
    48d4:	1ad3      	subs	r3, r2, r3
    48d6:	4099      	lsls	r1, r3
    48d8:	000b      	movs	r3, r1
    48da:	697a      	ldr	r2, [r7, #20]
    48dc:	4313      	orrs	r3, r2
    48de:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    48e0:	2308      	movs	r3, #8
    48e2:	18fb      	adds	r3, r7, r3
    48e4:	881b      	ldrh	r3, [r3, #0]
    48e6:	2207      	movs	r2, #7
    48e8:	401a      	ands	r2, r3
    48ea:	1dfb      	adds	r3, r7, #7
    48ec:	781b      	ldrb	r3, [r3, #0]
    48ee:	18d3      	adds	r3, r2, r3
    48f0:	2b10      	cmp	r3, #16
    48f2:	dd1c      	ble.n	492e <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    48f4:	230a      	movs	r3, #10
    48f6:	18fb      	adds	r3, r7, r3
    48f8:	881a      	ldrh	r2, [r3, #0]
    48fa:	2308      	movs	r3, #8
    48fc:	18fb      	adds	r3, r7, r3
    48fe:	881b      	ldrh	r3, [r3, #0]
    4900:	1ad3      	subs	r3, r2, r3
    4902:	3307      	adds	r3, #7
    4904:	2b00      	cmp	r3, #0
    4906:	da00      	bge.n	490a <SDMMC_UNSTUFF_BITS+0x11c>
    4908:	3307      	adds	r3, #7
    490a:	10db      	asrs	r3, r3, #3
    490c:	3b03      	subs	r3, #3
    490e:	68fa      	ldr	r2, [r7, #12]
    4910:	18d3      	adds	r3, r2, r3
    4912:	781b      	ldrb	r3, [r3, #0]
    4914:	0019      	movs	r1, r3
    4916:	2308      	movs	r3, #8
    4918:	18fb      	adds	r3, r7, r3
    491a:	881b      	ldrh	r3, [r3, #0]
    491c:	2207      	movs	r2, #7
    491e:	4013      	ands	r3, r2
    4920:	2210      	movs	r2, #16
    4922:	1ad3      	subs	r3, r2, r3
    4924:	4099      	lsls	r1, r3
    4926:	000b      	movs	r3, r1
    4928:	697a      	ldr	r2, [r7, #20]
    492a:	4313      	orrs	r3, r2
    492c:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    492e:	1dfb      	adds	r3, r7, #7
    4930:	781b      	ldrb	r3, [r3, #0]
    4932:	2201      	movs	r2, #1
    4934:	409a      	lsls	r2, r3
    4936:	0013      	movs	r3, r2
    4938:	1e5a      	subs	r2, r3, #1
    493a:	697b      	ldr	r3, [r7, #20]
    493c:	4013      	ands	r3, r2
    493e:	617b      	str	r3, [r7, #20]
	return value;
    4940:	697b      	ldr	r3, [r7, #20]
}
    4942:	0018      	movs	r0, r3
    4944:	46bd      	mov	sp, r7
    4946:	b007      	add	sp, #28
    4948:	bd90      	pop	{r4, r7, pc}
	...

0000494c <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    494c:	b580      	push	{r7, lr}
    494e:	b082      	sub	sp, #8
    4950:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    4952:	4b23      	ldr	r3, [pc, #140]	; (49e0 <mmc_spi_op_cond+0x94>)
    4954:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    4956:	4b23      	ldr	r3, [pc, #140]	; (49e4 <mmc_spi_op_cond+0x98>)
    4958:	2100      	movs	r1, #0
    495a:	0018      	movs	r0, r3
    495c:	4b22      	ldr	r3, [pc, #136]	; (49e8 <mmc_spi_op_cond+0x9c>)
    495e:	4798      	blx	r3
    4960:	0003      	movs	r3, r0
    4962:	001a      	movs	r2, r3
    4964:	2301      	movs	r3, #1
    4966:	4053      	eors	r3, r2
    4968:	b2db      	uxtb	r3, r3
    496a:	2b00      	cmp	r3, #0
    496c:	d001      	beq.n	4972 <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    496e:	2300      	movs	r3, #0
    4970:	e031      	b.n	49d6 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    4972:	4b1e      	ldr	r3, [pc, #120]	; (49ec <mmc_spi_op_cond+0xa0>)
    4974:	4798      	blx	r3
    4976:	0003      	movs	r3, r0
    4978:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    497a:	683b      	ldr	r3, [r7, #0]
    497c:	2201      	movs	r2, #1
    497e:	4013      	ands	r3, r2
    4980:	d006      	beq.n	4990 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    4982:	687b      	ldr	r3, [r7, #4]
    4984:	1e5a      	subs	r2, r3, #1
    4986:	607a      	str	r2, [r7, #4]
    4988:	2b00      	cmp	r3, #0
    498a:	d1e4      	bne.n	4956 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    498c:	2300      	movs	r3, #0
    498e:	e022      	b.n	49d6 <mmc_spi_op_cond+0x8a>
			break;
    4990:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    4992:	4b17      	ldr	r3, [pc, #92]	; (49f0 <mmc_spi_op_cond+0xa4>)
    4994:	2100      	movs	r1, #0
    4996:	0018      	movs	r0, r3
    4998:	4b13      	ldr	r3, [pc, #76]	; (49e8 <mmc_spi_op_cond+0x9c>)
    499a:	4798      	blx	r3
    499c:	0003      	movs	r3, r0
    499e:	001a      	movs	r2, r3
    49a0:	2301      	movs	r3, #1
    49a2:	4053      	eors	r3, r2
    49a4:	b2db      	uxtb	r3, r3
    49a6:	2b00      	cmp	r3, #0
    49a8:	d001      	beq.n	49ae <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    49aa:	2300      	movs	r3, #0
    49ac:	e013      	b.n	49d6 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    49ae:	4b0f      	ldr	r3, [pc, #60]	; (49ec <mmc_spi_op_cond+0xa0>)
    49b0:	4798      	blx	r3
    49b2:	0002      	movs	r2, r0
    49b4:	23c0      	movs	r3, #192	; 0xc0
    49b6:	05db      	lsls	r3, r3, #23
    49b8:	401a      	ands	r2, r3
    49ba:	2380      	movs	r3, #128	; 0x80
    49bc:	05db      	lsls	r3, r3, #23
    49be:	429a      	cmp	r2, r3
    49c0:	d108      	bne.n	49d4 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    49c2:	4b0c      	ldr	r3, [pc, #48]	; (49f4 <mmc_spi_op_cond+0xa8>)
    49c4:	681a      	ldr	r2, [r3, #0]
    49c6:	4b0b      	ldr	r3, [pc, #44]	; (49f4 <mmc_spi_op_cond+0xa8>)
    49c8:	681b      	ldr	r3, [r3, #0]
    49ca:	7adb      	ldrb	r3, [r3, #11]
    49cc:	2108      	movs	r1, #8
    49ce:	430b      	orrs	r3, r1
    49d0:	b2db      	uxtb	r3, r3
    49d2:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    49d4:	2301      	movs	r3, #1
}
    49d6:	0018      	movs	r0, r3
    49d8:	46bd      	mov	sp, r7
    49da:	b002      	add	sp, #8
    49dc:	bd80      	pop	{r7, pc}
    49de:	46c0      	nop			; (mov r8, r8)
    49e0:	00001bee 	.word	0x00001bee
    49e4:	00001101 	.word	0x00001101
    49e8:	00006125 	.word	0x00006125
    49ec:	00006365 	.word	0x00006365
    49f0:	0000053a 	.word	0x0000053a
    49f4:	20000d04 	.word	0x20000d04

000049f8 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    49f8:	b580      	push	{r7, lr}
    49fa:	b086      	sub	sp, #24
    49fc:	af00      	add	r7, sp, #0
    49fe:	0002      	movs	r2, r0
    4a00:	1dfb      	adds	r3, r7, #7
    4a02:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    4a04:	4b2e      	ldr	r3, [pc, #184]	; (4ac0 <sd_spi_op_cond+0xc8>)
    4a06:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    4a08:	4b2e      	ldr	r3, [pc, #184]	; (4ac4 <sd_spi_op_cond+0xcc>)
    4a0a:	2100      	movs	r1, #0
    4a0c:	0018      	movs	r0, r3
    4a0e:	4b2e      	ldr	r3, [pc, #184]	; (4ac8 <sd_spi_op_cond+0xd0>)
    4a10:	4798      	blx	r3
    4a12:	0003      	movs	r3, r0
    4a14:	001a      	movs	r2, r3
    4a16:	2301      	movs	r3, #1
    4a18:	4053      	eors	r3, r2
    4a1a:	b2db      	uxtb	r3, r3
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d001      	beq.n	4a24 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    4a20:	2300      	movs	r3, #0
    4a22:	e048      	b.n	4ab6 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    4a24:	2300      	movs	r3, #0
    4a26:	617b      	str	r3, [r7, #20]
		if (v2) {
    4a28:	1dfb      	adds	r3, r7, #7
    4a2a:	781b      	ldrb	r3, [r3, #0]
    4a2c:	2b00      	cmp	r3, #0
    4a2e:	d004      	beq.n	4a3a <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    4a30:	697b      	ldr	r3, [r7, #20]
    4a32:	2280      	movs	r2, #128	; 0x80
    4a34:	05d2      	lsls	r2, r2, #23
    4a36:	4313      	orrs	r3, r2
    4a38:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	4a23      	ldr	r2, [pc, #140]	; (4acc <sd_spi_op_cond+0xd4>)
    4a3e:	0019      	movs	r1, r3
    4a40:	0010      	movs	r0, r2
    4a42:	4b21      	ldr	r3, [pc, #132]	; (4ac8 <sd_spi_op_cond+0xd0>)
    4a44:	4798      	blx	r3
    4a46:	0003      	movs	r3, r0
    4a48:	001a      	movs	r2, r3
    4a4a:	2301      	movs	r3, #1
    4a4c:	4053      	eors	r3, r2
    4a4e:	b2db      	uxtb	r3, r3
    4a50:	2b00      	cmp	r3, #0
    4a52:	d001      	beq.n	4a58 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    4a54:	2300      	movs	r3, #0
    4a56:	e02e      	b.n	4ab6 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    4a58:	4b1d      	ldr	r3, [pc, #116]	; (4ad0 <sd_spi_op_cond+0xd8>)
    4a5a:	4798      	blx	r3
    4a5c:	0003      	movs	r3, r0
    4a5e:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    4a60:	68fb      	ldr	r3, [r7, #12]
    4a62:	2201      	movs	r2, #1
    4a64:	4013      	ands	r3, r2
    4a66:	d006      	beq.n	4a76 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    4a68:	693b      	ldr	r3, [r7, #16]
    4a6a:	1e5a      	subs	r2, r3, #1
    4a6c:	613a      	str	r2, [r7, #16]
    4a6e:	2b00      	cmp	r3, #0
    4a70:	d1ca      	bne.n	4a08 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    4a72:	2300      	movs	r3, #0
    4a74:	e01f      	b.n	4ab6 <sd_spi_op_cond+0xbe>
			break;
    4a76:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    4a78:	4b16      	ldr	r3, [pc, #88]	; (4ad4 <sd_spi_op_cond+0xdc>)
    4a7a:	2100      	movs	r1, #0
    4a7c:	0018      	movs	r0, r3
    4a7e:	4b12      	ldr	r3, [pc, #72]	; (4ac8 <sd_spi_op_cond+0xd0>)
    4a80:	4798      	blx	r3
    4a82:	0003      	movs	r3, r0
    4a84:	001a      	movs	r2, r3
    4a86:	2301      	movs	r3, #1
    4a88:	4053      	eors	r3, r2
    4a8a:	b2db      	uxtb	r3, r3
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d001      	beq.n	4a94 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    4a90:	2300      	movs	r3, #0
    4a92:	e010      	b.n	4ab6 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    4a94:	4b0e      	ldr	r3, [pc, #56]	; (4ad0 <sd_spi_op_cond+0xd8>)
    4a96:	4798      	blx	r3
    4a98:	0002      	movs	r2, r0
    4a9a:	2380      	movs	r3, #128	; 0x80
    4a9c:	05db      	lsls	r3, r3, #23
    4a9e:	4013      	ands	r3, r2
    4aa0:	d008      	beq.n	4ab4 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    4aa2:	4b0d      	ldr	r3, [pc, #52]	; (4ad8 <sd_spi_op_cond+0xe0>)
    4aa4:	681a      	ldr	r2, [r3, #0]
    4aa6:	4b0c      	ldr	r3, [pc, #48]	; (4ad8 <sd_spi_op_cond+0xe0>)
    4aa8:	681b      	ldr	r3, [r3, #0]
    4aaa:	7adb      	ldrb	r3, [r3, #11]
    4aac:	2108      	movs	r1, #8
    4aae:	430b      	orrs	r3, r1
    4ab0:	b2db      	uxtb	r3, r3
    4ab2:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    4ab4:	2301      	movs	r3, #1
}
    4ab6:	0018      	movs	r0, r3
    4ab8:	46bd      	mov	sp, r7
    4aba:	b006      	add	sp, #24
    4abc:	bd80      	pop	{r7, pc}
    4abe:	46c0      	nop			; (mov r8, r8)
    4ac0:	00001bee 	.word	0x00001bee
    4ac4:	00001137 	.word	0x00001137
    4ac8:	00006125 	.word	0x00006125
    4acc:	00001129 	.word	0x00001129
    4ad0:	00006365 	.word	0x00006365
    4ad4:	0000053a 	.word	0x0000053a
    4ad8:	20000d04 	.word	0x20000d04

00004adc <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    4adc:	b580      	push	{r7, lr}
    4ade:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    4ae0:	2301      	movs	r3, #1
}
    4ae2:	0018      	movs	r0, r3
    4ae4:	46bd      	mov	sp, r7
    4ae6:	bd80      	pop	{r7, pc}

00004ae8 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    4ae8:	b580      	push	{r7, lr}
    4aea:	b084      	sub	sp, #16
    4aec:	af00      	add	r7, sp, #0
    4aee:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    4af0:	687b      	ldr	r3, [r7, #4]
    4af2:	2200      	movs	r2, #0
    4af4:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    4af6:	23d5      	movs	r3, #213	; 0xd5
    4af8:	005b      	lsls	r3, r3, #1
    4afa:	4a14      	ldr	r2, [pc, #80]	; (4b4c <sd_cmd8+0x64>)
    4afc:	0019      	movs	r1, r3
    4afe:	0010      	movs	r0, r2
    4b00:	4b13      	ldr	r3, [pc, #76]	; (4b50 <sd_cmd8+0x68>)
    4b02:	4798      	blx	r3
    4b04:	0003      	movs	r3, r0
    4b06:	001a      	movs	r2, r3
    4b08:	2301      	movs	r3, #1
    4b0a:	4053      	eors	r3, r2
    4b0c:	b2db      	uxtb	r3, r3
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d001      	beq.n	4b16 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    4b12:	2301      	movs	r3, #1
    4b14:	e015      	b.n	4b42 <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    4b16:	4b0f      	ldr	r3, [pc, #60]	; (4b54 <sd_cmd8+0x6c>)
    4b18:	4798      	blx	r3
    4b1a:	0003      	movs	r3, r0
    4b1c:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    4b1e:	68fb      	ldr	r3, [r7, #12]
    4b20:	3301      	adds	r3, #1
    4b22:	d101      	bne.n	4b28 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    4b24:	2301      	movs	r3, #1
    4b26:	e00c      	b.n	4b42 <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    4b28:	68fb      	ldr	r3, [r7, #12]
    4b2a:	051b      	lsls	r3, r3, #20
    4b2c:	0d1a      	lsrs	r2, r3, #20
    4b2e:	23d5      	movs	r3, #213	; 0xd5
    4b30:	005b      	lsls	r3, r3, #1
    4b32:	429a      	cmp	r2, r3
    4b34:	d001      	beq.n	4b3a <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    4b36:	2300      	movs	r3, #0
    4b38:	e003      	b.n	4b42 <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    4b3a:	687b      	ldr	r3, [r7, #4]
    4b3c:	2201      	movs	r2, #1
    4b3e:	701a      	strb	r2, [r3, #0]
	return true;
    4b40:	2301      	movs	r3, #1
}
    4b42:	0018      	movs	r0, r3
    4b44:	46bd      	mov	sp, r7
    4b46:	b004      	add	sp, #16
    4b48:	bd80      	pop	{r7, pc}
    4b4a:	46c0      	nop			; (mov r8, r8)
    4b4c:	00005508 	.word	0x00005508
    4b50:	00006125 	.word	0x00006125
    4b54:	00006365 	.word	0x00006365

00004b58 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    4b58:	b590      	push	{r4, r7, lr}
    4b5a:	b089      	sub	sp, #36	; 0x24
    4b5c:	af02      	add	r7, sp, #8
    4b5e:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    4b60:	2380      	movs	r3, #128	; 0x80
    4b62:	009a      	lsls	r2, r3, #2
    4b64:	4841      	ldr	r0, [pc, #260]	; (4c6c <mmc_cmd8+0x114>)
    4b66:	2300      	movs	r3, #0
    4b68:	9300      	str	r3, [sp, #0]
    4b6a:	2301      	movs	r3, #1
    4b6c:	2100      	movs	r1, #0
    4b6e:	4c40      	ldr	r4, [pc, #256]	; (4c70 <mmc_cmd8+0x118>)
    4b70:	47a0      	blx	r4
    4b72:	0003      	movs	r3, r0
    4b74:	001a      	movs	r2, r3
    4b76:	2301      	movs	r3, #1
    4b78:	4053      	eors	r3, r2
    4b7a:	b2db      	uxtb	r3, r3
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	d001      	beq.n	4b84 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    4b80:	2300      	movs	r3, #0
    4b82:	e06e      	b.n	4c62 <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    4b84:	2316      	movs	r3, #22
    4b86:	18fb      	adds	r3, r7, r3
    4b88:	2200      	movs	r2, #0
    4b8a:	801a      	strh	r2, [r3, #0]
    4b8c:	e014      	b.n	4bb8 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    4b8e:	2310      	movs	r3, #16
    4b90:	18fb      	adds	r3, r7, r3
    4b92:	0018      	movs	r0, r3
    4b94:	4b37      	ldr	r3, [pc, #220]	; (4c74 <mmc_cmd8+0x11c>)
    4b96:	4798      	blx	r3
    4b98:	0003      	movs	r3, r0
    4b9a:	001a      	movs	r2, r3
    4b9c:	2301      	movs	r3, #1
    4b9e:	4053      	eors	r3, r2
    4ba0:	b2db      	uxtb	r3, r3
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d001      	beq.n	4baa <mmc_cmd8+0x52>
			return false;
    4ba6:	2300      	movs	r3, #0
    4ba8:	e05b      	b.n	4c62 <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    4baa:	2316      	movs	r3, #22
    4bac:	18fb      	adds	r3, r7, r3
    4bae:	881a      	ldrh	r2, [r3, #0]
    4bb0:	2316      	movs	r3, #22
    4bb2:	18fb      	adds	r3, r7, r3
    4bb4:	3201      	adds	r2, #1
    4bb6:	801a      	strh	r2, [r3, #0]
    4bb8:	2316      	movs	r3, #22
    4bba:	18fb      	adds	r3, r7, r3
    4bbc:	881b      	ldrh	r3, [r3, #0]
    4bbe:	2b31      	cmp	r3, #49	; 0x31
    4bc0:	d9e5      	bls.n	4b8e <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    4bc2:	693b      	ldr	r3, [r7, #16]
    4bc4:	b2db      	uxtb	r3, r3
    4bc6:	2202      	movs	r2, #2
    4bc8:	4013      	ands	r3, r2
    4bca:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    4bd0:	4b29      	ldr	r3, [pc, #164]	; (4c78 <mmc_cmd8+0x120>)
    4bd2:	681b      	ldr	r3, [r3, #0]
    4bd4:	330e      	adds	r3, #14
    4bd6:	0018      	movs	r0, r3
    4bd8:	230c      	movs	r3, #12
    4bda:	223e      	movs	r2, #62	; 0x3e
    4bdc:	2180      	movs	r1, #128	; 0x80
    4bde:	4c27      	ldr	r4, [pc, #156]	; (4c7c <mmc_cmd8+0x124>)
    4be0:	47a0      	blx	r4
    4be2:	0002      	movs	r2, r0
    4be4:	4b26      	ldr	r3, [pc, #152]	; (4c80 <mmc_cmd8+0x128>)
    4be6:	429a      	cmp	r2, r3
    4be8:	d135      	bne.n	4c56 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    4bea:	e014      	b.n	4c16 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    4bec:	230c      	movs	r3, #12
    4bee:	18fb      	adds	r3, r7, r3
    4bf0:	0018      	movs	r0, r3
    4bf2:	4b20      	ldr	r3, [pc, #128]	; (4c74 <mmc_cmd8+0x11c>)
    4bf4:	4798      	blx	r3
    4bf6:	0003      	movs	r3, r0
    4bf8:	001a      	movs	r2, r3
    4bfa:	2301      	movs	r3, #1
    4bfc:	4053      	eors	r3, r2
    4bfe:	b2db      	uxtb	r3, r3
    4c00:	2b00      	cmp	r3, #0
    4c02:	d001      	beq.n	4c08 <mmc_cmd8+0xb0>
				return false;
    4c04:	2300      	movs	r3, #0
    4c06:	e02c      	b.n	4c62 <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    4c08:	2316      	movs	r3, #22
    4c0a:	18fb      	adds	r3, r7, r3
    4c0c:	881a      	ldrh	r2, [r3, #0]
    4c0e:	2316      	movs	r3, #22
    4c10:	18fb      	adds	r3, r7, r3
    4c12:	3201      	adds	r2, #1
    4c14:	801a      	strh	r2, [r3, #0]
    4c16:	2316      	movs	r3, #22
    4c18:	18fb      	adds	r3, r7, r3
    4c1a:	881b      	ldrh	r3, [r3, #0]
    4c1c:	2b35      	cmp	r3, #53	; 0x35
    4c1e:	d9e5      	bls.n	4bec <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    4c20:	4b15      	ldr	r3, [pc, #84]	; (4c78 <mmc_cmd8+0x120>)
    4c22:	681b      	ldr	r3, [r3, #0]
    4c24:	68fa      	ldr	r2, [r7, #12]
    4c26:	0852      	lsrs	r2, r2, #1
    4c28:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    4c2a:	e014      	b.n	4c56 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    4c2c:	230c      	movs	r3, #12
    4c2e:	18fb      	adds	r3, r7, r3
    4c30:	0018      	movs	r0, r3
    4c32:	4b10      	ldr	r3, [pc, #64]	; (4c74 <mmc_cmd8+0x11c>)
    4c34:	4798      	blx	r3
    4c36:	0003      	movs	r3, r0
    4c38:	001a      	movs	r2, r3
    4c3a:	2301      	movs	r3, #1
    4c3c:	4053      	eors	r3, r2
    4c3e:	b2db      	uxtb	r3, r3
    4c40:	2b00      	cmp	r3, #0
    4c42:	d001      	beq.n	4c48 <mmc_cmd8+0xf0>
			return false;
    4c44:	2300      	movs	r3, #0
    4c46:	e00c      	b.n	4c62 <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    4c48:	2316      	movs	r3, #22
    4c4a:	18fb      	adds	r3, r7, r3
    4c4c:	881a      	ldrh	r2, [r3, #0]
    4c4e:	2316      	movs	r3, #22
    4c50:	18fb      	adds	r3, r7, r3
    4c52:	3201      	adds	r2, #1
    4c54:	801a      	strh	r2, [r3, #0]
    4c56:	2316      	movs	r3, #22
    4c58:	18fb      	adds	r3, r7, r3
    4c5a:	881b      	ldrh	r3, [r3, #0]
    4c5c:	2b7f      	cmp	r3, #127	; 0x7f
    4c5e:	d9e5      	bls.n	4c2c <mmc_cmd8+0xd4>
		}
	}
	return true;
    4c60:	2301      	movs	r3, #1
}
    4c62:	0018      	movs	r0, r3
    4c64:	46bd      	mov	sp, r7
    4c66:	b007      	add	sp, #28
    4c68:	bd90      	pop	{r4, r7, pc}
    4c6a:	46c0      	nop			; (mov r8, r8)
    4c6c:	00081108 	.word	0x00081108
    4c70:	0000614d 	.word	0x0000614d
    4c74:	00006379 	.word	0x00006379
    4c78:	20000d04 	.word	0x20000d04
    4c7c:	000047ef 	.word	0x000047ef
    4c80:	00000fff 	.word	0x00000fff

00004c84 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    4c84:	b590      	push	{r4, r7, lr}
    4c86:	b083      	sub	sp, #12
    4c88:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    4c8a:	4b15      	ldr	r3, [pc, #84]	; (4ce0 <sd_mmc_cmd9_spi+0x5c>)
    4c8c:	681b      	ldr	r3, [r3, #0]
    4c8e:	891b      	ldrh	r3, [r3, #8]
    4c90:	0419      	lsls	r1, r3, #16
    4c92:	4814      	ldr	r0, [pc, #80]	; (4ce4 <sd_mmc_cmd9_spi+0x60>)
    4c94:	2301      	movs	r3, #1
    4c96:	9300      	str	r3, [sp, #0]
    4c98:	2301      	movs	r3, #1
    4c9a:	2210      	movs	r2, #16
    4c9c:	4c12      	ldr	r4, [pc, #72]	; (4ce8 <sd_mmc_cmd9_spi+0x64>)
    4c9e:	47a0      	blx	r4
    4ca0:	0003      	movs	r3, r0
    4ca2:	001a      	movs	r2, r3
    4ca4:	2301      	movs	r3, #1
    4ca6:	4053      	eors	r3, r2
    4ca8:	b2db      	uxtb	r3, r3
    4caa:	2b00      	cmp	r3, #0
    4cac:	d001      	beq.n	4cb2 <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    4cae:	2300      	movs	r3, #0
    4cb0:	e012      	b.n	4cd8 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    4cb2:	4b0b      	ldr	r3, [pc, #44]	; (4ce0 <sd_mmc_cmd9_spi+0x5c>)
    4cb4:	681b      	ldr	r3, [r3, #0]
    4cb6:	330e      	adds	r3, #14
    4cb8:	2101      	movs	r1, #1
    4cba:	0018      	movs	r0, r3
    4cbc:	4b0b      	ldr	r3, [pc, #44]	; (4cec <sd_mmc_cmd9_spi+0x68>)
    4cbe:	4798      	blx	r3
    4cc0:	0003      	movs	r3, r0
    4cc2:	001a      	movs	r2, r3
    4cc4:	2301      	movs	r3, #1
    4cc6:	4053      	eors	r3, r2
    4cc8:	b2db      	uxtb	r3, r3
    4cca:	2b00      	cmp	r3, #0
    4ccc:	d001      	beq.n	4cd2 <sd_mmc_cmd9_spi+0x4e>
		return false;
    4cce:	2300      	movs	r3, #0
    4cd0:	e002      	b.n	4cd8 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    4cd2:	4b07      	ldr	r3, [pc, #28]	; (4cf0 <sd_mmc_cmd9_spi+0x6c>)
    4cd4:	4798      	blx	r3
    4cd6:	0003      	movs	r3, r0
}
    4cd8:	0018      	movs	r0, r3
    4cda:	46bd      	mov	sp, r7
    4cdc:	b001      	add	sp, #4
    4cde:	bd90      	pop	{r4, r7, pc}
    4ce0:	20000d04 	.word	0x20000d04
    4ce4:	00081109 	.word	0x00081109
    4ce8:	0000614d 	.word	0x0000614d
    4cec:	0000641d 	.word	0x0000641d
    4cf0:	000064c1 	.word	0x000064c1

00004cf4 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    4cf4:	b5b0      	push	{r4, r5, r7, lr}
    4cf6:	b084      	sub	sp, #16
    4cf8:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    4cfa:	4b45      	ldr	r3, [pc, #276]	; (4e10 <mmc_decode_csd+0x11c>)
    4cfc:	681b      	ldr	r3, [r3, #0]
    4cfe:	330e      	adds	r3, #14
    4d00:	0018      	movs	r0, r3
    4d02:	2304      	movs	r3, #4
    4d04:	227a      	movs	r2, #122	; 0x7a
    4d06:	2180      	movs	r1, #128	; 0x80
    4d08:	4c42      	ldr	r4, [pc, #264]	; (4e14 <mmc_decode_csd+0x120>)
    4d0a:	47a0      	blx	r4
    4d0c:	0003      	movs	r3, r0
    4d0e:	2b02      	cmp	r3, #2
    4d10:	d011      	beq.n	4d36 <mmc_decode_csd+0x42>
    4d12:	d802      	bhi.n	4d1a <mmc_decode_csd+0x26>
    4d14:	2b01      	cmp	r3, #1
    4d16:	d009      	beq.n	4d2c <mmc_decode_csd+0x38>
    4d18:	e003      	b.n	4d22 <mmc_decode_csd+0x2e>
    4d1a:	2b03      	cmp	r3, #3
    4d1c:	d010      	beq.n	4d40 <mmc_decode_csd+0x4c>
    4d1e:	2b04      	cmp	r3, #4
    4d20:	d013      	beq.n	4d4a <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    4d22:	4b3b      	ldr	r3, [pc, #236]	; (4e10 <mmc_decode_csd+0x11c>)
    4d24:	681b      	ldr	r3, [r3, #0]
    4d26:	2212      	movs	r2, #18
    4d28:	731a      	strb	r2, [r3, #12]
		break;
    4d2a:	e013      	b.n	4d54 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    4d2c:	4b38      	ldr	r3, [pc, #224]	; (4e10 <mmc_decode_csd+0x11c>)
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	2214      	movs	r2, #20
    4d32:	731a      	strb	r2, [r3, #12]
		break;
    4d34:	e00e      	b.n	4d54 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    4d36:	4b36      	ldr	r3, [pc, #216]	; (4e10 <mmc_decode_csd+0x11c>)
    4d38:	681b      	ldr	r3, [r3, #0]
    4d3a:	2222      	movs	r2, #34	; 0x22
    4d3c:	731a      	strb	r2, [r3, #12]
		break;
    4d3e:	e009      	b.n	4d54 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    4d40:	4b33      	ldr	r3, [pc, #204]	; (4e10 <mmc_decode_csd+0x11c>)
    4d42:	681b      	ldr	r3, [r3, #0]
    4d44:	2230      	movs	r2, #48	; 0x30
    4d46:	731a      	strb	r2, [r3, #12]
		break;
    4d48:	e004      	b.n	4d54 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    4d4a:	4b31      	ldr	r3, [pc, #196]	; (4e10 <mmc_decode_csd+0x11c>)
    4d4c:	681b      	ldr	r3, [r3, #0]
    4d4e:	2240      	movs	r2, #64	; 0x40
    4d50:	731a      	strb	r2, [r3, #12]
		break;
    4d52:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    4d54:	4b2e      	ldr	r3, [pc, #184]	; (4e10 <mmc_decode_csd+0x11c>)
    4d56:	681b      	ldr	r3, [r3, #0]
    4d58:	330e      	adds	r3, #14
    4d5a:	0018      	movs	r0, r3
    4d5c:	2308      	movs	r3, #8
    4d5e:	2260      	movs	r2, #96	; 0x60
    4d60:	2180      	movs	r1, #128	; 0x80
    4d62:	4c2c      	ldr	r4, [pc, #176]	; (4e14 <mmc_decode_csd+0x120>)
    4d64:	47a0      	blx	r4
    4d66:	0003      	movs	r3, r0
    4d68:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    4d6a:	68fb      	ldr	r3, [r7, #12]
    4d6c:	2207      	movs	r2, #7
    4d6e:	401a      	ands	r2, r3
    4d70:	4b29      	ldr	r3, [pc, #164]	; (4e18 <mmc_decode_csd+0x124>)
    4d72:	0092      	lsls	r2, r2, #2
    4d74:	58d3      	ldr	r3, [r2, r3]
    4d76:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    4d78:	68fb      	ldr	r3, [r7, #12]
    4d7a:	08db      	lsrs	r3, r3, #3
    4d7c:	220f      	movs	r2, #15
    4d7e:	401a      	ands	r2, r3
    4d80:	4b26      	ldr	r3, [pc, #152]	; (4e1c <mmc_decode_csd+0x128>)
    4d82:	0092      	lsls	r2, r2, #2
    4d84:	58d3      	ldr	r3, [r2, r3]
    4d86:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    4d88:	4b21      	ldr	r3, [pc, #132]	; (4e10 <mmc_decode_csd+0x11c>)
    4d8a:	681b      	ldr	r3, [r3, #0]
    4d8c:	68ba      	ldr	r2, [r7, #8]
    4d8e:	6879      	ldr	r1, [r7, #4]
    4d90:	434a      	muls	r2, r1
    4d92:	21fa      	movs	r1, #250	; 0xfa
    4d94:	0089      	lsls	r1, r1, #2
    4d96:	434a      	muls	r2, r1
    4d98:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    4d9a:	4b1d      	ldr	r3, [pc, #116]	; (4e10 <mmc_decode_csd+0x11c>)
    4d9c:	681b      	ldr	r3, [r3, #0]
    4d9e:	330e      	adds	r3, #14
    4da0:	0018      	movs	r0, r3
    4da2:	230c      	movs	r3, #12
    4da4:	223e      	movs	r2, #62	; 0x3e
    4da6:	2180      	movs	r1, #128	; 0x80
    4da8:	4c1a      	ldr	r4, [pc, #104]	; (4e14 <mmc_decode_csd+0x120>)
    4daa:	47a0      	blx	r4
    4dac:	0002      	movs	r2, r0
    4dae:	4b1c      	ldr	r3, [pc, #112]	; (4e20 <mmc_decode_csd+0x12c>)
    4db0:	429a      	cmp	r2, r3
    4db2:	d028      	beq.n	4e06 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    4db4:	4b16      	ldr	r3, [pc, #88]	; (4e10 <mmc_decode_csd+0x11c>)
    4db6:	681b      	ldr	r3, [r3, #0]
    4db8:	330e      	adds	r3, #14
    4dba:	0018      	movs	r0, r3
    4dbc:	230c      	movs	r3, #12
    4dbe:	223e      	movs	r2, #62	; 0x3e
    4dc0:	2180      	movs	r1, #128	; 0x80
    4dc2:	4c14      	ldr	r4, [pc, #80]	; (4e14 <mmc_decode_csd+0x120>)
    4dc4:	47a0      	blx	r4
    4dc6:	0003      	movs	r3, r0
    4dc8:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    4dca:	4b11      	ldr	r3, [pc, #68]	; (4e10 <mmc_decode_csd+0x11c>)
    4dcc:	681b      	ldr	r3, [r3, #0]
    4dce:	330e      	adds	r3, #14
    4dd0:	0018      	movs	r0, r3
    4dd2:	2303      	movs	r3, #3
    4dd4:	222f      	movs	r2, #47	; 0x2f
    4dd6:	2180      	movs	r1, #128	; 0x80
    4dd8:	4d0e      	ldr	r5, [pc, #56]	; (4e14 <mmc_decode_csd+0x120>)
    4dda:	47a8      	blx	r5
    4ddc:	0003      	movs	r3, r0
    4dde:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    4de0:	409c      	lsls	r4, r3
    4de2:	0023      	movs	r3, r4
    4de4:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    4de6:	4b0a      	ldr	r3, [pc, #40]	; (4e10 <mmc_decode_csd+0x11c>)
    4de8:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    4dea:	4b09      	ldr	r3, [pc, #36]	; (4e10 <mmc_decode_csd+0x11c>)
    4dec:	681b      	ldr	r3, [r3, #0]
    4dee:	330e      	adds	r3, #14
    4df0:	0018      	movs	r0, r3
    4df2:	2304      	movs	r3, #4
    4df4:	2250      	movs	r2, #80	; 0x50
    4df6:	2180      	movs	r1, #128	; 0x80
    4df8:	4d06      	ldr	r5, [pc, #24]	; (4e14 <mmc_decode_csd+0x120>)
    4dfa:	47a8      	blx	r5
    4dfc:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    4dfe:	683b      	ldr	r3, [r7, #0]
    4e00:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    4e02:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    4e04:	6063      	str	r3, [r4, #4]
	}
}
    4e06:	46c0      	nop			; (mov r8, r8)
    4e08:	46bd      	mov	sp, r7
    4e0a:	b004      	add	sp, #16
    4e0c:	bdb0      	pop	{r4, r5, r7, pc}
    4e0e:	46c0      	nop			; (mov r8, r8)
    4e10:	20000d04 	.word	0x20000d04
    4e14:	000047ef 	.word	0x000047ef
    4e18:	00027f64 	.word	0x00027f64
    4e1c:	00027fc0 	.word	0x00027fc0
    4e20:	00000fff 	.word	0x00000fff

00004e24 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    4e24:	b5b0      	push	{r4, r5, r7, lr}
    4e26:	b084      	sub	sp, #16
    4e28:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    4e2a:	4b35      	ldr	r3, [pc, #212]	; (4f00 <sd_decode_csd+0xdc>)
    4e2c:	681b      	ldr	r3, [r3, #0]
    4e2e:	330e      	adds	r3, #14
    4e30:	0018      	movs	r0, r3
    4e32:	2308      	movs	r3, #8
    4e34:	2260      	movs	r2, #96	; 0x60
    4e36:	2180      	movs	r1, #128	; 0x80
    4e38:	4c32      	ldr	r4, [pc, #200]	; (4f04 <sd_decode_csd+0xe0>)
    4e3a:	47a0      	blx	r4
    4e3c:	0003      	movs	r3, r0
    4e3e:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    4e40:	68fb      	ldr	r3, [r7, #12]
    4e42:	2207      	movs	r2, #7
    4e44:	401a      	ands	r2, r3
    4e46:	4b30      	ldr	r3, [pc, #192]	; (4f08 <sd_decode_csd+0xe4>)
    4e48:	0092      	lsls	r2, r2, #2
    4e4a:	58d3      	ldr	r3, [r2, r3]
    4e4c:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    4e4e:	68fb      	ldr	r3, [r7, #12]
    4e50:	08db      	lsrs	r3, r3, #3
    4e52:	220f      	movs	r2, #15
    4e54:	401a      	ands	r2, r3
    4e56:	4b2d      	ldr	r3, [pc, #180]	; (4f0c <sd_decode_csd+0xe8>)
    4e58:	0092      	lsls	r2, r2, #2
    4e5a:	58d3      	ldr	r3, [r2, r3]
    4e5c:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    4e5e:	4b28      	ldr	r3, [pc, #160]	; (4f00 <sd_decode_csd+0xdc>)
    4e60:	681b      	ldr	r3, [r3, #0]
    4e62:	68ba      	ldr	r2, [r7, #8]
    4e64:	6879      	ldr	r1, [r7, #4]
    4e66:	434a      	muls	r2, r1
    4e68:	21fa      	movs	r1, #250	; 0xfa
    4e6a:	0089      	lsls	r1, r1, #2
    4e6c:	434a      	muls	r2, r1
    4e6e:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    4e70:	4b23      	ldr	r3, [pc, #140]	; (4f00 <sd_decode_csd+0xdc>)
    4e72:	681b      	ldr	r3, [r3, #0]
    4e74:	330e      	adds	r3, #14
    4e76:	0018      	movs	r0, r3
    4e78:	2302      	movs	r3, #2
    4e7a:	227e      	movs	r2, #126	; 0x7e
    4e7c:	2180      	movs	r1, #128	; 0x80
    4e7e:	4c21      	ldr	r4, [pc, #132]	; (4f04 <sd_decode_csd+0xe0>)
    4e80:	47a0      	blx	r4
    4e82:	1e03      	subs	r3, r0, #0
    4e84:	d00f      	beq.n	4ea6 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    4e86:	4b1e      	ldr	r3, [pc, #120]	; (4f00 <sd_decode_csd+0xdc>)
    4e88:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    4e8a:	4b1d      	ldr	r3, [pc, #116]	; (4f00 <sd_decode_csd+0xdc>)
    4e8c:	681b      	ldr	r3, [r3, #0]
    4e8e:	330e      	adds	r3, #14
    4e90:	0018      	movs	r0, r3
    4e92:	2316      	movs	r3, #22
    4e94:	2230      	movs	r2, #48	; 0x30
    4e96:	2180      	movs	r1, #128	; 0x80
    4e98:	4d1a      	ldr	r5, [pc, #104]	; (4f04 <sd_decode_csd+0xe0>)
    4e9a:	47a8      	blx	r5
    4e9c:	0003      	movs	r3, r0
				* 512;
    4e9e:	3301      	adds	r3, #1
    4ea0:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    4ea2:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    4ea4:	e028      	b.n	4ef8 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    4ea6:	4b16      	ldr	r3, [pc, #88]	; (4f00 <sd_decode_csd+0xdc>)
    4ea8:	681b      	ldr	r3, [r3, #0]
    4eaa:	330e      	adds	r3, #14
    4eac:	0018      	movs	r0, r3
    4eae:	230c      	movs	r3, #12
    4eb0:	223e      	movs	r2, #62	; 0x3e
    4eb2:	2180      	movs	r1, #128	; 0x80
    4eb4:	4c13      	ldr	r4, [pc, #76]	; (4f04 <sd_decode_csd+0xe0>)
    4eb6:	47a0      	blx	r4
    4eb8:	0003      	movs	r3, r0
    4eba:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    4ebc:	4b10      	ldr	r3, [pc, #64]	; (4f00 <sd_decode_csd+0xdc>)
    4ebe:	681b      	ldr	r3, [r3, #0]
    4ec0:	330e      	adds	r3, #14
    4ec2:	0018      	movs	r0, r3
    4ec4:	2303      	movs	r3, #3
    4ec6:	222f      	movs	r2, #47	; 0x2f
    4ec8:	2180      	movs	r1, #128	; 0x80
    4eca:	4d0e      	ldr	r5, [pc, #56]	; (4f04 <sd_decode_csd+0xe0>)
    4ecc:	47a8      	blx	r5
    4ece:	0003      	movs	r3, r0
    4ed0:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    4ed2:	409c      	lsls	r4, r3
    4ed4:	0023      	movs	r3, r4
    4ed6:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    4ed8:	4b09      	ldr	r3, [pc, #36]	; (4f00 <sd_decode_csd+0xdc>)
    4eda:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    4edc:	4b08      	ldr	r3, [pc, #32]	; (4f00 <sd_decode_csd+0xdc>)
    4ede:	681b      	ldr	r3, [r3, #0]
    4ee0:	330e      	adds	r3, #14
    4ee2:	0018      	movs	r0, r3
    4ee4:	2304      	movs	r3, #4
    4ee6:	2250      	movs	r2, #80	; 0x50
    4ee8:	2180      	movs	r1, #128	; 0x80
    4eea:	4d06      	ldr	r5, [pc, #24]	; (4f04 <sd_decode_csd+0xe0>)
    4eec:	47a8      	blx	r5
    4eee:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    4ef0:	683b      	ldr	r3, [r7, #0]
    4ef2:	4093      	lsls	r3, r2
				/ 1024;
    4ef4:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    4ef6:	6063      	str	r3, [r4, #4]
}
    4ef8:	46c0      	nop			; (mov r8, r8)
    4efa:	46bd      	mov	sp, r7
    4efc:	b004      	add	sp, #16
    4efe:	bdb0      	pop	{r4, r5, r7, pc}
    4f00:	20000d04 	.word	0x20000d04
    4f04:	000047ef 	.word	0x000047ef
    4f08:	00027f64 	.word	0x00027f64
    4f0c:	00027f80 	.word	0x00027f80

00004f10 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    4f10:	b580      	push	{r7, lr}
    4f12:	b082      	sub	sp, #8
    4f14:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    4f16:	4b11      	ldr	r3, [pc, #68]	; (4f5c <sd_mmc_cmd13+0x4c>)
    4f18:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    4f1a:	4b11      	ldr	r3, [pc, #68]	; (4f60 <sd_mmc_cmd13+0x50>)
    4f1c:	2100      	movs	r1, #0
    4f1e:	0018      	movs	r0, r3
    4f20:	4b10      	ldr	r3, [pc, #64]	; (4f64 <sd_mmc_cmd13+0x54>)
    4f22:	4798      	blx	r3
    4f24:	0003      	movs	r3, r0
    4f26:	001a      	movs	r2, r3
    4f28:	2301      	movs	r3, #1
    4f2a:	4053      	eors	r3, r2
    4f2c:	b2db      	uxtb	r3, r3
    4f2e:	2b00      	cmp	r3, #0
    4f30:	d001      	beq.n	4f36 <sd_mmc_cmd13+0x26>
				return false;
    4f32:	2300      	movs	r3, #0
    4f34:	e00e      	b.n	4f54 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    4f36:	4b0c      	ldr	r3, [pc, #48]	; (4f68 <sd_mmc_cmd13+0x58>)
    4f38:	4798      	blx	r3
    4f3a:	0002      	movs	r2, r0
    4f3c:	23ff      	movs	r3, #255	; 0xff
    4f3e:	4013      	ands	r3, r2
    4f40:	d006      	beq.n	4f50 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    4f42:	687b      	ldr	r3, [r7, #4]
    4f44:	1e5a      	subs	r2, r3, #1
    4f46:	607a      	str	r2, [r7, #4]
    4f48:	2b00      	cmp	r3, #0
    4f4a:	d1e6      	bne.n	4f1a <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    4f4c:	2300      	movs	r3, #0
    4f4e:	e001      	b.n	4f54 <sd_mmc_cmd13+0x44>
				break;
    4f50:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    4f52:	2301      	movs	r3, #1
}
    4f54:	0018      	movs	r0, r3
    4f56:	46bd      	mov	sp, r7
    4f58:	b002      	add	sp, #8
    4f5a:	bd80      	pop	{r7, pc}
    4f5c:	00030d40 	.word	0x00030d40
    4f60:	00001b0d 	.word	0x00001b0d
    4f64:	00006125 	.word	0x00006125
    4f68:	00006365 	.word	0x00006365

00004f6c <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    4f6c:	b590      	push	{r4, r7, lr}
    4f6e:	b085      	sub	sp, #20
    4f70:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    4f72:	4b38      	ldr	r3, [pc, #224]	; (5054 <sd_acmd51+0xe8>)
    4f74:	681b      	ldr	r3, [r3, #0]
    4f76:	891b      	ldrh	r3, [r3, #8]
    4f78:	041b      	lsls	r3, r3, #16
    4f7a:	4a37      	ldr	r2, [pc, #220]	; (5058 <sd_acmd51+0xec>)
    4f7c:	0019      	movs	r1, r3
    4f7e:	0010      	movs	r0, r2
    4f80:	4b36      	ldr	r3, [pc, #216]	; (505c <sd_acmd51+0xf0>)
    4f82:	4798      	blx	r3
    4f84:	0003      	movs	r3, r0
    4f86:	001a      	movs	r2, r3
    4f88:	2301      	movs	r3, #1
    4f8a:	4053      	eors	r3, r2
    4f8c:	b2db      	uxtb	r3, r3
    4f8e:	2b00      	cmp	r3, #0
    4f90:	d001      	beq.n	4f96 <sd_acmd51+0x2a>
		return false;
    4f92:	2300      	movs	r3, #0
    4f94:	e059      	b.n	504a <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    4f96:	4832      	ldr	r0, [pc, #200]	; (5060 <sd_acmd51+0xf4>)
    4f98:	2301      	movs	r3, #1
    4f9a:	9300      	str	r3, [sp, #0]
    4f9c:	2301      	movs	r3, #1
    4f9e:	2208      	movs	r2, #8
    4fa0:	2100      	movs	r1, #0
    4fa2:	4c30      	ldr	r4, [pc, #192]	; (5064 <sd_acmd51+0xf8>)
    4fa4:	47a0      	blx	r4
    4fa6:	0003      	movs	r3, r0
    4fa8:	001a      	movs	r2, r3
    4faa:	2301      	movs	r3, #1
    4fac:	4053      	eors	r3, r2
    4fae:	b2db      	uxtb	r3, r3
    4fb0:	2b00      	cmp	r3, #0
    4fb2:	d001      	beq.n	4fb8 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    4fb4:	2300      	movs	r3, #0
    4fb6:	e048      	b.n	504a <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    4fb8:	003b      	movs	r3, r7
    4fba:	2101      	movs	r1, #1
    4fbc:	0018      	movs	r0, r3
    4fbe:	4b2a      	ldr	r3, [pc, #168]	; (5068 <sd_acmd51+0xfc>)
    4fc0:	4798      	blx	r3
    4fc2:	0003      	movs	r3, r0
    4fc4:	001a      	movs	r2, r3
    4fc6:	2301      	movs	r3, #1
    4fc8:	4053      	eors	r3, r2
    4fca:	b2db      	uxtb	r3, r3
    4fcc:	2b00      	cmp	r3, #0
    4fce:	d001      	beq.n	4fd4 <sd_acmd51+0x68>
		return false;
    4fd0:	2300      	movs	r3, #0
    4fd2:	e03a      	b.n	504a <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    4fd4:	4b25      	ldr	r3, [pc, #148]	; (506c <sd_acmd51+0x100>)
    4fd6:	4798      	blx	r3
    4fd8:	0003      	movs	r3, r0
    4fda:	001a      	movs	r2, r3
    4fdc:	2301      	movs	r3, #1
    4fde:	4053      	eors	r3, r2
    4fe0:	b2db      	uxtb	r3, r3
    4fe2:	2b00      	cmp	r3, #0
    4fe4:	d001      	beq.n	4fea <sd_acmd51+0x7e>
		return false;
    4fe6:	2300      	movs	r3, #0
    4fe8:	e02f      	b.n	504a <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    4fea:	0038      	movs	r0, r7
    4fec:	2304      	movs	r3, #4
    4fee:	2238      	movs	r2, #56	; 0x38
    4ff0:	2140      	movs	r1, #64	; 0x40
    4ff2:	4c1f      	ldr	r4, [pc, #124]	; (5070 <sd_acmd51+0x104>)
    4ff4:	47a0      	blx	r4
    4ff6:	0003      	movs	r3, r0
    4ff8:	2b01      	cmp	r3, #1
    4ffa:	d008      	beq.n	500e <sd_acmd51+0xa2>
    4ffc:	d302      	bcc.n	5004 <sd_acmd51+0x98>
    4ffe:	2b02      	cmp	r3, #2
    5000:	d00a      	beq.n	5018 <sd_acmd51+0xac>
    5002:	e01c      	b.n	503e <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    5004:	4b13      	ldr	r3, [pc, #76]	; (5054 <sd_acmd51+0xe8>)
    5006:	681b      	ldr	r3, [r3, #0]
    5008:	2210      	movs	r2, #16
    500a:	731a      	strb	r2, [r3, #12]
		break;
    500c:	e01c      	b.n	5048 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    500e:	4b11      	ldr	r3, [pc, #68]	; (5054 <sd_acmd51+0xe8>)
    5010:	681b      	ldr	r3, [r3, #0]
    5012:	221a      	movs	r2, #26
    5014:	731a      	strb	r2, [r3, #12]
		break;
    5016:	e017      	b.n	5048 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    5018:	0038      	movs	r0, r7
    501a:	2301      	movs	r3, #1
    501c:	222f      	movs	r2, #47	; 0x2f
    501e:	2140      	movs	r1, #64	; 0x40
    5020:	4c13      	ldr	r4, [pc, #76]	; (5070 <sd_acmd51+0x104>)
    5022:	47a0      	blx	r4
    5024:	0003      	movs	r3, r0
    5026:	2b01      	cmp	r3, #1
    5028:	d104      	bne.n	5034 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    502a:	4b0a      	ldr	r3, [pc, #40]	; (5054 <sd_acmd51+0xe8>)
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	2230      	movs	r2, #48	; 0x30
    5030:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    5032:	e009      	b.n	5048 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    5034:	4b07      	ldr	r3, [pc, #28]	; (5054 <sd_acmd51+0xe8>)
    5036:	681b      	ldr	r3, [r3, #0]
    5038:	2220      	movs	r2, #32
    503a:	731a      	strb	r2, [r3, #12]
		break;
    503c:	e004      	b.n	5048 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    503e:	4b05      	ldr	r3, [pc, #20]	; (5054 <sd_acmd51+0xe8>)
    5040:	681b      	ldr	r3, [r3, #0]
    5042:	2210      	movs	r2, #16
    5044:	731a      	strb	r2, [r3, #12]
		break;
    5046:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    5048:	2301      	movs	r3, #1
}
    504a:	0018      	movs	r0, r3
    504c:	46bd      	mov	sp, r7
    504e:	b003      	add	sp, #12
    5050:	bd90      	pop	{r4, r7, pc}
    5052:	46c0      	nop			; (mov r8, r8)
    5054:	20000d04 	.word	0x20000d04
    5058:	00001137 	.word	0x00001137
    505c:	00006125 	.word	0x00006125
    5060:	00081133 	.word	0x00081133
    5064:	0000614d 	.word	0x0000614d
    5068:	0000641d 	.word	0x0000641d
    506c:	000064c1 	.word	0x000064c1
    5070:	000047ef 	.word	0x000047ef

00005074 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    5074:	b580      	push	{r7, lr}
    5076:	b082      	sub	sp, #8
    5078:	af00      	add	r7, sp, #0
    507a:	0002      	movs	r2, r0
    507c:	1dfb      	adds	r3, r7, #7
    507e:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    5080:	1dfb      	adds	r3, r7, #7
    5082:	781b      	ldrb	r3, [r3, #0]
    5084:	2b00      	cmp	r3, #0
    5086:	d001      	beq.n	508c <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    5088:	2304      	movs	r3, #4
    508a:	e047      	b.n	511c <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    508c:	1dfb      	adds	r3, r7, #7
    508e:	781b      	ldrb	r3, [r3, #0]
    5090:	4a24      	ldr	r2, [pc, #144]	; (5124 <sd_mmc_select_slot+0xb0>)
    5092:	015b      	lsls	r3, r3, #5
    5094:	18d3      	adds	r3, r2, r3
    5096:	330a      	adds	r3, #10
    5098:	781b      	ldrb	r3, [r3, #0]
    509a:	2b04      	cmp	r3, #4
    509c:	d008      	beq.n	50b0 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    509e:	1dfb      	adds	r3, r7, #7
    50a0:	781b      	ldrb	r3, [r3, #0]
    50a2:	4a20      	ldr	r2, [pc, #128]	; (5124 <sd_mmc_select_slot+0xb0>)
    50a4:	015b      	lsls	r3, r3, #5
    50a6:	18d3      	adds	r3, r2, r3
    50a8:	330a      	adds	r3, #10
    50aa:	781b      	ldrb	r3, [r3, #0]
    50ac:	2b03      	cmp	r3, #3
    50ae:	d11d      	bne.n	50ec <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    50b0:	1dfb      	adds	r3, r7, #7
    50b2:	781b      	ldrb	r3, [r3, #0]
    50b4:	4a1b      	ldr	r2, [pc, #108]	; (5124 <sd_mmc_select_slot+0xb0>)
    50b6:	015b      	lsls	r3, r3, #5
    50b8:	18d3      	adds	r3, r2, r3
    50ba:	330a      	adds	r3, #10
    50bc:	2202      	movs	r2, #2
    50be:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    50c0:	1dfb      	adds	r3, r7, #7
    50c2:	781a      	ldrb	r2, [r3, #0]
    50c4:	4b17      	ldr	r3, [pc, #92]	; (5124 <sd_mmc_select_slot+0xb0>)
    50c6:	0152      	lsls	r2, r2, #5
    50c8:	4917      	ldr	r1, [pc, #92]	; (5128 <sd_mmc_select_slot+0xb4>)
    50ca:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    50cc:	1dfb      	adds	r3, r7, #7
    50ce:	781b      	ldrb	r3, [r3, #0]
    50d0:	4a14      	ldr	r2, [pc, #80]	; (5124 <sd_mmc_select_slot+0xb0>)
    50d2:	015b      	lsls	r3, r3, #5
    50d4:	18d3      	adds	r3, r2, r3
    50d6:	330d      	adds	r3, #13
    50d8:	2201      	movs	r2, #1
    50da:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    50dc:	1dfb      	adds	r3, r7, #7
    50de:	781b      	ldrb	r3, [r3, #0]
    50e0:	4a10      	ldr	r2, [pc, #64]	; (5124 <sd_mmc_select_slot+0xb0>)
    50e2:	015b      	lsls	r3, r3, #5
    50e4:	18d3      	adds	r3, r2, r3
    50e6:	331e      	adds	r3, #30
    50e8:	2200      	movs	r2, #0
    50ea:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    50ec:	4b0f      	ldr	r3, [pc, #60]	; (512c <sd_mmc_select_slot+0xb8>)
    50ee:	1dfa      	adds	r2, r7, #7
    50f0:	7812      	ldrb	r2, [r2, #0]
    50f2:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    50f4:	1dfb      	adds	r3, r7, #7
    50f6:	781b      	ldrb	r3, [r3, #0]
    50f8:	015a      	lsls	r2, r3, #5
    50fa:	4b0a      	ldr	r3, [pc, #40]	; (5124 <sd_mmc_select_slot+0xb0>)
    50fc:	18d2      	adds	r2, r2, r3
    50fe:	4b0c      	ldr	r3, [pc, #48]	; (5130 <sd_mmc_select_slot+0xbc>)
    5100:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    5102:	4b0c      	ldr	r3, [pc, #48]	; (5134 <sd_mmc_select_slot+0xc0>)
    5104:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    5106:	1dfb      	adds	r3, r7, #7
    5108:	781b      	ldrb	r3, [r3, #0]
    510a:	4a06      	ldr	r2, [pc, #24]	; (5124 <sd_mmc_select_slot+0xb0>)
    510c:	015b      	lsls	r3, r3, #5
    510e:	18d3      	adds	r3, r2, r3
    5110:	330a      	adds	r3, #10
    5112:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    5114:	3b02      	subs	r3, #2
    5116:	425a      	negs	r2, r3
    5118:	4153      	adcs	r3, r2
    511a:	b2db      	uxtb	r3, r3
}
    511c:	0018      	movs	r0, r3
    511e:	46bd      	mov	sp, r7
    5120:	b002      	add	sp, #8
    5122:	bd80      	pop	{r7, pc}
    5124:	20000ce0 	.word	0x20000ce0
    5128:	00061a80 	.word	0x00061a80
    512c:	20000d00 	.word	0x20000d00
    5130:	20000d04 	.word	0x20000d04
    5134:	00005139 	.word	0x00005139

00005138 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    5138:	b5b0      	push	{r4, r5, r7, lr}
    513a:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    513c:	4b09      	ldr	r3, [pc, #36]	; (5164 <sd_mmc_configure_slot+0x2c>)
    513e:	7818      	ldrb	r0, [r3, #0]
    5140:	4b09      	ldr	r3, [pc, #36]	; (5168 <sd_mmc_configure_slot+0x30>)
    5142:	681b      	ldr	r3, [r3, #0]
    5144:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    5146:	4b08      	ldr	r3, [pc, #32]	; (5168 <sd_mmc_configure_slot+0x30>)
    5148:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    514a:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    514c:	4b06      	ldr	r3, [pc, #24]	; (5168 <sd_mmc_configure_slot+0x30>)
    514e:	681b      	ldr	r3, [r3, #0]
    5150:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    5152:	1e5c      	subs	r4, r3, #1
    5154:	41a3      	sbcs	r3, r4
    5156:	b2db      	uxtb	r3, r3
    5158:	4c04      	ldr	r4, [pc, #16]	; (516c <sd_mmc_configure_slot+0x34>)
    515a:	47a0      	blx	r4
}
    515c:	46c0      	nop			; (mov r8, r8)
    515e:	46bd      	mov	sp, r7
    5160:	bdb0      	pop	{r4, r5, r7, pc}
    5162:	46c0      	nop			; (mov r8, r8)
    5164:	20000d00 	.word	0x20000d00
    5168:	20000d04 	.word	0x20000d04
    516c:	0000600d 	.word	0x0000600d

00005170 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    5170:	b580      	push	{r7, lr}
    5172:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    5174:	4b05      	ldr	r3, [pc, #20]	; (518c <sd_mmc_deselect_slot+0x1c>)
    5176:	781b      	ldrb	r3, [r3, #0]
    5178:	2b00      	cmp	r3, #0
    517a:	d104      	bne.n	5186 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    517c:	4b03      	ldr	r3, [pc, #12]	; (518c <sd_mmc_deselect_slot+0x1c>)
    517e:	781b      	ldrb	r3, [r3, #0]
    5180:	0018      	movs	r0, r3
    5182:	4b03      	ldr	r3, [pc, #12]	; (5190 <sd_mmc_deselect_slot+0x20>)
    5184:	4798      	blx	r3
	}
}
    5186:	46c0      	nop			; (mov r8, r8)
    5188:	46bd      	mov	sp, r7
    518a:	bd80      	pop	{r7, pc}
    518c:	20000d00 	.word	0x20000d00
    5190:	00006095 	.word	0x00006095

00005194 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    5194:	b580      	push	{r7, lr}
    5196:	b082      	sub	sp, #8
    5198:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    519a:	1dfb      	adds	r3, r7, #7
    519c:	2200      	movs	r2, #0
    519e:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    51a0:	4b64      	ldr	r3, [pc, #400]	; (5334 <sd_mmc_spi_card_init+0x1a0>)
    51a2:	681b      	ldr	r3, [r3, #0]
    51a4:	2201      	movs	r2, #1
    51a6:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    51a8:	4b62      	ldr	r3, [pc, #392]	; (5334 <sd_mmc_spi_card_init+0x1a0>)
    51aa:	681b      	ldr	r3, [r3, #0]
    51ac:	2200      	movs	r2, #0
    51ae:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    51b0:	4b60      	ldr	r3, [pc, #384]	; (5334 <sd_mmc_spi_card_init+0x1a0>)
    51b2:	681b      	ldr	r3, [r3, #0]
    51b4:	2200      	movs	r2, #0
    51b6:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	spi_select_slave(&spi_main, &slave_SD, false);	//Added by KFausnight
    51b8:	495f      	ldr	r1, [pc, #380]	; (5338 <sd_mmc_spi_card_init+0x1a4>)
    51ba:	4b60      	ldr	r3, [pc, #384]	; (533c <sd_mmc_spi_card_init+0x1a8>)
    51bc:	2200      	movs	r2, #0
    51be:	0018      	movs	r0, r3
    51c0:	4b5f      	ldr	r3, [pc, #380]	; (5340 <sd_mmc_spi_card_init+0x1ac>)
    51c2:	4798      	blx	r3
	delay_ms(1);//Added by KFausnight
    51c4:	2001      	movs	r0, #1
    51c6:	4b5f      	ldr	r3, [pc, #380]	; (5344 <sd_mmc_spi_card_init+0x1b0>)
    51c8:	4798      	blx	r3
	driver_send_clock();
    51ca:	4b5f      	ldr	r3, [pc, #380]	; (5348 <sd_mmc_spi_card_init+0x1b4>)
    51cc:	4798      	blx	r3
	delay_ms(1);//Added by KFausnight
    51ce:	2001      	movs	r0, #1
    51d0:	4b5c      	ldr	r3, [pc, #368]	; (5344 <sd_mmc_spi_card_init+0x1b0>)
    51d2:	4798      	blx	r3
	spi_select_slave(&spi_main, &slave_SD, true);	//Added by KFausnight
    51d4:	4958      	ldr	r1, [pc, #352]	; (5338 <sd_mmc_spi_card_init+0x1a4>)
    51d6:	4b59      	ldr	r3, [pc, #356]	; (533c <sd_mmc_spi_card_init+0x1a8>)
    51d8:	2201      	movs	r2, #1
    51da:	0018      	movs	r0, r3
    51dc:	4b58      	ldr	r3, [pc, #352]	; (5340 <sd_mmc_spi_card_init+0x1ac>)
    51de:	4798      	blx	r3
	delay_ms(1);//Added by KFausnight
    51e0:	2001      	movs	r0, #1
    51e2:	4b58      	ldr	r3, [pc, #352]	; (5344 <sd_mmc_spi_card_init+0x1b0>)
    51e4:	4798      	blx	r3
	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    51e6:	2388      	movs	r3, #136	; 0x88
    51e8:	015b      	lsls	r3, r3, #5
    51ea:	2100      	movs	r1, #0
    51ec:	0018      	movs	r0, r3
    51ee:	4b57      	ldr	r3, [pc, #348]	; (534c <sd_mmc_spi_card_init+0x1b8>)
    51f0:	4798      	blx	r3
    51f2:	0003      	movs	r3, r0
    51f4:	001a      	movs	r2, r3
    51f6:	2301      	movs	r3, #1
    51f8:	4053      	eors	r3, r2
    51fa:	b2db      	uxtb	r3, r3
    51fc:	2b00      	cmp	r3, #0
    51fe:	d001      	beq.n	5204 <sd_mmc_spi_card_init+0x70>
		return false;
    5200:	2300      	movs	r3, #0
    5202:	e092      	b.n	532a <sd_mmc_spi_card_init+0x196>
	}
	if (!sd_cmd8(&v2)) {
    5204:	1dfb      	adds	r3, r7, #7
    5206:	0018      	movs	r0, r3
    5208:	4b51      	ldr	r3, [pc, #324]	; (5350 <sd_mmc_spi_card_init+0x1bc>)
    520a:	4798      	blx	r3
    520c:	0003      	movs	r3, r0
    520e:	001a      	movs	r2, r3
    5210:	2301      	movs	r3, #1
    5212:	4053      	eors	r3, r2
    5214:	b2db      	uxtb	r3, r3
    5216:	2b00      	cmp	r3, #0
    5218:	d001      	beq.n	521e <sd_mmc_spi_card_init+0x8a>
		return false;
    521a:	2300      	movs	r3, #0
    521c:	e085      	b.n	532a <sd_mmc_spi_card_init+0x196>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    521e:	4b4d      	ldr	r3, [pc, #308]	; (5354 <sd_mmc_spi_card_init+0x1c0>)
    5220:	4798      	blx	r3
    5222:	0003      	movs	r3, r0
    5224:	001a      	movs	r2, r3
    5226:	2301      	movs	r3, #1
    5228:	4053      	eors	r3, r2
    522a:	b2db      	uxtb	r3, r3
    522c:	2b00      	cmp	r3, #0
    522e:	d001      	beq.n	5234 <sd_mmc_spi_card_init+0xa0>
		return false;
    5230:	2300      	movs	r3, #0
    5232:	e07a      	b.n	532a <sd_mmc_spi_card_init+0x196>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5234:	4b3f      	ldr	r3, [pc, #252]	; (5334 <sd_mmc_spi_card_init+0x1a0>)
    5236:	681b      	ldr	r3, [r3, #0]
    5238:	7adb      	ldrb	r3, [r3, #11]
    523a:	001a      	movs	r2, r3
    523c:	2301      	movs	r3, #1
    523e:	4013      	ands	r3, r2
    5240:	d021      	beq.n	5286 <sd_mmc_spi_card_init+0xf2>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    5242:	1dfb      	adds	r3, r7, #7
    5244:	781b      	ldrb	r3, [r3, #0]
    5246:	0018      	movs	r0, r3
    5248:	4b43      	ldr	r3, [pc, #268]	; (5358 <sd_mmc_spi_card_init+0x1c4>)
    524a:	4798      	blx	r3
    524c:	0003      	movs	r3, r0
    524e:	001a      	movs	r2, r3
    5250:	2301      	movs	r3, #1
    5252:	4053      	eors	r3, r2
    5254:	b2db      	uxtb	r3, r3
    5256:	2b00      	cmp	r3, #0
    5258:	d007      	beq.n	526a <sd_mmc_spi_card_init+0xd6>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    525a:	4b36      	ldr	r3, [pc, #216]	; (5334 <sd_mmc_spi_card_init+0x1a0>)
    525c:	681b      	ldr	r3, [r3, #0]
    525e:	2202      	movs	r2, #2
    5260:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    5262:	4b3e      	ldr	r3, [pc, #248]	; (535c <sd_mmc_spi_card_init+0x1c8>)
    5264:	4798      	blx	r3
    5266:	0003      	movs	r3, r0
    5268:	e05f      	b.n	532a <sd_mmc_spi_card_init+0x196>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    526a:	4b3d      	ldr	r3, [pc, #244]	; (5360 <sd_mmc_spi_card_init+0x1cc>)
    526c:	2100      	movs	r1, #0
    526e:	0018      	movs	r0, r3
    5270:	4b36      	ldr	r3, [pc, #216]	; (534c <sd_mmc_spi_card_init+0x1b8>)
    5272:	4798      	blx	r3
    5274:	0003      	movs	r3, r0
    5276:	001a      	movs	r2, r3
    5278:	2301      	movs	r3, #1
    527a:	4053      	eors	r3, r2
    527c:	b2db      	uxtb	r3, r3
    527e:	2b00      	cmp	r3, #0
    5280:	d001      	beq.n	5286 <sd_mmc_spi_card_init+0xf2>
			return false;
    5282:	2300      	movs	r3, #0
    5284:	e051      	b.n	532a <sd_mmc_spi_card_init+0x196>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5286:	4b2b      	ldr	r3, [pc, #172]	; (5334 <sd_mmc_spi_card_init+0x1a0>)
    5288:	681b      	ldr	r3, [r3, #0]
    528a:	7adb      	ldrb	r3, [r3, #11]
    528c:	001a      	movs	r2, r3
    528e:	2301      	movs	r3, #1
    5290:	4013      	ands	r3, r2
    5292:	d017      	beq.n	52c4 <sd_mmc_spi_card_init+0x130>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    5294:	4b33      	ldr	r3, [pc, #204]	; (5364 <sd_mmc_spi_card_init+0x1d0>)
    5296:	4798      	blx	r3
    5298:	0003      	movs	r3, r0
    529a:	001a      	movs	r2, r3
    529c:	2301      	movs	r3, #1
    529e:	4053      	eors	r3, r2
    52a0:	b2db      	uxtb	r3, r3
    52a2:	2b00      	cmp	r3, #0
    52a4:	d001      	beq.n	52aa <sd_mmc_spi_card_init+0x116>
			return false;
    52a6:	2300      	movs	r3, #0
    52a8:	e03f      	b.n	532a <sd_mmc_spi_card_init+0x196>
		}
		sd_decode_csd();
    52aa:	4b2f      	ldr	r3, [pc, #188]	; (5368 <sd_mmc_spi_card_init+0x1d4>)
    52ac:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    52ae:	4b2f      	ldr	r3, [pc, #188]	; (536c <sd_mmc_spi_card_init+0x1d8>)
    52b0:	4798      	blx	r3
    52b2:	0003      	movs	r3, r0
    52b4:	001a      	movs	r2, r3
    52b6:	2301      	movs	r3, #1
    52b8:	4053      	eors	r3, r2
    52ba:	b2db      	uxtb	r3, r3
    52bc:	2b00      	cmp	r3, #0
    52be:	d001      	beq.n	52c4 <sd_mmc_spi_card_init+0x130>
			return false;
    52c0:	2300      	movs	r3, #0
    52c2:	e032      	b.n	532a <sd_mmc_spi_card_init+0x196>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    52c4:	4b1b      	ldr	r3, [pc, #108]	; (5334 <sd_mmc_spi_card_init+0x1a0>)
    52c6:	681b      	ldr	r3, [r3, #0]
    52c8:	7adb      	ldrb	r3, [r3, #11]
    52ca:	001a      	movs	r2, r3
    52cc:	2301      	movs	r3, #1
    52ce:	4013      	ands	r3, r2
    52d0:	d016      	beq.n	5300 <sd_mmc_spi_card_init+0x16c>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    52d2:	4b18      	ldr	r3, [pc, #96]	; (5334 <sd_mmc_spi_card_init+0x1a0>)
    52d4:	681b      	ldr	r3, [r3, #0]
    52d6:	7adb      	ldrb	r3, [r3, #11]
    52d8:	001a      	movs	r2, r3
    52da:	2308      	movs	r3, #8
    52dc:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    52de:	d10f      	bne.n	5300 <sd_mmc_spi_card_init+0x16c>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    52e0:	2380      	movs	r3, #128	; 0x80
    52e2:	009b      	lsls	r3, r3, #2
    52e4:	4a22      	ldr	r2, [pc, #136]	; (5370 <sd_mmc_spi_card_init+0x1dc>)
    52e6:	0019      	movs	r1, r3
    52e8:	0010      	movs	r0, r2
    52ea:	4b18      	ldr	r3, [pc, #96]	; (534c <sd_mmc_spi_card_init+0x1b8>)
    52ec:	4798      	blx	r3
    52ee:	0003      	movs	r3, r0
    52f0:	001a      	movs	r2, r3
    52f2:	2301      	movs	r3, #1
    52f4:	4053      	eors	r3, r2
    52f6:	b2db      	uxtb	r3, r3
    52f8:	2b00      	cmp	r3, #0
    52fa:	d001      	beq.n	5300 <sd_mmc_spi_card_init+0x16c>
			return false;
    52fc:	2300      	movs	r3, #0
    52fe:	e014      	b.n	532a <sd_mmc_spi_card_init+0x196>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5300:	4b0c      	ldr	r3, [pc, #48]	; (5334 <sd_mmc_spi_card_init+0x1a0>)
    5302:	681b      	ldr	r3, [r3, #0]
    5304:	7adb      	ldrb	r3, [r3, #11]
    5306:	001a      	movs	r2, r3
    5308:	2301      	movs	r3, #1
    530a:	4013      	ands	r3, r2
    530c:	d00a      	beq.n	5324 <sd_mmc_spi_card_init+0x190>
		if (!sd_mmc_cmd13()) {
    530e:	4b19      	ldr	r3, [pc, #100]	; (5374 <sd_mmc_spi_card_init+0x1e0>)
    5310:	4798      	blx	r3
    5312:	0003      	movs	r3, r0
    5314:	001a      	movs	r2, r3
    5316:	2301      	movs	r3, #1
    5318:	4053      	eors	r3, r2
    531a:	b2db      	uxtb	r3, r3
    531c:	2b00      	cmp	r3, #0
    531e:	d001      	beq.n	5324 <sd_mmc_spi_card_init+0x190>
			return false;
    5320:	2300      	movs	r3, #0
    5322:	e002      	b.n	532a <sd_mmc_spi_card_init+0x196>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    5324:	4b14      	ldr	r3, [pc, #80]	; (5378 <sd_mmc_spi_card_init+0x1e4>)
    5326:	4798      	blx	r3
	return true;
    5328:	2301      	movs	r3, #1
}
    532a:	0018      	movs	r0, r3
    532c:	46bd      	mov	sp, r7
    532e:	b002      	add	sp, #8
    5330:	bd80      	pop	{r7, pc}
    5332:	46c0      	nop			; (mov r8, r8)
    5334:	20000d04 	.word	0x20000d04
    5338:	20001240 	.word	0x20001240
    533c:	20001270 	.word	0x20001270
    5340:	00017325 	.word	0x00017325
    5344:	000181b5 	.word	0x000181b5
    5348:	000060d9 	.word	0x000060d9
    534c:	00006125 	.word	0x00006125
    5350:	00004ae9 	.word	0x00004ae9
    5354:	00004add 	.word	0x00004add
    5358:	000049f9 	.word	0x000049f9
    535c:	0000537d 	.word	0x0000537d
    5360:	0000113b 	.word	0x0000113b
    5364:	00004c85 	.word	0x00004c85
    5368:	00004e25 	.word	0x00004e25
    536c:	00004f6d 	.word	0x00004f6d
    5370:	00001110 	.word	0x00001110
    5374:	00004f11 	.word	0x00004f11
    5378:	00005139 	.word	0x00005139

0000537c <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    537c:	b580      	push	{r7, lr}
    537e:	b082      	sub	sp, #8
    5380:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    5382:	2388      	movs	r3, #136	; 0x88
    5384:	015b      	lsls	r3, r3, #5
    5386:	2100      	movs	r1, #0
    5388:	0018      	movs	r0, r3
    538a:	4b32      	ldr	r3, [pc, #200]	; (5454 <sd_mmc_spi_install_mmc+0xd8>)
    538c:	4798      	blx	r3
    538e:	0003      	movs	r3, r0
    5390:	001a      	movs	r2, r3
    5392:	2301      	movs	r3, #1
    5394:	4053      	eors	r3, r2
    5396:	b2db      	uxtb	r3, r3
    5398:	2b00      	cmp	r3, #0
    539a:	d001      	beq.n	53a0 <sd_mmc_spi_install_mmc+0x24>
		return false;
    539c:	2300      	movs	r3, #0
    539e:	e055      	b.n	544c <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    53a0:	4b2d      	ldr	r3, [pc, #180]	; (5458 <sd_mmc_spi_install_mmc+0xdc>)
    53a2:	4798      	blx	r3
    53a4:	0003      	movs	r3, r0
    53a6:	001a      	movs	r2, r3
    53a8:	2301      	movs	r3, #1
    53aa:	4053      	eors	r3, r2
    53ac:	b2db      	uxtb	r3, r3
    53ae:	2b00      	cmp	r3, #0
    53b0:	d001      	beq.n	53b6 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    53b2:	2300      	movs	r3, #0
    53b4:	e04a      	b.n	544c <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    53b6:	4b29      	ldr	r3, [pc, #164]	; (545c <sd_mmc_spi_install_mmc+0xe0>)
    53b8:	2100      	movs	r1, #0
    53ba:	0018      	movs	r0, r3
    53bc:	4b25      	ldr	r3, [pc, #148]	; (5454 <sd_mmc_spi_install_mmc+0xd8>)
    53be:	4798      	blx	r3
    53c0:	0003      	movs	r3, r0
    53c2:	001a      	movs	r2, r3
    53c4:	2301      	movs	r3, #1
    53c6:	4053      	eors	r3, r2
    53c8:	b2db      	uxtb	r3, r3
    53ca:	2b00      	cmp	r3, #0
    53cc:	d001      	beq.n	53d2 <sd_mmc_spi_install_mmc+0x56>
		return false;
    53ce:	2300      	movs	r3, #0
    53d0:	e03c      	b.n	544c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    53d2:	4b23      	ldr	r3, [pc, #140]	; (5460 <sd_mmc_spi_install_mmc+0xe4>)
    53d4:	4798      	blx	r3
    53d6:	0003      	movs	r3, r0
    53d8:	001a      	movs	r2, r3
    53da:	2301      	movs	r3, #1
    53dc:	4053      	eors	r3, r2
    53de:	b2db      	uxtb	r3, r3
    53e0:	2b00      	cmp	r3, #0
    53e2:	d001      	beq.n	53e8 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    53e4:	2300      	movs	r3, #0
    53e6:	e031      	b.n	544c <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    53e8:	4b1e      	ldr	r3, [pc, #120]	; (5464 <sd_mmc_spi_install_mmc+0xe8>)
    53ea:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    53ec:	4b1e      	ldr	r3, [pc, #120]	; (5468 <sd_mmc_spi_install_mmc+0xec>)
    53ee:	681b      	ldr	r3, [r3, #0]
    53f0:	7b1b      	ldrb	r3, [r3, #12]
    53f2:	2b3f      	cmp	r3, #63	; 0x3f
    53f4:	d90c      	bls.n	5410 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    53f6:	1dfb      	adds	r3, r7, #7
    53f8:	0018      	movs	r0, r3
    53fa:	4b1c      	ldr	r3, [pc, #112]	; (546c <sd_mmc_spi_install_mmc+0xf0>)
    53fc:	4798      	blx	r3
    53fe:	0003      	movs	r3, r0
    5400:	001a      	movs	r2, r3
    5402:	2301      	movs	r3, #1
    5404:	4053      	eors	r3, r2
    5406:	b2db      	uxtb	r3, r3
    5408:	2b00      	cmp	r3, #0
    540a:	d001      	beq.n	5410 <sd_mmc_spi_install_mmc+0x94>
			return false;
    540c:	2300      	movs	r3, #0
    540e:	e01d      	b.n	544c <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    5410:	2380      	movs	r3, #128	; 0x80
    5412:	009b      	lsls	r3, r3, #2
    5414:	4a16      	ldr	r2, [pc, #88]	; (5470 <sd_mmc_spi_install_mmc+0xf4>)
    5416:	0019      	movs	r1, r3
    5418:	0010      	movs	r0, r2
    541a:	4b0e      	ldr	r3, [pc, #56]	; (5454 <sd_mmc_spi_install_mmc+0xd8>)
    541c:	4798      	blx	r3
    541e:	0003      	movs	r3, r0
    5420:	001a      	movs	r2, r3
    5422:	2301      	movs	r3, #1
    5424:	4053      	eors	r3, r2
    5426:	b2db      	uxtb	r3, r3
    5428:	2b00      	cmp	r3, #0
    542a:	d001      	beq.n	5430 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    542c:	2300      	movs	r3, #0
    542e:	e00d      	b.n	544c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    5430:	4b10      	ldr	r3, [pc, #64]	; (5474 <sd_mmc_spi_install_mmc+0xf8>)
    5432:	4798      	blx	r3
    5434:	0003      	movs	r3, r0
    5436:	001a      	movs	r2, r3
    5438:	2301      	movs	r3, #1
    543a:	4053      	eors	r3, r2
    543c:	b2db      	uxtb	r3, r3
    543e:	2b00      	cmp	r3, #0
    5440:	d001      	beq.n	5446 <sd_mmc_spi_install_mmc+0xca>
		return false;
    5442:	2300      	movs	r3, #0
    5444:	e002      	b.n	544c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    5446:	4b0c      	ldr	r3, [pc, #48]	; (5478 <sd_mmc_spi_install_mmc+0xfc>)
    5448:	4798      	blx	r3
	return true;
    544a:	2301      	movs	r3, #1
}
    544c:	0018      	movs	r0, r3
    544e:	46bd      	mov	sp, r7
    5450:	b002      	add	sp, #8
    5452:	bd80      	pop	{r7, pc}
    5454:	00006125 	.word	0x00006125
    5458:	0000494d 	.word	0x0000494d
    545c:	0000113b 	.word	0x0000113b
    5460:	00004c85 	.word	0x00004c85
    5464:	00004cf5 	.word	0x00004cf5
    5468:	20000d04 	.word	0x20000d04
    546c:	00004b59 	.word	0x00004b59
    5470:	00001110 	.word	0x00001110
    5474:	00004f11 	.word	0x00004f11
    5478:	00005139 	.word	0x00005139

0000547c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    547c:	b580      	push	{r7, lr}
    547e:	b082      	sub	sp, #8
    5480:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    5482:	1dfb      	adds	r3, r7, #7
    5484:	2200      	movs	r2, #0
    5486:	701a      	strb	r2, [r3, #0]
    5488:	e00c      	b.n	54a4 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    548a:	1dfb      	adds	r3, r7, #7
    548c:	781b      	ldrb	r3, [r3, #0]
    548e:	4a0c      	ldr	r2, [pc, #48]	; (54c0 <sd_mmc_init+0x44>)
    5490:	015b      	lsls	r3, r3, #5
    5492:	18d3      	adds	r3, r2, r3
    5494:	330a      	adds	r3, #10
    5496:	2204      	movs	r2, #4
    5498:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    549a:	1dfb      	adds	r3, r7, #7
    549c:	781a      	ldrb	r2, [r3, #0]
    549e:	1dfb      	adds	r3, r7, #7
    54a0:	3201      	adds	r2, #1
    54a2:	701a      	strb	r2, [r3, #0]
    54a4:	1dfb      	adds	r3, r7, #7
    54a6:	781b      	ldrb	r3, [r3, #0]
    54a8:	2b00      	cmp	r3, #0
    54aa:	d0ee      	beq.n	548a <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    54ac:	4b05      	ldr	r3, [pc, #20]	; (54c4 <sd_mmc_init+0x48>)
    54ae:	22ff      	movs	r2, #255	; 0xff
    54b0:	701a      	strb	r2, [r3, #0]
	driver_init();
    54b2:	4b05      	ldr	r3, [pc, #20]	; (54c8 <sd_mmc_init+0x4c>)
    54b4:	4798      	blx	r3
}
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	46bd      	mov	sp, r7
    54ba:	b002      	add	sp, #8
    54bc:	bd80      	pop	{r7, pc}
    54be:	46c0      	nop			; (mov r8, r8)
    54c0:	20000ce0 	.word	0x20000ce0
    54c4:	20000d00 	.word	0x20000d00
    54c8:	00005f55 	.word	0x00005f55

000054cc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    54cc:	b590      	push	{r4, r7, lr}
    54ce:	b085      	sub	sp, #20
    54d0:	af00      	add	r7, sp, #0
    54d2:	0002      	movs	r2, r0
    54d4:	1dfb      	adds	r3, r7, #7
    54d6:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    54d8:	230f      	movs	r3, #15
    54da:	18fc      	adds	r4, r7, r3
    54dc:	1dfb      	adds	r3, r7, #7
    54de:	781b      	ldrb	r3, [r3, #0]
    54e0:	0018      	movs	r0, r3
    54e2:	4b13      	ldr	r3, [pc, #76]	; (5530 <sd_mmc_check+0x64>)
    54e4:	4798      	blx	r3
    54e6:	0003      	movs	r3, r0
    54e8:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    54ea:	230f      	movs	r3, #15
    54ec:	18fb      	adds	r3, r7, r3
    54ee:	781b      	ldrb	r3, [r3, #0]
    54f0:	2b01      	cmp	r3, #1
    54f2:	d005      	beq.n	5500 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    54f4:	4b0f      	ldr	r3, [pc, #60]	; (5534 <sd_mmc_check+0x68>)
    54f6:	4798      	blx	r3
		return sd_mmc_err;
    54f8:	230f      	movs	r3, #15
    54fa:	18fb      	adds	r3, r7, r3
    54fc:	781b      	ldrb	r3, [r3, #0]
    54fe:	e012      	b.n	5526 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    5500:	4b0d      	ldr	r3, [pc, #52]	; (5538 <sd_mmc_check+0x6c>)
    5502:	4798      	blx	r3
    5504:	1e03      	subs	r3, r0, #0
    5506:	d007      	beq.n	5518 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    5508:	4b0c      	ldr	r3, [pc, #48]	; (553c <sd_mmc_check+0x70>)
    550a:	681b      	ldr	r3, [r3, #0]
    550c:	2200      	movs	r2, #0
    550e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    5510:	4b08      	ldr	r3, [pc, #32]	; (5534 <sd_mmc_check+0x68>)
    5512:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    5514:	2301      	movs	r3, #1
    5516:	e006      	b.n	5526 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    5518:	4b08      	ldr	r3, [pc, #32]	; (553c <sd_mmc_check+0x70>)
    551a:	681b      	ldr	r3, [r3, #0]
    551c:	2203      	movs	r2, #3
    551e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    5520:	4b04      	ldr	r3, [pc, #16]	; (5534 <sd_mmc_check+0x68>)
    5522:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    5524:	2303      	movs	r3, #3
}
    5526:	0018      	movs	r0, r3
    5528:	46bd      	mov	sp, r7
    552a:	b005      	add	sp, #20
    552c:	bd90      	pop	{r4, r7, pc}
    552e:	46c0      	nop			; (mov r8, r8)
    5530:	00005075 	.word	0x00005075
    5534:	00005171 	.word	0x00005171
    5538:	00005195 	.word	0x00005195
    553c:	20000d04 	.word	0x20000d04

00005540 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    5540:	b580      	push	{r7, lr}
    5542:	b082      	sub	sp, #8
    5544:	af00      	add	r7, sp, #0
    5546:	0002      	movs	r2, r0
    5548:	1dfb      	adds	r3, r7, #7
    554a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    554c:	1dfb      	adds	r3, r7, #7
    554e:	781b      	ldrb	r3, [r3, #0]
    5550:	0018      	movs	r0, r3
    5552:	4b07      	ldr	r3, [pc, #28]	; (5570 <sd_mmc_get_type+0x30>)
    5554:	4798      	blx	r3
    5556:	1e03      	subs	r3, r0, #0
    5558:	d001      	beq.n	555e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    555a:	2300      	movs	r3, #0
    555c:	e004      	b.n	5568 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    555e:	4b05      	ldr	r3, [pc, #20]	; (5574 <sd_mmc_get_type+0x34>)
    5560:	4798      	blx	r3
	return sd_mmc_card->type;
    5562:	4b05      	ldr	r3, [pc, #20]	; (5578 <sd_mmc_get_type+0x38>)
    5564:	681b      	ldr	r3, [r3, #0]
    5566:	7adb      	ldrb	r3, [r3, #11]
}
    5568:	0018      	movs	r0, r3
    556a:	46bd      	mov	sp, r7
    556c:	b002      	add	sp, #8
    556e:	bd80      	pop	{r7, pc}
    5570:	00005075 	.word	0x00005075
    5574:	00005171 	.word	0x00005171
    5578:	20000d04 	.word	0x20000d04

0000557c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    557c:	b580      	push	{r7, lr}
    557e:	b082      	sub	sp, #8
    5580:	af00      	add	r7, sp, #0
    5582:	0002      	movs	r2, r0
    5584:	1dfb      	adds	r3, r7, #7
    5586:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    5588:	1dfb      	adds	r3, r7, #7
    558a:	781b      	ldrb	r3, [r3, #0]
    558c:	0018      	movs	r0, r3
    558e:	4b07      	ldr	r3, [pc, #28]	; (55ac <sd_mmc_get_capacity+0x30>)
    5590:	4798      	blx	r3
    5592:	1e03      	subs	r3, r0, #0
    5594:	d001      	beq.n	559a <sd_mmc_get_capacity+0x1e>
		return 0;
    5596:	2300      	movs	r3, #0
    5598:	e004      	b.n	55a4 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    559a:	4b05      	ldr	r3, [pc, #20]	; (55b0 <sd_mmc_get_capacity+0x34>)
    559c:	4798      	blx	r3
	return sd_mmc_card->capacity;
    559e:	4b05      	ldr	r3, [pc, #20]	; (55b4 <sd_mmc_get_capacity+0x38>)
    55a0:	681b      	ldr	r3, [r3, #0]
    55a2:	685b      	ldr	r3, [r3, #4]
}
    55a4:	0018      	movs	r0, r3
    55a6:	46bd      	mov	sp, r7
    55a8:	b002      	add	sp, #8
    55aa:	bd80      	pop	{r7, pc}
    55ac:	00005075 	.word	0x00005075
    55b0:	00005171 	.word	0x00005171
    55b4:	20000d04 	.word	0x20000d04

000055b8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    55b8:	b580      	push	{r7, lr}
    55ba:	b082      	sub	sp, #8
    55bc:	af00      	add	r7, sp, #0
    55be:	0002      	movs	r2, r0
    55c0:	1dfb      	adds	r3, r7, #7
    55c2:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    55c4:	2300      	movs	r3, #0
}
    55c6:	0018      	movs	r0, r3
    55c8:	46bd      	mov	sp, r7
    55ca:	b002      	add	sp, #8
    55cc:	bd80      	pop	{r7, pc}
	...

000055d0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    55d0:	b590      	push	{r4, r7, lr}
    55d2:	b089      	sub	sp, #36	; 0x24
    55d4:	af02      	add	r7, sp, #8
    55d6:	6039      	str	r1, [r7, #0]
    55d8:	0011      	movs	r1, r2
    55da:	1dfb      	adds	r3, r7, #7
    55dc:	1c02      	adds	r2, r0, #0
    55de:	701a      	strb	r2, [r3, #0]
    55e0:	1d3b      	adds	r3, r7, #4
    55e2:	1c0a      	adds	r2, r1, #0
    55e4:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    55e6:	230f      	movs	r3, #15
    55e8:	18fc      	adds	r4, r7, r3
    55ea:	1dfb      	adds	r3, r7, #7
    55ec:	781b      	ldrb	r3, [r3, #0]
    55ee:	0018      	movs	r0, r3
    55f0:	4b29      	ldr	r3, [pc, #164]	; (5698 <sd_mmc_init_read_blocks+0xc8>)
    55f2:	4798      	blx	r3
    55f4:	0003      	movs	r3, r0
    55f6:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    55f8:	230f      	movs	r3, #15
    55fa:	18fb      	adds	r3, r7, r3
    55fc:	781b      	ldrb	r3, [r3, #0]
    55fe:	2b00      	cmp	r3, #0
    5600:	d003      	beq.n	560a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    5602:	230f      	movs	r3, #15
    5604:	18fb      	adds	r3, r7, r3
    5606:	781b      	ldrb	r3, [r3, #0]
    5608:	e041      	b.n	568e <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    560a:	4b24      	ldr	r3, [pc, #144]	; (569c <sd_mmc_init_read_blocks+0xcc>)
    560c:	4798      	blx	r3
    560e:	0003      	movs	r3, r0
    5610:	001a      	movs	r2, r3
    5612:	2301      	movs	r3, #1
    5614:	4053      	eors	r3, r2
    5616:	b2db      	uxtb	r3, r3
    5618:	2b00      	cmp	r3, #0
    561a:	d003      	beq.n	5624 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    561c:	4b20      	ldr	r3, [pc, #128]	; (56a0 <sd_mmc_init_read_blocks+0xd0>)
    561e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5620:	2305      	movs	r3, #5
    5622:	e034      	b.n	568e <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    5624:	1d3b      	adds	r3, r7, #4
    5626:	881b      	ldrh	r3, [r3, #0]
    5628:	2b01      	cmp	r3, #1
    562a:	d902      	bls.n	5632 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    562c:	4b1d      	ldr	r3, [pc, #116]	; (56a4 <sd_mmc_init_read_blocks+0xd4>)
    562e:	617b      	str	r3, [r7, #20]
    5630:	e001      	b.n	5636 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    5632:	4b1d      	ldr	r3, [pc, #116]	; (56a8 <sd_mmc_init_read_blocks+0xd8>)
    5634:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    5636:	4b1d      	ldr	r3, [pc, #116]	; (56ac <sd_mmc_init_read_blocks+0xdc>)
    5638:	681b      	ldr	r3, [r3, #0]
    563a:	7adb      	ldrb	r3, [r3, #11]
    563c:	001a      	movs	r2, r3
    563e:	2308      	movs	r3, #8
    5640:	4013      	ands	r3, r2
    5642:	d002      	beq.n	564a <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    5644:	683b      	ldr	r3, [r7, #0]
    5646:	613b      	str	r3, [r7, #16]
    5648:	e002      	b.n	5650 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    564a:	683b      	ldr	r3, [r7, #0]
    564c:	025b      	lsls	r3, r3, #9
    564e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    5650:	1d3b      	adds	r3, r7, #4
    5652:	881c      	ldrh	r4, [r3, #0]
    5654:	2380      	movs	r3, #128	; 0x80
    5656:	009a      	lsls	r2, r3, #2
    5658:	6939      	ldr	r1, [r7, #16]
    565a:	6978      	ldr	r0, [r7, #20]
    565c:	2301      	movs	r3, #1
    565e:	9300      	str	r3, [sp, #0]
    5660:	0023      	movs	r3, r4
    5662:	4c13      	ldr	r4, [pc, #76]	; (56b0 <sd_mmc_init_read_blocks+0xe0>)
    5664:	47a0      	blx	r4
    5666:	0003      	movs	r3, r0
    5668:	001a      	movs	r2, r3
    566a:	2301      	movs	r3, #1
    566c:	4053      	eors	r3, r2
    566e:	b2db      	uxtb	r3, r3
    5670:	2b00      	cmp	r3, #0
    5672:	d003      	beq.n	567c <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    5674:	4b0a      	ldr	r3, [pc, #40]	; (56a0 <sd_mmc_init_read_blocks+0xd0>)
    5676:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5678:	2305      	movs	r3, #5
    567a:	e008      	b.n	568e <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    567c:	4b0d      	ldr	r3, [pc, #52]	; (56b4 <sd_mmc_init_read_blocks+0xe4>)
    567e:	1d3a      	adds	r2, r7, #4
    5680:	8812      	ldrh	r2, [r2, #0]
    5682:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    5684:	4b0c      	ldr	r3, [pc, #48]	; (56b8 <sd_mmc_init_read_blocks+0xe8>)
    5686:	1d3a      	adds	r2, r7, #4
    5688:	8812      	ldrh	r2, [r2, #0]
    568a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    568c:	2300      	movs	r3, #0
}
    568e:	0018      	movs	r0, r3
    5690:	46bd      	mov	sp, r7
    5692:	b007      	add	sp, #28
    5694:	bd90      	pop	{r4, r7, pc}
    5696:	46c0      	nop			; (mov r8, r8)
    5698:	00005075 	.word	0x00005075
    569c:	00004f11 	.word	0x00004f11
    56a0:	00005171 	.word	0x00005171
    56a4:	00101112 	.word	0x00101112
    56a8:	00081111 	.word	0x00081111
    56ac:	20000d04 	.word	0x20000d04
    56b0:	0000614d 	.word	0x0000614d
    56b4:	20000d0a 	.word	0x20000d0a
    56b8:	20000d08 	.word	0x20000d08

000056bc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    56bc:	b580      	push	{r7, lr}
    56be:	b082      	sub	sp, #8
    56c0:	af00      	add	r7, sp, #0
    56c2:	6078      	str	r0, [r7, #4]
    56c4:	000a      	movs	r2, r1
    56c6:	1cbb      	adds	r3, r7, #2
    56c8:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    56ca:	1cbb      	adds	r3, r7, #2
    56cc:	881a      	ldrh	r2, [r3, #0]
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	0011      	movs	r1, r2
    56d2:	0018      	movs	r0, r3
    56d4:	4b0d      	ldr	r3, [pc, #52]	; (570c <sd_mmc_start_read_blocks+0x50>)
    56d6:	4798      	blx	r3
    56d8:	0003      	movs	r3, r0
    56da:	001a      	movs	r2, r3
    56dc:	2301      	movs	r3, #1
    56de:	4053      	eors	r3, r2
    56e0:	b2db      	uxtb	r3, r3
    56e2:	2b00      	cmp	r3, #0
    56e4:	d004      	beq.n	56f0 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    56e6:	4b0a      	ldr	r3, [pc, #40]	; (5710 <sd_mmc_start_read_blocks+0x54>)
    56e8:	2200      	movs	r2, #0
    56ea:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    56ec:	2305      	movs	r3, #5
    56ee:	e008      	b.n	5702 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    56f0:	4b07      	ldr	r3, [pc, #28]	; (5710 <sd_mmc_start_read_blocks+0x54>)
    56f2:	881a      	ldrh	r2, [r3, #0]
    56f4:	1cbb      	adds	r3, r7, #2
    56f6:	881b      	ldrh	r3, [r3, #0]
    56f8:	1ad3      	subs	r3, r2, r3
    56fa:	b29a      	uxth	r2, r3
    56fc:	4b04      	ldr	r3, [pc, #16]	; (5710 <sd_mmc_start_read_blocks+0x54>)
    56fe:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    5700:	2300      	movs	r3, #0
}
    5702:	0018      	movs	r0, r3
    5704:	46bd      	mov	sp, r7
    5706:	b002      	add	sp, #8
    5708:	bd80      	pop	{r7, pc}
    570a:	46c0      	nop			; (mov r8, r8)
    570c:	0000641d 	.word	0x0000641d
    5710:	20000d0a 	.word	0x20000d0a

00005714 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    5714:	b580      	push	{r7, lr}
    5716:	b082      	sub	sp, #8
    5718:	af00      	add	r7, sp, #0
    571a:	0002      	movs	r2, r0
    571c:	1dfb      	adds	r3, r7, #7
    571e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    5720:	4b1c      	ldr	r3, [pc, #112]	; (5794 <sd_mmc_wait_end_of_read_blocks+0x80>)
    5722:	4798      	blx	r3
    5724:	0003      	movs	r3, r0
    5726:	001a      	movs	r2, r3
    5728:	2301      	movs	r3, #1
    572a:	4053      	eors	r3, r2
    572c:	b2db      	uxtb	r3, r3
    572e:	2b00      	cmp	r3, #0
    5730:	d001      	beq.n	5736 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    5732:	2305      	movs	r3, #5
    5734:	e029      	b.n	578a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    5736:	1dfb      	adds	r3, r7, #7
    5738:	781b      	ldrb	r3, [r3, #0]
    573a:	2b00      	cmp	r3, #0
    573c:	d003      	beq.n	5746 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    573e:	4b16      	ldr	r3, [pc, #88]	; (5798 <sd_mmc_wait_end_of_read_blocks+0x84>)
    5740:	2200      	movs	r2, #0
    5742:	801a      	strh	r2, [r3, #0]
    5744:	e005      	b.n	5752 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    5746:	4b14      	ldr	r3, [pc, #80]	; (5798 <sd_mmc_wait_end_of_read_blocks+0x84>)
    5748:	881b      	ldrh	r3, [r3, #0]
    574a:	2b00      	cmp	r3, #0
    574c:	d001      	beq.n	5752 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    574e:	2300      	movs	r3, #0
    5750:	e01b      	b.n	578a <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    5752:	4b12      	ldr	r3, [pc, #72]	; (579c <sd_mmc_wait_end_of_read_blocks+0x88>)
    5754:	881b      	ldrh	r3, [r3, #0]
    5756:	2b01      	cmp	r3, #1
    5758:	d103      	bne.n	5762 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    575a:	4b11      	ldr	r3, [pc, #68]	; (57a0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    575c:	4798      	blx	r3
		return SD_MMC_OK;
    575e:	2300      	movs	r3, #0
    5760:	e013      	b.n	578a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    5762:	4b10      	ldr	r3, [pc, #64]	; (57a4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    5764:	2100      	movs	r1, #0
    5766:	0018      	movs	r0, r3
    5768:	4b0f      	ldr	r3, [pc, #60]	; (57a8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    576a:	4798      	blx	r3
    576c:	0003      	movs	r3, r0
    576e:	001a      	movs	r2, r3
    5770:	2301      	movs	r3, #1
    5772:	4053      	eors	r3, r2
    5774:	b2db      	uxtb	r3, r3
    5776:	2b00      	cmp	r3, #0
    5778:	d004      	beq.n	5784 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    577a:	4b0a      	ldr	r3, [pc, #40]	; (57a4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    577c:	2100      	movs	r1, #0
    577e:	0018      	movs	r0, r3
    5780:	4b09      	ldr	r3, [pc, #36]	; (57a8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    5782:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    5784:	4b06      	ldr	r3, [pc, #24]	; (57a0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    5786:	4798      	blx	r3
	return SD_MMC_OK;
    5788:	2300      	movs	r3, #0
}
    578a:	0018      	movs	r0, r3
    578c:	46bd      	mov	sp, r7
    578e:	b002      	add	sp, #8
    5790:	bd80      	pop	{r7, pc}
    5792:	46c0      	nop			; (mov r8, r8)
    5794:	000064c1 	.word	0x000064c1
    5798:	20000d0a 	.word	0x20000d0a
    579c:	20000d08 	.word	0x20000d08
    57a0:	00005171 	.word	0x00005171
    57a4:	0000310c 	.word	0x0000310c
    57a8:	00006125 	.word	0x00006125

000057ac <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    57ac:	b590      	push	{r4, r7, lr}
    57ae:	b089      	sub	sp, #36	; 0x24
    57b0:	af02      	add	r7, sp, #8
    57b2:	6039      	str	r1, [r7, #0]
    57b4:	0011      	movs	r1, r2
    57b6:	1dfb      	adds	r3, r7, #7
    57b8:	1c02      	adds	r2, r0, #0
    57ba:	701a      	strb	r2, [r3, #0]
    57bc:	1d3b      	adds	r3, r7, #4
    57be:	1c0a      	adds	r2, r1, #0
    57c0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    57c2:	230f      	movs	r3, #15
    57c4:	18fc      	adds	r4, r7, r3
    57c6:	1dfb      	adds	r3, r7, #7
    57c8:	781b      	ldrb	r3, [r3, #0]
    57ca:	0018      	movs	r0, r3
    57cc:	4b28      	ldr	r3, [pc, #160]	; (5870 <sd_mmc_init_write_blocks+0xc4>)
    57ce:	4798      	blx	r3
    57d0:	0003      	movs	r3, r0
    57d2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    57d4:	230f      	movs	r3, #15
    57d6:	18fb      	adds	r3, r7, r3
    57d8:	781b      	ldrb	r3, [r3, #0]
    57da:	2b00      	cmp	r3, #0
    57dc:	d003      	beq.n	57e6 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    57de:	230f      	movs	r3, #15
    57e0:	18fb      	adds	r3, r7, r3
    57e2:	781b      	ldrb	r3, [r3, #0]
    57e4:	e03f      	b.n	5866 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    57e6:	1dfb      	adds	r3, r7, #7
    57e8:	781b      	ldrb	r3, [r3, #0]
    57ea:	0018      	movs	r0, r3
    57ec:	4b21      	ldr	r3, [pc, #132]	; (5874 <sd_mmc_init_write_blocks+0xc8>)
    57ee:	4798      	blx	r3
    57f0:	1e03      	subs	r3, r0, #0
    57f2:	d003      	beq.n	57fc <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    57f4:	4b20      	ldr	r3, [pc, #128]	; (5878 <sd_mmc_init_write_blocks+0xcc>)
    57f6:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    57f8:	2307      	movs	r3, #7
    57fa:	e034      	b.n	5866 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    57fc:	1d3b      	adds	r3, r7, #4
    57fe:	881b      	ldrh	r3, [r3, #0]
    5800:	2b01      	cmp	r3, #1
    5802:	d902      	bls.n	580a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    5804:	4b1d      	ldr	r3, [pc, #116]	; (587c <sd_mmc_init_write_blocks+0xd0>)
    5806:	617b      	str	r3, [r7, #20]
    5808:	e001      	b.n	580e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    580a:	4b1d      	ldr	r3, [pc, #116]	; (5880 <sd_mmc_init_write_blocks+0xd4>)
    580c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    580e:	4b1d      	ldr	r3, [pc, #116]	; (5884 <sd_mmc_init_write_blocks+0xd8>)
    5810:	681b      	ldr	r3, [r3, #0]
    5812:	7adb      	ldrb	r3, [r3, #11]
    5814:	001a      	movs	r2, r3
    5816:	2308      	movs	r3, #8
    5818:	4013      	ands	r3, r2
    581a:	d002      	beq.n	5822 <sd_mmc_init_write_blocks+0x76>
		arg = start;
    581c:	683b      	ldr	r3, [r7, #0]
    581e:	613b      	str	r3, [r7, #16]
    5820:	e002      	b.n	5828 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    5822:	683b      	ldr	r3, [r7, #0]
    5824:	025b      	lsls	r3, r3, #9
    5826:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    5828:	1d3b      	adds	r3, r7, #4
    582a:	881c      	ldrh	r4, [r3, #0]
    582c:	2380      	movs	r3, #128	; 0x80
    582e:	009a      	lsls	r2, r3, #2
    5830:	6939      	ldr	r1, [r7, #16]
    5832:	6978      	ldr	r0, [r7, #20]
    5834:	2301      	movs	r3, #1
    5836:	9300      	str	r3, [sp, #0]
    5838:	0023      	movs	r3, r4
    583a:	4c13      	ldr	r4, [pc, #76]	; (5888 <sd_mmc_init_write_blocks+0xdc>)
    583c:	47a0      	blx	r4
    583e:	0003      	movs	r3, r0
    5840:	001a      	movs	r2, r3
    5842:	2301      	movs	r3, #1
    5844:	4053      	eors	r3, r2
    5846:	b2db      	uxtb	r3, r3
    5848:	2b00      	cmp	r3, #0
    584a:	d003      	beq.n	5854 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    584c:	4b0a      	ldr	r3, [pc, #40]	; (5878 <sd_mmc_init_write_blocks+0xcc>)
    584e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5850:	2305      	movs	r3, #5
    5852:	e008      	b.n	5866 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    5854:	4b0d      	ldr	r3, [pc, #52]	; (588c <sd_mmc_init_write_blocks+0xe0>)
    5856:	1d3a      	adds	r2, r7, #4
    5858:	8812      	ldrh	r2, [r2, #0]
    585a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    585c:	4b0c      	ldr	r3, [pc, #48]	; (5890 <sd_mmc_init_write_blocks+0xe4>)
    585e:	1d3a      	adds	r2, r7, #4
    5860:	8812      	ldrh	r2, [r2, #0]
    5862:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    5864:	2300      	movs	r3, #0
}
    5866:	0018      	movs	r0, r3
    5868:	46bd      	mov	sp, r7
    586a:	b007      	add	sp, #28
    586c:	bd90      	pop	{r4, r7, pc}
    586e:	46c0      	nop			; (mov r8, r8)
    5870:	00005075 	.word	0x00005075
    5874:	000055b9 	.word	0x000055b9
    5878:	00005171 	.word	0x00005171
    587c:	00109119 	.word	0x00109119
    5880:	00089118 	.word	0x00089118
    5884:	20000d04 	.word	0x20000d04
    5888:	0000614d 	.word	0x0000614d
    588c:	20000d0a 	.word	0x20000d0a
    5890:	20000d08 	.word	0x20000d08

00005894 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    5894:	b580      	push	{r7, lr}
    5896:	b082      	sub	sp, #8
    5898:	af00      	add	r7, sp, #0
    589a:	6078      	str	r0, [r7, #4]
    589c:	000a      	movs	r2, r1
    589e:	1cbb      	adds	r3, r7, #2
    58a0:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    58a2:	1cbb      	adds	r3, r7, #2
    58a4:	881a      	ldrh	r2, [r3, #0]
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	0011      	movs	r1, r2
    58aa:	0018      	movs	r0, r3
    58ac:	4b0d      	ldr	r3, [pc, #52]	; (58e4 <sd_mmc_start_write_blocks+0x50>)
    58ae:	4798      	blx	r3
    58b0:	0003      	movs	r3, r0
    58b2:	001a      	movs	r2, r3
    58b4:	2301      	movs	r3, #1
    58b6:	4053      	eors	r3, r2
    58b8:	b2db      	uxtb	r3, r3
    58ba:	2b00      	cmp	r3, #0
    58bc:	d004      	beq.n	58c8 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    58be:	4b0a      	ldr	r3, [pc, #40]	; (58e8 <sd_mmc_start_write_blocks+0x54>)
    58c0:	2200      	movs	r2, #0
    58c2:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    58c4:	2305      	movs	r3, #5
    58c6:	e008      	b.n	58da <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    58c8:	4b07      	ldr	r3, [pc, #28]	; (58e8 <sd_mmc_start_write_blocks+0x54>)
    58ca:	881a      	ldrh	r2, [r3, #0]
    58cc:	1cbb      	adds	r3, r7, #2
    58ce:	881b      	ldrh	r3, [r3, #0]
    58d0:	1ad3      	subs	r3, r2, r3
    58d2:	b29a      	uxth	r2, r3
    58d4:	4b04      	ldr	r3, [pc, #16]	; (58e8 <sd_mmc_start_write_blocks+0x54>)
    58d6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    58d8:	2300      	movs	r3, #0
}
    58da:	0018      	movs	r0, r3
    58dc:	46bd      	mov	sp, r7
    58de:	b002      	add	sp, #8
    58e0:	bd80      	pop	{r7, pc}
    58e2:	46c0      	nop			; (mov r8, r8)
    58e4:	000064cd 	.word	0x000064cd
    58e8:	20000d0a 	.word	0x20000d0a

000058ec <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    58ec:	b580      	push	{r7, lr}
    58ee:	b082      	sub	sp, #8
    58f0:	af00      	add	r7, sp, #0
    58f2:	0002      	movs	r2, r0
    58f4:	1dfb      	adds	r3, r7, #7
    58f6:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    58f8:	4b13      	ldr	r3, [pc, #76]	; (5948 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    58fa:	4798      	blx	r3
    58fc:	0003      	movs	r3, r0
    58fe:	001a      	movs	r2, r3
    5900:	2301      	movs	r3, #1
    5902:	4053      	eors	r3, r2
    5904:	b2db      	uxtb	r3, r3
    5906:	2b00      	cmp	r3, #0
    5908:	d001      	beq.n	590e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    590a:	2305      	movs	r3, #5
    590c:	e018      	b.n	5940 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    590e:	1dfb      	adds	r3, r7, #7
    5910:	781b      	ldrb	r3, [r3, #0]
    5912:	2b00      	cmp	r3, #0
    5914:	d003      	beq.n	591e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    5916:	4b0d      	ldr	r3, [pc, #52]	; (594c <sd_mmc_wait_end_of_write_blocks+0x60>)
    5918:	2200      	movs	r2, #0
    591a:	801a      	strh	r2, [r3, #0]
    591c:	e005      	b.n	592a <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    591e:	4b0b      	ldr	r3, [pc, #44]	; (594c <sd_mmc_wait_end_of_write_blocks+0x60>)
    5920:	881b      	ldrh	r3, [r3, #0]
    5922:	2b00      	cmp	r3, #0
    5924:	d001      	beq.n	592a <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    5926:	2300      	movs	r3, #0
    5928:	e00a      	b.n	5940 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    592a:	4b09      	ldr	r3, [pc, #36]	; (5950 <sd_mmc_wait_end_of_write_blocks+0x64>)
    592c:	881b      	ldrh	r3, [r3, #0]
    592e:	2b01      	cmp	r3, #1
    5930:	d103      	bne.n	593a <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    5932:	4b08      	ldr	r3, [pc, #32]	; (5954 <sd_mmc_wait_end_of_write_blocks+0x68>)
    5934:	4798      	blx	r3
		return SD_MMC_OK;
    5936:	2300      	movs	r3, #0
    5938:	e002      	b.n	5940 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    593a:	4b06      	ldr	r3, [pc, #24]	; (5954 <sd_mmc_wait_end_of_write_blocks+0x68>)
    593c:	4798      	blx	r3
	return SD_MMC_OK;
    593e:	2300      	movs	r3, #0
}
    5940:	0018      	movs	r0, r3
    5942:	46bd      	mov	sp, r7
    5944:	b002      	add	sp, #8
    5946:	bd80      	pop	{r7, pc}
    5948:	0000658d 	.word	0x0000658d
    594c:	20000d0a 	.word	0x20000d0a
    5950:	20000d08 	.word	0x20000d08
    5954:	00005171 	.word	0x00005171

00005958 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5958:	b580      	push	{r7, lr}
    595a:	b084      	sub	sp, #16
    595c:	af00      	add	r7, sp, #0
    595e:	0002      	movs	r2, r0
    5960:	1dfb      	adds	r3, r7, #7
    5962:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5964:	230f      	movs	r3, #15
    5966:	18fb      	adds	r3, r7, r3
    5968:	1dfa      	adds	r2, r7, #7
    596a:	7812      	ldrb	r2, [r2, #0]
    596c:	09d2      	lsrs	r2, r2, #7
    596e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5970:	230e      	movs	r3, #14
    5972:	18fb      	adds	r3, r7, r3
    5974:	1dfa      	adds	r2, r7, #7
    5976:	7812      	ldrb	r2, [r2, #0]
    5978:	0952      	lsrs	r2, r2, #5
    597a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    597c:	4b0d      	ldr	r3, [pc, #52]	; (59b4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    597e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5980:	230f      	movs	r3, #15
    5982:	18fb      	adds	r3, r7, r3
    5984:	781b      	ldrb	r3, [r3, #0]
    5986:	2b00      	cmp	r3, #0
    5988:	d10f      	bne.n	59aa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    598a:	230f      	movs	r3, #15
    598c:	18fb      	adds	r3, r7, r3
    598e:	781b      	ldrb	r3, [r3, #0]
    5990:	009b      	lsls	r3, r3, #2
    5992:	2210      	movs	r2, #16
    5994:	4694      	mov	ip, r2
    5996:	44bc      	add	ip, r7
    5998:	4463      	add	r3, ip
    599a:	3b08      	subs	r3, #8
    599c:	681a      	ldr	r2, [r3, #0]
    599e:	230e      	movs	r3, #14
    59a0:	18fb      	adds	r3, r7, r3
    59a2:	781b      	ldrb	r3, [r3, #0]
    59a4:	01db      	lsls	r3, r3, #7
    59a6:	18d3      	adds	r3, r2, r3
    59a8:	e000      	b.n	59ac <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    59aa:	2300      	movs	r3, #0
	}
}
    59ac:	0018      	movs	r0, r3
    59ae:	46bd      	mov	sp, r7
    59b0:	b004      	add	sp, #16
    59b2:	bd80      	pop	{r7, pc}
    59b4:	40002800 	.word	0x40002800

000059b8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    59b8:	b580      	push	{r7, lr}
    59ba:	b082      	sub	sp, #8
    59bc:	af00      	add	r7, sp, #0
    59be:	0002      	movs	r2, r0
    59c0:	1dfb      	adds	r3, r7, #7
    59c2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    59c4:	1dfb      	adds	r3, r7, #7
    59c6:	781b      	ldrb	r3, [r3, #0]
    59c8:	0018      	movs	r0, r3
    59ca:	4b03      	ldr	r3, [pc, #12]	; (59d8 <port_get_group_from_gpio_pin+0x20>)
    59cc:	4798      	blx	r3
    59ce:	0003      	movs	r3, r0
}
    59d0:	0018      	movs	r0, r3
    59d2:	46bd      	mov	sp, r7
    59d4:	b002      	add	sp, #8
    59d6:	bd80      	pop	{r7, pc}
    59d8:	00005959 	.word	0x00005959

000059dc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    59dc:	b580      	push	{r7, lr}
    59de:	b082      	sub	sp, #8
    59e0:	af00      	add	r7, sp, #0
    59e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    59e4:	687b      	ldr	r3, [r7, #4]
    59e6:	2200      	movs	r2, #0
    59e8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    59ea:	687b      	ldr	r3, [r7, #4]
    59ec:	2201      	movs	r2, #1
    59ee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	2200      	movs	r2, #0
    59f4:	709a      	strb	r2, [r3, #2]
}
    59f6:	46c0      	nop			; (mov r8, r8)
    59f8:	46bd      	mov	sp, r7
    59fa:	b002      	add	sp, #8
    59fc:	bd80      	pop	{r7, pc}
	...

00005a00 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    5a00:	b580      	push	{r7, lr}
    5a02:	b084      	sub	sp, #16
    5a04:	af00      	add	r7, sp, #0
    5a06:	0002      	movs	r2, r0
    5a08:	1dfb      	adds	r3, r7, #7
    5a0a:	701a      	strb	r2, [r3, #0]
    5a0c:	1dbb      	adds	r3, r7, #6
    5a0e:	1c0a      	adds	r2, r1, #0
    5a10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5a12:	1dfb      	adds	r3, r7, #7
    5a14:	781b      	ldrb	r3, [r3, #0]
    5a16:	0018      	movs	r0, r3
    5a18:	4b0d      	ldr	r3, [pc, #52]	; (5a50 <port_pin_set_output_level+0x50>)
    5a1a:	4798      	blx	r3
    5a1c:	0003      	movs	r3, r0
    5a1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a20:	1dfb      	adds	r3, r7, #7
    5a22:	781b      	ldrb	r3, [r3, #0]
    5a24:	221f      	movs	r2, #31
    5a26:	4013      	ands	r3, r2
    5a28:	2201      	movs	r2, #1
    5a2a:	409a      	lsls	r2, r3
    5a2c:	0013      	movs	r3, r2
    5a2e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    5a30:	1dbb      	adds	r3, r7, #6
    5a32:	781b      	ldrb	r3, [r3, #0]
    5a34:	2b00      	cmp	r3, #0
    5a36:	d003      	beq.n	5a40 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    5a38:	68fb      	ldr	r3, [r7, #12]
    5a3a:	68ba      	ldr	r2, [r7, #8]
    5a3c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    5a3e:	e002      	b.n	5a46 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    5a40:	68fb      	ldr	r3, [r7, #12]
    5a42:	68ba      	ldr	r2, [r7, #8]
    5a44:	615a      	str	r2, [r3, #20]
}
    5a46:	46c0      	nop			; (mov r8, r8)
    5a48:	46bd      	mov	sp, r7
    5a4a:	b004      	add	sp, #16
    5a4c:	bd80      	pop	{r7, pc}
    5a4e:	46c0      	nop			; (mov r8, r8)
    5a50:	000059b9 	.word	0x000059b9

00005a54 <system_interrupt_enable>:
{
    5a54:	b580      	push	{r7, lr}
    5a56:	b082      	sub	sp, #8
    5a58:	af00      	add	r7, sp, #0
    5a5a:	0002      	movs	r2, r0
    5a5c:	1dfb      	adds	r3, r7, #7
    5a5e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5a60:	4b06      	ldr	r3, [pc, #24]	; (5a7c <system_interrupt_enable+0x28>)
    5a62:	1dfa      	adds	r2, r7, #7
    5a64:	7812      	ldrb	r2, [r2, #0]
    5a66:	0011      	movs	r1, r2
    5a68:	221f      	movs	r2, #31
    5a6a:	400a      	ands	r2, r1
    5a6c:	2101      	movs	r1, #1
    5a6e:	4091      	lsls	r1, r2
    5a70:	000a      	movs	r2, r1
    5a72:	601a      	str	r2, [r3, #0]
}
    5a74:	46c0      	nop			; (mov r8, r8)
    5a76:	46bd      	mov	sp, r7
    5a78:	b002      	add	sp, #8
    5a7a:	bd80      	pop	{r7, pc}
    5a7c:	e000e100 	.word	0xe000e100

00005a80 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    5a80:	b580      	push	{r7, lr}
    5a82:	b084      	sub	sp, #16
    5a84:	af00      	add	r7, sp, #0
    5a86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	681b      	ldr	r3, [r3, #0]
    5a8c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    5a8e:	68fb      	ldr	r3, [r7, #12]
    5a90:	69db      	ldr	r3, [r3, #28]
    5a92:	1e5a      	subs	r2, r3, #1
    5a94:	4193      	sbcs	r3, r2
    5a96:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    5a98:	0018      	movs	r0, r3
    5a9a:	46bd      	mov	sp, r7
    5a9c:	b004      	add	sp, #16
    5a9e:	bd80      	pop	{r7, pc}

00005aa0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    5aa0:	b580      	push	{r7, lr}
    5aa2:	b082      	sub	sp, #8
    5aa4:	af00      	add	r7, sp, #0
    5aa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	2201      	movs	r2, #1
    5aac:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5aae:	687b      	ldr	r3, [r7, #4]
    5ab0:	2200      	movs	r2, #0
    5ab2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5ab4:	687b      	ldr	r3, [r7, #4]
    5ab6:	2200      	movs	r2, #0
    5ab8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    5aba:	687b      	ldr	r3, [r7, #4]
    5abc:	22c0      	movs	r2, #192	; 0xc0
    5abe:	0392      	lsls	r2, r2, #14
    5ac0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	2200      	movs	r2, #0
    5ac6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	2200      	movs	r2, #0
    5acc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	2201      	movs	r2, #1
    5ad2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    5ad4:	687b      	ldr	r3, [r7, #4]
    5ad6:	2201      	movs	r2, #1
    5ad8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    5ada:	687b      	ldr	r3, [r7, #4]
    5adc:	2200      	movs	r2, #0
    5ade:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    5ae0:	687b      	ldr	r3, [r7, #4]
    5ae2:	2224      	movs	r2, #36	; 0x24
    5ae4:	2100      	movs	r1, #0
    5ae6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5ae8:	687b      	ldr	r3, [r7, #4]
    5aea:	3318      	adds	r3, #24
    5aec:	220c      	movs	r2, #12
    5aee:	2100      	movs	r1, #0
    5af0:	0018      	movs	r0, r3
    5af2:	4b0a      	ldr	r3, [pc, #40]	; (5b1c <spi_get_config_defaults+0x7c>)
    5af4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    5af6:	687b      	ldr	r3, [r7, #4]
    5af8:	4a09      	ldr	r2, [pc, #36]	; (5b20 <spi_get_config_defaults+0x80>)
    5afa:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	2200      	movs	r2, #0
    5b00:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    5b02:	687b      	ldr	r3, [r7, #4]
    5b04:	2200      	movs	r2, #0
    5b06:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    5b08:	687b      	ldr	r3, [r7, #4]
    5b0a:	2200      	movs	r2, #0
    5b0c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	2200      	movs	r2, #0
    5b12:	635a      	str	r2, [r3, #52]	; 0x34

};
    5b14:	46c0      	nop			; (mov r8, r8)
    5b16:	46bd      	mov	sp, r7
    5b18:	b002      	add	sp, #8
    5b1a:	bd80      	pop	{r7, pc}
    5b1c:	00023c9d 	.word	0x00023c9d
    5b20:	000186a0 	.word	0x000186a0

00005b24 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    5b24:	b580      	push	{r7, lr}
    5b26:	b082      	sub	sp, #8
    5b28:	af00      	add	r7, sp, #0
    5b2a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    5b2c:	687b      	ldr	r3, [r7, #4]
    5b2e:	220a      	movs	r2, #10
    5b30:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    5b32:	687b      	ldr	r3, [r7, #4]
    5b34:	2200      	movs	r2, #0
    5b36:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    5b38:	687b      	ldr	r3, [r7, #4]
    5b3a:	2200      	movs	r2, #0
    5b3c:	709a      	strb	r2, [r3, #2]
}
    5b3e:	46c0      	nop			; (mov r8, r8)
    5b40:	46bd      	mov	sp, r7
    5b42:	b002      	add	sp, #8
    5b44:	bd80      	pop	{r7, pc}
	...

00005b48 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    5b48:	b580      	push	{r7, lr}
    5b4a:	b084      	sub	sp, #16
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	6078      	str	r0, [r7, #4]
    5b50:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    5b52:	683b      	ldr	r3, [r7, #0]
    5b54:	781a      	ldrb	r2, [r3, #0]
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    5b5a:	683b      	ldr	r3, [r7, #0]
    5b5c:	785a      	ldrb	r2, [r3, #1]
    5b5e:	687b      	ldr	r3, [r7, #4]
    5b60:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    5b62:	683b      	ldr	r3, [r7, #0]
    5b64:	789a      	ldrb	r2, [r3, #2]
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    5b6a:	230c      	movs	r3, #12
    5b6c:	18fb      	adds	r3, r7, r3
    5b6e:	0018      	movs	r0, r3
    5b70:	4b0b      	ldr	r3, [pc, #44]	; (5ba0 <spi_attach_slave+0x58>)
    5b72:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5b74:	230c      	movs	r3, #12
    5b76:	18fb      	adds	r3, r7, r3
    5b78:	2201      	movs	r2, #1
    5b7a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	781b      	ldrb	r3, [r3, #0]
    5b80:	220c      	movs	r2, #12
    5b82:	18ba      	adds	r2, r7, r2
    5b84:	0011      	movs	r1, r2
    5b86:	0018      	movs	r0, r3
    5b88:	4b06      	ldr	r3, [pc, #24]	; (5ba4 <spi_attach_slave+0x5c>)
    5b8a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5b8c:	687b      	ldr	r3, [r7, #4]
    5b8e:	781b      	ldrb	r3, [r3, #0]
    5b90:	2101      	movs	r1, #1
    5b92:	0018      	movs	r0, r3
    5b94:	4b04      	ldr	r3, [pc, #16]	; (5ba8 <spi_attach_slave+0x60>)
    5b96:	4798      	blx	r3
}
    5b98:	46c0      	nop			; (mov r8, r8)
    5b9a:	46bd      	mov	sp, r7
    5b9c:	b004      	add	sp, #16
    5b9e:	bd80      	pop	{r7, pc}
    5ba0:	000059dd 	.word	0x000059dd
    5ba4:	0001820d 	.word	0x0001820d
    5ba8:	00005a01 	.word	0x00005a01

00005bac <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    5bac:	b580      	push	{r7, lr}
    5bae:	b084      	sub	sp, #16
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5bb4:	687b      	ldr	r3, [r7, #4]
    5bb6:	681b      	ldr	r3, [r3, #0]
    5bb8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5bba:	687b      	ldr	r3, [r7, #4]
    5bbc:	681b      	ldr	r3, [r3, #0]
    5bbe:	0018      	movs	r0, r3
    5bc0:	4b0b      	ldr	r3, [pc, #44]	; (5bf0 <spi_enable+0x44>)
    5bc2:	4798      	blx	r3
    5bc4:	0003      	movs	r3, r0
    5bc6:	0018      	movs	r0, r3
    5bc8:	4b0a      	ldr	r3, [pc, #40]	; (5bf4 <spi_enable+0x48>)
    5bca:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    5bcc:	46c0      	nop			; (mov r8, r8)
    5bce:	687b      	ldr	r3, [r7, #4]
    5bd0:	0018      	movs	r0, r3
    5bd2:	4b09      	ldr	r3, [pc, #36]	; (5bf8 <spi_enable+0x4c>)
    5bd4:	4798      	blx	r3
    5bd6:	1e03      	subs	r3, r0, #0
    5bd8:	d1f9      	bne.n	5bce <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	681b      	ldr	r3, [r3, #0]
    5bde:	2202      	movs	r2, #2
    5be0:	431a      	orrs	r2, r3
    5be2:	68fb      	ldr	r3, [r7, #12]
    5be4:	601a      	str	r2, [r3, #0]
}
    5be6:	46c0      	nop			; (mov r8, r8)
    5be8:	46bd      	mov	sp, r7
    5bea:	b004      	add	sp, #16
    5bec:	bd80      	pop	{r7, pc}
    5bee:	46c0      	nop			; (mov r8, r8)
    5bf0:	00008175 	.word	0x00008175
    5bf4:	00005a55 	.word	0x00005a55
    5bf8:	00005a81 	.word	0x00005a81

00005bfc <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    5bfc:	b580      	push	{r7, lr}
    5bfe:	b084      	sub	sp, #16
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
    5c04:	000a      	movs	r2, r1
    5c06:	1cfb      	adds	r3, r7, #3
    5c08:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    5c0a:	230f      	movs	r3, #15
    5c0c:	18fb      	adds	r3, r7, r3
    5c0e:	2200      	movs	r2, #0
    5c10:	701a      	strb	r2, [r3, #0]
	while (size--) {
    5c12:	e038      	b.n	5c86 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    5c14:	687b      	ldr	r3, [r7, #4]
    5c16:	1c5a      	adds	r2, r3, #1
    5c18:	607a      	str	r2, [r7, #4]
    5c1a:	220e      	movs	r2, #14
    5c1c:	18ba      	adds	r2, r7, r2
    5c1e:	781b      	ldrb	r3, [r3, #0]
    5c20:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    5c22:	230d      	movs	r3, #13
    5c24:	18fb      	adds	r3, r7, r3
    5c26:	2200      	movs	r2, #0
    5c28:	701a      	strb	r2, [r3, #0]
    5c2a:	e027      	b.n	5c7c <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    5c2c:	230f      	movs	r3, #15
    5c2e:	18fa      	adds	r2, r7, r3
    5c30:	230f      	movs	r3, #15
    5c32:	18fb      	adds	r3, r7, r3
    5c34:	781b      	ldrb	r3, [r3, #0]
    5c36:	18db      	adds	r3, r3, r3
    5c38:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    5c3a:	230e      	movs	r3, #14
    5c3c:	18fa      	adds	r2, r7, r3
    5c3e:	230f      	movs	r3, #15
    5c40:	18fb      	adds	r3, r7, r3
    5c42:	7812      	ldrb	r2, [r2, #0]
    5c44:	781b      	ldrb	r3, [r3, #0]
    5c46:	4053      	eors	r3, r2
    5c48:	b2db      	uxtb	r3, r3
    5c4a:	b25b      	sxtb	r3, r3
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	da07      	bge.n	5c60 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    5c50:	230f      	movs	r3, #15
    5c52:	18fb      	adds	r3, r7, r3
    5c54:	220f      	movs	r2, #15
    5c56:	18ba      	adds	r2, r7, r2
    5c58:	7812      	ldrb	r2, [r2, #0]
    5c5a:	2109      	movs	r1, #9
    5c5c:	404a      	eors	r2, r1
    5c5e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    5c60:	230e      	movs	r3, #14
    5c62:	18fa      	adds	r2, r7, r3
    5c64:	230e      	movs	r3, #14
    5c66:	18fb      	adds	r3, r7, r3
    5c68:	781b      	ldrb	r3, [r3, #0]
    5c6a:	18db      	adds	r3, r3, r3
    5c6c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    5c6e:	230d      	movs	r3, #13
    5c70:	18fb      	adds	r3, r7, r3
    5c72:	781a      	ldrb	r2, [r3, #0]
    5c74:	230d      	movs	r3, #13
    5c76:	18fb      	adds	r3, r7, r3
    5c78:	3201      	adds	r2, #1
    5c7a:	701a      	strb	r2, [r3, #0]
    5c7c:	230d      	movs	r3, #13
    5c7e:	18fb      	adds	r3, r7, r3
    5c80:	781b      	ldrb	r3, [r3, #0]
    5c82:	2b07      	cmp	r3, #7
    5c84:	d9d2      	bls.n	5c2c <sd_mmc_spi_crc7+0x30>
	while (size--) {
    5c86:	1cfb      	adds	r3, r7, #3
    5c88:	781b      	ldrb	r3, [r3, #0]
    5c8a:	1cfa      	adds	r2, r7, #3
    5c8c:	1e59      	subs	r1, r3, #1
    5c8e:	7011      	strb	r1, [r2, #0]
    5c90:	2b00      	cmp	r3, #0
    5c92:	d1bf      	bne.n	5c14 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    5c94:	230f      	movs	r3, #15
    5c96:	18fb      	adds	r3, r7, r3
    5c98:	781b      	ldrb	r3, [r3, #0]
    5c9a:	005b      	lsls	r3, r3, #1
    5c9c:	b25b      	sxtb	r3, r3
    5c9e:	2201      	movs	r2, #1
    5ca0:	4313      	orrs	r3, r2
    5ca2:	b25a      	sxtb	r2, r3
    5ca4:	230f      	movs	r3, #15
    5ca6:	18fb      	adds	r3, r7, r3
    5ca8:	701a      	strb	r2, [r3, #0]
	return crc;
    5caa:	230f      	movs	r3, #15
    5cac:	18fb      	adds	r3, r7, r3
    5cae:	781b      	ldrb	r3, [r3, #0]
}
    5cb0:	0018      	movs	r0, r3
    5cb2:	46bd      	mov	sp, r7
    5cb4:	b004      	add	sp, #16
    5cb6:	bd80      	pop	{r7, pc}

00005cb8 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    5cb8:	b590      	push	{r4, r7, lr}
    5cba:	b083      	sub	sp, #12
    5cbc:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    5cbe:	1c7b      	adds	r3, r7, #1
    5cc0:	22ff      	movs	r2, #255	; 0xff
    5cc2:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    5cc4:	1cbb      	adds	r3, r7, #2
    5cc6:	22ff      	movs	r2, #255	; 0xff
    5cc8:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */

	spi_read_buffer_wait(&spi_main, &line, 1,
    5cca:	1cbb      	adds	r3, r7, #2
    5ccc:	881b      	ldrh	r3, [r3, #0]
    5cce:	1c79      	adds	r1, r7, #1
    5cd0:	4811      	ldr	r0, [pc, #68]	; (5d18 <sd_mmc_spi_wait_busy+0x60>)
    5cd2:	2201      	movs	r2, #1
    5cd4:	4c11      	ldr	r4, [pc, #68]	; (5d1c <sd_mmc_spi_wait_busy+0x64>)
    5cd6:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    5cd8:	4b11      	ldr	r3, [pc, #68]	; (5d20 <sd_mmc_spi_wait_busy+0x68>)
    5cda:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&spi_main, &line, 1,
    5cdc:	1cbb      	adds	r3, r7, #2
    5cde:	881b      	ldrh	r3, [r3, #0]
    5ce0:	1c79      	adds	r1, r7, #1
    5ce2:	480d      	ldr	r0, [pc, #52]	; (5d18 <sd_mmc_spi_wait_busy+0x60>)
    5ce4:	2201      	movs	r2, #1
    5ce6:	4c0d      	ldr	r4, [pc, #52]	; (5d1c <sd_mmc_spi_wait_busy+0x64>)
    5ce8:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&spi_main, &line, 1,
    5cea:	1cbb      	adds	r3, r7, #2
    5cec:	881b      	ldrh	r3, [r3, #0]
    5cee:	1c79      	adds	r1, r7, #1
    5cf0:	4809      	ldr	r0, [pc, #36]	; (5d18 <sd_mmc_spi_wait_busy+0x60>)
    5cf2:	2201      	movs	r2, #1
    5cf4:	4c09      	ldr	r4, [pc, #36]	; (5d1c <sd_mmc_spi_wait_busy+0x64>)
    5cf6:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    5cf8:	687b      	ldr	r3, [r7, #4]
    5cfa:	1e5a      	subs	r2, r3, #1
    5cfc:	607a      	str	r2, [r7, #4]
    5cfe:	2b00      	cmp	r3, #0
    5d00:	d101      	bne.n	5d06 <sd_mmc_spi_wait_busy+0x4e>

			return false;
    5d02:	2300      	movs	r3, #0
    5d04:	e004      	b.n	5d10 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    5d06:	1c7b      	adds	r3, r7, #1
    5d08:	781b      	ldrb	r3, [r3, #0]
    5d0a:	2bff      	cmp	r3, #255	; 0xff
    5d0c:	d1ed      	bne.n	5cea <sd_mmc_spi_wait_busy+0x32>

	return true;
    5d0e:	2301      	movs	r3, #1
}
    5d10:	0018      	movs	r0, r3
    5d12:	46bd      	mov	sp, r7
    5d14:	b003      	add	sp, #12
    5d16:	bd90      	pop	{r4, r7, pc}
    5d18:	20001270 	.word	0x20001270
    5d1c:	00017169 	.word	0x00017169
    5d20:	00030d40 	.word	0x00030d40

00005d24 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    5d24:	b590      	push	{r4, r7, lr}
    5d26:	b083      	sub	sp, #12
    5d28:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    5d2a:	1cbb      	adds	r3, r7, #2
    5d2c:	22ff      	movs	r2, #255	; 0xff
    5d2e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    5d30:	1c7b      	adds	r3, r7, #1
    5d32:	2200      	movs	r2, #0
    5d34:	701a      	strb	r2, [r3, #0]
	i = 500000;
    5d36:	4b18      	ldr	r3, [pc, #96]	; (5d98 <sd_mmc_spi_start_read_block+0x74>)
    5d38:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    5d3a:	687b      	ldr	r3, [r7, #4]
    5d3c:	1e5a      	subs	r2, r3, #1
    5d3e:	607a      	str	r2, [r7, #4]
    5d40:	2b00      	cmp	r3, #0
    5d42:	d104      	bne.n	5d4e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    5d44:	4b15      	ldr	r3, [pc, #84]	; (5d9c <sd_mmc_spi_start_read_block+0x78>)
    5d46:	2204      	movs	r2, #4
    5d48:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    5d4a:	2300      	movs	r3, #0
    5d4c:	e020      	b.n	5d90 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&spi_main, &token, 1,
    5d4e:	1cbb      	adds	r3, r7, #2
    5d50:	881b      	ldrh	r3, [r3, #0]
    5d52:	1c79      	adds	r1, r7, #1
    5d54:	4812      	ldr	r0, [pc, #72]	; (5da0 <sd_mmc_spi_start_read_block+0x7c>)
    5d56:	2201      	movs	r2, #1
    5d58:	4c12      	ldr	r4, [pc, #72]	; (5da4 <sd_mmc_spi_start_read_block+0x80>)
    5d5a:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    5d5c:	1c7b      	adds	r3, r7, #1
    5d5e:	781b      	ldrb	r3, [r3, #0]
    5d60:	001a      	movs	r2, r3
    5d62:	23f0      	movs	r3, #240	; 0xf0
    5d64:	4013      	ands	r3, r2
    5d66:	d10e      	bne.n	5d86 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    5d68:	1c7b      	adds	r3, r7, #1
    5d6a:	781b      	ldrb	r3, [r3, #0]
    5d6c:	001a      	movs	r2, r3
    5d6e:	2307      	movs	r3, #7
    5d70:	4013      	ands	r3, r2
    5d72:	d003      	beq.n	5d7c <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    5d74:	4b09      	ldr	r3, [pc, #36]	; (5d9c <sd_mmc_spi_start_read_block+0x78>)
    5d76:	2207      	movs	r2, #7
    5d78:	701a      	strb	r2, [r3, #0]
    5d7a:	e002      	b.n	5d82 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    5d7c:	4b07      	ldr	r3, [pc, #28]	; (5d9c <sd_mmc_spi_start_read_block+0x78>)
    5d7e:	220b      	movs	r2, #11
    5d80:	701a      	strb	r2, [r3, #0]
			}
			return false;
    5d82:	2300      	movs	r3, #0
    5d84:	e004      	b.n	5d90 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    5d86:	1c7b      	adds	r3, r7, #1
    5d88:	781b      	ldrb	r3, [r3, #0]
    5d8a:	2bfe      	cmp	r3, #254	; 0xfe
    5d8c:	d1d5      	bne.n	5d3a <sd_mmc_spi_start_read_block+0x16>

	return true;
    5d8e:	2301      	movs	r3, #1
}
    5d90:	0018      	movs	r0, r3
    5d92:	46bd      	mov	sp, r7
    5d94:	b003      	add	sp, #12
    5d96:	bd90      	pop	{r4, r7, pc}
    5d98:	0007a120 	.word	0x0007a120
    5d9c:	20000d13 	.word	0x20000d13
    5da0:	20001270 	.word	0x20001270
    5da4:	00017169 	.word	0x00017169

00005da8 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    5da8:	b590      	push	{r4, r7, lr}
    5daa:	b083      	sub	sp, #12
    5dac:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    5dae:	1dbb      	adds	r3, r7, #6
    5db0:	22ff      	movs	r2, #255	; 0xff
    5db2:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&spi_main, crc, 2,
    5db4:	1dbb      	adds	r3, r7, #6
    5db6:	881b      	ldrh	r3, [r3, #0]
    5db8:	1d39      	adds	r1, r7, #4
    5dba:	4804      	ldr	r0, [pc, #16]	; (5dcc <sd_mmc_spi_stop_read_block+0x24>)
    5dbc:	2202      	movs	r2, #2
    5dbe:	4c04      	ldr	r4, [pc, #16]	; (5dd0 <sd_mmc_spi_stop_read_block+0x28>)
    5dc0:	47a0      	blx	r4
			dummy);
}
    5dc2:	46c0      	nop			; (mov r8, r8)
    5dc4:	46bd      	mov	sp, r7
    5dc6:	b003      	add	sp, #12
    5dc8:	bd90      	pop	{r4, r7, pc}
    5dca:	46c0      	nop			; (mov r8, r8)
    5dcc:	20001270 	.word	0x20001270
    5dd0:	00017169 	.word	0x00017169

00005dd4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    5dd4:	b580      	push	{r7, lr}
    5dd6:	b082      	sub	sp, #8
    5dd8:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    5dda:	1dfb      	adds	r3, r7, #7
    5ddc:	22ff      	movs	r2, #255	; 0xff
    5dde:	701a      	strb	r2, [r3, #0]

	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&spi_main,&dummy, 1);
    5de0:	1df9      	adds	r1, r7, #7
    5de2:	4b0d      	ldr	r3, [pc, #52]	; (5e18 <sd_mmc_spi_start_write_block+0x44>)
    5de4:	2201      	movs	r2, #1
    5de6:	0018      	movs	r0, r3
    5de8:	4b0c      	ldr	r3, [pc, #48]	; (5e1c <sd_mmc_spi_start_write_block+0x48>)
    5dea:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    5dec:	4b0c      	ldr	r3, [pc, #48]	; (5e20 <sd_mmc_spi_start_write_block+0x4c>)
    5dee:	881b      	ldrh	r3, [r3, #0]
    5df0:	2b01      	cmp	r3, #1
    5df2:	d103      	bne.n	5dfc <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    5df4:	1dbb      	adds	r3, r7, #6
    5df6:	22fe      	movs	r2, #254	; 0xfe
    5df8:	701a      	strb	r2, [r3, #0]
    5dfa:	e002      	b.n	5e02 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    5dfc:	1dbb      	adds	r3, r7, #6
    5dfe:	22fc      	movs	r2, #252	; 0xfc
    5e00:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&spi_main,&token, 1);
    5e02:	1db9      	adds	r1, r7, #6
    5e04:	4b04      	ldr	r3, [pc, #16]	; (5e18 <sd_mmc_spi_start_write_block+0x44>)
    5e06:	2201      	movs	r2, #1
    5e08:	0018      	movs	r0, r3
    5e0a:	4b04      	ldr	r3, [pc, #16]	; (5e1c <sd_mmc_spi_start_write_block+0x48>)
    5e0c:	4798      	blx	r3

}
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	46bd      	mov	sp, r7
    5e12:	b002      	add	sp, #8
    5e14:	bd80      	pop	{r7, pc}
    5e16:	46c0      	nop			; (mov r8, r8)
    5e18:	20001270 	.word	0x20001270
    5e1c:	00017415 	.word	0x00017415
    5e20:	20000d1e 	.word	0x20000d1e

00005e24 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    5e24:	b590      	push	{r4, r7, lr}
    5e26:	b083      	sub	sp, #12
    5e28:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    5e2a:	1dbb      	adds	r3, r7, #6
    5e2c:	22ff      	movs	r2, #255	; 0xff
    5e2e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    5e30:	1cbb      	adds	r3, r7, #2
    5e32:	2201      	movs	r2, #1
    5e34:	4252      	negs	r2, r2
    5e36:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&spi_main, (uint8_t *)&crc, 2);
    5e38:	1cb9      	adds	r1, r7, #2
    5e3a:	4b1b      	ldr	r3, [pc, #108]	; (5ea8 <sd_mmc_spi_stop_write_block+0x84>)
    5e3c:	2202      	movs	r2, #2
    5e3e:	0018      	movs	r0, r3
    5e40:	4b1a      	ldr	r3, [pc, #104]	; (5eac <sd_mmc_spi_stop_write_block+0x88>)
    5e42:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&spi_main, &resp, 1,
    5e44:	1dbb      	adds	r3, r7, #6
    5e46:	881b      	ldrh	r3, [r3, #0]
    5e48:	1d79      	adds	r1, r7, #5
    5e4a:	4817      	ldr	r0, [pc, #92]	; (5ea8 <sd_mmc_spi_stop_write_block+0x84>)
    5e4c:	2201      	movs	r2, #1
    5e4e:	4c18      	ldr	r4, [pc, #96]	; (5eb0 <sd_mmc_spi_stop_write_block+0x8c>)
    5e50:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    5e52:	1d7b      	adds	r3, r7, #5
    5e54:	781b      	ldrb	r3, [r3, #0]
    5e56:	001a      	movs	r2, r3
    5e58:	2310      	movs	r3, #16
    5e5a:	4013      	ands	r3, r2
    5e5c:	d105      	bne.n	5e6a <sd_mmc_spi_stop_write_block+0x46>
    5e5e:	1d7b      	adds	r3, r7, #5
    5e60:	781b      	ldrb	r3, [r3, #0]
    5e62:	001a      	movs	r2, r3
    5e64:	2301      	movs	r3, #1
    5e66:	4013      	ands	r3, r2
    5e68:	d104      	bne.n	5e74 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5e6a:	4b12      	ldr	r3, [pc, #72]	; (5eb4 <sd_mmc_spi_stop_write_block+0x90>)
    5e6c:	2201      	movs	r2, #1
    5e6e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    5e70:	2300      	movs	r3, #0
    5e72:	e014      	b.n	5e9e <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    5e74:	1d7b      	adds	r3, r7, #5
    5e76:	781b      	ldrb	r3, [r3, #0]
    5e78:	001a      	movs	r2, r3
    5e7a:	231e      	movs	r3, #30
    5e7c:	4013      	ands	r3, r2
    5e7e:	2b04      	cmp	r3, #4
    5e80:	d00b      	beq.n	5e9a <sd_mmc_spi_stop_write_block+0x76>
    5e82:	2b0a      	cmp	r3, #10
    5e84:	d104      	bne.n	5e90 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    5e86:	4b0b      	ldr	r3, [pc, #44]	; (5eb4 <sd_mmc_spi_stop_write_block+0x90>)
    5e88:	2208      	movs	r2, #8
    5e8a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    5e8c:	2300      	movs	r3, #0
    5e8e:	e006      	b.n	5e9e <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    5e90:	4b08      	ldr	r3, [pc, #32]	; (5eb4 <sd_mmc_spi_stop_write_block+0x90>)
    5e92:	220a      	movs	r2, #10
    5e94:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    5e96:	2300      	movs	r3, #0
    5e98:	e001      	b.n	5e9e <sd_mmc_spi_stop_write_block+0x7a>
		break;
    5e9a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    5e9c:	2301      	movs	r3, #1
}
    5e9e:	0018      	movs	r0, r3
    5ea0:	46bd      	mov	sp, r7
    5ea2:	b003      	add	sp, #12
    5ea4:	bd90      	pop	{r4, r7, pc}
    5ea6:	46c0      	nop			; (mov r8, r8)
    5ea8:	20001270 	.word	0x20001270
    5eac:	00017415 	.word	0x00017415
    5eb0:	00017169 	.word	0x00017169
    5eb4:	20000d13 	.word	0x20000d13

00005eb8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    5eb8:	b590      	push	{r4, r7, lr}
    5eba:	b083      	sub	sp, #12
    5ebc:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    5ebe:	4b1d      	ldr	r3, [pc, #116]	; (5f34 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    5ec0:	881b      	ldrh	r3, [r3, #0]
    5ec2:	2b01      	cmp	r3, #1
    5ec4:	d101      	bne.n	5eca <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    5ec6:	2301      	movs	r3, #1
    5ec8:	e030      	b.n	5f2c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    5eca:	4b1a      	ldr	r3, [pc, #104]	; (5f34 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    5ecc:	881b      	ldrh	r3, [r3, #0]
    5ece:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    5ed0:	4b19      	ldr	r3, [pc, #100]	; (5f38 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    5ed2:	681a      	ldr	r2, [r3, #0]
    5ed4:	4b19      	ldr	r3, [pc, #100]	; (5f3c <sd_mmc_spi_stop_multiwrite_block+0x84>)
    5ed6:	881b      	ldrh	r3, [r3, #0]
    5ed8:	0019      	movs	r1, r3
    5eda:	4b19      	ldr	r3, [pc, #100]	; (5f40 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    5edc:	0010      	movs	r0, r2
    5ede:	4798      	blx	r3
    5ee0:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    5ee2:	429c      	cmp	r4, r3
    5ee4:	d901      	bls.n	5eea <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    5ee6:	2301      	movs	r3, #1
    5ee8:	e020      	b.n	5f2c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    5eea:	1dfb      	adds	r3, r7, #7
    5eec:	22ff      	movs	r2, #255	; 0xff
    5eee:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&spi_main, &value, 1);
    5ef0:	1df9      	adds	r1, r7, #7
    5ef2:	4b14      	ldr	r3, [pc, #80]	; (5f44 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    5ef4:	2201      	movs	r2, #1
    5ef6:	0018      	movs	r0, r3
    5ef8:	4b13      	ldr	r3, [pc, #76]	; (5f48 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    5efa:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    5efc:	1dfb      	adds	r3, r7, #7
    5efe:	22fd      	movs	r2, #253	; 0xfd
    5f00:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&spi_main, &value, 1);
    5f02:	1df9      	adds	r1, r7, #7
    5f04:	4b0f      	ldr	r3, [pc, #60]	; (5f44 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    5f06:	2201      	movs	r2, #1
    5f08:	0018      	movs	r0, r3
    5f0a:	4b0f      	ldr	r3, [pc, #60]	; (5f48 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    5f0c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    5f0e:	4b0f      	ldr	r3, [pc, #60]	; (5f4c <sd_mmc_spi_stop_multiwrite_block+0x94>)
    5f10:	4798      	blx	r3
    5f12:	0003      	movs	r3, r0
    5f14:	001a      	movs	r2, r3
    5f16:	2301      	movs	r3, #1
    5f18:	4053      	eors	r3, r2
    5f1a:	b2db      	uxtb	r3, r3
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d004      	beq.n	5f2a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5f20:	4b0b      	ldr	r3, [pc, #44]	; (5f50 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    5f22:	2205      	movs	r2, #5
    5f24:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    5f26:	2300      	movs	r3, #0
    5f28:	e000      	b.n	5f2c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    5f2a:	2301      	movs	r3, #1
}
    5f2c:	0018      	movs	r0, r3
    5f2e:	46bd      	mov	sp, r7
    5f30:	b003      	add	sp, #12
    5f32:	bd90      	pop	{r4, r7, pc}
    5f34:	20000d1e 	.word	0x20000d1e
    5f38:	20000d18 	.word	0x20000d18
    5f3c:	20000d1c 	.word	0x20000d1c
    5f40:	00020bbd 	.word	0x00020bbd
    5f44:	20001270 	.word	0x20001270
    5f48:	00017415 	.word	0x00017415
    5f4c:	00005cb9 	.word	0x00005cb9
    5f50:	20000d13 	.word	0x20000d13

00005f54 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    5f54:	b580      	push	{r7, lr}
    5f56:	b08e      	sub	sp, #56	; 0x38
    5f58:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5f5a:	4b1d      	ldr	r3, [pc, #116]	; (5fd0 <sd_mmc_spi_init+0x7c>)
    5f5c:	2200      	movs	r2, #0
    5f5e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
#endif  //Added Kfausnight 11/24/2018

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    5f60:	003b      	movs	r3, r7
    5f62:	0018      	movs	r0, r3
    5f64:	4b1b      	ldr	r3, [pc, #108]	; (5fd4 <sd_mmc_spi_init+0x80>)
    5f66:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    5f68:	003b      	movs	r3, r7
    5f6a:	2280      	movs	r2, #128	; 0x80
    5f6c:	0252      	lsls	r2, r2, #9
    5f6e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    5f70:	003b      	movs	r3, r7
    5f72:	4a19      	ldr	r2, [pc, #100]	; (5fd8 <sd_mmc_spi_init+0x84>)
    5f74:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    5f76:	003b      	movs	r3, r7
    5f78:	2200      	movs	r2, #0
    5f7a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    5f7c:	003b      	movs	r3, r7
    5f7e:	4a17      	ldr	r2, [pc, #92]	; (5fdc <sd_mmc_spi_init+0x88>)
    5f80:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    5f82:	003b      	movs	r3, r7
    5f84:	4a16      	ldr	r2, [pc, #88]	; (5fe0 <sd_mmc_spi_init+0x8c>)
    5f86:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    5f88:	003b      	movs	r3, r7
    5f8a:	2224      	movs	r2, #36	; 0x24
    5f8c:	2100      	movs	r1, #0
    5f8e:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    5f90:	003b      	movs	r3, r7
    5f92:	4a14      	ldr	r2, [pc, #80]	; (5fe4 <sd_mmc_spi_init+0x90>)
    5f94:	619a      	str	r2, [r3, #24]

	spi_init(&spi_main, SD_MMC_SPI, &config);
    5f96:	003a      	movs	r2, r7
    5f98:	4913      	ldr	r1, [pc, #76]	; (5fe8 <sd_mmc_spi_init+0x94>)
    5f9a:	4b14      	ldr	r3, [pc, #80]	; (5fec <sd_mmc_spi_init+0x98>)
    5f9c:	0018      	movs	r0, r3
    5f9e:	4b14      	ldr	r3, [pc, #80]	; (5ff0 <sd_mmc_spi_init+0x9c>)
    5fa0:	4798      	blx	r3
	spi_enable(&spi_main);
    5fa2:	4b12      	ldr	r3, [pc, #72]	; (5fec <sd_mmc_spi_init+0x98>)
    5fa4:	0018      	movs	r0, r3
    5fa6:	4b13      	ldr	r3, [pc, #76]	; (5ff4 <sd_mmc_spi_init+0xa0>)
    5fa8:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    5faa:	4b13      	ldr	r3, [pc, #76]	; (5ff8 <sd_mmc_spi_init+0xa4>)
    5fac:	0018      	movs	r0, r3
    5fae:	4b13      	ldr	r3, [pc, #76]	; (5ffc <sd_mmc_spi_init+0xa8>)
    5fb0:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    5fb2:	4b13      	ldr	r3, [pc, #76]	; (6000 <sd_mmc_spi_init+0xac>)
    5fb4:	781a      	ldrb	r2, [r3, #0]
    5fb6:	4b10      	ldr	r3, [pc, #64]	; (5ff8 <sd_mmc_spi_init+0xa4>)
    5fb8:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    5fba:	4a0f      	ldr	r2, [pc, #60]	; (5ff8 <sd_mmc_spi_init+0xa4>)
    5fbc:	4b11      	ldr	r3, [pc, #68]	; (6004 <sd_mmc_spi_init+0xb0>)
    5fbe:	0011      	movs	r1, r2
    5fc0:	0018      	movs	r0, r3
    5fc2:	4b11      	ldr	r3, [pc, #68]	; (6008 <sd_mmc_spi_init+0xb4>)
    5fc4:	4798      	blx	r3
}
    5fc6:	46c0      	nop			; (mov r8, r8)
    5fc8:	46bd      	mov	sp, r7
    5fca:	b00e      	add	sp, #56	; 0x38
    5fcc:	bd80      	pop	{r7, pc}
    5fce:	46c0      	nop			; (mov r8, r8)
    5fd0:	20000d13 	.word	0x20000d13
    5fd4:	00005aa1 	.word	0x00005aa1
    5fd8:	00280003 	.word	0x00280003
    5fdc:	002a0003 	.word	0x002a0003
    5fe0:	002b0003 	.word	0x002b0003
    5fe4:	00061a80 	.word	0x00061a80
    5fe8:	42001000 	.word	0x42001000
    5fec:	20001270 	.word	0x20001270
    5ff0:	00016f9d 	.word	0x00016f9d
    5ff4:	00005bad 	.word	0x00005bad
    5ff8:	20000d10 	.word	0x20000d10
    5ffc:	00005b25 	.word	0x00005b25
    6000:	200000ac 	.word	0x200000ac
    6004:	20000d0c 	.word	0x20000d0c
    6008:	00005b49 	.word	0x00005b49

0000600c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    600c:	b590      	push	{r4, r7, lr}
    600e:	b083      	sub	sp, #12
    6010:	af00      	add	r7, sp, #0
    6012:	0004      	movs	r4, r0
    6014:	6039      	str	r1, [r7, #0]
    6016:	0010      	movs	r0, r2
    6018:	0019      	movs	r1, r3
    601a:	1dfb      	adds	r3, r7, #7
    601c:	1c22      	adds	r2, r4, #0
    601e:	701a      	strb	r2, [r3, #0]
    6020:	1dbb      	adds	r3, r7, #6
    6022:	1c02      	adds	r2, r0, #0
    6024:	701a      	strb	r2, [r3, #0]
    6026:	1d7b      	adds	r3, r7, #5
    6028:	1c0a      	adds	r2, r1, #0
    602a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    602c:	4b13      	ldr	r3, [pc, #76]	; (607c <sd_mmc_spi_select_device+0x70>)
    602e:	2200      	movs	r2, #0
    6030:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    6032:	683b      	ldr	r3, [r7, #0]
    6034:	4a12      	ldr	r2, [pc, #72]	; (6080 <sd_mmc_spi_select_device+0x74>)
    6036:	4293      	cmp	r3, r2
    6038:	d907      	bls.n	604a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    603a:	4b11      	ldr	r3, [pc, #68]	; (6080 <sd_mmc_spi_select_device+0x74>)
    603c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&spi_main, clock)) {
    603e:	e004      	b.n	604a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    6040:	683b      	ldr	r3, [r7, #0]
    6042:	08db      	lsrs	r3, r3, #3
    6044:	683a      	ldr	r2, [r7, #0]
    6046:	1ad3      	subs	r3, r2, r3
    6048:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&spi_main, clock)) {
    604a:	683a      	ldr	r2, [r7, #0]
    604c:	4b0d      	ldr	r3, [pc, #52]	; (6084 <sd_mmc_spi_select_device+0x78>)
    604e:	0011      	movs	r1, r2
    6050:	0018      	movs	r0, r3
    6052:	4b0d      	ldr	r3, [pc, #52]	; (6088 <sd_mmc_spi_select_device+0x7c>)
    6054:	4798      	blx	r3
    6056:	0003      	movs	r3, r0
    6058:	2b17      	cmp	r3, #23
    605a:	d0f1      	beq.n	6040 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&spi_main, &sd_mmc_spi_devices[slot], true);
    605c:	1dfb      	adds	r3, r7, #7
    605e:	781a      	ldrb	r2, [r3, #0]
    6060:	0013      	movs	r3, r2
    6062:	005b      	lsls	r3, r3, #1
    6064:	189b      	adds	r3, r3, r2
    6066:	4a09      	ldr	r2, [pc, #36]	; (608c <sd_mmc_spi_select_device+0x80>)
    6068:	1899      	adds	r1, r3, r2
    606a:	4b06      	ldr	r3, [pc, #24]	; (6084 <sd_mmc_spi_select_device+0x78>)
    606c:	2201      	movs	r2, #1
    606e:	0018      	movs	r0, r3
    6070:	4b07      	ldr	r3, [pc, #28]	; (6090 <sd_mmc_spi_select_device+0x84>)
    6072:	4798      	blx	r3
}
    6074:	46c0      	nop			; (mov r8, r8)
    6076:	46bd      	mov	sp, r7
    6078:	b003      	add	sp, #12
    607a:	bd90      	pop	{r4, r7, pc}
    607c:	20000d13 	.word	0x20000d13
    6080:	003d0900 	.word	0x003d0900
    6084:	20001270 	.word	0x20001270
    6088:	00016c69 	.word	0x00016c69
    608c:	20000d0c 	.word	0x20000d0c
    6090:	00017325 	.word	0x00017325

00006094 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    6094:	b580      	push	{r7, lr}
    6096:	b082      	sub	sp, #8
    6098:	af00      	add	r7, sp, #0
    609a:	0002      	movs	r2, r0
    609c:	1dfb      	adds	r3, r7, #7
    609e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    60a0:	4b09      	ldr	r3, [pc, #36]	; (60c8 <sd_mmc_spi_deselect_device+0x34>)
    60a2:	2200      	movs	r2, #0
    60a4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_main, &sd_mmc_spi_devices[slot], false);
    60a6:	1dfb      	adds	r3, r7, #7
    60a8:	781a      	ldrb	r2, [r3, #0]
    60aa:	0013      	movs	r3, r2
    60ac:	005b      	lsls	r3, r3, #1
    60ae:	189b      	adds	r3, r3, r2
    60b0:	4a06      	ldr	r2, [pc, #24]	; (60cc <sd_mmc_spi_deselect_device+0x38>)
    60b2:	1899      	adds	r1, r3, r2
    60b4:	4b06      	ldr	r3, [pc, #24]	; (60d0 <sd_mmc_spi_deselect_device+0x3c>)
    60b6:	2200      	movs	r2, #0
    60b8:	0018      	movs	r0, r3
    60ba:	4b06      	ldr	r3, [pc, #24]	; (60d4 <sd_mmc_spi_deselect_device+0x40>)
    60bc:	4798      	blx	r3
}
    60be:	46c0      	nop			; (mov r8, r8)
    60c0:	46bd      	mov	sp, r7
    60c2:	b002      	add	sp, #8
    60c4:	bd80      	pop	{r7, pc}
    60c6:	46c0      	nop			; (mov r8, r8)
    60c8:	20000d13 	.word	0x20000d13
    60cc:	20000d0c 	.word	0x20000d0c
    60d0:	20001270 	.word	0x20001270
    60d4:	00017325 	.word	0x00017325

000060d8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    60d8:	b580      	push	{r7, lr}
    60da:	b082      	sub	sp, #8
    60dc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    60de:	1dbb      	adds	r3, r7, #6
    60e0:	22ff      	movs	r2, #255	; 0xff
    60e2:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    60e4:	4b0c      	ldr	r3, [pc, #48]	; (6118 <sd_mmc_spi_send_clock+0x40>)
    60e6:	2200      	movs	r2, #0
    60e8:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    60ea:	1dfb      	adds	r3, r7, #7
    60ec:	2200      	movs	r2, #0
    60ee:	701a      	strb	r2, [r3, #0]
    60f0:	e00a      	b.n	6108 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&spi_main, &dummy, 1); // 8 cycles
    60f2:	1db9      	adds	r1, r7, #6
    60f4:	4b09      	ldr	r3, [pc, #36]	; (611c <sd_mmc_spi_send_clock+0x44>)
    60f6:	2201      	movs	r2, #1
    60f8:	0018      	movs	r0, r3
    60fa:	4b09      	ldr	r3, [pc, #36]	; (6120 <sd_mmc_spi_send_clock+0x48>)
    60fc:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    60fe:	1dfb      	adds	r3, r7, #7
    6100:	781a      	ldrb	r2, [r3, #0]
    6102:	1dfb      	adds	r3, r7, #7
    6104:	3201      	adds	r2, #1
    6106:	701a      	strb	r2, [r3, #0]
    6108:	1dfb      	adds	r3, r7, #7
    610a:	781b      	ldrb	r3, [r3, #0]
    610c:	2b09      	cmp	r3, #9
    610e:	d9f0      	bls.n	60f2 <sd_mmc_spi_send_clock+0x1a>
	}
}
    6110:	46c0      	nop			; (mov r8, r8)
    6112:	46bd      	mov	sp, r7
    6114:	b002      	add	sp, #8
    6116:	bd80      	pop	{r7, pc}
    6118:	20000d13 	.word	0x20000d13
    611c:	20001270 	.word	0x20001270
    6120:	00017415 	.word	0x00017415

00006124 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    6124:	b590      	push	{r4, r7, lr}
    6126:	b085      	sub	sp, #20
    6128:	af02      	add	r7, sp, #8
    612a:	6078      	str	r0, [r7, #4]
    612c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    612e:	6839      	ldr	r1, [r7, #0]
    6130:	6878      	ldr	r0, [r7, #4]
    6132:	2300      	movs	r3, #0
    6134:	9300      	str	r3, [sp, #0]
    6136:	2300      	movs	r3, #0
    6138:	2200      	movs	r2, #0
    613a:	4c03      	ldr	r4, [pc, #12]	; (6148 <sd_mmc_spi_send_cmd+0x24>)
    613c:	47a0      	blx	r4
    613e:	0003      	movs	r3, r0
}
    6140:	0018      	movs	r0, r3
    6142:	46bd      	mov	sp, r7
    6144:	b003      	add	sp, #12
    6146:	bd90      	pop	{r4, r7, pc}
    6148:	0000614d 	.word	0x0000614d

0000614c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    614c:	b590      	push	{r4, r7, lr}
    614e:	b089      	sub	sp, #36	; 0x24
    6150:	af00      	add	r7, sp, #0
    6152:	60f8      	str	r0, [r7, #12]
    6154:	60b9      	str	r1, [r7, #8]
    6156:	0019      	movs	r1, r3
    6158:	1dbb      	adds	r3, r7, #6
    615a:	801a      	strh	r2, [r3, #0]
    615c:	1d3b      	adds	r3, r7, #4
    615e:	1c0a      	adds	r2, r1, #0
    6160:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    6162:	231b      	movs	r3, #27
    6164:	18fb      	adds	r3, r7, r3
    6166:	22ff      	movs	r2, #255	; 0xff
    6168:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    616a:	231c      	movs	r3, #28
    616c:	18fb      	adds	r3, r7, r3
    616e:	22ff      	movs	r2, #255	; 0xff
    6170:	801a      	strh	r2, [r3, #0]


	
	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6172:	4b72      	ldr	r3, [pc, #456]	; (633c <sd_mmc_spi_adtc_start+0x1f0>)
    6174:	2200      	movs	r2, #0
    6176:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    6178:	68fb      	ldr	r3, [r7, #12]
    617a:	b2db      	uxtb	r3, r3
    617c:	223f      	movs	r2, #63	; 0x3f
    617e:	4013      	ands	r3, r2
    6180:	b2db      	uxtb	r3, r3
    6182:	2240      	movs	r2, #64	; 0x40
    6184:	4313      	orrs	r3, r2
    6186:	b2da      	uxtb	r2, r3
    6188:	2314      	movs	r3, #20
    618a:	18fb      	adds	r3, r7, r3
    618c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    618e:	68bb      	ldr	r3, [r7, #8]
    6190:	0e1b      	lsrs	r3, r3, #24
    6192:	b2da      	uxtb	r2, r3
    6194:	2314      	movs	r3, #20
    6196:	18fb      	adds	r3, r7, r3
    6198:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    619a:	68bb      	ldr	r3, [r7, #8]
    619c:	0c1b      	lsrs	r3, r3, #16
    619e:	b2da      	uxtb	r2, r3
    61a0:	2314      	movs	r3, #20
    61a2:	18fb      	adds	r3, r7, r3
    61a4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    61a6:	68bb      	ldr	r3, [r7, #8]
    61a8:	0a1b      	lsrs	r3, r3, #8
    61aa:	b2da      	uxtb	r2, r3
    61ac:	2314      	movs	r3, #20
    61ae:	18fb      	adds	r3, r7, r3
    61b0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    61b2:	68bb      	ldr	r3, [r7, #8]
    61b4:	b2da      	uxtb	r2, r3
    61b6:	2314      	movs	r3, #20
    61b8:	18fb      	adds	r3, r7, r3
    61ba:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    61bc:	2314      	movs	r3, #20
    61be:	18fb      	adds	r3, r7, r3
    61c0:	2105      	movs	r1, #5
    61c2:	0018      	movs	r0, r3
    61c4:	4b5e      	ldr	r3, [pc, #376]	; (6340 <sd_mmc_spi_adtc_start+0x1f4>)
    61c6:	4798      	blx	r3
    61c8:	0003      	movs	r3, r0
    61ca:	001a      	movs	r2, r3
    61cc:	2314      	movs	r3, #20
    61ce:	18fb      	adds	r3, r7, r3
    61d0:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&spi_main, &dummy, 1);
    61d2:	231b      	movs	r3, #27
    61d4:	18f9      	adds	r1, r7, r3
    61d6:	4b5b      	ldr	r3, [pc, #364]	; (6344 <sd_mmc_spi_adtc_start+0x1f8>)
    61d8:	2201      	movs	r2, #1
    61da:	0018      	movs	r0, r3
    61dc:	4b5a      	ldr	r3, [pc, #360]	; (6348 <sd_mmc_spi_adtc_start+0x1fc>)
    61de:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&spi_main, cmd_token, sizeof(cmd_token));
    61e0:	2314      	movs	r3, #20
    61e2:	18f9      	adds	r1, r7, r3
    61e4:	4b57      	ldr	r3, [pc, #348]	; (6344 <sd_mmc_spi_adtc_start+0x1f8>)
    61e6:	2206      	movs	r2, #6
    61e8:	0018      	movs	r0, r3
    61ea:	4b57      	ldr	r3, [pc, #348]	; (6348 <sd_mmc_spi_adtc_start+0x1fc>)
    61ec:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    61ee:	2313      	movs	r3, #19
    61f0:	18fb      	adds	r3, r7, r3
    61f2:	22ff      	movs	r2, #255	; 0xff
    61f4:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces

	spi_read_buffer_wait(&spi_main, &r1, 1,
    61f6:	231c      	movs	r3, #28
    61f8:	18fb      	adds	r3, r7, r3
    61fa:	881b      	ldrh	r3, [r3, #0]
    61fc:	2213      	movs	r2, #19
    61fe:	18b9      	adds	r1, r7, r2
    6200:	4850      	ldr	r0, [pc, #320]	; (6344 <sd_mmc_spi_adtc_start+0x1f8>)
    6202:	2201      	movs	r2, #1
    6204:	4c51      	ldr	r4, [pc, #324]	; (634c <sd_mmc_spi_adtc_start+0x200>)
    6206:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    6208:	231f      	movs	r3, #31
    620a:	18fb      	adds	r3, r7, r3
    620c:	2207      	movs	r2, #7
    620e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&spi_main, &r1, 1,
    6210:	231c      	movs	r3, #28
    6212:	18fb      	adds	r3, r7, r3
    6214:	881b      	ldrh	r3, [r3, #0]
    6216:	2213      	movs	r2, #19
    6218:	18b9      	adds	r1, r7, r2
    621a:	484a      	ldr	r0, [pc, #296]	; (6344 <sd_mmc_spi_adtc_start+0x1f8>)
    621c:	2201      	movs	r2, #1
    621e:	4c4b      	ldr	r4, [pc, #300]	; (634c <sd_mmc_spi_adtc_start+0x200>)
    6220:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    6222:	2313      	movs	r3, #19
    6224:	18fb      	adds	r3, r7, r3
    6226:	781b      	ldrb	r3, [r3, #0]
    6228:	b25b      	sxtb	r3, r3
    622a:	2b00      	cmp	r3, #0
    622c:	da10      	bge.n	6250 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    622e:	231f      	movs	r3, #31
    6230:	18fb      	adds	r3, r7, r3
    6232:	221f      	movs	r2, #31
    6234:	18ba      	adds	r2, r7, r2
    6236:	7812      	ldrb	r2, [r2, #0]
    6238:	3a01      	subs	r2, #1
    623a:	701a      	strb	r2, [r3, #0]
    623c:	231f      	movs	r3, #31
    623e:	18fb      	adds	r3, r7, r3
    6240:	781b      	ldrb	r3, [r3, #0]
    6242:	2b00      	cmp	r3, #0
    6244:	d1e4      	bne.n	6210 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    6246:	4b3d      	ldr	r3, [pc, #244]	; (633c <sd_mmc_spi_adtc_start+0x1f0>)
    6248:	2202      	movs	r2, #2
    624a:	701a      	strb	r2, [r3, #0]
			return false;
    624c:	2300      	movs	r3, #0
    624e:	e070      	b.n	6332 <sd_mmc_spi_adtc_start+0x1e6>
			break;
    6250:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    6252:	2313      	movs	r3, #19
    6254:	18fb      	adds	r3, r7, r3
    6256:	781b      	ldrb	r3, [r3, #0]
    6258:	001a      	movs	r2, r3
    625a:	4b3d      	ldr	r3, [pc, #244]	; (6350 <sd_mmc_spi_adtc_start+0x204>)
    625c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    625e:	2313      	movs	r3, #19
    6260:	18fb      	adds	r3, r7, r3
    6262:	781b      	ldrb	r3, [r3, #0]
    6264:	001a      	movs	r2, r3
    6266:	2308      	movs	r3, #8
    6268:	4013      	ands	r3, r2
    626a:	d004      	beq.n	6276 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    626c:	4b33      	ldr	r3, [pc, #204]	; (633c <sd_mmc_spi_adtc_start+0x1f0>)
    626e:	2206      	movs	r2, #6
    6270:	701a      	strb	r2, [r3, #0]
		return false;
    6272:	2300      	movs	r3, #0
    6274:	e05d      	b.n	6332 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    6276:	2313      	movs	r3, #19
    6278:	18fb      	adds	r3, r7, r3
    627a:	781b      	ldrb	r3, [r3, #0]
    627c:	001a      	movs	r2, r3
    627e:	2304      	movs	r3, #4
    6280:	4013      	ands	r3, r2
    6282:	d004      	beq.n	628e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    6284:	4b2d      	ldr	r3, [pc, #180]	; (633c <sd_mmc_spi_adtc_start+0x1f0>)
    6286:	2209      	movs	r2, #9
    6288:	701a      	strb	r2, [r3, #0]
		return false;
    628a:	2300      	movs	r3, #0
    628c:	e051      	b.n	6332 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    628e:	2313      	movs	r3, #19
    6290:	18fb      	adds	r3, r7, r3
    6292:	781b      	ldrb	r3, [r3, #0]
    6294:	001a      	movs	r2, r3
    6296:	2301      	movs	r3, #1
    6298:	439a      	bics	r2, r3
    629a:	1e13      	subs	r3, r2, #0
    629c:	d004      	beq.n	62a8 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    629e:	4b27      	ldr	r3, [pc, #156]	; (633c <sd_mmc_spi_adtc_start+0x1f0>)
    62a0:	2201      	movs	r2, #1
    62a2:	701a      	strb	r2, [r3, #0]
		return false;
    62a4:	2300      	movs	r3, #0
    62a6:	e044      	b.n	6332 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    62a8:	68fa      	ldr	r2, [r7, #12]
    62aa:	2380      	movs	r3, #128	; 0x80
    62ac:	019b      	lsls	r3, r3, #6
    62ae:	4013      	ands	r3, r2
    62b0:	d00d      	beq.n	62ce <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    62b2:	4b28      	ldr	r3, [pc, #160]	; (6354 <sd_mmc_spi_adtc_start+0x208>)
    62b4:	4798      	blx	r3
    62b6:	0003      	movs	r3, r0
    62b8:	001a      	movs	r2, r3
    62ba:	2301      	movs	r3, #1
    62bc:	4053      	eors	r3, r2
    62be:	b2db      	uxtb	r3, r3
    62c0:	2b00      	cmp	r3, #0
    62c2:	d004      	beq.n	62ce <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    62c4:	4b1d      	ldr	r3, [pc, #116]	; (633c <sd_mmc_spi_adtc_start+0x1f0>)
    62c6:	2203      	movs	r2, #3
    62c8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    62ca:	2300      	movs	r3, #0
    62cc:	e031      	b.n	6332 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    62ce:	68fa      	ldr	r2, [r7, #12]
    62d0:	2380      	movs	r3, #128	; 0x80
    62d2:	009b      	lsls	r3, r3, #2
    62d4:	4013      	ands	r3, r2
    62d6:	d00e      	beq.n	62f6 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    62d8:	4b1d      	ldr	r3, [pc, #116]	; (6350 <sd_mmc_spi_adtc_start+0x204>)
    62da:	2200      	movs	r2, #0
    62dc:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 1,
    62de:	231c      	movs	r3, #28
    62e0:	18fb      	adds	r3, r7, r3
    62e2:	881b      	ldrh	r3, [r3, #0]
    62e4:	491a      	ldr	r1, [pc, #104]	; (6350 <sd_mmc_spi_adtc_start+0x204>)
    62e6:	4817      	ldr	r0, [pc, #92]	; (6344 <sd_mmc_spi_adtc_start+0x1f8>)
    62e8:	2201      	movs	r2, #1
    62ea:	4c18      	ldr	r4, [pc, #96]	; (634c <sd_mmc_spi_adtc_start+0x200>)
    62ec:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    62ee:	4b18      	ldr	r3, [pc, #96]	; (6350 <sd_mmc_spi_adtc_start+0x204>)
    62f0:	681a      	ldr	r2, [r3, #0]
    62f2:	4b17      	ldr	r3, [pc, #92]	; (6350 <sd_mmc_spi_adtc_start+0x204>)
    62f4:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    62f6:	68fa      	ldr	r2, [r7, #12]
    62f8:	2380      	movs	r3, #128	; 0x80
    62fa:	00db      	lsls	r3, r3, #3
    62fc:	4013      	ands	r3, r2
    62fe:	d00c      	beq.n	631a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 4,
    6300:	231c      	movs	r3, #28
    6302:	18fb      	adds	r3, r7, r3
    6304:	881b      	ldrh	r3, [r3, #0]
    6306:	4912      	ldr	r1, [pc, #72]	; (6350 <sd_mmc_spi_adtc_start+0x204>)
    6308:	480e      	ldr	r0, [pc, #56]	; (6344 <sd_mmc_spi_adtc_start+0x1f8>)
    630a:	2204      	movs	r2, #4
    630c:	4c0f      	ldr	r4, [pc, #60]	; (634c <sd_mmc_spi_adtc_start+0x200>)
    630e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    6310:	4b0f      	ldr	r3, [pc, #60]	; (6350 <sd_mmc_spi_adtc_start+0x204>)
    6312:	681b      	ldr	r3, [r3, #0]
    6314:	ba1a      	rev	r2, r3
    6316:	4b0e      	ldr	r3, [pc, #56]	; (6350 <sd_mmc_spi_adtc_start+0x204>)
    6318:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    631a:	4b0f      	ldr	r3, [pc, #60]	; (6358 <sd_mmc_spi_adtc_start+0x20c>)
    631c:	1dba      	adds	r2, r7, #6
    631e:	8812      	ldrh	r2, [r2, #0]
    6320:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    6322:	4b0e      	ldr	r3, [pc, #56]	; (635c <sd_mmc_spi_adtc_start+0x210>)
    6324:	1d3a      	adds	r2, r7, #4
    6326:	8812      	ldrh	r2, [r2, #0]
    6328:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    632a:	4b0d      	ldr	r3, [pc, #52]	; (6360 <sd_mmc_spi_adtc_start+0x214>)
    632c:	2200      	movs	r2, #0
    632e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    6330:	2301      	movs	r3, #1
}
    6332:	0018      	movs	r0, r3
    6334:	46bd      	mov	sp, r7
    6336:	b009      	add	sp, #36	; 0x24
    6338:	bd90      	pop	{r4, r7, pc}
    633a:	46c0      	nop			; (mov r8, r8)
    633c:	20000d13 	.word	0x20000d13
    6340:	00005bfd 	.word	0x00005bfd
    6344:	20001270 	.word	0x20001270
    6348:	00017415 	.word	0x00017415
    634c:	00017169 	.word	0x00017169
    6350:	20000d14 	.word	0x20000d14
    6354:	00005cb9 	.word	0x00005cb9
    6358:	20000d1c 	.word	0x20000d1c
    635c:	20000d1e 	.word	0x20000d1e
    6360:	20000d18 	.word	0x20000d18

00006364 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    6364:	b580      	push	{r7, lr}
    6366:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    6368:	4b02      	ldr	r3, [pc, #8]	; (6374 <sd_mmc_spi_get_response+0x10>)
    636a:	681b      	ldr	r3, [r3, #0]
}
    636c:	0018      	movs	r0, r3
    636e:	46bd      	mov	sp, r7
    6370:	bd80      	pop	{r7, pc}
    6372:	46c0      	nop			; (mov r8, r8)
    6374:	20000d14 	.word	0x20000d14

00006378 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    6378:	b590      	push	{r4, r7, lr}
    637a:	b085      	sub	sp, #20
    637c:	af00      	add	r7, sp, #0
    637e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    6380:	230e      	movs	r3, #14
    6382:	18fb      	adds	r3, r7, r3
    6384:	22ff      	movs	r2, #255	; 0xff
    6386:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6388:	4b1c      	ldr	r3, [pc, #112]	; (63fc <sd_mmc_spi_read_word+0x84>)
    638a:	2200      	movs	r2, #0
    638c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    638e:	4b1c      	ldr	r3, [pc, #112]	; (6400 <sd_mmc_spi_read_word+0x88>)
    6390:	681a      	ldr	r2, [r3, #0]
    6392:	4b1c      	ldr	r3, [pc, #112]	; (6404 <sd_mmc_spi_read_word+0x8c>)
    6394:	881b      	ldrh	r3, [r3, #0]
    6396:	0019      	movs	r1, r3
    6398:	4b1b      	ldr	r3, [pc, #108]	; (6408 <sd_mmc_spi_read_word+0x90>)
    639a:	0010      	movs	r0, r2
    639c:	4798      	blx	r3
    639e:	1e0b      	subs	r3, r1, #0
    63a0:	d10a      	bne.n	63b8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    63a2:	4b1a      	ldr	r3, [pc, #104]	; (640c <sd_mmc_spi_read_word+0x94>)
    63a4:	4798      	blx	r3
    63a6:	0003      	movs	r3, r0
    63a8:	001a      	movs	r2, r3
    63aa:	2301      	movs	r3, #1
    63ac:	4053      	eors	r3, r2
    63ae:	b2db      	uxtb	r3, r3
    63b0:	2b00      	cmp	r3, #0
    63b2:	d001      	beq.n	63b8 <sd_mmc_spi_read_word+0x40>
			return false;
    63b4:	2300      	movs	r3, #0
    63b6:	e01d      	b.n	63f4 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&spi_main, (uint8_t *)&value, 4,
    63b8:	230e      	movs	r3, #14
    63ba:	18fb      	adds	r3, r7, r3
    63bc:	881b      	ldrh	r3, [r3, #0]
    63be:	1d39      	adds	r1, r7, #4
    63c0:	4813      	ldr	r0, [pc, #76]	; (6410 <sd_mmc_spi_read_word+0x98>)
    63c2:	2204      	movs	r2, #4
    63c4:	4c13      	ldr	r4, [pc, #76]	; (6414 <sd_mmc_spi_read_word+0x9c>)
    63c6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    63c8:	687b      	ldr	r3, [r7, #4]
    63ca:	687a      	ldr	r2, [r7, #4]
    63cc:	6812      	ldr	r2, [r2, #0]
    63ce:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    63d0:	4b0b      	ldr	r3, [pc, #44]	; (6400 <sd_mmc_spi_read_word+0x88>)
    63d2:	681b      	ldr	r3, [r3, #0]
    63d4:	1d1a      	adds	r2, r3, #4
    63d6:	4b0a      	ldr	r3, [pc, #40]	; (6400 <sd_mmc_spi_read_word+0x88>)
    63d8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    63da:	4b09      	ldr	r3, [pc, #36]	; (6400 <sd_mmc_spi_read_word+0x88>)
    63dc:	681a      	ldr	r2, [r3, #0]
    63de:	4b09      	ldr	r3, [pc, #36]	; (6404 <sd_mmc_spi_read_word+0x8c>)
    63e0:	881b      	ldrh	r3, [r3, #0]
    63e2:	0019      	movs	r1, r3
    63e4:	4b08      	ldr	r3, [pc, #32]	; (6408 <sd_mmc_spi_read_word+0x90>)
    63e6:	0010      	movs	r0, r2
    63e8:	4798      	blx	r3
    63ea:	1e0b      	subs	r3, r1, #0
    63ec:	d101      	bne.n	63f2 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    63ee:	4b0a      	ldr	r3, [pc, #40]	; (6418 <sd_mmc_spi_read_word+0xa0>)
    63f0:	4798      	blx	r3
	}
	return true;
    63f2:	2301      	movs	r3, #1
}
    63f4:	0018      	movs	r0, r3
    63f6:	46bd      	mov	sp, r7
    63f8:	b005      	add	sp, #20
    63fa:	bd90      	pop	{r4, r7, pc}
    63fc:	20000d13 	.word	0x20000d13
    6400:	20000d18 	.word	0x20000d18
    6404:	20000d1c 	.word	0x20000d1c
    6408:	00020cc9 	.word	0x00020cc9
    640c:	00005d25 	.word	0x00005d25
    6410:	20001270 	.word	0x20001270
    6414:	00017169 	.word	0x00017169
    6418:	00005da9 	.word	0x00005da9

0000641c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    641c:	b590      	push	{r4, r7, lr}
    641e:	b085      	sub	sp, #20
    6420:	af00      	add	r7, sp, #0
    6422:	6078      	str	r0, [r7, #4]
    6424:	000a      	movs	r2, r1
    6426:	1cbb      	adds	r3, r7, #2
    6428:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    642a:	230a      	movs	r3, #10
    642c:	18fb      	adds	r3, r7, r3
    642e:	22ff      	movs	r2, #255	; 0xff
    6430:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6432:	4b1c      	ldr	r3, [pc, #112]	; (64a4 <sd_mmc_spi_start_read_blocks+0x88>)
    6434:	2200      	movs	r2, #0
    6436:	701a      	strb	r2, [r3, #0]
	pos = 0;
    6438:	2300      	movs	r3, #0
    643a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    643c:	e025      	b.n	648a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    643e:	4b1a      	ldr	r3, [pc, #104]	; (64a8 <sd_mmc_spi_start_read_blocks+0x8c>)
    6440:	4798      	blx	r3
    6442:	0003      	movs	r3, r0
    6444:	001a      	movs	r2, r3
    6446:	2301      	movs	r3, #1
    6448:	4053      	eors	r3, r2
    644a:	b2db      	uxtb	r3, r3
    644c:	2b00      	cmp	r3, #0
    644e:	d001      	beq.n	6454 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    6450:	2300      	movs	r3, #0
    6452:	e022      	b.n	649a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&spi_main, &((uint8_t*)dest)[pos],
    6454:	687a      	ldr	r2, [r7, #4]
    6456:	68fb      	ldr	r3, [r7, #12]
    6458:	18d1      	adds	r1, r2, r3
    645a:	4b14      	ldr	r3, [pc, #80]	; (64ac <sd_mmc_spi_start_read_blocks+0x90>)
    645c:	881a      	ldrh	r2, [r3, #0]
    645e:	230a      	movs	r3, #10
    6460:	18fb      	adds	r3, r7, r3
    6462:	881b      	ldrh	r3, [r3, #0]
    6464:	4812      	ldr	r0, [pc, #72]	; (64b0 <sd_mmc_spi_start_read_blocks+0x94>)
    6466:	4c13      	ldr	r4, [pc, #76]	; (64b4 <sd_mmc_spi_start_read_blocks+0x98>)
    6468:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    646a:	4b10      	ldr	r3, [pc, #64]	; (64ac <sd_mmc_spi_start_read_blocks+0x90>)
    646c:	881b      	ldrh	r3, [r3, #0]
    646e:	001a      	movs	r2, r3
    6470:	68fb      	ldr	r3, [r7, #12]
    6472:	189b      	adds	r3, r3, r2
    6474:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    6476:	4b0d      	ldr	r3, [pc, #52]	; (64ac <sd_mmc_spi_start_read_blocks+0x90>)
    6478:	881b      	ldrh	r3, [r3, #0]
    647a:	001a      	movs	r2, r3
    647c:	4b0e      	ldr	r3, [pc, #56]	; (64b8 <sd_mmc_spi_start_read_blocks+0x9c>)
    647e:	681b      	ldr	r3, [r3, #0]
    6480:	18d2      	adds	r2, r2, r3
    6482:	4b0d      	ldr	r3, [pc, #52]	; (64b8 <sd_mmc_spi_start_read_blocks+0x9c>)
    6484:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    6486:	4b0d      	ldr	r3, [pc, #52]	; (64bc <sd_mmc_spi_start_read_blocks+0xa0>)
    6488:	4798      	blx	r3
	while (nb_block--) {
    648a:	1cbb      	adds	r3, r7, #2
    648c:	881b      	ldrh	r3, [r3, #0]
    648e:	1cba      	adds	r2, r7, #2
    6490:	1e59      	subs	r1, r3, #1
    6492:	8011      	strh	r1, [r2, #0]
    6494:	2b00      	cmp	r3, #0
    6496:	d1d2      	bne.n	643e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    6498:	2301      	movs	r3, #1
}
    649a:	0018      	movs	r0, r3
    649c:	46bd      	mov	sp, r7
    649e:	b005      	add	sp, #20
    64a0:	bd90      	pop	{r4, r7, pc}
    64a2:	46c0      	nop			; (mov r8, r8)
    64a4:	20000d13 	.word	0x20000d13
    64a8:	00005d25 	.word	0x00005d25
    64ac:	20000d1c 	.word	0x20000d1c
    64b0:	20001270 	.word	0x20001270
    64b4:	00017169 	.word	0x00017169
    64b8:	20000d18 	.word	0x20000d18
    64bc:	00005da9 	.word	0x00005da9

000064c0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    64c0:	b580      	push	{r7, lr}
    64c2:	af00      	add	r7, sp, #0
	return true;
    64c4:	2301      	movs	r3, #1
}
    64c6:	0018      	movs	r0, r3
    64c8:	46bd      	mov	sp, r7
    64ca:	bd80      	pop	{r7, pc}

000064cc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    64cc:	b580      	push	{r7, lr}
    64ce:	b084      	sub	sp, #16
    64d0:	af00      	add	r7, sp, #0
    64d2:	6078      	str	r0, [r7, #4]
    64d4:	000a      	movs	r2, r1
    64d6:	1cbb      	adds	r3, r7, #2
    64d8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    64da:	4b24      	ldr	r3, [pc, #144]	; (656c <sd_mmc_spi_start_write_blocks+0xa0>)
    64dc:	2200      	movs	r2, #0
    64de:	701a      	strb	r2, [r3, #0]
	pos = 0;
    64e0:	2300      	movs	r3, #0
    64e2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    64e4:	e035      	b.n	6552 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    64e6:	4b22      	ldr	r3, [pc, #136]	; (6570 <sd_mmc_spi_start_write_blocks+0xa4>)
    64e8:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&spi_main, &((uint8_t*)src)[pos],
    64ea:	687a      	ldr	r2, [r7, #4]
    64ec:	68fb      	ldr	r3, [r7, #12]
    64ee:	18d1      	adds	r1, r2, r3
    64f0:	4b20      	ldr	r3, [pc, #128]	; (6574 <sd_mmc_spi_start_write_blocks+0xa8>)
    64f2:	881a      	ldrh	r2, [r3, #0]
    64f4:	4b20      	ldr	r3, [pc, #128]	; (6578 <sd_mmc_spi_start_write_blocks+0xac>)
    64f6:	0018      	movs	r0, r3
    64f8:	4b20      	ldr	r3, [pc, #128]	; (657c <sd_mmc_spi_start_write_blocks+0xb0>)
    64fa:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    64fc:	4b1d      	ldr	r3, [pc, #116]	; (6574 <sd_mmc_spi_start_write_blocks+0xa8>)
    64fe:	881b      	ldrh	r3, [r3, #0]
    6500:	001a      	movs	r2, r3
    6502:	68fb      	ldr	r3, [r7, #12]
    6504:	189b      	adds	r3, r3, r2
    6506:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    6508:	4b1a      	ldr	r3, [pc, #104]	; (6574 <sd_mmc_spi_start_write_blocks+0xa8>)
    650a:	881b      	ldrh	r3, [r3, #0]
    650c:	001a      	movs	r2, r3
    650e:	4b1c      	ldr	r3, [pc, #112]	; (6580 <sd_mmc_spi_start_write_blocks+0xb4>)
    6510:	681b      	ldr	r3, [r3, #0]
    6512:	18d2      	adds	r2, r2, r3
    6514:	4b1a      	ldr	r3, [pc, #104]	; (6580 <sd_mmc_spi_start_write_blocks+0xb4>)
    6516:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    6518:	4b1a      	ldr	r3, [pc, #104]	; (6584 <sd_mmc_spi_start_write_blocks+0xb8>)
    651a:	4798      	blx	r3
    651c:	0003      	movs	r3, r0
    651e:	001a      	movs	r2, r3
    6520:	2301      	movs	r3, #1
    6522:	4053      	eors	r3, r2
    6524:	b2db      	uxtb	r3, r3
    6526:	2b00      	cmp	r3, #0
    6528:	d001      	beq.n	652e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    652a:	2300      	movs	r3, #0
    652c:	e019      	b.n	6562 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    652e:	1cbb      	adds	r3, r7, #2
    6530:	881b      	ldrh	r3, [r3, #0]
    6532:	2b00      	cmp	r3, #0
    6534:	d00d      	beq.n	6552 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    6536:	4b14      	ldr	r3, [pc, #80]	; (6588 <sd_mmc_spi_start_write_blocks+0xbc>)
    6538:	4798      	blx	r3
    653a:	0003      	movs	r3, r0
    653c:	001a      	movs	r2, r3
    653e:	2301      	movs	r3, #1
    6540:	4053      	eors	r3, r2
    6542:	b2db      	uxtb	r3, r3
    6544:	2b00      	cmp	r3, #0
    6546:	d004      	beq.n	6552 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    6548:	4b08      	ldr	r3, [pc, #32]	; (656c <sd_mmc_spi_start_write_blocks+0xa0>)
    654a:	2205      	movs	r2, #5
    654c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    654e:	2300      	movs	r3, #0
    6550:	e007      	b.n	6562 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    6552:	1cbb      	adds	r3, r7, #2
    6554:	881b      	ldrh	r3, [r3, #0]
    6556:	1cba      	adds	r2, r7, #2
    6558:	1e59      	subs	r1, r3, #1
    655a:	8011      	strh	r1, [r2, #0]
    655c:	2b00      	cmp	r3, #0
    655e:	d1c2      	bne.n	64e6 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    6560:	2301      	movs	r3, #1
}
    6562:	0018      	movs	r0, r3
    6564:	46bd      	mov	sp, r7
    6566:	b004      	add	sp, #16
    6568:	bd80      	pop	{r7, pc}
    656a:	46c0      	nop			; (mov r8, r8)
    656c:	20000d13 	.word	0x20000d13
    6570:	00005dd5 	.word	0x00005dd5
    6574:	20000d1c 	.word	0x20000d1c
    6578:	20001270 	.word	0x20001270
    657c:	00017415 	.word	0x00017415
    6580:	20000d18 	.word	0x20000d18
    6584:	00005e25 	.word	0x00005e25
    6588:	00005cb9 	.word	0x00005cb9

0000658c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    658c:	b580      	push	{r7, lr}
    658e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    6590:	4b09      	ldr	r3, [pc, #36]	; (65b8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    6592:	4798      	blx	r3
    6594:	0003      	movs	r3, r0
    6596:	001a      	movs	r2, r3
    6598:	2301      	movs	r3, #1
    659a:	4053      	eors	r3, r2
    659c:	b2db      	uxtb	r3, r3
    659e:	2b00      	cmp	r3, #0
    65a0:	d004      	beq.n	65ac <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    65a2:	4b06      	ldr	r3, [pc, #24]	; (65bc <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    65a4:	2205      	movs	r2, #5
    65a6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    65a8:	2300      	movs	r3, #0
    65aa:	e002      	b.n	65b2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    65ac:	4b04      	ldr	r3, [pc, #16]	; (65c0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    65ae:	4798      	blx	r3
    65b0:	0003      	movs	r3, r0
}
    65b2:	0018      	movs	r0, r3
    65b4:	46bd      	mov	sp, r7
    65b6:	bd80      	pop	{r7, pc}
    65b8:	00005cb9 	.word	0x00005cb9
    65bc:	20000d13 	.word	0x20000d13
    65c0:	00005eb9 	.word	0x00005eb9

000065c4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    65c4:	b580      	push	{r7, lr}
    65c6:	b084      	sub	sp, #16
    65c8:	af00      	add	r7, sp, #0
    65ca:	0002      	movs	r2, r0
    65cc:	1dfb      	adds	r3, r7, #7
    65ce:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    65d0:	1dfb      	adds	r3, r7, #7
    65d2:	781b      	ldrb	r3, [r3, #0]
    65d4:	2b01      	cmp	r3, #1
    65d6:	d80b      	bhi.n	65f0 <mem_test_unit_ready+0x2c>
    65d8:	1dfb      	adds	r3, r7, #7
    65da:	781a      	ldrb	r2, [r3, #0]
    65dc:	490a      	ldr	r1, [pc, #40]	; (6608 <mem_test_unit_ready+0x44>)
    65de:	0013      	movs	r3, r2
    65e0:	009b      	lsls	r3, r3, #2
    65e2:	189b      	adds	r3, r3, r2
    65e4:	00db      	lsls	r3, r3, #3
    65e6:	585b      	ldr	r3, [r3, r1]
    65e8:	4798      	blx	r3
    65ea:	0003      	movs	r3, r0
    65ec:	001a      	movs	r2, r3
    65ee:	e000      	b.n	65f2 <mem_test_unit_ready+0x2e>
    65f0:	2201      	movs	r2, #1
  status =
    65f2:	230f      	movs	r3, #15
    65f4:	18fb      	adds	r3, r7, r3
    65f6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    65f8:	230f      	movs	r3, #15
    65fa:	18fb      	adds	r3, r7, r3
    65fc:	781b      	ldrb	r3, [r3, #0]
}
    65fe:	0018      	movs	r0, r3
    6600:	46bd      	mov	sp, r7
    6602:	b004      	add	sp, #16
    6604:	bd80      	pop	{r7, pc}
    6606:	46c0      	nop			; (mov r8, r8)
    6608:	00028030 	.word	0x00028030

0000660c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    660c:	b580      	push	{r7, lr}
    660e:	b084      	sub	sp, #16
    6610:	af00      	add	r7, sp, #0
    6612:	0002      	movs	r2, r0
    6614:	6039      	str	r1, [r7, #0]
    6616:	1dfb      	adds	r3, r7, #7
    6618:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    661a:	1dfb      	adds	r3, r7, #7
    661c:	781b      	ldrb	r3, [r3, #0]
    661e:	2b01      	cmp	r3, #1
    6620:	d80f      	bhi.n	6642 <mem_read_capacity+0x36>
    6622:	1dfb      	adds	r3, r7, #7
    6624:	781a      	ldrb	r2, [r3, #0]
    6626:	490c      	ldr	r1, [pc, #48]	; (6658 <mem_read_capacity+0x4c>)
    6628:	0013      	movs	r3, r2
    662a:	009b      	lsls	r3, r3, #2
    662c:	189b      	adds	r3, r3, r2
    662e:	00db      	lsls	r3, r3, #3
    6630:	18cb      	adds	r3, r1, r3
    6632:	3304      	adds	r3, #4
    6634:	681b      	ldr	r3, [r3, #0]
    6636:	683a      	ldr	r2, [r7, #0]
    6638:	0010      	movs	r0, r2
    663a:	4798      	blx	r3
    663c:	0003      	movs	r3, r0
    663e:	001a      	movs	r2, r3
    6640:	e000      	b.n	6644 <mem_read_capacity+0x38>
    6642:	2201      	movs	r2, #1
  status =
    6644:	230f      	movs	r3, #15
    6646:	18fb      	adds	r3, r7, r3
    6648:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    664a:	230f      	movs	r3, #15
    664c:	18fb      	adds	r3, r7, r3
    664e:	781b      	ldrb	r3, [r3, #0]
}
    6650:	0018      	movs	r0, r3
    6652:	46bd      	mov	sp, r7
    6654:	b004      	add	sp, #16
    6656:	bd80      	pop	{r7, pc}
    6658:	00028030 	.word	0x00028030

0000665c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    665c:	b580      	push	{r7, lr}
    665e:	b084      	sub	sp, #16
    6660:	af00      	add	r7, sp, #0
    6662:	0002      	movs	r2, r0
    6664:	1dfb      	adds	r3, r7, #7
    6666:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    6668:	1dfb      	adds	r3, r7, #7
    666a:	781a      	ldrb	r2, [r3, #0]
    666c:	2101      	movs	r1, #1
    666e:	2300      	movs	r3, #0
    6670:	4291      	cmp	r1, r2
    6672:	415b      	adcs	r3, r3
    6674:	b2da      	uxtb	r2, r3
  sector_size =
    6676:	230f      	movs	r3, #15
    6678:	18fb      	adds	r3, r7, r3
    667a:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    667c:	230f      	movs	r3, #15
    667e:	18fb      	adds	r3, r7, r3
    6680:	781b      	ldrb	r3, [r3, #0]
}
    6682:	0018      	movs	r0, r3
    6684:	46bd      	mov	sp, r7
    6686:	b004      	add	sp, #16
    6688:	bd80      	pop	{r7, pc}
	...

0000668c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    668c:	b580      	push	{r7, lr}
    668e:	b084      	sub	sp, #16
    6690:	af00      	add	r7, sp, #0
    6692:	0002      	movs	r2, r0
    6694:	1dfb      	adds	r3, r7, #7
    6696:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    6698:	1dfb      	adds	r3, r7, #7
    669a:	781b      	ldrb	r3, [r3, #0]
    669c:	2b01      	cmp	r3, #1
    669e:	d80c      	bhi.n	66ba <mem_wr_protect+0x2e>
    66a0:	1dfb      	adds	r3, r7, #7
    66a2:	781a      	ldrb	r2, [r3, #0]
    66a4:	490b      	ldr	r1, [pc, #44]	; (66d4 <mem_wr_protect+0x48>)
    66a6:	0013      	movs	r3, r2
    66a8:	009b      	lsls	r3, r3, #2
    66aa:	189b      	adds	r3, r3, r2
    66ac:	00db      	lsls	r3, r3, #3
    66ae:	18cb      	adds	r3, r1, r3
    66b0:	330c      	adds	r3, #12
    66b2:	681b      	ldr	r3, [r3, #0]
    66b4:	4798      	blx	r3
    66b6:	1e03      	subs	r3, r0, #0
    66b8:	d001      	beq.n	66be <mem_wr_protect+0x32>
    66ba:	2201      	movs	r2, #1
    66bc:	e000      	b.n	66c0 <mem_wr_protect+0x34>
    66be:	2200      	movs	r2, #0
  wr_protect =
    66c0:	230f      	movs	r3, #15
    66c2:	18fb      	adds	r3, r7, r3
    66c4:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    66c6:	230f      	movs	r3, #15
    66c8:	18fb      	adds	r3, r7, r3
    66ca:	781b      	ldrb	r3, [r3, #0]
}
    66cc:	0018      	movs	r0, r3
    66ce:	46bd      	mov	sp, r7
    66d0:	b004      	add	sp, #16
    66d2:	bd80      	pop	{r7, pc}
    66d4:	00028030 	.word	0x00028030

000066d8 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    66d8:	b580      	push	{r7, lr}
    66da:	b086      	sub	sp, #24
    66dc:	af00      	add	r7, sp, #0
    66de:	60b9      	str	r1, [r7, #8]
    66e0:	607a      	str	r2, [r7, #4]
    66e2:	230f      	movs	r3, #15
    66e4:	18fb      	adds	r3, r7, r3
    66e6:	1c02      	adds	r2, r0, #0
    66e8:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    66ea:	230f      	movs	r3, #15
    66ec:	18fb      	adds	r3, r7, r3
    66ee:	781b      	ldrb	r3, [r3, #0]
    66f0:	2b01      	cmp	r3, #1
    66f2:	d811      	bhi.n	6718 <memory_2_ram+0x40>
    66f4:	230f      	movs	r3, #15
    66f6:	18fb      	adds	r3, r7, r3
    66f8:	781a      	ldrb	r2, [r3, #0]
    66fa:	490d      	ldr	r1, [pc, #52]	; (6730 <memory_2_ram+0x58>)
    66fc:	0013      	movs	r3, r2
    66fe:	009b      	lsls	r3, r3, #2
    6700:	189b      	adds	r3, r3, r2
    6702:	00db      	lsls	r3, r3, #3
    6704:	18cb      	adds	r3, r1, r3
    6706:	331c      	adds	r3, #28
    6708:	681b      	ldr	r3, [r3, #0]
    670a:	6879      	ldr	r1, [r7, #4]
    670c:	68ba      	ldr	r2, [r7, #8]
    670e:	0010      	movs	r0, r2
    6710:	4798      	blx	r3
    6712:	0003      	movs	r3, r0
    6714:	001a      	movs	r2, r3
    6716:	e000      	b.n	671a <memory_2_ram+0x42>
    6718:	2201      	movs	r2, #1
  status =
    671a:	2317      	movs	r3, #23
    671c:	18fb      	adds	r3, r7, r3
    671e:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    6720:	2317      	movs	r3, #23
    6722:	18fb      	adds	r3, r7, r3
    6724:	781b      	ldrb	r3, [r3, #0]
}
    6726:	0018      	movs	r0, r3
    6728:	46bd      	mov	sp, r7
    672a:	b006      	add	sp, #24
    672c:	bd80      	pop	{r7, pc}
    672e:	46c0      	nop			; (mov r8, r8)
    6730:	00028030 	.word	0x00028030

00006734 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    6734:	b580      	push	{r7, lr}
    6736:	b086      	sub	sp, #24
    6738:	af00      	add	r7, sp, #0
    673a:	60b9      	str	r1, [r7, #8]
    673c:	607a      	str	r2, [r7, #4]
    673e:	230f      	movs	r3, #15
    6740:	18fb      	adds	r3, r7, r3
    6742:	1c02      	adds	r2, r0, #0
    6744:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    6746:	230f      	movs	r3, #15
    6748:	18fb      	adds	r3, r7, r3
    674a:	781b      	ldrb	r3, [r3, #0]
    674c:	2b01      	cmp	r3, #1
    674e:	d811      	bhi.n	6774 <ram_2_memory+0x40>
    6750:	230f      	movs	r3, #15
    6752:	18fb      	adds	r3, r7, r3
    6754:	781a      	ldrb	r2, [r3, #0]
    6756:	490d      	ldr	r1, [pc, #52]	; (678c <ram_2_memory+0x58>)
    6758:	0013      	movs	r3, r2
    675a:	009b      	lsls	r3, r3, #2
    675c:	189b      	adds	r3, r3, r2
    675e:	00db      	lsls	r3, r3, #3
    6760:	18cb      	adds	r3, r1, r3
    6762:	3320      	adds	r3, #32
    6764:	681b      	ldr	r3, [r3, #0]
    6766:	6879      	ldr	r1, [r7, #4]
    6768:	68ba      	ldr	r2, [r7, #8]
    676a:	0010      	movs	r0, r2
    676c:	4798      	blx	r3
    676e:	0003      	movs	r3, r0
    6770:	001a      	movs	r2, r3
    6772:	e000      	b.n	6776 <ram_2_memory+0x42>
    6774:	2201      	movs	r2, #1
  status =
    6776:	2317      	movs	r3, #23
    6778:	18fb      	adds	r3, r7, r3
    677a:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    677c:	2317      	movs	r3, #23
    677e:	18fb      	adds	r3, r7, r3
    6780:	781b      	ldrb	r3, [r3, #0]
}
    6782:	0018      	movs	r0, r3
    6784:	46bd      	mov	sp, r7
    6786:	b006      	add	sp, #24
    6788:	bd80      	pop	{r7, pc}
    678a:	46c0      	nop			; (mov r8, r8)
    678c:	00028030 	.word	0x00028030

00006790 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    6790:	b580      	push	{r7, lr}
    6792:	b082      	sub	sp, #8
    6794:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    6796:	4b10      	ldr	r3, [pc, #64]	; (67d8 <cpu_irq_enter_critical+0x48>)
    6798:	681b      	ldr	r3, [r3, #0]
    679a:	2b00      	cmp	r3, #0
    679c:	d112      	bne.n	67c4 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    679e:	f3ef 8310 	mrs	r3, PRIMASK
    67a2:	607b      	str	r3, [r7, #4]
  return(result);
    67a4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    67a6:	2b00      	cmp	r3, #0
    67a8:	d109      	bne.n	67be <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    67aa:	b672      	cpsid	i
    67ac:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    67b0:	4b0a      	ldr	r3, [pc, #40]	; (67dc <cpu_irq_enter_critical+0x4c>)
    67b2:	2200      	movs	r2, #0
    67b4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    67b6:	4b0a      	ldr	r3, [pc, #40]	; (67e0 <cpu_irq_enter_critical+0x50>)
    67b8:	2201      	movs	r2, #1
    67ba:	701a      	strb	r2, [r3, #0]
    67bc:	e002      	b.n	67c4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    67be:	4b08      	ldr	r3, [pc, #32]	; (67e0 <cpu_irq_enter_critical+0x50>)
    67c0:	2200      	movs	r2, #0
    67c2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    67c4:	4b04      	ldr	r3, [pc, #16]	; (67d8 <cpu_irq_enter_critical+0x48>)
    67c6:	681b      	ldr	r3, [r3, #0]
    67c8:	1c5a      	adds	r2, r3, #1
    67ca:	4b03      	ldr	r3, [pc, #12]	; (67d8 <cpu_irq_enter_critical+0x48>)
    67cc:	601a      	str	r2, [r3, #0]
}
    67ce:	46c0      	nop			; (mov r8, r8)
    67d0:	46bd      	mov	sp, r7
    67d2:	b002      	add	sp, #8
    67d4:	bd80      	pop	{r7, pc}
    67d6:	46c0      	nop			; (mov r8, r8)
    67d8:	20000d20 	.word	0x20000d20
    67dc:	200000ad 	.word	0x200000ad
    67e0:	20000d24 	.word	0x20000d24

000067e4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    67e4:	b580      	push	{r7, lr}
    67e6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    67e8:	4b0b      	ldr	r3, [pc, #44]	; (6818 <cpu_irq_leave_critical+0x34>)
    67ea:	681b      	ldr	r3, [r3, #0]
    67ec:	1e5a      	subs	r2, r3, #1
    67ee:	4b0a      	ldr	r3, [pc, #40]	; (6818 <cpu_irq_leave_critical+0x34>)
    67f0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    67f2:	4b09      	ldr	r3, [pc, #36]	; (6818 <cpu_irq_leave_critical+0x34>)
    67f4:	681b      	ldr	r3, [r3, #0]
    67f6:	2b00      	cmp	r3, #0
    67f8:	d10a      	bne.n	6810 <cpu_irq_leave_critical+0x2c>
    67fa:	4b08      	ldr	r3, [pc, #32]	; (681c <cpu_irq_leave_critical+0x38>)
    67fc:	781b      	ldrb	r3, [r3, #0]
    67fe:	b2db      	uxtb	r3, r3
    6800:	2b00      	cmp	r3, #0
    6802:	d005      	beq.n	6810 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    6804:	4b06      	ldr	r3, [pc, #24]	; (6820 <cpu_irq_leave_critical+0x3c>)
    6806:	2201      	movs	r2, #1
    6808:	701a      	strb	r2, [r3, #0]
    680a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    680e:	b662      	cpsie	i
	}
}
    6810:	46c0      	nop			; (mov r8, r8)
    6812:	46bd      	mov	sp, r7
    6814:	bd80      	pop	{r7, pc}
    6816:	46c0      	nop			; (mov r8, r8)
    6818:	20000d20 	.word	0x20000d20
    681c:	20000d24 	.word	0x20000d24
    6820:	200000ad 	.word	0x200000ad

00006824 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    6824:	b580      	push	{r7, lr}
    6826:	b084      	sub	sp, #16
    6828:	af00      	add	r7, sp, #0
    682a:	0002      	movs	r2, r0
    682c:	1dfb      	adds	r3, r7, #7
    682e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    6830:	230f      	movs	r3, #15
    6832:	18fb      	adds	r3, r7, r3
    6834:	1dfa      	adds	r2, r7, #7
    6836:	7812      	ldrb	r2, [r2, #0]
    6838:	0952      	lsrs	r2, r2, #5
    683a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    683c:	230f      	movs	r3, #15
    683e:	18fb      	adds	r3, r7, r3
    6840:	781b      	ldrb	r3, [r3, #0]
    6842:	2b00      	cmp	r3, #0
    6844:	d10c      	bne.n	6860 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6846:	4b09      	ldr	r3, [pc, #36]	; (686c <_extint_get_eic_from_channel+0x48>)
    6848:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    684a:	230f      	movs	r3, #15
    684c:	18fb      	adds	r3, r7, r3
    684e:	781b      	ldrb	r3, [r3, #0]
    6850:	009b      	lsls	r3, r3, #2
    6852:	2210      	movs	r2, #16
    6854:	4694      	mov	ip, r2
    6856:	44bc      	add	ip, r7
    6858:	4463      	add	r3, ip
    685a:	3b08      	subs	r3, #8
    685c:	681b      	ldr	r3, [r3, #0]
    685e:	e000      	b.n	6862 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    6860:	2300      	movs	r3, #0
	}
}
    6862:	0018      	movs	r0, r3
    6864:	46bd      	mov	sp, r7
    6866:	b004      	add	sp, #16
    6868:	bd80      	pop	{r7, pc}
    686a:	46c0      	nop			; (mov r8, r8)
    686c:	40002400 	.word	0x40002400

00006870 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    6870:	b580      	push	{r7, lr}
    6872:	b084      	sub	sp, #16
    6874:	af00      	add	r7, sp, #0
    6876:	0002      	movs	r2, r0
    6878:	1dfb      	adds	r3, r7, #7
    687a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    687c:	1dfb      	adds	r3, r7, #7
    687e:	781b      	ldrb	r3, [r3, #0]
    6880:	0018      	movs	r0, r3
    6882:	4b0b      	ldr	r3, [pc, #44]	; (68b0 <extint_chan_is_detected+0x40>)
    6884:	4798      	blx	r3
    6886:	0003      	movs	r3, r0
    6888:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    688a:	1dfb      	adds	r3, r7, #7
    688c:	781b      	ldrb	r3, [r3, #0]
    688e:	221f      	movs	r2, #31
    6890:	4013      	ands	r3, r2
    6892:	2201      	movs	r2, #1
    6894:	409a      	lsls	r2, r3
    6896:	0013      	movs	r3, r2
    6898:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    689a:	68fb      	ldr	r3, [r7, #12]
    689c:	695b      	ldr	r3, [r3, #20]
    689e:	68ba      	ldr	r2, [r7, #8]
    68a0:	4013      	ands	r3, r2
    68a2:	1e5a      	subs	r2, r3, #1
    68a4:	4193      	sbcs	r3, r2
    68a6:	b2db      	uxtb	r3, r3
}
    68a8:	0018      	movs	r0, r3
    68aa:	46bd      	mov	sp, r7
    68ac:	b004      	add	sp, #16
    68ae:	bd80      	pop	{r7, pc}
    68b0:	00006825 	.word	0x00006825

000068b4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    68b4:	b580      	push	{r7, lr}
    68b6:	b084      	sub	sp, #16
    68b8:	af00      	add	r7, sp, #0
    68ba:	0002      	movs	r2, r0
    68bc:	1dfb      	adds	r3, r7, #7
    68be:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    68c0:	1dfb      	adds	r3, r7, #7
    68c2:	781b      	ldrb	r3, [r3, #0]
    68c4:	0018      	movs	r0, r3
    68c6:	4b09      	ldr	r3, [pc, #36]	; (68ec <extint_chan_clear_detected+0x38>)
    68c8:	4798      	blx	r3
    68ca:	0003      	movs	r3, r0
    68cc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    68ce:	1dfb      	adds	r3, r7, #7
    68d0:	781b      	ldrb	r3, [r3, #0]
    68d2:	221f      	movs	r2, #31
    68d4:	4013      	ands	r3, r2
    68d6:	2201      	movs	r2, #1
    68d8:	409a      	lsls	r2, r3
    68da:	0013      	movs	r3, r2
    68dc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    68de:	68fb      	ldr	r3, [r7, #12]
    68e0:	68ba      	ldr	r2, [r7, #8]
    68e2:	615a      	str	r2, [r3, #20]
}
    68e4:	46c0      	nop			; (mov r8, r8)
    68e6:	46bd      	mov	sp, r7
    68e8:	b004      	add	sp, #16
    68ea:	bd80      	pop	{r7, pc}
    68ec:	00006825 	.word	0x00006825

000068f0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b082      	sub	sp, #8
    68f4:	af00      	add	r7, sp, #0
    68f6:	6078      	str	r0, [r7, #4]
    68f8:	0008      	movs	r0, r1
    68fa:	0011      	movs	r1, r2
    68fc:	1cfb      	adds	r3, r7, #3
    68fe:	1c02      	adds	r2, r0, #0
    6900:	701a      	strb	r2, [r3, #0]
    6902:	1cbb      	adds	r3, r7, #2
    6904:	1c0a      	adds	r2, r1, #0
    6906:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    6908:	1cbb      	adds	r3, r7, #2
    690a:	781b      	ldrb	r3, [r3, #0]
    690c:	2b00      	cmp	r3, #0
    690e:	d001      	beq.n	6914 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6910:	2317      	movs	r3, #23
    6912:	e019      	b.n	6948 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    6914:	1cfb      	adds	r3, r7, #3
    6916:	781a      	ldrb	r2, [r3, #0]
    6918:	4b0d      	ldr	r3, [pc, #52]	; (6950 <extint_register_callback+0x60>)
    691a:	0092      	lsls	r2, r2, #2
    691c:	58d3      	ldr	r3, [r2, r3]
    691e:	2b00      	cmp	r3, #0
    6920:	d107      	bne.n	6932 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    6922:	1cfb      	adds	r3, r7, #3
    6924:	781a      	ldrb	r2, [r3, #0]
    6926:	4b0a      	ldr	r3, [pc, #40]	; (6950 <extint_register_callback+0x60>)
    6928:	0092      	lsls	r2, r2, #2
    692a:	6879      	ldr	r1, [r7, #4]
    692c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    692e:	2300      	movs	r3, #0
    6930:	e00a      	b.n	6948 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    6932:	1cfb      	adds	r3, r7, #3
    6934:	781a      	ldrb	r2, [r3, #0]
    6936:	4b06      	ldr	r3, [pc, #24]	; (6950 <extint_register_callback+0x60>)
    6938:	0092      	lsls	r2, r2, #2
    693a:	58d2      	ldr	r2, [r2, r3]
    693c:	687b      	ldr	r3, [r7, #4]
    693e:	429a      	cmp	r2, r3
    6940:	d101      	bne.n	6946 <extint_register_callback+0x56>
		return STATUS_OK;
    6942:	2300      	movs	r3, #0
    6944:	e000      	b.n	6948 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    6946:	231d      	movs	r3, #29
}
    6948:	0018      	movs	r0, r3
    694a:	46bd      	mov	sp, r7
    694c:	b002      	add	sp, #8
    694e:	bd80      	pop	{r7, pc}
    6950:	2000139c 	.word	0x2000139c

00006954 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    6954:	b580      	push	{r7, lr}
    6956:	b084      	sub	sp, #16
    6958:	af00      	add	r7, sp, #0
    695a:	0002      	movs	r2, r0
    695c:	1dfb      	adds	r3, r7, #7
    695e:	701a      	strb	r2, [r3, #0]
    6960:	1dbb      	adds	r3, r7, #6
    6962:	1c0a      	adds	r2, r1, #0
    6964:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    6966:	1dbb      	adds	r3, r7, #6
    6968:	781b      	ldrb	r3, [r3, #0]
    696a:	2b00      	cmp	r3, #0
    696c:	d10e      	bne.n	698c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    696e:	1dfb      	adds	r3, r7, #7
    6970:	781b      	ldrb	r3, [r3, #0]
    6972:	0018      	movs	r0, r3
    6974:	4b08      	ldr	r3, [pc, #32]	; (6998 <extint_chan_enable_callback+0x44>)
    6976:	4798      	blx	r3
    6978:	0003      	movs	r3, r0
    697a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    697c:	1dfb      	adds	r3, r7, #7
    697e:	781b      	ldrb	r3, [r3, #0]
    6980:	2201      	movs	r2, #1
    6982:	409a      	lsls	r2, r3
    6984:	68fb      	ldr	r3, [r7, #12]
    6986:	611a      	str	r2, [r3, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    6988:	2300      	movs	r3, #0
    698a:	e000      	b.n	698e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    698c:	2317      	movs	r3, #23
}
    698e:	0018      	movs	r0, r3
    6990:	46bd      	mov	sp, r7
    6992:	b004      	add	sp, #16
    6994:	bd80      	pop	{r7, pc}
    6996:	46c0      	nop			; (mov r8, r8)
    6998:	00006825 	.word	0x00006825

0000699c <extint_get_current_channel>:
 * the callback in case the same callback is used by multiple channels.
 *
 * \return Channel number.
 */
uint8_t extint_get_current_channel(void)
{
    699c:	b580      	push	{r7, lr}
    699e:	af00      	add	r7, sp, #0
	return _current_channel;
    69a0:	4b02      	ldr	r3, [pc, #8]	; (69ac <extint_get_current_channel+0x10>)
    69a2:	781b      	ldrb	r3, [r3, #0]
}
    69a4:	0018      	movs	r0, r3
    69a6:	46bd      	mov	sp, r7
    69a8:	bd80      	pop	{r7, pc}
    69aa:	46c0      	nop			; (mov r8, r8)
    69ac:	20001399 	.word	0x20001399

000069b0 <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    69b0:	b580      	push	{r7, lr}
    69b2:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    69b4:	4b15      	ldr	r3, [pc, #84]	; (6a0c <EIC_Handler+0x5c>)
    69b6:	2200      	movs	r2, #0
    69b8:	701a      	strb	r2, [r3, #0]
    69ba:	e020      	b.n	69fe <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    69bc:	4b13      	ldr	r3, [pc, #76]	; (6a0c <EIC_Handler+0x5c>)
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	0018      	movs	r0, r3
    69c2:	4b13      	ldr	r3, [pc, #76]	; (6a10 <EIC_Handler+0x60>)
    69c4:	4798      	blx	r3
    69c6:	1e03      	subs	r3, r0, #0
    69c8:	d013      	beq.n	69f2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    69ca:	4b10      	ldr	r3, [pc, #64]	; (6a0c <EIC_Handler+0x5c>)
    69cc:	781b      	ldrb	r3, [r3, #0]
    69ce:	0018      	movs	r0, r3
    69d0:	4b10      	ldr	r3, [pc, #64]	; (6a14 <EIC_Handler+0x64>)
    69d2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    69d4:	4b0d      	ldr	r3, [pc, #52]	; (6a0c <EIC_Handler+0x5c>)
    69d6:	781b      	ldrb	r3, [r3, #0]
    69d8:	001a      	movs	r2, r3
    69da:	4b0f      	ldr	r3, [pc, #60]	; (6a18 <EIC_Handler+0x68>)
    69dc:	0092      	lsls	r2, r2, #2
    69de:	58d3      	ldr	r3, [r2, r3]
    69e0:	2b00      	cmp	r3, #0
    69e2:	d006      	beq.n	69f2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    69e4:	4b09      	ldr	r3, [pc, #36]	; (6a0c <EIC_Handler+0x5c>)
    69e6:	781b      	ldrb	r3, [r3, #0]
    69e8:	001a      	movs	r2, r3
    69ea:	4b0b      	ldr	r3, [pc, #44]	; (6a18 <EIC_Handler+0x68>)
    69ec:	0092      	lsls	r2, r2, #2
    69ee:	58d3      	ldr	r3, [r2, r3]
    69f0:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    69f2:	4b06      	ldr	r3, [pc, #24]	; (6a0c <EIC_Handler+0x5c>)
    69f4:	781b      	ldrb	r3, [r3, #0]
    69f6:	3301      	adds	r3, #1
    69f8:	b2da      	uxtb	r2, r3
    69fa:	4b04      	ldr	r3, [pc, #16]	; (6a0c <EIC_Handler+0x5c>)
    69fc:	701a      	strb	r2, [r3, #0]
    69fe:	4b03      	ldr	r3, [pc, #12]	; (6a0c <EIC_Handler+0x5c>)
    6a00:	781b      	ldrb	r3, [r3, #0]
    6a02:	2b0f      	cmp	r3, #15
    6a04:	d9da      	bls.n	69bc <EIC_Handler+0xc>
			}
		}
	}
}
    6a06:	46c0      	nop			; (mov r8, r8)
    6a08:	46bd      	mov	sp, r7
    6a0a:	bd80      	pop	{r7, pc}
    6a0c:	20001399 	.word	0x20001399
    6a10:	00006871 	.word	0x00006871
    6a14:	000068b5 	.word	0x000068b5
    6a18:	2000139c 	.word	0x2000139c

00006a1c <system_apb_clock_set_mask>:
{
    6a1c:	b580      	push	{r7, lr}
    6a1e:	b082      	sub	sp, #8
    6a20:	af00      	add	r7, sp, #0
    6a22:	0002      	movs	r2, r0
    6a24:	6039      	str	r1, [r7, #0]
    6a26:	1dfb      	adds	r3, r7, #7
    6a28:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6a2a:	1dfb      	adds	r3, r7, #7
    6a2c:	781b      	ldrb	r3, [r3, #0]
    6a2e:	2b04      	cmp	r3, #4
    6a30:	d827      	bhi.n	6a82 <system_apb_clock_set_mask+0x66>
    6a32:	009a      	lsls	r2, r3, #2
    6a34:	4b16      	ldr	r3, [pc, #88]	; (6a90 <system_apb_clock_set_mask+0x74>)
    6a36:	18d3      	adds	r3, r2, r3
    6a38:	681b      	ldr	r3, [r3, #0]
    6a3a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    6a3c:	4b15      	ldr	r3, [pc, #84]	; (6a94 <system_apb_clock_set_mask+0x78>)
    6a3e:	4a15      	ldr	r2, [pc, #84]	; (6a94 <system_apb_clock_set_mask+0x78>)
    6a40:	6951      	ldr	r1, [r2, #20]
    6a42:	683a      	ldr	r2, [r7, #0]
    6a44:	430a      	orrs	r2, r1
    6a46:	615a      	str	r2, [r3, #20]
			break;
    6a48:	e01d      	b.n	6a86 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    6a4a:	4b12      	ldr	r3, [pc, #72]	; (6a94 <system_apb_clock_set_mask+0x78>)
    6a4c:	4a11      	ldr	r2, [pc, #68]	; (6a94 <system_apb_clock_set_mask+0x78>)
    6a4e:	6991      	ldr	r1, [r2, #24]
    6a50:	683a      	ldr	r2, [r7, #0]
    6a52:	430a      	orrs	r2, r1
    6a54:	619a      	str	r2, [r3, #24]
			break;
    6a56:	e016      	b.n	6a86 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    6a58:	4b0e      	ldr	r3, [pc, #56]	; (6a94 <system_apb_clock_set_mask+0x78>)
    6a5a:	4a0e      	ldr	r2, [pc, #56]	; (6a94 <system_apb_clock_set_mask+0x78>)
    6a5c:	69d1      	ldr	r1, [r2, #28]
    6a5e:	683a      	ldr	r2, [r7, #0]
    6a60:	430a      	orrs	r2, r1
    6a62:	61da      	str	r2, [r3, #28]
			break;
    6a64:	e00f      	b.n	6a86 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    6a66:	4b0b      	ldr	r3, [pc, #44]	; (6a94 <system_apb_clock_set_mask+0x78>)
    6a68:	4a0a      	ldr	r2, [pc, #40]	; (6a94 <system_apb_clock_set_mask+0x78>)
    6a6a:	6a11      	ldr	r1, [r2, #32]
    6a6c:	683a      	ldr	r2, [r7, #0]
    6a6e:	430a      	orrs	r2, r1
    6a70:	621a      	str	r2, [r3, #32]
			break;
    6a72:	e008      	b.n	6a86 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    6a74:	4b07      	ldr	r3, [pc, #28]	; (6a94 <system_apb_clock_set_mask+0x78>)
    6a76:	4a07      	ldr	r2, [pc, #28]	; (6a94 <system_apb_clock_set_mask+0x78>)
    6a78:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6a7a:	683a      	ldr	r2, [r7, #0]
    6a7c:	430a      	orrs	r2, r1
    6a7e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    6a80:	e001      	b.n	6a86 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    6a82:	2317      	movs	r3, #23
    6a84:	e000      	b.n	6a88 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    6a86:	2300      	movs	r3, #0
}
    6a88:	0018      	movs	r0, r3
    6a8a:	46bd      	mov	sp, r7
    6a8c:	b002      	add	sp, #8
    6a8e:	bd80      	pop	{r7, pc}
    6a90:	00028080 	.word	0x00028080
    6a94:	40000400 	.word	0x40000400

00006a98 <system_pinmux_get_config_defaults>:
{
    6a98:	b580      	push	{r7, lr}
    6a9a:	b082      	sub	sp, #8
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6aa0:	687b      	ldr	r3, [r7, #4]
    6aa2:	2280      	movs	r2, #128	; 0x80
    6aa4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	2200      	movs	r2, #0
    6aaa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6aac:	687b      	ldr	r3, [r7, #4]
    6aae:	2201      	movs	r2, #1
    6ab0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6ab2:	687b      	ldr	r3, [r7, #4]
    6ab4:	2200      	movs	r2, #0
    6ab6:	70da      	strb	r2, [r3, #3]
}
    6ab8:	46c0      	nop			; (mov r8, r8)
    6aba:	46bd      	mov	sp, r7
    6abc:	b002      	add	sp, #8
    6abe:	bd80      	pop	{r7, pc}

00006ac0 <system_interrupt_enable>:
{
    6ac0:	b580      	push	{r7, lr}
    6ac2:	b082      	sub	sp, #8
    6ac4:	af00      	add	r7, sp, #0
    6ac6:	0002      	movs	r2, r0
    6ac8:	1dfb      	adds	r3, r7, #7
    6aca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6acc:	4b06      	ldr	r3, [pc, #24]	; (6ae8 <system_interrupt_enable+0x28>)
    6ace:	1dfa      	adds	r2, r7, #7
    6ad0:	7812      	ldrb	r2, [r2, #0]
    6ad2:	0011      	movs	r1, r2
    6ad4:	221f      	movs	r2, #31
    6ad6:	400a      	ands	r2, r1
    6ad8:	2101      	movs	r1, #1
    6ada:	4091      	lsls	r1, r2
    6adc:	000a      	movs	r2, r1
    6ade:	601a      	str	r2, [r3, #0]
}
    6ae0:	46c0      	nop			; (mov r8, r8)
    6ae2:	46bd      	mov	sp, r7
    6ae4:	b002      	add	sp, #8
    6ae6:	bd80      	pop	{r7, pc}
    6ae8:	e000e100 	.word	0xe000e100

00006aec <_extint_get_eic_from_channel>:
{
    6aec:	b580      	push	{r7, lr}
    6aee:	b084      	sub	sp, #16
    6af0:	af00      	add	r7, sp, #0
    6af2:	0002      	movs	r2, r0
    6af4:	1dfb      	adds	r3, r7, #7
    6af6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    6af8:	230f      	movs	r3, #15
    6afa:	18fb      	adds	r3, r7, r3
    6afc:	1dfa      	adds	r2, r7, #7
    6afe:	7812      	ldrb	r2, [r2, #0]
    6b00:	0952      	lsrs	r2, r2, #5
    6b02:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    6b04:	230f      	movs	r3, #15
    6b06:	18fb      	adds	r3, r7, r3
    6b08:	781b      	ldrb	r3, [r3, #0]
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d10c      	bne.n	6b28 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6b0e:	4b09      	ldr	r3, [pc, #36]	; (6b34 <_extint_get_eic_from_channel+0x48>)
    6b10:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    6b12:	230f      	movs	r3, #15
    6b14:	18fb      	adds	r3, r7, r3
    6b16:	781b      	ldrb	r3, [r3, #0]
    6b18:	009b      	lsls	r3, r3, #2
    6b1a:	2210      	movs	r2, #16
    6b1c:	4694      	mov	ip, r2
    6b1e:	44bc      	add	ip, r7
    6b20:	4463      	add	r3, ip
    6b22:	3b08      	subs	r3, #8
    6b24:	681b      	ldr	r3, [r3, #0]
    6b26:	e000      	b.n	6b2a <_extint_get_eic_from_channel+0x3e>
		return NULL;
    6b28:	2300      	movs	r3, #0
}
    6b2a:	0018      	movs	r0, r3
    6b2c:	46bd      	mov	sp, r7
    6b2e:	b004      	add	sp, #16
    6b30:	bd80      	pop	{r7, pc}
    6b32:	46c0      	nop			; (mov r8, r8)
    6b34:	40002400 	.word	0x40002400

00006b38 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    6b38:	b580      	push	{r7, lr}
    6b3a:	b082      	sub	sp, #8
    6b3c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6b3e:	4b15      	ldr	r3, [pc, #84]	; (6b94 <extint_is_syncing+0x5c>)
    6b40:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6b42:	2300      	movs	r3, #0
    6b44:	607b      	str	r3, [r7, #4]
    6b46:	e01c      	b.n	6b82 <extint_is_syncing+0x4a>
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    6b48:	687b      	ldr	r3, [r7, #4]
    6b4a:	009b      	lsls	r3, r3, #2
    6b4c:	2208      	movs	r2, #8
    6b4e:	4694      	mov	ip, r2
    6b50:	44bc      	add	ip, r7
    6b52:	4463      	add	r3, ip
    6b54:	3b08      	subs	r3, #8
    6b56:	681b      	ldr	r3, [r3, #0]
    6b58:	685b      	ldr	r3, [r3, #4]
    6b5a:	2202      	movs	r2, #2
    6b5c:	4013      	ands	r3, r2
    6b5e:	d10b      	bne.n	6b78 <extint_is_syncing+0x40>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    6b60:	687b      	ldr	r3, [r7, #4]
    6b62:	009b      	lsls	r3, r3, #2
    6b64:	2208      	movs	r2, #8
    6b66:	4694      	mov	ip, r2
    6b68:	44bc      	add	ip, r7
    6b6a:	4463      	add	r3, ip
    6b6c:	3b08      	subs	r3, #8
    6b6e:	681b      	ldr	r3, [r3, #0]
    6b70:	685b      	ldr	r3, [r3, #4]
    6b72:	2201      	movs	r2, #1
    6b74:	4013      	ands	r3, r2
    6b76:	d001      	beq.n	6b7c <extint_is_syncing+0x44>
			return true;
    6b78:	2301      	movs	r3, #1
    6b7a:	e006      	b.n	6b8a <extint_is_syncing+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6b7c:	687b      	ldr	r3, [r7, #4]
    6b7e:	3301      	adds	r3, #1
    6b80:	607b      	str	r3, [r7, #4]
    6b82:	687b      	ldr	r3, [r7, #4]
    6b84:	2b00      	cmp	r3, #0
    6b86:	d0df      	beq.n	6b48 <extint_is_syncing+0x10>
		}
	}
	return false;
    6b88:	2300      	movs	r3, #0
}
    6b8a:	0018      	movs	r0, r3
    6b8c:	46bd      	mov	sp, r7
    6b8e:	b002      	add	sp, #8
    6b90:	bd80      	pop	{r7, pc}
    6b92:	46c0      	nop			; (mov r8, r8)
    6b94:	40002400 	.word	0x40002400

00006b98 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    6b98:	b580      	push	{r7, lr}
    6b9a:	b084      	sub	sp, #16
    6b9c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6b9e:	4b2e      	ldr	r3, [pc, #184]	; (6c58 <_system_extint_init+0xc0>)
    6ba0:	603b      	str	r3, [r7, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_EIC);
    6ba2:	2380      	movs	r3, #128	; 0x80
    6ba4:	009b      	lsls	r3, r3, #2
    6ba6:	0019      	movs	r1, r3
    6ba8:	2000      	movs	r0, #0
    6baa:	4b2c      	ldr	r3, [pc, #176]	; (6c5c <_system_extint_init+0xc4>)
    6bac:	4798      	blx	r3
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6bae:	2300      	movs	r3, #0
    6bb0:	60fb      	str	r3, [r7, #12]
    6bb2:	e018      	b.n	6be6 <_system_extint_init+0x4e>
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    6bb4:	68fb      	ldr	r3, [r7, #12]
    6bb6:	009b      	lsls	r3, r3, #2
    6bb8:	2210      	movs	r2, #16
    6bba:	4694      	mov	ip, r2
    6bbc:	44bc      	add	ip, r7
    6bbe:	4463      	add	r3, ip
    6bc0:	3b10      	subs	r3, #16
    6bc2:	681a      	ldr	r2, [r3, #0]
    6bc4:	68fb      	ldr	r3, [r7, #12]
    6bc6:	009b      	lsls	r3, r3, #2
    6bc8:	2110      	movs	r1, #16
    6bca:	468c      	mov	ip, r1
    6bcc:	44bc      	add	ip, r7
    6bce:	4463      	add	r3, ip
    6bd0:	3b10      	subs	r3, #16
    6bd2:	681b      	ldr	r3, [r3, #0]
    6bd4:	781b      	ldrb	r3, [r3, #0]
    6bd6:	b2db      	uxtb	r3, r3
    6bd8:	2101      	movs	r1, #1
    6bda:	430b      	orrs	r3, r1
    6bdc:	b2db      	uxtb	r3, r3
    6bde:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6be0:	68fb      	ldr	r3, [r7, #12]
    6be2:	3301      	adds	r3, #1
    6be4:	60fb      	str	r3, [r7, #12]
    6be6:	68fb      	ldr	r3, [r7, #12]
    6be8:	2b00      	cmp	r3, #0
    6bea:	d0e3      	beq.n	6bb4 <_system_extint_init+0x1c>
	}

	while (extint_is_syncing()) {
    6bec:	46c0      	nop			; (mov r8, r8)
    6bee:	4b1c      	ldr	r3, [pc, #112]	; (6c60 <_system_extint_init+0xc8>)
    6bf0:	4798      	blx	r3
    6bf2:	1e03      	subs	r3, r0, #0
    6bf4:	d1fb      	bne.n	6bee <_system_extint_init+0x56>
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
	}
#else
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6bf6:	2300      	movs	r3, #0
    6bf8:	60bb      	str	r3, [r7, #8]
    6bfa:	e00e      	b.n	6c1a <_system_extint_init+0x82>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    6bfc:	68bb      	ldr	r3, [r7, #8]
    6bfe:	009b      	lsls	r3, r3, #2
    6c00:	2210      	movs	r2, #16
    6c02:	4694      	mov	ip, r2
    6c04:	44bc      	add	ip, r7
    6c06:	4463      	add	r3, ip
    6c08:	3b10      	subs	r3, #16
    6c0a:	681a      	ldr	r2, [r3, #0]
    6c0c:	7813      	ldrb	r3, [r2, #0]
    6c0e:	2110      	movs	r1, #16
    6c10:	430b      	orrs	r3, r1
    6c12:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6c14:	68bb      	ldr	r3, [r7, #8]
    6c16:	3301      	adds	r3, #1
    6c18:	60bb      	str	r3, [r7, #8]
    6c1a:	68bb      	ldr	r3, [r7, #8]
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d0ed      	beq.n	6bfc <_system_extint_init+0x64>
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6c20:	1dfb      	adds	r3, r7, #7
    6c22:	2200      	movs	r2, #0
    6c24:	701a      	strb	r2, [r3, #0]
    6c26:	e00a      	b.n	6c3e <_system_extint_init+0xa6>
		_extint_dev.callbacks[j] = NULL;
    6c28:	1dfb      	adds	r3, r7, #7
    6c2a:	781a      	ldrb	r2, [r3, #0]
    6c2c:	4b0d      	ldr	r3, [pc, #52]	; (6c64 <_system_extint_init+0xcc>)
    6c2e:	0092      	lsls	r2, r2, #2
    6c30:	2100      	movs	r1, #0
    6c32:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6c34:	1dfb      	adds	r3, r7, #7
    6c36:	781a      	ldrb	r2, [r3, #0]
    6c38:	1dfb      	adds	r3, r7, #7
    6c3a:	3201      	adds	r2, #1
    6c3c:	701a      	strb	r2, [r3, #0]
    6c3e:	1dfb      	adds	r3, r7, #7
    6c40:	781b      	ldrb	r3, [r3, #0]
    6c42:	2b0f      	cmp	r3, #15
    6c44:	d9f0      	bls.n	6c28 <_system_extint_init+0x90>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    6c46:	2003      	movs	r0, #3
    6c48:	4b07      	ldr	r3, [pc, #28]	; (6c68 <_system_extint_init+0xd0>)
    6c4a:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    6c4c:	4b07      	ldr	r3, [pc, #28]	; (6c6c <_system_extint_init+0xd4>)
    6c4e:	4798      	blx	r3
}
    6c50:	46c0      	nop			; (mov r8, r8)
    6c52:	46bd      	mov	sp, r7
    6c54:	b004      	add	sp, #16
    6c56:	bd80      	pop	{r7, pc}
    6c58:	40002400 	.word	0x40002400
    6c5c:	00006a1d 	.word	0x00006a1d
    6c60:	00006b39 	.word	0x00006b39
    6c64:	2000139c 	.word	0x2000139c
    6c68:	00006ac1 	.word	0x00006ac1
    6c6c:	00006c71 	.word	0x00006c71

00006c70 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    6c70:	b580      	push	{r7, lr}
    6c72:	b082      	sub	sp, #8
    6c74:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6c76:	4b15      	ldr	r3, [pc, #84]	; (6ccc <_extint_enable+0x5c>)
    6c78:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6c7a:	2300      	movs	r3, #0
    6c7c:	607b      	str	r3, [r7, #4]
    6c7e:	e018      	b.n	6cb2 <_extint_enable+0x42>
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    6c80:	687b      	ldr	r3, [r7, #4]
    6c82:	009b      	lsls	r3, r3, #2
    6c84:	2208      	movs	r2, #8
    6c86:	4694      	mov	ip, r2
    6c88:	44bc      	add	ip, r7
    6c8a:	4463      	add	r3, ip
    6c8c:	3b08      	subs	r3, #8
    6c8e:	681a      	ldr	r2, [r3, #0]
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	009b      	lsls	r3, r3, #2
    6c94:	2108      	movs	r1, #8
    6c96:	468c      	mov	ip, r1
    6c98:	44bc      	add	ip, r7
    6c9a:	4463      	add	r3, ip
    6c9c:	3b08      	subs	r3, #8
    6c9e:	681b      	ldr	r3, [r3, #0]
    6ca0:	781b      	ldrb	r3, [r3, #0]
    6ca2:	b2db      	uxtb	r3, r3
    6ca4:	2102      	movs	r1, #2
    6ca6:	430b      	orrs	r3, r1
    6ca8:	b2db      	uxtb	r3, r3
    6caa:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6cac:	687b      	ldr	r3, [r7, #4]
    6cae:	3301      	adds	r3, #1
    6cb0:	607b      	str	r3, [r7, #4]
    6cb2:	687b      	ldr	r3, [r7, #4]
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	d0e3      	beq.n	6c80 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    6cb8:	46c0      	nop			; (mov r8, r8)
    6cba:	4b05      	ldr	r3, [pc, #20]	; (6cd0 <_extint_enable+0x60>)
    6cbc:	4798      	blx	r3
    6cbe:	1e03      	subs	r3, r0, #0
    6cc0:	d1fb      	bne.n	6cba <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6cc2:	46c0      	nop			; (mov r8, r8)
    6cc4:	46bd      	mov	sp, r7
    6cc6:	b002      	add	sp, #8
    6cc8:	bd80      	pop	{r7, pc}
    6cca:	46c0      	nop			; (mov r8, r8)
    6ccc:	40002400 	.word	0x40002400
    6cd0:	00006b39 	.word	0x00006b39

00006cd4 <_extint_disable>:
 * Disables EIC modules that were previously started via a call to
 * \ref _extint_enable().
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_disable(void)
{
    6cd4:	b580      	push	{r7, lr}
    6cd6:	b082      	sub	sp, #8
    6cd8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6cda:	4b15      	ldr	r3, [pc, #84]	; (6d30 <_extint_disable+0x5c>)
    6cdc:	603b      	str	r3, [r7, #0]

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6cde:	2300      	movs	r3, #0
    6ce0:	607b      	str	r3, [r7, #4]
    6ce2:	e018      	b.n	6d16 <_extint_disable+0x42>
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6ce4:	687b      	ldr	r3, [r7, #4]
    6ce6:	009b      	lsls	r3, r3, #2
    6ce8:	2208      	movs	r2, #8
    6cea:	4694      	mov	ip, r2
    6cec:	44bc      	add	ip, r7
    6cee:	4463      	add	r3, ip
    6cf0:	3b08      	subs	r3, #8
    6cf2:	681a      	ldr	r2, [r3, #0]
    6cf4:	687b      	ldr	r3, [r7, #4]
    6cf6:	009b      	lsls	r3, r3, #2
    6cf8:	2108      	movs	r1, #8
    6cfa:	468c      	mov	ip, r1
    6cfc:	44bc      	add	ip, r7
    6cfe:	4463      	add	r3, ip
    6d00:	3b08      	subs	r3, #8
    6d02:	681b      	ldr	r3, [r3, #0]
    6d04:	781b      	ldrb	r3, [r3, #0]
    6d06:	b2db      	uxtb	r3, r3
    6d08:	2102      	movs	r1, #2
    6d0a:	438b      	bics	r3, r1
    6d0c:	b2db      	uxtb	r3, r3
    6d0e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6d10:	687b      	ldr	r3, [r7, #4]
    6d12:	3301      	adds	r3, #1
    6d14:	607b      	str	r3, [r7, #4]
    6d16:	687b      	ldr	r3, [r7, #4]
    6d18:	2b00      	cmp	r3, #0
    6d1a:	d0e3      	beq.n	6ce4 <_extint_disable+0x10>
	}

	while (extint_is_syncing()) {
    6d1c:	46c0      	nop			; (mov r8, r8)
    6d1e:	4b05      	ldr	r3, [pc, #20]	; (6d34 <_extint_disable+0x60>)
    6d20:	4798      	blx	r3
    6d22:	1e03      	subs	r3, r0, #0
    6d24:	d1fb      	bne.n	6d1e <_extint_disable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6d26:	46c0      	nop			; (mov r8, r8)
    6d28:	46bd      	mov	sp, r7
    6d2a:	b002      	add	sp, #8
    6d2c:	bd80      	pop	{r7, pc}
    6d2e:	46c0      	nop			; (mov r8, r8)
    6d30:	40002400 	.word	0x40002400
    6d34:	00006b39 	.word	0x00006b39

00006d38 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    6d38:	b580      	push	{r7, lr}
    6d3a:	b082      	sub	sp, #8
    6d3c:	af00      	add	r7, sp, #0
    6d3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	2200      	movs	r2, #0
    6d44:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    6d46:	687b      	ldr	r3, [r7, #4]
    6d48:	2200      	movs	r2, #0
    6d4a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6d4c:	687b      	ldr	r3, [r7, #4]
    6d4e:	2201      	movs	r2, #1
    6d50:	721a      	strb	r2, [r3, #8]
	config->filter_input_signal = false;
    6d52:	687b      	ldr	r3, [r7, #4]
    6d54:	2200      	movs	r2, #0
    6d56:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    6d58:	687b      	ldr	r3, [r7, #4]
    6d5a:	2202      	movs	r2, #2
    6d5c:	72da      	strb	r2, [r3, #11]
	config->enable_async_edge_detection = false;
    6d5e:	687b      	ldr	r3, [r7, #4]
    6d60:	2200      	movs	r2, #0
    6d62:	725a      	strb	r2, [r3, #9]
}
    6d64:	46c0      	nop			; (mov r8, r8)
    6d66:	46bd      	mov	sp, r7
    6d68:	b002      	add	sp, #8
    6d6a:	bd80      	pop	{r7, pc}

00006d6c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    6d6c:	b580      	push	{r7, lr}
    6d6e:	b086      	sub	sp, #24
    6d70:	af00      	add	r7, sp, #0
    6d72:	0002      	movs	r2, r0
    6d74:	6039      	str	r1, [r7, #0]
    6d76:	1dfb      	adds	r3, r7, #7
    6d78:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    6d7a:	4b3c      	ldr	r3, [pc, #240]	; (6e6c <extint_chan_set_config+0x100>)
    6d7c:	4798      	blx	r3
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    6d7e:	2308      	movs	r3, #8
    6d80:	18fb      	adds	r3, r7, r3
    6d82:	0018      	movs	r0, r3
    6d84:	4b3a      	ldr	r3, [pc, #232]	; (6e70 <extint_chan_set_config+0x104>)
    6d86:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    6d88:	683b      	ldr	r3, [r7, #0]
    6d8a:	685b      	ldr	r3, [r3, #4]
    6d8c:	b2da      	uxtb	r2, r3
    6d8e:	2308      	movs	r3, #8
    6d90:	18fb      	adds	r3, r7, r3
    6d92:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6d94:	2308      	movs	r3, #8
    6d96:	18fb      	adds	r3, r7, r3
    6d98:	2200      	movs	r2, #0
    6d9a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6d9c:	683b      	ldr	r3, [r7, #0]
    6d9e:	7a1a      	ldrb	r2, [r3, #8]
    6da0:	2308      	movs	r3, #8
    6da2:	18fb      	adds	r3, r7, r3
    6da4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    6da6:	683b      	ldr	r3, [r7, #0]
    6da8:	681b      	ldr	r3, [r3, #0]
    6daa:	b2db      	uxtb	r3, r3
    6dac:	2208      	movs	r2, #8
    6dae:	18ba      	adds	r2, r7, r2
    6db0:	0011      	movs	r1, r2
    6db2:	0018      	movs	r0, r3
    6db4:	4b2f      	ldr	r3, [pc, #188]	; (6e74 <extint_chan_set_config+0x108>)
    6db6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    6db8:	1dfb      	adds	r3, r7, #7
    6dba:	781b      	ldrb	r3, [r3, #0]
    6dbc:	0018      	movs	r0, r3
    6dbe:	4b2e      	ldr	r3, [pc, #184]	; (6e78 <extint_chan_set_config+0x10c>)
    6dc0:	4798      	blx	r3
    6dc2:	0003      	movs	r3, r0
    6dc4:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    6dc6:	1dfb      	adds	r3, r7, #7
    6dc8:	781b      	ldrb	r3, [r3, #0]
    6dca:	2207      	movs	r2, #7
    6dcc:	4013      	ands	r3, r2
    6dce:	009b      	lsls	r3, r3, #2
    6dd0:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6dd2:	683b      	ldr	r3, [r7, #0]
    6dd4:	7adb      	ldrb	r3, [r3, #11]
    6dd6:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6dd8:	683b      	ldr	r3, [r7, #0]
    6dda:	7a9b      	ldrb	r3, [r3, #10]
    6ddc:	2b00      	cmp	r3, #0
    6dde:	d003      	beq.n	6de8 <extint_chan_set_config+0x7c>
		new_config |= EIC_CONFIG_FILTEN0;
    6de0:	697b      	ldr	r3, [r7, #20]
    6de2:	2208      	movs	r2, #8
    6de4:	4313      	orrs	r3, r2
    6de6:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    6de8:	1dfb      	adds	r3, r7, #7
    6dea:	781b      	ldrb	r3, [r3, #0]
    6dec:	08db      	lsrs	r3, r3, #3
    6dee:	b2db      	uxtb	r3, r3
    6df0:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    6df2:	1dfb      	adds	r3, r7, #7
    6df4:	781b      	ldrb	r3, [r3, #0]
    6df6:	08db      	lsrs	r3, r3, #3
    6df8:	b2db      	uxtb	r3, r3
    6dfa:	693a      	ldr	r2, [r7, #16]
    6dfc:	3306      	adds	r3, #6
    6dfe:	009b      	lsls	r3, r3, #2
    6e00:	18d3      	adds	r3, r2, r3
    6e02:	3304      	adds	r3, #4
    6e04:	681b      	ldr	r3, [r3, #0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6e06:	210f      	movs	r1, #15
    6e08:	68fa      	ldr	r2, [r7, #12]
    6e0a:	4091      	lsls	r1, r2
    6e0c:	000a      	movs	r2, r1
    6e0e:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    6e10:	401a      	ands	r2, r3
			(new_config << config_pos);
    6e12:	6979      	ldr	r1, [r7, #20]
    6e14:	68fb      	ldr	r3, [r7, #12]
    6e16:	4099      	lsls	r1, r3
    6e18:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6e1a:	431a      	orrs	r2, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    6e1c:	6939      	ldr	r1, [r7, #16]
    6e1e:	1d83      	adds	r3, r0, #6
    6e20:	009b      	lsls	r3, r3, #2
    6e22:	18cb      	adds	r3, r1, r3
    6e24:	3304      	adds	r3, #4
    6e26:	601a      	str	r2, [r3, #0]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    6e28:	683b      	ldr	r3, [r7, #0]
    6e2a:	7a5b      	ldrb	r3, [r3, #9]
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	d00a      	beq.n	6e46 <extint_chan_set_config+0xda>
		EIC_module->ASYNCH.reg |= (1UL << channel);
    6e30:	693b      	ldr	r3, [r7, #16]
    6e32:	699a      	ldr	r2, [r3, #24]
    6e34:	1dfb      	adds	r3, r7, #7
    6e36:	781b      	ldrb	r3, [r3, #0]
    6e38:	2101      	movs	r1, #1
    6e3a:	4099      	lsls	r1, r3
    6e3c:	000b      	movs	r3, r1
    6e3e:	431a      	orrs	r2, r3
    6e40:	693b      	ldr	r3, [r7, #16]
    6e42:	619a      	str	r2, [r3, #24]
    6e44:	e00c      	b.n	6e60 <extint_chan_set_config+0xf4>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    6e46:	693b      	ldr	r3, [r7, #16]
    6e48:	699b      	ldr	r3, [r3, #24]
    6e4a:	1dfa      	adds	r2, r7, #7
    6e4c:	7812      	ldrb	r2, [r2, #0]
    6e4e:	2101      	movs	r1, #1
    6e50:	4091      	lsls	r1, r2
    6e52:	000a      	movs	r2, r1
    6e54:	43d2      	mvns	r2, r2
    6e56:	4013      	ands	r3, r2
    6e58:	041b      	lsls	r3, r3, #16
    6e5a:	0c1a      	lsrs	r2, r3, #16
    6e5c:	693b      	ldr	r3, [r7, #16]
    6e5e:	619a      	str	r2, [r3, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    6e60:	4b06      	ldr	r3, [pc, #24]	; (6e7c <extint_chan_set_config+0x110>)
    6e62:	4798      	blx	r3
}
    6e64:	46c0      	nop			; (mov r8, r8)
    6e66:	46bd      	mov	sp, r7
    6e68:	b006      	add	sp, #24
    6e6a:	bd80      	pop	{r7, pc}
    6e6c:	00006cd5 	.word	0x00006cd5
    6e70:	00006a99 	.word	0x00006a99
    6e74:	00018ea5 	.word	0x00018ea5
    6e78:	00006aed 	.word	0x00006aed
    6e7c:	00006c71 	.word	0x00006c71

00006e80 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    6e80:	b580      	push	{r7, lr}
    6e82:	b086      	sub	sp, #24
    6e84:	af00      	add	r7, sp, #0
    6e86:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    6e88:	4b58      	ldr	r3, [pc, #352]	; (6fec <_rtc_interrupt_handler+0x16c>)
    6e8a:	687a      	ldr	r2, [r7, #4]
    6e8c:	0092      	lsls	r2, r2, #2
    6e8e:	58d3      	ldr	r3, [r2, r3]
    6e90:	613b      	str	r3, [r7, #16]

	Rtc *const rtc_module = module->hw;
    6e92:	693b      	ldr	r3, [r7, #16]
    6e94:	681b      	ldr	r3, [r3, #0]
    6e96:	60fb      	str	r3, [r7, #12]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    6e98:	230a      	movs	r3, #10
    6e9a:	18fb      	adds	r3, r7, r3
    6e9c:	693a      	ldr	r2, [r7, #16]
    6e9e:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    6ea0:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    6ea2:	693b      	ldr	r3, [r7, #16]
    6ea4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    6ea6:	b29a      	uxth	r2, r3
    6ea8:	230a      	movs	r3, #10
    6eaa:	18fb      	adds	r3, r7, r3
    6eac:	210a      	movs	r1, #10
    6eae:	1879      	adds	r1, r7, r1
    6eb0:	8809      	ldrh	r1, [r1, #0]
    6eb2:	400a      	ands	r2, r1
    6eb4:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    6eb6:	2308      	movs	r3, #8
    6eb8:	18fb      	adds	r3, r7, r3
    6eba:	68fa      	ldr	r2, [r7, #12]
    6ebc:	8992      	ldrh	r2, [r2, #12]
    6ebe:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    6ec0:	68fb      	ldr	r3, [r7, #12]
    6ec2:	895b      	ldrh	r3, [r3, #10]
    6ec4:	b29a      	uxth	r2, r3
    6ec6:	2308      	movs	r3, #8
    6ec8:	18fb      	adds	r3, r7, r3
    6eca:	2108      	movs	r1, #8
    6ecc:	1879      	adds	r1, r7, r1
    6ece:	8809      	ldrh	r1, [r1, #0]
    6ed0:	400a      	ands	r2, r1
    6ed2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    6ed4:	2308      	movs	r3, #8
    6ed6:	18fb      	adds	r3, r7, r3
    6ed8:	2200      	movs	r2, #0
    6eda:	5e9b      	ldrsh	r3, [r3, r2]
    6edc:	2b00      	cmp	r3, #0
    6ede:	da0d      	bge.n	6efc <_rtc_interrupt_handler+0x7c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    6ee0:	230a      	movs	r3, #10
    6ee2:	18fb      	adds	r3, r7, r3
    6ee4:	881a      	ldrh	r2, [r3, #0]
    6ee6:	2380      	movs	r3, #128	; 0x80
    6ee8:	00db      	lsls	r3, r3, #3
    6eea:	4013      	ands	r3, r2
    6eec:	d002      	beq.n	6ef4 <_rtc_interrupt_handler+0x74>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    6eee:	693b      	ldr	r3, [r7, #16]
    6ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6ef2:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    6ef4:	68fb      	ldr	r3, [r7, #12]
    6ef6:	4a3e      	ldr	r2, [pc, #248]	; (6ff0 <_rtc_interrupt_handler+0x170>)
    6ef8:	819a      	strh	r2, [r3, #12]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    6efa:	e072      	b.n	6fe2 <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    6efc:	2308      	movs	r3, #8
    6efe:	18fb      	adds	r3, r7, r3
    6f00:	881b      	ldrh	r3, [r3, #0]
    6f02:	22ff      	movs	r2, #255	; 0xff
    6f04:	4013      	ands	r3, r2
    6f06:	d041      	beq.n	6f8c <_rtc_interrupt_handler+0x10c>
		uint8_t i  = 0;
    6f08:	2317      	movs	r3, #23
    6f0a:	18fb      	adds	r3, r7, r3
    6f0c:	2200      	movs	r2, #0
    6f0e:	701a      	strb	r2, [r3, #0]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    6f10:	2317      	movs	r3, #23
    6f12:	18fb      	adds	r3, r7, r3
    6f14:	2200      	movs	r2, #0
    6f16:	701a      	strb	r2, [r3, #0]
    6f18:	e032      	b.n	6f80 <_rtc_interrupt_handler+0x100>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    6f1a:	2308      	movs	r3, #8
    6f1c:	18fb      	adds	r3, r7, r3
    6f1e:	881b      	ldrh	r3, [r3, #0]
    6f20:	2217      	movs	r2, #23
    6f22:	18ba      	adds	r2, r7, r2
    6f24:	7812      	ldrb	r2, [r2, #0]
    6f26:	2101      	movs	r1, #1
    6f28:	4091      	lsls	r1, r2
    6f2a:	000a      	movs	r2, r1
    6f2c:	4013      	ands	r3, r2
    6f2e:	22ff      	movs	r2, #255	; 0xff
    6f30:	4013      	ands	r3, r2
    6f32:	d012      	beq.n	6f5a <_rtc_interrupt_handler+0xda>
			  && (callback_mask & (1 << i))) {
    6f34:	230a      	movs	r3, #10
    6f36:	18fb      	adds	r3, r7, r3
    6f38:	881a      	ldrh	r2, [r3, #0]
    6f3a:	2317      	movs	r3, #23
    6f3c:	18fb      	adds	r3, r7, r3
    6f3e:	781b      	ldrb	r3, [r3, #0]
    6f40:	411a      	asrs	r2, r3
    6f42:	0013      	movs	r3, r2
    6f44:	2201      	movs	r2, #1
    6f46:	4013      	ands	r3, r2
    6f48:	d007      	beq.n	6f5a <_rtc_interrupt_handler+0xda>
				module->callbacks[i]();
    6f4a:	2317      	movs	r3, #23
    6f4c:	18fb      	adds	r3, r7, r3
    6f4e:	781a      	ldrb	r2, [r3, #0]
    6f50:	693b      	ldr	r3, [r7, #16]
    6f52:	3202      	adds	r2, #2
    6f54:	0092      	lsls	r2, r2, #2
    6f56:	58d3      	ldr	r3, [r2, r3]
    6f58:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    6f5a:	2317      	movs	r3, #23
    6f5c:	18fb      	adds	r3, r7, r3
    6f5e:	781b      	ldrb	r3, [r3, #0]
    6f60:	2201      	movs	r2, #1
    6f62:	409a      	lsls	r2, r3
    6f64:	0013      	movs	r3, r2
    6f66:	b29b      	uxth	r3, r3
    6f68:	22ff      	movs	r2, #255	; 0xff
    6f6a:	4013      	ands	r3, r2
    6f6c:	b29a      	uxth	r2, r3
    6f6e:	68fb      	ldr	r3, [r7, #12]
    6f70:	819a      	strh	r2, [r3, #12]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    6f72:	2317      	movs	r3, #23
    6f74:	18fb      	adds	r3, r7, r3
    6f76:	781a      	ldrb	r2, [r3, #0]
    6f78:	2317      	movs	r3, #23
    6f7a:	18fb      	adds	r3, r7, r3
    6f7c:	3201      	adds	r2, #1
    6f7e:	701a      	strb	r2, [r3, #0]
    6f80:	2317      	movs	r3, #23
    6f82:	18fb      	adds	r3, r7, r3
    6f84:	781b      	ldrb	r3, [r3, #0]
    6f86:	2b07      	cmp	r3, #7
    6f88:	d9c7      	bls.n	6f1a <_rtc_interrupt_handler+0x9a>
}
    6f8a:	e02a      	b.n	6fe2 <_rtc_interrupt_handler+0x162>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    6f8c:	2308      	movs	r3, #8
    6f8e:	18fb      	adds	r3, r7, r3
    6f90:	881a      	ldrh	r2, [r3, #0]
    6f92:	2380      	movs	r3, #128	; 0x80
    6f94:	005b      	lsls	r3, r3, #1
    6f96:	4013      	ands	r3, r2
    6f98:	d00e      	beq.n	6fb8 <_rtc_interrupt_handler+0x138>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    6f9a:	230a      	movs	r3, #10
    6f9c:	18fb      	adds	r3, r7, r3
    6f9e:	881a      	ldrh	r2, [r3, #0]
    6fa0:	2380      	movs	r3, #128	; 0x80
    6fa2:	005b      	lsls	r3, r3, #1
    6fa4:	4013      	ands	r3, r2
    6fa6:	d002      	beq.n	6fae <_rtc_interrupt_handler+0x12e>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    6fa8:	693b      	ldr	r3, [r7, #16]
    6faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fac:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    6fae:	68fb      	ldr	r3, [r7, #12]
    6fb0:	2280      	movs	r2, #128	; 0x80
    6fb2:	0052      	lsls	r2, r2, #1
    6fb4:	819a      	strh	r2, [r3, #12]
}
    6fb6:	e014      	b.n	6fe2 <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    6fb8:	2308      	movs	r3, #8
    6fba:	18fb      	adds	r3, r7, r3
    6fbc:	881a      	ldrh	r2, [r3, #0]
    6fbe:	2380      	movs	r3, #128	; 0x80
    6fc0:	009b      	lsls	r3, r3, #2
    6fc2:	4013      	ands	r3, r2
    6fc4:	d00d      	beq.n	6fe2 <_rtc_interrupt_handler+0x162>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    6fc6:	230a      	movs	r3, #10
    6fc8:	18fb      	adds	r3, r7, r3
    6fca:	881a      	ldrh	r2, [r3, #0]
    6fcc:	2380      	movs	r3, #128	; 0x80
    6fce:	009b      	lsls	r3, r3, #2
    6fd0:	4013      	ands	r3, r2
    6fd2:	d002      	beq.n	6fda <_rtc_interrupt_handler+0x15a>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    6fd4:	693b      	ldr	r3, [r7, #16]
    6fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6fd8:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    6fda:	68fb      	ldr	r3, [r7, #12]
    6fdc:	2280      	movs	r2, #128	; 0x80
    6fde:	0092      	lsls	r2, r2, #2
    6fe0:	819a      	strh	r2, [r3, #12]
}
    6fe2:	46c0      	nop			; (mov r8, r8)
    6fe4:	46bd      	mov	sp, r7
    6fe6:	b006      	add	sp, #24
    6fe8:	bd80      	pop	{r7, pc}
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	200013dc 	.word	0x200013dc
    6ff0:	ffff8000 	.word	0xffff8000

00006ff4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    6ff4:	b580      	push	{r7, lr}
    6ff6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    6ff8:	2000      	movs	r0, #0
    6ffa:	4b02      	ldr	r3, [pc, #8]	; (7004 <RTC_Handler+0x10>)
    6ffc:	4798      	blx	r3
}
    6ffe:	46c0      	nop			; (mov r8, r8)
    7000:	46bd      	mov	sp, r7
    7002:	bd80      	pop	{r7, pc}
    7004:	00006e81 	.word	0x00006e81

00007008 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    7008:	b580      	push	{r7, lr}
    700a:	b082      	sub	sp, #8
    700c:	af00      	add	r7, sp, #0
    700e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	2200      	movs	r2, #0
    7014:	701a      	strb	r2, [r3, #0]
}
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	46bd      	mov	sp, r7
    701a:	b002      	add	sp, #8
    701c:	bd80      	pop	{r7, pc}
	...

00007020 <system_apb_clock_set_mask>:
{
    7020:	b580      	push	{r7, lr}
    7022:	b082      	sub	sp, #8
    7024:	af00      	add	r7, sp, #0
    7026:	0002      	movs	r2, r0
    7028:	6039      	str	r1, [r7, #0]
    702a:	1dfb      	adds	r3, r7, #7
    702c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    702e:	1dfb      	adds	r3, r7, #7
    7030:	781b      	ldrb	r3, [r3, #0]
    7032:	2b04      	cmp	r3, #4
    7034:	d827      	bhi.n	7086 <system_apb_clock_set_mask+0x66>
    7036:	009a      	lsls	r2, r3, #2
    7038:	4b16      	ldr	r3, [pc, #88]	; (7094 <system_apb_clock_set_mask+0x74>)
    703a:	18d3      	adds	r3, r2, r3
    703c:	681b      	ldr	r3, [r3, #0]
    703e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    7040:	4b15      	ldr	r3, [pc, #84]	; (7098 <system_apb_clock_set_mask+0x78>)
    7042:	4a15      	ldr	r2, [pc, #84]	; (7098 <system_apb_clock_set_mask+0x78>)
    7044:	6951      	ldr	r1, [r2, #20]
    7046:	683a      	ldr	r2, [r7, #0]
    7048:	430a      	orrs	r2, r1
    704a:	615a      	str	r2, [r3, #20]
			break;
    704c:	e01d      	b.n	708a <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    704e:	4b12      	ldr	r3, [pc, #72]	; (7098 <system_apb_clock_set_mask+0x78>)
    7050:	4a11      	ldr	r2, [pc, #68]	; (7098 <system_apb_clock_set_mask+0x78>)
    7052:	6991      	ldr	r1, [r2, #24]
    7054:	683a      	ldr	r2, [r7, #0]
    7056:	430a      	orrs	r2, r1
    7058:	619a      	str	r2, [r3, #24]
			break;
    705a:	e016      	b.n	708a <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    705c:	4b0e      	ldr	r3, [pc, #56]	; (7098 <system_apb_clock_set_mask+0x78>)
    705e:	4a0e      	ldr	r2, [pc, #56]	; (7098 <system_apb_clock_set_mask+0x78>)
    7060:	69d1      	ldr	r1, [r2, #28]
    7062:	683a      	ldr	r2, [r7, #0]
    7064:	430a      	orrs	r2, r1
    7066:	61da      	str	r2, [r3, #28]
			break;
    7068:	e00f      	b.n	708a <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    706a:	4b0b      	ldr	r3, [pc, #44]	; (7098 <system_apb_clock_set_mask+0x78>)
    706c:	4a0a      	ldr	r2, [pc, #40]	; (7098 <system_apb_clock_set_mask+0x78>)
    706e:	6a11      	ldr	r1, [r2, #32]
    7070:	683a      	ldr	r2, [r7, #0]
    7072:	430a      	orrs	r2, r1
    7074:	621a      	str	r2, [r3, #32]
			break;
    7076:	e008      	b.n	708a <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    7078:	4b07      	ldr	r3, [pc, #28]	; (7098 <system_apb_clock_set_mask+0x78>)
    707a:	4a07      	ldr	r2, [pc, #28]	; (7098 <system_apb_clock_set_mask+0x78>)
    707c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    707e:	683a      	ldr	r2, [r7, #0]
    7080:	430a      	orrs	r2, r1
    7082:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    7084:	e001      	b.n	708a <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    7086:	2317      	movs	r3, #23
    7088:	e000      	b.n	708c <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    708a:	2300      	movs	r3, #0
}
    708c:	0018      	movs	r0, r3
    708e:	46bd      	mov	sp, r7
    7090:	b002      	add	sp, #8
    7092:	bd80      	pop	{r7, pc}
    7094:	00028094 	.word	0x00028094
    7098:	40000400 	.word	0x40000400

0000709c <system_pinmux_get_config_defaults>:
{
    709c:	b580      	push	{r7, lr}
    709e:	b082      	sub	sp, #8
    70a0:	af00      	add	r7, sp, #0
    70a2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    70a4:	687b      	ldr	r3, [r7, #4]
    70a6:	2280      	movs	r2, #128	; 0x80
    70a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    70aa:	687b      	ldr	r3, [r7, #4]
    70ac:	2200      	movs	r2, #0
    70ae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    70b0:	687b      	ldr	r3, [r7, #4]
    70b2:	2201      	movs	r2, #1
    70b4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    70b6:	687b      	ldr	r3, [r7, #4]
    70b8:	2200      	movs	r2, #0
    70ba:	70da      	strb	r2, [r3, #3]
}
    70bc:	46c0      	nop			; (mov r8, r8)
    70be:	46bd      	mov	sp, r7
    70c0:	b002      	add	sp, #8
    70c2:	bd80      	pop	{r7, pc}

000070c4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    70c4:	b580      	push	{r7, lr}
    70c6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    70c8:	4b05      	ldr	r3, [pc, #20]	; (70e0 <system_is_debugger_present+0x1c>)
    70ca:	789b      	ldrb	r3, [r3, #2]
    70cc:	b2db      	uxtb	r3, r3
    70ce:	001a      	movs	r2, r3
    70d0:	2302      	movs	r3, #2
    70d2:	4013      	ands	r3, r2
    70d4:	1e5a      	subs	r2, r3, #1
    70d6:	4193      	sbcs	r3, r2
    70d8:	b2db      	uxtb	r3, r3
}
    70da:	0018      	movs	r0, r3
    70dc:	46bd      	mov	sp, r7
    70de:	bd80      	pop	{r7, pc}
    70e0:	41002000 	.word	0x41002000

000070e4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    70e4:	b580      	push	{r7, lr}
    70e6:	b084      	sub	sp, #16
    70e8:	af00      	add	r7, sp, #0
    70ea:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    70ec:	687b      	ldr	r3, [r7, #4]
    70ee:	681b      	ldr	r3, [r3, #0]
    70f0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    70f2:	68fb      	ldr	r3, [r7, #12]
    70f4:	69db      	ldr	r3, [r3, #28]
    70f6:	2207      	movs	r2, #7
    70f8:	4013      	ands	r3, r2
    70fa:	1e5a      	subs	r2, r3, #1
    70fc:	4193      	sbcs	r3, r2
    70fe:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    7100:	0018      	movs	r0, r3
    7102:	46bd      	mov	sp, r7
    7104:	b004      	add	sp, #16
    7106:	bd80      	pop	{r7, pc}

00007108 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    7108:	b580      	push	{r7, lr}
    710a:	b082      	sub	sp, #8
    710c:	af00      	add	r7, sp, #0
    710e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    7110:	46c0      	nop			; (mov r8, r8)
    7112:	687b      	ldr	r3, [r7, #4]
    7114:	0018      	movs	r0, r3
    7116:	4b04      	ldr	r3, [pc, #16]	; (7128 <_i2c_master_wait_for_sync+0x20>)
    7118:	4798      	blx	r3
    711a:	1e03      	subs	r3, r0, #0
    711c:	d1f9      	bne.n	7112 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    711e:	46c0      	nop			; (mov r8, r8)
    7120:	46bd      	mov	sp, r7
    7122:	b002      	add	sp, #8
    7124:	bd80      	pop	{r7, pc}
    7126:	46c0      	nop			; (mov r8, r8)
    7128:	000070e5 	.word	0x000070e5

0000712c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    712c:	b5f0      	push	{r4, r5, r6, r7, lr}
    712e:	b097      	sub	sp, #92	; 0x5c
    7130:	af00      	add	r7, sp, #0
    7132:	6178      	str	r0, [r7, #20]
    7134:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    7136:	2300      	movs	r3, #0
    7138:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    713a:	2300      	movs	r3, #0
    713c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    713e:	2300      	movs	r3, #0
    7140:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    7142:	233b      	movs	r3, #59	; 0x3b
    7144:	2210      	movs	r2, #16
    7146:	4694      	mov	ip, r2
    7148:	44bc      	add	ip, r7
    714a:	4463      	add	r3, ip
    714c:	2200      	movs	r2, #0
    714e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7150:	697b      	ldr	r3, [r7, #20]
    7152:	681b      	ldr	r3, [r3, #0]
    7154:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    7156:	697b      	ldr	r3, [r7, #20]
    7158:	681b      	ldr	r3, [r3, #0]
    715a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    715c:	2323      	movs	r3, #35	; 0x23
    715e:	2210      	movs	r2, #16
    7160:	18ba      	adds	r2, r7, r2
    7162:	18d4      	adds	r4, r2, r3
    7164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7166:	0018      	movs	r0, r3
    7168:	4bc0      	ldr	r3, [pc, #768]	; (746c <_i2c_master_set_config+0x340>)
    716a:	4798      	blx	r3
    716c:	0003      	movs	r3, r0
    716e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    7170:	230c      	movs	r3, #12
    7172:	2210      	movs	r2, #16
    7174:	4694      	mov	ip, r2
    7176:	44bc      	add	ip, r7
    7178:	4463      	add	r3, ip
    717a:	0018      	movs	r0, r3
    717c:	4bbc      	ldr	r3, [pc, #752]	; (7470 <_i2c_master_set_config+0x344>)
    717e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    7180:	693b      	ldr	r3, [r7, #16]
    7182:	69db      	ldr	r3, [r3, #28]
    7184:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    7186:	693b      	ldr	r3, [r7, #16]
    7188:	6a1b      	ldr	r3, [r3, #32]
    718a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    718c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    718e:	2b00      	cmp	r3, #0
    7190:	d106      	bne.n	71a0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    7192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7194:	2100      	movs	r1, #0
    7196:	0018      	movs	r0, r3
    7198:	4bb6      	ldr	r3, [pc, #728]	; (7474 <_i2c_master_set_config+0x348>)
    719a:	4798      	blx	r3
    719c:	0003      	movs	r3, r0
    719e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    71a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    71a2:	b2da      	uxtb	r2, r3
    71a4:	230c      	movs	r3, #12
    71a6:	2110      	movs	r1, #16
    71a8:	468c      	mov	ip, r1
    71aa:	44bc      	add	ip, r7
    71ac:	4463      	add	r3, ip
    71ae:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    71b0:	230c      	movs	r3, #12
    71b2:	2210      	movs	r2, #16
    71b4:	4694      	mov	ip, r2
    71b6:	44bc      	add	ip, r7
    71b8:	4463      	add	r3, ip
    71ba:	2202      	movs	r2, #2
    71bc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    71be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    71c0:	0c1b      	lsrs	r3, r3, #16
    71c2:	b2db      	uxtb	r3, r3
    71c4:	220c      	movs	r2, #12
    71c6:	2110      	movs	r1, #16
    71c8:	468c      	mov	ip, r1
    71ca:	44bc      	add	ip, r7
    71cc:	4462      	add	r2, ip
    71ce:	0011      	movs	r1, r2
    71d0:	0018      	movs	r0, r3
    71d2:	4ba9      	ldr	r3, [pc, #676]	; (7478 <_i2c_master_set_config+0x34c>)
    71d4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    71d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    71d8:	2b00      	cmp	r3, #0
    71da:	d106      	bne.n	71ea <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    71dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71de:	2101      	movs	r1, #1
    71e0:	0018      	movs	r0, r3
    71e2:	4ba4      	ldr	r3, [pc, #656]	; (7474 <_i2c_master_set_config+0x348>)
    71e4:	4798      	blx	r3
    71e6:	0003      	movs	r3, r0
    71e8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    71ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    71ec:	b2da      	uxtb	r2, r3
    71ee:	230c      	movs	r3, #12
    71f0:	2110      	movs	r1, #16
    71f2:	468c      	mov	ip, r1
    71f4:	44bc      	add	ip, r7
    71f6:	4463      	add	r3, ip
    71f8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    71fa:	230c      	movs	r3, #12
    71fc:	2210      	movs	r2, #16
    71fe:	4694      	mov	ip, r2
    7200:	44bc      	add	ip, r7
    7202:	4463      	add	r3, ip
    7204:	2202      	movs	r2, #2
    7206:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    7208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    720a:	0c1b      	lsrs	r3, r3, #16
    720c:	b2db      	uxtb	r3, r3
    720e:	220c      	movs	r2, #12
    7210:	2110      	movs	r1, #16
    7212:	468c      	mov	ip, r1
    7214:	44bc      	add	ip, r7
    7216:	4462      	add	r2, ip
    7218:	0011      	movs	r1, r2
    721a:	0018      	movs	r0, r3
    721c:	4b96      	ldr	r3, [pc, #600]	; (7478 <_i2c_master_set_config+0x34c>)
    721e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    7220:	693b      	ldr	r3, [r7, #16]
    7222:	8a9a      	ldrh	r2, [r3, #20]
    7224:	697b      	ldr	r3, [r7, #20]
    7226:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    7228:	693b      	ldr	r3, [r7, #16]
    722a:	8ada      	ldrh	r2, [r3, #22]
    722c:	697b      	ldr	r3, [r7, #20]
    722e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    7230:	693b      	ldr	r3, [r7, #16]
    7232:	7e1b      	ldrb	r3, [r3, #24]
    7234:	2b00      	cmp	r3, #0
    7236:	d103      	bne.n	7240 <_i2c_master_set_config+0x114>
    7238:	4b90      	ldr	r3, [pc, #576]	; (747c <_i2c_master_set_config+0x350>)
    723a:	4798      	blx	r3
    723c:	1e03      	subs	r3, r0, #0
    723e:	d002      	beq.n	7246 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    7240:	2380      	movs	r3, #128	; 0x80
    7242:	657b      	str	r3, [r7, #84]	; 0x54
    7244:	e001      	b.n	724a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    7246:	2300      	movs	r3, #0
    7248:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    724a:	693b      	ldr	r3, [r7, #16]
    724c:	691b      	ldr	r3, [r3, #16]
    724e:	2b00      	cmp	r3, #0
    7250:	d004      	beq.n	725c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    7252:	693b      	ldr	r3, [r7, #16]
    7254:	691b      	ldr	r3, [r3, #16]
    7256:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    7258:	4313      	orrs	r3, r2
    725a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    725c:	693b      	ldr	r3, [r7, #16]
    725e:	689b      	ldr	r3, [r3, #8]
    7260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    7262:	4313      	orrs	r3, r2
    7264:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    7266:	693b      	ldr	r3, [r7, #16]
    7268:	2224      	movs	r2, #36	; 0x24
    726a:	5c9b      	ldrb	r3, [r3, r2]
    726c:	2b00      	cmp	r3, #0
    726e:	d004      	beq.n	727a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    7270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7272:	2280      	movs	r2, #128	; 0x80
    7274:	05d2      	lsls	r2, r2, #23
    7276:	4313      	orrs	r3, r2
    7278:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    727a:	693b      	ldr	r3, [r7, #16]
    727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    727e:	2b00      	cmp	r3, #0
    7280:	d004      	beq.n	728c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    7282:	693b      	ldr	r3, [r7, #16]
    7284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7286:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    7288:	4313      	orrs	r3, r2
    728a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    728c:	693b      	ldr	r3, [r7, #16]
    728e:	222c      	movs	r2, #44	; 0x2c
    7290:	5c9b      	ldrb	r3, [r3, r2]
    7292:	2b00      	cmp	r3, #0
    7294:	d105      	bne.n	72a2 <_i2c_master_set_config+0x176>
    7296:	693b      	ldr	r3, [r7, #16]
    7298:	689a      	ldr	r2, [r3, #8]
    729a:	2380      	movs	r3, #128	; 0x80
    729c:	049b      	lsls	r3, r3, #18
    729e:	429a      	cmp	r2, r3
    72a0:	d104      	bne.n	72ac <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    72a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    72a4:	2280      	movs	r2, #128	; 0x80
    72a6:	0512      	lsls	r2, r2, #20
    72a8:	4313      	orrs	r3, r2
    72aa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    72ac:	693b      	ldr	r3, [r7, #16]
    72ae:	222d      	movs	r2, #45	; 0x2d
    72b0:	5c9b      	ldrb	r3, [r3, r2]
    72b2:	2b00      	cmp	r3, #0
    72b4:	d004      	beq.n	72c0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    72b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    72b8:	2280      	movs	r2, #128	; 0x80
    72ba:	0412      	lsls	r2, r2, #16
    72bc:	4313      	orrs	r3, r2
    72be:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    72c0:	693b      	ldr	r3, [r7, #16]
    72c2:	222e      	movs	r2, #46	; 0x2e
    72c4:	5c9b      	ldrb	r3, [r3, r2]
    72c6:	2b00      	cmp	r3, #0
    72c8:	d004      	beq.n	72d4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    72ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    72cc:	2280      	movs	r2, #128	; 0x80
    72ce:	03d2      	lsls	r2, r2, #15
    72d0:	4313      	orrs	r3, r2
    72d2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    72d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    72d6:	681a      	ldr	r2, [r3, #0]
    72d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    72da:	431a      	orrs	r2, r3
    72dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    72de:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    72e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    72e2:	2280      	movs	r2, #128	; 0x80
    72e4:	0052      	lsls	r2, r2, #1
    72e6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    72e8:	2323      	movs	r3, #35	; 0x23
    72ea:	2210      	movs	r2, #16
    72ec:	4694      	mov	ip, r2
    72ee:	44bc      	add	ip, r7
    72f0:	4463      	add	r3, ip
    72f2:	781b      	ldrb	r3, [r3, #0]
    72f4:	3312      	adds	r3, #18
    72f6:	b2db      	uxtb	r3, r3
    72f8:	0018      	movs	r0, r3
    72fa:	4b61      	ldr	r3, [pc, #388]	; (7480 <_i2c_master_set_config+0x354>)
    72fc:	4798      	blx	r3
    72fe:	0003      	movs	r3, r0
    7300:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    7302:	693b      	ldr	r3, [r7, #16]
    7304:	681b      	ldr	r3, [r3, #0]
    7306:	22fa      	movs	r2, #250	; 0xfa
    7308:	0092      	lsls	r2, r2, #2
    730a:	4353      	muls	r3, r2
    730c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    730e:	693b      	ldr	r3, [r7, #16]
    7310:	685b      	ldr	r3, [r3, #4]
    7312:	22fa      	movs	r2, #250	; 0xfa
    7314:	0092      	lsls	r2, r2, #2
    7316:	4353      	muls	r3, r2
    7318:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    731a:	693b      	ldr	r3, [r7, #16]
    731c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    731e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    7320:	4b58      	ldr	r3, [pc, #352]	; (7484 <_i2c_master_set_config+0x358>)
    7322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    7324:	4798      	blx	r3
    7326:	0005      	movs	r5, r0
    7328:	000e      	movs	r6, r1
    732a:	4b56      	ldr	r3, [pc, #344]	; (7484 <_i2c_master_set_config+0x358>)
    732c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    732e:	4798      	blx	r3
    7330:	60b8      	str	r0, [r7, #8]
    7332:	60f9      	str	r1, [r7, #12]
    7334:	4b53      	ldr	r3, [pc, #332]	; (7484 <_i2c_master_set_config+0x358>)
    7336:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    7338:	4798      	blx	r3
    733a:	4c53      	ldr	r4, [pc, #332]	; (7488 <_i2c_master_set_config+0x35c>)
    733c:	4a53      	ldr	r2, [pc, #332]	; (748c <_i2c_master_set_config+0x360>)
    733e:	4b54      	ldr	r3, [pc, #336]	; (7490 <_i2c_master_set_config+0x364>)
    7340:	47a0      	blx	r4
    7342:	0003      	movs	r3, r0
    7344:	000c      	movs	r4, r1
    7346:	603b      	str	r3, [r7, #0]
    7348:	607c      	str	r4, [r7, #4]
    734a:	4b4e      	ldr	r3, [pc, #312]	; (7484 <_i2c_master_set_config+0x358>)
    734c:	6a38      	ldr	r0, [r7, #32]
    734e:	4798      	blx	r3
    7350:	0002      	movs	r2, r0
    7352:	000b      	movs	r3, r1
    7354:	4c4c      	ldr	r4, [pc, #304]	; (7488 <_i2c_master_set_config+0x35c>)
    7356:	6838      	ldr	r0, [r7, #0]
    7358:	6879      	ldr	r1, [r7, #4]
    735a:	47a0      	blx	r4
    735c:	0003      	movs	r3, r0
    735e:	000c      	movs	r4, r1
    7360:	0018      	movs	r0, r3
    7362:	0021      	movs	r1, r4
    7364:	4c4b      	ldr	r4, [pc, #300]	; (7494 <_i2c_master_set_config+0x368>)
    7366:	2200      	movs	r2, #0
    7368:	4b4b      	ldr	r3, [pc, #300]	; (7498 <_i2c_master_set_config+0x36c>)
    736a:	47a0      	blx	r4
    736c:	0003      	movs	r3, r0
    736e:	000c      	movs	r4, r1
    7370:	001a      	movs	r2, r3
    7372:	0023      	movs	r3, r4
    7374:	4c44      	ldr	r4, [pc, #272]	; (7488 <_i2c_master_set_config+0x35c>)
    7376:	68b8      	ldr	r0, [r7, #8]
    7378:	68f9      	ldr	r1, [r7, #12]
    737a:	47a0      	blx	r4
    737c:	0003      	movs	r3, r0
    737e:	000c      	movs	r4, r1
    7380:	001a      	movs	r2, r3
    7382:	0023      	movs	r3, r4
    7384:	4c45      	ldr	r4, [pc, #276]	; (749c <_i2c_master_set_config+0x370>)
    7386:	0028      	movs	r0, r5
    7388:	0031      	movs	r1, r6
    738a:	47a0      	blx	r4
    738c:	0003      	movs	r3, r0
    738e:	000c      	movs	r4, r1
    7390:	001d      	movs	r5, r3
    7392:	0026      	movs	r6, r4
    7394:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7396:	005a      	lsls	r2, r3, #1
    7398:	4b3a      	ldr	r3, [pc, #232]	; (7484 <_i2c_master_set_config+0x358>)
    739a:	0010      	movs	r0, r2
    739c:	4798      	blx	r3
    739e:	0002      	movs	r2, r0
    73a0:	000b      	movs	r3, r1
    73a2:	4c3c      	ldr	r4, [pc, #240]	; (7494 <_i2c_master_set_config+0x368>)
    73a4:	0028      	movs	r0, r5
    73a6:	0031      	movs	r1, r6
    73a8:	47a0      	blx	r4
    73aa:	0003      	movs	r3, r0
    73ac:	000c      	movs	r4, r1
    73ae:	0018      	movs	r0, r3
    73b0:	0021      	movs	r1, r4
    73b2:	4c3a      	ldr	r4, [pc, #232]	; (749c <_i2c_master_set_config+0x370>)
    73b4:	2200      	movs	r2, #0
    73b6:	4b3a      	ldr	r3, [pc, #232]	; (74a0 <_i2c_master_set_config+0x374>)
    73b8:	47a0      	blx	r4
    73ba:	0003      	movs	r3, r0
    73bc:	000c      	movs	r4, r1
    73be:	001d      	movs	r5, r3
    73c0:	0026      	movs	r6, r4
    73c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    73c4:	005a      	lsls	r2, r3, #1
    73c6:	4b2f      	ldr	r3, [pc, #188]	; (7484 <_i2c_master_set_config+0x358>)
    73c8:	0010      	movs	r0, r2
    73ca:	4798      	blx	r3
    73cc:	0002      	movs	r2, r0
    73ce:	000b      	movs	r3, r1
    73d0:	4c34      	ldr	r4, [pc, #208]	; (74a4 <_i2c_master_set_config+0x378>)
    73d2:	0028      	movs	r0, r5
    73d4:	0031      	movs	r1, r6
    73d6:	47a0      	blx	r4
    73d8:	0003      	movs	r3, r0
    73da:	000c      	movs	r4, r1
    73dc:	0019      	movs	r1, r3
    73de:	0022      	movs	r2, r4
    73e0:	4b31      	ldr	r3, [pc, #196]	; (74a8 <_i2c_master_set_config+0x37c>)
    73e2:	0008      	movs	r0, r1
    73e4:	0011      	movs	r1, r2
    73e6:	4798      	blx	r3
    73e8:	0003      	movs	r3, r0
    73ea:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    73ec:	693b      	ldr	r3, [r7, #16]
    73ee:	689a      	ldr	r2, [r3, #8]
    73f0:	2380      	movs	r3, #128	; 0x80
    73f2:	049b      	lsls	r3, r3, #18
    73f4:	429a      	cmp	r2, r3
    73f6:	d16a      	bne.n	74ce <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    73f8:	4b22      	ldr	r3, [pc, #136]	; (7484 <_i2c_master_set_config+0x358>)
    73fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    73fc:	4798      	blx	r3
    73fe:	4c25      	ldr	r4, [pc, #148]	; (7494 <_i2c_master_set_config+0x368>)
    7400:	0002      	movs	r2, r0
    7402:	000b      	movs	r3, r1
    7404:	47a0      	blx	r4
    7406:	0003      	movs	r3, r0
    7408:	000c      	movs	r4, r1
    740a:	001d      	movs	r5, r3
    740c:	0026      	movs	r6, r4
    740e:	4b1d      	ldr	r3, [pc, #116]	; (7484 <_i2c_master_set_config+0x358>)
    7410:	6a78      	ldr	r0, [r7, #36]	; 0x24
    7412:	4798      	blx	r3
    7414:	4c1c      	ldr	r4, [pc, #112]	; (7488 <_i2c_master_set_config+0x35c>)
    7416:	2200      	movs	r2, #0
    7418:	4b24      	ldr	r3, [pc, #144]	; (74ac <_i2c_master_set_config+0x380>)
    741a:	47a0      	blx	r4
    741c:	0003      	movs	r3, r0
    741e:	000c      	movs	r4, r1
    7420:	001a      	movs	r2, r3
    7422:	0023      	movs	r3, r4
    7424:	4c1f      	ldr	r4, [pc, #124]	; (74a4 <_i2c_master_set_config+0x378>)
    7426:	0028      	movs	r0, r5
    7428:	0031      	movs	r1, r6
    742a:	47a0      	blx	r4
    742c:	0003      	movs	r3, r0
    742e:	000c      	movs	r4, r1
    7430:	0018      	movs	r0, r3
    7432:	0021      	movs	r1, r4
    7434:	4c19      	ldr	r4, [pc, #100]	; (749c <_i2c_master_set_config+0x370>)
    7436:	2200      	movs	r2, #0
    7438:	4b19      	ldr	r3, [pc, #100]	; (74a0 <_i2c_master_set_config+0x374>)
    743a:	47a0      	blx	r4
    743c:	0003      	movs	r3, r0
    743e:	000c      	movs	r4, r1
    7440:	0019      	movs	r1, r3
    7442:	0022      	movs	r2, r4
    7444:	4b18      	ldr	r3, [pc, #96]	; (74a8 <_i2c_master_set_config+0x37c>)
    7446:	0008      	movs	r0, r1
    7448:	0011      	movs	r1, r2
    744a:	4798      	blx	r3
    744c:	0003      	movs	r3, r0
    744e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    7450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    7452:	2b00      	cmp	r3, #0
    7454:	d02e      	beq.n	74b4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    7456:	4b16      	ldr	r3, [pc, #88]	; (74b0 <_i2c_master_set_config+0x384>)
    7458:	6a79      	ldr	r1, [r7, #36]	; 0x24
    745a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    745c:	4798      	blx	r3
    745e:	0003      	movs	r3, r0
    7460:	1e9a      	subs	r2, r3, #2
    7462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    7464:	1ad3      	subs	r3, r2, r3
    7466:	653b      	str	r3, [r7, #80]	; 0x50
    7468:	e031      	b.n	74ce <_i2c_master_set_config+0x3a2>
    746a:	46c0      	nop			; (mov r8, r8)
    746c:	000180a9 	.word	0x000180a9
    7470:	0000709d 	.word	0x0000709d
    7474:	00017eed 	.word	0x00017eed
    7478:	00018ea5 	.word	0x00018ea5
    747c:	000070c5 	.word	0x000070c5
    7480:	00018ce1 	.word	0x00018ce1
    7484:	0002399d 	.word	0x0002399d
    7488:	00022d45 	.word	0x00022d45
    748c:	e826d695 	.word	0xe826d695
    7490:	3e112e0b 	.word	0x3e112e0b
    7494:	00021ebd 	.word	0x00021ebd
    7498:	40240000 	.word	0x40240000
    749c:	00023245 	.word	0x00023245
    74a0:	3ff00000 	.word	0x3ff00000
    74a4:	000224dd 	.word	0x000224dd
    74a8:	000238b1 	.word	0x000238b1
    74ac:	40080000 	.word	0x40080000
    74b0:	00020bbd 	.word	0x00020bbd
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    74b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    74b6:	005a      	lsls	r2, r3, #1
    74b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74ba:	18d3      	adds	r3, r2, r3
    74bc:	1e5a      	subs	r2, r3, #1
    74be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    74c0:	0059      	lsls	r1, r3, #1
    74c2:	4b1d      	ldr	r3, [pc, #116]	; (7538 <_i2c_master_set_config+0x40c>)
    74c4:	0010      	movs	r0, r2
    74c6:	4798      	blx	r3
    74c8:	0003      	movs	r3, r0
    74ca:	3b01      	subs	r3, #1
    74cc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    74ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    74d0:	2bff      	cmp	r3, #255	; 0xff
    74d2:	dc08      	bgt.n	74e6 <_i2c_master_set_config+0x3ba>
    74d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    74d6:	2b00      	cmp	r3, #0
    74d8:	db05      	blt.n	74e6 <_i2c_master_set_config+0x3ba>
    74da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    74dc:	2bff      	cmp	r3, #255	; 0xff
    74de:	dc02      	bgt.n	74e6 <_i2c_master_set_config+0x3ba>
    74e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    74e2:	2b00      	cmp	r3, #0
    74e4:	da06      	bge.n	74f4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    74e6:	233b      	movs	r3, #59	; 0x3b
    74e8:	2210      	movs	r2, #16
    74ea:	4694      	mov	ip, r2
    74ec:	44bc      	add	ip, r7
    74ee:	4463      	add	r3, ip
    74f0:	2240      	movs	r2, #64	; 0x40
    74f2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    74f4:	233b      	movs	r3, #59	; 0x3b
    74f6:	2210      	movs	r2, #16
    74f8:	4694      	mov	ip, r2
    74fa:	44bc      	add	ip, r7
    74fc:	4463      	add	r3, ip
    74fe:	781b      	ldrb	r3, [r3, #0]
    7500:	2b40      	cmp	r3, #64	; 0x40
    7502:	d00e      	beq.n	7522 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    7504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7506:	22ff      	movs	r2, #255	; 0xff
    7508:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    750a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    750c:	041b      	lsls	r3, r3, #16
    750e:	0019      	movs	r1, r3
    7510:	23ff      	movs	r3, #255	; 0xff
    7512:	041b      	lsls	r3, r3, #16
    7514:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    7516:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    7518:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    751a:	0612      	lsls	r2, r2, #24
    751c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7520:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    7522:	233b      	movs	r3, #59	; 0x3b
    7524:	2210      	movs	r2, #16
    7526:	4694      	mov	ip, r2
    7528:	44bc      	add	ip, r7
    752a:	4463      	add	r3, ip
    752c:	781b      	ldrb	r3, [r3, #0]
}
    752e:	0018      	movs	r0, r3
    7530:	46bd      	mov	sp, r7
    7532:	b017      	add	sp, #92	; 0x5c
    7534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7536:	46c0      	nop			; (mov r8, r8)
    7538:	00020bbd 	.word	0x00020bbd

0000753c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    753c:	b590      	push	{r4, r7, lr}
    753e:	b08b      	sub	sp, #44	; 0x2c
    7540:	af00      	add	r7, sp, #0
    7542:	60f8      	str	r0, [r7, #12]
    7544:	60b9      	str	r1, [r7, #8]
    7546:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    7548:	68fb      	ldr	r3, [r7, #12]
    754a:	68ba      	ldr	r2, [r7, #8]
    754c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    754e:	68fb      	ldr	r3, [r7, #12]
    7550:	681b      	ldr	r3, [r3, #0]
    7552:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7554:	68fb      	ldr	r3, [r7, #12]
    7556:	681b      	ldr	r3, [r3, #0]
    7558:	0018      	movs	r0, r3
    755a:	4b44      	ldr	r3, [pc, #272]	; (766c <i2c_master_init+0x130>)
    755c:	4798      	blx	r3
    755e:	0003      	movs	r3, r0
    7560:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    7562:	69bb      	ldr	r3, [r7, #24]
    7564:	2b05      	cmp	r3, #5
    7566:	d104      	bne.n	7572 <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    7568:	2301      	movs	r3, #1
    756a:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    756c:	2318      	movs	r3, #24
    756e:	623b      	str	r3, [r7, #32]
    7570:	e004      	b.n	757c <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    7572:	69bb      	ldr	r3, [r7, #24]
    7574:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7576:	69bb      	ldr	r3, [r7, #24]
    7578:	3312      	adds	r3, #18
    757a:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    757c:	69bb      	ldr	r3, [r7, #24]
    757e:	2b05      	cmp	r3, #5
    7580:	d108      	bne.n	7594 <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    7582:	2201      	movs	r2, #1
    7584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7586:	409a      	lsls	r2, r3
    7588:	0013      	movs	r3, r2
    758a:	0019      	movs	r1, r3
    758c:	2003      	movs	r0, #3
    758e:	4b38      	ldr	r3, [pc, #224]	; (7670 <i2c_master_init+0x134>)
    7590:	4798      	blx	r3
    7592:	e007      	b.n	75a4 <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7594:	2201      	movs	r2, #1
    7596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7598:	409a      	lsls	r2, r3
    759a:	0013      	movs	r3, r2
    759c:	0019      	movs	r1, r3
    759e:	2002      	movs	r0, #2
    75a0:	4b33      	ldr	r3, [pc, #204]	; (7670 <i2c_master_init+0x134>)
    75a2:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    75a4:	2314      	movs	r3, #20
    75a6:	18fb      	adds	r3, r7, r3
    75a8:	0018      	movs	r0, r3
    75aa:	4b32      	ldr	r3, [pc, #200]	; (7674 <i2c_master_init+0x138>)
    75ac:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    75ae:	687b      	ldr	r3, [r7, #4]
    75b0:	7b1a      	ldrb	r2, [r3, #12]
    75b2:	2314      	movs	r3, #20
    75b4:	18fb      	adds	r3, r7, r3
    75b6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    75b8:	6a3b      	ldr	r3, [r7, #32]
    75ba:	b2db      	uxtb	r3, r3
    75bc:	2214      	movs	r2, #20
    75be:	18ba      	adds	r2, r7, r2
    75c0:	0011      	movs	r1, r2
    75c2:	0018      	movs	r0, r3
    75c4:	4b2c      	ldr	r3, [pc, #176]	; (7678 <i2c_master_init+0x13c>)
    75c6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    75c8:	6a3b      	ldr	r3, [r7, #32]
    75ca:	b2db      	uxtb	r3, r3
    75cc:	0018      	movs	r0, r3
    75ce:	4b2b      	ldr	r3, [pc, #172]	; (767c <i2c_master_init+0x140>)
    75d0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	7b1b      	ldrb	r3, [r3, #12]
    75d6:	2100      	movs	r1, #0
    75d8:	0018      	movs	r0, r3
    75da:	4b29      	ldr	r3, [pc, #164]	; (7680 <i2c_master_init+0x144>)
    75dc:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    75de:	69fb      	ldr	r3, [r7, #28]
    75e0:	681b      	ldr	r3, [r3, #0]
    75e2:	2202      	movs	r2, #2
    75e4:	4013      	ands	r3, r2
    75e6:	d001      	beq.n	75ec <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
    75e8:	231c      	movs	r3, #28
    75ea:	e03b      	b.n	7664 <i2c_master_init+0x128>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    75ec:	69fb      	ldr	r3, [r7, #28]
    75ee:	681b      	ldr	r3, [r3, #0]
    75f0:	2201      	movs	r2, #1
    75f2:	4013      	ands	r3, r2
    75f4:	d001      	beq.n	75fa <i2c_master_init+0xbe>
		return STATUS_BUSY;
    75f6:	2305      	movs	r3, #5
    75f8:	e034      	b.n	7664 <i2c_master_init+0x128>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    75fa:	68fb      	ldr	r3, [r7, #12]
    75fc:	681b      	ldr	r3, [r3, #0]
    75fe:	2217      	movs	r2, #23
    7600:	18bc      	adds	r4, r7, r2
    7602:	0018      	movs	r0, r3
    7604:	4b19      	ldr	r3, [pc, #100]	; (766c <i2c_master_init+0x130>)
    7606:	4798      	blx	r3
    7608:	0003      	movs	r3, r0
    760a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    760c:	4a1d      	ldr	r2, [pc, #116]	; (7684 <i2c_master_init+0x148>)
    760e:	2317      	movs	r3, #23
    7610:	18fb      	adds	r3, r7, r3
    7612:	781b      	ldrb	r3, [r3, #0]
    7614:	0011      	movs	r1, r2
    7616:	0018      	movs	r0, r3
    7618:	4b1b      	ldr	r3, [pc, #108]	; (7688 <i2c_master_init+0x14c>)
    761a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    761c:	2317      	movs	r3, #23
    761e:	18fb      	adds	r3, r7, r3
    7620:	781a      	ldrb	r2, [r3, #0]
    7622:	4b1a      	ldr	r3, [pc, #104]	; (768c <i2c_master_init+0x150>)
    7624:	0092      	lsls	r2, r2, #2
    7626:	68f9      	ldr	r1, [r7, #12]
    7628:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    762a:	68fb      	ldr	r3, [r7, #12]
    762c:	2200      	movs	r2, #0
    762e:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    7630:	68fb      	ldr	r3, [r7, #12]
    7632:	2200      	movs	r2, #0
    7634:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    7636:	68fb      	ldr	r3, [r7, #12]
    7638:	2200      	movs	r2, #0
    763a:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    763c:	68fb      	ldr	r3, [r7, #12]
    763e:	2200      	movs	r2, #0
    7640:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    7642:	68fb      	ldr	r3, [r7, #12]
    7644:	2225      	movs	r2, #37	; 0x25
    7646:	2100      	movs	r1, #0
    7648:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    764a:	68fb      	ldr	r3, [r7, #12]
    764c:	2200      	movs	r2, #0
    764e:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    7650:	69fb      	ldr	r3, [r7, #28]
    7652:	2214      	movs	r2, #20
    7654:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    7656:	687a      	ldr	r2, [r7, #4]
    7658:	68fb      	ldr	r3, [r7, #12]
    765a:	0011      	movs	r1, r2
    765c:	0018      	movs	r0, r3
    765e:	4b0c      	ldr	r3, [pc, #48]	; (7690 <i2c_master_init+0x154>)
    7660:	4798      	blx	r3
    7662:	0003      	movs	r3, r0
}
    7664:	0018      	movs	r0, r3
    7666:	46bd      	mov	sp, r7
    7668:	b00b      	add	sp, #44	; 0x2c
    766a:	bd90      	pop	{r4, r7, pc}
    766c:	000180a9 	.word	0x000180a9
    7670:	00007021 	.word	0x00007021
    7674:	00007009 	.word	0x00007009
    7678:	00018bf1 	.word	0x00018bf1
    767c:	00018c31 	.word	0x00018c31
    7680:	00017e61 	.word	0x00017e61
    7684:	00007e81 	.word	0x00007e81
    7688:	00008109 	.word	0x00008109
    768c:	200013e0 	.word	0x200013e0
    7690:	0000712d 	.word	0x0000712d

00007694 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    7694:	b580      	push	{r7, lr}
    7696:	b084      	sub	sp, #16
    7698:	af00      	add	r7, sp, #0
    769a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    769c:	687b      	ldr	r3, [r7, #4]
    769e:	681b      	ldr	r3, [r3, #0]
    76a0:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    76a2:	68fb      	ldr	r3, [r7, #12]
    76a4:	7e1b      	ldrb	r3, [r3, #24]
    76a6:	b2db      	uxtb	r3, r3
    76a8:	001a      	movs	r2, r3
    76aa:	2302      	movs	r3, #2
    76ac:	4013      	ands	r3, r2
    76ae:	d00b      	beq.n	76c8 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    76b0:	68fb      	ldr	r3, [r7, #12]
    76b2:	2202      	movs	r2, #2
    76b4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    76b6:	68fb      	ldr	r3, [r7, #12]
    76b8:	8b5b      	ldrh	r3, [r3, #26]
    76ba:	b29b      	uxth	r3, r3
    76bc:	001a      	movs	r2, r3
    76be:	2302      	movs	r3, #2
    76c0:	4013      	ands	r3, r2
    76c2:	d011      	beq.n	76e8 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    76c4:	2341      	movs	r3, #65	; 0x41
    76c6:	e010      	b.n	76ea <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    76c8:	68fb      	ldr	r3, [r7, #12]
    76ca:	8b5b      	ldrh	r3, [r3, #26]
    76cc:	b29b      	uxth	r3, r3
    76ce:	001a      	movs	r2, r3
    76d0:	2304      	movs	r3, #4
    76d2:	4013      	ands	r3, r2
    76d4:	d008      	beq.n	76e8 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    76d6:	68fb      	ldr	r3, [r7, #12]
    76d8:	685b      	ldr	r3, [r3, #4]
    76da:	22c0      	movs	r2, #192	; 0xc0
    76dc:	0292      	lsls	r2, r2, #10
    76de:	431a      	orrs	r2, r3
    76e0:	68fb      	ldr	r3, [r7, #12]
    76e2:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    76e4:	2318      	movs	r3, #24
    76e6:	e000      	b.n	76ea <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    76e8:	2300      	movs	r3, #0
}
    76ea:	0018      	movs	r0, r3
    76ec:	46bd      	mov	sp, r7
    76ee:	b004      	add	sp, #16
    76f0:	bd80      	pop	{r7, pc}

000076f2 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    76f2:	b580      	push	{r7, lr}
    76f4:	b084      	sub	sp, #16
    76f6:	af00      	add	r7, sp, #0
    76f8:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    76fa:	687b      	ldr	r3, [r7, #4]
    76fc:	681b      	ldr	r3, [r3, #0]
    76fe:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    7700:	230e      	movs	r3, #14
    7702:	18fb      	adds	r3, r7, r3
    7704:	2200      	movs	r2, #0
    7706:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    7708:	e00f      	b.n	772a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    770a:	230e      	movs	r3, #14
    770c:	18fb      	adds	r3, r7, r3
    770e:	220e      	movs	r2, #14
    7710:	18ba      	adds	r2, r7, r2
    7712:	8812      	ldrh	r2, [r2, #0]
    7714:	3201      	adds	r2, #1
    7716:	801a      	strh	r2, [r3, #0]
    7718:	687b      	ldr	r3, [r7, #4]
    771a:	891b      	ldrh	r3, [r3, #8]
    771c:	220e      	movs	r2, #14
    771e:	18ba      	adds	r2, r7, r2
    7720:	8812      	ldrh	r2, [r2, #0]
    7722:	429a      	cmp	r2, r3
    7724:	d301      	bcc.n	772a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    7726:	2312      	movs	r3, #18
    7728:	e00e      	b.n	7748 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    772a:	68bb      	ldr	r3, [r7, #8]
    772c:	7e1b      	ldrb	r3, [r3, #24]
    772e:	b2db      	uxtb	r3, r3
    7730:	001a      	movs	r2, r3
    7732:	2301      	movs	r3, #1
    7734:	4013      	ands	r3, r2
    7736:	d106      	bne.n	7746 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    7738:	68bb      	ldr	r3, [r7, #8]
    773a:	7e1b      	ldrb	r3, [r3, #24]
    773c:	b2db      	uxtb	r3, r3
    773e:	001a      	movs	r2, r3
    7740:	2302      	movs	r3, #2
    7742:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    7744:	d0e1      	beq.n	770a <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    7746:	2300      	movs	r3, #0
}
    7748:	0018      	movs	r0, r3
    774a:	46bd      	mov	sp, r7
    774c:	b004      	add	sp, #16
    774e:	bd80      	pop	{r7, pc}

00007750 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    7750:	b590      	push	{r4, r7, lr}
    7752:	b085      	sub	sp, #20
    7754:	af00      	add	r7, sp, #0
    7756:	6078      	str	r0, [r7, #4]
    7758:	000a      	movs	r2, r1
    775a:	1cfb      	adds	r3, r7, #3
    775c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    775e:	687b      	ldr	r3, [r7, #4]
    7760:	681b      	ldr	r3, [r3, #0]
    7762:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7764:	68fb      	ldr	r3, [r7, #12]
    7766:	685b      	ldr	r3, [r3, #4]
    7768:	2280      	movs	r2, #128	; 0x80
    776a:	02d2      	lsls	r2, r2, #11
    776c:	431a      	orrs	r2, r3
    776e:	68fb      	ldr	r3, [r7, #12]
    7770:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    7772:	1cfb      	adds	r3, r7, #3
    7774:	781a      	ldrb	r2, [r3, #0]
    7776:	68fb      	ldr	r3, [r7, #12]
    7778:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    777a:	230b      	movs	r3, #11
    777c:	18fc      	adds	r4, r7, r3
    777e:	687b      	ldr	r3, [r7, #4]
    7780:	0018      	movs	r0, r3
    7782:	4b07      	ldr	r3, [pc, #28]	; (77a0 <_i2c_master_send_hs_master_code+0x50>)
    7784:	4798      	blx	r3
    7786:	0003      	movs	r3, r0
    7788:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    778a:	68fb      	ldr	r3, [r7, #12]
    778c:	2201      	movs	r2, #1
    778e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    7790:	230b      	movs	r3, #11
    7792:	18fb      	adds	r3, r7, r3
    7794:	781b      	ldrb	r3, [r3, #0]
}
    7796:	0018      	movs	r0, r3
    7798:	46bd      	mov	sp, r7
    779a:	b005      	add	sp, #20
    779c:	bd90      	pop	{r4, r7, pc}
    779e:	46c0      	nop			; (mov r8, r8)
    77a0:	000076f3 	.word	0x000076f3

000077a4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    77a4:	b590      	push	{r4, r7, lr}
    77a6:	b087      	sub	sp, #28
    77a8:	af00      	add	r7, sp, #0
    77aa:	6078      	str	r0, [r7, #4]
    77ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    77ae:	687b      	ldr	r3, [r7, #4]
    77b0:	681b      	ldr	r3, [r3, #0]
    77b2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    77b4:	2314      	movs	r3, #20
    77b6:	18fb      	adds	r3, r7, r3
    77b8:	683a      	ldr	r2, [r7, #0]
    77ba:	8852      	ldrh	r2, [r2, #2]
    77bc:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    77be:	2312      	movs	r3, #18
    77c0:	18fb      	adds	r3, r7, r3
    77c2:	2200      	movs	r2, #0
    77c4:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    77c6:	68fb      	ldr	r3, [r7, #12]
    77c8:	681b      	ldr	r3, [r3, #0]
    77ca:	011b      	lsls	r3, r3, #4
    77cc:	0fdb      	lsrs	r3, r3, #31
    77ce:	b2db      	uxtb	r3, r3
    77d0:	001a      	movs	r2, r3
    77d2:	230b      	movs	r3, #11
    77d4:	18fb      	adds	r3, r7, r3
    77d6:	1e51      	subs	r1, r2, #1
    77d8:	418a      	sbcs	r2, r1
    77da:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    77dc:	683b      	ldr	r3, [r7, #0]
    77de:	7a5b      	ldrb	r3, [r3, #9]
    77e0:	2b00      	cmp	r3, #0
    77e2:	d006      	beq.n	77f2 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    77e4:	683b      	ldr	r3, [r7, #0]
    77e6:	7a9a      	ldrb	r2, [r3, #10]
    77e8:	687b      	ldr	r3, [r7, #4]
    77ea:	0011      	movs	r1, r2
    77ec:	0018      	movs	r0, r3
    77ee:	4b85      	ldr	r3, [pc, #532]	; (7a04 <_i2c_master_read_packet+0x260>)
    77f0:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    77f2:	68fb      	ldr	r3, [r7, #12]
    77f4:	685b      	ldr	r3, [r3, #4]
    77f6:	4a84      	ldr	r2, [pc, #528]	; (7a08 <_i2c_master_read_packet+0x264>)
    77f8:	401a      	ands	r2, r3
    77fa:	68fb      	ldr	r3, [r7, #12]
    77fc:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    77fe:	683b      	ldr	r3, [r7, #0]
    7800:	7a1b      	ldrb	r3, [r3, #8]
    7802:	2b00      	cmp	r3, #0
    7804:	d042      	beq.n	788c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    7806:	683b      	ldr	r3, [r7, #0]
    7808:	881b      	ldrh	r3, [r3, #0]
    780a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    780c:	683b      	ldr	r3, [r7, #0]
    780e:	7a5b      	ldrb	r3, [r3, #9]
    7810:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    7812:	4313      	orrs	r3, r2
    7814:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    7816:	2380      	movs	r3, #128	; 0x80
    7818:	021b      	lsls	r3, r3, #8
    781a:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    781c:	68fb      	ldr	r3, [r7, #12]
    781e:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    7820:	2317      	movs	r3, #23
    7822:	18fc      	adds	r4, r7, r3
    7824:	687b      	ldr	r3, [r7, #4]
    7826:	0018      	movs	r0, r3
    7828:	4b78      	ldr	r3, [pc, #480]	; (7a0c <_i2c_master_read_packet+0x268>)
    782a:	4798      	blx	r3
    782c:	0003      	movs	r3, r0
    782e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7830:	68fb      	ldr	r3, [r7, #12]
    7832:	685b      	ldr	r3, [r3, #4]
    7834:	4a74      	ldr	r2, [pc, #464]	; (7a08 <_i2c_master_read_packet+0x264>)
    7836:	401a      	ands	r2, r3
    7838:	68fb      	ldr	r3, [r7, #12]
    783a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    783c:	2317      	movs	r3, #23
    783e:	18fb      	adds	r3, r7, r3
    7840:	781b      	ldrb	r3, [r3, #0]
    7842:	2b00      	cmp	r3, #0
    7844:	d107      	bne.n	7856 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    7846:	2317      	movs	r3, #23
    7848:	18fc      	adds	r4, r7, r3
    784a:	687b      	ldr	r3, [r7, #4]
    784c:	0018      	movs	r0, r3
    784e:	4b70      	ldr	r3, [pc, #448]	; (7a10 <_i2c_master_read_packet+0x26c>)
    7850:	4798      	blx	r3
    7852:	0003      	movs	r3, r0
    7854:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    7856:	2317      	movs	r3, #23
    7858:	18fb      	adds	r3, r7, r3
    785a:	781b      	ldrb	r3, [r3, #0]
    785c:	2b00      	cmp	r3, #0
    785e:	d111      	bne.n	7884 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    7860:	683b      	ldr	r3, [r7, #0]
    7862:	881b      	ldrh	r3, [r3, #0]
    7864:	0a1b      	lsrs	r3, r3, #8
    7866:	b29b      	uxth	r3, r3
    7868:	2278      	movs	r2, #120	; 0x78
    786a:	4313      	orrs	r3, r2
    786c:	b29b      	uxth	r3, r3
    786e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    7870:	683b      	ldr	r3, [r7, #0]
    7872:	7a5b      	ldrb	r3, [r3, #9]
    7874:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    7876:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    7878:	2201      	movs	r2, #1
    787a:	4313      	orrs	r3, r2
    787c:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    787e:	68fb      	ldr	r3, [r7, #12]
    7880:	625a      	str	r2, [r3, #36]	; 0x24
    7882:	e00f      	b.n	78a4 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    7884:	2317      	movs	r3, #23
    7886:	18fb      	adds	r3, r7, r3
    7888:	781b      	ldrb	r3, [r3, #0]
    788a:	e0b6      	b.n	79fa <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    788c:	683b      	ldr	r3, [r7, #0]
    788e:	881b      	ldrh	r3, [r3, #0]
    7890:	005b      	lsls	r3, r3, #1
    7892:	2201      	movs	r2, #1
    7894:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    7896:	683b      	ldr	r3, [r7, #0]
    7898:	7a5b      	ldrb	r3, [r3, #9]
    789a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    789c:	4313      	orrs	r3, r2
    789e:	001a      	movs	r2, r3
    78a0:	68fb      	ldr	r3, [r7, #12]
    78a2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    78a4:	2317      	movs	r3, #23
    78a6:	18fc      	adds	r4, r7, r3
    78a8:	687b      	ldr	r3, [r7, #4]
    78aa:	0018      	movs	r0, r3
    78ac:	4b57      	ldr	r3, [pc, #348]	; (7a0c <_i2c_master_read_packet+0x268>)
    78ae:	4798      	blx	r3
    78b0:	0003      	movs	r3, r0
    78b2:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    78b4:	230b      	movs	r3, #11
    78b6:	18fb      	adds	r3, r7, r3
    78b8:	781b      	ldrb	r3, [r3, #0]
    78ba:	2b00      	cmp	r3, #0
    78bc:	d00b      	beq.n	78d6 <_i2c_master_read_packet+0x132>
    78be:	683b      	ldr	r3, [r7, #0]
    78c0:	885b      	ldrh	r3, [r3, #2]
    78c2:	2b01      	cmp	r3, #1
    78c4:	d107      	bne.n	78d6 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    78c6:	68fb      	ldr	r3, [r7, #12]
    78c8:	685b      	ldr	r3, [r3, #4]
    78ca:	2280      	movs	r2, #128	; 0x80
    78cc:	02d2      	lsls	r2, r2, #11
    78ce:	431a      	orrs	r2, r3
    78d0:	68fb      	ldr	r3, [r7, #12]
    78d2:	605a      	str	r2, [r3, #4]
    78d4:	e005      	b.n	78e2 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    78d6:	68fb      	ldr	r3, [r7, #12]
    78d8:	685b      	ldr	r3, [r3, #4]
    78da:	4a4b      	ldr	r2, [pc, #300]	; (7a08 <_i2c_master_read_packet+0x264>)
    78dc:	401a      	ands	r2, r3
    78de:	68fb      	ldr	r3, [r7, #12]
    78e0:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    78e2:	2317      	movs	r3, #23
    78e4:	18fb      	adds	r3, r7, r3
    78e6:	781b      	ldrb	r3, [r3, #0]
    78e8:	2b00      	cmp	r3, #0
    78ea:	d107      	bne.n	78fc <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    78ec:	2317      	movs	r3, #23
    78ee:	18fc      	adds	r4, r7, r3
    78f0:	687b      	ldr	r3, [r7, #4]
    78f2:	0018      	movs	r0, r3
    78f4:	4b46      	ldr	r3, [pc, #280]	; (7a10 <_i2c_master_read_packet+0x26c>)
    78f6:	4798      	blx	r3
    78f8:	0003      	movs	r3, r0
    78fa:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    78fc:	2317      	movs	r3, #23
    78fe:	18fb      	adds	r3, r7, r3
    7900:	781b      	ldrb	r3, [r3, #0]
    7902:	2b00      	cmp	r3, #0
    7904:	d000      	beq.n	7908 <_i2c_master_read_packet+0x164>
    7906:	e075      	b.n	79f4 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    7908:	e04b      	b.n	79a2 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    790a:	68fb      	ldr	r3, [r7, #12]
    790c:	8b5b      	ldrh	r3, [r3, #26]
    790e:	b29b      	uxth	r3, r3
    7910:	001a      	movs	r2, r3
    7912:	2320      	movs	r3, #32
    7914:	4013      	ands	r3, r2
    7916:	d101      	bne.n	791c <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    7918:	2341      	movs	r3, #65	; 0x41
    791a:	e06e      	b.n	79fa <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	7adb      	ldrb	r3, [r3, #11]
    7920:	2b00      	cmp	r3, #0
    7922:	d01e      	beq.n	7962 <_i2c_master_read_packet+0x1be>
    7924:	230b      	movs	r3, #11
    7926:	18fb      	adds	r3, r7, r3
    7928:	781b      	ldrb	r3, [r3, #0]
    792a:	2201      	movs	r2, #1
    792c:	4053      	eors	r3, r2
    792e:	b2db      	uxtb	r3, r3
    7930:	2b00      	cmp	r3, #0
    7932:	d004      	beq.n	793e <_i2c_master_read_packet+0x19a>
    7934:	2314      	movs	r3, #20
    7936:	18fb      	adds	r3, r7, r3
    7938:	881b      	ldrh	r3, [r3, #0]
    793a:	2b00      	cmp	r3, #0
    793c:	d009      	beq.n	7952 <_i2c_master_read_packet+0x1ae>
    793e:	230b      	movs	r3, #11
    7940:	18fb      	adds	r3, r7, r3
    7942:	781b      	ldrb	r3, [r3, #0]
    7944:	2b00      	cmp	r3, #0
    7946:	d00c      	beq.n	7962 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    7948:	2314      	movs	r3, #20
    794a:	18fb      	adds	r3, r7, r3
    794c:	881b      	ldrh	r3, [r3, #0]
    794e:	2b01      	cmp	r3, #1
    7950:	d107      	bne.n	7962 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7952:	68fb      	ldr	r3, [r7, #12]
    7954:	685b      	ldr	r3, [r3, #4]
    7956:	2280      	movs	r2, #128	; 0x80
    7958:	02d2      	lsls	r2, r2, #11
    795a:	431a      	orrs	r2, r3
    795c:	68fb      	ldr	r3, [r7, #12]
    795e:	605a      	str	r2, [r3, #4]
    7960:	e01a      	b.n	7998 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    7962:	687b      	ldr	r3, [r7, #4]
    7964:	0018      	movs	r0, r3
    7966:	4b2b      	ldr	r3, [pc, #172]	; (7a14 <_i2c_master_read_packet+0x270>)
    7968:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    796a:	683b      	ldr	r3, [r7, #0]
    796c:	685a      	ldr	r2, [r3, #4]
    796e:	2312      	movs	r3, #18
    7970:	18fb      	adds	r3, r7, r3
    7972:	881b      	ldrh	r3, [r3, #0]
    7974:	2112      	movs	r1, #18
    7976:	1879      	adds	r1, r7, r1
    7978:	1c58      	adds	r0, r3, #1
    797a:	8008      	strh	r0, [r1, #0]
    797c:	18d3      	adds	r3, r2, r3
    797e:	68fa      	ldr	r2, [r7, #12]
    7980:	2128      	movs	r1, #40	; 0x28
    7982:	5c52      	ldrb	r2, [r2, r1]
    7984:	b2d2      	uxtb	r2, r2
    7986:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    7988:	2317      	movs	r3, #23
    798a:	18fc      	adds	r4, r7, r3
    798c:	687b      	ldr	r3, [r7, #4]
    798e:	0018      	movs	r0, r3
    7990:	4b1e      	ldr	r3, [pc, #120]	; (7a0c <_i2c_master_read_packet+0x268>)
    7992:	4798      	blx	r3
    7994:	0003      	movs	r3, r0
    7996:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    7998:	2317      	movs	r3, #23
    799a:	18fb      	adds	r3, r7, r3
    799c:	781b      	ldrb	r3, [r3, #0]
    799e:	2b00      	cmp	r3, #0
    79a0:	d109      	bne.n	79b6 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    79a2:	2314      	movs	r3, #20
    79a4:	18fb      	adds	r3, r7, r3
    79a6:	881b      	ldrh	r3, [r3, #0]
    79a8:	2214      	movs	r2, #20
    79aa:	18ba      	adds	r2, r7, r2
    79ac:	1e59      	subs	r1, r3, #1
    79ae:	8011      	strh	r1, [r2, #0]
    79b0:	2b00      	cmp	r3, #0
    79b2:	d1aa      	bne.n	790a <_i2c_master_read_packet+0x166>
    79b4:	e000      	b.n	79b8 <_i2c_master_read_packet+0x214>
				break;
    79b6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    79b8:	687b      	ldr	r3, [r7, #4]
    79ba:	7a9b      	ldrb	r3, [r3, #10]
    79bc:	2b00      	cmp	r3, #0
    79be:	d00a      	beq.n	79d6 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    79c0:	687b      	ldr	r3, [r7, #4]
    79c2:	0018      	movs	r0, r3
    79c4:	4b13      	ldr	r3, [pc, #76]	; (7a14 <_i2c_master_read_packet+0x270>)
    79c6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    79c8:	68fb      	ldr	r3, [r7, #12]
    79ca:	685b      	ldr	r3, [r3, #4]
    79cc:	22c0      	movs	r2, #192	; 0xc0
    79ce:	0292      	lsls	r2, r2, #10
    79d0:	431a      	orrs	r2, r3
    79d2:	68fb      	ldr	r3, [r7, #12]
    79d4:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    79d6:	687b      	ldr	r3, [r7, #4]
    79d8:	0018      	movs	r0, r3
    79da:	4b0e      	ldr	r3, [pc, #56]	; (7a14 <_i2c_master_read_packet+0x270>)
    79dc:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    79de:	683b      	ldr	r3, [r7, #0]
    79e0:	685a      	ldr	r2, [r3, #4]
    79e2:	2312      	movs	r3, #18
    79e4:	18fb      	adds	r3, r7, r3
    79e6:	881b      	ldrh	r3, [r3, #0]
    79e8:	18d3      	adds	r3, r2, r3
    79ea:	68fa      	ldr	r2, [r7, #12]
    79ec:	2128      	movs	r1, #40	; 0x28
    79ee:	5c52      	ldrb	r2, [r2, r1]
    79f0:	b2d2      	uxtb	r2, r2
    79f2:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    79f4:	2317      	movs	r3, #23
    79f6:	18fb      	adds	r3, r7, r3
    79f8:	781b      	ldrb	r3, [r3, #0]
}
    79fa:	0018      	movs	r0, r3
    79fc:	46bd      	mov	sp, r7
    79fe:	b007      	add	sp, #28
    7a00:	bd90      	pop	{r4, r7, pc}
    7a02:	46c0      	nop			; (mov r8, r8)
    7a04:	00007751 	.word	0x00007751
    7a08:	fffbffff 	.word	0xfffbffff
    7a0c:	000076f3 	.word	0x000076f3
    7a10:	00007695 	.word	0x00007695
    7a14:	00007109 	.word	0x00007109

00007a18 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    7a18:	b580      	push	{r7, lr}
    7a1a:	b082      	sub	sp, #8
    7a1c:	af00      	add	r7, sp, #0
    7a1e:	6078      	str	r0, [r7, #4]
    7a20:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    7a22:	687b      	ldr	r3, [r7, #4]
    7a24:	8b9b      	ldrh	r3, [r3, #28]
    7a26:	b29b      	uxth	r3, r3
    7a28:	2b00      	cmp	r3, #0
    7a2a:	d001      	beq.n	7a30 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    7a2c:	2305      	movs	r3, #5
    7a2e:	e00c      	b.n	7a4a <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    7a30:	687b      	ldr	r3, [r7, #4]
    7a32:	2201      	movs	r2, #1
    7a34:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    7a36:	687b      	ldr	r3, [r7, #4]
    7a38:	2201      	movs	r2, #1
    7a3a:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    7a3c:	683a      	ldr	r2, [r7, #0]
    7a3e:	687b      	ldr	r3, [r7, #4]
    7a40:	0011      	movs	r1, r2
    7a42:	0018      	movs	r0, r3
    7a44:	4b03      	ldr	r3, [pc, #12]	; (7a54 <i2c_master_read_packet_wait+0x3c>)
    7a46:	4798      	blx	r3
    7a48:	0003      	movs	r3, r0
}
    7a4a:	0018      	movs	r0, r3
    7a4c:	46bd      	mov	sp, r7
    7a4e:	b002      	add	sp, #8
    7a50:	bd80      	pop	{r7, pc}
    7a52:	46c0      	nop			; (mov r8, r8)
    7a54:	000077a5 	.word	0x000077a5

00007a58 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    7a58:	b590      	push	{r4, r7, lr}
    7a5a:	b087      	sub	sp, #28
    7a5c:	af00      	add	r7, sp, #0
    7a5e:	6078      	str	r0, [r7, #4]
    7a60:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7a62:	687b      	ldr	r3, [r7, #4]
    7a64:	681b      	ldr	r3, [r3, #0]
    7a66:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    7a68:	2314      	movs	r3, #20
    7a6a:	18fb      	adds	r3, r7, r3
    7a6c:	683a      	ldr	r2, [r7, #0]
    7a6e:	8852      	ldrh	r2, [r2, #2]
    7a70:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    7a72:	687b      	ldr	r3, [r7, #4]
    7a74:	0018      	movs	r0, r3
    7a76:	4b51      	ldr	r3, [pc, #324]	; (7bbc <_i2c_master_write_packet+0x164>)
    7a78:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    7a7a:	683b      	ldr	r3, [r7, #0]
    7a7c:	7a5b      	ldrb	r3, [r3, #9]
    7a7e:	2b00      	cmp	r3, #0
    7a80:	d006      	beq.n	7a90 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    7a82:	683b      	ldr	r3, [r7, #0]
    7a84:	7a9a      	ldrb	r2, [r3, #10]
    7a86:	687b      	ldr	r3, [r7, #4]
    7a88:	0011      	movs	r1, r2
    7a8a:	0018      	movs	r0, r3
    7a8c:	4b4c      	ldr	r3, [pc, #304]	; (7bc0 <_i2c_master_write_packet+0x168>)
    7a8e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7a90:	68fb      	ldr	r3, [r7, #12]
    7a92:	685b      	ldr	r3, [r3, #4]
    7a94:	4a4b      	ldr	r2, [pc, #300]	; (7bc4 <_i2c_master_write_packet+0x16c>)
    7a96:	401a      	ands	r2, r3
    7a98:	68fb      	ldr	r3, [r7, #12]
    7a9a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    7a9c:	683b      	ldr	r3, [r7, #0]
    7a9e:	7a1b      	ldrb	r3, [r3, #8]
    7aa0:	2b00      	cmp	r3, #0
    7aa2:	d00d      	beq.n	7ac0 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    7aa4:	683b      	ldr	r3, [r7, #0]
    7aa6:	881b      	ldrh	r3, [r3, #0]
    7aa8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    7aaa:	683b      	ldr	r3, [r7, #0]
    7aac:	7a5b      	ldrb	r3, [r3, #9]
    7aae:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    7ab0:	4313      	orrs	r3, r2
    7ab2:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    7ab4:	2380      	movs	r3, #128	; 0x80
    7ab6:	021b      	lsls	r3, r3, #8
    7ab8:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    7aba:	68fb      	ldr	r3, [r7, #12]
    7abc:	625a      	str	r2, [r3, #36]	; 0x24
    7abe:	e009      	b.n	7ad4 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    7ac0:	683b      	ldr	r3, [r7, #0]
    7ac2:	881b      	ldrh	r3, [r3, #0]
    7ac4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    7ac6:	683b      	ldr	r3, [r7, #0]
    7ac8:	7a5b      	ldrb	r3, [r3, #9]
    7aca:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    7acc:	4313      	orrs	r3, r2
    7ace:	001a      	movs	r2, r3
    7ad0:	68fb      	ldr	r3, [r7, #12]
    7ad2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    7ad4:	2317      	movs	r3, #23
    7ad6:	18fc      	adds	r4, r7, r3
    7ad8:	687b      	ldr	r3, [r7, #4]
    7ada:	0018      	movs	r0, r3
    7adc:	4b3a      	ldr	r3, [pc, #232]	; (7bc8 <_i2c_master_write_packet+0x170>)
    7ade:	4798      	blx	r3
    7ae0:	0003      	movs	r3, r0
    7ae2:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    7ae4:	2317      	movs	r3, #23
    7ae6:	18fb      	adds	r3, r7, r3
    7ae8:	781b      	ldrb	r3, [r3, #0]
    7aea:	2b00      	cmp	r3, #0
    7aec:	d107      	bne.n	7afe <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    7aee:	2317      	movs	r3, #23
    7af0:	18fc      	adds	r4, r7, r3
    7af2:	687b      	ldr	r3, [r7, #4]
    7af4:	0018      	movs	r0, r3
    7af6:	4b35      	ldr	r3, [pc, #212]	; (7bcc <_i2c_master_write_packet+0x174>)
    7af8:	4798      	blx	r3
    7afa:	0003      	movs	r3, r0
    7afc:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    7afe:	2317      	movs	r3, #23
    7b00:	18fb      	adds	r3, r7, r3
    7b02:	781b      	ldrb	r3, [r3, #0]
    7b04:	2b00      	cmp	r3, #0
    7b06:	d152      	bne.n	7bae <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    7b08:	2312      	movs	r3, #18
    7b0a:	18fb      	adds	r3, r7, r3
    7b0c:	2200      	movs	r2, #0
    7b0e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    7b10:	e033      	b.n	7b7a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    7b12:	68fb      	ldr	r3, [r7, #12]
    7b14:	8b5b      	ldrh	r3, [r3, #26]
    7b16:	b29b      	uxth	r3, r3
    7b18:	001a      	movs	r2, r3
    7b1a:	2320      	movs	r3, #32
    7b1c:	4013      	ands	r3, r2
    7b1e:	d101      	bne.n	7b24 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    7b20:	2341      	movs	r3, #65	; 0x41
    7b22:	e047      	b.n	7bb4 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    7b24:	687b      	ldr	r3, [r7, #4]
    7b26:	0018      	movs	r0, r3
    7b28:	4b24      	ldr	r3, [pc, #144]	; (7bbc <_i2c_master_write_packet+0x164>)
    7b2a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    7b2c:	683b      	ldr	r3, [r7, #0]
    7b2e:	685a      	ldr	r2, [r3, #4]
    7b30:	2312      	movs	r3, #18
    7b32:	18fb      	adds	r3, r7, r3
    7b34:	881b      	ldrh	r3, [r3, #0]
    7b36:	2112      	movs	r1, #18
    7b38:	1879      	adds	r1, r7, r1
    7b3a:	1c58      	adds	r0, r3, #1
    7b3c:	8008      	strh	r0, [r1, #0]
    7b3e:	18d3      	adds	r3, r2, r3
    7b40:	7819      	ldrb	r1, [r3, #0]
    7b42:	68fb      	ldr	r3, [r7, #12]
    7b44:	2228      	movs	r2, #40	; 0x28
    7b46:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    7b48:	2317      	movs	r3, #23
    7b4a:	18fc      	adds	r4, r7, r3
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	0018      	movs	r0, r3
    7b50:	4b1d      	ldr	r3, [pc, #116]	; (7bc8 <_i2c_master_write_packet+0x170>)
    7b52:	4798      	blx	r3
    7b54:	0003      	movs	r3, r0
    7b56:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    7b58:	2317      	movs	r3, #23
    7b5a:	18fb      	adds	r3, r7, r3
    7b5c:	781b      	ldrb	r3, [r3, #0]
    7b5e:	2b00      	cmp	r3, #0
    7b60:	d115      	bne.n	7b8e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    7b62:	68fb      	ldr	r3, [r7, #12]
    7b64:	8b5b      	ldrh	r3, [r3, #26]
    7b66:	b29b      	uxth	r3, r3
    7b68:	001a      	movs	r2, r3
    7b6a:	2304      	movs	r3, #4
    7b6c:	4013      	ands	r3, r2
    7b6e:	d004      	beq.n	7b7a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    7b70:	2317      	movs	r3, #23
    7b72:	18fb      	adds	r3, r7, r3
    7b74:	221e      	movs	r2, #30
    7b76:	701a      	strb	r2, [r3, #0]
				break;
    7b78:	e00a      	b.n	7b90 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    7b7a:	2314      	movs	r3, #20
    7b7c:	18fb      	adds	r3, r7, r3
    7b7e:	881b      	ldrh	r3, [r3, #0]
    7b80:	2214      	movs	r2, #20
    7b82:	18ba      	adds	r2, r7, r2
    7b84:	1e59      	subs	r1, r3, #1
    7b86:	8011      	strh	r1, [r2, #0]
    7b88:	2b00      	cmp	r3, #0
    7b8a:	d1c2      	bne.n	7b12 <_i2c_master_write_packet+0xba>
    7b8c:	e000      	b.n	7b90 <_i2c_master_write_packet+0x138>
				break;
    7b8e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    7b90:	687b      	ldr	r3, [r7, #4]
    7b92:	7a9b      	ldrb	r3, [r3, #10]
    7b94:	2b00      	cmp	r3, #0
    7b96:	d00a      	beq.n	7bae <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	0018      	movs	r0, r3
    7b9c:	4b07      	ldr	r3, [pc, #28]	; (7bbc <_i2c_master_write_packet+0x164>)
    7b9e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7ba0:	68fb      	ldr	r3, [r7, #12]
    7ba2:	685b      	ldr	r3, [r3, #4]
    7ba4:	22c0      	movs	r2, #192	; 0xc0
    7ba6:	0292      	lsls	r2, r2, #10
    7ba8:	431a      	orrs	r2, r3
    7baa:	68fb      	ldr	r3, [r7, #12]
    7bac:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    7bae:	2317      	movs	r3, #23
    7bb0:	18fb      	adds	r3, r7, r3
    7bb2:	781b      	ldrb	r3, [r3, #0]
}
    7bb4:	0018      	movs	r0, r3
    7bb6:	46bd      	mov	sp, r7
    7bb8:	b007      	add	sp, #28
    7bba:	bd90      	pop	{r4, r7, pc}
    7bbc:	00007109 	.word	0x00007109
    7bc0:	00007751 	.word	0x00007751
    7bc4:	fffbffff 	.word	0xfffbffff
    7bc8:	000076f3 	.word	0x000076f3
    7bcc:	00007695 	.word	0x00007695

00007bd0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    7bd0:	b580      	push	{r7, lr}
    7bd2:	b082      	sub	sp, #8
    7bd4:	af00      	add	r7, sp, #0
    7bd6:	6078      	str	r0, [r7, #4]
    7bd8:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    7bda:	687b      	ldr	r3, [r7, #4]
    7bdc:	8b9b      	ldrh	r3, [r3, #28]
    7bde:	b29b      	uxth	r3, r3
    7be0:	2b00      	cmp	r3, #0
    7be2:	d001      	beq.n	7be8 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    7be4:	2305      	movs	r3, #5
    7be6:	e00c      	b.n	7c02 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    7be8:	687b      	ldr	r3, [r7, #4]
    7bea:	2201      	movs	r2, #1
    7bec:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    7bee:	687b      	ldr	r3, [r7, #4]
    7bf0:	2201      	movs	r2, #1
    7bf2:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    7bf4:	683a      	ldr	r2, [r7, #0]
    7bf6:	687b      	ldr	r3, [r7, #4]
    7bf8:	0011      	movs	r1, r2
    7bfa:	0018      	movs	r0, r3
    7bfc:	4b03      	ldr	r3, [pc, #12]	; (7c0c <i2c_master_write_packet_wait+0x3c>)
    7bfe:	4798      	blx	r3
    7c00:	0003      	movs	r3, r0
}
    7c02:	0018      	movs	r0, r3
    7c04:	46bd      	mov	sp, r7
    7c06:	b002      	add	sp, #8
    7c08:	bd80      	pop	{r7, pc}
    7c0a:	46c0      	nop			; (mov r8, r8)
    7c0c:	00007a59 	.word	0x00007a59

00007c10 <i2c_master_is_syncing>:
{
    7c10:	b580      	push	{r7, lr}
    7c12:	b084      	sub	sp, #16
    7c14:	af00      	add	r7, sp, #0
    7c16:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    7c18:	687b      	ldr	r3, [r7, #4]
    7c1a:	681b      	ldr	r3, [r3, #0]
    7c1c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    7c1e:	68fb      	ldr	r3, [r7, #12]
    7c20:	69db      	ldr	r3, [r3, #28]
    7c22:	2207      	movs	r2, #7
    7c24:	4013      	ands	r3, r2
    7c26:	1e5a      	subs	r2, r3, #1
    7c28:	4193      	sbcs	r3, r2
    7c2a:	b2db      	uxtb	r3, r3
}
    7c2c:	0018      	movs	r0, r3
    7c2e:	46bd      	mov	sp, r7
    7c30:	b004      	add	sp, #16
    7c32:	bd80      	pop	{r7, pc}

00007c34 <_i2c_master_wait_for_sync>:
{
    7c34:	b580      	push	{r7, lr}
    7c36:	b082      	sub	sp, #8
    7c38:	af00      	add	r7, sp, #0
    7c3a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    7c3c:	46c0      	nop			; (mov r8, r8)
    7c3e:	687b      	ldr	r3, [r7, #4]
    7c40:	0018      	movs	r0, r3
    7c42:	4b04      	ldr	r3, [pc, #16]	; (7c54 <_i2c_master_wait_for_sync+0x20>)
    7c44:	4798      	blx	r3
    7c46:	1e03      	subs	r3, r0, #0
    7c48:	d1f9      	bne.n	7c3e <_i2c_master_wait_for_sync+0xa>
}
    7c4a:	46c0      	nop			; (mov r8, r8)
    7c4c:	46bd      	mov	sp, r7
    7c4e:	b002      	add	sp, #8
    7c50:	bd80      	pop	{r7, pc}
    7c52:	46c0      	nop			; (mov r8, r8)
    7c54:	00007c11 	.word	0x00007c11

00007c58 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    7c58:	b580      	push	{r7, lr}
    7c5a:	b084      	sub	sp, #16
    7c5c:	af00      	add	r7, sp, #0
    7c5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7c60:	687b      	ldr	r3, [r7, #4]
    7c62:	681b      	ldr	r3, [r3, #0]
    7c64:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    7c66:	68fb      	ldr	r3, [r7, #12]
    7c68:	681b      	ldr	r3, [r3, #0]
    7c6a:	011b      	lsls	r3, r3, #4
    7c6c:	0fdb      	lsrs	r3, r3, #31
    7c6e:	b2db      	uxtb	r3, r3
    7c70:	001a      	movs	r2, r3
    7c72:	230b      	movs	r3, #11
    7c74:	18fb      	adds	r3, r7, r3
    7c76:	1e51      	subs	r1, r2, #1
    7c78:	418a      	sbcs	r2, r1
    7c7a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    7c7c:	2308      	movs	r3, #8
    7c7e:	18fb      	adds	r3, r7, r3
    7c80:	687a      	ldr	r2, [r7, #4]
    7c82:	8b52      	ldrh	r2, [r2, #26]
    7c84:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    7c86:	687b      	ldr	r3, [r7, #4]
    7c88:	8b9b      	ldrh	r3, [r3, #28]
    7c8a:	b29a      	uxth	r2, r3
    7c8c:	2308      	movs	r3, #8
    7c8e:	18fb      	adds	r3, r7, r3
    7c90:	2108      	movs	r1, #8
    7c92:	1879      	adds	r1, r7, r1
    7c94:	8809      	ldrh	r1, [r1, #0]
    7c96:	1a8a      	subs	r2, r1, r2
    7c98:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	8b9b      	ldrh	r3, [r3, #28]
    7c9e:	b29b      	uxth	r3, r3
    7ca0:	3b01      	subs	r3, #1
    7ca2:	b29a      	uxth	r2, r3
    7ca4:	687b      	ldr	r3, [r7, #4]
    7ca6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    7ca8:	230b      	movs	r3, #11
    7caa:	18fb      	adds	r3, r7, r3
    7cac:	781b      	ldrb	r3, [r3, #0]
    7cae:	2b00      	cmp	r3, #0
    7cb0:	d010      	beq.n	7cd4 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    7cb2:	687b      	ldr	r3, [r7, #4]
    7cb4:	7adb      	ldrb	r3, [r3, #11]
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	d01c      	beq.n	7cf4 <_i2c_master_read+0x9c>
    7cba:	687b      	ldr	r3, [r7, #4]
    7cbc:	8b9b      	ldrh	r3, [r3, #28]
    7cbe:	b29b      	uxth	r3, r3
    7cc0:	2b01      	cmp	r3, #1
    7cc2:	d117      	bne.n	7cf4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7cc4:	68fb      	ldr	r3, [r7, #12]
    7cc6:	685b      	ldr	r3, [r3, #4]
    7cc8:	2280      	movs	r2, #128	; 0x80
    7cca:	02d2      	lsls	r2, r2, #11
    7ccc:	431a      	orrs	r2, r3
    7cce:	68fb      	ldr	r3, [r7, #12]
    7cd0:	605a      	str	r2, [r3, #4]
    7cd2:	e00f      	b.n	7cf4 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    7cd4:	687b      	ldr	r3, [r7, #4]
    7cd6:	7adb      	ldrb	r3, [r3, #11]
    7cd8:	2b00      	cmp	r3, #0
    7cda:	d00b      	beq.n	7cf4 <_i2c_master_read+0x9c>
    7cdc:	687b      	ldr	r3, [r7, #4]
    7cde:	8b9b      	ldrh	r3, [r3, #28]
    7ce0:	b29b      	uxth	r3, r3
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d106      	bne.n	7cf4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7ce6:	68fb      	ldr	r3, [r7, #12]
    7ce8:	685b      	ldr	r3, [r3, #4]
    7cea:	2280      	movs	r2, #128	; 0x80
    7cec:	02d2      	lsls	r2, r2, #11
    7cee:	431a      	orrs	r2, r3
    7cf0:	68fb      	ldr	r3, [r7, #12]
    7cf2:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    7cf4:	687b      	ldr	r3, [r7, #4]
    7cf6:	8b9b      	ldrh	r3, [r3, #28]
    7cf8:	b29b      	uxth	r3, r3
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	d10e      	bne.n	7d1c <_i2c_master_read+0xc4>
		if (module->send_stop) {
    7cfe:	687b      	ldr	r3, [r7, #4]
    7d00:	7a9b      	ldrb	r3, [r3, #10]
    7d02:	2b00      	cmp	r3, #0
    7d04:	d00a      	beq.n	7d1c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    7d06:	687b      	ldr	r3, [r7, #4]
    7d08:	0018      	movs	r0, r3
    7d0a:	4b0e      	ldr	r3, [pc, #56]	; (7d44 <_i2c_master_read+0xec>)
    7d0c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7d0e:	68fb      	ldr	r3, [r7, #12]
    7d10:	685b      	ldr	r3, [r3, #4]
    7d12:	22c0      	movs	r2, #192	; 0xc0
    7d14:	0292      	lsls	r2, r2, #10
    7d16:	431a      	orrs	r2, r3
    7d18:	68fb      	ldr	r3, [r7, #12]
    7d1a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    7d1c:	687b      	ldr	r3, [r7, #4]
    7d1e:	0018      	movs	r0, r3
    7d20:	4b08      	ldr	r3, [pc, #32]	; (7d44 <_i2c_master_read+0xec>)
    7d22:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    7d24:	687b      	ldr	r3, [r7, #4]
    7d26:	6a1a      	ldr	r2, [r3, #32]
    7d28:	2308      	movs	r3, #8
    7d2a:	18fb      	adds	r3, r7, r3
    7d2c:	881b      	ldrh	r3, [r3, #0]
    7d2e:	18d3      	adds	r3, r2, r3
    7d30:	68fa      	ldr	r2, [r7, #12]
    7d32:	2128      	movs	r1, #40	; 0x28
    7d34:	5c52      	ldrb	r2, [r2, r1]
    7d36:	b2d2      	uxtb	r2, r2
    7d38:	701a      	strb	r2, [r3, #0]
}
    7d3a:	46c0      	nop			; (mov r8, r8)
    7d3c:	46bd      	mov	sp, r7
    7d3e:	b004      	add	sp, #16
    7d40:	bd80      	pop	{r7, pc}
    7d42:	46c0      	nop			; (mov r8, r8)
    7d44:	00007c35 	.word	0x00007c35

00007d48 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    7d48:	b580      	push	{r7, lr}
    7d4a:	b084      	sub	sp, #16
    7d4c:	af00      	add	r7, sp, #0
    7d4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7d50:	687b      	ldr	r3, [r7, #4]
    7d52:	681b      	ldr	r3, [r3, #0]
    7d54:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    7d56:	68fb      	ldr	r3, [r7, #12]
    7d58:	8b5b      	ldrh	r3, [r3, #26]
    7d5a:	b29b      	uxth	r3, r3
    7d5c:	001a      	movs	r2, r3
    7d5e:	2304      	movs	r3, #4
    7d60:	4013      	ands	r3, r2
    7d62:	d004      	beq.n	7d6e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    7d64:	687b      	ldr	r3, [r7, #4]
    7d66:	2225      	movs	r2, #37	; 0x25
    7d68:	211e      	movs	r1, #30
    7d6a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    7d6c:	e024      	b.n	7db8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    7d6e:	230a      	movs	r3, #10
    7d70:	18fb      	adds	r3, r7, r3
    7d72:	687a      	ldr	r2, [r7, #4]
    7d74:	8b52      	ldrh	r2, [r2, #26]
    7d76:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    7d78:	687b      	ldr	r3, [r7, #4]
    7d7a:	8b9b      	ldrh	r3, [r3, #28]
    7d7c:	b29a      	uxth	r2, r3
    7d7e:	230a      	movs	r3, #10
    7d80:	18fb      	adds	r3, r7, r3
    7d82:	210a      	movs	r1, #10
    7d84:	1879      	adds	r1, r7, r1
    7d86:	8809      	ldrh	r1, [r1, #0]
    7d88:	1a8a      	subs	r2, r1, r2
    7d8a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    7d8c:	687b      	ldr	r3, [r7, #4]
    7d8e:	8b9b      	ldrh	r3, [r3, #28]
    7d90:	b29b      	uxth	r3, r3
    7d92:	3b01      	subs	r3, #1
    7d94:	b29a      	uxth	r2, r3
    7d96:	687b      	ldr	r3, [r7, #4]
    7d98:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    7d9a:	687b      	ldr	r3, [r7, #4]
    7d9c:	0018      	movs	r0, r3
    7d9e:	4b08      	ldr	r3, [pc, #32]	; (7dc0 <_i2c_master_write+0x78>)
    7da0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    7da2:	687b      	ldr	r3, [r7, #4]
    7da4:	6a1a      	ldr	r2, [r3, #32]
    7da6:	230a      	movs	r3, #10
    7da8:	18fb      	adds	r3, r7, r3
    7daa:	881b      	ldrh	r3, [r3, #0]
    7dac:	18d3      	adds	r3, r2, r3
    7dae:	781b      	ldrb	r3, [r3, #0]
    7db0:	b2d9      	uxtb	r1, r3
    7db2:	68fb      	ldr	r3, [r7, #12]
    7db4:	2228      	movs	r2, #40	; 0x28
    7db6:	5499      	strb	r1, [r3, r2]
}
    7db8:	46bd      	mov	sp, r7
    7dba:	b004      	add	sp, #16
    7dbc:	bd80      	pop	{r7, pc}
    7dbe:	46c0      	nop			; (mov r8, r8)
    7dc0:	00007c35 	.word	0x00007c35

00007dc4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    7dc4:	b580      	push	{r7, lr}
    7dc6:	b084      	sub	sp, #16
    7dc8:	af00      	add	r7, sp, #0
    7dca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	681b      	ldr	r3, [r3, #0]
    7dd0:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    7dd2:	68fb      	ldr	r3, [r7, #12]
    7dd4:	7e1b      	ldrb	r3, [r3, #24]
    7dd6:	b2db      	uxtb	r3, r3
    7dd8:	001a      	movs	r2, r3
    7dda:	2301      	movs	r3, #1
    7ddc:	4013      	ands	r3, r2
    7dde:	d02b      	beq.n	7e38 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    7de0:	68fb      	ldr	r3, [r7, #12]
    7de2:	2201      	movs	r2, #1
    7de4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    7de6:	68fb      	ldr	r3, [r7, #12]
    7de8:	8b5b      	ldrh	r3, [r3, #26]
    7dea:	b29b      	uxth	r3, r3
    7dec:	001a      	movs	r2, r3
    7dee:	2302      	movs	r3, #2
    7df0:	4013      	ands	r3, r2
    7df2:	d004      	beq.n	7dfe <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	2225      	movs	r2, #37	; 0x25
    7df8:	2141      	movs	r1, #65	; 0x41
    7dfa:	5499      	strb	r1, [r3, r2]
    7dfc:	e01c      	b.n	7e38 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    7dfe:	68fb      	ldr	r3, [r7, #12]
    7e00:	8b5b      	ldrh	r3, [r3, #26]
    7e02:	b29b      	uxth	r3, r3
    7e04:	001a      	movs	r2, r3
    7e06:	2304      	movs	r3, #4
    7e08:	4013      	ands	r3, r2
    7e0a:	d015      	beq.n	7e38 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    7e0c:	687b      	ldr	r3, [r7, #4]
    7e0e:	2225      	movs	r2, #37	; 0x25
    7e10:	2118      	movs	r1, #24
    7e12:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    7e14:	687b      	ldr	r3, [r7, #4]
    7e16:	2200      	movs	r2, #0
    7e18:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    7e1a:	687b      	ldr	r3, [r7, #4]
    7e1c:	7a9b      	ldrb	r3, [r3, #10]
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d00a      	beq.n	7e38 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    7e22:	687b      	ldr	r3, [r7, #4]
    7e24:	0018      	movs	r0, r3
    7e26:	4b13      	ldr	r3, [pc, #76]	; (7e74 <_i2c_master_async_address_response+0xb0>)
    7e28:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7e2a:	68fb      	ldr	r3, [r7, #12]
    7e2c:	685b      	ldr	r3, [r3, #4]
    7e2e:	22c0      	movs	r2, #192	; 0xc0
    7e30:	0292      	lsls	r2, r2, #10
    7e32:	431a      	orrs	r2, r3
    7e34:	68fb      	ldr	r3, [r7, #12]
    7e36:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    7e38:	687b      	ldr	r3, [r7, #4]
    7e3a:	8b9b      	ldrh	r3, [r3, #28]
    7e3c:	b29a      	uxth	r2, r3
    7e3e:	687b      	ldr	r3, [r7, #4]
    7e40:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    7e42:	687b      	ldr	r3, [r7, #4]
    7e44:	2225      	movs	r2, #37	; 0x25
    7e46:	5c9b      	ldrb	r3, [r3, r2]
    7e48:	b2db      	uxtb	r3, r3
    7e4a:	2b05      	cmp	r3, #5
    7e4c:	d10e      	bne.n	7e6c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    7e4e:	687b      	ldr	r3, [r7, #4]
    7e50:	2224      	movs	r2, #36	; 0x24
    7e52:	5c9b      	ldrb	r3, [r3, r2]
    7e54:	b2db      	uxtb	r3, r3
    7e56:	2b00      	cmp	r3, #0
    7e58:	d104      	bne.n	7e64 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    7e5a:	687b      	ldr	r3, [r7, #4]
    7e5c:	0018      	movs	r0, r3
    7e5e:	4b06      	ldr	r3, [pc, #24]	; (7e78 <_i2c_master_async_address_response+0xb4>)
    7e60:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    7e62:	e003      	b.n	7e6c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    7e64:	687b      	ldr	r3, [r7, #4]
    7e66:	0018      	movs	r0, r3
    7e68:	4b04      	ldr	r3, [pc, #16]	; (7e7c <_i2c_master_async_address_response+0xb8>)
    7e6a:	4798      	blx	r3
}
    7e6c:	46c0      	nop			; (mov r8, r8)
    7e6e:	46bd      	mov	sp, r7
    7e70:	b004      	add	sp, #16
    7e72:	bd80      	pop	{r7, pc}
    7e74:	00007c35 	.word	0x00007c35
    7e78:	00007d49 	.word	0x00007d49
    7e7c:	00007c59 	.word	0x00007c59

00007e80 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    7e80:	b580      	push	{r7, lr}
    7e82:	b086      	sub	sp, #24
    7e84:	af00      	add	r7, sp, #0
    7e86:	0002      	movs	r2, r0
    7e88:	1dfb      	adds	r3, r7, #7
    7e8a:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    7e8c:	1dfb      	adds	r3, r7, #7
    7e8e:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    7e90:	4b93      	ldr	r3, [pc, #588]	; (80e0 <_i2c_master_interrupt_handler+0x260>)
    7e92:	0092      	lsls	r2, r2, #2
    7e94:	58d3      	ldr	r3, [r2, r3]
    7e96:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7e98:	697b      	ldr	r3, [r7, #20]
    7e9a:	681b      	ldr	r3, [r3, #0]
    7e9c:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    7e9e:	693b      	ldr	r3, [r7, #16]
    7ea0:	681b      	ldr	r3, [r3, #0]
    7ea2:	011b      	lsls	r3, r3, #4
    7ea4:	0fdb      	lsrs	r3, r3, #31
    7ea6:	b2db      	uxtb	r3, r3
    7ea8:	001a      	movs	r2, r3
    7eaa:	230f      	movs	r3, #15
    7eac:	18fb      	adds	r3, r7, r3
    7eae:	1e51      	subs	r1, r2, #1
    7eb0:	418a      	sbcs	r2, r1
    7eb2:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    7eb4:	230e      	movs	r3, #14
    7eb6:	18fb      	adds	r3, r7, r3
    7eb8:	697a      	ldr	r2, [r7, #20]
    7eba:	7e52      	ldrb	r2, [r2, #25]
    7ebc:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    7ebe:	697b      	ldr	r3, [r7, #20]
    7ec0:	7e1b      	ldrb	r3, [r3, #24]
    7ec2:	b2da      	uxtb	r2, r3
    7ec4:	230e      	movs	r3, #14
    7ec6:	18fb      	adds	r3, r7, r3
    7ec8:	210e      	movs	r1, #14
    7eca:	1879      	adds	r1, r7, r1
    7ecc:	7809      	ldrb	r1, [r1, #0]
    7ece:	400a      	ands	r2, r1
    7ed0:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    7ed2:	697b      	ldr	r3, [r7, #20]
    7ed4:	8b5b      	ldrh	r3, [r3, #26]
    7ed6:	b29b      	uxth	r3, r3
    7ed8:	2b00      	cmp	r3, #0
    7eda:	d109      	bne.n	7ef0 <_i2c_master_interrupt_handler+0x70>
    7edc:	697b      	ldr	r3, [r7, #20]
    7ede:	8b9b      	ldrh	r3, [r3, #28]
    7ee0:	b29b      	uxth	r3, r3
    7ee2:	2b00      	cmp	r3, #0
    7ee4:	d004      	beq.n	7ef0 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    7ee6:	697b      	ldr	r3, [r7, #20]
    7ee8:	0018      	movs	r0, r3
    7eea:	4b7e      	ldr	r3, [pc, #504]	; (80e4 <_i2c_master_interrupt_handler+0x264>)
    7eec:	4798      	blx	r3
    7eee:	e070      	b.n	7fd2 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    7ef0:	697b      	ldr	r3, [r7, #20]
    7ef2:	8b5b      	ldrh	r3, [r3, #26]
    7ef4:	b29b      	uxth	r3, r3
    7ef6:	2b00      	cmp	r3, #0
    7ef8:	d039      	beq.n	7f6e <_i2c_master_interrupt_handler+0xee>
    7efa:	697b      	ldr	r3, [r7, #20]
    7efc:	8b9b      	ldrh	r3, [r3, #28]
    7efe:	b29b      	uxth	r3, r3
    7f00:	2b00      	cmp	r3, #0
    7f02:	d134      	bne.n	7f6e <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    7f04:	697b      	ldr	r3, [r7, #20]
    7f06:	2225      	movs	r2, #37	; 0x25
    7f08:	5c9b      	ldrb	r3, [r3, r2]
    7f0a:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    7f0c:	2b05      	cmp	r3, #5
    7f0e:	d12e      	bne.n	7f6e <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    7f10:	697b      	ldr	r3, [r7, #20]
    7f12:	2224      	movs	r2, #36	; 0x24
    7f14:	5c9b      	ldrb	r3, [r3, r2]
    7f16:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    7f18:	2b00      	cmp	r3, #0
    7f1a:	d128      	bne.n	7f6e <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    7f1c:	693b      	ldr	r3, [r7, #16]
    7f1e:	2203      	movs	r2, #3
    7f20:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    7f22:	697b      	ldr	r3, [r7, #20]
    7f24:	2200      	movs	r2, #0
    7f26:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    7f28:	697b      	ldr	r3, [r7, #20]
    7f2a:	2225      	movs	r2, #37	; 0x25
    7f2c:	2100      	movs	r1, #0
    7f2e:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    7f30:	697b      	ldr	r3, [r7, #20]
    7f32:	7a9b      	ldrb	r3, [r3, #10]
    7f34:	2b00      	cmp	r3, #0
    7f36:	d00b      	beq.n	7f50 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    7f38:	697b      	ldr	r3, [r7, #20]
    7f3a:	0018      	movs	r0, r3
    7f3c:	4b6a      	ldr	r3, [pc, #424]	; (80e8 <_i2c_master_interrupt_handler+0x268>)
    7f3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7f40:	693b      	ldr	r3, [r7, #16]
    7f42:	685b      	ldr	r3, [r3, #4]
    7f44:	22c0      	movs	r2, #192	; 0xc0
    7f46:	0292      	lsls	r2, r2, #10
    7f48:	431a      	orrs	r2, r3
    7f4a:	693b      	ldr	r3, [r7, #16]
    7f4c:	605a      	str	r2, [r3, #4]
    7f4e:	e002      	b.n	7f56 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    7f50:	693b      	ldr	r3, [r7, #16]
    7f52:	2201      	movs	r2, #1
    7f54:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    7f56:	230e      	movs	r3, #14
    7f58:	18fb      	adds	r3, r7, r3
    7f5a:	781b      	ldrb	r3, [r3, #0]
    7f5c:	2201      	movs	r2, #1
    7f5e:	4013      	ands	r3, r2
    7f60:	d037      	beq.n	7fd2 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    7f62:	697b      	ldr	r3, [r7, #20]
    7f64:	68db      	ldr	r3, [r3, #12]
    7f66:	697a      	ldr	r2, [r7, #20]
    7f68:	0010      	movs	r0, r2
    7f6a:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    7f6c:	e031      	b.n	7fd2 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    7f6e:	697b      	ldr	r3, [r7, #20]
    7f70:	8b5b      	ldrh	r3, [r3, #26]
    7f72:	b29b      	uxth	r3, r3
    7f74:	2b00      	cmp	r3, #0
    7f76:	d02c      	beq.n	7fd2 <_i2c_master_interrupt_handler+0x152>
    7f78:	697b      	ldr	r3, [r7, #20]
    7f7a:	8b9b      	ldrh	r3, [r3, #28]
    7f7c:	b29b      	uxth	r3, r3
    7f7e:	2b00      	cmp	r3, #0
    7f80:	d027      	beq.n	7fd2 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    7f82:	693b      	ldr	r3, [r7, #16]
    7f84:	8b5b      	ldrh	r3, [r3, #26]
    7f86:	b29b      	uxth	r3, r3
    7f88:	001a      	movs	r2, r3
    7f8a:	2320      	movs	r3, #32
    7f8c:	4013      	ands	r3, r2
    7f8e:	d111      	bne.n	7fb4 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    7f90:	230f      	movs	r3, #15
    7f92:	18fb      	adds	r3, r7, r3
    7f94:	781b      	ldrb	r3, [r3, #0]
    7f96:	2201      	movs	r2, #1
    7f98:	4053      	eors	r3, r2
    7f9a:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    7f9c:	2b00      	cmp	r3, #0
    7f9e:	d104      	bne.n	7faa <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    7fa0:	697b      	ldr	r3, [r7, #20]
    7fa2:	8b9b      	ldrh	r3, [r3, #28]
    7fa4:	b29b      	uxth	r3, r3
    7fa6:	2b01      	cmp	r3, #1
    7fa8:	d004      	beq.n	7fb4 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    7faa:	697b      	ldr	r3, [r7, #20]
    7fac:	2225      	movs	r2, #37	; 0x25
    7fae:	2141      	movs	r1, #65	; 0x41
    7fb0:	5499      	strb	r1, [r3, r2]
    7fb2:	e00e      	b.n	7fd2 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    7fb4:	697b      	ldr	r3, [r7, #20]
    7fb6:	2224      	movs	r2, #36	; 0x24
    7fb8:	5c9b      	ldrb	r3, [r3, r2]
    7fba:	b2db      	uxtb	r3, r3
    7fbc:	2b00      	cmp	r3, #0
    7fbe:	d104      	bne.n	7fca <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    7fc0:	697b      	ldr	r3, [r7, #20]
    7fc2:	0018      	movs	r0, r3
    7fc4:	4b49      	ldr	r3, [pc, #292]	; (80ec <_i2c_master_interrupt_handler+0x26c>)
    7fc6:	4798      	blx	r3
    7fc8:	e003      	b.n	7fd2 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    7fca:	697b      	ldr	r3, [r7, #20]
    7fcc:	0018      	movs	r0, r3
    7fce:	4b48      	ldr	r3, [pc, #288]	; (80f0 <_i2c_master_interrupt_handler+0x270>)
    7fd0:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    7fd2:	697b      	ldr	r3, [r7, #20]
    7fd4:	8b5b      	ldrh	r3, [r3, #26]
    7fd6:	b29b      	uxth	r3, r3
    7fd8:	2b00      	cmp	r3, #0
    7fda:	d047      	beq.n	806c <_i2c_master_interrupt_handler+0x1ec>
    7fdc:	697b      	ldr	r3, [r7, #20]
    7fde:	8b9b      	ldrh	r3, [r3, #28]
    7fe0:	b29b      	uxth	r3, r3
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d142      	bne.n	806c <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    7fe6:	697b      	ldr	r3, [r7, #20]
    7fe8:	2225      	movs	r2, #37	; 0x25
    7fea:	5c9b      	ldrb	r3, [r3, r2]
    7fec:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    7fee:	2b05      	cmp	r3, #5
    7ff0:	d13c      	bne.n	806c <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    7ff2:	697b      	ldr	r3, [r7, #20]
    7ff4:	2224      	movs	r2, #36	; 0x24
    7ff6:	5c9b      	ldrb	r3, [r3, r2]
    7ff8:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    7ffa:	2b01      	cmp	r3, #1
    7ffc:	d136      	bne.n	806c <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    7ffe:	693b      	ldr	r3, [r7, #16]
    8000:	7e1b      	ldrb	r3, [r3, #24]
    8002:	b2db      	uxtb	r3, r3
    8004:	001a      	movs	r2, r3
    8006:	2302      	movs	r3, #2
    8008:	4013      	ands	r3, r2
    800a:	d002      	beq.n	8012 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    800c:	693b      	ldr	r3, [r7, #16]
    800e:	2202      	movs	r2, #2
    8010:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    8012:	693b      	ldr	r3, [r7, #16]
    8014:	2203      	movs	r2, #3
    8016:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    8018:	697b      	ldr	r3, [r7, #20]
    801a:	2200      	movs	r2, #0
    801c:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    801e:	697b      	ldr	r3, [r7, #20]
    8020:	2225      	movs	r2, #37	; 0x25
    8022:	2100      	movs	r1, #0
    8024:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    8026:	230e      	movs	r3, #14
    8028:	18fb      	adds	r3, r7, r3
    802a:	781b      	ldrb	r3, [r3, #0]
    802c:	2202      	movs	r2, #2
    802e:	4013      	ands	r3, r2
    8030:	d00b      	beq.n	804a <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    8032:	697b      	ldr	r3, [r7, #20]
    8034:	2224      	movs	r2, #36	; 0x24
    8036:	5c9b      	ldrb	r3, [r3, r2]
    8038:	b2db      	uxtb	r3, r3
    803a:	2b01      	cmp	r3, #1
    803c:	d105      	bne.n	804a <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    803e:	697b      	ldr	r3, [r7, #20]
    8040:	691b      	ldr	r3, [r3, #16]
    8042:	697a      	ldr	r2, [r7, #20]
    8044:	0010      	movs	r0, r2
    8046:	4798      	blx	r3
    8048:	e010      	b.n	806c <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    804a:	230e      	movs	r3, #14
    804c:	18fb      	adds	r3, r7, r3
    804e:	781b      	ldrb	r3, [r3, #0]
    8050:	2201      	movs	r2, #1
    8052:	4013      	ands	r3, r2
    8054:	d00a      	beq.n	806c <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    8056:	697b      	ldr	r3, [r7, #20]
    8058:	2224      	movs	r2, #36	; 0x24
    805a:	5c9b      	ldrb	r3, [r3, r2]
    805c:	b2db      	uxtb	r3, r3
    805e:	2b00      	cmp	r3, #0
    8060:	d104      	bne.n	806c <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    8062:	697b      	ldr	r3, [r7, #20]
    8064:	68db      	ldr	r3, [r3, #12]
    8066:	697a      	ldr	r2, [r7, #20]
    8068:	0010      	movs	r0, r2
    806a:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    806c:	697b      	ldr	r3, [r7, #20]
    806e:	2225      	movs	r2, #37	; 0x25
    8070:	5c9b      	ldrb	r3, [r3, r2]
    8072:	b2db      	uxtb	r3, r3
    8074:	2b05      	cmp	r3, #5
    8076:	d02e      	beq.n	80d6 <_i2c_master_interrupt_handler+0x256>
    8078:	697b      	ldr	r3, [r7, #20]
    807a:	2225      	movs	r2, #37	; 0x25
    807c:	5c9b      	ldrb	r3, [r3, r2]
    807e:	b2db      	uxtb	r3, r3
    8080:	2b00      	cmp	r3, #0
    8082:	d028      	beq.n	80d6 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    8084:	693b      	ldr	r3, [r7, #16]
    8086:	2203      	movs	r2, #3
    8088:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    808a:	697b      	ldr	r3, [r7, #20]
    808c:	2200      	movs	r2, #0
    808e:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    8090:	697b      	ldr	r3, [r7, #20]
    8092:	2200      	movs	r2, #0
    8094:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    8096:	697b      	ldr	r3, [r7, #20]
    8098:	2225      	movs	r2, #37	; 0x25
    809a:	5c9b      	ldrb	r3, [r3, r2]
    809c:	b2db      	uxtb	r3, r3
    809e:	2b41      	cmp	r3, #65	; 0x41
    80a0:	d00e      	beq.n	80c0 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    80a2:	697b      	ldr	r3, [r7, #20]
    80a4:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    80a6:	2b00      	cmp	r3, #0
    80a8:	d00a      	beq.n	80c0 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    80aa:	697b      	ldr	r3, [r7, #20]
    80ac:	0018      	movs	r0, r3
    80ae:	4b0e      	ldr	r3, [pc, #56]	; (80e8 <_i2c_master_interrupt_handler+0x268>)
    80b0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    80b2:	693b      	ldr	r3, [r7, #16]
    80b4:	685b      	ldr	r3, [r3, #4]
    80b6:	22e0      	movs	r2, #224	; 0xe0
    80b8:	02d2      	lsls	r2, r2, #11
    80ba:	431a      	orrs	r2, r3
    80bc:	693b      	ldr	r3, [r7, #16]
    80be:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    80c0:	230e      	movs	r3, #14
    80c2:	18fb      	adds	r3, r7, r3
    80c4:	781b      	ldrb	r3, [r3, #0]
    80c6:	2204      	movs	r2, #4
    80c8:	4013      	ands	r3, r2
    80ca:	d004      	beq.n	80d6 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    80cc:	697b      	ldr	r3, [r7, #20]
    80ce:	695b      	ldr	r3, [r3, #20]
    80d0:	697a      	ldr	r2, [r7, #20]
    80d2:	0010      	movs	r0, r2
    80d4:	4798      	blx	r3
		}
	}
}
    80d6:	46c0      	nop			; (mov r8, r8)
    80d8:	46bd      	mov	sp, r7
    80da:	b006      	add	sp, #24
    80dc:	bd80      	pop	{r7, pc}
    80de:	46c0      	nop			; (mov r8, r8)
    80e0:	200013e0 	.word	0x200013e0
    80e4:	00007dc5 	.word	0x00007dc5
    80e8:	00007c35 	.word	0x00007c35
    80ec:	00007d49 	.word	0x00007d49
    80f0:	00007c59 	.word	0x00007c59

000080f4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    80f4:	b580      	push	{r7, lr}
    80f6:	b082      	sub	sp, #8
    80f8:	af00      	add	r7, sp, #0
    80fa:	0002      	movs	r2, r0
    80fc:	1dfb      	adds	r3, r7, #7
    80fe:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    8100:	46c0      	nop			; (mov r8, r8)
    8102:	46bd      	mov	sp, r7
    8104:	b002      	add	sp, #8
    8106:	bd80      	pop	{r7, pc}

00008108 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    8108:	b580      	push	{r7, lr}
    810a:	b084      	sub	sp, #16
    810c:	af00      	add	r7, sp, #0
    810e:	0002      	movs	r2, r0
    8110:	6039      	str	r1, [r7, #0]
    8112:	1dfb      	adds	r3, r7, #7
    8114:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    8116:	4b13      	ldr	r3, [pc, #76]	; (8164 <_sercom_set_handler+0x5c>)
    8118:	781b      	ldrb	r3, [r3, #0]
    811a:	2201      	movs	r2, #1
    811c:	4053      	eors	r3, r2
    811e:	b2db      	uxtb	r3, r3
    8120:	2b00      	cmp	r3, #0
    8122:	d015      	beq.n	8150 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8124:	2300      	movs	r3, #0
    8126:	60fb      	str	r3, [r7, #12]
    8128:	e00c      	b.n	8144 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    812a:	4b0f      	ldr	r3, [pc, #60]	; (8168 <_sercom_set_handler+0x60>)
    812c:	68fa      	ldr	r2, [r7, #12]
    812e:	0092      	lsls	r2, r2, #2
    8130:	490e      	ldr	r1, [pc, #56]	; (816c <_sercom_set_handler+0x64>)
    8132:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    8134:	4b0e      	ldr	r3, [pc, #56]	; (8170 <_sercom_set_handler+0x68>)
    8136:	68fa      	ldr	r2, [r7, #12]
    8138:	0092      	lsls	r2, r2, #2
    813a:	2100      	movs	r1, #0
    813c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    813e:	68fb      	ldr	r3, [r7, #12]
    8140:	3301      	adds	r3, #1
    8142:	60fb      	str	r3, [r7, #12]
    8144:	68fb      	ldr	r3, [r7, #12]
    8146:	2b05      	cmp	r3, #5
    8148:	d9ef      	bls.n	812a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    814a:	4b06      	ldr	r3, [pc, #24]	; (8164 <_sercom_set_handler+0x5c>)
    814c:	2201      	movs	r2, #1
    814e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    8150:	1dfb      	adds	r3, r7, #7
    8152:	781a      	ldrb	r2, [r3, #0]
    8154:	4b04      	ldr	r3, [pc, #16]	; (8168 <_sercom_set_handler+0x60>)
    8156:	0092      	lsls	r2, r2, #2
    8158:	6839      	ldr	r1, [r7, #0]
    815a:	50d1      	str	r1, [r2, r3]
}
    815c:	46c0      	nop			; (mov r8, r8)
    815e:	46bd      	mov	sp, r7
    8160:	b004      	add	sp, #16
    8162:	bd80      	pop	{r7, pc}
    8164:	20000d25 	.word	0x20000d25
    8168:	20000d28 	.word	0x20000d28
    816c:	000080f5 	.word	0x000080f5
    8170:	200013e0 	.word	0x200013e0

00008174 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    8174:	b590      	push	{r4, r7, lr}
    8176:	b085      	sub	sp, #20
    8178:	af00      	add	r7, sp, #0
    817a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    817c:	2308      	movs	r3, #8
    817e:	18fb      	adds	r3, r7, r3
    8180:	4a0b      	ldr	r2, [pc, #44]	; (81b0 <_sercom_get_interrupt_vector+0x3c>)
    8182:	6811      	ldr	r1, [r2, #0]
    8184:	6019      	str	r1, [r3, #0]
    8186:	8892      	ldrh	r2, [r2, #4]
    8188:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    818a:	230f      	movs	r3, #15
    818c:	18fc      	adds	r4, r7, r3
    818e:	687b      	ldr	r3, [r7, #4]
    8190:	0018      	movs	r0, r3
    8192:	4b08      	ldr	r3, [pc, #32]	; (81b4 <_sercom_get_interrupt_vector+0x40>)
    8194:	4798      	blx	r3
    8196:	0003      	movs	r3, r0
    8198:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    819a:	230f      	movs	r3, #15
    819c:	18fb      	adds	r3, r7, r3
    819e:	781b      	ldrb	r3, [r3, #0]
    81a0:	2208      	movs	r2, #8
    81a2:	18ba      	adds	r2, r7, r2
    81a4:	5cd3      	ldrb	r3, [r2, r3]
    81a6:	b25b      	sxtb	r3, r3
}
    81a8:	0018      	movs	r0, r3
    81aa:	46bd      	mov	sp, r7
    81ac:	b005      	add	sp, #20
    81ae:	bd90      	pop	{r4, r7, pc}
    81b0:	000280a8 	.word	0x000280a8
    81b4:	000180a9 	.word	0x000180a9

000081b8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    81b8:	b580      	push	{r7, lr}
    81ba:	af00      	add	r7, sp, #0
    81bc:	4b03      	ldr	r3, [pc, #12]	; (81cc <SERCOM0_Handler+0x14>)
    81be:	681b      	ldr	r3, [r3, #0]
    81c0:	2000      	movs	r0, #0
    81c2:	4798      	blx	r3
    81c4:	46c0      	nop			; (mov r8, r8)
    81c6:	46bd      	mov	sp, r7
    81c8:	bd80      	pop	{r7, pc}
    81ca:	46c0      	nop			; (mov r8, r8)
    81cc:	20000d28 	.word	0x20000d28

000081d0 <SERCOM1_Handler>:
    81d0:	b580      	push	{r7, lr}
    81d2:	af00      	add	r7, sp, #0
    81d4:	4b03      	ldr	r3, [pc, #12]	; (81e4 <SERCOM1_Handler+0x14>)
    81d6:	685b      	ldr	r3, [r3, #4]
    81d8:	2001      	movs	r0, #1
    81da:	4798      	blx	r3
    81dc:	46c0      	nop			; (mov r8, r8)
    81de:	46bd      	mov	sp, r7
    81e0:	bd80      	pop	{r7, pc}
    81e2:	46c0      	nop			; (mov r8, r8)
    81e4:	20000d28 	.word	0x20000d28

000081e8 <SERCOM2_Handler>:
    81e8:	b580      	push	{r7, lr}
    81ea:	af00      	add	r7, sp, #0
    81ec:	4b03      	ldr	r3, [pc, #12]	; (81fc <SERCOM2_Handler+0x14>)
    81ee:	689b      	ldr	r3, [r3, #8]
    81f0:	2002      	movs	r0, #2
    81f2:	4798      	blx	r3
    81f4:	46c0      	nop			; (mov r8, r8)
    81f6:	46bd      	mov	sp, r7
    81f8:	bd80      	pop	{r7, pc}
    81fa:	46c0      	nop			; (mov r8, r8)
    81fc:	20000d28 	.word	0x20000d28

00008200 <SERCOM3_Handler>:
    8200:	b580      	push	{r7, lr}
    8202:	af00      	add	r7, sp, #0
    8204:	4b03      	ldr	r3, [pc, #12]	; (8214 <SERCOM3_Handler+0x14>)
    8206:	68db      	ldr	r3, [r3, #12]
    8208:	2003      	movs	r0, #3
    820a:	4798      	blx	r3
    820c:	46c0      	nop			; (mov r8, r8)
    820e:	46bd      	mov	sp, r7
    8210:	bd80      	pop	{r7, pc}
    8212:	46c0      	nop			; (mov r8, r8)
    8214:	20000d28 	.word	0x20000d28

00008218 <SERCOM4_Handler>:
    8218:	b580      	push	{r7, lr}
    821a:	af00      	add	r7, sp, #0
    821c:	4b03      	ldr	r3, [pc, #12]	; (822c <SERCOM4_Handler+0x14>)
    821e:	691b      	ldr	r3, [r3, #16]
    8220:	2004      	movs	r0, #4
    8222:	4798      	blx	r3
    8224:	46c0      	nop			; (mov r8, r8)
    8226:	46bd      	mov	sp, r7
    8228:	bd80      	pop	{r7, pc}
    822a:	46c0      	nop			; (mov r8, r8)
    822c:	20000d28 	.word	0x20000d28

00008230 <SERCOM5_Handler>:
    8230:	b580      	push	{r7, lr}
    8232:	af00      	add	r7, sp, #0
    8234:	4b03      	ldr	r3, [pc, #12]	; (8244 <SERCOM5_Handler+0x14>)
    8236:	695b      	ldr	r3, [r3, #20]
    8238:	2005      	movs	r0, #5
    823a:	4798      	blx	r3
    823c:	46c0      	nop			; (mov r8, r8)
    823e:	46bd      	mov	sp, r7
    8240:	bd80      	pop	{r7, pc}
    8242:	46c0      	nop			; (mov r8, r8)
    8244:	20000d28 	.word	0x20000d28

00008248 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    8248:	b580      	push	{r7, lr}
    824a:	b084      	sub	sp, #16
    824c:	af00      	add	r7, sp, #0
    824e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8250:	687b      	ldr	r3, [r7, #4]
    8252:	681b      	ldr	r3, [r3, #0]
    8254:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    8256:	687b      	ldr	r3, [r7, #4]
    8258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    825a:	781b      	ldrb	r3, [r3, #0]
    825c:	b2da      	uxtb	r2, r3
    825e:	230e      	movs	r3, #14
    8260:	18fb      	adds	r3, r7, r3
    8262:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    8264:	687b      	ldr	r3, [r7, #4]
    8266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8268:	1c5a      	adds	r2, r3, #1
    826a:	687b      	ldr	r3, [r7, #4]
    826c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    826e:	687b      	ldr	r3, [r7, #4]
    8270:	799b      	ldrb	r3, [r3, #6]
    8272:	2b01      	cmp	r3, #1
    8274:	d113      	bne.n	829e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    8276:	687b      	ldr	r3, [r7, #4]
    8278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    827a:	781b      	ldrb	r3, [r3, #0]
    827c:	b2db      	uxtb	r3, r3
    827e:	021b      	lsls	r3, r3, #8
    8280:	b21a      	sxth	r2, r3
    8282:	230e      	movs	r3, #14
    8284:	18fb      	adds	r3, r7, r3
    8286:	2100      	movs	r1, #0
    8288:	5e5b      	ldrsh	r3, [r3, r1]
    828a:	4313      	orrs	r3, r2
    828c:	b21a      	sxth	r2, r3
    828e:	230e      	movs	r3, #14
    8290:	18fb      	adds	r3, r7, r3
    8292:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    8294:	687b      	ldr	r3, [r7, #4]
    8296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8298:	1c5a      	adds	r2, r3, #1
    829a:	687b      	ldr	r3, [r7, #4]
    829c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    829e:	230e      	movs	r3, #14
    82a0:	18fb      	adds	r3, r7, r3
    82a2:	881b      	ldrh	r3, [r3, #0]
    82a4:	05db      	lsls	r3, r3, #23
    82a6:	0dda      	lsrs	r2, r3, #23
    82a8:	68bb      	ldr	r3, [r7, #8]
    82aa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    82b0:	b29b      	uxth	r3, r3
    82b2:	3b01      	subs	r3, #1
    82b4:	b29a      	uxth	r2, r3
    82b6:	687b      	ldr	r3, [r7, #4]
    82b8:	869a      	strh	r2, [r3, #52]	; 0x34
}
    82ba:	46c0      	nop			; (mov r8, r8)
    82bc:	46bd      	mov	sp, r7
    82be:	b004      	add	sp, #16
    82c0:	bd80      	pop	{r7, pc}
	...

000082c4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    82c4:	b580      	push	{r7, lr}
    82c6:	b084      	sub	sp, #16
    82c8:	af00      	add	r7, sp, #0
    82ca:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    82cc:	687b      	ldr	r3, [r7, #4]
    82ce:	681b      	ldr	r3, [r3, #0]
    82d0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    82d2:	4b08      	ldr	r3, [pc, #32]	; (82f4 <_spi_write_dummy+0x30>)
    82d4:	881b      	ldrh	r3, [r3, #0]
    82d6:	001a      	movs	r2, r3
    82d8:	68fb      	ldr	r3, [r7, #12]
    82da:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    82dc:	687b      	ldr	r3, [r7, #4]
    82de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    82e0:	b29b      	uxth	r3, r3
    82e2:	3b01      	subs	r3, #1
    82e4:	b29a      	uxth	r2, r3
    82e6:	687b      	ldr	r3, [r7, #4]
    82e8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    82ea:	46c0      	nop			; (mov r8, r8)
    82ec:	46bd      	mov	sp, r7
    82ee:	b004      	add	sp, #16
    82f0:	bd80      	pop	{r7, pc}
    82f2:	46c0      	nop			; (mov r8, r8)
    82f4:	200013f8 	.word	0x200013f8

000082f8 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    82f8:	b580      	push	{r7, lr}
    82fa:	b084      	sub	sp, #16
    82fc:	af00      	add	r7, sp, #0
    82fe:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8300:	687b      	ldr	r3, [r7, #4]
    8302:	681b      	ldr	r3, [r3, #0]
    8304:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    8306:	230a      	movs	r3, #10
    8308:	18fb      	adds	r3, r7, r3
    830a:	2200      	movs	r2, #0
    830c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    830e:	68fb      	ldr	r3, [r7, #12]
    8310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8312:	230a      	movs	r3, #10
    8314:	18fb      	adds	r3, r7, r3
    8316:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    8318:	687b      	ldr	r3, [r7, #4]
    831a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    831c:	b29b      	uxth	r3, r3
    831e:	3b01      	subs	r3, #1
    8320:	b29a      	uxth	r2, r3
    8322:	687b      	ldr	r3, [r7, #4]
    8324:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8326:	46c0      	nop			; (mov r8, r8)
    8328:	46bd      	mov	sp, r7
    832a:	b004      	add	sp, #16
    832c:	bd80      	pop	{r7, pc}

0000832e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    832e:	b580      	push	{r7, lr}
    8330:	b084      	sub	sp, #16
    8332:	af00      	add	r7, sp, #0
    8334:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8336:	687b      	ldr	r3, [r7, #4]
    8338:	681b      	ldr	r3, [r3, #0]
    833a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    833c:	68fb      	ldr	r3, [r7, #12]
    833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8340:	b29a      	uxth	r2, r3
    8342:	230a      	movs	r3, #10
    8344:	18fb      	adds	r3, r7, r3
    8346:	05d2      	lsls	r2, r2, #23
    8348:	0dd2      	lsrs	r2, r2, #23
    834a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    834c:	687b      	ldr	r3, [r7, #4]
    834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8350:	220a      	movs	r2, #10
    8352:	18ba      	adds	r2, r7, r2
    8354:	8812      	ldrh	r2, [r2, #0]
    8356:	b2d2      	uxtb	r2, r2
    8358:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    835a:	687b      	ldr	r3, [r7, #4]
    835c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    835e:	1c5a      	adds	r2, r3, #1
    8360:	687b      	ldr	r3, [r7, #4]
    8362:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8364:	687b      	ldr	r3, [r7, #4]
    8366:	799b      	ldrb	r3, [r3, #6]
    8368:	2b01      	cmp	r3, #1
    836a:	d10d      	bne.n	8388 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    836c:	687b      	ldr	r3, [r7, #4]
    836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8370:	220a      	movs	r2, #10
    8372:	18ba      	adds	r2, r7, r2
    8374:	8812      	ldrh	r2, [r2, #0]
    8376:	0a12      	lsrs	r2, r2, #8
    8378:	b292      	uxth	r2, r2
    837a:	b2d2      	uxtb	r2, r2
    837c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    837e:	687b      	ldr	r3, [r7, #4]
    8380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8382:	1c5a      	adds	r2, r3, #1
    8384:	687b      	ldr	r3, [r7, #4]
    8386:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    8388:	687b      	ldr	r3, [r7, #4]
    838a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    838c:	b29b      	uxth	r3, r3
    838e:	3b01      	subs	r3, #1
    8390:	b29a      	uxth	r2, r3
    8392:	687b      	ldr	r3, [r7, #4]
    8394:	861a      	strh	r2, [r3, #48]	; 0x30
}
    8396:	46c0      	nop			; (mov r8, r8)
    8398:	46bd      	mov	sp, r7
    839a:	b004      	add	sp, #16
    839c:	bd80      	pop	{r7, pc}
	...

000083a0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    83a0:	b580      	push	{r7, lr}
    83a2:	b086      	sub	sp, #24
    83a4:	af00      	add	r7, sp, #0
    83a6:	0002      	movs	r2, r0
    83a8:	1dfb      	adds	r3, r7, #7
    83aa:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    83ac:	1dfb      	adds	r3, r7, #7
    83ae:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    83b0:	4bb9      	ldr	r3, [pc, #740]	; (8698 <_spi_interrupt_handler+0x2f8>)
    83b2:	0092      	lsls	r2, r2, #2
    83b4:	58d3      	ldr	r3, [r2, r3]
    83b6:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    83b8:	697b      	ldr	r3, [r7, #20]
    83ba:	681b      	ldr	r3, [r3, #0]
    83bc:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    83be:	697b      	ldr	r3, [r7, #20]
    83c0:	2237      	movs	r2, #55	; 0x37
    83c2:	5c9a      	ldrb	r2, [r3, r2]
    83c4:	697b      	ldr	r3, [r7, #20]
    83c6:	2136      	movs	r1, #54	; 0x36
    83c8:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    83ca:	230f      	movs	r3, #15
    83cc:	18fb      	adds	r3, r7, r3
    83ce:	400a      	ands	r2, r1
    83d0:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    83d2:	693b      	ldr	r3, [r7, #16]
    83d4:	7e1b      	ldrb	r3, [r3, #24]
    83d6:	b2da      	uxtb	r2, r3
    83d8:	230c      	movs	r3, #12
    83da:	18fb      	adds	r3, r7, r3
    83dc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    83de:	693b      	ldr	r3, [r7, #16]
    83e0:	7d9b      	ldrb	r3, [r3, #22]
    83e2:	b2db      	uxtb	r3, r3
    83e4:	b29a      	uxth	r2, r3
    83e6:	230c      	movs	r3, #12
    83e8:	18fb      	adds	r3, r7, r3
    83ea:	210c      	movs	r1, #12
    83ec:	1879      	adds	r1, r7, r1
    83ee:	8809      	ldrh	r1, [r1, #0]
    83f0:	400a      	ands	r2, r1
    83f2:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    83f4:	230c      	movs	r3, #12
    83f6:	18fb      	adds	r3, r7, r3
    83f8:	881b      	ldrh	r3, [r3, #0]
    83fa:	2201      	movs	r2, #1
    83fc:	4013      	ands	r3, r2
    83fe:	d041      	beq.n	8484 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8400:	697b      	ldr	r3, [r7, #20]
    8402:	795b      	ldrb	r3, [r3, #5]
    8404:	2b01      	cmp	r3, #1
    8406:	d110      	bne.n	842a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    8408:	697b      	ldr	r3, [r7, #20]
    840a:	7a5b      	ldrb	r3, [r3, #9]
    840c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    840e:	2b00      	cmp	r3, #0
    8410:	d10b      	bne.n	842a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    8412:	697b      	ldr	r3, [r7, #20]
    8414:	0018      	movs	r0, r3
    8416:	4ba1      	ldr	r3, [pc, #644]	; (869c <_spi_interrupt_handler+0x2fc>)
    8418:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    841a:	697b      	ldr	r3, [r7, #20]
    841c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    841e:	b29b      	uxth	r3, r3
    8420:	2b00      	cmp	r3, #0
    8422:	d102      	bne.n	842a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8424:	693b      	ldr	r3, [r7, #16]
    8426:	2201      	movs	r2, #1
    8428:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    842a:	697b      	ldr	r3, [r7, #20]
    842c:	795b      	ldrb	r3, [r3, #5]
		if (0
    842e:	2b01      	cmp	r3, #1
    8430:	d104      	bne.n	843c <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    8432:	697b      	ldr	r3, [r7, #20]
    8434:	7a5b      	ldrb	r3, [r3, #9]
    8436:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    8438:	2b00      	cmp	r3, #0
    843a:	d108      	bne.n	844e <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    843c:	697b      	ldr	r3, [r7, #20]
    843e:	795b      	ldrb	r3, [r3, #5]
    8440:	2b00      	cmp	r3, #0
    8442:	d11f      	bne.n	8484 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    8444:	697b      	ldr	r3, [r7, #20]
    8446:	7a5b      	ldrb	r3, [r3, #9]
    8448:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    844a:	2b00      	cmp	r3, #0
    844c:	d01a      	beq.n	8484 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    844e:	697b      	ldr	r3, [r7, #20]
    8450:	0018      	movs	r0, r3
    8452:	4b93      	ldr	r3, [pc, #588]	; (86a0 <_spi_interrupt_handler+0x300>)
    8454:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    8456:	697b      	ldr	r3, [r7, #20]
    8458:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    845a:	b29b      	uxth	r3, r3
    845c:	2b00      	cmp	r3, #0
    845e:	d111      	bne.n	8484 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8460:	693b      	ldr	r3, [r7, #16]
    8462:	2201      	movs	r2, #1
    8464:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    8466:	697b      	ldr	r3, [r7, #20]
    8468:	7a5b      	ldrb	r3, [r3, #9]
    846a:	b2db      	uxtb	r3, r3
    846c:	2b01      	cmp	r3, #1
    846e:	d109      	bne.n	8484 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    8470:	697b      	ldr	r3, [r7, #20]
    8472:	79db      	ldrb	r3, [r3, #7]
    8474:	2201      	movs	r2, #1
    8476:	4053      	eors	r3, r2
    8478:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    847a:	2b00      	cmp	r3, #0
    847c:	d002      	beq.n	8484 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    847e:	693b      	ldr	r3, [r7, #16]
    8480:	2202      	movs	r2, #2
    8482:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    8484:	230c      	movs	r3, #12
    8486:	18fb      	adds	r3, r7, r3
    8488:	881b      	ldrh	r3, [r3, #0]
    848a:	2204      	movs	r2, #4
    848c:	4013      	ands	r3, r2
    848e:	d100      	bne.n	8492 <_spi_interrupt_handler+0xf2>
    8490:	e07e      	b.n	8590 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8492:	693b      	ldr	r3, [r7, #16]
    8494:	8b5b      	ldrh	r3, [r3, #26]
    8496:	b29b      	uxth	r3, r3
    8498:	001a      	movs	r2, r3
    849a:	2304      	movs	r3, #4
    849c:	4013      	ands	r3, r2
    849e:	d022      	beq.n	84e6 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    84a0:	697b      	ldr	r3, [r7, #20]
    84a2:	7a5b      	ldrb	r3, [r3, #9]
    84a4:	b2db      	uxtb	r3, r3
    84a6:	2b01      	cmp	r3, #1
    84a8:	d014      	beq.n	84d4 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    84aa:	697b      	ldr	r3, [r7, #20]
    84ac:	2238      	movs	r2, #56	; 0x38
    84ae:	211e      	movs	r1, #30
    84b0:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    84b2:	697b      	ldr	r3, [r7, #20]
    84b4:	2203      	movs	r2, #3
    84b6:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    84b8:	693b      	ldr	r3, [r7, #16]
    84ba:	2205      	movs	r2, #5
    84bc:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    84be:	230f      	movs	r3, #15
    84c0:	18fb      	adds	r3, r7, r3
    84c2:	781b      	ldrb	r3, [r3, #0]
    84c4:	2208      	movs	r2, #8
    84c6:	4013      	ands	r3, r2
    84c8:	d004      	beq.n	84d4 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    84ca:	697b      	ldr	r3, [r7, #20]
    84cc:	699b      	ldr	r3, [r3, #24]
    84ce:	697a      	ldr	r2, [r7, #20]
    84d0:	0010      	movs	r0, r2
    84d2:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    84d4:	693b      	ldr	r3, [r7, #16]
    84d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    84d8:	230a      	movs	r3, #10
    84da:	18fb      	adds	r3, r7, r3
    84dc:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    84de:	693b      	ldr	r3, [r7, #16]
    84e0:	2204      	movs	r2, #4
    84e2:	835a      	strh	r2, [r3, #26]
    84e4:	e054      	b.n	8590 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    84e6:	697b      	ldr	r3, [r7, #20]
    84e8:	7a5b      	ldrb	r3, [r3, #9]
    84ea:	b2db      	uxtb	r3, r3
    84ec:	2b01      	cmp	r3, #1
    84ee:	d11e      	bne.n	852e <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    84f0:	697b      	ldr	r3, [r7, #20]
    84f2:	0018      	movs	r0, r3
    84f4:	4b6b      	ldr	r3, [pc, #428]	; (86a4 <_spi_interrupt_handler+0x304>)
    84f6:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    84f8:	697b      	ldr	r3, [r7, #20]
    84fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    84fc:	b29b      	uxth	r3, r3
    84fe:	2b00      	cmp	r3, #0
    8500:	d146      	bne.n	8590 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8502:	693b      	ldr	r3, [r7, #16]
    8504:	2204      	movs	r2, #4
    8506:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    8508:	697b      	ldr	r3, [r7, #20]
    850a:	2238      	movs	r2, #56	; 0x38
    850c:	2100      	movs	r1, #0
    850e:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    8510:	697b      	ldr	r3, [r7, #20]
    8512:	2203      	movs	r2, #3
    8514:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    8516:	230f      	movs	r3, #15
    8518:	18fb      	adds	r3, r7, r3
    851a:	781b      	ldrb	r3, [r3, #0]
    851c:	2201      	movs	r2, #1
    851e:	4013      	ands	r3, r2
    8520:	d036      	beq.n	8590 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    8522:	697b      	ldr	r3, [r7, #20]
    8524:	68db      	ldr	r3, [r3, #12]
    8526:	697a      	ldr	r2, [r7, #20]
    8528:	0010      	movs	r0, r2
    852a:	4798      	blx	r3
    852c:	e030      	b.n	8590 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    852e:	697b      	ldr	r3, [r7, #20]
    8530:	0018      	movs	r0, r3
    8532:	4b5d      	ldr	r3, [pc, #372]	; (86a8 <_spi_interrupt_handler+0x308>)
    8534:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    8536:	697b      	ldr	r3, [r7, #20]
    8538:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    853a:	b29b      	uxth	r3, r3
    853c:	2b00      	cmp	r3, #0
    853e:	d127      	bne.n	8590 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    8540:	697b      	ldr	r3, [r7, #20]
    8542:	2238      	movs	r2, #56	; 0x38
    8544:	2100      	movs	r1, #0
    8546:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8548:	693b      	ldr	r3, [r7, #16]
    854a:	2204      	movs	r2, #4
    854c:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    854e:	697b      	ldr	r3, [r7, #20]
    8550:	7a5b      	ldrb	r3, [r3, #9]
    8552:	b2db      	uxtb	r3, r3
    8554:	2b02      	cmp	r3, #2
    8556:	d10b      	bne.n	8570 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    8558:	230f      	movs	r3, #15
    855a:	18fb      	adds	r3, r7, r3
    855c:	781b      	ldrb	r3, [r3, #0]
    855e:	2204      	movs	r2, #4
    8560:	4013      	ands	r3, r2
    8562:	d015      	beq.n	8590 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    8564:	697b      	ldr	r3, [r7, #20]
    8566:	695b      	ldr	r3, [r3, #20]
    8568:	697a      	ldr	r2, [r7, #20]
    856a:	0010      	movs	r0, r2
    856c:	4798      	blx	r3
    856e:	e00f      	b.n	8590 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    8570:	697b      	ldr	r3, [r7, #20]
    8572:	7a5b      	ldrb	r3, [r3, #9]
    8574:	b2db      	uxtb	r3, r3
    8576:	2b00      	cmp	r3, #0
    8578:	d10a      	bne.n	8590 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    857a:	230f      	movs	r3, #15
    857c:	18fb      	adds	r3, r7, r3
    857e:	781b      	ldrb	r3, [r3, #0]
    8580:	2202      	movs	r2, #2
    8582:	4013      	ands	r3, r2
    8584:	d004      	beq.n	8590 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    8586:	697b      	ldr	r3, [r7, #20]
    8588:	691b      	ldr	r3, [r3, #16]
    858a:	697a      	ldr	r2, [r7, #20]
    858c:	0010      	movs	r0, r2
    858e:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    8590:	230c      	movs	r3, #12
    8592:	18fb      	adds	r3, r7, r3
    8594:	881b      	ldrh	r3, [r3, #0]
    8596:	2202      	movs	r2, #2
    8598:	4013      	ands	r3, r2
    859a:	d046      	beq.n	862a <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    859c:	697b      	ldr	r3, [r7, #20]
    859e:	795b      	ldrb	r3, [r3, #5]
    85a0:	2b00      	cmp	r3, #0
    85a2:	d11d      	bne.n	85e0 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    85a4:	693b      	ldr	r3, [r7, #16]
    85a6:	2207      	movs	r2, #7
    85a8:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    85aa:	693b      	ldr	r3, [r7, #16]
    85ac:	2202      	movs	r2, #2
    85ae:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    85b0:	697b      	ldr	r3, [r7, #20]
    85b2:	2203      	movs	r2, #3
    85b4:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    85b6:	697b      	ldr	r3, [r7, #20]
    85b8:	2200      	movs	r2, #0
    85ba:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    85bc:	697b      	ldr	r3, [r7, #20]
    85be:	2200      	movs	r2, #0
    85c0:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    85c2:	697b      	ldr	r3, [r7, #20]
    85c4:	2238      	movs	r2, #56	; 0x38
    85c6:	2100      	movs	r1, #0
    85c8:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    85ca:	230f      	movs	r3, #15
    85cc:	18fb      	adds	r3, r7, r3
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	2210      	movs	r2, #16
    85d2:	4013      	ands	r3, r2
    85d4:	d004      	beq.n	85e0 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    85d6:	697b      	ldr	r3, [r7, #20]
    85d8:	69db      	ldr	r3, [r3, #28]
    85da:	697a      	ldr	r2, [r7, #20]
    85dc:	0010      	movs	r0, r2
    85de:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    85e0:	697b      	ldr	r3, [r7, #20]
    85e2:	795b      	ldrb	r3, [r3, #5]
    85e4:	2b01      	cmp	r3, #1
    85e6:	d120      	bne.n	862a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    85e8:	697b      	ldr	r3, [r7, #20]
    85ea:	7a5b      	ldrb	r3, [r3, #9]
    85ec:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    85ee:	2b01      	cmp	r3, #1
    85f0:	d11b      	bne.n	862a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    85f2:	697b      	ldr	r3, [r7, #20]
    85f4:	79db      	ldrb	r3, [r3, #7]
    85f6:	2201      	movs	r2, #1
    85f8:	4053      	eors	r3, r2
    85fa:	b2db      	uxtb	r3, r3
    85fc:	2b00      	cmp	r3, #0
    85fe:	d014      	beq.n	862a <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8600:	693b      	ldr	r3, [r7, #16]
    8602:	2202      	movs	r2, #2
    8604:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    8606:	697b      	ldr	r3, [r7, #20]
    8608:	2203      	movs	r2, #3
    860a:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    860c:	697b      	ldr	r3, [r7, #20]
    860e:	2238      	movs	r2, #56	; 0x38
    8610:	2100      	movs	r1, #0
    8612:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    8614:	230f      	movs	r3, #15
    8616:	18fb      	adds	r3, r7, r3
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	2201      	movs	r2, #1
    861c:	4013      	ands	r3, r2
    861e:	d004      	beq.n	862a <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    8620:	697b      	ldr	r3, [r7, #20]
    8622:	68db      	ldr	r3, [r3, #12]
    8624:	697a      	ldr	r2, [r7, #20]
    8626:	0010      	movs	r0, r2
    8628:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    862a:	230c      	movs	r3, #12
    862c:	18fb      	adds	r3, r7, r3
    862e:	881b      	ldrh	r3, [r3, #0]
    8630:	2208      	movs	r2, #8
    8632:	4013      	ands	r3, r2
    8634:	d014      	beq.n	8660 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    8636:	697b      	ldr	r3, [r7, #20]
    8638:	795b      	ldrb	r3, [r3, #5]
    863a:	2b00      	cmp	r3, #0
    863c:	d110      	bne.n	8660 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    863e:	693b      	ldr	r3, [r7, #16]
    8640:	2208      	movs	r2, #8
    8642:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    8644:	693b      	ldr	r3, [r7, #16]
    8646:	2208      	movs	r2, #8
    8648:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    864a:	230f      	movs	r3, #15
    864c:	18fb      	adds	r3, r7, r3
    864e:	781b      	ldrb	r3, [r3, #0]
    8650:	2220      	movs	r2, #32
    8652:	4013      	ands	r3, r2
    8654:	d004      	beq.n	8660 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    8656:	697b      	ldr	r3, [r7, #20]
    8658:	6a1b      	ldr	r3, [r3, #32]
    865a:	697a      	ldr	r2, [r7, #20]
    865c:	0010      	movs	r0, r2
    865e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    8660:	230c      	movs	r3, #12
    8662:	18fb      	adds	r3, r7, r3
    8664:	881b      	ldrh	r3, [r3, #0]
    8666:	2280      	movs	r2, #128	; 0x80
    8668:	4013      	ands	r3, r2
    866a:	d010      	beq.n	868e <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    866c:	693b      	ldr	r3, [r7, #16]
    866e:	2280      	movs	r2, #128	; 0x80
    8670:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    8672:	693b      	ldr	r3, [r7, #16]
    8674:	2280      	movs	r2, #128	; 0x80
    8676:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    8678:	230f      	movs	r3, #15
    867a:	18fb      	adds	r3, r7, r3
    867c:	781b      	ldrb	r3, [r3, #0]
    867e:	2240      	movs	r2, #64	; 0x40
    8680:	4013      	ands	r3, r2
    8682:	d004      	beq.n	868e <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    8684:	697b      	ldr	r3, [r7, #20]
    8686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8688:	697a      	ldr	r2, [r7, #20]
    868a:	0010      	movs	r0, r2
    868c:	4798      	blx	r3
		}
	}
#  endif
}
    868e:	46c0      	nop			; (mov r8, r8)
    8690:	46bd      	mov	sp, r7
    8692:	b006      	add	sp, #24
    8694:	bd80      	pop	{r7, pc}
    8696:	46c0      	nop			; (mov r8, r8)
    8698:	200013e0 	.word	0x200013e0
    869c:	000082c5 	.word	0x000082c5
    86a0:	00008249 	.word	0x00008249
    86a4:	000082f9 	.word	0x000082f9
    86a8:	0000832f 	.word	0x0000832f

000086ac <system_interrupt_enter_critical_section>:
{
    86ac:	b580      	push	{r7, lr}
    86ae:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    86b0:	4b02      	ldr	r3, [pc, #8]	; (86bc <system_interrupt_enter_critical_section+0x10>)
    86b2:	4798      	blx	r3
}
    86b4:	46c0      	nop			; (mov r8, r8)
    86b6:	46bd      	mov	sp, r7
    86b8:	bd80      	pop	{r7, pc}
    86ba:	46c0      	nop			; (mov r8, r8)
    86bc:	00006791 	.word	0x00006791

000086c0 <system_interrupt_leave_critical_section>:
{
    86c0:	b580      	push	{r7, lr}
    86c2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    86c4:	4b02      	ldr	r3, [pc, #8]	; (86d0 <system_interrupt_leave_critical_section+0x10>)
    86c6:	4798      	blx	r3
}
    86c8:	46c0      	nop			; (mov r8, r8)
    86ca:	46bd      	mov	sp, r7
    86cc:	bd80      	pop	{r7, pc}
    86ce:	46c0      	nop			; (mov r8, r8)
    86d0:	000067e5 	.word	0x000067e5

000086d4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    86d4:	b580      	push	{r7, lr}
    86d6:	b084      	sub	sp, #16
    86d8:	af00      	add	r7, sp, #0
    86da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    86dc:	687b      	ldr	r3, [r7, #4]
    86de:	681b      	ldr	r3, [r3, #0]
    86e0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    86e2:	68fb      	ldr	r3, [r7, #12]
    86e4:	69db      	ldr	r3, [r3, #28]
    86e6:	1e5a      	subs	r2, r3, #1
    86e8:	4193      	sbcs	r3, r2
    86ea:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    86ec:	0018      	movs	r0, r3
    86ee:	46bd      	mov	sp, r7
    86f0:	b004      	add	sp, #16
    86f2:	bd80      	pop	{r7, pc}

000086f4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    86f4:	b580      	push	{r7, lr}
    86f6:	b082      	sub	sp, #8
    86f8:	af00      	add	r7, sp, #0
    86fa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    86fc:	46c0      	nop			; (mov r8, r8)
    86fe:	687b      	ldr	r3, [r7, #4]
    8700:	0018      	movs	r0, r3
    8702:	4b04      	ldr	r3, [pc, #16]	; (8714 <_usart_wait_for_sync+0x20>)
    8704:	4798      	blx	r3
    8706:	1e03      	subs	r3, r0, #0
    8708:	d1f9      	bne.n	86fe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    870a:	46c0      	nop			; (mov r8, r8)
    870c:	46bd      	mov	sp, r7
    870e:	b002      	add	sp, #8
    8710:	bd80      	pop	{r7, pc}
    8712:	46c0      	nop			; (mov r8, r8)
    8714:	000086d5 	.word	0x000086d5

00008718 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    8718:	b580      	push	{r7, lr}
    871a:	b086      	sub	sp, #24
    871c:	af00      	add	r7, sp, #0
    871e:	60f8      	str	r0, [r7, #12]
    8720:	60b9      	str	r1, [r7, #8]
    8722:	1dbb      	adds	r3, r7, #6
    8724:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8726:	68fb      	ldr	r3, [r7, #12]
    8728:	681b      	ldr	r3, [r3, #0]
    872a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    872c:	4b0f      	ldr	r3, [pc, #60]	; (876c <_usart_write_buffer+0x54>)
    872e:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    8730:	68fb      	ldr	r3, [r7, #12]
    8732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    8734:	b29b      	uxth	r3, r3
    8736:	2b00      	cmp	r3, #0
    8738:	d003      	beq.n	8742 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    873a:	4b0d      	ldr	r3, [pc, #52]	; (8770 <_usart_write_buffer+0x58>)
    873c:	4798      	blx	r3
		return STATUS_BUSY;
    873e:	2305      	movs	r3, #5
    8740:	e010      	b.n	8764 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    8742:	68fb      	ldr	r3, [r7, #12]
    8744:	1dba      	adds	r2, r7, #6
    8746:	8812      	ldrh	r2, [r2, #0]
    8748:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    874a:	4b09      	ldr	r3, [pc, #36]	; (8770 <_usart_write_buffer+0x58>)
    874c:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    874e:	68fb      	ldr	r3, [r7, #12]
    8750:	68ba      	ldr	r2, [r7, #8]
    8752:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    8754:	68fb      	ldr	r3, [r7, #12]
    8756:	2233      	movs	r2, #51	; 0x33
    8758:	2105      	movs	r1, #5
    875a:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    875c:	697b      	ldr	r3, [r7, #20]
    875e:	2201      	movs	r2, #1
    8760:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    8762:	2300      	movs	r3, #0
}
    8764:	0018      	movs	r0, r3
    8766:	46bd      	mov	sp, r7
    8768:	b006      	add	sp, #24
    876a:	bd80      	pop	{r7, pc}
    876c:	000086ad 	.word	0x000086ad
    8770:	000086c1 	.word	0x000086c1

00008774 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    8774:	b580      	push	{r7, lr}
    8776:	b086      	sub	sp, #24
    8778:	af00      	add	r7, sp, #0
    877a:	60f8      	str	r0, [r7, #12]
    877c:	60b9      	str	r1, [r7, #8]
    877e:	1dbb      	adds	r3, r7, #6
    8780:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8782:	68fb      	ldr	r3, [r7, #12]
    8784:	681b      	ldr	r3, [r3, #0]
    8786:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    8788:	4b16      	ldr	r3, [pc, #88]	; (87e4 <_usart_read_buffer+0x70>)
    878a:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    878c:	68fb      	ldr	r3, [r7, #12]
    878e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    8790:	b29b      	uxth	r3, r3
    8792:	2b00      	cmp	r3, #0
    8794:	d003      	beq.n	879e <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    8796:	4b14      	ldr	r3, [pc, #80]	; (87e8 <_usart_read_buffer+0x74>)
    8798:	4798      	blx	r3
		return STATUS_BUSY;
    879a:	2305      	movs	r3, #5
    879c:	e01e      	b.n	87dc <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    879e:	68fb      	ldr	r3, [r7, #12]
    87a0:	1dba      	adds	r2, r7, #6
    87a2:	8812      	ldrh	r2, [r2, #0]
    87a4:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    87a6:	4b10      	ldr	r3, [pc, #64]	; (87e8 <_usart_read_buffer+0x74>)
    87a8:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    87aa:	68fb      	ldr	r3, [r7, #12]
    87ac:	68ba      	ldr	r2, [r7, #8]
    87ae:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    87b0:	68fb      	ldr	r3, [r7, #12]
    87b2:	2232      	movs	r2, #50	; 0x32
    87b4:	2105      	movs	r1, #5
    87b6:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    87b8:	697b      	ldr	r3, [r7, #20]
    87ba:	2204      	movs	r2, #4
    87bc:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    87be:	68fb      	ldr	r3, [r7, #12]
    87c0:	7a1b      	ldrb	r3, [r3, #8]
    87c2:	2b00      	cmp	r3, #0
    87c4:	d002      	beq.n	87cc <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    87c6:	697b      	ldr	r3, [r7, #20]
    87c8:	2220      	movs	r2, #32
    87ca:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    87cc:	68fb      	ldr	r3, [r7, #12]
    87ce:	7a5b      	ldrb	r3, [r3, #9]
    87d0:	2b00      	cmp	r3, #0
    87d2:	d002      	beq.n	87da <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    87d4:	697b      	ldr	r3, [r7, #20]
    87d6:	2208      	movs	r2, #8
    87d8:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    87da:	2300      	movs	r3, #0
}
    87dc:	0018      	movs	r0, r3
    87de:	46bd      	mov	sp, r7
    87e0:	b006      	add	sp, #24
    87e2:	bd80      	pop	{r7, pc}
    87e4:	000086ad 	.word	0x000086ad
    87e8:	000086c1 	.word	0x000086c1

000087ec <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    87ec:	b580      	push	{r7, lr}
    87ee:	b084      	sub	sp, #16
    87f0:	af00      	add	r7, sp, #0
    87f2:	60f8      	str	r0, [r7, #12]
    87f4:	60b9      	str	r1, [r7, #8]
    87f6:	1dfb      	adds	r3, r7, #7
    87f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    87fa:	1dfb      	adds	r3, r7, #7
    87fc:	781b      	ldrb	r3, [r3, #0]
    87fe:	68fa      	ldr	r2, [r7, #12]
    8800:	3302      	adds	r3, #2
    8802:	009b      	lsls	r3, r3, #2
    8804:	18d3      	adds	r3, r2, r3
    8806:	3304      	adds	r3, #4
    8808:	68ba      	ldr	r2, [r7, #8]
    880a:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    880c:	68fb      	ldr	r3, [r7, #12]
    880e:	2230      	movs	r2, #48	; 0x30
    8810:	5c9b      	ldrb	r3, [r3, r2]
    8812:	b25a      	sxtb	r2, r3
    8814:	1dfb      	adds	r3, r7, #7
    8816:	781b      	ldrb	r3, [r3, #0]
    8818:	2101      	movs	r1, #1
    881a:	4099      	lsls	r1, r3
    881c:	000b      	movs	r3, r1
    881e:	b25b      	sxtb	r3, r3
    8820:	4313      	orrs	r3, r2
    8822:	b25b      	sxtb	r3, r3
    8824:	b2d9      	uxtb	r1, r3
    8826:	68fb      	ldr	r3, [r7, #12]
    8828:	2230      	movs	r2, #48	; 0x30
    882a:	5499      	strb	r1, [r3, r2]
}
    882c:	46c0      	nop			; (mov r8, r8)
    882e:	46bd      	mov	sp, r7
    8830:	b004      	add	sp, #16
    8832:	bd80      	pop	{r7, pc}

00008834 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    8834:	b580      	push	{r7, lr}
    8836:	b082      	sub	sp, #8
    8838:	af00      	add	r7, sp, #0
    883a:	6078      	str	r0, [r7, #4]
    883c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    883e:	6839      	ldr	r1, [r7, #0]
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	2201      	movs	r2, #1
    8844:	0018      	movs	r0, r3
    8846:	4b03      	ldr	r3, [pc, #12]	; (8854 <usart_read_job+0x20>)
    8848:	4798      	blx	r3
    884a:	0003      	movs	r3, r0
}
    884c:	0018      	movs	r0, r3
    884e:	46bd      	mov	sp, r7
    8850:	b002      	add	sp, #8
    8852:	bd80      	pop	{r7, pc}
    8854:	00008775 	.word	0x00008775

00008858 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    8858:	b580      	push	{r7, lr}
    885a:	b084      	sub	sp, #16
    885c:	af00      	add	r7, sp, #0
    885e:	60f8      	str	r0, [r7, #12]
    8860:	60b9      	str	r1, [r7, #8]
    8862:	1dbb      	adds	r3, r7, #6
    8864:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    8866:	1dbb      	adds	r3, r7, #6
    8868:	881b      	ldrh	r3, [r3, #0]
    886a:	2b00      	cmp	r3, #0
    886c:	d101      	bne.n	8872 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    886e:	2317      	movs	r3, #23
    8870:	e010      	b.n	8894 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    8872:	68fb      	ldr	r3, [r7, #12]
    8874:	79db      	ldrb	r3, [r3, #7]
    8876:	2201      	movs	r2, #1
    8878:	4053      	eors	r3, r2
    887a:	b2db      	uxtb	r3, r3
    887c:	2b00      	cmp	r3, #0
    887e:	d001      	beq.n	8884 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    8880:	231c      	movs	r3, #28
    8882:	e007      	b.n	8894 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    8884:	1dbb      	adds	r3, r7, #6
    8886:	881a      	ldrh	r2, [r3, #0]
    8888:	68b9      	ldr	r1, [r7, #8]
    888a:	68fb      	ldr	r3, [r7, #12]
    888c:	0018      	movs	r0, r3
    888e:	4b03      	ldr	r3, [pc, #12]	; (889c <usart_write_buffer_job+0x44>)
    8890:	4798      	blx	r3
    8892:	0003      	movs	r3, r0
}
    8894:	0018      	movs	r0, r3
    8896:	46bd      	mov	sp, r7
    8898:	b004      	add	sp, #16
    889a:	bd80      	pop	{r7, pc}
    889c:	00008719 	.word	0x00008719

000088a0 <usart_abort_job>:
 * \param[in]  transceiver_type  Transfer type to cancel
 */
void usart_abort_job(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    88a0:	b580      	push	{r7, lr}
    88a2:	b084      	sub	sp, #16
    88a4:	af00      	add	r7, sp, #0
    88a6:	6078      	str	r0, [r7, #4]
    88a8:	000a      	movs	r2, r1
    88aa:	1cfb      	adds	r3, r7, #3
    88ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    88ae:	687b      	ldr	r3, [r7, #4]
    88b0:	681b      	ldr	r3, [r3, #0]
    88b2:	60fb      	str	r3, [r7, #12]

	switch(transceiver_type) {
    88b4:	1cfb      	adds	r3, r7, #3
    88b6:	781b      	ldrb	r3, [r3, #0]
    88b8:	2b00      	cmp	r3, #0
    88ba:	d002      	beq.n	88c2 <usart_abort_job+0x22>
    88bc:	2b01      	cmp	r3, #1
    88be:	d007      	beq.n	88d0 <usart_abort_job+0x30>
			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;

			break;
	}
}
    88c0:	e00d      	b.n	88de <usart_abort_job+0x3e>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    88c2:	68fb      	ldr	r3, [r7, #12]
    88c4:	2204      	movs	r2, #4
    88c6:	761a      	strb	r2, [r3, #24]
			module->remaining_rx_buffer_length = 0;
    88c8:	687b      	ldr	r3, [r7, #4]
    88ca:	2200      	movs	r2, #0
    88cc:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
    88ce:	e006      	b.n	88de <usart_abort_job+0x3e>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    88d0:	68fb      	ldr	r3, [r7, #12]
    88d2:	2202      	movs	r2, #2
    88d4:	761a      	strb	r2, [r3, #24]
			module->remaining_tx_buffer_length = 0;
    88d6:	687b      	ldr	r3, [r7, #4]
    88d8:	2200      	movs	r2, #0
    88da:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
    88dc:	46c0      	nop			; (mov r8, r8)
}
    88de:	46c0      	nop			; (mov r8, r8)
    88e0:	46bd      	mov	sp, r7
    88e2:	b004      	add	sp, #16
    88e4:	bd80      	pop	{r7, pc}
	...

000088e8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    88e8:	b580      	push	{r7, lr}
    88ea:	b088      	sub	sp, #32
    88ec:	af00      	add	r7, sp, #0
    88ee:	0002      	movs	r2, r0
    88f0:	1dfb      	adds	r3, r7, #7
    88f2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    88f4:	1dfb      	adds	r3, r7, #7
    88f6:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    88f8:	4ba3      	ldr	r3, [pc, #652]	; (8b88 <_usart_interrupt_handler+0x2a0>)
    88fa:	0092      	lsls	r2, r2, #2
    88fc:	58d3      	ldr	r3, [r2, r3]
    88fe:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    8900:	69bb      	ldr	r3, [r7, #24]
    8902:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    8904:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    8906:	69bb      	ldr	r3, [r7, #24]
    8908:	0018      	movs	r0, r3
    890a:	4ba0      	ldr	r3, [pc, #640]	; (8b8c <_usart_interrupt_handler+0x2a4>)
    890c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    890e:	697b      	ldr	r3, [r7, #20]
    8910:	7e1b      	ldrb	r3, [r3, #24]
    8912:	b2da      	uxtb	r2, r3
    8914:	2312      	movs	r3, #18
    8916:	18fb      	adds	r3, r7, r3
    8918:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    891a:	697b      	ldr	r3, [r7, #20]
    891c:	7d9b      	ldrb	r3, [r3, #22]
    891e:	b2db      	uxtb	r3, r3
    8920:	b29a      	uxth	r2, r3
    8922:	2312      	movs	r3, #18
    8924:	18fb      	adds	r3, r7, r3
    8926:	2112      	movs	r1, #18
    8928:	1879      	adds	r1, r7, r1
    892a:	8809      	ldrh	r1, [r1, #0]
    892c:	400a      	ands	r2, r1
    892e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    8930:	69bb      	ldr	r3, [r7, #24]
    8932:	2230      	movs	r2, #48	; 0x30
    8934:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    8936:	69ba      	ldr	r2, [r7, #24]
    8938:	2131      	movs	r1, #49	; 0x31
    893a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    893c:	4013      	ands	r3, r2
    893e:	b2da      	uxtb	r2, r3
    8940:	2310      	movs	r3, #16
    8942:	18fb      	adds	r3, r7, r3
    8944:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    8946:	2312      	movs	r3, #18
    8948:	18fb      	adds	r3, r7, r3
    894a:	881b      	ldrh	r3, [r3, #0]
    894c:	2201      	movs	r2, #1
    894e:	4013      	ands	r3, r2
    8950:	d044      	beq.n	89dc <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    8952:	69bb      	ldr	r3, [r7, #24]
    8954:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    8956:	b29b      	uxth	r3, r3
    8958:	2b00      	cmp	r3, #0
    895a:	d03c      	beq.n	89d6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    895c:	69bb      	ldr	r3, [r7, #24]
    895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8960:	781b      	ldrb	r3, [r3, #0]
    8962:	b2da      	uxtb	r2, r3
    8964:	231c      	movs	r3, #28
    8966:	18fb      	adds	r3, r7, r3
    8968:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    896a:	69bb      	ldr	r3, [r7, #24]
    896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    896e:	1c5a      	adds	r2, r3, #1
    8970:	69bb      	ldr	r3, [r7, #24]
    8972:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8974:	69bb      	ldr	r3, [r7, #24]
    8976:	795b      	ldrb	r3, [r3, #5]
    8978:	2b01      	cmp	r3, #1
    897a:	d113      	bne.n	89a4 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    897c:	69bb      	ldr	r3, [r7, #24]
    897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8980:	781b      	ldrb	r3, [r3, #0]
    8982:	b2db      	uxtb	r3, r3
    8984:	021b      	lsls	r3, r3, #8
    8986:	b21a      	sxth	r2, r3
    8988:	231c      	movs	r3, #28
    898a:	18fb      	adds	r3, r7, r3
    898c:	2100      	movs	r1, #0
    898e:	5e5b      	ldrsh	r3, [r3, r1]
    8990:	4313      	orrs	r3, r2
    8992:	b21a      	sxth	r2, r3
    8994:	231c      	movs	r3, #28
    8996:	18fb      	adds	r3, r7, r3
    8998:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    899a:	69bb      	ldr	r3, [r7, #24]
    899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    899e:	1c5a      	adds	r2, r3, #1
    89a0:	69bb      	ldr	r3, [r7, #24]
    89a2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    89a4:	231c      	movs	r3, #28
    89a6:	18fb      	adds	r3, r7, r3
    89a8:	881b      	ldrh	r3, [r3, #0]
    89aa:	05db      	lsls	r3, r3, #23
    89ac:	0ddb      	lsrs	r3, r3, #23
    89ae:	b29a      	uxth	r2, r3
    89b0:	697b      	ldr	r3, [r7, #20]
    89b2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    89b4:	69bb      	ldr	r3, [r7, #24]
    89b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    89b8:	b29b      	uxth	r3, r3
    89ba:	3b01      	subs	r3, #1
    89bc:	b29b      	uxth	r3, r3
    89be:	69ba      	ldr	r2, [r7, #24]
    89c0:	1c19      	adds	r1, r3, #0
    89c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
    89c4:	2b00      	cmp	r3, #0
    89c6:	d109      	bne.n	89dc <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    89c8:	697b      	ldr	r3, [r7, #20]
    89ca:	2201      	movs	r2, #1
    89cc:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    89ce:	697b      	ldr	r3, [r7, #20]
    89d0:	2202      	movs	r2, #2
    89d2:	759a      	strb	r2, [r3, #22]
    89d4:	e002      	b.n	89dc <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    89d6:	697b      	ldr	r3, [r7, #20]
    89d8:	2201      	movs	r2, #1
    89da:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    89dc:	2312      	movs	r3, #18
    89de:	18fb      	adds	r3, r7, r3
    89e0:	881b      	ldrh	r3, [r3, #0]
    89e2:	2202      	movs	r2, #2
    89e4:	4013      	ands	r3, r2
    89e6:	d011      	beq.n	8a0c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    89e8:	697b      	ldr	r3, [r7, #20]
    89ea:	2202      	movs	r2, #2
    89ec:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    89ee:	69bb      	ldr	r3, [r7, #24]
    89f0:	2233      	movs	r2, #51	; 0x33
    89f2:	2100      	movs	r1, #0
    89f4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    89f6:	2310      	movs	r3, #16
    89f8:	18fb      	adds	r3, r7, r3
    89fa:	881b      	ldrh	r3, [r3, #0]
    89fc:	2201      	movs	r2, #1
    89fe:	4013      	ands	r3, r2
    8a00:	d004      	beq.n	8a0c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    8a02:	69bb      	ldr	r3, [r7, #24]
    8a04:	68db      	ldr	r3, [r3, #12]
    8a06:	69ba      	ldr	r2, [r7, #24]
    8a08:	0010      	movs	r0, r2
    8a0a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    8a0c:	2312      	movs	r3, #18
    8a0e:	18fb      	adds	r3, r7, r3
    8a10:	881b      	ldrh	r3, [r3, #0]
    8a12:	2204      	movs	r2, #4
    8a14:	4013      	ands	r3, r2
    8a16:	d100      	bne.n	8a1a <_usart_interrupt_handler+0x132>
    8a18:	e0bd      	b.n	8b96 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    8a1a:	69bb      	ldr	r3, [r7, #24]
    8a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    8a1e:	b29b      	uxth	r3, r3
    8a20:	2b00      	cmp	r3, #0
    8a22:	d100      	bne.n	8a26 <_usart_interrupt_handler+0x13e>
    8a24:	e0b4      	b.n	8b90 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    8a26:	697b      	ldr	r3, [r7, #20]
    8a28:	8b5b      	ldrh	r3, [r3, #26]
    8a2a:	b29b      	uxth	r3, r3
    8a2c:	b2da      	uxtb	r2, r3
    8a2e:	231f      	movs	r3, #31
    8a30:	18fb      	adds	r3, r7, r3
    8a32:	213f      	movs	r1, #63	; 0x3f
    8a34:	400a      	ands	r2, r1
    8a36:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    8a38:	231f      	movs	r3, #31
    8a3a:	18fb      	adds	r3, r7, r3
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	2208      	movs	r2, #8
    8a40:	4013      	ands	r3, r2
    8a42:	d007      	beq.n	8a54 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    8a44:	231f      	movs	r3, #31
    8a46:	18fb      	adds	r3, r7, r3
    8a48:	221f      	movs	r2, #31
    8a4a:	18ba      	adds	r2, r7, r2
    8a4c:	7812      	ldrb	r2, [r2, #0]
    8a4e:	2108      	movs	r1, #8
    8a50:	438a      	bics	r2, r1
    8a52:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    8a54:	231f      	movs	r3, #31
    8a56:	18fb      	adds	r3, r7, r3
    8a58:	781b      	ldrb	r3, [r3, #0]
    8a5a:	2b00      	cmp	r3, #0
    8a5c:	d050      	beq.n	8b00 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    8a5e:	231f      	movs	r3, #31
    8a60:	18fb      	adds	r3, r7, r3
    8a62:	781b      	ldrb	r3, [r3, #0]
    8a64:	2202      	movs	r2, #2
    8a66:	4013      	ands	r3, r2
    8a68:	d007      	beq.n	8a7a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    8a6a:	69bb      	ldr	r3, [r7, #24]
    8a6c:	2232      	movs	r2, #50	; 0x32
    8a6e:	211a      	movs	r1, #26
    8a70:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    8a72:	697b      	ldr	r3, [r7, #20]
    8a74:	2202      	movs	r2, #2
    8a76:	835a      	strh	r2, [r3, #26]
    8a78:	e036      	b.n	8ae8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    8a7a:	231f      	movs	r3, #31
    8a7c:	18fb      	adds	r3, r7, r3
    8a7e:	781b      	ldrb	r3, [r3, #0]
    8a80:	2204      	movs	r2, #4
    8a82:	4013      	ands	r3, r2
    8a84:	d007      	beq.n	8a96 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    8a86:	69bb      	ldr	r3, [r7, #24]
    8a88:	2232      	movs	r2, #50	; 0x32
    8a8a:	211e      	movs	r1, #30
    8a8c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    8a8e:	697b      	ldr	r3, [r7, #20]
    8a90:	2204      	movs	r2, #4
    8a92:	835a      	strh	r2, [r3, #26]
    8a94:	e028      	b.n	8ae8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    8a96:	231f      	movs	r3, #31
    8a98:	18fb      	adds	r3, r7, r3
    8a9a:	781b      	ldrb	r3, [r3, #0]
    8a9c:	2201      	movs	r2, #1
    8a9e:	4013      	ands	r3, r2
    8aa0:	d007      	beq.n	8ab2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    8aa2:	69bb      	ldr	r3, [r7, #24]
    8aa4:	2232      	movs	r2, #50	; 0x32
    8aa6:	2113      	movs	r1, #19
    8aa8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    8aaa:	697b      	ldr	r3, [r7, #20]
    8aac:	2201      	movs	r2, #1
    8aae:	835a      	strh	r2, [r3, #26]
    8ab0:	e01a      	b.n	8ae8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    8ab2:	231f      	movs	r3, #31
    8ab4:	18fb      	adds	r3, r7, r3
    8ab6:	781b      	ldrb	r3, [r3, #0]
    8ab8:	2210      	movs	r2, #16
    8aba:	4013      	ands	r3, r2
    8abc:	d007      	beq.n	8ace <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    8abe:	69bb      	ldr	r3, [r7, #24]
    8ac0:	2232      	movs	r2, #50	; 0x32
    8ac2:	2142      	movs	r1, #66	; 0x42
    8ac4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    8ac6:	697b      	ldr	r3, [r7, #20]
    8ac8:	2210      	movs	r2, #16
    8aca:	835a      	strh	r2, [r3, #26]
    8acc:	e00c      	b.n	8ae8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    8ace:	231f      	movs	r3, #31
    8ad0:	18fb      	adds	r3, r7, r3
    8ad2:	781b      	ldrb	r3, [r3, #0]
    8ad4:	2220      	movs	r2, #32
    8ad6:	4013      	ands	r3, r2
    8ad8:	d006      	beq.n	8ae8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    8ada:	69bb      	ldr	r3, [r7, #24]
    8adc:	2232      	movs	r2, #50	; 0x32
    8ade:	2141      	movs	r1, #65	; 0x41
    8ae0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    8ae2:	697b      	ldr	r3, [r7, #20]
    8ae4:	2220      	movs	r2, #32
    8ae6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    8ae8:	2310      	movs	r3, #16
    8aea:	18fb      	adds	r3, r7, r3
    8aec:	881b      	ldrh	r3, [r3, #0]
    8aee:	2204      	movs	r2, #4
    8af0:	4013      	ands	r3, r2
				if (callback_status
    8af2:	d050      	beq.n	8b96 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    8af4:	69bb      	ldr	r3, [r7, #24]
    8af6:	695b      	ldr	r3, [r3, #20]
    8af8:	69ba      	ldr	r2, [r7, #24]
    8afa:	0010      	movs	r0, r2
    8afc:	4798      	blx	r3
    8afe:	e04a      	b.n	8b96 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    8b00:	697b      	ldr	r3, [r7, #20]
    8b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8b04:	b29a      	uxth	r2, r3
    8b06:	230e      	movs	r3, #14
    8b08:	18fb      	adds	r3, r7, r3
    8b0a:	05d2      	lsls	r2, r2, #23
    8b0c:	0dd2      	lsrs	r2, r2, #23
    8b0e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    8b10:	69bb      	ldr	r3, [r7, #24]
    8b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b14:	220e      	movs	r2, #14
    8b16:	18ba      	adds	r2, r7, r2
    8b18:	8812      	ldrh	r2, [r2, #0]
    8b1a:	b2d2      	uxtb	r2, r2
    8b1c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    8b1e:	69bb      	ldr	r3, [r7, #24]
    8b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b22:	1c5a      	adds	r2, r3, #1
    8b24:	69bb      	ldr	r3, [r7, #24]
    8b26:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8b28:	69bb      	ldr	r3, [r7, #24]
    8b2a:	795b      	ldrb	r3, [r3, #5]
    8b2c:	2b01      	cmp	r3, #1
    8b2e:	d10d      	bne.n	8b4c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    8b30:	69bb      	ldr	r3, [r7, #24]
    8b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b34:	220e      	movs	r2, #14
    8b36:	18ba      	adds	r2, r7, r2
    8b38:	8812      	ldrh	r2, [r2, #0]
    8b3a:	0a12      	lsrs	r2, r2, #8
    8b3c:	b292      	uxth	r2, r2
    8b3e:	b2d2      	uxtb	r2, r2
    8b40:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    8b42:	69bb      	ldr	r3, [r7, #24]
    8b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b46:	1c5a      	adds	r2, r3, #1
    8b48:	69bb      	ldr	r3, [r7, #24]
    8b4a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    8b4c:	69bb      	ldr	r3, [r7, #24]
    8b4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    8b50:	b29b      	uxth	r3, r3
    8b52:	3b01      	subs	r3, #1
    8b54:	b29b      	uxth	r3, r3
    8b56:	69ba      	ldr	r2, [r7, #24]
    8b58:	1c19      	adds	r1, r3, #0
    8b5a:	8591      	strh	r1, [r2, #44]	; 0x2c
    8b5c:	2b00      	cmp	r3, #0
    8b5e:	d11a      	bne.n	8b96 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8b60:	697b      	ldr	r3, [r7, #20]
    8b62:	2204      	movs	r2, #4
    8b64:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    8b66:	69bb      	ldr	r3, [r7, #24]
    8b68:	2232      	movs	r2, #50	; 0x32
    8b6a:	2100      	movs	r1, #0
    8b6c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    8b6e:	2310      	movs	r3, #16
    8b70:	18fb      	adds	r3, r7, r3
    8b72:	881b      	ldrh	r3, [r3, #0]
    8b74:	2202      	movs	r2, #2
    8b76:	4013      	ands	r3, r2
					if (callback_status
    8b78:	d00d      	beq.n	8b96 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    8b7a:	69bb      	ldr	r3, [r7, #24]
    8b7c:	691b      	ldr	r3, [r3, #16]
    8b7e:	69ba      	ldr	r2, [r7, #24]
    8b80:	0010      	movs	r0, r2
    8b82:	4798      	blx	r3
    8b84:	e007      	b.n	8b96 <_usart_interrupt_handler+0x2ae>
    8b86:	46c0      	nop			; (mov r8, r8)
    8b88:	200013e0 	.word	0x200013e0
    8b8c:	000086f5 	.word	0x000086f5
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8b90:	697b      	ldr	r3, [r7, #20]
    8b92:	2204      	movs	r2, #4
    8b94:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    8b96:	2312      	movs	r3, #18
    8b98:	18fb      	adds	r3, r7, r3
    8b9a:	881b      	ldrh	r3, [r3, #0]
    8b9c:	2210      	movs	r2, #16
    8b9e:	4013      	ands	r3, r2
    8ba0:	d010      	beq.n	8bc4 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    8ba2:	697b      	ldr	r3, [r7, #20]
    8ba4:	2210      	movs	r2, #16
    8ba6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    8ba8:	697b      	ldr	r3, [r7, #20]
    8baa:	2210      	movs	r2, #16
    8bac:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    8bae:	2310      	movs	r3, #16
    8bb0:	18fb      	adds	r3, r7, r3
    8bb2:	881b      	ldrh	r3, [r3, #0]
    8bb4:	2210      	movs	r2, #16
    8bb6:	4013      	ands	r3, r2
    8bb8:	d004      	beq.n	8bc4 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    8bba:	69bb      	ldr	r3, [r7, #24]
    8bbc:	69db      	ldr	r3, [r3, #28]
    8bbe:	69ba      	ldr	r2, [r7, #24]
    8bc0:	0010      	movs	r0, r2
    8bc2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    8bc4:	2312      	movs	r3, #18
    8bc6:	18fb      	adds	r3, r7, r3
    8bc8:	881b      	ldrh	r3, [r3, #0]
    8bca:	2220      	movs	r2, #32
    8bcc:	4013      	ands	r3, r2
    8bce:	d010      	beq.n	8bf2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    8bd0:	697b      	ldr	r3, [r7, #20]
    8bd2:	2220      	movs	r2, #32
    8bd4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    8bd6:	697b      	ldr	r3, [r7, #20]
    8bd8:	2220      	movs	r2, #32
    8bda:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    8bdc:	2310      	movs	r3, #16
    8bde:	18fb      	adds	r3, r7, r3
    8be0:	881b      	ldrh	r3, [r3, #0]
    8be2:	2208      	movs	r2, #8
    8be4:	4013      	ands	r3, r2
    8be6:	d004      	beq.n	8bf2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    8be8:	69bb      	ldr	r3, [r7, #24]
    8bea:	699b      	ldr	r3, [r3, #24]
    8bec:	69ba      	ldr	r2, [r7, #24]
    8bee:	0010      	movs	r0, r2
    8bf0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    8bf2:	2312      	movs	r3, #18
    8bf4:	18fb      	adds	r3, r7, r3
    8bf6:	881b      	ldrh	r3, [r3, #0]
    8bf8:	2208      	movs	r2, #8
    8bfa:	4013      	ands	r3, r2
    8bfc:	d010      	beq.n	8c20 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    8bfe:	697b      	ldr	r3, [r7, #20]
    8c00:	2208      	movs	r2, #8
    8c02:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    8c04:	697b      	ldr	r3, [r7, #20]
    8c06:	2208      	movs	r2, #8
    8c08:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    8c0a:	2310      	movs	r3, #16
    8c0c:	18fb      	adds	r3, r7, r3
    8c0e:	881b      	ldrh	r3, [r3, #0]
    8c10:	2220      	movs	r2, #32
    8c12:	4013      	ands	r3, r2
    8c14:	d004      	beq.n	8c20 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    8c16:	69bb      	ldr	r3, [r7, #24]
    8c18:	6a1b      	ldr	r3, [r3, #32]
    8c1a:	69ba      	ldr	r2, [r7, #24]
    8c1c:	0010      	movs	r0, r2
    8c1e:	4798      	blx	r3
		}
	}
#endif
}
    8c20:	46c0      	nop			; (mov r8, r8)
    8c22:	46bd      	mov	sp, r7
    8c24:	b008      	add	sp, #32
    8c26:	bd80      	pop	{r7, pc}

00008c28 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	b084      	sub	sp, #16
    8c2c:	af00      	add	r7, sp, #0
    8c2e:	60f8      	str	r0, [r7, #12]
    8c30:	60b9      	str	r1, [r7, #8]
    8c32:	1dfb      	adds	r3, r7, #7
    8c34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    8c36:	1dfb      	adds	r3, r7, #7
    8c38:	781a      	ldrb	r2, [r3, #0]
    8c3a:	68fb      	ldr	r3, [r7, #12]
    8c3c:	3202      	adds	r2, #2
    8c3e:	0092      	lsls	r2, r2, #2
    8c40:	68b9      	ldr	r1, [r7, #8]
    8c42:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    8c44:	1dfb      	adds	r3, r7, #7
    8c46:	781b      	ldrb	r3, [r3, #0]
    8c48:	2b02      	cmp	r3, #2
    8c4a:	d107      	bne.n	8c5c <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    8c4c:	68fb      	ldr	r3, [r7, #12]
    8c4e:	7e1b      	ldrb	r3, [r3, #24]
    8c50:	2210      	movs	r2, #16
    8c52:	4313      	orrs	r3, r2
    8c54:	b2da      	uxtb	r2, r3
    8c56:	68fb      	ldr	r3, [r7, #12]
    8c58:	761a      	strb	r2, [r3, #24]
    8c5a:	e019      	b.n	8c90 <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    8c5c:	1dfb      	adds	r3, r7, #7
    8c5e:	781b      	ldrb	r3, [r3, #0]
    8c60:	2b03      	cmp	r3, #3
    8c62:	d107      	bne.n	8c74 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    8c64:	68fb      	ldr	r3, [r7, #12]
    8c66:	7e1b      	ldrb	r3, [r3, #24]
    8c68:	2220      	movs	r2, #32
    8c6a:	4313      	orrs	r3, r2
    8c6c:	b2da      	uxtb	r2, r3
    8c6e:	68fb      	ldr	r3, [r7, #12]
    8c70:	761a      	strb	r2, [r3, #24]
    8c72:	e00d      	b.n	8c90 <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    8c74:	68fb      	ldr	r3, [r7, #12]
    8c76:	7e1b      	ldrb	r3, [r3, #24]
    8c78:	b25a      	sxtb	r2, r3
    8c7a:	1dfb      	adds	r3, r7, #7
    8c7c:	781b      	ldrb	r3, [r3, #0]
    8c7e:	2101      	movs	r1, #1
    8c80:	4099      	lsls	r1, r3
    8c82:	000b      	movs	r3, r1
    8c84:	b25b      	sxtb	r3, r3
    8c86:	4313      	orrs	r3, r2
    8c88:	b25b      	sxtb	r3, r3
    8c8a:	b2da      	uxtb	r2, r3
    8c8c:	68fb      	ldr	r3, [r7, #12]
    8c8e:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    8c90:	2300      	movs	r3, #0
}
    8c92:	0018      	movs	r0, r3
    8c94:	46bd      	mov	sp, r7
    8c96:	b004      	add	sp, #16
    8c98:	bd80      	pop	{r7, pc}
	...

00008c9c <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
    8c9c:	b580      	push	{r7, lr}
    8c9e:	af00      	add	r7, sp, #0
    8ca0:	2000      	movs	r0, #0
    8ca2:	4b02      	ldr	r3, [pc, #8]	; (8cac <TC0_Handler+0x10>)
    8ca4:	4798      	blx	r3
    8ca6:	46c0      	nop			; (mov r8, r8)
    8ca8:	46bd      	mov	sp, r7
    8caa:	bd80      	pop	{r7, pc}
    8cac:	00008cd9 	.word	0x00008cd9

00008cb0 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    8cb0:	b580      	push	{r7, lr}
    8cb2:	af00      	add	r7, sp, #0
    8cb4:	2001      	movs	r0, #1
    8cb6:	4b02      	ldr	r3, [pc, #8]	; (8cc0 <TC1_Handler+0x10>)
    8cb8:	4798      	blx	r3
    8cba:	46c0      	nop			; (mov r8, r8)
    8cbc:	46bd      	mov	sp, r7
    8cbe:	bd80      	pop	{r7, pc}
    8cc0:	00008cd9 	.word	0x00008cd9

00008cc4 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    8cc4:	b580      	push	{r7, lr}
    8cc6:	af00      	add	r7, sp, #0
    8cc8:	2002      	movs	r0, #2
    8cca:	4b02      	ldr	r3, [pc, #8]	; (8cd4 <TC4_Handler+0x10>)
    8ccc:	4798      	blx	r3
    8cce:	46c0      	nop			; (mov r8, r8)
    8cd0:	46bd      	mov	sp, r7
    8cd2:	bd80      	pop	{r7, pc}
    8cd4:	00008cd9 	.word	0x00008cd9

00008cd8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    8cd8:	b580      	push	{r7, lr}
    8cda:	b084      	sub	sp, #16
    8cdc:	af00      	add	r7, sp, #0
    8cde:	0002      	movs	r2, r0
    8ce0:	1dfb      	adds	r3, r7, #7
    8ce2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    8ce4:	1dfb      	adds	r3, r7, #7
    8ce6:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    8ce8:	4b28      	ldr	r3, [pc, #160]	; (8d8c <_tc_interrupt_handler+0xb4>)
    8cea:	0092      	lsls	r2, r2, #2
    8cec:	58d3      	ldr	r3, [r2, r3]
    8cee:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    8cf0:	68fb      	ldr	r3, [r7, #12]
    8cf2:	681b      	ldr	r3, [r3, #0]
    8cf4:	7a9b      	ldrb	r3, [r3, #10]
    8cf6:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    8cf8:	68fa      	ldr	r2, [r7, #12]
    8cfa:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    8cfc:	4013      	ands	r3, r2
    8cfe:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    8d00:	68fb      	ldr	r3, [r7, #12]
    8d02:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    8d04:	230b      	movs	r3, #11
    8d06:	18fb      	adds	r3, r7, r3
    8d08:	400a      	ands	r2, r1
    8d0a:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    8d0c:	230b      	movs	r3, #11
    8d0e:	18fb      	adds	r3, r7, r3
    8d10:	781b      	ldrb	r3, [r3, #0]
    8d12:	2201      	movs	r2, #1
    8d14:	4013      	ands	r3, r2
    8d16:	d008      	beq.n	8d2a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    8d18:	68fb      	ldr	r3, [r7, #12]
    8d1a:	689b      	ldr	r3, [r3, #8]
    8d1c:	68fa      	ldr	r2, [r7, #12]
    8d1e:	0010      	movs	r0, r2
    8d20:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    8d22:	68fb      	ldr	r3, [r7, #12]
    8d24:	681b      	ldr	r3, [r3, #0]
    8d26:	2201      	movs	r2, #1
    8d28:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    8d2a:	230b      	movs	r3, #11
    8d2c:	18fb      	adds	r3, r7, r3
    8d2e:	781b      	ldrb	r3, [r3, #0]
    8d30:	2202      	movs	r2, #2
    8d32:	4013      	ands	r3, r2
    8d34:	d008      	beq.n	8d48 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    8d36:	68fb      	ldr	r3, [r7, #12]
    8d38:	68db      	ldr	r3, [r3, #12]
    8d3a:	68fa      	ldr	r2, [r7, #12]
    8d3c:	0010      	movs	r0, r2
    8d3e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    8d40:	68fb      	ldr	r3, [r7, #12]
    8d42:	681b      	ldr	r3, [r3, #0]
    8d44:	2202      	movs	r2, #2
    8d46:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    8d48:	230b      	movs	r3, #11
    8d4a:	18fb      	adds	r3, r7, r3
    8d4c:	781b      	ldrb	r3, [r3, #0]
    8d4e:	2210      	movs	r2, #16
    8d50:	4013      	ands	r3, r2
    8d52:	d008      	beq.n	8d66 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    8d54:	68fb      	ldr	r3, [r7, #12]
    8d56:	691b      	ldr	r3, [r3, #16]
    8d58:	68fa      	ldr	r2, [r7, #12]
    8d5a:	0010      	movs	r0, r2
    8d5c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    8d5e:	68fb      	ldr	r3, [r7, #12]
    8d60:	681b      	ldr	r3, [r3, #0]
    8d62:	2210      	movs	r2, #16
    8d64:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    8d66:	230b      	movs	r3, #11
    8d68:	18fb      	adds	r3, r7, r3
    8d6a:	781b      	ldrb	r3, [r3, #0]
    8d6c:	2220      	movs	r2, #32
    8d6e:	4013      	ands	r3, r2
    8d70:	d008      	beq.n	8d84 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    8d72:	68fb      	ldr	r3, [r7, #12]
    8d74:	695b      	ldr	r3, [r3, #20]
    8d76:	68fa      	ldr	r2, [r7, #12]
    8d78:	0010      	movs	r0, r2
    8d7a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    8d7c:	68fb      	ldr	r3, [r7, #12]
    8d7e:	681b      	ldr	r3, [r3, #0]
    8d80:	2220      	movs	r2, #32
    8d82:	729a      	strb	r2, [r3, #10]
	}
}
    8d84:	46c0      	nop			; (mov r8, r8)
    8d86:	46bd      	mov	sp, r7
    8d88:	b004      	add	sp, #16
    8d8a:	bd80      	pop	{r7, pc}
    8d8c:	200013fc 	.word	0x200013fc

00008d90 <system_gclk_chan_get_config_defaults>:
{
    8d90:	b580      	push	{r7, lr}
    8d92:	b082      	sub	sp, #8
    8d94:	af00      	add	r7, sp, #0
    8d96:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8d98:	687b      	ldr	r3, [r7, #4]
    8d9a:	2200      	movs	r2, #0
    8d9c:	701a      	strb	r2, [r3, #0]
}
    8d9e:	46c0      	nop			; (mov r8, r8)
    8da0:	46bd      	mov	sp, r7
    8da2:	b002      	add	sp, #8
    8da4:	bd80      	pop	{r7, pc}
	...

00008da8 <system_apb_clock_set_mask>:
{
    8da8:	b580      	push	{r7, lr}
    8daa:	b082      	sub	sp, #8
    8dac:	af00      	add	r7, sp, #0
    8dae:	0002      	movs	r2, r0
    8db0:	6039      	str	r1, [r7, #0]
    8db2:	1dfb      	adds	r3, r7, #7
    8db4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8db6:	1dfb      	adds	r3, r7, #7
    8db8:	781b      	ldrb	r3, [r3, #0]
    8dba:	2b04      	cmp	r3, #4
    8dbc:	d827      	bhi.n	8e0e <system_apb_clock_set_mask+0x66>
    8dbe:	009a      	lsls	r2, r3, #2
    8dc0:	4b16      	ldr	r3, [pc, #88]	; (8e1c <system_apb_clock_set_mask+0x74>)
    8dc2:	18d3      	adds	r3, r2, r3
    8dc4:	681b      	ldr	r3, [r3, #0]
    8dc6:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    8dc8:	4b15      	ldr	r3, [pc, #84]	; (8e20 <system_apb_clock_set_mask+0x78>)
    8dca:	4a15      	ldr	r2, [pc, #84]	; (8e20 <system_apb_clock_set_mask+0x78>)
    8dcc:	6951      	ldr	r1, [r2, #20]
    8dce:	683a      	ldr	r2, [r7, #0]
    8dd0:	430a      	orrs	r2, r1
    8dd2:	615a      	str	r2, [r3, #20]
			break;
    8dd4:	e01d      	b.n	8e12 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    8dd6:	4b12      	ldr	r3, [pc, #72]	; (8e20 <system_apb_clock_set_mask+0x78>)
    8dd8:	4a11      	ldr	r2, [pc, #68]	; (8e20 <system_apb_clock_set_mask+0x78>)
    8dda:	6991      	ldr	r1, [r2, #24]
    8ddc:	683a      	ldr	r2, [r7, #0]
    8dde:	430a      	orrs	r2, r1
    8de0:	619a      	str	r2, [r3, #24]
			break;
    8de2:	e016      	b.n	8e12 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    8de4:	4b0e      	ldr	r3, [pc, #56]	; (8e20 <system_apb_clock_set_mask+0x78>)
    8de6:	4a0e      	ldr	r2, [pc, #56]	; (8e20 <system_apb_clock_set_mask+0x78>)
    8de8:	69d1      	ldr	r1, [r2, #28]
    8dea:	683a      	ldr	r2, [r7, #0]
    8dec:	430a      	orrs	r2, r1
    8dee:	61da      	str	r2, [r3, #28]
			break;
    8df0:	e00f      	b.n	8e12 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    8df2:	4b0b      	ldr	r3, [pc, #44]	; (8e20 <system_apb_clock_set_mask+0x78>)
    8df4:	4a0a      	ldr	r2, [pc, #40]	; (8e20 <system_apb_clock_set_mask+0x78>)
    8df6:	6a11      	ldr	r1, [r2, #32]
    8df8:	683a      	ldr	r2, [r7, #0]
    8dfa:	430a      	orrs	r2, r1
    8dfc:	621a      	str	r2, [r3, #32]
			break;
    8dfe:	e008      	b.n	8e12 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    8e00:	4b07      	ldr	r3, [pc, #28]	; (8e20 <system_apb_clock_set_mask+0x78>)
    8e02:	4a07      	ldr	r2, [pc, #28]	; (8e20 <system_apb_clock_set_mask+0x78>)
    8e04:	6a51      	ldr	r1, [r2, #36]	; 0x24
    8e06:	683a      	ldr	r2, [r7, #0]
    8e08:	430a      	orrs	r2, r1
    8e0a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    8e0c:	e001      	b.n	8e12 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    8e0e:	2317      	movs	r3, #23
    8e10:	e000      	b.n	8e14 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    8e12:	2300      	movs	r3, #0
}
    8e14:	0018      	movs	r0, r3
    8e16:	46bd      	mov	sp, r7
    8e18:	b002      	add	sp, #8
    8e1a:	bd80      	pop	{r7, pc}
    8e1c:	000280b0 	.word	0x000280b0
    8e20:	40000400 	.word	0x40000400

00008e24 <system_pinmux_get_config_defaults>:
{
    8e24:	b580      	push	{r7, lr}
    8e26:	b082      	sub	sp, #8
    8e28:	af00      	add	r7, sp, #0
    8e2a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	2280      	movs	r2, #128	; 0x80
    8e30:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8e32:	687b      	ldr	r3, [r7, #4]
    8e34:	2200      	movs	r2, #0
    8e36:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8e38:	687b      	ldr	r3, [r7, #4]
    8e3a:	2201      	movs	r2, #1
    8e3c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8e3e:	687b      	ldr	r3, [r7, #4]
    8e40:	2200      	movs	r2, #0
    8e42:	70da      	strb	r2, [r3, #3]
}
    8e44:	46c0      	nop			; (mov r8, r8)
    8e46:	46bd      	mov	sp, r7
    8e48:	b002      	add	sp, #8
    8e4a:	bd80      	pop	{r7, pc}

00008e4c <tc_is_syncing>:
{
    8e4c:	b580      	push	{r7, lr}
    8e4e:	b084      	sub	sp, #16
    8e50:	af00      	add	r7, sp, #0
    8e52:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8e54:	687b      	ldr	r3, [r7, #4]
    8e56:	681b      	ldr	r3, [r3, #0]
    8e58:	60fb      	str	r3, [r7, #12]
	return (tc_module->SYNCBUSY.reg);
    8e5a:	68fb      	ldr	r3, [r7, #12]
    8e5c:	691b      	ldr	r3, [r3, #16]
    8e5e:	1e5a      	subs	r2, r3, #1
    8e60:	4193      	sbcs	r3, r2
    8e62:	b2db      	uxtb	r3, r3
}
    8e64:	0018      	movs	r0, r3
    8e66:	46bd      	mov	sp, r7
    8e68:	b004      	add	sp, #16
    8e6a:	bd80      	pop	{r7, pc}

00008e6c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    8e6c:	b590      	push	{r4, r7, lr}
    8e6e:	b087      	sub	sp, #28
    8e70:	af00      	add	r7, sp, #0
    8e72:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8e74:	2308      	movs	r3, #8
    8e76:	18fb      	adds	r3, r7, r3
    8e78:	4a0d      	ldr	r2, [pc, #52]	; (8eb0 <_tc_get_inst_index+0x44>)
    8e7a:	ca13      	ldmia	r2!, {r0, r1, r4}
    8e7c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8e7e:	2300      	movs	r3, #0
    8e80:	617b      	str	r3, [r7, #20]
    8e82:	e00d      	b.n	8ea0 <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    8e84:	2308      	movs	r3, #8
    8e86:	18fb      	adds	r3, r7, r3
    8e88:	697a      	ldr	r2, [r7, #20]
    8e8a:	0092      	lsls	r2, r2, #2
    8e8c:	58d2      	ldr	r2, [r2, r3]
    8e8e:	687b      	ldr	r3, [r7, #4]
    8e90:	429a      	cmp	r2, r3
    8e92:	d102      	bne.n	8e9a <_tc_get_inst_index+0x2e>
			return i;
    8e94:	697b      	ldr	r3, [r7, #20]
    8e96:	b2db      	uxtb	r3, r3
    8e98:	e006      	b.n	8ea8 <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8e9a:	697b      	ldr	r3, [r7, #20]
    8e9c:	3301      	adds	r3, #1
    8e9e:	617b      	str	r3, [r7, #20]
    8ea0:	697b      	ldr	r3, [r7, #20]
    8ea2:	2b02      	cmp	r3, #2
    8ea4:	d9ee      	bls.n	8e84 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    8ea6:	2300      	movs	r3, #0
}
    8ea8:	0018      	movs	r0, r3
    8eaa:	46bd      	mov	sp, r7
    8eac:	b007      	add	sp, #28
    8eae:	bd90      	pop	{r4, r7, pc}
    8eb0:	000280c4 	.word	0x000280c4

00008eb4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    8eb4:	b590      	push	{r4, r7, lr}
    8eb6:	b091      	sub	sp, #68	; 0x44
    8eb8:	af00      	add	r7, sp, #0
    8eba:	60f8      	str	r0, [r7, #12]
    8ebc:	60b9      	str	r1, [r7, #8]
    8ebe:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint32_t ctrla_tmp = 0;
    8ec0:	2300      	movs	r3, #0
    8ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    8ec4:	233b      	movs	r3, #59	; 0x3b
    8ec6:	18fb      	adds	r3, r7, r3
    8ec8:	2200      	movs	r2, #0
    8eca:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    8ecc:	2337      	movs	r3, #55	; 0x37
    8ece:	18fc      	adds	r4, r7, r3
    8ed0:	68bb      	ldr	r3, [r7, #8]
    8ed2:	0018      	movs	r0, r3
    8ed4:	4bd4      	ldr	r3, [pc, #848]	; (9228 <tc_init+0x374>)
    8ed6:	4798      	blx	r3
    8ed8:	0003      	movs	r3, r0
    8eda:	7023      	strb	r3, [r4, #0]
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    8edc:	2334      	movs	r3, #52	; 0x34
    8ede:	18fb      	adds	r3, r7, r3
    8ee0:	4ad2      	ldr	r2, [pc, #840]	; (922c <tc_init+0x378>)
    8ee2:	8811      	ldrh	r1, [r2, #0]
    8ee4:	8019      	strh	r1, [r3, #0]
    8ee6:	7892      	ldrb	r2, [r2, #2]
    8ee8:	709a      	strb	r2, [r3, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    8eea:	231c      	movs	r3, #28
    8eec:	18fb      	adds	r3, r7, r3
    8eee:	4ad0      	ldr	r2, [pc, #832]	; (9230 <tc_init+0x37c>)
    8ef0:	ca13      	ldmia	r2!, {r0, r1, r4}
    8ef2:	c313      	stmia	r3!, {r0, r1, r4}
    8ef4:	ca13      	ldmia	r2!, {r0, r1, r4}
    8ef6:	c313      	stmia	r3!, {r0, r1, r4}
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    8ef8:	233a      	movs	r3, #58	; 0x3a
    8efa:	18fb      	adds	r3, r7, r3
    8efc:	2200      	movs	r2, #0
    8efe:	701a      	strb	r2, [r3, #0]
    8f00:	e00e      	b.n	8f20 <tc_init+0x6c>
		module_inst->callback[i]        = NULL;
    8f02:	233a      	movs	r3, #58	; 0x3a
    8f04:	18fb      	adds	r3, r7, r3
    8f06:	781a      	ldrb	r2, [r3, #0]
    8f08:	68fb      	ldr	r3, [r7, #12]
    8f0a:	3202      	adds	r2, #2
    8f0c:	0092      	lsls	r2, r2, #2
    8f0e:	2100      	movs	r1, #0
    8f10:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    8f12:	233a      	movs	r3, #58	; 0x3a
    8f14:	18fb      	adds	r3, r7, r3
    8f16:	781a      	ldrb	r2, [r3, #0]
    8f18:	233a      	movs	r3, #58	; 0x3a
    8f1a:	18fb      	adds	r3, r7, r3
    8f1c:	3201      	adds	r2, #1
    8f1e:	701a      	strb	r2, [r3, #0]
    8f20:	233a      	movs	r3, #58	; 0x3a
    8f22:	18fb      	adds	r3, r7, r3
    8f24:	781b      	ldrb	r3, [r3, #0]
    8f26:	2b03      	cmp	r3, #3
    8f28:	d9eb      	bls.n	8f02 <tc_init+0x4e>
	}
	module_inst->register_callback_mask     = 0x00;
    8f2a:	68fb      	ldr	r3, [r7, #12]
    8f2c:	2200      	movs	r2, #0
    8f2e:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    8f30:	68fb      	ldr	r3, [r7, #12]
    8f32:	2200      	movs	r2, #0
    8f34:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    8f36:	2337      	movs	r3, #55	; 0x37
    8f38:	18fb      	adds	r3, r7, r3
    8f3a:	781a      	ldrb	r2, [r3, #0]
    8f3c:	4bbd      	ldr	r3, [pc, #756]	; (9234 <tc_init+0x380>)
    8f3e:	0092      	lsls	r2, r2, #2
    8f40:	68f9      	ldr	r1, [r7, #12]
    8f42:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    8f44:	68fb      	ldr	r3, [r7, #12]
    8f46:	68ba      	ldr	r2, [r7, #8]
    8f48:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    8f4a:	687b      	ldr	r3, [r7, #4]
    8f4c:	2234      	movs	r2, #52	; 0x34
    8f4e:	5c9a      	ldrb	r2, [r3, r2]
    8f50:	68fb      	ldr	r3, [r7, #12]
    8f52:	769a      	strb	r2, [r3, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    8f54:	687b      	ldr	r3, [r7, #4]
    8f56:	78db      	ldrb	r3, [r3, #3]
    8f58:	2b08      	cmp	r3, #8
    8f5a:	d107      	bne.n	8f6c <tc_init+0xb8>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    8f5c:	2337      	movs	r3, #55	; 0x37
    8f5e:	18fb      	adds	r3, r7, r3
    8f60:	781b      	ldrb	r3, [r3, #0]
    8f62:	2201      	movs	r2, #1
    8f64:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    8f66:	d001      	beq.n	8f6c <tc_init+0xb8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8f68:	2317      	movs	r3, #23
    8f6a:	e1ec      	b.n	9346 <tc_init+0x492>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    8f6c:	687b      	ldr	r3, [r7, #4]
    8f6e:	78da      	ldrb	r2, [r3, #3]
    8f70:	68fb      	ldr	r3, [r7, #12]
    8f72:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    8f74:	68bb      	ldr	r3, [r7, #8]
    8f76:	681b      	ldr	r3, [r3, #0]
    8f78:	2201      	movs	r2, #1
    8f7a:	4013      	ands	r3, r2
    8f7c:	d001      	beq.n	8f82 <tc_init+0xce>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    8f7e:	2305      	movs	r3, #5
    8f80:	e1e1      	b.n	9346 <tc_init+0x492>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    8f82:	68bb      	ldr	r3, [r7, #8]
    8f84:	7adb      	ldrb	r3, [r3, #11]
    8f86:	b2db      	uxtb	r3, r3
    8f88:	001a      	movs	r2, r3
    8f8a:	2302      	movs	r3, #2
    8f8c:	4013      	ands	r3, r2
    8f8e:	d001      	beq.n	8f94 <tc_init+0xe0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    8f90:	231c      	movs	r3, #28
    8f92:	e1d8      	b.n	9346 <tc_init+0x492>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    8f94:	68bb      	ldr	r3, [r7, #8]
    8f96:	681b      	ldr	r3, [r3, #0]
    8f98:	2202      	movs	r2, #2
    8f9a:	4013      	ands	r3, r2
    8f9c:	d001      	beq.n	8fa2 <tc_init+0xee>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    8f9e:	231c      	movs	r3, #28
    8fa0:	e1d1      	b.n	9346 <tc_init+0x492>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    8fa2:	687b      	ldr	r3, [r7, #4]
    8fa4:	7c1b      	ldrb	r3, [r3, #16]
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	d017      	beq.n	8fda <tc_init+0x126>
		system_pinmux_get_config_defaults(&pin_config);
    8faa:	2318      	movs	r3, #24
    8fac:	18fb      	adds	r3, r7, r3
    8fae:	0018      	movs	r0, r3
    8fb0:	4ba1      	ldr	r3, [pc, #644]	; (9238 <tc_init+0x384>)
    8fb2:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	699b      	ldr	r3, [r3, #24]
    8fb8:	b2da      	uxtb	r2, r3
    8fba:	2318      	movs	r3, #24
    8fbc:	18fb      	adds	r3, r7, r3
    8fbe:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8fc0:	2318      	movs	r3, #24
    8fc2:	18fb      	adds	r3, r7, r3
    8fc4:	2201      	movs	r2, #1
    8fc6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    8fc8:	687b      	ldr	r3, [r7, #4]
    8fca:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    8fcc:	b2db      	uxtb	r3, r3
    8fce:	2218      	movs	r2, #24
    8fd0:	18ba      	adds	r2, r7, r2
    8fd2:	0011      	movs	r1, r2
    8fd4:	0018      	movs	r0, r3
    8fd6:	4b99      	ldr	r3, [pc, #612]	; (923c <tc_init+0x388>)
    8fd8:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    8fda:	687b      	ldr	r3, [r7, #4]
    8fdc:	7f1b      	ldrb	r3, [r3, #28]
    8fde:	2b00      	cmp	r3, #0
    8fe0:	d017      	beq.n	9012 <tc_init+0x15e>
		system_pinmux_get_config_defaults(&pin_config);
    8fe2:	2318      	movs	r3, #24
    8fe4:	18fb      	adds	r3, r7, r3
    8fe6:	0018      	movs	r0, r3
    8fe8:	4b93      	ldr	r3, [pc, #588]	; (9238 <tc_init+0x384>)
    8fea:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ff0:	b2da      	uxtb	r2, r3
    8ff2:	2318      	movs	r3, #24
    8ff4:	18fb      	adds	r3, r7, r3
    8ff6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8ff8:	2318      	movs	r3, #24
    8ffa:	18fb      	adds	r3, r7, r3
    8ffc:	2201      	movs	r2, #1
    8ffe:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    9000:	687b      	ldr	r3, [r7, #4]
    9002:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    9004:	b2db      	uxtb	r3, r3
    9006:	2218      	movs	r2, #24
    9008:	18ba      	adds	r2, r7, r2
    900a:	0011      	movs	r1, r2
    900c:	0018      	movs	r0, r3
    900e:	4b8b      	ldr	r3, [pc, #556]	; (923c <tc_init+0x388>)
    9010:	4798      	blx	r3
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    9012:	2337      	movs	r3, #55	; 0x37
    9014:	18fb      	adds	r3, r7, r3
    9016:	781b      	ldrb	r3, [r3, #0]
    9018:	005a      	lsls	r2, r3, #1
    901a:	231c      	movs	r3, #28
    901c:	18fb      	adds	r3, r7, r3
    901e:	0092      	lsls	r2, r2, #2
    9020:	58d3      	ldr	r3, [r2, r3]
    9022:	b2d8      	uxtb	r0, r3
			inst_mclk_apbmask[2*instance+1]);
    9024:	2337      	movs	r3, #55	; 0x37
    9026:	18fb      	adds	r3, r7, r3
    9028:	781b      	ldrb	r3, [r3, #0]
    902a:	005b      	lsls	r3, r3, #1
    902c:	1c5a      	adds	r2, r3, #1
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    902e:	231c      	movs	r3, #28
    9030:	18fb      	adds	r3, r7, r3
    9032:	0092      	lsls	r2, r2, #2
    9034:	58d3      	ldr	r3, [r2, r3]
    9036:	0019      	movs	r1, r3
    9038:	4b81      	ldr	r3, [pc, #516]	; (9240 <tc_init+0x38c>)
    903a:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    903c:	687b      	ldr	r3, [r7, #4]
    903e:	78db      	ldrb	r3, [r3, #3]
    9040:	2b08      	cmp	r3, #8
    9042:	d11c      	bne.n	907e <tc_init+0x1ca>
    9044:	2337      	movs	r3, #55	; 0x37
    9046:	18fb      	adds	r3, r7, r3
    9048:	781b      	ldrb	r3, [r3, #0]
    904a:	3301      	adds	r3, #1
    904c:	2b02      	cmp	r3, #2
    904e:	dc16      	bgt.n	907e <tc_init+0x1ca>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    9050:	2337      	movs	r3, #55	; 0x37
    9052:	18fb      	adds	r3, r7, r3
    9054:	781b      	ldrb	r3, [r3, #0]
    9056:	3301      	adds	r3, #1
    9058:	005a      	lsls	r2, r3, #1
    905a:	231c      	movs	r3, #28
    905c:	18fb      	adds	r3, r7, r3
    905e:	0092      	lsls	r2, r2, #2
    9060:	58d3      	ldr	r3, [r2, r3]
    9062:	b2d8      	uxtb	r0, r3
				inst_mclk_apbmask[(instance+1)*2+1]);
    9064:	2337      	movs	r3, #55	; 0x37
    9066:	18fb      	adds	r3, r7, r3
    9068:	781b      	ldrb	r3, [r3, #0]
    906a:	3301      	adds	r3, #1
    906c:	005b      	lsls	r3, r3, #1
    906e:	1c5a      	adds	r2, r3, #1
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    9070:	231c      	movs	r3, #28
    9072:	18fb      	adds	r3, r7, r3
    9074:	0092      	lsls	r2, r2, #2
    9076:	58d3      	ldr	r3, [r2, r3]
    9078:	0019      	movs	r1, r3
    907a:	4b71      	ldr	r3, [pc, #452]	; (9240 <tc_init+0x38c>)
    907c:	4798      	blx	r3
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    907e:	2314      	movs	r3, #20
    9080:	18fb      	adds	r3, r7, r3
    9082:	0018      	movs	r0, r3
    9084:	4b6f      	ldr	r3, [pc, #444]	; (9244 <tc_init+0x390>)
    9086:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    9088:	687b      	ldr	r3, [r7, #4]
    908a:	781a      	ldrb	r2, [r3, #0]
    908c:	2314      	movs	r3, #20
    908e:	18fb      	adds	r3, r7, r3
    9090:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    9092:	2337      	movs	r3, #55	; 0x37
    9094:	18fb      	adds	r3, r7, r3
    9096:	781b      	ldrb	r3, [r3, #0]
    9098:	2234      	movs	r2, #52	; 0x34
    909a:	18ba      	adds	r2, r7, r2
    909c:	5cd3      	ldrb	r3, [r2, r3]
    909e:	2214      	movs	r2, #20
    90a0:	18ba      	adds	r2, r7, r2
    90a2:	0011      	movs	r1, r2
    90a4:	0018      	movs	r0, r3
    90a6:	4b68      	ldr	r3, [pc, #416]	; (9248 <tc_init+0x394>)
    90a8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    90aa:	2337      	movs	r3, #55	; 0x37
    90ac:	18fb      	adds	r3, r7, r3
    90ae:	781b      	ldrb	r3, [r3, #0]
    90b0:	2234      	movs	r2, #52	; 0x34
    90b2:	18ba      	adds	r2, r7, r2
    90b4:	5cd3      	ldrb	r3, [r2, r3]
    90b6:	0018      	movs	r0, r3
    90b8:	4b64      	ldr	r3, [pc, #400]	; (924c <tc_init+0x398>)
    90ba:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    90bc:	687b      	ldr	r3, [r7, #4]
    90be:	78da      	ldrb	r2, [r3, #3]
			(uint32_t)config->reload_action |
    90c0:	687b      	ldr	r3, [r7, #4]
    90c2:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->counter_size |
    90c4:	4313      	orrs	r3, r2
    90c6:	b2db      	uxtb	r3, r3
    90c8:	001a      	movs	r2, r3
			(uint32_t)config->clock_prescaler;
    90ca:	687b      	ldr	r3, [r7, #4]
    90cc:	889b      	ldrh	r3, [r3, #4]
	ctrla_tmp =
    90ce:	4313      	orrs	r3, r2
    90d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    90d2:	2339      	movs	r3, #57	; 0x39
    90d4:	18fb      	adds	r3, r7, r3
    90d6:	2200      	movs	r2, #0
    90d8:	701a      	strb	r2, [r3, #0]
    90da:	e018      	b.n	910e <tc_init+0x25a>
		if (config->enable_capture_on_channel[i] == true) {
    90dc:	2339      	movs	r3, #57	; 0x39
    90de:	18fb      	adds	r3, r7, r3
    90e0:	781b      	ldrb	r3, [r3, #0]
    90e2:	687a      	ldr	r2, [r7, #4]
    90e4:	18d3      	adds	r3, r2, r3
    90e6:	7a5b      	ldrb	r3, [r3, #9]
    90e8:	2b00      	cmp	r3, #0
    90ea:	d009      	beq.n	9100 <tc_init+0x24c>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    90ec:	2339      	movs	r3, #57	; 0x39
    90ee:	18fb      	adds	r3, r7, r3
    90f0:	781b      	ldrb	r3, [r3, #0]
    90f2:	2280      	movs	r2, #128	; 0x80
    90f4:	0252      	lsls	r2, r2, #9
    90f6:	409a      	lsls	r2, r3
    90f8:	0013      	movs	r3, r2
    90fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    90fc:	4313      	orrs	r3, r2
    90fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    9100:	2339      	movs	r3, #57	; 0x39
    9102:	18fb      	adds	r3, r7, r3
    9104:	781a      	ldrb	r2, [r3, #0]
    9106:	2339      	movs	r3, #57	; 0x39
    9108:	18fb      	adds	r3, r7, r3
    910a:	3201      	adds	r2, #1
    910c:	701a      	strb	r2, [r3, #0]
    910e:	2339      	movs	r3, #57	; 0x39
    9110:	18fb      	adds	r3, r7, r3
    9112:	781b      	ldrb	r3, [r3, #0]
    9114:	2b01      	cmp	r3, #1
    9116:	d9e1      	bls.n	90dc <tc_init+0x228>
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    9118:	2338      	movs	r3, #56	; 0x38
    911a:	18fb      	adds	r3, r7, r3
    911c:	2200      	movs	r2, #0
    911e:	701a      	strb	r2, [r3, #0]
    9120:	e018      	b.n	9154 <tc_init+0x2a0>
		if (config->enable_capture_on_IO[i] == true) {
    9122:	2338      	movs	r3, #56	; 0x38
    9124:	18fb      	adds	r3, r7, r3
    9126:	781b      	ldrb	r3, [r3, #0]
    9128:	687a      	ldr	r2, [r7, #4]
    912a:	18d3      	adds	r3, r2, r3
    912c:	7adb      	ldrb	r3, [r3, #11]
    912e:	2b00      	cmp	r3, #0
    9130:	d009      	beq.n	9146 <tc_init+0x292>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    9132:	2338      	movs	r3, #56	; 0x38
    9134:	18fb      	adds	r3, r7, r3
    9136:	781b      	ldrb	r3, [r3, #0]
    9138:	2280      	movs	r2, #128	; 0x80
    913a:	0352      	lsls	r2, r2, #13
    913c:	409a      	lsls	r2, r3
    913e:	0013      	movs	r3, r2
    9140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9142:	4313      	orrs	r3, r2
    9144:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    9146:	2338      	movs	r3, #56	; 0x38
    9148:	18fb      	adds	r3, r7, r3
    914a:	781a      	ldrb	r2, [r3, #0]
    914c:	2338      	movs	r3, #56	; 0x38
    914e:	18fb      	adds	r3, r7, r3
    9150:	3201      	adds	r2, #1
    9152:	701a      	strb	r2, [r3, #0]
    9154:	2338      	movs	r3, #56	; 0x38
    9156:	18fb      	adds	r3, r7, r3
    9158:	781b      	ldrb	r3, [r3, #0]
    915a:	2b01      	cmp	r3, #1
    915c:	d9e1      	bls.n	9122 <tc_init+0x26e>
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    915e:	687b      	ldr	r3, [r7, #4]
    9160:	785b      	ldrb	r3, [r3, #1]
    9162:	019a      	lsls	r2, r3, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    9164:	687b      	ldr	r3, [r7, #4]
    9166:	789b      	ldrb	r3, [r3, #2]
    9168:	01db      	lsls	r3, r3, #7
    916a:	4313      	orrs	r3, r2
    916c:	001a      	movs	r2, r3
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    916e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9170:	4313      	orrs	r3, r2
    9172:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    9174:	46c0      	nop			; (mov r8, r8)
    9176:	68fb      	ldr	r3, [r7, #12]
    9178:	0018      	movs	r0, r3
    917a:	4b35      	ldr	r3, [pc, #212]	; (9250 <tc_init+0x39c>)
    917c:	4798      	blx	r3
    917e:	1e03      	subs	r3, r0, #0
    9180:	d1f9      	bne.n	9176 <tc_init+0x2c2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    9182:	68bb      	ldr	r3, [r7, #8]
    9184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9186:	601a      	str	r2, [r3, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    9188:	46c0      	nop			; (mov r8, r8)
    918a:	68fb      	ldr	r3, [r7, #12]
    918c:	0018      	movs	r0, r3
    918e:	4b30      	ldr	r3, [pc, #192]	; (9250 <tc_init+0x39c>)
    9190:	4798      	blx	r3
    9192:	1e03      	subs	r3, r0, #0
    9194:	d1f9      	bne.n	918a <tc_init+0x2d6>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    9196:	687b      	ldr	r3, [r7, #4]
    9198:	799a      	ldrb	r2, [r3, #6]
    919a:	68bb      	ldr	r3, [r7, #8]
    919c:	731a      	strb	r2, [r3, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    919e:	687b      	ldr	r3, [r7, #4]
    91a0:	7b5b      	ldrb	r3, [r3, #13]
    91a2:	2b00      	cmp	r3, #0
    91a4:	d003      	beq.n	91ae <tc_init+0x2fa>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    91a6:	233b      	movs	r3, #59	; 0x3b
    91a8:	18fb      	adds	r3, r7, r3
    91aa:	2204      	movs	r2, #4
    91ac:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    91ae:	687b      	ldr	r3, [r7, #4]
    91b0:	7b9b      	ldrb	r3, [r3, #14]
    91b2:	2b00      	cmp	r3, #0
    91b4:	d007      	beq.n	91c6 <tc_init+0x312>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    91b6:	233b      	movs	r3, #59	; 0x3b
    91b8:	18fb      	adds	r3, r7, r3
    91ba:	223b      	movs	r2, #59	; 0x3b
    91bc:	18ba      	adds	r2, r7, r2
    91be:	7812      	ldrb	r2, [r2, #0]
    91c0:	2101      	movs	r1, #1
    91c2:	430a      	orrs	r2, r1
    91c4:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    91c6:	46c0      	nop			; (mov r8, r8)
    91c8:	68fb      	ldr	r3, [r7, #12]
    91ca:	0018      	movs	r0, r3
    91cc:	4b20      	ldr	r3, [pc, #128]	; (9250 <tc_init+0x39c>)
    91ce:	4798      	blx	r3
    91d0:	1e03      	subs	r3, r0, #0
    91d2:	d1f9      	bne.n	91c8 <tc_init+0x314>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    91d4:	68bb      	ldr	r3, [r7, #8]
    91d6:	22ff      	movs	r2, #255	; 0xff
    91d8:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    91da:	233b      	movs	r3, #59	; 0x3b
    91dc:	18fb      	adds	r3, r7, r3
    91de:	781b      	ldrb	r3, [r3, #0]
    91e0:	2b00      	cmp	r3, #0
    91e2:	d00b      	beq.n	91fc <tc_init+0x348>
		while (tc_is_syncing(module_inst)) {
    91e4:	46c0      	nop			; (mov r8, r8)
    91e6:	68fb      	ldr	r3, [r7, #12]
    91e8:	0018      	movs	r0, r3
    91ea:	4b19      	ldr	r3, [pc, #100]	; (9250 <tc_init+0x39c>)
    91ec:	4798      	blx	r3
    91ee:	1e03      	subs	r3, r0, #0
    91f0:	d1f9      	bne.n	91e6 <tc_init+0x332>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    91f2:	68bb      	ldr	r3, [r7, #8]
    91f4:	223b      	movs	r2, #59	; 0x3b
    91f6:	18ba      	adds	r2, r7, r2
    91f8:	7812      	ldrb	r2, [r2, #0]
    91fa:	715a      	strb	r2, [r3, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    91fc:	687b      	ldr	r3, [r7, #4]
    91fe:	7a1a      	ldrb	r2, [r3, #8]
    9200:	68bb      	ldr	r3, [r7, #8]
    9202:	735a      	strb	r2, [r3, #13]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    9204:	46c0      	nop			; (mov r8, r8)
    9206:	68fb      	ldr	r3, [r7, #12]
    9208:	0018      	movs	r0, r3
    920a:	4b11      	ldr	r3, [pc, #68]	; (9250 <tc_init+0x39c>)
    920c:	4798      	blx	r3
    920e:	1e03      	subs	r3, r0, #0
    9210:	d1f9      	bne.n	9206 <tc_init+0x352>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    9212:	68fb      	ldr	r3, [r7, #12]
    9214:	791b      	ldrb	r3, [r3, #4]
    9216:	2b04      	cmp	r3, #4
    9218:	d01c      	beq.n	9254 <tc_init+0x3a0>
    921a:	2b08      	cmp	r3, #8
    921c:	d100      	bne.n	9220 <tc_init+0x36c>
    921e:	e06e      	b.n	92fe <tc_init+0x44a>
    9220:	2b00      	cmp	r3, #0
    9222:	d049      	beq.n	92b8 <tc_init+0x404>
    9224:	e08e      	b.n	9344 <tc_init+0x490>
    9226:	46c0      	nop			; (mov r8, r8)
    9228:	00008e6d 	.word	0x00008e6d
    922c:	000280d0 	.word	0x000280d0
    9230:	000280d4 	.word	0x000280d4
    9234:	200013fc 	.word	0x200013fc
    9238:	00008e25 	.word	0x00008e25
    923c:	00018ea5 	.word	0x00018ea5
    9240:	00008da9 	.word	0x00008da9
    9244:	00008d91 	.word	0x00008d91
    9248:	00018bf1 	.word	0x00018bf1
    924c:	00018c31 	.word	0x00018c31
    9250:	00008e4d 	.word	0x00008e4d
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    9254:	46c0      	nop			; (mov r8, r8)
    9256:	68fb      	ldr	r3, [r7, #12]
    9258:	0018      	movs	r0, r3
    925a:	4b3d      	ldr	r3, [pc, #244]	; (9350 <tc_init+0x49c>)
    925c:	4798      	blx	r3
    925e:	1e03      	subs	r3, r0, #0
    9260:	d1f9      	bne.n	9256 <tc_init+0x3a2>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	2228      	movs	r2, #40	; 0x28
    9266:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    9268:	68bb      	ldr	r3, [r7, #8]
    926a:	751a      	strb	r2, [r3, #20]


			while (tc_is_syncing(module_inst)) {
    926c:	46c0      	nop			; (mov r8, r8)
    926e:	68fb      	ldr	r3, [r7, #12]
    9270:	0018      	movs	r0, r3
    9272:	4b37      	ldr	r3, [pc, #220]	; (9350 <tc_init+0x49c>)
    9274:	4798      	blx	r3
    9276:	1e03      	subs	r3, r0, #0
    9278:	d1f9      	bne.n	926e <tc_init+0x3ba>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    927a:	687b      	ldr	r3, [r7, #4]
    927c:	2229      	movs	r2, #41	; 0x29
    927e:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    9280:	68bb      	ldr	r3, [r7, #8]
    9282:	76da      	strb	r2, [r3, #27]

			while (tc_is_syncing(module_inst)) {
    9284:	46c0      	nop			; (mov r8, r8)
    9286:	68fb      	ldr	r3, [r7, #12]
    9288:	0018      	movs	r0, r3
    928a:	4b31      	ldr	r3, [pc, #196]	; (9350 <tc_init+0x49c>)
    928c:	4798      	blx	r3
    928e:	1e03      	subs	r3, r0, #0
    9290:	d1f9      	bne.n	9286 <tc_init+0x3d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    9292:	687b      	ldr	r3, [r7, #4]
    9294:	222a      	movs	r2, #42	; 0x2a
    9296:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    9298:	68bb      	ldr	r3, [r7, #8]
    929a:	771a      	strb	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    929c:	46c0      	nop			; (mov r8, r8)
    929e:	68fb      	ldr	r3, [r7, #12]
    92a0:	0018      	movs	r0, r3
    92a2:	4b2b      	ldr	r3, [pc, #172]	; (9350 <tc_init+0x49c>)
    92a4:	4798      	blx	r3
    92a6:	1e03      	subs	r3, r0, #0
    92a8:	d1f9      	bne.n	929e <tc_init+0x3ea>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    92aa:	687b      	ldr	r3, [r7, #4]
    92ac:	222b      	movs	r2, #43	; 0x2b
    92ae:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    92b0:	68bb      	ldr	r3, [r7, #8]
    92b2:	775a      	strb	r2, [r3, #29]

			return STATUS_OK;
    92b4:	2300      	movs	r3, #0
    92b6:	e046      	b.n	9346 <tc_init+0x492>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    92b8:	46c0      	nop			; (mov r8, r8)
    92ba:	68fb      	ldr	r3, [r7, #12]
    92bc:	0018      	movs	r0, r3
    92be:	4b24      	ldr	r3, [pc, #144]	; (9350 <tc_init+0x49c>)
    92c0:	4798      	blx	r3
    92c2:	1e03      	subs	r3, r0, #0
    92c4:	d1f9      	bne.n	92ba <tc_init+0x406>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    92c6:	687b      	ldr	r3, [r7, #4]
    92c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    92ca:	68bb      	ldr	r3, [r7, #8]
    92cc:	829a      	strh	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    92ce:	46c0      	nop			; (mov r8, r8)
    92d0:	68fb      	ldr	r3, [r7, #12]
    92d2:	0018      	movs	r0, r3
    92d4:	4b1e      	ldr	r3, [pc, #120]	; (9350 <tc_init+0x49c>)
    92d6:	4798      	blx	r3
    92d8:	1e03      	subs	r3, r0, #0
    92da:	d1f9      	bne.n	92d0 <tc_init+0x41c>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    92e0:	68bb      	ldr	r3, [r7, #8]
    92e2:	839a      	strh	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    92e4:	46c0      	nop			; (mov r8, r8)
    92e6:	68fb      	ldr	r3, [r7, #12]
    92e8:	0018      	movs	r0, r3
    92ea:	4b19      	ldr	r3, [pc, #100]	; (9350 <tc_init+0x49c>)
    92ec:	4798      	blx	r3
    92ee:	1e03      	subs	r3, r0, #0
    92f0:	d1f9      	bne.n	92e6 <tc_init+0x432>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    92f2:	687b      	ldr	r3, [r7, #4]
    92f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    92f6:	68bb      	ldr	r3, [r7, #8]
    92f8:	83da      	strh	r2, [r3, #30]

			return STATUS_OK;
    92fa:	2300      	movs	r3, #0
    92fc:	e023      	b.n	9346 <tc_init+0x492>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    92fe:	46c0      	nop			; (mov r8, r8)
    9300:	68fb      	ldr	r3, [r7, #12]
    9302:	0018      	movs	r0, r3
    9304:	4b12      	ldr	r3, [pc, #72]	; (9350 <tc_init+0x49c>)
    9306:	4798      	blx	r3
    9308:	1e03      	subs	r3, r0, #0
    930a:	d1f9      	bne.n	9300 <tc_init+0x44c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    930c:	687b      	ldr	r3, [r7, #4]
    930e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9310:	68bb      	ldr	r3, [r7, #8]
    9312:	615a      	str	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    9314:	46c0      	nop			; (mov r8, r8)
    9316:	68fb      	ldr	r3, [r7, #12]
    9318:	0018      	movs	r0, r3
    931a:	4b0d      	ldr	r3, [pc, #52]	; (9350 <tc_init+0x49c>)
    931c:	4798      	blx	r3
    931e:	1e03      	subs	r3, r0, #0
    9320:	d1f9      	bne.n	9316 <tc_init+0x462>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    9322:	687b      	ldr	r3, [r7, #4]
    9324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    9326:	68bb      	ldr	r3, [r7, #8]
    9328:	61da      	str	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    932a:	46c0      	nop			; (mov r8, r8)
    932c:	68fb      	ldr	r3, [r7, #12]
    932e:	0018      	movs	r0, r3
    9330:	4b07      	ldr	r3, [pc, #28]	; (9350 <tc_init+0x49c>)
    9332:	4798      	blx	r3
    9334:	1e03      	subs	r3, r0, #0
    9336:	d1f9      	bne.n	932c <tc_init+0x478>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    9338:	687b      	ldr	r3, [r7, #4]
    933a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    933c:	68bb      	ldr	r3, [r7, #8]
    933e:	621a      	str	r2, [r3, #32]

			return STATUS_OK;
    9340:	2300      	movs	r3, #0
    9342:	e000      	b.n	9346 <tc_init+0x492>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    9344:	2317      	movs	r3, #23
}
    9346:	0018      	movs	r0, r3
    9348:	46bd      	mov	sp, r7
    934a:	b011      	add	sp, #68	; 0x44
    934c:	bd90      	pop	{r4, r7, pc}
    934e:	46c0      	nop			; (mov r8, r8)
    9350:	00008e4d 	.word	0x00008e4d

00009354 <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
    9354:	b580      	push	{r7, lr}
    9356:	b084      	sub	sp, #16
    9358:	af00      	add	r7, sp, #0
    935a:	6078      	str	r0, [r7, #4]
    935c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    935e:	687b      	ldr	r3, [r7, #4]
    9360:	681b      	ldr	r3, [r3, #0]
    9362:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    9364:	46c0      	nop			; (mov r8, r8)
    9366:	687b      	ldr	r3, [r7, #4]
    9368:	0018      	movs	r0, r3
    936a:	4b11      	ldr	r3, [pc, #68]	; (93b0 <tc_set_count_value+0x5c>)
    936c:	4798      	blx	r3
    936e:	1e03      	subs	r3, r0, #0
    9370:	d1f9      	bne.n	9366 <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    9372:	687b      	ldr	r3, [r7, #4]
    9374:	791b      	ldrb	r3, [r3, #4]
    9376:	2b04      	cmp	r3, #4
    9378:	d004      	beq.n	9384 <tc_set_count_value+0x30>
    937a:	2b08      	cmp	r3, #8
    937c:	d00e      	beq.n	939c <tc_set_count_value+0x48>
    937e:	2b00      	cmp	r3, #0
    9380:	d006      	beq.n	9390 <tc_set_count_value+0x3c>
    9382:	e010      	b.n	93a6 <tc_set_count_value+0x52>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    9384:	683b      	ldr	r3, [r7, #0]
    9386:	b2da      	uxtb	r2, r3
    9388:	68fb      	ldr	r3, [r7, #12]
    938a:	751a      	strb	r2, [r3, #20]
			return STATUS_OK;
    938c:	2300      	movs	r3, #0
    938e:	e00b      	b.n	93a8 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    9390:	683b      	ldr	r3, [r7, #0]
    9392:	b29a      	uxth	r2, r3
    9394:	68fb      	ldr	r3, [r7, #12]
    9396:	829a      	strh	r2, [r3, #20]
			return STATUS_OK;
    9398:	2300      	movs	r3, #0
    939a:	e005      	b.n	93a8 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    939c:	68fb      	ldr	r3, [r7, #12]
    939e:	683a      	ldr	r2, [r7, #0]
    93a0:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    93a2:	2300      	movs	r3, #0
    93a4:	e000      	b.n	93a8 <tc_set_count_value+0x54>

		default:
			return STATUS_ERR_INVALID_ARG;
    93a6:	2317      	movs	r3, #23
	}
}
    93a8:	0018      	movs	r0, r3
    93aa:	46bd      	mov	sp, r7
    93ac:	b004      	add	sp, #16
    93ae:	bd80      	pop	{r7, pc}
    93b0:	00008e4d 	.word	0x00008e4d

000093b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    93b4:	b580      	push	{r7, lr}
    93b6:	b082      	sub	sp, #8
    93b8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    93ba:	4b19      	ldr	r3, [pc, #100]	; (9420 <Reset_Handler+0x6c>)
    93bc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    93be:	4b19      	ldr	r3, [pc, #100]	; (9424 <Reset_Handler+0x70>)
    93c0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    93c2:	687a      	ldr	r2, [r7, #4]
    93c4:	683b      	ldr	r3, [r7, #0]
    93c6:	429a      	cmp	r2, r3
    93c8:	d00c      	beq.n	93e4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    93ca:	e007      	b.n	93dc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    93cc:	683b      	ldr	r3, [r7, #0]
    93ce:	1d1a      	adds	r2, r3, #4
    93d0:	603a      	str	r2, [r7, #0]
    93d2:	687a      	ldr	r2, [r7, #4]
    93d4:	1d11      	adds	r1, r2, #4
    93d6:	6079      	str	r1, [r7, #4]
    93d8:	6812      	ldr	r2, [r2, #0]
    93da:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    93dc:	683a      	ldr	r2, [r7, #0]
    93de:	4b12      	ldr	r3, [pc, #72]	; (9428 <Reset_Handler+0x74>)
    93e0:	429a      	cmp	r2, r3
    93e2:	d3f3      	bcc.n	93cc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    93e4:	4b11      	ldr	r3, [pc, #68]	; (942c <Reset_Handler+0x78>)
    93e6:	603b      	str	r3, [r7, #0]
    93e8:	e004      	b.n	93f4 <Reset_Handler+0x40>
                *pDest++ = 0;
    93ea:	683b      	ldr	r3, [r7, #0]
    93ec:	1d1a      	adds	r2, r3, #4
    93ee:	603a      	str	r2, [r7, #0]
    93f0:	2200      	movs	r2, #0
    93f2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    93f4:	683a      	ldr	r2, [r7, #0]
    93f6:	4b0e      	ldr	r3, [pc, #56]	; (9430 <Reset_Handler+0x7c>)
    93f8:	429a      	cmp	r2, r3
    93fa:	d3f6      	bcc.n	93ea <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    93fc:	4b0d      	ldr	r3, [pc, #52]	; (9434 <Reset_Handler+0x80>)
    93fe:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9400:	4b0d      	ldr	r3, [pc, #52]	; (9438 <Reset_Handler+0x84>)
    9402:	687a      	ldr	r2, [r7, #4]
    9404:	21ff      	movs	r1, #255	; 0xff
    9406:	438a      	bics	r2, r1
    9408:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    940a:	4a0c      	ldr	r2, [pc, #48]	; (943c <Reset_Handler+0x88>)
    940c:	6853      	ldr	r3, [r2, #4]
    940e:	2180      	movs	r1, #128	; 0x80
    9410:	430b      	orrs	r3, r1
    9412:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    9414:	4b0a      	ldr	r3, [pc, #40]	; (9440 <Reset_Handler+0x8c>)
    9416:	4798      	blx	r3

        /* Branch to main function */
        main();
    9418:	4b0a      	ldr	r3, [pc, #40]	; (9444 <Reset_Handler+0x90>)
    941a:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    941c:	e7fe      	b.n	941c <Reset_Handler+0x68>
    941e:	46c0      	nop			; (mov r8, r8)
    9420:	0002a09c 	.word	0x0002a09c
    9424:	20000000 	.word	0x20000000
    9428:	20000c50 	.word	0x20000c50
    942c:	20000c50 	.word	0x20000c50
    9430:	20005384 	.word	0x20005384
    9434:	00000000 	.word	0x00000000
    9438:	e000ed00 	.word	0xe000ed00
    943c:	41004000 	.word	0x41004000
    9440:	00023bd1 	.word	0x00023bd1
    9444:	000196bd 	.word	0x000196bd

00009448 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    9448:	b580      	push	{r7, lr}
    944a:	af00      	add	r7, sp, #0
        while (1) {
    944c:	e7fe      	b.n	944c <Dummy_Handler+0x4>
	...

00009450 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    9450:	b580      	push	{r7, lr}
    9452:	b084      	sub	sp, #16
    9454:	af00      	add	r7, sp, #0
    9456:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    9458:	4b0a      	ldr	r3, [pc, #40]	; (9484 <_sbrk+0x34>)
    945a:	681b      	ldr	r3, [r3, #0]
    945c:	2b00      	cmp	r3, #0
    945e:	d102      	bne.n	9466 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    9460:	4b08      	ldr	r3, [pc, #32]	; (9484 <_sbrk+0x34>)
    9462:	4a09      	ldr	r2, [pc, #36]	; (9488 <_sbrk+0x38>)
    9464:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    9466:	4b07      	ldr	r3, [pc, #28]	; (9484 <_sbrk+0x34>)
    9468:	681b      	ldr	r3, [r3, #0]
    946a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    946c:	4b05      	ldr	r3, [pc, #20]	; (9484 <_sbrk+0x34>)
    946e:	681a      	ldr	r2, [r3, #0]
    9470:	687b      	ldr	r3, [r7, #4]
    9472:	18d2      	adds	r2, r2, r3
    9474:	4b03      	ldr	r3, [pc, #12]	; (9484 <_sbrk+0x34>)
    9476:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    9478:	68fb      	ldr	r3, [r7, #12]
}
    947a:	0018      	movs	r0, r3
    947c:	46bd      	mov	sp, r7
    947e:	b004      	add	sp, #16
    9480:	bd80      	pop	{r7, pc}
    9482:	46c0      	nop			; (mov r8, r8)
    9484:	20000d40 	.word	0x20000d40
    9488:	20007388 	.word	0x20007388

0000948c <cal_loop_test>:
extern FRESULT SD_status;
extern FIL file_cal_report, file_cal_raw;

extern struct OPTIONS options;

void cal_loop_test(struct MEASUREMENT *meas_inst){
    948c:	b5f0      	push	{r4, r5, r6, r7, lr}
    948e:	b08d      	sub	sp, #52	; 0x34
    9490:	af00      	add	r7, sp, #0
    9492:	60f8      	str	r0, [r7, #12]
	float dN1, dE1, dD1;
	float delta_horizontal;
	
	
	// increment distance and point counter
	n_points = n_points+1;
    9494:	4bd7      	ldr	r3, [pc, #860]	; (97f4 <cal_loop_test+0x368>)
    9496:	681b      	ldr	r3, [r3, #0]
    9498:	1c5a      	adds	r2, r3, #1
    949a:	4bd6      	ldr	r3, [pc, #856]	; (97f4 <cal_loop_test+0x368>)
    949c:	601a      	str	r2, [r3, #0]
	loop_distance = loop_distance + meas_inst->distance;
    949e:	68fb      	ldr	r3, [r7, #12]
    94a0:	69da      	ldr	r2, [r3, #28]
    94a2:	4bd5      	ldr	r3, [pc, #852]	; (97f8 <cal_loop_test+0x36c>)
    94a4:	6819      	ldr	r1, [r3, #0]
    94a6:	4bd5      	ldr	r3, [pc, #852]	; (97fc <cal_loop_test+0x370>)
    94a8:	1c10      	adds	r0, r2, #0
    94aa:	4798      	blx	r3
    94ac:	1c03      	adds	r3, r0, #0
    94ae:	1c1a      	adds	r2, r3, #0
    94b0:	4bd1      	ldr	r3, [pc, #836]	; (97f8 <cal_loop_test+0x36c>)
    94b2:	601a      	str	r2, [r3, #0]
	// find current position
	N1 = loop_horizontal*cos(deg2rad*loop_azimuth);
    94b4:	4bd2      	ldr	r3, [pc, #840]	; (9800 <cal_loop_test+0x374>)
    94b6:	681a      	ldr	r2, [r3, #0]
    94b8:	4bd2      	ldr	r3, [pc, #840]	; (9804 <cal_loop_test+0x378>)
    94ba:	1c10      	adds	r0, r2, #0
    94bc:	4798      	blx	r3
    94be:	0005      	movs	r5, r0
    94c0:	000e      	movs	r6, r1
    94c2:	4bd1      	ldr	r3, [pc, #836]	; (9808 <cal_loop_test+0x37c>)
    94c4:	681a      	ldr	r2, [r3, #0]
    94c6:	4bd1      	ldr	r3, [pc, #836]	; (980c <cal_loop_test+0x380>)
    94c8:	6819      	ldr	r1, [r3, #0]
    94ca:	4bd1      	ldr	r3, [pc, #836]	; (9810 <cal_loop_test+0x384>)
    94cc:	1c10      	adds	r0, r2, #0
    94ce:	4798      	blx	r3
    94d0:	1c03      	adds	r3, r0, #0
    94d2:	1c1a      	adds	r2, r3, #0
    94d4:	4bcb      	ldr	r3, [pc, #812]	; (9804 <cal_loop_test+0x378>)
    94d6:	1c10      	adds	r0, r2, #0
    94d8:	4798      	blx	r3
    94da:	0003      	movs	r3, r0
    94dc:	000c      	movs	r4, r1
    94de:	0018      	movs	r0, r3
    94e0:	0021      	movs	r1, r4
    94e2:	4bcc      	ldr	r3, [pc, #816]	; (9814 <cal_loop_test+0x388>)
    94e4:	4798      	blx	r3
    94e6:	0002      	movs	r2, r0
    94e8:	000b      	movs	r3, r1
    94ea:	4ccb      	ldr	r4, [pc, #812]	; (9818 <cal_loop_test+0x38c>)
    94ec:	0028      	movs	r0, r5
    94ee:	0031      	movs	r1, r6
    94f0:	47a0      	blx	r4
    94f2:	0003      	movs	r3, r0
    94f4:	000c      	movs	r4, r1
    94f6:	0019      	movs	r1, r3
    94f8:	0022      	movs	r2, r4
    94fa:	4bc8      	ldr	r3, [pc, #800]	; (981c <cal_loop_test+0x390>)
    94fc:	0008      	movs	r0, r1
    94fe:	0011      	movs	r1, r2
    9500:	4798      	blx	r3
    9502:	1c03      	adds	r3, r0, #0
    9504:	62fb      	str	r3, [r7, #44]	; 0x2c
	E1 = loop_horizontal*sin(deg2rad*loop_azimuth);
    9506:	4bbe      	ldr	r3, [pc, #760]	; (9800 <cal_loop_test+0x374>)
    9508:	681a      	ldr	r2, [r3, #0]
    950a:	4bbe      	ldr	r3, [pc, #760]	; (9804 <cal_loop_test+0x378>)
    950c:	1c10      	adds	r0, r2, #0
    950e:	4798      	blx	r3
    9510:	0005      	movs	r5, r0
    9512:	000e      	movs	r6, r1
    9514:	4bbc      	ldr	r3, [pc, #752]	; (9808 <cal_loop_test+0x37c>)
    9516:	681a      	ldr	r2, [r3, #0]
    9518:	4bbc      	ldr	r3, [pc, #752]	; (980c <cal_loop_test+0x380>)
    951a:	6819      	ldr	r1, [r3, #0]
    951c:	4bbc      	ldr	r3, [pc, #752]	; (9810 <cal_loop_test+0x384>)
    951e:	1c10      	adds	r0, r2, #0
    9520:	4798      	blx	r3
    9522:	1c03      	adds	r3, r0, #0
    9524:	1c1a      	adds	r2, r3, #0
    9526:	4bb7      	ldr	r3, [pc, #732]	; (9804 <cal_loop_test+0x378>)
    9528:	1c10      	adds	r0, r2, #0
    952a:	4798      	blx	r3
    952c:	0003      	movs	r3, r0
    952e:	000c      	movs	r4, r1
    9530:	0018      	movs	r0, r3
    9532:	0021      	movs	r1, r4
    9534:	4bba      	ldr	r3, [pc, #744]	; (9820 <cal_loop_test+0x394>)
    9536:	4798      	blx	r3
    9538:	0002      	movs	r2, r0
    953a:	000b      	movs	r3, r1
    953c:	4cb6      	ldr	r4, [pc, #728]	; (9818 <cal_loop_test+0x38c>)
    953e:	0028      	movs	r0, r5
    9540:	0031      	movs	r1, r6
    9542:	47a0      	blx	r4
    9544:	0003      	movs	r3, r0
    9546:	000c      	movs	r4, r1
    9548:	0019      	movs	r1, r3
    954a:	0022      	movs	r2, r4
    954c:	4bb3      	ldr	r3, [pc, #716]	; (981c <cal_loop_test+0x390>)
    954e:	0008      	movs	r0, r1
    9550:	0011      	movs	r1, r2
    9552:	4798      	blx	r3
    9554:	1c03      	adds	r3, r0, #0
    9556:	62bb      	str	r3, [r7, #40]	; 0x28
	D1 = loop_vertical;
    9558:	4bb2      	ldr	r3, [pc, #712]	; (9824 <cal_loop_test+0x398>)
    955a:	681b      	ldr	r3, [r3, #0]
    955c:	627b      	str	r3, [r7, #36]	; 0x24
	// find difference in position
	delta_horizontal = meas_inst->distance*cos(deg2rad*meas_inst->inclination);
    955e:	68fb      	ldr	r3, [r7, #12]
    9560:	69da      	ldr	r2, [r3, #28]
    9562:	4ba8      	ldr	r3, [pc, #672]	; (9804 <cal_loop_test+0x378>)
    9564:	1c10      	adds	r0, r2, #0
    9566:	4798      	blx	r3
    9568:	0005      	movs	r5, r0
    956a:	000e      	movs	r6, r1
    956c:	68fb      	ldr	r3, [r7, #12]
    956e:	691a      	ldr	r2, [r3, #16]
    9570:	4ba5      	ldr	r3, [pc, #660]	; (9808 <cal_loop_test+0x37c>)
    9572:	6819      	ldr	r1, [r3, #0]
    9574:	4ba6      	ldr	r3, [pc, #664]	; (9810 <cal_loop_test+0x384>)
    9576:	1c10      	adds	r0, r2, #0
    9578:	4798      	blx	r3
    957a:	1c03      	adds	r3, r0, #0
    957c:	1c1a      	adds	r2, r3, #0
    957e:	4ba1      	ldr	r3, [pc, #644]	; (9804 <cal_loop_test+0x378>)
    9580:	1c10      	adds	r0, r2, #0
    9582:	4798      	blx	r3
    9584:	0003      	movs	r3, r0
    9586:	000c      	movs	r4, r1
    9588:	0018      	movs	r0, r3
    958a:	0021      	movs	r1, r4
    958c:	4ba1      	ldr	r3, [pc, #644]	; (9814 <cal_loop_test+0x388>)
    958e:	4798      	blx	r3
    9590:	0002      	movs	r2, r0
    9592:	000b      	movs	r3, r1
    9594:	4ca0      	ldr	r4, [pc, #640]	; (9818 <cal_loop_test+0x38c>)
    9596:	0028      	movs	r0, r5
    9598:	0031      	movs	r1, r6
    959a:	47a0      	blx	r4
    959c:	0003      	movs	r3, r0
    959e:	000c      	movs	r4, r1
    95a0:	0019      	movs	r1, r3
    95a2:	0022      	movs	r2, r4
    95a4:	4b9d      	ldr	r3, [pc, #628]	; (981c <cal_loop_test+0x390>)
    95a6:	0008      	movs	r0, r1
    95a8:	0011      	movs	r1, r2
    95aa:	4798      	blx	r3
    95ac:	1c03      	adds	r3, r0, #0
    95ae:	623b      	str	r3, [r7, #32]
	dN1 = delta_horizontal*cos(deg2rad*meas_inst->azimuth);
    95b0:	4b94      	ldr	r3, [pc, #592]	; (9804 <cal_loop_test+0x378>)
    95b2:	6a38      	ldr	r0, [r7, #32]
    95b4:	4798      	blx	r3
    95b6:	0005      	movs	r5, r0
    95b8:	000e      	movs	r6, r1
    95ba:	68fb      	ldr	r3, [r7, #12]
    95bc:	68da      	ldr	r2, [r3, #12]
    95be:	4b92      	ldr	r3, [pc, #584]	; (9808 <cal_loop_test+0x37c>)
    95c0:	6819      	ldr	r1, [r3, #0]
    95c2:	4b93      	ldr	r3, [pc, #588]	; (9810 <cal_loop_test+0x384>)
    95c4:	1c10      	adds	r0, r2, #0
    95c6:	4798      	blx	r3
    95c8:	1c03      	adds	r3, r0, #0
    95ca:	1c1a      	adds	r2, r3, #0
    95cc:	4b8d      	ldr	r3, [pc, #564]	; (9804 <cal_loop_test+0x378>)
    95ce:	1c10      	adds	r0, r2, #0
    95d0:	4798      	blx	r3
    95d2:	0003      	movs	r3, r0
    95d4:	000c      	movs	r4, r1
    95d6:	0018      	movs	r0, r3
    95d8:	0021      	movs	r1, r4
    95da:	4b8e      	ldr	r3, [pc, #568]	; (9814 <cal_loop_test+0x388>)
    95dc:	4798      	blx	r3
    95de:	0002      	movs	r2, r0
    95e0:	000b      	movs	r3, r1
    95e2:	4c8d      	ldr	r4, [pc, #564]	; (9818 <cal_loop_test+0x38c>)
    95e4:	0028      	movs	r0, r5
    95e6:	0031      	movs	r1, r6
    95e8:	47a0      	blx	r4
    95ea:	0003      	movs	r3, r0
    95ec:	000c      	movs	r4, r1
    95ee:	0019      	movs	r1, r3
    95f0:	0022      	movs	r2, r4
    95f2:	4b8a      	ldr	r3, [pc, #552]	; (981c <cal_loop_test+0x390>)
    95f4:	0008      	movs	r0, r1
    95f6:	0011      	movs	r1, r2
    95f8:	4798      	blx	r3
    95fa:	1c03      	adds	r3, r0, #0
    95fc:	61fb      	str	r3, [r7, #28]
	dE1 = delta_horizontal*sin(deg2rad*meas_inst->azimuth);
    95fe:	4b81      	ldr	r3, [pc, #516]	; (9804 <cal_loop_test+0x378>)
    9600:	6a38      	ldr	r0, [r7, #32]
    9602:	4798      	blx	r3
    9604:	0005      	movs	r5, r0
    9606:	000e      	movs	r6, r1
    9608:	68fb      	ldr	r3, [r7, #12]
    960a:	68da      	ldr	r2, [r3, #12]
    960c:	4b7e      	ldr	r3, [pc, #504]	; (9808 <cal_loop_test+0x37c>)
    960e:	6819      	ldr	r1, [r3, #0]
    9610:	4b7f      	ldr	r3, [pc, #508]	; (9810 <cal_loop_test+0x384>)
    9612:	1c10      	adds	r0, r2, #0
    9614:	4798      	blx	r3
    9616:	1c03      	adds	r3, r0, #0
    9618:	1c1a      	adds	r2, r3, #0
    961a:	4b7a      	ldr	r3, [pc, #488]	; (9804 <cal_loop_test+0x378>)
    961c:	1c10      	adds	r0, r2, #0
    961e:	4798      	blx	r3
    9620:	0003      	movs	r3, r0
    9622:	000c      	movs	r4, r1
    9624:	0018      	movs	r0, r3
    9626:	0021      	movs	r1, r4
    9628:	4b7d      	ldr	r3, [pc, #500]	; (9820 <cal_loop_test+0x394>)
    962a:	4798      	blx	r3
    962c:	0002      	movs	r2, r0
    962e:	000b      	movs	r3, r1
    9630:	4c79      	ldr	r4, [pc, #484]	; (9818 <cal_loop_test+0x38c>)
    9632:	0028      	movs	r0, r5
    9634:	0031      	movs	r1, r6
    9636:	47a0      	blx	r4
    9638:	0003      	movs	r3, r0
    963a:	000c      	movs	r4, r1
    963c:	0019      	movs	r1, r3
    963e:	0022      	movs	r2, r4
    9640:	4b76      	ldr	r3, [pc, #472]	; (981c <cal_loop_test+0x390>)
    9642:	0008      	movs	r0, r1
    9644:	0011      	movs	r1, r2
    9646:	4798      	blx	r3
    9648:	1c03      	adds	r3, r0, #0
    964a:	61bb      	str	r3, [r7, #24]
	dD1 = meas_inst->distance*sin(deg2rad*meas_inst->inclination);
    964c:	68fb      	ldr	r3, [r7, #12]
    964e:	69da      	ldr	r2, [r3, #28]
    9650:	4b6c      	ldr	r3, [pc, #432]	; (9804 <cal_loop_test+0x378>)
    9652:	1c10      	adds	r0, r2, #0
    9654:	4798      	blx	r3
    9656:	0005      	movs	r5, r0
    9658:	000e      	movs	r6, r1
    965a:	68fb      	ldr	r3, [r7, #12]
    965c:	691a      	ldr	r2, [r3, #16]
    965e:	4b6a      	ldr	r3, [pc, #424]	; (9808 <cal_loop_test+0x37c>)
    9660:	6819      	ldr	r1, [r3, #0]
    9662:	4b6b      	ldr	r3, [pc, #428]	; (9810 <cal_loop_test+0x384>)
    9664:	1c10      	adds	r0, r2, #0
    9666:	4798      	blx	r3
    9668:	1c03      	adds	r3, r0, #0
    966a:	1c1a      	adds	r2, r3, #0
    966c:	4b65      	ldr	r3, [pc, #404]	; (9804 <cal_loop_test+0x378>)
    966e:	1c10      	adds	r0, r2, #0
    9670:	4798      	blx	r3
    9672:	0003      	movs	r3, r0
    9674:	000c      	movs	r4, r1
    9676:	0018      	movs	r0, r3
    9678:	0021      	movs	r1, r4
    967a:	4b69      	ldr	r3, [pc, #420]	; (9820 <cal_loop_test+0x394>)
    967c:	4798      	blx	r3
    967e:	0002      	movs	r2, r0
    9680:	000b      	movs	r3, r1
    9682:	4c65      	ldr	r4, [pc, #404]	; (9818 <cal_loop_test+0x38c>)
    9684:	0028      	movs	r0, r5
    9686:	0031      	movs	r1, r6
    9688:	47a0      	blx	r4
    968a:	0003      	movs	r3, r0
    968c:	000c      	movs	r4, r1
    968e:	0019      	movs	r1, r3
    9690:	0022      	movs	r2, r4
    9692:	4b62      	ldr	r3, [pc, #392]	; (981c <cal_loop_test+0x390>)
    9694:	0008      	movs	r0, r1
    9696:	0011      	movs	r1, r2
    9698:	4798      	blx	r3
    969a:	1c03      	adds	r3, r0, #0
    969c:	617b      	str	r3, [r7, #20]
	//  add  new offsets
	N1 = N1 + dN1;
    969e:	4b57      	ldr	r3, [pc, #348]	; (97fc <cal_loop_test+0x370>)
    96a0:	69f9      	ldr	r1, [r7, #28]
    96a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96a4:	4798      	blx	r3
    96a6:	1c03      	adds	r3, r0, #0
    96a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	E1 = E1 + dE1;
    96aa:	4b54      	ldr	r3, [pc, #336]	; (97fc <cal_loop_test+0x370>)
    96ac:	69b9      	ldr	r1, [r7, #24]
    96ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    96b0:	4798      	blx	r3
    96b2:	1c03      	adds	r3, r0, #0
    96b4:	62bb      	str	r3, [r7, #40]	; 0x28
	D1 = D1 + dD1;
    96b6:	4b51      	ldr	r3, [pc, #324]	; (97fc <cal_loop_test+0x370>)
    96b8:	6979      	ldr	r1, [r7, #20]
    96ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
    96bc:	4798      	blx	r3
    96be:	1c03      	adds	r3, r0, #0
    96c0:	627b      	str	r3, [r7, #36]	; 0x24
	//  Calculate new horizontal, vertical, azimuth
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
    96c2:	4b50      	ldr	r3, [pc, #320]	; (9804 <cal_loop_test+0x378>)
    96c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96c6:	4798      	blx	r3
    96c8:	2300      	movs	r3, #0
    96ca:	2480      	movs	r4, #128	; 0x80
    96cc:	05e4      	lsls	r4, r4, #23
    96ce:	001a      	movs	r2, r3
    96d0:	0023      	movs	r3, r4
    96d2:	4c55      	ldr	r4, [pc, #340]	; (9828 <cal_loop_test+0x39c>)
    96d4:	47a0      	blx	r4
    96d6:	0005      	movs	r5, r0
    96d8:	000e      	movs	r6, r1
    96da:	4b4a      	ldr	r3, [pc, #296]	; (9804 <cal_loop_test+0x378>)
    96dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    96de:	4798      	blx	r3
    96e0:	2300      	movs	r3, #0
    96e2:	2480      	movs	r4, #128	; 0x80
    96e4:	05e4      	lsls	r4, r4, #23
    96e6:	001a      	movs	r2, r3
    96e8:	0023      	movs	r3, r4
    96ea:	4c4f      	ldr	r4, [pc, #316]	; (9828 <cal_loop_test+0x39c>)
    96ec:	47a0      	blx	r4
    96ee:	0002      	movs	r2, r0
    96f0:	000b      	movs	r3, r1
    96f2:	4c4e      	ldr	r4, [pc, #312]	; (982c <cal_loop_test+0x3a0>)
    96f4:	0028      	movs	r0, r5
    96f6:	0031      	movs	r1, r6
    96f8:	47a0      	blx	r4
    96fa:	0003      	movs	r3, r0
    96fc:	000c      	movs	r4, r1
    96fe:	0018      	movs	r0, r3
    9700:	0021      	movs	r1, r4
    9702:	4b4b      	ldr	r3, [pc, #300]	; (9830 <cal_loop_test+0x3a4>)
    9704:	4798      	blx	r3
    9706:	000a      	movs	r2, r1
    9708:	0001      	movs	r1, r0
    970a:	4b44      	ldr	r3, [pc, #272]	; (981c <cal_loop_test+0x390>)
    970c:	0008      	movs	r0, r1
    970e:	0011      	movs	r1, r2
    9710:	4798      	blx	r3
    9712:	1c02      	adds	r2, r0, #0
    9714:	4b3a      	ldr	r3, [pc, #232]	; (9800 <cal_loop_test+0x374>)
    9716:	601a      	str	r2, [r3, #0]
	loop_vertical = D1;
    9718:	4b42      	ldr	r3, [pc, #264]	; (9824 <cal_loop_test+0x398>)
    971a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    971c:	601a      	str	r2, [r3, #0]
	loop_azimuth = rad2deg*atan2(E1, N1);
    971e:	4b45      	ldr	r3, [pc, #276]	; (9834 <cal_loop_test+0x3a8>)
    9720:	681a      	ldr	r2, [r3, #0]
    9722:	4b38      	ldr	r3, [pc, #224]	; (9804 <cal_loop_test+0x378>)
    9724:	1c10      	adds	r0, r2, #0
    9726:	4798      	blx	r3
    9728:	0005      	movs	r5, r0
    972a:	000e      	movs	r6, r1
    972c:	4b35      	ldr	r3, [pc, #212]	; (9804 <cal_loop_test+0x378>)
    972e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9730:	4798      	blx	r3
    9732:	6038      	str	r0, [r7, #0]
    9734:	6079      	str	r1, [r7, #4]
    9736:	4b33      	ldr	r3, [pc, #204]	; (9804 <cal_loop_test+0x378>)
    9738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    973a:	4798      	blx	r3
    973c:	0003      	movs	r3, r0
    973e:	000c      	movs	r4, r1
    9740:	001a      	movs	r2, r3
    9742:	0023      	movs	r3, r4
    9744:	6838      	ldr	r0, [r7, #0]
    9746:	6879      	ldr	r1, [r7, #4]
    9748:	4c3b      	ldr	r4, [pc, #236]	; (9838 <cal_loop_test+0x3ac>)
    974a:	47a0      	blx	r4
    974c:	0002      	movs	r2, r0
    974e:	000b      	movs	r3, r1
    9750:	4c31      	ldr	r4, [pc, #196]	; (9818 <cal_loop_test+0x38c>)
    9752:	0028      	movs	r0, r5
    9754:	0031      	movs	r1, r6
    9756:	47a0      	blx	r4
    9758:	0003      	movs	r3, r0
    975a:	000c      	movs	r4, r1
    975c:	0019      	movs	r1, r3
    975e:	0022      	movs	r2, r4
    9760:	4b2e      	ldr	r3, [pc, #184]	; (981c <cal_loop_test+0x390>)
    9762:	0008      	movs	r0, r1
    9764:	0011      	movs	r1, r2
    9766:	4798      	blx	r3
    9768:	1c02      	adds	r2, r0, #0
    976a:	4b28      	ldr	r3, [pc, #160]	; (980c <cal_loop_test+0x380>)
    976c:	601a      	str	r2, [r3, #0]
	
	loop_error = sqrt(pow(loop_horizontal,2) + pow(loop_vertical,2))/loop_distance;
    976e:	4b24      	ldr	r3, [pc, #144]	; (9800 <cal_loop_test+0x374>)
    9770:	681a      	ldr	r2, [r3, #0]
    9772:	4b24      	ldr	r3, [pc, #144]	; (9804 <cal_loop_test+0x378>)
    9774:	1c10      	adds	r0, r2, #0
    9776:	4798      	blx	r3
    9778:	2300      	movs	r3, #0
    977a:	2480      	movs	r4, #128	; 0x80
    977c:	05e4      	lsls	r4, r4, #23
    977e:	001a      	movs	r2, r3
    9780:	0023      	movs	r3, r4
    9782:	4c29      	ldr	r4, [pc, #164]	; (9828 <cal_loop_test+0x39c>)
    9784:	47a0      	blx	r4
    9786:	0005      	movs	r5, r0
    9788:	000e      	movs	r6, r1
    978a:	4b26      	ldr	r3, [pc, #152]	; (9824 <cal_loop_test+0x398>)
    978c:	681a      	ldr	r2, [r3, #0]
    978e:	4b1d      	ldr	r3, [pc, #116]	; (9804 <cal_loop_test+0x378>)
    9790:	1c10      	adds	r0, r2, #0
    9792:	4798      	blx	r3
    9794:	2300      	movs	r3, #0
    9796:	2480      	movs	r4, #128	; 0x80
    9798:	05e4      	lsls	r4, r4, #23
    979a:	001a      	movs	r2, r3
    979c:	0023      	movs	r3, r4
    979e:	4c22      	ldr	r4, [pc, #136]	; (9828 <cal_loop_test+0x39c>)
    97a0:	47a0      	blx	r4
    97a2:	0002      	movs	r2, r0
    97a4:	000b      	movs	r3, r1
    97a6:	4c21      	ldr	r4, [pc, #132]	; (982c <cal_loop_test+0x3a0>)
    97a8:	0028      	movs	r0, r5
    97aa:	0031      	movs	r1, r6
    97ac:	47a0      	blx	r4
    97ae:	0003      	movs	r3, r0
    97b0:	000c      	movs	r4, r1
    97b2:	0018      	movs	r0, r3
    97b4:	0021      	movs	r1, r4
    97b6:	4b1e      	ldr	r3, [pc, #120]	; (9830 <cal_loop_test+0x3a4>)
    97b8:	4798      	blx	r3
    97ba:	0005      	movs	r5, r0
    97bc:	000e      	movs	r6, r1
    97be:	4b0e      	ldr	r3, [pc, #56]	; (97f8 <cal_loop_test+0x36c>)
    97c0:	681a      	ldr	r2, [r3, #0]
    97c2:	4b10      	ldr	r3, [pc, #64]	; (9804 <cal_loop_test+0x378>)
    97c4:	1c10      	adds	r0, r2, #0
    97c6:	4798      	blx	r3
    97c8:	0002      	movs	r2, r0
    97ca:	000b      	movs	r3, r1
    97cc:	4c1b      	ldr	r4, [pc, #108]	; (983c <cal_loop_test+0x3b0>)
    97ce:	0028      	movs	r0, r5
    97d0:	0031      	movs	r1, r6
    97d2:	47a0      	blx	r4
    97d4:	0003      	movs	r3, r0
    97d6:	000c      	movs	r4, r1
    97d8:	0019      	movs	r1, r3
    97da:	0022      	movs	r2, r4
    97dc:	4b0f      	ldr	r3, [pc, #60]	; (981c <cal_loop_test+0x390>)
    97de:	0008      	movs	r0, r1
    97e0:	0011      	movs	r1, r2
    97e2:	4798      	blx	r3
    97e4:	1c02      	adds	r2, r0, #0
    97e6:	4b16      	ldr	r3, [pc, #88]	; (9840 <cal_loop_test+0x3b4>)
    97e8:	601a      	str	r2, [r3, #0]
	
}
    97ea:	46c0      	nop			; (mov r8, r8)
    97ec:	46bd      	mov	sp, r7
    97ee:	b00d      	add	sp, #52	; 0x34
    97f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97f2:	46c0      	nop			; (mov r8, r8)
    97f4:	20002db4 	.word	0x20002db4
    97f8:	200034a4 	.word	0x200034a4
    97fc:	000210d5 	.word	0x000210d5
    9800:	20004130 	.word	0x20004130
    9804:	00023a0d 	.word	0x00023a0d
    9808:	00028d68 	.word	0x00028d68
    980c:	20004f34 	.word	0x20004f34
    9810:	000217d9 	.word	0x000217d9
    9814:	0001e169 	.word	0x0001e169
    9818:	00022d45 	.word	0x00022d45
    981c:	00023ab1 	.word	0x00023ab1
    9820:	0001e325 	.word	0x0001e325
    9824:	2000349c 	.word	0x2000349c
    9828:	0001e3bd 	.word	0x0001e3bd
    982c:	00021ebd 	.word	0x00021ebd
    9830:	0001e715 	.word	0x0001e715
    9834:	00028d64 	.word	0x00028d64
    9838:	0001e3b5 	.word	0x0001e3b5
    983c:	000224dd 	.word	0x000224dd
    9840:	20004b10 	.word	0x20004b10

00009844 <cal_dist_process>:

void cal_dist_process(void){
    9844:	b5b0      	push	{r4, r5, r7, lr}
    9846:	af00      	add	r7, sp, #0
	
	
	//  Fill Out data for report structure
	get_time();//  Get current time
    9848:	4b0f      	ldr	r3, [pc, #60]	; (9888 <cal_dist_process+0x44>)
    984a:	4798      	blx	r3
	cal_report_dist.timestamp = gen_posix_time(&current_time);
    984c:	4b0f      	ldr	r3, [pc, #60]	; (988c <cal_dist_process+0x48>)
    984e:	0018      	movs	r0, r3
    9850:	4b0f      	ldr	r3, [pc, #60]	; (9890 <cal_dist_process+0x4c>)
    9852:	4798      	blx	r3
    9854:	0002      	movs	r2, r0
    9856:	4b0f      	ldr	r3, [pc, #60]	; (9894 <cal_dist_process+0x50>)
    9858:	60da      	str	r2, [r3, #12]
	cal_report_dist.software_version = software_version;
    985a:	4b0f      	ldr	r3, [pc, #60]	; (9898 <cal_dist_process+0x54>)
    985c:	681a      	ldr	r2, [r3, #0]
    985e:	4b0d      	ldr	r3, [pc, #52]	; (9894 <cal_dist_process+0x50>)
    9860:	601a      	str	r2, [r3, #0]
	cal_report_dist.points = buf_points;
    9862:	4b0e      	ldr	r3, [pc, #56]	; (989c <cal_dist_process+0x58>)
    9864:	781b      	ldrb	r3, [r3, #0]
    9866:	001a      	movs	r2, r3
    9868:	4b0a      	ldr	r3, [pc, #40]	; (9894 <cal_dist_process+0x50>)
    986a:	609a      	str	r2, [r3, #8]
	memcpy(&cal_report_dist.time_struct,&current_time,sizeof(current_time));
    986c:	4b09      	ldr	r3, [pc, #36]	; (9894 <cal_dist_process+0x50>)
    986e:	4a07      	ldr	r2, [pc, #28]	; (988c <cal_dist_process+0x48>)
    9870:	3340      	adds	r3, #64	; 0x40
    9872:	ca13      	ldmia	r2!, {r0, r1, r4}
    9874:	c313      	stmia	r3!, {r0, r1, r4}
    9876:	ca03      	ldmia	r2!, {r0, r1}
    9878:	c303      	stmia	r3!, {r0, r1}
	
	dist_calst.dist_offset = temp_dist_offset;
    987a:	4b09      	ldr	r3, [pc, #36]	; (98a0 <cal_dist_process+0x5c>)
    987c:	681a      	ldr	r2, [r3, #0]
    987e:	4b09      	ldr	r3, [pc, #36]	; (98a4 <cal_dist_process+0x60>)
    9880:	659a      	str	r2, [r3, #88]	; 0x58
}
    9882:	46c0      	nop			; (mov r8, r8)
    9884:	46bd      	mov	sp, r7
    9886:	bdb0      	pop	{r4, r5, r7, pc}
    9888:	00011001 	.word	0x00011001
    988c:	200011f4 	.word	0x200011f4
    9890:	000111d5 	.word	0x000111d5
    9894:	200034dc 	.word	0x200034dc
    9898:	00028d60 	.word	0x00028d60
    989c:	20001e9c 	.word	0x20001e9c
    98a0:	20003fe8 	.word	0x20003fe8
    98a4:	20004888 	.word	0x20004888

000098a8 <cal_write_report>:





FRESULT cal_write_report(void){
    98a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    98aa:	46d6      	mov	lr, sl
    98ac:	464f      	mov	r7, r9
    98ae:	4646      	mov	r6, r8
    98b0:	b5c0      	push	{r6, r7, lr}
    98b2:	4c7e      	ldr	r4, [pc, #504]	; (9aac <cal_write_report+0x204>)
    98b4:	44a5      	add	sp, r4
    98b6:	af0c      	add	r7, sp, #48	; 0x30
	char file_name[250];
	char write_str1[600];
	char write_str2[600];
	FRESULT fdebug1, fdebug2, fdebug3;
	DSTATUS diskio_status;
	pbw = &bw;
    98b8:	4b7d      	ldr	r3, [pc, #500]	; (9ab0 <cal_write_report+0x208>)
    98ba:	2220      	movs	r2, #32
    98bc:	4694      	mov	ip, r2
    98be:	2208      	movs	r2, #8
    98c0:	4690      	mov	r8, r2
    98c2:	2208      	movs	r2, #8
    98c4:	4691      	mov	r9, r2
    98c6:	44b9      	add	r9, r7
    98c8:	44c8      	add	r8, r9
    98ca:	44c4      	add	ip, r8
    98cc:	4463      	add	r3, ip
    98ce:	22d5      	movs	r2, #213	; 0xd5
    98d0:	00d2      	lsls	r2, r2, #3
    98d2:	2120      	movs	r1, #32
    98d4:	468c      	mov	ip, r1
    98d6:	2108      	movs	r1, #8
    98d8:	4688      	mov	r8, r1
    98da:	2108      	movs	r1, #8
    98dc:	4689      	mov	r9, r1
    98de:	44b9      	add	r9, r7
    98e0:	44c8      	add	r8, r9
    98e2:	44c4      	add	ip, r8
    98e4:	4462      	add	r2, ip
    98e6:	6013      	str	r3, [r2, #0]
	struct MEASUREMENT temp_meas;
	float azm_raw, inc_raw, roll_raw;
	float azm_cal, inc_cal, roll_cal;
	
	//  Set up SD card
	config_spi(SD_card);
    98e8:	2002      	movs	r0, #2
    98ea:	4b72      	ldr	r3, [pc, #456]	; (9ab4 <cal_write_report+0x20c>)
    98ec:	4798      	blx	r3
	spi_select_slave(&spi_main, &slave_SD, true);
    98ee:	4972      	ldr	r1, [pc, #456]	; (9ab8 <cal_write_report+0x210>)
    98f0:	4b72      	ldr	r3, [pc, #456]	; (9abc <cal_write_report+0x214>)
    98f2:	2201      	movs	r2, #1
    98f4:	0018      	movs	r0, r3
    98f6:	4b72      	ldr	r3, [pc, #456]	; (9ac0 <cal_write_report+0x218>)
    98f8:	4798      	blx	r3

	diskio_status = disk_status(0);
    98fa:	4b72      	ldr	r3, [pc, #456]	; (9ac4 <cal_write_report+0x21c>)
    98fc:	2220      	movs	r2, #32
    98fe:	2108      	movs	r1, #8
    9900:	468c      	mov	ip, r1
    9902:	2108      	movs	r1, #8
    9904:	4688      	mov	r8, r1
    9906:	44b8      	add	r8, r7
    9908:	44c4      	add	ip, r8
    990a:	4462      	add	r2, ip
    990c:	18d4      	adds	r4, r2, r3
    990e:	2000      	movs	r0, #0
    9910:	4b6d      	ldr	r3, [pc, #436]	; (9ac8 <cal_write_report+0x220>)
    9912:	4798      	blx	r3
    9914:	0003      	movs	r3, r0
    9916:	7023      	strb	r3, [r4, #0]

	if(diskio_status){
    9918:	4b6a      	ldr	r3, [pc, #424]	; (9ac4 <cal_write_report+0x21c>)
    991a:	2220      	movs	r2, #32
    991c:	4694      	mov	ip, r2
    991e:	2208      	movs	r2, #8
    9920:	4690      	mov	r8, r2
    9922:	2208      	movs	r2, #8
    9924:	4691      	mov	r9, r2
    9926:	44b9      	add	r9, r7
    9928:	44c8      	add	r8, r9
    992a:	44c4      	add	ip, r8
    992c:	4463      	add	r3, ip
    992e:	781b      	ldrb	r3, [r3, #0]
    9930:	2b00      	cmp	r3, #0
    9932:	d04a      	beq.n	99ca <cal_write_report+0x122>
		//Possibly card not initialized
		configure_SD();
    9934:	4b65      	ldr	r3, [pc, #404]	; (9acc <cal_write_report+0x224>)
    9936:	4798      	blx	r3
		diskio_status = disk_status(0);
    9938:	4b62      	ldr	r3, [pc, #392]	; (9ac4 <cal_write_report+0x21c>)
    993a:	2220      	movs	r2, #32
    993c:	2108      	movs	r1, #8
    993e:	468c      	mov	ip, r1
    9940:	2108      	movs	r1, #8
    9942:	4688      	mov	r8, r1
    9944:	44b8      	add	r8, r7
    9946:	44c4      	add	ip, r8
    9948:	4462      	add	r2, ip
    994a:	18d4      	adds	r4, r2, r3
    994c:	2000      	movs	r0, #0
    994e:	4b5e      	ldr	r3, [pc, #376]	; (9ac8 <cal_write_report+0x220>)
    9950:	4798      	blx	r3
    9952:	0003      	movs	r3, r0
    9954:	7023      	strb	r3, [r4, #0]
		if(diskio_status){
    9956:	4b5b      	ldr	r3, [pc, #364]	; (9ac4 <cal_write_report+0x21c>)
    9958:	2220      	movs	r2, #32
    995a:	4694      	mov	ip, r2
    995c:	2208      	movs	r2, #8
    995e:	4690      	mov	r8, r2
    9960:	2208      	movs	r2, #8
    9962:	4691      	mov	r9, r2
    9964:	44b9      	add	r9, r7
    9966:	44c8      	add	r8, r9
    9968:	44c4      	add	ip, r8
    996a:	4463      	add	r3, ip
    996c:	781b      	ldrb	r3, [r3, #0]
    996e:	2b00      	cmp	r3, #0
    9970:	d02b      	beq.n	99ca <cal_write_report+0x122>
			fdebug1 = FR_NOT_READY;
    9972:	4b57      	ldr	r3, [pc, #348]	; (9ad0 <cal_write_report+0x228>)
    9974:	2220      	movs	r2, #32
    9976:	4694      	mov	ip, r2
    9978:	2208      	movs	r2, #8
    997a:	4690      	mov	r8, r2
    997c:	2208      	movs	r2, #8
    997e:	4691      	mov	r9, r2
    9980:	44b9      	add	r9, r7
    9982:	44c8      	add	r8, r9
    9984:	44c4      	add	ip, r8
    9986:	4463      	add	r3, ip
    9988:	2203      	movs	r2, #3
    998a:	701a      	strb	r2, [r3, #0]
			SD_status = fdebug1;
    998c:	4b51      	ldr	r3, [pc, #324]	; (9ad4 <cal_write_report+0x22c>)
    998e:	4a50      	ldr	r2, [pc, #320]	; (9ad0 <cal_write_report+0x228>)
    9990:	2120      	movs	r1, #32
    9992:	468c      	mov	ip, r1
    9994:	2108      	movs	r1, #8
    9996:	4688      	mov	r8, r1
    9998:	2108      	movs	r1, #8
    999a:	4689      	mov	r9, r1
    999c:	44b9      	add	r9, r7
    999e:	44c8      	add	r8, r9
    99a0:	44c4      	add	ip, r8
    99a2:	4462      	add	r2, ip
    99a4:	7812      	ldrb	r2, [r2, #0]
    99a6:	701a      	strb	r2, [r3, #0]
			config_spi(LCD);
    99a8:	2000      	movs	r0, #0
    99aa:	4b42      	ldr	r3, [pc, #264]	; (9ab4 <cal_write_report+0x20c>)
    99ac:	4798      	blx	r3
			return fdebug1;
    99ae:	4b48      	ldr	r3, [pc, #288]	; (9ad0 <cal_write_report+0x228>)
    99b0:	2220      	movs	r2, #32
    99b2:	4694      	mov	ip, r2
    99b4:	2208      	movs	r2, #8
    99b6:	4690      	mov	r8, r2
    99b8:	2208      	movs	r2, #8
    99ba:	4691      	mov	r9, r2
    99bc:	44b9      	add	r9, r7
    99be:	44c8      	add	r8, r9
    99c0:	44c4      	add	ip, r8
    99c2:	4463      	add	r3, ip
    99c4:	781b      	ldrb	r3, [r3, #0]
    99c6:	f001 fe06 	bl	b5d6 <cal_write_report+0x1d2e>
	
	}	
	
	
	
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_report.txt", current_time.year, current_time.month, current_time.date,
    99ca:	4b43      	ldr	r3, [pc, #268]	; (9ad8 <cal_write_report+0x230>)
    99cc:	799b      	ldrb	r3, [r3, #6]
    99ce:	001e      	movs	r6, r3
    99d0:	4b41      	ldr	r3, [pc, #260]	; (9ad8 <cal_write_report+0x230>)
    99d2:	795b      	ldrb	r3, [r3, #5]
    99d4:	62bb      	str	r3, [r7, #40]	; 0x28
    99d6:	4b40      	ldr	r3, [pc, #256]	; (9ad8 <cal_write_report+0x230>)
    99d8:	791b      	ldrb	r3, [r3, #4]
    99da:	001a      	movs	r2, r3
							current_time.hours, current_time.minutes, current_time.seconds);
    99dc:	4b3e      	ldr	r3, [pc, #248]	; (9ad8 <cal_write_report+0x230>)
    99de:	789b      	ldrb	r3, [r3, #2]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_report.txt", current_time.year, current_time.month, current_time.date,
    99e0:	001c      	movs	r4, r3
							current_time.hours, current_time.minutes, current_time.seconds);
    99e2:	4b3d      	ldr	r3, [pc, #244]	; (9ad8 <cal_write_report+0x230>)
    99e4:	785b      	ldrb	r3, [r3, #1]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_report.txt", current_time.year, current_time.month, current_time.date,
    99e6:	001d      	movs	r5, r3
							current_time.hours, current_time.minutes, current_time.seconds);
    99e8:	4b3b      	ldr	r3, [pc, #236]	; (9ad8 <cal_write_report+0x230>)
    99ea:	781b      	ldrb	r3, [r3, #0]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_report.txt", current_time.year, current_time.month, current_time.date,
    99ec:	4698      	mov	r8, r3
    99ee:	493b      	ldr	r1, [pc, #236]	; (9adc <cal_write_report+0x234>)
    99f0:	20b1      	movs	r0, #177	; 0xb1
    99f2:	00c0      	lsls	r0, r0, #3
    99f4:	2320      	movs	r3, #32
    99f6:	469c      	mov	ip, r3
    99f8:	2308      	movs	r3, #8
    99fa:	4699      	mov	r9, r3
    99fc:	2308      	movs	r3, #8
    99fe:	469a      	mov	sl, r3
    9a00:	44ba      	add	sl, r7
    9a02:	44d1      	add	r9, sl
    9a04:	44cc      	add	ip, r9
    9a06:	4460      	add	r0, ip
    9a08:	4643      	mov	r3, r8
    9a0a:	9303      	str	r3, [sp, #12]
    9a0c:	9502      	str	r5, [sp, #8]
    9a0e:	9401      	str	r4, [sp, #4]
    9a10:	9200      	str	r2, [sp, #0]
    9a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a14:	0032      	movs	r2, r6
    9a16:	4c32      	ldr	r4, [pc, #200]	; (9ae0 <cal_write_report+0x238>)
    9a18:	47a0      	blx	r4
	fdebug2 = f_open(&file_cal_report, file_name, FA_CREATE_NEW | FA_READ | FA_WRITE);						
    9a1a:	4b32      	ldr	r3, [pc, #200]	; (9ae4 <cal_write_report+0x23c>)
    9a1c:	2220      	movs	r2, #32
    9a1e:	2108      	movs	r1, #8
    9a20:	468c      	mov	ip, r1
    9a22:	2108      	movs	r1, #8
    9a24:	4688      	mov	r8, r1
    9a26:	44b8      	add	r8, r7
    9a28:	44c4      	add	ip, r8
    9a2a:	4462      	add	r2, ip
    9a2c:	18d4      	adds	r4, r2, r3
    9a2e:	23b1      	movs	r3, #177	; 0xb1
    9a30:	00db      	lsls	r3, r3, #3
    9a32:	2220      	movs	r2, #32
    9a34:	2108      	movs	r1, #8
    9a36:	468c      	mov	ip, r1
    9a38:	2108      	movs	r1, #8
    9a3a:	4688      	mov	r8, r1
    9a3c:	44b8      	add	r8, r7
    9a3e:	44c4      	add	ip, r8
    9a40:	4462      	add	r2, ip
    9a42:	18d1      	adds	r1, r2, r3
    9a44:	4b28      	ldr	r3, [pc, #160]	; (9ae8 <cal_write_report+0x240>)
    9a46:	2207      	movs	r2, #7
    9a48:	0018      	movs	r0, r3
    9a4a:	4b28      	ldr	r3, [pc, #160]	; (9aec <cal_write_report+0x244>)
    9a4c:	4798      	blx	r3
    9a4e:	0003      	movs	r3, r0
    9a50:	7023      	strb	r3, [r4, #0]
	if(fdebug2!=FR_OK){
    9a52:	4b24      	ldr	r3, [pc, #144]	; (9ae4 <cal_write_report+0x23c>)
    9a54:	2220      	movs	r2, #32
    9a56:	4694      	mov	ip, r2
    9a58:	2208      	movs	r2, #8
    9a5a:	4690      	mov	r8, r2
    9a5c:	2208      	movs	r2, #8
    9a5e:	4691      	mov	r9, r2
    9a60:	44b9      	add	r9, r7
    9a62:	44c8      	add	r8, r9
    9a64:	44c4      	add	ip, r8
    9a66:	4463      	add	r3, ip
    9a68:	781b      	ldrb	r3, [r3, #0]
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d040      	beq.n	9af0 <cal_write_report+0x248>
		SD_status = fdebug2;
    9a6e:	4b19      	ldr	r3, [pc, #100]	; (9ad4 <cal_write_report+0x22c>)
    9a70:	4a1c      	ldr	r2, [pc, #112]	; (9ae4 <cal_write_report+0x23c>)
    9a72:	2120      	movs	r1, #32
    9a74:	468c      	mov	ip, r1
    9a76:	2108      	movs	r1, #8
    9a78:	4688      	mov	r8, r1
    9a7a:	2108      	movs	r1, #8
    9a7c:	4689      	mov	r9, r1
    9a7e:	44b9      	add	r9, r7
    9a80:	44c8      	add	r8, r9
    9a82:	44c4      	add	ip, r8
    9a84:	4462      	add	r2, ip
    9a86:	7812      	ldrb	r2, [r2, #0]
    9a88:	701a      	strb	r2, [r3, #0]
		config_spi(LCD);
    9a8a:	2000      	movs	r0, #0
    9a8c:	4b09      	ldr	r3, [pc, #36]	; (9ab4 <cal_write_report+0x20c>)
    9a8e:	4798      	blx	r3
		return fdebug2;
    9a90:	4b14      	ldr	r3, [pc, #80]	; (9ae4 <cal_write_report+0x23c>)
    9a92:	2220      	movs	r2, #32
    9a94:	4694      	mov	ip, r2
    9a96:	2208      	movs	r2, #8
    9a98:	4690      	mov	r8, r2
    9a9a:	2208      	movs	r2, #8
    9a9c:	4691      	mov	r9, r2
    9a9e:	44b9      	add	r9, r7
    9aa0:	44c8      	add	r8, r9
    9aa2:	44c4      	add	ip, r8
    9aa4:	4463      	add	r3, ip
    9aa6:	781b      	ldrb	r3, [r3, #0]
    9aa8:	f001 fd95 	bl	b5d6 <cal_write_report+0x1d2e>
    9aac:	fffff8e0 	.word	0xfffff8e0
    9ab0:	00000684 	.word	0x00000684
    9ab4:	00010311 	.word	0x00010311
    9ab8:	20001240 	.word	0x20001240
    9abc:	20001270 	.word	0x20001270
    9ac0:	00017325 	.word	0x00017325
    9ac4:	000006a7 	.word	0x000006a7
    9ac8:	000113ad 	.word	0x000113ad
    9acc:	0001bcc9 	.word	0x0001bcc9
    9ad0:	000006a6 	.word	0x000006a6
    9ad4:	20004135 	.word	0x20004135
    9ad8:	200011f4 	.word	0x200011f4
    9adc:	000280ec 	.word	0x000280ec
    9ae0:	00023d31 	.word	0x00023d31
    9ae4:	000006a5 	.word	0x000006a5
    9ae8:	20002b8c 	.word	0x20002b8c
    9aec:	00013c4d 	.word	0x00013c4d
	}
	
	
	//  Write Header
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
    9af0:	4bfc      	ldr	r3, [pc, #1008]	; (9ee4 <cal_write_report+0x63c>)
    9af2:	2246      	movs	r2, #70	; 0x46
    9af4:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    9af6:	62bb      	str	r3, [r7, #40]	; 0x28
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
    9af8:	4bfa      	ldr	r3, [pc, #1000]	; (9ee4 <cal_write_report+0x63c>)
    9afa:	2245      	movs	r2, #69	; 0x45
    9afc:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    9afe:	623b      	str	r3, [r7, #32]
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
    9b00:	4bf8      	ldr	r3, [pc, #992]	; (9ee4 <cal_write_report+0x63c>)
    9b02:	2244      	movs	r2, #68	; 0x44
    9b04:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    9b06:	001c      	movs	r4, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
    9b08:	4bf6      	ldr	r3, [pc, #984]	; (9ee4 <cal_write_report+0x63c>)
    9b0a:	2242      	movs	r2, #66	; 0x42
    9b0c:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    9b0e:	001d      	movs	r5, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
    9b10:	4bf4      	ldr	r3, [pc, #976]	; (9ee4 <cal_write_report+0x63c>)
    9b12:	2241      	movs	r2, #65	; 0x41
    9b14:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    9b16:	001e      	movs	r6, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
    9b18:	4bf2      	ldr	r3, [pc, #968]	; (9ee4 <cal_write_report+0x63c>)
    9b1a:	2240      	movs	r2, #64	; 0x40
    9b1c:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    9b1e:	49f2      	ldr	r1, [pc, #968]	; (9ee8 <cal_write_report+0x640>)
    9b20:	20cc      	movs	r0, #204	; 0xcc
    9b22:	0080      	lsls	r0, r0, #2
    9b24:	2220      	movs	r2, #32
    9b26:	4694      	mov	ip, r2
    9b28:	2208      	movs	r2, #8
    9b2a:	4690      	mov	r8, r2
    9b2c:	2208      	movs	r2, #8
    9b2e:	4691      	mov	r9, r2
    9b30:	44b9      	add	r9, r7
    9b32:	44c8      	add	r8, r9
    9b34:	44c4      	add	ip, r8
    9b36:	4460      	add	r0, ip
    9b38:	9303      	str	r3, [sp, #12]
    9b3a:	9602      	str	r6, [sp, #8]
    9b3c:	9501      	str	r5, [sp, #4]
    9b3e:	9400      	str	r4, [sp, #0]
    9b40:	6a3b      	ldr	r3, [r7, #32]
    9b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9b44:	4ce9      	ldr	r4, [pc, #932]	; (9eec <cal_write_report+0x644>)
    9b46:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    9b48:	23cc      	movs	r3, #204	; 0xcc
    9b4a:	009b      	lsls	r3, r3, #2
    9b4c:	2220      	movs	r2, #32
    9b4e:	4694      	mov	ip, r2
    9b50:	2208      	movs	r2, #8
    9b52:	4690      	mov	r8, r2
    9b54:	2208      	movs	r2, #8
    9b56:	4691      	mov	r9, r2
    9b58:	44b9      	add	r9, r7
    9b5a:	44c8      	add	r8, r9
    9b5c:	44c4      	add	ip, r8
    9b5e:	4463      	add	r3, ip
    9b60:	0018      	movs	r0, r3
    9b62:	4be3      	ldr	r3, [pc, #908]	; (9ef0 <cal_write_report+0x648>)
    9b64:	4798      	blx	r3
    9b66:	0002      	movs	r2, r0
    9b68:	4be2      	ldr	r3, [pc, #904]	; (9ef4 <cal_write_report+0x64c>)
    9b6a:	2120      	movs	r1, #32
    9b6c:	2008      	movs	r0, #8
    9b6e:	4684      	mov	ip, r0
    9b70:	2008      	movs	r0, #8
    9b72:	4680      	mov	r8, r0
    9b74:	44b8      	add	r8, r7
    9b76:	44c4      	add	ip, r8
    9b78:	4461      	add	r1, ip
    9b7a:	18cc      	adds	r4, r1, r3
    9b7c:	23d5      	movs	r3, #213	; 0xd5
    9b7e:	00db      	lsls	r3, r3, #3
    9b80:	2120      	movs	r1, #32
    9b82:	468c      	mov	ip, r1
    9b84:	2108      	movs	r1, #8
    9b86:	4688      	mov	r8, r1
    9b88:	2108      	movs	r1, #8
    9b8a:	4689      	mov	r9, r1
    9b8c:	44b9      	add	r9, r7
    9b8e:	44c8      	add	r8, r9
    9b90:	44c4      	add	ip, r8
    9b92:	4463      	add	r3, ip
    9b94:	681b      	ldr	r3, [r3, #0]
    9b96:	21cc      	movs	r1, #204	; 0xcc
    9b98:	0089      	lsls	r1, r1, #2
    9b9a:	2020      	movs	r0, #32
    9b9c:	4684      	mov	ip, r0
    9b9e:	2008      	movs	r0, #8
    9ba0:	4680      	mov	r8, r0
    9ba2:	2008      	movs	r0, #8
    9ba4:	4681      	mov	r9, r0
    9ba6:	44b9      	add	r9, r7
    9ba8:	44c8      	add	r8, r9
    9baa:	44c4      	add	ip, r8
    9bac:	4461      	add	r1, ip
    9bae:	48d2      	ldr	r0, [pc, #840]	; (9ef8 <cal_write_report+0x650>)
    9bb0:	4dd2      	ldr	r5, [pc, #840]	; (9efc <cal_write_report+0x654>)
    9bb2:	47a8      	blx	r5
    9bb4:	0003      	movs	r3, r0
    9bb6:	7023      	strb	r3, [r4, #0]
	
	//  Write Version
	sprintf(write_str1,"Software Version: %1.1f\r\n\r\n", cal_report_azm_inc.software_version);
    9bb8:	4bca      	ldr	r3, [pc, #808]	; (9ee4 <cal_write_report+0x63c>)
    9bba:	681a      	ldr	r2, [r3, #0]
    9bbc:	4bd0      	ldr	r3, [pc, #832]	; (9f00 <cal_write_report+0x658>)
    9bbe:	1c10      	adds	r0, r2, #0
    9bc0:	4798      	blx	r3
    9bc2:	0003      	movs	r3, r0
    9bc4:	000c      	movs	r4, r1
    9bc6:	49cf      	ldr	r1, [pc, #828]	; (9f04 <cal_write_report+0x65c>)
    9bc8:	22cc      	movs	r2, #204	; 0xcc
    9bca:	0092      	lsls	r2, r2, #2
    9bcc:	2020      	movs	r0, #32
    9bce:	2508      	movs	r5, #8
    9bd0:	46ac      	mov	ip, r5
    9bd2:	2508      	movs	r5, #8
    9bd4:	46a8      	mov	r8, r5
    9bd6:	44b8      	add	r8, r7
    9bd8:	44c4      	add	ip, r8
    9bda:	4460      	add	r0, ip
    9bdc:	1880      	adds	r0, r0, r2
    9bde:	001a      	movs	r2, r3
    9be0:	0023      	movs	r3, r4
    9be2:	4cc2      	ldr	r4, [pc, #776]	; (9eec <cal_write_report+0x644>)
    9be4:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    9be6:	23cc      	movs	r3, #204	; 0xcc
    9be8:	009b      	lsls	r3, r3, #2
    9bea:	2220      	movs	r2, #32
    9bec:	4694      	mov	ip, r2
    9bee:	2208      	movs	r2, #8
    9bf0:	4690      	mov	r8, r2
    9bf2:	2208      	movs	r2, #8
    9bf4:	4691      	mov	r9, r2
    9bf6:	44b9      	add	r9, r7
    9bf8:	44c8      	add	r8, r9
    9bfa:	44c4      	add	ip, r8
    9bfc:	4463      	add	r3, ip
    9bfe:	0018      	movs	r0, r3
    9c00:	4bbb      	ldr	r3, [pc, #748]	; (9ef0 <cal_write_report+0x648>)
    9c02:	4798      	blx	r3
    9c04:	0002      	movs	r2, r0
    9c06:	4bbb      	ldr	r3, [pc, #748]	; (9ef4 <cal_write_report+0x64c>)
    9c08:	2120      	movs	r1, #32
    9c0a:	2008      	movs	r0, #8
    9c0c:	4684      	mov	ip, r0
    9c0e:	2008      	movs	r0, #8
    9c10:	4680      	mov	r8, r0
    9c12:	44b8      	add	r8, r7
    9c14:	44c4      	add	ip, r8
    9c16:	4461      	add	r1, ip
    9c18:	18cc      	adds	r4, r1, r3
    9c1a:	23d5      	movs	r3, #213	; 0xd5
    9c1c:	00db      	lsls	r3, r3, #3
    9c1e:	2120      	movs	r1, #32
    9c20:	468c      	mov	ip, r1
    9c22:	2108      	movs	r1, #8
    9c24:	4688      	mov	r8, r1
    9c26:	2108      	movs	r1, #8
    9c28:	4689      	mov	r9, r1
    9c2a:	44b9      	add	r9, r7
    9c2c:	44c8      	add	r8, r9
    9c2e:	44c4      	add	ip, r8
    9c30:	4463      	add	r3, ip
    9c32:	681b      	ldr	r3, [r3, #0]
    9c34:	21cc      	movs	r1, #204	; 0xcc
    9c36:	0089      	lsls	r1, r1, #2
    9c38:	2020      	movs	r0, #32
    9c3a:	4684      	mov	ip, r0
    9c3c:	2008      	movs	r0, #8
    9c3e:	4680      	mov	r8, r0
    9c40:	2008      	movs	r0, #8
    9c42:	4681      	mov	r9, r0
    9c44:	44b9      	add	r9, r7
    9c46:	44c8      	add	r8, r9
    9c48:	44c4      	add	ip, r8
    9c4a:	4461      	add	r1, ip
    9c4c:	48aa      	ldr	r0, [pc, #680]	; (9ef8 <cal_write_report+0x650>)
    9c4e:	4dab      	ldr	r5, [pc, #684]	; (9efc <cal_write_report+0x654>)
    9c50:	47a8      	blx	r5
    9c52:	0003      	movs	r3, r0
    9c54:	7023      	strb	r3, [r4, #0]
	
	//  Write Metrics
	// groups and points
	sprintf(write_str1,"Measurements: %d\r\n4-Point Groups: %d\r\n\r\n", 
    9c56:	4ba3      	ldr	r3, [pc, #652]	; (9ee4 <cal_write_report+0x63c>)
    9c58:	689a      	ldr	r2, [r3, #8]
    9c5a:	4ba2      	ldr	r3, [pc, #648]	; (9ee4 <cal_write_report+0x63c>)
    9c5c:	685b      	ldr	r3, [r3, #4]
    9c5e:	49aa      	ldr	r1, [pc, #680]	; (9f08 <cal_write_report+0x660>)
    9c60:	20cc      	movs	r0, #204	; 0xcc
    9c62:	0080      	lsls	r0, r0, #2
    9c64:	2420      	movs	r4, #32
    9c66:	46a4      	mov	ip, r4
    9c68:	2408      	movs	r4, #8
    9c6a:	46a0      	mov	r8, r4
    9c6c:	2408      	movs	r4, #8
    9c6e:	46a1      	mov	r9, r4
    9c70:	44b9      	add	r9, r7
    9c72:	44c8      	add	r8, r9
    9c74:	44c4      	add	ip, r8
    9c76:	4460      	add	r0, ip
    9c78:	4c9c      	ldr	r4, [pc, #624]	; (9eec <cal_write_report+0x644>)
    9c7a:	47a0      	blx	r4
				cal_report_azm_inc.points, cal_report_azm_inc.groups);
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    9c7c:	23cc      	movs	r3, #204	; 0xcc
    9c7e:	009b      	lsls	r3, r3, #2
    9c80:	2220      	movs	r2, #32
    9c82:	4694      	mov	ip, r2
    9c84:	2208      	movs	r2, #8
    9c86:	4690      	mov	r8, r2
    9c88:	2208      	movs	r2, #8
    9c8a:	4691      	mov	r9, r2
    9c8c:	44b9      	add	r9, r7
    9c8e:	44c8      	add	r8, r9
    9c90:	44c4      	add	ip, r8
    9c92:	4463      	add	r3, ip
    9c94:	0018      	movs	r0, r3
    9c96:	4b96      	ldr	r3, [pc, #600]	; (9ef0 <cal_write_report+0x648>)
    9c98:	4798      	blx	r3
    9c9a:	0002      	movs	r2, r0
    9c9c:	4b95      	ldr	r3, [pc, #596]	; (9ef4 <cal_write_report+0x64c>)
    9c9e:	2120      	movs	r1, #32
    9ca0:	2008      	movs	r0, #8
    9ca2:	4684      	mov	ip, r0
    9ca4:	2008      	movs	r0, #8
    9ca6:	4680      	mov	r8, r0
    9ca8:	44b8      	add	r8, r7
    9caa:	44c4      	add	ip, r8
    9cac:	4461      	add	r1, ip
    9cae:	18cc      	adds	r4, r1, r3
    9cb0:	23d5      	movs	r3, #213	; 0xd5
    9cb2:	00db      	lsls	r3, r3, #3
    9cb4:	2120      	movs	r1, #32
    9cb6:	468c      	mov	ip, r1
    9cb8:	2108      	movs	r1, #8
    9cba:	4688      	mov	r8, r1
    9cbc:	2108      	movs	r1, #8
    9cbe:	4689      	mov	r9, r1
    9cc0:	44b9      	add	r9, r7
    9cc2:	44c8      	add	r8, r9
    9cc4:	44c4      	add	ip, r8
    9cc6:	4463      	add	r3, ip
    9cc8:	681b      	ldr	r3, [r3, #0]
    9cca:	21cc      	movs	r1, #204	; 0xcc
    9ccc:	0089      	lsls	r1, r1, #2
    9cce:	2020      	movs	r0, #32
    9cd0:	4684      	mov	ip, r0
    9cd2:	2008      	movs	r0, #8
    9cd4:	4680      	mov	r8, r0
    9cd6:	2008      	movs	r0, #8
    9cd8:	4681      	mov	r9, r0
    9cda:	44b9      	add	r9, r7
    9cdc:	44c8      	add	r8, r9
    9cde:	44c4      	add	ip, r8
    9ce0:	4461      	add	r1, ip
    9ce2:	4885      	ldr	r0, [pc, #532]	; (9ef8 <cal_write_report+0x650>)
    9ce4:	4d85      	ldr	r5, [pc, #532]	; (9efc <cal_write_report+0x654>)
    9ce6:	47a8      	blx	r5
    9ce8:	0003      	movs	r3, r0
    9cea:	7023      	strb	r3, [r4, #0]
	// angle error
	sprintf(write_str1,"Angle Error Standard Deviation:\r\n  Azimuth: %3.6f degrees\r\n  Inclination: %3.6f degrees\r\n",
				cal_report_azm_inc.azm_angle_err, cal_report_azm_inc.inc_angle_err);				
    9cec:	4b7d      	ldr	r3, [pc, #500]	; (9ee4 <cal_write_report+0x63c>)
    9cee:	695a      	ldr	r2, [r3, #20]
	sprintf(write_str1,"Angle Error Standard Deviation:\r\n  Azimuth: %3.6f degrees\r\n  Inclination: %3.6f degrees\r\n",
    9cf0:	4b83      	ldr	r3, [pc, #524]	; (9f00 <cal_write_report+0x658>)
    9cf2:	1c10      	adds	r0, r2, #0
    9cf4:	4798      	blx	r3
    9cf6:	0005      	movs	r5, r0
    9cf8:	000e      	movs	r6, r1
				cal_report_azm_inc.azm_angle_err, cal_report_azm_inc.inc_angle_err);				
    9cfa:	4b7a      	ldr	r3, [pc, #488]	; (9ee4 <cal_write_report+0x63c>)
    9cfc:	691a      	ldr	r2, [r3, #16]
	sprintf(write_str1,"Angle Error Standard Deviation:\r\n  Azimuth: %3.6f degrees\r\n  Inclination: %3.6f degrees\r\n",
    9cfe:	4b80      	ldr	r3, [pc, #512]	; (9f00 <cal_write_report+0x658>)
    9d00:	1c10      	adds	r0, r2, #0
    9d02:	4798      	blx	r3
    9d04:	6038      	str	r0, [r7, #0]
    9d06:	6079      	str	r1, [r7, #4]
    9d08:	4980      	ldr	r1, [pc, #512]	; (9f0c <cal_write_report+0x664>)
    9d0a:	22cc      	movs	r2, #204	; 0xcc
    9d0c:	0092      	lsls	r2, r2, #2
    9d0e:	2020      	movs	r0, #32
    9d10:	2308      	movs	r3, #8
    9d12:	469c      	mov	ip, r3
    9d14:	2308      	movs	r3, #8
    9d16:	4698      	mov	r8, r3
    9d18:	44b8      	add	r8, r7
    9d1a:	44c4      	add	ip, r8
    9d1c:	4460      	add	r0, ip
    9d1e:	1880      	adds	r0, r0, r2
    9d20:	683b      	ldr	r3, [r7, #0]
    9d22:	687c      	ldr	r4, [r7, #4]
    9d24:	9300      	str	r3, [sp, #0]
    9d26:	9401      	str	r4, [sp, #4]
    9d28:	002a      	movs	r2, r5
    9d2a:	0033      	movs	r3, r6
    9d2c:	4c6f      	ldr	r4, [pc, #444]	; (9eec <cal_write_report+0x644>)
    9d2e:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    9d30:	23cc      	movs	r3, #204	; 0xcc
    9d32:	009b      	lsls	r3, r3, #2
    9d34:	2220      	movs	r2, #32
    9d36:	4694      	mov	ip, r2
    9d38:	2208      	movs	r2, #8
    9d3a:	4690      	mov	r8, r2
    9d3c:	2208      	movs	r2, #8
    9d3e:	4691      	mov	r9, r2
    9d40:	44b9      	add	r9, r7
    9d42:	44c8      	add	r8, r9
    9d44:	44c4      	add	ip, r8
    9d46:	4463      	add	r3, ip
    9d48:	0018      	movs	r0, r3
    9d4a:	4b69      	ldr	r3, [pc, #420]	; (9ef0 <cal_write_report+0x648>)
    9d4c:	4798      	blx	r3
    9d4e:	0002      	movs	r2, r0
    9d50:	4b68      	ldr	r3, [pc, #416]	; (9ef4 <cal_write_report+0x64c>)
    9d52:	2120      	movs	r1, #32
    9d54:	2008      	movs	r0, #8
    9d56:	4684      	mov	ip, r0
    9d58:	2008      	movs	r0, #8
    9d5a:	4680      	mov	r8, r0
    9d5c:	44b8      	add	r8, r7
    9d5e:	44c4      	add	ip, r8
    9d60:	4461      	add	r1, ip
    9d62:	18cc      	adds	r4, r1, r3
    9d64:	23d5      	movs	r3, #213	; 0xd5
    9d66:	00db      	lsls	r3, r3, #3
    9d68:	2120      	movs	r1, #32
    9d6a:	468c      	mov	ip, r1
    9d6c:	2108      	movs	r1, #8
    9d6e:	4688      	mov	r8, r1
    9d70:	2108      	movs	r1, #8
    9d72:	4689      	mov	r9, r1
    9d74:	44b9      	add	r9, r7
    9d76:	44c8      	add	r8, r9
    9d78:	44c4      	add	ip, r8
    9d7a:	4463      	add	r3, ip
    9d7c:	681b      	ldr	r3, [r3, #0]
    9d7e:	21cc      	movs	r1, #204	; 0xcc
    9d80:	0089      	lsls	r1, r1, #2
    9d82:	2020      	movs	r0, #32
    9d84:	4684      	mov	ip, r0
    9d86:	2008      	movs	r0, #8
    9d88:	4680      	mov	r8, r0
    9d8a:	2008      	movs	r0, #8
    9d8c:	4681      	mov	r9, r0
    9d8e:	44b9      	add	r9, r7
    9d90:	44c8      	add	r8, r9
    9d92:	44c4      	add	ip, r8
    9d94:	4461      	add	r1, ip
    9d96:	4858      	ldr	r0, [pc, #352]	; (9ef8 <cal_write_report+0x650>)
    9d98:	4d58      	ldr	r5, [pc, #352]	; (9efc <cal_write_report+0x654>)
    9d9a:	47a8      	blx	r5
    9d9c:	0003      	movs	r3, r0
    9d9e:	7023      	strb	r3, [r4, #0]
	// Magnitude Error Standard Deviation
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    9da0:	4b50      	ldr	r3, [pc, #320]	; (9ee4 <cal_write_report+0x63c>)
    9da2:	699a      	ldr	r2, [r3, #24]
    9da4:	4b5a      	ldr	r3, [pc, #360]	; (9f10 <cal_write_report+0x668>)
    9da6:	495b      	ldr	r1, [pc, #364]	; (9f14 <cal_write_report+0x66c>)
    9da8:	1c10      	adds	r0, r2, #0
    9daa:	4798      	blx	r3
    9dac:	1c03      	adds	r3, r0, #0
    9dae:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    9db0:	4b53      	ldr	r3, [pc, #332]	; (9f00 <cal_write_report+0x658>)
    9db2:	1c10      	adds	r0, r2, #0
    9db4:	4798      	blx	r3
    9db6:	62b8      	str	r0, [r7, #40]	; 0x28
    9db8:	62f9      	str	r1, [r7, #44]	; 0x2c
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    9dba:	4b4a      	ldr	r3, [pc, #296]	; (9ee4 <cal_write_report+0x63c>)
    9dbc:	69da      	ldr	r2, [r3, #28]
    9dbe:	4b54      	ldr	r3, [pc, #336]	; (9f10 <cal_write_report+0x668>)
    9dc0:	4954      	ldr	r1, [pc, #336]	; (9f14 <cal_write_report+0x66c>)
    9dc2:	1c10      	adds	r0, r2, #0
    9dc4:	4798      	blx	r3
    9dc6:	1c03      	adds	r3, r0, #0
    9dc8:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    9dca:	4b4d      	ldr	r3, [pc, #308]	; (9f00 <cal_write_report+0x658>)
    9dcc:	1c10      	adds	r0, r2, #0
    9dce:	4798      	blx	r3
    9dd0:	0004      	movs	r4, r0
    9dd2:	000d      	movs	r5, r1
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    9dd4:	4b43      	ldr	r3, [pc, #268]	; (9ee4 <cal_write_report+0x63c>)
    9dd6:	6a1a      	ldr	r2, [r3, #32]
    9dd8:	4b4d      	ldr	r3, [pc, #308]	; (9f10 <cal_write_report+0x668>)
    9dda:	494e      	ldr	r1, [pc, #312]	; (9f14 <cal_write_report+0x66c>)
    9ddc:	1c10      	adds	r0, r2, #0
    9dde:	4798      	blx	r3
    9de0:	1c03      	adds	r3, r0, #0
    9de2:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    9de4:	4b46      	ldr	r3, [pc, #280]	; (9f00 <cal_write_report+0x658>)
    9de6:	1c10      	adds	r0, r2, #0
    9de8:	4798      	blx	r3
    9dea:	6238      	str	r0, [r7, #32]
    9dec:	6279      	str	r1, [r7, #36]	; 0x24
				cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100,cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
    9dee:	4b3d      	ldr	r3, [pc, #244]	; (9ee4 <cal_write_report+0x63c>)
    9df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9df2:	4b47      	ldr	r3, [pc, #284]	; (9f10 <cal_write_report+0x668>)
    9df4:	4947      	ldr	r1, [pc, #284]	; (9f14 <cal_write_report+0x66c>)
    9df6:	1c10      	adds	r0, r2, #0
    9df8:	4798      	blx	r3
    9dfa:	1c03      	adds	r3, r0, #0
    9dfc:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    9dfe:	4b40      	ldr	r3, [pc, #256]	; (9f00 <cal_write_report+0x658>)
    9e00:	1c10      	adds	r0, r2, #0
    9e02:	4798      	blx	r3
    9e04:	6038      	str	r0, [r7, #0]
    9e06:	6079      	str	r1, [r7, #4]
    9e08:	4943      	ldr	r1, [pc, #268]	; (9f18 <cal_write_report+0x670>)
    9e0a:	26cc      	movs	r6, #204	; 0xcc
    9e0c:	00b6      	lsls	r6, r6, #2
    9e0e:	2020      	movs	r0, #32
    9e10:	2308      	movs	r3, #8
    9e12:	469c      	mov	ip, r3
    9e14:	2308      	movs	r3, #8
    9e16:	4698      	mov	r8, r3
    9e18:	44b8      	add	r8, r7
    9e1a:	44c4      	add	ip, r8
    9e1c:	4460      	add	r0, ip
    9e1e:	1980      	adds	r0, r0, r6
    9e20:	683a      	ldr	r2, [r7, #0]
    9e22:	687b      	ldr	r3, [r7, #4]
    9e24:	9204      	str	r2, [sp, #16]
    9e26:	9305      	str	r3, [sp, #20]
    9e28:	6a3a      	ldr	r2, [r7, #32]
    9e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9e2c:	9202      	str	r2, [sp, #8]
    9e2e:	9303      	str	r3, [sp, #12]
    9e30:	9400      	str	r4, [sp, #0]
    9e32:	9501      	str	r5, [sp, #4]
    9e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9e38:	4c2c      	ldr	r4, [pc, #176]	; (9eec <cal_write_report+0x644>)
    9e3a:	47a0      	blx	r4
	// Axis Disparity
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    9e3c:	23cc      	movs	r3, #204	; 0xcc
    9e3e:	009b      	lsls	r3, r3, #2
    9e40:	2220      	movs	r2, #32
    9e42:	4694      	mov	ip, r2
    9e44:	2208      	movs	r2, #8
    9e46:	4690      	mov	r8, r2
    9e48:	2208      	movs	r2, #8
    9e4a:	4691      	mov	r9, r2
    9e4c:	44b9      	add	r9, r7
    9e4e:	44c8      	add	r8, r9
    9e50:	44c4      	add	ip, r8
    9e52:	4463      	add	r3, ip
    9e54:	0018      	movs	r0, r3
    9e56:	4b26      	ldr	r3, [pc, #152]	; (9ef0 <cal_write_report+0x648>)
    9e58:	4798      	blx	r3
    9e5a:	0002      	movs	r2, r0
    9e5c:	4b25      	ldr	r3, [pc, #148]	; (9ef4 <cal_write_report+0x64c>)
    9e5e:	2120      	movs	r1, #32
    9e60:	2008      	movs	r0, #8
    9e62:	4684      	mov	ip, r0
    9e64:	2008      	movs	r0, #8
    9e66:	4680      	mov	r8, r0
    9e68:	44b8      	add	r8, r7
    9e6a:	44c4      	add	ip, r8
    9e6c:	4461      	add	r1, ip
    9e6e:	18cc      	adds	r4, r1, r3
    9e70:	23d5      	movs	r3, #213	; 0xd5
    9e72:	00db      	lsls	r3, r3, #3
    9e74:	2120      	movs	r1, #32
    9e76:	468c      	mov	ip, r1
    9e78:	2108      	movs	r1, #8
    9e7a:	4688      	mov	r8, r1
    9e7c:	2108      	movs	r1, #8
    9e7e:	4689      	mov	r9, r1
    9e80:	44b9      	add	r9, r7
    9e82:	44c8      	add	r8, r9
    9e84:	44c4      	add	ip, r8
    9e86:	4463      	add	r3, ip
    9e88:	681b      	ldr	r3, [r3, #0]
    9e8a:	21cc      	movs	r1, #204	; 0xcc
    9e8c:	0089      	lsls	r1, r1, #2
    9e8e:	2020      	movs	r0, #32
    9e90:	4684      	mov	ip, r0
    9e92:	2008      	movs	r0, #8
    9e94:	4680      	mov	r8, r0
    9e96:	2008      	movs	r0, #8
    9e98:	4681      	mov	r9, r0
    9e9a:	44b9      	add	r9, r7
    9e9c:	44c8      	add	r8, r9
    9e9e:	44c4      	add	ip, r8
    9ea0:	4461      	add	r1, ip
    9ea2:	4815      	ldr	r0, [pc, #84]	; (9ef8 <cal_write_report+0x650>)
    9ea4:	4d15      	ldr	r5, [pc, #84]	; (9efc <cal_write_report+0x654>)
    9ea6:	47a8      	blx	r5
    9ea8:	0003      	movs	r3, r0
    9eaa:	7023      	strb	r3, [r4, #0]
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
		cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100,cal_report_azm_inc.disp_stdev_acc[2]*100);
    9eac:	4b0d      	ldr	r3, [pc, #52]	; (9ee4 <cal_write_report+0x63c>)
    9eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9eb0:	4b17      	ldr	r3, [pc, #92]	; (9f10 <cal_write_report+0x668>)
    9eb2:	4918      	ldr	r1, [pc, #96]	; (9f14 <cal_write_report+0x66c>)
    9eb4:	1c10      	adds	r0, r2, #0
    9eb6:	4798      	blx	r3
    9eb8:	1c03      	adds	r3, r0, #0
    9eba:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    9ebc:	4b10      	ldr	r3, [pc, #64]	; (9f00 <cal_write_report+0x658>)
    9ebe:	1c10      	adds	r0, r2, #0
    9ec0:	4798      	blx	r3
    9ec2:	62b8      	str	r0, [r7, #40]	; 0x28
    9ec4:	62f9      	str	r1, [r7, #44]	; 0x2c
		cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100,cal_report_azm_inc.disp_stdev_acc[2]*100);
    9ec6:	4b07      	ldr	r3, [pc, #28]	; (9ee4 <cal_write_report+0x63c>)
    9ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9eca:	4b11      	ldr	r3, [pc, #68]	; (9f10 <cal_write_report+0x668>)
    9ecc:	4911      	ldr	r1, [pc, #68]	; (9f14 <cal_write_report+0x66c>)
    9ece:	1c10      	adds	r0, r2, #0
    9ed0:	4798      	blx	r3
    9ed2:	1c03      	adds	r3, r0, #0
    9ed4:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    9ed6:	4b0a      	ldr	r3, [pc, #40]	; (9f00 <cal_write_report+0x658>)
    9ed8:	1c10      	adds	r0, r2, #0
    9eda:	4798      	blx	r3
    9edc:	0004      	movs	r4, r0
    9ede:	000d      	movs	r5, r1
    9ee0:	e01c      	b.n	9f1c <cal_write_report+0x674>
    9ee2:	46c0      	nop			; (mov r8, r8)
    9ee4:	20001e48 	.word	0x20001e48
    9ee8:	00028120 	.word	0x00028120
    9eec:	00023d31 	.word	0x00023d31
    9ef0:	00023dd1 	.word	0x00023dd1
    9ef4:	000006b3 	.word	0x000006b3
    9ef8:	20002b8c 	.word	0x20002b8c
    9efc:	000141e9 	.word	0x000141e9
    9f00:	00023a0d 	.word	0x00023a0d
    9f04:	00028180 	.word	0x00028180
    9f08:	0002819c 	.word	0x0002819c
    9f0c:	000281c8 	.word	0x000281c8
    9f10:	000217d9 	.word	0x000217d9
    9f14:	42c80000 	.word	0x42c80000
    9f18:	00028224 	.word	0x00028224
		cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100,cal_report_azm_inc.disp_stdev_acc[2]*100);
    9f1c:	4bac      	ldr	r3, [pc, #688]	; (a1d0 <cal_write_report+0x928>)
    9f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9f20:	4bac      	ldr	r3, [pc, #688]	; (a1d4 <cal_write_report+0x92c>)
    9f22:	49ad      	ldr	r1, [pc, #692]	; (a1d8 <cal_write_report+0x930>)
    9f24:	1c10      	adds	r0, r2, #0
    9f26:	4798      	blx	r3
    9f28:	1c03      	adds	r3, r0, #0
    9f2a:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    9f2c:	4bab      	ldr	r3, [pc, #684]	; (a1dc <cal_write_report+0x934>)
    9f2e:	1c10      	adds	r0, r2, #0
    9f30:	4798      	blx	r3
    9f32:	6038      	str	r0, [r7, #0]
    9f34:	6079      	str	r1, [r7, #4]
    9f36:	49aa      	ldr	r1, [pc, #680]	; (a1e0 <cal_write_report+0x938>)
    9f38:	26cc      	movs	r6, #204	; 0xcc
    9f3a:	00b6      	lsls	r6, r6, #2
    9f3c:	2020      	movs	r0, #32
    9f3e:	2308      	movs	r3, #8
    9f40:	469c      	mov	ip, r3
    9f42:	2308      	movs	r3, #8
    9f44:	4698      	mov	r8, r3
    9f46:	44b8      	add	r8, r7
    9f48:	44c4      	add	ip, r8
    9f4a:	4460      	add	r0, ip
    9f4c:	1980      	adds	r0, r0, r6
    9f4e:	683a      	ldr	r2, [r7, #0]
    9f50:	687b      	ldr	r3, [r7, #4]
    9f52:	9202      	str	r2, [sp, #8]
    9f54:	9303      	str	r3, [sp, #12]
    9f56:	9400      	str	r4, [sp, #0]
    9f58:	9501      	str	r5, [sp, #4]
    9f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f5e:	4ca1      	ldr	r4, [pc, #644]	; (a1e4 <cal_write_report+0x93c>)
    9f60:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);	
    9f62:	23cc      	movs	r3, #204	; 0xcc
    9f64:	009b      	lsls	r3, r3, #2
    9f66:	2220      	movs	r2, #32
    9f68:	4694      	mov	ip, r2
    9f6a:	2208      	movs	r2, #8
    9f6c:	4690      	mov	r8, r2
    9f6e:	2208      	movs	r2, #8
    9f70:	4691      	mov	r9, r2
    9f72:	44b9      	add	r9, r7
    9f74:	44c8      	add	r8, r9
    9f76:	44c4      	add	ip, r8
    9f78:	4463      	add	r3, ip
    9f7a:	0018      	movs	r0, r3
    9f7c:	4b9a      	ldr	r3, [pc, #616]	; (a1e8 <cal_write_report+0x940>)
    9f7e:	4798      	blx	r3
    9f80:	0002      	movs	r2, r0
    9f82:	4b9a      	ldr	r3, [pc, #616]	; (a1ec <cal_write_report+0x944>)
    9f84:	2120      	movs	r1, #32
    9f86:	2008      	movs	r0, #8
    9f88:	4684      	mov	ip, r0
    9f8a:	2008      	movs	r0, #8
    9f8c:	4680      	mov	r8, r0
    9f8e:	44b8      	add	r8, r7
    9f90:	44c4      	add	ip, r8
    9f92:	4461      	add	r1, ip
    9f94:	18cc      	adds	r4, r1, r3
    9f96:	23d5      	movs	r3, #213	; 0xd5
    9f98:	00db      	lsls	r3, r3, #3
    9f9a:	2120      	movs	r1, #32
    9f9c:	468c      	mov	ip, r1
    9f9e:	2108      	movs	r1, #8
    9fa0:	4688      	mov	r8, r1
    9fa2:	2108      	movs	r1, #8
    9fa4:	4689      	mov	r9, r1
    9fa6:	44b9      	add	r9, r7
    9fa8:	44c8      	add	r8, r9
    9faa:	44c4      	add	ip, r8
    9fac:	4463      	add	r3, ip
    9fae:	681b      	ldr	r3, [r3, #0]
    9fb0:	21cc      	movs	r1, #204	; 0xcc
    9fb2:	0089      	lsls	r1, r1, #2
    9fb4:	2020      	movs	r0, #32
    9fb6:	4684      	mov	ip, r0
    9fb8:	2008      	movs	r0, #8
    9fba:	4680      	mov	r8, r0
    9fbc:	2008      	movs	r0, #8
    9fbe:	4681      	mov	r9, r0
    9fc0:	44b9      	add	r9, r7
    9fc2:	44c8      	add	r8, r9
    9fc4:	44c4      	add	ip, r8
    9fc6:	4461      	add	r1, ip
    9fc8:	4889      	ldr	r0, [pc, #548]	; (a1f0 <cal_write_report+0x948>)
    9fca:	4d8a      	ldr	r5, [pc, #552]	; (a1f4 <cal_write_report+0x94c>)
    9fcc:	47a8      	blx	r5
    9fce:	0003      	movs	r3, r0
    9fd0:	7023      	strb	r3, [r4, #0]
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
		cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100,cal_report_azm_inc.disp_stdev_comp[2]*100);
    9fd2:	4b7f      	ldr	r3, [pc, #508]	; (a1d0 <cal_write_report+0x928>)
    9fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9fd6:	4b7f      	ldr	r3, [pc, #508]	; (a1d4 <cal_write_report+0x92c>)
    9fd8:	497f      	ldr	r1, [pc, #508]	; (a1d8 <cal_write_report+0x930>)
    9fda:	1c10      	adds	r0, r2, #0
    9fdc:	4798      	blx	r3
    9fde:	1c03      	adds	r3, r0, #0
    9fe0:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    9fe2:	4b7e      	ldr	r3, [pc, #504]	; (a1dc <cal_write_report+0x934>)
    9fe4:	1c10      	adds	r0, r2, #0
    9fe6:	4798      	blx	r3
    9fe8:	62b8      	str	r0, [r7, #40]	; 0x28
    9fea:	62f9      	str	r1, [r7, #44]	; 0x2c
		cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100,cal_report_azm_inc.disp_stdev_comp[2]*100);
    9fec:	4b78      	ldr	r3, [pc, #480]	; (a1d0 <cal_write_report+0x928>)
    9fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    9ff0:	4b78      	ldr	r3, [pc, #480]	; (a1d4 <cal_write_report+0x92c>)
    9ff2:	4979      	ldr	r1, [pc, #484]	; (a1d8 <cal_write_report+0x930>)
    9ff4:	1c10      	adds	r0, r2, #0
    9ff6:	4798      	blx	r3
    9ff8:	1c03      	adds	r3, r0, #0
    9ffa:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    9ffc:	4b77      	ldr	r3, [pc, #476]	; (a1dc <cal_write_report+0x934>)
    9ffe:	1c10      	adds	r0, r2, #0
    a000:	4798      	blx	r3
    a002:	0004      	movs	r4, r0
    a004:	000d      	movs	r5, r1
		cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100,cal_report_azm_inc.disp_stdev_comp[2]*100);
    a006:	4b72      	ldr	r3, [pc, #456]	; (a1d0 <cal_write_report+0x928>)
    a008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    a00a:	4b72      	ldr	r3, [pc, #456]	; (a1d4 <cal_write_report+0x92c>)
    a00c:	4972      	ldr	r1, [pc, #456]	; (a1d8 <cal_write_report+0x930>)
    a00e:	1c10      	adds	r0, r2, #0
    a010:	4798      	blx	r3
    a012:	1c03      	adds	r3, r0, #0
    a014:	1c1a      	adds	r2, r3, #0
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    a016:	4b71      	ldr	r3, [pc, #452]	; (a1dc <cal_write_report+0x934>)
    a018:	1c10      	adds	r0, r2, #0
    a01a:	4798      	blx	r3
    a01c:	6038      	str	r0, [r7, #0]
    a01e:	6079      	str	r1, [r7, #4]
    a020:	4975      	ldr	r1, [pc, #468]	; (a1f8 <cal_write_report+0x950>)
    a022:	26cc      	movs	r6, #204	; 0xcc
    a024:	00b6      	lsls	r6, r6, #2
    a026:	2020      	movs	r0, #32
    a028:	2308      	movs	r3, #8
    a02a:	469c      	mov	ip, r3
    a02c:	2308      	movs	r3, #8
    a02e:	4698      	mov	r8, r3
    a030:	44b8      	add	r8, r7
    a032:	44c4      	add	ip, r8
    a034:	4460      	add	r0, ip
    a036:	1980      	adds	r0, r0, r6
    a038:	683a      	ldr	r2, [r7, #0]
    a03a:	687b      	ldr	r3, [r7, #4]
    a03c:	9202      	str	r2, [sp, #8]
    a03e:	9303      	str	r3, [sp, #12]
    a040:	9400      	str	r4, [sp, #0]
    a042:	9501      	str	r5, [sp, #4]
    a044:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a048:	4c66      	ldr	r4, [pc, #408]	; (a1e4 <cal_write_report+0x93c>)
    a04a:	47a0      	blx	r4
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    a04c:	23cc      	movs	r3, #204	; 0xcc
    a04e:	009b      	lsls	r3, r3, #2
    a050:	2220      	movs	r2, #32
    a052:	4694      	mov	ip, r2
    a054:	2208      	movs	r2, #8
    a056:	4690      	mov	r8, r2
    a058:	2208      	movs	r2, #8
    a05a:	4691      	mov	r9, r2
    a05c:	44b9      	add	r9, r7
    a05e:	44c8      	add	r8, r9
    a060:	44c4      	add	ip, r8
    a062:	4463      	add	r3, ip
    a064:	0018      	movs	r0, r3
    a066:	4b60      	ldr	r3, [pc, #384]	; (a1e8 <cal_write_report+0x940>)
    a068:	4798      	blx	r3
    a06a:	0002      	movs	r2, r0
    a06c:	4b5f      	ldr	r3, [pc, #380]	; (a1ec <cal_write_report+0x944>)
    a06e:	2120      	movs	r1, #32
    a070:	2008      	movs	r0, #8
    a072:	4684      	mov	ip, r0
    a074:	2008      	movs	r0, #8
    a076:	4680      	mov	r8, r0
    a078:	44b8      	add	r8, r7
    a07a:	44c4      	add	ip, r8
    a07c:	4461      	add	r1, ip
    a07e:	18cc      	adds	r4, r1, r3
    a080:	23d5      	movs	r3, #213	; 0xd5
    a082:	00db      	lsls	r3, r3, #3
    a084:	2120      	movs	r1, #32
    a086:	468c      	mov	ip, r1
    a088:	2108      	movs	r1, #8
    a08a:	4688      	mov	r8, r1
    a08c:	2108      	movs	r1, #8
    a08e:	4689      	mov	r9, r1
    a090:	44b9      	add	r9, r7
    a092:	44c8      	add	r8, r9
    a094:	44c4      	add	ip, r8
    a096:	4463      	add	r3, ip
    a098:	681b      	ldr	r3, [r3, #0]
    a09a:	21cc      	movs	r1, #204	; 0xcc
    a09c:	0089      	lsls	r1, r1, #2
    a09e:	2020      	movs	r0, #32
    a0a0:	4684      	mov	ip, r0
    a0a2:	2008      	movs	r0, #8
    a0a4:	4680      	mov	r8, r0
    a0a6:	2008      	movs	r0, #8
    a0a8:	4681      	mov	r9, r0
    a0aa:	44b9      	add	r9, r7
    a0ac:	44c8      	add	r8, r9
    a0ae:	44c4      	add	ip, r8
    a0b0:	4461      	add	r1, ip
    a0b2:	484f      	ldr	r0, [pc, #316]	; (a1f0 <cal_write_report+0x948>)
    a0b4:	4d4f      	ldr	r5, [pc, #316]	; (a1f4 <cal_write_report+0x94c>)
    a0b6:	47a8      	blx	r5
    a0b8:	0003      	movs	r3, r0
    a0ba:	7023      	strb	r3, [r4, #0]

	
	//  Write Calibration Values
	for (i=0;i<4;i++){
    a0bc:	2300      	movs	r3, #0
    a0be:	4a4f      	ldr	r2, [pc, #316]	; (a1fc <cal_write_report+0x954>)
    a0c0:	2120      	movs	r1, #32
    a0c2:	468c      	mov	ip, r1
    a0c4:	2108      	movs	r1, #8
    a0c6:	4688      	mov	r8, r1
    a0c8:	2108      	movs	r1, #8
    a0ca:	4689      	mov	r9, r1
    a0cc:	44b9      	add	r9, r7
    a0ce:	44c8      	add	r8, r9
    a0d0:	44c4      	add	ip, r8
    a0d2:	4462      	add	r2, ip
    a0d4:	6013      	str	r3, [r2, #0]
    a0d6:	e2d9      	b.n	a68c <cal_write_report+0xde4>
		switch(i){
    a0d8:	4b48      	ldr	r3, [pc, #288]	; (a1fc <cal_write_report+0x954>)
    a0da:	2220      	movs	r2, #32
    a0dc:	4694      	mov	ip, r2
    a0de:	2208      	movs	r2, #8
    a0e0:	4690      	mov	r8, r2
    a0e2:	2208      	movs	r2, #8
    a0e4:	4691      	mov	r9, r2
    a0e6:	44b9      	add	r9, r7
    a0e8:	44c8      	add	r8, r9
    a0ea:	44c4      	add	ip, r8
    a0ec:	4463      	add	r3, ip
    a0ee:	681b      	ldr	r3, [r3, #0]
    a0f0:	2b01      	cmp	r3, #1
    a0f2:	d029      	beq.n	a148 <cal_write_report+0x8a0>
    a0f4:	d305      	bcc.n	a102 <cal_write_report+0x85a>
    a0f6:	2b02      	cmp	r3, #2
    a0f8:	d049      	beq.n	a18e <cal_write_report+0x8e6>
    a0fa:	2b03      	cmp	r3, #3
    a0fc:	d100      	bne.n	a100 <cal_write_report+0x858>
    a0fe:	e08d      	b.n	a21c <cal_write_report+0x974>
    a100:	e0ad      	b.n	a25e <cal_write_report+0x9b6>
			case 0:
				pcal_struct = &a1_calst;
    a102:	4b3f      	ldr	r3, [pc, #252]	; (a200 <cal_write_report+0x958>)
    a104:	4a3f      	ldr	r2, [pc, #252]	; (a204 <cal_write_report+0x95c>)
    a106:	2120      	movs	r1, #32
    a108:	468c      	mov	ip, r1
    a10a:	2108      	movs	r1, #8
    a10c:	4688      	mov	r8, r1
    a10e:	2108      	movs	r1, #8
    a110:	4689      	mov	r9, r1
    a112:	44b9      	add	r9, r7
    a114:	44c8      	add	r8, r9
    a116:	44c4      	add	ip, r8
    a118:	4462      	add	r2, ip
    a11a:	6013      	str	r3, [r2, #0]
				sprintf(write_str1,"Inclinometer 1 Calibration:\r\n");
    a11c:	23cc      	movs	r3, #204	; 0xcc
    a11e:	009b      	lsls	r3, r3, #2
    a120:	2220      	movs	r2, #32
    a122:	4694      	mov	ip, r2
    a124:	2208      	movs	r2, #8
    a126:	4690      	mov	r8, r2
    a128:	2208      	movs	r2, #8
    a12a:	4691      	mov	r9, r2
    a12c:	44b9      	add	r9, r7
    a12e:	44c8      	add	r8, r9
    a130:	44c4      	add	ip, r8
    a132:	4463      	add	r3, ip
    a134:	4a34      	ldr	r2, [pc, #208]	; (a208 <cal_write_report+0x960>)
    a136:	ca13      	ldmia	r2!, {r0, r1, r4}
    a138:	c313      	stmia	r3!, {r0, r1, r4}
    a13a:	ca13      	ldmia	r2!, {r0, r1, r4}
    a13c:	c313      	stmia	r3!, {r0, r1, r4}
    a13e:	6811      	ldr	r1, [r2, #0]
    a140:	6019      	str	r1, [r3, #0]
    a142:	8892      	ldrh	r2, [r2, #4]
    a144:	809a      	strh	r2, [r3, #4]
				break;
    a146:	e08a      	b.n	a25e <cal_write_report+0x9b6>
			case 1:
				pcal_struct = &a2_calst;
    a148:	4b30      	ldr	r3, [pc, #192]	; (a20c <cal_write_report+0x964>)
    a14a:	4a2e      	ldr	r2, [pc, #184]	; (a204 <cal_write_report+0x95c>)
    a14c:	2120      	movs	r1, #32
    a14e:	468c      	mov	ip, r1
    a150:	2108      	movs	r1, #8
    a152:	4688      	mov	r8, r1
    a154:	2108      	movs	r1, #8
    a156:	4689      	mov	r9, r1
    a158:	44b9      	add	r9, r7
    a15a:	44c8      	add	r8, r9
    a15c:	44c4      	add	ip, r8
    a15e:	4462      	add	r2, ip
    a160:	6013      	str	r3, [r2, #0]
				sprintf(write_str1,"Inclinometer 2 Calibration:\r\n");
    a162:	23cc      	movs	r3, #204	; 0xcc
    a164:	009b      	lsls	r3, r3, #2
    a166:	2220      	movs	r2, #32
    a168:	4694      	mov	ip, r2
    a16a:	2208      	movs	r2, #8
    a16c:	4690      	mov	r8, r2
    a16e:	2208      	movs	r2, #8
    a170:	4691      	mov	r9, r2
    a172:	44b9      	add	r9, r7
    a174:	44c8      	add	r8, r9
    a176:	44c4      	add	ip, r8
    a178:	4463      	add	r3, ip
    a17a:	4a25      	ldr	r2, [pc, #148]	; (a210 <cal_write_report+0x968>)
    a17c:	ca13      	ldmia	r2!, {r0, r1, r4}
    a17e:	c313      	stmia	r3!, {r0, r1, r4}
    a180:	ca13      	ldmia	r2!, {r0, r1, r4}
    a182:	c313      	stmia	r3!, {r0, r1, r4}
    a184:	6811      	ldr	r1, [r2, #0]
    a186:	6019      	str	r1, [r3, #0]
    a188:	8892      	ldrh	r2, [r2, #4]
    a18a:	809a      	strh	r2, [r3, #4]
				break;
    a18c:	e067      	b.n	a25e <cal_write_report+0x9b6>
			case 2:
				pcal_struct = &c1_calst;
    a18e:	4b21      	ldr	r3, [pc, #132]	; (a214 <cal_write_report+0x96c>)
    a190:	4a1c      	ldr	r2, [pc, #112]	; (a204 <cal_write_report+0x95c>)
    a192:	2120      	movs	r1, #32
    a194:	468c      	mov	ip, r1
    a196:	2108      	movs	r1, #8
    a198:	4688      	mov	r8, r1
    a19a:	2108      	movs	r1, #8
    a19c:	4689      	mov	r9, r1
    a19e:	44b9      	add	r9, r7
    a1a0:	44c8      	add	r8, r9
    a1a2:	44c4      	add	ip, r8
    a1a4:	4462      	add	r2, ip
    a1a6:	6013      	str	r3, [r2, #0]
				sprintf(write_str1,"Compass 1 Calibration:\r\n");
    a1a8:	23cc      	movs	r3, #204	; 0xcc
    a1aa:	009b      	lsls	r3, r3, #2
    a1ac:	2220      	movs	r2, #32
    a1ae:	4694      	mov	ip, r2
    a1b0:	2208      	movs	r2, #8
    a1b2:	4690      	mov	r8, r2
    a1b4:	2208      	movs	r2, #8
    a1b6:	4691      	mov	r9, r2
    a1b8:	44b9      	add	r9, r7
    a1ba:	44c8      	add	r8, r9
    a1bc:	44c4      	add	ip, r8
    a1be:	4463      	add	r3, ip
    a1c0:	4a15      	ldr	r2, [pc, #84]	; (a218 <cal_write_report+0x970>)
    a1c2:	ca13      	ldmia	r2!, {r0, r1, r4}
    a1c4:	c313      	stmia	r3!, {r0, r1, r4}
    a1c6:	ca13      	ldmia	r2!, {r0, r1, r4}
    a1c8:	c313      	stmia	r3!, {r0, r1, r4}
    a1ca:	7812      	ldrb	r2, [r2, #0]
    a1cc:	701a      	strb	r2, [r3, #0]
				break;
    a1ce:	e046      	b.n	a25e <cal_write_report+0x9b6>
    a1d0:	20001e48 	.word	0x20001e48
    a1d4:	000217d9 	.word	0x000217d9
    a1d8:	42c80000 	.word	0x42c80000
    a1dc:	00023a0d 	.word	0x00023a0d
    a1e0:	000282b4 	.word	0x000282b4
    a1e4:	00023d31 	.word	0x00023d31
    a1e8:	00023dd1 	.word	0x00023dd1
    a1ec:	000006b3 	.word	0x000006b3
    a1f0:	20002b8c 	.word	0x20002b8c
    a1f4:	000141e9 	.word	0x000141e9
    a1f8:	000282f8 	.word	0x000282f8
    a1fc:	000006bc 	.word	0x000006bc
    a200:	20004f38 	.word	0x20004f38
    a204:	000006ac 	.word	0x000006ac
    a208:	00028328 	.word	0x00028328
    a20c:	20004b14 	.word	0x20004b14
    a210:	00028348 	.word	0x00028348
    a214:	20003434 	.word	0x20003434
    a218:	00028368 	.word	0x00028368
			case 3:
				pcal_struct = &c2_calst;
    a21c:	4bf9      	ldr	r3, [pc, #996]	; (a604 <cal_write_report+0xd5c>)
    a21e:	4afa      	ldr	r2, [pc, #1000]	; (a608 <cal_write_report+0xd60>)
    a220:	2120      	movs	r1, #32
    a222:	468c      	mov	ip, r1
    a224:	2108      	movs	r1, #8
    a226:	4688      	mov	r8, r1
    a228:	2108      	movs	r1, #8
    a22a:	4689      	mov	r9, r1
    a22c:	44b9      	add	r9, r7
    a22e:	44c8      	add	r8, r9
    a230:	44c4      	add	ip, r8
    a232:	4462      	add	r2, ip
    a234:	6013      	str	r3, [r2, #0]
				sprintf(write_str1,"Compass 2 Calibration:\r\n");
    a236:	23cc      	movs	r3, #204	; 0xcc
    a238:	009b      	lsls	r3, r3, #2
    a23a:	2220      	movs	r2, #32
    a23c:	4694      	mov	ip, r2
    a23e:	2208      	movs	r2, #8
    a240:	4690      	mov	r8, r2
    a242:	2208      	movs	r2, #8
    a244:	4691      	mov	r9, r2
    a246:	44b9      	add	r9, r7
    a248:	44c8      	add	r8, r9
    a24a:	44c4      	add	ip, r8
    a24c:	4463      	add	r3, ip
    a24e:	4aef      	ldr	r2, [pc, #956]	; (a60c <cal_write_report+0xd64>)
    a250:	ca13      	ldmia	r2!, {r0, r1, r4}
    a252:	c313      	stmia	r3!, {r0, r1, r4}
    a254:	ca13      	ldmia	r2!, {r0, r1, r4}
    a256:	c313      	stmia	r3!, {r0, r1, r4}
    a258:	7812      	ldrb	r2, [r2, #0]
    a25a:	701a      	strb	r2, [r3, #0]
				break;
    a25c:	46c0      	nop			; (mov r8, r8)
		}
		sprintf(write_str2,"  Gain X: %.6f\r\n  Gain Y: %.6f\r\n  GainZ: %.6f\r\n", pcal_struct->gain[0], pcal_struct->gain[1], pcal_struct->gain[2]);
    a25e:	4bea      	ldr	r3, [pc, #936]	; (a608 <cal_write_report+0xd60>)
    a260:	2220      	movs	r2, #32
    a262:	4694      	mov	ip, r2
    a264:	2208      	movs	r2, #8
    a266:	4690      	mov	r8, r2
    a268:	2208      	movs	r2, #8
    a26a:	4691      	mov	r9, r2
    a26c:	44b9      	add	r9, r7
    a26e:	44c8      	add	r8, r9
    a270:	44c4      	add	ip, r8
    a272:	4463      	add	r3, ip
    a274:	681b      	ldr	r3, [r3, #0]
    a276:	691a      	ldr	r2, [r3, #16]
    a278:	4be5      	ldr	r3, [pc, #916]	; (a610 <cal_write_report+0xd68>)
    a27a:	1c10      	adds	r0, r2, #0
    a27c:	4798      	blx	r3
    a27e:	62b8      	str	r0, [r7, #40]	; 0x28
    a280:	62f9      	str	r1, [r7, #44]	; 0x2c
    a282:	4be1      	ldr	r3, [pc, #900]	; (a608 <cal_write_report+0xd60>)
    a284:	2220      	movs	r2, #32
    a286:	4694      	mov	ip, r2
    a288:	2208      	movs	r2, #8
    a28a:	4690      	mov	r8, r2
    a28c:	2208      	movs	r2, #8
    a28e:	4691      	mov	r9, r2
    a290:	44b9      	add	r9, r7
    a292:	44c8      	add	r8, r9
    a294:	44c4      	add	ip, r8
    a296:	4463      	add	r3, ip
    a298:	681b      	ldr	r3, [r3, #0]
    a29a:	695a      	ldr	r2, [r3, #20]
    a29c:	4bdc      	ldr	r3, [pc, #880]	; (a610 <cal_write_report+0xd68>)
    a29e:	1c10      	adds	r0, r2, #0
    a2a0:	4798      	blx	r3
    a2a2:	0004      	movs	r4, r0
    a2a4:	000d      	movs	r5, r1
    a2a6:	4bd8      	ldr	r3, [pc, #864]	; (a608 <cal_write_report+0xd60>)
    a2a8:	2220      	movs	r2, #32
    a2aa:	4694      	mov	ip, r2
    a2ac:	2208      	movs	r2, #8
    a2ae:	4690      	mov	r8, r2
    a2b0:	2208      	movs	r2, #8
    a2b2:	4691      	mov	r9, r2
    a2b4:	44b9      	add	r9, r7
    a2b6:	44c8      	add	r8, r9
    a2b8:	44c4      	add	ip, r8
    a2ba:	4463      	add	r3, ip
    a2bc:	681b      	ldr	r3, [r3, #0]
    a2be:	699a      	ldr	r2, [r3, #24]
    a2c0:	4bd3      	ldr	r3, [pc, #844]	; (a610 <cal_write_report+0xd68>)
    a2c2:	1c10      	adds	r0, r2, #0
    a2c4:	4798      	blx	r3
    a2c6:	6038      	str	r0, [r7, #0]
    a2c8:	6079      	str	r1, [r7, #4]
    a2ca:	49d2      	ldr	r1, [pc, #840]	; (a614 <cal_write_report+0xd6c>)
    a2cc:	26d8      	movs	r6, #216	; 0xd8
    a2ce:	2020      	movs	r0, #32
    a2d0:	2308      	movs	r3, #8
    a2d2:	469c      	mov	ip, r3
    a2d4:	2308      	movs	r3, #8
    a2d6:	4698      	mov	r8, r3
    a2d8:	44b8      	add	r8, r7
    a2da:	44c4      	add	ip, r8
    a2dc:	4460      	add	r0, ip
    a2de:	1980      	adds	r0, r0, r6
    a2e0:	683a      	ldr	r2, [r7, #0]
    a2e2:	687b      	ldr	r3, [r7, #4]
    a2e4:	9202      	str	r2, [sp, #8]
    a2e6:	9303      	str	r3, [sp, #12]
    a2e8:	9400      	str	r4, [sp, #0]
    a2ea:	9501      	str	r5, [sp, #4]
    a2ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2f0:	4cc9      	ldr	r4, [pc, #804]	; (a618 <cal_write_report+0xd70>)
    a2f2:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    a2f4:	23d8      	movs	r3, #216	; 0xd8
    a2f6:	2220      	movs	r2, #32
    a2f8:	2108      	movs	r1, #8
    a2fa:	468c      	mov	ip, r1
    a2fc:	2108      	movs	r1, #8
    a2fe:	4688      	mov	r8, r1
    a300:	44b8      	add	r8, r7
    a302:	44c4      	add	ip, r8
    a304:	4462      	add	r2, ip
    a306:	18d2      	adds	r2, r2, r3
    a308:	23cc      	movs	r3, #204	; 0xcc
    a30a:	009b      	lsls	r3, r3, #2
    a30c:	2120      	movs	r1, #32
    a30e:	468c      	mov	ip, r1
    a310:	2108      	movs	r1, #8
    a312:	4688      	mov	r8, r1
    a314:	2108      	movs	r1, #8
    a316:	4689      	mov	r9, r1
    a318:	44b9      	add	r9, r7
    a31a:	44c8      	add	r8, r9
    a31c:	44c4      	add	ip, r8
    a31e:	4463      	add	r3, ip
    a320:	0011      	movs	r1, r2
    a322:	0018      	movs	r0, r3
    a324:	4bbd      	ldr	r3, [pc, #756]	; (a61c <cal_write_report+0xd74>)
    a326:	4798      	blx	r3
		sprintf(write_str2,"  Offset X: %.6f\r\n  Offset Y: %.6f\r\n  Offset Z: %.6f\r\n", pcal_struct->offset[0], pcal_struct->offset[1], pcal_struct->offset[2]);
    a328:	4bb7      	ldr	r3, [pc, #732]	; (a608 <cal_write_report+0xd60>)
    a32a:	2220      	movs	r2, #32
    a32c:	4694      	mov	ip, r2
    a32e:	2208      	movs	r2, #8
    a330:	4690      	mov	r8, r2
    a332:	2208      	movs	r2, #8
    a334:	4691      	mov	r9, r2
    a336:	44b9      	add	r9, r7
    a338:	44c8      	add	r8, r9
    a33a:	44c4      	add	ip, r8
    a33c:	4463      	add	r3, ip
    a33e:	681b      	ldr	r3, [r3, #0]
    a340:	685a      	ldr	r2, [r3, #4]
    a342:	4bb3      	ldr	r3, [pc, #716]	; (a610 <cal_write_report+0xd68>)
    a344:	1c10      	adds	r0, r2, #0
    a346:	4798      	blx	r3
    a348:	62b8      	str	r0, [r7, #40]	; 0x28
    a34a:	62f9      	str	r1, [r7, #44]	; 0x2c
    a34c:	4bae      	ldr	r3, [pc, #696]	; (a608 <cal_write_report+0xd60>)
    a34e:	2220      	movs	r2, #32
    a350:	4694      	mov	ip, r2
    a352:	2208      	movs	r2, #8
    a354:	4690      	mov	r8, r2
    a356:	2208      	movs	r2, #8
    a358:	4691      	mov	r9, r2
    a35a:	44b9      	add	r9, r7
    a35c:	44c8      	add	r8, r9
    a35e:	44c4      	add	ip, r8
    a360:	4463      	add	r3, ip
    a362:	681b      	ldr	r3, [r3, #0]
    a364:	689a      	ldr	r2, [r3, #8]
    a366:	4baa      	ldr	r3, [pc, #680]	; (a610 <cal_write_report+0xd68>)
    a368:	1c10      	adds	r0, r2, #0
    a36a:	4798      	blx	r3
    a36c:	0004      	movs	r4, r0
    a36e:	000d      	movs	r5, r1
    a370:	4ba5      	ldr	r3, [pc, #660]	; (a608 <cal_write_report+0xd60>)
    a372:	2220      	movs	r2, #32
    a374:	4694      	mov	ip, r2
    a376:	2208      	movs	r2, #8
    a378:	4690      	mov	r8, r2
    a37a:	2208      	movs	r2, #8
    a37c:	4691      	mov	r9, r2
    a37e:	44b9      	add	r9, r7
    a380:	44c8      	add	r8, r9
    a382:	44c4      	add	ip, r8
    a384:	4463      	add	r3, ip
    a386:	681b      	ldr	r3, [r3, #0]
    a388:	68da      	ldr	r2, [r3, #12]
    a38a:	4ba1      	ldr	r3, [pc, #644]	; (a610 <cal_write_report+0xd68>)
    a38c:	1c10      	adds	r0, r2, #0
    a38e:	4798      	blx	r3
    a390:	6038      	str	r0, [r7, #0]
    a392:	6079      	str	r1, [r7, #4]
    a394:	49a2      	ldr	r1, [pc, #648]	; (a620 <cal_write_report+0xd78>)
    a396:	26d8      	movs	r6, #216	; 0xd8
    a398:	2020      	movs	r0, #32
    a39a:	2308      	movs	r3, #8
    a39c:	469c      	mov	ip, r3
    a39e:	2308      	movs	r3, #8
    a3a0:	4698      	mov	r8, r3
    a3a2:	44b8      	add	r8, r7
    a3a4:	44c4      	add	ip, r8
    a3a6:	4460      	add	r0, ip
    a3a8:	1980      	adds	r0, r0, r6
    a3aa:	683a      	ldr	r2, [r7, #0]
    a3ac:	687b      	ldr	r3, [r7, #4]
    a3ae:	9202      	str	r2, [sp, #8]
    a3b0:	9303      	str	r3, [sp, #12]
    a3b2:	9400      	str	r4, [sp, #0]
    a3b4:	9501      	str	r5, [sp, #4]
    a3b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a3ba:	4c97      	ldr	r4, [pc, #604]	; (a618 <cal_write_report+0xd70>)
    a3bc:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    a3be:	23d8      	movs	r3, #216	; 0xd8
    a3c0:	2220      	movs	r2, #32
    a3c2:	2108      	movs	r1, #8
    a3c4:	468c      	mov	ip, r1
    a3c6:	2108      	movs	r1, #8
    a3c8:	4688      	mov	r8, r1
    a3ca:	44b8      	add	r8, r7
    a3cc:	44c4      	add	ip, r8
    a3ce:	4462      	add	r2, ip
    a3d0:	18d2      	adds	r2, r2, r3
    a3d2:	23cc      	movs	r3, #204	; 0xcc
    a3d4:	009b      	lsls	r3, r3, #2
    a3d6:	2120      	movs	r1, #32
    a3d8:	468c      	mov	ip, r1
    a3da:	2108      	movs	r1, #8
    a3dc:	4688      	mov	r8, r1
    a3de:	2108      	movs	r1, #8
    a3e0:	4689      	mov	r9, r1
    a3e2:	44b9      	add	r9, r7
    a3e4:	44c8      	add	r8, r9
    a3e6:	44c4      	add	ip, r8
    a3e8:	4463      	add	r3, ip
    a3ea:	0011      	movs	r1, r2
    a3ec:	0018      	movs	r0, r3
    a3ee:	4b8b      	ldr	r3, [pc, #556]	; (a61c <cal_write_report+0xd74>)
    a3f0:	4798      	blx	r3
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
				rad2deg*pcal_struct->axmYX, rad2deg*pcal_struct->axmZX, rad2deg*pcal_struct->axmZY);
    a3f2:	4b85      	ldr	r3, [pc, #532]	; (a608 <cal_write_report+0xd60>)
    a3f4:	2220      	movs	r2, #32
    a3f6:	4694      	mov	ip, r2
    a3f8:	2208      	movs	r2, #8
    a3fa:	4690      	mov	r8, r2
    a3fc:	2208      	movs	r2, #8
    a3fe:	4691      	mov	r9, r2
    a400:	44b9      	add	r9, r7
    a402:	44c8      	add	r8, r9
    a404:	44c4      	add	ip, r8
    a406:	4463      	add	r3, ip
    a408:	681b      	ldr	r3, [r3, #0]
    a40a:	69da      	ldr	r2, [r3, #28]
    a40c:	4b85      	ldr	r3, [pc, #532]	; (a624 <cal_write_report+0xd7c>)
    a40e:	6819      	ldr	r1, [r3, #0]
    a410:	4b85      	ldr	r3, [pc, #532]	; (a628 <cal_write_report+0xd80>)
    a412:	1c10      	adds	r0, r2, #0
    a414:	4798      	blx	r3
    a416:	1c03      	adds	r3, r0, #0
    a418:	1c1a      	adds	r2, r3, #0
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
    a41a:	4b7d      	ldr	r3, [pc, #500]	; (a610 <cal_write_report+0xd68>)
    a41c:	1c10      	adds	r0, r2, #0
    a41e:	4798      	blx	r3
    a420:	62b8      	str	r0, [r7, #40]	; 0x28
    a422:	62f9      	str	r1, [r7, #44]	; 0x2c
				rad2deg*pcal_struct->axmYX, rad2deg*pcal_struct->axmZX, rad2deg*pcal_struct->axmZY);
    a424:	4b78      	ldr	r3, [pc, #480]	; (a608 <cal_write_report+0xd60>)
    a426:	2220      	movs	r2, #32
    a428:	4694      	mov	ip, r2
    a42a:	2208      	movs	r2, #8
    a42c:	4690      	mov	r8, r2
    a42e:	2208      	movs	r2, #8
    a430:	4691      	mov	r9, r2
    a432:	44b9      	add	r9, r7
    a434:	44c8      	add	r8, r9
    a436:	44c4      	add	ip, r8
    a438:	4463      	add	r3, ip
    a43a:	681b      	ldr	r3, [r3, #0]
    a43c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a43e:	4b79      	ldr	r3, [pc, #484]	; (a624 <cal_write_report+0xd7c>)
    a440:	6819      	ldr	r1, [r3, #0]
    a442:	4b79      	ldr	r3, [pc, #484]	; (a628 <cal_write_report+0xd80>)
    a444:	1c10      	adds	r0, r2, #0
    a446:	4798      	blx	r3
    a448:	1c03      	adds	r3, r0, #0
    a44a:	1c1a      	adds	r2, r3, #0
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
    a44c:	4b70      	ldr	r3, [pc, #448]	; (a610 <cal_write_report+0xd68>)
    a44e:	1c10      	adds	r0, r2, #0
    a450:	4798      	blx	r3
    a452:	0004      	movs	r4, r0
    a454:	000d      	movs	r5, r1
				rad2deg*pcal_struct->axmYX, rad2deg*pcal_struct->axmZX, rad2deg*pcal_struct->axmZY);
    a456:	4b6c      	ldr	r3, [pc, #432]	; (a608 <cal_write_report+0xd60>)
    a458:	2220      	movs	r2, #32
    a45a:	4694      	mov	ip, r2
    a45c:	2208      	movs	r2, #8
    a45e:	4690      	mov	r8, r2
    a460:	2208      	movs	r2, #8
    a462:	4691      	mov	r9, r2
    a464:	44b9      	add	r9, r7
    a466:	44c8      	add	r8, r9
    a468:	44c4      	add	ip, r8
    a46a:	4463      	add	r3, ip
    a46c:	681b      	ldr	r3, [r3, #0]
    a46e:	6a1a      	ldr	r2, [r3, #32]
    a470:	4b6c      	ldr	r3, [pc, #432]	; (a624 <cal_write_report+0xd7c>)
    a472:	6819      	ldr	r1, [r3, #0]
    a474:	4b6c      	ldr	r3, [pc, #432]	; (a628 <cal_write_report+0xd80>)
    a476:	1c10      	adds	r0, r2, #0
    a478:	4798      	blx	r3
    a47a:	1c03      	adds	r3, r0, #0
    a47c:	1c1a      	adds	r2, r3, #0
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n", 
    a47e:	4b64      	ldr	r3, [pc, #400]	; (a610 <cal_write_report+0xd68>)
    a480:	1c10      	adds	r0, r2, #0
    a482:	4798      	blx	r3
    a484:	6038      	str	r0, [r7, #0]
    a486:	6079      	str	r1, [r7, #4]
    a488:	4968      	ldr	r1, [pc, #416]	; (a62c <cal_write_report+0xd84>)
    a48a:	26d8      	movs	r6, #216	; 0xd8
    a48c:	2020      	movs	r0, #32
    a48e:	2308      	movs	r3, #8
    a490:	469c      	mov	ip, r3
    a492:	2308      	movs	r3, #8
    a494:	4698      	mov	r8, r3
    a496:	44b8      	add	r8, r7
    a498:	44c4      	add	ip, r8
    a49a:	4460      	add	r0, ip
    a49c:	1980      	adds	r0, r0, r6
    a49e:	683a      	ldr	r2, [r7, #0]
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	9202      	str	r2, [sp, #8]
    a4a4:	9303      	str	r3, [sp, #12]
    a4a6:	9400      	str	r4, [sp, #0]
    a4a8:	9501      	str	r5, [sp, #4]
    a4aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4ae:	4c5a      	ldr	r4, [pc, #360]	; (a618 <cal_write_report+0xd70>)
    a4b0:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    a4b2:	23d8      	movs	r3, #216	; 0xd8
    a4b4:	2220      	movs	r2, #32
    a4b6:	2108      	movs	r1, #8
    a4b8:	468c      	mov	ip, r1
    a4ba:	2108      	movs	r1, #8
    a4bc:	4688      	mov	r8, r1
    a4be:	44b8      	add	r8, r7
    a4c0:	44c4      	add	ip, r8
    a4c2:	4462      	add	r2, ip
    a4c4:	18d2      	adds	r2, r2, r3
    a4c6:	23cc      	movs	r3, #204	; 0xcc
    a4c8:	009b      	lsls	r3, r3, #2
    a4ca:	2120      	movs	r1, #32
    a4cc:	468c      	mov	ip, r1
    a4ce:	2108      	movs	r1, #8
    a4d0:	4688      	mov	r8, r1
    a4d2:	2108      	movs	r1, #8
    a4d4:	4689      	mov	r9, r1
    a4d6:	44b9      	add	r9, r7
    a4d8:	44c8      	add	r8, r9
    a4da:	44c4      	add	ip, r8
    a4dc:	4463      	add	r3, ip
    a4de:	0011      	movs	r1, r2
    a4e0:	0018      	movs	r0, r3
    a4e2:	4b4e      	ldr	r3, [pc, #312]	; (a61c <cal_write_report+0xd74>)
    a4e4:	4798      	blx	r3
		
		
		
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n", 
			pcal_struct->thetaX, pcal_struct->thetaY, pcal_struct->thetaZ);
    a4e6:	4b48      	ldr	r3, [pc, #288]	; (a608 <cal_write_report+0xd60>)
    a4e8:	2220      	movs	r2, #32
    a4ea:	4694      	mov	ip, r2
    a4ec:	2208      	movs	r2, #8
    a4ee:	4690      	mov	r8, r2
    a4f0:	2208      	movs	r2, #8
    a4f2:	4691      	mov	r9, r2
    a4f4:	44b9      	add	r9, r7
    a4f6:	44c8      	add	r8, r9
    a4f8:	44c4      	add	ip, r8
    a4fa:	4463      	add	r3, ip
    a4fc:	681b      	ldr	r3, [r3, #0]
    a4fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n", 
    a500:	4b43      	ldr	r3, [pc, #268]	; (a610 <cal_write_report+0xd68>)
    a502:	1c10      	adds	r0, r2, #0
    a504:	4798      	blx	r3
    a506:	62b8      	str	r0, [r7, #40]	; 0x28
    a508:	62f9      	str	r1, [r7, #44]	; 0x2c
			pcal_struct->thetaX, pcal_struct->thetaY, pcal_struct->thetaZ);
    a50a:	4b3f      	ldr	r3, [pc, #252]	; (a608 <cal_write_report+0xd60>)
    a50c:	2220      	movs	r2, #32
    a50e:	4694      	mov	ip, r2
    a510:	2208      	movs	r2, #8
    a512:	4690      	mov	r8, r2
    a514:	2208      	movs	r2, #8
    a516:	4691      	mov	r9, r2
    a518:	44b9      	add	r9, r7
    a51a:	44c8      	add	r8, r9
    a51c:	44c4      	add	ip, r8
    a51e:	4463      	add	r3, ip
    a520:	681b      	ldr	r3, [r3, #0]
    a522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n", 
    a524:	4b3a      	ldr	r3, [pc, #232]	; (a610 <cal_write_report+0xd68>)
    a526:	1c10      	adds	r0, r2, #0
    a528:	4798      	blx	r3
    a52a:	0004      	movs	r4, r0
    a52c:	000d      	movs	r5, r1
			pcal_struct->thetaX, pcal_struct->thetaY, pcal_struct->thetaZ);
    a52e:	4b36      	ldr	r3, [pc, #216]	; (a608 <cal_write_report+0xd60>)
    a530:	2220      	movs	r2, #32
    a532:	4694      	mov	ip, r2
    a534:	2208      	movs	r2, #8
    a536:	4690      	mov	r8, r2
    a538:	2208      	movs	r2, #8
    a53a:	4691      	mov	r9, r2
    a53c:	44b9      	add	r9, r7
    a53e:	44c8      	add	r8, r9
    a540:	44c4      	add	ip, r8
    a542:	4463      	add	r3, ip
    a544:	681b      	ldr	r3, [r3, #0]
    a546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n", 
    a548:	4b31      	ldr	r3, [pc, #196]	; (a610 <cal_write_report+0xd68>)
    a54a:	1c10      	adds	r0, r2, #0
    a54c:	4798      	blx	r3
    a54e:	6038      	str	r0, [r7, #0]
    a550:	6079      	str	r1, [r7, #4]
    a552:	4937      	ldr	r1, [pc, #220]	; (a630 <cal_write_report+0xd88>)
    a554:	26d8      	movs	r6, #216	; 0xd8
    a556:	2020      	movs	r0, #32
    a558:	2308      	movs	r3, #8
    a55a:	469c      	mov	ip, r3
    a55c:	2308      	movs	r3, #8
    a55e:	4698      	mov	r8, r3
    a560:	44b8      	add	r8, r7
    a562:	44c4      	add	ip, r8
    a564:	4460      	add	r0, ip
    a566:	1980      	adds	r0, r0, r6
    a568:	683a      	ldr	r2, [r7, #0]
    a56a:	687b      	ldr	r3, [r7, #4]
    a56c:	9202      	str	r2, [sp, #8]
    a56e:	9303      	str	r3, [sp, #12]
    a570:	9400      	str	r4, [sp, #0]
    a572:	9501      	str	r5, [sp, #4]
    a574:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a578:	4c27      	ldr	r4, [pc, #156]	; (a618 <cal_write_report+0xd70>)
    a57a:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    a57c:	23d8      	movs	r3, #216	; 0xd8
    a57e:	2220      	movs	r2, #32
    a580:	2108      	movs	r1, #8
    a582:	468c      	mov	ip, r1
    a584:	2108      	movs	r1, #8
    a586:	4688      	mov	r8, r1
    a588:	44b8      	add	r8, r7
    a58a:	44c4      	add	ip, r8
    a58c:	4462      	add	r2, ip
    a58e:	18d2      	adds	r2, r2, r3
    a590:	23cc      	movs	r3, #204	; 0xcc
    a592:	009b      	lsls	r3, r3, #2
    a594:	2120      	movs	r1, #32
    a596:	468c      	mov	ip, r1
    a598:	2108      	movs	r1, #8
    a59a:	4688      	mov	r8, r1
    a59c:	2108      	movs	r1, #8
    a59e:	4689      	mov	r9, r1
    a5a0:	44b9      	add	r9, r7
    a5a2:	44c8      	add	r8, r9
    a5a4:	44c4      	add	ip, r8
    a5a6:	4463      	add	r3, ip
    a5a8:	0011      	movs	r1, r2
    a5aa:	0018      	movs	r0, r3
    a5ac:	4b1b      	ldr	r3, [pc, #108]	; (a61c <cal_write_report+0xd74>)
    a5ae:	4798      	blx	r3
		//fdebug2 = f_lseek(&file_cal, f_size(&file_cal));
		fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    a5b0:	23cc      	movs	r3, #204	; 0xcc
    a5b2:	009b      	lsls	r3, r3, #2
    a5b4:	2220      	movs	r2, #32
    a5b6:	4694      	mov	ip, r2
    a5b8:	2208      	movs	r2, #8
    a5ba:	4690      	mov	r8, r2
    a5bc:	2208      	movs	r2, #8
    a5be:	4691      	mov	r9, r2
    a5c0:	44b9      	add	r9, r7
    a5c2:	44c8      	add	r8, r9
    a5c4:	44c4      	add	ip, r8
    a5c6:	4463      	add	r3, ip
    a5c8:	0018      	movs	r0, r3
    a5ca:	4b1a      	ldr	r3, [pc, #104]	; (a634 <cal_write_report+0xd8c>)
    a5cc:	4798      	blx	r3
    a5ce:	0002      	movs	r2, r0
    a5d0:	4b19      	ldr	r3, [pc, #100]	; (a638 <cal_write_report+0xd90>)
    a5d2:	2120      	movs	r1, #32
    a5d4:	2008      	movs	r0, #8
    a5d6:	4684      	mov	ip, r0
    a5d8:	2008      	movs	r0, #8
    a5da:	4680      	mov	r8, r0
    a5dc:	44b8      	add	r8, r7
    a5de:	44c4      	add	ip, r8
    a5e0:	4461      	add	r1, ip
    a5e2:	18cc      	adds	r4, r1, r3
    a5e4:	23d5      	movs	r3, #213	; 0xd5
    a5e6:	00db      	lsls	r3, r3, #3
    a5e8:	2120      	movs	r1, #32
    a5ea:	468c      	mov	ip, r1
    a5ec:	2108      	movs	r1, #8
    a5ee:	4688      	mov	r8, r1
    a5f0:	2108      	movs	r1, #8
    a5f2:	4689      	mov	r9, r1
    a5f4:	44b9      	add	r9, r7
    a5f6:	44c8      	add	r8, r9
    a5f8:	44c4      	add	ip, r8
    a5fa:	4463      	add	r3, ip
    a5fc:	681b      	ldr	r3, [r3, #0]
    a5fe:	21cc      	movs	r1, #204	; 0xcc
    a600:	0089      	lsls	r1, r1, #2
    a602:	e01b      	b.n	a63c <cal_write_report+0xd94>
    a604:	200023ac 	.word	0x200023ac
    a608:	000006ac 	.word	0x000006ac
    a60c:	00028384 	.word	0x00028384
    a610:	00023a0d 	.word	0x00023a0d
    a614:	000283a0 	.word	0x000283a0
    a618:	00023d31 	.word	0x00023d31
    a61c:	00023d75 	.word	0x00023d75
    a620:	000283d0 	.word	0x000283d0
    a624:	00028d64 	.word	0x00028d64
    a628:	000217d9 	.word	0x000217d9
    a62c:	00028408 	.word	0x00028408
    a630:	00028478 	.word	0x00028478
    a634:	00023dd1 	.word	0x00023dd1
    a638:	000006b3 	.word	0x000006b3
    a63c:	2020      	movs	r0, #32
    a63e:	4684      	mov	ip, r0
    a640:	2008      	movs	r0, #8
    a642:	4680      	mov	r8, r0
    a644:	2008      	movs	r0, #8
    a646:	4681      	mov	r9, r0
    a648:	44b9      	add	r9, r7
    a64a:	44c8      	add	r8, r9
    a64c:	44c4      	add	ip, r8
    a64e:	4461      	add	r1, ip
    a650:	4876      	ldr	r0, [pc, #472]	; (a82c <cal_write_report+0xf84>)
    a652:	4d77      	ldr	r5, [pc, #476]	; (a830 <cal_write_report+0xf88>)
    a654:	47a8      	blx	r5
    a656:	0003      	movs	r3, r0
    a658:	7023      	strb	r3, [r4, #0]
	for (i=0;i<4;i++){
    a65a:	4b76      	ldr	r3, [pc, #472]	; (a834 <cal_write_report+0xf8c>)
    a65c:	2220      	movs	r2, #32
    a65e:	4694      	mov	ip, r2
    a660:	2208      	movs	r2, #8
    a662:	4690      	mov	r8, r2
    a664:	2208      	movs	r2, #8
    a666:	4691      	mov	r9, r2
    a668:	44b9      	add	r9, r7
    a66a:	44c8      	add	r8, r9
    a66c:	44c4      	add	ip, r8
    a66e:	4463      	add	r3, ip
    a670:	681b      	ldr	r3, [r3, #0]
    a672:	3301      	adds	r3, #1
    a674:	4a6f      	ldr	r2, [pc, #444]	; (a834 <cal_write_report+0xf8c>)
    a676:	2120      	movs	r1, #32
    a678:	468c      	mov	ip, r1
    a67a:	2108      	movs	r1, #8
    a67c:	4688      	mov	r8, r1
    a67e:	2108      	movs	r1, #8
    a680:	4689      	mov	r9, r1
    a682:	44b9      	add	r9, r7
    a684:	44c8      	add	r8, r9
    a686:	44c4      	add	ip, r8
    a688:	4462      	add	r2, ip
    a68a:	6013      	str	r3, [r2, #0]
    a68c:	4b69      	ldr	r3, [pc, #420]	; (a834 <cal_write_report+0xf8c>)
    a68e:	2220      	movs	r2, #32
    a690:	4694      	mov	ip, r2
    a692:	2208      	movs	r2, #8
    a694:	4690      	mov	r8, r2
    a696:	2208      	movs	r2, #8
    a698:	4691      	mov	r9, r2
    a69a:	44b9      	add	r9, r7
    a69c:	44c8      	add	r8, r9
    a69e:	44c4      	add	ip, r8
    a6a0:	4463      	add	r3, ip
    a6a2:	681b      	ldr	r3, [r3, #0]
    a6a4:	2b03      	cmp	r3, #3
    a6a6:	d800      	bhi.n	a6aa <cal_write_report+0xe02>
    a6a8:	e516      	b.n	a0d8 <cal_write_report+0x830>
	}
	
	
	// Write Compass/Incl/Roll Data
	sprintf(write_str1,"\r\nCalibration Measurements:\r\n");
    a6aa:	23cc      	movs	r3, #204	; 0xcc
    a6ac:	009b      	lsls	r3, r3, #2
    a6ae:	2220      	movs	r2, #32
    a6b0:	4694      	mov	ip, r2
    a6b2:	2208      	movs	r2, #8
    a6b4:	4690      	mov	r8, r2
    a6b6:	2208      	movs	r2, #8
    a6b8:	4691      	mov	r9, r2
    a6ba:	44b9      	add	r9, r7
    a6bc:	44c8      	add	r8, r9
    a6be:	44c4      	add	ip, r8
    a6c0:	4463      	add	r3, ip
    a6c2:	4a5d      	ldr	r2, [pc, #372]	; (a838 <cal_write_report+0xf90>)
    a6c4:	ca13      	ldmia	r2!, {r0, r1, r4}
    a6c6:	c313      	stmia	r3!, {r0, r1, r4}
    a6c8:	ca13      	ldmia	r2!, {r0, r1, r4}
    a6ca:	c313      	stmia	r3!, {r0, r1, r4}
    a6cc:	6811      	ldr	r1, [r2, #0]
    a6ce:	6019      	str	r1, [r3, #0]
    a6d0:	8892      	ldrh	r2, [r2, #4]
    a6d2:	809a      	strh	r2, [r3, #4]
	sprintf(write_str2,"                Uncalibrated                     Calibrated\r\n");
    a6d4:	23d8      	movs	r3, #216	; 0xd8
    a6d6:	2220      	movs	r2, #32
    a6d8:	2108      	movs	r1, #8
    a6da:	468c      	mov	ip, r1
    a6dc:	2108      	movs	r1, #8
    a6de:	4688      	mov	r8, r1
    a6e0:	44b8      	add	r8, r7
    a6e2:	44c4      	add	ip, r8
    a6e4:	4462      	add	r2, ip
    a6e6:	18d2      	adds	r2, r2, r3
    a6e8:	4b54      	ldr	r3, [pc, #336]	; (a83c <cal_write_report+0xf94>)
    a6ea:	0010      	movs	r0, r2
    a6ec:	0019      	movs	r1, r3
    a6ee:	233e      	movs	r3, #62	; 0x3e
    a6f0:	001a      	movs	r2, r3
    a6f2:	4b53      	ldr	r3, [pc, #332]	; (a840 <cal_write_report+0xf98>)
    a6f4:	4798      	blx	r3
	strcat(write_str1, write_str2);
    a6f6:	23d8      	movs	r3, #216	; 0xd8
    a6f8:	2220      	movs	r2, #32
    a6fa:	2108      	movs	r1, #8
    a6fc:	468c      	mov	ip, r1
    a6fe:	2108      	movs	r1, #8
    a700:	4688      	mov	r8, r1
    a702:	44b8      	add	r8, r7
    a704:	44c4      	add	ip, r8
    a706:	4462      	add	r2, ip
    a708:	18d2      	adds	r2, r2, r3
    a70a:	23cc      	movs	r3, #204	; 0xcc
    a70c:	009b      	lsls	r3, r3, #2
    a70e:	2120      	movs	r1, #32
    a710:	468c      	mov	ip, r1
    a712:	2108      	movs	r1, #8
    a714:	4688      	mov	r8, r1
    a716:	2108      	movs	r1, #8
    a718:	4689      	mov	r9, r1
    a71a:	44b9      	add	r9, r7
    a71c:	44c8      	add	r8, r9
    a71e:	44c4      	add	ip, r8
    a720:	4463      	add	r3, ip
    a722:	0011      	movs	r1, r2
    a724:	0018      	movs	r0, r3
    a726:	4b47      	ldr	r3, [pc, #284]	; (a844 <cal_write_report+0xf9c>)
    a728:	4798      	blx	r3
	sprintf(write_str2,"Group, Point,   Azimuth,  Inclination, Roll,     Azimuth,  Inclination, Roll\r\n");
    a72a:	23d8      	movs	r3, #216	; 0xd8
    a72c:	2220      	movs	r2, #32
    a72e:	2108      	movs	r1, #8
    a730:	468c      	mov	ip, r1
    a732:	2108      	movs	r1, #8
    a734:	4688      	mov	r8, r1
    a736:	44b8      	add	r8, r7
    a738:	44c4      	add	ip, r8
    a73a:	4462      	add	r2, ip
    a73c:	18d2      	adds	r2, r2, r3
    a73e:	4b42      	ldr	r3, [pc, #264]	; (a848 <cal_write_report+0xfa0>)
    a740:	0010      	movs	r0, r2
    a742:	0019      	movs	r1, r3
    a744:	234f      	movs	r3, #79	; 0x4f
    a746:	001a      	movs	r2, r3
    a748:	4b3d      	ldr	r3, [pc, #244]	; (a840 <cal_write_report+0xf98>)
    a74a:	4798      	blx	r3
	strcat(write_str1, write_str2);
    a74c:	23d8      	movs	r3, #216	; 0xd8
    a74e:	2220      	movs	r2, #32
    a750:	2108      	movs	r1, #8
    a752:	468c      	mov	ip, r1
    a754:	2108      	movs	r1, #8
    a756:	4688      	mov	r8, r1
    a758:	44b8      	add	r8, r7
    a75a:	44c4      	add	ip, r8
    a75c:	4462      	add	r2, ip
    a75e:	18d2      	adds	r2, r2, r3
    a760:	23cc      	movs	r3, #204	; 0xcc
    a762:	009b      	lsls	r3, r3, #2
    a764:	2120      	movs	r1, #32
    a766:	468c      	mov	ip, r1
    a768:	2108      	movs	r1, #8
    a76a:	4688      	mov	r8, r1
    a76c:	2108      	movs	r1, #8
    a76e:	4689      	mov	r9, r1
    a770:	44b9      	add	r9, r7
    a772:	44c8      	add	r8, r9
    a774:	44c4      	add	ip, r8
    a776:	4463      	add	r3, ip
    a778:	0011      	movs	r1, r2
    a77a:	0018      	movs	r0, r3
    a77c:	4b31      	ldr	r3, [pc, #196]	; (a844 <cal_write_report+0xf9c>)
    a77e:	4798      	blx	r3
	fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    a780:	23cc      	movs	r3, #204	; 0xcc
    a782:	009b      	lsls	r3, r3, #2
    a784:	2220      	movs	r2, #32
    a786:	4694      	mov	ip, r2
    a788:	2208      	movs	r2, #8
    a78a:	4690      	mov	r8, r2
    a78c:	2208      	movs	r2, #8
    a78e:	4691      	mov	r9, r2
    a790:	44b9      	add	r9, r7
    a792:	44c8      	add	r8, r9
    a794:	44c4      	add	ip, r8
    a796:	4463      	add	r3, ip
    a798:	0018      	movs	r0, r3
    a79a:	4b2c      	ldr	r3, [pc, #176]	; (a84c <cal_write_report+0xfa4>)
    a79c:	4798      	blx	r3
    a79e:	0002      	movs	r2, r0
    a7a0:	4b2b      	ldr	r3, [pc, #172]	; (a850 <cal_write_report+0xfa8>)
    a7a2:	2120      	movs	r1, #32
    a7a4:	2008      	movs	r0, #8
    a7a6:	4684      	mov	ip, r0
    a7a8:	2008      	movs	r0, #8
    a7aa:	4680      	mov	r8, r0
    a7ac:	44b8      	add	r8, r7
    a7ae:	44c4      	add	ip, r8
    a7b0:	4461      	add	r1, ip
    a7b2:	18cc      	adds	r4, r1, r3
    a7b4:	23d5      	movs	r3, #213	; 0xd5
    a7b6:	00db      	lsls	r3, r3, #3
    a7b8:	2120      	movs	r1, #32
    a7ba:	468c      	mov	ip, r1
    a7bc:	2108      	movs	r1, #8
    a7be:	4688      	mov	r8, r1
    a7c0:	2108      	movs	r1, #8
    a7c2:	4689      	mov	r9, r1
    a7c4:	44b9      	add	r9, r7
    a7c6:	44c8      	add	r8, r9
    a7c8:	44c4      	add	ip, r8
    a7ca:	4463      	add	r3, ip
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	21cc      	movs	r1, #204	; 0xcc
    a7d0:	0089      	lsls	r1, r1, #2
    a7d2:	2020      	movs	r0, #32
    a7d4:	4684      	mov	ip, r0
    a7d6:	2008      	movs	r0, #8
    a7d8:	4680      	mov	r8, r0
    a7da:	2008      	movs	r0, #8
    a7dc:	4681      	mov	r9, r0
    a7de:	44b9      	add	r9, r7
    a7e0:	44c8      	add	r8, r9
    a7e2:	44c4      	add	ip, r8
    a7e4:	4461      	add	r1, ip
    a7e6:	4811      	ldr	r0, [pc, #68]	; (a82c <cal_write_report+0xf84>)
    a7e8:	4d11      	ldr	r5, [pc, #68]	; (a830 <cal_write_report+0xf88>)
    a7ea:	47a8      	blx	r5
    a7ec:	0003      	movs	r3, r0
    a7ee:	7023      	strb	r3, [r4, #0]
	for (i=0;i<n_points;i++){
    a7f0:	2300      	movs	r3, #0
    a7f2:	4a10      	ldr	r2, [pc, #64]	; (a834 <cal_write_report+0xf8c>)
    a7f4:	2120      	movs	r1, #32
    a7f6:	468c      	mov	ip, r1
    a7f8:	2108      	movs	r1, #8
    a7fa:	4688      	mov	r8, r1
    a7fc:	2108      	movs	r1, #8
    a7fe:	4689      	mov	r9, r1
    a800:	44b9      	add	r9, r7
    a802:	44c8      	add	r8, r9
    a804:	44c4      	add	ip, r8
    a806:	4462      	add	r2, ip
    a808:	6013      	str	r3, [r2, #0]
    a80a:	f000 fc9c 	bl	b146 <cal_write_report+0x189e>
		//  Fist Measure uncalibrated raw data
		for (j=0;j<3;j++){
    a80e:	2300      	movs	r3, #0
    a810:	22d7      	movs	r2, #215	; 0xd7
    a812:	00d2      	lsls	r2, r2, #3
    a814:	2120      	movs	r1, #32
    a816:	468c      	mov	ip, r1
    a818:	2108      	movs	r1, #8
    a81a:	4688      	mov	r8, r1
    a81c:	2108      	movs	r1, #8
    a81e:	4689      	mov	r9, r1
    a820:	44b9      	add	r9, r7
    a822:	44c8      	add	r8, r9
    a824:	44c4      	add	ip, r8
    a826:	4462      	add	r2, ip
    a828:	6013      	str	r3, [r2, #0]
    a82a:	e12c      	b.n	aa86 <cal_write_report+0x11de>
    a82c:	20002b8c 	.word	0x20002b8c
    a830:	000141e9 	.word	0x000141e9
    a834:	000006bc 	.word	0x000006bc
    a838:	000284fc 	.word	0x000284fc
    a83c:	0002851c 	.word	0x0002851c
    a840:	00023c19 	.word	0x00023c19
    a844:	00023d75 	.word	0x00023d75
    a848:	0002855c 	.word	0x0002855c
    a84c:	00023dd1 	.word	0x00023dd1
    a850:	000006b3 	.word	0x000006b3
			temp_meas.a1xyz[j] = a1raw[i][j];
    a854:	49cc      	ldr	r1, [pc, #816]	; (ab88 <cal_write_report+0x12e0>)
    a856:	4bcd      	ldr	r3, [pc, #820]	; (ab8c <cal_write_report+0x12e4>)
    a858:	2220      	movs	r2, #32
    a85a:	4694      	mov	ip, r2
    a85c:	2208      	movs	r2, #8
    a85e:	4690      	mov	r8, r2
    a860:	2208      	movs	r2, #8
    a862:	4691      	mov	r9, r2
    a864:	44b9      	add	r9, r7
    a866:	44c8      	add	r8, r9
    a868:	44c4      	add	ip, r8
    a86a:	4463      	add	r3, ip
    a86c:	681a      	ldr	r2, [r3, #0]
    a86e:	0013      	movs	r3, r2
    a870:	005b      	lsls	r3, r3, #1
    a872:	189b      	adds	r3, r3, r2
    a874:	22d7      	movs	r2, #215	; 0xd7
    a876:	00d2      	lsls	r2, r2, #3
    a878:	2020      	movs	r0, #32
    a87a:	4684      	mov	ip, r0
    a87c:	2008      	movs	r0, #8
    a87e:	4680      	mov	r8, r0
    a880:	2008      	movs	r0, #8
    a882:	4681      	mov	r9, r0
    a884:	44b9      	add	r9, r7
    a886:	44c8      	add	r8, r9
    a888:	44c4      	add	ip, r8
    a88a:	4462      	add	r2, ip
    a88c:	6812      	ldr	r2, [r2, #0]
    a88e:	189b      	adds	r3, r3, r2
    a890:	009b      	lsls	r3, r3, #2
    a892:	5859      	ldr	r1, [r3, r1]
    a894:	4bbe      	ldr	r3, [pc, #760]	; (ab90 <cal_write_report+0x12e8>)
    a896:	22d8      	movs	r2, #216	; 0xd8
    a898:	00d2      	lsls	r2, r2, #3
    a89a:	4694      	mov	ip, r2
    a89c:	2220      	movs	r2, #32
    a89e:	4690      	mov	r8, r2
    a8a0:	2208      	movs	r2, #8
    a8a2:	4691      	mov	r9, r2
    a8a4:	2208      	movs	r2, #8
    a8a6:	4692      	mov	sl, r2
    a8a8:	44ba      	add	sl, r7
    a8aa:	44d1      	add	r9, sl
    a8ac:	44c8      	add	r8, r9
    a8ae:	44c4      	add	ip, r8
    a8b0:	4463      	add	r3, ip
    a8b2:	22d7      	movs	r2, #215	; 0xd7
    a8b4:	00d2      	lsls	r2, r2, #3
    a8b6:	2020      	movs	r0, #32
    a8b8:	4684      	mov	ip, r0
    a8ba:	2008      	movs	r0, #8
    a8bc:	4680      	mov	r8, r0
    a8be:	2008      	movs	r0, #8
    a8c0:	4681      	mov	r9, r0
    a8c2:	44b9      	add	r9, r7
    a8c4:	44c8      	add	r8, r9
    a8c6:	44c4      	add	ip, r8
    a8c8:	4462      	add	r2, ip
    a8ca:	6812      	ldr	r2, [r2, #0]
    a8cc:	3208      	adds	r2, #8
    a8ce:	0092      	lsls	r2, r2, #2
    a8d0:	50d1      	str	r1, [r2, r3]
			temp_meas.a2xyz[j] = a2raw[i][j];
    a8d2:	49b0      	ldr	r1, [pc, #704]	; (ab94 <cal_write_report+0x12ec>)
    a8d4:	4bad      	ldr	r3, [pc, #692]	; (ab8c <cal_write_report+0x12e4>)
    a8d6:	2220      	movs	r2, #32
    a8d8:	4694      	mov	ip, r2
    a8da:	2208      	movs	r2, #8
    a8dc:	4690      	mov	r8, r2
    a8de:	2208      	movs	r2, #8
    a8e0:	4691      	mov	r9, r2
    a8e2:	44b9      	add	r9, r7
    a8e4:	44c8      	add	r8, r9
    a8e6:	44c4      	add	ip, r8
    a8e8:	4463      	add	r3, ip
    a8ea:	681a      	ldr	r2, [r3, #0]
    a8ec:	0013      	movs	r3, r2
    a8ee:	005b      	lsls	r3, r3, #1
    a8f0:	189b      	adds	r3, r3, r2
    a8f2:	22d7      	movs	r2, #215	; 0xd7
    a8f4:	00d2      	lsls	r2, r2, #3
    a8f6:	2020      	movs	r0, #32
    a8f8:	4684      	mov	ip, r0
    a8fa:	2008      	movs	r0, #8
    a8fc:	4680      	mov	r8, r0
    a8fe:	2008      	movs	r0, #8
    a900:	4681      	mov	r9, r0
    a902:	44b9      	add	r9, r7
    a904:	44c8      	add	r8, r9
    a906:	44c4      	add	ip, r8
    a908:	4462      	add	r2, ip
    a90a:	6812      	ldr	r2, [r2, #0]
    a90c:	189b      	adds	r3, r3, r2
    a90e:	009b      	lsls	r3, r3, #2
    a910:	585a      	ldr	r2, [r3, r1]
    a912:	4b9f      	ldr	r3, [pc, #636]	; (ab90 <cal_write_report+0x12e8>)
    a914:	21d8      	movs	r1, #216	; 0xd8
    a916:	00c9      	lsls	r1, r1, #3
    a918:	2020      	movs	r0, #32
    a91a:	4684      	mov	ip, r0
    a91c:	2008      	movs	r0, #8
    a91e:	4680      	mov	r8, r0
    a920:	2008      	movs	r0, #8
    a922:	4681      	mov	r9, r0
    a924:	44b9      	add	r9, r7
    a926:	44c8      	add	r8, r9
    a928:	44c4      	add	ip, r8
    a92a:	4461      	add	r1, ip
    a92c:	18c9      	adds	r1, r1, r3
    a92e:	23d7      	movs	r3, #215	; 0xd7
    a930:	00db      	lsls	r3, r3, #3
    a932:	2020      	movs	r0, #32
    a934:	4684      	mov	ip, r0
    a936:	2008      	movs	r0, #8
    a938:	4680      	mov	r8, r0
    a93a:	2008      	movs	r0, #8
    a93c:	4681      	mov	r9, r0
    a93e:	44b9      	add	r9, r7
    a940:	44c8      	add	r8, r9
    a942:	44c4      	add	ip, r8
    a944:	4463      	add	r3, ip
    a946:	681b      	ldr	r3, [r3, #0]
    a948:	330a      	adds	r3, #10
    a94a:	009b      	lsls	r3, r3, #2
    a94c:	18cb      	adds	r3, r1, r3
    a94e:	3304      	adds	r3, #4
    a950:	601a      	str	r2, [r3, #0]
			temp_meas.c1xyz[j] = c1raw[i][j];
    a952:	4991      	ldr	r1, [pc, #580]	; (ab98 <cal_write_report+0x12f0>)
    a954:	4b8d      	ldr	r3, [pc, #564]	; (ab8c <cal_write_report+0x12e4>)
    a956:	2220      	movs	r2, #32
    a958:	4694      	mov	ip, r2
    a95a:	2208      	movs	r2, #8
    a95c:	4690      	mov	r8, r2
    a95e:	2208      	movs	r2, #8
    a960:	4691      	mov	r9, r2
    a962:	44b9      	add	r9, r7
    a964:	44c8      	add	r8, r9
    a966:	44c4      	add	ip, r8
    a968:	4463      	add	r3, ip
    a96a:	681a      	ldr	r2, [r3, #0]
    a96c:	0013      	movs	r3, r2
    a96e:	005b      	lsls	r3, r3, #1
    a970:	189b      	adds	r3, r3, r2
    a972:	22d7      	movs	r2, #215	; 0xd7
    a974:	00d2      	lsls	r2, r2, #3
    a976:	2020      	movs	r0, #32
    a978:	4684      	mov	ip, r0
    a97a:	2008      	movs	r0, #8
    a97c:	4680      	mov	r8, r0
    a97e:	2008      	movs	r0, #8
    a980:	4681      	mov	r9, r0
    a982:	44b9      	add	r9, r7
    a984:	44c8      	add	r8, r9
    a986:	44c4      	add	ip, r8
    a988:	4462      	add	r2, ip
    a98a:	6812      	ldr	r2, [r2, #0]
    a98c:	189b      	adds	r3, r3, r2
    a98e:	009b      	lsls	r3, r3, #2
    a990:	5859      	ldr	r1, [r3, r1]
    a992:	4b7f      	ldr	r3, [pc, #508]	; (ab90 <cal_write_report+0x12e8>)
    a994:	22d8      	movs	r2, #216	; 0xd8
    a996:	00d2      	lsls	r2, r2, #3
    a998:	4694      	mov	ip, r2
    a99a:	2220      	movs	r2, #32
    a99c:	4690      	mov	r8, r2
    a99e:	2208      	movs	r2, #8
    a9a0:	4691      	mov	r9, r2
    a9a2:	2208      	movs	r2, #8
    a9a4:	4692      	mov	sl, r2
    a9a6:	44ba      	add	sl, r7
    a9a8:	44d1      	add	r9, sl
    a9aa:	44c8      	add	r8, r9
    a9ac:	44c4      	add	ip, r8
    a9ae:	4463      	add	r3, ip
    a9b0:	22d7      	movs	r2, #215	; 0xd7
    a9b2:	00d2      	lsls	r2, r2, #3
    a9b4:	2020      	movs	r0, #32
    a9b6:	4684      	mov	ip, r0
    a9b8:	2008      	movs	r0, #8
    a9ba:	4680      	mov	r8, r0
    a9bc:	2008      	movs	r0, #8
    a9be:	4681      	mov	r9, r0
    a9c0:	44b9      	add	r9, r7
    a9c2:	44c8      	add	r8, r9
    a9c4:	44c4      	add	ip, r8
    a9c6:	4462      	add	r2, ip
    a9c8:	6812      	ldr	r2, [r2, #0]
    a9ca:	320e      	adds	r2, #14
    a9cc:	0092      	lsls	r2, r2, #2
    a9ce:	50d1      	str	r1, [r2, r3]
			temp_meas.c2xyz[j] = c2raw[i][j];
    a9d0:	4972      	ldr	r1, [pc, #456]	; (ab9c <cal_write_report+0x12f4>)
    a9d2:	4b6e      	ldr	r3, [pc, #440]	; (ab8c <cal_write_report+0x12e4>)
    a9d4:	2220      	movs	r2, #32
    a9d6:	4694      	mov	ip, r2
    a9d8:	2208      	movs	r2, #8
    a9da:	4690      	mov	r8, r2
    a9dc:	2208      	movs	r2, #8
    a9de:	4691      	mov	r9, r2
    a9e0:	44b9      	add	r9, r7
    a9e2:	44c8      	add	r8, r9
    a9e4:	44c4      	add	ip, r8
    a9e6:	4463      	add	r3, ip
    a9e8:	681a      	ldr	r2, [r3, #0]
    a9ea:	0013      	movs	r3, r2
    a9ec:	005b      	lsls	r3, r3, #1
    a9ee:	189b      	adds	r3, r3, r2
    a9f0:	22d7      	movs	r2, #215	; 0xd7
    a9f2:	00d2      	lsls	r2, r2, #3
    a9f4:	2020      	movs	r0, #32
    a9f6:	4684      	mov	ip, r0
    a9f8:	2008      	movs	r0, #8
    a9fa:	4680      	mov	r8, r0
    a9fc:	2008      	movs	r0, #8
    a9fe:	4681      	mov	r9, r0
    aa00:	44b9      	add	r9, r7
    aa02:	44c8      	add	r8, r9
    aa04:	44c4      	add	ip, r8
    aa06:	4462      	add	r2, ip
    aa08:	6812      	ldr	r2, [r2, #0]
    aa0a:	189b      	adds	r3, r3, r2
    aa0c:	009b      	lsls	r3, r3, #2
    aa0e:	585a      	ldr	r2, [r3, r1]
    aa10:	4b5f      	ldr	r3, [pc, #380]	; (ab90 <cal_write_report+0x12e8>)
    aa12:	21d8      	movs	r1, #216	; 0xd8
    aa14:	00c9      	lsls	r1, r1, #3
    aa16:	2020      	movs	r0, #32
    aa18:	4684      	mov	ip, r0
    aa1a:	2008      	movs	r0, #8
    aa1c:	4680      	mov	r8, r0
    aa1e:	2008      	movs	r0, #8
    aa20:	4681      	mov	r9, r0
    aa22:	44b9      	add	r9, r7
    aa24:	44c8      	add	r8, r9
    aa26:	44c4      	add	ip, r8
    aa28:	4461      	add	r1, ip
    aa2a:	18c9      	adds	r1, r1, r3
    aa2c:	23d7      	movs	r3, #215	; 0xd7
    aa2e:	00db      	lsls	r3, r3, #3
    aa30:	2020      	movs	r0, #32
    aa32:	4684      	mov	ip, r0
    aa34:	2008      	movs	r0, #8
    aa36:	4680      	mov	r8, r0
    aa38:	2008      	movs	r0, #8
    aa3a:	4681      	mov	r9, r0
    aa3c:	44b9      	add	r9, r7
    aa3e:	44c8      	add	r8, r9
    aa40:	44c4      	add	ip, r8
    aa42:	4463      	add	r3, ip
    aa44:	681b      	ldr	r3, [r3, #0]
    aa46:	3310      	adds	r3, #16
    aa48:	009b      	lsls	r3, r3, #2
    aa4a:	18cb      	adds	r3, r1, r3
    aa4c:	3304      	adds	r3, #4
    aa4e:	601a      	str	r2, [r3, #0]
		for (j=0;j<3;j++){
    aa50:	23d7      	movs	r3, #215	; 0xd7
    aa52:	00db      	lsls	r3, r3, #3
    aa54:	2220      	movs	r2, #32
    aa56:	4694      	mov	ip, r2
    aa58:	2208      	movs	r2, #8
    aa5a:	4690      	mov	r8, r2
    aa5c:	2208      	movs	r2, #8
    aa5e:	4691      	mov	r9, r2
    aa60:	44b9      	add	r9, r7
    aa62:	44c8      	add	r8, r9
    aa64:	44c4      	add	ip, r8
    aa66:	4463      	add	r3, ip
    aa68:	681b      	ldr	r3, [r3, #0]
    aa6a:	3301      	adds	r3, #1
    aa6c:	22d7      	movs	r2, #215	; 0xd7
    aa6e:	00d2      	lsls	r2, r2, #3
    aa70:	2120      	movs	r1, #32
    aa72:	468c      	mov	ip, r1
    aa74:	2108      	movs	r1, #8
    aa76:	4688      	mov	r8, r1
    aa78:	2108      	movs	r1, #8
    aa7a:	4689      	mov	r9, r1
    aa7c:	44b9      	add	r9, r7
    aa7e:	44c8      	add	r8, r9
    aa80:	44c4      	add	ip, r8
    aa82:	4462      	add	r2, ip
    aa84:	6013      	str	r3, [r2, #0]
    aa86:	23d7      	movs	r3, #215	; 0xd7
    aa88:	00db      	lsls	r3, r3, #3
    aa8a:	2220      	movs	r2, #32
    aa8c:	4694      	mov	ip, r2
    aa8e:	2208      	movs	r2, #8
    aa90:	4690      	mov	r8, r2
    aa92:	2208      	movs	r2, #8
    aa94:	4691      	mov	r9, r2
    aa96:	44b9      	add	r9, r7
    aa98:	44c8      	add	r8, r9
    aa9a:	44c4      	add	ip, r8
    aa9c:	4463      	add	r3, ip
    aa9e:	681b      	ldr	r3, [r3, #0]
    aaa0:	2b02      	cmp	r3, #2
    aaa2:	d800      	bhi.n	aaa6 <cal_write_report+0x11fe>
    aaa4:	e6d6      	b.n	a854 <cal_write_report+0xfac>
		}
		calc_orientation(&temp_meas);
    aaa6:	2324      	movs	r3, #36	; 0x24
    aaa8:	2208      	movs	r2, #8
    aaaa:	4694      	mov	ip, r2
    aaac:	2208      	movs	r2, #8
    aaae:	4690      	mov	r8, r2
    aab0:	44b8      	add	r8, r7
    aab2:	44c4      	add	ip, r8
    aab4:	4463      	add	r3, ip
    aab6:	0018      	movs	r0, r3
    aab8:	4b39      	ldr	r3, [pc, #228]	; (aba0 <cal_write_report+0x12f8>)
    aaba:	4798      	blx	r3
		azm_raw = temp_meas.azimuth;
    aabc:	4b34      	ldr	r3, [pc, #208]	; (ab90 <cal_write_report+0x12e8>)
    aabe:	22d8      	movs	r2, #216	; 0xd8
    aac0:	00d2      	lsls	r2, r2, #3
    aac2:	4694      	mov	ip, r2
    aac4:	2220      	movs	r2, #32
    aac6:	4690      	mov	r8, r2
    aac8:	2208      	movs	r2, #8
    aaca:	4691      	mov	r9, r2
    aacc:	2208      	movs	r2, #8
    aace:	4692      	mov	sl, r2
    aad0:	44ba      	add	sl, r7
    aad2:	44d1      	add	r9, sl
    aad4:	44c8      	add	r8, r9
    aad6:	44c4      	add	ip, r8
    aad8:	4463      	add	r3, ip
    aada:	68db      	ldr	r3, [r3, #12]
    aadc:	22d4      	movs	r2, #212	; 0xd4
    aade:	00d2      	lsls	r2, r2, #3
    aae0:	2120      	movs	r1, #32
    aae2:	468c      	mov	ip, r1
    aae4:	2108      	movs	r1, #8
    aae6:	4688      	mov	r8, r1
    aae8:	2108      	movs	r1, #8
    aaea:	4689      	mov	r9, r1
    aaec:	44b9      	add	r9, r7
    aaee:	44c8      	add	r8, r9
    aaf0:	44c4      	add	ip, r8
    aaf2:	4462      	add	r2, ip
    aaf4:	6013      	str	r3, [r2, #0]
		inc_raw = temp_meas.inclination;
    aaf6:	4b26      	ldr	r3, [pc, #152]	; (ab90 <cal_write_report+0x12e8>)
    aaf8:	22d8      	movs	r2, #216	; 0xd8
    aafa:	00d2      	lsls	r2, r2, #3
    aafc:	4694      	mov	ip, r2
    aafe:	2220      	movs	r2, #32
    ab00:	4690      	mov	r8, r2
    ab02:	2208      	movs	r2, #8
    ab04:	4691      	mov	r9, r2
    ab06:	2208      	movs	r2, #8
    ab08:	4692      	mov	sl, r2
    ab0a:	44ba      	add	sl, r7
    ab0c:	44d1      	add	r9, sl
    ab0e:	44c8      	add	r8, r9
    ab10:	44c4      	add	ip, r8
    ab12:	4463      	add	r3, ip
    ab14:	691b      	ldr	r3, [r3, #16]
    ab16:	4a23      	ldr	r2, [pc, #140]	; (aba4 <cal_write_report+0x12fc>)
    ab18:	2120      	movs	r1, #32
    ab1a:	468c      	mov	ip, r1
    ab1c:	2108      	movs	r1, #8
    ab1e:	4688      	mov	r8, r1
    ab20:	2108      	movs	r1, #8
    ab22:	4689      	mov	r9, r1
    ab24:	44b9      	add	r9, r7
    ab26:	44c8      	add	r8, r9
    ab28:	44c4      	add	ip, r8
    ab2a:	4462      	add	r2, ip
    ab2c:	6013      	str	r3, [r2, #0]
		roll_raw = temp_meas.roll;
    ab2e:	4b18      	ldr	r3, [pc, #96]	; (ab90 <cal_write_report+0x12e8>)
    ab30:	22d8      	movs	r2, #216	; 0xd8
    ab32:	00d2      	lsls	r2, r2, #3
    ab34:	4694      	mov	ip, r2
    ab36:	2220      	movs	r2, #32
    ab38:	4690      	mov	r8, r2
    ab3a:	2208      	movs	r2, #8
    ab3c:	4691      	mov	r9, r2
    ab3e:	2208      	movs	r2, #8
    ab40:	4692      	mov	sl, r2
    ab42:	44ba      	add	sl, r7
    ab44:	44d1      	add	r9, sl
    ab46:	44c8      	add	r8, r9
    ab48:	44c4      	add	ip, r8
    ab4a:	4463      	add	r3, ip
    ab4c:	695b      	ldr	r3, [r3, #20]
    ab4e:	22d3      	movs	r2, #211	; 0xd3
    ab50:	00d2      	lsls	r2, r2, #3
    ab52:	2120      	movs	r1, #32
    ab54:	468c      	mov	ip, r1
    ab56:	2108      	movs	r1, #8
    ab58:	4688      	mov	r8, r1
    ab5a:	2108      	movs	r1, #8
    ab5c:	4689      	mov	r9, r1
    ab5e:	44b9      	add	r9, r7
    ab60:	44c8      	add	r8, r9
    ab62:	44c4      	add	ip, r8
    ab64:	4462      	add	r2, ip
    ab66:	6013      	str	r3, [r2, #0]
		//  Next Measure calibrated data
		for (j=0;j<3;j++){
    ab68:	2300      	movs	r3, #0
    ab6a:	22d7      	movs	r2, #215	; 0xd7
    ab6c:	00d2      	lsls	r2, r2, #3
    ab6e:	2120      	movs	r1, #32
    ab70:	468c      	mov	ip, r1
    ab72:	2108      	movs	r1, #8
    ab74:	4688      	mov	r8, r1
    ab76:	2108      	movs	r1, #8
    ab78:	4689      	mov	r9, r1
    ab7a:	44b9      	add	r9, r7
    ab7c:	44c8      	add	r8, r9
    ab7e:	44c4      	add	ip, r8
    ab80:	4462      	add	r2, ip
    ab82:	6013      	str	r3, [r2, #0]
    ab84:	e129      	b.n	adda <cal_write_report+0x1532>
    ab86:	46c0      	nop			; (mov r8, r8)
    ab88:	20004f98 	.word	0x20004f98
    ab8c:	000006bc 	.word	0x000006bc
    ab90:	fffff944 	.word	0xfffff944
    ab94:	2000414c 	.word	0x2000414c
    ab98:	20001fe8 	.word	0x20001fe8
    ab9c:	2000240c 	.word	0x2000240c
    aba0:	0000c0d5 	.word	0x0000c0d5
    aba4:	0000069c 	.word	0x0000069c
			temp_meas.a1xyz[j] = a1cal[i][j];
    aba8:	49fc      	ldr	r1, [pc, #1008]	; (af9c <cal_write_report+0x16f4>)
    abaa:	4bfd      	ldr	r3, [pc, #1012]	; (afa0 <cal_write_report+0x16f8>)
    abac:	2220      	movs	r2, #32
    abae:	4694      	mov	ip, r2
    abb0:	2208      	movs	r2, #8
    abb2:	4690      	mov	r8, r2
    abb4:	2208      	movs	r2, #8
    abb6:	4691      	mov	r9, r2
    abb8:	44b9      	add	r9, r7
    abba:	44c8      	add	r8, r9
    abbc:	44c4      	add	ip, r8
    abbe:	4463      	add	r3, ip
    abc0:	681a      	ldr	r2, [r3, #0]
    abc2:	0013      	movs	r3, r2
    abc4:	005b      	lsls	r3, r3, #1
    abc6:	189b      	adds	r3, r3, r2
    abc8:	22d7      	movs	r2, #215	; 0xd7
    abca:	00d2      	lsls	r2, r2, #3
    abcc:	2020      	movs	r0, #32
    abce:	4684      	mov	ip, r0
    abd0:	2008      	movs	r0, #8
    abd2:	4680      	mov	r8, r0
    abd4:	2008      	movs	r0, #8
    abd6:	4681      	mov	r9, r0
    abd8:	44b9      	add	r9, r7
    abda:	44c8      	add	r8, r9
    abdc:	44c4      	add	ip, r8
    abde:	4462      	add	r2, ip
    abe0:	6812      	ldr	r2, [r2, #0]
    abe2:	189b      	adds	r3, r3, r2
    abe4:	009b      	lsls	r3, r3, #2
    abe6:	5859      	ldr	r1, [r3, r1]
    abe8:	4bee      	ldr	r3, [pc, #952]	; (afa4 <cal_write_report+0x16fc>)
    abea:	22d8      	movs	r2, #216	; 0xd8
    abec:	00d2      	lsls	r2, r2, #3
    abee:	4694      	mov	ip, r2
    abf0:	2220      	movs	r2, #32
    abf2:	4690      	mov	r8, r2
    abf4:	2208      	movs	r2, #8
    abf6:	4691      	mov	r9, r2
    abf8:	2208      	movs	r2, #8
    abfa:	4692      	mov	sl, r2
    abfc:	44ba      	add	sl, r7
    abfe:	44d1      	add	r9, sl
    ac00:	44c8      	add	r8, r9
    ac02:	44c4      	add	ip, r8
    ac04:	4463      	add	r3, ip
    ac06:	22d7      	movs	r2, #215	; 0xd7
    ac08:	00d2      	lsls	r2, r2, #3
    ac0a:	2020      	movs	r0, #32
    ac0c:	4684      	mov	ip, r0
    ac0e:	2008      	movs	r0, #8
    ac10:	4680      	mov	r8, r0
    ac12:	2008      	movs	r0, #8
    ac14:	4681      	mov	r9, r0
    ac16:	44b9      	add	r9, r7
    ac18:	44c8      	add	r8, r9
    ac1a:	44c4      	add	ip, r8
    ac1c:	4462      	add	r2, ip
    ac1e:	6812      	ldr	r2, [r2, #0]
    ac20:	3208      	adds	r2, #8
    ac22:	0092      	lsls	r2, r2, #2
    ac24:	50d1      	str	r1, [r2, r3]
			temp_meas.a2xyz[j] = a2cal[i][j];
    ac26:	49e0      	ldr	r1, [pc, #896]	; (afa8 <cal_write_report+0x1700>)
    ac28:	4bdd      	ldr	r3, [pc, #884]	; (afa0 <cal_write_report+0x16f8>)
    ac2a:	2220      	movs	r2, #32
    ac2c:	4694      	mov	ip, r2
    ac2e:	2208      	movs	r2, #8
    ac30:	4690      	mov	r8, r2
    ac32:	2208      	movs	r2, #8
    ac34:	4691      	mov	r9, r2
    ac36:	44b9      	add	r9, r7
    ac38:	44c8      	add	r8, r9
    ac3a:	44c4      	add	ip, r8
    ac3c:	4463      	add	r3, ip
    ac3e:	681a      	ldr	r2, [r3, #0]
    ac40:	0013      	movs	r3, r2
    ac42:	005b      	lsls	r3, r3, #1
    ac44:	189b      	adds	r3, r3, r2
    ac46:	22d7      	movs	r2, #215	; 0xd7
    ac48:	00d2      	lsls	r2, r2, #3
    ac4a:	2020      	movs	r0, #32
    ac4c:	4684      	mov	ip, r0
    ac4e:	2008      	movs	r0, #8
    ac50:	4680      	mov	r8, r0
    ac52:	2008      	movs	r0, #8
    ac54:	4681      	mov	r9, r0
    ac56:	44b9      	add	r9, r7
    ac58:	44c8      	add	r8, r9
    ac5a:	44c4      	add	ip, r8
    ac5c:	4462      	add	r2, ip
    ac5e:	6812      	ldr	r2, [r2, #0]
    ac60:	189b      	adds	r3, r3, r2
    ac62:	009b      	lsls	r3, r3, #2
    ac64:	585a      	ldr	r2, [r3, r1]
    ac66:	4bcf      	ldr	r3, [pc, #828]	; (afa4 <cal_write_report+0x16fc>)
    ac68:	21d8      	movs	r1, #216	; 0xd8
    ac6a:	00c9      	lsls	r1, r1, #3
    ac6c:	2020      	movs	r0, #32
    ac6e:	4684      	mov	ip, r0
    ac70:	2008      	movs	r0, #8
    ac72:	4680      	mov	r8, r0
    ac74:	2008      	movs	r0, #8
    ac76:	4681      	mov	r9, r0
    ac78:	44b9      	add	r9, r7
    ac7a:	44c8      	add	r8, r9
    ac7c:	44c4      	add	ip, r8
    ac7e:	4461      	add	r1, ip
    ac80:	18c9      	adds	r1, r1, r3
    ac82:	23d7      	movs	r3, #215	; 0xd7
    ac84:	00db      	lsls	r3, r3, #3
    ac86:	2020      	movs	r0, #32
    ac88:	4684      	mov	ip, r0
    ac8a:	2008      	movs	r0, #8
    ac8c:	4680      	mov	r8, r0
    ac8e:	2008      	movs	r0, #8
    ac90:	4681      	mov	r9, r0
    ac92:	44b9      	add	r9, r7
    ac94:	44c8      	add	r8, r9
    ac96:	44c4      	add	ip, r8
    ac98:	4463      	add	r3, ip
    ac9a:	681b      	ldr	r3, [r3, #0]
    ac9c:	330a      	adds	r3, #10
    ac9e:	009b      	lsls	r3, r3, #2
    aca0:	18cb      	adds	r3, r1, r3
    aca2:	3304      	adds	r3, #4
    aca4:	601a      	str	r2, [r3, #0]
			temp_meas.c1xyz[j] = c1cal[i][j];
    aca6:	49c1      	ldr	r1, [pc, #772]	; (afac <cal_write_report+0x1704>)
    aca8:	4bbd      	ldr	r3, [pc, #756]	; (afa0 <cal_write_report+0x16f8>)
    acaa:	2220      	movs	r2, #32
    acac:	4694      	mov	ip, r2
    acae:	2208      	movs	r2, #8
    acb0:	4690      	mov	r8, r2
    acb2:	2208      	movs	r2, #8
    acb4:	4691      	mov	r9, r2
    acb6:	44b9      	add	r9, r7
    acb8:	44c8      	add	r8, r9
    acba:	44c4      	add	ip, r8
    acbc:	4463      	add	r3, ip
    acbe:	681a      	ldr	r2, [r3, #0]
    acc0:	0013      	movs	r3, r2
    acc2:	005b      	lsls	r3, r3, #1
    acc4:	189b      	adds	r3, r3, r2
    acc6:	22d7      	movs	r2, #215	; 0xd7
    acc8:	00d2      	lsls	r2, r2, #3
    acca:	2020      	movs	r0, #32
    accc:	4684      	mov	ip, r0
    acce:	2008      	movs	r0, #8
    acd0:	4680      	mov	r8, r0
    acd2:	2008      	movs	r0, #8
    acd4:	4681      	mov	r9, r0
    acd6:	44b9      	add	r9, r7
    acd8:	44c8      	add	r8, r9
    acda:	44c4      	add	ip, r8
    acdc:	4462      	add	r2, ip
    acde:	6812      	ldr	r2, [r2, #0]
    ace0:	189b      	adds	r3, r3, r2
    ace2:	009b      	lsls	r3, r3, #2
    ace4:	5859      	ldr	r1, [r3, r1]
    ace6:	4baf      	ldr	r3, [pc, #700]	; (afa4 <cal_write_report+0x16fc>)
    ace8:	22d8      	movs	r2, #216	; 0xd8
    acea:	00d2      	lsls	r2, r2, #3
    acec:	4694      	mov	ip, r2
    acee:	2220      	movs	r2, #32
    acf0:	4690      	mov	r8, r2
    acf2:	2208      	movs	r2, #8
    acf4:	4691      	mov	r9, r2
    acf6:	2208      	movs	r2, #8
    acf8:	4692      	mov	sl, r2
    acfa:	44ba      	add	sl, r7
    acfc:	44d1      	add	r9, sl
    acfe:	44c8      	add	r8, r9
    ad00:	44c4      	add	ip, r8
    ad02:	4463      	add	r3, ip
    ad04:	22d7      	movs	r2, #215	; 0xd7
    ad06:	00d2      	lsls	r2, r2, #3
    ad08:	2020      	movs	r0, #32
    ad0a:	4684      	mov	ip, r0
    ad0c:	2008      	movs	r0, #8
    ad0e:	4680      	mov	r8, r0
    ad10:	2008      	movs	r0, #8
    ad12:	4681      	mov	r9, r0
    ad14:	44b9      	add	r9, r7
    ad16:	44c8      	add	r8, r9
    ad18:	44c4      	add	ip, r8
    ad1a:	4462      	add	r2, ip
    ad1c:	6812      	ldr	r2, [r2, #0]
    ad1e:	320e      	adds	r2, #14
    ad20:	0092      	lsls	r2, r2, #2
    ad22:	50d1      	str	r1, [r2, r3]
			temp_meas.c2xyz[j] = c2cal[i][j];
    ad24:	49a2      	ldr	r1, [pc, #648]	; (afb0 <cal_write_report+0x1708>)
    ad26:	4b9e      	ldr	r3, [pc, #632]	; (afa0 <cal_write_report+0x16f8>)
    ad28:	2220      	movs	r2, #32
    ad2a:	4694      	mov	ip, r2
    ad2c:	2208      	movs	r2, #8
    ad2e:	4690      	mov	r8, r2
    ad30:	2208      	movs	r2, #8
    ad32:	4691      	mov	r9, r2
    ad34:	44b9      	add	r9, r7
    ad36:	44c8      	add	r8, r9
    ad38:	44c4      	add	ip, r8
    ad3a:	4463      	add	r3, ip
    ad3c:	681a      	ldr	r2, [r3, #0]
    ad3e:	0013      	movs	r3, r2
    ad40:	005b      	lsls	r3, r3, #1
    ad42:	189b      	adds	r3, r3, r2
    ad44:	22d7      	movs	r2, #215	; 0xd7
    ad46:	00d2      	lsls	r2, r2, #3
    ad48:	2020      	movs	r0, #32
    ad4a:	4684      	mov	ip, r0
    ad4c:	2008      	movs	r0, #8
    ad4e:	4680      	mov	r8, r0
    ad50:	2008      	movs	r0, #8
    ad52:	4681      	mov	r9, r0
    ad54:	44b9      	add	r9, r7
    ad56:	44c8      	add	r8, r9
    ad58:	44c4      	add	ip, r8
    ad5a:	4462      	add	r2, ip
    ad5c:	6812      	ldr	r2, [r2, #0]
    ad5e:	189b      	adds	r3, r3, r2
    ad60:	009b      	lsls	r3, r3, #2
    ad62:	585a      	ldr	r2, [r3, r1]
    ad64:	4b8f      	ldr	r3, [pc, #572]	; (afa4 <cal_write_report+0x16fc>)
    ad66:	21d8      	movs	r1, #216	; 0xd8
    ad68:	00c9      	lsls	r1, r1, #3
    ad6a:	2020      	movs	r0, #32
    ad6c:	4684      	mov	ip, r0
    ad6e:	2008      	movs	r0, #8
    ad70:	4680      	mov	r8, r0
    ad72:	2008      	movs	r0, #8
    ad74:	4681      	mov	r9, r0
    ad76:	44b9      	add	r9, r7
    ad78:	44c8      	add	r8, r9
    ad7a:	44c4      	add	ip, r8
    ad7c:	4461      	add	r1, ip
    ad7e:	18c9      	adds	r1, r1, r3
    ad80:	23d7      	movs	r3, #215	; 0xd7
    ad82:	00db      	lsls	r3, r3, #3
    ad84:	2020      	movs	r0, #32
    ad86:	4684      	mov	ip, r0
    ad88:	2008      	movs	r0, #8
    ad8a:	4680      	mov	r8, r0
    ad8c:	2008      	movs	r0, #8
    ad8e:	4681      	mov	r9, r0
    ad90:	44b9      	add	r9, r7
    ad92:	44c8      	add	r8, r9
    ad94:	44c4      	add	ip, r8
    ad96:	4463      	add	r3, ip
    ad98:	681b      	ldr	r3, [r3, #0]
    ad9a:	3310      	adds	r3, #16
    ad9c:	009b      	lsls	r3, r3, #2
    ad9e:	18cb      	adds	r3, r1, r3
    ada0:	3304      	adds	r3, #4
    ada2:	601a      	str	r2, [r3, #0]
		for (j=0;j<3;j++){
    ada4:	23d7      	movs	r3, #215	; 0xd7
    ada6:	00db      	lsls	r3, r3, #3
    ada8:	2220      	movs	r2, #32
    adaa:	4694      	mov	ip, r2
    adac:	2208      	movs	r2, #8
    adae:	4690      	mov	r8, r2
    adb0:	2208      	movs	r2, #8
    adb2:	4691      	mov	r9, r2
    adb4:	44b9      	add	r9, r7
    adb6:	44c8      	add	r8, r9
    adb8:	44c4      	add	ip, r8
    adba:	4463      	add	r3, ip
    adbc:	681b      	ldr	r3, [r3, #0]
    adbe:	3301      	adds	r3, #1
    adc0:	22d7      	movs	r2, #215	; 0xd7
    adc2:	00d2      	lsls	r2, r2, #3
    adc4:	2120      	movs	r1, #32
    adc6:	468c      	mov	ip, r1
    adc8:	2108      	movs	r1, #8
    adca:	4688      	mov	r8, r1
    adcc:	2108      	movs	r1, #8
    adce:	4689      	mov	r9, r1
    add0:	44b9      	add	r9, r7
    add2:	44c8      	add	r8, r9
    add4:	44c4      	add	ip, r8
    add6:	4462      	add	r2, ip
    add8:	6013      	str	r3, [r2, #0]
    adda:	23d7      	movs	r3, #215	; 0xd7
    addc:	00db      	lsls	r3, r3, #3
    adde:	2220      	movs	r2, #32
    ade0:	4694      	mov	ip, r2
    ade2:	2208      	movs	r2, #8
    ade4:	4690      	mov	r8, r2
    ade6:	2208      	movs	r2, #8
    ade8:	4691      	mov	r9, r2
    adea:	44b9      	add	r9, r7
    adec:	44c8      	add	r8, r9
    adee:	44c4      	add	ip, r8
    adf0:	4463      	add	r3, ip
    adf2:	681b      	ldr	r3, [r3, #0]
    adf4:	2b02      	cmp	r3, #2
    adf6:	d800      	bhi.n	adfa <cal_write_report+0x1552>
    adf8:	e6d6      	b.n	aba8 <cal_write_report+0x1300>
		}
		calc_orientation(&temp_meas);
    adfa:	2324      	movs	r3, #36	; 0x24
    adfc:	2208      	movs	r2, #8
    adfe:	4694      	mov	ip, r2
    ae00:	2208      	movs	r2, #8
    ae02:	4690      	mov	r8, r2
    ae04:	44b8      	add	r8, r7
    ae06:	44c4      	add	ip, r8
    ae08:	4463      	add	r3, ip
    ae0a:	0018      	movs	r0, r3
    ae0c:	4b69      	ldr	r3, [pc, #420]	; (afb4 <cal_write_report+0x170c>)
    ae0e:	4798      	blx	r3
		azm_cal = temp_meas.azimuth;
    ae10:	4b64      	ldr	r3, [pc, #400]	; (afa4 <cal_write_report+0x16fc>)
    ae12:	22d8      	movs	r2, #216	; 0xd8
    ae14:	00d2      	lsls	r2, r2, #3
    ae16:	4694      	mov	ip, r2
    ae18:	2220      	movs	r2, #32
    ae1a:	4690      	mov	r8, r2
    ae1c:	2208      	movs	r2, #8
    ae1e:	4691      	mov	r9, r2
    ae20:	2208      	movs	r2, #8
    ae22:	4692      	mov	sl, r2
    ae24:	44ba      	add	sl, r7
    ae26:	44d1      	add	r9, sl
    ae28:	44c8      	add	r8, r9
    ae2a:	44c4      	add	ip, r8
    ae2c:	4463      	add	r3, ip
    ae2e:	68db      	ldr	r3, [r3, #12]
    ae30:	4a61      	ldr	r2, [pc, #388]	; (afb8 <cal_write_report+0x1710>)
    ae32:	2120      	movs	r1, #32
    ae34:	468c      	mov	ip, r1
    ae36:	2108      	movs	r1, #8
    ae38:	4688      	mov	r8, r1
    ae3a:	2108      	movs	r1, #8
    ae3c:	4689      	mov	r9, r1
    ae3e:	44b9      	add	r9, r7
    ae40:	44c8      	add	r8, r9
    ae42:	44c4      	add	ip, r8
    ae44:	4462      	add	r2, ip
    ae46:	6013      	str	r3, [r2, #0]
		inc_cal = temp_meas.inclination;
    ae48:	4b56      	ldr	r3, [pc, #344]	; (afa4 <cal_write_report+0x16fc>)
    ae4a:	22d8      	movs	r2, #216	; 0xd8
    ae4c:	00d2      	lsls	r2, r2, #3
    ae4e:	4694      	mov	ip, r2
    ae50:	2220      	movs	r2, #32
    ae52:	4690      	mov	r8, r2
    ae54:	2208      	movs	r2, #8
    ae56:	4691      	mov	r9, r2
    ae58:	2208      	movs	r2, #8
    ae5a:	4692      	mov	sl, r2
    ae5c:	44ba      	add	sl, r7
    ae5e:	44d1      	add	r9, sl
    ae60:	44c8      	add	r8, r9
    ae62:	44c4      	add	ip, r8
    ae64:	4463      	add	r3, ip
    ae66:	691b      	ldr	r3, [r3, #16]
    ae68:	22d2      	movs	r2, #210	; 0xd2
    ae6a:	00d2      	lsls	r2, r2, #3
    ae6c:	2120      	movs	r1, #32
    ae6e:	468c      	mov	ip, r1
    ae70:	2108      	movs	r1, #8
    ae72:	4688      	mov	r8, r1
    ae74:	2108      	movs	r1, #8
    ae76:	4689      	mov	r9, r1
    ae78:	44b9      	add	r9, r7
    ae7a:	44c8      	add	r8, r9
    ae7c:	44c4      	add	ip, r8
    ae7e:	4462      	add	r2, ip
    ae80:	6013      	str	r3, [r2, #0]
		roll_cal = temp_meas.roll;
    ae82:	4b48      	ldr	r3, [pc, #288]	; (afa4 <cal_write_report+0x16fc>)
    ae84:	22d8      	movs	r2, #216	; 0xd8
    ae86:	00d2      	lsls	r2, r2, #3
    ae88:	4694      	mov	ip, r2
    ae8a:	2220      	movs	r2, #32
    ae8c:	4690      	mov	r8, r2
    ae8e:	2208      	movs	r2, #8
    ae90:	4691      	mov	r9, r2
    ae92:	2208      	movs	r2, #8
    ae94:	4692      	mov	sl, r2
    ae96:	44ba      	add	sl, r7
    ae98:	44d1      	add	r9, sl
    ae9a:	44c8      	add	r8, r9
    ae9c:	44c4      	add	ip, r8
    ae9e:	4463      	add	r3, ip
    aea0:	695b      	ldr	r3, [r3, #20]
    aea2:	4a46      	ldr	r2, [pc, #280]	; (afbc <cal_write_report+0x1714>)
    aea4:	2120      	movs	r1, #32
    aea6:	468c      	mov	ip, r1
    aea8:	2108      	movs	r1, #8
    aeaa:	4688      	mov	r8, r1
    aeac:	2108      	movs	r1, #8
    aeae:	4689      	mov	r9, r1
    aeb0:	44b9      	add	r9, r7
    aeb2:	44c8      	add	r8, r9
    aeb4:	44c4      	add	ip, r8
    aeb6:	4462      	add	r2, ip
    aeb8:	6013      	str	r3, [r2, #0]
		group_current = floor(i/group_size)+1;
    aeba:	4b39      	ldr	r3, [pc, #228]	; (afa0 <cal_write_report+0x16f8>)
    aebc:	2220      	movs	r2, #32
    aebe:	4694      	mov	ip, r2
    aec0:	2208      	movs	r2, #8
    aec2:	4690      	mov	r8, r2
    aec4:	2208      	movs	r2, #8
    aec6:	4691      	mov	r9, r2
    aec8:	44b9      	add	r9, r7
    aeca:	44c8      	add	r8, r9
    aecc:	44c4      	add	ip, r8
    aece:	4463      	add	r3, ip
    aed0:	681b      	ldr	r3, [r3, #0]
    aed2:	089a      	lsrs	r2, r3, #2
    aed4:	4b3a      	ldr	r3, [pc, #232]	; (afc0 <cal_write_report+0x1718>)
    aed6:	0010      	movs	r0, r2
    aed8:	4798      	blx	r3
    aeda:	0003      	movs	r3, r0
    aedc:	000c      	movs	r4, r1
    aede:	0018      	movs	r0, r3
    aee0:	0021      	movs	r1, r4
    aee2:	4b38      	ldr	r3, [pc, #224]	; (afc4 <cal_write_report+0x171c>)
    aee4:	4798      	blx	r3
    aee6:	4c38      	ldr	r4, [pc, #224]	; (afc8 <cal_write_report+0x1720>)
    aee8:	2200      	movs	r2, #0
    aeea:	4b38      	ldr	r3, [pc, #224]	; (afcc <cal_write_report+0x1724>)
    aeec:	47a0      	blx	r4
    aeee:	0003      	movs	r3, r0
    aef0:	000c      	movs	r4, r1
    aef2:	0019      	movs	r1, r3
    aef4:	0022      	movs	r2, r4
    aef6:	4b36      	ldr	r3, [pc, #216]	; (afd0 <cal_write_report+0x1728>)
    aef8:	0008      	movs	r0, r1
    aefa:	0011      	movs	r1, r2
    aefc:	4798      	blx	r3
    aefe:	0003      	movs	r3, r0
    af00:	22d1      	movs	r2, #209	; 0xd1
    af02:	00d2      	lsls	r2, r2, #3
    af04:	2120      	movs	r1, #32
    af06:	468c      	mov	ip, r1
    af08:	2108      	movs	r1, #8
    af0a:	4688      	mov	r8, r1
    af0c:	2108      	movs	r1, #8
    af0e:	4689      	mov	r9, r1
    af10:	44b9      	add	r9, r7
    af12:	44c8      	add	r8, r9
    af14:	44c4      	add	ip, r8
    af16:	4462      	add	r2, ip
    af18:	6013      	str	r3, [r2, #0]
		sprintf(write_str1,"%-2d,    %-2d,      %03.2f,   %03.2f,      %03.2f,   %03.2f,   %03.2f,      %03.2f\r\n",
    af1a:	4b21      	ldr	r3, [pc, #132]	; (afa0 <cal_write_report+0x16f8>)
    af1c:	2220      	movs	r2, #32
    af1e:	4694      	mov	ip, r2
    af20:	2208      	movs	r2, #8
    af22:	4690      	mov	r8, r2
    af24:	2208      	movs	r2, #8
    af26:	4691      	mov	r9, r2
    af28:	44b9      	add	r9, r7
    af2a:	44c8      	add	r8, r9
    af2c:	44c4      	add	ip, r8
    af2e:	4463      	add	r3, ip
    af30:	681b      	ldr	r3, [r3, #0]
    af32:	3301      	adds	r3, #1
    af34:	4698      	mov	r8, r3
    af36:	4b27      	ldr	r3, [pc, #156]	; (afd4 <cal_write_report+0x172c>)
    af38:	22d4      	movs	r2, #212	; 0xd4
    af3a:	00d2      	lsls	r2, r2, #3
    af3c:	2120      	movs	r1, #32
    af3e:	468c      	mov	ip, r1
    af40:	2108      	movs	r1, #8
    af42:	4689      	mov	r9, r1
    af44:	2108      	movs	r1, #8
    af46:	468a      	mov	sl, r1
    af48:	44ba      	add	sl, r7
    af4a:	44d1      	add	r9, sl
    af4c:	44cc      	add	ip, r9
    af4e:	4462      	add	r2, ip
    af50:	6810      	ldr	r0, [r2, #0]
    af52:	4798      	blx	r3
    af54:	0005      	movs	r5, r0
    af56:	000e      	movs	r6, r1
    af58:	4b1e      	ldr	r3, [pc, #120]	; (afd4 <cal_write_report+0x172c>)
    af5a:	4a1f      	ldr	r2, [pc, #124]	; (afd8 <cal_write_report+0x1730>)
    af5c:	2120      	movs	r1, #32
    af5e:	468c      	mov	ip, r1
    af60:	2108      	movs	r1, #8
    af62:	4689      	mov	r9, r1
    af64:	2108      	movs	r1, #8
    af66:	468a      	mov	sl, r1
    af68:	44ba      	add	sl, r7
    af6a:	44d1      	add	r9, sl
    af6c:	44cc      	add	ip, r9
    af6e:	4462      	add	r2, ip
    af70:	6810      	ldr	r0, [r2, #0]
    af72:	4798      	blx	r3
    af74:	62b8      	str	r0, [r7, #40]	; 0x28
    af76:	62f9      	str	r1, [r7, #44]	; 0x2c
    af78:	4b16      	ldr	r3, [pc, #88]	; (afd4 <cal_write_report+0x172c>)
    af7a:	22d3      	movs	r2, #211	; 0xd3
    af7c:	00d2      	lsls	r2, r2, #3
    af7e:	2120      	movs	r1, #32
    af80:	468c      	mov	ip, r1
    af82:	2108      	movs	r1, #8
    af84:	4689      	mov	r9, r1
    af86:	2108      	movs	r1, #8
    af88:	468a      	mov	sl, r1
    af8a:	44ba      	add	sl, r7
    af8c:	44d1      	add	r9, sl
    af8e:	44cc      	add	ip, r9
    af90:	4462      	add	r2, ip
    af92:	6810      	ldr	r0, [r2, #0]
    af94:	4798      	blx	r3
    af96:	6238      	str	r0, [r7, #32]
    af98:	6279      	str	r1, [r7, #36]	; 0x24
    af9a:	e01f      	b.n	afdc <cal_write_report+0x1734>
    af9c:	200039fc 	.word	0x200039fc
    afa0:	000006bc 	.word	0x000006bc
    afa4:	fffff944 	.word	0xfffff944
    afa8:	20004b74 	.word	0x20004b74
    afac:	200027cc 	.word	0x200027cc
    afb0:	20003634 	.word	0x20003634
    afb4:	0000c0d5 	.word	0x0000c0d5
    afb8:	00000694 	.word	0x00000694
    afbc:	0000068c 	.word	0x0000068c
    afc0:	0002399d 	.word	0x0002399d
    afc4:	0001e1f5 	.word	0x0001e1f5
    afc8:	00021ebd 	.word	0x00021ebd
    afcc:	3ff00000 	.word	0x3ff00000
    afd0:	00021099 	.word	0x00021099
    afd4:	00023a0d 	.word	0x00023a0d
    afd8:	0000069c 	.word	0x0000069c
    afdc:	4bab      	ldr	r3, [pc, #684]	; (b28c <cal_write_report+0x19e4>)
    afde:	4aac      	ldr	r2, [pc, #688]	; (b290 <cal_write_report+0x19e8>)
    afe0:	2120      	movs	r1, #32
    afe2:	468c      	mov	ip, r1
    afe4:	2108      	movs	r1, #8
    afe6:	4689      	mov	r9, r1
    afe8:	2108      	movs	r1, #8
    afea:	468a      	mov	sl, r1
    afec:	44ba      	add	sl, r7
    afee:	44d1      	add	r9, sl
    aff0:	44cc      	add	ip, r9
    aff2:	4462      	add	r2, ip
    aff4:	6810      	ldr	r0, [r2, #0]
    aff6:	4798      	blx	r3
    aff8:	61b8      	str	r0, [r7, #24]
    affa:	61f9      	str	r1, [r7, #28]
    affc:	4ba3      	ldr	r3, [pc, #652]	; (b28c <cal_write_report+0x19e4>)
    affe:	22d2      	movs	r2, #210	; 0xd2
    b000:	00d2      	lsls	r2, r2, #3
    b002:	2120      	movs	r1, #32
    b004:	468c      	mov	ip, r1
    b006:	2108      	movs	r1, #8
    b008:	4689      	mov	r9, r1
    b00a:	2108      	movs	r1, #8
    b00c:	468a      	mov	sl, r1
    b00e:	44ba      	add	sl, r7
    b010:	44d1      	add	r9, sl
    b012:	44cc      	add	ip, r9
    b014:	4462      	add	r2, ip
    b016:	6810      	ldr	r0, [r2, #0]
    b018:	4798      	blx	r3
    b01a:	6138      	str	r0, [r7, #16]
    b01c:	6179      	str	r1, [r7, #20]
    b01e:	4b9b      	ldr	r3, [pc, #620]	; (b28c <cal_write_report+0x19e4>)
    b020:	4a9c      	ldr	r2, [pc, #624]	; (b294 <cal_write_report+0x19ec>)
    b022:	2120      	movs	r1, #32
    b024:	468c      	mov	ip, r1
    b026:	2108      	movs	r1, #8
    b028:	4689      	mov	r9, r1
    b02a:	2108      	movs	r1, #8
    b02c:	468a      	mov	sl, r1
    b02e:	44ba      	add	sl, r7
    b030:	44d1      	add	r9, sl
    b032:	44cc      	add	ip, r9
    b034:	4462      	add	r2, ip
    b036:	6810      	ldr	r0, [r2, #0]
    b038:	4798      	blx	r3
    b03a:	60b8      	str	r0, [r7, #8]
    b03c:	60f9      	str	r1, [r7, #12]
    b03e:	22d1      	movs	r2, #209	; 0xd1
    b040:	00d2      	lsls	r2, r2, #3
    b042:	2120      	movs	r1, #32
    b044:	468c      	mov	ip, r1
    b046:	2308      	movs	r3, #8
    b048:	4699      	mov	r9, r3
    b04a:	2308      	movs	r3, #8
    b04c:	469a      	mov	sl, r3
    b04e:	44ba      	add	sl, r7
    b050:	44d1      	add	r9, sl
    b052:	44cc      	add	ip, r9
    b054:	4462      	add	r2, ip
    b056:	6812      	ldr	r2, [r2, #0]
    b058:	498f      	ldr	r1, [pc, #572]	; (b298 <cal_write_report+0x19f0>)
    b05a:	20cc      	movs	r0, #204	; 0xcc
    b05c:	0080      	lsls	r0, r0, #2
    b05e:	2320      	movs	r3, #32
    b060:	469c      	mov	ip, r3
    b062:	2308      	movs	r3, #8
    b064:	4699      	mov	r9, r3
    b066:	2308      	movs	r3, #8
    b068:	469a      	mov	sl, r3
    b06a:	44ba      	add	sl, r7
    b06c:	44d1      	add	r9, sl
    b06e:	44cc      	add	ip, r9
    b070:	4460      	add	r0, ip
    b072:	68bb      	ldr	r3, [r7, #8]
    b074:	68fc      	ldr	r4, [r7, #12]
    b076:	930a      	str	r3, [sp, #40]	; 0x28
    b078:	940b      	str	r4, [sp, #44]	; 0x2c
    b07a:	693b      	ldr	r3, [r7, #16]
    b07c:	697c      	ldr	r4, [r7, #20]
    b07e:	9308      	str	r3, [sp, #32]
    b080:	9409      	str	r4, [sp, #36]	; 0x24
    b082:	69bb      	ldr	r3, [r7, #24]
    b084:	69fc      	ldr	r4, [r7, #28]
    b086:	9306      	str	r3, [sp, #24]
    b088:	9407      	str	r4, [sp, #28]
    b08a:	6a3b      	ldr	r3, [r7, #32]
    b08c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    b08e:	9304      	str	r3, [sp, #16]
    b090:	9405      	str	r4, [sp, #20]
    b092:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b094:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    b096:	9302      	str	r3, [sp, #8]
    b098:	9403      	str	r4, [sp, #12]
    b09a:	9500      	str	r5, [sp, #0]
    b09c:	9601      	str	r6, [sp, #4]
    b09e:	4643      	mov	r3, r8
    b0a0:	4c7e      	ldr	r4, [pc, #504]	; (b29c <cal_write_report+0x19f4>)
    b0a2:	47a0      	blx	r4
			group_current, i+1,  azm_raw, inc_raw, roll_raw, azm_cal, inc_cal, roll_cal);
			
		fdebug3 = f_write(&file_cal_report, write_str1, strlen(write_str1), pbw);
    b0a4:	23cc      	movs	r3, #204	; 0xcc
    b0a6:	009b      	lsls	r3, r3, #2
    b0a8:	2220      	movs	r2, #32
    b0aa:	4694      	mov	ip, r2
    b0ac:	2208      	movs	r2, #8
    b0ae:	4690      	mov	r8, r2
    b0b0:	2208      	movs	r2, #8
    b0b2:	4691      	mov	r9, r2
    b0b4:	44b9      	add	r9, r7
    b0b6:	44c8      	add	r8, r9
    b0b8:	44c4      	add	ip, r8
    b0ba:	4463      	add	r3, ip
    b0bc:	0018      	movs	r0, r3
    b0be:	4b78      	ldr	r3, [pc, #480]	; (b2a0 <cal_write_report+0x19f8>)
    b0c0:	4798      	blx	r3
    b0c2:	0002      	movs	r2, r0
    b0c4:	4b77      	ldr	r3, [pc, #476]	; (b2a4 <cal_write_report+0x19fc>)
    b0c6:	2120      	movs	r1, #32
    b0c8:	2008      	movs	r0, #8
    b0ca:	4684      	mov	ip, r0
    b0cc:	2008      	movs	r0, #8
    b0ce:	4680      	mov	r8, r0
    b0d0:	44b8      	add	r8, r7
    b0d2:	44c4      	add	ip, r8
    b0d4:	4461      	add	r1, ip
    b0d6:	18cc      	adds	r4, r1, r3
    b0d8:	23d5      	movs	r3, #213	; 0xd5
    b0da:	00db      	lsls	r3, r3, #3
    b0dc:	2120      	movs	r1, #32
    b0de:	468c      	mov	ip, r1
    b0e0:	2108      	movs	r1, #8
    b0e2:	4688      	mov	r8, r1
    b0e4:	2108      	movs	r1, #8
    b0e6:	4689      	mov	r9, r1
    b0e8:	44b9      	add	r9, r7
    b0ea:	44c8      	add	r8, r9
    b0ec:	44c4      	add	ip, r8
    b0ee:	4463      	add	r3, ip
    b0f0:	681b      	ldr	r3, [r3, #0]
    b0f2:	21cc      	movs	r1, #204	; 0xcc
    b0f4:	0089      	lsls	r1, r1, #2
    b0f6:	2020      	movs	r0, #32
    b0f8:	4684      	mov	ip, r0
    b0fa:	2008      	movs	r0, #8
    b0fc:	4680      	mov	r8, r0
    b0fe:	2008      	movs	r0, #8
    b100:	4681      	mov	r9, r0
    b102:	44b9      	add	r9, r7
    b104:	44c8      	add	r8, r9
    b106:	44c4      	add	ip, r8
    b108:	4461      	add	r1, ip
    b10a:	4867      	ldr	r0, [pc, #412]	; (b2a8 <cal_write_report+0x1a00>)
    b10c:	4d67      	ldr	r5, [pc, #412]	; (b2ac <cal_write_report+0x1a04>)
    b10e:	47a8      	blx	r5
    b110:	0003      	movs	r3, r0
    b112:	7023      	strb	r3, [r4, #0]
	for (i=0;i<n_points;i++){
    b114:	4b66      	ldr	r3, [pc, #408]	; (b2b0 <cal_write_report+0x1a08>)
    b116:	2220      	movs	r2, #32
    b118:	4694      	mov	ip, r2
    b11a:	2208      	movs	r2, #8
    b11c:	4690      	mov	r8, r2
    b11e:	2208      	movs	r2, #8
    b120:	4691      	mov	r9, r2
    b122:	44b9      	add	r9, r7
    b124:	44c8      	add	r8, r9
    b126:	44c4      	add	ip, r8
    b128:	4463      	add	r3, ip
    b12a:	681b      	ldr	r3, [r3, #0]
    b12c:	3301      	adds	r3, #1
    b12e:	4a60      	ldr	r2, [pc, #384]	; (b2b0 <cal_write_report+0x1a08>)
    b130:	2120      	movs	r1, #32
    b132:	468c      	mov	ip, r1
    b134:	2108      	movs	r1, #8
    b136:	4688      	mov	r8, r1
    b138:	2108      	movs	r1, #8
    b13a:	4689      	mov	r9, r1
    b13c:	44b9      	add	r9, r7
    b13e:	44c8      	add	r8, r9
    b140:	44c4      	add	ip, r8
    b142:	4462      	add	r2, ip
    b144:	6013      	str	r3, [r2, #0]
    b146:	4b5b      	ldr	r3, [pc, #364]	; (b2b4 <cal_write_report+0x1a0c>)
    b148:	681b      	ldr	r3, [r3, #0]
    b14a:	4a59      	ldr	r2, [pc, #356]	; (b2b0 <cal_write_report+0x1a08>)
    b14c:	2120      	movs	r1, #32
    b14e:	468c      	mov	ip, r1
    b150:	2108      	movs	r1, #8
    b152:	4688      	mov	r8, r1
    b154:	2108      	movs	r1, #8
    b156:	4689      	mov	r9, r1
    b158:	44b9      	add	r9, r7
    b15a:	44c8      	add	r8, r9
    b15c:	44c4      	add	ip, r8
    b15e:	4462      	add	r2, ip
    b160:	6812      	ldr	r2, [r2, #0]
    b162:	429a      	cmp	r2, r3
    b164:	d201      	bcs.n	b16a <cal_write_report+0x18c2>
    b166:	f7ff fb52 	bl	a80e <cal_write_report+0xf66>
		
	}
	
	
	f_close(&file_cal_report);
    b16a:	4b4f      	ldr	r3, [pc, #316]	; (b2a8 <cal_write_report+0x1a00>)
    b16c:	0018      	movs	r0, r3
    b16e:	4b52      	ldr	r3, [pc, #328]	; (b2b8 <cal_write_report+0x1a10>)
    b170:	4798      	blx	r3
	
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//write raw data file
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_raw_data.bin", current_time.year, current_time.month, current_time.date,
    b172:	4b52      	ldr	r3, [pc, #328]	; (b2bc <cal_write_report+0x1a14>)
    b174:	799b      	ldrb	r3, [r3, #6]
    b176:	001e      	movs	r6, r3
    b178:	4b50      	ldr	r3, [pc, #320]	; (b2bc <cal_write_report+0x1a14>)
    b17a:	795b      	ldrb	r3, [r3, #5]
    b17c:	62bb      	str	r3, [r7, #40]	; 0x28
    b17e:	4b4f      	ldr	r3, [pc, #316]	; (b2bc <cal_write_report+0x1a14>)
    b180:	791b      	ldrb	r3, [r3, #4]
    b182:	001a      	movs	r2, r3
	current_time.hours, current_time.minutes, current_time.seconds);
    b184:	4b4d      	ldr	r3, [pc, #308]	; (b2bc <cal_write_report+0x1a14>)
    b186:	789b      	ldrb	r3, [r3, #2]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_raw_data.bin", current_time.year, current_time.month, current_time.date,
    b188:	001c      	movs	r4, r3
	current_time.hours, current_time.minutes, current_time.seconds);
    b18a:	4b4c      	ldr	r3, [pc, #304]	; (b2bc <cal_write_report+0x1a14>)
    b18c:	785b      	ldrb	r3, [r3, #1]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_raw_data.bin", current_time.year, current_time.month, current_time.date,
    b18e:	001d      	movs	r5, r3
	current_time.hours, current_time.minutes, current_time.seconds);
    b190:	4b4a      	ldr	r3, [pc, #296]	; (b2bc <cal_write_report+0x1a14>)
    b192:	781b      	ldrb	r3, [r3, #0]
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_calibration_raw_data.bin", current_time.year, current_time.month, current_time.date,
    b194:	4698      	mov	r8, r3
    b196:	494a      	ldr	r1, [pc, #296]	; (b2c0 <cal_write_report+0x1a18>)
    b198:	20b1      	movs	r0, #177	; 0xb1
    b19a:	00c0      	lsls	r0, r0, #3
    b19c:	2320      	movs	r3, #32
    b19e:	469c      	mov	ip, r3
    b1a0:	2308      	movs	r3, #8
    b1a2:	4699      	mov	r9, r3
    b1a4:	2308      	movs	r3, #8
    b1a6:	469a      	mov	sl, r3
    b1a8:	44ba      	add	sl, r7
    b1aa:	44d1      	add	r9, sl
    b1ac:	44cc      	add	ip, r9
    b1ae:	4460      	add	r0, ip
    b1b0:	4643      	mov	r3, r8
    b1b2:	9303      	str	r3, [sp, #12]
    b1b4:	9502      	str	r5, [sp, #8]
    b1b6:	9401      	str	r4, [sp, #4]
    b1b8:	9200      	str	r2, [sp, #0]
    b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b1bc:	0032      	movs	r2, r6
    b1be:	4c37      	ldr	r4, [pc, #220]	; (b29c <cal_write_report+0x19f4>)
    b1c0:	47a0      	blx	r4
	
	fdebug2 = f_open(&file_cal_raw, file_name, FA_CREATE_NEW | FA_READ | FA_WRITE);
    b1c2:	4b40      	ldr	r3, [pc, #256]	; (b2c4 <cal_write_report+0x1a1c>)
    b1c4:	2220      	movs	r2, #32
    b1c6:	2108      	movs	r1, #8
    b1c8:	468c      	mov	ip, r1
    b1ca:	2108      	movs	r1, #8
    b1cc:	4688      	mov	r8, r1
    b1ce:	44b8      	add	r8, r7
    b1d0:	44c4      	add	ip, r8
    b1d2:	4462      	add	r2, ip
    b1d4:	18d4      	adds	r4, r2, r3
    b1d6:	23b1      	movs	r3, #177	; 0xb1
    b1d8:	00db      	lsls	r3, r3, #3
    b1da:	2220      	movs	r2, #32
    b1dc:	2108      	movs	r1, #8
    b1de:	468c      	mov	ip, r1
    b1e0:	2108      	movs	r1, #8
    b1e2:	4688      	mov	r8, r1
    b1e4:	44b8      	add	r8, r7
    b1e6:	44c4      	add	ip, r8
    b1e8:	4462      	add	r2, ip
    b1ea:	18d1      	adds	r1, r2, r3
    b1ec:	4b36      	ldr	r3, [pc, #216]	; (b2c8 <cal_write_report+0x1a20>)
    b1ee:	2207      	movs	r2, #7
    b1f0:	0018      	movs	r0, r3
    b1f2:	4b36      	ldr	r3, [pc, #216]	; (b2cc <cal_write_report+0x1a24>)
    b1f4:	4798      	blx	r3
    b1f6:	0003      	movs	r3, r0
    b1f8:	7023      	strb	r3, [r4, #0]
	if(fdebug2 != FR_OK){
    b1fa:	4b32      	ldr	r3, [pc, #200]	; (b2c4 <cal_write_report+0x1a1c>)
    b1fc:	2220      	movs	r2, #32
    b1fe:	4694      	mov	ip, r2
    b200:	2208      	movs	r2, #8
    b202:	4690      	mov	r8, r2
    b204:	2208      	movs	r2, #8
    b206:	4691      	mov	r9, r2
    b208:	44b9      	add	r9, r7
    b20a:	44c8      	add	r8, r9
    b20c:	44c4      	add	ip, r8
    b20e:	4463      	add	r3, ip
    b210:	781b      	ldrb	r3, [r3, #0]
    b212:	2b00      	cmp	r3, #0
    b214:	d01d      	beq.n	b252 <cal_write_report+0x19aa>
		// Some other SD card error
		SD_status = fdebug2;
    b216:	4b2e      	ldr	r3, [pc, #184]	; (b2d0 <cal_write_report+0x1a28>)
    b218:	4a2a      	ldr	r2, [pc, #168]	; (b2c4 <cal_write_report+0x1a1c>)
    b21a:	2120      	movs	r1, #32
    b21c:	468c      	mov	ip, r1
    b21e:	2108      	movs	r1, #8
    b220:	4688      	mov	r8, r1
    b222:	2108      	movs	r1, #8
    b224:	4689      	mov	r9, r1
    b226:	44b9      	add	r9, r7
    b228:	44c8      	add	r8, r9
    b22a:	44c4      	add	ip, r8
    b22c:	4462      	add	r2, ip
    b22e:	7812      	ldrb	r2, [r2, #0]
    b230:	701a      	strb	r2, [r3, #0]
		config_spi(LCD);
    b232:	2000      	movs	r0, #0
    b234:	4b27      	ldr	r3, [pc, #156]	; (b2d4 <cal_write_report+0x1a2c>)
    b236:	4798      	blx	r3
		return fdebug2;
    b238:	4b22      	ldr	r3, [pc, #136]	; (b2c4 <cal_write_report+0x1a1c>)
    b23a:	2220      	movs	r2, #32
    b23c:	4694      	mov	ip, r2
    b23e:	2208      	movs	r2, #8
    b240:	4690      	mov	r8, r2
    b242:	2208      	movs	r2, #8
    b244:	4691      	mov	r9, r2
    b246:	44b9      	add	r9, r7
    b248:	44c8      	add	r8, r9
    b24a:	44c4      	add	ip, r8
    b24c:	4463      	add	r3, ip
    b24e:	781b      	ldrb	r3, [r3, #0]
    b250:	e1c1      	b.n	b5d6 <cal_write_report+0x1d2e>
	}
	
	
	// Write File
	for (i=0;i<n_points;i++){
    b252:	2300      	movs	r3, #0
    b254:	4a16      	ldr	r2, [pc, #88]	; (b2b0 <cal_write_report+0x1a08>)
    b256:	2120      	movs	r1, #32
    b258:	468c      	mov	ip, r1
    b25a:	2108      	movs	r1, #8
    b25c:	4688      	mov	r8, r1
    b25e:	2108      	movs	r1, #8
    b260:	4689      	mov	r9, r1
    b262:	44b9      	add	r9, r7
    b264:	44c8      	add	r8, r9
    b266:	44c4      	add	ip, r8
    b268:	4462      	add	r2, ip
    b26a:	6013      	str	r3, [r2, #0]
    b26c:	e192      	b.n	b594 <cal_write_report+0x1cec>
		for (k=0;k<3;k++){
    b26e:	2300      	movs	r3, #0
    b270:	4a19      	ldr	r2, [pc, #100]	; (b2d8 <cal_write_report+0x1a30>)
    b272:	2120      	movs	r1, #32
    b274:	468c      	mov	ip, r1
    b276:	2108      	movs	r1, #8
    b278:	4688      	mov	r8, r1
    b27a:	2108      	movs	r1, #8
    b27c:	4689      	mov	r9, r1
    b27e:	44b9      	add	r9, r7
    b280:	44c8      	add	r8, r9
    b282:	44c4      	add	ip, r8
    b284:	4462      	add	r2, ip
    b286:	6013      	str	r3, [r2, #0]
    b288:	e135      	b.n	b4f6 <cal_write_report+0x1c4e>
    b28a:	46c0      	nop			; (mov r8, r8)
    b28c:	00023a0d 	.word	0x00023a0d
    b290:	00000694 	.word	0x00000694
    b294:	0000068c 	.word	0x0000068c
    b298:	000285ac 	.word	0x000285ac
    b29c:	00023d31 	.word	0x00023d31
    b2a0:	00023dd1 	.word	0x00023dd1
    b2a4:	000006b3 	.word	0x000006b3
    b2a8:	20002b8c 	.word	0x20002b8c
    b2ac:	000141e9 	.word	0x000141e9
    b2b0:	000006bc 	.word	0x000006bc
    b2b4:	20002db4 	.word	0x20002db4
    b2b8:	00014619 	.word	0x00014619
    b2bc:	200011f4 	.word	0x200011f4
    b2c0:	00028604 	.word	0x00028604
    b2c4:	000006a5 	.word	0x000006a5
    b2c8:	20003dbc 	.word	0x20003dbc
    b2cc:	00013c4d 	.word	0x00013c4d
    b2d0:	20004135 	.word	0x20004135
    b2d4:	00010311 	.word	0x00010311
    b2d8:	000006b4 	.word	0x000006b4
			raw_data_entry[k] = a1raw[i][k];
    b2dc:	49c3      	ldr	r1, [pc, #780]	; (b5ec <cal_write_report+0x1d44>)
    b2de:	4bc4      	ldr	r3, [pc, #784]	; (b5f0 <cal_write_report+0x1d48>)
    b2e0:	2220      	movs	r2, #32
    b2e2:	4694      	mov	ip, r2
    b2e4:	2208      	movs	r2, #8
    b2e6:	4690      	mov	r8, r2
    b2e8:	2208      	movs	r2, #8
    b2ea:	4691      	mov	r9, r2
    b2ec:	44b9      	add	r9, r7
    b2ee:	44c8      	add	r8, r9
    b2f0:	44c4      	add	ip, r8
    b2f2:	4463      	add	r3, ip
    b2f4:	681a      	ldr	r2, [r3, #0]
    b2f6:	0013      	movs	r3, r2
    b2f8:	005b      	lsls	r3, r3, #1
    b2fa:	189b      	adds	r3, r3, r2
    b2fc:	4abd      	ldr	r2, [pc, #756]	; (b5f4 <cal_write_report+0x1d4c>)
    b2fe:	2020      	movs	r0, #32
    b300:	4684      	mov	ip, r0
    b302:	2008      	movs	r0, #8
    b304:	4680      	mov	r8, r0
    b306:	2008      	movs	r0, #8
    b308:	4681      	mov	r9, r0
    b30a:	44b9      	add	r9, r7
    b30c:	44c8      	add	r8, r9
    b30e:	44c4      	add	ip, r8
    b310:	4462      	add	r2, ip
    b312:	6812      	ldr	r2, [r2, #0]
    b314:	189b      	adds	r3, r3, r2
    b316:	009b      	lsls	r3, r3, #2
    b318:	5859      	ldr	r1, [r3, r1]
    b31a:	4bb7      	ldr	r3, [pc, #732]	; (b5f8 <cal_write_report+0x1d50>)
    b31c:	22d8      	movs	r2, #216	; 0xd8
    b31e:	00d2      	lsls	r2, r2, #3
    b320:	4694      	mov	ip, r2
    b322:	2220      	movs	r2, #32
    b324:	4690      	mov	r8, r2
    b326:	2208      	movs	r2, #8
    b328:	4691      	mov	r9, r2
    b32a:	2208      	movs	r2, #8
    b32c:	4692      	mov	sl, r2
    b32e:	44ba      	add	sl, r7
    b330:	44d1      	add	r9, sl
    b332:	44c8      	add	r8, r9
    b334:	44c4      	add	ip, r8
    b336:	4463      	add	r3, ip
    b338:	4aae      	ldr	r2, [pc, #696]	; (b5f4 <cal_write_report+0x1d4c>)
    b33a:	2020      	movs	r0, #32
    b33c:	4684      	mov	ip, r0
    b33e:	2008      	movs	r0, #8
    b340:	4680      	mov	r8, r0
    b342:	2008      	movs	r0, #8
    b344:	4681      	mov	r9, r0
    b346:	44b9      	add	r9, r7
    b348:	44c8      	add	r8, r9
    b34a:	44c4      	add	ip, r8
    b34c:	4462      	add	r2, ip
    b34e:	6812      	ldr	r2, [r2, #0]
    b350:	0092      	lsls	r2, r2, #2
    b352:	50d1      	str	r1, [r2, r3]
			raw_data_entry[k+3] = a2raw[i][k];
    b354:	4ba7      	ldr	r3, [pc, #668]	; (b5f4 <cal_write_report+0x1d4c>)
    b356:	2220      	movs	r2, #32
    b358:	4694      	mov	ip, r2
    b35a:	2208      	movs	r2, #8
    b35c:	4690      	mov	r8, r2
    b35e:	2208      	movs	r2, #8
    b360:	4691      	mov	r9, r2
    b362:	44b9      	add	r9, r7
    b364:	44c8      	add	r8, r9
    b366:	44c4      	add	ip, r8
    b368:	4463      	add	r3, ip
    b36a:	681b      	ldr	r3, [r3, #0]
    b36c:	1cd8      	adds	r0, r3, #3
    b36e:	49a3      	ldr	r1, [pc, #652]	; (b5fc <cal_write_report+0x1d54>)
    b370:	4b9f      	ldr	r3, [pc, #636]	; (b5f0 <cal_write_report+0x1d48>)
    b372:	2220      	movs	r2, #32
    b374:	4694      	mov	ip, r2
    b376:	2208      	movs	r2, #8
    b378:	4690      	mov	r8, r2
    b37a:	2208      	movs	r2, #8
    b37c:	4691      	mov	r9, r2
    b37e:	44b9      	add	r9, r7
    b380:	44c8      	add	r8, r9
    b382:	44c4      	add	ip, r8
    b384:	4463      	add	r3, ip
    b386:	681a      	ldr	r2, [r3, #0]
    b388:	0013      	movs	r3, r2
    b38a:	005b      	lsls	r3, r3, #1
    b38c:	189b      	adds	r3, r3, r2
    b38e:	4a99      	ldr	r2, [pc, #612]	; (b5f4 <cal_write_report+0x1d4c>)
    b390:	2420      	movs	r4, #32
    b392:	46a4      	mov	ip, r4
    b394:	2408      	movs	r4, #8
    b396:	46a0      	mov	r8, r4
    b398:	2408      	movs	r4, #8
    b39a:	46a1      	mov	r9, r4
    b39c:	44b9      	add	r9, r7
    b39e:	44c8      	add	r8, r9
    b3a0:	44c4      	add	ip, r8
    b3a2:	4462      	add	r2, ip
    b3a4:	6812      	ldr	r2, [r2, #0]
    b3a6:	189b      	adds	r3, r3, r2
    b3a8:	009b      	lsls	r3, r3, #2
    b3aa:	5859      	ldr	r1, [r3, r1]
    b3ac:	4b92      	ldr	r3, [pc, #584]	; (b5f8 <cal_write_report+0x1d50>)
    b3ae:	22d8      	movs	r2, #216	; 0xd8
    b3b0:	00d2      	lsls	r2, r2, #3
    b3b2:	4694      	mov	ip, r2
    b3b4:	2220      	movs	r2, #32
    b3b6:	4690      	mov	r8, r2
    b3b8:	2208      	movs	r2, #8
    b3ba:	4691      	mov	r9, r2
    b3bc:	2208      	movs	r2, #8
    b3be:	4692      	mov	sl, r2
    b3c0:	44ba      	add	sl, r7
    b3c2:	44d1      	add	r9, sl
    b3c4:	44c8      	add	r8, r9
    b3c6:	44c4      	add	ip, r8
    b3c8:	4463      	add	r3, ip
    b3ca:	0082      	lsls	r2, r0, #2
    b3cc:	50d1      	str	r1, [r2, r3]
			raw_data_entry[k+6] = c1raw[i][k];
    b3ce:	4b89      	ldr	r3, [pc, #548]	; (b5f4 <cal_write_report+0x1d4c>)
    b3d0:	2220      	movs	r2, #32
    b3d2:	4694      	mov	ip, r2
    b3d4:	2208      	movs	r2, #8
    b3d6:	4690      	mov	r8, r2
    b3d8:	2208      	movs	r2, #8
    b3da:	4691      	mov	r9, r2
    b3dc:	44b9      	add	r9, r7
    b3de:	44c8      	add	r8, r9
    b3e0:	44c4      	add	ip, r8
    b3e2:	4463      	add	r3, ip
    b3e4:	681b      	ldr	r3, [r3, #0]
    b3e6:	1d98      	adds	r0, r3, #6
    b3e8:	4985      	ldr	r1, [pc, #532]	; (b600 <cal_write_report+0x1d58>)
    b3ea:	4b81      	ldr	r3, [pc, #516]	; (b5f0 <cal_write_report+0x1d48>)
    b3ec:	2220      	movs	r2, #32
    b3ee:	4694      	mov	ip, r2
    b3f0:	2208      	movs	r2, #8
    b3f2:	4690      	mov	r8, r2
    b3f4:	2208      	movs	r2, #8
    b3f6:	4691      	mov	r9, r2
    b3f8:	44b9      	add	r9, r7
    b3fa:	44c8      	add	r8, r9
    b3fc:	44c4      	add	ip, r8
    b3fe:	4463      	add	r3, ip
    b400:	681a      	ldr	r2, [r3, #0]
    b402:	0013      	movs	r3, r2
    b404:	005b      	lsls	r3, r3, #1
    b406:	189b      	adds	r3, r3, r2
    b408:	4a7a      	ldr	r2, [pc, #488]	; (b5f4 <cal_write_report+0x1d4c>)
    b40a:	2420      	movs	r4, #32
    b40c:	46a4      	mov	ip, r4
    b40e:	2408      	movs	r4, #8
    b410:	46a0      	mov	r8, r4
    b412:	2408      	movs	r4, #8
    b414:	46a1      	mov	r9, r4
    b416:	44b9      	add	r9, r7
    b418:	44c8      	add	r8, r9
    b41a:	44c4      	add	ip, r8
    b41c:	4462      	add	r2, ip
    b41e:	6812      	ldr	r2, [r2, #0]
    b420:	189b      	adds	r3, r3, r2
    b422:	009b      	lsls	r3, r3, #2
    b424:	5859      	ldr	r1, [r3, r1]
    b426:	4b74      	ldr	r3, [pc, #464]	; (b5f8 <cal_write_report+0x1d50>)
    b428:	22d8      	movs	r2, #216	; 0xd8
    b42a:	00d2      	lsls	r2, r2, #3
    b42c:	4694      	mov	ip, r2
    b42e:	2220      	movs	r2, #32
    b430:	4690      	mov	r8, r2
    b432:	2208      	movs	r2, #8
    b434:	4691      	mov	r9, r2
    b436:	2208      	movs	r2, #8
    b438:	4692      	mov	sl, r2
    b43a:	44ba      	add	sl, r7
    b43c:	44d1      	add	r9, sl
    b43e:	44c8      	add	r8, r9
    b440:	44c4      	add	ip, r8
    b442:	4463      	add	r3, ip
    b444:	0082      	lsls	r2, r0, #2
    b446:	50d1      	str	r1, [r2, r3]
			raw_data_entry[k+9] = c2raw[i][k];
    b448:	4b6a      	ldr	r3, [pc, #424]	; (b5f4 <cal_write_report+0x1d4c>)
    b44a:	2220      	movs	r2, #32
    b44c:	4694      	mov	ip, r2
    b44e:	2208      	movs	r2, #8
    b450:	4690      	mov	r8, r2
    b452:	2208      	movs	r2, #8
    b454:	4691      	mov	r9, r2
    b456:	44b9      	add	r9, r7
    b458:	44c8      	add	r8, r9
    b45a:	44c4      	add	ip, r8
    b45c:	4463      	add	r3, ip
    b45e:	681b      	ldr	r3, [r3, #0]
    b460:	3309      	adds	r3, #9
    b462:	0018      	movs	r0, r3
    b464:	4967      	ldr	r1, [pc, #412]	; (b604 <cal_write_report+0x1d5c>)
    b466:	4b62      	ldr	r3, [pc, #392]	; (b5f0 <cal_write_report+0x1d48>)
    b468:	2220      	movs	r2, #32
    b46a:	4694      	mov	ip, r2
    b46c:	2208      	movs	r2, #8
    b46e:	4690      	mov	r8, r2
    b470:	2208      	movs	r2, #8
    b472:	4691      	mov	r9, r2
    b474:	44b9      	add	r9, r7
    b476:	44c8      	add	r8, r9
    b478:	44c4      	add	ip, r8
    b47a:	4463      	add	r3, ip
    b47c:	681a      	ldr	r2, [r3, #0]
    b47e:	0013      	movs	r3, r2
    b480:	005b      	lsls	r3, r3, #1
    b482:	189b      	adds	r3, r3, r2
    b484:	4a5b      	ldr	r2, [pc, #364]	; (b5f4 <cal_write_report+0x1d4c>)
    b486:	2420      	movs	r4, #32
    b488:	46a4      	mov	ip, r4
    b48a:	2408      	movs	r4, #8
    b48c:	46a0      	mov	r8, r4
    b48e:	2408      	movs	r4, #8
    b490:	46a1      	mov	r9, r4
    b492:	44b9      	add	r9, r7
    b494:	44c8      	add	r8, r9
    b496:	44c4      	add	ip, r8
    b498:	4462      	add	r2, ip
    b49a:	6812      	ldr	r2, [r2, #0]
    b49c:	189b      	adds	r3, r3, r2
    b49e:	009b      	lsls	r3, r3, #2
    b4a0:	5859      	ldr	r1, [r3, r1]
    b4a2:	4b55      	ldr	r3, [pc, #340]	; (b5f8 <cal_write_report+0x1d50>)
    b4a4:	22d8      	movs	r2, #216	; 0xd8
    b4a6:	00d2      	lsls	r2, r2, #3
    b4a8:	4694      	mov	ip, r2
    b4aa:	2220      	movs	r2, #32
    b4ac:	4690      	mov	r8, r2
    b4ae:	2208      	movs	r2, #8
    b4b0:	4691      	mov	r9, r2
    b4b2:	2208      	movs	r2, #8
    b4b4:	4692      	mov	sl, r2
    b4b6:	44ba      	add	sl, r7
    b4b8:	44d1      	add	r9, sl
    b4ba:	44c8      	add	r8, r9
    b4bc:	44c4      	add	ip, r8
    b4be:	4463      	add	r3, ip
    b4c0:	0082      	lsls	r2, r0, #2
    b4c2:	50d1      	str	r1, [r2, r3]
		for (k=0;k<3;k++){
    b4c4:	4b4b      	ldr	r3, [pc, #300]	; (b5f4 <cal_write_report+0x1d4c>)
    b4c6:	2220      	movs	r2, #32
    b4c8:	4694      	mov	ip, r2
    b4ca:	2208      	movs	r2, #8
    b4cc:	4690      	mov	r8, r2
    b4ce:	2208      	movs	r2, #8
    b4d0:	4691      	mov	r9, r2
    b4d2:	44b9      	add	r9, r7
    b4d4:	44c8      	add	r8, r9
    b4d6:	44c4      	add	ip, r8
    b4d8:	4463      	add	r3, ip
    b4da:	681b      	ldr	r3, [r3, #0]
    b4dc:	3301      	adds	r3, #1
    b4de:	4a45      	ldr	r2, [pc, #276]	; (b5f4 <cal_write_report+0x1d4c>)
    b4e0:	2120      	movs	r1, #32
    b4e2:	468c      	mov	ip, r1
    b4e4:	2108      	movs	r1, #8
    b4e6:	4688      	mov	r8, r1
    b4e8:	2108      	movs	r1, #8
    b4ea:	4689      	mov	r9, r1
    b4ec:	44b9      	add	r9, r7
    b4ee:	44c8      	add	r8, r9
    b4f0:	44c4      	add	ip, r8
    b4f2:	4462      	add	r2, ip
    b4f4:	6013      	str	r3, [r2, #0]
    b4f6:	4b3f      	ldr	r3, [pc, #252]	; (b5f4 <cal_write_report+0x1d4c>)
    b4f8:	2220      	movs	r2, #32
    b4fa:	4694      	mov	ip, r2
    b4fc:	2208      	movs	r2, #8
    b4fe:	4690      	mov	r8, r2
    b500:	2208      	movs	r2, #8
    b502:	4691      	mov	r9, r2
    b504:	44b9      	add	r9, r7
    b506:	44c8      	add	r8, r9
    b508:	44c4      	add	ip, r8
    b50a:	4463      	add	r3, ip
    b50c:	681b      	ldr	r3, [r3, #0]
    b50e:	2b02      	cmp	r3, #2
    b510:	d800      	bhi.n	b514 <cal_write_report+0x1c6c>
    b512:	e6e3      	b.n	b2dc <cal_write_report+0x1a34>
			
		}
		//fdebug2 = f_lseek(&file_cal, f_size(&file_cal));
		fdebug3 = f_write(&file_cal_raw, raw_data_entry, sizeof(raw_data_entry), pbw);
    b514:	4b3c      	ldr	r3, [pc, #240]	; (b608 <cal_write_report+0x1d60>)
    b516:	2220      	movs	r2, #32
    b518:	2108      	movs	r1, #8
    b51a:	468c      	mov	ip, r1
    b51c:	2108      	movs	r1, #8
    b51e:	4688      	mov	r8, r1
    b520:	44b8      	add	r8, r7
    b522:	44c4      	add	ip, r8
    b524:	4462      	add	r2, ip
    b526:	18d4      	adds	r4, r2, r3
    b528:	23d5      	movs	r3, #213	; 0xd5
    b52a:	00db      	lsls	r3, r3, #3
    b52c:	2220      	movs	r2, #32
    b52e:	4694      	mov	ip, r2
    b530:	2208      	movs	r2, #8
    b532:	4690      	mov	r8, r2
    b534:	2208      	movs	r2, #8
    b536:	4691      	mov	r9, r2
    b538:	44b9      	add	r9, r7
    b53a:	44c8      	add	r8, r9
    b53c:	44c4      	add	ip, r8
    b53e:	4463      	add	r3, ip
    b540:	681b      	ldr	r3, [r3, #0]
    b542:	22a8      	movs	r2, #168	; 0xa8
    b544:	2120      	movs	r1, #32
    b546:	2008      	movs	r0, #8
    b548:	4684      	mov	ip, r0
    b54a:	2008      	movs	r0, #8
    b54c:	4680      	mov	r8, r0
    b54e:	44b8      	add	r8, r7
    b550:	44c4      	add	ip, r8
    b552:	4461      	add	r1, ip
    b554:	1889      	adds	r1, r1, r2
    b556:	482d      	ldr	r0, [pc, #180]	; (b60c <cal_write_report+0x1d64>)
    b558:	2230      	movs	r2, #48	; 0x30
    b55a:	4d2d      	ldr	r5, [pc, #180]	; (b610 <cal_write_report+0x1d68>)
    b55c:	47a8      	blx	r5
    b55e:	0003      	movs	r3, r0
    b560:	7023      	strb	r3, [r4, #0]
	for (i=0;i<n_points;i++){
    b562:	4b23      	ldr	r3, [pc, #140]	; (b5f0 <cal_write_report+0x1d48>)
    b564:	2220      	movs	r2, #32
    b566:	4694      	mov	ip, r2
    b568:	2208      	movs	r2, #8
    b56a:	4690      	mov	r8, r2
    b56c:	2208      	movs	r2, #8
    b56e:	4691      	mov	r9, r2
    b570:	44b9      	add	r9, r7
    b572:	44c8      	add	r8, r9
    b574:	44c4      	add	ip, r8
    b576:	4463      	add	r3, ip
    b578:	681b      	ldr	r3, [r3, #0]
    b57a:	3301      	adds	r3, #1
    b57c:	4a1c      	ldr	r2, [pc, #112]	; (b5f0 <cal_write_report+0x1d48>)
    b57e:	2120      	movs	r1, #32
    b580:	468c      	mov	ip, r1
    b582:	2108      	movs	r1, #8
    b584:	4688      	mov	r8, r1
    b586:	2108      	movs	r1, #8
    b588:	4689      	mov	r9, r1
    b58a:	44b9      	add	r9, r7
    b58c:	44c8      	add	r8, r9
    b58e:	44c4      	add	ip, r8
    b590:	4462      	add	r2, ip
    b592:	6013      	str	r3, [r2, #0]
    b594:	4b1f      	ldr	r3, [pc, #124]	; (b614 <cal_write_report+0x1d6c>)
    b596:	681b      	ldr	r3, [r3, #0]
    b598:	4a15      	ldr	r2, [pc, #84]	; (b5f0 <cal_write_report+0x1d48>)
    b59a:	2120      	movs	r1, #32
    b59c:	468c      	mov	ip, r1
    b59e:	2108      	movs	r1, #8
    b5a0:	4688      	mov	r8, r1
    b5a2:	2108      	movs	r1, #8
    b5a4:	4689      	mov	r9, r1
    b5a6:	44b9      	add	r9, r7
    b5a8:	44c8      	add	r8, r9
    b5aa:	44c4      	add	ip, r8
    b5ac:	4462      	add	r2, ip
    b5ae:	6812      	ldr	r2, [r2, #0]
    b5b0:	429a      	cmp	r2, r3
    b5b2:	d200      	bcs.n	b5b6 <cal_write_report+0x1d0e>
    b5b4:	e65b      	b.n	b26e <cal_write_report+0x19c6>
	}
	
	//fdebug3 = f_write(&file2, write_string_full, strlen(write_string_full), bw);
	f_close(&file_cal_raw);
    b5b6:	4b15      	ldr	r3, [pc, #84]	; (b60c <cal_write_report+0x1d64>)
    b5b8:	0018      	movs	r0, r3
    b5ba:	4b17      	ldr	r3, [pc, #92]	; (b618 <cal_write_report+0x1d70>)
    b5bc:	4798      	blx	r3
	
	
	return fdebug3;
    b5be:	4b12      	ldr	r3, [pc, #72]	; (b608 <cal_write_report+0x1d60>)
    b5c0:	2220      	movs	r2, #32
    b5c2:	4694      	mov	ip, r2
    b5c4:	2208      	movs	r2, #8
    b5c6:	4690      	mov	r8, r2
    b5c8:	2208      	movs	r2, #8
    b5ca:	4691      	mov	r9, r2
    b5cc:	44b9      	add	r9, r7
    b5ce:	44c8      	add	r8, r9
    b5d0:	44c4      	add	ip, r8
    b5d2:	4463      	add	r3, ip
    b5d4:	781b      	ldrb	r3, [r3, #0]
	
}
    b5d6:	0018      	movs	r0, r3
    b5d8:	46bd      	mov	sp, r7
    b5da:	23de      	movs	r3, #222	; 0xde
    b5dc:	00db      	lsls	r3, r3, #3
    b5de:	449d      	add	sp, r3
    b5e0:	bc1c      	pop	{r2, r3, r4}
    b5e2:	4690      	mov	r8, r2
    b5e4:	4699      	mov	r9, r3
    b5e6:	46a2      	mov	sl, r4
    b5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5ea:	46c0      	nop			; (mov r8, r8)
    b5ec:	20004f98 	.word	0x20004f98
    b5f0:	000006bc 	.word	0x000006bc
    b5f4:	000006b4 	.word	0x000006b4
    b5f8:	fffff9e8 	.word	0xfffff9e8
    b5fc:	2000414c 	.word	0x2000414c
    b600:	20001fe8 	.word	0x20001fe8
    b604:	2000240c 	.word	0x2000240c
    b608:	000006b3 	.word	0x000006b3
    b60c:	20003dbc 	.word	0x20003dbc
    b610:	000141e9 	.word	0x000141e9
    b614:	20002db4 	.word	0x20002db4
    b618:	00014619 	.word	0x00014619

0000b61c <cal_evaluate>:





void cal_evaluate(void){
    b61c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b61e:	4cc6      	ldr	r4, [pc, #792]	; (b938 <cal_evaluate+0x31c>)
    b620:	44a5      	add	sp, r4
    b622:	af00      	add	r7, sp, #0
	float inc_avg, azm_avg;
	float inc_err_array[nbuf];
	float azm_err_array[nbuf];
	
	//  Fill Out data for report structure
	get_time();//  Get current time
    b624:	4bc5      	ldr	r3, [pc, #788]	; (b93c <cal_evaluate+0x320>)
    b626:	4798      	blx	r3
	cal_report_azm_inc.timestamp = gen_posix_time(&current_time);
    b628:	4bc5      	ldr	r3, [pc, #788]	; (b940 <cal_evaluate+0x324>)
    b62a:	0018      	movs	r0, r3
    b62c:	4bc5      	ldr	r3, [pc, #788]	; (b944 <cal_evaluate+0x328>)
    b62e:	4798      	blx	r3
    b630:	0002      	movs	r2, r0
    b632:	4bc5      	ldr	r3, [pc, #788]	; (b948 <cal_evaluate+0x32c>)
    b634:	60da      	str	r2, [r3, #12]
	cal_report_azm_inc.software_version = software_version;
    b636:	4bc5      	ldr	r3, [pc, #788]	; (b94c <cal_evaluate+0x330>)
    b638:	681a      	ldr	r2, [r3, #0]
    b63a:	4bc3      	ldr	r3, [pc, #780]	; (b948 <cal_evaluate+0x32c>)
    b63c:	601a      	str	r2, [r3, #0]
	cal_report_azm_inc.points = n_points;
    b63e:	4bc4      	ldr	r3, [pc, #784]	; (b950 <cal_evaluate+0x334>)
    b640:	681a      	ldr	r2, [r3, #0]
    b642:	4bc1      	ldr	r3, [pc, #772]	; (b948 <cal_evaluate+0x32c>)
    b644:	609a      	str	r2, [r3, #8]
	cal_report_azm_inc.groups = n_groups;
    b646:	4bc3      	ldr	r3, [pc, #780]	; (b954 <cal_evaluate+0x338>)
    b648:	681a      	ldr	r2, [r3, #0]
    b64a:	4bbf      	ldr	r3, [pc, #764]	; (b948 <cal_evaluate+0x32c>)
    b64c:	605a      	str	r2, [r3, #4]
	memcpy(&cal_report_azm_inc.time_struct,&current_time,sizeof(current_time));
    b64e:	4bbe      	ldr	r3, [pc, #760]	; (b948 <cal_evaluate+0x32c>)
    b650:	4abb      	ldr	r2, [pc, #748]	; (b940 <cal_evaluate+0x324>)
    b652:	3340      	adds	r3, #64	; 0x40
    b654:	ca13      	ldmia	r2!, {r0, r1, r4}
    b656:	c313      	stmia	r3!, {r0, r1, r4}
    b658:	ca03      	ldmia	r2!, {r0, r1}
    b65a:	c303      	stmia	r3!, {r0, r1}

	//  Calculate azimuth, incination, and roll for all data
	for (p=0;p<n_points;p++){
    b65c:	2300      	movs	r3, #0
    b65e:	22d8      	movs	r2, #216	; 0xd8
    b660:	0092      	lsls	r2, r2, #2
    b662:	18ba      	adds	r2, r7, r2
    b664:	6013      	str	r3, [r2, #0]
    b666:	e0ac      	b.n	b7c2 <cal_evaluate+0x1a6>
		for (i=0;i<3;i++){
    b668:	2300      	movs	r3, #0
    b66a:	22d9      	movs	r2, #217	; 0xd9
    b66c:	0092      	lsls	r2, r2, #2
    b66e:	18ba      	adds	r2, r7, r2
    b670:	6013      	str	r3, [r2, #0]
    b672:	e070      	b.n	b756 <cal_evaluate+0x13a>
			temp_meas.a1xyz[i] = a1cal[p][i];
    b674:	49b8      	ldr	r1, [pc, #736]	; (b958 <cal_evaluate+0x33c>)
    b676:	23d8      	movs	r3, #216	; 0xd8
    b678:	009b      	lsls	r3, r3, #2
    b67a:	18fb      	adds	r3, r7, r3
    b67c:	681a      	ldr	r2, [r3, #0]
    b67e:	0013      	movs	r3, r2
    b680:	005b      	lsls	r3, r3, #1
    b682:	189b      	adds	r3, r3, r2
    b684:	22d9      	movs	r2, #217	; 0xd9
    b686:	0092      	lsls	r2, r2, #2
    b688:	18ba      	adds	r2, r7, r2
    b68a:	6812      	ldr	r2, [r2, #0]
    b68c:	189b      	adds	r3, r3, r2
    b68e:	009b      	lsls	r3, r3, #2
    b690:	5859      	ldr	r1, [r3, r1]
    b692:	23a9      	movs	r3, #169	; 0xa9
    b694:	009b      	lsls	r3, r3, #2
    b696:	18fb      	adds	r3, r7, r3
    b698:	22d9      	movs	r2, #217	; 0xd9
    b69a:	0092      	lsls	r2, r2, #2
    b69c:	18ba      	adds	r2, r7, r2
    b69e:	6812      	ldr	r2, [r2, #0]
    b6a0:	3208      	adds	r2, #8
    b6a2:	0092      	lsls	r2, r2, #2
    b6a4:	50d1      	str	r1, [r2, r3]
			temp_meas.a2xyz[i] = a2cal[p][i];
    b6a6:	49ad      	ldr	r1, [pc, #692]	; (b95c <cal_evaluate+0x340>)
    b6a8:	23d8      	movs	r3, #216	; 0xd8
    b6aa:	009b      	lsls	r3, r3, #2
    b6ac:	18fb      	adds	r3, r7, r3
    b6ae:	681a      	ldr	r2, [r3, #0]
    b6b0:	0013      	movs	r3, r2
    b6b2:	005b      	lsls	r3, r3, #1
    b6b4:	189b      	adds	r3, r3, r2
    b6b6:	22d9      	movs	r2, #217	; 0xd9
    b6b8:	0092      	lsls	r2, r2, #2
    b6ba:	18ba      	adds	r2, r7, r2
    b6bc:	6812      	ldr	r2, [r2, #0]
    b6be:	189b      	adds	r3, r3, r2
    b6c0:	009b      	lsls	r3, r3, #2
    b6c2:	585a      	ldr	r2, [r3, r1]
    b6c4:	23a9      	movs	r3, #169	; 0xa9
    b6c6:	009b      	lsls	r3, r3, #2
    b6c8:	18f9      	adds	r1, r7, r3
    b6ca:	23d9      	movs	r3, #217	; 0xd9
    b6cc:	009b      	lsls	r3, r3, #2
    b6ce:	18fb      	adds	r3, r7, r3
    b6d0:	681b      	ldr	r3, [r3, #0]
    b6d2:	330a      	adds	r3, #10
    b6d4:	009b      	lsls	r3, r3, #2
    b6d6:	18cb      	adds	r3, r1, r3
    b6d8:	3304      	adds	r3, #4
    b6da:	601a      	str	r2, [r3, #0]
			temp_meas.c1xyz[i] = c1cal[p][i];
    b6dc:	49a0      	ldr	r1, [pc, #640]	; (b960 <cal_evaluate+0x344>)
    b6de:	23d8      	movs	r3, #216	; 0xd8
    b6e0:	009b      	lsls	r3, r3, #2
    b6e2:	18fb      	adds	r3, r7, r3
    b6e4:	681a      	ldr	r2, [r3, #0]
    b6e6:	0013      	movs	r3, r2
    b6e8:	005b      	lsls	r3, r3, #1
    b6ea:	189b      	adds	r3, r3, r2
    b6ec:	22d9      	movs	r2, #217	; 0xd9
    b6ee:	0092      	lsls	r2, r2, #2
    b6f0:	18ba      	adds	r2, r7, r2
    b6f2:	6812      	ldr	r2, [r2, #0]
    b6f4:	189b      	adds	r3, r3, r2
    b6f6:	009b      	lsls	r3, r3, #2
    b6f8:	5859      	ldr	r1, [r3, r1]
    b6fa:	23a9      	movs	r3, #169	; 0xa9
    b6fc:	009b      	lsls	r3, r3, #2
    b6fe:	18fb      	adds	r3, r7, r3
    b700:	22d9      	movs	r2, #217	; 0xd9
    b702:	0092      	lsls	r2, r2, #2
    b704:	18ba      	adds	r2, r7, r2
    b706:	6812      	ldr	r2, [r2, #0]
    b708:	320e      	adds	r2, #14
    b70a:	0092      	lsls	r2, r2, #2
    b70c:	50d1      	str	r1, [r2, r3]
			temp_meas.c2xyz[i] = c2cal[p][i];
    b70e:	4995      	ldr	r1, [pc, #596]	; (b964 <cal_evaluate+0x348>)
    b710:	23d8      	movs	r3, #216	; 0xd8
    b712:	009b      	lsls	r3, r3, #2
    b714:	18fb      	adds	r3, r7, r3
    b716:	681a      	ldr	r2, [r3, #0]
    b718:	0013      	movs	r3, r2
    b71a:	005b      	lsls	r3, r3, #1
    b71c:	189b      	adds	r3, r3, r2
    b71e:	22d9      	movs	r2, #217	; 0xd9
    b720:	0092      	lsls	r2, r2, #2
    b722:	18ba      	adds	r2, r7, r2
    b724:	6812      	ldr	r2, [r2, #0]
    b726:	189b      	adds	r3, r3, r2
    b728:	009b      	lsls	r3, r3, #2
    b72a:	585a      	ldr	r2, [r3, r1]
    b72c:	23a9      	movs	r3, #169	; 0xa9
    b72e:	009b      	lsls	r3, r3, #2
    b730:	18f9      	adds	r1, r7, r3
    b732:	23d9      	movs	r3, #217	; 0xd9
    b734:	009b      	lsls	r3, r3, #2
    b736:	18fb      	adds	r3, r7, r3
    b738:	681b      	ldr	r3, [r3, #0]
    b73a:	3310      	adds	r3, #16
    b73c:	009b      	lsls	r3, r3, #2
    b73e:	18cb      	adds	r3, r1, r3
    b740:	3304      	adds	r3, #4
    b742:	601a      	str	r2, [r3, #0]
		for (i=0;i<3;i++){
    b744:	23d9      	movs	r3, #217	; 0xd9
    b746:	009b      	lsls	r3, r3, #2
    b748:	18fb      	adds	r3, r7, r3
    b74a:	681b      	ldr	r3, [r3, #0]
    b74c:	3301      	adds	r3, #1
    b74e:	22d9      	movs	r2, #217	; 0xd9
    b750:	0092      	lsls	r2, r2, #2
    b752:	18ba      	adds	r2, r7, r2
    b754:	6013      	str	r3, [r2, #0]
    b756:	23d9      	movs	r3, #217	; 0xd9
    b758:	009b      	lsls	r3, r3, #2
    b75a:	18fb      	adds	r3, r7, r3
    b75c:	681b      	ldr	r3, [r3, #0]
    b75e:	2b02      	cmp	r3, #2
    b760:	d988      	bls.n	b674 <cal_evaluate+0x58>
		}
		calc_orientation(&temp_meas);
    b762:	23a9      	movs	r3, #169	; 0xa9
    b764:	009b      	lsls	r3, r3, #2
    b766:	18fb      	adds	r3, r7, r3
    b768:	0018      	movs	r0, r3
    b76a:	4b7f      	ldr	r3, [pc, #508]	; (b968 <cal_evaluate+0x34c>)
    b76c:	4798      	blx	r3
		azimuth[p] = temp_meas.azimuth;
    b76e:	23a9      	movs	r3, #169	; 0xa9
    b770:	009b      	lsls	r3, r3, #2
    b772:	18fb      	adds	r3, r7, r3
    b774:	68d9      	ldr	r1, [r3, #12]
    b776:	4b7d      	ldr	r3, [pc, #500]	; (b96c <cal_evaluate+0x350>)
    b778:	22d8      	movs	r2, #216	; 0xd8
    b77a:	0092      	lsls	r2, r2, #2
    b77c:	18ba      	adds	r2, r7, r2
    b77e:	6812      	ldr	r2, [r2, #0]
    b780:	0092      	lsls	r2, r2, #2
    b782:	50d1      	str	r1, [r2, r3]
		inclination[p] = temp_meas.inclination;
    b784:	23a9      	movs	r3, #169	; 0xa9
    b786:	009b      	lsls	r3, r3, #2
    b788:	18fb      	adds	r3, r7, r3
    b78a:	6919      	ldr	r1, [r3, #16]
    b78c:	4b78      	ldr	r3, [pc, #480]	; (b970 <cal_evaluate+0x354>)
    b78e:	22d8      	movs	r2, #216	; 0xd8
    b790:	0092      	lsls	r2, r2, #2
    b792:	18ba      	adds	r2, r7, r2
    b794:	6812      	ldr	r2, [r2, #0]
    b796:	0092      	lsls	r2, r2, #2
    b798:	50d1      	str	r1, [r2, r3]
		roll[p] = temp_meas.roll;
    b79a:	23a9      	movs	r3, #169	; 0xa9
    b79c:	009b      	lsls	r3, r3, #2
    b79e:	18fb      	adds	r3, r7, r3
    b7a0:	6959      	ldr	r1, [r3, #20]
    b7a2:	4b74      	ldr	r3, [pc, #464]	; (b974 <cal_evaluate+0x358>)
    b7a4:	22d8      	movs	r2, #216	; 0xd8
    b7a6:	0092      	lsls	r2, r2, #2
    b7a8:	18ba      	adds	r2, r7, r2
    b7aa:	6812      	ldr	r2, [r2, #0]
    b7ac:	0092      	lsls	r2, r2, #2
    b7ae:	50d1      	str	r1, [r2, r3]
	for (p=0;p<n_points;p++){
    b7b0:	23d8      	movs	r3, #216	; 0xd8
    b7b2:	009b      	lsls	r3, r3, #2
    b7b4:	18fb      	adds	r3, r7, r3
    b7b6:	681b      	ldr	r3, [r3, #0]
    b7b8:	3301      	adds	r3, #1
    b7ba:	22d8      	movs	r2, #216	; 0xd8
    b7bc:	0092      	lsls	r2, r2, #2
    b7be:	18ba      	adds	r2, r7, r2
    b7c0:	6013      	str	r3, [r2, #0]
    b7c2:	4b63      	ldr	r3, [pc, #396]	; (b950 <cal_evaluate+0x334>)
    b7c4:	681b      	ldr	r3, [r3, #0]
    b7c6:	22d8      	movs	r2, #216	; 0xd8
    b7c8:	0092      	lsls	r2, r2, #2
    b7ca:	18ba      	adds	r2, r7, r2
    b7cc:	6812      	ldr	r2, [r2, #0]
    b7ce:	429a      	cmp	r2, r3
    b7d0:	d200      	bcs.n	b7d4 <cal_evaluate+0x1b8>
    b7d2:	e749      	b.n	b668 <cal_evaluate+0x4c>
	}
	
	//  evaluate metrics of calibration
	for (g=0;g<n_groups;g++){
    b7d4:	2300      	movs	r3, #0
    b7d6:	22d7      	movs	r2, #215	; 0xd7
    b7d8:	0092      	lsls	r2, r2, #2
    b7da:	18ba      	adds	r2, r7, r2
    b7dc:	6013      	str	r3, [r2, #0]
    b7de:	e1bd      	b.n	bb5c <cal_evaluate+0x540>
		
		//  Create group of shots
		wrap_around = 0;
    b7e0:	4b65      	ldr	r3, [pc, #404]	; (b978 <cal_evaluate+0x35c>)
    b7e2:	18fb      	adds	r3, r7, r3
    b7e4:	2200      	movs	r2, #0
    b7e6:	701a      	strb	r2, [r3, #0]
		for (k=0;k<group_size;k++){
    b7e8:	2300      	movs	r3, #0
    b7ea:	22d6      	movs	r2, #214	; 0xd6
    b7ec:	0092      	lsls	r2, r2, #2
    b7ee:	18ba      	adds	r2, r7, r2
    b7f0:	6013      	str	r3, [r2, #0]
    b7f2:	e049      	b.n	b888 <cal_evaluate+0x26c>
			ind1 = g*group_size+k;
    b7f4:	23d7      	movs	r3, #215	; 0xd7
    b7f6:	009b      	lsls	r3, r3, #2
    b7f8:	18fb      	adds	r3, r7, r3
    b7fa:	681b      	ldr	r3, [r3, #0]
    b7fc:	009a      	lsls	r2, r3, #2
    b7fe:	23d6      	movs	r3, #214	; 0xd6
    b800:	009b      	lsls	r3, r3, #2
    b802:	18fb      	adds	r3, r7, r3
    b804:	681b      	ldr	r3, [r3, #0]
    b806:	18d3      	adds	r3, r2, r3
    b808:	22d2      	movs	r2, #210	; 0xd2
    b80a:	0092      	lsls	r2, r2, #2
    b80c:	18ba      	adds	r2, r7, r2
    b80e:	6013      	str	r3, [r2, #0]
			inc_group[k] = inclination[ind1];
    b810:	4b57      	ldr	r3, [pc, #348]	; (b970 <cal_evaluate+0x354>)
    b812:	22d2      	movs	r2, #210	; 0xd2
    b814:	0092      	lsls	r2, r2, #2
    b816:	18ba      	adds	r2, r7, r2
    b818:	6812      	ldr	r2, [r2, #0]
    b81a:	0092      	lsls	r2, r2, #2
    b81c:	58d1      	ldr	r1, [r2, r3]
    b81e:	23a5      	movs	r3, #165	; 0xa5
    b820:	009b      	lsls	r3, r3, #2
    b822:	18fb      	adds	r3, r7, r3
    b824:	22d6      	movs	r2, #214	; 0xd6
    b826:	0092      	lsls	r2, r2, #2
    b828:	18ba      	adds	r2, r7, r2
    b82a:	6812      	ldr	r2, [r2, #0]
    b82c:	0092      	lsls	r2, r2, #2
    b82e:	50d1      	str	r1, [r2, r3]
			azm_group[k] = azimuth[ind1];
    b830:	4b4e      	ldr	r3, [pc, #312]	; (b96c <cal_evaluate+0x350>)
    b832:	22d2      	movs	r2, #210	; 0xd2
    b834:	0092      	lsls	r2, r2, #2
    b836:	18ba      	adds	r2, r7, r2
    b838:	6812      	ldr	r2, [r2, #0]
    b83a:	0092      	lsls	r2, r2, #2
    b83c:	58d1      	ldr	r1, [r2, r3]
    b83e:	23a1      	movs	r3, #161	; 0xa1
    b840:	009b      	lsls	r3, r3, #2
    b842:	18fb      	adds	r3, r7, r3
    b844:	22d6      	movs	r2, #214	; 0xd6
    b846:	0092      	lsls	r2, r2, #2
    b848:	18ba      	adds	r2, r7, r2
    b84a:	6812      	ldr	r2, [r2, #0]
    b84c:	0092      	lsls	r2, r2, #2
    b84e:	50d1      	str	r1, [r2, r3]
			if (azm_group[k]>340){
    b850:	23a1      	movs	r3, #161	; 0xa1
    b852:	009b      	lsls	r3, r3, #2
    b854:	18fb      	adds	r3, r7, r3
    b856:	22d6      	movs	r2, #214	; 0xd6
    b858:	0092      	lsls	r2, r2, #2
    b85a:	18ba      	adds	r2, r7, r2
    b85c:	6812      	ldr	r2, [r2, #0]
    b85e:	0092      	lsls	r2, r2, #2
    b860:	58d2      	ldr	r2, [r2, r3]
    b862:	4b46      	ldr	r3, [pc, #280]	; (b97c <cal_evaluate+0x360>)
    b864:	4946      	ldr	r1, [pc, #280]	; (b980 <cal_evaluate+0x364>)
    b866:	1c10      	adds	r0, r2, #0
    b868:	4798      	blx	r3
    b86a:	1e03      	subs	r3, r0, #0
    b86c:	d003      	beq.n	b876 <cal_evaluate+0x25a>
				wrap_around = 1;//  Possible wrap-around on azimuth
    b86e:	4b42      	ldr	r3, [pc, #264]	; (b978 <cal_evaluate+0x35c>)
    b870:	18fb      	adds	r3, r7, r3
    b872:	2201      	movs	r2, #1
    b874:	701a      	strb	r2, [r3, #0]
		for (k=0;k<group_size;k++){
    b876:	23d6      	movs	r3, #214	; 0xd6
    b878:	009b      	lsls	r3, r3, #2
    b87a:	18fb      	adds	r3, r7, r3
    b87c:	681b      	ldr	r3, [r3, #0]
    b87e:	3301      	adds	r3, #1
    b880:	22d6      	movs	r2, #214	; 0xd6
    b882:	0092      	lsls	r2, r2, #2
    b884:	18ba      	adds	r2, r7, r2
    b886:	6013      	str	r3, [r2, #0]
    b888:	23d6      	movs	r3, #214	; 0xd6
    b88a:	009b      	lsls	r3, r3, #2
    b88c:	18fb      	adds	r3, r7, r3
    b88e:	681b      	ldr	r3, [r3, #0]
    b890:	2b03      	cmp	r3, #3
    b892:	d9af      	bls.n	b7f4 <cal_evaluate+0x1d8>
			}
		}
		
		//  Adjust for angle wrap-around
		if (wrap_around){
    b894:	4b38      	ldr	r3, [pc, #224]	; (b978 <cal_evaluate+0x35c>)
    b896:	18fb      	adds	r3, r7, r3
    b898:	781b      	ldrb	r3, [r3, #0]
    b89a:	2b00      	cmp	r3, #0
    b89c:	d03b      	beq.n	b916 <cal_evaluate+0x2fa>
			for (k=0;k<group_size;k++){
    b89e:	2300      	movs	r3, #0
    b8a0:	22d6      	movs	r2, #214	; 0xd6
    b8a2:	0092      	lsls	r2, r2, #2
    b8a4:	18ba      	adds	r2, r7, r2
    b8a6:	6013      	str	r3, [r2, #0]
    b8a8:	e02f      	b.n	b90a <cal_evaluate+0x2ee>
				if (azm_group[k]<20){
    b8aa:	23a1      	movs	r3, #161	; 0xa1
    b8ac:	009b      	lsls	r3, r3, #2
    b8ae:	18fb      	adds	r3, r7, r3
    b8b0:	22d6      	movs	r2, #214	; 0xd6
    b8b2:	0092      	lsls	r2, r2, #2
    b8b4:	18ba      	adds	r2, r7, r2
    b8b6:	6812      	ldr	r2, [r2, #0]
    b8b8:	0092      	lsls	r2, r2, #2
    b8ba:	58d2      	ldr	r2, [r2, r3]
    b8bc:	4b31      	ldr	r3, [pc, #196]	; (b984 <cal_evaluate+0x368>)
    b8be:	4932      	ldr	r1, [pc, #200]	; (b988 <cal_evaluate+0x36c>)
    b8c0:	1c10      	adds	r0, r2, #0
    b8c2:	4798      	blx	r3
    b8c4:	1e03      	subs	r3, r0, #0
    b8c6:	d017      	beq.n	b8f8 <cal_evaluate+0x2dc>
					azm_group[k] = azm_group[k]+360;
    b8c8:	23a1      	movs	r3, #161	; 0xa1
    b8ca:	009b      	lsls	r3, r3, #2
    b8cc:	18fb      	adds	r3, r7, r3
    b8ce:	22d6      	movs	r2, #214	; 0xd6
    b8d0:	0092      	lsls	r2, r2, #2
    b8d2:	18ba      	adds	r2, r7, r2
    b8d4:	6812      	ldr	r2, [r2, #0]
    b8d6:	0092      	lsls	r2, r2, #2
    b8d8:	58d2      	ldr	r2, [r2, r3]
    b8da:	4b2c      	ldr	r3, [pc, #176]	; (b98c <cal_evaluate+0x370>)
    b8dc:	492c      	ldr	r1, [pc, #176]	; (b990 <cal_evaluate+0x374>)
    b8de:	1c10      	adds	r0, r2, #0
    b8e0:	4798      	blx	r3
    b8e2:	1c03      	adds	r3, r0, #0
    b8e4:	1c19      	adds	r1, r3, #0
    b8e6:	23a1      	movs	r3, #161	; 0xa1
    b8e8:	009b      	lsls	r3, r3, #2
    b8ea:	18fb      	adds	r3, r7, r3
    b8ec:	22d6      	movs	r2, #214	; 0xd6
    b8ee:	0092      	lsls	r2, r2, #2
    b8f0:	18ba      	adds	r2, r7, r2
    b8f2:	6812      	ldr	r2, [r2, #0]
    b8f4:	0092      	lsls	r2, r2, #2
    b8f6:	50d1      	str	r1, [r2, r3]
			for (k=0;k<group_size;k++){
    b8f8:	23d6      	movs	r3, #214	; 0xd6
    b8fa:	009b      	lsls	r3, r3, #2
    b8fc:	18fb      	adds	r3, r7, r3
    b8fe:	681b      	ldr	r3, [r3, #0]
    b900:	3301      	adds	r3, #1
    b902:	22d6      	movs	r2, #214	; 0xd6
    b904:	0092      	lsls	r2, r2, #2
    b906:	18ba      	adds	r2, r7, r2
    b908:	6013      	str	r3, [r2, #0]
    b90a:	23d6      	movs	r3, #214	; 0xd6
    b90c:	009b      	lsls	r3, r3, #2
    b90e:	18fb      	adds	r3, r7, r3
    b910:	681b      	ldr	r3, [r3, #0]
    b912:	2b03      	cmp	r3, #3
    b914:	d9c9      	bls.n	b8aa <cal_evaluate+0x28e>
				}
			}
		}
		
		//  Find group average
		inc_avg = 0;
    b916:	2300      	movs	r3, #0
    b918:	22d4      	movs	r2, #212	; 0xd4
    b91a:	0092      	lsls	r2, r2, #2
    b91c:	18ba      	adds	r2, r7, r2
    b91e:	6013      	str	r3, [r2, #0]
		azm_avg = 0;
    b920:	2300      	movs	r3, #0
    b922:	22d3      	movs	r2, #211	; 0xd3
    b924:	0092      	lsls	r2, r2, #2
    b926:	18ba      	adds	r2, r7, r2
    b928:	6013      	str	r3, [r2, #0]
		for (k=0;k<group_size;k++){
    b92a:	2300      	movs	r3, #0
    b92c:	22d6      	movs	r2, #214	; 0xd6
    b92e:	0092      	lsls	r2, r2, #2
    b930:	18ba      	adds	r2, r7, r2
    b932:	6013      	str	r3, [r2, #0]
    b934:	e061      	b.n	b9fa <cal_evaluate+0x3de>
    b936:	46c0      	nop			; (mov r8, r8)
    b938:	fffffc94 	.word	0xfffffc94
    b93c:	00011001 	.word	0x00011001
    b940:	200011f4 	.word	0x200011f4
    b944:	000111d5 	.word	0x000111d5
    b948:	20001e48 	.word	0x20001e48
    b94c:	00028d60 	.word	0x00028d60
    b950:	20002db4 	.word	0x20002db4
    b954:	20001ea0 	.word	0x20001ea0
    b958:	200039fc 	.word	0x200039fc
    b95c:	20004b74 	.word	0x20004b74
    b960:	200027cc 	.word	0x200027cc
    b964:	20003634 	.word	0x20003634
    b968:	0000c0d5 	.word	0x0000c0d5
    b96c:	20001ea4 	.word	0x20001ea4
    b970:	20003ff0 	.word	0x20003ff0
    b974:	20004514 	.word	0x20004514
    b978:	00000357 	.word	0x00000357
    b97c:	00020f71 	.word	0x00020f71
    b980:	43aa0000 	.word	0x43aa0000
    b984:	00020f49 	.word	0x00020f49
    b988:	41a00000 	.word	0x41a00000
    b98c:	000210d5 	.word	0x000210d5
    b990:	43b40000 	.word	0x43b40000
			inc_avg = inc_avg + inc_group[k];
    b994:	23a5      	movs	r3, #165	; 0xa5
    b996:	009b      	lsls	r3, r3, #2
    b998:	18fb      	adds	r3, r7, r3
    b99a:	22d6      	movs	r2, #214	; 0xd6
    b99c:	0092      	lsls	r2, r2, #2
    b99e:	18ba      	adds	r2, r7, r2
    b9a0:	6812      	ldr	r2, [r2, #0]
    b9a2:	0092      	lsls	r2, r2, #2
    b9a4:	58d2      	ldr	r2, [r2, r3]
    b9a6:	4bac      	ldr	r3, [pc, #688]	; (bc58 <cal_evaluate+0x63c>)
    b9a8:	1c11      	adds	r1, r2, #0
    b9aa:	22d4      	movs	r2, #212	; 0xd4
    b9ac:	0092      	lsls	r2, r2, #2
    b9ae:	18ba      	adds	r2, r7, r2
    b9b0:	6810      	ldr	r0, [r2, #0]
    b9b2:	4798      	blx	r3
    b9b4:	1c03      	adds	r3, r0, #0
    b9b6:	22d4      	movs	r2, #212	; 0xd4
    b9b8:	0092      	lsls	r2, r2, #2
    b9ba:	18ba      	adds	r2, r7, r2
    b9bc:	6013      	str	r3, [r2, #0]
			azm_avg = azm_avg + azm_group[k];
    b9be:	23a1      	movs	r3, #161	; 0xa1
    b9c0:	009b      	lsls	r3, r3, #2
    b9c2:	18fb      	adds	r3, r7, r3
    b9c4:	22d6      	movs	r2, #214	; 0xd6
    b9c6:	0092      	lsls	r2, r2, #2
    b9c8:	18ba      	adds	r2, r7, r2
    b9ca:	6812      	ldr	r2, [r2, #0]
    b9cc:	0092      	lsls	r2, r2, #2
    b9ce:	58d2      	ldr	r2, [r2, r3]
    b9d0:	4ba1      	ldr	r3, [pc, #644]	; (bc58 <cal_evaluate+0x63c>)
    b9d2:	1c11      	adds	r1, r2, #0
    b9d4:	22d3      	movs	r2, #211	; 0xd3
    b9d6:	0092      	lsls	r2, r2, #2
    b9d8:	18ba      	adds	r2, r7, r2
    b9da:	6810      	ldr	r0, [r2, #0]
    b9dc:	4798      	blx	r3
    b9de:	1c03      	adds	r3, r0, #0
    b9e0:	22d3      	movs	r2, #211	; 0xd3
    b9e2:	0092      	lsls	r2, r2, #2
    b9e4:	18ba      	adds	r2, r7, r2
    b9e6:	6013      	str	r3, [r2, #0]
		for (k=0;k<group_size;k++){
    b9e8:	23d6      	movs	r3, #214	; 0xd6
    b9ea:	009b      	lsls	r3, r3, #2
    b9ec:	18fb      	adds	r3, r7, r3
    b9ee:	681b      	ldr	r3, [r3, #0]
    b9f0:	3301      	adds	r3, #1
    b9f2:	22d6      	movs	r2, #214	; 0xd6
    b9f4:	0092      	lsls	r2, r2, #2
    b9f6:	18ba      	adds	r2, r7, r2
    b9f8:	6013      	str	r3, [r2, #0]
    b9fa:	23d6      	movs	r3, #214	; 0xd6
    b9fc:	009b      	lsls	r3, r3, #2
    b9fe:	18fb      	adds	r3, r7, r3
    ba00:	681b      	ldr	r3, [r3, #0]
    ba02:	2b03      	cmp	r3, #3
    ba04:	d9c6      	bls.n	b994 <cal_evaluate+0x378>
		}
		inc_avg = inc_avg/group_size;
    ba06:	4b95      	ldr	r3, [pc, #596]	; (bc5c <cal_evaluate+0x640>)
    ba08:	2181      	movs	r1, #129	; 0x81
    ba0a:	05c9      	lsls	r1, r1, #23
    ba0c:	22d4      	movs	r2, #212	; 0xd4
    ba0e:	0092      	lsls	r2, r2, #2
    ba10:	18ba      	adds	r2, r7, r2
    ba12:	6810      	ldr	r0, [r2, #0]
    ba14:	4798      	blx	r3
    ba16:	1c03      	adds	r3, r0, #0
    ba18:	22d4      	movs	r2, #212	; 0xd4
    ba1a:	0092      	lsls	r2, r2, #2
    ba1c:	18ba      	adds	r2, r7, r2
    ba1e:	6013      	str	r3, [r2, #0]
		azm_avg = azm_avg/group_size;
    ba20:	4b8e      	ldr	r3, [pc, #568]	; (bc5c <cal_evaluate+0x640>)
    ba22:	2181      	movs	r1, #129	; 0x81
    ba24:	05c9      	lsls	r1, r1, #23
    ba26:	22d3      	movs	r2, #211	; 0xd3
    ba28:	0092      	lsls	r2, r2, #2
    ba2a:	18ba      	adds	r2, r7, r2
    ba2c:	6810      	ldr	r0, [r2, #0]
    ba2e:	4798      	blx	r3
    ba30:	1c03      	adds	r3, r0, #0
    ba32:	22d3      	movs	r2, #211	; 0xd3
    ba34:	0092      	lsls	r2, r2, #2
    ba36:	18ba      	adds	r2, r7, r2
    ba38:	6013      	str	r3, [r2, #0]
		
		//  Calculate errors
		for (k=0;k<group_size;k++){
    ba3a:	2300      	movs	r3, #0
    ba3c:	22d6      	movs	r2, #214	; 0xd6
    ba3e:	0092      	lsls	r2, r2, #2
    ba40:	18ba      	adds	r2, r7, r2
    ba42:	6013      	str	r3, [r2, #0]
    ba44:	e07a      	b.n	bb3c <cal_evaluate+0x520>
			ind1 = g*group_size+k;
    ba46:	23d7      	movs	r3, #215	; 0xd7
    ba48:	009b      	lsls	r3, r3, #2
    ba4a:	18fb      	adds	r3, r7, r3
    ba4c:	681b      	ldr	r3, [r3, #0]
    ba4e:	009a      	lsls	r2, r3, #2
    ba50:	23d6      	movs	r3, #214	; 0xd6
    ba52:	009b      	lsls	r3, r3, #2
    ba54:	18fb      	adds	r3, r7, r3
    ba56:	681b      	ldr	r3, [r3, #0]
    ba58:	18d3      	adds	r3, r2, r3
    ba5a:	22d2      	movs	r2, #210	; 0xd2
    ba5c:	0092      	lsls	r2, r2, #2
    ba5e:	18ba      	adds	r2, r7, r2
    ba60:	6013      	str	r3, [r2, #0]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
    ba62:	23a5      	movs	r3, #165	; 0xa5
    ba64:	009b      	lsls	r3, r3, #2
    ba66:	18fb      	adds	r3, r7, r3
    ba68:	22d6      	movs	r2, #214	; 0xd6
    ba6a:	0092      	lsls	r2, r2, #2
    ba6c:	18ba      	adds	r2, r7, r2
    ba6e:	6812      	ldr	r2, [r2, #0]
    ba70:	0092      	lsls	r2, r2, #2
    ba72:	58d2      	ldr	r2, [r2, r3]
    ba74:	4b7a      	ldr	r3, [pc, #488]	; (bc60 <cal_evaluate+0x644>)
    ba76:	21d4      	movs	r1, #212	; 0xd4
    ba78:	0089      	lsls	r1, r1, #2
    ba7a:	1879      	adds	r1, r7, r1
    ba7c:	6809      	ldr	r1, [r1, #0]
    ba7e:	1c10      	adds	r0, r2, #0
    ba80:	4798      	blx	r3
    ba82:	1c03      	adds	r3, r0, #0
    ba84:	1c19      	adds	r1, r3, #0
    ba86:	4b77      	ldr	r3, [pc, #476]	; (bc64 <cal_evaluate+0x648>)
    ba88:	22da      	movs	r2, #218	; 0xda
    ba8a:	0092      	lsls	r2, r2, #2
    ba8c:	4694      	mov	ip, r2
    ba8e:	44bc      	add	ip, r7
    ba90:	4463      	add	r3, ip
    ba92:	22d2      	movs	r2, #210	; 0xd2
    ba94:	0092      	lsls	r2, r2, #2
    ba96:	18ba      	adds	r2, r7, r2
    ba98:	6812      	ldr	r2, [r2, #0]
    ba9a:	0092      	lsls	r2, r2, #2
    ba9c:	50d1      	str	r1, [r2, r3]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*deg2rad);
    ba9e:	23a1      	movs	r3, #161	; 0xa1
    baa0:	009b      	lsls	r3, r3, #2
    baa2:	18fb      	adds	r3, r7, r3
    baa4:	22d6      	movs	r2, #214	; 0xd6
    baa6:	0092      	lsls	r2, r2, #2
    baa8:	18ba      	adds	r2, r7, r2
    baaa:	6812      	ldr	r2, [r2, #0]
    baac:	0092      	lsls	r2, r2, #2
    baae:	58d2      	ldr	r2, [r2, r3]
    bab0:	4b6b      	ldr	r3, [pc, #428]	; (bc60 <cal_evaluate+0x644>)
    bab2:	21d3      	movs	r1, #211	; 0xd3
    bab4:	0089      	lsls	r1, r1, #2
    bab6:	1879      	adds	r1, r7, r1
    bab8:	6809      	ldr	r1, [r1, #0]
    baba:	1c10      	adds	r0, r2, #0
    babc:	4798      	blx	r3
    babe:	1c03      	adds	r3, r0, #0
    bac0:	1c1a      	adds	r2, r3, #0
    bac2:	4b69      	ldr	r3, [pc, #420]	; (bc68 <cal_evaluate+0x64c>)
    bac4:	1c10      	adds	r0, r2, #0
    bac6:	4798      	blx	r3
    bac8:	0005      	movs	r5, r0
    baca:	000e      	movs	r6, r1
    bacc:	4b67      	ldr	r3, [pc, #412]	; (bc6c <cal_evaluate+0x650>)
    bace:	681a      	ldr	r2, [r3, #0]
    bad0:	4b67      	ldr	r3, [pc, #412]	; (bc70 <cal_evaluate+0x654>)
    bad2:	21d4      	movs	r1, #212	; 0xd4
    bad4:	0089      	lsls	r1, r1, #2
    bad6:	1879      	adds	r1, r7, r1
    bad8:	6809      	ldr	r1, [r1, #0]
    bada:	1c10      	adds	r0, r2, #0
    badc:	4798      	blx	r3
    bade:	1c03      	adds	r3, r0, #0
    bae0:	1c1a      	adds	r2, r3, #0
    bae2:	4b61      	ldr	r3, [pc, #388]	; (bc68 <cal_evaluate+0x64c>)
    bae4:	1c10      	adds	r0, r2, #0
    bae6:	4798      	blx	r3
    bae8:	0003      	movs	r3, r0
    baea:	000c      	movs	r4, r1
    baec:	0018      	movs	r0, r3
    baee:	0021      	movs	r1, r4
    baf0:	4b60      	ldr	r3, [pc, #384]	; (bc74 <cal_evaluate+0x658>)
    baf2:	4798      	blx	r3
    baf4:	0002      	movs	r2, r0
    baf6:	000b      	movs	r3, r1
    baf8:	4c5f      	ldr	r4, [pc, #380]	; (bc78 <cal_evaluate+0x65c>)
    bafa:	0028      	movs	r0, r5
    bafc:	0031      	movs	r1, r6
    bafe:	47a0      	blx	r4
    bb00:	0003      	movs	r3, r0
    bb02:	000c      	movs	r4, r1
    bb04:	0019      	movs	r1, r3
    bb06:	0022      	movs	r2, r4
    bb08:	4b5c      	ldr	r3, [pc, #368]	; (bc7c <cal_evaluate+0x660>)
    bb0a:	0008      	movs	r0, r1
    bb0c:	0011      	movs	r1, r2
    bb0e:	4798      	blx	r3
    bb10:	1c01      	adds	r1, r0, #0
    bb12:	4b5b      	ldr	r3, [pc, #364]	; (bc80 <cal_evaluate+0x664>)
    bb14:	22da      	movs	r2, #218	; 0xda
    bb16:	0092      	lsls	r2, r2, #2
    bb18:	4694      	mov	ip, r2
    bb1a:	44bc      	add	ip, r7
    bb1c:	4463      	add	r3, ip
    bb1e:	22d2      	movs	r2, #210	; 0xd2
    bb20:	0092      	lsls	r2, r2, #2
    bb22:	18ba      	adds	r2, r7, r2
    bb24:	6812      	ldr	r2, [r2, #0]
    bb26:	0092      	lsls	r2, r2, #2
    bb28:	50d1      	str	r1, [r2, r3]
		for (k=0;k<group_size;k++){
    bb2a:	23d6      	movs	r3, #214	; 0xd6
    bb2c:	009b      	lsls	r3, r3, #2
    bb2e:	18fb      	adds	r3, r7, r3
    bb30:	681b      	ldr	r3, [r3, #0]
    bb32:	3301      	adds	r3, #1
    bb34:	22d6      	movs	r2, #214	; 0xd6
    bb36:	0092      	lsls	r2, r2, #2
    bb38:	18ba      	adds	r2, r7, r2
    bb3a:	6013      	str	r3, [r2, #0]
    bb3c:	23d6      	movs	r3, #214	; 0xd6
    bb3e:	009b      	lsls	r3, r3, #2
    bb40:	18fb      	adds	r3, r7, r3
    bb42:	681b      	ldr	r3, [r3, #0]
    bb44:	2b03      	cmp	r3, #3
    bb46:	d800      	bhi.n	bb4a <cal_evaluate+0x52e>
    bb48:	e77d      	b.n	ba46 <cal_evaluate+0x42a>
	for (g=0;g<n_groups;g++){
    bb4a:	23d7      	movs	r3, #215	; 0xd7
    bb4c:	009b      	lsls	r3, r3, #2
    bb4e:	18fb      	adds	r3, r7, r3
    bb50:	681b      	ldr	r3, [r3, #0]
    bb52:	3301      	adds	r3, #1
    bb54:	22d7      	movs	r2, #215	; 0xd7
    bb56:	0092      	lsls	r2, r2, #2
    bb58:	18ba      	adds	r2, r7, r2
    bb5a:	6013      	str	r3, [r2, #0]
    bb5c:	4b49      	ldr	r3, [pc, #292]	; (bc84 <cal_evaluate+0x668>)
    bb5e:	681b      	ldr	r3, [r3, #0]
    bb60:	22d7      	movs	r2, #215	; 0xd7
    bb62:	0092      	lsls	r2, r2, #2
    bb64:	18ba      	adds	r2, r7, r2
    bb66:	6812      	ldr	r2, [r2, #0]
    bb68:	429a      	cmp	r2, r3
    bb6a:	d200      	bcs.n	bb6e <cal_evaluate+0x552>
    bb6c:	e638      	b.n	b7e0 <cal_evaluate+0x1c4>
		
		
	}
	
	//  Calculate standard deviation of angle errors
	cal_report_azm_inc.inc_angle_err = stdev(inc_err_array, n_points);	 
    bb6e:	4b46      	ldr	r3, [pc, #280]	; (bc88 <cal_evaluate+0x66c>)
    bb70:	681a      	ldr	r2, [r3, #0]
    bb72:	23a2      	movs	r3, #162	; 0xa2
    bb74:	005b      	lsls	r3, r3, #1
    bb76:	18fb      	adds	r3, r7, r3
    bb78:	0011      	movs	r1, r2
    bb7a:	0018      	movs	r0, r3
    bb7c:	4b43      	ldr	r3, [pc, #268]	; (bc8c <cal_evaluate+0x670>)
    bb7e:	4798      	blx	r3
    bb80:	1c02      	adds	r2, r0, #0
    bb82:	4b43      	ldr	r3, [pc, #268]	; (bc90 <cal_evaluate+0x674>)
    bb84:	611a      	str	r2, [r3, #16]
	cal_report_azm_inc.azm_angle_err = stdev(azm_err_array, n_points);
    bb86:	4b40      	ldr	r3, [pc, #256]	; (bc88 <cal_evaluate+0x66c>)
    bb88:	681a      	ldr	r2, [r3, #0]
    bb8a:	1d3b      	adds	r3, r7, #4
    bb8c:	0011      	movs	r1, r2
    bb8e:	0018      	movs	r0, r3
    bb90:	4b3e      	ldr	r3, [pc, #248]	; (bc8c <cal_evaluate+0x670>)
    bb92:	4798      	blx	r3
    bb94:	1c02      	adds	r2, r0, #0
    bb96:	4b3e      	ldr	r3, [pc, #248]	; (bc90 <cal_evaluate+0x674>)
    bb98:	615a      	str	r2, [r3, #20]
	
	//  Evaluate magnitude error Standard Deviation
	cal_report_azm_inc.mag_stdev_a1 = calc_mag_stdev(a1cal);
    bb9a:	4b3e      	ldr	r3, [pc, #248]	; (bc94 <cal_evaluate+0x678>)
    bb9c:	0018      	movs	r0, r3
    bb9e:	4b3e      	ldr	r3, [pc, #248]	; (bc98 <cal_evaluate+0x67c>)
    bba0:	4798      	blx	r3
    bba2:	1c02      	adds	r2, r0, #0
    bba4:	4b3a      	ldr	r3, [pc, #232]	; (bc90 <cal_evaluate+0x674>)
    bba6:	619a      	str	r2, [r3, #24]
	cal_report_azm_inc.mag_stdev_a2 = calc_mag_stdev(a2cal);
    bba8:	4b3c      	ldr	r3, [pc, #240]	; (bc9c <cal_evaluate+0x680>)
    bbaa:	0018      	movs	r0, r3
    bbac:	4b3a      	ldr	r3, [pc, #232]	; (bc98 <cal_evaluate+0x67c>)
    bbae:	4798      	blx	r3
    bbb0:	1c02      	adds	r2, r0, #0
    bbb2:	4b37      	ldr	r3, [pc, #220]	; (bc90 <cal_evaluate+0x674>)
    bbb4:	61da      	str	r2, [r3, #28]
	cal_report_azm_inc.mag_stdev_c1 = calc_mag_stdev(c1cal);
    bbb6:	4b3a      	ldr	r3, [pc, #232]	; (bca0 <cal_evaluate+0x684>)
    bbb8:	0018      	movs	r0, r3
    bbba:	4b37      	ldr	r3, [pc, #220]	; (bc98 <cal_evaluate+0x67c>)
    bbbc:	4798      	blx	r3
    bbbe:	1c02      	adds	r2, r0, #0
    bbc0:	4b33      	ldr	r3, [pc, #204]	; (bc90 <cal_evaluate+0x674>)
    bbc2:	621a      	str	r2, [r3, #32]
	cal_report_azm_inc.mag_stdev_c2 = calc_mag_stdev(c2cal);
    bbc4:	4b37      	ldr	r3, [pc, #220]	; (bca4 <cal_evaluate+0x688>)
    bbc6:	0018      	movs	r0, r3
    bbc8:	4b33      	ldr	r3, [pc, #204]	; (bc98 <cal_evaluate+0x67c>)
    bbca:	4798      	blx	r3
    bbcc:	1c02      	adds	r2, r0, #0
    bbce:	4b30      	ldr	r3, [pc, #192]	; (bc90 <cal_evaluate+0x674>)
    bbd0:	625a      	str	r2, [r3, #36]	; 0x24
	
	//  Evaluate Axis Disparity Standard Deviation
	for (i=0;i<3;i++){
    bbd2:	2300      	movs	r3, #0
    bbd4:	22d9      	movs	r2, #217	; 0xd9
    bbd6:	0092      	lsls	r2, r2, #2
    bbd8:	18ba      	adds	r2, r7, r2
    bbda:	6013      	str	r3, [r2, #0]
    bbdc:	e030      	b.n	bc40 <cal_evaluate+0x624>
		cal_report_azm_inc.disp_stdev_acc[i]  = calc_disp_stdev(a1cal, a2cal, i);
    bbde:	23d9      	movs	r3, #217	; 0xd9
    bbe0:	009b      	lsls	r3, r3, #2
    bbe2:	18fb      	adds	r3, r7, r3
    bbe4:	681b      	ldr	r3, [r3, #0]
    bbe6:	b2da      	uxtb	r2, r3
    bbe8:	492c      	ldr	r1, [pc, #176]	; (bc9c <cal_evaluate+0x680>)
    bbea:	4b2a      	ldr	r3, [pc, #168]	; (bc94 <cal_evaluate+0x678>)
    bbec:	0018      	movs	r0, r3
    bbee:	4b2e      	ldr	r3, [pc, #184]	; (bca8 <cal_evaluate+0x68c>)
    bbf0:	4798      	blx	r3
    bbf2:	1c01      	adds	r1, r0, #0
    bbf4:	4b26      	ldr	r3, [pc, #152]	; (bc90 <cal_evaluate+0x674>)
    bbf6:	22d9      	movs	r2, #217	; 0xd9
    bbf8:	0092      	lsls	r2, r2, #2
    bbfa:	18ba      	adds	r2, r7, r2
    bbfc:	6812      	ldr	r2, [r2, #0]
    bbfe:	320a      	adds	r2, #10
    bc00:	0092      	lsls	r2, r2, #2
    bc02:	50d1      	str	r1, [r2, r3]
		cal_report_azm_inc.disp_stdev_comp[i] = calc_disp_stdev(c1cal, c2cal, i);
    bc04:	23d9      	movs	r3, #217	; 0xd9
    bc06:	009b      	lsls	r3, r3, #2
    bc08:	18fb      	adds	r3, r7, r3
    bc0a:	681b      	ldr	r3, [r3, #0]
    bc0c:	b2da      	uxtb	r2, r3
    bc0e:	4925      	ldr	r1, [pc, #148]	; (bca4 <cal_evaluate+0x688>)
    bc10:	4b23      	ldr	r3, [pc, #140]	; (bca0 <cal_evaluate+0x684>)
    bc12:	0018      	movs	r0, r3
    bc14:	4b24      	ldr	r3, [pc, #144]	; (bca8 <cal_evaluate+0x68c>)
    bc16:	4798      	blx	r3
    bc18:	1c01      	adds	r1, r0, #0
    bc1a:	4a1d      	ldr	r2, [pc, #116]	; (bc90 <cal_evaluate+0x674>)
    bc1c:	23d9      	movs	r3, #217	; 0xd9
    bc1e:	009b      	lsls	r3, r3, #2
    bc20:	18fb      	adds	r3, r7, r3
    bc22:	681b      	ldr	r3, [r3, #0]
    bc24:	330c      	adds	r3, #12
    bc26:	009b      	lsls	r3, r3, #2
    bc28:	18d3      	adds	r3, r2, r3
    bc2a:	3304      	adds	r3, #4
    bc2c:	6019      	str	r1, [r3, #0]
	for (i=0;i<3;i++){
    bc2e:	23d9      	movs	r3, #217	; 0xd9
    bc30:	009b      	lsls	r3, r3, #2
    bc32:	18fb      	adds	r3, r7, r3
    bc34:	681b      	ldr	r3, [r3, #0]
    bc36:	3301      	adds	r3, #1
    bc38:	22d9      	movs	r2, #217	; 0xd9
    bc3a:	0092      	lsls	r2, r2, #2
    bc3c:	18ba      	adds	r2, r7, r2
    bc3e:	6013      	str	r3, [r2, #0]
    bc40:	23d9      	movs	r3, #217	; 0xd9
    bc42:	009b      	lsls	r3, r3, #2
    bc44:	18fb      	adds	r3, r7, r3
    bc46:	681b      	ldr	r3, [r3, #0]
    bc48:	2b02      	cmp	r3, #2
    bc4a:	d9c8      	bls.n	bbde <cal_evaluate+0x5c2>
	}
		
	
}
    bc4c:	46c0      	nop			; (mov r8, r8)
    bc4e:	46bd      	mov	sp, r7
    bc50:	23db      	movs	r3, #219	; 0xdb
    bc52:	009b      	lsls	r3, r3, #2
    bc54:	449d      	add	sp, r3
    bc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc58:	000210d5 	.word	0x000210d5
    bc5c:	000213f9 	.word	0x000213f9
    bc60:	00021a19 	.word	0x00021a19
    bc64:	fffffddc 	.word	0xfffffddc
    bc68:	00023a0d 	.word	0x00023a0d
    bc6c:	00028d68 	.word	0x00028d68
    bc70:	000217d9 	.word	0x000217d9
    bc74:	0001e169 	.word	0x0001e169
    bc78:	00022d45 	.word	0x00022d45
    bc7c:	00023ab1 	.word	0x00023ab1
    bc80:	fffffc9c 	.word	0xfffffc9c
    bc84:	20001ea0 	.word	0x20001ea0
    bc88:	20002db4 	.word	0x20002db4
    bc8c:	0000c81d 	.word	0x0000c81d
    bc90:	20001e48 	.word	0x20001e48
    bc94:	200039fc 	.word	0x200039fc
    bc98:	0000c96d 	.word	0x0000c96d
    bc9c:	20004b74 	.word	0x20004b74
    bca0:	200027cc 	.word	0x200027cc
    bca4:	20003634 	.word	0x20003634
    bca8:	0000cae9 	.word	0x0000cae9

0000bcac <cal_add_datapoint>:

void cal_add_datapoint(struct MEASUREMENT *meas_inst, bool last_shot){
    bcac:	b5b0      	push	{r4, r5, r7, lr}
    bcae:	b08e      	sub	sp, #56	; 0x38
    bcb0:	af00      	add	r7, sp, #0
    bcb2:	6078      	str	r0, [r7, #4]
    bcb4:	000a      	movs	r2, r1
    bcb6:	1cfb      	adds	r3, r7, #3
    bcb8:	701a      	strb	r2, [r3, #0]
	float aXYZ[3], cXYZ[3];
	uint8_t j, k;
	
	
	//  If this is the first point, initialize reference angles
	if ((ind_stack==0) && (ind_buf==0) && (buf_points == 0)){
    bcba:	4bae      	ldr	r3, [pc, #696]	; (bf74 <cal_add_datapoint+0x2c8>)
    bcbc:	781b      	ldrb	r3, [r3, #0]
    bcbe:	2b00      	cmp	r3, #0
    bcc0:	d10d      	bne.n	bcde <cal_add_datapoint+0x32>
    bcc2:	4bad      	ldr	r3, [pc, #692]	; (bf78 <cal_add_datapoint+0x2cc>)
    bcc4:	781b      	ldrb	r3, [r3, #0]
    bcc6:	2b00      	cmp	r3, #0
    bcc8:	d109      	bne.n	bcde <cal_add_datapoint+0x32>
    bcca:	4bac      	ldr	r3, [pc, #688]	; (bf7c <cal_add_datapoint+0x2d0>)
    bccc:	781b      	ldrb	r3, [r3, #0]
    bcce:	2b00      	cmp	r3, #0
    bcd0:	d105      	bne.n	bcde <cal_add_datapoint+0x32>
		aX_ang_ref = 200;//  Ensures delta will fail on first iteration
    bcd2:	4bab      	ldr	r3, [pc, #684]	; (bf80 <cal_add_datapoint+0x2d4>)
    bcd4:	4aab      	ldr	r2, [pc, #684]	; (bf84 <cal_add_datapoint+0x2d8>)
    bcd6:	601a      	str	r2, [r3, #0]
		cX_ang_ref = 200;//  Ensures delta will fail on first iteration
    bcd8:	4bab      	ldr	r3, [pc, #684]	; (bf88 <cal_add_datapoint+0x2dc>)
    bcda:	4aaa      	ldr	r2, [pc, #680]	; (bf84 <cal_add_datapoint+0x2d8>)
    bcdc:	601a      	str	r2, [r3, #0]
	}

	
	//  Filter and sort into groups
	for (j=0;j<3;j++){
    bcde:	2337      	movs	r3, #55	; 0x37
    bce0:	18fb      	adds	r3, r7, r3
    bce2:	2200      	movs	r2, #0
    bce4:	701a      	strb	r2, [r3, #0]
    bce6:	e04c      	b.n	bd82 <cal_add_datapoint+0xd6>
		aXYZ[j] = 0.5*(meas_inst->a1xyz[j]+meas_inst->a2xyz[j]);
    bce8:	2337      	movs	r3, #55	; 0x37
    bcea:	18fb      	adds	r3, r7, r3
    bcec:	781c      	ldrb	r4, [r3, #0]
    bcee:	2337      	movs	r3, #55	; 0x37
    bcf0:	18fb      	adds	r3, r7, r3
    bcf2:	781a      	ldrb	r2, [r3, #0]
    bcf4:	687b      	ldr	r3, [r7, #4]
    bcf6:	3208      	adds	r2, #8
    bcf8:	0092      	lsls	r2, r2, #2
    bcfa:	58d0      	ldr	r0, [r2, r3]
    bcfc:	2337      	movs	r3, #55	; 0x37
    bcfe:	18fb      	adds	r3, r7, r3
    bd00:	781b      	ldrb	r3, [r3, #0]
    bd02:	687a      	ldr	r2, [r7, #4]
    bd04:	330a      	adds	r3, #10
    bd06:	009b      	lsls	r3, r3, #2
    bd08:	18d3      	adds	r3, r2, r3
    bd0a:	3304      	adds	r3, #4
    bd0c:	681a      	ldr	r2, [r3, #0]
    bd0e:	4b9f      	ldr	r3, [pc, #636]	; (bf8c <cal_add_datapoint+0x2e0>)
    bd10:	1c11      	adds	r1, r2, #0
    bd12:	4798      	blx	r3
    bd14:	1c03      	adds	r3, r0, #0
    bd16:	1c1a      	adds	r2, r3, #0
    bd18:	4b9d      	ldr	r3, [pc, #628]	; (bf90 <cal_add_datapoint+0x2e4>)
    bd1a:	21fc      	movs	r1, #252	; 0xfc
    bd1c:	0589      	lsls	r1, r1, #22
    bd1e:	1c10      	adds	r0, r2, #0
    bd20:	4798      	blx	r3
    bd22:	1c03      	adds	r3, r0, #0
    bd24:	1c19      	adds	r1, r3, #0
    bd26:	2314      	movs	r3, #20
    bd28:	18fb      	adds	r3, r7, r3
    bd2a:	00a2      	lsls	r2, r4, #2
    bd2c:	50d1      	str	r1, [r2, r3]
		cXYZ[j] = 0.5*(meas_inst->c1xyz[j]+meas_inst->c2xyz[j]);
    bd2e:	2337      	movs	r3, #55	; 0x37
    bd30:	18fb      	adds	r3, r7, r3
    bd32:	781c      	ldrb	r4, [r3, #0]
    bd34:	2337      	movs	r3, #55	; 0x37
    bd36:	18fb      	adds	r3, r7, r3
    bd38:	781a      	ldrb	r2, [r3, #0]
    bd3a:	687b      	ldr	r3, [r7, #4]
    bd3c:	320e      	adds	r2, #14
    bd3e:	0092      	lsls	r2, r2, #2
    bd40:	58d0      	ldr	r0, [r2, r3]
    bd42:	2337      	movs	r3, #55	; 0x37
    bd44:	18fb      	adds	r3, r7, r3
    bd46:	781b      	ldrb	r3, [r3, #0]
    bd48:	687a      	ldr	r2, [r7, #4]
    bd4a:	3310      	adds	r3, #16
    bd4c:	009b      	lsls	r3, r3, #2
    bd4e:	18d3      	adds	r3, r2, r3
    bd50:	3304      	adds	r3, #4
    bd52:	681a      	ldr	r2, [r3, #0]
    bd54:	4b8d      	ldr	r3, [pc, #564]	; (bf8c <cal_add_datapoint+0x2e0>)
    bd56:	1c11      	adds	r1, r2, #0
    bd58:	4798      	blx	r3
    bd5a:	1c03      	adds	r3, r0, #0
    bd5c:	1c1a      	adds	r2, r3, #0
    bd5e:	4b8c      	ldr	r3, [pc, #560]	; (bf90 <cal_add_datapoint+0x2e4>)
    bd60:	21fc      	movs	r1, #252	; 0xfc
    bd62:	0589      	lsls	r1, r1, #22
    bd64:	1c10      	adds	r0, r2, #0
    bd66:	4798      	blx	r3
    bd68:	1c03      	adds	r3, r0, #0
    bd6a:	1c19      	adds	r1, r3, #0
    bd6c:	2308      	movs	r3, #8
    bd6e:	18fb      	adds	r3, r7, r3
    bd70:	00a2      	lsls	r2, r4, #2
    bd72:	50d1      	str	r1, [r2, r3]
	for (j=0;j<3;j++){
    bd74:	2337      	movs	r3, #55	; 0x37
    bd76:	18fb      	adds	r3, r7, r3
    bd78:	781a      	ldrb	r2, [r3, #0]
    bd7a:	2337      	movs	r3, #55	; 0x37
    bd7c:	18fb      	adds	r3, r7, r3
    bd7e:	3201      	adds	r2, #1
    bd80:	701a      	strb	r2, [r3, #0]
    bd82:	2337      	movs	r3, #55	; 0x37
    bd84:	18fb      	adds	r3, r7, r3
    bd86:	781b      	ldrb	r3, [r3, #0]
    bd88:	2b02      	cmp	r3, #2
    bd8a:	d9ad      	bls.n	bce8 <cal_add_datapoint+0x3c>
	}
	calc_theta_XY(aXYZ, &foo, &aX_ang);
    bd8c:	2328      	movs	r3, #40	; 0x28
    bd8e:	18fa      	adds	r2, r7, r3
    bd90:	2320      	movs	r3, #32
    bd92:	18f9      	adds	r1, r7, r3
    bd94:	2314      	movs	r3, #20
    bd96:	18fb      	adds	r3, r7, r3
    bd98:	0018      	movs	r0, r3
    bd9a:	4b7e      	ldr	r3, [pc, #504]	; (bf94 <cal_add_datapoint+0x2e8>)
    bd9c:	4798      	blx	r3
	calc_theta_XY(cXYZ, &foo, &cX_ang);
    bd9e:	2324      	movs	r3, #36	; 0x24
    bda0:	18fa      	adds	r2, r7, r3
    bda2:	2320      	movs	r3, #32
    bda4:	18f9      	adds	r1, r7, r3
    bda6:	2308      	movs	r3, #8
    bda8:	18fb      	adds	r3, r7, r3
    bdaa:	0018      	movs	r0, r3
    bdac:	4b79      	ldr	r3, [pc, #484]	; (bf94 <cal_add_datapoint+0x2e8>)
    bdae:	4798      	blx	r3
	aDelta = fabs(aX_ang - aX_ang_ref);
    bdb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bdb2:	4b73      	ldr	r3, [pc, #460]	; (bf80 <cal_add_datapoint+0x2d4>)
    bdb4:	6819      	ldr	r1, [r3, #0]
    bdb6:	4b78      	ldr	r3, [pc, #480]	; (bf98 <cal_add_datapoint+0x2ec>)
    bdb8:	1c10      	adds	r0, r2, #0
    bdba:	4798      	blx	r3
    bdbc:	1c03      	adds	r3, r0, #0
    bdbe:	005b      	lsls	r3, r3, #1
    bdc0:	085b      	lsrs	r3, r3, #1
    bdc2:	633b      	str	r3, [r7, #48]	; 0x30
	cDelta = fabs(cX_ang - cX_ang_ref);
    bdc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    bdc6:	4b70      	ldr	r3, [pc, #448]	; (bf88 <cal_add_datapoint+0x2dc>)
    bdc8:	6819      	ldr	r1, [r3, #0]
    bdca:	4b73      	ldr	r3, [pc, #460]	; (bf98 <cal_add_datapoint+0x2ec>)
    bdcc:	1c10      	adds	r0, r2, #0
    bdce:	4798      	blx	r3
    bdd0:	1c03      	adds	r3, r0, #0
    bdd2:	005b      	lsls	r3, r3, #1
    bdd4:	085b      	lsrs	r3, r3, #1
    bdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((aDelta>delta_min)||(cDelta>delta_min)||last_shot){
    bdd8:	4b70      	ldr	r3, [pc, #448]	; (bf9c <cal_add_datapoint+0x2f0>)
    bdda:	4971      	ldr	r1, [pc, #452]	; (bfa0 <cal_add_datapoint+0x2f4>)
    bddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
    bdde:	4798      	blx	r3
    bde0:	1e03      	subs	r3, r0, #0
    bde2:	d10a      	bne.n	bdfa <cal_add_datapoint+0x14e>
    bde4:	4b6d      	ldr	r3, [pc, #436]	; (bf9c <cal_add_datapoint+0x2f0>)
    bde6:	496e      	ldr	r1, [pc, #440]	; (bfa0 <cal_add_datapoint+0x2f4>)
    bde8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bdea:	4798      	blx	r3
    bdec:	1e03      	subs	r3, r0, #0
    bdee:	d104      	bne.n	bdfa <cal_add_datapoint+0x14e>
    bdf0:	1cfb      	adds	r3, r7, #3
    bdf2:	781b      	ldrb	r3, [r3, #0]
    bdf4:	2b00      	cmp	r3, #0
    bdf6:	d100      	bne.n	bdfa <cal_add_datapoint+0x14e>
    bdf8:	e0b6      	b.n	bf68 <cal_add_datapoint+0x2bc>
		// New Orientation Encountered
		if ((buf_points>= group_size)&&(ind_stack<(nbuf-buf_points))){//  Prevent buffer overflow
    bdfa:	4b60      	ldr	r3, [pc, #384]	; (bf7c <cal_add_datapoint+0x2d0>)
    bdfc:	781b      	ldrb	r3, [r3, #0]
    bdfe:	2b03      	cmp	r3, #3
    be00:	d800      	bhi.n	be04 <cal_add_datapoint+0x158>
    be02:	e0a5      	b.n	bf50 <cal_add_datapoint+0x2a4>
    be04:	4b5b      	ldr	r3, [pc, #364]	; (bf74 <cal_add_datapoint+0x2c8>)
    be06:	781b      	ldrb	r3, [r3, #0]
    be08:	001a      	movs	r2, r3
    be0a:	4b5c      	ldr	r3, [pc, #368]	; (bf7c <cal_add_datapoint+0x2d0>)
    be0c:	781b      	ldrb	r3, [r3, #0]
    be0e:	0019      	movs	r1, r3
    be10:	2350      	movs	r3, #80	; 0x50
    be12:	1a5b      	subs	r3, r3, r1
    be14:	429a      	cmp	r2, r3
    be16:	db00      	blt.n	be1a <cal_add_datapoint+0x16e>
    be18:	e09a      	b.n	bf50 <cal_add_datapoint+0x2a4>
			//  Enough points for new group, add to stack
			n_groups = n_groups+1;
    be1a:	4b62      	ldr	r3, [pc, #392]	; (bfa4 <cal_add_datapoint+0x2f8>)
    be1c:	681b      	ldr	r3, [r3, #0]
    be1e:	1c5a      	adds	r2, r3, #1
    be20:	4b60      	ldr	r3, [pc, #384]	; (bfa4 <cal_add_datapoint+0x2f8>)
    be22:	601a      	str	r2, [r3, #0]
			n_points = n_points+group_size;
    be24:	4b60      	ldr	r3, [pc, #384]	; (bfa8 <cal_add_datapoint+0x2fc>)
    be26:	681b      	ldr	r3, [r3, #0]
    be28:	1d1a      	adds	r2, r3, #4
    be2a:	4b5f      	ldr	r3, [pc, #380]	; (bfa8 <cal_add_datapoint+0x2fc>)
    be2c:	601a      	str	r2, [r3, #0]
			for (k=0; k<group_size;k++){
    be2e:	2336      	movs	r3, #54	; 0x36
    be30:	18fb      	adds	r3, r7, r3
    be32:	2200      	movs	r2, #0
    be34:	701a      	strb	r2, [r3, #0]
    be36:	e085      	b.n	bf44 <cal_add_datapoint+0x298>
				for (j=0;j<3;j++){
    be38:	2337      	movs	r3, #55	; 0x37
    be3a:	18fb      	adds	r3, r7, r3
    be3c:	2200      	movs	r2, #0
    be3e:	701a      	strb	r2, [r3, #0]
    be40:	e06e      	b.n	bf20 <cal_add_datapoint+0x274>
					a1raw[ind_stack][j] = a1buf[k][j];
    be42:	4b4c      	ldr	r3, [pc, #304]	; (bf74 <cal_add_datapoint+0x2c8>)
    be44:	781b      	ldrb	r3, [r3, #0]
    be46:	001d      	movs	r5, r3
    be48:	2337      	movs	r3, #55	; 0x37
    be4a:	18fb      	adds	r3, r7, r3
    be4c:	7818      	ldrb	r0, [r3, #0]
    be4e:	2336      	movs	r3, #54	; 0x36
    be50:	18fb      	adds	r3, r7, r3
    be52:	781a      	ldrb	r2, [r3, #0]
    be54:	2337      	movs	r3, #55	; 0x37
    be56:	18fb      	adds	r3, r7, r3
    be58:	781c      	ldrb	r4, [r3, #0]
    be5a:	4954      	ldr	r1, [pc, #336]	; (bfac <cal_add_datapoint+0x300>)
    be5c:	0013      	movs	r3, r2
    be5e:	005b      	lsls	r3, r3, #1
    be60:	189b      	adds	r3, r3, r2
    be62:	191b      	adds	r3, r3, r4
    be64:	009b      	lsls	r3, r3, #2
    be66:	5859      	ldr	r1, [r3, r1]
    be68:	4a51      	ldr	r2, [pc, #324]	; (bfb0 <cal_add_datapoint+0x304>)
    be6a:	002b      	movs	r3, r5
    be6c:	005b      	lsls	r3, r3, #1
    be6e:	195b      	adds	r3, r3, r5
    be70:	181b      	adds	r3, r3, r0
    be72:	009b      	lsls	r3, r3, #2
    be74:	5099      	str	r1, [r3, r2]
					a2raw[ind_stack][j] = a2buf[k][j];
    be76:	4b3f      	ldr	r3, [pc, #252]	; (bf74 <cal_add_datapoint+0x2c8>)
    be78:	781b      	ldrb	r3, [r3, #0]
    be7a:	001d      	movs	r5, r3
    be7c:	2337      	movs	r3, #55	; 0x37
    be7e:	18fb      	adds	r3, r7, r3
    be80:	7818      	ldrb	r0, [r3, #0]
    be82:	2336      	movs	r3, #54	; 0x36
    be84:	18fb      	adds	r3, r7, r3
    be86:	781a      	ldrb	r2, [r3, #0]
    be88:	2337      	movs	r3, #55	; 0x37
    be8a:	18fb      	adds	r3, r7, r3
    be8c:	781c      	ldrb	r4, [r3, #0]
    be8e:	4949      	ldr	r1, [pc, #292]	; (bfb4 <cal_add_datapoint+0x308>)
    be90:	0013      	movs	r3, r2
    be92:	005b      	lsls	r3, r3, #1
    be94:	189b      	adds	r3, r3, r2
    be96:	191b      	adds	r3, r3, r4
    be98:	009b      	lsls	r3, r3, #2
    be9a:	5859      	ldr	r1, [r3, r1]
    be9c:	4a46      	ldr	r2, [pc, #280]	; (bfb8 <cal_add_datapoint+0x30c>)
    be9e:	002b      	movs	r3, r5
    bea0:	005b      	lsls	r3, r3, #1
    bea2:	195b      	adds	r3, r3, r5
    bea4:	181b      	adds	r3, r3, r0
    bea6:	009b      	lsls	r3, r3, #2
    bea8:	5099      	str	r1, [r3, r2]
					c1raw[ind_stack][j] = c1buf[k][j];
    beaa:	4b32      	ldr	r3, [pc, #200]	; (bf74 <cal_add_datapoint+0x2c8>)
    beac:	781b      	ldrb	r3, [r3, #0]
    beae:	001d      	movs	r5, r3
    beb0:	2337      	movs	r3, #55	; 0x37
    beb2:	18fb      	adds	r3, r7, r3
    beb4:	7818      	ldrb	r0, [r3, #0]
    beb6:	2336      	movs	r3, #54	; 0x36
    beb8:	18fb      	adds	r3, r7, r3
    beba:	781a      	ldrb	r2, [r3, #0]
    bebc:	2337      	movs	r3, #55	; 0x37
    bebe:	18fb      	adds	r3, r7, r3
    bec0:	781c      	ldrb	r4, [r3, #0]
    bec2:	493e      	ldr	r1, [pc, #248]	; (bfbc <cal_add_datapoint+0x310>)
    bec4:	0013      	movs	r3, r2
    bec6:	005b      	lsls	r3, r3, #1
    bec8:	189b      	adds	r3, r3, r2
    beca:	191b      	adds	r3, r3, r4
    becc:	009b      	lsls	r3, r3, #2
    bece:	5859      	ldr	r1, [r3, r1]
    bed0:	4a3b      	ldr	r2, [pc, #236]	; (bfc0 <cal_add_datapoint+0x314>)
    bed2:	002b      	movs	r3, r5
    bed4:	005b      	lsls	r3, r3, #1
    bed6:	195b      	adds	r3, r3, r5
    bed8:	181b      	adds	r3, r3, r0
    beda:	009b      	lsls	r3, r3, #2
    bedc:	5099      	str	r1, [r3, r2]
					c2raw[ind_stack][j] = c2buf[k][j];
    bede:	4b25      	ldr	r3, [pc, #148]	; (bf74 <cal_add_datapoint+0x2c8>)
    bee0:	781b      	ldrb	r3, [r3, #0]
    bee2:	001d      	movs	r5, r3
    bee4:	2337      	movs	r3, #55	; 0x37
    bee6:	18fb      	adds	r3, r7, r3
    bee8:	7818      	ldrb	r0, [r3, #0]
    beea:	2336      	movs	r3, #54	; 0x36
    beec:	18fb      	adds	r3, r7, r3
    beee:	781a      	ldrb	r2, [r3, #0]
    bef0:	2337      	movs	r3, #55	; 0x37
    bef2:	18fb      	adds	r3, r7, r3
    bef4:	781c      	ldrb	r4, [r3, #0]
    bef6:	4933      	ldr	r1, [pc, #204]	; (bfc4 <cal_add_datapoint+0x318>)
    bef8:	0013      	movs	r3, r2
    befa:	005b      	lsls	r3, r3, #1
    befc:	189b      	adds	r3, r3, r2
    befe:	191b      	adds	r3, r3, r4
    bf00:	009b      	lsls	r3, r3, #2
    bf02:	5859      	ldr	r1, [r3, r1]
    bf04:	4a30      	ldr	r2, [pc, #192]	; (bfc8 <cal_add_datapoint+0x31c>)
    bf06:	002b      	movs	r3, r5
    bf08:	005b      	lsls	r3, r3, #1
    bf0a:	195b      	adds	r3, r3, r5
    bf0c:	181b      	adds	r3, r3, r0
    bf0e:	009b      	lsls	r3, r3, #2
    bf10:	5099      	str	r1, [r3, r2]
				for (j=0;j<3;j++){
    bf12:	2337      	movs	r3, #55	; 0x37
    bf14:	18fb      	adds	r3, r7, r3
    bf16:	781a      	ldrb	r2, [r3, #0]
    bf18:	2337      	movs	r3, #55	; 0x37
    bf1a:	18fb      	adds	r3, r7, r3
    bf1c:	3201      	adds	r2, #1
    bf1e:	701a      	strb	r2, [r3, #0]
    bf20:	2337      	movs	r3, #55	; 0x37
    bf22:	18fb      	adds	r3, r7, r3
    bf24:	781b      	ldrb	r3, [r3, #0]
    bf26:	2b02      	cmp	r3, #2
    bf28:	d98b      	bls.n	be42 <cal_add_datapoint+0x196>
				}
				ind_stack = ind_stack+1;
    bf2a:	4b12      	ldr	r3, [pc, #72]	; (bf74 <cal_add_datapoint+0x2c8>)
    bf2c:	781b      	ldrb	r3, [r3, #0]
    bf2e:	3301      	adds	r3, #1
    bf30:	b2da      	uxtb	r2, r3
    bf32:	4b10      	ldr	r3, [pc, #64]	; (bf74 <cal_add_datapoint+0x2c8>)
    bf34:	701a      	strb	r2, [r3, #0]
			for (k=0; k<group_size;k++){
    bf36:	2336      	movs	r3, #54	; 0x36
    bf38:	18fb      	adds	r3, r7, r3
    bf3a:	781a      	ldrb	r2, [r3, #0]
    bf3c:	2336      	movs	r3, #54	; 0x36
    bf3e:	18fb      	adds	r3, r7, r3
    bf40:	3201      	adds	r2, #1
    bf42:	701a      	strb	r2, [r3, #0]
    bf44:	2336      	movs	r3, #54	; 0x36
    bf46:	18fb      	adds	r3, r7, r3
    bf48:	781b      	ldrb	r3, [r3, #0]
    bf4a:	2b03      	cmp	r3, #3
    bf4c:	d800      	bhi.n	bf50 <cal_add_datapoint+0x2a4>
    bf4e:	e773      	b.n	be38 <cal_add_datapoint+0x18c>
			}
		}
		ind_buf = 0;
    bf50:	4b09      	ldr	r3, [pc, #36]	; (bf78 <cal_add_datapoint+0x2cc>)
    bf52:	2200      	movs	r2, #0
    bf54:	701a      	strb	r2, [r3, #0]
		buf_points = 0;
    bf56:	4b09      	ldr	r3, [pc, #36]	; (bf7c <cal_add_datapoint+0x2d0>)
    bf58:	2200      	movs	r2, #0
    bf5a:	701a      	strb	r2, [r3, #0]
		aX_ang_ref = aX_ang;
    bf5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bf5e:	4b08      	ldr	r3, [pc, #32]	; (bf80 <cal_add_datapoint+0x2d4>)
    bf60:	601a      	str	r2, [r3, #0]
		cX_ang_ref = cX_ang;
    bf62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    bf64:	4b08      	ldr	r3, [pc, #32]	; (bf88 <cal_add_datapoint+0x2dc>)
    bf66:	601a      	str	r2, [r3, #0]
	}
	for (j=0;j<3;j++){
    bf68:	2337      	movs	r3, #55	; 0x37
    bf6a:	18fb      	adds	r3, r7, r3
    bf6c:	2200      	movs	r2, #0
    bf6e:	701a      	strb	r2, [r3, #0]
    bf70:	e087      	b.n	c082 <cal_add_datapoint+0x3d6>
    bf72:	46c0      	nop			; (mov r8, r8)
    bf74:	20001fe4 	.word	0x20001fe4
    bf78:	200039f8 	.word	0x200039f8
    bf7c:	20001e9c 	.word	0x20001e9c
    bf80:	20000d44 	.word	0x20000d44
    bf84:	43480000 	.word	0x43480000
    bf88:	20000d48 	.word	0x20000d48
    bf8c:	000210d5 	.word	0x000210d5
    bf90:	000217d9 	.word	0x000217d9
    bf94:	0000c6c5 	.word	0x0000c6c5
    bf98:	00021a19 	.word	0x00021a19
    bf9c:	00020f71 	.word	0x00020f71
    bfa0:	41200000 	.word	0x41200000
    bfa4:	20001ea0 	.word	0x20001ea0
    bfa8:	20002db4 	.word	0x20002db4
    bfac:	20000d4c 	.word	0x20000d4c
    bfb0:	20004f98 	.word	0x20004f98
    bfb4:	20000d7c 	.word	0x20000d7c
    bfb8:	2000414c 	.word	0x2000414c
    bfbc:	20000dac 	.word	0x20000dac
    bfc0:	20001fe8 	.word	0x20001fe8
    bfc4:	20000ddc 	.word	0x20000ddc
    bfc8:	2000240c 	.word	0x2000240c
		a1buf[ind_buf][j] = meas_inst->a1xyz[j];
    bfcc:	4b3b      	ldr	r3, [pc, #236]	; (c0bc <cal_add_datapoint+0x410>)
    bfce:	781b      	ldrb	r3, [r3, #0]
    bfd0:	001c      	movs	r4, r3
    bfd2:	2337      	movs	r3, #55	; 0x37
    bfd4:	18fb      	adds	r3, r7, r3
    bfd6:	7818      	ldrb	r0, [r3, #0]
    bfd8:	2337      	movs	r3, #55	; 0x37
    bfda:	18fb      	adds	r3, r7, r3
    bfdc:	781a      	ldrb	r2, [r3, #0]
    bfde:	687b      	ldr	r3, [r7, #4]
    bfe0:	3208      	adds	r2, #8
    bfe2:	0092      	lsls	r2, r2, #2
    bfe4:	58d1      	ldr	r1, [r2, r3]
    bfe6:	4a36      	ldr	r2, [pc, #216]	; (c0c0 <cal_add_datapoint+0x414>)
    bfe8:	0023      	movs	r3, r4
    bfea:	005b      	lsls	r3, r3, #1
    bfec:	191b      	adds	r3, r3, r4
    bfee:	181b      	adds	r3, r3, r0
    bff0:	009b      	lsls	r3, r3, #2
    bff2:	5099      	str	r1, [r3, r2]
		a2buf[ind_buf][j] = meas_inst->a2xyz[j];
    bff4:	4b31      	ldr	r3, [pc, #196]	; (c0bc <cal_add_datapoint+0x410>)
    bff6:	781b      	ldrb	r3, [r3, #0]
    bff8:	001c      	movs	r4, r3
    bffa:	2337      	movs	r3, #55	; 0x37
    bffc:	18fb      	adds	r3, r7, r3
    bffe:	7818      	ldrb	r0, [r3, #0]
    c000:	2337      	movs	r3, #55	; 0x37
    c002:	18fb      	adds	r3, r7, r3
    c004:	781b      	ldrb	r3, [r3, #0]
    c006:	687a      	ldr	r2, [r7, #4]
    c008:	330a      	adds	r3, #10
    c00a:	009b      	lsls	r3, r3, #2
    c00c:	18d3      	adds	r3, r2, r3
    c00e:	3304      	adds	r3, #4
    c010:	6819      	ldr	r1, [r3, #0]
    c012:	4a2c      	ldr	r2, [pc, #176]	; (c0c4 <cal_add_datapoint+0x418>)
    c014:	0023      	movs	r3, r4
    c016:	005b      	lsls	r3, r3, #1
    c018:	191b      	adds	r3, r3, r4
    c01a:	181b      	adds	r3, r3, r0
    c01c:	009b      	lsls	r3, r3, #2
    c01e:	5099      	str	r1, [r3, r2]
		c1buf[ind_buf][j] = meas_inst->c1xyz[j];
    c020:	4b26      	ldr	r3, [pc, #152]	; (c0bc <cal_add_datapoint+0x410>)
    c022:	781b      	ldrb	r3, [r3, #0]
    c024:	001c      	movs	r4, r3
    c026:	2337      	movs	r3, #55	; 0x37
    c028:	18fb      	adds	r3, r7, r3
    c02a:	7818      	ldrb	r0, [r3, #0]
    c02c:	2337      	movs	r3, #55	; 0x37
    c02e:	18fb      	adds	r3, r7, r3
    c030:	781a      	ldrb	r2, [r3, #0]
    c032:	687b      	ldr	r3, [r7, #4]
    c034:	320e      	adds	r2, #14
    c036:	0092      	lsls	r2, r2, #2
    c038:	58d1      	ldr	r1, [r2, r3]
    c03a:	4a23      	ldr	r2, [pc, #140]	; (c0c8 <cal_add_datapoint+0x41c>)
    c03c:	0023      	movs	r3, r4
    c03e:	005b      	lsls	r3, r3, #1
    c040:	191b      	adds	r3, r3, r4
    c042:	181b      	adds	r3, r3, r0
    c044:	009b      	lsls	r3, r3, #2
    c046:	5099      	str	r1, [r3, r2]
		c2buf[ind_buf][j] = meas_inst->c2xyz[j];
    c048:	4b1c      	ldr	r3, [pc, #112]	; (c0bc <cal_add_datapoint+0x410>)
    c04a:	781b      	ldrb	r3, [r3, #0]
    c04c:	001c      	movs	r4, r3
    c04e:	2337      	movs	r3, #55	; 0x37
    c050:	18fb      	adds	r3, r7, r3
    c052:	7818      	ldrb	r0, [r3, #0]
    c054:	2337      	movs	r3, #55	; 0x37
    c056:	18fb      	adds	r3, r7, r3
    c058:	781b      	ldrb	r3, [r3, #0]
    c05a:	687a      	ldr	r2, [r7, #4]
    c05c:	3310      	adds	r3, #16
    c05e:	009b      	lsls	r3, r3, #2
    c060:	18d3      	adds	r3, r2, r3
    c062:	3304      	adds	r3, #4
    c064:	6819      	ldr	r1, [r3, #0]
    c066:	4a19      	ldr	r2, [pc, #100]	; (c0cc <cal_add_datapoint+0x420>)
    c068:	0023      	movs	r3, r4
    c06a:	005b      	lsls	r3, r3, #1
    c06c:	191b      	adds	r3, r3, r4
    c06e:	181b      	adds	r3, r3, r0
    c070:	009b      	lsls	r3, r3, #2
    c072:	5099      	str	r1, [r3, r2]
	for (j=0;j<3;j++){
    c074:	2337      	movs	r3, #55	; 0x37
    c076:	18fb      	adds	r3, r7, r3
    c078:	781a      	ldrb	r2, [r3, #0]
    c07a:	2337      	movs	r3, #55	; 0x37
    c07c:	18fb      	adds	r3, r7, r3
    c07e:	3201      	adds	r2, #1
    c080:	701a      	strb	r2, [r3, #0]
    c082:	2337      	movs	r3, #55	; 0x37
    c084:	18fb      	adds	r3, r7, r3
    c086:	781b      	ldrb	r3, [r3, #0]
    c088:	2b02      	cmp	r3, #2
    c08a:	d99f      	bls.n	bfcc <cal_add_datapoint+0x320>
	}
	buf_points = buf_points+1;
    c08c:	4b10      	ldr	r3, [pc, #64]	; (c0d0 <cal_add_datapoint+0x424>)
    c08e:	781b      	ldrb	r3, [r3, #0]
    c090:	3301      	adds	r3, #1
    c092:	b2da      	uxtb	r2, r3
    c094:	4b0e      	ldr	r3, [pc, #56]	; (c0d0 <cal_add_datapoint+0x424>)
    c096:	701a      	strb	r2, [r3, #0]
	ind_buf = ind_buf+1;
    c098:	4b08      	ldr	r3, [pc, #32]	; (c0bc <cal_add_datapoint+0x410>)
    c09a:	781b      	ldrb	r3, [r3, #0]
    c09c:	3301      	adds	r3, #1
    c09e:	b2da      	uxtb	r2, r3
    c0a0:	4b06      	ldr	r3, [pc, #24]	; (c0bc <cal_add_datapoint+0x410>)
    c0a2:	701a      	strb	r2, [r3, #0]
	if (ind_buf>=group_size){
    c0a4:	4b05      	ldr	r3, [pc, #20]	; (c0bc <cal_add_datapoint+0x410>)
    c0a6:	781b      	ldrb	r3, [r3, #0]
    c0a8:	2b03      	cmp	r3, #3
    c0aa:	d902      	bls.n	c0b2 <cal_add_datapoint+0x406>
		ind_buf = 0;
    c0ac:	4b03      	ldr	r3, [pc, #12]	; (c0bc <cal_add_datapoint+0x410>)
    c0ae:	2200      	movs	r2, #0
    c0b0:	701a      	strb	r2, [r3, #0]
	}
}
    c0b2:	46c0      	nop			; (mov r8, r8)
    c0b4:	46bd      	mov	sp, r7
    c0b6:	b00e      	add	sp, #56	; 0x38
    c0b8:	bdb0      	pop	{r4, r5, r7, pc}
    c0ba:	46c0      	nop			; (mov r8, r8)
    c0bc:	200039f8 	.word	0x200039f8
    c0c0:	20000d4c 	.word	0x20000d4c
    c0c4:	20000d7c 	.word	0x20000d7c
    c0c8:	20000dac 	.word	0x20000dac
    c0cc:	20000ddc 	.word	0x20000ddc
    c0d0:	20001e9c 	.word	0x20001e9c

0000c0d4 <calc_orientation>:


void calc_orientation(struct MEASUREMENT *meas_inst){
    c0d4:	b5b0      	push	{r4, r5, r7, lr}
    c0d6:	b08c      	sub	sp, #48	; 0x30
    c0d8:	af02      	add	r7, sp, #8
    c0da:	6078      	str	r0, [r7, #4]
	uint8_t i;
	float aXYZ[3], cXYZ[3];
	float thetaX, thetaY, thetaZ;
	
	//  Take average reading from both sensors for each axis
	for (i=0;i<3;i++){
    c0dc:	2327      	movs	r3, #39	; 0x27
    c0de:	18fb      	adds	r3, r7, r3
    c0e0:	2200      	movs	r2, #0
    c0e2:	701a      	strb	r2, [r3, #0]
    c0e4:	e04c      	b.n	c180 <calc_orientation+0xac>
		aXYZ[i] = 0.5*(meas_inst->a1xyz[i]+meas_inst->a2xyz[i]);
    c0e6:	2327      	movs	r3, #39	; 0x27
    c0e8:	18fb      	adds	r3, r7, r3
    c0ea:	781c      	ldrb	r4, [r3, #0]
    c0ec:	2327      	movs	r3, #39	; 0x27
    c0ee:	18fb      	adds	r3, r7, r3
    c0f0:	781a      	ldrb	r2, [r3, #0]
    c0f2:	687b      	ldr	r3, [r7, #4]
    c0f4:	3208      	adds	r2, #8
    c0f6:	0092      	lsls	r2, r2, #2
    c0f8:	58d0      	ldr	r0, [r2, r3]
    c0fa:	2327      	movs	r3, #39	; 0x27
    c0fc:	18fb      	adds	r3, r7, r3
    c0fe:	781b      	ldrb	r3, [r3, #0]
    c100:	687a      	ldr	r2, [r7, #4]
    c102:	330a      	adds	r3, #10
    c104:	009b      	lsls	r3, r3, #2
    c106:	18d3      	adds	r3, r2, r3
    c108:	3304      	adds	r3, #4
    c10a:	681a      	ldr	r2, [r3, #0]
    c10c:	4b2b      	ldr	r3, [pc, #172]	; (c1bc <calc_orientation+0xe8>)
    c10e:	1c11      	adds	r1, r2, #0
    c110:	4798      	blx	r3
    c112:	1c03      	adds	r3, r0, #0
    c114:	1c1a      	adds	r2, r3, #0
    c116:	4b2a      	ldr	r3, [pc, #168]	; (c1c0 <calc_orientation+0xec>)
    c118:	21fc      	movs	r1, #252	; 0xfc
    c11a:	0589      	lsls	r1, r1, #22
    c11c:	1c10      	adds	r0, r2, #0
    c11e:	4798      	blx	r3
    c120:	1c03      	adds	r3, r0, #0
    c122:	1c19      	adds	r1, r3, #0
    c124:	2318      	movs	r3, #24
    c126:	18fb      	adds	r3, r7, r3
    c128:	00a2      	lsls	r2, r4, #2
    c12a:	50d1      	str	r1, [r2, r3]
		cXYZ[i] = 0.5*(meas_inst->c1xyz[i]+meas_inst->c2xyz[i]);
    c12c:	2327      	movs	r3, #39	; 0x27
    c12e:	18fb      	adds	r3, r7, r3
    c130:	781c      	ldrb	r4, [r3, #0]
    c132:	2327      	movs	r3, #39	; 0x27
    c134:	18fb      	adds	r3, r7, r3
    c136:	781a      	ldrb	r2, [r3, #0]
    c138:	687b      	ldr	r3, [r7, #4]
    c13a:	320e      	adds	r2, #14
    c13c:	0092      	lsls	r2, r2, #2
    c13e:	58d0      	ldr	r0, [r2, r3]
    c140:	2327      	movs	r3, #39	; 0x27
    c142:	18fb      	adds	r3, r7, r3
    c144:	781b      	ldrb	r3, [r3, #0]
    c146:	687a      	ldr	r2, [r7, #4]
    c148:	3310      	adds	r3, #16
    c14a:	009b      	lsls	r3, r3, #2
    c14c:	18d3      	adds	r3, r2, r3
    c14e:	3304      	adds	r3, #4
    c150:	681a      	ldr	r2, [r3, #0]
    c152:	4b1a      	ldr	r3, [pc, #104]	; (c1bc <calc_orientation+0xe8>)
    c154:	1c11      	adds	r1, r2, #0
    c156:	4798      	blx	r3
    c158:	1c03      	adds	r3, r0, #0
    c15a:	1c1a      	adds	r2, r3, #0
    c15c:	4b18      	ldr	r3, [pc, #96]	; (c1c0 <calc_orientation+0xec>)
    c15e:	21fc      	movs	r1, #252	; 0xfc
    c160:	0589      	lsls	r1, r1, #22
    c162:	1c10      	adds	r0, r2, #0
    c164:	4798      	blx	r3
    c166:	1c03      	adds	r3, r0, #0
    c168:	1c19      	adds	r1, r3, #0
    c16a:	230c      	movs	r3, #12
    c16c:	18fb      	adds	r3, r7, r3
    c16e:	00a2      	lsls	r2, r4, #2
    c170:	50d1      	str	r1, [r2, r3]
	for (i=0;i<3;i++){
    c172:	2327      	movs	r3, #39	; 0x27
    c174:	18fb      	adds	r3, r7, r3
    c176:	781a      	ldrb	r2, [r3, #0]
    c178:	2327      	movs	r3, #39	; 0x27
    c17a:	18fb      	adds	r3, r7, r3
    c17c:	3201      	adds	r2, #1
    c17e:	701a      	strb	r2, [r3, #0]
    c180:	2327      	movs	r3, #39	; 0x27
    c182:	18fb      	adds	r3, r7, r3
    c184:	781b      	ldrb	r3, [r3, #0]
    c186:	2b02      	cmp	r3, #2
    c188:	d9ad      	bls.n	c0e6 <calc_orientation+0x12>
	}
	
	//  Calculate Aximuth, Inclination, and Roll
	calc_azm_inc_roll_dec(aXYZ, cXYZ,
    c18a:	687b      	ldr	r3, [r7, #4]
    c18c:	330c      	adds	r3, #12
    c18e:	001c      	movs	r4, r3
    c190:	687b      	ldr	r3, [r7, #4]
    c192:	3310      	adds	r3, #16
    c194:	001d      	movs	r5, r3
    c196:	687b      	ldr	r3, [r7, #4]
    c198:	3314      	adds	r3, #20
    c19a:	687a      	ldr	r2, [r7, #4]
    c19c:	3218      	adds	r2, #24
    c19e:	210c      	movs	r1, #12
    c1a0:	1879      	adds	r1, r7, r1
    c1a2:	2018      	movs	r0, #24
    c1a4:	1838      	adds	r0, r7, r0
    c1a6:	9201      	str	r2, [sp, #4]
    c1a8:	9300      	str	r3, [sp, #0]
    c1aa:	002b      	movs	r3, r5
    c1ac:	0022      	movs	r2, r4
    c1ae:	4c05      	ldr	r4, [pc, #20]	; (c1c4 <calc_orientation+0xf0>)
    c1b0:	47a0      	blx	r4
		&meas_inst->azimuth,		&meas_inst->inclination,
		&meas_inst->roll,		&meas_inst->declination);
	
	
}
    c1b2:	46c0      	nop			; (mov r8, r8)
    c1b4:	46bd      	mov	sp, r7
    c1b6:	b00a      	add	sp, #40	; 0x28
    c1b8:	bdb0      	pop	{r4, r5, r7, pc}
    c1ba:	46c0      	nop			; (mov r8, r8)
    c1bc:	000210d5 	.word	0x000210d5
    c1c0:	000217d9 	.word	0x000217d9
    c1c4:	0000c4d9 	.word	0x0000c4d9

0000c1c8 <rotvec_theta_XY>:
	mat_mult_33_31(rotM, rotXYZ, rotXYZ);
	
	
}

void rotvec_theta_XY(float XYZ[3], float rotXYZ[3], float *thetaX, float *thetaY){
    c1c8:	b590      	push	{r4, r7, lr}
    c1ca:	b091      	sub	sp, #68	; 0x44
    c1cc:	af00      	add	r7, sp, #0
    c1ce:	60f8      	str	r0, [r7, #12]
    c1d0:	60b9      	str	r1, [r7, #8]
    c1d2:	607a      	str	r2, [r7, #4]
    c1d4:	603b      	str	r3, [r7, #0]
	float rotM[3][3];
	float rthetaX;
	float rthetaY;
	
	rthetaX = *thetaX*deg2rad;
    c1d6:	687b      	ldr	r3, [r7, #4]
    c1d8:	681a      	ldr	r2, [r3, #0]
    c1da:	4b75      	ldr	r3, [pc, #468]	; (c3b0 <rotvec_theta_XY+0x1e8>)
    c1dc:	6819      	ldr	r1, [r3, #0]
    c1de:	4b75      	ldr	r3, [pc, #468]	; (c3b4 <rotvec_theta_XY+0x1ec>)
    c1e0:	1c10      	adds	r0, r2, #0
    c1e2:	4798      	blx	r3
    c1e4:	1c03      	adds	r3, r0, #0
    c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	rthetaY = *thetaY*deg2rad;
    c1e8:	683b      	ldr	r3, [r7, #0]
    c1ea:	681a      	ldr	r2, [r3, #0]
    c1ec:	4b70      	ldr	r3, [pc, #448]	; (c3b0 <rotvec_theta_XY+0x1e8>)
    c1ee:	6819      	ldr	r1, [r3, #0]
    c1f0:	4b70      	ldr	r3, [pc, #448]	; (c3b4 <rotvec_theta_XY+0x1ec>)
    c1f2:	1c10      	adds	r0, r2, #0
    c1f4:	4798      	blx	r3
    c1f6:	1c03      	adds	r3, r0, #0
    c1f8:	63bb      	str	r3, [r7, #56]	; 0x38
	
	// Product of two rotation matrixes, R(thetaX)*R(thetaY)
	//  Rotate around X axis
	rotM[0][0] = 1;
    c1fa:	2314      	movs	r3, #20
    c1fc:	18fb      	adds	r3, r7, r3
    c1fe:	22fe      	movs	r2, #254	; 0xfe
    c200:	0592      	lsls	r2, r2, #22
    c202:	601a      	str	r2, [r3, #0]
	rotM[0][1] = 0;
    c204:	2314      	movs	r3, #20
    c206:	18fb      	adds	r3, r7, r3
    c208:	2200      	movs	r2, #0
    c20a:	605a      	str	r2, [r3, #4]
	rotM[0][2] = 0;
    c20c:	2314      	movs	r3, #20
    c20e:	18fb      	adds	r3, r7, r3
    c210:	2200      	movs	r2, #0
    c212:	609a      	str	r2, [r3, #8]
	rotM[1][0] = 0;
    c214:	2314      	movs	r3, #20
    c216:	18fb      	adds	r3, r7, r3
    c218:	2200      	movs	r2, #0
    c21a:	60da      	str	r2, [r3, #12]
	rotM[1][1] = cos(rthetaX);
    c21c:	4b66      	ldr	r3, [pc, #408]	; (c3b8 <rotvec_theta_XY+0x1f0>)
    c21e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c220:	4798      	blx	r3
    c222:	0003      	movs	r3, r0
    c224:	000c      	movs	r4, r1
    c226:	0018      	movs	r0, r3
    c228:	0021      	movs	r1, r4
    c22a:	4b64      	ldr	r3, [pc, #400]	; (c3bc <rotvec_theta_XY+0x1f4>)
    c22c:	4798      	blx	r3
    c22e:	000a      	movs	r2, r1
    c230:	0001      	movs	r1, r0
    c232:	4b63      	ldr	r3, [pc, #396]	; (c3c0 <rotvec_theta_XY+0x1f8>)
    c234:	0008      	movs	r0, r1
    c236:	0011      	movs	r1, r2
    c238:	4798      	blx	r3
    c23a:	1c02      	adds	r2, r0, #0
    c23c:	2314      	movs	r3, #20
    c23e:	18fb      	adds	r3, r7, r3
    c240:	611a      	str	r2, [r3, #16]
	rotM[1][2] = -1*sin(rthetaX);
    c242:	4b5d      	ldr	r3, [pc, #372]	; (c3b8 <rotvec_theta_XY+0x1f0>)
    c244:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c246:	4798      	blx	r3
    c248:	0003      	movs	r3, r0
    c24a:	000c      	movs	r4, r1
    c24c:	0018      	movs	r0, r3
    c24e:	0021      	movs	r1, r4
    c250:	4b5c      	ldr	r3, [pc, #368]	; (c3c4 <rotvec_theta_XY+0x1fc>)
    c252:	4798      	blx	r3
    c254:	000a      	movs	r2, r1
    c256:	0001      	movs	r1, r0
    c258:	4b59      	ldr	r3, [pc, #356]	; (c3c0 <rotvec_theta_XY+0x1f8>)
    c25a:	0008      	movs	r0, r1
    c25c:	0011      	movs	r1, r2
    c25e:	4798      	blx	r3
    c260:	1c02      	adds	r2, r0, #0
    c262:	2380      	movs	r3, #128	; 0x80
    c264:	061b      	lsls	r3, r3, #24
    c266:	405a      	eors	r2, r3
    c268:	2314      	movs	r3, #20
    c26a:	18fb      	adds	r3, r7, r3
    c26c:	615a      	str	r2, [r3, #20]
	rotM[2][0] = 0;
    c26e:	2314      	movs	r3, #20
    c270:	18fb      	adds	r3, r7, r3
    c272:	2200      	movs	r2, #0
    c274:	619a      	str	r2, [r3, #24]
	rotM[2][1] = sin(rthetaX);
    c276:	4b50      	ldr	r3, [pc, #320]	; (c3b8 <rotvec_theta_XY+0x1f0>)
    c278:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c27a:	4798      	blx	r3
    c27c:	0003      	movs	r3, r0
    c27e:	000c      	movs	r4, r1
    c280:	0018      	movs	r0, r3
    c282:	0021      	movs	r1, r4
    c284:	4b4f      	ldr	r3, [pc, #316]	; (c3c4 <rotvec_theta_XY+0x1fc>)
    c286:	4798      	blx	r3
    c288:	000a      	movs	r2, r1
    c28a:	0001      	movs	r1, r0
    c28c:	4b4c      	ldr	r3, [pc, #304]	; (c3c0 <rotvec_theta_XY+0x1f8>)
    c28e:	0008      	movs	r0, r1
    c290:	0011      	movs	r1, r2
    c292:	4798      	blx	r3
    c294:	1c02      	adds	r2, r0, #0
    c296:	2314      	movs	r3, #20
    c298:	18fb      	adds	r3, r7, r3
    c29a:	61da      	str	r2, [r3, #28]
	rotM[2][2] = cos(rthetaX);
    c29c:	4b46      	ldr	r3, [pc, #280]	; (c3b8 <rotvec_theta_XY+0x1f0>)
    c29e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c2a0:	4798      	blx	r3
    c2a2:	0003      	movs	r3, r0
    c2a4:	000c      	movs	r4, r1
    c2a6:	0018      	movs	r0, r3
    c2a8:	0021      	movs	r1, r4
    c2aa:	4b44      	ldr	r3, [pc, #272]	; (c3bc <rotvec_theta_XY+0x1f4>)
    c2ac:	4798      	blx	r3
    c2ae:	000a      	movs	r2, r1
    c2b0:	0001      	movs	r1, r0
    c2b2:	4b43      	ldr	r3, [pc, #268]	; (c3c0 <rotvec_theta_XY+0x1f8>)
    c2b4:	0008      	movs	r0, r1
    c2b6:	0011      	movs	r1, r2
    c2b8:	4798      	blx	r3
    c2ba:	1c02      	adds	r2, r0, #0
    c2bc:	2314      	movs	r3, #20
    c2be:	18fb      	adds	r3, r7, r3
    c2c0:	621a      	str	r2, [r3, #32]
	mat_mult_33_31(rotM, XYZ, rotXYZ);
    c2c2:	68ba      	ldr	r2, [r7, #8]
    c2c4:	68f9      	ldr	r1, [r7, #12]
    c2c6:	2314      	movs	r3, #20
    c2c8:	18fb      	adds	r3, r7, r3
    c2ca:	0018      	movs	r0, r3
    c2cc:	4b3e      	ldr	r3, [pc, #248]	; (c3c8 <rotvec_theta_XY+0x200>)
    c2ce:	4798      	blx	r3
	
	//  Rotate about Y axis
	rotM[0][0] = cos(rthetaY);
    c2d0:	4b39      	ldr	r3, [pc, #228]	; (c3b8 <rotvec_theta_XY+0x1f0>)
    c2d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    c2d4:	4798      	blx	r3
    c2d6:	0003      	movs	r3, r0
    c2d8:	000c      	movs	r4, r1
    c2da:	0018      	movs	r0, r3
    c2dc:	0021      	movs	r1, r4
    c2de:	4b37      	ldr	r3, [pc, #220]	; (c3bc <rotvec_theta_XY+0x1f4>)
    c2e0:	4798      	blx	r3
    c2e2:	000a      	movs	r2, r1
    c2e4:	0001      	movs	r1, r0
    c2e6:	4b36      	ldr	r3, [pc, #216]	; (c3c0 <rotvec_theta_XY+0x1f8>)
    c2e8:	0008      	movs	r0, r1
    c2ea:	0011      	movs	r1, r2
    c2ec:	4798      	blx	r3
    c2ee:	1c02      	adds	r2, r0, #0
    c2f0:	2314      	movs	r3, #20
    c2f2:	18fb      	adds	r3, r7, r3
    c2f4:	601a      	str	r2, [r3, #0]
	rotM[0][1] = 0;
    c2f6:	2314      	movs	r3, #20
    c2f8:	18fb      	adds	r3, r7, r3
    c2fa:	2200      	movs	r2, #0
    c2fc:	605a      	str	r2, [r3, #4]
	rotM[0][2] = sin(rthetaY);
    c2fe:	4b2e      	ldr	r3, [pc, #184]	; (c3b8 <rotvec_theta_XY+0x1f0>)
    c300:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    c302:	4798      	blx	r3
    c304:	0003      	movs	r3, r0
    c306:	000c      	movs	r4, r1
    c308:	0018      	movs	r0, r3
    c30a:	0021      	movs	r1, r4
    c30c:	4b2d      	ldr	r3, [pc, #180]	; (c3c4 <rotvec_theta_XY+0x1fc>)
    c30e:	4798      	blx	r3
    c310:	000a      	movs	r2, r1
    c312:	0001      	movs	r1, r0
    c314:	4b2a      	ldr	r3, [pc, #168]	; (c3c0 <rotvec_theta_XY+0x1f8>)
    c316:	0008      	movs	r0, r1
    c318:	0011      	movs	r1, r2
    c31a:	4798      	blx	r3
    c31c:	1c02      	adds	r2, r0, #0
    c31e:	2314      	movs	r3, #20
    c320:	18fb      	adds	r3, r7, r3
    c322:	609a      	str	r2, [r3, #8]
	rotM[1][0] = 0;
    c324:	2314      	movs	r3, #20
    c326:	18fb      	adds	r3, r7, r3
    c328:	2200      	movs	r2, #0
    c32a:	60da      	str	r2, [r3, #12]
	rotM[1][1] = 1;
    c32c:	2314      	movs	r3, #20
    c32e:	18fb      	adds	r3, r7, r3
    c330:	22fe      	movs	r2, #254	; 0xfe
    c332:	0592      	lsls	r2, r2, #22
    c334:	611a      	str	r2, [r3, #16]
	rotM[1][2] = 0;
    c336:	2314      	movs	r3, #20
    c338:	18fb      	adds	r3, r7, r3
    c33a:	2200      	movs	r2, #0
    c33c:	615a      	str	r2, [r3, #20]
	rotM[2][0] = -1*sin(rthetaY);
    c33e:	4b1e      	ldr	r3, [pc, #120]	; (c3b8 <rotvec_theta_XY+0x1f0>)
    c340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    c342:	4798      	blx	r3
    c344:	0003      	movs	r3, r0
    c346:	000c      	movs	r4, r1
    c348:	0018      	movs	r0, r3
    c34a:	0021      	movs	r1, r4
    c34c:	4b1d      	ldr	r3, [pc, #116]	; (c3c4 <rotvec_theta_XY+0x1fc>)
    c34e:	4798      	blx	r3
    c350:	000a      	movs	r2, r1
    c352:	0001      	movs	r1, r0
    c354:	4b1a      	ldr	r3, [pc, #104]	; (c3c0 <rotvec_theta_XY+0x1f8>)
    c356:	0008      	movs	r0, r1
    c358:	0011      	movs	r1, r2
    c35a:	4798      	blx	r3
    c35c:	1c02      	adds	r2, r0, #0
    c35e:	2380      	movs	r3, #128	; 0x80
    c360:	061b      	lsls	r3, r3, #24
    c362:	405a      	eors	r2, r3
    c364:	2314      	movs	r3, #20
    c366:	18fb      	adds	r3, r7, r3
    c368:	619a      	str	r2, [r3, #24]
	rotM[2][1] = 0;
    c36a:	2314      	movs	r3, #20
    c36c:	18fb      	adds	r3, r7, r3
    c36e:	2200      	movs	r2, #0
    c370:	61da      	str	r2, [r3, #28]
	rotM[2][2] = cos(rthetaY);
    c372:	4b11      	ldr	r3, [pc, #68]	; (c3b8 <rotvec_theta_XY+0x1f0>)
    c374:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    c376:	4798      	blx	r3
    c378:	0003      	movs	r3, r0
    c37a:	000c      	movs	r4, r1
    c37c:	0018      	movs	r0, r3
    c37e:	0021      	movs	r1, r4
    c380:	4b0e      	ldr	r3, [pc, #56]	; (c3bc <rotvec_theta_XY+0x1f4>)
    c382:	4798      	blx	r3
    c384:	000a      	movs	r2, r1
    c386:	0001      	movs	r1, r0
    c388:	4b0d      	ldr	r3, [pc, #52]	; (c3c0 <rotvec_theta_XY+0x1f8>)
    c38a:	0008      	movs	r0, r1
    c38c:	0011      	movs	r1, r2
    c38e:	4798      	blx	r3
    c390:	1c02      	adds	r2, r0, #0
    c392:	2314      	movs	r3, #20
    c394:	18fb      	adds	r3, r7, r3
    c396:	621a      	str	r2, [r3, #32]
	mat_mult_33_31(rotM, rotXYZ, rotXYZ);
    c398:	68ba      	ldr	r2, [r7, #8]
    c39a:	68b9      	ldr	r1, [r7, #8]
    c39c:	2314      	movs	r3, #20
    c39e:	18fb      	adds	r3, r7, r3
    c3a0:	0018      	movs	r0, r3
    c3a2:	4b09      	ldr	r3, [pc, #36]	; (c3c8 <rotvec_theta_XY+0x200>)
    c3a4:	4798      	blx	r3


}
    c3a6:	46c0      	nop			; (mov r8, r8)
    c3a8:	46bd      	mov	sp, r7
    c3aa:	b011      	add	sp, #68	; 0x44
    c3ac:	bd90      	pop	{r4, r7, pc}
    c3ae:	46c0      	nop			; (mov r8, r8)
    c3b0:	00028d68 	.word	0x00028d68
    c3b4:	000217d9 	.word	0x000217d9
    c3b8:	00023a0d 	.word	0x00023a0d
    c3bc:	0001e169 	.word	0x0001e169
    c3c0:	00023ab1 	.word	0x00023ab1
    c3c4:	0001e325 	.word	0x0001e325
    c3c8:	0000c3cd 	.word	0x0000c3cd

0000c3cc <mat_mult_33_31>:


void mat_mult_33_31(float mat33[3][3], float mat3[3], float ret3[3]){
    c3cc:	b5b0      	push	{r4, r5, r7, lr}
    c3ce:	b088      	sub	sp, #32
    c3d0:	af00      	add	r7, sp, #0
    c3d2:	60f8      	str	r0, [r7, #12]
    c3d4:	60b9      	str	r1, [r7, #8]
    c3d6:	607a      	str	r2, [r7, #4]
	uint8_t i, j;
	float temp[3];
	
	//  Multiply 3x3 mat33 matrix by 3x1 mat3 matrix
	for(i=0;i<3;i++){
    c3d8:	231f      	movs	r3, #31
    c3da:	18fb      	adds	r3, r7, r3
    c3dc:	2200      	movs	r2, #0
    c3de:	701a      	strb	r2, [r3, #0]
    c3e0:	e04e      	b.n	c480 <mat_mult_33_31+0xb4>
		temp[i] = 0;
    c3e2:	231f      	movs	r3, #31
    c3e4:	18fb      	adds	r3, r7, r3
    c3e6:	781a      	ldrb	r2, [r3, #0]
    c3e8:	2310      	movs	r3, #16
    c3ea:	18fb      	adds	r3, r7, r3
    c3ec:	0092      	lsls	r2, r2, #2
    c3ee:	2100      	movs	r1, #0
    c3f0:	50d1      	str	r1, [r2, r3]
		for (j=0;j<3;j++){
    c3f2:	231e      	movs	r3, #30
    c3f4:	18fb      	adds	r3, r7, r3
    c3f6:	2200      	movs	r2, #0
    c3f8:	701a      	strb	r2, [r3, #0]
    c3fa:	e035      	b.n	c468 <mat_mult_33_31+0x9c>
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    c3fc:	231f      	movs	r3, #31
    c3fe:	18fb      	adds	r3, r7, r3
    c400:	781c      	ldrb	r4, [r3, #0]
    c402:	231f      	movs	r3, #31
    c404:	18fb      	adds	r3, r7, r3
    c406:	781a      	ldrb	r2, [r3, #0]
    c408:	2310      	movs	r3, #16
    c40a:	18fb      	adds	r3, r7, r3
    c40c:	0092      	lsls	r2, r2, #2
    c40e:	58d5      	ldr	r5, [r2, r3]
    c410:	231f      	movs	r3, #31
    c412:	18fb      	adds	r3, r7, r3
    c414:	781a      	ldrb	r2, [r3, #0]
    c416:	0013      	movs	r3, r2
    c418:	005b      	lsls	r3, r3, #1
    c41a:	189b      	adds	r3, r3, r2
    c41c:	009b      	lsls	r3, r3, #2
    c41e:	001a      	movs	r2, r3
    c420:	68fb      	ldr	r3, [r7, #12]
    c422:	189b      	adds	r3, r3, r2
    c424:	221e      	movs	r2, #30
    c426:	18ba      	adds	r2, r7, r2
    c428:	7812      	ldrb	r2, [r2, #0]
    c42a:	0092      	lsls	r2, r2, #2
    c42c:	58d0      	ldr	r0, [r2, r3]
    c42e:	231e      	movs	r3, #30
    c430:	18fb      	adds	r3, r7, r3
    c432:	781b      	ldrb	r3, [r3, #0]
    c434:	009b      	lsls	r3, r3, #2
    c436:	68ba      	ldr	r2, [r7, #8]
    c438:	18d3      	adds	r3, r2, r3
    c43a:	681a      	ldr	r2, [r3, #0]
    c43c:	4b24      	ldr	r3, [pc, #144]	; (c4d0 <mat_mult_33_31+0x104>)
    c43e:	1c11      	adds	r1, r2, #0
    c440:	4798      	blx	r3
    c442:	1c03      	adds	r3, r0, #0
    c444:	1c1a      	adds	r2, r3, #0
    c446:	4b23      	ldr	r3, [pc, #140]	; (c4d4 <mat_mult_33_31+0x108>)
    c448:	1c11      	adds	r1, r2, #0
    c44a:	1c28      	adds	r0, r5, #0
    c44c:	4798      	blx	r3
    c44e:	1c03      	adds	r3, r0, #0
    c450:	1c19      	adds	r1, r3, #0
    c452:	2310      	movs	r3, #16
    c454:	18fb      	adds	r3, r7, r3
    c456:	00a2      	lsls	r2, r4, #2
    c458:	50d1      	str	r1, [r2, r3]
		for (j=0;j<3;j++){
    c45a:	231e      	movs	r3, #30
    c45c:	18fb      	adds	r3, r7, r3
    c45e:	781a      	ldrb	r2, [r3, #0]
    c460:	231e      	movs	r3, #30
    c462:	18fb      	adds	r3, r7, r3
    c464:	3201      	adds	r2, #1
    c466:	701a      	strb	r2, [r3, #0]
    c468:	231e      	movs	r3, #30
    c46a:	18fb      	adds	r3, r7, r3
    c46c:	781b      	ldrb	r3, [r3, #0]
    c46e:	2b02      	cmp	r3, #2
    c470:	d9c4      	bls.n	c3fc <mat_mult_33_31+0x30>
	for(i=0;i<3;i++){
    c472:	231f      	movs	r3, #31
    c474:	18fb      	adds	r3, r7, r3
    c476:	781a      	ldrb	r2, [r3, #0]
    c478:	231f      	movs	r3, #31
    c47a:	18fb      	adds	r3, r7, r3
    c47c:	3201      	adds	r2, #1
    c47e:	701a      	strb	r2, [r3, #0]
    c480:	231f      	movs	r3, #31
    c482:	18fb      	adds	r3, r7, r3
    c484:	781b      	ldrb	r3, [r3, #0]
    c486:	2b02      	cmp	r3, #2
    c488:	d9ab      	bls.n	c3e2 <mat_mult_33_31+0x16>
		}

	}
	//  Copy temp matrix back into ret3 matrix
	for(i=0;i<3;i++){
    c48a:	231f      	movs	r3, #31
    c48c:	18fb      	adds	r3, r7, r3
    c48e:	2200      	movs	r2, #0
    c490:	701a      	strb	r2, [r3, #0]
    c492:	e014      	b.n	c4be <mat_mult_33_31+0xf2>
		ret3[i] = temp[i];
    c494:	231f      	movs	r3, #31
    c496:	18fb      	adds	r3, r7, r3
    c498:	781b      	ldrb	r3, [r3, #0]
    c49a:	009b      	lsls	r3, r3, #2
    c49c:	687a      	ldr	r2, [r7, #4]
    c49e:	18d3      	adds	r3, r2, r3
    c4a0:	221f      	movs	r2, #31
    c4a2:	18ba      	adds	r2, r7, r2
    c4a4:	7811      	ldrb	r1, [r2, #0]
    c4a6:	2210      	movs	r2, #16
    c4a8:	18ba      	adds	r2, r7, r2
    c4aa:	0089      	lsls	r1, r1, #2
    c4ac:	588a      	ldr	r2, [r1, r2]
    c4ae:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++){
    c4b0:	231f      	movs	r3, #31
    c4b2:	18fb      	adds	r3, r7, r3
    c4b4:	781a      	ldrb	r2, [r3, #0]
    c4b6:	231f      	movs	r3, #31
    c4b8:	18fb      	adds	r3, r7, r3
    c4ba:	3201      	adds	r2, #1
    c4bc:	701a      	strb	r2, [r3, #0]
    c4be:	231f      	movs	r3, #31
    c4c0:	18fb      	adds	r3, r7, r3
    c4c2:	781b      	ldrb	r3, [r3, #0]
    c4c4:	2b02      	cmp	r3, #2
    c4c6:	d9e5      	bls.n	c494 <mat_mult_33_31+0xc8>
	}
	
}
    c4c8:	46c0      	nop			; (mov r8, r8)
    c4ca:	46bd      	mov	sp, r7
    c4cc:	b008      	add	sp, #32
    c4ce:	bdb0      	pop	{r4, r5, r7, pc}
    c4d0:	000217d9 	.word	0x000217d9
    c4d4:	000210d5 	.word	0x000210d5

0000c4d8 <calc_azm_inc_roll_dec>:

void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *declinationP){
    c4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4da:	b08d      	sub	sp, #52	; 0x34
    c4dc:	af00      	add	r7, sp, #0
    c4de:	6178      	str	r0, [r7, #20]
    c4e0:	6139      	str	r1, [r7, #16]
    c4e2:	60fa      	str	r2, [r7, #12]
    c4e4:	60bb      	str	r3, [r7, #8]
	
	float crotXYZ[3];
	float thetaX, thetaY, crxy;
	
	//  Calculate Inclination and Roll
	calc_theta_XY( aXYZ , &thetaX, &thetaY);
    c4e6:	2310      	movs	r3, #16
    c4e8:	2208      	movs	r2, #8
    c4ea:	18ba      	adds	r2, r7, r2
    c4ec:	18d2      	adds	r2, r2, r3
    c4ee:	2314      	movs	r3, #20
    c4f0:	2108      	movs	r1, #8
    c4f2:	1879      	adds	r1, r7, r1
    c4f4:	18c9      	adds	r1, r1, r3
    c4f6:	697b      	ldr	r3, [r7, #20]
    c4f8:	0018      	movs	r0, r3
    c4fa:	4b65      	ldr	r3, [pc, #404]	; (c690 <calc_azm_inc_roll_dec+0x1b8>)
    c4fc:	4798      	blx	r3
	*inclinationP = -1*thetaY;
    c4fe:	69bb      	ldr	r3, [r7, #24]
    c500:	2280      	movs	r2, #128	; 0x80
    c502:	0612      	lsls	r2, r2, #24
    c504:	405a      	eors	r2, r3
    c506:	68bb      	ldr	r3, [r7, #8]
    c508:	601a      	str	r2, [r3, #0]
	*rollP = thetaX;
    c50a:	69fa      	ldr	r2, [r7, #28]
    c50c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c50e:	601a      	str	r2, [r3, #0]
	
	//  Calculate Azimuth
	rotvec_theta_XY(cXYZ, crotXYZ, &thetaX, &thetaY);
    c510:	2310      	movs	r3, #16
    c512:	2208      	movs	r2, #8
    c514:	4694      	mov	ip, r2
    c516:	44bc      	add	ip, r7
    c518:	4463      	add	r3, ip
    c51a:	2214      	movs	r2, #20
    c51c:	2108      	movs	r1, #8
    c51e:	468c      	mov	ip, r1
    c520:	44bc      	add	ip, r7
    c522:	4462      	add	r2, ip
    c524:	2118      	movs	r1, #24
    c526:	2008      	movs	r0, #8
    c528:	4684      	mov	ip, r0
    c52a:	44bc      	add	ip, r7
    c52c:	4461      	add	r1, ip
    c52e:	6938      	ldr	r0, [r7, #16]
    c530:	4c58      	ldr	r4, [pc, #352]	; (c694 <calc_azm_inc_roll_dec+0x1bc>)
    c532:	47a0      	blx	r4
	*azimuthP = rad2deg*atan2(crotXYZ[1], crotXYZ[0]);
    c534:	4b58      	ldr	r3, [pc, #352]	; (c698 <calc_azm_inc_roll_dec+0x1c0>)
    c536:	681a      	ldr	r2, [r3, #0]
    c538:	4b58      	ldr	r3, [pc, #352]	; (c69c <calc_azm_inc_roll_dec+0x1c4>)
    c53a:	1c10      	adds	r0, r2, #0
    c53c:	4798      	blx	r3
    c53e:	0005      	movs	r5, r0
    c540:	000e      	movs	r6, r1
    c542:	2318      	movs	r3, #24
    c544:	2208      	movs	r2, #8
    c546:	4694      	mov	ip, r2
    c548:	44bc      	add	ip, r7
    c54a:	4463      	add	r3, ip
    c54c:	685a      	ldr	r2, [r3, #4]
    c54e:	4b53      	ldr	r3, [pc, #332]	; (c69c <calc_azm_inc_roll_dec+0x1c4>)
    c550:	1c10      	adds	r0, r2, #0
    c552:	4798      	blx	r3
    c554:	6038      	str	r0, [r7, #0]
    c556:	6079      	str	r1, [r7, #4]
    c558:	2318      	movs	r3, #24
    c55a:	2208      	movs	r2, #8
    c55c:	4694      	mov	ip, r2
    c55e:	44bc      	add	ip, r7
    c560:	4463      	add	r3, ip
    c562:	681a      	ldr	r2, [r3, #0]
    c564:	4b4d      	ldr	r3, [pc, #308]	; (c69c <calc_azm_inc_roll_dec+0x1c4>)
    c566:	1c10      	adds	r0, r2, #0
    c568:	4798      	blx	r3
    c56a:	0003      	movs	r3, r0
    c56c:	000c      	movs	r4, r1
    c56e:	001a      	movs	r2, r3
    c570:	0023      	movs	r3, r4
    c572:	6838      	ldr	r0, [r7, #0]
    c574:	6879      	ldr	r1, [r7, #4]
    c576:	4c4a      	ldr	r4, [pc, #296]	; (c6a0 <calc_azm_inc_roll_dec+0x1c8>)
    c578:	47a0      	blx	r4
    c57a:	0002      	movs	r2, r0
    c57c:	000b      	movs	r3, r1
    c57e:	4c49      	ldr	r4, [pc, #292]	; (c6a4 <calc_azm_inc_roll_dec+0x1cc>)
    c580:	0028      	movs	r0, r5
    c582:	0031      	movs	r1, r6
    c584:	47a0      	blx	r4
    c586:	0003      	movs	r3, r0
    c588:	000c      	movs	r4, r1
    c58a:	0019      	movs	r1, r3
    c58c:	0022      	movs	r2, r4
    c58e:	4b46      	ldr	r3, [pc, #280]	; (c6a8 <calc_azm_inc_roll_dec+0x1d0>)
    c590:	0008      	movs	r0, r1
    c592:	0011      	movs	r1, r2
    c594:	4798      	blx	r3
    c596:	1c02      	adds	r2, r0, #0
    c598:	68fb      	ldr	r3, [r7, #12]
    c59a:	601a      	str	r2, [r3, #0]
	if ((*azimuthP)<0){
    c59c:	68fb      	ldr	r3, [r7, #12]
    c59e:	681a      	ldr	r2, [r3, #0]
    c5a0:	4b42      	ldr	r3, [pc, #264]	; (c6ac <calc_azm_inc_roll_dec+0x1d4>)
    c5a2:	2100      	movs	r1, #0
    c5a4:	1c10      	adds	r0, r2, #0
    c5a6:	4798      	blx	r3
    c5a8:	1e03      	subs	r3, r0, #0
    c5aa:	d009      	beq.n	c5c0 <calc_azm_inc_roll_dec+0xe8>
		//  Result is -180 to +180; Compass must be 0-360
		*azimuthP = *azimuthP+360;
    c5ac:	68fb      	ldr	r3, [r7, #12]
    c5ae:	681a      	ldr	r2, [r3, #0]
    c5b0:	4b3f      	ldr	r3, [pc, #252]	; (c6b0 <calc_azm_inc_roll_dec+0x1d8>)
    c5b2:	4940      	ldr	r1, [pc, #256]	; (c6b4 <calc_azm_inc_roll_dec+0x1dc>)
    c5b4:	1c10      	adds	r0, r2, #0
    c5b6:	4798      	blx	r3
    c5b8:	1c03      	adds	r3, r0, #0
    c5ba:	1c1a      	adds	r2, r3, #0
    c5bc:	68fb      	ldr	r3, [r7, #12]
    c5be:	601a      	str	r2, [r3, #0]
	}
	
	//  Calculate declination
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    c5c0:	2318      	movs	r3, #24
    c5c2:	2208      	movs	r2, #8
    c5c4:	4694      	mov	ip, r2
    c5c6:	44bc      	add	ip, r7
    c5c8:	4463      	add	r3, ip
    c5ca:	681a      	ldr	r2, [r3, #0]
    c5cc:	4b33      	ldr	r3, [pc, #204]	; (c69c <calc_azm_inc_roll_dec+0x1c4>)
    c5ce:	1c10      	adds	r0, r2, #0
    c5d0:	4798      	blx	r3
    c5d2:	2300      	movs	r3, #0
    c5d4:	2480      	movs	r4, #128	; 0x80
    c5d6:	05e4      	lsls	r4, r4, #23
    c5d8:	001a      	movs	r2, r3
    c5da:	0023      	movs	r3, r4
    c5dc:	4c36      	ldr	r4, [pc, #216]	; (c6b8 <calc_azm_inc_roll_dec+0x1e0>)
    c5de:	47a0      	blx	r4
    c5e0:	0005      	movs	r5, r0
    c5e2:	000e      	movs	r6, r1
    c5e4:	2318      	movs	r3, #24
    c5e6:	2208      	movs	r2, #8
    c5e8:	4694      	mov	ip, r2
    c5ea:	44bc      	add	ip, r7
    c5ec:	4463      	add	r3, ip
    c5ee:	685a      	ldr	r2, [r3, #4]
    c5f0:	4b2a      	ldr	r3, [pc, #168]	; (c69c <calc_azm_inc_roll_dec+0x1c4>)
    c5f2:	1c10      	adds	r0, r2, #0
    c5f4:	4798      	blx	r3
    c5f6:	2300      	movs	r3, #0
    c5f8:	2480      	movs	r4, #128	; 0x80
    c5fa:	05e4      	lsls	r4, r4, #23
    c5fc:	001a      	movs	r2, r3
    c5fe:	0023      	movs	r3, r4
    c600:	4c2d      	ldr	r4, [pc, #180]	; (c6b8 <calc_azm_inc_roll_dec+0x1e0>)
    c602:	47a0      	blx	r4
    c604:	0002      	movs	r2, r0
    c606:	000b      	movs	r3, r1
    c608:	4c2c      	ldr	r4, [pc, #176]	; (c6bc <calc_azm_inc_roll_dec+0x1e4>)
    c60a:	0028      	movs	r0, r5
    c60c:	0031      	movs	r1, r6
    c60e:	47a0      	blx	r4
    c610:	0003      	movs	r3, r0
    c612:	000c      	movs	r4, r1
    c614:	0018      	movs	r0, r3
    c616:	0021      	movs	r1, r4
    c618:	4b29      	ldr	r3, [pc, #164]	; (c6c0 <calc_azm_inc_roll_dec+0x1e8>)
    c61a:	4798      	blx	r3
    c61c:	000a      	movs	r2, r1
    c61e:	0001      	movs	r1, r0
    c620:	4b21      	ldr	r3, [pc, #132]	; (c6a8 <calc_azm_inc_roll_dec+0x1d0>)
    c622:	0008      	movs	r0, r1
    c624:	0011      	movs	r1, r2
    c626:	4798      	blx	r3
    c628:	1c03      	adds	r3, r0, #0
    c62a:	62fb      	str	r3, [r7, #44]	; 0x2c
	*declinationP = rad2deg*atan2(crotXYZ[2], crxy);
    c62c:	4b1a      	ldr	r3, [pc, #104]	; (c698 <calc_azm_inc_roll_dec+0x1c0>)
    c62e:	681a      	ldr	r2, [r3, #0]
    c630:	4b1a      	ldr	r3, [pc, #104]	; (c69c <calc_azm_inc_roll_dec+0x1c4>)
    c632:	1c10      	adds	r0, r2, #0
    c634:	4798      	blx	r3
    c636:	0005      	movs	r5, r0
    c638:	000e      	movs	r6, r1
    c63a:	2318      	movs	r3, #24
    c63c:	2208      	movs	r2, #8
    c63e:	4694      	mov	ip, r2
    c640:	44bc      	add	ip, r7
    c642:	4463      	add	r3, ip
    c644:	689a      	ldr	r2, [r3, #8]
    c646:	4b15      	ldr	r3, [pc, #84]	; (c69c <calc_azm_inc_roll_dec+0x1c4>)
    c648:	1c10      	adds	r0, r2, #0
    c64a:	4798      	blx	r3
    c64c:	6038      	str	r0, [r7, #0]
    c64e:	6079      	str	r1, [r7, #4]
    c650:	4b12      	ldr	r3, [pc, #72]	; (c69c <calc_azm_inc_roll_dec+0x1c4>)
    c652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c654:	4798      	blx	r3
    c656:	0003      	movs	r3, r0
    c658:	000c      	movs	r4, r1
    c65a:	001a      	movs	r2, r3
    c65c:	0023      	movs	r3, r4
    c65e:	6838      	ldr	r0, [r7, #0]
    c660:	6879      	ldr	r1, [r7, #4]
    c662:	4c0f      	ldr	r4, [pc, #60]	; (c6a0 <calc_azm_inc_roll_dec+0x1c8>)
    c664:	47a0      	blx	r4
    c666:	0002      	movs	r2, r0
    c668:	000b      	movs	r3, r1
    c66a:	4c0e      	ldr	r4, [pc, #56]	; (c6a4 <calc_azm_inc_roll_dec+0x1cc>)
    c66c:	0028      	movs	r0, r5
    c66e:	0031      	movs	r1, r6
    c670:	47a0      	blx	r4
    c672:	0003      	movs	r3, r0
    c674:	000c      	movs	r4, r1
    c676:	0019      	movs	r1, r3
    c678:	0022      	movs	r2, r4
    c67a:	4b0b      	ldr	r3, [pc, #44]	; (c6a8 <calc_azm_inc_roll_dec+0x1d0>)
    c67c:	0008      	movs	r0, r1
    c67e:	0011      	movs	r1, r2
    c680:	4798      	blx	r3
    c682:	1c02      	adds	r2, r0, #0
    c684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c686:	601a      	str	r2, [r3, #0]
	
		
}
    c688:	46c0      	nop			; (mov r8, r8)
    c68a:	46bd      	mov	sp, r7
    c68c:	b00d      	add	sp, #52	; 0x34
    c68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c690:	0000c6c5 	.word	0x0000c6c5
    c694:	0000c1c9 	.word	0x0000c1c9
    c698:	00028d64 	.word	0x00028d64
    c69c:	00023a0d 	.word	0x00023a0d
    c6a0:	0001e3b5 	.word	0x0001e3b5
    c6a4:	00022d45 	.word	0x00022d45
    c6a8:	00023ab1 	.word	0x00023ab1
    c6ac:	00020f49 	.word	0x00020f49
    c6b0:	000210d5 	.word	0x000210d5
    c6b4:	43b40000 	.word	0x43b40000
    c6b8:	0001e3bd 	.word	0x0001e3bd
    c6bc:	00021ebd 	.word	0x00021ebd
    c6c0:	0001e715 	.word	0x0001e715

0000c6c4 <calc_theta_XY>:


void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
    c6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6c6:	b089      	sub	sp, #36	; 0x24
    c6c8:	af00      	add	r7, sp, #0
    c6ca:	6178      	str	r0, [r7, #20]
    c6cc:	6139      	str	r1, [r7, #16]
    c6ce:	60fa      	str	r2, [r7, #12]
	float ryz;
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    c6d0:	697b      	ldr	r3, [r7, #20]
    c6d2:	3304      	adds	r3, #4
    c6d4:	681a      	ldr	r2, [r3, #0]
    c6d6:	4b48      	ldr	r3, [pc, #288]	; (c7f8 <calc_theta_XY+0x134>)
    c6d8:	1c10      	adds	r0, r2, #0
    c6da:	4798      	blx	r3
    c6dc:	2300      	movs	r3, #0
    c6de:	2480      	movs	r4, #128	; 0x80
    c6e0:	05e4      	lsls	r4, r4, #23
    c6e2:	001a      	movs	r2, r3
    c6e4:	0023      	movs	r3, r4
    c6e6:	4c45      	ldr	r4, [pc, #276]	; (c7fc <calc_theta_XY+0x138>)
    c6e8:	47a0      	blx	r4
    c6ea:	0005      	movs	r5, r0
    c6ec:	000e      	movs	r6, r1
    c6ee:	697b      	ldr	r3, [r7, #20]
    c6f0:	3308      	adds	r3, #8
    c6f2:	681a      	ldr	r2, [r3, #0]
    c6f4:	4b40      	ldr	r3, [pc, #256]	; (c7f8 <calc_theta_XY+0x134>)
    c6f6:	1c10      	adds	r0, r2, #0
    c6f8:	4798      	blx	r3
    c6fa:	2300      	movs	r3, #0
    c6fc:	2480      	movs	r4, #128	; 0x80
    c6fe:	05e4      	lsls	r4, r4, #23
    c700:	001a      	movs	r2, r3
    c702:	0023      	movs	r3, r4
    c704:	4c3d      	ldr	r4, [pc, #244]	; (c7fc <calc_theta_XY+0x138>)
    c706:	47a0      	blx	r4
    c708:	0002      	movs	r2, r0
    c70a:	000b      	movs	r3, r1
    c70c:	4c3c      	ldr	r4, [pc, #240]	; (c800 <calc_theta_XY+0x13c>)
    c70e:	0028      	movs	r0, r5
    c710:	0031      	movs	r1, r6
    c712:	47a0      	blx	r4
    c714:	0003      	movs	r3, r0
    c716:	000c      	movs	r4, r1
    c718:	0018      	movs	r0, r3
    c71a:	0021      	movs	r1, r4
    c71c:	4b39      	ldr	r3, [pc, #228]	; (c804 <calc_theta_XY+0x140>)
    c71e:	4798      	blx	r3
    c720:	000a      	movs	r2, r1
    c722:	0001      	movs	r1, r0
    c724:	4b38      	ldr	r3, [pc, #224]	; (c808 <calc_theta_XY+0x144>)
    c726:	0008      	movs	r0, r1
    c728:	0011      	movs	r1, r2
    c72a:	4798      	blx	r3
    c72c:	1c03      	adds	r3, r0, #0
    c72e:	61fb      	str	r3, [r7, #28]
	
	*thetaX = rad2deg*atan2(XYZ[1], XYZ[2]) + 180;
    c730:	4b36      	ldr	r3, [pc, #216]	; (c80c <calc_theta_XY+0x148>)
    c732:	681a      	ldr	r2, [r3, #0]
    c734:	4b30      	ldr	r3, [pc, #192]	; (c7f8 <calc_theta_XY+0x134>)
    c736:	1c10      	adds	r0, r2, #0
    c738:	4798      	blx	r3
    c73a:	0005      	movs	r5, r0
    c73c:	000e      	movs	r6, r1
    c73e:	697b      	ldr	r3, [r7, #20]
    c740:	3304      	adds	r3, #4
    c742:	681a      	ldr	r2, [r3, #0]
    c744:	4b2c      	ldr	r3, [pc, #176]	; (c7f8 <calc_theta_XY+0x134>)
    c746:	1c10      	adds	r0, r2, #0
    c748:	4798      	blx	r3
    c74a:	6038      	str	r0, [r7, #0]
    c74c:	6079      	str	r1, [r7, #4]
    c74e:	697b      	ldr	r3, [r7, #20]
    c750:	3308      	adds	r3, #8
    c752:	681a      	ldr	r2, [r3, #0]
    c754:	4b28      	ldr	r3, [pc, #160]	; (c7f8 <calc_theta_XY+0x134>)
    c756:	1c10      	adds	r0, r2, #0
    c758:	4798      	blx	r3
    c75a:	0003      	movs	r3, r0
    c75c:	000c      	movs	r4, r1
    c75e:	001a      	movs	r2, r3
    c760:	0023      	movs	r3, r4
    c762:	6838      	ldr	r0, [r7, #0]
    c764:	6879      	ldr	r1, [r7, #4]
    c766:	4c2a      	ldr	r4, [pc, #168]	; (c810 <calc_theta_XY+0x14c>)
    c768:	47a0      	blx	r4
    c76a:	0002      	movs	r2, r0
    c76c:	000b      	movs	r3, r1
    c76e:	4c29      	ldr	r4, [pc, #164]	; (c814 <calc_theta_XY+0x150>)
    c770:	0028      	movs	r0, r5
    c772:	0031      	movs	r1, r6
    c774:	47a0      	blx	r4
    c776:	0003      	movs	r3, r0
    c778:	000c      	movs	r4, r1
    c77a:	0018      	movs	r0, r3
    c77c:	0021      	movs	r1, r4
    c77e:	4c20      	ldr	r4, [pc, #128]	; (c800 <calc_theta_XY+0x13c>)
    c780:	2200      	movs	r2, #0
    c782:	4b25      	ldr	r3, [pc, #148]	; (c818 <calc_theta_XY+0x154>)
    c784:	47a0      	blx	r4
    c786:	0003      	movs	r3, r0
    c788:	000c      	movs	r4, r1
    c78a:	0019      	movs	r1, r3
    c78c:	0022      	movs	r2, r4
    c78e:	4b1e      	ldr	r3, [pc, #120]	; (c808 <calc_theta_XY+0x144>)
    c790:	0008      	movs	r0, r1
    c792:	0011      	movs	r1, r2
    c794:	4798      	blx	r3
    c796:	1c02      	adds	r2, r0, #0
    c798:	693b      	ldr	r3, [r7, #16]
    c79a:	601a      	str	r2, [r3, #0]
	*thetaY = rad2deg*atan2(XYZ[0], ryz);
    c79c:	4b1b      	ldr	r3, [pc, #108]	; (c80c <calc_theta_XY+0x148>)
    c79e:	681a      	ldr	r2, [r3, #0]
    c7a0:	4b15      	ldr	r3, [pc, #84]	; (c7f8 <calc_theta_XY+0x134>)
    c7a2:	1c10      	adds	r0, r2, #0
    c7a4:	4798      	blx	r3
    c7a6:	0005      	movs	r5, r0
    c7a8:	000e      	movs	r6, r1
    c7aa:	697b      	ldr	r3, [r7, #20]
    c7ac:	681a      	ldr	r2, [r3, #0]
    c7ae:	4b12      	ldr	r3, [pc, #72]	; (c7f8 <calc_theta_XY+0x134>)
    c7b0:	1c10      	adds	r0, r2, #0
    c7b2:	4798      	blx	r3
    c7b4:	6038      	str	r0, [r7, #0]
    c7b6:	6079      	str	r1, [r7, #4]
    c7b8:	4b0f      	ldr	r3, [pc, #60]	; (c7f8 <calc_theta_XY+0x134>)
    c7ba:	69f8      	ldr	r0, [r7, #28]
    c7bc:	4798      	blx	r3
    c7be:	0003      	movs	r3, r0
    c7c0:	000c      	movs	r4, r1
    c7c2:	001a      	movs	r2, r3
    c7c4:	0023      	movs	r3, r4
    c7c6:	6838      	ldr	r0, [r7, #0]
    c7c8:	6879      	ldr	r1, [r7, #4]
    c7ca:	4c11      	ldr	r4, [pc, #68]	; (c810 <calc_theta_XY+0x14c>)
    c7cc:	47a0      	blx	r4
    c7ce:	0002      	movs	r2, r0
    c7d0:	000b      	movs	r3, r1
    c7d2:	4c10      	ldr	r4, [pc, #64]	; (c814 <calc_theta_XY+0x150>)
    c7d4:	0028      	movs	r0, r5
    c7d6:	0031      	movs	r1, r6
    c7d8:	47a0      	blx	r4
    c7da:	0003      	movs	r3, r0
    c7dc:	000c      	movs	r4, r1
    c7de:	0019      	movs	r1, r3
    c7e0:	0022      	movs	r2, r4
    c7e2:	4b09      	ldr	r3, [pc, #36]	; (c808 <calc_theta_XY+0x144>)
    c7e4:	0008      	movs	r0, r1
    c7e6:	0011      	movs	r1, r2
    c7e8:	4798      	blx	r3
    c7ea:	1c02      	adds	r2, r0, #0
    c7ec:	68fb      	ldr	r3, [r7, #12]
    c7ee:	601a      	str	r2, [r3, #0]
	
}
    c7f0:	46c0      	nop			; (mov r8, r8)
    c7f2:	46bd      	mov	sp, r7
    c7f4:	b009      	add	sp, #36	; 0x24
    c7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7f8:	00023a0d 	.word	0x00023a0d
    c7fc:	0001e3bd 	.word	0x0001e3bd
    c800:	00021ebd 	.word	0x00021ebd
    c804:	0001e715 	.word	0x0001e715
    c808:	00023ab1 	.word	0x00023ab1
    c80c:	00028d64 	.word	0x00028d64
    c810:	0001e3b5 	.word	0x0001e3b5
    c814:	00022d45 	.word	0x00022d45
    c818:	40668000 	.word	0x40668000

0000c81c <stdev>:


float stdev(float data[nbuf], uint32_t n_meas){
    c81c:	b590      	push	{r4, r7, lr}
    c81e:	b089      	sub	sp, #36	; 0x24
    c820:	af00      	add	r7, sp, #0
    c822:	6078      	str	r0, [r7, #4]
    c824:	6039      	str	r1, [r7, #0]
	uint8_t i;
	double mean, sumsq;
	
	mean = 0;
    c826:	2300      	movs	r3, #0
    c828:	2400      	movs	r4, #0
    c82a:	613b      	str	r3, [r7, #16]
    c82c:	617c      	str	r4, [r7, #20]
	for (i=0;i<n_meas;i++){
    c82e:	231f      	movs	r3, #31
    c830:	18fb      	adds	r3, r7, r3
    c832:	2200      	movs	r2, #0
    c834:	701a      	strb	r2, [r3, #0]
    c836:	e01a      	b.n	c86e <stdev+0x52>
		mean = mean+data[i];
    c838:	231f      	movs	r3, #31
    c83a:	18fb      	adds	r3, r7, r3
    c83c:	781b      	ldrb	r3, [r3, #0]
    c83e:	009b      	lsls	r3, r3, #2
    c840:	687a      	ldr	r2, [r7, #4]
    c842:	18d3      	adds	r3, r2, r3
    c844:	681a      	ldr	r2, [r3, #0]
    c846:	4b41      	ldr	r3, [pc, #260]	; (c94c <stdev+0x130>)
    c848:	1c10      	adds	r0, r2, #0
    c84a:	4798      	blx	r3
    c84c:	0002      	movs	r2, r0
    c84e:	000b      	movs	r3, r1
    c850:	4c3f      	ldr	r4, [pc, #252]	; (c950 <stdev+0x134>)
    c852:	6938      	ldr	r0, [r7, #16]
    c854:	6979      	ldr	r1, [r7, #20]
    c856:	47a0      	blx	r4
    c858:	0003      	movs	r3, r0
    c85a:	000c      	movs	r4, r1
    c85c:	613b      	str	r3, [r7, #16]
    c85e:	617c      	str	r4, [r7, #20]
	for (i=0;i<n_meas;i++){
    c860:	231f      	movs	r3, #31
    c862:	18fb      	adds	r3, r7, r3
    c864:	781a      	ldrb	r2, [r3, #0]
    c866:	231f      	movs	r3, #31
    c868:	18fb      	adds	r3, r7, r3
    c86a:	3201      	adds	r2, #1
    c86c:	701a      	strb	r2, [r3, #0]
    c86e:	231f      	movs	r3, #31
    c870:	18fb      	adds	r3, r7, r3
    c872:	781a      	ldrb	r2, [r3, #0]
    c874:	683b      	ldr	r3, [r7, #0]
    c876:	429a      	cmp	r2, r3
    c878:	d3de      	bcc.n	c838 <stdev+0x1c>
	}
	mean = mean/n_meas;
    c87a:	4b36      	ldr	r3, [pc, #216]	; (c954 <stdev+0x138>)
    c87c:	6838      	ldr	r0, [r7, #0]
    c87e:	4798      	blx	r3
    c880:	0002      	movs	r2, r0
    c882:	000b      	movs	r3, r1
    c884:	4c34      	ldr	r4, [pc, #208]	; (c958 <stdev+0x13c>)
    c886:	6938      	ldr	r0, [r7, #16]
    c888:	6979      	ldr	r1, [r7, #20]
    c88a:	47a0      	blx	r4
    c88c:	0003      	movs	r3, r0
    c88e:	000c      	movs	r4, r1
    c890:	613b      	str	r3, [r7, #16]
    c892:	617c      	str	r4, [r7, #20]
	
	sumsq = 0;
    c894:	2300      	movs	r3, #0
    c896:	2400      	movs	r4, #0
    c898:	60bb      	str	r3, [r7, #8]
    c89a:	60fc      	str	r4, [r7, #12]
	for (i=0;i<n_meas;i++){
    c89c:	231f      	movs	r3, #31
    c89e:	18fb      	adds	r3, r7, r3
    c8a0:	2200      	movs	r2, #0
    c8a2:	701a      	strb	r2, [r3, #0]
    c8a4:	e029      	b.n	c8fa <stdev+0xde>
		sumsq = sumsq+pow((data[i]-mean),2);
    c8a6:	231f      	movs	r3, #31
    c8a8:	18fb      	adds	r3, r7, r3
    c8aa:	781b      	ldrb	r3, [r3, #0]
    c8ac:	009b      	lsls	r3, r3, #2
    c8ae:	687a      	ldr	r2, [r7, #4]
    c8b0:	18d3      	adds	r3, r2, r3
    c8b2:	681a      	ldr	r2, [r3, #0]
    c8b4:	4b25      	ldr	r3, [pc, #148]	; (c94c <stdev+0x130>)
    c8b6:	1c10      	adds	r0, r2, #0
    c8b8:	4798      	blx	r3
    c8ba:	4c28      	ldr	r4, [pc, #160]	; (c95c <stdev+0x140>)
    c8bc:	693a      	ldr	r2, [r7, #16]
    c8be:	697b      	ldr	r3, [r7, #20]
    c8c0:	47a0      	blx	r4
    c8c2:	0003      	movs	r3, r0
    c8c4:	000c      	movs	r4, r1
    c8c6:	0018      	movs	r0, r3
    c8c8:	0021      	movs	r1, r4
    c8ca:	2300      	movs	r3, #0
    c8cc:	2480      	movs	r4, #128	; 0x80
    c8ce:	05e4      	lsls	r4, r4, #23
    c8d0:	001a      	movs	r2, r3
    c8d2:	0023      	movs	r3, r4
    c8d4:	4c22      	ldr	r4, [pc, #136]	; (c960 <stdev+0x144>)
    c8d6:	47a0      	blx	r4
    c8d8:	0002      	movs	r2, r0
    c8da:	000b      	movs	r3, r1
    c8dc:	4c1c      	ldr	r4, [pc, #112]	; (c950 <stdev+0x134>)
    c8de:	68b8      	ldr	r0, [r7, #8]
    c8e0:	68f9      	ldr	r1, [r7, #12]
    c8e2:	47a0      	blx	r4
    c8e4:	0003      	movs	r3, r0
    c8e6:	000c      	movs	r4, r1
    c8e8:	60bb      	str	r3, [r7, #8]
    c8ea:	60fc      	str	r4, [r7, #12]
	for (i=0;i<n_meas;i++){
    c8ec:	231f      	movs	r3, #31
    c8ee:	18fb      	adds	r3, r7, r3
    c8f0:	781a      	ldrb	r2, [r3, #0]
    c8f2:	231f      	movs	r3, #31
    c8f4:	18fb      	adds	r3, r7, r3
    c8f6:	3201      	adds	r2, #1
    c8f8:	701a      	strb	r2, [r3, #0]
    c8fa:	231f      	movs	r3, #31
    c8fc:	18fb      	adds	r3, r7, r3
    c8fe:	781a      	ldrb	r2, [r3, #0]
    c900:	683b      	ldr	r3, [r7, #0]
    c902:	429a      	cmp	r2, r3
    c904:	d3cf      	bcc.n	c8a6 <stdev+0x8a>
	}
	sumsq = sumsq/(n_meas-1);
    c906:	683b      	ldr	r3, [r7, #0]
    c908:	1e5a      	subs	r2, r3, #1
    c90a:	4b12      	ldr	r3, [pc, #72]	; (c954 <stdev+0x138>)
    c90c:	0010      	movs	r0, r2
    c90e:	4798      	blx	r3
    c910:	0002      	movs	r2, r0
    c912:	000b      	movs	r3, r1
    c914:	4c10      	ldr	r4, [pc, #64]	; (c958 <stdev+0x13c>)
    c916:	68b8      	ldr	r0, [r7, #8]
    c918:	68f9      	ldr	r1, [r7, #12]
    c91a:	47a0      	blx	r4
    c91c:	0003      	movs	r3, r0
    c91e:	000c      	movs	r4, r1
    c920:	60bb      	str	r3, [r7, #8]
    c922:	60fc      	str	r4, [r7, #12]
	sumsq = sqrt(sumsq);
    c924:	68bb      	ldr	r3, [r7, #8]
    c926:	68fc      	ldr	r4, [r7, #12]
    c928:	0018      	movs	r0, r3
    c92a:	0021      	movs	r1, r4
    c92c:	4b0d      	ldr	r3, [pc, #52]	; (c964 <stdev+0x148>)
    c92e:	4798      	blx	r3
    c930:	0003      	movs	r3, r0
    c932:	000c      	movs	r4, r1
    c934:	60bb      	str	r3, [r7, #8]
    c936:	60fc      	str	r4, [r7, #12]
	
	return sumsq;
    c938:	4b0b      	ldr	r3, [pc, #44]	; (c968 <stdev+0x14c>)
    c93a:	68b8      	ldr	r0, [r7, #8]
    c93c:	68f9      	ldr	r1, [r7, #12]
    c93e:	4798      	blx	r3
    c940:	1c03      	adds	r3, r0, #0
}
    c942:	1c18      	adds	r0, r3, #0
    c944:	46bd      	mov	sp, r7
    c946:	b009      	add	sp, #36	; 0x24
    c948:	bd90      	pop	{r4, r7, pc}
    c94a:	46c0      	nop			; (mov r8, r8)
    c94c:	00023a0d 	.word	0x00023a0d
    c950:	00021ebd 	.word	0x00021ebd
    c954:	0002399d 	.word	0x0002399d
    c958:	000224dd 	.word	0x000224dd
    c95c:	00023245 	.word	0x00023245
    c960:	0001e3bd 	.word	0x0001e3bd
    c964:	0001e715 	.word	0x0001e715
    c968:	00023ab1 	.word	0x00023ab1

0000c96c <calc_mag_stdev>:

float calc_mag_stdev(float XYZ[nbuf][3]){
    c96c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c96e:	b0d5      	sub	sp, #340	; 0x154
    c970:	af00      	add	r7, sp, #0
    c972:	6078      	str	r0, [r7, #4]
	float err_mag[nbuf];
	uint32_t p;
	float temp1;
	
	for (p=0;p<n_points;p++){
    c974:	2300      	movs	r3, #0
    c976:	22a6      	movs	r2, #166	; 0xa6
    c978:	0052      	lsls	r2, r2, #1
    c97a:	18ba      	adds	r2, r7, r2
    c97c:	6013      	str	r3, [r2, #0]
    c97e:	e083      	b.n	ca88 <calc_mag_stdev+0x11c>
		temp1 = sqrt(pow(XYZ[p][0],2)+pow(XYZ[p][1],2)+pow(XYZ[p][2],2));
    c980:	23a6      	movs	r3, #166	; 0xa6
    c982:	005b      	lsls	r3, r3, #1
    c984:	18fb      	adds	r3, r7, r3
    c986:	681a      	ldr	r2, [r3, #0]
    c988:	0013      	movs	r3, r2
    c98a:	005b      	lsls	r3, r3, #1
    c98c:	189b      	adds	r3, r3, r2
    c98e:	009b      	lsls	r3, r3, #2
    c990:	001a      	movs	r2, r3
    c992:	687b      	ldr	r3, [r7, #4]
    c994:	189b      	adds	r3, r3, r2
    c996:	681a      	ldr	r2, [r3, #0]
    c998:	4b4a      	ldr	r3, [pc, #296]	; (cac4 <calc_mag_stdev+0x158>)
    c99a:	1c10      	adds	r0, r2, #0
    c99c:	4798      	blx	r3
    c99e:	2300      	movs	r3, #0
    c9a0:	2480      	movs	r4, #128	; 0x80
    c9a2:	05e4      	lsls	r4, r4, #23
    c9a4:	001a      	movs	r2, r3
    c9a6:	0023      	movs	r3, r4
    c9a8:	4c47      	ldr	r4, [pc, #284]	; (cac8 <calc_mag_stdev+0x15c>)
    c9aa:	47a0      	blx	r4
    c9ac:	0005      	movs	r5, r0
    c9ae:	000e      	movs	r6, r1
    c9b0:	23a6      	movs	r3, #166	; 0xa6
    c9b2:	005b      	lsls	r3, r3, #1
    c9b4:	18fb      	adds	r3, r7, r3
    c9b6:	681a      	ldr	r2, [r3, #0]
    c9b8:	0013      	movs	r3, r2
    c9ba:	005b      	lsls	r3, r3, #1
    c9bc:	189b      	adds	r3, r3, r2
    c9be:	009b      	lsls	r3, r3, #2
    c9c0:	001a      	movs	r2, r3
    c9c2:	687b      	ldr	r3, [r7, #4]
    c9c4:	189b      	adds	r3, r3, r2
    c9c6:	685a      	ldr	r2, [r3, #4]
    c9c8:	4b3e      	ldr	r3, [pc, #248]	; (cac4 <calc_mag_stdev+0x158>)
    c9ca:	1c10      	adds	r0, r2, #0
    c9cc:	4798      	blx	r3
    c9ce:	2300      	movs	r3, #0
    c9d0:	2480      	movs	r4, #128	; 0x80
    c9d2:	05e4      	lsls	r4, r4, #23
    c9d4:	001a      	movs	r2, r3
    c9d6:	0023      	movs	r3, r4
    c9d8:	4c3b      	ldr	r4, [pc, #236]	; (cac8 <calc_mag_stdev+0x15c>)
    c9da:	47a0      	blx	r4
    c9dc:	0002      	movs	r2, r0
    c9de:	000b      	movs	r3, r1
    c9e0:	4c3a      	ldr	r4, [pc, #232]	; (cacc <calc_mag_stdev+0x160>)
    c9e2:	0028      	movs	r0, r5
    c9e4:	0031      	movs	r1, r6
    c9e6:	47a0      	blx	r4
    c9e8:	0003      	movs	r3, r0
    c9ea:	000c      	movs	r4, r1
    c9ec:	001d      	movs	r5, r3
    c9ee:	0026      	movs	r6, r4
    c9f0:	23a6      	movs	r3, #166	; 0xa6
    c9f2:	005b      	lsls	r3, r3, #1
    c9f4:	18fb      	adds	r3, r7, r3
    c9f6:	681a      	ldr	r2, [r3, #0]
    c9f8:	0013      	movs	r3, r2
    c9fa:	005b      	lsls	r3, r3, #1
    c9fc:	189b      	adds	r3, r3, r2
    c9fe:	009b      	lsls	r3, r3, #2
    ca00:	001a      	movs	r2, r3
    ca02:	687b      	ldr	r3, [r7, #4]
    ca04:	189b      	adds	r3, r3, r2
    ca06:	689a      	ldr	r2, [r3, #8]
    ca08:	4b2e      	ldr	r3, [pc, #184]	; (cac4 <calc_mag_stdev+0x158>)
    ca0a:	1c10      	adds	r0, r2, #0
    ca0c:	4798      	blx	r3
    ca0e:	2300      	movs	r3, #0
    ca10:	2480      	movs	r4, #128	; 0x80
    ca12:	05e4      	lsls	r4, r4, #23
    ca14:	001a      	movs	r2, r3
    ca16:	0023      	movs	r3, r4
    ca18:	4c2b      	ldr	r4, [pc, #172]	; (cac8 <calc_mag_stdev+0x15c>)
    ca1a:	47a0      	blx	r4
    ca1c:	0002      	movs	r2, r0
    ca1e:	000b      	movs	r3, r1
    ca20:	4c2a      	ldr	r4, [pc, #168]	; (cacc <calc_mag_stdev+0x160>)
    ca22:	0028      	movs	r0, r5
    ca24:	0031      	movs	r1, r6
    ca26:	47a0      	blx	r4
    ca28:	0003      	movs	r3, r0
    ca2a:	000c      	movs	r4, r1
    ca2c:	0018      	movs	r0, r3
    ca2e:	0021      	movs	r1, r4
    ca30:	4b27      	ldr	r3, [pc, #156]	; (cad0 <calc_mag_stdev+0x164>)
    ca32:	4798      	blx	r3
    ca34:	000a      	movs	r2, r1
    ca36:	0001      	movs	r1, r0
    ca38:	4b26      	ldr	r3, [pc, #152]	; (cad4 <calc_mag_stdev+0x168>)
    ca3a:	0008      	movs	r0, r1
    ca3c:	0011      	movs	r1, r2
    ca3e:	4798      	blx	r3
    ca40:	1c03      	adds	r3, r0, #0
    ca42:	22a4      	movs	r2, #164	; 0xa4
    ca44:	0052      	lsls	r2, r2, #1
    ca46:	18ba      	adds	r2, r7, r2
    ca48:	6013      	str	r3, [r2, #0]
		err_mag[p] = temp1-1;
    ca4a:	4b23      	ldr	r3, [pc, #140]	; (cad8 <calc_mag_stdev+0x16c>)
    ca4c:	21fe      	movs	r1, #254	; 0xfe
    ca4e:	0589      	lsls	r1, r1, #22
    ca50:	22a4      	movs	r2, #164	; 0xa4
    ca52:	0052      	lsls	r2, r2, #1
    ca54:	18ba      	adds	r2, r7, r2
    ca56:	6810      	ldr	r0, [r2, #0]
    ca58:	4798      	blx	r3
    ca5a:	1c03      	adds	r3, r0, #0
    ca5c:	1c19      	adds	r1, r3, #0
    ca5e:	4b1f      	ldr	r3, [pc, #124]	; (cadc <calc_mag_stdev+0x170>)
    ca60:	22a8      	movs	r2, #168	; 0xa8
    ca62:	0052      	lsls	r2, r2, #1
    ca64:	4694      	mov	ip, r2
    ca66:	44bc      	add	ip, r7
    ca68:	4463      	add	r3, ip
    ca6a:	22a6      	movs	r2, #166	; 0xa6
    ca6c:	0052      	lsls	r2, r2, #1
    ca6e:	18ba      	adds	r2, r7, r2
    ca70:	6812      	ldr	r2, [r2, #0]
    ca72:	0092      	lsls	r2, r2, #2
    ca74:	50d1      	str	r1, [r2, r3]
	for (p=0;p<n_points;p++){
    ca76:	23a6      	movs	r3, #166	; 0xa6
    ca78:	005b      	lsls	r3, r3, #1
    ca7a:	18fb      	adds	r3, r7, r3
    ca7c:	681b      	ldr	r3, [r3, #0]
    ca7e:	3301      	adds	r3, #1
    ca80:	22a6      	movs	r2, #166	; 0xa6
    ca82:	0052      	lsls	r2, r2, #1
    ca84:	18ba      	adds	r2, r7, r2
    ca86:	6013      	str	r3, [r2, #0]
    ca88:	4b15      	ldr	r3, [pc, #84]	; (cae0 <calc_mag_stdev+0x174>)
    ca8a:	681b      	ldr	r3, [r3, #0]
    ca8c:	22a6      	movs	r2, #166	; 0xa6
    ca8e:	0052      	lsls	r2, r2, #1
    ca90:	18ba      	adds	r2, r7, r2
    ca92:	6812      	ldr	r2, [r2, #0]
    ca94:	429a      	cmp	r2, r3
    ca96:	d200      	bcs.n	ca9a <calc_mag_stdev+0x12e>
    ca98:	e772      	b.n	c980 <calc_mag_stdev+0x14>
	}
	temp1 = stdev(err_mag, n_points);
    ca9a:	4b11      	ldr	r3, [pc, #68]	; (cae0 <calc_mag_stdev+0x174>)
    ca9c:	681a      	ldr	r2, [r3, #0]
    ca9e:	2308      	movs	r3, #8
    caa0:	18fb      	adds	r3, r7, r3
    caa2:	0011      	movs	r1, r2
    caa4:	0018      	movs	r0, r3
    caa6:	4b0f      	ldr	r3, [pc, #60]	; (cae4 <calc_mag_stdev+0x178>)
    caa8:	4798      	blx	r3
    caaa:	1c03      	adds	r3, r0, #0
    caac:	22a4      	movs	r2, #164	; 0xa4
    caae:	0052      	lsls	r2, r2, #1
    cab0:	18ba      	adds	r2, r7, r2
    cab2:	6013      	str	r3, [r2, #0]
	
	return temp1;
    cab4:	23a4      	movs	r3, #164	; 0xa4
    cab6:	005b      	lsls	r3, r3, #1
    cab8:	18fb      	adds	r3, r7, r3
    caba:	681b      	ldr	r3, [r3, #0]
}
    cabc:	1c18      	adds	r0, r3, #0
    cabe:	46bd      	mov	sp, r7
    cac0:	b055      	add	sp, #340	; 0x154
    cac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cac4:	00023a0d 	.word	0x00023a0d
    cac8:	0001e3bd 	.word	0x0001e3bd
    cacc:	00021ebd 	.word	0x00021ebd
    cad0:	0001e715 	.word	0x0001e715
    cad4:	00023ab1 	.word	0x00023ab1
    cad8:	00021a19 	.word	0x00021a19
    cadc:	fffffeb8 	.word	0xfffffeb8
    cae0:	20002db4 	.word	0x20002db4
    cae4:	0000c81d 	.word	0x0000c81d

0000cae8 <calc_disp_stdev>:

float calc_disp_stdev(float XYZ1[nbuf][3], float XYZ2[nbuf][3], uint8_t axis){
    cae8:	b580      	push	{r7, lr}
    caea:	b0d6      	sub	sp, #344	; 0x158
    caec:	af00      	add	r7, sp, #0
    caee:	60f8      	str	r0, [r7, #12]
    caf0:	60b9      	str	r1, [r7, #8]
    caf2:	4b32      	ldr	r3, [pc, #200]	; (cbbc <calc_disp_stdev+0xd4>)
    caf4:	21ac      	movs	r1, #172	; 0xac
    caf6:	0049      	lsls	r1, r1, #1
    caf8:	468c      	mov	ip, r1
    cafa:	44bc      	add	ip, r7
    cafc:	4463      	add	r3, ip
    cafe:	701a      	strb	r2, [r3, #0]
	float err_disp[nbuf];
	uint32_t p;
	for (p=0;p<n_points;p++){
    cb00:	2300      	movs	r3, #0
    cb02:	22aa      	movs	r2, #170	; 0xaa
    cb04:	0052      	lsls	r2, r2, #1
    cb06:	18ba      	adds	r2, r7, r2
    cb08:	6013      	str	r3, [r2, #0]
    cb0a:	e041      	b.n	cb90 <calc_disp_stdev+0xa8>
		err_disp[p] =  XYZ1[p][axis]-XYZ2[p][axis];
    cb0c:	23aa      	movs	r3, #170	; 0xaa
    cb0e:	005b      	lsls	r3, r3, #1
    cb10:	18fb      	adds	r3, r7, r3
    cb12:	681a      	ldr	r2, [r3, #0]
    cb14:	0013      	movs	r3, r2
    cb16:	005b      	lsls	r3, r3, #1
    cb18:	189b      	adds	r3, r3, r2
    cb1a:	009b      	lsls	r3, r3, #2
    cb1c:	001a      	movs	r2, r3
    cb1e:	68fb      	ldr	r3, [r7, #12]
    cb20:	189b      	adds	r3, r3, r2
    cb22:	4a26      	ldr	r2, [pc, #152]	; (cbbc <calc_disp_stdev+0xd4>)
    cb24:	21ac      	movs	r1, #172	; 0xac
    cb26:	0049      	lsls	r1, r1, #1
    cb28:	468c      	mov	ip, r1
    cb2a:	44bc      	add	ip, r7
    cb2c:	4462      	add	r2, ip
    cb2e:	7812      	ldrb	r2, [r2, #0]
    cb30:	0092      	lsls	r2, r2, #2
    cb32:	58d0      	ldr	r0, [r2, r3]
    cb34:	23aa      	movs	r3, #170	; 0xaa
    cb36:	005b      	lsls	r3, r3, #1
    cb38:	18fb      	adds	r3, r7, r3
    cb3a:	681a      	ldr	r2, [r3, #0]
    cb3c:	0013      	movs	r3, r2
    cb3e:	005b      	lsls	r3, r3, #1
    cb40:	189b      	adds	r3, r3, r2
    cb42:	009b      	lsls	r3, r3, #2
    cb44:	001a      	movs	r2, r3
    cb46:	68bb      	ldr	r3, [r7, #8]
    cb48:	189b      	adds	r3, r3, r2
    cb4a:	4a1c      	ldr	r2, [pc, #112]	; (cbbc <calc_disp_stdev+0xd4>)
    cb4c:	21ac      	movs	r1, #172	; 0xac
    cb4e:	0049      	lsls	r1, r1, #1
    cb50:	468c      	mov	ip, r1
    cb52:	44bc      	add	ip, r7
    cb54:	4462      	add	r2, ip
    cb56:	7812      	ldrb	r2, [r2, #0]
    cb58:	0092      	lsls	r2, r2, #2
    cb5a:	58d2      	ldr	r2, [r2, r3]
    cb5c:	4b18      	ldr	r3, [pc, #96]	; (cbc0 <calc_disp_stdev+0xd8>)
    cb5e:	1c11      	adds	r1, r2, #0
    cb60:	4798      	blx	r3
    cb62:	1c03      	adds	r3, r0, #0
    cb64:	1c19      	adds	r1, r3, #0
    cb66:	4b17      	ldr	r3, [pc, #92]	; (cbc4 <calc_disp_stdev+0xdc>)
    cb68:	22ac      	movs	r2, #172	; 0xac
    cb6a:	0052      	lsls	r2, r2, #1
    cb6c:	4694      	mov	ip, r2
    cb6e:	44bc      	add	ip, r7
    cb70:	4463      	add	r3, ip
    cb72:	22aa      	movs	r2, #170	; 0xaa
    cb74:	0052      	lsls	r2, r2, #1
    cb76:	18ba      	adds	r2, r7, r2
    cb78:	6812      	ldr	r2, [r2, #0]
    cb7a:	0092      	lsls	r2, r2, #2
    cb7c:	50d1      	str	r1, [r2, r3]
	for (p=0;p<n_points;p++){
    cb7e:	23aa      	movs	r3, #170	; 0xaa
    cb80:	005b      	lsls	r3, r3, #1
    cb82:	18fb      	adds	r3, r7, r3
    cb84:	681b      	ldr	r3, [r3, #0]
    cb86:	3301      	adds	r3, #1
    cb88:	22aa      	movs	r2, #170	; 0xaa
    cb8a:	0052      	lsls	r2, r2, #1
    cb8c:	18ba      	adds	r2, r7, r2
    cb8e:	6013      	str	r3, [r2, #0]
    cb90:	4b0d      	ldr	r3, [pc, #52]	; (cbc8 <calc_disp_stdev+0xe0>)
    cb92:	681b      	ldr	r3, [r3, #0]
    cb94:	22aa      	movs	r2, #170	; 0xaa
    cb96:	0052      	lsls	r2, r2, #1
    cb98:	18ba      	adds	r2, r7, r2
    cb9a:	6812      	ldr	r2, [r2, #0]
    cb9c:	429a      	cmp	r2, r3
    cb9e:	d3b5      	bcc.n	cb0c <calc_disp_stdev+0x24>
		
	}
	
	return stdev(err_disp, n_points);
    cba0:	4b09      	ldr	r3, [pc, #36]	; (cbc8 <calc_disp_stdev+0xe0>)
    cba2:	681a      	ldr	r2, [r3, #0]
    cba4:	2314      	movs	r3, #20
    cba6:	18fb      	adds	r3, r7, r3
    cba8:	0011      	movs	r1, r2
    cbaa:	0018      	movs	r0, r3
    cbac:	4b07      	ldr	r3, [pc, #28]	; (cbcc <calc_disp_stdev+0xe4>)
    cbae:	4798      	blx	r3
    cbb0:	1c03      	adds	r3, r0, #0
	
}
    cbb2:	1c18      	adds	r0, r3, #0
    cbb4:	46bd      	mov	sp, r7
    cbb6:	b056      	add	sp, #344	; 0x158
    cbb8:	bd80      	pop	{r7, pc}
    cbba:	46c0      	nop			; (mov r8, r8)
    cbbc:	fffffeaf 	.word	0xfffffeaf
    cbc0:	00021a19 	.word	0x00021a19
    cbc4:	fffffebc 	.word	0xfffffebc
    cbc8:	20002db4 	.word	0x20002db4
    cbcc:	0000c81d 	.word	0x0000c81d

0000cbd0 <cal_axis_misalignments>:

void cal_axis_misalignments(float XYZ[nbuf][3], struct INST_CAL *cal_struct){
    cbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbd2:	4ce6      	ldr	r4, [pc, #920]	; (cf6c <cal_axis_misalignments+0x39c>)
    cbd4:	44a5      	add	sp, r4
    cbd6:	af00      	add	r7, sp, #0
    cbd8:	6078      	str	r0, [r7, #4]
    cbda:	6039      	str	r1, [r7, #0]
	//  D'D*Res = D'*V;
	// inv(D'D)*D'D*Res = Res = inv(D'D)*(D'*V);
	
	
	// Create D
	for (k=0;k<n_points;k++){
    cbdc:	2300      	movs	r3, #0
    cbde:	4ae4      	ldr	r2, [pc, #912]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cbe0:	18ba      	adds	r2, r7, r2
    cbe2:	6013      	str	r3, [r2, #0]
    cbe4:	e102      	b.n	cdec <cal_axis_misalignments+0x21c>
		D[k][0] = 1;
    cbe6:	4be3      	ldr	r3, [pc, #908]	; (cf74 <cal_axis_misalignments+0x3a4>)
    cbe8:	22e1      	movs	r2, #225	; 0xe1
    cbea:	00d2      	lsls	r2, r2, #3
    cbec:	4694      	mov	ip, r2
    cbee:	44bc      	add	ip, r7
    cbf0:	4463      	add	r3, ip
    cbf2:	4adf      	ldr	r2, [pc, #892]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cbf4:	18ba      	adds	r2, r7, r2
    cbf6:	6812      	ldr	r2, [r2, #0]
    cbf8:	0112      	lsls	r2, r2, #4
    cbfa:	21fe      	movs	r1, #254	; 0xfe
    cbfc:	0589      	lsls	r1, r1, #22
    cbfe:	50d1      	str	r1, [r2, r3]
		D[k][1] = -2*XYZ[k][0]*XYZ[k][1];
    cc00:	4bdb      	ldr	r3, [pc, #876]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cc02:	18fb      	adds	r3, r7, r3
    cc04:	681a      	ldr	r2, [r3, #0]
    cc06:	0013      	movs	r3, r2
    cc08:	005b      	lsls	r3, r3, #1
    cc0a:	189b      	adds	r3, r3, r2
    cc0c:	009b      	lsls	r3, r3, #2
    cc0e:	001a      	movs	r2, r3
    cc10:	687b      	ldr	r3, [r7, #4]
    cc12:	189b      	adds	r3, r3, r2
    cc14:	681a      	ldr	r2, [r3, #0]
    cc16:	4bd8      	ldr	r3, [pc, #864]	; (cf78 <cal_axis_misalignments+0x3a8>)
    cc18:	21c0      	movs	r1, #192	; 0xc0
    cc1a:	0609      	lsls	r1, r1, #24
    cc1c:	1c10      	adds	r0, r2, #0
    cc1e:	4798      	blx	r3
    cc20:	1c03      	adds	r3, r0, #0
    cc22:	1c18      	adds	r0, r3, #0
    cc24:	4bd2      	ldr	r3, [pc, #840]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cc26:	18fb      	adds	r3, r7, r3
    cc28:	681a      	ldr	r2, [r3, #0]
    cc2a:	0013      	movs	r3, r2
    cc2c:	005b      	lsls	r3, r3, #1
    cc2e:	189b      	adds	r3, r3, r2
    cc30:	009b      	lsls	r3, r3, #2
    cc32:	001a      	movs	r2, r3
    cc34:	687b      	ldr	r3, [r7, #4]
    cc36:	189b      	adds	r3, r3, r2
    cc38:	685a      	ldr	r2, [r3, #4]
    cc3a:	4bcf      	ldr	r3, [pc, #828]	; (cf78 <cal_axis_misalignments+0x3a8>)
    cc3c:	1c11      	adds	r1, r2, #0
    cc3e:	4798      	blx	r3
    cc40:	1c03      	adds	r3, r0, #0
    cc42:	1c19      	adds	r1, r3, #0
    cc44:	4bcb      	ldr	r3, [pc, #812]	; (cf74 <cal_axis_misalignments+0x3a4>)
    cc46:	22e1      	movs	r2, #225	; 0xe1
    cc48:	00d2      	lsls	r2, r2, #3
    cc4a:	18ba      	adds	r2, r7, r2
    cc4c:	18d2      	adds	r2, r2, r3
    cc4e:	4bc8      	ldr	r3, [pc, #800]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cc50:	18fb      	adds	r3, r7, r3
    cc52:	681b      	ldr	r3, [r3, #0]
    cc54:	011b      	lsls	r3, r3, #4
    cc56:	18d3      	adds	r3, r2, r3
    cc58:	3304      	adds	r3, #4
    cc5a:	6019      	str	r1, [r3, #0]
		D[k][2] = -2*XYZ[k][1]*XYZ[k][2];
    cc5c:	4bc4      	ldr	r3, [pc, #784]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cc5e:	18fb      	adds	r3, r7, r3
    cc60:	681a      	ldr	r2, [r3, #0]
    cc62:	0013      	movs	r3, r2
    cc64:	005b      	lsls	r3, r3, #1
    cc66:	189b      	adds	r3, r3, r2
    cc68:	009b      	lsls	r3, r3, #2
    cc6a:	001a      	movs	r2, r3
    cc6c:	687b      	ldr	r3, [r7, #4]
    cc6e:	189b      	adds	r3, r3, r2
    cc70:	685a      	ldr	r2, [r3, #4]
    cc72:	4bc1      	ldr	r3, [pc, #772]	; (cf78 <cal_axis_misalignments+0x3a8>)
    cc74:	21c0      	movs	r1, #192	; 0xc0
    cc76:	0609      	lsls	r1, r1, #24
    cc78:	1c10      	adds	r0, r2, #0
    cc7a:	4798      	blx	r3
    cc7c:	1c03      	adds	r3, r0, #0
    cc7e:	1c18      	adds	r0, r3, #0
    cc80:	4bbb      	ldr	r3, [pc, #748]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cc82:	18fb      	adds	r3, r7, r3
    cc84:	681a      	ldr	r2, [r3, #0]
    cc86:	0013      	movs	r3, r2
    cc88:	005b      	lsls	r3, r3, #1
    cc8a:	189b      	adds	r3, r3, r2
    cc8c:	009b      	lsls	r3, r3, #2
    cc8e:	001a      	movs	r2, r3
    cc90:	687b      	ldr	r3, [r7, #4]
    cc92:	189b      	adds	r3, r3, r2
    cc94:	689a      	ldr	r2, [r3, #8]
    cc96:	4bb8      	ldr	r3, [pc, #736]	; (cf78 <cal_axis_misalignments+0x3a8>)
    cc98:	1c11      	adds	r1, r2, #0
    cc9a:	4798      	blx	r3
    cc9c:	1c03      	adds	r3, r0, #0
    cc9e:	1c19      	adds	r1, r3, #0
    cca0:	4bb4      	ldr	r3, [pc, #720]	; (cf74 <cal_axis_misalignments+0x3a4>)
    cca2:	22e1      	movs	r2, #225	; 0xe1
    cca4:	00d2      	lsls	r2, r2, #3
    cca6:	18ba      	adds	r2, r7, r2
    cca8:	18d2      	adds	r2, r2, r3
    ccaa:	4bb1      	ldr	r3, [pc, #708]	; (cf70 <cal_axis_misalignments+0x3a0>)
    ccac:	18fb      	adds	r3, r7, r3
    ccae:	681b      	ldr	r3, [r3, #0]
    ccb0:	011b      	lsls	r3, r3, #4
    ccb2:	18d3      	adds	r3, r2, r3
    ccb4:	3308      	adds	r3, #8
    ccb6:	6019      	str	r1, [r3, #0]
		D[k][3] = -2*XYZ[k][0]*XYZ[k][2];
    ccb8:	4bad      	ldr	r3, [pc, #692]	; (cf70 <cal_axis_misalignments+0x3a0>)
    ccba:	18fb      	adds	r3, r7, r3
    ccbc:	681a      	ldr	r2, [r3, #0]
    ccbe:	0013      	movs	r3, r2
    ccc0:	005b      	lsls	r3, r3, #1
    ccc2:	189b      	adds	r3, r3, r2
    ccc4:	009b      	lsls	r3, r3, #2
    ccc6:	001a      	movs	r2, r3
    ccc8:	687b      	ldr	r3, [r7, #4]
    ccca:	189b      	adds	r3, r3, r2
    cccc:	681a      	ldr	r2, [r3, #0]
    ccce:	4baa      	ldr	r3, [pc, #680]	; (cf78 <cal_axis_misalignments+0x3a8>)
    ccd0:	21c0      	movs	r1, #192	; 0xc0
    ccd2:	0609      	lsls	r1, r1, #24
    ccd4:	1c10      	adds	r0, r2, #0
    ccd6:	4798      	blx	r3
    ccd8:	1c03      	adds	r3, r0, #0
    ccda:	1c18      	adds	r0, r3, #0
    ccdc:	4ba4      	ldr	r3, [pc, #656]	; (cf70 <cal_axis_misalignments+0x3a0>)
    ccde:	18fb      	adds	r3, r7, r3
    cce0:	681a      	ldr	r2, [r3, #0]
    cce2:	0013      	movs	r3, r2
    cce4:	005b      	lsls	r3, r3, #1
    cce6:	189b      	adds	r3, r3, r2
    cce8:	009b      	lsls	r3, r3, #2
    ccea:	001a      	movs	r2, r3
    ccec:	687b      	ldr	r3, [r7, #4]
    ccee:	189b      	adds	r3, r3, r2
    ccf0:	689a      	ldr	r2, [r3, #8]
    ccf2:	4ba1      	ldr	r3, [pc, #644]	; (cf78 <cal_axis_misalignments+0x3a8>)
    ccf4:	1c11      	adds	r1, r2, #0
    ccf6:	4798      	blx	r3
    ccf8:	1c03      	adds	r3, r0, #0
    ccfa:	1c19      	adds	r1, r3, #0
    ccfc:	4b9d      	ldr	r3, [pc, #628]	; (cf74 <cal_axis_misalignments+0x3a4>)
    ccfe:	22e1      	movs	r2, #225	; 0xe1
    cd00:	00d2      	lsls	r2, r2, #3
    cd02:	18ba      	adds	r2, r7, r2
    cd04:	18d2      	adds	r2, r2, r3
    cd06:	4b9a      	ldr	r3, [pc, #616]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cd08:	18fb      	adds	r3, r7, r3
    cd0a:	681b      	ldr	r3, [r3, #0]
    cd0c:	011b      	lsls	r3, r3, #4
    cd0e:	18d3      	adds	r3, r2, r3
    cd10:	330c      	adds	r3, #12
    cd12:	6019      	str	r1, [r3, #0]
		
		V[k] = pow(XYZ[k][0],2)+pow(XYZ[k][1],2)+pow(XYZ[k][2],2);
    cd14:	4b96      	ldr	r3, [pc, #600]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cd16:	18fb      	adds	r3, r7, r3
    cd18:	681a      	ldr	r2, [r3, #0]
    cd1a:	0013      	movs	r3, r2
    cd1c:	005b      	lsls	r3, r3, #1
    cd1e:	189b      	adds	r3, r3, r2
    cd20:	009b      	lsls	r3, r3, #2
    cd22:	001a      	movs	r2, r3
    cd24:	687b      	ldr	r3, [r7, #4]
    cd26:	189b      	adds	r3, r3, r2
    cd28:	681a      	ldr	r2, [r3, #0]
    cd2a:	4b94      	ldr	r3, [pc, #592]	; (cf7c <cal_axis_misalignments+0x3ac>)
    cd2c:	1c10      	adds	r0, r2, #0
    cd2e:	4798      	blx	r3
    cd30:	2300      	movs	r3, #0
    cd32:	2480      	movs	r4, #128	; 0x80
    cd34:	05e4      	lsls	r4, r4, #23
    cd36:	001a      	movs	r2, r3
    cd38:	0023      	movs	r3, r4
    cd3a:	4c91      	ldr	r4, [pc, #580]	; (cf80 <cal_axis_misalignments+0x3b0>)
    cd3c:	47a0      	blx	r4
    cd3e:	0005      	movs	r5, r0
    cd40:	000e      	movs	r6, r1
    cd42:	4b8b      	ldr	r3, [pc, #556]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cd44:	18fb      	adds	r3, r7, r3
    cd46:	681a      	ldr	r2, [r3, #0]
    cd48:	0013      	movs	r3, r2
    cd4a:	005b      	lsls	r3, r3, #1
    cd4c:	189b      	adds	r3, r3, r2
    cd4e:	009b      	lsls	r3, r3, #2
    cd50:	001a      	movs	r2, r3
    cd52:	687b      	ldr	r3, [r7, #4]
    cd54:	189b      	adds	r3, r3, r2
    cd56:	685a      	ldr	r2, [r3, #4]
    cd58:	4b88      	ldr	r3, [pc, #544]	; (cf7c <cal_axis_misalignments+0x3ac>)
    cd5a:	1c10      	adds	r0, r2, #0
    cd5c:	4798      	blx	r3
    cd5e:	2300      	movs	r3, #0
    cd60:	2480      	movs	r4, #128	; 0x80
    cd62:	05e4      	lsls	r4, r4, #23
    cd64:	001a      	movs	r2, r3
    cd66:	0023      	movs	r3, r4
    cd68:	4c85      	ldr	r4, [pc, #532]	; (cf80 <cal_axis_misalignments+0x3b0>)
    cd6a:	47a0      	blx	r4
    cd6c:	0002      	movs	r2, r0
    cd6e:	000b      	movs	r3, r1
    cd70:	4c84      	ldr	r4, [pc, #528]	; (cf84 <cal_axis_misalignments+0x3b4>)
    cd72:	0028      	movs	r0, r5
    cd74:	0031      	movs	r1, r6
    cd76:	47a0      	blx	r4
    cd78:	0003      	movs	r3, r0
    cd7a:	000c      	movs	r4, r1
    cd7c:	001d      	movs	r5, r3
    cd7e:	0026      	movs	r6, r4
    cd80:	4b7b      	ldr	r3, [pc, #492]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cd82:	18fb      	adds	r3, r7, r3
    cd84:	681a      	ldr	r2, [r3, #0]
    cd86:	0013      	movs	r3, r2
    cd88:	005b      	lsls	r3, r3, #1
    cd8a:	189b      	adds	r3, r3, r2
    cd8c:	009b      	lsls	r3, r3, #2
    cd8e:	001a      	movs	r2, r3
    cd90:	687b      	ldr	r3, [r7, #4]
    cd92:	189b      	adds	r3, r3, r2
    cd94:	689a      	ldr	r2, [r3, #8]
    cd96:	4b79      	ldr	r3, [pc, #484]	; (cf7c <cal_axis_misalignments+0x3ac>)
    cd98:	1c10      	adds	r0, r2, #0
    cd9a:	4798      	blx	r3
    cd9c:	2300      	movs	r3, #0
    cd9e:	2480      	movs	r4, #128	; 0x80
    cda0:	05e4      	lsls	r4, r4, #23
    cda2:	001a      	movs	r2, r3
    cda4:	0023      	movs	r3, r4
    cda6:	4c76      	ldr	r4, [pc, #472]	; (cf80 <cal_axis_misalignments+0x3b0>)
    cda8:	47a0      	blx	r4
    cdaa:	0002      	movs	r2, r0
    cdac:	000b      	movs	r3, r1
    cdae:	4c75      	ldr	r4, [pc, #468]	; (cf84 <cal_axis_misalignments+0x3b4>)
    cdb0:	0028      	movs	r0, r5
    cdb2:	0031      	movs	r1, r6
    cdb4:	47a0      	blx	r4
    cdb6:	0003      	movs	r3, r0
    cdb8:	000c      	movs	r4, r1
    cdba:	0019      	movs	r1, r3
    cdbc:	0022      	movs	r2, r4
    cdbe:	4b72      	ldr	r3, [pc, #456]	; (cf88 <cal_axis_misalignments+0x3b8>)
    cdc0:	0008      	movs	r0, r1
    cdc2:	0011      	movs	r1, r2
    cdc4:	4798      	blx	r3
    cdc6:	1c01      	adds	r1, r0, #0
    cdc8:	4b70      	ldr	r3, [pc, #448]	; (cf8c <cal_axis_misalignments+0x3bc>)
    cdca:	22e1      	movs	r2, #225	; 0xe1
    cdcc:	00d2      	lsls	r2, r2, #3
    cdce:	4694      	mov	ip, r2
    cdd0:	44bc      	add	ip, r7
    cdd2:	4463      	add	r3, ip
    cdd4:	4a66      	ldr	r2, [pc, #408]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cdd6:	18ba      	adds	r2, r7, r2
    cdd8:	6812      	ldr	r2, [r2, #0]
    cdda:	0092      	lsls	r2, r2, #2
    cddc:	50d1      	str	r1, [r2, r3]
	for (k=0;k<n_points;k++){
    cdde:	4b64      	ldr	r3, [pc, #400]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cde0:	18fb      	adds	r3, r7, r3
    cde2:	681b      	ldr	r3, [r3, #0]
    cde4:	3301      	adds	r3, #1
    cde6:	4a62      	ldr	r2, [pc, #392]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cde8:	18ba      	adds	r2, r7, r2
    cdea:	6013      	str	r3, [r2, #0]
    cdec:	4b68      	ldr	r3, [pc, #416]	; (cf90 <cal_axis_misalignments+0x3c0>)
    cdee:	681b      	ldr	r3, [r3, #0]
    cdf0:	4a5f      	ldr	r2, [pc, #380]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cdf2:	18ba      	adds	r2, r7, r2
    cdf4:	6812      	ldr	r2, [r2, #0]
    cdf6:	429a      	cmp	r2, r3
    cdf8:	d200      	bcs.n	cdfc <cal_axis_misalignments+0x22c>
    cdfa:	e6f4      	b.n	cbe6 <cal_axis_misalignments+0x16>
	}
	//printf("\n\nD Matrix:\n");
	//print_matrix(D, n_points, 4);
	//D'*D
	for (i=0;i<4;i++){
    cdfc:	2300      	movs	r3, #0
    cdfe:	4a65      	ldr	r2, [pc, #404]	; (cf94 <cal_axis_misalignments+0x3c4>)
    ce00:	18ba      	adds	r2, r7, r2
    ce02:	6013      	str	r3, [r2, #0]
    ce04:	e095      	b.n	cf32 <cal_axis_misalignments+0x362>
		for (j=0;j<4;j++){
    ce06:	2300      	movs	r3, #0
    ce08:	22e0      	movs	r2, #224	; 0xe0
    ce0a:	00d2      	lsls	r2, r2, #3
    ce0c:	18ba      	adds	r2, r7, r2
    ce0e:	6013      	str	r3, [r2, #0]
    ce10:	e081      	b.n	cf16 <cal_axis_misalignments+0x346>
			DtD[i][j] = 0;
    ce12:	4b61      	ldr	r3, [pc, #388]	; (cf98 <cal_axis_misalignments+0x3c8>)
    ce14:	22e1      	movs	r2, #225	; 0xe1
    ce16:	00d2      	lsls	r2, r2, #3
    ce18:	18ba      	adds	r2, r7, r2
    ce1a:	18d1      	adds	r1, r2, r3
    ce1c:	4b5d      	ldr	r3, [pc, #372]	; (cf94 <cal_axis_misalignments+0x3c4>)
    ce1e:	18fb      	adds	r3, r7, r3
    ce20:	681a      	ldr	r2, [r3, #0]
    ce22:	0013      	movs	r3, r2
    ce24:	005b      	lsls	r3, r3, #1
    ce26:	189b      	adds	r3, r3, r2
    ce28:	005b      	lsls	r3, r3, #1
    ce2a:	22e0      	movs	r2, #224	; 0xe0
    ce2c:	00d2      	lsls	r2, r2, #3
    ce2e:	18ba      	adds	r2, r7, r2
    ce30:	6812      	ldr	r2, [r2, #0]
    ce32:	189b      	adds	r3, r3, r2
    ce34:	009b      	lsls	r3, r3, #2
    ce36:	2200      	movs	r2, #0
    ce38:	505a      	str	r2, [r3, r1]
			for (k=0;k<n_points;k++){
    ce3a:	2300      	movs	r3, #0
    ce3c:	4a4c      	ldr	r2, [pc, #304]	; (cf70 <cal_axis_misalignments+0x3a0>)
    ce3e:	18ba      	adds	r2, r7, r2
    ce40:	6013      	str	r3, [r2, #0]
    ce42:	e058      	b.n	cef6 <cal_axis_misalignments+0x326>
				DtD[i][j] = DtD[i][j] + D[k][i]*D[k][j];
    ce44:	4b54      	ldr	r3, [pc, #336]	; (cf98 <cal_axis_misalignments+0x3c8>)
    ce46:	22e1      	movs	r2, #225	; 0xe1
    ce48:	00d2      	lsls	r2, r2, #3
    ce4a:	18ba      	adds	r2, r7, r2
    ce4c:	18d1      	adds	r1, r2, r3
    ce4e:	4b51      	ldr	r3, [pc, #324]	; (cf94 <cal_axis_misalignments+0x3c4>)
    ce50:	18fb      	adds	r3, r7, r3
    ce52:	681a      	ldr	r2, [r3, #0]
    ce54:	0013      	movs	r3, r2
    ce56:	005b      	lsls	r3, r3, #1
    ce58:	189b      	adds	r3, r3, r2
    ce5a:	005b      	lsls	r3, r3, #1
    ce5c:	22e0      	movs	r2, #224	; 0xe0
    ce5e:	00d2      	lsls	r2, r2, #3
    ce60:	18ba      	adds	r2, r7, r2
    ce62:	6812      	ldr	r2, [r2, #0]
    ce64:	189b      	adds	r3, r3, r2
    ce66:	009b      	lsls	r3, r3, #2
    ce68:	585c      	ldr	r4, [r3, r1]
    ce6a:	4b42      	ldr	r3, [pc, #264]	; (cf74 <cal_axis_misalignments+0x3a4>)
    ce6c:	22e1      	movs	r2, #225	; 0xe1
    ce6e:	00d2      	lsls	r2, r2, #3
    ce70:	4694      	mov	ip, r2
    ce72:	44bc      	add	ip, r7
    ce74:	4463      	add	r3, ip
    ce76:	4a3e      	ldr	r2, [pc, #248]	; (cf70 <cal_axis_misalignments+0x3a0>)
    ce78:	18ba      	adds	r2, r7, r2
    ce7a:	6812      	ldr	r2, [r2, #0]
    ce7c:	0091      	lsls	r1, r2, #2
    ce7e:	4a45      	ldr	r2, [pc, #276]	; (cf94 <cal_axis_misalignments+0x3c4>)
    ce80:	18ba      	adds	r2, r7, r2
    ce82:	6812      	ldr	r2, [r2, #0]
    ce84:	188a      	adds	r2, r1, r2
    ce86:	0092      	lsls	r2, r2, #2
    ce88:	58d0      	ldr	r0, [r2, r3]
    ce8a:	4b3a      	ldr	r3, [pc, #232]	; (cf74 <cal_axis_misalignments+0x3a4>)
    ce8c:	22e1      	movs	r2, #225	; 0xe1
    ce8e:	00d2      	lsls	r2, r2, #3
    ce90:	4694      	mov	ip, r2
    ce92:	44bc      	add	ip, r7
    ce94:	4463      	add	r3, ip
    ce96:	4a36      	ldr	r2, [pc, #216]	; (cf70 <cal_axis_misalignments+0x3a0>)
    ce98:	18ba      	adds	r2, r7, r2
    ce9a:	6812      	ldr	r2, [r2, #0]
    ce9c:	0091      	lsls	r1, r2, #2
    ce9e:	22e0      	movs	r2, #224	; 0xe0
    cea0:	00d2      	lsls	r2, r2, #3
    cea2:	18ba      	adds	r2, r7, r2
    cea4:	6812      	ldr	r2, [r2, #0]
    cea6:	188a      	adds	r2, r1, r2
    cea8:	0092      	lsls	r2, r2, #2
    ceaa:	58d2      	ldr	r2, [r2, r3]
    ceac:	4b32      	ldr	r3, [pc, #200]	; (cf78 <cal_axis_misalignments+0x3a8>)
    ceae:	1c11      	adds	r1, r2, #0
    ceb0:	4798      	blx	r3
    ceb2:	1c03      	adds	r3, r0, #0
    ceb4:	1c1a      	adds	r2, r3, #0
    ceb6:	4b39      	ldr	r3, [pc, #228]	; (cf9c <cal_axis_misalignments+0x3cc>)
    ceb8:	1c11      	adds	r1, r2, #0
    ceba:	1c20      	adds	r0, r4, #0
    cebc:	4798      	blx	r3
    cebe:	1c03      	adds	r3, r0, #0
    cec0:	1c18      	adds	r0, r3, #0
    cec2:	4b35      	ldr	r3, [pc, #212]	; (cf98 <cal_axis_misalignments+0x3c8>)
    cec4:	22e1      	movs	r2, #225	; 0xe1
    cec6:	00d2      	lsls	r2, r2, #3
    cec8:	18ba      	adds	r2, r7, r2
    ceca:	18d1      	adds	r1, r2, r3
    cecc:	4b31      	ldr	r3, [pc, #196]	; (cf94 <cal_axis_misalignments+0x3c4>)
    cece:	18fb      	adds	r3, r7, r3
    ced0:	681a      	ldr	r2, [r3, #0]
    ced2:	0013      	movs	r3, r2
    ced4:	005b      	lsls	r3, r3, #1
    ced6:	189b      	adds	r3, r3, r2
    ced8:	005b      	lsls	r3, r3, #1
    ceda:	22e0      	movs	r2, #224	; 0xe0
    cedc:	00d2      	lsls	r2, r2, #3
    cede:	18ba      	adds	r2, r7, r2
    cee0:	6812      	ldr	r2, [r2, #0]
    cee2:	189b      	adds	r3, r3, r2
    cee4:	009b      	lsls	r3, r3, #2
    cee6:	5058      	str	r0, [r3, r1]
			for (k=0;k<n_points;k++){
    cee8:	4b21      	ldr	r3, [pc, #132]	; (cf70 <cal_axis_misalignments+0x3a0>)
    ceea:	18fb      	adds	r3, r7, r3
    ceec:	681b      	ldr	r3, [r3, #0]
    ceee:	3301      	adds	r3, #1
    cef0:	4a1f      	ldr	r2, [pc, #124]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cef2:	18ba      	adds	r2, r7, r2
    cef4:	6013      	str	r3, [r2, #0]
    cef6:	4b26      	ldr	r3, [pc, #152]	; (cf90 <cal_axis_misalignments+0x3c0>)
    cef8:	681b      	ldr	r3, [r3, #0]
    cefa:	4a1d      	ldr	r2, [pc, #116]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cefc:	18ba      	adds	r2, r7, r2
    cefe:	6812      	ldr	r2, [r2, #0]
    cf00:	429a      	cmp	r2, r3
    cf02:	d39f      	bcc.n	ce44 <cal_axis_misalignments+0x274>
		for (j=0;j<4;j++){
    cf04:	23e0      	movs	r3, #224	; 0xe0
    cf06:	00db      	lsls	r3, r3, #3
    cf08:	18fb      	adds	r3, r7, r3
    cf0a:	681b      	ldr	r3, [r3, #0]
    cf0c:	3301      	adds	r3, #1
    cf0e:	22e0      	movs	r2, #224	; 0xe0
    cf10:	00d2      	lsls	r2, r2, #3
    cf12:	18ba      	adds	r2, r7, r2
    cf14:	6013      	str	r3, [r2, #0]
    cf16:	23e0      	movs	r3, #224	; 0xe0
    cf18:	00db      	lsls	r3, r3, #3
    cf1a:	18fb      	adds	r3, r7, r3
    cf1c:	681b      	ldr	r3, [r3, #0]
    cf1e:	2b03      	cmp	r3, #3
    cf20:	d800      	bhi.n	cf24 <cal_axis_misalignments+0x354>
    cf22:	e776      	b.n	ce12 <cal_axis_misalignments+0x242>
	for (i=0;i<4;i++){
    cf24:	4b1b      	ldr	r3, [pc, #108]	; (cf94 <cal_axis_misalignments+0x3c4>)
    cf26:	18fb      	adds	r3, r7, r3
    cf28:	681b      	ldr	r3, [r3, #0]
    cf2a:	3301      	adds	r3, #1
    cf2c:	4a19      	ldr	r2, [pc, #100]	; (cf94 <cal_axis_misalignments+0x3c4>)
    cf2e:	18ba      	adds	r2, r7, r2
    cf30:	6013      	str	r3, [r2, #0]
    cf32:	4b18      	ldr	r3, [pc, #96]	; (cf94 <cal_axis_misalignments+0x3c4>)
    cf34:	18fb      	adds	r3, r7, r3
    cf36:	681b      	ldr	r3, [r3, #0]
    cf38:	2b03      	cmp	r3, #3
    cf3a:	d800      	bhi.n	cf3e <cal_axis_misalignments+0x36e>
    cf3c:	e763      	b.n	ce06 <cal_axis_misalignments+0x236>
	}
	//printf("\n\nDtD Matrix:\n");
	//print_matrix(DtD, 6, 6);
	
	// Dt*V
	for (i=0;i<4;i++){
    cf3e:	2300      	movs	r3, #0
    cf40:	4a14      	ldr	r2, [pc, #80]	; (cf94 <cal_axis_misalignments+0x3c4>)
    cf42:	18ba      	adds	r2, r7, r2
    cf44:	6013      	str	r3, [r2, #0]
    cf46:	e07e      	b.n	d046 <cal_axis_misalignments+0x476>
		DtV[i] = 0;
    cf48:	4b15      	ldr	r3, [pc, #84]	; (cfa0 <cal_axis_misalignments+0x3d0>)
    cf4a:	22e1      	movs	r2, #225	; 0xe1
    cf4c:	00d2      	lsls	r2, r2, #3
    cf4e:	4694      	mov	ip, r2
    cf50:	44bc      	add	ip, r7
    cf52:	4463      	add	r3, ip
    cf54:	4a0f      	ldr	r2, [pc, #60]	; (cf94 <cal_axis_misalignments+0x3c4>)
    cf56:	18ba      	adds	r2, r7, r2
    cf58:	6812      	ldr	r2, [r2, #0]
    cf5a:	0092      	lsls	r2, r2, #2
    cf5c:	2100      	movs	r1, #0
    cf5e:	50d1      	str	r1, [r2, r3]
		for (k=0;k<n_points;k++){
    cf60:	2300      	movs	r3, #0
    cf62:	4a03      	ldr	r2, [pc, #12]	; (cf70 <cal_axis_misalignments+0x3a0>)
    cf64:	18ba      	adds	r2, r7, r2
    cf66:	6013      	str	r3, [r2, #0]
    cf68:	e05f      	b.n	d02a <cal_axis_misalignments+0x45a>
    cf6a:	46c0      	nop			; (mov r8, r8)
    cf6c:	fffff8f4 	.word	0xfffff8f4
    cf70:	000006fc 	.word	0x000006fc
    cf74:	fffffaf4 	.word	0xfffffaf4
    cf78:	000217d9 	.word	0x000217d9
    cf7c:	00023a0d 	.word	0x00023a0d
    cf80:	0001e3bd 	.word	0x0001e3bd
    cf84:	00021ebd 	.word	0x00021ebd
    cf88:	00023ab1 	.word	0x00023ab1
    cf8c:	fffff9b4 	.word	0xfffff9b4
    cf90:	20002db4 	.word	0x20002db4
    cf94:	00000704 	.word	0x00000704
    cf98:	fffff924 	.word	0xfffff924
    cf9c:	000210d5 	.word	0x000210d5
    cfa0:	fffff914 	.word	0xfffff914
			DtV[i] = DtV[i]+D[k][i]*V[k];
    cfa4:	4b78      	ldr	r3, [pc, #480]	; (d188 <cal_axis_misalignments+0x5b8>)
    cfa6:	22e1      	movs	r2, #225	; 0xe1
    cfa8:	00d2      	lsls	r2, r2, #3
    cfaa:	4694      	mov	ip, r2
    cfac:	44bc      	add	ip, r7
    cfae:	4463      	add	r3, ip
    cfb0:	4a76      	ldr	r2, [pc, #472]	; (d18c <cal_axis_misalignments+0x5bc>)
    cfb2:	18ba      	adds	r2, r7, r2
    cfb4:	6812      	ldr	r2, [r2, #0]
    cfb6:	0092      	lsls	r2, r2, #2
    cfb8:	58d4      	ldr	r4, [r2, r3]
    cfba:	4b75      	ldr	r3, [pc, #468]	; (d190 <cal_axis_misalignments+0x5c0>)
    cfbc:	22e1      	movs	r2, #225	; 0xe1
    cfbe:	00d2      	lsls	r2, r2, #3
    cfc0:	4694      	mov	ip, r2
    cfc2:	44bc      	add	ip, r7
    cfc4:	4463      	add	r3, ip
    cfc6:	4a73      	ldr	r2, [pc, #460]	; (d194 <cal_axis_misalignments+0x5c4>)
    cfc8:	18ba      	adds	r2, r7, r2
    cfca:	6812      	ldr	r2, [r2, #0]
    cfcc:	0091      	lsls	r1, r2, #2
    cfce:	4a6f      	ldr	r2, [pc, #444]	; (d18c <cal_axis_misalignments+0x5bc>)
    cfd0:	18ba      	adds	r2, r7, r2
    cfd2:	6812      	ldr	r2, [r2, #0]
    cfd4:	188a      	adds	r2, r1, r2
    cfd6:	0092      	lsls	r2, r2, #2
    cfd8:	58d0      	ldr	r0, [r2, r3]
    cfda:	4b6f      	ldr	r3, [pc, #444]	; (d198 <cal_axis_misalignments+0x5c8>)
    cfdc:	22e1      	movs	r2, #225	; 0xe1
    cfde:	00d2      	lsls	r2, r2, #3
    cfe0:	4694      	mov	ip, r2
    cfe2:	44bc      	add	ip, r7
    cfe4:	4463      	add	r3, ip
    cfe6:	4a6b      	ldr	r2, [pc, #428]	; (d194 <cal_axis_misalignments+0x5c4>)
    cfe8:	18ba      	adds	r2, r7, r2
    cfea:	6812      	ldr	r2, [r2, #0]
    cfec:	0092      	lsls	r2, r2, #2
    cfee:	58d2      	ldr	r2, [r2, r3]
    cff0:	4b6a      	ldr	r3, [pc, #424]	; (d19c <cal_axis_misalignments+0x5cc>)
    cff2:	1c11      	adds	r1, r2, #0
    cff4:	4798      	blx	r3
    cff6:	1c03      	adds	r3, r0, #0
    cff8:	1c1a      	adds	r2, r3, #0
    cffa:	4b69      	ldr	r3, [pc, #420]	; (d1a0 <cal_axis_misalignments+0x5d0>)
    cffc:	1c11      	adds	r1, r2, #0
    cffe:	1c20      	adds	r0, r4, #0
    d000:	4798      	blx	r3
    d002:	1c03      	adds	r3, r0, #0
    d004:	1c19      	adds	r1, r3, #0
    d006:	4b60      	ldr	r3, [pc, #384]	; (d188 <cal_axis_misalignments+0x5b8>)
    d008:	22e1      	movs	r2, #225	; 0xe1
    d00a:	00d2      	lsls	r2, r2, #3
    d00c:	4694      	mov	ip, r2
    d00e:	44bc      	add	ip, r7
    d010:	4463      	add	r3, ip
    d012:	4a5e      	ldr	r2, [pc, #376]	; (d18c <cal_axis_misalignments+0x5bc>)
    d014:	18ba      	adds	r2, r7, r2
    d016:	6812      	ldr	r2, [r2, #0]
    d018:	0092      	lsls	r2, r2, #2
    d01a:	50d1      	str	r1, [r2, r3]
		for (k=0;k<n_points;k++){
    d01c:	4b5d      	ldr	r3, [pc, #372]	; (d194 <cal_axis_misalignments+0x5c4>)
    d01e:	18fb      	adds	r3, r7, r3
    d020:	681b      	ldr	r3, [r3, #0]
    d022:	3301      	adds	r3, #1
    d024:	4a5b      	ldr	r2, [pc, #364]	; (d194 <cal_axis_misalignments+0x5c4>)
    d026:	18ba      	adds	r2, r7, r2
    d028:	6013      	str	r3, [r2, #0]
    d02a:	4b5e      	ldr	r3, [pc, #376]	; (d1a4 <cal_axis_misalignments+0x5d4>)
    d02c:	681b      	ldr	r3, [r3, #0]
    d02e:	4a59      	ldr	r2, [pc, #356]	; (d194 <cal_axis_misalignments+0x5c4>)
    d030:	18ba      	adds	r2, r7, r2
    d032:	6812      	ldr	r2, [r2, #0]
    d034:	429a      	cmp	r2, r3
    d036:	d3b5      	bcc.n	cfa4 <cal_axis_misalignments+0x3d4>
	for (i=0;i<4;i++){
    d038:	4b54      	ldr	r3, [pc, #336]	; (d18c <cal_axis_misalignments+0x5bc>)
    d03a:	18fb      	adds	r3, r7, r3
    d03c:	681b      	ldr	r3, [r3, #0]
    d03e:	3301      	adds	r3, #1
    d040:	4a52      	ldr	r2, [pc, #328]	; (d18c <cal_axis_misalignments+0x5bc>)
    d042:	18ba      	adds	r2, r7, r2
    d044:	6013      	str	r3, [r2, #0]
    d046:	4b51      	ldr	r3, [pc, #324]	; (d18c <cal_axis_misalignments+0x5bc>)
    d048:	18fb      	adds	r3, r7, r3
    d04a:	681b      	ldr	r3, [r3, #0]
    d04c:	2b03      	cmp	r3, #3
    d04e:	d800      	bhi.n	d052 <cal_axis_misalignments+0x482>
    d050:	e77a      	b.n	cf48 <cal_axis_misalignments+0x378>
	}
	//printf("\n\nDtV Matrix:\n");
	//print_matrix(DtV, 4, 1);
	
	//  Inv(D'D)
	inverse(DtD, DtD, 4);
    d052:	232c      	movs	r3, #44	; 0x2c
    d054:	18f9      	adds	r1, r7, r3
    d056:	232c      	movs	r3, #44	; 0x2c
    d058:	18fb      	adds	r3, r7, r3
    d05a:	2204      	movs	r2, #4
    d05c:	0018      	movs	r0, r3
    d05e:	4b52      	ldr	r3, [pc, #328]	; (d1a8 <cal_axis_misalignments+0x5d8>)
    d060:	4798      	blx	r3
	//printf("\n\ninverse DtD Matrix:\n");
	//print_matrix(DtD, 6, 6);
	//  Find result
	for (i=0;i<4;i++){
    d062:	2300      	movs	r3, #0
    d064:	4a49      	ldr	r2, [pc, #292]	; (d18c <cal_axis_misalignments+0x5bc>)
    d066:	18ba      	adds	r2, r7, r2
    d068:	6013      	str	r3, [r2, #0]
    d06a:	e067      	b.n	d13c <cal_axis_misalignments+0x56c>
		Res[i] = 0;
    d06c:	4b4f      	ldr	r3, [pc, #316]	; (d1ac <cal_axis_misalignments+0x5dc>)
    d06e:	22e1      	movs	r2, #225	; 0xe1
    d070:	00d2      	lsls	r2, r2, #3
    d072:	4694      	mov	ip, r2
    d074:	44bc      	add	ip, r7
    d076:	4463      	add	r3, ip
    d078:	4a44      	ldr	r2, [pc, #272]	; (d18c <cal_axis_misalignments+0x5bc>)
    d07a:	18ba      	adds	r2, r7, r2
    d07c:	6812      	ldr	r2, [r2, #0]
    d07e:	0092      	lsls	r2, r2, #2
    d080:	2100      	movs	r1, #0
    d082:	50d1      	str	r1, [r2, r3]
		for (j=0;j<4;j++){
    d084:	2300      	movs	r3, #0
    d086:	22e0      	movs	r2, #224	; 0xe0
    d088:	00d2      	lsls	r2, r2, #3
    d08a:	18ba      	adds	r2, r7, r2
    d08c:	6013      	str	r3, [r2, #0]
    d08e:	e048      	b.n	d122 <cal_axis_misalignments+0x552>
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
    d090:	4b46      	ldr	r3, [pc, #280]	; (d1ac <cal_axis_misalignments+0x5dc>)
    d092:	22e1      	movs	r2, #225	; 0xe1
    d094:	00d2      	lsls	r2, r2, #3
    d096:	4694      	mov	ip, r2
    d098:	44bc      	add	ip, r7
    d09a:	4463      	add	r3, ip
    d09c:	4a3b      	ldr	r2, [pc, #236]	; (d18c <cal_axis_misalignments+0x5bc>)
    d09e:	18ba      	adds	r2, r7, r2
    d0a0:	6812      	ldr	r2, [r2, #0]
    d0a2:	0092      	lsls	r2, r2, #2
    d0a4:	58d4      	ldr	r4, [r2, r3]
    d0a6:	4b42      	ldr	r3, [pc, #264]	; (d1b0 <cal_axis_misalignments+0x5e0>)
    d0a8:	22e1      	movs	r2, #225	; 0xe1
    d0aa:	00d2      	lsls	r2, r2, #3
    d0ac:	18ba      	adds	r2, r7, r2
    d0ae:	18d1      	adds	r1, r2, r3
    d0b0:	4b36      	ldr	r3, [pc, #216]	; (d18c <cal_axis_misalignments+0x5bc>)
    d0b2:	18fb      	adds	r3, r7, r3
    d0b4:	681a      	ldr	r2, [r3, #0]
    d0b6:	0013      	movs	r3, r2
    d0b8:	005b      	lsls	r3, r3, #1
    d0ba:	189b      	adds	r3, r3, r2
    d0bc:	005b      	lsls	r3, r3, #1
    d0be:	22e0      	movs	r2, #224	; 0xe0
    d0c0:	00d2      	lsls	r2, r2, #3
    d0c2:	18ba      	adds	r2, r7, r2
    d0c4:	6812      	ldr	r2, [r2, #0]
    d0c6:	189b      	adds	r3, r3, r2
    d0c8:	009b      	lsls	r3, r3, #2
    d0ca:	5858      	ldr	r0, [r3, r1]
    d0cc:	4b2e      	ldr	r3, [pc, #184]	; (d188 <cal_axis_misalignments+0x5b8>)
    d0ce:	22e1      	movs	r2, #225	; 0xe1
    d0d0:	00d2      	lsls	r2, r2, #3
    d0d2:	4694      	mov	ip, r2
    d0d4:	44bc      	add	ip, r7
    d0d6:	4463      	add	r3, ip
    d0d8:	22e0      	movs	r2, #224	; 0xe0
    d0da:	00d2      	lsls	r2, r2, #3
    d0dc:	18ba      	adds	r2, r7, r2
    d0de:	6812      	ldr	r2, [r2, #0]
    d0e0:	0092      	lsls	r2, r2, #2
    d0e2:	58d2      	ldr	r2, [r2, r3]
    d0e4:	4b2d      	ldr	r3, [pc, #180]	; (d19c <cal_axis_misalignments+0x5cc>)
    d0e6:	1c11      	adds	r1, r2, #0
    d0e8:	4798      	blx	r3
    d0ea:	1c03      	adds	r3, r0, #0
    d0ec:	1c1a      	adds	r2, r3, #0
    d0ee:	4b2c      	ldr	r3, [pc, #176]	; (d1a0 <cal_axis_misalignments+0x5d0>)
    d0f0:	1c11      	adds	r1, r2, #0
    d0f2:	1c20      	adds	r0, r4, #0
    d0f4:	4798      	blx	r3
    d0f6:	1c03      	adds	r3, r0, #0
    d0f8:	1c19      	adds	r1, r3, #0
    d0fa:	4b2c      	ldr	r3, [pc, #176]	; (d1ac <cal_axis_misalignments+0x5dc>)
    d0fc:	22e1      	movs	r2, #225	; 0xe1
    d0fe:	00d2      	lsls	r2, r2, #3
    d100:	4694      	mov	ip, r2
    d102:	44bc      	add	ip, r7
    d104:	4463      	add	r3, ip
    d106:	4a21      	ldr	r2, [pc, #132]	; (d18c <cal_axis_misalignments+0x5bc>)
    d108:	18ba      	adds	r2, r7, r2
    d10a:	6812      	ldr	r2, [r2, #0]
    d10c:	0092      	lsls	r2, r2, #2
    d10e:	50d1      	str	r1, [r2, r3]
		for (j=0;j<4;j++){
    d110:	23e0      	movs	r3, #224	; 0xe0
    d112:	00db      	lsls	r3, r3, #3
    d114:	18fb      	adds	r3, r7, r3
    d116:	681b      	ldr	r3, [r3, #0]
    d118:	3301      	adds	r3, #1
    d11a:	22e0      	movs	r2, #224	; 0xe0
    d11c:	00d2      	lsls	r2, r2, #3
    d11e:	18ba      	adds	r2, r7, r2
    d120:	6013      	str	r3, [r2, #0]
    d122:	23e0      	movs	r3, #224	; 0xe0
    d124:	00db      	lsls	r3, r3, #3
    d126:	18fb      	adds	r3, r7, r3
    d128:	681b      	ldr	r3, [r3, #0]
    d12a:	2b03      	cmp	r3, #3
    d12c:	d9b0      	bls.n	d090 <cal_axis_misalignments+0x4c0>
	for (i=0;i<4;i++){
    d12e:	4b17      	ldr	r3, [pc, #92]	; (d18c <cal_axis_misalignments+0x5bc>)
    d130:	18fb      	adds	r3, r7, r3
    d132:	681b      	ldr	r3, [r3, #0]
    d134:	3301      	adds	r3, #1
    d136:	4a15      	ldr	r2, [pc, #84]	; (d18c <cal_axis_misalignments+0x5bc>)
    d138:	18ba      	adds	r2, r7, r2
    d13a:	6013      	str	r3, [r2, #0]
    d13c:	4b13      	ldr	r3, [pc, #76]	; (d18c <cal_axis_misalignments+0x5bc>)
    d13e:	18fb      	adds	r3, r7, r3
    d140:	681b      	ldr	r3, [r3, #0]
    d142:	2b03      	cmp	r3, #3
    d144:	d992      	bls.n	d06c <cal_axis_misalignments+0x49c>
			
		}
	}
	
	
	cal_struct->axmYX = Res[1];
    d146:	4b19      	ldr	r3, [pc, #100]	; (d1ac <cal_axis_misalignments+0x5dc>)
    d148:	22e1      	movs	r2, #225	; 0xe1
    d14a:	00d2      	lsls	r2, r2, #3
    d14c:	4694      	mov	ip, r2
    d14e:	44bc      	add	ip, r7
    d150:	4463      	add	r3, ip
    d152:	685a      	ldr	r2, [r3, #4]
    d154:	683b      	ldr	r3, [r7, #0]
    d156:	61da      	str	r2, [r3, #28]
	cal_struct->axmZY = Res[2];
    d158:	4b14      	ldr	r3, [pc, #80]	; (d1ac <cal_axis_misalignments+0x5dc>)
    d15a:	22e1      	movs	r2, #225	; 0xe1
    d15c:	00d2      	lsls	r2, r2, #3
    d15e:	4694      	mov	ip, r2
    d160:	44bc      	add	ip, r7
    d162:	4463      	add	r3, ip
    d164:	689a      	ldr	r2, [r3, #8]
    d166:	683b      	ldr	r3, [r7, #0]
    d168:	621a      	str	r2, [r3, #32]
	cal_struct->axmZX = Res[3];
    d16a:	4b10      	ldr	r3, [pc, #64]	; (d1ac <cal_axis_misalignments+0x5dc>)
    d16c:	22e1      	movs	r2, #225	; 0xe1
    d16e:	00d2      	lsls	r2, r2, #3
    d170:	4694      	mov	ip, r2
    d172:	44bc      	add	ip, r7
    d174:	4463      	add	r3, ip
    d176:	68da      	ldr	r2, [r3, #12]
    d178:	683b      	ldr	r3, [r7, #0]
    d17a:	625a      	str	r2, [r3, #36]	; 0x24
	//printf("\n\naxmYX:%f, axmZY: %f, axmZX: %f\n",
	//   cal_struct->axmYX, cal_struct->axmZY, cal_struct->axmZX);
	//print_matrix(DtD, 6, 6);
}
    d17c:	46c0      	nop			; (mov r8, r8)
    d17e:	46bd      	mov	sp, r7
    d180:	4b0c      	ldr	r3, [pc, #48]	; (d1b4 <cal_axis_misalignments+0x5e4>)
    d182:	449d      	add	sp, r3
    d184:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d186:	46c0      	nop			; (mov r8, r8)
    d188:	fffff914 	.word	0xfffff914
    d18c:	00000704 	.word	0x00000704
    d190:	fffffaf4 	.word	0xfffffaf4
    d194:	000006fc 	.word	0x000006fc
    d198:	fffff9b4 	.word	0xfffff9b4
    d19c:	000217d9 	.word	0x000217d9
    d1a0:	000210d5 	.word	0x000210d5
    d1a4:	20002db4 	.word	0x20002db4
    d1a8:	0000f24d 	.word	0x0000f24d
    d1ac:	fffff904 	.word	0xfffff904
    d1b0:	fffff924 	.word	0xfffff924
    d1b4:	0000070c 	.word	0x0000070c

0000d1b8 <cal_angleX>:




void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
    d1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1ba:	4caa      	ldr	r4, [pc, #680]	; (d464 <cal_angleX+0x2ac>)
    d1bc:	44a5      	add	sp, r4
    d1be:	af00      	add	r7, sp, #0
    d1c0:	60f8      	str	r0, [r7, #12]
    d1c2:	60b9      	str	r1, [r7, #8]
    d1c4:	607a      	str	r2, [r7, #4]
	float DtD, DtV, Res;
	uint32_t i;
	
	// D = Y2-Z2
	// V = Y2-Y1 + Z2-Z1;
	for (i=0;i<n_points;i++){
    d1c6:	2300      	movs	r3, #0
    d1c8:	22a5      	movs	r2, #165	; 0xa5
    d1ca:	0092      	lsls	r2, r2, #2
    d1cc:	18ba      	adds	r2, r7, r2
    d1ce:	6013      	str	r3, [r2, #0]
    d1d0:	e07c      	b.n	d2cc <cal_angleX+0x114>
		D[i] = XYZ2[i][1]-XYZ2[i][2];
    d1d2:	23a5      	movs	r3, #165	; 0xa5
    d1d4:	009b      	lsls	r3, r3, #2
    d1d6:	18fb      	adds	r3, r7, r3
    d1d8:	681a      	ldr	r2, [r3, #0]
    d1da:	0013      	movs	r3, r2
    d1dc:	005b      	lsls	r3, r3, #1
    d1de:	189b      	adds	r3, r3, r2
    d1e0:	009b      	lsls	r3, r3, #2
    d1e2:	001a      	movs	r2, r3
    d1e4:	68bb      	ldr	r3, [r7, #8]
    d1e6:	189b      	adds	r3, r3, r2
    d1e8:	6858      	ldr	r0, [r3, #4]
    d1ea:	23a5      	movs	r3, #165	; 0xa5
    d1ec:	009b      	lsls	r3, r3, #2
    d1ee:	18fb      	adds	r3, r7, r3
    d1f0:	681a      	ldr	r2, [r3, #0]
    d1f2:	0013      	movs	r3, r2
    d1f4:	005b      	lsls	r3, r3, #1
    d1f6:	189b      	adds	r3, r3, r2
    d1f8:	009b      	lsls	r3, r3, #2
    d1fa:	001a      	movs	r2, r3
    d1fc:	68bb      	ldr	r3, [r7, #8]
    d1fe:	189b      	adds	r3, r3, r2
    d200:	689a      	ldr	r2, [r3, #8]
    d202:	4b99      	ldr	r3, [pc, #612]	; (d468 <cal_angleX+0x2b0>)
    d204:	1c11      	adds	r1, r2, #0
    d206:	4798      	blx	r3
    d208:	1c03      	adds	r3, r0, #0
    d20a:	1c19      	adds	r1, r3, #0
    d20c:	4b97      	ldr	r3, [pc, #604]	; (d46c <cal_angleX+0x2b4>)
    d20e:	22a8      	movs	r2, #168	; 0xa8
    d210:	0092      	lsls	r2, r2, #2
    d212:	4694      	mov	ip, r2
    d214:	44bc      	add	ip, r7
    d216:	4463      	add	r3, ip
    d218:	22a5      	movs	r2, #165	; 0xa5
    d21a:	0092      	lsls	r2, r2, #2
    d21c:	18ba      	adds	r2, r7, r2
    d21e:	6812      	ldr	r2, [r2, #0]
    d220:	0092      	lsls	r2, r2, #2
    d222:	50d1      	str	r1, [r2, r3]
		V[i] = XYZ2[i][1]-XYZ1[i][1]+XYZ2[i][2]-XYZ1[i][2];
    d224:	23a5      	movs	r3, #165	; 0xa5
    d226:	009b      	lsls	r3, r3, #2
    d228:	18fb      	adds	r3, r7, r3
    d22a:	681a      	ldr	r2, [r3, #0]
    d22c:	0013      	movs	r3, r2
    d22e:	005b      	lsls	r3, r3, #1
    d230:	189b      	adds	r3, r3, r2
    d232:	009b      	lsls	r3, r3, #2
    d234:	001a      	movs	r2, r3
    d236:	68bb      	ldr	r3, [r7, #8]
    d238:	189b      	adds	r3, r3, r2
    d23a:	6858      	ldr	r0, [r3, #4]
    d23c:	23a5      	movs	r3, #165	; 0xa5
    d23e:	009b      	lsls	r3, r3, #2
    d240:	18fb      	adds	r3, r7, r3
    d242:	681a      	ldr	r2, [r3, #0]
    d244:	0013      	movs	r3, r2
    d246:	005b      	lsls	r3, r3, #1
    d248:	189b      	adds	r3, r3, r2
    d24a:	009b      	lsls	r3, r3, #2
    d24c:	001a      	movs	r2, r3
    d24e:	68fb      	ldr	r3, [r7, #12]
    d250:	189b      	adds	r3, r3, r2
    d252:	685a      	ldr	r2, [r3, #4]
    d254:	4b84      	ldr	r3, [pc, #528]	; (d468 <cal_angleX+0x2b0>)
    d256:	1c11      	adds	r1, r2, #0
    d258:	4798      	blx	r3
    d25a:	1c03      	adds	r3, r0, #0
    d25c:	1c18      	adds	r0, r3, #0
    d25e:	23a5      	movs	r3, #165	; 0xa5
    d260:	009b      	lsls	r3, r3, #2
    d262:	18fb      	adds	r3, r7, r3
    d264:	681a      	ldr	r2, [r3, #0]
    d266:	0013      	movs	r3, r2
    d268:	005b      	lsls	r3, r3, #1
    d26a:	189b      	adds	r3, r3, r2
    d26c:	009b      	lsls	r3, r3, #2
    d26e:	001a      	movs	r2, r3
    d270:	68bb      	ldr	r3, [r7, #8]
    d272:	189b      	adds	r3, r3, r2
    d274:	689a      	ldr	r2, [r3, #8]
    d276:	4b7e      	ldr	r3, [pc, #504]	; (d470 <cal_angleX+0x2b8>)
    d278:	1c11      	adds	r1, r2, #0
    d27a:	4798      	blx	r3
    d27c:	1c03      	adds	r3, r0, #0
    d27e:	1c18      	adds	r0, r3, #0
    d280:	23a5      	movs	r3, #165	; 0xa5
    d282:	009b      	lsls	r3, r3, #2
    d284:	18fb      	adds	r3, r7, r3
    d286:	681a      	ldr	r2, [r3, #0]
    d288:	0013      	movs	r3, r2
    d28a:	005b      	lsls	r3, r3, #1
    d28c:	189b      	adds	r3, r3, r2
    d28e:	009b      	lsls	r3, r3, #2
    d290:	001a      	movs	r2, r3
    d292:	68fb      	ldr	r3, [r7, #12]
    d294:	189b      	adds	r3, r3, r2
    d296:	689a      	ldr	r2, [r3, #8]
    d298:	4b73      	ldr	r3, [pc, #460]	; (d468 <cal_angleX+0x2b0>)
    d29a:	1c11      	adds	r1, r2, #0
    d29c:	4798      	blx	r3
    d29e:	1c03      	adds	r3, r0, #0
    d2a0:	1c19      	adds	r1, r3, #0
    d2a2:	4b74      	ldr	r3, [pc, #464]	; (d474 <cal_angleX+0x2bc>)
    d2a4:	22a8      	movs	r2, #168	; 0xa8
    d2a6:	0092      	lsls	r2, r2, #2
    d2a8:	4694      	mov	ip, r2
    d2aa:	44bc      	add	ip, r7
    d2ac:	4463      	add	r3, ip
    d2ae:	22a5      	movs	r2, #165	; 0xa5
    d2b0:	0092      	lsls	r2, r2, #2
    d2b2:	18ba      	adds	r2, r7, r2
    d2b4:	6812      	ldr	r2, [r2, #0]
    d2b6:	0092      	lsls	r2, r2, #2
    d2b8:	50d1      	str	r1, [r2, r3]
	for (i=0;i<n_points;i++){
    d2ba:	23a5      	movs	r3, #165	; 0xa5
    d2bc:	009b      	lsls	r3, r3, #2
    d2be:	18fb      	adds	r3, r7, r3
    d2c0:	681b      	ldr	r3, [r3, #0]
    d2c2:	3301      	adds	r3, #1
    d2c4:	22a5      	movs	r2, #165	; 0xa5
    d2c6:	0092      	lsls	r2, r2, #2
    d2c8:	18ba      	adds	r2, r7, r2
    d2ca:	6013      	str	r3, [r2, #0]
    d2cc:	4b6a      	ldr	r3, [pc, #424]	; (d478 <cal_angleX+0x2c0>)
    d2ce:	681b      	ldr	r3, [r3, #0]
    d2d0:	22a5      	movs	r2, #165	; 0xa5
    d2d2:	0092      	lsls	r2, r2, #2
    d2d4:	18ba      	adds	r2, r7, r2
    d2d6:	6812      	ldr	r2, [r2, #0]
    d2d8:	429a      	cmp	r2, r3
    d2da:	d200      	bcs.n	d2de <cal_angleX+0x126>
    d2dc:	e779      	b.n	d1d2 <cal_angleX+0x1a>
	}
	
	// DtD = D'*D;
	DtD = 0;
    d2de:	2300      	movs	r3, #0
    d2e0:	22a7      	movs	r2, #167	; 0xa7
    d2e2:	0092      	lsls	r2, r2, #2
    d2e4:	18ba      	adds	r2, r7, r2
    d2e6:	6013      	str	r3, [r2, #0]
	for (i=0;i<n_points;i++){
    d2e8:	2300      	movs	r3, #0
    d2ea:	22a5      	movs	r2, #165	; 0xa5
    d2ec:	0092      	lsls	r2, r2, #2
    d2ee:	18ba      	adds	r2, r7, r2
    d2f0:	6013      	str	r3, [r2, #0]
    d2f2:	e039      	b.n	d368 <cal_angleX+0x1b0>
		DtD = DtD + pow(D[i],2);
    d2f4:	4b61      	ldr	r3, [pc, #388]	; (d47c <cal_angleX+0x2c4>)
    d2f6:	22a7      	movs	r2, #167	; 0xa7
    d2f8:	0092      	lsls	r2, r2, #2
    d2fa:	18ba      	adds	r2, r7, r2
    d2fc:	6810      	ldr	r0, [r2, #0]
    d2fe:	4798      	blx	r3
    d300:	0005      	movs	r5, r0
    d302:	000e      	movs	r6, r1
    d304:	4b59      	ldr	r3, [pc, #356]	; (d46c <cal_angleX+0x2b4>)
    d306:	22a8      	movs	r2, #168	; 0xa8
    d308:	0092      	lsls	r2, r2, #2
    d30a:	4694      	mov	ip, r2
    d30c:	44bc      	add	ip, r7
    d30e:	4463      	add	r3, ip
    d310:	22a5      	movs	r2, #165	; 0xa5
    d312:	0092      	lsls	r2, r2, #2
    d314:	18ba      	adds	r2, r7, r2
    d316:	6812      	ldr	r2, [r2, #0]
    d318:	0092      	lsls	r2, r2, #2
    d31a:	58d2      	ldr	r2, [r2, r3]
    d31c:	4b57      	ldr	r3, [pc, #348]	; (d47c <cal_angleX+0x2c4>)
    d31e:	1c10      	adds	r0, r2, #0
    d320:	4798      	blx	r3
    d322:	2300      	movs	r3, #0
    d324:	2480      	movs	r4, #128	; 0x80
    d326:	05e4      	lsls	r4, r4, #23
    d328:	001a      	movs	r2, r3
    d32a:	0023      	movs	r3, r4
    d32c:	4c54      	ldr	r4, [pc, #336]	; (d480 <cal_angleX+0x2c8>)
    d32e:	47a0      	blx	r4
    d330:	0002      	movs	r2, r0
    d332:	000b      	movs	r3, r1
    d334:	4c53      	ldr	r4, [pc, #332]	; (d484 <cal_angleX+0x2cc>)
    d336:	0028      	movs	r0, r5
    d338:	0031      	movs	r1, r6
    d33a:	47a0      	blx	r4
    d33c:	0003      	movs	r3, r0
    d33e:	000c      	movs	r4, r1
    d340:	0019      	movs	r1, r3
    d342:	0022      	movs	r2, r4
    d344:	4b50      	ldr	r3, [pc, #320]	; (d488 <cal_angleX+0x2d0>)
    d346:	0008      	movs	r0, r1
    d348:	0011      	movs	r1, r2
    d34a:	4798      	blx	r3
    d34c:	1c03      	adds	r3, r0, #0
    d34e:	22a7      	movs	r2, #167	; 0xa7
    d350:	0092      	lsls	r2, r2, #2
    d352:	18ba      	adds	r2, r7, r2
    d354:	6013      	str	r3, [r2, #0]
	for (i=0;i<n_points;i++){
    d356:	23a5      	movs	r3, #165	; 0xa5
    d358:	009b      	lsls	r3, r3, #2
    d35a:	18fb      	adds	r3, r7, r3
    d35c:	681b      	ldr	r3, [r3, #0]
    d35e:	3301      	adds	r3, #1
    d360:	22a5      	movs	r2, #165	; 0xa5
    d362:	0092      	lsls	r2, r2, #2
    d364:	18ba      	adds	r2, r7, r2
    d366:	6013      	str	r3, [r2, #0]
    d368:	4b43      	ldr	r3, [pc, #268]	; (d478 <cal_angleX+0x2c0>)
    d36a:	681b      	ldr	r3, [r3, #0]
    d36c:	22a5      	movs	r2, #165	; 0xa5
    d36e:	0092      	lsls	r2, r2, #2
    d370:	18ba      	adds	r2, r7, r2
    d372:	6812      	ldr	r2, [r2, #0]
    d374:	429a      	cmp	r2, r3
    d376:	d3bd      	bcc.n	d2f4 <cal_angleX+0x13c>
	}
	// DtV = D'*V;
	DtV = 0;
    d378:	2300      	movs	r3, #0
    d37a:	22a6      	movs	r2, #166	; 0xa6
    d37c:	0092      	lsls	r2, r2, #2
    d37e:	18ba      	adds	r2, r7, r2
    d380:	6013      	str	r3, [r2, #0]
	for (i=0;i<n_points;i++){
    d382:	2300      	movs	r3, #0
    d384:	22a5      	movs	r2, #165	; 0xa5
    d386:	0092      	lsls	r2, r2, #2
    d388:	18ba      	adds	r2, r7, r2
    d38a:	6013      	str	r3, [r2, #0]
    d38c:	e031      	b.n	d3f2 <cal_angleX+0x23a>
		DtV = DtV + D[i]*V[i];
    d38e:	4b37      	ldr	r3, [pc, #220]	; (d46c <cal_angleX+0x2b4>)
    d390:	22a8      	movs	r2, #168	; 0xa8
    d392:	0092      	lsls	r2, r2, #2
    d394:	4694      	mov	ip, r2
    d396:	44bc      	add	ip, r7
    d398:	4463      	add	r3, ip
    d39a:	22a5      	movs	r2, #165	; 0xa5
    d39c:	0092      	lsls	r2, r2, #2
    d39e:	18ba      	adds	r2, r7, r2
    d3a0:	6812      	ldr	r2, [r2, #0]
    d3a2:	0092      	lsls	r2, r2, #2
    d3a4:	58d0      	ldr	r0, [r2, r3]
    d3a6:	4b33      	ldr	r3, [pc, #204]	; (d474 <cal_angleX+0x2bc>)
    d3a8:	22a8      	movs	r2, #168	; 0xa8
    d3aa:	0092      	lsls	r2, r2, #2
    d3ac:	4694      	mov	ip, r2
    d3ae:	44bc      	add	ip, r7
    d3b0:	4463      	add	r3, ip
    d3b2:	22a5      	movs	r2, #165	; 0xa5
    d3b4:	0092      	lsls	r2, r2, #2
    d3b6:	18ba      	adds	r2, r7, r2
    d3b8:	6812      	ldr	r2, [r2, #0]
    d3ba:	0092      	lsls	r2, r2, #2
    d3bc:	58d2      	ldr	r2, [r2, r3]
    d3be:	4b33      	ldr	r3, [pc, #204]	; (d48c <cal_angleX+0x2d4>)
    d3c0:	1c11      	adds	r1, r2, #0
    d3c2:	4798      	blx	r3
    d3c4:	1c03      	adds	r3, r0, #0
    d3c6:	1c1a      	adds	r2, r3, #0
    d3c8:	4b29      	ldr	r3, [pc, #164]	; (d470 <cal_angleX+0x2b8>)
    d3ca:	1c11      	adds	r1, r2, #0
    d3cc:	22a6      	movs	r2, #166	; 0xa6
    d3ce:	0092      	lsls	r2, r2, #2
    d3d0:	18ba      	adds	r2, r7, r2
    d3d2:	6810      	ldr	r0, [r2, #0]
    d3d4:	4798      	blx	r3
    d3d6:	1c03      	adds	r3, r0, #0
    d3d8:	22a6      	movs	r2, #166	; 0xa6
    d3da:	0092      	lsls	r2, r2, #2
    d3dc:	18ba      	adds	r2, r7, r2
    d3de:	6013      	str	r3, [r2, #0]
	for (i=0;i<n_points;i++){
    d3e0:	23a5      	movs	r3, #165	; 0xa5
    d3e2:	009b      	lsls	r3, r3, #2
    d3e4:	18fb      	adds	r3, r7, r3
    d3e6:	681b      	ldr	r3, [r3, #0]
    d3e8:	3301      	adds	r3, #1
    d3ea:	22a5      	movs	r2, #165	; 0xa5
    d3ec:	0092      	lsls	r2, r2, #2
    d3ee:	18ba      	adds	r2, r7, r2
    d3f0:	6013      	str	r3, [r2, #0]
    d3f2:	4b21      	ldr	r3, [pc, #132]	; (d478 <cal_angleX+0x2c0>)
    d3f4:	681b      	ldr	r3, [r3, #0]
    d3f6:	22a5      	movs	r2, #165	; 0xa5
    d3f8:	0092      	lsls	r2, r2, #2
    d3fa:	18ba      	adds	r2, r7, r2
    d3fc:	6812      	ldr	r2, [r2, #0]
    d3fe:	429a      	cmp	r2, r3
    d400:	d3c5      	bcc.n	d38e <cal_angleX+0x1d6>
	}
	
	// Res = (1/DtD)*DtV;
	Res = (1/DtD)*DtV;
    d402:	4b23      	ldr	r3, [pc, #140]	; (d490 <cal_angleX+0x2d8>)
    d404:	22a7      	movs	r2, #167	; 0xa7
    d406:	0092      	lsls	r2, r2, #2
    d408:	18ba      	adds	r2, r7, r2
    d40a:	6811      	ldr	r1, [r2, #0]
    d40c:	20fe      	movs	r0, #254	; 0xfe
    d40e:	0580      	lsls	r0, r0, #22
    d410:	4798      	blx	r3
    d412:	1c03      	adds	r3, r0, #0
    d414:	1c1a      	adds	r2, r3, #0
    d416:	4b1d      	ldr	r3, [pc, #116]	; (d48c <cal_angleX+0x2d4>)
    d418:	21a6      	movs	r1, #166	; 0xa6
    d41a:	0089      	lsls	r1, r1, #2
    d41c:	1879      	adds	r1, r7, r1
    d41e:	6809      	ldr	r1, [r1, #0]
    d420:	1c10      	adds	r0, r2, #0
    d422:	4798      	blx	r3
    d424:	1c03      	adds	r3, r0, #0
    d426:	22a4      	movs	r2, #164	; 0xa4
    d428:	0092      	lsls	r2, r2, #2
    d42a:	18ba      	adds	r2, r7, r2
    d42c:	6013      	str	r3, [r2, #0]
	
	cal_struct->thetaX = -1*rad2deg*Res;
    d42e:	4b19      	ldr	r3, [pc, #100]	; (d494 <cal_angleX+0x2dc>)
    d430:	681b      	ldr	r3, [r3, #0]
    d432:	2280      	movs	r2, #128	; 0x80
    d434:	0612      	lsls	r2, r2, #24
    d436:	405a      	eors	r2, r3
    d438:	4b14      	ldr	r3, [pc, #80]	; (d48c <cal_angleX+0x2d4>)
    d43a:	21a4      	movs	r1, #164	; 0xa4
    d43c:	0089      	lsls	r1, r1, #2
    d43e:	1879      	adds	r1, r7, r1
    d440:	6809      	ldr	r1, [r1, #0]
    d442:	1c10      	adds	r0, r2, #0
    d444:	4798      	blx	r3
    d446:	1c03      	adds	r3, r0, #0
    d448:	1c1a      	adds	r2, r3, #0
    d44a:	687b      	ldr	r3, [r7, #4]
    d44c:	629a      	str	r2, [r3, #40]	; 0x28

	// Create rotation matrix
	gen_RotM(cal_struct);
    d44e:	687b      	ldr	r3, [r7, #4]
    d450:	0018      	movs	r0, r3
    d452:	4b11      	ldr	r3, [pc, #68]	; (d498 <cal_angleX+0x2e0>)
    d454:	4798      	blx	r3
	
}
    d456:	46c0      	nop			; (mov r8, r8)
    d458:	46bd      	mov	sp, r7
    d45a:	23a9      	movs	r3, #169	; 0xa9
    d45c:	009b      	lsls	r3, r3, #2
    d45e:	449d      	add	sp, r3
    d460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d462:	46c0      	nop			; (mov r8, r8)
    d464:	fffffd5c 	.word	0xfffffd5c
    d468:	00021a19 	.word	0x00021a19
    d46c:	fffffeb0 	.word	0xfffffeb0
    d470:	000210d5 	.word	0x000210d5
    d474:	fffffd70 	.word	0xfffffd70
    d478:	20002db4 	.word	0x20002db4
    d47c:	00023a0d 	.word	0x00023a0d
    d480:	0001e3bd 	.word	0x0001e3bd
    d484:	00021ebd 	.word	0x00021ebd
    d488:	00023ab1 	.word	0x00023ab1
    d48c:	000217d9 	.word	0x000217d9
    d490:	000213f9 	.word	0x000213f9
    d494:	00028d64 	.word	0x00028d64
    d498:	0000e4b1 	.word	0x0000e4b1

0000d49c <cal_angleYZ>:




void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
    d49c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d49e:	46ce      	mov	lr, r9
    d4a0:	4647      	mov	r7, r8
    d4a2:	b580      	push	{r7, lr}
    d4a4:	4ce8      	ldr	r4, [pc, #928]	; (d848 <cal_angleYZ+0x3ac>)
    d4a6:	44a5      	add	sp, r4
    d4a8:	af00      	add	r7, sp, #0
    d4aa:	6178      	str	r0, [r7, #20]
    d4ac:	6139      	str	r1, [r7, #16]
	float detX;
	float X[nbuf][2];
	float tempX1[2][2], tempX2[2][2], tempX3[2], B[2];
	
	//  Initialize A and B for group average
	B1_init = cal_struct->thetaY;
    d4ae:	693b      	ldr	r3, [r7, #16]
    d4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d4b2:	4ae6      	ldr	r2, [pc, #920]	; (d84c <cal_angleYZ+0x3b0>)
    d4b4:	2110      	movs	r1, #16
    d4b6:	468c      	mov	ip, r1
    d4b8:	44bc      	add	ip, r7
    d4ba:	4462      	add	r2, ip
    d4bc:	6013      	str	r3, [r2, #0]
	B2_init = -1*cal_struct->thetaZ;
    d4be:	693b      	ldr	r3, [r7, #16]
    d4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d4c2:	2280      	movs	r2, #128	; 0x80
    d4c4:	0612      	lsls	r2, r2, #24
    d4c6:	4053      	eors	r3, r2
    d4c8:	22a9      	movs	r2, #169	; 0xa9
    d4ca:	00d2      	lsls	r2, r2, #3
    d4cc:	2110      	movs	r1, #16
    d4ce:	468c      	mov	ip, r1
    d4d0:	44bc      	add	ip, r7
    d4d2:	4462      	add	r2, ip
    d4d4:	6013      	str	r3, [r2, #0]
	
	// Create shifted x_ang array
	for (k=0;k< n_groups;k++){
    d4d6:	4bde      	ldr	r3, [pc, #888]	; (d850 <cal_angleYZ+0x3b4>)
    d4d8:	2210      	movs	r2, #16
    d4da:	4694      	mov	ip, r2
    d4dc:	44bc      	add	ip, r7
    d4de:	4463      	add	r3, ip
    d4e0:	2200      	movs	r2, #0
    d4e2:	701a      	strb	r2, [r3, #0]
    d4e4:	e19c      	b.n	d820 <cal_angleYZ+0x384>
		group_avg = 0;
    d4e6:	2300      	movs	r3, #0
    d4e8:	22aa      	movs	r2, #170	; 0xaa
    d4ea:	00d2      	lsls	r2, r2, #3
    d4ec:	2110      	movs	r1, #16
    d4ee:	468c      	mov	ip, r1
    d4f0:	44bc      	add	ip, r7
    d4f2:	4462      	add	r2, ip
    d4f4:	6013      	str	r3, [r2, #0]
		for (j=0;j<group_size;j++){
    d4f6:	4bd7      	ldr	r3, [pc, #860]	; (d854 <cal_angleYZ+0x3b8>)
    d4f8:	2210      	movs	r2, #16
    d4fa:	4694      	mov	ip, r2
    d4fc:	44bc      	add	ip, r7
    d4fe:	4463      	add	r3, ip
    d500:	2200      	movs	r2, #0
    d502:	701a      	strb	r2, [r3, #0]
    d504:	e103      	b.n	d70e <cal_angleYZ+0x272>
			ind = k*group_size + j;
    d506:	4bd2      	ldr	r3, [pc, #840]	; (d850 <cal_angleYZ+0x3b4>)
    d508:	2210      	movs	r2, #16
    d50a:	4694      	mov	ip, r2
    d50c:	44bc      	add	ip, r7
    d50e:	4463      	add	r3, ip
    d510:	781b      	ldrb	r3, [r3, #0]
    d512:	009b      	lsls	r3, r3, #2
    d514:	b2d9      	uxtb	r1, r3
    d516:	4bd0      	ldr	r3, [pc, #832]	; (d858 <cal_angleYZ+0x3bc>)
    d518:	2210      	movs	r2, #16
    d51a:	4694      	mov	ip, r2
    d51c:	44bc      	add	ip, r7
    d51e:	4463      	add	r3, ip
    d520:	4acc      	ldr	r2, [pc, #816]	; (d854 <cal_angleYZ+0x3b8>)
    d522:	2010      	movs	r0, #16
    d524:	4684      	mov	ip, r0
    d526:	44bc      	add	ip, r7
    d528:	4462      	add	r2, ip
    d52a:	7812      	ldrb	r2, [r2, #0]
    d52c:	188a      	adds	r2, r1, r2
    d52e:	701a      	strb	r2, [r3, #0]
			calc_theta_XY(&XYZ[ind][0], &roll_ang[ind], &x_ang_shift[ind]);
    d530:	4bc9      	ldr	r3, [pc, #804]	; (d858 <cal_angleYZ+0x3bc>)
    d532:	2210      	movs	r2, #16
    d534:	4694      	mov	ip, r2
    d536:	44bc      	add	ip, r7
    d538:	4463      	add	r3, ip
    d53a:	781a      	ldrb	r2, [r3, #0]
    d53c:	0013      	movs	r3, r2
    d53e:	005b      	lsls	r3, r3, #1
    d540:	189b      	adds	r3, r3, r2
    d542:	009b      	lsls	r3, r3, #2
    d544:	001a      	movs	r2, r3
    d546:	697b      	ldr	r3, [r7, #20]
    d548:	189b      	adds	r3, r3, r2
    d54a:	0018      	movs	r0, r3
    d54c:	4bc2      	ldr	r3, [pc, #776]	; (d858 <cal_angleYZ+0x3bc>)
    d54e:	2210      	movs	r2, #16
    d550:	4694      	mov	ip, r2
    d552:	44bc      	add	ip, r7
    d554:	4463      	add	r3, ip
    d556:	781b      	ldrb	r3, [r3, #0]
    d558:	22ff      	movs	r2, #255	; 0xff
    d55a:	0092      	lsls	r2, r2, #2
    d55c:	2110      	movs	r1, #16
    d55e:	468c      	mov	ip, r1
    d560:	44bc      	add	ip, r7
    d562:	4462      	add	r2, ip
    d564:	009b      	lsls	r3, r3, #2
    d566:	18d1      	adds	r1, r2, r3
    d568:	4bbb      	ldr	r3, [pc, #748]	; (d858 <cal_angleYZ+0x3bc>)
    d56a:	2210      	movs	r2, #16
    d56c:	4694      	mov	ip, r2
    d56e:	44bc      	add	ip, r7
    d570:	4463      	add	r3, ip
    d572:	781b      	ldrb	r3, [r3, #0]
    d574:	22af      	movs	r2, #175	; 0xaf
    d576:	0092      	lsls	r2, r2, #2
    d578:	2410      	movs	r4, #16
    d57a:	46a4      	mov	ip, r4
    d57c:	44bc      	add	ip, r7
    d57e:	4462      	add	r2, ip
    d580:	009b      	lsls	r3, r3, #2
    d582:	18d3      	adds	r3, r2, r3
    d584:	001a      	movs	r2, r3
    d586:	4bb5      	ldr	r3, [pc, #724]	; (d85c <cal_angleYZ+0x3c0>)
    d588:	4798      	blx	r3
			x_ang_comp  = x_ang_shift[ind]
    d58a:	4bb3      	ldr	r3, [pc, #716]	; (d858 <cal_angleYZ+0x3bc>)
    d58c:	2210      	movs	r2, #16
    d58e:	4694      	mov	ip, r2
    d590:	44bc      	add	ip, r7
    d592:	4463      	add	r3, ip
    d594:	781a      	ldrb	r2, [r3, #0]
    d596:	4bb2      	ldr	r3, [pc, #712]	; (d860 <cal_angleYZ+0x3c4>)
    d598:	21ab      	movs	r1, #171	; 0xab
    d59a:	00c9      	lsls	r1, r1, #3
    d59c:	468c      	mov	ip, r1
    d59e:	2110      	movs	r1, #16
    d5a0:	4688      	mov	r8, r1
    d5a2:	44b8      	add	r8, r7
    d5a4:	44c4      	add	ip, r8
    d5a6:	4463      	add	r3, ip
    d5a8:	0092      	lsls	r2, r2, #2
    d5aa:	58d2      	ldr	r2, [r2, r3]
    d5ac:	4bad      	ldr	r3, [pc, #692]	; (d864 <cal_angleYZ+0x3c8>)
    d5ae:	1c10      	adds	r0, r2, #0
    d5b0:	4798      	blx	r3
    d5b2:	0005      	movs	r5, r0
    d5b4:	000e      	movs	r6, r1
			- B1_init*cos(deg2rad*roll_ang[ind])
    d5b6:	4bab      	ldr	r3, [pc, #684]	; (d864 <cal_angleYZ+0x3c8>)
    d5b8:	4aa4      	ldr	r2, [pc, #656]	; (d84c <cal_angleYZ+0x3b0>)
    d5ba:	2110      	movs	r1, #16
    d5bc:	468c      	mov	ip, r1
    d5be:	44bc      	add	ip, r7
    d5c0:	4462      	add	r2, ip
    d5c2:	6810      	ldr	r0, [r2, #0]
    d5c4:	4798      	blx	r3
    d5c6:	60b8      	str	r0, [r7, #8]
    d5c8:	60f9      	str	r1, [r7, #12]
    d5ca:	4ba3      	ldr	r3, [pc, #652]	; (d858 <cal_angleYZ+0x3bc>)
    d5cc:	2210      	movs	r2, #16
    d5ce:	4694      	mov	ip, r2
    d5d0:	44bc      	add	ip, r7
    d5d2:	4463      	add	r3, ip
    d5d4:	781a      	ldrb	r2, [r3, #0]
    d5d6:	4ba4      	ldr	r3, [pc, #656]	; (d868 <cal_angleYZ+0x3cc>)
    d5d8:	21ab      	movs	r1, #171	; 0xab
    d5da:	00c9      	lsls	r1, r1, #3
    d5dc:	468c      	mov	ip, r1
    d5de:	2110      	movs	r1, #16
    d5e0:	4688      	mov	r8, r1
    d5e2:	44b8      	add	r8, r7
    d5e4:	44c4      	add	ip, r8
    d5e6:	4463      	add	r3, ip
    d5e8:	0092      	lsls	r2, r2, #2
    d5ea:	58d2      	ldr	r2, [r2, r3]
    d5ec:	4b9f      	ldr	r3, [pc, #636]	; (d86c <cal_angleYZ+0x3d0>)
    d5ee:	6819      	ldr	r1, [r3, #0]
    d5f0:	4b9f      	ldr	r3, [pc, #636]	; (d870 <cal_angleYZ+0x3d4>)
    d5f2:	1c10      	adds	r0, r2, #0
    d5f4:	4798      	blx	r3
    d5f6:	1c03      	adds	r3, r0, #0
    d5f8:	1c1a      	adds	r2, r3, #0
    d5fa:	4b9a      	ldr	r3, [pc, #616]	; (d864 <cal_angleYZ+0x3c8>)
    d5fc:	1c10      	adds	r0, r2, #0
    d5fe:	4798      	blx	r3
    d600:	0003      	movs	r3, r0
    d602:	000c      	movs	r4, r1
    d604:	0018      	movs	r0, r3
    d606:	0021      	movs	r1, r4
    d608:	4b9a      	ldr	r3, [pc, #616]	; (d874 <cal_angleYZ+0x3d8>)
    d60a:	4798      	blx	r3
    d60c:	0002      	movs	r2, r0
    d60e:	000b      	movs	r3, r1
    d610:	4c99      	ldr	r4, [pc, #612]	; (d878 <cal_angleYZ+0x3dc>)
    d612:	68b8      	ldr	r0, [r7, #8]
    d614:	68f9      	ldr	r1, [r7, #12]
    d616:	47a0      	blx	r4
    d618:	0003      	movs	r3, r0
    d61a:	000c      	movs	r4, r1
    d61c:	001a      	movs	r2, r3
    d61e:	0023      	movs	r3, r4
    d620:	4c96      	ldr	r4, [pc, #600]	; (d87c <cal_angleYZ+0x3e0>)
    d622:	0028      	movs	r0, r5
    d624:	0031      	movs	r1, r6
    d626:	47a0      	blx	r4
    d628:	0003      	movs	r3, r0
    d62a:	000c      	movs	r4, r1
    d62c:	001d      	movs	r5, r3
    d62e:	0026      	movs	r6, r4
			- B2_init*sin(deg2rad*roll_ang[ind]);
    d630:	4b8c      	ldr	r3, [pc, #560]	; (d864 <cal_angleYZ+0x3c8>)
    d632:	22a9      	movs	r2, #169	; 0xa9
    d634:	00d2      	lsls	r2, r2, #3
    d636:	2110      	movs	r1, #16
    d638:	468c      	mov	ip, r1
    d63a:	44bc      	add	ip, r7
    d63c:	4462      	add	r2, ip
    d63e:	6810      	ldr	r0, [r2, #0]
    d640:	4798      	blx	r3
    d642:	60b8      	str	r0, [r7, #8]
    d644:	60f9      	str	r1, [r7, #12]
    d646:	4b84      	ldr	r3, [pc, #528]	; (d858 <cal_angleYZ+0x3bc>)
    d648:	2210      	movs	r2, #16
    d64a:	4694      	mov	ip, r2
    d64c:	44bc      	add	ip, r7
    d64e:	4463      	add	r3, ip
    d650:	781a      	ldrb	r2, [r3, #0]
    d652:	4b85      	ldr	r3, [pc, #532]	; (d868 <cal_angleYZ+0x3cc>)
    d654:	21ab      	movs	r1, #171	; 0xab
    d656:	00c9      	lsls	r1, r1, #3
    d658:	468c      	mov	ip, r1
    d65a:	2110      	movs	r1, #16
    d65c:	4688      	mov	r8, r1
    d65e:	44b8      	add	r8, r7
    d660:	44c4      	add	ip, r8
    d662:	4463      	add	r3, ip
    d664:	0092      	lsls	r2, r2, #2
    d666:	58d2      	ldr	r2, [r2, r3]
    d668:	4b80      	ldr	r3, [pc, #512]	; (d86c <cal_angleYZ+0x3d0>)
    d66a:	6819      	ldr	r1, [r3, #0]
    d66c:	4b80      	ldr	r3, [pc, #512]	; (d870 <cal_angleYZ+0x3d4>)
    d66e:	1c10      	adds	r0, r2, #0
    d670:	4798      	blx	r3
    d672:	1c03      	adds	r3, r0, #0
    d674:	1c1a      	adds	r2, r3, #0
    d676:	4b7b      	ldr	r3, [pc, #492]	; (d864 <cal_angleYZ+0x3c8>)
    d678:	1c10      	adds	r0, r2, #0
    d67a:	4798      	blx	r3
    d67c:	0003      	movs	r3, r0
    d67e:	000c      	movs	r4, r1
    d680:	0018      	movs	r0, r3
    d682:	0021      	movs	r1, r4
    d684:	4b7e      	ldr	r3, [pc, #504]	; (d880 <cal_angleYZ+0x3e4>)
    d686:	4798      	blx	r3
    d688:	0002      	movs	r2, r0
    d68a:	000b      	movs	r3, r1
    d68c:	4c7a      	ldr	r4, [pc, #488]	; (d878 <cal_angleYZ+0x3dc>)
    d68e:	68b8      	ldr	r0, [r7, #8]
    d690:	68f9      	ldr	r1, [r7, #12]
    d692:	47a0      	blx	r4
    d694:	0003      	movs	r3, r0
    d696:	000c      	movs	r4, r1
    d698:	001a      	movs	r2, r3
    d69a:	0023      	movs	r3, r4
    d69c:	4c77      	ldr	r4, [pc, #476]	; (d87c <cal_angleYZ+0x3e0>)
    d69e:	0028      	movs	r0, r5
    d6a0:	0031      	movs	r1, r6
    d6a2:	47a0      	blx	r4
    d6a4:	0003      	movs	r3, r0
    d6a6:	000c      	movs	r4, r1
    d6a8:	0019      	movs	r1, r3
    d6aa:	0022      	movs	r2, r4
			x_ang_comp  = x_ang_shift[ind]
    d6ac:	4b75      	ldr	r3, [pc, #468]	; (d884 <cal_angleYZ+0x3e8>)
    d6ae:	0008      	movs	r0, r1
    d6b0:	0011      	movs	r1, r2
    d6b2:	4798      	blx	r3
    d6b4:	1c03      	adds	r3, r0, #0
    d6b6:	22a8      	movs	r2, #168	; 0xa8
    d6b8:	00d2      	lsls	r2, r2, #3
    d6ba:	2110      	movs	r1, #16
    d6bc:	468c      	mov	ip, r1
    d6be:	44bc      	add	ip, r7
    d6c0:	4462      	add	r2, ip
    d6c2:	6013      	str	r3, [r2, #0]
			group_avg = group_avg+x_ang_comp;
    d6c4:	4b70      	ldr	r3, [pc, #448]	; (d888 <cal_angleYZ+0x3ec>)
    d6c6:	22a8      	movs	r2, #168	; 0xa8
    d6c8:	00d2      	lsls	r2, r2, #3
    d6ca:	2110      	movs	r1, #16
    d6cc:	468c      	mov	ip, r1
    d6ce:	44bc      	add	ip, r7
    d6d0:	4462      	add	r2, ip
    d6d2:	6811      	ldr	r1, [r2, #0]
    d6d4:	22aa      	movs	r2, #170	; 0xaa
    d6d6:	00d2      	lsls	r2, r2, #3
    d6d8:	2010      	movs	r0, #16
    d6da:	4684      	mov	ip, r0
    d6dc:	44bc      	add	ip, r7
    d6de:	4462      	add	r2, ip
    d6e0:	6810      	ldr	r0, [r2, #0]
    d6e2:	4798      	blx	r3
    d6e4:	1c03      	adds	r3, r0, #0
    d6e6:	22aa      	movs	r2, #170	; 0xaa
    d6e8:	00d2      	lsls	r2, r2, #3
    d6ea:	2110      	movs	r1, #16
    d6ec:	468c      	mov	ip, r1
    d6ee:	44bc      	add	ip, r7
    d6f0:	4462      	add	r2, ip
    d6f2:	6013      	str	r3, [r2, #0]
		for (j=0;j<group_size;j++){
    d6f4:	4b57      	ldr	r3, [pc, #348]	; (d854 <cal_angleYZ+0x3b8>)
    d6f6:	2210      	movs	r2, #16
    d6f8:	4694      	mov	ip, r2
    d6fa:	44bc      	add	ip, r7
    d6fc:	4463      	add	r3, ip
    d6fe:	781a      	ldrb	r2, [r3, #0]
    d700:	4b54      	ldr	r3, [pc, #336]	; (d854 <cal_angleYZ+0x3b8>)
    d702:	2110      	movs	r1, #16
    d704:	468c      	mov	ip, r1
    d706:	44bc      	add	ip, r7
    d708:	4463      	add	r3, ip
    d70a:	3201      	adds	r2, #1
    d70c:	701a      	strb	r2, [r3, #0]
    d70e:	4b51      	ldr	r3, [pc, #324]	; (d854 <cal_angleYZ+0x3b8>)
    d710:	2210      	movs	r2, #16
    d712:	4694      	mov	ip, r2
    d714:	44bc      	add	ip, r7
    d716:	4463      	add	r3, ip
    d718:	781b      	ldrb	r3, [r3, #0]
    d71a:	2b03      	cmp	r3, #3
    d71c:	d800      	bhi.n	d720 <cal_angleYZ+0x284>
    d71e:	e6f2      	b.n	d506 <cal_angleYZ+0x6a>
		}
		group_avg = group_avg/group_size;
    d720:	4b5a      	ldr	r3, [pc, #360]	; (d88c <cal_angleYZ+0x3f0>)
    d722:	2181      	movs	r1, #129	; 0x81
    d724:	05c9      	lsls	r1, r1, #23
    d726:	22aa      	movs	r2, #170	; 0xaa
    d728:	00d2      	lsls	r2, r2, #3
    d72a:	2010      	movs	r0, #16
    d72c:	4684      	mov	ip, r0
    d72e:	44bc      	add	ip, r7
    d730:	4462      	add	r2, ip
    d732:	6810      	ldr	r0, [r2, #0]
    d734:	4798      	blx	r3
    d736:	1c03      	adds	r3, r0, #0
    d738:	22aa      	movs	r2, #170	; 0xaa
    d73a:	00d2      	lsls	r2, r2, #3
    d73c:	2110      	movs	r1, #16
    d73e:	468c      	mov	ip, r1
    d740:	44bc      	add	ip, r7
    d742:	4462      	add	r2, ip
    d744:	6013      	str	r3, [r2, #0]
		for (j=0;j<group_size;j++){
    d746:	4b43      	ldr	r3, [pc, #268]	; (d854 <cal_angleYZ+0x3b8>)
    d748:	2210      	movs	r2, #16
    d74a:	4694      	mov	ip, r2
    d74c:	44bc      	add	ip, r7
    d74e:	4463      	add	r3, ip
    d750:	2200      	movs	r2, #0
    d752:	701a      	strb	r2, [r3, #0]
    d754:	e04f      	b.n	d7f6 <cal_angleYZ+0x35a>
			ind = k*group_size + j;
    d756:	4b3e      	ldr	r3, [pc, #248]	; (d850 <cal_angleYZ+0x3b4>)
    d758:	2210      	movs	r2, #16
    d75a:	4694      	mov	ip, r2
    d75c:	44bc      	add	ip, r7
    d75e:	4463      	add	r3, ip
    d760:	781b      	ldrb	r3, [r3, #0]
    d762:	009b      	lsls	r3, r3, #2
    d764:	b2d9      	uxtb	r1, r3
    d766:	4b3c      	ldr	r3, [pc, #240]	; (d858 <cal_angleYZ+0x3bc>)
    d768:	2210      	movs	r2, #16
    d76a:	4694      	mov	ip, r2
    d76c:	44bc      	add	ip, r7
    d76e:	4463      	add	r3, ip
    d770:	4a38      	ldr	r2, [pc, #224]	; (d854 <cal_angleYZ+0x3b8>)
    d772:	2010      	movs	r0, #16
    d774:	4684      	mov	ip, r0
    d776:	44bc      	add	ip, r7
    d778:	4462      	add	r2, ip
    d77a:	7812      	ldrb	r2, [r2, #0]
    d77c:	188a      	adds	r2, r1, r2
    d77e:	701a      	strb	r2, [r3, #0]
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
    d780:	4b35      	ldr	r3, [pc, #212]	; (d858 <cal_angleYZ+0x3bc>)
    d782:	2210      	movs	r2, #16
    d784:	4694      	mov	ip, r2
    d786:	44bc      	add	ip, r7
    d788:	4463      	add	r3, ip
    d78a:	781c      	ldrb	r4, [r3, #0]
    d78c:	4b32      	ldr	r3, [pc, #200]	; (d858 <cal_angleYZ+0x3bc>)
    d78e:	2210      	movs	r2, #16
    d790:	4694      	mov	ip, r2
    d792:	44bc      	add	ip, r7
    d794:	4463      	add	r3, ip
    d796:	781a      	ldrb	r2, [r3, #0]
    d798:	4b31      	ldr	r3, [pc, #196]	; (d860 <cal_angleYZ+0x3c4>)
    d79a:	21ab      	movs	r1, #171	; 0xab
    d79c:	00c9      	lsls	r1, r1, #3
    d79e:	468c      	mov	ip, r1
    d7a0:	2110      	movs	r1, #16
    d7a2:	4688      	mov	r8, r1
    d7a4:	44b8      	add	r8, r7
    d7a6:	44c4      	add	ip, r8
    d7a8:	4463      	add	r3, ip
    d7aa:	0092      	lsls	r2, r2, #2
    d7ac:	58d2      	ldr	r2, [r2, r3]
    d7ae:	4b38      	ldr	r3, [pc, #224]	; (d890 <cal_angleYZ+0x3f4>)
    d7b0:	21aa      	movs	r1, #170	; 0xaa
    d7b2:	00c9      	lsls	r1, r1, #3
    d7b4:	2010      	movs	r0, #16
    d7b6:	4684      	mov	ip, r0
    d7b8:	44bc      	add	ip, r7
    d7ba:	4461      	add	r1, ip
    d7bc:	6809      	ldr	r1, [r1, #0]
    d7be:	1c10      	adds	r0, r2, #0
    d7c0:	4798      	blx	r3
    d7c2:	1c03      	adds	r3, r0, #0
    d7c4:	1c19      	adds	r1, r3, #0
    d7c6:	4b26      	ldr	r3, [pc, #152]	; (d860 <cal_angleYZ+0x3c4>)
    d7c8:	22ab      	movs	r2, #171	; 0xab
    d7ca:	00d2      	lsls	r2, r2, #3
    d7cc:	4694      	mov	ip, r2
    d7ce:	2210      	movs	r2, #16
    d7d0:	4690      	mov	r8, r2
    d7d2:	44b8      	add	r8, r7
    d7d4:	44c4      	add	ip, r8
    d7d6:	4463      	add	r3, ip
    d7d8:	00a2      	lsls	r2, r4, #2
    d7da:	50d1      	str	r1, [r2, r3]
		for (j=0;j<group_size;j++){
    d7dc:	4b1d      	ldr	r3, [pc, #116]	; (d854 <cal_angleYZ+0x3b8>)
    d7de:	2210      	movs	r2, #16
    d7e0:	4694      	mov	ip, r2
    d7e2:	44bc      	add	ip, r7
    d7e4:	4463      	add	r3, ip
    d7e6:	781a      	ldrb	r2, [r3, #0]
    d7e8:	4b1a      	ldr	r3, [pc, #104]	; (d854 <cal_angleYZ+0x3b8>)
    d7ea:	2110      	movs	r1, #16
    d7ec:	468c      	mov	ip, r1
    d7ee:	44bc      	add	ip, r7
    d7f0:	4463      	add	r3, ip
    d7f2:	3201      	adds	r2, #1
    d7f4:	701a      	strb	r2, [r3, #0]
    d7f6:	4b17      	ldr	r3, [pc, #92]	; (d854 <cal_angleYZ+0x3b8>)
    d7f8:	2210      	movs	r2, #16
    d7fa:	4694      	mov	ip, r2
    d7fc:	44bc      	add	ip, r7
    d7fe:	4463      	add	r3, ip
    d800:	781b      	ldrb	r3, [r3, #0]
    d802:	2b03      	cmp	r3, #3
    d804:	d9a7      	bls.n	d756 <cal_angleYZ+0x2ba>
	for (k=0;k< n_groups;k++){
    d806:	4b12      	ldr	r3, [pc, #72]	; (d850 <cal_angleYZ+0x3b4>)
    d808:	2210      	movs	r2, #16
    d80a:	4694      	mov	ip, r2
    d80c:	44bc      	add	ip, r7
    d80e:	4463      	add	r3, ip
    d810:	781a      	ldrb	r2, [r3, #0]
    d812:	4b0f      	ldr	r3, [pc, #60]	; (d850 <cal_angleYZ+0x3b4>)
    d814:	2110      	movs	r1, #16
    d816:	468c      	mov	ip, r1
    d818:	44bc      	add	ip, r7
    d81a:	4463      	add	r3, ip
    d81c:	3201      	adds	r2, #1
    d81e:	701a      	strb	r2, [r3, #0]
    d820:	4b0b      	ldr	r3, [pc, #44]	; (d850 <cal_angleYZ+0x3b4>)
    d822:	2210      	movs	r2, #16
    d824:	4694      	mov	ip, r2
    d826:	44bc      	add	ip, r7
    d828:	4463      	add	r3, ip
    d82a:	781a      	ldrb	r2, [r3, #0]
    d82c:	4b19      	ldr	r3, [pc, #100]	; (d894 <cal_angleYZ+0x3f8>)
    d82e:	681b      	ldr	r3, [r3, #0]
    d830:	429a      	cmp	r2, r3
    d832:	d200      	bcs.n	d836 <cal_angleYZ+0x39a>
    d834:	e657      	b.n	d4e6 <cal_angleYZ+0x4a>
		
	}

	
	//  X = [cosd(roll_fit), sind(roll_fit)]
	for (np=0;np<n_points;np++){
    d836:	4b18      	ldr	r3, [pc, #96]	; (d898 <cal_angleYZ+0x3fc>)
    d838:	2210      	movs	r2, #16
    d83a:	4694      	mov	ip, r2
    d83c:	44bc      	add	ip, r7
    d83e:	4463      	add	r3, ip
    d840:	2200      	movs	r2, #0
    d842:	701a      	strb	r2, [r3, #0]
    d844:	e0aa      	b.n	d99c <cal_angleYZ+0x500>
    d846:	46c0      	nop			; (mov r8, r8)
    d848:	fffffa94 	.word	0xfffffa94
    d84c:	0000054c 	.word	0x0000054c
    d850:	00000555 	.word	0x00000555
    d854:	00000556 	.word	0x00000556
    d858:	00000547 	.word	0x00000547
    d85c:	0000c6c5 	.word	0x0000c6c5
    d860:	fffffd64 	.word	0xfffffd64
    d864:	00023a0d 	.word	0x00023a0d
    d868:	fffffea4 	.word	0xfffffea4
    d86c:	00028d68 	.word	0x00028d68
    d870:	000217d9 	.word	0x000217d9
    d874:	0001e169 	.word	0x0001e169
    d878:	00022d45 	.word	0x00022d45
    d87c:	00023245 	.word	0x00023245
    d880:	0001e325 	.word	0x0001e325
    d884:	00023ab1 	.word	0x00023ab1
    d888:	000210d5 	.word	0x000210d5
    d88c:	000213f9 	.word	0x000213f9
    d890:	00021a19 	.word	0x00021a19
    d894:	20001ea0 	.word	0x20001ea0
    d898:	00000554 	.word	0x00000554
		X[np][0] = cos(deg2rad*roll_ang[np]);
    d89c:	4b5e      	ldr	r3, [pc, #376]	; (da18 <cal_angleYZ+0x57c>)
    d89e:	2210      	movs	r2, #16
    d8a0:	4694      	mov	ip, r2
    d8a2:	44bc      	add	ip, r7
    d8a4:	4463      	add	r3, ip
    d8a6:	781c      	ldrb	r4, [r3, #0]
    d8a8:	4b5b      	ldr	r3, [pc, #364]	; (da18 <cal_angleYZ+0x57c>)
    d8aa:	2210      	movs	r2, #16
    d8ac:	4694      	mov	ip, r2
    d8ae:	44bc      	add	ip, r7
    d8b0:	4463      	add	r3, ip
    d8b2:	781a      	ldrb	r2, [r3, #0]
    d8b4:	4b59      	ldr	r3, [pc, #356]	; (da1c <cal_angleYZ+0x580>)
    d8b6:	21ab      	movs	r1, #171	; 0xab
    d8b8:	00c9      	lsls	r1, r1, #3
    d8ba:	468c      	mov	ip, r1
    d8bc:	2110      	movs	r1, #16
    d8be:	4688      	mov	r8, r1
    d8c0:	44b8      	add	r8, r7
    d8c2:	44c4      	add	ip, r8
    d8c4:	4463      	add	r3, ip
    d8c6:	0092      	lsls	r2, r2, #2
    d8c8:	58d2      	ldr	r2, [r2, r3]
    d8ca:	4b55      	ldr	r3, [pc, #340]	; (da20 <cal_angleYZ+0x584>)
    d8cc:	6819      	ldr	r1, [r3, #0]
    d8ce:	4b55      	ldr	r3, [pc, #340]	; (da24 <cal_angleYZ+0x588>)
    d8d0:	1c10      	adds	r0, r2, #0
    d8d2:	4798      	blx	r3
    d8d4:	1c03      	adds	r3, r0, #0
    d8d6:	1c1a      	adds	r2, r3, #0
    d8d8:	4b53      	ldr	r3, [pc, #332]	; (da28 <cal_angleYZ+0x58c>)
    d8da:	1c10      	adds	r0, r2, #0
    d8dc:	4798      	blx	r3
    d8de:	0002      	movs	r2, r0
    d8e0:	000b      	movs	r3, r1
    d8e2:	0010      	movs	r0, r2
    d8e4:	0019      	movs	r1, r3
    d8e6:	4b51      	ldr	r3, [pc, #324]	; (da2c <cal_angleYZ+0x590>)
    d8e8:	4798      	blx	r3
    d8ea:	000a      	movs	r2, r1
    d8ec:	0001      	movs	r1, r0
    d8ee:	4b50      	ldr	r3, [pc, #320]	; (da30 <cal_angleYZ+0x594>)
    d8f0:	0008      	movs	r0, r1
    d8f2:	0011      	movs	r1, r2
    d8f4:	4798      	blx	r3
    d8f6:	1c01      	adds	r1, r0, #0
    d8f8:	4b4e      	ldr	r3, [pc, #312]	; (da34 <cal_angleYZ+0x598>)
    d8fa:	22ab      	movs	r2, #171	; 0xab
    d8fc:	00d2      	lsls	r2, r2, #3
    d8fe:	4694      	mov	ip, r2
    d900:	2210      	movs	r2, #16
    d902:	4690      	mov	r8, r2
    d904:	44b8      	add	r8, r7
    d906:	44c4      	add	ip, r8
    d908:	4463      	add	r3, ip
    d90a:	00e2      	lsls	r2, r4, #3
    d90c:	50d1      	str	r1, [r2, r3]
		X[np][1] = sin(deg2rad*roll_ang[np]);
    d90e:	4b42      	ldr	r3, [pc, #264]	; (da18 <cal_angleYZ+0x57c>)
    d910:	2210      	movs	r2, #16
    d912:	4694      	mov	ip, r2
    d914:	44bc      	add	ip, r7
    d916:	4463      	add	r3, ip
    d918:	781c      	ldrb	r4, [r3, #0]
    d91a:	4b3f      	ldr	r3, [pc, #252]	; (da18 <cal_angleYZ+0x57c>)
    d91c:	2210      	movs	r2, #16
    d91e:	4694      	mov	ip, r2
    d920:	44bc      	add	ip, r7
    d922:	4463      	add	r3, ip
    d924:	781a      	ldrb	r2, [r3, #0]
    d926:	4b3d      	ldr	r3, [pc, #244]	; (da1c <cal_angleYZ+0x580>)
    d928:	21ab      	movs	r1, #171	; 0xab
    d92a:	00c9      	lsls	r1, r1, #3
    d92c:	468c      	mov	ip, r1
    d92e:	2110      	movs	r1, #16
    d930:	4688      	mov	r8, r1
    d932:	44b8      	add	r8, r7
    d934:	44c4      	add	ip, r8
    d936:	4463      	add	r3, ip
    d938:	0092      	lsls	r2, r2, #2
    d93a:	58d2      	ldr	r2, [r2, r3]
    d93c:	4b38      	ldr	r3, [pc, #224]	; (da20 <cal_angleYZ+0x584>)
    d93e:	6819      	ldr	r1, [r3, #0]
    d940:	4b38      	ldr	r3, [pc, #224]	; (da24 <cal_angleYZ+0x588>)
    d942:	1c10      	adds	r0, r2, #0
    d944:	4798      	blx	r3
    d946:	1c03      	adds	r3, r0, #0
    d948:	1c1a      	adds	r2, r3, #0
    d94a:	4b37      	ldr	r3, [pc, #220]	; (da28 <cal_angleYZ+0x58c>)
    d94c:	1c10      	adds	r0, r2, #0
    d94e:	4798      	blx	r3
    d950:	0002      	movs	r2, r0
    d952:	000b      	movs	r3, r1
    d954:	0010      	movs	r0, r2
    d956:	0019      	movs	r1, r3
    d958:	4b37      	ldr	r3, [pc, #220]	; (da38 <cal_angleYZ+0x59c>)
    d95a:	4798      	blx	r3
    d95c:	000a      	movs	r2, r1
    d95e:	0001      	movs	r1, r0
    d960:	4b33      	ldr	r3, [pc, #204]	; (da30 <cal_angleYZ+0x594>)
    d962:	0008      	movs	r0, r1
    d964:	0011      	movs	r1, r2
    d966:	4798      	blx	r3
    d968:	1c01      	adds	r1, r0, #0
    d96a:	4b32      	ldr	r3, [pc, #200]	; (da34 <cal_angleYZ+0x598>)
    d96c:	22ab      	movs	r2, #171	; 0xab
    d96e:	00d2      	lsls	r2, r2, #3
    d970:	2010      	movs	r0, #16
    d972:	4684      	mov	ip, r0
    d974:	44bc      	add	ip, r7
    d976:	4462      	add	r2, ip
    d978:	18d2      	adds	r2, r2, r3
    d97a:	00e3      	lsls	r3, r4, #3
    d97c:	18d3      	adds	r3, r2, r3
    d97e:	3304      	adds	r3, #4
    d980:	6019      	str	r1, [r3, #0]
	for (np=0;np<n_points;np++){
    d982:	4b25      	ldr	r3, [pc, #148]	; (da18 <cal_angleYZ+0x57c>)
    d984:	2210      	movs	r2, #16
    d986:	4694      	mov	ip, r2
    d988:	44bc      	add	ip, r7
    d98a:	4463      	add	r3, ip
    d98c:	781a      	ldrb	r2, [r3, #0]
    d98e:	4b22      	ldr	r3, [pc, #136]	; (da18 <cal_angleYZ+0x57c>)
    d990:	2110      	movs	r1, #16
    d992:	468c      	mov	ip, r1
    d994:	44bc      	add	ip, r7
    d996:	4463      	add	r3, ip
    d998:	3201      	adds	r2, #1
    d99a:	701a      	strb	r2, [r3, #0]
    d99c:	4b1e      	ldr	r3, [pc, #120]	; (da18 <cal_angleYZ+0x57c>)
    d99e:	2210      	movs	r2, #16
    d9a0:	4694      	mov	ip, r2
    d9a2:	44bc      	add	ip, r7
    d9a4:	4463      	add	r3, ip
    d9a6:	781a      	ldrb	r2, [r3, #0]
    d9a8:	4b24      	ldr	r3, [pc, #144]	; (da3c <cal_angleYZ+0x5a0>)
    d9aa:	681b      	ldr	r3, [r3, #0]
    d9ac:	429a      	cmp	r2, r3
    d9ae:	d200      	bcs.n	d9b2 <cal_angleYZ+0x516>
    d9b0:	e774      	b.n	d89c <cal_angleYZ+0x400>
	}
	
	// tempX1 = X'*X;
	for (i=0;i<2;i++){
    d9b2:	4b23      	ldr	r3, [pc, #140]	; (da40 <cal_angleYZ+0x5a4>)
    d9b4:	2210      	movs	r2, #16
    d9b6:	4694      	mov	ip, r2
    d9b8:	44bc      	add	ip, r7
    d9ba:	4463      	add	r3, ip
    d9bc:	2200      	movs	r2, #0
    d9be:	701a      	strb	r2, [r3, #0]
    d9c0:	e0f0      	b.n	dba4 <cal_angleYZ+0x708>
		for (j=0;j<2;j++){
    d9c2:	4b20      	ldr	r3, [pc, #128]	; (da44 <cal_angleYZ+0x5a8>)
    d9c4:	2210      	movs	r2, #16
    d9c6:	4694      	mov	ip, r2
    d9c8:	44bc      	add	ip, r7
    d9ca:	4463      	add	r3, ip
    d9cc:	2200      	movs	r2, #0
    d9ce:	701a      	strb	r2, [r3, #0]
    d9d0:	e0d2      	b.n	db78 <cal_angleYZ+0x6dc>
			tempX1[i][j]=0;
    d9d2:	4b1b      	ldr	r3, [pc, #108]	; (da40 <cal_angleYZ+0x5a4>)
    d9d4:	2210      	movs	r2, #16
    d9d6:	4694      	mov	ip, r2
    d9d8:	44bc      	add	ip, r7
    d9da:	4463      	add	r3, ip
    d9dc:	7819      	ldrb	r1, [r3, #0]
    d9de:	4b19      	ldr	r3, [pc, #100]	; (da44 <cal_angleYZ+0x5a8>)
    d9e0:	2210      	movs	r2, #16
    d9e2:	4694      	mov	ip, r2
    d9e4:	44bc      	add	ip, r7
    d9e6:	4463      	add	r3, ip
    d9e8:	781a      	ldrb	r2, [r3, #0]
    d9ea:	4b17      	ldr	r3, [pc, #92]	; (da48 <cal_angleYZ+0x5ac>)
    d9ec:	20ab      	movs	r0, #171	; 0xab
    d9ee:	00c0      	lsls	r0, r0, #3
    d9f0:	4684      	mov	ip, r0
    d9f2:	2010      	movs	r0, #16
    d9f4:	4680      	mov	r8, r0
    d9f6:	44b8      	add	r8, r7
    d9f8:	44c4      	add	ip, r8
    d9fa:	4463      	add	r3, ip
    d9fc:	0049      	lsls	r1, r1, #1
    d9fe:	188a      	adds	r2, r1, r2
    da00:	0092      	lsls	r2, r2, #2
    da02:	2100      	movs	r1, #0
    da04:	50d1      	str	r1, [r2, r3]
			for (np=0;np<n_points;np++){
    da06:	4b04      	ldr	r3, [pc, #16]	; (da18 <cal_angleYZ+0x57c>)
    da08:	2210      	movs	r2, #16
    da0a:	4694      	mov	ip, r2
    da0c:	44bc      	add	ip, r7
    da0e:	4463      	add	r3, ip
    da10:	2200      	movs	r2, #0
    da12:	701a      	strb	r2, [r3, #0]
    da14:	e098      	b.n	db48 <cal_angleYZ+0x6ac>
    da16:	46c0      	nop			; (mov r8, r8)
    da18:	00000554 	.word	0x00000554
    da1c:	fffffea4 	.word	0xfffffea4
    da20:	00028d68 	.word	0x00028d68
    da24:	000217d9 	.word	0x000217d9
    da28:	00023a0d 	.word	0x00023a0d
    da2c:	0001e169 	.word	0x0001e169
    da30:	00023ab1 	.word	0x00023ab1
    da34:	fffffae4 	.word	0xfffffae4
    da38:	0001e325 	.word	0x0001e325
    da3c:	20002db4 	.word	0x20002db4
    da40:	00000557 	.word	0x00000557
    da44:	00000556 	.word	0x00000556
    da48:	fffffad4 	.word	0xfffffad4
				tempX1[i][j] = tempX1[i][j]+X[np][j]*X[np][i];
    da4c:	4bca      	ldr	r3, [pc, #808]	; (dd78 <cal_angleYZ+0x8dc>)
    da4e:	2210      	movs	r2, #16
    da50:	4694      	mov	ip, r2
    da52:	44bc      	add	ip, r7
    da54:	4463      	add	r3, ip
    da56:	781d      	ldrb	r5, [r3, #0]
    da58:	4bc8      	ldr	r3, [pc, #800]	; (dd7c <cal_angleYZ+0x8e0>)
    da5a:	2210      	movs	r2, #16
    da5c:	4694      	mov	ip, r2
    da5e:	44bc      	add	ip, r7
    da60:	4463      	add	r3, ip
    da62:	781c      	ldrb	r4, [r3, #0]
    da64:	4bc4      	ldr	r3, [pc, #784]	; (dd78 <cal_angleYZ+0x8dc>)
    da66:	2210      	movs	r2, #16
    da68:	4694      	mov	ip, r2
    da6a:	44bc      	add	ip, r7
    da6c:	4463      	add	r3, ip
    da6e:	7819      	ldrb	r1, [r3, #0]
    da70:	4bc2      	ldr	r3, [pc, #776]	; (dd7c <cal_angleYZ+0x8e0>)
    da72:	2210      	movs	r2, #16
    da74:	4694      	mov	ip, r2
    da76:	44bc      	add	ip, r7
    da78:	4463      	add	r3, ip
    da7a:	781a      	ldrb	r2, [r3, #0]
    da7c:	4bc0      	ldr	r3, [pc, #768]	; (dd80 <cal_angleYZ+0x8e4>)
    da7e:	20ab      	movs	r0, #171	; 0xab
    da80:	00c0      	lsls	r0, r0, #3
    da82:	4684      	mov	ip, r0
    da84:	2010      	movs	r0, #16
    da86:	4680      	mov	r8, r0
    da88:	44b8      	add	r8, r7
    da8a:	44c4      	add	ip, r8
    da8c:	4463      	add	r3, ip
    da8e:	0049      	lsls	r1, r1, #1
    da90:	188a      	adds	r2, r1, r2
    da92:	0092      	lsls	r2, r2, #2
    da94:	58d6      	ldr	r6, [r2, r3]
    da96:	4bbb      	ldr	r3, [pc, #748]	; (dd84 <cal_angleYZ+0x8e8>)
    da98:	2210      	movs	r2, #16
    da9a:	4694      	mov	ip, r2
    da9c:	44bc      	add	ip, r7
    da9e:	4463      	add	r3, ip
    daa0:	7819      	ldrb	r1, [r3, #0]
    daa2:	4bb6      	ldr	r3, [pc, #728]	; (dd7c <cal_angleYZ+0x8e0>)
    daa4:	2210      	movs	r2, #16
    daa6:	4694      	mov	ip, r2
    daa8:	44bc      	add	ip, r7
    daaa:	4463      	add	r3, ip
    daac:	781a      	ldrb	r2, [r3, #0]
    daae:	4bb6      	ldr	r3, [pc, #728]	; (dd88 <cal_angleYZ+0x8ec>)
    dab0:	20ab      	movs	r0, #171	; 0xab
    dab2:	00c0      	lsls	r0, r0, #3
    dab4:	4684      	mov	ip, r0
    dab6:	2010      	movs	r0, #16
    dab8:	4680      	mov	r8, r0
    daba:	44b8      	add	r8, r7
    dabc:	44c4      	add	ip, r8
    dabe:	4463      	add	r3, ip
    dac0:	0049      	lsls	r1, r1, #1
    dac2:	188a      	adds	r2, r1, r2
    dac4:	0092      	lsls	r2, r2, #2
    dac6:	58d0      	ldr	r0, [r2, r3]
    dac8:	4bae      	ldr	r3, [pc, #696]	; (dd84 <cal_angleYZ+0x8e8>)
    daca:	2210      	movs	r2, #16
    dacc:	4694      	mov	ip, r2
    dace:	44bc      	add	ip, r7
    dad0:	4463      	add	r3, ip
    dad2:	7819      	ldrb	r1, [r3, #0]
    dad4:	4ba8      	ldr	r3, [pc, #672]	; (dd78 <cal_angleYZ+0x8dc>)
    dad6:	2210      	movs	r2, #16
    dad8:	4694      	mov	ip, r2
    dada:	44bc      	add	ip, r7
    dadc:	4463      	add	r3, ip
    dade:	781a      	ldrb	r2, [r3, #0]
    dae0:	4ba9      	ldr	r3, [pc, #676]	; (dd88 <cal_angleYZ+0x8ec>)
    dae2:	4698      	mov	r8, r3
    dae4:	23ab      	movs	r3, #171	; 0xab
    dae6:	00db      	lsls	r3, r3, #3
    dae8:	469c      	mov	ip, r3
    daea:	2310      	movs	r3, #16
    daec:	4699      	mov	r9, r3
    daee:	44b9      	add	r9, r7
    daf0:	44cc      	add	ip, r9
    daf2:	4643      	mov	r3, r8
    daf4:	4463      	add	r3, ip
    daf6:	0049      	lsls	r1, r1, #1
    daf8:	188a      	adds	r2, r1, r2
    dafa:	0092      	lsls	r2, r2, #2
    dafc:	58d2      	ldr	r2, [r2, r3]
    dafe:	4ba3      	ldr	r3, [pc, #652]	; (dd8c <cal_angleYZ+0x8f0>)
    db00:	1c11      	adds	r1, r2, #0
    db02:	4798      	blx	r3
    db04:	1c03      	adds	r3, r0, #0
    db06:	1c1a      	adds	r2, r3, #0
    db08:	4ba1      	ldr	r3, [pc, #644]	; (dd90 <cal_angleYZ+0x8f4>)
    db0a:	1c11      	adds	r1, r2, #0
    db0c:	1c30      	adds	r0, r6, #0
    db0e:	4798      	blx	r3
    db10:	1c03      	adds	r3, r0, #0
    db12:	1c19      	adds	r1, r3, #0
    db14:	4b9a      	ldr	r3, [pc, #616]	; (dd80 <cal_angleYZ+0x8e4>)
    db16:	22ab      	movs	r2, #171	; 0xab
    db18:	00d2      	lsls	r2, r2, #3
    db1a:	4694      	mov	ip, r2
    db1c:	2210      	movs	r2, #16
    db1e:	4690      	mov	r8, r2
    db20:	44b8      	add	r8, r7
    db22:	44c4      	add	ip, r8
    db24:	4463      	add	r3, ip
    db26:	006a      	lsls	r2, r5, #1
    db28:	1912      	adds	r2, r2, r4
    db2a:	0092      	lsls	r2, r2, #2
    db2c:	50d1      	str	r1, [r2, r3]
			for (np=0;np<n_points;np++){
    db2e:	4b95      	ldr	r3, [pc, #596]	; (dd84 <cal_angleYZ+0x8e8>)
    db30:	2210      	movs	r2, #16
    db32:	4694      	mov	ip, r2
    db34:	44bc      	add	ip, r7
    db36:	4463      	add	r3, ip
    db38:	781a      	ldrb	r2, [r3, #0]
    db3a:	4b92      	ldr	r3, [pc, #584]	; (dd84 <cal_angleYZ+0x8e8>)
    db3c:	2110      	movs	r1, #16
    db3e:	468c      	mov	ip, r1
    db40:	44bc      	add	ip, r7
    db42:	4463      	add	r3, ip
    db44:	3201      	adds	r2, #1
    db46:	701a      	strb	r2, [r3, #0]
    db48:	4b8e      	ldr	r3, [pc, #568]	; (dd84 <cal_angleYZ+0x8e8>)
    db4a:	2210      	movs	r2, #16
    db4c:	4694      	mov	ip, r2
    db4e:	44bc      	add	ip, r7
    db50:	4463      	add	r3, ip
    db52:	781a      	ldrb	r2, [r3, #0]
    db54:	4b8f      	ldr	r3, [pc, #572]	; (dd94 <cal_angleYZ+0x8f8>)
    db56:	681b      	ldr	r3, [r3, #0]
    db58:	429a      	cmp	r2, r3
    db5a:	d200      	bcs.n	db5e <cal_angleYZ+0x6c2>
    db5c:	e776      	b.n	da4c <cal_angleYZ+0x5b0>
		for (j=0;j<2;j++){
    db5e:	4b87      	ldr	r3, [pc, #540]	; (dd7c <cal_angleYZ+0x8e0>)
    db60:	2210      	movs	r2, #16
    db62:	4694      	mov	ip, r2
    db64:	44bc      	add	ip, r7
    db66:	4463      	add	r3, ip
    db68:	781a      	ldrb	r2, [r3, #0]
    db6a:	4b84      	ldr	r3, [pc, #528]	; (dd7c <cal_angleYZ+0x8e0>)
    db6c:	2110      	movs	r1, #16
    db6e:	468c      	mov	ip, r1
    db70:	44bc      	add	ip, r7
    db72:	4463      	add	r3, ip
    db74:	3201      	adds	r2, #1
    db76:	701a      	strb	r2, [r3, #0]
    db78:	4b80      	ldr	r3, [pc, #512]	; (dd7c <cal_angleYZ+0x8e0>)
    db7a:	2210      	movs	r2, #16
    db7c:	4694      	mov	ip, r2
    db7e:	44bc      	add	ip, r7
    db80:	4463      	add	r3, ip
    db82:	781b      	ldrb	r3, [r3, #0]
    db84:	2b01      	cmp	r3, #1
    db86:	d800      	bhi.n	db8a <cal_angleYZ+0x6ee>
    db88:	e723      	b.n	d9d2 <cal_angleYZ+0x536>
	for (i=0;i<2;i++){
    db8a:	4b7b      	ldr	r3, [pc, #492]	; (dd78 <cal_angleYZ+0x8dc>)
    db8c:	2210      	movs	r2, #16
    db8e:	4694      	mov	ip, r2
    db90:	44bc      	add	ip, r7
    db92:	4463      	add	r3, ip
    db94:	781a      	ldrb	r2, [r3, #0]
    db96:	4b78      	ldr	r3, [pc, #480]	; (dd78 <cal_angleYZ+0x8dc>)
    db98:	2110      	movs	r1, #16
    db9a:	468c      	mov	ip, r1
    db9c:	44bc      	add	ip, r7
    db9e:	4463      	add	r3, ip
    dba0:	3201      	adds	r2, #1
    dba2:	701a      	strb	r2, [r3, #0]
    dba4:	4b74      	ldr	r3, [pc, #464]	; (dd78 <cal_angleYZ+0x8dc>)
    dba6:	2210      	movs	r2, #16
    dba8:	4694      	mov	ip, r2
    dbaa:	44bc      	add	ip, r7
    dbac:	4463      	add	r3, ip
    dbae:	781b      	ldrb	r3, [r3, #0]
    dbb0:	2b01      	cmp	r3, #1
    dbb2:	d800      	bhi.n	dbb6 <cal_angleYZ+0x71a>
    dbb4:	e705      	b.n	d9c2 <cal_angleYZ+0x526>
			}
		}
	}

	//  tempX2 = inverse(tempX1) = inv(X'*X);
	detX = tempX1[0][0]*tempX1[1][1]-(tempX1[0][1]*tempX1[1][0]);
    dbb6:	4b72      	ldr	r3, [pc, #456]	; (dd80 <cal_angleYZ+0x8e4>)
    dbb8:	22ab      	movs	r2, #171	; 0xab
    dbba:	00d2      	lsls	r2, r2, #3
    dbbc:	4694      	mov	ip, r2
    dbbe:	2210      	movs	r2, #16
    dbc0:	4690      	mov	r8, r2
    dbc2:	44b8      	add	r8, r7
    dbc4:	44c4      	add	ip, r8
    dbc6:	4463      	add	r3, ip
    dbc8:	681a      	ldr	r2, [r3, #0]
    dbca:	4b6d      	ldr	r3, [pc, #436]	; (dd80 <cal_angleYZ+0x8e4>)
    dbcc:	21ab      	movs	r1, #171	; 0xab
    dbce:	00c9      	lsls	r1, r1, #3
    dbd0:	468c      	mov	ip, r1
    dbd2:	2110      	movs	r1, #16
    dbd4:	4688      	mov	r8, r1
    dbd6:	44b8      	add	r8, r7
    dbd8:	44c4      	add	ip, r8
    dbda:	4463      	add	r3, ip
    dbdc:	68d9      	ldr	r1, [r3, #12]
    dbde:	4b6b      	ldr	r3, [pc, #428]	; (dd8c <cal_angleYZ+0x8f0>)
    dbe0:	1c10      	adds	r0, r2, #0
    dbe2:	4798      	blx	r3
    dbe4:	1c03      	adds	r3, r0, #0
    dbe6:	1c1c      	adds	r4, r3, #0
    dbe8:	4b65      	ldr	r3, [pc, #404]	; (dd80 <cal_angleYZ+0x8e4>)
    dbea:	22ab      	movs	r2, #171	; 0xab
    dbec:	00d2      	lsls	r2, r2, #3
    dbee:	4694      	mov	ip, r2
    dbf0:	2210      	movs	r2, #16
    dbf2:	4690      	mov	r8, r2
    dbf4:	44b8      	add	r8, r7
    dbf6:	44c4      	add	ip, r8
    dbf8:	4463      	add	r3, ip
    dbfa:	685a      	ldr	r2, [r3, #4]
    dbfc:	4b60      	ldr	r3, [pc, #384]	; (dd80 <cal_angleYZ+0x8e4>)
    dbfe:	21ab      	movs	r1, #171	; 0xab
    dc00:	00c9      	lsls	r1, r1, #3
    dc02:	468c      	mov	ip, r1
    dc04:	2110      	movs	r1, #16
    dc06:	4688      	mov	r8, r1
    dc08:	44b8      	add	r8, r7
    dc0a:	44c4      	add	ip, r8
    dc0c:	4463      	add	r3, ip
    dc0e:	6899      	ldr	r1, [r3, #8]
    dc10:	4b5e      	ldr	r3, [pc, #376]	; (dd8c <cal_angleYZ+0x8f0>)
    dc12:	1c10      	adds	r0, r2, #0
    dc14:	4798      	blx	r3
    dc16:	1c03      	adds	r3, r0, #0
    dc18:	1c1a      	adds	r2, r3, #0
    dc1a:	4b5f      	ldr	r3, [pc, #380]	; (dd98 <cal_angleYZ+0x8fc>)
    dc1c:	1c11      	adds	r1, r2, #0
    dc1e:	1c20      	adds	r0, r4, #0
    dc20:	4798      	blx	r3
    dc22:	1c03      	adds	r3, r0, #0
    dc24:	4a5d      	ldr	r2, [pc, #372]	; (dd9c <cal_angleYZ+0x900>)
    dc26:	2110      	movs	r1, #16
    dc28:	468c      	mov	ip, r1
    dc2a:	44bc      	add	ip, r7
    dc2c:	4462      	add	r2, ip
    dc2e:	6013      	str	r3, [r2, #0]
	tempX2[0][0] = tempX1[1][1]/detX;
    dc30:	4b53      	ldr	r3, [pc, #332]	; (dd80 <cal_angleYZ+0x8e4>)
    dc32:	22ab      	movs	r2, #171	; 0xab
    dc34:	00d2      	lsls	r2, r2, #3
    dc36:	4694      	mov	ip, r2
    dc38:	2210      	movs	r2, #16
    dc3a:	4690      	mov	r8, r2
    dc3c:	44b8      	add	r8, r7
    dc3e:	44c4      	add	ip, r8
    dc40:	4463      	add	r3, ip
    dc42:	68da      	ldr	r2, [r3, #12]
    dc44:	4b56      	ldr	r3, [pc, #344]	; (dda0 <cal_angleYZ+0x904>)
    dc46:	4955      	ldr	r1, [pc, #340]	; (dd9c <cal_angleYZ+0x900>)
    dc48:	2010      	movs	r0, #16
    dc4a:	4684      	mov	ip, r0
    dc4c:	44bc      	add	ip, r7
    dc4e:	4461      	add	r1, ip
    dc50:	6809      	ldr	r1, [r1, #0]
    dc52:	1c10      	adds	r0, r2, #0
    dc54:	4798      	blx	r3
    dc56:	1c03      	adds	r3, r0, #0
    dc58:	1c1a      	adds	r2, r3, #0
    dc5a:	4b52      	ldr	r3, [pc, #328]	; (dda4 <cal_angleYZ+0x908>)
    dc5c:	21ab      	movs	r1, #171	; 0xab
    dc5e:	00c9      	lsls	r1, r1, #3
    dc60:	468c      	mov	ip, r1
    dc62:	2110      	movs	r1, #16
    dc64:	4688      	mov	r8, r1
    dc66:	44b8      	add	r8, r7
    dc68:	44c4      	add	ip, r8
    dc6a:	4463      	add	r3, ip
    dc6c:	601a      	str	r2, [r3, #0]
	tempX2[1][1] = tempX1[0][0]/detX;
    dc6e:	4b44      	ldr	r3, [pc, #272]	; (dd80 <cal_angleYZ+0x8e4>)
    dc70:	22ab      	movs	r2, #171	; 0xab
    dc72:	00d2      	lsls	r2, r2, #3
    dc74:	4694      	mov	ip, r2
    dc76:	2210      	movs	r2, #16
    dc78:	4690      	mov	r8, r2
    dc7a:	44b8      	add	r8, r7
    dc7c:	44c4      	add	ip, r8
    dc7e:	4463      	add	r3, ip
    dc80:	681a      	ldr	r2, [r3, #0]
    dc82:	4b47      	ldr	r3, [pc, #284]	; (dda0 <cal_angleYZ+0x904>)
    dc84:	4945      	ldr	r1, [pc, #276]	; (dd9c <cal_angleYZ+0x900>)
    dc86:	2010      	movs	r0, #16
    dc88:	4684      	mov	ip, r0
    dc8a:	44bc      	add	ip, r7
    dc8c:	4461      	add	r1, ip
    dc8e:	6809      	ldr	r1, [r1, #0]
    dc90:	1c10      	adds	r0, r2, #0
    dc92:	4798      	blx	r3
    dc94:	1c03      	adds	r3, r0, #0
    dc96:	1c1a      	adds	r2, r3, #0
    dc98:	4b42      	ldr	r3, [pc, #264]	; (dda4 <cal_angleYZ+0x908>)
    dc9a:	21ab      	movs	r1, #171	; 0xab
    dc9c:	00c9      	lsls	r1, r1, #3
    dc9e:	468c      	mov	ip, r1
    dca0:	2110      	movs	r1, #16
    dca2:	4688      	mov	r8, r1
    dca4:	44b8      	add	r8, r7
    dca6:	44c4      	add	ip, r8
    dca8:	4463      	add	r3, ip
    dcaa:	60da      	str	r2, [r3, #12]
	tempX2[0][1] = -1*tempX1[1][0]/detX;
    dcac:	4b34      	ldr	r3, [pc, #208]	; (dd80 <cal_angleYZ+0x8e4>)
    dcae:	22ab      	movs	r2, #171	; 0xab
    dcb0:	00d2      	lsls	r2, r2, #3
    dcb2:	4694      	mov	ip, r2
    dcb4:	2210      	movs	r2, #16
    dcb6:	4690      	mov	r8, r2
    dcb8:	44b8      	add	r8, r7
    dcba:	44c4      	add	ip, r8
    dcbc:	4463      	add	r3, ip
    dcbe:	689b      	ldr	r3, [r3, #8]
    dcc0:	2280      	movs	r2, #128	; 0x80
    dcc2:	0612      	lsls	r2, r2, #24
    dcc4:	405a      	eors	r2, r3
    dcc6:	4b36      	ldr	r3, [pc, #216]	; (dda0 <cal_angleYZ+0x904>)
    dcc8:	4934      	ldr	r1, [pc, #208]	; (dd9c <cal_angleYZ+0x900>)
    dcca:	2010      	movs	r0, #16
    dccc:	4684      	mov	ip, r0
    dcce:	44bc      	add	ip, r7
    dcd0:	4461      	add	r1, ip
    dcd2:	6809      	ldr	r1, [r1, #0]
    dcd4:	1c10      	adds	r0, r2, #0
    dcd6:	4798      	blx	r3
    dcd8:	1c03      	adds	r3, r0, #0
    dcda:	1c1a      	adds	r2, r3, #0
    dcdc:	4b31      	ldr	r3, [pc, #196]	; (dda4 <cal_angleYZ+0x908>)
    dcde:	21ab      	movs	r1, #171	; 0xab
    dce0:	00c9      	lsls	r1, r1, #3
    dce2:	468c      	mov	ip, r1
    dce4:	2110      	movs	r1, #16
    dce6:	4688      	mov	r8, r1
    dce8:	44b8      	add	r8, r7
    dcea:	44c4      	add	ip, r8
    dcec:	4463      	add	r3, ip
    dcee:	605a      	str	r2, [r3, #4]
	tempX2[1][0] = -1*tempX1[0][1]/detX;
    dcf0:	4b23      	ldr	r3, [pc, #140]	; (dd80 <cal_angleYZ+0x8e4>)
    dcf2:	22ab      	movs	r2, #171	; 0xab
    dcf4:	00d2      	lsls	r2, r2, #3
    dcf6:	4694      	mov	ip, r2
    dcf8:	2210      	movs	r2, #16
    dcfa:	4690      	mov	r8, r2
    dcfc:	44b8      	add	r8, r7
    dcfe:	44c4      	add	ip, r8
    dd00:	4463      	add	r3, ip
    dd02:	685b      	ldr	r3, [r3, #4]
    dd04:	2280      	movs	r2, #128	; 0x80
    dd06:	0612      	lsls	r2, r2, #24
    dd08:	405a      	eors	r2, r3
    dd0a:	4b25      	ldr	r3, [pc, #148]	; (dda0 <cal_angleYZ+0x904>)
    dd0c:	4923      	ldr	r1, [pc, #140]	; (dd9c <cal_angleYZ+0x900>)
    dd0e:	2010      	movs	r0, #16
    dd10:	4684      	mov	ip, r0
    dd12:	44bc      	add	ip, r7
    dd14:	4461      	add	r1, ip
    dd16:	6809      	ldr	r1, [r1, #0]
    dd18:	1c10      	adds	r0, r2, #0
    dd1a:	4798      	blx	r3
    dd1c:	1c03      	adds	r3, r0, #0
    dd1e:	1c1a      	adds	r2, r3, #0
    dd20:	4b20      	ldr	r3, [pc, #128]	; (dda4 <cal_angleYZ+0x908>)
    dd22:	21ab      	movs	r1, #171	; 0xab
    dd24:	00c9      	lsls	r1, r1, #3
    dd26:	468c      	mov	ip, r1
    dd28:	2110      	movs	r1, #16
    dd2a:	4688      	mov	r8, r1
    dd2c:	44b8      	add	r8, r7
    dd2e:	44c4      	add	ip, r8
    dd30:	4463      	add	r3, ip
    dd32:	609a      	str	r2, [r3, #8]


	// tempX3 = X'*Y;
	for (i=0;i<2;i++){
    dd34:	4b10      	ldr	r3, [pc, #64]	; (dd78 <cal_angleYZ+0x8dc>)
    dd36:	2210      	movs	r2, #16
    dd38:	4694      	mov	ip, r2
    dd3a:	44bc      	add	ip, r7
    dd3c:	4463      	add	r3, ip
    dd3e:	2200      	movs	r2, #0
    dd40:	701a      	strb	r2, [r3, #0]
    dd42:	e0ae      	b.n	dea2 <cal_angleYZ+0xa06>
		tempX3[i] = 0;
    dd44:	4b0c      	ldr	r3, [pc, #48]	; (dd78 <cal_angleYZ+0x8dc>)
    dd46:	2210      	movs	r2, #16
    dd48:	4694      	mov	ip, r2
    dd4a:	44bc      	add	ip, r7
    dd4c:	4463      	add	r3, ip
    dd4e:	781a      	ldrb	r2, [r3, #0]
    dd50:	4b15      	ldr	r3, [pc, #84]	; (dda8 <cal_angleYZ+0x90c>)
    dd52:	21ab      	movs	r1, #171	; 0xab
    dd54:	00c9      	lsls	r1, r1, #3
    dd56:	468c      	mov	ip, r1
    dd58:	2110      	movs	r1, #16
    dd5a:	4688      	mov	r8, r1
    dd5c:	44b8      	add	r8, r7
    dd5e:	44c4      	add	ip, r8
    dd60:	4463      	add	r3, ip
    dd62:	0092      	lsls	r2, r2, #2
    dd64:	2100      	movs	r1, #0
    dd66:	50d1      	str	r1, [r2, r3]
		for (np=0;np<n_points;np++){
    dd68:	4b06      	ldr	r3, [pc, #24]	; (dd84 <cal_angleYZ+0x8e8>)
    dd6a:	2210      	movs	r2, #16
    dd6c:	4694      	mov	ip, r2
    dd6e:	44bc      	add	ip, r7
    dd70:	4463      	add	r3, ip
    dd72:	2200      	movs	r2, #0
    dd74:	701a      	strb	r2, [r3, #0]
    dd76:	e07d      	b.n	de74 <cal_angleYZ+0x9d8>
    dd78:	00000557 	.word	0x00000557
    dd7c:	00000556 	.word	0x00000556
    dd80:	fffffad4 	.word	0xfffffad4
    dd84:	00000554 	.word	0x00000554
    dd88:	fffffae4 	.word	0xfffffae4
    dd8c:	000217d9 	.word	0x000217d9
    dd90:	000210d5 	.word	0x000210d5
    dd94:	20002db4 	.word	0x20002db4
    dd98:	00021a19 	.word	0x00021a19
    dd9c:	0000053c 	.word	0x0000053c
    dda0:	000213f9 	.word	0x000213f9
    dda4:	fffffac4 	.word	0xfffffac4
    dda8:	fffffabc 	.word	0xfffffabc
			tempX3[i] = tempX3[i] + X[np][i]*x_ang_shift[np];
    ddac:	4bb1      	ldr	r3, [pc, #708]	; (e074 <cal_angleYZ+0xbd8>)
    ddae:	2210      	movs	r2, #16
    ddb0:	4694      	mov	ip, r2
    ddb2:	44bc      	add	ip, r7
    ddb4:	4463      	add	r3, ip
    ddb6:	781c      	ldrb	r4, [r3, #0]
    ddb8:	4bae      	ldr	r3, [pc, #696]	; (e074 <cal_angleYZ+0xbd8>)
    ddba:	2210      	movs	r2, #16
    ddbc:	4694      	mov	ip, r2
    ddbe:	44bc      	add	ip, r7
    ddc0:	4463      	add	r3, ip
    ddc2:	781a      	ldrb	r2, [r3, #0]
    ddc4:	4bac      	ldr	r3, [pc, #688]	; (e078 <cal_angleYZ+0xbdc>)
    ddc6:	21ab      	movs	r1, #171	; 0xab
    ddc8:	00c9      	lsls	r1, r1, #3
    ddca:	468c      	mov	ip, r1
    ddcc:	2110      	movs	r1, #16
    ddce:	4688      	mov	r8, r1
    ddd0:	44b8      	add	r8, r7
    ddd2:	44c4      	add	ip, r8
    ddd4:	4463      	add	r3, ip
    ddd6:	0092      	lsls	r2, r2, #2
    ddd8:	58d5      	ldr	r5, [r2, r3]
    ddda:	4ba8      	ldr	r3, [pc, #672]	; (e07c <cal_angleYZ+0xbe0>)
    dddc:	2210      	movs	r2, #16
    ddde:	4694      	mov	ip, r2
    dde0:	44bc      	add	ip, r7
    dde2:	4463      	add	r3, ip
    dde4:	7819      	ldrb	r1, [r3, #0]
    dde6:	4ba3      	ldr	r3, [pc, #652]	; (e074 <cal_angleYZ+0xbd8>)
    dde8:	2210      	movs	r2, #16
    ddea:	4694      	mov	ip, r2
    ddec:	44bc      	add	ip, r7
    ddee:	4463      	add	r3, ip
    ddf0:	781a      	ldrb	r2, [r3, #0]
    ddf2:	4ba3      	ldr	r3, [pc, #652]	; (e080 <cal_angleYZ+0xbe4>)
    ddf4:	20ab      	movs	r0, #171	; 0xab
    ddf6:	00c0      	lsls	r0, r0, #3
    ddf8:	4684      	mov	ip, r0
    ddfa:	2010      	movs	r0, #16
    ddfc:	4680      	mov	r8, r0
    ddfe:	44b8      	add	r8, r7
    de00:	44c4      	add	ip, r8
    de02:	4463      	add	r3, ip
    de04:	0049      	lsls	r1, r1, #1
    de06:	188a      	adds	r2, r1, r2
    de08:	0092      	lsls	r2, r2, #2
    de0a:	58d0      	ldr	r0, [r2, r3]
    de0c:	4b9b      	ldr	r3, [pc, #620]	; (e07c <cal_angleYZ+0xbe0>)
    de0e:	2210      	movs	r2, #16
    de10:	4694      	mov	ip, r2
    de12:	44bc      	add	ip, r7
    de14:	4463      	add	r3, ip
    de16:	781a      	ldrb	r2, [r3, #0]
    de18:	4b9a      	ldr	r3, [pc, #616]	; (e084 <cal_angleYZ+0xbe8>)
    de1a:	21ab      	movs	r1, #171	; 0xab
    de1c:	00c9      	lsls	r1, r1, #3
    de1e:	468c      	mov	ip, r1
    de20:	2110      	movs	r1, #16
    de22:	4688      	mov	r8, r1
    de24:	44b8      	add	r8, r7
    de26:	44c4      	add	ip, r8
    de28:	4463      	add	r3, ip
    de2a:	0092      	lsls	r2, r2, #2
    de2c:	58d2      	ldr	r2, [r2, r3]
    de2e:	4b96      	ldr	r3, [pc, #600]	; (e088 <cal_angleYZ+0xbec>)
    de30:	1c11      	adds	r1, r2, #0
    de32:	4798      	blx	r3
    de34:	1c03      	adds	r3, r0, #0
    de36:	1c1a      	adds	r2, r3, #0
    de38:	4b94      	ldr	r3, [pc, #592]	; (e08c <cal_angleYZ+0xbf0>)
    de3a:	1c11      	adds	r1, r2, #0
    de3c:	1c28      	adds	r0, r5, #0
    de3e:	4798      	blx	r3
    de40:	1c03      	adds	r3, r0, #0
    de42:	1c19      	adds	r1, r3, #0
    de44:	4b8c      	ldr	r3, [pc, #560]	; (e078 <cal_angleYZ+0xbdc>)
    de46:	22ab      	movs	r2, #171	; 0xab
    de48:	00d2      	lsls	r2, r2, #3
    de4a:	4694      	mov	ip, r2
    de4c:	2210      	movs	r2, #16
    de4e:	4690      	mov	r8, r2
    de50:	44b8      	add	r8, r7
    de52:	44c4      	add	ip, r8
    de54:	4463      	add	r3, ip
    de56:	00a2      	lsls	r2, r4, #2
    de58:	50d1      	str	r1, [r2, r3]
		for (np=0;np<n_points;np++){
    de5a:	4b88      	ldr	r3, [pc, #544]	; (e07c <cal_angleYZ+0xbe0>)
    de5c:	2210      	movs	r2, #16
    de5e:	4694      	mov	ip, r2
    de60:	44bc      	add	ip, r7
    de62:	4463      	add	r3, ip
    de64:	781a      	ldrb	r2, [r3, #0]
    de66:	4b85      	ldr	r3, [pc, #532]	; (e07c <cal_angleYZ+0xbe0>)
    de68:	2110      	movs	r1, #16
    de6a:	468c      	mov	ip, r1
    de6c:	44bc      	add	ip, r7
    de6e:	4463      	add	r3, ip
    de70:	3201      	adds	r2, #1
    de72:	701a      	strb	r2, [r3, #0]
    de74:	4b81      	ldr	r3, [pc, #516]	; (e07c <cal_angleYZ+0xbe0>)
    de76:	2210      	movs	r2, #16
    de78:	4694      	mov	ip, r2
    de7a:	44bc      	add	ip, r7
    de7c:	4463      	add	r3, ip
    de7e:	781a      	ldrb	r2, [r3, #0]
    de80:	4b83      	ldr	r3, [pc, #524]	; (e090 <cal_angleYZ+0xbf4>)
    de82:	681b      	ldr	r3, [r3, #0]
    de84:	429a      	cmp	r2, r3
    de86:	d391      	bcc.n	ddac <cal_angleYZ+0x910>
	for (i=0;i<2;i++){
    de88:	4b7a      	ldr	r3, [pc, #488]	; (e074 <cal_angleYZ+0xbd8>)
    de8a:	2210      	movs	r2, #16
    de8c:	4694      	mov	ip, r2
    de8e:	44bc      	add	ip, r7
    de90:	4463      	add	r3, ip
    de92:	781a      	ldrb	r2, [r3, #0]
    de94:	4b77      	ldr	r3, [pc, #476]	; (e074 <cal_angleYZ+0xbd8>)
    de96:	2110      	movs	r1, #16
    de98:	468c      	mov	ip, r1
    de9a:	44bc      	add	ip, r7
    de9c:	4463      	add	r3, ip
    de9e:	3201      	adds	r2, #1
    dea0:	701a      	strb	r2, [r3, #0]
    dea2:	4b74      	ldr	r3, [pc, #464]	; (e074 <cal_angleYZ+0xbd8>)
    dea4:	2210      	movs	r2, #16
    dea6:	4694      	mov	ip, r2
    dea8:	44bc      	add	ip, r7
    deaa:	4463      	add	r3, ip
    deac:	781b      	ldrb	r3, [r3, #0]
    deae:	2b01      	cmp	r3, #1
    deb0:	d800      	bhi.n	deb4 <cal_angleYZ+0xa18>
    deb2:	e747      	b.n	dd44 <cal_angleYZ+0x8a8>
		}
	}
	
	// B = inv(X'*X)*X'*Y = tempX2*tempX3
	for (i=0;i<2;i++){
    deb4:	4b6f      	ldr	r3, [pc, #444]	; (e074 <cal_angleYZ+0xbd8>)
    deb6:	2210      	movs	r2, #16
    deb8:	4694      	mov	ip, r2
    deba:	44bc      	add	ip, r7
    debc:	4463      	add	r3, ip
    debe:	2200      	movs	r2, #0
    dec0:	701a      	strb	r2, [r3, #0]
    dec2:	e092      	b.n	dfea <cal_angleYZ+0xb4e>
		B[i] = 0;
    dec4:	4b6b      	ldr	r3, [pc, #428]	; (e074 <cal_angleYZ+0xbd8>)
    dec6:	2210      	movs	r2, #16
    dec8:	4694      	mov	ip, r2
    deca:	44bc      	add	ip, r7
    decc:	4463      	add	r3, ip
    dece:	781a      	ldrb	r2, [r3, #0]
    ded0:	4b70      	ldr	r3, [pc, #448]	; (e094 <cal_angleYZ+0xbf8>)
    ded2:	21ab      	movs	r1, #171	; 0xab
    ded4:	00c9      	lsls	r1, r1, #3
    ded6:	468c      	mov	ip, r1
    ded8:	2110      	movs	r1, #16
    deda:	4688      	mov	r8, r1
    dedc:	44b8      	add	r8, r7
    dede:	44c4      	add	ip, r8
    dee0:	4463      	add	r3, ip
    dee2:	0092      	lsls	r2, r2, #2
    dee4:	2100      	movs	r1, #0
    dee6:	50d1      	str	r1, [r2, r3]
		for (j=0;j<2;j++){
    dee8:	4b6b      	ldr	r3, [pc, #428]	; (e098 <cal_angleYZ+0xbfc>)
    deea:	2210      	movs	r2, #16
    deec:	4694      	mov	ip, r2
    deee:	44bc      	add	ip, r7
    def0:	4463      	add	r3, ip
    def2:	2200      	movs	r2, #0
    def4:	701a      	strb	r2, [r3, #0]
    def6:	e063      	b.n	dfc0 <cal_angleYZ+0xb24>
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
    def8:	4b5e      	ldr	r3, [pc, #376]	; (e074 <cal_angleYZ+0xbd8>)
    defa:	2210      	movs	r2, #16
    defc:	4694      	mov	ip, r2
    defe:	44bc      	add	ip, r7
    df00:	4463      	add	r3, ip
    df02:	781c      	ldrb	r4, [r3, #0]
    df04:	4b5b      	ldr	r3, [pc, #364]	; (e074 <cal_angleYZ+0xbd8>)
    df06:	2210      	movs	r2, #16
    df08:	4694      	mov	ip, r2
    df0a:	44bc      	add	ip, r7
    df0c:	4463      	add	r3, ip
    df0e:	781a      	ldrb	r2, [r3, #0]
    df10:	4b60      	ldr	r3, [pc, #384]	; (e094 <cal_angleYZ+0xbf8>)
    df12:	21ab      	movs	r1, #171	; 0xab
    df14:	00c9      	lsls	r1, r1, #3
    df16:	468c      	mov	ip, r1
    df18:	2110      	movs	r1, #16
    df1a:	4688      	mov	r8, r1
    df1c:	44b8      	add	r8, r7
    df1e:	44c4      	add	ip, r8
    df20:	4463      	add	r3, ip
    df22:	0092      	lsls	r2, r2, #2
    df24:	58d5      	ldr	r5, [r2, r3]
    df26:	4b53      	ldr	r3, [pc, #332]	; (e074 <cal_angleYZ+0xbd8>)
    df28:	2210      	movs	r2, #16
    df2a:	4694      	mov	ip, r2
    df2c:	44bc      	add	ip, r7
    df2e:	4463      	add	r3, ip
    df30:	7819      	ldrb	r1, [r3, #0]
    df32:	4b59      	ldr	r3, [pc, #356]	; (e098 <cal_angleYZ+0xbfc>)
    df34:	2210      	movs	r2, #16
    df36:	4694      	mov	ip, r2
    df38:	44bc      	add	ip, r7
    df3a:	4463      	add	r3, ip
    df3c:	781a      	ldrb	r2, [r3, #0]
    df3e:	4b57      	ldr	r3, [pc, #348]	; (e09c <cal_angleYZ+0xc00>)
    df40:	20ab      	movs	r0, #171	; 0xab
    df42:	00c0      	lsls	r0, r0, #3
    df44:	4684      	mov	ip, r0
    df46:	2010      	movs	r0, #16
    df48:	4680      	mov	r8, r0
    df4a:	44b8      	add	r8, r7
    df4c:	44c4      	add	ip, r8
    df4e:	4463      	add	r3, ip
    df50:	0049      	lsls	r1, r1, #1
    df52:	188a      	adds	r2, r1, r2
    df54:	0092      	lsls	r2, r2, #2
    df56:	58d0      	ldr	r0, [r2, r3]
    df58:	4b4f      	ldr	r3, [pc, #316]	; (e098 <cal_angleYZ+0xbfc>)
    df5a:	2210      	movs	r2, #16
    df5c:	4694      	mov	ip, r2
    df5e:	44bc      	add	ip, r7
    df60:	4463      	add	r3, ip
    df62:	781a      	ldrb	r2, [r3, #0]
    df64:	4b44      	ldr	r3, [pc, #272]	; (e078 <cal_angleYZ+0xbdc>)
    df66:	21ab      	movs	r1, #171	; 0xab
    df68:	00c9      	lsls	r1, r1, #3
    df6a:	468c      	mov	ip, r1
    df6c:	2110      	movs	r1, #16
    df6e:	4688      	mov	r8, r1
    df70:	44b8      	add	r8, r7
    df72:	44c4      	add	ip, r8
    df74:	4463      	add	r3, ip
    df76:	0092      	lsls	r2, r2, #2
    df78:	58d2      	ldr	r2, [r2, r3]
    df7a:	4b43      	ldr	r3, [pc, #268]	; (e088 <cal_angleYZ+0xbec>)
    df7c:	1c11      	adds	r1, r2, #0
    df7e:	4798      	blx	r3
    df80:	1c03      	adds	r3, r0, #0
    df82:	1c1a      	adds	r2, r3, #0
    df84:	4b41      	ldr	r3, [pc, #260]	; (e08c <cal_angleYZ+0xbf0>)
    df86:	1c11      	adds	r1, r2, #0
    df88:	1c28      	adds	r0, r5, #0
    df8a:	4798      	blx	r3
    df8c:	1c03      	adds	r3, r0, #0
    df8e:	1c19      	adds	r1, r3, #0
    df90:	4b40      	ldr	r3, [pc, #256]	; (e094 <cal_angleYZ+0xbf8>)
    df92:	22ab      	movs	r2, #171	; 0xab
    df94:	00d2      	lsls	r2, r2, #3
    df96:	4694      	mov	ip, r2
    df98:	2210      	movs	r2, #16
    df9a:	4690      	mov	r8, r2
    df9c:	44b8      	add	r8, r7
    df9e:	44c4      	add	ip, r8
    dfa0:	4463      	add	r3, ip
    dfa2:	00a2      	lsls	r2, r4, #2
    dfa4:	50d1      	str	r1, [r2, r3]
		for (j=0;j<2;j++){
    dfa6:	4b3c      	ldr	r3, [pc, #240]	; (e098 <cal_angleYZ+0xbfc>)
    dfa8:	2210      	movs	r2, #16
    dfaa:	4694      	mov	ip, r2
    dfac:	44bc      	add	ip, r7
    dfae:	4463      	add	r3, ip
    dfb0:	781a      	ldrb	r2, [r3, #0]
    dfb2:	4b39      	ldr	r3, [pc, #228]	; (e098 <cal_angleYZ+0xbfc>)
    dfb4:	2110      	movs	r1, #16
    dfb6:	468c      	mov	ip, r1
    dfb8:	44bc      	add	ip, r7
    dfba:	4463      	add	r3, ip
    dfbc:	3201      	adds	r2, #1
    dfbe:	701a      	strb	r2, [r3, #0]
    dfc0:	4b35      	ldr	r3, [pc, #212]	; (e098 <cal_angleYZ+0xbfc>)
    dfc2:	2210      	movs	r2, #16
    dfc4:	4694      	mov	ip, r2
    dfc6:	44bc      	add	ip, r7
    dfc8:	4463      	add	r3, ip
    dfca:	781b      	ldrb	r3, [r3, #0]
    dfcc:	2b01      	cmp	r3, #1
    dfce:	d993      	bls.n	def8 <cal_angleYZ+0xa5c>
	for (i=0;i<2;i++){
    dfd0:	4b28      	ldr	r3, [pc, #160]	; (e074 <cal_angleYZ+0xbd8>)
    dfd2:	2210      	movs	r2, #16
    dfd4:	4694      	mov	ip, r2
    dfd6:	44bc      	add	ip, r7
    dfd8:	4463      	add	r3, ip
    dfda:	781a      	ldrb	r2, [r3, #0]
    dfdc:	4b25      	ldr	r3, [pc, #148]	; (e074 <cal_angleYZ+0xbd8>)
    dfde:	2110      	movs	r1, #16
    dfe0:	468c      	mov	ip, r1
    dfe2:	44bc      	add	ip, r7
    dfe4:	4463      	add	r3, ip
    dfe6:	3201      	adds	r2, #1
    dfe8:	701a      	strb	r2, [r3, #0]
    dfea:	4b22      	ldr	r3, [pc, #136]	; (e074 <cal_angleYZ+0xbd8>)
    dfec:	2210      	movs	r2, #16
    dfee:	4694      	mov	ip, r2
    dff0:	44bc      	add	ip, r7
    dff2:	4463      	add	r3, ip
    dff4:	781b      	ldrb	r3, [r3, #0]
    dff6:	2b01      	cmp	r3, #1
    dff8:	d800      	bhi.n	dffc <cal_angleYZ+0xb60>
    dffa:	e763      	b.n	dec4 <cal_angleYZ+0xa28>
		
	}
	
	
	// Update calibration structure
	cal_struct->thetaY = B[0];
    dffc:	4b25      	ldr	r3, [pc, #148]	; (e094 <cal_angleYZ+0xbf8>)
    dffe:	22ab      	movs	r2, #171	; 0xab
    e000:	00d2      	lsls	r2, r2, #3
    e002:	4694      	mov	ip, r2
    e004:	2210      	movs	r2, #16
    e006:	4690      	mov	r8, r2
    e008:	44b8      	add	r8, r7
    e00a:	44c4      	add	ip, r8
    e00c:	4463      	add	r3, ip
    e00e:	681a      	ldr	r2, [r3, #0]
    e010:	693b      	ldr	r3, [r7, #16]
    e012:	62da      	str	r2, [r3, #44]	; 0x2c
	cal_struct->thetaZ = -1*B[1];
    e014:	4b1f      	ldr	r3, [pc, #124]	; (e094 <cal_angleYZ+0xbf8>)
    e016:	22ab      	movs	r2, #171	; 0xab
    e018:	00d2      	lsls	r2, r2, #3
    e01a:	4694      	mov	ip, r2
    e01c:	2210      	movs	r2, #16
    e01e:	4690      	mov	r8, r2
    e020:	44b8      	add	r8, r7
    e022:	44c4      	add	ip, r8
    e024:	4463      	add	r3, ip
    e026:	685b      	ldr	r3, [r3, #4]
    e028:	2280      	movs	r2, #128	; 0x80
    e02a:	0612      	lsls	r2, r2, #24
    e02c:	405a      	eors	r2, r3
    e02e:	693b      	ldr	r3, [r7, #16]
    e030:	631a      	str	r2, [r3, #48]	; 0x30
	
	// Create rotation matrix
	gen_RotM(cal_struct);
    e032:	693b      	ldr	r3, [r7, #16]
    e034:	0018      	movs	r0, r3
    e036:	4b1a      	ldr	r3, [pc, #104]	; (e0a0 <cal_angleYZ+0xc04>)
    e038:	4798      	blx	r3

	
	// Find standard deviation of result
	B1_init = cal_struct->thetaY;
    e03a:	693b      	ldr	r3, [r7, #16]
    e03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e03e:	4a19      	ldr	r2, [pc, #100]	; (e0a4 <cal_angleYZ+0xc08>)
    e040:	2110      	movs	r1, #16
    e042:	468c      	mov	ip, r1
    e044:	44bc      	add	ip, r7
    e046:	4462      	add	r2, ip
    e048:	6013      	str	r3, [r2, #0]
	B2_init = -1*cal_struct->thetaZ;
    e04a:	693b      	ldr	r3, [r7, #16]
    e04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    e04e:	2280      	movs	r2, #128	; 0x80
    e050:	0612      	lsls	r2, r2, #24
    e052:	4053      	eors	r3, r2
    e054:	22a9      	movs	r2, #169	; 0xa9
    e056:	00d2      	lsls	r2, r2, #3
    e058:	2110      	movs	r1, #16
    e05a:	468c      	mov	ip, r1
    e05c:	44bc      	add	ip, r7
    e05e:	4462      	add	r2, ip
    e060:	6013      	str	r3, [r2, #0]
	
	for (np=0;np<n_points;np++){
    e062:	4b06      	ldr	r3, [pc, #24]	; (e07c <cal_angleYZ+0xbe0>)
    e064:	2210      	movs	r2, #16
    e066:	4694      	mov	ip, r2
    e068:	44bc      	add	ip, r7
    e06a:	4463      	add	r3, ip
    e06c:	2200      	movs	r2, #0
    e06e:	701a      	strb	r2, [r3, #0]
    e070:	e0ca      	b.n	e208 <cal_angleYZ+0xd6c>
    e072:	46c0      	nop			; (mov r8, r8)
    e074:	00000557 	.word	0x00000557
    e078:	fffffabc 	.word	0xfffffabc
    e07c:	00000554 	.word	0x00000554
    e080:	fffffae4 	.word	0xfffffae4
    e084:	fffffd64 	.word	0xfffffd64
    e088:	000217d9 	.word	0x000217d9
    e08c:	000210d5 	.word	0x000210d5
    e090:	20002db4 	.word	0x20002db4
    e094:	fffffab4 	.word	0xfffffab4
    e098:	00000556 	.word	0x00000556
    e09c:	fffffac4 	.word	0xfffffac4
    e0a0:	0000e4b1 	.word	0x0000e4b1
    e0a4:	0000054c 	.word	0x0000054c
		x_ang_shift[np] = x_ang_shift[np]
    e0a8:	4b68      	ldr	r3, [pc, #416]	; (e24c <cal_angleYZ+0xdb0>)
    e0aa:	2210      	movs	r2, #16
    e0ac:	4694      	mov	ip, r2
    e0ae:	44bc      	add	ip, r7
    e0b0:	4463      	add	r3, ip
    e0b2:	781c      	ldrb	r4, [r3, #0]
    e0b4:	4b65      	ldr	r3, [pc, #404]	; (e24c <cal_angleYZ+0xdb0>)
    e0b6:	2210      	movs	r2, #16
    e0b8:	4694      	mov	ip, r2
    e0ba:	44bc      	add	ip, r7
    e0bc:	4463      	add	r3, ip
    e0be:	781a      	ldrb	r2, [r3, #0]
    e0c0:	4b63      	ldr	r3, [pc, #396]	; (e250 <cal_angleYZ+0xdb4>)
    e0c2:	21ab      	movs	r1, #171	; 0xab
    e0c4:	00c9      	lsls	r1, r1, #3
    e0c6:	468c      	mov	ip, r1
    e0c8:	2110      	movs	r1, #16
    e0ca:	4688      	mov	r8, r1
    e0cc:	44b8      	add	r8, r7
    e0ce:	44c4      	add	ip, r8
    e0d0:	4463      	add	r3, ip
    e0d2:	0092      	lsls	r2, r2, #2
    e0d4:	58d2      	ldr	r2, [r2, r3]
    e0d6:	4b5f      	ldr	r3, [pc, #380]	; (e254 <cal_angleYZ+0xdb8>)
    e0d8:	1c10      	adds	r0, r2, #0
    e0da:	4798      	blx	r3
    e0dc:	60b8      	str	r0, [r7, #8]
    e0de:	60f9      	str	r1, [r7, #12]
		- B1_init*cos(deg2rad*roll_ang[np])
    e0e0:	4b5c      	ldr	r3, [pc, #368]	; (e254 <cal_angleYZ+0xdb8>)
    e0e2:	4a5d      	ldr	r2, [pc, #372]	; (e258 <cal_angleYZ+0xdbc>)
    e0e4:	2110      	movs	r1, #16
    e0e6:	468c      	mov	ip, r1
    e0e8:	44bc      	add	ip, r7
    e0ea:	4462      	add	r2, ip
    e0ec:	6810      	ldr	r0, [r2, #0]
    e0ee:	4798      	blx	r3
    e0f0:	6038      	str	r0, [r7, #0]
    e0f2:	6079      	str	r1, [r7, #4]
    e0f4:	4b55      	ldr	r3, [pc, #340]	; (e24c <cal_angleYZ+0xdb0>)
    e0f6:	2210      	movs	r2, #16
    e0f8:	4694      	mov	ip, r2
    e0fa:	44bc      	add	ip, r7
    e0fc:	4463      	add	r3, ip
    e0fe:	781a      	ldrb	r2, [r3, #0]
    e100:	4b56      	ldr	r3, [pc, #344]	; (e25c <cal_angleYZ+0xdc0>)
    e102:	21ab      	movs	r1, #171	; 0xab
    e104:	00c9      	lsls	r1, r1, #3
    e106:	468c      	mov	ip, r1
    e108:	2110      	movs	r1, #16
    e10a:	4688      	mov	r8, r1
    e10c:	44b8      	add	r8, r7
    e10e:	44c4      	add	ip, r8
    e110:	4463      	add	r3, ip
    e112:	0092      	lsls	r2, r2, #2
    e114:	58d2      	ldr	r2, [r2, r3]
    e116:	4b52      	ldr	r3, [pc, #328]	; (e260 <cal_angleYZ+0xdc4>)
    e118:	6819      	ldr	r1, [r3, #0]
    e11a:	4b52      	ldr	r3, [pc, #328]	; (e264 <cal_angleYZ+0xdc8>)
    e11c:	1c10      	adds	r0, r2, #0
    e11e:	4798      	blx	r3
    e120:	1c03      	adds	r3, r0, #0
    e122:	1c1a      	adds	r2, r3, #0
    e124:	4b4b      	ldr	r3, [pc, #300]	; (e254 <cal_angleYZ+0xdb8>)
    e126:	1c10      	adds	r0, r2, #0
    e128:	4798      	blx	r3
    e12a:	0002      	movs	r2, r0
    e12c:	000b      	movs	r3, r1
    e12e:	0010      	movs	r0, r2
    e130:	0019      	movs	r1, r3
    e132:	4b4d      	ldr	r3, [pc, #308]	; (e268 <cal_angleYZ+0xdcc>)
    e134:	4798      	blx	r3
    e136:	0002      	movs	r2, r0
    e138:	000b      	movs	r3, r1
    e13a:	4d4c      	ldr	r5, [pc, #304]	; (e26c <cal_angleYZ+0xdd0>)
    e13c:	6838      	ldr	r0, [r7, #0]
    e13e:	6879      	ldr	r1, [r7, #4]
    e140:	47a8      	blx	r5
    e142:	0002      	movs	r2, r0
    e144:	000b      	movs	r3, r1
    e146:	4d4a      	ldr	r5, [pc, #296]	; (e270 <cal_angleYZ+0xdd4>)
    e148:	68b8      	ldr	r0, [r7, #8]
    e14a:	68f9      	ldr	r1, [r7, #12]
    e14c:	47a8      	blx	r5
    e14e:	0002      	movs	r2, r0
    e150:	000b      	movs	r3, r1
    e152:	60ba      	str	r2, [r7, #8]
    e154:	60fb      	str	r3, [r7, #12]
		- B2_init*sin(deg2rad*roll_ang[np]);
    e156:	4b3f      	ldr	r3, [pc, #252]	; (e254 <cal_angleYZ+0xdb8>)
    e158:	21a9      	movs	r1, #169	; 0xa9
    e15a:	00c9      	lsls	r1, r1, #3
    e15c:	2210      	movs	r2, #16
    e15e:	4694      	mov	ip, r2
    e160:	44bc      	add	ip, r7
    e162:	4461      	add	r1, ip
    e164:	6808      	ldr	r0, [r1, #0]
    e166:	4798      	blx	r3
    e168:	6038      	str	r0, [r7, #0]
    e16a:	6079      	str	r1, [r7, #4]
    e16c:	4b37      	ldr	r3, [pc, #220]	; (e24c <cal_angleYZ+0xdb0>)
    e16e:	2210      	movs	r2, #16
    e170:	4694      	mov	ip, r2
    e172:	44bc      	add	ip, r7
    e174:	4463      	add	r3, ip
    e176:	781a      	ldrb	r2, [r3, #0]
    e178:	4b38      	ldr	r3, [pc, #224]	; (e25c <cal_angleYZ+0xdc0>)
    e17a:	21ab      	movs	r1, #171	; 0xab
    e17c:	00c9      	lsls	r1, r1, #3
    e17e:	468c      	mov	ip, r1
    e180:	2110      	movs	r1, #16
    e182:	4688      	mov	r8, r1
    e184:	44b8      	add	r8, r7
    e186:	44c4      	add	ip, r8
    e188:	4463      	add	r3, ip
    e18a:	0092      	lsls	r2, r2, #2
    e18c:	58d2      	ldr	r2, [r2, r3]
    e18e:	4b34      	ldr	r3, [pc, #208]	; (e260 <cal_angleYZ+0xdc4>)
    e190:	6819      	ldr	r1, [r3, #0]
    e192:	4b34      	ldr	r3, [pc, #208]	; (e264 <cal_angleYZ+0xdc8>)
    e194:	1c10      	adds	r0, r2, #0
    e196:	4798      	blx	r3
    e198:	1c03      	adds	r3, r0, #0
    e19a:	1c1a      	adds	r2, r3, #0
    e19c:	4b2d      	ldr	r3, [pc, #180]	; (e254 <cal_angleYZ+0xdb8>)
    e19e:	1c10      	adds	r0, r2, #0
    e1a0:	4798      	blx	r3
    e1a2:	0002      	movs	r2, r0
    e1a4:	000b      	movs	r3, r1
    e1a6:	0010      	movs	r0, r2
    e1a8:	0019      	movs	r1, r3
    e1aa:	4b32      	ldr	r3, [pc, #200]	; (e274 <cal_angleYZ+0xdd8>)
    e1ac:	4798      	blx	r3
    e1ae:	0002      	movs	r2, r0
    e1b0:	000b      	movs	r3, r1
    e1b2:	4d2e      	ldr	r5, [pc, #184]	; (e26c <cal_angleYZ+0xdd0>)
    e1b4:	6838      	ldr	r0, [r7, #0]
    e1b6:	6879      	ldr	r1, [r7, #4]
    e1b8:	47a8      	blx	r5
    e1ba:	0002      	movs	r2, r0
    e1bc:	000b      	movs	r3, r1
    e1be:	4d2c      	ldr	r5, [pc, #176]	; (e270 <cal_angleYZ+0xdd4>)
    e1c0:	68b8      	ldr	r0, [r7, #8]
    e1c2:	68f9      	ldr	r1, [r7, #12]
    e1c4:	47a8      	blx	r5
    e1c6:	0002      	movs	r2, r0
    e1c8:	000b      	movs	r3, r1
    e1ca:	0011      	movs	r1, r2
    e1cc:	001a      	movs	r2, r3
    e1ce:	4b2a      	ldr	r3, [pc, #168]	; (e278 <cal_angleYZ+0xddc>)
    e1d0:	0008      	movs	r0, r1
    e1d2:	0011      	movs	r1, r2
    e1d4:	4798      	blx	r3
    e1d6:	1c01      	adds	r1, r0, #0
		x_ang_shift[np] = x_ang_shift[np]
    e1d8:	4b1d      	ldr	r3, [pc, #116]	; (e250 <cal_angleYZ+0xdb4>)
    e1da:	22ab      	movs	r2, #171	; 0xab
    e1dc:	00d2      	lsls	r2, r2, #3
    e1de:	4694      	mov	ip, r2
    e1e0:	2210      	movs	r2, #16
    e1e2:	4690      	mov	r8, r2
    e1e4:	44b8      	add	r8, r7
    e1e6:	44c4      	add	ip, r8
    e1e8:	4463      	add	r3, ip
    e1ea:	00a2      	lsls	r2, r4, #2
    e1ec:	50d1      	str	r1, [r2, r3]
	for (np=0;np<n_points;np++){
    e1ee:	4b17      	ldr	r3, [pc, #92]	; (e24c <cal_angleYZ+0xdb0>)
    e1f0:	2210      	movs	r2, #16
    e1f2:	4694      	mov	ip, r2
    e1f4:	44bc      	add	ip, r7
    e1f6:	4463      	add	r3, ip
    e1f8:	781a      	ldrb	r2, [r3, #0]
    e1fa:	4b14      	ldr	r3, [pc, #80]	; (e24c <cal_angleYZ+0xdb0>)
    e1fc:	2110      	movs	r1, #16
    e1fe:	468c      	mov	ip, r1
    e200:	44bc      	add	ip, r7
    e202:	4463      	add	r3, ip
    e204:	3201      	adds	r2, #1
    e206:	701a      	strb	r2, [r3, #0]
    e208:	4b10      	ldr	r3, [pc, #64]	; (e24c <cal_angleYZ+0xdb0>)
    e20a:	2210      	movs	r2, #16
    e20c:	4694      	mov	ip, r2
    e20e:	44bc      	add	ip, r7
    e210:	4463      	add	r3, ip
    e212:	781a      	ldrb	r2, [r3, #0]
    e214:	4b19      	ldr	r3, [pc, #100]	; (e27c <cal_angleYZ+0xde0>)
    e216:	681b      	ldr	r3, [r3, #0]
    e218:	429a      	cmp	r2, r3
    e21a:	d200      	bcs.n	e21e <cal_angleYZ+0xd82>
    e21c:	e744      	b.n	e0a8 <cal_angleYZ+0xc0c>
	}
	cal_struct->angle_stdev = stdev(x_ang_shift,n_points);
    e21e:	4b17      	ldr	r3, [pc, #92]	; (e27c <cal_angleYZ+0xde0>)
    e220:	681a      	ldr	r2, [r3, #0]
    e222:	23af      	movs	r3, #175	; 0xaf
    e224:	009b      	lsls	r3, r3, #2
    e226:	2110      	movs	r1, #16
    e228:	468c      	mov	ip, r1
    e22a:	44bc      	add	ip, r7
    e22c:	4463      	add	r3, ip
    e22e:	0011      	movs	r1, r2
    e230:	0018      	movs	r0, r3
    e232:	4b13      	ldr	r3, [pc, #76]	; (e280 <cal_angleYZ+0xde4>)
    e234:	4798      	blx	r3
    e236:	1c02      	adds	r2, r0, #0
    e238:	693b      	ldr	r3, [r7, #16]
    e23a:	65da      	str	r2, [r3, #92]	; 0x5c
	
}
    e23c:	46c0      	nop			; (mov r8, r8)
    e23e:	46bd      	mov	sp, r7
    e240:	4b10      	ldr	r3, [pc, #64]	; (e284 <cal_angleYZ+0xde8>)
    e242:	449d      	add	sp, r3
    e244:	bc0c      	pop	{r2, r3}
    e246:	4690      	mov	r8, r2
    e248:	4699      	mov	r9, r3
    e24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e24c:	00000554 	.word	0x00000554
    e250:	fffffd64 	.word	0xfffffd64
    e254:	00023a0d 	.word	0x00023a0d
    e258:	0000054c 	.word	0x0000054c
    e25c:	fffffea4 	.word	0xfffffea4
    e260:	00028d68 	.word	0x00028d68
    e264:	000217d9 	.word	0x000217d9
    e268:	0001e169 	.word	0x0001e169
    e26c:	00022d45 	.word	0x00022d45
    e270:	00023245 	.word	0x00023245
    e274:	0001e325 	.word	0x0001e325
    e278:	00023ab1 	.word	0x00023ab1
    e27c:	20002db4 	.word	0x20002db4
    e280:	0000c81d 	.word	0x0000c81d
    e284:	0000056c 	.word	0x0000056c

0000e288 <cal_apply_cal>:




void cal_apply_cal(float uncalXYZ[3], float calXYZ[3], struct INST_CAL *cal_struct){
    e288:	b5b0      	push	{r4, r5, r7, lr}
    e28a:	b086      	sub	sp, #24
    e28c:	af00      	add	r7, sp, #0
    e28e:	60f8      	str	r0, [r7, #12]
    e290:	60b9      	str	r1, [r7, #8]
    e292:	607a      	str	r2, [r7, #4]
	uint8_t i;
	
	//  Apply gain and offset calibration
	for (i=0;i<3;i++){
    e294:	2317      	movs	r3, #23
    e296:	18fb      	adds	r3, r7, r3
    e298:	2200      	movs	r2, #0
    e29a:	701a      	strb	r2, [r3, #0]
    e29c:	e039      	b.n	e312 <cal_apply_cal+0x8a>
		//  Subtract Offset
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
    e29e:	2317      	movs	r3, #23
    e2a0:	18fb      	adds	r3, r7, r3
    e2a2:	781b      	ldrb	r3, [r3, #0]
    e2a4:	009b      	lsls	r3, r3, #2
    e2a6:	68ba      	ldr	r2, [r7, #8]
    e2a8:	18d4      	adds	r4, r2, r3
    e2aa:	2317      	movs	r3, #23
    e2ac:	18fb      	adds	r3, r7, r3
    e2ae:	781b      	ldrb	r3, [r3, #0]
    e2b0:	009b      	lsls	r3, r3, #2
    e2b2:	68fa      	ldr	r2, [r7, #12]
    e2b4:	18d3      	adds	r3, r2, r3
    e2b6:	6818      	ldr	r0, [r3, #0]
    e2b8:	2317      	movs	r3, #23
    e2ba:	18fb      	adds	r3, r7, r3
    e2bc:	781b      	ldrb	r3, [r3, #0]
    e2be:	687a      	ldr	r2, [r7, #4]
    e2c0:	009b      	lsls	r3, r3, #2
    e2c2:	18d3      	adds	r3, r2, r3
    e2c4:	3304      	adds	r3, #4
    e2c6:	681a      	ldr	r2, [r3, #0]
    e2c8:	4b36      	ldr	r3, [pc, #216]	; (e3a4 <cal_apply_cal+0x11c>)
    e2ca:	1c11      	adds	r1, r2, #0
    e2cc:	4798      	blx	r3
    e2ce:	1c03      	adds	r3, r0, #0
    e2d0:	6023      	str	r3, [r4, #0]
		//  Divide by Gain
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
    e2d2:	2317      	movs	r3, #23
    e2d4:	18fb      	adds	r3, r7, r3
    e2d6:	781b      	ldrb	r3, [r3, #0]
    e2d8:	009b      	lsls	r3, r3, #2
    e2da:	68ba      	ldr	r2, [r7, #8]
    e2dc:	18d4      	adds	r4, r2, r3
    e2de:	2317      	movs	r3, #23
    e2e0:	18fb      	adds	r3, r7, r3
    e2e2:	781b      	ldrb	r3, [r3, #0]
    e2e4:	009b      	lsls	r3, r3, #2
    e2e6:	68ba      	ldr	r2, [r7, #8]
    e2e8:	18d3      	adds	r3, r2, r3
    e2ea:	6818      	ldr	r0, [r3, #0]
    e2ec:	2317      	movs	r3, #23
    e2ee:	18fb      	adds	r3, r7, r3
    e2f0:	781a      	ldrb	r2, [r3, #0]
    e2f2:	687b      	ldr	r3, [r7, #4]
    e2f4:	3204      	adds	r2, #4
    e2f6:	0092      	lsls	r2, r2, #2
    e2f8:	58d2      	ldr	r2, [r2, r3]
    e2fa:	4b2b      	ldr	r3, [pc, #172]	; (e3a8 <cal_apply_cal+0x120>)
    e2fc:	1c11      	adds	r1, r2, #0
    e2fe:	4798      	blx	r3
    e300:	1c03      	adds	r3, r0, #0
    e302:	6023      	str	r3, [r4, #0]
	for (i=0;i<3;i++){
    e304:	2317      	movs	r3, #23
    e306:	18fb      	adds	r3, r7, r3
    e308:	781a      	ldrb	r2, [r3, #0]
    e30a:	2317      	movs	r3, #23
    e30c:	18fb      	adds	r3, r7, r3
    e30e:	3201      	adds	r2, #1
    e310:	701a      	strb	r2, [r3, #0]
    e312:	2317      	movs	r3, #23
    e314:	18fb      	adds	r3, r7, r3
    e316:	781b      	ldrb	r3, [r3, #0]
    e318:	2b02      	cmp	r3, #2
    e31a:	d9c0      	bls.n	e29e <cal_apply_cal+0x16>
	}
	//  Apply axis misalignments
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
    e31c:	68bb      	ldr	r3, [r7, #8]
    e31e:	1d1c      	adds	r4, r3, #4
    e320:	68bb      	ldr	r3, [r7, #8]
    e322:	3304      	adds	r3, #4
    e324:	681d      	ldr	r5, [r3, #0]
    e326:	68bb      	ldr	r3, [r7, #8]
    e328:	681a      	ldr	r2, [r3, #0]
    e32a:	687b      	ldr	r3, [r7, #4]
    e32c:	69d9      	ldr	r1, [r3, #28]
    e32e:	4b1f      	ldr	r3, [pc, #124]	; (e3ac <cal_apply_cal+0x124>)
    e330:	1c10      	adds	r0, r2, #0
    e332:	4798      	blx	r3
    e334:	1c03      	adds	r3, r0, #0
    e336:	1c1a      	adds	r2, r3, #0
    e338:	4b1d      	ldr	r3, [pc, #116]	; (e3b0 <cal_apply_cal+0x128>)
    e33a:	1c11      	adds	r1, r2, #0
    e33c:	1c28      	adds	r0, r5, #0
    e33e:	4798      	blx	r3
    e340:	1c03      	adds	r3, r0, #0
    e342:	6023      	str	r3, [r4, #0]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
    e344:	68bb      	ldr	r3, [r7, #8]
    e346:	3308      	adds	r3, #8
    e348:	001c      	movs	r4, r3
    e34a:	68bb      	ldr	r3, [r7, #8]
    e34c:	3308      	adds	r3, #8
    e34e:	681d      	ldr	r5, [r3, #0]
    e350:	68bb      	ldr	r3, [r7, #8]
    e352:	3304      	adds	r3, #4
    e354:	681a      	ldr	r2, [r3, #0]
    e356:	687b      	ldr	r3, [r7, #4]
    e358:	6a19      	ldr	r1, [r3, #32]
    e35a:	4b14      	ldr	r3, [pc, #80]	; (e3ac <cal_apply_cal+0x124>)
    e35c:	1c10      	adds	r0, r2, #0
    e35e:	4798      	blx	r3
    e360:	1c03      	adds	r3, r0, #0
    e362:	1c1a      	adds	r2, r3, #0
    e364:	4b12      	ldr	r3, [pc, #72]	; (e3b0 <cal_apply_cal+0x128>)
    e366:	1c11      	adds	r1, r2, #0
    e368:	1c28      	adds	r0, r5, #0
    e36a:	4798      	blx	r3
    e36c:	1c03      	adds	r3, r0, #0
    e36e:	1c1d      	adds	r5, r3, #0
    e370:	68bb      	ldr	r3, [r7, #8]
    e372:	681a      	ldr	r2, [r3, #0]
    e374:	687b      	ldr	r3, [r7, #4]
    e376:	6a59      	ldr	r1, [r3, #36]	; 0x24
    e378:	4b0c      	ldr	r3, [pc, #48]	; (e3ac <cal_apply_cal+0x124>)
    e37a:	1c10      	adds	r0, r2, #0
    e37c:	4798      	blx	r3
    e37e:	1c03      	adds	r3, r0, #0
    e380:	1c1a      	adds	r2, r3, #0
    e382:	4b0b      	ldr	r3, [pc, #44]	; (e3b0 <cal_apply_cal+0x128>)
    e384:	1c11      	adds	r1, r2, #0
    e386:	1c28      	adds	r0, r5, #0
    e388:	4798      	blx	r3
    e38a:	1c03      	adds	r3, r0, #0
    e38c:	6023      	str	r3, [r4, #0]


	//  Apply rotation calibration

	//Rotate vector by rotation matrix
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
    e38e:	687b      	ldr	r3, [r7, #4]
    e390:	3334      	adds	r3, #52	; 0x34
    e392:	68ba      	ldr	r2, [r7, #8]
    e394:	68b9      	ldr	r1, [r7, #8]
    e396:	0018      	movs	r0, r3
    e398:	4b06      	ldr	r3, [pc, #24]	; (e3b4 <cal_apply_cal+0x12c>)
    e39a:	4798      	blx	r3
	
}
    e39c:	46c0      	nop			; (mov r8, r8)
    e39e:	46bd      	mov	sp, r7
    e3a0:	b006      	add	sp, #24
    e3a2:	bdb0      	pop	{r4, r5, r7, pc}
    e3a4:	00021a19 	.word	0x00021a19
    e3a8:	000213f9 	.word	0x000213f9
    e3ac:	000217d9 	.word	0x000217d9
    e3b0:	000210d5 	.word	0x000210d5
    e3b4:	0000c3cd 	.word	0x0000c3cd

0000e3b8 <cal_init_struct>:

void cal_init_struct(struct INST_CAL *cal_struct){
    e3b8:	b580      	push	{r7, lr}
    e3ba:	b084      	sub	sp, #16
    e3bc:	af00      	add	r7, sp, #0
    e3be:	6078      	str	r0, [r7, #4]
	uint8_t i, j;
	
	for (i=0;i<3;i++){
    e3c0:	230f      	movs	r3, #15
    e3c2:	18fb      	adds	r3, r7, r3
    e3c4:	2200      	movs	r2, #0
    e3c6:	701a      	strb	r2, [r3, #0]
    e3c8:	e04c      	b.n	e464 <cal_init_struct+0xac>
		cal_struct->gain[i] = 1;
    e3ca:	230f      	movs	r3, #15
    e3cc:	18fb      	adds	r3, r7, r3
    e3ce:	781a      	ldrb	r2, [r3, #0]
    e3d0:	687b      	ldr	r3, [r7, #4]
    e3d2:	3204      	adds	r2, #4
    e3d4:	0092      	lsls	r2, r2, #2
    e3d6:	21fe      	movs	r1, #254	; 0xfe
    e3d8:	0589      	lsls	r1, r1, #22
    e3da:	50d1      	str	r1, [r2, r3]
		cal_struct->offset[i] = 0;
    e3dc:	230f      	movs	r3, #15
    e3de:	18fb      	adds	r3, r7, r3
    e3e0:	781b      	ldrb	r3, [r3, #0]
    e3e2:	687a      	ldr	r2, [r7, #4]
    e3e4:	009b      	lsls	r3, r3, #2
    e3e6:	18d3      	adds	r3, r2, r3
    e3e8:	3304      	adds	r3, #4
    e3ea:	2200      	movs	r2, #0
    e3ec:	601a      	str	r2, [r3, #0]
		
		for (j=0;j<3;j++){
    e3ee:	230e      	movs	r3, #14
    e3f0:	18fb      	adds	r3, r7, r3
    e3f2:	2200      	movs	r2, #0
    e3f4:	701a      	strb	r2, [r3, #0]
    e3f6:	e017      	b.n	e428 <cal_init_struct+0x70>
			cal_struct->RotM[i][j] = 0;//Clear row
    e3f8:	230f      	movs	r3, #15
    e3fa:	18fb      	adds	r3, r7, r3
    e3fc:	781a      	ldrb	r2, [r3, #0]
    e3fe:	230e      	movs	r3, #14
    e400:	18fb      	adds	r3, r7, r3
    e402:	7818      	ldrb	r0, [r3, #0]
    e404:	6879      	ldr	r1, [r7, #4]
    e406:	0013      	movs	r3, r2
    e408:	005b      	lsls	r3, r3, #1
    e40a:	189b      	adds	r3, r3, r2
    e40c:	181b      	adds	r3, r3, r0
    e40e:	330c      	adds	r3, #12
    e410:	009b      	lsls	r3, r3, #2
    e412:	18cb      	adds	r3, r1, r3
    e414:	3304      	adds	r3, #4
    e416:	2200      	movs	r2, #0
    e418:	601a      	str	r2, [r3, #0]
		for (j=0;j<3;j++){
    e41a:	230e      	movs	r3, #14
    e41c:	18fb      	adds	r3, r7, r3
    e41e:	781a      	ldrb	r2, [r3, #0]
    e420:	230e      	movs	r3, #14
    e422:	18fb      	adds	r3, r7, r3
    e424:	3201      	adds	r2, #1
    e426:	701a      	strb	r2, [r3, #0]
    e428:	230e      	movs	r3, #14
    e42a:	18fb      	adds	r3, r7, r3
    e42c:	781b      	ldrb	r3, [r3, #0]
    e42e:	2b02      	cmp	r3, #2
    e430:	d9e2      	bls.n	e3f8 <cal_init_struct+0x40>
		}
		cal_struct->RotM[i][i] = 1;// Create identity matrix
    e432:	230f      	movs	r3, #15
    e434:	18fb      	adds	r3, r7, r3
    e436:	781a      	ldrb	r2, [r3, #0]
    e438:	230f      	movs	r3, #15
    e43a:	18fb      	adds	r3, r7, r3
    e43c:	7818      	ldrb	r0, [r3, #0]
    e43e:	6879      	ldr	r1, [r7, #4]
    e440:	0013      	movs	r3, r2
    e442:	005b      	lsls	r3, r3, #1
    e444:	189b      	adds	r3, r3, r2
    e446:	181b      	adds	r3, r3, r0
    e448:	330c      	adds	r3, #12
    e44a:	009b      	lsls	r3, r3, #2
    e44c:	18cb      	adds	r3, r1, r3
    e44e:	3304      	adds	r3, #4
    e450:	22fe      	movs	r2, #254	; 0xfe
    e452:	0592      	lsls	r2, r2, #22
    e454:	601a      	str	r2, [r3, #0]
	for (i=0;i<3;i++){
    e456:	230f      	movs	r3, #15
    e458:	18fb      	adds	r3, r7, r3
    e45a:	781a      	ldrb	r2, [r3, #0]
    e45c:	230f      	movs	r3, #15
    e45e:	18fb      	adds	r3, r7, r3
    e460:	3201      	adds	r2, #1
    e462:	701a      	strb	r2, [r3, #0]
    e464:	230f      	movs	r3, #15
    e466:	18fb      	adds	r3, r7, r3
    e468:	781b      	ldrb	r3, [r3, #0]
    e46a:	2b02      	cmp	r3, #2
    e46c:	d9ad      	bls.n	e3ca <cal_init_struct+0x12>
		
	}
	cal_struct->axmYX = 0;
    e46e:	687b      	ldr	r3, [r7, #4]
    e470:	2200      	movs	r2, #0
    e472:	61da      	str	r2, [r3, #28]
	cal_struct->axmZY = 0;
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	2200      	movs	r2, #0
    e478:	621a      	str	r2, [r3, #32]
	cal_struct->axmZX = 0;
    e47a:	687b      	ldr	r3, [r7, #4]
    e47c:	2200      	movs	r2, #0
    e47e:	625a      	str	r2, [r3, #36]	; 0x24
	
	cal_struct->thetaX = 0;
    e480:	687b      	ldr	r3, [r7, #4]
    e482:	2200      	movs	r2, #0
    e484:	629a      	str	r2, [r3, #40]	; 0x28
	cal_struct->thetaY = 0;
    e486:	687b      	ldr	r3, [r7, #4]
    e488:	2200      	movs	r2, #0
    e48a:	62da      	str	r2, [r3, #44]	; 0x2c
	cal_struct->thetaZ = 0;
    e48c:	687b      	ldr	r3, [r7, #4]
    e48e:	2200      	movs	r2, #0
    e490:	631a      	str	r2, [r3, #48]	; 0x30
	cal_struct->angle_stdev = 1;
    e492:	687b      	ldr	r3, [r7, #4]
    e494:	22fe      	movs	r2, #254	; 0xfe
    e496:	0592      	lsls	r2, r2, #22
    e498:	65da      	str	r2, [r3, #92]	; 0x5c
	
	cal_struct->dist_offset = 0;
    e49a:	687b      	ldr	r3, [r7, #4]
    e49c:	2200      	movs	r2, #0
    e49e:	659a      	str	r2, [r3, #88]	; 0x58
	
	cal_struct->Cal_Initialized_Key = 0xB1;//  Indicator that structure has been initialized
    e4a0:	687b      	ldr	r3, [r7, #4]
    e4a2:	22b1      	movs	r2, #177	; 0xb1
    e4a4:	701a      	strb	r2, [r3, #0]
	
}
    e4a6:	46c0      	nop			; (mov r8, r8)
    e4a8:	46bd      	mov	sp, r7
    e4aa:	b004      	add	sp, #16
    e4ac:	bd80      	pop	{r7, pc}
	...

0000e4b0 <gen_RotM>:

void gen_RotM(struct INST_CAL *cal_struct){
    e4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4b2:	b08b      	sub	sp, #44	; 0x2c
    e4b4:	af00      	add	r7, sp, #0
    e4b6:	6178      	str	r0, [r7, #20]
	float tX, tY, tZ;
	
	tX = cal_struct->thetaX*deg2rad;
    e4b8:	697b      	ldr	r3, [r7, #20]
    e4ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e4bc:	4bcb      	ldr	r3, [pc, #812]	; (e7ec <gen_RotM+0x33c>)
    e4be:	6819      	ldr	r1, [r3, #0]
    e4c0:	4bcb      	ldr	r3, [pc, #812]	; (e7f0 <gen_RotM+0x340>)
    e4c2:	1c10      	adds	r0, r2, #0
    e4c4:	4798      	blx	r3
    e4c6:	1c03      	adds	r3, r0, #0
    e4c8:	627b      	str	r3, [r7, #36]	; 0x24
	tY = cal_struct->thetaY*deg2rad;
    e4ca:	697b      	ldr	r3, [r7, #20]
    e4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e4ce:	4bc7      	ldr	r3, [pc, #796]	; (e7ec <gen_RotM+0x33c>)
    e4d0:	6819      	ldr	r1, [r3, #0]
    e4d2:	4bc7      	ldr	r3, [pc, #796]	; (e7f0 <gen_RotM+0x340>)
    e4d4:	1c10      	adds	r0, r2, #0
    e4d6:	4798      	blx	r3
    e4d8:	1c03      	adds	r3, r0, #0
    e4da:	623b      	str	r3, [r7, #32]
	tZ = cal_struct->thetaZ*deg2rad;
    e4dc:	697b      	ldr	r3, [r7, #20]
    e4de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e4e0:	4bc2      	ldr	r3, [pc, #776]	; (e7ec <gen_RotM+0x33c>)
    e4e2:	6819      	ldr	r1, [r3, #0]
    e4e4:	4bc2      	ldr	r3, [pc, #776]	; (e7f0 <gen_RotM+0x340>)
    e4e6:	1c10      	adds	r0, r2, #0
    e4e8:	4798      	blx	r3
    e4ea:	1c03      	adds	r3, r0, #0
    e4ec:	61fb      	str	r3, [r7, #28]
	
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
    e4ee:	4bc1      	ldr	r3, [pc, #772]	; (e7f4 <gen_RotM+0x344>)
    e4f0:	6a38      	ldr	r0, [r7, #32]
    e4f2:	4798      	blx	r3
    e4f4:	0002      	movs	r2, r0
    e4f6:	000b      	movs	r3, r1
    e4f8:	0010      	movs	r0, r2
    e4fa:	0019      	movs	r1, r3
    e4fc:	4bbe      	ldr	r3, [pc, #760]	; (e7f8 <gen_RotM+0x348>)
    e4fe:	4798      	blx	r3
    e500:	60b8      	str	r0, [r7, #8]
    e502:	60f9      	str	r1, [r7, #12]
    e504:	4bbb      	ldr	r3, [pc, #748]	; (e7f4 <gen_RotM+0x344>)
    e506:	69f8      	ldr	r0, [r7, #28]
    e508:	4798      	blx	r3
    e50a:	0002      	movs	r2, r0
    e50c:	000b      	movs	r3, r1
    e50e:	0010      	movs	r0, r2
    e510:	0019      	movs	r1, r3
    e512:	4bb9      	ldr	r3, [pc, #740]	; (e7f8 <gen_RotM+0x348>)
    e514:	4798      	blx	r3
    e516:	0002      	movs	r2, r0
    e518:	000b      	movs	r3, r1
    e51a:	4eb8      	ldr	r6, [pc, #736]	; (e7fc <gen_RotM+0x34c>)
    e51c:	68b8      	ldr	r0, [r7, #8]
    e51e:	68f9      	ldr	r1, [r7, #12]
    e520:	47b0      	blx	r6
    e522:	0002      	movs	r2, r0
    e524:	000b      	movs	r3, r1
    e526:	0011      	movs	r1, r2
    e528:	001a      	movs	r2, r3
    e52a:	4bb5      	ldr	r3, [pc, #724]	; (e800 <gen_RotM+0x350>)
    e52c:	0008      	movs	r0, r1
    e52e:	0011      	movs	r1, r2
    e530:	4798      	blx	r3
    e532:	1c02      	adds	r2, r0, #0
    e534:	697b      	ldr	r3, [r7, #20]
    e536:	635a      	str	r2, [r3, #52]	; 0x34
	cal_struct->RotM[0][1] = -sin(tZ);
    e538:	4bae      	ldr	r3, [pc, #696]	; (e7f4 <gen_RotM+0x344>)
    e53a:	69f8      	ldr	r0, [r7, #28]
    e53c:	4798      	blx	r3
    e53e:	0002      	movs	r2, r0
    e540:	000b      	movs	r3, r1
    e542:	0010      	movs	r0, r2
    e544:	0019      	movs	r1, r3
    e546:	4baf      	ldr	r3, [pc, #700]	; (e804 <gen_RotM+0x354>)
    e548:	4798      	blx	r3
    e54a:	000a      	movs	r2, r1
    e54c:	0001      	movs	r1, r0
    e54e:	4bac      	ldr	r3, [pc, #688]	; (e800 <gen_RotM+0x350>)
    e550:	0008      	movs	r0, r1
    e552:	0011      	movs	r1, r2
    e554:	4798      	blx	r3
    e556:	1c02      	adds	r2, r0, #0
    e558:	2380      	movs	r3, #128	; 0x80
    e55a:	061b      	lsls	r3, r3, #24
    e55c:	405a      	eors	r2, r3
    e55e:	697b      	ldr	r3, [r7, #20]
    e560:	639a      	str	r2, [r3, #56]	; 0x38
	cal_struct->RotM[0][2] = sin(tY);
    e562:	4ba4      	ldr	r3, [pc, #656]	; (e7f4 <gen_RotM+0x344>)
    e564:	6a38      	ldr	r0, [r7, #32]
    e566:	4798      	blx	r3
    e568:	0002      	movs	r2, r0
    e56a:	000b      	movs	r3, r1
    e56c:	0010      	movs	r0, r2
    e56e:	0019      	movs	r1, r3
    e570:	4ba4      	ldr	r3, [pc, #656]	; (e804 <gen_RotM+0x354>)
    e572:	4798      	blx	r3
    e574:	000a      	movs	r2, r1
    e576:	0001      	movs	r1, r0
    e578:	4ba1      	ldr	r3, [pc, #644]	; (e800 <gen_RotM+0x350>)
    e57a:	0008      	movs	r0, r1
    e57c:	0011      	movs	r1, r2
    e57e:	4798      	blx	r3
    e580:	1c02      	adds	r2, r0, #0
    e582:	697b      	ldr	r3, [r7, #20]
    e584:	63da      	str	r2, [r3, #60]	; 0x3c
	cal_struct->RotM[1][0] = (cos(tX)*sin(tZ))+(sin(tX)*sin(tY));
    e586:	4b9b      	ldr	r3, [pc, #620]	; (e7f4 <gen_RotM+0x344>)
    e588:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e58a:	4798      	blx	r3
    e58c:	0002      	movs	r2, r0
    e58e:	000b      	movs	r3, r1
    e590:	0010      	movs	r0, r2
    e592:	0019      	movs	r1, r3
    e594:	4b98      	ldr	r3, [pc, #608]	; (e7f8 <gen_RotM+0x348>)
    e596:	4798      	blx	r3
    e598:	60b8      	str	r0, [r7, #8]
    e59a:	60f9      	str	r1, [r7, #12]
    e59c:	4b95      	ldr	r3, [pc, #596]	; (e7f4 <gen_RotM+0x344>)
    e59e:	69f8      	ldr	r0, [r7, #28]
    e5a0:	4798      	blx	r3
    e5a2:	0002      	movs	r2, r0
    e5a4:	000b      	movs	r3, r1
    e5a6:	0010      	movs	r0, r2
    e5a8:	0019      	movs	r1, r3
    e5aa:	4b96      	ldr	r3, [pc, #600]	; (e804 <gen_RotM+0x354>)
    e5ac:	4798      	blx	r3
    e5ae:	0002      	movs	r2, r0
    e5b0:	000b      	movs	r3, r1
    e5b2:	4e92      	ldr	r6, [pc, #584]	; (e7fc <gen_RotM+0x34c>)
    e5b4:	68b8      	ldr	r0, [r7, #8]
    e5b6:	68f9      	ldr	r1, [r7, #12]
    e5b8:	47b0      	blx	r6
    e5ba:	0002      	movs	r2, r0
    e5bc:	000b      	movs	r3, r1
    e5be:	60ba      	str	r2, [r7, #8]
    e5c0:	60fb      	str	r3, [r7, #12]
    e5c2:	4b8c      	ldr	r3, [pc, #560]	; (e7f4 <gen_RotM+0x344>)
    e5c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e5c6:	4798      	blx	r3
    e5c8:	0002      	movs	r2, r0
    e5ca:	000b      	movs	r3, r1
    e5cc:	0010      	movs	r0, r2
    e5ce:	0019      	movs	r1, r3
    e5d0:	4b8c      	ldr	r3, [pc, #560]	; (e804 <gen_RotM+0x354>)
    e5d2:	4798      	blx	r3
    e5d4:	6038      	str	r0, [r7, #0]
    e5d6:	6079      	str	r1, [r7, #4]
    e5d8:	4b86      	ldr	r3, [pc, #536]	; (e7f4 <gen_RotM+0x344>)
    e5da:	6a38      	ldr	r0, [r7, #32]
    e5dc:	4798      	blx	r3
    e5de:	0002      	movs	r2, r0
    e5e0:	000b      	movs	r3, r1
    e5e2:	0010      	movs	r0, r2
    e5e4:	0019      	movs	r1, r3
    e5e6:	4b87      	ldr	r3, [pc, #540]	; (e804 <gen_RotM+0x354>)
    e5e8:	4798      	blx	r3
    e5ea:	0002      	movs	r2, r0
    e5ec:	000b      	movs	r3, r1
    e5ee:	4e83      	ldr	r6, [pc, #524]	; (e7fc <gen_RotM+0x34c>)
    e5f0:	6838      	ldr	r0, [r7, #0]
    e5f2:	6879      	ldr	r1, [r7, #4]
    e5f4:	47b0      	blx	r6
    e5f6:	0002      	movs	r2, r0
    e5f8:	000b      	movs	r3, r1
    e5fa:	4e83      	ldr	r6, [pc, #524]	; (e808 <gen_RotM+0x358>)
    e5fc:	68b8      	ldr	r0, [r7, #8]
    e5fe:	68f9      	ldr	r1, [r7, #12]
    e600:	47b0      	blx	r6
    e602:	0002      	movs	r2, r0
    e604:	000b      	movs	r3, r1
    e606:	0011      	movs	r1, r2
    e608:	001a      	movs	r2, r3
    e60a:	4b7d      	ldr	r3, [pc, #500]	; (e800 <gen_RotM+0x350>)
    e60c:	0008      	movs	r0, r1
    e60e:	0011      	movs	r1, r2
    e610:	4798      	blx	r3
    e612:	1c02      	adds	r2, r0, #0
    e614:	697b      	ldr	r3, [r7, #20]
    e616:	641a      	str	r2, [r3, #64]	; 0x40
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
    e618:	4b76      	ldr	r3, [pc, #472]	; (e7f4 <gen_RotM+0x344>)
    e61a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e61c:	4798      	blx	r3
    e61e:	0002      	movs	r2, r0
    e620:	000b      	movs	r3, r1
    e622:	0010      	movs	r0, r2
    e624:	0019      	movs	r1, r3
    e626:	4b74      	ldr	r3, [pc, #464]	; (e7f8 <gen_RotM+0x348>)
    e628:	4798      	blx	r3
    e62a:	60b8      	str	r0, [r7, #8]
    e62c:	60f9      	str	r1, [r7, #12]
    e62e:	4b71      	ldr	r3, [pc, #452]	; (e7f4 <gen_RotM+0x344>)
    e630:	69f8      	ldr	r0, [r7, #28]
    e632:	4798      	blx	r3
    e634:	0002      	movs	r2, r0
    e636:	000b      	movs	r3, r1
    e638:	0010      	movs	r0, r2
    e63a:	0019      	movs	r1, r3
    e63c:	4b6e      	ldr	r3, [pc, #440]	; (e7f8 <gen_RotM+0x348>)
    e63e:	4798      	blx	r3
    e640:	0002      	movs	r2, r0
    e642:	000b      	movs	r3, r1
    e644:	4e6d      	ldr	r6, [pc, #436]	; (e7fc <gen_RotM+0x34c>)
    e646:	68b8      	ldr	r0, [r7, #8]
    e648:	68f9      	ldr	r1, [r7, #12]
    e64a:	47b0      	blx	r6
    e64c:	0002      	movs	r2, r0
    e64e:	000b      	movs	r3, r1
    e650:	0011      	movs	r1, r2
    e652:	001a      	movs	r2, r3
    e654:	4b6a      	ldr	r3, [pc, #424]	; (e800 <gen_RotM+0x350>)
    e656:	0008      	movs	r0, r1
    e658:	0011      	movs	r1, r2
    e65a:	4798      	blx	r3
    e65c:	1c02      	adds	r2, r0, #0
    e65e:	697b      	ldr	r3, [r7, #20]
    e660:	645a      	str	r2, [r3, #68]	; 0x44
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
    e662:	4b64      	ldr	r3, [pc, #400]	; (e7f4 <gen_RotM+0x344>)
    e664:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e666:	4798      	blx	r3
    e668:	0002      	movs	r2, r0
    e66a:	000b      	movs	r3, r1
    e66c:	0010      	movs	r0, r2
    e66e:	0019      	movs	r1, r3
    e670:	4b64      	ldr	r3, [pc, #400]	; (e804 <gen_RotM+0x354>)
    e672:	4798      	blx	r3
    e674:	0002      	movs	r2, r0
    e676:	000b      	movs	r3, r1
    e678:	0011      	movs	r1, r2
    e67a:	000c      	movs	r4, r1
    e67c:	2180      	movs	r1, #128	; 0x80
    e67e:	0609      	lsls	r1, r1, #24
    e680:	4059      	eors	r1, r3
    e682:	000d      	movs	r5, r1
    e684:	4b5b      	ldr	r3, [pc, #364]	; (e7f4 <gen_RotM+0x344>)
    e686:	6a38      	ldr	r0, [r7, #32]
    e688:	4798      	blx	r3
    e68a:	0002      	movs	r2, r0
    e68c:	000b      	movs	r3, r1
    e68e:	0010      	movs	r0, r2
    e690:	0019      	movs	r1, r3
    e692:	4b59      	ldr	r3, [pc, #356]	; (e7f8 <gen_RotM+0x348>)
    e694:	4798      	blx	r3
    e696:	0002      	movs	r2, r0
    e698:	000b      	movs	r3, r1
    e69a:	4e58      	ldr	r6, [pc, #352]	; (e7fc <gen_RotM+0x34c>)
    e69c:	0020      	movs	r0, r4
    e69e:	0029      	movs	r1, r5
    e6a0:	47b0      	blx	r6
    e6a2:	0003      	movs	r3, r0
    e6a4:	000c      	movs	r4, r1
    e6a6:	0019      	movs	r1, r3
    e6a8:	0022      	movs	r2, r4
    e6aa:	4b55      	ldr	r3, [pc, #340]	; (e800 <gen_RotM+0x350>)
    e6ac:	0008      	movs	r0, r1
    e6ae:	0011      	movs	r1, r2
    e6b0:	4798      	blx	r3
    e6b2:	1c02      	adds	r2, r0, #0
    e6b4:	697b      	ldr	r3, [r7, #20]
    e6b6:	649a      	str	r2, [r3, #72]	; 0x48
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
    e6b8:	4b4e      	ldr	r3, [pc, #312]	; (e7f4 <gen_RotM+0x344>)
    e6ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e6bc:	4798      	blx	r3
    e6be:	0003      	movs	r3, r0
    e6c0:	000c      	movs	r4, r1
    e6c2:	0018      	movs	r0, r3
    e6c4:	0021      	movs	r1, r4
    e6c6:	4b4f      	ldr	r3, [pc, #316]	; (e804 <gen_RotM+0x354>)
    e6c8:	4798      	blx	r3
    e6ca:	0005      	movs	r5, r0
    e6cc:	000e      	movs	r6, r1
    e6ce:	4b49      	ldr	r3, [pc, #292]	; (e7f4 <gen_RotM+0x344>)
    e6d0:	69f8      	ldr	r0, [r7, #28]
    e6d2:	4798      	blx	r3
    e6d4:	0003      	movs	r3, r0
    e6d6:	000c      	movs	r4, r1
    e6d8:	0018      	movs	r0, r3
    e6da:	0021      	movs	r1, r4
    e6dc:	4b49      	ldr	r3, [pc, #292]	; (e804 <gen_RotM+0x354>)
    e6de:	4798      	blx	r3
    e6e0:	0002      	movs	r2, r0
    e6e2:	000b      	movs	r3, r1
    e6e4:	4c45      	ldr	r4, [pc, #276]	; (e7fc <gen_RotM+0x34c>)
    e6e6:	0028      	movs	r0, r5
    e6e8:	0031      	movs	r1, r6
    e6ea:	47a0      	blx	r4
    e6ec:	0003      	movs	r3, r0
    e6ee:	000c      	movs	r4, r1
    e6f0:	001d      	movs	r5, r3
    e6f2:	0026      	movs	r6, r4
    e6f4:	4b3f      	ldr	r3, [pc, #252]	; (e7f4 <gen_RotM+0x344>)
    e6f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e6f8:	4798      	blx	r3
    e6fa:	0003      	movs	r3, r0
    e6fc:	000c      	movs	r4, r1
    e6fe:	0018      	movs	r0, r3
    e700:	0021      	movs	r1, r4
    e702:	4b3d      	ldr	r3, [pc, #244]	; (e7f8 <gen_RotM+0x348>)
    e704:	4798      	blx	r3
    e706:	60b8      	str	r0, [r7, #8]
    e708:	60f9      	str	r1, [r7, #12]
    e70a:	4b3a      	ldr	r3, [pc, #232]	; (e7f4 <gen_RotM+0x344>)
    e70c:	6a38      	ldr	r0, [r7, #32]
    e70e:	4798      	blx	r3
    e710:	0003      	movs	r3, r0
    e712:	000c      	movs	r4, r1
    e714:	0018      	movs	r0, r3
    e716:	0021      	movs	r1, r4
    e718:	4b3a      	ldr	r3, [pc, #232]	; (e804 <gen_RotM+0x354>)
    e71a:	4798      	blx	r3
    e71c:	0002      	movs	r2, r0
    e71e:	000b      	movs	r3, r1
    e720:	4c36      	ldr	r4, [pc, #216]	; (e7fc <gen_RotM+0x34c>)
    e722:	68b8      	ldr	r0, [r7, #8]
    e724:	68f9      	ldr	r1, [r7, #12]
    e726:	47a0      	blx	r4
    e728:	0003      	movs	r3, r0
    e72a:	000c      	movs	r4, r1
    e72c:	001a      	movs	r2, r3
    e72e:	0023      	movs	r3, r4
    e730:	4c36      	ldr	r4, [pc, #216]	; (e80c <gen_RotM+0x35c>)
    e732:	0028      	movs	r0, r5
    e734:	0031      	movs	r1, r6
    e736:	47a0      	blx	r4
    e738:	0003      	movs	r3, r0
    e73a:	000c      	movs	r4, r1
    e73c:	0019      	movs	r1, r3
    e73e:	0022      	movs	r2, r4
    e740:	4b2f      	ldr	r3, [pc, #188]	; (e800 <gen_RotM+0x350>)
    e742:	0008      	movs	r0, r1
    e744:	0011      	movs	r1, r2
    e746:	4798      	blx	r3
    e748:	1c02      	adds	r2, r0, #0
    e74a:	697b      	ldr	r3, [r7, #20]
    e74c:	64da      	str	r2, [r3, #76]	; 0x4c
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
    e74e:	4b29      	ldr	r3, [pc, #164]	; (e7f4 <gen_RotM+0x344>)
    e750:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e752:	4798      	blx	r3
    e754:	0003      	movs	r3, r0
    e756:	000c      	movs	r4, r1
    e758:	0018      	movs	r0, r3
    e75a:	0021      	movs	r1, r4
    e75c:	4b29      	ldr	r3, [pc, #164]	; (e804 <gen_RotM+0x354>)
    e75e:	4798      	blx	r3
    e760:	0005      	movs	r5, r0
    e762:	000e      	movs	r6, r1
    e764:	4b23      	ldr	r3, [pc, #140]	; (e7f4 <gen_RotM+0x344>)
    e766:	69f8      	ldr	r0, [r7, #28]
    e768:	4798      	blx	r3
    e76a:	0003      	movs	r3, r0
    e76c:	000c      	movs	r4, r1
    e76e:	0018      	movs	r0, r3
    e770:	0021      	movs	r1, r4
    e772:	4b21      	ldr	r3, [pc, #132]	; (e7f8 <gen_RotM+0x348>)
    e774:	4798      	blx	r3
    e776:	0002      	movs	r2, r0
    e778:	000b      	movs	r3, r1
    e77a:	4c20      	ldr	r4, [pc, #128]	; (e7fc <gen_RotM+0x34c>)
    e77c:	0028      	movs	r0, r5
    e77e:	0031      	movs	r1, r6
    e780:	47a0      	blx	r4
    e782:	0003      	movs	r3, r0
    e784:	000c      	movs	r4, r1
    e786:	0019      	movs	r1, r3
    e788:	0022      	movs	r2, r4
    e78a:	4b1d      	ldr	r3, [pc, #116]	; (e800 <gen_RotM+0x350>)
    e78c:	0008      	movs	r0, r1
    e78e:	0011      	movs	r1, r2
    e790:	4798      	blx	r3
    e792:	1c02      	adds	r2, r0, #0
    e794:	697b      	ldr	r3, [r7, #20]
    e796:	651a      	str	r2, [r3, #80]	; 0x50
	cal_struct->RotM[2][2] = cos(tX)*cos(tY);
    e798:	4b16      	ldr	r3, [pc, #88]	; (e7f4 <gen_RotM+0x344>)
    e79a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e79c:	4798      	blx	r3
    e79e:	0003      	movs	r3, r0
    e7a0:	000c      	movs	r4, r1
    e7a2:	0018      	movs	r0, r3
    e7a4:	0021      	movs	r1, r4
    e7a6:	4b14      	ldr	r3, [pc, #80]	; (e7f8 <gen_RotM+0x348>)
    e7a8:	4798      	blx	r3
    e7aa:	0005      	movs	r5, r0
    e7ac:	000e      	movs	r6, r1
    e7ae:	4b11      	ldr	r3, [pc, #68]	; (e7f4 <gen_RotM+0x344>)
    e7b0:	6a38      	ldr	r0, [r7, #32]
    e7b2:	4798      	blx	r3
    e7b4:	0003      	movs	r3, r0
    e7b6:	000c      	movs	r4, r1
    e7b8:	0018      	movs	r0, r3
    e7ba:	0021      	movs	r1, r4
    e7bc:	4b0e      	ldr	r3, [pc, #56]	; (e7f8 <gen_RotM+0x348>)
    e7be:	4798      	blx	r3
    e7c0:	0002      	movs	r2, r0
    e7c2:	000b      	movs	r3, r1
    e7c4:	4c0d      	ldr	r4, [pc, #52]	; (e7fc <gen_RotM+0x34c>)
    e7c6:	0028      	movs	r0, r5
    e7c8:	0031      	movs	r1, r6
    e7ca:	47a0      	blx	r4
    e7cc:	0003      	movs	r3, r0
    e7ce:	000c      	movs	r4, r1
    e7d0:	0019      	movs	r1, r3
    e7d2:	0022      	movs	r2, r4
    e7d4:	4b0a      	ldr	r3, [pc, #40]	; (e800 <gen_RotM+0x350>)
    e7d6:	0008      	movs	r0, r1
    e7d8:	0011      	movs	r1, r2
    e7da:	4798      	blx	r3
    e7dc:	1c02      	adds	r2, r0, #0
    e7de:	697b      	ldr	r3, [r7, #20]
    e7e0:	655a      	str	r2, [r3, #84]	; 0x54
	
}
    e7e2:	46c0      	nop			; (mov r8, r8)
    e7e4:	46bd      	mov	sp, r7
    e7e6:	b00b      	add	sp, #44	; 0x2c
    e7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7ea:	46c0      	nop			; (mov r8, r8)
    e7ec:	00028d68 	.word	0x00028d68
    e7f0:	000217d9 	.word	0x000217d9
    e7f4:	00023a0d 	.word	0x00023a0d
    e7f8:	0001e169 	.word	0x0001e169
    e7fc:	00022d45 	.word	0x00022d45
    e800:	00023ab1 	.word	0x00023ab1
    e804:	0001e325 	.word	0x0001e325
    e808:	00021ebd 	.word	0x00021ebd
    e80c:	00023245 	.word	0x00023245

0000e810 <cal_gain_off>:





void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
    e810:	b5f0      	push	{r4, r5, r6, r7, lr}
    e812:	46ce      	mov	lr, r9
    e814:	4647      	mov	r7, r8
    e816:	b580      	push	{r7, lr}
    e818:	4cb9      	ldr	r4, [pc, #740]	; (eb00 <cal_gain_off+0x2f0>)
    e81a:	44a5      	add	sp, r4
    e81c:	af00      	add	r7, sp, #0
    e81e:	60f8      	str	r0, [r7, #12]
    e820:	60b9      	str	r1, [r7, #8]
	uint8_t i,j,k;
	

	
	
	for (i=0;i<n_points;i++){
    e822:	4bb8      	ldr	r3, [pc, #736]	; (eb04 <cal_gain_off+0x2f4>)
    e824:	2208      	movs	r2, #8
    e826:	4694      	mov	ip, r2
    e828:	44bc      	add	ip, r7
    e82a:	4463      	add	r3, ip
    e82c:	2200      	movs	r2, #0
    e82e:	701a      	strb	r2, [r3, #0]
    e830:	e127      	b.n	ea82 <cal_gain_off+0x272>
		D[i][0] = XYZ[i][0]*XYZ[i][0];
    e832:	4bb4      	ldr	r3, [pc, #720]	; (eb04 <cal_gain_off+0x2f4>)
    e834:	2208      	movs	r2, #8
    e836:	4694      	mov	ip, r2
    e838:	44bc      	add	ip, r7
    e83a:	4463      	add	r3, ip
    e83c:	781c      	ldrb	r4, [r3, #0]
    e83e:	4bb1      	ldr	r3, [pc, #708]	; (eb04 <cal_gain_off+0x2f4>)
    e840:	2208      	movs	r2, #8
    e842:	4694      	mov	ip, r2
    e844:	44bc      	add	ip, r7
    e846:	4463      	add	r3, ip
    e848:	781a      	ldrb	r2, [r3, #0]
    e84a:	0013      	movs	r3, r2
    e84c:	005b      	lsls	r3, r3, #1
    e84e:	189b      	adds	r3, r3, r2
    e850:	009b      	lsls	r3, r3, #2
    e852:	001a      	movs	r2, r3
    e854:	68fb      	ldr	r3, [r7, #12]
    e856:	189b      	adds	r3, r3, r2
    e858:	6818      	ldr	r0, [r3, #0]
    e85a:	4baa      	ldr	r3, [pc, #680]	; (eb04 <cal_gain_off+0x2f4>)
    e85c:	2208      	movs	r2, #8
    e85e:	4694      	mov	ip, r2
    e860:	44bc      	add	ip, r7
    e862:	4463      	add	r3, ip
    e864:	781a      	ldrb	r2, [r3, #0]
    e866:	0013      	movs	r3, r2
    e868:	005b      	lsls	r3, r3, #1
    e86a:	189b      	adds	r3, r3, r2
    e86c:	009b      	lsls	r3, r3, #2
    e86e:	001a      	movs	r2, r3
    e870:	68fb      	ldr	r3, [r7, #12]
    e872:	189b      	adds	r3, r3, r2
    e874:	681a      	ldr	r2, [r3, #0]
    e876:	4ba4      	ldr	r3, [pc, #656]	; (eb08 <cal_gain_off+0x2f8>)
    e878:	1c11      	adds	r1, r2, #0
    e87a:	4798      	blx	r3
    e87c:	1c03      	adds	r3, r0, #0
    e87e:	1c19      	adds	r1, r3, #0
    e880:	4ba2      	ldr	r3, [pc, #648]	; (eb0c <cal_gain_off+0x2fc>)
    e882:	2285      	movs	r2, #133	; 0x85
    e884:	0112      	lsls	r2, r2, #4
    e886:	2008      	movs	r0, #8
    e888:	4684      	mov	ip, r0
    e88a:	44bc      	add	ip, r7
    e88c:	4462      	add	r2, ip
    e88e:	18d2      	adds	r2, r2, r3
    e890:	0023      	movs	r3, r4
    e892:	005b      	lsls	r3, r3, #1
    e894:	191b      	adds	r3, r3, r4
    e896:	00db      	lsls	r3, r3, #3
    e898:	5099      	str	r1, [r3, r2]
		D[i][1] = XYZ[i][1]*XYZ[i][1];
    e89a:	4b9a      	ldr	r3, [pc, #616]	; (eb04 <cal_gain_off+0x2f4>)
    e89c:	2208      	movs	r2, #8
    e89e:	4694      	mov	ip, r2
    e8a0:	44bc      	add	ip, r7
    e8a2:	4463      	add	r3, ip
    e8a4:	781c      	ldrb	r4, [r3, #0]
    e8a6:	4b97      	ldr	r3, [pc, #604]	; (eb04 <cal_gain_off+0x2f4>)
    e8a8:	2208      	movs	r2, #8
    e8aa:	4694      	mov	ip, r2
    e8ac:	44bc      	add	ip, r7
    e8ae:	4463      	add	r3, ip
    e8b0:	781a      	ldrb	r2, [r3, #0]
    e8b2:	0013      	movs	r3, r2
    e8b4:	005b      	lsls	r3, r3, #1
    e8b6:	189b      	adds	r3, r3, r2
    e8b8:	009b      	lsls	r3, r3, #2
    e8ba:	001a      	movs	r2, r3
    e8bc:	68fb      	ldr	r3, [r7, #12]
    e8be:	189b      	adds	r3, r3, r2
    e8c0:	6858      	ldr	r0, [r3, #4]
    e8c2:	4b90      	ldr	r3, [pc, #576]	; (eb04 <cal_gain_off+0x2f4>)
    e8c4:	2208      	movs	r2, #8
    e8c6:	4694      	mov	ip, r2
    e8c8:	44bc      	add	ip, r7
    e8ca:	4463      	add	r3, ip
    e8cc:	781a      	ldrb	r2, [r3, #0]
    e8ce:	0013      	movs	r3, r2
    e8d0:	005b      	lsls	r3, r3, #1
    e8d2:	189b      	adds	r3, r3, r2
    e8d4:	009b      	lsls	r3, r3, #2
    e8d6:	001a      	movs	r2, r3
    e8d8:	68fb      	ldr	r3, [r7, #12]
    e8da:	189b      	adds	r3, r3, r2
    e8dc:	685a      	ldr	r2, [r3, #4]
    e8de:	4b8a      	ldr	r3, [pc, #552]	; (eb08 <cal_gain_off+0x2f8>)
    e8e0:	1c11      	adds	r1, r2, #0
    e8e2:	4798      	blx	r3
    e8e4:	1c03      	adds	r3, r0, #0
    e8e6:	1c19      	adds	r1, r3, #0
    e8e8:	4b88      	ldr	r3, [pc, #544]	; (eb0c <cal_gain_off+0x2fc>)
    e8ea:	2285      	movs	r2, #133	; 0x85
    e8ec:	0112      	lsls	r2, r2, #4
    e8ee:	2008      	movs	r0, #8
    e8f0:	4684      	mov	ip, r0
    e8f2:	44bc      	add	ip, r7
    e8f4:	4462      	add	r2, ip
    e8f6:	18d2      	adds	r2, r2, r3
    e8f8:	0023      	movs	r3, r4
    e8fa:	005b      	lsls	r3, r3, #1
    e8fc:	191b      	adds	r3, r3, r4
    e8fe:	00db      	lsls	r3, r3, #3
    e900:	18d3      	adds	r3, r2, r3
    e902:	3304      	adds	r3, #4
    e904:	6019      	str	r1, [r3, #0]
		D[i][2] = XYZ[i][2]*XYZ[i][2];
    e906:	4b7f      	ldr	r3, [pc, #508]	; (eb04 <cal_gain_off+0x2f4>)
    e908:	2208      	movs	r2, #8
    e90a:	4694      	mov	ip, r2
    e90c:	44bc      	add	ip, r7
    e90e:	4463      	add	r3, ip
    e910:	781c      	ldrb	r4, [r3, #0]
    e912:	4b7c      	ldr	r3, [pc, #496]	; (eb04 <cal_gain_off+0x2f4>)
    e914:	2208      	movs	r2, #8
    e916:	4694      	mov	ip, r2
    e918:	44bc      	add	ip, r7
    e91a:	4463      	add	r3, ip
    e91c:	781a      	ldrb	r2, [r3, #0]
    e91e:	0013      	movs	r3, r2
    e920:	005b      	lsls	r3, r3, #1
    e922:	189b      	adds	r3, r3, r2
    e924:	009b      	lsls	r3, r3, #2
    e926:	001a      	movs	r2, r3
    e928:	68fb      	ldr	r3, [r7, #12]
    e92a:	189b      	adds	r3, r3, r2
    e92c:	6898      	ldr	r0, [r3, #8]
    e92e:	4b75      	ldr	r3, [pc, #468]	; (eb04 <cal_gain_off+0x2f4>)
    e930:	2208      	movs	r2, #8
    e932:	4694      	mov	ip, r2
    e934:	44bc      	add	ip, r7
    e936:	4463      	add	r3, ip
    e938:	781a      	ldrb	r2, [r3, #0]
    e93a:	0013      	movs	r3, r2
    e93c:	005b      	lsls	r3, r3, #1
    e93e:	189b      	adds	r3, r3, r2
    e940:	009b      	lsls	r3, r3, #2
    e942:	001a      	movs	r2, r3
    e944:	68fb      	ldr	r3, [r7, #12]
    e946:	189b      	adds	r3, r3, r2
    e948:	689a      	ldr	r2, [r3, #8]
    e94a:	4b6f      	ldr	r3, [pc, #444]	; (eb08 <cal_gain_off+0x2f8>)
    e94c:	1c11      	adds	r1, r2, #0
    e94e:	4798      	blx	r3
    e950:	1c03      	adds	r3, r0, #0
    e952:	1c19      	adds	r1, r3, #0
    e954:	4b6d      	ldr	r3, [pc, #436]	; (eb0c <cal_gain_off+0x2fc>)
    e956:	2285      	movs	r2, #133	; 0x85
    e958:	0112      	lsls	r2, r2, #4
    e95a:	2008      	movs	r0, #8
    e95c:	4684      	mov	ip, r0
    e95e:	44bc      	add	ip, r7
    e960:	4462      	add	r2, ip
    e962:	18d2      	adds	r2, r2, r3
    e964:	0023      	movs	r3, r4
    e966:	005b      	lsls	r3, r3, #1
    e968:	191b      	adds	r3, r3, r4
    e96a:	00db      	lsls	r3, r3, #3
    e96c:	18d3      	adds	r3, r2, r3
    e96e:	3308      	adds	r3, #8
    e970:	6019      	str	r1, [r3, #0]
		D[i][3] = 2*XYZ[i][0];
    e972:	4b64      	ldr	r3, [pc, #400]	; (eb04 <cal_gain_off+0x2f4>)
    e974:	2208      	movs	r2, #8
    e976:	4694      	mov	ip, r2
    e978:	44bc      	add	ip, r7
    e97a:	4463      	add	r3, ip
    e97c:	781c      	ldrb	r4, [r3, #0]
    e97e:	4b61      	ldr	r3, [pc, #388]	; (eb04 <cal_gain_off+0x2f4>)
    e980:	2208      	movs	r2, #8
    e982:	4694      	mov	ip, r2
    e984:	44bc      	add	ip, r7
    e986:	4463      	add	r3, ip
    e988:	781a      	ldrb	r2, [r3, #0]
    e98a:	0013      	movs	r3, r2
    e98c:	005b      	lsls	r3, r3, #1
    e98e:	189b      	adds	r3, r3, r2
    e990:	009b      	lsls	r3, r3, #2
    e992:	001a      	movs	r2, r3
    e994:	68fb      	ldr	r3, [r7, #12]
    e996:	189b      	adds	r3, r3, r2
    e998:	681a      	ldr	r2, [r3, #0]
    e99a:	4b5d      	ldr	r3, [pc, #372]	; (eb10 <cal_gain_off+0x300>)
    e99c:	1c11      	adds	r1, r2, #0
    e99e:	1c10      	adds	r0, r2, #0
    e9a0:	4798      	blx	r3
    e9a2:	1c03      	adds	r3, r0, #0
    e9a4:	1c19      	adds	r1, r3, #0
    e9a6:	4b59      	ldr	r3, [pc, #356]	; (eb0c <cal_gain_off+0x2fc>)
    e9a8:	2285      	movs	r2, #133	; 0x85
    e9aa:	0112      	lsls	r2, r2, #4
    e9ac:	2008      	movs	r0, #8
    e9ae:	4684      	mov	ip, r0
    e9b0:	44bc      	add	ip, r7
    e9b2:	4462      	add	r2, ip
    e9b4:	18d2      	adds	r2, r2, r3
    e9b6:	0023      	movs	r3, r4
    e9b8:	005b      	lsls	r3, r3, #1
    e9ba:	191b      	adds	r3, r3, r4
    e9bc:	00db      	lsls	r3, r3, #3
    e9be:	18d3      	adds	r3, r2, r3
    e9c0:	330c      	adds	r3, #12
    e9c2:	6019      	str	r1, [r3, #0]
		D[i][4] = 2*XYZ[i][1];
    e9c4:	4b4f      	ldr	r3, [pc, #316]	; (eb04 <cal_gain_off+0x2f4>)
    e9c6:	2208      	movs	r2, #8
    e9c8:	4694      	mov	ip, r2
    e9ca:	44bc      	add	ip, r7
    e9cc:	4463      	add	r3, ip
    e9ce:	781c      	ldrb	r4, [r3, #0]
    e9d0:	4b4c      	ldr	r3, [pc, #304]	; (eb04 <cal_gain_off+0x2f4>)
    e9d2:	2208      	movs	r2, #8
    e9d4:	4694      	mov	ip, r2
    e9d6:	44bc      	add	ip, r7
    e9d8:	4463      	add	r3, ip
    e9da:	781a      	ldrb	r2, [r3, #0]
    e9dc:	0013      	movs	r3, r2
    e9de:	005b      	lsls	r3, r3, #1
    e9e0:	189b      	adds	r3, r3, r2
    e9e2:	009b      	lsls	r3, r3, #2
    e9e4:	001a      	movs	r2, r3
    e9e6:	68fb      	ldr	r3, [r7, #12]
    e9e8:	189b      	adds	r3, r3, r2
    e9ea:	685a      	ldr	r2, [r3, #4]
    e9ec:	4b48      	ldr	r3, [pc, #288]	; (eb10 <cal_gain_off+0x300>)
    e9ee:	1c11      	adds	r1, r2, #0
    e9f0:	1c10      	adds	r0, r2, #0
    e9f2:	4798      	blx	r3
    e9f4:	1c03      	adds	r3, r0, #0
    e9f6:	1c19      	adds	r1, r3, #0
    e9f8:	4b44      	ldr	r3, [pc, #272]	; (eb0c <cal_gain_off+0x2fc>)
    e9fa:	2285      	movs	r2, #133	; 0x85
    e9fc:	0112      	lsls	r2, r2, #4
    e9fe:	2008      	movs	r0, #8
    ea00:	4684      	mov	ip, r0
    ea02:	44bc      	add	ip, r7
    ea04:	4462      	add	r2, ip
    ea06:	18d2      	adds	r2, r2, r3
    ea08:	0023      	movs	r3, r4
    ea0a:	005b      	lsls	r3, r3, #1
    ea0c:	191b      	adds	r3, r3, r4
    ea0e:	00db      	lsls	r3, r3, #3
    ea10:	18d3      	adds	r3, r2, r3
    ea12:	3310      	adds	r3, #16
    ea14:	6019      	str	r1, [r3, #0]
		D[i][5] = 2*XYZ[i][2];
    ea16:	4b3b      	ldr	r3, [pc, #236]	; (eb04 <cal_gain_off+0x2f4>)
    ea18:	2208      	movs	r2, #8
    ea1a:	4694      	mov	ip, r2
    ea1c:	44bc      	add	ip, r7
    ea1e:	4463      	add	r3, ip
    ea20:	781c      	ldrb	r4, [r3, #0]
    ea22:	4b38      	ldr	r3, [pc, #224]	; (eb04 <cal_gain_off+0x2f4>)
    ea24:	2208      	movs	r2, #8
    ea26:	4694      	mov	ip, r2
    ea28:	44bc      	add	ip, r7
    ea2a:	4463      	add	r3, ip
    ea2c:	781a      	ldrb	r2, [r3, #0]
    ea2e:	0013      	movs	r3, r2
    ea30:	005b      	lsls	r3, r3, #1
    ea32:	189b      	adds	r3, r3, r2
    ea34:	009b      	lsls	r3, r3, #2
    ea36:	001a      	movs	r2, r3
    ea38:	68fb      	ldr	r3, [r7, #12]
    ea3a:	189b      	adds	r3, r3, r2
    ea3c:	689a      	ldr	r2, [r3, #8]
    ea3e:	4b34      	ldr	r3, [pc, #208]	; (eb10 <cal_gain_off+0x300>)
    ea40:	1c11      	adds	r1, r2, #0
    ea42:	1c10      	adds	r0, r2, #0
    ea44:	4798      	blx	r3
    ea46:	1c03      	adds	r3, r0, #0
    ea48:	1c19      	adds	r1, r3, #0
    ea4a:	4b30      	ldr	r3, [pc, #192]	; (eb0c <cal_gain_off+0x2fc>)
    ea4c:	2285      	movs	r2, #133	; 0x85
    ea4e:	0112      	lsls	r2, r2, #4
    ea50:	2008      	movs	r0, #8
    ea52:	4684      	mov	ip, r0
    ea54:	44bc      	add	ip, r7
    ea56:	4462      	add	r2, ip
    ea58:	18d2      	adds	r2, r2, r3
    ea5a:	0023      	movs	r3, r4
    ea5c:	005b      	lsls	r3, r3, #1
    ea5e:	191b      	adds	r3, r3, r4
    ea60:	00db      	lsls	r3, r3, #3
    ea62:	18d3      	adds	r3, r2, r3
    ea64:	3314      	adds	r3, #20
    ea66:	6019      	str	r1, [r3, #0]
	for (i=0;i<n_points;i++){
    ea68:	4b26      	ldr	r3, [pc, #152]	; (eb04 <cal_gain_off+0x2f4>)
    ea6a:	2208      	movs	r2, #8
    ea6c:	4694      	mov	ip, r2
    ea6e:	44bc      	add	ip, r7
    ea70:	4463      	add	r3, ip
    ea72:	781a      	ldrb	r2, [r3, #0]
    ea74:	4b23      	ldr	r3, [pc, #140]	; (eb04 <cal_gain_off+0x2f4>)
    ea76:	2108      	movs	r1, #8
    ea78:	468c      	mov	ip, r1
    ea7a:	44bc      	add	ip, r7
    ea7c:	4463      	add	r3, ip
    ea7e:	3201      	adds	r2, #1
    ea80:	701a      	strb	r2, [r3, #0]
    ea82:	4b20      	ldr	r3, [pc, #128]	; (eb04 <cal_gain_off+0x2f4>)
    ea84:	2208      	movs	r2, #8
    ea86:	4694      	mov	ip, r2
    ea88:	44bc      	add	ip, r7
    ea8a:	4463      	add	r3, ip
    ea8c:	781a      	ldrb	r2, [r3, #0]
    ea8e:	4b21      	ldr	r3, [pc, #132]	; (eb14 <cal_gain_off+0x304>)
    ea90:	681b      	ldr	r3, [r3, #0]
    ea92:	429a      	cmp	r2, r3
    ea94:	d200      	bcs.n	ea98 <cal_gain_off+0x288>
    ea96:	e6cc      	b.n	e832 <cal_gain_off+0x22>
		
	}
	
	for (i=0;i<6;i++){
    ea98:	4b1a      	ldr	r3, [pc, #104]	; (eb04 <cal_gain_off+0x2f4>)
    ea9a:	2208      	movs	r2, #8
    ea9c:	4694      	mov	ip, r2
    ea9e:	44bc      	add	ip, r7
    eaa0:	4463      	add	r3, ip
    eaa2:	2200      	movs	r2, #0
    eaa4:	701a      	strb	r2, [r3, #0]
    eaa6:	e0f2      	b.n	ec8e <cal_gain_off+0x47e>
		for (j=0;j<6;j++){
    eaa8:	4b1b      	ldr	r3, [pc, #108]	; (eb18 <cal_gain_off+0x308>)
    eaaa:	2208      	movs	r2, #8
    eaac:	4694      	mov	ip, r2
    eaae:	44bc      	add	ip, r7
    eab0:	4463      	add	r3, ip
    eab2:	2200      	movs	r2, #0
    eab4:	701a      	strb	r2, [r3, #0]
    eab6:	e0d4      	b.n	ec62 <cal_gain_off+0x452>
			temp1[i][j] = 0;
    eab8:	4b12      	ldr	r3, [pc, #72]	; (eb04 <cal_gain_off+0x2f4>)
    eaba:	2208      	movs	r2, #8
    eabc:	4694      	mov	ip, r2
    eabe:	44bc      	add	ip, r7
    eac0:	4463      	add	r3, ip
    eac2:	781a      	ldrb	r2, [r3, #0]
    eac4:	4b14      	ldr	r3, [pc, #80]	; (eb18 <cal_gain_off+0x308>)
    eac6:	2108      	movs	r1, #8
    eac8:	468c      	mov	ip, r1
    eaca:	44bc      	add	ip, r7
    eacc:	4463      	add	r3, ip
    eace:	7818      	ldrb	r0, [r3, #0]
    ead0:	4b12      	ldr	r3, [pc, #72]	; (eb1c <cal_gain_off+0x30c>)
    ead2:	2185      	movs	r1, #133	; 0x85
    ead4:	0109      	lsls	r1, r1, #4
    ead6:	2408      	movs	r4, #8
    ead8:	46a4      	mov	ip, r4
    eada:	44bc      	add	ip, r7
    eadc:	4461      	add	r1, ip
    eade:	18c9      	adds	r1, r1, r3
    eae0:	0013      	movs	r3, r2
    eae2:	005b      	lsls	r3, r3, #1
    eae4:	189b      	adds	r3, r3, r2
    eae6:	005b      	lsls	r3, r3, #1
    eae8:	181b      	adds	r3, r3, r0
    eaea:	009b      	lsls	r3, r3, #2
    eaec:	2200      	movs	r2, #0
    eaee:	505a      	str	r2, [r3, r1]
			for (k=0;k<n_points;k++){
    eaf0:	4b0b      	ldr	r3, [pc, #44]	; (eb20 <cal_gain_off+0x310>)
    eaf2:	2208      	movs	r2, #8
    eaf4:	4694      	mov	ip, r2
    eaf6:	44bc      	add	ip, r7
    eaf8:	4463      	add	r3, ip
    eafa:	2200      	movs	r2, #0
    eafc:	701a      	strb	r2, [r3, #0]
    eafe:	e098      	b.n	ec32 <cal_gain_off+0x422>
    eb00:	fffff7a4 	.word	0xfffff7a4
    eb04:	0000084f 	.word	0x0000084f
    eb08:	000217d9 	.word	0x000217d9
    eb0c:	fffff878 	.word	0xfffff878
    eb10:	000210d5 	.word	0x000210d5
    eb14:	20002db4 	.word	0x20002db4
    eb18:	0000084e 	.word	0x0000084e
    eb1c:	fffff7e8 	.word	0xfffff7e8
    eb20:	0000084d 	.word	0x0000084d
				temp1[i][j] = temp1[i][j] + D[k][i]*D[k][j];
    eb24:	4bbf      	ldr	r3, [pc, #764]	; (ee24 <cal_gain_off+0x614>)
    eb26:	2208      	movs	r2, #8
    eb28:	4694      	mov	ip, r2
    eb2a:	44bc      	add	ip, r7
    eb2c:	4463      	add	r3, ip
    eb2e:	781c      	ldrb	r4, [r3, #0]
    eb30:	4bbd      	ldr	r3, [pc, #756]	; (ee28 <cal_gain_off+0x618>)
    eb32:	2208      	movs	r2, #8
    eb34:	4694      	mov	ip, r2
    eb36:	44bc      	add	ip, r7
    eb38:	4463      	add	r3, ip
    eb3a:	781b      	ldrb	r3, [r3, #0]
    eb3c:	4699      	mov	r9, r3
    eb3e:	4bb9      	ldr	r3, [pc, #740]	; (ee24 <cal_gain_off+0x614>)
    eb40:	2208      	movs	r2, #8
    eb42:	4694      	mov	ip, r2
    eb44:	44bc      	add	ip, r7
    eb46:	4463      	add	r3, ip
    eb48:	781a      	ldrb	r2, [r3, #0]
    eb4a:	4bb7      	ldr	r3, [pc, #732]	; (ee28 <cal_gain_off+0x618>)
    eb4c:	2108      	movs	r1, #8
    eb4e:	468c      	mov	ip, r1
    eb50:	44bc      	add	ip, r7
    eb52:	4463      	add	r3, ip
    eb54:	7818      	ldrb	r0, [r3, #0]
    eb56:	4bb5      	ldr	r3, [pc, #724]	; (ee2c <cal_gain_off+0x61c>)
    eb58:	2185      	movs	r1, #133	; 0x85
    eb5a:	0109      	lsls	r1, r1, #4
    eb5c:	2508      	movs	r5, #8
    eb5e:	46ac      	mov	ip, r5
    eb60:	44bc      	add	ip, r7
    eb62:	4461      	add	r1, ip
    eb64:	18c9      	adds	r1, r1, r3
    eb66:	0013      	movs	r3, r2
    eb68:	005b      	lsls	r3, r3, #1
    eb6a:	189b      	adds	r3, r3, r2
    eb6c:	005b      	lsls	r3, r3, #1
    eb6e:	181b      	adds	r3, r3, r0
    eb70:	009b      	lsls	r3, r3, #2
    eb72:	585e      	ldr	r6, [r3, r1]
    eb74:	4bae      	ldr	r3, [pc, #696]	; (ee30 <cal_gain_off+0x620>)
    eb76:	2208      	movs	r2, #8
    eb78:	4694      	mov	ip, r2
    eb7a:	44bc      	add	ip, r7
    eb7c:	4463      	add	r3, ip
    eb7e:	781a      	ldrb	r2, [r3, #0]
    eb80:	4ba8      	ldr	r3, [pc, #672]	; (ee24 <cal_gain_off+0x614>)
    eb82:	2108      	movs	r1, #8
    eb84:	468c      	mov	ip, r1
    eb86:	44bc      	add	ip, r7
    eb88:	4463      	add	r3, ip
    eb8a:	7818      	ldrb	r0, [r3, #0]
    eb8c:	4ba9      	ldr	r3, [pc, #676]	; (ee34 <cal_gain_off+0x624>)
    eb8e:	2185      	movs	r1, #133	; 0x85
    eb90:	0109      	lsls	r1, r1, #4
    eb92:	2508      	movs	r5, #8
    eb94:	46ac      	mov	ip, r5
    eb96:	44bc      	add	ip, r7
    eb98:	4461      	add	r1, ip
    eb9a:	18c9      	adds	r1, r1, r3
    eb9c:	0013      	movs	r3, r2
    eb9e:	005b      	lsls	r3, r3, #1
    eba0:	189b      	adds	r3, r3, r2
    eba2:	005b      	lsls	r3, r3, #1
    eba4:	181b      	adds	r3, r3, r0
    eba6:	009b      	lsls	r3, r3, #2
    eba8:	585b      	ldr	r3, [r3, r1]
    ebaa:	469c      	mov	ip, r3
    ebac:	4ba0      	ldr	r3, [pc, #640]	; (ee30 <cal_gain_off+0x620>)
    ebae:	2208      	movs	r2, #8
    ebb0:	4690      	mov	r8, r2
    ebb2:	44b8      	add	r8, r7
    ebb4:	4443      	add	r3, r8
    ebb6:	781a      	ldrb	r2, [r3, #0]
    ebb8:	4b9b      	ldr	r3, [pc, #620]	; (ee28 <cal_gain_off+0x618>)
    ebba:	2108      	movs	r1, #8
    ebbc:	4688      	mov	r8, r1
    ebbe:	44b8      	add	r8, r7
    ebc0:	4443      	add	r3, r8
    ebc2:	7818      	ldrb	r0, [r3, #0]
    ebc4:	4b9b      	ldr	r3, [pc, #620]	; (ee34 <cal_gain_off+0x624>)
    ebc6:	2185      	movs	r1, #133	; 0x85
    ebc8:	0109      	lsls	r1, r1, #4
    ebca:	2508      	movs	r5, #8
    ebcc:	46a8      	mov	r8, r5
    ebce:	44b8      	add	r8, r7
    ebd0:	4441      	add	r1, r8
    ebd2:	18c9      	adds	r1, r1, r3
    ebd4:	0013      	movs	r3, r2
    ebd6:	005b      	lsls	r3, r3, #1
    ebd8:	189b      	adds	r3, r3, r2
    ebda:	005b      	lsls	r3, r3, #1
    ebdc:	181b      	adds	r3, r3, r0
    ebde:	009b      	lsls	r3, r3, #2
    ebe0:	585a      	ldr	r2, [r3, r1]
    ebe2:	4b95      	ldr	r3, [pc, #596]	; (ee38 <cal_gain_off+0x628>)
    ebe4:	1c11      	adds	r1, r2, #0
    ebe6:	4660      	mov	r0, ip
    ebe8:	4798      	blx	r3
    ebea:	1c03      	adds	r3, r0, #0
    ebec:	1c1a      	adds	r2, r3, #0
    ebee:	4b93      	ldr	r3, [pc, #588]	; (ee3c <cal_gain_off+0x62c>)
    ebf0:	1c11      	adds	r1, r2, #0
    ebf2:	1c30      	adds	r0, r6, #0
    ebf4:	4798      	blx	r3
    ebf6:	1c03      	adds	r3, r0, #0
    ebf8:	1c19      	adds	r1, r3, #0
    ebfa:	4b8c      	ldr	r3, [pc, #560]	; (ee2c <cal_gain_off+0x61c>)
    ebfc:	2285      	movs	r2, #133	; 0x85
    ebfe:	0112      	lsls	r2, r2, #4
    ec00:	2008      	movs	r0, #8
    ec02:	4684      	mov	ip, r0
    ec04:	44bc      	add	ip, r7
    ec06:	4462      	add	r2, ip
    ec08:	18d2      	adds	r2, r2, r3
    ec0a:	0023      	movs	r3, r4
    ec0c:	005b      	lsls	r3, r3, #1
    ec0e:	191b      	adds	r3, r3, r4
    ec10:	005b      	lsls	r3, r3, #1
    ec12:	444b      	add	r3, r9
    ec14:	009b      	lsls	r3, r3, #2
    ec16:	5099      	str	r1, [r3, r2]
			for (k=0;k<n_points;k++){
    ec18:	4b85      	ldr	r3, [pc, #532]	; (ee30 <cal_gain_off+0x620>)
    ec1a:	2208      	movs	r2, #8
    ec1c:	4694      	mov	ip, r2
    ec1e:	44bc      	add	ip, r7
    ec20:	4463      	add	r3, ip
    ec22:	781a      	ldrb	r2, [r3, #0]
    ec24:	4b82      	ldr	r3, [pc, #520]	; (ee30 <cal_gain_off+0x620>)
    ec26:	2108      	movs	r1, #8
    ec28:	468c      	mov	ip, r1
    ec2a:	44bc      	add	ip, r7
    ec2c:	4463      	add	r3, ip
    ec2e:	3201      	adds	r2, #1
    ec30:	701a      	strb	r2, [r3, #0]
    ec32:	4b7f      	ldr	r3, [pc, #508]	; (ee30 <cal_gain_off+0x620>)
    ec34:	2208      	movs	r2, #8
    ec36:	4694      	mov	ip, r2
    ec38:	44bc      	add	ip, r7
    ec3a:	4463      	add	r3, ip
    ec3c:	781a      	ldrb	r2, [r3, #0]
    ec3e:	4b80      	ldr	r3, [pc, #512]	; (ee40 <cal_gain_off+0x630>)
    ec40:	681b      	ldr	r3, [r3, #0]
    ec42:	429a      	cmp	r2, r3
    ec44:	d200      	bcs.n	ec48 <cal_gain_off+0x438>
    ec46:	e76d      	b.n	eb24 <cal_gain_off+0x314>
		for (j=0;j<6;j++){
    ec48:	4b77      	ldr	r3, [pc, #476]	; (ee28 <cal_gain_off+0x618>)
    ec4a:	2208      	movs	r2, #8
    ec4c:	4694      	mov	ip, r2
    ec4e:	44bc      	add	ip, r7
    ec50:	4463      	add	r3, ip
    ec52:	781a      	ldrb	r2, [r3, #0]
    ec54:	4b74      	ldr	r3, [pc, #464]	; (ee28 <cal_gain_off+0x618>)
    ec56:	2108      	movs	r1, #8
    ec58:	468c      	mov	ip, r1
    ec5a:	44bc      	add	ip, r7
    ec5c:	4463      	add	r3, ip
    ec5e:	3201      	adds	r2, #1
    ec60:	701a      	strb	r2, [r3, #0]
    ec62:	4b71      	ldr	r3, [pc, #452]	; (ee28 <cal_gain_off+0x618>)
    ec64:	2208      	movs	r2, #8
    ec66:	4694      	mov	ip, r2
    ec68:	44bc      	add	ip, r7
    ec6a:	4463      	add	r3, ip
    ec6c:	781b      	ldrb	r3, [r3, #0]
    ec6e:	2b05      	cmp	r3, #5
    ec70:	d800      	bhi.n	ec74 <cal_gain_off+0x464>
    ec72:	e721      	b.n	eab8 <cal_gain_off+0x2a8>
	for (i=0;i<6;i++){
    ec74:	4b6b      	ldr	r3, [pc, #428]	; (ee24 <cal_gain_off+0x614>)
    ec76:	2208      	movs	r2, #8
    ec78:	4694      	mov	ip, r2
    ec7a:	44bc      	add	ip, r7
    ec7c:	4463      	add	r3, ip
    ec7e:	781a      	ldrb	r2, [r3, #0]
    ec80:	4b68      	ldr	r3, [pc, #416]	; (ee24 <cal_gain_off+0x614>)
    ec82:	2108      	movs	r1, #8
    ec84:	468c      	mov	ip, r1
    ec86:	44bc      	add	ip, r7
    ec88:	4463      	add	r3, ip
    ec8a:	3201      	adds	r2, #1
    ec8c:	701a      	strb	r2, [r3, #0]
    ec8e:	4b65      	ldr	r3, [pc, #404]	; (ee24 <cal_gain_off+0x614>)
    ec90:	2208      	movs	r2, #8
    ec92:	4694      	mov	ip, r2
    ec94:	44bc      	add	ip, r7
    ec96:	4463      	add	r3, ip
    ec98:	781b      	ldrb	r3, [r3, #0]
    ec9a:	2b05      	cmp	r3, #5
    ec9c:	d800      	bhi.n	eca0 <cal_gain_off+0x490>
    ec9e:	e703      	b.n	eaa8 <cal_gain_off+0x298>
	
	//printf("\n\nTemp Matrix:\n");
	//print_matrix(temp1, 6, 6);
	

	inverse(temp1, temp1, 6);
    eca0:	2338      	movs	r3, #56	; 0x38
    eca2:	2208      	movs	r2, #8
    eca4:	18ba      	adds	r2, r7, r2
    eca6:	18d1      	adds	r1, r2, r3
    eca8:	2338      	movs	r3, #56	; 0x38
    ecaa:	2208      	movs	r2, #8
    ecac:	4694      	mov	ip, r2
    ecae:	44bc      	add	ip, r7
    ecb0:	4463      	add	r3, ip
    ecb2:	2206      	movs	r2, #6
    ecb4:	0018      	movs	r0, r3
    ecb6:	4b63      	ldr	r3, [pc, #396]	; (ee44 <cal_gain_off+0x634>)
    ecb8:	4798      	blx	r3
	
	//printf("\n\nInverse of Temp Matrix:\n");
	//print_matrix(temp1,6, 6);
	
	for (i=0;i<6;i++){
    ecba:	4b5a      	ldr	r3, [pc, #360]	; (ee24 <cal_gain_off+0x614>)
    ecbc:	2208      	movs	r2, #8
    ecbe:	4694      	mov	ip, r2
    ecc0:	44bc      	add	ip, r7
    ecc2:	4463      	add	r3, ip
    ecc4:	2200      	movs	r2, #0
    ecc6:	701a      	strb	r2, [r3, #0]
    ecc8:	e080      	b.n	edcc <cal_gain_off+0x5bc>
		temp2[i] = 0;
    ecca:	4b56      	ldr	r3, [pc, #344]	; (ee24 <cal_gain_off+0x614>)
    eccc:	2208      	movs	r2, #8
    ecce:	4694      	mov	ip, r2
    ecd0:	44bc      	add	ip, r7
    ecd2:	4463      	add	r3, ip
    ecd4:	781a      	ldrb	r2, [r3, #0]
    ecd6:	4b5c      	ldr	r3, [pc, #368]	; (ee48 <cal_gain_off+0x638>)
    ecd8:	2185      	movs	r1, #133	; 0x85
    ecda:	0109      	lsls	r1, r1, #4
    ecdc:	468c      	mov	ip, r1
    ecde:	2108      	movs	r1, #8
    ece0:	4688      	mov	r8, r1
    ece2:	44b8      	add	r8, r7
    ece4:	44c4      	add	ip, r8
    ece6:	4463      	add	r3, ip
    ece8:	0092      	lsls	r2, r2, #2
    ecea:	2100      	movs	r1, #0
    ecec:	50d1      	str	r1, [r2, r3]
		for (k = 0;k<n_points;k++){
    ecee:	4b50      	ldr	r3, [pc, #320]	; (ee30 <cal_gain_off+0x620>)
    ecf0:	2208      	movs	r2, #8
    ecf2:	4694      	mov	ip, r2
    ecf4:	44bc      	add	ip, r7
    ecf6:	4463      	add	r3, ip
    ecf8:	2200      	movs	r2, #0
    ecfa:	701a      	strb	r2, [r3, #0]
    ecfc:	e04f      	b.n	ed9e <cal_gain_off+0x58e>
			temp2[i] = temp2[i]+D[k][i];
    ecfe:	4b49      	ldr	r3, [pc, #292]	; (ee24 <cal_gain_off+0x614>)
    ed00:	2208      	movs	r2, #8
    ed02:	4694      	mov	ip, r2
    ed04:	44bc      	add	ip, r7
    ed06:	4463      	add	r3, ip
    ed08:	781c      	ldrb	r4, [r3, #0]
    ed0a:	4b46      	ldr	r3, [pc, #280]	; (ee24 <cal_gain_off+0x614>)
    ed0c:	2208      	movs	r2, #8
    ed0e:	4694      	mov	ip, r2
    ed10:	44bc      	add	ip, r7
    ed12:	4463      	add	r3, ip
    ed14:	781a      	ldrb	r2, [r3, #0]
    ed16:	4b4c      	ldr	r3, [pc, #304]	; (ee48 <cal_gain_off+0x638>)
    ed18:	2185      	movs	r1, #133	; 0x85
    ed1a:	0109      	lsls	r1, r1, #4
    ed1c:	468c      	mov	ip, r1
    ed1e:	2108      	movs	r1, #8
    ed20:	4688      	mov	r8, r1
    ed22:	44b8      	add	r8, r7
    ed24:	44c4      	add	ip, r8
    ed26:	4463      	add	r3, ip
    ed28:	0092      	lsls	r2, r2, #2
    ed2a:	58d5      	ldr	r5, [r2, r3]
    ed2c:	4b40      	ldr	r3, [pc, #256]	; (ee30 <cal_gain_off+0x620>)
    ed2e:	2208      	movs	r2, #8
    ed30:	4694      	mov	ip, r2
    ed32:	44bc      	add	ip, r7
    ed34:	4463      	add	r3, ip
    ed36:	781a      	ldrb	r2, [r3, #0]
    ed38:	4b3a      	ldr	r3, [pc, #232]	; (ee24 <cal_gain_off+0x614>)
    ed3a:	2108      	movs	r1, #8
    ed3c:	468c      	mov	ip, r1
    ed3e:	44bc      	add	ip, r7
    ed40:	4463      	add	r3, ip
    ed42:	7818      	ldrb	r0, [r3, #0]
    ed44:	4b3b      	ldr	r3, [pc, #236]	; (ee34 <cal_gain_off+0x624>)
    ed46:	2185      	movs	r1, #133	; 0x85
    ed48:	0109      	lsls	r1, r1, #4
    ed4a:	2608      	movs	r6, #8
    ed4c:	46b4      	mov	ip, r6
    ed4e:	44bc      	add	ip, r7
    ed50:	4461      	add	r1, ip
    ed52:	18c9      	adds	r1, r1, r3
    ed54:	0013      	movs	r3, r2
    ed56:	005b      	lsls	r3, r3, #1
    ed58:	189b      	adds	r3, r3, r2
    ed5a:	005b      	lsls	r3, r3, #1
    ed5c:	181b      	adds	r3, r3, r0
    ed5e:	009b      	lsls	r3, r3, #2
    ed60:	585a      	ldr	r2, [r3, r1]
    ed62:	4b36      	ldr	r3, [pc, #216]	; (ee3c <cal_gain_off+0x62c>)
    ed64:	1c11      	adds	r1, r2, #0
    ed66:	1c28      	adds	r0, r5, #0
    ed68:	4798      	blx	r3
    ed6a:	1c03      	adds	r3, r0, #0
    ed6c:	1c19      	adds	r1, r3, #0
    ed6e:	4b36      	ldr	r3, [pc, #216]	; (ee48 <cal_gain_off+0x638>)
    ed70:	2285      	movs	r2, #133	; 0x85
    ed72:	0112      	lsls	r2, r2, #4
    ed74:	4694      	mov	ip, r2
    ed76:	2208      	movs	r2, #8
    ed78:	4690      	mov	r8, r2
    ed7a:	44b8      	add	r8, r7
    ed7c:	44c4      	add	ip, r8
    ed7e:	4463      	add	r3, ip
    ed80:	00a2      	lsls	r2, r4, #2
    ed82:	50d1      	str	r1, [r2, r3]
		for (k = 0;k<n_points;k++){
    ed84:	4b2a      	ldr	r3, [pc, #168]	; (ee30 <cal_gain_off+0x620>)
    ed86:	2208      	movs	r2, #8
    ed88:	4694      	mov	ip, r2
    ed8a:	44bc      	add	ip, r7
    ed8c:	4463      	add	r3, ip
    ed8e:	781a      	ldrb	r2, [r3, #0]
    ed90:	4b27      	ldr	r3, [pc, #156]	; (ee30 <cal_gain_off+0x620>)
    ed92:	2108      	movs	r1, #8
    ed94:	468c      	mov	ip, r1
    ed96:	44bc      	add	ip, r7
    ed98:	4463      	add	r3, ip
    ed9a:	3201      	adds	r2, #1
    ed9c:	701a      	strb	r2, [r3, #0]
    ed9e:	4b24      	ldr	r3, [pc, #144]	; (ee30 <cal_gain_off+0x620>)
    eda0:	2208      	movs	r2, #8
    eda2:	4694      	mov	ip, r2
    eda4:	44bc      	add	ip, r7
    eda6:	4463      	add	r3, ip
    eda8:	781a      	ldrb	r2, [r3, #0]
    edaa:	4b25      	ldr	r3, [pc, #148]	; (ee40 <cal_gain_off+0x630>)
    edac:	681b      	ldr	r3, [r3, #0]
    edae:	429a      	cmp	r2, r3
    edb0:	d3a5      	bcc.n	ecfe <cal_gain_off+0x4ee>
	for (i=0;i<6;i++){
    edb2:	4b1c      	ldr	r3, [pc, #112]	; (ee24 <cal_gain_off+0x614>)
    edb4:	2208      	movs	r2, #8
    edb6:	4694      	mov	ip, r2
    edb8:	44bc      	add	ip, r7
    edba:	4463      	add	r3, ip
    edbc:	781a      	ldrb	r2, [r3, #0]
    edbe:	4b19      	ldr	r3, [pc, #100]	; (ee24 <cal_gain_off+0x614>)
    edc0:	2108      	movs	r1, #8
    edc2:	468c      	mov	ip, r1
    edc4:	44bc      	add	ip, r7
    edc6:	4463      	add	r3, ip
    edc8:	3201      	adds	r2, #1
    edca:	701a      	strb	r2, [r3, #0]
    edcc:	4b15      	ldr	r3, [pc, #84]	; (ee24 <cal_gain_off+0x614>)
    edce:	2208      	movs	r2, #8
    edd0:	4694      	mov	ip, r2
    edd2:	44bc      	add	ip, r7
    edd4:	4463      	add	r3, ip
    edd6:	781b      	ldrb	r3, [r3, #0]
    edd8:	2b05      	cmp	r3, #5
    edda:	d800      	bhi.n	edde <cal_gain_off+0x5ce>
    eddc:	e775      	b.n	ecca <cal_gain_off+0x4ba>
		}
		
	}
	

	for (i=0;i<6;i++){
    edde:	4b11      	ldr	r3, [pc, #68]	; (ee24 <cal_gain_off+0x614>)
    ede0:	2208      	movs	r2, #8
    ede2:	4694      	mov	ip, r2
    ede4:	44bc      	add	ip, r7
    ede6:	4463      	add	r3, ip
    ede8:	2200      	movs	r2, #0
    edea:	701a      	strb	r2, [r3, #0]
    edec:	e0ab      	b.n	ef46 <cal_gain_off+0x736>
		v[i] = 0;
    edee:	4b0d      	ldr	r3, [pc, #52]	; (ee24 <cal_gain_off+0x614>)
    edf0:	2208      	movs	r2, #8
    edf2:	4694      	mov	ip, r2
    edf4:	44bc      	add	ip, r7
    edf6:	4463      	add	r3, ip
    edf8:	781a      	ldrb	r2, [r3, #0]
    edfa:	4b14      	ldr	r3, [pc, #80]	; (ee4c <cal_gain_off+0x63c>)
    edfc:	2185      	movs	r1, #133	; 0x85
    edfe:	0109      	lsls	r1, r1, #4
    ee00:	468c      	mov	ip, r1
    ee02:	2108      	movs	r1, #8
    ee04:	4688      	mov	r8, r1
    ee06:	44b8      	add	r8, r7
    ee08:	44c4      	add	ip, r8
    ee0a:	4463      	add	r3, ip
    ee0c:	0092      	lsls	r2, r2, #2
    ee0e:	2100      	movs	r1, #0
    ee10:	50d1      	str	r1, [r2, r3]
		for (j=0;j<6;j++){
    ee12:	4b05      	ldr	r3, [pc, #20]	; (ee28 <cal_gain_off+0x618>)
    ee14:	2208      	movs	r2, #8
    ee16:	4694      	mov	ip, r2
    ee18:	44bc      	add	ip, r7
    ee1a:	4463      	add	r3, ip
    ee1c:	2200      	movs	r2, #0
    ee1e:	701a      	strb	r2, [r3, #0]
    ee20:	e07c      	b.n	ef1c <cal_gain_off+0x70c>
    ee22:	46c0      	nop			; (mov r8, r8)
    ee24:	0000084f 	.word	0x0000084f
    ee28:	0000084e 	.word	0x0000084e
    ee2c:	fffff7e8 	.word	0xfffff7e8
    ee30:	0000084d 	.word	0x0000084d
    ee34:	fffff878 	.word	0xfffff878
    ee38:	000217d9 	.word	0x000217d9
    ee3c:	000210d5 	.word	0x000210d5
    ee40:	20002db4 	.word	0x20002db4
    ee44:	0000f24d 	.word	0x0000f24d
    ee48:	fffff7d0 	.word	0xfffff7d0
    ee4c:	fffff7b8 	.word	0xfffff7b8
			v[i] = v[i]+temp1[i][j]*temp2[j];
    ee50:	4bed      	ldr	r3, [pc, #948]	; (f208 <cal_gain_off+0x9f8>)
    ee52:	2208      	movs	r2, #8
    ee54:	4694      	mov	ip, r2
    ee56:	44bc      	add	ip, r7
    ee58:	4463      	add	r3, ip
    ee5a:	781c      	ldrb	r4, [r3, #0]
    ee5c:	4bea      	ldr	r3, [pc, #936]	; (f208 <cal_gain_off+0x9f8>)
    ee5e:	2208      	movs	r2, #8
    ee60:	4694      	mov	ip, r2
    ee62:	44bc      	add	ip, r7
    ee64:	4463      	add	r3, ip
    ee66:	781a      	ldrb	r2, [r3, #0]
    ee68:	4be8      	ldr	r3, [pc, #928]	; (f20c <cal_gain_off+0x9fc>)
    ee6a:	2185      	movs	r1, #133	; 0x85
    ee6c:	0109      	lsls	r1, r1, #4
    ee6e:	468c      	mov	ip, r1
    ee70:	2108      	movs	r1, #8
    ee72:	4688      	mov	r8, r1
    ee74:	44b8      	add	r8, r7
    ee76:	44c4      	add	ip, r8
    ee78:	4463      	add	r3, ip
    ee7a:	0092      	lsls	r2, r2, #2
    ee7c:	58d5      	ldr	r5, [r2, r3]
    ee7e:	4be2      	ldr	r3, [pc, #904]	; (f208 <cal_gain_off+0x9f8>)
    ee80:	2208      	movs	r2, #8
    ee82:	4694      	mov	ip, r2
    ee84:	44bc      	add	ip, r7
    ee86:	4463      	add	r3, ip
    ee88:	781a      	ldrb	r2, [r3, #0]
    ee8a:	4be1      	ldr	r3, [pc, #900]	; (f210 <cal_gain_off+0xa00>)
    ee8c:	2108      	movs	r1, #8
    ee8e:	468c      	mov	ip, r1
    ee90:	44bc      	add	ip, r7
    ee92:	4463      	add	r3, ip
    ee94:	7818      	ldrb	r0, [r3, #0]
    ee96:	4bdf      	ldr	r3, [pc, #892]	; (f214 <cal_gain_off+0xa04>)
    ee98:	2185      	movs	r1, #133	; 0x85
    ee9a:	0109      	lsls	r1, r1, #4
    ee9c:	2608      	movs	r6, #8
    ee9e:	46b4      	mov	ip, r6
    eea0:	44bc      	add	ip, r7
    eea2:	4461      	add	r1, ip
    eea4:	18c9      	adds	r1, r1, r3
    eea6:	0013      	movs	r3, r2
    eea8:	005b      	lsls	r3, r3, #1
    eeaa:	189b      	adds	r3, r3, r2
    eeac:	005b      	lsls	r3, r3, #1
    eeae:	181b      	adds	r3, r3, r0
    eeb0:	009b      	lsls	r3, r3, #2
    eeb2:	5858      	ldr	r0, [r3, r1]
    eeb4:	4bd6      	ldr	r3, [pc, #856]	; (f210 <cal_gain_off+0xa00>)
    eeb6:	2208      	movs	r2, #8
    eeb8:	4694      	mov	ip, r2
    eeba:	44bc      	add	ip, r7
    eebc:	4463      	add	r3, ip
    eebe:	781a      	ldrb	r2, [r3, #0]
    eec0:	4bd5      	ldr	r3, [pc, #852]	; (f218 <cal_gain_off+0xa08>)
    eec2:	2185      	movs	r1, #133	; 0x85
    eec4:	0109      	lsls	r1, r1, #4
    eec6:	468c      	mov	ip, r1
    eec8:	2108      	movs	r1, #8
    eeca:	4688      	mov	r8, r1
    eecc:	44b8      	add	r8, r7
    eece:	44c4      	add	ip, r8
    eed0:	4463      	add	r3, ip
    eed2:	0092      	lsls	r2, r2, #2
    eed4:	58d2      	ldr	r2, [r2, r3]
    eed6:	4bd1      	ldr	r3, [pc, #836]	; (f21c <cal_gain_off+0xa0c>)
    eed8:	1c11      	adds	r1, r2, #0
    eeda:	4798      	blx	r3
    eedc:	1c03      	adds	r3, r0, #0
    eede:	1c1a      	adds	r2, r3, #0
    eee0:	4bcf      	ldr	r3, [pc, #828]	; (f220 <cal_gain_off+0xa10>)
    eee2:	1c11      	adds	r1, r2, #0
    eee4:	1c28      	adds	r0, r5, #0
    eee6:	4798      	blx	r3
    eee8:	1c03      	adds	r3, r0, #0
    eeea:	1c19      	adds	r1, r3, #0
    eeec:	4bc7      	ldr	r3, [pc, #796]	; (f20c <cal_gain_off+0x9fc>)
    eeee:	2285      	movs	r2, #133	; 0x85
    eef0:	0112      	lsls	r2, r2, #4
    eef2:	4694      	mov	ip, r2
    eef4:	2208      	movs	r2, #8
    eef6:	4690      	mov	r8, r2
    eef8:	44b8      	add	r8, r7
    eefa:	44c4      	add	ip, r8
    eefc:	4463      	add	r3, ip
    eefe:	00a2      	lsls	r2, r4, #2
    ef00:	50d1      	str	r1, [r2, r3]
		for (j=0;j<6;j++){
    ef02:	4bc3      	ldr	r3, [pc, #780]	; (f210 <cal_gain_off+0xa00>)
    ef04:	2208      	movs	r2, #8
    ef06:	4694      	mov	ip, r2
    ef08:	44bc      	add	ip, r7
    ef0a:	4463      	add	r3, ip
    ef0c:	781a      	ldrb	r2, [r3, #0]
    ef0e:	4bc0      	ldr	r3, [pc, #768]	; (f210 <cal_gain_off+0xa00>)
    ef10:	2108      	movs	r1, #8
    ef12:	468c      	mov	ip, r1
    ef14:	44bc      	add	ip, r7
    ef16:	4463      	add	r3, ip
    ef18:	3201      	adds	r2, #1
    ef1a:	701a      	strb	r2, [r3, #0]
    ef1c:	4bbc      	ldr	r3, [pc, #752]	; (f210 <cal_gain_off+0xa00>)
    ef1e:	2208      	movs	r2, #8
    ef20:	4694      	mov	ip, r2
    ef22:	44bc      	add	ip, r7
    ef24:	4463      	add	r3, ip
    ef26:	781b      	ldrb	r3, [r3, #0]
    ef28:	2b05      	cmp	r3, #5
    ef2a:	d991      	bls.n	ee50 <cal_gain_off+0x640>
	for (i=0;i<6;i++){
    ef2c:	4bb6      	ldr	r3, [pc, #728]	; (f208 <cal_gain_off+0x9f8>)
    ef2e:	2208      	movs	r2, #8
    ef30:	4694      	mov	ip, r2
    ef32:	44bc      	add	ip, r7
    ef34:	4463      	add	r3, ip
    ef36:	781a      	ldrb	r2, [r3, #0]
    ef38:	4bb3      	ldr	r3, [pc, #716]	; (f208 <cal_gain_off+0x9f8>)
    ef3a:	2108      	movs	r1, #8
    ef3c:	468c      	mov	ip, r1
    ef3e:	44bc      	add	ip, r7
    ef40:	4463      	add	r3, ip
    ef42:	3201      	adds	r2, #1
    ef44:	701a      	strb	r2, [r3, #0]
    ef46:	4bb0      	ldr	r3, [pc, #704]	; (f208 <cal_gain_off+0x9f8>)
    ef48:	2208      	movs	r2, #8
    ef4a:	4694      	mov	ip, r2
    ef4c:	44bc      	add	ip, r7
    ef4e:	4463      	add	r3, ip
    ef50:	781b      	ldrb	r3, [r3, #0]
    ef52:	2b05      	cmp	r3, #5
    ef54:	d800      	bhi.n	ef58 <cal_gain_off+0x748>
    ef56:	e74a      	b.n	edee <cal_gain_off+0x5de>
		}
		
	}
	

	for (i=0;i<3;i++){
    ef58:	4bab      	ldr	r3, [pc, #684]	; (f208 <cal_gain_off+0x9f8>)
    ef5a:	2208      	movs	r2, #8
    ef5c:	4694      	mov	ip, r2
    ef5e:	44bc      	add	ip, r7
    ef60:	4463      	add	r3, ip
    ef62:	2200      	movs	r2, #0
    ef64:	701a      	strb	r2, [r3, #0]
    ef66:	e042      	b.n	efee <cal_gain_off+0x7de>
		cal_struct->offset[i] = -1*(v[i+3]/v[i]);
    ef68:	4ba7      	ldr	r3, [pc, #668]	; (f208 <cal_gain_off+0x9f8>)
    ef6a:	2208      	movs	r2, #8
    ef6c:	4694      	mov	ip, r2
    ef6e:	44bc      	add	ip, r7
    ef70:	4463      	add	r3, ip
    ef72:	781c      	ldrb	r4, [r3, #0]
    ef74:	4ba4      	ldr	r3, [pc, #656]	; (f208 <cal_gain_off+0x9f8>)
    ef76:	2208      	movs	r2, #8
    ef78:	4694      	mov	ip, r2
    ef7a:	44bc      	add	ip, r7
    ef7c:	4463      	add	r3, ip
    ef7e:	781b      	ldrb	r3, [r3, #0]
    ef80:	1cda      	adds	r2, r3, #3
    ef82:	4ba2      	ldr	r3, [pc, #648]	; (f20c <cal_gain_off+0x9fc>)
    ef84:	2185      	movs	r1, #133	; 0x85
    ef86:	0109      	lsls	r1, r1, #4
    ef88:	468c      	mov	ip, r1
    ef8a:	2108      	movs	r1, #8
    ef8c:	4688      	mov	r8, r1
    ef8e:	44b8      	add	r8, r7
    ef90:	44c4      	add	ip, r8
    ef92:	4463      	add	r3, ip
    ef94:	0092      	lsls	r2, r2, #2
    ef96:	58d0      	ldr	r0, [r2, r3]
    ef98:	4b9b      	ldr	r3, [pc, #620]	; (f208 <cal_gain_off+0x9f8>)
    ef9a:	2208      	movs	r2, #8
    ef9c:	4694      	mov	ip, r2
    ef9e:	44bc      	add	ip, r7
    efa0:	4463      	add	r3, ip
    efa2:	781a      	ldrb	r2, [r3, #0]
    efa4:	4b99      	ldr	r3, [pc, #612]	; (f20c <cal_gain_off+0x9fc>)
    efa6:	2185      	movs	r1, #133	; 0x85
    efa8:	0109      	lsls	r1, r1, #4
    efaa:	468c      	mov	ip, r1
    efac:	2108      	movs	r1, #8
    efae:	4688      	mov	r8, r1
    efb0:	44b8      	add	r8, r7
    efb2:	44c4      	add	ip, r8
    efb4:	4463      	add	r3, ip
    efb6:	0092      	lsls	r2, r2, #2
    efb8:	58d2      	ldr	r2, [r2, r3]
    efba:	4b9a      	ldr	r3, [pc, #616]	; (f224 <cal_gain_off+0xa14>)
    efbc:	1c11      	adds	r1, r2, #0
    efbe:	4798      	blx	r3
    efc0:	1c03      	adds	r3, r0, #0
    efc2:	1c1a      	adds	r2, r3, #0
    efc4:	2380      	movs	r3, #128	; 0x80
    efc6:	061b      	lsls	r3, r3, #24
    efc8:	405a      	eors	r2, r3
    efca:	68b9      	ldr	r1, [r7, #8]
    efcc:	00a3      	lsls	r3, r4, #2
    efce:	18cb      	adds	r3, r1, r3
    efd0:	3304      	adds	r3, #4
    efd2:	601a      	str	r2, [r3, #0]
	for (i=0;i<3;i++){
    efd4:	4b8c      	ldr	r3, [pc, #560]	; (f208 <cal_gain_off+0x9f8>)
    efd6:	2208      	movs	r2, #8
    efd8:	4694      	mov	ip, r2
    efda:	44bc      	add	ip, r7
    efdc:	4463      	add	r3, ip
    efde:	781a      	ldrb	r2, [r3, #0]
    efe0:	4b89      	ldr	r3, [pc, #548]	; (f208 <cal_gain_off+0x9f8>)
    efe2:	2108      	movs	r1, #8
    efe4:	468c      	mov	ip, r1
    efe6:	44bc      	add	ip, r7
    efe8:	4463      	add	r3, ip
    efea:	3201      	adds	r2, #1
    efec:	701a      	strb	r2, [r3, #0]
    efee:	4b86      	ldr	r3, [pc, #536]	; (f208 <cal_gain_off+0x9f8>)
    eff0:	2208      	movs	r2, #8
    eff2:	4694      	mov	ip, r2
    eff4:	44bc      	add	ip, r7
    eff6:	4463      	add	r3, ip
    eff8:	781b      	ldrb	r3, [r3, #0]
    effa:	2b02      	cmp	r3, #2
    effc:	d9b4      	bls.n	ef68 <cal_gain_off+0x758>
	}
	
	
	g=1 + pow(v[3],2)/v[0]+pow(v[4],2)/v[1]+pow(v[5],2)/v[2];
    effe:	4b83      	ldr	r3, [pc, #524]	; (f20c <cal_gain_off+0x9fc>)
    f000:	2285      	movs	r2, #133	; 0x85
    f002:	0112      	lsls	r2, r2, #4
    f004:	4694      	mov	ip, r2
    f006:	2208      	movs	r2, #8
    f008:	4690      	mov	r8, r2
    f00a:	44b8      	add	r8, r7
    f00c:	44c4      	add	ip, r8
    f00e:	4463      	add	r3, ip
    f010:	68da      	ldr	r2, [r3, #12]
    f012:	4b85      	ldr	r3, [pc, #532]	; (f228 <cal_gain_off+0xa18>)
    f014:	1c10      	adds	r0, r2, #0
    f016:	4798      	blx	r3
    f018:	2300      	movs	r3, #0
    f01a:	2480      	movs	r4, #128	; 0x80
    f01c:	05e4      	lsls	r4, r4, #23
    f01e:	001a      	movs	r2, r3
    f020:	0023      	movs	r3, r4
    f022:	4c82      	ldr	r4, [pc, #520]	; (f22c <cal_gain_off+0xa1c>)
    f024:	47a0      	blx	r4
    f026:	0005      	movs	r5, r0
    f028:	000e      	movs	r6, r1
    f02a:	4b78      	ldr	r3, [pc, #480]	; (f20c <cal_gain_off+0x9fc>)
    f02c:	2285      	movs	r2, #133	; 0x85
    f02e:	0112      	lsls	r2, r2, #4
    f030:	4694      	mov	ip, r2
    f032:	2208      	movs	r2, #8
    f034:	4690      	mov	r8, r2
    f036:	44b8      	add	r8, r7
    f038:	44c4      	add	ip, r8
    f03a:	4463      	add	r3, ip
    f03c:	681a      	ldr	r2, [r3, #0]
    f03e:	4b7a      	ldr	r3, [pc, #488]	; (f228 <cal_gain_off+0xa18>)
    f040:	1c10      	adds	r0, r2, #0
    f042:	4798      	blx	r3
    f044:	0002      	movs	r2, r0
    f046:	000b      	movs	r3, r1
    f048:	4c79      	ldr	r4, [pc, #484]	; (f230 <cal_gain_off+0xa20>)
    f04a:	0028      	movs	r0, r5
    f04c:	0031      	movs	r1, r6
    f04e:	47a0      	blx	r4
    f050:	0003      	movs	r3, r0
    f052:	000c      	movs	r4, r1
    f054:	0018      	movs	r0, r3
    f056:	0021      	movs	r1, r4
    f058:	4c76      	ldr	r4, [pc, #472]	; (f234 <cal_gain_off+0xa24>)
    f05a:	2200      	movs	r2, #0
    f05c:	4b76      	ldr	r3, [pc, #472]	; (f238 <cal_gain_off+0xa28>)
    f05e:	47a0      	blx	r4
    f060:	0003      	movs	r3, r0
    f062:	000c      	movs	r4, r1
    f064:	001d      	movs	r5, r3
    f066:	0026      	movs	r6, r4
    f068:	4b68      	ldr	r3, [pc, #416]	; (f20c <cal_gain_off+0x9fc>)
    f06a:	2285      	movs	r2, #133	; 0x85
    f06c:	0112      	lsls	r2, r2, #4
    f06e:	4694      	mov	ip, r2
    f070:	2208      	movs	r2, #8
    f072:	4690      	mov	r8, r2
    f074:	44b8      	add	r8, r7
    f076:	44c4      	add	ip, r8
    f078:	4463      	add	r3, ip
    f07a:	691a      	ldr	r2, [r3, #16]
    f07c:	4b6a      	ldr	r3, [pc, #424]	; (f228 <cal_gain_off+0xa18>)
    f07e:	1c10      	adds	r0, r2, #0
    f080:	4798      	blx	r3
    f082:	2300      	movs	r3, #0
    f084:	2480      	movs	r4, #128	; 0x80
    f086:	05e4      	lsls	r4, r4, #23
    f088:	001a      	movs	r2, r3
    f08a:	0023      	movs	r3, r4
    f08c:	4c67      	ldr	r4, [pc, #412]	; (f22c <cal_gain_off+0xa1c>)
    f08e:	47a0      	blx	r4
    f090:	6038      	str	r0, [r7, #0]
    f092:	6079      	str	r1, [r7, #4]
    f094:	4b5d      	ldr	r3, [pc, #372]	; (f20c <cal_gain_off+0x9fc>)
    f096:	2285      	movs	r2, #133	; 0x85
    f098:	0112      	lsls	r2, r2, #4
    f09a:	4694      	mov	ip, r2
    f09c:	2208      	movs	r2, #8
    f09e:	4690      	mov	r8, r2
    f0a0:	44b8      	add	r8, r7
    f0a2:	44c4      	add	ip, r8
    f0a4:	4463      	add	r3, ip
    f0a6:	685a      	ldr	r2, [r3, #4]
    f0a8:	4b5f      	ldr	r3, [pc, #380]	; (f228 <cal_gain_off+0xa18>)
    f0aa:	1c10      	adds	r0, r2, #0
    f0ac:	4798      	blx	r3
    f0ae:	0002      	movs	r2, r0
    f0b0:	000b      	movs	r3, r1
    f0b2:	4c5f      	ldr	r4, [pc, #380]	; (f230 <cal_gain_off+0xa20>)
    f0b4:	6838      	ldr	r0, [r7, #0]
    f0b6:	6879      	ldr	r1, [r7, #4]
    f0b8:	47a0      	blx	r4
    f0ba:	0003      	movs	r3, r0
    f0bc:	000c      	movs	r4, r1
    f0be:	001a      	movs	r2, r3
    f0c0:	0023      	movs	r3, r4
    f0c2:	4c5c      	ldr	r4, [pc, #368]	; (f234 <cal_gain_off+0xa24>)
    f0c4:	0028      	movs	r0, r5
    f0c6:	0031      	movs	r1, r6
    f0c8:	47a0      	blx	r4
    f0ca:	0003      	movs	r3, r0
    f0cc:	000c      	movs	r4, r1
    f0ce:	001d      	movs	r5, r3
    f0d0:	0026      	movs	r6, r4
    f0d2:	4b4e      	ldr	r3, [pc, #312]	; (f20c <cal_gain_off+0x9fc>)
    f0d4:	2285      	movs	r2, #133	; 0x85
    f0d6:	0112      	lsls	r2, r2, #4
    f0d8:	4694      	mov	ip, r2
    f0da:	2208      	movs	r2, #8
    f0dc:	4690      	mov	r8, r2
    f0de:	44b8      	add	r8, r7
    f0e0:	44c4      	add	ip, r8
    f0e2:	4463      	add	r3, ip
    f0e4:	695a      	ldr	r2, [r3, #20]
    f0e6:	4b50      	ldr	r3, [pc, #320]	; (f228 <cal_gain_off+0xa18>)
    f0e8:	1c10      	adds	r0, r2, #0
    f0ea:	4798      	blx	r3
    f0ec:	2300      	movs	r3, #0
    f0ee:	2480      	movs	r4, #128	; 0x80
    f0f0:	05e4      	lsls	r4, r4, #23
    f0f2:	001a      	movs	r2, r3
    f0f4:	0023      	movs	r3, r4
    f0f6:	4c4d      	ldr	r4, [pc, #308]	; (f22c <cal_gain_off+0xa1c>)
    f0f8:	47a0      	blx	r4
    f0fa:	6038      	str	r0, [r7, #0]
    f0fc:	6079      	str	r1, [r7, #4]
    f0fe:	4b43      	ldr	r3, [pc, #268]	; (f20c <cal_gain_off+0x9fc>)
    f100:	2285      	movs	r2, #133	; 0x85
    f102:	0112      	lsls	r2, r2, #4
    f104:	4694      	mov	ip, r2
    f106:	2208      	movs	r2, #8
    f108:	4690      	mov	r8, r2
    f10a:	44b8      	add	r8, r7
    f10c:	44c4      	add	ip, r8
    f10e:	4463      	add	r3, ip
    f110:	689a      	ldr	r2, [r3, #8]
    f112:	4b45      	ldr	r3, [pc, #276]	; (f228 <cal_gain_off+0xa18>)
    f114:	1c10      	adds	r0, r2, #0
    f116:	4798      	blx	r3
    f118:	0002      	movs	r2, r0
    f11a:	000b      	movs	r3, r1
    f11c:	4c44      	ldr	r4, [pc, #272]	; (f230 <cal_gain_off+0xa20>)
    f11e:	6838      	ldr	r0, [r7, #0]
    f120:	6879      	ldr	r1, [r7, #4]
    f122:	47a0      	blx	r4
    f124:	0003      	movs	r3, r0
    f126:	000c      	movs	r4, r1
    f128:	001a      	movs	r2, r3
    f12a:	0023      	movs	r3, r4
    f12c:	4c41      	ldr	r4, [pc, #260]	; (f234 <cal_gain_off+0xa24>)
    f12e:	0028      	movs	r0, r5
    f130:	0031      	movs	r1, r6
    f132:	47a0      	blx	r4
    f134:	0003      	movs	r3, r0
    f136:	000c      	movs	r4, r1
    f138:	0019      	movs	r1, r3
    f13a:	0022      	movs	r2, r4
    f13c:	4b3f      	ldr	r3, [pc, #252]	; (f23c <cal_gain_off+0xa2c>)
    f13e:	0008      	movs	r0, r1
    f140:	0011      	movs	r1, r2
    f142:	4798      	blx	r3
    f144:	1c03      	adds	r3, r0, #0
    f146:	4a3e      	ldr	r2, [pc, #248]	; (f240 <cal_gain_off+0xa30>)
    f148:	2108      	movs	r1, #8
    f14a:	468c      	mov	ip, r1
    f14c:	44bc      	add	ip, r7
    f14e:	4462      	add	r2, ip
    f150:	6013      	str	r3, [r2, #0]
	
	
	for (i=0;i<3;i++){
    f152:	4b2d      	ldr	r3, [pc, #180]	; (f208 <cal_gain_off+0x9f8>)
    f154:	2208      	movs	r2, #8
    f156:	4694      	mov	ip, r2
    f158:	44bc      	add	ip, r7
    f15a:	4463      	add	r3, ip
    f15c:	2200      	movs	r2, #0
    f15e:	701a      	strb	r2, [r3, #0]
    f160:	e042      	b.n	f1e8 <cal_gain_off+0x9d8>
		cal_struct->gain[i] = sqrt(g/v[i]);
    f162:	4b29      	ldr	r3, [pc, #164]	; (f208 <cal_gain_off+0x9f8>)
    f164:	2208      	movs	r2, #8
    f166:	4694      	mov	ip, r2
    f168:	44bc      	add	ip, r7
    f16a:	4463      	add	r3, ip
    f16c:	781c      	ldrb	r4, [r3, #0]
    f16e:	4b26      	ldr	r3, [pc, #152]	; (f208 <cal_gain_off+0x9f8>)
    f170:	2208      	movs	r2, #8
    f172:	4694      	mov	ip, r2
    f174:	44bc      	add	ip, r7
    f176:	4463      	add	r3, ip
    f178:	781a      	ldrb	r2, [r3, #0]
    f17a:	4b24      	ldr	r3, [pc, #144]	; (f20c <cal_gain_off+0x9fc>)
    f17c:	2185      	movs	r1, #133	; 0x85
    f17e:	0109      	lsls	r1, r1, #4
    f180:	468c      	mov	ip, r1
    f182:	2108      	movs	r1, #8
    f184:	4688      	mov	r8, r1
    f186:	44b8      	add	r8, r7
    f188:	44c4      	add	ip, r8
    f18a:	4463      	add	r3, ip
    f18c:	0092      	lsls	r2, r2, #2
    f18e:	58d2      	ldr	r2, [r2, r3]
    f190:	4b24      	ldr	r3, [pc, #144]	; (f224 <cal_gain_off+0xa14>)
    f192:	1c11      	adds	r1, r2, #0
    f194:	4a2a      	ldr	r2, [pc, #168]	; (f240 <cal_gain_off+0xa30>)
    f196:	2008      	movs	r0, #8
    f198:	4684      	mov	ip, r0
    f19a:	44bc      	add	ip, r7
    f19c:	4462      	add	r2, ip
    f19e:	6810      	ldr	r0, [r2, #0]
    f1a0:	4798      	blx	r3
    f1a2:	1c03      	adds	r3, r0, #0
    f1a4:	1c1a      	adds	r2, r3, #0
    f1a6:	4b20      	ldr	r3, [pc, #128]	; (f228 <cal_gain_off+0xa18>)
    f1a8:	1c10      	adds	r0, r2, #0
    f1aa:	4798      	blx	r3
    f1ac:	0002      	movs	r2, r0
    f1ae:	000b      	movs	r3, r1
    f1b0:	0010      	movs	r0, r2
    f1b2:	0019      	movs	r1, r3
    f1b4:	4b23      	ldr	r3, [pc, #140]	; (f244 <cal_gain_off+0xa34>)
    f1b6:	4798      	blx	r3
    f1b8:	000a      	movs	r2, r1
    f1ba:	0001      	movs	r1, r0
    f1bc:	4b1f      	ldr	r3, [pc, #124]	; (f23c <cal_gain_off+0xa2c>)
    f1be:	0008      	movs	r0, r1
    f1c0:	0011      	movs	r1, r2
    f1c2:	4798      	blx	r3
    f1c4:	1c01      	adds	r1, r0, #0
    f1c6:	68bb      	ldr	r3, [r7, #8]
    f1c8:	1d22      	adds	r2, r4, #4
    f1ca:	0092      	lsls	r2, r2, #2
    f1cc:	50d1      	str	r1, [r2, r3]
	for (i=0;i<3;i++){
    f1ce:	4b0e      	ldr	r3, [pc, #56]	; (f208 <cal_gain_off+0x9f8>)
    f1d0:	2208      	movs	r2, #8
    f1d2:	4694      	mov	ip, r2
    f1d4:	44bc      	add	ip, r7
    f1d6:	4463      	add	r3, ip
    f1d8:	781a      	ldrb	r2, [r3, #0]
    f1da:	4b0b      	ldr	r3, [pc, #44]	; (f208 <cal_gain_off+0x9f8>)
    f1dc:	2108      	movs	r1, #8
    f1de:	468c      	mov	ip, r1
    f1e0:	44bc      	add	ip, r7
    f1e2:	4463      	add	r3, ip
    f1e4:	3201      	adds	r2, #1
    f1e6:	701a      	strb	r2, [r3, #0]
    f1e8:	4b07      	ldr	r3, [pc, #28]	; (f208 <cal_gain_off+0x9f8>)
    f1ea:	2208      	movs	r2, #8
    f1ec:	4694      	mov	ip, r2
    f1ee:	44bc      	add	ip, r7
    f1f0:	4463      	add	r3, ip
    f1f2:	781b      	ldrb	r3, [r3, #0]
    f1f4:	2b02      	cmp	r3, #2
    f1f6:	d9b4      	bls.n	f162 <cal_gain_off+0x952>
		
	}
	

}
    f1f8:	46c0      	nop			; (mov r8, r8)
    f1fa:	46bd      	mov	sp, r7
    f1fc:	4b12      	ldr	r3, [pc, #72]	; (f248 <cal_gain_off+0xa38>)
    f1fe:	449d      	add	sp, r3
    f200:	bc0c      	pop	{r2, r3}
    f202:	4690      	mov	r8, r2
    f204:	4699      	mov	r9, r3
    f206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f208:	0000084f 	.word	0x0000084f
    f20c:	fffff7b8 	.word	0xfffff7b8
    f210:	0000084e 	.word	0x0000084e
    f214:	fffff7e8 	.word	0xfffff7e8
    f218:	fffff7d0 	.word	0xfffff7d0
    f21c:	000217d9 	.word	0x000217d9
    f220:	000210d5 	.word	0x000210d5
    f224:	000213f9 	.word	0x000213f9
    f228:	00023a0d 	.word	0x00023a0d
    f22c:	0001e3bd 	.word	0x0001e3bd
    f230:	000224dd 	.word	0x000224dd
    f234:	00021ebd 	.word	0x00021ebd
    f238:	3ff00000 	.word	0x3ff00000
    f23c:	00023ab1 	.word	0x00023ab1
    f240:	00000848 	.word	0x00000848
    f244:	0001e715 	.word	0x0001e715
    f248:	0000085c 	.word	0x0000085c

0000f24c <inverse>:



void inverse(float source[6][6], float dest[6][6], uint8_t f)
{
    f24c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f24e:	46c6      	mov	lr, r8
    f250:	b500      	push	{lr}
    f252:	b0d0      	sub	sp, #320	; 0x140
    f254:	af00      	add	r7, sp, #0
    f256:	6178      	str	r0, [r7, #20]
    f258:	6139      	str	r1, [r7, #16]
    f25a:	4be3      	ldr	r3, [pc, #908]	; (f5e8 <inverse+0x39c>)
    f25c:	219c      	movs	r1, #156	; 0x9c
    f25e:	0049      	lsls	r1, r1, #1
    f260:	468c      	mov	ip, r1
    f262:	2108      	movs	r1, #8
    f264:	4688      	mov	r8, r1
    f266:	44b8      	add	r8, r7
    f268:	44c4      	add	ip, r8
    f26a:	4463      	add	r3, ip
    f26c:	701a      	strb	r2, [r3, #0]
	float b[6][6], fac[6][6];
	uint8_t p, q, m, n, i, j;
	//f = 6;
	for (q = 0;q < f; q++)
    f26e:	239b      	movs	r3, #155	; 0x9b
    f270:	005b      	lsls	r3, r3, #1
    f272:	2208      	movs	r2, #8
    f274:	4694      	mov	ip, r2
    f276:	44bc      	add	ip, r7
    f278:	4463      	add	r3, ip
    f27a:	2200      	movs	r2, #0
    f27c:	701a      	strb	r2, [r3, #0]
    f27e:	e187      	b.n	f590 <inverse+0x344>
	{
		for (p = 0;p < f; p++)
    f280:	2338      	movs	r3, #56	; 0x38
    f282:	33ff      	adds	r3, #255	; 0xff
    f284:	2208      	movs	r2, #8
    f286:	4694      	mov	ip, r2
    f288:	44bc      	add	ip, r7
    f28a:	4463      	add	r3, ip
    f28c:	2200      	movs	r2, #0
    f28e:	701a      	strb	r2, [r3, #0]
    f290:	e15c      	b.n	f54c <inverse+0x300>
		{
			m = 0;
    f292:	2336      	movs	r3, #54	; 0x36
    f294:	33ff      	adds	r3, #255	; 0xff
    f296:	2208      	movs	r2, #8
    f298:	4694      	mov	ip, r2
    f29a:	44bc      	add	ip, r7
    f29c:	4463      	add	r3, ip
    f29e:	2200      	movs	r2, #0
    f2a0:	701a      	strb	r2, [r3, #0]
			n = 0;
    f2a2:	239a      	movs	r3, #154	; 0x9a
    f2a4:	005b      	lsls	r3, r3, #1
    f2a6:	2208      	movs	r2, #8
    f2a8:	4694      	mov	ip, r2
    f2aa:	44bc      	add	ip, r7
    f2ac:	4463      	add	r3, ip
    f2ae:	2200      	movs	r2, #0
    f2b0:	701a      	strb	r2, [r3, #0]
			for (i = 0;i < f; i++)
    f2b2:	2334      	movs	r3, #52	; 0x34
    f2b4:	33ff      	adds	r3, #255	; 0xff
    f2b6:	2208      	movs	r2, #8
    f2b8:	4694      	mov	ip, r2
    f2ba:	44bc      	add	ip, r7
    f2bc:	4463      	add	r3, ip
    f2be:	2200      	movs	r2, #0
    f2c0:	701a      	strb	r2, [r3, #0]
    f2c2:	e0c2      	b.n	f44a <inverse+0x1fe>
			{
				for (j = 0;j < f; j++)
    f2c4:	2399      	movs	r3, #153	; 0x99
    f2c6:	005b      	lsls	r3, r3, #1
    f2c8:	2208      	movs	r2, #8
    f2ca:	4694      	mov	ip, r2
    f2cc:	44bc      	add	ip, r7
    f2ce:	4463      	add	r3, ip
    f2d0:	2200      	movs	r2, #0
    f2d2:	701a      	strb	r2, [r3, #0]
    f2d4:	e097      	b.n	f406 <inverse+0x1ba>
				{
					if (i != q && j != p)
    f2d6:	2334      	movs	r3, #52	; 0x34
    f2d8:	33ff      	adds	r3, #255	; 0xff
    f2da:	2208      	movs	r2, #8
    f2dc:	18ba      	adds	r2, r7, r2
    f2de:	18d2      	adds	r2, r2, r3
    f2e0:	239b      	movs	r3, #155	; 0x9b
    f2e2:	005b      	lsls	r3, r3, #1
    f2e4:	2108      	movs	r1, #8
    f2e6:	468c      	mov	ip, r1
    f2e8:	44bc      	add	ip, r7
    f2ea:	4463      	add	r3, ip
    f2ec:	7812      	ldrb	r2, [r2, #0]
    f2ee:	781b      	ldrb	r3, [r3, #0]
    f2f0:	429a      	cmp	r2, r3
    f2f2:	d079      	beq.n	f3e8 <inverse+0x19c>
    f2f4:	2399      	movs	r3, #153	; 0x99
    f2f6:	005b      	lsls	r3, r3, #1
    f2f8:	2208      	movs	r2, #8
    f2fa:	18ba      	adds	r2, r7, r2
    f2fc:	18d2      	adds	r2, r2, r3
    f2fe:	2338      	movs	r3, #56	; 0x38
    f300:	33ff      	adds	r3, #255	; 0xff
    f302:	2108      	movs	r1, #8
    f304:	468c      	mov	ip, r1
    f306:	44bc      	add	ip, r7
    f308:	4463      	add	r3, ip
    f30a:	7812      	ldrb	r2, [r2, #0]
    f30c:	781b      	ldrb	r3, [r3, #0]
    f30e:	429a      	cmp	r2, r3
    f310:	d06a      	beq.n	f3e8 <inverse+0x19c>
					{
						b[m][n] = source[i][j];
    f312:	2336      	movs	r3, #54	; 0x36
    f314:	33ff      	adds	r3, #255	; 0xff
    f316:	2208      	movs	r2, #8
    f318:	4694      	mov	ip, r2
    f31a:	44bc      	add	ip, r7
    f31c:	4463      	add	r3, ip
    f31e:	781a      	ldrb	r2, [r3, #0]
    f320:	239a      	movs	r3, #154	; 0x9a
    f322:	005b      	lsls	r3, r3, #1
    f324:	2108      	movs	r1, #8
    f326:	468c      	mov	ip, r1
    f328:	44bc      	add	ip, r7
    f32a:	4463      	add	r3, ip
    f32c:	781c      	ldrb	r4, [r3, #0]
    f32e:	2334      	movs	r3, #52	; 0x34
    f330:	33ff      	adds	r3, #255	; 0xff
    f332:	2108      	movs	r1, #8
    f334:	468c      	mov	ip, r1
    f336:	44bc      	add	ip, r7
    f338:	4463      	add	r3, ip
    f33a:	7819      	ldrb	r1, [r3, #0]
    f33c:	000b      	movs	r3, r1
    f33e:	005b      	lsls	r3, r3, #1
    f340:	185b      	adds	r3, r3, r1
    f342:	00db      	lsls	r3, r3, #3
    f344:	0019      	movs	r1, r3
    f346:	697b      	ldr	r3, [r7, #20]
    f348:	185b      	adds	r3, r3, r1
    f34a:	2199      	movs	r1, #153	; 0x99
    f34c:	0049      	lsls	r1, r1, #1
    f34e:	2008      	movs	r0, #8
    f350:	4684      	mov	ip, r0
    f352:	44bc      	add	ip, r7
    f354:	4461      	add	r1, ip
    f356:	7809      	ldrb	r1, [r1, #0]
    f358:	0089      	lsls	r1, r1, #2
    f35a:	58c8      	ldr	r0, [r1, r3]
    f35c:	23a0      	movs	r3, #160	; 0xa0
    f35e:	2108      	movs	r1, #8
    f360:	1879      	adds	r1, r7, r1
    f362:	18c9      	adds	r1, r1, r3
    f364:	0013      	movs	r3, r2
    f366:	005b      	lsls	r3, r3, #1
    f368:	189b      	adds	r3, r3, r2
    f36a:	005b      	lsls	r3, r3, #1
    f36c:	191b      	adds	r3, r3, r4
    f36e:	009b      	lsls	r3, r3, #2
    f370:	5058      	str	r0, [r3, r1]
						if (n < (f - 2))
    f372:	239a      	movs	r3, #154	; 0x9a
    f374:	005b      	lsls	r3, r3, #1
    f376:	2208      	movs	r2, #8
    f378:	4694      	mov	ip, r2
    f37a:	44bc      	add	ip, r7
    f37c:	4463      	add	r3, ip
    f37e:	781a      	ldrb	r2, [r3, #0]
    f380:	4b99      	ldr	r3, [pc, #612]	; (f5e8 <inverse+0x39c>)
    f382:	219c      	movs	r1, #156	; 0x9c
    f384:	0049      	lsls	r1, r1, #1
    f386:	468c      	mov	ip, r1
    f388:	2108      	movs	r1, #8
    f38a:	4688      	mov	r8, r1
    f38c:	44b8      	add	r8, r7
    f38e:	44c4      	add	ip, r8
    f390:	4463      	add	r3, ip
    f392:	781b      	ldrb	r3, [r3, #0]
    f394:	3b02      	subs	r3, #2
    f396:	429a      	cmp	r2, r3
    f398:	da0f      	bge.n	f3ba <inverse+0x16e>
						n++;
    f39a:	239a      	movs	r3, #154	; 0x9a
    f39c:	005b      	lsls	r3, r3, #1
    f39e:	2208      	movs	r2, #8
    f3a0:	4694      	mov	ip, r2
    f3a2:	44bc      	add	ip, r7
    f3a4:	4463      	add	r3, ip
    f3a6:	781a      	ldrb	r2, [r3, #0]
    f3a8:	239a      	movs	r3, #154	; 0x9a
    f3aa:	005b      	lsls	r3, r3, #1
    f3ac:	2108      	movs	r1, #8
    f3ae:	468c      	mov	ip, r1
    f3b0:	44bc      	add	ip, r7
    f3b2:	4463      	add	r3, ip
    f3b4:	3201      	adds	r2, #1
    f3b6:	701a      	strb	r2, [r3, #0]
    f3b8:	e016      	b.n	f3e8 <inverse+0x19c>
						else
						{
							n = 0;
    f3ba:	239a      	movs	r3, #154	; 0x9a
    f3bc:	005b      	lsls	r3, r3, #1
    f3be:	2208      	movs	r2, #8
    f3c0:	4694      	mov	ip, r2
    f3c2:	44bc      	add	ip, r7
    f3c4:	4463      	add	r3, ip
    f3c6:	2200      	movs	r2, #0
    f3c8:	701a      	strb	r2, [r3, #0]
							m++;
    f3ca:	2336      	movs	r3, #54	; 0x36
    f3cc:	33ff      	adds	r3, #255	; 0xff
    f3ce:	2208      	movs	r2, #8
    f3d0:	4694      	mov	ip, r2
    f3d2:	44bc      	add	ip, r7
    f3d4:	4463      	add	r3, ip
    f3d6:	781a      	ldrb	r2, [r3, #0]
    f3d8:	2336      	movs	r3, #54	; 0x36
    f3da:	33ff      	adds	r3, #255	; 0xff
    f3dc:	2108      	movs	r1, #8
    f3de:	468c      	mov	ip, r1
    f3e0:	44bc      	add	ip, r7
    f3e2:	4463      	add	r3, ip
    f3e4:	3201      	adds	r2, #1
    f3e6:	701a      	strb	r2, [r3, #0]
				for (j = 0;j < f; j++)
    f3e8:	2399      	movs	r3, #153	; 0x99
    f3ea:	005b      	lsls	r3, r3, #1
    f3ec:	2208      	movs	r2, #8
    f3ee:	4694      	mov	ip, r2
    f3f0:	44bc      	add	ip, r7
    f3f2:	4463      	add	r3, ip
    f3f4:	781a      	ldrb	r2, [r3, #0]
    f3f6:	2399      	movs	r3, #153	; 0x99
    f3f8:	005b      	lsls	r3, r3, #1
    f3fa:	2108      	movs	r1, #8
    f3fc:	468c      	mov	ip, r1
    f3fe:	44bc      	add	ip, r7
    f400:	4463      	add	r3, ip
    f402:	3201      	adds	r2, #1
    f404:	701a      	strb	r2, [r3, #0]
    f406:	2399      	movs	r3, #153	; 0x99
    f408:	005b      	lsls	r3, r3, #1
    f40a:	2208      	movs	r2, #8
    f40c:	18ba      	adds	r2, r7, r2
    f40e:	18d2      	adds	r2, r2, r3
    f410:	4b75      	ldr	r3, [pc, #468]	; (f5e8 <inverse+0x39c>)
    f412:	219c      	movs	r1, #156	; 0x9c
    f414:	0049      	lsls	r1, r1, #1
    f416:	468c      	mov	ip, r1
    f418:	2108      	movs	r1, #8
    f41a:	4688      	mov	r8, r1
    f41c:	44b8      	add	r8, r7
    f41e:	44c4      	add	ip, r8
    f420:	4463      	add	r3, ip
    f422:	7812      	ldrb	r2, [r2, #0]
    f424:	781b      	ldrb	r3, [r3, #0]
    f426:	429a      	cmp	r2, r3
    f428:	d200      	bcs.n	f42c <inverse+0x1e0>
    f42a:	e754      	b.n	f2d6 <inverse+0x8a>
			for (i = 0;i < f; i++)
    f42c:	2334      	movs	r3, #52	; 0x34
    f42e:	33ff      	adds	r3, #255	; 0xff
    f430:	2208      	movs	r2, #8
    f432:	4694      	mov	ip, r2
    f434:	44bc      	add	ip, r7
    f436:	4463      	add	r3, ip
    f438:	781a      	ldrb	r2, [r3, #0]
    f43a:	2334      	movs	r3, #52	; 0x34
    f43c:	33ff      	adds	r3, #255	; 0xff
    f43e:	2108      	movs	r1, #8
    f440:	468c      	mov	ip, r1
    f442:	44bc      	add	ip, r7
    f444:	4463      	add	r3, ip
    f446:	3201      	adds	r2, #1
    f448:	701a      	strb	r2, [r3, #0]
    f44a:	2334      	movs	r3, #52	; 0x34
    f44c:	33ff      	adds	r3, #255	; 0xff
    f44e:	2208      	movs	r2, #8
    f450:	18ba      	adds	r2, r7, r2
    f452:	18d2      	adds	r2, r2, r3
    f454:	4b64      	ldr	r3, [pc, #400]	; (f5e8 <inverse+0x39c>)
    f456:	219c      	movs	r1, #156	; 0x9c
    f458:	0049      	lsls	r1, r1, #1
    f45a:	468c      	mov	ip, r1
    f45c:	2108      	movs	r1, #8
    f45e:	4688      	mov	r8, r1
    f460:	44b8      	add	r8, r7
    f462:	44c4      	add	ip, r8
    f464:	4463      	add	r3, ip
    f466:	7812      	ldrb	r2, [r2, #0]
    f468:	781b      	ldrb	r3, [r3, #0]
    f46a:	429a      	cmp	r2, r3
    f46c:	d200      	bcs.n	f470 <inverse+0x224>
    f46e:	e729      	b.n	f2c4 <inverse+0x78>
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
    f470:	239b      	movs	r3, #155	; 0x9b
    f472:	005b      	lsls	r3, r3, #1
    f474:	2208      	movs	r2, #8
    f476:	4694      	mov	ip, r2
    f478:	44bc      	add	ip, r7
    f47a:	4463      	add	r3, ip
    f47c:	781c      	ldrb	r4, [r3, #0]
    f47e:	2338      	movs	r3, #56	; 0x38
    f480:	33ff      	adds	r3, #255	; 0xff
    f482:	2208      	movs	r2, #8
    f484:	4694      	mov	ip, r2
    f486:	44bc      	add	ip, r7
    f488:	4463      	add	r3, ip
    f48a:	781d      	ldrb	r5, [r3, #0]
    f48c:	239b      	movs	r3, #155	; 0x9b
    f48e:	005b      	lsls	r3, r3, #1
    f490:	2208      	movs	r2, #8
    f492:	4694      	mov	ip, r2
    f494:	44bc      	add	ip, r7
    f496:	4463      	add	r3, ip
    f498:	781a      	ldrb	r2, [r3, #0]
    f49a:	2338      	movs	r3, #56	; 0x38
    f49c:	33ff      	adds	r3, #255	; 0xff
    f49e:	2108      	movs	r1, #8
    f4a0:	468c      	mov	ip, r1
    f4a2:	44bc      	add	ip, r7
    f4a4:	4463      	add	r3, ip
    f4a6:	781b      	ldrb	r3, [r3, #0]
    f4a8:	18d2      	adds	r2, r2, r3
    f4aa:	4b50      	ldr	r3, [pc, #320]	; (f5ec <inverse+0x3a0>)
    f4ac:	0010      	movs	r0, r2
    f4ae:	4798      	blx	r3
    f4b0:	0002      	movs	r2, r0
    f4b2:	000b      	movs	r3, r1
    f4b4:	2000      	movs	r0, #0
    f4b6:	494e      	ldr	r1, [pc, #312]	; (f5f0 <inverse+0x3a4>)
    f4b8:	4e4e      	ldr	r6, [pc, #312]	; (f5f4 <inverse+0x3a8>)
    f4ba:	47b0      	blx	r6
    f4bc:	6038      	str	r0, [r7, #0]
    f4be:	6079      	str	r1, [r7, #4]
    f4c0:	4b49      	ldr	r3, [pc, #292]	; (f5e8 <inverse+0x39c>)
    f4c2:	229c      	movs	r2, #156	; 0x9c
    f4c4:	0052      	lsls	r2, r2, #1
    f4c6:	4694      	mov	ip, r2
    f4c8:	2208      	movs	r2, #8
    f4ca:	4690      	mov	r8, r2
    f4cc:	44b8      	add	r8, r7
    f4ce:	44c4      	add	ip, r8
    f4d0:	4463      	add	r3, ip
    f4d2:	781b      	ldrb	r3, [r3, #0]
    f4d4:	3b01      	subs	r3, #1
    f4d6:	b2da      	uxtb	r2, r3
    f4d8:	23a0      	movs	r3, #160	; 0xa0
    f4da:	2108      	movs	r1, #8
    f4dc:	468c      	mov	ip, r1
    f4de:	44bc      	add	ip, r7
    f4e0:	4463      	add	r3, ip
    f4e2:	0011      	movs	r1, r2
    f4e4:	0018      	movs	r0, r3
    f4e6:	4b44      	ldr	r3, [pc, #272]	; (f5f8 <inverse+0x3ac>)
    f4e8:	4798      	blx	r3
    f4ea:	1c02      	adds	r2, r0, #0
    f4ec:	4b43      	ldr	r3, [pc, #268]	; (f5fc <inverse+0x3b0>)
    f4ee:	1c10      	adds	r0, r2, #0
    f4f0:	4798      	blx	r3
    f4f2:	0002      	movs	r2, r0
    f4f4:	000b      	movs	r3, r1
    f4f6:	4e42      	ldr	r6, [pc, #264]	; (f600 <inverse+0x3b4>)
    f4f8:	6838      	ldr	r0, [r7, #0]
    f4fa:	6879      	ldr	r1, [r7, #4]
    f4fc:	47b0      	blx	r6
    f4fe:	0002      	movs	r2, r0
    f500:	000b      	movs	r3, r1
    f502:	0011      	movs	r1, r2
    f504:	001a      	movs	r2, r3
    f506:	4b3f      	ldr	r3, [pc, #252]	; (f604 <inverse+0x3b8>)
    f508:	0008      	movs	r0, r1
    f50a:	0011      	movs	r1, r2
    f50c:	4798      	blx	r3
    f50e:	1c01      	adds	r1, r0, #0
    f510:	4b3d      	ldr	r3, [pc, #244]	; (f608 <inverse+0x3bc>)
    f512:	229c      	movs	r2, #156	; 0x9c
    f514:	0052      	lsls	r2, r2, #1
    f516:	2008      	movs	r0, #8
    f518:	4684      	mov	ip, r0
    f51a:	44bc      	add	ip, r7
    f51c:	4462      	add	r2, ip
    f51e:	18d2      	adds	r2, r2, r3
    f520:	0023      	movs	r3, r4
    f522:	005b      	lsls	r3, r3, #1
    f524:	191b      	adds	r3, r3, r4
    f526:	005b      	lsls	r3, r3, #1
    f528:	195b      	adds	r3, r3, r5
    f52a:	009b      	lsls	r3, r3, #2
    f52c:	5099      	str	r1, [r3, r2]
		for (p = 0;p < f; p++)
    f52e:	2338      	movs	r3, #56	; 0x38
    f530:	33ff      	adds	r3, #255	; 0xff
    f532:	2208      	movs	r2, #8
    f534:	4694      	mov	ip, r2
    f536:	44bc      	add	ip, r7
    f538:	4463      	add	r3, ip
    f53a:	781a      	ldrb	r2, [r3, #0]
    f53c:	2338      	movs	r3, #56	; 0x38
    f53e:	33ff      	adds	r3, #255	; 0xff
    f540:	2108      	movs	r1, #8
    f542:	468c      	mov	ip, r1
    f544:	44bc      	add	ip, r7
    f546:	4463      	add	r3, ip
    f548:	3201      	adds	r2, #1
    f54a:	701a      	strb	r2, [r3, #0]
    f54c:	2338      	movs	r3, #56	; 0x38
    f54e:	33ff      	adds	r3, #255	; 0xff
    f550:	2208      	movs	r2, #8
    f552:	18ba      	adds	r2, r7, r2
    f554:	18d2      	adds	r2, r2, r3
    f556:	4b24      	ldr	r3, [pc, #144]	; (f5e8 <inverse+0x39c>)
    f558:	219c      	movs	r1, #156	; 0x9c
    f55a:	0049      	lsls	r1, r1, #1
    f55c:	468c      	mov	ip, r1
    f55e:	2108      	movs	r1, #8
    f560:	4688      	mov	r8, r1
    f562:	44b8      	add	r8, r7
    f564:	44c4      	add	ip, r8
    f566:	4463      	add	r3, ip
    f568:	7812      	ldrb	r2, [r2, #0]
    f56a:	781b      	ldrb	r3, [r3, #0]
    f56c:	429a      	cmp	r2, r3
    f56e:	d200      	bcs.n	f572 <inverse+0x326>
    f570:	e68f      	b.n	f292 <inverse+0x46>
	for (q = 0;q < f; q++)
    f572:	239b      	movs	r3, #155	; 0x9b
    f574:	005b      	lsls	r3, r3, #1
    f576:	2208      	movs	r2, #8
    f578:	4694      	mov	ip, r2
    f57a:	44bc      	add	ip, r7
    f57c:	4463      	add	r3, ip
    f57e:	781a      	ldrb	r2, [r3, #0]
    f580:	239b      	movs	r3, #155	; 0x9b
    f582:	005b      	lsls	r3, r3, #1
    f584:	2108      	movs	r1, #8
    f586:	468c      	mov	ip, r1
    f588:	44bc      	add	ip, r7
    f58a:	4463      	add	r3, ip
    f58c:	3201      	adds	r2, #1
    f58e:	701a      	strb	r2, [r3, #0]
    f590:	239b      	movs	r3, #155	; 0x9b
    f592:	005b      	lsls	r3, r3, #1
    f594:	2208      	movs	r2, #8
    f596:	18ba      	adds	r2, r7, r2
    f598:	18d2      	adds	r2, r2, r3
    f59a:	4b13      	ldr	r3, [pc, #76]	; (f5e8 <inverse+0x39c>)
    f59c:	219c      	movs	r1, #156	; 0x9c
    f59e:	0049      	lsls	r1, r1, #1
    f5a0:	468c      	mov	ip, r1
    f5a2:	2108      	movs	r1, #8
    f5a4:	4688      	mov	r8, r1
    f5a6:	44b8      	add	r8, r7
    f5a8:	44c4      	add	ip, r8
    f5aa:	4463      	add	r3, ip
    f5ac:	7812      	ldrb	r2, [r2, #0]
    f5ae:	781b      	ldrb	r3, [r3, #0]
    f5b0:	429a      	cmp	r2, r3
    f5b2:	d200      	bcs.n	f5b6 <inverse+0x36a>
    f5b4:	e664      	b.n	f280 <inverse+0x34>
		}
	}
	transpose(source, dest, fac, f);
    f5b6:	4b0c      	ldr	r3, [pc, #48]	; (f5e8 <inverse+0x39c>)
    f5b8:	229c      	movs	r2, #156	; 0x9c
    f5ba:	0052      	lsls	r2, r2, #1
    f5bc:	4694      	mov	ip, r2
    f5be:	2208      	movs	r2, #8
    f5c0:	4690      	mov	r8, r2
    f5c2:	44b8      	add	r8, r7
    f5c4:	44c4      	add	ip, r8
    f5c6:	4463      	add	r3, ip
    f5c8:	781b      	ldrb	r3, [r3, #0]
    f5ca:	2210      	movs	r2, #16
    f5cc:	2108      	movs	r1, #8
    f5ce:	468c      	mov	ip, r1
    f5d0:	44bc      	add	ip, r7
    f5d2:	4462      	add	r2, ip
    f5d4:	6939      	ldr	r1, [r7, #16]
    f5d6:	6978      	ldr	r0, [r7, #20]
    f5d8:	4c0c      	ldr	r4, [pc, #48]	; (f60c <inverse+0x3c0>)
    f5da:	47a0      	blx	r4
}
    f5dc:	46c0      	nop			; (mov r8, r8)
    f5de:	46bd      	mov	sp, r7
    f5e0:	b050      	add	sp, #320	; 0x140
    f5e2:	bc04      	pop	{r2}
    f5e4:	4690      	mov	r8, r2
    f5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5e8:	fffffecf 	.word	0xfffffecf
    f5ec:	00023919 	.word	0x00023919
    f5f0:	bff00000 	.word	0xbff00000
    f5f4:	0001e3bd 	.word	0x0001e3bd
    f5f8:	0000f769 	.word	0x0000f769
    f5fc:	00023a0d 	.word	0x00023a0d
    f600:	00022d45 	.word	0x00022d45
    f604:	00023ab1 	.word	0x00023ab1
    f608:	fffffed8 	.word	0xfffffed8
    f60c:	0000f611 	.word	0x0000f611

0000f610 <transpose>:
/*Finding transpose of matrix*/
void transpose(float source[6][6], float dest[6][6], float fac[6][6], uint8_t r)
{
    f610:	b5b0      	push	{r4, r5, r7, lr}
    f612:	b0aa      	sub	sp, #168	; 0xa8
    f614:	af00      	add	r7, sp, #0
    f616:	60f8      	str	r0, [r7, #12]
    f618:	60b9      	str	r1, [r7, #8]
    f61a:	607a      	str	r2, [r7, #4]
    f61c:	001a      	movs	r2, r3
    f61e:	1cfb      	adds	r3, r7, #3
    f620:	701a      	strb	r2, [r3, #0]
	uint8_t i, j;
	//r = 6;
	float b[6][6], d;
	
	for (i = 0;i < r; i++)
    f622:	23a7      	movs	r3, #167	; 0xa7
    f624:	18fb      	adds	r3, r7, r3
    f626:	2200      	movs	r2, #0
    f628:	701a      	strb	r2, [r3, #0]
    f62a:	e037      	b.n	f69c <transpose+0x8c>
	{
		for (j = 0;j < r; j++)
    f62c:	23a6      	movs	r3, #166	; 0xa6
    f62e:	18fb      	adds	r3, r7, r3
    f630:	2200      	movs	r2, #0
    f632:	701a      	strb	r2, [r3, #0]
    f634:	e024      	b.n	f680 <transpose+0x70>
		{
			b[i][j] = fac[j][i];
    f636:	23a7      	movs	r3, #167	; 0xa7
    f638:	18fb      	adds	r3, r7, r3
    f63a:	781a      	ldrb	r2, [r3, #0]
    f63c:	23a6      	movs	r3, #166	; 0xa6
    f63e:	18fb      	adds	r3, r7, r3
    f640:	781c      	ldrb	r4, [r3, #0]
    f642:	23a6      	movs	r3, #166	; 0xa6
    f644:	18fb      	adds	r3, r7, r3
    f646:	7819      	ldrb	r1, [r3, #0]
    f648:	000b      	movs	r3, r1
    f64a:	005b      	lsls	r3, r3, #1
    f64c:	185b      	adds	r3, r3, r1
    f64e:	00db      	lsls	r3, r3, #3
    f650:	0019      	movs	r1, r3
    f652:	687b      	ldr	r3, [r7, #4]
    f654:	185b      	adds	r3, r3, r1
    f656:	21a7      	movs	r1, #167	; 0xa7
    f658:	1879      	adds	r1, r7, r1
    f65a:	7809      	ldrb	r1, [r1, #0]
    f65c:	0089      	lsls	r1, r1, #2
    f65e:	58c8      	ldr	r0, [r1, r3]
    f660:	2310      	movs	r3, #16
    f662:	18f9      	adds	r1, r7, r3
    f664:	0013      	movs	r3, r2
    f666:	005b      	lsls	r3, r3, #1
    f668:	189b      	adds	r3, r3, r2
    f66a:	005b      	lsls	r3, r3, #1
    f66c:	191b      	adds	r3, r3, r4
    f66e:	009b      	lsls	r3, r3, #2
    f670:	5058      	str	r0, [r3, r1]
		for (j = 0;j < r; j++)
    f672:	23a6      	movs	r3, #166	; 0xa6
    f674:	18fb      	adds	r3, r7, r3
    f676:	781a      	ldrb	r2, [r3, #0]
    f678:	23a6      	movs	r3, #166	; 0xa6
    f67a:	18fb      	adds	r3, r7, r3
    f67c:	3201      	adds	r2, #1
    f67e:	701a      	strb	r2, [r3, #0]
    f680:	23a6      	movs	r3, #166	; 0xa6
    f682:	18fa      	adds	r2, r7, r3
    f684:	1cfb      	adds	r3, r7, #3
    f686:	7812      	ldrb	r2, [r2, #0]
    f688:	781b      	ldrb	r3, [r3, #0]
    f68a:	429a      	cmp	r2, r3
    f68c:	d3d3      	bcc.n	f636 <transpose+0x26>
	for (i = 0;i < r; i++)
    f68e:	23a7      	movs	r3, #167	; 0xa7
    f690:	18fb      	adds	r3, r7, r3
    f692:	781a      	ldrb	r2, [r3, #0]
    f694:	23a7      	movs	r3, #167	; 0xa7
    f696:	18fb      	adds	r3, r7, r3
    f698:	3201      	adds	r2, #1
    f69a:	701a      	strb	r2, [r3, #0]
    f69c:	23a7      	movs	r3, #167	; 0xa7
    f69e:	18fa      	adds	r2, r7, r3
    f6a0:	1cfb      	adds	r3, r7, #3
    f6a2:	7812      	ldrb	r2, [r2, #0]
    f6a4:	781b      	ldrb	r3, [r3, #0]
    f6a6:	429a      	cmp	r2, r3
    f6a8:	d3c0      	bcc.n	f62c <transpose+0x1c>
		}
	}

	
	d = determinant(source, r);
    f6aa:	1cfb      	adds	r3, r7, #3
    f6ac:	781a      	ldrb	r2, [r3, #0]
    f6ae:	68fb      	ldr	r3, [r7, #12]
    f6b0:	0011      	movs	r1, r2
    f6b2:	0018      	movs	r0, r3
    f6b4:	4b2a      	ldr	r3, [pc, #168]	; (f760 <transpose+0x150>)
    f6b6:	4798      	blx	r3
    f6b8:	1c03      	adds	r3, r0, #0
    f6ba:	22a0      	movs	r2, #160	; 0xa0
    f6bc:	18ba      	adds	r2, r7, r2
    f6be:	6013      	str	r3, [r2, #0]
	for (i = 0;i < r; i++)
    f6c0:	23a7      	movs	r3, #167	; 0xa7
    f6c2:	18fb      	adds	r3, r7, r3
    f6c4:	2200      	movs	r2, #0
    f6c6:	701a      	strb	r2, [r3, #0]
    f6c8:	e03f      	b.n	f74a <transpose+0x13a>
	{
		for (j = 0;j < r; j++)
    f6ca:	23a6      	movs	r3, #166	; 0xa6
    f6cc:	18fb      	adds	r3, r7, r3
    f6ce:	2200      	movs	r2, #0
    f6d0:	701a      	strb	r2, [r3, #0]
    f6d2:	e02c      	b.n	f72e <transpose+0x11e>
		{
			dest[i][j] = b[i][j] / d;
    f6d4:	23a7      	movs	r3, #167	; 0xa7
    f6d6:	18fb      	adds	r3, r7, r3
    f6d8:	781a      	ldrb	r2, [r3, #0]
    f6da:	0013      	movs	r3, r2
    f6dc:	005b      	lsls	r3, r3, #1
    f6de:	189b      	adds	r3, r3, r2
    f6e0:	00db      	lsls	r3, r3, #3
    f6e2:	001a      	movs	r2, r3
    f6e4:	68bb      	ldr	r3, [r7, #8]
    f6e6:	189c      	adds	r4, r3, r2
    f6e8:	23a6      	movs	r3, #166	; 0xa6
    f6ea:	18fb      	adds	r3, r7, r3
    f6ec:	781d      	ldrb	r5, [r3, #0]
    f6ee:	23a7      	movs	r3, #167	; 0xa7
    f6f0:	18fb      	adds	r3, r7, r3
    f6f2:	781a      	ldrb	r2, [r3, #0]
    f6f4:	23a6      	movs	r3, #166	; 0xa6
    f6f6:	18fb      	adds	r3, r7, r3
    f6f8:	7818      	ldrb	r0, [r3, #0]
    f6fa:	2310      	movs	r3, #16
    f6fc:	18f9      	adds	r1, r7, r3
    f6fe:	0013      	movs	r3, r2
    f700:	005b      	lsls	r3, r3, #1
    f702:	189b      	adds	r3, r3, r2
    f704:	005b      	lsls	r3, r3, #1
    f706:	181b      	adds	r3, r3, r0
    f708:	009b      	lsls	r3, r3, #2
    f70a:	585a      	ldr	r2, [r3, r1]
    f70c:	4b15      	ldr	r3, [pc, #84]	; (f764 <transpose+0x154>)
    f70e:	21a0      	movs	r1, #160	; 0xa0
    f710:	1879      	adds	r1, r7, r1
    f712:	6809      	ldr	r1, [r1, #0]
    f714:	1c10      	adds	r0, r2, #0
    f716:	4798      	blx	r3
    f718:	1c03      	adds	r3, r0, #0
    f71a:	1c1a      	adds	r2, r3, #0
    f71c:	00ab      	lsls	r3, r5, #2
    f71e:	511a      	str	r2, [r3, r4]
		for (j = 0;j < r; j++)
    f720:	23a6      	movs	r3, #166	; 0xa6
    f722:	18fb      	adds	r3, r7, r3
    f724:	781a      	ldrb	r2, [r3, #0]
    f726:	23a6      	movs	r3, #166	; 0xa6
    f728:	18fb      	adds	r3, r7, r3
    f72a:	3201      	adds	r2, #1
    f72c:	701a      	strb	r2, [r3, #0]
    f72e:	23a6      	movs	r3, #166	; 0xa6
    f730:	18fa      	adds	r2, r7, r3
    f732:	1cfb      	adds	r3, r7, #3
    f734:	7812      	ldrb	r2, [r2, #0]
    f736:	781b      	ldrb	r3, [r3, #0]
    f738:	429a      	cmp	r2, r3
    f73a:	d3cb      	bcc.n	f6d4 <transpose+0xc4>
	for (i = 0;i < r; i++)
    f73c:	23a7      	movs	r3, #167	; 0xa7
    f73e:	18fb      	adds	r3, r7, r3
    f740:	781a      	ldrb	r2, [r3, #0]
    f742:	23a7      	movs	r3, #167	; 0xa7
    f744:	18fb      	adds	r3, r7, r3
    f746:	3201      	adds	r2, #1
    f748:	701a      	strb	r2, [r3, #0]
    f74a:	23a7      	movs	r3, #167	; 0xa7
    f74c:	18fa      	adds	r2, r7, r3
    f74e:	1cfb      	adds	r3, r7, #3
    f750:	7812      	ldrb	r2, [r2, #0]
    f752:	781b      	ldrb	r3, [r3, #0]
    f754:	429a      	cmp	r2, r3
    f756:	d3b8      	bcc.n	f6ca <transpose+0xba>
		}
	}
	
}
    f758:	46c0      	nop			; (mov r8, r8)
    f75a:	46bd      	mov	sp, r7
    f75c:	b02a      	add	sp, #168	; 0xa8
    f75e:	bdb0      	pop	{r4, r5, r7, pc}
    f760:	0000f769 	.word	0x0000f769
    f764:	000213f9 	.word	0x000213f9

0000f768 <determinant>:


float determinant(float a[6][6], uint8_t k)
{
    f768:	b590      	push	{r4, r7, lr}
    f76a:	b0ab      	sub	sp, #172	; 0xac
    f76c:	af00      	add	r7, sp, #0
    f76e:	6078      	str	r0, [r7, #4]
    f770:	000a      	movs	r2, r1
    f772:	1cfb      	adds	r3, r7, #3
    f774:	701a      	strb	r2, [r3, #0]
	float s = 1, det = 0, b[6][6];
    f776:	23fe      	movs	r3, #254	; 0xfe
    f778:	059b      	lsls	r3, r3, #22
    f77a:	22a4      	movs	r2, #164	; 0xa4
    f77c:	18ba      	adds	r2, r7, r2
    f77e:	6013      	str	r3, [r2, #0]
    f780:	2300      	movs	r3, #0
    f782:	22a0      	movs	r2, #160	; 0xa0
    f784:	18ba      	adds	r2, r7, r2
    f786:	6013      	str	r3, [r2, #0]
	uint8_t i, j, m, n, c;
	if (k == 1)
    f788:	1cfb      	adds	r3, r7, #3
    f78a:	781b      	ldrb	r3, [r3, #0]
    f78c:	2b01      	cmp	r3, #1
    f78e:	d102      	bne.n	f796 <determinant+0x2e>
	{
		return (a[0][0]);
    f790:	687b      	ldr	r3, [r7, #4]
    f792:	681b      	ldr	r3, [r3, #0]
    f794:	e0d0      	b.n	f938 <determinant+0x1d0>
	}
	else
	{
		det = 0;
    f796:	2300      	movs	r3, #0
    f798:	22a0      	movs	r2, #160	; 0xa0
    f79a:	18ba      	adds	r2, r7, r2
    f79c:	6013      	str	r3, [r2, #0]
		for (c = 0; c < k; c++)
    f79e:	239b      	movs	r3, #155	; 0x9b
    f7a0:	18fb      	adds	r3, r7, r3
    f7a2:	2200      	movs	r2, #0
    f7a4:	701a      	strb	r2, [r3, #0]
    f7a6:	e0bc      	b.n	f922 <determinant+0x1ba>
		{
			m = 0;
    f7a8:	239d      	movs	r3, #157	; 0x9d
    f7aa:	18fb      	adds	r3, r7, r3
    f7ac:	2200      	movs	r2, #0
    f7ae:	701a      	strb	r2, [r3, #0]
			n = 0;
    f7b0:	239c      	movs	r3, #156	; 0x9c
    f7b2:	18fb      	adds	r3, r7, r3
    f7b4:	2200      	movs	r2, #0
    f7b6:	701a      	strb	r2, [r3, #0]
			for (i = 0;i < k; i++)
    f7b8:	239f      	movs	r3, #159	; 0x9f
    f7ba:	18fb      	adds	r3, r7, r3
    f7bc:	2200      	movs	r2, #0
    f7be:	701a      	strb	r2, [r3, #0]
    f7c0:	e06f      	b.n	f8a2 <determinant+0x13a>
			{
				for (j = 0 ;j < k; j++)
    f7c2:	239e      	movs	r3, #158	; 0x9e
    f7c4:	18fb      	adds	r3, r7, r3
    f7c6:	2200      	movs	r2, #0
    f7c8:	701a      	strb	r2, [r3, #0]
    f7ca:	e05c      	b.n	f886 <determinant+0x11e>
				{
					b[i][j] = 0;
    f7cc:	239f      	movs	r3, #159	; 0x9f
    f7ce:	18fb      	adds	r3, r7, r3
    f7d0:	781a      	ldrb	r2, [r3, #0]
    f7d2:	239e      	movs	r3, #158	; 0x9e
    f7d4:	18fb      	adds	r3, r7, r3
    f7d6:	7818      	ldrb	r0, [r3, #0]
    f7d8:	2308      	movs	r3, #8
    f7da:	18f9      	adds	r1, r7, r3
    f7dc:	0013      	movs	r3, r2
    f7de:	005b      	lsls	r3, r3, #1
    f7e0:	189b      	adds	r3, r3, r2
    f7e2:	005b      	lsls	r3, r3, #1
    f7e4:	181b      	adds	r3, r3, r0
    f7e6:	009b      	lsls	r3, r3, #2
    f7e8:	2200      	movs	r2, #0
    f7ea:	505a      	str	r2, [r3, r1]
					if (i != 0 && j != c)
    f7ec:	239f      	movs	r3, #159	; 0x9f
    f7ee:	18fb      	adds	r3, r7, r3
    f7f0:	781b      	ldrb	r3, [r3, #0]
    f7f2:	2b00      	cmp	r3, #0
    f7f4:	d040      	beq.n	f878 <determinant+0x110>
    f7f6:	239e      	movs	r3, #158	; 0x9e
    f7f8:	18fa      	adds	r2, r7, r3
    f7fa:	239b      	movs	r3, #155	; 0x9b
    f7fc:	18fb      	adds	r3, r7, r3
    f7fe:	7812      	ldrb	r2, [r2, #0]
    f800:	781b      	ldrb	r3, [r3, #0]
    f802:	429a      	cmp	r2, r3
    f804:	d038      	beq.n	f878 <determinant+0x110>
					{
						b[m][n] = a[i][j];
    f806:	239d      	movs	r3, #157	; 0x9d
    f808:	18fb      	adds	r3, r7, r3
    f80a:	781a      	ldrb	r2, [r3, #0]
    f80c:	239c      	movs	r3, #156	; 0x9c
    f80e:	18fb      	adds	r3, r7, r3
    f810:	781c      	ldrb	r4, [r3, #0]
    f812:	239f      	movs	r3, #159	; 0x9f
    f814:	18fb      	adds	r3, r7, r3
    f816:	7819      	ldrb	r1, [r3, #0]
    f818:	000b      	movs	r3, r1
    f81a:	005b      	lsls	r3, r3, #1
    f81c:	185b      	adds	r3, r3, r1
    f81e:	00db      	lsls	r3, r3, #3
    f820:	0019      	movs	r1, r3
    f822:	687b      	ldr	r3, [r7, #4]
    f824:	185b      	adds	r3, r3, r1
    f826:	219e      	movs	r1, #158	; 0x9e
    f828:	1879      	adds	r1, r7, r1
    f82a:	7809      	ldrb	r1, [r1, #0]
    f82c:	0089      	lsls	r1, r1, #2
    f82e:	58c8      	ldr	r0, [r1, r3]
    f830:	2308      	movs	r3, #8
    f832:	18f9      	adds	r1, r7, r3
    f834:	0013      	movs	r3, r2
    f836:	005b      	lsls	r3, r3, #1
    f838:	189b      	adds	r3, r3, r2
    f83a:	005b      	lsls	r3, r3, #1
    f83c:	191b      	adds	r3, r3, r4
    f83e:	009b      	lsls	r3, r3, #2
    f840:	5058      	str	r0, [r3, r1]
						if (n < (k - 2))
    f842:	239c      	movs	r3, #156	; 0x9c
    f844:	18fb      	adds	r3, r7, r3
    f846:	781a      	ldrb	r2, [r3, #0]
    f848:	1cfb      	adds	r3, r7, #3
    f84a:	781b      	ldrb	r3, [r3, #0]
    f84c:	3b02      	subs	r3, #2
    f84e:	429a      	cmp	r2, r3
    f850:	da07      	bge.n	f862 <determinant+0xfa>
						n++;
    f852:	239c      	movs	r3, #156	; 0x9c
    f854:	18fb      	adds	r3, r7, r3
    f856:	781a      	ldrb	r2, [r3, #0]
    f858:	239c      	movs	r3, #156	; 0x9c
    f85a:	18fb      	adds	r3, r7, r3
    f85c:	3201      	adds	r2, #1
    f85e:	701a      	strb	r2, [r3, #0]
    f860:	e00a      	b.n	f878 <determinant+0x110>
						else
						{
							n = 0;
    f862:	239c      	movs	r3, #156	; 0x9c
    f864:	18fb      	adds	r3, r7, r3
    f866:	2200      	movs	r2, #0
    f868:	701a      	strb	r2, [r3, #0]
							m++;
    f86a:	239d      	movs	r3, #157	; 0x9d
    f86c:	18fb      	adds	r3, r7, r3
    f86e:	781a      	ldrb	r2, [r3, #0]
    f870:	239d      	movs	r3, #157	; 0x9d
    f872:	18fb      	adds	r3, r7, r3
    f874:	3201      	adds	r2, #1
    f876:	701a      	strb	r2, [r3, #0]
				for (j = 0 ;j < k; j++)
    f878:	239e      	movs	r3, #158	; 0x9e
    f87a:	18fb      	adds	r3, r7, r3
    f87c:	781a      	ldrb	r2, [r3, #0]
    f87e:	239e      	movs	r3, #158	; 0x9e
    f880:	18fb      	adds	r3, r7, r3
    f882:	3201      	adds	r2, #1
    f884:	701a      	strb	r2, [r3, #0]
    f886:	239e      	movs	r3, #158	; 0x9e
    f888:	18fa      	adds	r2, r7, r3
    f88a:	1cfb      	adds	r3, r7, #3
    f88c:	7812      	ldrb	r2, [r2, #0]
    f88e:	781b      	ldrb	r3, [r3, #0]
    f890:	429a      	cmp	r2, r3
    f892:	d39b      	bcc.n	f7cc <determinant+0x64>
			for (i = 0;i < k; i++)
    f894:	239f      	movs	r3, #159	; 0x9f
    f896:	18fb      	adds	r3, r7, r3
    f898:	781a      	ldrb	r2, [r3, #0]
    f89a:	239f      	movs	r3, #159	; 0x9f
    f89c:	18fb      	adds	r3, r7, r3
    f89e:	3201      	adds	r2, #1
    f8a0:	701a      	strb	r2, [r3, #0]
    f8a2:	239f      	movs	r3, #159	; 0x9f
    f8a4:	18fa      	adds	r2, r7, r3
    f8a6:	1cfb      	adds	r3, r7, #3
    f8a8:	7812      	ldrb	r2, [r2, #0]
    f8aa:	781b      	ldrb	r3, [r3, #0]
    f8ac:	429a      	cmp	r2, r3
    f8ae:	d388      	bcc.n	f7c2 <determinant+0x5a>
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, k - 1));
    f8b0:	239b      	movs	r3, #155	; 0x9b
    f8b2:	18fb      	adds	r3, r7, r3
    f8b4:	781a      	ldrb	r2, [r3, #0]
    f8b6:	687b      	ldr	r3, [r7, #4]
    f8b8:	0092      	lsls	r2, r2, #2
    f8ba:	58d4      	ldr	r4, [r2, r3]
    f8bc:	1cfb      	adds	r3, r7, #3
    f8be:	781b      	ldrb	r3, [r3, #0]
    f8c0:	3b01      	subs	r3, #1
    f8c2:	b2da      	uxtb	r2, r3
    f8c4:	2308      	movs	r3, #8
    f8c6:	18fb      	adds	r3, r7, r3
    f8c8:	0011      	movs	r1, r2
    f8ca:	0018      	movs	r0, r3
    f8cc:	f7ff ff4c 	bl	f768 <determinant>
    f8d0:	1c02      	adds	r2, r0, #0
    f8d2:	4b1b      	ldr	r3, [pc, #108]	; (f940 <determinant+0x1d8>)
    f8d4:	1c11      	adds	r1, r2, #0
    f8d6:	1c20      	adds	r0, r4, #0
    f8d8:	4798      	blx	r3
    f8da:	1c03      	adds	r3, r0, #0
    f8dc:	1c1a      	adds	r2, r3, #0
    f8de:	4b18      	ldr	r3, [pc, #96]	; (f940 <determinant+0x1d8>)
    f8e0:	21a4      	movs	r1, #164	; 0xa4
    f8e2:	1879      	adds	r1, r7, r1
    f8e4:	6809      	ldr	r1, [r1, #0]
    f8e6:	1c10      	adds	r0, r2, #0
    f8e8:	4798      	blx	r3
    f8ea:	1c03      	adds	r3, r0, #0
    f8ec:	1c1a      	adds	r2, r3, #0
    f8ee:	4b15      	ldr	r3, [pc, #84]	; (f944 <determinant+0x1dc>)
    f8f0:	1c11      	adds	r1, r2, #0
    f8f2:	22a0      	movs	r2, #160	; 0xa0
    f8f4:	18ba      	adds	r2, r7, r2
    f8f6:	6810      	ldr	r0, [r2, #0]
    f8f8:	4798      	blx	r3
    f8fa:	1c03      	adds	r3, r0, #0
    f8fc:	22a0      	movs	r2, #160	; 0xa0
    f8fe:	18ba      	adds	r2, r7, r2
    f900:	6013      	str	r3, [r2, #0]
			s = -1 * s;
    f902:	23a4      	movs	r3, #164	; 0xa4
    f904:	18fb      	adds	r3, r7, r3
    f906:	681b      	ldr	r3, [r3, #0]
    f908:	2280      	movs	r2, #128	; 0x80
    f90a:	0612      	lsls	r2, r2, #24
    f90c:	4053      	eors	r3, r2
    f90e:	22a4      	movs	r2, #164	; 0xa4
    f910:	18ba      	adds	r2, r7, r2
    f912:	6013      	str	r3, [r2, #0]
		for (c = 0; c < k; c++)
    f914:	239b      	movs	r3, #155	; 0x9b
    f916:	18fb      	adds	r3, r7, r3
    f918:	781a      	ldrb	r2, [r3, #0]
    f91a:	239b      	movs	r3, #155	; 0x9b
    f91c:	18fb      	adds	r3, r7, r3
    f91e:	3201      	adds	r2, #1
    f920:	701a      	strb	r2, [r3, #0]
    f922:	239b      	movs	r3, #155	; 0x9b
    f924:	18fa      	adds	r2, r7, r3
    f926:	1cfb      	adds	r3, r7, #3
    f928:	7812      	ldrb	r2, [r2, #0]
    f92a:	781b      	ldrb	r3, [r3, #0]
    f92c:	429a      	cmp	r2, r3
    f92e:	d200      	bcs.n	f932 <determinant+0x1ca>
    f930:	e73a      	b.n	f7a8 <determinant+0x40>
		}
	}
	
	return (det);
    f932:	23a0      	movs	r3, #160	; 0xa0
    f934:	18fb      	adds	r3, r7, r3
    f936:	681b      	ldr	r3, [r3, #0]
}
    f938:	1c18      	adds	r0, r3, #0
    f93a:	46bd      	mov	sp, r7
    f93c:	b02b      	add	sp, #172	; 0xac
    f93e:	bd90      	pop	{r4, r7, pc}
    f940:	000217d9 	.word	0x000217d9
    f944:	000210d5 	.word	0x000210d5

0000f948 <system_pinmux_get_group_from_gpio_pin>:
{
    f948:	b580      	push	{r7, lr}
    f94a:	b084      	sub	sp, #16
    f94c:	af00      	add	r7, sp, #0
    f94e:	0002      	movs	r2, r0
    f950:	1dfb      	adds	r3, r7, #7
    f952:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    f954:	230f      	movs	r3, #15
    f956:	18fb      	adds	r3, r7, r3
    f958:	1dfa      	adds	r2, r7, #7
    f95a:	7812      	ldrb	r2, [r2, #0]
    f95c:	09d2      	lsrs	r2, r2, #7
    f95e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    f960:	230e      	movs	r3, #14
    f962:	18fb      	adds	r3, r7, r3
    f964:	1dfa      	adds	r2, r7, #7
    f966:	7812      	ldrb	r2, [r2, #0]
    f968:	0952      	lsrs	r2, r2, #5
    f96a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    f96c:	4b0d      	ldr	r3, [pc, #52]	; (f9a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    f96e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    f970:	230f      	movs	r3, #15
    f972:	18fb      	adds	r3, r7, r3
    f974:	781b      	ldrb	r3, [r3, #0]
    f976:	2b00      	cmp	r3, #0
    f978:	d10f      	bne.n	f99a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    f97a:	230f      	movs	r3, #15
    f97c:	18fb      	adds	r3, r7, r3
    f97e:	781b      	ldrb	r3, [r3, #0]
    f980:	009b      	lsls	r3, r3, #2
    f982:	2210      	movs	r2, #16
    f984:	4694      	mov	ip, r2
    f986:	44bc      	add	ip, r7
    f988:	4463      	add	r3, ip
    f98a:	3b08      	subs	r3, #8
    f98c:	681a      	ldr	r2, [r3, #0]
    f98e:	230e      	movs	r3, #14
    f990:	18fb      	adds	r3, r7, r3
    f992:	781b      	ldrb	r3, [r3, #0]
    f994:	01db      	lsls	r3, r3, #7
    f996:	18d3      	adds	r3, r2, r3
    f998:	e000      	b.n	f99c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    f99a:	2300      	movs	r3, #0
}
    f99c:	0018      	movs	r0, r3
    f99e:	46bd      	mov	sp, r7
    f9a0:	b004      	add	sp, #16
    f9a2:	bd80      	pop	{r7, pc}
    f9a4:	40002800 	.word	0x40002800

0000f9a8 <port_get_group_from_gpio_pin>:
{
    f9a8:	b580      	push	{r7, lr}
    f9aa:	b082      	sub	sp, #8
    f9ac:	af00      	add	r7, sp, #0
    f9ae:	0002      	movs	r2, r0
    f9b0:	1dfb      	adds	r3, r7, #7
    f9b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    f9b4:	1dfb      	adds	r3, r7, #7
    f9b6:	781b      	ldrb	r3, [r3, #0]
    f9b8:	0018      	movs	r0, r3
    f9ba:	4b03      	ldr	r3, [pc, #12]	; (f9c8 <port_get_group_from_gpio_pin+0x20>)
    f9bc:	4798      	blx	r3
    f9be:	0003      	movs	r3, r0
}
    f9c0:	0018      	movs	r0, r3
    f9c2:	46bd      	mov	sp, r7
    f9c4:	b002      	add	sp, #8
    f9c6:	bd80      	pop	{r7, pc}
    f9c8:	0000f949 	.word	0x0000f949

0000f9cc <port_get_config_defaults>:
{
    f9cc:	b580      	push	{r7, lr}
    f9ce:	b082      	sub	sp, #8
    f9d0:	af00      	add	r7, sp, #0
    f9d2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    f9d4:	687b      	ldr	r3, [r7, #4]
    f9d6:	2200      	movs	r2, #0
    f9d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    f9da:	687b      	ldr	r3, [r7, #4]
    f9dc:	2201      	movs	r2, #1
    f9de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    f9e0:	687b      	ldr	r3, [r7, #4]
    f9e2:	2200      	movs	r2, #0
    f9e4:	709a      	strb	r2, [r3, #2]
}
    f9e6:	46c0      	nop			; (mov r8, r8)
    f9e8:	46bd      	mov	sp, r7
    f9ea:	b002      	add	sp, #8
    f9ec:	bd80      	pop	{r7, pc}
	...

0000f9f0 <port_pin_set_output_level>:
{
    f9f0:	b580      	push	{r7, lr}
    f9f2:	b084      	sub	sp, #16
    f9f4:	af00      	add	r7, sp, #0
    f9f6:	0002      	movs	r2, r0
    f9f8:	1dfb      	adds	r3, r7, #7
    f9fa:	701a      	strb	r2, [r3, #0]
    f9fc:	1dbb      	adds	r3, r7, #6
    f9fe:	1c0a      	adds	r2, r1, #0
    fa00:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    fa02:	1dfb      	adds	r3, r7, #7
    fa04:	781b      	ldrb	r3, [r3, #0]
    fa06:	0018      	movs	r0, r3
    fa08:	4b0d      	ldr	r3, [pc, #52]	; (fa40 <port_pin_set_output_level+0x50>)
    fa0a:	4798      	blx	r3
    fa0c:	0003      	movs	r3, r0
    fa0e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    fa10:	1dfb      	adds	r3, r7, #7
    fa12:	781b      	ldrb	r3, [r3, #0]
    fa14:	221f      	movs	r2, #31
    fa16:	4013      	ands	r3, r2
    fa18:	2201      	movs	r2, #1
    fa1a:	409a      	lsls	r2, r3
    fa1c:	0013      	movs	r3, r2
    fa1e:	60bb      	str	r3, [r7, #8]
	if (level) {
    fa20:	1dbb      	adds	r3, r7, #6
    fa22:	781b      	ldrb	r3, [r3, #0]
    fa24:	2b00      	cmp	r3, #0
    fa26:	d003      	beq.n	fa30 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    fa28:	68fb      	ldr	r3, [r7, #12]
    fa2a:	68ba      	ldr	r2, [r7, #8]
    fa2c:	619a      	str	r2, [r3, #24]
}
    fa2e:	e002      	b.n	fa36 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    fa30:	68fb      	ldr	r3, [r7, #12]
    fa32:	68ba      	ldr	r2, [r7, #8]
    fa34:	615a      	str	r2, [r3, #20]
}
    fa36:	46c0      	nop			; (mov r8, r8)
    fa38:	46bd      	mov	sp, r7
    fa3a:	b004      	add	sp, #16
    fa3c:	bd80      	pop	{r7, pc}
    fa3e:	46c0      	nop			; (mov r8, r8)
    fa40:	0000f9a9 	.word	0x0000f9a9

0000fa44 <system_interrupt_enable>:
{
    fa44:	b580      	push	{r7, lr}
    fa46:	b082      	sub	sp, #8
    fa48:	af00      	add	r7, sp, #0
    fa4a:	0002      	movs	r2, r0
    fa4c:	1dfb      	adds	r3, r7, #7
    fa4e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    fa50:	4b06      	ldr	r3, [pc, #24]	; (fa6c <system_interrupt_enable+0x28>)
    fa52:	1dfa      	adds	r2, r7, #7
    fa54:	7812      	ldrb	r2, [r2, #0]
    fa56:	0011      	movs	r1, r2
    fa58:	221f      	movs	r2, #31
    fa5a:	400a      	ands	r2, r1
    fa5c:	2101      	movs	r1, #1
    fa5e:	4091      	lsls	r1, r2
    fa60:	000a      	movs	r2, r1
    fa62:	601a      	str	r2, [r3, #0]
}
    fa64:	46c0      	nop			; (mov r8, r8)
    fa66:	46bd      	mov	sp, r7
    fa68:	b002      	add	sp, #8
    fa6a:	bd80      	pop	{r7, pc}
    fa6c:	e000e100 	.word	0xe000e100

0000fa70 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    fa70:	b580      	push	{r7, lr}
    fa72:	b082      	sub	sp, #8
    fa74:	af00      	add	r7, sp, #0
    fa76:	0002      	movs	r2, r0
    fa78:	1dfb      	adds	r3, r7, #7
    fa7a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    fa7c:	4a07      	ldr	r2, [pc, #28]	; (fa9c <system_interrupt_disable+0x2c>)
    fa7e:	1dfb      	adds	r3, r7, #7
    fa80:	781b      	ldrb	r3, [r3, #0]
    fa82:	0019      	movs	r1, r3
    fa84:	231f      	movs	r3, #31
    fa86:	400b      	ands	r3, r1
    fa88:	2101      	movs	r1, #1
    fa8a:	4099      	lsls	r1, r3
    fa8c:	000b      	movs	r3, r1
    fa8e:	0019      	movs	r1, r3
    fa90:	2380      	movs	r3, #128	; 0x80
    fa92:	50d1      	str	r1, [r2, r3]
}
    fa94:	46c0      	nop			; (mov r8, r8)
    fa96:	46bd      	mov	sp, r7
    fa98:	b002      	add	sp, #8
    fa9a:	bd80      	pop	{r7, pc}
    fa9c:	e000e100 	.word	0xe000e100

0000faa0 <i2c_master_is_syncing>:
{
    faa0:	b580      	push	{r7, lr}
    faa2:	b084      	sub	sp, #16
    faa4:	af00      	add	r7, sp, #0
    faa6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    faa8:	687b      	ldr	r3, [r7, #4]
    faaa:	681b      	ldr	r3, [r3, #0]
    faac:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    faae:	68fb      	ldr	r3, [r7, #12]
    fab0:	69db      	ldr	r3, [r3, #28]
    fab2:	2207      	movs	r2, #7
    fab4:	4013      	ands	r3, r2
    fab6:	1e5a      	subs	r2, r3, #1
    fab8:	4193      	sbcs	r3, r2
    faba:	b2db      	uxtb	r3, r3
}
    fabc:	0018      	movs	r0, r3
    fabe:	46bd      	mov	sp, r7
    fac0:	b004      	add	sp, #16
    fac2:	bd80      	pop	{r7, pc}

0000fac4 <_i2c_master_wait_for_sync>:
{
    fac4:	b580      	push	{r7, lr}
    fac6:	b082      	sub	sp, #8
    fac8:	af00      	add	r7, sp, #0
    faca:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    facc:	46c0      	nop			; (mov r8, r8)
    face:	687b      	ldr	r3, [r7, #4]
    fad0:	0018      	movs	r0, r3
    fad2:	4b04      	ldr	r3, [pc, #16]	; (fae4 <_i2c_master_wait_for_sync+0x20>)
    fad4:	4798      	blx	r3
    fad6:	1e03      	subs	r3, r0, #0
    fad8:	d1f9      	bne.n	face <_i2c_master_wait_for_sync+0xa>
}
    fada:	46c0      	nop			; (mov r8, r8)
    fadc:	46bd      	mov	sp, r7
    fade:	b002      	add	sp, #8
    fae0:	bd80      	pop	{r7, pc}
    fae2:	46c0      	nop			; (mov r8, r8)
    fae4:	0000faa1 	.word	0x0000faa1

0000fae8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    fae8:	b580      	push	{r7, lr}
    faea:	b082      	sub	sp, #8
    faec:	af00      	add	r7, sp, #0
    faee:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    faf0:	687b      	ldr	r3, [r7, #4]
    faf2:	2264      	movs	r2, #100	; 0x64
    faf4:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    faf6:	687b      	ldr	r3, [r7, #4]
    faf8:	4a1b      	ldr	r2, [pc, #108]	; (fb68 <i2c_master_get_config_defaults+0x80>)
    fafa:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    fafc:	687b      	ldr	r3, [r7, #4]
    fafe:	2200      	movs	r2, #0
    fb00:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    fb02:	687b      	ldr	r3, [r7, #4]
    fb04:	2200      	movs	r2, #0
    fb06:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    fb08:	687b      	ldr	r3, [r7, #4]
    fb0a:	2200      	movs	r2, #0
    fb0c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    fb0e:	687b      	ldr	r3, [r7, #4]
    fb10:	2280      	movs	r2, #128	; 0x80
    fb12:	0392      	lsls	r2, r2, #14
    fb14:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    fb16:	687b      	ldr	r3, [r7, #4]
    fb18:	2201      	movs	r2, #1
    fb1a:	4252      	negs	r2, r2
    fb1c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    fb1e:	687b      	ldr	r3, [r7, #4]
    fb20:	2201      	movs	r2, #1
    fb22:	4252      	negs	r2, r2
    fb24:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    fb26:	687b      	ldr	r3, [r7, #4]
    fb28:	2200      	movs	r2, #0
    fb2a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    fb2c:	687b      	ldr	r3, [r7, #4]
    fb2e:	2200      	movs	r2, #0
    fb30:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    fb32:	687b      	ldr	r3, [r7, #4]
    fb34:	2224      	movs	r2, #36	; 0x24
    fb36:	2100      	movs	r1, #0
    fb38:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    fb3a:	687b      	ldr	r3, [r7, #4]
    fb3c:	2200      	movs	r2, #0
    fb3e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    fb40:	687b      	ldr	r3, [r7, #4]
    fb42:	222c      	movs	r2, #44	; 0x2c
    fb44:	2100      	movs	r1, #0
    fb46:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    fb48:	687b      	ldr	r3, [r7, #4]
    fb4a:	222d      	movs	r2, #45	; 0x2d
    fb4c:	2100      	movs	r1, #0
    fb4e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    fb50:	687b      	ldr	r3, [r7, #4]
    fb52:	222e      	movs	r2, #46	; 0x2e
    fb54:	2100      	movs	r1, #0
    fb56:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    fb58:	687b      	ldr	r3, [r7, #4]
    fb5a:	22d7      	movs	r2, #215	; 0xd7
    fb5c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    fb5e:	46c0      	nop			; (mov r8, r8)
    fb60:	46bd      	mov	sp, r7
    fb62:	b002      	add	sp, #8
    fb64:	bd80      	pop	{r7, pc}
    fb66:	46c0      	nop			; (mov r8, r8)
    fb68:	00000d48 	.word	0x00000d48

0000fb6c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    fb6c:	b580      	push	{r7, lr}
    fb6e:	b084      	sub	sp, #16
    fb70:	af00      	add	r7, sp, #0
    fb72:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    fb74:	687b      	ldr	r3, [r7, #4]
    fb76:	681b      	ldr	r3, [r3, #0]
    fb78:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    fb7a:	2300      	movs	r3, #0
    fb7c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    fb7e:	687b      	ldr	r3, [r7, #4]
    fb80:	0018      	movs	r0, r3
    fb82:	4b14      	ldr	r3, [pc, #80]	; (fbd4 <i2c_master_enable+0x68>)
    fb84:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    fb86:	68bb      	ldr	r3, [r7, #8]
    fb88:	681b      	ldr	r3, [r3, #0]
    fb8a:	2202      	movs	r2, #2
    fb8c:	431a      	orrs	r2, r3
    fb8e:	68bb      	ldr	r3, [r7, #8]
    fb90:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    fb92:	687b      	ldr	r3, [r7, #4]
    fb94:	681b      	ldr	r3, [r3, #0]
    fb96:	0018      	movs	r0, r3
    fb98:	4b0f      	ldr	r3, [pc, #60]	; (fbd8 <i2c_master_enable+0x6c>)
    fb9a:	4798      	blx	r3
    fb9c:	0003      	movs	r3, r0
    fb9e:	0018      	movs	r0, r3
    fba0:	4b0e      	ldr	r3, [pc, #56]	; (fbdc <i2c_master_enable+0x70>)
    fba2:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    fba4:	e00c      	b.n	fbc0 <i2c_master_enable+0x54>
		timeout_counter++;
    fba6:	68fb      	ldr	r3, [r7, #12]
    fba8:	3301      	adds	r3, #1
    fbaa:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    fbac:	687b      	ldr	r3, [r7, #4]
    fbae:	88db      	ldrh	r3, [r3, #6]
    fbb0:	001a      	movs	r2, r3
    fbb2:	68fb      	ldr	r3, [r7, #12]
    fbb4:	429a      	cmp	r2, r3
    fbb6:	d803      	bhi.n	fbc0 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    fbb8:	68bb      	ldr	r3, [r7, #8]
    fbba:	2210      	movs	r2, #16
    fbbc:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    fbbe:	e006      	b.n	fbce <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    fbc0:	68bb      	ldr	r3, [r7, #8]
    fbc2:	8b5b      	ldrh	r3, [r3, #26]
    fbc4:	b29b      	uxth	r3, r3
    fbc6:	001a      	movs	r2, r3
    fbc8:	2310      	movs	r3, #16
    fbca:	4013      	ands	r3, r2
    fbcc:	d0eb      	beq.n	fba6 <i2c_master_enable+0x3a>
		}
	}
}
    fbce:	46bd      	mov	sp, r7
    fbd0:	b004      	add	sp, #16
    fbd2:	bd80      	pop	{r7, pc}
    fbd4:	0000fac5 	.word	0x0000fac5
    fbd8:	00008175 	.word	0x00008175
    fbdc:	0000fa45 	.word	0x0000fa45

0000fbe0 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    fbe0:	b580      	push	{r7, lr}
    fbe2:	b084      	sub	sp, #16
    fbe4:	af00      	add	r7, sp, #0
    fbe6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    fbe8:	687b      	ldr	r3, [r7, #4]
    fbea:	681b      	ldr	r3, [r3, #0]
    fbec:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    fbee:	687b      	ldr	r3, [r7, #4]
    fbf0:	681b      	ldr	r3, [r3, #0]
    fbf2:	0018      	movs	r0, r3
    fbf4:	4b0d      	ldr	r3, [pc, #52]	; (fc2c <i2c_master_disable+0x4c>)
    fbf6:	4798      	blx	r3
    fbf8:	0003      	movs	r3, r0
    fbfa:	0018      	movs	r0, r3
    fbfc:	4b0c      	ldr	r3, [pc, #48]	; (fc30 <i2c_master_disable+0x50>)
    fbfe:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    fc00:	687b      	ldr	r3, [r7, #4]
    fc02:	0018      	movs	r0, r3
    fc04:	4b0b      	ldr	r3, [pc, #44]	; (fc34 <i2c_master_disable+0x54>)
    fc06:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    fc08:	68fb      	ldr	r3, [r7, #12]
    fc0a:	2283      	movs	r2, #131	; 0x83
    fc0c:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    fc0e:	68fb      	ldr	r3, [r7, #12]
    fc10:	2283      	movs	r2, #131	; 0x83
    fc12:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    fc14:	68fb      	ldr	r3, [r7, #12]
    fc16:	681b      	ldr	r3, [r3, #0]
    fc18:	2202      	movs	r2, #2
    fc1a:	4393      	bics	r3, r2
    fc1c:	001a      	movs	r2, r3
    fc1e:	68fb      	ldr	r3, [r7, #12]
    fc20:	601a      	str	r2, [r3, #0]

}
    fc22:	46c0      	nop			; (mov r8, r8)
    fc24:	46bd      	mov	sp, r7
    fc26:	b004      	add	sp, #16
    fc28:	bd80      	pop	{r7, pc}
    fc2a:	46c0      	nop			; (mov r8, r8)
    fc2c:	00008175 	.word	0x00008175
    fc30:	0000fa71 	.word	0x0000fa71
    fc34:	0000fac5 	.word	0x0000fac5

0000fc38 <spi_is_syncing>:
{
    fc38:	b580      	push	{r7, lr}
    fc3a:	b084      	sub	sp, #16
    fc3c:	af00      	add	r7, sp, #0
    fc3e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    fc40:	687b      	ldr	r3, [r7, #4]
    fc42:	681b      	ldr	r3, [r3, #0]
    fc44:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    fc46:	68fb      	ldr	r3, [r7, #12]
    fc48:	69db      	ldr	r3, [r3, #28]
    fc4a:	1e5a      	subs	r2, r3, #1
    fc4c:	4193      	sbcs	r3, r2
    fc4e:	b2db      	uxtb	r3, r3
}
    fc50:	0018      	movs	r0, r3
    fc52:	46bd      	mov	sp, r7
    fc54:	b004      	add	sp, #16
    fc56:	bd80      	pop	{r7, pc}

0000fc58 <spi_get_config_defaults>:
{
    fc58:	b580      	push	{r7, lr}
    fc5a:	b082      	sub	sp, #8
    fc5c:	af00      	add	r7, sp, #0
    fc5e:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    fc60:	687b      	ldr	r3, [r7, #4]
    fc62:	2201      	movs	r2, #1
    fc64:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    fc66:	687b      	ldr	r3, [r7, #4]
    fc68:	2200      	movs	r2, #0
    fc6a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    fc6c:	687b      	ldr	r3, [r7, #4]
    fc6e:	2200      	movs	r2, #0
    fc70:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    fc72:	687b      	ldr	r3, [r7, #4]
    fc74:	22c0      	movs	r2, #192	; 0xc0
    fc76:	0392      	lsls	r2, r2, #14
    fc78:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    fc7a:	687b      	ldr	r3, [r7, #4]
    fc7c:	2200      	movs	r2, #0
    fc7e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    fc80:	687b      	ldr	r3, [r7, #4]
    fc82:	2200      	movs	r2, #0
    fc84:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    fc86:	687b      	ldr	r3, [r7, #4]
    fc88:	2201      	movs	r2, #1
    fc8a:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    fc8c:	687b      	ldr	r3, [r7, #4]
    fc8e:	2201      	movs	r2, #1
    fc90:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    fc92:	687b      	ldr	r3, [r7, #4]
    fc94:	2200      	movs	r2, #0
    fc96:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    fc98:	687b      	ldr	r3, [r7, #4]
    fc9a:	2224      	movs	r2, #36	; 0x24
    fc9c:	2100      	movs	r1, #0
    fc9e:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    fca0:	687b      	ldr	r3, [r7, #4]
    fca2:	3318      	adds	r3, #24
    fca4:	220c      	movs	r2, #12
    fca6:	2100      	movs	r1, #0
    fca8:	0018      	movs	r0, r3
    fcaa:	4b0a      	ldr	r3, [pc, #40]	; (fcd4 <spi_get_config_defaults+0x7c>)
    fcac:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    fcae:	687b      	ldr	r3, [r7, #4]
    fcb0:	4a09      	ldr	r2, [pc, #36]	; (fcd8 <spi_get_config_defaults+0x80>)
    fcb2:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    fcb4:	687b      	ldr	r3, [r7, #4]
    fcb6:	2200      	movs	r2, #0
    fcb8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    fcba:	687b      	ldr	r3, [r7, #4]
    fcbc:	2200      	movs	r2, #0
    fcbe:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    fcc0:	687b      	ldr	r3, [r7, #4]
    fcc2:	2200      	movs	r2, #0
    fcc4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    fcc6:	687b      	ldr	r3, [r7, #4]
    fcc8:	2200      	movs	r2, #0
    fcca:	635a      	str	r2, [r3, #52]	; 0x34
};
    fccc:	46c0      	nop			; (mov r8, r8)
    fcce:	46bd      	mov	sp, r7
    fcd0:	b002      	add	sp, #8
    fcd2:	bd80      	pop	{r7, pc}
    fcd4:	00023c9d 	.word	0x00023c9d
    fcd8:	000186a0 	.word	0x000186a0

0000fcdc <spi_slave_inst_get_config_defaults>:
{
    fcdc:	b580      	push	{r7, lr}
    fcde:	b082      	sub	sp, #8
    fce0:	af00      	add	r7, sp, #0
    fce2:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    fce4:	687b      	ldr	r3, [r7, #4]
    fce6:	220a      	movs	r2, #10
    fce8:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    fcea:	687b      	ldr	r3, [r7, #4]
    fcec:	2200      	movs	r2, #0
    fcee:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    fcf0:	687b      	ldr	r3, [r7, #4]
    fcf2:	2200      	movs	r2, #0
    fcf4:	709a      	strb	r2, [r3, #2]
}
    fcf6:	46c0      	nop			; (mov r8, r8)
    fcf8:	46bd      	mov	sp, r7
    fcfa:	b002      	add	sp, #8
    fcfc:	bd80      	pop	{r7, pc}
	...

0000fd00 <spi_attach_slave>:
{
    fd00:	b580      	push	{r7, lr}
    fd02:	b084      	sub	sp, #16
    fd04:	af00      	add	r7, sp, #0
    fd06:	6078      	str	r0, [r7, #4]
    fd08:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    fd0a:	683b      	ldr	r3, [r7, #0]
    fd0c:	781a      	ldrb	r2, [r3, #0]
    fd0e:	687b      	ldr	r3, [r7, #4]
    fd10:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    fd12:	683b      	ldr	r3, [r7, #0]
    fd14:	785a      	ldrb	r2, [r3, #1]
    fd16:	687b      	ldr	r3, [r7, #4]
    fd18:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    fd1a:	683b      	ldr	r3, [r7, #0]
    fd1c:	789a      	ldrb	r2, [r3, #2]
    fd1e:	687b      	ldr	r3, [r7, #4]
    fd20:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    fd22:	230c      	movs	r3, #12
    fd24:	18fb      	adds	r3, r7, r3
    fd26:	0018      	movs	r0, r3
    fd28:	4b0b      	ldr	r3, [pc, #44]	; (fd58 <spi_attach_slave+0x58>)
    fd2a:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    fd2c:	230c      	movs	r3, #12
    fd2e:	18fb      	adds	r3, r7, r3
    fd30:	2201      	movs	r2, #1
    fd32:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    fd34:	687b      	ldr	r3, [r7, #4]
    fd36:	781b      	ldrb	r3, [r3, #0]
    fd38:	220c      	movs	r2, #12
    fd3a:	18ba      	adds	r2, r7, r2
    fd3c:	0011      	movs	r1, r2
    fd3e:	0018      	movs	r0, r3
    fd40:	4b06      	ldr	r3, [pc, #24]	; (fd5c <spi_attach_slave+0x5c>)
    fd42:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    fd44:	687b      	ldr	r3, [r7, #4]
    fd46:	781b      	ldrb	r3, [r3, #0]
    fd48:	2101      	movs	r1, #1
    fd4a:	0018      	movs	r0, r3
    fd4c:	4b04      	ldr	r3, [pc, #16]	; (fd60 <spi_attach_slave+0x60>)
    fd4e:	4798      	blx	r3
}
    fd50:	46c0      	nop			; (mov r8, r8)
    fd52:	46bd      	mov	sp, r7
    fd54:	b004      	add	sp, #16
    fd56:	bd80      	pop	{r7, pc}
    fd58:	0000f9cd 	.word	0x0000f9cd
    fd5c:	0001820d 	.word	0x0001820d
    fd60:	0000f9f1 	.word	0x0000f9f1

0000fd64 <spi_enable>:
{
    fd64:	b580      	push	{r7, lr}
    fd66:	b084      	sub	sp, #16
    fd68:	af00      	add	r7, sp, #0
    fd6a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    fd6c:	687b      	ldr	r3, [r7, #4]
    fd6e:	681b      	ldr	r3, [r3, #0]
    fd70:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    fd72:	687b      	ldr	r3, [r7, #4]
    fd74:	681b      	ldr	r3, [r3, #0]
    fd76:	0018      	movs	r0, r3
    fd78:	4b0b      	ldr	r3, [pc, #44]	; (fda8 <spi_enable+0x44>)
    fd7a:	4798      	blx	r3
    fd7c:	0003      	movs	r3, r0
    fd7e:	0018      	movs	r0, r3
    fd80:	4b0a      	ldr	r3, [pc, #40]	; (fdac <spi_enable+0x48>)
    fd82:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    fd84:	46c0      	nop			; (mov r8, r8)
    fd86:	687b      	ldr	r3, [r7, #4]
    fd88:	0018      	movs	r0, r3
    fd8a:	4b09      	ldr	r3, [pc, #36]	; (fdb0 <spi_enable+0x4c>)
    fd8c:	4798      	blx	r3
    fd8e:	1e03      	subs	r3, r0, #0
    fd90:	d1f9      	bne.n	fd86 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    fd92:	68fb      	ldr	r3, [r7, #12]
    fd94:	681b      	ldr	r3, [r3, #0]
    fd96:	2202      	movs	r2, #2
    fd98:	431a      	orrs	r2, r3
    fd9a:	68fb      	ldr	r3, [r7, #12]
    fd9c:	601a      	str	r2, [r3, #0]
}
    fd9e:	46c0      	nop			; (mov r8, r8)
    fda0:	46bd      	mov	sp, r7
    fda2:	b004      	add	sp, #16
    fda4:	bd80      	pop	{r7, pc}
    fda6:	46c0      	nop			; (mov r8, r8)
    fda8:	00008175 	.word	0x00008175
    fdac:	0000fa45 	.word	0x0000fa45
    fdb0:	0000fc39 	.word	0x0000fc39

0000fdb4 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    fdb4:	b580      	push	{r7, lr}
    fdb6:	b084      	sub	sp, #16
    fdb8:	af00      	add	r7, sp, #0
    fdba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    fdbc:	687b      	ldr	r3, [r7, #4]
    fdbe:	681b      	ldr	r3, [r3, #0]
    fdc0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    fdc2:	687b      	ldr	r3, [r7, #4]
    fdc4:	681b      	ldr	r3, [r3, #0]
    fdc6:	0018      	movs	r0, r3
    fdc8:	4b0e      	ldr	r3, [pc, #56]	; (fe04 <spi_disable+0x50>)
    fdca:	4798      	blx	r3
    fdcc:	0003      	movs	r3, r0
    fdce:	0018      	movs	r0, r3
    fdd0:	4b0d      	ldr	r3, [pc, #52]	; (fe08 <spi_disable+0x54>)
    fdd2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    fdd4:	46c0      	nop			; (mov r8, r8)
    fdd6:	687b      	ldr	r3, [r7, #4]
    fdd8:	0018      	movs	r0, r3
    fdda:	4b0c      	ldr	r3, [pc, #48]	; (fe0c <spi_disable+0x58>)
    fddc:	4798      	blx	r3
    fdde:	1e03      	subs	r3, r0, #0
    fde0:	d1f9      	bne.n	fdd6 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    fde2:	68fb      	ldr	r3, [r7, #12]
    fde4:	228f      	movs	r2, #143	; 0x8f
    fde6:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    fde8:	68fb      	ldr	r3, [r7, #12]
    fdea:	228f      	movs	r2, #143	; 0x8f
    fdec:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    fdee:	68fb      	ldr	r3, [r7, #12]
    fdf0:	681b      	ldr	r3, [r3, #0]
    fdf2:	2202      	movs	r2, #2
    fdf4:	4393      	bics	r3, r2
    fdf6:	001a      	movs	r2, r3
    fdf8:	68fb      	ldr	r3, [r7, #12]
    fdfa:	601a      	str	r2, [r3, #0]
}
    fdfc:	46c0      	nop			; (mov r8, r8)
    fdfe:	46bd      	mov	sp, r7
    fe00:	b004      	add	sp, #16
    fe02:	bd80      	pop	{r7, pc}
    fe04:	00008175 	.word	0x00008175
    fe08:	0000fa71 	.word	0x0000fa71
    fe0c:	0000fc39 	.word	0x0000fc39

0000fe10 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    fe10:	b580      	push	{r7, lr}
    fe12:	b084      	sub	sp, #16
    fe14:	af00      	add	r7, sp, #0
    fe16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    fe18:	687b      	ldr	r3, [r7, #4]
    fe1a:	681b      	ldr	r3, [r3, #0]
    fe1c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    fe1e:	68fb      	ldr	r3, [r7, #12]
    fe20:	7e1b      	ldrb	r3, [r3, #24]
    fe22:	b2db      	uxtb	r3, r3
    fe24:	001a      	movs	r2, r3
    fe26:	2304      	movs	r3, #4
    fe28:	4013      	ands	r3, r2
    fe2a:	1e5a      	subs	r2, r3, #1
    fe2c:	4193      	sbcs	r3, r2
    fe2e:	b2db      	uxtb	r3, r3
}
    fe30:	0018      	movs	r0, r3
    fe32:	46bd      	mov	sp, r7
    fe34:	b004      	add	sp, #16
    fe36:	bd80      	pop	{r7, pc}

0000fe38 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    fe38:	b580      	push	{r7, lr}
    fe3a:	b084      	sub	sp, #16
    fe3c:	af00      	add	r7, sp, #0
    fe3e:	6078      	str	r0, [r7, #4]
    fe40:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    fe42:	687b      	ldr	r3, [r7, #4]
    fe44:	681b      	ldr	r3, [r3, #0]
    fe46:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    fe48:	687b      	ldr	r3, [r7, #4]
    fe4a:	0018      	movs	r0, r3
    fe4c:	4b1b      	ldr	r3, [pc, #108]	; (febc <spi_read+0x84>)
    fe4e:	4798      	blx	r3
    fe50:	0003      	movs	r3, r0
    fe52:	001a      	movs	r2, r3
    fe54:	2301      	movs	r3, #1
    fe56:	4053      	eors	r3, r2
    fe58:	b2db      	uxtb	r3, r3
    fe5a:	2b00      	cmp	r3, #0
    fe5c:	d001      	beq.n	fe62 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    fe5e:	2310      	movs	r3, #16
    fe60:	e027      	b.n	feb2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    fe62:	230f      	movs	r3, #15
    fe64:	18fb      	adds	r3, r7, r3
    fe66:	2200      	movs	r2, #0
    fe68:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    fe6a:	68bb      	ldr	r3, [r7, #8]
    fe6c:	8b5b      	ldrh	r3, [r3, #26]
    fe6e:	b29b      	uxth	r3, r3
    fe70:	001a      	movs	r2, r3
    fe72:	2304      	movs	r3, #4
    fe74:	4013      	ands	r3, r2
    fe76:	d006      	beq.n	fe86 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    fe78:	230f      	movs	r3, #15
    fe7a:	18fb      	adds	r3, r7, r3
    fe7c:	221e      	movs	r2, #30
    fe7e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fe80:	68bb      	ldr	r3, [r7, #8]
    fe82:	2204      	movs	r2, #4
    fe84:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fe86:	687b      	ldr	r3, [r7, #4]
    fe88:	799b      	ldrb	r3, [r3, #6]
    fe8a:	2b01      	cmp	r3, #1
    fe8c:	d108      	bne.n	fea0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    fe8e:	68bb      	ldr	r3, [r7, #8]
    fe90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fe92:	b29b      	uxth	r3, r3
    fe94:	05db      	lsls	r3, r3, #23
    fe96:	0ddb      	lsrs	r3, r3, #23
    fe98:	b29a      	uxth	r2, r3
    fe9a:	683b      	ldr	r3, [r7, #0]
    fe9c:	801a      	strh	r2, [r3, #0]
    fe9e:	e005      	b.n	feac <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    fea0:	68bb      	ldr	r3, [r7, #8]
    fea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fea4:	b2db      	uxtb	r3, r3
    fea6:	b29a      	uxth	r2, r3
    fea8:	683b      	ldr	r3, [r7, #0]
    feaa:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    feac:	230f      	movs	r3, #15
    feae:	18fb      	adds	r3, r7, r3
    feb0:	781b      	ldrb	r3, [r3, #0]
}
    feb2:	0018      	movs	r0, r3
    feb4:	46bd      	mov	sp, r7
    feb6:	b004      	add	sp, #16
    feb8:	bd80      	pop	{r7, pc}
    feba:	46c0      	nop			; (mov r8, r8)
    febc:	0000fe11 	.word	0x0000fe11

0000fec0 <usart_is_syncing>:
{
    fec0:	b580      	push	{r7, lr}
    fec2:	b084      	sub	sp, #16
    fec4:	af00      	add	r7, sp, #0
    fec6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    fec8:	687b      	ldr	r3, [r7, #4]
    feca:	681b      	ldr	r3, [r3, #0]
    fecc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    fece:	68fb      	ldr	r3, [r7, #12]
    fed0:	69db      	ldr	r3, [r3, #28]
    fed2:	1e5a      	subs	r2, r3, #1
    fed4:	4193      	sbcs	r3, r2
    fed6:	b2db      	uxtb	r3, r3
}
    fed8:	0018      	movs	r0, r3
    feda:	46bd      	mov	sp, r7
    fedc:	b004      	add	sp, #16
    fede:	bd80      	pop	{r7, pc}

0000fee0 <_usart_wait_for_sync>:
{
    fee0:	b580      	push	{r7, lr}
    fee2:	b082      	sub	sp, #8
    fee4:	af00      	add	r7, sp, #0
    fee6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    fee8:	46c0      	nop			; (mov r8, r8)
    feea:	687b      	ldr	r3, [r7, #4]
    feec:	0018      	movs	r0, r3
    feee:	4b04      	ldr	r3, [pc, #16]	; (ff00 <_usart_wait_for_sync+0x20>)
    fef0:	4798      	blx	r3
    fef2:	1e03      	subs	r3, r0, #0
    fef4:	d1f9      	bne.n	feea <_usart_wait_for_sync+0xa>
}
    fef6:	46c0      	nop			; (mov r8, r8)
    fef8:	46bd      	mov	sp, r7
    fefa:	b002      	add	sp, #8
    fefc:	bd80      	pop	{r7, pc}
    fefe:	46c0      	nop			; (mov r8, r8)
    ff00:	0000fec1 	.word	0x0000fec1

0000ff04 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    ff04:	b580      	push	{r7, lr}
    ff06:	b082      	sub	sp, #8
    ff08:	af00      	add	r7, sp, #0
    ff0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    ff0c:	687b      	ldr	r3, [r7, #4]
    ff0e:	2280      	movs	r2, #128	; 0x80
    ff10:	05d2      	lsls	r2, r2, #23
    ff12:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    ff14:	687b      	ldr	r3, [r7, #4]
    ff16:	2200      	movs	r2, #0
    ff18:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    ff1a:	687b      	ldr	r3, [r7, #4]
    ff1c:	22ff      	movs	r2, #255	; 0xff
    ff1e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    ff20:	687b      	ldr	r3, [r7, #4]
    ff22:	2200      	movs	r2, #0
    ff24:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    ff26:	687b      	ldr	r3, [r7, #4]
    ff28:	2200      	movs	r2, #0
    ff2a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    ff2c:	687b      	ldr	r3, [r7, #4]
    ff2e:	2296      	movs	r2, #150	; 0x96
    ff30:	0192      	lsls	r2, r2, #6
    ff32:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    ff34:	687b      	ldr	r3, [r7, #4]
    ff36:	2224      	movs	r2, #36	; 0x24
    ff38:	2101      	movs	r1, #1
    ff3a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    ff3c:	687b      	ldr	r3, [r7, #4]
    ff3e:	2225      	movs	r2, #37	; 0x25
    ff40:	2101      	movs	r1, #1
    ff42:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    ff44:	687b      	ldr	r3, [r7, #4]
    ff46:	2226      	movs	r2, #38	; 0x26
    ff48:	2100      	movs	r1, #0
    ff4a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    ff4c:	687b      	ldr	r3, [r7, #4]
    ff4e:	2227      	movs	r2, #39	; 0x27
    ff50:	2100      	movs	r1, #0
    ff52:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    ff54:	687b      	ldr	r3, [r7, #4]
    ff56:	2200      	movs	r2, #0
    ff58:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    ff5a:	687b      	ldr	r3, [r7, #4]
    ff5c:	2288      	movs	r2, #136	; 0x88
    ff5e:	0352      	lsls	r2, r2, #13
    ff60:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    ff62:	687b      	ldr	r3, [r7, #4]
    ff64:	222c      	movs	r2, #44	; 0x2c
    ff66:	2100      	movs	r1, #0
    ff68:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    ff6a:	687b      	ldr	r3, [r7, #4]
    ff6c:	222d      	movs	r2, #45	; 0x2d
    ff6e:	2100      	movs	r1, #0
    ff70:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    ff72:	687b      	ldr	r3, [r7, #4]
    ff74:	2200      	movs	r2, #0
    ff76:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    ff78:	687b      	ldr	r3, [r7, #4]
    ff7a:	2200      	movs	r2, #0
    ff7c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    ff7e:	687b      	ldr	r3, [r7, #4]
    ff80:	2200      	movs	r2, #0
    ff82:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    ff84:	687b      	ldr	r3, [r7, #4]
    ff86:	2200      	movs	r2, #0
    ff88:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    ff8a:	687b      	ldr	r3, [r7, #4]
    ff8c:	2200      	movs	r2, #0
    ff8e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    ff90:	687b      	ldr	r3, [r7, #4]
    ff92:	2200      	movs	r2, #0
    ff94:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    ff96:	687b      	ldr	r3, [r7, #4]
    ff98:	2200      	movs	r2, #0
    ff9a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    ff9c:	687b      	ldr	r3, [r7, #4]
    ff9e:	2200      	movs	r2, #0
    ffa0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    ffa2:	687b      	ldr	r3, [r7, #4]
    ffa4:	2200      	movs	r2, #0
    ffa6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    ffa8:	687b      	ldr	r3, [r7, #4]
    ffaa:	2200      	movs	r2, #0
    ffac:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    ffae:	687b      	ldr	r3, [r7, #4]
    ffb0:	2213      	movs	r2, #19
    ffb2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    ffb4:	687b      	ldr	r3, [r7, #4]
    ffb6:	2200      	movs	r2, #0
    ffb8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    ffba:	46c0      	nop			; (mov r8, r8)
    ffbc:	46bd      	mov	sp, r7
    ffbe:	b002      	add	sp, #8
    ffc0:	bd80      	pop	{r7, pc}
	...

0000ffc4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    ffc4:	b580      	push	{r7, lr}
    ffc6:	b084      	sub	sp, #16
    ffc8:	af00      	add	r7, sp, #0
    ffca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ffcc:	687b      	ldr	r3, [r7, #4]
    ffce:	681b      	ldr	r3, [r3, #0]
    ffd0:	60fb      	str	r3, [r7, #12]
	
	// Added by Kfausnight 4/27/2019**************************************
	// Check to see if uart module is disabled first
	bool enabled = usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE;
    ffd2:	68fb      	ldr	r3, [r7, #12]
    ffd4:	681b      	ldr	r3, [r3, #0]
    ffd6:	2202      	movs	r2, #2
    ffd8:	401a      	ands	r2, r3
    ffda:	230b      	movs	r3, #11
    ffdc:	18fb      	adds	r3, r7, r3
    ffde:	1e51      	subs	r1, r2, #1
    ffe0:	418a      	sbcs	r2, r1
    ffe2:	701a      	strb	r2, [r3, #0]
	if (enabled){
    ffe4:	230b      	movs	r3, #11
    ffe6:	18fb      	adds	r3, r7, r3
    ffe8:	781b      	ldrb	r3, [r3, #0]
    ffea:	2b00      	cmp	r3, #0
    ffec:	d113      	bne.n	10016 <usart_enable+0x52>
	//*******************************************************************
	
	
#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    ffee:	687b      	ldr	r3, [r7, #4]
    fff0:	681b      	ldr	r3, [r3, #0]
    fff2:	0018      	movs	r0, r3
    fff4:	4b0a      	ldr	r3, [pc, #40]	; (10020 <usart_enable+0x5c>)
    fff6:	4798      	blx	r3
    fff8:	0003      	movs	r3, r0
    fffa:	0018      	movs	r0, r3
    fffc:	4b09      	ldr	r3, [pc, #36]	; (10024 <usart_enable+0x60>)
    fffe:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10000:	687b      	ldr	r3, [r7, #4]
   10002:	0018      	movs	r0, r3
   10004:	4b08      	ldr	r3, [pc, #32]	; (10028 <usart_enable+0x64>)
   10006:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   10008:	68fb      	ldr	r3, [r7, #12]
   1000a:	681b      	ldr	r3, [r3, #0]
   1000c:	2202      	movs	r2, #2
   1000e:	431a      	orrs	r2, r3
   10010:	68fb      	ldr	r3, [r7, #12]
   10012:	601a      	str	r2, [r3, #0]
   10014:	e000      	b.n	10018 <usart_enable+0x54>
		return;
   10016:	46c0      	nop			; (mov r8, r8)
}
   10018:	46bd      	mov	sp, r7
   1001a:	b004      	add	sp, #16
   1001c:	bd80      	pop	{r7, pc}
   1001e:	46c0      	nop			; (mov r8, r8)
   10020:	00008175 	.word	0x00008175
   10024:	0000fa45 	.word	0x0000fa45
   10028:	0000fee1 	.word	0x0000fee1

0001002c <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
   1002c:	b580      	push	{r7, lr}
   1002e:	b084      	sub	sp, #16
   10030:	af00      	add	r7, sp, #0
   10032:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10034:	687b      	ldr	r3, [r7, #4]
   10036:	681b      	ldr	r3, [r3, #0]
   10038:	60fb      	str	r3, [r7, #12]
	
	// Added by Kfausnight 4/27/2019**************************************
	// Check to see if uart module is enabled first
	bool enabled = usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE;
   1003a:	68fb      	ldr	r3, [r7, #12]
   1003c:	681b      	ldr	r3, [r3, #0]
   1003e:	2202      	movs	r2, #2
   10040:	401a      	ands	r2, r3
   10042:	230b      	movs	r3, #11
   10044:	18fb      	adds	r3, r7, r3
   10046:	1e51      	subs	r1, r2, #1
   10048:	418a      	sbcs	r2, r1
   1004a:	701a      	strb	r2, [r3, #0]
	if (!enabled){
   1004c:	230b      	movs	r3, #11
   1004e:	18fb      	adds	r3, r7, r3
   10050:	781b      	ldrb	r3, [r3, #0]
   10052:	2201      	movs	r2, #1
   10054:	4053      	eors	r3, r2
   10056:	b2db      	uxtb	r3, r3
   10058:	2b00      	cmp	r3, #0
   1005a:	d114      	bne.n	10086 <usart_disable+0x5a>
	}
	//*******************************************************************

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1005c:	687b      	ldr	r3, [r7, #4]
   1005e:	681b      	ldr	r3, [r3, #0]
   10060:	0018      	movs	r0, r3
   10062:	4b0b      	ldr	r3, [pc, #44]	; (10090 <usart_disable+0x64>)
   10064:	4798      	blx	r3
   10066:	0003      	movs	r3, r0
   10068:	0018      	movs	r0, r3
   1006a:	4b0a      	ldr	r3, [pc, #40]	; (10094 <usart_disable+0x68>)
   1006c:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1006e:	687b      	ldr	r3, [r7, #4]
   10070:	0018      	movs	r0, r3
   10072:	4b09      	ldr	r3, [pc, #36]	; (10098 <usart_disable+0x6c>)
   10074:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   10076:	68fb      	ldr	r3, [r7, #12]
   10078:	681b      	ldr	r3, [r3, #0]
   1007a:	2202      	movs	r2, #2
   1007c:	4393      	bics	r3, r2
   1007e:	001a      	movs	r2, r3
   10080:	68fb      	ldr	r3, [r7, #12]
   10082:	601a      	str	r2, [r3, #0]
   10084:	e000      	b.n	10088 <usart_disable+0x5c>
		return;
   10086:	46c0      	nop			; (mov r8, r8)
}
   10088:	46bd      	mov	sp, r7
   1008a:	b004      	add	sp, #16
   1008c:	bd80      	pop	{r7, pc}
   1008e:	46c0      	nop			; (mov r8, r8)
   10090:	00008175 	.word	0x00008175
   10094:	0000fa71 	.word	0x0000fa71
   10098:	0000fee1 	.word	0x0000fee1

0001009c <usart_enable_transceiver>:
 * \param[in]  transceiver_type  Transceiver type
 */
static inline void usart_enable_transceiver(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   1009c:	b580      	push	{r7, lr}
   1009e:	b084      	sub	sp, #16
   100a0:	af00      	add	r7, sp, #0
   100a2:	6078      	str	r0, [r7, #4]
   100a4:	000a      	movs	r2, r1
   100a6:	1cfb      	adds	r3, r7, #3
   100a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   100aa:	687b      	ldr	r3, [r7, #4]
   100ac:	681b      	ldr	r3, [r3, #0]
   100ae:	60fb      	str	r3, [r7, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   100b0:	687b      	ldr	r3, [r7, #4]
   100b2:	0018      	movs	r0, r3
   100b4:	4b13      	ldr	r3, [pc, #76]	; (10104 <usart_enable_transceiver+0x68>)
   100b6:	4798      	blx	r3

	switch (transceiver_type) {
   100b8:	1cfb      	adds	r3, r7, #3
   100ba:	781b      	ldrb	r3, [r3, #0]
   100bc:	2b00      	cmp	r3, #0
   100be:	d002      	beq.n	100c6 <usart_enable_transceiver+0x2a>
   100c0:	2b01      	cmp	r3, #1
   100c2:	d00b      	beq.n	100dc <usart_enable_transceiver+0x40>
   100c4:	e015      	b.n	100f2 <usart_enable_transceiver+0x56>
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
   100c6:	68fb      	ldr	r3, [r7, #12]
   100c8:	685b      	ldr	r3, [r3, #4]
   100ca:	2280      	movs	r2, #128	; 0x80
   100cc:	0292      	lsls	r2, r2, #10
   100ce:	431a      	orrs	r2, r3
   100d0:	68fb      	ldr	r3, [r7, #12]
   100d2:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
   100d4:	687b      	ldr	r3, [r7, #4]
   100d6:	2201      	movs	r2, #1
   100d8:	719a      	strb	r2, [r3, #6]
			break;
   100da:	e00a      	b.n	100f2 <usart_enable_transceiver+0x56>

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
   100dc:	68fb      	ldr	r3, [r7, #12]
   100de:	685b      	ldr	r3, [r3, #4]
   100e0:	2280      	movs	r2, #128	; 0x80
   100e2:	0252      	lsls	r2, r2, #9
   100e4:	431a      	orrs	r2, r3
   100e6:	68fb      	ldr	r3, [r7, #12]
   100e8:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
   100ea:	687b      	ldr	r3, [r7, #4]
   100ec:	2201      	movs	r2, #1
   100ee:	71da      	strb	r2, [r3, #7]
			break;
   100f0:	46c0      	nop			; (mov r8, r8)
	}
	_usart_wait_for_sync(module);
   100f2:	687b      	ldr	r3, [r7, #4]
   100f4:	0018      	movs	r0, r3
   100f6:	4b03      	ldr	r3, [pc, #12]	; (10104 <usart_enable_transceiver+0x68>)
   100f8:	4798      	blx	r3
}
   100fa:	46c0      	nop			; (mov r8, r8)
   100fc:	46bd      	mov	sp, r7
   100fe:	b004      	add	sp, #16
   10100:	bd80      	pop	{r7, pc}
   10102:	46c0      	nop			; (mov r8, r8)
   10104:	0000fee1 	.word	0x0000fee1

00010108 <usart_disable_transceiver>:
 * \param[in]  transceiver_type  Transceiver type
 */
static inline void usart_disable_transceiver(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   10108:	b580      	push	{r7, lr}
   1010a:	b084      	sub	sp, #16
   1010c:	af00      	add	r7, sp, #0
   1010e:	6078      	str	r0, [r7, #4]
   10110:	000a      	movs	r2, r1
   10112:	1cfb      	adds	r3, r7, #3
   10114:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10116:	687b      	ldr	r3, [r7, #4]
   10118:	681b      	ldr	r3, [r3, #0]
   1011a:	60fb      	str	r3, [r7, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1011c:	687b      	ldr	r3, [r7, #4]
   1011e:	0018      	movs	r0, r3
   10120:	4b10      	ldr	r3, [pc, #64]	; (10164 <usart_disable_transceiver+0x5c>)
   10122:	4798      	blx	r3

	switch (transceiver_type) {
   10124:	1cfb      	adds	r3, r7, #3
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2b00      	cmp	r3, #0
   1012a:	d002      	beq.n	10132 <usart_disable_transceiver+0x2a>
   1012c:	2b01      	cmp	r3, #1
   1012e:	d00a      	beq.n	10146 <usart_disable_transceiver+0x3e>
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
			module->transmitter_enabled = false;
			break;
	}
}
   10130:	e013      	b.n	1015a <usart_disable_transceiver+0x52>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
   10132:	68fb      	ldr	r3, [r7, #12]
   10134:	685b      	ldr	r3, [r3, #4]
   10136:	4a0c      	ldr	r2, [pc, #48]	; (10168 <usart_disable_transceiver+0x60>)
   10138:	401a      	ands	r2, r3
   1013a:	68fb      	ldr	r3, [r7, #12]
   1013c:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
   1013e:	687b      	ldr	r3, [r7, #4]
   10140:	2200      	movs	r2, #0
   10142:	719a      	strb	r2, [r3, #6]
			break;
   10144:	e009      	b.n	1015a <usart_disable_transceiver+0x52>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
   10146:	68fb      	ldr	r3, [r7, #12]
   10148:	685b      	ldr	r3, [r3, #4]
   1014a:	4a08      	ldr	r2, [pc, #32]	; (1016c <usart_disable_transceiver+0x64>)
   1014c:	401a      	ands	r2, r3
   1014e:	68fb      	ldr	r3, [r7, #12]
   10150:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
   10152:	687b      	ldr	r3, [r7, #4]
   10154:	2200      	movs	r2, #0
   10156:	71da      	strb	r2, [r3, #7]
			break;
   10158:	46c0      	nop			; (mov r8, r8)
}
   1015a:	46c0      	nop			; (mov r8, r8)
   1015c:	46bd      	mov	sp, r7
   1015e:	b004      	add	sp, #16
   10160:	bd80      	pop	{r7, pc}
   10162:	46c0      	nop			; (mov r8, r8)
   10164:	0000fee1 	.word	0x0000fee1
   10168:	fffdffff 	.word	0xfffdffff
   1016c:	fffeffff 	.word	0xfffeffff

00010170 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   10170:	b580      	push	{r7, lr}
   10172:	b082      	sub	sp, #8
   10174:	af00      	add	r7, sp, #0
   10176:	6078      	str	r0, [r7, #4]
   10178:	000a      	movs	r2, r1
   1017a:	1cfb      	adds	r3, r7, #3
   1017c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1017e:	687b      	ldr	r3, [r7, #4]
   10180:	2231      	movs	r2, #49	; 0x31
   10182:	5c9b      	ldrb	r3, [r3, r2]
   10184:	b25a      	sxtb	r2, r3
   10186:	1cfb      	adds	r3, r7, #3
   10188:	781b      	ldrb	r3, [r3, #0]
   1018a:	2101      	movs	r1, #1
   1018c:	4099      	lsls	r1, r3
   1018e:	000b      	movs	r3, r1
   10190:	b25b      	sxtb	r3, r3
   10192:	4313      	orrs	r3, r2
   10194:	b25b      	sxtb	r3, r3
   10196:	b2d9      	uxtb	r1, r3
   10198:	687b      	ldr	r3, [r7, #4]
   1019a:	2231      	movs	r2, #49	; 0x31
   1019c:	5499      	strb	r1, [r3, r2]

}
   1019e:	46c0      	nop			; (mov r8, r8)
   101a0:	46bd      	mov	sp, r7
   101a2:	b002      	add	sp, #8
   101a4:	bd80      	pop	{r7, pc}
	...

000101a8 <disable_comms>:
#include <comms\comms.h>

extern bool USART_BLE_enabled;

//Disable
void disable_comms(void){
   101a8:	b580      	push	{r7, lr}
   101aa:	af00      	add	r7, sp, #0
	i2c_master_disable(&i2c_master_instance);
   101ac:	4b0a      	ldr	r3, [pc, #40]	; (101d8 <disable_comms+0x30>)
   101ae:	0018      	movs	r0, r3
   101b0:	4b0a      	ldr	r3, [pc, #40]	; (101dc <disable_comms+0x34>)
   101b2:	4798      	blx	r3
	spi_disable(&spi_main);
   101b4:	4b0a      	ldr	r3, [pc, #40]	; (101e0 <disable_comms+0x38>)
   101b6:	0018      	movs	r0, r3
   101b8:	4b0a      	ldr	r3, [pc, #40]	; (101e4 <disable_comms+0x3c>)
   101ba:	4798      	blx	r3
	usart_disable(&usart_laser);
   101bc:	4b0a      	ldr	r3, [pc, #40]	; (101e8 <disable_comms+0x40>)
   101be:	0018      	movs	r0, r3
   101c0:	4b0a      	ldr	r3, [pc, #40]	; (101ec <disable_comms+0x44>)
   101c2:	4798      	blx	r3
	usart_disable(&usart_BLE);
   101c4:	4b0a      	ldr	r3, [pc, #40]	; (101f0 <disable_comms+0x48>)
   101c6:	0018      	movs	r0, r3
   101c8:	4b08      	ldr	r3, [pc, #32]	; (101ec <disable_comms+0x44>)
   101ca:	4798      	blx	r3
	USART_BLE_enabled = false;
   101cc:	4b09      	ldr	r3, [pc, #36]	; (101f4 <disable_comms+0x4c>)
   101ce:	2200      	movs	r2, #0
   101d0:	701a      	strb	r2, [r3, #0]
}
   101d2:	46c0      	nop			; (mov r8, r8)
   101d4:	46bd      	mov	sp, r7
   101d6:	bd80      	pop	{r7, pc}
   101d8:	200012ac 	.word	0x200012ac
   101dc:	0000fbe1 	.word	0x0000fbe1
   101e0:	20001270 	.word	0x20001270
   101e4:	0000fdb5 	.word	0x0000fdb5
   101e8:	2000120c 	.word	0x2000120c
   101ec:	0001002d 	.word	0x0001002d
   101f0:	20001350 	.word	0x20001350
   101f4:	20004148 	.word	0x20004148

000101f8 <setup_spi>:


//SPI
//***************************************

void setup_spi(void){
   101f8:	b580      	push	{r7, lr}
   101fa:	b082      	sub	sp, #8
   101fc:	af00      	add	r7, sp, #0
	uint8_t *reg_ptr;
	
	struct spi_slave_inst_config slave_dev_config;
	
	// Set buffer-overflow status to display immediately so it can be cleared:
	reg_ptr=0x42001001;
   101fe:	4b32      	ldr	r3, [pc, #200]	; (102c8 <setup_spi+0xd0>)
   10200:	607b      	str	r3, [r7, #4]
	*reg_ptr=0x01;
   10202:	687b      	ldr	r3, [r7, #4]
   10204:	2201      	movs	r2, #1
   10206:	701a      	strb	r2, [r3, #0]
	// Configure and initialize software device instance of peripheral slave
	spi_slave_inst_get_config_defaults(&slave_dev_config);
   10208:	003b      	movs	r3, r7
   1020a:	0018      	movs	r0, r3
   1020c:	4b2f      	ldr	r3, [pc, #188]	; (102cc <setup_spi+0xd4>)
   1020e:	4798      	blx	r3
	slave_dev_config.ss_pin = lcd_SS;
   10210:	003b      	movs	r3, r7
   10212:	2217      	movs	r2, #23
   10214:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_lcd, &slave_dev_config);
   10216:	003a      	movs	r2, r7
   10218:	4b2d      	ldr	r3, [pc, #180]	; (102d0 <setup_spi+0xd8>)
   1021a:	0011      	movs	r1, r2
   1021c:	0018      	movs	r0, r3
   1021e:	4b2d      	ldr	r3, [pc, #180]	; (102d4 <setup_spi+0xdc>)
   10220:	4798      	blx	r3
	slave_dev_config.ss_pin = acc1_SS;
   10222:	003b      	movs	r3, r7
   10224:	2212      	movs	r2, #18
   10226:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_acc1, &slave_dev_config);
   10228:	003a      	movs	r2, r7
   1022a:	4b2b      	ldr	r3, [pc, #172]	; (102d8 <setup_spi+0xe0>)
   1022c:	0011      	movs	r1, r2
   1022e:	0018      	movs	r0, r3
   10230:	4b28      	ldr	r3, [pc, #160]	; (102d4 <setup_spi+0xdc>)
   10232:	4798      	blx	r3
	slave_dev_config.ss_pin = acc2_SS;
   10234:	003b      	movs	r3, r7
   10236:	2213      	movs	r2, #19
   10238:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_acc2, &slave_dev_config);
   1023a:	003a      	movs	r2, r7
   1023c:	4b27      	ldr	r3, [pc, #156]	; (102dc <setup_spi+0xe4>)
   1023e:	0011      	movs	r1, r2
   10240:	0018      	movs	r0, r3
   10242:	4b24      	ldr	r3, [pc, #144]	; (102d4 <setup_spi+0xdc>)
   10244:	4798      	blx	r3
	slave_dev_config.ss_pin = mag1_SS;
   10246:	003b      	movs	r3, r7
   10248:	2215      	movs	r2, #21
   1024a:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_mag1, &slave_dev_config);
   1024c:	003a      	movs	r2, r7
   1024e:	4b24      	ldr	r3, [pc, #144]	; (102e0 <setup_spi+0xe8>)
   10250:	0011      	movs	r1, r2
   10252:	0018      	movs	r0, r3
   10254:	4b1f      	ldr	r3, [pc, #124]	; (102d4 <setup_spi+0xdc>)
   10256:	4798      	blx	r3
	slave_dev_config.ss_pin = mag2_SS;
   10258:	003b      	movs	r3, r7
   1025a:	2214      	movs	r2, #20
   1025c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_mag2, &slave_dev_config);
   1025e:	003a      	movs	r2, r7
   10260:	4b20      	ldr	r3, [pc, #128]	; (102e4 <setup_spi+0xec>)
   10262:	0011      	movs	r1, r2
   10264:	0018      	movs	r0, r3
   10266:	4b1b      	ldr	r3, [pc, #108]	; (102d4 <setup_spi+0xdc>)
   10268:	4798      	blx	r3
	slave_dev_config.ss_pin = SD_CS;
   1026a:	003b      	movs	r3, r7
   1026c:	220f      	movs	r2, #15
   1026e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_SD, &slave_dev_config);
   10270:	003a      	movs	r2, r7
   10272:	4b1d      	ldr	r3, [pc, #116]	; (102e8 <setup_spi+0xf0>)
   10274:	0011      	movs	r1, r2
   10276:	0018      	movs	r0, r3
   10278:	4b16      	ldr	r3, [pc, #88]	; (102d4 <setup_spi+0xdc>)
   1027a:	4798      	blx	r3
	// Configure, initialize and enable SERCOM SPI module
	spi_get_config_defaults(&config_spi_master);
   1027c:	4b1b      	ldr	r3, [pc, #108]	; (102ec <setup_spi+0xf4>)
   1027e:	0018      	movs	r0, r3
   10280:	4b1b      	ldr	r3, [pc, #108]	; (102f0 <setup_spi+0xf8>)
   10282:	4798      	blx	r3
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_3;//initialize with LCD mode
   10284:	4b19      	ldr	r3, [pc, #100]	; (102ec <setup_spi+0xf4>)
   10286:	22c0      	movs	r2, #192	; 0xc0
   10288:	0592      	lsls	r2, r2, #22
   1028a:	609a      	str	r2, [r3, #8]
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
   1028c:	4b17      	ldr	r3, [pc, #92]	; (102ec <setup_spi+0xf4>)
   1028e:	2280      	movs	r2, #128	; 0x80
   10290:	0252      	lsls	r2, r2, #9
   10292:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
   10294:	4b15      	ldr	r3, [pc, #84]	; (102ec <setup_spi+0xf4>)
   10296:	4a17      	ldr	r2, [pc, #92]	; (102f4 <setup_spi+0xfc>)
   10298:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
   1029a:	4b14      	ldr	r3, [pc, #80]	; (102ec <setup_spi+0xf4>)
   1029c:	4a16      	ldr	r2, [pc, #88]	; (102f8 <setup_spi+0x100>)
   1029e:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
   102a0:	4b12      	ldr	r3, [pc, #72]	; (102ec <setup_spi+0xf4>)
   102a2:	4a16      	ldr	r2, [pc, #88]	; (102fc <setup_spi+0x104>)
   102a4:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.character_size = SPI_CHARACTER_SIZE_8BIT ;
   102a6:	4b11      	ldr	r3, [pc, #68]	; (102ec <setup_spi+0xf4>)
   102a8:	2200      	movs	r2, #0
   102aa:	741a      	strb	r2, [r3, #16]
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   102ac:	4a0f      	ldr	r2, [pc, #60]	; (102ec <setup_spi+0xf4>)
   102ae:	4914      	ldr	r1, [pc, #80]	; (10300 <setup_spi+0x108>)
   102b0:	4b14      	ldr	r3, [pc, #80]	; (10304 <setup_spi+0x10c>)
   102b2:	0018      	movs	r0, r3
   102b4:	4b14      	ldr	r3, [pc, #80]	; (10308 <setup_spi+0x110>)
   102b6:	4798      	blx	r3
	spi_enable(&spi_main);
   102b8:	4b12      	ldr	r3, [pc, #72]	; (10304 <setup_spi+0x10c>)
   102ba:	0018      	movs	r0, r3
   102bc:	4b13      	ldr	r3, [pc, #76]	; (1030c <setup_spi+0x114>)
   102be:	4798      	blx	r3
	//ioport_set_pin_mode(miso, IOPORT_MODE_PULLUP);
	//ioport_set_pin_mode(sclk, IOPORT_MODE_PULLUP);
	
}
   102c0:	46c0      	nop			; (mov r8, r8)
   102c2:	46bd      	mov	sp, r7
   102c4:	b002      	add	sp, #8
   102c6:	bd80      	pop	{r7, pc}
   102c8:	42001001 	.word	0x42001001
   102cc:	0000fcdd 	.word	0x0000fcdd
   102d0:	200011d4 	.word	0x200011d4
   102d4:	0000fd01 	.word	0x0000fd01
   102d8:	200012f0 	.word	0x200012f0
   102dc:	20001208 	.word	0x20001208
   102e0:	200012f4 	.word	0x200012f4
   102e4:	200011d0 	.word	0x200011d0
   102e8:	20001240 	.word	0x20001240
   102ec:	200012fc 	.word	0x200012fc
   102f0:	0000fc59 	.word	0x0000fc59
   102f4:	00280003 	.word	0x00280003
   102f8:	002a0003 	.word	0x002a0003
   102fc:	002b0003 	.word	0x002b0003
   10300:	42001000 	.word	0x42001000
   10304:	20001270 	.word	0x20001270
   10308:	00016f9d 	.word	0x00016f9d
   1030c:	0000fd65 	.word	0x0000fd65

00010310 <config_spi>:





void config_spi(enum spi_device SPI_DEVICE){
   10310:	b580      	push	{r7, lr}
   10312:	b084      	sub	sp, #16
   10314:	af00      	add	r7, sp, #0
   10316:	0002      	movs	r2, r0
   10318:	1dfb      	adds	r3, r7, #7
   1031a:	701a      	strb	r2, [r3, #0]
	uint8_t *ptr_POL;
	//uint8_t *ptr_CTRLA,

	//ptr_CTRLA=0x42001000;//  CTRLA byte 1 register
	ptr_POL  =0x42001003;//  SPI polarity register
   1031c:	4b12      	ldr	r3, [pc, #72]	; (10368 <config_spi+0x58>)
   1031e:	60fb      	str	r3, [r7, #12]
	spi_disable(&spi_main);
   10320:	4b12      	ldr	r3, [pc, #72]	; (1036c <config_spi+0x5c>)
   10322:	0018      	movs	r0, r3
   10324:	4b12      	ldr	r3, [pc, #72]	; (10370 <config_spi+0x60>)
   10326:	4798      	blx	r3
	switch (SPI_DEVICE)
   10328:	1dfb      	adds	r3, r7, #7
   1032a:	781b      	ldrb	r3, [r3, #0]
   1032c:	2b01      	cmp	r3, #1
   1032e:	d007      	beq.n	10340 <config_spi+0x30>
   10330:	2b02      	cmp	r3, #2
   10332:	d009      	beq.n	10348 <config_spi+0x38>
   10334:	2b00      	cmp	r3, #0
   10336:	d10b      	bne.n	10350 <config_spi+0x40>
	{
		case LCD:
			*ptr_POL = 0b00110000;
   10338:	68fb      	ldr	r3, [r7, #12]
   1033a:	2230      	movs	r2, #48	; 0x30
   1033c:	701a      	strb	r2, [r3, #0]
			break;
   1033e:	e00a      	b.n	10356 <config_spi+0x46>
		case sensors:
			*ptr_POL = 0b00000000;
   10340:	68fb      	ldr	r3, [r7, #12]
   10342:	2200      	movs	r2, #0
   10344:	701a      	strb	r2, [r3, #0]
			break;
   10346:	e006      	b.n	10356 <config_spi+0x46>
		case SD_card:
			*ptr_POL = 0b00000000;
   10348:	68fb      	ldr	r3, [r7, #12]
   1034a:	2200      	movs	r2, #0
   1034c:	701a      	strb	r2, [r3, #0]
			break;
   1034e:	e002      	b.n	10356 <config_spi+0x46>
		default:
			*ptr_POL = 0b00000000;
   10350:	68fb      	ldr	r3, [r7, #12]
   10352:	2200      	movs	r2, #0
   10354:	701a      	strb	r2, [r3, #0]
	}

	spi_enable(&spi_main);
   10356:	4b05      	ldr	r3, [pc, #20]	; (1036c <config_spi+0x5c>)
   10358:	0018      	movs	r0, r3
   1035a:	4b06      	ldr	r3, [pc, #24]	; (10374 <config_spi+0x64>)
   1035c:	4798      	blx	r3

}
   1035e:	46c0      	nop			; (mov r8, r8)
   10360:	46bd      	mov	sp, r7
   10362:	b004      	add	sp, #16
   10364:	bd80      	pop	{r7, pc}
   10366:	46c0      	nop			; (mov r8, r8)
   10368:	42001003 	.word	0x42001003
   1036c:	20001270 	.word	0x20001270
   10370:	0000fdb5 	.word	0x0000fdb5
   10374:	0000fd65 	.word	0x0000fd65

00010378 <spi_clear>:




void spi_clear(void){
   10378:	b580      	push	{r7, lr}
   1037a:	b082      	sub	sp, #8
   1037c:	af00      	add	r7, sp, #0
	
	uint8_t *reg_ptr;
	uint8_t read_buffer[4];
	//clear out receive buffer
	while(spi_is_ready_to_read(&spi_main)){	spi_read(&spi_main, read_buffer);	}
   1037e:	e005      	b.n	1038c <spi_clear+0x14>
   10380:	003a      	movs	r2, r7
   10382:	4b0a      	ldr	r3, [pc, #40]	; (103ac <spi_clear+0x34>)
   10384:	0011      	movs	r1, r2
   10386:	0018      	movs	r0, r3
   10388:	4b09      	ldr	r3, [pc, #36]	; (103b0 <spi_clear+0x38>)
   1038a:	4798      	blx	r3
   1038c:	4b07      	ldr	r3, [pc, #28]	; (103ac <spi_clear+0x34>)
   1038e:	0018      	movs	r0, r3
   10390:	4b08      	ldr	r3, [pc, #32]	; (103b4 <spi_clear+0x3c>)
   10392:	4798      	blx	r3
   10394:	1e03      	subs	r3, r0, #0
   10396:	d1f3      	bne.n	10380 <spi_clear+0x8>
	//Clear overflow error bit:
	reg_ptr=0x4200101A;
   10398:	4b07      	ldr	r3, [pc, #28]	; (103b8 <spi_clear+0x40>)
   1039a:	607b      	str	r3, [r7, #4]
	*reg_ptr=0x01;
   1039c:	687b      	ldr	r3, [r7, #4]
   1039e:	2201      	movs	r2, #1
   103a0:	701a      	strb	r2, [r3, #0]
}
   103a2:	46c0      	nop			; (mov r8, r8)
   103a4:	46bd      	mov	sp, r7
   103a6:	b002      	add	sp, #8
   103a8:	bd80      	pop	{r7, pc}
   103aa:	46c0      	nop			; (mov r8, r8)
   103ac:	20001270 	.word	0x20001270
   103b0:	0000fe39 	.word	0x0000fe39
   103b4:	0000fe11 	.word	0x0000fe11
   103b8:	4200101a 	.word	0x4200101a

000103bc <configure_usart>:


//USART
//******************************************

void configure_usart(void){
   103bc:	b590      	push	{r4, r7, lr}
   103be:	b093      	sub	sp, #76	; 0x4c
   103c0:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	enum status_code usart_status;
	
	//  Laser UART setup SERCOM1
	usart_get_config_defaults(&config_usart);
   103c2:	1d3b      	adds	r3, r7, #4
   103c4:	0018      	movs	r0, r3
   103c6:	4b33      	ldr	r3, [pc, #204]	; (10494 <configure_usart+0xd8>)
   103c8:	4798      	blx	r3
	config_usart.baudrate    = 9600;
   103ca:	1d3b      	adds	r3, r7, #4
   103cc:	2296      	movs	r2, #150	; 0x96
   103ce:	0192      	lsls	r2, r2, #6
   103d0:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   103d2:	1d3b      	adds	r3, r7, #4
   103d4:	2280      	movs	r2, #128	; 0x80
   103d6:	0352      	lsls	r2, r2, #13
   103d8:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
   103da:	1d3b      	adds	r3, r7, #4
   103dc:	4a2e      	ldr	r2, [pc, #184]	; (10498 <configure_usart+0xdc>)
   103de:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
   103e0:	1d3b      	adds	r3, r7, #4
   103e2:	4a2e      	ldr	r2, [pc, #184]	; (1049c <configure_usart+0xe0>)
   103e4:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
   103e6:	1d3b      	adds	r3, r7, #4
   103e8:	2201      	movs	r2, #1
   103ea:	4252      	negs	r2, r2
   103ec:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
   103ee:	1d3b      	adds	r3, r7, #4
   103f0:	2201      	movs	r2, #1
   103f2:	4252      	negs	r2, r2
   103f4:	63da      	str	r2, [r3, #60]	; 0x3c
	do {
		usart_status = usart_init(&usart_laser,	SERCOM1, &config_usart) ;
   103f6:	2347      	movs	r3, #71	; 0x47
   103f8:	18fc      	adds	r4, r7, r3
   103fa:	1d3a      	adds	r2, r7, #4
   103fc:	4928      	ldr	r1, [pc, #160]	; (104a0 <configure_usart+0xe4>)
   103fe:	4b29      	ldr	r3, [pc, #164]	; (104a4 <configure_usart+0xe8>)
   10400:	0018      	movs	r0, r3
   10402:	4b29      	ldr	r3, [pc, #164]	; (104a8 <configure_usart+0xec>)
   10404:	4798      	blx	r3
   10406:	0003      	movs	r3, r0
   10408:	7023      	strb	r3, [r4, #0]
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   1040a:	2347      	movs	r3, #71	; 0x47
   1040c:	18fb      	adds	r3, r7, r3
   1040e:	781b      	ldrb	r3, [r3, #0]
   10410:	2b00      	cmp	r3, #0
   10412:	d004      	beq.n	1041e <configure_usart+0x62>
   10414:	2347      	movs	r3, #71	; 0x47
   10416:	18fb      	adds	r3, r7, r3
   10418:	781b      	ldrb	r3, [r3, #0]
   1041a:	2b1c      	cmp	r3, #28
   1041c:	d1eb      	bne.n	103f6 <configure_usart+0x3a>
	usart_enable(&usart_laser);
   1041e:	4b21      	ldr	r3, [pc, #132]	; (104a4 <configure_usart+0xe8>)
   10420:	0018      	movs	r0, r3
   10422:	4b22      	ldr	r3, [pc, #136]	; (104ac <configure_usart+0xf0>)
   10424:	4798      	blx	r3
	
	// BLE UART setup SERCOM0
	usart_get_config_defaults(&config_usart);
   10426:	1d3b      	adds	r3, r7, #4
   10428:	0018      	movs	r0, r3
   1042a:	4b1a      	ldr	r3, [pc, #104]	; (10494 <configure_usart+0xd8>)
   1042c:	4798      	blx	r3
	config_usart.baudrate    = 115200;
   1042e:	1d3b      	adds	r3, r7, #4
   10430:	22e1      	movs	r2, #225	; 0xe1
   10432:	0252      	lsls	r2, r2, #9
   10434:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
   10436:	1d3b      	adds	r3, r7, #4
   10438:	2290      	movs	r2, #144	; 0x90
   1043a:	0352      	lsls	r2, r2, #13
   1043c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   1043e:	1d3b      	adds	r3, r7, #4
   10440:	4a1b      	ldr	r2, [pc, #108]	; (104b0 <configure_usart+0xf4>)
   10442:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   10444:	1d3b      	adds	r3, r7, #4
   10446:	4a1b      	ldr	r2, [pc, #108]	; (104b4 <configure_usart+0xf8>)
   10448:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA10C_SERCOM0_PAD2;
   1044a:	1d3b      	adds	r3, r7, #4
   1044c:	4a1a      	ldr	r2, [pc, #104]	; (104b8 <configure_usart+0xfc>)
   1044e:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA11C_SERCOM0_PAD3;
   10450:	1d3b      	adds	r3, r7, #4
   10452:	4a1a      	ldr	r2, [pc, #104]	; (104bc <configure_usart+0x100>)
   10454:	63da      	str	r2, [r3, #60]	; 0x3c
	do {
		usart_status = usart_init(&usart_laser,	SERCOM1, &config_usart) ;
   10456:	2347      	movs	r3, #71	; 0x47
   10458:	18fc      	adds	r4, r7, r3
   1045a:	1d3a      	adds	r2, r7, #4
   1045c:	4910      	ldr	r1, [pc, #64]	; (104a0 <configure_usart+0xe4>)
   1045e:	4b11      	ldr	r3, [pc, #68]	; (104a4 <configure_usart+0xe8>)
   10460:	0018      	movs	r0, r3
   10462:	4b11      	ldr	r3, [pc, #68]	; (104a8 <configure_usart+0xec>)
   10464:	4798      	blx	r3
   10466:	0003      	movs	r3, r0
   10468:	7023      	strb	r3, [r4, #0]
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   1046a:	2347      	movs	r3, #71	; 0x47
   1046c:	18fb      	adds	r3, r7, r3
   1046e:	781b      	ldrb	r3, [r3, #0]
   10470:	2b00      	cmp	r3, #0
   10472:	d004      	beq.n	1047e <configure_usart+0xc2>
   10474:	2347      	movs	r3, #71	; 0x47
   10476:	18fb      	adds	r3, r7, r3
   10478:	781b      	ldrb	r3, [r3, #0]
   1047a:	2b1c      	cmp	r3, #28
   1047c:	d1eb      	bne.n	10456 <configure_usart+0x9a>
	usart_enable(&usart_BLE);
   1047e:	4b10      	ldr	r3, [pc, #64]	; (104c0 <configure_usart+0x104>)
   10480:	0018      	movs	r0, r3
   10482:	4b0a      	ldr	r3, [pc, #40]	; (104ac <configure_usart+0xf0>)
   10484:	4798      	blx	r3
	USART_BLE_enabled = true;
   10486:	4b0f      	ldr	r3, [pc, #60]	; (104c4 <configure_usart+0x108>)
   10488:	2201      	movs	r2, #1
   1048a:	701a      	strb	r2, [r3, #0]
	
	
}
   1048c:	46c0      	nop			; (mov r8, r8)
   1048e:	46bd      	mov	sp, r7
   10490:	b013      	add	sp, #76	; 0x4c
   10492:	bd90      	pop	{r4, r7, pc}
   10494:	0000ff05 	.word	0x0000ff05
   10498:	00100002 	.word	0x00100002
   1049c:	00110002 	.word	0x00110002
   104a0:	42000400 	.word	0x42000400
   104a4:	2000120c 	.word	0x2000120c
   104a8:	000165ad 	.word	0x000165ad
   104ac:	0000ffc5 	.word	0x0000ffc5
   104b0:	00080002 	.word	0x00080002
   104b4:	00090002 	.word	0x00090002
   104b8:	000a0002 	.word	0x000a0002
   104bc:	000b0002 	.word	0x000b0002
   104c0:	20001350 	.word	0x20001350
   104c4:	20004148 	.word	0x20004148

000104c8 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
   104c8:	b580      	push	{r7, lr}
   104ca:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_laser,
   104cc:	490c      	ldr	r1, [pc, #48]	; (10500 <configure_usart_callbacks+0x38>)
   104ce:	4b0d      	ldr	r3, [pc, #52]	; (10504 <configure_usart_callbacks+0x3c>)
   104d0:	2200      	movs	r2, #0
   104d2:	0018      	movs	r0, r3
   104d4:	4b0c      	ldr	r3, [pc, #48]	; (10508 <configure_usart_callbacks+0x40>)
   104d6:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_laser,
   104d8:	490c      	ldr	r1, [pc, #48]	; (1050c <configure_usart_callbacks+0x44>)
   104da:	4b0a      	ldr	r3, [pc, #40]	; (10504 <configure_usart_callbacks+0x3c>)
   104dc:	2201      	movs	r2, #1
   104de:	0018      	movs	r0, r3
   104e0:	4b09      	ldr	r3, [pc, #36]	; (10508 <configure_usart_callbacks+0x40>)
   104e2:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_laser, USART_CALLBACK_BUFFER_TRANSMITTED);
   104e4:	4b07      	ldr	r3, [pc, #28]	; (10504 <configure_usart_callbacks+0x3c>)
   104e6:	2100      	movs	r1, #0
   104e8:	0018      	movs	r0, r3
   104ea:	4b09      	ldr	r3, [pc, #36]	; (10510 <configure_usart_callbacks+0x48>)
   104ec:	4798      	blx	r3
	usart_enable_callback(&usart_laser, USART_CALLBACK_BUFFER_RECEIVED);
   104ee:	4b05      	ldr	r3, [pc, #20]	; (10504 <configure_usart_callbacks+0x3c>)
   104f0:	2101      	movs	r1, #1
   104f2:	0018      	movs	r0, r3
   104f4:	4b06      	ldr	r3, [pc, #24]	; (10510 <configure_usart_callbacks+0x48>)
   104f6:	4798      	blx	r3
}
   104f8:	46c0      	nop			; (mov r8, r8)
   104fa:	46bd      	mov	sp, r7
   104fc:	bd80      	pop	{r7, pc}
   104fe:	46c0      	nop			; (mov r8, r8)
   10500:	000105f1 	.word	0x000105f1
   10504:	2000120c 	.word	0x2000120c
   10508:	000087ed 	.word	0x000087ed
   1050c:	0001058d 	.word	0x0001058d
   10510:	00010171 	.word	0x00010171

00010514 <clear_rx_buffer>:

void clear_rx_buffer(void){
   10514:	b580      	push	{r7, lr}
   10516:	b082      	sub	sp, #8
   10518:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i=0; i<rx_buffer_length; i=i+1){
   1051a:	1dfb      	adds	r3, r7, #7
   1051c:	2200      	movs	r2, #0
   1051e:	701a      	strb	r2, [r3, #0]
   10520:	e009      	b.n	10536 <clear_rx_buffer+0x22>
		rx_buffer[i]=0x00;
   10522:	1dfb      	adds	r3, r7, #7
   10524:	781b      	ldrb	r3, [r3, #0]
   10526:	4a13      	ldr	r2, [pc, #76]	; (10574 <clear_rx_buffer+0x60>)
   10528:	2100      	movs	r1, #0
   1052a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<rx_buffer_length; i=i+1){
   1052c:	1dfb      	adds	r3, r7, #7
   1052e:	1dfa      	adds	r2, r7, #7
   10530:	7812      	ldrb	r2, [r2, #0]
   10532:	3201      	adds	r2, #1
   10534:	701a      	strb	r2, [r3, #0]
   10536:	1dfb      	adds	r3, r7, #7
   10538:	781b      	ldrb	r3, [r3, #0]
   1053a:	2b13      	cmp	r3, #19
   1053c:	d9f1      	bls.n	10522 <clear_rx_buffer+0xe>
	}
	rx_buffer_index=0;
   1053e:	4b0e      	ldr	r3, [pc, #56]	; (10578 <clear_rx_buffer+0x64>)
   10540:	2200      	movs	r2, #0
   10542:	701a      	strb	r2, [r3, #0]
	usart_disable_transceiver(&usart_laser, USART_TRANSCEIVER_RX);
   10544:	4b0d      	ldr	r3, [pc, #52]	; (1057c <clear_rx_buffer+0x68>)
   10546:	2100      	movs	r1, #0
   10548:	0018      	movs	r0, r3
   1054a:	4b0d      	ldr	r3, [pc, #52]	; (10580 <clear_rx_buffer+0x6c>)
   1054c:	4798      	blx	r3
	usart_enable_transceiver(&usart_laser, USART_TRANSCEIVER_RX);
   1054e:	4b0b      	ldr	r3, [pc, #44]	; (1057c <clear_rx_buffer+0x68>)
   10550:	2100      	movs	r1, #0
   10552:	0018      	movs	r0, r3
   10554:	4b0b      	ldr	r3, [pc, #44]	; (10584 <clear_rx_buffer+0x70>)
   10556:	4798      	blx	r3
	usart_disable_transceiver(&usart_BLE, USART_TRANSCEIVER_RX);
   10558:	4b0b      	ldr	r3, [pc, #44]	; (10588 <clear_rx_buffer+0x74>)
   1055a:	2100      	movs	r1, #0
   1055c:	0018      	movs	r0, r3
   1055e:	4b08      	ldr	r3, [pc, #32]	; (10580 <clear_rx_buffer+0x6c>)
   10560:	4798      	blx	r3
	usart_enable_transceiver(&usart_BLE, USART_TRANSCEIVER_RX);
   10562:	4b09      	ldr	r3, [pc, #36]	; (10588 <clear_rx_buffer+0x74>)
   10564:	2100      	movs	r1, #0
   10566:	0018      	movs	r0, r3
   10568:	4b06      	ldr	r3, [pc, #24]	; (10584 <clear_rx_buffer+0x70>)
   1056a:	4798      	blx	r3
}
   1056c:	46c0      	nop			; (mov r8, r8)
   1056e:	46bd      	mov	sp, r7
   10570:	b002      	add	sp, #8
   10572:	bd80      	pop	{r7, pc}
   10574:	20001258 	.word	0x20001258
   10578:	2000126c 	.word	0x2000126c
   1057c:	2000120c 	.word	0x2000120c
   10580:	00010109 	.word	0x00010109
   10584:	0001009d 	.word	0x0001009d
   10588:	20001350 	.word	0x20001350

0001058c <usart_read_callback>:


void usart_read_callback(struct usart_module *const usart_module)
{
   1058c:	b580      	push	{r7, lr}
   1058e:	b082      	sub	sp, #8
   10590:	af00      	add	r7, sp, #0
   10592:	6078      	str	r0, [r7, #4]

	if(rx_buffer[rx_buffer_index]==0xA8){
   10594:	4b11      	ldr	r3, [pc, #68]	; (105dc <usart_read_callback+0x50>)
   10596:	781b      	ldrb	r3, [r3, #0]
   10598:	b2db      	uxtb	r3, r3
   1059a:	001a      	movs	r2, r3
   1059c:	4b10      	ldr	r3, [pc, #64]	; (105e0 <usart_read_callback+0x54>)
   1059e:	5c9b      	ldrb	r3, [r3, r2]
   105a0:	b2db      	uxtb	r3, r3
   105a2:	2ba8      	cmp	r3, #168	; 0xa8
   105a4:	d103      	bne.n	105ae <usart_read_callback+0x22>
		reception_complete=true;
   105a6:	4b0f      	ldr	r3, [pc, #60]	; (105e4 <usart_read_callback+0x58>)
   105a8:	2201      	movs	r2, #1
   105aa:	701a      	strb	r2, [r3, #0]
		}else{
		rx_buffer_index=rx_buffer_index+1;
		usart_read_job(&usart_laser, &rx_buffer[rx_buffer_index]);
	}
}
   105ac:	e011      	b.n	105d2 <usart_read_callback+0x46>
		rx_buffer_index=rx_buffer_index+1;
   105ae:	4b0b      	ldr	r3, [pc, #44]	; (105dc <usart_read_callback+0x50>)
   105b0:	781b      	ldrb	r3, [r3, #0]
   105b2:	b2db      	uxtb	r3, r3
   105b4:	3301      	adds	r3, #1
   105b6:	b2da      	uxtb	r2, r3
   105b8:	4b08      	ldr	r3, [pc, #32]	; (105dc <usart_read_callback+0x50>)
   105ba:	701a      	strb	r2, [r3, #0]
		usart_read_job(&usart_laser, &rx_buffer[rx_buffer_index]);
   105bc:	4b07      	ldr	r3, [pc, #28]	; (105dc <usart_read_callback+0x50>)
   105be:	781b      	ldrb	r3, [r3, #0]
   105c0:	b2db      	uxtb	r3, r3
   105c2:	001a      	movs	r2, r3
   105c4:	4b06      	ldr	r3, [pc, #24]	; (105e0 <usart_read_callback+0x54>)
   105c6:	18d2      	adds	r2, r2, r3
   105c8:	4b07      	ldr	r3, [pc, #28]	; (105e8 <usart_read_callback+0x5c>)
   105ca:	0011      	movs	r1, r2
   105cc:	0018      	movs	r0, r3
   105ce:	4b07      	ldr	r3, [pc, #28]	; (105ec <usart_read_callback+0x60>)
   105d0:	4798      	blx	r3
}
   105d2:	46c0      	nop			; (mov r8, r8)
   105d4:	46bd      	mov	sp, r7
   105d6:	b002      	add	sp, #8
   105d8:	bd80      	pop	{r7, pc}
   105da:	46c0      	nop			; (mov r8, r8)
   105dc:	2000126c 	.word	0x2000126c
   105e0:	20001258 	.word	0x20001258
   105e4:	200012f8 	.word	0x200012f8
   105e8:	2000120c 	.word	0x2000120c
   105ec:	00008835 	.word	0x00008835

000105f0 <usart_write_callback>:

void usart_write_callback(struct usart_module *const usart_module)
{
   105f0:	b580      	push	{r7, lr}
   105f2:	b082      	sub	sp, #8
   105f4:	af00      	add	r7, sp, #0
   105f6:	6078      	str	r0, [r7, #4]
	write_complete = true;
   105f8:	4b03      	ldr	r3, [pc, #12]	; (10608 <usart_write_callback+0x18>)
   105fa:	2201      	movs	r2, #1
   105fc:	701a      	strb	r2, [r3, #0]
}
   105fe:	46c0      	nop			; (mov r8, r8)
   10600:	46bd      	mov	sp, r7
   10602:	b002      	add	sp, #8
   10604:	bd80      	pop	{r7, pc}
   10606:	46c0      	nop			; (mov r8, r8)
   10608:	200012f7 	.word	0x200012f7

0001060c <configure_i2c_master>:


//I2C
//************************************************
void configure_i2c_master(void)
{
   1060c:	b580      	push	{r7, lr}
   1060e:	b08e      	sub	sp, #56	; 0x38
   10610:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
   10612:	1d3b      	adds	r3, r7, #4
   10614:	0018      	movs	r0, r3
   10616:	4b0c      	ldr	r3, [pc, #48]	; (10648 <configure_i2c_master+0x3c>)
   10618:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
   1061a:	1d3b      	adds	r3, r7, #4
   1061c:	4a0b      	ldr	r2, [pc, #44]	; (1064c <configure_i2c_master+0x40>)
   1061e:	82da      	strh	r2, [r3, #22]
	//#if SAMR30
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
   10620:	1d3b      	adds	r3, r7, #4
   10622:	4a0b      	ldr	r2, [pc, #44]	; (10650 <configure_i2c_master+0x44>)
   10624:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
   10626:	1d3b      	adds	r3, r7, #4
   10628:	4a0a      	ldr	r2, [pc, #40]	; (10654 <configure_i2c_master+0x48>)
   1062a:	621a      	str	r2, [r3, #32]
	//#endif
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   1062c:	1d3a      	adds	r2, r7, #4
   1062e:	490a      	ldr	r1, [pc, #40]	; (10658 <configure_i2c_master+0x4c>)
   10630:	4b0a      	ldr	r3, [pc, #40]	; (1065c <configure_i2c_master+0x50>)
   10632:	0018      	movs	r0, r3
   10634:	4b0a      	ldr	r3, [pc, #40]	; (10660 <configure_i2c_master+0x54>)
   10636:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
   10638:	4b08      	ldr	r3, [pc, #32]	; (1065c <configure_i2c_master+0x50>)
   1063a:	0018      	movs	r0, r3
   1063c:	4b09      	ldr	r3, [pc, #36]	; (10664 <configure_i2c_master+0x58>)
   1063e:	4798      	blx	r3
}
   10640:	46c0      	nop			; (mov r8, r8)
   10642:	46bd      	mov	sp, r7
   10644:	b00e      	add	sp, #56	; 0x38
   10646:	bd80      	pop	{r7, pc}
   10648:	0000fae9 	.word	0x0000fae9
   1064c:	00002710 	.word	0x00002710
   10650:	000c0002 	.word	0x000c0002
   10654:	000d0002 	.word	0x000d0002
   10658:	42000800 	.word	0x42000800
   1065c:	200012ac 	.word	0x200012ac
   10660:	0000753d 	.word	0x0000753d
   10664:	0000fb6d 	.word	0x0000fb6d

00010668 <i2c_read_write>:

void i2c_read_write(enum read_write mode, uint8_t device, uint8_t *buf, uint8_t length){
   10668:	b590      	push	{r4, r7, lr}
   1066a:	b087      	sub	sp, #28
   1066c:	af00      	add	r7, sp, #0
   1066e:	0004      	movs	r4, r0
   10670:	0008      	movs	r0, r1
   10672:	603a      	str	r2, [r7, #0]
   10674:	0019      	movs	r1, r3
   10676:	1dfb      	adds	r3, r7, #7
   10678:	1c22      	adds	r2, r4, #0
   1067a:	701a      	strb	r2, [r3, #0]
   1067c:	1dbb      	adds	r3, r7, #6
   1067e:	1c02      	adds	r2, r0, #0
   10680:	701a      	strb	r2, [r3, #0]
   10682:	1d7b      	adds	r3, r7, #5
   10684:	1c0a      	adds	r2, r1, #0
   10686:	701a      	strb	r2, [r3, #0]
	//first character in buffer is read/write register address
	uint16_t limit=100;
   10688:	2314      	movs	r3, #20
   1068a:	18fb      	adds	r3, r7, r3
   1068c:	2264      	movs	r2, #100	; 0x64
   1068e:	801a      	strh	r2, [r3, #0]
	uint16_t timeout;
	struct i2c_master_packet packet = {
   10690:	2308      	movs	r3, #8
   10692:	18fb      	adds	r3, r7, r3
   10694:	0018      	movs	r0, r3
   10696:	230c      	movs	r3, #12
   10698:	001a      	movs	r2, r3
   1069a:	2100      	movs	r1, #0
   1069c:	4b3e      	ldr	r3, [pc, #248]	; (10798 <i2c_read_write+0x130>)
   1069e:	4798      	blx	r3
   106a0:	1dbb      	adds	r3, r7, #6
   106a2:	781b      	ldrb	r3, [r3, #0]
   106a4:	b29a      	uxth	r2, r3
   106a6:	2308      	movs	r3, #8
   106a8:	18fb      	adds	r3, r7, r3
   106aa:	801a      	strh	r2, [r3, #0]
   106ac:	2308      	movs	r3, #8
   106ae:	18fb      	adds	r3, r7, r3
   106b0:	683a      	ldr	r2, [r7, #0]
   106b2:	605a      	str	r2, [r3, #4]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	
	if (mode==readp){
   106b4:	1dfb      	adds	r3, r7, #7
   106b6:	781b      	ldrb	r3, [r3, #0]
   106b8:	2b00      	cmp	r3, #0
   106ba:	d145      	bne.n	10748 <i2c_read_write+0xe0>
		timeout=0;
   106bc:	2316      	movs	r3, #22
   106be:	18fb      	adds	r3, r7, r3
   106c0:	2200      	movs	r2, #0
   106c2:	801a      	strh	r2, [r3, #0]
		packet.data_length=1;
   106c4:	2308      	movs	r3, #8
   106c6:	18fb      	adds	r3, r7, r3
   106c8:	2201      	movs	r2, #1
   106ca:	805a      	strh	r2, [r3, #2]
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   106cc:	e00b      	b.n	106e6 <i2c_read_write+0x7e>
			if (timeout++ == limit) {   break;   }
   106ce:	2316      	movs	r3, #22
   106d0:	18fb      	adds	r3, r7, r3
   106d2:	881b      	ldrh	r3, [r3, #0]
   106d4:	2216      	movs	r2, #22
   106d6:	18ba      	adds	r2, r7, r2
   106d8:	1c59      	adds	r1, r3, #1
   106da:	8011      	strh	r1, [r2, #0]
   106dc:	2214      	movs	r2, #20
   106de:	18ba      	adds	r2, r7, r2
   106e0:	8812      	ldrh	r2, [r2, #0]
   106e2:	429a      	cmp	r2, r3
   106e4:	d009      	beq.n	106fa <i2c_read_write+0x92>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   106e6:	2308      	movs	r3, #8
   106e8:	18fa      	adds	r2, r7, r3
   106ea:	4b2c      	ldr	r3, [pc, #176]	; (1079c <i2c_read_write+0x134>)
   106ec:	0011      	movs	r1, r2
   106ee:	0018      	movs	r0, r3
   106f0:	4b2b      	ldr	r3, [pc, #172]	; (107a0 <i2c_read_write+0x138>)
   106f2:	4798      	blx	r3
   106f4:	1e03      	subs	r3, r0, #0
   106f6:	d1ea      	bne.n	106ce <i2c_read_write+0x66>
   106f8:	e000      	b.n	106fc <i2c_read_write+0x94>
			if (timeout++ == limit) {   break;   }
   106fa:	46c0      	nop			; (mov r8, r8)
		}
		timeout=0;
   106fc:	2316      	movs	r3, #22
   106fe:	18fb      	adds	r3, r7, r3
   10700:	2200      	movs	r2, #0
   10702:	801a      	strh	r2, [r3, #0]
		packet.data=buf+1;
   10704:	683b      	ldr	r3, [r7, #0]
   10706:	1c5a      	adds	r2, r3, #1
   10708:	2308      	movs	r3, #8
   1070a:	18fb      	adds	r3, r7, r3
   1070c:	605a      	str	r2, [r3, #4]
		packet.data_length=length;
   1070e:	1d7b      	adds	r3, r7, #5
   10710:	781b      	ldrb	r3, [r3, #0]
   10712:	b29a      	uxth	r2, r3
   10714:	2308      	movs	r3, #8
   10716:	18fb      	adds	r3, r7, r3
   10718:	805a      	strh	r2, [r3, #2]
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1071a:	e00b      	b.n	10734 <i2c_read_write+0xcc>
			if (timeout++ == limit) {   break;   }
   1071c:	2316      	movs	r3, #22
   1071e:	18fb      	adds	r3, r7, r3
   10720:	881b      	ldrh	r3, [r3, #0]
   10722:	2216      	movs	r2, #22
   10724:	18ba      	adds	r2, r7, r2
   10726:	1c59      	adds	r1, r3, #1
   10728:	8011      	strh	r1, [r2, #0]
   1072a:	2214      	movs	r2, #20
   1072c:	18ba      	adds	r2, r7, r2
   1072e:	8812      	ldrh	r2, [r2, #0]
   10730:	429a      	cmp	r2, r3
   10732:	d02a      	beq.n	1078a <i2c_read_write+0x122>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10734:	2308      	movs	r3, #8
   10736:	18fa      	adds	r2, r7, r3
   10738:	4b18      	ldr	r3, [pc, #96]	; (1079c <i2c_read_write+0x134>)
   1073a:	0011      	movs	r1, r2
   1073c:	0018      	movs	r0, r3
   1073e:	4b19      	ldr	r3, [pc, #100]	; (107a4 <i2c_read_write+0x13c>)
   10740:	4798      	blx	r3
   10742:	1e03      	subs	r3, r0, #0
   10744:	d1ea      	bne.n	1071c <i2c_read_write+0xb4>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
			if (timeout++ == limit) {   break;   }
		}
	}
	
}
   10746:	e023      	b.n	10790 <i2c_read_write+0x128>
		timeout=0;
   10748:	2316      	movs	r3, #22
   1074a:	18fb      	adds	r3, r7, r3
   1074c:	2200      	movs	r2, #0
   1074e:	801a      	strh	r2, [r3, #0]
		packet.data_length=length;
   10750:	1d7b      	adds	r3, r7, #5
   10752:	781b      	ldrb	r3, [r3, #0]
   10754:	b29a      	uxth	r2, r3
   10756:	2308      	movs	r3, #8
   10758:	18fb      	adds	r3, r7, r3
   1075a:	805a      	strh	r2, [r3, #2]
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1075c:	e00b      	b.n	10776 <i2c_read_write+0x10e>
			if (timeout++ == limit) {   break;   }
   1075e:	2316      	movs	r3, #22
   10760:	18fb      	adds	r3, r7, r3
   10762:	881b      	ldrh	r3, [r3, #0]
   10764:	2216      	movs	r2, #22
   10766:	18ba      	adds	r2, r7, r2
   10768:	1c59      	adds	r1, r3, #1
   1076a:	8011      	strh	r1, [r2, #0]
   1076c:	2214      	movs	r2, #20
   1076e:	18ba      	adds	r2, r7, r2
   10770:	8812      	ldrh	r2, [r2, #0]
   10772:	429a      	cmp	r2, r3
   10774:	d00b      	beq.n	1078e <i2c_read_write+0x126>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   10776:	2308      	movs	r3, #8
   10778:	18fa      	adds	r2, r7, r3
   1077a:	4b08      	ldr	r3, [pc, #32]	; (1079c <i2c_read_write+0x134>)
   1077c:	0011      	movs	r1, r2
   1077e:	0018      	movs	r0, r3
   10780:	4b07      	ldr	r3, [pc, #28]	; (107a0 <i2c_read_write+0x138>)
   10782:	4798      	blx	r3
   10784:	1e03      	subs	r3, r0, #0
   10786:	d1ea      	bne.n	1075e <i2c_read_write+0xf6>
}
   10788:	e002      	b.n	10790 <i2c_read_write+0x128>
			if (timeout++ == limit) {   break;   }
   1078a:	46c0      	nop			; (mov r8, r8)
   1078c:	e000      	b.n	10790 <i2c_read_write+0x128>
			if (timeout++ == limit) {   break;   }
   1078e:	46c0      	nop			; (mov r8, r8)
}
   10790:	46c0      	nop			; (mov r8, r8)
   10792:	46bd      	mov	sp, r7
   10794:	b007      	add	sp, #28
   10796:	bd90      	pop	{r4, r7, pc}
   10798:	00023c9d 	.word	0x00023c9d
   1079c:	200012ac 	.word	0x200012ac
   107a0:	00007bd1 	.word	0x00007bd1
   107a4:	00007a19 	.word	0x00007a19

000107a8 <max17055_reg_read_write>:


void max17055_reg_read_write(enum read_write mode, uint8_t address, uint16_t *data){
   107a8:	b590      	push	{r4, r7, lr}
   107aa:	b085      	sub	sp, #20
   107ac:	af00      	add	r7, sp, #0
   107ae:	603a      	str	r2, [r7, #0]
   107b0:	1dfb      	adds	r3, r7, #7
   107b2:	1c02      	adds	r2, r0, #0
   107b4:	701a      	strb	r2, [r3, #0]
   107b6:	1dbb      	adds	r3, r7, #6
   107b8:	1c0a      	adds	r2, r1, #0
   107ba:	701a      	strb	r2, [r3, #0]
	//MAX17055 is the battery fuel gauge
	//MAX17055 is 16-bit register read/writes with LSB first
	uint16_t temp16;
	uint8_t temp_buf[3];
	
	temp_buf[0] = address;
   107bc:	2308      	movs	r3, #8
   107be:	18fb      	adds	r3, r7, r3
   107c0:	1dba      	adds	r2, r7, #6
   107c2:	7812      	ldrb	r2, [r2, #0]
   107c4:	701a      	strb	r2, [r3, #0]
	if (mode==readp){
   107c6:	1dfb      	adds	r3, r7, #7
   107c8:	781b      	ldrb	r3, [r3, #0]
   107ca:	2b00      	cmp	r3, #0
   107cc:	d124      	bne.n	10818 <max17055_reg_read_write+0x70>
		i2c_read_write(readp, batt_add, temp_buf, 2);
   107ce:	2308      	movs	r3, #8
   107d0:	18fa      	adds	r2, r7, r3
   107d2:	2302      	movs	r3, #2
   107d4:	2136      	movs	r1, #54	; 0x36
   107d6:	2000      	movs	r0, #0
   107d8:	4c22      	ldr	r4, [pc, #136]	; (10864 <max17055_reg_read_write+0xbc>)
   107da:	47a0      	blx	r4
		temp16=temp_buf[2];
   107dc:	2308      	movs	r3, #8
   107de:	18fb      	adds	r3, r7, r3
   107e0:	789a      	ldrb	r2, [r3, #2]
   107e2:	230e      	movs	r3, #14
   107e4:	18fb      	adds	r3, r7, r3
   107e6:	801a      	strh	r2, [r3, #0]
		temp16=temp16<<8;
   107e8:	230e      	movs	r3, #14
   107ea:	18fb      	adds	r3, r7, r3
   107ec:	220e      	movs	r2, #14
   107ee:	18ba      	adds	r2, r7, r2
   107f0:	8812      	ldrh	r2, [r2, #0]
   107f2:	0212      	lsls	r2, r2, #8
   107f4:	801a      	strh	r2, [r3, #0]
		temp16=temp16+temp_buf[1];
   107f6:	2308      	movs	r3, #8
   107f8:	18fb      	adds	r3, r7, r3
   107fa:	785b      	ldrb	r3, [r3, #1]
   107fc:	b299      	uxth	r1, r3
   107fe:	230e      	movs	r3, #14
   10800:	18fb      	adds	r3, r7, r3
   10802:	220e      	movs	r2, #14
   10804:	18ba      	adds	r2, r7, r2
   10806:	8812      	ldrh	r2, [r2, #0]
   10808:	188a      	adds	r2, r1, r2
   1080a:	801a      	strh	r2, [r3, #0]
		*data=temp16;
   1080c:	683b      	ldr	r3, [r7, #0]
   1080e:	220e      	movs	r2, #14
   10810:	18ba      	adds	r2, r7, r2
   10812:	8812      	ldrh	r2, [r2, #0]
   10814:	801a      	strh	r2, [r3, #0]
		temp_buf[1]=temp16 & 0x00FF;
		temp16=temp16>>8;
		temp_buf[2]=temp16 & 0x00FF;
		i2c_read_write(writep, batt_add, temp_buf, 2);
	}
}
   10816:	e020      	b.n	1085a <max17055_reg_read_write+0xb2>
		temp16=*data;
   10818:	230e      	movs	r3, #14
   1081a:	18fb      	adds	r3, r7, r3
   1081c:	683a      	ldr	r2, [r7, #0]
   1081e:	8812      	ldrh	r2, [r2, #0]
   10820:	801a      	strh	r2, [r3, #0]
		temp_buf[1]=temp16 & 0x00FF;
   10822:	230e      	movs	r3, #14
   10824:	18fb      	adds	r3, r7, r3
   10826:	881b      	ldrh	r3, [r3, #0]
   10828:	b2da      	uxtb	r2, r3
   1082a:	2308      	movs	r3, #8
   1082c:	18fb      	adds	r3, r7, r3
   1082e:	705a      	strb	r2, [r3, #1]
		temp16=temp16>>8;
   10830:	230e      	movs	r3, #14
   10832:	18fb      	adds	r3, r7, r3
   10834:	220e      	movs	r2, #14
   10836:	18ba      	adds	r2, r7, r2
   10838:	8812      	ldrh	r2, [r2, #0]
   1083a:	0a12      	lsrs	r2, r2, #8
   1083c:	801a      	strh	r2, [r3, #0]
		temp_buf[2]=temp16 & 0x00FF;
   1083e:	230e      	movs	r3, #14
   10840:	18fb      	adds	r3, r7, r3
   10842:	881b      	ldrh	r3, [r3, #0]
   10844:	b2da      	uxtb	r2, r3
   10846:	2308      	movs	r3, #8
   10848:	18fb      	adds	r3, r7, r3
   1084a:	709a      	strb	r2, [r3, #2]
		i2c_read_write(writep, batt_add, temp_buf, 2);
   1084c:	2308      	movs	r3, #8
   1084e:	18fa      	adds	r2, r7, r3
   10850:	2302      	movs	r3, #2
   10852:	2136      	movs	r1, #54	; 0x36
   10854:	2001      	movs	r0, #1
   10856:	4c03      	ldr	r4, [pc, #12]	; (10864 <max17055_reg_read_write+0xbc>)
   10858:	47a0      	blx	r4
}
   1085a:	46c0      	nop			; (mov r8, r8)
   1085c:	46bd      	mov	sp, r7
   1085e:	b005      	add	sp, #20
   10860:	bd90      	pop	{r4, r7, pc}
   10862:	46c0      	nop			; (mov r8, r8)
   10864:	00010669 	.word	0x00010669

00010868 <adp5062_reg_read_write>:

void adp5062_reg_read_write(enum read_write mode, uint8_t address, uint8_t *data){
   10868:	b590      	push	{r4, r7, lr}
   1086a:	b085      	sub	sp, #20
   1086c:	af00      	add	r7, sp, #0
   1086e:	603a      	str	r2, [r7, #0]
   10870:	1dfb      	adds	r3, r7, #7
   10872:	1c02      	adds	r2, r0, #0
   10874:	701a      	strb	r2, [r3, #0]
   10876:	1dbb      	adds	r3, r7, #6
   10878:	1c0a      	adds	r2, r1, #0
   1087a:	701a      	strb	r2, [r3, #0]
	// ADP5062 is the charger chip
	// Write and read 8-bit registers
	uint8_t temp_buf[2];
	
	temp_buf[0] = address;
   1087c:	230c      	movs	r3, #12
   1087e:	18fb      	adds	r3, r7, r3
   10880:	1dba      	adds	r2, r7, #6
   10882:	7812      	ldrb	r2, [r2, #0]
   10884:	701a      	strb	r2, [r3, #0]
	if (mode==readp){
   10886:	1dfb      	adds	r3, r7, #7
   10888:	781b      	ldrb	r3, [r3, #0]
   1088a:	2b00      	cmp	r3, #0
   1088c:	d10c      	bne.n	108a8 <adp5062_reg_read_write+0x40>
		i2c_read_write(readp, charger_add, temp_buf, 1);
   1088e:	230c      	movs	r3, #12
   10890:	18fa      	adds	r2, r7, r3
   10892:	2301      	movs	r3, #1
   10894:	2114      	movs	r1, #20
   10896:	2000      	movs	r0, #0
   10898:	4c0b      	ldr	r4, [pc, #44]	; (108c8 <adp5062_reg_read_write+0x60>)
   1089a:	47a0      	blx	r4
		*data=temp_buf[1];
   1089c:	230c      	movs	r3, #12
   1089e:	18fb      	adds	r3, r7, r3
   108a0:	785a      	ldrb	r2, [r3, #1]
   108a2:	683b      	ldr	r3, [r7, #0]
   108a4:	701a      	strb	r2, [r3, #0]
	}else{
		
		temp_buf[1]=data;
		i2c_read_write(writep, charger_add, temp_buf, 2);
	}
}
   108a6:	e00b      	b.n	108c0 <adp5062_reg_read_write+0x58>
		temp_buf[1]=data;
   108a8:	683b      	ldr	r3, [r7, #0]
   108aa:	b2da      	uxtb	r2, r3
   108ac:	230c      	movs	r3, #12
   108ae:	18fb      	adds	r3, r7, r3
   108b0:	705a      	strb	r2, [r3, #1]
		i2c_read_write(writep, charger_add, temp_buf, 2);
   108b2:	230c      	movs	r3, #12
   108b4:	18fa      	adds	r2, r7, r3
   108b6:	2302      	movs	r3, #2
   108b8:	2114      	movs	r1, #20
   108ba:	2001      	movs	r0, #1
   108bc:	4c02      	ldr	r4, [pc, #8]	; (108c8 <adp5062_reg_read_write+0x60>)
   108be:	47a0      	blx	r4
}
   108c0:	46c0      	nop			; (mov r8, r8)
   108c2:	46bd      	mov	sp, r7
   108c4:	b005      	add	sp, #20
   108c6:	bd90      	pop	{r4, r7, pc}
   108c8:	00010669 	.word	0x00010669

000108cc <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   108cc:	b580      	push	{r7, lr}
   108ce:	b082      	sub	sp, #8
   108d0:	af00      	add	r7, sp, #0
   108d2:	0002      	movs	r2, r0
   108d4:	1dfb      	adds	r3, r7, #7
   108d6:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   108d8:	1dfb      	adds	r3, r7, #7
   108da:	781b      	ldrb	r3, [r3, #0]
   108dc:	0018      	movs	r0, r3
   108de:	4b16      	ldr	r3, [pc, #88]	; (10938 <sd_mmc_test_unit_ready+0x6c>)
   108e0:	4798      	blx	r3
   108e2:	0003      	movs	r3, r0
   108e4:	2b01      	cmp	r3, #1
   108e6:	d019      	beq.n	1091c <sd_mmc_test_unit_ready+0x50>
   108e8:	2b02      	cmp	r3, #2
   108ea:	d019      	beq.n	10920 <sd_mmc_test_unit_ready+0x54>
   108ec:	2b00      	cmp	r3, #0
   108ee:	d11e      	bne.n	1092e <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   108f0:	1dfb      	adds	r3, r7, #7
   108f2:	781b      	ldrb	r3, [r3, #0]
   108f4:	4a11      	ldr	r2, [pc, #68]	; (1093c <sd_mmc_test_unit_ready+0x70>)
   108f6:	5cd3      	ldrb	r3, [r2, r3]
   108f8:	2b00      	cmp	r3, #0
   108fa:	d001      	beq.n	10900 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   108fc:	2302      	movs	r3, #2
   108fe:	e017      	b.n	10930 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   10900:	1dfb      	adds	r3, r7, #7
   10902:	781b      	ldrb	r3, [r3, #0]
   10904:	0018      	movs	r0, r3
   10906:	4b0e      	ldr	r3, [pc, #56]	; (10940 <sd_mmc_test_unit_ready+0x74>)
   10908:	4798      	blx	r3
   1090a:	0003      	movs	r3, r0
   1090c:	001a      	movs	r2, r3
   1090e:	2303      	movs	r3, #3
   10910:	4013      	ands	r3, r2
   10912:	d001      	beq.n	10918 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   10914:	2300      	movs	r3, #0
   10916:	e00b      	b.n	10930 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   10918:	2302      	movs	r3, #2
   1091a:	e009      	b.n	10930 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1091c:	2303      	movs	r3, #3
   1091e:	e007      	b.n	10930 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   10920:	1dfb      	adds	r3, r7, #7
   10922:	781b      	ldrb	r3, [r3, #0]
   10924:	4a05      	ldr	r2, [pc, #20]	; (1093c <sd_mmc_test_unit_ready+0x70>)
   10926:	2100      	movs	r1, #0
   10928:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1092a:	2302      	movs	r3, #2
   1092c:	e000      	b.n	10930 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1092e:	2301      	movs	r3, #1
	}
}
   10930:	0018      	movs	r0, r3
   10932:	46bd      	mov	sp, r7
   10934:	b002      	add	sp, #8
   10936:	bd80      	pop	{r7, pc}
   10938:	000054cd 	.word	0x000054cd
   1093c:	20000e0c 	.word	0x20000e0c
   10940:	00005541 	.word	0x00005541

00010944 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   10944:	b580      	push	{r7, lr}
   10946:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   10948:	2000      	movs	r0, #0
   1094a:	4b03      	ldr	r3, [pc, #12]	; (10958 <sd_mmc_test_unit_ready_0+0x14>)
   1094c:	4798      	blx	r3
   1094e:	0003      	movs	r3, r0
}
   10950:	0018      	movs	r0, r3
   10952:	46bd      	mov	sp, r7
   10954:	bd80      	pop	{r7, pc}
   10956:	46c0      	nop			; (mov r8, r8)
   10958:	000108cd 	.word	0x000108cd

0001095c <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
   1095c:	b580      	push	{r7, lr}
   1095e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(1);
   10960:	2001      	movs	r0, #1
   10962:	4b03      	ldr	r3, [pc, #12]	; (10970 <sd_mmc_test_unit_ready_1+0x14>)
   10964:	4798      	blx	r3
   10966:	0003      	movs	r3, r0
}
   10968:	0018      	movs	r0, r3
   1096a:	46bd      	mov	sp, r7
   1096c:	bd80      	pop	{r7, pc}
   1096e:	46c0      	nop			; (mov r8, r8)
   10970:	000108cd 	.word	0x000108cd

00010974 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   10974:	b580      	push	{r7, lr}
   10976:	b082      	sub	sp, #8
   10978:	af00      	add	r7, sp, #0
   1097a:	0002      	movs	r2, r0
   1097c:	6039      	str	r1, [r7, #0]
   1097e:	1dfb      	adds	r3, r7, #7
   10980:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   10982:	1dfb      	adds	r3, r7, #7
   10984:	781b      	ldrb	r3, [r3, #0]
   10986:	0018      	movs	r0, r3
   10988:	4b08      	ldr	r3, [pc, #32]	; (109ac <sd_mmc_read_capacity+0x38>)
   1098a:	4798      	blx	r3
   1098c:	0003      	movs	r3, r0
   1098e:	005b      	lsls	r3, r3, #1
   10990:	1e5a      	subs	r2, r3, #1
   10992:	683b      	ldr	r3, [r7, #0]
   10994:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   10996:	1dfb      	adds	r3, r7, #7
   10998:	781b      	ldrb	r3, [r3, #0]
   1099a:	0018      	movs	r0, r3
   1099c:	4b04      	ldr	r3, [pc, #16]	; (109b0 <sd_mmc_read_capacity+0x3c>)
   1099e:	4798      	blx	r3
   109a0:	0003      	movs	r3, r0
}
   109a2:	0018      	movs	r0, r3
   109a4:	46bd      	mov	sp, r7
   109a6:	b002      	add	sp, #8
   109a8:	bd80      	pop	{r7, pc}
   109aa:	46c0      	nop			; (mov r8, r8)
   109ac:	0000557d 	.word	0x0000557d
   109b0:	000108cd 	.word	0x000108cd

000109b4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   109b4:	b580      	push	{r7, lr}
   109b6:	b082      	sub	sp, #8
   109b8:	af00      	add	r7, sp, #0
   109ba:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   109bc:	687b      	ldr	r3, [r7, #4]
   109be:	0019      	movs	r1, r3
   109c0:	2000      	movs	r0, #0
   109c2:	4b03      	ldr	r3, [pc, #12]	; (109d0 <sd_mmc_read_capacity_0+0x1c>)
   109c4:	4798      	blx	r3
   109c6:	0003      	movs	r3, r0
}
   109c8:	0018      	movs	r0, r3
   109ca:	46bd      	mov	sp, r7
   109cc:	b002      	add	sp, #8
   109ce:	bd80      	pop	{r7, pc}
   109d0:	00010975 	.word	0x00010975

000109d4 <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
   109d4:	b580      	push	{r7, lr}
   109d6:	b082      	sub	sp, #8
   109d8:	af00      	add	r7, sp, #0
   109da:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(1, nb_sector);
   109dc:	687b      	ldr	r3, [r7, #4]
   109de:	0019      	movs	r1, r3
   109e0:	2001      	movs	r0, #1
   109e2:	4b03      	ldr	r3, [pc, #12]	; (109f0 <sd_mmc_read_capacity_1+0x1c>)
   109e4:	4798      	blx	r3
   109e6:	0003      	movs	r3, r0
}
   109e8:	0018      	movs	r0, r3
   109ea:	46bd      	mov	sp, r7
   109ec:	b002      	add	sp, #8
   109ee:	bd80      	pop	{r7, pc}
   109f0:	00010975 	.word	0x00010975

000109f4 <sd_mmc_unload>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   109f4:	b580      	push	{r7, lr}
   109f6:	b082      	sub	sp, #8
   109f8:	af00      	add	r7, sp, #0
   109fa:	0002      	movs	r2, r0
   109fc:	1dfb      	adds	r3, r7, #7
   109fe:	701a      	strb	r2, [r3, #0]
   10a00:	1dbb      	adds	r3, r7, #6
   10a02:	1c0a      	adds	r2, r1, #0
   10a04:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   10a06:	1dfb      	adds	r3, r7, #7
   10a08:	781b      	ldrb	r3, [r3, #0]
   10a0a:	4a04      	ldr	r2, [pc, #16]	; (10a1c <sd_mmc_unload+0x28>)
   10a0c:	1db9      	adds	r1, r7, #6
   10a0e:	7809      	ldrb	r1, [r1, #0]
   10a10:	54d1      	strb	r1, [r2, r3]
	return true;
   10a12:	2301      	movs	r3, #1
}
   10a14:	0018      	movs	r0, r3
   10a16:	46bd      	mov	sp, r7
   10a18:	b002      	add	sp, #8
   10a1a:	bd80      	pop	{r7, pc}
   10a1c:	20000e0c 	.word	0x20000e0c

00010a20 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   10a20:	b580      	push	{r7, lr}
   10a22:	b082      	sub	sp, #8
   10a24:	af00      	add	r7, sp, #0
   10a26:	0002      	movs	r2, r0
   10a28:	1dfb      	adds	r3, r7, #7
   10a2a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   10a2c:	1dfb      	adds	r3, r7, #7
   10a2e:	781b      	ldrb	r3, [r3, #0]
   10a30:	0019      	movs	r1, r3
   10a32:	2000      	movs	r0, #0
   10a34:	4b03      	ldr	r3, [pc, #12]	; (10a44 <sd_mmc_unload_0+0x24>)
   10a36:	4798      	blx	r3
   10a38:	0003      	movs	r3, r0
}
   10a3a:	0018      	movs	r0, r3
   10a3c:	46bd      	mov	sp, r7
   10a3e:	b002      	add	sp, #8
   10a40:	bd80      	pop	{r7, pc}
   10a42:	46c0      	nop			; (mov r8, r8)
   10a44:	000109f5 	.word	0x000109f5

00010a48 <sd_mmc_unload_1>:

bool sd_mmc_unload_1(bool unload)
{
   10a48:	b580      	push	{r7, lr}
   10a4a:	b082      	sub	sp, #8
   10a4c:	af00      	add	r7, sp, #0
   10a4e:	0002      	movs	r2, r0
   10a50:	1dfb      	adds	r3, r7, #7
   10a52:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(1, unload);
   10a54:	1dfb      	adds	r3, r7, #7
   10a56:	781b      	ldrb	r3, [r3, #0]
   10a58:	0019      	movs	r1, r3
   10a5a:	2001      	movs	r0, #1
   10a5c:	4b03      	ldr	r3, [pc, #12]	; (10a6c <sd_mmc_unload_1+0x24>)
   10a5e:	4798      	blx	r3
   10a60:	0003      	movs	r3, r0
}
   10a62:	0018      	movs	r0, r3
   10a64:	46bd      	mov	sp, r7
   10a66:	b002      	add	sp, #8
   10a68:	bd80      	pop	{r7, pc}
   10a6a:	46c0      	nop			; (mov r8, r8)
   10a6c:	000109f5 	.word	0x000109f5

00010a70 <sd_mmc_wr_protect>:

bool sd_mmc_wr_protect(uint8_t slot)
{
   10a70:	b580      	push	{r7, lr}
   10a72:	b082      	sub	sp, #8
   10a74:	af00      	add	r7, sp, #0
   10a76:	0002      	movs	r2, r0
   10a78:	1dfb      	adds	r3, r7, #7
   10a7a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   10a7c:	1dfb      	adds	r3, r7, #7
   10a7e:	781b      	ldrb	r3, [r3, #0]
   10a80:	0018      	movs	r0, r3
   10a82:	4b03      	ldr	r3, [pc, #12]	; (10a90 <sd_mmc_wr_protect+0x20>)
   10a84:	4798      	blx	r3
   10a86:	0003      	movs	r3, r0
}
   10a88:	0018      	movs	r0, r3
   10a8a:	46bd      	mov	sp, r7
   10a8c:	b002      	add	sp, #8
   10a8e:	bd80      	pop	{r7, pc}
   10a90:	000055b9 	.word	0x000055b9

00010a94 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   10a94:	b580      	push	{r7, lr}
   10a96:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   10a98:	2000      	movs	r0, #0
   10a9a:	4b03      	ldr	r3, [pc, #12]	; (10aa8 <sd_mmc_wr_protect_0+0x14>)
   10a9c:	4798      	blx	r3
   10a9e:	0003      	movs	r3, r0
}
   10aa0:	0018      	movs	r0, r3
   10aa2:	46bd      	mov	sp, r7
   10aa4:	bd80      	pop	{r7, pc}
   10aa6:	46c0      	nop			; (mov r8, r8)
   10aa8:	00010a71 	.word	0x00010a71

00010aac <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
   10aac:	b580      	push	{r7, lr}
   10aae:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(1);
   10ab0:	2001      	movs	r0, #1
   10ab2:	4b03      	ldr	r3, [pc, #12]	; (10ac0 <sd_mmc_wr_protect_1+0x14>)
   10ab4:	4798      	blx	r3
   10ab6:	0003      	movs	r3, r0
}
   10ab8:	0018      	movs	r0, r3
   10aba:	46bd      	mov	sp, r7
   10abc:	bd80      	pop	{r7, pc}
   10abe:	46c0      	nop			; (mov r8, r8)
   10ac0:	00010a71 	.word	0x00010a71

00010ac4 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
   10ac4:	b580      	push	{r7, lr}
   10ac6:	b082      	sub	sp, #8
   10ac8:	af00      	add	r7, sp, #0
   10aca:	0002      	movs	r2, r0
   10acc:	1dfb      	adds	r3, r7, #7
   10ace:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   10ad0:	2301      	movs	r3, #1
}
   10ad2:	0018      	movs	r0, r3
   10ad4:	46bd      	mov	sp, r7
   10ad6:	b002      	add	sp, #8
   10ad8:	bd80      	pop	{r7, pc}
	...

00010adc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   10adc:	b580      	push	{r7, lr}
   10ade:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   10ae0:	2000      	movs	r0, #0
   10ae2:	4b03      	ldr	r3, [pc, #12]	; (10af0 <sd_mmc_removal_0+0x14>)
   10ae4:	4798      	blx	r3
   10ae6:	0003      	movs	r3, r0
}
   10ae8:	0018      	movs	r0, r3
   10aea:	46bd      	mov	sp, r7
   10aec:	bd80      	pop	{r7, pc}
   10aee:	46c0      	nop			; (mov r8, r8)
   10af0:	00010ac5 	.word	0x00010ac5

00010af4 <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
   10af4:	b580      	push	{r7, lr}
   10af6:	af00      	add	r7, sp, #0
	return sd_mmc_removal(1);
   10af8:	2001      	movs	r0, #1
   10afa:	4b03      	ldr	r3, [pc, #12]	; (10b08 <sd_mmc_removal_1+0x14>)
   10afc:	4798      	blx	r3
   10afe:	0003      	movs	r3, r0
}
   10b00:	0018      	movs	r0, r3
   10b02:	46bd      	mov	sp, r7
   10b04:	bd80      	pop	{r7, pc}
   10b06:	46c0      	nop			; (mov r8, r8)
   10b08:	00010ac5 	.word	0x00010ac5

00010b0c <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   10b0c:	b590      	push	{r4, r7, lr}
   10b0e:	b085      	sub	sp, #20
   10b10:	af00      	add	r7, sp, #0
   10b12:	6039      	str	r1, [r7, #0]
   10b14:	0011      	movs	r1, r2
   10b16:	1dfb      	adds	r3, r7, #7
   10b18:	1c02      	adds	r2, r0, #0
   10b1a:	701a      	strb	r2, [r3, #0]
   10b1c:	1d3b      	adds	r3, r7, #4
   10b1e:	1c0a      	adds	r2, r1, #0
   10b20:	801a      	strh	r2, [r3, #0]
	bool b_first_step = true;
   10b22:	230f      	movs	r3, #15
   10b24:	18fb      	adds	r3, r7, r3
   10b26:	2201      	movs	r2, #1
   10b28:	701a      	strb	r2, [r3, #0]
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   10b2a:	1d3b      	adds	r3, r7, #4
   10b2c:	881a      	ldrh	r2, [r3, #0]
   10b2e:	6839      	ldr	r1, [r7, #0]
   10b30:	1dfb      	adds	r3, r7, #7
   10b32:	781b      	ldrb	r3, [r3, #0]
   10b34:	0018      	movs	r0, r3
   10b36:	4b3c      	ldr	r3, [pc, #240]	; (10c28 <sd_mmc_usb_read_10+0x11c>)
   10b38:	4798      	blx	r3
   10b3a:	1e03      	subs	r3, r0, #0
   10b3c:	d005      	beq.n	10b4a <sd_mmc_usb_read_10+0x3e>
   10b3e:	2b02      	cmp	r3, #2
   10b40:	d101      	bne.n	10b46 <sd_mmc_usb_read_10+0x3a>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   10b42:	2302      	movs	r3, #2
   10b44:	e06c      	b.n	10c20 <sd_mmc_usb_read_10+0x114>
	default:
		return CTRL_FAIL;
   10b46:	2301      	movs	r3, #1
   10b48:	e06a      	b.n	10c20 <sd_mmc_usb_read_10+0x114>
		break;
   10b4a:	46c0      	nop			; (mov r8, r8)
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
   10b4c:	230c      	movs	r3, #12
   10b4e:	18fb      	adds	r3, r7, r3
   10b50:	1d3a      	adds	r2, r7, #4
   10b52:	8812      	ldrh	r2, [r2, #0]
   10b54:	3201      	adds	r2, #1
   10b56:	801a      	strh	r2, [r3, #0]
	while (nb_step--) {
   10b58:	e058      	b.n	10c0c <sd_mmc_usb_read_10+0x100>
		if (nb_step) { // Skip last step
   10b5a:	230c      	movs	r3, #12
   10b5c:	18fb      	adds	r3, r7, r3
   10b5e:	881b      	ldrh	r3, [r3, #0]
   10b60:	2b00      	cmp	r3, #0
   10b62:	d012      	beq.n	10b8a <sd_mmc_usb_read_10+0x7e>
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   10b64:	230c      	movs	r3, #12
   10b66:	18fb      	adds	r3, r7, r3
   10b68:	881b      	ldrh	r3, [r3, #0]
   10b6a:	2201      	movs	r2, #1
   10b6c:	4013      	ands	r3, r2
   10b6e:	b29b      	uxth	r3, r3
   10b70:	2b00      	cmp	r3, #0
   10b72:	d101      	bne.n	10b78 <sd_mmc_usb_read_10+0x6c>
   10b74:	4b2d      	ldr	r3, [pc, #180]	; (10c2c <sd_mmc_usb_read_10+0x120>)
   10b76:	e000      	b.n	10b7a <sd_mmc_usb_read_10+0x6e>
   10b78:	4b2d      	ldr	r3, [pc, #180]	; (10c30 <sd_mmc_usb_read_10+0x124>)
   10b7a:	2101      	movs	r1, #1
   10b7c:	0018      	movs	r0, r3
   10b7e:	4b2d      	ldr	r3, [pc, #180]	; (10c34 <sd_mmc_usb_read_10+0x128>)
   10b80:	4798      	blx	r3
   10b82:	1e03      	subs	r3, r0, #0
   10b84:	d001      	beq.n	10b8a <sd_mmc_usb_read_10+0x7e>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   10b86:	2301      	movs	r3, #1
   10b88:	e04a      	b.n	10c20 <sd_mmc_usb_read_10+0x114>
			}
		}
		if (!b_first_step) { // Skip first step
   10b8a:	230f      	movs	r3, #15
   10b8c:	18fb      	adds	r3, r7, r3
   10b8e:	781b      	ldrb	r3, [r3, #0]
   10b90:	2201      	movs	r2, #1
   10b92:	4053      	eors	r3, r2
   10b94:	b2db      	uxtb	r3, r3
   10b96:	2b00      	cmp	r3, #0
   10b98:	d024      	beq.n	10be4 <sd_mmc_usb_read_10+0xd8>
			// RAM -> USB
			if (!udi_msc_trans_block(true,
					((nb_step % 2) == 0) ?
   10b9a:	230c      	movs	r3, #12
   10b9c:	18fb      	adds	r3, r7, r3
   10b9e:	881b      	ldrh	r3, [r3, #0]
   10ba0:	2201      	movs	r2, #1
   10ba2:	4013      	ands	r3, r2
   10ba4:	b29b      	uxth	r3, r3
			if (!udi_msc_trans_block(true,
   10ba6:	2b00      	cmp	r3, #0
   10ba8:	d101      	bne.n	10bae <sd_mmc_usb_read_10+0xa2>
   10baa:	4921      	ldr	r1, [pc, #132]	; (10c30 <sd_mmc_usb_read_10+0x124>)
   10bac:	e000      	b.n	10bb0 <sd_mmc_usb_read_10+0xa4>
   10bae:	491f      	ldr	r1, [pc, #124]	; (10c2c <sd_mmc_usb_read_10+0x120>)
   10bb0:	2380      	movs	r3, #128	; 0x80
   10bb2:	009a      	lsls	r2, r3, #2
   10bb4:	2300      	movs	r3, #0
   10bb6:	2001      	movs	r0, #1
   10bb8:	4c1f      	ldr	r4, [pc, #124]	; (10c38 <sd_mmc_usb_read_10+0x12c>)
   10bba:	47a0      	blx	r4
   10bbc:	0003      	movs	r3, r0
   10bbe:	001a      	movs	r2, r3
   10bc0:	2301      	movs	r3, #1
   10bc2:	4053      	eors	r3, r2
   10bc4:	b2db      	uxtb	r3, r3
   10bc6:	2b00      	cmp	r3, #0
   10bc8:	d010      	beq.n	10bec <sd_mmc_usb_read_10+0xe0>
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				if (!b_first_step) {
   10bca:	230f      	movs	r3, #15
   10bcc:	18fb      	adds	r3, r7, r3
   10bce:	781b      	ldrb	r3, [r3, #0]
   10bd0:	2201      	movs	r2, #1
   10bd2:	4053      	eors	r3, r2
   10bd4:	b2db      	uxtb	r3, r3
   10bd6:	2b00      	cmp	r3, #0
   10bd8:	d002      	beq.n	10be0 <sd_mmc_usb_read_10+0xd4>
					sd_mmc_wait_end_of_read_blocks(true);
   10bda:	2001      	movs	r0, #1
   10bdc:	4b17      	ldr	r3, [pc, #92]	; (10c3c <sd_mmc_usb_read_10+0x130>)
   10bde:	4798      	blx	r3
				}
				return CTRL_FAIL;
   10be0:	2301      	movs	r3, #1
   10be2:	e01d      	b.n	10c20 <sd_mmc_usb_read_10+0x114>
			}
		} else {
			b_first_step = false;
   10be4:	230f      	movs	r3, #15
   10be6:	18fb      	adds	r3, r7, r3
   10be8:	2200      	movs	r2, #0
   10bea:	701a      	strb	r2, [r3, #0]
		}
		if (nb_step) { // Skip last step
   10bec:	230c      	movs	r3, #12
   10bee:	18fb      	adds	r3, r7, r3
   10bf0:	881b      	ldrh	r3, [r3, #0]
   10bf2:	2b00      	cmp	r3, #0
   10bf4:	d006      	beq.n	10c04 <sd_mmc_usb_read_10+0xf8>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   10bf6:	2000      	movs	r0, #0
   10bf8:	4b10      	ldr	r3, [pc, #64]	; (10c3c <sd_mmc_usb_read_10+0x130>)
   10bfa:	4798      	blx	r3
   10bfc:	1e03      	subs	r3, r0, #0
   10bfe:	d001      	beq.n	10c04 <sd_mmc_usb_read_10+0xf8>
				return CTRL_FAIL;
   10c00:	2301      	movs	r3, #1
   10c02:	e00d      	b.n	10c20 <sd_mmc_usb_read_10+0x114>
			}
		}
		b_first_step = false;
   10c04:	230f      	movs	r3, #15
   10c06:	18fb      	adds	r3, r7, r3
   10c08:	2200      	movs	r2, #0
   10c0a:	701a      	strb	r2, [r3, #0]
	while (nb_step--) {
   10c0c:	230c      	movs	r3, #12
   10c0e:	18fb      	adds	r3, r7, r3
   10c10:	881b      	ldrh	r3, [r3, #0]
   10c12:	220c      	movs	r2, #12
   10c14:	18ba      	adds	r2, r7, r2
   10c16:	1e59      	subs	r1, r3, #1
   10c18:	8011      	strh	r1, [r2, #0]
   10c1a:	2b00      	cmp	r3, #0
   10c1c:	d19d      	bne.n	10b5a <sd_mmc_usb_read_10+0x4e>
	}
	return CTRL_GOOD;
   10c1e:	2300      	movs	r3, #0
}
   10c20:	0018      	movs	r0, r3
   10c22:	46bd      	mov	sp, r7
   10c24:	b005      	add	sp, #20
   10c26:	bd90      	pop	{r4, r7, pc}
   10c28:	000055d1 	.word	0x000055d1
   10c2c:	20001608 	.word	0x20001608
   10c30:	20001408 	.word	0x20001408
   10c34:	000056bd 	.word	0x000056bd
   10c38:	00000151 	.word	0x00000151
   10c3c:	00005715 	.word	0x00005715

00010c40 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   10c40:	b580      	push	{r7, lr}
   10c42:	b082      	sub	sp, #8
   10c44:	af00      	add	r7, sp, #0
   10c46:	6078      	str	r0, [r7, #4]
   10c48:	000a      	movs	r2, r1
   10c4a:	1cbb      	adds	r3, r7, #2
   10c4c:	801a      	strh	r2, [r3, #0]
	return sd_mmc_usb_read_10(0, addr, nb_sector);
   10c4e:	1cbb      	adds	r3, r7, #2
   10c50:	881a      	ldrh	r2, [r3, #0]
   10c52:	687b      	ldr	r3, [r7, #4]
   10c54:	0019      	movs	r1, r3
   10c56:	2000      	movs	r0, #0
   10c58:	4b03      	ldr	r3, [pc, #12]	; (10c68 <sd_mmc_usb_read_10_0+0x28>)
   10c5a:	4798      	blx	r3
   10c5c:	0003      	movs	r3, r0
}
   10c5e:	0018      	movs	r0, r3
   10c60:	46bd      	mov	sp, r7
   10c62:	b002      	add	sp, #8
   10c64:	bd80      	pop	{r7, pc}
   10c66:	46c0      	nop			; (mov r8, r8)
   10c68:	00010b0d 	.word	0x00010b0d

00010c6c <sd_mmc_usb_read_10_1>:

Ctrl_status sd_mmc_usb_read_10_1(uint32_t addr, uint16_t nb_sector)
{
   10c6c:	b580      	push	{r7, lr}
   10c6e:	b082      	sub	sp, #8
   10c70:	af00      	add	r7, sp, #0
   10c72:	6078      	str	r0, [r7, #4]
   10c74:	000a      	movs	r2, r1
   10c76:	1cbb      	adds	r3, r7, #2
   10c78:	801a      	strh	r2, [r3, #0]
	return sd_mmc_usb_read_10(1, addr, nb_sector);
   10c7a:	1cbb      	adds	r3, r7, #2
   10c7c:	881a      	ldrh	r2, [r3, #0]
   10c7e:	687b      	ldr	r3, [r7, #4]
   10c80:	0019      	movs	r1, r3
   10c82:	2001      	movs	r0, #1
   10c84:	4b03      	ldr	r3, [pc, #12]	; (10c94 <sd_mmc_usb_read_10_1+0x28>)
   10c86:	4798      	blx	r3
   10c88:	0003      	movs	r3, r0
}
   10c8a:	0018      	movs	r0, r3
   10c8c:	46bd      	mov	sp, r7
   10c8e:	b002      	add	sp, #8
   10c90:	bd80      	pop	{r7, pc}
   10c92:	46c0      	nop			; (mov r8, r8)
   10c94:	00010b0d 	.word	0x00010b0d

00010c98 <sd_mmc_usb_write_10>:

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   10c98:	b590      	push	{r4, r7, lr}
   10c9a:	b085      	sub	sp, #20
   10c9c:	af00      	add	r7, sp, #0
   10c9e:	6039      	str	r1, [r7, #0]
   10ca0:	0011      	movs	r1, r2
   10ca2:	1dfb      	adds	r3, r7, #7
   10ca4:	1c02      	adds	r2, r0, #0
   10ca6:	701a      	strb	r2, [r3, #0]
   10ca8:	1d3b      	adds	r3, r7, #4
   10caa:	1c0a      	adds	r2, r1, #0
   10cac:	801a      	strh	r2, [r3, #0]
	bool b_first_step = true;
   10cae:	230f      	movs	r3, #15
   10cb0:	18fb      	adds	r3, r7, r3
   10cb2:	2201      	movs	r2, #1
   10cb4:	701a      	strb	r2, [r3, #0]
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   10cb6:	1d3b      	adds	r3, r7, #4
   10cb8:	881a      	ldrh	r2, [r3, #0]
   10cba:	6839      	ldr	r1, [r7, #0]
   10cbc:	1dfb      	adds	r3, r7, #7
   10cbe:	781b      	ldrb	r3, [r3, #0]
   10cc0:	0018      	movs	r0, r3
   10cc2:	4b40      	ldr	r3, [pc, #256]	; (10dc4 <sd_mmc_usb_write_10+0x12c>)
   10cc4:	4798      	blx	r3
   10cc6:	1e03      	subs	r3, r0, #0
   10cc8:	d005      	beq.n	10cd6 <sd_mmc_usb_write_10+0x3e>
   10cca:	2b02      	cmp	r3, #2
   10ccc:	d101      	bne.n	10cd2 <sd_mmc_usb_write_10+0x3a>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   10cce:	2302      	movs	r3, #2
   10cd0:	e073      	b.n	10dba <sd_mmc_usb_write_10+0x122>
	default:
		return CTRL_FAIL;
   10cd2:	2301      	movs	r3, #1
   10cd4:	e071      	b.n	10dba <sd_mmc_usb_write_10+0x122>
		break;
   10cd6:	46c0      	nop			; (mov r8, r8)
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
   10cd8:	230c      	movs	r3, #12
   10cda:	18fb      	adds	r3, r7, r3
   10cdc:	1d3a      	adds	r2, r7, #4
   10cde:	8812      	ldrh	r2, [r2, #0]
   10ce0:	3201      	adds	r2, #1
   10ce2:	801a      	strh	r2, [r3, #0]
	while (nb_step--) {
   10ce4:	e05f      	b.n	10da6 <sd_mmc_usb_write_10+0x10e>
		if (!b_first_step) { // Skip first step
   10ce6:	230f      	movs	r3, #15
   10ce8:	18fb      	adds	r3, r7, r3
   10cea:	781b      	ldrb	r3, [r3, #0]
   10cec:	2201      	movs	r2, #1
   10cee:	4053      	eors	r3, r2
   10cf0:	b2db      	uxtb	r3, r3
   10cf2:	2b00      	cmp	r3, #0
   10cf4:	d012      	beq.n	10d1c <sd_mmc_usb_write_10+0x84>
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   10cf6:	230c      	movs	r3, #12
   10cf8:	18fb      	adds	r3, r7, r3
   10cfa:	881b      	ldrh	r3, [r3, #0]
   10cfc:	2201      	movs	r2, #1
   10cfe:	4013      	ands	r3, r2
   10d00:	b29b      	uxth	r3, r3
   10d02:	2b00      	cmp	r3, #0
   10d04:	d101      	bne.n	10d0a <sd_mmc_usb_write_10+0x72>
   10d06:	4b30      	ldr	r3, [pc, #192]	; (10dc8 <sd_mmc_usb_write_10+0x130>)
   10d08:	e000      	b.n	10d0c <sd_mmc_usb_write_10+0x74>
   10d0a:	4b30      	ldr	r3, [pc, #192]	; (10dcc <sd_mmc_usb_write_10+0x134>)
   10d0c:	2101      	movs	r1, #1
   10d0e:	0018      	movs	r0, r3
   10d10:	4b2f      	ldr	r3, [pc, #188]	; (10dd0 <sd_mmc_usb_write_10+0x138>)
   10d12:	4798      	blx	r3
   10d14:	1e03      	subs	r3, r0, #0
   10d16:	d001      	beq.n	10d1c <sd_mmc_usb_write_10+0x84>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   10d18:	2301      	movs	r3, #1
   10d1a:	e04e      	b.n	10dba <sd_mmc_usb_write_10+0x122>
			}
		}
		if (nb_step) { // Skip last step
   10d1c:	230c      	movs	r3, #12
   10d1e:	18fb      	adds	r3, r7, r3
   10d20:	881b      	ldrh	r3, [r3, #0]
   10d22:	2b00      	cmp	r3, #0
   10d24:	d024      	beq.n	10d70 <sd_mmc_usb_write_10+0xd8>
			// USB -> RAM
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
   10d26:	230c      	movs	r3, #12
   10d28:	18fb      	adds	r3, r7, r3
   10d2a:	881b      	ldrh	r3, [r3, #0]
   10d2c:	2201      	movs	r2, #1
   10d2e:	4013      	ands	r3, r2
   10d30:	b29b      	uxth	r3, r3
			if (!udi_msc_trans_block(false,
   10d32:	2b00      	cmp	r3, #0
   10d34:	d101      	bne.n	10d3a <sd_mmc_usb_write_10+0xa2>
   10d36:	4925      	ldr	r1, [pc, #148]	; (10dcc <sd_mmc_usb_write_10+0x134>)
   10d38:	e000      	b.n	10d3c <sd_mmc_usb_write_10+0xa4>
   10d3a:	4923      	ldr	r1, [pc, #140]	; (10dc8 <sd_mmc_usb_write_10+0x130>)
   10d3c:	2380      	movs	r3, #128	; 0x80
   10d3e:	009a      	lsls	r2, r3, #2
   10d40:	2300      	movs	r3, #0
   10d42:	2000      	movs	r0, #0
   10d44:	4c23      	ldr	r4, [pc, #140]	; (10dd4 <sd_mmc_usb_write_10+0x13c>)
   10d46:	47a0      	blx	r4
   10d48:	0003      	movs	r3, r0
   10d4a:	001a      	movs	r2, r3
   10d4c:	2301      	movs	r3, #1
   10d4e:	4053      	eors	r3, r2
   10d50:	b2db      	uxtb	r3, r3
   10d52:	2b00      	cmp	r3, #0
   10d54:	d00c      	beq.n	10d70 <sd_mmc_usb_write_10+0xd8>
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				if (!b_first_step) {
   10d56:	230f      	movs	r3, #15
   10d58:	18fb      	adds	r3, r7, r3
   10d5a:	781b      	ldrb	r3, [r3, #0]
   10d5c:	2201      	movs	r2, #1
   10d5e:	4053      	eors	r3, r2
   10d60:	b2db      	uxtb	r3, r3
   10d62:	2b00      	cmp	r3, #0
   10d64:	d002      	beq.n	10d6c <sd_mmc_usb_write_10+0xd4>
					sd_mmc_wait_end_of_write_blocks(true);
   10d66:	2001      	movs	r0, #1
   10d68:	4b1b      	ldr	r3, [pc, #108]	; (10dd8 <sd_mmc_usb_write_10+0x140>)
   10d6a:	4798      	blx	r3
				}
				return CTRL_FAIL;
   10d6c:	2301      	movs	r3, #1
   10d6e:	e024      	b.n	10dba <sd_mmc_usb_write_10+0x122>
			}
		}
		if (!b_first_step) { // Skip first step
   10d70:	230f      	movs	r3, #15
   10d72:	18fb      	adds	r3, r7, r3
   10d74:	781b      	ldrb	r3, [r3, #0]
   10d76:	2201      	movs	r2, #1
   10d78:	4053      	eors	r3, r2
   10d7a:	b2db      	uxtb	r3, r3
   10d7c:	2b00      	cmp	r3, #0
   10d7e:	d00e      	beq.n	10d9e <sd_mmc_usb_write_10+0x106>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   10d80:	2000      	movs	r0, #0
   10d82:	4b15      	ldr	r3, [pc, #84]	; (10dd8 <sd_mmc_usb_write_10+0x140>)
   10d84:	4798      	blx	r3
   10d86:	0003      	movs	r3, r0
   10d88:	0019      	movs	r1, r3
   10d8a:	230f      	movs	r3, #15
   10d8c:	18fb      	adds	r3, r7, r3
   10d8e:	220f      	movs	r2, #15
   10d90:	18ba      	adds	r2, r7, r2
   10d92:	7812      	ldrb	r2, [r2, #0]
   10d94:	701a      	strb	r2, [r3, #0]
   10d96:	2900      	cmp	r1, #0
   10d98:	d005      	beq.n	10da6 <sd_mmc_usb_write_10+0x10e>
				return CTRL_FAIL;
   10d9a:	2301      	movs	r3, #1
   10d9c:	e00d      	b.n	10dba <sd_mmc_usb_write_10+0x122>
			}
		} else {
			b_first_step = false;
   10d9e:	230f      	movs	r3, #15
   10da0:	18fb      	adds	r3, r7, r3
   10da2:	2200      	movs	r2, #0
   10da4:	701a      	strb	r2, [r3, #0]
	while (nb_step--) {
   10da6:	230c      	movs	r3, #12
   10da8:	18fb      	adds	r3, r7, r3
   10daa:	881b      	ldrh	r3, [r3, #0]
   10dac:	220c      	movs	r2, #12
   10dae:	18ba      	adds	r2, r7, r2
   10db0:	1e59      	subs	r1, r3, #1
   10db2:	8011      	strh	r1, [r2, #0]
   10db4:	2b00      	cmp	r3, #0
   10db6:	d196      	bne.n	10ce6 <sd_mmc_usb_write_10+0x4e>
		}
	}
	return CTRL_GOOD;
   10db8:	2300      	movs	r3, #0
}
   10dba:	0018      	movs	r0, r3
   10dbc:	46bd      	mov	sp, r7
   10dbe:	b005      	add	sp, #20
   10dc0:	bd90      	pop	{r4, r7, pc}
   10dc2:	46c0      	nop			; (mov r8, r8)
   10dc4:	000057ad 	.word	0x000057ad
   10dc8:	20001608 	.word	0x20001608
   10dcc:	20001408 	.word	0x20001408
   10dd0:	00005895 	.word	0x00005895
   10dd4:	00000151 	.word	0x00000151
   10dd8:	000058ed 	.word	0x000058ed

00010ddc <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   10ddc:	b580      	push	{r7, lr}
   10dde:	b082      	sub	sp, #8
   10de0:	af00      	add	r7, sp, #0
   10de2:	6078      	str	r0, [r7, #4]
   10de4:	000a      	movs	r2, r1
   10de6:	1cbb      	adds	r3, r7, #2
   10de8:	801a      	strh	r2, [r3, #0]
	return sd_mmc_usb_write_10(0, addr, nb_sector);
   10dea:	1cbb      	adds	r3, r7, #2
   10dec:	881a      	ldrh	r2, [r3, #0]
   10dee:	687b      	ldr	r3, [r7, #4]
   10df0:	0019      	movs	r1, r3
   10df2:	2000      	movs	r0, #0
   10df4:	4b03      	ldr	r3, [pc, #12]	; (10e04 <sd_mmc_usb_write_10_0+0x28>)
   10df6:	4798      	blx	r3
   10df8:	0003      	movs	r3, r0
}
   10dfa:	0018      	movs	r0, r3
   10dfc:	46bd      	mov	sp, r7
   10dfe:	b002      	add	sp, #8
   10e00:	bd80      	pop	{r7, pc}
   10e02:	46c0      	nop			; (mov r8, r8)
   10e04:	00010c99 	.word	0x00010c99

00010e08 <sd_mmc_usb_write_10_1>:

Ctrl_status sd_mmc_usb_write_10_1(uint32_t addr, uint16_t nb_sector)
{
   10e08:	b580      	push	{r7, lr}
   10e0a:	b082      	sub	sp, #8
   10e0c:	af00      	add	r7, sp, #0
   10e0e:	6078      	str	r0, [r7, #4]
   10e10:	000a      	movs	r2, r1
   10e12:	1cbb      	adds	r3, r7, #2
   10e14:	801a      	strh	r2, [r3, #0]
	return sd_mmc_usb_write_10(1, addr, nb_sector);
   10e16:	1cbb      	adds	r3, r7, #2
   10e18:	881a      	ldrh	r2, [r3, #0]
   10e1a:	687b      	ldr	r3, [r7, #4]
   10e1c:	0019      	movs	r1, r3
   10e1e:	2001      	movs	r0, #1
   10e20:	4b03      	ldr	r3, [pc, #12]	; (10e30 <sd_mmc_usb_write_10_1+0x28>)
   10e22:	4798      	blx	r3
   10e24:	0003      	movs	r3, r0
}
   10e26:	0018      	movs	r0, r3
   10e28:	46bd      	mov	sp, r7
   10e2a:	b002      	add	sp, #8
   10e2c:	bd80      	pop	{r7, pc}
   10e2e:	46c0      	nop			; (mov r8, r8)
   10e30:	00010c99 	.word	0x00010c99

00010e34 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   10e34:	b580      	push	{r7, lr}
   10e36:	b084      	sub	sp, #16
   10e38:	af00      	add	r7, sp, #0
   10e3a:	60b9      	str	r1, [r7, #8]
   10e3c:	607a      	str	r2, [r7, #4]
   10e3e:	230f      	movs	r3, #15
   10e40:	18fb      	adds	r3, r7, r3
   10e42:	1c02      	adds	r2, r0, #0
   10e44:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   10e46:	68b9      	ldr	r1, [r7, #8]
   10e48:	230f      	movs	r3, #15
   10e4a:	18fb      	adds	r3, r7, r3
   10e4c:	781b      	ldrb	r3, [r3, #0]
   10e4e:	2201      	movs	r2, #1
   10e50:	0018      	movs	r0, r3
   10e52:	4b10      	ldr	r3, [pc, #64]	; (10e94 <sd_mmc_mem_2_ram+0x60>)
   10e54:	4798      	blx	r3
   10e56:	1e03      	subs	r3, r0, #0
   10e58:	d005      	beq.n	10e66 <sd_mmc_mem_2_ram+0x32>
   10e5a:	2b02      	cmp	r3, #2
   10e5c:	d101      	bne.n	10e62 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   10e5e:	2302      	movs	r3, #2
   10e60:	e013      	b.n	10e8a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   10e62:	2301      	movs	r3, #1
   10e64:	e011      	b.n	10e8a <sd_mmc_mem_2_ram+0x56>
		break;
   10e66:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   10e68:	687b      	ldr	r3, [r7, #4]
   10e6a:	2101      	movs	r1, #1
   10e6c:	0018      	movs	r0, r3
   10e6e:	4b0a      	ldr	r3, [pc, #40]	; (10e98 <sd_mmc_mem_2_ram+0x64>)
   10e70:	4798      	blx	r3
   10e72:	1e03      	subs	r3, r0, #0
   10e74:	d001      	beq.n	10e7a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   10e76:	2301      	movs	r3, #1
   10e78:	e007      	b.n	10e8a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   10e7a:	2000      	movs	r0, #0
   10e7c:	4b07      	ldr	r3, [pc, #28]	; (10e9c <sd_mmc_mem_2_ram+0x68>)
   10e7e:	4798      	blx	r3
   10e80:	1e03      	subs	r3, r0, #0
   10e82:	d001      	beq.n	10e88 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   10e84:	2301      	movs	r3, #1
   10e86:	e000      	b.n	10e8a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   10e88:	2300      	movs	r3, #0
}
   10e8a:	0018      	movs	r0, r3
   10e8c:	46bd      	mov	sp, r7
   10e8e:	b004      	add	sp, #16
   10e90:	bd80      	pop	{r7, pc}
   10e92:	46c0      	nop			; (mov r8, r8)
   10e94:	000055d1 	.word	0x000055d1
   10e98:	000056bd 	.word	0x000056bd
   10e9c:	00005715 	.word	0x00005715

00010ea0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   10ea0:	b580      	push	{r7, lr}
   10ea2:	b082      	sub	sp, #8
   10ea4:	af00      	add	r7, sp, #0
   10ea6:	6078      	str	r0, [r7, #4]
   10ea8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   10eaa:	683a      	ldr	r2, [r7, #0]
   10eac:	687b      	ldr	r3, [r7, #4]
   10eae:	0019      	movs	r1, r3
   10eb0:	2000      	movs	r0, #0
   10eb2:	4b03      	ldr	r3, [pc, #12]	; (10ec0 <sd_mmc_mem_2_ram_0+0x20>)
   10eb4:	4798      	blx	r3
   10eb6:	0003      	movs	r3, r0
}
   10eb8:	0018      	movs	r0, r3
   10eba:	46bd      	mov	sp, r7
   10ebc:	b002      	add	sp, #8
   10ebe:	bd80      	pop	{r7, pc}
   10ec0:	00010e35 	.word	0x00010e35

00010ec4 <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
   10ec4:	b580      	push	{r7, lr}
   10ec6:	b082      	sub	sp, #8
   10ec8:	af00      	add	r7, sp, #0
   10eca:	6078      	str	r0, [r7, #4]
   10ecc:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(1, addr, ram);
   10ece:	683a      	ldr	r2, [r7, #0]
   10ed0:	687b      	ldr	r3, [r7, #4]
   10ed2:	0019      	movs	r1, r3
   10ed4:	2001      	movs	r0, #1
   10ed6:	4b03      	ldr	r3, [pc, #12]	; (10ee4 <sd_mmc_mem_2_ram_1+0x20>)
   10ed8:	4798      	blx	r3
   10eda:	0003      	movs	r3, r0
}
   10edc:	0018      	movs	r0, r3
   10ede:	46bd      	mov	sp, r7
   10ee0:	b002      	add	sp, #8
   10ee2:	bd80      	pop	{r7, pc}
   10ee4:	00010e35 	.word	0x00010e35

00010ee8 <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   10ee8:	b580      	push	{r7, lr}
   10eea:	b084      	sub	sp, #16
   10eec:	af00      	add	r7, sp, #0
   10eee:	60b9      	str	r1, [r7, #8]
   10ef0:	607a      	str	r2, [r7, #4]
   10ef2:	230f      	movs	r3, #15
   10ef4:	18fb      	adds	r3, r7, r3
   10ef6:	1c02      	adds	r2, r0, #0
   10ef8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   10efa:	68b9      	ldr	r1, [r7, #8]
   10efc:	230f      	movs	r3, #15
   10efe:	18fb      	adds	r3, r7, r3
   10f00:	781b      	ldrb	r3, [r3, #0]
   10f02:	2201      	movs	r2, #1
   10f04:	0018      	movs	r0, r3
   10f06:	4b10      	ldr	r3, [pc, #64]	; (10f48 <sd_mmc_ram_2_mem+0x60>)
   10f08:	4798      	blx	r3
   10f0a:	1e03      	subs	r3, r0, #0
   10f0c:	d005      	beq.n	10f1a <sd_mmc_ram_2_mem+0x32>
   10f0e:	2b02      	cmp	r3, #2
   10f10:	d101      	bne.n	10f16 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   10f12:	2302      	movs	r3, #2
   10f14:	e013      	b.n	10f3e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   10f16:	2301      	movs	r3, #1
   10f18:	e011      	b.n	10f3e <sd_mmc_ram_2_mem+0x56>
		break;
   10f1a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   10f1c:	687b      	ldr	r3, [r7, #4]
   10f1e:	2101      	movs	r1, #1
   10f20:	0018      	movs	r0, r3
   10f22:	4b0a      	ldr	r3, [pc, #40]	; (10f4c <sd_mmc_ram_2_mem+0x64>)
   10f24:	4798      	blx	r3
   10f26:	1e03      	subs	r3, r0, #0
   10f28:	d001      	beq.n	10f2e <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   10f2a:	2301      	movs	r3, #1
   10f2c:	e007      	b.n	10f3e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   10f2e:	2000      	movs	r0, #0
   10f30:	4b07      	ldr	r3, [pc, #28]	; (10f50 <sd_mmc_ram_2_mem+0x68>)
   10f32:	4798      	blx	r3
   10f34:	1e03      	subs	r3, r0, #0
   10f36:	d001      	beq.n	10f3c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   10f38:	2301      	movs	r3, #1
   10f3a:	e000      	b.n	10f3e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   10f3c:	2300      	movs	r3, #0
}
   10f3e:	0018      	movs	r0, r3
   10f40:	46bd      	mov	sp, r7
   10f42:	b004      	add	sp, #16
   10f44:	bd80      	pop	{r7, pc}
   10f46:	46c0      	nop			; (mov r8, r8)
   10f48:	000057ad 	.word	0x000057ad
   10f4c:	00005895 	.word	0x00005895
   10f50:	000058ed 	.word	0x000058ed

00010f54 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   10f54:	b580      	push	{r7, lr}
   10f56:	b082      	sub	sp, #8
   10f58:	af00      	add	r7, sp, #0
   10f5a:	6078      	str	r0, [r7, #4]
   10f5c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   10f5e:	683a      	ldr	r2, [r7, #0]
   10f60:	687b      	ldr	r3, [r7, #4]
   10f62:	0019      	movs	r1, r3
   10f64:	2000      	movs	r0, #0
   10f66:	4b03      	ldr	r3, [pc, #12]	; (10f74 <sd_mmc_ram_2_mem_0+0x20>)
   10f68:	4798      	blx	r3
   10f6a:	0003      	movs	r3, r0
}
   10f6c:	0018      	movs	r0, r3
   10f6e:	46bd      	mov	sp, r7
   10f70:	b002      	add	sp, #8
   10f72:	bd80      	pop	{r7, pc}
   10f74:	00010ee9 	.word	0x00010ee9

00010f78 <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
   10f78:	b580      	push	{r7, lr}
   10f7a:	b082      	sub	sp, #8
   10f7c:	af00      	add	r7, sp, #0
   10f7e:	6078      	str	r0, [r7, #4]
   10f80:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(1, addr, ram);
   10f82:	683a      	ldr	r2, [r7, #0]
   10f84:	687b      	ldr	r3, [r7, #4]
   10f86:	0019      	movs	r1, r3
   10f88:	2001      	movs	r0, #1
   10f8a:	4b03      	ldr	r3, [pc, #12]	; (10f98 <sd_mmc_ram_2_mem_1+0x20>)
   10f8c:	4798      	blx	r3
   10f8e:	0003      	movs	r3, r0
}
   10f90:	0018      	movs	r0, r3
   10f92:	46bd      	mov	sp, r7
   10f94:	b002      	add	sp, #8
   10f96:	bd80      	pop	{r7, pc}
   10f98:	00010ee9 	.word	0x00010ee9

00010f9c <bcd_adj>:
//  Days in each month:           [31, 28, 31, 30,  31,  30,  31,  31,  30,  31,  30,  31];
uint32_t days_per_month_acc[12] = {0,  31, 59, 90,  120, 151, 181, 212, 243, 273, 304, 334};



void bcd_adj(uint8_t *x){
   10f9c:	b580      	push	{r7, lr}
   10f9e:	b082      	sub	sp, #8
   10fa0:	af00      	add	r7, sp, #0
   10fa2:	6078      	str	r0, [r7, #4]
	if ((*x & 0x0F)==0x0A){
   10fa4:	687b      	ldr	r3, [r7, #4]
   10fa6:	781b      	ldrb	r3, [r3, #0]
   10fa8:	001a      	movs	r2, r3
   10faa:	230f      	movs	r3, #15
   10fac:	4013      	ands	r3, r2
   10fae:	2b0a      	cmp	r3, #10
   10fb0:	d10d      	bne.n	10fce <bcd_adj+0x32>
		*x = *x & 0xF0;
   10fb2:	687b      	ldr	r3, [r7, #4]
   10fb4:	781b      	ldrb	r3, [r3, #0]
   10fb6:	220f      	movs	r2, #15
   10fb8:	4393      	bics	r3, r2
   10fba:	b2da      	uxtb	r2, r3
   10fbc:	687b      	ldr	r3, [r7, #4]
   10fbe:	701a      	strb	r2, [r3, #0]
		*x = *x + 0x10;
   10fc0:	687b      	ldr	r3, [r7, #4]
   10fc2:	781b      	ldrb	r3, [r3, #0]
   10fc4:	3310      	adds	r3, #16
   10fc6:	b2da      	uxtb	r2, r3
   10fc8:	687b      	ldr	r3, [r7, #4]
   10fca:	701a      	strb	r2, [r3, #0]
		} else if ((*x & 0x0F)==0x0F){
		*x = *x & 0xF0;
		*x = *x + 0x09;
	}
}
   10fcc:	e013      	b.n	10ff6 <bcd_adj+0x5a>
		} else if ((*x & 0x0F)==0x0F){
   10fce:	687b      	ldr	r3, [r7, #4]
   10fd0:	781b      	ldrb	r3, [r3, #0]
   10fd2:	001a      	movs	r2, r3
   10fd4:	230f      	movs	r3, #15
   10fd6:	4013      	ands	r3, r2
   10fd8:	2b0f      	cmp	r3, #15
   10fda:	d10c      	bne.n	10ff6 <bcd_adj+0x5a>
		*x = *x & 0xF0;
   10fdc:	687b      	ldr	r3, [r7, #4]
   10fde:	781b      	ldrb	r3, [r3, #0]
   10fe0:	220f      	movs	r2, #15
   10fe2:	4393      	bics	r3, r2
   10fe4:	b2da      	uxtb	r2, r3
   10fe6:	687b      	ldr	r3, [r7, #4]
   10fe8:	701a      	strb	r2, [r3, #0]
		*x = *x + 0x09;
   10fea:	687b      	ldr	r3, [r7, #4]
   10fec:	781b      	ldrb	r3, [r3, #0]
   10fee:	3309      	adds	r3, #9
   10ff0:	b2da      	uxtb	r2, r3
   10ff2:	687b      	ldr	r3, [r7, #4]
   10ff4:	701a      	strb	r2, [r3, #0]
}
   10ff6:	46c0      	nop			; (mov r8, r8)
   10ff8:	46bd      	mov	sp, r7
   10ffa:	b002      	add	sp, #8
   10ffc:	bd80      	pop	{r7, pc}
	...

00011000 <get_time>:


void get_time(void){
   11000:	b590      	push	{r4, r7, lr}
   11002:	b087      	sub	sp, #28
   11004:	af00      	add	r7, sp, #0
	uint8_t temp_buf[20];
	int16_t temp_var16;
	temp_buf[0]=0x00;
   11006:	003b      	movs	r3, r7
   11008:	2200      	movs	r2, #0
   1100a:	701a      	strb	r2, [r3, #0]
	i2c_read_write(readp, rtc_add, temp_buf, 19);
   1100c:	003a      	movs	r2, r7
   1100e:	2313      	movs	r3, #19
   11010:	2168      	movs	r1, #104	; 0x68
   11012:	2000      	movs	r0, #0
   11014:	4c38      	ldr	r4, [pc, #224]	; (110f8 <get_time+0xf8>)
   11016:	47a0      	blx	r4
	//Parse Data
	current_time.seconds=	temp_buf[0x01];
   11018:	003b      	movs	r3, r7
   1101a:	785a      	ldrb	r2, [r3, #1]
   1101c:	4b37      	ldr	r3, [pc, #220]	; (110fc <get_time+0xfc>)
   1101e:	701a      	strb	r2, [r3, #0]
	current_time.minutes=	temp_buf[0x02];
   11020:	003b      	movs	r3, r7
   11022:	789a      	ldrb	r2, [r3, #2]
   11024:	4b35      	ldr	r3, [pc, #212]	; (110fc <get_time+0xfc>)
   11026:	705a      	strb	r2, [r3, #1]
	current_time.hours=		temp_buf[0x03];
   11028:	003b      	movs	r3, r7
   1102a:	78da      	ldrb	r2, [r3, #3]
   1102c:	4b33      	ldr	r3, [pc, #204]	; (110fc <get_time+0xfc>)
   1102e:	709a      	strb	r2, [r3, #2]
	current_time.date=		temp_buf[0x05] ;
   11030:	003b      	movs	r3, r7
   11032:	795a      	ldrb	r2, [r3, #5]
   11034:	4b31      	ldr	r3, [pc, #196]	; (110fc <get_time+0xfc>)
   11036:	711a      	strb	r2, [r3, #4]
	current_time.month=		temp_buf[0x06] & 0x7F;//mask out first "century" bit
   11038:	003b      	movs	r3, r7
   1103a:	799b      	ldrb	r3, [r3, #6]
   1103c:	227f      	movs	r2, #127	; 0x7f
   1103e:	4013      	ands	r3, r2
   11040:	b2da      	uxtb	r2, r3
   11042:	4b2e      	ldr	r3, [pc, #184]	; (110fc <get_time+0xfc>)
   11044:	715a      	strb	r2, [r3, #5]
	current_time.year=		temp_buf[0x07];
   11046:	003b      	movs	r3, r7
   11048:	79da      	ldrb	r2, [r3, #7]
   1104a:	4b2c      	ldr	r3, [pc, #176]	; (110fc <get_time+0xfc>)
   1104c:	719a      	strb	r2, [r3, #6]
	current_time.control=	temp_buf[0x0F];
   1104e:	003b      	movs	r3, r7
   11050:	7bda      	ldrb	r2, [r3, #15]
   11052:	4b2a      	ldr	r3, [pc, #168]	; (110fc <get_time+0xfc>)
   11054:	71da      	strb	r2, [r3, #7]
	current_time.control_status=	temp_buf[0x10];
   11056:	003b      	movs	r3, r7
   11058:	7c1a      	ldrb	r2, [r3, #16]
   1105a:	4b28      	ldr	r3, [pc, #160]	; (110fc <get_time+0xfc>)
   1105c:	721a      	strb	r2, [r3, #8]
	temp_var16=temp_buf[0x12];
   1105e:	003b      	movs	r3, r7
   11060:	7c9a      	ldrb	r2, [r3, #18]
   11062:	2316      	movs	r3, #22
   11064:	18fb      	adds	r3, r7, r3
   11066:	801a      	strh	r2, [r3, #0]
	temp_var16=temp_var16<<8;
   11068:	2316      	movs	r3, #22
   1106a:	18fb      	adds	r3, r7, r3
   1106c:	2200      	movs	r2, #0
   1106e:	5e9b      	ldrsh	r3, [r3, r2]
   11070:	021a      	lsls	r2, r3, #8
   11072:	2316      	movs	r3, #22
   11074:	18fb      	adds	r3, r7, r3
   11076:	801a      	strh	r2, [r3, #0]
	temp_var16=temp_var16+temp_buf[0x13];
   11078:	003b      	movs	r3, r7
   1107a:	7cdb      	ldrb	r3, [r3, #19]
   1107c:	b29a      	uxth	r2, r3
   1107e:	2316      	movs	r3, #22
   11080:	18fb      	adds	r3, r7, r3
   11082:	881b      	ldrh	r3, [r3, #0]
   11084:	18d3      	adds	r3, r2, r3
   11086:	b29a      	uxth	r2, r3
   11088:	2316      	movs	r3, #22
   1108a:	18fb      	adds	r3, r7, r3
   1108c:	801a      	strh	r2, [r3, #0]
	current_time.temperatureC=temp_var16;
   1108e:	2316      	movs	r3, #22
   11090:	18fb      	adds	r3, r7, r3
   11092:	2200      	movs	r2, #0
   11094:	5e9a      	ldrsh	r2, [r3, r2]
   11096:	4b1a      	ldr	r3, [pc, #104]	; (11100 <get_time+0x100>)
   11098:	0010      	movs	r0, r2
   1109a:	4798      	blx	r3
   1109c:	1c02      	adds	r2, r0, #0
   1109e:	4b17      	ldr	r3, [pc, #92]	; (110fc <get_time+0xfc>)
   110a0:	60da      	str	r2, [r3, #12]
	current_time.temperatureC=current_time.temperatureC/256;
   110a2:	4b16      	ldr	r3, [pc, #88]	; (110fc <get_time+0xfc>)
   110a4:	68da      	ldr	r2, [r3, #12]
   110a6:	4b17      	ldr	r3, [pc, #92]	; (11104 <get_time+0x104>)
   110a8:	2187      	movs	r1, #135	; 0x87
   110aa:	05c9      	lsls	r1, r1, #23
   110ac:	1c10      	adds	r0, r2, #0
   110ae:	4798      	blx	r3
   110b0:	1c03      	adds	r3, r0, #0
   110b2:	1c1a      	adds	r2, r3, #0
   110b4:	4b11      	ldr	r3, [pc, #68]	; (110fc <get_time+0xfc>)
   110b6:	60da      	str	r2, [r3, #12]
	current_time.temperatureF=current_time.temperatureC*1.8+32;
   110b8:	4b10      	ldr	r3, [pc, #64]	; (110fc <get_time+0xfc>)
   110ba:	68da      	ldr	r2, [r3, #12]
   110bc:	4b12      	ldr	r3, [pc, #72]	; (11108 <get_time+0x108>)
   110be:	1c10      	adds	r0, r2, #0
   110c0:	4798      	blx	r3
   110c2:	4c12      	ldr	r4, [pc, #72]	; (1110c <get_time+0x10c>)
   110c4:	4a12      	ldr	r2, [pc, #72]	; (11110 <get_time+0x110>)
   110c6:	4b13      	ldr	r3, [pc, #76]	; (11114 <get_time+0x114>)
   110c8:	47a0      	blx	r4
   110ca:	0003      	movs	r3, r0
   110cc:	000c      	movs	r4, r1
   110ce:	0018      	movs	r0, r3
   110d0:	0021      	movs	r1, r4
   110d2:	4c11      	ldr	r4, [pc, #68]	; (11118 <get_time+0x118>)
   110d4:	2200      	movs	r2, #0
   110d6:	4b11      	ldr	r3, [pc, #68]	; (1111c <get_time+0x11c>)
   110d8:	47a0      	blx	r4
   110da:	0003      	movs	r3, r0
   110dc:	000c      	movs	r4, r1
   110de:	0019      	movs	r1, r3
   110e0:	0022      	movs	r2, r4
   110e2:	4b0f      	ldr	r3, [pc, #60]	; (11120 <get_time+0x120>)
   110e4:	0008      	movs	r0, r1
   110e6:	0011      	movs	r1, r2
   110e8:	4798      	blx	r3
   110ea:	1c02      	adds	r2, r0, #0
   110ec:	4b03      	ldr	r3, [pc, #12]	; (110fc <get_time+0xfc>)
   110ee:	611a      	str	r2, [r3, #16]
	
}
   110f0:	46c0      	nop			; (mov r8, r8)
   110f2:	46bd      	mov	sp, r7
   110f4:	b007      	add	sp, #28
   110f6:	bd90      	pop	{r4, r7, pc}
   110f8:	00010669 	.word	0x00010669
   110fc:	200011f4 	.word	0x200011f4
   11100:	00021d91 	.word	0x00021d91
   11104:	000213f9 	.word	0x000213f9
   11108:	00023a0d 	.word	0x00023a0d
   1110c:	00022d45 	.word	0x00022d45
   11110:	cccccccd 	.word	0xcccccccd
   11114:	3ffccccc 	.word	0x3ffccccc
   11118:	00021ebd 	.word	0x00021ebd
   1111c:	40400000 	.word	0x40400000
   11120:	00023ab1 	.word	0x00023ab1

00011124 <set_time>:

void set_time(void){
   11124:	b590      	push	{r4, r7, lr}
   11126:	b087      	sub	sp, #28
   11128:	af00      	add	r7, sp, #0
	uint8_t temp_buf[20];

	temp_buf[0]=0x00;
   1112a:	1d3b      	adds	r3, r7, #4
   1112c:	2200      	movs	r2, #0
   1112e:	701a      	strb	r2, [r3, #0]

	//Parse Data
	temp_buf[0x01]=temp_time.seconds;
   11130:	4b12      	ldr	r3, [pc, #72]	; (1117c <set_time+0x58>)
   11132:	781a      	ldrb	r2, [r3, #0]
   11134:	1d3b      	adds	r3, r7, #4
   11136:	705a      	strb	r2, [r3, #1]
	temp_buf[0x02]=temp_time.minutes;
   11138:	4b10      	ldr	r3, [pc, #64]	; (1117c <set_time+0x58>)
   1113a:	785a      	ldrb	r2, [r3, #1]
   1113c:	1d3b      	adds	r3, r7, #4
   1113e:	709a      	strb	r2, [r3, #2]
	temp_buf[0x03]=temp_time.hours;
   11140:	4b0e      	ldr	r3, [pc, #56]	; (1117c <set_time+0x58>)
   11142:	789a      	ldrb	r2, [r3, #2]
   11144:	1d3b      	adds	r3, r7, #4
   11146:	70da      	strb	r2, [r3, #3]
	temp_buf[0x04]=temp_time.day;
   11148:	4b0c      	ldr	r3, [pc, #48]	; (1117c <set_time+0x58>)
   1114a:	78da      	ldrb	r2, [r3, #3]
   1114c:	1d3b      	adds	r3, r7, #4
   1114e:	711a      	strb	r2, [r3, #4]
	temp_buf[0x05]=temp_time.date;
   11150:	4b0a      	ldr	r3, [pc, #40]	; (1117c <set_time+0x58>)
   11152:	791a      	ldrb	r2, [r3, #4]
   11154:	1d3b      	adds	r3, r7, #4
   11156:	715a      	strb	r2, [r3, #5]
	temp_buf[0x06]=temp_time.month;
   11158:	4b08      	ldr	r3, [pc, #32]	; (1117c <set_time+0x58>)
   1115a:	795a      	ldrb	r2, [r3, #5]
   1115c:	1d3b      	adds	r3, r7, #4
   1115e:	719a      	strb	r2, [r3, #6]
	temp_buf[0x07]=temp_time.year;
   11160:	4b06      	ldr	r3, [pc, #24]	; (1117c <set_time+0x58>)
   11162:	799a      	ldrb	r2, [r3, #6]
   11164:	1d3b      	adds	r3, r7, #4
   11166:	71da      	strb	r2, [r3, #7]
	i2c_read_write(writep, rtc_add, temp_buf, 8);
   11168:	1d3a      	adds	r2, r7, #4
   1116a:	2308      	movs	r3, #8
   1116c:	2168      	movs	r1, #104	; 0x68
   1116e:	2001      	movs	r0, #1
   11170:	4c03      	ldr	r4, [pc, #12]	; (11180 <set_time+0x5c>)
   11172:	47a0      	blx	r4
	
}
   11174:	46c0      	nop			; (mov r8, r8)
   11176:	46bd      	mov	sp, r7
   11178:	b007      	add	sp, #28
   1117a:	bd90      	pop	{r4, r7, pc}
   1117c:	20001244 	.word	0x20001244
   11180:	00010669 	.word	0x00010669

00011184 <ext_osc_onoff>:


void ext_osc_onoff(bool onoff){
   11184:	b590      	push	{r4, r7, lr}
   11186:	b085      	sub	sp, #20
   11188:	af00      	add	r7, sp, #0
   1118a:	0002      	movs	r2, r0
   1118c:	1dfb      	adds	r3, r7, #7
   1118e:	701a      	strb	r2, [r3, #0]
	uint8_t temp_buf[3];
	
	temp_buf[0] = 0x0E;
   11190:	230c      	movs	r3, #12
   11192:	18fb      	adds	r3, r7, r3
   11194:	220e      	movs	r2, #14
   11196:	701a      	strb	r2, [r3, #0]
	//Register 0x0Eh 
	//0b00000100 = 0x04
	temp_buf[1] = 0x04;
   11198:	230c      	movs	r3, #12
   1119a:	18fb      	adds	r3, r7, r3
   1119c:	2204      	movs	r2, #4
   1119e:	705a      	strb	r2, [r3, #1]
	//Register 0x0Fh
	//0b00001000 = 0x08; 32kHz osc on
	//0b00000000 = 0x00; 32kHz osc off
	if (onoff){
   111a0:	1dfb      	adds	r3, r7, #7
   111a2:	781b      	ldrb	r3, [r3, #0]
   111a4:	2b00      	cmp	r3, #0
   111a6:	d004      	beq.n	111b2 <ext_osc_onoff+0x2e>
		temp_buf[2] = 0x08;
   111a8:	230c      	movs	r3, #12
   111aa:	18fb      	adds	r3, r7, r3
   111ac:	2208      	movs	r2, #8
   111ae:	709a      	strb	r2, [r3, #2]
   111b0:	e003      	b.n	111ba <ext_osc_onoff+0x36>
	}else{
		temp_buf[2] = 0x00;
   111b2:	230c      	movs	r3, #12
   111b4:	18fb      	adds	r3, r7, r3
   111b6:	2200      	movs	r2, #0
   111b8:	709a      	strb	r2, [r3, #2]
	}
	
	i2c_read_write(writep, rtc_add, temp_buf, 3);
   111ba:	230c      	movs	r3, #12
   111bc:	18fa      	adds	r2, r7, r3
   111be:	2303      	movs	r3, #3
   111c0:	2168      	movs	r1, #104	; 0x68
   111c2:	2001      	movs	r0, #1
   111c4:	4c02      	ldr	r4, [pc, #8]	; (111d0 <ext_osc_onoff+0x4c>)
   111c6:	47a0      	blx	r4
	
	
}
   111c8:	46c0      	nop			; (mov r8, r8)
   111ca:	46bd      	mov	sp, r7
   111cc:	b005      	add	sp, #20
   111ce:	bd90      	pop	{r4, r7, pc}
   111d0:	00010669 	.word	0x00010669

000111d4 <gen_posix_time>:



uint32_t gen_posix_time(struct Time *time_inst){
   111d4:	b590      	push	{r4, r7, lr}
   111d6:	b08b      	sub	sp, #44	; 0x2c
   111d8:	af00      	add	r7, sp, #0
   111da:	6078      	str	r0, [r7, #4]
	//https://stackoverflow.com/questions/21975472/how-to-calculate-epoch-day
	uint32_t posix_time;
	uint32_t tm_sec, tm_min, tm_hour, tm_yday, tm_year, tm_month;
	
	tm_sec = bcd2dec(time_inst->seconds);
   111dc:	687b      	ldr	r3, [r7, #4]
   111de:	781b      	ldrb	r3, [r3, #0]
   111e0:	0018      	movs	r0, r3
   111e2:	4b34      	ldr	r3, [pc, #208]	; (112b4 <gen_posix_time+0xe0>)
   111e4:	4798      	blx	r3
   111e6:	0003      	movs	r3, r0
   111e8:	627b      	str	r3, [r7, #36]	; 0x24
	tm_min = bcd2dec(time_inst->minutes);
   111ea:	687b      	ldr	r3, [r7, #4]
   111ec:	785b      	ldrb	r3, [r3, #1]
   111ee:	0018      	movs	r0, r3
   111f0:	4b30      	ldr	r3, [pc, #192]	; (112b4 <gen_posix_time+0xe0>)
   111f2:	4798      	blx	r3
   111f4:	0003      	movs	r3, r0
   111f6:	623b      	str	r3, [r7, #32]
	tm_hour = bcd2dec(time_inst->hours);
   111f8:	687b      	ldr	r3, [r7, #4]
   111fa:	789b      	ldrb	r3, [r3, #2]
   111fc:	0018      	movs	r0, r3
   111fe:	4b2d      	ldr	r3, [pc, #180]	; (112b4 <gen_posix_time+0xe0>)
   11200:	4798      	blx	r3
   11202:	0003      	movs	r3, r0
   11204:	61fb      	str	r3, [r7, #28]
	tm_year = bcd2dec(time_inst->year)+100;//  Years since 1900, time_inst->year is years since 2000
   11206:	687b      	ldr	r3, [r7, #4]
   11208:	799b      	ldrb	r3, [r3, #6]
   1120a:	0018      	movs	r0, r3
   1120c:	4b29      	ldr	r3, [pc, #164]	; (112b4 <gen_posix_time+0xe0>)
   1120e:	4798      	blx	r3
   11210:	0003      	movs	r3, r0
   11212:	3364      	adds	r3, #100	; 0x64
   11214:	61bb      	str	r3, [r7, #24]
	tm_yday = bcd2dec(time_inst->date);
   11216:	687b      	ldr	r3, [r7, #4]
   11218:	791b      	ldrb	r3, [r3, #4]
   1121a:	0018      	movs	r0, r3
   1121c:	4b25      	ldr	r3, [pc, #148]	; (112b4 <gen_posix_time+0xe0>)
   1121e:	4798      	blx	r3
   11220:	0003      	movs	r3, r0
   11222:	617b      	str	r3, [r7, #20]
	tm_month = bcd2dec(time_inst->month);
   11224:	687b      	ldr	r3, [r7, #4]
   11226:	795b      	ldrb	r3, [r3, #5]
   11228:	0018      	movs	r0, r3
   1122a:	4b22      	ldr	r3, [pc, #136]	; (112b4 <gen_posix_time+0xe0>)
   1122c:	4798      	blx	r3
   1122e:	0003      	movs	r3, r0
   11230:	613b      	str	r3, [r7, #16]
	
	//  Find days since year roll-over
	// On "days_per_month_acc" index, subtract 1 to account for 0-base index.
	// Subtract 1 from "tm_yday" to account for referencing.  i.e. January 3, 12 PM is 2.5 days into year
	// Subtract 1 to account for 0-base index of month_index
	tm_yday = tm_yday + days_per_month_acc[(tm_month-1)] -1;
   11232:	693b      	ldr	r3, [r7, #16]
   11234:	1e5a      	subs	r2, r3, #1
   11236:	4b20      	ldr	r3, [pc, #128]	; (112b8 <gen_posix_time+0xe4>)
   11238:	0092      	lsls	r2, r2, #2
   1123a:	58d2      	ldr	r2, [r2, r3]
   1123c:	697b      	ldr	r3, [r7, #20]
   1123e:	18d3      	adds	r3, r2, r3
   11240:	3b01      	subs	r3, #1
   11242:	617b      	str	r3, [r7, #20]
	
	
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
   11244:	6a3a      	ldr	r2, [r7, #32]
   11246:	0013      	movs	r3, r2
   11248:	011b      	lsls	r3, r3, #4
   1124a:	1a9b      	subs	r3, r3, r2
   1124c:	009b      	lsls	r3, r3, #2
   1124e:	0019      	movs	r1, r3
   11250:	69fb      	ldr	r3, [r7, #28]
   11252:	22e1      	movs	r2, #225	; 0xe1
   11254:	0112      	lsls	r2, r2, #4
   11256:	4353      	muls	r3, r2
   11258:	18ca      	adds	r2, r1, r3
   1125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1125c:	18d2      	adds	r2, r2, r3
   1125e:	697b      	ldr	r3, [r7, #20]
   11260:	4916      	ldr	r1, [pc, #88]	; (112bc <gen_posix_time+0xe8>)
   11262:	434b      	muls	r3, r1
   11264:	18d2      	adds	r2, r2, r3
   11266:	69bb      	ldr	r3, [r7, #24]
   11268:	4915      	ldr	r1, [pc, #84]	; (112c0 <gen_posix_time+0xec>)
   1126a:	434b      	muls	r3, r1
   1126c:	18d3      	adds	r3, r2, r3
   1126e:	4a15      	ldr	r2, [pc, #84]	; (112c4 <gen_posix_time+0xf0>)
   11270:	4694      	mov	ip, r2
   11272:	4463      	add	r3, ip
   11274:	60fb      	str	r3, [r7, #12]
	//  Add adjustments for leap-years
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
   11276:	69bb      	ldr	r3, [r7, #24]
   11278:	3b45      	subs	r3, #69	; 0x45
   1127a:	089c      	lsrs	r4, r3, #2
   1127c:	69bb      	ldr	r3, [r7, #24]
   1127e:	1e5a      	subs	r2, r3, #1
   11280:	4b11      	ldr	r3, [pc, #68]	; (112c8 <gen_posix_time+0xf4>)
   11282:	2164      	movs	r1, #100	; 0x64
   11284:	0010      	movs	r0, r2
   11286:	4798      	blx	r3
   11288:	0003      	movs	r3, r0
   1128a:	1ae4      	subs	r4, r4, r3
   1128c:	69bb      	ldr	r3, [r7, #24]
   1128e:	332c      	adds	r3, #44	; 0x2c
   11290:	33ff      	adds	r3, #255	; 0xff
   11292:	0018      	movs	r0, r3
   11294:	4b0c      	ldr	r3, [pc, #48]	; (112c8 <gen_posix_time+0xf4>)
   11296:	22c8      	movs	r2, #200	; 0xc8
   11298:	0051      	lsls	r1, r2, #1
   1129a:	4798      	blx	r3
   1129c:	0003      	movs	r3, r0
   1129e:	18e3      	adds	r3, r4, r3
   112a0:	4a06      	ldr	r2, [pc, #24]	; (112bc <gen_posix_time+0xe8>)
   112a2:	4353      	muls	r3, r2
   112a4:	68fa      	ldr	r2, [r7, #12]
   112a6:	18d3      	adds	r3, r2, r3
   112a8:	60fb      	str	r3, [r7, #12]
	
	return posix_time;
   112aa:	68fb      	ldr	r3, [r7, #12]
	
	
	
	
}
   112ac:	0018      	movs	r0, r3
   112ae:	46bd      	mov	sp, r7
   112b0:	b00b      	add	sp, #44	; 0x2c
   112b2:	bd90      	pop	{r4, r7, pc}
   112b4:	000112cd 	.word	0x000112cd
   112b8:	200000b0 	.word	0x200000b0
   112bc:	00015180 	.word	0x00015180
   112c0:	01e13380 	.word	0x01e13380
   112c4:	7c6beb00 	.word	0x7c6beb00
   112c8:	00020bbd 	.word	0x00020bbd

000112cc <bcd2dec>:





uint32_t bcd2dec(uint8_t bcd_var){
   112cc:	b580      	push	{r7, lr}
   112ce:	b084      	sub	sp, #16
   112d0:	af00      	add	r7, sp, #0
   112d2:	0002      	movs	r2, r0
   112d4:	1dfb      	adds	r3, r7, #7
   112d6:	701a      	strb	r2, [r3, #0]
	uint8_t dec;
	dec = bcd_var & 0xF0;
   112d8:	230f      	movs	r3, #15
   112da:	18fb      	adds	r3, r7, r3
   112dc:	1dfa      	adds	r2, r7, #7
   112de:	7812      	ldrb	r2, [r2, #0]
   112e0:	210f      	movs	r1, #15
   112e2:	438a      	bics	r2, r1
   112e4:	701a      	strb	r2, [r3, #0]
	dec = dec>>4;
   112e6:	230f      	movs	r3, #15
   112e8:	18fb      	adds	r3, r7, r3
   112ea:	220f      	movs	r2, #15
   112ec:	18ba      	adds	r2, r7, r2
   112ee:	7812      	ldrb	r2, [r2, #0]
   112f0:	0912      	lsrs	r2, r2, #4
   112f2:	701a      	strb	r2, [r3, #0]
	dec = dec*10;
   112f4:	230f      	movs	r3, #15
   112f6:	18fa      	adds	r2, r7, r3
   112f8:	230f      	movs	r3, #15
   112fa:	18fb      	adds	r3, r7, r3
   112fc:	781b      	ldrb	r3, [r3, #0]
   112fe:	1c19      	adds	r1, r3, #0
   11300:	0089      	lsls	r1, r1, #2
   11302:	18cb      	adds	r3, r1, r3
   11304:	18db      	adds	r3, r3, r3
   11306:	7013      	strb	r3, [r2, #0]
	dec = dec + (bcd_var & 0x0F);
   11308:	1dfb      	adds	r3, r7, #7
   1130a:	781b      	ldrb	r3, [r3, #0]
   1130c:	220f      	movs	r2, #15
   1130e:	4013      	ands	r3, r2
   11310:	b2d9      	uxtb	r1, r3
   11312:	230f      	movs	r3, #15
   11314:	18fb      	adds	r3, r7, r3
   11316:	220f      	movs	r2, #15
   11318:	18ba      	adds	r2, r7, r2
   1131a:	7812      	ldrb	r2, [r2, #0]
   1131c:	188a      	adds	r2, r1, r2
   1131e:	701a      	strb	r2, [r3, #0]
	
	return dec;
   11320:	230f      	movs	r3, #15
   11322:	18fb      	adds	r3, r7, r3
   11324:	781b      	ldrb	r3, [r3, #0]
}
   11326:	0018      	movs	r0, r3
   11328:	46bd      	mov	sp, r7
   1132a:	b004      	add	sp, #16
   1132c:	bd80      	pop	{r7, pc}
	...

00011330 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   11330:	b590      	push	{r4, r7, lr}
   11332:	b085      	sub	sp, #20
   11334:	af00      	add	r7, sp, #0
   11336:	0002      	movs	r2, r0
   11338:	1dfb      	adds	r3, r7, #7
   1133a:	701a      	strb	r2, [r3, #0]
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   1133c:	1dfb      	adds	r3, r7, #7
   1133e:	781b      	ldrb	r3, [r3, #0]
   11340:	2b02      	cmp	r3, #2
   11342:	d901      	bls.n	11348 <disk_initialize+0x18>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   11344:	2301      	movs	r3, #1
   11346:	e029      	b.n	1139c <disk_initialize+0x6c>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   11348:	2300      	movs	r3, #0
   1134a:	60fb      	str	r3, [r7, #12]
   1134c:	e010      	b.n	11370 <disk_initialize+0x40>
		mem_status = mem_test_unit_ready(drv);
   1134e:	230b      	movs	r3, #11
   11350:	18fc      	adds	r4, r7, r3
   11352:	1dfb      	adds	r3, r7, #7
   11354:	781b      	ldrb	r3, [r3, #0]
   11356:	0018      	movs	r0, r3
   11358:	4b12      	ldr	r3, [pc, #72]	; (113a4 <disk_initialize+0x74>)
   1135a:	4798      	blx	r3
   1135c:	0003      	movs	r3, r0
   1135e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   11360:	230b      	movs	r3, #11
   11362:	18fb      	adds	r3, r7, r3
   11364:	781b      	ldrb	r3, [r3, #0]
   11366:	2b03      	cmp	r3, #3
   11368:	d106      	bne.n	11378 <disk_initialize+0x48>
	for (i = 0; i < 2; i ++) {
   1136a:	68fb      	ldr	r3, [r7, #12]
   1136c:	3301      	adds	r3, #1
   1136e:	60fb      	str	r3, [r7, #12]
   11370:	68fb      	ldr	r3, [r7, #12]
   11372:	2b01      	cmp	r3, #1
   11374:	ddeb      	ble.n	1134e <disk_initialize+0x1e>
   11376:	e000      	b.n	1137a <disk_initialize+0x4a>
			break;
   11378:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   1137a:	230b      	movs	r3, #11
   1137c:	18fb      	adds	r3, r7, r3
   1137e:	781b      	ldrb	r3, [r3, #0]
   11380:	2b00      	cmp	r3, #0
   11382:	d001      	beq.n	11388 <disk_initialize+0x58>
		return STA_NOINIT;
   11384:	2301      	movs	r3, #1
   11386:	e009      	b.n	1139c <disk_initialize+0x6c>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   11388:	1dfb      	adds	r3, r7, #7
   1138a:	781b      	ldrb	r3, [r3, #0]
   1138c:	0018      	movs	r0, r3
   1138e:	4b06      	ldr	r3, [pc, #24]	; (113a8 <disk_initialize+0x78>)
   11390:	4798      	blx	r3
   11392:	1e03      	subs	r3, r0, #0
   11394:	d001      	beq.n	1139a <disk_initialize+0x6a>
		return STA_PROTECT;
   11396:	2304      	movs	r3, #4
   11398:	e000      	b.n	1139c <disk_initialize+0x6c>
	}

	/* The memory should already be initialized */
	return 0;
   1139a:	2300      	movs	r3, #0
}
   1139c:	0018      	movs	r0, r3
   1139e:	46bd      	mov	sp, r7
   113a0:	b005      	add	sp, #20
   113a2:	bd90      	pop	{r4, r7, pc}
   113a4:	000065c5 	.word	0x000065c5
   113a8:	0000668d 	.word	0x0000668d

000113ac <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   113ac:	b580      	push	{r7, lr}
   113ae:	b082      	sub	sp, #8
   113b0:	af00      	add	r7, sp, #0
   113b2:	0002      	movs	r2, r0
   113b4:	1dfb      	adds	r3, r7, #7
   113b6:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   113b8:	1dfb      	adds	r3, r7, #7
   113ba:	781b      	ldrb	r3, [r3, #0]
   113bc:	0018      	movs	r0, r3
   113be:	4b08      	ldr	r3, [pc, #32]	; (113e0 <disk_status+0x34>)
   113c0:	4798      	blx	r3
   113c2:	1e03      	subs	r3, r0, #0
   113c4:	d002      	beq.n	113cc <disk_status+0x20>
   113c6:	2b02      	cmp	r3, #2
   113c8:	d002      	beq.n	113d0 <disk_status+0x24>
   113ca:	e003      	b.n	113d4 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   113cc:	2300      	movs	r3, #0
   113ce:	e002      	b.n	113d6 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   113d0:	2303      	movs	r3, #3
   113d2:	e000      	b.n	113d6 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   113d4:	2301      	movs	r3, #1
	}
}
   113d6:	0018      	movs	r0, r3
   113d8:	46bd      	mov	sp, r7
   113da:	b002      	add	sp, #8
   113dc:	bd80      	pop	{r7, pc}
   113de:	46c0      	nop			; (mov r8, r8)
   113e0:	000065c5 	.word	0x000065c5

000113e4 <disk_readp>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_readp(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   113e4:	b590      	push	{r4, r7, lr}
   113e6:	b089      	sub	sp, #36	; 0x24
   113e8:	af00      	add	r7, sp, #0
   113ea:	60b9      	str	r1, [r7, #8]
   113ec:	607a      	str	r2, [r7, #4]
   113ee:	0019      	movs	r1, r3
   113f0:	230f      	movs	r3, #15
   113f2:	18fb      	adds	r3, r7, r3
   113f4:	1c02      	adds	r2, r0, #0
   113f6:	701a      	strb	r2, [r3, #0]
   113f8:	230e      	movs	r3, #14
   113fa:	18fb      	adds	r3, r7, r3
   113fc:	1c0a      	adds	r2, r1, #0
   113fe:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	
	
	uint8_t uc_sector_size = mem_sector_size(drv);
   11400:	231b      	movs	r3, #27
   11402:	18fc      	adds	r4, r7, r3
   11404:	230f      	movs	r3, #15
   11406:	18fb      	adds	r3, r7, r3
   11408:	781b      	ldrb	r3, [r3, #0]
   1140a:	0018      	movs	r0, r3
   1140c:	4b28      	ldr	r3, [pc, #160]	; (114b0 <disk_readp+0xcc>)
   1140e:	4798      	blx	r3
   11410:	0003      	movs	r3, r0
   11412:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   11414:	231b      	movs	r3, #27
   11416:	18fb      	adds	r3, r7, r3
   11418:	781b      	ldrb	r3, [r3, #0]
   1141a:	2b00      	cmp	r3, #0
   1141c:	d101      	bne.n	11422 <disk_readp+0x3e>
		return RES_ERROR;
   1141e:	2301      	movs	r3, #1
   11420:	e042      	b.n	114a8 <disk_readp+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   11422:	2314      	movs	r3, #20
   11424:	18fa      	adds	r2, r7, r3
   11426:	230f      	movs	r3, #15
   11428:	18fb      	adds	r3, r7, r3
   1142a:	781b      	ldrb	r3, [r3, #0]
   1142c:	0011      	movs	r1, r2
   1142e:	0018      	movs	r0, r3
   11430:	4b20      	ldr	r3, [pc, #128]	; (114b4 <disk_readp+0xd0>)
   11432:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   11434:	230e      	movs	r3, #14
   11436:	18fb      	adds	r3, r7, r3
   11438:	781b      	ldrb	r3, [r3, #0]
   1143a:	221b      	movs	r2, #27
   1143c:	18ba      	adds	r2, r7, r2
   1143e:	7812      	ldrb	r2, [r2, #0]
   11440:	4353      	muls	r3, r2
   11442:	001a      	movs	r2, r3
   11444:	687b      	ldr	r3, [r7, #4]
   11446:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   11448:	697b      	ldr	r3, [r7, #20]
   1144a:	3301      	adds	r3, #1
   1144c:	211b      	movs	r1, #27
   1144e:	1879      	adds	r1, r7, r1
   11450:	7809      	ldrb	r1, [r1, #0]
   11452:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   11454:	429a      	cmp	r2, r3
   11456:	d901      	bls.n	1145c <disk_readp+0x78>
		return RES_PARERR;
   11458:	2304      	movs	r3, #4
   1145a:	e025      	b.n	114a8 <disk_readp+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   1145c:	2300      	movs	r3, #0
   1145e:	61fb      	str	r3, [r7, #28]
   11460:	e01b      	b.n	1149a <disk_readp+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   11462:	231b      	movs	r3, #27
   11464:	18fb      	adds	r3, r7, r3
   11466:	781b      	ldrb	r3, [r3, #0]
   11468:	69fa      	ldr	r2, [r7, #28]
   1146a:	435a      	muls	r2, r3
   1146c:	687b      	ldr	r3, [r7, #4]
   1146e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   11470:	231b      	movs	r3, #27
   11472:	18fb      	adds	r3, r7, r3
   11474:	781b      	ldrb	r3, [r3, #0]
   11476:	69fa      	ldr	r2, [r7, #28]
   11478:	4353      	muls	r3, r2
   1147a:	025b      	lsls	r3, r3, #9
   1147c:	68ba      	ldr	r2, [r7, #8]
   1147e:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   11480:	230f      	movs	r3, #15
   11482:	18fb      	adds	r3, r7, r3
   11484:	781b      	ldrb	r3, [r3, #0]
   11486:	0018      	movs	r0, r3
   11488:	4b0b      	ldr	r3, [pc, #44]	; (114b8 <disk_readp+0xd4>)
   1148a:	4798      	blx	r3
   1148c:	1e03      	subs	r3, r0, #0
   1148e:	d001      	beq.n	11494 <disk_readp+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   11490:	2301      	movs	r3, #1
   11492:	e009      	b.n	114a8 <disk_readp+0xc4>
	for (i = 0; i < count; i++) {
   11494:	69fb      	ldr	r3, [r7, #28]
   11496:	3301      	adds	r3, #1
   11498:	61fb      	str	r3, [r7, #28]
   1149a:	230e      	movs	r3, #14
   1149c:	18fb      	adds	r3, r7, r3
   1149e:	781a      	ldrb	r2, [r3, #0]
   114a0:	69fb      	ldr	r3, [r7, #28]
   114a2:	429a      	cmp	r2, r3
   114a4:	d8dd      	bhi.n	11462 <disk_readp+0x7e>
		}
	}

	return RES_OK;
   114a6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   114a8:	0018      	movs	r0, r3
   114aa:	46bd      	mov	sp, r7
   114ac:	b009      	add	sp, #36	; 0x24
   114ae:	bd90      	pop	{r4, r7, pc}
   114b0:	0000665d 	.word	0x0000665d
   114b4:	0000660d 	.word	0x0000660d
   114b8:	000066d9 	.word	0x000066d9

000114bc <disk_writep>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_writep(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   114bc:	b590      	push	{r4, r7, lr}
   114be:	b089      	sub	sp, #36	; 0x24
   114c0:	af00      	add	r7, sp, #0
   114c2:	60b9      	str	r1, [r7, #8]
   114c4:	607a      	str	r2, [r7, #4]
   114c6:	0019      	movs	r1, r3
   114c8:	230f      	movs	r3, #15
   114ca:	18fb      	adds	r3, r7, r3
   114cc:	1c02      	adds	r2, r0, #0
   114ce:	701a      	strb	r2, [r3, #0]
   114d0:	230e      	movs	r3, #14
   114d2:	18fb      	adds	r3, r7, r3
   114d4:	1c0a      	adds	r2, r1, #0
   114d6:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   114d8:	231b      	movs	r3, #27
   114da:	18fc      	adds	r4, r7, r3
   114dc:	230f      	movs	r3, #15
   114de:	18fb      	adds	r3, r7, r3
   114e0:	781b      	ldrb	r3, [r3, #0]
   114e2:	0018      	movs	r0, r3
   114e4:	4b28      	ldr	r3, [pc, #160]	; (11588 <disk_writep+0xcc>)
   114e6:	4798      	blx	r3
   114e8:	0003      	movs	r3, r0
   114ea:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   114ec:	231b      	movs	r3, #27
   114ee:	18fb      	adds	r3, r7, r3
   114f0:	781b      	ldrb	r3, [r3, #0]
   114f2:	2b00      	cmp	r3, #0
   114f4:	d101      	bne.n	114fa <disk_writep+0x3e>
		return RES_ERROR;
   114f6:	2301      	movs	r3, #1
   114f8:	e042      	b.n	11580 <disk_writep+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   114fa:	2314      	movs	r3, #20
   114fc:	18fa      	adds	r2, r7, r3
   114fe:	230f      	movs	r3, #15
   11500:	18fb      	adds	r3, r7, r3
   11502:	781b      	ldrb	r3, [r3, #0]
   11504:	0011      	movs	r1, r2
   11506:	0018      	movs	r0, r3
   11508:	4b20      	ldr	r3, [pc, #128]	; (1158c <disk_writep+0xd0>)
   1150a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   1150c:	230e      	movs	r3, #14
   1150e:	18fb      	adds	r3, r7, r3
   11510:	781b      	ldrb	r3, [r3, #0]
   11512:	221b      	movs	r2, #27
   11514:	18ba      	adds	r2, r7, r2
   11516:	7812      	ldrb	r2, [r2, #0]
   11518:	4353      	muls	r3, r2
   1151a:	001a      	movs	r2, r3
   1151c:	687b      	ldr	r3, [r7, #4]
   1151e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   11520:	697b      	ldr	r3, [r7, #20]
   11522:	3301      	adds	r3, #1
   11524:	211b      	movs	r1, #27
   11526:	1879      	adds	r1, r7, r1
   11528:	7809      	ldrb	r1, [r1, #0]
   1152a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   1152c:	429a      	cmp	r2, r3
   1152e:	d901      	bls.n	11534 <disk_writep+0x78>
		return RES_PARERR;
   11530:	2304      	movs	r3, #4
   11532:	e025      	b.n	11580 <disk_writep+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   11534:	2300      	movs	r3, #0
   11536:	61fb      	str	r3, [r7, #28]
   11538:	e01b      	b.n	11572 <disk_writep+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   1153a:	231b      	movs	r3, #27
   1153c:	18fb      	adds	r3, r7, r3
   1153e:	781b      	ldrb	r3, [r3, #0]
   11540:	69fa      	ldr	r2, [r7, #28]
   11542:	435a      	muls	r2, r3
   11544:	687b      	ldr	r3, [r7, #4]
   11546:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   11548:	231b      	movs	r3, #27
   1154a:	18fb      	adds	r3, r7, r3
   1154c:	781b      	ldrb	r3, [r3, #0]
   1154e:	69fa      	ldr	r2, [r7, #28]
   11550:	4353      	muls	r3, r2
   11552:	025b      	lsls	r3, r3, #9
   11554:	68ba      	ldr	r2, [r7, #8]
   11556:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   11558:	230f      	movs	r3, #15
   1155a:	18fb      	adds	r3, r7, r3
   1155c:	781b      	ldrb	r3, [r3, #0]
   1155e:	0018      	movs	r0, r3
   11560:	4b0b      	ldr	r3, [pc, #44]	; (11590 <disk_writep+0xd4>)
   11562:	4798      	blx	r3
   11564:	1e03      	subs	r3, r0, #0
   11566:	d001      	beq.n	1156c <disk_writep+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   11568:	2301      	movs	r3, #1
   1156a:	e009      	b.n	11580 <disk_writep+0xc4>
	for (i = 0; i < count; i++) {
   1156c:	69fb      	ldr	r3, [r7, #28]
   1156e:	3301      	adds	r3, #1
   11570:	61fb      	str	r3, [r7, #28]
   11572:	230e      	movs	r3, #14
   11574:	18fb      	adds	r3, r7, r3
   11576:	781a      	ldrb	r2, [r3, #0]
   11578:	69fb      	ldr	r3, [r7, #28]
   1157a:	429a      	cmp	r2, r3
   1157c:	d8dd      	bhi.n	1153a <disk_writep+0x7e>
		}
	}

	return RES_OK;
   1157e:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   11580:	0018      	movs	r0, r3
   11582:	46bd      	mov	sp, r7
   11584:	b009      	add	sp, #36	; 0x24
   11586:	bd90      	pop	{r4, r7, pc}
   11588:	0000665d 	.word	0x0000665d
   1158c:	0000660d 	.word	0x0000660d
   11590:	00006735 	.word	0x00006735

00011594 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   11594:	b590      	push	{r4, r7, lr}
   11596:	b085      	sub	sp, #20
   11598:	af00      	add	r7, sp, #0
   1159a:	603a      	str	r2, [r7, #0]
   1159c:	1dfb      	adds	r3, r7, #7
   1159e:	1c02      	adds	r2, r0, #0
   115a0:	701a      	strb	r2, [r3, #0]
   115a2:	1dbb      	adds	r3, r7, #6
   115a4:	1c0a      	adds	r2, r1, #0
   115a6:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   115a8:	230f      	movs	r3, #15
   115aa:	18fb      	adds	r3, r7, r3
   115ac:	2204      	movs	r2, #4
   115ae:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   115b0:	1dbb      	adds	r3, r7, #6
   115b2:	781b      	ldrb	r3, [r3, #0]
   115b4:	2b01      	cmp	r3, #1
   115b6:	d00f      	beq.n	115d8 <disk_ioctl+0x44>
   115b8:	dc02      	bgt.n	115c0 <disk_ioctl+0x2c>
   115ba:	2b00      	cmp	r3, #0
   115bc:	d044      	beq.n	11648 <disk_ioctl+0xb4>
   115be:	e054      	b.n	1166a <disk_ioctl+0xd6>
   115c0:	2b02      	cmp	r3, #2
   115c2:	d01a      	beq.n	115fa <disk_ioctl+0x66>
   115c4:	2b03      	cmp	r3, #3
   115c6:	d150      	bne.n	1166a <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   115c8:	683b      	ldr	r3, [r7, #0]
   115ca:	2201      	movs	r2, #1
   115cc:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   115ce:	230f      	movs	r3, #15
   115d0:	18fb      	adds	r3, r7, r3
   115d2:	2200      	movs	r2, #0
   115d4:	701a      	strb	r2, [r3, #0]
		break;
   115d6:	e04c      	b.n	11672 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   115d8:	2308      	movs	r3, #8
   115da:	18fa      	adds	r2, r7, r3
   115dc:	1dfb      	adds	r3, r7, #7
   115de:	781b      	ldrb	r3, [r3, #0]
   115e0:	0011      	movs	r1, r2
   115e2:	0018      	movs	r0, r3
   115e4:	4b26      	ldr	r3, [pc, #152]	; (11680 <disk_ioctl+0xec>)
   115e6:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   115e8:	68bb      	ldr	r3, [r7, #8]
   115ea:	1c5a      	adds	r2, r3, #1
   115ec:	683b      	ldr	r3, [r7, #0]
   115ee:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   115f0:	230f      	movs	r3, #15
   115f2:	18fb      	adds	r3, r7, r3
   115f4:	2200      	movs	r2, #0
   115f6:	701a      	strb	r2, [r3, #0]
	}
	break;
   115f8:	e03b      	b.n	11672 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   115fa:	230e      	movs	r3, #14
   115fc:	18fc      	adds	r4, r7, r3
   115fe:	1dfb      	adds	r3, r7, #7
   11600:	781b      	ldrb	r3, [r3, #0]
   11602:	0018      	movs	r0, r3
   11604:	4b1f      	ldr	r3, [pc, #124]	; (11684 <disk_ioctl+0xf0>)
   11606:	4798      	blx	r3
   11608:	0003      	movs	r3, r0
   1160a:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   1160c:	230e      	movs	r3, #14
   1160e:	18fb      	adds	r3, r7, r3
   11610:	781b      	ldrb	r3, [r3, #0]
   11612:	2b01      	cmp	r3, #1
   11614:	d010      	beq.n	11638 <disk_ioctl+0xa4>
   11616:	230e      	movs	r3, #14
   11618:	18fb      	adds	r3, r7, r3
   1161a:	781b      	ldrb	r3, [r3, #0]
   1161c:	2b02      	cmp	r3, #2
   1161e:	d00b      	beq.n	11638 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   11620:	230e      	movs	r3, #14
   11622:	18fb      	adds	r3, r7, r3
   11624:	781b      	ldrb	r3, [r3, #0]
   11626:	2b04      	cmp	r3, #4
   11628:	d006      	beq.n	11638 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   1162a:	230e      	movs	r3, #14
   1162c:	18fb      	adds	r3, r7, r3
   1162e:	781b      	ldrb	r3, [r3, #0]
   11630:	2b08      	cmp	r3, #8
   11632:	d001      	beq.n	11638 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   11634:	2301      	movs	r3, #1
   11636:	e01f      	b.n	11678 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   11638:	683b      	ldr	r3, [r7, #0]
   1163a:	2200      	movs	r2, #0
   1163c:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   1163e:	230f      	movs	r3, #15
   11640:	18fb      	adds	r3, r7, r3
   11642:	2200      	movs	r2, #0
   11644:	701a      	strb	r2, [r3, #0]
	}
	break;
   11646:	e014      	b.n	11672 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   11648:	1dfb      	adds	r3, r7, #7
   1164a:	781b      	ldrb	r3, [r3, #0]
   1164c:	0018      	movs	r0, r3
   1164e:	4b0e      	ldr	r3, [pc, #56]	; (11688 <disk_ioctl+0xf4>)
   11650:	4798      	blx	r3
   11652:	1e03      	subs	r3, r0, #0
   11654:	d104      	bne.n	11660 <disk_ioctl+0xcc>
			res = RES_OK;
   11656:	230f      	movs	r3, #15
   11658:	18fb      	adds	r3, r7, r3
   1165a:	2200      	movs	r2, #0
   1165c:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   1165e:	e008      	b.n	11672 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   11660:	230f      	movs	r3, #15
   11662:	18fb      	adds	r3, r7, r3
   11664:	2203      	movs	r2, #3
   11666:	701a      	strb	r2, [r3, #0]
		break;
   11668:	e003      	b.n	11672 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   1166a:	230f      	movs	r3, #15
   1166c:	18fb      	adds	r3, r7, r3
   1166e:	2204      	movs	r2, #4
   11670:	701a      	strb	r2, [r3, #0]
	}

	return res;
   11672:	230f      	movs	r3, #15
   11674:	18fb      	adds	r3, r7, r3
   11676:	781b      	ldrb	r3, [r3, #0]
}
   11678:	0018      	movs	r0, r3
   1167a:	46bd      	mov	sp, r7
   1167c:	b005      	add	sp, #20
   1167e:	bd90      	pop	{r4, r7, pc}
   11680:	0000660d 	.word	0x0000660d
   11684:	0000665d 	.word	0x0000665d
   11688:	000065c5 	.word	0x000065c5

0001168c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   1168c:	b590      	push	{r4, r7, lr}
   1168e:	b083      	sub	sp, #12
   11690:	af00      	add	r7, sp, #0

	//  Get current time from external RTC	
	//get_time(); //commented out; always performed to get posix time stamp and should match
	
	// Format into FAT time stamp format
	ul_time = ((bcd2dec(current_time.year) +20 ) << 25)
   11692:	4b1b      	ldr	r3, [pc, #108]	; (11700 <get_fattime+0x74>)
   11694:	799b      	ldrb	r3, [r3, #6]
   11696:	0018      	movs	r0, r3
   11698:	4b1a      	ldr	r3, [pc, #104]	; (11704 <get_fattime+0x78>)
   1169a:	4798      	blx	r3
   1169c:	0003      	movs	r3, r0
   1169e:	3314      	adds	r3, #20
   116a0:	065c      	lsls	r4, r3, #25
			| (bcd2dec(current_time.month) << 21)
   116a2:	4b17      	ldr	r3, [pc, #92]	; (11700 <get_fattime+0x74>)
   116a4:	795b      	ldrb	r3, [r3, #5]
   116a6:	0018      	movs	r0, r3
   116a8:	4b16      	ldr	r3, [pc, #88]	; (11704 <get_fattime+0x78>)
   116aa:	4798      	blx	r3
   116ac:	0003      	movs	r3, r0
   116ae:	055b      	lsls	r3, r3, #21
   116b0:	431c      	orrs	r4, r3
			| (bcd2dec(current_time.date) << 16)
   116b2:	4b13      	ldr	r3, [pc, #76]	; (11700 <get_fattime+0x74>)
   116b4:	791b      	ldrb	r3, [r3, #4]
   116b6:	0018      	movs	r0, r3
   116b8:	4b12      	ldr	r3, [pc, #72]	; (11704 <get_fattime+0x78>)
   116ba:	4798      	blx	r3
   116bc:	0003      	movs	r3, r0
   116be:	041b      	lsls	r3, r3, #16
   116c0:	431c      	orrs	r4, r3
			| (bcd2dec(current_time.hours) << 11)
   116c2:	4b0f      	ldr	r3, [pc, #60]	; (11700 <get_fattime+0x74>)
   116c4:	789b      	ldrb	r3, [r3, #2]
   116c6:	0018      	movs	r0, r3
   116c8:	4b0e      	ldr	r3, [pc, #56]	; (11704 <get_fattime+0x78>)
   116ca:	4798      	blx	r3
   116cc:	0003      	movs	r3, r0
   116ce:	02db      	lsls	r3, r3, #11
   116d0:	431c      	orrs	r4, r3
			| (bcd2dec(current_time.minutes) << 5)
   116d2:	4b0b      	ldr	r3, [pc, #44]	; (11700 <get_fattime+0x74>)
   116d4:	785b      	ldrb	r3, [r3, #1]
   116d6:	0018      	movs	r0, r3
   116d8:	4b0a      	ldr	r3, [pc, #40]	; (11704 <get_fattime+0x78>)
   116da:	4798      	blx	r3
   116dc:	0003      	movs	r3, r0
   116de:	015b      	lsls	r3, r3, #5
   116e0:	431c      	orrs	r4, r3
			| ((bcd2dec(current_time.seconds) >> 1) << 0);
   116e2:	4b07      	ldr	r3, [pc, #28]	; (11700 <get_fattime+0x74>)
   116e4:	781b      	ldrb	r3, [r3, #0]
   116e6:	0018      	movs	r0, r3
   116e8:	4b06      	ldr	r3, [pc, #24]	; (11704 <get_fattime+0x78>)
   116ea:	4798      	blx	r3
   116ec:	0003      	movs	r3, r0
   116ee:	085b      	lsrs	r3, r3, #1
	ul_time = ((bcd2dec(current_time.year) +20 ) << 25)
   116f0:	4323      	orrs	r3, r4
   116f2:	607b      	str	r3, [r7, #4]

	return ul_time;
   116f4:	687b      	ldr	r3, [r7, #4]
}
   116f6:	0018      	movs	r0, r3
   116f8:	46bd      	mov	sp, r7
   116fa:	b003      	add	sp, #12
   116fc:	bd90      	pop	{r4, r7, pc}
   116fe:	46c0      	nop			; (mov r8, r8)
   11700:	200011f4 	.word	0x200011f4
   11704:	000112cd 	.word	0x000112cd

00011708 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
   11708:	b580      	push	{r7, lr}
   1170a:	b084      	sub	sp, #16
   1170c:	af00      	add	r7, sp, #0
   1170e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
   11710:	687b      	ldr	r3, [r7, #4]
   11712:	3301      	adds	r3, #1
   11714:	781a      	ldrb	r2, [r3, #0]
   11716:	230e      	movs	r3, #14
   11718:	18fb      	adds	r3, r7, r3
   1171a:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
   1171c:	230e      	movs	r3, #14
   1171e:	18fb      	adds	r3, r7, r3
   11720:	881b      	ldrh	r3, [r3, #0]
   11722:	021b      	lsls	r3, r3, #8
   11724:	b21a      	sxth	r2, r3
   11726:	687b      	ldr	r3, [r7, #4]
   11728:	781b      	ldrb	r3, [r3, #0]
   1172a:	b21b      	sxth	r3, r3
   1172c:	4313      	orrs	r3, r2
   1172e:	b21a      	sxth	r2, r3
   11730:	230e      	movs	r3, #14
   11732:	18fb      	adds	r3, r7, r3
   11734:	801a      	strh	r2, [r3, #0]
	return rv;
   11736:	230e      	movs	r3, #14
   11738:	18fb      	adds	r3, r7, r3
   1173a:	881b      	ldrh	r3, [r3, #0]
}
   1173c:	0018      	movs	r0, r3
   1173e:	46bd      	mov	sp, r7
   11740:	b004      	add	sp, #16
   11742:	bd80      	pop	{r7, pc}

00011744 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
   11744:	b580      	push	{r7, lr}
   11746:	b084      	sub	sp, #16
   11748:	af00      	add	r7, sp, #0
   1174a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
   1174c:	687b      	ldr	r3, [r7, #4]
   1174e:	3303      	adds	r3, #3
   11750:	781b      	ldrb	r3, [r3, #0]
   11752:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
   11754:	68fb      	ldr	r3, [r7, #12]
   11756:	021b      	lsls	r3, r3, #8
   11758:	687a      	ldr	r2, [r7, #4]
   1175a:	3202      	adds	r2, #2
   1175c:	7812      	ldrb	r2, [r2, #0]
   1175e:	4313      	orrs	r3, r2
   11760:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
   11762:	68fb      	ldr	r3, [r7, #12]
   11764:	021b      	lsls	r3, r3, #8
   11766:	687a      	ldr	r2, [r7, #4]
   11768:	3201      	adds	r2, #1
   1176a:	7812      	ldrb	r2, [r2, #0]
   1176c:	4313      	orrs	r3, r2
   1176e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
   11770:	68fb      	ldr	r3, [r7, #12]
   11772:	021b      	lsls	r3, r3, #8
   11774:	687a      	ldr	r2, [r7, #4]
   11776:	7812      	ldrb	r2, [r2, #0]
   11778:	4313      	orrs	r3, r2
   1177a:	60fb      	str	r3, [r7, #12]
	return rv;
   1177c:	68fb      	ldr	r3, [r7, #12]
}
   1177e:	0018      	movs	r0, r3
   11780:	46bd      	mov	sp, r7
   11782:	b004      	add	sp, #16
   11784:	bd80      	pop	{r7, pc}

00011786 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
   11786:	b580      	push	{r7, lr}
   11788:	b082      	sub	sp, #8
   1178a:	af00      	add	r7, sp, #0
   1178c:	6078      	str	r0, [r7, #4]
   1178e:	000a      	movs	r2, r1
   11790:	1cbb      	adds	r3, r7, #2
   11792:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   11794:	687b      	ldr	r3, [r7, #4]
   11796:	1c5a      	adds	r2, r3, #1
   11798:	607a      	str	r2, [r7, #4]
   1179a:	1cba      	adds	r2, r7, #2
   1179c:	8812      	ldrh	r2, [r2, #0]
   1179e:	b2d2      	uxtb	r2, r2
   117a0:	701a      	strb	r2, [r3, #0]
   117a2:	1cbb      	adds	r3, r7, #2
   117a4:	1cba      	adds	r2, r7, #2
   117a6:	8812      	ldrh	r2, [r2, #0]
   117a8:	0a12      	lsrs	r2, r2, #8
   117aa:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
   117ac:	687b      	ldr	r3, [r7, #4]
   117ae:	1c5a      	adds	r2, r3, #1
   117b0:	607a      	str	r2, [r7, #4]
   117b2:	1cba      	adds	r2, r7, #2
   117b4:	8812      	ldrh	r2, [r2, #0]
   117b6:	b2d2      	uxtb	r2, r2
   117b8:	701a      	strb	r2, [r3, #0]
}
   117ba:	46c0      	nop			; (mov r8, r8)
   117bc:	46bd      	mov	sp, r7
   117be:	b002      	add	sp, #8
   117c0:	bd80      	pop	{r7, pc}

000117c2 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
   117c2:	b580      	push	{r7, lr}
   117c4:	b082      	sub	sp, #8
   117c6:	af00      	add	r7, sp, #0
   117c8:	6078      	str	r0, [r7, #4]
   117ca:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   117cc:	687b      	ldr	r3, [r7, #4]
   117ce:	1c5a      	adds	r2, r3, #1
   117d0:	607a      	str	r2, [r7, #4]
   117d2:	683a      	ldr	r2, [r7, #0]
   117d4:	b2d2      	uxtb	r2, r2
   117d6:	701a      	strb	r2, [r3, #0]
   117d8:	683b      	ldr	r3, [r7, #0]
   117da:	0a1b      	lsrs	r3, r3, #8
   117dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   117de:	687b      	ldr	r3, [r7, #4]
   117e0:	1c5a      	adds	r2, r3, #1
   117e2:	607a      	str	r2, [r7, #4]
   117e4:	683a      	ldr	r2, [r7, #0]
   117e6:	b2d2      	uxtb	r2, r2
   117e8:	701a      	strb	r2, [r3, #0]
   117ea:	683b      	ldr	r3, [r7, #0]
   117ec:	0a1b      	lsrs	r3, r3, #8
   117ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   117f0:	687b      	ldr	r3, [r7, #4]
   117f2:	1c5a      	adds	r2, r3, #1
   117f4:	607a      	str	r2, [r7, #4]
   117f6:	683a      	ldr	r2, [r7, #0]
   117f8:	b2d2      	uxtb	r2, r2
   117fa:	701a      	strb	r2, [r3, #0]
   117fc:	683b      	ldr	r3, [r7, #0]
   117fe:	0a1b      	lsrs	r3, r3, #8
   11800:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
   11802:	687b      	ldr	r3, [r7, #4]
   11804:	1c5a      	adds	r2, r3, #1
   11806:	607a      	str	r2, [r7, #4]
   11808:	683a      	ldr	r2, [r7, #0]
   1180a:	b2d2      	uxtb	r2, r2
   1180c:	701a      	strb	r2, [r3, #0]
}
   1180e:	46c0      	nop			; (mov r8, r8)
   11810:	46bd      	mov	sp, r7
   11812:	b002      	add	sp, #8
   11814:	bd80      	pop	{r7, pc}

00011816 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
   11816:	b580      	push	{r7, lr}
   11818:	b086      	sub	sp, #24
   1181a:	af00      	add	r7, sp, #0
   1181c:	60f8      	str	r0, [r7, #12]
   1181e:	60b9      	str	r1, [r7, #8]
   11820:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   11822:	68fb      	ldr	r3, [r7, #12]
   11824:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   11826:	68bb      	ldr	r3, [r7, #8]
   11828:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
   1182a:	687b      	ldr	r3, [r7, #4]
   1182c:	2b00      	cmp	r3, #0
   1182e:	d00d      	beq.n	1184c <mem_cpy+0x36>
		do {
			*d++ = *s++;
   11830:	697b      	ldr	r3, [r7, #20]
   11832:	1c5a      	adds	r2, r3, #1
   11834:	617a      	str	r2, [r7, #20]
   11836:	693a      	ldr	r2, [r7, #16]
   11838:	1c51      	adds	r1, r2, #1
   1183a:	6139      	str	r1, [r7, #16]
   1183c:	7812      	ldrb	r2, [r2, #0]
   1183e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
   11840:	687b      	ldr	r3, [r7, #4]
   11842:	3b01      	subs	r3, #1
   11844:	607b      	str	r3, [r7, #4]
   11846:	687b      	ldr	r3, [r7, #4]
   11848:	2b00      	cmp	r3, #0
   1184a:	d1f1      	bne.n	11830 <mem_cpy+0x1a>
	}
}
   1184c:	46c0      	nop			; (mov r8, r8)
   1184e:	46bd      	mov	sp, r7
   11850:	b006      	add	sp, #24
   11852:	bd80      	pop	{r7, pc}

00011854 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
   11854:	b580      	push	{r7, lr}
   11856:	b086      	sub	sp, #24
   11858:	af00      	add	r7, sp, #0
   1185a:	60f8      	str	r0, [r7, #12]
   1185c:	60b9      	str	r1, [r7, #8]
   1185e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   11860:	68fb      	ldr	r3, [r7, #12]
   11862:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
   11864:	697b      	ldr	r3, [r7, #20]
   11866:	1c5a      	adds	r2, r3, #1
   11868:	617a      	str	r2, [r7, #20]
   1186a:	68ba      	ldr	r2, [r7, #8]
   1186c:	b2d2      	uxtb	r2, r2
   1186e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
   11870:	687b      	ldr	r3, [r7, #4]
   11872:	3b01      	subs	r3, #1
   11874:	607b      	str	r3, [r7, #4]
   11876:	687b      	ldr	r3, [r7, #4]
   11878:	2b00      	cmp	r3, #0
   1187a:	d1f3      	bne.n	11864 <mem_set+0x10>
}
   1187c:	46c0      	nop			; (mov r8, r8)
   1187e:	46bd      	mov	sp, r7
   11880:	b006      	add	sp, #24
   11882:	bd80      	pop	{r7, pc}

00011884 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
   11884:	b580      	push	{r7, lr}
   11886:	b088      	sub	sp, #32
   11888:	af00      	add	r7, sp, #0
   1188a:	60f8      	str	r0, [r7, #12]
   1188c:	60b9      	str	r1, [r7, #8]
   1188e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   11890:	68fb      	ldr	r3, [r7, #12]
   11892:	61fb      	str	r3, [r7, #28]
   11894:	68bb      	ldr	r3, [r7, #8]
   11896:	61bb      	str	r3, [r7, #24]
	int r = 0;
   11898:	2300      	movs	r3, #0
   1189a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
   1189c:	69fb      	ldr	r3, [r7, #28]
   1189e:	1c5a      	adds	r2, r3, #1
   118a0:	61fa      	str	r2, [r7, #28]
   118a2:	781b      	ldrb	r3, [r3, #0]
   118a4:	0019      	movs	r1, r3
   118a6:	69bb      	ldr	r3, [r7, #24]
   118a8:	1c5a      	adds	r2, r3, #1
   118aa:	61ba      	str	r2, [r7, #24]
   118ac:	781b      	ldrb	r3, [r3, #0]
   118ae:	1acb      	subs	r3, r1, r3
   118b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
   118b2:	687b      	ldr	r3, [r7, #4]
   118b4:	3b01      	subs	r3, #1
   118b6:	607b      	str	r3, [r7, #4]
   118b8:	687b      	ldr	r3, [r7, #4]
   118ba:	2b00      	cmp	r3, #0
   118bc:	d002      	beq.n	118c4 <mem_cmp+0x40>
   118be:	697b      	ldr	r3, [r7, #20]
   118c0:	2b00      	cmp	r3, #0
   118c2:	d0eb      	beq.n	1189c <mem_cmp+0x18>

	return r;
   118c4:	697b      	ldr	r3, [r7, #20]
}
   118c6:	0018      	movs	r0, r3
   118c8:	46bd      	mov	sp, r7
   118ca:	b008      	add	sp, #32
   118cc:	bd80      	pop	{r7, pc}

000118ce <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
   118ce:	b580      	push	{r7, lr}
   118d0:	b082      	sub	sp, #8
   118d2:	af00      	add	r7, sp, #0
   118d4:	6078      	str	r0, [r7, #4]
   118d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   118d8:	e002      	b.n	118e0 <chk_chr+0x12>
   118da:	687b      	ldr	r3, [r7, #4]
   118dc:	3301      	adds	r3, #1
   118de:	607b      	str	r3, [r7, #4]
   118e0:	687b      	ldr	r3, [r7, #4]
   118e2:	781b      	ldrb	r3, [r3, #0]
   118e4:	2b00      	cmp	r3, #0
   118e6:	d005      	beq.n	118f4 <chk_chr+0x26>
   118e8:	687b      	ldr	r3, [r7, #4]
   118ea:	781b      	ldrb	r3, [r3, #0]
   118ec:	001a      	movs	r2, r3
   118ee:	683b      	ldr	r3, [r7, #0]
   118f0:	429a      	cmp	r2, r3
   118f2:	d1f2      	bne.n	118da <chk_chr+0xc>
	return *str;
   118f4:	687b      	ldr	r3, [r7, #4]
   118f6:	781b      	ldrb	r3, [r3, #0]
}
   118f8:	0018      	movs	r0, r3
   118fa:	46bd      	mov	sp, r7
   118fc:	b002      	add	sp, #8
   118fe:	bd80      	pop	{r7, pc}

00011900 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
   11900:	b580      	push	{r7, lr}
   11902:	b082      	sub	sp, #8
   11904:	af00      	add	r7, sp, #0
   11906:	0002      	movs	r2, r0
   11908:	1dfb      	adds	r3, r7, #7
   1190a:	701a      	strb	r2, [r3, #0]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
   1190c:	1dfb      	adds	r3, r7, #7
   1190e:	781b      	ldrb	r3, [r3, #0]
   11910:	2b00      	cmp	r3, #0
   11912:	d001      	beq.n	11918 <dbc_1st+0x18>
   11914:	2300      	movs	r3, #0
   11916:	e000      	b.n	1191a <dbc_1st+0x1a>
#endif
	return 0;
   11918:	2300      	movs	r3, #0
}
   1191a:	0018      	movs	r0, r3
   1191c:	46bd      	mov	sp, r7
   1191e:	b002      	add	sp, #8
   11920:	bd80      	pop	{r7, pc}

00011922 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
   11922:	b580      	push	{r7, lr}
   11924:	b082      	sub	sp, #8
   11926:	af00      	add	r7, sp, #0
   11928:	0002      	movs	r2, r0
   1192a:	1dfb      	adds	r3, r7, #7
   1192c:	701a      	strb	r2, [r3, #0]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
   1192e:	1dfb      	adds	r3, r7, #7
   11930:	781b      	ldrb	r3, [r3, #0]
   11932:	2b00      	cmp	r3, #0
   11934:	d001      	beq.n	1193a <dbc_2nd+0x18>
   11936:	2300      	movs	r3, #0
   11938:	e000      	b.n	1193c <dbc_2nd+0x1a>
#endif
	return 0;
   1193a:	2300      	movs	r3, #0
}
   1193c:	0018      	movs	r0, r3
   1193e:	46bd      	mov	sp, r7
   11940:	b002      	add	sp, #8
   11942:	bd80      	pop	{r7, pc}

00011944 <tchar2uni>:

/* Get a character from TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
   11944:	b590      	push	{r4, r7, lr}
   11946:	b087      	sub	sp, #28
   11948:	af00      	add	r7, sp, #0
   1194a:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
   1194c:	687b      	ldr	r3, [r7, #4]
   1194e:	681b      	ldr	r3, [r3, #0]
   11950:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
   11952:	697b      	ldr	r3, [r7, #20]
   11954:	1c5a      	adds	r2, r3, #1
   11956:	617a      	str	r2, [r7, #20]
   11958:	781a      	ldrb	r2, [r3, #0]
   1195a:	2312      	movs	r3, #18
   1195c:	18fb      	adds	r3, r7, r3
   1195e:	801a      	strh	r2, [r3, #0]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
   11960:	2312      	movs	r3, #18
   11962:	18fb      	adds	r3, r7, r3
   11964:	881b      	ldrh	r3, [r3, #0]
   11966:	b2db      	uxtb	r3, r3
   11968:	0018      	movs	r0, r3
   1196a:	4b25      	ldr	r3, [pc, #148]	; (11a00 <tchar2uni+0xbc>)
   1196c:	4798      	blx	r3
   1196e:	1e03      	subs	r3, r0, #0
   11970:	d01e      	beq.n	119b0 <tchar2uni+0x6c>
		b = (BYTE)*p++;			/* Get 2nd byte */
   11972:	697b      	ldr	r3, [r7, #20]
   11974:	1c5a      	adds	r2, r3, #1
   11976:	617a      	str	r2, [r7, #20]
   11978:	2211      	movs	r2, #17
   1197a:	18ba      	adds	r2, r7, r2
   1197c:	781b      	ldrb	r3, [r3, #0]
   1197e:	7013      	strb	r3, [r2, #0]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
   11980:	2311      	movs	r3, #17
   11982:	18fb      	adds	r3, r7, r3
   11984:	781b      	ldrb	r3, [r3, #0]
   11986:	0018      	movs	r0, r3
   11988:	4b1e      	ldr	r3, [pc, #120]	; (11a04 <tchar2uni+0xc0>)
   1198a:	4798      	blx	r3
   1198c:	1e03      	subs	r3, r0, #0
   1198e:	d102      	bne.n	11996 <tchar2uni+0x52>
   11990:	2301      	movs	r3, #1
   11992:	425b      	negs	r3, r3
   11994:	e02f      	b.n	119f6 <tchar2uni+0xb2>
		wc = (wc << 8) + b;		/* Make a DBC */
   11996:	2312      	movs	r3, #18
   11998:	18fb      	adds	r3, r7, r3
   1199a:	881b      	ldrh	r3, [r3, #0]
   1199c:	021b      	lsls	r3, r3, #8
   1199e:	b299      	uxth	r1, r3
   119a0:	2311      	movs	r3, #17
   119a2:	18fb      	adds	r3, r7, r3
   119a4:	781b      	ldrb	r3, [r3, #0]
   119a6:	b29a      	uxth	r2, r3
   119a8:	2312      	movs	r3, #18
   119aa:	18fb      	adds	r3, r7, r3
   119ac:	188a      	adds	r2, r1, r2
   119ae:	801a      	strh	r2, [r3, #0]
	}
	if (wc != 0) {
   119b0:	2312      	movs	r3, #18
   119b2:	18fb      	adds	r3, r7, r3
   119b4:	881b      	ldrh	r3, [r3, #0]
   119b6:	2b00      	cmp	r3, #0
   119b8:	d015      	beq.n	119e6 <tchar2uni+0xa2>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
   119ba:	2312      	movs	r3, #18
   119bc:	18fc      	adds	r4, r7, r3
   119be:	23b6      	movs	r3, #182	; 0xb6
   119c0:	33ff      	adds	r3, #255	; 0xff
   119c2:	001a      	movs	r2, r3
   119c4:	2312      	movs	r3, #18
   119c6:	18fb      	adds	r3, r7, r3
   119c8:	881b      	ldrh	r3, [r3, #0]
   119ca:	0011      	movs	r1, r2
   119cc:	0018      	movs	r0, r3
   119ce:	4b0e      	ldr	r3, [pc, #56]	; (11a08 <tchar2uni+0xc4>)
   119d0:	4798      	blx	r3
   119d2:	0003      	movs	r3, r0
   119d4:	8023      	strh	r3, [r4, #0]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
   119d6:	2312      	movs	r3, #18
   119d8:	18fb      	adds	r3, r7, r3
   119da:	881b      	ldrh	r3, [r3, #0]
   119dc:	2b00      	cmp	r3, #0
   119de:	d102      	bne.n	119e6 <tchar2uni+0xa2>
   119e0:	2301      	movs	r3, #1
   119e2:	425b      	negs	r3, r3
   119e4:	e007      	b.n	119f6 <tchar2uni+0xb2>
	}
	uc = wc;
   119e6:	2312      	movs	r3, #18
   119e8:	18fb      	adds	r3, r7, r3
   119ea:	881b      	ldrh	r3, [r3, #0]
   119ec:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
   119ee:	687b      	ldr	r3, [r7, #4]
   119f0:	697a      	ldr	r2, [r7, #20]
   119f2:	601a      	str	r2, [r3, #0]
	return uc;
   119f4:	68fb      	ldr	r3, [r7, #12]
}
   119f6:	0018      	movs	r0, r3
   119f8:	46bd      	mov	sp, r7
   119fa:	b007      	add	sp, #28
   119fc:	bd90      	pop	{r4, r7, pc}
   119fe:	46c0      	nop			; (mov r8, r8)
   11a00:	00011901 	.word	0x00011901
   11a04:	00011923 	.word	0x00011923
   11a08:	000149b5 	.word	0x000149b5

00011a0c <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
   11a0c:	b590      	push	{r4, r7, lr}
   11a0e:	b085      	sub	sp, #20
   11a10:	af00      	add	r7, sp, #0
   11a12:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
   11a14:	230f      	movs	r3, #15
   11a16:	18fb      	adds	r3, r7, r3
   11a18:	2200      	movs	r2, #0
   11a1a:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Is the disk access window dirty */
   11a1c:	687b      	ldr	r3, [r7, #4]
   11a1e:	78db      	ldrb	r3, [r3, #3]
   11a20:	2b00      	cmp	r3, #0
   11a22:	d02d      	beq.n	11a80 <sync_window+0x74>
		if (disk_writep(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
   11a24:	687b      	ldr	r3, [r7, #4]
   11a26:	7858      	ldrb	r0, [r3, #1]
   11a28:	687b      	ldr	r3, [r7, #4]
   11a2a:	3334      	adds	r3, #52	; 0x34
   11a2c:	0019      	movs	r1, r3
   11a2e:	687b      	ldr	r3, [r7, #4]
   11a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   11a32:	2301      	movs	r3, #1
   11a34:	4c16      	ldr	r4, [pc, #88]	; (11a90 <sync_window+0x84>)
   11a36:	47a0      	blx	r4
   11a38:	1e03      	subs	r3, r0, #0
   11a3a:	d11d      	bne.n	11a78 <sync_window+0x6c>
			fs->wflag = 0;	/* Clear window dirty flag */
   11a3c:	687b      	ldr	r3, [r7, #4]
   11a3e:	2200      	movs	r2, #0
   11a40:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   11a42:	687b      	ldr	r3, [r7, #4]
   11a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   11a46:	687b      	ldr	r3, [r7, #4]
   11a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11a4a:	1ad2      	subs	r2, r2, r3
   11a4c:	687b      	ldr	r3, [r7, #4]
   11a4e:	69db      	ldr	r3, [r3, #28]
   11a50:	429a      	cmp	r2, r3
   11a52:	d215      	bcs.n	11a80 <sync_window+0x74>
				if (fs->n_fats == 2) disk_writep(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
   11a54:	687b      	ldr	r3, [r7, #4]
   11a56:	789b      	ldrb	r3, [r3, #2]
   11a58:	2b02      	cmp	r3, #2
   11a5a:	d111      	bne.n	11a80 <sync_window+0x74>
   11a5c:	687b      	ldr	r3, [r7, #4]
   11a5e:	7858      	ldrb	r0, [r3, #1]
   11a60:	687b      	ldr	r3, [r7, #4]
   11a62:	3334      	adds	r3, #52	; 0x34
   11a64:	0019      	movs	r1, r3
   11a66:	687b      	ldr	r3, [r7, #4]
   11a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   11a6a:	687b      	ldr	r3, [r7, #4]
   11a6c:	69db      	ldr	r3, [r3, #28]
   11a6e:	18d2      	adds	r2, r2, r3
   11a70:	2301      	movs	r3, #1
   11a72:	4c07      	ldr	r4, [pc, #28]	; (11a90 <sync_window+0x84>)
   11a74:	47a0      	blx	r4
   11a76:	e003      	b.n	11a80 <sync_window+0x74>
			}
		} else {
			res = FR_DISK_ERR;
   11a78:	230f      	movs	r3, #15
   11a7a:	18fb      	adds	r3, r7, r3
   11a7c:	2201      	movs	r2, #1
   11a7e:	701a      	strb	r2, [r3, #0]
		}
	}
	return res;
   11a80:	230f      	movs	r3, #15
   11a82:	18fb      	adds	r3, r7, r3
   11a84:	781b      	ldrb	r3, [r3, #0]
}
   11a86:	0018      	movs	r0, r3
   11a88:	46bd      	mov	sp, r7
   11a8a:	b005      	add	sp, #20
   11a8c:	bd90      	pop	{r4, r7, pc}
   11a8e:	46c0      	nop			; (mov r8, r8)
   11a90:	000114bd 	.word	0x000114bd

00011a94 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
   11a94:	b590      	push	{r4, r7, lr}
   11a96:	b085      	sub	sp, #20
   11a98:	af00      	add	r7, sp, #0
   11a9a:	6078      	str	r0, [r7, #4]
   11a9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
   11a9e:	230f      	movs	r3, #15
   11aa0:	18fb      	adds	r3, r7, r3
   11aa2:	2200      	movs	r2, #0
   11aa4:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
   11aa6:	687b      	ldr	r3, [r7, #4]
   11aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   11aaa:	683b      	ldr	r3, [r7, #0]
   11aac:	429a      	cmp	r2, r3
   11aae:	d021      	beq.n	11af4 <move_window+0x60>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
   11ab0:	230f      	movs	r3, #15
   11ab2:	18fc      	adds	r4, r7, r3
   11ab4:	687b      	ldr	r3, [r7, #4]
   11ab6:	0018      	movs	r0, r3
   11ab8:	4b12      	ldr	r3, [pc, #72]	; (11b04 <move_window+0x70>)
   11aba:	4798      	blx	r3
   11abc:	0003      	movs	r3, r0
   11abe:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
   11ac0:	230f      	movs	r3, #15
   11ac2:	18fb      	adds	r3, r7, r3
   11ac4:	781b      	ldrb	r3, [r3, #0]
   11ac6:	2b00      	cmp	r3, #0
   11ac8:	d114      	bne.n	11af4 <move_window+0x60>
			if (disk_readp(fs->pdrv, fs->win, sector, 1) != RES_OK) {//Added "p" Kfausnight 11/24/2018
   11aca:	687b      	ldr	r3, [r7, #4]
   11acc:	7858      	ldrb	r0, [r3, #1]
   11ace:	687b      	ldr	r3, [r7, #4]
   11ad0:	3334      	adds	r3, #52	; 0x34
   11ad2:	0019      	movs	r1, r3
   11ad4:	683a      	ldr	r2, [r7, #0]
   11ad6:	2301      	movs	r3, #1
   11ad8:	4c0b      	ldr	r4, [pc, #44]	; (11b08 <move_window+0x74>)
   11ada:	47a0      	blx	r4
   11adc:	1e03      	subs	r3, r0, #0
   11ade:	d006      	beq.n	11aee <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
   11ae0:	2301      	movs	r3, #1
   11ae2:	425b      	negs	r3, r3
   11ae4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
   11ae6:	230f      	movs	r3, #15
   11ae8:	18fb      	adds	r3, r7, r3
   11aea:	2201      	movs	r2, #1
   11aec:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
   11aee:	687b      	ldr	r3, [r7, #4]
   11af0:	683a      	ldr	r2, [r7, #0]
   11af2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
   11af4:	230f      	movs	r3, #15
   11af6:	18fb      	adds	r3, r7, r3
   11af8:	781b      	ldrb	r3, [r3, #0]
}
   11afa:	0018      	movs	r0, r3
   11afc:	46bd      	mov	sp, r7
   11afe:	b005      	add	sp, #20
   11b00:	bd90      	pop	{r4, r7, pc}
   11b02:	46c0      	nop			; (mov r8, r8)
   11b04:	00011a0d 	.word	0x00011a0d
   11b08:	000113e5 	.word	0x000113e5

00011b0c <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
   11b0c:	b590      	push	{r4, r7, lr}
   11b0e:	b085      	sub	sp, #20
   11b10:	af00      	add	r7, sp, #0
   11b12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
   11b14:	230f      	movs	r3, #15
   11b16:	18fc      	adds	r4, r7, r3
   11b18:	687b      	ldr	r3, [r7, #4]
   11b1a:	0018      	movs	r0, r3
   11b1c:	4b37      	ldr	r3, [pc, #220]	; (11bfc <sync_fs+0xf0>)
   11b1e:	4798      	blx	r3
   11b20:	0003      	movs	r3, r0
   11b22:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   11b24:	230f      	movs	r3, #15
   11b26:	18fb      	adds	r3, r7, r3
   11b28:	781b      	ldrb	r3, [r3, #0]
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	d15e      	bne.n	11bec <sync_fs+0xe0>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
   11b2e:	687b      	ldr	r3, [r7, #4]
   11b30:	781b      	ldrb	r3, [r3, #0]
   11b32:	2b03      	cmp	r3, #3
   11b34:	d14d      	bne.n	11bd2 <sync_fs+0xc6>
   11b36:	687b      	ldr	r3, [r7, #4]
   11b38:	791b      	ldrb	r3, [r3, #4]
   11b3a:	2b01      	cmp	r3, #1
   11b3c:	d149      	bne.n	11bd2 <sync_fs+0xc6>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
   11b3e:	687b      	ldr	r3, [r7, #4]
   11b40:	3334      	adds	r3, #52	; 0x34
   11b42:	0018      	movs	r0, r3
   11b44:	2380      	movs	r3, #128	; 0x80
   11b46:	009b      	lsls	r3, r3, #2
   11b48:	001a      	movs	r2, r3
   11b4a:	2100      	movs	r1, #0
   11b4c:	4b2c      	ldr	r3, [pc, #176]	; (11c00 <sync_fs+0xf4>)
   11b4e:	4798      	blx	r3
			st_word(fs->win + BS_55AA, 0xAA55);
   11b50:	687b      	ldr	r3, [r7, #4]
   11b52:	3334      	adds	r3, #52	; 0x34
   11b54:	33ff      	adds	r3, #255	; 0xff
   11b56:	33ff      	adds	r3, #255	; 0xff
   11b58:	4a2a      	ldr	r2, [pc, #168]	; (11c04 <sync_fs+0xf8>)
   11b5a:	0011      	movs	r1, r2
   11b5c:	0018      	movs	r0, r3
   11b5e:	4b2a      	ldr	r3, [pc, #168]	; (11c08 <sync_fs+0xfc>)
   11b60:	4798      	blx	r3
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
   11b62:	687b      	ldr	r3, [r7, #4]
   11b64:	3334      	adds	r3, #52	; 0x34
   11b66:	4a29      	ldr	r2, [pc, #164]	; (11c0c <sync_fs+0x100>)
   11b68:	0011      	movs	r1, r2
   11b6a:	0018      	movs	r0, r3
   11b6c:	4b28      	ldr	r3, [pc, #160]	; (11c10 <sync_fs+0x104>)
   11b6e:	4798      	blx	r3
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
   11b70:	687b      	ldr	r3, [r7, #4]
   11b72:	3334      	adds	r3, #52	; 0x34
   11b74:	33e5      	adds	r3, #229	; 0xe5
   11b76:	33ff      	adds	r3, #255	; 0xff
   11b78:	4a26      	ldr	r2, [pc, #152]	; (11c14 <sync_fs+0x108>)
   11b7a:	0011      	movs	r1, r2
   11b7c:	0018      	movs	r0, r3
   11b7e:	4b24      	ldr	r3, [pc, #144]	; (11c10 <sync_fs+0x104>)
   11b80:	4798      	blx	r3
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
   11b82:	687b      	ldr	r3, [r7, #4]
   11b84:	3334      	adds	r3, #52	; 0x34
   11b86:	33e9      	adds	r3, #233	; 0xe9
   11b88:	33ff      	adds	r3, #255	; 0xff
   11b8a:	001a      	movs	r2, r3
   11b8c:	687b      	ldr	r3, [r7, #4]
   11b8e:	695b      	ldr	r3, [r3, #20]
   11b90:	0019      	movs	r1, r3
   11b92:	0010      	movs	r0, r2
   11b94:	4b1e      	ldr	r3, [pc, #120]	; (11c10 <sync_fs+0x104>)
   11b96:	4798      	blx	r3
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
   11b98:	687b      	ldr	r3, [r7, #4]
   11b9a:	3334      	adds	r3, #52	; 0x34
   11b9c:	33ed      	adds	r3, #237	; 0xed
   11b9e:	33ff      	adds	r3, #255	; 0xff
   11ba0:	001a      	movs	r2, r3
   11ba2:	687b      	ldr	r3, [r7, #4]
   11ba4:	691b      	ldr	r3, [r3, #16]
   11ba6:	0019      	movs	r1, r3
   11ba8:	0010      	movs	r0, r2
   11baa:	4b19      	ldr	r3, [pc, #100]	; (11c10 <sync_fs+0x104>)
   11bac:	4798      	blx	r3
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
   11bae:	687b      	ldr	r3, [r7, #4]
   11bb0:	6a1b      	ldr	r3, [r3, #32]
   11bb2:	1c5a      	adds	r2, r3, #1
   11bb4:	687b      	ldr	r3, [r7, #4]
   11bb6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_writep(fs->pdrv, fs->win, fs->winsect, 1);
   11bb8:	687b      	ldr	r3, [r7, #4]
   11bba:	7858      	ldrb	r0, [r3, #1]
   11bbc:	687b      	ldr	r3, [r7, #4]
   11bbe:	3334      	adds	r3, #52	; 0x34
   11bc0:	0019      	movs	r1, r3
   11bc2:	687b      	ldr	r3, [r7, #4]
   11bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   11bc6:	2301      	movs	r3, #1
   11bc8:	4c13      	ldr	r4, [pc, #76]	; (11c18 <sync_fs+0x10c>)
   11bca:	47a0      	blx	r4
			fs->fsi_flag = 0;
   11bcc:	687b      	ldr	r3, [r7, #4]
   11bce:	2200      	movs	r2, #0
   11bd0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
   11bd2:	687b      	ldr	r3, [r7, #4]
   11bd4:	785b      	ldrb	r3, [r3, #1]
   11bd6:	2200      	movs	r2, #0
   11bd8:	2100      	movs	r1, #0
   11bda:	0018      	movs	r0, r3
   11bdc:	4b0f      	ldr	r3, [pc, #60]	; (11c1c <sync_fs+0x110>)
   11bde:	4798      	blx	r3
   11be0:	1e03      	subs	r3, r0, #0
   11be2:	d003      	beq.n	11bec <sync_fs+0xe0>
   11be4:	230f      	movs	r3, #15
   11be6:	18fb      	adds	r3, r7, r3
   11be8:	2201      	movs	r2, #1
   11bea:	701a      	strb	r2, [r3, #0]
	}

	return res;
   11bec:	230f      	movs	r3, #15
   11bee:	18fb      	adds	r3, r7, r3
   11bf0:	781b      	ldrb	r3, [r3, #0]
}
   11bf2:	0018      	movs	r0, r3
   11bf4:	46bd      	mov	sp, r7
   11bf6:	b005      	add	sp, #20
   11bf8:	bd90      	pop	{r4, r7, pc}
   11bfa:	46c0      	nop			; (mov r8, r8)
   11bfc:	00011a0d 	.word	0x00011a0d
   11c00:	00011855 	.word	0x00011855
   11c04:	0000aa55 	.word	0x0000aa55
   11c08:	00011787 	.word	0x00011787
   11c0c:	41615252 	.word	0x41615252
   11c10:	000117c3 	.word	0x000117c3
   11c14:	61417272 	.word	0x61417272
   11c18:	000114bd 	.word	0x000114bd
   11c1c:	00011595 	.word	0x00011595

00011c20 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
   11c20:	b580      	push	{r7, lr}
   11c22:	b082      	sub	sp, #8
   11c24:	af00      	add	r7, sp, #0
   11c26:	6078      	str	r0, [r7, #4]
   11c28:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
   11c2a:	683b      	ldr	r3, [r7, #0]
   11c2c:	3b02      	subs	r3, #2
   11c2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   11c30:	687b      	ldr	r3, [r7, #4]
   11c32:	699b      	ldr	r3, [r3, #24]
   11c34:	1e9a      	subs	r2, r3, #2
   11c36:	683b      	ldr	r3, [r7, #0]
   11c38:	429a      	cmp	r2, r3
   11c3a:	d801      	bhi.n	11c40 <clst2sect+0x20>
   11c3c:	2300      	movs	r3, #0
   11c3e:	e007      	b.n	11c50 <clst2sect+0x30>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
   11c40:	687b      	ldr	r3, [r7, #4]
   11c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11c44:	687b      	ldr	r3, [r7, #4]
   11c46:	895b      	ldrh	r3, [r3, #10]
   11c48:	0019      	movs	r1, r3
   11c4a:	683b      	ldr	r3, [r7, #0]
   11c4c:	434b      	muls	r3, r1
   11c4e:	18d3      	adds	r3, r2, r3
}
   11c50:	0018      	movs	r0, r3
   11c52:	46bd      	mov	sp, r7
   11c54:	b002      	add	sp, #8
   11c56:	bd80      	pop	{r7, pc}

00011c58 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
   11c58:	b580      	push	{r7, lr}
   11c5a:	b086      	sub	sp, #24
   11c5c:	af00      	add	r7, sp, #0
   11c5e:	6078      	str	r0, [r7, #4]
   11c60:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
   11c62:	687b      	ldr	r3, [r7, #4]
   11c64:	681b      	ldr	r3, [r3, #0]
   11c66:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   11c68:	683b      	ldr	r3, [r7, #0]
   11c6a:	2b01      	cmp	r3, #1
   11c6c:	d904      	bls.n	11c78 <get_fat+0x20>
   11c6e:	693b      	ldr	r3, [r7, #16]
   11c70:	699a      	ldr	r2, [r3, #24]
   11c72:	683b      	ldr	r3, [r7, #0]
   11c74:	429a      	cmp	r2, r3
   11c76:	d802      	bhi.n	11c7e <get_fat+0x26>
		val = 1;	/* Internal error */
   11c78:	2301      	movs	r3, #1
   11c7a:	617b      	str	r3, [r7, #20]
   11c7c:	e090      	b.n	11da0 <get_fat+0x148>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   11c7e:	2301      	movs	r3, #1
   11c80:	425b      	negs	r3, r3
   11c82:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
   11c84:	693b      	ldr	r3, [r7, #16]
   11c86:	781b      	ldrb	r3, [r3, #0]
   11c88:	2b02      	cmp	r3, #2
   11c8a:	d047      	beq.n	11d1c <get_fat+0xc4>
   11c8c:	2b03      	cmp	r3, #3
   11c8e:	d060      	beq.n	11d52 <get_fat+0xfa>
   11c90:	2b01      	cmp	r3, #1
   11c92:	d000      	beq.n	11c96 <get_fat+0x3e>
   11c94:	e07a      	b.n	11d8c <get_fat+0x134>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
   11c96:	683b      	ldr	r3, [r7, #0]
   11c98:	60fb      	str	r3, [r7, #12]
   11c9a:	68fb      	ldr	r3, [r7, #12]
   11c9c:	085b      	lsrs	r3, r3, #1
   11c9e:	68fa      	ldr	r2, [r7, #12]
   11ca0:	18d3      	adds	r3, r2, r3
   11ca2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   11ca4:	693b      	ldr	r3, [r7, #16]
   11ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11ca8:	68fb      	ldr	r3, [r7, #12]
   11caa:	0a5b      	lsrs	r3, r3, #9
   11cac:	18d2      	adds	r2, r2, r3
   11cae:	693b      	ldr	r3, [r7, #16]
   11cb0:	0011      	movs	r1, r2
   11cb2:	0018      	movs	r0, r3
   11cb4:	4b3d      	ldr	r3, [pc, #244]	; (11dac <get_fat+0x154>)
   11cb6:	4798      	blx	r3
   11cb8:	1e03      	subs	r3, r0, #0
   11cba:	d16a      	bne.n	11d92 <get_fat+0x13a>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   11cbc:	68fb      	ldr	r3, [r7, #12]
   11cbe:	1c5a      	adds	r2, r3, #1
   11cc0:	60fa      	str	r2, [r7, #12]
   11cc2:	05db      	lsls	r3, r3, #23
   11cc4:	0ddb      	lsrs	r3, r3, #23
   11cc6:	693a      	ldr	r2, [r7, #16]
   11cc8:	2134      	movs	r1, #52	; 0x34
   11cca:	18d3      	adds	r3, r2, r3
   11ccc:	185b      	adds	r3, r3, r1
   11cce:	781b      	ldrb	r3, [r3, #0]
   11cd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   11cd2:	693b      	ldr	r3, [r7, #16]
   11cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11cd6:	68fb      	ldr	r3, [r7, #12]
   11cd8:	0a5b      	lsrs	r3, r3, #9
   11cda:	18d2      	adds	r2, r2, r3
   11cdc:	693b      	ldr	r3, [r7, #16]
   11cde:	0011      	movs	r1, r2
   11ce0:	0018      	movs	r0, r3
   11ce2:	4b32      	ldr	r3, [pc, #200]	; (11dac <get_fat+0x154>)
   11ce4:	4798      	blx	r3
   11ce6:	1e03      	subs	r3, r0, #0
   11ce8:	d155      	bne.n	11d96 <get_fat+0x13e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
   11cea:	68fb      	ldr	r3, [r7, #12]
   11cec:	05db      	lsls	r3, r3, #23
   11cee:	0ddb      	lsrs	r3, r3, #23
   11cf0:	693a      	ldr	r2, [r7, #16]
   11cf2:	2134      	movs	r1, #52	; 0x34
   11cf4:	18d3      	adds	r3, r2, r3
   11cf6:	185b      	adds	r3, r3, r1
   11cf8:	781b      	ldrb	r3, [r3, #0]
   11cfa:	021b      	lsls	r3, r3, #8
   11cfc:	001a      	movs	r2, r3
   11cfe:	68bb      	ldr	r3, [r7, #8]
   11d00:	4313      	orrs	r3, r2
   11d02:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
   11d04:	683b      	ldr	r3, [r7, #0]
   11d06:	2201      	movs	r2, #1
   11d08:	4013      	ands	r3, r2
   11d0a:	d002      	beq.n	11d12 <get_fat+0xba>
   11d0c:	68bb      	ldr	r3, [r7, #8]
   11d0e:	091b      	lsrs	r3, r3, #4
   11d10:	e002      	b.n	11d18 <get_fat+0xc0>
   11d12:	68bb      	ldr	r3, [r7, #8]
   11d14:	051b      	lsls	r3, r3, #20
   11d16:	0d1b      	lsrs	r3, r3, #20
   11d18:	617b      	str	r3, [r7, #20]
			break;
   11d1a:	e041      	b.n	11da0 <get_fat+0x148>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   11d1c:	693b      	ldr	r3, [r7, #16]
   11d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11d20:	683b      	ldr	r3, [r7, #0]
   11d22:	0a1b      	lsrs	r3, r3, #8
   11d24:	18d2      	adds	r2, r2, r3
   11d26:	693b      	ldr	r3, [r7, #16]
   11d28:	0011      	movs	r1, r2
   11d2a:	0018      	movs	r0, r3
   11d2c:	4b1f      	ldr	r3, [pc, #124]	; (11dac <get_fat+0x154>)
   11d2e:	4798      	blx	r3
   11d30:	1e03      	subs	r3, r0, #0
   11d32:	d132      	bne.n	11d9a <get_fat+0x142>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
   11d34:	693b      	ldr	r3, [r7, #16]
   11d36:	3334      	adds	r3, #52	; 0x34
   11d38:	001a      	movs	r2, r3
   11d3a:	683b      	ldr	r3, [r7, #0]
   11d3c:	0059      	lsls	r1, r3, #1
   11d3e:	23ff      	movs	r3, #255	; 0xff
   11d40:	005b      	lsls	r3, r3, #1
   11d42:	400b      	ands	r3, r1
   11d44:	18d3      	adds	r3, r2, r3
   11d46:	0018      	movs	r0, r3
   11d48:	4b19      	ldr	r3, [pc, #100]	; (11db0 <get_fat+0x158>)
   11d4a:	4798      	blx	r3
   11d4c:	0003      	movs	r3, r0
   11d4e:	617b      	str	r3, [r7, #20]
			break;
   11d50:	e026      	b.n	11da0 <get_fat+0x148>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   11d52:	693b      	ldr	r3, [r7, #16]
   11d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11d56:	683b      	ldr	r3, [r7, #0]
   11d58:	09db      	lsrs	r3, r3, #7
   11d5a:	18d2      	adds	r2, r2, r3
   11d5c:	693b      	ldr	r3, [r7, #16]
   11d5e:	0011      	movs	r1, r2
   11d60:	0018      	movs	r0, r3
   11d62:	4b12      	ldr	r3, [pc, #72]	; (11dac <get_fat+0x154>)
   11d64:	4798      	blx	r3
   11d66:	1e03      	subs	r3, r0, #0
   11d68:	d119      	bne.n	11d9e <get_fat+0x146>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
   11d6a:	693b      	ldr	r3, [r7, #16]
   11d6c:	3334      	adds	r3, #52	; 0x34
   11d6e:	001a      	movs	r2, r3
   11d70:	683b      	ldr	r3, [r7, #0]
   11d72:	0099      	lsls	r1, r3, #2
   11d74:	23fe      	movs	r3, #254	; 0xfe
   11d76:	005b      	lsls	r3, r3, #1
   11d78:	400b      	ands	r3, r1
   11d7a:	18d3      	adds	r3, r2, r3
   11d7c:	0018      	movs	r0, r3
   11d7e:	4b0d      	ldr	r3, [pc, #52]	; (11db4 <get_fat+0x15c>)
   11d80:	4798      	blx	r3
   11d82:	0003      	movs	r3, r0
   11d84:	011b      	lsls	r3, r3, #4
   11d86:	091b      	lsrs	r3, r3, #4
   11d88:	617b      	str	r3, [r7, #20]
			break;
   11d8a:	e009      	b.n	11da0 <get_fat+0x148>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
   11d8c:	2301      	movs	r3, #1
   11d8e:	617b      	str	r3, [r7, #20]
   11d90:	e006      	b.n	11da0 <get_fat+0x148>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   11d92:	46c0      	nop			; (mov r8, r8)
   11d94:	e004      	b.n	11da0 <get_fat+0x148>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   11d96:	46c0      	nop			; (mov r8, r8)
   11d98:	e002      	b.n	11da0 <get_fat+0x148>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   11d9a:	46c0      	nop			; (mov r8, r8)
   11d9c:	e000      	b.n	11da0 <get_fat+0x148>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   11d9e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
   11da0:	697b      	ldr	r3, [r7, #20]
}
   11da2:	0018      	movs	r0, r3
   11da4:	46bd      	mov	sp, r7
   11da6:	b006      	add	sp, #24
   11da8:	bd80      	pop	{r7, pc}
   11daa:	46c0      	nop			; (mov r8, r8)
   11dac:	00011a95 	.word	0x00011a95
   11db0:	00011709 	.word	0x00011709
   11db4:	00011745 	.word	0x00011745

00011db8 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
   11db8:	b590      	push	{r4, r7, lr}
   11dba:	b089      	sub	sp, #36	; 0x24
   11dbc:	af00      	add	r7, sp, #0
   11dbe:	60f8      	str	r0, [r7, #12]
   11dc0:	60b9      	str	r1, [r7, #8]
   11dc2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
   11dc4:	231f      	movs	r3, #31
   11dc6:	18fb      	adds	r3, r7, r3
   11dc8:	2202      	movs	r2, #2
   11dca:	701a      	strb	r2, [r3, #0]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   11dcc:	68bb      	ldr	r3, [r7, #8]
   11dce:	2b01      	cmp	r3, #1
   11dd0:	d800      	bhi.n	11dd4 <put_fat+0x1c>
   11dd2:	e0ed      	b.n	11fb0 <put_fat+0x1f8>
   11dd4:	68fb      	ldr	r3, [r7, #12]
   11dd6:	699a      	ldr	r2, [r3, #24]
   11dd8:	68bb      	ldr	r3, [r7, #8]
   11dda:	429a      	cmp	r2, r3
   11ddc:	d800      	bhi.n	11de0 <put_fat+0x28>
   11dde:	e0e7      	b.n	11fb0 <put_fat+0x1f8>
		switch (fs->fs_type) {
   11de0:	68fb      	ldr	r3, [r7, #12]
   11de2:	781b      	ldrb	r3, [r3, #0]
   11de4:	2b02      	cmp	r3, #2
   11de6:	d100      	bne.n	11dea <put_fat+0x32>
   11de8:	e07c      	b.n	11ee4 <put_fat+0x12c>
   11dea:	2b03      	cmp	r3, #3
   11dec:	d100      	bne.n	11df0 <put_fat+0x38>
   11dee:	e09f      	b.n	11f30 <put_fat+0x178>
   11df0:	2b01      	cmp	r3, #1
   11df2:	d000      	beq.n	11df6 <put_fat+0x3e>
   11df4:	e0dc      	b.n	11fb0 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
   11df6:	68bb      	ldr	r3, [r7, #8]
   11df8:	61bb      	str	r3, [r7, #24]
   11dfa:	69bb      	ldr	r3, [r7, #24]
   11dfc:	085b      	lsrs	r3, r3, #1
   11dfe:	69ba      	ldr	r2, [r7, #24]
   11e00:	18d3      	adds	r3, r2, r3
   11e02:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   11e04:	68fb      	ldr	r3, [r7, #12]
   11e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11e08:	69bb      	ldr	r3, [r7, #24]
   11e0a:	0a5b      	lsrs	r3, r3, #9
   11e0c:	18d2      	adds	r2, r2, r3
   11e0e:	231f      	movs	r3, #31
   11e10:	18fc      	adds	r4, r7, r3
   11e12:	68fb      	ldr	r3, [r7, #12]
   11e14:	0011      	movs	r1, r2
   11e16:	0018      	movs	r0, r3
   11e18:	4b69      	ldr	r3, [pc, #420]	; (11fc0 <put_fat+0x208>)
   11e1a:	4798      	blx	r3
   11e1c:	0003      	movs	r3, r0
   11e1e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   11e20:	231f      	movs	r3, #31
   11e22:	18fb      	adds	r3, r7, r3
   11e24:	781b      	ldrb	r3, [r3, #0]
   11e26:	2b00      	cmp	r3, #0
   11e28:	d000      	beq.n	11e2c <put_fat+0x74>
   11e2a:	e0ba      	b.n	11fa2 <put_fat+0x1ea>
			p = fs->win + bc++ % SS(fs);
   11e2c:	68fb      	ldr	r3, [r7, #12]
   11e2e:	3334      	adds	r3, #52	; 0x34
   11e30:	001a      	movs	r2, r3
   11e32:	69bb      	ldr	r3, [r7, #24]
   11e34:	1c59      	adds	r1, r3, #1
   11e36:	61b9      	str	r1, [r7, #24]
   11e38:	05db      	lsls	r3, r3, #23
   11e3a:	0ddb      	lsrs	r3, r3, #23
   11e3c:	18d3      	adds	r3, r2, r3
   11e3e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
   11e40:	68bb      	ldr	r3, [r7, #8]
   11e42:	2201      	movs	r2, #1
   11e44:	4013      	ands	r3, r2
   11e46:	d00d      	beq.n	11e64 <put_fat+0xac>
   11e48:	697b      	ldr	r3, [r7, #20]
   11e4a:	781b      	ldrb	r3, [r3, #0]
   11e4c:	b25b      	sxtb	r3, r3
   11e4e:	220f      	movs	r2, #15
   11e50:	4013      	ands	r3, r2
   11e52:	b25a      	sxtb	r2, r3
   11e54:	687b      	ldr	r3, [r7, #4]
   11e56:	b2db      	uxtb	r3, r3
   11e58:	011b      	lsls	r3, r3, #4
   11e5a:	b25b      	sxtb	r3, r3
   11e5c:	4313      	orrs	r3, r2
   11e5e:	b25b      	sxtb	r3, r3
   11e60:	b2db      	uxtb	r3, r3
   11e62:	e001      	b.n	11e68 <put_fat+0xb0>
   11e64:	687b      	ldr	r3, [r7, #4]
   11e66:	b2db      	uxtb	r3, r3
   11e68:	697a      	ldr	r2, [r7, #20]
   11e6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
   11e6c:	68fb      	ldr	r3, [r7, #12]
   11e6e:	2201      	movs	r2, #1
   11e70:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   11e72:	68fb      	ldr	r3, [r7, #12]
   11e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11e76:	69bb      	ldr	r3, [r7, #24]
   11e78:	0a5b      	lsrs	r3, r3, #9
   11e7a:	18d2      	adds	r2, r2, r3
   11e7c:	231f      	movs	r3, #31
   11e7e:	18fc      	adds	r4, r7, r3
   11e80:	68fb      	ldr	r3, [r7, #12]
   11e82:	0011      	movs	r1, r2
   11e84:	0018      	movs	r0, r3
   11e86:	4b4e      	ldr	r3, [pc, #312]	; (11fc0 <put_fat+0x208>)
   11e88:	4798      	blx	r3
   11e8a:	0003      	movs	r3, r0
   11e8c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   11e8e:	231f      	movs	r3, #31
   11e90:	18fb      	adds	r3, r7, r3
   11e92:	781b      	ldrb	r3, [r3, #0]
   11e94:	2b00      	cmp	r3, #0
   11e96:	d000      	beq.n	11e9a <put_fat+0xe2>
   11e98:	e085      	b.n	11fa6 <put_fat+0x1ee>
			p = fs->win + bc % SS(fs);
   11e9a:	68fb      	ldr	r3, [r7, #12]
   11e9c:	3334      	adds	r3, #52	; 0x34
   11e9e:	001a      	movs	r2, r3
   11ea0:	69bb      	ldr	r3, [r7, #24]
   11ea2:	05db      	lsls	r3, r3, #23
   11ea4:	0ddb      	lsrs	r3, r3, #23
   11ea6:	18d3      	adds	r3, r2, r3
   11ea8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
   11eaa:	68bb      	ldr	r3, [r7, #8]
   11eac:	2201      	movs	r2, #1
   11eae:	4013      	ands	r3, r2
   11eb0:	d003      	beq.n	11eba <put_fat+0x102>
   11eb2:	687b      	ldr	r3, [r7, #4]
   11eb4:	091b      	lsrs	r3, r3, #4
   11eb6:	b2db      	uxtb	r3, r3
   11eb8:	e00e      	b.n	11ed8 <put_fat+0x120>
   11eba:	697b      	ldr	r3, [r7, #20]
   11ebc:	781b      	ldrb	r3, [r3, #0]
   11ebe:	b25b      	sxtb	r3, r3
   11ec0:	220f      	movs	r2, #15
   11ec2:	4393      	bics	r3, r2
   11ec4:	b25a      	sxtb	r2, r3
   11ec6:	687b      	ldr	r3, [r7, #4]
   11ec8:	0a1b      	lsrs	r3, r3, #8
   11eca:	b25b      	sxtb	r3, r3
   11ecc:	210f      	movs	r1, #15
   11ece:	400b      	ands	r3, r1
   11ed0:	b25b      	sxtb	r3, r3
   11ed2:	4313      	orrs	r3, r2
   11ed4:	b25b      	sxtb	r3, r3
   11ed6:	b2db      	uxtb	r3, r3
   11ed8:	697a      	ldr	r2, [r7, #20]
   11eda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
   11edc:	68fb      	ldr	r3, [r7, #12]
   11ede:	2201      	movs	r2, #1
   11ee0:	70da      	strb	r2, [r3, #3]
			break;
   11ee2:	e065      	b.n	11fb0 <put_fat+0x1f8>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   11ee4:	68fb      	ldr	r3, [r7, #12]
   11ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11ee8:	68bb      	ldr	r3, [r7, #8]
   11eea:	0a1b      	lsrs	r3, r3, #8
   11eec:	18d2      	adds	r2, r2, r3
   11eee:	231f      	movs	r3, #31
   11ef0:	18fc      	adds	r4, r7, r3
   11ef2:	68fb      	ldr	r3, [r7, #12]
   11ef4:	0011      	movs	r1, r2
   11ef6:	0018      	movs	r0, r3
   11ef8:	4b31      	ldr	r3, [pc, #196]	; (11fc0 <put_fat+0x208>)
   11efa:	4798      	blx	r3
   11efc:	0003      	movs	r3, r0
   11efe:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   11f00:	231f      	movs	r3, #31
   11f02:	18fb      	adds	r3, r7, r3
   11f04:	781b      	ldrb	r3, [r3, #0]
   11f06:	2b00      	cmp	r3, #0
   11f08:	d14f      	bne.n	11faa <put_fat+0x1f2>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   11f0a:	68fb      	ldr	r3, [r7, #12]
   11f0c:	3334      	adds	r3, #52	; 0x34
   11f0e:	001a      	movs	r2, r3
   11f10:	68bb      	ldr	r3, [r7, #8]
   11f12:	0059      	lsls	r1, r3, #1
   11f14:	23ff      	movs	r3, #255	; 0xff
   11f16:	005b      	lsls	r3, r3, #1
   11f18:	400b      	ands	r3, r1
   11f1a:	18d3      	adds	r3, r2, r3
   11f1c:	687a      	ldr	r2, [r7, #4]
   11f1e:	b292      	uxth	r2, r2
   11f20:	0011      	movs	r1, r2
   11f22:	0018      	movs	r0, r3
   11f24:	4b27      	ldr	r3, [pc, #156]	; (11fc4 <put_fat+0x20c>)
   11f26:	4798      	blx	r3
			fs->wflag = 1;
   11f28:	68fb      	ldr	r3, [r7, #12]
   11f2a:	2201      	movs	r2, #1
   11f2c:	70da      	strb	r2, [r3, #3]
			break;
   11f2e:	e03f      	b.n	11fb0 <put_fat+0x1f8>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   11f30:	68fb      	ldr	r3, [r7, #12]
   11f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11f34:	68bb      	ldr	r3, [r7, #8]
   11f36:	09db      	lsrs	r3, r3, #7
   11f38:	18d2      	adds	r2, r2, r3
   11f3a:	231f      	movs	r3, #31
   11f3c:	18fc      	adds	r4, r7, r3
   11f3e:	68fb      	ldr	r3, [r7, #12]
   11f40:	0011      	movs	r1, r2
   11f42:	0018      	movs	r0, r3
   11f44:	4b1e      	ldr	r3, [pc, #120]	; (11fc0 <put_fat+0x208>)
   11f46:	4798      	blx	r3
   11f48:	0003      	movs	r3, r0
   11f4a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   11f4c:	231f      	movs	r3, #31
   11f4e:	18fb      	adds	r3, r7, r3
   11f50:	781b      	ldrb	r3, [r3, #0]
   11f52:	2b00      	cmp	r3, #0
   11f54:	d12b      	bne.n	11fae <put_fat+0x1f6>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   11f56:	687b      	ldr	r3, [r7, #4]
   11f58:	011b      	lsls	r3, r3, #4
   11f5a:	091c      	lsrs	r4, r3, #4
   11f5c:	68fb      	ldr	r3, [r7, #12]
   11f5e:	3334      	adds	r3, #52	; 0x34
   11f60:	001a      	movs	r2, r3
   11f62:	68bb      	ldr	r3, [r7, #8]
   11f64:	0099      	lsls	r1, r3, #2
   11f66:	23fe      	movs	r3, #254	; 0xfe
   11f68:	005b      	lsls	r3, r3, #1
   11f6a:	400b      	ands	r3, r1
   11f6c:	18d3      	adds	r3, r2, r3
   11f6e:	0018      	movs	r0, r3
   11f70:	4b15      	ldr	r3, [pc, #84]	; (11fc8 <put_fat+0x210>)
   11f72:	4798      	blx	r3
   11f74:	0003      	movs	r3, r0
   11f76:	0f1b      	lsrs	r3, r3, #28
   11f78:	071b      	lsls	r3, r3, #28
   11f7a:	4323      	orrs	r3, r4
   11f7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
   11f7e:	68fb      	ldr	r3, [r7, #12]
   11f80:	3334      	adds	r3, #52	; 0x34
   11f82:	001a      	movs	r2, r3
   11f84:	68bb      	ldr	r3, [r7, #8]
   11f86:	0099      	lsls	r1, r3, #2
   11f88:	23fe      	movs	r3, #254	; 0xfe
   11f8a:	005b      	lsls	r3, r3, #1
   11f8c:	400b      	ands	r3, r1
   11f8e:	18d3      	adds	r3, r2, r3
   11f90:	687a      	ldr	r2, [r7, #4]
   11f92:	0011      	movs	r1, r2
   11f94:	0018      	movs	r0, r3
   11f96:	4b0d      	ldr	r3, [pc, #52]	; (11fcc <put_fat+0x214>)
   11f98:	4798      	blx	r3
			fs->wflag = 1;
   11f9a:	68fb      	ldr	r3, [r7, #12]
   11f9c:	2201      	movs	r2, #1
   11f9e:	70da      	strb	r2, [r3, #3]
			break;
   11fa0:	e006      	b.n	11fb0 <put_fat+0x1f8>
			if (res != FR_OK) break;
   11fa2:	46c0      	nop			; (mov r8, r8)
   11fa4:	e004      	b.n	11fb0 <put_fat+0x1f8>
			if (res != FR_OK) break;
   11fa6:	46c0      	nop			; (mov r8, r8)
   11fa8:	e002      	b.n	11fb0 <put_fat+0x1f8>
			if (res != FR_OK) break;
   11faa:	46c0      	nop			; (mov r8, r8)
   11fac:	e000      	b.n	11fb0 <put_fat+0x1f8>
			if (res != FR_OK) break;
   11fae:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
   11fb0:	231f      	movs	r3, #31
   11fb2:	18fb      	adds	r3, r7, r3
   11fb4:	781b      	ldrb	r3, [r3, #0]
}
   11fb6:	0018      	movs	r0, r3
   11fb8:	46bd      	mov	sp, r7
   11fba:	b009      	add	sp, #36	; 0x24
   11fbc:	bd90      	pop	{r4, r7, pc}
   11fbe:	46c0      	nop			; (mov r8, r8)
   11fc0:	00011a95 	.word	0x00011a95
   11fc4:	00011787 	.word	0x00011787
   11fc8:	00011745 	.word	0x00011745
   11fcc:	000117c3 	.word	0x000117c3

00011fd0 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
   11fd0:	b590      	push	{r4, r7, lr}
   11fd2:	b089      	sub	sp, #36	; 0x24
   11fd4:	af00      	add	r7, sp, #0
   11fd6:	60f8      	str	r0, [r7, #12]
   11fd8:	60b9      	str	r1, [r7, #8]
   11fda:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
   11fdc:	231f      	movs	r3, #31
   11fde:	18fb      	adds	r3, r7, r3
   11fe0:	2200      	movs	r2, #0
   11fe2:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
   11fe4:	68fb      	ldr	r3, [r7, #12]
   11fe6:	681b      	ldr	r3, [r3, #0]
   11fe8:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   11fea:	68bb      	ldr	r3, [r7, #8]
   11fec:	2b01      	cmp	r3, #1
   11fee:	d904      	bls.n	11ffa <remove_chain+0x2a>
   11ff0:	69bb      	ldr	r3, [r7, #24]
   11ff2:	699a      	ldr	r2, [r3, #24]
   11ff4:	68bb      	ldr	r3, [r7, #8]
   11ff6:	429a      	cmp	r2, r3
   11ff8:	d801      	bhi.n	11ffe <remove_chain+0x2e>
   11ffa:	2302      	movs	r3, #2
   11ffc:	e05b      	b.n	120b6 <remove_chain+0xe6>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   11ffe:	687b      	ldr	r3, [r7, #4]
   12000:	2b00      	cmp	r3, #0
   12002:	d013      	beq.n	1202c <remove_chain+0x5c>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
   12004:	231f      	movs	r3, #31
   12006:	18fc      	adds	r4, r7, r3
   12008:	2301      	movs	r3, #1
   1200a:	425a      	negs	r2, r3
   1200c:	6879      	ldr	r1, [r7, #4]
   1200e:	69bb      	ldr	r3, [r7, #24]
   12010:	0018      	movs	r0, r3
   12012:	4b2b      	ldr	r3, [pc, #172]	; (120c0 <remove_chain+0xf0>)
   12014:	4798      	blx	r3
   12016:	0003      	movs	r3, r0
   12018:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
   1201a:	231f      	movs	r3, #31
   1201c:	18fb      	adds	r3, r7, r3
   1201e:	781b      	ldrb	r3, [r3, #0]
   12020:	2b00      	cmp	r3, #0
   12022:	d003      	beq.n	1202c <remove_chain+0x5c>
   12024:	231f      	movs	r3, #31
   12026:	18fb      	adds	r3, r7, r3
   12028:	781b      	ldrb	r3, [r3, #0]
   1202a:	e044      	b.n	120b6 <remove_chain+0xe6>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
   1202c:	68ba      	ldr	r2, [r7, #8]
   1202e:	68fb      	ldr	r3, [r7, #12]
   12030:	0011      	movs	r1, r2
   12032:	0018      	movs	r0, r3
   12034:	4b23      	ldr	r3, [pc, #140]	; (120c4 <remove_chain+0xf4>)
   12036:	4798      	blx	r3
   12038:	0003      	movs	r3, r0
   1203a:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
   1203c:	697b      	ldr	r3, [r7, #20]
   1203e:	2b00      	cmp	r3, #0
   12040:	d037      	beq.n	120b2 <remove_chain+0xe2>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   12042:	697b      	ldr	r3, [r7, #20]
   12044:	2b01      	cmp	r3, #1
   12046:	d101      	bne.n	1204c <remove_chain+0x7c>
   12048:	2302      	movs	r3, #2
   1204a:	e034      	b.n	120b6 <remove_chain+0xe6>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   1204c:	697b      	ldr	r3, [r7, #20]
   1204e:	3301      	adds	r3, #1
   12050:	d101      	bne.n	12056 <remove_chain+0x86>
   12052:	2301      	movs	r3, #1
   12054:	e02f      	b.n	120b6 <remove_chain+0xe6>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
   12056:	231f      	movs	r3, #31
   12058:	18fc      	adds	r4, r7, r3
   1205a:	68b9      	ldr	r1, [r7, #8]
   1205c:	69bb      	ldr	r3, [r7, #24]
   1205e:	2200      	movs	r2, #0
   12060:	0018      	movs	r0, r3
   12062:	4b17      	ldr	r3, [pc, #92]	; (120c0 <remove_chain+0xf0>)
   12064:	4798      	blx	r3
   12066:	0003      	movs	r3, r0
   12068:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
   1206a:	231f      	movs	r3, #31
   1206c:	18fb      	adds	r3, r7, r3
   1206e:	781b      	ldrb	r3, [r3, #0]
   12070:	2b00      	cmp	r3, #0
   12072:	d003      	beq.n	1207c <remove_chain+0xac>
   12074:	231f      	movs	r3, #31
   12076:	18fb      	adds	r3, r7, r3
   12078:	781b      	ldrb	r3, [r3, #0]
   1207a:	e01c      	b.n	120b6 <remove_chain+0xe6>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
   1207c:	69bb      	ldr	r3, [r7, #24]
   1207e:	695a      	ldr	r2, [r3, #20]
   12080:	69bb      	ldr	r3, [r7, #24]
   12082:	699b      	ldr	r3, [r3, #24]
   12084:	3b02      	subs	r3, #2
   12086:	429a      	cmp	r2, r3
   12088:	d20b      	bcs.n	120a2 <remove_chain+0xd2>
			fs->free_clst++;
   1208a:	69bb      	ldr	r3, [r7, #24]
   1208c:	695b      	ldr	r3, [r3, #20]
   1208e:	1c5a      	adds	r2, r3, #1
   12090:	69bb      	ldr	r3, [r7, #24]
   12092:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
   12094:	69bb      	ldr	r3, [r7, #24]
   12096:	791b      	ldrb	r3, [r3, #4]
   12098:	2201      	movs	r2, #1
   1209a:	4313      	orrs	r3, r2
   1209c:	b2da      	uxtb	r2, r3
   1209e:	69bb      	ldr	r3, [r7, #24]
   120a0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
   120a2:	697b      	ldr	r3, [r7, #20]
   120a4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
   120a6:	69bb      	ldr	r3, [r7, #24]
   120a8:	699a      	ldr	r2, [r3, #24]
   120aa:	68bb      	ldr	r3, [r7, #8]
   120ac:	429a      	cmp	r2, r3
   120ae:	d8bd      	bhi.n	1202c <remove_chain+0x5c>
   120b0:	e000      	b.n	120b4 <remove_chain+0xe4>
		if (nxt == 0) break;				/* Empty cluster? */
   120b2:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
#endif
	return FR_OK;
   120b4:	2300      	movs	r3, #0
}
   120b6:	0018      	movs	r0, r3
   120b8:	46bd      	mov	sp, r7
   120ba:	b009      	add	sp, #36	; 0x24
   120bc:	bd90      	pop	{r4, r7, pc}
   120be:	46c0      	nop			; (mov r8, r8)
   120c0:	00011db9 	.word	0x00011db9
   120c4:	00011c59 	.word	0x00011c59

000120c8 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
   120c8:	b590      	push	{r4, r7, lr}
   120ca:	b089      	sub	sp, #36	; 0x24
   120cc:	af00      	add	r7, sp, #0
   120ce:	6078      	str	r0, [r7, #4]
   120d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
   120d2:	687b      	ldr	r3, [r7, #4]
   120d4:	681b      	ldr	r3, [r3, #0]
   120d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
   120d8:	683b      	ldr	r3, [r7, #0]
   120da:	2b00      	cmp	r3, #0
   120dc:	d10d      	bne.n	120fa <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
   120de:	693b      	ldr	r3, [r7, #16]
   120e0:	691b      	ldr	r3, [r3, #16]
   120e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   120e4:	69bb      	ldr	r3, [r7, #24]
   120e6:	2b00      	cmp	r3, #0
   120e8:	d004      	beq.n	120f4 <create_chain+0x2c>
   120ea:	693b      	ldr	r3, [r7, #16]
   120ec:	699a      	ldr	r2, [r3, #24]
   120ee:	69bb      	ldr	r3, [r7, #24]
   120f0:	429a      	cmp	r2, r3
   120f2:	d81d      	bhi.n	12130 <create_chain+0x68>
   120f4:	2301      	movs	r3, #1
   120f6:	61bb      	str	r3, [r7, #24]
   120f8:	e01a      	b.n	12130 <create_chain+0x68>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
   120fa:	683a      	ldr	r2, [r7, #0]
   120fc:	687b      	ldr	r3, [r7, #4]
   120fe:	0011      	movs	r1, r2
   12100:	0018      	movs	r0, r3
   12102:	4b63      	ldr	r3, [pc, #396]	; (12290 <create_chain+0x1c8>)
   12104:	4798      	blx	r3
   12106:	0003      	movs	r3, r0
   12108:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
   1210a:	68fb      	ldr	r3, [r7, #12]
   1210c:	2b01      	cmp	r3, #1
   1210e:	d801      	bhi.n	12114 <create_chain+0x4c>
   12110:	2301      	movs	r3, #1
   12112:	e0b8      	b.n	12286 <create_chain+0x1be>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   12114:	68fb      	ldr	r3, [r7, #12]
   12116:	3301      	adds	r3, #1
   12118:	d101      	bne.n	1211e <create_chain+0x56>
   1211a:	68fb      	ldr	r3, [r7, #12]
   1211c:	e0b3      	b.n	12286 <create_chain+0x1be>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   1211e:	693b      	ldr	r3, [r7, #16]
   12120:	699a      	ldr	r2, [r3, #24]
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	429a      	cmp	r2, r3
   12126:	d901      	bls.n	1212c <create_chain+0x64>
   12128:	68fb      	ldr	r3, [r7, #12]
   1212a:	e0ac      	b.n	12286 <create_chain+0x1be>
		scl = clst;							/* Cluster to start to find */
   1212c:	683b      	ldr	r3, [r7, #0]
   1212e:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   12130:	693b      	ldr	r3, [r7, #16]
   12132:	695b      	ldr	r3, [r3, #20]
   12134:	2b00      	cmp	r3, #0
   12136:	d101      	bne.n	1213c <create_chain+0x74>
   12138:	2300      	movs	r3, #0
   1213a:	e0a4      	b.n	12286 <create_chain+0x1be>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
   1213c:	2300      	movs	r3, #0
   1213e:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
   12140:	69ba      	ldr	r2, [r7, #24]
   12142:	683b      	ldr	r3, [r7, #0]
   12144:	429a      	cmp	r2, r3
   12146:	d12b      	bne.n	121a0 <create_chain+0xd8>
			ncl = scl + 1;						/* Test if next cluster is free */
   12148:	69bb      	ldr	r3, [r7, #24]
   1214a:	3301      	adds	r3, #1
   1214c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
   1214e:	693b      	ldr	r3, [r7, #16]
   12150:	699a      	ldr	r2, [r3, #24]
   12152:	69fb      	ldr	r3, [r7, #28]
   12154:	429a      	cmp	r2, r3
   12156:	d801      	bhi.n	1215c <create_chain+0x94>
   12158:	2302      	movs	r3, #2
   1215a:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
   1215c:	69fa      	ldr	r2, [r7, #28]
   1215e:	687b      	ldr	r3, [r7, #4]
   12160:	0011      	movs	r1, r2
   12162:	0018      	movs	r0, r3
   12164:	4b4a      	ldr	r3, [pc, #296]	; (12290 <create_chain+0x1c8>)
   12166:	4798      	blx	r3
   12168:	0003      	movs	r3, r0
   1216a:	60fb      	str	r3, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   1216c:	68fb      	ldr	r3, [r7, #12]
   1216e:	2b01      	cmp	r3, #1
   12170:	d002      	beq.n	12178 <create_chain+0xb0>
   12172:	68fb      	ldr	r3, [r7, #12]
   12174:	3301      	adds	r3, #1
   12176:	d101      	bne.n	1217c <create_chain+0xb4>
   12178:	68fb      	ldr	r3, [r7, #12]
   1217a:	e084      	b.n	12286 <create_chain+0x1be>
			if (cs != 0) {						/* Not free? */
   1217c:	68fb      	ldr	r3, [r7, #12]
   1217e:	2b00      	cmp	r3, #0
   12180:	d00e      	beq.n	121a0 <create_chain+0xd8>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
   12182:	693b      	ldr	r3, [r7, #16]
   12184:	691b      	ldr	r3, [r3, #16]
   12186:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   12188:	68fb      	ldr	r3, [r7, #12]
   1218a:	2b01      	cmp	r3, #1
   1218c:	d906      	bls.n	1219c <create_chain+0xd4>
   1218e:	693b      	ldr	r3, [r7, #16]
   12190:	699a      	ldr	r2, [r3, #24]
   12192:	68fb      	ldr	r3, [r7, #12]
   12194:	429a      	cmp	r2, r3
   12196:	d901      	bls.n	1219c <create_chain+0xd4>
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	61bb      	str	r3, [r7, #24]
				ncl = 0;
   1219c:	2300      	movs	r3, #0
   1219e:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
   121a0:	69fb      	ldr	r3, [r7, #28]
   121a2:	2b00      	cmp	r3, #0
   121a4:	d12b      	bne.n	121fe <create_chain+0x136>
			ncl = scl;	/* Start cluster */
   121a6:	69bb      	ldr	r3, [r7, #24]
   121a8:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
   121aa:	69fb      	ldr	r3, [r7, #28]
   121ac:	3301      	adds	r3, #1
   121ae:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   121b0:	693b      	ldr	r3, [r7, #16]
   121b2:	699a      	ldr	r2, [r3, #24]
   121b4:	69fb      	ldr	r3, [r7, #28]
   121b6:	429a      	cmp	r2, r3
   121b8:	d807      	bhi.n	121ca <create_chain+0x102>
					ncl = 2;
   121ba:	2302      	movs	r3, #2
   121bc:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
   121be:	69fa      	ldr	r2, [r7, #28]
   121c0:	69bb      	ldr	r3, [r7, #24]
   121c2:	429a      	cmp	r2, r3
   121c4:	d901      	bls.n	121ca <create_chain+0x102>
   121c6:	2300      	movs	r3, #0
   121c8:	e05d      	b.n	12286 <create_chain+0x1be>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
   121ca:	69fa      	ldr	r2, [r7, #28]
   121cc:	687b      	ldr	r3, [r7, #4]
   121ce:	0011      	movs	r1, r2
   121d0:	0018      	movs	r0, r3
   121d2:	4b2f      	ldr	r3, [pc, #188]	; (12290 <create_chain+0x1c8>)
   121d4:	4798      	blx	r3
   121d6:	0003      	movs	r3, r0
   121d8:	60fb      	str	r3, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
   121da:	68fb      	ldr	r3, [r7, #12]
   121dc:	2b00      	cmp	r3, #0
   121de:	d00d      	beq.n	121fc <create_chain+0x134>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   121e0:	68fb      	ldr	r3, [r7, #12]
   121e2:	2b01      	cmp	r3, #1
   121e4:	d002      	beq.n	121ec <create_chain+0x124>
   121e6:	68fb      	ldr	r3, [r7, #12]
   121e8:	3301      	adds	r3, #1
   121ea:	d101      	bne.n	121f0 <create_chain+0x128>
   121ec:	68fb      	ldr	r3, [r7, #12]
   121ee:	e04a      	b.n	12286 <create_chain+0x1be>
				if (ncl == scl) return 0;		/* No free cluster found? */
   121f0:	69fa      	ldr	r2, [r7, #28]
   121f2:	69bb      	ldr	r3, [r7, #24]
   121f4:	429a      	cmp	r2, r3
   121f6:	d1d8      	bne.n	121aa <create_chain+0xe2>
   121f8:	2300      	movs	r3, #0
   121fa:	e044      	b.n	12286 <create_chain+0x1be>
				if (cs == 0) break;				/* Found a free cluster? */
   121fc:	46c0      	nop			; (mov r8, r8)
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
   121fe:	2317      	movs	r3, #23
   12200:	18fc      	adds	r4, r7, r3
   12202:	2301      	movs	r3, #1
   12204:	425a      	negs	r2, r3
   12206:	69f9      	ldr	r1, [r7, #28]
   12208:	693b      	ldr	r3, [r7, #16]
   1220a:	0018      	movs	r0, r3
   1220c:	4b21      	ldr	r3, [pc, #132]	; (12294 <create_chain+0x1cc>)
   1220e:	4798      	blx	r3
   12210:	0003      	movs	r3, r0
   12212:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
   12214:	2317      	movs	r3, #23
   12216:	18fb      	adds	r3, r7, r3
   12218:	781b      	ldrb	r3, [r3, #0]
   1221a:	2b00      	cmp	r3, #0
   1221c:	d10c      	bne.n	12238 <create_chain+0x170>
   1221e:	683b      	ldr	r3, [r7, #0]
   12220:	2b00      	cmp	r3, #0
   12222:	d009      	beq.n	12238 <create_chain+0x170>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
   12224:	2317      	movs	r3, #23
   12226:	18fc      	adds	r4, r7, r3
   12228:	69fa      	ldr	r2, [r7, #28]
   1222a:	6839      	ldr	r1, [r7, #0]
   1222c:	693b      	ldr	r3, [r7, #16]
   1222e:	0018      	movs	r0, r3
   12230:	4b18      	ldr	r3, [pc, #96]	; (12294 <create_chain+0x1cc>)
   12232:	4798      	blx	r3
   12234:	0003      	movs	r3, r0
   12236:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   12238:	2317      	movs	r3, #23
   1223a:	18fb      	adds	r3, r7, r3
   1223c:	781b      	ldrb	r3, [r3, #0]
   1223e:	2b00      	cmp	r3, #0
   12240:	d116      	bne.n	12270 <create_chain+0x1a8>
		fs->last_clst = ncl;
   12242:	693b      	ldr	r3, [r7, #16]
   12244:	69fa      	ldr	r2, [r7, #28]
   12246:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
   12248:	693b      	ldr	r3, [r7, #16]
   1224a:	695a      	ldr	r2, [r3, #20]
   1224c:	693b      	ldr	r3, [r7, #16]
   1224e:	699b      	ldr	r3, [r3, #24]
   12250:	3b02      	subs	r3, #2
   12252:	429a      	cmp	r2, r3
   12254:	d804      	bhi.n	12260 <create_chain+0x198>
   12256:	693b      	ldr	r3, [r7, #16]
   12258:	695b      	ldr	r3, [r3, #20]
   1225a:	1e5a      	subs	r2, r3, #1
   1225c:	693b      	ldr	r3, [r7, #16]
   1225e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
   12260:	693b      	ldr	r3, [r7, #16]
   12262:	791b      	ldrb	r3, [r3, #4]
   12264:	2201      	movs	r2, #1
   12266:	4313      	orrs	r3, r2
   12268:	b2da      	uxtb	r2, r3
   1226a:	693b      	ldr	r3, [r7, #16]
   1226c:	711a      	strb	r2, [r3, #4]
   1226e:	e009      	b.n	12284 <create_chain+0x1bc>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
   12270:	2317      	movs	r3, #23
   12272:	18fb      	adds	r3, r7, r3
   12274:	781b      	ldrb	r3, [r3, #0]
   12276:	2b01      	cmp	r3, #1
   12278:	d102      	bne.n	12280 <create_chain+0x1b8>
   1227a:	2301      	movs	r3, #1
   1227c:	425b      	negs	r3, r3
   1227e:	e000      	b.n	12282 <create_chain+0x1ba>
   12280:	2301      	movs	r3, #1
   12282:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
   12284:	69fb      	ldr	r3, [r7, #28]
}
   12286:	0018      	movs	r0, r3
   12288:	46bd      	mov	sp, r7
   1228a:	b009      	add	sp, #36	; 0x24
   1228c:	bd90      	pop	{r4, r7, pc}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	00011c59 	.word	0x00011c59
   12294:	00011db9 	.word	0x00011db9

00012298 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
   12298:	b590      	push	{r4, r7, lr}
   1229a:	b087      	sub	sp, #28
   1229c:	af00      	add	r7, sp, #0
   1229e:	6078      	str	r0, [r7, #4]
   122a0:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   122a2:	687b      	ldr	r3, [r7, #4]
   122a4:	0018      	movs	r0, r3
   122a6:	4b22      	ldr	r3, [pc, #136]	; (12330 <dir_clear+0x98>)
   122a8:	4798      	blx	r3
   122aa:	1e03      	subs	r3, r0, #0
   122ac:	d001      	beq.n	122b2 <dir_clear+0x1a>
   122ae:	2301      	movs	r3, #1
   122b0:	e039      	b.n	12326 <dir_clear+0x8e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   122b2:	683a      	ldr	r2, [r7, #0]
   122b4:	687b      	ldr	r3, [r7, #4]
   122b6:	0011      	movs	r1, r2
   122b8:	0018      	movs	r0, r3
   122ba:	4b1e      	ldr	r3, [pc, #120]	; (12334 <dir_clear+0x9c>)
   122bc:	4798      	blx	r3
   122be:	0003      	movs	r3, r0
   122c0:	613b      	str	r3, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
   122c2:	687b      	ldr	r3, [r7, #4]
   122c4:	693a      	ldr	r2, [r7, #16]
   122c6:	631a      	str	r2, [r3, #48]	; 0x30
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
   122c8:	687b      	ldr	r3, [r7, #4]
   122ca:	3334      	adds	r3, #52	; 0x34
   122cc:	0018      	movs	r0, r3
   122ce:	2380      	movs	r3, #128	; 0x80
   122d0:	009b      	lsls	r3, r3, #2
   122d2:	001a      	movs	r2, r3
   122d4:	2100      	movs	r1, #0
   122d6:	4b18      	ldr	r3, [pc, #96]	; (12338 <dir_clear+0xa0>)
   122d8:	4798      	blx	r3
		for (n = 0; n < fs->csize && disk_writep(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
   122da:	687b      	ldr	r3, [r7, #4]
   122dc:	3334      	adds	r3, #52	; 0x34
   122de:	60fb      	str	r3, [r7, #12]
   122e0:	2301      	movs	r3, #1
   122e2:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_writep(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   122e4:	2300      	movs	r3, #0
   122e6:	617b      	str	r3, [r7, #20]
   122e8:	e003      	b.n	122f2 <dir_clear+0x5a>
   122ea:	697a      	ldr	r2, [r7, #20]
   122ec:	68bb      	ldr	r3, [r7, #8]
   122ee:	18d3      	adds	r3, r2, r3
   122f0:	617b      	str	r3, [r7, #20]
   122f2:	687b      	ldr	r3, [r7, #4]
   122f4:	895b      	ldrh	r3, [r3, #10]
   122f6:	001a      	movs	r2, r3
   122f8:	697b      	ldr	r3, [r7, #20]
   122fa:	429a      	cmp	r2, r3
   122fc:	d90b      	bls.n	12316 <dir_clear+0x7e>
   122fe:	687b      	ldr	r3, [r7, #4]
   12300:	7858      	ldrb	r0, [r3, #1]
   12302:	693a      	ldr	r2, [r7, #16]
   12304:	697b      	ldr	r3, [r7, #20]
   12306:	18d2      	adds	r2, r2, r3
   12308:	68bb      	ldr	r3, [r7, #8]
   1230a:	b2db      	uxtb	r3, r3
   1230c:	68f9      	ldr	r1, [r7, #12]
   1230e:	4c0b      	ldr	r4, [pc, #44]	; (1233c <dir_clear+0xa4>)
   12310:	47a0      	blx	r4
   12312:	1e03      	subs	r3, r0, #0
   12314:	d0e9      	beq.n	122ea <dir_clear+0x52>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
   12316:	687b      	ldr	r3, [r7, #4]
   12318:	895b      	ldrh	r3, [r3, #10]
   1231a:	001a      	movs	r2, r3
   1231c:	697b      	ldr	r3, [r7, #20]
   1231e:	1ad3      	subs	r3, r2, r3
   12320:	1e5a      	subs	r2, r3, #1
   12322:	4193      	sbcs	r3, r2
   12324:	b2db      	uxtb	r3, r3
}
   12326:	0018      	movs	r0, r3
   12328:	46bd      	mov	sp, r7
   1232a:	b007      	add	sp, #28
   1232c:	bd90      	pop	{r4, r7, pc}
   1232e:	46c0      	nop			; (mov r8, r8)
   12330:	00011a0d 	.word	0x00011a0d
   12334:	00011c21 	.word	0x00011c21
   12338:	00011855 	.word	0x00011855
   1233c:	000114bd 	.word	0x000114bd

00012340 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
   12340:	b580      	push	{r7, lr}
   12342:	b086      	sub	sp, #24
   12344:	af00      	add	r7, sp, #0
   12346:	6078      	str	r0, [r7, #4]
   12348:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
   1234a:	687b      	ldr	r3, [r7, #4]
   1234c:	681b      	ldr	r3, [r3, #0]
   1234e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   12350:	683b      	ldr	r3, [r7, #0]
   12352:	4a3a      	ldr	r2, [pc, #232]	; (1243c <dir_sdi+0xfc>)
   12354:	4293      	cmp	r3, r2
   12356:	d803      	bhi.n	12360 <dir_sdi+0x20>
   12358:	683b      	ldr	r3, [r7, #0]
   1235a:	221f      	movs	r2, #31
   1235c:	4013      	ands	r3, r2
   1235e:	d001      	beq.n	12364 <dir_sdi+0x24>
		return FR_INT_ERR;
   12360:	2302      	movs	r3, #2
   12362:	e066      	b.n	12432 <dir_sdi+0xf2>
	}
	dp->dptr = ofs;				/* Set current offset */
   12364:	687b      	ldr	r3, [r7, #4]
   12366:	683a      	ldr	r2, [r7, #0]
   12368:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
   1236a:	687b      	ldr	r3, [r7, #4]
   1236c:	689b      	ldr	r3, [r3, #8]
   1236e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
   12370:	697b      	ldr	r3, [r7, #20]
   12372:	2b00      	cmp	r3, #0
   12374:	d106      	bne.n	12384 <dir_sdi+0x44>
   12376:	693b      	ldr	r3, [r7, #16]
   12378:	781b      	ldrb	r3, [r3, #0]
   1237a:	2b02      	cmp	r3, #2
   1237c:	d902      	bls.n	12384 <dir_sdi+0x44>
		clst = fs->dirbase;
   1237e:	693b      	ldr	r3, [r7, #16]
   12380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12382:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
   12384:	697b      	ldr	r3, [r7, #20]
   12386:	2b00      	cmp	r3, #0
   12388:	d10c      	bne.n	123a4 <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   1238a:	683b      	ldr	r3, [r7, #0]
   1238c:	095b      	lsrs	r3, r3, #5
   1238e:	693a      	ldr	r2, [r7, #16]
   12390:	8912      	ldrh	r2, [r2, #8]
   12392:	4293      	cmp	r3, r2
   12394:	d301      	bcc.n	1239a <dir_sdi+0x5a>
   12396:	2302      	movs	r3, #2
   12398:	e04b      	b.n	12432 <dir_sdi+0xf2>
		dp->sect = fs->dirbase;
   1239a:	693b      	ldr	r3, [r7, #16]
   1239c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1239e:	687b      	ldr	r3, [r7, #4]
   123a0:	619a      	str	r2, [r3, #24]
   123a2:	e02c      	b.n	123fe <dir_sdi+0xbe>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
   123a4:	693b      	ldr	r3, [r7, #16]
   123a6:	895b      	ldrh	r3, [r3, #10]
   123a8:	025b      	lsls	r3, r3, #9
   123aa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
   123ac:	e01a      	b.n	123e4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   123ae:	687b      	ldr	r3, [r7, #4]
   123b0:	697a      	ldr	r2, [r7, #20]
   123b2:	0011      	movs	r1, r2
   123b4:	0018      	movs	r0, r3
   123b6:	4b22      	ldr	r3, [pc, #136]	; (12440 <dir_sdi+0x100>)
   123b8:	4798      	blx	r3
   123ba:	0003      	movs	r3, r0
   123bc:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   123be:	697b      	ldr	r3, [r7, #20]
   123c0:	3301      	adds	r3, #1
   123c2:	d101      	bne.n	123c8 <dir_sdi+0x88>
   123c4:	2301      	movs	r3, #1
   123c6:	e034      	b.n	12432 <dir_sdi+0xf2>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   123c8:	697b      	ldr	r3, [r7, #20]
   123ca:	2b01      	cmp	r3, #1
   123cc:	d904      	bls.n	123d8 <dir_sdi+0x98>
   123ce:	693b      	ldr	r3, [r7, #16]
   123d0:	699a      	ldr	r2, [r3, #24]
   123d2:	697b      	ldr	r3, [r7, #20]
   123d4:	429a      	cmp	r2, r3
   123d6:	d801      	bhi.n	123dc <dir_sdi+0x9c>
   123d8:	2302      	movs	r3, #2
   123da:	e02a      	b.n	12432 <dir_sdi+0xf2>
			ofs -= csz;
   123dc:	683a      	ldr	r2, [r7, #0]
   123de:	68fb      	ldr	r3, [r7, #12]
   123e0:	1ad3      	subs	r3, r2, r3
   123e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
   123e4:	683a      	ldr	r2, [r7, #0]
   123e6:	68fb      	ldr	r3, [r7, #12]
   123e8:	429a      	cmp	r2, r3
   123ea:	d2e0      	bcs.n	123ae <dir_sdi+0x6e>
		}
		dp->sect = clst2sect(fs, clst);
   123ec:	697a      	ldr	r2, [r7, #20]
   123ee:	693b      	ldr	r3, [r7, #16]
   123f0:	0011      	movs	r1, r2
   123f2:	0018      	movs	r0, r3
   123f4:	4b13      	ldr	r3, [pc, #76]	; (12444 <dir_sdi+0x104>)
   123f6:	4798      	blx	r3
   123f8:	0002      	movs	r2, r0
   123fa:	687b      	ldr	r3, [r7, #4]
   123fc:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
   123fe:	687b      	ldr	r3, [r7, #4]
   12400:	697a      	ldr	r2, [r7, #20]
   12402:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
   12404:	687b      	ldr	r3, [r7, #4]
   12406:	699b      	ldr	r3, [r3, #24]
   12408:	2b00      	cmp	r3, #0
   1240a:	d101      	bne.n	12410 <dir_sdi+0xd0>
   1240c:	2302      	movs	r3, #2
   1240e:	e010      	b.n	12432 <dir_sdi+0xf2>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   12410:	687b      	ldr	r3, [r7, #4]
   12412:	699a      	ldr	r2, [r3, #24]
   12414:	683b      	ldr	r3, [r7, #0]
   12416:	0a5b      	lsrs	r3, r3, #9
   12418:	18d2      	adds	r2, r2, r3
   1241a:	687b      	ldr	r3, [r7, #4]
   1241c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   1241e:	693b      	ldr	r3, [r7, #16]
   12420:	3334      	adds	r3, #52	; 0x34
   12422:	001a      	movs	r2, r3
   12424:	683b      	ldr	r3, [r7, #0]
   12426:	05db      	lsls	r3, r3, #23
   12428:	0ddb      	lsrs	r3, r3, #23
   1242a:	18d2      	adds	r2, r2, r3
   1242c:	687b      	ldr	r3, [r7, #4]
   1242e:	61da      	str	r2, [r3, #28]

	return FR_OK;
   12430:	2300      	movs	r3, #0
}
   12432:	0018      	movs	r0, r3
   12434:	46bd      	mov	sp, r7
   12436:	b006      	add	sp, #24
   12438:	bd80      	pop	{r7, pc}
   1243a:	46c0      	nop			; (mov r8, r8)
   1243c:	001fffff 	.word	0x001fffff
   12440:	00011c59 	.word	0x00011c59
   12444:	00011c21 	.word	0x00011c21

00012448 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   12448:	b580      	push	{r7, lr}
   1244a:	b086      	sub	sp, #24
   1244c:	af00      	add	r7, sp, #0
   1244e:	6078      	str	r0, [r7, #4]
   12450:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
   12452:	687b      	ldr	r3, [r7, #4]
   12454:	681b      	ldr	r3, [r3, #0]
   12456:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
   12458:	687b      	ldr	r3, [r7, #4]
   1245a:	691b      	ldr	r3, [r3, #16]
   1245c:	3320      	adds	r3, #32
   1245e:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   12460:	68fb      	ldr	r3, [r7, #12]
   12462:	4a45      	ldr	r2, [pc, #276]	; (12578 <dir_next+0x130>)
   12464:	4293      	cmp	r3, r2
   12466:	d902      	bls.n	1246e <dir_next+0x26>
   12468:	687b      	ldr	r3, [r7, #4]
   1246a:	2200      	movs	r2, #0
   1246c:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   1246e:	687b      	ldr	r3, [r7, #4]
   12470:	699b      	ldr	r3, [r3, #24]
   12472:	2b00      	cmp	r3, #0
   12474:	d101      	bne.n	1247a <dir_next+0x32>
   12476:	2304      	movs	r3, #4
   12478:	e07a      	b.n	12570 <dir_next+0x128>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   1247a:	68fb      	ldr	r3, [r7, #12]
   1247c:	05db      	lsls	r3, r3, #23
   1247e:	0ddb      	lsrs	r3, r3, #23
   12480:	d000      	beq.n	12484 <dir_next+0x3c>
   12482:	e068      	b.n	12556 <dir_next+0x10e>
		dp->sect++;				/* Next sector */
   12484:	687b      	ldr	r3, [r7, #4]
   12486:	699b      	ldr	r3, [r3, #24]
   12488:	1c5a      	adds	r2, r3, #1
   1248a:	687b      	ldr	r3, [r7, #4]
   1248c:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
   1248e:	687b      	ldr	r3, [r7, #4]
   12490:	695b      	ldr	r3, [r3, #20]
   12492:	2b00      	cmp	r3, #0
   12494:	d10a      	bne.n	124ac <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
   12496:	68fb      	ldr	r3, [r7, #12]
   12498:	095b      	lsrs	r3, r3, #5
   1249a:	693a      	ldr	r2, [r7, #16]
   1249c:	8912      	ldrh	r2, [r2, #8]
   1249e:	4293      	cmp	r3, r2
   124a0:	d359      	bcc.n	12556 <dir_next+0x10e>
				dp->sect = 0; return FR_NO_FILE;
   124a2:	687b      	ldr	r3, [r7, #4]
   124a4:	2200      	movs	r2, #0
   124a6:	619a      	str	r2, [r3, #24]
   124a8:	2304      	movs	r3, #4
   124aa:	e061      	b.n	12570 <dir_next+0x128>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   124ac:	68fb      	ldr	r3, [r7, #12]
   124ae:	0a5b      	lsrs	r3, r3, #9
   124b0:	693a      	ldr	r2, [r7, #16]
   124b2:	8952      	ldrh	r2, [r2, #10]
   124b4:	3a01      	subs	r2, #1
   124b6:	4013      	ands	r3, r2
   124b8:	d14d      	bne.n	12556 <dir_next+0x10e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   124ba:	687a      	ldr	r2, [r7, #4]
   124bc:	687b      	ldr	r3, [r7, #4]
   124be:	695b      	ldr	r3, [r3, #20]
   124c0:	0019      	movs	r1, r3
   124c2:	0010      	movs	r0, r2
   124c4:	4b2d      	ldr	r3, [pc, #180]	; (1257c <dir_next+0x134>)
   124c6:	4798      	blx	r3
   124c8:	0003      	movs	r3, r0
   124ca:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   124cc:	697b      	ldr	r3, [r7, #20]
   124ce:	2b01      	cmp	r3, #1
   124d0:	d801      	bhi.n	124d6 <dir_next+0x8e>
   124d2:	2302      	movs	r3, #2
   124d4:	e04c      	b.n	12570 <dir_next+0x128>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   124d6:	697b      	ldr	r3, [r7, #20]
   124d8:	3301      	adds	r3, #1
   124da:	d101      	bne.n	124e0 <dir_next+0x98>
   124dc:	2301      	movs	r3, #1
   124de:	e047      	b.n	12570 <dir_next+0x128>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
   124e0:	693b      	ldr	r3, [r7, #16]
   124e2:	699a      	ldr	r2, [r3, #24]
   124e4:	697b      	ldr	r3, [r7, #20]
   124e6:	429a      	cmp	r2, r3
   124e8:	d829      	bhi.n	1253e <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
   124ea:	683b      	ldr	r3, [r7, #0]
   124ec:	2b00      	cmp	r3, #0
   124ee:	d104      	bne.n	124fa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
   124f0:	687b      	ldr	r3, [r7, #4]
   124f2:	2200      	movs	r2, #0
   124f4:	619a      	str	r2, [r3, #24]
   124f6:	2304      	movs	r3, #4
   124f8:	e03a      	b.n	12570 <dir_next+0x128>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
   124fa:	687a      	ldr	r2, [r7, #4]
   124fc:	687b      	ldr	r3, [r7, #4]
   124fe:	695b      	ldr	r3, [r3, #20]
   12500:	0019      	movs	r1, r3
   12502:	0010      	movs	r0, r2
   12504:	4b1e      	ldr	r3, [pc, #120]	; (12580 <dir_next+0x138>)
   12506:	4798      	blx	r3
   12508:	0003      	movs	r3, r0
   1250a:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   1250c:	697b      	ldr	r3, [r7, #20]
   1250e:	2b00      	cmp	r3, #0
   12510:	d101      	bne.n	12516 <dir_next+0xce>
   12512:	2307      	movs	r3, #7
   12514:	e02c      	b.n	12570 <dir_next+0x128>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   12516:	697b      	ldr	r3, [r7, #20]
   12518:	2b01      	cmp	r3, #1
   1251a:	d101      	bne.n	12520 <dir_next+0xd8>
   1251c:	2302      	movs	r3, #2
   1251e:	e027      	b.n	12570 <dir_next+0x128>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   12520:	697b      	ldr	r3, [r7, #20]
   12522:	3301      	adds	r3, #1
   12524:	d101      	bne.n	1252a <dir_next+0xe2>
   12526:	2301      	movs	r3, #1
   12528:	e022      	b.n	12570 <dir_next+0x128>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   1252a:	697a      	ldr	r2, [r7, #20]
   1252c:	693b      	ldr	r3, [r7, #16]
   1252e:	0011      	movs	r1, r2
   12530:	0018      	movs	r0, r3
   12532:	4b14      	ldr	r3, [pc, #80]	; (12584 <dir_next+0x13c>)
   12534:	4798      	blx	r3
   12536:	1e03      	subs	r3, r0, #0
   12538:	d001      	beq.n	1253e <dir_next+0xf6>
   1253a:	2301      	movs	r3, #1
   1253c:	e018      	b.n	12570 <dir_next+0x128>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
   1253e:	687b      	ldr	r3, [r7, #4]
   12540:	697a      	ldr	r2, [r7, #20]
   12542:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
   12544:	697a      	ldr	r2, [r7, #20]
   12546:	693b      	ldr	r3, [r7, #16]
   12548:	0011      	movs	r1, r2
   1254a:	0018      	movs	r0, r3
   1254c:	4b0e      	ldr	r3, [pc, #56]	; (12588 <dir_next+0x140>)
   1254e:	4798      	blx	r3
   12550:	0002      	movs	r2, r0
   12552:	687b      	ldr	r3, [r7, #4]
   12554:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
   12556:	687b      	ldr	r3, [r7, #4]
   12558:	68fa      	ldr	r2, [r7, #12]
   1255a:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	3334      	adds	r3, #52	; 0x34
   12560:	001a      	movs	r2, r3
   12562:	68fb      	ldr	r3, [r7, #12]
   12564:	05db      	lsls	r3, r3, #23
   12566:	0ddb      	lsrs	r3, r3, #23
   12568:	18d2      	adds	r2, r2, r3
   1256a:	687b      	ldr	r3, [r7, #4]
   1256c:	61da      	str	r2, [r3, #28]

	return FR_OK;
   1256e:	2300      	movs	r3, #0
}
   12570:	0018      	movs	r0, r3
   12572:	46bd      	mov	sp, r7
   12574:	b006      	add	sp, #24
   12576:	bd80      	pop	{r7, pc}
   12578:	001fffff 	.word	0x001fffff
   1257c:	00011c59 	.word	0x00011c59
   12580:	000120c9 	.word	0x000120c9
   12584:	00012299 	.word	0x00012299
   12588:	00011c21 	.word	0x00011c21

0001258c <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
   1258c:	b590      	push	{r4, r7, lr}
   1258e:	b087      	sub	sp, #28
   12590:	af00      	add	r7, sp, #0
   12592:	6078      	str	r0, [r7, #4]
   12594:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
   12596:	687b      	ldr	r3, [r7, #4]
   12598:	681b      	ldr	r3, [r3, #0]
   1259a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
   1259c:	2317      	movs	r3, #23
   1259e:	18fc      	adds	r4, r7, r3
   125a0:	687b      	ldr	r3, [r7, #4]
   125a2:	2100      	movs	r1, #0
   125a4:	0018      	movs	r0, r3
   125a6:	4b27      	ldr	r3, [pc, #156]	; (12644 <dir_alloc+0xb8>)
   125a8:	4798      	blx	r3
   125aa:	0003      	movs	r3, r0
   125ac:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   125ae:	2317      	movs	r3, #23
   125b0:	18fb      	adds	r3, r7, r3
   125b2:	781b      	ldrb	r3, [r3, #0]
   125b4:	2b00      	cmp	r3, #0
   125b6:	d135      	bne.n	12624 <dir_alloc+0x98>
		n = 0;
   125b8:	2300      	movs	r3, #0
   125ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
   125bc:	687b      	ldr	r3, [r7, #4]
   125be:	699a      	ldr	r2, [r3, #24]
   125c0:	2317      	movs	r3, #23
   125c2:	18fc      	adds	r4, r7, r3
   125c4:	68fb      	ldr	r3, [r7, #12]
   125c6:	0011      	movs	r1, r2
   125c8:	0018      	movs	r0, r3
   125ca:	4b1f      	ldr	r3, [pc, #124]	; (12648 <dir_alloc+0xbc>)
   125cc:	4798      	blx	r3
   125ce:	0003      	movs	r3, r0
   125d0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   125d2:	2317      	movs	r3, #23
   125d4:	18fb      	adds	r3, r7, r3
   125d6:	781b      	ldrb	r3, [r3, #0]
   125d8:	2b00      	cmp	r3, #0
   125da:	d122      	bne.n	12622 <dir_alloc+0x96>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	69db      	ldr	r3, [r3, #28]
   125e0:	781b      	ldrb	r3, [r3, #0]
   125e2:	2be5      	cmp	r3, #229	; 0xe5
   125e4:	d004      	beq.n	125f0 <dir_alloc+0x64>
   125e6:	687b      	ldr	r3, [r7, #4]
   125e8:	69db      	ldr	r3, [r3, #28]
   125ea:	781b      	ldrb	r3, [r3, #0]
   125ec:	2b00      	cmp	r3, #0
   125ee:	d107      	bne.n	12600 <dir_alloc+0x74>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
   125f0:	693b      	ldr	r3, [r7, #16]
   125f2:	3301      	adds	r3, #1
   125f4:	613b      	str	r3, [r7, #16]
   125f6:	693a      	ldr	r2, [r7, #16]
   125f8:	683b      	ldr	r3, [r7, #0]
   125fa:	429a      	cmp	r2, r3
   125fc:	d102      	bne.n	12604 <dir_alloc+0x78>
   125fe:	e011      	b.n	12624 <dir_alloc+0x98>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
   12600:	2300      	movs	r3, #0
   12602:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
   12604:	2317      	movs	r3, #23
   12606:	18fc      	adds	r4, r7, r3
   12608:	687b      	ldr	r3, [r7, #4]
   1260a:	2101      	movs	r1, #1
   1260c:	0018      	movs	r0, r3
   1260e:	4b0f      	ldr	r3, [pc, #60]	; (1264c <dir_alloc+0xc0>)
   12610:	4798      	blx	r3
   12612:	0003      	movs	r3, r0
   12614:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
   12616:	2317      	movs	r3, #23
   12618:	18fb      	adds	r3, r7, r3
   1261a:	781b      	ldrb	r3, [r3, #0]
   1261c:	2b00      	cmp	r3, #0
   1261e:	d0cd      	beq.n	125bc <dir_alloc+0x30>
   12620:	e000      	b.n	12624 <dir_alloc+0x98>
			if (res != FR_OK) break;
   12622:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   12624:	2317      	movs	r3, #23
   12626:	18fb      	adds	r3, r7, r3
   12628:	781b      	ldrb	r3, [r3, #0]
   1262a:	2b04      	cmp	r3, #4
   1262c:	d103      	bne.n	12636 <dir_alloc+0xaa>
   1262e:	2317      	movs	r3, #23
   12630:	18fb      	adds	r3, r7, r3
   12632:	2207      	movs	r2, #7
   12634:	701a      	strb	r2, [r3, #0]
	return res;
   12636:	2317      	movs	r3, #23
   12638:	18fb      	adds	r3, r7, r3
   1263a:	781b      	ldrb	r3, [r3, #0]
}
   1263c:	0018      	movs	r0, r3
   1263e:	46bd      	mov	sp, r7
   12640:	b007      	add	sp, #28
   12642:	bd90      	pop	{r4, r7, pc}
   12644:	00012341 	.word	0x00012341
   12648:	00011a95 	.word	0x00011a95
   1264c:	00012449 	.word	0x00012449

00012650 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
   12650:	b580      	push	{r7, lr}
   12652:	b084      	sub	sp, #16
   12654:	af00      	add	r7, sp, #0
   12656:	6078      	str	r0, [r7, #4]
   12658:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
   1265a:	683b      	ldr	r3, [r7, #0]
   1265c:	331a      	adds	r3, #26
   1265e:	0018      	movs	r0, r3
   12660:	4b0b      	ldr	r3, [pc, #44]	; (12690 <ld_clust+0x40>)
   12662:	4798      	blx	r3
   12664:	0003      	movs	r3, r0
   12666:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
   12668:	687b      	ldr	r3, [r7, #4]
   1266a:	781b      	ldrb	r3, [r3, #0]
   1266c:	2b03      	cmp	r3, #3
   1266e:	d109      	bne.n	12684 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   12670:	683b      	ldr	r3, [r7, #0]
   12672:	3314      	adds	r3, #20
   12674:	0018      	movs	r0, r3
   12676:	4b06      	ldr	r3, [pc, #24]	; (12690 <ld_clust+0x40>)
   12678:	4798      	blx	r3
   1267a:	0003      	movs	r3, r0
   1267c:	041b      	lsls	r3, r3, #16
   1267e:	68fa      	ldr	r2, [r7, #12]
   12680:	4313      	orrs	r3, r2
   12682:	60fb      	str	r3, [r7, #12]
	}

	return cl;
   12684:	68fb      	ldr	r3, [r7, #12]
}
   12686:	0018      	movs	r0, r3
   12688:	46bd      	mov	sp, r7
   1268a:	b004      	add	sp, #16
   1268c:	bd80      	pop	{r7, pc}
   1268e:	46c0      	nop			; (mov r8, r8)
   12690:	00011709 	.word	0x00011709

00012694 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
   12694:	b580      	push	{r7, lr}
   12696:	b084      	sub	sp, #16
   12698:	af00      	add	r7, sp, #0
   1269a:	60f8      	str	r0, [r7, #12]
   1269c:	60b9      	str	r1, [r7, #8]
   1269e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
   126a0:	68bb      	ldr	r3, [r7, #8]
   126a2:	331a      	adds	r3, #26
   126a4:	687a      	ldr	r2, [r7, #4]
   126a6:	b292      	uxth	r2, r2
   126a8:	0011      	movs	r1, r2
   126aa:	0018      	movs	r0, r3
   126ac:	4b09      	ldr	r3, [pc, #36]	; (126d4 <st_clust+0x40>)
   126ae:	4798      	blx	r3
	if (fs->fs_type == FS_FAT32) {
   126b0:	68fb      	ldr	r3, [r7, #12]
   126b2:	781b      	ldrb	r3, [r3, #0]
   126b4:	2b03      	cmp	r3, #3
   126b6:	d109      	bne.n	126cc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   126b8:	68bb      	ldr	r3, [r7, #8]
   126ba:	3314      	adds	r3, #20
   126bc:	001a      	movs	r2, r3
   126be:	687b      	ldr	r3, [r7, #4]
   126c0:	0c1b      	lsrs	r3, r3, #16
   126c2:	b29b      	uxth	r3, r3
   126c4:	0019      	movs	r1, r3
   126c6:	0010      	movs	r0, r2
   126c8:	4b02      	ldr	r3, [pc, #8]	; (126d4 <st_clust+0x40>)
   126ca:	4798      	blx	r3
	}
}
   126cc:	46c0      	nop			; (mov r8, r8)
   126ce:	46bd      	mov	sp, r7
   126d0:	b004      	add	sp, #16
   126d2:	bd80      	pop	{r7, pc}
   126d4:	00011787 	.word	0x00011787

000126d8 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
   126d8:	b590      	push	{r4, r7, lr}
   126da:	b087      	sub	sp, #28
   126dc:	af00      	add	r7, sp, #0
   126de:	6078      	str	r0, [r7, #4]
   126e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
   126e2:	683b      	ldr	r3, [r7, #0]
   126e4:	331a      	adds	r3, #26
   126e6:	0018      	movs	r0, r3
   126e8:	4b39      	ldr	r3, [pc, #228]	; (127d0 <cmp_lfn+0xf8>)
   126ea:	4798      	blx	r3
   126ec:	1e03      	subs	r3, r0, #0
   126ee:	d001      	beq.n	126f4 <cmp_lfn+0x1c>
   126f0:	2300      	movs	r3, #0
   126f2:	e068      	b.n	127c6 <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   126f4:	683b      	ldr	r3, [r7, #0]
   126f6:	781b      	ldrb	r3, [r3, #0]
   126f8:	001a      	movs	r2, r3
   126fa:	233f      	movs	r3, #63	; 0x3f
   126fc:	4013      	ands	r3, r2
   126fe:	1e5a      	subs	r2, r3, #1
   12700:	0013      	movs	r3, r2
   12702:	005b      	lsls	r3, r3, #1
   12704:	189b      	adds	r3, r3, r2
   12706:	009b      	lsls	r3, r3, #2
   12708:	189b      	adds	r3, r3, r2
   1270a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   1270c:	230e      	movs	r3, #14
   1270e:	18fb      	adds	r3, r7, r3
   12710:	2201      	movs	r2, #1
   12712:	801a      	strh	r2, [r3, #0]
   12714:	2300      	movs	r3, #0
   12716:	613b      	str	r3, [r7, #16]
   12718:	e03d      	b.n	12796 <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
   1271a:	4a2e      	ldr	r2, [pc, #184]	; (127d4 <cmp_lfn+0xfc>)
   1271c:	693b      	ldr	r3, [r7, #16]
   1271e:	18d3      	adds	r3, r2, r3
   12720:	781b      	ldrb	r3, [r3, #0]
   12722:	001a      	movs	r2, r3
   12724:	683b      	ldr	r3, [r7, #0]
   12726:	189b      	adds	r3, r3, r2
   12728:	220c      	movs	r2, #12
   1272a:	18bc      	adds	r4, r7, r2
   1272c:	0018      	movs	r0, r3
   1272e:	4b28      	ldr	r3, [pc, #160]	; (127d0 <cmp_lfn+0xf8>)
   12730:	4798      	blx	r3
   12732:	0003      	movs	r3, r0
   12734:	8023      	strh	r3, [r4, #0]
		if (wc != 0) {
   12736:	230e      	movs	r3, #14
   12738:	18fb      	adds	r3, r7, r3
   1273a:	881b      	ldrh	r3, [r3, #0]
   1273c:	2b00      	cmp	r3, #0
   1273e:	d01f      	beq.n	12780 <cmp_lfn+0xa8>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
   12740:	697b      	ldr	r3, [r7, #20]
   12742:	2bfe      	cmp	r3, #254	; 0xfe
   12744:	d813      	bhi.n	1276e <cmp_lfn+0x96>
   12746:	230c      	movs	r3, #12
   12748:	18fb      	adds	r3, r7, r3
   1274a:	881b      	ldrh	r3, [r3, #0]
   1274c:	0018      	movs	r0, r3
   1274e:	4b22      	ldr	r3, [pc, #136]	; (127d8 <cmp_lfn+0x100>)
   12750:	4798      	blx	r3
   12752:	0004      	movs	r4, r0
   12754:	697b      	ldr	r3, [r7, #20]
   12756:	1c5a      	adds	r2, r3, #1
   12758:	617a      	str	r2, [r7, #20]
   1275a:	005b      	lsls	r3, r3, #1
   1275c:	687a      	ldr	r2, [r7, #4]
   1275e:	18d3      	adds	r3, r2, r3
   12760:	881b      	ldrh	r3, [r3, #0]
   12762:	0018      	movs	r0, r3
   12764:	4b1c      	ldr	r3, [pc, #112]	; (127d8 <cmp_lfn+0x100>)
   12766:	4798      	blx	r3
   12768:	0003      	movs	r3, r0
   1276a:	429c      	cmp	r4, r3
   1276c:	d001      	beq.n	12772 <cmp_lfn+0x9a>
				return 0;					/* Not matched */
   1276e:	2300      	movs	r3, #0
   12770:	e029      	b.n	127c6 <cmp_lfn+0xee>
			}
			wc = uc;
   12772:	230e      	movs	r3, #14
   12774:	18fb      	adds	r3, r7, r3
   12776:	220c      	movs	r2, #12
   12778:	18ba      	adds	r2, r7, r2
   1277a:	8812      	ldrh	r2, [r2, #0]
   1277c:	801a      	strh	r2, [r3, #0]
   1277e:	e007      	b.n	12790 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   12780:	230c      	movs	r3, #12
   12782:	18fb      	adds	r3, r7, r3
   12784:	881b      	ldrh	r3, [r3, #0]
   12786:	4a15      	ldr	r2, [pc, #84]	; (127dc <cmp_lfn+0x104>)
   12788:	4293      	cmp	r3, r2
   1278a:	d001      	beq.n	12790 <cmp_lfn+0xb8>
   1278c:	2300      	movs	r3, #0
   1278e:	e01a      	b.n	127c6 <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   12790:	693b      	ldr	r3, [r7, #16]
   12792:	3301      	adds	r3, #1
   12794:	613b      	str	r3, [r7, #16]
   12796:	693b      	ldr	r3, [r7, #16]
   12798:	2b0c      	cmp	r3, #12
   1279a:	d9be      	bls.n	1271a <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
   1279c:	683b      	ldr	r3, [r7, #0]
   1279e:	781b      	ldrb	r3, [r3, #0]
   127a0:	001a      	movs	r2, r3
   127a2:	2340      	movs	r3, #64	; 0x40
   127a4:	4013      	ands	r3, r2
   127a6:	d00d      	beq.n	127c4 <cmp_lfn+0xec>
   127a8:	230e      	movs	r3, #14
   127aa:	18fb      	adds	r3, r7, r3
   127ac:	881b      	ldrh	r3, [r3, #0]
   127ae:	2b00      	cmp	r3, #0
   127b0:	d008      	beq.n	127c4 <cmp_lfn+0xec>
   127b2:	697b      	ldr	r3, [r7, #20]
   127b4:	005b      	lsls	r3, r3, #1
   127b6:	687a      	ldr	r2, [r7, #4]
   127b8:	18d3      	adds	r3, r2, r3
   127ba:	881b      	ldrh	r3, [r3, #0]
   127bc:	2b00      	cmp	r3, #0
   127be:	d001      	beq.n	127c4 <cmp_lfn+0xec>
   127c0:	2300      	movs	r3, #0
   127c2:	e000      	b.n	127c6 <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
   127c4:	2301      	movs	r3, #1
}
   127c6:	0018      	movs	r0, r3
   127c8:	46bd      	mov	sp, r7
   127ca:	b007      	add	sp, #28
   127cc:	bd90      	pop	{r4, r7, pc}
   127ce:	46c0      	nop			; (mov r8, r8)
   127d0:	00011709 	.word	0x00011709
   127d4:	0002863c 	.word	0x0002863c
   127d8:	00014a29 	.word	0x00014a29
   127dc:	0000ffff 	.word	0x0000ffff

000127e0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
   127e0:	b580      	push	{r7, lr}
   127e2:	b088      	sub	sp, #32
   127e4:	af00      	add	r7, sp, #0
   127e6:	60f8      	str	r0, [r7, #12]
   127e8:	60b9      	str	r1, [r7, #8]
   127ea:	0019      	movs	r1, r3
   127ec:	1dfb      	adds	r3, r7, #7
   127ee:	701a      	strb	r2, [r3, #0]
   127f0:	1dbb      	adds	r3, r7, #6
   127f2:	1c0a      	adds	r2, r1, #0
   127f4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
   127f6:	68bb      	ldr	r3, [r7, #8]
   127f8:	330d      	adds	r3, #13
   127fa:	1dba      	adds	r2, r7, #6
   127fc:	7812      	ldrb	r2, [r2, #0]
   127fe:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   12800:	68bb      	ldr	r3, [r7, #8]
   12802:	330b      	adds	r3, #11
   12804:	220f      	movs	r2, #15
   12806:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   12808:	68bb      	ldr	r3, [r7, #8]
   1280a:	330c      	adds	r3, #12
   1280c:	2200      	movs	r2, #0
   1280e:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
   12810:	68bb      	ldr	r3, [r7, #8]
   12812:	331a      	adds	r3, #26
   12814:	2100      	movs	r1, #0
   12816:	0018      	movs	r0, r3
   12818:	4b2c      	ldr	r3, [pc, #176]	; (128cc <put_lfn+0xec>)
   1281a:	4798      	blx	r3

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
   1281c:	1dfb      	adds	r3, r7, #7
   1281e:	781b      	ldrb	r3, [r3, #0]
   12820:	1e5a      	subs	r2, r3, #1
   12822:	0013      	movs	r3, r2
   12824:	005b      	lsls	r3, r3, #1
   12826:	189b      	adds	r3, r3, r2
   12828:	009b      	lsls	r3, r3, #2
   1282a:	189b      	adds	r3, r3, r2
   1282c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   1282e:	2316      	movs	r3, #22
   12830:	18fb      	adds	r3, r7, r3
   12832:	2200      	movs	r2, #0
   12834:	801a      	strh	r2, [r3, #0]
   12836:	2300      	movs	r3, #0
   12838:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
   1283a:	2316      	movs	r3, #22
   1283c:	18fb      	adds	r3, r7, r3
   1283e:	881b      	ldrh	r3, [r3, #0]
   12840:	4a23      	ldr	r2, [pc, #140]	; (128d0 <put_lfn+0xf0>)
   12842:	4293      	cmp	r3, r2
   12844:	d009      	beq.n	1285a <put_lfn+0x7a>
   12846:	69fb      	ldr	r3, [r7, #28]
   12848:	1c5a      	adds	r2, r3, #1
   1284a:	61fa      	str	r2, [r7, #28]
   1284c:	005b      	lsls	r3, r3, #1
   1284e:	68fa      	ldr	r2, [r7, #12]
   12850:	18d2      	adds	r2, r2, r3
   12852:	2316      	movs	r3, #22
   12854:	18fb      	adds	r3, r7, r3
   12856:	8812      	ldrh	r2, [r2, #0]
   12858:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
   1285a:	4a1e      	ldr	r2, [pc, #120]	; (128d4 <put_lfn+0xf4>)
   1285c:	69bb      	ldr	r3, [r7, #24]
   1285e:	18d3      	adds	r3, r2, r3
   12860:	781b      	ldrb	r3, [r3, #0]
   12862:	001a      	movs	r2, r3
   12864:	68bb      	ldr	r3, [r7, #8]
   12866:	189a      	adds	r2, r3, r2
   12868:	2316      	movs	r3, #22
   1286a:	18fb      	adds	r3, r7, r3
   1286c:	881b      	ldrh	r3, [r3, #0]
   1286e:	0019      	movs	r1, r3
   12870:	0010      	movs	r0, r2
   12872:	4b16      	ldr	r3, [pc, #88]	; (128cc <put_lfn+0xec>)
   12874:	4798      	blx	r3
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
   12876:	2316      	movs	r3, #22
   12878:	18fb      	adds	r3, r7, r3
   1287a:	881b      	ldrh	r3, [r3, #0]
   1287c:	2b00      	cmp	r3, #0
   1287e:	d104      	bne.n	1288a <put_lfn+0xaa>
   12880:	2316      	movs	r3, #22
   12882:	18fb      	adds	r3, r7, r3
   12884:	2201      	movs	r2, #1
   12886:	4252      	negs	r2, r2
   12888:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   1288a:	69bb      	ldr	r3, [r7, #24]
   1288c:	3301      	adds	r3, #1
   1288e:	61bb      	str	r3, [r7, #24]
   12890:	69bb      	ldr	r3, [r7, #24]
   12892:	2b0c      	cmp	r3, #12
   12894:	d9d1      	bls.n	1283a <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
   12896:	2316      	movs	r3, #22
   12898:	18fb      	adds	r3, r7, r3
   1289a:	881b      	ldrh	r3, [r3, #0]
   1289c:	4a0c      	ldr	r2, [pc, #48]	; (128d0 <put_lfn+0xf0>)
   1289e:	4293      	cmp	r3, r2
   128a0:	d006      	beq.n	128b0 <put_lfn+0xd0>
   128a2:	69fb      	ldr	r3, [r7, #28]
   128a4:	005b      	lsls	r3, r3, #1
   128a6:	68fa      	ldr	r2, [r7, #12]
   128a8:	18d3      	adds	r3, r2, r3
   128aa:	881b      	ldrh	r3, [r3, #0]
   128ac:	2b00      	cmp	r3, #0
   128ae:	d105      	bne.n	128bc <put_lfn+0xdc>
   128b0:	1dfb      	adds	r3, r7, #7
   128b2:	1dfa      	adds	r2, r7, #7
   128b4:	7812      	ldrb	r2, [r2, #0]
   128b6:	2140      	movs	r1, #64	; 0x40
   128b8:	430a      	orrs	r2, r1
   128ba:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   128bc:	68bb      	ldr	r3, [r7, #8]
   128be:	1dfa      	adds	r2, r7, #7
   128c0:	7812      	ldrb	r2, [r2, #0]
   128c2:	701a      	strb	r2, [r3, #0]
}
   128c4:	46c0      	nop			; (mov r8, r8)
   128c6:	46bd      	mov	sp, r7
   128c8:	b008      	add	sp, #32
   128ca:	bd80      	pop	{r7, pc}
   128cc:	00011787 	.word	0x00011787
   128d0:	0000ffff 	.word	0x0000ffff
   128d4:	0002863c 	.word	0x0002863c

000128d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
   128d8:	b580      	push	{r7, lr}
   128da:	b08c      	sub	sp, #48	; 0x30
   128dc:	af00      	add	r7, sp, #0
   128de:	60f8      	str	r0, [r7, #12]
   128e0:	60b9      	str	r1, [r7, #8]
   128e2:	607a      	str	r2, [r7, #4]
   128e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
   128e6:	68b9      	ldr	r1, [r7, #8]
   128e8:	68fb      	ldr	r3, [r7, #12]
   128ea:	220b      	movs	r2, #11
   128ec:	0018      	movs	r0, r3
   128ee:	4b4e      	ldr	r3, [pc, #312]	; (12a28 <gen_numname+0x150>)
   128f0:	4798      	blx	r3

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
   128f2:	683b      	ldr	r3, [r7, #0]
   128f4:	2b05      	cmp	r3, #5
   128f6:	d931      	bls.n	1295c <gen_numname+0x84>
		sr = seq;
   128f8:	683b      	ldr	r3, [r7, #0]
   128fa:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
   128fc:	e028      	b.n	12950 <gen_numname+0x78>
			wc = *lfn++;
   128fe:	687b      	ldr	r3, [r7, #4]
   12900:	1c9a      	adds	r2, r3, #2
   12902:	607a      	str	r2, [r7, #4]
   12904:	2222      	movs	r2, #34	; 0x22
   12906:	18ba      	adds	r2, r7, r2
   12908:	881b      	ldrh	r3, [r3, #0]
   1290a:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
   1290c:	2300      	movs	r3, #0
   1290e:	62bb      	str	r3, [r7, #40]	; 0x28
   12910:	e01b      	b.n	1294a <gen_numname+0x72>
				sr = (sr << 1) + (wc & 1);
   12912:	69fb      	ldr	r3, [r7, #28]
   12914:	005a      	lsls	r2, r3, #1
   12916:	2322      	movs	r3, #34	; 0x22
   12918:	18fb      	adds	r3, r7, r3
   1291a:	881b      	ldrh	r3, [r3, #0]
   1291c:	2101      	movs	r1, #1
   1291e:	400b      	ands	r3, r1
   12920:	18d3      	adds	r3, r2, r3
   12922:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
   12924:	2322      	movs	r3, #34	; 0x22
   12926:	18fb      	adds	r3, r7, r3
   12928:	2222      	movs	r2, #34	; 0x22
   1292a:	18ba      	adds	r2, r7, r2
   1292c:	8812      	ldrh	r2, [r2, #0]
   1292e:	0852      	lsrs	r2, r2, #1
   12930:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
   12932:	69fa      	ldr	r2, [r7, #28]
   12934:	2380      	movs	r3, #128	; 0x80
   12936:	025b      	lsls	r3, r3, #9
   12938:	4013      	ands	r3, r2
   1293a:	d003      	beq.n	12944 <gen_numname+0x6c>
   1293c:	69fb      	ldr	r3, [r7, #28]
   1293e:	4a3b      	ldr	r2, [pc, #236]	; (12a2c <gen_numname+0x154>)
   12940:	4053      	eors	r3, r2
   12942:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
   12944:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12946:	3301      	adds	r3, #1
   12948:	62bb      	str	r3, [r7, #40]	; 0x28
   1294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1294c:	2b0f      	cmp	r3, #15
   1294e:	d9e0      	bls.n	12912 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC as hash value */
   12950:	687b      	ldr	r3, [r7, #4]
   12952:	881b      	ldrh	r3, [r3, #0]
   12954:	2b00      	cmp	r3, #0
   12956:	d1d2      	bne.n	128fe <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
   12958:	69fb      	ldr	r3, [r7, #28]
   1295a:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
   1295c:	2307      	movs	r3, #7
   1295e:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	b2db      	uxtb	r3, r3
   12964:	220f      	movs	r2, #15
   12966:	4013      	ands	r3, r2
   12968:	b2da      	uxtb	r2, r3
   1296a:	232f      	movs	r3, #47	; 0x2f
   1296c:	18fb      	adds	r3, r7, r3
   1296e:	3230      	adds	r2, #48	; 0x30
   12970:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   12972:	232f      	movs	r3, #47	; 0x2f
   12974:	18fb      	adds	r3, r7, r3
   12976:	781b      	ldrb	r3, [r3, #0]
   12978:	2b39      	cmp	r3, #57	; 0x39
   1297a:	d906      	bls.n	1298a <gen_numname+0xb2>
   1297c:	232f      	movs	r3, #47	; 0x2f
   1297e:	18fb      	adds	r3, r7, r3
   12980:	222f      	movs	r2, #47	; 0x2f
   12982:	18ba      	adds	r2, r7, r2
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	3207      	adds	r2, #7
   12988:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   1298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1298c:	1e5a      	subs	r2, r3, #1
   1298e:	62ba      	str	r2, [r7, #40]	; 0x28
   12990:	2214      	movs	r2, #20
   12992:	18ba      	adds	r2, r7, r2
   12994:	212f      	movs	r1, #47	; 0x2f
   12996:	1879      	adds	r1, r7, r1
   12998:	7809      	ldrb	r1, [r1, #0]
   1299a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   1299c:	683b      	ldr	r3, [r7, #0]
   1299e:	091b      	lsrs	r3, r3, #4
   129a0:	603b      	str	r3, [r7, #0]
	} while (seq);
   129a2:	683b      	ldr	r3, [r7, #0]
   129a4:	2b00      	cmp	r3, #0
   129a6:	d1db      	bne.n	12960 <gen_numname+0x88>
	ns[i] = '~';
   129a8:	2314      	movs	r3, #20
   129aa:	18fa      	adds	r2, r7, r3
   129ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   129ae:	18d3      	adds	r3, r2, r3
   129b0:	227e      	movs	r2, #126	; 0x7e
   129b2:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   129b4:	2300      	movs	r3, #0
   129b6:	627b      	str	r3, [r7, #36]	; 0x24
   129b8:	e014      	b.n	129e4 <gen_numname+0x10c>
		if (dbc_1st(dst[j])) {
   129ba:	68fa      	ldr	r2, [r7, #12]
   129bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129be:	18d3      	adds	r3, r2, r3
   129c0:	781b      	ldrb	r3, [r3, #0]
   129c2:	0018      	movs	r0, r3
   129c4:	4b1a      	ldr	r3, [pc, #104]	; (12a30 <gen_numname+0x158>)
   129c6:	4798      	blx	r3
   129c8:	1e03      	subs	r3, r0, #0
   129ca:	d008      	beq.n	129de <gen_numname+0x106>
			if (j == i - 1) break;
   129cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   129ce:	1e5a      	subs	r2, r3, #1
   129d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129d2:	429a      	cmp	r2, r3
   129d4:	d100      	bne.n	129d8 <gen_numname+0x100>
   129d6:	e00f      	b.n	129f8 <gen_numname+0x120>
			j++;
   129d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129da:	3301      	adds	r3, #1
   129dc:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
   129de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129e0:	3301      	adds	r3, #1
   129e2:	627b      	str	r3, [r7, #36]	; 0x24
   129e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   129e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   129e8:	429a      	cmp	r2, r3
   129ea:	d205      	bcs.n	129f8 <gen_numname+0x120>
   129ec:	68fa      	ldr	r2, [r7, #12]
   129ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129f0:	18d3      	adds	r3, r2, r3
   129f2:	781b      	ldrb	r3, [r3, #0]
   129f4:	2b20      	cmp	r3, #32
   129f6:	d1e0      	bne.n	129ba <gen_numname+0xe2>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   129f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129fa:	1c5a      	adds	r2, r3, #1
   129fc:	627a      	str	r2, [r7, #36]	; 0x24
   129fe:	68fa      	ldr	r2, [r7, #12]
   12a00:	18d2      	adds	r2, r2, r3
   12a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12a04:	2b07      	cmp	r3, #7
   12a06:	d806      	bhi.n	12a16 <gen_numname+0x13e>
   12a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12a0a:	1c59      	adds	r1, r3, #1
   12a0c:	62b9      	str	r1, [r7, #40]	; 0x28
   12a0e:	2114      	movs	r1, #20
   12a10:	1879      	adds	r1, r7, r1
   12a12:	5ccb      	ldrb	r3, [r1, r3]
   12a14:	e000      	b.n	12a18 <gen_numname+0x140>
   12a16:	2320      	movs	r3, #32
   12a18:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   12a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12a1c:	2b07      	cmp	r3, #7
   12a1e:	d9eb      	bls.n	129f8 <gen_numname+0x120>
}
   12a20:	46c0      	nop			; (mov r8, r8)
   12a22:	46bd      	mov	sp, r7
   12a24:	b00c      	add	sp, #48	; 0x30
   12a26:	bd80      	pop	{r7, pc}
   12a28:	00011817 	.word	0x00011817
   12a2c:	00011021 	.word	0x00011021
   12a30:	00011901 	.word	0x00011901

00012a34 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
   12a34:	b580      	push	{r7, lr}
   12a36:	b084      	sub	sp, #16
   12a38:	af00      	add	r7, sp, #0
   12a3a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   12a3c:	230f      	movs	r3, #15
   12a3e:	18fb      	adds	r3, r7, r3
   12a40:	2200      	movs	r2, #0
   12a42:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   12a44:	230b      	movs	r3, #11
   12a46:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
   12a48:	230f      	movs	r3, #15
   12a4a:	18fb      	adds	r3, r7, r3
   12a4c:	781b      	ldrb	r3, [r3, #0]
   12a4e:	b2da      	uxtb	r2, r3
   12a50:	0852      	lsrs	r2, r2, #1
   12a52:	01db      	lsls	r3, r3, #7
   12a54:	4313      	orrs	r3, r2
   12a56:	b2d9      	uxtb	r1, r3
   12a58:	687b      	ldr	r3, [r7, #4]
   12a5a:	1c5a      	adds	r2, r3, #1
   12a5c:	607a      	str	r2, [r7, #4]
   12a5e:	781a      	ldrb	r2, [r3, #0]
   12a60:	230f      	movs	r3, #15
   12a62:	18fb      	adds	r3, r7, r3
   12a64:	188a      	adds	r2, r1, r2
   12a66:	701a      	strb	r2, [r3, #0]
	} while (--n);
   12a68:	68bb      	ldr	r3, [r7, #8]
   12a6a:	3b01      	subs	r3, #1
   12a6c:	60bb      	str	r3, [r7, #8]
   12a6e:	68bb      	ldr	r3, [r7, #8]
   12a70:	2b00      	cmp	r3, #0
   12a72:	d1e9      	bne.n	12a48 <sum_sfn+0x14>
	return sum;
   12a74:	230f      	movs	r3, #15
   12a76:	18fb      	adds	r3, r7, r3
   12a78:	781b      	ldrb	r3, [r3, #0]
}
   12a7a:	0018      	movs	r0, r3
   12a7c:	46bd      	mov	sp, r7
   12a7e:	b004      	add	sp, #16
   12a80:	bd80      	pop	{r7, pc}
	...

00012a84 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
   12a84:	b590      	push	{r4, r7, lr}
   12a86:	b087      	sub	sp, #28
   12a88:	af00      	add	r7, sp, #0
   12a8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   12a8c:	687b      	ldr	r3, [r7, #4]
   12a8e:	681b      	ldr	r3, [r3, #0]
   12a90:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
   12a92:	2317      	movs	r3, #23
   12a94:	18fc      	adds	r4, r7, r3
   12a96:	687b      	ldr	r3, [r7, #4]
   12a98:	2100      	movs	r1, #0
   12a9a:	0018      	movs	r0, r3
   12a9c:	4b7c      	ldr	r3, [pc, #496]	; (12c90 <dir_find+0x20c>)
   12a9e:	4798      	blx	r3
   12aa0:	0003      	movs	r3, r0
   12aa2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   12aa4:	2317      	movs	r3, #23
   12aa6:	18fb      	adds	r3, r7, r3
   12aa8:	781b      	ldrb	r3, [r3, #0]
   12aaa:	2b00      	cmp	r3, #0
   12aac:	d003      	beq.n	12ab6 <dir_find+0x32>
   12aae:	2317      	movs	r3, #23
   12ab0:	18fb      	adds	r3, r7, r3
   12ab2:	781b      	ldrb	r3, [r3, #0]
   12ab4:	e0e8      	b.n	12c88 <dir_find+0x204>
		return res;
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   12ab6:	2314      	movs	r3, #20
   12ab8:	18fb      	adds	r3, r7, r3
   12aba:	22ff      	movs	r2, #255	; 0xff
   12abc:	701a      	strb	r2, [r3, #0]
   12abe:	2315      	movs	r3, #21
   12ac0:	18fb      	adds	r3, r7, r3
   12ac2:	2214      	movs	r2, #20
   12ac4:	18ba      	adds	r2, r7, r2
   12ac6:	7812      	ldrb	r2, [r2, #0]
   12ac8:	701a      	strb	r2, [r3, #0]
   12aca:	687b      	ldr	r3, [r7, #4]
   12acc:	2201      	movs	r2, #1
   12ace:	4252      	negs	r2, r2
   12ad0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
   12ad2:	687b      	ldr	r3, [r7, #4]
   12ad4:	699a      	ldr	r2, [r3, #24]
   12ad6:	2317      	movs	r3, #23
   12ad8:	18fc      	adds	r4, r7, r3
   12ada:	693b      	ldr	r3, [r7, #16]
   12adc:	0011      	movs	r1, r2
   12ade:	0018      	movs	r0, r3
   12ae0:	4b6c      	ldr	r3, [pc, #432]	; (12c94 <dir_find+0x210>)
   12ae2:	4798      	blx	r3
   12ae4:	0003      	movs	r3, r0
   12ae6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   12ae8:	2317      	movs	r3, #23
   12aea:	18fb      	adds	r3, r7, r3
   12aec:	781b      	ldrb	r3, [r3, #0]
   12aee:	2b00      	cmp	r3, #0
   12af0:	d000      	beq.n	12af4 <dir_find+0x70>
   12af2:	e0c1      	b.n	12c78 <dir_find+0x1f4>
		c = dp->dir[DIR_Name];
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	69da      	ldr	r2, [r3, #28]
   12af8:	2316      	movs	r3, #22
   12afa:	18fb      	adds	r3, r7, r3
   12afc:	7812      	ldrb	r2, [r2, #0]
   12afe:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   12b00:	2316      	movs	r3, #22
   12b02:	18fb      	adds	r3, r7, r3
   12b04:	781b      	ldrb	r3, [r3, #0]
   12b06:	2b00      	cmp	r3, #0
   12b08:	d104      	bne.n	12b14 <dir_find+0x90>
   12b0a:	2317      	movs	r3, #23
   12b0c:	18fb      	adds	r3, r7, r3
   12b0e:	2204      	movs	r2, #4
   12b10:	701a      	strb	r2, [r3, #0]
   12b12:	e0b6      	b.n	12c82 <dir_find+0x1fe>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
   12b14:	687b      	ldr	r3, [r7, #4]
   12b16:	69db      	ldr	r3, [r3, #28]
   12b18:	330b      	adds	r3, #11
   12b1a:	781a      	ldrb	r2, [r3, #0]
   12b1c:	230f      	movs	r3, #15
   12b1e:	18fb      	adds	r3, r7, r3
   12b20:	213f      	movs	r1, #63	; 0x3f
   12b22:	400a      	ands	r2, r1
   12b24:	701a      	strb	r2, [r3, #0]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	220f      	movs	r2, #15
   12b2a:	18ba      	adds	r2, r7, r2
   12b2c:	7812      	ldrb	r2, [r2, #0]
   12b2e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   12b30:	2316      	movs	r3, #22
   12b32:	18fb      	adds	r3, r7, r3
   12b34:	781b      	ldrb	r3, [r3, #0]
   12b36:	2be5      	cmp	r3, #229	; 0xe5
   12b38:	d00a      	beq.n	12b50 <dir_find+0xcc>
   12b3a:	230f      	movs	r3, #15
   12b3c:	18fb      	adds	r3, r7, r3
   12b3e:	781b      	ldrb	r3, [r3, #0]
   12b40:	2208      	movs	r2, #8
   12b42:	4013      	ands	r3, r2
   12b44:	d00d      	beq.n	12b62 <dir_find+0xde>
   12b46:	230f      	movs	r3, #15
   12b48:	18fb      	adds	r3, r7, r3
   12b4a:	781b      	ldrb	r3, [r3, #0]
   12b4c:	2b0f      	cmp	r3, #15
   12b4e:	d008      	beq.n	12b62 <dir_find+0xde>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   12b50:	2315      	movs	r3, #21
   12b52:	18fb      	adds	r3, r7, r3
   12b54:	22ff      	movs	r2, #255	; 0xff
   12b56:	701a      	strb	r2, [r3, #0]
   12b58:	687b      	ldr	r3, [r7, #4]
   12b5a:	2201      	movs	r2, #1
   12b5c:	4252      	negs	r2, r2
   12b5e:	62da      	str	r2, [r3, #44]	; 0x2c
   12b60:	e07a      	b.n	12c58 <dir_find+0x1d4>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   12b62:	230f      	movs	r3, #15
   12b64:	18fb      	adds	r3, r7, r3
   12b66:	781b      	ldrb	r3, [r3, #0]
   12b68:	2b0f      	cmp	r3, #15
   12b6a:	d14b      	bne.n	12c04 <dir_find+0x180>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
   12b6c:	687b      	ldr	r3, [r7, #4]
   12b6e:	222b      	movs	r2, #43	; 0x2b
   12b70:	5c9b      	ldrb	r3, [r3, r2]
   12b72:	001a      	movs	r2, r3
   12b74:	2340      	movs	r3, #64	; 0x40
   12b76:	4013      	ands	r3, r2
   12b78:	d000      	beq.n	12b7c <dir_find+0xf8>
   12b7a:	e06d      	b.n	12c58 <dir_find+0x1d4>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
   12b7c:	2316      	movs	r3, #22
   12b7e:	18fb      	adds	r3, r7, r3
   12b80:	781b      	ldrb	r3, [r3, #0]
   12b82:	2240      	movs	r2, #64	; 0x40
   12b84:	4013      	ands	r3, r2
   12b86:	d017      	beq.n	12bb8 <dir_find+0x134>
						sum = dp->dir[LDIR_Chksum];
   12b88:	687b      	ldr	r3, [r7, #4]
   12b8a:	69da      	ldr	r2, [r3, #28]
   12b8c:	2314      	movs	r3, #20
   12b8e:	18fb      	adds	r3, r7, r3
   12b90:	7b52      	ldrb	r2, [r2, #13]
   12b92:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
   12b94:	2316      	movs	r3, #22
   12b96:	18fb      	adds	r3, r7, r3
   12b98:	2216      	movs	r2, #22
   12b9a:	18ba      	adds	r2, r7, r2
   12b9c:	7812      	ldrb	r2, [r2, #0]
   12b9e:	2140      	movs	r1, #64	; 0x40
   12ba0:	438a      	bics	r2, r1
   12ba2:	701a      	strb	r2, [r3, #0]
   12ba4:	2315      	movs	r3, #21
   12ba6:	18fb      	adds	r3, r7, r3
   12ba8:	2216      	movs	r2, #22
   12baa:	18ba      	adds	r2, r7, r2
   12bac:	7812      	ldrb	r2, [r2, #0]
   12bae:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
   12bb0:	687b      	ldr	r3, [r7, #4]
   12bb2:	691a      	ldr	r2, [r3, #16]
   12bb4:	687b      	ldr	r3, [r7, #4]
   12bb6:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   12bb8:	2316      	movs	r3, #22
   12bba:	18fa      	adds	r2, r7, r3
   12bbc:	2315      	movs	r3, #21
   12bbe:	18fb      	adds	r3, r7, r3
   12bc0:	7812      	ldrb	r2, [r2, #0]
   12bc2:	781b      	ldrb	r3, [r3, #0]
   12bc4:	429a      	cmp	r2, r3
   12bc6:	d118      	bne.n	12bfa <dir_find+0x176>
   12bc8:	687b      	ldr	r3, [r7, #4]
   12bca:	69db      	ldr	r3, [r3, #28]
   12bcc:	330d      	adds	r3, #13
   12bce:	781b      	ldrb	r3, [r3, #0]
   12bd0:	2214      	movs	r2, #20
   12bd2:	18ba      	adds	r2, r7, r2
   12bd4:	7812      	ldrb	r2, [r2, #0]
   12bd6:	429a      	cmp	r2, r3
   12bd8:	d10f      	bne.n	12bfa <dir_find+0x176>
   12bda:	693b      	ldr	r3, [r7, #16]
   12bdc:	68da      	ldr	r2, [r3, #12]
   12bde:	687b      	ldr	r3, [r7, #4]
   12be0:	69db      	ldr	r3, [r3, #28]
   12be2:	0019      	movs	r1, r3
   12be4:	0010      	movs	r0, r2
   12be6:	4b2c      	ldr	r3, [pc, #176]	; (12c98 <dir_find+0x214>)
   12be8:	4798      	blx	r3
   12bea:	1e03      	subs	r3, r0, #0
   12bec:	d005      	beq.n	12bfa <dir_find+0x176>
   12bee:	2315      	movs	r3, #21
   12bf0:	18fb      	adds	r3, r7, r3
   12bf2:	781b      	ldrb	r3, [r3, #0]
   12bf4:	3b01      	subs	r3, #1
   12bf6:	b2da      	uxtb	r2, r3
   12bf8:	e000      	b.n	12bfc <dir_find+0x178>
   12bfa:	22ff      	movs	r2, #255	; 0xff
   12bfc:	2315      	movs	r3, #21
   12bfe:	18fb      	adds	r3, r7, r3
   12c00:	701a      	strb	r2, [r3, #0]
   12c02:	e029      	b.n	12c58 <dir_find+0x1d4>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
   12c04:	2315      	movs	r3, #21
   12c06:	18fb      	adds	r3, r7, r3
   12c08:	781b      	ldrb	r3, [r3, #0]
   12c0a:	2b00      	cmp	r3, #0
   12c0c:	d10b      	bne.n	12c26 <dir_find+0x1a2>
   12c0e:	687b      	ldr	r3, [r7, #4]
   12c10:	69db      	ldr	r3, [r3, #28]
   12c12:	0018      	movs	r0, r3
   12c14:	4b21      	ldr	r3, [pc, #132]	; (12c9c <dir_find+0x218>)
   12c16:	4798      	blx	r3
   12c18:	0003      	movs	r3, r0
   12c1a:	001a      	movs	r2, r3
   12c1c:	2314      	movs	r3, #20
   12c1e:	18fb      	adds	r3, r7, r3
   12c20:	781b      	ldrb	r3, [r3, #0]
   12c22:	4293      	cmp	r3, r2
   12c24:	d02a      	beq.n	12c7c <dir_find+0x1f8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
   12c26:	687b      	ldr	r3, [r7, #4]
   12c28:	222b      	movs	r2, #43	; 0x2b
   12c2a:	5c9b      	ldrb	r3, [r3, r2]
   12c2c:	001a      	movs	r2, r3
   12c2e:	2301      	movs	r3, #1
   12c30:	4013      	ands	r3, r2
   12c32:	d109      	bne.n	12c48 <dir_find+0x1c4>
   12c34:	687b      	ldr	r3, [r7, #4]
   12c36:	69d8      	ldr	r0, [r3, #28]
   12c38:	687b      	ldr	r3, [r7, #4]
   12c3a:	3320      	adds	r3, #32
   12c3c:	220b      	movs	r2, #11
   12c3e:	0019      	movs	r1, r3
   12c40:	4b17      	ldr	r3, [pc, #92]	; (12ca0 <dir_find+0x21c>)
   12c42:	4798      	blx	r3
   12c44:	1e03      	subs	r3, r0, #0
   12c46:	d01b      	beq.n	12c80 <dir_find+0x1fc>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   12c48:	2315      	movs	r3, #21
   12c4a:	18fb      	adds	r3, r7, r3
   12c4c:	22ff      	movs	r2, #255	; 0xff
   12c4e:	701a      	strb	r2, [r3, #0]
   12c50:	687b      	ldr	r3, [r7, #4]
   12c52:	2201      	movs	r2, #1
   12c54:	4252      	negs	r2, r2
   12c56:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
   12c58:	2317      	movs	r3, #23
   12c5a:	18fc      	adds	r4, r7, r3
   12c5c:	687b      	ldr	r3, [r7, #4]
   12c5e:	2100      	movs	r1, #0
   12c60:	0018      	movs	r0, r3
   12c62:	4b10      	ldr	r3, [pc, #64]	; (12ca4 <dir_find+0x220>)
   12c64:	4798      	blx	r3
   12c66:	0003      	movs	r3, r0
   12c68:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   12c6a:	2317      	movs	r3, #23
   12c6c:	18fb      	adds	r3, r7, r3
   12c6e:	781b      	ldrb	r3, [r3, #0]
   12c70:	2b00      	cmp	r3, #0
   12c72:	d100      	bne.n	12c76 <dir_find+0x1f2>
   12c74:	e72d      	b.n	12ad2 <dir_find+0x4e>
   12c76:	e004      	b.n	12c82 <dir_find+0x1fe>
		if (res != FR_OK) break;
   12c78:	46c0      	nop			; (mov r8, r8)
   12c7a:	e002      	b.n	12c82 <dir_find+0x1fe>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
   12c7c:	46c0      	nop			; (mov r8, r8)
   12c7e:	e000      	b.n	12c82 <dir_find+0x1fe>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
   12c80:	46c0      	nop			; (mov r8, r8)

	return res;
   12c82:	2317      	movs	r3, #23
   12c84:	18fb      	adds	r3, r7, r3
   12c86:	781b      	ldrb	r3, [r3, #0]
}
   12c88:	0018      	movs	r0, r3
   12c8a:	46bd      	mov	sp, r7
   12c8c:	b007      	add	sp, #28
   12c8e:	bd90      	pop	{r4, r7, pc}
   12c90:	00012341 	.word	0x00012341
   12c94:	00011a95 	.word	0x00011a95
   12c98:	000126d9 	.word	0x000126d9
   12c9c:	00012a35 	.word	0x00012a35
   12ca0:	00011885 	.word	0x00011885
   12ca4:	00012449 	.word	0x00012449

00012ca8 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
   12ca8:	b590      	push	{r4, r7, lr}
   12caa:	b08d      	sub	sp, #52	; 0x34
   12cac:	af00      	add	r7, sp, #0
   12cae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   12cb0:	687b      	ldr	r3, [r7, #4]
   12cb2:	681b      	ldr	r3, [r3, #0]
   12cb4:	61fb      	str	r3, [r7, #28]
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   12cb6:	687b      	ldr	r3, [r7, #4]
   12cb8:	222b      	movs	r2, #43	; 0x2b
   12cba:	5c9b      	ldrb	r3, [r3, r2]
   12cbc:	001a      	movs	r2, r3
   12cbe:	23a0      	movs	r3, #160	; 0xa0
   12cc0:	4013      	ands	r3, r2
   12cc2:	d001      	beq.n	12cc8 <dir_register+0x20>
   12cc4:	2306      	movs	r3, #6
   12cc6:	e103      	b.n	12ed0 <dir_register+0x228>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
   12cc8:	2300      	movs	r3, #0
   12cca:	627b      	str	r3, [r7, #36]	; 0x24
   12ccc:	e002      	b.n	12cd4 <dir_register+0x2c>
   12cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12cd0:	3301      	adds	r3, #1
   12cd2:	627b      	str	r3, [r7, #36]	; 0x24
   12cd4:	69fb      	ldr	r3, [r7, #28]
   12cd6:	68da      	ldr	r2, [r3, #12]
   12cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12cda:	005b      	lsls	r3, r3, #1
   12cdc:	18d3      	adds	r3, r2, r3
   12cde:	881b      	ldrh	r3, [r3, #0]
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	d1f4      	bne.n	12cce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
   12ce4:	687b      	ldr	r3, [r7, #4]
   12ce6:	3320      	adds	r3, #32
   12ce8:	0019      	movs	r1, r3
   12cea:	230c      	movs	r3, #12
   12cec:	18fb      	adds	r3, r7, r3
   12cee:	220c      	movs	r2, #12
   12cf0:	0018      	movs	r0, r3
   12cf2:	4b79      	ldr	r3, [pc, #484]	; (12ed8 <dir_register+0x230>)
   12cf4:	4798      	blx	r3
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   12cf6:	230c      	movs	r3, #12
   12cf8:	18fb      	adds	r3, r7, r3
   12cfa:	7adb      	ldrb	r3, [r3, #11]
   12cfc:	001a      	movs	r2, r3
   12cfe:	2301      	movs	r3, #1
   12d00:	4013      	ands	r3, r2
   12d02:	d039      	beq.n	12d78 <dir_register+0xd0>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
   12d04:	687b      	ldr	r3, [r7, #4]
   12d06:	222b      	movs	r2, #43	; 0x2b
   12d08:	2140      	movs	r1, #64	; 0x40
   12d0a:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
   12d0c:	2301      	movs	r3, #1
   12d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   12d10:	e019      	b.n	12d46 <dir_register+0x9e>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
   12d12:	687b      	ldr	r3, [r7, #4]
   12d14:	3320      	adds	r3, #32
   12d16:	0018      	movs	r0, r3
   12d18:	69fb      	ldr	r3, [r7, #28]
   12d1a:	68da      	ldr	r2, [r3, #12]
   12d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d1e:	210c      	movs	r1, #12
   12d20:	1879      	adds	r1, r7, r1
   12d22:	4c6e      	ldr	r4, [pc, #440]	; (12edc <dir_register+0x234>)
   12d24:	47a0      	blx	r4
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
   12d26:	232f      	movs	r3, #47	; 0x2f
   12d28:	18fc      	adds	r4, r7, r3
   12d2a:	687b      	ldr	r3, [r7, #4]
   12d2c:	0018      	movs	r0, r3
   12d2e:	4b6c      	ldr	r3, [pc, #432]	; (12ee0 <dir_register+0x238>)
   12d30:	4798      	blx	r3
   12d32:	0003      	movs	r3, r0
   12d34:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   12d36:	232f      	movs	r3, #47	; 0x2f
   12d38:	18fb      	adds	r3, r7, r3
   12d3a:	781b      	ldrb	r3, [r3, #0]
   12d3c:	2b00      	cmp	r3, #0
   12d3e:	d106      	bne.n	12d4e <dir_register+0xa6>
		for (n = 1; n < 100; n++) {
   12d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d42:	3301      	adds	r3, #1
   12d44:	62bb      	str	r3, [r7, #40]	; 0x28
   12d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d48:	2b63      	cmp	r3, #99	; 0x63
   12d4a:	d9e2      	bls.n	12d12 <dir_register+0x6a>
   12d4c:	e000      	b.n	12d50 <dir_register+0xa8>
			if (res != FR_OK) break;
   12d4e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   12d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d52:	2b64      	cmp	r3, #100	; 0x64
   12d54:	d101      	bne.n	12d5a <dir_register+0xb2>
   12d56:	2307      	movs	r3, #7
   12d58:	e0ba      	b.n	12ed0 <dir_register+0x228>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   12d5a:	232f      	movs	r3, #47	; 0x2f
   12d5c:	18fb      	adds	r3, r7, r3
   12d5e:	781b      	ldrb	r3, [r3, #0]
   12d60:	2b04      	cmp	r3, #4
   12d62:	d003      	beq.n	12d6c <dir_register+0xc4>
   12d64:	232f      	movs	r3, #47	; 0x2f
   12d66:	18fb      	adds	r3, r7, r3
   12d68:	781b      	ldrb	r3, [r3, #0]
   12d6a:	e0b1      	b.n	12ed0 <dir_register+0x228>
		dp->fn[NSFLAG] = sn[NSFLAG];
   12d6c:	230c      	movs	r3, #12
   12d6e:	18fb      	adds	r3, r7, r3
   12d70:	7ad9      	ldrb	r1, [r3, #11]
   12d72:	687b      	ldr	r3, [r7, #4]
   12d74:	222b      	movs	r2, #43	; 0x2b
   12d76:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
   12d78:	230c      	movs	r3, #12
   12d7a:	18fb      	adds	r3, r7, r3
   12d7c:	7adb      	ldrb	r3, [r3, #11]
   12d7e:	001a      	movs	r2, r3
   12d80:	2302      	movs	r3, #2
   12d82:	4013      	ands	r3, r2
   12d84:	d009      	beq.n	12d9a <dir_register+0xf2>
   12d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d88:	330c      	adds	r3, #12
   12d8a:	001a      	movs	r2, r3
   12d8c:	4b55      	ldr	r3, [pc, #340]	; (12ee4 <dir_register+0x23c>)
   12d8e:	210d      	movs	r1, #13
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	0003      	movs	r3, r0
   12d96:	3301      	adds	r3, #1
   12d98:	e000      	b.n	12d9c <dir_register+0xf4>
   12d9a:	2301      	movs	r3, #1
   12d9c:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
   12d9e:	232f      	movs	r3, #47	; 0x2f
   12da0:	18fc      	adds	r4, r7, r3
   12da2:	6a3a      	ldr	r2, [r7, #32]
   12da4:	687b      	ldr	r3, [r7, #4]
   12da6:	0011      	movs	r1, r2
   12da8:	0018      	movs	r0, r3
   12daa:	4b4f      	ldr	r3, [pc, #316]	; (12ee8 <dir_register+0x240>)
   12dac:	4798      	blx	r3
   12dae:	0003      	movs	r3, r0
   12db0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
   12db2:	232f      	movs	r3, #47	; 0x2f
   12db4:	18fb      	adds	r3, r7, r3
   12db6:	781b      	ldrb	r3, [r3, #0]
   12db8:	2b00      	cmp	r3, #0
   12dba:	d155      	bne.n	12e68 <dir_register+0x1c0>
   12dbc:	6a3b      	ldr	r3, [r7, #32]
   12dbe:	3b01      	subs	r3, #1
   12dc0:	623b      	str	r3, [r7, #32]
   12dc2:	6a3b      	ldr	r3, [r7, #32]
   12dc4:	2b00      	cmp	r3, #0
   12dc6:	d04f      	beq.n	12e68 <dir_register+0x1c0>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
   12dc8:	687b      	ldr	r3, [r7, #4]
   12dca:	691a      	ldr	r2, [r3, #16]
   12dcc:	6a3b      	ldr	r3, [r7, #32]
   12dce:	015b      	lsls	r3, r3, #5
   12dd0:	1ad2      	subs	r2, r2, r3
   12dd2:	232f      	movs	r3, #47	; 0x2f
   12dd4:	18fc      	adds	r4, r7, r3
   12dd6:	687b      	ldr	r3, [r7, #4]
   12dd8:	0011      	movs	r1, r2
   12dda:	0018      	movs	r0, r3
   12ddc:	4b43      	ldr	r3, [pc, #268]	; (12eec <dir_register+0x244>)
   12dde:	4798      	blx	r3
   12de0:	0003      	movs	r3, r0
   12de2:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   12de4:	232f      	movs	r3, #47	; 0x2f
   12de6:	18fb      	adds	r3, r7, r3
   12de8:	781b      	ldrb	r3, [r3, #0]
   12dea:	2b00      	cmp	r3, #0
   12dec:	d13c      	bne.n	12e68 <dir_register+0x1c0>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
   12dee:	687b      	ldr	r3, [r7, #4]
   12df0:	3320      	adds	r3, #32
   12df2:	221b      	movs	r2, #27
   12df4:	18bc      	adds	r4, r7, r2
   12df6:	0018      	movs	r0, r3
   12df8:	4b3d      	ldr	r3, [pc, #244]	; (12ef0 <dir_register+0x248>)
   12dfa:	4798      	blx	r3
   12dfc:	0003      	movs	r3, r0
   12dfe:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
   12e00:	687b      	ldr	r3, [r7, #4]
   12e02:	699a      	ldr	r2, [r3, #24]
   12e04:	232f      	movs	r3, #47	; 0x2f
   12e06:	18fc      	adds	r4, r7, r3
   12e08:	69fb      	ldr	r3, [r7, #28]
   12e0a:	0011      	movs	r1, r2
   12e0c:	0018      	movs	r0, r3
   12e0e:	4b39      	ldr	r3, [pc, #228]	; (12ef4 <dir_register+0x24c>)
   12e10:	4798      	blx	r3
   12e12:	0003      	movs	r3, r0
   12e14:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   12e16:	232f      	movs	r3, #47	; 0x2f
   12e18:	18fb      	adds	r3, r7, r3
   12e1a:	781b      	ldrb	r3, [r3, #0]
   12e1c:	2b00      	cmp	r3, #0
   12e1e:	d122      	bne.n	12e66 <dir_register+0x1be>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
   12e20:	69fb      	ldr	r3, [r7, #28]
   12e22:	68d8      	ldr	r0, [r3, #12]
   12e24:	687b      	ldr	r3, [r7, #4]
   12e26:	69d9      	ldr	r1, [r3, #28]
   12e28:	6a3b      	ldr	r3, [r7, #32]
   12e2a:	b2da      	uxtb	r2, r3
   12e2c:	231b      	movs	r3, #27
   12e2e:	18fb      	adds	r3, r7, r3
   12e30:	781b      	ldrb	r3, [r3, #0]
   12e32:	4c31      	ldr	r4, [pc, #196]	; (12ef8 <dir_register+0x250>)
   12e34:	47a0      	blx	r4
				fs->wflag = 1;
   12e36:	69fb      	ldr	r3, [r7, #28]
   12e38:	2201      	movs	r2, #1
   12e3a:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
   12e3c:	232f      	movs	r3, #47	; 0x2f
   12e3e:	18fc      	adds	r4, r7, r3
   12e40:	687b      	ldr	r3, [r7, #4]
   12e42:	2100      	movs	r1, #0
   12e44:	0018      	movs	r0, r3
   12e46:	4b2d      	ldr	r3, [pc, #180]	; (12efc <dir_register+0x254>)
   12e48:	4798      	blx	r3
   12e4a:	0003      	movs	r3, r0
   12e4c:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
   12e4e:	232f      	movs	r3, #47	; 0x2f
   12e50:	18fb      	adds	r3, r7, r3
   12e52:	781b      	ldrb	r3, [r3, #0]
   12e54:	2b00      	cmp	r3, #0
   12e56:	d107      	bne.n	12e68 <dir_register+0x1c0>
   12e58:	6a3b      	ldr	r3, [r7, #32]
   12e5a:	3b01      	subs	r3, #1
   12e5c:	623b      	str	r3, [r7, #32]
   12e5e:	6a3b      	ldr	r3, [r7, #32]
   12e60:	2b00      	cmp	r3, #0
   12e62:	d1cd      	bne.n	12e00 <dir_register+0x158>
   12e64:	e000      	b.n	12e68 <dir_register+0x1c0>
				if (res != FR_OK) break;
   12e66:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
   12e68:	232f      	movs	r3, #47	; 0x2f
   12e6a:	18fb      	adds	r3, r7, r3
   12e6c:	781b      	ldrb	r3, [r3, #0]
   12e6e:	2b00      	cmp	r3, #0
   12e70:	d12b      	bne.n	12eca <dir_register+0x222>
		res = move_window(fs, dp->sect);
   12e72:	687b      	ldr	r3, [r7, #4]
   12e74:	699a      	ldr	r2, [r3, #24]
   12e76:	232f      	movs	r3, #47	; 0x2f
   12e78:	18fc      	adds	r4, r7, r3
   12e7a:	69fb      	ldr	r3, [r7, #28]
   12e7c:	0011      	movs	r1, r2
   12e7e:	0018      	movs	r0, r3
   12e80:	4b1c      	ldr	r3, [pc, #112]	; (12ef4 <dir_register+0x24c>)
   12e82:	4798      	blx	r3
   12e84:	0003      	movs	r3, r0
   12e86:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   12e88:	232f      	movs	r3, #47	; 0x2f
   12e8a:	18fb      	adds	r3, r7, r3
   12e8c:	781b      	ldrb	r3, [r3, #0]
   12e8e:	2b00      	cmp	r3, #0
   12e90:	d11b      	bne.n	12eca <dir_register+0x222>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
   12e92:	687b      	ldr	r3, [r7, #4]
   12e94:	69db      	ldr	r3, [r3, #28]
   12e96:	2220      	movs	r2, #32
   12e98:	2100      	movs	r1, #0
   12e9a:	0018      	movs	r0, r3
   12e9c:	4b18      	ldr	r3, [pc, #96]	; (12f00 <dir_register+0x258>)
   12e9e:	4798      	blx	r3
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
   12ea0:	687b      	ldr	r3, [r7, #4]
   12ea2:	69d8      	ldr	r0, [r3, #28]
   12ea4:	687b      	ldr	r3, [r7, #4]
   12ea6:	3320      	adds	r3, #32
   12ea8:	220b      	movs	r2, #11
   12eaa:	0019      	movs	r1, r3
   12eac:	4b0a      	ldr	r3, [pc, #40]	; (12ed8 <dir_register+0x230>)
   12eae:	4798      	blx	r3
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
   12eb0:	687b      	ldr	r3, [r7, #4]
   12eb2:	69db      	ldr	r3, [r3, #28]
   12eb4:	330c      	adds	r3, #12
   12eb6:	687a      	ldr	r2, [r7, #4]
   12eb8:	212b      	movs	r1, #43	; 0x2b
   12eba:	5c52      	ldrb	r2, [r2, r1]
   12ebc:	2118      	movs	r1, #24
   12ebe:	400a      	ands	r2, r1
   12ec0:	b2d2      	uxtb	r2, r2
   12ec2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
   12ec4:	69fb      	ldr	r3, [r7, #28]
   12ec6:	2201      	movs	r2, #1
   12ec8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
   12eca:	232f      	movs	r3, #47	; 0x2f
   12ecc:	18fb      	adds	r3, r7, r3
   12ece:	781b      	ldrb	r3, [r3, #0]
}
   12ed0:	0018      	movs	r0, r3
   12ed2:	46bd      	mov	sp, r7
   12ed4:	b00d      	add	sp, #52	; 0x34
   12ed6:	bd90      	pop	{r4, r7, pc}
   12ed8:	00011817 	.word	0x00011817
   12edc:	000128d9 	.word	0x000128d9
   12ee0:	00012a85 	.word	0x00012a85
   12ee4:	00020bbd 	.word	0x00020bbd
   12ee8:	0001258d 	.word	0x0001258d
   12eec:	00012341 	.word	0x00012341
   12ef0:	00012a35 	.word	0x00012a35
   12ef4:	00011a95 	.word	0x00011a95
   12ef8:	000127e1 	.word	0x000127e1
   12efc:	00012449 	.word	0x00012449
   12f00:	00011855 	.word	0x00011855

00012f04 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
   12f04:	b590      	push	{r4, r7, lr}
   12f06:	b08b      	sub	sp, #44	; 0x2c
   12f08:	af00      	add	r7, sp, #0
   12f0a:	6078      	str	r0, [r7, #4]
   12f0c:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
   12f0e:	683b      	ldr	r3, [r7, #0]
   12f10:	681b      	ldr	r3, [r3, #0]
   12f12:	60bb      	str	r3, [r7, #8]
   12f14:	687b      	ldr	r3, [r7, #4]
   12f16:	681b      	ldr	r3, [r3, #0]
   12f18:	68db      	ldr	r3, [r3, #12]
   12f1a:	613b      	str	r3, [r7, #16]
   12f1c:	2300      	movs	r3, #0
   12f1e:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
   12f20:	2308      	movs	r3, #8
   12f22:	18fb      	adds	r3, r7, r3
   12f24:	0018      	movs	r0, r3
   12f26:	4bba      	ldr	r3, [pc, #744]	; (13210 <create_name+0x30c>)
   12f28:	4798      	blx	r3
   12f2a:	0003      	movs	r3, r0
   12f2c:	60fb      	str	r3, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
   12f2e:	68fb      	ldr	r3, [r7, #12]
   12f30:	3301      	adds	r3, #1
   12f32:	d101      	bne.n	12f38 <create_name+0x34>
   12f34:	2306      	movs	r3, #6
   12f36:	e225      	b.n	13384 <create_name+0x480>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
   12f38:	68fb      	ldr	r3, [r7, #12]
   12f3a:	4ab6      	ldr	r2, [pc, #728]	; (13214 <create_name+0x310>)
   12f3c:	4293      	cmp	r3, r2
   12f3e:	d909      	bls.n	12f54 <create_name+0x50>
   12f40:	697b      	ldr	r3, [r7, #20]
   12f42:	1c5a      	adds	r2, r3, #1
   12f44:	617a      	str	r2, [r7, #20]
   12f46:	005b      	lsls	r3, r3, #1
   12f48:	693a      	ldr	r2, [r7, #16]
   12f4a:	18d3      	adds	r3, r2, r3
   12f4c:	68fa      	ldr	r2, [r7, #12]
   12f4e:	0c12      	lsrs	r2, r2, #16
   12f50:	b292      	uxth	r2, r2
   12f52:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
   12f54:	2324      	movs	r3, #36	; 0x24
   12f56:	18fb      	adds	r3, r7, r3
   12f58:	68fa      	ldr	r2, [r7, #12]
   12f5a:	801a      	strh	r2, [r3, #0]
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
   12f5c:	2324      	movs	r3, #36	; 0x24
   12f5e:	18fb      	adds	r3, r7, r3
   12f60:	881b      	ldrh	r3, [r3, #0]
   12f62:	2b1f      	cmp	r3, #31
   12f64:	d92d      	bls.n	12fc2 <create_name+0xbe>
   12f66:	2324      	movs	r3, #36	; 0x24
   12f68:	18fb      	adds	r3, r7, r3
   12f6a:	881b      	ldrh	r3, [r3, #0]
   12f6c:	2b2f      	cmp	r3, #47	; 0x2f
   12f6e:	d028      	beq.n	12fc2 <create_name+0xbe>
   12f70:	2324      	movs	r3, #36	; 0x24
   12f72:	18fb      	adds	r3, r7, r3
   12f74:	881b      	ldrh	r3, [r3, #0]
   12f76:	2b5c      	cmp	r3, #92	; 0x5c
   12f78:	d023      	beq.n	12fc2 <create_name+0xbe>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
   12f7a:	2324      	movs	r3, #36	; 0x24
   12f7c:	18fb      	adds	r3, r7, r3
   12f7e:	881b      	ldrh	r3, [r3, #0]
   12f80:	2b7f      	cmp	r3, #127	; 0x7f
   12f82:	d80b      	bhi.n	12f9c <create_name+0x98>
   12f84:	2324      	movs	r3, #36	; 0x24
   12f86:	18fb      	adds	r3, r7, r3
   12f88:	881a      	ldrh	r2, [r3, #0]
   12f8a:	4ba3      	ldr	r3, [pc, #652]	; (13218 <create_name+0x314>)
   12f8c:	0011      	movs	r1, r2
   12f8e:	0018      	movs	r0, r3
   12f90:	4ba2      	ldr	r3, [pc, #648]	; (1321c <create_name+0x318>)
   12f92:	4798      	blx	r3
   12f94:	1e03      	subs	r3, r0, #0
   12f96:	d001      	beq.n	12f9c <create_name+0x98>
   12f98:	2306      	movs	r3, #6
   12f9a:	e1f3      	b.n	13384 <create_name+0x480>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
   12f9c:	697b      	ldr	r3, [r7, #20]
   12f9e:	2bfe      	cmp	r3, #254	; 0xfe
   12fa0:	d901      	bls.n	12fa6 <create_name+0xa2>
   12fa2:	2306      	movs	r3, #6
   12fa4:	e1ee      	b.n	13384 <create_name+0x480>
		lfn[di++] = wc;					/* Store the Unicode character */
   12fa6:	697b      	ldr	r3, [r7, #20]
   12fa8:	1c5a      	adds	r2, r3, #1
   12faa:	617a      	str	r2, [r7, #20]
   12fac:	005b      	lsls	r3, r3, #1
   12fae:	693a      	ldr	r2, [r7, #16]
   12fb0:	18d3      	adds	r3, r2, r3
   12fb2:	2224      	movs	r2, #36	; 0x24
   12fb4:	18ba      	adds	r2, r7, r2
   12fb6:	8812      	ldrh	r2, [r2, #0]
   12fb8:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
   12fba:	e7b1      	b.n	12f20 <create_name+0x1c>
	}
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
   12fbc:	68bb      	ldr	r3, [r7, #8]
   12fbe:	3301      	adds	r3, #1
   12fc0:	60bb      	str	r3, [r7, #8]
   12fc2:	68bb      	ldr	r3, [r7, #8]
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b2f      	cmp	r3, #47	; 0x2f
   12fc8:	d0f8      	beq.n	12fbc <create_name+0xb8>
   12fca:	68bb      	ldr	r3, [r7, #8]
   12fcc:	781b      	ldrb	r3, [r3, #0]
   12fce:	2b5c      	cmp	r3, #92	; 0x5c
   12fd0:	d0f4      	beq.n	12fbc <create_name+0xb8>
	*path = p;							/* Return pointer to the next segment */
   12fd2:	68ba      	ldr	r2, [r7, #8]
   12fd4:	683b      	ldr	r3, [r7, #0]
   12fd6:	601a      	str	r2, [r3, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
   12fd8:	2324      	movs	r3, #36	; 0x24
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	881b      	ldrh	r3, [r3, #0]
   12fde:	2b1f      	cmp	r3, #31
   12fe0:	d801      	bhi.n	12fe6 <create_name+0xe2>
   12fe2:	2204      	movs	r2, #4
   12fe4:	e000      	b.n	12fe8 <create_name+0xe4>
   12fe6:	2200      	movs	r2, #0
   12fe8:	2326      	movs	r3, #38	; 0x26
   12fea:	18fb      	adds	r3, r7, r3
   12fec:	701a      	strb	r2, [r3, #0]
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
   12fee:	e017      	b.n	13020 <create_name+0x11c>
		wc = lfn[di - 1];
   12ff0:	697b      	ldr	r3, [r7, #20]
   12ff2:	4a8b      	ldr	r2, [pc, #556]	; (13220 <create_name+0x31c>)
   12ff4:	4694      	mov	ip, r2
   12ff6:	4463      	add	r3, ip
   12ff8:	005b      	lsls	r3, r3, #1
   12ffa:	693a      	ldr	r2, [r7, #16]
   12ffc:	18d2      	adds	r2, r2, r3
   12ffe:	2324      	movs	r3, #36	; 0x24
   13000:	18fb      	adds	r3, r7, r3
   13002:	8812      	ldrh	r2, [r2, #0]
   13004:	801a      	strh	r2, [r3, #0]
		if (wc != ' ' && wc != '.') break;
   13006:	2324      	movs	r3, #36	; 0x24
   13008:	18fb      	adds	r3, r7, r3
   1300a:	881b      	ldrh	r3, [r3, #0]
   1300c:	2b20      	cmp	r3, #32
   1300e:	d004      	beq.n	1301a <create_name+0x116>
   13010:	2324      	movs	r3, #36	; 0x24
   13012:	18fb      	adds	r3, r7, r3
   13014:	881b      	ldrh	r3, [r3, #0]
   13016:	2b2e      	cmp	r3, #46	; 0x2e
   13018:	d106      	bne.n	13028 <create_name+0x124>
		di--;
   1301a:	697b      	ldr	r3, [r7, #20]
   1301c:	3b01      	subs	r3, #1
   1301e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
   13020:	697b      	ldr	r3, [r7, #20]
   13022:	2b00      	cmp	r3, #0
   13024:	d1e4      	bne.n	12ff0 <create_name+0xec>
   13026:	e000      	b.n	1302a <create_name+0x126>
		if (wc != ' ' && wc != '.') break;
   13028:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
   1302a:	697b      	ldr	r3, [r7, #20]
   1302c:	005b      	lsls	r3, r3, #1
   1302e:	693a      	ldr	r2, [r7, #16]
   13030:	18d3      	adds	r3, r2, r3
   13032:	2200      	movs	r2, #0
   13034:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
   13036:	697b      	ldr	r3, [r7, #20]
   13038:	2b00      	cmp	r3, #0
   1303a:	d101      	bne.n	13040 <create_name+0x13c>
   1303c:	2306      	movs	r3, #6
   1303e:	e1a1      	b.n	13384 <create_name+0x480>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
   13040:	2300      	movs	r3, #0
   13042:	61bb      	str	r3, [r7, #24]
   13044:	e002      	b.n	1304c <create_name+0x148>
   13046:	69bb      	ldr	r3, [r7, #24]
   13048:	3301      	adds	r3, #1
   1304a:	61bb      	str	r3, [r7, #24]
   1304c:	69bb      	ldr	r3, [r7, #24]
   1304e:	005b      	lsls	r3, r3, #1
   13050:	693a      	ldr	r2, [r7, #16]
   13052:	18d3      	adds	r3, r2, r3
   13054:	881b      	ldrh	r3, [r3, #0]
   13056:	2b20      	cmp	r3, #32
   13058:	d0f5      	beq.n	13046 <create_name+0x142>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
   1305a:	69bb      	ldr	r3, [r7, #24]
   1305c:	2b00      	cmp	r3, #0
   1305e:	d106      	bne.n	1306e <create_name+0x16a>
   13060:	69bb      	ldr	r3, [r7, #24]
   13062:	005b      	lsls	r3, r3, #1
   13064:	693a      	ldr	r2, [r7, #16]
   13066:	18d3      	adds	r3, r2, r3
   13068:	881b      	ldrh	r3, [r3, #0]
   1306a:	2b2e      	cmp	r3, #46	; 0x2e
   1306c:	d10b      	bne.n	13086 <create_name+0x182>
   1306e:	2326      	movs	r3, #38	; 0x26
   13070:	18fb      	adds	r3, r7, r3
   13072:	2226      	movs	r2, #38	; 0x26
   13074:	18ba      	adds	r2, r7, r2
   13076:	7812      	ldrb	r2, [r2, #0]
   13078:	2103      	movs	r1, #3
   1307a:	430a      	orrs	r2, r1
   1307c:	701a      	strb	r2, [r3, #0]
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
   1307e:	e002      	b.n	13086 <create_name+0x182>
   13080:	697b      	ldr	r3, [r7, #20]
   13082:	3b01      	subs	r3, #1
   13084:	617b      	str	r3, [r7, #20]
   13086:	697b      	ldr	r3, [r7, #20]
   13088:	2b00      	cmp	r3, #0
   1308a:	d009      	beq.n	130a0 <create_name+0x19c>
   1308c:	697b      	ldr	r3, [r7, #20]
   1308e:	4a64      	ldr	r2, [pc, #400]	; (13220 <create_name+0x31c>)
   13090:	4694      	mov	ip, r2
   13092:	4463      	add	r3, ip
   13094:	005b      	lsls	r3, r3, #1
   13096:	693a      	ldr	r2, [r7, #16]
   13098:	18d3      	adds	r3, r2, r3
   1309a:	881b      	ldrh	r3, [r3, #0]
   1309c:	2b2e      	cmp	r3, #46	; 0x2e
   1309e:	d1ef      	bne.n	13080 <create_name+0x17c>

	mem_set(dp->fn, ' ', 11);
   130a0:	687b      	ldr	r3, [r7, #4]
   130a2:	3320      	adds	r3, #32
   130a4:	220b      	movs	r2, #11
   130a6:	2120      	movs	r1, #32
   130a8:	0018      	movs	r0, r3
   130aa:	4b5e      	ldr	r3, [pc, #376]	; (13224 <create_name+0x320>)
   130ac:	4798      	blx	r3
	i = b = 0; ni = 8;
   130ae:	2327      	movs	r3, #39	; 0x27
   130b0:	18fb      	adds	r3, r7, r3
   130b2:	2200      	movs	r2, #0
   130b4:	701a      	strb	r2, [r3, #0]
   130b6:	2300      	movs	r3, #0
   130b8:	623b      	str	r3, [r7, #32]
   130ba:	2308      	movs	r3, #8
   130bc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
   130be:	69bb      	ldr	r3, [r7, #24]
   130c0:	1c5a      	adds	r2, r3, #1
   130c2:	61ba      	str	r2, [r7, #24]
   130c4:	005b      	lsls	r3, r3, #1
   130c6:	693a      	ldr	r2, [r7, #16]
   130c8:	18d2      	adds	r2, r2, r3
   130ca:	2324      	movs	r3, #36	; 0x24
   130cc:	18fb      	adds	r3, r7, r3
   130ce:	8812      	ldrh	r2, [r2, #0]
   130d0:	801a      	strh	r2, [r3, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
   130d2:	2324      	movs	r3, #36	; 0x24
   130d4:	18fb      	adds	r3, r7, r3
   130d6:	881b      	ldrh	r3, [r3, #0]
   130d8:	2b00      	cmp	r3, #0
   130da:	d100      	bne.n	130de <create_name+0x1da>
   130dc:	e0fd      	b.n	132da <create_name+0x3d6>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
   130de:	2324      	movs	r3, #36	; 0x24
   130e0:	18fb      	adds	r3, r7, r3
   130e2:	881b      	ldrh	r3, [r3, #0]
   130e4:	2b20      	cmp	r3, #32
   130e6:	d008      	beq.n	130fa <create_name+0x1f6>
   130e8:	2324      	movs	r3, #36	; 0x24
   130ea:	18fb      	adds	r3, r7, r3
   130ec:	881b      	ldrh	r3, [r3, #0]
   130ee:	2b2e      	cmp	r3, #46	; 0x2e
   130f0:	d10c      	bne.n	1310c <create_name+0x208>
   130f2:	69ba      	ldr	r2, [r7, #24]
   130f4:	697b      	ldr	r3, [r7, #20]
   130f6:	429a      	cmp	r2, r3
   130f8:	d008      	beq.n	1310c <create_name+0x208>
			cf |= NS_LOSS | NS_LFN;
   130fa:	2326      	movs	r3, #38	; 0x26
   130fc:	18fb      	adds	r3, r7, r3
   130fe:	2226      	movs	r2, #38	; 0x26
   13100:	18ba      	adds	r2, r7, r2
   13102:	7812      	ldrb	r2, [r2, #0]
   13104:	2103      	movs	r1, #3
   13106:	430a      	orrs	r2, r1
   13108:	701a      	strb	r2, [r3, #0]
			continue;
   1310a:	e0e5      	b.n	132d8 <create_name+0x3d4>
		}

		if (i >= ni || si == di) {		/* End of field? */
   1310c:	6a3a      	ldr	r2, [r7, #32]
   1310e:	69fb      	ldr	r3, [r7, #28]
   13110:	429a      	cmp	r2, r3
   13112:	d203      	bcs.n	1311c <create_name+0x218>
   13114:	69ba      	ldr	r2, [r7, #24]
   13116:	697b      	ldr	r3, [r7, #20]
   13118:	429a      	cmp	r2, r3
   1311a:	d12a      	bne.n	13172 <create_name+0x26e>
			if (ni == 11) {				/* Name extension overflow? */
   1311c:	69fb      	ldr	r3, [r7, #28]
   1311e:	2b0b      	cmp	r3, #11
   13120:	d108      	bne.n	13134 <create_name+0x230>
				cf |= NS_LOSS | NS_LFN;
   13122:	2326      	movs	r3, #38	; 0x26
   13124:	18fb      	adds	r3, r7, r3
   13126:	2226      	movs	r2, #38	; 0x26
   13128:	18ba      	adds	r2, r7, r2
   1312a:	7812      	ldrb	r2, [r2, #0]
   1312c:	2103      	movs	r1, #3
   1312e:	430a      	orrs	r2, r1
   13130:	701a      	strb	r2, [r3, #0]
				break;
   13132:	e0d5      	b.n	132e0 <create_name+0x3dc>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
   13134:	69ba      	ldr	r2, [r7, #24]
   13136:	697b      	ldr	r3, [r7, #20]
   13138:	429a      	cmp	r2, r3
   1313a:	d007      	beq.n	1314c <create_name+0x248>
   1313c:	2326      	movs	r3, #38	; 0x26
   1313e:	18fb      	adds	r3, r7, r3
   13140:	2226      	movs	r2, #38	; 0x26
   13142:	18ba      	adds	r2, r7, r2
   13144:	7812      	ldrb	r2, [r2, #0]
   13146:	2103      	movs	r1, #3
   13148:	430a      	orrs	r2, r1
   1314a:	701a      	strb	r2, [r3, #0]
			if (si > di) break;						/* No name extension? */
   1314c:	69ba      	ldr	r2, [r7, #24]
   1314e:	697b      	ldr	r3, [r7, #20]
   13150:	429a      	cmp	r2, r3
   13152:	d900      	bls.n	13156 <create_name+0x252>
   13154:	e0c3      	b.n	132de <create_name+0x3da>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
   13156:	697b      	ldr	r3, [r7, #20]
   13158:	61bb      	str	r3, [r7, #24]
   1315a:	2308      	movs	r3, #8
   1315c:	623b      	str	r3, [r7, #32]
   1315e:	230b      	movs	r3, #11
   13160:	61fb      	str	r3, [r7, #28]
   13162:	2327      	movs	r3, #39	; 0x27
   13164:	18fb      	adds	r3, r7, r3
   13166:	2227      	movs	r2, #39	; 0x27
   13168:	18ba      	adds	r2, r7, r2
   1316a:	7812      	ldrb	r2, [r2, #0]
   1316c:	0092      	lsls	r2, r2, #2
   1316e:	701a      	strb	r2, [r3, #0]
			continue;
   13170:	e0b2      	b.n	132d8 <create_name+0x3d4>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
   13172:	2324      	movs	r3, #36	; 0x24
   13174:	18fb      	adds	r3, r7, r3
   13176:	881b      	ldrh	r3, [r3, #0]
   13178:	2b7f      	cmp	r3, #127	; 0x7f
   1317a:	d924      	bls.n	131c6 <create_name+0x2c2>
			cf |= NS_LFN;	/* LFN entry needs to be created */
   1317c:	2326      	movs	r3, #38	; 0x26
   1317e:	18fb      	adds	r3, r7, r3
   13180:	2226      	movs	r2, #38	; 0x26
   13182:	18ba      	adds	r2, r7, r2
   13184:	7812      	ldrb	r2, [r2, #0]
   13186:	2102      	movs	r1, #2
   13188:	430a      	orrs	r2, r1
   1318a:	701a      	strb	r2, [r3, #0]
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* At DBCS */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
   1318c:	2324      	movs	r3, #36	; 0x24
   1318e:	18fb      	adds	r3, r7, r3
   13190:	881a      	ldrh	r2, [r3, #0]
   13192:	2324      	movs	r3, #36	; 0x24
   13194:	18fc      	adds	r4, r7, r3
   13196:	23b6      	movs	r3, #182	; 0xb6
   13198:	33ff      	adds	r3, #255	; 0xff
   1319a:	0019      	movs	r1, r3
   1319c:	0010      	movs	r0, r2
   1319e:	4b22      	ldr	r3, [pc, #136]	; (13228 <create_name+0x324>)
   131a0:	4798      	blx	r3
   131a2:	0003      	movs	r3, r0
   131a4:	8023      	strh	r3, [r4, #0]
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
   131a6:	2324      	movs	r3, #36	; 0x24
   131a8:	18fb      	adds	r3, r7, r3
   131aa:	881b      	ldrh	r3, [r3, #0]
   131ac:	2280      	movs	r2, #128	; 0x80
   131ae:	4013      	ands	r3, r2
   131b0:	d009      	beq.n	131c6 <create_name+0x2c2>
   131b2:	2324      	movs	r3, #36	; 0x24
   131b4:	18fb      	adds	r3, r7, r3
   131b6:	881b      	ldrh	r3, [r3, #0]
   131b8:	227f      	movs	r2, #127	; 0x7f
   131ba:	4013      	ands	r3, r2
   131bc:	4a1b      	ldr	r2, [pc, #108]	; (1322c <create_name+0x328>)
   131be:	5cd2      	ldrb	r2, [r2, r3]
   131c0:	2324      	movs	r3, #36	; 0x24
   131c2:	18fb      	adds	r3, r7, r3
   131c4:	801a      	strh	r2, [r3, #0]
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
   131c6:	2324      	movs	r3, #36	; 0x24
   131c8:	18fb      	adds	r3, r7, r3
   131ca:	881b      	ldrh	r3, [r3, #0]
   131cc:	2bff      	cmp	r3, #255	; 0xff
   131ce:	d92f      	bls.n	13230 <create_name+0x32c>
			if (i >= ni - 1) {			/* Field overflow? */
   131d0:	69fb      	ldr	r3, [r7, #28]
   131d2:	1e5a      	subs	r2, r3, #1
   131d4:	6a3b      	ldr	r3, [r7, #32]
   131d6:	429a      	cmp	r2, r3
   131d8:	d80a      	bhi.n	131f0 <create_name+0x2ec>
				cf |= NS_LOSS | NS_LFN;
   131da:	2326      	movs	r3, #38	; 0x26
   131dc:	18fb      	adds	r3, r7, r3
   131de:	2226      	movs	r2, #38	; 0x26
   131e0:	18ba      	adds	r2, r7, r2
   131e2:	7812      	ldrb	r2, [r2, #0]
   131e4:	2103      	movs	r1, #3
   131e6:	430a      	orrs	r2, r1
   131e8:	701a      	strb	r2, [r3, #0]
				i = ni; continue;		/* Next field */
   131ea:	69fb      	ldr	r3, [r7, #28]
   131ec:	623b      	str	r3, [r7, #32]
   131ee:	e073      	b.n	132d8 <create_name+0x3d4>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
   131f0:	6a3b      	ldr	r3, [r7, #32]
   131f2:	1c5a      	adds	r2, r3, #1
   131f4:	623a      	str	r2, [r7, #32]
   131f6:	2224      	movs	r2, #36	; 0x24
   131f8:	18ba      	adds	r2, r7, r2
   131fa:	8812      	ldrh	r2, [r2, #0]
   131fc:	0a12      	lsrs	r2, r2, #8
   131fe:	b292      	uxth	r2, r2
   13200:	b2d0      	uxtb	r0, r2
   13202:	687a      	ldr	r2, [r7, #4]
   13204:	2120      	movs	r1, #32
   13206:	18d3      	adds	r3, r2, r3
   13208:	185b      	adds	r3, r3, r1
   1320a:	1c02      	adds	r2, r0, #0
   1320c:	701a      	strb	r2, [r3, #0]
   1320e:	e056      	b.n	132be <create_name+0x3ba>
   13210:	00011945 	.word	0x00011945
   13214:	0000ffff 	.word	0x0000ffff
   13218:	000286cc 	.word	0x000286cc
   1321c:	000118cf 	.word	0x000118cf
   13220:	7fffffff 	.word	0x7fffffff
   13224:	00011855 	.word	0x00011855
   13228:	00014915 	.word	0x00014915
   1322c:	0002864c 	.word	0x0002864c
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
   13230:	2324      	movs	r3, #36	; 0x24
   13232:	18fb      	adds	r3, r7, r3
   13234:	881b      	ldrh	r3, [r3, #0]
   13236:	2b00      	cmp	r3, #0
   13238:	d009      	beq.n	1324e <create_name+0x34a>
   1323a:	2324      	movs	r3, #36	; 0x24
   1323c:	18fb      	adds	r3, r7, r3
   1323e:	881a      	ldrh	r2, [r3, #0]
   13240:	4b52      	ldr	r3, [pc, #328]	; (1338c <create_name+0x488>)
   13242:	0011      	movs	r1, r2
   13244:	0018      	movs	r0, r3
   13246:	4b52      	ldr	r3, [pc, #328]	; (13390 <create_name+0x48c>)
   13248:	4798      	blx	r3
   1324a:	1e03      	subs	r3, r0, #0
   1324c:	d00c      	beq.n	13268 <create_name+0x364>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   1324e:	2324      	movs	r3, #36	; 0x24
   13250:	18fb      	adds	r3, r7, r3
   13252:	225f      	movs	r2, #95	; 0x5f
   13254:	801a      	strh	r2, [r3, #0]
   13256:	2326      	movs	r3, #38	; 0x26
   13258:	18fb      	adds	r3, r7, r3
   1325a:	2226      	movs	r2, #38	; 0x26
   1325c:	18ba      	adds	r2, r7, r2
   1325e:	7812      	ldrb	r2, [r2, #0]
   13260:	2103      	movs	r1, #3
   13262:	430a      	orrs	r2, r1
   13264:	701a      	strb	r2, [r3, #0]
   13266:	e02a      	b.n	132be <create_name+0x3ba>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
   13268:	2324      	movs	r3, #36	; 0x24
   1326a:	18fb      	adds	r3, r7, r3
   1326c:	881b      	ldrh	r3, [r3, #0]
   1326e:	2b40      	cmp	r3, #64	; 0x40
   13270:	d90c      	bls.n	1328c <create_name+0x388>
   13272:	2324      	movs	r3, #36	; 0x24
   13274:	18fb      	adds	r3, r7, r3
   13276:	881b      	ldrh	r3, [r3, #0]
   13278:	2b5a      	cmp	r3, #90	; 0x5a
   1327a:	d807      	bhi.n	1328c <create_name+0x388>
					b |= 2;
   1327c:	2327      	movs	r3, #39	; 0x27
   1327e:	18fb      	adds	r3, r7, r3
   13280:	2227      	movs	r2, #39	; 0x27
   13282:	18ba      	adds	r2, r7, r2
   13284:	7812      	ldrb	r2, [r2, #0]
   13286:	2102      	movs	r1, #2
   13288:	430a      	orrs	r2, r1
   1328a:	701a      	strb	r2, [r3, #0]
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
   1328c:	2324      	movs	r3, #36	; 0x24
   1328e:	18fb      	adds	r3, r7, r3
   13290:	881b      	ldrh	r3, [r3, #0]
   13292:	2b60      	cmp	r3, #96	; 0x60
   13294:	d913      	bls.n	132be <create_name+0x3ba>
   13296:	2324      	movs	r3, #36	; 0x24
   13298:	18fb      	adds	r3, r7, r3
   1329a:	881b      	ldrh	r3, [r3, #0]
   1329c:	2b7a      	cmp	r3, #122	; 0x7a
   1329e:	d80e      	bhi.n	132be <create_name+0x3ba>
					b |= 1; wc -= 0x20;
   132a0:	2327      	movs	r3, #39	; 0x27
   132a2:	18fb      	adds	r3, r7, r3
   132a4:	2227      	movs	r2, #39	; 0x27
   132a6:	18ba      	adds	r2, r7, r2
   132a8:	7812      	ldrb	r2, [r2, #0]
   132aa:	2101      	movs	r1, #1
   132ac:	430a      	orrs	r2, r1
   132ae:	701a      	strb	r2, [r3, #0]
   132b0:	2324      	movs	r3, #36	; 0x24
   132b2:	18fb      	adds	r3, r7, r3
   132b4:	2224      	movs	r2, #36	; 0x24
   132b6:	18ba      	adds	r2, r7, r2
   132b8:	8812      	ldrh	r2, [r2, #0]
   132ba:	3a20      	subs	r2, #32
   132bc:	801a      	strh	r2, [r3, #0]
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
   132be:	6a3b      	ldr	r3, [r7, #32]
   132c0:	1c5a      	adds	r2, r3, #1
   132c2:	623a      	str	r2, [r7, #32]
   132c4:	2224      	movs	r2, #36	; 0x24
   132c6:	18ba      	adds	r2, r7, r2
   132c8:	8812      	ldrh	r2, [r2, #0]
   132ca:	b2d0      	uxtb	r0, r2
   132cc:	687a      	ldr	r2, [r7, #4]
   132ce:	2120      	movs	r1, #32
   132d0:	18d3      	adds	r3, r2, r3
   132d2:	185b      	adds	r3, r3, r1
   132d4:	1c02      	adds	r2, r0, #0
   132d6:	701a      	strb	r2, [r3, #0]
		wc = lfn[si++];					/* Get an LFN character */
   132d8:	e6f1      	b.n	130be <create_name+0x1ba>
		if (wc == 0) break;				/* Break on end of the LFN */
   132da:	46c0      	nop			; (mov r8, r8)
   132dc:	e000      	b.n	132e0 <create_name+0x3dc>
			if (si > di) break;						/* No name extension? */
   132de:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   132e0:	687b      	ldr	r3, [r7, #4]
   132e2:	2220      	movs	r2, #32
   132e4:	5c9b      	ldrb	r3, [r3, r2]
   132e6:	2be5      	cmp	r3, #229	; 0xe5
   132e8:	d103      	bne.n	132f2 <create_name+0x3ee>
   132ea:	687b      	ldr	r3, [r7, #4]
   132ec:	2220      	movs	r2, #32
   132ee:	2105      	movs	r1, #5
   132f0:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
   132f2:	69fb      	ldr	r3, [r7, #28]
   132f4:	2b08      	cmp	r3, #8
   132f6:	d106      	bne.n	13306 <create_name+0x402>
   132f8:	2327      	movs	r3, #39	; 0x27
   132fa:	18fb      	adds	r3, r7, r3
   132fc:	2227      	movs	r2, #39	; 0x27
   132fe:	18ba      	adds	r2, r7, r2
   13300:	7812      	ldrb	r2, [r2, #0]
   13302:	0092      	lsls	r2, r2, #2
   13304:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
   13306:	2327      	movs	r3, #39	; 0x27
   13308:	18fb      	adds	r3, r7, r3
   1330a:	781b      	ldrb	r3, [r3, #0]
   1330c:	220c      	movs	r2, #12
   1330e:	4013      	ands	r3, r2
   13310:	2b0c      	cmp	r3, #12
   13312:	d006      	beq.n	13322 <create_name+0x41e>
   13314:	2327      	movs	r3, #39	; 0x27
   13316:	18fb      	adds	r3, r7, r3
   13318:	781b      	ldrb	r3, [r3, #0]
   1331a:	2203      	movs	r2, #3
   1331c:	4013      	ands	r3, r2
   1331e:	2b03      	cmp	r3, #3
   13320:	d107      	bne.n	13332 <create_name+0x42e>
   13322:	2326      	movs	r3, #38	; 0x26
   13324:	18fb      	adds	r3, r7, r3
   13326:	2226      	movs	r2, #38	; 0x26
   13328:	18ba      	adds	r2, r7, r2
   1332a:	7812      	ldrb	r2, [r2, #0]
   1332c:	2102      	movs	r1, #2
   1332e:	430a      	orrs	r2, r1
   13330:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
   13332:	2326      	movs	r3, #38	; 0x26
   13334:	18fb      	adds	r3, r7, r3
   13336:	781b      	ldrb	r3, [r3, #0]
   13338:	2202      	movs	r2, #2
   1333a:	4013      	ands	r3, r2
   1333c:	d11b      	bne.n	13376 <create_name+0x472>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
   1333e:	2327      	movs	r3, #39	; 0x27
   13340:	18fb      	adds	r3, r7, r3
   13342:	781b      	ldrb	r3, [r3, #0]
   13344:	2201      	movs	r2, #1
   13346:	4013      	ands	r3, r2
   13348:	d007      	beq.n	1335a <create_name+0x456>
   1334a:	2326      	movs	r3, #38	; 0x26
   1334c:	18fb      	adds	r3, r7, r3
   1334e:	2226      	movs	r2, #38	; 0x26
   13350:	18ba      	adds	r2, r7, r2
   13352:	7812      	ldrb	r2, [r2, #0]
   13354:	2110      	movs	r1, #16
   13356:	430a      	orrs	r2, r1
   13358:	701a      	strb	r2, [r3, #0]
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
   1335a:	2327      	movs	r3, #39	; 0x27
   1335c:	18fb      	adds	r3, r7, r3
   1335e:	781b      	ldrb	r3, [r3, #0]
   13360:	2204      	movs	r2, #4
   13362:	4013      	ands	r3, r2
   13364:	d007      	beq.n	13376 <create_name+0x472>
   13366:	2326      	movs	r3, #38	; 0x26
   13368:	18fb      	adds	r3, r7, r3
   1336a:	2226      	movs	r2, #38	; 0x26
   1336c:	18ba      	adds	r2, r7, r2
   1336e:	7812      	ldrb	r2, [r2, #0]
   13370:	2108      	movs	r1, #8
   13372:	430a      	orrs	r2, r1
   13374:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
   13376:	687b      	ldr	r3, [r7, #4]
   13378:	2226      	movs	r2, #38	; 0x26
   1337a:	18ba      	adds	r2, r7, r2
   1337c:	212b      	movs	r1, #43	; 0x2b
   1337e:	7812      	ldrb	r2, [r2, #0]
   13380:	545a      	strb	r2, [r3, r1]

	return FR_OK;
   13382:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
   13384:	0018      	movs	r0, r3
   13386:	46bd      	mov	sp, r7
   13388:	b00b      	add	sp, #44	; 0x2c
   1338a:	bd90      	pop	{r4, r7, pc}
   1338c:	000286d8 	.word	0x000286d8
   13390:	000118cf 	.word	0x000118cf

00013394 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
   13394:	b590      	push	{r4, r7, lr}
   13396:	b087      	sub	sp, #28
   13398:	af00      	add	r7, sp, #0
   1339a:	6078      	str	r0, [r7, #4]
   1339c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
   1339e:	687b      	ldr	r3, [r7, #4]
   133a0:	681b      	ldr	r3, [r3, #0]
   133a2:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
   133a4:	e002      	b.n	133ac <follow_path+0x18>
   133a6:	683b      	ldr	r3, [r7, #0]
   133a8:	3301      	adds	r3, #1
   133aa:	603b      	str	r3, [r7, #0]
   133ac:	683b      	ldr	r3, [r7, #0]
   133ae:	781b      	ldrb	r3, [r3, #0]
   133b0:	2b2f      	cmp	r3, #47	; 0x2f
   133b2:	d0f8      	beq.n	133a6 <follow_path+0x12>
   133b4:	683b      	ldr	r3, [r7, #0]
   133b6:	781b      	ldrb	r3, [r3, #0]
   133b8:	2b5c      	cmp	r3, #92	; 0x5c
   133ba:	d0f4      	beq.n	133a6 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
   133bc:	687b      	ldr	r3, [r7, #4]
   133be:	2200      	movs	r2, #0
   133c0:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
   133c2:	683b      	ldr	r3, [r7, #0]
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b1f      	cmp	r3, #31
   133c8:	d80d      	bhi.n	133e6 <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
   133ca:	687b      	ldr	r3, [r7, #4]
   133cc:	222b      	movs	r2, #43	; 0x2b
   133ce:	2180      	movs	r1, #128	; 0x80
   133d0:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
   133d2:	2317      	movs	r3, #23
   133d4:	18fc      	adds	r4, r7, r3
   133d6:	687b      	ldr	r3, [r7, #4]
   133d8:	2100      	movs	r1, #0
   133da:	0018      	movs	r0, r3
   133dc:	4b32      	ldr	r3, [pc, #200]	; (134a8 <follow_path+0x114>)
   133de:	4798      	blx	r3
   133e0:	0003      	movs	r3, r0
   133e2:	7023      	strb	r3, [r4, #0]
   133e4:	e058      	b.n	13498 <follow_path+0x104>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
   133e6:	2317      	movs	r3, #23
   133e8:	18fc      	adds	r4, r7, r3
   133ea:	003a      	movs	r2, r7
   133ec:	687b      	ldr	r3, [r7, #4]
   133ee:	0011      	movs	r1, r2
   133f0:	0018      	movs	r0, r3
   133f2:	4b2e      	ldr	r3, [pc, #184]	; (134ac <follow_path+0x118>)
   133f4:	4798      	blx	r3
   133f6:	0003      	movs	r3, r0
   133f8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   133fa:	2317      	movs	r3, #23
   133fc:	18fb      	adds	r3, r7, r3
   133fe:	781b      	ldrb	r3, [r3, #0]
   13400:	2b00      	cmp	r3, #0
   13402:	d144      	bne.n	1348e <follow_path+0xfa>
			res = dir_find(dp);				/* Find an object with the segment name */
   13404:	2317      	movs	r3, #23
   13406:	18fc      	adds	r4, r7, r3
   13408:	687b      	ldr	r3, [r7, #4]
   1340a:	0018      	movs	r0, r3
   1340c:	4b28      	ldr	r3, [pc, #160]	; (134b0 <follow_path+0x11c>)
   1340e:	4798      	blx	r3
   13410:	0003      	movs	r3, r0
   13412:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
   13414:	230f      	movs	r3, #15
   13416:	18fb      	adds	r3, r7, r3
   13418:	687a      	ldr	r2, [r7, #4]
   1341a:	212b      	movs	r1, #43	; 0x2b
   1341c:	5c52      	ldrb	r2, [r2, r1]
   1341e:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   13420:	2317      	movs	r3, #23
   13422:	18fb      	adds	r3, r7, r3
   13424:	781b      	ldrb	r3, [r3, #0]
   13426:	2b00      	cmp	r3, #0
   13428:	d00f      	beq.n	1344a <follow_path+0xb6>
				if (res == FR_NO_FILE) {	/* Object is not found */
   1342a:	2317      	movs	r3, #23
   1342c:	18fb      	adds	r3, r7, r3
   1342e:	781b      	ldrb	r3, [r3, #0]
   13430:	2b04      	cmp	r3, #4
   13432:	d12e      	bne.n	13492 <follow_path+0xfe>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   13434:	230f      	movs	r3, #15
   13436:	18fb      	adds	r3, r7, r3
   13438:	781b      	ldrb	r3, [r3, #0]
   1343a:	2204      	movs	r2, #4
   1343c:	4013      	ands	r3, r2
   1343e:	d128      	bne.n	13492 <follow_path+0xfe>
   13440:	2317      	movs	r3, #23
   13442:	18fb      	adds	r3, r7, r3
   13444:	2205      	movs	r2, #5
   13446:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
   13448:	e023      	b.n	13492 <follow_path+0xfe>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
   1344a:	230f      	movs	r3, #15
   1344c:	18fb      	adds	r3, r7, r3
   1344e:	781b      	ldrb	r3, [r3, #0]
   13450:	2204      	movs	r2, #4
   13452:	4013      	ands	r3, r2
   13454:	d11f      	bne.n	13496 <follow_path+0x102>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
   13456:	687b      	ldr	r3, [r7, #4]
   13458:	799b      	ldrb	r3, [r3, #6]
   1345a:	001a      	movs	r2, r3
   1345c:	2310      	movs	r3, #16
   1345e:	4013      	ands	r3, r2
   13460:	d104      	bne.n	1346c <follow_path+0xd8>
				res = FR_NO_PATH; break;
   13462:	2317      	movs	r3, #23
   13464:	18fb      	adds	r3, r7, r3
   13466:	2205      	movs	r2, #5
   13468:	701a      	strb	r2, [r3, #0]
   1346a:	e015      	b.n	13498 <follow_path+0x104>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
   1346c:	693b      	ldr	r3, [r7, #16]
   1346e:	3334      	adds	r3, #52	; 0x34
   13470:	001a      	movs	r2, r3
   13472:	687b      	ldr	r3, [r7, #4]
   13474:	691b      	ldr	r3, [r3, #16]
   13476:	05db      	lsls	r3, r3, #23
   13478:	0ddb      	lsrs	r3, r3, #23
   1347a:	18d2      	adds	r2, r2, r3
   1347c:	693b      	ldr	r3, [r7, #16]
   1347e:	0011      	movs	r1, r2
   13480:	0018      	movs	r0, r3
   13482:	4b0c      	ldr	r3, [pc, #48]	; (134b4 <follow_path+0x120>)
   13484:	4798      	blx	r3
   13486:	0002      	movs	r2, r0
   13488:	687b      	ldr	r3, [r7, #4]
   1348a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
   1348c:	e7ab      	b.n	133e6 <follow_path+0x52>
			if (res != FR_OK) break;
   1348e:	46c0      	nop			; (mov r8, r8)
   13490:	e002      	b.n	13498 <follow_path+0x104>
				break;
   13492:	46c0      	nop			; (mov r8, r8)
   13494:	e000      	b.n	13498 <follow_path+0x104>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
   13496:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
   13498:	2317      	movs	r3, #23
   1349a:	18fb      	adds	r3, r7, r3
   1349c:	781b      	ldrb	r3, [r3, #0]
}
   1349e:	0018      	movs	r0, r3
   134a0:	46bd      	mov	sp, r7
   134a2:	b007      	add	sp, #28
   134a4:	bd90      	pop	{r4, r7, pc}
   134a6:	46c0      	nop			; (mov r8, r8)
   134a8:	00012341 	.word	0x00012341
   134ac:	00012f05 	.word	0x00012f05
   134b0:	00012a85 	.word	0x00012a85
   134b4:	00012651 	.word	0x00012651

000134b8 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
   134b8:	b580      	push	{r7, lr}
   134ba:	b088      	sub	sp, #32
   134bc:	af00      	add	r7, sp, #0
   134be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
   134c0:	2301      	movs	r3, #1
   134c2:	425b      	negs	r3, r3
   134c4:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	681b      	ldr	r3, [r3, #0]
   134ca:	613b      	str	r3, [r7, #16]
   134cc:	693b      	ldr	r3, [r7, #16]
   134ce:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
   134d0:	693b      	ldr	r3, [r7, #16]
   134d2:	2b00      	cmp	r3, #0
   134d4:	d101      	bne.n	134da <get_ldnumber+0x22>
   134d6:	697b      	ldr	r3, [r7, #20]
   134d8:	e035      	b.n	13546 <get_ldnumber+0x8e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
   134da:	69fb      	ldr	r3, [r7, #28]
   134dc:	1c5a      	adds	r2, r3, #1
   134de:	61fa      	str	r2, [r7, #28]
   134e0:	220f      	movs	r2, #15
   134e2:	18ba      	adds	r2, r7, r2
   134e4:	781b      	ldrb	r3, [r3, #0]
   134e6:	7013      	strb	r3, [r2, #0]
   134e8:	230f      	movs	r3, #15
   134ea:	18fb      	adds	r3, r7, r3
   134ec:	781b      	ldrb	r3, [r3, #0]
   134ee:	2b1f      	cmp	r3, #31
   134f0:	d904      	bls.n	134fc <get_ldnumber+0x44>
   134f2:	230f      	movs	r3, #15
   134f4:	18fb      	adds	r3, r7, r3
   134f6:	781b      	ldrb	r3, [r3, #0]
   134f8:	2b3a      	cmp	r3, #58	; 0x3a
   134fa:	d1ee      	bne.n	134da <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
   134fc:	230f      	movs	r3, #15
   134fe:	18fb      	adds	r3, r7, r3
   13500:	781b      	ldrb	r3, [r3, #0]
   13502:	2b3a      	cmp	r3, #58	; 0x3a
   13504:	d11c      	bne.n	13540 <get_ldnumber+0x88>
		i = FF_VOLUMES;
   13506:	2301      	movs	r3, #1
   13508:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
   1350a:	693b      	ldr	r3, [r7, #16]
   1350c:	781b      	ldrb	r3, [r3, #0]
   1350e:	2b2f      	cmp	r3, #47	; 0x2f
   13510:	d90c      	bls.n	1352c <get_ldnumber+0x74>
   13512:	693b      	ldr	r3, [r7, #16]
   13514:	781b      	ldrb	r3, [r3, #0]
   13516:	2b39      	cmp	r3, #57	; 0x39
   13518:	d808      	bhi.n	1352c <get_ldnumber+0x74>
   1351a:	693b      	ldr	r3, [r7, #16]
   1351c:	1c9a      	adds	r2, r3, #2
   1351e:	69fb      	ldr	r3, [r7, #28]
   13520:	429a      	cmp	r2, r3
   13522:	d103      	bne.n	1352c <get_ldnumber+0x74>
			i = (int)*tp - '0';	/* Get the LD number */
   13524:	693b      	ldr	r3, [r7, #16]
   13526:	781b      	ldrb	r3, [r3, #0]
   13528:	3b30      	subs	r3, #48	; 0x30
   1352a:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
   1352c:	69bb      	ldr	r3, [r7, #24]
   1352e:	2b00      	cmp	r3, #0
   13530:	dc04      	bgt.n	1353c <get_ldnumber+0x84>
			vol = i;		/* Drive number */
   13532:	69bb      	ldr	r3, [r7, #24]
   13534:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
   13536:	687b      	ldr	r3, [r7, #4]
   13538:	69fa      	ldr	r2, [r7, #28]
   1353a:	601a      	str	r2, [r3, #0]
		}
		return vol;
   1353c:	697b      	ldr	r3, [r7, #20]
   1353e:	e002      	b.n	13546 <get_ldnumber+0x8e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
   13540:	2300      	movs	r3, #0
   13542:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
   13544:	697b      	ldr	r3, [r7, #20]
}
   13546:	0018      	movs	r0, r3
   13548:	46bd      	mov	sp, r7
   1354a:	b008      	add	sp, #32
   1354c:	bd80      	pop	{r7, pc}
	...

00013550 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
   13550:	b580      	push	{r7, lr}
   13552:	b082      	sub	sp, #8
   13554:	af00      	add	r7, sp, #0
   13556:	6078      	str	r0, [r7, #4]
   13558:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	2200      	movs	r2, #0
   1355e:	70da      	strb	r2, [r3, #3]
   13560:	687b      	ldr	r3, [r7, #4]
   13562:	2201      	movs	r2, #1
   13564:	4252      	negs	r2, r2
   13566:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
   13568:	683a      	ldr	r2, [r7, #0]
   1356a:	687b      	ldr	r3, [r7, #4]
   1356c:	0011      	movs	r1, r2
   1356e:	0018      	movs	r0, r3
   13570:	4b1f      	ldr	r3, [pc, #124]	; (135f0 <check_fs+0xa0>)
   13572:	4798      	blx	r3
   13574:	1e03      	subs	r3, r0, #0
   13576:	d001      	beq.n	1357c <check_fs+0x2c>
   13578:	2304      	movs	r3, #4
   1357a:	e035      	b.n	135e8 <check_fs+0x98>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
   1357c:	687b      	ldr	r3, [r7, #4]
   1357e:	3334      	adds	r3, #52	; 0x34
   13580:	33ff      	adds	r3, #255	; 0xff
   13582:	33ff      	adds	r3, #255	; 0xff
   13584:	0018      	movs	r0, r3
   13586:	4b1b      	ldr	r3, [pc, #108]	; (135f4 <check_fs+0xa4>)
   13588:	4798      	blx	r3
   1358a:	0003      	movs	r3, r0
   1358c:	001a      	movs	r2, r3
   1358e:	4b1a      	ldr	r3, [pc, #104]	; (135f8 <check_fs+0xa8>)
   13590:	429a      	cmp	r2, r3
   13592:	d001      	beq.n	13598 <check_fs+0x48>
   13594:	2303      	movs	r3, #3
   13596:	e027      	b.n	135e8 <check_fs+0x98>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
   13598:	687b      	ldr	r3, [r7, #4]
   1359a:	2234      	movs	r2, #52	; 0x34
   1359c:	5c9b      	ldrb	r3, [r3, r2]
   1359e:	2be9      	cmp	r3, #233	; 0xe9
   135a0:	d009      	beq.n	135b6 <check_fs+0x66>
   135a2:	687b      	ldr	r3, [r7, #4]
   135a4:	2234      	movs	r2, #52	; 0x34
   135a6:	5c9b      	ldrb	r3, [r3, r2]
   135a8:	2beb      	cmp	r3, #235	; 0xeb
   135aa:	d004      	beq.n	135b6 <check_fs+0x66>
   135ac:	687b      	ldr	r3, [r7, #4]
   135ae:	2234      	movs	r2, #52	; 0x34
   135b0:	5c9b      	ldrb	r3, [r3, r2]
   135b2:	2be8      	cmp	r3, #232	; 0xe8
   135b4:	d117      	bne.n	135e6 <check_fs+0x96>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
   135b6:	687b      	ldr	r3, [r7, #4]
   135b8:	3334      	adds	r3, #52	; 0x34
   135ba:	3336      	adds	r3, #54	; 0x36
   135bc:	490f      	ldr	r1, [pc, #60]	; (135fc <check_fs+0xac>)
   135be:	2203      	movs	r2, #3
   135c0:	0018      	movs	r0, r3
   135c2:	4b0f      	ldr	r3, [pc, #60]	; (13600 <check_fs+0xb0>)
   135c4:	4798      	blx	r3
   135c6:	1e03      	subs	r3, r0, #0
   135c8:	d101      	bne.n	135ce <check_fs+0x7e>
   135ca:	2300      	movs	r3, #0
   135cc:	e00c      	b.n	135e8 <check_fs+0x98>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
   135ce:	687b      	ldr	r3, [r7, #4]
   135d0:	3334      	adds	r3, #52	; 0x34
   135d2:	3352      	adds	r3, #82	; 0x52
   135d4:	490b      	ldr	r1, [pc, #44]	; (13604 <check_fs+0xb4>)
   135d6:	2205      	movs	r2, #5
   135d8:	0018      	movs	r0, r3
   135da:	4b09      	ldr	r3, [pc, #36]	; (13600 <check_fs+0xb0>)
   135dc:	4798      	blx	r3
   135de:	1e03      	subs	r3, r0, #0
   135e0:	d101      	bne.n	135e6 <check_fs+0x96>
   135e2:	2300      	movs	r3, #0
   135e4:	e000      	b.n	135e8 <check_fs+0x98>
	}
	return 2;	/* Valid BS but not FAT */
   135e6:	2302      	movs	r3, #2
}
   135e8:	0018      	movs	r0, r3
   135ea:	46bd      	mov	sp, r7
   135ec:	b002      	add	sp, #8
   135ee:	bd80      	pop	{r7, pc}
   135f0:	00011a95 	.word	0x00011a95
   135f4:	00011709 	.word	0x00011709
   135f8:	0000aa55 	.word	0x0000aa55
   135fc:	000286e0 	.word	0x000286e0
   13600:	00011885 	.word	0x00011885
   13604:	000286e4 	.word	0x000286e4

00013608 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
   13608:	b590      	push	{r4, r7, lr}
   1360a:	b097      	sub	sp, #92	; 0x5c
   1360c:	af00      	add	r7, sp, #0
   1360e:	60f8      	str	r0, [r7, #12]
   13610:	60b9      	str	r1, [r7, #8]
   13612:	1dfb      	adds	r3, r7, #7
   13614:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
   13616:	68bb      	ldr	r3, [r7, #8]
   13618:	2200      	movs	r2, #0
   1361a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
   1361c:	68fb      	ldr	r3, [r7, #12]
   1361e:	0018      	movs	r0, r3
   13620:	4bca      	ldr	r3, [pc, #808]	; (1394c <find_volume+0x344>)
   13622:	4798      	blx	r3
   13624:	0003      	movs	r3, r0
   13626:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
   13628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1362a:	2b00      	cmp	r3, #0
   1362c:	da01      	bge.n	13632 <find_volume+0x2a>
   1362e:	230b      	movs	r3, #11
   13630:	e26d      	b.n	13b0e <find_volume+0x506>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
   13632:	4bc7      	ldr	r3, [pc, #796]	; (13950 <find_volume+0x348>)
   13634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13636:	0092      	lsls	r2, r2, #2
   13638:	58d3      	ldr	r3, [r2, r3]
   1363a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   1363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1363e:	2b00      	cmp	r3, #0
   13640:	d101      	bne.n	13646 <find_volume+0x3e>
   13642:	230c      	movs	r3, #12
   13644:	e263      	b.n	13b0e <find_volume+0x506>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
   13646:	68bb      	ldr	r3, [r7, #8]
   13648:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1364a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
   1364c:	1dfb      	adds	r3, r7, #7
   1364e:	1dfa      	adds	r2, r7, #7
   13650:	7812      	ldrb	r2, [r2, #0]
   13652:	2101      	movs	r1, #1
   13654:	438a      	bics	r2, r1
   13656:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
   13658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1365a:	781b      	ldrb	r3, [r3, #0]
   1365c:	2b00      	cmp	r3, #0
   1365e:	d01c      	beq.n	1369a <find_volume+0x92>
		stat = disk_status(fs->pdrv);
   13660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13662:	785b      	ldrb	r3, [r3, #1]
   13664:	2237      	movs	r2, #55	; 0x37
   13666:	18bc      	adds	r4, r7, r2
   13668:	0018      	movs	r0, r3
   1366a:	4bba      	ldr	r3, [pc, #744]	; (13954 <find_volume+0x34c>)
   1366c:	4798      	blx	r3
   1366e:	0003      	movs	r3, r0
   13670:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
   13672:	2337      	movs	r3, #55	; 0x37
   13674:	18fb      	adds	r3, r7, r3
   13676:	781b      	ldrb	r3, [r3, #0]
   13678:	2201      	movs	r2, #1
   1367a:	4013      	ands	r3, r2
   1367c:	d10d      	bne.n	1369a <find_volume+0x92>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
   1367e:	1dfb      	adds	r3, r7, #7
   13680:	781b      	ldrb	r3, [r3, #0]
   13682:	2b00      	cmp	r3, #0
   13684:	d007      	beq.n	13696 <find_volume+0x8e>
   13686:	2337      	movs	r3, #55	; 0x37
   13688:	18fb      	adds	r3, r7, r3
   1368a:	781b      	ldrb	r3, [r3, #0]
   1368c:	2204      	movs	r2, #4
   1368e:	4013      	ands	r3, r2
   13690:	d001      	beq.n	13696 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
   13692:	230a      	movs	r3, #10
   13694:	e23b      	b.n	13b0e <find_volume+0x506>
			}
			return FR_OK;				/* The filesystem object is valid */
   13696:	2300      	movs	r3, #0
   13698:	e239      	b.n	13b0e <find_volume+0x506>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
   1369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1369c:	2200      	movs	r2, #0
   1369e:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   136a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   136a2:	b2da      	uxtb	r2, r3
   136a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   136a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
   136a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   136aa:	785b      	ldrb	r3, [r3, #1]
   136ac:	2237      	movs	r2, #55	; 0x37
   136ae:	18bc      	adds	r4, r7, r2
   136b0:	0018      	movs	r0, r3
   136b2:	4ba9      	ldr	r3, [pc, #676]	; (13958 <find_volume+0x350>)
   136b4:	4798      	blx	r3
   136b6:	0003      	movs	r3, r0
   136b8:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
   136ba:	2337      	movs	r3, #55	; 0x37
   136bc:	18fb      	adds	r3, r7, r3
   136be:	781b      	ldrb	r3, [r3, #0]
   136c0:	2201      	movs	r2, #1
   136c2:	4013      	ands	r3, r2
   136c4:	d001      	beq.n	136ca <find_volume+0xc2>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
   136c6:	2303      	movs	r3, #3
   136c8:	e221      	b.n	13b0e <find_volume+0x506>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
   136ca:	1dfb      	adds	r3, r7, #7
   136cc:	781b      	ldrb	r3, [r3, #0]
   136ce:	2b00      	cmp	r3, #0
   136d0:	d007      	beq.n	136e2 <find_volume+0xda>
   136d2:	2337      	movs	r3, #55	; 0x37
   136d4:	18fb      	adds	r3, r7, r3
   136d6:	781b      	ldrb	r3, [r3, #0]
   136d8:	2204      	movs	r2, #4
   136da:	4013      	ands	r3, r2
   136dc:	d001      	beq.n	136e2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
   136de:	230a      	movs	r3, #10
   136e0:	e215      	b.n	13b0e <find_volume+0x506>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
   136e2:	2300      	movs	r3, #0
   136e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
   136e6:	2357      	movs	r3, #87	; 0x57
   136e8:	18fc      	adds	r4, r7, r3
   136ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   136ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   136ee:	0011      	movs	r1, r2
   136f0:	0018      	movs	r0, r3
   136f2:	4b9a      	ldr	r3, [pc, #616]	; (1395c <find_volume+0x354>)
   136f4:	4798      	blx	r3
   136f6:	0003      	movs	r3, r0
   136f8:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
   136fa:	2357      	movs	r3, #87	; 0x57
   136fc:	18fb      	adds	r3, r7, r3
   136fe:	781b      	ldrb	r3, [r3, #0]
   13700:	2b02      	cmp	r3, #2
   13702:	d14c      	bne.n	1379e <find_volume+0x196>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
   13704:	2300      	movs	r3, #0
   13706:	643b      	str	r3, [r7, #64]	; 0x40
   13708:	e01d      	b.n	13746 <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
   1370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1370c:	3334      	adds	r3, #52	; 0x34
   1370e:	001a      	movs	r2, r3
   13710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13712:	011b      	lsls	r3, r3, #4
   13714:	33bf      	adds	r3, #191	; 0xbf
   13716:	33ff      	adds	r3, #255	; 0xff
   13718:	18d3      	adds	r3, r2, r3
   1371a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
   1371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1371e:	3304      	adds	r3, #4
   13720:	781b      	ldrb	r3, [r3, #0]
   13722:	2b00      	cmp	r3, #0
   13724:	d006      	beq.n	13734 <find_volume+0x12c>
   13726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13728:	3308      	adds	r3, #8
   1372a:	0018      	movs	r0, r3
   1372c:	4b8c      	ldr	r3, [pc, #560]	; (13960 <find_volume+0x358>)
   1372e:	4798      	blx	r3
   13730:	0001      	movs	r1, r0
   13732:	e000      	b.n	13736 <find_volume+0x12e>
   13734:	2100      	movs	r1, #0
   13736:	2314      	movs	r3, #20
   13738:	18fb      	adds	r3, r7, r3
   1373a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1373c:	0092      	lsls	r2, r2, #2
   1373e:	50d1      	str	r1, [r2, r3]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
   13740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13742:	3301      	adds	r3, #1
   13744:	643b      	str	r3, [r7, #64]	; 0x40
   13746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13748:	2b03      	cmp	r3, #3
   1374a:	d9de      	bls.n	1370a <find_volume+0x102>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
   1374c:	2300      	movs	r3, #0
   1374e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
   13750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13752:	2b00      	cmp	r3, #0
   13754:	d002      	beq.n	1375c <find_volume+0x154>
   13756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13758:	3b01      	subs	r3, #1
   1375a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
   1375c:	2314      	movs	r3, #20
   1375e:	18fb      	adds	r3, r7, r3
   13760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13762:	0092      	lsls	r2, r2, #2
   13764:	58d3      	ldr	r3, [r2, r3]
   13766:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
   13768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1376a:	2b00      	cmp	r3, #0
   1376c:	d008      	beq.n	13780 <find_volume+0x178>
   1376e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   13770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13772:	0011      	movs	r1, r2
   13774:	0018      	movs	r0, r3
   13776:	4b79      	ldr	r3, [pc, #484]	; (1395c <find_volume+0x354>)
   13778:	4798      	blx	r3
   1377a:	0003      	movs	r3, r0
   1377c:	001a      	movs	r2, r3
   1377e:	e000      	b.n	13782 <find_volume+0x17a>
   13780:	2203      	movs	r2, #3
   13782:	2357      	movs	r3, #87	; 0x57
   13784:	18fb      	adds	r3, r7, r3
   13786:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
   13788:	2357      	movs	r3, #87	; 0x57
   1378a:	18fb      	adds	r3, r7, r3
   1378c:	781b      	ldrb	r3, [r3, #0]
   1378e:	2b01      	cmp	r3, #1
   13790:	d905      	bls.n	1379e <find_volume+0x196>
   13792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13794:	3301      	adds	r3, #1
   13796:	643b      	str	r3, [r7, #64]	; 0x40
   13798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1379a:	2b03      	cmp	r3, #3
   1379c:	d9de      	bls.n	1375c <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
   1379e:	2357      	movs	r3, #87	; 0x57
   137a0:	18fb      	adds	r3, r7, r3
   137a2:	781b      	ldrb	r3, [r3, #0]
   137a4:	2b04      	cmp	r3, #4
   137a6:	d101      	bne.n	137ac <find_volume+0x1a4>
   137a8:	2301      	movs	r3, #1
   137aa:	e1b0      	b.n	13b0e <find_volume+0x506>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
   137ac:	2357      	movs	r3, #87	; 0x57
   137ae:	18fb      	adds	r3, r7, r3
   137b0:	781b      	ldrb	r3, [r3, #0]
   137b2:	2b01      	cmp	r3, #1
   137b4:	d901      	bls.n	137ba <find_volume+0x1b2>
   137b6:	230d      	movs	r3, #13
   137b8:	e1a9      	b.n	13b0e <find_volume+0x506>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
   137ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   137bc:	3334      	adds	r3, #52	; 0x34
   137be:	330b      	adds	r3, #11
   137c0:	0018      	movs	r0, r3
   137c2:	4b68      	ldr	r3, [pc, #416]	; (13964 <find_volume+0x35c>)
   137c4:	4798      	blx	r3
   137c6:	0003      	movs	r3, r0
   137c8:	001a      	movs	r2, r3
   137ca:	2380      	movs	r3, #128	; 0x80
   137cc:	009b      	lsls	r3, r3, #2
   137ce:	429a      	cmp	r2, r3
   137d0:	d001      	beq.n	137d6 <find_volume+0x1ce>
   137d2:	230d      	movs	r3, #13
   137d4:	e19b      	b.n	13b0e <find_volume+0x506>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
   137d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   137d8:	3334      	adds	r3, #52	; 0x34
   137da:	3316      	adds	r3, #22
   137dc:	0018      	movs	r0, r3
   137de:	4b61      	ldr	r3, [pc, #388]	; (13964 <find_volume+0x35c>)
   137e0:	4798      	blx	r3
   137e2:	0003      	movs	r3, r0
   137e4:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
   137e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   137e8:	2b00      	cmp	r3, #0
   137ea:	d107      	bne.n	137fc <find_volume+0x1f4>
   137ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   137ee:	3334      	adds	r3, #52	; 0x34
   137f0:	3324      	adds	r3, #36	; 0x24
   137f2:	0018      	movs	r0, r3
   137f4:	4b5a      	ldr	r3, [pc, #360]	; (13960 <find_volume+0x358>)
   137f6:	4798      	blx	r3
   137f8:	0003      	movs	r3, r0
   137fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
   137fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   137fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   13800:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
   13802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13804:	2244      	movs	r2, #68	; 0x44
   13806:	5c9a      	ldrb	r2, [r3, r2]
   13808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1380a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   1380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1380e:	789b      	ldrb	r3, [r3, #2]
   13810:	2b01      	cmp	r3, #1
   13812:	d005      	beq.n	13820 <find_volume+0x218>
   13814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13816:	789b      	ldrb	r3, [r3, #2]
   13818:	2b02      	cmp	r3, #2
   1381a:	d001      	beq.n	13820 <find_volume+0x218>
   1381c:	230d      	movs	r3, #13
   1381e:	e176      	b.n	13b0e <find_volume+0x506>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
   13820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13822:	789b      	ldrb	r3, [r3, #2]
   13824:	001a      	movs	r2, r3
   13826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13828:	4353      	muls	r3, r2
   1382a:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
   1382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1382e:	2241      	movs	r2, #65	; 0x41
   13830:	5c9b      	ldrb	r3, [r3, r2]
   13832:	b29a      	uxth	r2, r3
   13834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13836:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   13838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1383a:	895b      	ldrh	r3, [r3, #10]
   1383c:	2b00      	cmp	r3, #0
   1383e:	d007      	beq.n	13850 <find_volume+0x248>
   13840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13842:	895b      	ldrh	r3, [r3, #10]
   13844:	001a      	movs	r2, r3
   13846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13848:	895b      	ldrh	r3, [r3, #10]
   1384a:	3b01      	subs	r3, #1
   1384c:	4013      	ands	r3, r2
   1384e:	d001      	beq.n	13854 <find_volume+0x24c>
   13850:	230d      	movs	r3, #13
   13852:	e15c      	b.n	13b0e <find_volume+0x506>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
   13854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13856:	3334      	adds	r3, #52	; 0x34
   13858:	3311      	adds	r3, #17
   1385a:	0018      	movs	r0, r3
   1385c:	4b41      	ldr	r3, [pc, #260]	; (13964 <find_volume+0x35c>)
   1385e:	4798      	blx	r3
   13860:	0003      	movs	r3, r0
   13862:	001a      	movs	r2, r3
   13864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13866:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   13868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1386a:	891b      	ldrh	r3, [r3, #8]
   1386c:	220f      	movs	r2, #15
   1386e:	4013      	ands	r3, r2
   13870:	b29b      	uxth	r3, r3
   13872:	2b00      	cmp	r3, #0
   13874:	d001      	beq.n	1387a <find_volume+0x272>
   13876:	230d      	movs	r3, #13
   13878:	e149      	b.n	13b0e <find_volume+0x506>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
   1387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1387c:	3334      	adds	r3, #52	; 0x34
   1387e:	3313      	adds	r3, #19
   13880:	0018      	movs	r0, r3
   13882:	4b38      	ldr	r3, [pc, #224]	; (13964 <find_volume+0x35c>)
   13884:	4798      	blx	r3
   13886:	0003      	movs	r3, r0
   13888:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
   1388a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1388c:	2b00      	cmp	r3, #0
   1388e:	d107      	bne.n	138a0 <find_volume+0x298>
   13890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13892:	3334      	adds	r3, #52	; 0x34
   13894:	3320      	adds	r3, #32
   13896:	0018      	movs	r0, r3
   13898:	4b31      	ldr	r3, [pc, #196]	; (13960 <find_volume+0x358>)
   1389a:	4798      	blx	r3
   1389c:	0003      	movs	r3, r0
   1389e:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
   138a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   138a2:	3334      	adds	r3, #52	; 0x34
   138a4:	330e      	adds	r3, #14
   138a6:	222e      	movs	r2, #46	; 0x2e
   138a8:	18bc      	adds	r4, r7, r2
   138aa:	0018      	movs	r0, r3
   138ac:	4b2d      	ldr	r3, [pc, #180]	; (13964 <find_volume+0x35c>)
   138ae:	4798      	blx	r3
   138b0:	0003      	movs	r3, r0
   138b2:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
   138b4:	232e      	movs	r3, #46	; 0x2e
   138b6:	18fb      	adds	r3, r7, r3
   138b8:	881b      	ldrh	r3, [r3, #0]
   138ba:	2b00      	cmp	r3, #0
   138bc:	d101      	bne.n	138c2 <find_volume+0x2ba>
   138be:	230d      	movs	r3, #13
   138c0:	e125      	b.n	13b0e <find_volume+0x506>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
   138c2:	232e      	movs	r3, #46	; 0x2e
   138c4:	18fb      	adds	r3, r7, r3
   138c6:	881a      	ldrh	r2, [r3, #0]
   138c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   138ca:	18d3      	adds	r3, r2, r3
   138cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   138ce:	8912      	ldrh	r2, [r2, #8]
   138d0:	0912      	lsrs	r2, r2, #4
   138d2:	b292      	uxth	r2, r2
   138d4:	189b      	adds	r3, r3, r2
   138d6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
   138d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   138da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138dc:	429a      	cmp	r2, r3
   138de:	d201      	bcs.n	138e4 <find_volume+0x2dc>
   138e0:	230d      	movs	r3, #13
   138e2:	e114      	b.n	13b0e <find_volume+0x506>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
   138e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
   138e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138e8:	1ad2      	subs	r2, r2, r3
   138ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   138ec:	895b      	ldrh	r3, [r3, #10]
   138ee:	0019      	movs	r1, r3
   138f0:	4b1d      	ldr	r3, [pc, #116]	; (13968 <find_volume+0x360>)
   138f2:	0010      	movs	r0, r2
   138f4:	4798      	blx	r3
   138f6:	0003      	movs	r3, r0
   138f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   138fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138fc:	2b00      	cmp	r3, #0
   138fe:	d101      	bne.n	13904 <find_volume+0x2fc>
   13900:	230d      	movs	r3, #13
   13902:	e104      	b.n	13b0e <find_volume+0x506>
		fmt = 0;
   13904:	2357      	movs	r3, #87	; 0x57
   13906:	18fb      	adds	r3, r7, r3
   13908:	2200      	movs	r2, #0
   1390a:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
   1390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1390e:	4a17      	ldr	r2, [pc, #92]	; (1396c <find_volume+0x364>)
   13910:	4293      	cmp	r3, r2
   13912:	d803      	bhi.n	1391c <find_volume+0x314>
   13914:	2357      	movs	r3, #87	; 0x57
   13916:	18fb      	adds	r3, r7, r3
   13918:	2203      	movs	r2, #3
   1391a:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
   1391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1391e:	4a14      	ldr	r2, [pc, #80]	; (13970 <find_volume+0x368>)
   13920:	4293      	cmp	r3, r2
   13922:	d803      	bhi.n	1392c <find_volume+0x324>
   13924:	2357      	movs	r3, #87	; 0x57
   13926:	18fb      	adds	r3, r7, r3
   13928:	2202      	movs	r2, #2
   1392a:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   1392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1392e:	4a11      	ldr	r2, [pc, #68]	; (13974 <find_volume+0x36c>)
   13930:	4293      	cmp	r3, r2
   13932:	d803      	bhi.n	1393c <find_volume+0x334>
   13934:	2357      	movs	r3, #87	; 0x57
   13936:	18fb      	adds	r3, r7, r3
   13938:	2201      	movs	r2, #1
   1393a:	701a      	strb	r2, [r3, #0]
		if (fmt == 0) return FR_NO_FILESYSTEM;
   1393c:	2357      	movs	r3, #87	; 0x57
   1393e:	18fb      	adds	r3, r7, r3
   13940:	781b      	ldrb	r3, [r3, #0]
   13942:	2b00      	cmp	r3, #0
   13944:	d118      	bne.n	13978 <find_volume+0x370>
   13946:	230d      	movs	r3, #13
   13948:	e0e1      	b.n	13b0e <find_volume+0x506>
   1394a:	46c0      	nop			; (mov r8, r8)
   1394c:	000134b9 	.word	0x000134b9
   13950:	20000e10 	.word	0x20000e10
   13954:	000113ad 	.word	0x000113ad
   13958:	00011331 	.word	0x00011331
   1395c:	00013551 	.word	0x00013551
   13960:	00011745 	.word	0x00011745
   13964:	00011709 	.word	0x00011709
   13968:	00020bbd 	.word	0x00020bbd
   1396c:	0ffffff5 	.word	0x0ffffff5
   13970:	0000fff5 	.word	0x0000fff5
   13974:	00000ff5 	.word	0x00000ff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   13978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1397a:	1c9a      	adds	r2, r3, #2
   1397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1397e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
   13980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13982:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   13984:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   13986:	232e      	movs	r3, #46	; 0x2e
   13988:	18fb      	adds	r3, r7, r3
   1398a:	881a      	ldrh	r2, [r3, #0]
   1398c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1398e:	18d2      	adds	r2, r2, r3
   13990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13992:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
   13994:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   13996:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13998:	18d2      	adds	r2, r2, r3
   1399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1399c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
   1399e:	2357      	movs	r3, #87	; 0x57
   139a0:	18fb      	adds	r3, r7, r3
   139a2:	781b      	ldrb	r3, [r3, #0]
   139a4:	2b03      	cmp	r3, #3
   139a6:	d11d      	bne.n	139e4 <find_volume+0x3dc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   139a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   139aa:	3334      	adds	r3, #52	; 0x34
   139ac:	332a      	adds	r3, #42	; 0x2a
   139ae:	0018      	movs	r0, r3
   139b0:	4b59      	ldr	r3, [pc, #356]	; (13b18 <find_volume+0x510>)
   139b2:	4798      	blx	r3
   139b4:	1e03      	subs	r3, r0, #0
   139b6:	d001      	beq.n	139bc <find_volume+0x3b4>
   139b8:	230d      	movs	r3, #13
   139ba:	e0a8      	b.n	13b0e <find_volume+0x506>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
   139bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   139be:	891b      	ldrh	r3, [r3, #8]
   139c0:	2b00      	cmp	r3, #0
   139c2:	d001      	beq.n	139c8 <find_volume+0x3c0>
   139c4:	230d      	movs	r3, #13
   139c6:	e0a2      	b.n	13b0e <find_volume+0x506>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
   139c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   139ca:	3334      	adds	r3, #52	; 0x34
   139cc:	332c      	adds	r3, #44	; 0x2c
   139ce:	0018      	movs	r0, r3
   139d0:	4b52      	ldr	r3, [pc, #328]	; (13b1c <find_volume+0x514>)
   139d2:	4798      	blx	r3
   139d4:	0002      	movs	r2, r0
   139d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   139d8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
   139da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   139dc:	699b      	ldr	r3, [r3, #24]
   139de:	009b      	lsls	r3, r3, #2
   139e0:	647b      	str	r3, [r7, #68]	; 0x44
   139e2:	e020      	b.n	13a26 <find_volume+0x41e>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   139e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   139e6:	891b      	ldrh	r3, [r3, #8]
   139e8:	2b00      	cmp	r3, #0
   139ea:	d101      	bne.n	139f0 <find_volume+0x3e8>
   139ec:	230d      	movs	r3, #13
   139ee:	e08e      	b.n	13b0e <find_volume+0x506>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
   139f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   139f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   139f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   139f6:	18d2      	adds	r2, r2, r3
   139f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   139fa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   139fc:	2357      	movs	r3, #87	; 0x57
   139fe:	18fb      	adds	r3, r7, r3
   13a00:	781b      	ldrb	r3, [r3, #0]
   13a02:	2b02      	cmp	r3, #2
   13a04:	d103      	bne.n	13a0e <find_volume+0x406>
   13a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a08:	699b      	ldr	r3, [r3, #24]
   13a0a:	005b      	lsls	r3, r3, #1
   13a0c:	e00a      	b.n	13a24 <find_volume+0x41c>
   13a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a10:	699a      	ldr	r2, [r3, #24]
   13a12:	0013      	movs	r3, r2
   13a14:	005b      	lsls	r3, r3, #1
   13a16:	189b      	adds	r3, r3, r2
   13a18:	085a      	lsrs	r2, r3, #1
   13a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a1c:	699b      	ldr	r3, [r3, #24]
   13a1e:	2101      	movs	r1, #1
   13a20:	400b      	ands	r3, r1
   13a22:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
   13a24:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   13a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a28:	69da      	ldr	r2, [r3, #28]
   13a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13a2c:	493c      	ldr	r1, [pc, #240]	; (13b20 <find_volume+0x518>)
   13a2e:	468c      	mov	ip, r1
   13a30:	4463      	add	r3, ip
   13a32:	0a5b      	lsrs	r3, r3, #9
   13a34:	429a      	cmp	r2, r3
   13a36:	d201      	bcs.n	13a3c <find_volume+0x434>
   13a38:	230d      	movs	r3, #13
   13a3a:	e068      	b.n	13b0e <find_volume+0x506>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
   13a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a3e:	2201      	movs	r2, #1
   13a40:	4252      	negs	r2, r2
   13a42:	615a      	str	r2, [r3, #20]
   13a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a46:	695a      	ldr	r2, [r3, #20]
   13a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a4a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
   13a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a4e:	2280      	movs	r2, #128	; 0x80
   13a50:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
   13a52:	2357      	movs	r3, #87	; 0x57
   13a54:	18fb      	adds	r3, r7, r3
   13a56:	781b      	ldrb	r3, [r3, #0]
   13a58:	2b03      	cmp	r3, #3
   13a5a:	d148      	bne.n	13aee <find_volume+0x4e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
   13a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a5e:	3334      	adds	r3, #52	; 0x34
   13a60:	3330      	adds	r3, #48	; 0x30
   13a62:	0018      	movs	r0, r3
   13a64:	4b2c      	ldr	r3, [pc, #176]	; (13b18 <find_volume+0x510>)
   13a66:	4798      	blx	r3
   13a68:	0003      	movs	r3, r0
   13a6a:	2b01      	cmp	r3, #1
   13a6c:	d13f      	bne.n	13aee <find_volume+0x4e6>
			&& move_window(fs, bsect + 1) == FR_OK)
   13a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13a70:	1c5a      	adds	r2, r3, #1
   13a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a74:	0011      	movs	r1, r2
   13a76:	0018      	movs	r0, r3
   13a78:	4b2a      	ldr	r3, [pc, #168]	; (13b24 <find_volume+0x51c>)
   13a7a:	4798      	blx	r3
   13a7c:	1e03      	subs	r3, r0, #0
   13a7e:	d136      	bne.n	13aee <find_volume+0x4e6>
		{
			fs->fsi_flag = 0;
   13a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a82:	2200      	movs	r2, #0
   13a84:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
   13a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13a88:	3334      	adds	r3, #52	; 0x34
   13a8a:	33ff      	adds	r3, #255	; 0xff
   13a8c:	33ff      	adds	r3, #255	; 0xff
   13a8e:	0018      	movs	r0, r3
   13a90:	4b21      	ldr	r3, [pc, #132]	; (13b18 <find_volume+0x510>)
   13a92:	4798      	blx	r3
   13a94:	0003      	movs	r3, r0
   13a96:	001a      	movs	r2, r3
   13a98:	4b23      	ldr	r3, [pc, #140]	; (13b28 <find_volume+0x520>)
   13a9a:	429a      	cmp	r2, r3
   13a9c:	d127      	bne.n	13aee <find_volume+0x4e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
   13a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13aa0:	3334      	adds	r3, #52	; 0x34
   13aa2:	0018      	movs	r0, r3
   13aa4:	4b1d      	ldr	r3, [pc, #116]	; (13b1c <find_volume+0x514>)
   13aa6:	4798      	blx	r3
   13aa8:	0002      	movs	r2, r0
   13aaa:	4b20      	ldr	r3, [pc, #128]	; (13b2c <find_volume+0x524>)
   13aac:	429a      	cmp	r2, r3
   13aae:	d11e      	bne.n	13aee <find_volume+0x4e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
   13ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13ab2:	3334      	adds	r3, #52	; 0x34
   13ab4:	33e5      	adds	r3, #229	; 0xe5
   13ab6:	33ff      	adds	r3, #255	; 0xff
   13ab8:	0018      	movs	r0, r3
   13aba:	4b18      	ldr	r3, [pc, #96]	; (13b1c <find_volume+0x514>)
   13abc:	4798      	blx	r3
   13abe:	0002      	movs	r2, r0
   13ac0:	4b1b      	ldr	r3, [pc, #108]	; (13b30 <find_volume+0x528>)
   13ac2:	429a      	cmp	r2, r3
   13ac4:	d113      	bne.n	13aee <find_volume+0x4e6>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
   13ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13ac8:	3334      	adds	r3, #52	; 0x34
   13aca:	33e9      	adds	r3, #233	; 0xe9
   13acc:	33ff      	adds	r3, #255	; 0xff
   13ace:	0018      	movs	r0, r3
   13ad0:	4b12      	ldr	r3, [pc, #72]	; (13b1c <find_volume+0x514>)
   13ad2:	4798      	blx	r3
   13ad4:	0002      	movs	r2, r0
   13ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13ad8:	615a      	str	r2, [r3, #20]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
   13ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13adc:	3334      	adds	r3, #52	; 0x34
   13ade:	33ed      	adds	r3, #237	; 0xed
   13ae0:	33ff      	adds	r3, #255	; 0xff
   13ae2:	0018      	movs	r0, r3
   13ae4:	4b0d      	ldr	r3, [pc, #52]	; (13b1c <find_volume+0x514>)
   13ae6:	4798      	blx	r3
   13ae8:	0002      	movs	r2, r0
   13aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13aec:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
   13aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13af0:	2257      	movs	r2, #87	; 0x57
   13af2:	18ba      	adds	r2, r7, r2
   13af4:	7812      	ldrb	r2, [r2, #0]
   13af6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
   13af8:	4b0e      	ldr	r3, [pc, #56]	; (13b34 <find_volume+0x52c>)
   13afa:	881b      	ldrh	r3, [r3, #0]
   13afc:	3301      	adds	r3, #1
   13afe:	b29a      	uxth	r2, r3
   13b00:	4b0c      	ldr	r3, [pc, #48]	; (13b34 <find_volume+0x52c>)
   13b02:	801a      	strh	r2, [r3, #0]
   13b04:	4b0b      	ldr	r3, [pc, #44]	; (13b34 <find_volume+0x52c>)
   13b06:	881a      	ldrh	r2, [r3, #0]
   13b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13b0a:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
   13b0c:	2300      	movs	r3, #0
}
   13b0e:	0018      	movs	r0, r3
   13b10:	46bd      	mov	sp, r7
   13b12:	b017      	add	sp, #92	; 0x5c
   13b14:	bd90      	pop	{r4, r7, pc}
   13b16:	46c0      	nop			; (mov r8, r8)
   13b18:	00011709 	.word	0x00011709
   13b1c:	00011745 	.word	0x00011745
   13b20:	000001ff 	.word	0x000001ff
   13b24:	00011a95 	.word	0x00011a95
   13b28:	0000aa55 	.word	0x0000aa55
   13b2c:	41615252 	.word	0x41615252
   13b30:	61417272 	.word	0x61417272
   13b34:	20000e14 	.word	0x20000e14

00013b38 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
   13b38:	b580      	push	{r7, lr}
   13b3a:	b084      	sub	sp, #16
   13b3c:	af00      	add	r7, sp, #0
   13b3e:	6078      	str	r0, [r7, #4]
   13b40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
   13b42:	230f      	movs	r3, #15
   13b44:	18fb      	adds	r3, r7, r3
   13b46:	2209      	movs	r2, #9
   13b48:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   13b4a:	687b      	ldr	r3, [r7, #4]
   13b4c:	2b00      	cmp	r3, #0
   13b4e:	d01e      	beq.n	13b8e <validate+0x56>
   13b50:	687b      	ldr	r3, [r7, #4]
   13b52:	681b      	ldr	r3, [r3, #0]
   13b54:	2b00      	cmp	r3, #0
   13b56:	d01a      	beq.n	13b8e <validate+0x56>
   13b58:	687b      	ldr	r3, [r7, #4]
   13b5a:	681b      	ldr	r3, [r3, #0]
   13b5c:	781b      	ldrb	r3, [r3, #0]
   13b5e:	2b00      	cmp	r3, #0
   13b60:	d015      	beq.n	13b8e <validate+0x56>
   13b62:	687b      	ldr	r3, [r7, #4]
   13b64:	889a      	ldrh	r2, [r3, #4]
   13b66:	687b      	ldr	r3, [r7, #4]
   13b68:	681b      	ldr	r3, [r3, #0]
   13b6a:	88db      	ldrh	r3, [r3, #6]
   13b6c:	429a      	cmp	r2, r3
   13b6e:	d10e      	bne.n	13b8e <validate+0x56>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
   13b70:	687b      	ldr	r3, [r7, #4]
   13b72:	681b      	ldr	r3, [r3, #0]
   13b74:	785b      	ldrb	r3, [r3, #1]
   13b76:	0018      	movs	r0, r3
   13b78:	4b0e      	ldr	r3, [pc, #56]	; (13bb4 <validate+0x7c>)
   13b7a:	4798      	blx	r3
   13b7c:	0003      	movs	r3, r0
   13b7e:	001a      	movs	r2, r3
   13b80:	2301      	movs	r3, #1
   13b82:	4013      	ands	r3, r2
   13b84:	d103      	bne.n	13b8e <validate+0x56>
			res = FR_OK;
   13b86:	230f      	movs	r3, #15
   13b88:	18fb      	adds	r3, r7, r3
   13b8a:	2200      	movs	r2, #0
   13b8c:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   13b8e:	230f      	movs	r3, #15
   13b90:	18fb      	adds	r3, r7, r3
   13b92:	781b      	ldrb	r3, [r3, #0]
   13b94:	2b00      	cmp	r3, #0
   13b96:	d102      	bne.n	13b9e <validate+0x66>
   13b98:	687b      	ldr	r3, [r7, #4]
   13b9a:	681a      	ldr	r2, [r3, #0]
   13b9c:	e000      	b.n	13ba0 <validate+0x68>
   13b9e:	2200      	movs	r2, #0
   13ba0:	683b      	ldr	r3, [r7, #0]
   13ba2:	601a      	str	r2, [r3, #0]
	return res;
   13ba4:	230f      	movs	r3, #15
   13ba6:	18fb      	adds	r3, r7, r3
   13ba8:	781b      	ldrb	r3, [r3, #0]
}
   13baa:	0018      	movs	r0, r3
   13bac:	46bd      	mov	sp, r7
   13bae:	b004      	add	sp, #16
   13bb0:	bd80      	pop	{r7, pc}
   13bb2:	46c0      	nop			; (mov r8, r8)
   13bb4:	000113ad 	.word	0x000113ad

00013bb8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
   13bb8:	b590      	push	{r4, r7, lr}
   13bba:	b089      	sub	sp, #36	; 0x24
   13bbc:	af00      	add	r7, sp, #0
   13bbe:	60f8      	str	r0, [r7, #12]
   13bc0:	60b9      	str	r1, [r7, #8]
   13bc2:	1dfb      	adds	r3, r7, #7
   13bc4:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
   13bc6:	68bb      	ldr	r3, [r7, #8]
   13bc8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
   13bca:	2310      	movs	r3, #16
   13bcc:	18fb      	adds	r3, r7, r3
   13bce:	0018      	movs	r0, r3
   13bd0:	4b1b      	ldr	r3, [pc, #108]	; (13c40 <f_mount+0x88>)
   13bd2:	4798      	blx	r3
   13bd4:	0003      	movs	r3, r0
   13bd6:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
   13bd8:	69fb      	ldr	r3, [r7, #28]
   13bda:	2b00      	cmp	r3, #0
   13bdc:	da01      	bge.n	13be2 <f_mount+0x2a>
   13bde:	230b      	movs	r3, #11
   13be0:	e02a      	b.n	13c38 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
   13be2:	4b18      	ldr	r3, [pc, #96]	; (13c44 <f_mount+0x8c>)
   13be4:	69fa      	ldr	r2, [r7, #28]
   13be6:	0092      	lsls	r2, r2, #2
   13be8:	58d3      	ldr	r3, [r2, r3]
   13bea:	61bb      	str	r3, [r7, #24]

	if (cfs) {
   13bec:	69bb      	ldr	r3, [r7, #24]
   13bee:	2b00      	cmp	r3, #0
   13bf0:	d002      	beq.n	13bf8 <f_mount+0x40>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
   13bf2:	69bb      	ldr	r3, [r7, #24]
   13bf4:	2200      	movs	r2, #0
   13bf6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   13bf8:	68fb      	ldr	r3, [r7, #12]
   13bfa:	2b00      	cmp	r3, #0
   13bfc:	d002      	beq.n	13c04 <f_mount+0x4c>
		fs->fs_type = 0;				/* Clear new fs object */
   13bfe:	68fb      	ldr	r3, [r7, #12]
   13c00:	2200      	movs	r2, #0
   13c02:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
   13c04:	68f9      	ldr	r1, [r7, #12]
   13c06:	4b0f      	ldr	r3, [pc, #60]	; (13c44 <f_mount+0x8c>)
   13c08:	69fa      	ldr	r2, [r7, #28]
   13c0a:	0092      	lsls	r2, r2, #2
   13c0c:	50d1      	str	r1, [r2, r3]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
   13c0e:	1dfb      	adds	r3, r7, #7
   13c10:	781b      	ldrb	r3, [r3, #0]
   13c12:	2b00      	cmp	r3, #0
   13c14:	d101      	bne.n	13c1a <f_mount+0x62>
   13c16:	2300      	movs	r3, #0
   13c18:	e00e      	b.n	13c38 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
   13c1a:	2317      	movs	r3, #23
   13c1c:	18fc      	adds	r4, r7, r3
   13c1e:	230c      	movs	r3, #12
   13c20:	18f9      	adds	r1, r7, r3
   13c22:	2308      	movs	r3, #8
   13c24:	18fb      	adds	r3, r7, r3
   13c26:	2200      	movs	r2, #0
   13c28:	0018      	movs	r0, r3
   13c2a:	4b07      	ldr	r3, [pc, #28]	; (13c48 <f_mount+0x90>)
   13c2c:	4798      	blx	r3
   13c2e:	0003      	movs	r3, r0
   13c30:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
   13c32:	2317      	movs	r3, #23
   13c34:	18fb      	adds	r3, r7, r3
   13c36:	781b      	ldrb	r3, [r3, #0]
}
   13c38:	0018      	movs	r0, r3
   13c3a:	46bd      	mov	sp, r7
   13c3c:	b009      	add	sp, #36	; 0x24
   13c3e:	bd90      	pop	{r4, r7, pc}
   13c40:	000134b9 	.word	0x000134b9
   13c44:	20000e10 	.word	0x20000e10
   13c48:	00013609 	.word	0x00013609

00013c4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   13c4c:	b590      	push	{r4, r7, lr}
   13c4e:	4ca9      	ldr	r4, [pc, #676]	; (13ef4 <f_open+0x2a8>)
   13c50:	44a5      	add	sp, r4
   13c52:	af00      	add	r7, sp, #0
   13c54:	60f8      	str	r0, [r7, #12]
   13c56:	60b9      	str	r1, [r7, #8]
   13c58:	4ba7      	ldr	r3, [pc, #668]	; (13ef8 <f_open+0x2ac>)
   13c5a:	2198      	movs	r1, #152	; 0x98
   13c5c:	0089      	lsls	r1, r1, #2
   13c5e:	468c      	mov	ip, r1
   13c60:	44bc      	add	ip, r7
   13c62:	4463      	add	r3, ip
   13c64:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
   13c66:	68fb      	ldr	r3, [r7, #12]
   13c68:	2b00      	cmp	r3, #0
   13c6a:	d101      	bne.n	13c70 <f_open+0x24>
   13c6c:	2309      	movs	r3, #9
   13c6e:	e2a4      	b.n	141ba <f_open+0x56e>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
   13c70:	4ba1      	ldr	r3, [pc, #644]	; (13ef8 <f_open+0x2ac>)
   13c72:	2298      	movs	r2, #152	; 0x98
   13c74:	0092      	lsls	r2, r2, #2
   13c76:	4694      	mov	ip, r2
   13c78:	44bc      	add	ip, r7
   13c7a:	4463      	add	r3, ip
   13c7c:	4a9e      	ldr	r2, [pc, #632]	; (13ef8 <f_open+0x2ac>)
   13c7e:	2198      	movs	r1, #152	; 0x98
   13c80:	0089      	lsls	r1, r1, #2
   13c82:	468c      	mov	ip, r1
   13c84:	44bc      	add	ip, r7
   13c86:	4462      	add	r2, ip
   13c88:	7812      	ldrb	r2, [r2, #0]
   13c8a:	213f      	movs	r1, #63	; 0x3f
   13c8c:	400a      	ands	r2, r1
   13c8e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
   13c90:	4b9a      	ldr	r3, [pc, #616]	; (13efc <f_open+0x2b0>)
   13c92:	18fc      	adds	r4, r7, r3
   13c94:	4b98      	ldr	r3, [pc, #608]	; (13ef8 <f_open+0x2ac>)
   13c96:	2298      	movs	r2, #152	; 0x98
   13c98:	0092      	lsls	r2, r2, #2
   13c9a:	4694      	mov	ip, r2
   13c9c:	44bc      	add	ip, r7
   13c9e:	4463      	add	r3, ip
   13ca0:	781a      	ldrb	r2, [r3, #0]
   13ca2:	2384      	movs	r3, #132	; 0x84
   13ca4:	009b      	lsls	r3, r3, #2
   13ca6:	18f9      	adds	r1, r7, r3
   13ca8:	2308      	movs	r3, #8
   13caa:	18fb      	adds	r3, r7, r3
   13cac:	0018      	movs	r0, r3
   13cae:	4b94      	ldr	r3, [pc, #592]	; (13f00 <f_open+0x2b4>)
   13cb0:	4798      	blx	r3
   13cb2:	0003      	movs	r3, r0
   13cb4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   13cb6:	4b91      	ldr	r3, [pc, #580]	; (13efc <f_open+0x2b0>)
   13cb8:	18fb      	adds	r3, r7, r3
   13cba:	781b      	ldrb	r3, [r3, #0]
   13cbc:	2b00      	cmp	r3, #0
   13cbe:	d000      	beq.n	13cc2 <f_open+0x76>
   13cc0:	e270      	b.n	141a4 <f_open+0x558>
		dj.obj.fs = fs;
   13cc2:	2384      	movs	r3, #132	; 0x84
   13cc4:	009b      	lsls	r3, r3, #2
   13cc6:	18fb      	adds	r3, r7, r3
   13cc8:	681a      	ldr	r2, [r3, #0]
   13cca:	2385      	movs	r3, #133	; 0x85
   13ccc:	009b      	lsls	r3, r3, #2
   13cce:	18fb      	adds	r3, r7, r3
   13cd0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
   13cd2:	2384      	movs	r3, #132	; 0x84
   13cd4:	009b      	lsls	r3, r3, #2
   13cd6:	18fb      	adds	r3, r7, r3
   13cd8:	681b      	ldr	r3, [r3, #0]
   13cda:	2210      	movs	r2, #16
   13cdc:	18ba      	adds	r2, r7, r2
   13cde:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
   13ce0:	68ba      	ldr	r2, [r7, #8]
   13ce2:	4b86      	ldr	r3, [pc, #536]	; (13efc <f_open+0x2b0>)
   13ce4:	18fc      	adds	r4, r7, r3
   13ce6:	2385      	movs	r3, #133	; 0x85
   13ce8:	009b      	lsls	r3, r3, #2
   13cea:	18fb      	adds	r3, r7, r3
   13cec:	0011      	movs	r1, r2
   13cee:	0018      	movs	r0, r3
   13cf0:	4b84      	ldr	r3, [pc, #528]	; (13f04 <f_open+0x2b8>)
   13cf2:	4798      	blx	r3
   13cf4:	0003      	movs	r3, r0
   13cf6:	7023      	strb	r3, [r4, #0]
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
   13cf8:	4b80      	ldr	r3, [pc, #512]	; (13efc <f_open+0x2b0>)
   13cfa:	18fb      	adds	r3, r7, r3
   13cfc:	781b      	ldrb	r3, [r3, #0]
   13cfe:	2b00      	cmp	r3, #0
   13d00:	d10b      	bne.n	13d1a <f_open+0xce>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
   13d02:	2385      	movs	r3, #133	; 0x85
   13d04:	009b      	lsls	r3, r3, #2
   13d06:	18fb      	adds	r3, r7, r3
   13d08:	222b      	movs	r2, #43	; 0x2b
   13d0a:	5c9b      	ldrb	r3, [r3, r2]
   13d0c:	b25b      	sxtb	r3, r3
   13d0e:	2b00      	cmp	r3, #0
   13d10:	da03      	bge.n	13d1a <f_open+0xce>
				res = FR_INVALID_NAME;
   13d12:	4b7a      	ldr	r3, [pc, #488]	; (13efc <f_open+0x2b0>)
   13d14:	18fb      	adds	r3, r7, r3
   13d16:	2206      	movs	r2, #6
   13d18:	701a      	strb	r2, [r3, #0]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13d1a:	4b77      	ldr	r3, [pc, #476]	; (13ef8 <f_open+0x2ac>)
   13d1c:	2298      	movs	r2, #152	; 0x98
   13d1e:	0092      	lsls	r2, r2, #2
   13d20:	4694      	mov	ip, r2
   13d22:	44bc      	add	ip, r7
   13d24:	4463      	add	r3, ip
   13d26:	781b      	ldrb	r3, [r3, #0]
   13d28:	221c      	movs	r2, #28
   13d2a:	4013      	ands	r3, r2
   13d2c:	d100      	bne.n	13d30 <f_open+0xe4>
   13d2e:	e0cf      	b.n	13ed0 <f_open+0x284>
			if (res != FR_OK) {					/* No file, create new */
   13d30:	4b72      	ldr	r3, [pc, #456]	; (13efc <f_open+0x2b0>)
   13d32:	18fb      	adds	r3, r7, r3
   13d34:	781b      	ldrb	r3, [r3, #0]
   13d36:	2b00      	cmp	r3, #0
   13d38:	d01f      	beq.n	13d7a <f_open+0x12e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
   13d3a:	4b70      	ldr	r3, [pc, #448]	; (13efc <f_open+0x2b0>)
   13d3c:	18fb      	adds	r3, r7, r3
   13d3e:	781b      	ldrb	r3, [r3, #0]
   13d40:	2b04      	cmp	r3, #4
   13d42:	d109      	bne.n	13d58 <f_open+0x10c>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
   13d44:	4b6d      	ldr	r3, [pc, #436]	; (13efc <f_open+0x2b0>)
   13d46:	18fc      	adds	r4, r7, r3
   13d48:	2385      	movs	r3, #133	; 0x85
   13d4a:	009b      	lsls	r3, r3, #2
   13d4c:	18fb      	adds	r3, r7, r3
   13d4e:	0018      	movs	r0, r3
   13d50:	4b6d      	ldr	r3, [pc, #436]	; (13f08 <f_open+0x2bc>)
   13d52:	4798      	blx	r3
   13d54:	0003      	movs	r3, r0
   13d56:	7023      	strb	r3, [r4, #0]
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
   13d58:	4b67      	ldr	r3, [pc, #412]	; (13ef8 <f_open+0x2ac>)
   13d5a:	2298      	movs	r2, #152	; 0x98
   13d5c:	0092      	lsls	r2, r2, #2
   13d5e:	4694      	mov	ip, r2
   13d60:	44bc      	add	ip, r7
   13d62:	4463      	add	r3, ip
   13d64:	4a64      	ldr	r2, [pc, #400]	; (13ef8 <f_open+0x2ac>)
   13d66:	2198      	movs	r1, #152	; 0x98
   13d68:	0089      	lsls	r1, r1, #2
   13d6a:	468c      	mov	ip, r1
   13d6c:	44bc      	add	ip, r7
   13d6e:	4462      	add	r2, ip
   13d70:	7812      	ldrb	r2, [r2, #0]
   13d72:	2108      	movs	r1, #8
   13d74:	430a      	orrs	r2, r1
   13d76:	701a      	strb	r2, [r3, #0]
   13d78:	e01a      	b.n	13db0 <f_open+0x164>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   13d7a:	2385      	movs	r3, #133	; 0x85
   13d7c:	009b      	lsls	r3, r3, #2
   13d7e:	18fb      	adds	r3, r7, r3
   13d80:	799b      	ldrb	r3, [r3, #6]
   13d82:	001a      	movs	r2, r3
   13d84:	2311      	movs	r3, #17
   13d86:	4013      	ands	r3, r2
   13d88:	d004      	beq.n	13d94 <f_open+0x148>
					res = FR_DENIED;
   13d8a:	4b5c      	ldr	r3, [pc, #368]	; (13efc <f_open+0x2b0>)
   13d8c:	18fb      	adds	r3, r7, r3
   13d8e:	2207      	movs	r2, #7
   13d90:	701a      	strb	r2, [r3, #0]
   13d92:	e00d      	b.n	13db0 <f_open+0x164>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   13d94:	4b58      	ldr	r3, [pc, #352]	; (13ef8 <f_open+0x2ac>)
   13d96:	2298      	movs	r2, #152	; 0x98
   13d98:	0092      	lsls	r2, r2, #2
   13d9a:	4694      	mov	ip, r2
   13d9c:	44bc      	add	ip, r7
   13d9e:	4463      	add	r3, ip
   13da0:	781b      	ldrb	r3, [r3, #0]
   13da2:	2204      	movs	r2, #4
   13da4:	4013      	ands	r3, r2
   13da6:	d003      	beq.n	13db0 <f_open+0x164>
   13da8:	4b54      	ldr	r3, [pc, #336]	; (13efc <f_open+0x2b0>)
   13daa:	18fb      	adds	r3, r7, r3
   13dac:	2208      	movs	r2, #8
   13dae:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   13db0:	4b52      	ldr	r3, [pc, #328]	; (13efc <f_open+0x2b0>)
   13db2:	18fb      	adds	r3, r7, r3
   13db4:	781b      	ldrb	r3, [r3, #0]
   13db6:	2b00      	cmp	r3, #0
   13db8:	d000      	beq.n	13dbc <f_open+0x170>
   13dba:	e0c9      	b.n	13f50 <f_open+0x304>
   13dbc:	4b4e      	ldr	r3, [pc, #312]	; (13ef8 <f_open+0x2ac>)
   13dbe:	2298      	movs	r2, #152	; 0x98
   13dc0:	0092      	lsls	r2, r2, #2
   13dc2:	4694      	mov	ip, r2
   13dc4:	44bc      	add	ip, r7
   13dc6:	4463      	add	r3, ip
   13dc8:	781b      	ldrb	r3, [r3, #0]
   13dca:	2208      	movs	r2, #8
   13dcc:	4013      	ands	r3, r2
   13dce:	d100      	bne.n	13dd2 <f_open+0x186>
   13dd0:	e0be      	b.n	13f50 <f_open+0x304>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   13dd2:	2384      	movs	r3, #132	; 0x84
   13dd4:	009b      	lsls	r3, r3, #2
   13dd6:	18fb      	adds	r3, r7, r3
   13dd8:	681a      	ldr	r2, [r3, #0]
   13dda:	2385      	movs	r3, #133	; 0x85
   13ddc:	009b      	lsls	r3, r3, #2
   13dde:	18fb      	adds	r3, r7, r3
   13de0:	69db      	ldr	r3, [r3, #28]
   13de2:	0019      	movs	r1, r3
   13de4:	0010      	movs	r0, r2
   13de6:	4b49      	ldr	r3, [pc, #292]	; (13f0c <f_open+0x2c0>)
   13de8:	4798      	blx	r3
   13dea:	0003      	movs	r3, r0
   13dec:	2294      	movs	r2, #148	; 0x94
   13dee:	0092      	lsls	r2, r2, #2
   13df0:	18ba      	adds	r2, r7, r2
   13df2:	6013      	str	r3, [r2, #0]
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
   13df4:	2385      	movs	r3, #133	; 0x85
   13df6:	009b      	lsls	r3, r3, #2
   13df8:	18fb      	adds	r3, r7, r3
   13dfa:	69db      	ldr	r3, [r3, #28]
   13dfc:	330e      	adds	r3, #14
   13dfe:	001c      	movs	r4, r3
   13e00:	4b43      	ldr	r3, [pc, #268]	; (13f10 <f_open+0x2c4>)
   13e02:	4798      	blx	r3
   13e04:	0003      	movs	r3, r0
   13e06:	0019      	movs	r1, r3
   13e08:	0020      	movs	r0, r4
   13e0a:	4b42      	ldr	r3, [pc, #264]	; (13f14 <f_open+0x2c8>)
   13e0c:	4798      	blx	r3
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   13e0e:	2385      	movs	r3, #133	; 0x85
   13e10:	009b      	lsls	r3, r3, #2
   13e12:	18fb      	adds	r3, r7, r3
   13e14:	69db      	ldr	r3, [r3, #28]
   13e16:	330b      	adds	r3, #11
   13e18:	2220      	movs	r2, #32
   13e1a:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   13e1c:	2384      	movs	r3, #132	; 0x84
   13e1e:	009b      	lsls	r3, r3, #2
   13e20:	18fb      	adds	r3, r7, r3
   13e22:	6818      	ldr	r0, [r3, #0]
   13e24:	2385      	movs	r3, #133	; 0x85
   13e26:	009b      	lsls	r3, r3, #2
   13e28:	18fb      	adds	r3, r7, r3
   13e2a:	69db      	ldr	r3, [r3, #28]
   13e2c:	2200      	movs	r2, #0
   13e2e:	0019      	movs	r1, r3
   13e30:	4b39      	ldr	r3, [pc, #228]	; (13f18 <f_open+0x2cc>)
   13e32:	4798      	blx	r3
					st_dword(dj.dir + DIR_FileSize, 0);
   13e34:	2385      	movs	r3, #133	; 0x85
   13e36:	009b      	lsls	r3, r3, #2
   13e38:	18fb      	adds	r3, r7, r3
   13e3a:	69db      	ldr	r3, [r3, #28]
   13e3c:	331c      	adds	r3, #28
   13e3e:	2100      	movs	r1, #0
   13e40:	0018      	movs	r0, r3
   13e42:	4b34      	ldr	r3, [pc, #208]	; (13f14 <f_open+0x2c8>)
   13e44:	4798      	blx	r3
					fs->wflag = 1;
   13e46:	2384      	movs	r3, #132	; 0x84
   13e48:	009b      	lsls	r3, r3, #2
   13e4a:	18fb      	adds	r3, r7, r3
   13e4c:	681b      	ldr	r3, [r3, #0]
   13e4e:	2201      	movs	r2, #1
   13e50:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
   13e52:	2394      	movs	r3, #148	; 0x94
   13e54:	009b      	lsls	r3, r3, #2
   13e56:	18fb      	adds	r3, r7, r3
   13e58:	681b      	ldr	r3, [r3, #0]
   13e5a:	2b00      	cmp	r3, #0
   13e5c:	d100      	bne.n	13e60 <f_open+0x214>
   13e5e:	e077      	b.n	13f50 <f_open+0x304>
						dw = fs->winsect;
   13e60:	2384      	movs	r3, #132	; 0x84
   13e62:	009b      	lsls	r3, r3, #2
   13e64:	18fb      	adds	r3, r7, r3
   13e66:	681b      	ldr	r3, [r3, #0]
   13e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13e6a:	2293      	movs	r2, #147	; 0x93
   13e6c:	0092      	lsls	r2, r2, #2
   13e6e:	18ba      	adds	r2, r7, r2
   13e70:	6013      	str	r3, [r2, #0]
						res = remove_chain(&dj.obj, cl, 0);
   13e72:	4b22      	ldr	r3, [pc, #136]	; (13efc <f_open+0x2b0>)
   13e74:	18fc      	adds	r4, r7, r3
   13e76:	2394      	movs	r3, #148	; 0x94
   13e78:	009b      	lsls	r3, r3, #2
   13e7a:	18fb      	adds	r3, r7, r3
   13e7c:	6819      	ldr	r1, [r3, #0]
   13e7e:	2385      	movs	r3, #133	; 0x85
   13e80:	009b      	lsls	r3, r3, #2
   13e82:	18fb      	adds	r3, r7, r3
   13e84:	2200      	movs	r2, #0
   13e86:	0018      	movs	r0, r3
   13e88:	4b24      	ldr	r3, [pc, #144]	; (13f1c <f_open+0x2d0>)
   13e8a:	4798      	blx	r3
   13e8c:	0003      	movs	r3, r0
   13e8e:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
   13e90:	4b1a      	ldr	r3, [pc, #104]	; (13efc <f_open+0x2b0>)
   13e92:	18fb      	adds	r3, r7, r3
   13e94:	781b      	ldrb	r3, [r3, #0]
   13e96:	2b00      	cmp	r3, #0
   13e98:	d15a      	bne.n	13f50 <f_open+0x304>
							res = move_window(fs, dw);
   13e9a:	2384      	movs	r3, #132	; 0x84
   13e9c:	009b      	lsls	r3, r3, #2
   13e9e:	18fb      	adds	r3, r7, r3
   13ea0:	681b      	ldr	r3, [r3, #0]
   13ea2:	4a16      	ldr	r2, [pc, #88]	; (13efc <f_open+0x2b0>)
   13ea4:	18bc      	adds	r4, r7, r2
   13ea6:	2293      	movs	r2, #147	; 0x93
   13ea8:	0092      	lsls	r2, r2, #2
   13eaa:	18ba      	adds	r2, r7, r2
   13eac:	6812      	ldr	r2, [r2, #0]
   13eae:	0011      	movs	r1, r2
   13eb0:	0018      	movs	r0, r3
   13eb2:	4b1b      	ldr	r3, [pc, #108]	; (13f20 <f_open+0x2d4>)
   13eb4:	4798      	blx	r3
   13eb6:	0003      	movs	r3, r0
   13eb8:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   13eba:	2384      	movs	r3, #132	; 0x84
   13ebc:	009b      	lsls	r3, r3, #2
   13ebe:	18fb      	adds	r3, r7, r3
   13ec0:	681b      	ldr	r3, [r3, #0]
   13ec2:	2294      	movs	r2, #148	; 0x94
   13ec4:	0092      	lsls	r2, r2, #2
   13ec6:	18ba      	adds	r2, r7, r2
   13ec8:	6812      	ldr	r2, [r2, #0]
   13eca:	3a01      	subs	r2, #1
   13ecc:	611a      	str	r2, [r3, #16]
   13ece:	e03f      	b.n	13f50 <f_open+0x304>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
   13ed0:	4b0a      	ldr	r3, [pc, #40]	; (13efc <f_open+0x2b0>)
   13ed2:	18fb      	adds	r3, r7, r3
   13ed4:	781b      	ldrb	r3, [r3, #0]
   13ed6:	2b00      	cmp	r3, #0
   13ed8:	d13a      	bne.n	13f50 <f_open+0x304>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
   13eda:	2385      	movs	r3, #133	; 0x85
   13edc:	009b      	lsls	r3, r3, #2
   13ede:	18fb      	adds	r3, r7, r3
   13ee0:	799b      	ldrb	r3, [r3, #6]
   13ee2:	001a      	movs	r2, r3
   13ee4:	2310      	movs	r3, #16
   13ee6:	4013      	ands	r3, r2
   13ee8:	d01c      	beq.n	13f24 <f_open+0x2d8>
					res = FR_NO_FILE;
   13eea:	4b04      	ldr	r3, [pc, #16]	; (13efc <f_open+0x2b0>)
   13eec:	18fb      	adds	r3, r7, r3
   13eee:	2204      	movs	r2, #4
   13ef0:	701a      	strb	r2, [r3, #0]
   13ef2:	e02d      	b.n	13f50 <f_open+0x304>
   13ef4:	fffffd9c 	.word	0xfffffd9c
   13ef8:	fffffda7 	.word	0xfffffda7
   13efc:	0000025f 	.word	0x0000025f
   13f00:	00013609 	.word	0x00013609
   13f04:	00013395 	.word	0x00013395
   13f08:	00012ca9 	.word	0x00012ca9
   13f0c:	00012651 	.word	0x00012651
   13f10:	0001168d 	.word	0x0001168d
   13f14:	000117c3 	.word	0x000117c3
   13f18:	00012695 	.word	0x00012695
   13f1c:	00011fd1 	.word	0x00011fd1
   13f20:	00011a95 	.word	0x00011a95
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
   13f24:	4ba8      	ldr	r3, [pc, #672]	; (141c8 <f_open+0x57c>)
   13f26:	2298      	movs	r2, #152	; 0x98
   13f28:	0092      	lsls	r2, r2, #2
   13f2a:	4694      	mov	ip, r2
   13f2c:	44bc      	add	ip, r7
   13f2e:	4463      	add	r3, ip
   13f30:	781b      	ldrb	r3, [r3, #0]
   13f32:	2202      	movs	r2, #2
   13f34:	4013      	ands	r3, r2
   13f36:	d00b      	beq.n	13f50 <f_open+0x304>
   13f38:	2385      	movs	r3, #133	; 0x85
   13f3a:	009b      	lsls	r3, r3, #2
   13f3c:	18fb      	adds	r3, r7, r3
   13f3e:	799b      	ldrb	r3, [r3, #6]
   13f40:	001a      	movs	r2, r3
   13f42:	2301      	movs	r3, #1
   13f44:	4013      	ands	r3, r2
   13f46:	d003      	beq.n	13f50 <f_open+0x304>
						res = FR_DENIED;
   13f48:	4ba0      	ldr	r3, [pc, #640]	; (141cc <f_open+0x580>)
   13f4a:	18fb      	adds	r3, r7, r3
   13f4c:	2207      	movs	r2, #7
   13f4e:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
   13f50:	4b9e      	ldr	r3, [pc, #632]	; (141cc <f_open+0x580>)
   13f52:	18fb      	adds	r3, r7, r3
   13f54:	781b      	ldrb	r3, [r3, #0]
   13f56:	2b00      	cmp	r3, #0
   13f58:	d126      	bne.n	13fa8 <f_open+0x35c>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
   13f5a:	4b9b      	ldr	r3, [pc, #620]	; (141c8 <f_open+0x57c>)
   13f5c:	2298      	movs	r2, #152	; 0x98
   13f5e:	0092      	lsls	r2, r2, #2
   13f60:	4694      	mov	ip, r2
   13f62:	44bc      	add	ip, r7
   13f64:	4463      	add	r3, ip
   13f66:	781b      	ldrb	r3, [r3, #0]
   13f68:	2208      	movs	r2, #8
   13f6a:	4013      	ands	r3, r2
   13f6c:	d00f      	beq.n	13f8e <f_open+0x342>
   13f6e:	4b96      	ldr	r3, [pc, #600]	; (141c8 <f_open+0x57c>)
   13f70:	2298      	movs	r2, #152	; 0x98
   13f72:	0092      	lsls	r2, r2, #2
   13f74:	4694      	mov	ip, r2
   13f76:	44bc      	add	ip, r7
   13f78:	4463      	add	r3, ip
   13f7a:	4a93      	ldr	r2, [pc, #588]	; (141c8 <f_open+0x57c>)
   13f7c:	2198      	movs	r1, #152	; 0x98
   13f7e:	0089      	lsls	r1, r1, #2
   13f80:	468c      	mov	ip, r1
   13f82:	44bc      	add	ip, r7
   13f84:	4462      	add	r2, ip
   13f86:	7812      	ldrb	r2, [r2, #0]
   13f88:	2140      	movs	r1, #64	; 0x40
   13f8a:	430a      	orrs	r2, r1
   13f8c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   13f8e:	2384      	movs	r3, #132	; 0x84
   13f90:	009b      	lsls	r3, r3, #2
   13f92:	18fb      	adds	r3, r7, r3
   13f94:	681b      	ldr	r3, [r3, #0]
   13f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13f98:	68fb      	ldr	r3, [r7, #12]
   13f9a:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
   13f9c:	2385      	movs	r3, #133	; 0x85
   13f9e:	009b      	lsls	r3, r3, #2
   13fa0:	18fb      	adds	r3, r7, r3
   13fa2:	69da      	ldr	r2, [r3, #28]
   13fa4:	68fb      	ldr	r3, [r7, #12]
   13fa6:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
   13fa8:	4b88      	ldr	r3, [pc, #544]	; (141cc <f_open+0x580>)
   13faa:	18fb      	adds	r3, r7, r3
   13fac:	781b      	ldrb	r3, [r3, #0]
   13fae:	2b00      	cmp	r3, #0
   13fb0:	d000      	beq.n	13fb4 <f_open+0x368>
   13fb2:	e0f7      	b.n	141a4 <f_open+0x558>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
   13fb4:	2384      	movs	r3, #132	; 0x84
   13fb6:	009b      	lsls	r3, r3, #2
   13fb8:	18fb      	adds	r3, r7, r3
   13fba:	681a      	ldr	r2, [r3, #0]
   13fbc:	2385      	movs	r3, #133	; 0x85
   13fbe:	009b      	lsls	r3, r3, #2
   13fc0:	18fb      	adds	r3, r7, r3
   13fc2:	69db      	ldr	r3, [r3, #28]
   13fc4:	0019      	movs	r1, r3
   13fc6:	0010      	movs	r0, r2
   13fc8:	4b81      	ldr	r3, [pc, #516]	; (141d0 <f_open+0x584>)
   13fca:	4798      	blx	r3
   13fcc:	0002      	movs	r2, r0
   13fce:	68fb      	ldr	r3, [r7, #12]
   13fd0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   13fd2:	2385      	movs	r3, #133	; 0x85
   13fd4:	009b      	lsls	r3, r3, #2
   13fd6:	18fb      	adds	r3, r7, r3
   13fd8:	69db      	ldr	r3, [r3, #28]
   13fda:	331c      	adds	r3, #28
   13fdc:	0018      	movs	r0, r3
   13fde:	4b7d      	ldr	r3, [pc, #500]	; (141d4 <f_open+0x588>)
   13fe0:	4798      	blx	r3
   13fe2:	0002      	movs	r2, r0
   13fe4:	68fb      	ldr	r3, [r7, #12]
   13fe6:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
   13fe8:	2384      	movs	r3, #132	; 0x84
   13fea:	009b      	lsls	r3, r3, #2
   13fec:	18fb      	adds	r3, r7, r3
   13fee:	681a      	ldr	r2, [r3, #0]
   13ff0:	68fb      	ldr	r3, [r7, #12]
   13ff2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
   13ff4:	2384      	movs	r3, #132	; 0x84
   13ff6:	009b      	lsls	r3, r3, #2
   13ff8:	18fb      	adds	r3, r7, r3
   13ffa:	681b      	ldr	r3, [r3, #0]
   13ffc:	88da      	ldrh	r2, [r3, #6]
   13ffe:	68fb      	ldr	r3, [r7, #12]
   14000:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
   14002:	68fb      	ldr	r3, [r7, #12]
   14004:	4a70      	ldr	r2, [pc, #448]	; (141c8 <f_open+0x57c>)
   14006:	2198      	movs	r1, #152	; 0x98
   14008:	0089      	lsls	r1, r1, #2
   1400a:	468c      	mov	ip, r1
   1400c:	44bc      	add	ip, r7
   1400e:	4462      	add	r2, ip
   14010:	7812      	ldrb	r2, [r2, #0]
   14012:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
   14014:	68fb      	ldr	r3, [r7, #12]
   14016:	2200      	movs	r2, #0
   14018:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
   1401a:	68fb      	ldr	r3, [r7, #12]
   1401c:	2200      	movs	r2, #0
   1401e:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
   14020:	68fb      	ldr	r3, [r7, #12]
   14022:	2200      	movs	r2, #0
   14024:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
   14026:	68fb      	ldr	r3, [r7, #12]
   14028:	3328      	adds	r3, #40	; 0x28
   1402a:	0018      	movs	r0, r3
   1402c:	2380      	movs	r3, #128	; 0x80
   1402e:	009b      	lsls	r3, r3, #2
   14030:	001a      	movs	r2, r3
   14032:	2100      	movs	r1, #0
   14034:	4b68      	ldr	r3, [pc, #416]	; (141d8 <f_open+0x58c>)
   14036:	4798      	blx	r3
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   14038:	4b63      	ldr	r3, [pc, #396]	; (141c8 <f_open+0x57c>)
   1403a:	2298      	movs	r2, #152	; 0x98
   1403c:	0092      	lsls	r2, r2, #2
   1403e:	4694      	mov	ip, r2
   14040:	44bc      	add	ip, r7
   14042:	4463      	add	r3, ip
   14044:	781b      	ldrb	r3, [r3, #0]
   14046:	2220      	movs	r2, #32
   14048:	4013      	ands	r3, r2
   1404a:	d100      	bne.n	1404e <f_open+0x402>
   1404c:	e0aa      	b.n	141a4 <f_open+0x558>
   1404e:	68fb      	ldr	r3, [r7, #12]
   14050:	68db      	ldr	r3, [r3, #12]
   14052:	2b00      	cmp	r3, #0
   14054:	d100      	bne.n	14058 <f_open+0x40c>
   14056:	e0a5      	b.n	141a4 <f_open+0x558>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
   14058:	68fb      	ldr	r3, [r7, #12]
   1405a:	68da      	ldr	r2, [r3, #12]
   1405c:	68fb      	ldr	r3, [r7, #12]
   1405e:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   14060:	2384      	movs	r3, #132	; 0x84
   14062:	009b      	lsls	r3, r3, #2
   14064:	18fb      	adds	r3, r7, r3
   14066:	681b      	ldr	r3, [r3, #0]
   14068:	895b      	ldrh	r3, [r3, #10]
   1406a:	025b      	lsls	r3, r3, #9
   1406c:	2292      	movs	r2, #146	; 0x92
   1406e:	0092      	lsls	r2, r2, #2
   14070:	18ba      	adds	r2, r7, r2
   14072:	6013      	str	r3, [r2, #0]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
   14074:	68fb      	ldr	r3, [r7, #12]
   14076:	689b      	ldr	r3, [r3, #8]
   14078:	2296      	movs	r2, #150	; 0x96
   1407a:	0092      	lsls	r2, r2, #2
   1407c:	18ba      	adds	r2, r7, r2
   1407e:	6013      	str	r3, [r2, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   14080:	68fb      	ldr	r3, [r7, #12]
   14082:	68db      	ldr	r3, [r3, #12]
   14084:	2295      	movs	r2, #149	; 0x95
   14086:	0092      	lsls	r2, r2, #2
   14088:	18ba      	adds	r2, r7, r2
   1408a:	6013      	str	r3, [r2, #0]
   1408c:	e02e      	b.n	140ec <f_open+0x4a0>
					clst = get_fat(&fp->obj, clst);
   1408e:	68fb      	ldr	r3, [r7, #12]
   14090:	2296      	movs	r2, #150	; 0x96
   14092:	0092      	lsls	r2, r2, #2
   14094:	18ba      	adds	r2, r7, r2
   14096:	6812      	ldr	r2, [r2, #0]
   14098:	0011      	movs	r1, r2
   1409a:	0018      	movs	r0, r3
   1409c:	4b4f      	ldr	r3, [pc, #316]	; (141dc <f_open+0x590>)
   1409e:	4798      	blx	r3
   140a0:	0003      	movs	r3, r0
   140a2:	2296      	movs	r2, #150	; 0x96
   140a4:	0092      	lsls	r2, r2, #2
   140a6:	18ba      	adds	r2, r7, r2
   140a8:	6013      	str	r3, [r2, #0]
					if (clst <= 1) res = FR_INT_ERR;
   140aa:	2396      	movs	r3, #150	; 0x96
   140ac:	009b      	lsls	r3, r3, #2
   140ae:	18fb      	adds	r3, r7, r3
   140b0:	681b      	ldr	r3, [r3, #0]
   140b2:	2b01      	cmp	r3, #1
   140b4:	d803      	bhi.n	140be <f_open+0x472>
   140b6:	4b45      	ldr	r3, [pc, #276]	; (141cc <f_open+0x580>)
   140b8:	18fb      	adds	r3, r7, r3
   140ba:	2202      	movs	r2, #2
   140bc:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   140be:	2396      	movs	r3, #150	; 0x96
   140c0:	009b      	lsls	r3, r3, #2
   140c2:	18fb      	adds	r3, r7, r3
   140c4:	681b      	ldr	r3, [r3, #0]
   140c6:	3301      	adds	r3, #1
   140c8:	d103      	bne.n	140d2 <f_open+0x486>
   140ca:	4b40      	ldr	r3, [pc, #256]	; (141cc <f_open+0x580>)
   140cc:	18fb      	adds	r3, r7, r3
   140ce:	2201      	movs	r2, #1
   140d0:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   140d2:	2395      	movs	r3, #149	; 0x95
   140d4:	009b      	lsls	r3, r3, #2
   140d6:	18fb      	adds	r3, r7, r3
   140d8:	681a      	ldr	r2, [r3, #0]
   140da:	2392      	movs	r3, #146	; 0x92
   140dc:	009b      	lsls	r3, r3, #2
   140de:	18fb      	adds	r3, r7, r3
   140e0:	681b      	ldr	r3, [r3, #0]
   140e2:	1ad3      	subs	r3, r2, r3
   140e4:	2295      	movs	r2, #149	; 0x95
   140e6:	0092      	lsls	r2, r2, #2
   140e8:	18ba      	adds	r2, r7, r2
   140ea:	6013      	str	r3, [r2, #0]
   140ec:	4b37      	ldr	r3, [pc, #220]	; (141cc <f_open+0x580>)
   140ee:	18fb      	adds	r3, r7, r3
   140f0:	781b      	ldrb	r3, [r3, #0]
   140f2:	2b00      	cmp	r3, #0
   140f4:	d109      	bne.n	1410a <f_open+0x4be>
   140f6:	2395      	movs	r3, #149	; 0x95
   140f8:	009b      	lsls	r3, r3, #2
   140fa:	18fb      	adds	r3, r7, r3
   140fc:	681a      	ldr	r2, [r3, #0]
   140fe:	2392      	movs	r3, #146	; 0x92
   14100:	009b      	lsls	r3, r3, #2
   14102:	18fb      	adds	r3, r7, r3
   14104:	681b      	ldr	r3, [r3, #0]
   14106:	429a      	cmp	r2, r3
   14108:	d8c1      	bhi.n	1408e <f_open+0x442>
				}
				fp->clust = clst;
   1410a:	68fb      	ldr	r3, [r7, #12]
   1410c:	2296      	movs	r2, #150	; 0x96
   1410e:	0092      	lsls	r2, r2, #2
   14110:	18ba      	adds	r2, r7, r2
   14112:	6812      	ldr	r2, [r2, #0]
   14114:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   14116:	4b2d      	ldr	r3, [pc, #180]	; (141cc <f_open+0x580>)
   14118:	18fb      	adds	r3, r7, r3
   1411a:	781b      	ldrb	r3, [r3, #0]
   1411c:	2b00      	cmp	r3, #0
   1411e:	d141      	bne.n	141a4 <f_open+0x558>
   14120:	2395      	movs	r3, #149	; 0x95
   14122:	009b      	lsls	r3, r3, #2
   14124:	18fb      	adds	r3, r7, r3
   14126:	681b      	ldr	r3, [r3, #0]
   14128:	05db      	lsls	r3, r3, #23
   1412a:	0ddb      	lsrs	r3, r3, #23
   1412c:	d03a      	beq.n	141a4 <f_open+0x558>
					if ((sc = clst2sect(fs, clst)) == 0) {
   1412e:	2384      	movs	r3, #132	; 0x84
   14130:	009b      	lsls	r3, r3, #2
   14132:	18fb      	adds	r3, r7, r3
   14134:	681b      	ldr	r3, [r3, #0]
   14136:	2296      	movs	r2, #150	; 0x96
   14138:	0092      	lsls	r2, r2, #2
   1413a:	18ba      	adds	r2, r7, r2
   1413c:	6812      	ldr	r2, [r2, #0]
   1413e:	0011      	movs	r1, r2
   14140:	0018      	movs	r0, r3
   14142:	4b27      	ldr	r3, [pc, #156]	; (141e0 <f_open+0x594>)
   14144:	4798      	blx	r3
   14146:	0003      	movs	r3, r0
   14148:	2291      	movs	r2, #145	; 0x91
   1414a:	0092      	lsls	r2, r2, #2
   1414c:	18ba      	adds	r2, r7, r2
   1414e:	6013      	str	r3, [r2, #0]
   14150:	2391      	movs	r3, #145	; 0x91
   14152:	009b      	lsls	r3, r3, #2
   14154:	18fb      	adds	r3, r7, r3
   14156:	681b      	ldr	r3, [r3, #0]
   14158:	2b00      	cmp	r3, #0
   1415a:	d104      	bne.n	14166 <f_open+0x51a>
						res = FR_INT_ERR;
   1415c:	4b1b      	ldr	r3, [pc, #108]	; (141cc <f_open+0x580>)
   1415e:	18fb      	adds	r3, r7, r3
   14160:	2202      	movs	r2, #2
   14162:	701a      	strb	r2, [r3, #0]
   14164:	e01e      	b.n	141a4 <f_open+0x558>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
   14166:	2395      	movs	r3, #149	; 0x95
   14168:	009b      	lsls	r3, r3, #2
   1416a:	18fb      	adds	r3, r7, r3
   1416c:	681b      	ldr	r3, [r3, #0]
   1416e:	0a5a      	lsrs	r2, r3, #9
   14170:	2391      	movs	r3, #145	; 0x91
   14172:	009b      	lsls	r3, r3, #2
   14174:	18fb      	adds	r3, r7, r3
   14176:	681b      	ldr	r3, [r3, #0]
   14178:	18d2      	adds	r2, r2, r3
   1417a:	68fb      	ldr	r3, [r7, #12]
   1417c:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_readp(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;//Added "p" Kfausnight 11/24/2018
   1417e:	2384      	movs	r3, #132	; 0x84
   14180:	009b      	lsls	r3, r3, #2
   14182:	18fb      	adds	r3, r7, r3
   14184:	681b      	ldr	r3, [r3, #0]
   14186:	7858      	ldrb	r0, [r3, #1]
   14188:	68fb      	ldr	r3, [r7, #12]
   1418a:	3328      	adds	r3, #40	; 0x28
   1418c:	0019      	movs	r1, r3
   1418e:	68fb      	ldr	r3, [r7, #12]
   14190:	69da      	ldr	r2, [r3, #28]
   14192:	2301      	movs	r3, #1
   14194:	4c13      	ldr	r4, [pc, #76]	; (141e4 <f_open+0x598>)
   14196:	47a0      	blx	r4
   14198:	1e03      	subs	r3, r0, #0
   1419a:	d003      	beq.n	141a4 <f_open+0x558>
   1419c:	4b0b      	ldr	r3, [pc, #44]	; (141cc <f_open+0x580>)
   1419e:	18fb      	adds	r3, r7, r3
   141a0:	2201      	movs	r2, #1
   141a2:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   141a4:	4b09      	ldr	r3, [pc, #36]	; (141cc <f_open+0x580>)
   141a6:	18fb      	adds	r3, r7, r3
   141a8:	781b      	ldrb	r3, [r3, #0]
   141aa:	2b00      	cmp	r3, #0
   141ac:	d002      	beq.n	141b4 <f_open+0x568>
   141ae:	68fb      	ldr	r3, [r7, #12]
   141b0:	2200      	movs	r2, #0
   141b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
   141b4:	4b05      	ldr	r3, [pc, #20]	; (141cc <f_open+0x580>)
   141b6:	18fb      	adds	r3, r7, r3
   141b8:	781b      	ldrb	r3, [r3, #0]
}
   141ba:	0018      	movs	r0, r3
   141bc:	46bd      	mov	sp, r7
   141be:	2399      	movs	r3, #153	; 0x99
   141c0:	009b      	lsls	r3, r3, #2
   141c2:	449d      	add	sp, r3
   141c4:	bd90      	pop	{r4, r7, pc}
   141c6:	46c0      	nop			; (mov r8, r8)
   141c8:	fffffda7 	.word	0xfffffda7
   141cc:	0000025f 	.word	0x0000025f
   141d0:	00012651 	.word	0x00012651
   141d4:	00011745 	.word	0x00011745
   141d8:	00011855 	.word	0x00011855
   141dc:	00011c59 	.word	0x00011c59
   141e0:	00011c21 	.word	0x00011c21
   141e4:	000113e5 	.word	0x000113e5

000141e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
   141e8:	b590      	push	{r4, r7, lr}
   141ea:	b08d      	sub	sp, #52	; 0x34
   141ec:	af00      	add	r7, sp, #0
   141ee:	60f8      	str	r0, [r7, #12]
   141f0:	60b9      	str	r1, [r7, #8]
   141f2:	607a      	str	r2, [r7, #4]
   141f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
   141f6:	68bb      	ldr	r3, [r7, #8]
   141f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
   141fa:	683b      	ldr	r3, [r7, #0]
   141fc:	2200      	movs	r2, #0
   141fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   14200:	68fb      	ldr	r3, [r7, #12]
   14202:	222f      	movs	r2, #47	; 0x2f
   14204:	18bc      	adds	r4, r7, r2
   14206:	2210      	movs	r2, #16
   14208:	18ba      	adds	r2, r7, r2
   1420a:	0011      	movs	r1, r2
   1420c:	0018      	movs	r0, r3
   1420e:	4bae      	ldr	r3, [pc, #696]	; (144c8 <f_write+0x2e0>)
   14210:	4798      	blx	r3
   14212:	0003      	movs	r3, r0
   14214:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   14216:	232f      	movs	r3, #47	; 0x2f
   14218:	18fb      	adds	r3, r7, r3
   1421a:	781b      	ldrb	r3, [r3, #0]
   1421c:	2b00      	cmp	r3, #0
   1421e:	d109      	bne.n	14234 <f_write+0x4c>
   14220:	232f      	movs	r3, #47	; 0x2f
   14222:	18fb      	adds	r3, r7, r3
   14224:	68fa      	ldr	r2, [r7, #12]
   14226:	7c52      	ldrb	r2, [r2, #17]
   14228:	701a      	strb	r2, [r3, #0]
   1422a:	232f      	movs	r3, #47	; 0x2f
   1422c:	18fb      	adds	r3, r7, r3
   1422e:	781b      	ldrb	r3, [r3, #0]
   14230:	2b00      	cmp	r3, #0
   14232:	d003      	beq.n	1423c <f_write+0x54>
   14234:	232f      	movs	r3, #47	; 0x2f
   14236:	18fb      	adds	r3, r7, r3
   14238:	781b      	ldrb	r3, [r3, #0]
   1423a:	e141      	b.n	144c0 <f_write+0x2d8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   1423c:	68fb      	ldr	r3, [r7, #12]
   1423e:	7c1b      	ldrb	r3, [r3, #16]
   14240:	001a      	movs	r2, r3
   14242:	2302      	movs	r3, #2
   14244:	4013      	ands	r3, r2
   14246:	d101      	bne.n	1424c <f_write+0x64>
   14248:	2307      	movs	r3, #7
   1424a:	e139      	b.n	144c0 <f_write+0x2d8>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   1424c:	68fb      	ldr	r3, [r7, #12]
   1424e:	695a      	ldr	r2, [r3, #20]
   14250:	687b      	ldr	r3, [r7, #4]
   14252:	18d2      	adds	r2, r2, r3
   14254:	68fb      	ldr	r3, [r7, #12]
   14256:	695b      	ldr	r3, [r3, #20]
   14258:	429a      	cmp	r2, r3
   1425a:	d300      	bcc.n	1425e <f_write+0x76>
   1425c:	e122      	b.n	144a4 <f_write+0x2bc>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   1425e:	68fb      	ldr	r3, [r7, #12]
   14260:	695b      	ldr	r3, [r3, #20]
   14262:	43db      	mvns	r3, r3
   14264:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
   14266:	e11d      	b.n	144a4 <f_write+0x2bc>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   14268:	68fb      	ldr	r3, [r7, #12]
   1426a:	695b      	ldr	r3, [r3, #20]
   1426c:	05db      	lsls	r3, r3, #23
   1426e:	0ddb      	lsrs	r3, r3, #23
   14270:	d000      	beq.n	14274 <f_write+0x8c>
   14272:	e0d6      	b.n	14422 <f_write+0x23a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   14274:	68fb      	ldr	r3, [r7, #12]
   14276:	695b      	ldr	r3, [r3, #20]
   14278:	0a5b      	lsrs	r3, r3, #9
   1427a:	693a      	ldr	r2, [r7, #16]
   1427c:	8952      	ldrh	r2, [r2, #10]
   1427e:	3a01      	subs	r2, #1
   14280:	4013      	ands	r3, r2
   14282:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
   14284:	69bb      	ldr	r3, [r7, #24]
   14286:	2b00      	cmp	r3, #0
   14288:	d138      	bne.n	142fc <f_write+0x114>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1428a:	68fb      	ldr	r3, [r7, #12]
   1428c:	695b      	ldr	r3, [r3, #20]
   1428e:	2b00      	cmp	r3, #0
   14290:	d10d      	bne.n	142ae <f_write+0xc6>
					clst = fp->obj.sclust;	/* Follow from the origin */
   14292:	68fb      	ldr	r3, [r7, #12]
   14294:	689b      	ldr	r3, [r3, #8]
   14296:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
   14298:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1429a:	2b00      	cmp	r3, #0
   1429c:	d110      	bne.n	142c0 <f_write+0xd8>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
   1429e:	68fb      	ldr	r3, [r7, #12]
   142a0:	2100      	movs	r1, #0
   142a2:	0018      	movs	r0, r3
   142a4:	4b89      	ldr	r3, [pc, #548]	; (144cc <f_write+0x2e4>)
   142a6:	4798      	blx	r3
   142a8:	0003      	movs	r3, r0
   142aa:	62bb      	str	r3, [r7, #40]	; 0x28
   142ac:	e008      	b.n	142c0 <f_write+0xd8>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   142ae:	68fa      	ldr	r2, [r7, #12]
   142b0:	68fb      	ldr	r3, [r7, #12]
   142b2:	699b      	ldr	r3, [r3, #24]
   142b4:	0019      	movs	r1, r3
   142b6:	0010      	movs	r0, r2
   142b8:	4b84      	ldr	r3, [pc, #528]	; (144cc <f_write+0x2e4>)
   142ba:	4798      	blx	r3
   142bc:	0003      	movs	r3, r0
   142be:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   142c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   142c2:	2b00      	cmp	r3, #0
   142c4:	d100      	bne.n	142c8 <f_write+0xe0>
   142c6:	e0f2      	b.n	144ae <f_write+0x2c6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   142c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   142ca:	2b01      	cmp	r3, #1
   142cc:	d104      	bne.n	142d8 <f_write+0xf0>
   142ce:	68fb      	ldr	r3, [r7, #12]
   142d0:	2202      	movs	r2, #2
   142d2:	745a      	strb	r2, [r3, #17]
   142d4:	2302      	movs	r3, #2
   142d6:	e0f3      	b.n	144c0 <f_write+0x2d8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   142d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   142da:	3301      	adds	r3, #1
   142dc:	d104      	bne.n	142e8 <f_write+0x100>
   142de:	68fb      	ldr	r3, [r7, #12]
   142e0:	2201      	movs	r2, #1
   142e2:	745a      	strb	r2, [r3, #17]
   142e4:	2301      	movs	r3, #1
   142e6:	e0eb      	b.n	144c0 <f_write+0x2d8>
				fp->clust = clst;			/* Update current cluster */
   142e8:	68fb      	ldr	r3, [r7, #12]
   142ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   142ec:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   142ee:	68fb      	ldr	r3, [r7, #12]
   142f0:	689b      	ldr	r3, [r3, #8]
   142f2:	2b00      	cmp	r3, #0
   142f4:	d102      	bne.n	142fc <f_write+0x114>
   142f6:	68fb      	ldr	r3, [r7, #12]
   142f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   142fa:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
   142fc:	68fb      	ldr	r3, [r7, #12]
   142fe:	7c1b      	ldrb	r3, [r3, #16]
   14300:	b25b      	sxtb	r3, r3
   14302:	2b00      	cmp	r3, #0
   14304:	da17      	bge.n	14336 <f_write+0x14e>
				if (disk_writep(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
   14306:	693b      	ldr	r3, [r7, #16]
   14308:	7858      	ldrb	r0, [r3, #1]
   1430a:	68fb      	ldr	r3, [r7, #12]
   1430c:	3328      	adds	r3, #40	; 0x28
   1430e:	0019      	movs	r1, r3
   14310:	68fb      	ldr	r3, [r7, #12]
   14312:	69da      	ldr	r2, [r3, #28]
   14314:	2301      	movs	r3, #1
   14316:	4c6e      	ldr	r4, [pc, #440]	; (144d0 <f_write+0x2e8>)
   14318:	47a0      	blx	r4
   1431a:	1e03      	subs	r3, r0, #0
   1431c:	d004      	beq.n	14328 <f_write+0x140>
   1431e:	68fb      	ldr	r3, [r7, #12]
   14320:	2201      	movs	r2, #1
   14322:	745a      	strb	r2, [r3, #17]
   14324:	2301      	movs	r3, #1
   14326:	e0cb      	b.n	144c0 <f_write+0x2d8>
				fp->flag &= (BYTE)~FA_DIRTY;
   14328:	68fb      	ldr	r3, [r7, #12]
   1432a:	7c1b      	ldrb	r3, [r3, #16]
   1432c:	227f      	movs	r2, #127	; 0x7f
   1432e:	4013      	ands	r3, r2
   14330:	b2da      	uxtb	r2, r3
   14332:	68fb      	ldr	r3, [r7, #12]
   14334:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   14336:	693a      	ldr	r2, [r7, #16]
   14338:	68fb      	ldr	r3, [r7, #12]
   1433a:	699b      	ldr	r3, [r3, #24]
   1433c:	0019      	movs	r1, r3
   1433e:	0010      	movs	r0, r2
   14340:	4b64      	ldr	r3, [pc, #400]	; (144d4 <f_write+0x2ec>)
   14342:	4798      	blx	r3
   14344:	0003      	movs	r3, r0
   14346:	617b      	str	r3, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   14348:	697b      	ldr	r3, [r7, #20]
   1434a:	2b00      	cmp	r3, #0
   1434c:	d104      	bne.n	14358 <f_write+0x170>
   1434e:	68fb      	ldr	r3, [r7, #12]
   14350:	2202      	movs	r2, #2
   14352:	745a      	strb	r2, [r3, #17]
   14354:	2302      	movs	r3, #2
   14356:	e0b3      	b.n	144c0 <f_write+0x2d8>
			sect += csect;
   14358:	697a      	ldr	r2, [r7, #20]
   1435a:	69bb      	ldr	r3, [r7, #24]
   1435c:	18d3      	adds	r3, r2, r3
   1435e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   14360:	687b      	ldr	r3, [r7, #4]
   14362:	0a5b      	lsrs	r3, r3, #9
   14364:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   14366:	6a3b      	ldr	r3, [r7, #32]
   14368:	2b00      	cmp	r3, #0
   1436a:	d03c      	beq.n	143e6 <f_write+0x1fe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   1436c:	69ba      	ldr	r2, [r7, #24]
   1436e:	6a3b      	ldr	r3, [r7, #32]
   14370:	18d3      	adds	r3, r2, r3
   14372:	693a      	ldr	r2, [r7, #16]
   14374:	8952      	ldrh	r2, [r2, #10]
   14376:	4293      	cmp	r3, r2
   14378:	d905      	bls.n	14386 <f_write+0x19e>
					cc = fs->csize - csect;
   1437a:	693b      	ldr	r3, [r7, #16]
   1437c:	895b      	ldrh	r3, [r3, #10]
   1437e:	001a      	movs	r2, r3
   14380:	69bb      	ldr	r3, [r7, #24]
   14382:	1ad3      	subs	r3, r2, r3
   14384:	623b      	str	r3, [r7, #32]
				}
				if (disk_writep(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   14386:	693b      	ldr	r3, [r7, #16]
   14388:	7858      	ldrb	r0, [r3, #1]
   1438a:	6a3b      	ldr	r3, [r7, #32]
   1438c:	b2db      	uxtb	r3, r3
   1438e:	697a      	ldr	r2, [r7, #20]
   14390:	69f9      	ldr	r1, [r7, #28]
   14392:	4c4f      	ldr	r4, [pc, #316]	; (144d0 <f_write+0x2e8>)
   14394:	47a0      	blx	r4
   14396:	1e03      	subs	r3, r0, #0
   14398:	d004      	beq.n	143a4 <f_write+0x1bc>
   1439a:	68fb      	ldr	r3, [r7, #12]
   1439c:	2201      	movs	r2, #1
   1439e:	745a      	strb	r2, [r3, #17]
   143a0:	2301      	movs	r3, #1
   143a2:	e08d      	b.n	144c0 <f_write+0x2d8>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   143a4:	68fb      	ldr	r3, [r7, #12]
   143a6:	69da      	ldr	r2, [r3, #28]
   143a8:	697b      	ldr	r3, [r7, #20]
   143aa:	1ad2      	subs	r2, r2, r3
   143ac:	6a3b      	ldr	r3, [r7, #32]
   143ae:	429a      	cmp	r2, r3
   143b0:	d215      	bcs.n	143de <f_write+0x1f6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
   143b2:	68fb      	ldr	r3, [r7, #12]
   143b4:	3328      	adds	r3, #40	; 0x28
   143b6:	0018      	movs	r0, r3
   143b8:	68fb      	ldr	r3, [r7, #12]
   143ba:	69da      	ldr	r2, [r3, #28]
   143bc:	697b      	ldr	r3, [r7, #20]
   143be:	1ad3      	subs	r3, r2, r3
   143c0:	025b      	lsls	r3, r3, #9
   143c2:	69fa      	ldr	r2, [r7, #28]
   143c4:	18d1      	adds	r1, r2, r3
   143c6:	2380      	movs	r3, #128	; 0x80
   143c8:	009b      	lsls	r3, r3, #2
   143ca:	001a      	movs	r2, r3
   143cc:	4b42      	ldr	r3, [pc, #264]	; (144d8 <f_write+0x2f0>)
   143ce:	4798      	blx	r3
					fp->flag &= (BYTE)~FA_DIRTY;
   143d0:	68fb      	ldr	r3, [r7, #12]
   143d2:	7c1b      	ldrb	r3, [r3, #16]
   143d4:	227f      	movs	r2, #127	; 0x7f
   143d6:	4013      	ands	r3, r2
   143d8:	b2da      	uxtb	r2, r3
   143da:	68fb      	ldr	r3, [r7, #12]
   143dc:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   143de:	6a3b      	ldr	r3, [r7, #32]
   143e0:	025b      	lsls	r3, r3, #9
   143e2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
   143e4:	e040      	b.n	14468 <f_write+0x280>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
   143e6:	68fb      	ldr	r3, [r7, #12]
   143e8:	69da      	ldr	r2, [r3, #28]
   143ea:	697b      	ldr	r3, [r7, #20]
   143ec:	429a      	cmp	r2, r3
   143ee:	d015      	beq.n	1441c <f_write+0x234>
				fp->fptr < fp->obj.objsize &&
   143f0:	68fb      	ldr	r3, [r7, #12]
   143f2:	695a      	ldr	r2, [r3, #20]
   143f4:	68fb      	ldr	r3, [r7, #12]
   143f6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
   143f8:	429a      	cmp	r2, r3
   143fa:	d20f      	bcs.n	1441c <f_write+0x234>
				disk_readp(fs->pdrv, fp->buf, sect, 1) != RES_OK) {//Added "p" Kfausnight 11/24/2018
   143fc:	693b      	ldr	r3, [r7, #16]
   143fe:	7858      	ldrb	r0, [r3, #1]
   14400:	68fb      	ldr	r3, [r7, #12]
   14402:	3328      	adds	r3, #40	; 0x28
   14404:	0019      	movs	r1, r3
   14406:	697a      	ldr	r2, [r7, #20]
   14408:	2301      	movs	r3, #1
   1440a:	4c34      	ldr	r4, [pc, #208]	; (144dc <f_write+0x2f4>)
   1440c:	47a0      	blx	r4
   1440e:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
   14410:	d004      	beq.n	1441c <f_write+0x234>
					ABORT(fs, FR_DISK_ERR);
   14412:	68fb      	ldr	r3, [r7, #12]
   14414:	2201      	movs	r2, #1
   14416:	745a      	strb	r2, [r3, #17]
   14418:	2301      	movs	r3, #1
   1441a:	e051      	b.n	144c0 <f_write+0x2d8>
			}
#endif
			fp->sect = sect;
   1441c:	68fb      	ldr	r3, [r7, #12]
   1441e:	697a      	ldr	r2, [r7, #20]
   14420:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
   14422:	68fb      	ldr	r3, [r7, #12]
   14424:	695b      	ldr	r3, [r3, #20]
   14426:	05db      	lsls	r3, r3, #23
   14428:	0ddb      	lsrs	r3, r3, #23
   1442a:	2280      	movs	r2, #128	; 0x80
   1442c:	0092      	lsls	r2, r2, #2
   1442e:	1ad3      	subs	r3, r2, r3
   14430:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
   14432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14434:	687b      	ldr	r3, [r7, #4]
   14436:	429a      	cmp	r2, r3
   14438:	d901      	bls.n	1443e <f_write+0x256>
   1443a:	687b      	ldr	r3, [r7, #4]
   1443c:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   1443e:	68fb      	ldr	r3, [r7, #12]
   14440:	3328      	adds	r3, #40	; 0x28
   14442:	001a      	movs	r2, r3
   14444:	68fb      	ldr	r3, [r7, #12]
   14446:	695b      	ldr	r3, [r3, #20]
   14448:	05db      	lsls	r3, r3, #23
   1444a:	0ddb      	lsrs	r3, r3, #23
   1444c:	18d3      	adds	r3, r2, r3
   1444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14450:	69f9      	ldr	r1, [r7, #28]
   14452:	0018      	movs	r0, r3
   14454:	4b20      	ldr	r3, [pc, #128]	; (144d8 <f_write+0x2f0>)
   14456:	4798      	blx	r3
		fp->flag |= FA_DIRTY;
   14458:	68fb      	ldr	r3, [r7, #12]
   1445a:	7c1b      	ldrb	r3, [r3, #16]
   1445c:	2280      	movs	r2, #128	; 0x80
   1445e:	4252      	negs	r2, r2
   14460:	4313      	orrs	r3, r2
   14462:	b2da      	uxtb	r2, r3
   14464:	68fb      	ldr	r3, [r7, #12]
   14466:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
   14468:	687a      	ldr	r2, [r7, #4]
   1446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1446c:	1ad3      	subs	r3, r2, r3
   1446e:	607b      	str	r3, [r7, #4]
   14470:	683b      	ldr	r3, [r7, #0]
   14472:	681a      	ldr	r2, [r3, #0]
   14474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14476:	18d2      	adds	r2, r2, r3
   14478:	683b      	ldr	r3, [r7, #0]
   1447a:	601a      	str	r2, [r3, #0]
   1447c:	69fa      	ldr	r2, [r7, #28]
   1447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14480:	18d3      	adds	r3, r2, r3
   14482:	61fb      	str	r3, [r7, #28]
   14484:	68fb      	ldr	r3, [r7, #12]
   14486:	695a      	ldr	r2, [r3, #20]
   14488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1448a:	18d2      	adds	r2, r2, r3
   1448c:	68fb      	ldr	r3, [r7, #12]
   1448e:	615a      	str	r2, [r3, #20]
   14490:	68fb      	ldr	r3, [r7, #12]
   14492:	68d9      	ldr	r1, [r3, #12]
   14494:	68fb      	ldr	r3, [r7, #12]
   14496:	695a      	ldr	r2, [r3, #20]
   14498:	000b      	movs	r3, r1
   1449a:	4293      	cmp	r3, r2
   1449c:	d200      	bcs.n	144a0 <f_write+0x2b8>
   1449e:	0013      	movs	r3, r2
   144a0:	68fa      	ldr	r2, [r7, #12]
   144a2:	60d3      	str	r3, [r2, #12]
	for ( ;  btw;							/* Repeat until all data written */
   144a4:	687b      	ldr	r3, [r7, #4]
   144a6:	2b00      	cmp	r3, #0
   144a8:	d000      	beq.n	144ac <f_write+0x2c4>
   144aa:	e6dd      	b.n	14268 <f_write+0x80>
   144ac:	e000      	b.n	144b0 <f_write+0x2c8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   144ae:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   144b0:	68fb      	ldr	r3, [r7, #12]
   144b2:	7c1b      	ldrb	r3, [r3, #16]
   144b4:	2240      	movs	r2, #64	; 0x40
   144b6:	4313      	orrs	r3, r2
   144b8:	b2da      	uxtb	r2, r3
   144ba:	68fb      	ldr	r3, [r7, #12]
   144bc:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
   144be:	2300      	movs	r3, #0
}
   144c0:	0018      	movs	r0, r3
   144c2:	46bd      	mov	sp, r7
   144c4:	b00d      	add	sp, #52	; 0x34
   144c6:	bd90      	pop	{r4, r7, pc}
   144c8:	00013b39 	.word	0x00013b39
   144cc:	000120c9 	.word	0x000120c9
   144d0:	000114bd 	.word	0x000114bd
   144d4:	00011c21 	.word	0x00011c21
   144d8:	00011817 	.word	0x00011817
   144dc:	000113e5 	.word	0x000113e5

000144e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
   144e0:	b590      	push	{r4, r7, lr}
   144e2:	b087      	sub	sp, #28
   144e4:	af00      	add	r7, sp, #0
   144e6:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   144e8:	687b      	ldr	r3, [r7, #4]
   144ea:	2217      	movs	r2, #23
   144ec:	18bc      	adds	r4, r7, r2
   144ee:	2208      	movs	r2, #8
   144f0:	18ba      	adds	r2, r7, r2
   144f2:	0011      	movs	r1, r2
   144f4:	0018      	movs	r0, r3
   144f6:	4b40      	ldr	r3, [pc, #256]	; (145f8 <f_sync+0x118>)
   144f8:	4798      	blx	r3
   144fa:	0003      	movs	r3, r0
   144fc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   144fe:	2317      	movs	r3, #23
   14500:	18fb      	adds	r3, r7, r3
   14502:	781b      	ldrb	r3, [r3, #0]
   14504:	2b00      	cmp	r3, #0
   14506:	d16f      	bne.n	145e8 <f_sync+0x108>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
   14508:	687b      	ldr	r3, [r7, #4]
   1450a:	7c1b      	ldrb	r3, [r3, #16]
   1450c:	001a      	movs	r2, r3
   1450e:	2340      	movs	r3, #64	; 0x40
   14510:	4013      	ands	r3, r2
   14512:	d069      	beq.n	145e8 <f_sync+0x108>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
   14514:	687b      	ldr	r3, [r7, #4]
   14516:	7c1b      	ldrb	r3, [r3, #16]
   14518:	b25b      	sxtb	r3, r3
   1451a:	2b00      	cmp	r3, #0
   1451c:	da14      	bge.n	14548 <f_sync+0x68>
				if (disk_writep(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
   1451e:	68bb      	ldr	r3, [r7, #8]
   14520:	7858      	ldrb	r0, [r3, #1]
   14522:	687b      	ldr	r3, [r7, #4]
   14524:	3328      	adds	r3, #40	; 0x28
   14526:	0019      	movs	r1, r3
   14528:	687b      	ldr	r3, [r7, #4]
   1452a:	69da      	ldr	r2, [r3, #28]
   1452c:	2301      	movs	r3, #1
   1452e:	4c33      	ldr	r4, [pc, #204]	; (145fc <f_sync+0x11c>)
   14530:	47a0      	blx	r4
   14532:	1e03      	subs	r3, r0, #0
   14534:	d001      	beq.n	1453a <f_sync+0x5a>
   14536:	2301      	movs	r3, #1
   14538:	e059      	b.n	145ee <f_sync+0x10e>
				fp->flag &= (BYTE)~FA_DIRTY;
   1453a:	687b      	ldr	r3, [r7, #4]
   1453c:	7c1b      	ldrb	r3, [r3, #16]
   1453e:	227f      	movs	r2, #127	; 0x7f
   14540:	4013      	ands	r3, r2
   14542:	b2da      	uxtb	r2, r3
   14544:	687b      	ldr	r3, [r7, #4]
   14546:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
   14548:	4b2d      	ldr	r3, [pc, #180]	; (14600 <f_sync+0x120>)
   1454a:	4798      	blx	r3
   1454c:	0003      	movs	r3, r0
   1454e:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
   14550:	68ba      	ldr	r2, [r7, #8]
   14552:	687b      	ldr	r3, [r7, #4]
   14554:	6a1b      	ldr	r3, [r3, #32]
   14556:	2117      	movs	r1, #23
   14558:	187c      	adds	r4, r7, r1
   1455a:	0019      	movs	r1, r3
   1455c:	0010      	movs	r0, r2
   1455e:	4b29      	ldr	r3, [pc, #164]	; (14604 <f_sync+0x124>)
   14560:	4798      	blx	r3
   14562:	0003      	movs	r3, r0
   14564:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   14566:	2317      	movs	r3, #23
   14568:	18fb      	adds	r3, r7, r3
   1456a:	781b      	ldrb	r3, [r3, #0]
   1456c:	2b00      	cmp	r3, #0
   1456e:	d13b      	bne.n	145e8 <f_sync+0x108>
					dir = fp->dir_ptr;
   14570:	687b      	ldr	r3, [r7, #4]
   14572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14574:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   14576:	68fb      	ldr	r3, [r7, #12]
   14578:	330b      	adds	r3, #11
   1457a:	68fa      	ldr	r2, [r7, #12]
   1457c:	320b      	adds	r2, #11
   1457e:	7812      	ldrb	r2, [r2, #0]
   14580:	2120      	movs	r1, #32
   14582:	430a      	orrs	r2, r1
   14584:	b2d2      	uxtb	r2, r2
   14586:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   14588:	687b      	ldr	r3, [r7, #4]
   1458a:	6818      	ldr	r0, [r3, #0]
   1458c:	687b      	ldr	r3, [r7, #4]
   1458e:	689a      	ldr	r2, [r3, #8]
   14590:	68fb      	ldr	r3, [r7, #12]
   14592:	0019      	movs	r1, r3
   14594:	4b1c      	ldr	r3, [pc, #112]	; (14608 <f_sync+0x128>)
   14596:	4798      	blx	r3
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
   14598:	68fb      	ldr	r3, [r7, #12]
   1459a:	331c      	adds	r3, #28
   1459c:	001a      	movs	r2, r3
   1459e:	687b      	ldr	r3, [r7, #4]
   145a0:	68db      	ldr	r3, [r3, #12]
   145a2:	0019      	movs	r1, r3
   145a4:	0010      	movs	r0, r2
   145a6:	4b19      	ldr	r3, [pc, #100]	; (1460c <f_sync+0x12c>)
   145a8:	4798      	blx	r3
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
   145aa:	68fb      	ldr	r3, [r7, #12]
   145ac:	3316      	adds	r3, #22
   145ae:	693a      	ldr	r2, [r7, #16]
   145b0:	0011      	movs	r1, r2
   145b2:	0018      	movs	r0, r3
   145b4:	4b15      	ldr	r3, [pc, #84]	; (1460c <f_sync+0x12c>)
   145b6:	4798      	blx	r3
					st_word(dir + DIR_LstAccDate, 0);
   145b8:	68fb      	ldr	r3, [r7, #12]
   145ba:	3312      	adds	r3, #18
   145bc:	2100      	movs	r1, #0
   145be:	0018      	movs	r0, r3
   145c0:	4b13      	ldr	r3, [pc, #76]	; (14610 <f_sync+0x130>)
   145c2:	4798      	blx	r3
					fs->wflag = 1;
   145c4:	68bb      	ldr	r3, [r7, #8]
   145c6:	2201      	movs	r2, #1
   145c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
   145ca:	68bb      	ldr	r3, [r7, #8]
   145cc:	2217      	movs	r2, #23
   145ce:	18bc      	adds	r4, r7, r2
   145d0:	0018      	movs	r0, r3
   145d2:	4b10      	ldr	r3, [pc, #64]	; (14614 <f_sync+0x134>)
   145d4:	4798      	blx	r3
   145d6:	0003      	movs	r3, r0
   145d8:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
   145da:	687b      	ldr	r3, [r7, #4]
   145dc:	7c1b      	ldrb	r3, [r3, #16]
   145de:	2240      	movs	r2, #64	; 0x40
   145e0:	4393      	bics	r3, r2
   145e2:	b2da      	uxtb	r2, r3
   145e4:	687b      	ldr	r3, [r7, #4]
   145e6:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
   145e8:	2317      	movs	r3, #23
   145ea:	18fb      	adds	r3, r7, r3
   145ec:	781b      	ldrb	r3, [r3, #0]
}
   145ee:	0018      	movs	r0, r3
   145f0:	46bd      	mov	sp, r7
   145f2:	b007      	add	sp, #28
   145f4:	bd90      	pop	{r4, r7, pc}
   145f6:	46c0      	nop			; (mov r8, r8)
   145f8:	00013b39 	.word	0x00013b39
   145fc:	000114bd 	.word	0x000114bd
   14600:	0001168d 	.word	0x0001168d
   14604:	00011a95 	.word	0x00011a95
   14608:	00012695 	.word	0x00012695
   1460c:	000117c3 	.word	0x000117c3
   14610:	00011787 	.word	0x00011787
   14614:	00011b0d 	.word	0x00011b0d

00014618 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
   14618:	b590      	push	{r4, r7, lr}
   1461a:	b085      	sub	sp, #20
   1461c:	af00      	add	r7, sp, #0
   1461e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
   14620:	230f      	movs	r3, #15
   14622:	18fc      	adds	r4, r7, r3
   14624:	687b      	ldr	r3, [r7, #4]
   14626:	0018      	movs	r0, r3
   14628:	4b11      	ldr	r3, [pc, #68]	; (14670 <f_close+0x58>)
   1462a:	4798      	blx	r3
   1462c:	0003      	movs	r3, r0
   1462e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
   14630:	230f      	movs	r3, #15
   14632:	18fb      	adds	r3, r7, r3
   14634:	781b      	ldrb	r3, [r3, #0]
   14636:	2b00      	cmp	r3, #0
   14638:	d112      	bne.n	14660 <f_close+0x48>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
   1463a:	687b      	ldr	r3, [r7, #4]
   1463c:	220f      	movs	r2, #15
   1463e:	18bc      	adds	r4, r7, r2
   14640:	2208      	movs	r2, #8
   14642:	18ba      	adds	r2, r7, r2
   14644:	0011      	movs	r1, r2
   14646:	0018      	movs	r0, r3
   14648:	4b0a      	ldr	r3, [pc, #40]	; (14674 <f_close+0x5c>)
   1464a:	4798      	blx	r3
   1464c:	0003      	movs	r3, r0
   1464e:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   14650:	230f      	movs	r3, #15
   14652:	18fb      	adds	r3, r7, r3
   14654:	781b      	ldrb	r3, [r3, #0]
   14656:	2b00      	cmp	r3, #0
   14658:	d102      	bne.n	14660 <f_close+0x48>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
   1465a:	687b      	ldr	r3, [r7, #4]
   1465c:	2200      	movs	r2, #0
   1465e:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
   14660:	230f      	movs	r3, #15
   14662:	18fb      	adds	r3, r7, r3
   14664:	781b      	ldrb	r3, [r3, #0]
}
   14666:	0018      	movs	r0, r3
   14668:	46bd      	mov	sp, r7
   1466a:	b005      	add	sp, #20
   1466c:	bd90      	pop	{r4, r7, pc}
   1466e:	46c0      	nop			; (mov r8, r8)
   14670:	000144e1 	.word	0x000144e1
   14674:	00013b39 	.word	0x00013b39

00014678 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
   14678:	b590      	push	{r4, r7, lr}
   1467a:	b089      	sub	sp, #36	; 0x24
   1467c:	af00      	add	r7, sp, #0
   1467e:	6078      	str	r0, [r7, #4]
   14680:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   14682:	687b      	ldr	r3, [r7, #4]
   14684:	221f      	movs	r2, #31
   14686:	18bc      	adds	r4, r7, r2
   14688:	2208      	movs	r2, #8
   1468a:	18ba      	adds	r2, r7, r2
   1468c:	0011      	movs	r1, r2
   1468e:	0018      	movs	r0, r3
   14690:	4b99      	ldr	r3, [pc, #612]	; (148f8 <f_lseek+0x280>)
   14692:	4798      	blx	r3
   14694:	0003      	movs	r3, r0
   14696:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) res = (FRESULT)fp->err;
   14698:	231f      	movs	r3, #31
   1469a:	18fb      	adds	r3, r7, r3
   1469c:	781b      	ldrb	r3, [r3, #0]
   1469e:	2b00      	cmp	r3, #0
   146a0:	d104      	bne.n	146ac <f_lseek+0x34>
   146a2:	231f      	movs	r3, #31
   146a4:	18fb      	adds	r3, r7, r3
   146a6:	687a      	ldr	r2, [r7, #4]
   146a8:	7c52      	ldrb	r2, [r2, #17]
   146aa:	701a      	strb	r2, [r3, #0]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
   146ac:	231f      	movs	r3, #31
   146ae:	18fb      	adds	r3, r7, r3
   146b0:	781b      	ldrb	r3, [r3, #0]
   146b2:	2b00      	cmp	r3, #0
   146b4:	d003      	beq.n	146be <f_lseek+0x46>
   146b6:	231f      	movs	r3, #31
   146b8:	18fb      	adds	r3, r7, r3
   146ba:	781b      	ldrb	r3, [r3, #0]
   146bc:	e117      	b.n	148ee <f_lseek+0x276>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   146be:	687b      	ldr	r3, [r7, #4]
   146c0:	68da      	ldr	r2, [r3, #12]
   146c2:	683b      	ldr	r3, [r7, #0]
   146c4:	429a      	cmp	r2, r3
   146c6:	d208      	bcs.n	146da <f_lseek+0x62>
   146c8:	687b      	ldr	r3, [r7, #4]
   146ca:	7c1b      	ldrb	r3, [r3, #16]
   146cc:	001a      	movs	r2, r3
   146ce:	2302      	movs	r3, #2
   146d0:	4013      	ands	r3, r2
   146d2:	d102      	bne.n	146da <f_lseek+0x62>
			ofs = fp->obj.objsize;
   146d4:	687b      	ldr	r3, [r7, #4]
   146d6:	68db      	ldr	r3, [r3, #12]
   146d8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
   146da:	687b      	ldr	r3, [r7, #4]
   146dc:	695b      	ldr	r3, [r3, #20]
   146de:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
   146e0:	2300      	movs	r3, #0
   146e2:	617b      	str	r3, [r7, #20]
   146e4:	687b      	ldr	r3, [r7, #4]
   146e6:	697a      	ldr	r2, [r7, #20]
   146e8:	615a      	str	r2, [r3, #20]
		if (ofs > 0) {
   146ea:	683b      	ldr	r3, [r7, #0]
   146ec:	2b00      	cmp	r3, #0
   146ee:	d100      	bne.n	146f2 <f_lseek+0x7a>
   146f0:	e0af      	b.n	14852 <f_lseek+0x1da>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   146f2:	68bb      	ldr	r3, [r7, #8]
   146f4:	895b      	ldrh	r3, [r3, #10]
   146f6:	025b      	lsls	r3, r3, #9
   146f8:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
   146fa:	693b      	ldr	r3, [r7, #16]
   146fc:	2b00      	cmp	r3, #0
   146fe:	d020      	beq.n	14742 <f_lseek+0xca>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   14700:	683b      	ldr	r3, [r7, #0]
   14702:	1e5a      	subs	r2, r3, #1
   14704:	4b7d      	ldr	r3, [pc, #500]	; (148fc <f_lseek+0x284>)
   14706:	68f9      	ldr	r1, [r7, #12]
   14708:	0010      	movs	r0, r2
   1470a:	4798      	blx	r3
   1470c:	0003      	movs	r3, r0
   1470e:	001c      	movs	r4, r3
   14710:	693b      	ldr	r3, [r7, #16]
   14712:	1e5a      	subs	r2, r3, #1
   14714:	4b79      	ldr	r3, [pc, #484]	; (148fc <f_lseek+0x284>)
   14716:	68f9      	ldr	r1, [r7, #12]
   14718:	0010      	movs	r0, r2
   1471a:	4798      	blx	r3
   1471c:	0003      	movs	r3, r0
			if (ifptr > 0 &&
   1471e:	429c      	cmp	r4, r3
   14720:	d30f      	bcc.n	14742 <f_lseek+0xca>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   14722:	693b      	ldr	r3, [r7, #16]
   14724:	3b01      	subs	r3, #1
   14726:	68fa      	ldr	r2, [r7, #12]
   14728:	4252      	negs	r2, r2
   1472a:	401a      	ands	r2, r3
   1472c:	687b      	ldr	r3, [r7, #4]
   1472e:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
   14730:	687b      	ldr	r3, [r7, #4]
   14732:	695b      	ldr	r3, [r3, #20]
   14734:	683a      	ldr	r2, [r7, #0]
   14736:	1ad3      	subs	r3, r2, r3
   14738:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
   1473a:	687b      	ldr	r3, [r7, #4]
   1473c:	699b      	ldr	r3, [r3, #24]
   1473e:	61bb      	str	r3, [r7, #24]
   14740:	e022      	b.n	14788 <f_lseek+0x110>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
   14742:	687b      	ldr	r3, [r7, #4]
   14744:	689b      	ldr	r3, [r3, #8]
   14746:	61bb      	str	r3, [r7, #24]
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   14748:	69bb      	ldr	r3, [r7, #24]
   1474a:	2b00      	cmp	r3, #0
   1474c:	d119      	bne.n	14782 <f_lseek+0x10a>
					clst = create_chain(&fp->obj, 0);
   1474e:	687b      	ldr	r3, [r7, #4]
   14750:	2100      	movs	r1, #0
   14752:	0018      	movs	r0, r3
   14754:	4b6a      	ldr	r3, [pc, #424]	; (14900 <f_lseek+0x288>)
   14756:	4798      	blx	r3
   14758:	0003      	movs	r3, r0
   1475a:	61bb      	str	r3, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   1475c:	69bb      	ldr	r3, [r7, #24]
   1475e:	2b01      	cmp	r3, #1
   14760:	d104      	bne.n	1476c <f_lseek+0xf4>
   14762:	687b      	ldr	r3, [r7, #4]
   14764:	2202      	movs	r2, #2
   14766:	745a      	strb	r2, [r3, #17]
   14768:	2302      	movs	r3, #2
   1476a:	e0c0      	b.n	148ee <f_lseek+0x276>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   1476c:	69bb      	ldr	r3, [r7, #24]
   1476e:	3301      	adds	r3, #1
   14770:	d104      	bne.n	1477c <f_lseek+0x104>
   14772:	687b      	ldr	r3, [r7, #4]
   14774:	2201      	movs	r2, #1
   14776:	745a      	strb	r2, [r3, #17]
   14778:	2301      	movs	r3, #1
   1477a:	e0b8      	b.n	148ee <f_lseek+0x276>
					fp->obj.sclust = clst;
   1477c:	687b      	ldr	r3, [r7, #4]
   1477e:	69ba      	ldr	r2, [r7, #24]
   14780:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
   14782:	687b      	ldr	r3, [r7, #4]
   14784:	69ba      	ldr	r2, [r7, #24]
   14786:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
   14788:	69bb      	ldr	r3, [r7, #24]
   1478a:	2b00      	cmp	r3, #0
   1478c:	d061      	beq.n	14852 <f_lseek+0x1da>
				while (ofs > bcs) {						/* Cluster following loop */
   1478e:	e03d      	b.n	1480c <f_lseek+0x194>
					ofs -= bcs; fp->fptr += bcs;
   14790:	683a      	ldr	r2, [r7, #0]
   14792:	68fb      	ldr	r3, [r7, #12]
   14794:	1ad3      	subs	r3, r2, r3
   14796:	603b      	str	r3, [r7, #0]
   14798:	687b      	ldr	r3, [r7, #4]
   1479a:	695a      	ldr	r2, [r3, #20]
   1479c:	68fb      	ldr	r3, [r7, #12]
   1479e:	18d2      	adds	r2, r2, r3
   147a0:	687b      	ldr	r3, [r7, #4]
   147a2:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   147a4:	687b      	ldr	r3, [r7, #4]
   147a6:	7c1b      	ldrb	r3, [r3, #16]
   147a8:	001a      	movs	r2, r3
   147aa:	2302      	movs	r3, #2
   147ac:	4013      	ands	r3, r2
   147ae:	d00d      	beq.n	147cc <f_lseek+0x154>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
   147b0:	687b      	ldr	r3, [r7, #4]
   147b2:	69ba      	ldr	r2, [r7, #24]
   147b4:	0011      	movs	r1, r2
   147b6:	0018      	movs	r0, r3
   147b8:	4b51      	ldr	r3, [pc, #324]	; (14900 <f_lseek+0x288>)
   147ba:	4798      	blx	r3
   147bc:	0003      	movs	r3, r0
   147be:	61bb      	str	r3, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
   147c0:	69bb      	ldr	r3, [r7, #24]
   147c2:	2b00      	cmp	r3, #0
   147c4:	d10a      	bne.n	147dc <f_lseek+0x164>
							ofs = 0; break;
   147c6:	2300      	movs	r3, #0
   147c8:	603b      	str	r3, [r7, #0]
   147ca:	e023      	b.n	14814 <f_lseek+0x19c>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
   147cc:	687b      	ldr	r3, [r7, #4]
   147ce:	69ba      	ldr	r2, [r7, #24]
   147d0:	0011      	movs	r1, r2
   147d2:	0018      	movs	r0, r3
   147d4:	4b4b      	ldr	r3, [pc, #300]	; (14904 <f_lseek+0x28c>)
   147d6:	4798      	blx	r3
   147d8:	0003      	movs	r3, r0
   147da:	61bb      	str	r3, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   147dc:	69bb      	ldr	r3, [r7, #24]
   147de:	3301      	adds	r3, #1
   147e0:	d104      	bne.n	147ec <f_lseek+0x174>
   147e2:	687b      	ldr	r3, [r7, #4]
   147e4:	2201      	movs	r2, #1
   147e6:	745a      	strb	r2, [r3, #17]
   147e8:	2301      	movs	r3, #1
   147ea:	e080      	b.n	148ee <f_lseek+0x276>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   147ec:	69bb      	ldr	r3, [r7, #24]
   147ee:	2b01      	cmp	r3, #1
   147f0:	d904      	bls.n	147fc <f_lseek+0x184>
   147f2:	68bb      	ldr	r3, [r7, #8]
   147f4:	699a      	ldr	r2, [r3, #24]
   147f6:	69bb      	ldr	r3, [r7, #24]
   147f8:	429a      	cmp	r2, r3
   147fa:	d804      	bhi.n	14806 <f_lseek+0x18e>
   147fc:	687b      	ldr	r3, [r7, #4]
   147fe:	2202      	movs	r2, #2
   14800:	745a      	strb	r2, [r3, #17]
   14802:	2302      	movs	r3, #2
   14804:	e073      	b.n	148ee <f_lseek+0x276>
					fp->clust = clst;
   14806:	687b      	ldr	r3, [r7, #4]
   14808:	69ba      	ldr	r2, [r7, #24]
   1480a:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
   1480c:	683a      	ldr	r2, [r7, #0]
   1480e:	68fb      	ldr	r3, [r7, #12]
   14810:	429a      	cmp	r2, r3
   14812:	d8bd      	bhi.n	14790 <f_lseek+0x118>
				}
				fp->fptr += ofs;
   14814:	687b      	ldr	r3, [r7, #4]
   14816:	695a      	ldr	r2, [r3, #20]
   14818:	683b      	ldr	r3, [r7, #0]
   1481a:	18d2      	adds	r2, r2, r3
   1481c:	687b      	ldr	r3, [r7, #4]
   1481e:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
   14820:	683b      	ldr	r3, [r7, #0]
   14822:	05db      	lsls	r3, r3, #23
   14824:	0ddb      	lsrs	r3, r3, #23
   14826:	d014      	beq.n	14852 <f_lseek+0x1da>
					nsect = clst2sect(fs, clst);	/* Current sector */
   14828:	68bb      	ldr	r3, [r7, #8]
   1482a:	69ba      	ldr	r2, [r7, #24]
   1482c:	0011      	movs	r1, r2
   1482e:	0018      	movs	r0, r3
   14830:	4b35      	ldr	r3, [pc, #212]	; (14908 <f_lseek+0x290>)
   14832:	4798      	blx	r3
   14834:	0003      	movs	r3, r0
   14836:	617b      	str	r3, [r7, #20]
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   14838:	697b      	ldr	r3, [r7, #20]
   1483a:	2b00      	cmp	r3, #0
   1483c:	d104      	bne.n	14848 <f_lseek+0x1d0>
   1483e:	687b      	ldr	r3, [r7, #4]
   14840:	2202      	movs	r2, #2
   14842:	745a      	strb	r2, [r3, #17]
   14844:	2302      	movs	r3, #2
   14846:	e052      	b.n	148ee <f_lseek+0x276>
					nsect += (DWORD)(ofs / SS(fs));
   14848:	683b      	ldr	r3, [r7, #0]
   1484a:	0a5b      	lsrs	r3, r3, #9
   1484c:	697a      	ldr	r2, [r7, #20]
   1484e:	18d3      	adds	r3, r2, r3
   14850:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
   14852:	687b      	ldr	r3, [r7, #4]
   14854:	695a      	ldr	r2, [r3, #20]
   14856:	687b      	ldr	r3, [r7, #4]
   14858:	68db      	ldr	r3, [r3, #12]
   1485a:	429a      	cmp	r2, r3
   1485c:	d90a      	bls.n	14874 <f_lseek+0x1fc>
			fp->obj.objsize = fp->fptr;
   1485e:	687b      	ldr	r3, [r7, #4]
   14860:	695a      	ldr	r2, [r3, #20]
   14862:	687b      	ldr	r3, [r7, #4]
   14864:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
   14866:	687b      	ldr	r3, [r7, #4]
   14868:	7c1b      	ldrb	r3, [r3, #16]
   1486a:	2240      	movs	r2, #64	; 0x40
   1486c:	4313      	orrs	r3, r2
   1486e:	b2da      	uxtb	r2, r3
   14870:	687b      	ldr	r3, [r7, #4]
   14872:	741a      	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   14874:	687b      	ldr	r3, [r7, #4]
   14876:	695b      	ldr	r3, [r3, #20]
   14878:	05db      	lsls	r3, r3, #23
   1487a:	0ddb      	lsrs	r3, r3, #23
   1487c:	d034      	beq.n	148e8 <f_lseek+0x270>
   1487e:	687b      	ldr	r3, [r7, #4]
   14880:	69da      	ldr	r2, [r3, #28]
   14882:	697b      	ldr	r3, [r7, #20]
   14884:	429a      	cmp	r2, r3
   14886:	d02f      	beq.n	148e8 <f_lseek+0x270>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
   14888:	687b      	ldr	r3, [r7, #4]
   1488a:	7c1b      	ldrb	r3, [r3, #16]
   1488c:	b25b      	sxtb	r3, r3
   1488e:	2b00      	cmp	r3, #0
   14890:	da17      	bge.n	148c2 <f_lseek+0x24a>
				if (disk_writep(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
   14892:	68bb      	ldr	r3, [r7, #8]
   14894:	7858      	ldrb	r0, [r3, #1]
   14896:	687b      	ldr	r3, [r7, #4]
   14898:	3328      	adds	r3, #40	; 0x28
   1489a:	0019      	movs	r1, r3
   1489c:	687b      	ldr	r3, [r7, #4]
   1489e:	69da      	ldr	r2, [r3, #28]
   148a0:	2301      	movs	r3, #1
   148a2:	4c1a      	ldr	r4, [pc, #104]	; (1490c <f_lseek+0x294>)
   148a4:	47a0      	blx	r4
   148a6:	1e03      	subs	r3, r0, #0
   148a8:	d004      	beq.n	148b4 <f_lseek+0x23c>
   148aa:	687b      	ldr	r3, [r7, #4]
   148ac:	2201      	movs	r2, #1
   148ae:	745a      	strb	r2, [r3, #17]
   148b0:	2301      	movs	r3, #1
   148b2:	e01c      	b.n	148ee <f_lseek+0x276>
				fp->flag &= (BYTE)~FA_DIRTY;
   148b4:	687b      	ldr	r3, [r7, #4]
   148b6:	7c1b      	ldrb	r3, [r3, #16]
   148b8:	227f      	movs	r2, #127	; 0x7f
   148ba:	4013      	ands	r3, r2
   148bc:	b2da      	uxtb	r2, r3
   148be:	687b      	ldr	r3, [r7, #4]
   148c0:	741a      	strb	r2, [r3, #16]
			}
#endif
			if (disk_readp(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
   148c2:	68bb      	ldr	r3, [r7, #8]
   148c4:	7858      	ldrb	r0, [r3, #1]
   148c6:	687b      	ldr	r3, [r7, #4]
   148c8:	3328      	adds	r3, #40	; 0x28
   148ca:	0019      	movs	r1, r3
   148cc:	697a      	ldr	r2, [r7, #20]
   148ce:	2301      	movs	r3, #1
   148d0:	4c0f      	ldr	r4, [pc, #60]	; (14910 <f_lseek+0x298>)
   148d2:	47a0      	blx	r4
   148d4:	1e03      	subs	r3, r0, #0
   148d6:	d004      	beq.n	148e2 <f_lseek+0x26a>
   148d8:	687b      	ldr	r3, [r7, #4]
   148da:	2201      	movs	r2, #1
   148dc:	745a      	strb	r2, [r3, #17]
   148de:	2301      	movs	r3, #1
   148e0:	e005      	b.n	148ee <f_lseek+0x276>
#endif
			fp->sect = nsect;
   148e2:	687b      	ldr	r3, [r7, #4]
   148e4:	697a      	ldr	r2, [r7, #20]
   148e6:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
   148e8:	231f      	movs	r3, #31
   148ea:	18fb      	adds	r3, r7, r3
   148ec:	781b      	ldrb	r3, [r3, #0]
}
   148ee:	0018      	movs	r0, r3
   148f0:	46bd      	mov	sp, r7
   148f2:	b009      	add	sp, #36	; 0x24
   148f4:	bd90      	pop	{r4, r7, pc}
   148f6:	46c0      	nop			; (mov r8, r8)
   148f8:	00013b39 	.word	0x00013b39
   148fc:	00020bbd 	.word	0x00020bbd
   14900:	000120c9 	.word	0x000120c9
   14904:	00011c59 	.word	0x00011c59
   14908:	00011c21 	.word	0x00011c21
   1490c:	000114bd 	.word	0x000114bd
   14910:	000113e5 	.word	0x000113e5

00014914 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
   14914:	b580      	push	{r7, lr}
   14916:	b084      	sub	sp, #16
   14918:	af00      	add	r7, sp, #0
   1491a:	6078      	str	r0, [r7, #4]
   1491c:	000a      	movs	r2, r1
   1491e:	1cbb      	adds	r3, r7, #2
   14920:	801a      	strh	r2, [r3, #0]
	WCHAR c = 0;
   14922:	230e      	movs	r3, #14
   14924:	18fb      	adds	r3, r7, r3
   14926:	2200      	movs	r2, #0
   14928:	801a      	strh	r2, [r3, #0]
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);
   1492a:	4b20      	ldr	r3, [pc, #128]	; (149ac <ff_uni2oem+0x98>)
   1492c:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
   1492e:	687b      	ldr	r3, [r7, #4]
   14930:	2b7f      	cmp	r3, #127	; 0x7f
   14932:	d804      	bhi.n	1493e <ff_uni2oem+0x2a>
		c = (WCHAR)uni;
   14934:	230e      	movs	r3, #14
   14936:	18fb      	adds	r3, r7, r3
   14938:	687a      	ldr	r2, [r7, #4]
   1493a:	801a      	strh	r2, [r3, #0]
   1493c:	e02f      	b.n	1499e <ff_uni2oem+0x8a>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
   1493e:	687b      	ldr	r3, [r7, #4]
   14940:	4a1b      	ldr	r2, [pc, #108]	; (149b0 <ff_uni2oem+0x9c>)
   14942:	4293      	cmp	r3, r2
   14944:	d82b      	bhi.n	1499e <ff_uni2oem+0x8a>
   14946:	1cbb      	adds	r3, r7, #2
   14948:	881a      	ldrh	r2, [r3, #0]
   1494a:	23b6      	movs	r3, #182	; 0xb6
   1494c:	33ff      	adds	r3, #255	; 0xff
   1494e:	429a      	cmp	r2, r3
   14950:	d125      	bne.n	1499e <ff_uni2oem+0x8a>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
   14952:	230e      	movs	r3, #14
   14954:	18fb      	adds	r3, r7, r3
   14956:	2200      	movs	r2, #0
   14958:	801a      	strh	r2, [r3, #0]
   1495a:	e006      	b.n	1496a <ff_uni2oem+0x56>
   1495c:	230e      	movs	r3, #14
   1495e:	18fb      	adds	r3, r7, r3
   14960:	881a      	ldrh	r2, [r3, #0]
   14962:	230e      	movs	r3, #14
   14964:	18fb      	adds	r3, r7, r3
   14966:	3201      	adds	r2, #1
   14968:	801a      	strh	r2, [r3, #0]
   1496a:	230e      	movs	r3, #14
   1496c:	18fb      	adds	r3, r7, r3
   1496e:	881b      	ldrh	r3, [r3, #0]
   14970:	2b7f      	cmp	r3, #127	; 0x7f
   14972:	d80a      	bhi.n	1498a <ff_uni2oem+0x76>
   14974:	230e      	movs	r3, #14
   14976:	18fb      	adds	r3, r7, r3
   14978:	881b      	ldrh	r3, [r3, #0]
   1497a:	005b      	lsls	r3, r3, #1
   1497c:	68ba      	ldr	r2, [r7, #8]
   1497e:	18d3      	adds	r3, r2, r3
   14980:	881b      	ldrh	r3, [r3, #0]
   14982:	001a      	movs	r2, r3
   14984:	687b      	ldr	r3, [r7, #4]
   14986:	429a      	cmp	r2, r3
   14988:	d1e8      	bne.n	1495c <ff_uni2oem+0x48>
			c = (c + 0x80) & 0xFF;
   1498a:	230e      	movs	r3, #14
   1498c:	18fb      	adds	r3, r7, r3
   1498e:	881b      	ldrh	r3, [r3, #0]
   14990:	3380      	adds	r3, #128	; 0x80
   14992:	b29a      	uxth	r2, r3
   14994:	230e      	movs	r3, #14
   14996:	18fb      	adds	r3, r7, r3
   14998:	21ff      	movs	r1, #255	; 0xff
   1499a:	400a      	ands	r2, r1
   1499c:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   1499e:	230e      	movs	r3, #14
   149a0:	18fb      	adds	r3, r7, r3
   149a2:	881b      	ldrh	r3, [r3, #0]
}
   149a4:	0018      	movs	r0, r3
   149a6:	46bd      	mov	sp, r7
   149a8:	b004      	add	sp, #16
   149aa:	bd80      	pop	{r7, pc}
   149ac:	000286ec 	.word	0x000286ec
   149b0:	0000ffff 	.word	0x0000ffff

000149b4 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
   149b4:	b580      	push	{r7, lr}
   149b6:	b084      	sub	sp, #16
   149b8:	af00      	add	r7, sp, #0
   149ba:	0002      	movs	r2, r0
   149bc:	1dbb      	adds	r3, r7, #6
   149be:	801a      	strh	r2, [r3, #0]
   149c0:	1d3b      	adds	r3, r7, #4
   149c2:	1c0a      	adds	r2, r1, #0
   149c4:	801a      	strh	r2, [r3, #0]
	WCHAR c = 0;
   149c6:	230e      	movs	r3, #14
   149c8:	18fb      	adds	r3, r7, r3
   149ca:	2200      	movs	r2, #0
   149cc:	801a      	strh	r2, [r3, #0]
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);
   149ce:	4b14      	ldr	r3, [pc, #80]	; (14a20 <ff_oem2uni+0x6c>)
   149d0:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
   149d2:	1dbb      	adds	r3, r7, #6
   149d4:	881b      	ldrh	r3, [r3, #0]
   149d6:	2b7f      	cmp	r3, #127	; 0x7f
   149d8:	d805      	bhi.n	149e6 <ff_oem2uni+0x32>
		c = oem;
   149da:	230e      	movs	r3, #14
   149dc:	18fb      	adds	r3, r7, r3
   149de:	1dba      	adds	r2, r7, #6
   149e0:	8812      	ldrh	r2, [r2, #0]
   149e2:	801a      	strh	r2, [r3, #0]
   149e4:	e015      	b.n	14a12 <ff_oem2uni+0x5e>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
   149e6:	1d3b      	adds	r3, r7, #4
   149e8:	881a      	ldrh	r2, [r3, #0]
   149ea:	23b6      	movs	r3, #182	; 0xb6
   149ec:	33ff      	adds	r3, #255	; 0xff
   149ee:	429a      	cmp	r2, r3
   149f0:	d10f      	bne.n	14a12 <ff_oem2uni+0x5e>
			if (oem < 0x100) c = p[oem - 0x80];
   149f2:	1dbb      	adds	r3, r7, #6
   149f4:	881b      	ldrh	r3, [r3, #0]
   149f6:	2bff      	cmp	r3, #255	; 0xff
   149f8:	d80b      	bhi.n	14a12 <ff_oem2uni+0x5e>
   149fa:	1dbb      	adds	r3, r7, #6
   149fc:	881b      	ldrh	r3, [r3, #0]
   149fe:	4a09      	ldr	r2, [pc, #36]	; (14a24 <ff_oem2uni+0x70>)
   14a00:	4694      	mov	ip, r2
   14a02:	4463      	add	r3, ip
   14a04:	005b      	lsls	r3, r3, #1
   14a06:	68ba      	ldr	r2, [r7, #8]
   14a08:	18d2      	adds	r2, r2, r3
   14a0a:	230e      	movs	r3, #14
   14a0c:	18fb      	adds	r3, r7, r3
   14a0e:	8812      	ldrh	r2, [r2, #0]
   14a10:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   14a12:	230e      	movs	r3, #14
   14a14:	18fb      	adds	r3, r7, r3
   14a16:	881b      	ldrh	r3, [r3, #0]
}
   14a18:	0018      	movs	r0, r3
   14a1a:	46bd      	mov	sp, r7
   14a1c:	b004      	add	sp, #16
   14a1e:	bd80      	pop	{r7, pc}
   14a20:	000286ec 	.word	0x000286ec
   14a24:	7fffff80 	.word	0x7fffff80

00014a28 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
   14a28:	b580      	push	{r7, lr}
   14a2a:	b086      	sub	sp, #24
   14a2c:	af00      	add	r7, sp, #0
   14a2e:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
   14a30:	687b      	ldr	r3, [r7, #4]
   14a32:	4a65      	ldr	r2, [pc, #404]	; (14bc8 <ff_wtoupper+0x1a0>)
   14a34:	4293      	cmp	r3, r2
   14a36:	d900      	bls.n	14a3a <ff_wtoupper+0x12>
   14a38:	e0c0      	b.n	14bbc <ff_wtoupper+0x194>
		uc = (WORD)uni;
   14a3a:	2312      	movs	r3, #18
   14a3c:	18fb      	adds	r3, r7, r3
   14a3e:	687a      	ldr	r2, [r7, #4]
   14a40:	801a      	strh	r2, [r3, #0]
		p = uc < 0x1000 ? cvt1 : cvt2;
   14a42:	2312      	movs	r3, #18
   14a44:	18fb      	adds	r3, r7, r3
   14a46:	881b      	ldrh	r3, [r3, #0]
   14a48:	4a60      	ldr	r2, [pc, #384]	; (14bcc <ff_wtoupper+0x1a4>)
   14a4a:	4293      	cmp	r3, r2
   14a4c:	d801      	bhi.n	14a52 <ff_wtoupper+0x2a>
   14a4e:	4b60      	ldr	r3, [pc, #384]	; (14bd0 <ff_wtoupper+0x1a8>)
   14a50:	e000      	b.n	14a54 <ff_wtoupper+0x2c>
   14a52:	4b60      	ldr	r3, [pc, #384]	; (14bd4 <ff_wtoupper+0x1ac>)
   14a54:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
   14a56:	697b      	ldr	r3, [r7, #20]
   14a58:	1c9a      	adds	r2, r3, #2
   14a5a:	617a      	str	r2, [r7, #20]
   14a5c:	2210      	movs	r2, #16
   14a5e:	18ba      	adds	r2, r7, r2
   14a60:	881b      	ldrh	r3, [r3, #0]
   14a62:	8013      	strh	r3, [r2, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
   14a64:	2310      	movs	r3, #16
   14a66:	18fb      	adds	r3, r7, r3
   14a68:	881b      	ldrh	r3, [r3, #0]
   14a6a:	2b00      	cmp	r3, #0
   14a6c:	d100      	bne.n	14a70 <ff_wtoupper+0x48>
   14a6e:	e0a1      	b.n	14bb4 <ff_wtoupper+0x18c>
   14a70:	2312      	movs	r3, #18
   14a72:	18fa      	adds	r2, r7, r3
   14a74:	2310      	movs	r3, #16
   14a76:	18fb      	adds	r3, r7, r3
   14a78:	8812      	ldrh	r2, [r2, #0]
   14a7a:	881b      	ldrh	r3, [r3, #0]
   14a7c:	429a      	cmp	r2, r3
   14a7e:	d200      	bcs.n	14a82 <ff_wtoupper+0x5a>
   14a80:	e098      	b.n	14bb4 <ff_wtoupper+0x18c>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
   14a82:	697b      	ldr	r3, [r7, #20]
   14a84:	1c9a      	adds	r2, r3, #2
   14a86:	617a      	str	r2, [r7, #20]
   14a88:	220e      	movs	r2, #14
   14a8a:	18ba      	adds	r2, r7, r2
   14a8c:	881b      	ldrh	r3, [r3, #0]
   14a8e:	8013      	strh	r3, [r2, #0]
   14a90:	230c      	movs	r3, #12
   14a92:	18fb      	adds	r3, r7, r3
   14a94:	220e      	movs	r2, #14
   14a96:	18ba      	adds	r2, r7, r2
   14a98:	8812      	ldrh	r2, [r2, #0]
   14a9a:	0a12      	lsrs	r2, r2, #8
   14a9c:	801a      	strh	r2, [r3, #0]
   14a9e:	230e      	movs	r3, #14
   14aa0:	18fb      	adds	r3, r7, r3
   14aa2:	220e      	movs	r2, #14
   14aa4:	18ba      	adds	r2, r7, r2
   14aa6:	8812      	ldrh	r2, [r2, #0]
   14aa8:	21ff      	movs	r1, #255	; 0xff
   14aaa:	400a      	ands	r2, r1
   14aac:	801a      	strh	r2, [r3, #0]
			if (uc < bc + nc) {	/* In the block? */
   14aae:	2312      	movs	r3, #18
   14ab0:	18fb      	adds	r3, r7, r3
   14ab2:	881a      	ldrh	r2, [r3, #0]
   14ab4:	2310      	movs	r3, #16
   14ab6:	18fb      	adds	r3, r7, r3
   14ab8:	8819      	ldrh	r1, [r3, #0]
   14aba:	230e      	movs	r3, #14
   14abc:	18fb      	adds	r3, r7, r3
   14abe:	881b      	ldrh	r3, [r3, #0]
   14ac0:	18cb      	adds	r3, r1, r3
   14ac2:	429a      	cmp	r2, r3
   14ac4:	da67      	bge.n	14b96 <ff_wtoupper+0x16e>
				switch (cmd) {
   14ac6:	230c      	movs	r3, #12
   14ac8:	18fb      	adds	r3, r7, r3
   14aca:	881b      	ldrh	r3, [r3, #0]
   14acc:	2b08      	cmp	r3, #8
   14ace:	d900      	bls.n	14ad2 <ff_wtoupper+0xaa>
   14ad0:	e06f      	b.n	14bb2 <ff_wtoupper+0x18a>
   14ad2:	009a      	lsls	r2, r3, #2
   14ad4:	4b40      	ldr	r3, [pc, #256]	; (14bd8 <ff_wtoupper+0x1b0>)
   14ad6:	18d3      	adds	r3, r2, r3
   14ad8:	681b      	ldr	r3, [r3, #0]
   14ada:	469f      	mov	pc, r3
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
   14adc:	2312      	movs	r3, #18
   14ade:	18fb      	adds	r3, r7, r3
   14ae0:	881a      	ldrh	r2, [r3, #0]
   14ae2:	2310      	movs	r3, #16
   14ae4:	18fb      	adds	r3, r7, r3
   14ae6:	881b      	ldrh	r3, [r3, #0]
   14ae8:	1ad3      	subs	r3, r2, r3
   14aea:	005b      	lsls	r3, r3, #1
   14aec:	697a      	ldr	r2, [r7, #20]
   14aee:	18d2      	adds	r2, r2, r3
   14af0:	2312      	movs	r3, #18
   14af2:	18fb      	adds	r3, r7, r3
   14af4:	8812      	ldrh	r2, [r2, #0]
   14af6:	801a      	strh	r2, [r3, #0]
   14af8:	e04c      	b.n	14b94 <ff_wtoupper+0x16c>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
   14afa:	2312      	movs	r3, #18
   14afc:	18fa      	adds	r2, r7, r3
   14afe:	2310      	movs	r3, #16
   14b00:	18fb      	adds	r3, r7, r3
   14b02:	8812      	ldrh	r2, [r2, #0]
   14b04:	881b      	ldrh	r3, [r3, #0]
   14b06:	1ad3      	subs	r3, r2, r3
   14b08:	b29b      	uxth	r3, r3
   14b0a:	2201      	movs	r2, #1
   14b0c:	4013      	ands	r3, r2
   14b0e:	b29a      	uxth	r2, r3
   14b10:	2312      	movs	r3, #18
   14b12:	18fb      	adds	r3, r7, r3
   14b14:	2112      	movs	r1, #18
   14b16:	1879      	adds	r1, r7, r1
   14b18:	8809      	ldrh	r1, [r1, #0]
   14b1a:	1a8a      	subs	r2, r1, r2
   14b1c:	801a      	strh	r2, [r3, #0]
   14b1e:	e039      	b.n	14b94 <ff_wtoupper+0x16c>
				case 2: uc -= 16; break;			/* Shift -16 */
   14b20:	2312      	movs	r3, #18
   14b22:	18fb      	adds	r3, r7, r3
   14b24:	2212      	movs	r2, #18
   14b26:	18ba      	adds	r2, r7, r2
   14b28:	8812      	ldrh	r2, [r2, #0]
   14b2a:	3a10      	subs	r2, #16
   14b2c:	801a      	strh	r2, [r3, #0]
   14b2e:	e031      	b.n	14b94 <ff_wtoupper+0x16c>
				case 3:	uc -= 32; break;			/* Shift -32 */
   14b30:	2312      	movs	r3, #18
   14b32:	18fb      	adds	r3, r7, r3
   14b34:	2212      	movs	r2, #18
   14b36:	18ba      	adds	r2, r7, r2
   14b38:	8812      	ldrh	r2, [r2, #0]
   14b3a:	3a20      	subs	r2, #32
   14b3c:	801a      	strh	r2, [r3, #0]
   14b3e:	e029      	b.n	14b94 <ff_wtoupper+0x16c>
				case 4:	uc -= 48; break;			/* Shift -48 */
   14b40:	2312      	movs	r3, #18
   14b42:	18fb      	adds	r3, r7, r3
   14b44:	2212      	movs	r2, #18
   14b46:	18ba      	adds	r2, r7, r2
   14b48:	8812      	ldrh	r2, [r2, #0]
   14b4a:	3a30      	subs	r2, #48	; 0x30
   14b4c:	801a      	strh	r2, [r3, #0]
   14b4e:	e021      	b.n	14b94 <ff_wtoupper+0x16c>
				case 5:	uc -= 26; break;			/* Shift -26 */
   14b50:	2312      	movs	r3, #18
   14b52:	18fb      	adds	r3, r7, r3
   14b54:	2212      	movs	r2, #18
   14b56:	18ba      	adds	r2, r7, r2
   14b58:	8812      	ldrh	r2, [r2, #0]
   14b5a:	3a1a      	subs	r2, #26
   14b5c:	801a      	strh	r2, [r3, #0]
   14b5e:	e019      	b.n	14b94 <ff_wtoupper+0x16c>
				case 6:	uc += 8; break;				/* Shift +8 */
   14b60:	2312      	movs	r3, #18
   14b62:	18fb      	adds	r3, r7, r3
   14b64:	2212      	movs	r2, #18
   14b66:	18ba      	adds	r2, r7, r2
   14b68:	8812      	ldrh	r2, [r2, #0]
   14b6a:	3208      	adds	r2, #8
   14b6c:	801a      	strh	r2, [r3, #0]
   14b6e:	e011      	b.n	14b94 <ff_wtoupper+0x16c>
				case 7: uc -= 80; break;			/* Shift -80 */
   14b70:	2312      	movs	r3, #18
   14b72:	18fb      	adds	r3, r7, r3
   14b74:	2212      	movs	r2, #18
   14b76:	18ba      	adds	r2, r7, r2
   14b78:	8812      	ldrh	r2, [r2, #0]
   14b7a:	3a50      	subs	r2, #80	; 0x50
   14b7c:	801a      	strh	r2, [r3, #0]
   14b7e:	e009      	b.n	14b94 <ff_wtoupper+0x16c>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
   14b80:	2312      	movs	r3, #18
   14b82:	18fb      	adds	r3, r7, r3
   14b84:	2212      	movs	r2, #18
   14b86:	18ba      	adds	r2, r7, r2
   14b88:	8812      	ldrh	r2, [r2, #0]
   14b8a:	4914      	ldr	r1, [pc, #80]	; (14bdc <ff_wtoupper+0x1b4>)
   14b8c:	468c      	mov	ip, r1
   14b8e:	4462      	add	r2, ip
   14b90:	801a      	strh	r2, [r3, #0]
   14b92:	46c0      	nop			; (mov r8, r8)
				}
				break;
   14b94:	e00d      	b.n	14bb2 <ff_wtoupper+0x18a>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
   14b96:	230c      	movs	r3, #12
   14b98:	18fb      	adds	r3, r7, r3
   14b9a:	881b      	ldrh	r3, [r3, #0]
   14b9c:	2b00      	cmp	r3, #0
   14b9e:	d000      	beq.n	14ba2 <ff_wtoupper+0x17a>
   14ba0:	e759      	b.n	14a56 <ff_wtoupper+0x2e>
   14ba2:	230e      	movs	r3, #14
   14ba4:	18fb      	adds	r3, r7, r3
   14ba6:	881b      	ldrh	r3, [r3, #0]
   14ba8:	005b      	lsls	r3, r3, #1
   14baa:	697a      	ldr	r2, [r7, #20]
   14bac:	18d3      	adds	r3, r2, r3
   14bae:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
   14bb0:	e751      	b.n	14a56 <ff_wtoupper+0x2e>
				break;
   14bb2:	46c0      	nop			; (mov r8, r8)
		}
		uni = uc;
   14bb4:	2312      	movs	r3, #18
   14bb6:	18fb      	adds	r3, r7, r3
   14bb8:	881b      	ldrh	r3, [r3, #0]
   14bba:	607b      	str	r3, [r7, #4]
	}

	return uni;
   14bbc:	687b      	ldr	r3, [r7, #4]
}
   14bbe:	0018      	movs	r0, r3
   14bc0:	46bd      	mov	sp, r7
   14bc2:	b006      	add	sp, #24
   14bc4:	bd80      	pop	{r7, pc}
   14bc6:	46c0      	nop			; (mov r8, r8)
   14bc8:	0000ffff 	.word	0x0000ffff
   14bcc:	00000fff 	.word	0x00000fff
   14bd0:	00028810 	.word	0x00028810
   14bd4:	00028a04 	.word	0x00028a04
   14bd8:	000287ec 	.word	0x000287ec
   14bdc:	ffffe3a0 	.word	0xffffe3a0

00014be0 <arch_ioport_pin_to_port_id>:
{
   14be0:	b580      	push	{r7, lr}
   14be2:	b082      	sub	sp, #8
   14be4:	af00      	add	r7, sp, #0
   14be6:	6078      	str	r0, [r7, #4]
	return pin >> 5;
   14be8:	687b      	ldr	r3, [r7, #4]
   14bea:	095b      	lsrs	r3, r3, #5
}
   14bec:	0018      	movs	r0, r3
   14bee:	46bd      	mov	sp, r7
   14bf0:	b002      	add	sp, #8
   14bf2:	bd80      	pop	{r7, pc}

00014bf4 <arch_ioport_port_to_base>:
{
   14bf4:	b580      	push	{r7, lr}
   14bf6:	b082      	sub	sp, #8
   14bf8:	af00      	add	r7, sp, #0
   14bfa:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
   14bfc:	687b      	ldr	r3, [r7, #4]
   14bfe:	01db      	lsls	r3, r3, #7
   14c00:	4a03      	ldr	r2, [pc, #12]	; (14c10 <arch_ioport_port_to_base+0x1c>)
   14c02:	4694      	mov	ip, r2
   14c04:	4463      	add	r3, ip
}
   14c06:	0018      	movs	r0, r3
   14c08:	46bd      	mov	sp, r7
   14c0a:	b002      	add	sp, #8
   14c0c:	bd80      	pop	{r7, pc}
   14c0e:	46c0      	nop			; (mov r8, r8)
   14c10:	40002800 	.word	0x40002800

00014c14 <arch_ioport_pin_to_base>:
{
   14c14:	b580      	push	{r7, lr}
   14c16:	b082      	sub	sp, #8
   14c18:	af00      	add	r7, sp, #0
   14c1a:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
   14c1c:	687b      	ldr	r3, [r7, #4]
   14c1e:	0018      	movs	r0, r3
   14c20:	4b05      	ldr	r3, [pc, #20]	; (14c38 <arch_ioport_pin_to_base+0x24>)
   14c22:	4798      	blx	r3
   14c24:	0003      	movs	r3, r0
   14c26:	0018      	movs	r0, r3
   14c28:	4b04      	ldr	r3, [pc, #16]	; (14c3c <arch_ioport_pin_to_base+0x28>)
   14c2a:	4798      	blx	r3
   14c2c:	0003      	movs	r3, r0
}
   14c2e:	0018      	movs	r0, r3
   14c30:	46bd      	mov	sp, r7
   14c32:	b002      	add	sp, #8
   14c34:	bd80      	pop	{r7, pc}
   14c36:	46c0      	nop			; (mov r8, r8)
   14c38:	00014be1 	.word	0x00014be1
   14c3c:	00014bf5 	.word	0x00014bf5

00014c40 <arch_ioport_pin_to_mask>:
{
   14c40:	b580      	push	{r7, lr}
   14c42:	b082      	sub	sp, #8
   14c44:	af00      	add	r7, sp, #0
   14c46:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
   14c48:	687b      	ldr	r3, [r7, #4]
   14c4a:	221f      	movs	r2, #31
   14c4c:	4013      	ands	r3, r2
   14c4e:	2201      	movs	r2, #1
   14c50:	409a      	lsls	r2, r3
   14c52:	0013      	movs	r3, r2
}
   14c54:	0018      	movs	r0, r3
   14c56:	46bd      	mov	sp, r7
   14c58:	b002      	add	sp, #8
   14c5a:	bd80      	pop	{r7, pc}

00014c5c <arch_ioport_set_pin_dir>:
{
   14c5c:	b580      	push	{r7, lr}
   14c5e:	b084      	sub	sp, #16
   14c60:	af00      	add	r7, sp, #0
   14c62:	6078      	str	r0, [r7, #4]
   14c64:	000a      	movs	r2, r1
   14c66:	1cfb      	adds	r3, r7, #3
   14c68:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
   14c6a:	687b      	ldr	r3, [r7, #4]
   14c6c:	0018      	movs	r0, r3
   14c6e:	4b18      	ldr	r3, [pc, #96]	; (14cd0 <arch_ioport_set_pin_dir+0x74>)
   14c70:	4798      	blx	r3
   14c72:	0003      	movs	r3, r0
   14c74:	60fb      	str	r3, [r7, #12]
	if (dir == IOPORT_DIR_OUTPUT) {
   14c76:	1cfb      	adds	r3, r7, #3
   14c78:	781b      	ldrb	r3, [r3, #0]
   14c7a:	2b01      	cmp	r3, #1
   14c7c:	d107      	bne.n	14c8e <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   14c7e:	687b      	ldr	r3, [r7, #4]
   14c80:	0018      	movs	r0, r3
   14c82:	4b14      	ldr	r3, [pc, #80]	; (14cd4 <arch_ioport_set_pin_dir+0x78>)
   14c84:	4798      	blx	r3
   14c86:	0002      	movs	r2, r0
   14c88:	68fb      	ldr	r3, [r7, #12]
   14c8a:	609a      	str	r2, [r3, #8]
   14c8c:	e00a      	b.n	14ca4 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
   14c8e:	1cfb      	adds	r3, r7, #3
   14c90:	781b      	ldrb	r3, [r3, #0]
   14c92:	2b00      	cmp	r3, #0
   14c94:	d106      	bne.n	14ca4 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   14c96:	687b      	ldr	r3, [r7, #4]
   14c98:	0018      	movs	r0, r3
   14c9a:	4b0e      	ldr	r3, [pc, #56]	; (14cd4 <arch_ioport_set_pin_dir+0x78>)
   14c9c:	4798      	blx	r3
   14c9e:	0002      	movs	r2, r0
   14ca0:	68fb      	ldr	r3, [r7, #12]
   14ca2:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
   14ca4:	68fa      	ldr	r2, [r7, #12]
   14ca6:	2140      	movs	r1, #64	; 0x40
   14ca8:	687b      	ldr	r3, [r7, #4]
   14caa:	18d3      	adds	r3, r2, r3
   14cac:	185b      	adds	r3, r3, r1
   14cae:	781b      	ldrb	r3, [r3, #0]
   14cb0:	b2db      	uxtb	r3, r3
   14cb2:	2202      	movs	r2, #2
   14cb4:	4313      	orrs	r3, r2
   14cb6:	b2d8      	uxtb	r0, r3
   14cb8:	68fa      	ldr	r2, [r7, #12]
   14cba:	2140      	movs	r1, #64	; 0x40
   14cbc:	687b      	ldr	r3, [r7, #4]
   14cbe:	18d3      	adds	r3, r2, r3
   14cc0:	185b      	adds	r3, r3, r1
   14cc2:	1c02      	adds	r2, r0, #0
   14cc4:	701a      	strb	r2, [r3, #0]
}
   14cc6:	46c0      	nop			; (mov r8, r8)
   14cc8:	46bd      	mov	sp, r7
   14cca:	b004      	add	sp, #16
   14ccc:	bd80      	pop	{r7, pc}
   14cce:	46c0      	nop			; (mov r8, r8)
   14cd0:	00014c15 	.word	0x00014c15
   14cd4:	00014c41 	.word	0x00014c41

00014cd8 <arch_ioport_set_pin_level>:
{
   14cd8:	b590      	push	{r4, r7, lr}
   14cda:	b083      	sub	sp, #12
   14cdc:	af00      	add	r7, sp, #0
   14cde:	6078      	str	r0, [r7, #4]
   14ce0:	000a      	movs	r2, r1
   14ce2:	1cfb      	adds	r3, r7, #3
   14ce4:	701a      	strb	r2, [r3, #0]
	if (level) {
   14ce6:	1cfb      	adds	r3, r7, #3
   14ce8:	781b      	ldrb	r3, [r3, #0]
   14cea:	2b00      	cmp	r3, #0
   14cec:	d00b      	beq.n	14d06 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   14cee:	687b      	ldr	r3, [r7, #4]
   14cf0:	0018      	movs	r0, r3
   14cf2:	4b0c      	ldr	r3, [pc, #48]	; (14d24 <arch_ioport_set_pin_level+0x4c>)
   14cf4:	4798      	blx	r3
   14cf6:	0004      	movs	r4, r0
   14cf8:	687b      	ldr	r3, [r7, #4]
   14cfa:	0018      	movs	r0, r3
   14cfc:	4b0a      	ldr	r3, [pc, #40]	; (14d28 <arch_ioport_set_pin_level+0x50>)
   14cfe:	4798      	blx	r3
   14d00:	0003      	movs	r3, r0
   14d02:	61a3      	str	r3, [r4, #24]
}
   14d04:	e00a      	b.n	14d1c <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   14d06:	687b      	ldr	r3, [r7, #4]
   14d08:	0018      	movs	r0, r3
   14d0a:	4b06      	ldr	r3, [pc, #24]	; (14d24 <arch_ioport_set_pin_level+0x4c>)
   14d0c:	4798      	blx	r3
   14d0e:	0004      	movs	r4, r0
   14d10:	687b      	ldr	r3, [r7, #4]
   14d12:	0018      	movs	r0, r3
   14d14:	4b04      	ldr	r3, [pc, #16]	; (14d28 <arch_ioport_set_pin_level+0x50>)
   14d16:	4798      	blx	r3
   14d18:	0003      	movs	r3, r0
   14d1a:	6163      	str	r3, [r4, #20]
}
   14d1c:	46c0      	nop			; (mov r8, r8)
   14d1e:	46bd      	mov	sp, r7
   14d20:	b003      	add	sp, #12
   14d22:	bd90      	pop	{r4, r7, pc}
   14d24:	00014c15 	.word	0x00014c15
   14d28:	00014c41 	.word	0x00014c41

00014d2c <ioport_set_pin_dir>:
{
   14d2c:	b580      	push	{r7, lr}
   14d2e:	b082      	sub	sp, #8
   14d30:	af00      	add	r7, sp, #0
   14d32:	6078      	str	r0, [r7, #4]
   14d34:	000a      	movs	r2, r1
   14d36:	1cfb      	adds	r3, r7, #3
   14d38:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
   14d3a:	1cfb      	adds	r3, r7, #3
   14d3c:	781a      	ldrb	r2, [r3, #0]
   14d3e:	687b      	ldr	r3, [r7, #4]
   14d40:	0011      	movs	r1, r2
   14d42:	0018      	movs	r0, r3
   14d44:	4b02      	ldr	r3, [pc, #8]	; (14d50 <ioport_set_pin_dir+0x24>)
   14d46:	4798      	blx	r3
}
   14d48:	46c0      	nop			; (mov r8, r8)
   14d4a:	46bd      	mov	sp, r7
   14d4c:	b002      	add	sp, #8
   14d4e:	bd80      	pop	{r7, pc}
   14d50:	00014c5d 	.word	0x00014c5d

00014d54 <ioport_set_pin_level>:
{
   14d54:	b580      	push	{r7, lr}
   14d56:	b082      	sub	sp, #8
   14d58:	af00      	add	r7, sp, #0
   14d5a:	6078      	str	r0, [r7, #4]
   14d5c:	000a      	movs	r2, r1
   14d5e:	1cfb      	adds	r3, r7, #3
   14d60:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
   14d62:	1cfb      	adds	r3, r7, #3
   14d64:	781a      	ldrb	r2, [r3, #0]
   14d66:	687b      	ldr	r3, [r7, #4]
   14d68:	0011      	movs	r1, r2
   14d6a:	0018      	movs	r0, r3
   14d6c:	4b02      	ldr	r3, [pc, #8]	; (14d78 <ioport_set_pin_level+0x24>)
   14d6e:	4798      	blx	r3
}
   14d70:	46c0      	nop			; (mov r8, r8)
   14d72:	46bd      	mov	sp, r7
   14d74:	b002      	add	sp, #8
   14d76:	bd80      	pop	{r7, pc}
   14d78:	00014cd9 	.word	0x00014cd9

00014d7c <spi_is_write_complete>:
{
   14d7c:	b580      	push	{r7, lr}
   14d7e:	b084      	sub	sp, #16
   14d80:	af00      	add	r7, sp, #0
   14d82:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14d84:	687b      	ldr	r3, [r7, #4]
   14d86:	681b      	ldr	r3, [r3, #0]
   14d88:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   14d8a:	68fb      	ldr	r3, [r7, #12]
   14d8c:	7e1b      	ldrb	r3, [r3, #24]
   14d8e:	b2db      	uxtb	r3, r3
   14d90:	001a      	movs	r2, r3
   14d92:	2302      	movs	r3, #2
   14d94:	4013      	ands	r3, r2
   14d96:	1e5a      	subs	r2, r3, #1
   14d98:	4193      	sbcs	r3, r2
   14d9a:	b2db      	uxtb	r3, r3
}
   14d9c:	0018      	movs	r0, r3
   14d9e:	46bd      	mov	sp, r7
   14da0:	b004      	add	sp, #16
   14da2:	bd80      	pop	{r7, pc}

00014da4 <spi_is_ready_to_write>:
{
   14da4:	b580      	push	{r7, lr}
   14da6:	b084      	sub	sp, #16
   14da8:	af00      	add	r7, sp, #0
   14daa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14dac:	687b      	ldr	r3, [r7, #4]
   14dae:	681b      	ldr	r3, [r3, #0]
   14db0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   14db2:	68fb      	ldr	r3, [r7, #12]
   14db4:	7e1b      	ldrb	r3, [r3, #24]
   14db6:	b2db      	uxtb	r3, r3
   14db8:	001a      	movs	r2, r3
   14dba:	2301      	movs	r3, #1
   14dbc:	4013      	ands	r3, r2
   14dbe:	1e5a      	subs	r2, r3, #1
   14dc0:	4193      	sbcs	r3, r2
   14dc2:	b2db      	uxtb	r3, r3
}
   14dc4:	0018      	movs	r0, r3
   14dc6:	46bd      	mov	sp, r7
   14dc8:	b004      	add	sp, #16
   14dca:	bd80      	pop	{r7, pc}

00014dcc <spi_write>:
{
   14dcc:	b580      	push	{r7, lr}
   14dce:	b084      	sub	sp, #16
   14dd0:	af00      	add	r7, sp, #0
   14dd2:	6078      	str	r0, [r7, #4]
   14dd4:	000a      	movs	r2, r1
   14dd6:	1cbb      	adds	r3, r7, #2
   14dd8:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14dda:	687b      	ldr	r3, [r7, #4]
   14ddc:	681b      	ldr	r3, [r3, #0]
   14dde:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   14de0:	687b      	ldr	r3, [r7, #4]
   14de2:	0018      	movs	r0, r3
   14de4:	4b0a      	ldr	r3, [pc, #40]	; (14e10 <spi_write+0x44>)
   14de6:	4798      	blx	r3
   14de8:	0003      	movs	r3, r0
   14dea:	001a      	movs	r2, r3
   14dec:	2301      	movs	r3, #1
   14dee:	4053      	eors	r3, r2
   14df0:	b2db      	uxtb	r3, r3
   14df2:	2b00      	cmp	r3, #0
   14df4:	d001      	beq.n	14dfa <spi_write+0x2e>
		return STATUS_BUSY;
   14df6:	2305      	movs	r3, #5
   14df8:	e006      	b.n	14e08 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   14dfa:	1cbb      	adds	r3, r7, #2
   14dfc:	881b      	ldrh	r3, [r3, #0]
   14dfe:	05db      	lsls	r3, r3, #23
   14e00:	0dda      	lsrs	r2, r3, #23
   14e02:	68fb      	ldr	r3, [r7, #12]
   14e04:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   14e06:	2300      	movs	r3, #0
}
   14e08:	0018      	movs	r0, r3
   14e0a:	46bd      	mov	sp, r7
   14e0c:	b004      	add	sp, #16
   14e0e:	bd80      	pop	{r7, pc}
   14e10:	00014da5 	.word	0x00014da5

00014e14 <glcd_init>:
//void delay_ms(uint32_t ms);

//#define BACKLIGHT_INVERT	// Uncomment if LED backlight turn on with low value

void glcd_init(void)
{
   14e14:	b580      	push	{r7, lr}
   14e16:	af00      	add	r7, sp, #0


	ioport_set_pin_dir(CONTROLLER_SPI_SS_PIN, IOPORT_DIR_OUTPUT);
   14e18:	2101      	movs	r1, #1
   14e1a:	2017      	movs	r0, #23
   14e1c:	4b0e      	ldr	r3, [pc, #56]	; (14e58 <glcd_init+0x44>)
   14e1e:	4798      	blx	r3
	ioport_set_pin_dir(CONTROLLER_SPI_DC_PIN, IOPORT_DIR_OUTPUT);
   14e20:	2101      	movs	r1, #1
   14e22:	201b      	movs	r0, #27
   14e24:	4b0c      	ldr	r3, [pc, #48]	; (14e58 <glcd_init+0x44>)
   14e26:	4798      	blx	r3
	ioport_set_pin_dir(CONTROLLER_SPI_RST_PIN, IOPORT_DIR_OUTPUT);
   14e28:	2101      	movs	r1, #1
   14e2a:	2037      	movs	r0, #55	; 0x37
   14e2c:	4b0a      	ldr	r3, [pc, #40]	; (14e58 <glcd_init+0x44>)
   14e2e:	4798      	blx	r3

	
	GLCD_DESELECT();
   14e30:	2101      	movs	r1, #1
   14e32:	2017      	movs	r0, #23
   14e34:	4b09      	ldr	r3, [pc, #36]	; (14e5c <glcd_init+0x48>)
   14e36:	4798      	blx	r3
	

	glcd_select_screen((uint8_t *)&glcd_buffer,&glcd_bbox);
   14e38:	4a09      	ldr	r2, [pc, #36]	; (14e60 <glcd_init+0x4c>)
   14e3a:	4b0a      	ldr	r3, [pc, #40]	; (14e64 <glcd_init+0x50>)
   14e3c:	0011      	movs	r1, r2
   14e3e:	0018      	movs	r0, r3
   14e40:	4b09      	ldr	r3, [pc, #36]	; (14e68 <glcd_init+0x54>)
   14e42:	4798      	blx	r3

	glcd_reset();
   14e44:	4b09      	ldr	r3, [pc, #36]	; (14e6c <glcd_init+0x58>)
   14e46:	4798      	blx	r3
	glcd_reset();
   14e48:	4b08      	ldr	r3, [pc, #32]	; (14e6c <glcd_init+0x58>)
   14e4a:	4798      	blx	r3
	glcd_ST7565R_init();
   14e4c:	4b08      	ldr	r3, [pc, #32]	; (14e70 <glcd_init+0x5c>)
   14e4e:	4798      	blx	r3


}
   14e50:	46c0      	nop			; (mov r8, r8)
   14e52:	46bd      	mov	sp, r7
   14e54:	bd80      	pop	{r7, pc}
   14e56:	46c0      	nop			; (mov r8, r8)
   14e58:	00014d2d 	.word	0x00014d2d
   14e5c:	00014d55 	.word	0x00014d55
   14e60:	20001808 	.word	0x20001808
   14e64:	2000180c 	.word	0x2000180c
   14e68:	00015059 	.word	0x00015059
   14e6c:	00014eed 	.word	0x00014eed
   14e70:	00015931 	.word	0x00015931

00014e74 <glcd_spi_write>:



void glcd_spi_write(uint8_t c)
{
   14e74:	b580      	push	{r7, lr}
   14e76:	b082      	sub	sp, #8
   14e78:	af00      	add	r7, sp, #0
   14e7a:	0002      	movs	r2, r0
   14e7c:	1dfb      	adds	r3, r7, #7
   14e7e:	701a      	strb	r2, [r3, #0]
	//uint8_t temp;

	GLCD_SELECT();
   14e80:	2100      	movs	r1, #0
   14e82:	2017      	movs	r0, #23
   14e84:	4b14      	ldr	r3, [pc, #80]	; (14ed8 <glcd_spi_write+0x64>)
   14e86:	4798      	blx	r3
	/*!< Loop while DR register in not empty */
	//while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
	while(spi_is_ready_to_write(&spi_main)==false);
   14e88:	46c0      	nop			; (mov r8, r8)
   14e8a:	4b14      	ldr	r3, [pc, #80]	; (14edc <glcd_spi_write+0x68>)
   14e8c:	0018      	movs	r0, r3
   14e8e:	4b14      	ldr	r3, [pc, #80]	; (14ee0 <glcd_spi_write+0x6c>)
   14e90:	4798      	blx	r3
   14e92:	0003      	movs	r3, r0
   14e94:	001a      	movs	r2, r3
   14e96:	2301      	movs	r3, #1
   14e98:	4053      	eors	r3, r2
   14e9a:	b2db      	uxtb	r3, r3
   14e9c:	2b00      	cmp	r3, #0
   14e9e:	d1f4      	bne.n	14e8a <glcd_spi_write+0x16>
	
	
	//SPI_I2S_SendData(SPIx, (uint16_t) c);
	spi_write(&spi_main, c);
   14ea0:	1dfb      	adds	r3, r7, #7
   14ea2:	781b      	ldrb	r3, [r3, #0]
   14ea4:	b29a      	uxth	r2, r3
   14ea6:	4b0d      	ldr	r3, [pc, #52]	; (14edc <glcd_spi_write+0x68>)
   14ea8:	0011      	movs	r1, r2
   14eaa:	0018      	movs	r0, r3
   14eac:	4b0d      	ldr	r3, [pc, #52]	; (14ee4 <glcd_spi_write+0x70>)
   14eae:	4798      	blx	r3
	
	/* Wait until entire byte has been read (which we discard anyway) */
	//while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) != RESET);
	while(spi_is_write_complete(&spi_main)==false);
   14eb0:	46c0      	nop			; (mov r8, r8)
   14eb2:	4b0a      	ldr	r3, [pc, #40]	; (14edc <glcd_spi_write+0x68>)
   14eb4:	0018      	movs	r0, r3
   14eb6:	4b0c      	ldr	r3, [pc, #48]	; (14ee8 <glcd_spi_write+0x74>)
   14eb8:	4798      	blx	r3
   14eba:	0003      	movs	r3, r0
   14ebc:	001a      	movs	r2, r3
   14ebe:	2301      	movs	r3, #1
   14ec0:	4053      	eors	r3, r2
   14ec2:	b2db      	uxtb	r3, r3
   14ec4:	2b00      	cmp	r3, #0
   14ec6:	d1f4      	bne.n	14eb2 <glcd_spi_write+0x3e>

	//temp = SPI_I2S_ReceiveData(SPIx);

	GLCD_DESELECT();
   14ec8:	2101      	movs	r1, #1
   14eca:	2017      	movs	r0, #23
   14ecc:	4b02      	ldr	r3, [pc, #8]	; (14ed8 <glcd_spi_write+0x64>)
   14ece:	4798      	blx	r3
}
   14ed0:	46c0      	nop			; (mov r8, r8)
   14ed2:	46bd      	mov	sp, r7
   14ed4:	b002      	add	sp, #8
   14ed6:	bd80      	pop	{r7, pc}
   14ed8:	00014d55 	.word	0x00014d55
   14edc:	20001270 	.word	0x20001270
   14ee0:	00014da5 	.word	0x00014da5
   14ee4:	00014dcd 	.word	0x00014dcd
   14ee8:	00014d7d 	.word	0x00014d7d

00014eec <glcd_reset>:

void glcd_reset(void)
{
   14eec:	b580      	push	{r7, lr}
   14eee:	af00      	add	r7, sp, #0
	/* Toggle RST low to reset. Minimum pulse 100ns on data sheet. */
	GLCD_SELECT();
   14ef0:	2100      	movs	r1, #0
   14ef2:	2017      	movs	r0, #23
   14ef4:	4b09      	ldr	r3, [pc, #36]	; (14f1c <glcd_reset+0x30>)
   14ef6:	4798      	blx	r3
	GLCD_RESET_LOW();
   14ef8:	2100      	movs	r1, #0
   14efa:	2037      	movs	r0, #55	; 0x37
   14efc:	4b07      	ldr	r3, [pc, #28]	; (14f1c <glcd_reset+0x30>)
   14efe:	4798      	blx	r3


	delay_ms(GLCD_RESET_TIME);
   14f00:	2001      	movs	r0, #1
   14f02:	4b07      	ldr	r3, [pc, #28]	; (14f20 <glcd_reset+0x34>)
   14f04:	4798      	blx	r3
	//DelayTask(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
   14f06:	2101      	movs	r1, #1
   14f08:	2037      	movs	r0, #55	; 0x37
   14f0a:	4b04      	ldr	r3, [pc, #16]	; (14f1c <glcd_reset+0x30>)
   14f0c:	4798      	blx	r3
	GLCD_DESELECT();
   14f0e:	2101      	movs	r1, #1
   14f10:	2017      	movs	r0, #23
   14f12:	4b02      	ldr	r3, [pc, #8]	; (14f1c <glcd_reset+0x30>)
   14f14:	4798      	blx	r3
}
   14f16:	46c0      	nop			; (mov r8, r8)
   14f18:	46bd      	mov	sp, r7
   14f1a:	bd80      	pop	{r7, pc}
   14f1c:	00014d55 	.word	0x00014d55
   14f20:	000181b5 	.word	0x000181b5

00014f24 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
   14f24:	b5b0      	push	{r4, r5, r7, lr}
   14f26:	b082      	sub	sp, #8
   14f28:	af00      	add	r7, sp, #0
   14f2a:	0005      	movs	r5, r0
   14f2c:	000c      	movs	r4, r1
   14f2e:	0010      	movs	r0, r2
   14f30:	0019      	movs	r1, r3
   14f32:	1dfb      	adds	r3, r7, #7
   14f34:	1c2a      	adds	r2, r5, #0
   14f36:	701a      	strb	r2, [r3, #0]
   14f38:	1dbb      	adds	r3, r7, #6
   14f3a:	1c22      	adds	r2, r4, #0
   14f3c:	701a      	strb	r2, [r3, #0]
   14f3e:	1d7b      	adds	r3, r7, #5
   14f40:	1c02      	adds	r2, r0, #0
   14f42:	701a      	strb	r2, [r3, #0]
   14f44:	1d3b      	adds	r3, r7, #4
   14f46:	1c0a      	adds	r2, r1, #0
   14f48:	701a      	strb	r2, [r3, #0]
	/* Keep and check bounding box within limits of LCD screen dimensions */
	if (xmin > (GLCD_LCD_WIDTH-1)) {
   14f4a:	1dfb      	adds	r3, r7, #7
   14f4c:	781b      	ldrb	r3, [r3, #0]
   14f4e:	b25b      	sxtb	r3, r3
   14f50:	2b00      	cmp	r3, #0
   14f52:	da02      	bge.n	14f5a <glcd_update_bbox+0x36>
		xmin = GLCD_LCD_WIDTH-1;
   14f54:	1dfb      	adds	r3, r7, #7
   14f56:	227f      	movs	r2, #127	; 0x7f
   14f58:	701a      	strb	r2, [r3, #0]
	}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   14f5a:	1d7b      	adds	r3, r7, #5
   14f5c:	781b      	ldrb	r3, [r3, #0]
   14f5e:	b25b      	sxtb	r3, r3
   14f60:	2b00      	cmp	r3, #0
   14f62:	da02      	bge.n	14f6a <glcd_update_bbox+0x46>
		xmax = GLCD_LCD_WIDTH-1;
   14f64:	1d7b      	adds	r3, r7, #5
   14f66:	227f      	movs	r2, #127	; 0x7f
   14f68:	701a      	strb	r2, [r3, #0]
	}

	if (ymin > (GLCD_LCD_HEIGHT-1)) {
   14f6a:	1dbb      	adds	r3, r7, #6
   14f6c:	781b      	ldrb	r3, [r3, #0]
   14f6e:	2b3f      	cmp	r3, #63	; 0x3f
   14f70:	d902      	bls.n	14f78 <glcd_update_bbox+0x54>
		ymin = GLCD_LCD_HEIGHT-1;
   14f72:	1dbb      	adds	r3, r7, #6
   14f74:	223f      	movs	r2, #63	; 0x3f
   14f76:	701a      	strb	r2, [r3, #0]
	}
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
   14f78:	1d3b      	adds	r3, r7, #4
   14f7a:	781b      	ldrb	r3, [r3, #0]
   14f7c:	2b3f      	cmp	r3, #63	; 0x3f
   14f7e:	d902      	bls.n	14f86 <glcd_update_bbox+0x62>
		ymax = GLCD_LCD_HEIGHT-1;
   14f80:	1d3b      	adds	r3, r7, #4
   14f82:	223f      	movs	r2, #63	; 0x3f
   14f84:	701a      	strb	r2, [r3, #0]
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
   14f86:	4b1a      	ldr	r3, [pc, #104]	; (14ff0 <glcd_update_bbox+0xcc>)
   14f88:	681b      	ldr	r3, [r3, #0]
   14f8a:	781b      	ldrb	r3, [r3, #0]
   14f8c:	1dfa      	adds	r2, r7, #7
   14f8e:	7812      	ldrb	r2, [r2, #0]
   14f90:	429a      	cmp	r2, r3
   14f92:	d204      	bcs.n	14f9e <glcd_update_bbox+0x7a>
		glcd_bbox_selected->x_min = xmin;
   14f94:	4b16      	ldr	r3, [pc, #88]	; (14ff0 <glcd_update_bbox+0xcc>)
   14f96:	681b      	ldr	r3, [r3, #0]
   14f98:	1dfa      	adds	r2, r7, #7
   14f9a:	7812      	ldrb	r2, [r2, #0]
   14f9c:	701a      	strb	r2, [r3, #0]
	}		
	if (xmax > glcd_bbox_selected->x_max) {
   14f9e:	4b14      	ldr	r3, [pc, #80]	; (14ff0 <glcd_update_bbox+0xcc>)
   14fa0:	681b      	ldr	r3, [r3, #0]
   14fa2:	789b      	ldrb	r3, [r3, #2]
   14fa4:	1d7a      	adds	r2, r7, #5
   14fa6:	7812      	ldrb	r2, [r2, #0]
   14fa8:	429a      	cmp	r2, r3
   14faa:	d904      	bls.n	14fb6 <glcd_update_bbox+0x92>
		glcd_bbox_selected->x_max = xmax;
   14fac:	4b10      	ldr	r3, [pc, #64]	; (14ff0 <glcd_update_bbox+0xcc>)
   14fae:	681b      	ldr	r3, [r3, #0]
   14fb0:	1d7a      	adds	r2, r7, #5
   14fb2:	7812      	ldrb	r2, [r2, #0]
   14fb4:	709a      	strb	r2, [r3, #2]
	}
	if (ymin < glcd_bbox_selected->y_min) {
   14fb6:	4b0e      	ldr	r3, [pc, #56]	; (14ff0 <glcd_update_bbox+0xcc>)
   14fb8:	681b      	ldr	r3, [r3, #0]
   14fba:	785b      	ldrb	r3, [r3, #1]
   14fbc:	1dba      	adds	r2, r7, #6
   14fbe:	7812      	ldrb	r2, [r2, #0]
   14fc0:	429a      	cmp	r2, r3
   14fc2:	d204      	bcs.n	14fce <glcd_update_bbox+0xaa>
		glcd_bbox_selected->y_min = ymin;
   14fc4:	4b0a      	ldr	r3, [pc, #40]	; (14ff0 <glcd_update_bbox+0xcc>)
   14fc6:	681b      	ldr	r3, [r3, #0]
   14fc8:	1dba      	adds	r2, r7, #6
   14fca:	7812      	ldrb	r2, [r2, #0]
   14fcc:	705a      	strb	r2, [r3, #1]
	}		
	if (ymax > glcd_bbox_selected->y_max) {
   14fce:	4b08      	ldr	r3, [pc, #32]	; (14ff0 <glcd_update_bbox+0xcc>)
   14fd0:	681b      	ldr	r3, [r3, #0]
   14fd2:	78db      	ldrb	r3, [r3, #3]
   14fd4:	1d3a      	adds	r2, r7, #4
   14fd6:	7812      	ldrb	r2, [r2, #0]
   14fd8:	429a      	cmp	r2, r3
   14fda:	d904      	bls.n	14fe6 <glcd_update_bbox+0xc2>
		glcd_bbox_selected->y_max = ymax;
   14fdc:	4b04      	ldr	r3, [pc, #16]	; (14ff0 <glcd_update_bbox+0xcc>)
   14fde:	681b      	ldr	r3, [r3, #0]
   14fe0:	1d3a      	adds	r2, r7, #4
   14fe2:	7812      	ldrb	r2, [r2, #0]
   14fe4:	70da      	strb	r2, [r3, #3]
	}			
}
   14fe6:	46c0      	nop			; (mov r8, r8)
   14fe8:	46bd      	mov	sp, r7
   14fea:	b002      	add	sp, #8
   14fec:	bdb0      	pop	{r4, r5, r7, pc}
   14fee:	46c0      	nop			; (mov r8, r8)
   14ff0:	20001c10 	.word	0x20001c10

00014ff4 <glcd_reset_bbox>:

void glcd_reset_bbox()
{
   14ff4:	b580      	push	{r7, lr}
   14ff6:	af00      	add	r7, sp, #0
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
   14ff8:	4b09      	ldr	r3, [pc, #36]	; (15020 <glcd_reset_bbox+0x2c>)
   14ffa:	681b      	ldr	r3, [r3, #0]
   14ffc:	227f      	movs	r2, #127	; 0x7f
   14ffe:	701a      	strb	r2, [r3, #0]
	glcd_bbox_selected->x_max = 0;
   15000:	4b07      	ldr	r3, [pc, #28]	; (15020 <glcd_reset_bbox+0x2c>)
   15002:	681b      	ldr	r3, [r3, #0]
   15004:	2200      	movs	r2, #0
   15006:	709a      	strb	r2, [r3, #2]
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
   15008:	4b05      	ldr	r3, [pc, #20]	; (15020 <glcd_reset_bbox+0x2c>)
   1500a:	681b      	ldr	r3, [r3, #0]
   1500c:	223f      	movs	r2, #63	; 0x3f
   1500e:	705a      	strb	r2, [r3, #1]
	glcd_bbox_selected->y_max = 0;	
   15010:	4b03      	ldr	r3, [pc, #12]	; (15020 <glcd_reset_bbox+0x2c>)
   15012:	681b      	ldr	r3, [r3, #0]
   15014:	2200      	movs	r2, #0
   15016:	70da      	strb	r2, [r3, #3]
}
   15018:	46c0      	nop			; (mov r8, r8)
   1501a:	46bd      	mov	sp, r7
   1501c:	bd80      	pop	{r7, pc}
   1501e:	46c0      	nop			; (mov r8, r8)
   15020:	20001c10 	.word	0x20001c10

00015024 <glcd_clear_buffer>:
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
   15024:	b5b0      	push	{r4, r5, r7, lr}
   15026:	af00      	add	r7, sp, #0
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
   15028:	4b08      	ldr	r3, [pc, #32]	; (1504c <glcd_clear_buffer+0x28>)
   1502a:	6818      	ldr	r0, [r3, #0]
   1502c:	2380      	movs	r3, #128	; 0x80
   1502e:	00db      	lsls	r3, r3, #3
   15030:	001a      	movs	r2, r3
   15032:	2100      	movs	r1, #0
   15034:	4b06      	ldr	r3, [pc, #24]	; (15050 <glcd_clear_buffer+0x2c>)
   15036:	4798      	blx	r3
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
   15038:	233f      	movs	r3, #63	; 0x3f
   1503a:	227f      	movs	r2, #127	; 0x7f
   1503c:	2100      	movs	r1, #0
   1503e:	2000      	movs	r0, #0
   15040:	4c04      	ldr	r4, [pc, #16]	; (15054 <glcd_clear_buffer+0x30>)
   15042:	47a0      	blx	r4
}
   15044:	46c0      	nop			; (mov r8, r8)
   15046:	46bd      	mov	sp, r7
   15048:	bdb0      	pop	{r4, r5, r7, pc}
   1504a:	46c0      	nop			; (mov r8, r8)
   1504c:	20001c0c 	.word	0x20001c0c
   15050:	00023c9d 	.word	0x00023c9d
   15054:	00014f25 	.word	0x00014f25

00015058 <glcd_select_screen>:

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
   15058:	b580      	push	{r7, lr}
   1505a:	b082      	sub	sp, #8
   1505c:	af00      	add	r7, sp, #0
   1505e:	6078      	str	r0, [r7, #4]
   15060:	6039      	str	r1, [r7, #0]
	glcd_buffer_selected = buffer;
   15062:	4b05      	ldr	r3, [pc, #20]	; (15078 <glcd_select_screen+0x20>)
   15064:	687a      	ldr	r2, [r7, #4]
   15066:	601a      	str	r2, [r3, #0]
	glcd_bbox_selected = bbox;
   15068:	4b04      	ldr	r3, [pc, #16]	; (1507c <glcd_select_screen+0x24>)
   1506a:	683a      	ldr	r2, [r7, #0]
   1506c:	601a      	str	r2, [r3, #0]
}
   1506e:	46c0      	nop			; (mov r8, r8)
   15070:	46bd      	mov	sp, r7
   15072:	b002      	add	sp, #8
   15074:	bd80      	pop	{r7, pc}
   15076:	46c0      	nop			; (mov r8, r8)
   15078:	20001c0c 	.word	0x20001c0c
   1507c:	20001c10 	.word	0x20001c10

00015080 <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
   15080:	b590      	push	{r4, r7, lr}
   15082:	b083      	sub	sp, #12
   15084:	af00      	add	r7, sp, #0
   15086:	0004      	movs	r4, r0
   15088:	0008      	movs	r0, r1
   1508a:	0011      	movs	r1, r2
   1508c:	1dfb      	adds	r3, r7, #7
   1508e:	1c22      	adds	r2, r4, #0
   15090:	701a      	strb	r2, [r3, #0]
   15092:	1dbb      	adds	r3, r7, #6
   15094:	1c02      	adds	r2, r0, #0
   15096:	701a      	strb	r2, [r3, #0]
   15098:	1d7b      	adds	r3, r7, #5
   1509a:	1c0a      	adds	r2, r1, #0
   1509c:	701a      	strb	r2, [r3, #0]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1509e:	1dfb      	adds	r3, r7, #7
   150a0:	781b      	ldrb	r3, [r3, #0]
   150a2:	b25b      	sxtb	r3, r3
   150a4:	2b00      	cmp	r3, #0
   150a6:	db52      	blt.n	1514e <glcd_set_pixel+0xce>
   150a8:	1dbb      	adds	r3, r7, #6
   150aa:	781b      	ldrb	r3, [r3, #0]
   150ac:	2b3f      	cmp	r3, #63	; 0x3f
   150ae:	d84e      	bhi.n	1514e <glcd_set_pixel+0xce>
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
   150b0:	1d7b      	adds	r3, r7, #5
   150b2:	781b      	ldrb	r3, [r3, #0]
   150b4:	2b00      	cmp	r3, #0
   150b6:	d01e      	beq.n	150f6 <glcd_set_pixel+0x76>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   150b8:	1dfb      	adds	r3, r7, #7
   150ba:	781a      	ldrb	r2, [r3, #0]
   150bc:	1dbb      	adds	r3, r7, #6
   150be:	781b      	ldrb	r3, [r3, #0]
   150c0:	08db      	lsrs	r3, r3, #3
   150c2:	b2d8      	uxtb	r0, r3
   150c4:	0003      	movs	r3, r0
   150c6:	01db      	lsls	r3, r3, #7
   150c8:	18d3      	adds	r3, r2, r3
   150ca:	1dfa      	adds	r2, r7, #7
   150cc:	7811      	ldrb	r1, [r2, #0]
   150ce:	0002      	movs	r2, r0
   150d0:	01d2      	lsls	r2, r2, #7
   150d2:	188a      	adds	r2, r1, r2
   150d4:	4920      	ldr	r1, [pc, #128]	; (15158 <glcd_set_pixel+0xd8>)
   150d6:	5c8a      	ldrb	r2, [r1, r2]
   150d8:	b251      	sxtb	r1, r2
   150da:	1dba      	adds	r2, r7, #6
   150dc:	7812      	ldrb	r2, [r2, #0]
   150de:	2007      	movs	r0, #7
   150e0:	4002      	ands	r2, r0
   150e2:	2001      	movs	r0, #1
   150e4:	4090      	lsls	r0, r2
   150e6:	0002      	movs	r2, r0
   150e8:	b252      	sxtb	r2, r2
   150ea:	430a      	orrs	r2, r1
   150ec:	b252      	sxtb	r2, r2
   150ee:	b2d1      	uxtb	r1, r2
   150f0:	4a19      	ldr	r2, [pc, #100]	; (15158 <glcd_set_pixel+0xd8>)
   150f2:	54d1      	strb	r1, [r2, r3]
   150f4:	e01f      	b.n	15136 <glcd_set_pixel+0xb6>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   150f6:	1dfb      	adds	r3, r7, #7
   150f8:	781a      	ldrb	r2, [r3, #0]
   150fa:	1dbb      	adds	r3, r7, #6
   150fc:	781b      	ldrb	r3, [r3, #0]
   150fe:	08db      	lsrs	r3, r3, #3
   15100:	b2d8      	uxtb	r0, r3
   15102:	0003      	movs	r3, r0
   15104:	01db      	lsls	r3, r3, #7
   15106:	18d3      	adds	r3, r2, r3
   15108:	1dfa      	adds	r2, r7, #7
   1510a:	7811      	ldrb	r1, [r2, #0]
   1510c:	0002      	movs	r2, r0
   1510e:	01d2      	lsls	r2, r2, #7
   15110:	188a      	adds	r2, r1, r2
   15112:	4911      	ldr	r1, [pc, #68]	; (15158 <glcd_set_pixel+0xd8>)
   15114:	5c8a      	ldrb	r2, [r1, r2]
   15116:	b252      	sxtb	r2, r2
   15118:	1db9      	adds	r1, r7, #6
   1511a:	7809      	ldrb	r1, [r1, #0]
   1511c:	2007      	movs	r0, #7
   1511e:	4001      	ands	r1, r0
   15120:	2001      	movs	r0, #1
   15122:	4088      	lsls	r0, r1
   15124:	0001      	movs	r1, r0
   15126:	b249      	sxtb	r1, r1
   15128:	43c9      	mvns	r1, r1
   1512a:	b249      	sxtb	r1, r1
   1512c:	400a      	ands	r2, r1
   1512e:	b252      	sxtb	r2, r2
   15130:	b2d1      	uxtb	r1, r2
   15132:	4a09      	ldr	r2, [pc, #36]	; (15158 <glcd_set_pixel+0xd8>)
   15134:	54d1      	strb	r1, [r2, r3]
	}

	glcd_update_bbox(x,y,x,y);
   15136:	1dbb      	adds	r3, r7, #6
   15138:	781c      	ldrb	r4, [r3, #0]
   1513a:	1dfb      	adds	r3, r7, #7
   1513c:	781a      	ldrb	r2, [r3, #0]
   1513e:	1dbb      	adds	r3, r7, #6
   15140:	7819      	ldrb	r1, [r3, #0]
   15142:	1dfb      	adds	r3, r7, #7
   15144:	7818      	ldrb	r0, [r3, #0]
   15146:	0023      	movs	r3, r4
   15148:	4c04      	ldr	r4, [pc, #16]	; (1515c <glcd_set_pixel+0xdc>)
   1514a:	47a0      	blx	r4
   1514c:	e000      	b.n	15150 <glcd_set_pixel+0xd0>
		return;
   1514e:	46c0      	nop			; (mov r8, r8)
}
   15150:	46bd      	mov	sp, r7
   15152:	b003      	add	sp, #12
   15154:	bd90      	pop	{r4, r7, pc}
   15156:	46c0      	nop			; (mov r8, r8)
   15158:	2000180c 	.word	0x2000180c
   1515c:	00014f25 	.word	0x00014f25

00015160 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
   15160:	b5b0      	push	{r4, r5, r7, lr}
   15162:	b086      	sub	sp, #24
   15164:	af00      	add	r7, sp, #0
   15166:	0005      	movs	r5, r0
   15168:	000c      	movs	r4, r1
   1516a:	0010      	movs	r0, r2
   1516c:	0019      	movs	r1, r3
   1516e:	1dfb      	adds	r3, r7, #7
   15170:	1c2a      	adds	r2, r5, #0
   15172:	701a      	strb	r2, [r3, #0]
   15174:	1dbb      	adds	r3, r7, #6
   15176:	1c22      	adds	r2, r4, #0
   15178:	701a      	strb	r2, [r3, #0]
   1517a:	1d7b      	adds	r3, r7, #5
   1517c:	1c02      	adds	r2, r0, #0
   1517e:	701a      	strb	r2, [r3, #0]
   15180:	1d3b      	adds	r3, r7, #4
   15182:	1c0a      	adds	r2, r1, #0
   15184:	701a      	strb	r2, [r3, #0]
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
   15186:	1d3b      	adds	r3, r7, #4
   15188:	781a      	ldrb	r2, [r3, #0]
   1518a:	1dbb      	adds	r3, r7, #6
   1518c:	781b      	ldrb	r3, [r3, #0]
   1518e:	1ad3      	subs	r3, r2, r3
   15190:	17d9      	asrs	r1, r3, #31
   15192:	185a      	adds	r2, r3, r1
   15194:	404a      	eors	r2, r1
   15196:	1d7b      	adds	r3, r7, #5
   15198:	7819      	ldrb	r1, [r3, #0]
   1519a:	1dfb      	adds	r3, r7, #7
   1519c:	781b      	ldrb	r3, [r3, #0]
   1519e:	1acb      	subs	r3, r1, r3
   151a0:	17d9      	asrs	r1, r3, #31
   151a2:	185b      	adds	r3, r3, r1
   151a4:	404b      	eors	r3, r1
   151a6:	2101      	movs	r1, #1
   151a8:	429a      	cmp	r2, r3
   151aa:	dc01      	bgt.n	151b0 <glcd_draw_line+0x50>
   151ac:	2300      	movs	r3, #0
   151ae:	1c19      	adds	r1, r3, #0
   151b0:	b2ca      	uxtb	r2, r1
   151b2:	2315      	movs	r3, #21
   151b4:	18fb      	adds	r3, r7, r3
   151b6:	701a      	strb	r2, [r3, #0]
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
   151b8:	2315      	movs	r3, #21
   151ba:	18fb      	adds	r3, r7, r3
   151bc:	781b      	ldrb	r3, [r3, #0]
   151be:	2b00      	cmp	r3, #0
   151c0:	d01b      	beq.n	151fa <glcd_draw_line+0x9a>
		swap(x0, y0);
   151c2:	2314      	movs	r3, #20
   151c4:	18fb      	adds	r3, r7, r3
   151c6:	1dfa      	adds	r2, r7, #7
   151c8:	7812      	ldrb	r2, [r2, #0]
   151ca:	701a      	strb	r2, [r3, #0]
   151cc:	1dfb      	adds	r3, r7, #7
   151ce:	1dba      	adds	r2, r7, #6
   151d0:	7812      	ldrb	r2, [r2, #0]
   151d2:	701a      	strb	r2, [r3, #0]
   151d4:	1dbb      	adds	r3, r7, #6
   151d6:	2214      	movs	r2, #20
   151d8:	18ba      	adds	r2, r7, r2
   151da:	7812      	ldrb	r2, [r2, #0]
   151dc:	701a      	strb	r2, [r3, #0]
		swap(x1, y1);
   151de:	2313      	movs	r3, #19
   151e0:	18fb      	adds	r3, r7, r3
   151e2:	1d7a      	adds	r2, r7, #5
   151e4:	7812      	ldrb	r2, [r2, #0]
   151e6:	701a      	strb	r2, [r3, #0]
   151e8:	1d7b      	adds	r3, r7, #5
   151ea:	1d3a      	adds	r2, r7, #4
   151ec:	7812      	ldrb	r2, [r2, #0]
   151ee:	701a      	strb	r2, [r3, #0]
   151f0:	1d3b      	adds	r3, r7, #4
   151f2:	2213      	movs	r2, #19
   151f4:	18ba      	adds	r2, r7, r2
   151f6:	7812      	ldrb	r2, [r2, #0]
   151f8:	701a      	strb	r2, [r3, #0]
	}
	
	if (x0 > x1) {
   151fa:	1dfa      	adds	r2, r7, #7
   151fc:	1d7b      	adds	r3, r7, #5
   151fe:	7812      	ldrb	r2, [r2, #0]
   15200:	781b      	ldrb	r3, [r3, #0]
   15202:	429a      	cmp	r2, r3
   15204:	d91b      	bls.n	1523e <glcd_draw_line+0xde>
		swap(x0, x1);
   15206:	2312      	movs	r3, #18
   15208:	18fb      	adds	r3, r7, r3
   1520a:	1dfa      	adds	r2, r7, #7
   1520c:	7812      	ldrb	r2, [r2, #0]
   1520e:	701a      	strb	r2, [r3, #0]
   15210:	1dfb      	adds	r3, r7, #7
   15212:	1d7a      	adds	r2, r7, #5
   15214:	7812      	ldrb	r2, [r2, #0]
   15216:	701a      	strb	r2, [r3, #0]
   15218:	1d7b      	adds	r3, r7, #5
   1521a:	2212      	movs	r2, #18
   1521c:	18ba      	adds	r2, r7, r2
   1521e:	7812      	ldrb	r2, [r2, #0]
   15220:	701a      	strb	r2, [r3, #0]
		swap(y0, y1);
   15222:	2311      	movs	r3, #17
   15224:	18fb      	adds	r3, r7, r3
   15226:	1dba      	adds	r2, r7, #6
   15228:	7812      	ldrb	r2, [r2, #0]
   1522a:	701a      	strb	r2, [r3, #0]
   1522c:	1dbb      	adds	r3, r7, #6
   1522e:	1d3a      	adds	r2, r7, #4
   15230:	7812      	ldrb	r2, [r2, #0]
   15232:	701a      	strb	r2, [r3, #0]
   15234:	1d3b      	adds	r3, r7, #4
   15236:	2211      	movs	r2, #17
   15238:	18ba      	adds	r2, r7, r2
   1523a:	7812      	ldrb	r2, [r2, #0]
   1523c:	701a      	strb	r2, [r3, #0]
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
   1523e:	1d3b      	adds	r3, r7, #4
   15240:	781c      	ldrb	r4, [r3, #0]
   15242:	1d7b      	adds	r3, r7, #5
   15244:	781a      	ldrb	r2, [r3, #0]
   15246:	1dbb      	adds	r3, r7, #6
   15248:	7819      	ldrb	r1, [r3, #0]
   1524a:	1dfb      	adds	r3, r7, #7
   1524c:	7818      	ldrb	r0, [r3, #0]
   1524e:	0023      	movs	r3, r4
   15250:	4c3c      	ldr	r4, [pc, #240]	; (15344 <glcd_draw_line+0x1e4>)
   15252:	47a0      	blx	r4

	dx = x1 - x0;
   15254:	2310      	movs	r3, #16
   15256:	18fb      	adds	r3, r7, r3
   15258:	1d79      	adds	r1, r7, #5
   1525a:	1dfa      	adds	r2, r7, #7
   1525c:	7809      	ldrb	r1, [r1, #0]
   1525e:	7812      	ldrb	r2, [r2, #0]
   15260:	1a8a      	subs	r2, r1, r2
   15262:	701a      	strb	r2, [r3, #0]
	dy = abs(y1 - y0);
   15264:	1d3b      	adds	r3, r7, #4
   15266:	781a      	ldrb	r2, [r3, #0]
   15268:	1dbb      	adds	r3, r7, #6
   1526a:	781b      	ldrb	r3, [r3, #0]
   1526c:	1ad3      	subs	r3, r2, r3
   1526e:	17d9      	asrs	r1, r3, #31
   15270:	185a      	adds	r2, r3, r1
   15272:	404a      	eors	r2, r1
   15274:	230f      	movs	r3, #15
   15276:	18fb      	adds	r3, r7, r3
   15278:	701a      	strb	r2, [r3, #0]
	
	err = dx / 2;
   1527a:	2310      	movs	r3, #16
   1527c:	18fb      	adds	r3, r7, r3
   1527e:	781b      	ldrb	r3, [r3, #0]
   15280:	085b      	lsrs	r3, r3, #1
   15282:	b2da      	uxtb	r2, r3
   15284:	2317      	movs	r3, #23
   15286:	18fb      	adds	r3, r7, r3
   15288:	701a      	strb	r2, [r3, #0]
	
	if (y0 < y1) {
   1528a:	1dba      	adds	r2, r7, #6
   1528c:	1d3b      	adds	r3, r7, #4
   1528e:	7812      	ldrb	r2, [r2, #0]
   15290:	781b      	ldrb	r3, [r3, #0]
   15292:	429a      	cmp	r2, r3
   15294:	d204      	bcs.n	152a0 <glcd_draw_line+0x140>
		ystep = 1;
   15296:	2316      	movs	r3, #22
   15298:	18fb      	adds	r3, r7, r3
   1529a:	2201      	movs	r2, #1
   1529c:	701a      	strb	r2, [r3, #0]
   1529e:	e046      	b.n	1532e <glcd_draw_line+0x1ce>
	} else {
		ystep = -1;
   152a0:	2316      	movs	r3, #22
   152a2:	18fb      	adds	r3, r7, r3
   152a4:	22ff      	movs	r2, #255	; 0xff
   152a6:	701a      	strb	r2, [r3, #0]
	}
	
	for (; x0<=x1; x0++) {
   152a8:	e041      	b.n	1532e <glcd_draw_line+0x1ce>
		if (steep) {
   152aa:	2315      	movs	r3, #21
   152ac:	18fb      	adds	r3, r7, r3
   152ae:	781b      	ldrb	r3, [r3, #0]
   152b0:	2b00      	cmp	r3, #0
   152b2:	d00a      	beq.n	152ca <glcd_draw_line+0x16a>
			glcd_set_pixel(y0, x0, color);
   152b4:	2328      	movs	r3, #40	; 0x28
   152b6:	18fb      	adds	r3, r7, r3
   152b8:	781a      	ldrb	r2, [r3, #0]
   152ba:	1dfb      	adds	r3, r7, #7
   152bc:	7819      	ldrb	r1, [r3, #0]
   152be:	1dbb      	adds	r3, r7, #6
   152c0:	781b      	ldrb	r3, [r3, #0]
   152c2:	0018      	movs	r0, r3
   152c4:	4b20      	ldr	r3, [pc, #128]	; (15348 <glcd_draw_line+0x1e8>)
   152c6:	4798      	blx	r3
   152c8:	e009      	b.n	152de <glcd_draw_line+0x17e>
		} else {
			glcd_set_pixel(x0, y0, color);
   152ca:	2328      	movs	r3, #40	; 0x28
   152cc:	18fb      	adds	r3, r7, r3
   152ce:	781a      	ldrb	r2, [r3, #0]
   152d0:	1dbb      	adds	r3, r7, #6
   152d2:	7819      	ldrb	r1, [r3, #0]
   152d4:	1dfb      	adds	r3, r7, #7
   152d6:	781b      	ldrb	r3, [r3, #0]
   152d8:	0018      	movs	r0, r3
   152da:	4b1b      	ldr	r3, [pc, #108]	; (15348 <glcd_draw_line+0x1e8>)
   152dc:	4798      	blx	r3
		}
		err -= dy;
   152de:	2317      	movs	r3, #23
   152e0:	18fb      	adds	r3, r7, r3
   152e2:	781a      	ldrb	r2, [r3, #0]
   152e4:	230f      	movs	r3, #15
   152e6:	18fb      	adds	r3, r7, r3
   152e8:	781b      	ldrb	r3, [r3, #0]
   152ea:	1ad3      	subs	r3, r2, r3
   152ec:	b2da      	uxtb	r2, r3
   152ee:	2317      	movs	r3, #23
   152f0:	18fb      	adds	r3, r7, r3
   152f2:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
   152f4:	2317      	movs	r3, #23
   152f6:	18fb      	adds	r3, r7, r3
   152f8:	781b      	ldrb	r3, [r3, #0]
   152fa:	2b7f      	cmp	r3, #127	; 0x7f
   152fc:	d912      	bls.n	15324 <glcd_draw_line+0x1c4>
			y0 += ystep;
   152fe:	2316      	movs	r3, #22
   15300:	18fb      	adds	r3, r7, r3
   15302:	7819      	ldrb	r1, [r3, #0]
   15304:	1dbb      	adds	r3, r7, #6
   15306:	1dba      	adds	r2, r7, #6
   15308:	7812      	ldrb	r2, [r2, #0]
   1530a:	188a      	adds	r2, r1, r2
   1530c:	701a      	strb	r2, [r3, #0]
			err += dx;
   1530e:	2317      	movs	r3, #23
   15310:	18fb      	adds	r3, r7, r3
   15312:	781a      	ldrb	r2, [r3, #0]
   15314:	2310      	movs	r3, #16
   15316:	18fb      	adds	r3, r7, r3
   15318:	781b      	ldrb	r3, [r3, #0]
   1531a:	18d3      	adds	r3, r2, r3
   1531c:	b2da      	uxtb	r2, r3
   1531e:	2317      	movs	r3, #23
   15320:	18fb      	adds	r3, r7, r3
   15322:	701a      	strb	r2, [r3, #0]
	for (; x0<=x1; x0++) {
   15324:	1dfb      	adds	r3, r7, #7
   15326:	781a      	ldrb	r2, [r3, #0]
   15328:	1dfb      	adds	r3, r7, #7
   1532a:	3201      	adds	r2, #1
   1532c:	701a      	strb	r2, [r3, #0]
   1532e:	1dfa      	adds	r2, r7, #7
   15330:	1d7b      	adds	r3, r7, #5
   15332:	7812      	ldrb	r2, [r2, #0]
   15334:	781b      	ldrb	r3, [r3, #0]
   15336:	429a      	cmp	r2, r3
   15338:	d9b7      	bls.n	152aa <glcd_draw_line+0x14a>
		}
	}
}
   1533a:	46c0      	nop			; (mov r8, r8)
   1533c:	46bd      	mov	sp, r7
   1533e:	b006      	add	sp, #24
   15340:	bdb0      	pop	{r4, r5, r7, pc}
   15342:	46c0      	nop			; (mov r8, r8)
   15344:	00014f25 	.word	0x00014f25
   15348:	00015081 	.word	0x00015081

0001534c <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
   1534c:	b5b0      	push	{r4, r5, r7, lr}
   1534e:	b084      	sub	sp, #16
   15350:	af00      	add	r7, sp, #0
   15352:	0005      	movs	r5, r0
   15354:	000c      	movs	r4, r1
   15356:	0010      	movs	r0, r2
   15358:	0019      	movs	r1, r3
   1535a:	1dfb      	adds	r3, r7, #7
   1535c:	1c2a      	adds	r2, r5, #0
   1535e:	701a      	strb	r2, [r3, #0]
   15360:	1dbb      	adds	r3, r7, #6
   15362:	1c22      	adds	r2, r4, #0
   15364:	701a      	strb	r2, [r3, #0]
   15366:	1d7b      	adds	r3, r7, #5
   15368:	1c02      	adds	r2, r0, #0
   1536a:	701a      	strb	r2, [r3, #0]
   1536c:	1d3b      	adds	r3, r7, #4
   1536e:	1c0a      	adds	r2, r1, #0
   15370:	701a      	strb	r2, [r3, #0]
		
	int8_t f = 1 - r;
   15372:	1d7b      	adds	r3, r7, #5
   15374:	781b      	ldrb	r3, [r3, #0]
   15376:	2201      	movs	r2, #1
   15378:	1ad3      	subs	r3, r2, r3
   1537a:	b2da      	uxtb	r2, r3
   1537c:	230f      	movs	r3, #15
   1537e:	18fb      	adds	r3, r7, r3
   15380:	701a      	strb	r2, [r3, #0]
	int8_t ddF_x = 1;
   15382:	230e      	movs	r3, #14
   15384:	18fb      	adds	r3, r7, r3
   15386:	2201      	movs	r2, #1
   15388:	701a      	strb	r2, [r3, #0]
	int8_t ddF_y = -2 * r;
   1538a:	1d7b      	adds	r3, r7, #5
   1538c:	781b      	ldrb	r3, [r3, #0]
   1538e:	1c1a      	adds	r2, r3, #0
   15390:	01d2      	lsls	r2, r2, #7
   15392:	1ad3      	subs	r3, r2, r3
   15394:	18db      	adds	r3, r3, r3
   15396:	b2da      	uxtb	r2, r3
   15398:	230d      	movs	r3, #13
   1539a:	18fb      	adds	r3, r7, r3
   1539c:	701a      	strb	r2, [r3, #0]
	int8_t x = 0;
   1539e:	230c      	movs	r3, #12
   153a0:	18fb      	adds	r3, r7, r3
   153a2:	2200      	movs	r2, #0
   153a4:	701a      	strb	r2, [r3, #0]
	int8_t y = r;
   153a6:	230b      	movs	r3, #11
   153a8:	18fb      	adds	r3, r7, r3
   153aa:	1d7a      	adds	r2, r7, #5
   153ac:	7812      	ldrb	r2, [r2, #0]
   153ae:	701a      	strb	r2, [r3, #0]
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   153b0:	1dfa      	adds	r2, r7, #7
   153b2:	1d7b      	adds	r3, r7, #5
   153b4:	7812      	ldrb	r2, [r2, #0]
   153b6:	781b      	ldrb	r3, [r3, #0]
   153b8:	1ad3      	subs	r3, r2, r3
   153ba:	b2d8      	uxtb	r0, r3
   153bc:	1dba      	adds	r2, r7, #6
   153be:	1d7b      	adds	r3, r7, #5
   153c0:	7812      	ldrb	r2, [r2, #0]
   153c2:	781b      	ldrb	r3, [r3, #0]
   153c4:	1ad3      	subs	r3, r2, r3
   153c6:	b2d9      	uxtb	r1, r3
   153c8:	1dfa      	adds	r2, r7, #7
   153ca:	1d7b      	adds	r3, r7, #5
   153cc:	7812      	ldrb	r2, [r2, #0]
   153ce:	781b      	ldrb	r3, [r3, #0]
   153d0:	18d3      	adds	r3, r2, r3
   153d2:	b2dc      	uxtb	r4, r3
   153d4:	1dba      	adds	r2, r7, #6
   153d6:	1d7b      	adds	r3, r7, #5
   153d8:	7812      	ldrb	r2, [r2, #0]
   153da:	781b      	ldrb	r3, [r3, #0]
   153dc:	18d3      	adds	r3, r2, r3
   153de:	b2db      	uxtb	r3, r3
   153e0:	0022      	movs	r2, r4
   153e2:	4c8e      	ldr	r4, [pc, #568]	; (1561c <glcd_draw_circle+0x2d0>)
   153e4:	47a0      	blx	r4
	
	glcd_set_pixel(x0, y0+r, color);
   153e6:	1dba      	adds	r2, r7, #6
   153e8:	1d7b      	adds	r3, r7, #5
   153ea:	7812      	ldrb	r2, [r2, #0]
   153ec:	781b      	ldrb	r3, [r3, #0]
   153ee:	18d3      	adds	r3, r2, r3
   153f0:	b2d9      	uxtb	r1, r3
   153f2:	1d3b      	adds	r3, r7, #4
   153f4:	781a      	ldrb	r2, [r3, #0]
   153f6:	1dfb      	adds	r3, r7, #7
   153f8:	781b      	ldrb	r3, [r3, #0]
   153fa:	0018      	movs	r0, r3
   153fc:	4b88      	ldr	r3, [pc, #544]	; (15620 <glcd_draw_circle+0x2d4>)
   153fe:	4798      	blx	r3
	glcd_set_pixel(x0, y0-r, color);
   15400:	1dba      	adds	r2, r7, #6
   15402:	1d7b      	adds	r3, r7, #5
   15404:	7812      	ldrb	r2, [r2, #0]
   15406:	781b      	ldrb	r3, [r3, #0]
   15408:	1ad3      	subs	r3, r2, r3
   1540a:	b2d9      	uxtb	r1, r3
   1540c:	1d3b      	adds	r3, r7, #4
   1540e:	781a      	ldrb	r2, [r3, #0]
   15410:	1dfb      	adds	r3, r7, #7
   15412:	781b      	ldrb	r3, [r3, #0]
   15414:	0018      	movs	r0, r3
   15416:	4b82      	ldr	r3, [pc, #520]	; (15620 <glcd_draw_circle+0x2d4>)
   15418:	4798      	blx	r3
	glcd_set_pixel(x0+r, y0, color);
   1541a:	1dfa      	adds	r2, r7, #7
   1541c:	1d7b      	adds	r3, r7, #5
   1541e:	7812      	ldrb	r2, [r2, #0]
   15420:	781b      	ldrb	r3, [r3, #0]
   15422:	18d3      	adds	r3, r2, r3
   15424:	b2d8      	uxtb	r0, r3
   15426:	1d3b      	adds	r3, r7, #4
   15428:	781a      	ldrb	r2, [r3, #0]
   1542a:	1dbb      	adds	r3, r7, #6
   1542c:	781b      	ldrb	r3, [r3, #0]
   1542e:	0019      	movs	r1, r3
   15430:	4b7b      	ldr	r3, [pc, #492]	; (15620 <glcd_draw_circle+0x2d4>)
   15432:	4798      	blx	r3
	glcd_set_pixel(x0-r, y0, color);
   15434:	1dfa      	adds	r2, r7, #7
   15436:	1d7b      	adds	r3, r7, #5
   15438:	7812      	ldrb	r2, [r2, #0]
   1543a:	781b      	ldrb	r3, [r3, #0]
   1543c:	1ad3      	subs	r3, r2, r3
   1543e:	b2d8      	uxtb	r0, r3
   15440:	1d3b      	adds	r3, r7, #4
   15442:	781a      	ldrb	r2, [r3, #0]
   15444:	1dbb      	adds	r3, r7, #6
   15446:	781b      	ldrb	r3, [r3, #0]
   15448:	0019      	movs	r1, r3
   1544a:	4b75      	ldr	r3, [pc, #468]	; (15620 <glcd_draw_circle+0x2d4>)
   1544c:	4798      	blx	r3
	
	while (x<y) {
   1544e:	e0d6      	b.n	155fe <glcd_draw_circle+0x2b2>
		if (f >= 0) {
   15450:	230f      	movs	r3, #15
   15452:	18fb      	adds	r3, r7, r3
   15454:	781b      	ldrb	r3, [r3, #0]
   15456:	2b7f      	cmp	r3, #127	; 0x7f
   15458:	d81c      	bhi.n	15494 <glcd_draw_circle+0x148>
			y--;
   1545a:	230b      	movs	r3, #11
   1545c:	18fb      	adds	r3, r7, r3
   1545e:	781b      	ldrb	r3, [r3, #0]
   15460:	b25b      	sxtb	r3, r3
   15462:	b2db      	uxtb	r3, r3
   15464:	3b01      	subs	r3, #1
   15466:	b2da      	uxtb	r2, r3
   15468:	230b      	movs	r3, #11
   1546a:	18fb      	adds	r3, r7, r3
   1546c:	701a      	strb	r2, [r3, #0]
			ddF_y += 2;
   1546e:	230d      	movs	r3, #13
   15470:	18fb      	adds	r3, r7, r3
   15472:	781b      	ldrb	r3, [r3, #0]
   15474:	3302      	adds	r3, #2
   15476:	b2da      	uxtb	r2, r3
   15478:	230d      	movs	r3, #13
   1547a:	18fb      	adds	r3, r7, r3
   1547c:	701a      	strb	r2, [r3, #0]
			f += ddF_y;
   1547e:	230f      	movs	r3, #15
   15480:	18fb      	adds	r3, r7, r3
   15482:	781a      	ldrb	r2, [r3, #0]
   15484:	230d      	movs	r3, #13
   15486:	18fb      	adds	r3, r7, r3
   15488:	781b      	ldrb	r3, [r3, #0]
   1548a:	18d3      	adds	r3, r2, r3
   1548c:	b2da      	uxtb	r2, r3
   1548e:	230f      	movs	r3, #15
   15490:	18fb      	adds	r3, r7, r3
   15492:	701a      	strb	r2, [r3, #0]
		}
		x++;
   15494:	230c      	movs	r3, #12
   15496:	18fb      	adds	r3, r7, r3
   15498:	781b      	ldrb	r3, [r3, #0]
   1549a:	b25b      	sxtb	r3, r3
   1549c:	b2db      	uxtb	r3, r3
   1549e:	3301      	adds	r3, #1
   154a0:	b2da      	uxtb	r2, r3
   154a2:	230c      	movs	r3, #12
   154a4:	18fb      	adds	r3, r7, r3
   154a6:	701a      	strb	r2, [r3, #0]
		ddF_x += 2;
   154a8:	230e      	movs	r3, #14
   154aa:	18fb      	adds	r3, r7, r3
   154ac:	781b      	ldrb	r3, [r3, #0]
   154ae:	3302      	adds	r3, #2
   154b0:	b2da      	uxtb	r2, r3
   154b2:	230e      	movs	r3, #14
   154b4:	18fb      	adds	r3, r7, r3
   154b6:	701a      	strb	r2, [r3, #0]
		f += ddF_x;
   154b8:	230f      	movs	r3, #15
   154ba:	18fb      	adds	r3, r7, r3
   154bc:	781a      	ldrb	r2, [r3, #0]
   154be:	230e      	movs	r3, #14
   154c0:	18fb      	adds	r3, r7, r3
   154c2:	781b      	ldrb	r3, [r3, #0]
   154c4:	18d3      	adds	r3, r2, r3
   154c6:	b2da      	uxtb	r2, r3
   154c8:	230f      	movs	r3, #15
   154ca:	18fb      	adds	r3, r7, r3
   154cc:	701a      	strb	r2, [r3, #0]
		
		glcd_set_pixel(x0 + x, y0 + y, color);
   154ce:	230c      	movs	r3, #12
   154d0:	18fb      	adds	r3, r7, r3
   154d2:	781a      	ldrb	r2, [r3, #0]
   154d4:	1dfb      	adds	r3, r7, #7
   154d6:	781b      	ldrb	r3, [r3, #0]
   154d8:	18d3      	adds	r3, r2, r3
   154da:	b2d8      	uxtb	r0, r3
   154dc:	230b      	movs	r3, #11
   154de:	18fb      	adds	r3, r7, r3
   154e0:	781a      	ldrb	r2, [r3, #0]
   154e2:	1dbb      	adds	r3, r7, #6
   154e4:	781b      	ldrb	r3, [r3, #0]
   154e6:	18d3      	adds	r3, r2, r3
   154e8:	b2d9      	uxtb	r1, r3
   154ea:	1d3b      	adds	r3, r7, #4
   154ec:	781b      	ldrb	r3, [r3, #0]
   154ee:	001a      	movs	r2, r3
   154f0:	4b4b      	ldr	r3, [pc, #300]	; (15620 <glcd_draw_circle+0x2d4>)
   154f2:	4798      	blx	r3
		glcd_set_pixel(x0 - x, y0 + y, color);
   154f4:	230c      	movs	r3, #12
   154f6:	18fb      	adds	r3, r7, r3
   154f8:	781b      	ldrb	r3, [r3, #0]
   154fa:	1dfa      	adds	r2, r7, #7
   154fc:	7812      	ldrb	r2, [r2, #0]
   154fe:	1ad3      	subs	r3, r2, r3
   15500:	b2d8      	uxtb	r0, r3
   15502:	230b      	movs	r3, #11
   15504:	18fb      	adds	r3, r7, r3
   15506:	781a      	ldrb	r2, [r3, #0]
   15508:	1dbb      	adds	r3, r7, #6
   1550a:	781b      	ldrb	r3, [r3, #0]
   1550c:	18d3      	adds	r3, r2, r3
   1550e:	b2d9      	uxtb	r1, r3
   15510:	1d3b      	adds	r3, r7, #4
   15512:	781b      	ldrb	r3, [r3, #0]
   15514:	001a      	movs	r2, r3
   15516:	4b42      	ldr	r3, [pc, #264]	; (15620 <glcd_draw_circle+0x2d4>)
   15518:	4798      	blx	r3
		glcd_set_pixel(x0 + x, y0 - y, color);
   1551a:	230c      	movs	r3, #12
   1551c:	18fb      	adds	r3, r7, r3
   1551e:	781a      	ldrb	r2, [r3, #0]
   15520:	1dfb      	adds	r3, r7, #7
   15522:	781b      	ldrb	r3, [r3, #0]
   15524:	18d3      	adds	r3, r2, r3
   15526:	b2d8      	uxtb	r0, r3
   15528:	230b      	movs	r3, #11
   1552a:	18fb      	adds	r3, r7, r3
   1552c:	781b      	ldrb	r3, [r3, #0]
   1552e:	1dba      	adds	r2, r7, #6
   15530:	7812      	ldrb	r2, [r2, #0]
   15532:	1ad3      	subs	r3, r2, r3
   15534:	b2d9      	uxtb	r1, r3
   15536:	1d3b      	adds	r3, r7, #4
   15538:	781b      	ldrb	r3, [r3, #0]
   1553a:	001a      	movs	r2, r3
   1553c:	4b38      	ldr	r3, [pc, #224]	; (15620 <glcd_draw_circle+0x2d4>)
   1553e:	4798      	blx	r3
		glcd_set_pixel(x0 - x, y0 - y, color);
   15540:	230c      	movs	r3, #12
   15542:	18fb      	adds	r3, r7, r3
   15544:	781b      	ldrb	r3, [r3, #0]
   15546:	1dfa      	adds	r2, r7, #7
   15548:	7812      	ldrb	r2, [r2, #0]
   1554a:	1ad3      	subs	r3, r2, r3
   1554c:	b2d8      	uxtb	r0, r3
   1554e:	230b      	movs	r3, #11
   15550:	18fb      	adds	r3, r7, r3
   15552:	781b      	ldrb	r3, [r3, #0]
   15554:	1dba      	adds	r2, r7, #6
   15556:	7812      	ldrb	r2, [r2, #0]
   15558:	1ad3      	subs	r3, r2, r3
   1555a:	b2d9      	uxtb	r1, r3
   1555c:	1d3b      	adds	r3, r7, #4
   1555e:	781b      	ldrb	r3, [r3, #0]
   15560:	001a      	movs	r2, r3
   15562:	4b2f      	ldr	r3, [pc, #188]	; (15620 <glcd_draw_circle+0x2d4>)
   15564:	4798      	blx	r3
		
		glcd_set_pixel(x0 + y, y0 + x, color);
   15566:	230b      	movs	r3, #11
   15568:	18fb      	adds	r3, r7, r3
   1556a:	781a      	ldrb	r2, [r3, #0]
   1556c:	1dfb      	adds	r3, r7, #7
   1556e:	781b      	ldrb	r3, [r3, #0]
   15570:	18d3      	adds	r3, r2, r3
   15572:	b2d8      	uxtb	r0, r3
   15574:	230c      	movs	r3, #12
   15576:	18fb      	adds	r3, r7, r3
   15578:	781a      	ldrb	r2, [r3, #0]
   1557a:	1dbb      	adds	r3, r7, #6
   1557c:	781b      	ldrb	r3, [r3, #0]
   1557e:	18d3      	adds	r3, r2, r3
   15580:	b2d9      	uxtb	r1, r3
   15582:	1d3b      	adds	r3, r7, #4
   15584:	781b      	ldrb	r3, [r3, #0]
   15586:	001a      	movs	r2, r3
   15588:	4b25      	ldr	r3, [pc, #148]	; (15620 <glcd_draw_circle+0x2d4>)
   1558a:	4798      	blx	r3
		glcd_set_pixel(x0 - y, y0 + x, color);
   1558c:	230b      	movs	r3, #11
   1558e:	18fb      	adds	r3, r7, r3
   15590:	781b      	ldrb	r3, [r3, #0]
   15592:	1dfa      	adds	r2, r7, #7
   15594:	7812      	ldrb	r2, [r2, #0]
   15596:	1ad3      	subs	r3, r2, r3
   15598:	b2d8      	uxtb	r0, r3
   1559a:	230c      	movs	r3, #12
   1559c:	18fb      	adds	r3, r7, r3
   1559e:	781a      	ldrb	r2, [r3, #0]
   155a0:	1dbb      	adds	r3, r7, #6
   155a2:	781b      	ldrb	r3, [r3, #0]
   155a4:	18d3      	adds	r3, r2, r3
   155a6:	b2d9      	uxtb	r1, r3
   155a8:	1d3b      	adds	r3, r7, #4
   155aa:	781b      	ldrb	r3, [r3, #0]
   155ac:	001a      	movs	r2, r3
   155ae:	4b1c      	ldr	r3, [pc, #112]	; (15620 <glcd_draw_circle+0x2d4>)
   155b0:	4798      	blx	r3
		glcd_set_pixel(x0 + y, y0 - x, color);
   155b2:	230b      	movs	r3, #11
   155b4:	18fb      	adds	r3, r7, r3
   155b6:	781a      	ldrb	r2, [r3, #0]
   155b8:	1dfb      	adds	r3, r7, #7
   155ba:	781b      	ldrb	r3, [r3, #0]
   155bc:	18d3      	adds	r3, r2, r3
   155be:	b2d8      	uxtb	r0, r3
   155c0:	230c      	movs	r3, #12
   155c2:	18fb      	adds	r3, r7, r3
   155c4:	781b      	ldrb	r3, [r3, #0]
   155c6:	1dba      	adds	r2, r7, #6
   155c8:	7812      	ldrb	r2, [r2, #0]
   155ca:	1ad3      	subs	r3, r2, r3
   155cc:	b2d9      	uxtb	r1, r3
   155ce:	1d3b      	adds	r3, r7, #4
   155d0:	781b      	ldrb	r3, [r3, #0]
   155d2:	001a      	movs	r2, r3
   155d4:	4b12      	ldr	r3, [pc, #72]	; (15620 <glcd_draw_circle+0x2d4>)
   155d6:	4798      	blx	r3
		glcd_set_pixel(x0 - y, y0 - x, color);
   155d8:	230b      	movs	r3, #11
   155da:	18fb      	adds	r3, r7, r3
   155dc:	781b      	ldrb	r3, [r3, #0]
   155de:	1dfa      	adds	r2, r7, #7
   155e0:	7812      	ldrb	r2, [r2, #0]
   155e2:	1ad3      	subs	r3, r2, r3
   155e4:	b2d8      	uxtb	r0, r3
   155e6:	230c      	movs	r3, #12
   155e8:	18fb      	adds	r3, r7, r3
   155ea:	781b      	ldrb	r3, [r3, #0]
   155ec:	1dba      	adds	r2, r7, #6
   155ee:	7812      	ldrb	r2, [r2, #0]
   155f0:	1ad3      	subs	r3, r2, r3
   155f2:	b2d9      	uxtb	r1, r3
   155f4:	1d3b      	adds	r3, r7, #4
   155f6:	781b      	ldrb	r3, [r3, #0]
   155f8:	001a      	movs	r2, r3
   155fa:	4b09      	ldr	r3, [pc, #36]	; (15620 <glcd_draw_circle+0x2d4>)
   155fc:	4798      	blx	r3
	while (x<y) {
   155fe:	230c      	movs	r3, #12
   15600:	18fa      	adds	r2, r7, r3
   15602:	230b      	movs	r3, #11
   15604:	18fb      	adds	r3, r7, r3
   15606:	7812      	ldrb	r2, [r2, #0]
   15608:	b252      	sxtb	r2, r2
   1560a:	781b      	ldrb	r3, [r3, #0]
   1560c:	b25b      	sxtb	r3, r3
   1560e:	429a      	cmp	r2, r3
   15610:	da00      	bge.n	15614 <glcd_draw_circle+0x2c8>
   15612:	e71d      	b.n	15450 <glcd_draw_circle+0x104>
		
	}
}
   15614:	46c0      	nop			; (mov r8, r8)
   15616:	46bd      	mov	sp, r7
   15618:	b004      	add	sp, #16
   1561a:	bdb0      	pop	{r4, r5, r7, pc}
   1561c:	00014f25 	.word	0x00014f25
   15620:	00015081 	.word	0x00015081

00015624 <arch_ioport_pin_to_port_id>:
{
   15624:	b580      	push	{r7, lr}
   15626:	b082      	sub	sp, #8
   15628:	af00      	add	r7, sp, #0
   1562a:	6078      	str	r0, [r7, #4]
	return pin >> 5;
   1562c:	687b      	ldr	r3, [r7, #4]
   1562e:	095b      	lsrs	r3, r3, #5
}
   15630:	0018      	movs	r0, r3
   15632:	46bd      	mov	sp, r7
   15634:	b002      	add	sp, #8
   15636:	bd80      	pop	{r7, pc}

00015638 <arch_ioport_port_to_base>:
{
   15638:	b580      	push	{r7, lr}
   1563a:	b082      	sub	sp, #8
   1563c:	af00      	add	r7, sp, #0
   1563e:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
   15640:	687b      	ldr	r3, [r7, #4]
   15642:	01db      	lsls	r3, r3, #7
   15644:	4a03      	ldr	r2, [pc, #12]	; (15654 <arch_ioport_port_to_base+0x1c>)
   15646:	4694      	mov	ip, r2
   15648:	4463      	add	r3, ip
}
   1564a:	0018      	movs	r0, r3
   1564c:	46bd      	mov	sp, r7
   1564e:	b002      	add	sp, #8
   15650:	bd80      	pop	{r7, pc}
   15652:	46c0      	nop			; (mov r8, r8)
   15654:	40002800 	.word	0x40002800

00015658 <arch_ioport_pin_to_base>:
{
   15658:	b580      	push	{r7, lr}
   1565a:	b082      	sub	sp, #8
   1565c:	af00      	add	r7, sp, #0
   1565e:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
   15660:	687b      	ldr	r3, [r7, #4]
   15662:	0018      	movs	r0, r3
   15664:	4b05      	ldr	r3, [pc, #20]	; (1567c <arch_ioport_pin_to_base+0x24>)
   15666:	4798      	blx	r3
   15668:	0003      	movs	r3, r0
   1566a:	0018      	movs	r0, r3
   1566c:	4b04      	ldr	r3, [pc, #16]	; (15680 <arch_ioport_pin_to_base+0x28>)
   1566e:	4798      	blx	r3
   15670:	0003      	movs	r3, r0
}
   15672:	0018      	movs	r0, r3
   15674:	46bd      	mov	sp, r7
   15676:	b002      	add	sp, #8
   15678:	bd80      	pop	{r7, pc}
   1567a:	46c0      	nop			; (mov r8, r8)
   1567c:	00015625 	.word	0x00015625
   15680:	00015639 	.word	0x00015639

00015684 <arch_ioport_pin_to_mask>:
{
   15684:	b580      	push	{r7, lr}
   15686:	b082      	sub	sp, #8
   15688:	af00      	add	r7, sp, #0
   1568a:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
   1568c:	687b      	ldr	r3, [r7, #4]
   1568e:	221f      	movs	r2, #31
   15690:	4013      	ands	r3, r2
   15692:	2201      	movs	r2, #1
   15694:	409a      	lsls	r2, r3
   15696:	0013      	movs	r3, r2
}
   15698:	0018      	movs	r0, r3
   1569a:	46bd      	mov	sp, r7
   1569c:	b002      	add	sp, #8
   1569e:	bd80      	pop	{r7, pc}

000156a0 <arch_ioport_set_pin_level>:
{
   156a0:	b590      	push	{r4, r7, lr}
   156a2:	b083      	sub	sp, #12
   156a4:	af00      	add	r7, sp, #0
   156a6:	6078      	str	r0, [r7, #4]
   156a8:	000a      	movs	r2, r1
   156aa:	1cfb      	adds	r3, r7, #3
   156ac:	701a      	strb	r2, [r3, #0]
	if (level) {
   156ae:	1cfb      	adds	r3, r7, #3
   156b0:	781b      	ldrb	r3, [r3, #0]
   156b2:	2b00      	cmp	r3, #0
   156b4:	d00b      	beq.n	156ce <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   156b6:	687b      	ldr	r3, [r7, #4]
   156b8:	0018      	movs	r0, r3
   156ba:	4b0c      	ldr	r3, [pc, #48]	; (156ec <arch_ioport_set_pin_level+0x4c>)
   156bc:	4798      	blx	r3
   156be:	0004      	movs	r4, r0
   156c0:	687b      	ldr	r3, [r7, #4]
   156c2:	0018      	movs	r0, r3
   156c4:	4b0a      	ldr	r3, [pc, #40]	; (156f0 <arch_ioport_set_pin_level+0x50>)
   156c6:	4798      	blx	r3
   156c8:	0003      	movs	r3, r0
   156ca:	61a3      	str	r3, [r4, #24]
}
   156cc:	e00a      	b.n	156e4 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   156ce:	687b      	ldr	r3, [r7, #4]
   156d0:	0018      	movs	r0, r3
   156d2:	4b06      	ldr	r3, [pc, #24]	; (156ec <arch_ioport_set_pin_level+0x4c>)
   156d4:	4798      	blx	r3
   156d6:	0004      	movs	r4, r0
   156d8:	687b      	ldr	r3, [r7, #4]
   156da:	0018      	movs	r0, r3
   156dc:	4b04      	ldr	r3, [pc, #16]	; (156f0 <arch_ioport_set_pin_level+0x50>)
   156de:	4798      	blx	r3
   156e0:	0003      	movs	r3, r0
   156e2:	6163      	str	r3, [r4, #20]
}
   156e4:	46c0      	nop			; (mov r8, r8)
   156e6:	46bd      	mov	sp, r7
   156e8:	b003      	add	sp, #12
   156ea:	bd90      	pop	{r4, r7, pc}
   156ec:	00015659 	.word	0x00015659
   156f0:	00015685 	.word	0x00015685

000156f4 <ioport_set_pin_level>:
{
   156f4:	b580      	push	{r7, lr}
   156f6:	b082      	sub	sp, #8
   156f8:	af00      	add	r7, sp, #0
   156fa:	6078      	str	r0, [r7, #4]
   156fc:	000a      	movs	r2, r1
   156fe:	1cfb      	adds	r3, r7, #3
   15700:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
   15702:	1cfb      	adds	r3, r7, #3
   15704:	781a      	ldrb	r2, [r3, #0]
   15706:	687b      	ldr	r3, [r7, #4]
   15708:	0011      	movs	r1, r2
   1570a:	0018      	movs	r0, r3
   1570c:	4b02      	ldr	r3, [pc, #8]	; (15718 <ioport_set_pin_level+0x24>)
   1570e:	4798      	blx	r3
}
   15710:	46c0      	nop			; (mov r8, r8)
   15712:	46bd      	mov	sp, r7
   15714:	b002      	add	sp, #8
   15716:	bd80      	pop	{r7, pc}
   15718:	000156a1 	.word	0x000156a1

0001571c <glcd_command>:

#include "glcd.h"
#define GLCD_INIT_NHD_C12864A1Z_FSW_FBW_HTT

void glcd_command(uint8_t c)
{
   1571c:	b580      	push	{r7, lr}
   1571e:	b082      	sub	sp, #8
   15720:	af00      	add	r7, sp, #0
   15722:	0002      	movs	r2, r0
   15724:	1dfb      	adds	r3, r7, #7
   15726:	701a      	strb	r2, [r3, #0]
	GLCD_A0_LOW();
   15728:	2100      	movs	r1, #0
   1572a:	201b      	movs	r0, #27
   1572c:	4b05      	ldr	r3, [pc, #20]	; (15744 <glcd_command+0x28>)
   1572e:	4798      	blx	r3
	glcd_spi_write(c);	
   15730:	1dfb      	adds	r3, r7, #7
   15732:	781b      	ldrb	r3, [r3, #0]
   15734:	0018      	movs	r0, r3
   15736:	4b04      	ldr	r3, [pc, #16]	; (15748 <glcd_command+0x2c>)
   15738:	4798      	blx	r3
}
   1573a:	46c0      	nop			; (mov r8, r8)
   1573c:	46bd      	mov	sp, r7
   1573e:	b002      	add	sp, #8
   15740:	bd80      	pop	{r7, pc}
   15742:	46c0      	nop			; (mov r8, r8)
   15744:	000156f5 	.word	0x000156f5
   15748:	00014e75 	.word	0x00014e75

0001574c <glcd_data>:

void glcd_data(uint8_t c)
{
   1574c:	b580      	push	{r7, lr}
   1574e:	b082      	sub	sp, #8
   15750:	af00      	add	r7, sp, #0
   15752:	0002      	movs	r2, r0
   15754:	1dfb      	adds	r3, r7, #7
   15756:	701a      	strb	r2, [r3, #0]
	GLCD_A0_HIGH();
   15758:	2101      	movs	r1, #1
   1575a:	201b      	movs	r0, #27
   1575c:	4b05      	ldr	r3, [pc, #20]	; (15774 <glcd_data+0x28>)
   1575e:	4798      	blx	r3
	glcd_spi_write(c);	
   15760:	1dfb      	adds	r3, r7, #7
   15762:	781b      	ldrb	r3, [r3, #0]
   15764:	0018      	movs	r0, r3
   15766:	4b04      	ldr	r3, [pc, #16]	; (15778 <glcd_data+0x2c>)
   15768:	4798      	blx	r3
}
   1576a:	46c0      	nop			; (mov r8, r8)
   1576c:	46bd      	mov	sp, r7
   1576e:	b002      	add	sp, #8
   15770:	bd80      	pop	{r7, pc}
   15772:	46c0      	nop			; (mov r8, r8)
   15774:	000156f5 	.word	0x000156f5
   15778:	00014e75 	.word	0x00014e75

0001577c <glcd_set_contrast>:

void glcd_set_contrast(uint8_t val) {
   1577c:	b580      	push	{r7, lr}
   1577e:	b082      	sub	sp, #8
   15780:	af00      	add	r7, sp, #0
   15782:	0002      	movs	r2, r0
   15784:	1dfb      	adds	r3, r7, #7
   15786:	701a      	strb	r2, [r3, #0]
	/* Can set a 6-bit value (0 to 63)  */

	/* Must send this command byte before setting the contrast */
	glcd_command(0x81);
   15788:	2081      	movs	r0, #129	; 0x81
   1578a:	4b09      	ldr	r3, [pc, #36]	; (157b0 <glcd_set_contrast+0x34>)
   1578c:	4798      	blx	r3
	
	/* Set the contrat value ("electronic volumne register") */
	if (val > 63) {
   1578e:	1dfb      	adds	r3, r7, #7
   15790:	781b      	ldrb	r3, [r3, #0]
   15792:	2b3f      	cmp	r3, #63	; 0x3f
   15794:	d903      	bls.n	1579e <glcd_set_contrast+0x22>
		glcd_command(63);
   15796:	203f      	movs	r0, #63	; 0x3f
   15798:	4b05      	ldr	r3, [pc, #20]	; (157b0 <glcd_set_contrast+0x34>)
   1579a:	4798      	blx	r3
	} else {
		glcd_command(val);
	}
	return;
   1579c:	e005      	b.n	157aa <glcd_set_contrast+0x2e>
		glcd_command(val);
   1579e:	1dfb      	adds	r3, r7, #7
   157a0:	781b      	ldrb	r3, [r3, #0]
   157a2:	0018      	movs	r0, r3
   157a4:	4b02      	ldr	r3, [pc, #8]	; (157b0 <glcd_set_contrast+0x34>)
   157a6:	4798      	blx	r3
	return;
   157a8:	46c0      	nop			; (mov r8, r8)
}
   157aa:	46bd      	mov	sp, r7
   157ac:	b002      	add	sp, #8
   157ae:	bd80      	pop	{r7, pc}
   157b0:	0001571d 	.word	0x0001571d

000157b4 <glcd_set_y_address>:

	return;
}

void glcd_set_y_address(uint8_t y)
{
   157b4:	b580      	push	{r7, lr}
   157b6:	b082      	sub	sp, #8
   157b8:	af00      	add	r7, sp, #0
   157ba:	0002      	movs	r2, r0
   157bc:	1dfb      	adds	r3, r7, #7
   157be:	701a      	strb	r2, [r3, #0]
	glcd_command(ST7565R_PAGE_ADDRESS_SET | (0x0F & y)); /* 0x0F = 0b00001111 */
   157c0:	1dfb      	adds	r3, r7, #7
   157c2:	781b      	ldrb	r3, [r3, #0]
   157c4:	220f      	movs	r2, #15
   157c6:	4013      	ands	r3, r2
   157c8:	b2db      	uxtb	r3, r3
   157ca:	2250      	movs	r2, #80	; 0x50
   157cc:	4252      	negs	r2, r2
   157ce:	4313      	orrs	r3, r2
   157d0:	b2db      	uxtb	r3, r3
   157d2:	0018      	movs	r0, r3
   157d4:	4b02      	ldr	r3, [pc, #8]	; (157e0 <glcd_set_y_address+0x2c>)
   157d6:	4798      	blx	r3
}
   157d8:	46c0      	nop			; (mov r8, r8)
   157da:	46bd      	mov	sp, r7
   157dc:	b002      	add	sp, #8
   157de:	bd80      	pop	{r7, pc}
   157e0:	0001571d 	.word	0x0001571d

000157e4 <glcd_set_x_address>:

void glcd_set_x_address(uint8_t x)
{
   157e4:	b580      	push	{r7, lr}
   157e6:	b082      	sub	sp, #8
   157e8:	af00      	add	r7, sp, #0
   157ea:	0002      	movs	r2, r0
   157ec:	1dfb      	adds	r3, r7, #7
   157ee:	701a      	strb	r2, [r3, #0]
	glcd_set_column_upper(x);
   157f0:	1dfb      	adds	r3, r7, #7
   157f2:	781b      	ldrb	r3, [r3, #0]
   157f4:	0018      	movs	r0, r3
   157f6:	4b05      	ldr	r3, [pc, #20]	; (1580c <glcd_set_x_address+0x28>)
   157f8:	4798      	blx	r3
	glcd_set_column_lower(x);	
   157fa:	1dfb      	adds	r3, r7, #7
   157fc:	781b      	ldrb	r3, [r3, #0]
   157fe:	0018      	movs	r0, r3
   15800:	4b03      	ldr	r3, [pc, #12]	; (15810 <glcd_set_x_address+0x2c>)
   15802:	4798      	blx	r3
}
   15804:	46c0      	nop			; (mov r8, r8)
   15806:	46bd      	mov	sp, r7
   15808:	b002      	add	sp, #8
   1580a:	bd80      	pop	{r7, pc}
   1580c:	00015815 	.word	0x00015815
   15810:	00015841 	.word	0x00015841

00015814 <glcd_set_column_upper>:
{
	glcd_command(ST7565R_DISPLAY_NORMAL);
}

void glcd_set_column_upper(uint8_t addr)
{
   15814:	b580      	push	{r7, lr}
   15816:	b082      	sub	sp, #8
   15818:	af00      	add	r7, sp, #0
   1581a:	0002      	movs	r2, r0
   1581c:	1dfb      	adds	r3, r7, #7
   1581e:	701a      	strb	r2, [r3, #0]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_UPPER | (addr >> 4));
   15820:	1dfb      	adds	r3, r7, #7
   15822:	781b      	ldrb	r3, [r3, #0]
   15824:	091b      	lsrs	r3, r3, #4
   15826:	b2db      	uxtb	r3, r3
   15828:	2210      	movs	r2, #16
   1582a:	4313      	orrs	r3, r2
   1582c:	b2db      	uxtb	r3, r3
   1582e:	0018      	movs	r0, r3
   15830:	4b02      	ldr	r3, [pc, #8]	; (1583c <glcd_set_column_upper+0x28>)
   15832:	4798      	blx	r3
}
   15834:	46c0      	nop			; (mov r8, r8)
   15836:	46bd      	mov	sp, r7
   15838:	b002      	add	sp, #8
   1583a:	bd80      	pop	{r7, pc}
   1583c:	0001571d 	.word	0x0001571d

00015840 <glcd_set_column_lower>:

void glcd_set_column_lower(uint8_t addr)
{
   15840:	b580      	push	{r7, lr}
   15842:	b082      	sub	sp, #8
   15844:	af00      	add	r7, sp, #0
   15846:	0002      	movs	r2, r0
   15848:	1dfb      	adds	r3, r7, #7
   1584a:	701a      	strb	r2, [r3, #0]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_LOWER | (0x0f & addr));
   1584c:	1dfb      	adds	r3, r7, #7
   1584e:	781b      	ldrb	r3, [r3, #0]
   15850:	220f      	movs	r2, #15
   15852:	4013      	ands	r3, r2
   15854:	b2db      	uxtb	r3, r3
   15856:	0018      	movs	r0, r3
   15858:	4b02      	ldr	r3, [pc, #8]	; (15864 <glcd_set_column_lower+0x24>)
   1585a:	4798      	blx	r3
}
   1585c:	46c0      	nop			; (mov r8, r8)
   1585e:	46bd      	mov	sp, r7
   15860:	b002      	add	sp, #8
   15862:	bd80      	pop	{r7, pc}
   15864:	0001571d 	.word	0x0001571d

00015868 <glcd_write>:
		}			
	}
}

void glcd_write()
{
   15868:	b580      	push	{r7, lr}
   1586a:	b082      	sub	sp, #8
   1586c:	af00      	add	r7, sp, #0

	uint8_t bank;

	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   1586e:	1dfb      	adds	r3, r7, #7
   15870:	2200      	movs	r2, #0
   15872:	701a      	strb	r2, [r3, #0]
   15874:	e043      	b.n	158fe <glcd_write+0x96>
		/* Each bank is a single row 8 bits tall */
		uint8_t column;		
		
		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
   15876:	4b28      	ldr	r3, [pc, #160]	; (15918 <glcd_write+0xb0>)
   15878:	681b      	ldr	r3, [r3, #0]
   1587a:	785b      	ldrb	r3, [r3, #1]
   1587c:	001a      	movs	r2, r3
   1587e:	1dfb      	adds	r3, r7, #7
   15880:	781b      	ldrb	r3, [r3, #0]
   15882:	3301      	adds	r3, #1
   15884:	00db      	lsls	r3, r3, #3
   15886:	429a      	cmp	r2, r3
   15888:	da33      	bge.n	158f2 <glcd_write+0x8a>
			continue; /* Skip the entire bank */
		}
		
		if (glcd_bbox_selected->y_max < bank*8) {
   1588a:	4b23      	ldr	r3, [pc, #140]	; (15918 <glcd_write+0xb0>)
   1588c:	681b      	ldr	r3, [r3, #0]
   1588e:	78db      	ldrb	r3, [r3, #3]
   15890:	001a      	movs	r2, r3
   15892:	1dfb      	adds	r3, r7, #7
   15894:	781b      	ldrb	r3, [r3, #0]
   15896:	00db      	lsls	r3, r3, #3
   15898:	429a      	cmp	r2, r3
   1589a:	db35      	blt.n	15908 <glcd_write+0xa0>
			break;    /* No more banks need updating */
		}
		
		glcd_set_y_address(bank);
   1589c:	1dfb      	adds	r3, r7, #7
   1589e:	781b      	ldrb	r3, [r3, #0]
   158a0:	0018      	movs	r0, r3
   158a2:	4b1e      	ldr	r3, [pc, #120]	; (1591c <glcd_write+0xb4>)
   158a4:	4798      	blx	r3
		glcd_set_x_address(glcd_bbox_selected->x_min);
   158a6:	4b1c      	ldr	r3, [pc, #112]	; (15918 <glcd_write+0xb0>)
   158a8:	681b      	ldr	r3, [r3, #0]
   158aa:	781b      	ldrb	r3, [r3, #0]
   158ac:	0018      	movs	r0, r3
   158ae:	4b1c      	ldr	r3, [pc, #112]	; (15920 <glcd_write+0xb8>)
   158b0:	4798      	blx	r3

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
   158b2:	4b19      	ldr	r3, [pc, #100]	; (15918 <glcd_write+0xb0>)
   158b4:	681a      	ldr	r2, [r3, #0]
   158b6:	1dbb      	adds	r3, r7, #6
   158b8:	7812      	ldrb	r2, [r2, #0]
   158ba:	701a      	strb	r2, [r3, #0]
   158bc:	e011      	b.n	158e2 <glcd_write+0x7a>
		{
			glcd_data( glcd_buffer_selected[GLCD_NUMBER_OF_COLS * bank + column] );
   158be:	4b19      	ldr	r3, [pc, #100]	; (15924 <glcd_write+0xbc>)
   158c0:	681b      	ldr	r3, [r3, #0]
   158c2:	1dfa      	adds	r2, r7, #7
   158c4:	7812      	ldrb	r2, [r2, #0]
   158c6:	01d1      	lsls	r1, r2, #7
   158c8:	1dba      	adds	r2, r7, #6
   158ca:	7812      	ldrb	r2, [r2, #0]
   158cc:	188a      	adds	r2, r1, r2
   158ce:	189b      	adds	r3, r3, r2
   158d0:	781b      	ldrb	r3, [r3, #0]
   158d2:	0018      	movs	r0, r3
   158d4:	4b14      	ldr	r3, [pc, #80]	; (15928 <glcd_write+0xc0>)
   158d6:	4798      	blx	r3
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
   158d8:	1dbb      	adds	r3, r7, #6
   158da:	781a      	ldrb	r2, [r3, #0]
   158dc:	1dbb      	adds	r3, r7, #6
   158de:	3201      	adds	r2, #1
   158e0:	701a      	strb	r2, [r3, #0]
   158e2:	4b0d      	ldr	r3, [pc, #52]	; (15918 <glcd_write+0xb0>)
   158e4:	681b      	ldr	r3, [r3, #0]
   158e6:	789b      	ldrb	r3, [r3, #2]
   158e8:	1dba      	adds	r2, r7, #6
   158ea:	7812      	ldrb	r2, [r2, #0]
   158ec:	429a      	cmp	r2, r3
   158ee:	d9e6      	bls.n	158be <glcd_write+0x56>
   158f0:	e000      	b.n	158f4 <glcd_write+0x8c>
			continue; /* Skip the entire bank */
   158f2:	46c0      	nop			; (mov r8, r8)
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   158f4:	1dfb      	adds	r3, r7, #7
   158f6:	781a      	ldrb	r2, [r3, #0]
   158f8:	1dfb      	adds	r3, r7, #7
   158fa:	3201      	adds	r2, #1
   158fc:	701a      	strb	r2, [r3, #0]
   158fe:	1dfb      	adds	r3, r7, #7
   15900:	781b      	ldrb	r3, [r3, #0]
   15902:	2b0f      	cmp	r3, #15
   15904:	d9b7      	bls.n	15876 <glcd_write+0xe>
   15906:	e000      	b.n	1590a <glcd_write+0xa2>
			break;    /* No more banks need updating */
   15908:	46c0      	nop			; (mov r8, r8)
		}
	}

	glcd_reset_bbox();
   1590a:	4b08      	ldr	r3, [pc, #32]	; (1592c <glcd_write+0xc4>)
   1590c:	4798      	blx	r3

}
   1590e:	46c0      	nop			; (mov r8, r8)
   15910:	46bd      	mov	sp, r7
   15912:	b002      	add	sp, #8
   15914:	bd80      	pop	{r7, pc}
   15916:	46c0      	nop			; (mov r8, r8)
   15918:	20001c10 	.word	0x20001c10
   1591c:	000157b5 	.word	0x000157b5
   15920:	000157e5 	.word	0x000157e5
   15924:	20001c0c 	.word	0x20001c0c
   15928:	0001574d 	.word	0x0001574d
   1592c:	00014ff5 	.word	0x00014ff5

00015930 <glcd_ST7565R_init>:

void glcd_ST7565R_init(void) {
   15930:	b580      	push	{r7, lr}
   15932:	af00      	add	r7, sp, #0

	/* Init sequence based on datasheet example code for NHD-C12864A1Z-FSW-FBW-HTT */
	/* Datasheet says max SCK frequency 2.5MHz for this LCD */
	/* We use "reverse direction" for common output mode, as opposed to datasheet specifying "normal direction" */

	glcd_command(0xa0); /* ADC select in normal mode */
   15934:	20a0      	movs	r0, #160	; 0xa0
   15936:	4b0d      	ldr	r3, [pc, #52]	; (1596c <glcd_ST7565R_init+0x3c>)
   15938:	4798      	blx	r3
	glcd_command(0xae); /* Display OFF */
   1593a:	20ae      	movs	r0, #174	; 0xae
   1593c:	4b0b      	ldr	r3, [pc, #44]	; (1596c <glcd_ST7565R_init+0x3c>)
   1593e:	4798      	blx	r3
	glcd_command(0xc8); /* Common output mode select: reverse direction (last 3 bits are ignored) */
   15940:	20c8      	movs	r0, #200	; 0xc8
   15942:	4b0a      	ldr	r3, [pc, #40]	; (1596c <glcd_ST7565R_init+0x3c>)
   15944:	4798      	blx	r3
	glcd_command(0xa2); /* LCD bias set at 1/9 */
   15946:	20a2      	movs	r0, #162	; 0xa2
   15948:	4b08      	ldr	r3, [pc, #32]	; (1596c <glcd_ST7565R_init+0x3c>)
   1594a:	4798      	blx	r3
	glcd_command(0x2f); /* Power control set to operating mode: 7 */
   1594c:	202f      	movs	r0, #47	; 0x2f
   1594e:	4b07      	ldr	r3, [pc, #28]	; (1596c <glcd_ST7565R_init+0x3c>)
   15950:	4798      	blx	r3
	glcd_command(0x26); /* Internal resistor ratio, set to: 6 */
   15952:	2026      	movs	r0, #38	; 0x26
   15954:	4b05      	ldr	r3, [pc, #20]	; (1596c <glcd_ST7565R_init+0x3c>)
   15956:	4798      	blx	r3
	glcd_set_contrast(20); /* Set contrast, value experimentally determined */
   15958:	2014      	movs	r0, #20
   1595a:	4b05      	ldr	r3, [pc, #20]	; (15970 <glcd_ST7565R_init+0x40>)
   1595c:	4798      	blx	r3
	glcd_command(0xaf); /* Display on */
   1595e:	20af      	movs	r0, #175	; 0xaf
   15960:	4b02      	ldr	r3, [pc, #8]	; (1596c <glcd_ST7565R_init+0x3c>)
   15962:	4798      	blx	r3
	glcd_set_contrast(20); /* Set contrast, value experimentally determined, value 0 to 63 */
	glcd_command(0xaf); /* Display on */

#endif

}
   15964:	46c0      	nop			; (mov r8, r8)
   15966:	46bd      	mov	sp, r7
   15968:	bd80      	pop	{r7, pc}
   1596a:	46c0      	nop			; (mov r8, r8)
   1596c:	0001571d 	.word	0x0001571d
   15970:	0001577d 	.word	0x0001577d

00015974 <glcd_draw_char_xy>:
	font_current.end_char = end_char;
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
}

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
   15974:	b590      	push	{r4, r7, lr}
   15976:	b08b      	sub	sp, #44	; 0x2c
   15978:	af00      	add	r7, sp, #0
   1597a:	0004      	movs	r4, r0
   1597c:	0008      	movs	r0, r1
   1597e:	0011      	movs	r1, r2
   15980:	1dfb      	adds	r3, r7, #7
   15982:	1c22      	adds	r2, r4, #0
   15984:	701a      	strb	r2, [r3, #0]
   15986:	1dbb      	adds	r3, r7, #6
   15988:	1c02      	adds	r2, r0, #0
   1598a:	701a      	strb	r2, [r3, #0]
   1598c:	1d7b      	adds	r3, r7, #5
   1598e:	1c0a      	adds	r2, r1, #0
   15990:	701a      	strb	r2, [r3, #0]
	if (c < font_current.start_char || c > font_current.end_char) {
   15992:	4bdc      	ldr	r3, [pc, #880]	; (15d04 <glcd_draw_char_xy+0x390>)
   15994:	799b      	ldrb	r3, [r3, #6]
   15996:	1d7a      	adds	r2, r7, #5
   15998:	7812      	ldrb	r2, [r2, #0]
   1599a:	429a      	cmp	r2, r3
   1599c:	d305      	bcc.n	159aa <glcd_draw_char_xy+0x36>
   1599e:	4bd9      	ldr	r3, [pc, #868]	; (15d04 <glcd_draw_char_xy+0x390>)
   159a0:	79db      	ldrb	r3, [r3, #7]
   159a2:	1d7a      	adds	r2, r7, #5
   159a4:	7812      	ldrb	r2, [r2, #0]
   159a6:	429a      	cmp	r2, r3
   159a8:	d902      	bls.n	159b0 <glcd_draw_char_xy+0x3c>
		c = '.';
   159aa:	1d7b      	adds	r3, r7, #5
   159ac:	222e      	movs	r2, #46	; 0x2e
   159ae:	701a      	strb	r2, [r3, #0]
	}
	
	if (font_current.table_type == STANG) {
   159b0:	4bd4      	ldr	r3, [pc, #848]	; (15d04 <glcd_draw_char_xy+0x390>)
   159b2:	7a1b      	ldrb	r3, [r3, #8]
   159b4:	2b00      	cmp	r3, #0
   159b6:	d000      	beq.n	159ba <glcd_draw_char_xy+0x46>
   159b8:	e07c      	b.n	15ab4 <glcd_draw_char_xy+0x140>
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
   159ba:	2327      	movs	r3, #39	; 0x27
   159bc:	18fb      	adds	r3, r7, r3
   159be:	2200      	movs	r2, #0
   159c0:	701a      	strb	r2, [r3, #0]
   159c2:	e06d      	b.n	15aa0 <glcd_draw_char_xy+0x12c>
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   159c4:	4bcf      	ldr	r3, [pc, #828]	; (15d04 <glcd_draw_char_xy+0x390>)
   159c6:	681a      	ldr	r2, [r3, #0]
   159c8:	1d7b      	adds	r3, r7, #5
   159ca:	781b      	ldrb	r3, [r3, #0]
   159cc:	49cd      	ldr	r1, [pc, #820]	; (15d04 <glcd_draw_char_xy+0x390>)
   159ce:	7989      	ldrb	r1, [r1, #6]
   159d0:	1a5b      	subs	r3, r3, r1
   159d2:	49cc      	ldr	r1, [pc, #816]	; (15d04 <glcd_draw_char_xy+0x390>)
   159d4:	7909      	ldrb	r1, [r1, #4]
   159d6:	434b      	muls	r3, r1
   159d8:	0019      	movs	r1, r3
   159da:	2327      	movs	r3, #39	; 0x27
   159dc:	18fb      	adds	r3, r7, r3
   159de:	781b      	ldrb	r3, [r3, #0]
   159e0:	18cb      	adds	r3, r1, r3
   159e2:	18d2      	adds	r2, r2, r3
   159e4:	231a      	movs	r3, #26
   159e6:	18fb      	adds	r3, r7, r3
   159e8:	7812      	ldrb	r2, [r2, #0]
   159ea:	701a      	strb	r2, [r3, #0]
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
   159ec:	2326      	movs	r3, #38	; 0x26
   159ee:	18fb      	adds	r3, r7, r3
   159f0:	2200      	movs	r2, #0
   159f2:	701a      	strb	r2, [r3, #0]
   159f4:	e048      	b.n	15a88 <glcd_draw_char_xy+0x114>
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
   159f6:	1dfb      	adds	r3, r7, #7
   159f8:	781a      	ldrb	r2, [r3, #0]
   159fa:	2327      	movs	r3, #39	; 0x27
   159fc:	18fb      	adds	r3, r7, r3
   159fe:	781b      	ldrb	r3, [r3, #0]
   15a00:	18d3      	adds	r3, r2, r3
   15a02:	2b7f      	cmp	r3, #127	; 0x7f
   15a04:	dc07      	bgt.n	15a16 <glcd_draw_char_xy+0xa2>
   15a06:	1dbb      	adds	r3, r7, #6
   15a08:	781a      	ldrb	r2, [r3, #0]
   15a0a:	2326      	movs	r3, #38	; 0x26
   15a0c:	18fb      	adds	r3, r7, r3
   15a0e:	781b      	ldrb	r3, [r3, #0]
   15a10:	18d3      	adds	r3, r2, r3
   15a12:	2b3f      	cmp	r3, #63	; 0x3f
   15a14:	dd01      	ble.n	15a1a <glcd_draw_char_xy+0xa6>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
   15a16:	2300      	movs	r3, #0
   15a18:	e26f      	b.n	15efa <glcd_draw_char_xy+0x586>
				}
				if (dat & (1<<j)) {
   15a1a:	231a      	movs	r3, #26
   15a1c:	18fb      	adds	r3, r7, r3
   15a1e:	781a      	ldrb	r2, [r3, #0]
   15a20:	2326      	movs	r3, #38	; 0x26
   15a22:	18fb      	adds	r3, r7, r3
   15a24:	781b      	ldrb	r3, [r3, #0]
   15a26:	411a      	asrs	r2, r3
   15a28:	0013      	movs	r3, r2
   15a2a:	2201      	movs	r2, #1
   15a2c:	4013      	ands	r3, r2
   15a2e:	d012      	beq.n	15a56 <glcd_draw_char_xy+0xe2>
					glcd_set_pixel(x+i,y+j,BLACK);
   15a30:	1dfa      	adds	r2, r7, #7
   15a32:	2327      	movs	r3, #39	; 0x27
   15a34:	18fb      	adds	r3, r7, r3
   15a36:	7812      	ldrb	r2, [r2, #0]
   15a38:	781b      	ldrb	r3, [r3, #0]
   15a3a:	18d3      	adds	r3, r2, r3
   15a3c:	b2d8      	uxtb	r0, r3
   15a3e:	1dba      	adds	r2, r7, #6
   15a40:	2326      	movs	r3, #38	; 0x26
   15a42:	18fb      	adds	r3, r7, r3
   15a44:	7812      	ldrb	r2, [r2, #0]
   15a46:	781b      	ldrb	r3, [r3, #0]
   15a48:	18d3      	adds	r3, r2, r3
   15a4a:	b2db      	uxtb	r3, r3
   15a4c:	2201      	movs	r2, #1
   15a4e:	0019      	movs	r1, r3
   15a50:	4bad      	ldr	r3, [pc, #692]	; (15d08 <glcd_draw_char_xy+0x394>)
   15a52:	4798      	blx	r3
   15a54:	e011      	b.n	15a7a <glcd_draw_char_xy+0x106>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
   15a56:	1dfa      	adds	r2, r7, #7
   15a58:	2327      	movs	r3, #39	; 0x27
   15a5a:	18fb      	adds	r3, r7, r3
   15a5c:	7812      	ldrb	r2, [r2, #0]
   15a5e:	781b      	ldrb	r3, [r3, #0]
   15a60:	18d3      	adds	r3, r2, r3
   15a62:	b2d8      	uxtb	r0, r3
   15a64:	1dba      	adds	r2, r7, #6
   15a66:	2326      	movs	r3, #38	; 0x26
   15a68:	18fb      	adds	r3, r7, r3
   15a6a:	7812      	ldrb	r2, [r2, #0]
   15a6c:	781b      	ldrb	r3, [r3, #0]
   15a6e:	18d3      	adds	r3, r2, r3
   15a70:	b2db      	uxtb	r3, r3
   15a72:	2200      	movs	r2, #0
   15a74:	0019      	movs	r1, r3
   15a76:	4ba4      	ldr	r3, [pc, #656]	; (15d08 <glcd_draw_char_xy+0x394>)
   15a78:	4798      	blx	r3
			for (j = 0; j < 8; j++) {
   15a7a:	2326      	movs	r3, #38	; 0x26
   15a7c:	18fb      	adds	r3, r7, r3
   15a7e:	781a      	ldrb	r2, [r3, #0]
   15a80:	2326      	movs	r3, #38	; 0x26
   15a82:	18fb      	adds	r3, r7, r3
   15a84:	3201      	adds	r2, #1
   15a86:	701a      	strb	r2, [r3, #0]
   15a88:	2326      	movs	r3, #38	; 0x26
   15a8a:	18fb      	adds	r3, r7, r3
   15a8c:	781b      	ldrb	r3, [r3, #0]
   15a8e:	2b07      	cmp	r3, #7
   15a90:	d9b1      	bls.n	159f6 <glcd_draw_char_xy+0x82>
		for ( i = 0; i < font_current.width; i++ ) {
   15a92:	2327      	movs	r3, #39	; 0x27
   15a94:	18fb      	adds	r3, r7, r3
   15a96:	781a      	ldrb	r2, [r3, #0]
   15a98:	2327      	movs	r3, #39	; 0x27
   15a9a:	18fb      	adds	r3, r7, r3
   15a9c:	3201      	adds	r2, #1
   15a9e:	701a      	strb	r2, [r3, #0]
   15aa0:	4b98      	ldr	r3, [pc, #608]	; (15d04 <glcd_draw_char_xy+0x390>)
   15aa2:	791b      	ldrb	r3, [r3, #4]
   15aa4:	2227      	movs	r2, #39	; 0x27
   15aa6:	18ba      	adds	r2, r7, r2
   15aa8:	7812      	ldrb	r2, [r2, #0]
   15aaa:	429a      	cmp	r2, r3
   15aac:	d38a      	bcc.n	159c4 <glcd_draw_char_xy+0x50>
			}
		}
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
   15aae:	4b95      	ldr	r3, [pc, #596]	; (15d04 <glcd_draw_char_xy+0x390>)
   15ab0:	791b      	ldrb	r3, [r3, #4]
   15ab2:	e222      	b.n	15efa <glcd_draw_char_xy+0x586>
		
	} else if (font_current.table_type == MIKRO) {
   15ab4:	4b93      	ldr	r3, [pc, #588]	; (15d04 <glcd_draw_char_xy+0x390>)
   15ab6:	7a1b      	ldrb	r3, [r3, #8]
   15ab8:	2b01      	cmp	r3, #1
   15aba:	d000      	beq.n	15abe <glcd_draw_char_xy+0x14a>
   15abc:	e0e9      	b.n	15c92 <glcd_draw_char_xy+0x31e>
		uint8_t var_width;
		uint8_t bytes_high;
		uint8_t bytes_per_char;
		const char *p;
		
		if ((font_current.height % 8) > 0){
   15abe:	4b91      	ldr	r3, [pc, #580]	; (15d04 <glcd_draw_char_xy+0x390>)
   15ac0:	795b      	ldrb	r3, [r3, #5]
   15ac2:	2207      	movs	r2, #7
   15ac4:	4013      	ands	r3, r2
   15ac6:	b2db      	uxtb	r3, r3
   15ac8:	2b00      	cmp	r3, #0
   15aca:	d008      	beq.n	15ade <glcd_draw_char_xy+0x16a>
			bytes_high = (font_current.height / 8) + 1;
   15acc:	4b8d      	ldr	r3, [pc, #564]	; (15d04 <glcd_draw_char_xy+0x390>)
   15ace:	795b      	ldrb	r3, [r3, #5]
   15ad0:	08db      	lsrs	r3, r3, #3
   15ad2:	b2da      	uxtb	r2, r3
   15ad4:	2324      	movs	r3, #36	; 0x24
   15ad6:	18fb      	adds	r3, r7, r3
   15ad8:	3201      	adds	r2, #1
   15ada:	701a      	strb	r2, [r3, #0]
   15adc:	e005      	b.n	15aea <glcd_draw_char_xy+0x176>
		}
		else{
			bytes_high = (font_current.height / 8);
   15ade:	4b89      	ldr	r3, [pc, #548]	; (15d04 <glcd_draw_char_xy+0x390>)
   15ae0:	795a      	ldrb	r2, [r3, #5]
   15ae2:	2324      	movs	r3, #36	; 0x24
   15ae4:	18fb      	adds	r3, r7, r3
   15ae6:	08d2      	lsrs	r2, r2, #3
   15ae8:	701a      	strb	r2, [r3, #0]
		}
		bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
   15aea:	4b86      	ldr	r3, [pc, #536]	; (15d04 <glcd_draw_char_xy+0x390>)
   15aec:	791b      	ldrb	r3, [r3, #4]
   15aee:	2224      	movs	r2, #36	; 0x24
   15af0:	18ba      	adds	r2, r7, r2
   15af2:	7812      	ldrb	r2, [r2, #0]
   15af4:	4353      	muls	r3, r2
   15af6:	b2da      	uxtb	r2, r3
   15af8:	2319      	movs	r3, #25
   15afa:	18fb      	adds	r3, r7, r3
   15afc:	3201      	adds	r2, #1
   15afe:	701a      	strb	r2, [r3, #0]
				
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   15b00:	4b80      	ldr	r3, [pc, #512]	; (15d04 <glcd_draw_char_xy+0x390>)
   15b02:	681b      	ldr	r3, [r3, #0]
   15b04:	1d7a      	adds	r2, r7, #5
   15b06:	7812      	ldrb	r2, [r2, #0]
   15b08:	497e      	ldr	r1, [pc, #504]	; (15d04 <glcd_draw_char_xy+0x390>)
   15b0a:	7989      	ldrb	r1, [r1, #6]
   15b0c:	1a52      	subs	r2, r2, r1
   15b0e:	2119      	movs	r1, #25
   15b10:	1879      	adds	r1, r7, r1
   15b12:	7809      	ldrb	r1, [r1, #0]
   15b14:	434a      	muls	r2, r1
   15b16:	189b      	adds	r3, r3, r2
   15b18:	617b      	str	r3, [r7, #20]

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
#else
		var_width = *p;
   15b1a:	2313      	movs	r3, #19
   15b1c:	18fb      	adds	r3, r7, r3
   15b1e:	697a      	ldr	r2, [r7, #20]
   15b20:	7812      	ldrb	r2, [r2, #0]
   15b22:	701a      	strb	r2, [r3, #0]
#endif
		p++; /* Step over the variable width field */
   15b24:	697b      	ldr	r3, [r7, #20]
   15b26:	3301      	adds	r3, #1
   15b28:	617b      	str	r3, [r7, #20]
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
   15b2a:	2325      	movs	r3, #37	; 0x25
   15b2c:	18fb      	adds	r3, r7, r3
   15b2e:	2200      	movs	r2, #0
   15b30:	701a      	strb	r2, [r3, #0]
   15b32:	e0a1      	b.n	15c78 <glcd_draw_char_xy+0x304>
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
   15b34:	2323      	movs	r3, #35	; 0x23
   15b36:	18fb      	adds	r3, r7, r3
   15b38:	2200      	movs	r2, #0
   15b3a:	701a      	strb	r2, [r3, #0]
   15b3c:	e08c      	b.n	15c58 <glcd_draw_char_xy+0x2e4>
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
   15b3e:	2325      	movs	r3, #37	; 0x25
   15b40:	18fb      	adds	r3, r7, r3
   15b42:	781b      	ldrb	r3, [r3, #0]
   15b44:	2224      	movs	r2, #36	; 0x24
   15b46:	18ba      	adds	r2, r7, r2
   15b48:	7812      	ldrb	r2, [r2, #0]
   15b4a:	4353      	muls	r3, r2
   15b4c:	001a      	movs	r2, r3
   15b4e:	2323      	movs	r3, #35	; 0x23
   15b50:	18fb      	adds	r3, r7, r3
   15b52:	781b      	ldrb	r3, [r3, #0]
   15b54:	18d3      	adds	r3, r2, r3
   15b56:	697a      	ldr	r2, [r7, #20]
   15b58:	18d2      	adds	r2, r2, r3
   15b5a:	2312      	movs	r3, #18
   15b5c:	18fb      	adds	r3, r7, r3
   15b5e:	7812      	ldrb	r2, [r2, #0]
   15b60:	701a      	strb	r2, [r3, #0]
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
   15b62:	2322      	movs	r3, #34	; 0x22
   15b64:	18fb      	adds	r3, r7, r3
   15b66:	2200      	movs	r2, #0
   15b68:	701a      	strb	r2, [r3, #0]
   15b6a:	e069      	b.n	15c40 <glcd_draw_char_xy+0x2cc>
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   15b6c:	1dfb      	adds	r3, r7, #7
   15b6e:	781a      	ldrb	r2, [r3, #0]
   15b70:	2325      	movs	r3, #37	; 0x25
   15b72:	18fb      	adds	r3, r7, r3
   15b74:	781b      	ldrb	r3, [r3, #0]
   15b76:	18d3      	adds	r3, r2, r3
   15b78:	2b7f      	cmp	r3, #127	; 0x7f
   15b7a:	dc0c      	bgt.n	15b96 <glcd_draw_char_xy+0x222>
   15b7c:	1dbb      	adds	r3, r7, #6
   15b7e:	781a      	ldrb	r2, [r3, #0]
   15b80:	2323      	movs	r3, #35	; 0x23
   15b82:	18fb      	adds	r3, r7, r3
   15b84:	781b      	ldrb	r3, [r3, #0]
   15b86:	00db      	lsls	r3, r3, #3
   15b88:	18d2      	adds	r2, r2, r3
   15b8a:	2322      	movs	r3, #34	; 0x22
   15b8c:	18fb      	adds	r3, r7, r3
   15b8e:	781b      	ldrb	r3, [r3, #0]
   15b90:	18d3      	adds	r3, r2, r3
   15b92:	2b3f      	cmp	r3, #63	; 0x3f
   15b94:	dd01      	ble.n	15b9a <glcd_draw_char_xy+0x226>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
   15b96:	2300      	movs	r3, #0
   15b98:	e1af      	b.n	15efa <glcd_draw_char_xy+0x586>
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
   15b9a:	2323      	movs	r3, #35	; 0x23
   15b9c:	18fb      	adds	r3, r7, r3
   15b9e:	781b      	ldrb	r3, [r3, #0]
   15ba0:	00da      	lsls	r2, r3, #3
   15ba2:	2322      	movs	r3, #34	; 0x22
   15ba4:	18fb      	adds	r3, r7, r3
   15ba6:	781b      	ldrb	r3, [r3, #0]
   15ba8:	18d3      	adds	r3, r2, r3
   15baa:	4a56      	ldr	r2, [pc, #344]	; (15d04 <glcd_draw_char_xy+0x390>)
   15bac:	7952      	ldrb	r2, [r2, #5]
   15bae:	4293      	cmp	r3, r2
   15bb0:	da3e      	bge.n	15c30 <glcd_draw_char_xy+0x2bc>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
   15bb2:	2312      	movs	r3, #18
   15bb4:	18fb      	adds	r3, r7, r3
   15bb6:	781a      	ldrb	r2, [r3, #0]
   15bb8:	2322      	movs	r3, #34	; 0x22
   15bba:	18fb      	adds	r3, r7, r3
   15bbc:	781b      	ldrb	r3, [r3, #0]
   15bbe:	411a      	asrs	r2, r3
   15bc0:	0013      	movs	r3, r2
   15bc2:	2201      	movs	r2, #1
   15bc4:	4013      	ands	r3, r2
   15bc6:	d019      	beq.n	15bfc <glcd_draw_char_xy+0x288>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   15bc8:	1dfa      	adds	r2, r7, #7
   15bca:	2325      	movs	r3, #37	; 0x25
   15bcc:	18fb      	adds	r3, r7, r3
   15bce:	7812      	ldrb	r2, [r2, #0]
   15bd0:	781b      	ldrb	r3, [r3, #0]
   15bd2:	18d3      	adds	r3, r2, r3
   15bd4:	b2d8      	uxtb	r0, r3
   15bd6:	2323      	movs	r3, #35	; 0x23
   15bd8:	18fb      	adds	r3, r7, r3
   15bda:	781b      	ldrb	r3, [r3, #0]
   15bdc:	00db      	lsls	r3, r3, #3
   15bde:	b2da      	uxtb	r2, r3
   15be0:	1dbb      	adds	r3, r7, #6
   15be2:	781b      	ldrb	r3, [r3, #0]
   15be4:	18d3      	adds	r3, r2, r3
   15be6:	b2da      	uxtb	r2, r3
   15be8:	2322      	movs	r3, #34	; 0x22
   15bea:	18fb      	adds	r3, r7, r3
   15bec:	781b      	ldrb	r3, [r3, #0]
   15bee:	18d3      	adds	r3, r2, r3
   15bf0:	b2db      	uxtb	r3, r3
   15bf2:	2201      	movs	r2, #1
   15bf4:	0019      	movs	r1, r3
   15bf6:	4b44      	ldr	r3, [pc, #272]	; (15d08 <glcd_draw_char_xy+0x394>)
   15bf8:	4798      	blx	r3
   15bfa:	e01a      	b.n	15c32 <glcd_draw_char_xy+0x2be>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   15bfc:	1dfa      	adds	r2, r7, #7
   15bfe:	2325      	movs	r3, #37	; 0x25
   15c00:	18fb      	adds	r3, r7, r3
   15c02:	7812      	ldrb	r2, [r2, #0]
   15c04:	781b      	ldrb	r3, [r3, #0]
   15c06:	18d3      	adds	r3, r2, r3
   15c08:	b2d8      	uxtb	r0, r3
   15c0a:	2323      	movs	r3, #35	; 0x23
   15c0c:	18fb      	adds	r3, r7, r3
   15c0e:	781b      	ldrb	r3, [r3, #0]
   15c10:	00db      	lsls	r3, r3, #3
   15c12:	b2da      	uxtb	r2, r3
   15c14:	1dbb      	adds	r3, r7, #6
   15c16:	781b      	ldrb	r3, [r3, #0]
   15c18:	18d3      	adds	r3, r2, r3
   15c1a:	b2da      	uxtb	r2, r3
   15c1c:	2322      	movs	r3, #34	; 0x22
   15c1e:	18fb      	adds	r3, r7, r3
   15c20:	781b      	ldrb	r3, [r3, #0]
   15c22:	18d3      	adds	r3, r2, r3
   15c24:	b2db      	uxtb	r3, r3
   15c26:	2200      	movs	r2, #0
   15c28:	0019      	movs	r1, r3
   15c2a:	4b37      	ldr	r3, [pc, #220]	; (15d08 <glcd_draw_char_xy+0x394>)
   15c2c:	4798      	blx	r3
   15c2e:	e000      	b.n	15c32 <glcd_draw_char_xy+0x2be>
						continue;
   15c30:	46c0      	nop			; (mov r8, r8)
				for (bit = 0; bit < 8; bit++) {
   15c32:	2322      	movs	r3, #34	; 0x22
   15c34:	18fb      	adds	r3, r7, r3
   15c36:	781a      	ldrb	r2, [r3, #0]
   15c38:	2322      	movs	r3, #34	; 0x22
   15c3a:	18fb      	adds	r3, r7, r3
   15c3c:	3201      	adds	r2, #1
   15c3e:	701a      	strb	r2, [r3, #0]
   15c40:	2322      	movs	r3, #34	; 0x22
   15c42:	18fb      	adds	r3, r7, r3
   15c44:	781b      	ldrb	r3, [r3, #0]
   15c46:	2b07      	cmp	r3, #7
   15c48:	d990      	bls.n	15b6c <glcd_draw_char_xy+0x1f8>
			for ( j = 0; j < bytes_high; j++ ) {
   15c4a:	2323      	movs	r3, #35	; 0x23
   15c4c:	18fb      	adds	r3, r7, r3
   15c4e:	781a      	ldrb	r2, [r3, #0]
   15c50:	2323      	movs	r3, #35	; 0x23
   15c52:	18fb      	adds	r3, r7, r3
   15c54:	3201      	adds	r2, #1
   15c56:	701a      	strb	r2, [r3, #0]
   15c58:	2323      	movs	r3, #35	; 0x23
   15c5a:	18fa      	adds	r2, r7, r3
   15c5c:	2324      	movs	r3, #36	; 0x24
   15c5e:	18fb      	adds	r3, r7, r3
   15c60:	7812      	ldrb	r2, [r2, #0]
   15c62:	781b      	ldrb	r3, [r3, #0]
   15c64:	429a      	cmp	r2, r3
   15c66:	d200      	bcs.n	15c6a <glcd_draw_char_xy+0x2f6>
   15c68:	e769      	b.n	15b3e <glcd_draw_char_xy+0x1ca>
		for ( i = 0; i < var_width; i++ ) {
   15c6a:	2325      	movs	r3, #37	; 0x25
   15c6c:	18fb      	adds	r3, r7, r3
   15c6e:	781a      	ldrb	r2, [r3, #0]
   15c70:	2325      	movs	r3, #37	; 0x25
   15c72:	18fb      	adds	r3, r7, r3
   15c74:	3201      	adds	r2, #1
   15c76:	701a      	strb	r2, [r3, #0]
   15c78:	2325      	movs	r3, #37	; 0x25
   15c7a:	18fa      	adds	r2, r7, r3
   15c7c:	2313      	movs	r3, #19
   15c7e:	18fb      	adds	r3, r7, r3
   15c80:	7812      	ldrb	r2, [r2, #0]
   15c82:	781b      	ldrb	r3, [r3, #0]
   15c84:	429a      	cmp	r2, r3
   15c86:	d200      	bcs.n	15c8a <glcd_draw_char_xy+0x316>
   15c88:	e754      	b.n	15b34 <glcd_draw_char_xy+0x1c0>
					}
				}									
			}				
		}
		return var_width;	
   15c8a:	2313      	movs	r3, #19
   15c8c:	18fb      	adds	r3, r7, r3
   15c8e:	781b      	ldrb	r3, [r3, #0]
   15c90:	e133      	b.n	15efa <glcd_draw_char_xy+0x586>
	
	} else if (font_current.table_type == GLCD_UTILS) {
   15c92:	4b1c      	ldr	r3, [pc, #112]	; (15d04 <glcd_draw_char_xy+0x390>)
   15c94:	7a1b      	ldrb	r3, [r3, #8]
   15c96:	2b02      	cmp	r3, #2
   15c98:	d000      	beq.n	15c9c <glcd_draw_char_xy+0x328>
   15c9a:	e12d      	b.n	15ef8 <glcd_draw_char_xy+0x584>
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;
		uint8_t j;
		
		bytes_high = font_current.height / 8 + 1;
   15c9c:	4b19      	ldr	r3, [pc, #100]	; (15d04 <glcd_draw_char_xy+0x390>)
   15c9e:	795b      	ldrb	r3, [r3, #5]
   15ca0:	08db      	lsrs	r3, r3, #3
   15ca2:	b2da      	uxtb	r2, r3
   15ca4:	2311      	movs	r3, #17
   15ca6:	18fb      	adds	r3, r7, r3
   15ca8:	3201      	adds	r2, #1
   15caa:	701a      	strb	r2, [r3, #0]
		bytes_per_char = font_current.width * bytes_high;
   15cac:	4b15      	ldr	r3, [pc, #84]	; (15d04 <glcd_draw_char_xy+0x390>)
   15cae:	791a      	ldrb	r2, [r3, #4]
   15cb0:	2310      	movs	r3, #16
   15cb2:	18fb      	adds	r3, r7, r3
   15cb4:	2111      	movs	r1, #17
   15cb6:	1879      	adds	r1, r7, r1
   15cb8:	7809      	ldrb	r1, [r1, #0]
   15cba:	434a      	muls	r2, r1
   15cbc:	701a      	strb	r2, [r3, #0]
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   15cbe:	4b11      	ldr	r3, [pc, #68]	; (15d04 <glcd_draw_char_xy+0x390>)
   15cc0:	681b      	ldr	r3, [r3, #0]
   15cc2:	1d7a      	adds	r2, r7, #5
   15cc4:	7812      	ldrb	r2, [r2, #0]
   15cc6:	490f      	ldr	r1, [pc, #60]	; (15d04 <glcd_draw_char_xy+0x390>)
   15cc8:	7989      	ldrb	r1, [r1, #6]
   15cca:	1a52      	subs	r2, r2, r1
   15ccc:	2110      	movs	r1, #16
   15cce:	1879      	adds	r1, r7, r1
   15cd0:	7809      	ldrb	r1, [r1, #0]
   15cd2:	434a      	muls	r2, r1
   15cd4:	189b      	adds	r3, r3, r2
   15cd6:	60fb      	str	r3, [r7, #12]

		/* Determine the width of the character */
		var_width = font_current.width;
   15cd8:	2321      	movs	r3, #33	; 0x21
   15cda:	18fb      	adds	r3, r7, r3
   15cdc:	4a09      	ldr	r2, [pc, #36]	; (15d04 <glcd_draw_char_xy+0x390>)
   15cde:	7912      	ldrb	r2, [r2, #4]
   15ce0:	701a      	strb	r2, [r3, #0]
		
		n = 0; /* How many columns back from the end */
   15ce2:	2320      	movs	r3, #32
   15ce4:	18fb      	adds	r3, r7, r3
   15ce6:	2200      	movs	r2, #0
   15ce8:	701a      	strb	r2, [r3, #0]
		
		while (1) {
			uint8_t max_byte = 0;
   15cea:	231e      	movs	r3, #30
   15cec:	18fb      	adds	r3, r7, r3
   15cee:	2200      	movs	r2, #0
   15cf0:	701a      	strb	r2, [r3, #0]
			uint8_t row = 0;
   15cf2:	231d      	movs	r3, #29
   15cf4:	18fb      	adds	r3, r7, r3
   15cf6:	2200      	movs	r2, #0
   15cf8:	701a      	strb	r2, [r3, #0]
			
			for (row = 0; row < bytes_high; row++) {
   15cfa:	231d      	movs	r3, #29
   15cfc:	18fb      	adds	r3, r7, r3
   15cfe:	2200      	movs	r2, #0
   15d00:	701a      	strb	r2, [r3, #0]
   15d02:	e022      	b.n	15d4a <glcd_draw_char_xy+0x3d6>
   15d04:	20001c14 	.word	0x20001c14
   15d08:	00015081 	.word	0x00015081
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
   15d0c:	4b7d      	ldr	r3, [pc, #500]	; (15f04 <glcd_draw_char_xy+0x590>)
   15d0e:	791b      	ldrb	r3, [r3, #4]
   15d10:	1e5a      	subs	r2, r3, #1
   15d12:	2320      	movs	r3, #32
   15d14:	18fb      	adds	r3, r7, r3
   15d16:	781b      	ldrb	r3, [r3, #0]
   15d18:	1ad3      	subs	r3, r2, r3
   15d1a:	b2da      	uxtb	r2, r3
   15d1c:	230b      	movs	r3, #11
   15d1e:	18fb      	adds	r3, r7, r3
   15d20:	211d      	movs	r1, #29
   15d22:	1879      	adds	r1, r7, r1
   15d24:	7809      	ldrb	r1, [r1, #0]
   15d26:	434a      	muls	r2, r1
   15d28:	701a      	strb	r2, [r3, #0]
				max_byte = *(p + offset);
   15d2a:	230b      	movs	r3, #11
   15d2c:	18fb      	adds	r3, r7, r3
   15d2e:	781b      	ldrb	r3, [r3, #0]
   15d30:	68fa      	ldr	r2, [r7, #12]
   15d32:	18d2      	adds	r2, r2, r3
   15d34:	231e      	movs	r3, #30
   15d36:	18fb      	adds	r3, r7, r3
   15d38:	7812      	ldrb	r2, [r2, #0]
   15d3a:	701a      	strb	r2, [r3, #0]
			for (row = 0; row < bytes_high; row++) {
   15d3c:	231d      	movs	r3, #29
   15d3e:	18fb      	adds	r3, r7, r3
   15d40:	781a      	ldrb	r2, [r3, #0]
   15d42:	231d      	movs	r3, #29
   15d44:	18fb      	adds	r3, r7, r3
   15d46:	3201      	adds	r2, #1
   15d48:	701a      	strb	r2, [r3, #0]
   15d4a:	231d      	movs	r3, #29
   15d4c:	18fa      	adds	r2, r7, r3
   15d4e:	2311      	movs	r3, #17
   15d50:	18fb      	adds	r3, r7, r3
   15d52:	7812      	ldrb	r2, [r2, #0]
   15d54:	781b      	ldrb	r3, [r3, #0]
   15d56:	429a      	cmp	r2, r3
   15d58:	d3d8      	bcc.n	15d0c <glcd_draw_char_xy+0x398>
			}
			if (max_byte == 0) {
   15d5a:	231e      	movs	r3, #30
   15d5c:	18fb      	adds	r3, r7, r3
   15d5e:	781b      	ldrb	r3, [r3, #0]
   15d60:	2b00      	cmp	r3, #0
   15d62:	d113      	bne.n	15d8c <glcd_draw_char_xy+0x418>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
   15d64:	2321      	movs	r3, #33	; 0x21
   15d66:	18fb      	adds	r3, r7, r3
   15d68:	781a      	ldrb	r2, [r3, #0]
   15d6a:	2321      	movs	r3, #33	; 0x21
   15d6c:	18fb      	adds	r3, r7, r3
   15d6e:	3a01      	subs	r2, #1
   15d70:	701a      	strb	r2, [r3, #0]
				if (var_width == 0) {
   15d72:	2321      	movs	r3, #33	; 0x21
   15d74:	18fb      	adds	r3, r7, r3
   15d76:	781b      	ldrb	r3, [r3, #0]
   15d78:	2b00      	cmp	r3, #0
   15d7a:	d009      	beq.n	15d90 <glcd_draw_char_xy+0x41c>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
   15d7c:	2320      	movs	r3, #32
   15d7e:	18fb      	adds	r3, r7, r3
   15d80:	781a      	ldrb	r2, [r3, #0]
   15d82:	2320      	movs	r3, #32
   15d84:	18fb      	adds	r3, r7, r3
   15d86:	3201      	adds	r2, #1
   15d88:	701a      	strb	r2, [r3, #0]
		while (1) {
   15d8a:	e7ae      	b.n	15cea <glcd_draw_char_xy+0x376>
				break; /* Part of a character was found */
   15d8c:	46c0      	nop			; (mov r8, r8)
   15d8e:	e000      	b.n	15d92 <glcd_draw_char_xy+0x41e>
					break;
   15d90:	46c0      	nop			; (mov r8, r8)
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		 /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
   15d92:	231f      	movs	r3, #31
   15d94:	18fb      	adds	r3, r7, r3
   15d96:	2200      	movs	r2, #0
   15d98:	701a      	strb	r2, [r3, #0]
   15d9a:	e0a0      	b.n	15ede <glcd_draw_char_xy+0x56a>
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
   15d9c:	231c      	movs	r3, #28
   15d9e:	18fb      	adds	r3, r7, r3
   15da0:	2200      	movs	r2, #0
   15da2:	701a      	strb	r2, [r3, #0]
   15da4:	e08b      	b.n	15ebe <glcd_draw_char_xy+0x54a>
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
   15da6:	231f      	movs	r3, #31
   15da8:	18fb      	adds	r3, r7, r3
   15daa:	781b      	ldrb	r3, [r3, #0]
   15dac:	4a55      	ldr	r2, [pc, #340]	; (15f04 <glcd_draw_char_xy+0x590>)
   15dae:	7912      	ldrb	r2, [r2, #4]
   15db0:	4353      	muls	r3, r2
   15db2:	001a      	movs	r2, r3
   15db4:	231c      	movs	r3, #28
   15db6:	18fb      	adds	r3, r7, r3
   15db8:	781b      	ldrb	r3, [r3, #0]
   15dba:	18d3      	adds	r3, r2, r3
   15dbc:	68fa      	ldr	r2, [r7, #12]
   15dbe:	18d2      	adds	r2, r2, r3
   15dc0:	230a      	movs	r3, #10
   15dc2:	18fb      	adds	r3, r7, r3
   15dc4:	7812      	ldrb	r2, [r2, #0]
   15dc6:	701a      	strb	r2, [r3, #0]
#endif
				
				for (bit = 0; bit < 8; bit++) {
   15dc8:	231b      	movs	r3, #27
   15dca:	18fb      	adds	r3, r7, r3
   15dcc:	2200      	movs	r2, #0
   15dce:	701a      	strb	r2, [r3, #0]
   15dd0:	e069      	b.n	15ea6 <glcd_draw_char_xy+0x532>
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   15dd2:	1dfb      	adds	r3, r7, #7
   15dd4:	781a      	ldrb	r2, [r3, #0]
   15dd6:	231c      	movs	r3, #28
   15dd8:	18fb      	adds	r3, r7, r3
   15dda:	781b      	ldrb	r3, [r3, #0]
   15ddc:	18d3      	adds	r3, r2, r3
   15dde:	2b7f      	cmp	r3, #127	; 0x7f
   15de0:	dc0c      	bgt.n	15dfc <glcd_draw_char_xy+0x488>
   15de2:	1dbb      	adds	r3, r7, #6
   15de4:	781a      	ldrb	r2, [r3, #0]
   15de6:	231f      	movs	r3, #31
   15de8:	18fb      	adds	r3, r7, r3
   15dea:	781b      	ldrb	r3, [r3, #0]
   15dec:	00db      	lsls	r3, r3, #3
   15dee:	18d2      	adds	r2, r2, r3
   15df0:	231b      	movs	r3, #27
   15df2:	18fb      	adds	r3, r7, r3
   15df4:	781b      	ldrb	r3, [r3, #0]
   15df6:	18d3      	adds	r3, r2, r3
   15df8:	2b3f      	cmp	r3, #63	; 0x3f
   15dfa:	dd01      	ble.n	15e00 <glcd_draw_char_xy+0x48c>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
   15dfc:	2300      	movs	r3, #0
   15dfe:	e07c      	b.n	15efa <glcd_draw_char_xy+0x586>
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
   15e00:	231f      	movs	r3, #31
   15e02:	18fb      	adds	r3, r7, r3
   15e04:	781b      	ldrb	r3, [r3, #0]
   15e06:	00da      	lsls	r2, r3, #3
   15e08:	231b      	movs	r3, #27
   15e0a:	18fb      	adds	r3, r7, r3
   15e0c:	781b      	ldrb	r3, [r3, #0]
   15e0e:	18d3      	adds	r3, r2, r3
   15e10:	4a3c      	ldr	r2, [pc, #240]	; (15f04 <glcd_draw_char_xy+0x590>)
   15e12:	7952      	ldrb	r2, [r2, #5]
   15e14:	4293      	cmp	r3, r2
   15e16:	da3e      	bge.n	15e96 <glcd_draw_char_xy+0x522>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
   15e18:	230a      	movs	r3, #10
   15e1a:	18fb      	adds	r3, r7, r3
   15e1c:	781a      	ldrb	r2, [r3, #0]
   15e1e:	231b      	movs	r3, #27
   15e20:	18fb      	adds	r3, r7, r3
   15e22:	781b      	ldrb	r3, [r3, #0]
   15e24:	411a      	asrs	r2, r3
   15e26:	0013      	movs	r3, r2
   15e28:	2201      	movs	r2, #1
   15e2a:	4013      	ands	r3, r2
   15e2c:	d019      	beq.n	15e62 <glcd_draw_char_xy+0x4ee>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   15e2e:	1dfa      	adds	r2, r7, #7
   15e30:	231c      	movs	r3, #28
   15e32:	18fb      	adds	r3, r7, r3
   15e34:	7812      	ldrb	r2, [r2, #0]
   15e36:	781b      	ldrb	r3, [r3, #0]
   15e38:	18d3      	adds	r3, r2, r3
   15e3a:	b2d8      	uxtb	r0, r3
   15e3c:	231f      	movs	r3, #31
   15e3e:	18fb      	adds	r3, r7, r3
   15e40:	781b      	ldrb	r3, [r3, #0]
   15e42:	00db      	lsls	r3, r3, #3
   15e44:	b2da      	uxtb	r2, r3
   15e46:	1dbb      	adds	r3, r7, #6
   15e48:	781b      	ldrb	r3, [r3, #0]
   15e4a:	18d3      	adds	r3, r2, r3
   15e4c:	b2da      	uxtb	r2, r3
   15e4e:	231b      	movs	r3, #27
   15e50:	18fb      	adds	r3, r7, r3
   15e52:	781b      	ldrb	r3, [r3, #0]
   15e54:	18d3      	adds	r3, r2, r3
   15e56:	b2db      	uxtb	r3, r3
   15e58:	2201      	movs	r2, #1
   15e5a:	0019      	movs	r1, r3
   15e5c:	4b2a      	ldr	r3, [pc, #168]	; (15f08 <glcd_draw_char_xy+0x594>)
   15e5e:	4798      	blx	r3
   15e60:	e01a      	b.n	15e98 <glcd_draw_char_xy+0x524>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   15e62:	1dfa      	adds	r2, r7, #7
   15e64:	231c      	movs	r3, #28
   15e66:	18fb      	adds	r3, r7, r3
   15e68:	7812      	ldrb	r2, [r2, #0]
   15e6a:	781b      	ldrb	r3, [r3, #0]
   15e6c:	18d3      	adds	r3, r2, r3
   15e6e:	b2d8      	uxtb	r0, r3
   15e70:	231f      	movs	r3, #31
   15e72:	18fb      	adds	r3, r7, r3
   15e74:	781b      	ldrb	r3, [r3, #0]
   15e76:	00db      	lsls	r3, r3, #3
   15e78:	b2da      	uxtb	r2, r3
   15e7a:	1dbb      	adds	r3, r7, #6
   15e7c:	781b      	ldrb	r3, [r3, #0]
   15e7e:	18d3      	adds	r3, r2, r3
   15e80:	b2da      	uxtb	r2, r3
   15e82:	231b      	movs	r3, #27
   15e84:	18fb      	adds	r3, r7, r3
   15e86:	781b      	ldrb	r3, [r3, #0]
   15e88:	18d3      	adds	r3, r2, r3
   15e8a:	b2db      	uxtb	r3, r3
   15e8c:	2200      	movs	r2, #0
   15e8e:	0019      	movs	r1, r3
   15e90:	4b1d      	ldr	r3, [pc, #116]	; (15f08 <glcd_draw_char_xy+0x594>)
   15e92:	4798      	blx	r3
   15e94:	e000      	b.n	15e98 <glcd_draw_char_xy+0x524>
						continue;
   15e96:	46c0      	nop			; (mov r8, r8)
				for (bit = 0; bit < 8; bit++) {
   15e98:	231b      	movs	r3, #27
   15e9a:	18fb      	adds	r3, r7, r3
   15e9c:	781a      	ldrb	r2, [r3, #0]
   15e9e:	231b      	movs	r3, #27
   15ea0:	18fb      	adds	r3, r7, r3
   15ea2:	3201      	adds	r2, #1
   15ea4:	701a      	strb	r2, [r3, #0]
   15ea6:	231b      	movs	r3, #27
   15ea8:	18fb      	adds	r3, r7, r3
   15eaa:	781b      	ldrb	r3, [r3, #0]
   15eac:	2b07      	cmp	r3, #7
   15eae:	d990      	bls.n	15dd2 <glcd_draw_char_xy+0x45e>
			for ( i = 0; i < var_width; i++ ) {
   15eb0:	231c      	movs	r3, #28
   15eb2:	18fb      	adds	r3, r7, r3
   15eb4:	781a      	ldrb	r2, [r3, #0]
   15eb6:	231c      	movs	r3, #28
   15eb8:	18fb      	adds	r3, r7, r3
   15eba:	3201      	adds	r2, #1
   15ebc:	701a      	strb	r2, [r3, #0]
   15ebe:	231c      	movs	r3, #28
   15ec0:	18fa      	adds	r2, r7, r3
   15ec2:	2321      	movs	r3, #33	; 0x21
   15ec4:	18fb      	adds	r3, r7, r3
   15ec6:	7812      	ldrb	r2, [r2, #0]
   15ec8:	781b      	ldrb	r3, [r3, #0]
   15eca:	429a      	cmp	r2, r3
   15ecc:	d200      	bcs.n	15ed0 <glcd_draw_char_xy+0x55c>
   15ece:	e76a      	b.n	15da6 <glcd_draw_char_xy+0x432>
		for ( j = 0; j < bytes_high; j++ ) {
   15ed0:	231f      	movs	r3, #31
   15ed2:	18fb      	adds	r3, r7, r3
   15ed4:	781a      	ldrb	r2, [r3, #0]
   15ed6:	231f      	movs	r3, #31
   15ed8:	18fb      	adds	r3, r7, r3
   15eda:	3201      	adds	r2, #1
   15edc:	701a      	strb	r2, [r3, #0]
   15ede:	231f      	movs	r3, #31
   15ee0:	18fa      	adds	r2, r7, r3
   15ee2:	2311      	movs	r3, #17
   15ee4:	18fb      	adds	r3, r7, r3
   15ee6:	7812      	ldrb	r2, [r2, #0]
   15ee8:	781b      	ldrb	r3, [r3, #0]
   15eea:	429a      	cmp	r2, r3
   15eec:	d200      	bcs.n	15ef0 <glcd_draw_char_xy+0x57c>
   15eee:	e755      	b.n	15d9c <glcd_draw_char_xy+0x428>
					}
				}									
			} /* i */
		} /* j */
		
		return var_width; /* Number of columns written to display */
   15ef0:	2321      	movs	r3, #33	; 0x21
   15ef2:	18fb      	adds	r3, r7, r3
   15ef4:	781b      	ldrb	r3, [r3, #0]
   15ef6:	e000      	b.n	15efa <glcd_draw_char_xy+0x586>
		
	} else {
		/* Don't recognise the font table */
		return 0;
   15ef8:	2300      	movs	r3, #0
		
	}

}
   15efa:	0018      	movs	r0, r3
   15efc:	46bd      	mov	sp, r7
   15efe:	b00b      	add	sp, #44	; 0x2c
   15f00:	bd90      	pop	{r4, r7, pc}
   15f02:	46c0      	nop			; (mov r8, r8)
   15f04:	20001c14 	.word	0x20001c14
   15f08:	00015081 	.word	0x00015081

00015f0c <glcd_draw_string_xy>:

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
   15f0c:	b590      	push	{r4, r7, lr}
   15f0e:	b085      	sub	sp, #20
   15f10:	af00      	add	r7, sp, #0
   15f12:	603a      	str	r2, [r7, #0]
   15f14:	1dfb      	adds	r3, r7, #7
   15f16:	1c02      	adds	r2, r0, #0
   15f18:	701a      	strb	r2, [r3, #0]
   15f1a:	1dbb      	adds	r3, r7, #6
   15f1c:	1c0a      	adds	r2, r1, #0
   15f1e:	701a      	strb	r2, [r3, #0]
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   15f20:	1dbb      	adds	r3, r7, #6
   15f22:	781a      	ldrb	r2, [r3, #0]
   15f24:	4b15      	ldr	r3, [pc, #84]	; (15f7c <glcd_draw_string_xy+0x70>)
   15f26:	795b      	ldrb	r3, [r3, #5]
   15f28:	0019      	movs	r1, r3
   15f2a:	233f      	movs	r3, #63	; 0x3f
   15f2c:	1a5b      	subs	r3, r3, r1
   15f2e:	429a      	cmp	r2, r3
   15f30:	dc1f      	bgt.n	15f72 <glcd_draw_string_xy+0x66>
		/* Character won't fit */
		return;
	}

	while (*c) {
   15f32:	e019      	b.n	15f68 <glcd_draw_string_xy+0x5c>
		width = glcd_draw_char_xy(x,y,*c);
   15f34:	683b      	ldr	r3, [r7, #0]
   15f36:	781a      	ldrb	r2, [r3, #0]
   15f38:	230f      	movs	r3, #15
   15f3a:	18fc      	adds	r4, r7, r3
   15f3c:	1dbb      	adds	r3, r7, #6
   15f3e:	7819      	ldrb	r1, [r3, #0]
   15f40:	1dfb      	adds	r3, r7, #7
   15f42:	781b      	ldrb	r3, [r3, #0]
   15f44:	0018      	movs	r0, r3
   15f46:	4b0e      	ldr	r3, [pc, #56]	; (15f80 <glcd_draw_string_xy+0x74>)
   15f48:	4798      	blx	r3
   15f4a:	0003      	movs	r3, r0
   15f4c:	7023      	strb	r3, [r4, #0]
		x += (width + 1);
   15f4e:	230f      	movs	r3, #15
   15f50:	18fa      	adds	r2, r7, r3
   15f52:	1dfb      	adds	r3, r7, #7
   15f54:	7812      	ldrb	r2, [r2, #0]
   15f56:	781b      	ldrb	r3, [r3, #0]
   15f58:	18d3      	adds	r3, r2, r3
   15f5a:	b2da      	uxtb	r2, r3
   15f5c:	1dfb      	adds	r3, r7, #7
   15f5e:	3201      	adds	r2, #1
   15f60:	701a      	strb	r2, [r3, #0]
		c++;
   15f62:	683b      	ldr	r3, [r7, #0]
   15f64:	3301      	adds	r3, #1
   15f66:	603b      	str	r3, [r7, #0]
	while (*c) {
   15f68:	683b      	ldr	r3, [r7, #0]
   15f6a:	781b      	ldrb	r3, [r3, #0]
   15f6c:	2b00      	cmp	r3, #0
   15f6e:	d1e1      	bne.n	15f34 <glcd_draw_string_xy+0x28>
   15f70:	e000      	b.n	15f74 <glcd_draw_string_xy+0x68>
		return;
   15f72:	46c0      	nop			; (mov r8, r8)
	}		
}
   15f74:	46bd      	mov	sp, r7
   15f76:	b005      	add	sp, #20
   15f78:	bd90      	pop	{r4, r7, pc}
   15f7a:	46c0      	nop			; (mov r8, r8)
   15f7c:	20001c14 	.word	0x20001c14
   15f80:	00015975 	.word	0x00015975

00015f84 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
   15f84:	b590      	push	{r4, r7, lr}
   15f86:	b083      	sub	sp, #12
   15f88:	af00      	add	r7, sp, #0
   15f8a:	6078      	str	r0, [r7, #4]
   15f8c:	000c      	movs	r4, r1
   15f8e:	0010      	movs	r0, r2
   15f90:	0019      	movs	r1, r3
   15f92:	1cfb      	adds	r3, r7, #3
   15f94:	1c22      	adds	r2, r4, #0
   15f96:	701a      	strb	r2, [r3, #0]
   15f98:	1cbb      	adds	r3, r7, #2
   15f9a:	1c02      	adds	r2, r0, #0
   15f9c:	701a      	strb	r2, [r3, #0]
   15f9e:	1c7b      	adds	r3, r7, #1
   15fa0:	1c0a      	adds	r2, r1, #0
   15fa2:	701a      	strb	r2, [r3, #0]
	font_current.font_table = font_table;
   15fa4:	4b0d      	ldr	r3, [pc, #52]	; (15fdc <glcd_tiny_set_font+0x58>)
   15fa6:	687a      	ldr	r2, [r7, #4]
   15fa8:	601a      	str	r2, [r3, #0]
	font_current.width = width;
   15faa:	4b0c      	ldr	r3, [pc, #48]	; (15fdc <glcd_tiny_set_font+0x58>)
   15fac:	1cfa      	adds	r2, r7, #3
   15fae:	7812      	ldrb	r2, [r2, #0]
   15fb0:	711a      	strb	r2, [r3, #4]
	font_current.height = height;
   15fb2:	4b0a      	ldr	r3, [pc, #40]	; (15fdc <glcd_tiny_set_font+0x58>)
   15fb4:	1cba      	adds	r2, r7, #2
   15fb6:	7812      	ldrb	r2, [r2, #0]
   15fb8:	715a      	strb	r2, [r3, #5]
	font_current.start_char = start_char;
   15fba:	4b08      	ldr	r3, [pc, #32]	; (15fdc <glcd_tiny_set_font+0x58>)
   15fbc:	1c7a      	adds	r2, r7, #1
   15fbe:	7812      	ldrb	r2, [r2, #0]
   15fc0:	719a      	strb	r2, [r3, #6]
	font_current.end_char = end_char;
   15fc2:	4b06      	ldr	r3, [pc, #24]	; (15fdc <glcd_tiny_set_font+0x58>)
   15fc4:	2218      	movs	r2, #24
   15fc6:	18ba      	adds	r2, r7, r2
   15fc8:	7812      	ldrb	r2, [r2, #0]
   15fca:	71da      	strb	r2, [r3, #7]
	font_current.table_type = STANG;
   15fcc:	4b03      	ldr	r3, [pc, #12]	; (15fdc <glcd_tiny_set_font+0x58>)
   15fce:	2200      	movs	r2, #0
   15fd0:	721a      	strb	r2, [r3, #8]
}
   15fd2:	46c0      	nop			; (mov r8, r8)
   15fd4:	46bd      	mov	sp, r7
   15fd6:	b003      	add	sp, #12
   15fd8:	bd90      	pop	{r4, r7, pc}
   15fda:	46c0      	nop			; (mov r8, r8)
   15fdc:	20001c14 	.word	0x20001c14

00015fe0 <glcd_tiny_draw_char>:

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
   15fe0:	b590      	push	{r4, r7, lr}
   15fe2:	b085      	sub	sp, #20
   15fe4:	af00      	add	r7, sp, #0
   15fe6:	0004      	movs	r4, r0
   15fe8:	0008      	movs	r0, r1
   15fea:	0011      	movs	r1, r2
   15fec:	1dfb      	adds	r3, r7, #7
   15fee:	1c22      	adds	r2, r4, #0
   15ff0:	701a      	strb	r2, [r3, #0]
   15ff2:	1dbb      	adds	r3, r7, #6
   15ff4:	1c02      	adds	r2, r0, #0
   15ff6:	701a      	strb	r2, [r3, #0]
   15ff8:	1d7b      	adds	r3, r7, #5
   15ffa:	1c0a      	adds	r2, r1, #0
   15ffc:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
   15ffe:	4b40      	ldr	r3, [pc, #256]	; (16100 <glcd_tiny_draw_char+0x120>)
   16000:	795b      	ldrb	r3, [r3, #5]
   16002:	2b07      	cmp	r3, #7
   16004:	d873      	bhi.n	160ee <glcd_tiny_draw_char+0x10e>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
   16006:	4b3e      	ldr	r3, [pc, #248]	; (16100 <glcd_tiny_draw_char+0x120>)
   16008:	799b      	ldrb	r3, [r3, #6]
   1600a:	1d7a      	adds	r2, r7, #5
   1600c:	7812      	ldrb	r2, [r2, #0]
   1600e:	429a      	cmp	r2, r3
   16010:	d305      	bcc.n	1601e <glcd_tiny_draw_char+0x3e>
   16012:	4b3b      	ldr	r3, [pc, #236]	; (16100 <glcd_tiny_draw_char+0x120>)
   16014:	79db      	ldrb	r3, [r3, #7]
   16016:	1d7a      	adds	r2, r7, #5
   16018:	7812      	ldrb	r2, [r2, #0]
   1601a:	429a      	cmp	r2, r3
   1601c:	d902      	bls.n	16024 <glcd_tiny_draw_char+0x44>
		c = '.';
   1601e:	1d7b      	adds	r3, r7, #5
   16020:	222e      	movs	r2, #46	; 0x2e
   16022:	701a      	strb	r2, [r3, #0]
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
   16024:	1dbb      	adds	r3, r7, #6
   16026:	781c      	ldrb	r4, [r3, #0]
   16028:	4b35      	ldr	r3, [pc, #212]	; (16100 <glcd_tiny_draw_char+0x120>)
   1602a:	795b      	ldrb	r3, [r3, #5]
   1602c:	1c5a      	adds	r2, r3, #1
   1602e:	4b35      	ldr	r3, [pc, #212]	; (16104 <glcd_tiny_draw_char+0x124>)
   16030:	0011      	movs	r1, r2
   16032:	2040      	movs	r0, #64	; 0x40
   16034:	4798      	blx	r3
   16036:	0003      	movs	r3, r0
   16038:	429c      	cmp	r4, r3
   1603a:	da5a      	bge.n	160f2 <glcd_tiny_draw_char+0x112>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
   1603c:	1dfb      	adds	r3, r7, #7
   1603e:	781b      	ldrb	r3, [r3, #0]
   16040:	4a2f      	ldr	r2, [pc, #188]	; (16100 <glcd_tiny_draw_char+0x120>)
   16042:	7912      	ldrb	r2, [r2, #4]
   16044:	189b      	adds	r3, r3, r2
   16046:	2b7f      	cmp	r3, #127	; 0x7f
   16048:	dc55      	bgt.n	160f6 <glcd_tiny_draw_char+0x116>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
   1604a:	4b2d      	ldr	r3, [pc, #180]	; (16100 <glcd_tiny_draw_char+0x120>)
   1604c:	795b      	ldrb	r3, [r3, #5]
   1604e:	3301      	adds	r3, #1
   16050:	b2db      	uxtb	r3, r3
   16052:	1dba      	adds	r2, r7, #6
   16054:	7812      	ldrb	r2, [r2, #0]
   16056:	4353      	muls	r3, r2
   16058:	b2d9      	uxtb	r1, r3
   1605a:	4b29      	ldr	r3, [pc, #164]	; (16100 <glcd_tiny_draw_char+0x120>)
   1605c:	791a      	ldrb	r2, [r3, #4]
   1605e:	1dfb      	adds	r3, r7, #7
   16060:	781b      	ldrb	r3, [r3, #0]
   16062:	18d3      	adds	r3, r2, r3
   16064:	b2dc      	uxtb	r4, r3
   16066:	1dbb      	adds	r3, r7, #6
   16068:	781b      	ldrb	r3, [r3, #0]
   1606a:	3301      	adds	r3, #1
   1606c:	b2db      	uxtb	r3, r3
   1606e:	4a24      	ldr	r2, [pc, #144]	; (16100 <glcd_tiny_draw_char+0x120>)
   16070:	7952      	ldrb	r2, [r2, #5]
   16072:	3201      	adds	r2, #1
   16074:	b2d2      	uxtb	r2, r2
   16076:	4353      	muls	r3, r2
   16078:	b2da      	uxtb	r2, r3
   1607a:	1dfb      	adds	r3, r7, #7
   1607c:	7818      	ldrb	r0, [r3, #0]
   1607e:	0013      	movs	r3, r2
   16080:	0022      	movs	r2, r4
   16082:	4c21      	ldr	r4, [pc, #132]	; (16108 <glcd_tiny_draw_char+0x128>)
   16084:	47a0      	blx	r4
	
	for ( i = 0; i < font_current.width; i++ ) {
   16086:	230f      	movs	r3, #15
   16088:	18fb      	adds	r3, r7, r3
   1608a:	2200      	movs	r2, #0
   1608c:	701a      	strb	r2, [r3, #0]
   1608e:	e026      	b.n	160de <glcd_tiny_draw_char+0xfe>
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   16090:	4b1e      	ldr	r3, [pc, #120]	; (1610c <glcd_tiny_draw_char+0x12c>)
   16092:	681b      	ldr	r3, [r3, #0]
   16094:	1dfa      	adds	r2, r7, #7
   16096:	7811      	ldrb	r1, [r2, #0]
   16098:	1dba      	adds	r2, r7, #6
   1609a:	7812      	ldrb	r2, [r2, #0]
   1609c:	01d2      	lsls	r2, r2, #7
   1609e:	188a      	adds	r2, r1, r2
   160a0:	189a      	adds	r2, r3, r2
   160a2:	4b17      	ldr	r3, [pc, #92]	; (16100 <glcd_tiny_draw_char+0x120>)
   160a4:	6819      	ldr	r1, [r3, #0]
   160a6:	1d7b      	adds	r3, r7, #5
   160a8:	781b      	ldrb	r3, [r3, #0]
   160aa:	4815      	ldr	r0, [pc, #84]	; (16100 <glcd_tiny_draw_char+0x120>)
   160ac:	7980      	ldrb	r0, [r0, #6]
   160ae:	1a1b      	subs	r3, r3, r0
   160b0:	4813      	ldr	r0, [pc, #76]	; (16100 <glcd_tiny_draw_char+0x120>)
   160b2:	7900      	ldrb	r0, [r0, #4]
   160b4:	4343      	muls	r3, r0
   160b6:	0018      	movs	r0, r3
   160b8:	230f      	movs	r3, #15
   160ba:	18fb      	adds	r3, r7, r3
   160bc:	781b      	ldrb	r3, [r3, #0]
   160be:	18c3      	adds	r3, r0, r3
   160c0:	18cb      	adds	r3, r1, r3
   160c2:	781b      	ldrb	r3, [r3, #0]
   160c4:	7013      	strb	r3, [r2, #0]
#endif
		x++;
   160c6:	1dfb      	adds	r3, r7, #7
   160c8:	781a      	ldrb	r2, [r3, #0]
   160ca:	1dfb      	adds	r3, r7, #7
   160cc:	3201      	adds	r2, #1
   160ce:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < font_current.width; i++ ) {
   160d0:	230f      	movs	r3, #15
   160d2:	18fb      	adds	r3, r7, r3
   160d4:	781a      	ldrb	r2, [r3, #0]
   160d6:	230f      	movs	r3, #15
   160d8:	18fb      	adds	r3, r7, r3
   160da:	3201      	adds	r2, #1
   160dc:	701a      	strb	r2, [r3, #0]
   160de:	4b08      	ldr	r3, [pc, #32]	; (16100 <glcd_tiny_draw_char+0x120>)
   160e0:	791b      	ldrb	r3, [r3, #4]
   160e2:	220f      	movs	r2, #15
   160e4:	18ba      	adds	r2, r7, r2
   160e6:	7812      	ldrb	r2, [r2, #0]
   160e8:	429a      	cmp	r2, r3
   160ea:	d3d1      	bcc.n	16090 <glcd_tiny_draw_char+0xb0>
   160ec:	e004      	b.n	160f8 <glcd_tiny_draw_char+0x118>
		return;
   160ee:	46c0      	nop			; (mov r8, r8)
   160f0:	e002      	b.n	160f8 <glcd_tiny_draw_char+0x118>
		return;
   160f2:	46c0      	nop			; (mov r8, r8)
   160f4:	e000      	b.n	160f8 <glcd_tiny_draw_char+0x118>
		return;
   160f6:	46c0      	nop			; (mov r8, r8)
	}
}
   160f8:	46bd      	mov	sp, r7
   160fa:	b005      	add	sp, #20
   160fc:	bd90      	pop	{r4, r7, pc}
   160fe:	46c0      	nop			; (mov r8, r8)
   16100:	20001c14 	.word	0x20001c14
   16104:	00020cd1 	.word	0x00020cd1
   16108:	00014f25 	.word	0x00014f25
   1610c:	20001c0c 	.word	0x20001c0c

00016110 <glcd_tiny_draw_string>:

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
   16110:	b590      	push	{r4, r7, lr}
   16112:	b083      	sub	sp, #12
   16114:	af00      	add	r7, sp, #0
   16116:	603a      	str	r2, [r7, #0]
   16118:	1dfb      	adds	r3, r7, #7
   1611a:	1c02      	adds	r2, r0, #0
   1611c:	701a      	strb	r2, [r3, #0]
   1611e:	1dbb      	adds	r3, r7, #6
   16120:	1c0a      	adds	r2, r1, #0
   16122:	701a      	strb	r2, [r3, #0]
	if (font_current.height >= 8) {
   16124:	4b1f      	ldr	r3, [pc, #124]	; (161a4 <glcd_tiny_draw_string+0x94>)
   16126:	795b      	ldrb	r3, [r3, #5]
   16128:	2b07      	cmp	r3, #7
   1612a:	d835      	bhi.n	16198 <glcd_tiny_draw_string+0x88>
		return;
	}
	while (*str) {
   1612c:	e02f      	b.n	1618e <glcd_tiny_draw_string+0x7e>
		glcd_tiny_draw_char(x, line, *str++);
   1612e:	683b      	ldr	r3, [r7, #0]
   16130:	1c5a      	adds	r2, r3, #1
   16132:	603a      	str	r2, [r7, #0]
   16134:	781a      	ldrb	r2, [r3, #0]
   16136:	1dbb      	adds	r3, r7, #6
   16138:	7819      	ldrb	r1, [r3, #0]
   1613a:	1dfb      	adds	r3, r7, #7
   1613c:	781b      	ldrb	r3, [r3, #0]
   1613e:	0018      	movs	r0, r3
   16140:	4b19      	ldr	r3, [pc, #100]	; (161a8 <glcd_tiny_draw_string+0x98>)
   16142:	4798      	blx	r3
		x += (font_current.width + 1);
   16144:	4b17      	ldr	r3, [pc, #92]	; (161a4 <glcd_tiny_draw_string+0x94>)
   16146:	791a      	ldrb	r2, [r3, #4]
   16148:	1dfb      	adds	r3, r7, #7
   1614a:	781b      	ldrb	r3, [r3, #0]
   1614c:	18d3      	adds	r3, r2, r3
   1614e:	b2da      	uxtb	r2, r3
   16150:	1dfb      	adds	r3, r7, #7
   16152:	3201      	adds	r2, #1
   16154:	701a      	strb	r2, [r3, #0]
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   16156:	1dfb      	adds	r3, r7, #7
   16158:	781b      	ldrb	r3, [r3, #0]
   1615a:	4a12      	ldr	r2, [pc, #72]	; (161a4 <glcd_tiny_draw_string+0x94>)
   1615c:	7912      	ldrb	r2, [r2, #4]
   1615e:	189b      	adds	r3, r3, r2
   16160:	3301      	adds	r3, #1
   16162:	2b80      	cmp	r3, #128	; 0x80
   16164:	dd07      	ble.n	16176 <glcd_tiny_draw_string+0x66>
			x = 0; /* Ran out of this line */
   16166:	1dfb      	adds	r3, r7, #7
   16168:	2200      	movs	r2, #0
   1616a:	701a      	strb	r2, [r3, #0]
			line++;
   1616c:	1dbb      	adds	r3, r7, #6
   1616e:	781a      	ldrb	r2, [r3, #0]
   16170:	1dbb      	adds	r3, r7, #6
   16172:	3201      	adds	r2, #1
   16174:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
   16176:	1dbb      	adds	r3, r7, #6
   16178:	781c      	ldrb	r4, [r3, #0]
   1617a:	4b0a      	ldr	r3, [pc, #40]	; (161a4 <glcd_tiny_draw_string+0x94>)
   1617c:	795b      	ldrb	r3, [r3, #5]
   1617e:	1c5a      	adds	r2, r3, #1
   16180:	4b0a      	ldr	r3, [pc, #40]	; (161ac <glcd_tiny_draw_string+0x9c>)
   16182:	0011      	movs	r1, r2
   16184:	2040      	movs	r0, #64	; 0x40
   16186:	4798      	blx	r3
   16188:	0003      	movs	r3, r0
   1618a:	429c      	cmp	r4, r3
   1618c:	da06      	bge.n	1619c <glcd_tiny_draw_string+0x8c>
	while (*str) {
   1618e:	683b      	ldr	r3, [r7, #0]
   16190:	781b      	ldrb	r3, [r3, #0]
   16192:	2b00      	cmp	r3, #0
   16194:	d1cb      	bne.n	1612e <glcd_tiny_draw_string+0x1e>
   16196:	e002      	b.n	1619e <glcd_tiny_draw_string+0x8e>
		return;
   16198:	46c0      	nop			; (mov r8, r8)
   1619a:	e000      	b.n	1619e <glcd_tiny_draw_string+0x8e>
			return; /* Ran out of space :( */
   1619c:	46c0      	nop			; (mov r8, r8)
	}
}
   1619e:	46bd      	mov	sp, r7
   161a0:	b003      	add	sp, #12
   161a2:	bd90      	pop	{r4, r7, pc}
   161a4:	20001c14 	.word	0x20001c14
   161a8:	00015fe1 	.word	0x00015fe1
   161ac:	00020cd1 	.word	0x00020cd1

000161b0 <system_gclk_chan_get_config_defaults>:
{
   161b0:	b580      	push	{r7, lr}
   161b2:	b082      	sub	sp, #8
   161b4:	af00      	add	r7, sp, #0
   161b6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   161b8:	687b      	ldr	r3, [r7, #4]
   161ba:	2200      	movs	r2, #0
   161bc:	701a      	strb	r2, [r3, #0]
}
   161be:	46c0      	nop			; (mov r8, r8)
   161c0:	46bd      	mov	sp, r7
   161c2:	b002      	add	sp, #8
   161c4:	bd80      	pop	{r7, pc}
	...

000161c8 <system_apb_clock_set_mask>:
{
   161c8:	b580      	push	{r7, lr}
   161ca:	b082      	sub	sp, #8
   161cc:	af00      	add	r7, sp, #0
   161ce:	0002      	movs	r2, r0
   161d0:	6039      	str	r1, [r7, #0]
   161d2:	1dfb      	adds	r3, r7, #7
   161d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   161d6:	1dfb      	adds	r3, r7, #7
   161d8:	781b      	ldrb	r3, [r3, #0]
   161da:	2b04      	cmp	r3, #4
   161dc:	d827      	bhi.n	1622e <system_apb_clock_set_mask+0x66>
   161de:	009a      	lsls	r2, r3, #2
   161e0:	4b16      	ldr	r3, [pc, #88]	; (1623c <system_apb_clock_set_mask+0x74>)
   161e2:	18d3      	adds	r3, r2, r3
   161e4:	681b      	ldr	r3, [r3, #0]
   161e6:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   161e8:	4b15      	ldr	r3, [pc, #84]	; (16240 <system_apb_clock_set_mask+0x78>)
   161ea:	4a15      	ldr	r2, [pc, #84]	; (16240 <system_apb_clock_set_mask+0x78>)
   161ec:	6951      	ldr	r1, [r2, #20]
   161ee:	683a      	ldr	r2, [r7, #0]
   161f0:	430a      	orrs	r2, r1
   161f2:	615a      	str	r2, [r3, #20]
			break;
   161f4:	e01d      	b.n	16232 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   161f6:	4b12      	ldr	r3, [pc, #72]	; (16240 <system_apb_clock_set_mask+0x78>)
   161f8:	4a11      	ldr	r2, [pc, #68]	; (16240 <system_apb_clock_set_mask+0x78>)
   161fa:	6991      	ldr	r1, [r2, #24]
   161fc:	683a      	ldr	r2, [r7, #0]
   161fe:	430a      	orrs	r2, r1
   16200:	619a      	str	r2, [r3, #24]
			break;
   16202:	e016      	b.n	16232 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   16204:	4b0e      	ldr	r3, [pc, #56]	; (16240 <system_apb_clock_set_mask+0x78>)
   16206:	4a0e      	ldr	r2, [pc, #56]	; (16240 <system_apb_clock_set_mask+0x78>)
   16208:	69d1      	ldr	r1, [r2, #28]
   1620a:	683a      	ldr	r2, [r7, #0]
   1620c:	430a      	orrs	r2, r1
   1620e:	61da      	str	r2, [r3, #28]
			break;
   16210:	e00f      	b.n	16232 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   16212:	4b0b      	ldr	r3, [pc, #44]	; (16240 <system_apb_clock_set_mask+0x78>)
   16214:	4a0a      	ldr	r2, [pc, #40]	; (16240 <system_apb_clock_set_mask+0x78>)
   16216:	6a11      	ldr	r1, [r2, #32]
   16218:	683a      	ldr	r2, [r7, #0]
   1621a:	430a      	orrs	r2, r1
   1621c:	621a      	str	r2, [r3, #32]
			break;
   1621e:	e008      	b.n	16232 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   16220:	4b07      	ldr	r3, [pc, #28]	; (16240 <system_apb_clock_set_mask+0x78>)
   16222:	4a07      	ldr	r2, [pc, #28]	; (16240 <system_apb_clock_set_mask+0x78>)
   16224:	6a51      	ldr	r1, [r2, #36]	; 0x24
   16226:	683a      	ldr	r2, [r7, #0]
   16228:	430a      	orrs	r2, r1
   1622a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   1622c:	e001      	b.n	16232 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   1622e:	2317      	movs	r3, #23
   16230:	e000      	b.n	16234 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   16232:	2300      	movs	r3, #0
}
   16234:	0018      	movs	r0, r3
   16236:	46bd      	mov	sp, r7
   16238:	b002      	add	sp, #8
   1623a:	bd80      	pop	{r7, pc}
   1623c:	00028ac0 	.word	0x00028ac0
   16240:	40000400 	.word	0x40000400

00016244 <system_pinmux_get_config_defaults>:
{
   16244:	b580      	push	{r7, lr}
   16246:	b082      	sub	sp, #8
   16248:	af00      	add	r7, sp, #0
   1624a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1624c:	687b      	ldr	r3, [r7, #4]
   1624e:	2280      	movs	r2, #128	; 0x80
   16250:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16252:	687b      	ldr	r3, [r7, #4]
   16254:	2200      	movs	r2, #0
   16256:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   16258:	687b      	ldr	r3, [r7, #4]
   1625a:	2201      	movs	r2, #1
   1625c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1625e:	687b      	ldr	r3, [r7, #4]
   16260:	2200      	movs	r2, #0
   16262:	70da      	strb	r2, [r3, #3]
}
   16264:	46c0      	nop			; (mov r8, r8)
   16266:	46bd      	mov	sp, r7
   16268:	b002      	add	sp, #8
   1626a:	bd80      	pop	{r7, pc}

0001626c <system_is_debugger_present>:
{
   1626c:	b580      	push	{r7, lr}
   1626e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   16270:	4b05      	ldr	r3, [pc, #20]	; (16288 <system_is_debugger_present+0x1c>)
   16272:	789b      	ldrb	r3, [r3, #2]
   16274:	b2db      	uxtb	r3, r3
   16276:	001a      	movs	r2, r3
   16278:	2302      	movs	r3, #2
   1627a:	4013      	ands	r3, r2
   1627c:	1e5a      	subs	r2, r3, #1
   1627e:	4193      	sbcs	r3, r2
   16280:	b2db      	uxtb	r3, r3
}
   16282:	0018      	movs	r0, r3
   16284:	46bd      	mov	sp, r7
   16286:	bd80      	pop	{r7, pc}
   16288:	41002000 	.word	0x41002000

0001628c <usart_is_syncing>:
{
   1628c:	b580      	push	{r7, lr}
   1628e:	b084      	sub	sp, #16
   16290:	af00      	add	r7, sp, #0
   16292:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   16294:	687b      	ldr	r3, [r7, #4]
   16296:	681b      	ldr	r3, [r3, #0]
   16298:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1629a:	68fb      	ldr	r3, [r7, #12]
   1629c:	69db      	ldr	r3, [r3, #28]
   1629e:	1e5a      	subs	r2, r3, #1
   162a0:	4193      	sbcs	r3, r2
   162a2:	b2db      	uxtb	r3, r3
}
   162a4:	0018      	movs	r0, r3
   162a6:	46bd      	mov	sp, r7
   162a8:	b004      	add	sp, #16
   162aa:	bd80      	pop	{r7, pc}

000162ac <_usart_wait_for_sync>:
{
   162ac:	b580      	push	{r7, lr}
   162ae:	b082      	sub	sp, #8
   162b0:	af00      	add	r7, sp, #0
   162b2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   162b4:	46c0      	nop			; (mov r8, r8)
   162b6:	687b      	ldr	r3, [r7, #4]
   162b8:	0018      	movs	r0, r3
   162ba:	4b04      	ldr	r3, [pc, #16]	; (162cc <_usart_wait_for_sync+0x20>)
   162bc:	4798      	blx	r3
   162be:	1e03      	subs	r3, r0, #0
   162c0:	d1f9      	bne.n	162b6 <_usart_wait_for_sync+0xa>
}
   162c2:	46c0      	nop			; (mov r8, r8)
   162c4:	46bd      	mov	sp, r7
   162c6:	b002      	add	sp, #8
   162c8:	bd80      	pop	{r7, pc}
   162ca:	46c0      	nop			; (mov r8, r8)
   162cc:	0001628d 	.word	0x0001628d

000162d0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   162d0:	b5b0      	push	{r4, r5, r7, lr}
   162d2:	b08c      	sub	sp, #48	; 0x30
   162d4:	af02      	add	r7, sp, #8
   162d6:	6078      	str	r0, [r7, #4]
   162d8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   162da:	687b      	ldr	r3, [r7, #4]
   162dc:	681b      	ldr	r3, [r3, #0]
   162de:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   162e0:	687b      	ldr	r3, [r7, #4]
   162e2:	681b      	ldr	r3, [r3, #0]
   162e4:	0018      	movs	r0, r3
   162e6:	4bab      	ldr	r3, [pc, #684]	; (16594 <_usart_set_config+0x2c4>)
   162e8:	4798      	blx	r3
   162ea:	0003      	movs	r3, r0
   162ec:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   162ee:	697b      	ldr	r3, [r7, #20]
   162f0:	3312      	adds	r3, #18
   162f2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   162f4:	2300      	movs	r3, #0
   162f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   162f8:	2300      	movs	r3, #0
   162fa:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   162fc:	230a      	movs	r3, #10
   162fe:	18fb      	adds	r3, r7, r3
   16300:	2200      	movs	r2, #0
   16302:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   16304:	231f      	movs	r3, #31
   16306:	18fb      	adds	r3, r7, r3
   16308:	2200      	movs	r2, #0
   1630a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1630c:	231e      	movs	r3, #30
   1630e:	18fb      	adds	r3, r7, r3
   16310:	2210      	movs	r2, #16
   16312:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   16314:	683b      	ldr	r3, [r7, #0]
   16316:	8a1b      	ldrh	r3, [r3, #16]
   16318:	2280      	movs	r2, #128	; 0x80
   1631a:	01d2      	lsls	r2, r2, #7
   1631c:	4293      	cmp	r3, r2
   1631e:	d01c      	beq.n	1635a <_usart_set_config+0x8a>
   16320:	2280      	movs	r2, #128	; 0x80
   16322:	01d2      	lsls	r2, r2, #7
   16324:	4293      	cmp	r3, r2
   16326:	dc06      	bgt.n	16336 <_usart_set_config+0x66>
   16328:	2b00      	cmp	r3, #0
   1632a:	d00d      	beq.n	16348 <_usart_set_config+0x78>
   1632c:	2280      	movs	r2, #128	; 0x80
   1632e:	0192      	lsls	r2, r2, #6
   16330:	4293      	cmp	r3, r2
   16332:	d024      	beq.n	1637e <_usart_set_config+0xae>
   16334:	e035      	b.n	163a2 <_usart_set_config+0xd2>
   16336:	22c0      	movs	r2, #192	; 0xc0
   16338:	01d2      	lsls	r2, r2, #7
   1633a:	4293      	cmp	r3, r2
   1633c:	d028      	beq.n	16390 <_usart_set_config+0xc0>
   1633e:	2280      	movs	r2, #128	; 0x80
   16340:	0212      	lsls	r2, r2, #8
   16342:	4293      	cmp	r3, r2
   16344:	d012      	beq.n	1636c <_usart_set_config+0x9c>
   16346:	e02c      	b.n	163a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   16348:	231f      	movs	r3, #31
   1634a:	18fb      	adds	r3, r7, r3
   1634c:	2200      	movs	r2, #0
   1634e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   16350:	231e      	movs	r3, #30
   16352:	18fb      	adds	r3, r7, r3
   16354:	2210      	movs	r2, #16
   16356:	701a      	strb	r2, [r3, #0]
			break;
   16358:	e023      	b.n	163a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1635a:	231f      	movs	r3, #31
   1635c:	18fb      	adds	r3, r7, r3
   1635e:	2200      	movs	r2, #0
   16360:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   16362:	231e      	movs	r3, #30
   16364:	18fb      	adds	r3, r7, r3
   16366:	2208      	movs	r2, #8
   16368:	701a      	strb	r2, [r3, #0]
			break;
   1636a:	e01a      	b.n	163a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1636c:	231f      	movs	r3, #31
   1636e:	18fb      	adds	r3, r7, r3
   16370:	2200      	movs	r2, #0
   16372:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   16374:	231e      	movs	r3, #30
   16376:	18fb      	adds	r3, r7, r3
   16378:	2203      	movs	r2, #3
   1637a:	701a      	strb	r2, [r3, #0]
			break;
   1637c:	e011      	b.n	163a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1637e:	231f      	movs	r3, #31
   16380:	18fb      	adds	r3, r7, r3
   16382:	2201      	movs	r2, #1
   16384:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   16386:	231e      	movs	r3, #30
   16388:	18fb      	adds	r3, r7, r3
   1638a:	2210      	movs	r2, #16
   1638c:	701a      	strb	r2, [r3, #0]
			break;
   1638e:	e008      	b.n	163a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   16390:	231f      	movs	r3, #31
   16392:	18fb      	adds	r3, r7, r3
   16394:	2201      	movs	r2, #1
   16396:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   16398:	231e      	movs	r3, #30
   1639a:	18fb      	adds	r3, r7, r3
   1639c:	2208      	movs	r2, #8
   1639e:	701a      	strb	r2, [r3, #0]
			break;
   163a0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   163a2:	683b      	ldr	r3, [r7, #0]
   163a4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   163a6:	683b      	ldr	r3, [r7, #0]
   163a8:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   163aa:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   163ac:	683b      	ldr	r3, [r7, #0]
   163ae:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   163b0:	4313      	orrs	r3, r2
		config->sample_rate |
   163b2:	683a      	ldr	r2, [r7, #0]
   163b4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   163b6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   163b8:	683a      	ldr	r2, [r7, #0]
   163ba:	7e12      	ldrb	r2, [r2, #24]
   163bc:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   163be:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   163c0:	683a      	ldr	r2, [r7, #0]
   163c2:	2126      	movs	r1, #38	; 0x26
   163c4:	5c52      	ldrb	r2, [r2, r1]
   163c6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   163c8:	4313      	orrs	r3, r2
   163ca:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   163cc:	231d      	movs	r3, #29
   163ce:	18fb      	adds	r3, r7, r3
   163d0:	2200      	movs	r2, #0
   163d2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   163d4:	683b      	ldr	r3, [r7, #0]
   163d6:	685b      	ldr	r3, [r3, #4]
   163d8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   163da:	68fb      	ldr	r3, [r7, #12]
   163dc:	2b00      	cmp	r3, #0
   163de:	d01e      	beq.n	1641e <_usart_set_config+0x14e>
   163e0:	2280      	movs	r2, #128	; 0x80
   163e2:	0552      	lsls	r2, r2, #21
   163e4:	4293      	cmp	r3, r2
   163e6:	d14f      	bne.n	16488 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   163e8:	683b      	ldr	r3, [r7, #0]
   163ea:	2227      	movs	r2, #39	; 0x27
   163ec:	5c9b      	ldrb	r3, [r3, r2]
   163ee:	2201      	movs	r2, #1
   163f0:	4053      	eors	r3, r2
   163f2:	b2db      	uxtb	r3, r3
   163f4:	2b00      	cmp	r3, #0
   163f6:	d046      	beq.n	16486 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   163f8:	683b      	ldr	r3, [r7, #0]
   163fa:	6a1d      	ldr	r5, [r3, #32]
   163fc:	693b      	ldr	r3, [r7, #16]
   163fe:	b2db      	uxtb	r3, r3
   16400:	0018      	movs	r0, r3
   16402:	4b65      	ldr	r3, [pc, #404]	; (16598 <_usart_set_config+0x2c8>)
   16404:	4798      	blx	r3
   16406:	0001      	movs	r1, r0
   16408:	231d      	movs	r3, #29
   1640a:	18fc      	adds	r4, r7, r3
   1640c:	230a      	movs	r3, #10
   1640e:	18fb      	adds	r3, r7, r3
   16410:	001a      	movs	r2, r3
   16412:	0028      	movs	r0, r5
   16414:	4b61      	ldr	r3, [pc, #388]	; (1659c <_usart_set_config+0x2cc>)
   16416:	4798      	blx	r3
   16418:	0003      	movs	r3, r0
   1641a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   1641c:	e033      	b.n	16486 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   1641e:	683b      	ldr	r3, [r7, #0]
   16420:	2227      	movs	r2, #39	; 0x27
   16422:	5c9b      	ldrb	r3, [r3, r2]
   16424:	2b00      	cmp	r3, #0
   16426:	d014      	beq.n	16452 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   16428:	683b      	ldr	r3, [r7, #0]
   1642a:	6a18      	ldr	r0, [r3, #32]
   1642c:	683b      	ldr	r3, [r7, #0]
   1642e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   16430:	231d      	movs	r3, #29
   16432:	18fc      	adds	r4, r7, r3
   16434:	231f      	movs	r3, #31
   16436:	18fb      	adds	r3, r7, r3
   16438:	781d      	ldrb	r5, [r3, #0]
   1643a:	230a      	movs	r3, #10
   1643c:	18fa      	adds	r2, r7, r3
   1643e:	231e      	movs	r3, #30
   16440:	18fb      	adds	r3, r7, r3
   16442:	781b      	ldrb	r3, [r3, #0]
   16444:	9300      	str	r3, [sp, #0]
   16446:	002b      	movs	r3, r5
   16448:	4d55      	ldr	r5, [pc, #340]	; (165a0 <_usart_set_config+0x2d0>)
   1644a:	47a8      	blx	r5
   1644c:	0003      	movs	r3, r0
   1644e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   16450:	e01a      	b.n	16488 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   16452:	683b      	ldr	r3, [r7, #0]
   16454:	6a1d      	ldr	r5, [r3, #32]
   16456:	693b      	ldr	r3, [r7, #16]
   16458:	b2db      	uxtb	r3, r3
   1645a:	0018      	movs	r0, r3
   1645c:	4b4e      	ldr	r3, [pc, #312]	; (16598 <_usart_set_config+0x2c8>)
   1645e:	4798      	blx	r3
				status_code =
   16460:	231d      	movs	r3, #29
   16462:	18fc      	adds	r4, r7, r3
   16464:	231f      	movs	r3, #31
   16466:	18fb      	adds	r3, r7, r3
   16468:	7819      	ldrb	r1, [r3, #0]
   1646a:	230a      	movs	r3, #10
   1646c:	18fa      	adds	r2, r7, r3
   1646e:	231e      	movs	r3, #30
   16470:	18fb      	adds	r3, r7, r3
   16472:	781b      	ldrb	r3, [r3, #0]
   16474:	9300      	str	r3, [sp, #0]
   16476:	000b      	movs	r3, r1
   16478:	0001      	movs	r1, r0
   1647a:	0028      	movs	r0, r5
   1647c:	4d48      	ldr	r5, [pc, #288]	; (165a0 <_usart_set_config+0x2d0>)
   1647e:	47a8      	blx	r5
   16480:	0003      	movs	r3, r0
   16482:	7023      	strb	r3, [r4, #0]
			break;
   16484:	e000      	b.n	16488 <_usart_set_config+0x1b8>
			break;
   16486:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   16488:	231d      	movs	r3, #29
   1648a:	18fb      	adds	r3, r7, r3
   1648c:	781b      	ldrb	r3, [r3, #0]
   1648e:	2b00      	cmp	r3, #0
   16490:	d003      	beq.n	1649a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   16492:	231d      	movs	r3, #29
   16494:	18fb      	adds	r3, r7, r3
   16496:	781b      	ldrb	r3, [r3, #0]
   16498:	e077      	b.n	1658a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   1649a:	683b      	ldr	r3, [r7, #0]
   1649c:	7e5b      	ldrb	r3, [r3, #25]
   1649e:	2b00      	cmp	r3, #0
   164a0:	d003      	beq.n	164aa <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   164a2:	683b      	ldr	r3, [r7, #0]
   164a4:	7e9a      	ldrb	r2, [r3, #26]
   164a6:	69bb      	ldr	r3, [r7, #24]
   164a8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   164aa:	687b      	ldr	r3, [r7, #4]
   164ac:	0018      	movs	r0, r3
   164ae:	4b3d      	ldr	r3, [pc, #244]	; (165a4 <_usart_set_config+0x2d4>)
   164b0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   164b2:	230a      	movs	r3, #10
   164b4:	18fb      	adds	r3, r7, r3
   164b6:	881a      	ldrh	r2, [r3, #0]
   164b8:	69bb      	ldr	r3, [r7, #24]
   164ba:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   164bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   164be:	68fb      	ldr	r3, [r7, #12]
   164c0:	4313      	orrs	r3, r2
   164c2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   164c4:	683b      	ldr	r3, [r7, #0]
   164c6:	2227      	movs	r2, #39	; 0x27
   164c8:	5c9b      	ldrb	r3, [r3, r2]
   164ca:	2201      	movs	r2, #1
   164cc:	4053      	eors	r3, r2
   164ce:	b2db      	uxtb	r3, r3
   164d0:	2b00      	cmp	r3, #0
   164d2:	d003      	beq.n	164dc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   164d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   164d6:	2204      	movs	r2, #4
   164d8:	4313      	orrs	r3, r2
   164da:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   164dc:	683b      	ldr	r3, [r7, #0]
   164de:	7e5b      	ldrb	r3, [r3, #25]
   164e0:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   164e2:	683b      	ldr	r3, [r7, #0]
   164e4:	7f1b      	ldrb	r3, [r3, #28]
   164e6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   164e8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   164ea:	683b      	ldr	r3, [r7, #0]
   164ec:	7f5b      	ldrb	r3, [r3, #29]
   164ee:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   164f0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   164f2:	683b      	ldr	r3, [r7, #0]
   164f4:	2124      	movs	r1, #36	; 0x24
   164f6:	5c5b      	ldrb	r3, [r3, r1]
   164f8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   164fa:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   164fc:	683b      	ldr	r3, [r7, #0]
   164fe:	2125      	movs	r1, #37	; 0x25
   16500:	5c5b      	ldrb	r3, [r3, r1]
   16502:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   16504:	4313      	orrs	r3, r2
	ctrlb =  
   16506:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   16508:	683b      	ldr	r3, [r7, #0]
   1650a:	7a9b      	ldrb	r3, [r3, #10]
   1650c:	001a      	movs	r2, r3
   1650e:	6a3b      	ldr	r3, [r7, #32]
   16510:	4313      	orrs	r3, r2
   16512:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   16514:	683b      	ldr	r3, [r7, #0]
   16516:	7adb      	ldrb	r3, [r3, #11]
   16518:	001a      	movs	r2, r3
   1651a:	6a3b      	ldr	r3, [r7, #32]
   1651c:	4313      	orrs	r3, r2
   1651e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   16520:	683b      	ldr	r3, [r7, #0]
   16522:	891b      	ldrh	r3, [r3, #8]
   16524:	2bff      	cmp	r3, #255	; 0xff
   16526:	d00b      	beq.n	16540 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   16528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1652a:	2280      	movs	r2, #128	; 0x80
   1652c:	0452      	lsls	r2, r2, #17
   1652e:	4313      	orrs	r3, r2
   16530:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   16532:	683b      	ldr	r3, [r7, #0]
   16534:	891b      	ldrh	r3, [r3, #8]
   16536:	001a      	movs	r2, r3
   16538:	6a3b      	ldr	r3, [r7, #32]
   1653a:	4313      	orrs	r3, r2
   1653c:	623b      	str	r3, [r7, #32]
   1653e:	e008      	b.n	16552 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   16540:	683b      	ldr	r3, [r7, #0]
   16542:	7edb      	ldrb	r3, [r3, #27]
   16544:	2b00      	cmp	r3, #0
   16546:	d004      	beq.n	16552 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   16548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1654a:	2280      	movs	r2, #128	; 0x80
   1654c:	04d2      	lsls	r2, r2, #19
   1654e:	4313      	orrs	r3, r2
   16550:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   16552:	683b      	ldr	r3, [r7, #0]
   16554:	222c      	movs	r2, #44	; 0x2c
   16556:	5c9b      	ldrb	r3, [r3, r2]
   16558:	2b00      	cmp	r3, #0
   1655a:	d103      	bne.n	16564 <_usart_set_config+0x294>
   1655c:	4b12      	ldr	r3, [pc, #72]	; (165a8 <_usart_set_config+0x2d8>)
   1655e:	4798      	blx	r3
   16560:	1e03      	subs	r3, r0, #0
   16562:	d003      	beq.n	1656c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   16564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16566:	2280      	movs	r2, #128	; 0x80
   16568:	4313      	orrs	r3, r2
   1656a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1656c:	687b      	ldr	r3, [r7, #4]
   1656e:	0018      	movs	r0, r3
   16570:	4b0c      	ldr	r3, [pc, #48]	; (165a4 <_usart_set_config+0x2d4>)
   16572:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   16574:	69bb      	ldr	r3, [r7, #24]
   16576:	6a3a      	ldr	r2, [r7, #32]
   16578:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1657a:	687b      	ldr	r3, [r7, #4]
   1657c:	0018      	movs	r0, r3
   1657e:	4b09      	ldr	r3, [pc, #36]	; (165a4 <_usart_set_config+0x2d4>)
   16580:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   16582:	69bb      	ldr	r3, [r7, #24]
   16584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16586:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   16588:	2300      	movs	r3, #0
}
   1658a:	0018      	movs	r0, r3
   1658c:	46bd      	mov	sp, r7
   1658e:	b00a      	add	sp, #40	; 0x28
   16590:	bdb0      	pop	{r4, r5, r7, pc}
   16592:	46c0      	nop			; (mov r8, r8)
   16594:	000180a9 	.word	0x000180a9
   16598:	00018ce1 	.word	0x00018ce1
   1659c:	00017c23 	.word	0x00017c23
   165a0:	00017ca1 	.word	0x00017ca1
   165a4:	000162ad 	.word	0x000162ad
   165a8:	0001626d 	.word	0x0001626d

000165ac <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   165ac:	b590      	push	{r4, r7, lr}
   165ae:	b093      	sub	sp, #76	; 0x4c
   165b0:	af00      	add	r7, sp, #0
   165b2:	60f8      	str	r0, [r7, #12]
   165b4:	60b9      	str	r1, [r7, #8]
   165b6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   165b8:	2333      	movs	r3, #51	; 0x33
   165ba:	18fb      	adds	r3, r7, r3
   165bc:	2200      	movs	r2, #0
   165be:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   165c0:	68fb      	ldr	r3, [r7, #12]
   165c2:	68ba      	ldr	r2, [r7, #8]
   165c4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   165c6:	68fb      	ldr	r3, [r7, #12]
   165c8:	681b      	ldr	r3, [r3, #0]
   165ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   165cc:	68fb      	ldr	r3, [r7, #12]
   165ce:	681b      	ldr	r3, [r3, #0]
   165d0:	0018      	movs	r0, r3
   165d2:	4b8f      	ldr	r3, [pc, #572]	; (16810 <usart_init+0x264>)
   165d4:	4798      	blx	r3
   165d6:	0003      	movs	r3, r0
   165d8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   165da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   165dc:	2b05      	cmp	r3, #5
   165de:	d104      	bne.n	165ea <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   165e0:	2301      	movs	r3, #1
   165e2:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   165e4:	2318      	movs	r3, #24
   165e6:	643b      	str	r3, [r7, #64]	; 0x40
   165e8:	e004      	b.n	165f4 <usart_init+0x48>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
   165ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   165ec:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   165ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   165f0:	3312      	adds	r3, #18
   165f2:	643b      	str	r3, [r7, #64]	; 0x40
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   165f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   165f6:	681b      	ldr	r3, [r3, #0]
   165f8:	2201      	movs	r2, #1
   165fa:	4013      	ands	r3, r2
   165fc:	d001      	beq.n	16602 <usart_init+0x56>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   165fe:	2305      	movs	r3, #5
   16600:	e102      	b.n	16808 <usart_init+0x25c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   16602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16604:	681b      	ldr	r3, [r3, #0]
   16606:	2202      	movs	r2, #2
   16608:	4013      	ands	r3, r2
   1660a:	d001      	beq.n	16610 <usart_init+0x64>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   1660c:	231c      	movs	r3, #28
   1660e:	e0fb      	b.n	16808 <usart_init+0x25c>
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   16610:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16612:	2b05      	cmp	r3, #5
   16614:	d108      	bne.n	16628 <usart_init+0x7c>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   16616:	2201      	movs	r2, #1
   16618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1661a:	409a      	lsls	r2, r3
   1661c:	0013      	movs	r3, r2
   1661e:	0019      	movs	r1, r3
   16620:	2003      	movs	r0, #3
   16622:	4b7c      	ldr	r3, [pc, #496]	; (16814 <usart_init+0x268>)
   16624:	4798      	blx	r3
   16626:	e007      	b.n	16638 <usart_init+0x8c>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
   16628:	2201      	movs	r2, #1
   1662a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1662c:	409a      	lsls	r2, r3
   1662e:	0013      	movs	r3, r2
   16630:	0019      	movs	r1, r3
   16632:	2002      	movs	r0, #2
   16634:	4b77      	ldr	r3, [pc, #476]	; (16814 <usart_init+0x268>)
   16636:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   16638:	2324      	movs	r3, #36	; 0x24
   1663a:	18fb      	adds	r3, r7, r3
   1663c:	0018      	movs	r0, r3
   1663e:	4b76      	ldr	r3, [pc, #472]	; (16818 <usart_init+0x26c>)
   16640:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   16642:	687b      	ldr	r3, [r7, #4]
   16644:	222d      	movs	r2, #45	; 0x2d
   16646:	5c9a      	ldrb	r2, [r3, r2]
   16648:	2324      	movs	r3, #36	; 0x24
   1664a:	18fb      	adds	r3, r7, r3
   1664c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1664e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16650:	b2db      	uxtb	r3, r3
   16652:	2224      	movs	r2, #36	; 0x24
   16654:	18ba      	adds	r2, r7, r2
   16656:	0011      	movs	r1, r2
   16658:	0018      	movs	r0, r3
   1665a:	4b70      	ldr	r3, [pc, #448]	; (1681c <usart_init+0x270>)
   1665c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1665e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16660:	b2db      	uxtb	r3, r3
   16662:	0018      	movs	r0, r3
   16664:	4b6e      	ldr	r3, [pc, #440]	; (16820 <usart_init+0x274>)
   16666:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   16668:	687b      	ldr	r3, [r7, #4]
   1666a:	222d      	movs	r2, #45	; 0x2d
   1666c:	5c9b      	ldrb	r3, [r3, r2]
   1666e:	2100      	movs	r1, #0
   16670:	0018      	movs	r0, r3
   16672:	4b6c      	ldr	r3, [pc, #432]	; (16824 <usart_init+0x278>)
   16674:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   16676:	687b      	ldr	r3, [r7, #4]
   16678:	7ada      	ldrb	r2, [r3, #11]
   1667a:	68fb      	ldr	r3, [r7, #12]
   1667c:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   1667e:	687b      	ldr	r3, [r7, #4]
   16680:	2224      	movs	r2, #36	; 0x24
   16682:	5c9a      	ldrb	r2, [r3, r2]
   16684:	68fb      	ldr	r3, [r7, #12]
   16686:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   16688:	687b      	ldr	r3, [r7, #4]
   1668a:	2225      	movs	r2, #37	; 0x25
   1668c:	5c9a      	ldrb	r2, [r3, r2]
   1668e:	68fb      	ldr	r3, [r7, #12]
   16690:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   16692:	687b      	ldr	r3, [r7, #4]
   16694:	7eda      	ldrb	r2, [r3, #27]
   16696:	68fb      	ldr	r3, [r7, #12]
   16698:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   1669a:	687b      	ldr	r3, [r7, #4]
   1669c:	7f1a      	ldrb	r2, [r3, #28]
   1669e:	68fb      	ldr	r3, [r7, #12]
   166a0:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   166a2:	2333      	movs	r3, #51	; 0x33
   166a4:	18fc      	adds	r4, r7, r3
   166a6:	687a      	ldr	r2, [r7, #4]
   166a8:	68fb      	ldr	r3, [r7, #12]
   166aa:	0011      	movs	r1, r2
   166ac:	0018      	movs	r0, r3
   166ae:	4b5e      	ldr	r3, [pc, #376]	; (16828 <usart_init+0x27c>)
   166b0:	4798      	blx	r3
   166b2:	0003      	movs	r3, r0
   166b4:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   166b6:	2333      	movs	r3, #51	; 0x33
   166b8:	18fb      	adds	r3, r7, r3
   166ba:	781b      	ldrb	r3, [r3, #0]
   166bc:	2b00      	cmp	r3, #0
   166be:	d003      	beq.n	166c8 <usart_init+0x11c>
		return status_code;
   166c0:	2333      	movs	r3, #51	; 0x33
   166c2:	18fb      	adds	r3, r7, r3
   166c4:	781b      	ldrb	r3, [r3, #0]
   166c6:	e09f      	b.n	16808 <usart_init+0x25c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   166c8:	2320      	movs	r3, #32
   166ca:	18fb      	adds	r3, r7, r3
   166cc:	0018      	movs	r0, r3
   166ce:	4b57      	ldr	r3, [pc, #348]	; (1682c <usart_init+0x280>)
   166d0:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   166d2:	2320      	movs	r3, #32
   166d4:	18fb      	adds	r3, r7, r3
   166d6:	2200      	movs	r2, #0
   166d8:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   166da:	2320      	movs	r3, #32
   166dc:	18fb      	adds	r3, r7, r3
   166de:	2200      	movs	r2, #0
   166e0:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   166e2:	687b      	ldr	r3, [r7, #4]
   166e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   166e6:	2310      	movs	r3, #16
   166e8:	18fb      	adds	r3, r7, r3
   166ea:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   166ec:	687b      	ldr	r3, [r7, #4]
   166ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   166f0:	2310      	movs	r3, #16
   166f2:	18fb      	adds	r3, r7, r3
   166f4:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   166f6:	687b      	ldr	r3, [r7, #4]
   166f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   166fa:	2310      	movs	r3, #16
   166fc:	18fb      	adds	r3, r7, r3
   166fe:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   16700:	687b      	ldr	r3, [r7, #4]
   16702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   16704:	2310      	movs	r3, #16
   16706:	18fb      	adds	r3, r7, r3
   16708:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   1670a:	233f      	movs	r3, #63	; 0x3f
   1670c:	18fb      	adds	r3, r7, r3
   1670e:	2200      	movs	r2, #0
   16710:	701a      	strb	r2, [r3, #0]
   16712:	e02c      	b.n	1676e <usart_init+0x1c2>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   16714:	233f      	movs	r3, #63	; 0x3f
   16716:	18fb      	adds	r3, r7, r3
   16718:	781a      	ldrb	r2, [r3, #0]
   1671a:	2310      	movs	r3, #16
   1671c:	18fb      	adds	r3, r7, r3
   1671e:	0092      	lsls	r2, r2, #2
   16720:	58d3      	ldr	r3, [r2, r3]
   16722:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   16724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16726:	2b00      	cmp	r3, #0
   16728:	d109      	bne.n	1673e <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1672a:	233f      	movs	r3, #63	; 0x3f
   1672c:	18fb      	adds	r3, r7, r3
   1672e:	781a      	ldrb	r2, [r3, #0]
   16730:	68bb      	ldr	r3, [r7, #8]
   16732:	0011      	movs	r1, r2
   16734:	0018      	movs	r0, r3
   16736:	4b3e      	ldr	r3, [pc, #248]	; (16830 <usart_init+0x284>)
   16738:	4798      	blx	r3
   1673a:	0003      	movs	r3, r0
   1673c:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux != PINMUX_UNUSED) {
   1673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16740:	3301      	adds	r3, #1
   16742:	d00d      	beq.n	16760 <usart_init+0x1b4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   16744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16746:	b2da      	uxtb	r2, r3
   16748:	2320      	movs	r3, #32
   1674a:	18fb      	adds	r3, r7, r3
   1674c:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16750:	0c1b      	lsrs	r3, r3, #16
   16752:	b2db      	uxtb	r3, r3
   16754:	2220      	movs	r2, #32
   16756:	18ba      	adds	r2, r7, r2
   16758:	0011      	movs	r1, r2
   1675a:	0018      	movs	r0, r3
   1675c:	4b35      	ldr	r3, [pc, #212]	; (16834 <usart_init+0x288>)
   1675e:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   16760:	233f      	movs	r3, #63	; 0x3f
   16762:	18fb      	adds	r3, r7, r3
   16764:	781a      	ldrb	r2, [r3, #0]
   16766:	233f      	movs	r3, #63	; 0x3f
   16768:	18fb      	adds	r3, r7, r3
   1676a:	3201      	adds	r2, #1
   1676c:	701a      	strb	r2, [r3, #0]
   1676e:	233f      	movs	r3, #63	; 0x3f
   16770:	18fb      	adds	r3, r7, r3
   16772:	781b      	ldrb	r3, [r3, #0]
   16774:	2b03      	cmp	r3, #3
   16776:	d9cd      	bls.n	16714 <usart_init+0x168>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   16778:	2300      	movs	r3, #0
   1677a:	637b      	str	r3, [r7, #52]	; 0x34
   1677c:	e00a      	b.n	16794 <usart_init+0x1e8>
		module->callback[i]            = NULL;
   1677e:	68fa      	ldr	r2, [r7, #12]
   16780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16782:	3302      	adds	r3, #2
   16784:	009b      	lsls	r3, r3, #2
   16786:	18d3      	adds	r3, r2, r3
   16788:	3304      	adds	r3, #4
   1678a:	2200      	movs	r2, #0
   1678c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   1678e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16790:	3301      	adds	r3, #1
   16792:	637b      	str	r3, [r7, #52]	; 0x34
   16794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16796:	2b05      	cmp	r3, #5
   16798:	d9f1      	bls.n	1677e <usart_init+0x1d2>
	}

	module->tx_buffer_ptr              = NULL;
   1679a:	68fb      	ldr	r3, [r7, #12]
   1679c:	2200      	movs	r2, #0
   1679e:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   167a0:	68fb      	ldr	r3, [r7, #12]
   167a2:	2200      	movs	r2, #0
   167a4:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   167a6:	68fb      	ldr	r3, [r7, #12]
   167a8:	2200      	movs	r2, #0
   167aa:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   167ac:	68fb      	ldr	r3, [r7, #12]
   167ae:	2200      	movs	r2, #0
   167b0:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   167b2:	68fb      	ldr	r3, [r7, #12]
   167b4:	2230      	movs	r2, #48	; 0x30
   167b6:	2100      	movs	r1, #0
   167b8:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   167ba:	68fb      	ldr	r3, [r7, #12]
   167bc:	2231      	movs	r2, #49	; 0x31
   167be:	2100      	movs	r1, #0
   167c0:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   167c2:	68fb      	ldr	r3, [r7, #12]
   167c4:	2232      	movs	r2, #50	; 0x32
   167c6:	2100      	movs	r1, #0
   167c8:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   167ca:	68fb      	ldr	r3, [r7, #12]
   167cc:	2233      	movs	r2, #51	; 0x33
   167ce:	2100      	movs	r1, #0
   167d0:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   167d2:	68fb      	ldr	r3, [r7, #12]
   167d4:	681b      	ldr	r3, [r3, #0]
   167d6:	2227      	movs	r2, #39	; 0x27
   167d8:	18bc      	adds	r4, r7, r2
   167da:	0018      	movs	r0, r3
   167dc:	4b0c      	ldr	r3, [pc, #48]	; (16810 <usart_init+0x264>)
   167de:	4798      	blx	r3
   167e0:	0003      	movs	r3, r0
   167e2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   167e4:	4a14      	ldr	r2, [pc, #80]	; (16838 <usart_init+0x28c>)
   167e6:	2327      	movs	r3, #39	; 0x27
   167e8:	18fb      	adds	r3, r7, r3
   167ea:	781b      	ldrb	r3, [r3, #0]
   167ec:	0011      	movs	r1, r2
   167ee:	0018      	movs	r0, r3
   167f0:	4b12      	ldr	r3, [pc, #72]	; (1683c <usart_init+0x290>)
   167f2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   167f4:	2327      	movs	r3, #39	; 0x27
   167f6:	18fb      	adds	r3, r7, r3
   167f8:	781a      	ldrb	r2, [r3, #0]
   167fa:	4b11      	ldr	r3, [pc, #68]	; (16840 <usart_init+0x294>)
   167fc:	0092      	lsls	r2, r2, #2
   167fe:	68f9      	ldr	r1, [r7, #12]
   16800:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   16802:	2333      	movs	r3, #51	; 0x33
   16804:	18fb      	adds	r3, r7, r3
   16806:	781b      	ldrb	r3, [r3, #0]
}
   16808:	0018      	movs	r0, r3
   1680a:	46bd      	mov	sp, r7
   1680c:	b013      	add	sp, #76	; 0x4c
   1680e:	bd90      	pop	{r4, r7, pc}
   16810:	000180a9 	.word	0x000180a9
   16814:	000161c9 	.word	0x000161c9
   16818:	000161b1 	.word	0x000161b1
   1681c:	00018bf1 	.word	0x00018bf1
   16820:	00018c31 	.word	0x00018c31
   16824:	00017e61 	.word	0x00017e61
   16828:	000162d1 	.word	0x000162d1
   1682c:	00016245 	.word	0x00016245
   16830:	00017eed 	.word	0x00017eed
   16834:	00018ea5 	.word	0x00018ea5
   16838:	000088e9 	.word	0x000088e9
   1683c:	00008109 	.word	0x00008109
   16840:	200013e0 	.word	0x200013e0

00016844 <system_pinmux_get_config_defaults>:
{
   16844:	b580      	push	{r7, lr}
   16846:	b082      	sub	sp, #8
   16848:	af00      	add	r7, sp, #0
   1684a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1684c:	687b      	ldr	r3, [r7, #4]
   1684e:	2280      	movs	r2, #128	; 0x80
   16850:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16852:	687b      	ldr	r3, [r7, #4]
   16854:	2200      	movs	r2, #0
   16856:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   16858:	687b      	ldr	r3, [r7, #4]
   1685a:	2201      	movs	r2, #1
   1685c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1685e:	687b      	ldr	r3, [r7, #4]
   16860:	2200      	movs	r2, #0
   16862:	70da      	strb	r2, [r3, #3]
}
   16864:	46c0      	nop			; (mov r8, r8)
   16866:	46bd      	mov	sp, r7
   16868:	b002      	add	sp, #8
   1686a:	bd80      	pop	{r7, pc}

0001686c <system_pinmux_get_group_from_gpio_pin>:
{
   1686c:	b580      	push	{r7, lr}
   1686e:	b084      	sub	sp, #16
   16870:	af00      	add	r7, sp, #0
   16872:	0002      	movs	r2, r0
   16874:	1dfb      	adds	r3, r7, #7
   16876:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16878:	230f      	movs	r3, #15
   1687a:	18fb      	adds	r3, r7, r3
   1687c:	1dfa      	adds	r2, r7, #7
   1687e:	7812      	ldrb	r2, [r2, #0]
   16880:	09d2      	lsrs	r2, r2, #7
   16882:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16884:	230e      	movs	r3, #14
   16886:	18fb      	adds	r3, r7, r3
   16888:	1dfa      	adds	r2, r7, #7
   1688a:	7812      	ldrb	r2, [r2, #0]
   1688c:	0952      	lsrs	r2, r2, #5
   1688e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16890:	4b0d      	ldr	r3, [pc, #52]	; (168c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16892:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   16894:	230f      	movs	r3, #15
   16896:	18fb      	adds	r3, r7, r3
   16898:	781b      	ldrb	r3, [r3, #0]
   1689a:	2b00      	cmp	r3, #0
   1689c:	d10f      	bne.n	168be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1689e:	230f      	movs	r3, #15
   168a0:	18fb      	adds	r3, r7, r3
   168a2:	781b      	ldrb	r3, [r3, #0]
   168a4:	009b      	lsls	r3, r3, #2
   168a6:	2210      	movs	r2, #16
   168a8:	4694      	mov	ip, r2
   168aa:	44bc      	add	ip, r7
   168ac:	4463      	add	r3, ip
   168ae:	3b08      	subs	r3, #8
   168b0:	681a      	ldr	r2, [r3, #0]
   168b2:	230e      	movs	r3, #14
   168b4:	18fb      	adds	r3, r7, r3
   168b6:	781b      	ldrb	r3, [r3, #0]
   168b8:	01db      	lsls	r3, r3, #7
   168ba:	18d3      	adds	r3, r2, r3
   168bc:	e000      	b.n	168c0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   168be:	2300      	movs	r3, #0
}
   168c0:	0018      	movs	r0, r3
   168c2:	46bd      	mov	sp, r7
   168c4:	b004      	add	sp, #16
   168c6:	bd80      	pop	{r7, pc}
   168c8:	40002800 	.word	0x40002800

000168cc <port_get_group_from_gpio_pin>:
{
   168cc:	b580      	push	{r7, lr}
   168ce:	b082      	sub	sp, #8
   168d0:	af00      	add	r7, sp, #0
   168d2:	0002      	movs	r2, r0
   168d4:	1dfb      	adds	r3, r7, #7
   168d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   168d8:	1dfb      	adds	r3, r7, #7
   168da:	781b      	ldrb	r3, [r3, #0]
   168dc:	0018      	movs	r0, r3
   168de:	4b03      	ldr	r3, [pc, #12]	; (168ec <port_get_group_from_gpio_pin+0x20>)
   168e0:	4798      	blx	r3
   168e2:	0003      	movs	r3, r0
}
   168e4:	0018      	movs	r0, r3
   168e6:	46bd      	mov	sp, r7
   168e8:	b002      	add	sp, #8
   168ea:	bd80      	pop	{r7, pc}
   168ec:	0001686d 	.word	0x0001686d

000168f0 <port_pin_set_output_level>:
{
   168f0:	b580      	push	{r7, lr}
   168f2:	b084      	sub	sp, #16
   168f4:	af00      	add	r7, sp, #0
   168f6:	0002      	movs	r2, r0
   168f8:	1dfb      	adds	r3, r7, #7
   168fa:	701a      	strb	r2, [r3, #0]
   168fc:	1dbb      	adds	r3, r7, #6
   168fe:	1c0a      	adds	r2, r1, #0
   16900:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16902:	1dfb      	adds	r3, r7, #7
   16904:	781b      	ldrb	r3, [r3, #0]
   16906:	0018      	movs	r0, r3
   16908:	4b0d      	ldr	r3, [pc, #52]	; (16940 <port_pin_set_output_level+0x50>)
   1690a:	4798      	blx	r3
   1690c:	0003      	movs	r3, r0
   1690e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16910:	1dfb      	adds	r3, r7, #7
   16912:	781b      	ldrb	r3, [r3, #0]
   16914:	221f      	movs	r2, #31
   16916:	4013      	ands	r3, r2
   16918:	2201      	movs	r2, #1
   1691a:	409a      	lsls	r2, r3
   1691c:	0013      	movs	r3, r2
   1691e:	60bb      	str	r3, [r7, #8]
	if (level) {
   16920:	1dbb      	adds	r3, r7, #6
   16922:	781b      	ldrb	r3, [r3, #0]
   16924:	2b00      	cmp	r3, #0
   16926:	d003      	beq.n	16930 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16928:	68fb      	ldr	r3, [r7, #12]
   1692a:	68ba      	ldr	r2, [r7, #8]
   1692c:	619a      	str	r2, [r3, #24]
}
   1692e:	e002      	b.n	16936 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16930:	68fb      	ldr	r3, [r7, #12]
   16932:	68ba      	ldr	r2, [r7, #8]
   16934:	615a      	str	r2, [r3, #20]
}
   16936:	46c0      	nop			; (mov r8, r8)
   16938:	46bd      	mov	sp, r7
   1693a:	b004      	add	sp, #16
   1693c:	bd80      	pop	{r7, pc}
   1693e:	46c0      	nop			; (mov r8, r8)
   16940:	000168cd 	.word	0x000168cd

00016944 <system_gclk_chan_get_config_defaults>:
{
   16944:	b580      	push	{r7, lr}
   16946:	b082      	sub	sp, #8
   16948:	af00      	add	r7, sp, #0
   1694a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1694c:	687b      	ldr	r3, [r7, #4]
   1694e:	2200      	movs	r2, #0
   16950:	701a      	strb	r2, [r3, #0]
}
   16952:	46c0      	nop			; (mov r8, r8)
   16954:	46bd      	mov	sp, r7
   16956:	b002      	add	sp, #8
   16958:	bd80      	pop	{r7, pc}
	...

0001695c <system_apb_clock_set_mask>:
{
   1695c:	b580      	push	{r7, lr}
   1695e:	b082      	sub	sp, #8
   16960:	af00      	add	r7, sp, #0
   16962:	0002      	movs	r2, r0
   16964:	6039      	str	r1, [r7, #0]
   16966:	1dfb      	adds	r3, r7, #7
   16968:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1696a:	1dfb      	adds	r3, r7, #7
   1696c:	781b      	ldrb	r3, [r3, #0]
   1696e:	2b04      	cmp	r3, #4
   16970:	d827      	bhi.n	169c2 <system_apb_clock_set_mask+0x66>
   16972:	009a      	lsls	r2, r3, #2
   16974:	4b16      	ldr	r3, [pc, #88]	; (169d0 <system_apb_clock_set_mask+0x74>)
   16976:	18d3      	adds	r3, r2, r3
   16978:	681b      	ldr	r3, [r3, #0]
   1697a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   1697c:	4b15      	ldr	r3, [pc, #84]	; (169d4 <system_apb_clock_set_mask+0x78>)
   1697e:	4a15      	ldr	r2, [pc, #84]	; (169d4 <system_apb_clock_set_mask+0x78>)
   16980:	6951      	ldr	r1, [r2, #20]
   16982:	683a      	ldr	r2, [r7, #0]
   16984:	430a      	orrs	r2, r1
   16986:	615a      	str	r2, [r3, #20]
			break;
   16988:	e01d      	b.n	169c6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   1698a:	4b12      	ldr	r3, [pc, #72]	; (169d4 <system_apb_clock_set_mask+0x78>)
   1698c:	4a11      	ldr	r2, [pc, #68]	; (169d4 <system_apb_clock_set_mask+0x78>)
   1698e:	6991      	ldr	r1, [r2, #24]
   16990:	683a      	ldr	r2, [r7, #0]
   16992:	430a      	orrs	r2, r1
   16994:	619a      	str	r2, [r3, #24]
			break;
   16996:	e016      	b.n	169c6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   16998:	4b0e      	ldr	r3, [pc, #56]	; (169d4 <system_apb_clock_set_mask+0x78>)
   1699a:	4a0e      	ldr	r2, [pc, #56]	; (169d4 <system_apb_clock_set_mask+0x78>)
   1699c:	69d1      	ldr	r1, [r2, #28]
   1699e:	683a      	ldr	r2, [r7, #0]
   169a0:	430a      	orrs	r2, r1
   169a2:	61da      	str	r2, [r3, #28]
			break;
   169a4:	e00f      	b.n	169c6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   169a6:	4b0b      	ldr	r3, [pc, #44]	; (169d4 <system_apb_clock_set_mask+0x78>)
   169a8:	4a0a      	ldr	r2, [pc, #40]	; (169d4 <system_apb_clock_set_mask+0x78>)
   169aa:	6a11      	ldr	r1, [r2, #32]
   169ac:	683a      	ldr	r2, [r7, #0]
   169ae:	430a      	orrs	r2, r1
   169b0:	621a      	str	r2, [r3, #32]
			break;
   169b2:	e008      	b.n	169c6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   169b4:	4b07      	ldr	r3, [pc, #28]	; (169d4 <system_apb_clock_set_mask+0x78>)
   169b6:	4a07      	ldr	r2, [pc, #28]	; (169d4 <system_apb_clock_set_mask+0x78>)
   169b8:	6a51      	ldr	r1, [r2, #36]	; 0x24
   169ba:	683a      	ldr	r2, [r7, #0]
   169bc:	430a      	orrs	r2, r1
   169be:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   169c0:	e001      	b.n	169c6 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   169c2:	2317      	movs	r3, #23
   169c4:	e000      	b.n	169c8 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   169c6:	2300      	movs	r3, #0
}
   169c8:	0018      	movs	r0, r3
   169ca:	46bd      	mov	sp, r7
   169cc:	b002      	add	sp, #8
   169ce:	bd80      	pop	{r7, pc}
   169d0:	00028ad4 	.word	0x00028ad4
   169d4:	40000400 	.word	0x40000400

000169d8 <system_is_debugger_present>:
{
   169d8:	b580      	push	{r7, lr}
   169da:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   169dc:	4b05      	ldr	r3, [pc, #20]	; (169f4 <system_is_debugger_present+0x1c>)
   169de:	789b      	ldrb	r3, [r3, #2]
   169e0:	b2db      	uxtb	r3, r3
   169e2:	001a      	movs	r2, r3
   169e4:	2302      	movs	r3, #2
   169e6:	4013      	ands	r3, r2
   169e8:	1e5a      	subs	r2, r3, #1
   169ea:	4193      	sbcs	r3, r2
   169ec:	b2db      	uxtb	r3, r3
}
   169ee:	0018      	movs	r0, r3
   169f0:	46bd      	mov	sp, r7
   169f2:	bd80      	pop	{r7, pc}
   169f4:	41002000 	.word	0x41002000

000169f8 <system_interrupt_enable>:
{
   169f8:	b580      	push	{r7, lr}
   169fa:	b082      	sub	sp, #8
   169fc:	af00      	add	r7, sp, #0
   169fe:	0002      	movs	r2, r0
   16a00:	1dfb      	adds	r3, r7, #7
   16a02:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16a04:	4b06      	ldr	r3, [pc, #24]	; (16a20 <system_interrupt_enable+0x28>)
   16a06:	1dfa      	adds	r2, r7, #7
   16a08:	7812      	ldrb	r2, [r2, #0]
   16a0a:	0011      	movs	r1, r2
   16a0c:	221f      	movs	r2, #31
   16a0e:	400a      	ands	r2, r1
   16a10:	2101      	movs	r1, #1
   16a12:	4091      	lsls	r1, r2
   16a14:	000a      	movs	r2, r1
   16a16:	601a      	str	r2, [r3, #0]
}
   16a18:	46c0      	nop			; (mov r8, r8)
   16a1a:	46bd      	mov	sp, r7
   16a1c:	b002      	add	sp, #8
   16a1e:	bd80      	pop	{r7, pc}
   16a20:	e000e100 	.word	0xe000e100

00016a24 <system_interrupt_disable>:
{
   16a24:	b580      	push	{r7, lr}
   16a26:	b082      	sub	sp, #8
   16a28:	af00      	add	r7, sp, #0
   16a2a:	0002      	movs	r2, r0
   16a2c:	1dfb      	adds	r3, r7, #7
   16a2e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16a30:	4a07      	ldr	r2, [pc, #28]	; (16a50 <system_interrupt_disable+0x2c>)
   16a32:	1dfb      	adds	r3, r7, #7
   16a34:	781b      	ldrb	r3, [r3, #0]
   16a36:	0019      	movs	r1, r3
   16a38:	231f      	movs	r3, #31
   16a3a:	400b      	ands	r3, r1
   16a3c:	2101      	movs	r1, #1
   16a3e:	4099      	lsls	r1, r3
   16a40:	000b      	movs	r3, r1
   16a42:	0019      	movs	r1, r3
   16a44:	2380      	movs	r3, #128	; 0x80
   16a46:	50d1      	str	r1, [r2, r3]
}
   16a48:	46c0      	nop			; (mov r8, r8)
   16a4a:	46bd      	mov	sp, r7
   16a4c:	b002      	add	sp, #8
   16a4e:	bd80      	pop	{r7, pc}
   16a50:	e000e100 	.word	0xe000e100

00016a54 <spi_is_syncing>:
{
   16a54:	b580      	push	{r7, lr}
   16a56:	b084      	sub	sp, #16
   16a58:	af00      	add	r7, sp, #0
   16a5a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16a5c:	687b      	ldr	r3, [r7, #4]
   16a5e:	681b      	ldr	r3, [r3, #0]
   16a60:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   16a62:	68fb      	ldr	r3, [r7, #12]
   16a64:	69db      	ldr	r3, [r3, #28]
   16a66:	1e5a      	subs	r2, r3, #1
   16a68:	4193      	sbcs	r3, r2
   16a6a:	b2db      	uxtb	r3, r3
}
   16a6c:	0018      	movs	r0, r3
   16a6e:	46bd      	mov	sp, r7
   16a70:	b004      	add	sp, #16
   16a72:	bd80      	pop	{r7, pc}

00016a74 <spi_enable>:
{
   16a74:	b580      	push	{r7, lr}
   16a76:	b084      	sub	sp, #16
   16a78:	af00      	add	r7, sp, #0
   16a7a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16a7c:	687b      	ldr	r3, [r7, #4]
   16a7e:	681b      	ldr	r3, [r3, #0]
   16a80:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   16a82:	687b      	ldr	r3, [r7, #4]
   16a84:	681b      	ldr	r3, [r3, #0]
   16a86:	0018      	movs	r0, r3
   16a88:	4b0b      	ldr	r3, [pc, #44]	; (16ab8 <spi_enable+0x44>)
   16a8a:	4798      	blx	r3
   16a8c:	0003      	movs	r3, r0
   16a8e:	0018      	movs	r0, r3
   16a90:	4b0a      	ldr	r3, [pc, #40]	; (16abc <spi_enable+0x48>)
   16a92:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   16a94:	46c0      	nop			; (mov r8, r8)
   16a96:	687b      	ldr	r3, [r7, #4]
   16a98:	0018      	movs	r0, r3
   16a9a:	4b09      	ldr	r3, [pc, #36]	; (16ac0 <spi_enable+0x4c>)
   16a9c:	4798      	blx	r3
   16a9e:	1e03      	subs	r3, r0, #0
   16aa0:	d1f9      	bne.n	16a96 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   16aa2:	68fb      	ldr	r3, [r7, #12]
   16aa4:	681b      	ldr	r3, [r3, #0]
   16aa6:	2202      	movs	r2, #2
   16aa8:	431a      	orrs	r2, r3
   16aaa:	68fb      	ldr	r3, [r7, #12]
   16aac:	601a      	str	r2, [r3, #0]
}
   16aae:	46c0      	nop			; (mov r8, r8)
   16ab0:	46bd      	mov	sp, r7
   16ab2:	b004      	add	sp, #16
   16ab4:	bd80      	pop	{r7, pc}
   16ab6:	46c0      	nop			; (mov r8, r8)
   16ab8:	00008175 	.word	0x00008175
   16abc:	000169f9 	.word	0x000169f9
   16ac0:	00016a55 	.word	0x00016a55

00016ac4 <spi_disable>:
{
   16ac4:	b580      	push	{r7, lr}
   16ac6:	b084      	sub	sp, #16
   16ac8:	af00      	add	r7, sp, #0
   16aca:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16acc:	687b      	ldr	r3, [r7, #4]
   16ace:	681b      	ldr	r3, [r3, #0]
   16ad0:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   16ad2:	687b      	ldr	r3, [r7, #4]
   16ad4:	681b      	ldr	r3, [r3, #0]
   16ad6:	0018      	movs	r0, r3
   16ad8:	4b0e      	ldr	r3, [pc, #56]	; (16b14 <spi_disable+0x50>)
   16ada:	4798      	blx	r3
   16adc:	0003      	movs	r3, r0
   16ade:	0018      	movs	r0, r3
   16ae0:	4b0d      	ldr	r3, [pc, #52]	; (16b18 <spi_disable+0x54>)
   16ae2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   16ae4:	46c0      	nop			; (mov r8, r8)
   16ae6:	687b      	ldr	r3, [r7, #4]
   16ae8:	0018      	movs	r0, r3
   16aea:	4b0c      	ldr	r3, [pc, #48]	; (16b1c <spi_disable+0x58>)
   16aec:	4798      	blx	r3
   16aee:	1e03      	subs	r3, r0, #0
   16af0:	d1f9      	bne.n	16ae6 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   16af2:	68fb      	ldr	r3, [r7, #12]
   16af4:	228f      	movs	r2, #143	; 0x8f
   16af6:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   16af8:	68fb      	ldr	r3, [r7, #12]
   16afa:	228f      	movs	r2, #143	; 0x8f
   16afc:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   16afe:	68fb      	ldr	r3, [r7, #12]
   16b00:	681b      	ldr	r3, [r3, #0]
   16b02:	2202      	movs	r2, #2
   16b04:	4393      	bics	r3, r2
   16b06:	001a      	movs	r2, r3
   16b08:	68fb      	ldr	r3, [r7, #12]
   16b0a:	601a      	str	r2, [r3, #0]
}
   16b0c:	46c0      	nop			; (mov r8, r8)
   16b0e:	46bd      	mov	sp, r7
   16b10:	b004      	add	sp, #16
   16b12:	bd80      	pop	{r7, pc}
   16b14:	00008175 	.word	0x00008175
   16b18:	00016a25 	.word	0x00016a25
   16b1c:	00016a55 	.word	0x00016a55

00016b20 <spi_is_write_complete>:
{
   16b20:	b580      	push	{r7, lr}
   16b22:	b084      	sub	sp, #16
   16b24:	af00      	add	r7, sp, #0
   16b26:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16b28:	687b      	ldr	r3, [r7, #4]
   16b2a:	681b      	ldr	r3, [r3, #0]
   16b2c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   16b2e:	68fb      	ldr	r3, [r7, #12]
   16b30:	7e1b      	ldrb	r3, [r3, #24]
   16b32:	b2db      	uxtb	r3, r3
   16b34:	001a      	movs	r2, r3
   16b36:	2302      	movs	r3, #2
   16b38:	4013      	ands	r3, r2
   16b3a:	1e5a      	subs	r2, r3, #1
   16b3c:	4193      	sbcs	r3, r2
   16b3e:	b2db      	uxtb	r3, r3
}
   16b40:	0018      	movs	r0, r3
   16b42:	46bd      	mov	sp, r7
   16b44:	b004      	add	sp, #16
   16b46:	bd80      	pop	{r7, pc}

00016b48 <spi_is_ready_to_write>:
{
   16b48:	b580      	push	{r7, lr}
   16b4a:	b084      	sub	sp, #16
   16b4c:	af00      	add	r7, sp, #0
   16b4e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16b50:	687b      	ldr	r3, [r7, #4]
   16b52:	681b      	ldr	r3, [r3, #0]
   16b54:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   16b56:	68fb      	ldr	r3, [r7, #12]
   16b58:	7e1b      	ldrb	r3, [r3, #24]
   16b5a:	b2db      	uxtb	r3, r3
   16b5c:	001a      	movs	r2, r3
   16b5e:	2301      	movs	r3, #1
   16b60:	4013      	ands	r3, r2
   16b62:	1e5a      	subs	r2, r3, #1
   16b64:	4193      	sbcs	r3, r2
   16b66:	b2db      	uxtb	r3, r3
}
   16b68:	0018      	movs	r0, r3
   16b6a:	46bd      	mov	sp, r7
   16b6c:	b004      	add	sp, #16
   16b6e:	bd80      	pop	{r7, pc}

00016b70 <spi_is_ready_to_read>:
{
   16b70:	b580      	push	{r7, lr}
   16b72:	b084      	sub	sp, #16
   16b74:	af00      	add	r7, sp, #0
   16b76:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16b78:	687b      	ldr	r3, [r7, #4]
   16b7a:	681b      	ldr	r3, [r3, #0]
   16b7c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   16b7e:	68fb      	ldr	r3, [r7, #12]
   16b80:	7e1b      	ldrb	r3, [r3, #24]
   16b82:	b2db      	uxtb	r3, r3
   16b84:	001a      	movs	r2, r3
   16b86:	2304      	movs	r3, #4
   16b88:	4013      	ands	r3, r2
   16b8a:	1e5a      	subs	r2, r3, #1
   16b8c:	4193      	sbcs	r3, r2
   16b8e:	b2db      	uxtb	r3, r3
}
   16b90:	0018      	movs	r0, r3
   16b92:	46bd      	mov	sp, r7
   16b94:	b004      	add	sp, #16
   16b96:	bd80      	pop	{r7, pc}

00016b98 <spi_write>:
{
   16b98:	b580      	push	{r7, lr}
   16b9a:	b084      	sub	sp, #16
   16b9c:	af00      	add	r7, sp, #0
   16b9e:	6078      	str	r0, [r7, #4]
   16ba0:	000a      	movs	r2, r1
   16ba2:	1cbb      	adds	r3, r7, #2
   16ba4:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16ba6:	687b      	ldr	r3, [r7, #4]
   16ba8:	681b      	ldr	r3, [r3, #0]
   16baa:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   16bac:	687b      	ldr	r3, [r7, #4]
   16bae:	0018      	movs	r0, r3
   16bb0:	4b0a      	ldr	r3, [pc, #40]	; (16bdc <spi_write+0x44>)
   16bb2:	4798      	blx	r3
   16bb4:	0003      	movs	r3, r0
   16bb6:	001a      	movs	r2, r3
   16bb8:	2301      	movs	r3, #1
   16bba:	4053      	eors	r3, r2
   16bbc:	b2db      	uxtb	r3, r3
   16bbe:	2b00      	cmp	r3, #0
   16bc0:	d001      	beq.n	16bc6 <spi_write+0x2e>
		return STATUS_BUSY;
   16bc2:	2305      	movs	r3, #5
   16bc4:	e006      	b.n	16bd4 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   16bc6:	1cbb      	adds	r3, r7, #2
   16bc8:	881b      	ldrh	r3, [r3, #0]
   16bca:	05db      	lsls	r3, r3, #23
   16bcc:	0dda      	lsrs	r2, r3, #23
   16bce:	68fb      	ldr	r3, [r7, #12]
   16bd0:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   16bd2:	2300      	movs	r3, #0
}
   16bd4:	0018      	movs	r0, r3
   16bd6:	46bd      	mov	sp, r7
   16bd8:	b004      	add	sp, #16
   16bda:	bd80      	pop	{r7, pc}
   16bdc:	00016b49 	.word	0x00016b49

00016be0 <spi_read>:
{
   16be0:	b580      	push	{r7, lr}
   16be2:	b084      	sub	sp, #16
   16be4:	af00      	add	r7, sp, #0
   16be6:	6078      	str	r0, [r7, #4]
   16be8:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16bea:	687b      	ldr	r3, [r7, #4]
   16bec:	681b      	ldr	r3, [r3, #0]
   16bee:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   16bf0:	687b      	ldr	r3, [r7, #4]
   16bf2:	0018      	movs	r0, r3
   16bf4:	4b1b      	ldr	r3, [pc, #108]	; (16c64 <spi_read+0x84>)
   16bf6:	4798      	blx	r3
   16bf8:	0003      	movs	r3, r0
   16bfa:	001a      	movs	r2, r3
   16bfc:	2301      	movs	r3, #1
   16bfe:	4053      	eors	r3, r2
   16c00:	b2db      	uxtb	r3, r3
   16c02:	2b00      	cmp	r3, #0
   16c04:	d001      	beq.n	16c0a <spi_read+0x2a>
		return STATUS_ERR_IO;
   16c06:	2310      	movs	r3, #16
   16c08:	e027      	b.n	16c5a <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   16c0a:	230f      	movs	r3, #15
   16c0c:	18fb      	adds	r3, r7, r3
   16c0e:	2200      	movs	r2, #0
   16c10:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   16c12:	68bb      	ldr	r3, [r7, #8]
   16c14:	8b5b      	ldrh	r3, [r3, #26]
   16c16:	b29b      	uxth	r3, r3
   16c18:	001a      	movs	r2, r3
   16c1a:	2304      	movs	r3, #4
   16c1c:	4013      	ands	r3, r2
   16c1e:	d006      	beq.n	16c2e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   16c20:	230f      	movs	r3, #15
   16c22:	18fb      	adds	r3, r7, r3
   16c24:	221e      	movs	r2, #30
   16c26:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   16c28:	68bb      	ldr	r3, [r7, #8]
   16c2a:	2204      	movs	r2, #4
   16c2c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   16c2e:	687b      	ldr	r3, [r7, #4]
   16c30:	799b      	ldrb	r3, [r3, #6]
   16c32:	2b01      	cmp	r3, #1
   16c34:	d108      	bne.n	16c48 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   16c36:	68bb      	ldr	r3, [r7, #8]
   16c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16c3a:	b29b      	uxth	r3, r3
   16c3c:	05db      	lsls	r3, r3, #23
   16c3e:	0ddb      	lsrs	r3, r3, #23
   16c40:	b29a      	uxth	r2, r3
   16c42:	683b      	ldr	r3, [r7, #0]
   16c44:	801a      	strh	r2, [r3, #0]
   16c46:	e005      	b.n	16c54 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   16c48:	68bb      	ldr	r3, [r7, #8]
   16c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16c4c:	b2db      	uxtb	r3, r3
   16c4e:	b29a      	uxth	r2, r3
   16c50:	683b      	ldr	r3, [r7, #0]
   16c52:	801a      	strh	r2, [r3, #0]
	return retval;
   16c54:	230f      	movs	r3, #15
   16c56:	18fb      	adds	r3, r7, r3
   16c58:	781b      	ldrb	r3, [r3, #0]
}
   16c5a:	0018      	movs	r0, r3
   16c5c:	46bd      	mov	sp, r7
   16c5e:	b004      	add	sp, #16
   16c60:	bd80      	pop	{r7, pc}
   16c62:	46c0      	nop			; (mov r8, r8)
   16c64:	00016b71 	.word	0x00016b71

00016c68 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   16c68:	b590      	push	{r4, r7, lr}
   16c6a:	b089      	sub	sp, #36	; 0x24
   16c6c:	af00      	add	r7, sp, #0
   16c6e:	6078      	str	r0, [r7, #4]
   16c70:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   16c72:	230c      	movs	r3, #12
   16c74:	18fb      	adds	r3, r7, r3
   16c76:	2200      	movs	r2, #0
   16c78:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   16c7a:	687b      	ldr	r3, [r7, #4]
   16c7c:	681b      	ldr	r3, [r3, #0]
   16c7e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   16c80:	687b      	ldr	r3, [r7, #4]
   16c82:	0018      	movs	r0, r3
   16c84:	4b24      	ldr	r3, [pc, #144]	; (16d18 <spi_set_baudrate+0xb0>)
   16c86:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   16c88:	46c0      	nop			; (mov r8, r8)
   16c8a:	687b      	ldr	r3, [r7, #4]
   16c8c:	0018      	movs	r0, r3
   16c8e:	4b23      	ldr	r3, [pc, #140]	; (16d1c <spi_set_baudrate+0xb4>)
   16c90:	4798      	blx	r3
   16c92:	1e03      	subs	r3, r0, #0
   16c94:	d1f9      	bne.n	16c8a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16c96:	687b      	ldr	r3, [r7, #4]
   16c98:	681b      	ldr	r3, [r3, #0]
   16c9a:	0018      	movs	r0, r3
   16c9c:	4b20      	ldr	r3, [pc, #128]	; (16d20 <spi_set_baudrate+0xb8>)
   16c9e:	4798      	blx	r3
   16ca0:	0003      	movs	r3, r0
   16ca2:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16ca4:	69bb      	ldr	r3, [r7, #24]
   16ca6:	3312      	adds	r3, #18
   16ca8:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   16caa:	697b      	ldr	r3, [r7, #20]
   16cac:	b2db      	uxtb	r3, r3
   16cae:	0018      	movs	r0, r3
   16cb0:	4b1c      	ldr	r3, [pc, #112]	; (16d24 <spi_set_baudrate+0xbc>)
   16cb2:	4798      	blx	r3
   16cb4:	0003      	movs	r3, r0
   16cb6:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   16cb8:	230f      	movs	r3, #15
   16cba:	18fc      	adds	r4, r7, r3
   16cbc:	230c      	movs	r3, #12
   16cbe:	18fa      	adds	r2, r7, r3
   16cc0:	6939      	ldr	r1, [r7, #16]
   16cc2:	683b      	ldr	r3, [r7, #0]
   16cc4:	0018      	movs	r0, r3
   16cc6:	4b18      	ldr	r3, [pc, #96]	; (16d28 <spi_set_baudrate+0xc0>)
   16cc8:	4798      	blx	r3
   16cca:	0003      	movs	r3, r0
   16ccc:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   16cce:	230f      	movs	r3, #15
   16cd0:	18fb      	adds	r3, r7, r3
   16cd2:	781b      	ldrb	r3, [r3, #0]
   16cd4:	2b00      	cmp	r3, #0
   16cd6:	d001      	beq.n	16cdc <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   16cd8:	2317      	movs	r3, #23
   16cda:	e018      	b.n	16d0e <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   16cdc:	230c      	movs	r3, #12
   16cde:	18fb      	adds	r3, r7, r3
   16ce0:	881b      	ldrh	r3, [r3, #0]
   16ce2:	b2da      	uxtb	r2, r3
   16ce4:	69fb      	ldr	r3, [r7, #28]
   16ce6:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   16ce8:	46c0      	nop			; (mov r8, r8)
   16cea:	687b      	ldr	r3, [r7, #4]
   16cec:	0018      	movs	r0, r3
   16cee:	4b0b      	ldr	r3, [pc, #44]	; (16d1c <spi_set_baudrate+0xb4>)
   16cf0:	4798      	blx	r3
   16cf2:	1e03      	subs	r3, r0, #0
   16cf4:	d1f9      	bne.n	16cea <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   16cf6:	687b      	ldr	r3, [r7, #4]
   16cf8:	0018      	movs	r0, r3
   16cfa:	4b0c      	ldr	r3, [pc, #48]	; (16d2c <spi_set_baudrate+0xc4>)
   16cfc:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   16cfe:	46c0      	nop			; (mov r8, r8)
   16d00:	687b      	ldr	r3, [r7, #4]
   16d02:	0018      	movs	r0, r3
   16d04:	4b05      	ldr	r3, [pc, #20]	; (16d1c <spi_set_baudrate+0xb4>)
   16d06:	4798      	blx	r3
   16d08:	1e03      	subs	r3, r0, #0
   16d0a:	d1f9      	bne.n	16d00 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   16d0c:	2300      	movs	r3, #0
}
   16d0e:	0018      	movs	r0, r3
   16d10:	46bd      	mov	sp, r7
   16d12:	b009      	add	sp, #36	; 0x24
   16d14:	bd90      	pop	{r4, r7, pc}
   16d16:	46c0      	nop			; (mov r8, r8)
   16d18:	00016ac5 	.word	0x00016ac5
   16d1c:	00016a55 	.word	0x00016a55
   16d20:	000180a9 	.word	0x000180a9
   16d24:	00018ce1 	.word	0x00018ce1
   16d28:	00017c23 	.word	0x00017c23
   16d2c:	00016a75 	.word	0x00016a75

00016d30 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
   16d30:	b580      	push	{r7, lr}
   16d32:	b084      	sub	sp, #16
   16d34:	af00      	add	r7, sp, #0
   16d36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   16d38:	687b      	ldr	r3, [r7, #4]
   16d3a:	681b      	ldr	r3, [r3, #0]
   16d3c:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   16d3e:	68fb      	ldr	r3, [r7, #12]
   16d40:	2202      	movs	r2, #2
   16d42:	761a      	strb	r2, [r3, #24]
}
   16d44:	46c0      	nop			; (mov r8, r8)
   16d46:	46bd      	mov	sp, r7
   16d48:	b004      	add	sp, #16
   16d4a:	bd80      	pop	{r7, pc}

00016d4c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   16d4c:	b590      	push	{r4, r7, lr}
   16d4e:	b093      	sub	sp, #76	; 0x4c
   16d50:	af00      	add	r7, sp, #0
   16d52:	6078      	str	r0, [r7, #4]
   16d54:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   16d56:	687b      	ldr	r3, [r7, #4]
   16d58:	681b      	ldr	r3, [r3, #0]
   16d5a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   16d5c:	687b      	ldr	r3, [r7, #4]
   16d5e:	681b      	ldr	r3, [r3, #0]
   16d60:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   16d62:	231c      	movs	r3, #28
   16d64:	18fb      	adds	r3, r7, r3
   16d66:	0018      	movs	r0, r3
   16d68:	4b85      	ldr	r3, [pc, #532]	; (16f80 <_spi_set_config+0x234>)
   16d6a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16d6c:	231c      	movs	r3, #28
   16d6e:	18fb      	adds	r3, r7, r3
   16d70:	2200      	movs	r2, #0
   16d72:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   16d74:	683b      	ldr	r3, [r7, #0]
   16d76:	781b      	ldrb	r3, [r3, #0]
   16d78:	2b00      	cmp	r3, #0
   16d7a:	d103      	bne.n	16d84 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   16d7c:	231c      	movs	r3, #28
   16d7e:	18fb      	adds	r3, r7, r3
   16d80:	2200      	movs	r2, #0
   16d82:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   16d84:	683b      	ldr	r3, [r7, #0]
   16d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   16d88:	230c      	movs	r3, #12
   16d8a:	18fb      	adds	r3, r7, r3
   16d8c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   16d8e:	683b      	ldr	r3, [r7, #0]
   16d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   16d92:	230c      	movs	r3, #12
   16d94:	18fb      	adds	r3, r7, r3
   16d96:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   16d98:	683b      	ldr	r3, [r7, #0]
   16d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   16d9c:	230c      	movs	r3, #12
   16d9e:	18fb      	adds	r3, r7, r3
   16da0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   16da2:	683b      	ldr	r3, [r7, #0]
   16da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   16da6:	230c      	movs	r3, #12
   16da8:	18fb      	adds	r3, r7, r3
   16daa:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   16dac:	2347      	movs	r3, #71	; 0x47
   16dae:	18fb      	adds	r3, r7, r3
   16db0:	2200      	movs	r2, #0
   16db2:	701a      	strb	r2, [r3, #0]
   16db4:	e02c      	b.n	16e10 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   16db6:	2347      	movs	r3, #71	; 0x47
   16db8:	18fb      	adds	r3, r7, r3
   16dba:	781a      	ldrb	r2, [r3, #0]
   16dbc:	230c      	movs	r3, #12
   16dbe:	18fb      	adds	r3, r7, r3
   16dc0:	0092      	lsls	r2, r2, #2
   16dc2:	58d3      	ldr	r3, [r2, r3]
   16dc4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   16dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16dc8:	2b00      	cmp	r3, #0
   16dca:	d109      	bne.n	16de0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   16dcc:	2347      	movs	r3, #71	; 0x47
   16dce:	18fb      	adds	r3, r7, r3
   16dd0:	781a      	ldrb	r2, [r3, #0]
   16dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16dd4:	0011      	movs	r1, r2
   16dd6:	0018      	movs	r0, r3
   16dd8:	4b6a      	ldr	r3, [pc, #424]	; (16f84 <_spi_set_config+0x238>)
   16dda:	4798      	blx	r3
   16ddc:	0003      	movs	r3, r0
   16dde:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   16de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16de2:	3301      	adds	r3, #1
   16de4:	d00d      	beq.n	16e02 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   16de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16de8:	b2da      	uxtb	r2, r3
   16dea:	231c      	movs	r3, #28
   16dec:	18fb      	adds	r3, r7, r3
   16dee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   16df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16df2:	0c1b      	lsrs	r3, r3, #16
   16df4:	b2db      	uxtb	r3, r3
   16df6:	221c      	movs	r2, #28
   16df8:	18ba      	adds	r2, r7, r2
   16dfa:	0011      	movs	r1, r2
   16dfc:	0018      	movs	r0, r3
   16dfe:	4b62      	ldr	r3, [pc, #392]	; (16f88 <_spi_set_config+0x23c>)
   16e00:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   16e02:	2347      	movs	r3, #71	; 0x47
   16e04:	18fb      	adds	r3, r7, r3
   16e06:	781a      	ldrb	r2, [r3, #0]
   16e08:	2347      	movs	r3, #71	; 0x47
   16e0a:	18fb      	adds	r3, r7, r3
   16e0c:	3201      	adds	r2, #1
   16e0e:	701a      	strb	r2, [r3, #0]
   16e10:	2347      	movs	r3, #71	; 0x47
   16e12:	18fb      	adds	r3, r7, r3
   16e14:	781b      	ldrb	r3, [r3, #0]
   16e16:	2b03      	cmp	r3, #3
   16e18:	d9cd      	bls.n	16db6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   16e1a:	683b      	ldr	r3, [r7, #0]
   16e1c:	781a      	ldrb	r2, [r3, #0]
   16e1e:	687b      	ldr	r3, [r7, #4]
   16e20:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   16e22:	683b      	ldr	r3, [r7, #0]
   16e24:	7c1a      	ldrb	r2, [r3, #16]
   16e26:	687b      	ldr	r3, [r7, #4]
   16e28:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   16e2a:	683b      	ldr	r3, [r7, #0]
   16e2c:	7c9a      	ldrb	r2, [r3, #18]
   16e2e:	687b      	ldr	r3, [r7, #4]
   16e30:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   16e32:	683b      	ldr	r3, [r7, #0]
   16e34:	7d1a      	ldrb	r2, [r3, #20]
   16e36:	687b      	ldr	r3, [r7, #4]
   16e38:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   16e3a:	230a      	movs	r3, #10
   16e3c:	18fb      	adds	r3, r7, r3
   16e3e:	2200      	movs	r2, #0
   16e40:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   16e42:	2300      	movs	r3, #0
   16e44:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   16e46:	2300      	movs	r3, #0
   16e48:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   16e4a:	683b      	ldr	r3, [r7, #0]
   16e4c:	781b      	ldrb	r3, [r3, #0]
   16e4e:	2b01      	cmp	r3, #1
   16e50:	d129      	bne.n	16ea6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16e52:	687b      	ldr	r3, [r7, #4]
   16e54:	681b      	ldr	r3, [r3, #0]
   16e56:	0018      	movs	r0, r3
   16e58:	4b4c      	ldr	r3, [pc, #304]	; (16f8c <_spi_set_config+0x240>)
   16e5a:	4798      	blx	r3
   16e5c:	0003      	movs	r3, r0
   16e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16e62:	3312      	adds	r3, #18
   16e64:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   16e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16e68:	b2db      	uxtb	r3, r3
   16e6a:	0018      	movs	r0, r3
   16e6c:	4b48      	ldr	r3, [pc, #288]	; (16f90 <_spi_set_config+0x244>)
   16e6e:	4798      	blx	r3
   16e70:	0003      	movs	r3, r0
   16e72:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   16e74:	683b      	ldr	r3, [r7, #0]
   16e76:	699b      	ldr	r3, [r3, #24]
   16e78:	2223      	movs	r2, #35	; 0x23
   16e7a:	18bc      	adds	r4, r7, r2
   16e7c:	220a      	movs	r2, #10
   16e7e:	18ba      	adds	r2, r7, r2
   16e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
   16e82:	0018      	movs	r0, r3
   16e84:	4b43      	ldr	r3, [pc, #268]	; (16f94 <_spi_set_config+0x248>)
   16e86:	4798      	blx	r3
   16e88:	0003      	movs	r3, r0
   16e8a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   16e8c:	2323      	movs	r3, #35	; 0x23
   16e8e:	18fb      	adds	r3, r7, r3
   16e90:	781b      	ldrb	r3, [r3, #0]
   16e92:	2b00      	cmp	r3, #0
   16e94:	d001      	beq.n	16e9a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   16e96:	2317      	movs	r3, #23
   16e98:	e06d      	b.n	16f76 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   16e9a:	230a      	movs	r3, #10
   16e9c:	18fb      	adds	r3, r7, r3
   16e9e:	881b      	ldrh	r3, [r3, #0]
   16ea0:	b2da      	uxtb	r2, r3
   16ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ea4:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   16ea6:	683b      	ldr	r3, [r7, #0]
   16ea8:	781b      	ldrb	r3, [r3, #0]
   16eaa:	2b00      	cmp	r3, #0
   16eac:	d11a      	bne.n	16ee4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
   16eae:	683b      	ldr	r3, [r7, #0]
   16eb0:	699b      	ldr	r3, [r3, #24]
   16eb2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
   16eb4:	683b      	ldr	r3, [r7, #0]
   16eb6:	8b9b      	ldrh	r3, [r3, #28]
   16eb8:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   16eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   16ebe:	683a      	ldr	r2, [r7, #0]
   16ec0:	7f92      	ldrb	r2, [r2, #30]
   16ec2:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   16ec4:	683a      	ldr	r2, [r7, #0]
   16ec6:	7fd2      	ldrb	r2, [r2, #31]
   16ec8:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   16eca:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
   16ecc:	431a      	orrs	r2, r3
   16ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ed0:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
   16ed2:	683b      	ldr	r3, [r7, #0]
   16ed4:	2220      	movs	r2, #32
   16ed6:	5c9b      	ldrb	r3, [r3, r2]
   16ed8:	2b00      	cmp	r3, #0
   16eda:	d003      	beq.n	16ee4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   16edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ede:	2240      	movs	r2, #64	; 0x40
   16ee0:	4313      	orrs	r3, r2
   16ee2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   16ee4:	683b      	ldr	r3, [r7, #0]
   16ee6:	685b      	ldr	r3, [r3, #4]
   16ee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16eea:	4313      	orrs	r3, r2
   16eec:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   16eee:	683b      	ldr	r3, [r7, #0]
   16ef0:	689b      	ldr	r3, [r3, #8]
   16ef2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16ef4:	4313      	orrs	r3, r2
   16ef6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   16ef8:	683b      	ldr	r3, [r7, #0]
   16efa:	68db      	ldr	r3, [r3, #12]
   16efc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16efe:	4313      	orrs	r3, r2
   16f00:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   16f02:	683b      	ldr	r3, [r7, #0]
   16f04:	7c1b      	ldrb	r3, [r3, #16]
   16f06:	001a      	movs	r2, r3
   16f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16f0a:	4313      	orrs	r3, r2
   16f0c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   16f0e:	683b      	ldr	r3, [r7, #0]
   16f10:	7c5b      	ldrb	r3, [r3, #17]
   16f12:	2b00      	cmp	r3, #0
   16f14:	d103      	bne.n	16f1e <_spi_set_config+0x1d2>
   16f16:	4b20      	ldr	r3, [pc, #128]	; (16f98 <_spi_set_config+0x24c>)
   16f18:	4798      	blx	r3
   16f1a:	1e03      	subs	r3, r0, #0
   16f1c:	d003      	beq.n	16f26 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   16f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f20:	2280      	movs	r2, #128	; 0x80
   16f22:	4313      	orrs	r3, r2
   16f24:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   16f26:	683b      	ldr	r3, [r7, #0]
   16f28:	7c9b      	ldrb	r3, [r3, #18]
   16f2a:	2b00      	cmp	r3, #0
   16f2c:	d004      	beq.n	16f38 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   16f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16f30:	2280      	movs	r2, #128	; 0x80
   16f32:	0292      	lsls	r2, r2, #10
   16f34:	4313      	orrs	r3, r2
   16f36:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   16f38:	683b      	ldr	r3, [r7, #0]
   16f3a:	7cdb      	ldrb	r3, [r3, #19]
   16f3c:	2b00      	cmp	r3, #0
   16f3e:	d004      	beq.n	16f4a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   16f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16f42:	2280      	movs	r2, #128	; 0x80
   16f44:	0092      	lsls	r2, r2, #2
   16f46:	4313      	orrs	r3, r2
   16f48:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   16f4a:	683b      	ldr	r3, [r7, #0]
   16f4c:	7d1b      	ldrb	r3, [r3, #20]
   16f4e:	2b00      	cmp	r3, #0
   16f50:	d004      	beq.n	16f5c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   16f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16f54:	2280      	movs	r2, #128	; 0x80
   16f56:	0192      	lsls	r2, r2, #6
   16f58:	4313      	orrs	r3, r2
   16f5a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   16f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f5e:	681a      	ldr	r2, [r3, #0]
   16f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f62:	431a      	orrs	r2, r3
   16f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f66:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   16f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f6a:	685a      	ldr	r2, [r3, #4]
   16f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16f6e:	431a      	orrs	r2, r3
   16f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f72:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   16f74:	2300      	movs	r3, #0
}
   16f76:	0018      	movs	r0, r3
   16f78:	46bd      	mov	sp, r7
   16f7a:	b013      	add	sp, #76	; 0x4c
   16f7c:	bd90      	pop	{r4, r7, pc}
   16f7e:	46c0      	nop			; (mov r8, r8)
   16f80:	00016845 	.word	0x00016845
   16f84:	00017eed 	.word	0x00017eed
   16f88:	00018ea5 	.word	0x00018ea5
   16f8c:	000180a9 	.word	0x000180a9
   16f90:	00018ce1 	.word	0x00018ce1
   16f94:	00017c23 	.word	0x00017c23
   16f98:	000169d9 	.word	0x000169d9

00016f9c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   16f9c:	b590      	push	{r4, r7, lr}
   16f9e:	b08b      	sub	sp, #44	; 0x2c
   16fa0:	af00      	add	r7, sp, #0
   16fa2:	60f8      	str	r0, [r7, #12]
   16fa4:	60b9      	str	r1, [r7, #8]
   16fa6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   16fa8:	68fb      	ldr	r3, [r7, #12]
   16faa:	68ba      	ldr	r2, [r7, #8]
   16fac:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   16fae:	68fb      	ldr	r3, [r7, #12]
   16fb0:	681b      	ldr	r3, [r3, #0]
   16fb2:	61bb      	str	r3, [r7, #24]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   16fb4:	69bb      	ldr	r3, [r7, #24]
   16fb6:	681b      	ldr	r3, [r3, #0]
   16fb8:	2202      	movs	r2, #2
   16fba:	4013      	ands	r3, r2
   16fbc:	d001      	beq.n	16fc2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   16fbe:	231c      	movs	r3, #28
   16fc0:	e0b9      	b.n	17136 <spi_init+0x19a>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   16fc2:	69bb      	ldr	r3, [r7, #24]
   16fc4:	681b      	ldr	r3, [r3, #0]
   16fc6:	2201      	movs	r2, #1
   16fc8:	4013      	ands	r3, r2
   16fca:	d001      	beq.n	16fd0 <spi_init+0x34>
		return STATUS_BUSY;
   16fcc:	2305      	movs	r3, #5
   16fce:	e0b2      	b.n	17136 <spi_init+0x19a>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16fd0:	68fb      	ldr	r3, [r7, #12]
   16fd2:	681b      	ldr	r3, [r3, #0]
   16fd4:	0018      	movs	r0, r3
   16fd6:	4b5a      	ldr	r3, [pc, #360]	; (17140 <spi_init+0x1a4>)
   16fd8:	4798      	blx	r3
   16fda:	0003      	movs	r3, r0
   16fdc:	617b      	str	r3, [r7, #20]
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   16fde:	697b      	ldr	r3, [r7, #20]
   16fe0:	2b05      	cmp	r3, #5
   16fe2:	d104      	bne.n	16fee <spi_init+0x52>
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   16fe4:	2301      	movs	r3, #1
   16fe6:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
   16fe8:	2318      	movs	r3, #24
   16fea:	623b      	str	r3, [r7, #32]
   16fec:	e004      	b.n	16ff8 <spi_init+0x5c>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
   16fee:	697b      	ldr	r3, [r7, #20]
   16ff0:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16ff2:	697b      	ldr	r3, [r7, #20]
   16ff4:	3312      	adds	r3, #18
   16ff6:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   16ff8:	697b      	ldr	r3, [r7, #20]
   16ffa:	2b05      	cmp	r3, #5
   16ffc:	d108      	bne.n	17010 <spi_init+0x74>
#  ifdef ID_SERCOM5
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   16ffe:	2201      	movs	r2, #1
   17000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17002:	409a      	lsls	r2, r3
   17004:	0013      	movs	r3, r2
   17006:	0019      	movs	r1, r3
   17008:	2003      	movs	r0, #3
   1700a:	4b4e      	ldr	r3, [pc, #312]	; (17144 <spi_init+0x1a8>)
   1700c:	4798      	blx	r3
   1700e:	e007      	b.n	17020 <spi_init+0x84>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   17010:	2201      	movs	r2, #1
   17012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17014:	409a      	lsls	r2, r3
   17016:	0013      	movs	r3, r2
   17018:	0019      	movs	r1, r3
   1701a:	2002      	movs	r0, #2
   1701c:	4b49      	ldr	r3, [pc, #292]	; (17144 <spi_init+0x1a8>)
   1701e:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   17020:	2310      	movs	r3, #16
   17022:	18fb      	adds	r3, r7, r3
   17024:	0018      	movs	r0, r3
   17026:	4b48      	ldr	r3, [pc, #288]	; (17148 <spi_init+0x1ac>)
   17028:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   1702a:	687b      	ldr	r3, [r7, #4]
   1702c:	2224      	movs	r2, #36	; 0x24
   1702e:	5c9a      	ldrb	r2, [r3, r2]
   17030:	2310      	movs	r3, #16
   17032:	18fb      	adds	r3, r7, r3
   17034:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   17036:	6a3b      	ldr	r3, [r7, #32]
   17038:	b2db      	uxtb	r3, r3
   1703a:	2210      	movs	r2, #16
   1703c:	18ba      	adds	r2, r7, r2
   1703e:	0011      	movs	r1, r2
   17040:	0018      	movs	r0, r3
   17042:	4b42      	ldr	r3, [pc, #264]	; (1714c <spi_init+0x1b0>)
   17044:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17046:	6a3b      	ldr	r3, [r7, #32]
   17048:	b2db      	uxtb	r3, r3
   1704a:	0018      	movs	r0, r3
   1704c:	4b40      	ldr	r3, [pc, #256]	; (17150 <spi_init+0x1b4>)
   1704e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   17050:	687b      	ldr	r3, [r7, #4]
   17052:	2224      	movs	r2, #36	; 0x24
   17054:	5c9b      	ldrb	r3, [r3, r2]
   17056:	2100      	movs	r1, #0
   17058:	0018      	movs	r0, r3
   1705a:	4b3e      	ldr	r3, [pc, #248]	; (17154 <spi_init+0x1b8>)
   1705c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   1705e:	687b      	ldr	r3, [r7, #4]
   17060:	781b      	ldrb	r3, [r3, #0]
   17062:	2b01      	cmp	r3, #1
   17064:	d105      	bne.n	17072 <spi_init+0xd6>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   17066:	69bb      	ldr	r3, [r7, #24]
   17068:	681b      	ldr	r3, [r3, #0]
   1706a:	220c      	movs	r2, #12
   1706c:	431a      	orrs	r2, r3
   1706e:	69bb      	ldr	r3, [r7, #24]
   17070:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   17072:	687b      	ldr	r3, [r7, #4]
   17074:	781b      	ldrb	r3, [r3, #0]
   17076:	2b00      	cmp	r3, #0
   17078:	d105      	bne.n	17086 <spi_init+0xea>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
   1707a:	69bb      	ldr	r3, [r7, #24]
   1707c:	681b      	ldr	r3, [r3, #0]
   1707e:	2208      	movs	r2, #8
   17080:	431a      	orrs	r2, r3
   17082:	69bb      	ldr	r3, [r7, #24]
   17084:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   17086:	231f      	movs	r3, #31
   17088:	18fb      	adds	r3, r7, r3
   1708a:	2200      	movs	r2, #0
   1708c:	701a      	strb	r2, [r3, #0]
   1708e:	e010      	b.n	170b2 <spi_init+0x116>
		module->callback[i]        = NULL;
   17090:	231f      	movs	r3, #31
   17092:	18fb      	adds	r3, r7, r3
   17094:	781b      	ldrb	r3, [r3, #0]
   17096:	68fa      	ldr	r2, [r7, #12]
   17098:	3302      	adds	r3, #2
   1709a:	009b      	lsls	r3, r3, #2
   1709c:	18d3      	adds	r3, r2, r3
   1709e:	3304      	adds	r3, #4
   170a0:	2200      	movs	r2, #0
   170a2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   170a4:	231f      	movs	r3, #31
   170a6:	18fb      	adds	r3, r7, r3
   170a8:	781a      	ldrb	r2, [r3, #0]
   170aa:	231f      	movs	r3, #31
   170ac:	18fb      	adds	r3, r7, r3
   170ae:	3201      	adds	r2, #1
   170b0:	701a      	strb	r2, [r3, #0]
   170b2:	231f      	movs	r3, #31
   170b4:	18fb      	adds	r3, r7, r3
   170b6:	781b      	ldrb	r3, [r3, #0]
   170b8:	2b06      	cmp	r3, #6
   170ba:	d9e9      	bls.n	17090 <spi_init+0xf4>
	}
	module->tx_buffer_ptr              = NULL;
   170bc:	68fb      	ldr	r3, [r7, #12]
   170be:	2200      	movs	r2, #0
   170c0:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   170c2:	68fb      	ldr	r3, [r7, #12]
   170c4:	2200      	movs	r2, #0
   170c6:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   170c8:	68fb      	ldr	r3, [r7, #12]
   170ca:	2200      	movs	r2, #0
   170cc:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   170ce:	68fb      	ldr	r3, [r7, #12]
   170d0:	2200      	movs	r2, #0
   170d2:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   170d4:	68fb      	ldr	r3, [r7, #12]
   170d6:	2236      	movs	r2, #54	; 0x36
   170d8:	2100      	movs	r1, #0
   170da:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   170dc:	68fb      	ldr	r3, [r7, #12]
   170de:	2237      	movs	r2, #55	; 0x37
   170e0:	2100      	movs	r1, #0
   170e2:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   170e4:	68fb      	ldr	r3, [r7, #12]
   170e6:	2238      	movs	r2, #56	; 0x38
   170e8:	2100      	movs	r1, #0
   170ea:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   170ec:	68fb      	ldr	r3, [r7, #12]
   170ee:	2203      	movs	r2, #3
   170f0:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   170f2:	68fb      	ldr	r3, [r7, #12]
   170f4:	2200      	movs	r2, #0
   170f6:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   170f8:	68fb      	ldr	r3, [r7, #12]
   170fa:	681b      	ldr	r3, [r3, #0]
   170fc:	2213      	movs	r2, #19
   170fe:	18bc      	adds	r4, r7, r2
   17100:	0018      	movs	r0, r3
   17102:	4b0f      	ldr	r3, [pc, #60]	; (17140 <spi_init+0x1a4>)
   17104:	4798      	blx	r3
   17106:	0003      	movs	r3, r0
   17108:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   1710a:	4a13      	ldr	r2, [pc, #76]	; (17158 <spi_init+0x1bc>)
   1710c:	2313      	movs	r3, #19
   1710e:	18fb      	adds	r3, r7, r3
   17110:	781b      	ldrb	r3, [r3, #0]
   17112:	0011      	movs	r1, r2
   17114:	0018      	movs	r0, r3
   17116:	4b11      	ldr	r3, [pc, #68]	; (1715c <spi_init+0x1c0>)
   17118:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1711a:	2313      	movs	r3, #19
   1711c:	18fb      	adds	r3, r7, r3
   1711e:	781a      	ldrb	r2, [r3, #0]
   17120:	4b0f      	ldr	r3, [pc, #60]	; (17160 <spi_init+0x1c4>)
   17122:	0092      	lsls	r2, r2, #2
   17124:	68f9      	ldr	r1, [r7, #12]
   17126:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   17128:	687a      	ldr	r2, [r7, #4]
   1712a:	68fb      	ldr	r3, [r7, #12]
   1712c:	0011      	movs	r1, r2
   1712e:	0018      	movs	r0, r3
   17130:	4b0c      	ldr	r3, [pc, #48]	; (17164 <spi_init+0x1c8>)
   17132:	4798      	blx	r3
   17134:	0003      	movs	r3, r0
}
   17136:	0018      	movs	r0, r3
   17138:	46bd      	mov	sp, r7
   1713a:	b00b      	add	sp, #44	; 0x2c
   1713c:	bd90      	pop	{r4, r7, pc}
   1713e:	46c0      	nop			; (mov r8, r8)
   17140:	000180a9 	.word	0x000180a9
   17144:	0001695d 	.word	0x0001695d
   17148:	00016945 	.word	0x00016945
   1714c:	00018bf1 	.word	0x00018bf1
   17150:	00018c31 	.word	0x00018c31
   17154:	00017e61 	.word	0x00017e61
   17158:	000083a1 	.word	0x000083a1
   1715c:	00008109 	.word	0x00008109
   17160:	200013e0 	.word	0x200013e0
   17164:	00016d4d 	.word	0x00016d4d

00017168 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   17168:	b590      	push	{r4, r7, lr}
   1716a:	b089      	sub	sp, #36	; 0x24
   1716c:	af00      	add	r7, sp, #0
   1716e:	60f8      	str	r0, [r7, #12]
   17170:	60b9      	str	r1, [r7, #8]
   17172:	0019      	movs	r1, r3
   17174:	1dbb      	adds	r3, r7, #6
   17176:	801a      	strh	r2, [r3, #0]
   17178:	1d3b      	adds	r3, r7, #4
   1717a:	1c0a      	adds	r2, r1, #0
   1717c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1717e:	68fb      	ldr	r3, [r7, #12]
   17180:	2238      	movs	r2, #56	; 0x38
   17182:	5c9b      	ldrb	r3, [r3, r2]
   17184:	b2db      	uxtb	r3, r3
   17186:	2b05      	cmp	r3, #5
   17188:	d101      	bne.n	1718e <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1718a:	2305      	movs	r3, #5
   1718c:	e0b8      	b.n	17300 <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   1718e:	1dbb      	adds	r3, r7, #6
   17190:	881b      	ldrh	r3, [r3, #0]
   17192:	2b00      	cmp	r3, #0
   17194:	d101      	bne.n	1719a <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   17196:	2317      	movs	r3, #23
   17198:	e0b2      	b.n	17300 <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
   1719a:	68fb      	ldr	r3, [r7, #12]
   1719c:	79db      	ldrb	r3, [r3, #7]
   1719e:	2201      	movs	r2, #1
   171a0:	4053      	eors	r3, r2
   171a2:	b2db      	uxtb	r3, r3
   171a4:	2b00      	cmp	r3, #0
   171a6:	d001      	beq.n	171ac <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   171a8:	231c      	movs	r3, #28
   171aa:	e0a9      	b.n	17300 <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   171ac:	68fb      	ldr	r3, [r7, #12]
   171ae:	795b      	ldrb	r3, [r3, #5]
   171b0:	2b00      	cmp	r3, #0
   171b2:	d109      	bne.n	171c8 <spi_read_buffer_wait+0x60>
   171b4:	68fb      	ldr	r3, [r7, #12]
   171b6:	0018      	movs	r0, r3
   171b8:	4b53      	ldr	r3, [pc, #332]	; (17308 <spi_read_buffer_wait+0x1a0>)
   171ba:	4798      	blx	r3
   171bc:	1e03      	subs	r3, r0, #0
   171be:	d003      	beq.n	171c8 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   171c0:	68fb      	ldr	r3, [r7, #12]
   171c2:	0018      	movs	r0, r3
   171c4:	4b51      	ldr	r3, [pc, #324]	; (1730c <spi_read_buffer_wait+0x1a4>)
   171c6:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
   171c8:	231e      	movs	r3, #30
   171ca:	18fb      	adds	r3, r7, r3
   171cc:	2200      	movs	r2, #0
   171ce:	801a      	strh	r2, [r3, #0]

	while (length--) {
   171d0:	e08d      	b.n	172ee <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   171d2:	68fb      	ldr	r3, [r7, #12]
   171d4:	795b      	ldrb	r3, [r3, #5]
   171d6:	2b01      	cmp	r3, #1
   171d8:	d112      	bne.n	17200 <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   171da:	46c0      	nop			; (mov r8, r8)
   171dc:	68fb      	ldr	r3, [r7, #12]
   171de:	0018      	movs	r0, r3
   171e0:	4b4b      	ldr	r3, [pc, #300]	; (17310 <spi_read_buffer_wait+0x1a8>)
   171e2:	4798      	blx	r3
   171e4:	0003      	movs	r3, r0
   171e6:	001a      	movs	r2, r3
   171e8:	2301      	movs	r3, #1
   171ea:	4053      	eors	r3, r2
   171ec:	b2db      	uxtb	r3, r3
   171ee:	2b00      	cmp	r3, #0
   171f0:	d1f4      	bne.n	171dc <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   171f2:	1d3b      	adds	r3, r7, #4
   171f4:	881a      	ldrh	r2, [r3, #0]
   171f6:	68fb      	ldr	r3, [r7, #12]
   171f8:	0011      	movs	r1, r2
   171fa:	0018      	movs	r0, r3
   171fc:	4b45      	ldr	r3, [pc, #276]	; (17314 <spi_read_buffer_wait+0x1ac>)
   171fe:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   17200:	68fb      	ldr	r3, [r7, #12]
   17202:	795b      	ldrb	r3, [r3, #5]
   17204:	2b00      	cmp	r3, #0
   17206:	d12a      	bne.n	1725e <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   17208:	2300      	movs	r3, #0
   1720a:	61bb      	str	r3, [r7, #24]
   1720c:	e008      	b.n	17220 <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
   1720e:	68fb      	ldr	r3, [r7, #12]
   17210:	0018      	movs	r0, r3
   17212:	4b41      	ldr	r3, [pc, #260]	; (17318 <spi_read_buffer_wait+0x1b0>)
   17214:	4798      	blx	r3
   17216:	1e03      	subs	r3, r0, #0
   17218:	d107      	bne.n	1722a <spi_read_buffer_wait+0xc2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   1721a:	69bb      	ldr	r3, [r7, #24]
   1721c:	3301      	adds	r3, #1
   1721e:	61bb      	str	r3, [r7, #24]
   17220:	69bb      	ldr	r3, [r7, #24]
   17222:	4a3e      	ldr	r2, [pc, #248]	; (1731c <spi_read_buffer_wait+0x1b4>)
   17224:	4293      	cmp	r3, r2
   17226:	d9f2      	bls.n	1720e <spi_read_buffer_wait+0xa6>
   17228:	e000      	b.n	1722c <spi_read_buffer_wait+0xc4>
					break;
   1722a:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   1722c:	68fb      	ldr	r3, [r7, #12]
   1722e:	0018      	movs	r0, r3
   17230:	4b35      	ldr	r3, [pc, #212]	; (17308 <spi_read_buffer_wait+0x1a0>)
   17232:	4798      	blx	r3
   17234:	1e03      	subs	r3, r0, #0
   17236:	d005      	beq.n	17244 <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
   17238:	68fb      	ldr	r3, [r7, #12]
   1723a:	0018      	movs	r0, r3
   1723c:	4b33      	ldr	r3, [pc, #204]	; (1730c <spi_read_buffer_wait+0x1a4>)
   1723e:	4798      	blx	r3
				return STATUS_ABORTED;
   17240:	2304      	movs	r3, #4
   17242:	e05d      	b.n	17300 <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
   17244:	68fb      	ldr	r3, [r7, #12]
   17246:	0018      	movs	r0, r3
   17248:	4b33      	ldr	r3, [pc, #204]	; (17318 <spi_read_buffer_wait+0x1b0>)
   1724a:	4798      	blx	r3
   1724c:	0003      	movs	r3, r0
   1724e:	001a      	movs	r2, r3
   17250:	2301      	movs	r3, #1
   17252:	4053      	eors	r3, r2
   17254:	b2db      	uxtb	r3, r3
   17256:	2b00      	cmp	r3, #0
   17258:	d001      	beq.n	1725e <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   1725a:	2312      	movs	r3, #18
   1725c:	e050      	b.n	17300 <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   1725e:	46c0      	nop			; (mov r8, r8)
   17260:	68fb      	ldr	r3, [r7, #12]
   17262:	0018      	movs	r0, r3
   17264:	4b2c      	ldr	r3, [pc, #176]	; (17318 <spi_read_buffer_wait+0x1b0>)
   17266:	4798      	blx	r3
   17268:	0003      	movs	r3, r0
   1726a:	001a      	movs	r2, r3
   1726c:	2301      	movs	r3, #1
   1726e:	4053      	eors	r3, r2
   17270:	b2db      	uxtb	r3, r3
   17272:	2b00      	cmp	r3, #0
   17274:	d1f4      	bne.n	17260 <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
   17276:	2314      	movs	r3, #20
   17278:	18fb      	adds	r3, r7, r3
   1727a:	2200      	movs	r2, #0
   1727c:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   1727e:	2317      	movs	r3, #23
   17280:	18fc      	adds	r4, r7, r3
   17282:	2314      	movs	r3, #20
   17284:	18fa      	adds	r2, r7, r3
   17286:	68fb      	ldr	r3, [r7, #12]
   17288:	0011      	movs	r1, r2
   1728a:	0018      	movs	r0, r3
   1728c:	4b24      	ldr	r3, [pc, #144]	; (17320 <spi_read_buffer_wait+0x1b8>)
   1728e:	4798      	blx	r3
   17290:	0003      	movs	r3, r0
   17292:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   17294:	2317      	movs	r3, #23
   17296:	18fb      	adds	r3, r7, r3
   17298:	781b      	ldrb	r3, [r3, #0]
   1729a:	2b00      	cmp	r3, #0
   1729c:	d003      	beq.n	172a6 <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
   1729e:	2317      	movs	r3, #23
   172a0:	18fb      	adds	r3, r7, r3
   172a2:	781b      	ldrb	r3, [r3, #0]
   172a4:	e02c      	b.n	17300 <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   172a6:	231e      	movs	r3, #30
   172a8:	18fb      	adds	r3, r7, r3
   172aa:	881b      	ldrh	r3, [r3, #0]
   172ac:	221e      	movs	r2, #30
   172ae:	18ba      	adds	r2, r7, r2
   172b0:	1c59      	adds	r1, r3, #1
   172b2:	8011      	strh	r1, [r2, #0]
   172b4:	001a      	movs	r2, r3
   172b6:	68bb      	ldr	r3, [r7, #8]
   172b8:	189b      	adds	r3, r3, r2
   172ba:	2214      	movs	r2, #20
   172bc:	18ba      	adds	r2, r7, r2
   172be:	8812      	ldrh	r2, [r2, #0]
   172c0:	b2d2      	uxtb	r2, r2
   172c2:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   172c4:	68fb      	ldr	r3, [r7, #12]
   172c6:	799b      	ldrb	r3, [r3, #6]
   172c8:	2b01      	cmp	r3, #1
   172ca:	d110      	bne.n	172ee <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
   172cc:	231e      	movs	r3, #30
   172ce:	18fb      	adds	r3, r7, r3
   172d0:	881b      	ldrh	r3, [r3, #0]
   172d2:	221e      	movs	r2, #30
   172d4:	18ba      	adds	r2, r7, r2
   172d6:	1c59      	adds	r1, r3, #1
   172d8:	8011      	strh	r1, [r2, #0]
   172da:	001a      	movs	r2, r3
   172dc:	68bb      	ldr	r3, [r7, #8]
   172de:	189b      	adds	r3, r3, r2
   172e0:	2214      	movs	r2, #20
   172e2:	18ba      	adds	r2, r7, r2
   172e4:	8812      	ldrh	r2, [r2, #0]
   172e6:	0a12      	lsrs	r2, r2, #8
   172e8:	b292      	uxth	r2, r2
   172ea:	b2d2      	uxtb	r2, r2
   172ec:	701a      	strb	r2, [r3, #0]
	while (length--) {
   172ee:	1dbb      	adds	r3, r7, #6
   172f0:	881b      	ldrh	r3, [r3, #0]
   172f2:	1dba      	adds	r2, r7, #6
   172f4:	1e59      	subs	r1, r3, #1
   172f6:	8011      	strh	r1, [r2, #0]
   172f8:	2b00      	cmp	r3, #0
   172fa:	d000      	beq.n	172fe <spi_read_buffer_wait+0x196>
   172fc:	e769      	b.n	171d2 <spi_read_buffer_wait+0x6a>
		}
	}

	return STATUS_OK;
   172fe:	2300      	movs	r3, #0
}
   17300:	0018      	movs	r0, r3
   17302:	46bd      	mov	sp, r7
   17304:	b009      	add	sp, #36	; 0x24
   17306:	bd90      	pop	{r4, r7, pc}
   17308:	00016b21 	.word	0x00016b21
   1730c:	00016d31 	.word	0x00016d31
   17310:	00016b49 	.word	0x00016b49
   17314:	00016b99 	.word	0x00016b99
   17318:	00016b71 	.word	0x00016b71
   1731c:	00002710 	.word	0x00002710
   17320:	00016be1 	.word	0x00016be1

00017324 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   17324:	b580      	push	{r7, lr}
   17326:	b086      	sub	sp, #24
   17328:	af00      	add	r7, sp, #0
   1732a:	60f8      	str	r0, [r7, #12]
   1732c:	60b9      	str	r1, [r7, #8]
   1732e:	1dfb      	adds	r3, r7, #7
   17330:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   17332:	68fb      	ldr	r3, [r7, #12]
   17334:	795b      	ldrb	r3, [r3, #5]
   17336:	2b01      	cmp	r3, #1
   17338:	d001      	beq.n	1733e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   1733a:	2315      	movs	r3, #21
   1733c:	e05c      	b.n	173f8 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   1733e:	68fb      	ldr	r3, [r7, #12]
   17340:	7a1b      	ldrb	r3, [r3, #8]
   17342:	2201      	movs	r2, #1
   17344:	4053      	eors	r3, r2
   17346:	b2db      	uxtb	r3, r3
   17348:	2b00      	cmp	r3, #0
   1734a:	d054      	beq.n	173f6 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   1734c:	1dfb      	adds	r3, r7, #7
   1734e:	781b      	ldrb	r3, [r3, #0]
   17350:	2b00      	cmp	r3, #0
   17352:	d04a      	beq.n	173ea <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   17354:	68bb      	ldr	r3, [r7, #8]
   17356:	785b      	ldrb	r3, [r3, #1]
   17358:	2b00      	cmp	r3, #0
   1735a:	d03f      	beq.n	173dc <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   1735c:	68fb      	ldr	r3, [r7, #12]
   1735e:	0018      	movs	r0, r3
   17360:	4b27      	ldr	r3, [pc, #156]	; (17400 <spi_select_slave+0xdc>)
   17362:	4798      	blx	r3
   17364:	0003      	movs	r3, r0
   17366:	001a      	movs	r2, r3
   17368:	2301      	movs	r3, #1
   1736a:	4053      	eors	r3, r2
   1736c:	b2db      	uxtb	r3, r3
   1736e:	2b00      	cmp	r3, #0
   17370:	d007      	beq.n	17382 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   17372:	68bb      	ldr	r3, [r7, #8]
   17374:	781b      	ldrb	r3, [r3, #0]
   17376:	2101      	movs	r1, #1
   17378:	0018      	movs	r0, r3
   1737a:	4b22      	ldr	r3, [pc, #136]	; (17404 <spi_select_slave+0xe0>)
   1737c:	4798      	blx	r3
					return STATUS_BUSY;
   1737e:	2305      	movs	r3, #5
   17380:	e03a      	b.n	173f8 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   17382:	68bb      	ldr	r3, [r7, #8]
   17384:	781b      	ldrb	r3, [r3, #0]
   17386:	2100      	movs	r1, #0
   17388:	0018      	movs	r0, r3
   1738a:	4b1e      	ldr	r3, [pc, #120]	; (17404 <spi_select_slave+0xe0>)
   1738c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   1738e:	68bb      	ldr	r3, [r7, #8]
   17390:	789b      	ldrb	r3, [r3, #2]
   17392:	b29a      	uxth	r2, r3
   17394:	68fb      	ldr	r3, [r7, #12]
   17396:	0011      	movs	r1, r2
   17398:	0018      	movs	r0, r3
   1739a:	4b1b      	ldr	r3, [pc, #108]	; (17408 <spi_select_slave+0xe4>)
   1739c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   1739e:	68fb      	ldr	r3, [r7, #12]
   173a0:	79db      	ldrb	r3, [r3, #7]
   173a2:	2201      	movs	r2, #1
   173a4:	4053      	eors	r3, r2
   173a6:	b2db      	uxtb	r3, r3
   173a8:	2b00      	cmp	r3, #0
   173aa:	d024      	beq.n	173f6 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   173ac:	46c0      	nop			; (mov r8, r8)
   173ae:	68fb      	ldr	r3, [r7, #12]
   173b0:	0018      	movs	r0, r3
   173b2:	4b16      	ldr	r3, [pc, #88]	; (1740c <spi_select_slave+0xe8>)
   173b4:	4798      	blx	r3
   173b6:	0003      	movs	r3, r0
   173b8:	001a      	movs	r2, r3
   173ba:	2301      	movs	r3, #1
   173bc:	4053      	eors	r3, r2
   173be:	b2db      	uxtb	r3, r3
   173c0:	2b00      	cmp	r3, #0
   173c2:	d1f4      	bne.n	173ae <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   173c4:	2316      	movs	r3, #22
   173c6:	18fb      	adds	r3, r7, r3
   173c8:	2200      	movs	r2, #0
   173ca:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   173cc:	2316      	movs	r3, #22
   173ce:	18fa      	adds	r2, r7, r3
   173d0:	68fb      	ldr	r3, [r7, #12]
   173d2:	0011      	movs	r1, r2
   173d4:	0018      	movs	r0, r3
   173d6:	4b0e      	ldr	r3, [pc, #56]	; (17410 <spi_select_slave+0xec>)
   173d8:	4798      	blx	r3
   173da:	e00c      	b.n	173f6 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   173dc:	68bb      	ldr	r3, [r7, #8]
   173de:	781b      	ldrb	r3, [r3, #0]
   173e0:	2100      	movs	r1, #0
   173e2:	0018      	movs	r0, r3
   173e4:	4b07      	ldr	r3, [pc, #28]	; (17404 <spi_select_slave+0xe0>)
   173e6:	4798      	blx	r3
   173e8:	e005      	b.n	173f6 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   173ea:	68bb      	ldr	r3, [r7, #8]
   173ec:	781b      	ldrb	r3, [r3, #0]
   173ee:	2101      	movs	r1, #1
   173f0:	0018      	movs	r0, r3
   173f2:	4b04      	ldr	r3, [pc, #16]	; (17404 <spi_select_slave+0xe0>)
   173f4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   173f6:	2300      	movs	r3, #0
}
   173f8:	0018      	movs	r0, r3
   173fa:	46bd      	mov	sp, r7
   173fc:	b006      	add	sp, #24
   173fe:	bd80      	pop	{r7, pc}
   17400:	00016b49 	.word	0x00016b49
   17404:	000168f1 	.word	0x000168f1
   17408:	00016b99 	.word	0x00016b99
   1740c:	00016b71 	.word	0x00016b71
   17410:	00016be1 	.word	0x00016be1

00017414 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   17414:	b580      	push	{r7, lr}
   17416:	b08a      	sub	sp, #40	; 0x28
   17418:	af00      	add	r7, sp, #0
   1741a:	60f8      	str	r0, [r7, #12]
   1741c:	60b9      	str	r1, [r7, #8]
   1741e:	1dbb      	adds	r3, r7, #6
   17420:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   17422:	68fb      	ldr	r3, [r7, #12]
   17424:	2238      	movs	r2, #56	; 0x38
   17426:	5c9b      	ldrb	r3, [r3, r2]
   17428:	b2db      	uxtb	r3, r3
   1742a:	2b05      	cmp	r3, #5
   1742c:	d101      	bne.n	17432 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1742e:	2305      	movs	r3, #5
   17430:	e170      	b.n	17714 <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
   17432:	1dbb      	adds	r3, r7, #6
   17434:	881b      	ldrh	r3, [r3, #0]
   17436:	2b00      	cmp	r3, #0
   17438:	d101      	bne.n	1743e <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   1743a:	2317      	movs	r3, #23
   1743c:	e16a      	b.n	17714 <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   1743e:	68fb      	ldr	r3, [r7, #12]
   17440:	795b      	ldrb	r3, [r3, #5]
   17442:	2b00      	cmp	r3, #0
   17444:	d109      	bne.n	1745a <spi_write_buffer_wait+0x46>
   17446:	68fb      	ldr	r3, [r7, #12]
   17448:	0018      	movs	r0, r3
   1744a:	4bb4      	ldr	r3, [pc, #720]	; (1771c <spi_write_buffer_wait+0x308>)
   1744c:	4798      	blx	r3
   1744e:	1e03      	subs	r3, r0, #0
   17450:	d003      	beq.n	1745a <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   17452:	68fb      	ldr	r3, [r7, #12]
   17454:	0018      	movs	r0, r3
   17456:	4bb2      	ldr	r3, [pc, #712]	; (17720 <spi_write_buffer_wait+0x30c>)
   17458:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   1745a:	2326      	movs	r3, #38	; 0x26
   1745c:	18fb      	adds	r3, r7, r3
   1745e:	2200      	movs	r2, #0
   17460:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   17462:	2324      	movs	r3, #36	; 0x24
   17464:	18fb      	adds	r3, r7, r3
   17466:	1dba      	adds	r2, r7, #6
   17468:	8812      	ldrh	r2, [r2, #0]
   1746a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   1746c:	e0fe      	b.n	1766c <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   1746e:	68fb      	ldr	r3, [r7, #12]
   17470:	795b      	ldrb	r3, [r3, #5]
   17472:	2b00      	cmp	r3, #0
   17474:	d12a      	bne.n	174cc <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   17476:	2300      	movs	r3, #0
   17478:	623b      	str	r3, [r7, #32]
   1747a:	e008      	b.n	1748e <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
   1747c:	68fb      	ldr	r3, [r7, #12]
   1747e:	0018      	movs	r0, r3
   17480:	4ba8      	ldr	r3, [pc, #672]	; (17724 <spi_write_buffer_wait+0x310>)
   17482:	4798      	blx	r3
   17484:	1e03      	subs	r3, r0, #0
   17486:	d107      	bne.n	17498 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   17488:	6a3b      	ldr	r3, [r7, #32]
   1748a:	3301      	adds	r3, #1
   1748c:	623b      	str	r3, [r7, #32]
   1748e:	6a3b      	ldr	r3, [r7, #32]
   17490:	4aa5      	ldr	r2, [pc, #660]	; (17728 <spi_write_buffer_wait+0x314>)
   17492:	4293      	cmp	r3, r2
   17494:	d9f2      	bls.n	1747c <spi_write_buffer_wait+0x68>
   17496:	e000      	b.n	1749a <spi_write_buffer_wait+0x86>
					break;
   17498:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   1749a:	68fb      	ldr	r3, [r7, #12]
   1749c:	0018      	movs	r0, r3
   1749e:	4b9f      	ldr	r3, [pc, #636]	; (1771c <spi_write_buffer_wait+0x308>)
   174a0:	4798      	blx	r3
   174a2:	1e03      	subs	r3, r0, #0
   174a4:	d005      	beq.n	174b2 <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
   174a6:	68fb      	ldr	r3, [r7, #12]
   174a8:	0018      	movs	r0, r3
   174aa:	4b9d      	ldr	r3, [pc, #628]	; (17720 <spi_write_buffer_wait+0x30c>)
   174ac:	4798      	blx	r3
				return STATUS_ABORTED;
   174ae:	2304      	movs	r3, #4
   174b0:	e130      	b.n	17714 <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
   174b2:	68fb      	ldr	r3, [r7, #12]
   174b4:	0018      	movs	r0, r3
   174b6:	4b9b      	ldr	r3, [pc, #620]	; (17724 <spi_write_buffer_wait+0x310>)
   174b8:	4798      	blx	r3
   174ba:	0003      	movs	r3, r0
   174bc:	001a      	movs	r2, r3
   174be:	2301      	movs	r3, #1
   174c0:	4053      	eors	r3, r2
   174c2:	b2db      	uxtb	r3, r3
   174c4:	2b00      	cmp	r3, #0
   174c6:	d001      	beq.n	174cc <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   174c8:	2312      	movs	r3, #18
   174ca:	e123      	b.n	17714 <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   174cc:	46c0      	nop			; (mov r8, r8)
   174ce:	68fb      	ldr	r3, [r7, #12]
   174d0:	0018      	movs	r0, r3
   174d2:	4b94      	ldr	r3, [pc, #592]	; (17724 <spi_write_buffer_wait+0x310>)
   174d4:	4798      	blx	r3
   174d6:	0003      	movs	r3, r0
   174d8:	001a      	movs	r2, r3
   174da:	2301      	movs	r3, #1
   174dc:	4053      	eors	r3, r2
   174de:	b2db      	uxtb	r3, r3
   174e0:	2b00      	cmp	r3, #0
   174e2:	d1f4      	bne.n	174ce <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   174e4:	2326      	movs	r3, #38	; 0x26
   174e6:	18fb      	adds	r3, r7, r3
   174e8:	881b      	ldrh	r3, [r3, #0]
   174ea:	2226      	movs	r2, #38	; 0x26
   174ec:	18ba      	adds	r2, r7, r2
   174ee:	1c59      	adds	r1, r3, #1
   174f0:	8011      	strh	r1, [r2, #0]
   174f2:	001a      	movs	r2, r3
   174f4:	68bb      	ldr	r3, [r7, #8]
   174f6:	189b      	adds	r3, r3, r2
   174f8:	781a      	ldrb	r2, [r3, #0]
   174fa:	231e      	movs	r3, #30
   174fc:	18fb      	adds	r3, r7, r3
   174fe:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   17500:	68fb      	ldr	r3, [r7, #12]
   17502:	799b      	ldrb	r3, [r3, #6]
   17504:	2b01      	cmp	r3, #1
   17506:	d115      	bne.n	17534 <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
   17508:	2326      	movs	r3, #38	; 0x26
   1750a:	18fb      	adds	r3, r7, r3
   1750c:	881b      	ldrh	r3, [r3, #0]
   1750e:	2226      	movs	r2, #38	; 0x26
   17510:	18ba      	adds	r2, r7, r2
   17512:	1c59      	adds	r1, r3, #1
   17514:	8011      	strh	r1, [r2, #0]
   17516:	001a      	movs	r2, r3
   17518:	68bb      	ldr	r3, [r7, #8]
   1751a:	189b      	adds	r3, r3, r2
   1751c:	781b      	ldrb	r3, [r3, #0]
   1751e:	021b      	lsls	r3, r3, #8
   17520:	b21a      	sxth	r2, r3
   17522:	231e      	movs	r3, #30
   17524:	18fb      	adds	r3, r7, r3
   17526:	2100      	movs	r1, #0
   17528:	5e5b      	ldrsh	r3, [r3, r1]
   1752a:	4313      	orrs	r3, r2
   1752c:	b21a      	sxth	r2, r3
   1752e:	231e      	movs	r3, #30
   17530:	18fb      	adds	r3, r7, r3
   17532:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   17534:	231e      	movs	r3, #30
   17536:	18fb      	adds	r3, r7, r3
   17538:	881a      	ldrh	r2, [r3, #0]
   1753a:	68fb      	ldr	r3, [r7, #12]
   1753c:	0011      	movs	r1, r2
   1753e:	0018      	movs	r0, r3
   17540:	4b7a      	ldr	r3, [pc, #488]	; (1772c <spi_write_buffer_wait+0x318>)
   17542:	4798      	blx	r3

		if (module->receiver_enabled) {
   17544:	68fb      	ldr	r3, [r7, #12]
   17546:	79db      	ldrb	r3, [r3, #7]
   17548:	2224      	movs	r2, #36	; 0x24
   1754a:	18ba      	adds	r2, r7, r2
   1754c:	2124      	movs	r1, #36	; 0x24
   1754e:	1879      	adds	r1, r7, r1
   17550:	8809      	ldrh	r1, [r1, #0]
   17552:	8011      	strh	r1, [r2, #0]
   17554:	2b00      	cmp	r3, #0
   17556:	d100      	bne.n	1755a <spi_write_buffer_wait+0x146>
   17558:	e088      	b.n	1766c <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
   1755a:	68fb      	ldr	r3, [r7, #12]
   1755c:	795b      	ldrb	r3, [r3, #5]
   1755e:	2b00      	cmp	r3, #0
   17560:	d000      	beq.n	17564 <spi_write_buffer_wait+0x150>
   17562:	e069      	b.n	17638 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   17564:	2300      	movs	r3, #0
   17566:	61bb      	str	r3, [r7, #24]
   17568:	e047      	b.n	175fa <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
   1756a:	1dbb      	adds	r3, r7, #6
   1756c:	881b      	ldrh	r3, [r3, #0]
   1756e:	2b00      	cmp	r3, #0
   17570:	d03a      	beq.n	175e8 <spi_write_buffer_wait+0x1d4>
   17572:	68fb      	ldr	r3, [r7, #12]
   17574:	0018      	movs	r0, r3
   17576:	4b6b      	ldr	r3, [pc, #428]	; (17724 <spi_write_buffer_wait+0x310>)
   17578:	4798      	blx	r3
   1757a:	1e03      	subs	r3, r0, #0
   1757c:	d034      	beq.n	175e8 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
   1757e:	2326      	movs	r3, #38	; 0x26
   17580:	18fb      	adds	r3, r7, r3
   17582:	881b      	ldrh	r3, [r3, #0]
   17584:	2226      	movs	r2, #38	; 0x26
   17586:	18ba      	adds	r2, r7, r2
   17588:	1c59      	adds	r1, r3, #1
   1758a:	8011      	strh	r1, [r2, #0]
   1758c:	001a      	movs	r2, r3
   1758e:	68bb      	ldr	r3, [r7, #8]
   17590:	189b      	adds	r3, r3, r2
   17592:	781a      	ldrb	r2, [r3, #0]
   17594:	231e      	movs	r3, #30
   17596:	18fb      	adds	r3, r7, r3
   17598:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1759a:	68fb      	ldr	r3, [r7, #12]
   1759c:	799b      	ldrb	r3, [r3, #6]
   1759e:	2b01      	cmp	r3, #1
   175a0:	d115      	bne.n	175ce <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
   175a2:	2326      	movs	r3, #38	; 0x26
   175a4:	18fb      	adds	r3, r7, r3
   175a6:	881b      	ldrh	r3, [r3, #0]
   175a8:	2226      	movs	r2, #38	; 0x26
   175aa:	18ba      	adds	r2, r7, r2
   175ac:	1c59      	adds	r1, r3, #1
   175ae:	8011      	strh	r1, [r2, #0]
   175b0:	001a      	movs	r2, r3
   175b2:	68bb      	ldr	r3, [r7, #8]
   175b4:	189b      	adds	r3, r3, r2
   175b6:	781b      	ldrb	r3, [r3, #0]
   175b8:	021b      	lsls	r3, r3, #8
   175ba:	b21a      	sxth	r2, r3
   175bc:	231e      	movs	r3, #30
   175be:	18fb      	adds	r3, r7, r3
   175c0:	2100      	movs	r1, #0
   175c2:	5e5b      	ldrsh	r3, [r3, r1]
   175c4:	4313      	orrs	r3, r2
   175c6:	b21a      	sxth	r2, r3
   175c8:	231e      	movs	r3, #30
   175ca:	18fb      	adds	r3, r7, r3
   175cc:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
   175ce:	231e      	movs	r3, #30
   175d0:	18fb      	adds	r3, r7, r3
   175d2:	881a      	ldrh	r2, [r3, #0]
   175d4:	68fb      	ldr	r3, [r7, #12]
   175d6:	0011      	movs	r1, r2
   175d8:	0018      	movs	r0, r3
   175da:	4b54      	ldr	r3, [pc, #336]	; (1772c <spi_write_buffer_wait+0x318>)
   175dc:	4798      	blx	r3
						length--;
   175de:	1dbb      	adds	r3, r7, #6
   175e0:	881a      	ldrh	r2, [r3, #0]
   175e2:	1dbb      	adds	r3, r7, #6
   175e4:	3a01      	subs	r2, #1
   175e6:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
   175e8:	68fb      	ldr	r3, [r7, #12]
   175ea:	0018      	movs	r0, r3
   175ec:	4b50      	ldr	r3, [pc, #320]	; (17730 <spi_write_buffer_wait+0x31c>)
   175ee:	4798      	blx	r3
   175f0:	1e03      	subs	r3, r0, #0
   175f2:	d107      	bne.n	17604 <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   175f4:	69bb      	ldr	r3, [r7, #24]
   175f6:	3301      	adds	r3, #1
   175f8:	61bb      	str	r3, [r7, #24]
   175fa:	69bb      	ldr	r3, [r7, #24]
   175fc:	4a4a      	ldr	r2, [pc, #296]	; (17728 <spi_write_buffer_wait+0x314>)
   175fe:	4293      	cmp	r3, r2
   17600:	d9b3      	bls.n	1756a <spi_write_buffer_wait+0x156>
   17602:	e000      	b.n	17606 <spi_write_buffer_wait+0x1f2>
						break;
   17604:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
   17606:	68fb      	ldr	r3, [r7, #12]
   17608:	0018      	movs	r0, r3
   1760a:	4b44      	ldr	r3, [pc, #272]	; (1771c <spi_write_buffer_wait+0x308>)
   1760c:	4798      	blx	r3
   1760e:	1e03      	subs	r3, r0, #0
   17610:	d005      	beq.n	1761e <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
   17612:	68fb      	ldr	r3, [r7, #12]
   17614:	0018      	movs	r0, r3
   17616:	4b42      	ldr	r3, [pc, #264]	; (17720 <spi_write_buffer_wait+0x30c>)
   17618:	4798      	blx	r3
					return STATUS_ABORTED;
   1761a:	2304      	movs	r3, #4
   1761c:	e07a      	b.n	17714 <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
   1761e:	68fb      	ldr	r3, [r7, #12]
   17620:	0018      	movs	r0, r3
   17622:	4b43      	ldr	r3, [pc, #268]	; (17730 <spi_write_buffer_wait+0x31c>)
   17624:	4798      	blx	r3
   17626:	0003      	movs	r3, r0
   17628:	001a      	movs	r2, r3
   1762a:	2301      	movs	r3, #1
   1762c:	4053      	eors	r3, r2
   1762e:	b2db      	uxtb	r3, r3
   17630:	2b00      	cmp	r3, #0
   17632:	d001      	beq.n	17638 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   17634:	2312      	movs	r3, #18
   17636:	e06d      	b.n	17714 <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   17638:	46c0      	nop			; (mov r8, r8)
   1763a:	68fb      	ldr	r3, [r7, #12]
   1763c:	0018      	movs	r0, r3
   1763e:	4b3c      	ldr	r3, [pc, #240]	; (17730 <spi_write_buffer_wait+0x31c>)
   17640:	4798      	blx	r3
   17642:	0003      	movs	r3, r0
   17644:	001a      	movs	r2, r3
   17646:	2301      	movs	r3, #1
   17648:	4053      	eors	r3, r2
   1764a:	b2db      	uxtb	r3, r3
   1764c:	2b00      	cmp	r3, #0
   1764e:	d1f4      	bne.n	1763a <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   17650:	2312      	movs	r3, #18
   17652:	18fa      	adds	r2, r7, r3
   17654:	68fb      	ldr	r3, [r7, #12]
   17656:	0011      	movs	r1, r2
   17658:	0018      	movs	r0, r3
   1765a:	4b36      	ldr	r3, [pc, #216]	; (17734 <spi_write_buffer_wait+0x320>)
   1765c:	4798      	blx	r3
			flush_length--;
   1765e:	2324      	movs	r3, #36	; 0x24
   17660:	18fb      	adds	r3, r7, r3
   17662:	881a      	ldrh	r2, [r3, #0]
   17664:	2324      	movs	r3, #36	; 0x24
   17666:	18fb      	adds	r3, r7, r3
   17668:	3a01      	subs	r2, #1
   1766a:	801a      	strh	r2, [r3, #0]
	while (length--) {
   1766c:	1dbb      	adds	r3, r7, #6
   1766e:	881b      	ldrh	r3, [r3, #0]
   17670:	1dba      	adds	r2, r7, #6
   17672:	1e59      	subs	r1, r3, #1
   17674:	8011      	strh	r1, [r2, #0]
   17676:	2b00      	cmp	r3, #0
   17678:	d000      	beq.n	1767c <spi_write_buffer_wait+0x268>
   1767a:	e6f8      	b.n	1746e <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   1767c:	68fb      	ldr	r3, [r7, #12]
   1767e:	795b      	ldrb	r3, [r3, #5]
   17680:	2b01      	cmp	r3, #1
   17682:	d10b      	bne.n	1769c <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   17684:	46c0      	nop			; (mov r8, r8)
   17686:	68fb      	ldr	r3, [r7, #12]
   17688:	0018      	movs	r0, r3
   1768a:	4b24      	ldr	r3, [pc, #144]	; (1771c <spi_write_buffer_wait+0x308>)
   1768c:	4798      	blx	r3
   1768e:	0003      	movs	r3, r0
   17690:	001a      	movs	r2, r3
   17692:	2301      	movs	r3, #1
   17694:	4053      	eors	r3, r2
   17696:	b2db      	uxtb	r3, r3
   17698:	2b00      	cmp	r3, #0
   1769a:	d1f4      	bne.n	17686 <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   1769c:	68fb      	ldr	r3, [r7, #12]
   1769e:	795b      	ldrb	r3, [r3, #5]
   176a0:	2b00      	cmp	r3, #0
   176a2:	d136      	bne.n	17712 <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
   176a4:	68fb      	ldr	r3, [r7, #12]
   176a6:	79db      	ldrb	r3, [r3, #7]
   176a8:	2b00      	cmp	r3, #0
   176aa:	d032      	beq.n	17712 <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
   176ac:	e02c      	b.n	17708 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   176ae:	2300      	movs	r3, #0
   176b0:	617b      	str	r3, [r7, #20]
   176b2:	e008      	b.n	176c6 <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
   176b4:	68fb      	ldr	r3, [r7, #12]
   176b6:	0018      	movs	r0, r3
   176b8:	4b1d      	ldr	r3, [pc, #116]	; (17730 <spi_write_buffer_wait+0x31c>)
   176ba:	4798      	blx	r3
   176bc:	1e03      	subs	r3, r0, #0
   176be:	d107      	bne.n	176d0 <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   176c0:	697b      	ldr	r3, [r7, #20]
   176c2:	3301      	adds	r3, #1
   176c4:	617b      	str	r3, [r7, #20]
   176c6:	697b      	ldr	r3, [r7, #20]
   176c8:	4a17      	ldr	r2, [pc, #92]	; (17728 <spi_write_buffer_wait+0x314>)
   176ca:	4293      	cmp	r3, r2
   176cc:	d9f2      	bls.n	176b4 <spi_write_buffer_wait+0x2a0>
   176ce:	e000      	b.n	176d2 <spi_write_buffer_wait+0x2be>
						break;
   176d0:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
   176d2:	68fb      	ldr	r3, [r7, #12]
   176d4:	0018      	movs	r0, r3
   176d6:	4b16      	ldr	r3, [pc, #88]	; (17730 <spi_write_buffer_wait+0x31c>)
   176d8:	4798      	blx	r3
   176da:	0003      	movs	r3, r0
   176dc:	001a      	movs	r2, r3
   176de:	2301      	movs	r3, #1
   176e0:	4053      	eors	r3, r2
   176e2:	b2db      	uxtb	r3, r3
   176e4:	2b00      	cmp	r3, #0
   176e6:	d001      	beq.n	176ec <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   176e8:	2312      	movs	r3, #18
   176ea:	e013      	b.n	17714 <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
   176ec:	2310      	movs	r3, #16
   176ee:	18fa      	adds	r2, r7, r3
   176f0:	68fb      	ldr	r3, [r7, #12]
   176f2:	0011      	movs	r1, r2
   176f4:	0018      	movs	r0, r3
   176f6:	4b0f      	ldr	r3, [pc, #60]	; (17734 <spi_write_buffer_wait+0x320>)
   176f8:	4798      	blx	r3
				flush_length--;
   176fa:	2324      	movs	r3, #36	; 0x24
   176fc:	18fb      	adds	r3, r7, r3
   176fe:	881a      	ldrh	r2, [r3, #0]
   17700:	2324      	movs	r3, #36	; 0x24
   17702:	18fb      	adds	r3, r7, r3
   17704:	3a01      	subs	r2, #1
   17706:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
   17708:	2324      	movs	r3, #36	; 0x24
   1770a:	18fb      	adds	r3, r7, r3
   1770c:	881b      	ldrh	r3, [r3, #0]
   1770e:	2b00      	cmp	r3, #0
   17710:	d1cd      	bne.n	176ae <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
   17712:	2300      	movs	r3, #0
}
   17714:	0018      	movs	r0, r3
   17716:	46bd      	mov	sp, r7
   17718:	b00a      	add	sp, #40	; 0x28
   1771a:	bd80      	pop	{r7, pc}
   1771c:	00016b21 	.word	0x00016b21
   17720:	00016d31 	.word	0x00016d31
   17724:	00016b49 	.word	0x00016b49
   17728:	00002710 	.word	0x00002710
   1772c:	00016b99 	.word	0x00016b99
   17730:	00016b71 	.word	0x00016b71
   17734:	00016be1 	.word	0x00016be1

00017738 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
   17738:	b590      	push	{r4, r7, lr}
   1773a:	b08d      	sub	sp, #52	; 0x34
   1773c:	af00      	add	r7, sp, #0
   1773e:	60f8      	str	r0, [r7, #12]
   17740:	60b9      	str	r1, [r7, #8]
   17742:	607a      	str	r2, [r7, #4]
   17744:	001a      	movs	r2, r3
   17746:	1cbb      	adds	r3, r7, #2
   17748:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1774a:	68fb      	ldr	r3, [r7, #12]
   1774c:	2238      	movs	r2, #56	; 0x38
   1774e:	5c9b      	ldrb	r3, [r3, r2]
   17750:	b2db      	uxtb	r3, r3
   17752:	2b05      	cmp	r3, #5
   17754:	d101      	bne.n	1775a <spi_transceive_buffer_wait+0x22>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   17756:	2305      	movs	r3, #5
   17758:	e1e3      	b.n	17b22 <spi_transceive_buffer_wait+0x3ea>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   1775a:	1cbb      	adds	r3, r7, #2
   1775c:	881b      	ldrh	r3, [r3, #0]
   1775e:	2b00      	cmp	r3, #0
   17760:	d101      	bne.n	17766 <spi_transceive_buffer_wait+0x2e>
		return STATUS_ERR_INVALID_ARG;
   17762:	2317      	movs	r3, #23
   17764:	e1dd      	b.n	17b22 <spi_transceive_buffer_wait+0x3ea>
	}

	if (!(module->receiver_enabled)) {
   17766:	68fb      	ldr	r3, [r7, #12]
   17768:	79db      	ldrb	r3, [r3, #7]
   1776a:	2201      	movs	r2, #1
   1776c:	4053      	eors	r3, r2
   1776e:	b2db      	uxtb	r3, r3
   17770:	2b00      	cmp	r3, #0
   17772:	d001      	beq.n	17778 <spi_transceive_buffer_wait+0x40>
		return STATUS_ERR_DENIED;
   17774:	231c      	movs	r3, #28
   17776:	e1d4      	b.n	17b22 <spi_transceive_buffer_wait+0x3ea>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   17778:	68fb      	ldr	r3, [r7, #12]
   1777a:	795b      	ldrb	r3, [r3, #5]
   1777c:	2b00      	cmp	r3, #0
   1777e:	d109      	bne.n	17794 <spi_transceive_buffer_wait+0x5c>
   17780:	68fb      	ldr	r3, [r7, #12]
   17782:	0018      	movs	r0, r3
   17784:	4bca      	ldr	r3, [pc, #808]	; (17ab0 <spi_transceive_buffer_wait+0x378>)
   17786:	4798      	blx	r3
   17788:	1e03      	subs	r3, r0, #0
   1778a:	d003      	beq.n	17794 <spi_transceive_buffer_wait+0x5c>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   1778c:	68fb      	ldr	r3, [r7, #12]
   1778e:	0018      	movs	r0, r3
   17790:	4bc8      	ldr	r3, [pc, #800]	; (17ab4 <spi_transceive_buffer_wait+0x37c>)
   17792:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   17794:	232e      	movs	r3, #46	; 0x2e
   17796:	18fb      	adds	r3, r7, r3
   17798:	2200      	movs	r2, #0
   1779a:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
   1779c:	232c      	movs	r3, #44	; 0x2c
   1779e:	18fb      	adds	r3, r7, r3
   177a0:	2200      	movs	r2, #0
   177a2:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
   177a4:	232a      	movs	r3, #42	; 0x2a
   177a6:	18fb      	adds	r3, r7, r3
   177a8:	1cba      	adds	r2, r7, #2
   177aa:	8812      	ldrh	r2, [r2, #0]
   177ac:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
   177ae:	e123      	b.n	179f8 <spi_transceive_buffer_wait+0x2c0>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   177b0:	68fb      	ldr	r3, [r7, #12]
   177b2:	795b      	ldrb	r3, [r3, #5]
   177b4:	2b00      	cmp	r3, #0
   177b6:	d12a      	bne.n	1780e <spi_transceive_buffer_wait+0xd6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   177b8:	2300      	movs	r3, #0
   177ba:	627b      	str	r3, [r7, #36]	; 0x24
   177bc:	e008      	b.n	177d0 <spi_transceive_buffer_wait+0x98>
				if (spi_is_ready_to_write(module)) {
   177be:	68fb      	ldr	r3, [r7, #12]
   177c0:	0018      	movs	r0, r3
   177c2:	4bbd      	ldr	r3, [pc, #756]	; (17ab8 <spi_transceive_buffer_wait+0x380>)
   177c4:	4798      	blx	r3
   177c6:	1e03      	subs	r3, r0, #0
   177c8:	d107      	bne.n	177da <spi_transceive_buffer_wait+0xa2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   177ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177cc:	3301      	adds	r3, #1
   177ce:	627b      	str	r3, [r7, #36]	; 0x24
   177d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177d2:	4aba      	ldr	r2, [pc, #744]	; (17abc <spi_transceive_buffer_wait+0x384>)
   177d4:	4293      	cmp	r3, r2
   177d6:	d9f2      	bls.n	177be <spi_transceive_buffer_wait+0x86>
   177d8:	e000      	b.n	177dc <spi_transceive_buffer_wait+0xa4>
					break;
   177da:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   177dc:	68fb      	ldr	r3, [r7, #12]
   177de:	0018      	movs	r0, r3
   177e0:	4bb3      	ldr	r3, [pc, #716]	; (17ab0 <spi_transceive_buffer_wait+0x378>)
   177e2:	4798      	blx	r3
   177e4:	1e03      	subs	r3, r0, #0
   177e6:	d005      	beq.n	177f4 <spi_transceive_buffer_wait+0xbc>
				_spi_clear_tx_complete_flag(module);
   177e8:	68fb      	ldr	r3, [r7, #12]
   177ea:	0018      	movs	r0, r3
   177ec:	4bb1      	ldr	r3, [pc, #708]	; (17ab4 <spi_transceive_buffer_wait+0x37c>)
   177ee:	4798      	blx	r3
				return STATUS_ABORTED;
   177f0:	2304      	movs	r3, #4
   177f2:	e196      	b.n	17b22 <spi_transceive_buffer_wait+0x3ea>
			}

			if (!spi_is_ready_to_write(module)) {
   177f4:	68fb      	ldr	r3, [r7, #12]
   177f6:	0018      	movs	r0, r3
   177f8:	4baf      	ldr	r3, [pc, #700]	; (17ab8 <spi_transceive_buffer_wait+0x380>)
   177fa:	4798      	blx	r3
   177fc:	0003      	movs	r3, r0
   177fe:	001a      	movs	r2, r3
   17800:	2301      	movs	r3, #1
   17802:	4053      	eors	r3, r2
   17804:	b2db      	uxtb	r3, r3
   17806:	2b00      	cmp	r3, #0
   17808:	d001      	beq.n	1780e <spi_transceive_buffer_wait+0xd6>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   1780a:	2312      	movs	r3, #18
   1780c:	e189      	b.n	17b22 <spi_transceive_buffer_wait+0x3ea>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   1780e:	46c0      	nop			; (mov r8, r8)
   17810:	68fb      	ldr	r3, [r7, #12]
   17812:	0018      	movs	r0, r3
   17814:	4ba8      	ldr	r3, [pc, #672]	; (17ab8 <spi_transceive_buffer_wait+0x380>)
   17816:	4798      	blx	r3
   17818:	0003      	movs	r3, r0
   1781a:	001a      	movs	r2, r3
   1781c:	2301      	movs	r3, #1
   1781e:	4053      	eors	r3, r2
   17820:	b2db      	uxtb	r3, r3
   17822:	2b00      	cmp	r3, #0
   17824:	d1f4      	bne.n	17810 <spi_transceive_buffer_wait+0xd8>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   17826:	232e      	movs	r3, #46	; 0x2e
   17828:	18fb      	adds	r3, r7, r3
   1782a:	881b      	ldrh	r3, [r3, #0]
   1782c:	222e      	movs	r2, #46	; 0x2e
   1782e:	18ba      	adds	r2, r7, r2
   17830:	1c59      	adds	r1, r3, #1
   17832:	8011      	strh	r1, [r2, #0]
   17834:	001a      	movs	r2, r3
   17836:	68bb      	ldr	r3, [r7, #8]
   17838:	189b      	adds	r3, r3, r2
   1783a:	781a      	ldrb	r2, [r3, #0]
   1783c:	2322      	movs	r3, #34	; 0x22
   1783e:	18fb      	adds	r3, r7, r3
   17840:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   17842:	68fb      	ldr	r3, [r7, #12]
   17844:	799b      	ldrb	r3, [r3, #6]
   17846:	2b01      	cmp	r3, #1
   17848:	d115      	bne.n	17876 <spi_transceive_buffer_wait+0x13e>
			data_to_send |= (tx_data[tx_pos++] << 8);
   1784a:	232e      	movs	r3, #46	; 0x2e
   1784c:	18fb      	adds	r3, r7, r3
   1784e:	881b      	ldrh	r3, [r3, #0]
   17850:	222e      	movs	r2, #46	; 0x2e
   17852:	18ba      	adds	r2, r7, r2
   17854:	1c59      	adds	r1, r3, #1
   17856:	8011      	strh	r1, [r2, #0]
   17858:	001a      	movs	r2, r3
   1785a:	68bb      	ldr	r3, [r7, #8]
   1785c:	189b      	adds	r3, r3, r2
   1785e:	781b      	ldrb	r3, [r3, #0]
   17860:	021b      	lsls	r3, r3, #8
   17862:	b21a      	sxth	r2, r3
   17864:	2322      	movs	r3, #34	; 0x22
   17866:	18fb      	adds	r3, r7, r3
   17868:	2100      	movs	r1, #0
   1786a:	5e5b      	ldrsh	r3, [r3, r1]
   1786c:	4313      	orrs	r3, r2
   1786e:	b21a      	sxth	r2, r3
   17870:	2322      	movs	r3, #34	; 0x22
   17872:	18fb      	adds	r3, r7, r3
   17874:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   17876:	2322      	movs	r3, #34	; 0x22
   17878:	18fb      	adds	r3, r7, r3
   1787a:	881a      	ldrh	r2, [r3, #0]
   1787c:	68fb      	ldr	r3, [r7, #12]
   1787e:	0011      	movs	r1, r2
   17880:	0018      	movs	r0, r3
   17882:	4b8f      	ldr	r3, [pc, #572]	; (17ac0 <spi_transceive_buffer_wait+0x388>)
   17884:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   17886:	68fb      	ldr	r3, [r7, #12]
   17888:	795b      	ldrb	r3, [r3, #5]
   1788a:	2b00      	cmp	r3, #0
   1788c:	d165      	bne.n	1795a <spi_transceive_buffer_wait+0x222>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   1788e:	2300      	movs	r3, #0
   17890:	61fb      	str	r3, [r7, #28]
   17892:	e043      	b.n	1791c <spi_transceive_buffer_wait+0x1e4>
				if (spi_is_ready_to_write(module)) {
   17894:	68fb      	ldr	r3, [r7, #12]
   17896:	0018      	movs	r0, r3
   17898:	4b87      	ldr	r3, [pc, #540]	; (17ab8 <spi_transceive_buffer_wait+0x380>)
   1789a:	4798      	blx	r3
   1789c:	1e03      	subs	r3, r0, #0
   1789e:	d034      	beq.n	1790a <spi_transceive_buffer_wait+0x1d2>
					data_to_send = tx_data[tx_pos++];
   178a0:	232e      	movs	r3, #46	; 0x2e
   178a2:	18fb      	adds	r3, r7, r3
   178a4:	881b      	ldrh	r3, [r3, #0]
   178a6:	222e      	movs	r2, #46	; 0x2e
   178a8:	18ba      	adds	r2, r7, r2
   178aa:	1c59      	adds	r1, r3, #1
   178ac:	8011      	strh	r1, [r2, #0]
   178ae:	001a      	movs	r2, r3
   178b0:	68bb      	ldr	r3, [r7, #8]
   178b2:	189b      	adds	r3, r3, r2
   178b4:	781a      	ldrb	r2, [r3, #0]
   178b6:	2322      	movs	r3, #34	; 0x22
   178b8:	18fb      	adds	r3, r7, r3
   178ba:	801a      	strh	r2, [r3, #0]
					/* If 9-bit data, get next byte to send from the buffer */
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   178bc:	68fb      	ldr	r3, [r7, #12]
   178be:	799b      	ldrb	r3, [r3, #6]
   178c0:	2b01      	cmp	r3, #1
   178c2:	d115      	bne.n	178f0 <spi_transceive_buffer_wait+0x1b8>
						data_to_send |= (tx_data[tx_pos++] << 8);
   178c4:	232e      	movs	r3, #46	; 0x2e
   178c6:	18fb      	adds	r3, r7, r3
   178c8:	881b      	ldrh	r3, [r3, #0]
   178ca:	222e      	movs	r2, #46	; 0x2e
   178cc:	18ba      	adds	r2, r7, r2
   178ce:	1c59      	adds	r1, r3, #1
   178d0:	8011      	strh	r1, [r2, #0]
   178d2:	001a      	movs	r2, r3
   178d4:	68bb      	ldr	r3, [r7, #8]
   178d6:	189b      	adds	r3, r3, r2
   178d8:	781b      	ldrb	r3, [r3, #0]
   178da:	021b      	lsls	r3, r3, #8
   178dc:	b21a      	sxth	r2, r3
   178de:	2322      	movs	r3, #34	; 0x22
   178e0:	18fb      	adds	r3, r7, r3
   178e2:	2100      	movs	r1, #0
   178e4:	5e5b      	ldrsh	r3, [r3, r1]
   178e6:	4313      	orrs	r3, r2
   178e8:	b21a      	sxth	r2, r3
   178ea:	2322      	movs	r3, #34	; 0x22
   178ec:	18fb      	adds	r3, r7, r3
   178ee:	801a      	strh	r2, [r3, #0]
					}

					/* Write the data to send */
					spi_write(module, data_to_send);
   178f0:	2322      	movs	r3, #34	; 0x22
   178f2:	18fb      	adds	r3, r7, r3
   178f4:	881a      	ldrh	r2, [r3, #0]
   178f6:	68fb      	ldr	r3, [r7, #12]
   178f8:	0011      	movs	r1, r2
   178fa:	0018      	movs	r0, r3
   178fc:	4b70      	ldr	r3, [pc, #448]	; (17ac0 <spi_transceive_buffer_wait+0x388>)
   178fe:	4798      	blx	r3
					length--;
   17900:	1cbb      	adds	r3, r7, #2
   17902:	881a      	ldrh	r2, [r3, #0]
   17904:	1cbb      	adds	r3, r7, #2
   17906:	3a01      	subs	r2, #1
   17908:	801a      	strh	r2, [r3, #0]
				}
				if (spi_is_ready_to_read(module)) {
   1790a:	68fb      	ldr	r3, [r7, #12]
   1790c:	0018      	movs	r0, r3
   1790e:	4b6d      	ldr	r3, [pc, #436]	; (17ac4 <spi_transceive_buffer_wait+0x38c>)
   17910:	4798      	blx	r3
   17912:	1e03      	subs	r3, r0, #0
   17914:	d107      	bne.n	17926 <spi_transceive_buffer_wait+0x1ee>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   17916:	69fb      	ldr	r3, [r7, #28]
   17918:	3301      	adds	r3, #1
   1791a:	61fb      	str	r3, [r7, #28]
   1791c:	69fb      	ldr	r3, [r7, #28]
   1791e:	4a67      	ldr	r2, [pc, #412]	; (17abc <spi_transceive_buffer_wait+0x384>)
   17920:	4293      	cmp	r3, r2
   17922:	d9b7      	bls.n	17894 <spi_transceive_buffer_wait+0x15c>
   17924:	e000      	b.n	17928 <spi_transceive_buffer_wait+0x1f0>
					break;
   17926:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   17928:	68fb      	ldr	r3, [r7, #12]
   1792a:	0018      	movs	r0, r3
   1792c:	4b60      	ldr	r3, [pc, #384]	; (17ab0 <spi_transceive_buffer_wait+0x378>)
   1792e:	4798      	blx	r3
   17930:	1e03      	subs	r3, r0, #0
   17932:	d005      	beq.n	17940 <spi_transceive_buffer_wait+0x208>
				_spi_clear_tx_complete_flag(module);
   17934:	68fb      	ldr	r3, [r7, #12]
   17936:	0018      	movs	r0, r3
   17938:	4b5e      	ldr	r3, [pc, #376]	; (17ab4 <spi_transceive_buffer_wait+0x37c>)
   1793a:	4798      	blx	r3
				return STATUS_ABORTED;
   1793c:	2304      	movs	r3, #4
   1793e:	e0f0      	b.n	17b22 <spi_transceive_buffer_wait+0x3ea>
			}

			if (!spi_is_ready_to_read(module)) {
   17940:	68fb      	ldr	r3, [r7, #12]
   17942:	0018      	movs	r0, r3
   17944:	4b5f      	ldr	r3, [pc, #380]	; (17ac4 <spi_transceive_buffer_wait+0x38c>)
   17946:	4798      	blx	r3
   17948:	0003      	movs	r3, r0
   1794a:	001a      	movs	r2, r3
   1794c:	2301      	movs	r3, #1
   1794e:	4053      	eors	r3, r2
   17950:	b2db      	uxtb	r3, r3
   17952:	2b00      	cmp	r3, #0
   17954:	d001      	beq.n	1795a <spi_transceive_buffer_wait+0x222>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   17956:	2312      	movs	r3, #18
   17958:	e0e3      	b.n	17b22 <spi_transceive_buffer_wait+0x3ea>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   1795a:	46c0      	nop			; (mov r8, r8)
   1795c:	68fb      	ldr	r3, [r7, #12]
   1795e:	0018      	movs	r0, r3
   17960:	4b58      	ldr	r3, [pc, #352]	; (17ac4 <spi_transceive_buffer_wait+0x38c>)
   17962:	4798      	blx	r3
   17964:	0003      	movs	r3, r0
   17966:	001a      	movs	r2, r3
   17968:	2301      	movs	r3, #1
   1796a:	4053      	eors	r3, r2
   1796c:	b2db      	uxtb	r3, r3
   1796e:	2b00      	cmp	r3, #0
   17970:	d1f4      	bne.n	1795c <spi_transceive_buffer_wait+0x224>
		}

		enum status_code retval;
		uint16_t received_data = 0;
   17972:	2314      	movs	r3, #20
   17974:	18fb      	adds	r3, r7, r3
   17976:	2200      	movs	r2, #0
   17978:	801a      	strh	r2, [r3, #0]
		rx_length--;
   1797a:	232a      	movs	r3, #42	; 0x2a
   1797c:	18fb      	adds	r3, r7, r3
   1797e:	881a      	ldrh	r2, [r3, #0]
   17980:	232a      	movs	r3, #42	; 0x2a
   17982:	18fb      	adds	r3, r7, r3
   17984:	3a01      	subs	r2, #1
   17986:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
   17988:	2317      	movs	r3, #23
   1798a:	18fc      	adds	r4, r7, r3
   1798c:	2314      	movs	r3, #20
   1798e:	18fa      	adds	r2, r7, r3
   17990:	68fb      	ldr	r3, [r7, #12]
   17992:	0011      	movs	r1, r2
   17994:	0018      	movs	r0, r3
   17996:	4b4c      	ldr	r3, [pc, #304]	; (17ac8 <spi_transceive_buffer_wait+0x390>)
   17998:	4798      	blx	r3
   1799a:	0003      	movs	r3, r0
   1799c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   1799e:	2317      	movs	r3, #23
   179a0:	18fb      	adds	r3, r7, r3
   179a2:	781b      	ldrb	r3, [r3, #0]
   179a4:	2b00      	cmp	r3, #0
   179a6:	d003      	beq.n	179b0 <spi_transceive_buffer_wait+0x278>
			/* Overflow, abort */
			return retval;
   179a8:	2317      	movs	r3, #23
   179aa:	18fb      	adds	r3, r7, r3
   179ac:	781b      	ldrb	r3, [r3, #0]
   179ae:	e0b8      	b.n	17b22 <spi_transceive_buffer_wait+0x3ea>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   179b0:	232c      	movs	r3, #44	; 0x2c
   179b2:	18fb      	adds	r3, r7, r3
   179b4:	881b      	ldrh	r3, [r3, #0]
   179b6:	222c      	movs	r2, #44	; 0x2c
   179b8:	18ba      	adds	r2, r7, r2
   179ba:	1c59      	adds	r1, r3, #1
   179bc:	8011      	strh	r1, [r2, #0]
   179be:	001a      	movs	r2, r3
   179c0:	687b      	ldr	r3, [r7, #4]
   179c2:	189b      	adds	r3, r3, r2
   179c4:	2214      	movs	r2, #20
   179c6:	18ba      	adds	r2, r7, r2
   179c8:	8812      	ldrh	r2, [r2, #0]
   179ca:	b2d2      	uxtb	r2, r2
   179cc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   179ce:	68fb      	ldr	r3, [r7, #12]
   179d0:	799b      	ldrb	r3, [r3, #6]
   179d2:	2b01      	cmp	r3, #1
   179d4:	d110      	bne.n	179f8 <spi_transceive_buffer_wait+0x2c0>
			rx_data[rx_pos++] = (received_data >> 8);
   179d6:	232c      	movs	r3, #44	; 0x2c
   179d8:	18fb      	adds	r3, r7, r3
   179da:	881b      	ldrh	r3, [r3, #0]
   179dc:	222c      	movs	r2, #44	; 0x2c
   179de:	18ba      	adds	r2, r7, r2
   179e0:	1c59      	adds	r1, r3, #1
   179e2:	8011      	strh	r1, [r2, #0]
   179e4:	001a      	movs	r2, r3
   179e6:	687b      	ldr	r3, [r7, #4]
   179e8:	189b      	adds	r3, r3, r2
   179ea:	2214      	movs	r2, #20
   179ec:	18ba      	adds	r2, r7, r2
   179ee:	8812      	ldrh	r2, [r2, #0]
   179f0:	0a12      	lsrs	r2, r2, #8
   179f2:	b292      	uxth	r2, r2
   179f4:	b2d2      	uxtb	r2, r2
   179f6:	701a      	strb	r2, [r3, #0]
	while (length--) {
   179f8:	1cbb      	adds	r3, r7, #2
   179fa:	881b      	ldrh	r3, [r3, #0]
   179fc:	1cba      	adds	r2, r7, #2
   179fe:	1e59      	subs	r1, r3, #1
   17a00:	8011      	strh	r1, [r2, #0]
   17a02:	2b00      	cmp	r3, #0
   17a04:	d000      	beq.n	17a08 <spi_transceive_buffer_wait+0x2d0>
   17a06:	e6d3      	b.n	177b0 <spi_transceive_buffer_wait+0x78>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   17a08:	68fb      	ldr	r3, [r7, #12]
   17a0a:	795b      	ldrb	r3, [r3, #5]
   17a0c:	2b01      	cmp	r3, #1
   17a0e:	d10b      	bne.n	17a28 <spi_transceive_buffer_wait+0x2f0>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   17a10:	46c0      	nop			; (mov r8, r8)
   17a12:	68fb      	ldr	r3, [r7, #12]
   17a14:	0018      	movs	r0, r3
   17a16:	4b26      	ldr	r3, [pc, #152]	; (17ab0 <spi_transceive_buffer_wait+0x378>)
   17a18:	4798      	blx	r3
   17a1a:	0003      	movs	r3, r0
   17a1c:	001a      	movs	r2, r3
   17a1e:	2301      	movs	r3, #1
   17a20:	4053      	eors	r3, r2
   17a22:	b2db      	uxtb	r3, r3
   17a24:	2b00      	cmp	r3, #0
   17a26:	d1f4      	bne.n	17a12 <spi_transceive_buffer_wait+0x2da>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   17a28:	68fb      	ldr	r3, [r7, #12]
   17a2a:	795b      	ldrb	r3, [r3, #5]
   17a2c:	2b00      	cmp	r3, #0
   17a2e:	d000      	beq.n	17a32 <spi_transceive_buffer_wait+0x2fa>
   17a30:	e076      	b.n	17b20 <spi_transceive_buffer_wait+0x3e8>
		while (rx_length) {
   17a32:	e06f      	b.n	17b14 <spi_transceive_buffer_wait+0x3dc>
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   17a34:	2300      	movs	r3, #0
   17a36:	61bb      	str	r3, [r7, #24]
   17a38:	e008      	b.n	17a4c <spi_transceive_buffer_wait+0x314>
				if (spi_is_ready_to_read(module)) {
   17a3a:	68fb      	ldr	r3, [r7, #12]
   17a3c:	0018      	movs	r0, r3
   17a3e:	4b21      	ldr	r3, [pc, #132]	; (17ac4 <spi_transceive_buffer_wait+0x38c>)
   17a40:	4798      	blx	r3
   17a42:	1e03      	subs	r3, r0, #0
   17a44:	d107      	bne.n	17a56 <spi_transceive_buffer_wait+0x31e>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   17a46:	69bb      	ldr	r3, [r7, #24]
   17a48:	3301      	adds	r3, #1
   17a4a:	61bb      	str	r3, [r7, #24]
   17a4c:	69bb      	ldr	r3, [r7, #24]
   17a4e:	4a1b      	ldr	r2, [pc, #108]	; (17abc <spi_transceive_buffer_wait+0x384>)
   17a50:	4293      	cmp	r3, r2
   17a52:	d9f2      	bls.n	17a3a <spi_transceive_buffer_wait+0x302>
   17a54:	e000      	b.n	17a58 <spi_transceive_buffer_wait+0x320>
					break;
   17a56:	46c0      	nop			; (mov r8, r8)
				}
			}
			if (!spi_is_ready_to_read(module)) {
   17a58:	68fb      	ldr	r3, [r7, #12]
   17a5a:	0018      	movs	r0, r3
   17a5c:	4b19      	ldr	r3, [pc, #100]	; (17ac4 <spi_transceive_buffer_wait+0x38c>)
   17a5e:	4798      	blx	r3
   17a60:	0003      	movs	r3, r0
   17a62:	001a      	movs	r2, r3
   17a64:	2301      	movs	r3, #1
   17a66:	4053      	eors	r3, r2
   17a68:	b2db      	uxtb	r3, r3
   17a6a:	2b00      	cmp	r3, #0
   17a6c:	d001      	beq.n	17a72 <spi_transceive_buffer_wait+0x33a>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   17a6e:	2312      	movs	r3, #18
   17a70:	e057      	b.n	17b22 <spi_transceive_buffer_wait+0x3ea>
			}
			enum status_code retval;
			uint16_t received_data = 0;
   17a72:	2312      	movs	r3, #18
   17a74:	18fb      	adds	r3, r7, r3
   17a76:	2200      	movs	r2, #0
   17a78:	801a      	strh	r2, [r3, #0]
			rx_length--;
   17a7a:	232a      	movs	r3, #42	; 0x2a
   17a7c:	18fb      	adds	r3, r7, r3
   17a7e:	881a      	ldrh	r2, [r3, #0]
   17a80:	232a      	movs	r3, #42	; 0x2a
   17a82:	18fb      	adds	r3, r7, r3
   17a84:	3a01      	subs	r2, #1
   17a86:	801a      	strh	r2, [r3, #0]

			retval = spi_read(module, &received_data);
   17a88:	2316      	movs	r3, #22
   17a8a:	18fc      	adds	r4, r7, r3
   17a8c:	2312      	movs	r3, #18
   17a8e:	18fa      	adds	r2, r7, r3
   17a90:	68fb      	ldr	r3, [r7, #12]
   17a92:	0011      	movs	r1, r2
   17a94:	0018      	movs	r0, r3
   17a96:	4b0c      	ldr	r3, [pc, #48]	; (17ac8 <spi_transceive_buffer_wait+0x390>)
   17a98:	4798      	blx	r3
   17a9a:	0003      	movs	r3, r0
   17a9c:	7023      	strb	r3, [r4, #0]

			if (retval != STATUS_OK) {
   17a9e:	2316      	movs	r3, #22
   17aa0:	18fb      	adds	r3, r7, r3
   17aa2:	781b      	ldrb	r3, [r3, #0]
   17aa4:	2b00      	cmp	r3, #0
   17aa6:	d011      	beq.n	17acc <spi_transceive_buffer_wait+0x394>
				/* Overflow, abort */
				return retval;
   17aa8:	2316      	movs	r3, #22
   17aaa:	18fb      	adds	r3, r7, r3
   17aac:	781b      	ldrb	r3, [r3, #0]
   17aae:	e038      	b.n	17b22 <spi_transceive_buffer_wait+0x3ea>
   17ab0:	00016b21 	.word	0x00016b21
   17ab4:	00016d31 	.word	0x00016d31
   17ab8:	00016b49 	.word	0x00016b49
   17abc:	00002710 	.word	0x00002710
   17ac0:	00016b99 	.word	0x00016b99
   17ac4:	00016b71 	.word	0x00016b71
   17ac8:	00016be1 	.word	0x00016be1
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
   17acc:	232c      	movs	r3, #44	; 0x2c
   17ace:	18fb      	adds	r3, r7, r3
   17ad0:	881b      	ldrh	r3, [r3, #0]
   17ad2:	222c      	movs	r2, #44	; 0x2c
   17ad4:	18ba      	adds	r2, r7, r2
   17ad6:	1c59      	adds	r1, r3, #1
   17ad8:	8011      	strh	r1, [r2, #0]
   17ada:	001a      	movs	r2, r3
   17adc:	687b      	ldr	r3, [r7, #4]
   17ade:	189b      	adds	r3, r3, r2
   17ae0:	2212      	movs	r2, #18
   17ae2:	18ba      	adds	r2, r7, r2
   17ae4:	8812      	ldrh	r2, [r2, #0]
   17ae6:	b2d2      	uxtb	r2, r2
   17ae8:	701a      	strb	r2, [r3, #0]

			/* If 9-bit data, write next received byte to the buffer */
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   17aea:	68fb      	ldr	r3, [r7, #12]
   17aec:	799b      	ldrb	r3, [r3, #6]
   17aee:	2b01      	cmp	r3, #1
   17af0:	d110      	bne.n	17b14 <spi_transceive_buffer_wait+0x3dc>
				rx_data[rx_pos++] = (received_data >> 8);
   17af2:	232c      	movs	r3, #44	; 0x2c
   17af4:	18fb      	adds	r3, r7, r3
   17af6:	881b      	ldrh	r3, [r3, #0]
   17af8:	222c      	movs	r2, #44	; 0x2c
   17afa:	18ba      	adds	r2, r7, r2
   17afc:	1c59      	adds	r1, r3, #1
   17afe:	8011      	strh	r1, [r2, #0]
   17b00:	001a      	movs	r2, r3
   17b02:	687b      	ldr	r3, [r7, #4]
   17b04:	189b      	adds	r3, r3, r2
   17b06:	2212      	movs	r2, #18
   17b08:	18ba      	adds	r2, r7, r2
   17b0a:	8812      	ldrh	r2, [r2, #0]
   17b0c:	0a12      	lsrs	r2, r2, #8
   17b0e:	b292      	uxth	r2, r2
   17b10:	b2d2      	uxtb	r2, r2
   17b12:	701a      	strb	r2, [r3, #0]
		while (rx_length) {
   17b14:	232a      	movs	r3, #42	; 0x2a
   17b16:	18fb      	adds	r3, r7, r3
   17b18:	881b      	ldrh	r3, [r3, #0]
   17b1a:	2b00      	cmp	r3, #0
   17b1c:	d000      	beq.n	17b20 <spi_transceive_buffer_wait+0x3e8>
   17b1e:	e789      	b.n	17a34 <spi_transceive_buffer_wait+0x2fc>
			}
		}
	}
#  endif
	return STATUS_OK;
   17b20:	2300      	movs	r3, #0
}
   17b22:	0018      	movs	r0, r3
   17b24:	46bd      	mov	sp, r7
   17b26:	b00d      	add	sp, #52	; 0x34
   17b28:	bd90      	pop	{r4, r7, pc}
   17b2a:	46c0      	nop			; (mov r8, r8)

00017b2c <system_gclk_chan_get_config_defaults>:
{
   17b2c:	b580      	push	{r7, lr}
   17b2e:	b082      	sub	sp, #8
   17b30:	af00      	add	r7, sp, #0
   17b32:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   17b34:	687b      	ldr	r3, [r7, #4]
   17b36:	2200      	movs	r2, #0
   17b38:	701a      	strb	r2, [r3, #0]
}
   17b3a:	46c0      	nop			; (mov r8, r8)
   17b3c:	46bd      	mov	sp, r7
   17b3e:	b002      	add	sp, #8
   17b40:	bd80      	pop	{r7, pc}

00017b42 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   17b42:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b44:	b08d      	sub	sp, #52	; 0x34
   17b46:	af00      	add	r7, sp, #0
   17b48:	60b8      	str	r0, [r7, #8]
   17b4a:	60f9      	str	r1, [r7, #12]
   17b4c:	603a      	str	r2, [r7, #0]
   17b4e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   17b50:	2300      	movs	r3, #0
   17b52:	2400      	movs	r4, #0
   17b54:	623b      	str	r3, [r7, #32]
   17b56:	627c      	str	r4, [r7, #36]	; 0x24
   17b58:	2300      	movs	r3, #0
   17b5a:	2400      	movs	r4, #0
   17b5c:	61bb      	str	r3, [r7, #24]
   17b5e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   17b60:	233f      	movs	r3, #63	; 0x3f
   17b62:	62fb      	str	r3, [r7, #44]	; 0x2c
   17b64:	e053      	b.n	17c0e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   17b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17b68:	3b20      	subs	r3, #32
   17b6a:	2b00      	cmp	r3, #0
   17b6c:	db04      	blt.n	17b78 <long_division+0x36>
   17b6e:	2201      	movs	r2, #1
   17b70:	409a      	lsls	r2, r3
   17b72:	0013      	movs	r3, r2
   17b74:	617b      	str	r3, [r7, #20]
   17b76:	e00b      	b.n	17b90 <long_division+0x4e>
   17b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17b7a:	2220      	movs	r2, #32
   17b7c:	1ad3      	subs	r3, r2, r3
   17b7e:	2201      	movs	r2, #1
   17b80:	40da      	lsrs	r2, r3
   17b82:	0013      	movs	r3, r2
   17b84:	2100      	movs	r1, #0
   17b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17b88:	4091      	lsls	r1, r2
   17b8a:	000a      	movs	r2, r1
   17b8c:	4313      	orrs	r3, r2
   17b8e:	617b      	str	r3, [r7, #20]
   17b90:	2201      	movs	r2, #1
   17b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17b94:	409a      	lsls	r2, r3
   17b96:	0013      	movs	r3, r2
   17b98:	613b      	str	r3, [r7, #16]

		r = r << 1;
   17b9a:	69bb      	ldr	r3, [r7, #24]
   17b9c:	69fc      	ldr	r4, [r7, #28]
   17b9e:	18db      	adds	r3, r3, r3
   17ba0:	4164      	adcs	r4, r4
   17ba2:	61bb      	str	r3, [r7, #24]
   17ba4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   17ba6:	68bb      	ldr	r3, [r7, #8]
   17ba8:	693a      	ldr	r2, [r7, #16]
   17baa:	401a      	ands	r2, r3
   17bac:	0015      	movs	r5, r2
   17bae:	68fb      	ldr	r3, [r7, #12]
   17bb0:	697a      	ldr	r2, [r7, #20]
   17bb2:	401a      	ands	r2, r3
   17bb4:	0016      	movs	r6, r2
   17bb6:	002b      	movs	r3, r5
   17bb8:	4333      	orrs	r3, r6
   17bba:	d007      	beq.n	17bcc <long_division+0x8a>
			r |= 0x01;
   17bbc:	69bb      	ldr	r3, [r7, #24]
   17bbe:	2201      	movs	r2, #1
   17bc0:	4313      	orrs	r3, r2
   17bc2:	61bb      	str	r3, [r7, #24]
   17bc4:	69fb      	ldr	r3, [r7, #28]
   17bc6:	2200      	movs	r2, #0
   17bc8:	4313      	orrs	r3, r2
   17bca:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   17bcc:	687a      	ldr	r2, [r7, #4]
   17bce:	69fb      	ldr	r3, [r7, #28]
   17bd0:	429a      	cmp	r2, r3
   17bd2:	d819      	bhi.n	17c08 <long_division+0xc6>
   17bd4:	687a      	ldr	r2, [r7, #4]
   17bd6:	69fb      	ldr	r3, [r7, #28]
   17bd8:	429a      	cmp	r2, r3
   17bda:	d103      	bne.n	17be4 <long_division+0xa2>
   17bdc:	683a      	ldr	r2, [r7, #0]
   17bde:	69bb      	ldr	r3, [r7, #24]
   17be0:	429a      	cmp	r2, r3
   17be2:	d811      	bhi.n	17c08 <long_division+0xc6>
			r = r - d;
   17be4:	69b9      	ldr	r1, [r7, #24]
   17be6:	69fa      	ldr	r2, [r7, #28]
   17be8:	683b      	ldr	r3, [r7, #0]
   17bea:	687c      	ldr	r4, [r7, #4]
   17bec:	1ac9      	subs	r1, r1, r3
   17bee:	41a2      	sbcs	r2, r4
   17bf0:	000b      	movs	r3, r1
   17bf2:	0014      	movs	r4, r2
   17bf4:	61bb      	str	r3, [r7, #24]
   17bf6:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   17bf8:	6a3a      	ldr	r2, [r7, #32]
   17bfa:	693b      	ldr	r3, [r7, #16]
   17bfc:	4313      	orrs	r3, r2
   17bfe:	623b      	str	r3, [r7, #32]
   17c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17c02:	697b      	ldr	r3, [r7, #20]
   17c04:	4313      	orrs	r3, r2
   17c06:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   17c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17c0a:	3b01      	subs	r3, #1
   17c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   17c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17c10:	2b00      	cmp	r3, #0
   17c12:	daa8      	bge.n	17b66 <long_division+0x24>
		}
	}

	return q;
   17c14:	6a3b      	ldr	r3, [r7, #32]
   17c16:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   17c18:	0018      	movs	r0, r3
   17c1a:	0021      	movs	r1, r4
   17c1c:	46bd      	mov	sp, r7
   17c1e:	b00d      	add	sp, #52	; 0x34
   17c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017c22 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   17c22:	b580      	push	{r7, lr}
   17c24:	b086      	sub	sp, #24
   17c26:	af00      	add	r7, sp, #0
   17c28:	60f8      	str	r0, [r7, #12]
   17c2a:	60b9      	str	r1, [r7, #8]
   17c2c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   17c2e:	2316      	movs	r3, #22
   17c30:	18fb      	adds	r3, r7, r3
   17c32:	2200      	movs	r2, #0
   17c34:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   17c36:	68bb      	ldr	r3, [r7, #8]
   17c38:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   17c3a:	68bb      	ldr	r3, [r7, #8]
   17c3c:	085a      	lsrs	r2, r3, #1
   17c3e:	68fb      	ldr	r3, [r7, #12]
   17c40:	429a      	cmp	r2, r3
   17c42:	d201      	bcs.n	17c48 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17c44:	2340      	movs	r3, #64	; 0x40
   17c46:	e026      	b.n	17c96 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   17c48:	68bb      	ldr	r3, [r7, #8]
   17c4a:	085b      	lsrs	r3, r3, #1
   17c4c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   17c4e:	e00a      	b.n	17c66 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   17c50:	693a      	ldr	r2, [r7, #16]
   17c52:	68fb      	ldr	r3, [r7, #12]
   17c54:	1ad3      	subs	r3, r2, r3
   17c56:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   17c58:	2316      	movs	r3, #22
   17c5a:	18fb      	adds	r3, r7, r3
   17c5c:	881a      	ldrh	r2, [r3, #0]
   17c5e:	2316      	movs	r3, #22
   17c60:	18fb      	adds	r3, r7, r3
   17c62:	3201      	adds	r2, #1
   17c64:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   17c66:	693a      	ldr	r2, [r7, #16]
   17c68:	68fb      	ldr	r3, [r7, #12]
   17c6a:	429a      	cmp	r2, r3
   17c6c:	d2f0      	bcs.n	17c50 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   17c6e:	2316      	movs	r3, #22
   17c70:	18fb      	adds	r3, r7, r3
   17c72:	2216      	movs	r2, #22
   17c74:	18ba      	adds	r2, r7, r2
   17c76:	8812      	ldrh	r2, [r2, #0]
   17c78:	3a01      	subs	r2, #1
   17c7a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   17c7c:	2316      	movs	r3, #22
   17c7e:	18fb      	adds	r3, r7, r3
   17c80:	881b      	ldrh	r3, [r3, #0]
   17c82:	2bff      	cmp	r3, #255	; 0xff
   17c84:	d901      	bls.n	17c8a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17c86:	2340      	movs	r3, #64	; 0x40
   17c88:	e005      	b.n	17c96 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   17c8a:	687b      	ldr	r3, [r7, #4]
   17c8c:	2216      	movs	r2, #22
   17c8e:	18ba      	adds	r2, r7, r2
   17c90:	8812      	ldrh	r2, [r2, #0]
   17c92:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   17c94:	2300      	movs	r3, #0
	}
}
   17c96:	0018      	movs	r0, r3
   17c98:	46bd      	mov	sp, r7
   17c9a:	b006      	add	sp, #24
   17c9c:	bd80      	pop	{r7, pc}
	...

00017ca0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   17ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ca2:	b0a1      	sub	sp, #132	; 0x84
   17ca4:	af00      	add	r7, sp, #0
   17ca6:	64f8      	str	r0, [r7, #76]	; 0x4c
   17ca8:	64b9      	str	r1, [r7, #72]	; 0x48
   17caa:	647a      	str	r2, [r7, #68]	; 0x44
   17cac:	2243      	movs	r2, #67	; 0x43
   17cae:	18ba      	adds	r2, r7, r2
   17cb0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   17cb2:	2300      	movs	r3, #0
   17cb4:	2400      	movs	r4, #0
   17cb6:	673b      	str	r3, [r7, #112]	; 0x70
   17cb8:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   17cba:	2300      	movs	r3, #0
   17cbc:	2400      	movs	r4, #0
   17cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   17cc0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   17cc2:	2300      	movs	r3, #0
   17cc4:	2400      	movs	r4, #0
   17cc6:	67bb      	str	r3, [r7, #120]	; 0x78
   17cc8:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   17cca:	2300      	movs	r3, #0
   17ccc:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   17cce:	2358      	movs	r3, #88	; 0x58
   17cd0:	2240      	movs	r2, #64	; 0x40
   17cd2:	4694      	mov	ip, r2
   17cd4:	44bc      	add	ip, r7
   17cd6:	4463      	add	r3, ip
   17cd8:	781a      	ldrb	r2, [r3, #0]
   17cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17cdc:	435a      	muls	r2, r3
   17cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17ce0:	429a      	cmp	r2, r3
   17ce2:	d901      	bls.n	17ce8 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17ce4:	2340      	movs	r3, #64	; 0x40
   17ce6:	e0b3      	b.n	17e50 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   17ce8:	2343      	movs	r3, #67	; 0x43
   17cea:	18fb      	adds	r3, r7, r3
   17cec:	781b      	ldrb	r3, [r3, #0]
   17cee:	2b00      	cmp	r3, #0
   17cf0:	d13d      	bne.n	17d6e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   17cf2:	2358      	movs	r3, #88	; 0x58
   17cf4:	2240      	movs	r2, #64	; 0x40
   17cf6:	4694      	mov	ip, r2
   17cf8:	44bc      	add	ip, r7
   17cfa:	4463      	add	r3, ip
   17cfc:	781b      	ldrb	r3, [r3, #0]
   17cfe:	b2db      	uxtb	r3, r3
   17d00:	613b      	str	r3, [r7, #16]
   17d02:	2300      	movs	r3, #0
   17d04:	617b      	str	r3, [r7, #20]
   17d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17d08:	60bb      	str	r3, [r7, #8]
   17d0a:	2300      	movs	r3, #0
   17d0c:	60fb      	str	r3, [r7, #12]
   17d0e:	4c52      	ldr	r4, [pc, #328]	; (17e58 <_sercom_get_async_baud_val+0x1b8>)
   17d10:	68ba      	ldr	r2, [r7, #8]
   17d12:	68fb      	ldr	r3, [r7, #12]
   17d14:	6938      	ldr	r0, [r7, #16]
   17d16:	6979      	ldr	r1, [r7, #20]
   17d18:	47a0      	blx	r4
   17d1a:	0003      	movs	r3, r0
   17d1c:	000c      	movs	r4, r1
   17d1e:	001b      	movs	r3, r3
   17d20:	65fb      	str	r3, [r7, #92]	; 0x5c
   17d22:	2300      	movs	r3, #0
   17d24:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   17d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17d28:	603b      	str	r3, [r7, #0]
   17d2a:	2300      	movs	r3, #0
   17d2c:	607b      	str	r3, [r7, #4]
   17d2e:	6db8      	ldr	r0, [r7, #88]	; 0x58
   17d30:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   17d32:	683a      	ldr	r2, [r7, #0]
   17d34:	687b      	ldr	r3, [r7, #4]
   17d36:	4c49      	ldr	r4, [pc, #292]	; (17e5c <_sercom_get_async_baud_val+0x1bc>)
   17d38:	47a0      	blx	r4
   17d3a:	0003      	movs	r3, r0
   17d3c:	000c      	movs	r4, r1
   17d3e:	673b      	str	r3, [r7, #112]	; 0x70
   17d40:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   17d42:	2100      	movs	r1, #0
   17d44:	2201      	movs	r2, #1
   17d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   17d48:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   17d4a:	1ac9      	subs	r1, r1, r3
   17d4c:	41a2      	sbcs	r2, r4
   17d4e:	000b      	movs	r3, r1
   17d50:	0014      	movs	r4, r2
   17d52:	66bb      	str	r3, [r7, #104]	; 0x68
   17d54:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   17d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   17d58:	0c1b      	lsrs	r3, r3, #16
   17d5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   17d5c:	0416      	lsls	r6, r2, #16
   17d5e:	431e      	orrs	r6, r3
   17d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   17d62:	041d      	lsls	r5, r3, #16
   17d64:	0033      	movs	r3, r6
   17d66:	67bb      	str	r3, [r7, #120]	; 0x78
   17d68:	2300      	movs	r3, #0
   17d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   17d6c:	e06a      	b.n	17e44 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   17d6e:	2343      	movs	r3, #67	; 0x43
   17d70:	18fb      	adds	r3, r7, r3
   17d72:	781b      	ldrb	r3, [r3, #0]
   17d74:	2b01      	cmp	r3, #1
   17d76:	d165      	bne.n	17e44 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   17d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17d7a:	633b      	str	r3, [r7, #48]	; 0x30
   17d7c:	2300      	movs	r3, #0
   17d7e:	637b      	str	r3, [r7, #52]	; 0x34
   17d80:	2358      	movs	r3, #88	; 0x58
   17d82:	2240      	movs	r2, #64	; 0x40
   17d84:	4694      	mov	ip, r2
   17d86:	44bc      	add	ip, r7
   17d88:	4463      	add	r3, ip
   17d8a:	781b      	ldrb	r3, [r3, #0]
   17d8c:	b2db      	uxtb	r3, r3
   17d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   17d90:	2300      	movs	r3, #0
   17d92:	62fb      	str	r3, [r7, #44]	; 0x2c
   17d94:	4c30      	ldr	r4, [pc, #192]	; (17e58 <_sercom_get_async_baud_val+0x1b8>)
   17d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   17d9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   17d9e:	47a0      	blx	r4
   17da0:	0003      	movs	r3, r0
   17da2:	000c      	movs	r4, r1
   17da4:	65bb      	str	r3, [r7, #88]	; 0x58
   17da6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   17da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17daa:	623b      	str	r3, [r7, #32]
   17dac:	2300      	movs	r3, #0
   17dae:	627b      	str	r3, [r7, #36]	; 0x24
   17db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   17db2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   17db4:	001a      	movs	r2, r3
   17db6:	0023      	movs	r3, r4
   17db8:	6a38      	ldr	r0, [r7, #32]
   17dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17dbc:	4c27      	ldr	r4, [pc, #156]	; (17e5c <_sercom_get_async_baud_val+0x1bc>)
   17dbe:	47a0      	blx	r4
   17dc0:	0003      	movs	r3, r0
   17dc2:	000c      	movs	r4, r1
   17dc4:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   17dc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   17dc8:	2380      	movs	r3, #128	; 0x80
   17dca:	019b      	lsls	r3, r3, #6
   17dcc:	429a      	cmp	r2, r3
   17dce:	d901      	bls.n	17dd4 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17dd0:	2340      	movs	r3, #64	; 0x40
   17dd2:	e03d      	b.n	17e50 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   17dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17dd6:	61bb      	str	r3, [r7, #24]
   17dd8:	2300      	movs	r3, #0
   17dda:	61fb      	str	r3, [r7, #28]
   17ddc:	69b9      	ldr	r1, [r7, #24]
   17dde:	69fa      	ldr	r2, [r7, #28]
   17de0:	000b      	movs	r3, r1
   17de2:	0f5b      	lsrs	r3, r3, #29
   17de4:	0010      	movs	r0, r2
   17de6:	00c0      	lsls	r0, r0, #3
   17de8:	63f8      	str	r0, [r7, #60]	; 0x3c
   17dea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17dec:	4318      	orrs	r0, r3
   17dee:	63f8      	str	r0, [r7, #60]	; 0x3c
   17df0:	000b      	movs	r3, r1
   17df2:	00db      	lsls	r3, r3, #3
   17df4:	63bb      	str	r3, [r7, #56]	; 0x38
   17df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   17df8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   17dfa:	001a      	movs	r2, r3
   17dfc:	0023      	movs	r3, r4
   17dfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   17e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17e02:	4c16      	ldr	r4, [pc, #88]	; (17e5c <_sercom_get_async_baud_val+0x1bc>)
   17e04:	47a0      	blx	r4
   17e06:	0003      	movs	r3, r0
   17e08:	000c      	movs	r4, r1
   17e0a:	65bb      	str	r3, [r7, #88]	; 0x58
   17e0c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   17e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   17e10:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   17e12:	b2d9      	uxtb	r1, r3
   17e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   17e16:	b2db      	uxtb	r3, r3
   17e18:	00db      	lsls	r3, r3, #3
   17e1a:	b2da      	uxtb	r2, r3
   17e1c:	2317      	movs	r3, #23
   17e1e:	2040      	movs	r0, #64	; 0x40
   17e20:	4684      	mov	ip, r0
   17e22:	44bc      	add	ip, r7
   17e24:	4463      	add	r3, ip
   17e26:	1a8a      	subs	r2, r1, r2
   17e28:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   17e2a:	2317      	movs	r3, #23
   17e2c:	2240      	movs	r2, #64	; 0x40
   17e2e:	4694      	mov	ip, r2
   17e30:	44bc      	add	ip, r7
   17e32:	4463      	add	r3, ip
   17e34:	781b      	ldrb	r3, [r3, #0]
   17e36:	035b      	lsls	r3, r3, #13
   17e38:	001a      	movs	r2, r3
   17e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   17e3c:	4313      	orrs	r3, r2
   17e3e:	67bb      	str	r3, [r7, #120]	; 0x78
   17e40:	2300      	movs	r3, #0
   17e42:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   17e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17e46:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   17e48:	b29a      	uxth	r2, r3
   17e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17e4c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   17e4e:	2300      	movs	r3, #0
}
   17e50:	0018      	movs	r0, r3
   17e52:	46bd      	mov	sp, r7
   17e54:	b021      	add	sp, #132	; 0x84
   17e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17e58:	00021015 	.word	0x00021015
   17e5c:	00017b43 	.word	0x00017b43

00017e60 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   17e60:	b580      	push	{r7, lr}
   17e62:	b084      	sub	sp, #16
   17e64:	af00      	add	r7, sp, #0
   17e66:	0002      	movs	r2, r0
   17e68:	1dfb      	adds	r3, r7, #7
   17e6a:	701a      	strb	r2, [r3, #0]
   17e6c:	1dbb      	adds	r3, r7, #6
   17e6e:	1c0a      	adds	r2, r1, #0
   17e70:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   17e72:	4b1a      	ldr	r3, [pc, #104]	; (17edc <sercom_set_gclk_generator+0x7c>)
   17e74:	781b      	ldrb	r3, [r3, #0]
   17e76:	2201      	movs	r2, #1
   17e78:	4053      	eors	r3, r2
   17e7a:	b2db      	uxtb	r3, r3
   17e7c:	2b00      	cmp	r3, #0
   17e7e:	d103      	bne.n	17e88 <sercom_set_gclk_generator+0x28>
   17e80:	1dbb      	adds	r3, r7, #6
   17e82:	781b      	ldrb	r3, [r3, #0]
   17e84:	2b00      	cmp	r3, #0
   17e86:	d01b      	beq.n	17ec0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   17e88:	230c      	movs	r3, #12
   17e8a:	18fb      	adds	r3, r7, r3
   17e8c:	0018      	movs	r0, r3
   17e8e:	4b14      	ldr	r3, [pc, #80]	; (17ee0 <sercom_set_gclk_generator+0x80>)
   17e90:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   17e92:	230c      	movs	r3, #12
   17e94:	18fb      	adds	r3, r7, r3
   17e96:	1dfa      	adds	r2, r7, #7
   17e98:	7812      	ldrb	r2, [r2, #0]
   17e9a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   17e9c:	230c      	movs	r3, #12
   17e9e:	18fb      	adds	r3, r7, r3
   17ea0:	0019      	movs	r1, r3
   17ea2:	2011      	movs	r0, #17
   17ea4:	4b0f      	ldr	r3, [pc, #60]	; (17ee4 <sercom_set_gclk_generator+0x84>)
   17ea6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   17ea8:	2011      	movs	r0, #17
   17eaa:	4b0f      	ldr	r3, [pc, #60]	; (17ee8 <sercom_set_gclk_generator+0x88>)
   17eac:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   17eae:	4b0b      	ldr	r3, [pc, #44]	; (17edc <sercom_set_gclk_generator+0x7c>)
   17eb0:	1dfa      	adds	r2, r7, #7
   17eb2:	7812      	ldrb	r2, [r2, #0]
   17eb4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   17eb6:	4b09      	ldr	r3, [pc, #36]	; (17edc <sercom_set_gclk_generator+0x7c>)
   17eb8:	2201      	movs	r2, #1
   17eba:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   17ebc:	2300      	movs	r3, #0
   17ebe:	e008      	b.n	17ed2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   17ec0:	4b06      	ldr	r3, [pc, #24]	; (17edc <sercom_set_gclk_generator+0x7c>)
   17ec2:	785b      	ldrb	r3, [r3, #1]
   17ec4:	1dfa      	adds	r2, r7, #7
   17ec6:	7812      	ldrb	r2, [r2, #0]
   17ec8:	429a      	cmp	r2, r3
   17eca:	d101      	bne.n	17ed0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   17ecc:	2300      	movs	r3, #0
   17ece:	e000      	b.n	17ed2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   17ed0:	231d      	movs	r3, #29
}
   17ed2:	0018      	movs	r0, r3
   17ed4:	46bd      	mov	sp, r7
   17ed6:	b004      	add	sp, #16
   17ed8:	bd80      	pop	{r7, pc}
   17eda:	46c0      	nop			; (mov r8, r8)
   17edc:	20000e18 	.word	0x20000e18
   17ee0:	00017b2d 	.word	0x00017b2d
   17ee4:	00018bf1 	.word	0x00018bf1
   17ee8:	00018c31 	.word	0x00018c31

00017eec <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   17eec:	b580      	push	{r7, lr}
   17eee:	b082      	sub	sp, #8
   17ef0:	af00      	add	r7, sp, #0
   17ef2:	6078      	str	r0, [r7, #4]
   17ef4:	000a      	movs	r2, r1
   17ef6:	1cfb      	adds	r3, r7, #3
   17ef8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   17efa:	687b      	ldr	r3, [r7, #4]
   17efc:	4a4e      	ldr	r2, [pc, #312]	; (18038 <_sercom_get_default_pad+0x14c>)
   17efe:	4293      	cmp	r3, r2
   17f00:	d040      	beq.n	17f84 <_sercom_get_default_pad+0x98>
   17f02:	4a4d      	ldr	r2, [pc, #308]	; (18038 <_sercom_get_default_pad+0x14c>)
   17f04:	4293      	cmp	r3, r2
   17f06:	d807      	bhi.n	17f18 <_sercom_get_default_pad+0x2c>
   17f08:	2284      	movs	r2, #132	; 0x84
   17f0a:	05d2      	lsls	r2, r2, #23
   17f0c:	4293      	cmp	r3, r2
   17f0e:	d00f      	beq.n	17f30 <_sercom_get_default_pad+0x44>
   17f10:	4a4a      	ldr	r2, [pc, #296]	; (1803c <_sercom_get_default_pad+0x150>)
   17f12:	4293      	cmp	r3, r2
   17f14:	d021      	beq.n	17f5a <_sercom_get_default_pad+0x6e>
   17f16:	e089      	b.n	1802c <_sercom_get_default_pad+0x140>
   17f18:	4a49      	ldr	r2, [pc, #292]	; (18040 <_sercom_get_default_pad+0x154>)
   17f1a:	4293      	cmp	r3, r2
   17f1c:	d100      	bne.n	17f20 <_sercom_get_default_pad+0x34>
   17f1e:	e05b      	b.n	17fd8 <_sercom_get_default_pad+0xec>
   17f20:	4a48      	ldr	r2, [pc, #288]	; (18044 <_sercom_get_default_pad+0x158>)
   17f22:	4293      	cmp	r3, r2
   17f24:	d100      	bne.n	17f28 <_sercom_get_default_pad+0x3c>
   17f26:	e06c      	b.n	18002 <_sercom_get_default_pad+0x116>
   17f28:	4a47      	ldr	r2, [pc, #284]	; (18048 <_sercom_get_default_pad+0x15c>)
   17f2a:	4293      	cmp	r3, r2
   17f2c:	d03f      	beq.n	17fae <_sercom_get_default_pad+0xc2>
   17f2e:	e07d      	b.n	1802c <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   17f30:	1cfb      	adds	r3, r7, #3
   17f32:	781b      	ldrb	r3, [r3, #0]
   17f34:	2b01      	cmp	r3, #1
   17f36:	d00a      	beq.n	17f4e <_sercom_get_default_pad+0x62>
   17f38:	dc02      	bgt.n	17f40 <_sercom_get_default_pad+0x54>
   17f3a:	2b00      	cmp	r3, #0
   17f3c:	d005      	beq.n	17f4a <_sercom_get_default_pad+0x5e>
   17f3e:	e075      	b.n	1802c <_sercom_get_default_pad+0x140>
   17f40:	2b02      	cmp	r3, #2
   17f42:	d006      	beq.n	17f52 <_sercom_get_default_pad+0x66>
   17f44:	2b03      	cmp	r3, #3
   17f46:	d006      	beq.n	17f56 <_sercom_get_default_pad+0x6a>
   17f48:	e070      	b.n	1802c <_sercom_get_default_pad+0x140>
   17f4a:	4b40      	ldr	r3, [pc, #256]	; (1804c <_sercom_get_default_pad+0x160>)
   17f4c:	e06f      	b.n	1802e <_sercom_get_default_pad+0x142>
   17f4e:	4b40      	ldr	r3, [pc, #256]	; (18050 <_sercom_get_default_pad+0x164>)
   17f50:	e06d      	b.n	1802e <_sercom_get_default_pad+0x142>
   17f52:	4b40      	ldr	r3, [pc, #256]	; (18054 <_sercom_get_default_pad+0x168>)
   17f54:	e06b      	b.n	1802e <_sercom_get_default_pad+0x142>
   17f56:	4b40      	ldr	r3, [pc, #256]	; (18058 <_sercom_get_default_pad+0x16c>)
   17f58:	e069      	b.n	1802e <_sercom_get_default_pad+0x142>
   17f5a:	1cfb      	adds	r3, r7, #3
   17f5c:	781b      	ldrb	r3, [r3, #0]
   17f5e:	2b01      	cmp	r3, #1
   17f60:	d00a      	beq.n	17f78 <_sercom_get_default_pad+0x8c>
   17f62:	dc02      	bgt.n	17f6a <_sercom_get_default_pad+0x7e>
   17f64:	2b00      	cmp	r3, #0
   17f66:	d005      	beq.n	17f74 <_sercom_get_default_pad+0x88>
   17f68:	e060      	b.n	1802c <_sercom_get_default_pad+0x140>
   17f6a:	2b02      	cmp	r3, #2
   17f6c:	d006      	beq.n	17f7c <_sercom_get_default_pad+0x90>
   17f6e:	2b03      	cmp	r3, #3
   17f70:	d006      	beq.n	17f80 <_sercom_get_default_pad+0x94>
   17f72:	e05b      	b.n	1802c <_sercom_get_default_pad+0x140>
   17f74:	2303      	movs	r3, #3
   17f76:	e05a      	b.n	1802e <_sercom_get_default_pad+0x142>
   17f78:	4b38      	ldr	r3, [pc, #224]	; (1805c <_sercom_get_default_pad+0x170>)
   17f7a:	e058      	b.n	1802e <_sercom_get_default_pad+0x142>
   17f7c:	4b38      	ldr	r3, [pc, #224]	; (18060 <_sercom_get_default_pad+0x174>)
   17f7e:	e056      	b.n	1802e <_sercom_get_default_pad+0x142>
   17f80:	4b38      	ldr	r3, [pc, #224]	; (18064 <_sercom_get_default_pad+0x178>)
   17f82:	e054      	b.n	1802e <_sercom_get_default_pad+0x142>
   17f84:	1cfb      	adds	r3, r7, #3
   17f86:	781b      	ldrb	r3, [r3, #0]
   17f88:	2b01      	cmp	r3, #1
   17f8a:	d00a      	beq.n	17fa2 <_sercom_get_default_pad+0xb6>
   17f8c:	dc02      	bgt.n	17f94 <_sercom_get_default_pad+0xa8>
   17f8e:	2b00      	cmp	r3, #0
   17f90:	d005      	beq.n	17f9e <_sercom_get_default_pad+0xb2>
   17f92:	e04b      	b.n	1802c <_sercom_get_default_pad+0x140>
   17f94:	2b02      	cmp	r3, #2
   17f96:	d006      	beq.n	17fa6 <_sercom_get_default_pad+0xba>
   17f98:	2b03      	cmp	r3, #3
   17f9a:	d006      	beq.n	17faa <_sercom_get_default_pad+0xbe>
   17f9c:	e046      	b.n	1802c <_sercom_get_default_pad+0x140>
   17f9e:	4b32      	ldr	r3, [pc, #200]	; (18068 <_sercom_get_default_pad+0x17c>)
   17fa0:	e045      	b.n	1802e <_sercom_get_default_pad+0x142>
   17fa2:	4b32      	ldr	r3, [pc, #200]	; (1806c <_sercom_get_default_pad+0x180>)
   17fa4:	e043      	b.n	1802e <_sercom_get_default_pad+0x142>
   17fa6:	4b32      	ldr	r3, [pc, #200]	; (18070 <_sercom_get_default_pad+0x184>)
   17fa8:	e041      	b.n	1802e <_sercom_get_default_pad+0x142>
   17faa:	4b32      	ldr	r3, [pc, #200]	; (18074 <_sercom_get_default_pad+0x188>)
   17fac:	e03f      	b.n	1802e <_sercom_get_default_pad+0x142>
   17fae:	1cfb      	adds	r3, r7, #3
   17fb0:	781b      	ldrb	r3, [r3, #0]
   17fb2:	2b01      	cmp	r3, #1
   17fb4:	d00a      	beq.n	17fcc <_sercom_get_default_pad+0xe0>
   17fb6:	dc02      	bgt.n	17fbe <_sercom_get_default_pad+0xd2>
   17fb8:	2b00      	cmp	r3, #0
   17fba:	d005      	beq.n	17fc8 <_sercom_get_default_pad+0xdc>
   17fbc:	e036      	b.n	1802c <_sercom_get_default_pad+0x140>
   17fbe:	2b02      	cmp	r3, #2
   17fc0:	d006      	beq.n	17fd0 <_sercom_get_default_pad+0xe4>
   17fc2:	2b03      	cmp	r3, #3
   17fc4:	d006      	beq.n	17fd4 <_sercom_get_default_pad+0xe8>
   17fc6:	e031      	b.n	1802c <_sercom_get_default_pad+0x140>
   17fc8:	4b2b      	ldr	r3, [pc, #172]	; (18078 <_sercom_get_default_pad+0x18c>)
   17fca:	e030      	b.n	1802e <_sercom_get_default_pad+0x142>
   17fcc:	4b2b      	ldr	r3, [pc, #172]	; (1807c <_sercom_get_default_pad+0x190>)
   17fce:	e02e      	b.n	1802e <_sercom_get_default_pad+0x142>
   17fd0:	4b2b      	ldr	r3, [pc, #172]	; (18080 <_sercom_get_default_pad+0x194>)
   17fd2:	e02c      	b.n	1802e <_sercom_get_default_pad+0x142>
   17fd4:	4b2b      	ldr	r3, [pc, #172]	; (18084 <_sercom_get_default_pad+0x198>)
   17fd6:	e02a      	b.n	1802e <_sercom_get_default_pad+0x142>
   17fd8:	1cfb      	adds	r3, r7, #3
   17fda:	781b      	ldrb	r3, [r3, #0]
   17fdc:	2b01      	cmp	r3, #1
   17fde:	d00a      	beq.n	17ff6 <_sercom_get_default_pad+0x10a>
   17fe0:	dc02      	bgt.n	17fe8 <_sercom_get_default_pad+0xfc>
   17fe2:	2b00      	cmp	r3, #0
   17fe4:	d005      	beq.n	17ff2 <_sercom_get_default_pad+0x106>
   17fe6:	e021      	b.n	1802c <_sercom_get_default_pad+0x140>
   17fe8:	2b02      	cmp	r3, #2
   17fea:	d006      	beq.n	17ffa <_sercom_get_default_pad+0x10e>
   17fec:	2b03      	cmp	r3, #3
   17fee:	d006      	beq.n	17ffe <_sercom_get_default_pad+0x112>
   17ff0:	e01c      	b.n	1802c <_sercom_get_default_pad+0x140>
   17ff2:	4b25      	ldr	r3, [pc, #148]	; (18088 <_sercom_get_default_pad+0x19c>)
   17ff4:	e01b      	b.n	1802e <_sercom_get_default_pad+0x142>
   17ff6:	4b25      	ldr	r3, [pc, #148]	; (1808c <_sercom_get_default_pad+0x1a0>)
   17ff8:	e019      	b.n	1802e <_sercom_get_default_pad+0x142>
   17ffa:	4b25      	ldr	r3, [pc, #148]	; (18090 <_sercom_get_default_pad+0x1a4>)
   17ffc:	e017      	b.n	1802e <_sercom_get_default_pad+0x142>
   17ffe:	4b25      	ldr	r3, [pc, #148]	; (18094 <_sercom_get_default_pad+0x1a8>)
   18000:	e015      	b.n	1802e <_sercom_get_default_pad+0x142>
   18002:	1cfb      	adds	r3, r7, #3
   18004:	781b      	ldrb	r3, [r3, #0]
   18006:	2b01      	cmp	r3, #1
   18008:	d00a      	beq.n	18020 <_sercom_get_default_pad+0x134>
   1800a:	dc02      	bgt.n	18012 <_sercom_get_default_pad+0x126>
   1800c:	2b00      	cmp	r3, #0
   1800e:	d005      	beq.n	1801c <_sercom_get_default_pad+0x130>
   18010:	e00c      	b.n	1802c <_sercom_get_default_pad+0x140>
   18012:	2b02      	cmp	r3, #2
   18014:	d006      	beq.n	18024 <_sercom_get_default_pad+0x138>
   18016:	2b03      	cmp	r3, #3
   18018:	d006      	beq.n	18028 <_sercom_get_default_pad+0x13c>
   1801a:	e007      	b.n	1802c <_sercom_get_default_pad+0x140>
   1801c:	4b1e      	ldr	r3, [pc, #120]	; (18098 <_sercom_get_default_pad+0x1ac>)
   1801e:	e006      	b.n	1802e <_sercom_get_default_pad+0x142>
   18020:	4b1e      	ldr	r3, [pc, #120]	; (1809c <_sercom_get_default_pad+0x1b0>)
   18022:	e004      	b.n	1802e <_sercom_get_default_pad+0x142>
   18024:	4b1e      	ldr	r3, [pc, #120]	; (180a0 <_sercom_get_default_pad+0x1b4>)
   18026:	e002      	b.n	1802e <_sercom_get_default_pad+0x142>
   18028:	4b1e      	ldr	r3, [pc, #120]	; (180a4 <_sercom_get_default_pad+0x1b8>)
   1802a:	e000      	b.n	1802e <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
   1802c:	2300      	movs	r3, #0
}
   1802e:	0018      	movs	r0, r3
   18030:	46bd      	mov	sp, r7
   18032:	b002      	add	sp, #8
   18034:	bd80      	pop	{r7, pc}
   18036:	46c0      	nop			; (mov r8, r8)
   18038:	42000800 	.word	0x42000800
   1803c:	42000400 	.word	0x42000400
   18040:	42001000 	.word	0x42001000
   18044:	43000400 	.word	0x43000400
   18048:	42000c00 	.word	0x42000c00
   1804c:	00040003 	.word	0x00040003
   18050:	00050003 	.word	0x00050003
   18054:	00060003 	.word	0x00060003
   18058:	00070003 	.word	0x00070003
   1805c:	00010003 	.word	0x00010003
   18060:	001e0003 	.word	0x001e0003
   18064:	001f0003 	.word	0x001f0003
   18068:	00080003 	.word	0x00080003
   1806c:	00090003 	.word	0x00090003
   18070:	000a0003 	.word	0x000a0003
   18074:	000b0003 	.word	0x000b0003
   18078:	00100003 	.word	0x00100003
   1807c:	00110003 	.word	0x00110003
   18080:	00120003 	.word	0x00120003
   18084:	00130003 	.word	0x00130003
   18088:	000c0003 	.word	0x000c0003
   1808c:	000d0003 	.word	0x000d0003
   18090:	000e0003 	.word	0x000e0003
   18094:	000f0003 	.word	0x000f0003
   18098:	00160003 	.word	0x00160003
   1809c:	00170003 	.word	0x00170003
   180a0:	00180003 	.word	0x00180003
   180a4:	00190003 	.word	0x00190003

000180a8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   180a8:	b590      	push	{r4, r7, lr}
   180aa:	b08b      	sub	sp, #44	; 0x2c
   180ac:	af00      	add	r7, sp, #0
   180ae:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   180b0:	230c      	movs	r3, #12
   180b2:	18fb      	adds	r3, r7, r3
   180b4:	4a0f      	ldr	r2, [pc, #60]	; (180f4 <_sercom_get_sercom_inst_index+0x4c>)
   180b6:	ca13      	ldmia	r2!, {r0, r1, r4}
   180b8:	c313      	stmia	r3!, {r0, r1, r4}
   180ba:	ca13      	ldmia	r2!, {r0, r1, r4}
   180bc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   180be:	2300      	movs	r3, #0
   180c0:	627b      	str	r3, [r7, #36]	; 0x24
   180c2:	e00e      	b.n	180e2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   180c4:	230c      	movs	r3, #12
   180c6:	18fb      	adds	r3, r7, r3
   180c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   180ca:	0092      	lsls	r2, r2, #2
   180cc:	58d3      	ldr	r3, [r2, r3]
   180ce:	001a      	movs	r2, r3
   180d0:	687b      	ldr	r3, [r7, #4]
   180d2:	429a      	cmp	r2, r3
   180d4:	d102      	bne.n	180dc <_sercom_get_sercom_inst_index+0x34>
			return i;
   180d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   180d8:	b2db      	uxtb	r3, r3
   180da:	e006      	b.n	180ea <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   180dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   180de:	3301      	adds	r3, #1
   180e0:	627b      	str	r3, [r7, #36]	; 0x24
   180e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   180e4:	2b05      	cmp	r3, #5
   180e6:	d9ed      	bls.n	180c4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   180e8:	2300      	movs	r3, #0
}
   180ea:	0018      	movs	r0, r3
   180ec:	46bd      	mov	sp, r7
   180ee:	b00b      	add	sp, #44	; 0x2c
   180f0:	bd90      	pop	{r4, r7, pc}
   180f2:	46c0      	nop			; (mov r8, r8)
   180f4:	00028ae8 	.word	0x00028ae8

000180f8 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   180f8:	b580      	push	{r7, lr}
   180fa:	b082      	sub	sp, #8
   180fc:	af00      	add	r7, sp, #0
   180fe:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   18100:	687b      	ldr	r3, [r7, #4]
   18102:	2b00      	cmp	r3, #0
   18104:	d00c      	beq.n	18120 <delay_cycles+0x28>
		SysTick->LOAD = n;
   18106:	4b08      	ldr	r3, [pc, #32]	; (18128 <delay_cycles+0x30>)
   18108:	687a      	ldr	r2, [r7, #4]
   1810a:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   1810c:	4b06      	ldr	r3, [pc, #24]	; (18128 <delay_cycles+0x30>)
   1810e:	2200      	movs	r2, #0
   18110:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   18112:	46c0      	nop			; (mov r8, r8)
   18114:	4b04      	ldr	r3, [pc, #16]	; (18128 <delay_cycles+0x30>)
   18116:	681a      	ldr	r2, [r3, #0]
   18118:	2380      	movs	r3, #128	; 0x80
   1811a:	025b      	lsls	r3, r3, #9
   1811c:	4013      	ands	r3, r2
   1811e:	d0f9      	beq.n	18114 <delay_cycles+0x1c>
		};
	}
}
   18120:	46c0      	nop			; (mov r8, r8)
   18122:	46bd      	mov	sp, r7
   18124:	b002      	add	sp, #8
   18126:	bd80      	pop	{r7, pc}
   18128:	e000e010 	.word	0xe000e010

0001812c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1812c:	b580      	push	{r7, lr}
   1812e:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   18130:	2000      	movs	r0, #0
   18132:	4b0f      	ldr	r3, [pc, #60]	; (18170 <delay_init+0x44>)
   18134:	4798      	blx	r3
   18136:	0002      	movs	r2, r0
   18138:	4b0e      	ldr	r3, [pc, #56]	; (18174 <delay_init+0x48>)
   1813a:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1813c:	4b0d      	ldr	r3, [pc, #52]	; (18174 <delay_init+0x48>)
   1813e:	6818      	ldr	r0, [r3, #0]
   18140:	4b0d      	ldr	r3, [pc, #52]	; (18178 <delay_init+0x4c>)
   18142:	22fa      	movs	r2, #250	; 0xfa
   18144:	0091      	lsls	r1, r2, #2
   18146:	4798      	blx	r3
   18148:	0003      	movs	r3, r0
   1814a:	001a      	movs	r2, r3
   1814c:	4b09      	ldr	r3, [pc, #36]	; (18174 <delay_init+0x48>)
   1814e:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   18150:	4b08      	ldr	r3, [pc, #32]	; (18174 <delay_init+0x48>)
   18152:	6818      	ldr	r0, [r3, #0]
   18154:	4b08      	ldr	r3, [pc, #32]	; (18178 <delay_init+0x4c>)
   18156:	22fa      	movs	r2, #250	; 0xfa
   18158:	0091      	lsls	r1, r2, #2
   1815a:	4798      	blx	r3
   1815c:	0003      	movs	r3, r0
   1815e:	001a      	movs	r2, r3
   18160:	4b06      	ldr	r3, [pc, #24]	; (1817c <delay_init+0x50>)
   18162:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   18164:	4b06      	ldr	r3, [pc, #24]	; (18180 <delay_init+0x54>)
   18166:	2205      	movs	r2, #5
   18168:	601a      	str	r2, [r3, #0]
}
   1816a:	46c0      	nop			; (mov r8, r8)
   1816c:	46bd      	mov	sp, r7
   1816e:	bd80      	pop	{r7, pc}
   18170:	00018b31 	.word	0x00018b31
   18174:	200000e0 	.word	0x200000e0
   18178:	00020bbd 	.word	0x00020bbd
   1817c:	200000e4 	.word	0x200000e4
   18180:	e000e010 	.word	0xe000e010

00018184 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
   18184:	b580      	push	{r7, lr}
   18186:	b082      	sub	sp, #8
   18188:	af00      	add	r7, sp, #0
   1818a:	6078      	str	r0, [r7, #4]
	while (n--) {
   1818c:	e004      	b.n	18198 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
   1818e:	4b07      	ldr	r3, [pc, #28]	; (181ac <delay_cycles_us+0x28>)
   18190:	681b      	ldr	r3, [r3, #0]
   18192:	0018      	movs	r0, r3
   18194:	4b06      	ldr	r3, [pc, #24]	; (181b0 <delay_cycles_us+0x2c>)
   18196:	4798      	blx	r3
	while (n--) {
   18198:	687b      	ldr	r3, [r7, #4]
   1819a:	1e5a      	subs	r2, r3, #1
   1819c:	607a      	str	r2, [r7, #4]
   1819e:	2b00      	cmp	r3, #0
   181a0:	d1f5      	bne.n	1818e <delay_cycles_us+0xa>
	}
}
   181a2:	46c0      	nop			; (mov r8, r8)
   181a4:	46bd      	mov	sp, r7
   181a6:	b002      	add	sp, #8
   181a8:	bd80      	pop	{r7, pc}
   181aa:	46c0      	nop			; (mov r8, r8)
   181ac:	200000e4 	.word	0x200000e4
   181b0:	000180f9 	.word	0x000180f9

000181b4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   181b4:	b580      	push	{r7, lr}
   181b6:	b082      	sub	sp, #8
   181b8:	af00      	add	r7, sp, #0
   181ba:	6078      	str	r0, [r7, #4]
	while (n--) {
   181bc:	e004      	b.n	181c8 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   181be:	4b07      	ldr	r3, [pc, #28]	; (181dc <delay_cycles_ms+0x28>)
   181c0:	681b      	ldr	r3, [r3, #0]
   181c2:	0018      	movs	r0, r3
   181c4:	4b06      	ldr	r3, [pc, #24]	; (181e0 <delay_cycles_ms+0x2c>)
   181c6:	4798      	blx	r3
	while (n--) {
   181c8:	687b      	ldr	r3, [r7, #4]
   181ca:	1e5a      	subs	r2, r3, #1
   181cc:	607a      	str	r2, [r7, #4]
   181ce:	2b00      	cmp	r3, #0
   181d0:	d1f5      	bne.n	181be <delay_cycles_ms+0xa>
	}
}
   181d2:	46c0      	nop			; (mov r8, r8)
   181d4:	46bd      	mov	sp, r7
   181d6:	b002      	add	sp, #8
   181d8:	bd80      	pop	{r7, pc}
   181da:	46c0      	nop			; (mov r8, r8)
   181dc:	200000e0 	.word	0x200000e0
   181e0:	000180f9 	.word	0x000180f9

000181e4 <system_pinmux_get_config_defaults>:
{
   181e4:	b580      	push	{r7, lr}
   181e6:	b082      	sub	sp, #8
   181e8:	af00      	add	r7, sp, #0
   181ea:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   181ec:	687b      	ldr	r3, [r7, #4]
   181ee:	2280      	movs	r2, #128	; 0x80
   181f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   181f2:	687b      	ldr	r3, [r7, #4]
   181f4:	2200      	movs	r2, #0
   181f6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   181f8:	687b      	ldr	r3, [r7, #4]
   181fa:	2201      	movs	r2, #1
   181fc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   181fe:	687b      	ldr	r3, [r7, #4]
   18200:	2200      	movs	r2, #0
   18202:	70da      	strb	r2, [r3, #3]
}
   18204:	46c0      	nop			; (mov r8, r8)
   18206:	46bd      	mov	sp, r7
   18208:	b002      	add	sp, #8
   1820a:	bd80      	pop	{r7, pc}

0001820c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1820c:	b580      	push	{r7, lr}
   1820e:	b084      	sub	sp, #16
   18210:	af00      	add	r7, sp, #0
   18212:	0002      	movs	r2, r0
   18214:	6039      	str	r1, [r7, #0]
   18216:	1dfb      	adds	r3, r7, #7
   18218:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1821a:	230c      	movs	r3, #12
   1821c:	18fb      	adds	r3, r7, r3
   1821e:	0018      	movs	r0, r3
   18220:	4b10      	ldr	r3, [pc, #64]	; (18264 <port_pin_set_config+0x58>)
   18222:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   18224:	230c      	movs	r3, #12
   18226:	18fb      	adds	r3, r7, r3
   18228:	2280      	movs	r2, #128	; 0x80
   1822a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1822c:	683b      	ldr	r3, [r7, #0]
   1822e:	781a      	ldrb	r2, [r3, #0]
   18230:	230c      	movs	r3, #12
   18232:	18fb      	adds	r3, r7, r3
   18234:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   18236:	683b      	ldr	r3, [r7, #0]
   18238:	785a      	ldrb	r2, [r3, #1]
   1823a:	230c      	movs	r3, #12
   1823c:	18fb      	adds	r3, r7, r3
   1823e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   18240:	683b      	ldr	r3, [r7, #0]
   18242:	789a      	ldrb	r2, [r3, #2]
   18244:	230c      	movs	r3, #12
   18246:	18fb      	adds	r3, r7, r3
   18248:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1824a:	230c      	movs	r3, #12
   1824c:	18fa      	adds	r2, r7, r3
   1824e:	1dfb      	adds	r3, r7, #7
   18250:	781b      	ldrb	r3, [r3, #0]
   18252:	0011      	movs	r1, r2
   18254:	0018      	movs	r0, r3
   18256:	4b04      	ldr	r3, [pc, #16]	; (18268 <port_pin_set_config+0x5c>)
   18258:	4798      	blx	r3
}
   1825a:	46c0      	nop			; (mov r8, r8)
   1825c:	46bd      	mov	sp, r7
   1825e:	b004      	add	sp, #16
   18260:	bd80      	pop	{r7, pc}
   18262:	46c0      	nop			; (mov r8, r8)
   18264:	000181e5 	.word	0x000181e5
   18268:	00018ea5 	.word	0x00018ea5

0001826c <system_gclk_gen_get_config_defaults>:
{
   1826c:	b580      	push	{r7, lr}
   1826e:	b082      	sub	sp, #8
   18270:	af00      	add	r7, sp, #0
   18272:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   18274:	687b      	ldr	r3, [r7, #4]
   18276:	2201      	movs	r2, #1
   18278:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1827a:	687b      	ldr	r3, [r7, #4]
   1827c:	2200      	movs	r2, #0
   1827e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
   18280:	687b      	ldr	r3, [r7, #4]
   18282:	2206      	movs	r2, #6
   18284:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   18286:	687b      	ldr	r3, [r7, #4]
   18288:	2200      	movs	r2, #0
   1828a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   1828c:	687b      	ldr	r3, [r7, #4]
   1828e:	2200      	movs	r2, #0
   18290:	725a      	strb	r2, [r3, #9]
}
   18292:	46c0      	nop			; (mov r8, r8)
   18294:	46bd      	mov	sp, r7
   18296:	b002      	add	sp, #8
   18298:	bd80      	pop	{r7, pc}

0001829a <system_main_clock_set_failure_detect>:
{
   1829a:	b580      	push	{r7, lr}
   1829c:	b082      	sub	sp, #8
   1829e:	af00      	add	r7, sp, #0
   182a0:	0002      	movs	r2, r0
   182a2:	1dfb      	adds	r3, r7, #7
   182a4:	701a      	strb	r2, [r3, #0]
}
   182a6:	46c0      	nop			; (mov r8, r8)
   182a8:	46bd      	mov	sp, r7
   182aa:	b002      	add	sp, #8
   182ac:	bd80      	pop	{r7, pc}
	...

000182b0 <system_cpu_clock_set_divider>:
{
   182b0:	b580      	push	{r7, lr}
   182b2:	b082      	sub	sp, #8
   182b4:	af00      	add	r7, sp, #0
   182b6:	0002      	movs	r2, r0
   182b8:	1dfb      	adds	r3, r7, #7
   182ba:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
   182bc:	4a05      	ldr	r2, [pc, #20]	; (182d4 <system_cpu_clock_set_divider+0x24>)
   182be:	1dfb      	adds	r3, r7, #7
   182c0:	781b      	ldrb	r3, [r3, #0]
   182c2:	2101      	movs	r1, #1
   182c4:	4099      	lsls	r1, r3
   182c6:	000b      	movs	r3, r1
   182c8:	b2db      	uxtb	r3, r3
   182ca:	7113      	strb	r3, [r2, #4]
}
   182cc:	46c0      	nop			; (mov r8, r8)
   182ce:	46bd      	mov	sp, r7
   182d0:	b002      	add	sp, #8
   182d2:	bd80      	pop	{r7, pc}
   182d4:	40000400 	.word	0x40000400

000182d8 <system_low_power_clock_set_divider>:
{
   182d8:	b580      	push	{r7, lr}
   182da:	b082      	sub	sp, #8
   182dc:	af00      	add	r7, sp, #0
   182de:	0002      	movs	r2, r0
   182e0:	1dfb      	adds	r3, r7, #7
   182e2:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
   182e4:	4a05      	ldr	r2, [pc, #20]	; (182fc <system_low_power_clock_set_divider+0x24>)
   182e6:	1dfb      	adds	r3, r7, #7
   182e8:	781b      	ldrb	r3, [r3, #0]
   182ea:	2101      	movs	r1, #1
   182ec:	4099      	lsls	r1, r3
   182ee:	000b      	movs	r3, r1
   182f0:	b2db      	uxtb	r3, r3
   182f2:	7153      	strb	r3, [r2, #5]
}
   182f4:	46c0      	nop			; (mov r8, r8)
   182f6:	46bd      	mov	sp, r7
   182f8:	b002      	add	sp, #8
   182fa:	bd80      	pop	{r7, pc}
   182fc:	40000400 	.word	0x40000400

00018300 <system_backup_clock_set_divider>:
{
   18300:	b580      	push	{r7, lr}
   18302:	b082      	sub	sp, #8
   18304:	af00      	add	r7, sp, #0
   18306:	0002      	movs	r2, r0
   18308:	1dfb      	adds	r3, r7, #7
   1830a:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
   1830c:	4a05      	ldr	r2, [pc, #20]	; (18324 <system_backup_clock_set_divider+0x24>)
   1830e:	1dfb      	adds	r3, r7, #7
   18310:	781b      	ldrb	r3, [r3, #0]
   18312:	2101      	movs	r1, #1
   18314:	4099      	lsls	r1, r3
   18316:	000b      	movs	r3, r1
   18318:	b2db      	uxtb	r3, r3
   1831a:	7193      	strb	r3, [r2, #6]
}
   1831c:	46c0      	nop			; (mov r8, r8)
   1831e:	46bd      	mov	sp, r7
   18320:	b002      	add	sp, #8
   18322:	bd80      	pop	{r7, pc}
   18324:	40000400 	.word	0x40000400

00018328 <system_cpu_clock_get_hz>:
{
   18328:	b580      	push	{r7, lr}
   1832a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
   1832c:	2000      	movs	r0, #0
   1832e:	4b07      	ldr	r3, [pc, #28]	; (1834c <system_cpu_clock_get_hz+0x24>)
   18330:	4798      	blx	r3
   18332:	0002      	movs	r2, r0
   18334:	4b06      	ldr	r3, [pc, #24]	; (18350 <system_cpu_clock_get_hz+0x28>)
   18336:	791b      	ldrb	r3, [r3, #4]
   18338:	b2db      	uxtb	r3, r3
   1833a:	0019      	movs	r1, r3
   1833c:	4b05      	ldr	r3, [pc, #20]	; (18354 <system_cpu_clock_get_hz+0x2c>)
   1833e:	0010      	movs	r0, r2
   18340:	4798      	blx	r3
   18342:	0003      	movs	r3, r0
}
   18344:	0018      	movs	r0, r3
   18346:	46bd      	mov	sp, r7
   18348:	bd80      	pop	{r7, pc}
   1834a:	46c0      	nop			; (mov r8, r8)
   1834c:	00018b31 	.word	0x00018b31
   18350:	40000400 	.word	0x40000400
   18354:	00020bbd 	.word	0x00020bbd

00018358 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   18358:	b580      	push	{r7, lr}
   1835a:	b082      	sub	sp, #8
   1835c:	af00      	add	r7, sp, #0
   1835e:	0002      	movs	r2, r0
   18360:	1dfb      	adds	r3, r7, #7
   18362:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   18364:	4a08      	ldr	r2, [pc, #32]	; (18388 <system_flash_set_waitstates+0x30>)
   18366:	1dfb      	adds	r3, r7, #7
   18368:	781b      	ldrb	r3, [r3, #0]
   1836a:	210f      	movs	r1, #15
   1836c:	400b      	ands	r3, r1
   1836e:	b2d9      	uxtb	r1, r3
   18370:	6853      	ldr	r3, [r2, #4]
   18372:	200f      	movs	r0, #15
   18374:	4001      	ands	r1, r0
   18376:	0049      	lsls	r1, r1, #1
   18378:	201e      	movs	r0, #30
   1837a:	4383      	bics	r3, r0
   1837c:	430b      	orrs	r3, r1
   1837e:	6053      	str	r3, [r2, #4]
}
   18380:	46c0      	nop			; (mov r8, r8)
   18382:	46bd      	mov	sp, r7
   18384:	b002      	add	sp, #8
   18386:	bd80      	pop	{r7, pc}
   18388:	41004000 	.word	0x41004000

0001838c <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
   1838c:	b580      	push	{r7, lr}
   1838e:	b082      	sub	sp, #8
   18390:	af00      	add	r7, sp, #0
   18392:	0002      	movs	r2, r0
   18394:	1dfb      	adds	r3, r7, #7
   18396:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
   18398:	2380      	movs	r3, #128	; 0x80
   1839a:	05db      	lsls	r3, r3, #23
   1839c:	789b      	ldrb	r3, [r3, #2]
   1839e:	b2db      	uxtb	r3, r3
   183a0:	1dfa      	adds	r2, r7, #7
   183a2:	7812      	ldrb	r2, [r2, #0]
   183a4:	429a      	cmp	r2, r3
   183a6:	d101      	bne.n	183ac <system_switch_performance_level+0x20>
		return STATUS_OK;
   183a8:	2300      	movs	r3, #0
   183aa:	e019      	b.n	183e0 <system_switch_performance_level+0x54>
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
   183ac:	2380      	movs	r3, #128	; 0x80
   183ae:	05db      	lsls	r3, r3, #23
   183b0:	789b      	ldrb	r3, [r3, #2]
   183b2:	b2db      	uxtb	r3, r3
   183b4:	b25b      	sxtb	r3, r3
   183b6:	2b00      	cmp	r3, #0
   183b8:	da01      	bge.n	183be <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
   183ba:	2317      	movs	r3, #23
   183bc:	e010      	b.n	183e0 <system_switch_performance_level+0x54>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
   183be:	2380      	movs	r3, #128	; 0x80
   183c0:	05db      	lsls	r3, r3, #23
   183c2:	2201      	movs	r2, #1
   183c4:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
   183c6:	2380      	movs	r3, #128	; 0x80
   183c8:	05db      	lsls	r3, r3, #23
   183ca:	1dfa      	adds	r2, r7, #7
   183cc:	7812      	ldrb	r2, [r2, #0]
   183ce:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
   183d0:	46c0      	nop			; (mov r8, r8)
   183d2:	2380      	movs	r3, #128	; 0x80
   183d4:	05db      	lsls	r3, r3, #23
   183d6:	799b      	ldrb	r3, [r3, #6]
   183d8:	b2db      	uxtb	r3, r3
   183da:	2b00      	cmp	r3, #0
   183dc:	d0f9      	beq.n	183d2 <system_switch_performance_level+0x46>
		;
	}
	return STATUS_OK;
   183de:	2300      	movs	r3, #0
}
   183e0:	0018      	movs	r0, r3
   183e2:	46bd      	mov	sp, r7
   183e4:	b002      	add	sp, #8
   183e6:	bd80      	pop	{r7, pc}

000183e8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   183e8:	b580      	push	{r7, lr}
   183ea:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   183ec:	46c0      	nop			; (mov r8, r8)
   183ee:	4b04      	ldr	r3, [pc, #16]	; (18400 <_system_dfll_wait_for_sync+0x18>)
   183f0:	68da      	ldr	r2, [r3, #12]
   183f2:	2380      	movs	r3, #128	; 0x80
   183f4:	005b      	lsls	r3, r3, #1
   183f6:	4013      	ands	r3, r2
   183f8:	d0f9      	beq.n	183ee <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   183fa:	46c0      	nop			; (mov r8, r8)
   183fc:	46bd      	mov	sp, r7
   183fe:	bd80      	pop	{r7, pc}
   18400:	40000c00 	.word	0x40000c00

00018404 <_system_clock_source_dfll_set_config_errata_9905>:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   18404:	b580      	push	{r7, lr}
   18406:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   18408:	4b0f      	ldr	r3, [pc, #60]	; (18448 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   1840a:	2202      	movs	r2, #2
   1840c:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
   1840e:	4b0f      	ldr	r3, [pc, #60]	; (1844c <_system_clock_source_dfll_set_config_errata_9905+0x48>)
   18410:	4798      	blx	r3

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   18412:	4a0d      	ldr	r2, [pc, #52]	; (18448 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   18414:	4b0e      	ldr	r3, [pc, #56]	; (18450 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
   18416:	689b      	ldr	r3, [r3, #8]
   18418:	6213      	str	r3, [r2, #32]

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   1841a:	4b0b      	ldr	r3, [pc, #44]	; (18448 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   1841c:	2202      	movs	r2, #2
   1841e:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
   18420:	4b0a      	ldr	r3, [pc, #40]	; (1844c <_system_clock_source_dfll_set_config_errata_9905+0x48>)
   18422:	4798      	blx	r3

	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   18424:	4a08      	ldr	r2, [pc, #32]	; (18448 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   18426:	4b0a      	ldr	r3, [pc, #40]	; (18450 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
   18428:	685b      	ldr	r3, [r3, #4]
   1842a:	61d3      	str	r3, [r2, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
   1842c:	4b06      	ldr	r3, [pc, #24]	; (18448 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   1842e:	2200      	movs	r2, #0
   18430:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
   18432:	4b06      	ldr	r3, [pc, #24]	; (1844c <_system_clock_source_dfll_set_config_errata_9905+0x48>)
   18434:	4798      	blx	r3
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   18436:	4a04      	ldr	r2, [pc, #16]	; (18448 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
   18438:	4b05      	ldr	r3, [pc, #20]	; (18450 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
   1843a:	681b      	ldr	r3, [r3, #0]
   1843c:	b29b      	uxth	r3, r3
   1843e:	8313      	strh	r3, [r2, #24]
}
   18440:	46c0      	nop			; (mov r8, r8)
   18442:	46bd      	mov	sp, r7
   18444:	bd80      	pop	{r7, pc}
   18446:	46c0      	nop			; (mov r8, r8)
   18448:	40000c00 	.word	0x40000c00
   1844c:	000183e9 	.word	0x000183e9
   18450:	20000e1c 	.word	0x20000e1c

00018454 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   18454:	b580      	push	{r7, lr}
   18456:	b082      	sub	sp, #8
   18458:	af00      	add	r7, sp, #0
   1845a:	0002      	movs	r2, r0
   1845c:	1dfb      	adds	r3, r7, #7
   1845e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   18460:	1dfb      	adds	r3, r7, #7
   18462:	781b      	ldrb	r3, [r3, #0]
   18464:	2b08      	cmp	r3, #8
   18466:	d841      	bhi.n	184ec <system_clock_source_get_hz+0x98>
   18468:	009a      	lsls	r2, r3, #2
   1846a:	4b23      	ldr	r3, [pc, #140]	; (184f8 <system_clock_source_get_hz+0xa4>)
   1846c:	18d3      	adds	r3, r2, r3
   1846e:	681b      	ldr	r3, [r3, #0]
   18470:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   18472:	4b22      	ldr	r3, [pc, #136]	; (184fc <system_clock_source_get_hz+0xa8>)
   18474:	691b      	ldr	r3, [r3, #16]
   18476:	e03a      	b.n	184ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
   18478:	4b21      	ldr	r3, [pc, #132]	; (18500 <system_clock_source_get_hz+0xac>)
   1847a:	7d1b      	ldrb	r3, [r3, #20]
   1847c:	071b      	lsls	r3, r3, #28
   1847e:	0f9b      	lsrs	r3, r3, #30
   18480:	b2db      	uxtb	r3, r3
   18482:	3301      	adds	r3, #1
   18484:	001a      	movs	r2, r3
   18486:	4b1f      	ldr	r3, [pc, #124]	; (18504 <system_clock_source_get_hz+0xb0>)
   18488:	4353      	muls	r3, r2
   1848a:	e030      	b.n	184ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   1848c:	2380      	movs	r3, #128	; 0x80
   1848e:	021b      	lsls	r3, r3, #8
   18490:	e02d      	b.n	184ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   18492:	2380      	movs	r3, #128	; 0x80
   18494:	021b      	lsls	r3, r3, #8
   18496:	e02a      	b.n	184ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   18498:	4b18      	ldr	r3, [pc, #96]	; (184fc <system_clock_source_get_hz+0xa8>)
   1849a:	695b      	ldr	r3, [r3, #20]
   1849c:	e027      	b.n	184ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
   1849e:	4b17      	ldr	r3, [pc, #92]	; (184fc <system_clock_source_get_hz+0xa8>)
   184a0:	681b      	ldr	r3, [r3, #0]
   184a2:	2202      	movs	r2, #2
   184a4:	4013      	ands	r3, r2
   184a6:	d101      	bne.n	184ac <system_clock_source_get_hz+0x58>
			return 0;
   184a8:	2300      	movs	r3, #0
   184aa:	e020      	b.n	184ee <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   184ac:	4b16      	ldr	r3, [pc, #88]	; (18508 <system_clock_source_get_hz+0xb4>)
   184ae:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
   184b0:	4b12      	ldr	r3, [pc, #72]	; (184fc <system_clock_source_get_hz+0xa8>)
   184b2:	681b      	ldr	r3, [r3, #0]
   184b4:	2204      	movs	r2, #4
   184b6:	4013      	ands	r3, r2
   184b8:	d009      	beq.n	184ce <system_clock_source_get_hz+0x7a>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   184ba:	2000      	movs	r0, #0
   184bc:	4b13      	ldr	r3, [pc, #76]	; (1850c <system_clock_source_get_hz+0xb8>)
   184be:	4798      	blx	r3
   184c0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   184c2:	4b0e      	ldr	r3, [pc, #56]	; (184fc <system_clock_source_get_hz+0xa8>)
   184c4:	689b      	ldr	r3, [r3, #8]
   184c6:	041b      	lsls	r3, r3, #16
   184c8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   184ca:	4353      	muls	r3, r2
   184cc:	e00f      	b.n	184ee <system_clock_source_get_hz+0x9a>
		}

		return 48000000UL;
   184ce:	4b10      	ldr	r3, [pc, #64]	; (18510 <system_clock_source_get_hz+0xbc>)
   184d0:	e00d      	b.n	184ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
   184d2:	4a0b      	ldr	r2, [pc, #44]	; (18500 <system_clock_source_get_hz+0xac>)
   184d4:	2328      	movs	r3, #40	; 0x28
   184d6:	5cd3      	ldrb	r3, [r2, r3]
   184d8:	b2db      	uxtb	r3, r3
   184da:	001a      	movs	r2, r3
   184dc:	2302      	movs	r3, #2
   184de:	4013      	ands	r3, r2
   184e0:	d101      	bne.n	184e6 <system_clock_source_get_hz+0x92>
			return 0;
   184e2:	2300      	movs	r3, #0
   184e4:	e003      	b.n	184ee <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   184e6:	4b05      	ldr	r3, [pc, #20]	; (184fc <system_clock_source_get_hz+0xa8>)
   184e8:	68db      	ldr	r3, [r3, #12]
   184ea:	e000      	b.n	184ee <system_clock_source_get_hz+0x9a>

	default:
		return 0;
   184ec:	2300      	movs	r3, #0
	}
}
   184ee:	0018      	movs	r0, r3
   184f0:	46bd      	mov	sp, r7
   184f2:	b002      	add	sp, #8
   184f4:	bd80      	pop	{r7, pc}
   184f6:	46c0      	nop			; (mov r8, r8)
   184f8:	00028b00 	.word	0x00028b00
   184fc:	20000e1c 	.word	0x20000e1c
   18500:	40000c00 	.word	0x40000c00
   18504:	003d0900 	.word	0x003d0900
   18508:	000183e9 	.word	0x000183e9
   1850c:	00018ce1 	.word	0x00018ce1
   18510:	02dc6c00 	.word	0x02dc6c00

00018514 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   18514:	b580      	push	{r7, lr}
   18516:	b084      	sub	sp, #16
   18518:	af00      	add	r7, sp, #0
   1851a:	6078      	str	r0, [r7, #4]
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
   1851c:	4b3a      	ldr	r3, [pc, #232]	; (18608 <system_clock_source_xosc32k_set_config+0xf4>)
   1851e:	695b      	ldr	r3, [r3, #20]
   18520:	60fb      	str	r3, [r7, #12]

	temp.bit.STARTUP = config->startup_time;
   18522:	687b      	ldr	r3, [r7, #4]
   18524:	785b      	ldrb	r3, [r3, #1]
   18526:	1c1a      	adds	r2, r3, #0
   18528:	2307      	movs	r3, #7
   1852a:	4013      	ands	r3, r2
   1852c:	b2da      	uxtb	r2, r3
   1852e:	230d      	movs	r3, #13
   18530:	18fb      	adds	r3, r7, r3
   18532:	2107      	movs	r1, #7
   18534:	400a      	ands	r2, r1
   18536:	0010      	movs	r0, r2
   18538:	781a      	ldrb	r2, [r3, #0]
   1853a:	2107      	movs	r1, #7
   1853c:	438a      	bics	r2, r1
   1853e:	1c11      	adds	r1, r2, #0
   18540:	1c02      	adds	r2, r0, #0
   18542:	430a      	orrs	r2, r1
   18544:	701a      	strb	r2, [r3, #0]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   18546:	687b      	ldr	r3, [r7, #4]
   18548:	781b      	ldrb	r3, [r3, #0]
   1854a:	2b00      	cmp	r3, #0
   1854c:	d106      	bne.n	1855c <system_clock_source_xosc32k_set_config+0x48>
		temp.bit.XTALEN = 1;
   1854e:	230c      	movs	r3, #12
   18550:	18fb      	adds	r3, r7, r3
   18552:	781a      	ldrb	r2, [r3, #0]
   18554:	2104      	movs	r1, #4
   18556:	430a      	orrs	r2, r1
   18558:	701a      	strb	r2, [r3, #0]
   1855a:	e005      	b.n	18568 <system_clock_source_xosc32k_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
   1855c:	230c      	movs	r3, #12
   1855e:	18fb      	adds	r3, r7, r3
   18560:	781a      	ldrb	r2, [r3, #0]
   18562:	2104      	movs	r1, #4
   18564:	438a      	bics	r2, r1
   18566:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.EN1K = config->enable_1khz_output;
   18568:	687b      	ldr	r3, [r7, #4]
   1856a:	789a      	ldrb	r2, [r3, #2]
   1856c:	230c      	movs	r3, #12
   1856e:	18fb      	adds	r3, r7, r3
   18570:	2101      	movs	r1, #1
   18572:	400a      	ands	r2, r1
   18574:	0110      	lsls	r0, r2, #4
   18576:	781a      	ldrb	r2, [r3, #0]
   18578:	2110      	movs	r1, #16
   1857a:	438a      	bics	r2, r1
   1857c:	1c11      	adds	r1, r2, #0
   1857e:	1c02      	adds	r2, r0, #0
   18580:	430a      	orrs	r2, r1
   18582:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   18584:	687b      	ldr	r3, [r7, #4]
   18586:	78da      	ldrb	r2, [r3, #3]
   18588:	230c      	movs	r3, #12
   1858a:	18fb      	adds	r3, r7, r3
   1858c:	2101      	movs	r1, #1
   1858e:	400a      	ands	r2, r1
   18590:	00d0      	lsls	r0, r2, #3
   18592:	781a      	ldrb	r2, [r3, #0]
   18594:	2108      	movs	r1, #8
   18596:	438a      	bics	r2, r1
   18598:	1c11      	adds	r1, r2, #0
   1859a:	1c02      	adds	r2, r0, #0
   1859c:	430a      	orrs	r2, r1
   1859e:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   185a0:	687b      	ldr	r3, [r7, #4]
   185a2:	7a5a      	ldrb	r2, [r3, #9]
   185a4:	230c      	movs	r3, #12
   185a6:	18fb      	adds	r3, r7, r3
   185a8:	01d0      	lsls	r0, r2, #7
   185aa:	781a      	ldrb	r2, [r3, #0]
   185ac:	217f      	movs	r1, #127	; 0x7f
   185ae:	400a      	ands	r2, r1
   185b0:	1c11      	adds	r1, r2, #0
   185b2:	1c02      	adds	r2, r0, #0
   185b4:	430a      	orrs	r2, r1
   185b6:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   185b8:	687b      	ldr	r3, [r7, #4]
   185ba:	7a1a      	ldrb	r2, [r3, #8]
   185bc:	230c      	movs	r3, #12
   185be:	18fb      	adds	r3, r7, r3
   185c0:	2101      	movs	r1, #1
   185c2:	400a      	ands	r2, r1
   185c4:	0190      	lsls	r0, r2, #6
   185c6:	781a      	ldrb	r2, [r3, #0]
   185c8:	2140      	movs	r1, #64	; 0x40
   185ca:	438a      	bics	r2, r1
   185cc:	1c11      	adds	r1, r2, #0
   185ce:	1c02      	adds	r2, r0, #0
   185d0:	430a      	orrs	r2, r1
   185d2:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   185d4:	687b      	ldr	r3, [r7, #4]
   185d6:	7a9a      	ldrb	r2, [r3, #10]
   185d8:	230d      	movs	r3, #13
   185da:	18fb      	adds	r3, r7, r3
   185dc:	2101      	movs	r1, #1
   185de:	400a      	ands	r2, r1
   185e0:	0110      	lsls	r0, r2, #4
   185e2:	781a      	ldrb	r2, [r3, #0]
   185e4:	2110      	movs	r1, #16
   185e6:	438a      	bics	r2, r1
   185e8:	1c11      	adds	r1, r2, #0
   185ea:	1c02      	adds	r2, r0, #0
   185ec:	430a      	orrs	r2, r1
   185ee:	701a      	strb	r2, [r3, #0]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   185f0:	687b      	ldr	r3, [r7, #4]
   185f2:	685a      	ldr	r2, [r3, #4]
   185f4:	4b05      	ldr	r3, [pc, #20]	; (1860c <system_clock_source_xosc32k_set_config+0xf8>)
   185f6:	615a      	str	r2, [r3, #20]

	OSC32KCTRL->XOSC32K = temp;
   185f8:	4b03      	ldr	r3, [pc, #12]	; (18608 <system_clock_source_xosc32k_set_config+0xf4>)
   185fa:	68fa      	ldr	r2, [r7, #12]
   185fc:	615a      	str	r2, [r3, #20]
}
   185fe:	46c0      	nop			; (mov r8, r8)
   18600:	46bd      	mov	sp, r7
   18602:	b004      	add	sp, #16
   18604:	bd80      	pop	{r7, pc}
   18606:	46c0      	nop			; (mov r8, r8)
   18608:	40001000 	.word	0x40001000
   1860c:	20000e1c 	.word	0x20000e1c

00018610 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   18610:	b580      	push	{r7, lr}
   18612:	b082      	sub	sp, #8
   18614:	af00      	add	r7, sp, #0
   18616:	0002      	movs	r2, r0
   18618:	1dfb      	adds	r3, r7, #7
   1861a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   1861c:	1dfb      	adds	r3, r7, #7
   1861e:	781b      	ldrb	r3, [r3, #0]
   18620:	2b08      	cmp	r3, #8
   18622:	d844      	bhi.n	186ae <system_clock_source_enable+0x9e>
   18624:	009a      	lsls	r2, r3, #2
   18626:	4b25      	ldr	r3, [pc, #148]	; (186bc <system_clock_source_enable+0xac>)
   18628:	18d3      	adds	r3, r2, r3
   1862a:	681b      	ldr	r3, [r3, #0]
   1862c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
   1862e:	4a24      	ldr	r2, [pc, #144]	; (186c0 <system_clock_source_enable+0xb0>)
   18630:	4b23      	ldr	r3, [pc, #140]	; (186c0 <system_clock_source_enable+0xb0>)
   18632:	7d1b      	ldrb	r3, [r3, #20]
   18634:	b2db      	uxtb	r3, r3
   18636:	2102      	movs	r1, #2
   18638:	430b      	orrs	r3, r1
   1863a:	b2db      	uxtb	r3, r3
   1863c:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
   1863e:	2300      	movs	r3, #0
   18640:	e038      	b.n	186b4 <system_clock_source_enable+0xa4>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
   18642:	4b20      	ldr	r3, [pc, #128]	; (186c4 <system_clock_source_enable+0xb4>)
   18644:	4a1f      	ldr	r2, [pc, #124]	; (186c4 <system_clock_source_enable+0xb4>)
   18646:	6992      	ldr	r2, [r2, #24]
   18648:	2102      	movs	r1, #2
   1864a:	430a      	orrs	r2, r1
   1864c:	619a      	str	r2, [r3, #24]
		break;
   1864e:	e030      	b.n	186b2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
   18650:	4a1b      	ldr	r2, [pc, #108]	; (186c0 <system_clock_source_enable+0xb0>)
   18652:	4b1b      	ldr	r3, [pc, #108]	; (186c0 <system_clock_source_enable+0xb0>)
   18654:	8a1b      	ldrh	r3, [r3, #16]
   18656:	b29b      	uxth	r3, r3
   18658:	2102      	movs	r1, #2
   1865a:	430b      	orrs	r3, r1
   1865c:	b29b      	uxth	r3, r3
   1865e:	8213      	strh	r3, [r2, #16]
		break;
   18660:	e027      	b.n	186b2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
   18662:	4b18      	ldr	r3, [pc, #96]	; (186c4 <system_clock_source_enable+0xb4>)
   18664:	4a17      	ldr	r2, [pc, #92]	; (186c4 <system_clock_source_enable+0xb4>)
   18666:	6952      	ldr	r2, [r2, #20]
   18668:	2102      	movs	r1, #2
   1866a:	430a      	orrs	r2, r1
   1866c:	615a      	str	r2, [r3, #20]
		break;
   1866e:	e020      	b.n	186b2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   18670:	4b15      	ldr	r3, [pc, #84]	; (186c8 <system_clock_source_enable+0xb8>)
   18672:	681b      	ldr	r3, [r3, #0]
   18674:	2202      	movs	r2, #2
   18676:	431a      	orrs	r2, r3
   18678:	4b13      	ldr	r3, [pc, #76]	; (186c8 <system_clock_source_enable+0xb8>)
   1867a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   1867c:	4b13      	ldr	r3, [pc, #76]	; (186cc <system_clock_source_enable+0xbc>)
   1867e:	4798      	blx	r3
		break;
   18680:	e017      	b.n	186b2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
   18682:	4a0f      	ldr	r2, [pc, #60]	; (186c0 <system_clock_source_enable+0xb0>)
   18684:	490e      	ldr	r1, [pc, #56]	; (186c0 <system_clock_source_enable+0xb0>)
   18686:	2328      	movs	r3, #40	; 0x28
   18688:	5ccb      	ldrb	r3, [r1, r3]
   1868a:	b2db      	uxtb	r3, r3
   1868c:	2102      	movs	r1, #2
   1868e:	430b      	orrs	r3, r1
   18690:	b2d9      	uxtb	r1, r3
   18692:	2328      	movs	r3, #40	; 0x28
   18694:	54d1      	strb	r1, [r2, r3]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
   18696:	46c0      	nop			; (mov r8, r8)
   18698:	4a09      	ldr	r2, [pc, #36]	; (186c0 <system_clock_source_enable+0xb0>)
   1869a:	2338      	movs	r3, #56	; 0x38
   1869c:	5cd3      	ldrb	r3, [r2, r3]
   1869e:	b2db      	uxtb	r3, r3
   186a0:	001a      	movs	r2, r3
   186a2:	2302      	movs	r3, #2
   186a4:	4013      	ands	r3, r2
   186a6:	d1f7      	bne.n	18698 <system_clock_source_enable+0x88>
		}
		break;
   186a8:	e003      	b.n	186b2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   186aa:	2300      	movs	r3, #0
   186ac:	e002      	b.n	186b4 <system_clock_source_enable+0xa4>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   186ae:	2317      	movs	r3, #23
   186b0:	e000      	b.n	186b4 <system_clock_source_enable+0xa4>
	}

	return STATUS_OK;
   186b2:	2300      	movs	r3, #0
}
   186b4:	0018      	movs	r0, r3
   186b6:	46bd      	mov	sp, r7
   186b8:	b002      	add	sp, #8
   186ba:	bd80      	pop	{r7, pc}
   186bc:	00028b24 	.word	0x00028b24
   186c0:	40000c00 	.word	0x40000c00
   186c4:	40001000 	.word	0x40001000
   186c8:	20000e1c 	.word	0x20000e1c
   186cc:	00018405 	.word	0x00018405

000186d0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   186d0:	b580      	push	{r7, lr}
   186d2:	b084      	sub	sp, #16
   186d4:	af00      	add	r7, sp, #0
   186d6:	0002      	movs	r2, r0
   186d8:	1dfb      	adds	r3, r7, #7
   186da:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   186dc:	2300      	movs	r3, #0
   186de:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   186e0:	1dfb      	adds	r3, r7, #7
   186e2:	781b      	ldrb	r3, [r3, #0]
   186e4:	2b08      	cmp	r3, #8
   186e6:	d84f      	bhi.n	18788 <system_clock_source_is_ready+0xb8>
   186e8:	009a      	lsls	r2, r3, #2
   186ea:	4b2a      	ldr	r3, [pc, #168]	; (18794 <system_clock_source_is_ready+0xc4>)
   186ec:	18d3      	adds	r3, r2, r3
   186ee:	681b      	ldr	r3, [r3, #0]
   186f0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
   186f2:	2310      	movs	r3, #16
   186f4:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   186f6:	4b28      	ldr	r3, [pc, #160]	; (18798 <system_clock_source_is_ready+0xc8>)
   186f8:	68db      	ldr	r3, [r3, #12]
   186fa:	68fa      	ldr	r2, [r7, #12]
   186fc:	401a      	ands	r2, r3
   186fe:	68fb      	ldr	r3, [r7, #12]
   18700:	1ad3      	subs	r3, r2, r3
   18702:	425a      	negs	r2, r3
   18704:	4153      	adcs	r3, r2
   18706:	b2db      	uxtb	r3, r3
   18708:	e03f      	b.n	1878a <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = OSC32KCTRL_STATUS_OSC32KRDY;
   1870a:	2302      	movs	r3, #2
   1870c:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   1870e:	4b23      	ldr	r3, [pc, #140]	; (1879c <system_clock_source_is_ready+0xcc>)
   18710:	68db      	ldr	r3, [r3, #12]
   18712:	68fa      	ldr	r2, [r7, #12]
   18714:	401a      	ands	r2, r3
   18716:	68fb      	ldr	r3, [r7, #12]
   18718:	1ad3      	subs	r3, r2, r3
   1871a:	425a      	negs	r2, r3
   1871c:	4153      	adcs	r3, r2
   1871e:	b2db      	uxtb	r3, r3
   18720:	e033      	b.n	1878a <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = OSCCTRL_STATUS_XOSCRDY;
   18722:	2301      	movs	r3, #1
   18724:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   18726:	4b1c      	ldr	r3, [pc, #112]	; (18798 <system_clock_source_is_ready+0xc8>)
   18728:	68db      	ldr	r3, [r3, #12]
   1872a:	68fa      	ldr	r2, [r7, #12]
   1872c:	401a      	ands	r2, r3
   1872e:	68fb      	ldr	r3, [r7, #12]
   18730:	1ad3      	subs	r3, r2, r3
   18732:	425a      	negs	r2, r3
   18734:	4153      	adcs	r3, r2
   18736:	b2db      	uxtb	r3, r3
   18738:	e027      	b.n	1878a <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
   1873a:	2301      	movs	r3, #1
   1873c:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   1873e:	4b17      	ldr	r3, [pc, #92]	; (1879c <system_clock_source_is_ready+0xcc>)
   18740:	68db      	ldr	r3, [r3, #12]
   18742:	68fa      	ldr	r2, [r7, #12]
   18744:	401a      	ands	r2, r3
   18746:	68fb      	ldr	r3, [r7, #12]
   18748:	1ad3      	subs	r3, r2, r3
   1874a:	425a      	negs	r2, r3
   1874c:	4153      	adcs	r3, r2
   1874e:	b2db      	uxtb	r3, r3
   18750:	e01b      	b.n	1878a <system_clock_source_is_ready+0xba>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (OSCCTRL_STATUS_DFLLRDY |
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
   18752:	2380      	movs	r3, #128	; 0x80
   18754:	005b      	lsls	r3, r3, #1
   18756:	60fb      	str	r3, [r7, #12]
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   18758:	4b0f      	ldr	r3, [pc, #60]	; (18798 <system_clock_source_is_ready+0xc8>)
   1875a:	68db      	ldr	r3, [r3, #12]
   1875c:	68fa      	ldr	r2, [r7, #12]
   1875e:	401a      	ands	r2, r3
   18760:	68fb      	ldr	r3, [r7, #12]
   18762:	1ad3      	subs	r3, r2, r3
   18764:	425a      	negs	r2, r3
   18766:	4153      	adcs	r3, r2
   18768:	b2db      	uxtb	r3, r3
   1876a:	e00e      	b.n	1878a <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
   1876c:	4a0a      	ldr	r2, [pc, #40]	; (18798 <system_clock_source_is_ready+0xc8>)
   1876e:	233c      	movs	r3, #60	; 0x3c
   18770:	5cd3      	ldrb	r3, [r2, r3]
   18772:	b2db      	uxtb	r3, r3
   18774:	001a      	movs	r2, r3
   18776:	2303      	movs	r3, #3
   18778:	4013      	ands	r3, r2
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
   1877a:	3b03      	subs	r3, #3
   1877c:	425a      	negs	r2, r3
   1877e:	4153      	adcs	r3, r2
   18780:	b2db      	uxtb	r3, r3
   18782:	e002      	b.n	1878a <system_clock_source_is_ready+0xba>
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   18784:	2301      	movs	r3, #1
   18786:	e000      	b.n	1878a <system_clock_source_is_ready+0xba>

	default:
		return false;
   18788:	2300      	movs	r3, #0
	}
}
   1878a:	0018      	movs	r0, r3
   1878c:	46bd      	mov	sp, r7
   1878e:	b004      	add	sp, #16
   18790:	bd80      	pop	{r7, pc}
   18792:	46c0      	nop			; (mov r8, r8)
   18794:	00028b48 	.word	0x00028b48
   18798:	40000c00 	.word	0x40000c00
   1879c:	40001000 	.word	0x40001000

000187a0 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   187a0:	b580      	push	{r7, lr}
   187a2:	b0a0      	sub	sp, #128	; 0x80
   187a4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   187a6:	4b35      	ldr	r3, [pc, #212]	; (1887c <system_clock_init+0xdc>)
   187a8:	2280      	movs	r2, #128	; 0x80
   187aa:	0052      	lsls	r2, r2, #1
   187ac:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
   187ae:	4b34      	ldr	r3, [pc, #208]	; (18880 <system_clock_init+0xe0>)
   187b0:	2203      	movs	r2, #3
   187b2:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   187b4:	2000      	movs	r0, #0
   187b6:	4b33      	ldr	r3, [pc, #204]	; (18884 <system_clock_init+0xe4>)
   187b8:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
   187ba:	2002      	movs	r0, #2
   187bc:	4b32      	ldr	r3, [pc, #200]	; (18888 <system_clock_init+0xe8>)
   187be:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
   187c0:	4a2e      	ldr	r2, [pc, #184]	; (1887c <system_clock_init+0xdc>)
   187c2:	7d13      	ldrb	r3, [r2, #20]
   187c4:	2180      	movs	r1, #128	; 0x80
   187c6:	4249      	negs	r1, r1
   187c8:	430b      	orrs	r3, r1
   187ca:	7513      	strb	r3, [r2, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
   187cc:	4a2b      	ldr	r2, [pc, #172]	; (1887c <system_clock_init+0xdc>)
   187ce:	7d13      	ldrb	r3, [r2, #20]
   187d0:	2140      	movs	r1, #64	; 0x40
   187d2:	438b      	bics	r3, r1
   187d4:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   187d6:	4b2d      	ldr	r3, [pc, #180]	; (1888c <system_clock_init+0xec>)
   187d8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   187da:	2358      	movs	r3, #88	; 0x58
   187dc:	18fb      	adds	r3, r7, r3
   187de:	0018      	movs	r0, r3
   187e0:	4b2b      	ldr	r3, [pc, #172]	; (18890 <system_clock_init+0xf0>)
   187e2:	4798      	blx	r3
   187e4:	2358      	movs	r3, #88	; 0x58
   187e6:	18fb      	adds	r3, r7, r3
   187e8:	2203      	movs	r2, #3
   187ea:	701a      	strb	r2, [r3, #0]
   187ec:	2358      	movs	r3, #88	; 0x58
   187ee:	18fb      	adds	r3, r7, r3
   187f0:	2201      	movs	r2, #1
   187f2:	605a      	str	r2, [r3, #4]
   187f4:	2358      	movs	r3, #88	; 0x58
   187f6:	18fb      	adds	r3, r7, r3
   187f8:	2201      	movs	r2, #1
   187fa:	721a      	strb	r2, [r3, #8]
   187fc:	2358      	movs	r3, #88	; 0x58
   187fe:	18fb      	adds	r3, r7, r3
   18800:	2200      	movs	r2, #0
   18802:	725a      	strb	r2, [r3, #9]
   18804:	2358      	movs	r3, #88	; 0x58
   18806:	18fb      	adds	r3, r7, r3
   18808:	0019      	movs	r1, r3
   1880a:	2002      	movs	r0, #2
   1880c:	4b21      	ldr	r3, [pc, #132]	; (18894 <system_clock_init+0xf4>)
   1880e:	4798      	blx	r3
   18810:	2002      	movs	r0, #2
   18812:	4b21      	ldr	r3, [pc, #132]	; (18898 <system_clock_init+0xf8>)
   18814:	4798      	blx	r3
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
   18816:	2000      	movs	r0, #0
   18818:	4b20      	ldr	r3, [pc, #128]	; (1889c <system_clock_init+0xfc>)
   1881a:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
   1881c:	2000      	movs	r0, #0
   1881e:	4b20      	ldr	r3, [pc, #128]	; (188a0 <system_clock_init+0x100>)
   18820:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   18822:	2000      	movs	r0, #0
   18824:	4b1f      	ldr	r3, [pc, #124]	; (188a4 <system_clock_init+0x104>)
   18826:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
   18828:	2000      	movs	r0, #0
   1882a:	4b1f      	ldr	r3, [pc, #124]	; (188a8 <system_clock_init+0x108>)
   1882c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   1882e:	1d3b      	adds	r3, r7, #4
   18830:	0018      	movs	r0, r3
   18832:	4b17      	ldr	r3, [pc, #92]	; (18890 <system_clock_init+0xf0>)
   18834:	4798      	blx	r3
   18836:	1d3b      	adds	r3, r7, #4
   18838:	2206      	movs	r2, #6
   1883a:	701a      	strb	r2, [r3, #0]
   1883c:	1d3b      	adds	r3, r7, #4
   1883e:	2201      	movs	r2, #1
   18840:	605a      	str	r2, [r3, #4]
   18842:	1d3b      	adds	r3, r7, #4
   18844:	2200      	movs	r2, #0
   18846:	721a      	strb	r2, [r3, #8]
   18848:	1d3b      	adds	r3, r7, #4
   1884a:	2200      	movs	r2, #0
   1884c:	725a      	strb	r2, [r3, #9]
   1884e:	1d3b      	adds	r3, r7, #4
   18850:	0019      	movs	r1, r3
   18852:	2000      	movs	r0, #0
   18854:	4b0f      	ldr	r3, [pc, #60]	; (18894 <system_clock_init+0xf4>)
   18856:	4798      	blx	r3
   18858:	2000      	movs	r0, #0
   1885a:	4b0f      	ldr	r3, [pc, #60]	; (18898 <system_clock_init+0xf8>)
   1885c:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
   1885e:	4b13      	ldr	r3, [pc, #76]	; (188ac <system_clock_init+0x10c>)
   18860:	4798      	blx	r3
   18862:	0003      	movs	r3, r0
   18864:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (cpu_freq <= 12000000) {
   18866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   18868:	4a11      	ldr	r2, [pc, #68]	; (188b0 <system_clock_init+0x110>)
   1886a:	4293      	cmp	r3, r2
   1886c:	d802      	bhi.n	18874 <system_clock_init+0xd4>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
   1886e:	2000      	movs	r0, #0
   18870:	4b05      	ldr	r3, [pc, #20]	; (18888 <system_clock_init+0xe8>)
   18872:	4798      	blx	r3
	}
}
   18874:	46c0      	nop			; (mov r8, r8)
   18876:	46bd      	mov	sp, r7
   18878:	b020      	add	sp, #128	; 0x80
   1887a:	bd80      	pop	{r7, pc}
   1887c:	40000c00 	.word	0x40000c00
   18880:	40001400 	.word	0x40001400
   18884:	00018359 	.word	0x00018359
   18888:	0001838d 	.word	0x0001838d
   1888c:	00018995 	.word	0x00018995
   18890:	0001826d 	.word	0x0001826d
   18894:	000189c5 	.word	0x000189c5
   18898:	00018ad5 	.word	0x00018ad5
   1889c:	00018301 	.word	0x00018301
   188a0:	000182d9 	.word	0x000182d9
   188a4:	000182b1 	.word	0x000182b1
   188a8:	0001829b 	.word	0x0001829b
   188ac:	00018329 	.word	0x00018329
   188b0:	00b71b00 	.word	0x00b71b00

000188b4 <system_apb_clock_set_mask>:
{
   188b4:	b580      	push	{r7, lr}
   188b6:	b082      	sub	sp, #8
   188b8:	af00      	add	r7, sp, #0
   188ba:	0002      	movs	r2, r0
   188bc:	6039      	str	r1, [r7, #0]
   188be:	1dfb      	adds	r3, r7, #7
   188c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   188c2:	1dfb      	adds	r3, r7, #7
   188c4:	781b      	ldrb	r3, [r3, #0]
   188c6:	2b04      	cmp	r3, #4
   188c8:	d827      	bhi.n	1891a <system_apb_clock_set_mask+0x66>
   188ca:	009a      	lsls	r2, r3, #2
   188cc:	4b16      	ldr	r3, [pc, #88]	; (18928 <system_apb_clock_set_mask+0x74>)
   188ce:	18d3      	adds	r3, r2, r3
   188d0:	681b      	ldr	r3, [r3, #0]
   188d2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   188d4:	4b15      	ldr	r3, [pc, #84]	; (1892c <system_apb_clock_set_mask+0x78>)
   188d6:	4a15      	ldr	r2, [pc, #84]	; (1892c <system_apb_clock_set_mask+0x78>)
   188d8:	6951      	ldr	r1, [r2, #20]
   188da:	683a      	ldr	r2, [r7, #0]
   188dc:	430a      	orrs	r2, r1
   188de:	615a      	str	r2, [r3, #20]
			break;
   188e0:	e01d      	b.n	1891e <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   188e2:	4b12      	ldr	r3, [pc, #72]	; (1892c <system_apb_clock_set_mask+0x78>)
   188e4:	4a11      	ldr	r2, [pc, #68]	; (1892c <system_apb_clock_set_mask+0x78>)
   188e6:	6991      	ldr	r1, [r2, #24]
   188e8:	683a      	ldr	r2, [r7, #0]
   188ea:	430a      	orrs	r2, r1
   188ec:	619a      	str	r2, [r3, #24]
			break;
   188ee:	e016      	b.n	1891e <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   188f0:	4b0e      	ldr	r3, [pc, #56]	; (1892c <system_apb_clock_set_mask+0x78>)
   188f2:	4a0e      	ldr	r2, [pc, #56]	; (1892c <system_apb_clock_set_mask+0x78>)
   188f4:	69d1      	ldr	r1, [r2, #28]
   188f6:	683a      	ldr	r2, [r7, #0]
   188f8:	430a      	orrs	r2, r1
   188fa:	61da      	str	r2, [r3, #28]
			break;
   188fc:	e00f      	b.n	1891e <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   188fe:	4b0b      	ldr	r3, [pc, #44]	; (1892c <system_apb_clock_set_mask+0x78>)
   18900:	4a0a      	ldr	r2, [pc, #40]	; (1892c <system_apb_clock_set_mask+0x78>)
   18902:	6a11      	ldr	r1, [r2, #32]
   18904:	683a      	ldr	r2, [r7, #0]
   18906:	430a      	orrs	r2, r1
   18908:	621a      	str	r2, [r3, #32]
			break;
   1890a:	e008      	b.n	1891e <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   1890c:	4b07      	ldr	r3, [pc, #28]	; (1892c <system_apb_clock_set_mask+0x78>)
   1890e:	4a07      	ldr	r2, [pc, #28]	; (1892c <system_apb_clock_set_mask+0x78>)
   18910:	6a51      	ldr	r1, [r2, #36]	; 0x24
   18912:	683a      	ldr	r2, [r7, #0]
   18914:	430a      	orrs	r2, r1
   18916:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   18918:	e001      	b.n	1891e <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   1891a:	2317      	movs	r3, #23
   1891c:	e000      	b.n	18920 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   1891e:	2300      	movs	r3, #0
}
   18920:	0018      	movs	r0, r3
   18922:	46bd      	mov	sp, r7
   18924:	b002      	add	sp, #8
   18926:	bd80      	pop	{r7, pc}
   18928:	00028b6c 	.word	0x00028b6c
   1892c:	40000400 	.word	0x40000400

00018930 <system_interrupt_enter_critical_section>:
{
   18930:	b580      	push	{r7, lr}
   18932:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   18934:	4b02      	ldr	r3, [pc, #8]	; (18940 <system_interrupt_enter_critical_section+0x10>)
   18936:	4798      	blx	r3
}
   18938:	46c0      	nop			; (mov r8, r8)
   1893a:	46bd      	mov	sp, r7
   1893c:	bd80      	pop	{r7, pc}
   1893e:	46c0      	nop			; (mov r8, r8)
   18940:	00006791 	.word	0x00006791

00018944 <system_interrupt_leave_critical_section>:
{
   18944:	b580      	push	{r7, lr}
   18946:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   18948:	4b02      	ldr	r3, [pc, #8]	; (18954 <system_interrupt_leave_critical_section+0x10>)
   1894a:	4798      	blx	r3
}
   1894c:	46c0      	nop			; (mov r8, r8)
   1894e:	46bd      	mov	sp, r7
   18950:	bd80      	pop	{r7, pc}
   18952:	46c0      	nop			; (mov r8, r8)
   18954:	000067e5 	.word	0x000067e5

00018958 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
   18958:	b580      	push	{r7, lr}
   1895a:	b082      	sub	sp, #8
   1895c:	af00      	add	r7, sp, #0
   1895e:	0002      	movs	r2, r0
   18960:	1dfb      	adds	r3, r7, #7
   18962:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   18964:	4b09      	ldr	r3, [pc, #36]	; (1898c <system_gclk_is_syncing+0x34>)
   18966:	685b      	ldr	r3, [r3, #4]
   18968:	1dfa      	adds	r2, r7, #7
   1896a:	7812      	ldrb	r2, [r2, #0]
   1896c:	2101      	movs	r1, #1
   1896e:	4091      	lsls	r1, r2
   18970:	000a      	movs	r2, r1
   18972:	0092      	lsls	r2, r2, #2
   18974:	4013      	ands	r3, r2
   18976:	4a06      	ldr	r2, [pc, #24]	; (18990 <system_gclk_is_syncing+0x38>)
   18978:	4013      	ands	r3, r2
   1897a:	d001      	beq.n	18980 <system_gclk_is_syncing+0x28>
		 return true;
   1897c:	2301      	movs	r3, #1
   1897e:	e000      	b.n	18982 <system_gclk_is_syncing+0x2a>
	}

	 return false;
   18980:	2300      	movs	r3, #0
}
   18982:	0018      	movs	r0, r3
   18984:	46bd      	mov	sp, r7
   18986:	b002      	add	sp, #8
   18988:	bd80      	pop	{r7, pc}
   1898a:	46c0      	nop			; (mov r8, r8)
   1898c:	40001800 	.word	0x40001800
   18990:	000007fc 	.word	0x000007fc

00018994 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   18994:	b580      	push	{r7, lr}
   18996:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
   18998:	2140      	movs	r1, #64	; 0x40
   1899a:	2000      	movs	r0, #0
   1899c:	4b07      	ldr	r3, [pc, #28]	; (189bc <system_gclk_init+0x28>)
   1899e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
   189a0:	4b07      	ldr	r3, [pc, #28]	; (189c0 <system_gclk_init+0x2c>)
   189a2:	2201      	movs	r2, #1
   189a4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
   189a6:	46c0      	nop			; (mov r8, r8)
   189a8:	4b05      	ldr	r3, [pc, #20]	; (189c0 <system_gclk_init+0x2c>)
   189aa:	781b      	ldrb	r3, [r3, #0]
   189ac:	b2db      	uxtb	r3, r3
   189ae:	001a      	movs	r2, r3
   189b0:	2301      	movs	r3, #1
   189b2:	4013      	ands	r3, r2
   189b4:	d1f8      	bne.n	189a8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   189b6:	46c0      	nop			; (mov r8, r8)
   189b8:	46bd      	mov	sp, r7
   189ba:	bd80      	pop	{r7, pc}
   189bc:	000188b5 	.word	0x000188b5
   189c0:	40001800 	.word	0x40001800

000189c4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   189c4:	b580      	push	{r7, lr}
   189c6:	b086      	sub	sp, #24
   189c8:	af00      	add	r7, sp, #0
   189ca:	0002      	movs	r2, r0
   189cc:	6039      	str	r1, [r7, #0]
   189ce:	1dfb      	adds	r3, r7, #7
   189d0:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
   189d2:	683b      	ldr	r3, [r7, #0]
   189d4:	781b      	ldrb	r3, [r3, #0]
   189d6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   189d8:	683b      	ldr	r3, [r7, #0]
   189da:	785b      	ldrb	r3, [r3, #1]
   189dc:	2b00      	cmp	r3, #0
   189de:	d004      	beq.n	189ea <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   189e0:	697b      	ldr	r3, [r7, #20]
   189e2:	2280      	movs	r2, #128	; 0x80
   189e4:	00d2      	lsls	r2, r2, #3
   189e6:	4313      	orrs	r3, r2
   189e8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   189ea:	683b      	ldr	r3, [r7, #0]
   189ec:	7a5b      	ldrb	r3, [r3, #9]
   189ee:	2b00      	cmp	r3, #0
   189f0:	d004      	beq.n	189fc <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   189f2:	697b      	ldr	r3, [r7, #20]
   189f4:	2280      	movs	r2, #128	; 0x80
   189f6:	0112      	lsls	r2, r2, #4
   189f8:	4313      	orrs	r3, r2
   189fa:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   189fc:	683b      	ldr	r3, [r7, #0]
   189fe:	685b      	ldr	r3, [r3, #4]
   18a00:	2b01      	cmp	r3, #1
   18a02:	d92c      	bls.n	18a5e <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   18a04:	683b      	ldr	r3, [r7, #0]
   18a06:	685a      	ldr	r2, [r3, #4]
   18a08:	683b      	ldr	r3, [r7, #0]
   18a0a:	685b      	ldr	r3, [r3, #4]
   18a0c:	3b01      	subs	r3, #1
   18a0e:	4013      	ands	r3, r2
   18a10:	d11a      	bne.n	18a48 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   18a12:	2300      	movs	r3, #0
   18a14:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   18a16:	2302      	movs	r3, #2
   18a18:	60fb      	str	r3, [r7, #12]
   18a1a:	e005      	b.n	18a28 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
   18a1c:	693b      	ldr	r3, [r7, #16]
   18a1e:	3301      	adds	r3, #1
   18a20:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
   18a22:	68fb      	ldr	r3, [r7, #12]
   18a24:	005b      	lsls	r3, r3, #1
   18a26:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
   18a28:	683b      	ldr	r3, [r7, #0]
   18a2a:	685a      	ldr	r2, [r3, #4]
   18a2c:	68fb      	ldr	r3, [r7, #12]
   18a2e:	429a      	cmp	r2, r3
   18a30:	d8f4      	bhi.n	18a1c <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
   18a32:	693b      	ldr	r3, [r7, #16]
   18a34:	041b      	lsls	r3, r3, #16
   18a36:	697a      	ldr	r2, [r7, #20]
   18a38:	4313      	orrs	r3, r2
   18a3a:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   18a3c:	697b      	ldr	r3, [r7, #20]
   18a3e:	2280      	movs	r2, #128	; 0x80
   18a40:	0152      	lsls	r2, r2, #5
   18a42:	4313      	orrs	r3, r2
   18a44:	617b      	str	r3, [r7, #20]
   18a46:	e00a      	b.n	18a5e <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
   18a48:	683b      	ldr	r3, [r7, #0]
   18a4a:	685b      	ldr	r3, [r3, #4]
   18a4c:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
   18a4e:	697a      	ldr	r2, [r7, #20]
   18a50:	4313      	orrs	r3, r2
   18a52:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   18a54:	697b      	ldr	r3, [r7, #20]
   18a56:	2280      	movs	r2, #128	; 0x80
   18a58:	0092      	lsls	r2, r2, #2
   18a5a:	4313      	orrs	r3, r2
   18a5c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   18a5e:	683b      	ldr	r3, [r7, #0]
   18a60:	7a1b      	ldrb	r3, [r3, #8]
   18a62:	2b00      	cmp	r3, #0
   18a64:	d004      	beq.n	18a70 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   18a66:	697b      	ldr	r3, [r7, #20]
   18a68:	2280      	movs	r2, #128	; 0x80
   18a6a:	0192      	lsls	r2, r2, #6
   18a6c:	4313      	orrs	r3, r2
   18a6e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
   18a70:	46c0      	nop			; (mov r8, r8)
   18a72:	1dfb      	adds	r3, r7, #7
   18a74:	781b      	ldrb	r3, [r3, #0]
   18a76:	0018      	movs	r0, r3
   18a78:	4b12      	ldr	r3, [pc, #72]	; (18ac4 <system_gclk_gen_set_config+0x100>)
   18a7a:	4798      	blx	r3
   18a7c:	1e03      	subs	r3, r0, #0
   18a7e:	d1f8      	bne.n	18a72 <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   18a80:	4b11      	ldr	r3, [pc, #68]	; (18ac8 <system_gclk_gen_set_config+0x104>)
   18a82:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   18a84:	4811      	ldr	r0, [pc, #68]	; (18acc <system_gclk_gen_set_config+0x108>)
   18a86:	1dfb      	adds	r3, r7, #7
   18a88:	781b      	ldrb	r3, [r3, #0]
   18a8a:	4910      	ldr	r1, [pc, #64]	; (18acc <system_gclk_gen_set_config+0x108>)
   18a8c:	1dfa      	adds	r2, r7, #7
   18a8e:	7812      	ldrb	r2, [r2, #0]
   18a90:	3208      	adds	r2, #8
   18a92:	0092      	lsls	r2, r2, #2
   18a94:	5851      	ldr	r1, [r2, r1]
   18a96:	2280      	movs	r2, #128	; 0x80
   18a98:	0052      	lsls	r2, r2, #1
   18a9a:	4011      	ands	r1, r2
   18a9c:	697a      	ldr	r2, [r7, #20]
   18a9e:	430a      	orrs	r2, r1
   18aa0:	3308      	adds	r3, #8
   18aa2:	009b      	lsls	r3, r3, #2
   18aa4:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
   18aa6:	46c0      	nop			; (mov r8, r8)
   18aa8:	1dfb      	adds	r3, r7, #7
   18aaa:	781b      	ldrb	r3, [r3, #0]
   18aac:	0018      	movs	r0, r3
   18aae:	4b05      	ldr	r3, [pc, #20]	; (18ac4 <system_gclk_gen_set_config+0x100>)
   18ab0:	4798      	blx	r3
   18ab2:	1e03      	subs	r3, r0, #0
   18ab4:	d1f8      	bne.n	18aa8 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
   18ab6:	4b06      	ldr	r3, [pc, #24]	; (18ad0 <system_gclk_gen_set_config+0x10c>)
   18ab8:	4798      	blx	r3
}
   18aba:	46c0      	nop			; (mov r8, r8)
   18abc:	46bd      	mov	sp, r7
   18abe:	b006      	add	sp, #24
   18ac0:	bd80      	pop	{r7, pc}
   18ac2:	46c0      	nop			; (mov r8, r8)
   18ac4:	00018959 	.word	0x00018959
   18ac8:	00018931 	.word	0x00018931
   18acc:	40001800 	.word	0x40001800
   18ad0:	00018945 	.word	0x00018945

00018ad4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   18ad4:	b580      	push	{r7, lr}
   18ad6:	b082      	sub	sp, #8
   18ad8:	af00      	add	r7, sp, #0
   18ada:	0002      	movs	r2, r0
   18adc:	1dfb      	adds	r3, r7, #7
   18ade:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
   18ae0:	46c0      	nop			; (mov r8, r8)
   18ae2:	1dfb      	adds	r3, r7, #7
   18ae4:	781b      	ldrb	r3, [r3, #0]
   18ae6:	0018      	movs	r0, r3
   18ae8:	4b0d      	ldr	r3, [pc, #52]	; (18b20 <system_gclk_gen_enable+0x4c>)
   18aea:	4798      	blx	r3
   18aec:	1e03      	subs	r3, r0, #0
   18aee:	d1f8      	bne.n	18ae2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   18af0:	4b0c      	ldr	r3, [pc, #48]	; (18b24 <system_gclk_gen_enable+0x50>)
   18af2:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
   18af4:	480c      	ldr	r0, [pc, #48]	; (18b28 <system_gclk_gen_enable+0x54>)
   18af6:	1dfb      	adds	r3, r7, #7
   18af8:	781b      	ldrb	r3, [r3, #0]
   18afa:	490b      	ldr	r1, [pc, #44]	; (18b28 <system_gclk_gen_enable+0x54>)
   18afc:	1dfa      	adds	r2, r7, #7
   18afe:	7812      	ldrb	r2, [r2, #0]
   18b00:	3208      	adds	r2, #8
   18b02:	0092      	lsls	r2, r2, #2
   18b04:	5852      	ldr	r2, [r2, r1]
   18b06:	2180      	movs	r1, #128	; 0x80
   18b08:	0049      	lsls	r1, r1, #1
   18b0a:	430a      	orrs	r2, r1
   18b0c:	3308      	adds	r3, #8
   18b0e:	009b      	lsls	r3, r3, #2
   18b10:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
   18b12:	4b06      	ldr	r3, [pc, #24]	; (18b2c <system_gclk_gen_enable+0x58>)
   18b14:	4798      	blx	r3
}
   18b16:	46c0      	nop			; (mov r8, r8)
   18b18:	46bd      	mov	sp, r7
   18b1a:	b002      	add	sp, #8
   18b1c:	bd80      	pop	{r7, pc}
   18b1e:	46c0      	nop			; (mov r8, r8)
   18b20:	00018959 	.word	0x00018959
   18b24:	00018931 	.word	0x00018931
   18b28:	40001800 	.word	0x40001800
   18b2c:	00018945 	.word	0x00018945

00018b30 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   18b30:	b580      	push	{r7, lr}
   18b32:	b086      	sub	sp, #24
   18b34:	af00      	add	r7, sp, #0
   18b36:	0002      	movs	r2, r0
   18b38:	1dfb      	adds	r3, r7, #7
   18b3a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
   18b3c:	46c0      	nop			; (mov r8, r8)
   18b3e:	1dfb      	adds	r3, r7, #7
   18b40:	781b      	ldrb	r3, [r3, #0]
   18b42:	0018      	movs	r0, r3
   18b44:	4b24      	ldr	r3, [pc, #144]	; (18bd8 <system_gclk_gen_get_hz+0xa8>)
   18b46:	4798      	blx	r3
   18b48:	1e03      	subs	r3, r0, #0
   18b4a:	d1f8      	bne.n	18b3e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   18b4c:	4b23      	ldr	r3, [pc, #140]	; (18bdc <system_gclk_gen_get_hz+0xac>)
   18b4e:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   18b50:	4a23      	ldr	r2, [pc, #140]	; (18be0 <system_gclk_gen_get_hz+0xb0>)
   18b52:	1dfb      	adds	r3, r7, #7
   18b54:	781b      	ldrb	r3, [r3, #0]
   18b56:	3308      	adds	r3, #8
   18b58:	009b      	lsls	r3, r3, #2
   18b5a:	589b      	ldr	r3, [r3, r2]
   18b5c:	071b      	lsls	r3, r3, #28
   18b5e:	0f1b      	lsrs	r3, r3, #28
   18b60:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   18b62:	0018      	movs	r0, r3
   18b64:	4b1f      	ldr	r3, [pc, #124]	; (18be4 <system_gclk_gen_get_hz+0xb4>)
   18b66:	4798      	blx	r3
   18b68:	0003      	movs	r3, r0
   18b6a:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   18b6c:	4a1c      	ldr	r2, [pc, #112]	; (18be0 <system_gclk_gen_get_hz+0xb0>)
   18b6e:	1dfb      	adds	r3, r7, #7
   18b70:	781b      	ldrb	r3, [r3, #0]
   18b72:	3308      	adds	r3, #8
   18b74:	009b      	lsls	r3, r3, #2
   18b76:	589b      	ldr	r3, [r3, r2]
   18b78:	04db      	lsls	r3, r3, #19
   18b7a:	0fdb      	lsrs	r3, r3, #31
   18b7c:	b2da      	uxtb	r2, r3
   18b7e:	2313      	movs	r3, #19
   18b80:	18fb      	adds	r3, r7, r3
   18b82:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   18b84:	4a16      	ldr	r2, [pc, #88]	; (18be0 <system_gclk_gen_get_hz+0xb0>)
   18b86:	1dfb      	adds	r3, r7, #7
   18b88:	781b      	ldrb	r3, [r3, #0]
   18b8a:	3308      	adds	r3, #8
   18b8c:	009b      	lsls	r3, r3, #2
   18b8e:	589b      	ldr	r3, [r3, r2]
   18b90:	0c1b      	lsrs	r3, r3, #16
   18b92:	b29b      	uxth	r3, r3
   18b94:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   18b96:	4b14      	ldr	r3, [pc, #80]	; (18be8 <system_gclk_gen_get_hz+0xb8>)
   18b98:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   18b9a:	2313      	movs	r3, #19
   18b9c:	18fb      	adds	r3, r7, r3
   18b9e:	781b      	ldrb	r3, [r3, #0]
   18ba0:	2b00      	cmp	r3, #0
   18ba2:	d109      	bne.n	18bb8 <system_gclk_gen_get_hz+0x88>
   18ba4:	68fb      	ldr	r3, [r7, #12]
   18ba6:	2b01      	cmp	r3, #1
   18ba8:	d906      	bls.n	18bb8 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
   18baa:	4b10      	ldr	r3, [pc, #64]	; (18bec <system_gclk_gen_get_hz+0xbc>)
   18bac:	68f9      	ldr	r1, [r7, #12]
   18bae:	6978      	ldr	r0, [r7, #20]
   18bb0:	4798      	blx	r3
   18bb2:	0003      	movs	r3, r0
   18bb4:	617b      	str	r3, [r7, #20]
   18bb6:	e00a      	b.n	18bce <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
   18bb8:	2313      	movs	r3, #19
   18bba:	18fb      	adds	r3, r7, r3
   18bbc:	781b      	ldrb	r3, [r3, #0]
   18bbe:	2b00      	cmp	r3, #0
   18bc0:	d005      	beq.n	18bce <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
   18bc2:	68fb      	ldr	r3, [r7, #12]
   18bc4:	3301      	adds	r3, #1
   18bc6:	697a      	ldr	r2, [r7, #20]
   18bc8:	40da      	lsrs	r2, r3
   18bca:	0013      	movs	r3, r2
   18bcc:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   18bce:	697b      	ldr	r3, [r7, #20]
}
   18bd0:	0018      	movs	r0, r3
   18bd2:	46bd      	mov	sp, r7
   18bd4:	b006      	add	sp, #24
   18bd6:	bd80      	pop	{r7, pc}
   18bd8:	00018959 	.word	0x00018959
   18bdc:	00018931 	.word	0x00018931
   18be0:	40001800 	.word	0x40001800
   18be4:	00018455 	.word	0x00018455
   18be8:	00018945 	.word	0x00018945
   18bec:	00020bbd 	.word	0x00020bbd

00018bf0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   18bf0:	b580      	push	{r7, lr}
   18bf2:	b082      	sub	sp, #8
   18bf4:	af00      	add	r7, sp, #0
   18bf6:	0002      	movs	r2, r0
   18bf8:	6039      	str	r1, [r7, #0]
   18bfa:	1dfb      	adds	r3, r7, #7
   18bfc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   18bfe:	1dfb      	adds	r3, r7, #7
   18c00:	781b      	ldrb	r3, [r3, #0]
   18c02:	0018      	movs	r0, r3
   18c04:	4b08      	ldr	r3, [pc, #32]	; (18c28 <system_gclk_chan_set_config+0x38>)
   18c06:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
   18c08:	4908      	ldr	r1, [pc, #32]	; (18c2c <system_gclk_chan_set_config+0x3c>)
   18c0a:	1dfb      	adds	r3, r7, #7
   18c0c:	781b      	ldrb	r3, [r3, #0]
   18c0e:	683a      	ldr	r2, [r7, #0]
   18c10:	7812      	ldrb	r2, [r2, #0]
   18c12:	0010      	movs	r0, r2
   18c14:	220f      	movs	r2, #15
   18c16:	4002      	ands	r2, r0
   18c18:	3320      	adds	r3, #32
   18c1a:	009b      	lsls	r3, r3, #2
   18c1c:	505a      	str	r2, [r3, r1]


}
   18c1e:	46c0      	nop			; (mov r8, r8)
   18c20:	46bd      	mov	sp, r7
   18c22:	b002      	add	sp, #8
   18c24:	bd80      	pop	{r7, pc}
   18c26:	46c0      	nop			; (mov r8, r8)
   18c28:	00018c89 	.word	0x00018c89
   18c2c:	40001800 	.word	0x40001800

00018c30 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   18c30:	b580      	push	{r7, lr}
   18c32:	b082      	sub	sp, #8
   18c34:	af00      	add	r7, sp, #0
   18c36:	0002      	movs	r2, r0
   18c38:	1dfb      	adds	r3, r7, #7
   18c3a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   18c3c:	4b0f      	ldr	r3, [pc, #60]	; (18c7c <system_gclk_chan_enable+0x4c>)
   18c3e:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
   18c40:	490f      	ldr	r1, [pc, #60]	; (18c80 <system_gclk_chan_enable+0x50>)
   18c42:	1dfb      	adds	r3, r7, #7
   18c44:	781b      	ldrb	r3, [r3, #0]
   18c46:	480e      	ldr	r0, [pc, #56]	; (18c80 <system_gclk_chan_enable+0x50>)
   18c48:	1dfa      	adds	r2, r7, #7
   18c4a:	7812      	ldrb	r2, [r2, #0]
   18c4c:	3220      	adds	r2, #32
   18c4e:	0092      	lsls	r2, r2, #2
   18c50:	5812      	ldr	r2, [r2, r0]
   18c52:	2040      	movs	r0, #64	; 0x40
   18c54:	4302      	orrs	r2, r0
   18c56:	3320      	adds	r3, #32
   18c58:	009b      	lsls	r3, r3, #2
   18c5a:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
   18c5c:	46c0      	nop			; (mov r8, r8)
   18c5e:	4a08      	ldr	r2, [pc, #32]	; (18c80 <system_gclk_chan_enable+0x50>)
   18c60:	1dfb      	adds	r3, r7, #7
   18c62:	781b      	ldrb	r3, [r3, #0]
   18c64:	3320      	adds	r3, #32
   18c66:	009b      	lsls	r3, r3, #2
   18c68:	589b      	ldr	r3, [r3, r2]
   18c6a:	2240      	movs	r2, #64	; 0x40
   18c6c:	4013      	ands	r3, r2
   18c6e:	d0f6      	beq.n	18c5e <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
   18c70:	4b04      	ldr	r3, [pc, #16]	; (18c84 <system_gclk_chan_enable+0x54>)
   18c72:	4798      	blx	r3
}
   18c74:	46c0      	nop			; (mov r8, r8)
   18c76:	46bd      	mov	sp, r7
   18c78:	b002      	add	sp, #8
   18c7a:	bd80      	pop	{r7, pc}
   18c7c:	00018931 	.word	0x00018931
   18c80:	40001800 	.word	0x40001800
   18c84:	00018945 	.word	0x00018945

00018c88 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   18c88:	b580      	push	{r7, lr}
   18c8a:	b082      	sub	sp, #8
   18c8c:	af00      	add	r7, sp, #0
   18c8e:	0002      	movs	r2, r0
   18c90:	1dfb      	adds	r3, r7, #7
   18c92:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   18c94:	4b0f      	ldr	r3, [pc, #60]	; (18cd4 <system_gclk_chan_disable+0x4c>)
   18c96:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
   18c98:	490f      	ldr	r1, [pc, #60]	; (18cd8 <system_gclk_chan_disable+0x50>)
   18c9a:	1dfb      	adds	r3, r7, #7
   18c9c:	781b      	ldrb	r3, [r3, #0]
   18c9e:	480e      	ldr	r0, [pc, #56]	; (18cd8 <system_gclk_chan_disable+0x50>)
   18ca0:	1dfa      	adds	r2, r7, #7
   18ca2:	7812      	ldrb	r2, [r2, #0]
   18ca4:	3220      	adds	r2, #32
   18ca6:	0092      	lsls	r2, r2, #2
   18ca8:	5812      	ldr	r2, [r2, r0]
   18caa:	2040      	movs	r0, #64	; 0x40
   18cac:	4382      	bics	r2, r0
   18cae:	3320      	adds	r3, #32
   18cb0:	009b      	lsls	r3, r3, #2
   18cb2:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
   18cb4:	46c0      	nop			; (mov r8, r8)
   18cb6:	4a08      	ldr	r2, [pc, #32]	; (18cd8 <system_gclk_chan_disable+0x50>)
   18cb8:	1dfb      	adds	r3, r7, #7
   18cba:	781b      	ldrb	r3, [r3, #0]
   18cbc:	3320      	adds	r3, #32
   18cbe:	009b      	lsls	r3, r3, #2
   18cc0:	589b      	ldr	r3, [r3, r2]
   18cc2:	2240      	movs	r2, #64	; 0x40
   18cc4:	4013      	ands	r3, r2
   18cc6:	d1f6      	bne.n	18cb6 <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
   18cc8:	4b04      	ldr	r3, [pc, #16]	; (18cdc <system_gclk_chan_disable+0x54>)
   18cca:	4798      	blx	r3
}
   18ccc:	46c0      	nop			; (mov r8, r8)
   18cce:	46bd      	mov	sp, r7
   18cd0:	b002      	add	sp, #8
   18cd2:	bd80      	pop	{r7, pc}
   18cd4:	00018931 	.word	0x00018931
   18cd8:	40001800 	.word	0x40001800
   18cdc:	00018945 	.word	0x00018945

00018ce0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   18ce0:	b580      	push	{r7, lr}
   18ce2:	b084      	sub	sp, #16
   18ce4:	af00      	add	r7, sp, #0
   18ce6:	0002      	movs	r2, r0
   18ce8:	1dfb      	adds	r3, r7, #7
   18cea:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   18cec:	4b0d      	ldr	r3, [pc, #52]	; (18d24 <system_gclk_chan_get_hz+0x44>)
   18cee:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
   18cf0:	4a0d      	ldr	r2, [pc, #52]	; (18d28 <system_gclk_chan_get_hz+0x48>)
   18cf2:	1dfb      	adds	r3, r7, #7
   18cf4:	781b      	ldrb	r3, [r3, #0]
   18cf6:	3320      	adds	r3, #32
   18cf8:	009b      	lsls	r3, r3, #2
   18cfa:	589b      	ldr	r3, [r3, r2]
   18cfc:	071b      	lsls	r3, r3, #28
   18cfe:	0f1b      	lsrs	r3, r3, #28
   18d00:	b2da      	uxtb	r2, r3
   18d02:	230f      	movs	r3, #15
   18d04:	18fb      	adds	r3, r7, r3
   18d06:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
   18d08:	4b08      	ldr	r3, [pc, #32]	; (18d2c <system_gclk_chan_get_hz+0x4c>)
   18d0a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   18d0c:	230f      	movs	r3, #15
   18d0e:	18fb      	adds	r3, r7, r3
   18d10:	781b      	ldrb	r3, [r3, #0]
   18d12:	0018      	movs	r0, r3
   18d14:	4b06      	ldr	r3, [pc, #24]	; (18d30 <system_gclk_chan_get_hz+0x50>)
   18d16:	4798      	blx	r3
   18d18:	0003      	movs	r3, r0
}
   18d1a:	0018      	movs	r0, r3
   18d1c:	46bd      	mov	sp, r7
   18d1e:	b004      	add	sp, #16
   18d20:	bd80      	pop	{r7, pc}
   18d22:	46c0      	nop			; (mov r8, r8)
   18d24:	00018931 	.word	0x00018931
   18d28:	40001800 	.word	0x40001800
   18d2c:	00018945 	.word	0x00018945
   18d30:	00018b31 	.word	0x00018b31

00018d34 <system_pinmux_get_group_from_gpio_pin>:
{
   18d34:	b580      	push	{r7, lr}
   18d36:	b084      	sub	sp, #16
   18d38:	af00      	add	r7, sp, #0
   18d3a:	0002      	movs	r2, r0
   18d3c:	1dfb      	adds	r3, r7, #7
   18d3e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   18d40:	230f      	movs	r3, #15
   18d42:	18fb      	adds	r3, r7, r3
   18d44:	1dfa      	adds	r2, r7, #7
   18d46:	7812      	ldrb	r2, [r2, #0]
   18d48:	09d2      	lsrs	r2, r2, #7
   18d4a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   18d4c:	230e      	movs	r3, #14
   18d4e:	18fb      	adds	r3, r7, r3
   18d50:	1dfa      	adds	r2, r7, #7
   18d52:	7812      	ldrb	r2, [r2, #0]
   18d54:	0952      	lsrs	r2, r2, #5
   18d56:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   18d58:	4b0d      	ldr	r3, [pc, #52]	; (18d90 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   18d5a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   18d5c:	230f      	movs	r3, #15
   18d5e:	18fb      	adds	r3, r7, r3
   18d60:	781b      	ldrb	r3, [r3, #0]
   18d62:	2b00      	cmp	r3, #0
   18d64:	d10f      	bne.n	18d86 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   18d66:	230f      	movs	r3, #15
   18d68:	18fb      	adds	r3, r7, r3
   18d6a:	781b      	ldrb	r3, [r3, #0]
   18d6c:	009b      	lsls	r3, r3, #2
   18d6e:	2210      	movs	r2, #16
   18d70:	4694      	mov	ip, r2
   18d72:	44bc      	add	ip, r7
   18d74:	4463      	add	r3, ip
   18d76:	3b08      	subs	r3, #8
   18d78:	681a      	ldr	r2, [r3, #0]
   18d7a:	230e      	movs	r3, #14
   18d7c:	18fb      	adds	r3, r7, r3
   18d7e:	781b      	ldrb	r3, [r3, #0]
   18d80:	01db      	lsls	r3, r3, #7
   18d82:	18d3      	adds	r3, r2, r3
   18d84:	e000      	b.n	18d88 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   18d86:	2300      	movs	r3, #0
}
   18d88:	0018      	movs	r0, r3
   18d8a:	46bd      	mov	sp, r7
   18d8c:	b004      	add	sp, #16
   18d8e:	bd80      	pop	{r7, pc}
   18d90:	40002800 	.word	0x40002800

00018d94 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   18d94:	b580      	push	{r7, lr}
   18d96:	b088      	sub	sp, #32
   18d98:	af00      	add	r7, sp, #0
   18d9a:	60f8      	str	r0, [r7, #12]
   18d9c:	60b9      	str	r1, [r7, #8]
   18d9e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   18da0:	2300      	movs	r3, #0
   18da2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   18da4:	687b      	ldr	r3, [r7, #4]
   18da6:	78db      	ldrb	r3, [r3, #3]
   18da8:	2201      	movs	r2, #1
   18daa:	4053      	eors	r3, r2
   18dac:	b2db      	uxtb	r3, r3
   18dae:	2b00      	cmp	r3, #0
   18db0:	d035      	beq.n	18e1e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   18db2:	687b      	ldr	r3, [r7, #4]
   18db4:	781b      	ldrb	r3, [r3, #0]
   18db6:	2b80      	cmp	r3, #128	; 0x80
   18db8:	d00b      	beq.n	18dd2 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   18dba:	69fb      	ldr	r3, [r7, #28]
   18dbc:	2280      	movs	r2, #128	; 0x80
   18dbe:	0252      	lsls	r2, r2, #9
   18dc0:	4313      	orrs	r3, r2
   18dc2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   18dc4:	687b      	ldr	r3, [r7, #4]
   18dc6:	781b      	ldrb	r3, [r3, #0]
   18dc8:	061b      	lsls	r3, r3, #24
   18dca:	001a      	movs	r2, r3
   18dcc:	69fb      	ldr	r3, [r7, #28]
   18dce:	4313      	orrs	r3, r2
   18dd0:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   18dd2:	687b      	ldr	r3, [r7, #4]
   18dd4:	785b      	ldrb	r3, [r3, #1]
   18dd6:	2b00      	cmp	r3, #0
   18dd8:	d003      	beq.n	18de2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   18dda:	687b      	ldr	r3, [r7, #4]
   18ddc:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   18dde:	2b02      	cmp	r3, #2
   18de0:	d110      	bne.n	18e04 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   18de2:	69fb      	ldr	r3, [r7, #28]
   18de4:	2280      	movs	r2, #128	; 0x80
   18de6:	0292      	lsls	r2, r2, #10
   18de8:	4313      	orrs	r3, r2
   18dea:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   18dec:	687b      	ldr	r3, [r7, #4]
   18dee:	789b      	ldrb	r3, [r3, #2]
   18df0:	2b00      	cmp	r3, #0
   18df2:	d004      	beq.n	18dfe <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   18df4:	69fb      	ldr	r3, [r7, #28]
   18df6:	2280      	movs	r2, #128	; 0x80
   18df8:	02d2      	lsls	r2, r2, #11
   18dfa:	4313      	orrs	r3, r2
   18dfc:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   18dfe:	68fb      	ldr	r3, [r7, #12]
   18e00:	68ba      	ldr	r2, [r7, #8]
   18e02:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   18e04:	687b      	ldr	r3, [r7, #4]
   18e06:	785b      	ldrb	r3, [r3, #1]
   18e08:	2b01      	cmp	r3, #1
   18e0a:	d003      	beq.n	18e14 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   18e0c:	687b      	ldr	r3, [r7, #4]
   18e0e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   18e10:	2b02      	cmp	r3, #2
   18e12:	d107      	bne.n	18e24 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   18e14:	69fb      	ldr	r3, [r7, #28]
   18e16:	4a22      	ldr	r2, [pc, #136]	; (18ea0 <_system_pinmux_config+0x10c>)
   18e18:	4013      	ands	r3, r2
   18e1a:	61fb      	str	r3, [r7, #28]
   18e1c:	e002      	b.n	18e24 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   18e1e:	68fb      	ldr	r3, [r7, #12]
   18e20:	68ba      	ldr	r2, [r7, #8]
   18e22:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   18e24:	68bb      	ldr	r3, [r7, #8]
   18e26:	041b      	lsls	r3, r3, #16
   18e28:	0c1b      	lsrs	r3, r3, #16
   18e2a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   18e2c:	68bb      	ldr	r3, [r7, #8]
   18e2e:	0c1b      	lsrs	r3, r3, #16
   18e30:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   18e32:	69ba      	ldr	r2, [r7, #24]
   18e34:	69fb      	ldr	r3, [r7, #28]
   18e36:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   18e38:	22a0      	movs	r2, #160	; 0xa0
   18e3a:	05d2      	lsls	r2, r2, #23
   18e3c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   18e3e:	68fb      	ldr	r3, [r7, #12]
   18e40:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   18e42:	697a      	ldr	r2, [r7, #20]
   18e44:	69fb      	ldr	r3, [r7, #28]
   18e46:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   18e48:	22d0      	movs	r2, #208	; 0xd0
   18e4a:	0612      	lsls	r2, r2, #24
   18e4c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   18e4e:	68fb      	ldr	r3, [r7, #12]
   18e50:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   18e52:	687b      	ldr	r3, [r7, #4]
   18e54:	78db      	ldrb	r3, [r3, #3]
   18e56:	2201      	movs	r2, #1
   18e58:	4053      	eors	r3, r2
   18e5a:	b2db      	uxtb	r3, r3
   18e5c:	2b00      	cmp	r3, #0
   18e5e:	d01a      	beq.n	18e96 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   18e60:	69fa      	ldr	r2, [r7, #28]
   18e62:	2380      	movs	r3, #128	; 0x80
   18e64:	02db      	lsls	r3, r3, #11
   18e66:	4013      	ands	r3, r2
   18e68:	d00a      	beq.n	18e80 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   18e6a:	687b      	ldr	r3, [r7, #4]
   18e6c:	789b      	ldrb	r3, [r3, #2]
   18e6e:	2b01      	cmp	r3, #1
   18e70:	d103      	bne.n	18e7a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   18e72:	68fb      	ldr	r3, [r7, #12]
   18e74:	68ba      	ldr	r2, [r7, #8]
   18e76:	619a      	str	r2, [r3, #24]
   18e78:	e002      	b.n	18e80 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   18e7a:	68fb      	ldr	r3, [r7, #12]
   18e7c:	68ba      	ldr	r2, [r7, #8]
   18e7e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   18e80:	687b      	ldr	r3, [r7, #4]
   18e82:	785b      	ldrb	r3, [r3, #1]
   18e84:	2b01      	cmp	r3, #1
   18e86:	d003      	beq.n	18e90 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   18e88:	687b      	ldr	r3, [r7, #4]
   18e8a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   18e8c:	2b02      	cmp	r3, #2
   18e8e:	d102      	bne.n	18e96 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   18e90:	68fb      	ldr	r3, [r7, #12]
   18e92:	68ba      	ldr	r2, [r7, #8]
   18e94:	609a      	str	r2, [r3, #8]
		}
	}
}
   18e96:	46c0      	nop			; (mov r8, r8)
   18e98:	46bd      	mov	sp, r7
   18e9a:	b008      	add	sp, #32
   18e9c:	bd80      	pop	{r7, pc}
   18e9e:	46c0      	nop			; (mov r8, r8)
   18ea0:	fffbffff 	.word	0xfffbffff

00018ea4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   18ea4:	b580      	push	{r7, lr}
   18ea6:	b084      	sub	sp, #16
   18ea8:	af00      	add	r7, sp, #0
   18eaa:	0002      	movs	r2, r0
   18eac:	6039      	str	r1, [r7, #0]
   18eae:	1dfb      	adds	r3, r7, #7
   18eb0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   18eb2:	1dfb      	adds	r3, r7, #7
   18eb4:	781b      	ldrb	r3, [r3, #0]
   18eb6:	0018      	movs	r0, r3
   18eb8:	4b0a      	ldr	r3, [pc, #40]	; (18ee4 <system_pinmux_pin_set_config+0x40>)
   18eba:	4798      	blx	r3
   18ebc:	0003      	movs	r3, r0
   18ebe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   18ec0:	1dfb      	adds	r3, r7, #7
   18ec2:	781b      	ldrb	r3, [r3, #0]
   18ec4:	221f      	movs	r2, #31
   18ec6:	4013      	ands	r3, r2
   18ec8:	2201      	movs	r2, #1
   18eca:	409a      	lsls	r2, r3
   18ecc:	0013      	movs	r3, r2
   18ece:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   18ed0:	683a      	ldr	r2, [r7, #0]
   18ed2:	68b9      	ldr	r1, [r7, #8]
   18ed4:	68fb      	ldr	r3, [r7, #12]
   18ed6:	0018      	movs	r0, r3
   18ed8:	4b03      	ldr	r3, [pc, #12]	; (18ee8 <system_pinmux_pin_set_config+0x44>)
   18eda:	4798      	blx	r3
}
   18edc:	46c0      	nop			; (mov r8, r8)
   18ede:	46bd      	mov	sp, r7
   18ee0:	b004      	add	sp, #16
   18ee2:	bd80      	pop	{r7, pc}
   18ee4:	00018d35 	.word	0x00018d35
   18ee8:	00018d95 	.word	0x00018d95

00018eec <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   18eec:	b580      	push	{r7, lr}
   18eee:	af00      	add	r7, sp, #0
	return;
   18ef0:	46c0      	nop			; (mov r8, r8)
}
   18ef2:	46bd      	mov	sp, r7
   18ef4:	bd80      	pop	{r7, pc}
	...

00018ef8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   18ef8:	b580      	push	{r7, lr}
   18efa:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   18efc:	4b06      	ldr	r3, [pc, #24]	; (18f18 <system_init+0x20>)
   18efe:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   18f00:	4b06      	ldr	r3, [pc, #24]	; (18f1c <system_init+0x24>)
   18f02:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   18f04:	4b06      	ldr	r3, [pc, #24]	; (18f20 <system_init+0x28>)
   18f06:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   18f08:	4b06      	ldr	r3, [pc, #24]	; (18f24 <system_init+0x2c>)
   18f0a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   18f0c:	4b06      	ldr	r3, [pc, #24]	; (18f28 <system_init+0x30>)
   18f0e:	4798      	blx	r3
}
   18f10:	46c0      	nop			; (mov r8, r8)
   18f12:	46bd      	mov	sp, r7
   18f14:	bd80      	pop	{r7, pc}
   18f16:	46c0      	nop			; (mov r8, r8)
   18f18:	000187a1 	.word	0x000187a1
   18f1c:	000047e5 	.word	0x000047e5
   18f20:	00018eed 	.word	0x00018eed
   18f24:	00006b99 	.word	0x00006b99
   18f28:	00018eed 	.word	0x00018eed

00018f2c <cpu_irq_save>:
{
   18f2c:	b580      	push	{r7, lr}
   18f2e:	b082      	sub	sp, #8
   18f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18f32:	f3ef 8310 	mrs	r3, PRIMASK
   18f36:	607b      	str	r3, [r7, #4]
  return(result);
   18f38:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
   18f3a:	425a      	negs	r2, r3
   18f3c:	4153      	adcs	r3, r2
   18f3e:	b2db      	uxtb	r3, r3
   18f40:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   18f42:	b672      	cpsid	i
   18f44:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   18f48:	4b03      	ldr	r3, [pc, #12]	; (18f58 <cpu_irq_save+0x2c>)
   18f4a:	2200      	movs	r2, #0
   18f4c:	701a      	strb	r2, [r3, #0]
	return flags;
   18f4e:	683b      	ldr	r3, [r7, #0]
}
   18f50:	0018      	movs	r0, r3
   18f52:	46bd      	mov	sp, r7
   18f54:	b002      	add	sp, #8
   18f56:	bd80      	pop	{r7, pc}
   18f58:	200000ad 	.word	0x200000ad

00018f5c <cpu_irq_is_enabled_flags>:
{
   18f5c:	b580      	push	{r7, lr}
   18f5e:	b082      	sub	sp, #8
   18f60:	af00      	add	r7, sp, #0
   18f62:	6078      	str	r0, [r7, #4]
	return (flags);
   18f64:	687b      	ldr	r3, [r7, #4]
   18f66:	1e5a      	subs	r2, r3, #1
   18f68:	4193      	sbcs	r3, r2
   18f6a:	b2db      	uxtb	r3, r3
}
   18f6c:	0018      	movs	r0, r3
   18f6e:	46bd      	mov	sp, r7
   18f70:	b002      	add	sp, #8
   18f72:	bd80      	pop	{r7, pc}

00018f74 <cpu_irq_restore>:
{
   18f74:	b580      	push	{r7, lr}
   18f76:	b082      	sub	sp, #8
   18f78:	af00      	add	r7, sp, #0
   18f7a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   18f7c:	687b      	ldr	r3, [r7, #4]
   18f7e:	0018      	movs	r0, r3
   18f80:	4b06      	ldr	r3, [pc, #24]	; (18f9c <cpu_irq_restore+0x28>)
   18f82:	4798      	blx	r3
   18f84:	1e03      	subs	r3, r0, #0
   18f86:	d005      	beq.n	18f94 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   18f88:	4b05      	ldr	r3, [pc, #20]	; (18fa0 <cpu_irq_restore+0x2c>)
   18f8a:	2201      	movs	r2, #1
   18f8c:	701a      	strb	r2, [r3, #0]
   18f8e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   18f92:	b662      	cpsie	i
}
   18f94:	46c0      	nop			; (mov r8, r8)
   18f96:	46bd      	mov	sp, r7
   18f98:	b002      	add	sp, #8
   18f9a:	bd80      	pop	{r7, pc}
   18f9c:	00018f5d 	.word	0x00018f5d
   18fa0:	200000ad 	.word	0x200000ad

00018fa4 <system_gclk_gen_get_config_defaults>:
{
   18fa4:	b580      	push	{r7, lr}
   18fa6:	b082      	sub	sp, #8
   18fa8:	af00      	add	r7, sp, #0
   18faa:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   18fac:	687b      	ldr	r3, [r7, #4]
   18fae:	2201      	movs	r2, #1
   18fb0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   18fb2:	687b      	ldr	r3, [r7, #4]
   18fb4:	2200      	movs	r2, #0
   18fb6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
   18fb8:	687b      	ldr	r3, [r7, #4]
   18fba:	2206      	movs	r2, #6
   18fbc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   18fbe:	687b      	ldr	r3, [r7, #4]
   18fc0:	2200      	movs	r2, #0
   18fc2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   18fc4:	687b      	ldr	r3, [r7, #4]
   18fc6:	2200      	movs	r2, #0
   18fc8:	725a      	strb	r2, [r3, #9]
}
   18fca:	46c0      	nop			; (mov r8, r8)
   18fcc:	46bd      	mov	sp, r7
   18fce:	b002      	add	sp, #8
   18fd0:	bd80      	pop	{r7, pc}

00018fd2 <system_clock_source_xosc32k_get_config_defaults>:
{
   18fd2:	b580      	push	{r7, lr}
   18fd4:	b082      	sub	sp, #8
   18fd6:	af00      	add	r7, sp, #0
   18fd8:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   18fda:	687b      	ldr	r3, [r7, #4]
   18fdc:	2200      	movs	r2, #0
   18fde:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   18fe0:	687b      	ldr	r3, [r7, #4]
   18fe2:	2202      	movs	r2, #2
   18fe4:	705a      	strb	r2, [r3, #1]
	config->frequency           = 32768UL;
   18fe6:	687b      	ldr	r3, [r7, #4]
   18fe8:	2280      	movs	r2, #128	; 0x80
   18fea:	0212      	lsls	r2, r2, #8
   18fec:	605a      	str	r2, [r3, #4]
	config->enable_1khz_output  = false;
   18fee:	687b      	ldr	r3, [r7, #4]
   18ff0:	2200      	movs	r2, #0
   18ff2:	709a      	strb	r2, [r3, #2]
	config->enable_32khz_output = true;
   18ff4:	687b      	ldr	r3, [r7, #4]
   18ff6:	2201      	movs	r2, #1
   18ff8:	70da      	strb	r2, [r3, #3]
	config->run_in_standby      = false;
   18ffa:	687b      	ldr	r3, [r7, #4]
   18ffc:	2200      	movs	r2, #0
   18ffe:	721a      	strb	r2, [r3, #8]
	config->on_demand           = true;
   19000:	687b      	ldr	r3, [r7, #4]
   19002:	2201      	movs	r2, #1
   19004:	725a      	strb	r2, [r3, #9]
	config->write_once          = false;
   19006:	687b      	ldr	r3, [r7, #4]
   19008:	2200      	movs	r2, #0
   1900a:	729a      	strb	r2, [r3, #10]
}
   1900c:	46c0      	nop			; (mov r8, r8)
   1900e:	46bd      	mov	sp, r7
   19010:	b002      	add	sp, #8
   19012:	bd80      	pop	{r7, pc}

00019014 <arch_ioport_pin_to_port_id>:
{
   19014:	b580      	push	{r7, lr}
   19016:	b082      	sub	sp, #8
   19018:	af00      	add	r7, sp, #0
   1901a:	6078      	str	r0, [r7, #4]
	return pin >> 5;
   1901c:	687b      	ldr	r3, [r7, #4]
   1901e:	095b      	lsrs	r3, r3, #5
}
   19020:	0018      	movs	r0, r3
   19022:	46bd      	mov	sp, r7
   19024:	b002      	add	sp, #8
   19026:	bd80      	pop	{r7, pc}

00019028 <arch_ioport_port_to_base>:
{
   19028:	b580      	push	{r7, lr}
   1902a:	b082      	sub	sp, #8
   1902c:	af00      	add	r7, sp, #0
   1902e:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
   19030:	687b      	ldr	r3, [r7, #4]
   19032:	01db      	lsls	r3, r3, #7
   19034:	4a03      	ldr	r2, [pc, #12]	; (19044 <arch_ioport_port_to_base+0x1c>)
   19036:	4694      	mov	ip, r2
   19038:	4463      	add	r3, ip
}
   1903a:	0018      	movs	r0, r3
   1903c:	46bd      	mov	sp, r7
   1903e:	b002      	add	sp, #8
   19040:	bd80      	pop	{r7, pc}
   19042:	46c0      	nop			; (mov r8, r8)
   19044:	40002800 	.word	0x40002800

00019048 <arch_ioport_pin_to_base>:
{
   19048:	b580      	push	{r7, lr}
   1904a:	b082      	sub	sp, #8
   1904c:	af00      	add	r7, sp, #0
   1904e:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
   19050:	687b      	ldr	r3, [r7, #4]
   19052:	0018      	movs	r0, r3
   19054:	4b05      	ldr	r3, [pc, #20]	; (1906c <arch_ioport_pin_to_base+0x24>)
   19056:	4798      	blx	r3
   19058:	0003      	movs	r3, r0
   1905a:	0018      	movs	r0, r3
   1905c:	4b04      	ldr	r3, [pc, #16]	; (19070 <arch_ioport_pin_to_base+0x28>)
   1905e:	4798      	blx	r3
   19060:	0003      	movs	r3, r0
}
   19062:	0018      	movs	r0, r3
   19064:	46bd      	mov	sp, r7
   19066:	b002      	add	sp, #8
   19068:	bd80      	pop	{r7, pc}
   1906a:	46c0      	nop			; (mov r8, r8)
   1906c:	00019015 	.word	0x00019015
   19070:	00019029 	.word	0x00019029

00019074 <arch_ioport_pin_to_mask>:
{
   19074:	b580      	push	{r7, lr}
   19076:	b082      	sub	sp, #8
   19078:	af00      	add	r7, sp, #0
   1907a:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
   1907c:	687b      	ldr	r3, [r7, #4]
   1907e:	221f      	movs	r2, #31
   19080:	4013      	ands	r3, r2
   19082:	2201      	movs	r2, #1
   19084:	409a      	lsls	r2, r3
   19086:	0013      	movs	r3, r2
}
   19088:	0018      	movs	r0, r3
   1908a:	46bd      	mov	sp, r7
   1908c:	b002      	add	sp, #8
   1908e:	bd80      	pop	{r7, pc}

00019090 <arch_ioport_init>:
{
   19090:	b580      	push	{r7, lr}
   19092:	af00      	add	r7, sp, #0
}
   19094:	46c0      	nop			; (mov r8, r8)
   19096:	46bd      	mov	sp, r7
   19098:	bd80      	pop	{r7, pc}
	...

0001909c <arch_ioport_set_port_mode>:
{
   1909c:	b580      	push	{r7, lr}
   1909e:	b08a      	sub	sp, #40	; 0x28
   190a0:	af00      	add	r7, sp, #0
   190a2:	60f8      	str	r0, [r7, #12]
   190a4:	60b9      	str	r1, [r7, #8]
   190a6:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
   190a8:	68fb      	ldr	r3, [r7, #12]
   190aa:	0018      	movs	r0, r3
   190ac:	4b2b      	ldr	r3, [pc, #172]	; (1915c <arch_ioport_set_port_mode+0xc0>)
   190ae:	4798      	blx	r3
   190b0:	0003      	movs	r3, r0
   190b2:	623b      	str	r3, [r7, #32]
	uint32_t config_mask = 0;
   190b4:	2300      	movs	r3, #0
   190b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
   190b8:	2300      	movs	r3, #0
   190ba:	61fb      	str	r3, [r7, #28]
	config_mask |= PORT_WRCONFIG_INEN;
   190bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   190be:	2280      	movs	r2, #128	; 0x80
   190c0:	0292      	lsls	r2, r2, #10
   190c2:	4313      	orrs	r3, r2
   190c4:	627b      	str	r3, [r7, #36]	; 0x24
	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
   190c6:	687b      	ldr	r3, [r7, #4]
   190c8:	2220      	movs	r2, #32
   190ca:	4013      	ands	r3, r2
   190cc:	d103      	bne.n	190d6 <arch_ioport_set_port_mode+0x3a>
   190ce:	687b      	ldr	r3, [r7, #4]
   190d0:	2210      	movs	r2, #16
   190d2:	4013      	ands	r3, r2
   190d4:	d004      	beq.n	190e0 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
   190d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   190d8:	2280      	movs	r2, #128	; 0x80
   190da:	02d2      	lsls	r2, r2, #11
   190dc:	4313      	orrs	r3, r2
   190de:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
   190e0:	687b      	ldr	r3, [r7, #4]
   190e2:	2280      	movs	r2, #128	; 0x80
   190e4:	4013      	ands	r3, r2
   190e6:	d004      	beq.n	190f2 <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
   190e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   190ea:	2280      	movs	r2, #128	; 0x80
   190ec:	03d2      	lsls	r2, r2, #15
   190ee:	4313      	orrs	r3, r2
   190f0:	627b      	str	r3, [r7, #36]	; 0x24
	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
   190f2:	687b      	ldr	r3, [r7, #4]
   190f4:	061a      	lsls	r2, r3, #24
   190f6:	23f0      	movs	r3, #240	; 0xf0
   190f8:	051b      	lsls	r3, r3, #20
   190fa:	4013      	ands	r3, r2
   190fc:	61fb      	str	r3, [r7, #28]
	uint32_t lower_pin_mask = (mask & 0xFFFF);
   190fe:	68bb      	ldr	r3, [r7, #8]
   19100:	041b      	lsls	r3, r3, #16
   19102:	0c1b      	lsrs	r3, r3, #16
   19104:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
   19106:	68bb      	ldr	r3, [r7, #8]
   19108:	0c1b      	lsrs	r3, r3, #16
   1910a:	617b      	str	r3, [r7, #20]
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1910c:	69ba      	ldr	r2, [r7, #24]
   1910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19110:	431a      	orrs	r2, r3
			config_mask | config_mux |
   19112:	69fb      	ldr	r3, [r7, #28]
   19114:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   19116:	22a0      	movs	r2, #160	; 0xa0
   19118:	05d2      	lsls	r2, r2, #23
   1911a:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
   1911c:	6a3b      	ldr	r3, [r7, #32]
   1911e:	629a      	str	r2, [r3, #40]	; 0x28
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   19120:	697a      	ldr	r2, [r7, #20]
   19122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19124:	431a      	orrs	r2, r3
			config_mask | config_mux |
   19126:	69fb      	ldr	r3, [r7, #28]
   19128:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1912a:	22d0      	movs	r2, #208	; 0xd0
   1912c:	0612      	lsls	r2, r2, #24
   1912e:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
   19130:	6a3b      	ldr	r3, [r7, #32]
   19132:	629a      	str	r2, [r3, #40]	; 0x28
	if (mode & IOPORT_MODE_PULLDOWN) {
   19134:	687b      	ldr	r3, [r7, #4]
   19136:	2220      	movs	r2, #32
   19138:	4013      	ands	r3, r2
   1913a:	d003      	beq.n	19144 <arch_ioport_set_port_mode+0xa8>
		base->OUTCLR.reg = mask;
   1913c:	6a3b      	ldr	r3, [r7, #32]
   1913e:	68ba      	ldr	r2, [r7, #8]
   19140:	615a      	str	r2, [r3, #20]
}
   19142:	e006      	b.n	19152 <arch_ioport_set_port_mode+0xb6>
	else if (mode & IOPORT_MODE_PULLUP) {
   19144:	687b      	ldr	r3, [r7, #4]
   19146:	2210      	movs	r2, #16
   19148:	4013      	ands	r3, r2
   1914a:	d002      	beq.n	19152 <arch_ioport_set_port_mode+0xb6>
		base->OUTSET.reg = mask;
   1914c:	6a3b      	ldr	r3, [r7, #32]
   1914e:	68ba      	ldr	r2, [r7, #8]
   19150:	619a      	str	r2, [r3, #24]
}
   19152:	46c0      	nop			; (mov r8, r8)
   19154:	46bd      	mov	sp, r7
   19156:	b00a      	add	sp, #40	; 0x28
   19158:	bd80      	pop	{r7, pc}
   1915a:	46c0      	nop			; (mov r8, r8)
   1915c:	00019029 	.word	0x00019029

00019160 <arch_ioport_set_pin_mode>:
{
   19160:	b590      	push	{r4, r7, lr}
   19162:	b083      	sub	sp, #12
   19164:	af00      	add	r7, sp, #0
   19166:	6078      	str	r0, [r7, #4]
   19168:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
   1916a:	687b      	ldr	r3, [r7, #4]
   1916c:	0018      	movs	r0, r3
   1916e:	4b08      	ldr	r3, [pc, #32]	; (19190 <arch_ioport_set_pin_mode+0x30>)
   19170:	4798      	blx	r3
   19172:	0004      	movs	r4, r0
   19174:	687b      	ldr	r3, [r7, #4]
   19176:	0018      	movs	r0, r3
   19178:	4b06      	ldr	r3, [pc, #24]	; (19194 <arch_ioport_set_pin_mode+0x34>)
   1917a:	4798      	blx	r3
   1917c:	0001      	movs	r1, r0
   1917e:	683b      	ldr	r3, [r7, #0]
   19180:	001a      	movs	r2, r3
   19182:	0020      	movs	r0, r4
   19184:	4b04      	ldr	r3, [pc, #16]	; (19198 <arch_ioport_set_pin_mode+0x38>)
   19186:	4798      	blx	r3
}
   19188:	46c0      	nop			; (mov r8, r8)
   1918a:	46bd      	mov	sp, r7
   1918c:	b003      	add	sp, #12
   1918e:	bd90      	pop	{r4, r7, pc}
   19190:	00019015 	.word	0x00019015
   19194:	00019075 	.word	0x00019075
   19198:	0001909d 	.word	0x0001909d

0001919c <arch_ioport_set_pin_dir>:
{
   1919c:	b580      	push	{r7, lr}
   1919e:	b084      	sub	sp, #16
   191a0:	af00      	add	r7, sp, #0
   191a2:	6078      	str	r0, [r7, #4]
   191a4:	000a      	movs	r2, r1
   191a6:	1cfb      	adds	r3, r7, #3
   191a8:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
   191aa:	687b      	ldr	r3, [r7, #4]
   191ac:	0018      	movs	r0, r3
   191ae:	4b18      	ldr	r3, [pc, #96]	; (19210 <arch_ioport_set_pin_dir+0x74>)
   191b0:	4798      	blx	r3
   191b2:	0003      	movs	r3, r0
   191b4:	60fb      	str	r3, [r7, #12]
	if (dir == IOPORT_DIR_OUTPUT) {
   191b6:	1cfb      	adds	r3, r7, #3
   191b8:	781b      	ldrb	r3, [r3, #0]
   191ba:	2b01      	cmp	r3, #1
   191bc:	d107      	bne.n	191ce <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   191be:	687b      	ldr	r3, [r7, #4]
   191c0:	0018      	movs	r0, r3
   191c2:	4b14      	ldr	r3, [pc, #80]	; (19214 <arch_ioport_set_pin_dir+0x78>)
   191c4:	4798      	blx	r3
   191c6:	0002      	movs	r2, r0
   191c8:	68fb      	ldr	r3, [r7, #12]
   191ca:	609a      	str	r2, [r3, #8]
   191cc:	e00a      	b.n	191e4 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
   191ce:	1cfb      	adds	r3, r7, #3
   191d0:	781b      	ldrb	r3, [r3, #0]
   191d2:	2b00      	cmp	r3, #0
   191d4:	d106      	bne.n	191e4 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   191d6:	687b      	ldr	r3, [r7, #4]
   191d8:	0018      	movs	r0, r3
   191da:	4b0e      	ldr	r3, [pc, #56]	; (19214 <arch_ioport_set_pin_dir+0x78>)
   191dc:	4798      	blx	r3
   191de:	0002      	movs	r2, r0
   191e0:	68fb      	ldr	r3, [r7, #12]
   191e2:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
   191e4:	68fa      	ldr	r2, [r7, #12]
   191e6:	2140      	movs	r1, #64	; 0x40
   191e8:	687b      	ldr	r3, [r7, #4]
   191ea:	18d3      	adds	r3, r2, r3
   191ec:	185b      	adds	r3, r3, r1
   191ee:	781b      	ldrb	r3, [r3, #0]
   191f0:	b2db      	uxtb	r3, r3
   191f2:	2202      	movs	r2, #2
   191f4:	4313      	orrs	r3, r2
   191f6:	b2d8      	uxtb	r0, r3
   191f8:	68fa      	ldr	r2, [r7, #12]
   191fa:	2140      	movs	r1, #64	; 0x40
   191fc:	687b      	ldr	r3, [r7, #4]
   191fe:	18d3      	adds	r3, r2, r3
   19200:	185b      	adds	r3, r3, r1
   19202:	1c02      	adds	r2, r0, #0
   19204:	701a      	strb	r2, [r3, #0]
}
   19206:	46c0      	nop			; (mov r8, r8)
   19208:	46bd      	mov	sp, r7
   1920a:	b004      	add	sp, #16
   1920c:	bd80      	pop	{r7, pc}
   1920e:	46c0      	nop			; (mov r8, r8)
   19210:	00019049 	.word	0x00019049
   19214:	00019075 	.word	0x00019075

00019218 <arch_ioport_set_pin_level>:
{
   19218:	b590      	push	{r4, r7, lr}
   1921a:	b083      	sub	sp, #12
   1921c:	af00      	add	r7, sp, #0
   1921e:	6078      	str	r0, [r7, #4]
   19220:	000a      	movs	r2, r1
   19222:	1cfb      	adds	r3, r7, #3
   19224:	701a      	strb	r2, [r3, #0]
	if (level) {
   19226:	1cfb      	adds	r3, r7, #3
   19228:	781b      	ldrb	r3, [r3, #0]
   1922a:	2b00      	cmp	r3, #0
   1922c:	d00b      	beq.n	19246 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   1922e:	687b      	ldr	r3, [r7, #4]
   19230:	0018      	movs	r0, r3
   19232:	4b0c      	ldr	r3, [pc, #48]	; (19264 <arch_ioport_set_pin_level+0x4c>)
   19234:	4798      	blx	r3
   19236:	0004      	movs	r4, r0
   19238:	687b      	ldr	r3, [r7, #4]
   1923a:	0018      	movs	r0, r3
   1923c:	4b0a      	ldr	r3, [pc, #40]	; (19268 <arch_ioport_set_pin_level+0x50>)
   1923e:	4798      	blx	r3
   19240:	0003      	movs	r3, r0
   19242:	61a3      	str	r3, [r4, #24]
}
   19244:	e00a      	b.n	1925c <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   19246:	687b      	ldr	r3, [r7, #4]
   19248:	0018      	movs	r0, r3
   1924a:	4b06      	ldr	r3, [pc, #24]	; (19264 <arch_ioport_set_pin_level+0x4c>)
   1924c:	4798      	blx	r3
   1924e:	0004      	movs	r4, r0
   19250:	687b      	ldr	r3, [r7, #4]
   19252:	0018      	movs	r0, r3
   19254:	4b04      	ldr	r3, [pc, #16]	; (19268 <arch_ioport_set_pin_level+0x50>)
   19256:	4798      	blx	r3
   19258:	0003      	movs	r3, r0
   1925a:	6163      	str	r3, [r4, #20]
}
   1925c:	46c0      	nop			; (mov r8, r8)
   1925e:	46bd      	mov	sp, r7
   19260:	b003      	add	sp, #12
   19262:	bd90      	pop	{r4, r7, pc}
   19264:	00019049 	.word	0x00019049
   19268:	00019075 	.word	0x00019075

0001926c <arch_ioport_get_pin_level>:
		base->OUTCLR.reg = mask;
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
   1926c:	b590      	push	{r4, r7, lr}
   1926e:	b083      	sub	sp, #12
   19270:	af00      	add	r7, sp, #0
   19272:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   19274:	687b      	ldr	r3, [r7, #4]
   19276:	0018      	movs	r0, r3
   19278:	4b08      	ldr	r3, [pc, #32]	; (1929c <arch_ioport_get_pin_level+0x30>)
   1927a:	4798      	blx	r3
   1927c:	0003      	movs	r3, r0
   1927e:	6a1c      	ldr	r4, [r3, #32]
   19280:	687b      	ldr	r3, [r7, #4]
   19282:	0018      	movs	r0, r3
   19284:	4b06      	ldr	r3, [pc, #24]	; (192a0 <arch_ioport_get_pin_level+0x34>)
   19286:	4798      	blx	r3
   19288:	0003      	movs	r3, r0
   1928a:	4023      	ands	r3, r4
   1928c:	1e5a      	subs	r2, r3, #1
   1928e:	4193      	sbcs	r3, r2
   19290:	b2db      	uxtb	r3, r3
}
   19292:	0018      	movs	r0, r3
   19294:	46bd      	mov	sp, r7
   19296:	b003      	add	sp, #12
   19298:	bd90      	pop	{r4, r7, pc}
   1929a:	46c0      	nop			; (mov r8, r8)
   1929c:	00019049 	.word	0x00019049
   192a0:	00019075 	.word	0x00019075

000192a4 <ioport_init>:
{
   192a4:	b580      	push	{r7, lr}
   192a6:	af00      	add	r7, sp, #0
	arch_ioport_init();
   192a8:	4b02      	ldr	r3, [pc, #8]	; (192b4 <ioport_init+0x10>)
   192aa:	4798      	blx	r3
}
   192ac:	46c0      	nop			; (mov r8, r8)
   192ae:	46bd      	mov	sp, r7
   192b0:	bd80      	pop	{r7, pc}
   192b2:	46c0      	nop			; (mov r8, r8)
   192b4:	00019091 	.word	0x00019091

000192b8 <ioport_set_pin_mode>:
{
   192b8:	b580      	push	{r7, lr}
   192ba:	b082      	sub	sp, #8
   192bc:	af00      	add	r7, sp, #0
   192be:	6078      	str	r0, [r7, #4]
   192c0:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
   192c2:	683a      	ldr	r2, [r7, #0]
   192c4:	687b      	ldr	r3, [r7, #4]
   192c6:	0011      	movs	r1, r2
   192c8:	0018      	movs	r0, r3
   192ca:	4b03      	ldr	r3, [pc, #12]	; (192d8 <ioport_set_pin_mode+0x20>)
   192cc:	4798      	blx	r3
}
   192ce:	46c0      	nop			; (mov r8, r8)
   192d0:	46bd      	mov	sp, r7
   192d2:	b002      	add	sp, #8
   192d4:	bd80      	pop	{r7, pc}
   192d6:	46c0      	nop			; (mov r8, r8)
   192d8:	00019161 	.word	0x00019161

000192dc <ioport_reset_pin_mode>:
{
   192dc:	b580      	push	{r7, lr}
   192de:	b082      	sub	sp, #8
   192e0:	af00      	add	r7, sp, #0
   192e2:	6078      	str	r0, [r7, #4]
	arch_ioport_set_pin_mode(pin, 0);
   192e4:	687b      	ldr	r3, [r7, #4]
   192e6:	2100      	movs	r1, #0
   192e8:	0018      	movs	r0, r3
   192ea:	4b03      	ldr	r3, [pc, #12]	; (192f8 <ioport_reset_pin_mode+0x1c>)
   192ec:	4798      	blx	r3
}
   192ee:	46c0      	nop			; (mov r8, r8)
   192f0:	46bd      	mov	sp, r7
   192f2:	b002      	add	sp, #8
   192f4:	bd80      	pop	{r7, pc}
   192f6:	46c0      	nop			; (mov r8, r8)
   192f8:	00019161 	.word	0x00019161

000192fc <ioport_set_pin_dir>:
{
   192fc:	b580      	push	{r7, lr}
   192fe:	b082      	sub	sp, #8
   19300:	af00      	add	r7, sp, #0
   19302:	6078      	str	r0, [r7, #4]
   19304:	000a      	movs	r2, r1
   19306:	1cfb      	adds	r3, r7, #3
   19308:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
   1930a:	1cfb      	adds	r3, r7, #3
   1930c:	781a      	ldrb	r2, [r3, #0]
   1930e:	687b      	ldr	r3, [r7, #4]
   19310:	0011      	movs	r1, r2
   19312:	0018      	movs	r0, r3
   19314:	4b02      	ldr	r3, [pc, #8]	; (19320 <ioport_set_pin_dir+0x24>)
   19316:	4798      	blx	r3
}
   19318:	46c0      	nop			; (mov r8, r8)
   1931a:	46bd      	mov	sp, r7
   1931c:	b002      	add	sp, #8
   1931e:	bd80      	pop	{r7, pc}
   19320:	0001919d 	.word	0x0001919d

00019324 <ioport_set_pin_level>:
{
   19324:	b580      	push	{r7, lr}
   19326:	b082      	sub	sp, #8
   19328:	af00      	add	r7, sp, #0
   1932a:	6078      	str	r0, [r7, #4]
   1932c:	000a      	movs	r2, r1
   1932e:	1cfb      	adds	r3, r7, #3
   19330:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
   19332:	1cfb      	adds	r3, r7, #3
   19334:	781a      	ldrb	r2, [r3, #0]
   19336:	687b      	ldr	r3, [r7, #4]
   19338:	0011      	movs	r1, r2
   1933a:	0018      	movs	r0, r3
   1933c:	4b02      	ldr	r3, [pc, #8]	; (19348 <ioport_set_pin_level+0x24>)
   1933e:	4798      	blx	r3
}
   19340:	46c0      	nop			; (mov r8, r8)
   19342:	46bd      	mov	sp, r7
   19344:	b002      	add	sp, #8
   19346:	bd80      	pop	{r7, pc}
   19348:	00019219 	.word	0x00019219

0001934c <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   1934c:	b580      	push	{r7, lr}
   1934e:	b082      	sub	sp, #8
   19350:	af00      	add	r7, sp, #0
   19352:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
   19354:	687b      	ldr	r3, [r7, #4]
   19356:	0018      	movs	r0, r3
   19358:	4b03      	ldr	r3, [pc, #12]	; (19368 <ioport_get_pin_level+0x1c>)
   1935a:	4798      	blx	r3
   1935c:	0003      	movs	r3, r0
}
   1935e:	0018      	movs	r0, r3
   19360:	46bd      	mov	sp, r7
   19362:	b002      	add	sp, #8
   19364:	bd80      	pop	{r7, pc}
   19366:	46c0      	nop			; (mov r8, r8)
   19368:	0001926d 	.word	0x0001926d

0001936c <system_interrupt_enable_global>:
{
   1936c:	b580      	push	{r7, lr}
   1936e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   19370:	4b04      	ldr	r3, [pc, #16]	; (19384 <system_interrupt_enable_global+0x18>)
   19372:	2201      	movs	r2, #1
   19374:	701a      	strb	r2, [r3, #0]
   19376:	f3bf 8f5f 	dmb	sy
   1937a:	b662      	cpsie	i
}
   1937c:	46c0      	nop			; (mov r8, r8)
   1937e:	46bd      	mov	sp, r7
   19380:	bd80      	pop	{r7, pc}
   19382:	46c0      	nop			; (mov r8, r8)
   19384:	200000ad 	.word	0x200000ad

00019388 <system_interrupt_disable>:
{
   19388:	b580      	push	{r7, lr}
   1938a:	b082      	sub	sp, #8
   1938c:	af00      	add	r7, sp, #0
   1938e:	0002      	movs	r2, r0
   19390:	1dfb      	adds	r3, r7, #7
   19392:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19394:	4a07      	ldr	r2, [pc, #28]	; (193b4 <system_interrupt_disable+0x2c>)
   19396:	1dfb      	adds	r3, r7, #7
   19398:	781b      	ldrb	r3, [r3, #0]
   1939a:	0019      	movs	r1, r3
   1939c:	231f      	movs	r3, #31
   1939e:	400b      	ands	r3, r1
   193a0:	2101      	movs	r1, #1
   193a2:	4099      	lsls	r1, r3
   193a4:	000b      	movs	r3, r1
   193a6:	0019      	movs	r1, r3
   193a8:	2380      	movs	r3, #128	; 0x80
   193aa:	50d1      	str	r1, [r2, r3]
}
   193ac:	46c0      	nop			; (mov r8, r8)
   193ae:	46bd      	mov	sp, r7
   193b0:	b002      	add	sp, #8
   193b2:	bd80      	pop	{r7, pc}
   193b4:	e000e100 	.word	0xe000e100

000193b8 <system_set_sleepmode>:
{
   193b8:	b580      	push	{r7, lr}
   193ba:	b082      	sub	sp, #8
   193bc:	af00      	add	r7, sp, #0
   193be:	0002      	movs	r2, r0
   193c0:	1dfb      	adds	r3, r7, #7
   193c2:	701a      	strb	r2, [r3, #0]
	PM->SLEEPCFG.reg = sleep_mode;
   193c4:	2380      	movs	r3, #128	; 0x80
   193c6:	05db      	lsls	r3, r3, #23
   193c8:	1dfa      	adds	r2, r7, #7
   193ca:	7812      	ldrb	r2, [r2, #0]
   193cc:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
   193ce:	46c0      	nop			; (mov r8, r8)
   193d0:	2380      	movs	r3, #128	; 0x80
   193d2:	05db      	lsls	r3, r3, #23
   193d4:	785b      	ldrb	r3, [r3, #1]
   193d6:	b2db      	uxtb	r3, r3
   193d8:	1dfa      	adds	r2, r7, #7
   193da:	7812      	ldrb	r2, [r2, #0]
   193dc:	429a      	cmp	r2, r3
   193de:	d1f7      	bne.n	193d0 <system_set_sleepmode+0x18>
}
   193e0:	46c0      	nop			; (mov r8, r8)
   193e2:	46bd      	mov	sp, r7
   193e4:	b002      	add	sp, #8
   193e6:	bd80      	pop	{r7, pc}

000193e8 <system_sleep>:
{
   193e8:	b580      	push	{r7, lr}
   193ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   193ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   193f0:	bf30      	wfi
}
   193f2:	46c0      	nop			; (mov r8, r8)
   193f4:	46bd      	mov	sp, r7
   193f6:	bd80      	pop	{r7, pc}

000193f8 <usart_is_syncing>:
{
   193f8:	b580      	push	{r7, lr}
   193fa:	b084      	sub	sp, #16
   193fc:	af00      	add	r7, sp, #0
   193fe:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   19400:	687b      	ldr	r3, [r7, #4]
   19402:	681b      	ldr	r3, [r3, #0]
   19404:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   19406:	68fb      	ldr	r3, [r7, #12]
   19408:	69db      	ldr	r3, [r3, #28]
   1940a:	1e5a      	subs	r2, r3, #1
   1940c:	4193      	sbcs	r3, r2
   1940e:	b2db      	uxtb	r3, r3
}
   19410:	0018      	movs	r0, r3
   19412:	46bd      	mov	sp, r7
   19414:	b004      	add	sp, #16
   19416:	bd80      	pop	{r7, pc}

00019418 <_usart_wait_for_sync>:
{
   19418:	b580      	push	{r7, lr}
   1941a:	b082      	sub	sp, #8
   1941c:	af00      	add	r7, sp, #0
   1941e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   19420:	46c0      	nop			; (mov r8, r8)
   19422:	687b      	ldr	r3, [r7, #4]
   19424:	0018      	movs	r0, r3
   19426:	4b04      	ldr	r3, [pc, #16]	; (19438 <_usart_wait_for_sync+0x20>)
   19428:	4798      	blx	r3
   1942a:	1e03      	subs	r3, r0, #0
   1942c:	d1f9      	bne.n	19422 <_usart_wait_for_sync+0xa>
}
   1942e:	46c0      	nop			; (mov r8, r8)
   19430:	46bd      	mov	sp, r7
   19432:	b002      	add	sp, #8
   19434:	bd80      	pop	{r7, pc}
   19436:	46c0      	nop			; (mov r8, r8)
   19438:	000193f9 	.word	0x000193f9

0001943c <usart_disable>:
{
   1943c:	b580      	push	{r7, lr}
   1943e:	b084      	sub	sp, #16
   19440:	af00      	add	r7, sp, #0
   19442:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   19444:	687b      	ldr	r3, [r7, #4]
   19446:	681b      	ldr	r3, [r3, #0]
   19448:	60fb      	str	r3, [r7, #12]
	bool enabled = usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE;
   1944a:	68fb      	ldr	r3, [r7, #12]
   1944c:	681b      	ldr	r3, [r3, #0]
   1944e:	2202      	movs	r2, #2
   19450:	401a      	ands	r2, r3
   19452:	230b      	movs	r3, #11
   19454:	18fb      	adds	r3, r7, r3
   19456:	1e51      	subs	r1, r2, #1
   19458:	418a      	sbcs	r2, r1
   1945a:	701a      	strb	r2, [r3, #0]
	if (!enabled){
   1945c:	230b      	movs	r3, #11
   1945e:	18fb      	adds	r3, r7, r3
   19460:	781b      	ldrb	r3, [r3, #0]
   19462:	2201      	movs	r2, #1
   19464:	4053      	eors	r3, r2
   19466:	b2db      	uxtb	r3, r3
   19468:	2b00      	cmp	r3, #0
   1946a:	d114      	bne.n	19496 <usart_disable+0x5a>
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1946c:	687b      	ldr	r3, [r7, #4]
   1946e:	681b      	ldr	r3, [r3, #0]
   19470:	0018      	movs	r0, r3
   19472:	4b0b      	ldr	r3, [pc, #44]	; (194a0 <usart_disable+0x64>)
   19474:	4798      	blx	r3
   19476:	0003      	movs	r3, r0
   19478:	0018      	movs	r0, r3
   1947a:	4b0a      	ldr	r3, [pc, #40]	; (194a4 <usart_disable+0x68>)
   1947c:	4798      	blx	r3
	_usart_wait_for_sync(module);
   1947e:	687b      	ldr	r3, [r7, #4]
   19480:	0018      	movs	r0, r3
   19482:	4b09      	ldr	r3, [pc, #36]	; (194a8 <usart_disable+0x6c>)
   19484:	4798      	blx	r3
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   19486:	68fb      	ldr	r3, [r7, #12]
   19488:	681b      	ldr	r3, [r3, #0]
   1948a:	2202      	movs	r2, #2
   1948c:	4393      	bics	r3, r2
   1948e:	001a      	movs	r2, r3
   19490:	68fb      	ldr	r3, [r7, #12]
   19492:	601a      	str	r2, [r3, #0]
   19494:	e000      	b.n	19498 <usart_disable+0x5c>
		return;
   19496:	46c0      	nop			; (mov r8, r8)
}
   19498:	46bd      	mov	sp, r7
   1949a:	b004      	add	sp, #16
   1949c:	bd80      	pop	{r7, pc}
   1949e:	46c0      	nop			; (mov r8, r8)
   194a0:	00008175 	.word	0x00008175
   194a4:	00019389 	.word	0x00019389
   194a8:	00019419 	.word	0x00019419

000194ac <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   194ac:	b580      	push	{r7, lr}
   194ae:	b082      	sub	sp, #8
   194b0:	af00      	add	r7, sp, #0
   194b2:	0002      	movs	r2, r0
   194b4:	1dfb      	adds	r3, r7, #7
   194b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   194b8:	b672      	cpsid	i
  __ASM volatile ("dmb");
   194ba:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   194be:	4b25      	ldr	r3, [pc, #148]	; (19554 <sleepmgr_sleep+0xa8>)
   194c0:	2200      	movs	r2, #0
   194c2:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	switch (sleep_mode) {
   194c4:	1dfb      	adds	r3, r7, #7
   194c6:	781b      	ldrb	r3, [r3, #0]
   194c8:	2b02      	cmp	r3, #2
   194ca:	d014      	beq.n	194f6 <sleepmgr_sleep+0x4a>
   194cc:	dc02      	bgt.n	194d4 <sleepmgr_sleep+0x28>
   194ce:	2b01      	cmp	r3, #1
   194d0:	d005      	beq.n	194de <sleepmgr_sleep+0x32>
   194d2:	e034      	b.n	1953e <sleepmgr_sleep+0x92>
   194d4:	2b03      	cmp	r3, #3
   194d6:	d01a      	beq.n	1950e <sleepmgr_sleep+0x62>
   194d8:	2b04      	cmp	r3, #4
   194da:	d024      	beq.n	19526 <sleepmgr_sleep+0x7a>
   194dc:	e02f      	b.n	1953e <sleepmgr_sleep+0x92>
	case SLEEPMGR_IDLE:
		system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE);
   194de:	2002      	movs	r0, #2
   194e0:	4b1d      	ldr	r3, [pc, #116]	; (19558 <sleepmgr_sleep+0xac>)
   194e2:	4798      	blx	r3
		cpu_irq_enable();
   194e4:	4b1b      	ldr	r3, [pc, #108]	; (19554 <sleepmgr_sleep+0xa8>)
   194e6:	2201      	movs	r2, #1
   194e8:	701a      	strb	r2, [r3, #0]
   194ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   194ee:	b662      	cpsie	i
		system_sleep();
   194f0:	4b1a      	ldr	r3, [pc, #104]	; (1955c <sleepmgr_sleep+0xb0>)
   194f2:	4798      	blx	r3
		break;
   194f4:	e02a      	b.n	1954c <sleepmgr_sleep+0xa0>
	case SLEEPMGR_STANDBY:
		system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   194f6:	2004      	movs	r0, #4
   194f8:	4b17      	ldr	r3, [pc, #92]	; (19558 <sleepmgr_sleep+0xac>)
   194fa:	4798      	blx	r3
		cpu_irq_enable();
   194fc:	4b15      	ldr	r3, [pc, #84]	; (19554 <sleepmgr_sleep+0xa8>)
   194fe:	2201      	movs	r2, #1
   19500:	701a      	strb	r2, [r3, #0]
   19502:	f3bf 8f5f 	dmb	sy
   19506:	b662      	cpsie	i
		system_sleep();
   19508:	4b14      	ldr	r3, [pc, #80]	; (1955c <sleepmgr_sleep+0xb0>)
   1950a:	4798      	blx	r3
		break;
   1950c:	e01e      	b.n	1954c <sleepmgr_sleep+0xa0>
	case SLEEPMGR_BACKUP:
		system_set_sleepmode(SYSTEM_SLEEPMODE_BACKUP);
   1950e:	2005      	movs	r0, #5
   19510:	4b11      	ldr	r3, [pc, #68]	; (19558 <sleepmgr_sleep+0xac>)
   19512:	4798      	blx	r3
		cpu_irq_enable();
   19514:	4b0f      	ldr	r3, [pc, #60]	; (19554 <sleepmgr_sleep+0xa8>)
   19516:	2201      	movs	r2, #1
   19518:	701a      	strb	r2, [r3, #0]
   1951a:	f3bf 8f5f 	dmb	sy
   1951e:	b662      	cpsie	i
		system_sleep();
   19520:	4b0e      	ldr	r3, [pc, #56]	; (1955c <sleepmgr_sleep+0xb0>)
   19522:	4798      	blx	r3
		break;
   19524:	e012      	b.n	1954c <sleepmgr_sleep+0xa0>
	case SLEEPMGR_OFF:
		system_set_sleepmode(SYSTEM_SLEEPMODE_OFF);
   19526:	2006      	movs	r0, #6
   19528:	4b0b      	ldr	r3, [pc, #44]	; (19558 <sleepmgr_sleep+0xac>)
   1952a:	4798      	blx	r3
		cpu_irq_enable();
   1952c:	4b09      	ldr	r3, [pc, #36]	; (19554 <sleepmgr_sleep+0xa8>)
   1952e:	2201      	movs	r2, #1
   19530:	701a      	strb	r2, [r3, #0]
   19532:	f3bf 8f5f 	dmb	sy
   19536:	b662      	cpsie	i
		system_sleep();
   19538:	4b08      	ldr	r3, [pc, #32]	; (1955c <sleepmgr_sleep+0xb0>)
   1953a:	4798      	blx	r3
		break;
   1953c:	e006      	b.n	1954c <sleepmgr_sleep+0xa0>
	default:
		cpu_irq_enable();
   1953e:	4b05      	ldr	r3, [pc, #20]	; (19554 <sleepmgr_sleep+0xa8>)
   19540:	2201      	movs	r2, #1
   19542:	701a      	strb	r2, [r3, #0]
   19544:	f3bf 8f5f 	dmb	sy
   19548:	b662      	cpsie	i
		break;
   1954a:	46c0      	nop			; (mov r8, r8)
	}
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   1954c:	46c0      	nop			; (mov r8, r8)
   1954e:	46bd      	mov	sp, r7
   19550:	b002      	add	sp, #8
   19552:	bd80      	pop	{r7, pc}
   19554:	200000ad 	.word	0x200000ad
   19558:	000193b9 	.word	0x000193b9
   1955c:	000193e9 	.word	0x000193e9

00019560 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   19560:	b580      	push	{r7, lr}
   19562:	b082      	sub	sp, #8
   19564:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   19566:	1dfb      	adds	r3, r7, #7
   19568:	2200      	movs	r2, #0
   1956a:	701a      	strb	r2, [r3, #0]
   1956c:	e009      	b.n	19582 <sleepmgr_init+0x22>
		sleepmgr_locks[i] = 0;
   1956e:	1dfb      	adds	r3, r7, #7
   19570:	781b      	ldrb	r3, [r3, #0]
   19572:	4a09      	ldr	r2, [pc, #36]	; (19598 <sleepmgr_init+0x38>)
   19574:	2100      	movs	r1, #0
   19576:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   19578:	1dfb      	adds	r3, r7, #7
   1957a:	781a      	ldrb	r2, [r3, #0]
   1957c:	1dfb      	adds	r3, r7, #7
   1957e:	3201      	adds	r2, #1
   19580:	701a      	strb	r2, [r3, #0]
   19582:	1dfb      	adds	r3, r7, #7
   19584:	781b      	ldrb	r3, [r3, #0]
   19586:	2b03      	cmp	r3, #3
   19588:	d9f1      	bls.n	1956e <sleepmgr_init+0xe>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   1958a:	4b03      	ldr	r3, [pc, #12]	; (19598 <sleepmgr_init+0x38>)
   1958c:	2201      	movs	r2, #1
   1958e:	711a      	strb	r2, [r3, #4]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   19590:	46c0      	nop			; (mov r8, r8)
   19592:	46bd      	mov	sp, r7
   19594:	b002      	add	sp, #8
   19596:	bd80      	pop	{r7, pc}
   19598:	20001394 	.word	0x20001394

0001959c <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
   1959c:	b580      	push	{r7, lr}
   1959e:	b084      	sub	sp, #16
   195a0:	af00      	add	r7, sp, #0
   195a2:	0002      	movs	r2, r0
   195a4:	1dfb      	adds	r3, r7, #7
   195a6:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   195a8:	1dfb      	adds	r3, r7, #7
   195aa:	781b      	ldrb	r3, [r3, #0]
   195ac:	4a0c      	ldr	r2, [pc, #48]	; (195e0 <sleepmgr_lock_mode+0x44>)
   195ae:	5cd3      	ldrb	r3, [r2, r3]
   195b0:	2bff      	cmp	r3, #255	; 0xff
   195b2:	d100      	bne.n	195b6 <sleepmgr_lock_mode+0x1a>
		while (true) {
   195b4:	e7fe      	b.n	195b4 <sleepmgr_lock_mode+0x18>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
   195b6:	4b0b      	ldr	r3, [pc, #44]	; (195e4 <sleepmgr_lock_mode+0x48>)
   195b8:	4798      	blx	r3
   195ba:	0003      	movs	r3, r0
   195bc:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
   195be:	1dfb      	adds	r3, r7, #7
   195c0:	781b      	ldrb	r3, [r3, #0]
   195c2:	4a07      	ldr	r2, [pc, #28]	; (195e0 <sleepmgr_lock_mode+0x44>)
   195c4:	5cd2      	ldrb	r2, [r2, r3]
   195c6:	3201      	adds	r2, #1
   195c8:	b2d1      	uxtb	r1, r2
   195ca:	4a05      	ldr	r2, [pc, #20]	; (195e0 <sleepmgr_lock_mode+0x44>)
   195cc:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
   195ce:	68fb      	ldr	r3, [r7, #12]
   195d0:	0018      	movs	r0, r3
   195d2:	4b05      	ldr	r3, [pc, #20]	; (195e8 <sleepmgr_lock_mode+0x4c>)
   195d4:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   195d6:	46c0      	nop			; (mov r8, r8)
   195d8:	46bd      	mov	sp, r7
   195da:	b004      	add	sp, #16
   195dc:	bd80      	pop	{r7, pc}
   195de:	46c0      	nop			; (mov r8, r8)
   195e0:	20001394 	.word	0x20001394
   195e4:	00018f2d 	.word	0x00018f2d
   195e8:	00018f75 	.word	0x00018f75

000195ec <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   195ec:	b580      	push	{r7, lr}
   195ee:	b082      	sub	sp, #8
   195f0:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   195f2:	1dfb      	adds	r3, r7, #7
   195f4:	2200      	movs	r2, #0
   195f6:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   195f8:	4b0a      	ldr	r3, [pc, #40]	; (19624 <sleepmgr_get_sleep_mode+0x38>)
   195fa:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   195fc:	e007      	b.n	1960e <sleepmgr_get_sleep_mode+0x22>
		lock_ptr++;
   195fe:	683b      	ldr	r3, [r7, #0]
   19600:	3301      	adds	r3, #1
   19602:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   19604:	1dfb      	adds	r3, r7, #7
   19606:	1dfa      	adds	r2, r7, #7
   19608:	7812      	ldrb	r2, [r2, #0]
   1960a:	3201      	adds	r2, #1
   1960c:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
   1960e:	683b      	ldr	r3, [r7, #0]
   19610:	781b      	ldrb	r3, [r3, #0]
   19612:	2b00      	cmp	r3, #0
   19614:	d0f3      	beq.n	195fe <sleepmgr_get_sleep_mode+0x12>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   19616:	1dfb      	adds	r3, r7, #7
   19618:	781b      	ldrb	r3, [r3, #0]
}
   1961a:	0018      	movs	r0, r3
   1961c:	46bd      	mov	sp, r7
   1961e:	b002      	add	sp, #8
   19620:	bd80      	pop	{r7, pc}
   19622:	46c0      	nop			; (mov r8, r8)
   19624:	20001394 	.word	0x20001394

00019628 <tc_is_syncing>:
{
   19628:	b580      	push	{r7, lr}
   1962a:	b084      	sub	sp, #16
   1962c:	af00      	add	r7, sp, #0
   1962e:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   19630:	687b      	ldr	r3, [r7, #4]
   19632:	681b      	ldr	r3, [r3, #0]
   19634:	60fb      	str	r3, [r7, #12]
	return (tc_module->SYNCBUSY.reg);
   19636:	68fb      	ldr	r3, [r7, #12]
   19638:	691b      	ldr	r3, [r3, #16]
   1963a:	1e5a      	subs	r2, r3, #1
   1963c:	4193      	sbcs	r3, r2
   1963e:	b2db      	uxtb	r3, r3
}
   19640:	0018      	movs	r0, r3
   19642:	46bd      	mov	sp, r7
   19644:	b004      	add	sp, #16
   19646:	bd80      	pop	{r7, pc}

00019648 <tc_stop_counter>:
{
   19648:	b580      	push	{r7, lr}
   1964a:	b084      	sub	sp, #16
   1964c:	af00      	add	r7, sp, #0
   1964e:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   19650:	687b      	ldr	r3, [r7, #4]
   19652:	681b      	ldr	r3, [r3, #0]
   19654:	60fb      	str	r3, [r7, #12]
	while (tc_is_syncing(module_inst)) {
   19656:	46c0      	nop			; (mov r8, r8)
   19658:	687b      	ldr	r3, [r7, #4]
   1965a:	0018      	movs	r0, r3
   1965c:	4b05      	ldr	r3, [pc, #20]	; (19674 <tc_stop_counter+0x2c>)
   1965e:	4798      	blx	r3
   19660:	1e03      	subs	r3, r0, #0
   19662:	d1f9      	bne.n	19658 <tc_stop_counter+0x10>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
   19664:	68fb      	ldr	r3, [r7, #12]
   19666:	2240      	movs	r2, #64	; 0x40
   19668:	715a      	strb	r2, [r3, #5]
}
   1966a:	46c0      	nop			; (mov r8, r8)
   1966c:	46bd      	mov	sp, r7
   1966e:	b004      	add	sp, #16
   19670:	bd80      	pop	{r7, pc}
   19672:	46c0      	nop			; (mov r8, r8)
   19674:	00019629 	.word	0x00019629

00019678 <tc_start_counter>:
{
   19678:	b580      	push	{r7, lr}
   1967a:	b084      	sub	sp, #16
   1967c:	af00      	add	r7, sp, #0
   1967e:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   19680:	687b      	ldr	r3, [r7, #4]
   19682:	681b      	ldr	r3, [r3, #0]
   19684:	60fb      	str	r3, [r7, #12]
	while (tc_is_syncing(module_inst)) {
   19686:	46c0      	nop			; (mov r8, r8)
   19688:	687b      	ldr	r3, [r7, #4]
   1968a:	0018      	movs	r0, r3
   1968c:	4b0a      	ldr	r3, [pc, #40]	; (196b8 <tc_start_counter+0x40>)
   1968e:	4798      	blx	r3
   19690:	1e03      	subs	r3, r0, #0
   19692:	d1f9      	bne.n	19688 <tc_start_counter+0x10>
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   19694:	68fb      	ldr	r3, [r7, #12]
   19696:	2200      	movs	r2, #0
   19698:	711a      	strb	r2, [r3, #4]
	while (tc_is_syncing(module_inst)) {
   1969a:	46c0      	nop			; (mov r8, r8)
   1969c:	687b      	ldr	r3, [r7, #4]
   1969e:	0018      	movs	r0, r3
   196a0:	4b05      	ldr	r3, [pc, #20]	; (196b8 <tc_start_counter+0x40>)
   196a2:	4798      	blx	r3
   196a4:	1e03      	subs	r3, r0, #0
   196a6:	d1f9      	bne.n	1969c <tc_start_counter+0x24>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
   196a8:	68fb      	ldr	r3, [r7, #12]
   196aa:	2220      	movs	r2, #32
   196ac:	715a      	strb	r2, [r3, #5]
}
   196ae:	46c0      	nop			; (mov r8, r8)
   196b0:	46bd      	mov	sp, r7
   196b2:	b004      	add	sp, #16
   196b4:	bd80      	pop	{r7, pc}
   196b6:	46c0      	nop			; (mov r8, r8)
   196b8:	00019629 	.word	0x00019629

000196bc <main>:




int main (void)
{
   196bc:	b580      	push	{r7, lr}
   196be:	b082      	sub	sp, #8
   196c0:	af00      	add	r7, sp, #0
	uint8_t i; // Iteration counter
	config_pins_powerup();
   196c2:	4b70      	ldr	r3, [pc, #448]	; (19884 <main+0x1c8>)
   196c4:	4798      	blx	r3
	system_init();
   196c6:	4b70      	ldr	r3, [pc, #448]	; (19888 <main+0x1cc>)
   196c8:	4798      	blx	r3
	delay_init();
   196ca:	4b70      	ldr	r3, [pc, #448]	; (1988c <main+0x1d0>)
   196cc:	4798      	blx	r3
	delay_ms(500);	
   196ce:	23fa      	movs	r3, #250	; 0xfa
   196d0:	005b      	lsls	r3, r3, #1
   196d2:	0018      	movs	r0, r3
   196d4:	4b6e      	ldr	r3, [pc, #440]	; (19890 <main+0x1d4>)
   196d6:	4798      	blx	r3
	wdt_enable();
   196d8:	4b6e      	ldr	r3, [pc, #440]	; (19894 <main+0x1d8>)
   196da:	4798      	blx	r3
	setup_spi();
   196dc:	4b6e      	ldr	r3, [pc, #440]	; (19898 <main+0x1dc>)
   196de:	4798      	blx	r3
	configure_i2c_master();	
   196e0:	4b6e      	ldr	r3, [pc, #440]	; (1989c <main+0x1e0>)
   196e2:	4798      	blx	r3
	glcd_init();
   196e4:	4b6e      	ldr	r3, [pc, #440]	; (198a0 <main+0x1e4>)
   196e6:	4798      	blx	r3
	configure_extint_channel();
   196e8:	4b6e      	ldr	r3, [pc, #440]	; (198a4 <main+0x1e8>)
   196ea:	4798      	blx	r3
	configure_extint_callbacks();	
   196ec:	4b6e      	ldr	r3, [pc, #440]	; (198a8 <main+0x1ec>)
   196ee:	4798      	blx	r3
	setup_batt();
   196f0:	4b6e      	ldr	r3, [pc, #440]	; (198ac <main+0x1f0>)
   196f2:	4798      	blx	r3
	setup_accel(&slave_acc1);
   196f4:	4b6e      	ldr	r3, [pc, #440]	; (198b0 <main+0x1f4>)
   196f6:	0018      	movs	r0, r3
   196f8:	4b6e      	ldr	r3, [pc, #440]	; (198b4 <main+0x1f8>)
   196fa:	4798      	blx	r3
	setup_accel(&slave_acc2);	
   196fc:	4b6e      	ldr	r3, [pc, #440]	; (198b8 <main+0x1fc>)
   196fe:	0018      	movs	r0, r3
   19700:	4b6c      	ldr	r3, [pc, #432]	; (198b4 <main+0x1f8>)
   19702:	4798      	blx	r3
	setup_mag(&slave_mag1);
   19704:	4b6d      	ldr	r3, [pc, #436]	; (198bc <main+0x200>)
   19706:	0018      	movs	r0, r3
   19708:	4b6d      	ldr	r3, [pc, #436]	; (198c0 <main+0x204>)
   1970a:	4798      	blx	r3
	setup_mag(&slave_mag2);
   1970c:	4b6d      	ldr	r3, [pc, #436]	; (198c4 <main+0x208>)
   1970e:	0018      	movs	r0, r3
   19710:	4b6b      	ldr	r3, [pc, #428]	; (198c0 <main+0x204>)
   19712:	4798      	blx	r3
	configure_usart();
   19714:	4b6c      	ldr	r3, [pc, #432]	; (198c8 <main+0x20c>)
   19716:	4798      	blx	r3
	configure_usart_callbacks();	
   19718:	4b6c      	ldr	r3, [pc, #432]	; (198cc <main+0x210>)
   1971a:	4798      	blx	r3
	ext_osc_onoff(true);
   1971c:	2001      	movs	r0, #1
   1971e:	4b6c      	ldr	r3, [pc, #432]	; (198d0 <main+0x214>)
   19720:	4798      	blx	r3
	setup_XOSC32k();
   19722:	4b6c      	ldr	r3, [pc, #432]	; (198d4 <main+0x218>)
   19724:	4798      	blx	r3
	clock_32k_source(clock_ext);
   19726:	2000      	movs	r0, #0
   19728:	4b6b      	ldr	r3, [pc, #428]	; (198d8 <main+0x21c>)
   1972a:	4798      	blx	r3
	configure_timers(st_powerup);
   1972c:	2005      	movs	r0, #5
   1972e:	4b6b      	ldr	r3, [pc, #428]	; (198dc <main+0x220>)
   19730:	4798      	blx	r3
	system_interrupt_enable_global();	
   19732:	4b6b      	ldr	r3, [pc, #428]	; (198e0 <main+0x224>)
   19734:	4798      	blx	r3
	sleepmgr_init();
   19736:	4b6b      	ldr	r3, [pc, #428]	; (198e4 <main+0x228>)
   19738:	4798      	blx	r3
	load_user_settings();
   1973a:	4b6b      	ldr	r3, [pc, #428]	; (198e8 <main+0x22c>)
   1973c:	4798      	blx	r3
	load_calibration();
   1973e:	4b6b      	ldr	r3, [pc, #428]	; (198ec <main+0x230>)
   19740:	4798      	blx	r3
	setup_charger();
   19742:	4b6b      	ldr	r3, [pc, #428]	; (198f0 <main+0x234>)
   19744:	4798      	blx	r3
	backlightOn();
   19746:	4b6b      	ldr	r3, [pc, #428]	; (198f4 <main+0x238>)
   19748:	4798      	blx	r3
	
	configure_SD();	
   1974a:	4b6b      	ldr	r3, [pc, #428]	; (198f8 <main+0x23c>)
   1974c:	4798      	blx	r3
	rangefinder_on_off(false);
   1974e:	2000      	movs	r0, #0
   19750:	4b6a      	ldr	r3, [pc, #424]	; (198fc <main+0x240>)
   19752:	4798      	blx	r3
	ioport_reset_pin_mode(BLE_ota);//  Needed to reset pin mode; set in some previous initialization
   19754:	2036      	movs	r0, #54	; 0x36
   19756:	4b6a      	ldr	r3, [pc, #424]	; (19900 <main+0x244>)
   19758:	4798      	blx	r3
	ioport_set_pin_dir(BLE_ota, IOPORT_DIR_OUTPUT);//  Needed to reset pin mode; set in some previous initialization
   1975a:	2101      	movs	r1, #1
   1975c:	2036      	movs	r0, #54	; 0x36
   1975e:	4b69      	ldr	r3, [pc, #420]	; (19904 <main+0x248>)
   19760:	4798      	blx	r3
	ioport_set_pin_level(BLE_ota, false);//  Needed to reset pin mode; set in some previous initialization
   19762:	2100      	movs	r1, #0
   19764:	2036      	movs	r0, #54	; 0x36
   19766:	4b68      	ldr	r3, [pc, #416]	; (19908 <main+0x24c>)
   19768:	4798      	blx	r3
	
	current_state = st_main_display;
   1976a:	4b68      	ldr	r3, [pc, #416]	; (1990c <main+0x250>)
   1976c:	2202      	movs	r2, #2
   1976e:	701a      	strb	r2, [r3, #0]
	current_input = input_1sec;
   19770:	4b67      	ldr	r3, [pc, #412]	; (19910 <main+0x254>)
   19772:	2207      	movs	r2, #7
   19774:	701a      	strb	r2, [r3, #0]
	
	while(1){
		if (current_input==input_none){
   19776:	4b66      	ldr	r3, [pc, #408]	; (19910 <main+0x254>)
   19778:	781b      	ldrb	r3, [r3, #0]
   1977a:	b2db      	uxtb	r3, r3
   1977c:	2b00      	cmp	r3, #0
   1977e:	d10b      	bne.n	19798 <main+0xdc>
			clock_16M_source(clock_low);//  Set clock low to conserve power
   19780:	2002      	movs	r0, #2
   19782:	4b64      	ldr	r3, [pc, #400]	; (19914 <main+0x258>)
   19784:	4798      	blx	r3
			while(current_input == input_none);//hold here until an input
   19786:	46c0      	nop			; (mov r8, r8)
   19788:	4b61      	ldr	r3, [pc, #388]	; (19910 <main+0x254>)
   1978a:	781b      	ldrb	r3, [r3, #0]
   1978c:	b2db      	uxtb	r3, r3
   1978e:	2b00      	cmp	r3, #0
   19790:	d0fa      	beq.n	19788 <main+0xcc>
			clock_16M_source(clock_high);// Move clock back to high speed
   19792:	2003      	movs	r0, #3
   19794:	4b5f      	ldr	r3, [pc, #380]	; (19914 <main+0x258>)
   19796:	4798      	blx	r3
		}
		wdt_reset_count();//
   19798:	4b5f      	ldr	r3, [pc, #380]	; (19918 <main+0x25c>)
   1979a:	4798      	blx	r3
		//  Determine if idle powerdown will be performed
		idle_timeout();//Will produce input=idle_timeout if idle for too long
   1979c:	4b5f      	ldr	r3, [pc, #380]	; (1991c <main+0x260>)
   1979e:	4798      	blx	r3
		
		//  Find state 
		//  State a function of current input		
		state_change = false;
   197a0:	4b5f      	ldr	r3, [pc, #380]	; (19920 <main+0x264>)
   197a2:	2200      	movs	r2, #0
   197a4:	701a      	strb	r2, [r3, #0]
		for (i=0; i<(sizeof(state_nextstate)/sizeof(STATE_NEXTSTATE));i++){
   197a6:	1dfb      	adds	r3, r7, #7
   197a8:	2200      	movs	r2, #0
   197aa:	701a      	strb	r2, [r3, #0]
   197ac:	e03b      	b.n	19826 <main+0x16a>
			if((current_state==state_nextstate[i].current) && (current_input==state_nextstate[i].input)){
   197ae:	1dfb      	adds	r3, r7, #7
   197b0:	781a      	ldrb	r2, [r3, #0]
   197b2:	495c      	ldr	r1, [pc, #368]	; (19924 <main+0x268>)
   197b4:	0013      	movs	r3, r2
   197b6:	005b      	lsls	r3, r3, #1
   197b8:	189b      	adds	r3, r3, r2
   197ba:	5c5a      	ldrb	r2, [r3, r1]
   197bc:	4b53      	ldr	r3, [pc, #332]	; (1990c <main+0x250>)
   197be:	781b      	ldrb	r3, [r3, #0]
   197c0:	b2db      	uxtb	r3, r3
   197c2:	429a      	cmp	r2, r3
   197c4:	d12a      	bne.n	1981c <main+0x160>
   197c6:	1dfb      	adds	r3, r7, #7
   197c8:	781a      	ldrb	r2, [r3, #0]
   197ca:	4956      	ldr	r1, [pc, #344]	; (19924 <main+0x268>)
   197cc:	0013      	movs	r3, r2
   197ce:	005b      	lsls	r3, r3, #1
   197d0:	189b      	adds	r3, r3, r2
   197d2:	18cb      	adds	r3, r1, r3
   197d4:	3301      	adds	r3, #1
   197d6:	781a      	ldrb	r2, [r3, #0]
   197d8:	4b4d      	ldr	r3, [pc, #308]	; (19910 <main+0x254>)
   197da:	781b      	ldrb	r3, [r3, #0]
   197dc:	b2db      	uxtb	r3, r3
   197de:	429a      	cmp	r2, r3
   197e0:	d11c      	bne.n	1981c <main+0x160>
				if(current_state!=state_nextstate[i].next){
   197e2:	1dfb      	adds	r3, r7, #7
   197e4:	781a      	ldrb	r2, [r3, #0]
   197e6:	494f      	ldr	r1, [pc, #316]	; (19924 <main+0x268>)
   197e8:	0013      	movs	r3, r2
   197ea:	005b      	lsls	r3, r3, #1
   197ec:	189b      	adds	r3, r3, r2
   197ee:	18cb      	adds	r3, r1, r3
   197f0:	3302      	adds	r3, #2
   197f2:	781a      	ldrb	r2, [r3, #0]
   197f4:	4b45      	ldr	r3, [pc, #276]	; (1990c <main+0x250>)
   197f6:	781b      	ldrb	r3, [r3, #0]
   197f8:	b2db      	uxtb	r3, r3
   197fa:	429a      	cmp	r2, r3
   197fc:	d018      	beq.n	19830 <main+0x174>
					current_state = state_nextstate[i].next;
   197fe:	1dfb      	adds	r3, r7, #7
   19800:	781a      	ldrb	r2, [r3, #0]
   19802:	4948      	ldr	r1, [pc, #288]	; (19924 <main+0x268>)
   19804:	0013      	movs	r3, r2
   19806:	005b      	lsls	r3, r3, #1
   19808:	189b      	adds	r3, r3, r2
   1980a:	18cb      	adds	r3, r1, r3
   1980c:	3302      	adds	r3, #2
   1980e:	781a      	ldrb	r2, [r3, #0]
   19810:	4b3e      	ldr	r3, [pc, #248]	; (1990c <main+0x250>)
   19812:	701a      	strb	r2, [r3, #0]
					state_change = true;
   19814:	4b42      	ldr	r3, [pc, #264]	; (19920 <main+0x264>)
   19816:	2201      	movs	r2, #1
   19818:	701a      	strb	r2, [r3, #0]
				}
				break;
   1981a:	e009      	b.n	19830 <main+0x174>
		for (i=0; i<(sizeof(state_nextstate)/sizeof(STATE_NEXTSTATE));i++){
   1981c:	1dfb      	adds	r3, r7, #7
   1981e:	781a      	ldrb	r2, [r3, #0]
   19820:	1dfb      	adds	r3, r7, #7
   19822:	3201      	adds	r2, #1
   19824:	701a      	strb	r2, [r3, #0]
   19826:	1dfb      	adds	r3, r7, #7
   19828:	781b      	ldrb	r3, [r3, #0]
   1982a:	2b55      	cmp	r3, #85	; 0x55
   1982c:	d9bf      	bls.n	197ae <main+0xf2>
   1982e:	e000      	b.n	19832 <main+0x176>
				break;
   19830:	46c0      	nop			; (mov r8, r8)
			}
		}
		last_input = current_input;
   19832:	4b37      	ldr	r3, [pc, #220]	; (19910 <main+0x254>)
   19834:	781b      	ldrb	r3, [r3, #0]
   19836:	b2da      	uxtb	r2, r3
   19838:	4b3b      	ldr	r3, [pc, #236]	; (19928 <main+0x26c>)
   1983a:	701a      	strb	r2, [r3, #0]
		current_input = input_none;
   1983c:	4b34      	ldr	r3, [pc, #208]	; (19910 <main+0x254>)
   1983e:	2200      	movs	r2, #0
   19840:	701a      	strb	r2, [r3, #0]
		
		//  Find and run function for current state
		for(i=0;i<(sizeof(state_functions)/sizeof(STATE_FUNCTIONS));i++){
   19842:	1dfb      	adds	r3, r7, #7
   19844:	2200      	movs	r2, #0
   19846:	701a      	strb	r2, [r3, #0]
   19848:	e017      	b.n	1987a <main+0x1be>
			if(current_state==state_functions[i].current){
   1984a:	1dfb      	adds	r3, r7, #7
   1984c:	781a      	ldrb	r2, [r3, #0]
   1984e:	4b37      	ldr	r3, [pc, #220]	; (1992c <main+0x270>)
   19850:	00d2      	lsls	r2, r2, #3
   19852:	5cd2      	ldrb	r2, [r2, r3]
   19854:	4b2d      	ldr	r3, [pc, #180]	; (1990c <main+0x250>)
   19856:	781b      	ldrb	r3, [r3, #0]
   19858:	b2db      	uxtb	r3, r3
   1985a:	429a      	cmp	r2, r3
   1985c:	d108      	bne.n	19870 <main+0x1b4>
				state_functions[i].Function();				
   1985e:	1dfb      	adds	r3, r7, #7
   19860:	781b      	ldrb	r3, [r3, #0]
   19862:	4a32      	ldr	r2, [pc, #200]	; (1992c <main+0x270>)
   19864:	00db      	lsls	r3, r3, #3
   19866:	18d3      	adds	r3, r2, r3
   19868:	3304      	adds	r3, #4
   1986a:	681b      	ldr	r3, [r3, #0]
   1986c:	4798      	blx	r3
				break;
   1986e:	e008      	b.n	19882 <main+0x1c6>
		for(i=0;i<(sizeof(state_functions)/sizeof(STATE_FUNCTIONS));i++){
   19870:	1dfb      	adds	r3, r7, #7
   19872:	781a      	ldrb	r2, [r3, #0]
   19874:	1dfb      	adds	r3, r7, #7
   19876:	3201      	adds	r2, #1
   19878:	701a      	strb	r2, [r3, #0]
   1987a:	1dfb      	adds	r3, r7, #7
   1987c:	781b      	ldrb	r3, [r3, #0]
   1987e:	2b15      	cmp	r3, #21
   19880:	d9e3      	bls.n	1984a <main+0x18e>
		if (current_input==input_none){
   19882:	e778      	b.n	19776 <main+0xba>
   19884:	0001d959 	.word	0x0001d959
   19888:	00018ef9 	.word	0x00018ef9
   1988c:	0001812d 	.word	0x0001812d
   19890:	000181b5 	.word	0x000181b5
   19894:	00004225 	.word	0x00004225
   19898:	000101f9 	.word	0x000101f9
   1989c:	0001060d 	.word	0x0001060d
   198a0:	00014e15 	.word	0x00014e15
   198a4:	0001dbd5 	.word	0x0001dbd5
   198a8:	0001dc81 	.word	0x0001dc81
   198ac:	00001a4d 	.word	0x00001a4d
   198b0:	200012f0 	.word	0x200012f0
   198b4:	00003855 	.word	0x00003855
   198b8:	20001208 	.word	0x20001208
   198bc:	200012f4 	.word	0x200012f4
   198c0:	00003b31 	.word	0x00003b31
   198c4:	200011d0 	.word	0x200011d0
   198c8:	000103bd 	.word	0x000103bd
   198cc:	000104c9 	.word	0x000104c9
   198d0:	00011185 	.word	0x00011185
   198d4:	0001dfd5 	.word	0x0001dfd5
   198d8:	0001e059 	.word	0x0001e059
   198dc:	000042c1 	.word	0x000042c1
   198e0:	0001936d 	.word	0x0001936d
   198e4:	00019561 	.word	0x00019561
   198e8:	00001db9 	.word	0x00001db9
   198ec:	00001e3d 	.word	0x00001e3d
   198f0:	00001c95 	.word	0x00001c95
   198f4:	000016b9 	.word	0x000016b9
   198f8:	0001bcc9 	.word	0x0001bcc9
   198fc:	000035a5 	.word	0x000035a5
   19900:	000192dd 	.word	0x000192dd
   19904:	000192fd 	.word	0x000192fd
   19908:	00019325 	.word	0x00019325
   1990c:	20002db8 	.word	0x20002db8
   19910:	20004134 	.word	0x20004134
   19914:	0001e0b9 	.word	0x0001e0b9
   19918:	00001481 	.word	0x00001481
   1991c:	0000427d 	.word	0x0000427d
   19920:	200000e8 	.word	0x200000e8
   19924:	200000ec 	.word	0x200000ec
   19928:	20004136 	.word	0x20004136
   1992c:	200001f0 	.word	0x200001f0

00019930 <fn_debug_charger>:

		
	}//End of main program while loop
}//end of main

void fn_debug_charger(void){
   19930:	b590      	push	{r4, r7, lr}
   19932:	b087      	sub	sp, #28
   19934:	af00      	add	r7, sp, #0
	uint8_t addressList[] = {
   19936:	2310      	movs	r3, #16
   19938:	18fb      	adds	r3, r7, r3
   1993a:	4a32      	ldr	r2, [pc, #200]	; (19a04 <fn_debug_charger+0xd4>)
   1993c:	6811      	ldr	r1, [r2, #0]
   1993e:	6019      	str	r1, [r3, #0]
   19940:	8892      	ldrh	r2, [r2, #4]
   19942:	809a      	strh	r2, [r3, #4]
	uint8_t i;
	uint8_t data;
	char binStr[10]; 
	
	//  Set initial conditions
	if (state_change) {
   19944:	4b30      	ldr	r3, [pc, #192]	; (19a08 <fn_debug_charger+0xd8>)
   19946:	781b      	ldrb	r3, [r3, #0]
   19948:	b2db      	uxtb	r3, r3
   1994a:	2b00      	cmp	r3, #0
   1994c:	d008      	beq.n	19960 <fn_debug_charger+0x30>
		cur_Y = 2;
   1994e:	4b2f      	ldr	r3, [pc, #188]	; (19a0c <fn_debug_charger+0xdc>)
   19950:	2202      	movs	r2, #2
   19952:	601a      	str	r2, [r3, #0]
		cur_Y_low = 2;
   19954:	4b2e      	ldr	r3, [pc, #184]	; (19a10 <fn_debug_charger+0xe0>)
   19956:	2202      	movs	r2, #2
   19958:	601a      	str	r2, [r3, #0]
		cur_Y_high = 5;
   1995a:	4b2e      	ldr	r3, [pc, #184]	; (19a14 <fn_debug_charger+0xe4>)
   1995c:	2205      	movs	r2, #5
   1995e:	601a      	str	r2, [r3, #0]
	}
		
	// Display
	glcd_clear_buffer();
   19960:	4b2d      	ldr	r3, [pc, #180]	; (19a18 <fn_debug_charger+0xe8>)
   19962:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Charger Debug:");
   19964:	4a2d      	ldr	r2, [pc, #180]	; (19a1c <fn_debug_charger+0xec>)
   19966:	4b2e      	ldr	r3, [pc, #184]	; (19a20 <fn_debug_charger+0xf0>)
   19968:	0010      	movs	r0, r2
   1996a:	0019      	movs	r1, r3
   1996c:	230f      	movs	r3, #15
   1996e:	001a      	movs	r2, r3
   19970:	4b2c      	ldr	r3, [pc, #176]	; (19a24 <fn_debug_charger+0xf4>)
   19972:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   19974:	4b29      	ldr	r3, [pc, #164]	; (19a1c <fn_debug_charger+0xec>)
   19976:	001a      	movs	r2, r3
   19978:	2100      	movs	r1, #0
   1997a:	2000      	movs	r0, #0
   1997c:	4b2a      	ldr	r3, [pc, #168]	; (19a28 <fn_debug_charger+0xf8>)
   1997e:	4798      	blx	r3
	
	for (i=0;i<sizeof(addressList);i++){
   19980:	2317      	movs	r3, #23
   19982:	18fb      	adds	r3, r7, r3
   19984:	2200      	movs	r2, #0
   19986:	701a      	strb	r2, [r3, #0]
   19988:	e031      	b.n	199ee <fn_debug_charger+0xbe>
		data = getChargerRegister(addressList[i]);
   1998a:	2317      	movs	r3, #23
   1998c:	18fb      	adds	r3, r7, r3
   1998e:	781b      	ldrb	r3, [r3, #0]
   19990:	2210      	movs	r2, #16
   19992:	18ba      	adds	r2, r7, r2
   19994:	5cd3      	ldrb	r3, [r2, r3]
   19996:	2216      	movs	r2, #22
   19998:	18bc      	adds	r4, r7, r2
   1999a:	0018      	movs	r0, r3
   1999c:	4b23      	ldr	r3, [pc, #140]	; (19a2c <fn_debug_charger+0xfc>)
   1999e:	4798      	blx	r3
   199a0:	0003      	movs	r3, r0
   199a2:	7023      	strb	r3, [r4, #0]
		bin2str(data, binStr);
   199a4:	1d3a      	adds	r2, r7, #4
   199a6:	2316      	movs	r3, #22
   199a8:	18fb      	adds	r3, r7, r3
   199aa:	781b      	ldrb	r3, [r3, #0]
   199ac:	0011      	movs	r1, r2
   199ae:	0018      	movs	r0, r3
   199b0:	4b1f      	ldr	r3, [pc, #124]	; (19a30 <fn_debug_charger+0x100>)
   199b2:	4798      	blx	r3
		sprintf(display_str, "Add:%02x = %s", 
			addressList[i], binStr);
   199b4:	2317      	movs	r3, #23
   199b6:	18fb      	adds	r3, r7, r3
   199b8:	781b      	ldrb	r3, [r3, #0]
   199ba:	2210      	movs	r2, #16
   199bc:	18ba      	adds	r2, r7, r2
   199be:	5cd3      	ldrb	r3, [r2, r3]
		sprintf(display_str, "Add:%02x = %s", 
   199c0:	001a      	movs	r2, r3
   199c2:	1d3b      	adds	r3, r7, #4
   199c4:	491b      	ldr	r1, [pc, #108]	; (19a34 <fn_debug_charger+0x104>)
   199c6:	4815      	ldr	r0, [pc, #84]	; (19a1c <fn_debug_charger+0xec>)
   199c8:	4c1b      	ldr	r4, [pc, #108]	; (19a38 <fn_debug_charger+0x108>)
   199ca:	47a0      	blx	r4
		glcd_tiny_draw_string(10, i+1, display_str);
   199cc:	2317      	movs	r3, #23
   199ce:	18fb      	adds	r3, r7, r3
   199d0:	781b      	ldrb	r3, [r3, #0]
   199d2:	3301      	adds	r3, #1
   199d4:	b2db      	uxtb	r3, r3
   199d6:	4a11      	ldr	r2, [pc, #68]	; (19a1c <fn_debug_charger+0xec>)
   199d8:	0019      	movs	r1, r3
   199da:	200a      	movs	r0, #10
   199dc:	4b12      	ldr	r3, [pc, #72]	; (19a28 <fn_debug_charger+0xf8>)
   199de:	4798      	blx	r3
	for (i=0;i<sizeof(addressList);i++){
   199e0:	2317      	movs	r3, #23
   199e2:	18fb      	adds	r3, r7, r3
   199e4:	781a      	ldrb	r2, [r3, #0]
   199e6:	2317      	movs	r3, #23
   199e8:	18fb      	adds	r3, r7, r3
   199ea:	3201      	adds	r2, #1
   199ec:	701a      	strb	r2, [r3, #0]
   199ee:	2317      	movs	r3, #23
   199f0:	18fb      	adds	r3, r7, r3
   199f2:	781b      	ldrb	r3, [r3, #0]
   199f4:	2b05      	cmp	r3, #5
   199f6:	d9c8      	bls.n	1998a <fn_debug_charger+0x5a>
	
	
	
	
	
	glcd_write();
   199f8:	4b10      	ldr	r3, [pc, #64]	; (19a3c <fn_debug_charger+0x10c>)
   199fa:	4798      	blx	r3
	
}
   199fc:	46c0      	nop			; (mov r8, r8)
   199fe:	46bd      	mov	sp, r7
   19a00:	b007      	add	sp, #28
   19a02:	bd90      	pop	{r4, r7, pc}
   19a04:	00028d90 	.word	0x00028d90
   19a08:	200000e8 	.word	0x200000e8
   19a0c:	20003494 	.word	0x20003494
   19a10:	2000450c 	.word	0x2000450c
   19a14:	20003fec 	.word	0x20003fec
   19a18:	00015025 	.word	0x00015025
   19a1c:	20003534 	.word	0x20003534
   19a20:	00028d70 	.word	0x00028d70
   19a24:	00023c19 	.word	0x00023c19
   19a28:	00016111 	.word	0x00016111
   19a2c:	00001d01 	.word	0x00001d01
   19a30:	00001d31 	.word	0x00001d31
   19a34:	00028d80 	.word	0x00028d80
   19a38:	00023d31 	.word	0x00023d31
   19a3c:	00015869 	.word	0x00015869

00019a40 <fn_debug_rawData>:


void fn_debug_rawData(void){
   19a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a42:	b0ad      	sub	sp, #180	; 0xb4
   19a44:	af02      	add	r7, sp, #8
	
	struct MEASUREMENT meas_debug;
	quick_measurement( &meas_debug);	
   19a46:	1d3b      	adds	r3, r7, #4
   19a48:	0018      	movs	r0, r3
   19a4a:	4b67      	ldr	r3, [pc, #412]	; (19be8 <fn_debug_rawData+0x1a8>)
   19a4c:	4798      	blx	r3
		

	glcd_clear_buffer();	
   19a4e:	4b67      	ldr	r3, [pc, #412]	; (19bec <fn_debug_rawData+0x1ac>)
   19a50:	4798      	blx	r3
	sprintf(display_str, "Acc 1     Acc 2  Done");
   19a52:	4a67      	ldr	r2, [pc, #412]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19a54:	4b67      	ldr	r3, [pc, #412]	; (19bf4 <fn_debug_rawData+0x1b4>)
   19a56:	0010      	movs	r0, r2
   19a58:	0019      	movs	r1, r3
   19a5a:	2316      	movs	r3, #22
   19a5c:	001a      	movs	r2, r3
   19a5e:	4b66      	ldr	r3, [pc, #408]	; (19bf8 <fn_debug_rawData+0x1b8>)
   19a60:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   19a62:	4b63      	ldr	r3, [pc, #396]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19a64:	001a      	movs	r2, r3
   19a66:	2100      	movs	r1, #0
   19a68:	2000      	movs	r0, #0
   19a6a:	4b64      	ldr	r3, [pc, #400]	; (19bfc <fn_debug_rawData+0x1bc>)
   19a6c:	4798      	blx	r3
	
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.a1xyz[0], meas_debug.a2xyz[0]);
   19a6e:	1d3b      	adds	r3, r7, #4
   19a70:	6a1a      	ldr	r2, [r3, #32]
   19a72:	4b63      	ldr	r3, [pc, #396]	; (19c00 <fn_debug_rawData+0x1c0>)
   19a74:	1c10      	adds	r0, r2, #0
   19a76:	4798      	blx	r3
   19a78:	0005      	movs	r5, r0
   19a7a:	000e      	movs	r6, r1
   19a7c:	1d3b      	adds	r3, r7, #4
   19a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19a80:	4b5f      	ldr	r3, [pc, #380]	; (19c00 <fn_debug_rawData+0x1c0>)
   19a82:	1c10      	adds	r0, r2, #0
   19a84:	4798      	blx	r3
   19a86:	0003      	movs	r3, r0
   19a88:	000c      	movs	r4, r1
   19a8a:	495e      	ldr	r1, [pc, #376]	; (19c04 <fn_debug_rawData+0x1c4>)
   19a8c:	4858      	ldr	r0, [pc, #352]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19a8e:	9300      	str	r3, [sp, #0]
   19a90:	9401      	str	r4, [sp, #4]
   19a92:	002a      	movs	r2, r5
   19a94:	0033      	movs	r3, r6
   19a96:	4c5c      	ldr	r4, [pc, #368]	; (19c08 <fn_debug_rawData+0x1c8>)
   19a98:	47a0      	blx	r4
	glcd_tiny_draw_string(0,1,display_str);
   19a9a:	4b55      	ldr	r3, [pc, #340]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19a9c:	001a      	movs	r2, r3
   19a9e:	2101      	movs	r1, #1
   19aa0:	2000      	movs	r0, #0
   19aa2:	4b56      	ldr	r3, [pc, #344]	; (19bfc <fn_debug_rawData+0x1bc>)
   19aa4:	4798      	blx	r3
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.a1xyz[1], meas_debug.a2xyz[1]);
   19aa6:	1d3b      	adds	r3, r7, #4
   19aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19aaa:	4b55      	ldr	r3, [pc, #340]	; (19c00 <fn_debug_rawData+0x1c0>)
   19aac:	1c10      	adds	r0, r2, #0
   19aae:	4798      	blx	r3
   19ab0:	0005      	movs	r5, r0
   19ab2:	000e      	movs	r6, r1
   19ab4:	1d3b      	adds	r3, r7, #4
   19ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   19ab8:	4b51      	ldr	r3, [pc, #324]	; (19c00 <fn_debug_rawData+0x1c0>)
   19aba:	1c10      	adds	r0, r2, #0
   19abc:	4798      	blx	r3
   19abe:	0003      	movs	r3, r0
   19ac0:	000c      	movs	r4, r1
   19ac2:	4952      	ldr	r1, [pc, #328]	; (19c0c <fn_debug_rawData+0x1cc>)
   19ac4:	484a      	ldr	r0, [pc, #296]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19ac6:	9300      	str	r3, [sp, #0]
   19ac8:	9401      	str	r4, [sp, #4]
   19aca:	002a      	movs	r2, r5
   19acc:	0033      	movs	r3, r6
   19ace:	4c4e      	ldr	r4, [pc, #312]	; (19c08 <fn_debug_rawData+0x1c8>)
   19ad0:	47a0      	blx	r4
	glcd_tiny_draw_string(0,2,display_str);
   19ad2:	4b47      	ldr	r3, [pc, #284]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19ad4:	001a      	movs	r2, r3
   19ad6:	2102      	movs	r1, #2
   19ad8:	2000      	movs	r0, #0
   19ada:	4b48      	ldr	r3, [pc, #288]	; (19bfc <fn_debug_rawData+0x1bc>)
   19adc:	4798      	blx	r3
	sprintf(display_str, "Z: %+0.3f %+0.3f", meas_debug.a1xyz[2], meas_debug.a2xyz[2]);
   19ade:	1d3b      	adds	r3, r7, #4
   19ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19ae2:	4b47      	ldr	r3, [pc, #284]	; (19c00 <fn_debug_rawData+0x1c0>)
   19ae4:	1c10      	adds	r0, r2, #0
   19ae6:	4798      	blx	r3
   19ae8:	0005      	movs	r5, r0
   19aea:	000e      	movs	r6, r1
   19aec:	1d3b      	adds	r3, r7, #4
   19aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   19af0:	4b43      	ldr	r3, [pc, #268]	; (19c00 <fn_debug_rawData+0x1c0>)
   19af2:	1c10      	adds	r0, r2, #0
   19af4:	4798      	blx	r3
   19af6:	0003      	movs	r3, r0
   19af8:	000c      	movs	r4, r1
   19afa:	4945      	ldr	r1, [pc, #276]	; (19c10 <fn_debug_rawData+0x1d0>)
   19afc:	483c      	ldr	r0, [pc, #240]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19afe:	9300      	str	r3, [sp, #0]
   19b00:	9401      	str	r4, [sp, #4]
   19b02:	002a      	movs	r2, r5
   19b04:	0033      	movs	r3, r6
   19b06:	4c40      	ldr	r4, [pc, #256]	; (19c08 <fn_debug_rawData+0x1c8>)
   19b08:	47a0      	blx	r4
	glcd_tiny_draw_string(0,3,display_str);
   19b0a:	4b39      	ldr	r3, [pc, #228]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19b0c:	001a      	movs	r2, r3
   19b0e:	2103      	movs	r1, #3
   19b10:	2000      	movs	r0, #0
   19b12:	4b3a      	ldr	r3, [pc, #232]	; (19bfc <fn_debug_rawData+0x1bc>)
   19b14:	4798      	blx	r3
	
	sprintf(display_str, "Comp 1    Comp 2  ");
   19b16:	4a36      	ldr	r2, [pc, #216]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19b18:	4b3e      	ldr	r3, [pc, #248]	; (19c14 <fn_debug_rawData+0x1d4>)
   19b1a:	0010      	movs	r0, r2
   19b1c:	0019      	movs	r1, r3
   19b1e:	2313      	movs	r3, #19
   19b20:	001a      	movs	r2, r3
   19b22:	4b35      	ldr	r3, [pc, #212]	; (19bf8 <fn_debug_rawData+0x1b8>)
   19b24:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   19b26:	4b32      	ldr	r3, [pc, #200]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19b28:	001a      	movs	r2, r3
   19b2a:	2104      	movs	r1, #4
   19b2c:	2000      	movs	r0, #0
   19b2e:	4b33      	ldr	r3, [pc, #204]	; (19bfc <fn_debug_rawData+0x1bc>)
   19b30:	4798      	blx	r3
	
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.c1xyz[0], meas_debug.c2xyz[0]);
   19b32:	1d3b      	adds	r3, r7, #4
   19b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19b36:	4b32      	ldr	r3, [pc, #200]	; (19c00 <fn_debug_rawData+0x1c0>)
   19b38:	1c10      	adds	r0, r2, #0
   19b3a:	4798      	blx	r3
   19b3c:	0005      	movs	r5, r0
   19b3e:	000e      	movs	r6, r1
   19b40:	1d3b      	adds	r3, r7, #4
   19b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   19b44:	4b2e      	ldr	r3, [pc, #184]	; (19c00 <fn_debug_rawData+0x1c0>)
   19b46:	1c10      	adds	r0, r2, #0
   19b48:	4798      	blx	r3
   19b4a:	0003      	movs	r3, r0
   19b4c:	000c      	movs	r4, r1
   19b4e:	492d      	ldr	r1, [pc, #180]	; (19c04 <fn_debug_rawData+0x1c4>)
   19b50:	4827      	ldr	r0, [pc, #156]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19b52:	9300      	str	r3, [sp, #0]
   19b54:	9401      	str	r4, [sp, #4]
   19b56:	002a      	movs	r2, r5
   19b58:	0033      	movs	r3, r6
   19b5a:	4c2b      	ldr	r4, [pc, #172]	; (19c08 <fn_debug_rawData+0x1c8>)
   19b5c:	47a0      	blx	r4
	glcd_tiny_draw_string(0,5,display_str);
   19b5e:	4b24      	ldr	r3, [pc, #144]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19b60:	001a      	movs	r2, r3
   19b62:	2105      	movs	r1, #5
   19b64:	2000      	movs	r0, #0
   19b66:	4b25      	ldr	r3, [pc, #148]	; (19bfc <fn_debug_rawData+0x1bc>)
   19b68:	4798      	blx	r3
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.c1xyz[1], meas_debug.c2xyz[1]);
   19b6a:	1d3b      	adds	r3, r7, #4
   19b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   19b6e:	4b24      	ldr	r3, [pc, #144]	; (19c00 <fn_debug_rawData+0x1c0>)
   19b70:	1c10      	adds	r0, r2, #0
   19b72:	4798      	blx	r3
   19b74:	0005      	movs	r5, r0
   19b76:	000e      	movs	r6, r1
   19b78:	1d3b      	adds	r3, r7, #4
   19b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   19b7c:	4b20      	ldr	r3, [pc, #128]	; (19c00 <fn_debug_rawData+0x1c0>)
   19b7e:	1c10      	adds	r0, r2, #0
   19b80:	4798      	blx	r3
   19b82:	0003      	movs	r3, r0
   19b84:	000c      	movs	r4, r1
   19b86:	4921      	ldr	r1, [pc, #132]	; (19c0c <fn_debug_rawData+0x1cc>)
   19b88:	4819      	ldr	r0, [pc, #100]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19b8a:	9300      	str	r3, [sp, #0]
   19b8c:	9401      	str	r4, [sp, #4]
   19b8e:	002a      	movs	r2, r5
   19b90:	0033      	movs	r3, r6
   19b92:	4c1d      	ldr	r4, [pc, #116]	; (19c08 <fn_debug_rawData+0x1c8>)
   19b94:	47a0      	blx	r4
	glcd_tiny_draw_string(0,6,display_str);
   19b96:	4b16      	ldr	r3, [pc, #88]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19b98:	001a      	movs	r2, r3
   19b9a:	2106      	movs	r1, #6
   19b9c:	2000      	movs	r0, #0
   19b9e:	4b17      	ldr	r3, [pc, #92]	; (19bfc <fn_debug_rawData+0x1bc>)
   19ba0:	4798      	blx	r3
	sprintf(display_str, "Z: %+0.3f %+0.3f Exit", meas_debug.c1xyz[2], meas_debug.c2xyz[2]);
   19ba2:	1d3b      	adds	r3, r7, #4
   19ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   19ba6:	4b16      	ldr	r3, [pc, #88]	; (19c00 <fn_debug_rawData+0x1c0>)
   19ba8:	1c10      	adds	r0, r2, #0
   19baa:	4798      	blx	r3
   19bac:	0005      	movs	r5, r0
   19bae:	000e      	movs	r6, r1
   19bb0:	1d3b      	adds	r3, r7, #4
   19bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   19bb4:	4b12      	ldr	r3, [pc, #72]	; (19c00 <fn_debug_rawData+0x1c0>)
   19bb6:	1c10      	adds	r0, r2, #0
   19bb8:	4798      	blx	r3
   19bba:	0003      	movs	r3, r0
   19bbc:	000c      	movs	r4, r1
   19bbe:	4916      	ldr	r1, [pc, #88]	; (19c18 <fn_debug_rawData+0x1d8>)
   19bc0:	480b      	ldr	r0, [pc, #44]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19bc2:	9300      	str	r3, [sp, #0]
   19bc4:	9401      	str	r4, [sp, #4]
   19bc6:	002a      	movs	r2, r5
   19bc8:	0033      	movs	r3, r6
   19bca:	4c0f      	ldr	r4, [pc, #60]	; (19c08 <fn_debug_rawData+0x1c8>)
   19bcc:	47a0      	blx	r4
	glcd_tiny_draw_string(0,7,display_str);
   19bce:	4b08      	ldr	r3, [pc, #32]	; (19bf0 <fn_debug_rawData+0x1b0>)
   19bd0:	001a      	movs	r2, r3
   19bd2:	2107      	movs	r1, #7
   19bd4:	2000      	movs	r0, #0
   19bd6:	4b09      	ldr	r3, [pc, #36]	; (19bfc <fn_debug_rawData+0x1bc>)
   19bd8:	4798      	blx	r3
	glcd_write();	
   19bda:	4b10      	ldr	r3, [pc, #64]	; (19c1c <fn_debug_rawData+0x1dc>)
   19bdc:	4798      	blx	r3
}
   19bde:	46c0      	nop			; (mov r8, r8)
   19be0:	46bd      	mov	sp, r7
   19be2:	b02b      	add	sp, #172	; 0xac
   19be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19be6:	46c0      	nop			; (mov r8, r8)
   19be8:	00002cf1 	.word	0x00002cf1
   19bec:	00015025 	.word	0x00015025
   19bf0:	20003534 	.word	0x20003534
   19bf4:	00028d98 	.word	0x00028d98
   19bf8:	00023c19 	.word	0x00023c19
   19bfc:	00016111 	.word	0x00016111
   19c00:	00023a0d 	.word	0x00023a0d
   19c04:	00028db0 	.word	0x00028db0
   19c08:	00023d31 	.word	0x00023d31
   19c0c:	00028dc4 	.word	0x00028dc4
   19c10:	00028dd8 	.word	0x00028dd8
   19c14:	00028dec 	.word	0x00028dec
   19c18:	00028e00 	.word	0x00028e00
   19c1c:	00015869 	.word	0x00015869

00019c20 <fn_process_calibration>:

void fn_process_calibration(void){
   19c20:	b580      	push	{r7, lr}
   19c22:	b082      	sub	sp, #8
   19c24:	af00      	add	r7, sp, #0
	uint8_t i, j;
	
	// Disable Watchdog Timer
	wdt_disable();
   19c26:	4bbc      	ldr	r3, [pc, #752]	; (19f18 <fn_process_calibration+0x2f8>)
   19c28:	4798      	blx	r3
	
	// Start with empty cal structures
	cal_init_struct(&a1_calst);
   19c2a:	4bbc      	ldr	r3, [pc, #752]	; (19f1c <fn_process_calibration+0x2fc>)
   19c2c:	0018      	movs	r0, r3
   19c2e:	4bbc      	ldr	r3, [pc, #752]	; (19f20 <fn_process_calibration+0x300>)
   19c30:	4798      	blx	r3
	cal_init_struct(&a2_calst);
   19c32:	4bbc      	ldr	r3, [pc, #752]	; (19f24 <fn_process_calibration+0x304>)
   19c34:	0018      	movs	r0, r3
   19c36:	4bba      	ldr	r3, [pc, #744]	; (19f20 <fn_process_calibration+0x300>)
   19c38:	4798      	blx	r3
	cal_init_struct(&c1_calst);
   19c3a:	4bbb      	ldr	r3, [pc, #748]	; (19f28 <fn_process_calibration+0x308>)
   19c3c:	0018      	movs	r0, r3
   19c3e:	4bb8      	ldr	r3, [pc, #736]	; (19f20 <fn_process_calibration+0x300>)
   19c40:	4798      	blx	r3
	cal_init_struct(&c2_calst);	
   19c42:	4bba      	ldr	r3, [pc, #744]	; (19f2c <fn_process_calibration+0x30c>)
   19c44:	0018      	movs	r0, r3
   19c46:	4bb6      	ldr	r3, [pc, #728]	; (19f20 <fn_process_calibration+0x300>)
   19c48:	4798      	blx	r3
	//  Gain and Offset Calibration
	glcd_clear_buffer();
   19c4a:	4bb9      	ldr	r3, [pc, #740]	; (19f30 <fn_process_calibration+0x310>)
   19c4c:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   19c4e:	4ab9      	ldr	r2, [pc, #740]	; (19f34 <fn_process_calibration+0x314>)
   19c50:	4bb9      	ldr	r3, [pc, #740]	; (19f38 <fn_process_calibration+0x318>)
   19c52:	0010      	movs	r0, r2
   19c54:	0019      	movs	r1, r3
   19c56:	2313      	movs	r3, #19
   19c58:	001a      	movs	r2, r3
   19c5a:	4bb8      	ldr	r3, [pc, #736]	; (19f3c <fn_process_calibration+0x31c>)
   19c5c:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   19c5e:	4bb5      	ldr	r3, [pc, #724]	; (19f34 <fn_process_calibration+0x314>)
   19c60:	001a      	movs	r2, r3
   19c62:	2100      	movs	r1, #0
   19c64:	2000      	movs	r0, #0
   19c66:	4bb6      	ldr	r3, [pc, #728]	; (19f40 <fn_process_calibration+0x320>)
   19c68:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   19c6a:	4ab2      	ldr	r2, [pc, #712]	; (19f34 <fn_process_calibration+0x314>)
   19c6c:	4bb5      	ldr	r3, [pc, #724]	; (19f44 <fn_process_calibration+0x324>)
   19c6e:	0010      	movs	r0, r2
   19c70:	0019      	movs	r1, r3
   19c72:	230d      	movs	r3, #13
   19c74:	001a      	movs	r2, r3
   19c76:	4bb1      	ldr	r3, [pc, #708]	; (19f3c <fn_process_calibration+0x31c>)
   19c78:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   19c7a:	4bae      	ldr	r3, [pc, #696]	; (19f34 <fn_process_calibration+0x314>)
   19c7c:	001a      	movs	r2, r3
   19c7e:	2102      	movs	r1, #2
   19c80:	2000      	movs	r0, #0
   19c82:	4baf      	ldr	r3, [pc, #700]	; (19f40 <fn_process_calibration+0x320>)
   19c84:	4798      	blx	r3
	sprintf(display_str, "Gain and Offset Cal");
   19c86:	4aab      	ldr	r2, [pc, #684]	; (19f34 <fn_process_calibration+0x314>)
   19c88:	4baf      	ldr	r3, [pc, #700]	; (19f48 <fn_process_calibration+0x328>)
   19c8a:	0010      	movs	r0, r2
   19c8c:	0019      	movs	r1, r3
   19c8e:	2314      	movs	r3, #20
   19c90:	001a      	movs	r2, r3
   19c92:	4baa      	ldr	r3, [pc, #680]	; (19f3c <fn_process_calibration+0x31c>)
   19c94:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   19c96:	4ba7      	ldr	r3, [pc, #668]	; (19f34 <fn_process_calibration+0x314>)
   19c98:	001a      	movs	r2, r3
   19c9a:	2103      	movs	r1, #3
   19c9c:	2000      	movs	r0, #0
   19c9e:	4ba8      	ldr	r3, [pc, #672]	; (19f40 <fn_process_calibration+0x320>)
   19ca0:	4798      	blx	r3
	glcd_write();	
   19ca2:	4baa      	ldr	r3, [pc, #680]	; (19f4c <fn_process_calibration+0x32c>)
   19ca4:	4798      	blx	r3
	
	//  Perform gain and offset calibration per ellipsoid fit
	sprintf(display_str, "Accelerometer 1      ");
   19ca6:	4aa3      	ldr	r2, [pc, #652]	; (19f34 <fn_process_calibration+0x314>)
   19ca8:	4ba9      	ldr	r3, [pc, #676]	; (19f50 <fn_process_calibration+0x330>)
   19caa:	0010      	movs	r0, r2
   19cac:	0019      	movs	r1, r3
   19cae:	2316      	movs	r3, #22
   19cb0:	001a      	movs	r2, r3
   19cb2:	4ba2      	ldr	r3, [pc, #648]	; (19f3c <fn_process_calibration+0x31c>)
   19cb4:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   19cb6:	4b9f      	ldr	r3, [pc, #636]	; (19f34 <fn_process_calibration+0x314>)
   19cb8:	001a      	movs	r2, r3
   19cba:	2104      	movs	r1, #4
   19cbc:	2000      	movs	r0, #0
   19cbe:	4ba0      	ldr	r3, [pc, #640]	; (19f40 <fn_process_calibration+0x320>)
   19cc0:	4798      	blx	r3
	glcd_write();	
   19cc2:	4ba2      	ldr	r3, [pc, #648]	; (19f4c <fn_process_calibration+0x32c>)
   19cc4:	4798      	blx	r3
	cal_gain_off(a1raw, &a1_calst);// Gain and Offset Calibration, Accelerometer 1
   19cc6:	4a95      	ldr	r2, [pc, #596]	; (19f1c <fn_process_calibration+0x2fc>)
   19cc8:	4ba2      	ldr	r3, [pc, #648]	; (19f54 <fn_process_calibration+0x334>)
   19cca:	0011      	movs	r1, r2
   19ccc:	0018      	movs	r0, r3
   19cce:	4ba2      	ldr	r3, [pc, #648]	; (19f58 <fn_process_calibration+0x338>)
   19cd0:	4798      	blx	r3
	sprintf(display_str, "Accelerometer 2      ");
   19cd2:	4a98      	ldr	r2, [pc, #608]	; (19f34 <fn_process_calibration+0x314>)
   19cd4:	4ba1      	ldr	r3, [pc, #644]	; (19f5c <fn_process_calibration+0x33c>)
   19cd6:	0010      	movs	r0, r2
   19cd8:	0019      	movs	r1, r3
   19cda:	2316      	movs	r3, #22
   19cdc:	001a      	movs	r2, r3
   19cde:	4b97      	ldr	r3, [pc, #604]	; (19f3c <fn_process_calibration+0x31c>)
   19ce0:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   19ce2:	4b94      	ldr	r3, [pc, #592]	; (19f34 <fn_process_calibration+0x314>)
   19ce4:	001a      	movs	r2, r3
   19ce6:	2104      	movs	r1, #4
   19ce8:	2000      	movs	r0, #0
   19cea:	4b95      	ldr	r3, [pc, #596]	; (19f40 <fn_process_calibration+0x320>)
   19cec:	4798      	blx	r3
	glcd_write();
   19cee:	4b97      	ldr	r3, [pc, #604]	; (19f4c <fn_process_calibration+0x32c>)
   19cf0:	4798      	blx	r3
	cal_gain_off(a2raw, &a2_calst);// Gain and Offset Calibration, Accelerometer 2
   19cf2:	4a8c      	ldr	r2, [pc, #560]	; (19f24 <fn_process_calibration+0x304>)
   19cf4:	4b9a      	ldr	r3, [pc, #616]	; (19f60 <fn_process_calibration+0x340>)
   19cf6:	0011      	movs	r1, r2
   19cf8:	0018      	movs	r0, r3
   19cfa:	4b97      	ldr	r3, [pc, #604]	; (19f58 <fn_process_calibration+0x338>)
   19cfc:	4798      	blx	r3
	sprintf(display_str, "Compass 1            ");
   19cfe:	4a8d      	ldr	r2, [pc, #564]	; (19f34 <fn_process_calibration+0x314>)
   19d00:	4b98      	ldr	r3, [pc, #608]	; (19f64 <fn_process_calibration+0x344>)
   19d02:	0010      	movs	r0, r2
   19d04:	0019      	movs	r1, r3
   19d06:	2316      	movs	r3, #22
   19d08:	001a      	movs	r2, r3
   19d0a:	4b8c      	ldr	r3, [pc, #560]	; (19f3c <fn_process_calibration+0x31c>)
   19d0c:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   19d0e:	4b89      	ldr	r3, [pc, #548]	; (19f34 <fn_process_calibration+0x314>)
   19d10:	001a      	movs	r2, r3
   19d12:	2104      	movs	r1, #4
   19d14:	2000      	movs	r0, #0
   19d16:	4b8a      	ldr	r3, [pc, #552]	; (19f40 <fn_process_calibration+0x320>)
   19d18:	4798      	blx	r3
	glcd_write();
   19d1a:	4b8c      	ldr	r3, [pc, #560]	; (19f4c <fn_process_calibration+0x32c>)
   19d1c:	4798      	blx	r3
	cal_gain_off(c1raw, &c1_calst);// Gain and Offset Calibration, Compass 1
   19d1e:	4a82      	ldr	r2, [pc, #520]	; (19f28 <fn_process_calibration+0x308>)
   19d20:	4b91      	ldr	r3, [pc, #580]	; (19f68 <fn_process_calibration+0x348>)
   19d22:	0011      	movs	r1, r2
   19d24:	0018      	movs	r0, r3
   19d26:	4b8c      	ldr	r3, [pc, #560]	; (19f58 <fn_process_calibration+0x338>)
   19d28:	4798      	blx	r3
	sprintf(display_str, "Compass 2            ");
   19d2a:	4a82      	ldr	r2, [pc, #520]	; (19f34 <fn_process_calibration+0x314>)
   19d2c:	4b8f      	ldr	r3, [pc, #572]	; (19f6c <fn_process_calibration+0x34c>)
   19d2e:	0010      	movs	r0, r2
   19d30:	0019      	movs	r1, r3
   19d32:	2316      	movs	r3, #22
   19d34:	001a      	movs	r2, r3
   19d36:	4b81      	ldr	r3, [pc, #516]	; (19f3c <fn_process_calibration+0x31c>)
   19d38:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   19d3a:	4b7e      	ldr	r3, [pc, #504]	; (19f34 <fn_process_calibration+0x314>)
   19d3c:	001a      	movs	r2, r3
   19d3e:	2104      	movs	r1, #4
   19d40:	2000      	movs	r0, #0
   19d42:	4b7f      	ldr	r3, [pc, #508]	; (19f40 <fn_process_calibration+0x320>)
   19d44:	4798      	blx	r3
	glcd_write();
   19d46:	4b81      	ldr	r3, [pc, #516]	; (19f4c <fn_process_calibration+0x32c>)
   19d48:	4798      	blx	r3
	cal_gain_off(c2raw, &c2_calst);	// Gain and Offset Calibration, Compass 2
   19d4a:	4a78      	ldr	r2, [pc, #480]	; (19f2c <fn_process_calibration+0x30c>)
   19d4c:	4b88      	ldr	r3, [pc, #544]	; (19f70 <fn_process_calibration+0x350>)
   19d4e:	0011      	movs	r1, r2
   19d50:	0018      	movs	r0, r3
   19d52:	4b81      	ldr	r3, [pc, #516]	; (19f58 <fn_process_calibration+0x338>)
   19d54:	4798      	blx	r3
	//  Apply gain and offset calibration
	for (i=0;i<n_points;i++){
   19d56:	1dfb      	adds	r3, r7, #7
   19d58:	2200      	movs	r2, #0
   19d5a:	701a      	strb	r2, [r3, #0]
   19d5c:	e054      	b.n	19e08 <fn_process_calibration+0x1e8>
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   19d5e:	1dfb      	adds	r3, r7, #7
   19d60:	781a      	ldrb	r2, [r3, #0]
   19d62:	0013      	movs	r3, r2
   19d64:	005b      	lsls	r3, r3, #1
   19d66:	189b      	adds	r3, r3, r2
   19d68:	009b      	lsls	r3, r3, #2
   19d6a:	4a7a      	ldr	r2, [pc, #488]	; (19f54 <fn_process_calibration+0x334>)
   19d6c:	1898      	adds	r0, r3, r2
   19d6e:	1dfb      	adds	r3, r7, #7
   19d70:	781a      	ldrb	r2, [r3, #0]
   19d72:	0013      	movs	r3, r2
   19d74:	005b      	lsls	r3, r3, #1
   19d76:	189b      	adds	r3, r3, r2
   19d78:	009b      	lsls	r3, r3, #2
   19d7a:	4a7e      	ldr	r2, [pc, #504]	; (19f74 <fn_process_calibration+0x354>)
   19d7c:	189b      	adds	r3, r3, r2
   19d7e:	4a67      	ldr	r2, [pc, #412]	; (19f1c <fn_process_calibration+0x2fc>)
   19d80:	0019      	movs	r1, r3
   19d82:	4b7d      	ldr	r3, [pc, #500]	; (19f78 <fn_process_calibration+0x358>)
   19d84:	4798      	blx	r3
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   19d86:	1dfb      	adds	r3, r7, #7
   19d88:	781a      	ldrb	r2, [r3, #0]
   19d8a:	0013      	movs	r3, r2
   19d8c:	005b      	lsls	r3, r3, #1
   19d8e:	189b      	adds	r3, r3, r2
   19d90:	009b      	lsls	r3, r3, #2
   19d92:	4a73      	ldr	r2, [pc, #460]	; (19f60 <fn_process_calibration+0x340>)
   19d94:	1898      	adds	r0, r3, r2
   19d96:	1dfb      	adds	r3, r7, #7
   19d98:	781a      	ldrb	r2, [r3, #0]
   19d9a:	0013      	movs	r3, r2
   19d9c:	005b      	lsls	r3, r3, #1
   19d9e:	189b      	adds	r3, r3, r2
   19da0:	009b      	lsls	r3, r3, #2
   19da2:	4a76      	ldr	r2, [pc, #472]	; (19f7c <fn_process_calibration+0x35c>)
   19da4:	189b      	adds	r3, r3, r2
   19da6:	4a5f      	ldr	r2, [pc, #380]	; (19f24 <fn_process_calibration+0x304>)
   19da8:	0019      	movs	r1, r3
   19daa:	4b73      	ldr	r3, [pc, #460]	; (19f78 <fn_process_calibration+0x358>)
   19dac:	4798      	blx	r3
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   19dae:	1dfb      	adds	r3, r7, #7
   19db0:	781a      	ldrb	r2, [r3, #0]
   19db2:	0013      	movs	r3, r2
   19db4:	005b      	lsls	r3, r3, #1
   19db6:	189b      	adds	r3, r3, r2
   19db8:	009b      	lsls	r3, r3, #2
   19dba:	4a6b      	ldr	r2, [pc, #428]	; (19f68 <fn_process_calibration+0x348>)
   19dbc:	1898      	adds	r0, r3, r2
   19dbe:	1dfb      	adds	r3, r7, #7
   19dc0:	781a      	ldrb	r2, [r3, #0]
   19dc2:	0013      	movs	r3, r2
   19dc4:	005b      	lsls	r3, r3, #1
   19dc6:	189b      	adds	r3, r3, r2
   19dc8:	009b      	lsls	r3, r3, #2
   19dca:	4a6d      	ldr	r2, [pc, #436]	; (19f80 <fn_process_calibration+0x360>)
   19dcc:	189b      	adds	r3, r3, r2
   19dce:	4a56      	ldr	r2, [pc, #344]	; (19f28 <fn_process_calibration+0x308>)
   19dd0:	0019      	movs	r1, r3
   19dd2:	4b69      	ldr	r3, [pc, #420]	; (19f78 <fn_process_calibration+0x358>)
   19dd4:	4798      	blx	r3
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   19dd6:	1dfb      	adds	r3, r7, #7
   19dd8:	781a      	ldrb	r2, [r3, #0]
   19dda:	0013      	movs	r3, r2
   19ddc:	005b      	lsls	r3, r3, #1
   19dde:	189b      	adds	r3, r3, r2
   19de0:	009b      	lsls	r3, r3, #2
   19de2:	4a63      	ldr	r2, [pc, #396]	; (19f70 <fn_process_calibration+0x350>)
   19de4:	1898      	adds	r0, r3, r2
   19de6:	1dfb      	adds	r3, r7, #7
   19de8:	781a      	ldrb	r2, [r3, #0]
   19dea:	0013      	movs	r3, r2
   19dec:	005b      	lsls	r3, r3, #1
   19dee:	189b      	adds	r3, r3, r2
   19df0:	009b      	lsls	r3, r3, #2
   19df2:	4a64      	ldr	r2, [pc, #400]	; (19f84 <fn_process_calibration+0x364>)
   19df4:	189b      	adds	r3, r3, r2
   19df6:	4a4d      	ldr	r2, [pc, #308]	; (19f2c <fn_process_calibration+0x30c>)
   19df8:	0019      	movs	r1, r3
   19dfa:	4b5f      	ldr	r3, [pc, #380]	; (19f78 <fn_process_calibration+0x358>)
   19dfc:	4798      	blx	r3
	for (i=0;i<n_points;i++){
   19dfe:	1dfb      	adds	r3, r7, #7
   19e00:	781a      	ldrb	r2, [r3, #0]
   19e02:	1dfb      	adds	r3, r7, #7
   19e04:	3201      	adds	r2, #1
   19e06:	701a      	strb	r2, [r3, #0]
   19e08:	1dfb      	adds	r3, r7, #7
   19e0a:	781a      	ldrb	r2, [r3, #0]
   19e0c:	4b5e      	ldr	r3, [pc, #376]	; (19f88 <fn_process_calibration+0x368>)
   19e0e:	681b      	ldr	r3, [r3, #0]
   19e10:	429a      	cmp	r2, r3
   19e12:	d3a4      	bcc.n	19d5e <fn_process_calibration+0x13e>
	}	
	
	//  Perform Axis Misalignment Calibration
	glcd_clear_buffer();
   19e14:	4b46      	ldr	r3, [pc, #280]	; (19f30 <fn_process_calibration+0x310>)
   19e16:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   19e18:	4a46      	ldr	r2, [pc, #280]	; (19f34 <fn_process_calibration+0x314>)
   19e1a:	4b47      	ldr	r3, [pc, #284]	; (19f38 <fn_process_calibration+0x318>)
   19e1c:	0010      	movs	r0, r2
   19e1e:	0019      	movs	r1, r3
   19e20:	2313      	movs	r3, #19
   19e22:	001a      	movs	r2, r3
   19e24:	4b45      	ldr	r3, [pc, #276]	; (19f3c <fn_process_calibration+0x31c>)
   19e26:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   19e28:	4b42      	ldr	r3, [pc, #264]	; (19f34 <fn_process_calibration+0x314>)
   19e2a:	001a      	movs	r2, r3
   19e2c:	2100      	movs	r1, #0
   19e2e:	2000      	movs	r0, #0
   19e30:	4b43      	ldr	r3, [pc, #268]	; (19f40 <fn_process_calibration+0x320>)
   19e32:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   19e34:	4a3f      	ldr	r2, [pc, #252]	; (19f34 <fn_process_calibration+0x314>)
   19e36:	4b43      	ldr	r3, [pc, #268]	; (19f44 <fn_process_calibration+0x324>)
   19e38:	0010      	movs	r0, r2
   19e3a:	0019      	movs	r1, r3
   19e3c:	230d      	movs	r3, #13
   19e3e:	001a      	movs	r2, r3
   19e40:	4b3e      	ldr	r3, [pc, #248]	; (19f3c <fn_process_calibration+0x31c>)
   19e42:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   19e44:	4b3b      	ldr	r3, [pc, #236]	; (19f34 <fn_process_calibration+0x314>)
   19e46:	001a      	movs	r2, r3
   19e48:	2102      	movs	r1, #2
   19e4a:	2000      	movs	r0, #0
   19e4c:	4b3c      	ldr	r3, [pc, #240]	; (19f40 <fn_process_calibration+0x320>)
   19e4e:	4798      	blx	r3
	sprintf(display_str, "Axis Misalignments:");
   19e50:	4a38      	ldr	r2, [pc, #224]	; (19f34 <fn_process_calibration+0x314>)
   19e52:	4b4e      	ldr	r3, [pc, #312]	; (19f8c <fn_process_calibration+0x36c>)
   19e54:	0010      	movs	r0, r2
   19e56:	0019      	movs	r1, r3
   19e58:	2314      	movs	r3, #20
   19e5a:	001a      	movs	r2, r3
   19e5c:	4b37      	ldr	r3, [pc, #220]	; (19f3c <fn_process_calibration+0x31c>)
   19e5e:	4798      	blx	r3
	sprintf(display_str, "Accelerometer 1      ");
   19e60:	4a34      	ldr	r2, [pc, #208]	; (19f34 <fn_process_calibration+0x314>)
   19e62:	4b3b      	ldr	r3, [pc, #236]	; (19f50 <fn_process_calibration+0x330>)
   19e64:	0010      	movs	r0, r2
   19e66:	0019      	movs	r1, r3
   19e68:	2316      	movs	r3, #22
   19e6a:	001a      	movs	r2, r3
   19e6c:	4b33      	ldr	r3, [pc, #204]	; (19f3c <fn_process_calibration+0x31c>)
   19e6e:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   19e70:	4b30      	ldr	r3, [pc, #192]	; (19f34 <fn_process_calibration+0x314>)
   19e72:	001a      	movs	r2, r3
   19e74:	2104      	movs	r1, #4
   19e76:	2000      	movs	r0, #0
   19e78:	4b31      	ldr	r3, [pc, #196]	; (19f40 <fn_process_calibration+0x320>)
   19e7a:	4798      	blx	r3
   19e7c:	4b33      	ldr	r3, [pc, #204]	; (19f4c <fn_process_calibration+0x32c>)
   19e7e:	4798      	blx	r3
	cal_axis_misalignments(a1cal, &a1_calst); // Sensor axis misalignments, Accelerometer 1
   19e80:	4a26      	ldr	r2, [pc, #152]	; (19f1c <fn_process_calibration+0x2fc>)
   19e82:	4b3c      	ldr	r3, [pc, #240]	; (19f74 <fn_process_calibration+0x354>)
   19e84:	0011      	movs	r1, r2
   19e86:	0018      	movs	r0, r3
   19e88:	4b41      	ldr	r3, [pc, #260]	; (19f90 <fn_process_calibration+0x370>)
   19e8a:	4798      	blx	r3
	sprintf(display_str, "Accelerometer 2      ");
   19e8c:	4a29      	ldr	r2, [pc, #164]	; (19f34 <fn_process_calibration+0x314>)
   19e8e:	4b33      	ldr	r3, [pc, #204]	; (19f5c <fn_process_calibration+0x33c>)
   19e90:	0010      	movs	r0, r2
   19e92:	0019      	movs	r1, r3
   19e94:	2316      	movs	r3, #22
   19e96:	001a      	movs	r2, r3
   19e98:	4b28      	ldr	r3, [pc, #160]	; (19f3c <fn_process_calibration+0x31c>)
   19e9a:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   19e9c:	4b25      	ldr	r3, [pc, #148]	; (19f34 <fn_process_calibration+0x314>)
   19e9e:	001a      	movs	r2, r3
   19ea0:	2104      	movs	r1, #4
   19ea2:	2000      	movs	r0, #0
   19ea4:	4b26      	ldr	r3, [pc, #152]	; (19f40 <fn_process_calibration+0x320>)
   19ea6:	4798      	blx	r3
   19ea8:	4b28      	ldr	r3, [pc, #160]	; (19f4c <fn_process_calibration+0x32c>)
   19eaa:	4798      	blx	r3
	cal_axis_misalignments(a2cal, &a2_calst);// Sensor axis misalignments, Accelerometer 2
   19eac:	4a1d      	ldr	r2, [pc, #116]	; (19f24 <fn_process_calibration+0x304>)
   19eae:	4b33      	ldr	r3, [pc, #204]	; (19f7c <fn_process_calibration+0x35c>)
   19eb0:	0011      	movs	r1, r2
   19eb2:	0018      	movs	r0, r3
   19eb4:	4b36      	ldr	r3, [pc, #216]	; (19f90 <fn_process_calibration+0x370>)
   19eb6:	4798      	blx	r3
	sprintf(display_str, "Compass 1            ");
   19eb8:	4a1e      	ldr	r2, [pc, #120]	; (19f34 <fn_process_calibration+0x314>)
   19eba:	4b2a      	ldr	r3, [pc, #168]	; (19f64 <fn_process_calibration+0x344>)
   19ebc:	0010      	movs	r0, r2
   19ebe:	0019      	movs	r1, r3
   19ec0:	2316      	movs	r3, #22
   19ec2:	001a      	movs	r2, r3
   19ec4:	4b1d      	ldr	r3, [pc, #116]	; (19f3c <fn_process_calibration+0x31c>)
   19ec6:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   19ec8:	4b1a      	ldr	r3, [pc, #104]	; (19f34 <fn_process_calibration+0x314>)
   19eca:	001a      	movs	r2, r3
   19ecc:	2104      	movs	r1, #4
   19ece:	2000      	movs	r0, #0
   19ed0:	4b1b      	ldr	r3, [pc, #108]	; (19f40 <fn_process_calibration+0x320>)
   19ed2:	4798      	blx	r3
   19ed4:	4b1d      	ldr	r3, [pc, #116]	; (19f4c <fn_process_calibration+0x32c>)
   19ed6:	4798      	blx	r3
	cal_axis_misalignments(c1cal, &c1_calst);// Sensor axis misalignments, Compass 1
   19ed8:	4a13      	ldr	r2, [pc, #76]	; (19f28 <fn_process_calibration+0x308>)
   19eda:	4b29      	ldr	r3, [pc, #164]	; (19f80 <fn_process_calibration+0x360>)
   19edc:	0011      	movs	r1, r2
   19ede:	0018      	movs	r0, r3
   19ee0:	4b2b      	ldr	r3, [pc, #172]	; (19f90 <fn_process_calibration+0x370>)
   19ee2:	4798      	blx	r3
	sprintf(display_str, "Compass 2            ");
   19ee4:	4a13      	ldr	r2, [pc, #76]	; (19f34 <fn_process_calibration+0x314>)
   19ee6:	4b21      	ldr	r3, [pc, #132]	; (19f6c <fn_process_calibration+0x34c>)
   19ee8:	0010      	movs	r0, r2
   19eea:	0019      	movs	r1, r3
   19eec:	2316      	movs	r3, #22
   19eee:	001a      	movs	r2, r3
   19ef0:	4b12      	ldr	r3, [pc, #72]	; (19f3c <fn_process_calibration+0x31c>)
   19ef2:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);	glcd_write();
   19ef4:	4b0f      	ldr	r3, [pc, #60]	; (19f34 <fn_process_calibration+0x314>)
   19ef6:	001a      	movs	r2, r3
   19ef8:	2104      	movs	r1, #4
   19efa:	2000      	movs	r0, #0
   19efc:	4b10      	ldr	r3, [pc, #64]	; (19f40 <fn_process_calibration+0x320>)
   19efe:	4798      	blx	r3
   19f00:	4b12      	ldr	r3, [pc, #72]	; (19f4c <fn_process_calibration+0x32c>)
   19f02:	4798      	blx	r3
	cal_axis_misalignments(c2cal, &c2_calst);// Sensor axis misalignments, Compass 2
   19f04:	4a09      	ldr	r2, [pc, #36]	; (19f2c <fn_process_calibration+0x30c>)
   19f06:	4b1f      	ldr	r3, [pc, #124]	; (19f84 <fn_process_calibration+0x364>)
   19f08:	0011      	movs	r1, r2
   19f0a:	0018      	movs	r0, r3
   19f0c:	4b20      	ldr	r3, [pc, #128]	; (19f90 <fn_process_calibration+0x370>)
   19f0e:	4798      	blx	r3
	//  Apply gain and offset calibration
	for (i=0;i<n_points;i++){
   19f10:	1dfb      	adds	r3, r7, #7
   19f12:	2200      	movs	r2, #0
   19f14:	701a      	strb	r2, [r3, #0]
   19f16:	e092      	b.n	1a03e <fn_process_calibration+0x41e>
   19f18:	00004251 	.word	0x00004251
   19f1c:	20004f38 	.word	0x20004f38
   19f20:	0000e3b9 	.word	0x0000e3b9
   19f24:	20004b14 	.word	0x20004b14
   19f28:	20003434 	.word	0x20003434
   19f2c:	200023ac 	.word	0x200023ac
   19f30:	00015025 	.word	0x00015025
   19f34:	20003534 	.word	0x20003534
   19f38:	00028e18 	.word	0x00028e18
   19f3c:	00023c19 	.word	0x00023c19
   19f40:	00016111 	.word	0x00016111
   19f44:	00028e2c 	.word	0x00028e2c
   19f48:	00028e3c 	.word	0x00028e3c
   19f4c:	00015869 	.word	0x00015869
   19f50:	00028e50 	.word	0x00028e50
   19f54:	20004f98 	.word	0x20004f98
   19f58:	0000e811 	.word	0x0000e811
   19f5c:	00028e68 	.word	0x00028e68
   19f60:	2000414c 	.word	0x2000414c
   19f64:	00028e80 	.word	0x00028e80
   19f68:	20001fe8 	.word	0x20001fe8
   19f6c:	00028e98 	.word	0x00028e98
   19f70:	2000240c 	.word	0x2000240c
   19f74:	200039fc 	.word	0x200039fc
   19f78:	0000e289 	.word	0x0000e289
   19f7c:	20004b74 	.word	0x20004b74
   19f80:	200027cc 	.word	0x200027cc
   19f84:	20003634 	.word	0x20003634
   19f88:	20002db4 	.word	0x20002db4
   19f8c:	00028eb0 	.word	0x00028eb0
   19f90:	0000cbd1 	.word	0x0000cbd1
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   19f94:	1dfb      	adds	r3, r7, #7
   19f96:	781a      	ldrb	r2, [r3, #0]
   19f98:	0013      	movs	r3, r2
   19f9a:	005b      	lsls	r3, r3, #1
   19f9c:	189b      	adds	r3, r3, r2
   19f9e:	009b      	lsls	r3, r3, #2
   19fa0:	4aaa      	ldr	r2, [pc, #680]	; (1a24c <fn_process_calibration+0x62c>)
   19fa2:	1898      	adds	r0, r3, r2
   19fa4:	1dfb      	adds	r3, r7, #7
   19fa6:	781a      	ldrb	r2, [r3, #0]
   19fa8:	0013      	movs	r3, r2
   19faa:	005b      	lsls	r3, r3, #1
   19fac:	189b      	adds	r3, r3, r2
   19fae:	009b      	lsls	r3, r3, #2
   19fb0:	4aa7      	ldr	r2, [pc, #668]	; (1a250 <fn_process_calibration+0x630>)
   19fb2:	189b      	adds	r3, r3, r2
   19fb4:	4aa7      	ldr	r2, [pc, #668]	; (1a254 <fn_process_calibration+0x634>)
   19fb6:	0019      	movs	r1, r3
   19fb8:	4ba7      	ldr	r3, [pc, #668]	; (1a258 <fn_process_calibration+0x638>)
   19fba:	4798      	blx	r3
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   19fbc:	1dfb      	adds	r3, r7, #7
   19fbe:	781a      	ldrb	r2, [r3, #0]
   19fc0:	0013      	movs	r3, r2
   19fc2:	005b      	lsls	r3, r3, #1
   19fc4:	189b      	adds	r3, r3, r2
   19fc6:	009b      	lsls	r3, r3, #2
   19fc8:	4aa4      	ldr	r2, [pc, #656]	; (1a25c <fn_process_calibration+0x63c>)
   19fca:	1898      	adds	r0, r3, r2
   19fcc:	1dfb      	adds	r3, r7, #7
   19fce:	781a      	ldrb	r2, [r3, #0]
   19fd0:	0013      	movs	r3, r2
   19fd2:	005b      	lsls	r3, r3, #1
   19fd4:	189b      	adds	r3, r3, r2
   19fd6:	009b      	lsls	r3, r3, #2
   19fd8:	4aa1      	ldr	r2, [pc, #644]	; (1a260 <fn_process_calibration+0x640>)
   19fda:	189b      	adds	r3, r3, r2
   19fdc:	4aa1      	ldr	r2, [pc, #644]	; (1a264 <fn_process_calibration+0x644>)
   19fde:	0019      	movs	r1, r3
   19fe0:	4b9d      	ldr	r3, [pc, #628]	; (1a258 <fn_process_calibration+0x638>)
   19fe2:	4798      	blx	r3
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   19fe4:	1dfb      	adds	r3, r7, #7
   19fe6:	781a      	ldrb	r2, [r3, #0]
   19fe8:	0013      	movs	r3, r2
   19fea:	005b      	lsls	r3, r3, #1
   19fec:	189b      	adds	r3, r3, r2
   19fee:	009b      	lsls	r3, r3, #2
   19ff0:	4a9d      	ldr	r2, [pc, #628]	; (1a268 <fn_process_calibration+0x648>)
   19ff2:	1898      	adds	r0, r3, r2
   19ff4:	1dfb      	adds	r3, r7, #7
   19ff6:	781a      	ldrb	r2, [r3, #0]
   19ff8:	0013      	movs	r3, r2
   19ffa:	005b      	lsls	r3, r3, #1
   19ffc:	189b      	adds	r3, r3, r2
   19ffe:	009b      	lsls	r3, r3, #2
   1a000:	4a9a      	ldr	r2, [pc, #616]	; (1a26c <fn_process_calibration+0x64c>)
   1a002:	189b      	adds	r3, r3, r2
   1a004:	4a9a      	ldr	r2, [pc, #616]	; (1a270 <fn_process_calibration+0x650>)
   1a006:	0019      	movs	r1, r3
   1a008:	4b93      	ldr	r3, [pc, #588]	; (1a258 <fn_process_calibration+0x638>)
   1a00a:	4798      	blx	r3
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   1a00c:	1dfb      	adds	r3, r7, #7
   1a00e:	781a      	ldrb	r2, [r3, #0]
   1a010:	0013      	movs	r3, r2
   1a012:	005b      	lsls	r3, r3, #1
   1a014:	189b      	adds	r3, r3, r2
   1a016:	009b      	lsls	r3, r3, #2
   1a018:	4a96      	ldr	r2, [pc, #600]	; (1a274 <fn_process_calibration+0x654>)
   1a01a:	1898      	adds	r0, r3, r2
   1a01c:	1dfb      	adds	r3, r7, #7
   1a01e:	781a      	ldrb	r2, [r3, #0]
   1a020:	0013      	movs	r3, r2
   1a022:	005b      	lsls	r3, r3, #1
   1a024:	189b      	adds	r3, r3, r2
   1a026:	009b      	lsls	r3, r3, #2
   1a028:	4a93      	ldr	r2, [pc, #588]	; (1a278 <fn_process_calibration+0x658>)
   1a02a:	189b      	adds	r3, r3, r2
   1a02c:	4a93      	ldr	r2, [pc, #588]	; (1a27c <fn_process_calibration+0x65c>)
   1a02e:	0019      	movs	r1, r3
   1a030:	4b89      	ldr	r3, [pc, #548]	; (1a258 <fn_process_calibration+0x638>)
   1a032:	4798      	blx	r3
	for (i=0;i<n_points;i++){
   1a034:	1dfb      	adds	r3, r7, #7
   1a036:	781a      	ldrb	r2, [r3, #0]
   1a038:	1dfb      	adds	r3, r7, #7
   1a03a:	3201      	adds	r2, #1
   1a03c:	701a      	strb	r2, [r3, #0]
   1a03e:	1dfb      	adds	r3, r7, #7
   1a040:	781a      	ldrb	r2, [r3, #0]
   1a042:	4b8f      	ldr	r3, [pc, #572]	; (1a280 <fn_process_calibration+0x660>)
   1a044:	681b      	ldr	r3, [r3, #0]
   1a046:	429a      	cmp	r2, r3
   1a048:	d3a4      	bcc.n	19f94 <fn_process_calibration+0x374>
	}
	

	//  Sensor package to laser axis alignment about Y&Z axis
	glcd_clear_buffer();
   1a04a:	4b8e      	ldr	r3, [pc, #568]	; (1a284 <fn_process_calibration+0x664>)
   1a04c:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   1a04e:	4a8e      	ldr	r2, [pc, #568]	; (1a288 <fn_process_calibration+0x668>)
   1a050:	4b8e      	ldr	r3, [pc, #568]	; (1a28c <fn_process_calibration+0x66c>)
   1a052:	0010      	movs	r0, r2
   1a054:	0019      	movs	r1, r3
   1a056:	2313      	movs	r3, #19
   1a058:	001a      	movs	r2, r3
   1a05a:	4b8d      	ldr	r3, [pc, #564]	; (1a290 <fn_process_calibration+0x670>)
   1a05c:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1a05e:	4b8a      	ldr	r3, [pc, #552]	; (1a288 <fn_process_calibration+0x668>)
   1a060:	001a      	movs	r2, r3
   1a062:	2100      	movs	r1, #0
   1a064:	2000      	movs	r0, #0
   1a066:	4b8b      	ldr	r3, [pc, #556]	; (1a294 <fn_process_calibration+0x674>)
   1a068:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   1a06a:	4a87      	ldr	r2, [pc, #540]	; (1a288 <fn_process_calibration+0x668>)
   1a06c:	4b8a      	ldr	r3, [pc, #552]	; (1a298 <fn_process_calibration+0x678>)
   1a06e:	0010      	movs	r0, r2
   1a070:	0019      	movs	r1, r3
   1a072:	230d      	movs	r3, #13
   1a074:	001a      	movs	r2, r3
   1a076:	4b86      	ldr	r3, [pc, #536]	; (1a290 <fn_process_calibration+0x670>)
   1a078:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   1a07a:	4b83      	ldr	r3, [pc, #524]	; (1a288 <fn_process_calibration+0x668>)
   1a07c:	001a      	movs	r2, r3
   1a07e:	2102      	movs	r1, #2
   1a080:	2000      	movs	r0, #0
   1a082:	4b84      	ldr	r3, [pc, #528]	; (1a294 <fn_process_calibration+0x674>)
   1a084:	4798      	blx	r3
	sprintf(display_str, "Misalignment Cal, YZ");
   1a086:	4a80      	ldr	r2, [pc, #512]	; (1a288 <fn_process_calibration+0x668>)
   1a088:	4b84      	ldr	r3, [pc, #528]	; (1a29c <fn_process_calibration+0x67c>)
   1a08a:	0010      	movs	r0, r2
   1a08c:	0019      	movs	r1, r3
   1a08e:	2315      	movs	r3, #21
   1a090:	001a      	movs	r2, r3
   1a092:	4b7f      	ldr	r3, [pc, #508]	; (1a290 <fn_process_calibration+0x670>)
   1a094:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   1a096:	4b7c      	ldr	r3, [pc, #496]	; (1a288 <fn_process_calibration+0x668>)
   1a098:	001a      	movs	r2, r3
   1a09a:	2103      	movs	r1, #3
   1a09c:	2000      	movs	r0, #0
   1a09e:	4b7d      	ldr	r3, [pc, #500]	; (1a294 <fn_process_calibration+0x674>)
   1a0a0:	4798      	blx	r3
	glcd_write();		
   1a0a2:	4b7f      	ldr	r3, [pc, #508]	; (1a2a0 <fn_process_calibration+0x680>)
   1a0a4:	4798      	blx	r3
	for (j=0;j<3;j++){
   1a0a6:	1dbb      	adds	r3, r7, #6
   1a0a8:	2200      	movs	r2, #0
   1a0aa:	701a      	strb	r2, [r3, #0]
   1a0ac:	e02c      	b.n	1a108 <fn_process_calibration+0x4e8>
		sprintf(display_str, "Iteration: %d of 3    ", j+1);
   1a0ae:	1dbb      	adds	r3, r7, #6
   1a0b0:	781b      	ldrb	r3, [r3, #0]
   1a0b2:	1c5a      	adds	r2, r3, #1
   1a0b4:	497b      	ldr	r1, [pc, #492]	; (1a2a4 <fn_process_calibration+0x684>)
   1a0b6:	4b74      	ldr	r3, [pc, #464]	; (1a288 <fn_process_calibration+0x668>)
   1a0b8:	0018      	movs	r0, r3
   1a0ba:	4b7b      	ldr	r3, [pc, #492]	; (1a2a8 <fn_process_calibration+0x688>)
   1a0bc:	4798      	blx	r3
		glcd_tiny_draw_string(0,4,display_str);
   1a0be:	4b72      	ldr	r3, [pc, #456]	; (1a288 <fn_process_calibration+0x668>)
   1a0c0:	001a      	movs	r2, r3
   1a0c2:	2104      	movs	r1, #4
   1a0c4:	2000      	movs	r0, #0
   1a0c6:	4b73      	ldr	r3, [pc, #460]	; (1a294 <fn_process_calibration+0x674>)
   1a0c8:	4798      	blx	r3
		glcd_write();
   1a0ca:	4b75      	ldr	r3, [pc, #468]	; (1a2a0 <fn_process_calibration+0x680>)
   1a0cc:	4798      	blx	r3
		cal_angleYZ(a1cal, &a1_calst);//  Sensor Package to laser Y&Z axis alignment, Accelerometer 1
   1a0ce:	4a61      	ldr	r2, [pc, #388]	; (1a254 <fn_process_calibration+0x634>)
   1a0d0:	4b5f      	ldr	r3, [pc, #380]	; (1a250 <fn_process_calibration+0x630>)
   1a0d2:	0011      	movs	r1, r2
   1a0d4:	0018      	movs	r0, r3
   1a0d6:	4b75      	ldr	r3, [pc, #468]	; (1a2ac <fn_process_calibration+0x68c>)
   1a0d8:	4798      	blx	r3
		cal_angleYZ(a2cal, &a2_calst);//  Sensor Package to laser Y&Z axis alignment, Accelerometer 2
   1a0da:	4a62      	ldr	r2, [pc, #392]	; (1a264 <fn_process_calibration+0x644>)
   1a0dc:	4b60      	ldr	r3, [pc, #384]	; (1a260 <fn_process_calibration+0x640>)
   1a0de:	0011      	movs	r1, r2
   1a0e0:	0018      	movs	r0, r3
   1a0e2:	4b72      	ldr	r3, [pc, #456]	; (1a2ac <fn_process_calibration+0x68c>)
   1a0e4:	4798      	blx	r3
		cal_angleYZ(c1cal, &c1_calst);//  Sensor Package to laser Y&Z axis alignment, Compass 1
   1a0e6:	4a62      	ldr	r2, [pc, #392]	; (1a270 <fn_process_calibration+0x650>)
   1a0e8:	4b60      	ldr	r3, [pc, #384]	; (1a26c <fn_process_calibration+0x64c>)
   1a0ea:	0011      	movs	r1, r2
   1a0ec:	0018      	movs	r0, r3
   1a0ee:	4b6f      	ldr	r3, [pc, #444]	; (1a2ac <fn_process_calibration+0x68c>)
   1a0f0:	4798      	blx	r3
		cal_angleYZ(c2cal, &c2_calst);//  Sensor Package to laser Y&Z axis alignment, Compass 2
   1a0f2:	4a62      	ldr	r2, [pc, #392]	; (1a27c <fn_process_calibration+0x65c>)
   1a0f4:	4b60      	ldr	r3, [pc, #384]	; (1a278 <fn_process_calibration+0x658>)
   1a0f6:	0011      	movs	r1, r2
   1a0f8:	0018      	movs	r0, r3
   1a0fa:	4b6c      	ldr	r3, [pc, #432]	; (1a2ac <fn_process_calibration+0x68c>)
   1a0fc:	4798      	blx	r3
	for (j=0;j<3;j++){
   1a0fe:	1dbb      	adds	r3, r7, #6
   1a100:	781a      	ldrb	r2, [r3, #0]
   1a102:	1dbb      	adds	r3, r7, #6
   1a104:	3201      	adds	r2, #1
   1a106:	701a      	strb	r2, [r3, #0]
   1a108:	1dbb      	adds	r3, r7, #6
   1a10a:	781b      	ldrb	r3, [r3, #0]
   1a10c:	2b02      	cmp	r3, #2
   1a10e:	d9ce      	bls.n	1a0ae <fn_process_calibration+0x48e>
	}	
	//  Apply gain, offset, and angle calibration
	for (i=0;i<n_points;i++){
   1a110:	1dfb      	adds	r3, r7, #7
   1a112:	2200      	movs	r2, #0
   1a114:	701a      	strb	r2, [r3, #0]
   1a116:	e054      	b.n	1a1c2 <fn_process_calibration+0x5a2>
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   1a118:	1dfb      	adds	r3, r7, #7
   1a11a:	781a      	ldrb	r2, [r3, #0]
   1a11c:	0013      	movs	r3, r2
   1a11e:	005b      	lsls	r3, r3, #1
   1a120:	189b      	adds	r3, r3, r2
   1a122:	009b      	lsls	r3, r3, #2
   1a124:	4a49      	ldr	r2, [pc, #292]	; (1a24c <fn_process_calibration+0x62c>)
   1a126:	1898      	adds	r0, r3, r2
   1a128:	1dfb      	adds	r3, r7, #7
   1a12a:	781a      	ldrb	r2, [r3, #0]
   1a12c:	0013      	movs	r3, r2
   1a12e:	005b      	lsls	r3, r3, #1
   1a130:	189b      	adds	r3, r3, r2
   1a132:	009b      	lsls	r3, r3, #2
   1a134:	4a46      	ldr	r2, [pc, #280]	; (1a250 <fn_process_calibration+0x630>)
   1a136:	189b      	adds	r3, r3, r2
   1a138:	4a46      	ldr	r2, [pc, #280]	; (1a254 <fn_process_calibration+0x634>)
   1a13a:	0019      	movs	r1, r3
   1a13c:	4b46      	ldr	r3, [pc, #280]	; (1a258 <fn_process_calibration+0x638>)
   1a13e:	4798      	blx	r3
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   1a140:	1dfb      	adds	r3, r7, #7
   1a142:	781a      	ldrb	r2, [r3, #0]
   1a144:	0013      	movs	r3, r2
   1a146:	005b      	lsls	r3, r3, #1
   1a148:	189b      	adds	r3, r3, r2
   1a14a:	009b      	lsls	r3, r3, #2
   1a14c:	4a43      	ldr	r2, [pc, #268]	; (1a25c <fn_process_calibration+0x63c>)
   1a14e:	1898      	adds	r0, r3, r2
   1a150:	1dfb      	adds	r3, r7, #7
   1a152:	781a      	ldrb	r2, [r3, #0]
   1a154:	0013      	movs	r3, r2
   1a156:	005b      	lsls	r3, r3, #1
   1a158:	189b      	adds	r3, r3, r2
   1a15a:	009b      	lsls	r3, r3, #2
   1a15c:	4a40      	ldr	r2, [pc, #256]	; (1a260 <fn_process_calibration+0x640>)
   1a15e:	189b      	adds	r3, r3, r2
   1a160:	4a40      	ldr	r2, [pc, #256]	; (1a264 <fn_process_calibration+0x644>)
   1a162:	0019      	movs	r1, r3
   1a164:	4b3c      	ldr	r3, [pc, #240]	; (1a258 <fn_process_calibration+0x638>)
   1a166:	4798      	blx	r3
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   1a168:	1dfb      	adds	r3, r7, #7
   1a16a:	781a      	ldrb	r2, [r3, #0]
   1a16c:	0013      	movs	r3, r2
   1a16e:	005b      	lsls	r3, r3, #1
   1a170:	189b      	adds	r3, r3, r2
   1a172:	009b      	lsls	r3, r3, #2
   1a174:	4a3c      	ldr	r2, [pc, #240]	; (1a268 <fn_process_calibration+0x648>)
   1a176:	1898      	adds	r0, r3, r2
   1a178:	1dfb      	adds	r3, r7, #7
   1a17a:	781a      	ldrb	r2, [r3, #0]
   1a17c:	0013      	movs	r3, r2
   1a17e:	005b      	lsls	r3, r3, #1
   1a180:	189b      	adds	r3, r3, r2
   1a182:	009b      	lsls	r3, r3, #2
   1a184:	4a39      	ldr	r2, [pc, #228]	; (1a26c <fn_process_calibration+0x64c>)
   1a186:	189b      	adds	r3, r3, r2
   1a188:	4a39      	ldr	r2, [pc, #228]	; (1a270 <fn_process_calibration+0x650>)
   1a18a:	0019      	movs	r1, r3
   1a18c:	4b32      	ldr	r3, [pc, #200]	; (1a258 <fn_process_calibration+0x638>)
   1a18e:	4798      	blx	r3
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   1a190:	1dfb      	adds	r3, r7, #7
   1a192:	781a      	ldrb	r2, [r3, #0]
   1a194:	0013      	movs	r3, r2
   1a196:	005b      	lsls	r3, r3, #1
   1a198:	189b      	adds	r3, r3, r2
   1a19a:	009b      	lsls	r3, r3, #2
   1a19c:	4a35      	ldr	r2, [pc, #212]	; (1a274 <fn_process_calibration+0x654>)
   1a19e:	1898      	adds	r0, r3, r2
   1a1a0:	1dfb      	adds	r3, r7, #7
   1a1a2:	781a      	ldrb	r2, [r3, #0]
   1a1a4:	0013      	movs	r3, r2
   1a1a6:	005b      	lsls	r3, r3, #1
   1a1a8:	189b      	adds	r3, r3, r2
   1a1aa:	009b      	lsls	r3, r3, #2
   1a1ac:	4a32      	ldr	r2, [pc, #200]	; (1a278 <fn_process_calibration+0x658>)
   1a1ae:	189b      	adds	r3, r3, r2
   1a1b0:	4a32      	ldr	r2, [pc, #200]	; (1a27c <fn_process_calibration+0x65c>)
   1a1b2:	0019      	movs	r1, r3
   1a1b4:	4b28      	ldr	r3, [pc, #160]	; (1a258 <fn_process_calibration+0x638>)
   1a1b6:	4798      	blx	r3
	for (i=0;i<n_points;i++){
   1a1b8:	1dfb      	adds	r3, r7, #7
   1a1ba:	781a      	ldrb	r2, [r3, #0]
   1a1bc:	1dfb      	adds	r3, r7, #7
   1a1be:	3201      	adds	r2, #1
   1a1c0:	701a      	strb	r2, [r3, #0]
   1a1c2:	1dfb      	adds	r3, r7, #7
   1a1c4:	781a      	ldrb	r2, [r3, #0]
   1a1c6:	4b2e      	ldr	r3, [pc, #184]	; (1a280 <fn_process_calibration+0x660>)
   1a1c8:	681b      	ldr	r3, [r3, #0]
   1a1ca:	429a      	cmp	r2, r3
   1a1cc:	d3a4      	bcc.n	1a118 <fn_process_calibration+0x4f8>
	}	
	
	
	//  Perform X angle sensor-package to laser misalignment calibration
	//  Only calibrate the 2nd sensor
	glcd_clear_buffer();
   1a1ce:	4b2d      	ldr	r3, [pc, #180]	; (1a284 <fn_process_calibration+0x664>)
   1a1d0:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   1a1d2:	4a2d      	ldr	r2, [pc, #180]	; (1a288 <fn_process_calibration+0x668>)
   1a1d4:	4b2d      	ldr	r3, [pc, #180]	; (1a28c <fn_process_calibration+0x66c>)
   1a1d6:	0010      	movs	r0, r2
   1a1d8:	0019      	movs	r1, r3
   1a1da:	2313      	movs	r3, #19
   1a1dc:	001a      	movs	r2, r3
   1a1de:	4b2c      	ldr	r3, [pc, #176]	; (1a290 <fn_process_calibration+0x670>)
   1a1e0:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1a1e2:	4b29      	ldr	r3, [pc, #164]	; (1a288 <fn_process_calibration+0x668>)
   1a1e4:	001a      	movs	r2, r3
   1a1e6:	2100      	movs	r1, #0
   1a1e8:	2000      	movs	r0, #0
   1a1ea:	4b2a      	ldr	r3, [pc, #168]	; (1a294 <fn_process_calibration+0x674>)
   1a1ec:	4798      	blx	r3
	sprintf(display_str, "Calibration:");
   1a1ee:	4a26      	ldr	r2, [pc, #152]	; (1a288 <fn_process_calibration+0x668>)
   1a1f0:	4b29      	ldr	r3, [pc, #164]	; (1a298 <fn_process_calibration+0x678>)
   1a1f2:	0010      	movs	r0, r2
   1a1f4:	0019      	movs	r1, r3
   1a1f6:	230d      	movs	r3, #13
   1a1f8:	001a      	movs	r2, r3
   1a1fa:	4b25      	ldr	r3, [pc, #148]	; (1a290 <fn_process_calibration+0x670>)
   1a1fc:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   1a1fe:	4b22      	ldr	r3, [pc, #136]	; (1a288 <fn_process_calibration+0x668>)
   1a200:	001a      	movs	r2, r3
   1a202:	2102      	movs	r1, #2
   1a204:	2000      	movs	r0, #0
   1a206:	4b23      	ldr	r3, [pc, #140]	; (1a294 <fn_process_calibration+0x674>)
   1a208:	4798      	blx	r3
	sprintf(display_str, "Misalignment Cal, X");
   1a20a:	4a1f      	ldr	r2, [pc, #124]	; (1a288 <fn_process_calibration+0x668>)
   1a20c:	4b28      	ldr	r3, [pc, #160]	; (1a2b0 <fn_process_calibration+0x690>)
   1a20e:	0010      	movs	r0, r2
   1a210:	0019      	movs	r1, r3
   1a212:	2314      	movs	r3, #20
   1a214:	001a      	movs	r2, r3
   1a216:	4b1e      	ldr	r3, [pc, #120]	; (1a290 <fn_process_calibration+0x670>)
   1a218:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   1a21a:	4b1b      	ldr	r3, [pc, #108]	; (1a288 <fn_process_calibration+0x668>)
   1a21c:	001a      	movs	r2, r3
   1a21e:	2103      	movs	r1, #3
   1a220:	2000      	movs	r0, #0
   1a222:	4b1c      	ldr	r3, [pc, #112]	; (1a294 <fn_process_calibration+0x674>)
   1a224:	4798      	blx	r3
	glcd_write();
   1a226:	4b1e      	ldr	r3, [pc, #120]	; (1a2a0 <fn_process_calibration+0x680>)
   1a228:	4798      	blx	r3
	cal_angleX(a1cal, a2cal, &a2_calst);//  Sensor package to laser X-axis alignment, Accelerometer 2
   1a22a:	4a0e      	ldr	r2, [pc, #56]	; (1a264 <fn_process_calibration+0x644>)
   1a22c:	490c      	ldr	r1, [pc, #48]	; (1a260 <fn_process_calibration+0x640>)
   1a22e:	4b08      	ldr	r3, [pc, #32]	; (1a250 <fn_process_calibration+0x630>)
   1a230:	0018      	movs	r0, r3
   1a232:	4b20      	ldr	r3, [pc, #128]	; (1a2b4 <fn_process_calibration+0x694>)
   1a234:	4798      	blx	r3
	cal_angleX(c1cal, c2cal, &c2_calst);//  Sensor package to laser X-axis alignment, Compass 2
   1a236:	4a11      	ldr	r2, [pc, #68]	; (1a27c <fn_process_calibration+0x65c>)
   1a238:	490f      	ldr	r1, [pc, #60]	; (1a278 <fn_process_calibration+0x658>)
   1a23a:	4b0c      	ldr	r3, [pc, #48]	; (1a26c <fn_process_calibration+0x64c>)
   1a23c:	0018      	movs	r0, r3
   1a23e:	4b1d      	ldr	r3, [pc, #116]	; (1a2b4 <fn_process_calibration+0x694>)
   1a240:	4798      	blx	r3
		//  Apply gain, offset, and angle calibration
	for (i=0;i<n_points;i++){
   1a242:	1dfb      	adds	r3, r7, #7
   1a244:	2200      	movs	r2, #0
   1a246:	701a      	strb	r2, [r3, #0]
   1a248:	e08b      	b.n	1a362 <fn_process_calibration+0x742>
   1a24a:	46c0      	nop			; (mov r8, r8)
   1a24c:	20004f98 	.word	0x20004f98
   1a250:	200039fc 	.word	0x200039fc
   1a254:	20004f38 	.word	0x20004f38
   1a258:	0000e289 	.word	0x0000e289
   1a25c:	2000414c 	.word	0x2000414c
   1a260:	20004b74 	.word	0x20004b74
   1a264:	20004b14 	.word	0x20004b14
   1a268:	20001fe8 	.word	0x20001fe8
   1a26c:	200027cc 	.word	0x200027cc
   1a270:	20003434 	.word	0x20003434
   1a274:	2000240c 	.word	0x2000240c
   1a278:	20003634 	.word	0x20003634
   1a27c:	200023ac 	.word	0x200023ac
   1a280:	20002db4 	.word	0x20002db4
   1a284:	00015025 	.word	0x00015025
   1a288:	20003534 	.word	0x20003534
   1a28c:	00028e18 	.word	0x00028e18
   1a290:	00023c19 	.word	0x00023c19
   1a294:	00016111 	.word	0x00016111
   1a298:	00028e2c 	.word	0x00028e2c
   1a29c:	00028ec4 	.word	0x00028ec4
   1a2a0:	00015869 	.word	0x00015869
   1a2a4:	00028edc 	.word	0x00028edc
   1a2a8:	00023d31 	.word	0x00023d31
   1a2ac:	0000d49d 	.word	0x0000d49d
   1a2b0:	00028ef4 	.word	0x00028ef4
   1a2b4:	0000d1b9 	.word	0x0000d1b9
		cal_apply_cal(a1raw[i], a1cal[i], &a1_calst);
   1a2b8:	1dfb      	adds	r3, r7, #7
   1a2ba:	781a      	ldrb	r2, [r3, #0]
   1a2bc:	0013      	movs	r3, r2
   1a2be:	005b      	lsls	r3, r3, #1
   1a2c0:	189b      	adds	r3, r3, r2
   1a2c2:	009b      	lsls	r3, r3, #2
   1a2c4:	4a53      	ldr	r2, [pc, #332]	; (1a414 <fn_process_calibration+0x7f4>)
   1a2c6:	1898      	adds	r0, r3, r2
   1a2c8:	1dfb      	adds	r3, r7, #7
   1a2ca:	781a      	ldrb	r2, [r3, #0]
   1a2cc:	0013      	movs	r3, r2
   1a2ce:	005b      	lsls	r3, r3, #1
   1a2d0:	189b      	adds	r3, r3, r2
   1a2d2:	009b      	lsls	r3, r3, #2
   1a2d4:	4a50      	ldr	r2, [pc, #320]	; (1a418 <fn_process_calibration+0x7f8>)
   1a2d6:	189b      	adds	r3, r3, r2
   1a2d8:	4a50      	ldr	r2, [pc, #320]	; (1a41c <fn_process_calibration+0x7fc>)
   1a2da:	0019      	movs	r1, r3
   1a2dc:	4b50      	ldr	r3, [pc, #320]	; (1a420 <fn_process_calibration+0x800>)
   1a2de:	4798      	blx	r3
		cal_apply_cal(a2raw[i], a2cal[i], &a2_calst);
   1a2e0:	1dfb      	adds	r3, r7, #7
   1a2e2:	781a      	ldrb	r2, [r3, #0]
   1a2e4:	0013      	movs	r3, r2
   1a2e6:	005b      	lsls	r3, r3, #1
   1a2e8:	189b      	adds	r3, r3, r2
   1a2ea:	009b      	lsls	r3, r3, #2
   1a2ec:	4a4d      	ldr	r2, [pc, #308]	; (1a424 <fn_process_calibration+0x804>)
   1a2ee:	1898      	adds	r0, r3, r2
   1a2f0:	1dfb      	adds	r3, r7, #7
   1a2f2:	781a      	ldrb	r2, [r3, #0]
   1a2f4:	0013      	movs	r3, r2
   1a2f6:	005b      	lsls	r3, r3, #1
   1a2f8:	189b      	adds	r3, r3, r2
   1a2fa:	009b      	lsls	r3, r3, #2
   1a2fc:	4a4a      	ldr	r2, [pc, #296]	; (1a428 <fn_process_calibration+0x808>)
   1a2fe:	189b      	adds	r3, r3, r2
   1a300:	4a4a      	ldr	r2, [pc, #296]	; (1a42c <fn_process_calibration+0x80c>)
   1a302:	0019      	movs	r1, r3
   1a304:	4b46      	ldr	r3, [pc, #280]	; (1a420 <fn_process_calibration+0x800>)
   1a306:	4798      	blx	r3
		cal_apply_cal(c1raw[i], c1cal[i], &c1_calst);
   1a308:	1dfb      	adds	r3, r7, #7
   1a30a:	781a      	ldrb	r2, [r3, #0]
   1a30c:	0013      	movs	r3, r2
   1a30e:	005b      	lsls	r3, r3, #1
   1a310:	189b      	adds	r3, r3, r2
   1a312:	009b      	lsls	r3, r3, #2
   1a314:	4a46      	ldr	r2, [pc, #280]	; (1a430 <fn_process_calibration+0x810>)
   1a316:	1898      	adds	r0, r3, r2
   1a318:	1dfb      	adds	r3, r7, #7
   1a31a:	781a      	ldrb	r2, [r3, #0]
   1a31c:	0013      	movs	r3, r2
   1a31e:	005b      	lsls	r3, r3, #1
   1a320:	189b      	adds	r3, r3, r2
   1a322:	009b      	lsls	r3, r3, #2
   1a324:	4a43      	ldr	r2, [pc, #268]	; (1a434 <fn_process_calibration+0x814>)
   1a326:	189b      	adds	r3, r3, r2
   1a328:	4a43      	ldr	r2, [pc, #268]	; (1a438 <fn_process_calibration+0x818>)
   1a32a:	0019      	movs	r1, r3
   1a32c:	4b3c      	ldr	r3, [pc, #240]	; (1a420 <fn_process_calibration+0x800>)
   1a32e:	4798      	blx	r3
		cal_apply_cal(c2raw[i], c2cal[i], &c2_calst);
   1a330:	1dfb      	adds	r3, r7, #7
   1a332:	781a      	ldrb	r2, [r3, #0]
   1a334:	0013      	movs	r3, r2
   1a336:	005b      	lsls	r3, r3, #1
   1a338:	189b      	adds	r3, r3, r2
   1a33a:	009b      	lsls	r3, r3, #2
   1a33c:	4a3f      	ldr	r2, [pc, #252]	; (1a43c <fn_process_calibration+0x81c>)
   1a33e:	1898      	adds	r0, r3, r2
   1a340:	1dfb      	adds	r3, r7, #7
   1a342:	781a      	ldrb	r2, [r3, #0]
   1a344:	0013      	movs	r3, r2
   1a346:	005b      	lsls	r3, r3, #1
   1a348:	189b      	adds	r3, r3, r2
   1a34a:	009b      	lsls	r3, r3, #2
   1a34c:	4a3c      	ldr	r2, [pc, #240]	; (1a440 <fn_process_calibration+0x820>)
   1a34e:	189b      	adds	r3, r3, r2
   1a350:	4a3c      	ldr	r2, [pc, #240]	; (1a444 <fn_process_calibration+0x824>)
   1a352:	0019      	movs	r1, r3
   1a354:	4b32      	ldr	r3, [pc, #200]	; (1a420 <fn_process_calibration+0x800>)
   1a356:	4798      	blx	r3
	for (i=0;i<n_points;i++){
   1a358:	1dfb      	adds	r3, r7, #7
   1a35a:	781a      	ldrb	r2, [r3, #0]
   1a35c:	1dfb      	adds	r3, r7, #7
   1a35e:	3201      	adds	r2, #1
   1a360:	701a      	strb	r2, [r3, #0]
   1a362:	1dfb      	adds	r3, r7, #7
   1a364:	781a      	ldrb	r2, [r3, #0]
   1a366:	4b38      	ldr	r3, [pc, #224]	; (1a448 <fn_process_calibration+0x828>)
   1a368:	681b      	ldr	r3, [r3, #0]
   1a36a:	429a      	cmp	r2, r3
   1a36c:	d3a4      	bcc.n	1a2b8 <fn_process_calibration+0x698>
	}
	
	
	//  Evaluate performance of calibration
	glcd_clear_buffer();
   1a36e:	4b37      	ldr	r3, [pc, #220]	; (1a44c <fn_process_calibration+0x82c>)
   1a370:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   1a372:	4a37      	ldr	r2, [pc, #220]	; (1a450 <fn_process_calibration+0x830>)
   1a374:	4b37      	ldr	r3, [pc, #220]	; (1a454 <fn_process_calibration+0x834>)
   1a376:	0010      	movs	r0, r2
   1a378:	0019      	movs	r1, r3
   1a37a:	2313      	movs	r3, #19
   1a37c:	001a      	movs	r2, r3
   1a37e:	4b36      	ldr	r3, [pc, #216]	; (1a458 <fn_process_calibration+0x838>)
   1a380:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1a382:	4b33      	ldr	r3, [pc, #204]	; (1a450 <fn_process_calibration+0x830>)
   1a384:	001a      	movs	r2, r3
   1a386:	2100      	movs	r1, #0
   1a388:	2000      	movs	r0, #0
   1a38a:	4b34      	ldr	r3, [pc, #208]	; (1a45c <fn_process_calibration+0x83c>)
   1a38c:	4798      	blx	r3
	sprintf(display_str, "Evaluating Results   ");
   1a38e:	4a30      	ldr	r2, [pc, #192]	; (1a450 <fn_process_calibration+0x830>)
   1a390:	4b33      	ldr	r3, [pc, #204]	; (1a460 <fn_process_calibration+0x840>)
   1a392:	0010      	movs	r0, r2
   1a394:	0019      	movs	r1, r3
   1a396:	2316      	movs	r3, #22
   1a398:	001a      	movs	r2, r3
   1a39a:	4b2f      	ldr	r3, [pc, #188]	; (1a458 <fn_process_calibration+0x838>)
   1a39c:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   1a39e:	4b2c      	ldr	r3, [pc, #176]	; (1a450 <fn_process_calibration+0x830>)
   1a3a0:	001a      	movs	r2, r3
   1a3a2:	2102      	movs	r1, #2
   1a3a4:	2000      	movs	r0, #0
   1a3a6:	4b2d      	ldr	r3, [pc, #180]	; (1a45c <fn_process_calibration+0x83c>)
   1a3a8:	4798      	blx	r3
	glcd_write();
   1a3aa:	4b2e      	ldr	r3, [pc, #184]	; (1a464 <fn_process_calibration+0x844>)
   1a3ac:	4798      	blx	r3
	cal_evaluate();	
   1a3ae:	4b2e      	ldr	r3, [pc, #184]	; (1a468 <fn_process_calibration+0x848>)
   1a3b0:	4798      	blx	r3
	//  Write report
	sprintf(display_str, "Writing Report       ");
   1a3b2:	4a27      	ldr	r2, [pc, #156]	; (1a450 <fn_process_calibration+0x830>)
   1a3b4:	4b2d      	ldr	r3, [pc, #180]	; (1a46c <fn_process_calibration+0x84c>)
   1a3b6:	0010      	movs	r0, r2
   1a3b8:	0019      	movs	r1, r3
   1a3ba:	2316      	movs	r3, #22
   1a3bc:	001a      	movs	r2, r3
   1a3be:	4b26      	ldr	r3, [pc, #152]	; (1a458 <fn_process_calibration+0x838>)
   1a3c0:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   1a3c2:	4b23      	ldr	r3, [pc, #140]	; (1a450 <fn_process_calibration+0x830>)
   1a3c4:	001a      	movs	r2, r3
   1a3c6:	2102      	movs	r1, #2
   1a3c8:	2000      	movs	r0, #0
   1a3ca:	4b24      	ldr	r3, [pc, #144]	; (1a45c <fn_process_calibration+0x83c>)
   1a3cc:	4798      	blx	r3
	glcd_write();	
   1a3ce:	4b25      	ldr	r3, [pc, #148]	; (1a464 <fn_process_calibration+0x844>)
   1a3d0:	4798      	blx	r3
	cal_write_report();
   1a3d2:	4b27      	ldr	r3, [pc, #156]	; (1a470 <fn_process_calibration+0x850>)
   1a3d4:	4798      	blx	r3
	//  Save data to EEPROM
	save_calibration();
   1a3d6:	4b27      	ldr	r3, [pc, #156]	; (1a474 <fn_process_calibration+0x854>)
   1a3d8:	4798      	blx	r3
	// Calibration Complete
	sprintf(display_str, "Calibration Complete!");
   1a3da:	4a1d      	ldr	r2, [pc, #116]	; (1a450 <fn_process_calibration+0x830>)
   1a3dc:	4b26      	ldr	r3, [pc, #152]	; (1a478 <fn_process_calibration+0x858>)
   1a3de:	0010      	movs	r0, r2
   1a3e0:	0019      	movs	r1, r3
   1a3e2:	2316      	movs	r3, #22
   1a3e4:	001a      	movs	r2, r3
   1a3e6:	4b1c      	ldr	r3, [pc, #112]	; (1a458 <fn_process_calibration+0x838>)
   1a3e8:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   1a3ea:	4b19      	ldr	r3, [pc, #100]	; (1a450 <fn_process_calibration+0x830>)
   1a3ec:	001a      	movs	r2, r3
   1a3ee:	2102      	movs	r1, #2
   1a3f0:	2000      	movs	r0, #0
   1a3f2:	4b1a      	ldr	r3, [pc, #104]	; (1a45c <fn_process_calibration+0x83c>)
   1a3f4:	4798      	blx	r3
	glcd_write();
   1a3f6:	4b1b      	ldr	r3, [pc, #108]	; (1a464 <fn_process_calibration+0x844>)
   1a3f8:	4798      	blx	r3
	delay_s(3);
   1a3fa:	4b20      	ldr	r3, [pc, #128]	; (1a47c <fn_process_calibration+0x85c>)
   1a3fc:	0018      	movs	r0, r3
   1a3fe:	4b20      	ldr	r3, [pc, #128]	; (1a480 <fn_process_calibration+0x860>)
   1a400:	4798      	blx	r3
	
	// Re-Enable Watchdog Timer
	wdt_enable();
   1a402:	4b20      	ldr	r3, [pc, #128]	; (1a484 <fn_process_calibration+0x864>)
   1a404:	4798      	blx	r3
	
	current_input = input_state_complete;
   1a406:	4b20      	ldr	r3, [pc, #128]	; (1a488 <fn_process_calibration+0x868>)
   1a408:	2208      	movs	r2, #8
   1a40a:	701a      	strb	r2, [r3, #0]
}
   1a40c:	46c0      	nop			; (mov r8, r8)
   1a40e:	46bd      	mov	sp, r7
   1a410:	b002      	add	sp, #8
   1a412:	bd80      	pop	{r7, pc}
   1a414:	20004f98 	.word	0x20004f98
   1a418:	200039fc 	.word	0x200039fc
   1a41c:	20004f38 	.word	0x20004f38
   1a420:	0000e289 	.word	0x0000e289
   1a424:	2000414c 	.word	0x2000414c
   1a428:	20004b74 	.word	0x20004b74
   1a42c:	20004b14 	.word	0x20004b14
   1a430:	20001fe8 	.word	0x20001fe8
   1a434:	200027cc 	.word	0x200027cc
   1a438:	20003434 	.word	0x20003434
   1a43c:	2000240c 	.word	0x2000240c
   1a440:	20003634 	.word	0x20003634
   1a444:	200023ac 	.word	0x200023ac
   1a448:	20002db4 	.word	0x20002db4
   1a44c:	00015025 	.word	0x00015025
   1a450:	20003534 	.word	0x20003534
   1a454:	00028e18 	.word	0x00028e18
   1a458:	00023c19 	.word	0x00023c19
   1a45c:	00016111 	.word	0x00016111
   1a460:	00028f08 	.word	0x00028f08
   1a464:	00015869 	.word	0x00015869
   1a468:	0000b61d 	.word	0x0000b61d
   1a46c:	00028f20 	.word	0x00028f20
   1a470:	000098a9 	.word	0x000098a9
   1a474:	00001f41 	.word	0x00001f41
   1a478:	00028f38 	.word	0x00028f38
   1a47c:	00000bb8 	.word	0x00000bb8
   1a480:	000181b5 	.word	0x000181b5
   1a484:	00004225 	.word	0x00004225
   1a488:	20004134 	.word	0x20004134

0001a48c <fn_acc_comp_calibration>:


void fn_acc_comp_calibration(void){
   1a48c:	b590      	push	{r4, r7, lr}
   1a48e:	b0ad      	sub	sp, #180	; 0xb4
   1a490:	af02      	add	r7, sp, #8
	struct MEASUREMENT temp_meas;
	
	//uint32_t timer_count;
	uint8_t disp_groups;
	// disp_groups is actual number of groups complete including last one not processed
	if (buf_points>= group_size){disp_groups = n_groups+1;}
   1a492:	4b6a      	ldr	r3, [pc, #424]	; (1a63c <fn_acc_comp_calibration+0x1b0>)
   1a494:	781b      	ldrb	r3, [r3, #0]
   1a496:	2b03      	cmp	r3, #3
   1a498:	d907      	bls.n	1a4aa <fn_acc_comp_calibration+0x1e>
   1a49a:	4b69      	ldr	r3, [pc, #420]	; (1a640 <fn_acc_comp_calibration+0x1b4>)
   1a49c:	681b      	ldr	r3, [r3, #0]
   1a49e:	b2da      	uxtb	r2, r3
   1a4a0:	23a7      	movs	r3, #167	; 0xa7
   1a4a2:	18fb      	adds	r3, r7, r3
   1a4a4:	3201      	adds	r2, #1
   1a4a6:	701a      	strb	r2, [r3, #0]
   1a4a8:	e004      	b.n	1a4b4 <fn_acc_comp_calibration+0x28>
	else{disp_groups = n_groups;}
   1a4aa:	4b65      	ldr	r3, [pc, #404]	; (1a640 <fn_acc_comp_calibration+0x1b4>)
   1a4ac:	681a      	ldr	r2, [r3, #0]
   1a4ae:	23a7      	movs	r3, #167	; 0xa7
   1a4b0:	18fb      	adds	r3, r7, r3
   1a4b2:	701a      	strb	r2, [r3, #0]
	
	
	if (state_change){
   1a4b4:	4b63      	ldr	r3, [pc, #396]	; (1a644 <fn_acc_comp_calibration+0x1b8>)
   1a4b6:	781b      	ldrb	r3, [r3, #0]
   1a4b8:	b2db      	uxtb	r3, r3
   1a4ba:	2b00      	cmp	r3, #0
   1a4bc:	d016      	beq.n	1a4ec <fn_acc_comp_calibration+0x60>
		cal_disp_message();
   1a4be:	4b62      	ldr	r3, [pc, #392]	; (1a648 <fn_acc_comp_calibration+0x1bc>)
   1a4c0:	4798      	blx	r3
		//  Set up initial settings
		n_groups = 0;
   1a4c2:	4b5f      	ldr	r3, [pc, #380]	; (1a640 <fn_acc_comp_calibration+0x1b4>)
   1a4c4:	2200      	movs	r2, #0
   1a4c6:	601a      	str	r2, [r3, #0]
		n_points = 0;
   1a4c8:	4b60      	ldr	r3, [pc, #384]	; (1a64c <fn_acc_comp_calibration+0x1c0>)
   1a4ca:	2200      	movs	r2, #0
   1a4cc:	601a      	str	r2, [r3, #0]
		ind_stack = 0;
   1a4ce:	4b60      	ldr	r3, [pc, #384]	; (1a650 <fn_acc_comp_calibration+0x1c4>)
   1a4d0:	2200      	movs	r2, #0
   1a4d2:	701a      	strb	r2, [r3, #0]
		ind_buf = 0;
   1a4d4:	4b5f      	ldr	r3, [pc, #380]	; (1a654 <fn_acc_comp_calibration+0x1c8>)
   1a4d6:	2200      	movs	r2, #0
   1a4d8:	701a      	strb	r2, [r3, #0]
		buf_points = 0;
   1a4da:	4b58      	ldr	r3, [pc, #352]	; (1a63c <fn_acc_comp_calibration+0x1b0>)
   1a4dc:	2200      	movs	r2, #0
   1a4de:	701a      	strb	r2, [r3, #0]
		laser_triggered =  false;
   1a4e0:	4b5d      	ldr	r3, [pc, #372]	; (1a658 <fn_acc_comp_calibration+0x1cc>)
   1a4e2:	2200      	movs	r2, #0
   1a4e4:	701a      	strb	r2, [r3, #0]
		last_input = input_none;
   1a4e6:	4b5d      	ldr	r3, [pc, #372]	; (1a65c <fn_acc_comp_calibration+0x1d0>)
   1a4e8:	2200      	movs	r2, #0
   1a4ea:	701a      	strb	r2, [r3, #0]
		
	}
	
	// Button Handler
	switch(last_input){
   1a4ec:	4b5b      	ldr	r3, [pc, #364]	; (1a65c <fn_acc_comp_calibration+0x1d0>)
   1a4ee:	781b      	ldrb	r3, [r3, #0]
   1a4f0:	b2db      	uxtb	r3, r3
   1a4f2:	2b04      	cmp	r3, #4
   1a4f4:	d032      	beq.n	1a55c <fn_acc_comp_calibration+0xd0>
   1a4f6:	2b05      	cmp	r3, #5
   1a4f8:	d013      	beq.n	1a522 <fn_acc_comp_calibration+0x96>
   1a4fa:	2b01      	cmp	r3, #1
   1a4fc:	d131      	bne.n	1a562 <fn_acc_comp_calibration+0xd6>
		case input_button1:
			//  Calibration Done button
			if (disp_groups>=min_groups){//  Requires min_groups to complete
   1a4fe:	2209      	movs	r2, #9
   1a500:	23a7      	movs	r3, #167	; 0xa7
   1a502:	18fb      	adds	r3, r7, r3
   1a504:	781b      	ldrb	r3, [r3, #0]
   1a506:	4293      	cmp	r3, r2
   1a508:	d32a      	bcc.n	1a560 <fn_acc_comp_calibration+0xd4>
				//  Turn off Rangefinder
				rangefinder_on_off(false);
   1a50a:	2000      	movs	r0, #0
   1a50c:	4b54      	ldr	r3, [pc, #336]	; (1a660 <fn_acc_comp_calibration+0x1d4>)
   1a50e:	4798      	blx	r3
				//  Add latest datapoint
				cal_add_datapoint(&temp_meas, true);
   1a510:	003b      	movs	r3, r7
   1a512:	2101      	movs	r1, #1
   1a514:	0018      	movs	r0, r3
   1a516:	4b53      	ldr	r3, [pc, #332]	; (1a664 <fn_acc_comp_calibration+0x1d8>)
   1a518:	4798      	blx	r3
				current_input = input_state_complete;
   1a51a:	4b53      	ldr	r3, [pc, #332]	; (1a668 <fn_acc_comp_calibration+0x1dc>)
   1a51c:	2208      	movs	r2, #8
   1a51e:	701a      	strb	r2, [r3, #0]
			}
			break;
   1a520:	e01e      	b.n	1a560 <fn_acc_comp_calibration+0xd4>
		case input_buttonE:
			//  Set laser and then take measurement
			if (!laser_triggered){
   1a522:	4b4d      	ldr	r3, [pc, #308]	; (1a658 <fn_acc_comp_calibration+0x1cc>)
   1a524:	781b      	ldrb	r3, [r3, #0]
   1a526:	b2db      	uxtb	r3, r3
   1a528:	2201      	movs	r2, #1
   1a52a:	4053      	eors	r3, r2
   1a52c:	b2db      	uxtb	r3, r3
   1a52e:	2b00      	cmp	r3, #0
   1a530:	d006      	beq.n	1a540 <fn_acc_comp_calibration+0xb4>
				// Turn on rangefinder module and laser
				rangefinder_on_off(true);
   1a532:	2001      	movs	r0, #1
   1a534:	4b4a      	ldr	r3, [pc, #296]	; (1a660 <fn_acc_comp_calibration+0x1d4>)
   1a536:	4798      	blx	r3
				laser_on_off(true);
   1a538:	2001      	movs	r0, #1
   1a53a:	4b4c      	ldr	r3, [pc, #304]	; (1a66c <fn_acc_comp_calibration+0x1e0>)
   1a53c:	4798      	blx	r3
				full_measurement(&temp_meas, false);
				//  Turn laser module off
				rangefinder_on_off(false);
				cal_add_datapoint(&temp_meas, false);
			}
			break;
   1a53e:	e010      	b.n	1a562 <fn_acc_comp_calibration+0xd6>
				full_measurement(&temp_meas, false);
   1a540:	003b      	movs	r3, r7
   1a542:	2100      	movs	r1, #0
   1a544:	0018      	movs	r0, r3
   1a546:	4b4a      	ldr	r3, [pc, #296]	; (1a670 <fn_acc_comp_calibration+0x1e4>)
   1a548:	4798      	blx	r3
				rangefinder_on_off(false);
   1a54a:	2000      	movs	r0, #0
   1a54c:	4b44      	ldr	r3, [pc, #272]	; (1a660 <fn_acc_comp_calibration+0x1d4>)
   1a54e:	4798      	blx	r3
				cal_add_datapoint(&temp_meas, false);
   1a550:	003b      	movs	r3, r7
   1a552:	2100      	movs	r1, #0
   1a554:	0018      	movs	r0, r3
   1a556:	4b43      	ldr	r3, [pc, #268]	; (1a664 <fn_acc_comp_calibration+0x1d8>)
   1a558:	4798      	blx	r3
			break;
   1a55a:	e002      	b.n	1a562 <fn_acc_comp_calibration+0xd6>
		case input_button4:
			// Handled by state machine
			//  Exit from routine
			break;
   1a55c:	46c0      	nop			; (mov r8, r8)
   1a55e:	e000      	b.n	1a562 <fn_acc_comp_calibration+0xd6>
			break;
   1a560:	46c0      	nop			; (mov r8, r8)
	}
	last_input = input_none;	
   1a562:	4b3e      	ldr	r3, [pc, #248]	; (1a65c <fn_acc_comp_calibration+0x1d0>)
   1a564:	2200      	movs	r2, #0
   1a566:	701a      	strb	r2, [r3, #0]
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1a568:	4842      	ldr	r0, [pc, #264]	; (1a674 <fn_acc_comp_calibration+0x1e8>)
   1a56a:	237f      	movs	r3, #127	; 0x7f
   1a56c:	9300      	str	r3, [sp, #0]
   1a56e:	2320      	movs	r3, #32
   1a570:	2207      	movs	r2, #7
   1a572:	2105      	movs	r1, #5
   1a574:	4c40      	ldr	r4, [pc, #256]	; (1a678 <fn_acc_comp_calibration+0x1ec>)
   1a576:	47a0      	blx	r4
	glcd_clear_buffer();
   1a578:	4b40      	ldr	r3, [pc, #256]	; (1a67c <fn_acc_comp_calibration+0x1f0>)
   1a57a:	4798      	blx	r3
	
	// Display Header
	sprintf(display_str, "Calibration Mode");
   1a57c:	4a40      	ldr	r2, [pc, #256]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a57e:	4b41      	ldr	r3, [pc, #260]	; (1a684 <fn_acc_comp_calibration+0x1f8>)
   1a580:	0010      	movs	r0, r2
   1a582:	0019      	movs	r1, r3
   1a584:	2311      	movs	r3, #17
   1a586:	001a      	movs	r2, r3
   1a588:	4b3f      	ldr	r3, [pc, #252]	; (1a688 <fn_acc_comp_calibration+0x1fc>)
   1a58a:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1a58c:	4b3c      	ldr	r3, [pc, #240]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a58e:	001a      	movs	r2, r3
   1a590:	2100      	movs	r1, #0
   1a592:	2000      	movs	r0, #0
   1a594:	4b3d      	ldr	r3, [pc, #244]	; (1a68c <fn_acc_comp_calibration+0x200>)
   1a596:	4798      	blx	r3
	
	// Display Current Data
	sprintf(display_str, "Current Group: %d", (n_groups+1));
   1a598:	4b29      	ldr	r3, [pc, #164]	; (1a640 <fn_acc_comp_calibration+0x1b4>)
   1a59a:	681b      	ldr	r3, [r3, #0]
   1a59c:	1c5a      	adds	r2, r3, #1
   1a59e:	493c      	ldr	r1, [pc, #240]	; (1a690 <fn_acc_comp_calibration+0x204>)
   1a5a0:	4b37      	ldr	r3, [pc, #220]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a5a2:	0018      	movs	r0, r3
   1a5a4:	4b3b      	ldr	r3, [pc, #236]	; (1a694 <fn_acc_comp_calibration+0x208>)
   1a5a6:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   1a5a8:	4b35      	ldr	r3, [pc, #212]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a5aa:	001a      	movs	r2, r3
   1a5ac:	2102      	movs	r1, #2
   1a5ae:	2000      	movs	r0, #0
   1a5b0:	4b36      	ldr	r3, [pc, #216]	; (1a68c <fn_acc_comp_calibration+0x200>)
   1a5b2:	4798      	blx	r3
	sprintf(display_str, "Status: %d of 4", buf_points );
   1a5b4:	4b21      	ldr	r3, [pc, #132]	; (1a63c <fn_acc_comp_calibration+0x1b0>)
   1a5b6:	781b      	ldrb	r3, [r3, #0]
   1a5b8:	001a      	movs	r2, r3
   1a5ba:	4937      	ldr	r1, [pc, #220]	; (1a698 <fn_acc_comp_calibration+0x20c>)
   1a5bc:	4b30      	ldr	r3, [pc, #192]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a5be:	0018      	movs	r0, r3
   1a5c0:	4b34      	ldr	r3, [pc, #208]	; (1a694 <fn_acc_comp_calibration+0x208>)
   1a5c2:	4798      	blx	r3
	glcd_tiny_draw_string(0,3,display_str);
   1a5c4:	4b2e      	ldr	r3, [pc, #184]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a5c6:	001a      	movs	r2, r3
   1a5c8:	2103      	movs	r1, #3
   1a5ca:	2000      	movs	r0, #0
   1a5cc:	4b2f      	ldr	r3, [pc, #188]	; (1a68c <fn_acc_comp_calibration+0x200>)
   1a5ce:	4798      	blx	r3
	sprintf(display_str, "Complete Groups: %d", disp_groups );
   1a5d0:	23a7      	movs	r3, #167	; 0xa7
   1a5d2:	18fb      	adds	r3, r7, r3
   1a5d4:	781a      	ldrb	r2, [r3, #0]
   1a5d6:	4931      	ldr	r1, [pc, #196]	; (1a69c <fn_acc_comp_calibration+0x210>)
   1a5d8:	4b29      	ldr	r3, [pc, #164]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a5da:	0018      	movs	r0, r3
   1a5dc:	4b2d      	ldr	r3, [pc, #180]	; (1a694 <fn_acc_comp_calibration+0x208>)
   1a5de:	4798      	blx	r3
	glcd_tiny_draw_string(0,5,display_str);
   1a5e0:	4b27      	ldr	r3, [pc, #156]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a5e2:	001a      	movs	r2, r3
   1a5e4:	2105      	movs	r1, #5
   1a5e6:	2000      	movs	r0, #0
   1a5e8:	4b28      	ldr	r3, [pc, #160]	; (1a68c <fn_acc_comp_calibration+0x200>)
   1a5ea:	4798      	blx	r3
	
	
	// Display Soft Keys
	//if (n_groups >= 2){
	if (disp_groups >= min_groups){
   1a5ec:	2209      	movs	r2, #9
   1a5ee:	23a7      	movs	r3, #167	; 0xa7
   1a5f0:	18fb      	adds	r3, r7, r3
   1a5f2:	781b      	ldrb	r3, [r3, #0]
   1a5f4:	4293      	cmp	r3, r2
   1a5f6:	d30d      	bcc.n	1a614 <fn_acc_comp_calibration+0x188>
		sprintf(display_str, "Done");
   1a5f8:	4a21      	ldr	r2, [pc, #132]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a5fa:	4b29      	ldr	r3, [pc, #164]	; (1a6a0 <fn_acc_comp_calibration+0x214>)
   1a5fc:	0010      	movs	r0, r2
   1a5fe:	0019      	movs	r1, r3
   1a600:	2305      	movs	r3, #5
   1a602:	001a      	movs	r2, r3
   1a604:	4b20      	ldr	r3, [pc, #128]	; (1a688 <fn_acc_comp_calibration+0x1fc>)
   1a606:	4798      	blx	r3
		glcd_tiny_draw_string(100,0,display_str);
   1a608:	4b1d      	ldr	r3, [pc, #116]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a60a:	001a      	movs	r2, r3
   1a60c:	2100      	movs	r1, #0
   1a60e:	2064      	movs	r0, #100	; 0x64
   1a610:	4b1e      	ldr	r3, [pc, #120]	; (1a68c <fn_acc_comp_calibration+0x200>)
   1a612:	4798      	blx	r3
	}
	sprintf(display_str, "Abort");
   1a614:	4a1a      	ldr	r2, [pc, #104]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a616:	4b23      	ldr	r3, [pc, #140]	; (1a6a4 <fn_acc_comp_calibration+0x218>)
   1a618:	0010      	movs	r0, r2
   1a61a:	0019      	movs	r1, r3
   1a61c:	2306      	movs	r3, #6
   1a61e:	001a      	movs	r2, r3
   1a620:	4b19      	ldr	r3, [pc, #100]	; (1a688 <fn_acc_comp_calibration+0x1fc>)
   1a622:	4798      	blx	r3
	glcd_tiny_draw_string(97,7,display_str);
   1a624:	4b16      	ldr	r3, [pc, #88]	; (1a680 <fn_acc_comp_calibration+0x1f4>)
   1a626:	001a      	movs	r2, r3
   1a628:	2107      	movs	r1, #7
   1a62a:	2061      	movs	r0, #97	; 0x61
   1a62c:	4b17      	ldr	r3, [pc, #92]	; (1a68c <fn_acc_comp_calibration+0x200>)
   1a62e:	4798      	blx	r3
	

	
	glcd_write();
   1a630:	4b1d      	ldr	r3, [pc, #116]	; (1a6a8 <fn_acc_comp_calibration+0x21c>)
   1a632:	4798      	blx	r3
	
	
}
   1a634:	46c0      	nop			; (mov r8, r8)
   1a636:	46bd      	mov	sp, r7
   1a638:	b02b      	add	sp, #172	; 0xac
   1a63a:	bd90      	pop	{r4, r7, pc}
   1a63c:	20001e9c 	.word	0x20001e9c
   1a640:	20001ea0 	.word	0x20001ea0
   1a644:	200000e8 	.word	0x200000e8
   1a648:	0001aec1 	.word	0x0001aec1
   1a64c:	20002db4 	.word	0x20002db4
   1a650:	20001fe4 	.word	0x20001fe4
   1a654:	200039f8 	.word	0x200039f8
   1a658:	200023a8 	.word	0x200023a8
   1a65c:	20004136 	.word	0x20004136
   1a660:	000035a5 	.word	0x000035a5
   1a664:	0000bcad 	.word	0x0000bcad
   1a668:	20004134 	.word	0x20004134
   1a66c:	000035ed 	.word	0x000035ed
   1a670:	00002d75 	.word	0x00002d75
   1a674:	00028b80 	.word	0x00028b80
   1a678:	00015f85 	.word	0x00015f85
   1a67c:	00015025 	.word	0x00015025
   1a680:	20003534 	.word	0x20003534
   1a684:	00028f50 	.word	0x00028f50
   1a688:	00023c19 	.word	0x00023c19
   1a68c:	00016111 	.word	0x00016111
   1a690:	00028f64 	.word	0x00028f64
   1a694:	00023d31 	.word	0x00023d31
   1a698:	00028f78 	.word	0x00028f78
   1a69c:	00028f88 	.word	0x00028f88
   1a6a0:	00028f9c 	.word	0x00028f9c
   1a6a4:	00028fa4 	.word	0x00028fa4
   1a6a8:	00015869 	.word	0x00015869

0001a6ac <fn_loop_test>:

void fn_loop_test(void){
   1a6ac:	b590      	push	{r4, r7, lr}
   1a6ae:	b0ad      	sub	sp, #180	; 0xb4
   1a6b0:	af02      	add	r7, sp, #8
	struct MEASUREMENT temp_meas;
	//uint32_t timer_count;
	uint8_t i, k;
	
	if (state_change){
   1a6b2:	4bbe      	ldr	r3, [pc, #760]	; (1a9ac <fn_loop_test+0x300>)
   1a6b4:	781b      	ldrb	r3, [r3, #0]
   1a6b6:	b2db      	uxtb	r3, r3
   1a6b8:	2b00      	cmp	r3, #0
   1a6ba:	d03c      	beq.n	1a736 <fn_loop_test+0x8a>
		cal_disp_message();
   1a6bc:	4bbc      	ldr	r3, [pc, #752]	; (1a9b0 <fn_loop_test+0x304>)
   1a6be:	4798      	blx	r3
		//  Set up initial settings
		n_points = 0;
   1a6c0:	4bbc      	ldr	r3, [pc, #752]	; (1a9b4 <fn_loop_test+0x308>)
   1a6c2:	2200      	movs	r2, #0
   1a6c4:	601a      	str	r2, [r3, #0]
		loop_distance = 0;
   1a6c6:	4bbc      	ldr	r3, [pc, #752]	; (1a9b8 <fn_loop_test+0x30c>)
   1a6c8:	2200      	movs	r2, #0
   1a6ca:	601a      	str	r2, [r3, #0]
		loop_horizontal = 0;
   1a6cc:	4bbb      	ldr	r3, [pc, #748]	; (1a9bc <fn_loop_test+0x310>)
   1a6ce:	2200      	movs	r2, #0
   1a6d0:	601a      	str	r2, [r3, #0]
		loop_vertical = 0;
   1a6d2:	4bbb      	ldr	r3, [pc, #748]	; (1a9c0 <fn_loop_test+0x314>)
   1a6d4:	2200      	movs	r2, #0
   1a6d6:	601a      	str	r2, [r3, #0]
		loop_azimuth = 0;
   1a6d8:	4bba      	ldr	r3, [pc, #744]	; (1a9c4 <fn_loop_test+0x318>)
   1a6da:	2200      	movs	r2, #0
   1a6dc:	601a      	str	r2, [r3, #0]
		for (i=0;i<nbuf;i++){
   1a6de:	23a7      	movs	r3, #167	; 0xa7
   1a6e0:	18fb      	adds	r3, r7, r3
   1a6e2:	2200      	movs	r2, #0
   1a6e4:	701a      	strb	r2, [r3, #0]
   1a6e6:	e01b      	b.n	1a720 <fn_loop_test+0x74>
			azimuth[i]=0;
   1a6e8:	23a7      	movs	r3, #167	; 0xa7
   1a6ea:	18fb      	adds	r3, r7, r3
   1a6ec:	781a      	ldrb	r2, [r3, #0]
   1a6ee:	4bb6      	ldr	r3, [pc, #728]	; (1a9c8 <fn_loop_test+0x31c>)
   1a6f0:	0092      	lsls	r2, r2, #2
   1a6f2:	2100      	movs	r1, #0
   1a6f4:	50d1      	str	r1, [r2, r3]
			inclination[i]=0;
   1a6f6:	23a7      	movs	r3, #167	; 0xa7
   1a6f8:	18fb      	adds	r3, r7, r3
   1a6fa:	781a      	ldrb	r2, [r3, #0]
   1a6fc:	4bb3      	ldr	r3, [pc, #716]	; (1a9cc <fn_loop_test+0x320>)
   1a6fe:	0092      	lsls	r2, r2, #2
   1a700:	2100      	movs	r1, #0
   1a702:	50d1      	str	r1, [r2, r3]
			roll[i] = 0;
   1a704:	23a7      	movs	r3, #167	; 0xa7
   1a706:	18fb      	adds	r3, r7, r3
   1a708:	781a      	ldrb	r2, [r3, #0]
   1a70a:	4bb1      	ldr	r3, [pc, #708]	; (1a9d0 <fn_loop_test+0x324>)
   1a70c:	0092      	lsls	r2, r2, #2
   1a70e:	2100      	movs	r1, #0
   1a710:	50d1      	str	r1, [r2, r3]
		for (i=0;i<nbuf;i++){
   1a712:	23a7      	movs	r3, #167	; 0xa7
   1a714:	18fb      	adds	r3, r7, r3
   1a716:	781a      	ldrb	r2, [r3, #0]
   1a718:	23a7      	movs	r3, #167	; 0xa7
   1a71a:	18fb      	adds	r3, r7, r3
   1a71c:	3201      	adds	r2, #1
   1a71e:	701a      	strb	r2, [r3, #0]
   1a720:	23a7      	movs	r3, #167	; 0xa7
   1a722:	18fb      	adds	r3, r7, r3
   1a724:	781b      	ldrb	r3, [r3, #0]
   1a726:	2b4f      	cmp	r3, #79	; 0x4f
   1a728:	d9de      	bls.n	1a6e8 <fn_loop_test+0x3c>
		}
		laser_triggered =  false;
   1a72a:	4baa      	ldr	r3, [pc, #680]	; (1a9d4 <fn_loop_test+0x328>)
   1a72c:	2200      	movs	r2, #0
   1a72e:	701a      	strb	r2, [r3, #0]
		last_input = input_none;
   1a730:	4ba9      	ldr	r3, [pc, #676]	; (1a9d8 <fn_loop_test+0x32c>)
   1a732:	2200      	movs	r2, #0
   1a734:	701a      	strb	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   1a736:	4ba8      	ldr	r3, [pc, #672]	; (1a9d8 <fn_loop_test+0x32c>)
   1a738:	781b      	ldrb	r3, [r3, #0]
   1a73a:	b2db      	uxtb	r3, r3
   1a73c:	2b04      	cmp	r3, #4
   1a73e:	d027      	beq.n	1a790 <fn_loop_test+0xe4>
   1a740:	2b05      	cmp	r3, #5
   1a742:	d009      	beq.n	1a758 <fn_loop_test+0xac>
   1a744:	2b01      	cmp	r3, #1
   1a746:	d124      	bne.n	1a792 <fn_loop_test+0xe6>
		case input_button1:
			//  Calibration Done button
			ioport_set_pin_level(laser_reset, false);
   1a748:	2100      	movs	r1, #0
   1a74a:	2002      	movs	r0, #2
   1a74c:	4ba3      	ldr	r3, [pc, #652]	; (1a9dc <fn_loop_test+0x330>)
   1a74e:	4798      	blx	r3
			current_input = input_state_complete;
   1a750:	4ba3      	ldr	r3, [pc, #652]	; (1a9e0 <fn_loop_test+0x334>)
   1a752:	2208      	movs	r2, #8
   1a754:	701a      	strb	r2, [r3, #0]
			
			break;
   1a756:	e01c      	b.n	1a792 <fn_loop_test+0xe6>
		case input_buttonE:
			//  Set laser and then take measurement
			if (!laser_triggered){
   1a758:	4b9e      	ldr	r3, [pc, #632]	; (1a9d4 <fn_loop_test+0x328>)
   1a75a:	781b      	ldrb	r3, [r3, #0]
   1a75c:	b2db      	uxtb	r3, r3
   1a75e:	2201      	movs	r2, #1
   1a760:	4053      	eors	r3, r2
   1a762:	b2db      	uxtb	r3, r3
   1a764:	2b00      	cmp	r3, #0
   1a766:	d006      	beq.n	1a776 <fn_loop_test+0xca>
				// Turn on rangefinder module and laser
				rangefinder_on_off(true);
   1a768:	2001      	movs	r0, #1
   1a76a:	4b9e      	ldr	r3, [pc, #632]	; (1a9e4 <fn_loop_test+0x338>)
   1a76c:	4798      	blx	r3
				laser_on_off(true);
   1a76e:	2001      	movs	r0, #1
   1a770:	4b9d      	ldr	r3, [pc, #628]	; (1a9e8 <fn_loop_test+0x33c>)
   1a772:	4798      	blx	r3
				//  Turn laser module off
				rangefinder_on_off(false);
				//  Process datapoint
				cal_loop_test(&temp_meas);
			}
			break;
   1a774:	e00d      	b.n	1a792 <fn_loop_test+0xe6>
				full_measurement(&temp_meas, true);
   1a776:	003b      	movs	r3, r7
   1a778:	2101      	movs	r1, #1
   1a77a:	0018      	movs	r0, r3
   1a77c:	4b9b      	ldr	r3, [pc, #620]	; (1a9ec <fn_loop_test+0x340>)
   1a77e:	4798      	blx	r3
				rangefinder_on_off(false);
   1a780:	2000      	movs	r0, #0
   1a782:	4b98      	ldr	r3, [pc, #608]	; (1a9e4 <fn_loop_test+0x338>)
   1a784:	4798      	blx	r3
				cal_loop_test(&temp_meas);
   1a786:	003b      	movs	r3, r7
   1a788:	0018      	movs	r0, r3
   1a78a:	4b99      	ldr	r3, [pc, #612]	; (1a9f0 <fn_loop_test+0x344>)
   1a78c:	4798      	blx	r3
			break;
   1a78e:	e000      	b.n	1a792 <fn_loop_test+0xe6>
		case input_button4:
		// Handled by state machine
		//  Exit from routine
		break;
   1a790:	46c0      	nop			; (mov r8, r8)
	}
	last_input = input_none;
   1a792:	4b91      	ldr	r3, [pc, #580]	; (1a9d8 <fn_loop_test+0x32c>)
   1a794:	2200      	movs	r2, #0
   1a796:	701a      	strb	r2, [r3, #0]
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1a798:	4896      	ldr	r0, [pc, #600]	; (1a9f4 <fn_loop_test+0x348>)
   1a79a:	237f      	movs	r3, #127	; 0x7f
   1a79c:	9300      	str	r3, [sp, #0]
   1a79e:	2320      	movs	r3, #32
   1a7a0:	2207      	movs	r2, #7
   1a7a2:	2105      	movs	r1, #5
   1a7a4:	4c94      	ldr	r4, [pc, #592]	; (1a9f8 <fn_loop_test+0x34c>)
   1a7a6:	47a0      	blx	r4
	glcd_clear_buffer();
   1a7a8:	4b94      	ldr	r3, [pc, #592]	; (1a9fc <fn_loop_test+0x350>)
   1a7aa:	4798      	blx	r3
	
	// Display Header
	sprintf(display_str, "Loop Test:");
   1a7ac:	4a94      	ldr	r2, [pc, #592]	; (1aa00 <fn_loop_test+0x354>)
   1a7ae:	4b95      	ldr	r3, [pc, #596]	; (1aa04 <fn_loop_test+0x358>)
   1a7b0:	0010      	movs	r0, r2
   1a7b2:	0019      	movs	r1, r3
   1a7b4:	230b      	movs	r3, #11
   1a7b6:	001a      	movs	r2, r3
   1a7b8:	4b93      	ldr	r3, [pc, #588]	; (1aa08 <fn_loop_test+0x35c>)
   1a7ba:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1a7bc:	4b90      	ldr	r3, [pc, #576]	; (1aa00 <fn_loop_test+0x354>)
   1a7be:	001a      	movs	r2, r3
   1a7c0:	2100      	movs	r1, #0
   1a7c2:	2000      	movs	r0, #0
   1a7c4:	4b91      	ldr	r3, [pc, #580]	; (1aa0c <fn_loop_test+0x360>)
   1a7c6:	4798      	blx	r3
	
	sprintf(display_str, "Segments: %d", n_points);
   1a7c8:	4b7a      	ldr	r3, [pc, #488]	; (1a9b4 <fn_loop_test+0x308>)
   1a7ca:	681a      	ldr	r2, [r3, #0]
   1a7cc:	4990      	ldr	r1, [pc, #576]	; (1aa10 <fn_loop_test+0x364>)
   1a7ce:	4b8c      	ldr	r3, [pc, #560]	; (1aa00 <fn_loop_test+0x354>)
   1a7d0:	0018      	movs	r0, r3
   1a7d2:	4b90      	ldr	r3, [pc, #576]	; (1aa14 <fn_loop_test+0x368>)
   1a7d4:	4798      	blx	r3
	glcd_tiny_draw_string(0,2,display_str);
   1a7d6:	4b8a      	ldr	r3, [pc, #552]	; (1aa00 <fn_loop_test+0x354>)
   1a7d8:	001a      	movs	r2, r3
   1a7da:	2102      	movs	r1, #2
   1a7dc:	2000      	movs	r0, #0
   1a7de:	4b8b      	ldr	r3, [pc, #556]	; (1aa0c <fn_loop_test+0x360>)
   1a7e0:	4798      	blx	r3
	sprintf(display_str, "Loop length: %.1f", loop_distance);
   1a7e2:	4b75      	ldr	r3, [pc, #468]	; (1a9b8 <fn_loop_test+0x30c>)
   1a7e4:	681a      	ldr	r2, [r3, #0]
   1a7e6:	4b8c      	ldr	r3, [pc, #560]	; (1aa18 <fn_loop_test+0x36c>)
   1a7e8:	1c10      	adds	r0, r2, #0
   1a7ea:	4798      	blx	r3
   1a7ec:	0003      	movs	r3, r0
   1a7ee:	000c      	movs	r4, r1
   1a7f0:	498a      	ldr	r1, [pc, #552]	; (1aa1c <fn_loop_test+0x370>)
   1a7f2:	4883      	ldr	r0, [pc, #524]	; (1aa00 <fn_loop_test+0x354>)
   1a7f4:	001a      	movs	r2, r3
   1a7f6:	0023      	movs	r3, r4
   1a7f8:	4c86      	ldr	r4, [pc, #536]	; (1aa14 <fn_loop_test+0x368>)
   1a7fa:	47a0      	blx	r4
	if (options.current_unit_dist == feet){
   1a7fc:	4b88      	ldr	r3, [pc, #544]	; (1aa20 <fn_loop_test+0x374>)
   1a7fe:	781b      	ldrb	r3, [r3, #0]
   1a800:	2b00      	cmp	r3, #0
   1a802:	d10f      	bne.n	1a824 <fn_loop_test+0x178>
		strcat(display_str,"ft");
   1a804:	4b7e      	ldr	r3, [pc, #504]	; (1aa00 <fn_loop_test+0x354>)
   1a806:	0018      	movs	r0, r3
   1a808:	4b86      	ldr	r3, [pc, #536]	; (1aa24 <fn_loop_test+0x378>)
   1a80a:	4798      	blx	r3
   1a80c:	0003      	movs	r3, r0
   1a80e:	001a      	movs	r2, r3
   1a810:	4b7b      	ldr	r3, [pc, #492]	; (1aa00 <fn_loop_test+0x354>)
   1a812:	18d2      	adds	r2, r2, r3
   1a814:	4b84      	ldr	r3, [pc, #528]	; (1aa28 <fn_loop_test+0x37c>)
   1a816:	0010      	movs	r0, r2
   1a818:	0019      	movs	r1, r3
   1a81a:	2303      	movs	r3, #3
   1a81c:	001a      	movs	r2, r3
   1a81e:	4b7a      	ldr	r3, [pc, #488]	; (1aa08 <fn_loop_test+0x35c>)
   1a820:	4798      	blx	r3
   1a822:	e00e      	b.n	1a842 <fn_loop_test+0x196>
	}else{
		strcat(display_str,"m");
   1a824:	4b76      	ldr	r3, [pc, #472]	; (1aa00 <fn_loop_test+0x354>)
   1a826:	0018      	movs	r0, r3
   1a828:	4b7e      	ldr	r3, [pc, #504]	; (1aa24 <fn_loop_test+0x378>)
   1a82a:	4798      	blx	r3
   1a82c:	0003      	movs	r3, r0
   1a82e:	001a      	movs	r2, r3
   1a830:	4b73      	ldr	r3, [pc, #460]	; (1aa00 <fn_loop_test+0x354>)
   1a832:	18d2      	adds	r2, r2, r3
   1a834:	4b7d      	ldr	r3, [pc, #500]	; (1aa2c <fn_loop_test+0x380>)
   1a836:	0010      	movs	r0, r2
   1a838:	0019      	movs	r1, r3
   1a83a:	2302      	movs	r3, #2
   1a83c:	001a      	movs	r2, r3
   1a83e:	4b72      	ldr	r3, [pc, #456]	; (1aa08 <fn_loop_test+0x35c>)
   1a840:	4798      	blx	r3
	} 
	glcd_tiny_draw_string(0,3,display_str);
   1a842:	4b6f      	ldr	r3, [pc, #444]	; (1aa00 <fn_loop_test+0x354>)
   1a844:	001a      	movs	r2, r3
   1a846:	2103      	movs	r1, #3
   1a848:	2000      	movs	r0, #0
   1a84a:	4b70      	ldr	r3, [pc, #448]	; (1aa0c <fn_loop_test+0x360>)
   1a84c:	4798      	blx	r3
	
	sprintf(display_str, "Displacement from P1:");
   1a84e:	4a6c      	ldr	r2, [pc, #432]	; (1aa00 <fn_loop_test+0x354>)
   1a850:	4b77      	ldr	r3, [pc, #476]	; (1aa30 <fn_loop_test+0x384>)
   1a852:	0010      	movs	r0, r2
   1a854:	0019      	movs	r1, r3
   1a856:	2316      	movs	r3, #22
   1a858:	001a      	movs	r2, r3
   1a85a:	4b6b      	ldr	r3, [pc, #428]	; (1aa08 <fn_loop_test+0x35c>)
   1a85c:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   1a85e:	4b68      	ldr	r3, [pc, #416]	; (1aa00 <fn_loop_test+0x354>)
   1a860:	001a      	movs	r2, r3
   1a862:	2104      	movs	r1, #4
   1a864:	2000      	movs	r0, #0
   1a866:	4b69      	ldr	r3, [pc, #420]	; (1aa0c <fn_loop_test+0x360>)
   1a868:	4798      	blx	r3
	sprintf(display_str, "Horizontal: %.1f", loop_horizontal);
   1a86a:	4b54      	ldr	r3, [pc, #336]	; (1a9bc <fn_loop_test+0x310>)
   1a86c:	681a      	ldr	r2, [r3, #0]
   1a86e:	4b6a      	ldr	r3, [pc, #424]	; (1aa18 <fn_loop_test+0x36c>)
   1a870:	1c10      	adds	r0, r2, #0
   1a872:	4798      	blx	r3
   1a874:	0003      	movs	r3, r0
   1a876:	000c      	movs	r4, r1
   1a878:	496e      	ldr	r1, [pc, #440]	; (1aa34 <fn_loop_test+0x388>)
   1a87a:	4861      	ldr	r0, [pc, #388]	; (1aa00 <fn_loop_test+0x354>)
   1a87c:	001a      	movs	r2, r3
   1a87e:	0023      	movs	r3, r4
   1a880:	4c64      	ldr	r4, [pc, #400]	; (1aa14 <fn_loop_test+0x368>)
   1a882:	47a0      	blx	r4
	if (options.current_unit_dist == feet){
   1a884:	4b66      	ldr	r3, [pc, #408]	; (1aa20 <fn_loop_test+0x374>)
   1a886:	781b      	ldrb	r3, [r3, #0]
   1a888:	2b00      	cmp	r3, #0
   1a88a:	d10f      	bne.n	1a8ac <fn_loop_test+0x200>
		strcat(display_str,"ft");
   1a88c:	4b5c      	ldr	r3, [pc, #368]	; (1aa00 <fn_loop_test+0x354>)
   1a88e:	0018      	movs	r0, r3
   1a890:	4b64      	ldr	r3, [pc, #400]	; (1aa24 <fn_loop_test+0x378>)
   1a892:	4798      	blx	r3
   1a894:	0003      	movs	r3, r0
   1a896:	001a      	movs	r2, r3
   1a898:	4b59      	ldr	r3, [pc, #356]	; (1aa00 <fn_loop_test+0x354>)
   1a89a:	18d2      	adds	r2, r2, r3
   1a89c:	4b62      	ldr	r3, [pc, #392]	; (1aa28 <fn_loop_test+0x37c>)
   1a89e:	0010      	movs	r0, r2
   1a8a0:	0019      	movs	r1, r3
   1a8a2:	2303      	movs	r3, #3
   1a8a4:	001a      	movs	r2, r3
   1a8a6:	4b58      	ldr	r3, [pc, #352]	; (1aa08 <fn_loop_test+0x35c>)
   1a8a8:	4798      	blx	r3
   1a8aa:	e00e      	b.n	1a8ca <fn_loop_test+0x21e>
	}else{
		strcat(display_str,"m");
   1a8ac:	4b54      	ldr	r3, [pc, #336]	; (1aa00 <fn_loop_test+0x354>)
   1a8ae:	0018      	movs	r0, r3
   1a8b0:	4b5c      	ldr	r3, [pc, #368]	; (1aa24 <fn_loop_test+0x378>)
   1a8b2:	4798      	blx	r3
   1a8b4:	0003      	movs	r3, r0
   1a8b6:	001a      	movs	r2, r3
   1a8b8:	4b51      	ldr	r3, [pc, #324]	; (1aa00 <fn_loop_test+0x354>)
   1a8ba:	18d2      	adds	r2, r2, r3
   1a8bc:	4b5b      	ldr	r3, [pc, #364]	; (1aa2c <fn_loop_test+0x380>)
   1a8be:	0010      	movs	r0, r2
   1a8c0:	0019      	movs	r1, r3
   1a8c2:	2302      	movs	r3, #2
   1a8c4:	001a      	movs	r2, r3
   1a8c6:	4b50      	ldr	r3, [pc, #320]	; (1aa08 <fn_loop_test+0x35c>)
   1a8c8:	4798      	blx	r3
	}
	glcd_tiny_draw_string(0,5,display_str);
   1a8ca:	4b4d      	ldr	r3, [pc, #308]	; (1aa00 <fn_loop_test+0x354>)
   1a8cc:	001a      	movs	r2, r3
   1a8ce:	2105      	movs	r1, #5
   1a8d0:	2000      	movs	r0, #0
   1a8d2:	4b4e      	ldr	r3, [pc, #312]	; (1aa0c <fn_loop_test+0x360>)
   1a8d4:	4798      	blx	r3
	sprintf(display_str, "Vertical: %.1f", loop_vertical);
   1a8d6:	4b3a      	ldr	r3, [pc, #232]	; (1a9c0 <fn_loop_test+0x314>)
   1a8d8:	681a      	ldr	r2, [r3, #0]
   1a8da:	4b4f      	ldr	r3, [pc, #316]	; (1aa18 <fn_loop_test+0x36c>)
   1a8dc:	1c10      	adds	r0, r2, #0
   1a8de:	4798      	blx	r3
   1a8e0:	0003      	movs	r3, r0
   1a8e2:	000c      	movs	r4, r1
   1a8e4:	4954      	ldr	r1, [pc, #336]	; (1aa38 <fn_loop_test+0x38c>)
   1a8e6:	4846      	ldr	r0, [pc, #280]	; (1aa00 <fn_loop_test+0x354>)
   1a8e8:	001a      	movs	r2, r3
   1a8ea:	0023      	movs	r3, r4
   1a8ec:	4c49      	ldr	r4, [pc, #292]	; (1aa14 <fn_loop_test+0x368>)
   1a8ee:	47a0      	blx	r4
	if (options.current_unit_dist == feet){
   1a8f0:	4b4b      	ldr	r3, [pc, #300]	; (1aa20 <fn_loop_test+0x374>)
   1a8f2:	781b      	ldrb	r3, [r3, #0]
   1a8f4:	2b00      	cmp	r3, #0
   1a8f6:	d10f      	bne.n	1a918 <fn_loop_test+0x26c>
		strcat(display_str,"ft");
   1a8f8:	4b41      	ldr	r3, [pc, #260]	; (1aa00 <fn_loop_test+0x354>)
   1a8fa:	0018      	movs	r0, r3
   1a8fc:	4b49      	ldr	r3, [pc, #292]	; (1aa24 <fn_loop_test+0x378>)
   1a8fe:	4798      	blx	r3
   1a900:	0003      	movs	r3, r0
   1a902:	001a      	movs	r2, r3
   1a904:	4b3e      	ldr	r3, [pc, #248]	; (1aa00 <fn_loop_test+0x354>)
   1a906:	18d2      	adds	r2, r2, r3
   1a908:	4b47      	ldr	r3, [pc, #284]	; (1aa28 <fn_loop_test+0x37c>)
   1a90a:	0010      	movs	r0, r2
   1a90c:	0019      	movs	r1, r3
   1a90e:	2303      	movs	r3, #3
   1a910:	001a      	movs	r2, r3
   1a912:	4b3d      	ldr	r3, [pc, #244]	; (1aa08 <fn_loop_test+0x35c>)
   1a914:	4798      	blx	r3
   1a916:	e00e      	b.n	1a936 <fn_loop_test+0x28a>
		}else{
		strcat(display_str,"m");
   1a918:	4b39      	ldr	r3, [pc, #228]	; (1aa00 <fn_loop_test+0x354>)
   1a91a:	0018      	movs	r0, r3
   1a91c:	4b41      	ldr	r3, [pc, #260]	; (1aa24 <fn_loop_test+0x378>)
   1a91e:	4798      	blx	r3
   1a920:	0003      	movs	r3, r0
   1a922:	001a      	movs	r2, r3
   1a924:	4b36      	ldr	r3, [pc, #216]	; (1aa00 <fn_loop_test+0x354>)
   1a926:	18d2      	adds	r2, r2, r3
   1a928:	4b40      	ldr	r3, [pc, #256]	; (1aa2c <fn_loop_test+0x380>)
   1a92a:	0010      	movs	r0, r2
   1a92c:	0019      	movs	r1, r3
   1a92e:	2302      	movs	r3, #2
   1a930:	001a      	movs	r2, r3
   1a932:	4b35      	ldr	r3, [pc, #212]	; (1aa08 <fn_loop_test+0x35c>)
   1a934:	4798      	blx	r3
	}
	glcd_tiny_draw_string(0,6,display_str);
   1a936:	4b32      	ldr	r3, [pc, #200]	; (1aa00 <fn_loop_test+0x354>)
   1a938:	001a      	movs	r2, r3
   1a93a:	2106      	movs	r1, #6
   1a93c:	2000      	movs	r0, #0
   1a93e:	4b33      	ldr	r3, [pc, #204]	; (1aa0c <fn_loop_test+0x360>)
   1a940:	4798      	blx	r3
	sprintf(display_str, "Azimuth: %.1f", loop_azimuth);
   1a942:	4b20      	ldr	r3, [pc, #128]	; (1a9c4 <fn_loop_test+0x318>)
   1a944:	681a      	ldr	r2, [r3, #0]
   1a946:	4b34      	ldr	r3, [pc, #208]	; (1aa18 <fn_loop_test+0x36c>)
   1a948:	1c10      	adds	r0, r2, #0
   1a94a:	4798      	blx	r3
   1a94c:	0003      	movs	r3, r0
   1a94e:	000c      	movs	r4, r1
   1a950:	493a      	ldr	r1, [pc, #232]	; (1aa3c <fn_loop_test+0x390>)
   1a952:	482b      	ldr	r0, [pc, #172]	; (1aa00 <fn_loop_test+0x354>)
   1a954:	001a      	movs	r2, r3
   1a956:	0023      	movs	r3, r4
   1a958:	4c2e      	ldr	r4, [pc, #184]	; (1aa14 <fn_loop_test+0x368>)
   1a95a:	47a0      	blx	r4
	glcd_tiny_draw_string(0,7,display_str);
   1a95c:	4b28      	ldr	r3, [pc, #160]	; (1aa00 <fn_loop_test+0x354>)
   1a95e:	001a      	movs	r2, r3
   1a960:	2107      	movs	r1, #7
   1a962:	2000      	movs	r0, #0
   1a964:	4b29      	ldr	r3, [pc, #164]	; (1aa0c <fn_loop_test+0x360>)
   1a966:	4798      	blx	r3
	
	
	// Display Soft Keys
	sprintf(display_str, "Done");
   1a968:	4a25      	ldr	r2, [pc, #148]	; (1aa00 <fn_loop_test+0x354>)
   1a96a:	4b35      	ldr	r3, [pc, #212]	; (1aa40 <fn_loop_test+0x394>)
   1a96c:	0010      	movs	r0, r2
   1a96e:	0019      	movs	r1, r3
   1a970:	2305      	movs	r3, #5
   1a972:	001a      	movs	r2, r3
   1a974:	4b24      	ldr	r3, [pc, #144]	; (1aa08 <fn_loop_test+0x35c>)
   1a976:	4798      	blx	r3
	glcd_tiny_draw_string(100,0,display_str);
   1a978:	4b21      	ldr	r3, [pc, #132]	; (1aa00 <fn_loop_test+0x354>)
   1a97a:	001a      	movs	r2, r3
   1a97c:	2100      	movs	r1, #0
   1a97e:	2064      	movs	r0, #100	; 0x64
   1a980:	4b22      	ldr	r3, [pc, #136]	; (1aa0c <fn_loop_test+0x360>)
   1a982:	4798      	blx	r3
	sprintf(display_str, "Abort");
   1a984:	4a1e      	ldr	r2, [pc, #120]	; (1aa00 <fn_loop_test+0x354>)
   1a986:	4b2f      	ldr	r3, [pc, #188]	; (1aa44 <fn_loop_test+0x398>)
   1a988:	0010      	movs	r0, r2
   1a98a:	0019      	movs	r1, r3
   1a98c:	2306      	movs	r3, #6
   1a98e:	001a      	movs	r2, r3
   1a990:	4b1d      	ldr	r3, [pc, #116]	; (1aa08 <fn_loop_test+0x35c>)
   1a992:	4798      	blx	r3
	glcd_tiny_draw_string(97,7,display_str);
   1a994:	4b1a      	ldr	r3, [pc, #104]	; (1aa00 <fn_loop_test+0x354>)
   1a996:	001a      	movs	r2, r3
   1a998:	2107      	movs	r1, #7
   1a99a:	2061      	movs	r0, #97	; 0x61
   1a99c:	4b1b      	ldr	r3, [pc, #108]	; (1aa0c <fn_loop_test+0x360>)
   1a99e:	4798      	blx	r3
	
	glcd_write();
   1a9a0:	4b29      	ldr	r3, [pc, #164]	; (1aa48 <fn_loop_test+0x39c>)
   1a9a2:	4798      	blx	r3
}
   1a9a4:	46c0      	nop			; (mov r8, r8)
   1a9a6:	46bd      	mov	sp, r7
   1a9a8:	b02b      	add	sp, #172	; 0xac
   1a9aa:	bd90      	pop	{r4, r7, pc}
   1a9ac:	200000e8 	.word	0x200000e8
   1a9b0:	0001aec1 	.word	0x0001aec1
   1a9b4:	20002db4 	.word	0x20002db4
   1a9b8:	200034a4 	.word	0x200034a4
   1a9bc:	20004130 	.word	0x20004130
   1a9c0:	2000349c 	.word	0x2000349c
   1a9c4:	20004f34 	.word	0x20004f34
   1a9c8:	20001ea4 	.word	0x20001ea4
   1a9cc:	20003ff0 	.word	0x20003ff0
   1a9d0:	20004514 	.word	0x20004514
   1a9d4:	200023a8 	.word	0x200023a8
   1a9d8:	20004136 	.word	0x20004136
   1a9dc:	00019325 	.word	0x00019325
   1a9e0:	20004134 	.word	0x20004134
   1a9e4:	000035a5 	.word	0x000035a5
   1a9e8:	000035ed 	.word	0x000035ed
   1a9ec:	00002d75 	.word	0x00002d75
   1a9f0:	0000948d 	.word	0x0000948d
   1a9f4:	00028b80 	.word	0x00028b80
   1a9f8:	00015f85 	.word	0x00015f85
   1a9fc:	00015025 	.word	0x00015025
   1aa00:	20003534 	.word	0x20003534
   1aa04:	00028fac 	.word	0x00028fac
   1aa08:	00023c19 	.word	0x00023c19
   1aa0c:	00016111 	.word	0x00016111
   1aa10:	00028fb8 	.word	0x00028fb8
   1aa14:	00023d31 	.word	0x00023d31
   1aa18:	00023a0d 	.word	0x00023a0d
   1aa1c:	00028fc8 	.word	0x00028fc8
   1aa20:	200034a8 	.word	0x200034a8
   1aa24:	00023dd1 	.word	0x00023dd1
   1aa28:	00028fdc 	.word	0x00028fdc
   1aa2c:	00028fe0 	.word	0x00028fe0
   1aa30:	00028fe4 	.word	0x00028fe4
   1aa34:	00028ffc 	.word	0x00028ffc
   1aa38:	00029010 	.word	0x00029010
   1aa3c:	00029020 	.word	0x00029020
   1aa40:	00028f9c 	.word	0x00028f9c
   1aa44:	00028fa4 	.word	0x00028fa4
   1aa48:	00015869 	.word	0x00015869

0001aa4c <fn_disp_loop_report>:

void fn_disp_loop_report(void){
   1aa4c:	b5b0      	push	{r4, r5, r7, lr}
   1aa4e:	b084      	sub	sp, #16
   1aa50:	af02      	add	r7, sp, #8
		char unit_str[4];
		//float total_error;
		
		if (options.current_unit_dist == feet){
   1aa52:	4b4b      	ldr	r3, [pc, #300]	; (1ab80 <fn_disp_loop_report+0x134>)
   1aa54:	781b      	ldrb	r3, [r3, #0]
   1aa56:	2b00      	cmp	r3, #0
   1aa58:	d106      	bne.n	1aa68 <fn_disp_loop_report+0x1c>
			strcpy(unit_str,"ft");
   1aa5a:	1d3b      	adds	r3, r7, #4
   1aa5c:	4a49      	ldr	r2, [pc, #292]	; (1ab84 <fn_disp_loop_report+0x138>)
   1aa5e:	8811      	ldrh	r1, [r2, #0]
   1aa60:	8019      	strh	r1, [r3, #0]
   1aa62:	7892      	ldrb	r2, [r2, #2]
   1aa64:	709a      	strb	r2, [r3, #2]
   1aa66:	e002      	b.n	1aa6e <fn_disp_loop_report+0x22>
		}else{
			strcpy(unit_str,"m");
   1aa68:	1d3b      	adds	r3, r7, #4
   1aa6a:	226d      	movs	r2, #109	; 0x6d
   1aa6c:	801a      	strh	r2, [r3, #0]
		}
		
		
		glcd_clear_buffer();
   1aa6e:	4b46      	ldr	r3, [pc, #280]	; (1ab88 <fn_disp_loop_report+0x13c>)
   1aa70:	4798      	blx	r3
		sprintf(display_str, "Loop Test Report:");
   1aa72:	4a46      	ldr	r2, [pc, #280]	; (1ab8c <fn_disp_loop_report+0x140>)
   1aa74:	4b46      	ldr	r3, [pc, #280]	; (1ab90 <fn_disp_loop_report+0x144>)
   1aa76:	0010      	movs	r0, r2
   1aa78:	0019      	movs	r1, r3
   1aa7a:	2312      	movs	r3, #18
   1aa7c:	001a      	movs	r2, r3
   1aa7e:	4b45      	ldr	r3, [pc, #276]	; (1ab94 <fn_disp_loop_report+0x148>)
   1aa80:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   1aa82:	4b42      	ldr	r3, [pc, #264]	; (1ab8c <fn_disp_loop_report+0x140>)
   1aa84:	001a      	movs	r2, r3
   1aa86:	2100      	movs	r1, #0
   1aa88:	2000      	movs	r0, #0
   1aa8a:	4b43      	ldr	r3, [pc, #268]	; (1ab98 <fn_disp_loop_report+0x14c>)
   1aa8c:	4798      	blx	r3
		
		sprintf(display_str,"Segments: %d",n_points);
   1aa8e:	4b43      	ldr	r3, [pc, #268]	; (1ab9c <fn_disp_loop_report+0x150>)
   1aa90:	681a      	ldr	r2, [r3, #0]
   1aa92:	4943      	ldr	r1, [pc, #268]	; (1aba0 <fn_disp_loop_report+0x154>)
   1aa94:	4b3d      	ldr	r3, [pc, #244]	; (1ab8c <fn_disp_loop_report+0x140>)
   1aa96:	0018      	movs	r0, r3
   1aa98:	4b42      	ldr	r3, [pc, #264]	; (1aba4 <fn_disp_loop_report+0x158>)
   1aa9a:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);
   1aa9c:	4b3b      	ldr	r3, [pc, #236]	; (1ab8c <fn_disp_loop_report+0x140>)
   1aa9e:	001a      	movs	r2, r3
   1aaa0:	2101      	movs	r1, #1
   1aaa2:	2000      	movs	r0, #0
   1aaa4:	4b3c      	ldr	r3, [pc, #240]	; (1ab98 <fn_disp_loop_report+0x14c>)
   1aaa6:	4798      	blx	r3
		
		sprintf(display_str,"Total Length: %.1f %s", loop_distance, unit_str);
   1aaa8:	4b3f      	ldr	r3, [pc, #252]	; (1aba8 <fn_disp_loop_report+0x15c>)
   1aaaa:	681a      	ldr	r2, [r3, #0]
   1aaac:	4b3f      	ldr	r3, [pc, #252]	; (1abac <fn_disp_loop_report+0x160>)
   1aaae:	1c10      	adds	r0, r2, #0
   1aab0:	4798      	blx	r3
   1aab2:	0004      	movs	r4, r0
   1aab4:	000d      	movs	r5, r1
   1aab6:	493e      	ldr	r1, [pc, #248]	; (1abb0 <fn_disp_loop_report+0x164>)
   1aab8:	4834      	ldr	r0, [pc, #208]	; (1ab8c <fn_disp_loop_report+0x140>)
   1aaba:	1d3b      	adds	r3, r7, #4
   1aabc:	9300      	str	r3, [sp, #0]
   1aabe:	0022      	movs	r2, r4
   1aac0:	002b      	movs	r3, r5
   1aac2:	4c38      	ldr	r4, [pc, #224]	; (1aba4 <fn_disp_loop_report+0x158>)
   1aac4:	47a0      	blx	r4
		glcd_tiny_draw_string(0,2,display_str);
   1aac6:	4b31      	ldr	r3, [pc, #196]	; (1ab8c <fn_disp_loop_report+0x140>)
   1aac8:	001a      	movs	r2, r3
   1aaca:	2102      	movs	r1, #2
   1aacc:	2000      	movs	r0, #0
   1aace:	4b32      	ldr	r3, [pc, #200]	; (1ab98 <fn_disp_loop_report+0x14c>)
   1aad0:	4798      	blx	r3
		
		sprintf(display_str,"Horz Err: %.3f %s", loop_horizontal, unit_str);
   1aad2:	4b38      	ldr	r3, [pc, #224]	; (1abb4 <fn_disp_loop_report+0x168>)
   1aad4:	681a      	ldr	r2, [r3, #0]
   1aad6:	4b35      	ldr	r3, [pc, #212]	; (1abac <fn_disp_loop_report+0x160>)
   1aad8:	1c10      	adds	r0, r2, #0
   1aada:	4798      	blx	r3
   1aadc:	0004      	movs	r4, r0
   1aade:	000d      	movs	r5, r1
   1aae0:	4935      	ldr	r1, [pc, #212]	; (1abb8 <fn_disp_loop_report+0x16c>)
   1aae2:	482a      	ldr	r0, [pc, #168]	; (1ab8c <fn_disp_loop_report+0x140>)
   1aae4:	1d3b      	adds	r3, r7, #4
   1aae6:	9300      	str	r3, [sp, #0]
   1aae8:	0022      	movs	r2, r4
   1aaea:	002b      	movs	r3, r5
   1aaec:	4c2d      	ldr	r4, [pc, #180]	; (1aba4 <fn_disp_loop_report+0x158>)
   1aaee:	47a0      	blx	r4
		glcd_tiny_draw_string(0,3,display_str);
   1aaf0:	4b26      	ldr	r3, [pc, #152]	; (1ab8c <fn_disp_loop_report+0x140>)
   1aaf2:	001a      	movs	r2, r3
   1aaf4:	2103      	movs	r1, #3
   1aaf6:	2000      	movs	r0, #0
   1aaf8:	4b27      	ldr	r3, [pc, #156]	; (1ab98 <fn_disp_loop_report+0x14c>)
   1aafa:	4798      	blx	r3
		
		sprintf(display_str,"Vert Err: %.3f %s", loop_vertical, unit_str);
   1aafc:	4b2f      	ldr	r3, [pc, #188]	; (1abbc <fn_disp_loop_report+0x170>)
   1aafe:	681a      	ldr	r2, [r3, #0]
   1ab00:	4b2a      	ldr	r3, [pc, #168]	; (1abac <fn_disp_loop_report+0x160>)
   1ab02:	1c10      	adds	r0, r2, #0
   1ab04:	4798      	blx	r3
   1ab06:	0004      	movs	r4, r0
   1ab08:	000d      	movs	r5, r1
   1ab0a:	492d      	ldr	r1, [pc, #180]	; (1abc0 <fn_disp_loop_report+0x174>)
   1ab0c:	481f      	ldr	r0, [pc, #124]	; (1ab8c <fn_disp_loop_report+0x140>)
   1ab0e:	1d3b      	adds	r3, r7, #4
   1ab10:	9300      	str	r3, [sp, #0]
   1ab12:	0022      	movs	r2, r4
   1ab14:	002b      	movs	r3, r5
   1ab16:	4c23      	ldr	r4, [pc, #140]	; (1aba4 <fn_disp_loop_report+0x158>)
   1ab18:	47a0      	blx	r4
		glcd_tiny_draw_string(0,4,display_str);
   1ab1a:	4b1c      	ldr	r3, [pc, #112]	; (1ab8c <fn_disp_loop_report+0x140>)
   1ab1c:	001a      	movs	r2, r3
   1ab1e:	2104      	movs	r1, #4
   1ab20:	2000      	movs	r0, #0
   1ab22:	4b1d      	ldr	r3, [pc, #116]	; (1ab98 <fn_disp_loop_report+0x14c>)
   1ab24:	4798      	blx	r3
		
		sprintf(display_str,"  Azim Err: %.1f deg", loop_azimuth);
   1ab26:	4b27      	ldr	r3, [pc, #156]	; (1abc4 <fn_disp_loop_report+0x178>)
   1ab28:	681a      	ldr	r2, [r3, #0]
   1ab2a:	4b20      	ldr	r3, [pc, #128]	; (1abac <fn_disp_loop_report+0x160>)
   1ab2c:	1c10      	adds	r0, r2, #0
   1ab2e:	4798      	blx	r3
   1ab30:	0003      	movs	r3, r0
   1ab32:	000c      	movs	r4, r1
   1ab34:	4924      	ldr	r1, [pc, #144]	; (1abc8 <fn_disp_loop_report+0x17c>)
   1ab36:	4815      	ldr	r0, [pc, #84]	; (1ab8c <fn_disp_loop_report+0x140>)
   1ab38:	001a      	movs	r2, r3
   1ab3a:	0023      	movs	r3, r4
   1ab3c:	4c19      	ldr	r4, [pc, #100]	; (1aba4 <fn_disp_loop_report+0x158>)
   1ab3e:	47a0      	blx	r4
		glcd_tiny_draw_string(0,5,display_str);
   1ab40:	4b12      	ldr	r3, [pc, #72]	; (1ab8c <fn_disp_loop_report+0x140>)
   1ab42:	001a      	movs	r2, r3
   1ab44:	2105      	movs	r1, #5
   1ab46:	2000      	movs	r0, #0
   1ab48:	4b13      	ldr	r3, [pc, #76]	; (1ab98 <fn_disp_loop_report+0x14c>)
   1ab4a:	4798      	blx	r3
		
		sprintf(display_str,"Loop Err: %.3f%% ", loop_error);
   1ab4c:	4b1f      	ldr	r3, [pc, #124]	; (1abcc <fn_disp_loop_report+0x180>)
   1ab4e:	681a      	ldr	r2, [r3, #0]
   1ab50:	4b16      	ldr	r3, [pc, #88]	; (1abac <fn_disp_loop_report+0x160>)
   1ab52:	1c10      	adds	r0, r2, #0
   1ab54:	4798      	blx	r3
   1ab56:	0003      	movs	r3, r0
   1ab58:	000c      	movs	r4, r1
   1ab5a:	491d      	ldr	r1, [pc, #116]	; (1abd0 <fn_disp_loop_report+0x184>)
   1ab5c:	480b      	ldr	r0, [pc, #44]	; (1ab8c <fn_disp_loop_report+0x140>)
   1ab5e:	001a      	movs	r2, r3
   1ab60:	0023      	movs	r3, r4
   1ab62:	4c10      	ldr	r4, [pc, #64]	; (1aba4 <fn_disp_loop_report+0x158>)
   1ab64:	47a0      	blx	r4
		glcd_tiny_draw_string(0,5,display_str);
   1ab66:	4b09      	ldr	r3, [pc, #36]	; (1ab8c <fn_disp_loop_report+0x140>)
   1ab68:	001a      	movs	r2, r3
   1ab6a:	2105      	movs	r1, #5
   1ab6c:	2000      	movs	r0, #0
   1ab6e:	4b0a      	ldr	r3, [pc, #40]	; (1ab98 <fn_disp_loop_report+0x14c>)
   1ab70:	4798      	blx	r3
		
		
		
		glcd_write();
   1ab72:	4b18      	ldr	r3, [pc, #96]	; (1abd4 <fn_disp_loop_report+0x188>)
   1ab74:	4798      	blx	r3
	
}
   1ab76:	46c0      	nop			; (mov r8, r8)
   1ab78:	46bd      	mov	sp, r7
   1ab7a:	b002      	add	sp, #8
   1ab7c:	bdb0      	pop	{r4, r5, r7, pc}
   1ab7e:	46c0      	nop			; (mov r8, r8)
   1ab80:	200034a8 	.word	0x200034a8
   1ab84:	00028fdc 	.word	0x00028fdc
   1ab88:	00015025 	.word	0x00015025
   1ab8c:	20003534 	.word	0x20003534
   1ab90:	00029030 	.word	0x00029030
   1ab94:	00023c19 	.word	0x00023c19
   1ab98:	00016111 	.word	0x00016111
   1ab9c:	20002db4 	.word	0x20002db4
   1aba0:	00028fb8 	.word	0x00028fb8
   1aba4:	00023d31 	.word	0x00023d31
   1aba8:	200034a4 	.word	0x200034a4
   1abac:	00023a0d 	.word	0x00023a0d
   1abb0:	00029044 	.word	0x00029044
   1abb4:	20004130 	.word	0x20004130
   1abb8:	0002905c 	.word	0x0002905c
   1abbc:	2000349c 	.word	0x2000349c
   1abc0:	00029070 	.word	0x00029070
   1abc4:	20004f34 	.word	0x20004f34
   1abc8:	00029084 	.word	0x00029084
   1abcc:	20004b10 	.word	0x20004b10
   1abd0:	0002909c 	.word	0x0002909c
   1abd4:	00015869 	.word	0x00015869

0001abd8 <fn_dist_calibration>:


void fn_dist_calibration(void){
   1abd8:	b5b0      	push	{r4, r5, r7, lr}
   1abda:	b0ac      	sub	sp, #176	; 0xb0
   1abdc:	af02      	add	r7, sp, #8
	struct MEASUREMENT temp_meas;
	
	//uint32_t timer_count;
	uint8_t k;
	
	if (state_change){
   1abde:	4b94      	ldr	r3, [pc, #592]	; (1ae30 <fn_dist_calibration+0x258>)
   1abe0:	781b      	ldrb	r3, [r3, #0]
   1abe2:	b2db      	uxtb	r3, r3
   1abe4:	2b00      	cmp	r3, #0
   1abe6:	d025      	beq.n	1ac34 <fn_dist_calibration+0x5c>
		cal_disp_message();
   1abe8:	4b92      	ldr	r3, [pc, #584]	; (1ae34 <fn_dist_calibration+0x25c>)
   1abea:	4798      	blx	r3
		//  Set up initial settings
		buf_points = 0;
   1abec:	4b92      	ldr	r3, [pc, #584]	; (1ae38 <fn_dist_calibration+0x260>)
   1abee:	2200      	movs	r2, #0
   1abf0:	701a      	strb	r2, [r3, #0]
		ind_buf = 0;// Circular buffer
   1abf2:	4b92      	ldr	r3, [pc, #584]	; (1ae3c <fn_dist_calibration+0x264>)
   1abf4:	2200      	movs	r2, #0
   1abf6:	701a      	strb	r2, [r3, #0]
		for (k=0;k<shot_size;k++){
   1abf8:	23a7      	movs	r3, #167	; 0xa7
   1abfa:	18fb      	adds	r3, r7, r3
   1abfc:	2200      	movs	r2, #0
   1abfe:	701a      	strb	r2, [r3, #0]
   1ac00:	e00d      	b.n	1ac1e <fn_dist_calibration+0x46>
			dist_raw_buf[k] = 0;
   1ac02:	23a7      	movs	r3, #167	; 0xa7
   1ac04:	18fb      	adds	r3, r7, r3
   1ac06:	781a      	ldrb	r2, [r3, #0]
   1ac08:	4b8d      	ldr	r3, [pc, #564]	; (1ae40 <fn_dist_calibration+0x268>)
   1ac0a:	0092      	lsls	r2, r2, #2
   1ac0c:	2100      	movs	r1, #0
   1ac0e:	50d1      	str	r1, [r2, r3]
		for (k=0;k<shot_size;k++){
   1ac10:	23a7      	movs	r3, #167	; 0xa7
   1ac12:	18fb      	adds	r3, r7, r3
   1ac14:	781a      	ldrb	r2, [r3, #0]
   1ac16:	23a7      	movs	r3, #167	; 0xa7
   1ac18:	18fb      	adds	r3, r7, r3
   1ac1a:	3201      	adds	r2, #1
   1ac1c:	701a      	strb	r2, [r3, #0]
   1ac1e:	23a7      	movs	r3, #167	; 0xa7
   1ac20:	18fb      	adds	r3, r7, r3
   1ac22:	781b      	ldrb	r3, [r3, #0]
   1ac24:	2b03      	cmp	r3, #3
   1ac26:	d9ec      	bls.n	1ac02 <fn_dist_calibration+0x2a>
		}
		laser_triggered =  false;
   1ac28:	4b86      	ldr	r3, [pc, #536]	; (1ae44 <fn_dist_calibration+0x26c>)
   1ac2a:	2200      	movs	r2, #0
   1ac2c:	701a      	strb	r2, [r3, #0]
		last_input = input_none;
   1ac2e:	4b86      	ldr	r3, [pc, #536]	; (1ae48 <fn_dist_calibration+0x270>)
   1ac30:	2200      	movs	r2, #0
   1ac32:	701a      	strb	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   1ac34:	4b84      	ldr	r3, [pc, #528]	; (1ae48 <fn_dist_calibration+0x270>)
   1ac36:	781b      	ldrb	r3, [r3, #0]
   1ac38:	b2db      	uxtb	r3, r3
   1ac3a:	2b04      	cmp	r3, #4
   1ac3c:	d02a      	beq.n	1ac94 <fn_dist_calibration+0xbc>
   1ac3e:	2b05      	cmp	r3, #5
   1ac40:	d010      	beq.n	1ac64 <fn_dist_calibration+0x8c>
   1ac42:	2b01      	cmp	r3, #1
   1ac44:	d129      	bne.n	1ac9a <fn_dist_calibration+0xc2>
		case input_button1:
			//  Calibration Done button
			if (buf_points >= shot_size){
   1ac46:	4b7c      	ldr	r3, [pc, #496]	; (1ae38 <fn_dist_calibration+0x260>)
   1ac48:	781b      	ldrb	r3, [r3, #0]
   1ac4a:	2b03      	cmp	r3, #3
   1ac4c:	d924      	bls.n	1ac98 <fn_dist_calibration+0xc0>
				//  Turn off rangefinder
				rangefinder_on_off(false);
   1ac4e:	2000      	movs	r0, #0
   1ac50:	4b7e      	ldr	r3, [pc, #504]	; (1ae4c <fn_dist_calibration+0x274>)
   1ac52:	4798      	blx	r3
				// Process Calibration data
				cal_dist_process();
   1ac54:	4b7e      	ldr	r3, [pc, #504]	; (1ae50 <fn_dist_calibration+0x278>)
   1ac56:	4798      	blx	r3
				//  Save data to EEPROM
				save_calibration();
   1ac58:	4b7e      	ldr	r3, [pc, #504]	; (1ae54 <fn_dist_calibration+0x27c>)
   1ac5a:	4798      	blx	r3
				current_input = input_state_complete;
   1ac5c:	4b7e      	ldr	r3, [pc, #504]	; (1ae58 <fn_dist_calibration+0x280>)
   1ac5e:	2208      	movs	r2, #8
   1ac60:	701a      	strb	r2, [r3, #0]
			}
			break;
   1ac62:	e019      	b.n	1ac98 <fn_dist_calibration+0xc0>
		case input_buttonE:
			//  Set laser and then take measurement
			if (!laser_triggered){
   1ac64:	4b77      	ldr	r3, [pc, #476]	; (1ae44 <fn_dist_calibration+0x26c>)
   1ac66:	781b      	ldrb	r3, [r3, #0]
   1ac68:	b2db      	uxtb	r3, r3
   1ac6a:	2201      	movs	r2, #1
   1ac6c:	4053      	eors	r3, r2
   1ac6e:	b2db      	uxtb	r3, r3
   1ac70:	2b00      	cmp	r3, #0
   1ac72:	d006      	beq.n	1ac82 <fn_dist_calibration+0xaa>
				// Turn on rangefinder module and laser
				rangefinder_on_off(true);
   1ac74:	2001      	movs	r0, #1
   1ac76:	4b75      	ldr	r3, [pc, #468]	; (1ae4c <fn_dist_calibration+0x274>)
   1ac78:	4798      	blx	r3
				laser_on_off(true);
   1ac7a:	2001      	movs	r0, #1
   1ac7c:	4b77      	ldr	r3, [pc, #476]	; (1ae5c <fn_dist_calibration+0x284>)
   1ac7e:	4798      	blx	r3
				//  Take measurement and process data
				full_measurement(&temp_meas, false);
				//  Turn laser module off
				rangefinder_on_off(true);
			}
			break;
   1ac80:	e00b      	b.n	1ac9a <fn_dist_calibration+0xc2>
				full_measurement(&temp_meas, false);
   1ac82:	003b      	movs	r3, r7
   1ac84:	2100      	movs	r1, #0
   1ac86:	0018      	movs	r0, r3
   1ac88:	4b75      	ldr	r3, [pc, #468]	; (1ae60 <fn_dist_calibration+0x288>)
   1ac8a:	4798      	blx	r3
				rangefinder_on_off(true);
   1ac8c:	2001      	movs	r0, #1
   1ac8e:	4b6f      	ldr	r3, [pc, #444]	; (1ae4c <fn_dist_calibration+0x274>)
   1ac90:	4798      	blx	r3
			break;
   1ac92:	e002      	b.n	1ac9a <fn_dist_calibration+0xc2>
		case input_button4:
			// Handled by state machine
			//  Exit from routine
			break;
   1ac94:	46c0      	nop			; (mov r8, r8)
   1ac96:	e000      	b.n	1ac9a <fn_dist_calibration+0xc2>
			break;
   1ac98:	46c0      	nop			; (mov r8, r8)
	}
	last_input = input_none;
   1ac9a:	4b6b      	ldr	r3, [pc, #428]	; (1ae48 <fn_dist_calibration+0x270>)
   1ac9c:	2200      	movs	r2, #0
   1ac9e:	701a      	strb	r2, [r3, #0]
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1aca0:	4870      	ldr	r0, [pc, #448]	; (1ae64 <fn_dist_calibration+0x28c>)
   1aca2:	237f      	movs	r3, #127	; 0x7f
   1aca4:	9300      	str	r3, [sp, #0]
   1aca6:	2320      	movs	r3, #32
   1aca8:	2207      	movs	r2, #7
   1acaa:	2105      	movs	r1, #5
   1acac:	4c6e      	ldr	r4, [pc, #440]	; (1ae68 <fn_dist_calibration+0x290>)
   1acae:	47a0      	blx	r4
	glcd_clear_buffer();
   1acb0:	4b6e      	ldr	r3, [pc, #440]	; (1ae6c <fn_dist_calibration+0x294>)
   1acb2:	4798      	blx	r3
	
	// Display Header
	sprintf(display_str, "Calibration Mode");
   1acb4:	4a6e      	ldr	r2, [pc, #440]	; (1ae70 <fn_dist_calibration+0x298>)
   1acb6:	4b6f      	ldr	r3, [pc, #444]	; (1ae74 <fn_dist_calibration+0x29c>)
   1acb8:	0010      	movs	r0, r2
   1acba:	0019      	movs	r1, r3
   1acbc:	2311      	movs	r3, #17
   1acbe:	001a      	movs	r2, r3
   1acc0:	4b6d      	ldr	r3, [pc, #436]	; (1ae78 <fn_dist_calibration+0x2a0>)
   1acc2:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1acc4:	4b6a      	ldr	r3, [pc, #424]	; (1ae70 <fn_dist_calibration+0x298>)
   1acc6:	001a      	movs	r2, r3
   1acc8:	2100      	movs	r1, #0
   1acca:	2000      	movs	r0, #0
   1accc:	4b6b      	ldr	r3, [pc, #428]	; (1ae7c <fn_dist_calibration+0x2a4>)
   1acce:	4798      	blx	r3
	if (options.current_unit_dist == feet){
   1acd0:	4b6b      	ldr	r3, [pc, #428]	; (1ae80 <fn_dist_calibration+0x2a8>)
   1acd2:	781b      	ldrb	r3, [r3, #0]
   1acd4:	2b00      	cmp	r3, #0
   1acd6:	d10c      	bne.n	1acf2 <fn_dist_calibration+0x11a>
		sprintf(display_str, " Target %.1f feet",dist_cal_setpoint_ft);
   1acd8:	4a6a      	ldr	r2, [pc, #424]	; (1ae84 <fn_dist_calibration+0x2ac>)
   1acda:	4b6b      	ldr	r3, [pc, #428]	; (1ae88 <fn_dist_calibration+0x2b0>)
   1acdc:	1c10      	adds	r0, r2, #0
   1acde:	4798      	blx	r3
   1ace0:	0003      	movs	r3, r0
   1ace2:	000c      	movs	r4, r1
   1ace4:	4969      	ldr	r1, [pc, #420]	; (1ae8c <fn_dist_calibration+0x2b4>)
   1ace6:	4862      	ldr	r0, [pc, #392]	; (1ae70 <fn_dist_calibration+0x298>)
   1ace8:	001a      	movs	r2, r3
   1acea:	0023      	movs	r3, r4
   1acec:	4c68      	ldr	r4, [pc, #416]	; (1ae90 <fn_dist_calibration+0x2b8>)
   1acee:	47a0      	blx	r4
   1acf0:	e00c      	b.n	1ad0c <fn_dist_calibration+0x134>
	}else{
		sprintf(display_str, " Target %.1f meters.",dist_cal_setpoint_mt);
   1acf2:	22fe      	movs	r2, #254	; 0xfe
   1acf4:	0592      	lsls	r2, r2, #22
   1acf6:	4b64      	ldr	r3, [pc, #400]	; (1ae88 <fn_dist_calibration+0x2b0>)
   1acf8:	1c10      	adds	r0, r2, #0
   1acfa:	4798      	blx	r3
   1acfc:	0003      	movs	r3, r0
   1acfe:	000c      	movs	r4, r1
   1ad00:	4964      	ldr	r1, [pc, #400]	; (1ae94 <fn_dist_calibration+0x2bc>)
   1ad02:	485b      	ldr	r0, [pc, #364]	; (1ae70 <fn_dist_calibration+0x298>)
   1ad04:	001a      	movs	r2, r3
   1ad06:	0023      	movs	r3, r4
   1ad08:	4c61      	ldr	r4, [pc, #388]	; (1ae90 <fn_dist_calibration+0x2b8>)
   1ad0a:	47a0      	blx	r4
	}
	glcd_tiny_draw_string(0,1,display_str);
   1ad0c:	4b58      	ldr	r3, [pc, #352]	; (1ae70 <fn_dist_calibration+0x298>)
   1ad0e:	001a      	movs	r2, r3
   1ad10:	2101      	movs	r1, #1
   1ad12:	2000      	movs	r0, #0
   1ad14:	4b59      	ldr	r3, [pc, #356]	; (1ae7c <fn_dist_calibration+0x2a4>)
   1ad16:	4798      	blx	r3
	
	// Display Current Data
	for (k=0;k<4;k++){
   1ad18:	23a7      	movs	r3, #167	; 0xa7
   1ad1a:	18fb      	adds	r3, r7, r3
   1ad1c:	2200      	movs	r2, #0
   1ad1e:	701a      	strb	r2, [r3, #0]
   1ad20:	e048      	b.n	1adb4 <fn_dist_calibration+0x1dc>
		sprintf(display_str,"M%d: %2.4f ",k,dist_disp_buf[k]);
   1ad22:	23a7      	movs	r3, #167	; 0xa7
   1ad24:	18fb      	adds	r3, r7, r3
   1ad26:	781d      	ldrb	r5, [r3, #0]
   1ad28:	23a7      	movs	r3, #167	; 0xa7
   1ad2a:	18fb      	adds	r3, r7, r3
   1ad2c:	781a      	ldrb	r2, [r3, #0]
   1ad2e:	4b5a      	ldr	r3, [pc, #360]	; (1ae98 <fn_dist_calibration+0x2c0>)
   1ad30:	0092      	lsls	r2, r2, #2
   1ad32:	58d2      	ldr	r2, [r2, r3]
   1ad34:	4b54      	ldr	r3, [pc, #336]	; (1ae88 <fn_dist_calibration+0x2b0>)
   1ad36:	1c10      	adds	r0, r2, #0
   1ad38:	4798      	blx	r3
   1ad3a:	0003      	movs	r3, r0
   1ad3c:	000c      	movs	r4, r1
   1ad3e:	4957      	ldr	r1, [pc, #348]	; (1ae9c <fn_dist_calibration+0x2c4>)
   1ad40:	484b      	ldr	r0, [pc, #300]	; (1ae70 <fn_dist_calibration+0x298>)
   1ad42:	9300      	str	r3, [sp, #0]
   1ad44:	9401      	str	r4, [sp, #4]
   1ad46:	002a      	movs	r2, r5
   1ad48:	4b51      	ldr	r3, [pc, #324]	; (1ae90 <fn_dist_calibration+0x2b8>)
   1ad4a:	4798      	blx	r3
		if (options.current_unit_dist == feet){
   1ad4c:	4b4c      	ldr	r3, [pc, #304]	; (1ae80 <fn_dist_calibration+0x2a8>)
   1ad4e:	781b      	ldrb	r3, [r3, #0]
   1ad50:	2b00      	cmp	r3, #0
   1ad52:	d10f      	bne.n	1ad74 <fn_dist_calibration+0x19c>
			strcat(display_str,"ft");
   1ad54:	4b46      	ldr	r3, [pc, #280]	; (1ae70 <fn_dist_calibration+0x298>)
   1ad56:	0018      	movs	r0, r3
   1ad58:	4b51      	ldr	r3, [pc, #324]	; (1aea0 <fn_dist_calibration+0x2c8>)
   1ad5a:	4798      	blx	r3
   1ad5c:	0003      	movs	r3, r0
   1ad5e:	001a      	movs	r2, r3
   1ad60:	4b43      	ldr	r3, [pc, #268]	; (1ae70 <fn_dist_calibration+0x298>)
   1ad62:	18d2      	adds	r2, r2, r3
   1ad64:	4b4f      	ldr	r3, [pc, #316]	; (1aea4 <fn_dist_calibration+0x2cc>)
   1ad66:	0010      	movs	r0, r2
   1ad68:	0019      	movs	r1, r3
   1ad6a:	2303      	movs	r3, #3
   1ad6c:	001a      	movs	r2, r3
   1ad6e:	4b42      	ldr	r3, [pc, #264]	; (1ae78 <fn_dist_calibration+0x2a0>)
   1ad70:	4798      	blx	r3
   1ad72:	e00e      	b.n	1ad92 <fn_dist_calibration+0x1ba>
		}else{
			strcat(display_str,"m");
   1ad74:	4b3e      	ldr	r3, [pc, #248]	; (1ae70 <fn_dist_calibration+0x298>)
   1ad76:	0018      	movs	r0, r3
   1ad78:	4b49      	ldr	r3, [pc, #292]	; (1aea0 <fn_dist_calibration+0x2c8>)
   1ad7a:	4798      	blx	r3
   1ad7c:	0003      	movs	r3, r0
   1ad7e:	001a      	movs	r2, r3
   1ad80:	4b3b      	ldr	r3, [pc, #236]	; (1ae70 <fn_dist_calibration+0x298>)
   1ad82:	18d2      	adds	r2, r2, r3
   1ad84:	4b48      	ldr	r3, [pc, #288]	; (1aea8 <fn_dist_calibration+0x2d0>)
   1ad86:	0010      	movs	r0, r2
   1ad88:	0019      	movs	r1, r3
   1ad8a:	2302      	movs	r3, #2
   1ad8c:	001a      	movs	r2, r3
   1ad8e:	4b3a      	ldr	r3, [pc, #232]	; (1ae78 <fn_dist_calibration+0x2a0>)
   1ad90:	4798      	blx	r3
		}
		glcd_tiny_draw_string(0,k+2,display_str);
   1ad92:	23a7      	movs	r3, #167	; 0xa7
   1ad94:	18fb      	adds	r3, r7, r3
   1ad96:	781b      	ldrb	r3, [r3, #0]
   1ad98:	3302      	adds	r3, #2
   1ad9a:	b2db      	uxtb	r3, r3
   1ad9c:	4a34      	ldr	r2, [pc, #208]	; (1ae70 <fn_dist_calibration+0x298>)
   1ad9e:	0019      	movs	r1, r3
   1ada0:	2000      	movs	r0, #0
   1ada2:	4b36      	ldr	r3, [pc, #216]	; (1ae7c <fn_dist_calibration+0x2a4>)
   1ada4:	4798      	blx	r3
	for (k=0;k<4;k++){
   1ada6:	23a7      	movs	r3, #167	; 0xa7
   1ada8:	18fb      	adds	r3, r7, r3
   1adaa:	781a      	ldrb	r2, [r3, #0]
   1adac:	23a7      	movs	r3, #167	; 0xa7
   1adae:	18fb      	adds	r3, r7, r3
   1adb0:	3201      	adds	r2, #1
   1adb2:	701a      	strb	r2, [r3, #0]
   1adb4:	23a7      	movs	r3, #167	; 0xa7
   1adb6:	18fb      	adds	r3, r7, r3
   1adb8:	781b      	ldrb	r3, [r3, #0]
   1adba:	2b03      	cmp	r3, #3
   1adbc:	d9b1      	bls.n	1ad22 <fn_dist_calibration+0x14a>
	}
	sprintf(display_str, "Offset: %f", temp_dist_offset);
   1adbe:	4b3b      	ldr	r3, [pc, #236]	; (1aeac <fn_dist_calibration+0x2d4>)
   1adc0:	681a      	ldr	r2, [r3, #0]
   1adc2:	4b31      	ldr	r3, [pc, #196]	; (1ae88 <fn_dist_calibration+0x2b0>)
   1adc4:	1c10      	adds	r0, r2, #0
   1adc6:	4798      	blx	r3
   1adc8:	0003      	movs	r3, r0
   1adca:	000c      	movs	r4, r1
   1adcc:	4938      	ldr	r1, [pc, #224]	; (1aeb0 <fn_dist_calibration+0x2d8>)
   1adce:	4828      	ldr	r0, [pc, #160]	; (1ae70 <fn_dist_calibration+0x298>)
   1add0:	001a      	movs	r2, r3
   1add2:	0023      	movs	r3, r4
   1add4:	4c2e      	ldr	r4, [pc, #184]	; (1ae90 <fn_dist_calibration+0x2b8>)
   1add6:	47a0      	blx	r4
	glcd_tiny_draw_string(0,6,display_str);
   1add8:	4b25      	ldr	r3, [pc, #148]	; (1ae70 <fn_dist_calibration+0x298>)
   1adda:	001a      	movs	r2, r3
   1addc:	2106      	movs	r1, #6
   1adde:	2000      	movs	r0, #0
   1ade0:	4b26      	ldr	r3, [pc, #152]	; (1ae7c <fn_dist_calibration+0x2a4>)
   1ade2:	4798      	blx	r3

	// Display Soft Keys
	//if (n_groups >= 2){
	if (buf_points >= shot_size){
   1ade4:	4b14      	ldr	r3, [pc, #80]	; (1ae38 <fn_dist_calibration+0x260>)
   1ade6:	781b      	ldrb	r3, [r3, #0]
   1ade8:	2b03      	cmp	r3, #3
   1adea:	d90d      	bls.n	1ae08 <fn_dist_calibration+0x230>
		sprintf(display_str, "Calibration      Done");
   1adec:	4a20      	ldr	r2, [pc, #128]	; (1ae70 <fn_dist_calibration+0x298>)
   1adee:	4b31      	ldr	r3, [pc, #196]	; (1aeb4 <fn_dist_calibration+0x2dc>)
   1adf0:	0010      	movs	r0, r2
   1adf2:	0019      	movs	r1, r3
   1adf4:	2316      	movs	r3, #22
   1adf6:	001a      	movs	r2, r3
   1adf8:	4b1f      	ldr	r3, [pc, #124]	; (1ae78 <fn_dist_calibration+0x2a0>)
   1adfa:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   1adfc:	4b1c      	ldr	r3, [pc, #112]	; (1ae70 <fn_dist_calibration+0x298>)
   1adfe:	001a      	movs	r2, r3
   1ae00:	2100      	movs	r1, #0
   1ae02:	2000      	movs	r0, #0
   1ae04:	4b1d      	ldr	r3, [pc, #116]	; (1ae7c <fn_dist_calibration+0x2a4>)
   1ae06:	4798      	blx	r3
	}
	sprintf(display_str, "Abort");
   1ae08:	4a19      	ldr	r2, [pc, #100]	; (1ae70 <fn_dist_calibration+0x298>)
   1ae0a:	4b2b      	ldr	r3, [pc, #172]	; (1aeb8 <fn_dist_calibration+0x2e0>)
   1ae0c:	0010      	movs	r0, r2
   1ae0e:	0019      	movs	r1, r3
   1ae10:	2306      	movs	r3, #6
   1ae12:	001a      	movs	r2, r3
   1ae14:	4b18      	ldr	r3, [pc, #96]	; (1ae78 <fn_dist_calibration+0x2a0>)
   1ae16:	4798      	blx	r3
	glcd_tiny_draw_string(97,7,display_str);
   1ae18:	4b15      	ldr	r3, [pc, #84]	; (1ae70 <fn_dist_calibration+0x298>)
   1ae1a:	001a      	movs	r2, r3
   1ae1c:	2107      	movs	r1, #7
   1ae1e:	2061      	movs	r0, #97	; 0x61
   1ae20:	4b16      	ldr	r3, [pc, #88]	; (1ae7c <fn_dist_calibration+0x2a4>)
   1ae22:	4798      	blx	r3
		
	glcd_write();
   1ae24:	4b25      	ldr	r3, [pc, #148]	; (1aebc <fn_dist_calibration+0x2e4>)
   1ae26:	4798      	blx	r3
}
   1ae28:	46c0      	nop			; (mov r8, r8)
   1ae2a:	46bd      	mov	sp, r7
   1ae2c:	b02a      	add	sp, #168	; 0xa8
   1ae2e:	bdb0      	pop	{r4, r5, r7, pc}
   1ae30:	200000e8 	.word	0x200000e8
   1ae34:	0001aec1 	.word	0x0001aec1
   1ae38:	20001e9c 	.word	0x20001e9c
   1ae3c:	200039f8 	.word	0x200039f8
   1ae40:	20004138 	.word	0x20004138
   1ae44:	200023a8 	.word	0x200023a8
   1ae48:	20004136 	.word	0x20004136
   1ae4c:	000035a5 	.word	0x000035a5
   1ae50:	00009845 	.word	0x00009845
   1ae54:	00001f41 	.word	0x00001f41
   1ae58:	20004134 	.word	0x20004134
   1ae5c:	000035ed 	.word	0x000035ed
   1ae60:	00002d75 	.word	0x00002d75
   1ae64:	00028b80 	.word	0x00028b80
   1ae68:	00015f85 	.word	0x00015f85
   1ae6c:	00015025 	.word	0x00015025
   1ae70:	20003534 	.word	0x20003534
   1ae74:	00028f50 	.word	0x00028f50
   1ae78:	00023c19 	.word	0x00023c19
   1ae7c:	00016111 	.word	0x00016111
   1ae80:	200034a8 	.word	0x200034a8
   1ae84:	40400000 	.word	0x40400000
   1ae88:	00023a0d 	.word	0x00023a0d
   1ae8c:	000290b0 	.word	0x000290b0
   1ae90:	00023d31 	.word	0x00023d31
   1ae94:	000290c4 	.word	0x000290c4
   1ae98:	20003424 	.word	0x20003424
   1ae9c:	000290dc 	.word	0x000290dc
   1aea0:	00023dd1 	.word	0x00023dd1
   1aea4:	00028fdc 	.word	0x00028fdc
   1aea8:	00028fe0 	.word	0x00028fe0
   1aeac:	20003fe8 	.word	0x20003fe8
   1aeb0:	000290e8 	.word	0x000290e8
   1aeb4:	000290f4 	.word	0x000290f4
   1aeb8:	00028fa4 	.word	0x00028fa4
   1aebc:	00015869 	.word	0x00015869

0001aec0 <cal_disp_message>:


void cal_disp_message(void){
   1aec0:	b590      	push	{r4, r7, lr}
   1aec2:	b083      	sub	sp, #12
   1aec4:	af02      	add	r7, sp, #8
	wdt_disable();
   1aec6:	4b97      	ldr	r3, [pc, #604]	; (1b124 <cal_disp_message+0x264>)
   1aec8:	4798      	blx	r3
	if (current_state==st_acc_comp_calibration){
   1aeca:	4b97      	ldr	r3, [pc, #604]	; (1b128 <cal_disp_message+0x268>)
   1aecc:	781b      	ldrb	r3, [r3, #0]
   1aece:	b2db      	uxtb	r3, r3
   1aed0:	2b0b      	cmp	r3, #11
   1aed2:	d126      	bne.n	1af22 <cal_disp_message+0x62>
		glcd_tiny_set_font(Font5x7,5,7,32,127);
   1aed4:	4895      	ldr	r0, [pc, #596]	; (1b12c <cal_disp_message+0x26c>)
   1aed6:	237f      	movs	r3, #127	; 0x7f
   1aed8:	9300      	str	r3, [sp, #0]
   1aeda:	2320      	movs	r3, #32
   1aedc:	2207      	movs	r2, #7
   1aede:	2105      	movs	r1, #5
   1aee0:	4c93      	ldr	r4, [pc, #588]	; (1b130 <cal_disp_message+0x270>)
   1aee2:	47a0      	blx	r4
		glcd_clear_buffer();
   1aee4:	4b93      	ldr	r3, [pc, #588]	; (1b134 <cal_disp_message+0x274>)
   1aee6:	4798      	blx	r3
	
		sprintf(display_str, "Azm/Inc Calibration:");
   1aee8:	4a93      	ldr	r2, [pc, #588]	; (1b138 <cal_disp_message+0x278>)
   1aeea:	4b94      	ldr	r3, [pc, #592]	; (1b13c <cal_disp_message+0x27c>)
   1aeec:	0010      	movs	r0, r2
   1aeee:	0019      	movs	r1, r3
   1aef0:	2315      	movs	r3, #21
   1aef2:	001a      	movs	r2, r3
   1aef4:	4b92      	ldr	r3, [pc, #584]	; (1b140 <cal_disp_message+0x280>)
   1aef6:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   1aef8:	4b8f      	ldr	r3, [pc, #572]	; (1b138 <cal_disp_message+0x278>)
   1aefa:	001a      	movs	r2, r3
   1aefc:	2100      	movs	r1, #0
   1aefe:	2000      	movs	r0, #0
   1af00:	4b90      	ldr	r3, [pc, #576]	; (1b144 <cal_disp_message+0x284>)
   1af02:	4798      	blx	r3
		sprintf(display_str, "Take Uni-Directional Groups of 4 Shots    while rotating       instrument. Only last4 shots of each groupwill be saved");
   1af04:	4a8c      	ldr	r2, [pc, #560]	; (1b138 <cal_disp_message+0x278>)
   1af06:	4b90      	ldr	r3, [pc, #576]	; (1b148 <cal_disp_message+0x288>)
   1af08:	0010      	movs	r0, r2
   1af0a:	0019      	movs	r1, r3
   1af0c:	2377      	movs	r3, #119	; 0x77
   1af0e:	001a      	movs	r2, r3
   1af10:	4b8b      	ldr	r3, [pc, #556]	; (1b140 <cal_disp_message+0x280>)
   1af12:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);		
   1af14:	4b88      	ldr	r3, [pc, #544]	; (1b138 <cal_disp_message+0x278>)
   1af16:	001a      	movs	r2, r3
   1af18:	2101      	movs	r1, #1
   1af1a:	2000      	movs	r0, #0
   1af1c:	4b89      	ldr	r3, [pc, #548]	; (1b144 <cal_disp_message+0x284>)
   1af1e:	4798      	blx	r3
   1af20:	e0dc      	b.n	1b0dc <cal_disp_message+0x21c>
	}else if(current_state == st_dist_calibration){
   1af22:	4b81      	ldr	r3, [pc, #516]	; (1b128 <cal_disp_message+0x268>)
   1af24:	781b      	ldrb	r3, [r3, #0]
   1af26:	b2db      	uxtb	r3, r3
   1af28:	2b0c      	cmp	r3, #12
   1af2a:	d174      	bne.n	1b016 <cal_disp_message+0x156>
		glcd_tiny_set_font(Font5x7,5,7,32,127);
   1af2c:	487f      	ldr	r0, [pc, #508]	; (1b12c <cal_disp_message+0x26c>)
   1af2e:	237f      	movs	r3, #127	; 0x7f
   1af30:	9300      	str	r3, [sp, #0]
   1af32:	2320      	movs	r3, #32
   1af34:	2207      	movs	r2, #7
   1af36:	2105      	movs	r1, #5
   1af38:	4c7d      	ldr	r4, [pc, #500]	; (1b130 <cal_disp_message+0x270>)
   1af3a:	47a0      	blx	r4
		glcd_clear_buffer();
   1af3c:	4b7d      	ldr	r3, [pc, #500]	; (1b134 <cal_disp_message+0x274>)
   1af3e:	4798      	blx	r3
		sprintf(display_str, "Distance Calibration:");
   1af40:	4a7d      	ldr	r2, [pc, #500]	; (1b138 <cal_disp_message+0x278>)
   1af42:	4b82      	ldr	r3, [pc, #520]	; (1b14c <cal_disp_message+0x28c>)
   1af44:	0010      	movs	r0, r2
   1af46:	0019      	movs	r1, r3
   1af48:	2316      	movs	r3, #22
   1af4a:	001a      	movs	r2, r3
   1af4c:	4b7c      	ldr	r3, [pc, #496]	; (1b140 <cal_disp_message+0x280>)
   1af4e:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   1af50:	4b79      	ldr	r3, [pc, #484]	; (1b138 <cal_disp_message+0x278>)
   1af52:	001a      	movs	r2, r3
   1af54:	2100      	movs	r1, #0
   1af56:	2000      	movs	r0, #0
   1af58:	4b7a      	ldr	r3, [pc, #488]	; (1b144 <cal_disp_message+0x284>)
   1af5a:	4798      	blx	r3
		sprintf(display_str, "Place a target at");
   1af5c:	4a76      	ldr	r2, [pc, #472]	; (1b138 <cal_disp_message+0x278>)
   1af5e:	4b7c      	ldr	r3, [pc, #496]	; (1b150 <cal_disp_message+0x290>)
   1af60:	0010      	movs	r0, r2
   1af62:	0019      	movs	r1, r3
   1af64:	2312      	movs	r3, #18
   1af66:	001a      	movs	r2, r3
   1af68:	4b75      	ldr	r3, [pc, #468]	; (1b140 <cal_disp_message+0x280>)
   1af6a:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);
   1af6c:	4b72      	ldr	r3, [pc, #456]	; (1b138 <cal_disp_message+0x278>)
   1af6e:	001a      	movs	r2, r3
   1af70:	2101      	movs	r1, #1
   1af72:	2000      	movs	r0, #0
   1af74:	4b73      	ldr	r3, [pc, #460]	; (1b144 <cal_disp_message+0x284>)
   1af76:	4798      	blx	r3
		if (options.current_unit_dist == feet){
   1af78:	4b76      	ldr	r3, [pc, #472]	; (1b154 <cal_disp_message+0x294>)
   1af7a:	781b      	ldrb	r3, [r3, #0]
   1af7c:	2b00      	cmp	r3, #0
   1af7e:	d10c      	bne.n	1af9a <cal_disp_message+0xda>
			sprintf(display_str, "  %.1f feet.",dist_cal_setpoint_ft);
   1af80:	4a75      	ldr	r2, [pc, #468]	; (1b158 <cal_disp_message+0x298>)
   1af82:	4b76      	ldr	r3, [pc, #472]	; (1b15c <cal_disp_message+0x29c>)
   1af84:	1c10      	adds	r0, r2, #0
   1af86:	4798      	blx	r3
   1af88:	0003      	movs	r3, r0
   1af8a:	000c      	movs	r4, r1
   1af8c:	4974      	ldr	r1, [pc, #464]	; (1b160 <cal_disp_message+0x2a0>)
   1af8e:	486a      	ldr	r0, [pc, #424]	; (1b138 <cal_disp_message+0x278>)
   1af90:	001a      	movs	r2, r3
   1af92:	0023      	movs	r3, r4
   1af94:	4c73      	ldr	r4, [pc, #460]	; (1b164 <cal_disp_message+0x2a4>)
   1af96:	47a0      	blx	r4
   1af98:	e00c      	b.n	1afb4 <cal_disp_message+0xf4>
		}else{
			sprintf(display_str, "  %.1f meters.",dist_cal_setpoint_mt);
   1af9a:	22fe      	movs	r2, #254	; 0xfe
   1af9c:	0592      	lsls	r2, r2, #22
   1af9e:	4b6f      	ldr	r3, [pc, #444]	; (1b15c <cal_disp_message+0x29c>)
   1afa0:	1c10      	adds	r0, r2, #0
   1afa2:	4798      	blx	r3
   1afa4:	0003      	movs	r3, r0
   1afa6:	000c      	movs	r4, r1
   1afa8:	496f      	ldr	r1, [pc, #444]	; (1b168 <cal_disp_message+0x2a8>)
   1afaa:	4863      	ldr	r0, [pc, #396]	; (1b138 <cal_disp_message+0x278>)
   1afac:	001a      	movs	r2, r3
   1afae:	0023      	movs	r3, r4
   1afb0:	4c6c      	ldr	r4, [pc, #432]	; (1b164 <cal_disp_message+0x2a4>)
   1afb2:	47a0      	blx	r4
		}
		glcd_tiny_draw_string(0,2,display_str);
   1afb4:	4b60      	ldr	r3, [pc, #384]	; (1b138 <cal_disp_message+0x278>)
   1afb6:	001a      	movs	r2, r3
   1afb8:	2102      	movs	r1, #2
   1afba:	2000      	movs	r0, #0
   1afbc:	4b61      	ldr	r3, [pc, #388]	; (1b144 <cal_disp_message+0x284>)
   1afbe:	4798      	blx	r3
		sprintf(display_str, "Take min. 4 shots in");
   1afc0:	4a5d      	ldr	r2, [pc, #372]	; (1b138 <cal_disp_message+0x278>)
   1afc2:	4b6a      	ldr	r3, [pc, #424]	; (1b16c <cal_disp_message+0x2ac>)
   1afc4:	0010      	movs	r0, r2
   1afc6:	0019      	movs	r1, r3
   1afc8:	2315      	movs	r3, #21
   1afca:	001a      	movs	r2, r3
   1afcc:	4b5c      	ldr	r3, [pc, #368]	; (1b140 <cal_disp_message+0x280>)
   1afce:	4798      	blx	r3
		glcd_tiny_draw_string(0,3,display_str);
   1afd0:	4b59      	ldr	r3, [pc, #356]	; (1b138 <cal_disp_message+0x278>)
   1afd2:	001a      	movs	r2, r3
   1afd4:	2103      	movs	r1, #3
   1afd6:	2000      	movs	r0, #0
   1afd8:	4b5a      	ldr	r3, [pc, #360]	; (1b144 <cal_disp_message+0x284>)
   1afda:	4798      	blx	r3
		sprintf(display_str, "Multiple Orientations");
   1afdc:	4a56      	ldr	r2, [pc, #344]	; (1b138 <cal_disp_message+0x278>)
   1afde:	4b64      	ldr	r3, [pc, #400]	; (1b170 <cal_disp_message+0x2b0>)
   1afe0:	0010      	movs	r0, r2
   1afe2:	0019      	movs	r1, r3
   1afe4:	2316      	movs	r3, #22
   1afe6:	001a      	movs	r2, r3
   1afe8:	4b55      	ldr	r3, [pc, #340]	; (1b140 <cal_disp_message+0x280>)
   1afea:	4798      	blx	r3
		glcd_tiny_draw_string(0,4,display_str);
   1afec:	4b52      	ldr	r3, [pc, #328]	; (1b138 <cal_disp_message+0x278>)
   1afee:	001a      	movs	r2, r3
   1aff0:	2104      	movs	r1, #4
   1aff2:	2000      	movs	r0, #0
   1aff4:	4b53      	ldr	r3, [pc, #332]	; (1b144 <cal_disp_message+0x284>)
   1aff6:	4798      	blx	r3
		sprintf(display_str, "Only last 4 used.");
   1aff8:	4a4f      	ldr	r2, [pc, #316]	; (1b138 <cal_disp_message+0x278>)
   1affa:	4b5e      	ldr	r3, [pc, #376]	; (1b174 <cal_disp_message+0x2b4>)
   1affc:	0010      	movs	r0, r2
   1affe:	0019      	movs	r1, r3
   1b000:	2312      	movs	r3, #18
   1b002:	001a      	movs	r2, r3
   1b004:	4b4e      	ldr	r3, [pc, #312]	; (1b140 <cal_disp_message+0x280>)
   1b006:	4798      	blx	r3
		glcd_tiny_draw_string(0,5,display_str);
   1b008:	4b4b      	ldr	r3, [pc, #300]	; (1b138 <cal_disp_message+0x278>)
   1b00a:	001a      	movs	r2, r3
   1b00c:	2105      	movs	r1, #5
   1b00e:	2000      	movs	r0, #0
   1b010:	4b4c      	ldr	r3, [pc, #304]	; (1b144 <cal_disp_message+0x284>)
   1b012:	4798      	blx	r3
   1b014:	e062      	b.n	1b0dc <cal_disp_message+0x21c>
		
		
		
	}else if(current_state == st_loop_test){
   1b016:	4b44      	ldr	r3, [pc, #272]	; (1b128 <cal_disp_message+0x268>)
   1b018:	781b      	ldrb	r3, [r3, #0]
   1b01a:	b2db      	uxtb	r3, r3
   1b01c:	2b0f      	cmp	r3, #15
   1b01e:	d15d      	bne.n	1b0dc <cal_disp_message+0x21c>
		glcd_tiny_set_font(Font5x7,5,7,32,127);
   1b020:	4842      	ldr	r0, [pc, #264]	; (1b12c <cal_disp_message+0x26c>)
   1b022:	237f      	movs	r3, #127	; 0x7f
   1b024:	9300      	str	r3, [sp, #0]
   1b026:	2320      	movs	r3, #32
   1b028:	2207      	movs	r2, #7
   1b02a:	2105      	movs	r1, #5
   1b02c:	4c40      	ldr	r4, [pc, #256]	; (1b130 <cal_disp_message+0x270>)
   1b02e:	47a0      	blx	r4
		glcd_clear_buffer();
   1b030:	4b40      	ldr	r3, [pc, #256]	; (1b134 <cal_disp_message+0x274>)
   1b032:	4798      	blx	r3
		sprintf(display_str, "Loop Test:");
   1b034:	4a40      	ldr	r2, [pc, #256]	; (1b138 <cal_disp_message+0x278>)
   1b036:	4b50      	ldr	r3, [pc, #320]	; (1b178 <cal_disp_message+0x2b8>)
   1b038:	0010      	movs	r0, r2
   1b03a:	0019      	movs	r1, r3
   1b03c:	230b      	movs	r3, #11
   1b03e:	001a      	movs	r2, r3
   1b040:	4b3f      	ldr	r3, [pc, #252]	; (1b140 <cal_disp_message+0x280>)
   1b042:	4798      	blx	r3
		glcd_tiny_draw_string(0,0,display_str);
   1b044:	4b3c      	ldr	r3, [pc, #240]	; (1b138 <cal_disp_message+0x278>)
   1b046:	001a      	movs	r2, r3
   1b048:	2100      	movs	r1, #0
   1b04a:	2000      	movs	r0, #0
   1b04c:	4b3d      	ldr	r3, [pc, #244]	; (1b144 <cal_disp_message+0x284>)
   1b04e:	4798      	blx	r3
		sprintf(display_str, "Take a series of");
   1b050:	4a39      	ldr	r2, [pc, #228]	; (1b138 <cal_disp_message+0x278>)
   1b052:	4b4a      	ldr	r3, [pc, #296]	; (1b17c <cal_disp_message+0x2bc>)
   1b054:	0010      	movs	r0, r2
   1b056:	0019      	movs	r1, r3
   1b058:	2311      	movs	r3, #17
   1b05a:	001a      	movs	r2, r3
   1b05c:	4b38      	ldr	r3, [pc, #224]	; (1b140 <cal_disp_message+0x280>)
   1b05e:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);
   1b060:	4b35      	ldr	r3, [pc, #212]	; (1b138 <cal_disp_message+0x278>)
   1b062:	001a      	movs	r2, r3
   1b064:	2101      	movs	r1, #1
   1b066:	2000      	movs	r0, #0
   1b068:	4b36      	ldr	r3, [pc, #216]	; (1b144 <cal_disp_message+0x284>)
   1b06a:	4798      	blx	r3
		sprintf(display_str, "measurements ending");
   1b06c:	4a32      	ldr	r2, [pc, #200]	; (1b138 <cal_disp_message+0x278>)
   1b06e:	4b44      	ldr	r3, [pc, #272]	; (1b180 <cal_disp_message+0x2c0>)
   1b070:	0010      	movs	r0, r2
   1b072:	0019      	movs	r1, r3
   1b074:	2314      	movs	r3, #20
   1b076:	001a      	movs	r2, r3
   1b078:	4b31      	ldr	r3, [pc, #196]	; (1b140 <cal_disp_message+0x280>)
   1b07a:	4798      	blx	r3
		glcd_tiny_draw_string(0,2,display_str);
   1b07c:	4b2e      	ldr	r3, [pc, #184]	; (1b138 <cal_disp_message+0x278>)
   1b07e:	001a      	movs	r2, r3
   1b080:	2102      	movs	r1, #2
   1b082:	2000      	movs	r0, #0
   1b084:	4b2f      	ldr	r3, [pc, #188]	; (1b144 <cal_disp_message+0x284>)
   1b086:	4798      	blx	r3
		sprintf(display_str, "back at the first");
   1b088:	4a2b      	ldr	r2, [pc, #172]	; (1b138 <cal_disp_message+0x278>)
   1b08a:	4b3e      	ldr	r3, [pc, #248]	; (1b184 <cal_disp_message+0x2c4>)
   1b08c:	0010      	movs	r0, r2
   1b08e:	0019      	movs	r1, r3
   1b090:	2312      	movs	r3, #18
   1b092:	001a      	movs	r2, r3
   1b094:	4b2a      	ldr	r3, [pc, #168]	; (1b140 <cal_disp_message+0x280>)
   1b096:	4798      	blx	r3
		glcd_tiny_draw_string(0,3,display_str);
   1b098:	4b27      	ldr	r3, [pc, #156]	; (1b138 <cal_disp_message+0x278>)
   1b09a:	001a      	movs	r2, r3
   1b09c:	2103      	movs	r1, #3
   1b09e:	2000      	movs	r0, #0
   1b0a0:	4b28      	ldr	r3, [pc, #160]	; (1b144 <cal_disp_message+0x284>)
   1b0a2:	4798      	blx	r3
		sprintf(display_str, "point.  Press 'Done'");
   1b0a4:	4a24      	ldr	r2, [pc, #144]	; (1b138 <cal_disp_message+0x278>)
   1b0a6:	4b38      	ldr	r3, [pc, #224]	; (1b188 <cal_disp_message+0x2c8>)
   1b0a8:	0010      	movs	r0, r2
   1b0aa:	0019      	movs	r1, r3
   1b0ac:	2315      	movs	r3, #21
   1b0ae:	001a      	movs	r2, r3
   1b0b0:	4b23      	ldr	r3, [pc, #140]	; (1b140 <cal_disp_message+0x280>)
   1b0b2:	4798      	blx	r3
		glcd_tiny_draw_string(0,4,display_str);
   1b0b4:	4b20      	ldr	r3, [pc, #128]	; (1b138 <cal_disp_message+0x278>)
   1b0b6:	001a      	movs	r2, r3
   1b0b8:	2104      	movs	r1, #4
   1b0ba:	2000      	movs	r0, #0
   1b0bc:	4b21      	ldr	r3, [pc, #132]	; (1b144 <cal_disp_message+0x284>)
   1b0be:	4798      	blx	r3
		sprintf(display_str, "when complete.");
   1b0c0:	4a1d      	ldr	r2, [pc, #116]	; (1b138 <cal_disp_message+0x278>)
   1b0c2:	4b32      	ldr	r3, [pc, #200]	; (1b18c <cal_disp_message+0x2cc>)
   1b0c4:	0010      	movs	r0, r2
   1b0c6:	0019      	movs	r1, r3
   1b0c8:	230f      	movs	r3, #15
   1b0ca:	001a      	movs	r2, r3
   1b0cc:	4b1c      	ldr	r3, [pc, #112]	; (1b140 <cal_disp_message+0x280>)
   1b0ce:	4798      	blx	r3
		glcd_tiny_draw_string(0,5,display_str);
   1b0d0:	4b19      	ldr	r3, [pc, #100]	; (1b138 <cal_disp_message+0x278>)
   1b0d2:	001a      	movs	r2, r3
   1b0d4:	2105      	movs	r1, #5
   1b0d6:	2000      	movs	r0, #0
   1b0d8:	4b1a      	ldr	r3, [pc, #104]	; (1b144 <cal_disp_message+0x284>)
   1b0da:	4798      	blx	r3
	}
	sprintf(display_str, "Press any button...");
   1b0dc:	4a16      	ldr	r2, [pc, #88]	; (1b138 <cal_disp_message+0x278>)
   1b0de:	4b2c      	ldr	r3, [pc, #176]	; (1b190 <cal_disp_message+0x2d0>)
   1b0e0:	0010      	movs	r0, r2
   1b0e2:	0019      	movs	r1, r3
   1b0e4:	2314      	movs	r3, #20
   1b0e6:	001a      	movs	r2, r3
   1b0e8:	4b15      	ldr	r3, [pc, #84]	; (1b140 <cal_disp_message+0x280>)
   1b0ea:	4798      	blx	r3
	glcd_tiny_draw_string(10,7,display_str);
   1b0ec:	4b12      	ldr	r3, [pc, #72]	; (1b138 <cal_disp_message+0x278>)
   1b0ee:	001a      	movs	r2, r3
   1b0f0:	2107      	movs	r1, #7
   1b0f2:	200a      	movs	r0, #10
   1b0f4:	4b13      	ldr	r3, [pc, #76]	; (1b144 <cal_disp_message+0x284>)
   1b0f6:	4798      	blx	r3
	glcd_write();
   1b0f8:	4b26      	ldr	r3, [pc, #152]	; (1b194 <cal_disp_message+0x2d4>)
   1b0fa:	4798      	blx	r3
	while((current_input == input_none) || (current_input == input_1sec));//hold here until an input
   1b0fc:	46c0      	nop			; (mov r8, r8)
   1b0fe:	4b26      	ldr	r3, [pc, #152]	; (1b198 <cal_disp_message+0x2d8>)
   1b100:	781b      	ldrb	r3, [r3, #0]
   1b102:	b2db      	uxtb	r3, r3
   1b104:	2b00      	cmp	r3, #0
   1b106:	d0fa      	beq.n	1b0fe <cal_disp_message+0x23e>
   1b108:	4b23      	ldr	r3, [pc, #140]	; (1b198 <cal_disp_message+0x2d8>)
   1b10a:	781b      	ldrb	r3, [r3, #0]
   1b10c:	b2db      	uxtb	r3, r3
   1b10e:	2b07      	cmp	r3, #7
   1b110:	d0f5      	beq.n	1b0fe <cal_disp_message+0x23e>
	current_input = input_none;
   1b112:	4b21      	ldr	r3, [pc, #132]	; (1b198 <cal_disp_message+0x2d8>)
   1b114:	2200      	movs	r2, #0
   1b116:	701a      	strb	r2, [r3, #0]
	wdt_enable();
   1b118:	4b20      	ldr	r3, [pc, #128]	; (1b19c <cal_disp_message+0x2dc>)
   1b11a:	4798      	blx	r3
}
   1b11c:	46c0      	nop			; (mov r8, r8)
   1b11e:	46bd      	mov	sp, r7
   1b120:	b001      	add	sp, #4
   1b122:	bd90      	pop	{r4, r7, pc}
   1b124:	00004251 	.word	0x00004251
   1b128:	20002db8 	.word	0x20002db8
   1b12c:	00028b80 	.word	0x00028b80
   1b130:	00015f85 	.word	0x00015f85
   1b134:	00015025 	.word	0x00015025
   1b138:	20003534 	.word	0x20003534
   1b13c:	0002910c 	.word	0x0002910c
   1b140:	00023c19 	.word	0x00023c19
   1b144:	00016111 	.word	0x00016111
   1b148:	00029124 	.word	0x00029124
   1b14c:	0002919c 	.word	0x0002919c
   1b150:	000291b4 	.word	0x000291b4
   1b154:	200034a8 	.word	0x200034a8
   1b158:	40400000 	.word	0x40400000
   1b15c:	00023a0d 	.word	0x00023a0d
   1b160:	000291c8 	.word	0x000291c8
   1b164:	00023d31 	.word	0x00023d31
   1b168:	000291d8 	.word	0x000291d8
   1b16c:	000291e8 	.word	0x000291e8
   1b170:	00029200 	.word	0x00029200
   1b174:	00029218 	.word	0x00029218
   1b178:	00028fac 	.word	0x00028fac
   1b17c:	0002922c 	.word	0x0002922c
   1b180:	00029240 	.word	0x00029240
   1b184:	00029254 	.word	0x00029254
   1b188:	00029268 	.word	0x00029268
   1b18c:	00029280 	.word	0x00029280
   1b190:	00029290 	.word	0x00029290
   1b194:	00015869 	.word	0x00015869
   1b198:	20004134 	.word	0x20004134
   1b19c:	00004225 	.word	0x00004225

0001b1a0 <fn_disp_cal_report>:

void  fn_disp_cal_report(void){
   1b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1a2:	b089      	sub	sp, #36	; 0x24
   1b1a4:	af04      	add	r7, sp, #16
	#define maxPages 3
	static uint8_t pageView;
	if (state_change){
   1b1a6:	4bd2      	ldr	r3, [pc, #840]	; (1b4f0 <fn_disp_cal_report+0x350>)
   1b1a8:	781b      	ldrb	r3, [r3, #0]
   1b1aa:	b2db      	uxtb	r3, r3
   1b1ac:	2b00      	cmp	r3, #0
   1b1ae:	d002      	beq.n	1b1b6 <fn_disp_cal_report+0x16>
		pageView = 1;
   1b1b0:	4bd0      	ldr	r3, [pc, #832]	; (1b4f4 <fn_disp_cal_report+0x354>)
   1b1b2:	2201      	movs	r2, #1
   1b1b4:	701a      	strb	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   1b1b6:	4bd0      	ldr	r3, [pc, #832]	; (1b4f8 <fn_disp_cal_report+0x358>)
   1b1b8:	781b      	ldrb	r3, [r3, #0]
   1b1ba:	b2db      	uxtb	r3, r3
   1b1bc:	2b02      	cmp	r3, #2
   1b1be:	d002      	beq.n	1b1c6 <fn_disp_cal_report+0x26>
   1b1c0:	2b03      	cmp	r3, #3
   1b1c2:	d00b      	beq.n	1b1dc <fn_disp_cal_report+0x3c>
   1b1c4:	e018      	b.n	1b1f8 <fn_disp_cal_report+0x58>
		case input_button2:
			if (pageView>1){pageView--;}
   1b1c6:	4bcb      	ldr	r3, [pc, #812]	; (1b4f4 <fn_disp_cal_report+0x354>)
   1b1c8:	781b      	ldrb	r3, [r3, #0]
   1b1ca:	2b01      	cmp	r3, #1
   1b1cc:	d911      	bls.n	1b1f2 <fn_disp_cal_report+0x52>
   1b1ce:	4bc9      	ldr	r3, [pc, #804]	; (1b4f4 <fn_disp_cal_report+0x354>)
   1b1d0:	781b      	ldrb	r3, [r3, #0]
   1b1d2:	3b01      	subs	r3, #1
   1b1d4:	b2da      	uxtb	r2, r3
   1b1d6:	4bc7      	ldr	r3, [pc, #796]	; (1b4f4 <fn_disp_cal_report+0x354>)
   1b1d8:	701a      	strb	r2, [r3, #0]
			break;	
   1b1da:	e00a      	b.n	1b1f2 <fn_disp_cal_report+0x52>
		case input_button3:
			if (pageView<maxPages){pageView++;}
   1b1dc:	4bc5      	ldr	r3, [pc, #788]	; (1b4f4 <fn_disp_cal_report+0x354>)
   1b1de:	781b      	ldrb	r3, [r3, #0]
   1b1e0:	2b02      	cmp	r3, #2
   1b1e2:	d808      	bhi.n	1b1f6 <fn_disp_cal_report+0x56>
   1b1e4:	4bc3      	ldr	r3, [pc, #780]	; (1b4f4 <fn_disp_cal_report+0x354>)
   1b1e6:	781b      	ldrb	r3, [r3, #0]
   1b1e8:	3301      	adds	r3, #1
   1b1ea:	b2da      	uxtb	r2, r3
   1b1ec:	4bc1      	ldr	r3, [pc, #772]	; (1b4f4 <fn_disp_cal_report+0x354>)
   1b1ee:	701a      	strb	r2, [r3, #0]
			break;
   1b1f0:	e001      	b.n	1b1f6 <fn_disp_cal_report+0x56>
			break;	
   1b1f2:	46c0      	nop			; (mov r8, r8)
   1b1f4:	e000      	b.n	1b1f8 <fn_disp_cal_report+0x58>
			break;
   1b1f6:	46c0      	nop			; (mov r8, r8)
			//  ButtonE and Button4 exit, handled by state machine
	}
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1b1f8:	48c0      	ldr	r0, [pc, #768]	; (1b4fc <fn_disp_cal_report+0x35c>)
   1b1fa:	237f      	movs	r3, #127	; 0x7f
   1b1fc:	9300      	str	r3, [sp, #0]
   1b1fe:	2320      	movs	r3, #32
   1b200:	2207      	movs	r2, #7
   1b202:	2105      	movs	r1, #5
   1b204:	4cbe      	ldr	r4, [pc, #760]	; (1b500 <fn_disp_cal_report+0x360>)
   1b206:	47a0      	blx	r4
	glcd_clear_buffer();
   1b208:	4bbe      	ldr	r3, [pc, #760]	; (1b504 <fn_disp_cal_report+0x364>)
   1b20a:	4798      	blx	r3
	sprintf(display_str, "Calibration Report:");
   1b20c:	4abe      	ldr	r2, [pc, #760]	; (1b508 <fn_disp_cal_report+0x368>)
   1b20e:	4bbf      	ldr	r3, [pc, #764]	; (1b50c <fn_disp_cal_report+0x36c>)
   1b210:	0010      	movs	r0, r2
   1b212:	0019      	movs	r1, r3
   1b214:	2314      	movs	r3, #20
   1b216:	001a      	movs	r2, r3
   1b218:	4bbd      	ldr	r3, [pc, #756]	; (1b510 <fn_disp_cal_report+0x370>)
   1b21a:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1b21c:	4bba      	ldr	r3, [pc, #744]	; (1b508 <fn_disp_cal_report+0x368>)
   1b21e:	001a      	movs	r2, r3
   1b220:	2100      	movs	r1, #0
   1b222:	2000      	movs	r0, #0
   1b224:	4bbb      	ldr	r3, [pc, #748]	; (1b514 <fn_disp_cal_report+0x374>)
   1b226:	4798      	blx	r3
	
	switch(pageView){
   1b228:	4bb2      	ldr	r3, [pc, #712]	; (1b4f4 <fn_disp_cal_report+0x354>)
   1b22a:	781b      	ldrb	r3, [r3, #0]
   1b22c:	2b02      	cmp	r3, #2
   1b22e:	d07a      	beq.n	1b326 <fn_disp_cal_report+0x186>
   1b230:	2b03      	cmp	r3, #3
   1b232:	d100      	bne.n	1b236 <fn_disp_cal_report+0x96>
   1b234:	e192      	b.n	1b55c <fn_disp_cal_report+0x3bc>
   1b236:	2b01      	cmp	r3, #1
   1b238:	d000      	beq.n	1b23c <fn_disp_cal_report+0x9c>
   1b23a:	e1ff      	b.n	1b63c <fn_disp_cal_report+0x49c>
		///////////////////////// AZM and INC Report
		case 1:
			//// Page 1			
			sprintf(display_str, "Azimuth & Inclination");
   1b23c:	4ab2      	ldr	r2, [pc, #712]	; (1b508 <fn_disp_cal_report+0x368>)
   1b23e:	4bb6      	ldr	r3, [pc, #728]	; (1b518 <fn_disp_cal_report+0x378>)
   1b240:	0010      	movs	r0, r2
   1b242:	0019      	movs	r1, r3
   1b244:	2316      	movs	r3, #22
   1b246:	001a      	movs	r2, r3
   1b248:	4bb1      	ldr	r3, [pc, #708]	; (1b510 <fn_disp_cal_report+0x370>)
   1b24a:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   1b24c:	4bae      	ldr	r3, [pc, #696]	; (1b508 <fn_disp_cal_report+0x368>)
   1b24e:	001a      	movs	r2, r3
   1b250:	2101      	movs	r1, #1
   1b252:	2000      	movs	r0, #0
   1b254:	4baf      	ldr	r3, [pc, #700]	; (1b514 <fn_disp_cal_report+0x374>)
   1b256:	4798      	blx	r3
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
   1b258:	4bb0      	ldr	r3, [pc, #704]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b25a:	2246      	movs	r2, #70	; 0x46
   1b25c:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b25e:	60bb      	str	r3, [r7, #8]
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
   1b260:	4bae      	ldr	r3, [pc, #696]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b262:	2245      	movs	r2, #69	; 0x45
   1b264:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b266:	607b      	str	r3, [r7, #4]
				cal_report_azm_inc.time_struct.year, cal_report_azm_inc.time_struct.month, cal_report_azm_inc.time_struct.date,
   1b268:	4bac      	ldr	r3, [pc, #688]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b26a:	2244      	movs	r2, #68	; 0x44
   1b26c:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b26e:	001c      	movs	r4, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
   1b270:	4baa      	ldr	r3, [pc, #680]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b272:	2242      	movs	r2, #66	; 0x42
   1b274:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b276:	001d      	movs	r5, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
   1b278:	4ba8      	ldr	r3, [pc, #672]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b27a:	2241      	movs	r2, #65	; 0x41
   1b27c:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b27e:	001e      	movs	r6, r3
				cal_report_azm_inc.time_struct.hours, cal_report_azm_inc.time_struct.minutes, cal_report_azm_inc.time_struct.seconds);
   1b280:	4ba6      	ldr	r3, [pc, #664]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b282:	2240      	movs	r2, #64	; 0x40
   1b284:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b286:	49a6      	ldr	r1, [pc, #664]	; (1b520 <fn_disp_cal_report+0x380>)
   1b288:	489f      	ldr	r0, [pc, #636]	; (1b508 <fn_disp_cal_report+0x368>)
   1b28a:	9303      	str	r3, [sp, #12]
   1b28c:	9602      	str	r6, [sp, #8]
   1b28e:	9501      	str	r5, [sp, #4]
   1b290:	9400      	str	r4, [sp, #0]
   1b292:	687b      	ldr	r3, [r7, #4]
   1b294:	68ba      	ldr	r2, [r7, #8]
   1b296:	4ca3      	ldr	r4, [pc, #652]	; (1b524 <fn_disp_cal_report+0x384>)
   1b298:	47a0      	blx	r4
			glcd_tiny_draw_string(0,2,display_str);
   1b29a:	4b9b      	ldr	r3, [pc, #620]	; (1b508 <fn_disp_cal_report+0x368>)
   1b29c:	001a      	movs	r2, r3
   1b29e:	2102      	movs	r1, #2
   1b2a0:	2000      	movs	r0, #0
   1b2a2:	4b9c      	ldr	r3, [pc, #624]	; (1b514 <fn_disp_cal_report+0x374>)
   1b2a4:	4798      	blx	r3
			sprintf(display_str,"4-Point Groups: %d", cal_report_azm_inc.groups);
   1b2a6:	4b9d      	ldr	r3, [pc, #628]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b2a8:	685a      	ldr	r2, [r3, #4]
   1b2aa:	499f      	ldr	r1, [pc, #636]	; (1b528 <fn_disp_cal_report+0x388>)
   1b2ac:	4b96      	ldr	r3, [pc, #600]	; (1b508 <fn_disp_cal_report+0x368>)
   1b2ae:	0018      	movs	r0, r3
   1b2b0:	4b9c      	ldr	r3, [pc, #624]	; (1b524 <fn_disp_cal_report+0x384>)
   1b2b2:	4798      	blx	r3
			glcd_tiny_draw_string(0,3,display_str);
   1b2b4:	4b94      	ldr	r3, [pc, #592]	; (1b508 <fn_disp_cal_report+0x368>)
   1b2b6:	001a      	movs	r2, r3
   1b2b8:	2103      	movs	r1, #3
   1b2ba:	2000      	movs	r0, #0
   1b2bc:	4b95      	ldr	r3, [pc, #596]	; (1b514 <fn_disp_cal_report+0x374>)
   1b2be:	4798      	blx	r3
			sprintf(display_str,"Azm Stdev: %.3f", cal_report_azm_inc.azm_angle_err);
   1b2c0:	4b96      	ldr	r3, [pc, #600]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b2c2:	695a      	ldr	r2, [r3, #20]
   1b2c4:	4b99      	ldr	r3, [pc, #612]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b2c6:	1c10      	adds	r0, r2, #0
   1b2c8:	4798      	blx	r3
   1b2ca:	0003      	movs	r3, r0
   1b2cc:	000c      	movs	r4, r1
   1b2ce:	4998      	ldr	r1, [pc, #608]	; (1b530 <fn_disp_cal_report+0x390>)
   1b2d0:	488d      	ldr	r0, [pc, #564]	; (1b508 <fn_disp_cal_report+0x368>)
   1b2d2:	001a      	movs	r2, r3
   1b2d4:	0023      	movs	r3, r4
   1b2d6:	4c93      	ldr	r4, [pc, #588]	; (1b524 <fn_disp_cal_report+0x384>)
   1b2d8:	47a0      	blx	r4
			glcd_tiny_draw_string(0,5,display_str);
   1b2da:	4b8b      	ldr	r3, [pc, #556]	; (1b508 <fn_disp_cal_report+0x368>)
   1b2dc:	001a      	movs	r2, r3
   1b2de:	2105      	movs	r1, #5
   1b2e0:	2000      	movs	r0, #0
   1b2e2:	4b8c      	ldr	r3, [pc, #560]	; (1b514 <fn_disp_cal_report+0x374>)
   1b2e4:	4798      	blx	r3
			glcd_draw_circle(98, 41, 1, BLACK);// Draw degree symbol
   1b2e6:	2301      	movs	r3, #1
   1b2e8:	2201      	movs	r2, #1
   1b2ea:	2129      	movs	r1, #41	; 0x29
   1b2ec:	2062      	movs	r0, #98	; 0x62
   1b2ee:	4c91      	ldr	r4, [pc, #580]	; (1b534 <fn_disp_cal_report+0x394>)
   1b2f0:	47a0      	blx	r4
			sprintf(display_str,"Inc Stdev: %.3f", cal_report_azm_inc.inc_angle_err);
   1b2f2:	4b8a      	ldr	r3, [pc, #552]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b2f4:	691a      	ldr	r2, [r3, #16]
   1b2f6:	4b8d      	ldr	r3, [pc, #564]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b2f8:	1c10      	adds	r0, r2, #0
   1b2fa:	4798      	blx	r3
   1b2fc:	0003      	movs	r3, r0
   1b2fe:	000c      	movs	r4, r1
   1b300:	498d      	ldr	r1, [pc, #564]	; (1b538 <fn_disp_cal_report+0x398>)
   1b302:	4881      	ldr	r0, [pc, #516]	; (1b508 <fn_disp_cal_report+0x368>)
   1b304:	001a      	movs	r2, r3
   1b306:	0023      	movs	r3, r4
   1b308:	4c86      	ldr	r4, [pc, #536]	; (1b524 <fn_disp_cal_report+0x384>)
   1b30a:	47a0      	blx	r4
			glcd_tiny_draw_string(0,6,display_str);
   1b30c:	4b7e      	ldr	r3, [pc, #504]	; (1b508 <fn_disp_cal_report+0x368>)
   1b30e:	001a      	movs	r2, r3
   1b310:	2106      	movs	r1, #6
   1b312:	2000      	movs	r0, #0
   1b314:	4b7f      	ldr	r3, [pc, #508]	; (1b514 <fn_disp_cal_report+0x374>)
   1b316:	4798      	blx	r3
			glcd_draw_circle(98, 49, 1, BLACK);// Draw degree symbol
   1b318:	2301      	movs	r3, #1
   1b31a:	2201      	movs	r2, #1
   1b31c:	2131      	movs	r1, #49	; 0x31
   1b31e:	2062      	movs	r0, #98	; 0x62
   1b320:	4c84      	ldr	r4, [pc, #528]	; (1b534 <fn_disp_cal_report+0x394>)
   1b322:	47a0      	blx	r4
			break;
   1b324:	e18a      	b.n	1b63c <fn_disp_cal_report+0x49c>
		case 2:
			//// Page 2
			sprintf(display_str, "Azimuth & Inclination");
   1b326:	4a78      	ldr	r2, [pc, #480]	; (1b508 <fn_disp_cal_report+0x368>)
   1b328:	4b7b      	ldr	r3, [pc, #492]	; (1b518 <fn_disp_cal_report+0x378>)
   1b32a:	0010      	movs	r0, r2
   1b32c:	0019      	movs	r1, r3
   1b32e:	2316      	movs	r3, #22
   1b330:	001a      	movs	r2, r3
   1b332:	4b77      	ldr	r3, [pc, #476]	; (1b510 <fn_disp_cal_report+0x370>)
   1b334:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   1b336:	4b74      	ldr	r3, [pc, #464]	; (1b508 <fn_disp_cal_report+0x368>)
   1b338:	001a      	movs	r2, r3
   1b33a:	2101      	movs	r1, #1
   1b33c:	2000      	movs	r0, #0
   1b33e:	4b75      	ldr	r3, [pc, #468]	; (1b514 <fn_disp_cal_report+0x374>)
   1b340:	4798      	blx	r3
			// Sensor Disparity
			sprintf(display_str,"Sensor Delta X,Y,Z%%");
   1b342:	4a7e      	ldr	r2, [pc, #504]	; (1b53c <fn_disp_cal_report+0x39c>)
   1b344:	4b70      	ldr	r3, [pc, #448]	; (1b508 <fn_disp_cal_report+0x368>)
   1b346:	0011      	movs	r1, r2
   1b348:	0018      	movs	r0, r3
   1b34a:	4b76      	ldr	r3, [pc, #472]	; (1b524 <fn_disp_cal_report+0x384>)
   1b34c:	4798      	blx	r3
			glcd_tiny_draw_string(0,2,display_str);
   1b34e:	4b6e      	ldr	r3, [pc, #440]	; (1b508 <fn_disp_cal_report+0x368>)
   1b350:	001a      	movs	r2, r3
   1b352:	2102      	movs	r1, #2
   1b354:	2000      	movs	r0, #0
   1b356:	4b6f      	ldr	r3, [pc, #444]	; (1b514 <fn_disp_cal_report+0x374>)
   1b358:	4798      	blx	r3
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   1b35a:	4b70      	ldr	r3, [pc, #448]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b35c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b35e:	4b78      	ldr	r3, [pc, #480]	; (1b540 <fn_disp_cal_report+0x3a0>)
   1b360:	4978      	ldr	r1, [pc, #480]	; (1b544 <fn_disp_cal_report+0x3a4>)
   1b362:	1c10      	adds	r0, r2, #0
   1b364:	4798      	blx	r3
   1b366:	1c03      	adds	r3, r0, #0
   1b368:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   1b36a:	4b70      	ldr	r3, [pc, #448]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b36c:	1c10      	adds	r0, r2, #0
   1b36e:	4798      	blx	r3
   1b370:	60b8      	str	r0, [r7, #8]
   1b372:	60f9      	str	r1, [r7, #12]
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   1b374:	4b69      	ldr	r3, [pc, #420]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b378:	4b71      	ldr	r3, [pc, #452]	; (1b540 <fn_disp_cal_report+0x3a0>)
   1b37a:	4972      	ldr	r1, [pc, #456]	; (1b544 <fn_disp_cal_report+0x3a4>)
   1b37c:	1c10      	adds	r0, r2, #0
   1b37e:	4798      	blx	r3
   1b380:	1c03      	adds	r3, r0, #0
   1b382:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   1b384:	4b69      	ldr	r3, [pc, #420]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b386:	1c10      	adds	r0, r2, #0
   1b388:	4798      	blx	r3
   1b38a:	0004      	movs	r4, r0
   1b38c:	000d      	movs	r5, r1
				cal_report_azm_inc.disp_stdev_acc[0]*100, cal_report_azm_inc.disp_stdev_acc[1]*100, cal_report_azm_inc.disp_stdev_acc[2]*100);
   1b38e:	4b63      	ldr	r3, [pc, #396]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b392:	4b6b      	ldr	r3, [pc, #428]	; (1b540 <fn_disp_cal_report+0x3a0>)
   1b394:	496b      	ldr	r1, [pc, #428]	; (1b544 <fn_disp_cal_report+0x3a4>)
   1b396:	1c10      	adds	r0, r2, #0
   1b398:	4798      	blx	r3
   1b39a:	1c03      	adds	r3, r0, #0
   1b39c:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"A:%.3f,%.3f,%.3f",
   1b39e:	4b63      	ldr	r3, [pc, #396]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b3a0:	1c10      	adds	r0, r2, #0
   1b3a2:	4798      	blx	r3
   1b3a4:	0002      	movs	r2, r0
   1b3a6:	000b      	movs	r3, r1
   1b3a8:	4967      	ldr	r1, [pc, #412]	; (1b548 <fn_disp_cal_report+0x3a8>)
   1b3aa:	4857      	ldr	r0, [pc, #348]	; (1b508 <fn_disp_cal_report+0x368>)
   1b3ac:	9202      	str	r2, [sp, #8]
   1b3ae:	9303      	str	r3, [sp, #12]
   1b3b0:	9400      	str	r4, [sp, #0]
   1b3b2:	9501      	str	r5, [sp, #4]
   1b3b4:	68ba      	ldr	r2, [r7, #8]
   1b3b6:	68fb      	ldr	r3, [r7, #12]
   1b3b8:	4c5a      	ldr	r4, [pc, #360]	; (1b524 <fn_disp_cal_report+0x384>)
   1b3ba:	47a0      	blx	r4
			glcd_tiny_draw_string(0,3,display_str);
   1b3bc:	4b52      	ldr	r3, [pc, #328]	; (1b508 <fn_disp_cal_report+0x368>)
   1b3be:	001a      	movs	r2, r3
   1b3c0:	2103      	movs	r1, #3
   1b3c2:	2000      	movs	r0, #0
   1b3c4:	4b53      	ldr	r3, [pc, #332]	; (1b514 <fn_disp_cal_report+0x374>)
   1b3c6:	4798      	blx	r3
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   1b3c8:	4b54      	ldr	r3, [pc, #336]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b3ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1b3cc:	4b5c      	ldr	r3, [pc, #368]	; (1b540 <fn_disp_cal_report+0x3a0>)
   1b3ce:	495d      	ldr	r1, [pc, #372]	; (1b544 <fn_disp_cal_report+0x3a4>)
   1b3d0:	1c10      	adds	r0, r2, #0
   1b3d2:	4798      	blx	r3
   1b3d4:	1c03      	adds	r3, r0, #0
   1b3d6:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   1b3d8:	4b54      	ldr	r3, [pc, #336]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b3da:	1c10      	adds	r0, r2, #0
   1b3dc:	4798      	blx	r3
   1b3de:	60b8      	str	r0, [r7, #8]
   1b3e0:	60f9      	str	r1, [r7, #12]
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   1b3e2:	4b4e      	ldr	r3, [pc, #312]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b3e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b3e6:	4b56      	ldr	r3, [pc, #344]	; (1b540 <fn_disp_cal_report+0x3a0>)
   1b3e8:	4956      	ldr	r1, [pc, #344]	; (1b544 <fn_disp_cal_report+0x3a4>)
   1b3ea:	1c10      	adds	r0, r2, #0
   1b3ec:	4798      	blx	r3
   1b3ee:	1c03      	adds	r3, r0, #0
   1b3f0:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   1b3f2:	4b4e      	ldr	r3, [pc, #312]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b3f4:	1c10      	adds	r0, r2, #0
   1b3f6:	4798      	blx	r3
   1b3f8:	0004      	movs	r4, r0
   1b3fa:	000d      	movs	r5, r1
				cal_report_azm_inc.disp_stdev_comp[0]*100, cal_report_azm_inc.disp_stdev_comp[1]*100, cal_report_azm_inc.disp_stdev_comp[2]*100);
   1b3fc:	4b47      	ldr	r3, [pc, #284]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b3fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1b400:	4b4f      	ldr	r3, [pc, #316]	; (1b540 <fn_disp_cal_report+0x3a0>)
   1b402:	4950      	ldr	r1, [pc, #320]	; (1b544 <fn_disp_cal_report+0x3a4>)
   1b404:	1c10      	adds	r0, r2, #0
   1b406:	4798      	blx	r3
   1b408:	1c03      	adds	r3, r0, #0
   1b40a:	1c1a      	adds	r2, r3, #0
			sprintf(display_str,"C:%.3f,%.3f,%.3f",
   1b40c:	4b47      	ldr	r3, [pc, #284]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b40e:	1c10      	adds	r0, r2, #0
   1b410:	4798      	blx	r3
   1b412:	0002      	movs	r2, r0
   1b414:	000b      	movs	r3, r1
   1b416:	494d      	ldr	r1, [pc, #308]	; (1b54c <fn_disp_cal_report+0x3ac>)
   1b418:	483b      	ldr	r0, [pc, #236]	; (1b508 <fn_disp_cal_report+0x368>)
   1b41a:	9202      	str	r2, [sp, #8]
   1b41c:	9303      	str	r3, [sp, #12]
   1b41e:	9400      	str	r4, [sp, #0]
   1b420:	9501      	str	r5, [sp, #4]
   1b422:	68ba      	ldr	r2, [r7, #8]
   1b424:	68fb      	ldr	r3, [r7, #12]
   1b426:	4c3f      	ldr	r4, [pc, #252]	; (1b524 <fn_disp_cal_report+0x384>)
   1b428:	47a0      	blx	r4
			glcd_tiny_draw_string(0,4,display_str);
   1b42a:	4b37      	ldr	r3, [pc, #220]	; (1b508 <fn_disp_cal_report+0x368>)
   1b42c:	001a      	movs	r2, r3
   1b42e:	2104      	movs	r1, #4
   1b430:	2000      	movs	r0, #0
   1b432:	4b38      	ldr	r3, [pc, #224]	; (1b514 <fn_disp_cal_report+0x374>)
   1b434:	4798      	blx	r3
			//  Magnitude Error			
			sprintf(display_str,"Magnitude Error %%");
   1b436:	4a46      	ldr	r2, [pc, #280]	; (1b550 <fn_disp_cal_report+0x3b0>)
   1b438:	4b33      	ldr	r3, [pc, #204]	; (1b508 <fn_disp_cal_report+0x368>)
   1b43a:	0011      	movs	r1, r2
   1b43c:	0018      	movs	r0, r3
   1b43e:	4b39      	ldr	r3, [pc, #228]	; (1b524 <fn_disp_cal_report+0x384>)
   1b440:	4798      	blx	r3
			glcd_tiny_draw_string(0,5,display_str);
   1b442:	4b31      	ldr	r3, [pc, #196]	; (1b508 <fn_disp_cal_report+0x368>)
   1b444:	001a      	movs	r2, r3
   1b446:	2105      	movs	r1, #5
   1b448:	2000      	movs	r0, #0
   1b44a:	4b32      	ldr	r3, [pc, #200]	; (1b514 <fn_disp_cal_report+0x374>)
   1b44c:	4798      	blx	r3
			sprintf(display_str,"A1:%.3f A2:%.3f", cal_report_azm_inc.mag_stdev_a1*100, cal_report_azm_inc.mag_stdev_a2*100);
   1b44e:	4b33      	ldr	r3, [pc, #204]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b450:	699a      	ldr	r2, [r3, #24]
   1b452:	4b3b      	ldr	r3, [pc, #236]	; (1b540 <fn_disp_cal_report+0x3a0>)
   1b454:	493b      	ldr	r1, [pc, #236]	; (1b544 <fn_disp_cal_report+0x3a4>)
   1b456:	1c10      	adds	r0, r2, #0
   1b458:	4798      	blx	r3
   1b45a:	1c03      	adds	r3, r0, #0
   1b45c:	1c1a      	adds	r2, r3, #0
   1b45e:	4b33      	ldr	r3, [pc, #204]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b460:	1c10      	adds	r0, r2, #0
   1b462:	4798      	blx	r3
   1b464:	0005      	movs	r5, r0
   1b466:	000e      	movs	r6, r1
   1b468:	4b2c      	ldr	r3, [pc, #176]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b46a:	69da      	ldr	r2, [r3, #28]
   1b46c:	4b34      	ldr	r3, [pc, #208]	; (1b540 <fn_disp_cal_report+0x3a0>)
   1b46e:	4935      	ldr	r1, [pc, #212]	; (1b544 <fn_disp_cal_report+0x3a4>)
   1b470:	1c10      	adds	r0, r2, #0
   1b472:	4798      	blx	r3
   1b474:	1c03      	adds	r3, r0, #0
   1b476:	1c1a      	adds	r2, r3, #0
   1b478:	4b2c      	ldr	r3, [pc, #176]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b47a:	1c10      	adds	r0, r2, #0
   1b47c:	4798      	blx	r3
   1b47e:	0003      	movs	r3, r0
   1b480:	000c      	movs	r4, r1
   1b482:	4934      	ldr	r1, [pc, #208]	; (1b554 <fn_disp_cal_report+0x3b4>)
   1b484:	4820      	ldr	r0, [pc, #128]	; (1b508 <fn_disp_cal_report+0x368>)
   1b486:	9300      	str	r3, [sp, #0]
   1b488:	9401      	str	r4, [sp, #4]
   1b48a:	002a      	movs	r2, r5
   1b48c:	0033      	movs	r3, r6
   1b48e:	4c25      	ldr	r4, [pc, #148]	; (1b524 <fn_disp_cal_report+0x384>)
   1b490:	47a0      	blx	r4
			glcd_tiny_draw_string(0,6,display_str);
   1b492:	4b1d      	ldr	r3, [pc, #116]	; (1b508 <fn_disp_cal_report+0x368>)
   1b494:	001a      	movs	r2, r3
   1b496:	2106      	movs	r1, #6
   1b498:	2000      	movs	r0, #0
   1b49a:	4b1e      	ldr	r3, [pc, #120]	; (1b514 <fn_disp_cal_report+0x374>)
   1b49c:	4798      	blx	r3
			sprintf(display_str,"C1:%.3f C2:%.3f", cal_report_azm_inc.mag_stdev_c1*100, cal_report_azm_inc.mag_stdev_c2*100);
   1b49e:	4b1f      	ldr	r3, [pc, #124]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b4a0:	6a1a      	ldr	r2, [r3, #32]
   1b4a2:	4b27      	ldr	r3, [pc, #156]	; (1b540 <fn_disp_cal_report+0x3a0>)
   1b4a4:	4927      	ldr	r1, [pc, #156]	; (1b544 <fn_disp_cal_report+0x3a4>)
   1b4a6:	1c10      	adds	r0, r2, #0
   1b4a8:	4798      	blx	r3
   1b4aa:	1c03      	adds	r3, r0, #0
   1b4ac:	1c1a      	adds	r2, r3, #0
   1b4ae:	4b1f      	ldr	r3, [pc, #124]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b4b0:	1c10      	adds	r0, r2, #0
   1b4b2:	4798      	blx	r3
   1b4b4:	0005      	movs	r5, r0
   1b4b6:	000e      	movs	r6, r1
   1b4b8:	4b18      	ldr	r3, [pc, #96]	; (1b51c <fn_disp_cal_report+0x37c>)
   1b4ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1b4bc:	4b20      	ldr	r3, [pc, #128]	; (1b540 <fn_disp_cal_report+0x3a0>)
   1b4be:	4921      	ldr	r1, [pc, #132]	; (1b544 <fn_disp_cal_report+0x3a4>)
   1b4c0:	1c10      	adds	r0, r2, #0
   1b4c2:	4798      	blx	r3
   1b4c4:	1c03      	adds	r3, r0, #0
   1b4c6:	1c1a      	adds	r2, r3, #0
   1b4c8:	4b18      	ldr	r3, [pc, #96]	; (1b52c <fn_disp_cal_report+0x38c>)
   1b4ca:	1c10      	adds	r0, r2, #0
   1b4cc:	4798      	blx	r3
   1b4ce:	0003      	movs	r3, r0
   1b4d0:	000c      	movs	r4, r1
   1b4d2:	4921      	ldr	r1, [pc, #132]	; (1b558 <fn_disp_cal_report+0x3b8>)
   1b4d4:	480c      	ldr	r0, [pc, #48]	; (1b508 <fn_disp_cal_report+0x368>)
   1b4d6:	9300      	str	r3, [sp, #0]
   1b4d8:	9401      	str	r4, [sp, #4]
   1b4da:	002a      	movs	r2, r5
   1b4dc:	0033      	movs	r3, r6
   1b4de:	4c11      	ldr	r4, [pc, #68]	; (1b524 <fn_disp_cal_report+0x384>)
   1b4e0:	47a0      	blx	r4
			glcd_tiny_draw_string(0,7,display_str);
   1b4e2:	4b09      	ldr	r3, [pc, #36]	; (1b508 <fn_disp_cal_report+0x368>)
   1b4e4:	001a      	movs	r2, r3
   1b4e6:	2107      	movs	r1, #7
   1b4e8:	2000      	movs	r0, #0
   1b4ea:	4b0a      	ldr	r3, [pc, #40]	; (1b514 <fn_disp_cal_report+0x374>)
   1b4ec:	4798      	blx	r3
		break;
   1b4ee:	e0a5      	b.n	1b63c <fn_disp_cal_report+0x49c>
   1b4f0:	200000e8 	.word	0x200000e8
   1b4f4:	20000e3c 	.word	0x20000e3c
   1b4f8:	20004136 	.word	0x20004136
   1b4fc:	00028b80 	.word	0x00028b80
   1b500:	00015f85 	.word	0x00015f85
   1b504:	00015025 	.word	0x00015025
   1b508:	20003534 	.word	0x20003534
   1b50c:	000292a4 	.word	0x000292a4
   1b510:	00023c19 	.word	0x00023c19
   1b514:	00016111 	.word	0x00016111
   1b518:	000292b8 	.word	0x000292b8
   1b51c:	20001e48 	.word	0x20001e48
   1b520:	000292d0 	.word	0x000292d0
   1b524:	00023d31 	.word	0x00023d31
   1b528:	000292f0 	.word	0x000292f0
   1b52c:	00023a0d 	.word	0x00023a0d
   1b530:	00029304 	.word	0x00029304
   1b534:	0001534d 	.word	0x0001534d
   1b538:	00029314 	.word	0x00029314
   1b53c:	00029324 	.word	0x00029324
   1b540:	000217d9 	.word	0x000217d9
   1b544:	42c80000 	.word	0x42c80000
   1b548:	0002933c 	.word	0x0002933c
   1b54c:	00029350 	.word	0x00029350
   1b550:	00029364 	.word	0x00029364
   1b554:	00029378 	.word	0x00029378
   1b558:	00029388 	.word	0x00029388
		//////////////////////// Distance Report
		case 3:
			sprintf(display_str, "Distance");
   1b55c:	4a48      	ldr	r2, [pc, #288]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b55e:	4b49      	ldr	r3, [pc, #292]	; (1b684 <fn_disp_cal_report+0x4e4>)
   1b560:	0010      	movs	r0, r2
   1b562:	0019      	movs	r1, r3
   1b564:	2309      	movs	r3, #9
   1b566:	001a      	movs	r2, r3
   1b568:	4b47      	ldr	r3, [pc, #284]	; (1b688 <fn_disp_cal_report+0x4e8>)
   1b56a:	4798      	blx	r3
			glcd_tiny_draw_string(0,1,display_str);
   1b56c:	4b44      	ldr	r3, [pc, #272]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b56e:	001a      	movs	r2, r3
   1b570:	2101      	movs	r1, #1
   1b572:	2000      	movs	r0, #0
   1b574:	4b45      	ldr	r3, [pc, #276]	; (1b68c <fn_disp_cal_report+0x4ec>)
   1b576:	4798      	blx	r3
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
				cal_report_dist.time_struct.year, cal_report_dist.time_struct.month, cal_report_dist.time_struct.date,
   1b578:	4b45      	ldr	r3, [pc, #276]	; (1b690 <fn_disp_cal_report+0x4f0>)
   1b57a:	2246      	movs	r2, #70	; 0x46
   1b57c:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b57e:	60bb      	str	r3, [r7, #8]
				cal_report_dist.time_struct.year, cal_report_dist.time_struct.month, cal_report_dist.time_struct.date,
   1b580:	4b43      	ldr	r3, [pc, #268]	; (1b690 <fn_disp_cal_report+0x4f0>)
   1b582:	2245      	movs	r2, #69	; 0x45
   1b584:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b586:	607b      	str	r3, [r7, #4]
				cal_report_dist.time_struct.year, cal_report_dist.time_struct.month, cal_report_dist.time_struct.date,
   1b588:	4b41      	ldr	r3, [pc, #260]	; (1b690 <fn_disp_cal_report+0x4f0>)
   1b58a:	2244      	movs	r2, #68	; 0x44
   1b58c:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b58e:	001c      	movs	r4, r3
				cal_report_dist.time_struct.hours, cal_report_dist.time_struct.minutes, cal_report_dist.time_struct.seconds);
   1b590:	4b3f      	ldr	r3, [pc, #252]	; (1b690 <fn_disp_cal_report+0x4f0>)
   1b592:	2242      	movs	r2, #66	; 0x42
   1b594:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b596:	001d      	movs	r5, r3
				cal_report_dist.time_struct.hours, cal_report_dist.time_struct.minutes, cal_report_dist.time_struct.seconds);
   1b598:	4b3d      	ldr	r3, [pc, #244]	; (1b690 <fn_disp_cal_report+0x4f0>)
   1b59a:	2241      	movs	r2, #65	; 0x41
   1b59c:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b59e:	001e      	movs	r6, r3
				cal_report_dist.time_struct.hours, cal_report_dist.time_struct.minutes, cal_report_dist.time_struct.seconds);
   1b5a0:	4b3b      	ldr	r3, [pc, #236]	; (1b690 <fn_disp_cal_report+0x4f0>)
   1b5a2:	2240      	movs	r2, #64	; 0x40
   1b5a4:	5c9b      	ldrb	r3, [r3, r2]
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1b5a6:	493b      	ldr	r1, [pc, #236]	; (1b694 <fn_disp_cal_report+0x4f4>)
   1b5a8:	4835      	ldr	r0, [pc, #212]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b5aa:	9303      	str	r3, [sp, #12]
   1b5ac:	9602      	str	r6, [sp, #8]
   1b5ae:	9501      	str	r5, [sp, #4]
   1b5b0:	9400      	str	r4, [sp, #0]
   1b5b2:	687b      	ldr	r3, [r7, #4]
   1b5b4:	68ba      	ldr	r2, [r7, #8]
   1b5b6:	4c38      	ldr	r4, [pc, #224]	; (1b698 <fn_disp_cal_report+0x4f8>)
   1b5b8:	47a0      	blx	r4
			glcd_tiny_draw_string(0,2,display_str);
   1b5ba:	4b31      	ldr	r3, [pc, #196]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b5bc:	001a      	movs	r2, r3
   1b5be:	2102      	movs	r1, #2
   1b5c0:	2000      	movs	r0, #0
   1b5c2:	4b32      	ldr	r3, [pc, #200]	; (1b68c <fn_disp_cal_report+0x4ec>)
   1b5c4:	4798      	blx	r3
			sprintf(display_str,"Rangefinder Offset:");
   1b5c6:	4a2e      	ldr	r2, [pc, #184]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b5c8:	4b34      	ldr	r3, [pc, #208]	; (1b69c <fn_disp_cal_report+0x4fc>)
   1b5ca:	0010      	movs	r0, r2
   1b5cc:	0019      	movs	r1, r3
   1b5ce:	2314      	movs	r3, #20
   1b5d0:	001a      	movs	r2, r3
   1b5d2:	4b2d      	ldr	r3, [pc, #180]	; (1b688 <fn_disp_cal_report+0x4e8>)
   1b5d4:	4798      	blx	r3
			glcd_tiny_draw_string(0,4,display_str);
   1b5d6:	4b2a      	ldr	r3, [pc, #168]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b5d8:	001a      	movs	r2, r3
   1b5da:	2104      	movs	r1, #4
   1b5dc:	2000      	movs	r0, #0
   1b5de:	4b2b      	ldr	r3, [pc, #172]	; (1b68c <fn_disp_cal_report+0x4ec>)
   1b5e0:	4798      	blx	r3
			sprintf(display_str,"  %.4f meters", dist_calst.dist_offset);
   1b5e2:	4b2f      	ldr	r3, [pc, #188]	; (1b6a0 <fn_disp_cal_report+0x500>)
   1b5e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   1b5e6:	4b2f      	ldr	r3, [pc, #188]	; (1b6a4 <fn_disp_cal_report+0x504>)
   1b5e8:	1c10      	adds	r0, r2, #0
   1b5ea:	4798      	blx	r3
   1b5ec:	0003      	movs	r3, r0
   1b5ee:	000c      	movs	r4, r1
   1b5f0:	492d      	ldr	r1, [pc, #180]	; (1b6a8 <fn_disp_cal_report+0x508>)
   1b5f2:	4823      	ldr	r0, [pc, #140]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b5f4:	001a      	movs	r2, r3
   1b5f6:	0023      	movs	r3, r4
   1b5f8:	4c27      	ldr	r4, [pc, #156]	; (1b698 <fn_disp_cal_report+0x4f8>)
   1b5fa:	47a0      	blx	r4
			glcd_tiny_draw_string(0,5,display_str);
   1b5fc:	4b20      	ldr	r3, [pc, #128]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b5fe:	001a      	movs	r2, r3
   1b600:	2105      	movs	r1, #5
   1b602:	2000      	movs	r0, #0
   1b604:	4b21      	ldr	r3, [pc, #132]	; (1b68c <fn_disp_cal_report+0x4ec>)
   1b606:	4798      	blx	r3
			sprintf(display_str,"  %.4f feet", dist_calst.dist_offset*mt2ft);
   1b608:	4b25      	ldr	r3, [pc, #148]	; (1b6a0 <fn_disp_cal_report+0x500>)
   1b60a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   1b60c:	4927      	ldr	r1, [pc, #156]	; (1b6ac <fn_disp_cal_report+0x50c>)
   1b60e:	4b28      	ldr	r3, [pc, #160]	; (1b6b0 <fn_disp_cal_report+0x510>)
   1b610:	1c10      	adds	r0, r2, #0
   1b612:	4798      	blx	r3
   1b614:	1c03      	adds	r3, r0, #0
   1b616:	1c1a      	adds	r2, r3, #0
   1b618:	4b22      	ldr	r3, [pc, #136]	; (1b6a4 <fn_disp_cal_report+0x504>)
   1b61a:	1c10      	adds	r0, r2, #0
   1b61c:	4798      	blx	r3
   1b61e:	0003      	movs	r3, r0
   1b620:	000c      	movs	r4, r1
   1b622:	4924      	ldr	r1, [pc, #144]	; (1b6b4 <fn_disp_cal_report+0x514>)
   1b624:	4816      	ldr	r0, [pc, #88]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b626:	001a      	movs	r2, r3
   1b628:	0023      	movs	r3, r4
   1b62a:	4c1b      	ldr	r4, [pc, #108]	; (1b698 <fn_disp_cal_report+0x4f8>)
   1b62c:	47a0      	blx	r4
			glcd_tiny_draw_string(0,6,display_str);
   1b62e:	4b14      	ldr	r3, [pc, #80]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b630:	001a      	movs	r2, r3
   1b632:	2106      	movs	r1, #6
   1b634:	2000      	movs	r0, #0
   1b636:	4b15      	ldr	r3, [pc, #84]	; (1b68c <fn_disp_cal_report+0x4ec>)
   1b638:	4798      	blx	r3
			
		break;
   1b63a:	46c0      	nop			; (mov r8, r8)
	}
	
	// Display soft keys
	if (pageView>1){draw_arrows(2);}//  Draw up arrow at button 2
   1b63c:	4b1e      	ldr	r3, [pc, #120]	; (1b6b8 <fn_disp_cal_report+0x518>)
   1b63e:	781b      	ldrb	r3, [r3, #0]
   1b640:	2b01      	cmp	r3, #1
   1b642:	d902      	bls.n	1b64a <fn_disp_cal_report+0x4aa>
   1b644:	2002      	movs	r0, #2
   1b646:	4b1d      	ldr	r3, [pc, #116]	; (1b6bc <fn_disp_cal_report+0x51c>)
   1b648:	4798      	blx	r3
	if (pageView<maxPages){draw_arrows(3);}//  Draw up arrow at button 3
   1b64a:	4b1b      	ldr	r3, [pc, #108]	; (1b6b8 <fn_disp_cal_report+0x518>)
   1b64c:	781b      	ldrb	r3, [r3, #0]
   1b64e:	2b02      	cmp	r3, #2
   1b650:	d802      	bhi.n	1b658 <fn_disp_cal_report+0x4b8>
   1b652:	2003      	movs	r0, #3
   1b654:	4b19      	ldr	r3, [pc, #100]	; (1b6bc <fn_disp_cal_report+0x51c>)
   1b656:	4798      	blx	r3
	sprintf(display_str, "Exit");
   1b658:	4a09      	ldr	r2, [pc, #36]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b65a:	4b19      	ldr	r3, [pc, #100]	; (1b6c0 <fn_disp_cal_report+0x520>)
   1b65c:	0010      	movs	r0, r2
   1b65e:	0019      	movs	r1, r3
   1b660:	2305      	movs	r3, #5
   1b662:	001a      	movs	r2, r3
   1b664:	4b08      	ldr	r3, [pc, #32]	; (1b688 <fn_disp_cal_report+0x4e8>)
   1b666:	4798      	blx	r3
	glcd_tiny_draw_string(102,7,display_str);
   1b668:	4b05      	ldr	r3, [pc, #20]	; (1b680 <fn_disp_cal_report+0x4e0>)
   1b66a:	001a      	movs	r2, r3
   1b66c:	2107      	movs	r1, #7
   1b66e:	2066      	movs	r0, #102	; 0x66
   1b670:	4b06      	ldr	r3, [pc, #24]	; (1b68c <fn_disp_cal_report+0x4ec>)
   1b672:	4798      	blx	r3
	glcd_write();
   1b674:	4b13      	ldr	r3, [pc, #76]	; (1b6c4 <fn_disp_cal_report+0x524>)
   1b676:	4798      	blx	r3
}
   1b678:	46c0      	nop			; (mov r8, r8)
   1b67a:	46bd      	mov	sp, r7
   1b67c:	b005      	add	sp, #20
   1b67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b680:	20003534 	.word	0x20003534
   1b684:	00029398 	.word	0x00029398
   1b688:	00023c19 	.word	0x00023c19
   1b68c:	00016111 	.word	0x00016111
   1b690:	200034dc 	.word	0x200034dc
   1b694:	000292d0 	.word	0x000292d0
   1b698:	00023d31 	.word	0x00023d31
   1b69c:	000293a4 	.word	0x000293a4
   1b6a0:	20004888 	.word	0x20004888
   1b6a4:	00023a0d 	.word	0x00023a0d
   1b6a8:	000293b8 	.word	0x000293b8
   1b6ac:	4051f948 	.word	0x4051f948
   1b6b0:	000217d9 	.word	0x000217d9
   1b6b4:	000293c8 	.word	0x000293c8
   1b6b8:	20000e3c 	.word	0x20000e3c
   1b6bc:	0001d8c1 	.word	0x0001d8c1
   1b6c0:	000293d4 	.word	0x000293d4
   1b6c4:	00015869 	.word	0x00015869

0001b6c8 <save_measurement>:



FRESULT save_measurement(struct MEASUREMENT *meas_inst){
   1b6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b6ca:	46ce      	mov	lr, r9
   1b6cc:	4647      	mov	r7, r8
   1b6ce:	b580      	push	{r7, lr}
   1b6d0:	4cf3      	ldr	r4, [pc, #972]	; (1baa0 <save_measurement+0x3d8>)
   1b6d2:	44a5      	add	sp, r4
   1b6d4:	af06      	add	r7, sp, #24
   1b6d6:	6178      	str	r0, [r7, #20]
	char write_string_temp[511];
	char write_string_full[511];
	FRESULT fdebug1, fdebug2, fdebug3;
	DSTATUS diskio_status;
	
	pbw = &bw;
   1b6d8:	4bf2      	ldr	r3, [pc, #968]	; (1baa4 <save_measurement+0x3dc>)
   1b6da:	2208      	movs	r2, #8
   1b6dc:	4694      	mov	ip, r2
   1b6de:	2208      	movs	r2, #8
   1b6e0:	4690      	mov	r8, r2
   1b6e2:	44b8      	add	r8, r7
   1b6e4:	44c4      	add	ip, r8
   1b6e6:	4463      	add	r3, ip
   1b6e8:	4aef      	ldr	r2, [pc, #956]	; (1baa8 <save_measurement+0x3e0>)
   1b6ea:	2108      	movs	r1, #8
   1b6ec:	468c      	mov	ip, r1
   1b6ee:	2108      	movs	r1, #8
   1b6f0:	4688      	mov	r8, r1
   1b6f2:	44b8      	add	r8, r7
   1b6f4:	44c4      	add	ip, r8
   1b6f6:	4462      	add	r2, ip
   1b6f8:	6013      	str	r3, [r2, #0]
	// Get current time
	//get_time(); // Already performed during measurement
	
	
	//  Set up SD card
	config_spi(SD_card);		
   1b6fa:	2002      	movs	r0, #2
   1b6fc:	4beb      	ldr	r3, [pc, #940]	; (1baac <save_measurement+0x3e4>)
   1b6fe:	4798      	blx	r3
	spi_select_slave(&spi_main, &slave_SD, true);	
   1b700:	49eb      	ldr	r1, [pc, #940]	; (1bab0 <save_measurement+0x3e8>)
   1b702:	4bec      	ldr	r3, [pc, #944]	; (1bab4 <save_measurement+0x3ec>)
   1b704:	2201      	movs	r2, #1
   1b706:	0018      	movs	r0, r3
   1b708:	4beb      	ldr	r3, [pc, #940]	; (1bab8 <save_measurement+0x3f0>)
   1b70a:	4798      	blx	r3

	diskio_status = disk_status(0);
   1b70c:	4beb      	ldr	r3, [pc, #940]	; (1babc <save_measurement+0x3f4>)
   1b70e:	2208      	movs	r2, #8
   1b710:	2108      	movs	r1, #8
   1b712:	468c      	mov	ip, r1
   1b714:	44bc      	add	ip, r7
   1b716:	4462      	add	r2, ip
   1b718:	18d4      	adds	r4, r2, r3
   1b71a:	2000      	movs	r0, #0
   1b71c:	4be8      	ldr	r3, [pc, #928]	; (1bac0 <save_measurement+0x3f8>)
   1b71e:	4798      	blx	r3
   1b720:	0003      	movs	r3, r0
   1b722:	7023      	strb	r3, [r4, #0]
	
	if(diskio_status){
   1b724:	4be5      	ldr	r3, [pc, #916]	; (1babc <save_measurement+0x3f4>)
   1b726:	2208      	movs	r2, #8
   1b728:	4694      	mov	ip, r2
   1b72a:	2208      	movs	r2, #8
   1b72c:	4690      	mov	r8, r2
   1b72e:	44b8      	add	r8, r7
   1b730:	44c4      	add	ip, r8
   1b732:	4463      	add	r3, ip
   1b734:	781b      	ldrb	r3, [r3, #0]
   1b736:	2b00      	cmp	r3, #0
   1b738:	d03a      	beq.n	1b7b0 <save_measurement+0xe8>
		//Possibly card not initialized
		configure_SD();
   1b73a:	4be2      	ldr	r3, [pc, #904]	; (1bac4 <save_measurement+0x3fc>)
   1b73c:	4798      	blx	r3
		diskio_status = disk_status(0);
   1b73e:	4bdf      	ldr	r3, [pc, #892]	; (1babc <save_measurement+0x3f4>)
   1b740:	2208      	movs	r2, #8
   1b742:	2108      	movs	r1, #8
   1b744:	468c      	mov	ip, r1
   1b746:	44bc      	add	ip, r7
   1b748:	4462      	add	r2, ip
   1b74a:	18d4      	adds	r4, r2, r3
   1b74c:	2000      	movs	r0, #0
   1b74e:	4bdc      	ldr	r3, [pc, #880]	; (1bac0 <save_measurement+0x3f8>)
   1b750:	4798      	blx	r3
   1b752:	0003      	movs	r3, r0
   1b754:	7023      	strb	r3, [r4, #0]
		if(diskio_status){
   1b756:	4bd9      	ldr	r3, [pc, #868]	; (1babc <save_measurement+0x3f4>)
   1b758:	2208      	movs	r2, #8
   1b75a:	4694      	mov	ip, r2
   1b75c:	2208      	movs	r2, #8
   1b75e:	4690      	mov	r8, r2
   1b760:	44b8      	add	r8, r7
   1b762:	44c4      	add	ip, r8
   1b764:	4463      	add	r3, ip
   1b766:	781b      	ldrb	r3, [r3, #0]
   1b768:	2b00      	cmp	r3, #0
   1b76a:	d021      	beq.n	1b7b0 <save_measurement+0xe8>
			fdebug1 = FR_NOT_READY;
   1b76c:	4bd6      	ldr	r3, [pc, #856]	; (1bac8 <save_measurement+0x400>)
   1b76e:	2208      	movs	r2, #8
   1b770:	4694      	mov	ip, r2
   1b772:	2208      	movs	r2, #8
   1b774:	4690      	mov	r8, r2
   1b776:	44b8      	add	r8, r7
   1b778:	44c4      	add	ip, r8
   1b77a:	4463      	add	r3, ip
   1b77c:	2203      	movs	r2, #3
   1b77e:	701a      	strb	r2, [r3, #0]
			SD_status = fdebug1;
   1b780:	4bd2      	ldr	r3, [pc, #840]	; (1bacc <save_measurement+0x404>)
   1b782:	4ad1      	ldr	r2, [pc, #836]	; (1bac8 <save_measurement+0x400>)
   1b784:	2108      	movs	r1, #8
   1b786:	468c      	mov	ip, r1
   1b788:	2108      	movs	r1, #8
   1b78a:	4688      	mov	r8, r1
   1b78c:	44b8      	add	r8, r7
   1b78e:	44c4      	add	ip, r8
   1b790:	4462      	add	r2, ip
   1b792:	7812      	ldrb	r2, [r2, #0]
   1b794:	701a      	strb	r2, [r3, #0]
			config_spi(LCD);
   1b796:	2000      	movs	r0, #0
   1b798:	4bc4      	ldr	r3, [pc, #784]	; (1baac <save_measurement+0x3e4>)
   1b79a:	4798      	blx	r3
			return fdebug1;	
   1b79c:	4bca      	ldr	r3, [pc, #808]	; (1bac8 <save_measurement+0x400>)
   1b79e:	2208      	movs	r2, #8
   1b7a0:	4694      	mov	ip, r2
   1b7a2:	2208      	movs	r2, #8
   1b7a4:	4690      	mov	r8, r2
   1b7a6:	44b8      	add	r8, r7
   1b7a8:	44c4      	add	ip, r8
   1b7aa:	4463      	add	r3, ip
   1b7ac:	781b      	ldrb	r3, [r3, #0]
   1b7ae:	e25d      	b.n	1bc6c <save_measurement+0x5a4>
		
	}
	
	
	//  Format data for text data file
	sprintf(filename, "20%02x%02x%02x_datafile.csv", current_time.year, current_time.month, current_time.date);
   1b7b0:	4bc7      	ldr	r3, [pc, #796]	; (1bad0 <save_measurement+0x408>)
   1b7b2:	799b      	ldrb	r3, [r3, #6]
   1b7b4:	001a      	movs	r2, r3
   1b7b6:	4bc6      	ldr	r3, [pc, #792]	; (1bad0 <save_measurement+0x408>)
   1b7b8:	795b      	ldrb	r3, [r3, #5]
   1b7ba:	001c      	movs	r4, r3
   1b7bc:	4bc4      	ldr	r3, [pc, #784]	; (1bad0 <save_measurement+0x408>)
   1b7be:	791b      	ldrb	r3, [r3, #4]
   1b7c0:	49c4      	ldr	r1, [pc, #784]	; (1bad4 <save_measurement+0x40c>)
   1b7c2:	48c5      	ldr	r0, [pc, #788]	; (1bad8 <save_measurement+0x410>)
   1b7c4:	9300      	str	r3, [sp, #0]
   1b7c6:	0023      	movs	r3, r4
   1b7c8:	4cc4      	ldr	r4, [pc, #784]	; (1badc <save_measurement+0x414>)
   1b7ca:	47a0      	blx	r4
		
	fdebug1 = f_open(&file1, filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   1b7cc:	4bbe      	ldr	r3, [pc, #760]	; (1bac8 <save_measurement+0x400>)
   1b7ce:	2208      	movs	r2, #8
   1b7d0:	2108      	movs	r1, #8
   1b7d2:	468c      	mov	ip, r1
   1b7d4:	44bc      	add	ip, r7
   1b7d6:	4462      	add	r2, ip
   1b7d8:	18d4      	adds	r4, r2, r3
   1b7da:	49bf      	ldr	r1, [pc, #764]	; (1bad8 <save_measurement+0x410>)
   1b7dc:	4bc0      	ldr	r3, [pc, #768]	; (1bae0 <save_measurement+0x418>)
   1b7de:	2203      	movs	r2, #3
   1b7e0:	0018      	movs	r0, r3
   1b7e2:	4bc0      	ldr	r3, [pc, #768]	; (1bae4 <save_measurement+0x41c>)
   1b7e4:	4798      	blx	r3
   1b7e6:	0003      	movs	r3, r0
   1b7e8:	7023      	strb	r3, [r4, #0]
	
	if (fdebug1 == FR_NO_FILE){
   1b7ea:	4bb7      	ldr	r3, [pc, #732]	; (1bac8 <save_measurement+0x400>)
   1b7ec:	2208      	movs	r2, #8
   1b7ee:	4694      	mov	ip, r2
   1b7f0:	2208      	movs	r2, #8
   1b7f2:	4690      	mov	r8, r2
   1b7f4:	44b8      	add	r8, r7
   1b7f6:	44c4      	add	ip, r8
   1b7f8:	4463      	add	r3, ip
   1b7fa:	781b      	ldrb	r3, [r3, #0]
   1b7fc:	2b04      	cmp	r3, #4
   1b7fe:	d000      	beq.n	1b802 <save_measurement+0x13a>
   1b800:	e0ab      	b.n	1b95a <save_measurement+0x292>
		// File does not exist, create new file with header
		fdebug2 = f_open(&file1, filename, FA_CREATE_NEW | FA_READ | FA_WRITE);
   1b802:	4bb9      	ldr	r3, [pc, #740]	; (1bae8 <save_measurement+0x420>)
   1b804:	2208      	movs	r2, #8
   1b806:	2108      	movs	r1, #8
   1b808:	468c      	mov	ip, r1
   1b80a:	44bc      	add	ip, r7
   1b80c:	4462      	add	r2, ip
   1b80e:	18d4      	adds	r4, r2, r3
   1b810:	49b1      	ldr	r1, [pc, #708]	; (1bad8 <save_measurement+0x410>)
   1b812:	4bb3      	ldr	r3, [pc, #716]	; (1bae0 <save_measurement+0x418>)
   1b814:	2207      	movs	r2, #7
   1b816:	0018      	movs	r0, r3
   1b818:	4bb2      	ldr	r3, [pc, #712]	; (1bae4 <save_measurement+0x41c>)
   1b81a:	4798      	blx	r3
   1b81c:	0003      	movs	r3, r0
   1b81e:	7023      	strb	r3, [r4, #0]
		
		if(fdebug2!=FR_OK){
   1b820:	4bb1      	ldr	r3, [pc, #708]	; (1bae8 <save_measurement+0x420>)
   1b822:	2208      	movs	r2, #8
   1b824:	4694      	mov	ip, r2
   1b826:	2208      	movs	r2, #8
   1b828:	4690      	mov	r8, r2
   1b82a:	44b8      	add	r8, r7
   1b82c:	44c4      	add	ip, r8
   1b82e:	4463      	add	r3, ip
   1b830:	781b      	ldrb	r3, [r3, #0]
   1b832:	2b00      	cmp	r3, #0
   1b834:	d017      	beq.n	1b866 <save_measurement+0x19e>
			SD_status = fdebug2;
   1b836:	4ba5      	ldr	r3, [pc, #660]	; (1bacc <save_measurement+0x404>)
   1b838:	4aab      	ldr	r2, [pc, #684]	; (1bae8 <save_measurement+0x420>)
   1b83a:	2108      	movs	r1, #8
   1b83c:	468c      	mov	ip, r1
   1b83e:	2108      	movs	r1, #8
   1b840:	4688      	mov	r8, r1
   1b842:	44b8      	add	r8, r7
   1b844:	44c4      	add	ip, r8
   1b846:	4462      	add	r2, ip
   1b848:	7812      	ldrb	r2, [r2, #0]
   1b84a:	701a      	strb	r2, [r3, #0]
			config_spi(LCD);
   1b84c:	2000      	movs	r0, #0
   1b84e:	4b97      	ldr	r3, [pc, #604]	; (1baac <save_measurement+0x3e4>)
   1b850:	4798      	blx	r3
			return fdebug2;
   1b852:	4ba5      	ldr	r3, [pc, #660]	; (1bae8 <save_measurement+0x420>)
   1b854:	2208      	movs	r2, #8
   1b856:	4694      	mov	ip, r2
   1b858:	2208      	movs	r2, #8
   1b85a:	4690      	mov	r8, r2
   1b85c:	44b8      	add	r8, r7
   1b85e:	44c4      	add	ip, r8
   1b860:	4463      	add	r3, ip
   1b862:	781b      	ldrb	r3, [r3, #0]
   1b864:	e202      	b.n	1bc6c <save_measurement+0x5a4>
		}

		if (options.current_unit_dist == feet){	
   1b866:	4ba1      	ldr	r3, [pc, #644]	; (1baec <save_measurement+0x424>)
   1b868:	781b      	ldrb	r3, [r3, #0]
   1b86a:	2b00      	cmp	r3, #0
   1b86c:	d13a      	bne.n	1b8e4 <save_measurement+0x21c>
			sprintf(write_string_temp, "Time-Stamp, Index, Distance (meters), Azimuth (degrees), Inclination (degrees), Temperature (Celsius),  Error Log\r\n");
   1b86e:	2383      	movs	r3, #131	; 0x83
   1b870:	009b      	lsls	r3, r3, #2
   1b872:	2208      	movs	r2, #8
   1b874:	2108      	movs	r1, #8
   1b876:	468c      	mov	ip, r1
   1b878:	44bc      	add	ip, r7
   1b87a:	4462      	add	r2, ip
   1b87c:	18d2      	adds	r2, r2, r3
   1b87e:	4b9c      	ldr	r3, [pc, #624]	; (1baf0 <save_measurement+0x428>)
   1b880:	0010      	movs	r0, r2
   1b882:	0019      	movs	r1, r3
   1b884:	2374      	movs	r3, #116	; 0x74
   1b886:	001a      	movs	r2, r3
   1b888:	4b9a      	ldr	r3, [pc, #616]	; (1baf4 <save_measurement+0x42c>)
   1b88a:	4798      	blx	r3
			fdebug2 = f_write(&file1, write_string_temp, strlen(write_string_temp), pbw);
   1b88c:	2383      	movs	r3, #131	; 0x83
   1b88e:	009b      	lsls	r3, r3, #2
   1b890:	2208      	movs	r2, #8
   1b892:	4694      	mov	ip, r2
   1b894:	2208      	movs	r2, #8
   1b896:	4690      	mov	r8, r2
   1b898:	44b8      	add	r8, r7
   1b89a:	44c4      	add	ip, r8
   1b89c:	4463      	add	r3, ip
   1b89e:	0018      	movs	r0, r3
   1b8a0:	4b95      	ldr	r3, [pc, #596]	; (1baf8 <save_measurement+0x430>)
   1b8a2:	4798      	blx	r3
   1b8a4:	0002      	movs	r2, r0
   1b8a6:	4b90      	ldr	r3, [pc, #576]	; (1bae8 <save_measurement+0x420>)
   1b8a8:	2108      	movs	r1, #8
   1b8aa:	2008      	movs	r0, #8
   1b8ac:	4684      	mov	ip, r0
   1b8ae:	44bc      	add	ip, r7
   1b8b0:	4461      	add	r1, ip
   1b8b2:	18cc      	adds	r4, r1, r3
   1b8b4:	4b7c      	ldr	r3, [pc, #496]	; (1baa8 <save_measurement+0x3e0>)
   1b8b6:	2108      	movs	r1, #8
   1b8b8:	468c      	mov	ip, r1
   1b8ba:	2108      	movs	r1, #8
   1b8bc:	4688      	mov	r8, r1
   1b8be:	44b8      	add	r8, r7
   1b8c0:	44c4      	add	ip, r8
   1b8c2:	4463      	add	r3, ip
   1b8c4:	681b      	ldr	r3, [r3, #0]
   1b8c6:	2183      	movs	r1, #131	; 0x83
   1b8c8:	0089      	lsls	r1, r1, #2
   1b8ca:	2008      	movs	r0, #8
   1b8cc:	4684      	mov	ip, r0
   1b8ce:	2008      	movs	r0, #8
   1b8d0:	4680      	mov	r8, r0
   1b8d2:	44b8      	add	r8, r7
   1b8d4:	44c4      	add	ip, r8
   1b8d6:	4461      	add	r1, ip
   1b8d8:	4881      	ldr	r0, [pc, #516]	; (1bae0 <save_measurement+0x418>)
   1b8da:	4d88      	ldr	r5, [pc, #544]	; (1bafc <save_measurement+0x434>)
   1b8dc:	47a8      	blx	r5
   1b8de:	0003      	movs	r3, r0
   1b8e0:	7023      	strb	r3, [r4, #0]
   1b8e2:	e05d      	b.n	1b9a0 <save_measurement+0x2d8>
		}else{
			sprintf(write_string_temp, "Time-Stamp, Index, Distance (feet), Azimuth (degrees), Inclination (degrees), Temperature (Fahrenheit), Error Log\r\n");
   1b8e4:	2383      	movs	r3, #131	; 0x83
   1b8e6:	009b      	lsls	r3, r3, #2
   1b8e8:	2208      	movs	r2, #8
   1b8ea:	2108      	movs	r1, #8
   1b8ec:	468c      	mov	ip, r1
   1b8ee:	44bc      	add	ip, r7
   1b8f0:	4462      	add	r2, ip
   1b8f2:	18d2      	adds	r2, r2, r3
   1b8f4:	4b82      	ldr	r3, [pc, #520]	; (1bb00 <save_measurement+0x438>)
   1b8f6:	0010      	movs	r0, r2
   1b8f8:	0019      	movs	r1, r3
   1b8fa:	2374      	movs	r3, #116	; 0x74
   1b8fc:	001a      	movs	r2, r3
   1b8fe:	4b7d      	ldr	r3, [pc, #500]	; (1baf4 <save_measurement+0x42c>)
   1b900:	4798      	blx	r3
			fdebug2 = f_write(&file1, write_string_temp, strlen(write_string_temp), pbw);
   1b902:	2383      	movs	r3, #131	; 0x83
   1b904:	009b      	lsls	r3, r3, #2
   1b906:	2208      	movs	r2, #8
   1b908:	4694      	mov	ip, r2
   1b90a:	2208      	movs	r2, #8
   1b90c:	4690      	mov	r8, r2
   1b90e:	44b8      	add	r8, r7
   1b910:	44c4      	add	ip, r8
   1b912:	4463      	add	r3, ip
   1b914:	0018      	movs	r0, r3
   1b916:	4b78      	ldr	r3, [pc, #480]	; (1baf8 <save_measurement+0x430>)
   1b918:	4798      	blx	r3
   1b91a:	0002      	movs	r2, r0
   1b91c:	4b72      	ldr	r3, [pc, #456]	; (1bae8 <save_measurement+0x420>)
   1b91e:	2108      	movs	r1, #8
   1b920:	2008      	movs	r0, #8
   1b922:	4684      	mov	ip, r0
   1b924:	44bc      	add	ip, r7
   1b926:	4461      	add	r1, ip
   1b928:	18cc      	adds	r4, r1, r3
   1b92a:	4b5f      	ldr	r3, [pc, #380]	; (1baa8 <save_measurement+0x3e0>)
   1b92c:	2108      	movs	r1, #8
   1b92e:	468c      	mov	ip, r1
   1b930:	2108      	movs	r1, #8
   1b932:	4688      	mov	r8, r1
   1b934:	44b8      	add	r8, r7
   1b936:	44c4      	add	ip, r8
   1b938:	4463      	add	r3, ip
   1b93a:	681b      	ldr	r3, [r3, #0]
   1b93c:	2183      	movs	r1, #131	; 0x83
   1b93e:	0089      	lsls	r1, r1, #2
   1b940:	2008      	movs	r0, #8
   1b942:	4684      	mov	ip, r0
   1b944:	2008      	movs	r0, #8
   1b946:	4680      	mov	r8, r0
   1b948:	44b8      	add	r8, r7
   1b94a:	44c4      	add	ip, r8
   1b94c:	4461      	add	r1, ip
   1b94e:	4864      	ldr	r0, [pc, #400]	; (1bae0 <save_measurement+0x418>)
   1b950:	4d6a      	ldr	r5, [pc, #424]	; (1bafc <save_measurement+0x434>)
   1b952:	47a8      	blx	r5
   1b954:	0003      	movs	r3, r0
   1b956:	7023      	strb	r3, [r4, #0]
   1b958:	e022      	b.n	1b9a0 <save_measurement+0x2d8>
		}
		
		
	}else if(fdebug1 != FR_OK){
   1b95a:	4b5b      	ldr	r3, [pc, #364]	; (1bac8 <save_measurement+0x400>)
   1b95c:	2208      	movs	r2, #8
   1b95e:	4694      	mov	ip, r2
   1b960:	2208      	movs	r2, #8
   1b962:	4690      	mov	r8, r2
   1b964:	44b8      	add	r8, r7
   1b966:	44c4      	add	ip, r8
   1b968:	4463      	add	r3, ip
   1b96a:	781b      	ldrb	r3, [r3, #0]
   1b96c:	2b00      	cmp	r3, #0
   1b96e:	d017      	beq.n	1b9a0 <save_measurement+0x2d8>
		SD_status = fdebug1;
   1b970:	4b56      	ldr	r3, [pc, #344]	; (1bacc <save_measurement+0x404>)
   1b972:	4a55      	ldr	r2, [pc, #340]	; (1bac8 <save_measurement+0x400>)
   1b974:	2108      	movs	r1, #8
   1b976:	468c      	mov	ip, r1
   1b978:	2108      	movs	r1, #8
   1b97a:	4688      	mov	r8, r1
   1b97c:	44b8      	add	r8, r7
   1b97e:	44c4      	add	ip, r8
   1b980:	4462      	add	r2, ip
   1b982:	7812      	ldrb	r2, [r2, #0]
   1b984:	701a      	strb	r2, [r3, #0]
		config_spi(LCD);
   1b986:	2000      	movs	r0, #0
   1b988:	4b48      	ldr	r3, [pc, #288]	; (1baac <save_measurement+0x3e4>)
   1b98a:	4798      	blx	r3
		return fdebug1;		
   1b98c:	4b4e      	ldr	r3, [pc, #312]	; (1bac8 <save_measurement+0x400>)
   1b98e:	2208      	movs	r2, #8
   1b990:	4694      	mov	ip, r2
   1b992:	2208      	movs	r2, #8
   1b994:	4690      	mov	r8, r2
   1b996:	44b8      	add	r8, r7
   1b998:	44c4      	add	ip, r8
   1b99a:	4463      	add	r3, ip
   1b99c:	781b      	ldrb	r3, [r3, #0]
   1b99e:	e165      	b.n	1bc6c <save_measurement+0x5a4>
	}
	
	// Format string for timestamps	
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
		current_time.year, current_time.month, current_time.date,
   1b9a0:	4b4b      	ldr	r3, [pc, #300]	; (1bad0 <save_measurement+0x408>)
   1b9a2:	799b      	ldrb	r3, [r3, #6]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   1b9a4:	001e      	movs	r6, r3
		current_time.year, current_time.month, current_time.date,
   1b9a6:	4b4a      	ldr	r3, [pc, #296]	; (1bad0 <save_measurement+0x408>)
   1b9a8:	795b      	ldrb	r3, [r3, #5]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   1b9aa:	60bb      	str	r3, [r7, #8]
		current_time.year, current_time.month, current_time.date,
   1b9ac:	4b48      	ldr	r3, [pc, #288]	; (1bad0 <save_measurement+0x408>)
   1b9ae:	791b      	ldrb	r3, [r3, #4]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   1b9b0:	001a      	movs	r2, r3
		current_time.hours, current_time.minutes, current_time.seconds);
   1b9b2:	4b47      	ldr	r3, [pc, #284]	; (1bad0 <save_measurement+0x408>)
   1b9b4:	789b      	ldrb	r3, [r3, #2]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   1b9b6:	001c      	movs	r4, r3
		current_time.hours, current_time.minutes, current_time.seconds);
   1b9b8:	4b45      	ldr	r3, [pc, #276]	; (1bad0 <save_measurement+0x408>)
   1b9ba:	785b      	ldrb	r3, [r3, #1]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   1b9bc:	001d      	movs	r5, r3
		current_time.hours, current_time.minutes, current_time.seconds);
   1b9be:	4b44      	ldr	r3, [pc, #272]	; (1bad0 <save_measurement+0x408>)
   1b9c0:	781b      	ldrb	r3, [r3, #0]
	sprintf(write_string_full,"20%02x.%02x.%02x@%02x:%02x:%02x,",
   1b9c2:	4698      	mov	r8, r3
   1b9c4:	494f      	ldr	r1, [pc, #316]	; (1bb04 <save_measurement+0x43c>)
   1b9c6:	200c      	movs	r0, #12
   1b9c8:	2308      	movs	r3, #8
   1b9ca:	469c      	mov	ip, r3
   1b9cc:	2308      	movs	r3, #8
   1b9ce:	4699      	mov	r9, r3
   1b9d0:	44b9      	add	r9, r7
   1b9d2:	44cc      	add	ip, r9
   1b9d4:	4460      	add	r0, ip
   1b9d6:	4643      	mov	r3, r8
   1b9d8:	9303      	str	r3, [sp, #12]
   1b9da:	9502      	str	r5, [sp, #8]
   1b9dc:	9401      	str	r4, [sp, #4]
   1b9de:	9200      	str	r2, [sp, #0]
   1b9e0:	68bb      	ldr	r3, [r7, #8]
   1b9e2:	0032      	movs	r2, r6
   1b9e4:	4c3d      	ldr	r4, [pc, #244]	; (1badc <save_measurement+0x414>)
   1b9e6:	47a0      	blx	r4
	// Format string for data
	sprintf(write_string_temp," %d, %.3f, %.3f, %.3f,",
   1b9e8:	697b      	ldr	r3, [r7, #20]
   1b9ea:	681e      	ldr	r6, [r3, #0]
		meas_inst->index_ref, meas_inst->distance, meas_inst->azimuth, meas_inst->inclination);
   1b9ec:	697b      	ldr	r3, [r7, #20]
   1b9ee:	69da      	ldr	r2, [r3, #28]
	sprintf(write_string_temp," %d, %.3f, %.3f, %.3f,",
   1b9f0:	4b45      	ldr	r3, [pc, #276]	; (1bb08 <save_measurement+0x440>)
   1b9f2:	1c10      	adds	r0, r2, #0
   1b9f4:	4798      	blx	r3
   1b9f6:	0004      	movs	r4, r0
   1b9f8:	000d      	movs	r5, r1
		meas_inst->index_ref, meas_inst->distance, meas_inst->azimuth, meas_inst->inclination);
   1b9fa:	697b      	ldr	r3, [r7, #20]
   1b9fc:	68da      	ldr	r2, [r3, #12]
	sprintf(write_string_temp," %d, %.3f, %.3f, %.3f,",
   1b9fe:	4b42      	ldr	r3, [pc, #264]	; (1bb08 <save_measurement+0x440>)
   1ba00:	1c10      	adds	r0, r2, #0
   1ba02:	4798      	blx	r3
   1ba04:	60b8      	str	r0, [r7, #8]
   1ba06:	60f9      	str	r1, [r7, #12]
		meas_inst->index_ref, meas_inst->distance, meas_inst->azimuth, meas_inst->inclination);
   1ba08:	697b      	ldr	r3, [r7, #20]
   1ba0a:	691a      	ldr	r2, [r3, #16]
	sprintf(write_string_temp," %d, %.3f, %.3f, %.3f,",
   1ba0c:	4b3e      	ldr	r3, [pc, #248]	; (1bb08 <save_measurement+0x440>)
   1ba0e:	1c10      	adds	r0, r2, #0
   1ba10:	4798      	blx	r3
   1ba12:	6038      	str	r0, [r7, #0]
   1ba14:	6079      	str	r1, [r7, #4]
   1ba16:	493d      	ldr	r1, [pc, #244]	; (1bb0c <save_measurement+0x444>)
   1ba18:	2083      	movs	r0, #131	; 0x83
   1ba1a:	0080      	lsls	r0, r0, #2
   1ba1c:	2308      	movs	r3, #8
   1ba1e:	469c      	mov	ip, r3
   1ba20:	2308      	movs	r3, #8
   1ba22:	4698      	mov	r8, r3
   1ba24:	44b8      	add	r8, r7
   1ba26:	44c4      	add	ip, r8
   1ba28:	4460      	add	r0, ip
   1ba2a:	683a      	ldr	r2, [r7, #0]
   1ba2c:	687b      	ldr	r3, [r7, #4]
   1ba2e:	9204      	str	r2, [sp, #16]
   1ba30:	9305      	str	r3, [sp, #20]
   1ba32:	68ba      	ldr	r2, [r7, #8]
   1ba34:	68fb      	ldr	r3, [r7, #12]
   1ba36:	9202      	str	r2, [sp, #8]
   1ba38:	9303      	str	r3, [sp, #12]
   1ba3a:	9400      	str	r4, [sp, #0]
   1ba3c:	9501      	str	r5, [sp, #4]
   1ba3e:	0032      	movs	r2, r6
   1ba40:	4b26      	ldr	r3, [pc, #152]	; (1badc <save_measurement+0x414>)
   1ba42:	4798      	blx	r3
	strcat(write_string_full, write_string_temp);
   1ba44:	2383      	movs	r3, #131	; 0x83
   1ba46:	009b      	lsls	r3, r3, #2
   1ba48:	2208      	movs	r2, #8
   1ba4a:	2108      	movs	r1, #8
   1ba4c:	468c      	mov	ip, r1
   1ba4e:	44bc      	add	ip, r7
   1ba50:	4462      	add	r2, ip
   1ba52:	18d2      	adds	r2, r2, r3
   1ba54:	230c      	movs	r3, #12
   1ba56:	2108      	movs	r1, #8
   1ba58:	468c      	mov	ip, r1
   1ba5a:	2108      	movs	r1, #8
   1ba5c:	4688      	mov	r8, r1
   1ba5e:	44b8      	add	r8, r7
   1ba60:	44c4      	add	ip, r8
   1ba62:	4463      	add	r3, ip
   1ba64:	0011      	movs	r1, r2
   1ba66:	0018      	movs	r0, r3
   1ba68:	4b29      	ldr	r3, [pc, #164]	; (1bb10 <save_measurement+0x448>)
   1ba6a:	4798      	blx	r3
	//  Format string for temperature
	if (options.current_unit_dist == feet){
   1ba6c:	4b1f      	ldr	r3, [pc, #124]	; (1baec <save_measurement+0x424>)
   1ba6e:	781b      	ldrb	r3, [r3, #0]
   1ba70:	2b00      	cmp	r3, #0
   1ba72:	d151      	bne.n	1bb18 <save_measurement+0x450>
		sprintf(write_string_temp," %.3f,", current_time.temperatureF);
   1ba74:	4b16      	ldr	r3, [pc, #88]	; (1bad0 <save_measurement+0x408>)
   1ba76:	691a      	ldr	r2, [r3, #16]
   1ba78:	4b23      	ldr	r3, [pc, #140]	; (1bb08 <save_measurement+0x440>)
   1ba7a:	1c10      	adds	r0, r2, #0
   1ba7c:	4798      	blx	r3
   1ba7e:	0003      	movs	r3, r0
   1ba80:	000c      	movs	r4, r1
   1ba82:	4924      	ldr	r1, [pc, #144]	; (1bb14 <save_measurement+0x44c>)
   1ba84:	2283      	movs	r2, #131	; 0x83
   1ba86:	0092      	lsls	r2, r2, #2
   1ba88:	2008      	movs	r0, #8
   1ba8a:	2508      	movs	r5, #8
   1ba8c:	46ac      	mov	ip, r5
   1ba8e:	44bc      	add	ip, r7
   1ba90:	4460      	add	r0, ip
   1ba92:	1880      	adds	r0, r0, r2
   1ba94:	001a      	movs	r2, r3
   1ba96:	0023      	movs	r3, r4
   1ba98:	4c10      	ldr	r4, [pc, #64]	; (1badc <save_measurement+0x414>)
   1ba9a:	47a0      	blx	r4
   1ba9c:	e050      	b.n	1bb40 <save_measurement+0x478>
   1ba9e:	46c0      	nop			; (mov r8, r8)
   1baa0:	fffffbbc 	.word	0xfffffbbc
   1baa4:	0000040c 	.word	0x0000040c
   1baa8:	00000414 	.word	0x00000414
   1baac:	00010311 	.word	0x00010311
   1bab0:	20001240 	.word	0x20001240
   1bab4:	20001270 	.word	0x20001270
   1bab8:	00017325 	.word	0x00017325
   1babc:	00000413 	.word	0x00000413
   1bac0:	000113ad 	.word	0x000113ad
   1bac4:	0001bcc9 	.word	0x0001bcc9
   1bac8:	00000412 	.word	0x00000412
   1bacc:	20004135 	.word	0x20004135
   1bad0:	200011f4 	.word	0x200011f4
   1bad4:	000293dc 	.word	0x000293dc
   1bad8:	200034bc 	.word	0x200034bc
   1badc:	00023d31 	.word	0x00023d31
   1bae0:	200048e8 	.word	0x200048e8
   1bae4:	00013c4d 	.word	0x00013c4d
   1bae8:	00000411 	.word	0x00000411
   1baec:	200034a8 	.word	0x200034a8
   1baf0:	000293f8 	.word	0x000293f8
   1baf4:	00023c19 	.word	0x00023c19
   1baf8:	00023dd1 	.word	0x00023dd1
   1bafc:	000141e9 	.word	0x000141e9
   1bb00:	0002946c 	.word	0x0002946c
   1bb04:	000294e0 	.word	0x000294e0
   1bb08:	00023a0d 	.word	0x00023a0d
   1bb0c:	00029504 	.word	0x00029504
   1bb10:	00023d75 	.word	0x00023d75
   1bb14:	0002951c 	.word	0x0002951c
	}else{
		sprintf(write_string_temp," %.3f,", current_time.temperatureC);
   1bb18:	4b58      	ldr	r3, [pc, #352]	; (1bc7c <save_measurement+0x5b4>)
   1bb1a:	68da      	ldr	r2, [r3, #12]
   1bb1c:	4b58      	ldr	r3, [pc, #352]	; (1bc80 <save_measurement+0x5b8>)
   1bb1e:	1c10      	adds	r0, r2, #0
   1bb20:	4798      	blx	r3
   1bb22:	0003      	movs	r3, r0
   1bb24:	000c      	movs	r4, r1
   1bb26:	4957      	ldr	r1, [pc, #348]	; (1bc84 <save_measurement+0x5bc>)
   1bb28:	2283      	movs	r2, #131	; 0x83
   1bb2a:	0092      	lsls	r2, r2, #2
   1bb2c:	2008      	movs	r0, #8
   1bb2e:	2508      	movs	r5, #8
   1bb30:	46ac      	mov	ip, r5
   1bb32:	44bc      	add	ip, r7
   1bb34:	4460      	add	r0, ip
   1bb36:	1880      	adds	r0, r0, r2
   1bb38:	001a      	movs	r2, r3
   1bb3a:	0023      	movs	r3, r4
   1bb3c:	4c52      	ldr	r4, [pc, #328]	; (1bc88 <save_measurement+0x5c0>)
   1bb3e:	47a0      	blx	r4
	} 
	strcat(write_string_full, write_string_temp);
   1bb40:	2383      	movs	r3, #131	; 0x83
   1bb42:	009b      	lsls	r3, r3, #2
   1bb44:	2208      	movs	r2, #8
   1bb46:	2108      	movs	r1, #8
   1bb48:	468c      	mov	ip, r1
   1bb4a:	44bc      	add	ip, r7
   1bb4c:	4462      	add	r2, ip
   1bb4e:	18d2      	adds	r2, r2, r3
   1bb50:	230c      	movs	r3, #12
   1bb52:	2108      	movs	r1, #8
   1bb54:	468c      	mov	ip, r1
   1bb56:	2108      	movs	r1, #8
   1bb58:	4688      	mov	r8, r1
   1bb5a:	44b8      	add	r8, r7
   1bb5c:	44c4      	add	ip, r8
   1bb5e:	4463      	add	r3, ip
   1bb60:	0011      	movs	r1, r2
   1bb62:	0018      	movs	r0, r3
   1bb64:	4b49      	ldr	r3, [pc, #292]	; (1bc8c <save_measurement+0x5c4>)
   1bb66:	4798      	blx	r3
	//Format data for error_log
	//sprintf(write_string_temp,"Laser: %02x",meas_inst->laser_error_code);
	strcat(write_string_full, write_string_temp);
   1bb68:	2383      	movs	r3, #131	; 0x83
   1bb6a:	009b      	lsls	r3, r3, #2
   1bb6c:	2208      	movs	r2, #8
   1bb6e:	2108      	movs	r1, #8
   1bb70:	468c      	mov	ip, r1
   1bb72:	44bc      	add	ip, r7
   1bb74:	4462      	add	r2, ip
   1bb76:	18d2      	adds	r2, r2, r3
   1bb78:	230c      	movs	r3, #12
   1bb7a:	2108      	movs	r1, #8
   1bb7c:	468c      	mov	ip, r1
   1bb7e:	2108      	movs	r1, #8
   1bb80:	4688      	mov	r8, r1
   1bb82:	44b8      	add	r8, r7
   1bb84:	44c4      	add	ip, r8
   1bb86:	4463      	add	r3, ip
   1bb88:	0011      	movs	r1, r2
   1bb8a:	0018      	movs	r0, r3
   1bb8c:	4b3f      	ldr	r3, [pc, #252]	; (1bc8c <save_measurement+0x5c4>)
   1bb8e:	4798      	blx	r3
	// Enter line return
	strcat(write_string_full, "\r\n");
   1bb90:	230c      	movs	r3, #12
   1bb92:	2208      	movs	r2, #8
   1bb94:	4694      	mov	ip, r2
   1bb96:	2208      	movs	r2, #8
   1bb98:	4690      	mov	r8, r2
   1bb9a:	44b8      	add	r8, r7
   1bb9c:	44c4      	add	ip, r8
   1bb9e:	4463      	add	r3, ip
   1bba0:	0018      	movs	r0, r3
   1bba2:	4b3b      	ldr	r3, [pc, #236]	; (1bc90 <save_measurement+0x5c8>)
   1bba4:	4798      	blx	r3
   1bba6:	0003      	movs	r3, r0
   1bba8:	001a      	movs	r2, r3
   1bbaa:	230c      	movs	r3, #12
   1bbac:	2108      	movs	r1, #8
   1bbae:	468c      	mov	ip, r1
   1bbb0:	2108      	movs	r1, #8
   1bbb2:	4688      	mov	r8, r1
   1bbb4:	44b8      	add	r8, r7
   1bbb6:	44c4      	add	ip, r8
   1bbb8:	4463      	add	r3, ip
   1bbba:	189a      	adds	r2, r3, r2
   1bbbc:	4b35      	ldr	r3, [pc, #212]	; (1bc94 <save_measurement+0x5cc>)
   1bbbe:	0010      	movs	r0, r2
   1bbc0:	0019      	movs	r1, r3
   1bbc2:	2303      	movs	r3, #3
   1bbc4:	001a      	movs	r2, r3
   1bbc6:	4b34      	ldr	r3, [pc, #208]	; (1bc98 <save_measurement+0x5d0>)
   1bbc8:	4798      	blx	r3
	
	// Append data file
	fdebug2 = f_lseek(&file1, f_size(&file1));
   1bbca:	4b34      	ldr	r3, [pc, #208]	; (1bc9c <save_measurement+0x5d4>)
   1bbcc:	68da      	ldr	r2, [r3, #12]
   1bbce:	4b34      	ldr	r3, [pc, #208]	; (1bca0 <save_measurement+0x5d8>)
   1bbd0:	2108      	movs	r1, #8
   1bbd2:	2008      	movs	r0, #8
   1bbd4:	4684      	mov	ip, r0
   1bbd6:	44bc      	add	ip, r7
   1bbd8:	4461      	add	r1, ip
   1bbda:	18cc      	adds	r4, r1, r3
   1bbdc:	4b2f      	ldr	r3, [pc, #188]	; (1bc9c <save_measurement+0x5d4>)
   1bbde:	0011      	movs	r1, r2
   1bbe0:	0018      	movs	r0, r3
   1bbe2:	4b30      	ldr	r3, [pc, #192]	; (1bca4 <save_measurement+0x5dc>)
   1bbe4:	4798      	blx	r3
   1bbe6:	0003      	movs	r3, r0
   1bbe8:	7023      	strb	r3, [r4, #0]
	fdebug3 = f_write(&file1, write_string_full, strlen(write_string_full), pbw);
   1bbea:	230c      	movs	r3, #12
   1bbec:	2208      	movs	r2, #8
   1bbee:	4694      	mov	ip, r2
   1bbf0:	2208      	movs	r2, #8
   1bbf2:	4690      	mov	r8, r2
   1bbf4:	44b8      	add	r8, r7
   1bbf6:	44c4      	add	ip, r8
   1bbf8:	4463      	add	r3, ip
   1bbfa:	0018      	movs	r0, r3
   1bbfc:	4b24      	ldr	r3, [pc, #144]	; (1bc90 <save_measurement+0x5c8>)
   1bbfe:	4798      	blx	r3
   1bc00:	0002      	movs	r2, r0
   1bc02:	2382      	movs	r3, #130	; 0x82
   1bc04:	00db      	lsls	r3, r3, #3
   1bc06:	2108      	movs	r1, #8
   1bc08:	2008      	movs	r0, #8
   1bc0a:	4684      	mov	ip, r0
   1bc0c:	44bc      	add	ip, r7
   1bc0e:	4461      	add	r1, ip
   1bc10:	18cc      	adds	r4, r1, r3
   1bc12:	4b25      	ldr	r3, [pc, #148]	; (1bca8 <save_measurement+0x5e0>)
   1bc14:	2108      	movs	r1, #8
   1bc16:	468c      	mov	ip, r1
   1bc18:	2108      	movs	r1, #8
   1bc1a:	4688      	mov	r8, r1
   1bc1c:	44b8      	add	r8, r7
   1bc1e:	44c4      	add	ip, r8
   1bc20:	4463      	add	r3, ip
   1bc22:	681b      	ldr	r3, [r3, #0]
   1bc24:	210c      	movs	r1, #12
   1bc26:	2008      	movs	r0, #8
   1bc28:	4684      	mov	ip, r0
   1bc2a:	2008      	movs	r0, #8
   1bc2c:	4680      	mov	r8, r0
   1bc2e:	44b8      	add	r8, r7
   1bc30:	44c4      	add	ip, r8
   1bc32:	4461      	add	r1, ip
   1bc34:	4819      	ldr	r0, [pc, #100]	; (1bc9c <save_measurement+0x5d4>)
   1bc36:	4d1d      	ldr	r5, [pc, #116]	; (1bcac <save_measurement+0x5e4>)
   1bc38:	47a8      	blx	r5
   1bc3a:	0003      	movs	r3, r0
   1bc3c:	7023      	strb	r3, [r4, #0]
	f_close(&file1);
   1bc3e:	4b17      	ldr	r3, [pc, #92]	; (1bc9c <save_measurement+0x5d4>)
   1bc40:	0018      	movs	r0, r3
   1bc42:	4b1b      	ldr	r3, [pc, #108]	; (1bcb0 <save_measurement+0x5e8>)
   1bc44:	4798      	blx	r3
	
	
	spi_select_slave(&spi_main, &slave_SD, false);
   1bc46:	491b      	ldr	r1, [pc, #108]	; (1bcb4 <save_measurement+0x5ec>)
   1bc48:	4b1b      	ldr	r3, [pc, #108]	; (1bcb8 <save_measurement+0x5f0>)
   1bc4a:	2200      	movs	r2, #0
   1bc4c:	0018      	movs	r0, r3
   1bc4e:	4b1b      	ldr	r3, [pc, #108]	; (1bcbc <save_measurement+0x5f4>)
   1bc50:	4798      	blx	r3
	config_spi(LCD);
   1bc52:	2000      	movs	r0, #0
   1bc54:	4b1a      	ldr	r3, [pc, #104]	; (1bcc0 <save_measurement+0x5f8>)
   1bc56:	4798      	blx	r3

	return fdebug3;
   1bc58:	2382      	movs	r3, #130	; 0x82
   1bc5a:	00db      	lsls	r3, r3, #3
   1bc5c:	2208      	movs	r2, #8
   1bc5e:	4694      	mov	ip, r2
   1bc60:	2208      	movs	r2, #8
   1bc62:	4690      	mov	r8, r2
   1bc64:	44b8      	add	r8, r7
   1bc66:	44c4      	add	ip, r8
   1bc68:	4463      	add	r3, ip
   1bc6a:	781b      	ldrb	r3, [r3, #0]
}
   1bc6c:	0018      	movs	r0, r3
   1bc6e:	46bd      	mov	sp, r7
   1bc70:	4b14      	ldr	r3, [pc, #80]	; (1bcc4 <save_measurement+0x5fc>)
   1bc72:	449d      	add	sp, r3
   1bc74:	bc0c      	pop	{r2, r3}
   1bc76:	4690      	mov	r8, r2
   1bc78:	4699      	mov	r9, r3
   1bc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc7c:	200011f4 	.word	0x200011f4
   1bc80:	00023a0d 	.word	0x00023a0d
   1bc84:	0002951c 	.word	0x0002951c
   1bc88:	00023d31 	.word	0x00023d31
   1bc8c:	00023d75 	.word	0x00023d75
   1bc90:	00023dd1 	.word	0x00023dd1
   1bc94:	00029524 	.word	0x00029524
   1bc98:	00023c19 	.word	0x00023c19
   1bc9c:	200048e8 	.word	0x200048e8
   1bca0:	00000411 	.word	0x00000411
   1bca4:	00014679 	.word	0x00014679
   1bca8:	00000414 	.word	0x00000414
   1bcac:	000141e9 	.word	0x000141e9
   1bcb0:	00014619 	.word	0x00014619
   1bcb4:	20001240 	.word	0x20001240
   1bcb8:	20001270 	.word	0x20001270
   1bcbc:	00017325 	.word	0x00017325
   1bcc0:	00010311 	.word	0x00010311
   1bcc4:	0000042c 	.word	0x0000042c

0001bcc8 <configure_SD>:


FRESULT configure_SD(void){
   1bcc8:	b590      	push	{r4, r7, lr}
   1bcca:	b083      	sub	sp, #12
   1bccc:	af00      	add	r7, sp, #0
	FRESULT fdebug1;
	config_spi(SD_card);
   1bcce:	2002      	movs	r0, #2
   1bcd0:	4b11      	ldr	r3, [pc, #68]	; (1bd18 <configure_SD+0x50>)
   1bcd2:	4798      	blx	r3
	spi_select_slave(&spi_main, &slave_SD, true);
   1bcd4:	4911      	ldr	r1, [pc, #68]	; (1bd1c <configure_SD+0x54>)
   1bcd6:	4b12      	ldr	r3, [pc, #72]	; (1bd20 <configure_SD+0x58>)
   1bcd8:	2201      	movs	r2, #1
   1bcda:	0018      	movs	r0, r3
   1bcdc:	4b11      	ldr	r3, [pc, #68]	; (1bd24 <configure_SD+0x5c>)
   1bcde:	4798      	blx	r3
	spi_clear();
   1bce0:	4b11      	ldr	r3, [pc, #68]	; (1bd28 <configure_SD+0x60>)
   1bce2:	4798      	blx	r3
	sd_mmc_init();
   1bce4:	4b11      	ldr	r3, [pc, #68]	; (1bd2c <configure_SD+0x64>)
   1bce6:	4798      	blx	r3

	fdebug1 = f_mount(&FatFS, "", 1);
   1bce8:	1dfc      	adds	r4, r7, #7
   1bcea:	4911      	ldr	r1, [pc, #68]	; (1bd30 <configure_SD+0x68>)
   1bcec:	4b11      	ldr	r3, [pc, #68]	; (1bd34 <configure_SD+0x6c>)
   1bcee:	2201      	movs	r2, #1
   1bcf0:	0018      	movs	r0, r3
   1bcf2:	4b11      	ldr	r3, [pc, #68]	; (1bd38 <configure_SD+0x70>)
   1bcf4:	4798      	blx	r3
   1bcf6:	0003      	movs	r3, r0
   1bcf8:	7023      	strb	r3, [r4, #0]
	spi_select_slave(&spi_main, &slave_SD, false);
   1bcfa:	4908      	ldr	r1, [pc, #32]	; (1bd1c <configure_SD+0x54>)
   1bcfc:	4b08      	ldr	r3, [pc, #32]	; (1bd20 <configure_SD+0x58>)
   1bcfe:	2200      	movs	r2, #0
   1bd00:	0018      	movs	r0, r3
   1bd02:	4b08      	ldr	r3, [pc, #32]	; (1bd24 <configure_SD+0x5c>)
   1bd04:	4798      	blx	r3
	config_spi(LCD);
   1bd06:	2000      	movs	r0, #0
   1bd08:	4b03      	ldr	r3, [pc, #12]	; (1bd18 <configure_SD+0x50>)
   1bd0a:	4798      	blx	r3
	
	return fdebug1;
   1bd0c:	1dfb      	adds	r3, r7, #7
   1bd0e:	781b      	ldrb	r3, [r3, #0]
}
   1bd10:	0018      	movs	r0, r3
   1bd12:	46bd      	mov	sp, r7
   1bd14:	b003      	add	sp, #12
   1bd16:	bd90      	pop	{r4, r7, pc}
   1bd18:	00010311 	.word	0x00010311
   1bd1c:	20001240 	.word	0x20001240
   1bd20:	20001270 	.word	0x20001270
   1bd24:	00017325 	.word	0x00017325
   1bd28:	00010379 	.word	0x00010379
   1bd2c:	0000547d 	.word	0x0000547d
   1bd30:	00029528 	.word	0x00029528
   1bd34:	20004654 	.word	0x20004654
   1bd38:	00013bb9 	.word	0x00013bb9

0001bd3c <fn_measure>:


void fn_measure(void){
   1bd3c:	b580      	push	{r7, lr}
   1bd3e:	af00      	add	r7, sp, #0
	// increment data buffer index
	data_buf_ind = data_buf_ind+1;
   1bd40:	4b20      	ldr	r3, [pc, #128]	; (1bdc4 <fn_measure+0x88>)
   1bd42:	781b      	ldrb	r3, [r3, #0]
   1bd44:	3301      	adds	r3, #1
   1bd46:	b2da      	uxtb	r2, r3
   1bd48:	4b1e      	ldr	r3, [pc, #120]	; (1bdc4 <fn_measure+0x88>)
   1bd4a:	701a      	strb	r2, [r3, #0]
	if (data_buf_ind >= buf_length){data_buf_ind = 0;}
   1bd4c:	4b1d      	ldr	r3, [pc, #116]	; (1bdc4 <fn_measure+0x88>)
   1bd4e:	781b      	ldrb	r3, [r3, #0]
   1bd50:	2b09      	cmp	r3, #9
   1bd52:	d902      	bls.n	1bd5a <fn_measure+0x1e>
   1bd54:	4b1b      	ldr	r3, [pc, #108]	; (1bdc4 <fn_measure+0x88>)
   1bd56:	2200      	movs	r2, #0
   1bd58:	701a      	strb	r2, [r3, #0]
	// Increment reference counter
	data_ref = data_ref+1;
   1bd5a:	4b1b      	ldr	r3, [pc, #108]	; (1bdc8 <fn_measure+0x8c>)
   1bd5c:	681b      	ldr	r3, [r3, #0]
   1bd5e:	1c5a      	adds	r2, r3, #1
   1bd60:	4b19      	ldr	r3, [pc, #100]	; (1bdc8 <fn_measure+0x8c>)
   1bd62:	601a      	str	r2, [r3, #0]
	if (data_ref>= 999){data_ref = 1;}
   1bd64:	4b18      	ldr	r3, [pc, #96]	; (1bdc8 <fn_measure+0x8c>)
   1bd66:	681b      	ldr	r3, [r3, #0]
   1bd68:	4a18      	ldr	r2, [pc, #96]	; (1bdcc <fn_measure+0x90>)
   1bd6a:	4293      	cmp	r3, r2
   1bd6c:	d902      	bls.n	1bd74 <fn_measure+0x38>
   1bd6e:	4b16      	ldr	r3, [pc, #88]	; (1bdc8 <fn_measure+0x8c>)
   1bd70:	2201      	movs	r2, #1
   1bd72:	601a      	str	r2, [r3, #0]
	data_buf[data_buf_ind].index_ref = data_ref;
   1bd74:	4b13      	ldr	r3, [pc, #76]	; (1bdc4 <fn_measure+0x88>)
   1bd76:	781b      	ldrb	r3, [r3, #0]
   1bd78:	0018      	movs	r0, r3
   1bd7a:	4b13      	ldr	r3, [pc, #76]	; (1bdc8 <fn_measure+0x8c>)
   1bd7c:	6819      	ldr	r1, [r3, #0]
   1bd7e:	4b14      	ldr	r3, [pc, #80]	; (1bdd0 <fn_measure+0x94>)
   1bd80:	22a4      	movs	r2, #164	; 0xa4
   1bd82:	4342      	muls	r2, r0
   1bd84:	50d1      	str	r1, [r2, r3]
	//  Take measurement	
	full_measurement(&data_buf[data_buf_ind], true);
   1bd86:	4b0f      	ldr	r3, [pc, #60]	; (1bdc4 <fn_measure+0x88>)
   1bd88:	781b      	ldrb	r3, [r3, #0]
   1bd8a:	001a      	movs	r2, r3
   1bd8c:	23a4      	movs	r3, #164	; 0xa4
   1bd8e:	435a      	muls	r2, r3
   1bd90:	4b0f      	ldr	r3, [pc, #60]	; (1bdd0 <fn_measure+0x94>)
   1bd92:	18d3      	adds	r3, r2, r3
   1bd94:	2101      	movs	r1, #1
   1bd96:	0018      	movs	r0, r3
   1bd98:	4b0e      	ldr	r3, [pc, #56]	; (1bdd4 <fn_measure+0x98>)
   1bd9a:	4798      	blx	r3
	//  Save data to SD card
	save_measurement(&data_buf[data_buf_ind]);
   1bd9c:	4b09      	ldr	r3, [pc, #36]	; (1bdc4 <fn_measure+0x88>)
   1bd9e:	781b      	ldrb	r3, [r3, #0]
   1bda0:	001a      	movs	r2, r3
   1bda2:	23a4      	movs	r3, #164	; 0xa4
   1bda4:	435a      	muls	r2, r3
   1bda6:	4b0a      	ldr	r3, [pc, #40]	; (1bdd0 <fn_measure+0x94>)
   1bda8:	18d3      	adds	r3, r2, r3
   1bdaa:	0018      	movs	r0, r3
   1bdac:	4b0a      	ldr	r3, [pc, #40]	; (1bdd8 <fn_measure+0x9c>)
   1bdae:	4798      	blx	r3
	//  Turn laser module off
	rangefinder_on_off(false);
   1bdb0:	2000      	movs	r0, #0
   1bdb2:	4b0a      	ldr	r3, [pc, #40]	; (1bddc <fn_measure+0xa0>)
   1bdb4:	4798      	blx	r3
	//  Complete measurement function
	current_input = input_state_complete;
   1bdb6:	4b0a      	ldr	r3, [pc, #40]	; (1bde0 <fn_measure+0xa4>)
   1bdb8:	2208      	movs	r2, #8
   1bdba:	701a      	strb	r2, [r3, #0]
}
   1bdbc:	46c0      	nop			; (mov r8, r8)
   1bdbe:	46bd      	mov	sp, r7
   1bdc0:	bd80      	pop	{r7, pc}
   1bdc2:	46c0      	nop			; (mov r8, r8)
   1bdc4:	20000e35 	.word	0x20000e35
   1bdc8:	20000e38 	.word	0x20000e38
   1bdcc:	000003e6 	.word	0x000003e6
   1bdd0:	20002dbc 	.word	0x20002dbc
   1bdd4:	00002d75 	.word	0x00002d75
   1bdd8:	0001b6c9 	.word	0x0001b6c9
   1bddc:	000035a5 	.word	0x000035a5
   1bde0:	20004134 	.word	0x20004134

0001bde4 <fn_aim>:

void fn_aim(void){
   1bde4:	b580      	push	{r7, lr}
   1bde6:	b082      	sub	sp, #8
   1bde8:	af00      	add	r7, sp, #0
	//uint32_t timer_count;
	uint16_t temp_index;
	
	if (state_change) {
   1bdea:	4b13      	ldr	r3, [pc, #76]	; (1be38 <fn_aim+0x54>)
   1bdec:	781b      	ldrb	r3, [r3, #0]
   1bdee:	b2db      	uxtb	r3, r3
   1bdf0:	2b00      	cmp	r3, #0
   1bdf2:	d005      	beq.n	1be00 <fn_aim+0x1c>
		rangefinder_on_off(true);
   1bdf4:	2001      	movs	r0, #1
   1bdf6:	4b11      	ldr	r3, [pc, #68]	; (1be3c <fn_aim+0x58>)
   1bdf8:	4798      	blx	r3
		laser_on_off(true);
   1bdfa:	2001      	movs	r0, #1
   1bdfc:	4b10      	ldr	r3, [pc, #64]	; (1be40 <fn_aim+0x5c>)
   1bdfe:	4798      	blx	r3
	}
	
	
	temp_index = data_buf_ind+1;
   1be00:	4b10      	ldr	r3, [pc, #64]	; (1be44 <fn_aim+0x60>)
   1be02:	781b      	ldrb	r3, [r3, #0]
   1be04:	b29a      	uxth	r2, r3
   1be06:	1dbb      	adds	r3, r7, #6
   1be08:	3201      	adds	r2, #1
   1be0a:	801a      	strh	r2, [r3, #0]
	if(temp_index>=buf_length){temp_index = 0;}
   1be0c:	1dbb      	adds	r3, r7, #6
   1be0e:	881b      	ldrh	r3, [r3, #0]
   1be10:	2b09      	cmp	r3, #9
   1be12:	d902      	bls.n	1be1a <fn_aim+0x36>
   1be14:	1dbb      	adds	r3, r7, #6
   1be16:	2200      	movs	r2, #0
   1be18:	801a      	strh	r2, [r3, #0]
	
	
	quick_measurement(&data_buf[temp_index]);
   1be1a:	1dbb      	adds	r3, r7, #6
   1be1c:	881b      	ldrh	r3, [r3, #0]
   1be1e:	22a4      	movs	r2, #164	; 0xa4
   1be20:	435a      	muls	r2, r3
   1be22:	4b09      	ldr	r3, [pc, #36]	; (1be48 <fn_aim+0x64>)
   1be24:	18d3      	adds	r3, r2, r3
   1be26:	0018      	movs	r0, r3
   1be28:	4b08      	ldr	r3, [pc, #32]	; (1be4c <fn_aim+0x68>)
   1be2a:	4798      	blx	r3
	
	
	print_data_screen();
   1be2c:	4b08      	ldr	r3, [pc, #32]	; (1be50 <fn_aim+0x6c>)
   1be2e:	4798      	blx	r3

}
   1be30:	46c0      	nop			; (mov r8, r8)
   1be32:	46bd      	mov	sp, r7
   1be34:	b002      	add	sp, #8
   1be36:	bd80      	pop	{r7, pc}
   1be38:	200000e8 	.word	0x200000e8
   1be3c:	000035a5 	.word	0x000035a5
   1be40:	000035ed 	.word	0x000035ed
   1be44:	20000e35 	.word	0x20000e35
   1be48:	20002dbc 	.word	0x20002dbc
   1be4c:	00002cf1 	.word	0x00002cf1
   1be50:	0001d3f9 	.word	0x0001d3f9

0001be54 <fn_error_info>:


void fn_error_info(void){
   1be54:	b590      	push	{r4, r7, lr}
   1be56:	b085      	sub	sp, #20
   1be58:	af02      	add	r7, sp, #8
	static uint8_t shot_list_ind;
	static uint8_t nshots;
	uint8_t temp_buf_ind;

	
	if (state_change){ // Perform first time entering function
   1be5a:	4b91      	ldr	r3, [pc, #580]	; (1c0a0 <fn_error_info+0x24c>)
   1be5c:	781b      	ldrb	r3, [r3, #0]
   1be5e:	b2db      	uxtb	r3, r3
   1be60:	2b00      	cmp	r3, #0
   1be62:	d046      	beq.n	1bef2 <fn_error_info+0x9e>
		// Build list of indexes of bad shots
		shot_list_ind = 0;
   1be64:	4b8f      	ldr	r3, [pc, #572]	; (1c0a4 <fn_error_info+0x250>)
   1be66:	2200      	movs	r2, #0
   1be68:	701a      	strb	r2, [r3, #0]
		nshots = 0;
   1be6a:	4b8f      	ldr	r3, [pc, #572]	; (1c0a8 <fn_error_info+0x254>)
   1be6c:	2200      	movs	r2, #0
   1be6e:	701a      	strb	r2, [r3, #0]
		temp_buf_ind = data_buf_ind;
   1be70:	1dbb      	adds	r3, r7, #6
   1be72:	4a8e      	ldr	r2, [pc, #568]	; (1c0ac <fn_error_info+0x258>)
   1be74:	7812      	ldrb	r2, [r2, #0]
   1be76:	701a      	strb	r2, [r3, #0]
		for (i=0;i<buf_length;i++){
   1be78:	1dfb      	adds	r3, r7, #7
   1be7a:	2200      	movs	r2, #0
   1be7c:	701a      	strb	r2, [r3, #0]
   1be7e:	e02e      	b.n	1bede <fn_error_info+0x8a>
			if (data_buf[temp_buf_ind].num_errors>0){
   1be80:	1dbb      	adds	r3, r7, #6
   1be82:	781b      	ldrb	r3, [r3, #0]
   1be84:	4a8a      	ldr	r2, [pc, #552]	; (1c0b0 <fn_error_info+0x25c>)
   1be86:	21a4      	movs	r1, #164	; 0xa4
   1be88:	434b      	muls	r3, r1
   1be8a:	18d3      	adds	r3, r2, r3
   1be8c:	3358      	adds	r3, #88	; 0x58
   1be8e:	681b      	ldr	r3, [r3, #0]
   1be90:	2b00      	cmp	r3, #0
   1be92:	d012      	beq.n	1beba <fn_error_info+0x66>
				//  Add shot to list
				shot_list[shot_list_ind] = temp_buf_ind;
   1be94:	4b83      	ldr	r3, [pc, #524]	; (1c0a4 <fn_error_info+0x250>)
   1be96:	781b      	ldrb	r3, [r3, #0]
   1be98:	0019      	movs	r1, r3
   1be9a:	4b86      	ldr	r3, [pc, #536]	; (1c0b4 <fn_error_info+0x260>)
   1be9c:	1dba      	adds	r2, r7, #6
   1be9e:	7812      	ldrb	r2, [r2, #0]
   1bea0:	545a      	strb	r2, [r3, r1]
				shot_list_ind++;
   1bea2:	4b80      	ldr	r3, [pc, #512]	; (1c0a4 <fn_error_info+0x250>)
   1bea4:	781b      	ldrb	r3, [r3, #0]
   1bea6:	3301      	adds	r3, #1
   1bea8:	b2da      	uxtb	r2, r3
   1beaa:	4b7e      	ldr	r3, [pc, #504]	; (1c0a4 <fn_error_info+0x250>)
   1beac:	701a      	strb	r2, [r3, #0]
				nshots++;
   1beae:	4b7e      	ldr	r3, [pc, #504]	; (1c0a8 <fn_error_info+0x254>)
   1beb0:	781b      	ldrb	r3, [r3, #0]
   1beb2:	3301      	adds	r3, #1
   1beb4:	b2da      	uxtb	r2, r3
   1beb6:	4b7c      	ldr	r3, [pc, #496]	; (1c0a8 <fn_error_info+0x254>)
   1beb8:	701a      	strb	r2, [r3, #0]
			}
			
			if (temp_buf_ind == 0){ temp_buf_ind = buf_length-1;}//  Buffer wrap-around
   1beba:	1dbb      	adds	r3, r7, #6
   1bebc:	781b      	ldrb	r3, [r3, #0]
   1bebe:	2b00      	cmp	r3, #0
   1bec0:	d103      	bne.n	1beca <fn_error_info+0x76>
   1bec2:	1dbb      	adds	r3, r7, #6
   1bec4:	2209      	movs	r2, #9
   1bec6:	701a      	strb	r2, [r3, #0]
   1bec8:	e004      	b.n	1bed4 <fn_error_info+0x80>
			else {temp_buf_ind--;}
   1beca:	1dbb      	adds	r3, r7, #6
   1becc:	781a      	ldrb	r2, [r3, #0]
   1bece:	1dbb      	adds	r3, r7, #6
   1bed0:	3a01      	subs	r2, #1
   1bed2:	701a      	strb	r2, [r3, #0]
		for (i=0;i<buf_length;i++){
   1bed4:	1dfb      	adds	r3, r7, #7
   1bed6:	781a      	ldrb	r2, [r3, #0]
   1bed8:	1dfb      	adds	r3, r7, #7
   1beda:	3201      	adds	r2, #1
   1bedc:	701a      	strb	r2, [r3, #0]
   1bede:	1dfb      	adds	r3, r7, #7
   1bee0:	781b      	ldrb	r3, [r3, #0]
   1bee2:	2b09      	cmp	r3, #9
   1bee4:	d9cc      	bls.n	1be80 <fn_error_info+0x2c>
		}
		
		shot_list_ind = 0;
   1bee6:	4b6f      	ldr	r3, [pc, #444]	; (1c0a4 <fn_error_info+0x250>)
   1bee8:	2200      	movs	r2, #0
   1beea:	701a      	strb	r2, [r3, #0]

		last_input = input_none;
   1beec:	4b72      	ldr	r3, [pc, #456]	; (1c0b8 <fn_error_info+0x264>)
   1beee:	2200      	movs	r2, #0
   1bef0:	701a      	strb	r2, [r3, #0]
	}
	// Button Handler
	switch(last_input){
   1bef2:	4b71      	ldr	r3, [pc, #452]	; (1c0b8 <fn_error_info+0x264>)
   1bef4:	781b      	ldrb	r3, [r3, #0]
   1bef6:	b2db      	uxtb	r3, r3
   1bef8:	2b03      	cmp	r3, #3
   1befa:	d00e      	beq.n	1bf1a <fn_error_info+0xc6>
   1befc:	2b04      	cmp	r3, #4
   1befe:	d019      	beq.n	1bf34 <fn_error_info+0xe0>
   1bf00:	2b02      	cmp	r3, #2
   1bf02:	d11c      	bne.n	1bf3e <fn_error_info+0xea>
		case input_button2:
		if(shot_list_ind>0){
   1bf04:	4b67      	ldr	r3, [pc, #412]	; (1c0a4 <fn_error_info+0x250>)
   1bf06:	781b      	ldrb	r3, [r3, #0]
   1bf08:	2b00      	cmp	r3, #0
   1bf0a:	d015      	beq.n	1bf38 <fn_error_info+0xe4>
			shot_list_ind--;
   1bf0c:	4b65      	ldr	r3, [pc, #404]	; (1c0a4 <fn_error_info+0x250>)
   1bf0e:	781b      	ldrb	r3, [r3, #0]
   1bf10:	3b01      	subs	r3, #1
   1bf12:	b2da      	uxtb	r2, r3
   1bf14:	4b63      	ldr	r3, [pc, #396]	; (1c0a4 <fn_error_info+0x250>)
   1bf16:	701a      	strb	r2, [r3, #0]
		}
		break;
   1bf18:	e00e      	b.n	1bf38 <fn_error_info+0xe4>
		case input_button3:
		if(shot_list_ind<nshots){
   1bf1a:	4b62      	ldr	r3, [pc, #392]	; (1c0a4 <fn_error_info+0x250>)
   1bf1c:	781a      	ldrb	r2, [r3, #0]
   1bf1e:	4b62      	ldr	r3, [pc, #392]	; (1c0a8 <fn_error_info+0x254>)
   1bf20:	781b      	ldrb	r3, [r3, #0]
   1bf22:	429a      	cmp	r2, r3
   1bf24:	d20a      	bcs.n	1bf3c <fn_error_info+0xe8>
			shot_list_ind++;
   1bf26:	4b5f      	ldr	r3, [pc, #380]	; (1c0a4 <fn_error_info+0x250>)
   1bf28:	781b      	ldrb	r3, [r3, #0]
   1bf2a:	3301      	adds	r3, #1
   1bf2c:	b2da      	uxtb	r2, r3
   1bf2e:	4b5d      	ldr	r3, [pc, #372]	; (1c0a4 <fn_error_info+0x250>)
   1bf30:	701a      	strb	r2, [r3, #0]
		}
		break;
   1bf32:	e003      	b.n	1bf3c <fn_error_info+0xe8>
		case input_button4:
		//  Exit back to main screen, handled in state machine
		break;
   1bf34:	46c0      	nop			; (mov r8, r8)
   1bf36:	e002      	b.n	1bf3e <fn_error_info+0xea>
		break;
   1bf38:	46c0      	nop			; (mov r8, r8)
   1bf3a:	e000      	b.n	1bf3e <fn_error_info+0xea>
		break;
   1bf3c:	46c0      	nop			; (mov r8, r8)
	}
	
	
	// Display
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1bf3e:	485f      	ldr	r0, [pc, #380]	; (1c0bc <fn_error_info+0x268>)
   1bf40:	237f      	movs	r3, #127	; 0x7f
   1bf42:	9300      	str	r3, [sp, #0]
   1bf44:	2320      	movs	r3, #32
   1bf46:	2207      	movs	r2, #7
   1bf48:	2105      	movs	r1, #5
   1bf4a:	4c5d      	ldr	r4, [pc, #372]	; (1c0c0 <fn_error_info+0x26c>)
   1bf4c:	47a0      	blx	r4
	glcd_clear_buffer();
   1bf4e:	4b5d      	ldr	r3, [pc, #372]	; (1c0c4 <fn_error_info+0x270>)
   1bf50:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Error Information:");
   1bf52:	4a5d      	ldr	r2, [pc, #372]	; (1c0c8 <fn_error_info+0x274>)
   1bf54:	4b5d      	ldr	r3, [pc, #372]	; (1c0cc <fn_error_info+0x278>)
   1bf56:	0010      	movs	r0, r2
   1bf58:	0019      	movs	r1, r3
   1bf5a:	2313      	movs	r3, #19
   1bf5c:	001a      	movs	r2, r3
   1bf5e:	4b5c      	ldr	r3, [pc, #368]	; (1c0d0 <fn_error_info+0x27c>)
   1bf60:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1bf62:	4b59      	ldr	r3, [pc, #356]	; (1c0c8 <fn_error_info+0x274>)
   1bf64:	001a      	movs	r2, r3
   1bf66:	2100      	movs	r1, #0
   1bf68:	2000      	movs	r0, #0
   1bf6a:	4b5a      	ldr	r3, [pc, #360]	; (1c0d4 <fn_error_info+0x280>)
   1bf6c:	4798      	blx	r3
	// Display soft keys
	sprintf(display_str, "Back");
   1bf6e:	4a56      	ldr	r2, [pc, #344]	; (1c0c8 <fn_error_info+0x274>)
   1bf70:	4b59      	ldr	r3, [pc, #356]	; (1c0d8 <fn_error_info+0x284>)
   1bf72:	0010      	movs	r0, r2
   1bf74:	0019      	movs	r1, r3
   1bf76:	2305      	movs	r3, #5
   1bf78:	001a      	movs	r2, r3
   1bf7a:	4b55      	ldr	r3, [pc, #340]	; (1c0d0 <fn_error_info+0x27c>)
   1bf7c:	4798      	blx	r3
	glcd_tiny_draw_string(90,7,display_str);
   1bf7e:	4b52      	ldr	r3, [pc, #328]	; (1c0c8 <fn_error_info+0x274>)
   1bf80:	001a      	movs	r2, r3
   1bf82:	2107      	movs	r1, #7
   1bf84:	205a      	movs	r0, #90	; 0x5a
   1bf86:	4b53      	ldr	r3, [pc, #332]	; (1c0d4 <fn_error_info+0x280>)
   1bf88:	4798      	blx	r3
	if(shot_list_ind>0){draw_arrows(2);}
   1bf8a:	4b46      	ldr	r3, [pc, #280]	; (1c0a4 <fn_error_info+0x250>)
   1bf8c:	781b      	ldrb	r3, [r3, #0]
   1bf8e:	2b00      	cmp	r3, #0
   1bf90:	d002      	beq.n	1bf98 <fn_error_info+0x144>
   1bf92:	2002      	movs	r0, #2
   1bf94:	4b51      	ldr	r3, [pc, #324]	; (1c0dc <fn_error_info+0x288>)
   1bf96:	4798      	blx	r3
	if(shot_list_ind<nshots){draw_arrows(3);}
   1bf98:	4b42      	ldr	r3, [pc, #264]	; (1c0a4 <fn_error_info+0x250>)
   1bf9a:	781a      	ldrb	r2, [r3, #0]
   1bf9c:	4b42      	ldr	r3, [pc, #264]	; (1c0a8 <fn_error_info+0x254>)
   1bf9e:	781b      	ldrb	r3, [r3, #0]
   1bfa0:	429a      	cmp	r2, r3
   1bfa2:	d202      	bcs.n	1bfaa <fn_error_info+0x156>
   1bfa4:	2003      	movs	r0, #3
   1bfa6:	4b4d      	ldr	r3, [pc, #308]	; (1c0dc <fn_error_info+0x288>)
   1bfa8:	4798      	blx	r3
	
	if(nshots<= shot_list_ind){//  display null message
   1bfaa:	4b3f      	ldr	r3, [pc, #252]	; (1c0a8 <fn_error_info+0x254>)
   1bfac:	781a      	ldrb	r2, [r3, #0]
   1bfae:	4b3d      	ldr	r3, [pc, #244]	; (1c0a4 <fn_error_info+0x250>)
   1bfb0:	781b      	ldrb	r3, [r3, #0]
   1bfb2:	429a      	cmp	r2, r3
   1bfb4:	d828      	bhi.n	1c008 <fn_error_info+0x1b4>
		sprintf(display_str,"No Additional Errors");
   1bfb6:	4a44      	ldr	r2, [pc, #272]	; (1c0c8 <fn_error_info+0x274>)
   1bfb8:	4b49      	ldr	r3, [pc, #292]	; (1c0e0 <fn_error_info+0x28c>)
   1bfba:	0010      	movs	r0, r2
   1bfbc:	0019      	movs	r1, r3
   1bfbe:	2315      	movs	r3, #21
   1bfc0:	001a      	movs	r2, r3
   1bfc2:	4b43      	ldr	r3, [pc, #268]	; (1c0d0 <fn_error_info+0x27c>)
   1bfc4:	4798      	blx	r3
		glcd_tiny_draw_string(8,1,display_str);
   1bfc6:	4b40      	ldr	r3, [pc, #256]	; (1c0c8 <fn_error_info+0x274>)
   1bfc8:	001a      	movs	r2, r3
   1bfca:	2101      	movs	r1, #1
   1bfcc:	2008      	movs	r0, #8
   1bfce:	4b41      	ldr	r3, [pc, #260]	; (1c0d4 <fn_error_info+0x280>)
   1bfd0:	4798      	blx	r3
		sprintf(display_str,"to Report in Last");
   1bfd2:	4a3d      	ldr	r2, [pc, #244]	; (1c0c8 <fn_error_info+0x274>)
   1bfd4:	4b43      	ldr	r3, [pc, #268]	; (1c0e4 <fn_error_info+0x290>)
   1bfd6:	0010      	movs	r0, r2
   1bfd8:	0019      	movs	r1, r3
   1bfda:	2312      	movs	r3, #18
   1bfdc:	001a      	movs	r2, r3
   1bfde:	4b3c      	ldr	r3, [pc, #240]	; (1c0d0 <fn_error_info+0x27c>)
   1bfe0:	4798      	blx	r3
		glcd_tiny_draw_string(8,2,display_str);
   1bfe2:	4b39      	ldr	r3, [pc, #228]	; (1c0c8 <fn_error_info+0x274>)
   1bfe4:	001a      	movs	r2, r3
   1bfe6:	2102      	movs	r1, #2
   1bfe8:	2008      	movs	r0, #8
   1bfea:	4b3a      	ldr	r3, [pc, #232]	; (1c0d4 <fn_error_info+0x280>)
   1bfec:	4798      	blx	r3
		sprintf(display_str,"%d Measurements", buf_length);
   1bfee:	493e      	ldr	r1, [pc, #248]	; (1c0e8 <fn_error_info+0x294>)
   1bff0:	4b35      	ldr	r3, [pc, #212]	; (1c0c8 <fn_error_info+0x274>)
   1bff2:	220a      	movs	r2, #10
   1bff4:	0018      	movs	r0, r3
   1bff6:	4b3d      	ldr	r3, [pc, #244]	; (1c0ec <fn_error_info+0x298>)
   1bff8:	4798      	blx	r3
		glcd_tiny_draw_string(8,3,display_str);
   1bffa:	4b33      	ldr	r3, [pc, #204]	; (1c0c8 <fn_error_info+0x274>)
   1bffc:	001a      	movs	r2, r3
   1bffe:	2103      	movs	r1, #3
   1c000:	2008      	movs	r0, #8
   1c002:	4b34      	ldr	r3, [pc, #208]	; (1c0d4 <fn_error_info+0x280>)
   1c004:	4798      	blx	r3
   1c006:	e044      	b.n	1c092 <fn_error_info+0x23e>
		}else{
		temp_buf_ind = shot_list[shot_list_ind];
   1c008:	4b26      	ldr	r3, [pc, #152]	; (1c0a4 <fn_error_info+0x250>)
   1c00a:	781b      	ldrb	r3, [r3, #0]
   1c00c:	0019      	movs	r1, r3
   1c00e:	1dbb      	adds	r3, r7, #6
   1c010:	4a28      	ldr	r2, [pc, #160]	; (1c0b4 <fn_error_info+0x260>)
   1c012:	5c52      	ldrb	r2, [r2, r1]
   1c014:	701a      	strb	r2, [r3, #0]
		sprintf(display_str,"Measurement %d", data_buf[temp_buf_ind].index_ref);
   1c016:	1dbb      	adds	r3, r7, #6
   1c018:	781a      	ldrb	r2, [r3, #0]
   1c01a:	4b25      	ldr	r3, [pc, #148]	; (1c0b0 <fn_error_info+0x25c>)
   1c01c:	21a4      	movs	r1, #164	; 0xa4
   1c01e:	434a      	muls	r2, r1
   1c020:	58d2      	ldr	r2, [r2, r3]
   1c022:	4933      	ldr	r1, [pc, #204]	; (1c0f0 <fn_error_info+0x29c>)
   1c024:	4b28      	ldr	r3, [pc, #160]	; (1c0c8 <fn_error_info+0x274>)
   1c026:	0018      	movs	r0, r3
   1c028:	4b30      	ldr	r3, [pc, #192]	; (1c0ec <fn_error_info+0x298>)
   1c02a:	4798      	blx	r3
		glcd_tiny_draw_string(0,1,display_str);
   1c02c:	4b26      	ldr	r3, [pc, #152]	; (1c0c8 <fn_error_info+0x274>)
   1c02e:	001a      	movs	r2, r3
   1c030:	2101      	movs	r1, #1
   1c032:	2000      	movs	r0, #0
   1c034:	4b27      	ldr	r3, [pc, #156]	; (1c0d4 <fn_error_info+0x280>)
   1c036:	4798      	blx	r3
		for (i=0;i<min(5, data_buf[temp_buf_ind].num_errors); i++){
   1c038:	1dfb      	adds	r3, r7, #7
   1c03a:	2200      	movs	r2, #0
   1c03c:	701a      	strb	r2, [r3, #0]
   1c03e:	e019      	b.n	1c074 <fn_error_info+0x220>
			gen_err_message(display_str, &data_buf[temp_buf_ind], i);
   1c040:	1dbb      	adds	r3, r7, #6
   1c042:	781b      	ldrb	r3, [r3, #0]
   1c044:	22a4      	movs	r2, #164	; 0xa4
   1c046:	435a      	muls	r2, r3
   1c048:	4b19      	ldr	r3, [pc, #100]	; (1c0b0 <fn_error_info+0x25c>)
   1c04a:	18d1      	adds	r1, r2, r3
   1c04c:	1dfb      	adds	r3, r7, #7
   1c04e:	781a      	ldrb	r2, [r3, #0]
   1c050:	4b1d      	ldr	r3, [pc, #116]	; (1c0c8 <fn_error_info+0x274>)
   1c052:	0018      	movs	r0, r3
   1c054:	4b27      	ldr	r3, [pc, #156]	; (1c0f4 <fn_error_info+0x2a0>)
   1c056:	4798      	blx	r3
			glcd_tiny_draw_string(0,i+2,display_str);
   1c058:	1dfb      	adds	r3, r7, #7
   1c05a:	781b      	ldrb	r3, [r3, #0]
   1c05c:	3302      	adds	r3, #2
   1c05e:	b2db      	uxtb	r3, r3
   1c060:	4a19      	ldr	r2, [pc, #100]	; (1c0c8 <fn_error_info+0x274>)
   1c062:	0019      	movs	r1, r3
   1c064:	2000      	movs	r0, #0
   1c066:	4b1b      	ldr	r3, [pc, #108]	; (1c0d4 <fn_error_info+0x280>)
   1c068:	4798      	blx	r3
		for (i=0;i<min(5, data_buf[temp_buf_ind].num_errors); i++){
   1c06a:	1dfb      	adds	r3, r7, #7
   1c06c:	781a      	ldrb	r2, [r3, #0]
   1c06e:	1dfb      	adds	r3, r7, #7
   1c070:	3201      	adds	r2, #1
   1c072:	701a      	strb	r2, [r3, #0]
   1c074:	1dfb      	adds	r3, r7, #7
   1c076:	781a      	ldrb	r2, [r3, #0]
   1c078:	1dbb      	adds	r3, r7, #6
   1c07a:	781b      	ldrb	r3, [r3, #0]
   1c07c:	490c      	ldr	r1, [pc, #48]	; (1c0b0 <fn_error_info+0x25c>)
   1c07e:	20a4      	movs	r0, #164	; 0xa4
   1c080:	4343      	muls	r3, r0
   1c082:	18cb      	adds	r3, r1, r3
   1c084:	3358      	adds	r3, #88	; 0x58
   1c086:	681b      	ldr	r3, [r3, #0]
   1c088:	2b05      	cmp	r3, #5
   1c08a:	d900      	bls.n	1c08e <fn_error_info+0x23a>
   1c08c:	2305      	movs	r3, #5
   1c08e:	429a      	cmp	r2, r3
   1c090:	d3d6      	bcc.n	1c040 <fn_error_info+0x1ec>
		}
		
	}
	
	glcd_write();
   1c092:	4b19      	ldr	r3, [pc, #100]	; (1c0f8 <fn_error_info+0x2a4>)
   1c094:	4798      	blx	r3
}
   1c096:	46c0      	nop			; (mov r8, r8)
   1c098:	46bd      	mov	sp, r7
   1c09a:	b003      	add	sp, #12
   1c09c:	bd90      	pop	{r4, r7, pc}
   1c09e:	46c0      	nop			; (mov r8, r8)
   1c0a0:	200000e8 	.word	0x200000e8
   1c0a4:	20000e3d 	.word	0x20000e3d
   1c0a8:	20000e3e 	.word	0x20000e3e
   1c0ac:	20000e35 	.word	0x20000e35
   1c0b0:	20002dbc 	.word	0x20002dbc
   1c0b4:	20000e40 	.word	0x20000e40
   1c0b8:	20004136 	.word	0x20004136
   1c0bc:	00028b80 	.word	0x00028b80
   1c0c0:	00015f85 	.word	0x00015f85
   1c0c4:	00015025 	.word	0x00015025
   1c0c8:	20003534 	.word	0x20003534
   1c0cc:	0002952c 	.word	0x0002952c
   1c0d0:	00023c19 	.word	0x00023c19
   1c0d4:	00016111 	.word	0x00016111
   1c0d8:	00029540 	.word	0x00029540
   1c0dc:	0001d8c1 	.word	0x0001d8c1
   1c0e0:	00029548 	.word	0x00029548
   1c0e4:	00029560 	.word	0x00029560
   1c0e8:	00029574 	.word	0x00029574
   1c0ec:	00023d31 	.word	0x00023d31
   1c0f0:	00029584 	.word	0x00029584
   1c0f4:	00003c95 	.word	0x00003c95
   1c0f8:	00015869 	.word	0x00015869

0001c0fc <fn_menu1>:


void fn_menu1(void){
   1c0fc:	b590      	push	{r4, r7, lr}
   1c0fe:	b083      	sub	sp, #12
   1c100:	af02      	add	r7, sp, #8
	
	if (state_change){
   1c102:	4b86      	ldr	r3, [pc, #536]	; (1c31c <fn_menu1+0x220>)
   1c104:	781b      	ldrb	r3, [r3, #0]
   1c106:	b2db      	uxtb	r3, r3
   1c108:	2b00      	cmp	r3, #0
   1c10a:	d00b      	beq.n	1c124 <fn_menu1+0x28>
		cur_Y=1;
   1c10c:	4b84      	ldr	r3, [pc, #528]	; (1c320 <fn_menu1+0x224>)
   1c10e:	2201      	movs	r2, #1
   1c110:	601a      	str	r2, [r3, #0]
		cur_Y_low=1;
   1c112:	4b84      	ldr	r3, [pc, #528]	; (1c324 <fn_menu1+0x228>)
   1c114:	2201      	movs	r2, #1
   1c116:	601a      	str	r2, [r3, #0]
		cur_Y_high=6;
   1c118:	4b83      	ldr	r3, [pc, #524]	; (1c328 <fn_menu1+0x22c>)
   1c11a:	2206      	movs	r2, #6
   1c11c:	601a      	str	r2, [r3, #0]
		last_input = input_none;
   1c11e:	4b83      	ldr	r3, [pc, #524]	; (1c32c <fn_menu1+0x230>)
   1c120:	2200      	movs	r2, #0
   1c122:	701a      	strb	r2, [r3, #0]
	}
	
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1c124:	4882      	ldr	r0, [pc, #520]	; (1c330 <fn_menu1+0x234>)
   1c126:	237f      	movs	r3, #127	; 0x7f
   1c128:	9300      	str	r3, [sp, #0]
   1c12a:	2320      	movs	r3, #32
   1c12c:	2207      	movs	r2, #7
   1c12e:	2105      	movs	r1, #5
   1c130:	4c80      	ldr	r4, [pc, #512]	; (1c334 <fn_menu1+0x238>)
   1c132:	47a0      	blx	r4
	glcd_clear_buffer();
   1c134:	4b80      	ldr	r3, [pc, #512]	; (1c338 <fn_menu1+0x23c>)
   1c136:	4798      	blx	r3
	
	//  Button Handler
	switch(last_input){
   1c138:	4b7c      	ldr	r3, [pc, #496]	; (1c32c <fn_menu1+0x230>)
   1c13a:	781b      	ldrb	r3, [r3, #0]
   1c13c:	b2db      	uxtb	r3, r3
   1c13e:	2b02      	cmp	r3, #2
   1c140:	d004      	beq.n	1c14c <fn_menu1+0x50>
   1c142:	2b03      	cmp	r3, #3
   1c144:	d00e      	beq.n	1c164 <fn_menu1+0x68>
   1c146:	2b01      	cmp	r3, #1
   1c148:	d018      	beq.n	1c17c <fn_menu1+0x80>
   1c14a:	e04c      	b.n	1c1e6 <fn_menu1+0xea>
		case input_button2:
			if(cur_Y > cur_Y_low){--cur_Y; }
   1c14c:	4b74      	ldr	r3, [pc, #464]	; (1c320 <fn_menu1+0x224>)
   1c14e:	681a      	ldr	r2, [r3, #0]
   1c150:	4b74      	ldr	r3, [pc, #464]	; (1c324 <fn_menu1+0x228>)
   1c152:	681b      	ldr	r3, [r3, #0]
   1c154:	429a      	cmp	r2, r3
   1c156:	dd41      	ble.n	1c1dc <fn_menu1+0xe0>
   1c158:	4b71      	ldr	r3, [pc, #452]	; (1c320 <fn_menu1+0x224>)
   1c15a:	681b      	ldr	r3, [r3, #0]
   1c15c:	1e5a      	subs	r2, r3, #1
   1c15e:	4b70      	ldr	r3, [pc, #448]	; (1c320 <fn_menu1+0x224>)
   1c160:	601a      	str	r2, [r3, #0]
			break;
   1c162:	e03b      	b.n	1c1dc <fn_menu1+0xe0>
		case input_button3:
			if(cur_Y < cur_Y_high){++cur_Y; }
   1c164:	4b6e      	ldr	r3, [pc, #440]	; (1c320 <fn_menu1+0x224>)
   1c166:	681a      	ldr	r2, [r3, #0]
   1c168:	4b6f      	ldr	r3, [pc, #444]	; (1c328 <fn_menu1+0x22c>)
   1c16a:	681b      	ldr	r3, [r3, #0]
   1c16c:	429a      	cmp	r2, r3
   1c16e:	da37      	bge.n	1c1e0 <fn_menu1+0xe4>
   1c170:	4b6b      	ldr	r3, [pc, #428]	; (1c320 <fn_menu1+0x224>)
   1c172:	681b      	ldr	r3, [r3, #0]
   1c174:	1c5a      	adds	r2, r3, #1
   1c176:	4b6a      	ldr	r3, [pc, #424]	; (1c320 <fn_menu1+0x224>)
   1c178:	601a      	str	r2, [r3, #0]
			break;
   1c17a:	e031      	b.n	1c1e0 <fn_menu1+0xe4>
		case input_button1:
			if(cur_Y == 1){ // Options
   1c17c:	4b68      	ldr	r3, [pc, #416]	; (1c320 <fn_menu1+0x224>)
   1c17e:	681b      	ldr	r3, [r3, #0]
   1c180:	2b01      	cmp	r3, #1
   1c182:	d103      	bne.n	1c18c <fn_menu1+0x90>
				current_input = input_set_units;
   1c184:	4b6d      	ldr	r3, [pc, #436]	; (1c33c <fn_menu1+0x240>)
   1c186:	220b      	movs	r2, #11
   1c188:	701a      	strb	r2, [r3, #0]
			} else if (cur_Y==5){ //  Bluetooth
				current_input = input_set_bluetooth;
			} else if (cur_Y==6){ // Debug
				current_input = input_menu_debug;
			}
			break;
   1c18a:	e02b      	b.n	1c1e4 <fn_menu1+0xe8>
			} else if (cur_Y==2){// Error Info
   1c18c:	4b64      	ldr	r3, [pc, #400]	; (1c320 <fn_menu1+0x224>)
   1c18e:	681b      	ldr	r3, [r3, #0]
   1c190:	2b02      	cmp	r3, #2
   1c192:	d103      	bne.n	1c19c <fn_menu1+0xa0>
				current_input = input_error_info;
   1c194:	4b69      	ldr	r3, [pc, #420]	; (1c33c <fn_menu1+0x240>)
   1c196:	220c      	movs	r2, #12
   1c198:	701a      	strb	r2, [r3, #0]
			break;
   1c19a:	e023      	b.n	1c1e4 <fn_menu1+0xe8>
			} else if (cur_Y==3){ // Calibration
   1c19c:	4b60      	ldr	r3, [pc, #384]	; (1c320 <fn_menu1+0x224>)
   1c19e:	681b      	ldr	r3, [r3, #0]
   1c1a0:	2b03      	cmp	r3, #3
   1c1a2:	d103      	bne.n	1c1ac <fn_menu1+0xb0>
				current_input = input_cal_menu;
   1c1a4:	4b65      	ldr	r3, [pc, #404]	; (1c33c <fn_menu1+0x240>)
   1c1a6:	220d      	movs	r2, #13
   1c1a8:	701a      	strb	r2, [r3, #0]
			break;
   1c1aa:	e01b      	b.n	1c1e4 <fn_menu1+0xe8>
			} else if (cur_Y==4){ // Set Clock
   1c1ac:	4b5c      	ldr	r3, [pc, #368]	; (1c320 <fn_menu1+0x224>)
   1c1ae:	681b      	ldr	r3, [r3, #0]
   1c1b0:	2b04      	cmp	r3, #4
   1c1b2:	d103      	bne.n	1c1bc <fn_menu1+0xc0>
				current_input = input_set_clock;
   1c1b4:	4b61      	ldr	r3, [pc, #388]	; (1c33c <fn_menu1+0x240>)
   1c1b6:	2209      	movs	r2, #9
   1c1b8:	701a      	strb	r2, [r3, #0]
			break;
   1c1ba:	e013      	b.n	1c1e4 <fn_menu1+0xe8>
			} else if (cur_Y==5){ //  Bluetooth
   1c1bc:	4b58      	ldr	r3, [pc, #352]	; (1c320 <fn_menu1+0x224>)
   1c1be:	681b      	ldr	r3, [r3, #0]
   1c1c0:	2b05      	cmp	r3, #5
   1c1c2:	d103      	bne.n	1c1cc <fn_menu1+0xd0>
				current_input = input_set_bluetooth;
   1c1c4:	4b5d      	ldr	r3, [pc, #372]	; (1c33c <fn_menu1+0x240>)
   1c1c6:	220a      	movs	r2, #10
   1c1c8:	701a      	strb	r2, [r3, #0]
			break;
   1c1ca:	e00b      	b.n	1c1e4 <fn_menu1+0xe8>
			} else if (cur_Y==6){ // Debug
   1c1cc:	4b54      	ldr	r3, [pc, #336]	; (1c320 <fn_menu1+0x224>)
   1c1ce:	681b      	ldr	r3, [r3, #0]
   1c1d0:	2b06      	cmp	r3, #6
   1c1d2:	d107      	bne.n	1c1e4 <fn_menu1+0xe8>
				current_input = input_menu_debug;
   1c1d4:	4b59      	ldr	r3, [pc, #356]	; (1c33c <fn_menu1+0x240>)
   1c1d6:	2217      	movs	r2, #23
   1c1d8:	701a      	strb	r2, [r3, #0]
			break;
   1c1da:	e003      	b.n	1c1e4 <fn_menu1+0xe8>
			break;
   1c1dc:	46c0      	nop			; (mov r8, r8)
   1c1de:	e002      	b.n	1c1e6 <fn_menu1+0xea>
			break;
   1c1e0:	46c0      	nop			; (mov r8, r8)
   1c1e2:	e000      	b.n	1c1e6 <fn_menu1+0xea>
			break;
   1c1e4:	46c0      	nop			; (mov r8, r8)
	}
	
	//print soft key text
	draw_arrows(2);//  Draw up arrow at button 2
   1c1e6:	2002      	movs	r0, #2
   1c1e8:	4b55      	ldr	r3, [pc, #340]	; (1c340 <fn_menu1+0x244>)
   1c1ea:	4798      	blx	r3
	draw_arrows(3);//  Draw down arrow at button 3
   1c1ec:	2003      	movs	r0, #3
   1c1ee:	4b54      	ldr	r3, [pc, #336]	; (1c340 <fn_menu1+0x244>)
   1c1f0:	4798      	blx	r3
	sprintf(display_str, "Menu:");
   1c1f2:	4a54      	ldr	r2, [pc, #336]	; (1c344 <fn_menu1+0x248>)
   1c1f4:	4b54      	ldr	r3, [pc, #336]	; (1c348 <fn_menu1+0x24c>)
   1c1f6:	0010      	movs	r0, r2
   1c1f8:	0019      	movs	r1, r3
   1c1fa:	2306      	movs	r3, #6
   1c1fc:	001a      	movs	r2, r3
   1c1fe:	4b53      	ldr	r3, [pc, #332]	; (1c34c <fn_menu1+0x250>)
   1c200:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1c202:	4b50      	ldr	r3, [pc, #320]	; (1c344 <fn_menu1+0x248>)
   1c204:	001a      	movs	r2, r3
   1c206:	2100      	movs	r1, #0
   1c208:	2000      	movs	r0, #0
   1c20a:	4b51      	ldr	r3, [pc, #324]	; (1c350 <fn_menu1+0x254>)
   1c20c:	4798      	blx	r3
	sprintf(display_str, "Enter");
   1c20e:	4a4d      	ldr	r2, [pc, #308]	; (1c344 <fn_menu1+0x248>)
   1c210:	4b50      	ldr	r3, [pc, #320]	; (1c354 <fn_menu1+0x258>)
   1c212:	0010      	movs	r0, r2
   1c214:	0019      	movs	r1, r3
   1c216:	2306      	movs	r3, #6
   1c218:	001a      	movs	r2, r3
   1c21a:	4b4c      	ldr	r3, [pc, #304]	; (1c34c <fn_menu1+0x250>)
   1c21c:	4798      	blx	r3
	glcd_tiny_draw_string(96,0,display_str);
   1c21e:	4b49      	ldr	r3, [pc, #292]	; (1c344 <fn_menu1+0x248>)
   1c220:	001a      	movs	r2, r3
   1c222:	2100      	movs	r1, #0
   1c224:	2060      	movs	r0, #96	; 0x60
   1c226:	4b4a      	ldr	r3, [pc, #296]	; (1c350 <fn_menu1+0x254>)
   1c228:	4798      	blx	r3
	sprintf(display_str, "Back");
   1c22a:	4a46      	ldr	r2, [pc, #280]	; (1c344 <fn_menu1+0x248>)
   1c22c:	4b4a      	ldr	r3, [pc, #296]	; (1c358 <fn_menu1+0x25c>)
   1c22e:	0010      	movs	r0, r2
   1c230:	0019      	movs	r1, r3
   1c232:	2305      	movs	r3, #5
   1c234:	001a      	movs	r2, r3
   1c236:	4b45      	ldr	r3, [pc, #276]	; (1c34c <fn_menu1+0x250>)
   1c238:	4798      	blx	r3
	glcd_tiny_draw_string(100,7,display_str);
   1c23a:	4b42      	ldr	r3, [pc, #264]	; (1c344 <fn_menu1+0x248>)
   1c23c:	001a      	movs	r2, r3
   1c23e:	2107      	movs	r1, #7
   1c240:	2064      	movs	r0, #100	; 0x64
   1c242:	4b43      	ldr	r3, [pc, #268]	; (1c350 <fn_menu1+0x254>)
   1c244:	4798      	blx	r3
	
	sprintf(display_str, "Options");
   1c246:	4a3f      	ldr	r2, [pc, #252]	; (1c344 <fn_menu1+0x248>)
   1c248:	4b44      	ldr	r3, [pc, #272]	; (1c35c <fn_menu1+0x260>)
   1c24a:	0010      	movs	r0, r2
   1c24c:	0019      	movs	r1, r3
   1c24e:	2308      	movs	r3, #8
   1c250:	001a      	movs	r2, r3
   1c252:	4b3e      	ldr	r3, [pc, #248]	; (1c34c <fn_menu1+0x250>)
   1c254:	4798      	blx	r3
	glcd_tiny_draw_string(10,1,display_str);
   1c256:	4b3b      	ldr	r3, [pc, #236]	; (1c344 <fn_menu1+0x248>)
   1c258:	001a      	movs	r2, r3
   1c25a:	2101      	movs	r1, #1
   1c25c:	200a      	movs	r0, #10
   1c25e:	4b3c      	ldr	r3, [pc, #240]	; (1c350 <fn_menu1+0x254>)
   1c260:	4798      	blx	r3
	
	sprintf(display_str, "Error Info");
   1c262:	4a38      	ldr	r2, [pc, #224]	; (1c344 <fn_menu1+0x248>)
   1c264:	4b3e      	ldr	r3, [pc, #248]	; (1c360 <fn_menu1+0x264>)
   1c266:	0010      	movs	r0, r2
   1c268:	0019      	movs	r1, r3
   1c26a:	230b      	movs	r3, #11
   1c26c:	001a      	movs	r2, r3
   1c26e:	4b37      	ldr	r3, [pc, #220]	; (1c34c <fn_menu1+0x250>)
   1c270:	4798      	blx	r3
	glcd_tiny_draw_string(10,2,display_str);
   1c272:	4b34      	ldr	r3, [pc, #208]	; (1c344 <fn_menu1+0x248>)
   1c274:	001a      	movs	r2, r3
   1c276:	2102      	movs	r1, #2
   1c278:	200a      	movs	r0, #10
   1c27a:	4b35      	ldr	r3, [pc, #212]	; (1c350 <fn_menu1+0x254>)
   1c27c:	4798      	blx	r3
	
	sprintf(display_str, "Calibration");
   1c27e:	4a31      	ldr	r2, [pc, #196]	; (1c344 <fn_menu1+0x248>)
   1c280:	4b38      	ldr	r3, [pc, #224]	; (1c364 <fn_menu1+0x268>)
   1c282:	0010      	movs	r0, r2
   1c284:	0019      	movs	r1, r3
   1c286:	230c      	movs	r3, #12
   1c288:	001a      	movs	r2, r3
   1c28a:	4b30      	ldr	r3, [pc, #192]	; (1c34c <fn_menu1+0x250>)
   1c28c:	4798      	blx	r3
	glcd_tiny_draw_string(10,3,display_str);
   1c28e:	4b2d      	ldr	r3, [pc, #180]	; (1c344 <fn_menu1+0x248>)
   1c290:	001a      	movs	r2, r3
   1c292:	2103      	movs	r1, #3
   1c294:	200a      	movs	r0, #10
   1c296:	4b2e      	ldr	r3, [pc, #184]	; (1c350 <fn_menu1+0x254>)
   1c298:	4798      	blx	r3
	
	sprintf(display_str, "Set Clock");
   1c29a:	4a2a      	ldr	r2, [pc, #168]	; (1c344 <fn_menu1+0x248>)
   1c29c:	4b32      	ldr	r3, [pc, #200]	; (1c368 <fn_menu1+0x26c>)
   1c29e:	0010      	movs	r0, r2
   1c2a0:	0019      	movs	r1, r3
   1c2a2:	230a      	movs	r3, #10
   1c2a4:	001a      	movs	r2, r3
   1c2a6:	4b29      	ldr	r3, [pc, #164]	; (1c34c <fn_menu1+0x250>)
   1c2a8:	4798      	blx	r3
	glcd_tiny_draw_string(10,4,display_str);
   1c2aa:	4b26      	ldr	r3, [pc, #152]	; (1c344 <fn_menu1+0x248>)
   1c2ac:	001a      	movs	r2, r3
   1c2ae:	2104      	movs	r1, #4
   1c2b0:	200a      	movs	r0, #10
   1c2b2:	4b27      	ldr	r3, [pc, #156]	; (1c350 <fn_menu1+0x254>)
   1c2b4:	4798      	blx	r3
	
	sprintf(display_str, "Bluetooth");
   1c2b6:	4a23      	ldr	r2, [pc, #140]	; (1c344 <fn_menu1+0x248>)
   1c2b8:	4b2c      	ldr	r3, [pc, #176]	; (1c36c <fn_menu1+0x270>)
   1c2ba:	0010      	movs	r0, r2
   1c2bc:	0019      	movs	r1, r3
   1c2be:	230a      	movs	r3, #10
   1c2c0:	001a      	movs	r2, r3
   1c2c2:	4b22      	ldr	r3, [pc, #136]	; (1c34c <fn_menu1+0x250>)
   1c2c4:	4798      	blx	r3
	glcd_tiny_draw_string(10,5,display_str);
   1c2c6:	4b1f      	ldr	r3, [pc, #124]	; (1c344 <fn_menu1+0x248>)
   1c2c8:	001a      	movs	r2, r3
   1c2ca:	2105      	movs	r1, #5
   1c2cc:	200a      	movs	r0, #10
   1c2ce:	4b20      	ldr	r3, [pc, #128]	; (1c350 <fn_menu1+0x254>)
   1c2d0:	4798      	blx	r3
	
	sprintf(display_str, "Debug Menu");
   1c2d2:	4a1c      	ldr	r2, [pc, #112]	; (1c344 <fn_menu1+0x248>)
   1c2d4:	4b26      	ldr	r3, [pc, #152]	; (1c370 <fn_menu1+0x274>)
   1c2d6:	0010      	movs	r0, r2
   1c2d8:	0019      	movs	r1, r3
   1c2da:	230b      	movs	r3, #11
   1c2dc:	001a      	movs	r2, r3
   1c2de:	4b1b      	ldr	r3, [pc, #108]	; (1c34c <fn_menu1+0x250>)
   1c2e0:	4798      	blx	r3
	glcd_tiny_draw_string(10,6,display_str);
   1c2e2:	4b18      	ldr	r3, [pc, #96]	; (1c344 <fn_menu1+0x248>)
   1c2e4:	001a      	movs	r2, r3
   1c2e6:	2106      	movs	r1, #6
   1c2e8:	200a      	movs	r0, #10
   1c2ea:	4b19      	ldr	r3, [pc, #100]	; (1c350 <fn_menu1+0x254>)
   1c2ec:	4798      	blx	r3
	
	
	sprintf(display_str, ">");
   1c2ee:	4a15      	ldr	r2, [pc, #84]	; (1c344 <fn_menu1+0x248>)
   1c2f0:	4b20      	ldr	r3, [pc, #128]	; (1c374 <fn_menu1+0x278>)
   1c2f2:	0010      	movs	r0, r2
   1c2f4:	0019      	movs	r1, r3
   1c2f6:	2302      	movs	r3, #2
   1c2f8:	001a      	movs	r2, r3
   1c2fa:	4b14      	ldr	r3, [pc, #80]	; (1c34c <fn_menu1+0x250>)
   1c2fc:	4798      	blx	r3
	glcd_tiny_draw_string(3, cur_Y,display_str);
   1c2fe:	4b08      	ldr	r3, [pc, #32]	; (1c320 <fn_menu1+0x224>)
   1c300:	681b      	ldr	r3, [r3, #0]
   1c302:	b2db      	uxtb	r3, r3
   1c304:	4a0f      	ldr	r2, [pc, #60]	; (1c344 <fn_menu1+0x248>)
   1c306:	0019      	movs	r1, r3
   1c308:	2003      	movs	r0, #3
   1c30a:	4b11      	ldr	r3, [pc, #68]	; (1c350 <fn_menu1+0x254>)
   1c30c:	4798      	blx	r3
	
	glcd_write();
   1c30e:	4b1a      	ldr	r3, [pc, #104]	; (1c378 <fn_menu1+0x27c>)
   1c310:	4798      	blx	r3
	
}
   1c312:	46c0      	nop			; (mov r8, r8)
   1c314:	46bd      	mov	sp, r7
   1c316:	b001      	add	sp, #4
   1c318:	bd90      	pop	{r4, r7, pc}
   1c31a:	46c0      	nop			; (mov r8, r8)
   1c31c:	200000e8 	.word	0x200000e8
   1c320:	20003494 	.word	0x20003494
   1c324:	2000450c 	.word	0x2000450c
   1c328:	20003fec 	.word	0x20003fec
   1c32c:	20004136 	.word	0x20004136
   1c330:	00028b80 	.word	0x00028b80
   1c334:	00015f85 	.word	0x00015f85
   1c338:	00015025 	.word	0x00015025
   1c33c:	20004134 	.word	0x20004134
   1c340:	0001d8c1 	.word	0x0001d8c1
   1c344:	20003534 	.word	0x20003534
   1c348:	00029594 	.word	0x00029594
   1c34c:	00023c19 	.word	0x00023c19
   1c350:	00016111 	.word	0x00016111
   1c354:	0002959c 	.word	0x0002959c
   1c358:	00029540 	.word	0x00029540
   1c35c:	000295a4 	.word	0x000295a4
   1c360:	000295ac 	.word	0x000295ac
   1c364:	000295b8 	.word	0x000295b8
   1c368:	000295c4 	.word	0x000295c4
   1c36c:	000295d0 	.word	0x000295d0
   1c370:	000295dc 	.word	0x000295dc
   1c374:	000295e8 	.word	0x000295e8
   1c378:	00015869 	.word	0x00015869

0001c37c <fn_menu_debug>:


void fn_menu_debug(void){
   1c37c:	b590      	push	{r4, r7, lr}
   1c37e:	b083      	sub	sp, #12
   1c380:	af02      	add	r7, sp, #8
	//  Set initial conditions
	if (state_change) {
   1c382:	4b62      	ldr	r3, [pc, #392]	; (1c50c <fn_menu_debug+0x190>)
   1c384:	781b      	ldrb	r3, [r3, #0]
   1c386:	b2db      	uxtb	r3, r3
   1c388:	2b00      	cmp	r3, #0
   1c38a:	d008      	beq.n	1c39e <fn_menu_debug+0x22>
		cur_Y = 2;
   1c38c:	4b60      	ldr	r3, [pc, #384]	; (1c510 <fn_menu_debug+0x194>)
   1c38e:	2202      	movs	r2, #2
   1c390:	601a      	str	r2, [r3, #0]
		cur_Y_low = 2;
   1c392:	4b60      	ldr	r3, [pc, #384]	; (1c514 <fn_menu_debug+0x198>)
   1c394:	2202      	movs	r2, #2
   1c396:	601a      	str	r2, [r3, #0]
		cur_Y_high = 4;
   1c398:	4b5f      	ldr	r3, [pc, #380]	; (1c518 <fn_menu_debug+0x19c>)
   1c39a:	2204      	movs	r2, #4
   1c39c:	601a      	str	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   1c39e:	4b5f      	ldr	r3, [pc, #380]	; (1c51c <fn_menu_debug+0x1a0>)
   1c3a0:	781b      	ldrb	r3, [r3, #0]
   1c3a2:	b2db      	uxtb	r3, r3
   1c3a4:	2b02      	cmp	r3, #2
   1c3a6:	d004      	beq.n	1c3b2 <fn_menu_debug+0x36>
   1c3a8:	2b03      	cmp	r3, #3
   1c3aa:	d00e      	beq.n	1c3ca <fn_menu_debug+0x4e>
   1c3ac:	2b01      	cmp	r3, #1
   1c3ae:	d018      	beq.n	1c3e2 <fn_menu_debug+0x66>
   1c3b0:	e032      	b.n	1c418 <fn_menu_debug+0x9c>
		case input_button2:
			if(cur_Y > cur_Y_low){--cur_Y; }
   1c3b2:	4b57      	ldr	r3, [pc, #348]	; (1c510 <fn_menu_debug+0x194>)
   1c3b4:	681a      	ldr	r2, [r3, #0]
   1c3b6:	4b57      	ldr	r3, [pc, #348]	; (1c514 <fn_menu_debug+0x198>)
   1c3b8:	681b      	ldr	r3, [r3, #0]
   1c3ba:	429a      	cmp	r2, r3
   1c3bc:	dd29      	ble.n	1c412 <fn_menu_debug+0x96>
   1c3be:	4b54      	ldr	r3, [pc, #336]	; (1c510 <fn_menu_debug+0x194>)
   1c3c0:	681b      	ldr	r3, [r3, #0]
   1c3c2:	1e5a      	subs	r2, r3, #1
   1c3c4:	4b52      	ldr	r3, [pc, #328]	; (1c510 <fn_menu_debug+0x194>)
   1c3c6:	601a      	str	r2, [r3, #0]
			break;
   1c3c8:	e023      	b.n	1c412 <fn_menu_debug+0x96>
		case input_button3:
			if(cur_Y < cur_Y_high){++cur_Y; }
   1c3ca:	4b51      	ldr	r3, [pc, #324]	; (1c510 <fn_menu_debug+0x194>)
   1c3cc:	681a      	ldr	r2, [r3, #0]
   1c3ce:	4b52      	ldr	r3, [pc, #328]	; (1c518 <fn_menu_debug+0x19c>)
   1c3d0:	681b      	ldr	r3, [r3, #0]
   1c3d2:	429a      	cmp	r2, r3
   1c3d4:	da1f      	bge.n	1c416 <fn_menu_debug+0x9a>
   1c3d6:	4b4e      	ldr	r3, [pc, #312]	; (1c510 <fn_menu_debug+0x194>)
   1c3d8:	681b      	ldr	r3, [r3, #0]
   1c3da:	1c5a      	adds	r2, r3, #1
   1c3dc:	4b4c      	ldr	r3, [pc, #304]	; (1c510 <fn_menu_debug+0x194>)
   1c3de:	601a      	str	r2, [r3, #0]
			break;
   1c3e0:	e019      	b.n	1c416 <fn_menu_debug+0x9a>
		case input_button1:
			if (cur_Y==2){
   1c3e2:	4b4b      	ldr	r3, [pc, #300]	; (1c510 <fn_menu_debug+0x194>)
   1c3e4:	681b      	ldr	r3, [r3, #0]
   1c3e6:	2b02      	cmp	r3, #2
   1c3e8:	d103      	bne.n	1c3f2 <fn_menu_debug+0x76>
				//  Raw Data Debug
				current_input = input_debug_rawData;
   1c3ea:	4b4d      	ldr	r3, [pc, #308]	; (1c520 <fn_menu_debug+0x1a4>)
   1c3ec:	2212      	movs	r2, #18
   1c3ee:	701a      	strb	r2, [r3, #0]
   1c3f0:	e012      	b.n	1c418 <fn_menu_debug+0x9c>
			}else if(cur_Y == 3){
   1c3f2:	4b47      	ldr	r3, [pc, #284]	; (1c510 <fn_menu_debug+0x194>)
   1c3f4:	681b      	ldr	r3, [r3, #0]
   1c3f6:	2b03      	cmp	r3, #3
   1c3f8:	d103      	bne.n	1c402 <fn_menu_debug+0x86>
				//  Backlight Debug
				current_input = input_debug_backlight;
   1c3fa:	4b49      	ldr	r3, [pc, #292]	; (1c520 <fn_menu_debug+0x1a4>)
   1c3fc:	2213      	movs	r2, #19
   1c3fe:	701a      	strb	r2, [r3, #0]
   1c400:	e00a      	b.n	1c418 <fn_menu_debug+0x9c>
			} else if(cur_Y == 4){
   1c402:	4b43      	ldr	r3, [pc, #268]	; (1c510 <fn_menu_debug+0x194>)
   1c404:	681b      	ldr	r3, [r3, #0]
   1c406:	2b04      	cmp	r3, #4
   1c408:	d106      	bne.n	1c418 <fn_menu_debug+0x9c>
				//  Charger Debug
				current_input = input_debug_charger;
   1c40a:	4b45      	ldr	r3, [pc, #276]	; (1c520 <fn_menu_debug+0x1a4>)
   1c40c:	2214      	movs	r2, #20
   1c40e:	701a      	strb	r2, [r3, #0]
   1c410:	e002      	b.n	1c418 <fn_menu_debug+0x9c>
			break;
   1c412:	46c0      	nop			; (mov r8, r8)
   1c414:	e000      	b.n	1c418 <fn_menu_debug+0x9c>
			break;
   1c416:	46c0      	nop			; (mov r8, r8)
			}
		
	}
	
	// Display
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1c418:	4842      	ldr	r0, [pc, #264]	; (1c524 <fn_menu_debug+0x1a8>)
   1c41a:	237f      	movs	r3, #127	; 0x7f
   1c41c:	9300      	str	r3, [sp, #0]
   1c41e:	2320      	movs	r3, #32
   1c420:	2207      	movs	r2, #7
   1c422:	2105      	movs	r1, #5
   1c424:	4c40      	ldr	r4, [pc, #256]	; (1c528 <fn_menu_debug+0x1ac>)
   1c426:	47a0      	blx	r4
	glcd_clear_buffer();
   1c428:	4b40      	ldr	r3, [pc, #256]	; (1c52c <fn_menu_debug+0x1b0>)
   1c42a:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Debug Menu:");
   1c42c:	4a40      	ldr	r2, [pc, #256]	; (1c530 <fn_menu_debug+0x1b4>)
   1c42e:	4b41      	ldr	r3, [pc, #260]	; (1c534 <fn_menu_debug+0x1b8>)
   1c430:	0010      	movs	r0, r2
   1c432:	0019      	movs	r1, r3
   1c434:	230c      	movs	r3, #12
   1c436:	001a      	movs	r2, r3
   1c438:	4b3f      	ldr	r3, [pc, #252]	; (1c538 <fn_menu_debug+0x1bc>)
   1c43a:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1c43c:	4b3c      	ldr	r3, [pc, #240]	; (1c530 <fn_menu_debug+0x1b4>)
   1c43e:	001a      	movs	r2, r3
   1c440:	2100      	movs	r1, #0
   1c442:	2000      	movs	r0, #0
   1c444:	4b3d      	ldr	r3, [pc, #244]	; (1c53c <fn_menu_debug+0x1c0>)
   1c446:	4798      	blx	r3
	
	//Display Options
	sprintf(display_str, "Sensor Raw Data");
   1c448:	4a39      	ldr	r2, [pc, #228]	; (1c530 <fn_menu_debug+0x1b4>)
   1c44a:	4b3d      	ldr	r3, [pc, #244]	; (1c540 <fn_menu_debug+0x1c4>)
   1c44c:	0010      	movs	r0, r2
   1c44e:	0019      	movs	r1, r3
   1c450:	2310      	movs	r3, #16
   1c452:	001a      	movs	r2, r3
   1c454:	4b38      	ldr	r3, [pc, #224]	; (1c538 <fn_menu_debug+0x1bc>)
   1c456:	4798      	blx	r3
	glcd_tiny_draw_string(20, 2, display_str);
   1c458:	4b35      	ldr	r3, [pc, #212]	; (1c530 <fn_menu_debug+0x1b4>)
   1c45a:	001a      	movs	r2, r3
   1c45c:	2102      	movs	r1, #2
   1c45e:	2014      	movs	r0, #20
   1c460:	4b36      	ldr	r3, [pc, #216]	; (1c53c <fn_menu_debug+0x1c0>)
   1c462:	4798      	blx	r3
	sprintf(display_str, "Backlight Manual");
   1c464:	4a32      	ldr	r2, [pc, #200]	; (1c530 <fn_menu_debug+0x1b4>)
   1c466:	4b37      	ldr	r3, [pc, #220]	; (1c544 <fn_menu_debug+0x1c8>)
   1c468:	0010      	movs	r0, r2
   1c46a:	0019      	movs	r1, r3
   1c46c:	2311      	movs	r3, #17
   1c46e:	001a      	movs	r2, r3
   1c470:	4b31      	ldr	r3, [pc, #196]	; (1c538 <fn_menu_debug+0x1bc>)
   1c472:	4798      	blx	r3
	glcd_tiny_draw_string(20, 3, display_str);
   1c474:	4b2e      	ldr	r3, [pc, #184]	; (1c530 <fn_menu_debug+0x1b4>)
   1c476:	001a      	movs	r2, r3
   1c478:	2103      	movs	r1, #3
   1c47a:	2014      	movs	r0, #20
   1c47c:	4b2f      	ldr	r3, [pc, #188]	; (1c53c <fn_menu_debug+0x1c0>)
   1c47e:	4798      	blx	r3
	sprintf(display_str, "Charger Info");
   1c480:	4a2b      	ldr	r2, [pc, #172]	; (1c530 <fn_menu_debug+0x1b4>)
   1c482:	4b31      	ldr	r3, [pc, #196]	; (1c548 <fn_menu_debug+0x1cc>)
   1c484:	0010      	movs	r0, r2
   1c486:	0019      	movs	r1, r3
   1c488:	230d      	movs	r3, #13
   1c48a:	001a      	movs	r2, r3
   1c48c:	4b2a      	ldr	r3, [pc, #168]	; (1c538 <fn_menu_debug+0x1bc>)
   1c48e:	4798      	blx	r3
	glcd_tiny_draw_string(20, 4, display_str);
   1c490:	4b27      	ldr	r3, [pc, #156]	; (1c530 <fn_menu_debug+0x1b4>)
   1c492:	001a      	movs	r2, r3
   1c494:	2104      	movs	r1, #4
   1c496:	2014      	movs	r0, #20
   1c498:	4b28      	ldr	r3, [pc, #160]	; (1c53c <fn_menu_debug+0x1c0>)
   1c49a:	4798      	blx	r3
	
	// Display soft keys
	draw_arrows(2);//  Draw up arrow at button 2
   1c49c:	2002      	movs	r0, #2
   1c49e:	4b2b      	ldr	r3, [pc, #172]	; (1c54c <fn_menu_debug+0x1d0>)
   1c4a0:	4798      	blx	r3
	draw_arrows(3);//  Draw down arrow at button 3
   1c4a2:	2003      	movs	r0, #3
   1c4a4:	4b29      	ldr	r3, [pc, #164]	; (1c54c <fn_menu_debug+0x1d0>)
   1c4a6:	4798      	blx	r3
	sprintf(display_str, "Enter");
   1c4a8:	4a21      	ldr	r2, [pc, #132]	; (1c530 <fn_menu_debug+0x1b4>)
   1c4aa:	4b29      	ldr	r3, [pc, #164]	; (1c550 <fn_menu_debug+0x1d4>)
   1c4ac:	0010      	movs	r0, r2
   1c4ae:	0019      	movs	r1, r3
   1c4b0:	2306      	movs	r3, #6
   1c4b2:	001a      	movs	r2, r3
   1c4b4:	4b20      	ldr	r3, [pc, #128]	; (1c538 <fn_menu_debug+0x1bc>)
   1c4b6:	4798      	blx	r3
	glcd_tiny_draw_string(96,0,display_str);
   1c4b8:	4b1d      	ldr	r3, [pc, #116]	; (1c530 <fn_menu_debug+0x1b4>)
   1c4ba:	001a      	movs	r2, r3
   1c4bc:	2100      	movs	r1, #0
   1c4be:	2060      	movs	r0, #96	; 0x60
   1c4c0:	4b1e      	ldr	r3, [pc, #120]	; (1c53c <fn_menu_debug+0x1c0>)
   1c4c2:	4798      	blx	r3
	sprintf(display_str, "Back");
   1c4c4:	4a1a      	ldr	r2, [pc, #104]	; (1c530 <fn_menu_debug+0x1b4>)
   1c4c6:	4b23      	ldr	r3, [pc, #140]	; (1c554 <fn_menu_debug+0x1d8>)
   1c4c8:	0010      	movs	r0, r2
   1c4ca:	0019      	movs	r1, r3
   1c4cc:	2305      	movs	r3, #5
   1c4ce:	001a      	movs	r2, r3
   1c4d0:	4b19      	ldr	r3, [pc, #100]	; (1c538 <fn_menu_debug+0x1bc>)
   1c4d2:	4798      	blx	r3
	glcd_tiny_draw_string(103,7,display_str);
   1c4d4:	4b16      	ldr	r3, [pc, #88]	; (1c530 <fn_menu_debug+0x1b4>)
   1c4d6:	001a      	movs	r2, r3
   1c4d8:	2107      	movs	r1, #7
   1c4da:	2067      	movs	r0, #103	; 0x67
   1c4dc:	4b17      	ldr	r3, [pc, #92]	; (1c53c <fn_menu_debug+0x1c0>)
   1c4de:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, ">");
   1c4e0:	4a13      	ldr	r2, [pc, #76]	; (1c530 <fn_menu_debug+0x1b4>)
   1c4e2:	4b1d      	ldr	r3, [pc, #116]	; (1c558 <fn_menu_debug+0x1dc>)
   1c4e4:	0010      	movs	r0, r2
   1c4e6:	0019      	movs	r1, r3
   1c4e8:	2302      	movs	r3, #2
   1c4ea:	001a      	movs	r2, r3
   1c4ec:	4b12      	ldr	r3, [pc, #72]	; (1c538 <fn_menu_debug+0x1bc>)
   1c4ee:	4798      	blx	r3
	glcd_tiny_draw_string(10, cur_Y,display_str);
   1c4f0:	4b07      	ldr	r3, [pc, #28]	; (1c510 <fn_menu_debug+0x194>)
   1c4f2:	681b      	ldr	r3, [r3, #0]
   1c4f4:	b2db      	uxtb	r3, r3
   1c4f6:	4a0e      	ldr	r2, [pc, #56]	; (1c530 <fn_menu_debug+0x1b4>)
   1c4f8:	0019      	movs	r1, r3
   1c4fa:	200a      	movs	r0, #10
   1c4fc:	4b0f      	ldr	r3, [pc, #60]	; (1c53c <fn_menu_debug+0x1c0>)
   1c4fe:	4798      	blx	r3
	
	glcd_write();
   1c500:	4b16      	ldr	r3, [pc, #88]	; (1c55c <fn_menu_debug+0x1e0>)
   1c502:	4798      	blx	r3
	
	
}
   1c504:	46c0      	nop			; (mov r8, r8)
   1c506:	46bd      	mov	sp, r7
   1c508:	b001      	add	sp, #4
   1c50a:	bd90      	pop	{r4, r7, pc}
   1c50c:	200000e8 	.word	0x200000e8
   1c510:	20003494 	.word	0x20003494
   1c514:	2000450c 	.word	0x2000450c
   1c518:	20003fec 	.word	0x20003fec
   1c51c:	20004136 	.word	0x20004136
   1c520:	20004134 	.word	0x20004134
   1c524:	00028b80 	.word	0x00028b80
   1c528:	00015f85 	.word	0x00015f85
   1c52c:	00015025 	.word	0x00015025
   1c530:	20003534 	.word	0x20003534
   1c534:	000295ec 	.word	0x000295ec
   1c538:	00023c19 	.word	0x00023c19
   1c53c:	00016111 	.word	0x00016111
   1c540:	000295f8 	.word	0x000295f8
   1c544:	00029608 	.word	0x00029608
   1c548:	0002961c 	.word	0x0002961c
   1c54c:	0001d8c1 	.word	0x0001d8c1
   1c550:	0002959c 	.word	0x0002959c
   1c554:	00029540 	.word	0x00029540
   1c558:	000295e8 	.word	0x000295e8
   1c55c:	00015869 	.word	0x00015869

0001c560 <fn_menu_cal>:



void fn_menu_cal(void){
   1c560:	b590      	push	{r4, r7, lr}
   1c562:	b083      	sub	sp, #12
   1c564:	af02      	add	r7, sp, #8
	//  Set initial conditions
	if (state_change) {
   1c566:	4b6d      	ldr	r3, [pc, #436]	; (1c71c <fn_menu_cal+0x1bc>)
   1c568:	781b      	ldrb	r3, [r3, #0]
   1c56a:	b2db      	uxtb	r3, r3
   1c56c:	2b00      	cmp	r3, #0
   1c56e:	d008      	beq.n	1c582 <fn_menu_cal+0x22>
		cur_Y = 2;
   1c570:	4b6b      	ldr	r3, [pc, #428]	; (1c720 <fn_menu_cal+0x1c0>)
   1c572:	2202      	movs	r2, #2
   1c574:	601a      	str	r2, [r3, #0]
		cur_Y_low = 2;
   1c576:	4b6b      	ldr	r3, [pc, #428]	; (1c724 <fn_menu_cal+0x1c4>)
   1c578:	2202      	movs	r2, #2
   1c57a:	601a      	str	r2, [r3, #0]
		cur_Y_high = 5;
   1c57c:	4b6a      	ldr	r3, [pc, #424]	; (1c728 <fn_menu_cal+0x1c8>)
   1c57e:	2205      	movs	r2, #5
   1c580:	601a      	str	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   1c582:	4b6a      	ldr	r3, [pc, #424]	; (1c72c <fn_menu_cal+0x1cc>)
   1c584:	781b      	ldrb	r3, [r3, #0]
   1c586:	b2db      	uxtb	r3, r3
   1c588:	2b02      	cmp	r3, #2
   1c58a:	d004      	beq.n	1c596 <fn_menu_cal+0x36>
   1c58c:	2b03      	cmp	r3, #3
   1c58e:	d00e      	beq.n	1c5ae <fn_menu_cal+0x4e>
   1c590:	2b01      	cmp	r3, #1
   1c592:	d018      	beq.n	1c5c6 <fn_menu_cal+0x66>
   1c594:	e03a      	b.n	1c60c <fn_menu_cal+0xac>
		case input_button2:
			if(cur_Y > cur_Y_low){--cur_Y; }
   1c596:	4b62      	ldr	r3, [pc, #392]	; (1c720 <fn_menu_cal+0x1c0>)
   1c598:	681a      	ldr	r2, [r3, #0]
   1c59a:	4b62      	ldr	r3, [pc, #392]	; (1c724 <fn_menu_cal+0x1c4>)
   1c59c:	681b      	ldr	r3, [r3, #0]
   1c59e:	429a      	cmp	r2, r3
   1c5a0:	dd31      	ble.n	1c606 <fn_menu_cal+0xa6>
   1c5a2:	4b5f      	ldr	r3, [pc, #380]	; (1c720 <fn_menu_cal+0x1c0>)
   1c5a4:	681b      	ldr	r3, [r3, #0]
   1c5a6:	1e5a      	subs	r2, r3, #1
   1c5a8:	4b5d      	ldr	r3, [pc, #372]	; (1c720 <fn_menu_cal+0x1c0>)
   1c5aa:	601a      	str	r2, [r3, #0]
			break;
   1c5ac:	e02b      	b.n	1c606 <fn_menu_cal+0xa6>
		case input_button3:
			if(cur_Y < cur_Y_high){++cur_Y; }
   1c5ae:	4b5c      	ldr	r3, [pc, #368]	; (1c720 <fn_menu_cal+0x1c0>)
   1c5b0:	681a      	ldr	r2, [r3, #0]
   1c5b2:	4b5d      	ldr	r3, [pc, #372]	; (1c728 <fn_menu_cal+0x1c8>)
   1c5b4:	681b      	ldr	r3, [r3, #0]
   1c5b6:	429a      	cmp	r2, r3
   1c5b8:	da27      	bge.n	1c60a <fn_menu_cal+0xaa>
   1c5ba:	4b59      	ldr	r3, [pc, #356]	; (1c720 <fn_menu_cal+0x1c0>)
   1c5bc:	681b      	ldr	r3, [r3, #0]
   1c5be:	1c5a      	adds	r2, r3, #1
   1c5c0:	4b57      	ldr	r3, [pc, #348]	; (1c720 <fn_menu_cal+0x1c0>)
   1c5c2:	601a      	str	r2, [r3, #0]
			break;
   1c5c4:	e021      	b.n	1c60a <fn_menu_cal+0xaa>
		case input_button1:
			if (cur_Y==2){
   1c5c6:	4b56      	ldr	r3, [pc, #344]	; (1c720 <fn_menu_cal+0x1c0>)
   1c5c8:	681b      	ldr	r3, [r3, #0]
   1c5ca:	2b02      	cmp	r3, #2
   1c5cc:	d103      	bne.n	1c5d6 <fn_menu_cal+0x76>
				//  Display Report
				current_input = input_disp_cal_report;
   1c5ce:	4b58      	ldr	r3, [pc, #352]	; (1c730 <fn_menu_cal+0x1d0>)
   1c5d0:	2210      	movs	r2, #16
   1c5d2:	701a      	strb	r2, [r3, #0]
   1c5d4:	e01a      	b.n	1c60c <fn_menu_cal+0xac>
			}else if(cur_Y == 3){
   1c5d6:	4b52      	ldr	r3, [pc, #328]	; (1c720 <fn_menu_cal+0x1c0>)
   1c5d8:	681b      	ldr	r3, [r3, #0]
   1c5da:	2b03      	cmp	r3, #3
   1c5dc:	d103      	bne.n	1c5e6 <fn_menu_cal+0x86>
				//  Distance Calibration
				current_input = input_dist_calibration;
   1c5de:	4b54      	ldr	r3, [pc, #336]	; (1c730 <fn_menu_cal+0x1d0>)
   1c5e0:	220e      	movs	r2, #14
   1c5e2:	701a      	strb	r2, [r3, #0]
   1c5e4:	e012      	b.n	1c60c <fn_menu_cal+0xac>
				
			} else if (cur_Y==4){
   1c5e6:	4b4e      	ldr	r3, [pc, #312]	; (1c720 <fn_menu_cal+0x1c0>)
   1c5e8:	681b      	ldr	r3, [r3, #0]
   1c5ea:	2b04      	cmp	r3, #4
   1c5ec:	d103      	bne.n	1c5f6 <fn_menu_cal+0x96>
				//  Accelerometer and Compass Calibration
				current_input = input_acc_comp_calibration;
   1c5ee:	4b50      	ldr	r3, [pc, #320]	; (1c730 <fn_menu_cal+0x1d0>)
   1c5f0:	220f      	movs	r2, #15
   1c5f2:	701a      	strb	r2, [r3, #0]
   1c5f4:	e00a      	b.n	1c60c <fn_menu_cal+0xac>
			} else if (cur_Y==5){
   1c5f6:	4b4a      	ldr	r3, [pc, #296]	; (1c720 <fn_menu_cal+0x1c0>)
   1c5f8:	681b      	ldr	r3, [r3, #0]
   1c5fa:	2b05      	cmp	r3, #5
   1c5fc:	d106      	bne.n	1c60c <fn_menu_cal+0xac>
				current_input = input_loop_test;
   1c5fe:	4b4c      	ldr	r3, [pc, #304]	; (1c730 <fn_menu_cal+0x1d0>)
   1c600:	2211      	movs	r2, #17
   1c602:	701a      	strb	r2, [r3, #0]
   1c604:	e002      	b.n	1c60c <fn_menu_cal+0xac>
			break;
   1c606:	46c0      	nop			; (mov r8, r8)
   1c608:	e000      	b.n	1c60c <fn_menu_cal+0xac>
			break;
   1c60a:	46c0      	nop			; (mov r8, r8)
			}
	}
	
	// Display
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1c60c:	4849      	ldr	r0, [pc, #292]	; (1c734 <fn_menu_cal+0x1d4>)
   1c60e:	237f      	movs	r3, #127	; 0x7f
   1c610:	9300      	str	r3, [sp, #0]
   1c612:	2320      	movs	r3, #32
   1c614:	2207      	movs	r2, #7
   1c616:	2105      	movs	r1, #5
   1c618:	4c47      	ldr	r4, [pc, #284]	; (1c738 <fn_menu_cal+0x1d8>)
   1c61a:	47a0      	blx	r4
	glcd_clear_buffer();
   1c61c:	4b47      	ldr	r3, [pc, #284]	; (1c73c <fn_menu_cal+0x1dc>)
   1c61e:	4798      	blx	r3
		//  Display Title
	sprintf(display_str,"Calibration:");
   1c620:	4a47      	ldr	r2, [pc, #284]	; (1c740 <fn_menu_cal+0x1e0>)
   1c622:	4b48      	ldr	r3, [pc, #288]	; (1c744 <fn_menu_cal+0x1e4>)
   1c624:	0010      	movs	r0, r2
   1c626:	0019      	movs	r1, r3
   1c628:	230d      	movs	r3, #13
   1c62a:	001a      	movs	r2, r3
   1c62c:	4b46      	ldr	r3, [pc, #280]	; (1c748 <fn_menu_cal+0x1e8>)
   1c62e:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1c630:	4b43      	ldr	r3, [pc, #268]	; (1c740 <fn_menu_cal+0x1e0>)
   1c632:	001a      	movs	r2, r3
   1c634:	2100      	movs	r1, #0
   1c636:	2000      	movs	r0, #0
   1c638:	4b44      	ldr	r3, [pc, #272]	; (1c74c <fn_menu_cal+0x1ec>)
   1c63a:	4798      	blx	r3
	
	//Display Options
	sprintf(display_str, "Display Report");
   1c63c:	4a40      	ldr	r2, [pc, #256]	; (1c740 <fn_menu_cal+0x1e0>)
   1c63e:	4b44      	ldr	r3, [pc, #272]	; (1c750 <fn_menu_cal+0x1f0>)
   1c640:	0010      	movs	r0, r2
   1c642:	0019      	movs	r1, r3
   1c644:	230f      	movs	r3, #15
   1c646:	001a      	movs	r2, r3
   1c648:	4b3f      	ldr	r3, [pc, #252]	; (1c748 <fn_menu_cal+0x1e8>)
   1c64a:	4798      	blx	r3
	glcd_tiny_draw_string(20, 2, display_str);
   1c64c:	4b3c      	ldr	r3, [pc, #240]	; (1c740 <fn_menu_cal+0x1e0>)
   1c64e:	001a      	movs	r2, r3
   1c650:	2102      	movs	r1, #2
   1c652:	2014      	movs	r0, #20
   1c654:	4b3d      	ldr	r3, [pc, #244]	; (1c74c <fn_menu_cal+0x1ec>)
   1c656:	4798      	blx	r3
	sprintf(display_str, "Cal Distance");
   1c658:	4a39      	ldr	r2, [pc, #228]	; (1c740 <fn_menu_cal+0x1e0>)
   1c65a:	4b3e      	ldr	r3, [pc, #248]	; (1c754 <fn_menu_cal+0x1f4>)
   1c65c:	0010      	movs	r0, r2
   1c65e:	0019      	movs	r1, r3
   1c660:	230d      	movs	r3, #13
   1c662:	001a      	movs	r2, r3
   1c664:	4b38      	ldr	r3, [pc, #224]	; (1c748 <fn_menu_cal+0x1e8>)
   1c666:	4798      	blx	r3
	glcd_tiny_draw_string(20, 3, display_str);
   1c668:	4b35      	ldr	r3, [pc, #212]	; (1c740 <fn_menu_cal+0x1e0>)
   1c66a:	001a      	movs	r2, r3
   1c66c:	2103      	movs	r1, #3
   1c66e:	2014      	movs	r0, #20
   1c670:	4b36      	ldr	r3, [pc, #216]	; (1c74c <fn_menu_cal+0x1ec>)
   1c672:	4798      	blx	r3
	sprintf(display_str, "Cal AZM & INCL");
   1c674:	4a32      	ldr	r2, [pc, #200]	; (1c740 <fn_menu_cal+0x1e0>)
   1c676:	4b38      	ldr	r3, [pc, #224]	; (1c758 <fn_menu_cal+0x1f8>)
   1c678:	0010      	movs	r0, r2
   1c67a:	0019      	movs	r1, r3
   1c67c:	230f      	movs	r3, #15
   1c67e:	001a      	movs	r2, r3
   1c680:	4b31      	ldr	r3, [pc, #196]	; (1c748 <fn_menu_cal+0x1e8>)
   1c682:	4798      	blx	r3
	glcd_tiny_draw_string(20, 4, display_str);
   1c684:	4b2e      	ldr	r3, [pc, #184]	; (1c740 <fn_menu_cal+0x1e0>)
   1c686:	001a      	movs	r2, r3
   1c688:	2104      	movs	r1, #4
   1c68a:	2014      	movs	r0, #20
   1c68c:	4b2f      	ldr	r3, [pc, #188]	; (1c74c <fn_menu_cal+0x1ec>)
   1c68e:	4798      	blx	r3
	sprintf(display_str,"Loop Test");
   1c690:	4a2b      	ldr	r2, [pc, #172]	; (1c740 <fn_menu_cal+0x1e0>)
   1c692:	4b32      	ldr	r3, [pc, #200]	; (1c75c <fn_menu_cal+0x1fc>)
   1c694:	0010      	movs	r0, r2
   1c696:	0019      	movs	r1, r3
   1c698:	230a      	movs	r3, #10
   1c69a:	001a      	movs	r2, r3
   1c69c:	4b2a      	ldr	r3, [pc, #168]	; (1c748 <fn_menu_cal+0x1e8>)
   1c69e:	4798      	blx	r3
	glcd_tiny_draw_string(20, 5, display_str);
   1c6a0:	4b27      	ldr	r3, [pc, #156]	; (1c740 <fn_menu_cal+0x1e0>)
   1c6a2:	001a      	movs	r2, r3
   1c6a4:	2105      	movs	r1, #5
   1c6a6:	2014      	movs	r0, #20
   1c6a8:	4b28      	ldr	r3, [pc, #160]	; (1c74c <fn_menu_cal+0x1ec>)
   1c6aa:	4798      	blx	r3
	
	// Display soft keys
	draw_arrows(2);//  Draw up arrow at button 2
   1c6ac:	2002      	movs	r0, #2
   1c6ae:	4b2c      	ldr	r3, [pc, #176]	; (1c760 <fn_menu_cal+0x200>)
   1c6b0:	4798      	blx	r3
	draw_arrows(3);//  Draw down arrow at button 3
   1c6b2:	2003      	movs	r0, #3
   1c6b4:	4b2a      	ldr	r3, [pc, #168]	; (1c760 <fn_menu_cal+0x200>)
   1c6b6:	4798      	blx	r3
	sprintf(display_str, "Enter");
   1c6b8:	4a21      	ldr	r2, [pc, #132]	; (1c740 <fn_menu_cal+0x1e0>)
   1c6ba:	4b2a      	ldr	r3, [pc, #168]	; (1c764 <fn_menu_cal+0x204>)
   1c6bc:	0010      	movs	r0, r2
   1c6be:	0019      	movs	r1, r3
   1c6c0:	2306      	movs	r3, #6
   1c6c2:	001a      	movs	r2, r3
   1c6c4:	4b20      	ldr	r3, [pc, #128]	; (1c748 <fn_menu_cal+0x1e8>)
   1c6c6:	4798      	blx	r3
	glcd_tiny_draw_string(96,0,display_str);
   1c6c8:	4b1d      	ldr	r3, [pc, #116]	; (1c740 <fn_menu_cal+0x1e0>)
   1c6ca:	001a      	movs	r2, r3
   1c6cc:	2100      	movs	r1, #0
   1c6ce:	2060      	movs	r0, #96	; 0x60
   1c6d0:	4b1e      	ldr	r3, [pc, #120]	; (1c74c <fn_menu_cal+0x1ec>)
   1c6d2:	4798      	blx	r3
	sprintf(display_str, "Back");
   1c6d4:	4a1a      	ldr	r2, [pc, #104]	; (1c740 <fn_menu_cal+0x1e0>)
   1c6d6:	4b24      	ldr	r3, [pc, #144]	; (1c768 <fn_menu_cal+0x208>)
   1c6d8:	0010      	movs	r0, r2
   1c6da:	0019      	movs	r1, r3
   1c6dc:	2305      	movs	r3, #5
   1c6de:	001a      	movs	r2, r3
   1c6e0:	4b19      	ldr	r3, [pc, #100]	; (1c748 <fn_menu_cal+0x1e8>)
   1c6e2:	4798      	blx	r3
	glcd_tiny_draw_string(103,7,display_str);
   1c6e4:	4b16      	ldr	r3, [pc, #88]	; (1c740 <fn_menu_cal+0x1e0>)
   1c6e6:	001a      	movs	r2, r3
   1c6e8:	2107      	movs	r1, #7
   1c6ea:	2067      	movs	r0, #103	; 0x67
   1c6ec:	4b17      	ldr	r3, [pc, #92]	; (1c74c <fn_menu_cal+0x1ec>)
   1c6ee:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, ">");
   1c6f0:	4a13      	ldr	r2, [pc, #76]	; (1c740 <fn_menu_cal+0x1e0>)
   1c6f2:	4b1e      	ldr	r3, [pc, #120]	; (1c76c <fn_menu_cal+0x20c>)
   1c6f4:	0010      	movs	r0, r2
   1c6f6:	0019      	movs	r1, r3
   1c6f8:	2302      	movs	r3, #2
   1c6fa:	001a      	movs	r2, r3
   1c6fc:	4b12      	ldr	r3, [pc, #72]	; (1c748 <fn_menu_cal+0x1e8>)
   1c6fe:	4798      	blx	r3
	glcd_tiny_draw_string(10, cur_Y,display_str);
   1c700:	4b07      	ldr	r3, [pc, #28]	; (1c720 <fn_menu_cal+0x1c0>)
   1c702:	681b      	ldr	r3, [r3, #0]
   1c704:	b2db      	uxtb	r3, r3
   1c706:	4a0e      	ldr	r2, [pc, #56]	; (1c740 <fn_menu_cal+0x1e0>)
   1c708:	0019      	movs	r1, r3
   1c70a:	200a      	movs	r0, #10
   1c70c:	4b0f      	ldr	r3, [pc, #60]	; (1c74c <fn_menu_cal+0x1ec>)
   1c70e:	4798      	blx	r3
	
	glcd_write();
   1c710:	4b17      	ldr	r3, [pc, #92]	; (1c770 <fn_menu_cal+0x210>)
   1c712:	4798      	blx	r3
	
}
   1c714:	46c0      	nop			; (mov r8, r8)
   1c716:	46bd      	mov	sp, r7
   1c718:	b001      	add	sp, #4
   1c71a:	bd90      	pop	{r4, r7, pc}
   1c71c:	200000e8 	.word	0x200000e8
   1c720:	20003494 	.word	0x20003494
   1c724:	2000450c 	.word	0x2000450c
   1c728:	20003fec 	.word	0x20003fec
   1c72c:	20004136 	.word	0x20004136
   1c730:	20004134 	.word	0x20004134
   1c734:	00028b80 	.word	0x00028b80
   1c738:	00015f85 	.word	0x00015f85
   1c73c:	00015025 	.word	0x00015025
   1c740:	20003534 	.word	0x20003534
   1c744:	00028e2c 	.word	0x00028e2c
   1c748:	00023c19 	.word	0x00023c19
   1c74c:	00016111 	.word	0x00016111
   1c750:	0002962c 	.word	0x0002962c
   1c754:	0002963c 	.word	0x0002963c
   1c758:	0002964c 	.word	0x0002964c
   1c75c:	0002965c 	.word	0x0002965c
   1c760:	0001d8c1 	.word	0x0001d8c1
   1c764:	0002959c 	.word	0x0002959c
   1c768:	00029540 	.word	0x00029540
   1c76c:	000295e8 	.word	0x000295e8
   1c770:	00015869 	.word	0x00015869

0001c774 <fn_debug_backlight>:

void fn_debug_backlight(void){
   1c774:	b580      	push	{r7, lr}
   1c776:	af00      	add	r7, sp, #0
	static char colorRef;
	static struct BACKLIGHTCOLOR *colorPtr;
	//  Set initial conditions
	if (state_change) {
   1c778:	4b7a      	ldr	r3, [pc, #488]	; (1c964 <fn_debug_backlight+0x1f0>)
   1c77a:	781b      	ldrb	r3, [r3, #0]
   1c77c:	b2db      	uxtb	r3, r3
   1c77e:	2b00      	cmp	r3, #0
   1c780:	d014      	beq.n	1c7ac <fn_debug_backlight+0x38>
		cur_Y = 2;
   1c782:	4b79      	ldr	r3, [pc, #484]	; (1c968 <fn_debug_backlight+0x1f4>)
   1c784:	2202      	movs	r2, #2
   1c786:	601a      	str	r2, [r3, #0]
		cur_Y_low = 2;
   1c788:	4b78      	ldr	r3, [pc, #480]	; (1c96c <fn_debug_backlight+0x1f8>)
   1c78a:	2202      	movs	r2, #2
   1c78c:	601a      	str	r2, [r3, #0]
		cur_Y_high = 5;
   1c78e:	4b78      	ldr	r3, [pc, #480]	; (1c970 <fn_debug_backlight+0x1fc>)
   1c790:	2205      	movs	r2, #5
   1c792:	601a      	str	r2, [r3, #0]
		options.backlight_setting.colorRef = 0;
   1c794:	4b77      	ldr	r3, [pc, #476]	; (1c974 <fn_debug_backlight+0x200>)
   1c796:	2200      	movs	r2, #0
   1c798:	749a      	strb	r2, [r3, #18]
		backlightOn();
   1c79a:	4b77      	ldr	r3, [pc, #476]	; (1c978 <fn_debug_backlight+0x204>)
   1c79c:	4798      	blx	r3
		colorPtr = backlightCustomAdjust(0, 0);
   1c79e:	2100      	movs	r1, #0
   1c7a0:	2000      	movs	r0, #0
   1c7a2:	4b76      	ldr	r3, [pc, #472]	; (1c97c <fn_debug_backlight+0x208>)
   1c7a4:	4798      	blx	r3
   1c7a6:	0002      	movs	r2, r0
   1c7a8:	4b75      	ldr	r3, [pc, #468]	; (1c980 <fn_debug_backlight+0x20c>)
   1c7aa:	601a      	str	r2, [r3, #0]
	}	
	
	switch(cur_Y){
   1c7ac:	4b6e      	ldr	r3, [pc, #440]	; (1c968 <fn_debug_backlight+0x1f4>)
   1c7ae:	681b      	ldr	r3, [r3, #0]
   1c7b0:	2b03      	cmp	r3, #3
   1c7b2:	d00c      	beq.n	1c7ce <fn_debug_backlight+0x5a>
   1c7b4:	dc02      	bgt.n	1c7bc <fn_debug_backlight+0x48>
   1c7b6:	2b02      	cmp	r3, #2
   1c7b8:	d005      	beq.n	1c7c6 <fn_debug_backlight+0x52>
   1c7ba:	e014      	b.n	1c7e6 <fn_debug_backlight+0x72>
   1c7bc:	2b04      	cmp	r3, #4
   1c7be:	d00a      	beq.n	1c7d6 <fn_debug_backlight+0x62>
   1c7c0:	2b05      	cmp	r3, #5
   1c7c2:	d00c      	beq.n	1c7de <fn_debug_backlight+0x6a>
   1c7c4:	e00f      	b.n	1c7e6 <fn_debug_backlight+0x72>
		case 2:
			colorRef = 'r';
   1c7c6:	4b6f      	ldr	r3, [pc, #444]	; (1c984 <fn_debug_backlight+0x210>)
   1c7c8:	2272      	movs	r2, #114	; 0x72
   1c7ca:	701a      	strb	r2, [r3, #0]
			break;
   1c7cc:	e00f      	b.n	1c7ee <fn_debug_backlight+0x7a>
		case 3:
			colorRef = 'g';
   1c7ce:	4b6d      	ldr	r3, [pc, #436]	; (1c984 <fn_debug_backlight+0x210>)
   1c7d0:	2267      	movs	r2, #103	; 0x67
   1c7d2:	701a      	strb	r2, [r3, #0]
			break;
   1c7d4:	e00b      	b.n	1c7ee <fn_debug_backlight+0x7a>
		case 4:
			colorRef = 'b';
   1c7d6:	4b6b      	ldr	r3, [pc, #428]	; (1c984 <fn_debug_backlight+0x210>)
   1c7d8:	2262      	movs	r2, #98	; 0x62
   1c7da:	701a      	strb	r2, [r3, #0]
			break;
   1c7dc:	e007      	b.n	1c7ee <fn_debug_backlight+0x7a>
		case 5:
			colorRef = 'L';
   1c7de:	4b69      	ldr	r3, [pc, #420]	; (1c984 <fn_debug_backlight+0x210>)
   1c7e0:	224c      	movs	r2, #76	; 0x4c
   1c7e2:	701a      	strb	r2, [r3, #0]
			break;
   1c7e4:	e003      	b.n	1c7ee <fn_debug_backlight+0x7a>
		default:
			colorRef = 'L';
   1c7e6:	4b67      	ldr	r3, [pc, #412]	; (1c984 <fn_debug_backlight+0x210>)
   1c7e8:	224c      	movs	r2, #76	; 0x4c
   1c7ea:	701a      	strb	r2, [r3, #0]
			break;
   1c7ec:	46c0      	nop			; (mov r8, r8)
			
	}	
	
	// Button Handler
	switch(last_input){
   1c7ee:	4b66      	ldr	r3, [pc, #408]	; (1c988 <fn_debug_backlight+0x214>)
   1c7f0:	781b      	ldrb	r3, [r3, #0]
   1c7f2:	b2db      	uxtb	r3, r3
   1c7f4:	2b02      	cmp	r3, #2
   1c7f6:	d020      	beq.n	1c83a <fn_debug_backlight+0xc6>
   1c7f8:	dc02      	bgt.n	1c800 <fn_debug_backlight+0x8c>
   1c7fa:	2b01      	cmp	r3, #1
   1c7fc:	d005      	beq.n	1c80a <fn_debug_backlight+0x96>
   1c7fe:	e02f      	b.n	1c860 <fn_debug_backlight+0xec>
   1c800:	2b03      	cmp	r3, #3
   1c802:	d021      	beq.n	1c848 <fn_debug_backlight+0xd4>
   1c804:	2b04      	cmp	r3, #4
   1c806:	d00c      	beq.n	1c822 <fn_debug_backlight+0xae>
   1c808:	e02a      	b.n	1c860 <fn_debug_backlight+0xec>
		case input_button1:
			if(cur_Y > cur_Y_low){--cur_Y; }
   1c80a:	4b57      	ldr	r3, [pc, #348]	; (1c968 <fn_debug_backlight+0x1f4>)
   1c80c:	681a      	ldr	r2, [r3, #0]
   1c80e:	4b57      	ldr	r3, [pc, #348]	; (1c96c <fn_debug_backlight+0x1f8>)
   1c810:	681b      	ldr	r3, [r3, #0]
   1c812:	429a      	cmp	r2, r3
   1c814:	dd21      	ble.n	1c85a <fn_debug_backlight+0xe6>
   1c816:	4b54      	ldr	r3, [pc, #336]	; (1c968 <fn_debug_backlight+0x1f4>)
   1c818:	681b      	ldr	r3, [r3, #0]
   1c81a:	1e5a      	subs	r2, r3, #1
   1c81c:	4b52      	ldr	r3, [pc, #328]	; (1c968 <fn_debug_backlight+0x1f4>)
   1c81e:	601a      	str	r2, [r3, #0]
			break;
   1c820:	e01b      	b.n	1c85a <fn_debug_backlight+0xe6>
		case input_button4:
			if(cur_Y < cur_Y_high){++cur_Y; }
   1c822:	4b51      	ldr	r3, [pc, #324]	; (1c968 <fn_debug_backlight+0x1f4>)
   1c824:	681a      	ldr	r2, [r3, #0]
   1c826:	4b52      	ldr	r3, [pc, #328]	; (1c970 <fn_debug_backlight+0x1fc>)
   1c828:	681b      	ldr	r3, [r3, #0]
   1c82a:	429a      	cmp	r2, r3
   1c82c:	da17      	bge.n	1c85e <fn_debug_backlight+0xea>
   1c82e:	4b4e      	ldr	r3, [pc, #312]	; (1c968 <fn_debug_backlight+0x1f4>)
   1c830:	681b      	ldr	r3, [r3, #0]
   1c832:	1c5a      	adds	r2, r3, #1
   1c834:	4b4c      	ldr	r3, [pc, #304]	; (1c968 <fn_debug_backlight+0x1f4>)
   1c836:	601a      	str	r2, [r3, #0]
			break;
   1c838:	e011      	b.n	1c85e <fn_debug_backlight+0xea>
		case input_button2:
			backlightCustomAdjust(colorRef, 1);
   1c83a:	4b52      	ldr	r3, [pc, #328]	; (1c984 <fn_debug_backlight+0x210>)
   1c83c:	781b      	ldrb	r3, [r3, #0]
   1c83e:	2101      	movs	r1, #1
   1c840:	0018      	movs	r0, r3
   1c842:	4b4e      	ldr	r3, [pc, #312]	; (1c97c <fn_debug_backlight+0x208>)
   1c844:	4798      	blx	r3
			break;
   1c846:	e00b      	b.n	1c860 <fn_debug_backlight+0xec>
		case input_button3:
			backlightCustomAdjust(colorRef, -1);
   1c848:	4b4e      	ldr	r3, [pc, #312]	; (1c984 <fn_debug_backlight+0x210>)
   1c84a:	781a      	ldrb	r2, [r3, #0]
   1c84c:	2301      	movs	r3, #1
   1c84e:	425b      	negs	r3, r3
   1c850:	0019      	movs	r1, r3
   1c852:	0010      	movs	r0, r2
   1c854:	4b49      	ldr	r3, [pc, #292]	; (1c97c <fn_debug_backlight+0x208>)
   1c856:	4798      	blx	r3
			break;
   1c858:	e002      	b.n	1c860 <fn_debug_backlight+0xec>
			break;
   1c85a:	46c0      	nop			; (mov r8, r8)
   1c85c:	e000      	b.n	1c860 <fn_debug_backlight+0xec>
			break;
   1c85e:	46c0      	nop			; (mov r8, r8)
	}
	

	
	// Display
	glcd_clear_buffer();
   1c860:	4b4a      	ldr	r3, [pc, #296]	; (1c98c <fn_debug_backlight+0x218>)
   1c862:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Backlight Debug:");
   1c864:	4a4a      	ldr	r2, [pc, #296]	; (1c990 <fn_debug_backlight+0x21c>)
   1c866:	4b4b      	ldr	r3, [pc, #300]	; (1c994 <fn_debug_backlight+0x220>)
   1c868:	0010      	movs	r0, r2
   1c86a:	0019      	movs	r1, r3
   1c86c:	2311      	movs	r3, #17
   1c86e:	001a      	movs	r2, r3
   1c870:	4b49      	ldr	r3, [pc, #292]	; (1c998 <fn_debug_backlight+0x224>)
   1c872:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1c874:	4b46      	ldr	r3, [pc, #280]	; (1c990 <fn_debug_backlight+0x21c>)
   1c876:	001a      	movs	r2, r3
   1c878:	2100      	movs	r1, #0
   1c87a:	2000      	movs	r0, #0
   1c87c:	4b47      	ldr	r3, [pc, #284]	; (1c99c <fn_debug_backlight+0x228>)
   1c87e:	4798      	blx	r3
	
	//Display Options
	sprintf(display_str, "Red:   %d", colorPtr->red);
   1c880:	4b3f      	ldr	r3, [pc, #252]	; (1c980 <fn_debug_backlight+0x20c>)
   1c882:	681b      	ldr	r3, [r3, #0]
   1c884:	791b      	ldrb	r3, [r3, #4]
   1c886:	001a      	movs	r2, r3
   1c888:	4945      	ldr	r1, [pc, #276]	; (1c9a0 <fn_debug_backlight+0x22c>)
   1c88a:	4b41      	ldr	r3, [pc, #260]	; (1c990 <fn_debug_backlight+0x21c>)
   1c88c:	0018      	movs	r0, r3
   1c88e:	4b45      	ldr	r3, [pc, #276]	; (1c9a4 <fn_debug_backlight+0x230>)
   1c890:	4798      	blx	r3
	glcd_tiny_draw_string(20, 2, display_str);
   1c892:	4b3f      	ldr	r3, [pc, #252]	; (1c990 <fn_debug_backlight+0x21c>)
   1c894:	001a      	movs	r2, r3
   1c896:	2102      	movs	r1, #2
   1c898:	2014      	movs	r0, #20
   1c89a:	4b40      	ldr	r3, [pc, #256]	; (1c99c <fn_debug_backlight+0x228>)
   1c89c:	4798      	blx	r3
	sprintf(display_str, "Green: %d", colorPtr->green);
   1c89e:	4b38      	ldr	r3, [pc, #224]	; (1c980 <fn_debug_backlight+0x20c>)
   1c8a0:	681b      	ldr	r3, [r3, #0]
   1c8a2:	799b      	ldrb	r3, [r3, #6]
   1c8a4:	001a      	movs	r2, r3
   1c8a6:	4940      	ldr	r1, [pc, #256]	; (1c9a8 <fn_debug_backlight+0x234>)
   1c8a8:	4b39      	ldr	r3, [pc, #228]	; (1c990 <fn_debug_backlight+0x21c>)
   1c8aa:	0018      	movs	r0, r3
   1c8ac:	4b3d      	ldr	r3, [pc, #244]	; (1c9a4 <fn_debug_backlight+0x230>)
   1c8ae:	4798      	blx	r3
	glcd_tiny_draw_string(20, 3, display_str);
   1c8b0:	4b37      	ldr	r3, [pc, #220]	; (1c990 <fn_debug_backlight+0x21c>)
   1c8b2:	001a      	movs	r2, r3
   1c8b4:	2103      	movs	r1, #3
   1c8b6:	2014      	movs	r0, #20
   1c8b8:	4b38      	ldr	r3, [pc, #224]	; (1c99c <fn_debug_backlight+0x228>)
   1c8ba:	4798      	blx	r3
	sprintf(display_str, "Blue:  %d", colorPtr->blue);
   1c8bc:	4b30      	ldr	r3, [pc, #192]	; (1c980 <fn_debug_backlight+0x20c>)
   1c8be:	681b      	ldr	r3, [r3, #0]
   1c8c0:	795b      	ldrb	r3, [r3, #5]
   1c8c2:	001a      	movs	r2, r3
   1c8c4:	4939      	ldr	r1, [pc, #228]	; (1c9ac <fn_debug_backlight+0x238>)
   1c8c6:	4b32      	ldr	r3, [pc, #200]	; (1c990 <fn_debug_backlight+0x21c>)
   1c8c8:	0018      	movs	r0, r3
   1c8ca:	4b36      	ldr	r3, [pc, #216]	; (1c9a4 <fn_debug_backlight+0x230>)
   1c8cc:	4798      	blx	r3
	glcd_tiny_draw_string(20, 4, display_str);
   1c8ce:	4b30      	ldr	r3, [pc, #192]	; (1c990 <fn_debug_backlight+0x21c>)
   1c8d0:	001a      	movs	r2, r3
   1c8d2:	2104      	movs	r1, #4
   1c8d4:	2014      	movs	r0, #20
   1c8d6:	4b31      	ldr	r3, [pc, #196]	; (1c99c <fn_debug_backlight+0x228>)
   1c8d8:	4798      	blx	r3
	sprintf(display_str, "Light: %d", options.backlight_setting.brightness);
   1c8da:	4b26      	ldr	r3, [pc, #152]	; (1c974 <fn_debug_backlight+0x200>)
   1c8dc:	7b1b      	ldrb	r3, [r3, #12]
   1c8de:	001a      	movs	r2, r3
   1c8e0:	4933      	ldr	r1, [pc, #204]	; (1c9b0 <fn_debug_backlight+0x23c>)
   1c8e2:	4b2b      	ldr	r3, [pc, #172]	; (1c990 <fn_debug_backlight+0x21c>)
   1c8e4:	0018      	movs	r0, r3
   1c8e6:	4b2f      	ldr	r3, [pc, #188]	; (1c9a4 <fn_debug_backlight+0x230>)
   1c8e8:	4798      	blx	r3
	glcd_tiny_draw_string(20, 5, display_str);
   1c8ea:	4b29      	ldr	r3, [pc, #164]	; (1c990 <fn_debug_backlight+0x21c>)
   1c8ec:	001a      	movs	r2, r3
   1c8ee:	2105      	movs	r1, #5
   1c8f0:	2014      	movs	r0, #20
   1c8f2:	4b2a      	ldr	r3, [pc, #168]	; (1c99c <fn_debug_backlight+0x228>)
   1c8f4:	4798      	blx	r3
	
	// Display soft keys
	draw_arrows(2);//  Draw up arrow at button 2
   1c8f6:	2002      	movs	r0, #2
   1c8f8:	4b2e      	ldr	r3, [pc, #184]	; (1c9b4 <fn_debug_backlight+0x240>)
   1c8fa:	4798      	blx	r3
	draw_arrows(3);//  Draw down arrow at button 3
   1c8fc:	2003      	movs	r0, #3
   1c8fe:	4b2d      	ldr	r3, [pc, #180]	; (1c9b4 <fn_debug_backlight+0x240>)
   1c900:	4798      	blx	r3
	sprintf(display_str, "Up");
   1c902:	4a23      	ldr	r2, [pc, #140]	; (1c990 <fn_debug_backlight+0x21c>)
   1c904:	4b2c      	ldr	r3, [pc, #176]	; (1c9b8 <fn_debug_backlight+0x244>)
   1c906:	0010      	movs	r0, r2
   1c908:	0019      	movs	r1, r3
   1c90a:	2303      	movs	r3, #3
   1c90c:	001a      	movs	r2, r3
   1c90e:	4b22      	ldr	r3, [pc, #136]	; (1c998 <fn_debug_backlight+0x224>)
   1c910:	4798      	blx	r3
	glcd_tiny_draw_string(96,0,display_str);
   1c912:	4b1f      	ldr	r3, [pc, #124]	; (1c990 <fn_debug_backlight+0x21c>)
   1c914:	001a      	movs	r2, r3
   1c916:	2100      	movs	r1, #0
   1c918:	2060      	movs	r0, #96	; 0x60
   1c91a:	4b20      	ldr	r3, [pc, #128]	; (1c99c <fn_debug_backlight+0x228>)
   1c91c:	4798      	blx	r3
	sprintf(display_str, "Down");
   1c91e:	4a1c      	ldr	r2, [pc, #112]	; (1c990 <fn_debug_backlight+0x21c>)
   1c920:	4b26      	ldr	r3, [pc, #152]	; (1c9bc <fn_debug_backlight+0x248>)
   1c922:	0010      	movs	r0, r2
   1c924:	0019      	movs	r1, r3
   1c926:	2305      	movs	r3, #5
   1c928:	001a      	movs	r2, r3
   1c92a:	4b1b      	ldr	r3, [pc, #108]	; (1c998 <fn_debug_backlight+0x224>)
   1c92c:	4798      	blx	r3
	glcd_tiny_draw_string(103,7,display_str);
   1c92e:	4b18      	ldr	r3, [pc, #96]	; (1c990 <fn_debug_backlight+0x21c>)
   1c930:	001a      	movs	r2, r3
   1c932:	2107      	movs	r1, #7
   1c934:	2067      	movs	r0, #103	; 0x67
   1c936:	4b19      	ldr	r3, [pc, #100]	; (1c99c <fn_debug_backlight+0x228>)
   1c938:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, ">");
   1c93a:	4a15      	ldr	r2, [pc, #84]	; (1c990 <fn_debug_backlight+0x21c>)
   1c93c:	4b20      	ldr	r3, [pc, #128]	; (1c9c0 <fn_debug_backlight+0x24c>)
   1c93e:	0010      	movs	r0, r2
   1c940:	0019      	movs	r1, r3
   1c942:	2302      	movs	r3, #2
   1c944:	001a      	movs	r2, r3
   1c946:	4b14      	ldr	r3, [pc, #80]	; (1c998 <fn_debug_backlight+0x224>)
   1c948:	4798      	blx	r3
	glcd_tiny_draw_string(10, cur_Y,display_str);
   1c94a:	4b07      	ldr	r3, [pc, #28]	; (1c968 <fn_debug_backlight+0x1f4>)
   1c94c:	681b      	ldr	r3, [r3, #0]
   1c94e:	b2db      	uxtb	r3, r3
   1c950:	4a0f      	ldr	r2, [pc, #60]	; (1c990 <fn_debug_backlight+0x21c>)
   1c952:	0019      	movs	r1, r3
   1c954:	200a      	movs	r0, #10
   1c956:	4b11      	ldr	r3, [pc, #68]	; (1c99c <fn_debug_backlight+0x228>)
   1c958:	4798      	blx	r3
	
	glcd_write();
   1c95a:	4b1a      	ldr	r3, [pc, #104]	; (1c9c4 <fn_debug_backlight+0x250>)
   1c95c:	4798      	blx	r3
	
	
}
   1c95e:	46c0      	nop			; (mov r8, r8)
   1c960:	46bd      	mov	sp, r7
   1c962:	bd80      	pop	{r7, pc}
   1c964:	200000e8 	.word	0x200000e8
   1c968:	20003494 	.word	0x20003494
   1c96c:	2000450c 	.word	0x2000450c
   1c970:	20003fec 	.word	0x20003fec
   1c974:	200034a8 	.word	0x200034a8
   1c978:	000016b9 	.word	0x000016b9
   1c97c:	000014ed 	.word	0x000014ed
   1c980:	20000e4c 	.word	0x20000e4c
   1c984:	20000e50 	.word	0x20000e50
   1c988:	20004136 	.word	0x20004136
   1c98c:	00015025 	.word	0x00015025
   1c990:	20003534 	.word	0x20003534
   1c994:	00029668 	.word	0x00029668
   1c998:	00023c19 	.word	0x00023c19
   1c99c:	00016111 	.word	0x00016111
   1c9a0:	0002967c 	.word	0x0002967c
   1c9a4:	00023d31 	.word	0x00023d31
   1c9a8:	00029688 	.word	0x00029688
   1c9ac:	00029694 	.word	0x00029694
   1c9b0:	000296a0 	.word	0x000296a0
   1c9b4:	0001d8c1 	.word	0x0001d8c1
   1c9b8:	000296ac 	.word	0x000296ac
   1c9bc:	000296b0 	.word	0x000296b0
   1c9c0:	000295e8 	.word	0x000295e8
   1c9c4:	00015869 	.word	0x00015869

0001c9c8 <fn_set_options>:



void fn_set_options(void){
   1c9c8:	b590      	push	{r4, r7, lr}
   1c9ca:	b083      	sub	sp, #12
   1c9cc:	af02      	add	r7, sp, #8
	//  Set initial conditions
	if (state_change) {
   1c9ce:	4bad      	ldr	r3, [pc, #692]	; (1cc84 <fn_set_options+0x2bc>)
   1c9d0:	781b      	ldrb	r3, [r3, #0]
   1c9d2:	b2db      	uxtb	r3, r3
   1c9d4:	2b00      	cmp	r3, #0
   1c9d6:	d008      	beq.n	1c9ea <fn_set_options+0x22>
		cur_Y = 1;
   1c9d8:	4bab      	ldr	r3, [pc, #684]	; (1cc88 <fn_set_options+0x2c0>)
   1c9da:	2201      	movs	r2, #1
   1c9dc:	601a      	str	r2, [r3, #0]
		cur_Y_low = 1;
   1c9de:	4bab      	ldr	r3, [pc, #684]	; (1cc8c <fn_set_options+0x2c4>)
   1c9e0:	2201      	movs	r2, #1
   1c9e2:	601a      	str	r2, [r3, #0]
		cur_Y_high = 7;
   1c9e4:	4baa      	ldr	r3, [pc, #680]	; (1cc90 <fn_set_options+0x2c8>)
   1c9e6:	2207      	movs	r2, #7
   1c9e8:	601a      	str	r2, [r3, #0]
	}
	
	// Button Handler
	switch(last_input){
   1c9ea:	4baa      	ldr	r3, [pc, #680]	; (1cc94 <fn_set_options+0x2cc>)
   1c9ec:	781b      	ldrb	r3, [r3, #0]
   1c9ee:	b2db      	uxtb	r3, r3
   1c9f0:	2b02      	cmp	r3, #2
   1c9f2:	d004      	beq.n	1c9fe <fn_set_options+0x36>
   1c9f4:	2b03      	cmp	r3, #3
   1c9f6:	d00f      	beq.n	1ca18 <fn_set_options+0x50>
   1c9f8:	2b01      	cmp	r3, #1
   1c9fa:	d019      	beq.n	1ca30 <fn_set_options+0x68>
   1c9fc:	e072      	b.n	1cae4 <fn_set_options+0x11c>
		case input_button2:
			if(cur_Y > cur_Y_low){--cur_Y; }
   1c9fe:	4ba2      	ldr	r3, [pc, #648]	; (1cc88 <fn_set_options+0x2c0>)
   1ca00:	681a      	ldr	r2, [r3, #0]
   1ca02:	4ba2      	ldr	r3, [pc, #648]	; (1cc8c <fn_set_options+0x2c4>)
   1ca04:	681b      	ldr	r3, [r3, #0]
   1ca06:	429a      	cmp	r2, r3
   1ca08:	dc00      	bgt.n	1ca0c <fn_set_options+0x44>
   1ca0a:	e068      	b.n	1cade <fn_set_options+0x116>
   1ca0c:	4b9e      	ldr	r3, [pc, #632]	; (1cc88 <fn_set_options+0x2c0>)
   1ca0e:	681b      	ldr	r3, [r3, #0]
   1ca10:	1e5a      	subs	r2, r3, #1
   1ca12:	4b9d      	ldr	r3, [pc, #628]	; (1cc88 <fn_set_options+0x2c0>)
   1ca14:	601a      	str	r2, [r3, #0]
			break;
   1ca16:	e062      	b.n	1cade <fn_set_options+0x116>
		case input_button3:
			if(cur_Y < cur_Y_high){++cur_Y; }
   1ca18:	4b9b      	ldr	r3, [pc, #620]	; (1cc88 <fn_set_options+0x2c0>)
   1ca1a:	681a      	ldr	r2, [r3, #0]
   1ca1c:	4b9c      	ldr	r3, [pc, #624]	; (1cc90 <fn_set_options+0x2c8>)
   1ca1e:	681b      	ldr	r3, [r3, #0]
   1ca20:	429a      	cmp	r2, r3
   1ca22:	da5e      	bge.n	1cae2 <fn_set_options+0x11a>
   1ca24:	4b98      	ldr	r3, [pc, #608]	; (1cc88 <fn_set_options+0x2c0>)
   1ca26:	681b      	ldr	r3, [r3, #0]
   1ca28:	1c5a      	adds	r2, r3, #1
   1ca2a:	4b97      	ldr	r3, [pc, #604]	; (1cc88 <fn_set_options+0x2c0>)
   1ca2c:	601a      	str	r2, [r3, #0]
			break;
   1ca2e:	e058      	b.n	1cae2 <fn_set_options+0x11a>
		case input_button1:
			switch (cur_Y){
   1ca30:	4b95      	ldr	r3, [pc, #596]	; (1cc88 <fn_set_options+0x2c0>)
   1ca32:	681b      	ldr	r3, [r3, #0]
   1ca34:	2b07      	cmp	r3, #7
   1ca36:	d855      	bhi.n	1cae4 <fn_set_options+0x11c>
   1ca38:	009a      	lsls	r2, r3, #2
   1ca3a:	4b97      	ldr	r3, [pc, #604]	; (1cc98 <fn_set_options+0x2d0>)
   1ca3c:	18d3      	adds	r3, r2, r3
   1ca3e:	681b      	ldr	r3, [r3, #0]
   1ca40:	469f      	mov	pc, r3
				case 1:
					//  Distance Units
					if (options.current_unit_dist == feet){ options.current_unit_dist = meters;}
   1ca42:	4b96      	ldr	r3, [pc, #600]	; (1cc9c <fn_set_options+0x2d4>)
   1ca44:	781b      	ldrb	r3, [r3, #0]
   1ca46:	2b00      	cmp	r3, #0
   1ca48:	d103      	bne.n	1ca52 <fn_set_options+0x8a>
   1ca4a:	4b94      	ldr	r3, [pc, #592]	; (1cc9c <fn_set_options+0x2d4>)
   1ca4c:	2201      	movs	r2, #1
   1ca4e:	701a      	strb	r2, [r3, #0]
   1ca50:	e002      	b.n	1ca58 <fn_set_options+0x90>
					else{options.current_unit_dist = feet;}
   1ca52:	4b92      	ldr	r3, [pc, #584]	; (1cc9c <fn_set_options+0x2d4>)
   1ca54:	2200      	movs	r2, #0
   1ca56:	701a      	strb	r2, [r3, #0]
					save_user_settings();
   1ca58:	4b91      	ldr	r3, [pc, #580]	; (1cca0 <fn_set_options+0x2d8>)
   1ca5a:	4798      	blx	r3
					break;
   1ca5c:	e042      	b.n	1cae4 <fn_set_options+0x11c>
				case 2:
					//  Distance Units
					if (options.current_unit_temp == celsius){ options.current_unit_temp = fahrenheit;}
   1ca5e:	4b8f      	ldr	r3, [pc, #572]	; (1cc9c <fn_set_options+0x2d4>)
   1ca60:	785b      	ldrb	r3, [r3, #1]
   1ca62:	2b04      	cmp	r3, #4
   1ca64:	d103      	bne.n	1ca6e <fn_set_options+0xa6>
   1ca66:	4b8d      	ldr	r3, [pc, #564]	; (1cc9c <fn_set_options+0x2d4>)
   1ca68:	2205      	movs	r2, #5
   1ca6a:	705a      	strb	r2, [r3, #1]
   1ca6c:	e002      	b.n	1ca74 <fn_set_options+0xac>
					else{options.current_unit_temp = celsius;}
   1ca6e:	4b8b      	ldr	r3, [pc, #556]	; (1cc9c <fn_set_options+0x2d4>)
   1ca70:	2204      	movs	r2, #4
   1ca72:	705a      	strb	r2, [r3, #1]
					save_user_settings();
   1ca74:	4b8a      	ldr	r3, [pc, #552]	; (1cca0 <fn_set_options+0x2d8>)
   1ca76:	4798      	blx	r3
					break;
   1ca78:	e034      	b.n	1cae4 <fn_set_options+0x11c>
				case 3:
					// Shot Delay
					options.shot_delay = options.shot_delay+1;
   1ca7a:	4b88      	ldr	r3, [pc, #544]	; (1cc9c <fn_set_options+0x2d4>)
   1ca7c:	789b      	ldrb	r3, [r3, #2]
   1ca7e:	3301      	adds	r3, #1
   1ca80:	b2da      	uxtb	r2, r3
   1ca82:	4b86      	ldr	r3, [pc, #536]	; (1cc9c <fn_set_options+0x2d4>)
   1ca84:	709a      	strb	r2, [r3, #2]
					if (options.shot_delay>shot_delay_max){options.shot_delay = 0;}
   1ca86:	4b85      	ldr	r3, [pc, #532]	; (1cc9c <fn_set_options+0x2d4>)
   1ca88:	789b      	ldrb	r3, [r3, #2]
   1ca8a:	2b05      	cmp	r3, #5
   1ca8c:	d902      	bls.n	1ca94 <fn_set_options+0xcc>
   1ca8e:	4b83      	ldr	r3, [pc, #524]	; (1cc9c <fn_set_options+0x2d4>)
   1ca90:	2200      	movs	r2, #0
   1ca92:	709a      	strb	r2, [r3, #2]
					save_user_settings();
   1ca94:	4b82      	ldr	r3, [pc, #520]	; (1cca0 <fn_set_options+0x2d8>)
   1ca96:	4798      	blx	r3
					break;
   1ca98:	e024      	b.n	1cae4 <fn_set_options+0x11c>
				case 4:
					// Charge Current
					if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   1ca9a:	4b80      	ldr	r3, [pc, #512]	; (1cc9c <fn_set_options+0x2d4>)
   1ca9c:	685a      	ldr	r2, [r3, #4]
   1ca9e:	23fa      	movs	r3, #250	; 0xfa
   1caa0:	005b      	lsls	r3, r3, #1
   1caa2:	429a      	cmp	r2, r3
   1caa4:	d103      	bne.n	1caae <fn_set_options+0xe6>
   1caa6:	4b7d      	ldr	r3, [pc, #500]	; (1cc9c <fn_set_options+0x2d4>)
   1caa8:	2264      	movs	r2, #100	; 0x64
   1caaa:	605a      	str	r2, [r3, #4]
   1caac:	e003      	b.n	1cab6 <fn_set_options+0xee>
					else{options.chargeCurrent = 500;}
   1caae:	4b7b      	ldr	r3, [pc, #492]	; (1cc9c <fn_set_options+0x2d4>)
   1cab0:	22fa      	movs	r2, #250	; 0xfa
   1cab2:	0052      	lsls	r2, r2, #1
   1cab4:	605a      	str	r2, [r3, #4]
					setup_charger();
   1cab6:	4b7b      	ldr	r3, [pc, #492]	; (1cca4 <fn_set_options+0x2dc>)
   1cab8:	4798      	blx	r3
					save_user_settings();
   1caba:	4b79      	ldr	r3, [pc, #484]	; (1cca0 <fn_set_options+0x2d8>)
   1cabc:	4798      	blx	r3
					break;
   1cabe:	e011      	b.n	1cae4 <fn_set_options+0x11c>
				case 5:
					// Charge Current
					adjustErrorSensitivity();
   1cac0:	4b79      	ldr	r3, [pc, #484]	; (1cca8 <fn_set_options+0x2e0>)
   1cac2:	4798      	blx	r3
					save_user_settings();
   1cac4:	4b76      	ldr	r3, [pc, #472]	; (1cca0 <fn_set_options+0x2d8>)
   1cac6:	4798      	blx	r3
					break;	
   1cac8:	e00c      	b.n	1cae4 <fn_set_options+0x11c>
				case 6:
					// Backlight Color
					backlightColorToggle();					
   1caca:	4b78      	ldr	r3, [pc, #480]	; (1ccac <fn_set_options+0x2e4>)
   1cacc:	4798      	blx	r3
					save_user_settings();
   1cace:	4b74      	ldr	r3, [pc, #464]	; (1cca0 <fn_set_options+0x2d8>)
   1cad0:	4798      	blx	r3
					break;
   1cad2:	e007      	b.n	1cae4 <fn_set_options+0x11c>
				case 7:
					// Backlight Color
					backlightLevelToggle();
   1cad4:	4b76      	ldr	r3, [pc, #472]	; (1ccb0 <fn_set_options+0x2e8>)
   1cad6:	4798      	blx	r3
					save_user_settings();
   1cad8:	4b71      	ldr	r3, [pc, #452]	; (1cca0 <fn_set_options+0x2d8>)
   1cada:	4798      	blx	r3
					break;
   1cadc:	e002      	b.n	1cae4 <fn_set_options+0x11c>
			break;
   1cade:	46c0      	nop			; (mov r8, r8)
   1cae0:	e000      	b.n	1cae4 <fn_set_options+0x11c>
			break;
   1cae2:	46c0      	nop			; (mov r8, r8)
			

	}
	
	// Display
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1cae4:	4873      	ldr	r0, [pc, #460]	; (1ccb4 <fn_set_options+0x2ec>)
   1cae6:	237f      	movs	r3, #127	; 0x7f
   1cae8:	9300      	str	r3, [sp, #0]
   1caea:	2320      	movs	r3, #32
   1caec:	2207      	movs	r2, #7
   1caee:	2105      	movs	r1, #5
   1caf0:	4c71      	ldr	r4, [pc, #452]	; (1ccb8 <fn_set_options+0x2f0>)
   1caf2:	47a0      	blx	r4
	glcd_clear_buffer();
   1caf4:	4b71      	ldr	r3, [pc, #452]	; (1ccbc <fn_set_options+0x2f4>)
   1caf6:	4798      	blx	r3
	
	//Display Options
	if (options.current_unit_dist==feet){
   1caf8:	4b68      	ldr	r3, [pc, #416]	; (1cc9c <fn_set_options+0x2d4>)
   1cafa:	781b      	ldrb	r3, [r3, #0]
   1cafc:	2b00      	cmp	r3, #0
   1cafe:	d108      	bne.n	1cb12 <fn_set_options+0x14a>
		sprintf(display_str, "Distance:  Feet");
   1cb00:	4a6f      	ldr	r2, [pc, #444]	; (1ccc0 <fn_set_options+0x2f8>)
   1cb02:	4b70      	ldr	r3, [pc, #448]	; (1ccc4 <fn_set_options+0x2fc>)
   1cb04:	0010      	movs	r0, r2
   1cb06:	0019      	movs	r1, r3
   1cb08:	2310      	movs	r3, #16
   1cb0a:	001a      	movs	r2, r3
   1cb0c:	4b6e      	ldr	r3, [pc, #440]	; (1ccc8 <fn_set_options+0x300>)
   1cb0e:	4798      	blx	r3
   1cb10:	e007      	b.n	1cb22 <fn_set_options+0x15a>
	}else{
		sprintf(display_str, "Distance:  Meters");
   1cb12:	4a6b      	ldr	r2, [pc, #428]	; (1ccc0 <fn_set_options+0x2f8>)
   1cb14:	4b6d      	ldr	r3, [pc, #436]	; (1cccc <fn_set_options+0x304>)
   1cb16:	0010      	movs	r0, r2
   1cb18:	0019      	movs	r1, r3
   1cb1a:	2312      	movs	r3, #18
   1cb1c:	001a      	movs	r2, r3
   1cb1e:	4b6a      	ldr	r3, [pc, #424]	; (1ccc8 <fn_set_options+0x300>)
   1cb20:	4798      	blx	r3
	}
	glcd_tiny_draw_string(5, 1, display_str);
   1cb22:	4b67      	ldr	r3, [pc, #412]	; (1ccc0 <fn_set_options+0x2f8>)
   1cb24:	001a      	movs	r2, r3
   1cb26:	2101      	movs	r1, #1
   1cb28:	2005      	movs	r0, #5
   1cb2a:	4b69      	ldr	r3, [pc, #420]	; (1ccd0 <fn_set_options+0x308>)
   1cb2c:	4798      	blx	r3
	if (options.current_unit_temp==fahrenheit){
   1cb2e:	4b5b      	ldr	r3, [pc, #364]	; (1cc9c <fn_set_options+0x2d4>)
   1cb30:	785b      	ldrb	r3, [r3, #1]
   1cb32:	2b05      	cmp	r3, #5
   1cb34:	d108      	bne.n	1cb48 <fn_set_options+0x180>
		sprintf(display_str, "Temp:  Fahrenheit");
   1cb36:	4a62      	ldr	r2, [pc, #392]	; (1ccc0 <fn_set_options+0x2f8>)
   1cb38:	4b66      	ldr	r3, [pc, #408]	; (1ccd4 <fn_set_options+0x30c>)
   1cb3a:	0010      	movs	r0, r2
   1cb3c:	0019      	movs	r1, r3
   1cb3e:	2312      	movs	r3, #18
   1cb40:	001a      	movs	r2, r3
   1cb42:	4b61      	ldr	r3, [pc, #388]	; (1ccc8 <fn_set_options+0x300>)
   1cb44:	4798      	blx	r3
   1cb46:	e007      	b.n	1cb58 <fn_set_options+0x190>
		}else{
		sprintf(display_str, "Temp:  Celsius");
   1cb48:	4a5d      	ldr	r2, [pc, #372]	; (1ccc0 <fn_set_options+0x2f8>)
   1cb4a:	4b63      	ldr	r3, [pc, #396]	; (1ccd8 <fn_set_options+0x310>)
   1cb4c:	0010      	movs	r0, r2
   1cb4e:	0019      	movs	r1, r3
   1cb50:	230f      	movs	r3, #15
   1cb52:	001a      	movs	r2, r3
   1cb54:	4b5c      	ldr	r3, [pc, #368]	; (1ccc8 <fn_set_options+0x300>)
   1cb56:	4798      	blx	r3
	}
	glcd_tiny_draw_string(5, 2, display_str);
   1cb58:	4b59      	ldr	r3, [pc, #356]	; (1ccc0 <fn_set_options+0x2f8>)
   1cb5a:	001a      	movs	r2, r3
   1cb5c:	2102      	movs	r1, #2
   1cb5e:	2005      	movs	r0, #5
   1cb60:	4b5b      	ldr	r3, [pc, #364]	; (1ccd0 <fn_set_options+0x308>)
   1cb62:	4798      	blx	r3
	sprintf(display_str,"Shot Delay: %d sec",options.shot_delay);
   1cb64:	4b4d      	ldr	r3, [pc, #308]	; (1cc9c <fn_set_options+0x2d4>)
   1cb66:	789b      	ldrb	r3, [r3, #2]
   1cb68:	001a      	movs	r2, r3
   1cb6a:	495c      	ldr	r1, [pc, #368]	; (1ccdc <fn_set_options+0x314>)
   1cb6c:	4b54      	ldr	r3, [pc, #336]	; (1ccc0 <fn_set_options+0x2f8>)
   1cb6e:	0018      	movs	r0, r3
   1cb70:	4b5b      	ldr	r3, [pc, #364]	; (1cce0 <fn_set_options+0x318>)
   1cb72:	4798      	blx	r3
	glcd_tiny_draw_string(5, 3, display_str);
   1cb74:	4b52      	ldr	r3, [pc, #328]	; (1ccc0 <fn_set_options+0x2f8>)
   1cb76:	001a      	movs	r2, r3
   1cb78:	2103      	movs	r1, #3
   1cb7a:	2005      	movs	r0, #5
   1cb7c:	4b54      	ldr	r3, [pc, #336]	; (1ccd0 <fn_set_options+0x308>)
   1cb7e:	4798      	blx	r3
	sprintf(display_str,"Charge Curr: %dmA",options.chargeCurrent);
   1cb80:	4b46      	ldr	r3, [pc, #280]	; (1cc9c <fn_set_options+0x2d4>)
   1cb82:	685a      	ldr	r2, [r3, #4]
   1cb84:	4957      	ldr	r1, [pc, #348]	; (1cce4 <fn_set_options+0x31c>)
   1cb86:	4b4e      	ldr	r3, [pc, #312]	; (1ccc0 <fn_set_options+0x2f8>)
   1cb88:	0018      	movs	r0, r3
   1cb8a:	4b55      	ldr	r3, [pc, #340]	; (1cce0 <fn_set_options+0x318>)
   1cb8c:	4798      	blx	r3
	glcd_tiny_draw_string(5, 4, display_str);
   1cb8e:	4b4c      	ldr	r3, [pc, #304]	; (1ccc0 <fn_set_options+0x2f8>)
   1cb90:	001a      	movs	r2, r3
   1cb92:	2104      	movs	r1, #4
   1cb94:	2005      	movs	r0, #5
   1cb96:	4b4e      	ldr	r3, [pc, #312]	; (1ccd0 <fn_set_options+0x308>)
   1cb98:	4798      	blx	r3
	sprintf(display_str,"Err Sens: %0.2f deg", options.errorSensitivity);
   1cb9a:	4b40      	ldr	r3, [pc, #256]	; (1cc9c <fn_set_options+0x2d4>)
   1cb9c:	689a      	ldr	r2, [r3, #8]
   1cb9e:	4b52      	ldr	r3, [pc, #328]	; (1cce8 <fn_set_options+0x320>)
   1cba0:	1c10      	adds	r0, r2, #0
   1cba2:	4798      	blx	r3
   1cba4:	0003      	movs	r3, r0
   1cba6:	000c      	movs	r4, r1
   1cba8:	4950      	ldr	r1, [pc, #320]	; (1ccec <fn_set_options+0x324>)
   1cbaa:	4845      	ldr	r0, [pc, #276]	; (1ccc0 <fn_set_options+0x2f8>)
   1cbac:	001a      	movs	r2, r3
   1cbae:	0023      	movs	r3, r4
   1cbb0:	4c4b      	ldr	r4, [pc, #300]	; (1cce0 <fn_set_options+0x318>)
   1cbb2:	47a0      	blx	r4
	glcd_tiny_draw_string(5, 5, display_str);
   1cbb4:	4b42      	ldr	r3, [pc, #264]	; (1ccc0 <fn_set_options+0x2f8>)
   1cbb6:	001a      	movs	r2, r3
   1cbb8:	2105      	movs	r1, #5
   1cbba:	2005      	movs	r0, #5
   1cbbc:	4b44      	ldr	r3, [pc, #272]	; (1ccd0 <fn_set_options+0x308>)
   1cbbe:	4798      	blx	r3
	sprintf(display_str,"BL Color: %s", backlightGetCurrentColor());
   1cbc0:	4b4b      	ldr	r3, [pc, #300]	; (1ccf0 <fn_set_options+0x328>)
   1cbc2:	4798      	blx	r3
   1cbc4:	0002      	movs	r2, r0
   1cbc6:	494b      	ldr	r1, [pc, #300]	; (1ccf4 <fn_set_options+0x32c>)
   1cbc8:	4b3d      	ldr	r3, [pc, #244]	; (1ccc0 <fn_set_options+0x2f8>)
   1cbca:	0018      	movs	r0, r3
   1cbcc:	4b44      	ldr	r3, [pc, #272]	; (1cce0 <fn_set_options+0x318>)
   1cbce:	4798      	blx	r3
	glcd_tiny_draw_string(5, 6, display_str);
   1cbd0:	4b3b      	ldr	r3, [pc, #236]	; (1ccc0 <fn_set_options+0x2f8>)
   1cbd2:	001a      	movs	r2, r3
   1cbd4:	2106      	movs	r1, #6
   1cbd6:	2005      	movs	r0, #5
   1cbd8:	4b3d      	ldr	r3, [pc, #244]	; (1ccd0 <fn_set_options+0x308>)
   1cbda:	4798      	blx	r3
	sprintf(display_str,"BL Level: %d", options.backlight_setting.brightness);
   1cbdc:	4b2f      	ldr	r3, [pc, #188]	; (1cc9c <fn_set_options+0x2d4>)
   1cbde:	7b1b      	ldrb	r3, [r3, #12]
   1cbe0:	001a      	movs	r2, r3
   1cbe2:	4945      	ldr	r1, [pc, #276]	; (1ccf8 <fn_set_options+0x330>)
   1cbe4:	4b36      	ldr	r3, [pc, #216]	; (1ccc0 <fn_set_options+0x2f8>)
   1cbe6:	0018      	movs	r0, r3
   1cbe8:	4b3d      	ldr	r3, [pc, #244]	; (1cce0 <fn_set_options+0x318>)
   1cbea:	4798      	blx	r3
	glcd_tiny_draw_string(5, 7, display_str);
   1cbec:	4b34      	ldr	r3, [pc, #208]	; (1ccc0 <fn_set_options+0x2f8>)
   1cbee:	001a      	movs	r2, r3
   1cbf0:	2107      	movs	r1, #7
   1cbf2:	2005      	movs	r0, #5
   1cbf4:	4b36      	ldr	r3, [pc, #216]	; (1ccd0 <fn_set_options+0x308>)
   1cbf6:	4798      	blx	r3
	
	//  Display Title
	sprintf(display_str,"Options:");
   1cbf8:	4a31      	ldr	r2, [pc, #196]	; (1ccc0 <fn_set_options+0x2f8>)
   1cbfa:	4b40      	ldr	r3, [pc, #256]	; (1ccfc <fn_set_options+0x334>)
   1cbfc:	0010      	movs	r0, r2
   1cbfe:	0019      	movs	r1, r3
   1cc00:	2309      	movs	r3, #9
   1cc02:	001a      	movs	r2, r3
   1cc04:	4b30      	ldr	r3, [pc, #192]	; (1ccc8 <fn_set_options+0x300>)
   1cc06:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1cc08:	4b2d      	ldr	r3, [pc, #180]	; (1ccc0 <fn_set_options+0x2f8>)
   1cc0a:	001a      	movs	r2, r3
   1cc0c:	2100      	movs	r1, #0
   1cc0e:	2000      	movs	r0, #0
   1cc10:	4b2f      	ldr	r3, [pc, #188]	; (1ccd0 <fn_set_options+0x308>)
   1cc12:	4798      	blx	r3
	
	// Display soft keys
	draw_arrows(2);//  Draw up arrow at button 2
   1cc14:	2002      	movs	r0, #2
   1cc16:	4b3a      	ldr	r3, [pc, #232]	; (1cd00 <fn_set_options+0x338>)
   1cc18:	4798      	blx	r3
	draw_arrows(3);//  Draw down arrow at button 3
   1cc1a:	2003      	movs	r0, #3
   1cc1c:	4b38      	ldr	r3, [pc, #224]	; (1cd00 <fn_set_options+0x338>)
   1cc1e:	4798      	blx	r3
	sprintf(display_str, "Adjust");
   1cc20:	4a27      	ldr	r2, [pc, #156]	; (1ccc0 <fn_set_options+0x2f8>)
   1cc22:	4b38      	ldr	r3, [pc, #224]	; (1cd04 <fn_set_options+0x33c>)
   1cc24:	0010      	movs	r0, r2
   1cc26:	0019      	movs	r1, r3
   1cc28:	2307      	movs	r3, #7
   1cc2a:	001a      	movs	r2, r3
   1cc2c:	4b26      	ldr	r3, [pc, #152]	; (1ccc8 <fn_set_options+0x300>)
   1cc2e:	4798      	blx	r3
	glcd_tiny_draw_string(90,0,display_str);
   1cc30:	4b23      	ldr	r3, [pc, #140]	; (1ccc0 <fn_set_options+0x2f8>)
   1cc32:	001a      	movs	r2, r3
   1cc34:	2100      	movs	r1, #0
   1cc36:	205a      	movs	r0, #90	; 0x5a
   1cc38:	4b25      	ldr	r3, [pc, #148]	; (1ccd0 <fn_set_options+0x308>)
   1cc3a:	4798      	blx	r3
	sprintf(display_str, "Back");
   1cc3c:	4a20      	ldr	r2, [pc, #128]	; (1ccc0 <fn_set_options+0x2f8>)
   1cc3e:	4b32      	ldr	r3, [pc, #200]	; (1cd08 <fn_set_options+0x340>)
   1cc40:	0010      	movs	r0, r2
   1cc42:	0019      	movs	r1, r3
   1cc44:	2305      	movs	r3, #5
   1cc46:	001a      	movs	r2, r3
   1cc48:	4b1f      	ldr	r3, [pc, #124]	; (1ccc8 <fn_set_options+0x300>)
   1cc4a:	4798      	blx	r3
	glcd_tiny_draw_string(104,7,display_str);
   1cc4c:	4b1c      	ldr	r3, [pc, #112]	; (1ccc0 <fn_set_options+0x2f8>)
   1cc4e:	001a      	movs	r2, r3
   1cc50:	2107      	movs	r1, #7
   1cc52:	2068      	movs	r0, #104	; 0x68
   1cc54:	4b1e      	ldr	r3, [pc, #120]	; (1ccd0 <fn_set_options+0x308>)
   1cc56:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, ">");
   1cc58:	4a19      	ldr	r2, [pc, #100]	; (1ccc0 <fn_set_options+0x2f8>)
   1cc5a:	4b2c      	ldr	r3, [pc, #176]	; (1cd0c <fn_set_options+0x344>)
   1cc5c:	0010      	movs	r0, r2
   1cc5e:	0019      	movs	r1, r3
   1cc60:	2302      	movs	r3, #2
   1cc62:	001a      	movs	r2, r3
   1cc64:	4b18      	ldr	r3, [pc, #96]	; (1ccc8 <fn_set_options+0x300>)
   1cc66:	4798      	blx	r3
	glcd_tiny_draw_string(0, cur_Y,display_str);
   1cc68:	4b07      	ldr	r3, [pc, #28]	; (1cc88 <fn_set_options+0x2c0>)
   1cc6a:	681b      	ldr	r3, [r3, #0]
   1cc6c:	b2db      	uxtb	r3, r3
   1cc6e:	4a14      	ldr	r2, [pc, #80]	; (1ccc0 <fn_set_options+0x2f8>)
   1cc70:	0019      	movs	r1, r3
   1cc72:	2000      	movs	r0, #0
   1cc74:	4b16      	ldr	r3, [pc, #88]	; (1ccd0 <fn_set_options+0x308>)
   1cc76:	4798      	blx	r3
		
	glcd_write();
   1cc78:	4b25      	ldr	r3, [pc, #148]	; (1cd10 <fn_set_options+0x348>)
   1cc7a:	4798      	blx	r3

}
   1cc7c:	46c0      	nop			; (mov r8, r8)
   1cc7e:	46bd      	mov	sp, r7
   1cc80:	b001      	add	sp, #4
   1cc82:	bd90      	pop	{r4, r7, pc}
   1cc84:	200000e8 	.word	0x200000e8
   1cc88:	20003494 	.word	0x20003494
   1cc8c:	2000450c 	.word	0x2000450c
   1cc90:	20003fec 	.word	0x20003fec
   1cc94:	20004136 	.word	0x20004136
   1cc98:	000298d0 	.word	0x000298d0
   1cc9c:	200034a8 	.word	0x200034a8
   1cca0:	00001e11 	.word	0x00001e11
   1cca4:	00001c95 	.word	0x00001c95
   1cca8:	000023b5 	.word	0x000023b5
   1ccac:	000015d9 	.word	0x000015d9
   1ccb0:	00001665 	.word	0x00001665
   1ccb4:	00028b80 	.word	0x00028b80
   1ccb8:	00015f85 	.word	0x00015f85
   1ccbc:	00015025 	.word	0x00015025
   1ccc0:	20003534 	.word	0x20003534
   1ccc4:	000296b8 	.word	0x000296b8
   1ccc8:	00023c19 	.word	0x00023c19
   1cccc:	000296c8 	.word	0x000296c8
   1ccd0:	00016111 	.word	0x00016111
   1ccd4:	000296dc 	.word	0x000296dc
   1ccd8:	000296f0 	.word	0x000296f0
   1ccdc:	00029700 	.word	0x00029700
   1cce0:	00023d31 	.word	0x00023d31
   1cce4:	00029714 	.word	0x00029714
   1cce8:	00023a0d 	.word	0x00023a0d
   1ccec:	00029728 	.word	0x00029728
   1ccf0:	00001699 	.word	0x00001699
   1ccf4:	0002973c 	.word	0x0002973c
   1ccf8:	0002974c 	.word	0x0002974c
   1ccfc:	0002975c 	.word	0x0002975c
   1cd00:	0001d8c1 	.word	0x0001d8c1
   1cd04:	00029768 	.word	0x00029768
   1cd08:	00029540 	.word	0x00029540
   1cd0c:	000295e8 	.word	0x000295e8
   1cd10:	00015869 	.word	0x00015869

0001cd14 <fn_set_bluetooth>:



void fn_set_bluetooth(void){
   1cd14:	b590      	push	{r4, r7, lr}
   1cd16:	b087      	sub	sp, #28
   1cd18:	af02      	add	r7, sp, #8
	char str_on[] = "On";
   1cd1a:	1d3b      	adds	r3, r7, #4
   1cd1c:	4ac3      	ldr	r2, [pc, #780]	; (1d02c <fn_set_bluetooth+0x318>)
   1cd1e:	8811      	ldrh	r1, [r2, #0]
   1cd20:	8019      	strh	r1, [r3, #0]
   1cd22:	7892      	ldrb	r2, [r2, #2]
   1cd24:	709a      	strb	r2, [r3, #2]
	char str_off[] = "Off";
   1cd26:	003b      	movs	r3, r7
   1cd28:	4ac1      	ldr	r2, [pc, #772]	; (1d030 <fn_set_bluetooth+0x31c>)
   1cd2a:	601a      	str	r2, [r3, #0]
	char *str_ptr;
	bool current_state;
	static bool USART_enabled;
	//debug
	bool debug;
	debug = ioport_get_pin_level(BLE_ota);
   1cd2c:	230b      	movs	r3, #11
   1cd2e:	18fc      	adds	r4, r7, r3
   1cd30:	2036      	movs	r0, #54	; 0x36
   1cd32:	4bc0      	ldr	r3, [pc, #768]	; (1d034 <fn_set_bluetooth+0x320>)
   1cd34:	4798      	blx	r3
   1cd36:	0003      	movs	r3, r0
   1cd38:	7023      	strb	r3, [r4, #0]
	
	if (state_change) {
   1cd3a:	4bbf      	ldr	r3, [pc, #764]	; (1d038 <fn_set_bluetooth+0x324>)
   1cd3c:	781b      	ldrb	r3, [r3, #0]
   1cd3e:	b2db      	uxtb	r3, r3
   1cd40:	2b00      	cmp	r3, #0
   1cd42:	d00b      	beq.n	1cd5c <fn_set_bluetooth+0x48>
		cur_Y=2;
   1cd44:	4bbd      	ldr	r3, [pc, #756]	; (1d03c <fn_set_bluetooth+0x328>)
   1cd46:	2202      	movs	r2, #2
   1cd48:	601a      	str	r2, [r3, #0]
		cur_Y_low=2;
   1cd4a:	4bbd      	ldr	r3, [pc, #756]	; (1d040 <fn_set_bluetooth+0x32c>)
   1cd4c:	2202      	movs	r2, #2
   1cd4e:	601a      	str	r2, [r3, #0]
		cur_Y_high=5;
   1cd50:	4bbc      	ldr	r3, [pc, #752]	; (1d044 <fn_set_bluetooth+0x330>)
   1cd52:	2205      	movs	r2, #5
   1cd54:	601a      	str	r2, [r3, #0]
		last_input = input_none;
   1cd56:	4bbc      	ldr	r3, [pc, #752]	; (1d048 <fn_set_bluetooth+0x334>)
   1cd58:	2200      	movs	r2, #0
   1cd5a:	701a      	strb	r2, [r3, #0]
		
	}
	
	switch(last_input){
   1cd5c:	4bba      	ldr	r3, [pc, #744]	; (1d048 <fn_set_bluetooth+0x334>)
   1cd5e:	781b      	ldrb	r3, [r3, #0]
   1cd60:	b2db      	uxtb	r3, r3
   1cd62:	2b02      	cmp	r3, #2
   1cd64:	d004      	beq.n	1cd70 <fn_set_bluetooth+0x5c>
   1cd66:	2b03      	cmp	r3, #3
   1cd68:	d00f      	beq.n	1cd8a <fn_set_bluetooth+0x76>
   1cd6a:	2b01      	cmp	r3, #1
   1cd6c:	d01a      	beq.n	1cda4 <fn_set_bluetooth+0x90>
   1cd6e:	e0a3      	b.n	1ceb8 <fn_set_bluetooth+0x1a4>
		case input_button2:
			if(cur_Y > cur_Y_low){--cur_Y; }
   1cd70:	4bb2      	ldr	r3, [pc, #712]	; (1d03c <fn_set_bluetooth+0x328>)
   1cd72:	681a      	ldr	r2, [r3, #0]
   1cd74:	4bb2      	ldr	r3, [pc, #712]	; (1d040 <fn_set_bluetooth+0x32c>)
   1cd76:	681b      	ldr	r3, [r3, #0]
   1cd78:	429a      	cmp	r2, r3
   1cd7a:	dc00      	bgt.n	1cd7e <fn_set_bluetooth+0x6a>
   1cd7c:	e099      	b.n	1ceb2 <fn_set_bluetooth+0x19e>
   1cd7e:	4baf      	ldr	r3, [pc, #700]	; (1d03c <fn_set_bluetooth+0x328>)
   1cd80:	681b      	ldr	r3, [r3, #0]
   1cd82:	1e5a      	subs	r2, r3, #1
   1cd84:	4bad      	ldr	r3, [pc, #692]	; (1d03c <fn_set_bluetooth+0x328>)
   1cd86:	601a      	str	r2, [r3, #0]
			break;
   1cd88:	e093      	b.n	1ceb2 <fn_set_bluetooth+0x19e>
		case input_button3:
			if(cur_Y < cur_Y_high){++cur_Y; }
   1cd8a:	4bac      	ldr	r3, [pc, #688]	; (1d03c <fn_set_bluetooth+0x328>)
   1cd8c:	681a      	ldr	r2, [r3, #0]
   1cd8e:	4bad      	ldr	r3, [pc, #692]	; (1d044 <fn_set_bluetooth+0x330>)
   1cd90:	681b      	ldr	r3, [r3, #0]
   1cd92:	429a      	cmp	r2, r3
   1cd94:	db00      	blt.n	1cd98 <fn_set_bluetooth+0x84>
   1cd96:	e08e      	b.n	1ceb6 <fn_set_bluetooth+0x1a2>
   1cd98:	4ba8      	ldr	r3, [pc, #672]	; (1d03c <fn_set_bluetooth+0x328>)
   1cd9a:	681b      	ldr	r3, [r3, #0]
   1cd9c:	1c5a      	adds	r2, r3, #1
   1cd9e:	4ba7      	ldr	r3, [pc, #668]	; (1d03c <fn_set_bluetooth+0x328>)
   1cda0:	601a      	str	r2, [r3, #0]
			break;
   1cda2:	e088      	b.n	1ceb6 <fn_set_bluetooth+0x1a2>
		case input_button1:
			if(cur_Y == 2){
   1cda4:	4ba5      	ldr	r3, [pc, #660]	; (1d03c <fn_set_bluetooth+0x328>)
   1cda6:	681b      	ldr	r3, [r3, #0]
   1cda8:	2b02      	cmp	r3, #2
   1cdaa:	d118      	bne.n	1cdde <fn_set_bluetooth+0xca>
				current_state = ioport_get_pin_level(BLE_autorun);
   1cdac:	230a      	movs	r3, #10
   1cdae:	18fc      	adds	r4, r7, r3
   1cdb0:	200e      	movs	r0, #14
   1cdb2:	4ba0      	ldr	r3, [pc, #640]	; (1d034 <fn_set_bluetooth+0x320>)
   1cdb4:	4798      	blx	r3
   1cdb6:	0003      	movs	r3, r0
   1cdb8:	7023      	strb	r3, [r4, #0]
				ioport_set_pin_level(BLE_autorun, !current_state);
   1cdba:	230a      	movs	r3, #10
   1cdbc:	18fb      	adds	r3, r7, r3
   1cdbe:	781b      	ldrb	r3, [r3, #0]
   1cdc0:	1e5a      	subs	r2, r3, #1
   1cdc2:	4193      	sbcs	r3, r2
   1cdc4:	b2db      	uxtb	r3, r3
   1cdc6:	2201      	movs	r2, #1
   1cdc8:	4053      	eors	r3, r2
   1cdca:	b2db      	uxtb	r3, r3
   1cdcc:	1c1a      	adds	r2, r3, #0
   1cdce:	2301      	movs	r3, #1
   1cdd0:	4013      	ands	r3, r2
   1cdd2:	b2db      	uxtb	r3, r3
   1cdd4:	0019      	movs	r1, r3
   1cdd6:	200e      	movs	r0, #14
   1cdd8:	4b9c      	ldr	r3, [pc, #624]	; (1d04c <fn_set_bluetooth+0x338>)
   1cdda:	4798      	blx	r3
   1cddc:	e06c      	b.n	1ceb8 <fn_set_bluetooth+0x1a4>
			} else if (cur_Y==3){
   1cdde:	4b97      	ldr	r3, [pc, #604]	; (1d03c <fn_set_bluetooth+0x328>)
   1cde0:	681b      	ldr	r3, [r3, #0]
   1cde2:	2b03      	cmp	r3, #3
   1cde4:	d118      	bne.n	1ce18 <fn_set_bluetooth+0x104>
				current_state = ioport_get_pin_level(BLE_reset);
   1cde6:	230a      	movs	r3, #10
   1cde8:	18fc      	adds	r4, r7, r3
   1cdea:	2003      	movs	r0, #3
   1cdec:	4b91      	ldr	r3, [pc, #580]	; (1d034 <fn_set_bluetooth+0x320>)
   1cdee:	4798      	blx	r3
   1cdf0:	0003      	movs	r3, r0
   1cdf2:	7023      	strb	r3, [r4, #0]
				ioport_set_pin_level(BLE_reset, !current_state);
   1cdf4:	230a      	movs	r3, #10
   1cdf6:	18fb      	adds	r3, r7, r3
   1cdf8:	781b      	ldrb	r3, [r3, #0]
   1cdfa:	1e5a      	subs	r2, r3, #1
   1cdfc:	4193      	sbcs	r3, r2
   1cdfe:	b2db      	uxtb	r3, r3
   1ce00:	2201      	movs	r2, #1
   1ce02:	4053      	eors	r3, r2
   1ce04:	b2db      	uxtb	r3, r3
   1ce06:	1c1a      	adds	r2, r3, #0
   1ce08:	2301      	movs	r3, #1
   1ce0a:	4013      	ands	r3, r2
   1ce0c:	b2db      	uxtb	r3, r3
   1ce0e:	0019      	movs	r1, r3
   1ce10:	2003      	movs	r0, #3
   1ce12:	4b8e      	ldr	r3, [pc, #568]	; (1d04c <fn_set_bluetooth+0x338>)
   1ce14:	4798      	blx	r3
   1ce16:	e04f      	b.n	1ceb8 <fn_set_bluetooth+0x1a4>
			} else if (cur_Y==4){
   1ce18:	4b88      	ldr	r3, [pc, #544]	; (1d03c <fn_set_bluetooth+0x328>)
   1ce1a:	681b      	ldr	r3, [r3, #0]
   1ce1c:	2b04      	cmp	r3, #4
   1ce1e:	d118      	bne.n	1ce52 <fn_set_bluetooth+0x13e>
				current_state = ioport_get_pin_level(BLE_ota);
   1ce20:	230a      	movs	r3, #10
   1ce22:	18fc      	adds	r4, r7, r3
   1ce24:	2036      	movs	r0, #54	; 0x36
   1ce26:	4b83      	ldr	r3, [pc, #524]	; (1d034 <fn_set_bluetooth+0x320>)
   1ce28:	4798      	blx	r3
   1ce2a:	0003      	movs	r3, r0
   1ce2c:	7023      	strb	r3, [r4, #0]
				ioport_set_pin_level(BLE_ota, !current_state);		
   1ce2e:	230a      	movs	r3, #10
   1ce30:	18fb      	adds	r3, r7, r3
   1ce32:	781b      	ldrb	r3, [r3, #0]
   1ce34:	1e5a      	subs	r2, r3, #1
   1ce36:	4193      	sbcs	r3, r2
   1ce38:	b2db      	uxtb	r3, r3
   1ce3a:	2201      	movs	r2, #1
   1ce3c:	4053      	eors	r3, r2
   1ce3e:	b2db      	uxtb	r3, r3
   1ce40:	1c1a      	adds	r2, r3, #0
   1ce42:	2301      	movs	r3, #1
   1ce44:	4013      	ands	r3, r2
   1ce46:	b2db      	uxtb	r3, r3
   1ce48:	0019      	movs	r1, r3
   1ce4a:	2036      	movs	r0, #54	; 0x36
   1ce4c:	4b7f      	ldr	r3, [pc, #508]	; (1d04c <fn_set_bluetooth+0x338>)
   1ce4e:	4798      	blx	r3
   1ce50:	e032      	b.n	1ceb8 <fn_set_bluetooth+0x1a4>
			} else if (cur_Y==5){
   1ce52:	4b7a      	ldr	r3, [pc, #488]	; (1d03c <fn_set_bluetooth+0x328>)
   1ce54:	681b      	ldr	r3, [r3, #0]
   1ce56:	2b05      	cmp	r3, #5
   1ce58:	d12e      	bne.n	1ceb8 <fn_set_bluetooth+0x1a4>
				if (USART_BLE_enabled){
   1ce5a:	4b7d      	ldr	r3, [pc, #500]	; (1d050 <fn_set_bluetooth+0x33c>)
   1ce5c:	781b      	ldrb	r3, [r3, #0]
   1ce5e:	2b00      	cmp	r3, #0
   1ce60:	d021      	beq.n	1cea6 <fn_set_bluetooth+0x192>
					USART_BLE_enabled = false;
   1ce62:	4b7b      	ldr	r3, [pc, #492]	; (1d050 <fn_set_bluetooth+0x33c>)
   1ce64:	2200      	movs	r2, #0
   1ce66:	701a      	strb	r2, [r3, #0]
					usart_disable(&usart_BLE);
   1ce68:	4b7a      	ldr	r3, [pc, #488]	; (1d054 <fn_set_bluetooth+0x340>)
   1ce6a:	0018      	movs	r0, r3
   1ce6c:	4b7a      	ldr	r3, [pc, #488]	; (1d058 <fn_set_bluetooth+0x344>)
   1ce6e:	4798      	blx	r3
					ioport_set_pin_dir(MCU_RTS1, IOPORT_DIR_OUTPUT);
   1ce70:	2101      	movs	r1, #1
   1ce72:	200a      	movs	r0, #10
   1ce74:	4b79      	ldr	r3, [pc, #484]	; (1d05c <fn_set_bluetooth+0x348>)
   1ce76:	4798      	blx	r3
					ioport_set_pin_level(MCU_RTS1, false);
   1ce78:	2100      	movs	r1, #0
   1ce7a:	200a      	movs	r0, #10
   1ce7c:	4b73      	ldr	r3, [pc, #460]	; (1d04c <fn_set_bluetooth+0x338>)
   1ce7e:	4798      	blx	r3
					ioport_set_pin_dir(MCU_CTS1, IOPORT_DIR_INPUT);
   1ce80:	2100      	movs	r1, #0
   1ce82:	200b      	movs	r0, #11
   1ce84:	4b75      	ldr	r3, [pc, #468]	; (1d05c <fn_set_bluetooth+0x348>)
   1ce86:	4798      	blx	r3
					ioport_reset_pin_mode(MCU_TX1);
   1ce88:	2008      	movs	r0, #8
   1ce8a:	4b75      	ldr	r3, [pc, #468]	; (1d060 <fn_set_bluetooth+0x34c>)
   1ce8c:	4798      	blx	r3
					ioport_reset_pin_mode(MCU_RX1);
   1ce8e:	2009      	movs	r0, #9
   1ce90:	4b73      	ldr	r3, [pc, #460]	; (1d060 <fn_set_bluetooth+0x34c>)
   1ce92:	4798      	blx	r3
					ioport_set_pin_dir(MCU_TX1, IOPORT_DIR_INPUT);
   1ce94:	2100      	movs	r1, #0
   1ce96:	2008      	movs	r0, #8
   1ce98:	4b70      	ldr	r3, [pc, #448]	; (1d05c <fn_set_bluetooth+0x348>)
   1ce9a:	4798      	blx	r3
					ioport_set_pin_dir(MCU_RX1, IOPORT_DIR_INPUT);
   1ce9c:	2100      	movs	r1, #0
   1ce9e:	2009      	movs	r0, #9
   1cea0:	4b6e      	ldr	r3, [pc, #440]	; (1d05c <fn_set_bluetooth+0x348>)
   1cea2:	4798      	blx	r3
   1cea4:	e008      	b.n	1ceb8 <fn_set_bluetooth+0x1a4>
				}else{
					USART_BLE_enabled = true;
   1cea6:	4b6a      	ldr	r3, [pc, #424]	; (1d050 <fn_set_bluetooth+0x33c>)
   1cea8:	2201      	movs	r2, #1
   1ceaa:	701a      	strb	r2, [r3, #0]
					configure_usart();
   1ceac:	4b6d      	ldr	r3, [pc, #436]	; (1d064 <fn_set_bluetooth+0x350>)
   1ceae:	4798      	blx	r3
   1ceb0:	e002      	b.n	1ceb8 <fn_set_bluetooth+0x1a4>
			break;
   1ceb2:	46c0      	nop			; (mov r8, r8)
   1ceb4:	e000      	b.n	1ceb8 <fn_set_bluetooth+0x1a4>
			break;
   1ceb6:	46c0      	nop			; (mov r8, r8)
			}
	}


	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1ceb8:	486b      	ldr	r0, [pc, #428]	; (1d068 <fn_set_bluetooth+0x354>)
   1ceba:	237f      	movs	r3, #127	; 0x7f
   1cebc:	9300      	str	r3, [sp, #0]
   1cebe:	2320      	movs	r3, #32
   1cec0:	2207      	movs	r2, #7
   1cec2:	2105      	movs	r1, #5
   1cec4:	4c69      	ldr	r4, [pc, #420]	; (1d06c <fn_set_bluetooth+0x358>)
   1cec6:	47a0      	blx	r4
	glcd_clear_buffer();
   1cec8:	4b69      	ldr	r3, [pc, #420]	; (1d070 <fn_set_bluetooth+0x35c>)
   1ceca:	4798      	blx	r3
	
	//Display Options
	sprintf(display_str,"AutoRun On/Off");
   1cecc:	4a69      	ldr	r2, [pc, #420]	; (1d074 <fn_set_bluetooth+0x360>)
   1cece:	4b6a      	ldr	r3, [pc, #424]	; (1d078 <fn_set_bluetooth+0x364>)
   1ced0:	0010      	movs	r0, r2
   1ced2:	0019      	movs	r1, r3
   1ced4:	230f      	movs	r3, #15
   1ced6:	001a      	movs	r2, r3
   1ced8:	4b68      	ldr	r3, [pc, #416]	; (1d07c <fn_set_bluetooth+0x368>)
   1ceda:	4798      	blx	r3
	glcd_tiny_draw_string(25, 2, display_str);
   1cedc:	4b65      	ldr	r3, [pc, #404]	; (1d074 <fn_set_bluetooth+0x360>)
   1cede:	001a      	movs	r2, r3
   1cee0:	2102      	movs	r1, #2
   1cee2:	2019      	movs	r0, #25
   1cee4:	4b66      	ldr	r3, [pc, #408]	; (1d080 <fn_set_bluetooth+0x36c>)
   1cee6:	4798      	blx	r3
	sprintf(display_str,"Reset On/Off");
   1cee8:	4a62      	ldr	r2, [pc, #392]	; (1d074 <fn_set_bluetooth+0x360>)
   1ceea:	4b66      	ldr	r3, [pc, #408]	; (1d084 <fn_set_bluetooth+0x370>)
   1ceec:	0010      	movs	r0, r2
   1ceee:	0019      	movs	r1, r3
   1cef0:	230d      	movs	r3, #13
   1cef2:	001a      	movs	r2, r3
   1cef4:	4b61      	ldr	r3, [pc, #388]	; (1d07c <fn_set_bluetooth+0x368>)
   1cef6:	4798      	blx	r3
	glcd_tiny_draw_string(25, 3, display_str);
   1cef8:	4b5e      	ldr	r3, [pc, #376]	; (1d074 <fn_set_bluetooth+0x360>)
   1cefa:	001a      	movs	r2, r3
   1cefc:	2103      	movs	r1, #3
   1cefe:	2019      	movs	r0, #25
   1cf00:	4b5f      	ldr	r3, [pc, #380]	; (1d080 <fn_set_bluetooth+0x36c>)
   1cf02:	4798      	blx	r3
	sprintf(display_str,"OTA On/Off");
   1cf04:	4a5b      	ldr	r2, [pc, #364]	; (1d074 <fn_set_bluetooth+0x360>)
   1cf06:	4b60      	ldr	r3, [pc, #384]	; (1d088 <fn_set_bluetooth+0x374>)
   1cf08:	0010      	movs	r0, r2
   1cf0a:	0019      	movs	r1, r3
   1cf0c:	230b      	movs	r3, #11
   1cf0e:	001a      	movs	r2, r3
   1cf10:	4b5a      	ldr	r3, [pc, #360]	; (1d07c <fn_set_bluetooth+0x368>)
   1cf12:	4798      	blx	r3
	glcd_tiny_draw_string(25, 4, display_str);
   1cf14:	4b57      	ldr	r3, [pc, #348]	; (1d074 <fn_set_bluetooth+0x360>)
   1cf16:	001a      	movs	r2, r3
   1cf18:	2104      	movs	r1, #4
   1cf1a:	2019      	movs	r0, #25
   1cf1c:	4b58      	ldr	r3, [pc, #352]	; (1d080 <fn_set_bluetooth+0x36c>)
   1cf1e:	4798      	blx	r3
	sprintf(display_str,"MC UART On/Off");
   1cf20:	4a54      	ldr	r2, [pc, #336]	; (1d074 <fn_set_bluetooth+0x360>)
   1cf22:	4b5a      	ldr	r3, [pc, #360]	; (1d08c <fn_set_bluetooth+0x378>)
   1cf24:	0010      	movs	r0, r2
   1cf26:	0019      	movs	r1, r3
   1cf28:	230f      	movs	r3, #15
   1cf2a:	001a      	movs	r2, r3
   1cf2c:	4b53      	ldr	r3, [pc, #332]	; (1d07c <fn_set_bluetooth+0x368>)
   1cf2e:	4798      	blx	r3
	glcd_tiny_draw_string(25, 5, display_str);
   1cf30:	4b50      	ldr	r3, [pc, #320]	; (1d074 <fn_set_bluetooth+0x360>)
   1cf32:	001a      	movs	r2, r3
   1cf34:	2105      	movs	r1, #5
   1cf36:	2019      	movs	r0, #25
   1cf38:	4b51      	ldr	r3, [pc, #324]	; (1d080 <fn_set_bluetooth+0x36c>)
   1cf3a:	4798      	blx	r3
	
	// Display soft keys
	sprintf(display_str,"Bluetooth:     Adjust");
   1cf3c:	4a4d      	ldr	r2, [pc, #308]	; (1d074 <fn_set_bluetooth+0x360>)
   1cf3e:	4b54      	ldr	r3, [pc, #336]	; (1d090 <fn_set_bluetooth+0x37c>)
   1cf40:	0010      	movs	r0, r2
   1cf42:	0019      	movs	r1, r3
   1cf44:	2316      	movs	r3, #22
   1cf46:	001a      	movs	r2, r3
   1cf48:	4b4c      	ldr	r3, [pc, #304]	; (1d07c <fn_set_bluetooth+0x368>)
   1cf4a:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1cf4c:	4b49      	ldr	r3, [pc, #292]	; (1d074 <fn_set_bluetooth+0x360>)
   1cf4e:	001a      	movs	r2, r3
   1cf50:	2100      	movs	r1, #0
   1cf52:	2000      	movs	r0, #0
   1cf54:	4b4a      	ldr	r3, [pc, #296]	; (1d080 <fn_set_bluetooth+0x36c>)
   1cf56:	4798      	blx	r3
	sprintf(display_str, "Back");
   1cf58:	4a46      	ldr	r2, [pc, #280]	; (1d074 <fn_set_bluetooth+0x360>)
   1cf5a:	4b4e      	ldr	r3, [pc, #312]	; (1d094 <fn_set_bluetooth+0x380>)
   1cf5c:	0010      	movs	r0, r2
   1cf5e:	0019      	movs	r1, r3
   1cf60:	2305      	movs	r3, #5
   1cf62:	001a      	movs	r2, r3
   1cf64:	4b45      	ldr	r3, [pc, #276]	; (1d07c <fn_set_bluetooth+0x368>)
   1cf66:	4798      	blx	r3
	glcd_tiny_draw_string(96,7,display_str);
   1cf68:	4b42      	ldr	r3, [pc, #264]	; (1d074 <fn_set_bluetooth+0x360>)
   1cf6a:	001a      	movs	r2, r3
   1cf6c:	2107      	movs	r1, #7
   1cf6e:	2060      	movs	r0, #96	; 0x60
   1cf70:	4b43      	ldr	r3, [pc, #268]	; (1d080 <fn_set_bluetooth+0x36c>)
   1cf72:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, ">");
   1cf74:	4a3f      	ldr	r2, [pc, #252]	; (1d074 <fn_set_bluetooth+0x360>)
   1cf76:	4b48      	ldr	r3, [pc, #288]	; (1d098 <fn_set_bluetooth+0x384>)
   1cf78:	0010      	movs	r0, r2
   1cf7a:	0019      	movs	r1, r3
   1cf7c:	2302      	movs	r3, #2
   1cf7e:	001a      	movs	r2, r3
   1cf80:	4b3e      	ldr	r3, [pc, #248]	; (1d07c <fn_set_bluetooth+0x368>)
   1cf82:	4798      	blx	r3
	glcd_tiny_draw_string(18, cur_Y,display_str);
   1cf84:	4b2d      	ldr	r3, [pc, #180]	; (1d03c <fn_set_bluetooth+0x328>)
   1cf86:	681b      	ldr	r3, [r3, #0]
   1cf88:	b2db      	uxtb	r3, r3
   1cf8a:	4a3a      	ldr	r2, [pc, #232]	; (1d074 <fn_set_bluetooth+0x360>)
   1cf8c:	0019      	movs	r1, r3
   1cf8e:	2012      	movs	r0, #18
   1cf90:	4b3b      	ldr	r3, [pc, #236]	; (1d080 <fn_set_bluetooth+0x36c>)
   1cf92:	4798      	blx	r3
	
	debug = ioport_get_pin_level(BLE_ota);			
   1cf94:	230b      	movs	r3, #11
   1cf96:	18fc      	adds	r4, r7, r3
   1cf98:	2036      	movs	r0, #54	; 0x36
   1cf9a:	4b26      	ldr	r3, [pc, #152]	; (1d034 <fn_set_bluetooth+0x320>)
   1cf9c:	4798      	blx	r3
   1cf9e:	0003      	movs	r3, r0
   1cfa0:	7023      	strb	r3, [r4, #0]
	//Display Status
	if (ioport_get_pin_level(BLE_autorun)){ str_ptr = str_off;}
   1cfa2:	200e      	movs	r0, #14
   1cfa4:	4b23      	ldr	r3, [pc, #140]	; (1d034 <fn_set_bluetooth+0x320>)
   1cfa6:	4798      	blx	r3
   1cfa8:	1e03      	subs	r3, r0, #0
   1cfaa:	d002      	beq.n	1cfb2 <fn_set_bluetooth+0x29e>
   1cfac:	003b      	movs	r3, r7
   1cfae:	60fb      	str	r3, [r7, #12]
   1cfb0:	e001      	b.n	1cfb6 <fn_set_bluetooth+0x2a2>
	else{ str_ptr = str_on;}
   1cfb2:	1d3b      	adds	r3, r7, #4
   1cfb4:	60fb      	str	r3, [r7, #12]
	glcd_tiny_draw_string(0, 2,str_ptr);
   1cfb6:	68fb      	ldr	r3, [r7, #12]
   1cfb8:	001a      	movs	r2, r3
   1cfba:	2102      	movs	r1, #2
   1cfbc:	2000      	movs	r0, #0
   1cfbe:	4b30      	ldr	r3, [pc, #192]	; (1d080 <fn_set_bluetooth+0x36c>)
   1cfc0:	4798      	blx	r3
	if (ioport_get_pin_level(BLE_reset)){ str_ptr = str_off;}
   1cfc2:	2003      	movs	r0, #3
   1cfc4:	4b1b      	ldr	r3, [pc, #108]	; (1d034 <fn_set_bluetooth+0x320>)
   1cfc6:	4798      	blx	r3
   1cfc8:	1e03      	subs	r3, r0, #0
   1cfca:	d002      	beq.n	1cfd2 <fn_set_bluetooth+0x2be>
   1cfcc:	003b      	movs	r3, r7
   1cfce:	60fb      	str	r3, [r7, #12]
   1cfd0:	e001      	b.n	1cfd6 <fn_set_bluetooth+0x2c2>
	else{str_ptr = str_on;}
   1cfd2:	1d3b      	adds	r3, r7, #4
   1cfd4:	60fb      	str	r3, [r7, #12]
	glcd_tiny_draw_string(0, 3,str_ptr);
   1cfd6:	68fb      	ldr	r3, [r7, #12]
   1cfd8:	001a      	movs	r2, r3
   1cfda:	2103      	movs	r1, #3
   1cfdc:	2000      	movs	r0, #0
   1cfde:	4b28      	ldr	r3, [pc, #160]	; (1d080 <fn_set_bluetooth+0x36c>)
   1cfe0:	4798      	blx	r3
	if (ioport_get_pin_level(BLE_ota)){ str_ptr = str_on;}
   1cfe2:	2036      	movs	r0, #54	; 0x36
   1cfe4:	4b13      	ldr	r3, [pc, #76]	; (1d034 <fn_set_bluetooth+0x320>)
   1cfe6:	4798      	blx	r3
   1cfe8:	1e03      	subs	r3, r0, #0
   1cfea:	d002      	beq.n	1cff2 <fn_set_bluetooth+0x2de>
   1cfec:	1d3b      	adds	r3, r7, #4
   1cfee:	60fb      	str	r3, [r7, #12]
   1cff0:	e001      	b.n	1cff6 <fn_set_bluetooth+0x2e2>
	else{str_ptr = str_off;}
   1cff2:	003b      	movs	r3, r7
   1cff4:	60fb      	str	r3, [r7, #12]
	glcd_tiny_draw_string(0, 4,str_ptr);
   1cff6:	68fb      	ldr	r3, [r7, #12]
   1cff8:	001a      	movs	r2, r3
   1cffa:	2104      	movs	r1, #4
   1cffc:	2000      	movs	r0, #0
   1cffe:	4b20      	ldr	r3, [pc, #128]	; (1d080 <fn_set_bluetooth+0x36c>)
   1d000:	4798      	blx	r3
	if (USART_BLE_enabled){ str_ptr = str_on;}
   1d002:	4b13      	ldr	r3, [pc, #76]	; (1d050 <fn_set_bluetooth+0x33c>)
   1d004:	781b      	ldrb	r3, [r3, #0]
   1d006:	2b00      	cmp	r3, #0
   1d008:	d002      	beq.n	1d010 <fn_set_bluetooth+0x2fc>
   1d00a:	1d3b      	adds	r3, r7, #4
   1d00c:	60fb      	str	r3, [r7, #12]
   1d00e:	e001      	b.n	1d014 <fn_set_bluetooth+0x300>
	else{str_ptr = str_off;}
   1d010:	003b      	movs	r3, r7
   1d012:	60fb      	str	r3, [r7, #12]
	glcd_tiny_draw_string(0, 5,str_ptr);
   1d014:	68fb      	ldr	r3, [r7, #12]
   1d016:	001a      	movs	r2, r3
   1d018:	2105      	movs	r1, #5
   1d01a:	2000      	movs	r0, #0
   1d01c:	4b18      	ldr	r3, [pc, #96]	; (1d080 <fn_set_bluetooth+0x36c>)
   1d01e:	4798      	blx	r3
	

	
	glcd_write();
   1d020:	4b1e      	ldr	r3, [pc, #120]	; (1d09c <fn_set_bluetooth+0x388>)
   1d022:	4798      	blx	r3
	
}
   1d024:	46c0      	nop			; (mov r8, r8)
   1d026:	46bd      	mov	sp, r7
   1d028:	b005      	add	sp, #20
   1d02a:	bd90      	pop	{r4, r7, pc}
   1d02c:	000297c4 	.word	0x000297c4
   1d030:	0066664f 	.word	0x0066664f
   1d034:	0001934d 	.word	0x0001934d
   1d038:	200000e8 	.word	0x200000e8
   1d03c:	20003494 	.word	0x20003494
   1d040:	2000450c 	.word	0x2000450c
   1d044:	20003fec 	.word	0x20003fec
   1d048:	20004136 	.word	0x20004136
   1d04c:	00019325 	.word	0x00019325
   1d050:	20004148 	.word	0x20004148
   1d054:	20001350 	.word	0x20001350
   1d058:	0001943d 	.word	0x0001943d
   1d05c:	000192fd 	.word	0x000192fd
   1d060:	000192dd 	.word	0x000192dd
   1d064:	000103bd 	.word	0x000103bd
   1d068:	00028b80 	.word	0x00028b80
   1d06c:	00015f85 	.word	0x00015f85
   1d070:	00015025 	.word	0x00015025
   1d074:	20003534 	.word	0x20003534
   1d078:	00029770 	.word	0x00029770
   1d07c:	00023c19 	.word	0x00023c19
   1d080:	00016111 	.word	0x00016111
   1d084:	00029780 	.word	0x00029780
   1d088:	00029790 	.word	0x00029790
   1d08c:	0002979c 	.word	0x0002979c
   1d090:	000297ac 	.word	0x000297ac
   1d094:	00029540 	.word	0x00029540
   1d098:	000295e8 	.word	0x000295e8
   1d09c:	00015869 	.word	0x00015869

0001d0a0 <fn_set_clock>:


void fn_set_clock(void){
   1d0a0:	b590      	push	{r4, r7, lr}
   1d0a2:	b08f      	sub	sp, #60	; 0x3c
   1d0a4:	af02      	add	r7, sp, #8
		uint8_t min;  //unit max
		uint8_t max;  //unit min
		uint8_t *data; //unit location
	} CLOCK_SETTING;
	
	CLOCK_SETTING clock_table[] = {
   1d0a6:	003b      	movs	r3, r7
   1d0a8:	4a9e      	ldr	r2, [pc, #632]	; (1d324 <fn_set_clock+0x284>)
   1d0aa:	ca13      	ldmia	r2!, {r0, r1, r4}
   1d0ac:	c313      	stmia	r3!, {r0, r1, r4}
   1d0ae:	ca13      	ldmia	r2!, {r0, r1, r4}
   1d0b0:	c313      	stmia	r3!, {r0, r1, r4}
   1d0b2:	ca13      	ldmia	r2!, {r0, r1, r4}
   1d0b4:	c313      	stmia	r3!, {r0, r1, r4}
   1d0b6:	ca13      	ldmia	r2!, {r0, r1, r4}
   1d0b8:	c313      	stmia	r3!, {r0, r1, r4}
		{10,	6,	1,	0x31, &temp_time.date},
		{40,	6,	1,	0x12, &temp_time.month},
		{76,	6,	0,	0x99, &temp_time.year}
	};
	
	if (state_change) {
   1d0ba:	4b9b      	ldr	r3, [pc, #620]	; (1d328 <fn_set_clock+0x288>)
   1d0bc:	781b      	ldrb	r3, [r3, #0]
   1d0be:	b2db      	uxtb	r3, r3
   1d0c0:	2b00      	cmp	r3, #0
   1d0c2:	d010      	beq.n	1d0e6 <fn_set_clock+0x46>
		cur_X = 0;
   1d0c4:	4b99      	ldr	r3, [pc, #612]	; (1d32c <fn_set_clock+0x28c>)
   1d0c6:	2200      	movs	r2, #0
   1d0c8:	601a      	str	r2, [r3, #0]
		cur_X_low = 0;
   1d0ca:	4b99      	ldr	r3, [pc, #612]	; (1d330 <fn_set_clock+0x290>)
   1d0cc:	2200      	movs	r2, #0
   1d0ce:	601a      	str	r2, [r3, #0]
		cur_X_high = 5;
   1d0d0:	4b98      	ldr	r3, [pc, #608]	; (1d334 <fn_set_clock+0x294>)
   1d0d2:	2205      	movs	r2, #5
   1d0d4:	601a      	str	r2, [r3, #0]
		get_time();
   1d0d6:	4b98      	ldr	r3, [pc, #608]	; (1d338 <fn_set_clock+0x298>)
   1d0d8:	4798      	blx	r3
		memcpy(&temp_time,&current_time,sizeof(current_time));	
   1d0da:	4b98      	ldr	r3, [pc, #608]	; (1d33c <fn_set_clock+0x29c>)
   1d0dc:	4a98      	ldr	r2, [pc, #608]	; (1d340 <fn_set_clock+0x2a0>)
   1d0de:	ca13      	ldmia	r2!, {r0, r1, r4}
   1d0e0:	c313      	stmia	r3!, {r0, r1, r4}
   1d0e2:	ca03      	ldmia	r2!, {r0, r1}
   1d0e4:	c303      	stmia	r3!, {r0, r1}
	}
	
	
	
	
	switch(last_input){
   1d0e6:	4b97      	ldr	r3, [pc, #604]	; (1d344 <fn_set_clock+0x2a4>)
   1d0e8:	781b      	ldrb	r3, [r3, #0]
   1d0ea:	b2db      	uxtb	r3, r3
   1d0ec:	2b02      	cmp	r3, #2
   1d0ee:	d004      	beq.n	1d0fa <fn_set_clock+0x5a>
   1d0f0:	2b03      	cmp	r3, #3
   1d0f2:	d029      	beq.n	1d148 <fn_set_clock+0xa8>
   1d0f4:	2b01      	cmp	r3, #1
   1d0f6:	d04e      	beq.n	1d196 <fn_set_clock+0xf6>
   1d0f8:	e062      	b.n	1d1c0 <fn_set_clock+0x120>
		case input_button2:
			if(*clock_table[cur_X].data < clock_table[cur_X].max){
   1d0fa:	4b8c      	ldr	r3, [pc, #560]	; (1d32c <fn_set_clock+0x28c>)
   1d0fc:	681b      	ldr	r3, [r3, #0]
   1d0fe:	003a      	movs	r2, r7
   1d100:	00db      	lsls	r3, r3, #3
   1d102:	18d3      	adds	r3, r2, r3
   1d104:	3304      	adds	r3, #4
   1d106:	681b      	ldr	r3, [r3, #0]
   1d108:	781a      	ldrb	r2, [r3, #0]
   1d10a:	4b88      	ldr	r3, [pc, #544]	; (1d32c <fn_set_clock+0x28c>)
   1d10c:	681b      	ldr	r3, [r3, #0]
   1d10e:	0039      	movs	r1, r7
   1d110:	00db      	lsls	r3, r3, #3
   1d112:	18cb      	adds	r3, r1, r3
   1d114:	3303      	adds	r3, #3
   1d116:	781b      	ldrb	r3, [r3, #0]
   1d118:	429a      	cmp	r2, r3
   1d11a:	d24e      	bcs.n	1d1ba <fn_set_clock+0x11a>
				++ *clock_table[cur_X].data;
   1d11c:	4b83      	ldr	r3, [pc, #524]	; (1d32c <fn_set_clock+0x28c>)
   1d11e:	681b      	ldr	r3, [r3, #0]
   1d120:	003a      	movs	r2, r7
   1d122:	00db      	lsls	r3, r3, #3
   1d124:	18d3      	adds	r3, r2, r3
   1d126:	3304      	adds	r3, #4
   1d128:	681b      	ldr	r3, [r3, #0]
   1d12a:	781a      	ldrb	r2, [r3, #0]
   1d12c:	3201      	adds	r2, #1
   1d12e:	b2d2      	uxtb	r2, r2
   1d130:	701a      	strb	r2, [r3, #0]
				bcd_adj(clock_table[cur_X].data);
   1d132:	4b7e      	ldr	r3, [pc, #504]	; (1d32c <fn_set_clock+0x28c>)
   1d134:	681b      	ldr	r3, [r3, #0]
   1d136:	003a      	movs	r2, r7
   1d138:	00db      	lsls	r3, r3, #3
   1d13a:	18d3      	adds	r3, r2, r3
   1d13c:	3304      	adds	r3, #4
   1d13e:	681b      	ldr	r3, [r3, #0]
   1d140:	0018      	movs	r0, r3
   1d142:	4b81      	ldr	r3, [pc, #516]	; (1d348 <fn_set_clock+0x2a8>)
   1d144:	4798      	blx	r3
				}
			break;
   1d146:	e038      	b.n	1d1ba <fn_set_clock+0x11a>
		case input_button3:
			if(*clock_table[cur_X].data > clock_table[cur_X].min){
   1d148:	4b78      	ldr	r3, [pc, #480]	; (1d32c <fn_set_clock+0x28c>)
   1d14a:	681b      	ldr	r3, [r3, #0]
   1d14c:	003a      	movs	r2, r7
   1d14e:	00db      	lsls	r3, r3, #3
   1d150:	18d3      	adds	r3, r2, r3
   1d152:	3304      	adds	r3, #4
   1d154:	681b      	ldr	r3, [r3, #0]
   1d156:	781a      	ldrb	r2, [r3, #0]
   1d158:	4b74      	ldr	r3, [pc, #464]	; (1d32c <fn_set_clock+0x28c>)
   1d15a:	681b      	ldr	r3, [r3, #0]
   1d15c:	0039      	movs	r1, r7
   1d15e:	00db      	lsls	r3, r3, #3
   1d160:	18cb      	adds	r3, r1, r3
   1d162:	3302      	adds	r3, #2
   1d164:	781b      	ldrb	r3, [r3, #0]
   1d166:	429a      	cmp	r2, r3
   1d168:	d929      	bls.n	1d1be <fn_set_clock+0x11e>
				-- *clock_table[cur_X].data;
   1d16a:	4b70      	ldr	r3, [pc, #448]	; (1d32c <fn_set_clock+0x28c>)
   1d16c:	681b      	ldr	r3, [r3, #0]
   1d16e:	003a      	movs	r2, r7
   1d170:	00db      	lsls	r3, r3, #3
   1d172:	18d3      	adds	r3, r2, r3
   1d174:	3304      	adds	r3, #4
   1d176:	681b      	ldr	r3, [r3, #0]
   1d178:	781a      	ldrb	r2, [r3, #0]
   1d17a:	3a01      	subs	r2, #1
   1d17c:	b2d2      	uxtb	r2, r2
   1d17e:	701a      	strb	r2, [r3, #0]
				bcd_adj(clock_table[cur_X].data);
   1d180:	4b6a      	ldr	r3, [pc, #424]	; (1d32c <fn_set_clock+0x28c>)
   1d182:	681b      	ldr	r3, [r3, #0]
   1d184:	003a      	movs	r2, r7
   1d186:	00db      	lsls	r3, r3, #3
   1d188:	18d3      	adds	r3, r2, r3
   1d18a:	3304      	adds	r3, #4
   1d18c:	681b      	ldr	r3, [r3, #0]
   1d18e:	0018      	movs	r0, r3
   1d190:	4b6d      	ldr	r3, [pc, #436]	; (1d348 <fn_set_clock+0x2a8>)
   1d192:	4798      	blx	r3
				}
			break;
   1d194:	e013      	b.n	1d1be <fn_set_clock+0x11e>
		case input_button1:
			if(cur_X >= cur_X_high){
   1d196:	4b65      	ldr	r3, [pc, #404]	; (1d32c <fn_set_clock+0x28c>)
   1d198:	681a      	ldr	r2, [r3, #0]
   1d19a:	4b66      	ldr	r3, [pc, #408]	; (1d334 <fn_set_clock+0x294>)
   1d19c:	681b      	ldr	r3, [r3, #0]
   1d19e:	429a      	cmp	r2, r3
   1d1a0:	db05      	blt.n	1d1ae <fn_set_clock+0x10e>
				set_time();
   1d1a2:	4b6a      	ldr	r3, [pc, #424]	; (1d34c <fn_set_clock+0x2ac>)
   1d1a4:	4798      	blx	r3
				current_input = input_state_complete;
   1d1a6:	4b6a      	ldr	r3, [pc, #424]	; (1d350 <fn_set_clock+0x2b0>)
   1d1a8:	2208      	movs	r2, #8
   1d1aa:	701a      	strb	r2, [r3, #0]
				}
			else{++cur_X;}
			break;
   1d1ac:	e008      	b.n	1d1c0 <fn_set_clock+0x120>
			else{++cur_X;}
   1d1ae:	4b5f      	ldr	r3, [pc, #380]	; (1d32c <fn_set_clock+0x28c>)
   1d1b0:	681b      	ldr	r3, [r3, #0]
   1d1b2:	1c5a      	adds	r2, r3, #1
   1d1b4:	4b5d      	ldr	r3, [pc, #372]	; (1d32c <fn_set_clock+0x28c>)
   1d1b6:	601a      	str	r2, [r3, #0]
			break;
   1d1b8:	e002      	b.n	1d1c0 <fn_set_clock+0x120>
			break;
   1d1ba:	46c0      	nop			; (mov r8, r8)
   1d1bc:	e000      	b.n	1d1c0 <fn_set_clock+0x120>
			break;
   1d1be:	46c0      	nop			; (mov r8, r8)
	}
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1d1c0:	4864      	ldr	r0, [pc, #400]	; (1d354 <fn_set_clock+0x2b4>)
   1d1c2:	237f      	movs	r3, #127	; 0x7f
   1d1c4:	9300      	str	r3, [sp, #0]
   1d1c6:	2320      	movs	r3, #32
   1d1c8:	2207      	movs	r2, #7
   1d1ca:	2105      	movs	r1, #5
   1d1cc:	4c62      	ldr	r4, [pc, #392]	; (1d358 <fn_set_clock+0x2b8>)
   1d1ce:	47a0      	blx	r4
	glcd_clear_buffer();
   1d1d0:	4b62      	ldr	r3, [pc, #392]	; (1d35c <fn_set_clock+0x2bc>)
   1d1d2:	4798      	blx	r3
	
	sprintf(display_str,"Set Clock:");
   1d1d4:	4a62      	ldr	r2, [pc, #392]	; (1d360 <fn_set_clock+0x2c0>)
   1d1d6:	4b63      	ldr	r3, [pc, #396]	; (1d364 <fn_set_clock+0x2c4>)
   1d1d8:	0010      	movs	r0, r2
   1d1da:	0019      	movs	r1, r3
   1d1dc:	230b      	movs	r3, #11
   1d1de:	001a      	movs	r2, r3
   1d1e0:	4b61      	ldr	r3, [pc, #388]	; (1d368 <fn_set_clock+0x2c8>)
   1d1e2:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   1d1e4:	4b5e      	ldr	r3, [pc, #376]	; (1d360 <fn_set_clock+0x2c0>)
   1d1e6:	001a      	movs	r2, r3
   1d1e8:	2100      	movs	r1, #0
   1d1ea:	2000      	movs	r0, #0
   1d1ec:	4b5f      	ldr	r3, [pc, #380]	; (1d36c <fn_set_clock+0x2cc>)
   1d1ee:	4798      	blx	r3
	
	sprintf(display_str,"Hour Min  Sec");
   1d1f0:	4a5b      	ldr	r2, [pc, #364]	; (1d360 <fn_set_clock+0x2c0>)
   1d1f2:	4b5f      	ldr	r3, [pc, #380]	; (1d370 <fn_set_clock+0x2d0>)
   1d1f4:	0010      	movs	r0, r2
   1d1f6:	0019      	movs	r1, r3
   1d1f8:	230e      	movs	r3, #14
   1d1fa:	001a      	movs	r2, r3
   1d1fc:	4b5a      	ldr	r3, [pc, #360]	; (1d368 <fn_set_clock+0x2c8>)
   1d1fe:	4798      	blx	r3
	glcd_tiny_draw_string(10,1,display_str);
   1d200:	4b57      	ldr	r3, [pc, #348]	; (1d360 <fn_set_clock+0x2c0>)
   1d202:	001a      	movs	r2, r3
   1d204:	2101      	movs	r1, #1
   1d206:	200a      	movs	r0, #10
   1d208:	4b58      	ldr	r3, [pc, #352]	; (1d36c <fn_set_clock+0x2cc>)
   1d20a:	4798      	blx	r3
	sprintf(display_str,"%02x   %02x   %02x",
	temp_time.hours, temp_time.minutes, temp_time.seconds);
   1d20c:	4b4b      	ldr	r3, [pc, #300]	; (1d33c <fn_set_clock+0x29c>)
   1d20e:	789b      	ldrb	r3, [r3, #2]
	sprintf(display_str,"%02x   %02x   %02x",
   1d210:	001a      	movs	r2, r3
	temp_time.hours, temp_time.minutes, temp_time.seconds);
   1d212:	4b4a      	ldr	r3, [pc, #296]	; (1d33c <fn_set_clock+0x29c>)
   1d214:	785b      	ldrb	r3, [r3, #1]
	sprintf(display_str,"%02x   %02x   %02x",
   1d216:	001c      	movs	r4, r3
	temp_time.hours, temp_time.minutes, temp_time.seconds);
   1d218:	4b48      	ldr	r3, [pc, #288]	; (1d33c <fn_set_clock+0x29c>)
   1d21a:	781b      	ldrb	r3, [r3, #0]
	sprintf(display_str,"%02x   %02x   %02x",
   1d21c:	4955      	ldr	r1, [pc, #340]	; (1d374 <fn_set_clock+0x2d4>)
   1d21e:	4850      	ldr	r0, [pc, #320]	; (1d360 <fn_set_clock+0x2c0>)
   1d220:	9300      	str	r3, [sp, #0]
   1d222:	0023      	movs	r3, r4
   1d224:	4c54      	ldr	r4, [pc, #336]	; (1d378 <fn_set_clock+0x2d8>)
   1d226:	47a0      	blx	r4
	glcd_tiny_draw_string(10,2,display_str);
   1d228:	4b4d      	ldr	r3, [pc, #308]	; (1d360 <fn_set_clock+0x2c0>)
   1d22a:	001a      	movs	r2, r3
   1d22c:	2102      	movs	r1, #2
   1d22e:	200a      	movs	r0, #10
   1d230:	4b4e      	ldr	r3, [pc, #312]	; (1d36c <fn_set_clock+0x2cc>)
   1d232:	4798      	blx	r3
	
	sprintf(display_str,"Date Month Year");
   1d234:	4a4a      	ldr	r2, [pc, #296]	; (1d360 <fn_set_clock+0x2c0>)
   1d236:	4b51      	ldr	r3, [pc, #324]	; (1d37c <fn_set_clock+0x2dc>)
   1d238:	0010      	movs	r0, r2
   1d23a:	0019      	movs	r1, r3
   1d23c:	2310      	movs	r3, #16
   1d23e:	001a      	movs	r2, r3
   1d240:	4b49      	ldr	r3, [pc, #292]	; (1d368 <fn_set_clock+0x2c8>)
   1d242:	4798      	blx	r3
	glcd_tiny_draw_string(10,4,display_str);
   1d244:	4b46      	ldr	r3, [pc, #280]	; (1d360 <fn_set_clock+0x2c0>)
   1d246:	001a      	movs	r2, r3
   1d248:	2104      	movs	r1, #4
   1d24a:	200a      	movs	r0, #10
   1d24c:	4b47      	ldr	r3, [pc, #284]	; (1d36c <fn_set_clock+0x2cc>)
   1d24e:	4798      	blx	r3
	sprintf(display_str,"%02x   %02x    20%02x",
	temp_time.date, temp_time.month, temp_time.year);
   1d250:	4b3a      	ldr	r3, [pc, #232]	; (1d33c <fn_set_clock+0x29c>)
   1d252:	791b      	ldrb	r3, [r3, #4]
	sprintf(display_str,"%02x   %02x    20%02x",
   1d254:	001a      	movs	r2, r3
	temp_time.date, temp_time.month, temp_time.year);
   1d256:	4b39      	ldr	r3, [pc, #228]	; (1d33c <fn_set_clock+0x29c>)
   1d258:	795b      	ldrb	r3, [r3, #5]
	sprintf(display_str,"%02x   %02x    20%02x",
   1d25a:	001c      	movs	r4, r3
	temp_time.date, temp_time.month, temp_time.year);
   1d25c:	4b37      	ldr	r3, [pc, #220]	; (1d33c <fn_set_clock+0x29c>)
   1d25e:	799b      	ldrb	r3, [r3, #6]
	sprintf(display_str,"%02x   %02x    20%02x",
   1d260:	4947      	ldr	r1, [pc, #284]	; (1d380 <fn_set_clock+0x2e0>)
   1d262:	483f      	ldr	r0, [pc, #252]	; (1d360 <fn_set_clock+0x2c0>)
   1d264:	9300      	str	r3, [sp, #0]
   1d266:	0023      	movs	r3, r4
   1d268:	4c43      	ldr	r4, [pc, #268]	; (1d378 <fn_set_clock+0x2d8>)
   1d26a:	47a0      	blx	r4
	glcd_tiny_draw_string(10,5,display_str);
   1d26c:	4b3c      	ldr	r3, [pc, #240]	; (1d360 <fn_set_clock+0x2c0>)
   1d26e:	001a      	movs	r2, r3
   1d270:	2105      	movs	r1, #5
   1d272:	200a      	movs	r0, #10
   1d274:	4b3d      	ldr	r3, [pc, #244]	; (1d36c <fn_set_clock+0x2cc>)
   1d276:	4798      	blx	r3
	
	// Display soft keys
	sprintf(display_str, "+");
   1d278:	4a39      	ldr	r2, [pc, #228]	; (1d360 <fn_set_clock+0x2c0>)
   1d27a:	4b42      	ldr	r3, [pc, #264]	; (1d384 <fn_set_clock+0x2e4>)
   1d27c:	0010      	movs	r0, r2
   1d27e:	0019      	movs	r1, r3
   1d280:	2302      	movs	r3, #2
   1d282:	001a      	movs	r2, r3
   1d284:	4b38      	ldr	r3, [pc, #224]	; (1d368 <fn_set_clock+0x2c8>)
   1d286:	4798      	blx	r3
	glcd_tiny_draw_string(121,3,display_str);
   1d288:	4b35      	ldr	r3, [pc, #212]	; (1d360 <fn_set_clock+0x2c0>)
   1d28a:	001a      	movs	r2, r3
   1d28c:	2103      	movs	r1, #3
   1d28e:	2079      	movs	r0, #121	; 0x79
   1d290:	4b36      	ldr	r3, [pc, #216]	; (1d36c <fn_set_clock+0x2cc>)
   1d292:	4798      	blx	r3
	sprintf(display_str, "-");
   1d294:	4a32      	ldr	r2, [pc, #200]	; (1d360 <fn_set_clock+0x2c0>)
   1d296:	4b3c      	ldr	r3, [pc, #240]	; (1d388 <fn_set_clock+0x2e8>)
   1d298:	0010      	movs	r0, r2
   1d29a:	0019      	movs	r1, r3
   1d29c:	2302      	movs	r3, #2
   1d29e:	001a      	movs	r2, r3
   1d2a0:	4b31      	ldr	r3, [pc, #196]	; (1d368 <fn_set_clock+0x2c8>)
   1d2a2:	4798      	blx	r3
	glcd_tiny_draw_string(121,5,display_str);
   1d2a4:	4b2e      	ldr	r3, [pc, #184]	; (1d360 <fn_set_clock+0x2c0>)
   1d2a6:	001a      	movs	r2, r3
   1d2a8:	2105      	movs	r1, #5
   1d2aa:	2079      	movs	r0, #121	; 0x79
   1d2ac:	4b2f      	ldr	r3, [pc, #188]	; (1d36c <fn_set_clock+0x2cc>)
   1d2ae:	4798      	blx	r3
	sprintf(display_str, "Next");
   1d2b0:	4a2b      	ldr	r2, [pc, #172]	; (1d360 <fn_set_clock+0x2c0>)
   1d2b2:	4b36      	ldr	r3, [pc, #216]	; (1d38c <fn_set_clock+0x2ec>)
   1d2b4:	0010      	movs	r0, r2
   1d2b6:	0019      	movs	r1, r3
   1d2b8:	2305      	movs	r3, #5
   1d2ba:	001a      	movs	r2, r3
   1d2bc:	4b2a      	ldr	r3, [pc, #168]	; (1d368 <fn_set_clock+0x2c8>)
   1d2be:	4798      	blx	r3
	glcd_tiny_draw_string(103,0,display_str);
   1d2c0:	4b27      	ldr	r3, [pc, #156]	; (1d360 <fn_set_clock+0x2c0>)
   1d2c2:	001a      	movs	r2, r3
   1d2c4:	2100      	movs	r1, #0
   1d2c6:	2067      	movs	r0, #103	; 0x67
   1d2c8:	4b28      	ldr	r3, [pc, #160]	; (1d36c <fn_set_clock+0x2cc>)
   1d2ca:	4798      	blx	r3
	sprintf(display_str, "Cancel");
   1d2cc:	4a24      	ldr	r2, [pc, #144]	; (1d360 <fn_set_clock+0x2c0>)
   1d2ce:	4b30      	ldr	r3, [pc, #192]	; (1d390 <fn_set_clock+0x2f0>)
   1d2d0:	0010      	movs	r0, r2
   1d2d2:	0019      	movs	r1, r3
   1d2d4:	2307      	movs	r3, #7
   1d2d6:	001a      	movs	r2, r3
   1d2d8:	4b23      	ldr	r3, [pc, #140]	; (1d368 <fn_set_clock+0x2c8>)
   1d2da:	4798      	blx	r3
	glcd_tiny_draw_string(92,7,display_str);
   1d2dc:	4b20      	ldr	r3, [pc, #128]	; (1d360 <fn_set_clock+0x2c0>)
   1d2de:	001a      	movs	r2, r3
   1d2e0:	2107      	movs	r1, #7
   1d2e2:	205c      	movs	r0, #92	; 0x5c
   1d2e4:	4b21      	ldr	r3, [pc, #132]	; (1d36c <fn_set_clock+0x2cc>)
   1d2e6:	4798      	blx	r3
	
	//Display Pointer
	sprintf(display_str, "^");
   1d2e8:	4a1d      	ldr	r2, [pc, #116]	; (1d360 <fn_set_clock+0x2c0>)
   1d2ea:	4b2a      	ldr	r3, [pc, #168]	; (1d394 <fn_set_clock+0x2f4>)
   1d2ec:	0010      	movs	r0, r2
   1d2ee:	0019      	movs	r1, r3
   1d2f0:	2302      	movs	r3, #2
   1d2f2:	001a      	movs	r2, r3
   1d2f4:	4b1c      	ldr	r3, [pc, #112]	; (1d368 <fn_set_clock+0x2c8>)
   1d2f6:	4798      	blx	r3
	glcd_tiny_draw_string(clock_table[cur_X].x_pos,clock_table[cur_X].y_pos,display_str);
   1d2f8:	4b0c      	ldr	r3, [pc, #48]	; (1d32c <fn_set_clock+0x28c>)
   1d2fa:	681a      	ldr	r2, [r3, #0]
   1d2fc:	003b      	movs	r3, r7
   1d2fe:	00d2      	lsls	r2, r2, #3
   1d300:	5cd0      	ldrb	r0, [r2, r3]
   1d302:	4b0a      	ldr	r3, [pc, #40]	; (1d32c <fn_set_clock+0x28c>)
   1d304:	681b      	ldr	r3, [r3, #0]
   1d306:	003a      	movs	r2, r7
   1d308:	00db      	lsls	r3, r3, #3
   1d30a:	18d3      	adds	r3, r2, r3
   1d30c:	3301      	adds	r3, #1
   1d30e:	781b      	ldrb	r3, [r3, #0]
   1d310:	4a13      	ldr	r2, [pc, #76]	; (1d360 <fn_set_clock+0x2c0>)
   1d312:	0019      	movs	r1, r3
   1d314:	4b15      	ldr	r3, [pc, #84]	; (1d36c <fn_set_clock+0x2cc>)
   1d316:	4798      	blx	r3
	
	glcd_write();
   1d318:	4b1f      	ldr	r3, [pc, #124]	; (1d398 <fn_set_clock+0x2f8>)
   1d31a:	4798      	blx	r3
		
}
   1d31c:	46c0      	nop			; (mov r8, r8)
   1d31e:	46bd      	mov	sp, r7
   1d320:	b00d      	add	sp, #52	; 0x34
   1d322:	bd90      	pop	{r4, r7, pc}
   1d324:	0002983c 	.word	0x0002983c
   1d328:	200000e8 	.word	0x200000e8
   1d32c:	20003fe4 	.word	0x20003fe4
   1d330:	20004510 	.word	0x20004510
   1d334:	200039f4 	.word	0x200039f4
   1d338:	00011001 	.word	0x00011001
   1d33c:	20001244 	.word	0x20001244
   1d340:	200011f4 	.word	0x200011f4
   1d344:	20004136 	.word	0x20004136
   1d348:	00010f9d 	.word	0x00010f9d
   1d34c:	00011125 	.word	0x00011125
   1d350:	20004134 	.word	0x20004134
   1d354:	00028b80 	.word	0x00028b80
   1d358:	00015f85 	.word	0x00015f85
   1d35c:	00015025 	.word	0x00015025
   1d360:	20003534 	.word	0x20003534
   1d364:	000297c8 	.word	0x000297c8
   1d368:	00023c19 	.word	0x00023c19
   1d36c:	00016111 	.word	0x00016111
   1d370:	000297d4 	.word	0x000297d4
   1d374:	000297e4 	.word	0x000297e4
   1d378:	00023d31 	.word	0x00023d31
   1d37c:	000297f8 	.word	0x000297f8
   1d380:	00029808 	.word	0x00029808
   1d384:	00029820 	.word	0x00029820
   1d388:	00029824 	.word	0x00029824
   1d38c:	00029828 	.word	0x00029828
   1d390:	00029830 	.word	0x00029830
   1d394:	00029838 	.word	0x00029838
   1d398:	00015869 	.word	0x00015869

0001d39c <fn_main_display>:




void fn_main_display(void){
   1d39c:	b580      	push	{r7, lr}
   1d39e:	af00      	add	r7, sp, #0
	
	print_data_screen();
   1d3a0:	4b0f      	ldr	r3, [pc, #60]	; (1d3e0 <fn_main_display+0x44>)
   1d3a2:	4798      	blx	r3
	
	
	//Handle Button Inputs
	if(last_input==input_button2){
   1d3a4:	4b0f      	ldr	r3, [pc, #60]	; (1d3e4 <fn_main_display+0x48>)
   1d3a6:	781b      	ldrb	r3, [r3, #0]
   1d3a8:	b2db      	uxtb	r3, r3
   1d3aa:	2b02      	cmp	r3, #2
   1d3ac:	d108      	bne.n	1d3c0 <fn_main_display+0x24>
		if(options.backlight_setting.brightness<3){
   1d3ae:	4b0e      	ldr	r3, [pc, #56]	; (1d3e8 <fn_main_display+0x4c>)
   1d3b0:	7b1b      	ldrb	r3, [r3, #12]
   1d3b2:	2b02      	cmp	r3, #2
   1d3b4:	d811      	bhi.n	1d3da <fn_main_display+0x3e>
			backlightPlus();
   1d3b6:	4b0d      	ldr	r3, [pc, #52]	; (1d3ec <fn_main_display+0x50>)
   1d3b8:	4798      	blx	r3
			save_user_settings();
   1d3ba:	4b0d      	ldr	r3, [pc, #52]	; (1d3f0 <fn_main_display+0x54>)
   1d3bc:	4798      	blx	r3
			backlightMinus();
			save_user_settings();
		}
	}
	
}
   1d3be:	e00c      	b.n	1d3da <fn_main_display+0x3e>
	}else if(last_input==input_button3){
   1d3c0:	4b08      	ldr	r3, [pc, #32]	; (1d3e4 <fn_main_display+0x48>)
   1d3c2:	781b      	ldrb	r3, [r3, #0]
   1d3c4:	b2db      	uxtb	r3, r3
   1d3c6:	2b03      	cmp	r3, #3
   1d3c8:	d107      	bne.n	1d3da <fn_main_display+0x3e>
		if(options.backlight_setting.brightness>0){
   1d3ca:	4b07      	ldr	r3, [pc, #28]	; (1d3e8 <fn_main_display+0x4c>)
   1d3cc:	7b1b      	ldrb	r3, [r3, #12]
   1d3ce:	2b00      	cmp	r3, #0
   1d3d0:	d003      	beq.n	1d3da <fn_main_display+0x3e>
			backlightMinus();
   1d3d2:	4b08      	ldr	r3, [pc, #32]	; (1d3f4 <fn_main_display+0x58>)
   1d3d4:	4798      	blx	r3
			save_user_settings();
   1d3d6:	4b06      	ldr	r3, [pc, #24]	; (1d3f0 <fn_main_display+0x54>)
   1d3d8:	4798      	blx	r3
}
   1d3da:	46c0      	nop			; (mov r8, r8)
   1d3dc:	46bd      	mov	sp, r7
   1d3de:	bd80      	pop	{r7, pc}
   1d3e0:	0001d3f9 	.word	0x0001d3f9
   1d3e4:	20004136 	.word	0x20004136
   1d3e8:	200034a8 	.word	0x200034a8
   1d3ec:	00001609 	.word	0x00001609
   1d3f0:	00001e11 	.word	0x00001e11
   1d3f4:	00001639 	.word	0x00001639

0001d3f8 <print_data_screen>:

void print_data_screen(void){
   1d3f8:	b590      	push	{r4, r7, lr}
   1d3fa:	b087      	sub	sp, #28
   1d3fc:	af02      	add	r7, sp, #8
	static bool flipper;
	uint8_t batt_charge_status;
	get_time();
   1d3fe:	4bb2      	ldr	r3, [pc, #712]	; (1d6c8 <print_data_screen+0x2d0>)
   1d400:	4798      	blx	r3
	batt_charge_status = getChargerStatus();
   1d402:	1dfc      	adds	r4, r7, #7
   1d404:	4bb1      	ldr	r3, [pc, #708]	; (1d6cc <print_data_screen+0x2d4>)
   1d406:	4798      	blx	r3
   1d408:	0003      	movs	r3, r0
   1d40a:	7023      	strb	r3, [r4, #0]
	
	glcd_tiny_set_font(Font5x7,5,7,32,127);
   1d40c:	48b0      	ldr	r0, [pc, #704]	; (1d6d0 <print_data_screen+0x2d8>)
   1d40e:	237f      	movs	r3, #127	; 0x7f
   1d410:	9300      	str	r3, [sp, #0]
   1d412:	2320      	movs	r3, #32
   1d414:	2207      	movs	r2, #7
   1d416:	2105      	movs	r1, #5
   1d418:	4cae      	ldr	r4, [pc, #696]	; (1d6d4 <print_data_screen+0x2dc>)
   1d41a:	47a0      	blx	r4
	glcd_clear_buffer();
   1d41c:	4bae      	ldr	r3, [pc, #696]	; (1d6d8 <print_data_screen+0x2e0>)
   1d41e:	4798      	blx	r3
	
	if (options.current_unit_temp == fahrenheit){
   1d420:	4bae      	ldr	r3, [pc, #696]	; (1d6dc <print_data_screen+0x2e4>)
   1d422:	785b      	ldrb	r3, [r3, #1]
   1d424:	2b05      	cmp	r3, #5
   1d426:	d10d      	bne.n	1d444 <print_data_screen+0x4c>
		sprintf(display_str,"T:%4.1fF", current_time.temperatureF);
   1d428:	4bad      	ldr	r3, [pc, #692]	; (1d6e0 <print_data_screen+0x2e8>)
   1d42a:	691a      	ldr	r2, [r3, #16]
   1d42c:	4bad      	ldr	r3, [pc, #692]	; (1d6e4 <print_data_screen+0x2ec>)
   1d42e:	1c10      	adds	r0, r2, #0
   1d430:	4798      	blx	r3
   1d432:	0003      	movs	r3, r0
   1d434:	000c      	movs	r4, r1
   1d436:	49ac      	ldr	r1, [pc, #688]	; (1d6e8 <print_data_screen+0x2f0>)
   1d438:	48ac      	ldr	r0, [pc, #688]	; (1d6ec <print_data_screen+0x2f4>)
   1d43a:	001a      	movs	r2, r3
   1d43c:	0023      	movs	r3, r4
   1d43e:	4cac      	ldr	r4, [pc, #688]	; (1d6f0 <print_data_screen+0x2f8>)
   1d440:	47a0      	blx	r4
   1d442:	e00c      	b.n	1d45e <print_data_screen+0x66>
	}else{
		sprintf(display_str,"T:%4.1fC", current_time.temperatureC);
   1d444:	4ba6      	ldr	r3, [pc, #664]	; (1d6e0 <print_data_screen+0x2e8>)
   1d446:	68da      	ldr	r2, [r3, #12]
   1d448:	4ba6      	ldr	r3, [pc, #664]	; (1d6e4 <print_data_screen+0x2ec>)
   1d44a:	1c10      	adds	r0, r2, #0
   1d44c:	4798      	blx	r3
   1d44e:	0003      	movs	r3, r0
   1d450:	000c      	movs	r4, r1
   1d452:	49a8      	ldr	r1, [pc, #672]	; (1d6f4 <print_data_screen+0x2fc>)
   1d454:	48a5      	ldr	r0, [pc, #660]	; (1d6ec <print_data_screen+0x2f4>)
   1d456:	001a      	movs	r2, r3
   1d458:	0023      	movs	r3, r4
   1d45a:	4ca5      	ldr	r4, [pc, #660]	; (1d6f0 <print_data_screen+0x2f8>)
   1d45c:	47a0      	blx	r4
	}
	
	glcd_tiny_draw_string(86,7,display_str);
   1d45e:	4ba3      	ldr	r3, [pc, #652]	; (1d6ec <print_data_screen+0x2f4>)
   1d460:	001a      	movs	r2, r3
   1d462:	2107      	movs	r1, #7
   1d464:	2056      	movs	r0, #86	; 0x56
   1d466:	4ba4      	ldr	r3, [pc, #656]	; (1d6f8 <print_data_screen+0x300>)
   1d468:	4798      	blx	r3
	
	sprintf(display_str,"%02x:%02x:%02x", current_time.hours, current_time.minutes, current_time.seconds);
   1d46a:	4b9d      	ldr	r3, [pc, #628]	; (1d6e0 <print_data_screen+0x2e8>)
   1d46c:	789b      	ldrb	r3, [r3, #2]
   1d46e:	001a      	movs	r2, r3
   1d470:	4b9b      	ldr	r3, [pc, #620]	; (1d6e0 <print_data_screen+0x2e8>)
   1d472:	785b      	ldrb	r3, [r3, #1]
   1d474:	001c      	movs	r4, r3
   1d476:	4b9a      	ldr	r3, [pc, #616]	; (1d6e0 <print_data_screen+0x2e8>)
   1d478:	781b      	ldrb	r3, [r3, #0]
   1d47a:	49a0      	ldr	r1, [pc, #640]	; (1d6fc <print_data_screen+0x304>)
   1d47c:	489b      	ldr	r0, [pc, #620]	; (1d6ec <print_data_screen+0x2f4>)
   1d47e:	9300      	str	r3, [sp, #0]
   1d480:	0023      	movs	r3, r4
   1d482:	4c9b      	ldr	r4, [pc, #620]	; (1d6f0 <print_data_screen+0x2f8>)
   1d484:	47a0      	blx	r4
	glcd_tiny_draw_string(0,7,display_str);
   1d486:	4b99      	ldr	r3, [pc, #612]	; (1d6ec <print_data_screen+0x2f4>)
   1d488:	001a      	movs	r2, r3
   1d48a:	2107      	movs	r1, #7
   1d48c:	2000      	movs	r0, #0
   1d48e:	4b9a      	ldr	r3, [pc, #616]	; (1d6f8 <print_data_screen+0x300>)
   1d490:	4798      	blx	r3


	
	//  Draw Charge Status	
	if (batt_charge_status){
   1d492:	1dfb      	adds	r3, r7, #7
   1d494:	781b      	ldrb	r3, [r3, #0]
   1d496:	2b00      	cmp	r3, #0
   1d498:	d023      	beq.n	1d4e2 <print_data_screen+0xea>
		if (flipper){
   1d49a:	4b99      	ldr	r3, [pc, #612]	; (1d700 <print_data_screen+0x308>)
   1d49c:	781b      	ldrb	r3, [r3, #0]
   1d49e:	2b00      	cmp	r3, #0
   1d4a0:	d003      	beq.n	1d4aa <print_data_screen+0xb2>
			flipper = false;
   1d4a2:	4b97      	ldr	r3, [pc, #604]	; (1d700 <print_data_screen+0x308>)
   1d4a4:	2200      	movs	r2, #0
   1d4a6:	701a      	strb	r2, [r3, #0]
   1d4a8:	e002      	b.n	1d4b0 <print_data_screen+0xb8>
		}else{
			flipper = true;
   1d4aa:	4b95      	ldr	r3, [pc, #596]	; (1d700 <print_data_screen+0x308>)
   1d4ac:	2201      	movs	r2, #1
   1d4ae:	701a      	strb	r2, [r3, #0]
		}
		//  Draw lines
		glcd_draw_line(49, 64, 49, 54, BLACK);
   1d4b0:	2301      	movs	r3, #1
   1d4b2:	9300      	str	r3, [sp, #0]
   1d4b4:	2336      	movs	r3, #54	; 0x36
   1d4b6:	2231      	movs	r2, #49	; 0x31
   1d4b8:	2140      	movs	r1, #64	; 0x40
   1d4ba:	2031      	movs	r0, #49	; 0x31
   1d4bc:	4c91      	ldr	r4, [pc, #580]	; (1d704 <print_data_screen+0x30c>)
   1d4be:	47a0      	blx	r4
		glcd_draw_line(49, 54, 83, 54, BLACK);
   1d4c0:	2301      	movs	r3, #1
   1d4c2:	9300      	str	r3, [sp, #0]
   1d4c4:	2336      	movs	r3, #54	; 0x36
   1d4c6:	2253      	movs	r2, #83	; 0x53
   1d4c8:	2136      	movs	r1, #54	; 0x36
   1d4ca:	2031      	movs	r0, #49	; 0x31
   1d4cc:	4c8d      	ldr	r4, [pc, #564]	; (1d704 <print_data_screen+0x30c>)
   1d4ce:	47a0      	blx	r4
		glcd_draw_line(83, 64, 83, 54, BLACK);
   1d4d0:	2301      	movs	r3, #1
   1d4d2:	9300      	str	r3, [sp, #0]
   1d4d4:	2336      	movs	r3, #54	; 0x36
   1d4d6:	2253      	movs	r2, #83	; 0x53
   1d4d8:	2140      	movs	r1, #64	; 0x40
   1d4da:	2053      	movs	r0, #83	; 0x53
   1d4dc:	4c89      	ldr	r4, [pc, #548]	; (1d704 <print_data_screen+0x30c>)
   1d4de:	47a0      	blx	r4
   1d4e0:	e002      	b.n	1d4e8 <print_data_screen+0xf0>
		
			
	}else{
		flipper = true;
   1d4e2:	4b87      	ldr	r3, [pc, #540]	; (1d700 <print_data_screen+0x308>)
   1d4e4:	2201      	movs	r2, #1
   1d4e6:	701a      	strb	r2, [r3, #0]
	}
	if (flipper){
   1d4e8:	4b85      	ldr	r3, [pc, #532]	; (1d700 <print_data_screen+0x308>)
   1d4ea:	781b      	ldrb	r3, [r3, #0]
   1d4ec:	2b00      	cmp	r3, #0
   1d4ee:	d009      	beq.n	1d504 <print_data_screen+0x10c>
		sprintf(display_str,"B:%02d%%", getBatteryLevel());		
   1d4f0:	4b85      	ldr	r3, [pc, #532]	; (1d708 <print_data_screen+0x310>)
   1d4f2:	4798      	blx	r3
   1d4f4:	0003      	movs	r3, r0
   1d4f6:	001a      	movs	r2, r3
   1d4f8:	4984      	ldr	r1, [pc, #528]	; (1d70c <print_data_screen+0x314>)
   1d4fa:	4b7c      	ldr	r3, [pc, #496]	; (1d6ec <print_data_screen+0x2f4>)
   1d4fc:	0018      	movs	r0, r3
   1d4fe:	4b7c      	ldr	r3, [pc, #496]	; (1d6f0 <print_data_screen+0x2f8>)
   1d500:	4798      	blx	r3
   1d502:	e008      	b.n	1d516 <print_data_screen+0x11e>
	}else{
		sprintf(display_str,"B:%02d", getBatteryLevel());
   1d504:	4b80      	ldr	r3, [pc, #512]	; (1d708 <print_data_screen+0x310>)
   1d506:	4798      	blx	r3
   1d508:	0003      	movs	r3, r0
   1d50a:	001a      	movs	r2, r3
   1d50c:	4980      	ldr	r1, [pc, #512]	; (1d710 <print_data_screen+0x318>)
   1d50e:	4b77      	ldr	r3, [pc, #476]	; (1d6ec <print_data_screen+0x2f4>)
   1d510:	0018      	movs	r0, r3
   1d512:	4b77      	ldr	r3, [pc, #476]	; (1d6f0 <print_data_screen+0x2f8>)
   1d514:	4798      	blx	r3
	}
	glcd_tiny_draw_string(51,7,display_str);
   1d516:	4b75      	ldr	r3, [pc, #468]	; (1d6ec <print_data_screen+0x2f4>)
   1d518:	001a      	movs	r2, r3
   1d51a:	2107      	movs	r1, #7
   1d51c:	2033      	movs	r0, #51	; 0x33
   1d51e:	4b76      	ldr	r3, [pc, #472]	; (1d6f8 <print_data_screen+0x300>)
   1d520:	4798      	blx	r3
	#define y1 0  //  Starting Y position for header
	#define y2 10 //  Starting Y position for data
	
	#define num_lines 5
	//Print Data Headers
	sprintf(display_str,"REF");
   1d522:	4a72      	ldr	r2, [pc, #456]	; (1d6ec <print_data_screen+0x2f4>)
   1d524:	4b7b      	ldr	r3, [pc, #492]	; (1d714 <print_data_screen+0x31c>)
   1d526:	0010      	movs	r0, r2
   1d528:	0019      	movs	r1, r3
   1d52a:	2304      	movs	r3, #4
   1d52c:	001a      	movs	r2, r3
   1d52e:	4b7a      	ldr	r3, [pc, #488]	; (1d718 <print_data_screen+0x320>)
   1d530:	4798      	blx	r3
	glcd_draw_string_xy(x1,y1, display_str);
   1d532:	4b6e      	ldr	r3, [pc, #440]	; (1d6ec <print_data_screen+0x2f4>)
   1d534:	001a      	movs	r2, r3
   1d536:	2100      	movs	r1, #0
   1d538:	2000      	movs	r0, #0
   1d53a:	4b78      	ldr	r3, [pc, #480]	; (1d71c <print_data_screen+0x324>)
   1d53c:	4798      	blx	r3
	
	sprintf(display_str,"DIST");
   1d53e:	4a6b      	ldr	r2, [pc, #428]	; (1d6ec <print_data_screen+0x2f4>)
   1d540:	4b77      	ldr	r3, [pc, #476]	; (1d720 <print_data_screen+0x328>)
   1d542:	0010      	movs	r0, r2
   1d544:	0019      	movs	r1, r3
   1d546:	2305      	movs	r3, #5
   1d548:	001a      	movs	r2, r3
   1d54a:	4b73      	ldr	r3, [pc, #460]	; (1d718 <print_data_screen+0x320>)
   1d54c:	4798      	blx	r3
	glcd_draw_string_xy(x2,y1,display_str);
   1d54e:	4b67      	ldr	r3, [pc, #412]	; (1d6ec <print_data_screen+0x2f4>)
   1d550:	001a      	movs	r2, r3
   1d552:	2100      	movs	r1, #0
   1d554:	201c      	movs	r0, #28
   1d556:	4b71      	ldr	r3, [pc, #452]	; (1d71c <print_data_screen+0x324>)
   1d558:	4798      	blx	r3
	
	sprintf(display_str,"AZM");
   1d55a:	4a64      	ldr	r2, [pc, #400]	; (1d6ec <print_data_screen+0x2f4>)
   1d55c:	4b71      	ldr	r3, [pc, #452]	; (1d724 <print_data_screen+0x32c>)
   1d55e:	0010      	movs	r0, r2
   1d560:	0019      	movs	r1, r3
   1d562:	2304      	movs	r3, #4
   1d564:	001a      	movs	r2, r3
   1d566:	4b6c      	ldr	r3, [pc, #432]	; (1d718 <print_data_screen+0x320>)
   1d568:	4798      	blx	r3
	glcd_draw_string_xy(x3, y1, display_str);
   1d56a:	4b60      	ldr	r3, [pc, #384]	; (1d6ec <print_data_screen+0x2f4>)
   1d56c:	001a      	movs	r2, r3
   1d56e:	2100      	movs	r1, #0
   1d570:	203f      	movs	r0, #63	; 0x3f
   1d572:	4b6a      	ldr	r3, [pc, #424]	; (1d71c <print_data_screen+0x324>)
   1d574:	4798      	blx	r3
	glcd_draw_circle(x3+21, y1+2, 2, BLACK);
   1d576:	2301      	movs	r3, #1
   1d578:	2202      	movs	r2, #2
   1d57a:	2102      	movs	r1, #2
   1d57c:	2054      	movs	r0, #84	; 0x54
   1d57e:	4c6a      	ldr	r4, [pc, #424]	; (1d728 <print_data_screen+0x330>)
   1d580:	47a0      	blx	r4

	sprintf(display_str,"INCL");
   1d582:	4a5a      	ldr	r2, [pc, #360]	; (1d6ec <print_data_screen+0x2f4>)
   1d584:	4b69      	ldr	r3, [pc, #420]	; (1d72c <print_data_screen+0x334>)
   1d586:	0010      	movs	r0, r2
   1d588:	0019      	movs	r1, r3
   1d58a:	2305      	movs	r3, #5
   1d58c:	001a      	movs	r2, r3
   1d58e:	4b62      	ldr	r3, [pc, #392]	; (1d718 <print_data_screen+0x320>)
   1d590:	4798      	blx	r3
	glcd_draw_string_xy(x4, y1, display_str);
   1d592:	4b56      	ldr	r3, [pc, #344]	; (1d6ec <print_data_screen+0x2f4>)
   1d594:	001a      	movs	r2, r3
   1d596:	2100      	movs	r1, #0
   1d598:	2062      	movs	r0, #98	; 0x62
   1d59a:	4b60      	ldr	r3, [pc, #384]	; (1d71c <print_data_screen+0x324>)
   1d59c:	4798      	blx	r3
	glcd_draw_circle(x4+26, y1+2, 2, BLACK);
   1d59e:	2301      	movs	r3, #1
   1d5a0:	2202      	movs	r2, #2
   1d5a2:	2102      	movs	r1, #2
   1d5a4:	207c      	movs	r0, #124	; 0x7c
   1d5a6:	4c60      	ldr	r4, [pc, #384]	; (1d728 <print_data_screen+0x330>)
   1d5a8:	47a0      	blx	r4

	//Print Grid Lines
	glcd_draw_line(0, y1+8, 128, y1+8, BLACK);
   1d5aa:	2301      	movs	r3, #1
   1d5ac:	9300      	str	r3, [sp, #0]
   1d5ae:	2308      	movs	r3, #8
   1d5b0:	2280      	movs	r2, #128	; 0x80
   1d5b2:	2108      	movs	r1, #8
   1d5b4:	2000      	movs	r0, #0
   1d5b6:	4c53      	ldr	r4, [pc, #332]	; (1d704 <print_data_screen+0x30c>)
   1d5b8:	47a0      	blx	r4
	glcd_draw_line(0, y2+8, 128, y2+8, BLACK);
   1d5ba:	2301      	movs	r3, #1
   1d5bc:	9300      	str	r3, [sp, #0]
   1d5be:	2312      	movs	r3, #18
   1d5c0:	2280      	movs	r2, #128	; 0x80
   1d5c2:	2112      	movs	r1, #18
   1d5c4:	2000      	movs	r0, #0
   1d5c6:	4c4f      	ldr	r4, [pc, #316]	; (1d704 <print_data_screen+0x30c>)
   1d5c8:	47a0      	blx	r4
	glcd_draw_line(x2-2, 0, x2-2, 53, BLACK);
   1d5ca:	2301      	movs	r3, #1
   1d5cc:	9300      	str	r3, [sp, #0]
   1d5ce:	2335      	movs	r3, #53	; 0x35
   1d5d0:	221a      	movs	r2, #26
   1d5d2:	2100      	movs	r1, #0
   1d5d4:	201a      	movs	r0, #26
   1d5d6:	4c4b      	ldr	r4, [pc, #300]	; (1d704 <print_data_screen+0x30c>)
   1d5d8:	47a0      	blx	r4
	glcd_draw_line(x3-2, 0, x3-2, 53, BLACK);
   1d5da:	2301      	movs	r3, #1
   1d5dc:	9300      	str	r3, [sp, #0]
   1d5de:	2335      	movs	r3, #53	; 0x35
   1d5e0:	223d      	movs	r2, #61	; 0x3d
   1d5e2:	2100      	movs	r1, #0
   1d5e4:	203d      	movs	r0, #61	; 0x3d
   1d5e6:	4c47      	ldr	r4, [pc, #284]	; (1d704 <print_data_screen+0x30c>)
   1d5e8:	47a0      	blx	r4
	glcd_draw_line(x4-2, 0, x4-2, 53, BLACK);
   1d5ea:	2301      	movs	r3, #1
   1d5ec:	9300      	str	r3, [sp, #0]
   1d5ee:	2335      	movs	r3, #53	; 0x35
   1d5f0:	2260      	movs	r2, #96	; 0x60
   1d5f2:	2100      	movs	r1, #0
   1d5f4:	2060      	movs	r0, #96	; 0x60
   1d5f6:	4c43      	ldr	r4, [pc, #268]	; (1d704 <print_data_screen+0x30c>)
   1d5f8:	47a0      	blx	r4
	//Print Data
	uint16_t i;
	uint16_t y_temp;
	int16_t temp_index;
	int16_t temp_ref;
	for (i=0;i<num_lines;i++){
   1d5fa:	230e      	movs	r3, #14
   1d5fc:	18fb      	adds	r3, r7, r3
   1d5fe:	2200      	movs	r2, #0
   1d600:	801a      	strh	r2, [r3, #0]
   1d602:	e13c      	b.n	1d87e <print_data_screen+0x486>
		temp_index=data_buf_ind-i;
   1d604:	4b4a      	ldr	r3, [pc, #296]	; (1d730 <print_data_screen+0x338>)
   1d606:	781b      	ldrb	r3, [r3, #0]
   1d608:	b29a      	uxth	r2, r3
   1d60a:	230e      	movs	r3, #14
   1d60c:	18fb      	adds	r3, r7, r3
   1d60e:	881b      	ldrh	r3, [r3, #0]
   1d610:	1ad3      	subs	r3, r2, r3
   1d612:	b29a      	uxth	r2, r3
   1d614:	230a      	movs	r3, #10
   1d616:	18fb      	adds	r3, r7, r3
   1d618:	801a      	strh	r2, [r3, #0]
		temp_ref=data_ref-i;
   1d61a:	4b46      	ldr	r3, [pc, #280]	; (1d734 <print_data_screen+0x33c>)
   1d61c:	681b      	ldr	r3, [r3, #0]
   1d61e:	b29a      	uxth	r2, r3
   1d620:	230e      	movs	r3, #14
   1d622:	18fb      	adds	r3, r7, r3
   1d624:	881b      	ldrh	r3, [r3, #0]
   1d626:	1ad3      	subs	r3, r2, r3
   1d628:	b29a      	uxth	r2, r3
   1d62a:	2308      	movs	r3, #8
   1d62c:	18fb      	adds	r3, r7, r3
   1d62e:	801a      	strh	r2, [r3, #0]
		if(current_state==st_aim){//bump everything down to display active reading
   1d630:	4b41      	ldr	r3, [pc, #260]	; (1d738 <print_data_screen+0x340>)
   1d632:	781b      	ldrb	r3, [r3, #0]
   1d634:	b2db      	uxtb	r3, r3
   1d636:	2b00      	cmp	r3, #0
   1d638:	d10f      	bne.n	1d65a <print_data_screen+0x262>
			temp_index=temp_index+1;
   1d63a:	230a      	movs	r3, #10
   1d63c:	18fb      	adds	r3, r7, r3
   1d63e:	881b      	ldrh	r3, [r3, #0]
   1d640:	3301      	adds	r3, #1
   1d642:	b29a      	uxth	r2, r3
   1d644:	230a      	movs	r3, #10
   1d646:	18fb      	adds	r3, r7, r3
   1d648:	801a      	strh	r2, [r3, #0]
			temp_ref=temp_ref+1;
   1d64a:	2308      	movs	r3, #8
   1d64c:	18fb      	adds	r3, r7, r3
   1d64e:	881b      	ldrh	r3, [r3, #0]
   1d650:	3301      	adds	r3, #1
   1d652:	b29a      	uxth	r2, r3
   1d654:	2308      	movs	r3, #8
   1d656:	18fb      	adds	r3, r7, r3
   1d658:	801a      	strh	r2, [r3, #0]
		}
		//Set index for buffer wrap-around
		if (temp_index<0){
   1d65a:	230a      	movs	r3, #10
   1d65c:	18fb      	adds	r3, r7, r3
   1d65e:	2200      	movs	r2, #0
   1d660:	5e9b      	ldrsh	r3, [r3, r2]
   1d662:	2b00      	cmp	r3, #0
   1d664:	da08      	bge.n	1d678 <print_data_screen+0x280>
			temp_index = buf_length+temp_index;
   1d666:	230a      	movs	r3, #10
   1d668:	18fb      	adds	r3, r7, r3
   1d66a:	881b      	ldrh	r3, [r3, #0]
   1d66c:	330a      	adds	r3, #10
   1d66e:	b29a      	uxth	r2, r3
   1d670:	230a      	movs	r3, #10
   1d672:	18fb      	adds	r3, r7, r3
   1d674:	801a      	strh	r2, [r3, #0]
   1d676:	e00d      	b.n	1d694 <print_data_screen+0x29c>
			}else if(temp_index>=buf_length){
   1d678:	230a      	movs	r3, #10
   1d67a:	18fb      	adds	r3, r7, r3
   1d67c:	2200      	movs	r2, #0
   1d67e:	5e9b      	ldrsh	r3, [r3, r2]
   1d680:	2b09      	cmp	r3, #9
   1d682:	dd07      	ble.n	1d694 <print_data_screen+0x29c>
			temp_index = temp_index-buf_length;
   1d684:	230a      	movs	r3, #10
   1d686:	18fb      	adds	r3, r7, r3
   1d688:	881b      	ldrh	r3, [r3, #0]
   1d68a:	3b0a      	subs	r3, #10
   1d68c:	b29a      	uxth	r2, r3
   1d68e:	230a      	movs	r3, #10
   1d690:	18fb      	adds	r3, r7, r3
   1d692:	801a      	strh	r2, [r3, #0]
		}
		//print lines
		if ((temp_ref)>0){
   1d694:	2308      	movs	r3, #8
   1d696:	18fb      	adds	r3, r7, r3
   1d698:	2200      	movs	r2, #0
   1d69a:	5e9b      	ldrsh	r3, [r3, r2]
   1d69c:	2b00      	cmp	r3, #0
   1d69e:	dc00      	bgt.n	1d6a2 <print_data_screen+0x2aa>
   1d6a0:	e0e6      	b.n	1d870 <print_data_screen+0x478>
			//Adjust line spacing for grid lines
			if(i<2){y_temp=y2+10*i;}
   1d6a2:	230e      	movs	r3, #14
   1d6a4:	18fb      	adds	r3, r7, r3
   1d6a6:	881b      	ldrh	r3, [r3, #0]
   1d6a8:	2b01      	cmp	r3, #1
   1d6aa:	d847      	bhi.n	1d73c <print_data_screen+0x344>
   1d6ac:	230e      	movs	r3, #14
   1d6ae:	18fb      	adds	r3, r7, r3
   1d6b0:	881b      	ldrh	r3, [r3, #0]
   1d6b2:	3301      	adds	r3, #1
   1d6b4:	b29b      	uxth	r3, r3
   1d6b6:	220c      	movs	r2, #12
   1d6b8:	18ba      	adds	r2, r7, r2
   1d6ba:	1c19      	adds	r1, r3, #0
   1d6bc:	0089      	lsls	r1, r1, #2
   1d6be:	18cb      	adds	r3, r1, r3
   1d6c0:	18db      	adds	r3, r3, r3
   1d6c2:	8013      	strh	r3, [r2, #0]
   1d6c4:	e045      	b.n	1d752 <print_data_screen+0x35a>
   1d6c6:	46c0      	nop			; (mov r8, r8)
   1d6c8:	00011001 	.word	0x00011001
   1d6cc:	00001cd1 	.word	0x00001cd1
   1d6d0:	00028b80 	.word	0x00028b80
   1d6d4:	00015f85 	.word	0x00015f85
   1d6d8:	00015025 	.word	0x00015025
   1d6dc:	200034a8 	.word	0x200034a8
   1d6e0:	200011f4 	.word	0x200011f4
   1d6e4:	00023a0d 	.word	0x00023a0d
   1d6e8:	0002986c 	.word	0x0002986c
   1d6ec:	20003534 	.word	0x20003534
   1d6f0:	00023d31 	.word	0x00023d31
   1d6f4:	00029878 	.word	0x00029878
   1d6f8:	00016111 	.word	0x00016111
   1d6fc:	00029884 	.word	0x00029884
   1d700:	20000e51 	.word	0x20000e51
   1d704:	00015161 	.word	0x00015161
   1d708:	00001c19 	.word	0x00001c19
   1d70c:	00029894 	.word	0x00029894
   1d710:	000298a0 	.word	0x000298a0
   1d714:	000298a8 	.word	0x000298a8
   1d718:	00023c19 	.word	0x00023c19
   1d71c:	00015f0d 	.word	0x00015f0d
   1d720:	000298ac 	.word	0x000298ac
   1d724:	000298b4 	.word	0x000298b4
   1d728:	0001534d 	.word	0x0001534d
   1d72c:	000298b8 	.word	0x000298b8
   1d730:	20000e35 	.word	0x20000e35
   1d734:	20000e38 	.word	0x20000e38
   1d738:	20002db8 	.word	0x20002db8
			else {y_temp=y2+9*i;	}
   1d73c:	230e      	movs	r3, #14
   1d73e:	18fb      	adds	r3, r7, r3
   1d740:	881b      	ldrh	r3, [r3, #0]
   1d742:	1c1a      	adds	r2, r3, #0
   1d744:	00d2      	lsls	r2, r2, #3
   1d746:	18d3      	adds	r3, r2, r3
   1d748:	b29a      	uxth	r2, r3
   1d74a:	230c      	movs	r3, #12
   1d74c:	18fb      	adds	r3, r7, r3
   1d74e:	320a      	adds	r2, #10
   1d750:	801a      	strh	r2, [r3, #0]
			if((current_state==st_main_display)||(i>0)){//do not print reference and distance for active reading
   1d752:	4b51      	ldr	r3, [pc, #324]	; (1d898 <print_data_screen+0x4a0>)
   1d754:	781b      	ldrb	r3, [r3, #0]
   1d756:	b2db      	uxtb	r3, r3
   1d758:	2b02      	cmp	r3, #2
   1d75a:	d004      	beq.n	1d766 <print_data_screen+0x36e>
   1d75c:	230e      	movs	r3, #14
   1d75e:	18fb      	adds	r3, r7, r3
   1d760:	881b      	ldrh	r3, [r3, #0]
   1d762:	2b00      	cmp	r3, #0
   1d764:	d048      	beq.n	1d7f8 <print_data_screen+0x400>
				sprintf(display_str, "%d", data_buf[temp_index].index_ref);//reference
   1d766:	230a      	movs	r3, #10
   1d768:	18fb      	adds	r3, r7, r3
   1d76a:	2200      	movs	r2, #0
   1d76c:	5e9a      	ldrsh	r2, [r3, r2]
   1d76e:	4b4b      	ldr	r3, [pc, #300]	; (1d89c <print_data_screen+0x4a4>)
   1d770:	21a4      	movs	r1, #164	; 0xa4
   1d772:	434a      	muls	r2, r1
   1d774:	58d2      	ldr	r2, [r2, r3]
   1d776:	494a      	ldr	r1, [pc, #296]	; (1d8a0 <print_data_screen+0x4a8>)
   1d778:	4b4a      	ldr	r3, [pc, #296]	; (1d8a4 <print_data_screen+0x4ac>)
   1d77a:	0018      	movs	r0, r3
   1d77c:	4b4a      	ldr	r3, [pc, #296]	; (1d8a8 <print_data_screen+0x4b0>)
   1d77e:	4798      	blx	r3
				glcd_draw_string_xy(x1, y_temp, display_str);
   1d780:	230c      	movs	r3, #12
   1d782:	18fb      	adds	r3, r7, r3
   1d784:	881b      	ldrh	r3, [r3, #0]
   1d786:	b2db      	uxtb	r3, r3
   1d788:	4a46      	ldr	r2, [pc, #280]	; (1d8a4 <print_data_screen+0x4ac>)
   1d78a:	0019      	movs	r1, r3
   1d78c:	2000      	movs	r0, #0
   1d78e:	4b47      	ldr	r3, [pc, #284]	; (1d8ac <print_data_screen+0x4b4>)
   1d790:	4798      	blx	r3
				sprintf(display_str, "%.1f", data_buf[temp_index].distance);//distance
   1d792:	230a      	movs	r3, #10
   1d794:	18fb      	adds	r3, r7, r3
   1d796:	2200      	movs	r2, #0
   1d798:	5e9b      	ldrsh	r3, [r3, r2]
   1d79a:	4a40      	ldr	r2, [pc, #256]	; (1d89c <print_data_screen+0x4a4>)
   1d79c:	21a4      	movs	r1, #164	; 0xa4
   1d79e:	434b      	muls	r3, r1
   1d7a0:	18d3      	adds	r3, r2, r3
   1d7a2:	331c      	adds	r3, #28
   1d7a4:	681a      	ldr	r2, [r3, #0]
   1d7a6:	4b42      	ldr	r3, [pc, #264]	; (1d8b0 <print_data_screen+0x4b8>)
   1d7a8:	1c10      	adds	r0, r2, #0
   1d7aa:	4798      	blx	r3
   1d7ac:	0003      	movs	r3, r0
   1d7ae:	000c      	movs	r4, r1
   1d7b0:	4940      	ldr	r1, [pc, #256]	; (1d8b4 <print_data_screen+0x4bc>)
   1d7b2:	483c      	ldr	r0, [pc, #240]	; (1d8a4 <print_data_screen+0x4ac>)
   1d7b4:	001a      	movs	r2, r3
   1d7b6:	0023      	movs	r3, r4
   1d7b8:	4c3b      	ldr	r4, [pc, #236]	; (1d8a8 <print_data_screen+0x4b0>)
   1d7ba:	47a0      	blx	r4
				glcd_draw_string_xy(x2, y_temp, display_str);
   1d7bc:	230c      	movs	r3, #12
   1d7be:	18fb      	adds	r3, r7, r3
   1d7c0:	881b      	ldrh	r3, [r3, #0]
   1d7c2:	b2db      	uxtb	r3, r3
   1d7c4:	4a37      	ldr	r2, [pc, #220]	; (1d8a4 <print_data_screen+0x4ac>)
   1d7c6:	0019      	movs	r1, r3
   1d7c8:	201c      	movs	r0, #28
   1d7ca:	4b38      	ldr	r3, [pc, #224]	; (1d8ac <print_data_screen+0x4b4>)
   1d7cc:	4798      	blx	r3
				
				//  Add Error message if necessary
				if (data_buf[temp_index].num_errors!=0){
   1d7ce:	230a      	movs	r3, #10
   1d7d0:	18fb      	adds	r3, r7, r3
   1d7d2:	2200      	movs	r2, #0
   1d7d4:	5e9b      	ldrsh	r3, [r3, r2]
   1d7d6:	4a31      	ldr	r2, [pc, #196]	; (1d89c <print_data_screen+0x4a4>)
   1d7d8:	21a4      	movs	r1, #164	; 0xa4
   1d7da:	434b      	muls	r3, r1
   1d7dc:	18d3      	adds	r3, r2, r3
   1d7de:	3358      	adds	r3, #88	; 0x58
   1d7e0:	681b      	ldr	r3, [r3, #0]
   1d7e2:	2b00      	cmp	r3, #0
   1d7e4:	d008      	beq.n	1d7f8 <print_data_screen+0x400>
					glcd_draw_string_xy(x1+18, y_temp, "E");				
   1d7e6:	230c      	movs	r3, #12
   1d7e8:	18fb      	adds	r3, r7, r3
   1d7ea:	881b      	ldrh	r3, [r3, #0]
   1d7ec:	b2db      	uxtb	r3, r3
   1d7ee:	4a32      	ldr	r2, [pc, #200]	; (1d8b8 <print_data_screen+0x4c0>)
   1d7f0:	0019      	movs	r1, r3
   1d7f2:	2012      	movs	r0, #18
   1d7f4:	4b2d      	ldr	r3, [pc, #180]	; (1d8ac <print_data_screen+0x4b4>)
   1d7f6:	4798      	blx	r3
				}
				
			}

			sprintf(display_str, "%.1f", data_buf[temp_index].azimuth);//Azimuth
   1d7f8:	230a      	movs	r3, #10
   1d7fa:	18fb      	adds	r3, r7, r3
   1d7fc:	2200      	movs	r2, #0
   1d7fe:	5e9b      	ldrsh	r3, [r3, r2]
   1d800:	4a26      	ldr	r2, [pc, #152]	; (1d89c <print_data_screen+0x4a4>)
   1d802:	21a4      	movs	r1, #164	; 0xa4
   1d804:	434b      	muls	r3, r1
   1d806:	18d3      	adds	r3, r2, r3
   1d808:	330c      	adds	r3, #12
   1d80a:	681a      	ldr	r2, [r3, #0]
   1d80c:	4b28      	ldr	r3, [pc, #160]	; (1d8b0 <print_data_screen+0x4b8>)
   1d80e:	1c10      	adds	r0, r2, #0
   1d810:	4798      	blx	r3
   1d812:	0003      	movs	r3, r0
   1d814:	000c      	movs	r4, r1
   1d816:	4927      	ldr	r1, [pc, #156]	; (1d8b4 <print_data_screen+0x4bc>)
   1d818:	4822      	ldr	r0, [pc, #136]	; (1d8a4 <print_data_screen+0x4ac>)
   1d81a:	001a      	movs	r2, r3
   1d81c:	0023      	movs	r3, r4
   1d81e:	4c22      	ldr	r4, [pc, #136]	; (1d8a8 <print_data_screen+0x4b0>)
   1d820:	47a0      	blx	r4
			glcd_draw_string_xy(x3, y_temp, display_str);
   1d822:	230c      	movs	r3, #12
   1d824:	18fb      	adds	r3, r7, r3
   1d826:	881b      	ldrh	r3, [r3, #0]
   1d828:	b2db      	uxtb	r3, r3
   1d82a:	4a1e      	ldr	r2, [pc, #120]	; (1d8a4 <print_data_screen+0x4ac>)
   1d82c:	0019      	movs	r1, r3
   1d82e:	203f      	movs	r0, #63	; 0x3f
   1d830:	4b1e      	ldr	r3, [pc, #120]	; (1d8ac <print_data_screen+0x4b4>)
   1d832:	4798      	blx	r3
			sprintf(display_str, "%.1f", data_buf[temp_index].inclination);//Inclination
   1d834:	230a      	movs	r3, #10
   1d836:	18fb      	adds	r3, r7, r3
   1d838:	2200      	movs	r2, #0
   1d83a:	5e9b      	ldrsh	r3, [r3, r2]
   1d83c:	4a17      	ldr	r2, [pc, #92]	; (1d89c <print_data_screen+0x4a4>)
   1d83e:	21a4      	movs	r1, #164	; 0xa4
   1d840:	434b      	muls	r3, r1
   1d842:	18d3      	adds	r3, r2, r3
   1d844:	3310      	adds	r3, #16
   1d846:	681a      	ldr	r2, [r3, #0]
   1d848:	4b19      	ldr	r3, [pc, #100]	; (1d8b0 <print_data_screen+0x4b8>)
   1d84a:	1c10      	adds	r0, r2, #0
   1d84c:	4798      	blx	r3
   1d84e:	0003      	movs	r3, r0
   1d850:	000c      	movs	r4, r1
   1d852:	4918      	ldr	r1, [pc, #96]	; (1d8b4 <print_data_screen+0x4bc>)
   1d854:	4813      	ldr	r0, [pc, #76]	; (1d8a4 <print_data_screen+0x4ac>)
   1d856:	001a      	movs	r2, r3
   1d858:	0023      	movs	r3, r4
   1d85a:	4c13      	ldr	r4, [pc, #76]	; (1d8a8 <print_data_screen+0x4b0>)
   1d85c:	47a0      	blx	r4
			glcd_draw_string_xy(x4, y_temp, display_str);
   1d85e:	230c      	movs	r3, #12
   1d860:	18fb      	adds	r3, r7, r3
   1d862:	881b      	ldrh	r3, [r3, #0]
   1d864:	b2db      	uxtb	r3, r3
   1d866:	4a0f      	ldr	r2, [pc, #60]	; (1d8a4 <print_data_screen+0x4ac>)
   1d868:	0019      	movs	r1, r3
   1d86a:	2062      	movs	r0, #98	; 0x62
   1d86c:	4b0f      	ldr	r3, [pc, #60]	; (1d8ac <print_data_screen+0x4b4>)
   1d86e:	4798      	blx	r3
	for (i=0;i<num_lines;i++){
   1d870:	230e      	movs	r3, #14
   1d872:	18fb      	adds	r3, r7, r3
   1d874:	881a      	ldrh	r2, [r3, #0]
   1d876:	230e      	movs	r3, #14
   1d878:	18fb      	adds	r3, r7, r3
   1d87a:	3201      	adds	r2, #1
   1d87c:	801a      	strh	r2, [r3, #0]
   1d87e:	230e      	movs	r3, #14
   1d880:	18fb      	adds	r3, r7, r3
   1d882:	881b      	ldrh	r3, [r3, #0]
   1d884:	2b04      	cmp	r3, #4
   1d886:	d800      	bhi.n	1d88a <print_data_screen+0x492>
   1d888:	e6bc      	b.n	1d604 <print_data_screen+0x20c>
	//glcd_tiny_draw_string(0,1,display_str);
	
	////////////////////////

	
	glcd_write();
   1d88a:	4b0c      	ldr	r3, [pc, #48]	; (1d8bc <print_data_screen+0x4c4>)
   1d88c:	4798      	blx	r3
}
   1d88e:	46c0      	nop			; (mov r8, r8)
   1d890:	46bd      	mov	sp, r7
   1d892:	b005      	add	sp, #20
   1d894:	bd90      	pop	{r4, r7, pc}
   1d896:	46c0      	nop			; (mov r8, r8)
   1d898:	20002db8 	.word	0x20002db8
   1d89c:	20002dbc 	.word	0x20002dbc
   1d8a0:	000298c0 	.word	0x000298c0
   1d8a4:	20003534 	.word	0x20003534
   1d8a8:	00023d31 	.word	0x00023d31
   1d8ac:	00015f0d 	.word	0x00015f0d
   1d8b0:	00023a0d 	.word	0x00023a0d
   1d8b4:	000298c4 	.word	0x000298c4
   1d8b8:	000298cc 	.word	0x000298cc
   1d8bc:	00015869 	.word	0x00015869

0001d8c0 <draw_arrows>:

void draw_arrows(uint8_t button){
   1d8c0:	b590      	push	{r4, r7, lr}
   1d8c2:	b085      	sub	sp, #20
   1d8c4:	af02      	add	r7, sp, #8
   1d8c6:	0002      	movs	r2, r0
   1d8c8:	1dfb      	adds	r3, r7, #7
   1d8ca:	701a      	strb	r2, [r3, #0]
	//draw menu up/down arrows
	switch(button){
   1d8cc:	1dfb      	adds	r3, r7, #7
   1d8ce:	781b      	ldrb	r3, [r3, #0]
   1d8d0:	2b02      	cmp	r3, #2
   1d8d2:	d002      	beq.n	1d8da <draw_arrows+0x1a>
   1d8d4:	2b03      	cmp	r3, #3
   1d8d6:	d011      	beq.n	1d8fc <draw_arrows+0x3c>
			glcd_draw_line(116, 40, 120, 44, BLACK);
			glcd_draw_line(120, 44, 124, 40, BLACK);
			break;
	}
	
}
   1d8d8:	e021      	b.n	1d91e <draw_arrows+0x5e>
			glcd_draw_line(116, 26, 120, 22, BLACK);
   1d8da:	2301      	movs	r3, #1
   1d8dc:	9300      	str	r3, [sp, #0]
   1d8de:	2316      	movs	r3, #22
   1d8e0:	2278      	movs	r2, #120	; 0x78
   1d8e2:	211a      	movs	r1, #26
   1d8e4:	2074      	movs	r0, #116	; 0x74
   1d8e6:	4c10      	ldr	r4, [pc, #64]	; (1d928 <draw_arrows+0x68>)
   1d8e8:	47a0      	blx	r4
			glcd_draw_line(120, 22, 124, 26, BLACK);
   1d8ea:	2301      	movs	r3, #1
   1d8ec:	9300      	str	r3, [sp, #0]
   1d8ee:	231a      	movs	r3, #26
   1d8f0:	227c      	movs	r2, #124	; 0x7c
   1d8f2:	2116      	movs	r1, #22
   1d8f4:	2078      	movs	r0, #120	; 0x78
   1d8f6:	4c0c      	ldr	r4, [pc, #48]	; (1d928 <draw_arrows+0x68>)
   1d8f8:	47a0      	blx	r4
			break;
   1d8fa:	e010      	b.n	1d91e <draw_arrows+0x5e>
			glcd_draw_line(116, 40, 120, 44, BLACK);
   1d8fc:	2301      	movs	r3, #1
   1d8fe:	9300      	str	r3, [sp, #0]
   1d900:	232c      	movs	r3, #44	; 0x2c
   1d902:	2278      	movs	r2, #120	; 0x78
   1d904:	2128      	movs	r1, #40	; 0x28
   1d906:	2074      	movs	r0, #116	; 0x74
   1d908:	4c07      	ldr	r4, [pc, #28]	; (1d928 <draw_arrows+0x68>)
   1d90a:	47a0      	blx	r4
			glcd_draw_line(120, 44, 124, 40, BLACK);
   1d90c:	2301      	movs	r3, #1
   1d90e:	9300      	str	r3, [sp, #0]
   1d910:	2328      	movs	r3, #40	; 0x28
   1d912:	227c      	movs	r2, #124	; 0x7c
   1d914:	212c      	movs	r1, #44	; 0x2c
   1d916:	2078      	movs	r0, #120	; 0x78
   1d918:	4c03      	ldr	r4, [pc, #12]	; (1d928 <draw_arrows+0x68>)
   1d91a:	47a0      	blx	r4
			break;
   1d91c:	46c0      	nop			; (mov r8, r8)
}
   1d91e:	46c0      	nop			; (mov r8, r8)
   1d920:	46bd      	mov	sp, r7
   1d922:	b003      	add	sp, #12
   1d924:	bd90      	pop	{r4, r7, pc}
   1d926:	46c0      	nop			; (mov r8, r8)
   1d928:	00015161 	.word	0x00015161

0001d92c <fn_aim_abort>:



void fn_aim_abort(void){
   1d92c:	b580      	push	{r7, lr}
   1d92e:	af00      	add	r7, sp, #0
	rangefinder_on_off(false);
   1d930:	2000      	movs	r0, #0
   1d932:	4b06      	ldr	r3, [pc, #24]	; (1d94c <fn_aim_abort+0x20>)
   1d934:	4798      	blx	r3
	ioport_set_pin_level(laser_reset, false);
   1d936:	2100      	movs	r1, #0
   1d938:	2002      	movs	r0, #2
   1d93a:	4b05      	ldr	r3, [pc, #20]	; (1d950 <fn_aim_abort+0x24>)
   1d93c:	4798      	blx	r3

	current_input = input_state_complete;
   1d93e:	4b05      	ldr	r3, [pc, #20]	; (1d954 <fn_aim_abort+0x28>)
   1d940:	2208      	movs	r2, #8
   1d942:	701a      	strb	r2, [r3, #0]
	
}
   1d944:	46c0      	nop			; (mov r8, r8)
   1d946:	46bd      	mov	sp, r7
   1d948:	bd80      	pop	{r7, pc}
   1d94a:	46c0      	nop			; (mov r8, r8)
   1d94c:	000035a5 	.word	0x000035a5
   1d950:	00019325 	.word	0x00019325
   1d954:	20004134 	.word	0x20004134

0001d958 <config_pins_powerup>:



void config_pins_powerup(void){
   1d958:	b580      	push	{r7, lr}
   1d95a:	af00      	add	r7, sp, #0
	ioport_init();
   1d95c:	4b56      	ldr	r3, [pc, #344]	; (1dab8 <config_pins_powerup+0x160>)
   1d95e:	4798      	blx	r3
	//Input Buttons
	ioport_set_pin_dir(button1, IOPORT_DIR_INPUT);
   1d960:	2100      	movs	r1, #0
   1d962:	2029      	movs	r0, #41	; 0x29
   1d964:	4b55      	ldr	r3, [pc, #340]	; (1dabc <config_pins_powerup+0x164>)
   1d966:	4798      	blx	r3
	ioport_set_pin_mode(button1, IOPORT_MODE_PULLUP);
   1d968:	2110      	movs	r1, #16
   1d96a:	2029      	movs	r0, #41	; 0x29
   1d96c:	4b54      	ldr	r3, [pc, #336]	; (1dac0 <config_pins_powerup+0x168>)
   1d96e:	4798      	blx	r3
	ioport_set_pin_dir(button2, IOPORT_DIR_INPUT);
   1d970:	2100      	movs	r1, #0
   1d972:	2004      	movs	r0, #4
   1d974:	4b51      	ldr	r3, [pc, #324]	; (1dabc <config_pins_powerup+0x164>)
   1d976:	4798      	blx	r3
	ioport_set_pin_mode(button2, IOPORT_MODE_PULLUP);
   1d978:	2110      	movs	r1, #16
   1d97a:	2004      	movs	r0, #4
   1d97c:	4b50      	ldr	r3, [pc, #320]	; (1dac0 <config_pins_powerup+0x168>)
   1d97e:	4798      	blx	r3
	ioport_set_pin_dir(button3, IOPORT_DIR_INPUT);
   1d980:	2100      	movs	r1, #0
   1d982:	2006      	movs	r0, #6
   1d984:	4b4d      	ldr	r3, [pc, #308]	; (1dabc <config_pins_powerup+0x164>)
   1d986:	4798      	blx	r3
	ioport_set_pin_mode(button3, IOPORT_MODE_PULLUP);
   1d988:	2110      	movs	r1, #16
   1d98a:	2006      	movs	r0, #6
   1d98c:	4b4c      	ldr	r3, [pc, #304]	; (1dac0 <config_pins_powerup+0x168>)
   1d98e:	4798      	blx	r3
	ioport_set_pin_dir(button4, IOPORT_DIR_INPUT);
   1d990:	2100      	movs	r1, #0
   1d992:	2007      	movs	r0, #7
   1d994:	4b49      	ldr	r3, [pc, #292]	; (1dabc <config_pins_powerup+0x164>)
   1d996:	4798      	blx	r3
	ioport_set_pin_mode(button4, IOPORT_MODE_PULLUP);
   1d998:	2110      	movs	r1, #16
   1d99a:	2007      	movs	r0, #7
   1d99c:	4b48      	ldr	r3, [pc, #288]	; (1dac0 <config_pins_powerup+0x168>)
   1d99e:	4798      	blx	r3
	ioport_set_pin_dir(buttonE, IOPORT_DIR_INPUT);
   1d9a0:	2100      	movs	r1, #0
   1d9a2:	2005      	movs	r0, #5
   1d9a4:	4b45      	ldr	r3, [pc, #276]	; (1dabc <config_pins_powerup+0x164>)
   1d9a6:	4798      	blx	r3
	ioport_set_pin_mode(buttonE, IOPORT_MODE_PULLUP);
   1d9a8:	2110      	movs	r1, #16
   1d9aa:	2005      	movs	r0, #5
   1d9ac:	4b44      	ldr	r3, [pc, #272]	; (1dac0 <config_pins_powerup+0x168>)
   1d9ae:	4798      	blx	r3
	//LCD setup
	ioport_set_pin_dir(LCD_SPI_SS_PIN, IOPORT_DIR_OUTPUT);
   1d9b0:	2101      	movs	r1, #1
   1d9b2:	2017      	movs	r0, #23
   1d9b4:	4b41      	ldr	r3, [pc, #260]	; (1dabc <config_pins_powerup+0x164>)
   1d9b6:	4798      	blx	r3
	ioport_set_pin_level(LCD_SPI_SS_PIN, true);
   1d9b8:	2101      	movs	r1, #1
   1d9ba:	2017      	movs	r0, #23
   1d9bc:	4b41      	ldr	r3, [pc, #260]	; (1dac4 <config_pins_powerup+0x16c>)
   1d9be:	4798      	blx	r3
	ioport_set_pin_dir(LCD_SPI_DC_PIN, IOPORT_DIR_OUTPUT);
   1d9c0:	2101      	movs	r1, #1
   1d9c2:	201b      	movs	r0, #27
   1d9c4:	4b3d      	ldr	r3, [pc, #244]	; (1dabc <config_pins_powerup+0x164>)
   1d9c6:	4798      	blx	r3
	ioport_set_pin_level(LCD_SPI_DC_PIN, false);
   1d9c8:	2100      	movs	r1, #0
   1d9ca:	201b      	movs	r0, #27
   1d9cc:	4b3d      	ldr	r3, [pc, #244]	; (1dac4 <config_pins_powerup+0x16c>)
   1d9ce:	4798      	blx	r3
	ioport_set_pin_dir(LCD_SPI_RST_PIN, IOPORT_DIR_OUTPUT);
   1d9d0:	2101      	movs	r1, #1
   1d9d2:	2037      	movs	r0, #55	; 0x37
   1d9d4:	4b39      	ldr	r3, [pc, #228]	; (1dabc <config_pins_powerup+0x164>)
   1d9d6:	4798      	blx	r3
	ioport_set_pin_level(LCD_SPI_RST_PIN, false);
   1d9d8:	2100      	movs	r1, #0
   1d9da:	2037      	movs	r0, #55	; 0x37
   1d9dc:	4b39      	ldr	r3, [pc, #228]	; (1dac4 <config_pins_powerup+0x16c>)
   1d9de:	4798      	blx	r3
	//power-supply 2 voltage enable
	ioport_set_pin_dir(V2_enable, IOPORT_DIR_OUTPUT);
   1d9e0:	2101      	movs	r1, #1
   1d9e2:	2022      	movs	r0, #34	; 0x22
   1d9e4:	4b35      	ldr	r3, [pc, #212]	; (1dabc <config_pins_powerup+0x164>)
   1d9e6:	4798      	blx	r3
	ioport_set_pin_level(V2_enable, true);
   1d9e8:	2101      	movs	r1, #1
   1d9ea:	2022      	movs	r0, #34	; 0x22
   1d9ec:	4b35      	ldr	r3, [pc, #212]	; (1dac4 <config_pins_powerup+0x16c>)
   1d9ee:	4798      	blx	r3
	//SPI pin
	ioport_set_pin_dir(lcd_SS, IOPORT_DIR_OUTPUT);
   1d9f0:	2101      	movs	r1, #1
   1d9f2:	2017      	movs	r0, #23
   1d9f4:	4b31      	ldr	r3, [pc, #196]	; (1dabc <config_pins_powerup+0x164>)
   1d9f6:	4798      	blx	r3
	ioport_set_pin_level(lcd_SS, true);
   1d9f8:	2101      	movs	r1, #1
   1d9fa:	2017      	movs	r0, #23
   1d9fc:	4b31      	ldr	r3, [pc, #196]	; (1dac4 <config_pins_powerup+0x16c>)
   1d9fe:	4798      	blx	r3
	ioport_set_pin_dir(acc1_SS, IOPORT_DIR_OUTPUT);
   1da00:	2101      	movs	r1, #1
   1da02:	2012      	movs	r0, #18
   1da04:	4b2d      	ldr	r3, [pc, #180]	; (1dabc <config_pins_powerup+0x164>)
   1da06:	4798      	blx	r3
	ioport_set_pin_level(acc1_SS, true);
   1da08:	2101      	movs	r1, #1
   1da0a:	2012      	movs	r0, #18
   1da0c:	4b2d      	ldr	r3, [pc, #180]	; (1dac4 <config_pins_powerup+0x16c>)
   1da0e:	4798      	blx	r3
	ioport_set_pin_dir(acc2_SS, IOPORT_DIR_OUTPUT);
   1da10:	2101      	movs	r1, #1
   1da12:	2013      	movs	r0, #19
   1da14:	4b29      	ldr	r3, [pc, #164]	; (1dabc <config_pins_powerup+0x164>)
   1da16:	4798      	blx	r3
	ioport_set_pin_level(acc2_SS, true);
   1da18:	2101      	movs	r1, #1
   1da1a:	2013      	movs	r0, #19
   1da1c:	4b29      	ldr	r3, [pc, #164]	; (1dac4 <config_pins_powerup+0x16c>)
   1da1e:	4798      	blx	r3
	ioport_set_pin_dir(mag1_SS, IOPORT_DIR_OUTPUT);
   1da20:	2101      	movs	r1, #1
   1da22:	2015      	movs	r0, #21
   1da24:	4b25      	ldr	r3, [pc, #148]	; (1dabc <config_pins_powerup+0x164>)
   1da26:	4798      	blx	r3
	ioport_set_pin_level(mag1_SS, true);
   1da28:	2101      	movs	r1, #1
   1da2a:	2015      	movs	r0, #21
   1da2c:	4b25      	ldr	r3, [pc, #148]	; (1dac4 <config_pins_powerup+0x16c>)
   1da2e:	4798      	blx	r3
	ioport_set_pin_dir(mag2_SS, IOPORT_DIR_OUTPUT);
   1da30:	2101      	movs	r1, #1
   1da32:	2014      	movs	r0, #20
   1da34:	4b21      	ldr	r3, [pc, #132]	; (1dabc <config_pins_powerup+0x164>)
   1da36:	4798      	blx	r3
	ioport_set_pin_level(mag2_SS, true);
   1da38:	2101      	movs	r1, #1
   1da3a:	2014      	movs	r0, #20
   1da3c:	4b21      	ldr	r3, [pc, #132]	; (1dac4 <config_pins_powerup+0x16c>)
   1da3e:	4798      	blx	r3
	ioport_set_pin_dir(SD_CS, IOPORT_DIR_OUTPUT);
   1da40:	2101      	movs	r1, #1
   1da42:	200f      	movs	r0, #15
   1da44:	4b1d      	ldr	r3, [pc, #116]	; (1dabc <config_pins_powerup+0x164>)
   1da46:	4798      	blx	r3
	ioport_set_pin_level(SD_CS, true);
   1da48:	2101      	movs	r1, #1
   1da4a:	200f      	movs	r0, #15
   1da4c:	4b1d      	ldr	r3, [pc, #116]	; (1dac4 <config_pins_powerup+0x16c>)
   1da4e:	4798      	blx	r3
	ioport_set_pin_dir(BLE_SS, IOPORT_DIR_OUTPUT);
   1da50:	2101      	movs	r1, #1
   1da52:	2016      	movs	r0, #22
   1da54:	4b19      	ldr	r3, [pc, #100]	; (1dabc <config_pins_powerup+0x164>)
   1da56:	4798      	blx	r3
	ioport_set_pin_level(BLE_SS, true);
   1da58:	2101      	movs	r1, #1
   1da5a:	2016      	movs	r0, #22
   1da5c:	4b19      	ldr	r3, [pc, #100]	; (1dac4 <config_pins_powerup+0x16c>)
   1da5e:	4798      	blx	r3
	//UART Pins
	//ioport_set_pin_dir(MCU_RTS1, IOPORT_DIR_OUTPUT);
	//ioport_set_pin_level(MCU_RTS1, false);
	//ioport_set_pin_dir(MCU_CTS1, IOPORT_DIR_INPUT);
	//BLE pins
	ioport_set_pin_dir(BLE_ota, IOPORT_DIR_OUTPUT);
   1da60:	2101      	movs	r1, #1
   1da62:	2036      	movs	r0, #54	; 0x36
   1da64:	4b15      	ldr	r3, [pc, #84]	; (1dabc <config_pins_powerup+0x164>)
   1da66:	4798      	blx	r3
	ioport_set_pin_level(BLE_ota, false);// low to disable programming over BLE
   1da68:	2100      	movs	r1, #0
   1da6a:	2036      	movs	r0, #54	; 0x36
   1da6c:	4b15      	ldr	r3, [pc, #84]	; (1dac4 <config_pins_powerup+0x16c>)
   1da6e:	4798      	blx	r3
	ioport_set_pin_dir(BLE_autorun, IOPORT_DIR_OUTPUT);
   1da70:	2101      	movs	r1, #1
   1da72:	200e      	movs	r0, #14
   1da74:	4b11      	ldr	r3, [pc, #68]	; (1dabc <config_pins_powerup+0x164>)
   1da76:	4798      	blx	r3
	ioport_set_pin_level(BLE_autorun, true);//low for autorun enabled, high for development mode
   1da78:	2101      	movs	r1, #1
   1da7a:	200e      	movs	r0, #14
   1da7c:	4b11      	ldr	r3, [pc, #68]	; (1dac4 <config_pins_powerup+0x16c>)
   1da7e:	4798      	blx	r3
	ioport_set_pin_dir(BLE_reset, IOPORT_DIR_OUTPUT);
   1da80:	2101      	movs	r1, #1
   1da82:	2003      	movs	r0, #3
   1da84:	4b0d      	ldr	r3, [pc, #52]	; (1dabc <config_pins_powerup+0x164>)
   1da86:	4798      	blx	r3
	ioport_set_pin_level(BLE_reset, false); //low, hold in reset
   1da88:	2100      	movs	r1, #0
   1da8a:	2003      	movs	r0, #3
   1da8c:	4b0d      	ldr	r3, [pc, #52]	; (1dac4 <config_pins_powerup+0x16c>)
   1da8e:	4798      	blx	r3
	//miscellaneous
	ioport_set_pin_dir(laser_reset, IOPORT_DIR_OUTPUT);
   1da90:	2101      	movs	r1, #1
   1da92:	2002      	movs	r0, #2
   1da94:	4b09      	ldr	r3, [pc, #36]	; (1dabc <config_pins_powerup+0x164>)
   1da96:	4798      	blx	r3
	ioport_set_pin_level(laser_reset, false);
   1da98:	2100      	movs	r1, #0
   1da9a:	2002      	movs	r0, #2
   1da9c:	4b09      	ldr	r3, [pc, #36]	; (1dac4 <config_pins_powerup+0x16c>)
   1da9e:	4798      	blx	r3
	ioport_set_pin_dir(SD_CS, IOPORT_DIR_INPUT);
   1daa0:	2100      	movs	r1, #0
   1daa2:	200f      	movs	r0, #15
   1daa4:	4b05      	ldr	r3, [pc, #20]	; (1dabc <config_pins_powerup+0x164>)
   1daa6:	4798      	blx	r3
	ioport_set_pin_mode(SD_CS, IOPORT_MODE_PULLUP);
   1daa8:	2110      	movs	r1, #16
   1daaa:	200f      	movs	r0, #15
   1daac:	4b04      	ldr	r3, [pc, #16]	; (1dac0 <config_pins_powerup+0x168>)
   1daae:	4798      	blx	r3
}
   1dab0:	46c0      	nop			; (mov r8, r8)
   1dab2:	46bd      	mov	sp, r7
   1dab4:	bd80      	pop	{r7, pc}
   1dab6:	46c0      	nop			; (mov r8, r8)
   1dab8:	000192a5 	.word	0x000192a5
   1dabc:	000192fd 	.word	0x000192fd
   1dac0:	000192b9 	.word	0x000192b9
   1dac4:	00019325 	.word	0x00019325

0001dac8 <config_pins_powerdown>:




void config_pins_powerdown(void){
   1dac8:	b580      	push	{r7, lr}
   1daca:	af00      	add	r7, sp, #0
	//spi pins
	ioport_reset_pin_mode(mosi);
   1dacc:	202a      	movs	r0, #42	; 0x2a
   1dace:	4b3e      	ldr	r3, [pc, #248]	; (1dbc8 <config_pins_powerdown+0x100>)
   1dad0:	4798      	blx	r3
	ioport_reset_pin_mode(miso);
   1dad2:	2028      	movs	r0, #40	; 0x28
   1dad4:	4b3c      	ldr	r3, [pc, #240]	; (1dbc8 <config_pins_powerdown+0x100>)
   1dad6:	4798      	blx	r3
	ioport_reset_pin_mode(sclk);
   1dad8:	202b      	movs	r0, #43	; 0x2b
   1dada:	4b3b      	ldr	r3, [pc, #236]	; (1dbc8 <config_pins_powerdown+0x100>)
   1dadc:	4798      	blx	r3
	ioport_set_pin_dir(mosi, IOPORT_DIR_INPUT);
   1dade:	2100      	movs	r1, #0
   1dae0:	202a      	movs	r0, #42	; 0x2a
   1dae2:	4b3a      	ldr	r3, [pc, #232]	; (1dbcc <config_pins_powerdown+0x104>)
   1dae4:	4798      	blx	r3
	ioport_set_pin_dir(miso, IOPORT_DIR_INPUT);
   1dae6:	2100      	movs	r1, #0
   1dae8:	2028      	movs	r0, #40	; 0x28
   1daea:	4b38      	ldr	r3, [pc, #224]	; (1dbcc <config_pins_powerdown+0x104>)
   1daec:	4798      	blx	r3
	ioport_set_pin_dir(sclk, IOPORT_DIR_INPUT);
   1daee:	2100      	movs	r1, #0
   1daf0:	202b      	movs	r0, #43	; 0x2b
   1daf2:	4b36      	ldr	r3, [pc, #216]	; (1dbcc <config_pins_powerdown+0x104>)
   1daf4:	4798      	blx	r3
	//i2c pins
	ioport_reset_pin_mode(SDA);
   1daf6:	200c      	movs	r0, #12
   1daf8:	4b33      	ldr	r3, [pc, #204]	; (1dbc8 <config_pins_powerdown+0x100>)
   1dafa:	4798      	blx	r3
	ioport_reset_pin_mode(SCL);
   1dafc:	200d      	movs	r0, #13
   1dafe:	4b32      	ldr	r3, [pc, #200]	; (1dbc8 <config_pins_powerdown+0x100>)
   1db00:	4798      	blx	r3
	ioport_set_pin_dir(SDA, IOPORT_DIR_INPUT);
   1db02:	2100      	movs	r1, #0
   1db04:	200c      	movs	r0, #12
   1db06:	4b31      	ldr	r3, [pc, #196]	; (1dbcc <config_pins_powerdown+0x104>)
   1db08:	4798      	blx	r3
	ioport_set_pin_dir(SCL, IOPORT_DIR_INPUT);
   1db0a:	2100      	movs	r1, #0
   1db0c:	200d      	movs	r0, #13
   1db0e:	4b2f      	ldr	r3, [pc, #188]	; (1dbcc <config_pins_powerdown+0x104>)
   1db10:	4798      	blx	r3
	// UART pins
	ioport_reset_pin_mode(MCU_TX1);
   1db12:	2008      	movs	r0, #8
   1db14:	4b2c      	ldr	r3, [pc, #176]	; (1dbc8 <config_pins_powerdown+0x100>)
   1db16:	4798      	blx	r3
	ioport_reset_pin_mode(MCU_TX2);
   1db18:	2010      	movs	r0, #16
   1db1a:	4b2b      	ldr	r3, [pc, #172]	; (1dbc8 <config_pins_powerdown+0x100>)
   1db1c:	4798      	blx	r3
	ioport_reset_pin_mode(MCU_RX1);
   1db1e:	2009      	movs	r0, #9
   1db20:	4b29      	ldr	r3, [pc, #164]	; (1dbc8 <config_pins_powerdown+0x100>)
   1db22:	4798      	blx	r3
	ioport_reset_pin_mode(MCU_RX2);
   1db24:	2011      	movs	r0, #17
   1db26:	4b28      	ldr	r3, [pc, #160]	; (1dbc8 <config_pins_powerdown+0x100>)
   1db28:	4798      	blx	r3
	ioport_set_pin_dir(MCU_TX1, IOPORT_DIR_INPUT);
   1db2a:	2100      	movs	r1, #0
   1db2c:	2008      	movs	r0, #8
   1db2e:	4b27      	ldr	r3, [pc, #156]	; (1dbcc <config_pins_powerdown+0x104>)
   1db30:	4798      	blx	r3
	ioport_set_pin_dir(MCU_TX2, IOPORT_DIR_INPUT);
   1db32:	2100      	movs	r1, #0
   1db34:	2010      	movs	r0, #16
   1db36:	4b25      	ldr	r3, [pc, #148]	; (1dbcc <config_pins_powerdown+0x104>)
   1db38:	4798      	blx	r3
	ioport_set_pin_dir(MCU_RX1, IOPORT_DIR_INPUT);
   1db3a:	2100      	movs	r1, #0
   1db3c:	2009      	movs	r0, #9
   1db3e:	4b23      	ldr	r3, [pc, #140]	; (1dbcc <config_pins_powerdown+0x104>)
   1db40:	4798      	blx	r3
	ioport_set_pin_dir(MCU_RX2, IOPORT_DIR_INPUT);
   1db42:	2100      	movs	r1, #0
   1db44:	2011      	movs	r0, #17
   1db46:	4b21      	ldr	r3, [pc, #132]	; (1dbcc <config_pins_powerdown+0x104>)
   1db48:	4798      	blx	r3
	//set all pins used on V2 devices to high impedance
	ioport_set_pin_dir(lcd_SS , IOPORT_DIR_INPUT);
   1db4a:	2100      	movs	r1, #0
   1db4c:	2017      	movs	r0, #23
   1db4e:	4b1f      	ldr	r3, [pc, #124]	; (1dbcc <config_pins_powerdown+0x104>)
   1db50:	4798      	blx	r3
	ioport_set_pin_dir(acc1_SS, IOPORT_DIR_INPUT);
   1db52:	2100      	movs	r1, #0
   1db54:	2012      	movs	r0, #18
   1db56:	4b1d      	ldr	r3, [pc, #116]	; (1dbcc <config_pins_powerdown+0x104>)
   1db58:	4798      	blx	r3
	ioport_set_pin_dir(acc2_SS , IOPORT_DIR_INPUT);
   1db5a:	2100      	movs	r1, #0
   1db5c:	2013      	movs	r0, #19
   1db5e:	4b1b      	ldr	r3, [pc, #108]	; (1dbcc <config_pins_powerdown+0x104>)
   1db60:	4798      	blx	r3
	ioport_set_pin_dir(mag1_SS , IOPORT_DIR_INPUT);
   1db62:	2100      	movs	r1, #0
   1db64:	2015      	movs	r0, #21
   1db66:	4b19      	ldr	r3, [pc, #100]	; (1dbcc <config_pins_powerdown+0x104>)
   1db68:	4798      	blx	r3
	ioport_set_pin_dir(mag2_SS , IOPORT_DIR_INPUT);
   1db6a:	2100      	movs	r1, #0
   1db6c:	2014      	movs	r0, #20
   1db6e:	4b17      	ldr	r3, [pc, #92]	; (1dbcc <config_pins_powerdown+0x104>)
   1db70:	4798      	blx	r3
	ioport_set_pin_dir(SD_CS , IOPORT_DIR_INPUT);
   1db72:	2100      	movs	r1, #0
   1db74:	200f      	movs	r0, #15
   1db76:	4b15      	ldr	r3, [pc, #84]	; (1dbcc <config_pins_powerdown+0x104>)
   1db78:	4798      	blx	r3
	ioport_set_pin_dir(laser_reset , IOPORT_DIR_INPUT);
   1db7a:	2100      	movs	r1, #0
   1db7c:	2002      	movs	r0, #2
   1db7e:	4b13      	ldr	r3, [pc, #76]	; (1dbcc <config_pins_powerdown+0x104>)
   1db80:	4798      	blx	r3
	ioport_set_pin_dir(LCD_SPI_SS_PIN , IOPORT_DIR_INPUT);
   1db82:	2100      	movs	r1, #0
   1db84:	2017      	movs	r0, #23
   1db86:	4b11      	ldr	r3, [pc, #68]	; (1dbcc <config_pins_powerdown+0x104>)
   1db88:	4798      	blx	r3
	ioport_set_pin_dir(LCD_SPI_DC_PIN , IOPORT_DIR_INPUT);
   1db8a:	2100      	movs	r1, #0
   1db8c:	201b      	movs	r0, #27
   1db8e:	4b0f      	ldr	r3, [pc, #60]	; (1dbcc <config_pins_powerdown+0x104>)
   1db90:	4798      	blx	r3
	ioport_set_pin_dir(LCD_SPI_RST_PIN , IOPORT_DIR_INPUT);
   1db92:	2100      	movs	r1, #0
   1db94:	2037      	movs	r0, #55	; 0x37
   1db96:	4b0d      	ldr	r3, [pc, #52]	; (1dbcc <config_pins_powerdown+0x104>)
   1db98:	4798      	blx	r3
	ioport_set_pin_dir(BLE_autorun, IOPORT_DIR_INPUT);
   1db9a:	2100      	movs	r1, #0
   1db9c:	200e      	movs	r0, #14
   1db9e:	4b0b      	ldr	r3, [pc, #44]	; (1dbcc <config_pins_powerdown+0x104>)
   1dba0:	4798      	blx	r3
	ioport_set_pin_dir(BLE_ota, IOPORT_DIR_INPUT);
   1dba2:	2100      	movs	r1, #0
   1dba4:	2036      	movs	r0, #54	; 0x36
   1dba6:	4b09      	ldr	r3, [pc, #36]	; (1dbcc <config_pins_powerdown+0x104>)
   1dba8:	4798      	blx	r3
	ioport_set_pin_dir(BLE_SS, IOPORT_DIR_INPUT);
   1dbaa:	2100      	movs	r1, #0
   1dbac:	2016      	movs	r0, #22
   1dbae:	4b07      	ldr	r3, [pc, #28]	; (1dbcc <config_pins_powerdown+0x104>)
   1dbb0:	4798      	blx	r3
	ioport_set_pin_level(BLE_reset, false);
   1dbb2:	2100      	movs	r1, #0
   1dbb4:	2003      	movs	r0, #3
   1dbb6:	4b06      	ldr	r3, [pc, #24]	; (1dbd0 <config_pins_powerdown+0x108>)
   1dbb8:	4798      	blx	r3
	ioport_set_pin_level(BLE_SS, true);
   1dbba:	2101      	movs	r1, #1
   1dbbc:	2016      	movs	r0, #22
   1dbbe:	4b04      	ldr	r3, [pc, #16]	; (1dbd0 <config_pins_powerdown+0x108>)
   1dbc0:	4798      	blx	r3
}
   1dbc2:	46c0      	nop			; (mov r8, r8)
   1dbc4:	46bd      	mov	sp, r7
   1dbc6:	bd80      	pop	{r7, pc}
   1dbc8:	000192dd 	.word	0x000192dd
   1dbcc:	000192fd 	.word	0x000192fd
   1dbd0:	00019325 	.word	0x00019325

0001dbd4 <configure_extint_channel>:




void configure_extint_channel(void)
{
   1dbd4:	b580      	push	{r7, lr}
   1dbd6:	b084      	sub	sp, #16
   1dbd8:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
   1dbda:	1d3b      	adds	r3, r7, #4
   1dbdc:	0018      	movs	r0, r3
   1dbde:	4b26      	ldr	r3, [pc, #152]	; (1dc78 <configure_extint_channel+0xa4>)
   1dbe0:	4798      	blx	r3
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   1dbe2:	1d3b      	adds	r3, r7, #4
   1dbe4:	2201      	movs	r2, #1
   1dbe6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1dbe8:	1d3b      	adds	r3, r7, #4
   1dbea:	2202      	movs	r2, #2
   1dbec:	72da      	strb	r2, [r3, #11]
	config_extint_chan.filter_input_signal  = true;
   1dbee:	1d3b      	adds	r3, r7, #4
   1dbf0:	2201      	movs	r2, #1
   1dbf2:	729a      	strb	r2, [r3, #10]
	config_extint_chan.enable_async_edge_detection = true;
   1dbf4:	1d3b      	adds	r3, r7, #4
   1dbf6:	2201      	movs	r2, #1
   1dbf8:	725a      	strb	r2, [r3, #9]
	// button 4
	config_extint_chan.gpio_pin           = PIN_PA07A_EIC_EXTINT7;
   1dbfa:	1d3b      	adds	r3, r7, #4
   1dbfc:	2207      	movs	r2, #7
   1dbfe:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA07A_EIC_EXTINT7;
   1dc00:	1d3b      	adds	r3, r7, #4
   1dc02:	2200      	movs	r2, #0
   1dc04:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(7, &config_extint_chan);
   1dc06:	1d3b      	adds	r3, r7, #4
   1dc08:	0019      	movs	r1, r3
   1dc0a:	2007      	movs	r0, #7
   1dc0c:	4b1b      	ldr	r3, [pc, #108]	; (1dc7c <configure_extint_channel+0xa8>)
   1dc0e:	4798      	blx	r3
	// button 3
	config_extint_chan.gpio_pin           = PIN_PA06A_EIC_EXTINT6;
   1dc10:	1d3b      	adds	r3, r7, #4
   1dc12:	2206      	movs	r2, #6
   1dc14:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA06A_EIC_EXTINT6;
   1dc16:	1d3b      	adds	r3, r7, #4
   1dc18:	2200      	movs	r2, #0
   1dc1a:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(6, &config_extint_chan);
   1dc1c:	1d3b      	adds	r3, r7, #4
   1dc1e:	0019      	movs	r1, r3
   1dc20:	2006      	movs	r0, #6
   1dc22:	4b16      	ldr	r3, [pc, #88]	; (1dc7c <configure_extint_channel+0xa8>)
   1dc24:	4798      	blx	r3
	// button 2
	config_extint_chan.gpio_pin           = PIN_PA04A_EIC_EXTINT4;
   1dc26:	1d3b      	adds	r3, r7, #4
   1dc28:	2204      	movs	r2, #4
   1dc2a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA04A_EIC_EXTINT4;
   1dc2c:	1d3b      	adds	r3, r7, #4
   1dc2e:	2200      	movs	r2, #0
   1dc30:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(4, &config_extint_chan);
   1dc32:	1d3b      	adds	r3, r7, #4
   1dc34:	0019      	movs	r1, r3
   1dc36:	2004      	movs	r0, #4
   1dc38:	4b10      	ldr	r3, [pc, #64]	; (1dc7c <configure_extint_channel+0xa8>)
   1dc3a:	4798      	blx	r3
	// button 1
	config_extint_chan.gpio_pin           = PIN_PB09A_EIC_EXTINT9;
   1dc3c:	1d3b      	adds	r3, r7, #4
   1dc3e:	2229      	movs	r2, #41	; 0x29
   1dc40:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PB09A_EIC_EXTINT9;
   1dc42:	1d3b      	adds	r3, r7, #4
   1dc44:	2200      	movs	r2, #0
   1dc46:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(9, &config_extint_chan);
   1dc48:	1d3b      	adds	r3, r7, #4
   1dc4a:	0019      	movs	r1, r3
   1dc4c:	2009      	movs	r0, #9
   1dc4e:	4b0b      	ldr	r3, [pc, #44]	; (1dc7c <configure_extint_channel+0xa8>)
   1dc50:	4798      	blx	r3
	
	// button Ext
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1dc52:	1d3b      	adds	r3, r7, #4
   1dc54:	2203      	movs	r2, #3
   1dc56:	72da      	strb	r2, [r3, #11]
	config_extint_chan.gpio_pin           = PIN_PA05A_EIC_EXTINT5;
   1dc58:	1d3b      	adds	r3, r7, #4
   1dc5a:	2205      	movs	r2, #5
   1dc5c:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA05A_EIC_EXTINT5;
   1dc5e:	1d3b      	adds	r3, r7, #4
   1dc60:	2200      	movs	r2, #0
   1dc62:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(5, &config_extint_chan);
   1dc64:	1d3b      	adds	r3, r7, #4
   1dc66:	0019      	movs	r1, r3
   1dc68:	2005      	movs	r0, #5
   1dc6a:	4b04      	ldr	r3, [pc, #16]	; (1dc7c <configure_extint_channel+0xa8>)
   1dc6c:	4798      	blx	r3
	
}
   1dc6e:	46c0      	nop			; (mov r8, r8)
   1dc70:	46bd      	mov	sp, r7
   1dc72:	b004      	add	sp, #16
   1dc74:	bd80      	pop	{r7, pc}
   1dc76:	46c0      	nop			; (mov r8, r8)
   1dc78:	00006d39 	.word	0x00006d39
   1dc7c:	00006d6d 	.word	0x00006d6d

0001dc80 <configure_extint_callbacks>:

void configure_extint_callbacks(void)
{
   1dc80:	b580      	push	{r7, lr}
   1dc82:	af00      	add	r7, sp, #0
	// Button 4
	extint_register_callback(extint_routine, 7,	EXTINT_CALLBACK_TYPE_DETECT);
   1dc84:	4b1a      	ldr	r3, [pc, #104]	; (1dcf0 <configure_extint_callbacks+0x70>)
   1dc86:	2200      	movs	r2, #0
   1dc88:	2107      	movs	r1, #7
   1dc8a:	0018      	movs	r0, r3
   1dc8c:	4b19      	ldr	r3, [pc, #100]	; (1dcf4 <configure_extint_callbacks+0x74>)
   1dc8e:	4798      	blx	r3
	extint_chan_enable_callback(7,EXTINT_CALLBACK_TYPE_DETECT);
   1dc90:	2100      	movs	r1, #0
   1dc92:	2007      	movs	r0, #7
   1dc94:	4b18      	ldr	r3, [pc, #96]	; (1dcf8 <configure_extint_callbacks+0x78>)
   1dc96:	4798      	blx	r3
	// Button 3
	extint_register_callback(extint_routine, 6,	EXTINT_CALLBACK_TYPE_DETECT);
   1dc98:	4b15      	ldr	r3, [pc, #84]	; (1dcf0 <configure_extint_callbacks+0x70>)
   1dc9a:	2200      	movs	r2, #0
   1dc9c:	2106      	movs	r1, #6
   1dc9e:	0018      	movs	r0, r3
   1dca0:	4b14      	ldr	r3, [pc, #80]	; (1dcf4 <configure_extint_callbacks+0x74>)
   1dca2:	4798      	blx	r3
	extint_chan_enable_callback(6,EXTINT_CALLBACK_TYPE_DETECT);
   1dca4:	2100      	movs	r1, #0
   1dca6:	2006      	movs	r0, #6
   1dca8:	4b13      	ldr	r3, [pc, #76]	; (1dcf8 <configure_extint_callbacks+0x78>)
   1dcaa:	4798      	blx	r3
	// Button 2
	extint_register_callback(extint_routine, 4,	EXTINT_CALLBACK_TYPE_DETECT);
   1dcac:	4b10      	ldr	r3, [pc, #64]	; (1dcf0 <configure_extint_callbacks+0x70>)
   1dcae:	2200      	movs	r2, #0
   1dcb0:	2104      	movs	r1, #4
   1dcb2:	0018      	movs	r0, r3
   1dcb4:	4b0f      	ldr	r3, [pc, #60]	; (1dcf4 <configure_extint_callbacks+0x74>)
   1dcb6:	4798      	blx	r3
	extint_chan_enable_callback(4,EXTINT_CALLBACK_TYPE_DETECT);
   1dcb8:	2100      	movs	r1, #0
   1dcba:	2004      	movs	r0, #4
   1dcbc:	4b0e      	ldr	r3, [pc, #56]	; (1dcf8 <configure_extint_callbacks+0x78>)
   1dcbe:	4798      	blx	r3
	// Button 1
	extint_register_callback(extint_routine, 9,	EXTINT_CALLBACK_TYPE_DETECT);
   1dcc0:	4b0b      	ldr	r3, [pc, #44]	; (1dcf0 <configure_extint_callbacks+0x70>)
   1dcc2:	2200      	movs	r2, #0
   1dcc4:	2109      	movs	r1, #9
   1dcc6:	0018      	movs	r0, r3
   1dcc8:	4b0a      	ldr	r3, [pc, #40]	; (1dcf4 <configure_extint_callbacks+0x74>)
   1dcca:	4798      	blx	r3
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
   1dccc:	2100      	movs	r1, #0
   1dcce:	2009      	movs	r0, #9
   1dcd0:	4b09      	ldr	r3, [pc, #36]	; (1dcf8 <configure_extint_callbacks+0x78>)
   1dcd2:	4798      	blx	r3
	
	// Button External
	extint_register_callback(extint_routine, 5,	EXTINT_CALLBACK_TYPE_DETECT);
   1dcd4:	4b06      	ldr	r3, [pc, #24]	; (1dcf0 <configure_extint_callbacks+0x70>)
   1dcd6:	2200      	movs	r2, #0
   1dcd8:	2105      	movs	r1, #5
   1dcda:	0018      	movs	r0, r3
   1dcdc:	4b05      	ldr	r3, [pc, #20]	; (1dcf4 <configure_extint_callbacks+0x74>)
   1dcde:	4798      	blx	r3
	extint_chan_enable_callback(5,EXTINT_CALLBACK_TYPE_DETECT);
   1dce0:	2100      	movs	r1, #0
   1dce2:	2005      	movs	r0, #5
   1dce4:	4b04      	ldr	r3, [pc, #16]	; (1dcf8 <configure_extint_callbacks+0x78>)
   1dce6:	4798      	blx	r3
}
   1dce8:	46c0      	nop			; (mov r8, r8)
   1dcea:	46bd      	mov	sp, r7
   1dcec:	bd80      	pop	{r7, pc}
   1dcee:	46c0      	nop			; (mov r8, r8)
   1dcf0:	0001dcfd 	.word	0x0001dcfd
   1dcf4:	000068f1 	.word	0x000068f1
   1dcf8:	00006955 	.word	0x00006955

0001dcfc <extint_routine>:

void extint_routine(void)
{
   1dcfc:	b580      	push	{r7, lr}
   1dcfe:	af00      	add	r7, sp, #0
	switch (extint_get_current_channel()){
   1dd00:	4b17      	ldr	r3, [pc, #92]	; (1dd60 <extint_routine+0x64>)
   1dd02:	4798      	blx	r3
   1dd04:	0003      	movs	r3, r0
   1dd06:	3b04      	subs	r3, #4
   1dd08:	2b05      	cmp	r3, #5
   1dd0a:	d826      	bhi.n	1dd5a <extint_routine+0x5e>
   1dd0c:	009a      	lsls	r2, r3, #2
   1dd0e:	4b15      	ldr	r3, [pc, #84]	; (1dd64 <extint_routine+0x68>)
   1dd10:	18d3      	adds	r3, r2, r3
   1dd12:	681b      	ldr	r3, [r3, #0]
   1dd14:	469f      	mov	pc, r3
		case 5:
			externalButtonRoutine(!ioport_get_pin_level(buttonE));
   1dd16:	2005      	movs	r0, #5
   1dd18:	4b13      	ldr	r3, [pc, #76]	; (1dd68 <extint_routine+0x6c>)
   1dd1a:	4798      	blx	r3
   1dd1c:	0003      	movs	r3, r0
   1dd1e:	1e5a      	subs	r2, r3, #1
   1dd20:	4193      	sbcs	r3, r2
   1dd22:	b2db      	uxtb	r3, r3
   1dd24:	2201      	movs	r2, #1
   1dd26:	4053      	eors	r3, r2
   1dd28:	b2db      	uxtb	r3, r3
   1dd2a:	1c1a      	adds	r2, r3, #0
   1dd2c:	2301      	movs	r3, #1
   1dd2e:	4013      	ands	r3, r2
   1dd30:	b2db      	uxtb	r3, r3
   1dd32:	0018      	movs	r0, r3
   1dd34:	4b0d      	ldr	r3, [pc, #52]	; (1dd6c <extint_routine+0x70>)
   1dd36:	4798      	blx	r3
			break;
   1dd38:	e00f      	b.n	1dd5a <extint_routine+0x5e>
		case 7:
			current_input = input_button4;
   1dd3a:	4b0d      	ldr	r3, [pc, #52]	; (1dd70 <extint_routine+0x74>)
   1dd3c:	2204      	movs	r2, #4
   1dd3e:	701a      	strb	r2, [r3, #0]
			break;
   1dd40:	e00b      	b.n	1dd5a <extint_routine+0x5e>
		case 6:
			current_input = input_button3;
   1dd42:	4b0b      	ldr	r3, [pc, #44]	; (1dd70 <extint_routine+0x74>)
   1dd44:	2203      	movs	r2, #3
   1dd46:	701a      	strb	r2, [r3, #0]
			break;
   1dd48:	e007      	b.n	1dd5a <extint_routine+0x5e>
		case 4:
			current_input = input_button2;
   1dd4a:	4b09      	ldr	r3, [pc, #36]	; (1dd70 <extint_routine+0x74>)
   1dd4c:	2202      	movs	r2, #2
   1dd4e:	701a      	strb	r2, [r3, #0]
			break;			
   1dd50:	e003      	b.n	1dd5a <extint_routine+0x5e>
		case 9:
			current_input = input_button1;
   1dd52:	4b07      	ldr	r3, [pc, #28]	; (1dd70 <extint_routine+0x74>)
   1dd54:	2201      	movs	r2, #1
   1dd56:	701a      	strb	r2, [r3, #0]
			break;
   1dd58:	46c0      	nop			; (mov r8, r8)
		
	}
		
}
   1dd5a:	46c0      	nop			; (mov r8, r8)
   1dd5c:	46bd      	mov	sp, r7
   1dd5e:	bd80      	pop	{r7, pc}
   1dd60:	0000699d 	.word	0x0000699d
   1dd64:	000298f0 	.word	0x000298f0
   1dd68:	0001934d 	.word	0x0001934d
   1dd6c:	0001dd75 	.word	0x0001dd75
   1dd70:	20004134 	.word	0x20004134

0001dd74 <externalButtonRoutine>:

void externalButtonRoutine(bool buttonOn){
   1dd74:	b580      	push	{r7, lr}
   1dd76:	b082      	sub	sp, #8
   1dd78:	af00      	add	r7, sp, #0
   1dd7a:	0002      	movs	r2, r0
   1dd7c:	1dfb      	adds	r3, r7, #7
   1dd7e:	701a      	strb	r2, [r3, #0]
	// If held down for less than X seconds, provides normal input upon release
	// If held down for more than X seconds, a separate interrupt routine provides powerdown input
	// When in powerdown state, 3 quick clicks through a separate interrupt routine provides powerup input
	
	
	if (current_state == st_powerdown){
   1dd80:	4b23      	ldr	r3, [pc, #140]	; (1de10 <externalButtonRoutine+0x9c>)
   1dd82:	781b      	ldrb	r3, [r3, #0]
   1dd84:	b2db      	uxtb	r3, r3
   1dd86:	2b04      	cmp	r3, #4
   1dd88:	d116      	bne.n	1ddb8 <externalButtonRoutine+0x44>
		//  wakup on 3 quick clicks
		if (buttonOn){//if external button is pressed
   1dd8a:	1dfb      	adds	r3, r7, #7
   1dd8c:	781b      	ldrb	r3, [r3, #0]
   1dd8e:	2b00      	cmp	r3, #0
   1dd90:	d009      	beq.n	1dda6 <externalButtonRoutine+0x32>
			quick3_timer(true);
   1dd92:	2001      	movs	r0, #1
   1dd94:	4b1f      	ldr	r3, [pc, #124]	; (1de14 <externalButtonRoutine+0xa0>)
   1dd96:	4798      	blx	r3
			click_counter = click_counter+1;//  click_counter reset by timer interrupt routine if timer expires.
   1dd98:	4b1f      	ldr	r3, [pc, #124]	; (1de18 <externalButtonRoutine+0xa4>)
   1dd9a:	781b      	ldrb	r3, [r3, #0]
   1dd9c:	b2db      	uxtb	r3, r3
   1dd9e:	3301      	adds	r3, #1
   1dda0:	b2da      	uxtb	r2, r3
   1dda2:	4b1d      	ldr	r3, [pc, #116]	; (1de18 <externalButtonRoutine+0xa4>)
   1dda4:	701a      	strb	r2, [r3, #0]
		}
		if (click_counter>=3){
   1dda6:	4b1c      	ldr	r3, [pc, #112]	; (1de18 <externalButtonRoutine+0xa4>)
   1dda8:	781b      	ldrb	r3, [r3, #0]
   1ddaa:	b2db      	uxtb	r3, r3
   1ddac:	2b02      	cmp	r3, #2
   1ddae:	d928      	bls.n	1de02 <externalButtonRoutine+0x8e>
			current_input = input_wakeup;
   1ddb0:	4b1a      	ldr	r3, [pc, #104]	; (1de1c <externalButtonRoutine+0xa8>)
   1ddb2:	2215      	movs	r2, #21
   1ddb4:	701a      	strb	r2, [r3, #0]
		}
		return;	
   1ddb6:	e024      	b.n	1de02 <externalButtonRoutine+0x8e>
	}
	
	
	
	if (buttonOn){
   1ddb8:	1dfb      	adds	r3, r7, #7
   1ddba:	781b      	ldrb	r3, [r3, #0]
   1ddbc:	2b00      	cmp	r3, #0
   1ddbe:	d014      	beq.n	1ddea <externalButtonRoutine+0x76>
		//  Trigger on if button is pressed
		if(!buttonE_triggered){
   1ddc0:	4b17      	ldr	r3, [pc, #92]	; (1de20 <externalButtonRoutine+0xac>)
   1ddc2:	781b      	ldrb	r3, [r3, #0]
   1ddc4:	b2db      	uxtb	r3, r3
   1ddc6:	2201      	movs	r2, #1
   1ddc8:	4053      	eors	r3, r2
   1ddca:	b2db      	uxtb	r3, r3
   1ddcc:	2b00      	cmp	r3, #0
   1ddce:	d01a      	beq.n	1de06 <externalButtonRoutine+0x92>
			buttonE_triggered=true;
   1ddd0:	4b13      	ldr	r3, [pc, #76]	; (1de20 <externalButtonRoutine+0xac>)
   1ddd2:	2201      	movs	r2, #1
   1ddd4:	701a      	strb	r2, [r3, #0]
			//trigger timer
			tc_set_count_value(&timer1, 0);
   1ddd6:	4b13      	ldr	r3, [pc, #76]	; (1de24 <externalButtonRoutine+0xb0>)
   1ddd8:	2100      	movs	r1, #0
   1ddda:	0018      	movs	r0, r3
   1dddc:	4b12      	ldr	r3, [pc, #72]	; (1de28 <externalButtonRoutine+0xb4>)
   1ddde:	4798      	blx	r3
			tc_start_counter(&timer1);
   1dde0:	4b10      	ldr	r3, [pc, #64]	; (1de24 <externalButtonRoutine+0xb0>)
   1dde2:	0018      	movs	r0, r3
   1dde4:	4b11      	ldr	r3, [pc, #68]	; (1de2c <externalButtonRoutine+0xb8>)
   1dde6:	4798      	blx	r3
		}
		return;
   1dde8:	e00d      	b.n	1de06 <externalButtonRoutine+0x92>
		
	}else{
		//  Releaed in a short amount of time, normal input
		buttonE_triggered=false;
   1ddea:	4b0d      	ldr	r3, [pc, #52]	; (1de20 <externalButtonRoutine+0xac>)
   1ddec:	2200      	movs	r2, #0
   1ddee:	701a      	strb	r2, [r3, #0]
		tc_stop_counter(&timer1);
   1ddf0:	4b0c      	ldr	r3, [pc, #48]	; (1de24 <externalButtonRoutine+0xb0>)
   1ddf2:	0018      	movs	r0, r3
   1ddf4:	4b0e      	ldr	r3, [pc, #56]	; (1de30 <externalButtonRoutine+0xbc>)
   1ddf6:	4798      	blx	r3
		current_input = input_buttonE;
   1ddf8:	4b08      	ldr	r3, [pc, #32]	; (1de1c <externalButtonRoutine+0xa8>)
   1ddfa:	2205      	movs	r2, #5
   1ddfc:	701a      	strb	r2, [r3, #0]
		return;	
   1ddfe:	46c0      	nop			; (mov r8, r8)
   1de00:	e002      	b.n	1de08 <externalButtonRoutine+0x94>
		return;	
   1de02:	46c0      	nop			; (mov r8, r8)
   1de04:	e000      	b.n	1de08 <externalButtonRoutine+0x94>
		return;
   1de06:	46c0      	nop			; (mov r8, r8)
		
	}
	
		
}
   1de08:	46bd      	mov	sp, r7
   1de0a:	b002      	add	sp, #8
   1de0c:	bd80      	pop	{r7, pc}
   1de0e:	46c0      	nop			; (mov r8, r8)
   1de10:	20002db8 	.word	0x20002db8
   1de14:	00004791 	.word	0x00004791
   1de18:	20003530 	.word	0x20003530
   1de1c:	20004134 	.word	0x20004134
   1de20:	20000e34 	.word	0x20000e34
   1de24:	200012d4 	.word	0x200012d4
   1de28:	00009355 	.word	0x00009355
   1de2c:	00019679 	.word	0x00019679
   1de30:	00019649 	.word	0x00019649

0001de34 <fn_powerdown>:



void fn_powerdown(void){
   1de34:	b590      	push	{r4, r7, lr}
   1de36:	b083      	sub	sp, #12
   1de38:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;
	if (state_change){
   1de3a:	4b13      	ldr	r3, [pc, #76]	; (1de88 <fn_powerdown+0x54>)
   1de3c:	781b      	ldrb	r3, [r3, #0]
   1de3e:	b2db      	uxtb	r3, r3
   1de40:	2b00      	cmp	r3, #0
   1de42:	d012      	beq.n	1de6a <fn_powerdown+0x36>
		// Disable watchdog timer
		wdt_disable();
   1de44:	4b11      	ldr	r3, [pc, #68]	; (1de8c <fn_powerdown+0x58>)
   1de46:	4798      	blx	r3
		//  Switch-Over to low power internal clock
		clock_32k_source(clock_int);
   1de48:	2001      	movs	r0, #1
   1de4a:	4b11      	ldr	r3, [pc, #68]	; (1de90 <fn_powerdown+0x5c>)
   1de4c:	4798      	blx	r3
		ext_osc_onoff(false);
   1de4e:	2000      	movs	r0, #0
   1de50:	4b10      	ldr	r3, [pc, #64]	; (1de94 <fn_powerdown+0x60>)
   1de52:	4798      	blx	r3
		//  Put hardware in low-power state
		disable_comms();
   1de54:	4b10      	ldr	r3, [pc, #64]	; (1de98 <fn_powerdown+0x64>)
   1de56:	4798      	blx	r3
		config_pins_powerdown();		
   1de58:	4b10      	ldr	r3, [pc, #64]	; (1de9c <fn_powerdown+0x68>)
   1de5a:	4798      	blx	r3
		ioport_set_pin_level(V2_enable, false);//disable V2 power supply		
   1de5c:	2100      	movs	r1, #0
   1de5e:	2022      	movs	r0, #34	; 0x22
   1de60:	4b0f      	ldr	r3, [pc, #60]	; (1dea0 <fn_powerdown+0x6c>)
   1de62:	4798      	blx	r3
		configure_timers(st_powerdown);//Disable TC	
   1de64:	2004      	movs	r0, #4
   1de66:	4b0f      	ldr	r3, [pc, #60]	; (1dea4 <fn_powerdown+0x70>)
   1de68:	4798      	blx	r3
		
	};	
		
	sleepmgr_lock_mode(SLEEPMGR_STANDBY);
   1de6a:	2002      	movs	r0, #2
   1de6c:	4b0e      	ldr	r3, [pc, #56]	; (1dea8 <fn_powerdown+0x74>)
   1de6e:	4798      	blx	r3
	sleep_mode = sleepmgr_get_sleep_mode();
   1de70:	1dfc      	adds	r4, r7, #7
   1de72:	4b0e      	ldr	r3, [pc, #56]	; (1deac <fn_powerdown+0x78>)
   1de74:	4798      	blx	r3
   1de76:	0003      	movs	r3, r0
   1de78:	7023      	strb	r3, [r4, #0]
	sleepmgr_sleep(SLEEPMGR_STANDBY);
   1de7a:	2002      	movs	r0, #2
   1de7c:	4b0c      	ldr	r3, [pc, #48]	; (1deb0 <fn_powerdown+0x7c>)
   1de7e:	4798      	blx	r3
	
}
   1de80:	46c0      	nop			; (mov r8, r8)
   1de82:	46bd      	mov	sp, r7
   1de84:	b003      	add	sp, #12
   1de86:	bd90      	pop	{r4, r7, pc}
   1de88:	200000e8 	.word	0x200000e8
   1de8c:	00004251 	.word	0x00004251
   1de90:	0001e059 	.word	0x0001e059
   1de94:	00011185 	.word	0x00011185
   1de98:	000101a9 	.word	0x000101a9
   1de9c:	0001dac9 	.word	0x0001dac9
   1dea0:	00019325 	.word	0x00019325
   1dea4:	000042c1 	.word	0x000042c1
   1dea8:	0001959d 	.word	0x0001959d
   1deac:	000195ed 	.word	0x000195ed
   1deb0:	000194ad 	.word	0x000194ad

0001deb4 <fn_powerup>:

void fn_powerup(void){
   1deb4:	b580      	push	{r7, lr}
   1deb6:	af00      	add	r7, sp, #0
	config_pins_powerup();
   1deb8:	4b29      	ldr	r3, [pc, #164]	; (1df60 <fn_powerup+0xac>)
   1deba:	4798      	blx	r3
	delay_ms(100);
   1debc:	2064      	movs	r0, #100	; 0x64
   1debe:	4b29      	ldr	r3, [pc, #164]	; (1df64 <fn_powerup+0xb0>)
   1dec0:	4798      	blx	r3
	
	setup_spi();
   1dec2:	4b29      	ldr	r3, [pc, #164]	; (1df68 <fn_powerup+0xb4>)
   1dec4:	4798      	blx	r3
	configure_i2c_master();
   1dec6:	4b29      	ldr	r3, [pc, #164]	; (1df6c <fn_powerup+0xb8>)
   1dec8:	4798      	blx	r3
	configure_usart();
   1deca:	4b29      	ldr	r3, [pc, #164]	; (1df70 <fn_powerup+0xbc>)
   1decc:	4798      	blx	r3
	configure_usart_callbacks();
   1dece:	4b29      	ldr	r3, [pc, #164]	; (1df74 <fn_powerup+0xc0>)
   1ded0:	4798      	blx	r3
	
	glcd_init();
   1ded2:	4b29      	ldr	r3, [pc, #164]	; (1df78 <fn_powerup+0xc4>)
   1ded4:	4798      	blx	r3
	backlightOn();
   1ded6:	4b29      	ldr	r3, [pc, #164]	; (1df7c <fn_powerup+0xc8>)
   1ded8:	4798      	blx	r3
	configure_extint_channel();
   1deda:	4b29      	ldr	r3, [pc, #164]	; (1df80 <fn_powerup+0xcc>)
   1dedc:	4798      	blx	r3
	configure_extint_callbacks();
   1dede:	4b29      	ldr	r3, [pc, #164]	; (1df84 <fn_powerup+0xd0>)
   1dee0:	4798      	blx	r3
	setup_accel(&slave_acc1);
   1dee2:	4b29      	ldr	r3, [pc, #164]	; (1df88 <fn_powerup+0xd4>)
   1dee4:	0018      	movs	r0, r3
   1dee6:	4b29      	ldr	r3, [pc, #164]	; (1df8c <fn_powerup+0xd8>)
   1dee8:	4798      	blx	r3
	setup_accel(&slave_acc2);
   1deea:	4b29      	ldr	r3, [pc, #164]	; (1df90 <fn_powerup+0xdc>)
   1deec:	0018      	movs	r0, r3
   1deee:	4b27      	ldr	r3, [pc, #156]	; (1df8c <fn_powerup+0xd8>)
   1def0:	4798      	blx	r3
	setup_mag(&slave_mag1);
   1def2:	4b28      	ldr	r3, [pc, #160]	; (1df94 <fn_powerup+0xe0>)
   1def4:	0018      	movs	r0, r3
   1def6:	4b28      	ldr	r3, [pc, #160]	; (1df98 <fn_powerup+0xe4>)
   1def8:	4798      	blx	r3
	setup_mag(&slave_mag2);
   1defa:	4b28      	ldr	r3, [pc, #160]	; (1df9c <fn_powerup+0xe8>)
   1defc:	0018      	movs	r0, r3
   1defe:	4b26      	ldr	r3, [pc, #152]	; (1df98 <fn_powerup+0xe4>)
   1df00:	4798      	blx	r3
	
	
	
	system_interrupt_enable_global();
   1df02:	4b27      	ldr	r3, [pc, #156]	; (1dfa0 <fn_powerup+0xec>)
   1df04:	4798      	blx	r3

	config_spi(LCD);
   1df06:	2000      	movs	r0, #0
   1df08:	4b26      	ldr	r3, [pc, #152]	; (1dfa4 <fn_powerup+0xf0>)
   1df0a:	4798      	blx	r3
	
	delay_ms(50);	
   1df0c:	2032      	movs	r0, #50	; 0x32
   1df0e:	4b15      	ldr	r3, [pc, #84]	; (1df64 <fn_powerup+0xb0>)
   1df10:	4798      	blx	r3
	ext_osc_onoff(true);
   1df12:	2001      	movs	r0, #1
   1df14:	4b24      	ldr	r3, [pc, #144]	; (1dfa8 <fn_powerup+0xf4>)
   1df16:	4798      	blx	r3
	delay_ms(50);	
   1df18:	2032      	movs	r0, #50	; 0x32
   1df1a:	4b12      	ldr	r3, [pc, #72]	; (1df64 <fn_powerup+0xb0>)
   1df1c:	4798      	blx	r3
	setup_XOSC32k();
   1df1e:	4b23      	ldr	r3, [pc, #140]	; (1dfac <fn_powerup+0xf8>)
   1df20:	4798      	blx	r3
	clock_32k_source(clock_ext);
   1df22:	2000      	movs	r0, #0
   1df24:	4b22      	ldr	r3, [pc, #136]	; (1dfb0 <fn_powerup+0xfc>)
   1df26:	4798      	blx	r3
	
	configure_timers(st_powerup);
   1df28:	2005      	movs	r0, #5
   1df2a:	4b22      	ldr	r3, [pc, #136]	; (1dfb4 <fn_powerup+0x100>)
   1df2c:	4798      	blx	r3
	
	configure_SD();
   1df2e:	4b22      	ldr	r3, [pc, #136]	; (1dfb8 <fn_powerup+0x104>)
   1df30:	4798      	blx	r3
	
	ioport_reset_pin_mode(BLE_ota);//  Needed to reset pin mode; set in some previous initialization
   1df32:	2036      	movs	r0, #54	; 0x36
   1df34:	4b21      	ldr	r3, [pc, #132]	; (1dfbc <fn_powerup+0x108>)
   1df36:	4798      	blx	r3
	ioport_set_pin_dir(BLE_ota, IOPORT_DIR_OUTPUT);//  Needed to reset pin mode; set in some previous initialization
   1df38:	2101      	movs	r1, #1
   1df3a:	2036      	movs	r0, #54	; 0x36
   1df3c:	4b20      	ldr	r3, [pc, #128]	; (1dfc0 <fn_powerup+0x10c>)
   1df3e:	4798      	blx	r3
	ioport_set_pin_level(BLE_ota, false);//  Needed to reset pin mode; set in some previous initialization
   1df40:	2100      	movs	r1, #0
   1df42:	2036      	movs	r0, #54	; 0x36
   1df44:	4b1f      	ldr	r3, [pc, #124]	; (1dfc4 <fn_powerup+0x110>)
   1df46:	4798      	blx	r3
	
	wdt_enable();
   1df48:	4b1f      	ldr	r3, [pc, #124]	; (1dfc8 <fn_powerup+0x114>)
   1df4a:	4798      	blx	r3
	
	buttonE_triggered=false;
   1df4c:	4b1f      	ldr	r3, [pc, #124]	; (1dfcc <fn_powerup+0x118>)
   1df4e:	2200      	movs	r2, #0
   1df50:	701a      	strb	r2, [r3, #0]
	current_input = input_state_complete;
   1df52:	4b1f      	ldr	r3, [pc, #124]	; (1dfd0 <fn_powerup+0x11c>)
   1df54:	2208      	movs	r2, #8
   1df56:	701a      	strb	r2, [r3, #0]
	
}
   1df58:	46c0      	nop			; (mov r8, r8)
   1df5a:	46bd      	mov	sp, r7
   1df5c:	bd80      	pop	{r7, pc}
   1df5e:	46c0      	nop			; (mov r8, r8)
   1df60:	0001d959 	.word	0x0001d959
   1df64:	000181b5 	.word	0x000181b5
   1df68:	000101f9 	.word	0x000101f9
   1df6c:	0001060d 	.word	0x0001060d
   1df70:	000103bd 	.word	0x000103bd
   1df74:	000104c9 	.word	0x000104c9
   1df78:	00014e15 	.word	0x00014e15
   1df7c:	000016b9 	.word	0x000016b9
   1df80:	0001dbd5 	.word	0x0001dbd5
   1df84:	0001dc81 	.word	0x0001dc81
   1df88:	200012f0 	.word	0x200012f0
   1df8c:	00003855 	.word	0x00003855
   1df90:	20001208 	.word	0x20001208
   1df94:	200012f4 	.word	0x200012f4
   1df98:	00003b31 	.word	0x00003b31
   1df9c:	200011d0 	.word	0x200011d0
   1dfa0:	0001936d 	.word	0x0001936d
   1dfa4:	00010311 	.word	0x00010311
   1dfa8:	00011185 	.word	0x00011185
   1dfac:	0001dfd5 	.word	0x0001dfd5
   1dfb0:	0001e059 	.word	0x0001e059
   1dfb4:	000042c1 	.word	0x000042c1
   1dfb8:	0001bcc9 	.word	0x0001bcc9
   1dfbc:	000192dd 	.word	0x000192dd
   1dfc0:	000192fd 	.word	0x000192fd
   1dfc4:	00019325 	.word	0x00019325
   1dfc8:	00004225 	.word	0x00004225
   1dfcc:	20000e34 	.word	0x20000e34
   1dfd0:	20004134 	.word	0x20004134

0001dfd4 <setup_XOSC32k>:


void setup_XOSC32k(void){
   1dfd4:	b580      	push	{r7, lr}
   1dfd6:	b084      	sub	sp, #16
   1dfd8:	af00      	add	r7, sp, #0
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   1dfda:	1d3b      	adds	r3, r7, #4
   1dfdc:	0018      	movs	r0, r3
   1dfde:	4b19      	ldr	r3, [pc, #100]	; (1e044 <setup_XOSC32k+0x70>)
   1dfe0:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   1dfe2:	1d3b      	adds	r3, r7, #4
   1dfe4:	2280      	movs	r2, #128	; 0x80
   1dfe6:	0212      	lsls	r2, r2, #8
   1dfe8:	605a      	str	r2, [r3, #4]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   1dfea:	1d3b      	adds	r3, r7, #4
   1dfec:	2201      	movs	r2, #1
   1dfee:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   1dff0:	1d3b      	adds	r3, r7, #4
   1dff2:	2204      	movs	r2, #4
   1dff4:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   1dff6:	1d3b      	adds	r3, r7, #4
   1dff8:	2201      	movs	r2, #1
   1dffa:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   1dffc:	1d3b      	adds	r3, r7, #4
   1dffe:	2201      	movs	r2, #1
   1e000:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.on_demand           = false;
   1e002:	1d3b      	adds	r3, r7, #4
   1e004:	2200      	movs	r2, #0
   1e006:	725a      	strb	r2, [r3, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   1e008:	1d3b      	adds	r3, r7, #4
   1e00a:	2201      	movs	r2, #1
   1e00c:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   1e00e:	1d3b      	adds	r3, r7, #4
   1e010:	0018      	movs	r0, r3
   1e012:	4b0d      	ldr	r3, [pc, #52]	; (1e048 <setup_XOSC32k+0x74>)
   1e014:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   1e016:	2005      	movs	r0, #5
   1e018:	4b0c      	ldr	r3, [pc, #48]	; (1e04c <setup_XOSC32k+0x78>)
   1e01a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   1e01c:	46c0      	nop			; (mov r8, r8)
   1e01e:	2005      	movs	r0, #5
   1e020:	4b0b      	ldr	r3, [pc, #44]	; (1e050 <setup_XOSC32k+0x7c>)
   1e022:	4798      	blx	r3
   1e024:	0003      	movs	r3, r0
   1e026:	001a      	movs	r2, r3
   1e028:	2301      	movs	r3, #1
   1e02a:	4053      	eors	r3, r2
   1e02c:	b2db      	uxtb	r3, r3
   1e02e:	2b00      	cmp	r3, #0
   1e030:	d1f5      	bne.n	1e01e <setup_XOSC32k+0x4a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
   1e032:	4a08      	ldr	r2, [pc, #32]	; (1e054 <setup_XOSC32k+0x80>)
   1e034:	6953      	ldr	r3, [r2, #20]
   1e036:	2180      	movs	r1, #128	; 0x80
   1e038:	430b      	orrs	r3, r1
   1e03a:	6153      	str	r3, [r2, #20]
	}
	
	
	
}
   1e03c:	46c0      	nop			; (mov r8, r8)
   1e03e:	46bd      	mov	sp, r7
   1e040:	b004      	add	sp, #16
   1e042:	bd80      	pop	{r7, pc}
   1e044:	00018fd3 	.word	0x00018fd3
   1e048:	00018515 	.word	0x00018515
   1e04c:	00018611 	.word	0x00018611
   1e050:	000186d1 	.word	0x000186d1
   1e054:	40001000 	.word	0x40001000

0001e058 <clock_32k_source>:


void clock_32k_source(enum clock_type ext_int){
   1e058:	b580      	push	{r7, lr}
   1e05a:	b086      	sub	sp, #24
   1e05c:	af00      	add	r7, sp, #0
   1e05e:	0002      	movs	r2, r0
   1e060:	1dfb      	adds	r3, r7, #7
   1e062:	701a      	strb	r2, [r3, #0]
	struct system_gclk_gen_config gclock_gen_conf;
	
	system_gclk_gen_get_config_defaults(&gclock_gen_conf);
   1e064:	230c      	movs	r3, #12
   1e066:	18fb      	adds	r3, r7, r3
   1e068:	0018      	movs	r0, r3
   1e06a:	4b10      	ldr	r3, [pc, #64]	; (1e0ac <clock_32k_source+0x54>)
   1e06c:	4798      	blx	r3
	gclock_gen_conf.run_in_standby = true;
   1e06e:	230c      	movs	r3, #12
   1e070:	18fb      	adds	r3, r7, r3
   1e072:	2201      	movs	r2, #1
   1e074:	721a      	strb	r2, [r3, #8]
	if(ext_int == clock_ext){
   1e076:	1dfb      	adds	r3, r7, #7
   1e078:	781b      	ldrb	r3, [r3, #0]
   1e07a:	2b00      	cmp	r3, #0
   1e07c:	d104      	bne.n	1e088 <clock_32k_source+0x30>
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_XOSC32K;
   1e07e:	230c      	movs	r3, #12
   1e080:	18fb      	adds	r3, r7, r3
   1e082:	2205      	movs	r2, #5
   1e084:	701a      	strb	r2, [r3, #0]
   1e086:	e003      	b.n	1e090 <clock_32k_source+0x38>
	}else{
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
   1e088:	230c      	movs	r3, #12
   1e08a:	18fb      	adds	r3, r7, r3
   1e08c:	2203      	movs	r2, #3
   1e08e:	701a      	strb	r2, [r3, #0]
	}	
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclock_gen_conf);
   1e090:	230c      	movs	r3, #12
   1e092:	18fb      	adds	r3, r7, r3
   1e094:	0019      	movs	r1, r3
   1e096:	2002      	movs	r0, #2
   1e098:	4b05      	ldr	r3, [pc, #20]	; (1e0b0 <clock_32k_source+0x58>)
   1e09a:	4798      	blx	r3
    system_gclk_gen_enable(GCLK_GENERATOR_2);
   1e09c:	2002      	movs	r0, #2
   1e09e:	4b05      	ldr	r3, [pc, #20]	; (1e0b4 <clock_32k_source+0x5c>)
   1e0a0:	4798      	blx	r3
		
}
   1e0a2:	46c0      	nop			; (mov r8, r8)
   1e0a4:	46bd      	mov	sp, r7
   1e0a6:	b006      	add	sp, #24
   1e0a8:	bd80      	pop	{r7, pc}
   1e0aa:	46c0      	nop			; (mov r8, r8)
   1e0ac:	00018fa5 	.word	0x00018fa5
   1e0b0:	000189c5 	.word	0x000189c5
   1e0b4:	00018ad5 	.word	0x00018ad5

0001e0b8 <clock_16M_source>:


void clock_16M_source(enum clock_type high_low){
   1e0b8:	b580      	push	{r7, lr}
   1e0ba:	b086      	sub	sp, #24
   1e0bc:	af00      	add	r7, sp, #0
   1e0be:	0002      	movs	r2, r0
   1e0c0:	1dfb      	adds	r3, r7, #7
   1e0c2:	701a      	strb	r2, [r3, #0]
	struct system_gclk_gen_config gclock_gen_conf;
	
	system_gclk_gen_get_config_defaults(&gclock_gen_conf);
   1e0c4:	230c      	movs	r3, #12
   1e0c6:	18fb      	adds	r3, r7, r3
   1e0c8:	0018      	movs	r0, r3
   1e0ca:	4b10      	ldr	r3, [pc, #64]	; (1e10c <clock_16M_source+0x54>)
   1e0cc:	4798      	blx	r3
	gclock_gen_conf.run_in_standby = true;
   1e0ce:	230c      	movs	r3, #12
   1e0d0:	18fb      	adds	r3, r7, r3
   1e0d2:	2201      	movs	r2, #1
   1e0d4:	721a      	strb	r2, [r3, #8]
	if(high_low == clock_high){
   1e0d6:	1dfb      	adds	r3, r7, #7
   1e0d8:	781b      	ldrb	r3, [r3, #0]
   1e0da:	2b03      	cmp	r3, #3
   1e0dc:	d104      	bne.n	1e0e8 <clock_16M_source+0x30>
		gclock_gen_conf.source_clock =SYSTEM_CLOCK_SOURCE_OSC16M;
   1e0de:	230c      	movs	r3, #12
   1e0e0:	18fb      	adds	r3, r7, r3
   1e0e2:	2206      	movs	r2, #6
   1e0e4:	701a      	strb	r2, [r3, #0]
   1e0e6:	e003      	b.n	1e0f0 <clock_16M_source+0x38>
	}else{
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
   1e0e8:	230c      	movs	r3, #12
   1e0ea:	18fb      	adds	r3, r7, r3
   1e0ec:	2203      	movs	r2, #3
   1e0ee:	701a      	strb	r2, [r3, #0]
	}
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclock_gen_conf);
   1e0f0:	230c      	movs	r3, #12
   1e0f2:	18fb      	adds	r3, r7, r3
   1e0f4:	0019      	movs	r1, r3
   1e0f6:	2000      	movs	r0, #0
   1e0f8:	4b05      	ldr	r3, [pc, #20]	; (1e110 <clock_16M_source+0x58>)
   1e0fa:	4798      	blx	r3
    system_gclk_gen_enable(GCLK_GENERATOR_0);
   1e0fc:	2000      	movs	r0, #0
   1e0fe:	4b05      	ldr	r3, [pc, #20]	; (1e114 <clock_16M_source+0x5c>)
   1e100:	4798      	blx	r3
	
}
   1e102:	46c0      	nop			; (mov r8, r8)
   1e104:	46bd      	mov	sp, r7
   1e106:	b006      	add	sp, #24
   1e108:	bd80      	pop	{r7, pc}
   1e10a:	46c0      	nop			; (mov r8, r8)
   1e10c:	00018fa5 	.word	0x00018fa5
   1e110:	000189c5 	.word	0x000189c5
   1e114:	00018ad5 	.word	0x00018ad5

0001e118 <getDefaultOptions>:

void getDefaultOptions(struct OPTIONS *optionptr){
   1e118:	b580      	push	{r7, lr}
   1e11a:	b082      	sub	sp, #8
   1e11c:	af00      	add	r7, sp, #0
   1e11e:	6078      	str	r0, [r7, #4]
	
	optionptr->shot_delay = 0;//seconds
   1e120:	687b      	ldr	r3, [r7, #4]
   1e122:	2200      	movs	r2, #0
   1e124:	709a      	strb	r2, [r3, #2]
	optionptr->current_unit_temp = celsius;
   1e126:	687b      	ldr	r3, [r7, #4]
   1e128:	2204      	movs	r2, #4
   1e12a:	705a      	strb	r2, [r3, #1]
	optionptr->current_unit_dist = meters;
   1e12c:	687b      	ldr	r3, [r7, #4]
   1e12e:	2201      	movs	r2, #1
   1e130:	701a      	strb	r2, [r3, #0]
	optionptr->chargeCurrent = 100;//mA
   1e132:	687b      	ldr	r3, [r7, #4]
   1e134:	2264      	movs	r2, #100	; 0x64
   1e136:	605a      	str	r2, [r3, #4]
	optionptr->errorSensitivity = 1;
   1e138:	687b      	ldr	r3, [r7, #4]
   1e13a:	22fe      	movs	r2, #254	; 0xfe
   1e13c:	0592      	lsls	r2, r2, #22
   1e13e:	609a      	str	r2, [r3, #8]
	//optionptr->backlight_setting.blue = 30;
	//optionptr->backlight_setting.green = 30;
	//optionptr->backlight_setting.red = 22;
	optionptr->backlight_setting.colorRef = 1;//white
   1e140:	687b      	ldr	r3, [r7, #4]
   1e142:	2201      	movs	r2, #1
   1e144:	749a      	strb	r2, [r3, #18]
	optionptr->backlight_setting.brightness = 3;
   1e146:	687b      	ldr	r3, [r7, #4]
   1e148:	2203      	movs	r2, #3
   1e14a:	731a      	strb	r2, [r3, #12]
	optionptr->backlight_setting.maxColor = 30;
   1e14c:	687b      	ldr	r3, [r7, #4]
   1e14e:	221e      	movs	r2, #30
   1e150:	741a      	strb	r2, [r3, #16]
	optionptr->backlight_setting.maxBrightness = 5;
   1e152:	687b      	ldr	r3, [r7, #4]
   1e154:	2205      	movs	r2, #5
   1e156:	745a      	strb	r2, [r3, #17]
	
	optionptr->Settings_Initialized_Key = 0xC9;//  Indicator that settings have been initialized
   1e158:	687b      	ldr	r3, [r7, #4]
   1e15a:	22c9      	movs	r2, #201	; 0xc9
   1e15c:	74da      	strb	r2, [r3, #19]

	
}
   1e15e:	46c0      	nop			; (mov r8, r8)
   1e160:	46bd      	mov	sp, r7
   1e162:	b002      	add	sp, #8
   1e164:	bd80      	pop	{r7, pc}
	...

0001e168 <cos>:
   1e168:	b530      	push	{r4, r5, lr}
   1e16a:	4a20      	ldr	r2, [pc, #128]	; (1e1ec <cos+0x84>)
   1e16c:	004b      	lsls	r3, r1, #1
   1e16e:	b087      	sub	sp, #28
   1e170:	085b      	lsrs	r3, r3, #1
   1e172:	4293      	cmp	r3, r2
   1e174:	dd1c      	ble.n	1e1b0 <cos+0x48>
   1e176:	4a1e      	ldr	r2, [pc, #120]	; (1e1f0 <cos+0x88>)
   1e178:	4293      	cmp	r3, r2
   1e17a:	dd05      	ble.n	1e188 <cos+0x20>
   1e17c:	0002      	movs	r2, r0
   1e17e:	000b      	movs	r3, r1
   1e180:	f005 f860 	bl	23244 <__aeabi_dsub>
   1e184:	b007      	add	sp, #28
   1e186:	bd30      	pop	{r4, r5, pc}
   1e188:	aa02      	add	r2, sp, #8
   1e18a:	f001 f915 	bl	1f3b8 <__ieee754_rem_pio2>
   1e18e:	2303      	movs	r3, #3
   1e190:	4018      	ands	r0, r3
   1e192:	9a04      	ldr	r2, [sp, #16]
   1e194:	9b05      	ldr	r3, [sp, #20]
   1e196:	2801      	cmp	r0, #1
   1e198:	d018      	beq.n	1e1cc <cos+0x64>
   1e19a:	2802      	cmp	r0, #2
   1e19c:	d00d      	beq.n	1e1ba <cos+0x52>
   1e19e:	2800      	cmp	r0, #0
   1e1a0:	d01e      	beq.n	1e1e0 <cos+0x78>
   1e1a2:	9802      	ldr	r0, [sp, #8]
   1e1a4:	9903      	ldr	r1, [sp, #12]
   1e1a6:	2401      	movs	r4, #1
   1e1a8:	9400      	str	r4, [sp, #0]
   1e1aa:	f002 f993 	bl	204d4 <__kernel_sin>
   1e1ae:	e7e9      	b.n	1e184 <cos+0x1c>
   1e1b0:	2200      	movs	r2, #0
   1e1b2:	2300      	movs	r3, #0
   1e1b4:	f001 fbf8 	bl	1f9a8 <__kernel_cos>
   1e1b8:	e7e4      	b.n	1e184 <cos+0x1c>
   1e1ba:	9802      	ldr	r0, [sp, #8]
   1e1bc:	9903      	ldr	r1, [sp, #12]
   1e1be:	f001 fbf3 	bl	1f9a8 <__kernel_cos>
   1e1c2:	2380      	movs	r3, #128	; 0x80
   1e1c4:	061b      	lsls	r3, r3, #24
   1e1c6:	469c      	mov	ip, r3
   1e1c8:	4461      	add	r1, ip
   1e1ca:	e7db      	b.n	1e184 <cos+0x1c>
   1e1cc:	9000      	str	r0, [sp, #0]
   1e1ce:	9802      	ldr	r0, [sp, #8]
   1e1d0:	9903      	ldr	r1, [sp, #12]
   1e1d2:	f002 f97f 	bl	204d4 <__kernel_sin>
   1e1d6:	2380      	movs	r3, #128	; 0x80
   1e1d8:	061b      	lsls	r3, r3, #24
   1e1da:	469c      	mov	ip, r3
   1e1dc:	4461      	add	r1, ip
   1e1de:	e7d1      	b.n	1e184 <cos+0x1c>
   1e1e0:	9802      	ldr	r0, [sp, #8]
   1e1e2:	9903      	ldr	r1, [sp, #12]
   1e1e4:	f001 fbe0 	bl	1f9a8 <__kernel_cos>
   1e1e8:	e7cc      	b.n	1e184 <cos+0x1c>
   1e1ea:	46c0      	nop			; (mov r8, r8)
   1e1ec:	3fe921fb 	.word	0x3fe921fb
   1e1f0:	7fefffff 	.word	0x7fefffff

0001e1f4 <floor>:
   1e1f4:	4a45      	ldr	r2, [pc, #276]	; (1e30c <floor+0x118>)
   1e1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1f8:	4657      	mov	r7, sl
   1e1fa:	4692      	mov	sl, r2
   1e1fc:	004b      	lsls	r3, r1, #1
   1e1fe:	0d5b      	lsrs	r3, r3, #21
   1e200:	449a      	add	sl, r3
   1e202:	464e      	mov	r6, r9
   1e204:	4645      	mov	r5, r8
   1e206:	46de      	mov	lr, fp
   1e208:	4652      	mov	r2, sl
   1e20a:	b5e0      	push	{r5, r6, r7, lr}
   1e20c:	000c      	movs	r4, r1
   1e20e:	0005      	movs	r5, r0
   1e210:	000e      	movs	r6, r1
   1e212:	4689      	mov	r9, r1
   1e214:	0007      	movs	r7, r0
   1e216:	2a13      	cmp	r2, #19
   1e218:	dc22      	bgt.n	1e260 <floor+0x6c>
   1e21a:	2a00      	cmp	r2, #0
   1e21c:	db47      	blt.n	1e2ae <floor+0xba>
   1e21e:	4652      	mov	r2, sl
   1e220:	4b3b      	ldr	r3, [pc, #236]	; (1e310 <floor+0x11c>)
   1e222:	4113      	asrs	r3, r2
   1e224:	4698      	mov	r8, r3
   1e226:	000b      	movs	r3, r1
   1e228:	4642      	mov	r2, r8
   1e22a:	4013      	ands	r3, r2
   1e22c:	4303      	orrs	r3, r0
   1e22e:	d011      	beq.n	1e254 <floor+0x60>
   1e230:	4a38      	ldr	r2, [pc, #224]	; (1e314 <floor+0x120>)
   1e232:	4b39      	ldr	r3, [pc, #228]	; (1e318 <floor+0x124>)
   1e234:	f003 fe42 	bl	21ebc <__aeabi_dadd>
   1e238:	2200      	movs	r2, #0
   1e23a:	2300      	movs	r3, #0
   1e23c:	f002 fe5e 	bl	20efc <__aeabi_dcmpgt>
   1e240:	2800      	cmp	r0, #0
   1e242:	d005      	beq.n	1e250 <floor+0x5c>
   1e244:	2c00      	cmp	r4, #0
   1e246:	db41      	blt.n	1e2cc <floor+0xd8>
   1e248:	464e      	mov	r6, r9
   1e24a:	4643      	mov	r3, r8
   1e24c:	2700      	movs	r7, #0
   1e24e:	439e      	bics	r6, r3
   1e250:	0038      	movs	r0, r7
   1e252:	0031      	movs	r1, r6
   1e254:	bc3c      	pop	{r2, r3, r4, r5}
   1e256:	4690      	mov	r8, r2
   1e258:	4699      	mov	r9, r3
   1e25a:	46a2      	mov	sl, r4
   1e25c:	46ab      	mov	fp, r5
   1e25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e260:	4652      	mov	r2, sl
   1e262:	2a33      	cmp	r2, #51	; 0x33
   1e264:	dd08      	ble.n	1e278 <floor+0x84>
   1e266:	2380      	movs	r3, #128	; 0x80
   1e268:	00db      	lsls	r3, r3, #3
   1e26a:	459a      	cmp	sl, r3
   1e26c:	d1f2      	bne.n	1e254 <floor+0x60>
   1e26e:	0002      	movs	r2, r0
   1e270:	000b      	movs	r3, r1
   1e272:	f003 fe23 	bl	21ebc <__aeabi_dadd>
   1e276:	e7ed      	b.n	1e254 <floor+0x60>
   1e278:	4a28      	ldr	r2, [pc, #160]	; (1e31c <floor+0x128>)
   1e27a:	4694      	mov	ip, r2
   1e27c:	2201      	movs	r2, #1
   1e27e:	4463      	add	r3, ip
   1e280:	4252      	negs	r2, r2
   1e282:	40da      	lsrs	r2, r3
   1e284:	4693      	mov	fp, r2
   1e286:	4202      	tst	r2, r0
   1e288:	d0e4      	beq.n	1e254 <floor+0x60>
   1e28a:	4a22      	ldr	r2, [pc, #136]	; (1e314 <floor+0x120>)
   1e28c:	4b22      	ldr	r3, [pc, #136]	; (1e318 <floor+0x124>)
   1e28e:	f003 fe15 	bl	21ebc <__aeabi_dadd>
   1e292:	2200      	movs	r2, #0
   1e294:	2300      	movs	r3, #0
   1e296:	f002 fe31 	bl	20efc <__aeabi_dcmpgt>
   1e29a:	2800      	cmp	r0, #0
   1e29c:	d0d8      	beq.n	1e250 <floor+0x5c>
   1e29e:	2c00      	cmp	r4, #0
   1e2a0:	db1a      	blt.n	1e2d8 <floor+0xe4>
   1e2a2:	465b      	mov	r3, fp
   1e2a4:	464e      	mov	r6, r9
   1e2a6:	439f      	bics	r7, r3
   1e2a8:	0038      	movs	r0, r7
   1e2aa:	0031      	movs	r1, r6
   1e2ac:	e7d2      	b.n	1e254 <floor+0x60>
   1e2ae:	4a19      	ldr	r2, [pc, #100]	; (1e314 <floor+0x120>)
   1e2b0:	4b19      	ldr	r3, [pc, #100]	; (1e318 <floor+0x124>)
   1e2b2:	f003 fe03 	bl	21ebc <__aeabi_dadd>
   1e2b6:	2200      	movs	r2, #0
   1e2b8:	2300      	movs	r3, #0
   1e2ba:	f002 fe1f 	bl	20efc <__aeabi_dcmpgt>
   1e2be:	2800      	cmp	r0, #0
   1e2c0:	d0c6      	beq.n	1e250 <floor+0x5c>
   1e2c2:	2c00      	cmp	r4, #0
   1e2c4:	db16      	blt.n	1e2f4 <floor+0x100>
   1e2c6:	2700      	movs	r7, #0
   1e2c8:	2600      	movs	r6, #0
   1e2ca:	e7c1      	b.n	1e250 <floor+0x5c>
   1e2cc:	2380      	movs	r3, #128	; 0x80
   1e2ce:	4652      	mov	r2, sl
   1e2d0:	035b      	lsls	r3, r3, #13
   1e2d2:	4113      	asrs	r3, r2
   1e2d4:	4499      	add	r9, r3
   1e2d6:	e7b7      	b.n	1e248 <floor+0x54>
   1e2d8:	4653      	mov	r3, sl
   1e2da:	2b14      	cmp	r3, #20
   1e2dc:	d012      	beq.n	1e304 <floor+0x110>
   1e2de:	2334      	movs	r3, #52	; 0x34
   1e2e0:	4652      	mov	r2, sl
   1e2e2:	2701      	movs	r7, #1
   1e2e4:	1a9b      	subs	r3, r3, r2
   1e2e6:	409f      	lsls	r7, r3
   1e2e8:	197f      	adds	r7, r7, r5
   1e2ea:	42af      	cmp	r7, r5
   1e2ec:	419b      	sbcs	r3, r3
   1e2ee:	425b      	negs	r3, r3
   1e2f0:	4499      	add	r9, r3
   1e2f2:	e7d6      	b.n	1e2a2 <floor+0xae>
   1e2f4:	0064      	lsls	r4, r4, #1
   1e2f6:	0864      	lsrs	r4, r4, #1
   1e2f8:	4325      	orrs	r5, r4
   1e2fa:	2700      	movs	r7, #0
   1e2fc:	2d00      	cmp	r5, #0
   1e2fe:	d0a7      	beq.n	1e250 <floor+0x5c>
   1e300:	4e07      	ldr	r6, [pc, #28]	; (1e320 <floor+0x12c>)
   1e302:	e7a5      	b.n	1e250 <floor+0x5c>
   1e304:	3b13      	subs	r3, #19
   1e306:	469c      	mov	ip, r3
   1e308:	44e1      	add	r9, ip
   1e30a:	e7ca      	b.n	1e2a2 <floor+0xae>
   1e30c:	fffffc01 	.word	0xfffffc01
   1e310:	000fffff 	.word	0x000fffff
   1e314:	8800759c 	.word	0x8800759c
   1e318:	7e37e43c 	.word	0x7e37e43c
   1e31c:	fffffbed 	.word	0xfffffbed
   1e320:	bff00000 	.word	0xbff00000

0001e324 <sin>:
   1e324:	b530      	push	{r4, r5, lr}
   1e326:	4a21      	ldr	r2, [pc, #132]	; (1e3ac <sin+0x88>)
   1e328:	004b      	lsls	r3, r1, #1
   1e32a:	b087      	sub	sp, #28
   1e32c:	085b      	lsrs	r3, r3, #1
   1e32e:	4293      	cmp	r3, r2
   1e330:	dd1e      	ble.n	1e370 <sin+0x4c>
   1e332:	4a1f      	ldr	r2, [pc, #124]	; (1e3b0 <sin+0x8c>)
   1e334:	4293      	cmp	r3, r2
   1e336:	dd05      	ble.n	1e344 <sin+0x20>
   1e338:	0002      	movs	r2, r0
   1e33a:	000b      	movs	r3, r1
   1e33c:	f004 ff82 	bl	23244 <__aeabi_dsub>
   1e340:	b007      	add	sp, #28
   1e342:	bd30      	pop	{r4, r5, pc}
   1e344:	aa02      	add	r2, sp, #8
   1e346:	f001 f837 	bl	1f3b8 <__ieee754_rem_pio2>
   1e34a:	2303      	movs	r3, #3
   1e34c:	4018      	ands	r0, r3
   1e34e:	9a04      	ldr	r2, [sp, #16]
   1e350:	9b05      	ldr	r3, [sp, #20]
   1e352:	2801      	cmp	r0, #1
   1e354:	d01e      	beq.n	1e394 <sin+0x70>
   1e356:	2802      	cmp	r0, #2
   1e358:	d011      	beq.n	1e37e <sin+0x5a>
   1e35a:	2800      	cmp	r0, #0
   1e35c:	d01f      	beq.n	1e39e <sin+0x7a>
   1e35e:	9802      	ldr	r0, [sp, #8]
   1e360:	9903      	ldr	r1, [sp, #12]
   1e362:	f001 fb21 	bl	1f9a8 <__kernel_cos>
   1e366:	2380      	movs	r3, #128	; 0x80
   1e368:	061b      	lsls	r3, r3, #24
   1e36a:	469c      	mov	ip, r3
   1e36c:	4461      	add	r1, ip
   1e36e:	e7e7      	b.n	1e340 <sin+0x1c>
   1e370:	2300      	movs	r3, #0
   1e372:	2200      	movs	r2, #0
   1e374:	9300      	str	r3, [sp, #0]
   1e376:	2300      	movs	r3, #0
   1e378:	f002 f8ac 	bl	204d4 <__kernel_sin>
   1e37c:	e7e0      	b.n	1e340 <sin+0x1c>
   1e37e:	2401      	movs	r4, #1
   1e380:	9802      	ldr	r0, [sp, #8]
   1e382:	9903      	ldr	r1, [sp, #12]
   1e384:	9400      	str	r4, [sp, #0]
   1e386:	f002 f8a5 	bl	204d4 <__kernel_sin>
   1e38a:	2380      	movs	r3, #128	; 0x80
   1e38c:	061b      	lsls	r3, r3, #24
   1e38e:	469c      	mov	ip, r3
   1e390:	4461      	add	r1, ip
   1e392:	e7d5      	b.n	1e340 <sin+0x1c>
   1e394:	9802      	ldr	r0, [sp, #8]
   1e396:	9903      	ldr	r1, [sp, #12]
   1e398:	f001 fb06 	bl	1f9a8 <__kernel_cos>
   1e39c:	e7d0      	b.n	1e340 <sin+0x1c>
   1e39e:	2401      	movs	r4, #1
   1e3a0:	9802      	ldr	r0, [sp, #8]
   1e3a2:	9903      	ldr	r1, [sp, #12]
   1e3a4:	9400      	str	r4, [sp, #0]
   1e3a6:	f002 f895 	bl	204d4 <__kernel_sin>
   1e3aa:	e7c9      	b.n	1e340 <sin+0x1c>
   1e3ac:	3fe921fb 	.word	0x3fe921fb
   1e3b0:	7fefffff 	.word	0x7fefffff

0001e3b4 <atan2>:
   1e3b4:	b510      	push	{r4, lr}
   1e3b6:	f000 fa0d 	bl	1e7d4 <__ieee754_atan2>
   1e3ba:	bd10      	pop	{r4, pc}

0001e3bc <pow>:
   1e3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e3be:	4657      	mov	r7, sl
   1e3c0:	464e      	mov	r6, r9
   1e3c2:	46de      	mov	lr, fp
   1e3c4:	4645      	mov	r5, r8
   1e3c6:	b5e0      	push	{r5, r6, r7, lr}
   1e3c8:	b08f      	sub	sp, #60	; 0x3c
   1e3ca:	001d      	movs	r5, r3
   1e3cc:	0006      	movs	r6, r0
   1e3ce:	000f      	movs	r7, r1
   1e3d0:	0014      	movs	r4, r2
   1e3d2:	f000 fabb 	bl	1e94c <__ieee754_pow>
   1e3d6:	4bc7      	ldr	r3, [pc, #796]	; (1e6f4 <pow+0x338>)
   1e3d8:	9000      	str	r0, [sp, #0]
   1e3da:	9101      	str	r1, [sp, #4]
   1e3dc:	469a      	mov	sl, r3
   1e3de:	781b      	ldrb	r3, [r3, #0]
   1e3e0:	b25b      	sxtb	r3, r3
   1e3e2:	4699      	mov	r9, r3
   1e3e4:	3301      	adds	r3, #1
   1e3e6:	d03e      	beq.n	1e466 <pow+0xaa>
   1e3e8:	0022      	movs	r2, r4
   1e3ea:	002b      	movs	r3, r5
   1e3ec:	0020      	movs	r0, r4
   1e3ee:	0029      	movs	r1, r5
   1e3f0:	f005 fa3e 	bl	23870 <__aeabi_dcmpun>
   1e3f4:	4683      	mov	fp, r0
   1e3f6:	2800      	cmp	r0, #0
   1e3f8:	d135      	bne.n	1e466 <pow+0xaa>
   1e3fa:	0032      	movs	r2, r6
   1e3fc:	003b      	movs	r3, r7
   1e3fe:	0030      	movs	r0, r6
   1e400:	0039      	movs	r1, r7
   1e402:	f005 fa35 	bl	23870 <__aeabi_dcmpun>
   1e406:	2200      	movs	r2, #0
   1e408:	9003      	str	r0, [sp, #12]
   1e40a:	2800      	cmp	r0, #0
   1e40c:	d000      	beq.n	1e410 <pow+0x54>
   1e40e:	e0b6      	b.n	1e57e <pow+0x1c2>
   1e410:	2300      	movs	r3, #0
   1e412:	0030      	movs	r0, r6
   1e414:	0039      	movs	r1, r7
   1e416:	f002 fd57 	bl	20ec8 <__aeabi_dcmpeq>
   1e41a:	2800      	cmp	r0, #0
   1e41c:	d02c      	beq.n	1e478 <pow+0xbc>
   1e41e:	2200      	movs	r2, #0
   1e420:	2300      	movs	r3, #0
   1e422:	0020      	movs	r0, r4
   1e424:	0029      	movs	r1, r5
   1e426:	f002 fd4f 	bl	20ec8 <__aeabi_dcmpeq>
   1e42a:	4683      	mov	fp, r0
   1e42c:	2800      	cmp	r0, #0
   1e42e:	d100      	bne.n	1e432 <pow+0x76>
   1e430:	e077      	b.n	1e522 <pow+0x166>
   1e432:	ab04      	add	r3, sp, #16
   1e434:	4698      	mov	r8, r3
   1e436:	2301      	movs	r3, #1
   1e438:	4642      	mov	r2, r8
   1e43a:	9304      	str	r3, [sp, #16]
   1e43c:	4bae      	ldr	r3, [pc, #696]	; (1e6f8 <pow+0x33c>)
   1e43e:	6053      	str	r3, [r2, #4]
   1e440:	4643      	mov	r3, r8
   1e442:	9a03      	ldr	r2, [sp, #12]
   1e444:	611c      	str	r4, [r3, #16]
   1e446:	615d      	str	r5, [r3, #20]
   1e448:	621a      	str	r2, [r3, #32]
   1e44a:	609e      	str	r6, [r3, #8]
   1e44c:	60df      	str	r7, [r3, #12]
   1e44e:	4642      	mov	r2, r8
   1e450:	2300      	movs	r3, #0
   1e452:	2400      	movs	r4, #0
   1e454:	6193      	str	r3, [r2, #24]
   1e456:	61d4      	str	r4, [r2, #28]
   1e458:	464b      	mov	r3, r9
   1e45a:	2b00      	cmp	r3, #0
   1e45c:	d04d      	beq.n	1e4fa <pow+0x13e>
   1e45e:	2300      	movs	r3, #0
   1e460:	4ca6      	ldr	r4, [pc, #664]	; (1e6fc <pow+0x340>)
   1e462:	9300      	str	r3, [sp, #0]
   1e464:	9401      	str	r4, [sp, #4]
   1e466:	9800      	ldr	r0, [sp, #0]
   1e468:	9901      	ldr	r1, [sp, #4]
   1e46a:	b00f      	add	sp, #60	; 0x3c
   1e46c:	bc3c      	pop	{r2, r3, r4, r5}
   1e46e:	4690      	mov	r8, r2
   1e470:	4699      	mov	r9, r3
   1e472:	46a2      	mov	sl, r4
   1e474:	46ab      	mov	fp, r5
   1e476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e478:	9800      	ldr	r0, [sp, #0]
   1e47a:	9901      	ldr	r1, [sp, #4]
   1e47c:	f002 fa7a 	bl	20974 <finite>
   1e480:	4681      	mov	r9, r0
   1e482:	2800      	cmp	r0, #0
   1e484:	d100      	bne.n	1e488 <pow+0xcc>
   1e486:	e09b      	b.n	1e5c0 <pow+0x204>
   1e488:	9800      	ldr	r0, [sp, #0]
   1e48a:	9901      	ldr	r1, [sp, #4]
   1e48c:	2200      	movs	r2, #0
   1e48e:	2300      	movs	r3, #0
   1e490:	f002 fd1a 	bl	20ec8 <__aeabi_dcmpeq>
   1e494:	2800      	cmp	r0, #0
   1e496:	d0e6      	beq.n	1e466 <pow+0xaa>
   1e498:	0030      	movs	r0, r6
   1e49a:	0039      	movs	r1, r7
   1e49c:	f002 fa6a 	bl	20974 <finite>
   1e4a0:	2800      	cmp	r0, #0
   1e4a2:	d0e0      	beq.n	1e466 <pow+0xaa>
   1e4a4:	0020      	movs	r0, r4
   1e4a6:	0029      	movs	r1, r5
   1e4a8:	f002 fa64 	bl	20974 <finite>
   1e4ac:	2800      	cmp	r0, #0
   1e4ae:	d0da      	beq.n	1e466 <pow+0xaa>
   1e4b0:	ab04      	add	r3, sp, #16
   1e4b2:	4698      	mov	r8, r3
   1e4b4:	2304      	movs	r3, #4
   1e4b6:	4642      	mov	r2, r8
   1e4b8:	9304      	str	r3, [sp, #16]
   1e4ba:	4b8f      	ldr	r3, [pc, #572]	; (1e6f8 <pow+0x33c>)
   1e4bc:	6114      	str	r4, [r2, #16]
   1e4be:	6155      	str	r5, [r2, #20]
   1e4c0:	6053      	str	r3, [r2, #4]
   1e4c2:	2300      	movs	r3, #0
   1e4c4:	2400      	movs	r4, #0
   1e4c6:	6213      	str	r3, [r2, #32]
   1e4c8:	2300      	movs	r3, #0
   1e4ca:	6193      	str	r3, [r2, #24]
   1e4cc:	61d4      	str	r4, [r2, #28]
   1e4ce:	4653      	mov	r3, sl
   1e4d0:	781b      	ldrb	r3, [r3, #0]
   1e4d2:	6096      	str	r6, [r2, #8]
   1e4d4:	60d7      	str	r7, [r2, #12]
   1e4d6:	b25b      	sxtb	r3, r3
   1e4d8:	2b02      	cmp	r3, #2
   1e4da:	d004      	beq.n	1e4e6 <pow+0x12a>
   1e4dc:	4640      	mov	r0, r8
   1e4de:	f002 fa53 	bl	20988 <matherr>
   1e4e2:	2800      	cmp	r0, #0
   1e4e4:	d10e      	bne.n	1e504 <pow+0x148>
   1e4e6:	f005 fb6d 	bl	23bc4 <__errno>
   1e4ea:	2322      	movs	r3, #34	; 0x22
   1e4ec:	6003      	str	r3, [r0, #0]
   1e4ee:	e009      	b.n	1e504 <pow+0x148>
   1e4f0:	4642      	mov	r2, r8
   1e4f2:	2300      	movs	r3, #0
   1e4f4:	2400      	movs	r4, #0
   1e4f6:	6193      	str	r3, [r2, #24]
   1e4f8:	61d4      	str	r4, [r2, #28]
   1e4fa:	4640      	mov	r0, r8
   1e4fc:	f002 fa44 	bl	20988 <matherr>
   1e500:	2800      	cmp	r0, #0
   1e502:	d037      	beq.n	1e574 <pow+0x1b8>
   1e504:	4643      	mov	r3, r8
   1e506:	6a1b      	ldr	r3, [r3, #32]
   1e508:	2b00      	cmp	r3, #0
   1e50a:	d004      	beq.n	1e516 <pow+0x15a>
   1e50c:	f005 fb5a 	bl	23bc4 <__errno>
   1e510:	4643      	mov	r3, r8
   1e512:	6a1b      	ldr	r3, [r3, #32]
   1e514:	6003      	str	r3, [r0, #0]
   1e516:	4643      	mov	r3, r8
   1e518:	69dc      	ldr	r4, [r3, #28]
   1e51a:	699b      	ldr	r3, [r3, #24]
   1e51c:	9300      	str	r3, [sp, #0]
   1e51e:	9401      	str	r4, [sp, #4]
   1e520:	e7a1      	b.n	1e466 <pow+0xaa>
   1e522:	0020      	movs	r0, r4
   1e524:	0029      	movs	r1, r5
   1e526:	f002 fa25 	bl	20974 <finite>
   1e52a:	2800      	cmp	r0, #0
   1e52c:	d09b      	beq.n	1e466 <pow+0xaa>
   1e52e:	2200      	movs	r2, #0
   1e530:	2300      	movs	r3, #0
   1e532:	0020      	movs	r0, r4
   1e534:	0029      	movs	r1, r5
   1e536:	f002 fccd 	bl	20ed4 <__aeabi_dcmplt>
   1e53a:	2800      	cmp	r0, #0
   1e53c:	d100      	bne.n	1e540 <pow+0x184>
   1e53e:	e792      	b.n	1e466 <pow+0xaa>
   1e540:	ab04      	add	r3, sp, #16
   1e542:	4698      	mov	r8, r3
   1e544:	2301      	movs	r3, #1
   1e546:	4642      	mov	r2, r8
   1e548:	9304      	str	r3, [sp, #16]
   1e54a:	4b6b      	ldr	r3, [pc, #428]	; (1e6f8 <pow+0x33c>)
   1e54c:	6053      	str	r3, [r2, #4]
   1e54e:	4643      	mov	r3, r8
   1e550:	465a      	mov	r2, fp
   1e552:	609e      	str	r6, [r3, #8]
   1e554:	60df      	str	r7, [r3, #12]
   1e556:	621a      	str	r2, [r3, #32]
   1e558:	611c      	str	r4, [r3, #16]
   1e55a:	615d      	str	r5, [r3, #20]
   1e55c:	4653      	mov	r3, sl
   1e55e:	781b      	ldrb	r3, [r3, #0]
   1e560:	b25b      	sxtb	r3, r3
   1e562:	2b00      	cmp	r3, #0
   1e564:	d0c4      	beq.n	1e4f0 <pow+0x134>
   1e566:	2000      	movs	r0, #0
   1e568:	4642      	mov	r2, r8
   1e56a:	4965      	ldr	r1, [pc, #404]	; (1e700 <pow+0x344>)
   1e56c:	6190      	str	r0, [r2, #24]
   1e56e:	61d1      	str	r1, [r2, #28]
   1e570:	2b02      	cmp	r3, #2
   1e572:	d1c2      	bne.n	1e4fa <pow+0x13e>
   1e574:	f005 fb26 	bl	23bc4 <__errno>
   1e578:	2321      	movs	r3, #33	; 0x21
   1e57a:	6003      	str	r3, [r0, #0]
   1e57c:	e7c2      	b.n	1e504 <pow+0x148>
   1e57e:	2300      	movs	r3, #0
   1e580:	0020      	movs	r0, r4
   1e582:	0029      	movs	r1, r5
   1e584:	f002 fca0 	bl	20ec8 <__aeabi_dcmpeq>
   1e588:	2800      	cmp	r0, #0
   1e58a:	d100      	bne.n	1e58e <pow+0x1d2>
   1e58c:	e76b      	b.n	1e466 <pow+0xaa>
   1e58e:	ab04      	add	r3, sp, #16
   1e590:	4698      	mov	r8, r3
   1e592:	2301      	movs	r3, #1
   1e594:	4642      	mov	r2, r8
   1e596:	9304      	str	r3, [sp, #16]
   1e598:	4b57      	ldr	r3, [pc, #348]	; (1e6f8 <pow+0x33c>)
   1e59a:	4641      	mov	r1, r8
   1e59c:	6053      	str	r3, [r2, #4]
   1e59e:	4643      	mov	r3, r8
   1e5a0:	465a      	mov	r2, fp
   1e5a2:	621a      	str	r2, [r3, #32]
   1e5a4:	2200      	movs	r2, #0
   1e5a6:	609e      	str	r6, [r3, #8]
   1e5a8:	60df      	str	r7, [r3, #12]
   1e5aa:	611c      	str	r4, [r3, #16]
   1e5ac:	615d      	str	r5, [r3, #20]
   1e5ae:	4b53      	ldr	r3, [pc, #332]	; (1e6fc <pow+0x340>)
   1e5b0:	618a      	str	r2, [r1, #24]
   1e5b2:	61cb      	str	r3, [r1, #28]
   1e5b4:	9200      	str	r2, [sp, #0]
   1e5b6:	9301      	str	r3, [sp, #4]
   1e5b8:	464b      	mov	r3, r9
   1e5ba:	2b02      	cmp	r3, #2
   1e5bc:	d19d      	bne.n	1e4fa <pow+0x13e>
   1e5be:	e752      	b.n	1e466 <pow+0xaa>
   1e5c0:	0030      	movs	r0, r6
   1e5c2:	0039      	movs	r1, r7
   1e5c4:	f002 f9d6 	bl	20974 <finite>
   1e5c8:	2800      	cmp	r0, #0
   1e5ca:	d100      	bne.n	1e5ce <pow+0x212>
   1e5cc:	e75c      	b.n	1e488 <pow+0xcc>
   1e5ce:	0020      	movs	r0, r4
   1e5d0:	0029      	movs	r1, r5
   1e5d2:	f002 f9cf 	bl	20974 <finite>
   1e5d6:	2800      	cmp	r0, #0
   1e5d8:	d100      	bne.n	1e5dc <pow+0x220>
   1e5da:	e755      	b.n	1e488 <pow+0xcc>
   1e5dc:	9800      	ldr	r0, [sp, #0]
   1e5de:	9901      	ldr	r1, [sp, #4]
   1e5e0:	000b      	movs	r3, r1
   1e5e2:	0002      	movs	r2, r0
   1e5e4:	f005 f944 	bl	23870 <__aeabi_dcmpun>
   1e5e8:	ab04      	add	r3, sp, #16
   1e5ea:	4698      	mov	r8, r3
   1e5ec:	2800      	cmp	r0, #0
   1e5ee:	d161      	bne.n	1e6b4 <pow+0x2f8>
   1e5f0:	2303      	movs	r3, #3
   1e5f2:	4642      	mov	r2, r8
   1e5f4:	9304      	str	r3, [sp, #16]
   1e5f6:	4b40      	ldr	r3, [pc, #256]	; (1e6f8 <pow+0x33c>)
   1e5f8:	6210      	str	r0, [r2, #32]
   1e5fa:	6053      	str	r3, [r2, #4]
   1e5fc:	4653      	mov	r3, sl
   1e5fe:	781b      	ldrb	r3, [r3, #0]
   1e600:	6096      	str	r6, [r2, #8]
   1e602:	60d7      	str	r7, [r2, #12]
   1e604:	b25b      	sxtb	r3, r3
   1e606:	6114      	str	r4, [r2, #16]
   1e608:	6155      	str	r5, [r2, #20]
   1e60a:	4699      	mov	r9, r3
   1e60c:	2b00      	cmp	r3, #0
   1e60e:	d12f      	bne.n	1e670 <pow+0x2b4>
   1e610:	22e0      	movs	r2, #224	; 0xe0
   1e612:	4641      	mov	r1, r8
   1e614:	4b3b      	ldr	r3, [pc, #236]	; (1e704 <pow+0x348>)
   1e616:	0612      	lsls	r2, r2, #24
   1e618:	618a      	str	r2, [r1, #24]
   1e61a:	61cb      	str	r3, [r1, #28]
   1e61c:	0030      	movs	r0, r6
   1e61e:	2200      	movs	r2, #0
   1e620:	2300      	movs	r3, #0
   1e622:	0039      	movs	r1, r7
   1e624:	f002 fc56 	bl	20ed4 <__aeabi_dcmplt>
   1e628:	2800      	cmp	r0, #0
   1e62a:	d100      	bne.n	1e62e <pow+0x272>
   1e62c:	e756      	b.n	1e4dc <pow+0x120>
   1e62e:	2200      	movs	r2, #0
   1e630:	4b35      	ldr	r3, [pc, #212]	; (1e708 <pow+0x34c>)
   1e632:	0020      	movs	r0, r4
   1e634:	0029      	movs	r1, r5
   1e636:	f004 fb85 	bl	22d44 <__aeabi_dmul>
   1e63a:	0004      	movs	r4, r0
   1e63c:	000d      	movs	r5, r1
   1e63e:	f002 f9ab 	bl	20998 <rint>
   1e642:	0002      	movs	r2, r0
   1e644:	000b      	movs	r3, r1
   1e646:	0020      	movs	r0, r4
   1e648:	0029      	movs	r1, r5
   1e64a:	f002 fc3d 	bl	20ec8 <__aeabi_dcmpeq>
   1e64e:	2800      	cmp	r0, #0
   1e650:	d105      	bne.n	1e65e <pow+0x2a2>
   1e652:	22e0      	movs	r2, #224	; 0xe0
   1e654:	4b2d      	ldr	r3, [pc, #180]	; (1e70c <pow+0x350>)
   1e656:	0612      	lsls	r2, r2, #24
   1e658:	4641      	mov	r1, r8
   1e65a:	618a      	str	r2, [r1, #24]
   1e65c:	61cb      	str	r3, [r1, #28]
   1e65e:	4653      	mov	r3, sl
   1e660:	781b      	ldrb	r3, [r3, #0]
   1e662:	b25b      	sxtb	r3, r3
   1e664:	4699      	mov	r9, r3
   1e666:	464b      	mov	r3, r9
   1e668:	2b02      	cmp	r3, #2
   1e66a:	d000      	beq.n	1e66e <pow+0x2b2>
   1e66c:	e736      	b.n	1e4dc <pow+0x120>
   1e66e:	e73a      	b.n	1e4e6 <pow+0x12a>
   1e670:	2200      	movs	r2, #0
   1e672:	4641      	mov	r1, r8
   1e674:	4b26      	ldr	r3, [pc, #152]	; (1e710 <pow+0x354>)
   1e676:	0030      	movs	r0, r6
   1e678:	618a      	str	r2, [r1, #24]
   1e67a:	61cb      	str	r3, [r1, #28]
   1e67c:	2200      	movs	r2, #0
   1e67e:	2300      	movs	r3, #0
   1e680:	0039      	movs	r1, r7
   1e682:	f002 fc27 	bl	20ed4 <__aeabi_dcmplt>
   1e686:	2800      	cmp	r0, #0
   1e688:	d0ed      	beq.n	1e666 <pow+0x2aa>
   1e68a:	2200      	movs	r2, #0
   1e68c:	4b1e      	ldr	r3, [pc, #120]	; (1e708 <pow+0x34c>)
   1e68e:	0020      	movs	r0, r4
   1e690:	0029      	movs	r1, r5
   1e692:	f004 fb57 	bl	22d44 <__aeabi_dmul>
   1e696:	0004      	movs	r4, r0
   1e698:	000d      	movs	r5, r1
   1e69a:	f002 f97d 	bl	20998 <rint>
   1e69e:	0002      	movs	r2, r0
   1e6a0:	000b      	movs	r3, r1
   1e6a2:	0020      	movs	r0, r4
   1e6a4:	0029      	movs	r1, r5
   1e6a6:	f002 fc0f 	bl	20ec8 <__aeabi_dcmpeq>
   1e6aa:	2800      	cmp	r0, #0
   1e6ac:	d1d7      	bne.n	1e65e <pow+0x2a2>
   1e6ae:	2200      	movs	r2, #0
   1e6b0:	4b13      	ldr	r3, [pc, #76]	; (1e700 <pow+0x344>)
   1e6b2:	e7d1      	b.n	1e658 <pow+0x29c>
   1e6b4:	2301      	movs	r3, #1
   1e6b6:	4642      	mov	r2, r8
   1e6b8:	9304      	str	r3, [sp, #16]
   1e6ba:	4b0f      	ldr	r3, [pc, #60]	; (1e6f8 <pow+0x33c>)
   1e6bc:	6053      	str	r3, [r2, #4]
   1e6be:	4643      	mov	r3, r8
   1e6c0:	464a      	mov	r2, r9
   1e6c2:	611c      	str	r4, [r3, #16]
   1e6c4:	615d      	str	r5, [r3, #20]
   1e6c6:	621a      	str	r2, [r3, #32]
   1e6c8:	609e      	str	r6, [r3, #8]
   1e6ca:	60df      	str	r7, [r3, #12]
   1e6cc:	2400      	movs	r4, #0
   1e6ce:	4653      	mov	r3, sl
   1e6d0:	571c      	ldrsb	r4, [r3, r4]
   1e6d2:	2c00      	cmp	r4, #0
   1e6d4:	d100      	bne.n	1e6d8 <pow+0x31c>
   1e6d6:	e70b      	b.n	1e4f0 <pow+0x134>
   1e6d8:	2300      	movs	r3, #0
   1e6da:	2200      	movs	r2, #0
   1e6dc:	0019      	movs	r1, r3
   1e6de:	0010      	movs	r0, r2
   1e6e0:	f003 fefc 	bl	224dc <__aeabi_ddiv>
   1e6e4:	4643      	mov	r3, r8
   1e6e6:	6198      	str	r0, [r3, #24]
   1e6e8:	61d9      	str	r1, [r3, #28]
   1e6ea:	2c02      	cmp	r4, #2
   1e6ec:	d100      	bne.n	1e6f0 <pow+0x334>
   1e6ee:	e741      	b.n	1e574 <pow+0x1b8>
   1e6f0:	e703      	b.n	1e4fa <pow+0x13e>
   1e6f2:	46c0      	nop			; (mov r8, r8)
   1e6f4:	200002a0 	.word	0x200002a0
   1e6f8:	00029908 	.word	0x00029908
   1e6fc:	3ff00000 	.word	0x3ff00000
   1e700:	fff00000 	.word	0xfff00000
   1e704:	47efffff 	.word	0x47efffff
   1e708:	3fe00000 	.word	0x3fe00000
   1e70c:	c7efffff 	.word	0xc7efffff
   1e710:	7ff00000 	.word	0x7ff00000

0001e714 <sqrt>:
   1e714:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e716:	4647      	mov	r7, r8
   1e718:	46ce      	mov	lr, r9
   1e71a:	b580      	push	{r7, lr}
   1e71c:	b08d      	sub	sp, #52	; 0x34
   1e71e:	0004      	movs	r4, r0
   1e720:	000d      	movs	r5, r1
   1e722:	f001 f861 	bl	1f7e8 <__ieee754_sqrt>
   1e726:	4b29      	ldr	r3, [pc, #164]	; (1e7cc <sqrt+0xb8>)
   1e728:	0006      	movs	r6, r0
   1e72a:	781b      	ldrb	r3, [r3, #0]
   1e72c:	000f      	movs	r7, r1
   1e72e:	b25b      	sxtb	r3, r3
   1e730:	4698      	mov	r8, r3
   1e732:	3301      	adds	r3, #1
   1e734:	d010      	beq.n	1e758 <sqrt+0x44>
   1e736:	0022      	movs	r2, r4
   1e738:	002b      	movs	r3, r5
   1e73a:	0020      	movs	r0, r4
   1e73c:	0029      	movs	r1, r5
   1e73e:	f005 f897 	bl	23870 <__aeabi_dcmpun>
   1e742:	4681      	mov	r9, r0
   1e744:	2800      	cmp	r0, #0
   1e746:	d107      	bne.n	1e758 <sqrt+0x44>
   1e748:	2200      	movs	r2, #0
   1e74a:	2300      	movs	r3, #0
   1e74c:	0020      	movs	r0, r4
   1e74e:	0029      	movs	r1, r5
   1e750:	f002 fbc0 	bl	20ed4 <__aeabi_dcmplt>
   1e754:	2800      	cmp	r0, #0
   1e756:	d106      	bne.n	1e766 <sqrt+0x52>
   1e758:	0030      	movs	r0, r6
   1e75a:	0039      	movs	r1, r7
   1e75c:	b00d      	add	sp, #52	; 0x34
   1e75e:	bc0c      	pop	{r2, r3}
   1e760:	4690      	mov	r8, r2
   1e762:	4699      	mov	r9, r3
   1e764:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e766:	2301      	movs	r3, #1
   1e768:	9302      	str	r3, [sp, #8]
   1e76a:	4b19      	ldr	r3, [pc, #100]	; (1e7d0 <sqrt+0xbc>)
   1e76c:	9406      	str	r4, [sp, #24]
   1e76e:	9507      	str	r5, [sp, #28]
   1e770:	9303      	str	r3, [sp, #12]
   1e772:	464b      	mov	r3, r9
   1e774:	930a      	str	r3, [sp, #40]	; 0x28
   1e776:	4643      	mov	r3, r8
   1e778:	9404      	str	r4, [sp, #16]
   1e77a:	9505      	str	r5, [sp, #20]
   1e77c:	2b00      	cmp	r3, #0
   1e77e:	d015      	beq.n	1e7ac <sqrt+0x98>
   1e780:	2300      	movs	r3, #0
   1e782:	2200      	movs	r2, #0
   1e784:	0019      	movs	r1, r3
   1e786:	0010      	movs	r0, r2
   1e788:	f003 fea8 	bl	224dc <__aeabi_ddiv>
   1e78c:	4643      	mov	r3, r8
   1e78e:	9008      	str	r0, [sp, #32]
   1e790:	9109      	str	r1, [sp, #36]	; 0x24
   1e792:	2b02      	cmp	r3, #2
   1e794:	d10e      	bne.n	1e7b4 <sqrt+0xa0>
   1e796:	f005 fa15 	bl	23bc4 <__errno>
   1e79a:	2321      	movs	r3, #33	; 0x21
   1e79c:	6003      	str	r3, [r0, #0]
   1e79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e7a0:	9301      	str	r3, [sp, #4]
   1e7a2:	2b00      	cmp	r3, #0
   1e7a4:	d10c      	bne.n	1e7c0 <sqrt+0xac>
   1e7a6:	9e08      	ldr	r6, [sp, #32]
   1e7a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1e7aa:	e7d5      	b.n	1e758 <sqrt+0x44>
   1e7ac:	2300      	movs	r3, #0
   1e7ae:	2400      	movs	r4, #0
   1e7b0:	9308      	str	r3, [sp, #32]
   1e7b2:	9409      	str	r4, [sp, #36]	; 0x24
   1e7b4:	a802      	add	r0, sp, #8
   1e7b6:	f002 f8e7 	bl	20988 <matherr>
   1e7ba:	2800      	cmp	r0, #0
   1e7bc:	d1ef      	bne.n	1e79e <sqrt+0x8a>
   1e7be:	e7ea      	b.n	1e796 <sqrt+0x82>
   1e7c0:	f005 fa00 	bl	23bc4 <__errno>
   1e7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e7c6:	9301      	str	r3, [sp, #4]
   1e7c8:	6003      	str	r3, [r0, #0]
   1e7ca:	e7ec      	b.n	1e7a6 <sqrt+0x92>
   1e7cc:	200002a0 	.word	0x200002a0
   1e7d0:	0002990c 	.word	0x0002990c

0001e7d4 <__ieee754_atan2>:
   1e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7d6:	0015      	movs	r5, r2
   1e7d8:	4647      	mov	r7, r8
   1e7da:	46ce      	mov	lr, r9
   1e7dc:	005a      	lsls	r2, r3, #1
   1e7de:	001c      	movs	r4, r3
   1e7e0:	426b      	negs	r3, r5
   1e7e2:	b580      	push	{r7, lr}
   1e7e4:	432b      	orrs	r3, r5
   1e7e6:	4f4b      	ldr	r7, [pc, #300]	; (1e914 <__ieee754_atan2+0x140>)
   1e7e8:	0852      	lsrs	r2, r2, #1
   1e7ea:	0fdb      	lsrs	r3, r3, #31
   1e7ec:	4688      	mov	r8, r1
   1e7ee:	4313      	orrs	r3, r2
   1e7f0:	42bb      	cmp	r3, r7
   1e7f2:	d83a      	bhi.n	1e86a <__ieee754_atan2+0x96>
   1e7f4:	004b      	lsls	r3, r1, #1
   1e7f6:	085b      	lsrs	r3, r3, #1
   1e7f8:	4699      	mov	r9, r3
   1e7fa:	464e      	mov	r6, r9
   1e7fc:	4243      	negs	r3, r0
   1e7fe:	4303      	orrs	r3, r0
   1e800:	0fdb      	lsrs	r3, r3, #31
   1e802:	4333      	orrs	r3, r6
   1e804:	42bb      	cmp	r3, r7
   1e806:	d830      	bhi.n	1e86a <__ieee754_atan2+0x96>
   1e808:	4b43      	ldr	r3, [pc, #268]	; (1e918 <__ieee754_atan2+0x144>)
   1e80a:	18e3      	adds	r3, r4, r3
   1e80c:	432b      	orrs	r3, r5
   1e80e:	d043      	beq.n	1e898 <__ieee754_atan2+0xc4>
   1e810:	2602      	movs	r6, #2
   1e812:	17a3      	asrs	r3, r4, #30
   1e814:	401e      	ands	r6, r3
   1e816:	0fcb      	lsrs	r3, r1, #31
   1e818:	431e      	orrs	r6, r3
   1e81a:	464b      	mov	r3, r9
   1e81c:	4303      	orrs	r3, r0
   1e81e:	d02e      	beq.n	1e87e <__ieee754_atan2+0xaa>
   1e820:	0013      	movs	r3, r2
   1e822:	432b      	orrs	r3, r5
   1e824:	d032      	beq.n	1e88c <__ieee754_atan2+0xb8>
   1e826:	42ba      	cmp	r2, r7
   1e828:	d041      	beq.n	1e8ae <__ieee754_atan2+0xda>
   1e82a:	45b9      	cmp	r9, r7
   1e82c:	d02e      	beq.n	1e88c <__ieee754_atan2+0xb8>
   1e82e:	464b      	mov	r3, r9
   1e830:	1a9a      	subs	r2, r3, r2
   1e832:	1512      	asrs	r2, r2, #20
   1e834:	2a3c      	cmp	r2, #60	; 0x3c
   1e836:	dc32      	bgt.n	1e89e <__ieee754_atan2+0xca>
   1e838:	2c00      	cmp	r4, #0
   1e83a:	db55      	blt.n	1e8e8 <__ieee754_atan2+0x114>
   1e83c:	002a      	movs	r2, r5
   1e83e:	0023      	movs	r3, r4
   1e840:	f003 fe4c 	bl	224dc <__aeabi_ddiv>
   1e844:	f002 f892 	bl	2096c <fabs>
   1e848:	f001 fef4 	bl	20634 <atan>
   1e84c:	2e01      	cmp	r6, #1
   1e84e:	d046      	beq.n	1e8de <__ieee754_atan2+0x10a>
   1e850:	2e02      	cmp	r6, #2
   1e852:	d039      	beq.n	1e8c8 <__ieee754_atan2+0xf4>
   1e854:	2e00      	cmp	r6, #0
   1e856:	d00e      	beq.n	1e876 <__ieee754_atan2+0xa2>
   1e858:	4a30      	ldr	r2, [pc, #192]	; (1e91c <__ieee754_atan2+0x148>)
   1e85a:	4b31      	ldr	r3, [pc, #196]	; (1e920 <__ieee754_atan2+0x14c>)
   1e85c:	f004 fcf2 	bl	23244 <__aeabi_dsub>
   1e860:	4a30      	ldr	r2, [pc, #192]	; (1e924 <__ieee754_atan2+0x150>)
   1e862:	4b31      	ldr	r3, [pc, #196]	; (1e928 <__ieee754_atan2+0x154>)
   1e864:	f004 fcee 	bl	23244 <__aeabi_dsub>
   1e868:	e005      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e86a:	0002      	movs	r2, r0
   1e86c:	000b      	movs	r3, r1
   1e86e:	0028      	movs	r0, r5
   1e870:	0021      	movs	r1, r4
   1e872:	f003 fb23 	bl	21ebc <__aeabi_dadd>
   1e876:	bc0c      	pop	{r2, r3}
   1e878:	4690      	mov	r8, r2
   1e87a:	4699      	mov	r9, r3
   1e87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e87e:	2e02      	cmp	r6, #2
   1e880:	d010      	beq.n	1e8a4 <__ieee754_atan2+0xd0>
   1e882:	2e03      	cmp	r6, #3
   1e884:	d1f7      	bne.n	1e876 <__ieee754_atan2+0xa2>
   1e886:	4827      	ldr	r0, [pc, #156]	; (1e924 <__ieee754_atan2+0x150>)
   1e888:	4928      	ldr	r1, [pc, #160]	; (1e92c <__ieee754_atan2+0x158>)
   1e88a:	e7f4      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e88c:	4643      	mov	r3, r8
   1e88e:	4825      	ldr	r0, [pc, #148]	; (1e924 <__ieee754_atan2+0x150>)
   1e890:	2b00      	cmp	r3, #0
   1e892:	db0a      	blt.n	1e8aa <__ieee754_atan2+0xd6>
   1e894:	4926      	ldr	r1, [pc, #152]	; (1e930 <__ieee754_atan2+0x15c>)
   1e896:	e7ee      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e898:	f001 fecc 	bl	20634 <atan>
   1e89c:	e7eb      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e89e:	4821      	ldr	r0, [pc, #132]	; (1e924 <__ieee754_atan2+0x150>)
   1e8a0:	4923      	ldr	r1, [pc, #140]	; (1e930 <__ieee754_atan2+0x15c>)
   1e8a2:	e7d3      	b.n	1e84c <__ieee754_atan2+0x78>
   1e8a4:	481f      	ldr	r0, [pc, #124]	; (1e924 <__ieee754_atan2+0x150>)
   1e8a6:	4920      	ldr	r1, [pc, #128]	; (1e928 <__ieee754_atan2+0x154>)
   1e8a8:	e7e5      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e8aa:	4922      	ldr	r1, [pc, #136]	; (1e934 <__ieee754_atan2+0x160>)
   1e8ac:	e7e3      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e8ae:	4591      	cmp	r9, r2
   1e8b0:	d01f      	beq.n	1e8f2 <__ieee754_atan2+0x11e>
   1e8b2:	2e02      	cmp	r6, #2
   1e8b4:	d0f6      	beq.n	1e8a4 <__ieee754_atan2+0xd0>
   1e8b6:	2e03      	cmp	r6, #3
   1e8b8:	d0e5      	beq.n	1e886 <__ieee754_atan2+0xb2>
   1e8ba:	2000      	movs	r0, #0
   1e8bc:	2100      	movs	r1, #0
   1e8be:	2e01      	cmp	r6, #1
   1e8c0:	d1d9      	bne.n	1e876 <__ieee754_atan2+0xa2>
   1e8c2:	2180      	movs	r1, #128	; 0x80
   1e8c4:	0609      	lsls	r1, r1, #24
   1e8c6:	e7d6      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e8c8:	4a14      	ldr	r2, [pc, #80]	; (1e91c <__ieee754_atan2+0x148>)
   1e8ca:	4b15      	ldr	r3, [pc, #84]	; (1e920 <__ieee754_atan2+0x14c>)
   1e8cc:	f004 fcba 	bl	23244 <__aeabi_dsub>
   1e8d0:	0002      	movs	r2, r0
   1e8d2:	000b      	movs	r3, r1
   1e8d4:	4813      	ldr	r0, [pc, #76]	; (1e924 <__ieee754_atan2+0x150>)
   1e8d6:	4914      	ldr	r1, [pc, #80]	; (1e928 <__ieee754_atan2+0x154>)
   1e8d8:	f004 fcb4 	bl	23244 <__aeabi_dsub>
   1e8dc:	e7cb      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e8de:	2480      	movs	r4, #128	; 0x80
   1e8e0:	0624      	lsls	r4, r4, #24
   1e8e2:	190b      	adds	r3, r1, r4
   1e8e4:	0019      	movs	r1, r3
   1e8e6:	e7c6      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e8e8:	323c      	adds	r2, #60	; 0x3c
   1e8ea:	daa7      	bge.n	1e83c <__ieee754_atan2+0x68>
   1e8ec:	2000      	movs	r0, #0
   1e8ee:	2100      	movs	r1, #0
   1e8f0:	e7ac      	b.n	1e84c <__ieee754_atan2+0x78>
   1e8f2:	2e02      	cmp	r6, #2
   1e8f4:	d006      	beq.n	1e904 <__ieee754_atan2+0x130>
   1e8f6:	2e03      	cmp	r6, #3
   1e8f8:	d009      	beq.n	1e90e <__ieee754_atan2+0x13a>
   1e8fa:	480a      	ldr	r0, [pc, #40]	; (1e924 <__ieee754_atan2+0x150>)
   1e8fc:	2e01      	cmp	r6, #1
   1e8fe:	d004      	beq.n	1e90a <__ieee754_atan2+0x136>
   1e900:	490d      	ldr	r1, [pc, #52]	; (1e938 <__ieee754_atan2+0x164>)
   1e902:	e7b8      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e904:	480d      	ldr	r0, [pc, #52]	; (1e93c <__ieee754_atan2+0x168>)
   1e906:	490e      	ldr	r1, [pc, #56]	; (1e940 <__ieee754_atan2+0x16c>)
   1e908:	e7b5      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e90a:	490e      	ldr	r1, [pc, #56]	; (1e944 <__ieee754_atan2+0x170>)
   1e90c:	e7b3      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e90e:	480b      	ldr	r0, [pc, #44]	; (1e93c <__ieee754_atan2+0x168>)
   1e910:	490d      	ldr	r1, [pc, #52]	; (1e948 <__ieee754_atan2+0x174>)
   1e912:	e7b0      	b.n	1e876 <__ieee754_atan2+0xa2>
   1e914:	7ff00000 	.word	0x7ff00000
   1e918:	c0100000 	.word	0xc0100000
   1e91c:	33145c07 	.word	0x33145c07
   1e920:	3ca1a626 	.word	0x3ca1a626
   1e924:	54442d18 	.word	0x54442d18
   1e928:	400921fb 	.word	0x400921fb
   1e92c:	c00921fb 	.word	0xc00921fb
   1e930:	3ff921fb 	.word	0x3ff921fb
   1e934:	bff921fb 	.word	0xbff921fb
   1e938:	3fe921fb 	.word	0x3fe921fb
   1e93c:	7f3321d2 	.word	0x7f3321d2
   1e940:	4002d97c 	.word	0x4002d97c
   1e944:	bfe921fb 	.word	0xbfe921fb
   1e948:	c002d97c 	.word	0xc002d97c

0001e94c <__ieee754_pow>:
   1e94c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e94e:	4657      	mov	r7, sl
   1e950:	464e      	mov	r6, r9
   1e952:	4645      	mov	r5, r8
   1e954:	46de      	mov	lr, fp
   1e956:	001c      	movs	r4, r3
   1e958:	0013      	movs	r3, r2
   1e95a:	b5e0      	push	{r5, r6, r7, lr}
   1e95c:	0065      	lsls	r5, r4, #1
   1e95e:	b091      	sub	sp, #68	; 0x44
   1e960:	086d      	lsrs	r5, r5, #1
   1e962:	9300      	str	r3, [sp, #0]
   1e964:	9401      	str	r4, [sp, #4]
   1e966:	0007      	movs	r7, r0
   1e968:	000e      	movs	r6, r1
   1e96a:	4680      	mov	r8, r0
   1e96c:	4689      	mov	r9, r1
   1e96e:	46a2      	mov	sl, r4
   1e970:	432b      	orrs	r3, r5
   1e972:	d031      	beq.n	1e9d8 <__ieee754_pow+0x8c>
   1e974:	4b67      	ldr	r3, [pc, #412]	; (1eb14 <__ieee754_pow+0x1c8>)
   1e976:	0074      	lsls	r4, r6, #1
   1e978:	0864      	lsrs	r4, r4, #1
   1e97a:	429c      	cmp	r4, r3
   1e97c:	dc27      	bgt.n	1e9ce <__ieee754_pow+0x82>
   1e97e:	d024      	beq.n	1e9ca <__ieee754_pow+0x7e>
   1e980:	429d      	cmp	r5, r3
   1e982:	dc24      	bgt.n	1e9ce <__ieee754_pow+0x82>
   1e984:	4b63      	ldr	r3, [pc, #396]	; (1eb14 <__ieee754_pow+0x1c8>)
   1e986:	429d      	cmp	r5, r3
   1e988:	d100      	bne.n	1e98c <__ieee754_pow+0x40>
   1e98a:	e081      	b.n	1ea90 <__ieee754_pow+0x144>
   1e98c:	2300      	movs	r3, #0
   1e98e:	469b      	mov	fp, r3
   1e990:	464b      	mov	r3, r9
   1e992:	2b00      	cmp	r3, #0
   1e994:	da00      	bge.n	1e998 <__ieee754_pow+0x4c>
   1e996:	e07f      	b.n	1ea98 <__ieee754_pow+0x14c>
   1e998:	2a00      	cmp	r2, #0
   1e99a:	d12c      	bne.n	1e9f6 <__ieee754_pow+0xaa>
   1e99c:	4b5d      	ldr	r3, [pc, #372]	; (1eb14 <__ieee754_pow+0x1c8>)
   1e99e:	429d      	cmp	r5, r3
   1e9a0:	d100      	bne.n	1e9a4 <__ieee754_pow+0x58>
   1e9a2:	e097      	b.n	1ead4 <__ieee754_pow+0x188>
   1e9a4:	4b5c      	ldr	r3, [pc, #368]	; (1eb18 <__ieee754_pow+0x1cc>)
   1e9a6:	429d      	cmp	r5, r3
   1e9a8:	d066      	beq.n	1ea78 <__ieee754_pow+0x12c>
   1e9aa:	2380      	movs	r3, #128	; 0x80
   1e9ac:	05db      	lsls	r3, r3, #23
   1e9ae:	459a      	cmp	sl, r3
   1e9b0:	d100      	bne.n	1e9b4 <__ieee754_pow+0x68>
   1e9b2:	e3b9      	b.n	1f128 <__ieee754_pow+0x7dc>
   1e9b4:	4b59      	ldr	r3, [pc, #356]	; (1eb1c <__ieee754_pow+0x1d0>)
   1e9b6:	459a      	cmp	sl, r3
   1e9b8:	d11d      	bne.n	1e9f6 <__ieee754_pow+0xaa>
   1e9ba:	464b      	mov	r3, r9
   1e9bc:	2b00      	cmp	r3, #0
   1e9be:	db1a      	blt.n	1e9f6 <__ieee754_pow+0xaa>
   1e9c0:	0038      	movs	r0, r7
   1e9c2:	0031      	movs	r1, r6
   1e9c4:	f000 ff10 	bl	1f7e8 <__ieee754_sqrt>
   1e9c8:	e008      	b.n	1e9dc <__ieee754_pow+0x90>
   1e9ca:	2800      	cmp	r0, #0
   1e9cc:	d00d      	beq.n	1e9ea <__ieee754_pow+0x9e>
   1e9ce:	4b54      	ldr	r3, [pc, #336]	; (1eb20 <__ieee754_pow+0x1d4>)
   1e9d0:	469c      	mov	ip, r3
   1e9d2:	4464      	add	r4, ip
   1e9d4:	4327      	orrs	r7, r4
   1e9d6:	d10a      	bne.n	1e9ee <__ieee754_pow+0xa2>
   1e9d8:	2000      	movs	r0, #0
   1e9da:	494f      	ldr	r1, [pc, #316]	; (1eb18 <__ieee754_pow+0x1cc>)
   1e9dc:	b011      	add	sp, #68	; 0x44
   1e9de:	bc3c      	pop	{r2, r3, r4, r5}
   1e9e0:	4690      	mov	r8, r2
   1e9e2:	4699      	mov	r9, r3
   1e9e4:	46a2      	mov	sl, r4
   1e9e6:	46ab      	mov	fp, r5
   1e9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e9ea:	42a5      	cmp	r5, r4
   1e9ec:	ddca      	ble.n	1e984 <__ieee754_pow+0x38>
   1e9ee:	484d      	ldr	r0, [pc, #308]	; (1eb24 <__ieee754_pow+0x1d8>)
   1e9f0:	f001 ffcc 	bl	2098c <nan>
   1e9f4:	e7f2      	b.n	1e9dc <__ieee754_pow+0x90>
   1e9f6:	0038      	movs	r0, r7
   1e9f8:	0031      	movs	r1, r6
   1e9fa:	f001 ffb7 	bl	2096c <fabs>
   1e9fe:	4643      	mov	r3, r8
   1ea00:	2b00      	cmp	r3, #0
   1ea02:	d11d      	bne.n	1ea40 <__ieee754_pow+0xf4>
   1ea04:	2c00      	cmp	r4, #0
   1ea06:	d004      	beq.n	1ea12 <__ieee754_pow+0xc6>
   1ea08:	4a43      	ldr	r2, [pc, #268]	; (1eb18 <__ieee754_pow+0x1cc>)
   1ea0a:	00b3      	lsls	r3, r6, #2
   1ea0c:	089b      	lsrs	r3, r3, #2
   1ea0e:	4293      	cmp	r3, r2
   1ea10:	d116      	bne.n	1ea40 <__ieee754_pow+0xf4>
   1ea12:	4653      	mov	r3, sl
   1ea14:	2b00      	cmp	r3, #0
   1ea16:	da00      	bge.n	1ea1a <__ieee754_pow+0xce>
   1ea18:	e3c5      	b.n	1f1a6 <__ieee754_pow+0x85a>
   1ea1a:	464b      	mov	r3, r9
   1ea1c:	2b00      	cmp	r3, #0
   1ea1e:	dadd      	bge.n	1e9dc <__ieee754_pow+0x90>
   1ea20:	4b3f      	ldr	r3, [pc, #252]	; (1eb20 <__ieee754_pow+0x1d4>)
   1ea22:	469c      	mov	ip, r3
   1ea24:	465b      	mov	r3, fp
   1ea26:	4464      	add	r4, ip
   1ea28:	431c      	orrs	r4, r3
   1ea2a:	d101      	bne.n	1ea30 <__ieee754_pow+0xe4>
   1ea2c:	f000 fc53 	bl	1f2d6 <__ieee754_pow+0x98a>
   1ea30:	465b      	mov	r3, fp
   1ea32:	2b01      	cmp	r3, #1
   1ea34:	d1d2      	bne.n	1e9dc <__ieee754_pow+0x90>
   1ea36:	2480      	movs	r4, #128	; 0x80
   1ea38:	0624      	lsls	r4, r4, #24
   1ea3a:	190b      	adds	r3, r1, r4
   1ea3c:	0019      	movs	r1, r3
   1ea3e:	e7cd      	b.n	1e9dc <__ieee754_pow+0x90>
   1ea40:	0ff3      	lsrs	r3, r6, #31
   1ea42:	3b01      	subs	r3, #1
   1ea44:	4698      	mov	r8, r3
   1ea46:	465b      	mov	r3, fp
   1ea48:	4642      	mov	r2, r8
   1ea4a:	4313      	orrs	r3, r2
   1ea4c:	d057      	beq.n	1eafe <__ieee754_pow+0x1b2>
   1ea4e:	4b36      	ldr	r3, [pc, #216]	; (1eb28 <__ieee754_pow+0x1dc>)
   1ea50:	429d      	cmp	r5, r3
   1ea52:	dd77      	ble.n	1eb44 <__ieee754_pow+0x1f8>
   1ea54:	4b35      	ldr	r3, [pc, #212]	; (1eb2c <__ieee754_pow+0x1e0>)
   1ea56:	429d      	cmp	r5, r3
   1ea58:	dc00      	bgt.n	1ea5c <__ieee754_pow+0x110>
   1ea5a:	e3b1      	b.n	1f1c0 <__ieee754_pow+0x874>
   1ea5c:	4b34      	ldr	r3, [pc, #208]	; (1eb30 <__ieee754_pow+0x1e4>)
   1ea5e:	429c      	cmp	r4, r3
   1ea60:	dc00      	bgt.n	1ea64 <__ieee754_pow+0x118>
   1ea62:	e3a8      	b.n	1f1b6 <__ieee754_pow+0x86a>
   1ea64:	4653      	mov	r3, sl
   1ea66:	2b00      	cmp	r3, #0
   1ea68:	dd43      	ble.n	1eaf2 <__ieee754_pow+0x1a6>
   1ea6a:	4a32      	ldr	r2, [pc, #200]	; (1eb34 <__ieee754_pow+0x1e8>)
   1ea6c:	4b32      	ldr	r3, [pc, #200]	; (1eb38 <__ieee754_pow+0x1ec>)
   1ea6e:	0010      	movs	r0, r2
   1ea70:	0019      	movs	r1, r3
   1ea72:	f004 f967 	bl	22d44 <__aeabi_dmul>
   1ea76:	e7b1      	b.n	1e9dc <__ieee754_pow+0x90>
   1ea78:	4653      	mov	r3, sl
   1ea7a:	0038      	movs	r0, r7
   1ea7c:	0031      	movs	r1, r6
   1ea7e:	2b00      	cmp	r3, #0
   1ea80:	daac      	bge.n	1e9dc <__ieee754_pow+0x90>
   1ea82:	003a      	movs	r2, r7
   1ea84:	0033      	movs	r3, r6
   1ea86:	2000      	movs	r0, #0
   1ea88:	4923      	ldr	r1, [pc, #140]	; (1eb18 <__ieee754_pow+0x1cc>)
   1ea8a:	f003 fd27 	bl	224dc <__aeabi_ddiv>
   1ea8e:	e7a5      	b.n	1e9dc <__ieee754_pow+0x90>
   1ea90:	2a00      	cmp	r2, #0
   1ea92:	d100      	bne.n	1ea96 <__ieee754_pow+0x14a>
   1ea94:	e77a      	b.n	1e98c <__ieee754_pow+0x40>
   1ea96:	e79a      	b.n	1e9ce <__ieee754_pow+0x82>
   1ea98:	4b28      	ldr	r3, [pc, #160]	; (1eb3c <__ieee754_pow+0x1f0>)
   1ea9a:	429d      	cmp	r5, r3
   1ea9c:	dc2c      	bgt.n	1eaf8 <__ieee754_pow+0x1ac>
   1ea9e:	4b24      	ldr	r3, [pc, #144]	; (1eb30 <__ieee754_pow+0x1e4>)
   1eaa0:	429d      	cmp	r5, r3
   1eaa2:	dc00      	bgt.n	1eaa6 <__ieee754_pow+0x15a>
   1eaa4:	e778      	b.n	1e998 <__ieee754_pow+0x4c>
   1eaa6:	4926      	ldr	r1, [pc, #152]	; (1eb40 <__ieee754_pow+0x1f4>)
   1eaa8:	152b      	asrs	r3, r5, #20
   1eaaa:	468c      	mov	ip, r1
   1eaac:	4463      	add	r3, ip
   1eaae:	2b14      	cmp	r3, #20
   1eab0:	dc01      	bgt.n	1eab6 <__ieee754_pow+0x16a>
   1eab2:	f000 fbf3 	bl	1f29c <__ieee754_pow+0x950>
   1eab6:	2134      	movs	r1, #52	; 0x34
   1eab8:	1acb      	subs	r3, r1, r3
   1eaba:	9900      	ldr	r1, [sp, #0]
   1eabc:	40d9      	lsrs	r1, r3
   1eabe:	0008      	movs	r0, r1
   1eac0:	4098      	lsls	r0, r3
   1eac2:	4282      	cmp	r2, r0
   1eac4:	d000      	beq.n	1eac8 <__ieee754_pow+0x17c>
   1eac6:	e767      	b.n	1e998 <__ieee754_pow+0x4c>
   1eac8:	2301      	movs	r3, #1
   1eaca:	4019      	ands	r1, r3
   1eacc:	3301      	adds	r3, #1
   1eace:	1a5b      	subs	r3, r3, r1
   1ead0:	469b      	mov	fp, r3
   1ead2:	e761      	b.n	1e998 <__ieee754_pow+0x4c>
   1ead4:	4b12      	ldr	r3, [pc, #72]	; (1eb20 <__ieee754_pow+0x1d4>)
   1ead6:	18e3      	adds	r3, r4, r3
   1ead8:	431f      	orrs	r7, r3
   1eada:	d100      	bne.n	1eade <__ieee754_pow+0x192>
   1eadc:	e77c      	b.n	1e9d8 <__ieee754_pow+0x8c>
   1eade:	4b14      	ldr	r3, [pc, #80]	; (1eb30 <__ieee754_pow+0x1e4>)
   1eae0:	429c      	cmp	r4, r3
   1eae2:	dc00      	bgt.n	1eae6 <__ieee754_pow+0x19a>
   1eae4:	e327      	b.n	1f136 <__ieee754_pow+0x7ea>
   1eae6:	9800      	ldr	r0, [sp, #0]
   1eae8:	9901      	ldr	r1, [sp, #4]
   1eaea:	4653      	mov	r3, sl
   1eaec:	2b00      	cmp	r3, #0
   1eaee:	db00      	blt.n	1eaf2 <__ieee754_pow+0x1a6>
   1eaf0:	e774      	b.n	1e9dc <__ieee754_pow+0x90>
   1eaf2:	2000      	movs	r0, #0
   1eaf4:	2100      	movs	r1, #0
   1eaf6:	e771      	b.n	1e9dc <__ieee754_pow+0x90>
   1eaf8:	2302      	movs	r3, #2
   1eafa:	469b      	mov	fp, r3
   1eafc:	e74c      	b.n	1e998 <__ieee754_pow+0x4c>
   1eafe:	003a      	movs	r2, r7
   1eb00:	0033      	movs	r3, r6
   1eb02:	0038      	movs	r0, r7
   1eb04:	0031      	movs	r1, r6
   1eb06:	f004 fb9d 	bl	23244 <__aeabi_dsub>
   1eb0a:	0002      	movs	r2, r0
   1eb0c:	000b      	movs	r3, r1
   1eb0e:	f003 fce5 	bl	224dc <__aeabi_ddiv>
   1eb12:	e763      	b.n	1e9dc <__ieee754_pow+0x90>
   1eb14:	7ff00000 	.word	0x7ff00000
   1eb18:	3ff00000 	.word	0x3ff00000
   1eb1c:	3fe00000 	.word	0x3fe00000
   1eb20:	c0100000 	.word	0xc0100000
   1eb24:	00029e08 	.word	0x00029e08
   1eb28:	41e00000 	.word	0x41e00000
   1eb2c:	43f00000 	.word	0x43f00000
   1eb30:	3fefffff 	.word	0x3fefffff
   1eb34:	8800759c 	.word	0x8800759c
   1eb38:	7e37e43c 	.word	0x7e37e43c
   1eb3c:	433fffff 	.word	0x433fffff
   1eb40:	fffffc01 	.word	0xfffffc01
   1eb44:	4be9      	ldr	r3, [pc, #932]	; (1eeec <__ieee754_pow+0x5a0>)
   1eb46:	2200      	movs	r2, #0
   1eb48:	429c      	cmp	r4, r3
   1eb4a:	dc06      	bgt.n	1eb5a <__ieee754_pow+0x20e>
   1eb4c:	2200      	movs	r2, #0
   1eb4e:	4be8      	ldr	r3, [pc, #928]	; (1eef0 <__ieee754_pow+0x5a4>)
   1eb50:	f004 f8f8 	bl	22d44 <__aeabi_dmul>
   1eb54:	2235      	movs	r2, #53	; 0x35
   1eb56:	000c      	movs	r4, r1
   1eb58:	4252      	negs	r2, r2
   1eb5a:	4de6      	ldr	r5, [pc, #920]	; (1eef4 <__ieee754_pow+0x5a8>)
   1eb5c:	1523      	asrs	r3, r4, #20
   1eb5e:	46ac      	mov	ip, r5
   1eb60:	4463      	add	r3, ip
   1eb62:	4699      	mov	r9, r3
   1eb64:	0324      	lsls	r4, r4, #12
   1eb66:	4de4      	ldr	r5, [pc, #912]	; (1eef8 <__ieee754_pow+0x5ac>)
   1eb68:	4be4      	ldr	r3, [pc, #912]	; (1eefc <__ieee754_pow+0x5b0>)
   1eb6a:	0b24      	lsrs	r4, r4, #12
   1eb6c:	4491      	add	r9, r2
   1eb6e:	4325      	orrs	r5, r4
   1eb70:	429c      	cmp	r4, r3
   1eb72:	dd09      	ble.n	1eb88 <__ieee754_pow+0x23c>
   1eb74:	4be2      	ldr	r3, [pc, #904]	; (1ef00 <__ieee754_pow+0x5b4>)
   1eb76:	429c      	cmp	r4, r3
   1eb78:	dc00      	bgt.n	1eb7c <__ieee754_pow+0x230>
   1eb7a:	e3b6      	b.n	1f2ea <__ieee754_pow+0x99e>
   1eb7c:	2301      	movs	r3, #1
   1eb7e:	469c      	mov	ip, r3
   1eb80:	4be0      	ldr	r3, [pc, #896]	; (1ef04 <__ieee754_pow+0x5b8>)
   1eb82:	44e1      	add	r9, ip
   1eb84:	469c      	mov	ip, r3
   1eb86:	4465      	add	r5, ip
   1eb88:	2300      	movs	r3, #0
   1eb8a:	2400      	movs	r4, #0
   1eb8c:	2200      	movs	r2, #0
   1eb8e:	9308      	str	r3, [sp, #32]
   1eb90:	9409      	str	r4, [sp, #36]	; 0x24
   1eb92:	930c      	str	r3, [sp, #48]	; 0x30
   1eb94:	940d      	str	r4, [sp, #52]	; 0x34
   1eb96:	2400      	movs	r4, #0
   1eb98:	4bd7      	ldr	r3, [pc, #860]	; (1eef8 <__ieee754_pow+0x5ac>)
   1eb9a:	9206      	str	r2, [sp, #24]
   1eb9c:	9307      	str	r3, [sp, #28]
   1eb9e:	9a06      	ldr	r2, [sp, #24]
   1eba0:	9b07      	ldr	r3, [sp, #28]
   1eba2:	0029      	movs	r1, r5
   1eba4:	900a      	str	r0, [sp, #40]	; 0x28
   1eba6:	910b      	str	r1, [sp, #44]	; 0x2c
   1eba8:	f004 fb4c 	bl	23244 <__aeabi_dsub>
   1ebac:	9a06      	ldr	r2, [sp, #24]
   1ebae:	9b07      	ldr	r3, [sp, #28]
   1ebb0:	0006      	movs	r6, r0
   1ebb2:	000f      	movs	r7, r1
   1ebb4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ebb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ebb8:	f003 f980 	bl	21ebc <__aeabi_dadd>
   1ebbc:	0002      	movs	r2, r0
   1ebbe:	000b      	movs	r3, r1
   1ebc0:	2000      	movs	r0, #0
   1ebc2:	49cd      	ldr	r1, [pc, #820]	; (1eef8 <__ieee754_pow+0x5ac>)
   1ebc4:	f003 fc8a 	bl	224dc <__aeabi_ddiv>
   1ebc8:	000a      	movs	r2, r1
   1ebca:	0001      	movs	r1, r0
   1ebcc:	0013      	movs	r3, r2
   1ebce:	910e      	str	r1, [sp, #56]	; 0x38
   1ebd0:	920f      	str	r2, [sp, #60]	; 0x3c
   1ebd2:	0002      	movs	r2, r0
   1ebd4:	0039      	movs	r1, r7
   1ebd6:	0030      	movs	r0, r6
   1ebd8:	f004 f8b4 	bl	22d44 <__aeabi_dmul>
   1ebdc:	000a      	movs	r2, r1
   1ebde:	0001      	movs	r1, r0
   1ebe0:	2080      	movs	r0, #128	; 0x80
   1ebe2:	9104      	str	r1, [sp, #16]
   1ebe4:	9205      	str	r2, [sp, #20]
   1ebe6:	0013      	movs	r3, r2
   1ebe8:	2200      	movs	r2, #0
   1ebea:	1069      	asrs	r1, r5, #1
   1ebec:	2580      	movs	r5, #128	; 0x80
   1ebee:	0300      	lsls	r0, r0, #12
   1ebf0:	4684      	mov	ip, r0
   1ebf2:	9202      	str	r2, [sp, #8]
   1ebf4:	9303      	str	r3, [sp, #12]
   1ebf6:	2200      	movs	r2, #0
   1ebf8:	05ad      	lsls	r5, r5, #22
   1ebfa:	430d      	orrs	r5, r1
   1ebfc:	4465      	add	r5, ip
   1ebfe:	192b      	adds	r3, r5, r4
   1ec00:	9802      	ldr	r0, [sp, #8]
   1ec02:	9903      	ldr	r1, [sp, #12]
   1ec04:	0014      	movs	r4, r2
   1ec06:	001d      	movs	r5, r3
   1ec08:	f004 f89c 	bl	22d44 <__aeabi_dmul>
   1ec0c:	0002      	movs	r2, r0
   1ec0e:	000b      	movs	r3, r1
   1ec10:	0030      	movs	r0, r6
   1ec12:	0039      	movs	r1, r7
   1ec14:	f004 fb16 	bl	23244 <__aeabi_dsub>
   1ec18:	9a06      	ldr	r2, [sp, #24]
   1ec1a:	9b07      	ldr	r3, [sp, #28]
   1ec1c:	0006      	movs	r6, r0
   1ec1e:	000f      	movs	r7, r1
   1ec20:	0020      	movs	r0, r4
   1ec22:	0029      	movs	r1, r5
   1ec24:	f004 fb0e 	bl	23244 <__aeabi_dsub>
   1ec28:	0002      	movs	r2, r0
   1ec2a:	000b      	movs	r3, r1
   1ec2c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ec2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ec30:	f004 fb08 	bl	23244 <__aeabi_dsub>
   1ec34:	9a02      	ldr	r2, [sp, #8]
   1ec36:	9b03      	ldr	r3, [sp, #12]
   1ec38:	f004 f884 	bl	22d44 <__aeabi_dmul>
   1ec3c:	0002      	movs	r2, r0
   1ec3e:	000b      	movs	r3, r1
   1ec40:	0030      	movs	r0, r6
   1ec42:	0039      	movs	r1, r7
   1ec44:	f004 fafe 	bl	23244 <__aeabi_dsub>
   1ec48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ec4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ec4c:	f004 f87a 	bl	22d44 <__aeabi_dmul>
   1ec50:	9d04      	ldr	r5, [sp, #16]
   1ec52:	9e05      	ldr	r6, [sp, #20]
   1ec54:	9006      	str	r0, [sp, #24]
   1ec56:	9107      	str	r1, [sp, #28]
   1ec58:	002a      	movs	r2, r5
   1ec5a:	0033      	movs	r3, r6
   1ec5c:	0028      	movs	r0, r5
   1ec5e:	0031      	movs	r1, r6
   1ec60:	f004 f870 	bl	22d44 <__aeabi_dmul>
   1ec64:	0006      	movs	r6, r0
   1ec66:	000f      	movs	r7, r1
   1ec68:	4aa7      	ldr	r2, [pc, #668]	; (1ef08 <__ieee754_pow+0x5bc>)
   1ec6a:	4ba8      	ldr	r3, [pc, #672]	; (1ef0c <__ieee754_pow+0x5c0>)
   1ec6c:	f004 f86a 	bl	22d44 <__aeabi_dmul>
   1ec70:	4aa7      	ldr	r2, [pc, #668]	; (1ef10 <__ieee754_pow+0x5c4>)
   1ec72:	4ba8      	ldr	r3, [pc, #672]	; (1ef14 <__ieee754_pow+0x5c8>)
   1ec74:	f003 f922 	bl	21ebc <__aeabi_dadd>
   1ec78:	0032      	movs	r2, r6
   1ec7a:	003b      	movs	r3, r7
   1ec7c:	f004 f862 	bl	22d44 <__aeabi_dmul>
   1ec80:	4aa5      	ldr	r2, [pc, #660]	; (1ef18 <__ieee754_pow+0x5cc>)
   1ec82:	4ba6      	ldr	r3, [pc, #664]	; (1ef1c <__ieee754_pow+0x5d0>)
   1ec84:	f003 f91a 	bl	21ebc <__aeabi_dadd>
   1ec88:	0032      	movs	r2, r6
   1ec8a:	003b      	movs	r3, r7
   1ec8c:	f004 f85a 	bl	22d44 <__aeabi_dmul>
   1ec90:	4aa3      	ldr	r2, [pc, #652]	; (1ef20 <__ieee754_pow+0x5d4>)
   1ec92:	4ba4      	ldr	r3, [pc, #656]	; (1ef24 <__ieee754_pow+0x5d8>)
   1ec94:	f003 f912 	bl	21ebc <__aeabi_dadd>
   1ec98:	0032      	movs	r2, r6
   1ec9a:	003b      	movs	r3, r7
   1ec9c:	f004 f852 	bl	22d44 <__aeabi_dmul>
   1eca0:	4aa1      	ldr	r2, [pc, #644]	; (1ef28 <__ieee754_pow+0x5dc>)
   1eca2:	4ba2      	ldr	r3, [pc, #648]	; (1ef2c <__ieee754_pow+0x5e0>)
   1eca4:	f003 f90a 	bl	21ebc <__aeabi_dadd>
   1eca8:	0032      	movs	r2, r6
   1ecaa:	003b      	movs	r3, r7
   1ecac:	f004 f84a 	bl	22d44 <__aeabi_dmul>
   1ecb0:	4a9f      	ldr	r2, [pc, #636]	; (1ef30 <__ieee754_pow+0x5e4>)
   1ecb2:	4ba0      	ldr	r3, [pc, #640]	; (1ef34 <__ieee754_pow+0x5e8>)
   1ecb4:	f003 f902 	bl	21ebc <__aeabi_dadd>
   1ecb8:	0032      	movs	r2, r6
   1ecba:	0004      	movs	r4, r0
   1ecbc:	000d      	movs	r5, r1
   1ecbe:	003b      	movs	r3, r7
   1ecc0:	0030      	movs	r0, r6
   1ecc2:	0039      	movs	r1, r7
   1ecc4:	f004 f83e 	bl	22d44 <__aeabi_dmul>
   1ecc8:	0002      	movs	r2, r0
   1ecca:	000b      	movs	r3, r1
   1eccc:	0020      	movs	r0, r4
   1ecce:	0029      	movs	r1, r5
   1ecd0:	f004 f838 	bl	22d44 <__aeabi_dmul>
   1ecd4:	9e02      	ldr	r6, [sp, #8]
   1ecd6:	9f03      	ldr	r7, [sp, #12]
   1ecd8:	0004      	movs	r4, r0
   1ecda:	000d      	movs	r5, r1
   1ecdc:	9804      	ldr	r0, [sp, #16]
   1ecde:	9905      	ldr	r1, [sp, #20]
   1ece0:	0032      	movs	r2, r6
   1ece2:	003b      	movs	r3, r7
   1ece4:	f003 f8ea 	bl	21ebc <__aeabi_dadd>
   1ece8:	9a06      	ldr	r2, [sp, #24]
   1ecea:	9b07      	ldr	r3, [sp, #28]
   1ecec:	f004 f82a 	bl	22d44 <__aeabi_dmul>
   1ecf0:	0022      	movs	r2, r4
   1ecf2:	002b      	movs	r3, r5
   1ecf4:	f003 f8e2 	bl	21ebc <__aeabi_dadd>
   1ecf8:	0032      	movs	r2, r6
   1ecfa:	900a      	str	r0, [sp, #40]	; 0x28
   1ecfc:	910b      	str	r1, [sp, #44]	; 0x2c
   1ecfe:	003b      	movs	r3, r7
   1ed00:	0030      	movs	r0, r6
   1ed02:	0039      	movs	r1, r7
   1ed04:	9602      	str	r6, [sp, #8]
   1ed06:	9703      	str	r7, [sp, #12]
   1ed08:	f004 f81c 	bl	22d44 <__aeabi_dmul>
   1ed0c:	2200      	movs	r2, #0
   1ed0e:	4b8a      	ldr	r3, [pc, #552]	; (1ef38 <__ieee754_pow+0x5ec>)
   1ed10:	0004      	movs	r4, r0
   1ed12:	000d      	movs	r5, r1
   1ed14:	f003 f8d2 	bl	21ebc <__aeabi_dadd>
   1ed18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ed1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ed1c:	f003 f8ce 	bl	21ebc <__aeabi_dadd>
   1ed20:	2600      	movs	r6, #0
   1ed22:	000f      	movs	r7, r1
   1ed24:	0032      	movs	r2, r6
   1ed26:	000b      	movs	r3, r1
   1ed28:	9802      	ldr	r0, [sp, #8]
   1ed2a:	9903      	ldr	r1, [sp, #12]
   1ed2c:	f004 f80a 	bl	22d44 <__aeabi_dmul>
   1ed30:	2200      	movs	r2, #0
   1ed32:	9002      	str	r0, [sp, #8]
   1ed34:	9103      	str	r1, [sp, #12]
   1ed36:	4b80      	ldr	r3, [pc, #512]	; (1ef38 <__ieee754_pow+0x5ec>)
   1ed38:	0030      	movs	r0, r6
   1ed3a:	0039      	movs	r1, r7
   1ed3c:	f004 fa82 	bl	23244 <__aeabi_dsub>
   1ed40:	0022      	movs	r2, r4
   1ed42:	002b      	movs	r3, r5
   1ed44:	f004 fa7e 	bl	23244 <__aeabi_dsub>
   1ed48:	0002      	movs	r2, r0
   1ed4a:	000b      	movs	r3, r1
   1ed4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ed4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ed50:	f004 fa78 	bl	23244 <__aeabi_dsub>
   1ed54:	9a04      	ldr	r2, [sp, #16]
   1ed56:	9b05      	ldr	r3, [sp, #20]
   1ed58:	f003 fff4 	bl	22d44 <__aeabi_dmul>
   1ed5c:	0032      	movs	r2, r6
   1ed5e:	0004      	movs	r4, r0
   1ed60:	000d      	movs	r5, r1
   1ed62:	9806      	ldr	r0, [sp, #24]
   1ed64:	9907      	ldr	r1, [sp, #28]
   1ed66:	003b      	movs	r3, r7
   1ed68:	f003 ffec 	bl	22d44 <__aeabi_dmul>
   1ed6c:	0002      	movs	r2, r0
   1ed6e:	000b      	movs	r3, r1
   1ed70:	0020      	movs	r0, r4
   1ed72:	0029      	movs	r1, r5
   1ed74:	f003 f8a2 	bl	21ebc <__aeabi_dadd>
   1ed78:	0004      	movs	r4, r0
   1ed7a:	000d      	movs	r5, r1
   1ed7c:	0002      	movs	r2, r0
   1ed7e:	000b      	movs	r3, r1
   1ed80:	9802      	ldr	r0, [sp, #8]
   1ed82:	9903      	ldr	r1, [sp, #12]
   1ed84:	f003 f89a 	bl	21ebc <__aeabi_dadd>
   1ed88:	2600      	movs	r6, #0
   1ed8a:	22e0      	movs	r2, #224	; 0xe0
   1ed8c:	4b6b      	ldr	r3, [pc, #428]	; (1ef3c <__ieee754_pow+0x5f0>)
   1ed8e:	0612      	lsls	r2, r2, #24
   1ed90:	0030      	movs	r0, r6
   1ed92:	000f      	movs	r7, r1
   1ed94:	f003 ffd6 	bl	22d44 <__aeabi_dmul>
   1ed98:	9a02      	ldr	r2, [sp, #8]
   1ed9a:	9b03      	ldr	r3, [sp, #12]
   1ed9c:	9004      	str	r0, [sp, #16]
   1ed9e:	9105      	str	r1, [sp, #20]
   1eda0:	0030      	movs	r0, r6
   1eda2:	0039      	movs	r1, r7
   1eda4:	f004 fa4e 	bl	23244 <__aeabi_dsub>
   1eda8:	0002      	movs	r2, r0
   1edaa:	000b      	movs	r3, r1
   1edac:	0020      	movs	r0, r4
   1edae:	0029      	movs	r1, r5
   1edb0:	f004 fa48 	bl	23244 <__aeabi_dsub>
   1edb4:	4a62      	ldr	r2, [pc, #392]	; (1ef40 <__ieee754_pow+0x5f4>)
   1edb6:	4b61      	ldr	r3, [pc, #388]	; (1ef3c <__ieee754_pow+0x5f0>)
   1edb8:	f003 ffc4 	bl	22d44 <__aeabi_dmul>
   1edbc:	4a61      	ldr	r2, [pc, #388]	; (1ef44 <__ieee754_pow+0x5f8>)
   1edbe:	0004      	movs	r4, r0
   1edc0:	000d      	movs	r5, r1
   1edc2:	4b61      	ldr	r3, [pc, #388]	; (1ef48 <__ieee754_pow+0x5fc>)
   1edc4:	0030      	movs	r0, r6
   1edc6:	0039      	movs	r1, r7
   1edc8:	f003 ffbc 	bl	22d44 <__aeabi_dmul>
   1edcc:	0002      	movs	r2, r0
   1edce:	000b      	movs	r3, r1
   1edd0:	0020      	movs	r0, r4
   1edd2:	0029      	movs	r1, r5
   1edd4:	f003 f872 	bl	21ebc <__aeabi_dadd>
   1edd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1edda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1eddc:	f003 f86e 	bl	21ebc <__aeabi_dadd>
   1ede0:	0006      	movs	r6, r0
   1ede2:	4648      	mov	r0, r9
   1ede4:	000f      	movs	r7, r1
   1ede6:	f004 fd97 	bl	23918 <__aeabi_i2d>
   1edea:	0004      	movs	r4, r0
   1edec:	000d      	movs	r5, r1
   1edee:	9804      	ldr	r0, [sp, #16]
   1edf0:	9905      	ldr	r1, [sp, #20]
   1edf2:	0032      	movs	r2, r6
   1edf4:	003b      	movs	r3, r7
   1edf6:	f003 f861 	bl	21ebc <__aeabi_dadd>
   1edfa:	9a08      	ldr	r2, [sp, #32]
   1edfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1edfe:	f003 f85d 	bl	21ebc <__aeabi_dadd>
   1ee02:	0022      	movs	r2, r4
   1ee04:	002b      	movs	r3, r5
   1ee06:	f003 f859 	bl	21ebc <__aeabi_dadd>
   1ee0a:	2000      	movs	r0, #0
   1ee0c:	0022      	movs	r2, r4
   1ee0e:	002b      	movs	r3, r5
   1ee10:	9002      	str	r0, [sp, #8]
   1ee12:	9103      	str	r1, [sp, #12]
   1ee14:	f004 fa16 	bl	23244 <__aeabi_dsub>
   1ee18:	9a08      	ldr	r2, [sp, #32]
   1ee1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ee1c:	f004 fa12 	bl	23244 <__aeabi_dsub>
   1ee20:	9a04      	ldr	r2, [sp, #16]
   1ee22:	9b05      	ldr	r3, [sp, #20]
   1ee24:	f004 fa0e 	bl	23244 <__aeabi_dsub>
   1ee28:	0002      	movs	r2, r0
   1ee2a:	000b      	movs	r3, r1
   1ee2c:	0030      	movs	r0, r6
   1ee2e:	0039      	movs	r1, r7
   1ee30:	f004 fa08 	bl	23244 <__aeabi_dsub>
   1ee34:	9004      	str	r0, [sp, #16]
   1ee36:	9105      	str	r1, [sp, #20]
   1ee38:	465b      	mov	r3, fp
   1ee3a:	4642      	mov	r2, r8
   1ee3c:	3b01      	subs	r3, #1
   1ee3e:	4313      	orrs	r3, r2
   1ee40:	d100      	bne.n	1ee44 <__ieee754_pow+0x4f8>
   1ee42:	e1ab      	b.n	1f19c <__ieee754_pow+0x850>
   1ee44:	2300      	movs	r3, #0
   1ee46:	4c2c      	ldr	r4, [pc, #176]	; (1eef8 <__ieee754_pow+0x5ac>)
   1ee48:	9306      	str	r3, [sp, #24]
   1ee4a:	9407      	str	r4, [sp, #28]
   1ee4c:	9800      	ldr	r0, [sp, #0]
   1ee4e:	9901      	ldr	r1, [sp, #4]
   1ee50:	2600      	movs	r6, #0
   1ee52:	000b      	movs	r3, r1
   1ee54:	0032      	movs	r2, r6
   1ee56:	000f      	movs	r7, r1
   1ee58:	f004 f9f4 	bl	23244 <__aeabi_dsub>
   1ee5c:	9a02      	ldr	r2, [sp, #8]
   1ee5e:	9b03      	ldr	r3, [sp, #12]
   1ee60:	f003 ff70 	bl	22d44 <__aeabi_dmul>
   1ee64:	9a00      	ldr	r2, [sp, #0]
   1ee66:	9b01      	ldr	r3, [sp, #4]
   1ee68:	0004      	movs	r4, r0
   1ee6a:	000d      	movs	r5, r1
   1ee6c:	9804      	ldr	r0, [sp, #16]
   1ee6e:	9905      	ldr	r1, [sp, #20]
   1ee70:	f003 ff68 	bl	22d44 <__aeabi_dmul>
   1ee74:	0002      	movs	r2, r0
   1ee76:	000b      	movs	r3, r1
   1ee78:	0020      	movs	r0, r4
   1ee7a:	0029      	movs	r1, r5
   1ee7c:	f003 f81e 	bl	21ebc <__aeabi_dadd>
   1ee80:	0004      	movs	r4, r0
   1ee82:	000d      	movs	r5, r1
   1ee84:	9802      	ldr	r0, [sp, #8]
   1ee86:	9903      	ldr	r1, [sp, #12]
   1ee88:	0032      	movs	r2, r6
   1ee8a:	003b      	movs	r3, r7
   1ee8c:	9400      	str	r4, [sp, #0]
   1ee8e:	9501      	str	r5, [sp, #4]
   1ee90:	f003 ff58 	bl	22d44 <__aeabi_dmul>
   1ee94:	0002      	movs	r2, r0
   1ee96:	000b      	movs	r3, r1
   1ee98:	0006      	movs	r6, r0
   1ee9a:	000f      	movs	r7, r1
   1ee9c:	0020      	movs	r0, r4
   1ee9e:	0029      	movs	r1, r5
   1eea0:	f003 f80c 	bl	21ebc <__aeabi_dadd>
   1eea4:	4b29      	ldr	r3, [pc, #164]	; (1ef4c <__ieee754_pow+0x600>)
   1eea6:	0004      	movs	r4, r0
   1eea8:	000d      	movs	r5, r1
   1eeaa:	0002      	movs	r2, r0
   1eeac:	468b      	mov	fp, r1
   1eeae:	4299      	cmp	r1, r3
   1eeb0:	dc00      	bgt.n	1eeb4 <__ieee754_pow+0x568>
   1eeb2:	e14f      	b.n	1f154 <__ieee754_pow+0x808>
   1eeb4:	4b26      	ldr	r3, [pc, #152]	; (1ef50 <__ieee754_pow+0x604>)
   1eeb6:	18cb      	adds	r3, r1, r3
   1eeb8:	4303      	orrs	r3, r0
   1eeba:	d000      	beq.n	1eebe <__ieee754_pow+0x572>
   1eebc:	e1e2      	b.n	1f284 <__ieee754_pow+0x938>
   1eebe:	9800      	ldr	r0, [sp, #0]
   1eec0:	9901      	ldr	r1, [sp, #4]
   1eec2:	4a24      	ldr	r2, [pc, #144]	; (1ef54 <__ieee754_pow+0x608>)
   1eec4:	4b24      	ldr	r3, [pc, #144]	; (1ef58 <__ieee754_pow+0x60c>)
   1eec6:	f002 fff9 	bl	21ebc <__aeabi_dadd>
   1eeca:	0032      	movs	r2, r6
   1eecc:	9002      	str	r0, [sp, #8]
   1eece:	9103      	str	r1, [sp, #12]
   1eed0:	003b      	movs	r3, r7
   1eed2:	0020      	movs	r0, r4
   1eed4:	0029      	movs	r1, r5
   1eed6:	f004 f9b5 	bl	23244 <__aeabi_dsub>
   1eeda:	0002      	movs	r2, r0
   1eedc:	000b      	movs	r3, r1
   1eede:	9802      	ldr	r0, [sp, #8]
   1eee0:	9903      	ldr	r1, [sp, #12]
   1eee2:	f002 f80b 	bl	20efc <__aeabi_dcmpgt>
   1eee6:	46aa      	mov	sl, r5
   1eee8:	e038      	b.n	1ef5c <__ieee754_pow+0x610>
   1eeea:	46c0      	nop			; (mov r8, r8)
   1eeec:	000fffff 	.word	0x000fffff
   1eef0:	43400000 	.word	0x43400000
   1eef4:	fffffc01 	.word	0xfffffc01
   1eef8:	3ff00000 	.word	0x3ff00000
   1eefc:	0003988e 	.word	0x0003988e
   1ef00:	000bb679 	.word	0x000bb679
   1ef04:	fff00000 	.word	0xfff00000
   1ef08:	4a454eef 	.word	0x4a454eef
   1ef0c:	3fca7e28 	.word	0x3fca7e28
   1ef10:	93c9db65 	.word	0x93c9db65
   1ef14:	3fcd864a 	.word	0x3fcd864a
   1ef18:	a91d4101 	.word	0xa91d4101
   1ef1c:	3fd17460 	.word	0x3fd17460
   1ef20:	518f264d 	.word	0x518f264d
   1ef24:	3fd55555 	.word	0x3fd55555
   1ef28:	db6fabff 	.word	0xdb6fabff
   1ef2c:	3fdb6db6 	.word	0x3fdb6db6
   1ef30:	33333303 	.word	0x33333303
   1ef34:	3fe33333 	.word	0x3fe33333
   1ef38:	40080000 	.word	0x40080000
   1ef3c:	3feec709 	.word	0x3feec709
   1ef40:	dc3a03fd 	.word	0xdc3a03fd
   1ef44:	145b01f5 	.word	0x145b01f5
   1ef48:	be3e2fe0 	.word	0xbe3e2fe0
   1ef4c:	408fffff 	.word	0x408fffff
   1ef50:	bf700000 	.word	0xbf700000
   1ef54:	652b82fe 	.word	0x652b82fe
   1ef58:	3c971547 	.word	0x3c971547
   1ef5c:	2800      	cmp	r0, #0
   1ef5e:	d000      	beq.n	1ef62 <__ieee754_pow+0x616>
   1ef60:	e190      	b.n	1f284 <__ieee754_pow+0x938>
   1ef62:	4aec      	ldr	r2, [pc, #944]	; (1f314 <__ieee754_pow+0x9c8>)
   1ef64:	4653      	mov	r3, sl
   1ef66:	4694      	mov	ip, r2
   1ef68:	2280      	movs	r2, #128	; 0x80
   1ef6a:	0352      	lsls	r2, r2, #13
   1ef6c:	0011      	movs	r1, r2
   1ef6e:	151b      	asrs	r3, r3, #20
   1ef70:	4463      	add	r3, ip
   1ef72:	4119      	asrs	r1, r3
   1ef74:	000b      	movs	r3, r1
   1ef76:	4690      	mov	r8, r2
   1ef78:	4ae7      	ldr	r2, [pc, #924]	; (1f318 <__ieee754_pow+0x9cc>)
   1ef7a:	445b      	add	r3, fp
   1ef7c:	4694      	mov	ip, r2
   1ef7e:	005c      	lsls	r4, r3, #1
   1ef80:	0d64      	lsrs	r4, r4, #21
   1ef82:	4de6      	ldr	r5, [pc, #920]	; (1f31c <__ieee754_pow+0x9d0>)
   1ef84:	4464      	add	r4, ip
   1ef86:	4125      	asrs	r5, r4
   1ef88:	001a      	movs	r2, r3
   1ef8a:	43aa      	bics	r2, r5
   1ef8c:	0011      	movs	r1, r2
   1ef8e:	4642      	mov	r2, r8
   1ef90:	031b      	lsls	r3, r3, #12
   1ef92:	0b1b      	lsrs	r3, r3, #12
   1ef94:	4313      	orrs	r3, r2
   1ef96:	2214      	movs	r2, #20
   1ef98:	1b14      	subs	r4, r2, r4
   1ef9a:	4123      	asrs	r3, r4
   1ef9c:	4699      	mov	r9, r3
   1ef9e:	465b      	mov	r3, fp
   1efa0:	2000      	movs	r0, #0
   1efa2:	2b00      	cmp	r3, #0
   1efa4:	da00      	bge.n	1efa8 <__ieee754_pow+0x65c>
   1efa6:	e1b0      	b.n	1f30a <__ieee754_pow+0x9be>
   1efa8:	0002      	movs	r2, r0
   1efaa:	000b      	movs	r3, r1
   1efac:	0030      	movs	r0, r6
   1efae:	0039      	movs	r1, r7
   1efb0:	f004 f948 	bl	23244 <__aeabi_dsub>
   1efb4:	000b      	movs	r3, r1
   1efb6:	0002      	movs	r2, r0
   1efb8:	0006      	movs	r6, r0
   1efba:	000f      	movs	r7, r1
   1efbc:	9800      	ldr	r0, [sp, #0]
   1efbe:	9901      	ldr	r1, [sp, #4]
   1efc0:	f002 ff7c 	bl	21ebc <__aeabi_dadd>
   1efc4:	464b      	mov	r3, r9
   1efc6:	051b      	lsls	r3, r3, #20
   1efc8:	000d      	movs	r5, r1
   1efca:	4698      	mov	r8, r3
   1efcc:	2400      	movs	r4, #0
   1efce:	2200      	movs	r2, #0
   1efd0:	4bd3      	ldr	r3, [pc, #844]	; (1f320 <__ieee754_pow+0x9d4>)
   1efd2:	0020      	movs	r0, r4
   1efd4:	0029      	movs	r1, r5
   1efd6:	f003 feb5 	bl	22d44 <__aeabi_dmul>
   1efda:	0032      	movs	r2, r6
   1efdc:	9002      	str	r0, [sp, #8]
   1efde:	9103      	str	r1, [sp, #12]
   1efe0:	003b      	movs	r3, r7
   1efe2:	0020      	movs	r0, r4
   1efe4:	0029      	movs	r1, r5
   1efe6:	f004 f92d 	bl	23244 <__aeabi_dsub>
   1efea:	0002      	movs	r2, r0
   1efec:	000b      	movs	r3, r1
   1efee:	9800      	ldr	r0, [sp, #0]
   1eff0:	9901      	ldr	r1, [sp, #4]
   1eff2:	f004 f927 	bl	23244 <__aeabi_dsub>
   1eff6:	4acb      	ldr	r2, [pc, #812]	; (1f324 <__ieee754_pow+0x9d8>)
   1eff8:	4bcb      	ldr	r3, [pc, #812]	; (1f328 <__ieee754_pow+0x9dc>)
   1effa:	f003 fea3 	bl	22d44 <__aeabi_dmul>
   1effe:	4acb      	ldr	r2, [pc, #812]	; (1f32c <__ieee754_pow+0x9e0>)
   1f000:	0006      	movs	r6, r0
   1f002:	000f      	movs	r7, r1
   1f004:	4bca      	ldr	r3, [pc, #808]	; (1f330 <__ieee754_pow+0x9e4>)
   1f006:	0020      	movs	r0, r4
   1f008:	0029      	movs	r1, r5
   1f00a:	f003 fe9b 	bl	22d44 <__aeabi_dmul>
   1f00e:	0002      	movs	r2, r0
   1f010:	000b      	movs	r3, r1
   1f012:	0030      	movs	r0, r6
   1f014:	0039      	movs	r1, r7
   1f016:	f002 ff51 	bl	21ebc <__aeabi_dadd>
   1f01a:	0004      	movs	r4, r0
   1f01c:	000d      	movs	r5, r1
   1f01e:	0002      	movs	r2, r0
   1f020:	000b      	movs	r3, r1
   1f022:	9802      	ldr	r0, [sp, #8]
   1f024:	9903      	ldr	r1, [sp, #12]
   1f026:	f002 ff49 	bl	21ebc <__aeabi_dadd>
   1f02a:	9a02      	ldr	r2, [sp, #8]
   1f02c:	9b03      	ldr	r3, [sp, #12]
   1f02e:	0006      	movs	r6, r0
   1f030:	000f      	movs	r7, r1
   1f032:	f004 f907 	bl	23244 <__aeabi_dsub>
   1f036:	0002      	movs	r2, r0
   1f038:	000b      	movs	r3, r1
   1f03a:	0020      	movs	r0, r4
   1f03c:	0029      	movs	r1, r5
   1f03e:	f004 f901 	bl	23244 <__aeabi_dsub>
   1f042:	0032      	movs	r2, r6
   1f044:	9000      	str	r0, [sp, #0]
   1f046:	9101      	str	r1, [sp, #4]
   1f048:	003b      	movs	r3, r7
   1f04a:	0030      	movs	r0, r6
   1f04c:	0039      	movs	r1, r7
   1f04e:	f003 fe79 	bl	22d44 <__aeabi_dmul>
   1f052:	0004      	movs	r4, r0
   1f054:	000d      	movs	r5, r1
   1f056:	4ab7      	ldr	r2, [pc, #732]	; (1f334 <__ieee754_pow+0x9e8>)
   1f058:	4bb7      	ldr	r3, [pc, #732]	; (1f338 <__ieee754_pow+0x9ec>)
   1f05a:	f003 fe73 	bl	22d44 <__aeabi_dmul>
   1f05e:	4ab7      	ldr	r2, [pc, #732]	; (1f33c <__ieee754_pow+0x9f0>)
   1f060:	4bb7      	ldr	r3, [pc, #732]	; (1f340 <__ieee754_pow+0x9f4>)
   1f062:	f004 f8ef 	bl	23244 <__aeabi_dsub>
   1f066:	0022      	movs	r2, r4
   1f068:	002b      	movs	r3, r5
   1f06a:	f003 fe6b 	bl	22d44 <__aeabi_dmul>
   1f06e:	4ab5      	ldr	r2, [pc, #724]	; (1f344 <__ieee754_pow+0x9f8>)
   1f070:	4bb5      	ldr	r3, [pc, #724]	; (1f348 <__ieee754_pow+0x9fc>)
   1f072:	f002 ff23 	bl	21ebc <__aeabi_dadd>
   1f076:	0022      	movs	r2, r4
   1f078:	002b      	movs	r3, r5
   1f07a:	f003 fe63 	bl	22d44 <__aeabi_dmul>
   1f07e:	4ab3      	ldr	r2, [pc, #716]	; (1f34c <__ieee754_pow+0xa00>)
   1f080:	4bb3      	ldr	r3, [pc, #716]	; (1f350 <__ieee754_pow+0xa04>)
   1f082:	f004 f8df 	bl	23244 <__aeabi_dsub>
   1f086:	0022      	movs	r2, r4
   1f088:	002b      	movs	r3, r5
   1f08a:	f003 fe5b 	bl	22d44 <__aeabi_dmul>
   1f08e:	4ab1      	ldr	r2, [pc, #708]	; (1f354 <__ieee754_pow+0xa08>)
   1f090:	4bb1      	ldr	r3, [pc, #708]	; (1f358 <__ieee754_pow+0xa0c>)
   1f092:	f002 ff13 	bl	21ebc <__aeabi_dadd>
   1f096:	0022      	movs	r2, r4
   1f098:	002b      	movs	r3, r5
   1f09a:	f003 fe53 	bl	22d44 <__aeabi_dmul>
   1f09e:	0002      	movs	r2, r0
   1f0a0:	000b      	movs	r3, r1
   1f0a2:	0030      	movs	r0, r6
   1f0a4:	0039      	movs	r1, r7
   1f0a6:	f004 f8cd 	bl	23244 <__aeabi_dsub>
   1f0aa:	0004      	movs	r4, r0
   1f0ac:	000d      	movs	r5, r1
   1f0ae:	0002      	movs	r2, r0
   1f0b0:	000b      	movs	r3, r1
   1f0b2:	0030      	movs	r0, r6
   1f0b4:	0039      	movs	r1, r7
   1f0b6:	f003 fe45 	bl	22d44 <__aeabi_dmul>
   1f0ba:	2380      	movs	r3, #128	; 0x80
   1f0bc:	9002      	str	r0, [sp, #8]
   1f0be:	9103      	str	r1, [sp, #12]
   1f0c0:	2200      	movs	r2, #0
   1f0c2:	05db      	lsls	r3, r3, #23
   1f0c4:	0020      	movs	r0, r4
   1f0c6:	0029      	movs	r1, r5
   1f0c8:	f004 f8bc 	bl	23244 <__aeabi_dsub>
   1f0cc:	0002      	movs	r2, r0
   1f0ce:	000b      	movs	r3, r1
   1f0d0:	9802      	ldr	r0, [sp, #8]
   1f0d2:	9903      	ldr	r1, [sp, #12]
   1f0d4:	f003 fa02 	bl	224dc <__aeabi_ddiv>
   1f0d8:	9a00      	ldr	r2, [sp, #0]
   1f0da:	9b01      	ldr	r3, [sp, #4]
   1f0dc:	0004      	movs	r4, r0
   1f0de:	000d      	movs	r5, r1
   1f0e0:	0030      	movs	r0, r6
   1f0e2:	0039      	movs	r1, r7
   1f0e4:	f003 fe2e 	bl	22d44 <__aeabi_dmul>
   1f0e8:	9a00      	ldr	r2, [sp, #0]
   1f0ea:	9b01      	ldr	r3, [sp, #4]
   1f0ec:	f002 fee6 	bl	21ebc <__aeabi_dadd>
   1f0f0:	0002      	movs	r2, r0
   1f0f2:	000b      	movs	r3, r1
   1f0f4:	0020      	movs	r0, r4
   1f0f6:	0029      	movs	r1, r5
   1f0f8:	f004 f8a4 	bl	23244 <__aeabi_dsub>
   1f0fc:	0032      	movs	r2, r6
   1f0fe:	003b      	movs	r3, r7
   1f100:	f004 f8a0 	bl	23244 <__aeabi_dsub>
   1f104:	0002      	movs	r2, r0
   1f106:	000b      	movs	r3, r1
   1f108:	2000      	movs	r0, #0
   1f10a:	4994      	ldr	r1, [pc, #592]	; (1f35c <__ieee754_pow+0xa10>)
   1f10c:	f004 f89a 	bl	23244 <__aeabi_dsub>
   1f110:	4643      	mov	r3, r8
   1f112:	185b      	adds	r3, r3, r1
   1f114:	151a      	asrs	r2, r3, #20
   1f116:	2a00      	cmp	r2, #0
   1f118:	dc00      	bgt.n	1f11c <__ieee754_pow+0x7d0>
   1f11a:	e149      	b.n	1f3b0 <__ieee754_pow+0xa64>
   1f11c:	0019      	movs	r1, r3
   1f11e:	9a06      	ldr	r2, [sp, #24]
   1f120:	9b07      	ldr	r3, [sp, #28]
   1f122:	f003 fe0f 	bl	22d44 <__aeabi_dmul>
   1f126:	e459      	b.n	1e9dc <__ieee754_pow+0x90>
   1f128:	003a      	movs	r2, r7
   1f12a:	0033      	movs	r3, r6
   1f12c:	0038      	movs	r0, r7
   1f12e:	0031      	movs	r1, r6
   1f130:	f003 fe08 	bl	22d44 <__aeabi_dmul>
   1f134:	e452      	b.n	1e9dc <__ieee754_pow+0x90>
   1f136:	4653      	mov	r3, sl
   1f138:	2b00      	cmp	r3, #0
   1f13a:	db00      	blt.n	1f13e <__ieee754_pow+0x7f2>
   1f13c:	e4d9      	b.n	1eaf2 <__ieee754_pow+0x1a6>
   1f13e:	9c00      	ldr	r4, [sp, #0]
   1f140:	9d01      	ldr	r5, [sp, #4]
   1f142:	2280      	movs	r2, #128	; 0x80
   1f144:	0612      	lsls	r2, r2, #24
   1f146:	002b      	movs	r3, r5
   1f148:	4694      	mov	ip, r2
   1f14a:	4463      	add	r3, ip
   1f14c:	0020      	movs	r0, r4
   1f14e:	0019      	movs	r1, r3
   1f150:	f7ff fc44 	bl	1e9dc <__ieee754_pow+0x90>
   1f154:	004b      	lsls	r3, r1, #1
   1f156:	085b      	lsrs	r3, r3, #1
   1f158:	469a      	mov	sl, r3
   1f15a:	4b81      	ldr	r3, [pc, #516]	; (1f360 <__ieee754_pow+0xa14>)
   1f15c:	459a      	cmp	sl, r3
   1f15e:	dc00      	bgt.n	1f162 <__ieee754_pow+0x816>
   1f160:	e0b1      	b.n	1f2c6 <__ieee754_pow+0x97a>
   1f162:	4b80      	ldr	r3, [pc, #512]	; (1f364 <__ieee754_pow+0xa18>)
   1f164:	445b      	add	r3, fp
   1f166:	431a      	orrs	r2, r3
   1f168:	d10c      	bne.n	1f184 <__ieee754_pow+0x838>
   1f16a:	0032      	movs	r2, r6
   1f16c:	003b      	movs	r3, r7
   1f16e:	f004 f869 	bl	23244 <__aeabi_dsub>
   1f172:	0002      	movs	r2, r0
   1f174:	000b      	movs	r3, r1
   1f176:	9800      	ldr	r0, [sp, #0]
   1f178:	9901      	ldr	r1, [sp, #4]
   1f17a:	f001 feb5 	bl	20ee8 <__aeabi_dcmple>
   1f17e:	2800      	cmp	r0, #0
   1f180:	d100      	bne.n	1f184 <__ieee754_pow+0x838>
   1f182:	e6ee      	b.n	1ef62 <__ieee754_pow+0x616>
   1f184:	9806      	ldr	r0, [sp, #24]
   1f186:	9907      	ldr	r1, [sp, #28]
   1f188:	4a77      	ldr	r2, [pc, #476]	; (1f368 <__ieee754_pow+0xa1c>)
   1f18a:	4b78      	ldr	r3, [pc, #480]	; (1f36c <__ieee754_pow+0xa20>)
   1f18c:	f003 fdda 	bl	22d44 <__aeabi_dmul>
   1f190:	4a75      	ldr	r2, [pc, #468]	; (1f368 <__ieee754_pow+0xa1c>)
   1f192:	4b76      	ldr	r3, [pc, #472]	; (1f36c <__ieee754_pow+0xa20>)
   1f194:	f003 fdd6 	bl	22d44 <__aeabi_dmul>
   1f198:	f7ff fc20 	bl	1e9dc <__ieee754_pow+0x90>
   1f19c:	2300      	movs	r3, #0
   1f19e:	4c74      	ldr	r4, [pc, #464]	; (1f370 <__ieee754_pow+0xa24>)
   1f1a0:	9306      	str	r3, [sp, #24]
   1f1a2:	9407      	str	r4, [sp, #28]
   1f1a4:	e652      	b.n	1ee4c <__ieee754_pow+0x500>
   1f1a6:	0002      	movs	r2, r0
   1f1a8:	000b      	movs	r3, r1
   1f1aa:	2000      	movs	r0, #0
   1f1ac:	496b      	ldr	r1, [pc, #428]	; (1f35c <__ieee754_pow+0xa10>)
   1f1ae:	f003 f995 	bl	224dc <__aeabi_ddiv>
   1f1b2:	f7ff fc32 	bl	1ea1a <__ieee754_pow+0xce>
   1f1b6:	4653      	mov	r3, sl
   1f1b8:	2b00      	cmp	r3, #0
   1f1ba:	db00      	blt.n	1f1be <__ieee754_pow+0x872>
   1f1bc:	e499      	b.n	1eaf2 <__ieee754_pow+0x1a6>
   1f1be:	e454      	b.n	1ea6a <__ieee754_pow+0x11e>
   1f1c0:	4b6c      	ldr	r3, [pc, #432]	; (1f374 <__ieee754_pow+0xa28>)
   1f1c2:	429c      	cmp	r4, r3
   1f1c4:	ddf7      	ble.n	1f1b6 <__ieee754_pow+0x86a>
   1f1c6:	4b65      	ldr	r3, [pc, #404]	; (1f35c <__ieee754_pow+0xa10>)
   1f1c8:	429c      	cmp	r4, r3
   1f1ca:	dd00      	ble.n	1f1ce <__ieee754_pow+0x882>
   1f1cc:	e44a      	b.n	1ea64 <__ieee754_pow+0x118>
   1f1ce:	2200      	movs	r2, #0
   1f1d0:	4b62      	ldr	r3, [pc, #392]	; (1f35c <__ieee754_pow+0xa10>)
   1f1d2:	f004 f837 	bl	23244 <__aeabi_dsub>
   1f1d6:	22c0      	movs	r2, #192	; 0xc0
   1f1d8:	4b67      	ldr	r3, [pc, #412]	; (1f378 <__ieee754_pow+0xa2c>)
   1f1da:	05d2      	lsls	r2, r2, #23
   1f1dc:	0004      	movs	r4, r0
   1f1de:	000d      	movs	r5, r1
   1f1e0:	f003 fdb0 	bl	22d44 <__aeabi_dmul>
   1f1e4:	4a65      	ldr	r2, [pc, #404]	; (1f37c <__ieee754_pow+0xa30>)
   1f1e6:	0006      	movs	r6, r0
   1f1e8:	000f      	movs	r7, r1
   1f1ea:	4b65      	ldr	r3, [pc, #404]	; (1f380 <__ieee754_pow+0xa34>)
   1f1ec:	0020      	movs	r0, r4
   1f1ee:	0029      	movs	r1, r5
   1f1f0:	f003 fda8 	bl	22d44 <__aeabi_dmul>
   1f1f4:	2200      	movs	r2, #0
   1f1f6:	9002      	str	r0, [sp, #8]
   1f1f8:	9103      	str	r1, [sp, #12]
   1f1fa:	4b62      	ldr	r3, [pc, #392]	; (1f384 <__ieee754_pow+0xa38>)
   1f1fc:	0020      	movs	r0, r4
   1f1fe:	0029      	movs	r1, r5
   1f200:	f003 fda0 	bl	22d44 <__aeabi_dmul>
   1f204:	0002      	movs	r2, r0
   1f206:	000b      	movs	r3, r1
   1f208:	485f      	ldr	r0, [pc, #380]	; (1f388 <__ieee754_pow+0xa3c>)
   1f20a:	4960      	ldr	r1, [pc, #384]	; (1f38c <__ieee754_pow+0xa40>)
   1f20c:	f004 f81a 	bl	23244 <__aeabi_dsub>
   1f210:	0022      	movs	r2, r4
   1f212:	002b      	movs	r3, r5
   1f214:	f003 fd96 	bl	22d44 <__aeabi_dmul>
   1f218:	0002      	movs	r2, r0
   1f21a:	000b      	movs	r3, r1
   1f21c:	2000      	movs	r0, #0
   1f21e:	495c      	ldr	r1, [pc, #368]	; (1f390 <__ieee754_pow+0xa44>)
   1f220:	f004 f810 	bl	23244 <__aeabi_dsub>
   1f224:	0022      	movs	r2, r4
   1f226:	9004      	str	r0, [sp, #16]
   1f228:	9105      	str	r1, [sp, #20]
   1f22a:	002b      	movs	r3, r5
   1f22c:	0020      	movs	r0, r4
   1f22e:	0029      	movs	r1, r5
   1f230:	f003 fd88 	bl	22d44 <__aeabi_dmul>
   1f234:	0002      	movs	r2, r0
   1f236:	000b      	movs	r3, r1
   1f238:	9804      	ldr	r0, [sp, #16]
   1f23a:	9905      	ldr	r1, [sp, #20]
   1f23c:	f003 fd82 	bl	22d44 <__aeabi_dmul>
   1f240:	4a54      	ldr	r2, [pc, #336]	; (1f394 <__ieee754_pow+0xa48>)
   1f242:	4b4d      	ldr	r3, [pc, #308]	; (1f378 <__ieee754_pow+0xa2c>)
   1f244:	f003 fd7e 	bl	22d44 <__aeabi_dmul>
   1f248:	0002      	movs	r2, r0
   1f24a:	000b      	movs	r3, r1
   1f24c:	9802      	ldr	r0, [sp, #8]
   1f24e:	9903      	ldr	r1, [sp, #12]
   1f250:	f003 fff8 	bl	23244 <__aeabi_dsub>
   1f254:	0002      	movs	r2, r0
   1f256:	000b      	movs	r3, r1
   1f258:	0004      	movs	r4, r0
   1f25a:	000d      	movs	r5, r1
   1f25c:	0030      	movs	r0, r6
   1f25e:	0039      	movs	r1, r7
   1f260:	f002 fe2c 	bl	21ebc <__aeabi_dadd>
   1f264:	2000      	movs	r0, #0
   1f266:	0032      	movs	r2, r6
   1f268:	003b      	movs	r3, r7
   1f26a:	9002      	str	r0, [sp, #8]
   1f26c:	9103      	str	r1, [sp, #12]
   1f26e:	f003 ffe9 	bl	23244 <__aeabi_dsub>
   1f272:	0002      	movs	r2, r0
   1f274:	000b      	movs	r3, r1
   1f276:	0020      	movs	r0, r4
   1f278:	0029      	movs	r1, r5
   1f27a:	f003 ffe3 	bl	23244 <__aeabi_dsub>
   1f27e:	9004      	str	r0, [sp, #16]
   1f280:	9105      	str	r1, [sp, #20]
   1f282:	e5d9      	b.n	1ee38 <__ieee754_pow+0x4ec>
   1f284:	4a44      	ldr	r2, [pc, #272]	; (1f398 <__ieee754_pow+0xa4c>)
   1f286:	4b45      	ldr	r3, [pc, #276]	; (1f39c <__ieee754_pow+0xa50>)
   1f288:	9806      	ldr	r0, [sp, #24]
   1f28a:	9907      	ldr	r1, [sp, #28]
   1f28c:	f003 fd5a 	bl	22d44 <__aeabi_dmul>
   1f290:	4a41      	ldr	r2, [pc, #260]	; (1f398 <__ieee754_pow+0xa4c>)
   1f292:	4b42      	ldr	r3, [pc, #264]	; (1f39c <__ieee754_pow+0xa50>)
   1f294:	f003 fd56 	bl	22d44 <__aeabi_dmul>
   1f298:	f7ff fba0 	bl	1e9dc <__ieee754_pow+0x90>
   1f29c:	2a00      	cmp	r2, #0
   1f29e:	d001      	beq.n	1f2a4 <__ieee754_pow+0x958>
   1f2a0:	f7ff fba9 	bl	1e9f6 <__ieee754_pow+0xaa>
   1f2a4:	3214      	adds	r2, #20
   1f2a6:	1ad3      	subs	r3, r2, r3
   1f2a8:	002a      	movs	r2, r5
   1f2aa:	411a      	asrs	r2, r3
   1f2ac:	0011      	movs	r1, r2
   1f2ae:	4099      	lsls	r1, r3
   1f2b0:	428d      	cmp	r5, r1
   1f2b2:	d001      	beq.n	1f2b8 <__ieee754_pow+0x96c>
   1f2b4:	f7ff fb76 	bl	1e9a4 <__ieee754_pow+0x58>
   1f2b8:	2301      	movs	r3, #1
   1f2ba:	401a      	ands	r2, r3
   1f2bc:	18db      	adds	r3, r3, r3
   1f2be:	1a9b      	subs	r3, r3, r2
   1f2c0:	469b      	mov	fp, r3
   1f2c2:	f7ff fb6f 	bl	1e9a4 <__ieee754_pow+0x58>
   1f2c6:	2200      	movs	r2, #0
   1f2c8:	4b31      	ldr	r3, [pc, #196]	; (1f390 <__ieee754_pow+0xa44>)
   1f2ca:	4690      	mov	r8, r2
   1f2cc:	4691      	mov	r9, r2
   1f2ce:	459a      	cmp	sl, r3
   1f2d0:	dc00      	bgt.n	1f2d4 <__ieee754_pow+0x988>
   1f2d2:	e67b      	b.n	1efcc <__ieee754_pow+0x680>
   1f2d4:	e645      	b.n	1ef62 <__ieee754_pow+0x616>
   1f2d6:	0002      	movs	r2, r0
   1f2d8:	000b      	movs	r3, r1
   1f2da:	f003 ffb3 	bl	23244 <__aeabi_dsub>
   1f2de:	0002      	movs	r2, r0
   1f2e0:	000b      	movs	r3, r1
   1f2e2:	f003 f8fb 	bl	224dc <__aeabi_ddiv>
   1f2e6:	f7ff fb79 	bl	1e9dc <__ieee754_pow+0x90>
   1f2ea:	2380      	movs	r3, #128	; 0x80
   1f2ec:	4c2c      	ldr	r4, [pc, #176]	; (1f3a0 <__ieee754_pow+0xa54>)
   1f2ee:	05db      	lsls	r3, r3, #23
   1f2f0:	9308      	str	r3, [sp, #32]
   1f2f2:	9409      	str	r4, [sp, #36]	; 0x24
   1f2f4:	4b2b      	ldr	r3, [pc, #172]	; (1f3a4 <__ieee754_pow+0xa58>)
   1f2f6:	4c2c      	ldr	r4, [pc, #176]	; (1f3a8 <__ieee754_pow+0xa5c>)
   1f2f8:	2200      	movs	r2, #0
   1f2fa:	930c      	str	r3, [sp, #48]	; 0x30
   1f2fc:	940d      	str	r4, [sp, #52]	; 0x34
   1f2fe:	2480      	movs	r4, #128	; 0x80
   1f300:	4b2a      	ldr	r3, [pc, #168]	; (1f3ac <__ieee754_pow+0xa60>)
   1f302:	02e4      	lsls	r4, r4, #11
   1f304:	9206      	str	r2, [sp, #24]
   1f306:	9307      	str	r3, [sp, #28]
   1f308:	e449      	b.n	1eb9e <__ieee754_pow+0x252>
   1f30a:	464b      	mov	r3, r9
   1f30c:	425b      	negs	r3, r3
   1f30e:	4699      	mov	r9, r3
   1f310:	e64a      	b.n	1efa8 <__ieee754_pow+0x65c>
   1f312:	46c0      	nop			; (mov r8, r8)
   1f314:	fffffc02 	.word	0xfffffc02
   1f318:	fffffc01 	.word	0xfffffc01
   1f31c:	000fffff 	.word	0x000fffff
   1f320:	3fe62e43 	.word	0x3fe62e43
   1f324:	fefa39ef 	.word	0xfefa39ef
   1f328:	3fe62e42 	.word	0x3fe62e42
   1f32c:	0ca86c39 	.word	0x0ca86c39
   1f330:	be205c61 	.word	0xbe205c61
   1f334:	72bea4d0 	.word	0x72bea4d0
   1f338:	3e663769 	.word	0x3e663769
   1f33c:	c5d26bf1 	.word	0xc5d26bf1
   1f340:	3ebbbd41 	.word	0x3ebbbd41
   1f344:	af25de2c 	.word	0xaf25de2c
   1f348:	3f11566a 	.word	0x3f11566a
   1f34c:	16bebd93 	.word	0x16bebd93
   1f350:	3f66c16c 	.word	0x3f66c16c
   1f354:	5555553e 	.word	0x5555553e
   1f358:	3fc55555 	.word	0x3fc55555
   1f35c:	3ff00000 	.word	0x3ff00000
   1f360:	4090cbff 	.word	0x4090cbff
   1f364:	3f6f3400 	.word	0x3f6f3400
   1f368:	c2f8f359 	.word	0xc2f8f359
   1f36c:	01a56e1f 	.word	0x01a56e1f
   1f370:	bff00000 	.word	0xbff00000
   1f374:	3feffffe 	.word	0x3feffffe
   1f378:	3ff71547 	.word	0x3ff71547
   1f37c:	f85ddf44 	.word	0xf85ddf44
   1f380:	3e54ae0b 	.word	0x3e54ae0b
   1f384:	3fd00000 	.word	0x3fd00000
   1f388:	55555555 	.word	0x55555555
   1f38c:	3fd55555 	.word	0x3fd55555
   1f390:	3fe00000 	.word	0x3fe00000
   1f394:	652b82fe 	.word	0x652b82fe
   1f398:	8800759c 	.word	0x8800759c
   1f39c:	7e37e43c 	.word	0x7e37e43c
   1f3a0:	3fe2b803 	.word	0x3fe2b803
   1f3a4:	43cfd006 	.word	0x43cfd006
   1f3a8:	3e4cfdeb 	.word	0x3e4cfdeb
   1f3ac:	3ff80000 	.word	0x3ff80000
   1f3b0:	464a      	mov	r2, r9
   1f3b2:	f001 fb93 	bl	20adc <scalbn>
   1f3b6:	e6b2      	b.n	1f11e <__ieee754_pow+0x7d2>

0001f3b8 <__ieee754_rem_pio2>:
   1f3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3ba:	464e      	mov	r6, r9
   1f3bc:	4645      	mov	r5, r8
   1f3be:	46de      	mov	lr, fp
   1f3c0:	4657      	mov	r7, sl
   1f3c2:	b5e0      	push	{r5, r6, r7, lr}
   1f3c4:	4bd4      	ldr	r3, [pc, #848]	; (1f718 <__ieee754_rem_pio2+0x360>)
   1f3c6:	004c      	lsls	r4, r1, #1
   1f3c8:	b08f      	sub	sp, #60	; 0x3c
   1f3ca:	4690      	mov	r8, r2
   1f3cc:	4689      	mov	r9, r1
   1f3ce:	0864      	lsrs	r4, r4, #1
   1f3d0:	429c      	cmp	r4, r3
   1f3d2:	dc00      	bgt.n	1f3d6 <__ieee754_rem_pio2+0x1e>
   1f3d4:	e087      	b.n	1f4e6 <__ieee754_rem_pio2+0x12e>
   1f3d6:	4bd1      	ldr	r3, [pc, #836]	; (1f71c <__ieee754_rem_pio2+0x364>)
   1f3d8:	429c      	cmp	r4, r3
   1f3da:	dc22      	bgt.n	1f422 <__ieee754_rem_pio2+0x6a>
   1f3dc:	4ad0      	ldr	r2, [pc, #832]	; (1f720 <__ieee754_rem_pio2+0x368>)
   1f3de:	2900      	cmp	r1, #0
   1f3e0:	dc00      	bgt.n	1f3e4 <__ieee754_rem_pio2+0x2c>
   1f3e2:	e1bf      	b.n	1f764 <__ieee754_rem_pio2+0x3ac>
   1f3e4:	4bcf      	ldr	r3, [pc, #828]	; (1f724 <__ieee754_rem_pio2+0x36c>)
   1f3e6:	f003 ff2d 	bl	23244 <__aeabi_dsub>
   1f3ea:	4bce      	ldr	r3, [pc, #824]	; (1f724 <__ieee754_rem_pio2+0x36c>)
   1f3ec:	0006      	movs	r6, r0
   1f3ee:	000f      	movs	r7, r1
   1f3f0:	429c      	cmp	r4, r3
   1f3f2:	d100      	bne.n	1f3f6 <__ieee754_rem_pio2+0x3e>
   1f3f4:	e094      	b.n	1f520 <__ieee754_rem_pio2+0x168>
   1f3f6:	4acc      	ldr	r2, [pc, #816]	; (1f728 <__ieee754_rem_pio2+0x370>)
   1f3f8:	4bcc      	ldr	r3, [pc, #816]	; (1f72c <__ieee754_rem_pio2+0x374>)
   1f3fa:	f003 ff23 	bl	23244 <__aeabi_dsub>
   1f3fe:	0002      	movs	r2, r0
   1f400:	000b      	movs	r3, r1
   1f402:	4641      	mov	r1, r8
   1f404:	0030      	movs	r0, r6
   1f406:	600a      	str	r2, [r1, #0]
   1f408:	604b      	str	r3, [r1, #4]
   1f40a:	0039      	movs	r1, r7
   1f40c:	f003 ff1a 	bl	23244 <__aeabi_dsub>
   1f410:	4bc6      	ldr	r3, [pc, #792]	; (1f72c <__ieee754_rem_pio2+0x374>)
   1f412:	4ac5      	ldr	r2, [pc, #788]	; (1f728 <__ieee754_rem_pio2+0x370>)
   1f414:	f003 ff16 	bl	23244 <__aeabi_dsub>
   1f418:	4643      	mov	r3, r8
   1f41a:	2501      	movs	r5, #1
   1f41c:	6098      	str	r0, [r3, #8]
   1f41e:	60d9      	str	r1, [r3, #12]
   1f420:	e06b      	b.n	1f4fa <__ieee754_rem_pio2+0x142>
   1f422:	4bc3      	ldr	r3, [pc, #780]	; (1f730 <__ieee754_rem_pio2+0x378>)
   1f424:	429c      	cmp	r4, r3
   1f426:	dc00      	bgt.n	1f42a <__ieee754_rem_pio2+0x72>
   1f428:	e097      	b.n	1f55a <__ieee754_rem_pio2+0x1a2>
   1f42a:	4bc2      	ldr	r3, [pc, #776]	; (1f734 <__ieee754_rem_pio2+0x37c>)
   1f42c:	429c      	cmp	r4, r3
   1f42e:	dc6c      	bgt.n	1f50a <__ieee754_rem_pio2+0x152>
   1f430:	4ac1      	ldr	r2, [pc, #772]	; (1f738 <__ieee754_rem_pio2+0x380>)
   1f432:	1523      	asrs	r3, r4, #20
   1f434:	4692      	mov	sl, r2
   1f436:	449a      	add	sl, r3
   1f438:	4651      	mov	r1, sl
   1f43a:	0509      	lsls	r1, r1, #20
   1f43c:	1a63      	subs	r3, r4, r1
   1f43e:	0019      	movs	r1, r3
   1f440:	001d      	movs	r5, r3
   1f442:	0004      	movs	r4, r0
   1f444:	f004 fa34 	bl	238b0 <__aeabi_d2iz>
   1f448:	f004 fa66 	bl	23918 <__aeabi_i2d>
   1f44c:	0002      	movs	r2, r0
   1f44e:	000b      	movs	r3, r1
   1f450:	0020      	movs	r0, r4
   1f452:	0029      	movs	r1, r5
   1f454:	9208      	str	r2, [sp, #32]
   1f456:	9309      	str	r3, [sp, #36]	; 0x24
   1f458:	f003 fef4 	bl	23244 <__aeabi_dsub>
   1f45c:	2200      	movs	r2, #0
   1f45e:	4bb7      	ldr	r3, [pc, #732]	; (1f73c <__ieee754_rem_pio2+0x384>)
   1f460:	f003 fc70 	bl	22d44 <__aeabi_dmul>
   1f464:	000f      	movs	r7, r1
   1f466:	0006      	movs	r6, r0
   1f468:	f004 fa22 	bl	238b0 <__aeabi_d2iz>
   1f46c:	f004 fa54 	bl	23918 <__aeabi_i2d>
   1f470:	0004      	movs	r4, r0
   1f472:	000d      	movs	r5, r1
   1f474:	0002      	movs	r2, r0
   1f476:	000b      	movs	r3, r1
   1f478:	0030      	movs	r0, r6
   1f47a:	0039      	movs	r1, r7
   1f47c:	940a      	str	r4, [sp, #40]	; 0x28
   1f47e:	950b      	str	r5, [sp, #44]	; 0x2c
   1f480:	f003 fee0 	bl	23244 <__aeabi_dsub>
   1f484:	2200      	movs	r2, #0
   1f486:	4bad      	ldr	r3, [pc, #692]	; (1f73c <__ieee754_rem_pio2+0x384>)
   1f488:	f003 fc5c 	bl	22d44 <__aeabi_dmul>
   1f48c:	2200      	movs	r2, #0
   1f48e:	2300      	movs	r3, #0
   1f490:	900c      	str	r0, [sp, #48]	; 0x30
   1f492:	910d      	str	r1, [sp, #52]	; 0x34
   1f494:	f001 fd18 	bl	20ec8 <__aeabi_dcmpeq>
   1f498:	2800      	cmp	r0, #0
   1f49a:	d100      	bne.n	1f49e <__ieee754_rem_pio2+0xe6>
   1f49c:	e181      	b.n	1f7a2 <__ieee754_rem_pio2+0x3ea>
   1f49e:	2300      	movs	r3, #0
   1f4a0:	2200      	movs	r2, #0
   1f4a2:	0020      	movs	r0, r4
   1f4a4:	0029      	movs	r1, r5
   1f4a6:	f001 fd0f 	bl	20ec8 <__aeabi_dcmpeq>
   1f4aa:	4243      	negs	r3, r0
   1f4ac:	4143      	adcs	r3, r0
   1f4ae:	3301      	adds	r3, #1
   1f4b0:	4aa3      	ldr	r2, [pc, #652]	; (1f740 <__ieee754_rem_pio2+0x388>)
   1f4b2:	4641      	mov	r1, r8
   1f4b4:	9201      	str	r2, [sp, #4]
   1f4b6:	2202      	movs	r2, #2
   1f4b8:	a808      	add	r0, sp, #32
   1f4ba:	9200      	str	r2, [sp, #0]
   1f4bc:	4652      	mov	r2, sl
   1f4be:	f000 fb8d 	bl	1fbdc <__kernel_rem_pio2>
   1f4c2:	464b      	mov	r3, r9
   1f4c4:	0005      	movs	r5, r0
   1f4c6:	2b00      	cmp	r3, #0
   1f4c8:	da17      	bge.n	1f4fa <__ieee754_rem_pio2+0x142>
   1f4ca:	2280      	movs	r2, #128	; 0x80
   1f4cc:	4643      	mov	r3, r8
   1f4ce:	0612      	lsls	r2, r2, #24
   1f4d0:	4694      	mov	ip, r2
   1f4d2:	4642      	mov	r2, r8
   1f4d4:	685b      	ldr	r3, [r3, #4]
   1f4d6:	4245      	negs	r5, r0
   1f4d8:	4463      	add	r3, ip
   1f4da:	6053      	str	r3, [r2, #4]
   1f4dc:	68d3      	ldr	r3, [r2, #12]
   1f4de:	4642      	mov	r2, r8
   1f4e0:	4463      	add	r3, ip
   1f4e2:	60d3      	str	r3, [r2, #12]
   1f4e4:	e009      	b.n	1f4fa <__ieee754_rem_pio2+0x142>
   1f4e6:	000b      	movs	r3, r1
   1f4e8:	0002      	movs	r2, r0
   1f4ea:	4641      	mov	r1, r8
   1f4ec:	600a      	str	r2, [r1, #0]
   1f4ee:	604b      	str	r3, [r1, #4]
   1f4f0:	2200      	movs	r2, #0
   1f4f2:	2300      	movs	r3, #0
   1f4f4:	2500      	movs	r5, #0
   1f4f6:	608a      	str	r2, [r1, #8]
   1f4f8:	60cb      	str	r3, [r1, #12]
   1f4fa:	0028      	movs	r0, r5
   1f4fc:	b00f      	add	sp, #60	; 0x3c
   1f4fe:	bc3c      	pop	{r2, r3, r4, r5}
   1f500:	4690      	mov	r8, r2
   1f502:	4699      	mov	r9, r3
   1f504:	46a2      	mov	sl, r4
   1f506:	46ab      	mov	fp, r5
   1f508:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f50a:	000b      	movs	r3, r1
   1f50c:	0002      	movs	r2, r0
   1f50e:	f003 fe99 	bl	23244 <__aeabi_dsub>
   1f512:	4643      	mov	r3, r8
   1f514:	2500      	movs	r5, #0
   1f516:	6098      	str	r0, [r3, #8]
   1f518:	60d9      	str	r1, [r3, #12]
   1f51a:	6018      	str	r0, [r3, #0]
   1f51c:	6059      	str	r1, [r3, #4]
   1f51e:	e7ec      	b.n	1f4fa <__ieee754_rem_pio2+0x142>
   1f520:	22d3      	movs	r2, #211	; 0xd3
   1f522:	4b82      	ldr	r3, [pc, #520]	; (1f72c <__ieee754_rem_pio2+0x374>)
   1f524:	0552      	lsls	r2, r2, #21
   1f526:	f003 fe8d 	bl	23244 <__aeabi_dsub>
   1f52a:	4a86      	ldr	r2, [pc, #536]	; (1f744 <__ieee754_rem_pio2+0x38c>)
   1f52c:	4b86      	ldr	r3, [pc, #536]	; (1f748 <__ieee754_rem_pio2+0x390>)
   1f52e:	000d      	movs	r5, r1
   1f530:	0004      	movs	r4, r0
   1f532:	f003 fe87 	bl	23244 <__aeabi_dsub>
   1f536:	0002      	movs	r2, r0
   1f538:	000b      	movs	r3, r1
   1f53a:	4641      	mov	r1, r8
   1f53c:	0020      	movs	r0, r4
   1f53e:	600a      	str	r2, [r1, #0]
   1f540:	604b      	str	r3, [r1, #4]
   1f542:	0029      	movs	r1, r5
   1f544:	f003 fe7e 	bl	23244 <__aeabi_dsub>
   1f548:	4b7f      	ldr	r3, [pc, #508]	; (1f748 <__ieee754_rem_pio2+0x390>)
   1f54a:	4a7e      	ldr	r2, [pc, #504]	; (1f744 <__ieee754_rem_pio2+0x38c>)
   1f54c:	f003 fe7a 	bl	23244 <__aeabi_dsub>
   1f550:	4643      	mov	r3, r8
   1f552:	2501      	movs	r5, #1
   1f554:	6098      	str	r0, [r3, #8]
   1f556:	60d9      	str	r1, [r3, #12]
   1f558:	e7cf      	b.n	1f4fa <__ieee754_rem_pio2+0x142>
   1f55a:	f001 fa07 	bl	2096c <fabs>
   1f55e:	4a7b      	ldr	r2, [pc, #492]	; (1f74c <__ieee754_rem_pio2+0x394>)
   1f560:	4b7b      	ldr	r3, [pc, #492]	; (1f750 <__ieee754_rem_pio2+0x398>)
   1f562:	0006      	movs	r6, r0
   1f564:	000f      	movs	r7, r1
   1f566:	f003 fbed 	bl	22d44 <__aeabi_dmul>
   1f56a:	2200      	movs	r2, #0
   1f56c:	4b79      	ldr	r3, [pc, #484]	; (1f754 <__ieee754_rem_pio2+0x39c>)
   1f56e:	f002 fca5 	bl	21ebc <__aeabi_dadd>
   1f572:	f004 f99d 	bl	238b0 <__aeabi_d2iz>
   1f576:	0005      	movs	r5, r0
   1f578:	f004 f9ce 	bl	23918 <__aeabi_i2d>
   1f57c:	4a68      	ldr	r2, [pc, #416]	; (1f720 <__ieee754_rem_pio2+0x368>)
   1f57e:	4b69      	ldr	r3, [pc, #420]	; (1f724 <__ieee754_rem_pio2+0x36c>)
   1f580:	9004      	str	r0, [sp, #16]
   1f582:	9105      	str	r1, [sp, #20]
   1f584:	f003 fbde 	bl	22d44 <__aeabi_dmul>
   1f588:	0002      	movs	r2, r0
   1f58a:	000b      	movs	r3, r1
   1f58c:	0030      	movs	r0, r6
   1f58e:	0039      	movs	r1, r7
   1f590:	f003 fe58 	bl	23244 <__aeabi_dsub>
   1f594:	4a64      	ldr	r2, [pc, #400]	; (1f728 <__ieee754_rem_pio2+0x370>)
   1f596:	0006      	movs	r6, r0
   1f598:	000f      	movs	r7, r1
   1f59a:	9804      	ldr	r0, [sp, #16]
   1f59c:	9905      	ldr	r1, [sp, #20]
   1f59e:	4b63      	ldr	r3, [pc, #396]	; (1f72c <__ieee754_rem_pio2+0x374>)
   1f5a0:	f003 fbd0 	bl	22d44 <__aeabi_dmul>
   1f5a4:	9002      	str	r0, [sp, #8]
   1f5a6:	9103      	str	r1, [sp, #12]
   1f5a8:	2d1f      	cmp	r5, #31
   1f5aa:	dc33      	bgt.n	1f614 <__ieee754_rem_pio2+0x25c>
   1f5ac:	1e6b      	subs	r3, r5, #1
   1f5ae:	4a6a      	ldr	r2, [pc, #424]	; (1f758 <__ieee754_rem_pio2+0x3a0>)
   1f5b0:	009b      	lsls	r3, r3, #2
   1f5b2:	589b      	ldr	r3, [r3, r2]
   1f5b4:	429c      	cmp	r4, r3
   1f5b6:	d02d      	beq.n	1f614 <__ieee754_rem_pio2+0x25c>
   1f5b8:	0002      	movs	r2, r0
   1f5ba:	000b      	movs	r3, r1
   1f5bc:	0030      	movs	r0, r6
   1f5be:	0039      	movs	r1, r7
   1f5c0:	f003 fe40 	bl	23244 <__aeabi_dsub>
   1f5c4:	000b      	movs	r3, r1
   1f5c6:	468a      	mov	sl, r1
   1f5c8:	0002      	movs	r2, r0
   1f5ca:	4641      	mov	r1, r8
   1f5cc:	4683      	mov	fp, r0
   1f5ce:	600a      	str	r2, [r1, #0]
   1f5d0:	604b      	str	r3, [r1, #4]
   1f5d2:	465a      	mov	r2, fp
   1f5d4:	4653      	mov	r3, sl
   1f5d6:	0030      	movs	r0, r6
   1f5d8:	0039      	movs	r1, r7
   1f5da:	f003 fe33 	bl	23244 <__aeabi_dsub>
   1f5de:	9a02      	ldr	r2, [sp, #8]
   1f5e0:	9b03      	ldr	r3, [sp, #12]
   1f5e2:	f003 fe2f 	bl	23244 <__aeabi_dsub>
   1f5e6:	4644      	mov	r4, r8
   1f5e8:	000b      	movs	r3, r1
   1f5ea:	0002      	movs	r2, r0
   1f5ec:	60a2      	str	r2, [r4, #8]
   1f5ee:	60e3      	str	r3, [r4, #12]
   1f5f0:	464b      	mov	r3, r9
   1f5f2:	2b00      	cmp	r3, #0
   1f5f4:	db00      	blt.n	1f5f8 <__ieee754_rem_pio2+0x240>
   1f5f6:	e780      	b.n	1f4fa <__ieee754_rem_pio2+0x142>
   1f5f8:	465b      	mov	r3, fp
   1f5fa:	6023      	str	r3, [r4, #0]
   1f5fc:	2380      	movs	r3, #128	; 0x80
   1f5fe:	061b      	lsls	r3, r3, #24
   1f600:	4453      	add	r3, sl
   1f602:	6063      	str	r3, [r4, #4]
   1f604:	2380      	movs	r3, #128	; 0x80
   1f606:	061b      	lsls	r3, r3, #24
   1f608:	469c      	mov	ip, r3
   1f60a:	4461      	add	r1, ip
   1f60c:	60a0      	str	r0, [r4, #8]
   1f60e:	60e1      	str	r1, [r4, #12]
   1f610:	426d      	negs	r5, r5
   1f612:	e772      	b.n	1f4fa <__ieee754_rem_pio2+0x142>
   1f614:	9a02      	ldr	r2, [sp, #8]
   1f616:	9b03      	ldr	r3, [sp, #12]
   1f618:	0030      	movs	r0, r6
   1f61a:	0039      	movs	r1, r7
   1f61c:	f003 fe12 	bl	23244 <__aeabi_dsub>
   1f620:	000b      	movs	r3, r1
   1f622:	468a      	mov	sl, r1
   1f624:	0002      	movs	r2, r0
   1f626:	4641      	mov	r1, r8
   1f628:	600a      	str	r2, [r1, #0]
   1f62a:	604b      	str	r3, [r1, #4]
   1f62c:	4653      	mov	r3, sl
   1f62e:	005b      	lsls	r3, r3, #1
   1f630:	1524      	asrs	r4, r4, #20
   1f632:	0d5b      	lsrs	r3, r3, #21
   1f634:	4683      	mov	fp, r0
   1f636:	1ae3      	subs	r3, r4, r3
   1f638:	2b10      	cmp	r3, #16
   1f63a:	ddca      	ble.n	1f5d2 <__ieee754_rem_pio2+0x21a>
   1f63c:	9804      	ldr	r0, [sp, #16]
   1f63e:	9905      	ldr	r1, [sp, #20]
   1f640:	22d3      	movs	r2, #211	; 0xd3
   1f642:	4b3a      	ldr	r3, [pc, #232]	; (1f72c <__ieee754_rem_pio2+0x374>)
   1f644:	0552      	lsls	r2, r2, #21
   1f646:	f003 fb7d 	bl	22d44 <__aeabi_dmul>
   1f64a:	9002      	str	r0, [sp, #8]
   1f64c:	9103      	str	r1, [sp, #12]
   1f64e:	0002      	movs	r2, r0
   1f650:	000b      	movs	r3, r1
   1f652:	0030      	movs	r0, r6
   1f654:	0039      	movs	r1, r7
   1f656:	f003 fdf5 	bl	23244 <__aeabi_dsub>
   1f65a:	9006      	str	r0, [sp, #24]
   1f65c:	9107      	str	r1, [sp, #28]
   1f65e:	0002      	movs	r2, r0
   1f660:	000b      	movs	r3, r1
   1f662:	0030      	movs	r0, r6
   1f664:	0039      	movs	r1, r7
   1f666:	f003 fded 	bl	23244 <__aeabi_dsub>
   1f66a:	9a02      	ldr	r2, [sp, #8]
   1f66c:	9b03      	ldr	r3, [sp, #12]
   1f66e:	f003 fde9 	bl	23244 <__aeabi_dsub>
   1f672:	0006      	movs	r6, r0
   1f674:	000f      	movs	r7, r1
   1f676:	9804      	ldr	r0, [sp, #16]
   1f678:	9905      	ldr	r1, [sp, #20]
   1f67a:	4a32      	ldr	r2, [pc, #200]	; (1f744 <__ieee754_rem_pio2+0x38c>)
   1f67c:	4b32      	ldr	r3, [pc, #200]	; (1f748 <__ieee754_rem_pio2+0x390>)
   1f67e:	f003 fb61 	bl	22d44 <__aeabi_dmul>
   1f682:	0032      	movs	r2, r6
   1f684:	003b      	movs	r3, r7
   1f686:	f003 fddd 	bl	23244 <__aeabi_dsub>
   1f68a:	9e06      	ldr	r6, [sp, #24]
   1f68c:	9f07      	ldr	r7, [sp, #28]
   1f68e:	0002      	movs	r2, r0
   1f690:	000b      	movs	r3, r1
   1f692:	0030      	movs	r0, r6
   1f694:	0039      	movs	r1, r7
   1f696:	9202      	str	r2, [sp, #8]
   1f698:	9303      	str	r3, [sp, #12]
   1f69a:	f003 fdd3 	bl	23244 <__aeabi_dsub>
   1f69e:	000b      	movs	r3, r1
   1f6a0:	468a      	mov	sl, r1
   1f6a2:	0002      	movs	r2, r0
   1f6a4:	4641      	mov	r1, r8
   1f6a6:	600a      	str	r2, [r1, #0]
   1f6a8:	604b      	str	r3, [r1, #4]
   1f6aa:	4653      	mov	r3, sl
   1f6ac:	005b      	lsls	r3, r3, #1
   1f6ae:	0d5b      	lsrs	r3, r3, #21
   1f6b0:	4683      	mov	fp, r0
   1f6b2:	1ae4      	subs	r4, r4, r3
   1f6b4:	9606      	str	r6, [sp, #24]
   1f6b6:	9707      	str	r7, [sp, #28]
   1f6b8:	2c31      	cmp	r4, #49	; 0x31
   1f6ba:	dd8a      	ble.n	1f5d2 <__ieee754_rem_pio2+0x21a>
   1f6bc:	9804      	ldr	r0, [sp, #16]
   1f6be:	9905      	ldr	r1, [sp, #20]
   1f6c0:	22b8      	movs	r2, #184	; 0xb8
   1f6c2:	4b21      	ldr	r3, [pc, #132]	; (1f748 <__ieee754_rem_pio2+0x390>)
   1f6c4:	0592      	lsls	r2, r2, #22
   1f6c6:	f003 fb3d 	bl	22d44 <__aeabi_dmul>
   1f6ca:	0003      	movs	r3, r0
   1f6cc:	000c      	movs	r4, r1
   1f6ce:	0002      	movs	r2, r0
   1f6d0:	9302      	str	r3, [sp, #8]
   1f6d2:	9403      	str	r4, [sp, #12]
   1f6d4:	0030      	movs	r0, r6
   1f6d6:	000b      	movs	r3, r1
   1f6d8:	0039      	movs	r1, r7
   1f6da:	f003 fdb3 	bl	23244 <__aeabi_dsub>
   1f6de:	0002      	movs	r2, r0
   1f6e0:	000b      	movs	r3, r1
   1f6e2:	0006      	movs	r6, r0
   1f6e4:	000f      	movs	r7, r1
   1f6e6:	9806      	ldr	r0, [sp, #24]
   1f6e8:	9907      	ldr	r1, [sp, #28]
   1f6ea:	f003 fdab 	bl	23244 <__aeabi_dsub>
   1f6ee:	9a02      	ldr	r2, [sp, #8]
   1f6f0:	9b03      	ldr	r3, [sp, #12]
   1f6f2:	f003 fda7 	bl	23244 <__aeabi_dsub>
   1f6f6:	4a19      	ldr	r2, [pc, #100]	; (1f75c <__ieee754_rem_pio2+0x3a4>)
   1f6f8:	9002      	str	r0, [sp, #8]
   1f6fa:	9103      	str	r1, [sp, #12]
   1f6fc:	9804      	ldr	r0, [sp, #16]
   1f6fe:	9905      	ldr	r1, [sp, #20]
   1f700:	4b17      	ldr	r3, [pc, #92]	; (1f760 <__ieee754_rem_pio2+0x3a8>)
   1f702:	f003 fb1f 	bl	22d44 <__aeabi_dmul>
   1f706:	9a02      	ldr	r2, [sp, #8]
   1f708:	9b03      	ldr	r3, [sp, #12]
   1f70a:	f003 fd9b 	bl	23244 <__aeabi_dsub>
   1f70e:	0002      	movs	r2, r0
   1f710:	000b      	movs	r3, r1
   1f712:	9202      	str	r2, [sp, #8]
   1f714:	9303      	str	r3, [sp, #12]
   1f716:	e751      	b.n	1f5bc <__ieee754_rem_pio2+0x204>
   1f718:	3fe921fb 	.word	0x3fe921fb
   1f71c:	4002d97b 	.word	0x4002d97b
   1f720:	54400000 	.word	0x54400000
   1f724:	3ff921fb 	.word	0x3ff921fb
   1f728:	1a626331 	.word	0x1a626331
   1f72c:	3dd0b461 	.word	0x3dd0b461
   1f730:	413921fb 	.word	0x413921fb
   1f734:	7fefffff 	.word	0x7fefffff
   1f738:	fffffbea 	.word	0xfffffbea
   1f73c:	41700000 	.word	0x41700000
   1f740:	00029994 	.word	0x00029994
   1f744:	2e037073 	.word	0x2e037073
   1f748:	3ba3198a 	.word	0x3ba3198a
   1f74c:	6dc9c883 	.word	0x6dc9c883
   1f750:	3fe45f30 	.word	0x3fe45f30
   1f754:	3fe00000 	.word	0x3fe00000
   1f758:	00029914 	.word	0x00029914
   1f75c:	252049c1 	.word	0x252049c1
   1f760:	397b839a 	.word	0x397b839a
   1f764:	4b1b      	ldr	r3, [pc, #108]	; (1f7d4 <__ieee754_rem_pio2+0x41c>)
   1f766:	f002 fba9 	bl	21ebc <__aeabi_dadd>
   1f76a:	4b1a      	ldr	r3, [pc, #104]	; (1f7d4 <__ieee754_rem_pio2+0x41c>)
   1f76c:	0006      	movs	r6, r0
   1f76e:	000f      	movs	r7, r1
   1f770:	429c      	cmp	r4, r3
   1f772:	d018      	beq.n	1f7a6 <__ieee754_rem_pio2+0x3ee>
   1f774:	4a18      	ldr	r2, [pc, #96]	; (1f7d8 <__ieee754_rem_pio2+0x420>)
   1f776:	4b19      	ldr	r3, [pc, #100]	; (1f7dc <__ieee754_rem_pio2+0x424>)
   1f778:	f002 fba0 	bl	21ebc <__aeabi_dadd>
   1f77c:	0002      	movs	r2, r0
   1f77e:	000b      	movs	r3, r1
   1f780:	4641      	mov	r1, r8
   1f782:	0030      	movs	r0, r6
   1f784:	600a      	str	r2, [r1, #0]
   1f786:	604b      	str	r3, [r1, #4]
   1f788:	0039      	movs	r1, r7
   1f78a:	f003 fd5b 	bl	23244 <__aeabi_dsub>
   1f78e:	4a12      	ldr	r2, [pc, #72]	; (1f7d8 <__ieee754_rem_pio2+0x420>)
   1f790:	4b12      	ldr	r3, [pc, #72]	; (1f7dc <__ieee754_rem_pio2+0x424>)
   1f792:	f002 fb93 	bl	21ebc <__aeabi_dadd>
   1f796:	2501      	movs	r5, #1
   1f798:	4643      	mov	r3, r8
   1f79a:	426d      	negs	r5, r5
   1f79c:	6098      	str	r0, [r3, #8]
   1f79e:	60d9      	str	r1, [r3, #12]
   1f7a0:	e6ab      	b.n	1f4fa <__ieee754_rem_pio2+0x142>
   1f7a2:	2303      	movs	r3, #3
   1f7a4:	e684      	b.n	1f4b0 <__ieee754_rem_pio2+0xf8>
   1f7a6:	22d3      	movs	r2, #211	; 0xd3
   1f7a8:	4b0c      	ldr	r3, [pc, #48]	; (1f7dc <__ieee754_rem_pio2+0x424>)
   1f7aa:	0552      	lsls	r2, r2, #21
   1f7ac:	f002 fb86 	bl	21ebc <__aeabi_dadd>
   1f7b0:	4a0b      	ldr	r2, [pc, #44]	; (1f7e0 <__ieee754_rem_pio2+0x428>)
   1f7b2:	4b0c      	ldr	r3, [pc, #48]	; (1f7e4 <__ieee754_rem_pio2+0x42c>)
   1f7b4:	0004      	movs	r4, r0
   1f7b6:	000d      	movs	r5, r1
   1f7b8:	f002 fb80 	bl	21ebc <__aeabi_dadd>
   1f7bc:	0002      	movs	r2, r0
   1f7be:	000b      	movs	r3, r1
   1f7c0:	4641      	mov	r1, r8
   1f7c2:	0020      	movs	r0, r4
   1f7c4:	600a      	str	r2, [r1, #0]
   1f7c6:	604b      	str	r3, [r1, #4]
   1f7c8:	0029      	movs	r1, r5
   1f7ca:	f003 fd3b 	bl	23244 <__aeabi_dsub>
   1f7ce:	4a04      	ldr	r2, [pc, #16]	; (1f7e0 <__ieee754_rem_pio2+0x428>)
   1f7d0:	4b04      	ldr	r3, [pc, #16]	; (1f7e4 <__ieee754_rem_pio2+0x42c>)
   1f7d2:	e7de      	b.n	1f792 <__ieee754_rem_pio2+0x3da>
   1f7d4:	3ff921fb 	.word	0x3ff921fb
   1f7d8:	1a626331 	.word	0x1a626331
   1f7dc:	3dd0b461 	.word	0x3dd0b461
   1f7e0:	2e037073 	.word	0x2e037073
   1f7e4:	3ba3198a 	.word	0x3ba3198a

0001f7e8 <__ieee754_sqrt>:
   1f7e8:	4b6c      	ldr	r3, [pc, #432]	; (1f99c <__ieee754_sqrt+0x1b4>)
   1f7ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f7ec:	000a      	movs	r2, r1
   1f7ee:	4646      	mov	r6, r8
   1f7f0:	000d      	movs	r5, r1
   1f7f2:	46d6      	mov	lr, sl
   1f7f4:	464f      	mov	r7, r9
   1f7f6:	0019      	movs	r1, r3
   1f7f8:	b5c0      	push	{r6, r7, lr}
   1f7fa:	0004      	movs	r4, r0
   1f7fc:	0006      	movs	r6, r0
   1f7fe:	4029      	ands	r1, r5
   1f800:	4299      	cmp	r1, r3
   1f802:	d100      	bne.n	1f806 <__ieee754_sqrt+0x1e>
   1f804:	e0a7      	b.n	1f956 <__ieee754_sqrt+0x16e>
   1f806:	2d00      	cmp	r5, #0
   1f808:	dc00      	bgt.n	1f80c <__ieee754_sqrt+0x24>
   1f80a:	e081      	b.n	1f910 <__ieee754_sqrt+0x128>
   1f80c:	152f      	asrs	r7, r5, #20
   1f80e:	d100      	bne.n	1f812 <__ieee754_sqrt+0x2a>
   1f810:	e08e      	b.n	1f930 <__ieee754_sqrt+0x148>
   1f812:	4b63      	ldr	r3, [pc, #396]	; (1f9a0 <__ieee754_sqrt+0x1b8>)
   1f814:	0312      	lsls	r2, r2, #12
   1f816:	469c      	mov	ip, r3
   1f818:	2380      	movs	r3, #128	; 0x80
   1f81a:	0b12      	lsrs	r2, r2, #12
   1f81c:	035b      	lsls	r3, r3, #13
   1f81e:	4467      	add	r7, ip
   1f820:	431a      	orrs	r2, r3
   1f822:	07fb      	lsls	r3, r7, #31
   1f824:	d468      	bmi.n	1f8f8 <__ieee754_sqrt+0x110>
   1f826:	107b      	asrs	r3, r7, #1
   1f828:	469c      	mov	ip, r3
   1f82a:	0fe3      	lsrs	r3, r4, #31
   1f82c:	189b      	adds	r3, r3, r2
   1f82e:	189b      	adds	r3, r3, r2
   1f830:	2280      	movs	r2, #128	; 0x80
   1f832:	2116      	movs	r1, #22
   1f834:	2600      	movs	r6, #0
   1f836:	2500      	movs	r5, #0
   1f838:	0064      	lsls	r4, r4, #1
   1f83a:	0392      	lsls	r2, r2, #14
   1f83c:	18a8      	adds	r0, r5, r2
   1f83e:	4298      	cmp	r0, r3
   1f840:	dc02      	bgt.n	1f848 <__ieee754_sqrt+0x60>
   1f842:	1885      	adds	r5, r0, r2
   1f844:	1a1b      	subs	r3, r3, r0
   1f846:	18b6      	adds	r6, r6, r2
   1f848:	0fe0      	lsrs	r0, r4, #31
   1f84a:	005b      	lsls	r3, r3, #1
   1f84c:	3901      	subs	r1, #1
   1f84e:	181b      	adds	r3, r3, r0
   1f850:	0064      	lsls	r4, r4, #1
   1f852:	0852      	lsrs	r2, r2, #1
   1f854:	2900      	cmp	r1, #0
   1f856:	d1f1      	bne.n	1f83c <__ieee754_sqrt+0x54>
   1f858:	2200      	movs	r2, #0
   1f85a:	4692      	mov	sl, r2
   1f85c:	4690      	mov	r8, r2
   1f85e:	2280      	movs	r2, #128	; 0x80
   1f860:	2020      	movs	r0, #32
   1f862:	0612      	lsls	r2, r2, #24
   1f864:	e009      	b.n	1f87a <__ieee754_sqrt+0x92>
   1f866:	42ab      	cmp	r3, r5
   1f868:	d038      	beq.n	1f8dc <__ieee754_sqrt+0xf4>
   1f86a:	0fe1      	lsrs	r1, r4, #31
   1f86c:	18c9      	adds	r1, r1, r3
   1f86e:	3801      	subs	r0, #1
   1f870:	18cb      	adds	r3, r1, r3
   1f872:	0064      	lsls	r4, r4, #1
   1f874:	0852      	lsrs	r2, r2, #1
   1f876:	2800      	cmp	r0, #0
   1f878:	d018      	beq.n	1f8ac <__ieee754_sqrt+0xc4>
   1f87a:	4641      	mov	r1, r8
   1f87c:	1851      	adds	r1, r2, r1
   1f87e:	42ab      	cmp	r3, r5
   1f880:	ddf1      	ble.n	1f866 <__ieee754_sqrt+0x7e>
   1f882:	188f      	adds	r7, r1, r2
   1f884:	46b8      	mov	r8, r7
   1f886:	46a9      	mov	r9, r5
   1f888:	2900      	cmp	r1, #0
   1f88a:	db30      	blt.n	1f8ee <__ieee754_sqrt+0x106>
   1f88c:	1b5b      	subs	r3, r3, r5
   1f88e:	428c      	cmp	r4, r1
   1f890:	41ad      	sbcs	r5, r5
   1f892:	426d      	negs	r5, r5
   1f894:	1b5b      	subs	r3, r3, r5
   1f896:	1a64      	subs	r4, r4, r1
   1f898:	0fe1      	lsrs	r1, r4, #31
   1f89a:	18c9      	adds	r1, r1, r3
   1f89c:	3801      	subs	r0, #1
   1f89e:	4492      	add	sl, r2
   1f8a0:	464d      	mov	r5, r9
   1f8a2:	18cb      	adds	r3, r1, r3
   1f8a4:	0064      	lsls	r4, r4, #1
   1f8a6:	0852      	lsrs	r2, r2, #1
   1f8a8:	2800      	cmp	r0, #0
   1f8aa:	d1e6      	bne.n	1f87a <__ieee754_sqrt+0x92>
   1f8ac:	4323      	orrs	r3, r4
   1f8ae:	d128      	bne.n	1f902 <__ieee754_sqrt+0x11a>
   1f8b0:	4653      	mov	r3, sl
   1f8b2:	085b      	lsrs	r3, r3, #1
   1f8b4:	493b      	ldr	r1, [pc, #236]	; (1f9a4 <__ieee754_sqrt+0x1bc>)
   1f8b6:	1072      	asrs	r2, r6, #1
   1f8b8:	4688      	mov	r8, r1
   1f8ba:	4442      	add	r2, r8
   1f8bc:	07f1      	lsls	r1, r6, #31
   1f8be:	d502      	bpl.n	1f8c6 <__ieee754_sqrt+0xde>
   1f8c0:	2180      	movs	r1, #128	; 0x80
   1f8c2:	0609      	lsls	r1, r1, #24
   1f8c4:	430b      	orrs	r3, r1
   1f8c6:	4661      	mov	r1, ip
   1f8c8:	001e      	movs	r6, r3
   1f8ca:	050f      	lsls	r7, r1, #20
   1f8cc:	18bd      	adds	r5, r7, r2
   1f8ce:	0030      	movs	r0, r6
   1f8d0:	0029      	movs	r1, r5
   1f8d2:	bc1c      	pop	{r2, r3, r4}
   1f8d4:	4690      	mov	r8, r2
   1f8d6:	4699      	mov	r9, r3
   1f8d8:	46a2      	mov	sl, r4
   1f8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8dc:	42a1      	cmp	r1, r4
   1f8de:	d8c4      	bhi.n	1f86a <__ieee754_sqrt+0x82>
   1f8e0:	188f      	adds	r7, r1, r2
   1f8e2:	46b8      	mov	r8, r7
   1f8e4:	2900      	cmp	r1, #0
   1f8e6:	db42      	blt.n	1f96e <__ieee754_sqrt+0x186>
   1f8e8:	4699      	mov	r9, r3
   1f8ea:	2300      	movs	r3, #0
   1f8ec:	e7d3      	b.n	1f896 <__ieee754_sqrt+0xae>
   1f8ee:	2f00      	cmp	r7, #0
   1f8f0:	db2f      	blt.n	1f952 <__ieee754_sqrt+0x16a>
   1f8f2:	1c6f      	adds	r7, r5, #1
   1f8f4:	46b9      	mov	r9, r7
   1f8f6:	e7c9      	b.n	1f88c <__ieee754_sqrt+0xa4>
   1f8f8:	0fe1      	lsrs	r1, r4, #31
   1f8fa:	0052      	lsls	r2, r2, #1
   1f8fc:	188a      	adds	r2, r1, r2
   1f8fe:	0064      	lsls	r4, r4, #1
   1f900:	e791      	b.n	1f826 <__ieee754_sqrt+0x3e>
   1f902:	4653      	mov	r3, sl
   1f904:	3301      	adds	r3, #1
   1f906:	d035      	beq.n	1f974 <__ieee754_sqrt+0x18c>
   1f908:	4653      	mov	r3, sl
   1f90a:	3301      	adds	r3, #1
   1f90c:	085b      	lsrs	r3, r3, #1
   1f90e:	e7d1      	b.n	1f8b4 <__ieee754_sqrt+0xcc>
   1f910:	006b      	lsls	r3, r5, #1
   1f912:	085b      	lsrs	r3, r3, #1
   1f914:	4303      	orrs	r3, r0
   1f916:	d0da      	beq.n	1f8ce <__ieee754_sqrt+0xe6>
   1f918:	2700      	movs	r7, #0
   1f91a:	2d00      	cmp	r5, #0
   1f91c:	d132      	bne.n	1f984 <__ieee754_sqrt+0x19c>
   1f91e:	0ae2      	lsrs	r2, r4, #11
   1f920:	3f15      	subs	r7, #21
   1f922:	0564      	lsls	r4, r4, #21
   1f924:	2a00      	cmp	r2, #0
   1f926:	d0fa      	beq.n	1f91e <__ieee754_sqrt+0x136>
   1f928:	2380      	movs	r3, #128	; 0x80
   1f92a:	035b      	lsls	r3, r3, #13
   1f92c:	421a      	tst	r2, r3
   1f92e:	d124      	bne.n	1f97a <__ieee754_sqrt+0x192>
   1f930:	2080      	movs	r0, #128	; 0x80
   1f932:	2300      	movs	r3, #0
   1f934:	0340      	lsls	r0, r0, #13
   1f936:	e000      	b.n	1f93a <__ieee754_sqrt+0x152>
   1f938:	000b      	movs	r3, r1
   1f93a:	0052      	lsls	r2, r2, #1
   1f93c:	1c59      	adds	r1, r3, #1
   1f93e:	4202      	tst	r2, r0
   1f940:	d0fa      	beq.n	1f938 <__ieee754_sqrt+0x150>
   1f942:	2020      	movs	r0, #32
   1f944:	1a40      	subs	r0, r0, r1
   1f946:	1aff      	subs	r7, r7, r3
   1f948:	0023      	movs	r3, r4
   1f94a:	40c3      	lsrs	r3, r0
   1f94c:	408c      	lsls	r4, r1
   1f94e:	431a      	orrs	r2, r3
   1f950:	e75f      	b.n	1f812 <__ieee754_sqrt+0x2a>
   1f952:	46a9      	mov	r9, r5
   1f954:	e79a      	b.n	1f88c <__ieee754_sqrt+0xa4>
   1f956:	002b      	movs	r3, r5
   1f958:	0002      	movs	r2, r0
   1f95a:	0029      	movs	r1, r5
   1f95c:	f003 f9f2 	bl	22d44 <__aeabi_dmul>
   1f960:	0032      	movs	r2, r6
   1f962:	002b      	movs	r3, r5
   1f964:	f002 faaa 	bl	21ebc <__aeabi_dadd>
   1f968:	0006      	movs	r6, r0
   1f96a:	000d      	movs	r5, r1
   1f96c:	e7af      	b.n	1f8ce <__ieee754_sqrt+0xe6>
   1f96e:	2f00      	cmp	r7, #0
   1f970:	dabf      	bge.n	1f8f2 <__ieee754_sqrt+0x10a>
   1f972:	e7b9      	b.n	1f8e8 <__ieee754_sqrt+0x100>
   1f974:	3601      	adds	r6, #1
   1f976:	2300      	movs	r3, #0
   1f978:	e79c      	b.n	1f8b4 <__ieee754_sqrt+0xcc>
   1f97a:	2301      	movs	r3, #1
   1f97c:	2100      	movs	r1, #0
   1f97e:	2020      	movs	r0, #32
   1f980:	425b      	negs	r3, r3
   1f982:	e7e0      	b.n	1f946 <__ieee754_sqrt+0x15e>
   1f984:	002b      	movs	r3, r5
   1f986:	0002      	movs	r2, r0
   1f988:	0029      	movs	r1, r5
   1f98a:	f003 fc5b 	bl	23244 <__aeabi_dsub>
   1f98e:	0002      	movs	r2, r0
   1f990:	000b      	movs	r3, r1
   1f992:	f002 fda3 	bl	224dc <__aeabi_ddiv>
   1f996:	0006      	movs	r6, r0
   1f998:	000d      	movs	r5, r1
   1f99a:	e798      	b.n	1f8ce <__ieee754_sqrt+0xe6>
   1f99c:	7ff00000 	.word	0x7ff00000
   1f9a0:	fffffc01 	.word	0xfffffc01
   1f9a4:	3fe00000 	.word	0x3fe00000

0001f9a8 <__kernel_cos>:
   1f9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f9aa:	4647      	mov	r7, r8
   1f9ac:	46ce      	mov	lr, r9
   1f9ae:	b580      	push	{r7, lr}
   1f9b0:	b087      	sub	sp, #28
   1f9b2:	9200      	str	r2, [sp, #0]
   1f9b4:	9301      	str	r3, [sp, #4]
   1f9b6:	4b75      	ldr	r3, [pc, #468]	; (1fb8c <__kernel_cos+0x1e4>)
   1f9b8:	004f      	lsls	r7, r1, #1
   1f9ba:	4681      	mov	r9, r0
   1f9bc:	4688      	mov	r8, r1
   1f9be:	087f      	lsrs	r7, r7, #1
   1f9c0:	429f      	cmp	r7, r3
   1f9c2:	dc63      	bgt.n	1fa8c <__kernel_cos+0xe4>
   1f9c4:	f003 ff74 	bl	238b0 <__aeabi_d2iz>
   1f9c8:	2800      	cmp	r0, #0
   1f9ca:	d100      	bne.n	1f9ce <__kernel_cos+0x26>
   1f9cc:	e0da      	b.n	1fb84 <__kernel_cos+0x1dc>
   1f9ce:	464a      	mov	r2, r9
   1f9d0:	4643      	mov	r3, r8
   1f9d2:	4648      	mov	r0, r9
   1f9d4:	4641      	mov	r1, r8
   1f9d6:	f003 f9b5 	bl	22d44 <__aeabi_dmul>
   1f9da:	0004      	movs	r4, r0
   1f9dc:	000d      	movs	r5, r1
   1f9de:	4a6c      	ldr	r2, [pc, #432]	; (1fb90 <__kernel_cos+0x1e8>)
   1f9e0:	4b6c      	ldr	r3, [pc, #432]	; (1fb94 <__kernel_cos+0x1ec>)
   1f9e2:	f003 f9af 	bl	22d44 <__aeabi_dmul>
   1f9e6:	4a6c      	ldr	r2, [pc, #432]	; (1fb98 <__kernel_cos+0x1f0>)
   1f9e8:	4b6c      	ldr	r3, [pc, #432]	; (1fb9c <__kernel_cos+0x1f4>)
   1f9ea:	f002 fa67 	bl	21ebc <__aeabi_dadd>
   1f9ee:	0022      	movs	r2, r4
   1f9f0:	002b      	movs	r3, r5
   1f9f2:	f003 f9a7 	bl	22d44 <__aeabi_dmul>
   1f9f6:	4a6a      	ldr	r2, [pc, #424]	; (1fba0 <__kernel_cos+0x1f8>)
   1f9f8:	4b6a      	ldr	r3, [pc, #424]	; (1fba4 <__kernel_cos+0x1fc>)
   1f9fa:	f003 fc23 	bl	23244 <__aeabi_dsub>
   1f9fe:	0022      	movs	r2, r4
   1fa00:	002b      	movs	r3, r5
   1fa02:	f003 f99f 	bl	22d44 <__aeabi_dmul>
   1fa06:	4a68      	ldr	r2, [pc, #416]	; (1fba8 <__kernel_cos+0x200>)
   1fa08:	4b68      	ldr	r3, [pc, #416]	; (1fbac <__kernel_cos+0x204>)
   1fa0a:	f002 fa57 	bl	21ebc <__aeabi_dadd>
   1fa0e:	0022      	movs	r2, r4
   1fa10:	002b      	movs	r3, r5
   1fa12:	f003 f997 	bl	22d44 <__aeabi_dmul>
   1fa16:	4a66      	ldr	r2, [pc, #408]	; (1fbb0 <__kernel_cos+0x208>)
   1fa18:	4b66      	ldr	r3, [pc, #408]	; (1fbb4 <__kernel_cos+0x20c>)
   1fa1a:	f003 fc13 	bl	23244 <__aeabi_dsub>
   1fa1e:	0022      	movs	r2, r4
   1fa20:	002b      	movs	r3, r5
   1fa22:	f003 f98f 	bl	22d44 <__aeabi_dmul>
   1fa26:	4a64      	ldr	r2, [pc, #400]	; (1fbb8 <__kernel_cos+0x210>)
   1fa28:	4b64      	ldr	r3, [pc, #400]	; (1fbbc <__kernel_cos+0x214>)
   1fa2a:	f002 fa47 	bl	21ebc <__aeabi_dadd>
   1fa2e:	0022      	movs	r2, r4
   1fa30:	002b      	movs	r3, r5
   1fa32:	f003 f987 	bl	22d44 <__aeabi_dmul>
   1fa36:	9002      	str	r0, [sp, #8]
   1fa38:	9103      	str	r1, [sp, #12]
   1fa3a:	2200      	movs	r2, #0
   1fa3c:	4b60      	ldr	r3, [pc, #384]	; (1fbc0 <__kernel_cos+0x218>)
   1fa3e:	0020      	movs	r0, r4
   1fa40:	0029      	movs	r1, r5
   1fa42:	f003 f97f 	bl	22d44 <__aeabi_dmul>
   1fa46:	9a02      	ldr	r2, [sp, #8]
   1fa48:	9b03      	ldr	r3, [sp, #12]
   1fa4a:	0006      	movs	r6, r0
   1fa4c:	000f      	movs	r7, r1
   1fa4e:	0020      	movs	r0, r4
   1fa50:	0029      	movs	r1, r5
   1fa52:	f003 f977 	bl	22d44 <__aeabi_dmul>
   1fa56:	9a00      	ldr	r2, [sp, #0]
   1fa58:	9b01      	ldr	r3, [sp, #4]
   1fa5a:	0004      	movs	r4, r0
   1fa5c:	000d      	movs	r5, r1
   1fa5e:	4648      	mov	r0, r9
   1fa60:	4641      	mov	r1, r8
   1fa62:	f003 f96f 	bl	22d44 <__aeabi_dmul>
   1fa66:	0002      	movs	r2, r0
   1fa68:	000b      	movs	r3, r1
   1fa6a:	0020      	movs	r0, r4
   1fa6c:	0029      	movs	r1, r5
   1fa6e:	f003 fbe9 	bl	23244 <__aeabi_dsub>
   1fa72:	0002      	movs	r2, r0
   1fa74:	000b      	movs	r3, r1
   1fa76:	0030      	movs	r0, r6
   1fa78:	0039      	movs	r1, r7
   1fa7a:	f003 fbe3 	bl	23244 <__aeabi_dsub>
   1fa7e:	0002      	movs	r2, r0
   1fa80:	000b      	movs	r3, r1
   1fa82:	2000      	movs	r0, #0
   1fa84:	494f      	ldr	r1, [pc, #316]	; (1fbc4 <__kernel_cos+0x21c>)
   1fa86:	f003 fbdd 	bl	23244 <__aeabi_dsub>
   1fa8a:	e070      	b.n	1fb6e <__kernel_cos+0x1c6>
   1fa8c:	0002      	movs	r2, r0
   1fa8e:	000b      	movs	r3, r1
   1fa90:	f003 f958 	bl	22d44 <__aeabi_dmul>
   1fa94:	0004      	movs	r4, r0
   1fa96:	000d      	movs	r5, r1
   1fa98:	4a3d      	ldr	r2, [pc, #244]	; (1fb90 <__kernel_cos+0x1e8>)
   1fa9a:	4b3e      	ldr	r3, [pc, #248]	; (1fb94 <__kernel_cos+0x1ec>)
   1fa9c:	f003 f952 	bl	22d44 <__aeabi_dmul>
   1faa0:	4a3d      	ldr	r2, [pc, #244]	; (1fb98 <__kernel_cos+0x1f0>)
   1faa2:	4b3e      	ldr	r3, [pc, #248]	; (1fb9c <__kernel_cos+0x1f4>)
   1faa4:	f002 fa0a 	bl	21ebc <__aeabi_dadd>
   1faa8:	0022      	movs	r2, r4
   1faaa:	002b      	movs	r3, r5
   1faac:	f003 f94a 	bl	22d44 <__aeabi_dmul>
   1fab0:	4a3b      	ldr	r2, [pc, #236]	; (1fba0 <__kernel_cos+0x1f8>)
   1fab2:	4b3c      	ldr	r3, [pc, #240]	; (1fba4 <__kernel_cos+0x1fc>)
   1fab4:	f003 fbc6 	bl	23244 <__aeabi_dsub>
   1fab8:	0022      	movs	r2, r4
   1faba:	002b      	movs	r3, r5
   1fabc:	f003 f942 	bl	22d44 <__aeabi_dmul>
   1fac0:	4a39      	ldr	r2, [pc, #228]	; (1fba8 <__kernel_cos+0x200>)
   1fac2:	4b3a      	ldr	r3, [pc, #232]	; (1fbac <__kernel_cos+0x204>)
   1fac4:	f002 f9fa 	bl	21ebc <__aeabi_dadd>
   1fac8:	0022      	movs	r2, r4
   1faca:	002b      	movs	r3, r5
   1facc:	f003 f93a 	bl	22d44 <__aeabi_dmul>
   1fad0:	4a37      	ldr	r2, [pc, #220]	; (1fbb0 <__kernel_cos+0x208>)
   1fad2:	4b38      	ldr	r3, [pc, #224]	; (1fbb4 <__kernel_cos+0x20c>)
   1fad4:	f003 fbb6 	bl	23244 <__aeabi_dsub>
   1fad8:	0022      	movs	r2, r4
   1fada:	002b      	movs	r3, r5
   1fadc:	f003 f932 	bl	22d44 <__aeabi_dmul>
   1fae0:	4a35      	ldr	r2, [pc, #212]	; (1fbb8 <__kernel_cos+0x210>)
   1fae2:	4b36      	ldr	r3, [pc, #216]	; (1fbbc <__kernel_cos+0x214>)
   1fae4:	f002 f9ea 	bl	21ebc <__aeabi_dadd>
   1fae8:	002b      	movs	r3, r5
   1faea:	0022      	movs	r2, r4
   1faec:	f003 f92a 	bl	22d44 <__aeabi_dmul>
   1faf0:	4b35      	ldr	r3, [pc, #212]	; (1fbc8 <__kernel_cos+0x220>)
   1faf2:	9002      	str	r0, [sp, #8]
   1faf4:	9103      	str	r1, [sp, #12]
   1faf6:	429f      	cmp	r7, r3
   1faf8:	dd9f      	ble.n	1fa3a <__kernel_cos+0x92>
   1fafa:	4b34      	ldr	r3, [pc, #208]	; (1fbcc <__kernel_cos+0x224>)
   1fafc:	2200      	movs	r2, #0
   1fafe:	429f      	cmp	r7, r3
   1fb00:	dc3a      	bgt.n	1fb78 <__kernel_cos+0x1d0>
   1fb02:	4933      	ldr	r1, [pc, #204]	; (1fbd0 <__kernel_cos+0x228>)
   1fb04:	2000      	movs	r0, #0
   1fb06:	187b      	adds	r3, r7, r1
   1fb08:	492e      	ldr	r1, [pc, #184]	; (1fbc4 <__kernel_cos+0x21c>)
   1fb0a:	0016      	movs	r6, r2
   1fb0c:	001f      	movs	r7, r3
   1fb0e:	f003 fb99 	bl	23244 <__aeabi_dsub>
   1fb12:	9004      	str	r0, [sp, #16]
   1fb14:	9105      	str	r1, [sp, #20]
   1fb16:	2200      	movs	r2, #0
   1fb18:	4b29      	ldr	r3, [pc, #164]	; (1fbc0 <__kernel_cos+0x218>)
   1fb1a:	0020      	movs	r0, r4
   1fb1c:	0029      	movs	r1, r5
   1fb1e:	f003 f911 	bl	22d44 <__aeabi_dmul>
   1fb22:	0032      	movs	r2, r6
   1fb24:	003b      	movs	r3, r7
   1fb26:	f003 fb8d 	bl	23244 <__aeabi_dsub>
   1fb2a:	9a02      	ldr	r2, [sp, #8]
   1fb2c:	9b03      	ldr	r3, [sp, #12]
   1fb2e:	0006      	movs	r6, r0
   1fb30:	000f      	movs	r7, r1
   1fb32:	0020      	movs	r0, r4
   1fb34:	0029      	movs	r1, r5
   1fb36:	f003 f905 	bl	22d44 <__aeabi_dmul>
   1fb3a:	9a00      	ldr	r2, [sp, #0]
   1fb3c:	9b01      	ldr	r3, [sp, #4]
   1fb3e:	0004      	movs	r4, r0
   1fb40:	000d      	movs	r5, r1
   1fb42:	4648      	mov	r0, r9
   1fb44:	4641      	mov	r1, r8
   1fb46:	f003 f8fd 	bl	22d44 <__aeabi_dmul>
   1fb4a:	0002      	movs	r2, r0
   1fb4c:	000b      	movs	r3, r1
   1fb4e:	0020      	movs	r0, r4
   1fb50:	0029      	movs	r1, r5
   1fb52:	f003 fb77 	bl	23244 <__aeabi_dsub>
   1fb56:	0002      	movs	r2, r0
   1fb58:	000b      	movs	r3, r1
   1fb5a:	0030      	movs	r0, r6
   1fb5c:	0039      	movs	r1, r7
   1fb5e:	f003 fb71 	bl	23244 <__aeabi_dsub>
   1fb62:	0002      	movs	r2, r0
   1fb64:	000b      	movs	r3, r1
   1fb66:	9804      	ldr	r0, [sp, #16]
   1fb68:	9905      	ldr	r1, [sp, #20]
   1fb6a:	f003 fb6b 	bl	23244 <__aeabi_dsub>
   1fb6e:	b007      	add	sp, #28
   1fb70:	bc0c      	pop	{r2, r3}
   1fb72:	4690      	mov	r8, r2
   1fb74:	4699      	mov	r9, r3
   1fb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fb78:	4b16      	ldr	r3, [pc, #88]	; (1fbd4 <__kernel_cos+0x22c>)
   1fb7a:	2600      	movs	r6, #0
   1fb7c:	9204      	str	r2, [sp, #16]
   1fb7e:	9305      	str	r3, [sp, #20]
   1fb80:	4f15      	ldr	r7, [pc, #84]	; (1fbd8 <__kernel_cos+0x230>)
   1fb82:	e7c8      	b.n	1fb16 <__kernel_cos+0x16e>
   1fb84:	2000      	movs	r0, #0
   1fb86:	490f      	ldr	r1, [pc, #60]	; (1fbc4 <__kernel_cos+0x21c>)
   1fb88:	e7f1      	b.n	1fb6e <__kernel_cos+0x1c6>
   1fb8a:	46c0      	nop			; (mov r8, r8)
   1fb8c:	3e3fffff 	.word	0x3e3fffff
   1fb90:	be8838d4 	.word	0xbe8838d4
   1fb94:	bda8fae9 	.word	0xbda8fae9
   1fb98:	bdb4b1c4 	.word	0xbdb4b1c4
   1fb9c:	3e21ee9e 	.word	0x3e21ee9e
   1fba0:	809c52ad 	.word	0x809c52ad
   1fba4:	3e927e4f 	.word	0x3e927e4f
   1fba8:	19cb1590 	.word	0x19cb1590
   1fbac:	3efa01a0 	.word	0x3efa01a0
   1fbb0:	16c15177 	.word	0x16c15177
   1fbb4:	3f56c16c 	.word	0x3f56c16c
   1fbb8:	5555554c 	.word	0x5555554c
   1fbbc:	3fa55555 	.word	0x3fa55555
   1fbc0:	3fe00000 	.word	0x3fe00000
   1fbc4:	3ff00000 	.word	0x3ff00000
   1fbc8:	3fd33332 	.word	0x3fd33332
   1fbcc:	3fe90000 	.word	0x3fe90000
   1fbd0:	ffe00000 	.word	0xffe00000
   1fbd4:	3fe70000 	.word	0x3fe70000
   1fbd8:	3fd20000 	.word	0x3fd20000

0001fbdc <__kernel_rem_pio2>:
   1fbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fbde:	46de      	mov	lr, fp
   1fbe0:	464e      	mov	r6, r9
   1fbe2:	4645      	mov	r5, r8
   1fbe4:	4657      	mov	r7, sl
   1fbe6:	b5e0      	push	{r5, r6, r7, lr}
   1fbe8:	4ca3      	ldr	r4, [pc, #652]	; (1fe78 <__kernel_rem_pio2+0x29c>)
   1fbea:	44a5      	add	sp, r4
   1fbec:	9107      	str	r1, [sp, #28]
   1fbee:	0019      	movs	r1, r3
   1fbf0:	0014      	movs	r4, r2
   1fbf2:	9aa4      	ldr	r2, [sp, #656]	; 0x290
   1fbf4:	9309      	str	r3, [sp, #36]	; 0x24
   1fbf6:	4ba1      	ldr	r3, [pc, #644]	; (1fe7c <__kernel_rem_pio2+0x2a0>)
   1fbf8:	0092      	lsls	r2, r2, #2
   1fbfa:	58d2      	ldr	r2, [r2, r3]
   1fbfc:	000b      	movs	r3, r1
   1fbfe:	9003      	str	r0, [sp, #12]
   1fc00:	3b01      	subs	r3, #1
   1fc02:	1ee0      	subs	r0, r4, #3
   1fc04:	2118      	movs	r1, #24
   1fc06:	001d      	movs	r5, r3
   1fc08:	0016      	movs	r6, r2
   1fc0a:	9206      	str	r2, [sp, #24]
   1fc0c:	9302      	str	r3, [sp, #8]
   1fc0e:	f001 f85f 	bl	20cd0 <__divsi3>
   1fc12:	43c3      	mvns	r3, r0
   1fc14:	0002      	movs	r2, r0
   1fc16:	17db      	asrs	r3, r3, #31
   1fc18:	401a      	ands	r2, r3
   1fc1a:	0013      	movs	r3, r2
   1fc1c:	0011      	movs	r1, r2
   1fc1e:	3301      	adds	r3, #1
   1fc20:	920b      	str	r2, [sp, #44]	; 0x2c
   1fc22:	009a      	lsls	r2, r3, #2
   1fc24:	1a9b      	subs	r3, r3, r2
   1fc26:	00db      	lsls	r3, r3, #3
   1fc28:	191b      	adds	r3, r3, r4
   1fc2a:	9304      	str	r3, [sp, #16]
   1fc2c:	1b4c      	subs	r4, r1, r5
   1fc2e:	1976      	adds	r6, r6, r5
   1fc30:	d418      	bmi.n	1fc64 <__kernel_rem_pio2+0x88>
   1fc32:	9ba5      	ldr	r3, [sp, #660]	; 0x294
   1fc34:	00a5      	lsls	r5, r4, #2
   1fc36:	469c      	mov	ip, r3
   1fc38:	1936      	adds	r6, r6, r4
   1fc3a:	af22      	add	r7, sp, #136	; 0x88
   1fc3c:	4465      	add	r5, ip
   1fc3e:	3601      	adds	r6, #1
   1fc40:	e007      	b.n	1fc52 <__kernel_rem_pio2+0x76>
   1fc42:	6828      	ldr	r0, [r5, #0]
   1fc44:	f003 fe68 	bl	23918 <__aeabi_i2d>
   1fc48:	3401      	adds	r4, #1
   1fc4a:	c703      	stmia	r7!, {r0, r1}
   1fc4c:	3504      	adds	r5, #4
   1fc4e:	42b4      	cmp	r4, r6
   1fc50:	d008      	beq.n	1fc64 <__kernel_rem_pio2+0x88>
   1fc52:	2c00      	cmp	r4, #0
   1fc54:	daf5      	bge.n	1fc42 <__kernel_rem_pio2+0x66>
   1fc56:	2000      	movs	r0, #0
   1fc58:	2100      	movs	r1, #0
   1fc5a:	3401      	adds	r4, #1
   1fc5c:	c703      	stmia	r7!, {r0, r1}
   1fc5e:	3504      	adds	r5, #4
   1fc60:	42b4      	cmp	r4, r6
   1fc62:	d1f6      	bne.n	1fc52 <__kernel_rem_pio2+0x76>
   1fc64:	9b06      	ldr	r3, [sp, #24]
   1fc66:	2b00      	cmp	r3, #0
   1fc68:	da01      	bge.n	1fc6e <__kernel_rem_pio2+0x92>
   1fc6a:	f000 fc01 	bl	20470 <__kernel_rem_pio2+0x894>
   1fc6e:	ab72      	add	r3, sp, #456	; 0x1c8
   1fc70:	0019      	movs	r1, r3
   1fc72:	468b      	mov	fp, r1
   1fc74:	aa22      	add	r2, sp, #136	; 0x88
   1fc76:	4691      	mov	r9, r2
   1fc78:	9a06      	ldr	r2, [sp, #24]
   1fc7a:	9308      	str	r3, [sp, #32]
   1fc7c:	3201      	adds	r2, #1
   1fc7e:	00d2      	lsls	r2, r2, #3
   1fc80:	4493      	add	fp, r2
   1fc82:	9a03      	ldr	r2, [sp, #12]
   1fc84:	469a      	mov	sl, r3
   1fc86:	4690      	mov	r8, r2
   1fc88:	9b02      	ldr	r3, [sp, #8]
   1fc8a:	00db      	lsls	r3, r3, #3
   1fc8c:	4499      	add	r9, r3
   1fc8e:	3308      	adds	r3, #8
   1fc90:	4498      	add	r8, r3
   1fc92:	9b02      	ldr	r3, [sp, #8]
   1fc94:	2b00      	cmp	r3, #0
   1fc96:	da00      	bge.n	1fc9a <__kernel_rem_pio2+0xbe>
   1fc98:	e28d      	b.n	201b6 <__kernel_rem_pio2+0x5da>
   1fc9a:	464c      	mov	r4, r9
   1fc9c:	2600      	movs	r6, #0
   1fc9e:	2700      	movs	r7, #0
   1fca0:	9d03      	ldr	r5, [sp, #12]
   1fca2:	6822      	ldr	r2, [r4, #0]
   1fca4:	6863      	ldr	r3, [r4, #4]
   1fca6:	cd03      	ldmia	r5!, {r0, r1}
   1fca8:	f003 f84c 	bl	22d44 <__aeabi_dmul>
   1fcac:	0002      	movs	r2, r0
   1fcae:	000b      	movs	r3, r1
   1fcb0:	0030      	movs	r0, r6
   1fcb2:	0039      	movs	r1, r7
   1fcb4:	f002 f902 	bl	21ebc <__aeabi_dadd>
   1fcb8:	3c08      	subs	r4, #8
   1fcba:	0006      	movs	r6, r0
   1fcbc:	000f      	movs	r7, r1
   1fcbe:	4545      	cmp	r5, r8
   1fcc0:	d1ef      	bne.n	1fca2 <__kernel_rem_pio2+0xc6>
   1fcc2:	4653      	mov	r3, sl
   1fcc4:	c3c0      	stmia	r3!, {r6, r7}
   1fcc6:	469a      	mov	sl, r3
   1fcc8:	2308      	movs	r3, #8
   1fcca:	469c      	mov	ip, r3
   1fccc:	44e1      	add	r9, ip
   1fcce:	45da      	cmp	sl, fp
   1fcd0:	d1df      	bne.n	1fc92 <__kernel_rem_pio2+0xb6>
   1fcd2:	9a06      	ldr	r2, [sp, #24]
   1fcd4:	496a      	ldr	r1, [pc, #424]	; (1fe80 <__kernel_rem_pio2+0x2a4>)
   1fcd6:	0013      	movs	r3, r2
   1fcd8:	468c      	mov	ip, r1
   1fcda:	4463      	add	r3, ip
   1fcdc:	009b      	lsls	r3, r3, #2
   1fcde:	a80e      	add	r0, sp, #56	; 0x38
   1fce0:	0019      	movs	r1, r3
   1fce2:	4684      	mov	ip, r0
   1fce4:	4461      	add	r1, ip
   1fce6:	910d      	str	r1, [sp, #52]	; 0x34
   1fce8:	9903      	ldr	r1, [sp, #12]
   1fcea:	3b04      	subs	r3, #4
   1fcec:	468b      	mov	fp, r1
   1fcee:	4463      	add	r3, ip
   1fcf0:	930c      	str	r3, [sp, #48]	; 0x30
   1fcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fcf4:	9200      	str	r2, [sp, #0]
   1fcf6:	00db      	lsls	r3, r3, #3
   1fcf8:	449b      	add	fp, r3
   1fcfa:	9a00      	ldr	r2, [sp, #0]
   1fcfc:	9808      	ldr	r0, [sp, #32]
   1fcfe:	00d3      	lsls	r3, r2, #3
   1fd00:	0019      	movs	r1, r3
   1fd02:	930a      	str	r3, [sp, #40]	; 0x28
   1fd04:	468c      	mov	ip, r1
   1fd06:	0003      	movs	r3, r0
   1fd08:	4463      	add	r3, ip
   1fd0a:	681e      	ldr	r6, [r3, #0]
   1fd0c:	685f      	ldr	r7, [r3, #4]
   1fd0e:	2a00      	cmp	r2, #0
   1fd10:	dd34      	ble.n	1fd7c <__kernel_rem_pio2+0x1a0>
   1fd12:	ab0e      	add	r3, sp, #56	; 0x38
   1fd14:	4699      	mov	r9, r3
   1fd16:	0013      	movs	r3, r2
   1fd18:	4a5a      	ldr	r2, [pc, #360]	; (1fe84 <__kernel_rem_pio2+0x2a8>)
   1fd1a:	4680      	mov	r8, r0
   1fd1c:	4694      	mov	ip, r2
   1fd1e:	4463      	add	r3, ip
   1fd20:	00db      	lsls	r3, r3, #3
   1fd22:	4498      	add	r8, r3
   1fd24:	ab70      	add	r3, sp, #448	; 0x1c0
   1fd26:	469a      	mov	sl, r3
   1fd28:	2200      	movs	r2, #0
   1fd2a:	4b57      	ldr	r3, [pc, #348]	; (1fe88 <__kernel_rem_pio2+0x2ac>)
   1fd2c:	0030      	movs	r0, r6
   1fd2e:	0039      	movs	r1, r7
   1fd30:	f003 f808 	bl	22d44 <__aeabi_dmul>
   1fd34:	f003 fdbc 	bl	238b0 <__aeabi_d2iz>
   1fd38:	f003 fdee 	bl	23918 <__aeabi_i2d>
   1fd3c:	2200      	movs	r2, #0
   1fd3e:	4b53      	ldr	r3, [pc, #332]	; (1fe8c <__kernel_rem_pio2+0x2b0>)
   1fd40:	0004      	movs	r4, r0
   1fd42:	000d      	movs	r5, r1
   1fd44:	f002 fffe 	bl	22d44 <__aeabi_dmul>
   1fd48:	0002      	movs	r2, r0
   1fd4a:	000b      	movs	r3, r1
   1fd4c:	0030      	movs	r0, r6
   1fd4e:	0039      	movs	r1, r7
   1fd50:	f003 fa78 	bl	23244 <__aeabi_dsub>
   1fd54:	f003 fdac 	bl	238b0 <__aeabi_d2iz>
   1fd58:	464b      	mov	r3, r9
   1fd5a:	c301      	stmia	r3!, {r0}
   1fd5c:	4699      	mov	r9, r3
   1fd5e:	4643      	mov	r3, r8
   1fd60:	0020      	movs	r0, r4
   1fd62:	681a      	ldr	r2, [r3, #0]
   1fd64:	685b      	ldr	r3, [r3, #4]
   1fd66:	0029      	movs	r1, r5
   1fd68:	f002 f8a8 	bl	21ebc <__aeabi_dadd>
   1fd6c:	2308      	movs	r3, #8
   1fd6e:	425b      	negs	r3, r3
   1fd70:	469c      	mov	ip, r3
   1fd72:	44e0      	add	r8, ip
   1fd74:	0006      	movs	r6, r0
   1fd76:	000f      	movs	r7, r1
   1fd78:	45d0      	cmp	r8, sl
   1fd7a:	d1d5      	bne.n	1fd28 <__kernel_rem_pio2+0x14c>
   1fd7c:	9b04      	ldr	r3, [sp, #16]
   1fd7e:	0030      	movs	r0, r6
   1fd80:	001a      	movs	r2, r3
   1fd82:	0039      	movs	r1, r7
   1fd84:	4699      	mov	r9, r3
   1fd86:	f000 fea9 	bl	20adc <scalbn>
   1fd8a:	23ff      	movs	r3, #255	; 0xff
   1fd8c:	2200      	movs	r2, #0
   1fd8e:	059b      	lsls	r3, r3, #22
   1fd90:	0004      	movs	r4, r0
   1fd92:	000d      	movs	r5, r1
   1fd94:	f002 ffd6 	bl	22d44 <__aeabi_dmul>
   1fd98:	f7fe fa2c 	bl	1e1f4 <floor>
   1fd9c:	2200      	movs	r2, #0
   1fd9e:	4b3c      	ldr	r3, [pc, #240]	; (1fe90 <__kernel_rem_pio2+0x2b4>)
   1fda0:	f002 ffd0 	bl	22d44 <__aeabi_dmul>
   1fda4:	0002      	movs	r2, r0
   1fda6:	000b      	movs	r3, r1
   1fda8:	0020      	movs	r0, r4
   1fdaa:	0029      	movs	r1, r5
   1fdac:	f003 fa4a 	bl	23244 <__aeabi_dsub>
   1fdb0:	000d      	movs	r5, r1
   1fdb2:	0004      	movs	r4, r0
   1fdb4:	f003 fd7c 	bl	238b0 <__aeabi_d2iz>
   1fdb8:	4680      	mov	r8, r0
   1fdba:	f003 fdad 	bl	23918 <__aeabi_i2d>
   1fdbe:	0002      	movs	r2, r0
   1fdc0:	000b      	movs	r3, r1
   1fdc2:	0020      	movs	r0, r4
   1fdc4:	0029      	movs	r1, r5
   1fdc6:	f003 fa3d 	bl	23244 <__aeabi_dsub>
   1fdca:	000f      	movs	r7, r1
   1fdcc:	4649      	mov	r1, r9
   1fdce:	0006      	movs	r6, r0
   1fdd0:	2900      	cmp	r1, #0
   1fdd2:	dc00      	bgt.n	1fdd6 <__kernel_rem_pio2+0x1fa>
   1fdd4:	e110      	b.n	1fff8 <__kernel_rem_pio2+0x41c>
   1fdd6:	9b00      	ldr	r3, [sp, #0]
   1fdd8:	2018      	movs	r0, #24
   1fdda:	1e5a      	subs	r2, r3, #1
   1fddc:	0092      	lsls	r2, r2, #2
   1fdde:	ab0e      	add	r3, sp, #56	; 0x38
   1fde0:	589b      	ldr	r3, [r3, r2]
   1fde2:	1a40      	subs	r0, r0, r1
   1fde4:	001d      	movs	r5, r3
   1fde6:	4105      	asrs	r5, r0
   1fde8:	44a8      	add	r8, r5
   1fdea:	4085      	lsls	r5, r0
   1fdec:	1b5d      	subs	r5, r3, r5
   1fdee:	ab0e      	add	r3, sp, #56	; 0x38
   1fdf0:	509d      	str	r5, [r3, r2]
   1fdf2:	2217      	movs	r2, #23
   1fdf4:	1a52      	subs	r2, r2, r1
   1fdf6:	4115      	asrs	r5, r2
   1fdf8:	2d00      	cmp	r5, #0
   1fdfa:	dc00      	bgt.n	1fdfe <__kernel_rem_pio2+0x222>
   1fdfc:	e07d      	b.n	1fefa <__kernel_rem_pio2+0x31e>
   1fdfe:	2301      	movs	r3, #1
   1fe00:	469c      	mov	ip, r3
   1fe02:	9b00      	ldr	r3, [sp, #0]
   1fe04:	44e0      	add	r8, ip
   1fe06:	2b00      	cmp	r3, #0
   1fe08:	dd48      	ble.n	1fe9c <__kernel_rem_pio2+0x2c0>
   1fe0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1fe0c:	2c00      	cmp	r4, #0
   1fe0e:	d100      	bne.n	1fe12 <__kernel_rem_pio2+0x236>
   1fe10:	e34b      	b.n	204aa <__kernel_rem_pio2+0x8ce>
   1fe12:	2201      	movs	r2, #1
   1fe14:	2300      	movs	r3, #0
   1fe16:	2100      	movs	r1, #0
   1fe18:	2080      	movs	r0, #128	; 0x80
   1fe1a:	0440      	lsls	r0, r0, #17
   1fe1c:	1b04      	subs	r4, r0, r4
   1fe1e:	a80e      	add	r0, sp, #56	; 0x38
   1fe20:	5044      	str	r4, [r0, r1]
   1fe22:	9900      	ldr	r1, [sp, #0]
   1fe24:	4291      	cmp	r1, r2
   1fe26:	dd18      	ble.n	1fe5a <__kernel_rem_pio2+0x27e>
   1fe28:	0092      	lsls	r2, r2, #2
   1fe2a:	a90e      	add	r1, sp, #56	; 0x38
   1fe2c:	5889      	ldr	r1, [r1, r2]
   1fe2e:	ac0e      	add	r4, sp, #56	; 0x38
   1fe30:	9105      	str	r1, [sp, #20]
   1fe32:	9805      	ldr	r0, [sp, #20]
   1fe34:	4917      	ldr	r1, [pc, #92]	; (1fe94 <__kernel_rem_pio2+0x2b8>)
   1fe36:	3302      	adds	r3, #2
   1fe38:	1a08      	subs	r0, r1, r0
   1fe3a:	50a0      	str	r0, [r4, r2]
   1fe3c:	9a00      	ldr	r2, [sp, #0]
   1fe3e:	429a      	cmp	r2, r3
   1fe40:	dd0b      	ble.n	1fe5a <__kernel_rem_pio2+0x27e>
   1fe42:	aa0e      	add	r2, sp, #56	; 0x38
   1fe44:	4694      	mov	ip, r2
   1fe46:	9a00      	ldr	r2, [sp, #0]
   1fe48:	009b      	lsls	r3, r3, #2
   1fe4a:	0090      	lsls	r0, r2, #2
   1fe4c:	4463      	add	r3, ip
   1fe4e:	4460      	add	r0, ip
   1fe50:	681a      	ldr	r2, [r3, #0]
   1fe52:	1a8a      	subs	r2, r1, r2
   1fe54:	c304      	stmia	r3!, {r2}
   1fe56:	4283      	cmp	r3, r0
   1fe58:	d1fa      	bne.n	1fe50 <__kernel_rem_pio2+0x274>
   1fe5a:	9b04      	ldr	r3, [sp, #16]
   1fe5c:	2401      	movs	r4, #1
   1fe5e:	2b00      	cmp	r3, #0
   1fe60:	dc21      	bgt.n	1fea6 <__kernel_rem_pio2+0x2ca>
   1fe62:	2d02      	cmp	r5, #2
   1fe64:	d149      	bne.n	1fefa <__kernel_rem_pio2+0x31e>
   1fe66:	0032      	movs	r2, r6
   1fe68:	003b      	movs	r3, r7
   1fe6a:	2000      	movs	r0, #0
   1fe6c:	490a      	ldr	r1, [pc, #40]	; (1fe98 <__kernel_rem_pio2+0x2bc>)
   1fe6e:	f003 f9e9 	bl	23244 <__aeabi_dsub>
   1fe72:	0006      	movs	r6, r0
   1fe74:	000f      	movs	r7, r1
   1fe76:	e032      	b.n	1fede <__kernel_rem_pio2+0x302>
   1fe78:	fffffd94 	.word	0xfffffd94
   1fe7c:	00029ae0 	.word	0x00029ae0
   1fe80:	3fffffff 	.word	0x3fffffff
   1fe84:	1fffffff 	.word	0x1fffffff
   1fe88:	3e700000 	.word	0x3e700000
   1fe8c:	41700000 	.word	0x41700000
   1fe90:	40200000 	.word	0x40200000
   1fe94:	00ffffff 	.word	0x00ffffff
   1fe98:	3ff00000 	.word	0x3ff00000
   1fe9c:	9b04      	ldr	r3, [sp, #16]
   1fe9e:	2400      	movs	r4, #0
   1fea0:	2b00      	cmp	r3, #0
   1fea2:	dc00      	bgt.n	1fea6 <__kernel_rem_pio2+0x2ca>
   1fea4:	e292      	b.n	203cc <__kernel_rem_pio2+0x7f0>
   1fea6:	9b04      	ldr	r3, [sp, #16]
   1fea8:	2b01      	cmp	r3, #1
   1feaa:	d100      	bne.n	1feae <__kernel_rem_pio2+0x2d2>
   1feac:	e27b      	b.n	203a6 <__kernel_rem_pio2+0x7ca>
   1feae:	2b02      	cmp	r3, #2
   1feb0:	d109      	bne.n	1fec6 <__kernel_rem_pio2+0x2ea>
   1feb2:	9b00      	ldr	r3, [sp, #0]
   1feb4:	a90e      	add	r1, sp, #56	; 0x38
   1feb6:	1e5a      	subs	r2, r3, #1
   1feb8:	0092      	lsls	r2, r2, #2
   1feba:	ab0e      	add	r3, sp, #56	; 0x38
   1febc:	589b      	ldr	r3, [r3, r2]
   1febe:	9305      	str	r3, [sp, #20]
   1fec0:	029b      	lsls	r3, r3, #10
   1fec2:	0a9b      	lsrs	r3, r3, #10
   1fec4:	508b      	str	r3, [r1, r2]
   1fec6:	2d02      	cmp	r5, #2
   1fec8:	d117      	bne.n	1fefa <__kernel_rem_pio2+0x31e>
   1feca:	0032      	movs	r2, r6
   1fecc:	003b      	movs	r3, r7
   1fece:	2000      	movs	r0, #0
   1fed0:	49bf      	ldr	r1, [pc, #764]	; (201d0 <__kernel_rem_pio2+0x5f4>)
   1fed2:	f003 f9b7 	bl	23244 <__aeabi_dsub>
   1fed6:	0006      	movs	r6, r0
   1fed8:	000f      	movs	r7, r1
   1feda:	2c00      	cmp	r4, #0
   1fedc:	d00d      	beq.n	1fefa <__kernel_rem_pio2+0x31e>
   1fede:	9a04      	ldr	r2, [sp, #16]
   1fee0:	2000      	movs	r0, #0
   1fee2:	49bb      	ldr	r1, [pc, #748]	; (201d0 <__kernel_rem_pio2+0x5f4>)
   1fee4:	f000 fdfa 	bl	20adc <scalbn>
   1fee8:	0002      	movs	r2, r0
   1feea:	000b      	movs	r3, r1
   1feec:	0030      	movs	r0, r6
   1feee:	0039      	movs	r1, r7
   1fef0:	f003 f9a8 	bl	23244 <__aeabi_dsub>
   1fef4:	2502      	movs	r5, #2
   1fef6:	0006      	movs	r6, r0
   1fef8:	000f      	movs	r7, r1
   1fefa:	2300      	movs	r3, #0
   1fefc:	2200      	movs	r2, #0
   1fefe:	0030      	movs	r0, r6
   1ff00:	0039      	movs	r1, r7
   1ff02:	f000 ffe1 	bl	20ec8 <__aeabi_dcmpeq>
   1ff06:	9b00      	ldr	r3, [sp, #0]
   1ff08:	2800      	cmp	r0, #0
   1ff0a:	d100      	bne.n	1ff0e <__kernel_rem_pio2+0x332>
   1ff0c:	e262      	b.n	203d4 <__kernel_rem_pio2+0x7f8>
   1ff0e:	9906      	ldr	r1, [sp, #24]
   1ff10:	1e5a      	subs	r2, r3, #1
   1ff12:	4291      	cmp	r1, r2
   1ff14:	dc10      	bgt.n	1ff38 <__kernel_rem_pio2+0x35c>
   1ff16:	49af      	ldr	r1, [pc, #700]	; (201d4 <__kernel_rem_pio2+0x5f8>)
   1ff18:	980d      	ldr	r0, [sp, #52]	; 0x34
   1ff1a:	468c      	mov	ip, r1
   1ff1c:	a90e      	add	r1, sp, #56	; 0x38
   1ff1e:	4463      	add	r3, ip
   1ff20:	468c      	mov	ip, r1
   1ff22:	2100      	movs	r1, #0
   1ff24:	009b      	lsls	r3, r3, #2
   1ff26:	4463      	add	r3, ip
   1ff28:	681c      	ldr	r4, [r3, #0]
   1ff2a:	3b04      	subs	r3, #4
   1ff2c:	4321      	orrs	r1, r4
   1ff2e:	4283      	cmp	r3, r0
   1ff30:	d1fa      	bne.n	1ff28 <__kernel_rem_pio2+0x34c>
   1ff32:	2900      	cmp	r1, #0
   1ff34:	d000      	beq.n	1ff38 <__kernel_rem_pio2+0x35c>
   1ff36:	e084      	b.n	20042 <__kernel_rem_pio2+0x466>
   1ff38:	9b06      	ldr	r3, [sp, #24]
   1ff3a:	aa0e      	add	r2, sp, #56	; 0x38
   1ff3c:	3b01      	subs	r3, #1
   1ff3e:	009b      	lsls	r3, r3, #2
   1ff40:	58d3      	ldr	r3, [r2, r3]
   1ff42:	2b00      	cmp	r3, #0
   1ff44:	d000      	beq.n	1ff48 <__kernel_rem_pio2+0x36c>
   1ff46:	e27c      	b.n	20442 <__kernel_rem_pio2+0x866>
   1ff48:	2201      	movs	r2, #1
   1ff4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ff4c:	3b04      	subs	r3, #4
   1ff4e:	6859      	ldr	r1, [r3, #4]
   1ff50:	3201      	adds	r2, #1
   1ff52:	2900      	cmp	r1, #0
   1ff54:	d0fa      	beq.n	1ff4c <__kernel_rem_pio2+0x370>
   1ff56:	9900      	ldr	r1, [sp, #0]
   1ff58:	000b      	movs	r3, r1
   1ff5a:	468c      	mov	ip, r1
   1ff5c:	3301      	adds	r3, #1
   1ff5e:	4462      	add	r2, ip
   1ff60:	9205      	str	r2, [sp, #20]
   1ff62:	4293      	cmp	r3, r2
   1ff64:	dc42      	bgt.n	1ffec <__kernel_rem_pio2+0x410>
   1ff66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ff68:	4694      	mov	ip, r2
   1ff6a:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   1ff6c:	4463      	add	r3, ip
   1ff6e:	4692      	mov	sl, r2
   1ff70:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ff72:	009b      	lsls	r3, r3, #2
   1ff74:	4694      	mov	ip, r2
   1ff76:	aa22      	add	r2, sp, #136	; 0x88
   1ff78:	4690      	mov	r8, r2
   1ff7a:	449a      	add	sl, r3
   1ff7c:	9b00      	ldr	r3, [sp, #0]
   1ff7e:	9a08      	ldr	r2, [sp, #32]
   1ff80:	4463      	add	r3, ip
   1ff82:	00db      	lsls	r3, r3, #3
   1ff84:	4498      	add	r8, r3
   1ff86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ff88:	4694      	mov	ip, r2
   1ff8a:	4699      	mov	r9, r3
   1ff8c:	9b05      	ldr	r3, [sp, #20]
   1ff8e:	44e1      	add	r9, ip
   1ff90:	00db      	lsls	r3, r3, #3
   1ff92:	4463      	add	r3, ip
   1ff94:	9300      	str	r3, [sp, #0]
   1ff96:	4653      	mov	r3, sl
   1ff98:	6818      	ldr	r0, [r3, #0]
   1ff9a:	f003 fcbd 	bl	23918 <__aeabi_i2d>
   1ff9e:	4643      	mov	r3, r8
   1ffa0:	6018      	str	r0, [r3, #0]
   1ffa2:	6059      	str	r1, [r3, #4]
   1ffa4:	9b02      	ldr	r3, [sp, #8]
   1ffa6:	2b00      	cmp	r3, #0
   1ffa8:	db23      	blt.n	1fff2 <__kernel_rem_pio2+0x416>
   1ffaa:	4644      	mov	r4, r8
   1ffac:	2600      	movs	r6, #0
   1ffae:	2700      	movs	r7, #0
   1ffb0:	9d03      	ldr	r5, [sp, #12]
   1ffb2:	6822      	ldr	r2, [r4, #0]
   1ffb4:	6863      	ldr	r3, [r4, #4]
   1ffb6:	cd03      	ldmia	r5!, {r0, r1}
   1ffb8:	f002 fec4 	bl	22d44 <__aeabi_dmul>
   1ffbc:	0002      	movs	r2, r0
   1ffbe:	000b      	movs	r3, r1
   1ffc0:	0030      	movs	r0, r6
   1ffc2:	0039      	movs	r1, r7
   1ffc4:	f001 ff7a 	bl	21ebc <__aeabi_dadd>
   1ffc8:	3c08      	subs	r4, #8
   1ffca:	0006      	movs	r6, r0
   1ffcc:	000f      	movs	r7, r1
   1ffce:	455d      	cmp	r5, fp
   1ffd0:	d1ef      	bne.n	1ffb2 <__kernel_rem_pio2+0x3d6>
   1ffd2:	464b      	mov	r3, r9
   1ffd4:	609e      	str	r6, [r3, #8]
   1ffd6:	60df      	str	r7, [r3, #12]
   1ffd8:	2304      	movs	r3, #4
   1ffda:	469c      	mov	ip, r3
   1ffdc:	3304      	adds	r3, #4
   1ffde:	44e2      	add	sl, ip
   1ffe0:	469c      	mov	ip, r3
   1ffe2:	9b00      	ldr	r3, [sp, #0]
   1ffe4:	44e1      	add	r9, ip
   1ffe6:	44e0      	add	r8, ip
   1ffe8:	4599      	cmp	r9, r3
   1ffea:	d1d4      	bne.n	1ff96 <__kernel_rem_pio2+0x3ba>
   1ffec:	9b05      	ldr	r3, [sp, #20]
   1ffee:	9300      	str	r3, [sp, #0]
   1fff0:	e683      	b.n	1fcfa <__kernel_rem_pio2+0x11e>
   1fff2:	2600      	movs	r6, #0
   1fff4:	2700      	movs	r7, #0
   1fff6:	e7ec      	b.n	1ffd2 <__kernel_rem_pio2+0x3f6>
   1fff8:	9b04      	ldr	r3, [sp, #16]
   1fffa:	2b00      	cmp	r3, #0
   1fffc:	d106      	bne.n	2000c <__kernel_rem_pio2+0x430>
   1fffe:	9b00      	ldr	r3, [sp, #0]
   20000:	aa0e      	add	r2, sp, #56	; 0x38
   20002:	3b01      	subs	r3, #1
   20004:	009b      	lsls	r3, r3, #2
   20006:	58d5      	ldr	r5, [r2, r3]
   20008:	15ed      	asrs	r5, r5, #23
   2000a:	e6f5      	b.n	1fdf8 <__kernel_rem_pio2+0x21c>
   2000c:	2200      	movs	r2, #0
   2000e:	4b72      	ldr	r3, [pc, #456]	; (201d8 <__kernel_rem_pio2+0x5fc>)
   20010:	0030      	movs	r0, r6
   20012:	0039      	movs	r1, r7
   20014:	f000 ff7c 	bl	20f10 <__aeabi_dcmpge>
   20018:	2500      	movs	r5, #0
   2001a:	2800      	cmp	r0, #0
   2001c:	d100      	bne.n	20020 <__kernel_rem_pio2+0x444>
   2001e:	e76c      	b.n	1fefa <__kernel_rem_pio2+0x31e>
   20020:	2301      	movs	r3, #1
   20022:	469c      	mov	ip, r3
   20024:	9b00      	ldr	r3, [sp, #0]
   20026:	44e0      	add	r8, ip
   20028:	2502      	movs	r5, #2
   2002a:	2b00      	cmp	r3, #0
   2002c:	dd00      	ble.n	20030 <__kernel_rem_pio2+0x454>
   2002e:	e6ec      	b.n	1fe0a <__kernel_rem_pio2+0x22e>
   20030:	0032      	movs	r2, r6
   20032:	003b      	movs	r3, r7
   20034:	2000      	movs	r0, #0
   20036:	4966      	ldr	r1, [pc, #408]	; (201d0 <__kernel_rem_pio2+0x5f4>)
   20038:	f003 f904 	bl	23244 <__aeabi_dsub>
   2003c:	0006      	movs	r6, r0
   2003e:	000f      	movs	r7, r1
   20040:	e75b      	b.n	1fefa <__kernel_rem_pio2+0x31e>
   20042:	4643      	mov	r3, r8
   20044:	9309      	str	r3, [sp, #36]	; 0x24
   20046:	9b04      	ldr	r3, [sp, #16]
   20048:	a80e      	add	r0, sp, #56	; 0x38
   2004a:	3b18      	subs	r3, #24
   2004c:	0019      	movs	r1, r3
   2004e:	9304      	str	r3, [sp, #16]
   20050:	0093      	lsls	r3, r2, #2
   20052:	58c3      	ldr	r3, [r0, r3]
   20054:	9503      	str	r5, [sp, #12]
   20056:	9202      	str	r2, [sp, #8]
   20058:	2b00      	cmp	r3, #0
   2005a:	d10f      	bne.n	2007c <__kernel_rem_pio2+0x4a0>
   2005c:	485d      	ldr	r0, [pc, #372]	; (201d4 <__kernel_rem_pio2+0x5f8>)
   2005e:	0013      	movs	r3, r2
   20060:	4684      	mov	ip, r0
   20062:	a80e      	add	r0, sp, #56	; 0x38
   20064:	4463      	add	r3, ip
   20066:	4684      	mov	ip, r0
   20068:	009b      	lsls	r3, r3, #2
   2006a:	4463      	add	r3, ip
   2006c:	3b04      	subs	r3, #4
   2006e:	6858      	ldr	r0, [r3, #4]
   20070:	3a01      	subs	r2, #1
   20072:	3918      	subs	r1, #24
   20074:	2800      	cmp	r0, #0
   20076:	d0f9      	beq.n	2006c <__kernel_rem_pio2+0x490>
   20078:	9202      	str	r2, [sp, #8]
   2007a:	9104      	str	r1, [sp, #16]
   2007c:	9a04      	ldr	r2, [sp, #16]
   2007e:	2000      	movs	r0, #0
   20080:	4953      	ldr	r1, [pc, #332]	; (201d0 <__kernel_rem_pio2+0x5f4>)
   20082:	f000 fd2b 	bl	20adc <scalbn>
   20086:	9b02      	ldr	r3, [sp, #8]
   20088:	0004      	movs	r4, r0
   2008a:	000d      	movs	r5, r1
   2008c:	2b00      	cmp	r3, #0
   2008e:	da00      	bge.n	20092 <__kernel_rem_pio2+0x4b6>
   20090:	e1d9      	b.n	20446 <__kernel_rem_pio2+0x86a>
   20092:	aa0e      	add	r2, sp, #56	; 0x38
   20094:	4694      	mov	ip, r2
   20096:	009e      	lsls	r6, r3, #2
   20098:	00db      	lsls	r3, r3, #3
   2009a:	4466      	add	r6, ip
   2009c:	469c      	mov	ip, r3
   2009e:	9a08      	ldr	r2, [sp, #32]
   200a0:	46b0      	mov	r8, r6
   200a2:	4462      	add	r2, ip
   200a4:	0016      	movs	r6, r2
   200a6:	9304      	str	r3, [sp, #16]
   200a8:	9200      	str	r2, [sp, #0]
   200aa:	af70      	add	r7, sp, #448	; 0x1c0
   200ac:	4643      	mov	r3, r8
   200ae:	6818      	ldr	r0, [r3, #0]
   200b0:	f003 fc32 	bl	23918 <__aeabi_i2d>
   200b4:	0022      	movs	r2, r4
   200b6:	002b      	movs	r3, r5
   200b8:	f002 fe44 	bl	22d44 <__aeabi_dmul>
   200bc:	4b47      	ldr	r3, [pc, #284]	; (201dc <__kernel_rem_pio2+0x600>)
   200be:	6030      	str	r0, [r6, #0]
   200c0:	6071      	str	r1, [r6, #4]
   200c2:	2200      	movs	r2, #0
   200c4:	0020      	movs	r0, r4
   200c6:	0029      	movs	r1, r5
   200c8:	f002 fe3c 	bl	22d44 <__aeabi_dmul>
   200cc:	2304      	movs	r3, #4
   200ce:	425b      	negs	r3, r3
   200d0:	469c      	mov	ip, r3
   200d2:	3e08      	subs	r6, #8
   200d4:	0004      	movs	r4, r0
   200d6:	000d      	movs	r5, r1
   200d8:	44e0      	add	r8, ip
   200da:	42be      	cmp	r6, r7
   200dc:	d1e6      	bne.n	200ac <__kernel_rem_pio2+0x4d0>
   200de:	2300      	movs	r3, #0
   200e0:	469a      	mov	sl, r3
   200e2:	ab4a      	add	r3, sp, #296	; 0x128
   200e4:	4699      	mov	r9, r3
   200e6:	9b06      	ldr	r3, [sp, #24]
   200e8:	9605      	str	r6, [sp, #20]
   200ea:	469b      	mov	fp, r3
   200ec:	465b      	mov	r3, fp
   200ee:	2600      	movs	r6, #0
   200f0:	2700      	movs	r7, #0
   200f2:	2b00      	cmp	r3, #0
   200f4:	db21      	blt.n	2013a <__kernel_rem_pio2+0x55e>
   200f6:	2080      	movs	r0, #128	; 0x80
   200f8:	4b39      	ldr	r3, [pc, #228]	; (201e0 <__kernel_rem_pio2+0x604>)
   200fa:	9d00      	ldr	r5, [sp, #0]
   200fc:	4698      	mov	r8, r3
   200fe:	05c0      	lsls	r0, r0, #23
   20100:	4938      	ldr	r1, [pc, #224]	; (201e4 <__kernel_rem_pio2+0x608>)
   20102:	2600      	movs	r6, #0
   20104:	2700      	movs	r7, #0
   20106:	2400      	movs	r4, #0
   20108:	e008      	b.n	2011c <__kernel_rem_pio2+0x540>
   2010a:	2308      	movs	r3, #8
   2010c:	469c      	mov	ip, r3
   2010e:	3508      	adds	r5, #8
   20110:	44e0      	add	r8, ip
   20112:	4554      	cmp	r4, sl
   20114:	dc11      	bgt.n	2013a <__kernel_rem_pio2+0x55e>
   20116:	4643      	mov	r3, r8
   20118:	6818      	ldr	r0, [r3, #0]
   2011a:	6859      	ldr	r1, [r3, #4]
   2011c:	682a      	ldr	r2, [r5, #0]
   2011e:	686b      	ldr	r3, [r5, #4]
   20120:	f002 fe10 	bl	22d44 <__aeabi_dmul>
   20124:	0002      	movs	r2, r0
   20126:	000b      	movs	r3, r1
   20128:	0030      	movs	r0, r6
   2012a:	0039      	movs	r1, r7
   2012c:	f001 fec6 	bl	21ebc <__aeabi_dadd>
   20130:	3401      	adds	r4, #1
   20132:	0006      	movs	r6, r0
   20134:	000f      	movs	r7, r1
   20136:	45a3      	cmp	fp, r4
   20138:	dae7      	bge.n	2010a <__kernel_rem_pio2+0x52e>
   2013a:	4653      	mov	r3, sl
   2013c:	00db      	lsls	r3, r3, #3
   2013e:	444b      	add	r3, r9
   20140:	601e      	str	r6, [r3, #0]
   20142:	605f      	str	r7, [r3, #4]
   20144:	2301      	movs	r3, #1
   20146:	469c      	mov	ip, r3
   20148:	9b00      	ldr	r3, [sp, #0]
   2014a:	9a05      	ldr	r2, [sp, #20]
   2014c:	3b08      	subs	r3, #8
   2014e:	44e2      	add	sl, ip
   20150:	9300      	str	r3, [sp, #0]
   20152:	429a      	cmp	r2, r3
   20154:	d1ca      	bne.n	200ec <__kernel_rem_pio2+0x510>
   20156:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   20158:	2b02      	cmp	r3, #2
   2015a:	dd00      	ble.n	2015e <__kernel_rem_pio2+0x582>
   2015c:	e07a      	b.n	20254 <__kernel_rem_pio2+0x678>
   2015e:	2b00      	cmp	r3, #0
   20160:	dc42      	bgt.n	201e8 <__kernel_rem_pio2+0x60c>
   20162:	d11c      	bne.n	2019e <__kernel_rem_pio2+0x5c2>
   20164:	9b04      	ldr	r3, [sp, #16]
   20166:	2700      	movs	r7, #0
   20168:	444b      	add	r3, r9
   2016a:	001e      	movs	r6, r3
   2016c:	2400      	movs	r4, #0
   2016e:	ad48      	add	r5, sp, #288	; 0x120
   20170:	6832      	ldr	r2, [r6, #0]
   20172:	6873      	ldr	r3, [r6, #4]
   20174:	0038      	movs	r0, r7
   20176:	0021      	movs	r1, r4
   20178:	f001 fea0 	bl	21ebc <__aeabi_dadd>
   2017c:	3e08      	subs	r6, #8
   2017e:	0007      	movs	r7, r0
   20180:	000c      	movs	r4, r1
   20182:	42b5      	cmp	r5, r6
   20184:	d1f4      	bne.n	20170 <__kernel_rem_pio2+0x594>
   20186:	9b03      	ldr	r3, [sp, #12]
   20188:	2b00      	cmp	r3, #0
   2018a:	d003      	beq.n	20194 <__kernel_rem_pio2+0x5b8>
   2018c:	2380      	movs	r3, #128	; 0x80
   2018e:	061b      	lsls	r3, r3, #24
   20190:	469c      	mov	ip, r3
   20192:	4464      	add	r4, ip
   20194:	003a      	movs	r2, r7
   20196:	0023      	movs	r3, r4
   20198:	9907      	ldr	r1, [sp, #28]
   2019a:	600a      	str	r2, [r1, #0]
   2019c:	604b      	str	r3, [r1, #4]
   2019e:	2007      	movs	r0, #7
   201a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   201a2:	4018      	ands	r0, r3
   201a4:	239b      	movs	r3, #155	; 0x9b
   201a6:	009b      	lsls	r3, r3, #2
   201a8:	449d      	add	sp, r3
   201aa:	bc3c      	pop	{r2, r3, r4, r5}
   201ac:	4690      	mov	r8, r2
   201ae:	4699      	mov	r9, r3
   201b0:	46a2      	mov	sl, r4
   201b2:	46ab      	mov	fp, r5
   201b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   201b6:	4653      	mov	r3, sl
   201b8:	2600      	movs	r6, #0
   201ba:	2700      	movs	r7, #0
   201bc:	c3c0      	stmia	r3!, {r6, r7}
   201be:	469a      	mov	sl, r3
   201c0:	2308      	movs	r3, #8
   201c2:	469c      	mov	ip, r3
   201c4:	44e1      	add	r9, ip
   201c6:	45da      	cmp	sl, fp
   201c8:	d000      	beq.n	201cc <__kernel_rem_pio2+0x5f0>
   201ca:	e562      	b.n	1fc92 <__kernel_rem_pio2+0xb6>
   201cc:	e581      	b.n	1fcd2 <__kernel_rem_pio2+0xf6>
   201ce:	46c0      	nop			; (mov r8, r8)
   201d0:	3ff00000 	.word	0x3ff00000
   201d4:	3fffffff 	.word	0x3fffffff
   201d8:	3fe00000 	.word	0x3fe00000
   201dc:	3e700000 	.word	0x3e700000
   201e0:	00029aa0 	.word	0x00029aa0
   201e4:	3ff921fb 	.word	0x3ff921fb
   201e8:	9b04      	ldr	r3, [sp, #16]
   201ea:	2000      	movs	r0, #0
   201ec:	444b      	add	r3, r9
   201ee:	001e      	movs	r6, r3
   201f0:	2100      	movs	r1, #0
   201f2:	af48      	add	r7, sp, #288	; 0x120
   201f4:	6832      	ldr	r2, [r6, #0]
   201f6:	6873      	ldr	r3, [r6, #4]
   201f8:	3e08      	subs	r6, #8
   201fa:	f001 fe5f 	bl	21ebc <__aeabi_dadd>
   201fe:	42be      	cmp	r6, r7
   20200:	d1f8      	bne.n	201f4 <__kernel_rem_pio2+0x618>
   20202:	9b03      	ldr	r3, [sp, #12]
   20204:	2b00      	cmp	r3, #0
   20206:	d100      	bne.n	2020a <__kernel_rem_pio2+0x62e>
   20208:	e0b8      	b.n	2037c <__kernel_rem_pio2+0x7a0>
   2020a:	2380      	movs	r3, #128	; 0x80
   2020c:	9a07      	ldr	r2, [sp, #28]
   2020e:	061b      	lsls	r3, r3, #24
   20210:	18cb      	adds	r3, r1, r3
   20212:	6010      	str	r0, [r2, #0]
   20214:	6053      	str	r3, [r2, #4]
   20216:	000b      	movs	r3, r1
   20218:	0002      	movs	r2, r0
   2021a:	984a      	ldr	r0, [sp, #296]	; 0x128
   2021c:	994b      	ldr	r1, [sp, #300]	; 0x12c
   2021e:	f003 f811 	bl	23244 <__aeabi_dsub>
   20222:	9b02      	ldr	r3, [sp, #8]
   20224:	2b00      	cmp	r3, #0
   20226:	dd0b      	ble.n	20240 <__kernel_rem_pio2+0x664>
   20228:	2601      	movs	r6, #1
   2022a:	af4c      	add	r7, sp, #304	; 0x130
   2022c:	cf0c      	ldmia	r7!, {r2, r3}
   2022e:	f001 fe45 	bl	21ebc <__aeabi_dadd>
   20232:	9b02      	ldr	r3, [sp, #8]
   20234:	3601      	adds	r6, #1
   20236:	42b3      	cmp	r3, r6
   20238:	daf8      	bge.n	2022c <__kernel_rem_pio2+0x650>
   2023a:	9b03      	ldr	r3, [sp, #12]
   2023c:	2b00      	cmp	r3, #0
   2023e:	d003      	beq.n	20248 <__kernel_rem_pio2+0x66c>
   20240:	2380      	movs	r3, #128	; 0x80
   20242:	061b      	lsls	r3, r3, #24
   20244:	469c      	mov	ip, r3
   20246:	4461      	add	r1, ip
   20248:	000b      	movs	r3, r1
   2024a:	0002      	movs	r2, r0
   2024c:	9907      	ldr	r1, [sp, #28]
   2024e:	608a      	str	r2, [r1, #8]
   20250:	60cb      	str	r3, [r1, #12]
   20252:	e7a4      	b.n	2019e <__kernel_rem_pio2+0x5c2>
   20254:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   20256:	2b03      	cmp	r3, #3
   20258:	d1a1      	bne.n	2019e <__kernel_rem_pio2+0x5c2>
   2025a:	9b02      	ldr	r3, [sp, #8]
   2025c:	2b00      	cmp	r3, #0
   2025e:	dc00      	bgt.n	20262 <__kernel_rem_pio2+0x686>
   20260:	e120      	b.n	204a4 <__kernel_rem_pio2+0x8c8>
   20262:	4a99      	ldr	r2, [pc, #612]	; (204c8 <__kernel_rem_pio2+0x8ec>)
   20264:	9b04      	ldr	r3, [sp, #16]
   20266:	4694      	mov	ip, r2
   20268:	444b      	add	r3, r9
   2026a:	681e      	ldr	r6, [r3, #0]
   2026c:	685f      	ldr	r7, [r3, #4]
   2026e:	9b02      	ldr	r3, [sp, #8]
   20270:	4463      	add	r3, ip
   20272:	469b      	mov	fp, r3
   20274:	00db      	lsls	r3, r3, #3
   20276:	444b      	add	r3, r9
   20278:	4698      	mov	r8, r3
   2027a:	ab48      	add	r3, sp, #288	; 0x120
   2027c:	469a      	mov	sl, r3
   2027e:	4643      	mov	r3, r8
   20280:	685c      	ldr	r4, [r3, #4]
   20282:	681b      	ldr	r3, [r3, #0]
   20284:	0018      	movs	r0, r3
   20286:	0021      	movs	r1, r4
   20288:	0032      	movs	r2, r6
   2028a:	003b      	movs	r3, r7
   2028c:	9000      	str	r0, [sp, #0]
   2028e:	9101      	str	r1, [sp, #4]
   20290:	f001 fe14 	bl	21ebc <__aeabi_dadd>
   20294:	0004      	movs	r4, r0
   20296:	000d      	movs	r5, r1
   20298:	0002      	movs	r2, r0
   2029a:	000b      	movs	r3, r1
   2029c:	9800      	ldr	r0, [sp, #0]
   2029e:	9901      	ldr	r1, [sp, #4]
   202a0:	f002 ffd0 	bl	23244 <__aeabi_dsub>
   202a4:	003b      	movs	r3, r7
   202a6:	0032      	movs	r2, r6
   202a8:	f001 fe08 	bl	21ebc <__aeabi_dadd>
   202ac:	4643      	mov	r3, r8
   202ae:	6098      	str	r0, [r3, #8]
   202b0:	60d9      	str	r1, [r3, #12]
   202b2:	601c      	str	r4, [r3, #0]
   202b4:	605d      	str	r5, [r3, #4]
   202b6:	2308      	movs	r3, #8
   202b8:	425b      	negs	r3, r3
   202ba:	469c      	mov	ip, r3
   202bc:	44e0      	add	r8, ip
   202be:	0026      	movs	r6, r4
   202c0:	002f      	movs	r7, r5
   202c2:	45c2      	cmp	sl, r8
   202c4:	d1db      	bne.n	2027e <__kernel_rem_pio2+0x6a2>
   202c6:	9b02      	ldr	r3, [sp, #8]
   202c8:	2b01      	cmp	r3, #1
   202ca:	dc00      	bgt.n	202ce <__kernel_rem_pio2+0x6f2>
   202cc:	e0ea      	b.n	204a4 <__kernel_rem_pio2+0x8c8>
   202ce:	9b04      	ldr	r3, [sp, #16]
   202d0:	46c8      	mov	r8, r9
   202d2:	444b      	add	r3, r9
   202d4:	681e      	ldr	r6, [r3, #0]
   202d6:	685f      	ldr	r7, [r3, #4]
   202d8:	465b      	mov	r3, fp
   202da:	00db      	lsls	r3, r3, #3
   202dc:	469b      	mov	fp, r3
   202de:	44d8      	add	r8, fp
   202e0:	4643      	mov	r3, r8
   202e2:	685c      	ldr	r4, [r3, #4]
   202e4:	681b      	ldr	r3, [r3, #0]
   202e6:	0018      	movs	r0, r3
   202e8:	0021      	movs	r1, r4
   202ea:	0032      	movs	r2, r6
   202ec:	003b      	movs	r3, r7
   202ee:	9000      	str	r0, [sp, #0]
   202f0:	9101      	str	r1, [sp, #4]
   202f2:	f001 fde3 	bl	21ebc <__aeabi_dadd>
   202f6:	0004      	movs	r4, r0
   202f8:	000d      	movs	r5, r1
   202fa:	0002      	movs	r2, r0
   202fc:	000b      	movs	r3, r1
   202fe:	9800      	ldr	r0, [sp, #0]
   20300:	9901      	ldr	r1, [sp, #4]
   20302:	f002 ff9f 	bl	23244 <__aeabi_dsub>
   20306:	003b      	movs	r3, r7
   20308:	0032      	movs	r2, r6
   2030a:	f001 fdd7 	bl	21ebc <__aeabi_dadd>
   2030e:	4643      	mov	r3, r8
   20310:	6098      	str	r0, [r3, #8]
   20312:	60d9      	str	r1, [r3, #12]
   20314:	601c      	str	r4, [r3, #0]
   20316:	605d      	str	r5, [r3, #4]
   20318:	2308      	movs	r3, #8
   2031a:	425b      	negs	r3, r3
   2031c:	469c      	mov	ip, r3
   2031e:	44e0      	add	r8, ip
   20320:	0026      	movs	r6, r4
   20322:	002f      	movs	r7, r5
   20324:	45c1      	cmp	r9, r8
   20326:	d1db      	bne.n	202e0 <__kernel_rem_pio2+0x704>
   20328:	465d      	mov	r5, fp
   2032a:	2700      	movs	r7, #0
   2032c:	2400      	movs	r4, #0
   2032e:	3508      	adds	r5, #8
   20330:	444d      	add	r5, r9
   20332:	ae4c      	add	r6, sp, #304	; 0x130
   20334:	682a      	ldr	r2, [r5, #0]
   20336:	686b      	ldr	r3, [r5, #4]
   20338:	0038      	movs	r0, r7
   2033a:	0021      	movs	r1, r4
   2033c:	f001 fdbe 	bl	21ebc <__aeabi_dadd>
   20340:	3d08      	subs	r5, #8
   20342:	0007      	movs	r7, r0
   20344:	000c      	movs	r4, r1
   20346:	42ae      	cmp	r6, r5
   20348:	d1f4      	bne.n	20334 <__kernel_rem_pio2+0x758>
   2034a:	9b03      	ldr	r3, [sp, #12]
   2034c:	2b00      	cmp	r3, #0
   2034e:	d100      	bne.n	20352 <__kernel_rem_pio2+0x776>
   20350:	e091      	b.n	20476 <__kernel_rem_pio2+0x89a>
   20352:	2180      	movs	r1, #128	; 0x80
   20354:	9a07      	ldr	r2, [sp, #28]
   20356:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   20358:	0609      	lsls	r1, r1, #24
   2035a:	6013      	str	r3, [r2, #0]
   2035c:	464b      	mov	r3, r9
   2035e:	468c      	mov	ip, r1
   20360:	685b      	ldr	r3, [r3, #4]
   20362:	4464      	add	r4, ip
   20364:	4463      	add	r3, ip
   20366:	6053      	str	r3, [r2, #4]
   20368:	464b      	mov	r3, r9
   2036a:	689b      	ldr	r3, [r3, #8]
   2036c:	6117      	str	r7, [r2, #16]
   2036e:	6093      	str	r3, [r2, #8]
   20370:	464b      	mov	r3, r9
   20372:	68db      	ldr	r3, [r3, #12]
   20374:	6154      	str	r4, [r2, #20]
   20376:	4463      	add	r3, ip
   20378:	60d3      	str	r3, [r2, #12]
   2037a:	e710      	b.n	2019e <__kernel_rem_pio2+0x5c2>
   2037c:	0002      	movs	r2, r0
   2037e:	000b      	movs	r3, r1
   20380:	9c07      	ldr	r4, [sp, #28]
   20382:	6022      	str	r2, [r4, #0]
   20384:	6063      	str	r3, [r4, #4]
   20386:	000b      	movs	r3, r1
   20388:	0002      	movs	r2, r0
   2038a:	984a      	ldr	r0, [sp, #296]	; 0x128
   2038c:	994b      	ldr	r1, [sp, #300]	; 0x12c
   2038e:	f002 ff59 	bl	23244 <__aeabi_dsub>
   20392:	9b02      	ldr	r3, [sp, #8]
   20394:	2b00      	cmp	r3, #0
   20396:	dd00      	ble.n	2039a <__kernel_rem_pio2+0x7be>
   20398:	e746      	b.n	20228 <__kernel_rem_pio2+0x64c>
   2039a:	000b      	movs	r3, r1
   2039c:	0002      	movs	r2, r0
   2039e:	9907      	ldr	r1, [sp, #28]
   203a0:	608a      	str	r2, [r1, #8]
   203a2:	60cb      	str	r3, [r1, #12]
   203a4:	e6fb      	b.n	2019e <__kernel_rem_pio2+0x5c2>
   203a6:	9b00      	ldr	r3, [sp, #0]
   203a8:	a90e      	add	r1, sp, #56	; 0x38
   203aa:	1e5a      	subs	r2, r3, #1
   203ac:	0092      	lsls	r2, r2, #2
   203ae:	ab0e      	add	r3, sp, #56	; 0x38
   203b0:	589b      	ldr	r3, [r3, r2]
   203b2:	9305      	str	r3, [sp, #20]
   203b4:	025b      	lsls	r3, r3, #9
   203b6:	0a5b      	lsrs	r3, r3, #9
   203b8:	508b      	str	r3, [r1, r2]
   203ba:	e584      	b.n	1fec6 <__kernel_rem_pio2+0x2ea>
   203bc:	9a00      	ldr	r2, [sp, #0]
   203be:	3301      	adds	r3, #1
   203c0:	429a      	cmp	r2, r3
   203c2:	d176      	bne.n	204b2 <__kernel_rem_pio2+0x8d6>
   203c4:	9b04      	ldr	r3, [sp, #16]
   203c6:	2b00      	cmp	r3, #0
   203c8:	dd00      	ble.n	203cc <__kernel_rem_pio2+0x7f0>
   203ca:	e56c      	b.n	1fea6 <__kernel_rem_pio2+0x2ca>
   203cc:	2d02      	cmp	r5, #2
   203ce:	d000      	beq.n	203d2 <__kernel_rem_pio2+0x7f6>
   203d0:	e593      	b.n	1fefa <__kernel_rem_pio2+0x31e>
   203d2:	e62d      	b.n	20030 <__kernel_rem_pio2+0x454>
   203d4:	4699      	mov	r9, r3
   203d6:	4643      	mov	r3, r8
   203d8:	9309      	str	r3, [sp, #36]	; 0x24
   203da:	9b04      	ldr	r3, [sp, #16]
   203dc:	0030      	movs	r0, r6
   203de:	425a      	negs	r2, r3
   203e0:	0039      	movs	r1, r7
   203e2:	9503      	str	r5, [sp, #12]
   203e4:	f000 fb7a 	bl	20adc <scalbn>
   203e8:	2200      	movs	r2, #0
   203ea:	4b38      	ldr	r3, [pc, #224]	; (204cc <__kernel_rem_pio2+0x8f0>)
   203ec:	0004      	movs	r4, r0
   203ee:	000d      	movs	r5, r1
   203f0:	f000 fd8e 	bl	20f10 <__aeabi_dcmpge>
   203f4:	2800      	cmp	r0, #0
   203f6:	d030      	beq.n	2045a <__kernel_rem_pio2+0x87e>
   203f8:	4b35      	ldr	r3, [pc, #212]	; (204d0 <__kernel_rem_pio2+0x8f4>)
   203fa:	2200      	movs	r2, #0
   203fc:	0020      	movs	r0, r4
   203fe:	0029      	movs	r1, r5
   20400:	f002 fca0 	bl	22d44 <__aeabi_dmul>
   20404:	f003 fa54 	bl	238b0 <__aeabi_d2iz>
   20408:	464a      	mov	r2, r9
   2040a:	0006      	movs	r6, r0
   2040c:	0097      	lsls	r7, r2, #2
   2040e:	f003 fa83 	bl	23918 <__aeabi_i2d>
   20412:	2200      	movs	r2, #0
   20414:	4b2d      	ldr	r3, [pc, #180]	; (204cc <__kernel_rem_pio2+0x8f0>)
   20416:	f002 fc95 	bl	22d44 <__aeabi_dmul>
   2041a:	0002      	movs	r2, r0
   2041c:	000b      	movs	r3, r1
   2041e:	0020      	movs	r0, r4
   20420:	0029      	movs	r1, r5
   20422:	f002 ff0f 	bl	23244 <__aeabi_dsub>
   20426:	f003 fa43 	bl	238b0 <__aeabi_d2iz>
   2042a:	aa0e      	add	r2, sp, #56	; 0x38
   2042c:	51d0      	str	r0, [r2, r7]
   2042e:	464a      	mov	r2, r9
   20430:	9b04      	ldr	r3, [sp, #16]
   20432:	3201      	adds	r2, #1
   20434:	3318      	adds	r3, #24
   20436:	9202      	str	r2, [sp, #8]
   20438:	9304      	str	r3, [sp, #16]
   2043a:	0093      	lsls	r3, r2, #2
   2043c:	aa0e      	add	r2, sp, #56	; 0x38
   2043e:	50d6      	str	r6, [r2, r3]
   20440:	e61c      	b.n	2007c <__kernel_rem_pio2+0x4a0>
   20442:	2201      	movs	r2, #1
   20444:	e587      	b.n	1ff56 <__kernel_rem_pio2+0x37a>
   20446:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   20448:	2b02      	cmp	r3, #2
   2044a:	dc25      	bgt.n	20498 <__kernel_rem_pio2+0x8bc>
   2044c:	2b00      	cmp	r3, #0
   2044e:	dc38      	bgt.n	204c2 <__kernel_rem_pio2+0x8e6>
   20450:	d000      	beq.n	20454 <__kernel_rem_pio2+0x878>
   20452:	e6a4      	b.n	2019e <__kernel_rem_pio2+0x5c2>
   20454:	2700      	movs	r7, #0
   20456:	2400      	movs	r4, #0
   20458:	e695      	b.n	20186 <__kernel_rem_pio2+0x5aa>
   2045a:	464b      	mov	r3, r9
   2045c:	0020      	movs	r0, r4
   2045e:	0029      	movs	r1, r5
   20460:	009e      	lsls	r6, r3, #2
   20462:	f003 fa25 	bl	238b0 <__aeabi_d2iz>
   20466:	ab0e      	add	r3, sp, #56	; 0x38
   20468:	5198      	str	r0, [r3, r6]
   2046a:	464b      	mov	r3, r9
   2046c:	9302      	str	r3, [sp, #8]
   2046e:	e605      	b.n	2007c <__kernel_rem_pio2+0x4a0>
   20470:	ab72      	add	r3, sp, #456	; 0x1c8
   20472:	9308      	str	r3, [sp, #32]
   20474:	e42d      	b.n	1fcd2 <__kernel_rem_pio2+0xf6>
   20476:	9907      	ldr	r1, [sp, #28]
   20478:	9a4a      	ldr	r2, [sp, #296]	; 0x128
   2047a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   2047c:	600a      	str	r2, [r1, #0]
   2047e:	604b      	str	r3, [r1, #4]
   20480:	464b      	mov	r3, r9
   20482:	689a      	ldr	r2, [r3, #8]
   20484:	68db      	ldr	r3, [r3, #12]
   20486:	9200      	str	r2, [sp, #0]
   20488:	9301      	str	r3, [sp, #4]
   2048a:	608a      	str	r2, [r1, #8]
   2048c:	60cb      	str	r3, [r1, #12]
   2048e:	003a      	movs	r2, r7
   20490:	0023      	movs	r3, r4
   20492:	610a      	str	r2, [r1, #16]
   20494:	614b      	str	r3, [r1, #20]
   20496:	e682      	b.n	2019e <__kernel_rem_pio2+0x5c2>
   20498:	ab4a      	add	r3, sp, #296	; 0x128
   2049a:	4699      	mov	r9, r3
   2049c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   2049e:	2b03      	cmp	r3, #3
   204a0:	d000      	beq.n	204a4 <__kernel_rem_pio2+0x8c8>
   204a2:	e67c      	b.n	2019e <__kernel_rem_pio2+0x5c2>
   204a4:	2700      	movs	r7, #0
   204a6:	2400      	movs	r4, #0
   204a8:	e74f      	b.n	2034a <__kernel_rem_pio2+0x76e>
   204aa:	9a00      	ldr	r2, [sp, #0]
   204ac:	2301      	movs	r3, #1
   204ae:	2a01      	cmp	r2, #1
   204b0:	dd88      	ble.n	203c4 <__kernel_rem_pio2+0x7e8>
   204b2:	0099      	lsls	r1, r3, #2
   204b4:	aa0e      	add	r2, sp, #56	; 0x38
   204b6:	5854      	ldr	r4, [r2, r1]
   204b8:	2c00      	cmp	r4, #0
   204ba:	d100      	bne.n	204be <__kernel_rem_pio2+0x8e2>
   204bc:	e77e      	b.n	203bc <__kernel_rem_pio2+0x7e0>
   204be:	1c5a      	adds	r2, r3, #1
   204c0:	e4aa      	b.n	1fe18 <__kernel_rem_pio2+0x23c>
   204c2:	2000      	movs	r0, #0
   204c4:	2100      	movs	r1, #0
   204c6:	e69c      	b.n	20202 <__kernel_rem_pio2+0x626>
   204c8:	1fffffff 	.word	0x1fffffff
   204cc:	41700000 	.word	0x41700000
   204d0:	3e700000 	.word	0x3e700000

000204d4 <__kernel_sin>:
   204d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   204d6:	46ce      	mov	lr, r9
   204d8:	4647      	mov	r7, r8
   204da:	b580      	push	{r7, lr}
   204dc:	b087      	sub	sp, #28
   204de:	9200      	str	r2, [sp, #0]
   204e0:	9301      	str	r3, [sp, #4]
   204e2:	4a46      	ldr	r2, [pc, #280]	; (205fc <__kernel_sin+0x128>)
   204e4:	004b      	lsls	r3, r1, #1
   204e6:	4681      	mov	r9, r0
   204e8:	4688      	mov	r8, r1
   204ea:	085b      	lsrs	r3, r3, #1
   204ec:	4293      	cmp	r3, r2
   204ee:	dc05      	bgt.n	204fc <__kernel_sin+0x28>
   204f0:	f003 f9de 	bl	238b0 <__aeabi_d2iz>
   204f4:	4641      	mov	r1, r8
   204f6:	1e03      	subs	r3, r0, #0
   204f8:	4648      	mov	r0, r9
   204fa:	d066      	beq.n	205ca <__kernel_sin+0xf6>
   204fc:	464a      	mov	r2, r9
   204fe:	4643      	mov	r3, r8
   20500:	4648      	mov	r0, r9
   20502:	4641      	mov	r1, r8
   20504:	f002 fc1e 	bl	22d44 <__aeabi_dmul>
   20508:	0004      	movs	r4, r0
   2050a:	000d      	movs	r5, r1
   2050c:	0002      	movs	r2, r0
   2050e:	000b      	movs	r3, r1
   20510:	4648      	mov	r0, r9
   20512:	4641      	mov	r1, r8
   20514:	f002 fc16 	bl	22d44 <__aeabi_dmul>
   20518:	4a39      	ldr	r2, [pc, #228]	; (20600 <__kernel_sin+0x12c>)
   2051a:	4b3a      	ldr	r3, [pc, #232]	; (20604 <__kernel_sin+0x130>)
   2051c:	0006      	movs	r6, r0
   2051e:	000f      	movs	r7, r1
   20520:	0020      	movs	r0, r4
   20522:	0029      	movs	r1, r5
   20524:	f002 fc0e 	bl	22d44 <__aeabi_dmul>
   20528:	4a37      	ldr	r2, [pc, #220]	; (20608 <__kernel_sin+0x134>)
   2052a:	4b38      	ldr	r3, [pc, #224]	; (2060c <__kernel_sin+0x138>)
   2052c:	f002 fe8a 	bl	23244 <__aeabi_dsub>
   20530:	0022      	movs	r2, r4
   20532:	002b      	movs	r3, r5
   20534:	f002 fc06 	bl	22d44 <__aeabi_dmul>
   20538:	4a35      	ldr	r2, [pc, #212]	; (20610 <__kernel_sin+0x13c>)
   2053a:	4b36      	ldr	r3, [pc, #216]	; (20614 <__kernel_sin+0x140>)
   2053c:	f001 fcbe 	bl	21ebc <__aeabi_dadd>
   20540:	0022      	movs	r2, r4
   20542:	002b      	movs	r3, r5
   20544:	f002 fbfe 	bl	22d44 <__aeabi_dmul>
   20548:	4a33      	ldr	r2, [pc, #204]	; (20618 <__kernel_sin+0x144>)
   2054a:	4b34      	ldr	r3, [pc, #208]	; (2061c <__kernel_sin+0x148>)
   2054c:	f002 fe7a 	bl	23244 <__aeabi_dsub>
   20550:	0022      	movs	r2, r4
   20552:	002b      	movs	r3, r5
   20554:	f002 fbf6 	bl	22d44 <__aeabi_dmul>
   20558:	4b31      	ldr	r3, [pc, #196]	; (20620 <__kernel_sin+0x14c>)
   2055a:	4a32      	ldr	r2, [pc, #200]	; (20624 <__kernel_sin+0x150>)
   2055c:	f001 fcae 	bl	21ebc <__aeabi_dadd>
   20560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20562:	9002      	str	r0, [sp, #8]
   20564:	9103      	str	r1, [sp, #12]
   20566:	2b00      	cmp	r3, #0
   20568:	d034      	beq.n	205d4 <__kernel_sin+0x100>
   2056a:	9800      	ldr	r0, [sp, #0]
   2056c:	9901      	ldr	r1, [sp, #4]
   2056e:	2200      	movs	r2, #0
   20570:	4b2d      	ldr	r3, [pc, #180]	; (20628 <__kernel_sin+0x154>)
   20572:	f002 fbe7 	bl	22d44 <__aeabi_dmul>
   20576:	9a02      	ldr	r2, [sp, #8]
   20578:	9b03      	ldr	r3, [sp, #12]
   2057a:	9004      	str	r0, [sp, #16]
   2057c:	9105      	str	r1, [sp, #20]
   2057e:	0030      	movs	r0, r6
   20580:	0039      	movs	r1, r7
   20582:	f002 fbdf 	bl	22d44 <__aeabi_dmul>
   20586:	0002      	movs	r2, r0
   20588:	000b      	movs	r3, r1
   2058a:	9804      	ldr	r0, [sp, #16]
   2058c:	9905      	ldr	r1, [sp, #20]
   2058e:	f002 fe59 	bl	23244 <__aeabi_dsub>
   20592:	0022      	movs	r2, r4
   20594:	002b      	movs	r3, r5
   20596:	f002 fbd5 	bl	22d44 <__aeabi_dmul>
   2059a:	9a00      	ldr	r2, [sp, #0]
   2059c:	9b01      	ldr	r3, [sp, #4]
   2059e:	f002 fe51 	bl	23244 <__aeabi_dsub>
   205a2:	4a22      	ldr	r2, [pc, #136]	; (2062c <__kernel_sin+0x158>)
   205a4:	0004      	movs	r4, r0
   205a6:	000d      	movs	r5, r1
   205a8:	4b21      	ldr	r3, [pc, #132]	; (20630 <__kernel_sin+0x15c>)
   205aa:	0030      	movs	r0, r6
   205ac:	0039      	movs	r1, r7
   205ae:	f002 fbc9 	bl	22d44 <__aeabi_dmul>
   205b2:	0002      	movs	r2, r0
   205b4:	000b      	movs	r3, r1
   205b6:	0020      	movs	r0, r4
   205b8:	0029      	movs	r1, r5
   205ba:	f001 fc7f 	bl	21ebc <__aeabi_dadd>
   205be:	0002      	movs	r2, r0
   205c0:	000b      	movs	r3, r1
   205c2:	4648      	mov	r0, r9
   205c4:	4641      	mov	r1, r8
   205c6:	f002 fe3d 	bl	23244 <__aeabi_dsub>
   205ca:	b007      	add	sp, #28
   205cc:	bc0c      	pop	{r2, r3}
   205ce:	4690      	mov	r8, r2
   205d0:	4699      	mov	r9, r3
   205d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   205d4:	0002      	movs	r2, r0
   205d6:	000b      	movs	r3, r1
   205d8:	0020      	movs	r0, r4
   205da:	0029      	movs	r1, r5
   205dc:	f002 fbb2 	bl	22d44 <__aeabi_dmul>
   205e0:	4a12      	ldr	r2, [pc, #72]	; (2062c <__kernel_sin+0x158>)
   205e2:	4b13      	ldr	r3, [pc, #76]	; (20630 <__kernel_sin+0x15c>)
   205e4:	f002 fe2e 	bl	23244 <__aeabi_dsub>
   205e8:	0032      	movs	r2, r6
   205ea:	003b      	movs	r3, r7
   205ec:	f002 fbaa 	bl	22d44 <__aeabi_dmul>
   205f0:	464a      	mov	r2, r9
   205f2:	4643      	mov	r3, r8
   205f4:	f001 fc62 	bl	21ebc <__aeabi_dadd>
   205f8:	e7e7      	b.n	205ca <__kernel_sin+0xf6>
   205fa:	46c0      	nop			; (mov r8, r8)
   205fc:	3e3fffff 	.word	0x3e3fffff
   20600:	5acfd57c 	.word	0x5acfd57c
   20604:	3de5d93a 	.word	0x3de5d93a
   20608:	8a2b9ceb 	.word	0x8a2b9ceb
   2060c:	3e5ae5e6 	.word	0x3e5ae5e6
   20610:	57b1fe7d 	.word	0x57b1fe7d
   20614:	3ec71de3 	.word	0x3ec71de3
   20618:	19c161d5 	.word	0x19c161d5
   2061c:	3f2a01a0 	.word	0x3f2a01a0
   20620:	3f811111 	.word	0x3f811111
   20624:	1110f8a6 	.word	0x1110f8a6
   20628:	3fe00000 	.word	0x3fe00000
   2062c:	55555549 	.word	0x55555549
   20630:	3fc55555 	.word	0x3fc55555

00020634 <atan>:
   20634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20636:	464e      	mov	r6, r9
   20638:	4657      	mov	r7, sl
   2063a:	4645      	mov	r5, r8
   2063c:	46de      	mov	lr, fp
   2063e:	4ba4      	ldr	r3, [pc, #656]	; (208d0 <atan+0x29c>)
   20640:	b5e0      	push	{r5, r6, r7, lr}
   20642:	004e      	lsls	r6, r1, #1
   20644:	4680      	mov	r8, r0
   20646:	4689      	mov	r9, r1
   20648:	468a      	mov	sl, r1
   2064a:	0876      	lsrs	r6, r6, #1
   2064c:	429e      	cmp	r6, r3
   2064e:	dd0c      	ble.n	2066a <atan+0x36>
   20650:	4ba0      	ldr	r3, [pc, #640]	; (208d4 <atan+0x2a0>)
   20652:	429e      	cmp	r6, r3
   20654:	dd00      	ble.n	20658 <atan+0x24>
   20656:	e0a3      	b.n	207a0 <atan+0x16c>
   20658:	d100      	bne.n	2065c <atan+0x28>
   2065a:	e09e      	b.n	2079a <atan+0x166>
   2065c:	4653      	mov	r3, sl
   2065e:	2b00      	cmp	r3, #0
   20660:	dc00      	bgt.n	20664 <atan+0x30>
   20662:	e0e1      	b.n	20828 <atan+0x1f4>
   20664:	4b9c      	ldr	r3, [pc, #624]	; (208d8 <atan+0x2a4>)
   20666:	4a9d      	ldr	r2, [pc, #628]	; (208dc <atan+0x2a8>)
   20668:	e0a2      	b.n	207b0 <atan+0x17c>
   2066a:	4b9d      	ldr	r3, [pc, #628]	; (208e0 <atan+0x2ac>)
   2066c:	429e      	cmp	r6, r3
   2066e:	dd00      	ble.n	20672 <atan+0x3e>
   20670:	e0b4      	b.n	207dc <atan+0x1a8>
   20672:	4b9c      	ldr	r3, [pc, #624]	; (208e4 <atan+0x2b0>)
   20674:	429e      	cmp	r6, r3
   20676:	dc00      	bgt.n	2067a <atan+0x46>
   20678:	e0a2      	b.n	207c0 <atan+0x18c>
   2067a:	2301      	movs	r3, #1
   2067c:	425b      	negs	r3, r3
   2067e:	469b      	mov	fp, r3
   20680:	4642      	mov	r2, r8
   20682:	464b      	mov	r3, r9
   20684:	4640      	mov	r0, r8
   20686:	4649      	mov	r1, r9
   20688:	f002 fb5c 	bl	22d44 <__aeabi_dmul>
   2068c:	0002      	movs	r2, r0
   2068e:	000b      	movs	r3, r1
   20690:	0006      	movs	r6, r0
   20692:	000f      	movs	r7, r1
   20694:	f002 fb56 	bl	22d44 <__aeabi_dmul>
   20698:	0004      	movs	r4, r0
   2069a:	000d      	movs	r5, r1
   2069c:	4a92      	ldr	r2, [pc, #584]	; (208e8 <atan+0x2b4>)
   2069e:	4b93      	ldr	r3, [pc, #588]	; (208ec <atan+0x2b8>)
   206a0:	f002 fb50 	bl	22d44 <__aeabi_dmul>
   206a4:	4a92      	ldr	r2, [pc, #584]	; (208f0 <atan+0x2bc>)
   206a6:	4b93      	ldr	r3, [pc, #588]	; (208f4 <atan+0x2c0>)
   206a8:	f001 fc08 	bl	21ebc <__aeabi_dadd>
   206ac:	0022      	movs	r2, r4
   206ae:	002b      	movs	r3, r5
   206b0:	f002 fb48 	bl	22d44 <__aeabi_dmul>
   206b4:	4a90      	ldr	r2, [pc, #576]	; (208f8 <atan+0x2c4>)
   206b6:	4b91      	ldr	r3, [pc, #580]	; (208fc <atan+0x2c8>)
   206b8:	f001 fc00 	bl	21ebc <__aeabi_dadd>
   206bc:	0022      	movs	r2, r4
   206be:	002b      	movs	r3, r5
   206c0:	f002 fb40 	bl	22d44 <__aeabi_dmul>
   206c4:	4a8e      	ldr	r2, [pc, #568]	; (20900 <atan+0x2cc>)
   206c6:	4b8f      	ldr	r3, [pc, #572]	; (20904 <atan+0x2d0>)
   206c8:	f001 fbf8 	bl	21ebc <__aeabi_dadd>
   206cc:	0022      	movs	r2, r4
   206ce:	002b      	movs	r3, r5
   206d0:	f002 fb38 	bl	22d44 <__aeabi_dmul>
   206d4:	4a8c      	ldr	r2, [pc, #560]	; (20908 <atan+0x2d4>)
   206d6:	4b8d      	ldr	r3, [pc, #564]	; (2090c <atan+0x2d8>)
   206d8:	f001 fbf0 	bl	21ebc <__aeabi_dadd>
   206dc:	0022      	movs	r2, r4
   206de:	002b      	movs	r3, r5
   206e0:	f002 fb30 	bl	22d44 <__aeabi_dmul>
   206e4:	4a8a      	ldr	r2, [pc, #552]	; (20910 <atan+0x2dc>)
   206e6:	4b8b      	ldr	r3, [pc, #556]	; (20914 <atan+0x2e0>)
   206e8:	f001 fbe8 	bl	21ebc <__aeabi_dadd>
   206ec:	0032      	movs	r2, r6
   206ee:	003b      	movs	r3, r7
   206f0:	f002 fb28 	bl	22d44 <__aeabi_dmul>
   206f4:	4a88      	ldr	r2, [pc, #544]	; (20918 <atan+0x2e4>)
   206f6:	4b89      	ldr	r3, [pc, #548]	; (2091c <atan+0x2e8>)
   206f8:	0006      	movs	r6, r0
   206fa:	000f      	movs	r7, r1
   206fc:	0020      	movs	r0, r4
   206fe:	0029      	movs	r1, r5
   20700:	f002 fb20 	bl	22d44 <__aeabi_dmul>
   20704:	4a86      	ldr	r2, [pc, #536]	; (20920 <atan+0x2ec>)
   20706:	4b87      	ldr	r3, [pc, #540]	; (20924 <atan+0x2f0>)
   20708:	f002 fd9c 	bl	23244 <__aeabi_dsub>
   2070c:	0022      	movs	r2, r4
   2070e:	002b      	movs	r3, r5
   20710:	f002 fb18 	bl	22d44 <__aeabi_dmul>
   20714:	4a84      	ldr	r2, [pc, #528]	; (20928 <atan+0x2f4>)
   20716:	4b85      	ldr	r3, [pc, #532]	; (2092c <atan+0x2f8>)
   20718:	f002 fd94 	bl	23244 <__aeabi_dsub>
   2071c:	0022      	movs	r2, r4
   2071e:	002b      	movs	r3, r5
   20720:	f002 fb10 	bl	22d44 <__aeabi_dmul>
   20724:	4a82      	ldr	r2, [pc, #520]	; (20930 <atan+0x2fc>)
   20726:	4b83      	ldr	r3, [pc, #524]	; (20934 <atan+0x300>)
   20728:	f002 fd8c 	bl	23244 <__aeabi_dsub>
   2072c:	0022      	movs	r2, r4
   2072e:	002b      	movs	r3, r5
   20730:	f002 fb08 	bl	22d44 <__aeabi_dmul>
   20734:	4a80      	ldr	r2, [pc, #512]	; (20938 <atan+0x304>)
   20736:	4b81      	ldr	r3, [pc, #516]	; (2093c <atan+0x308>)
   20738:	f002 fd84 	bl	23244 <__aeabi_dsub>
   2073c:	0022      	movs	r2, r4
   2073e:	002b      	movs	r3, r5
   20740:	f002 fb00 	bl	22d44 <__aeabi_dmul>
   20744:	000b      	movs	r3, r1
   20746:	4659      	mov	r1, fp
   20748:	0002      	movs	r2, r0
   2074a:	3101      	adds	r1, #1
   2074c:	d100      	bne.n	20750 <atan+0x11c>
   2074e:	e06e      	b.n	2082e <atan+0x1fa>
   20750:	4659      	mov	r1, fp
   20752:	0030      	movs	r0, r6
   20754:	00cc      	lsls	r4, r1, #3
   20756:	0039      	movs	r1, r7
   20758:	f001 fbb0 	bl	21ebc <__aeabi_dadd>
   2075c:	4642      	mov	r2, r8
   2075e:	464b      	mov	r3, r9
   20760:	f002 faf0 	bl	22d44 <__aeabi_dmul>
   20764:	4d76      	ldr	r5, [pc, #472]	; (20940 <atan+0x30c>)
   20766:	4b77      	ldr	r3, [pc, #476]	; (20944 <atan+0x310>)
   20768:	192d      	adds	r5, r5, r4
   2076a:	191c      	adds	r4, r3, r4
   2076c:	6822      	ldr	r2, [r4, #0]
   2076e:	6863      	ldr	r3, [r4, #4]
   20770:	f002 fd68 	bl	23244 <__aeabi_dsub>
   20774:	4642      	mov	r2, r8
   20776:	464b      	mov	r3, r9
   20778:	f002 fd64 	bl	23244 <__aeabi_dsub>
   2077c:	0002      	movs	r2, r0
   2077e:	000b      	movs	r3, r1
   20780:	6828      	ldr	r0, [r5, #0]
   20782:	6869      	ldr	r1, [r5, #4]
   20784:	f002 fd5e 	bl	23244 <__aeabi_dsub>
   20788:	0003      	movs	r3, r0
   2078a:	4650      	mov	r0, sl
   2078c:	000a      	movs	r2, r1
   2078e:	2800      	cmp	r0, #0
   20790:	da0e      	bge.n	207b0 <atan+0x17c>
   20792:	2280      	movs	r2, #128	; 0x80
   20794:	0612      	lsls	r2, r2, #24
   20796:	188a      	adds	r2, r1, r2
   20798:	e00a      	b.n	207b0 <atan+0x17c>
   2079a:	2800      	cmp	r0, #0
   2079c:	d100      	bne.n	207a0 <atan+0x16c>
   2079e:	e75d      	b.n	2065c <atan+0x28>
   207a0:	4642      	mov	r2, r8
   207a2:	464b      	mov	r3, r9
   207a4:	4640      	mov	r0, r8
   207a6:	4649      	mov	r1, r9
   207a8:	f001 fb88 	bl	21ebc <__aeabi_dadd>
   207ac:	0003      	movs	r3, r0
   207ae:	000a      	movs	r2, r1
   207b0:	0018      	movs	r0, r3
   207b2:	0011      	movs	r1, r2
   207b4:	bc3c      	pop	{r2, r3, r4, r5}
   207b6:	4690      	mov	r8, r2
   207b8:	4699      	mov	r9, r3
   207ba:	46a2      	mov	sl, r4
   207bc:	46ab      	mov	fp, r5
   207be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   207c0:	4a61      	ldr	r2, [pc, #388]	; (20948 <atan+0x314>)
   207c2:	4b62      	ldr	r3, [pc, #392]	; (2094c <atan+0x318>)
   207c4:	f001 fb7a 	bl	21ebc <__aeabi_dadd>
   207c8:	2200      	movs	r2, #0
   207ca:	4b61      	ldr	r3, [pc, #388]	; (20950 <atan+0x31c>)
   207cc:	f000 fb96 	bl	20efc <__aeabi_dcmpgt>
   207d0:	2800      	cmp	r0, #0
   207d2:	d100      	bne.n	207d6 <atan+0x1a2>
   207d4:	e751      	b.n	2067a <atan+0x46>
   207d6:	4643      	mov	r3, r8
   207d8:	464a      	mov	r2, r9
   207da:	e7e9      	b.n	207b0 <atan+0x17c>
   207dc:	f000 f8c6 	bl	2096c <fabs>
   207e0:	4b5c      	ldr	r3, [pc, #368]	; (20954 <atan+0x320>)
   207e2:	0004      	movs	r4, r0
   207e4:	000d      	movs	r5, r1
   207e6:	429e      	cmp	r6, r3
   207e8:	dc32      	bgt.n	20850 <atan+0x21c>
   207ea:	4b5b      	ldr	r3, [pc, #364]	; (20958 <atan+0x324>)
   207ec:	429e      	cmp	r6, r3
   207ee:	dc58      	bgt.n	208a2 <atan+0x26e>
   207f0:	0002      	movs	r2, r0
   207f2:	000b      	movs	r3, r1
   207f4:	f001 fb62 	bl	21ebc <__aeabi_dadd>
   207f8:	2200      	movs	r2, #0
   207fa:	4b55      	ldr	r3, [pc, #340]	; (20950 <atan+0x31c>)
   207fc:	f002 fd22 	bl	23244 <__aeabi_dsub>
   20800:	2380      	movs	r3, #128	; 0x80
   20802:	0006      	movs	r6, r0
   20804:	000f      	movs	r7, r1
   20806:	2200      	movs	r2, #0
   20808:	05db      	lsls	r3, r3, #23
   2080a:	0020      	movs	r0, r4
   2080c:	0029      	movs	r1, r5
   2080e:	f001 fb55 	bl	21ebc <__aeabi_dadd>
   20812:	000b      	movs	r3, r1
   20814:	0002      	movs	r2, r0
   20816:	0039      	movs	r1, r7
   20818:	0030      	movs	r0, r6
   2081a:	f001 fe5f 	bl	224dc <__aeabi_ddiv>
   2081e:	2300      	movs	r3, #0
   20820:	4680      	mov	r8, r0
   20822:	4689      	mov	r9, r1
   20824:	469b      	mov	fp, r3
   20826:	e72b      	b.n	20680 <atan+0x4c>
   20828:	4b2b      	ldr	r3, [pc, #172]	; (208d8 <atan+0x2a4>)
   2082a:	4a4c      	ldr	r2, [pc, #304]	; (2095c <atan+0x328>)
   2082c:	e7c0      	b.n	207b0 <atan+0x17c>
   2082e:	0030      	movs	r0, r6
   20830:	0039      	movs	r1, r7
   20832:	f001 fb43 	bl	21ebc <__aeabi_dadd>
   20836:	4642      	mov	r2, r8
   20838:	464b      	mov	r3, r9
   2083a:	f002 fa83 	bl	22d44 <__aeabi_dmul>
   2083e:	0002      	movs	r2, r0
   20840:	000b      	movs	r3, r1
   20842:	4640      	mov	r0, r8
   20844:	4649      	mov	r1, r9
   20846:	f002 fcfd 	bl	23244 <__aeabi_dsub>
   2084a:	0003      	movs	r3, r0
   2084c:	000a      	movs	r2, r1
   2084e:	e7af      	b.n	207b0 <atan+0x17c>
   20850:	4b43      	ldr	r3, [pc, #268]	; (20960 <atan+0x32c>)
   20852:	429e      	cmp	r6, r3
   20854:	dc1a      	bgt.n	2088c <atan+0x258>
   20856:	2200      	movs	r2, #0
   20858:	4b42      	ldr	r3, [pc, #264]	; (20964 <atan+0x330>)
   2085a:	f002 fcf3 	bl	23244 <__aeabi_dsub>
   2085e:	2200      	movs	r2, #0
   20860:	0006      	movs	r6, r0
   20862:	000f      	movs	r7, r1
   20864:	4b3f      	ldr	r3, [pc, #252]	; (20964 <atan+0x330>)
   20866:	0020      	movs	r0, r4
   20868:	0029      	movs	r1, r5
   2086a:	f002 fa6b 	bl	22d44 <__aeabi_dmul>
   2086e:	2200      	movs	r2, #0
   20870:	4b37      	ldr	r3, [pc, #220]	; (20950 <atan+0x31c>)
   20872:	f001 fb23 	bl	21ebc <__aeabi_dadd>
   20876:	000b      	movs	r3, r1
   20878:	0002      	movs	r2, r0
   2087a:	0039      	movs	r1, r7
   2087c:	0030      	movs	r0, r6
   2087e:	f001 fe2d 	bl	224dc <__aeabi_ddiv>
   20882:	2302      	movs	r3, #2
   20884:	4680      	mov	r8, r0
   20886:	4689      	mov	r9, r1
   20888:	469b      	mov	fp, r3
   2088a:	e6f9      	b.n	20680 <atan+0x4c>
   2088c:	000b      	movs	r3, r1
   2088e:	0002      	movs	r2, r0
   20890:	4935      	ldr	r1, [pc, #212]	; (20968 <atan+0x334>)
   20892:	2000      	movs	r0, #0
   20894:	f001 fe22 	bl	224dc <__aeabi_ddiv>
   20898:	2303      	movs	r3, #3
   2089a:	4680      	mov	r8, r0
   2089c:	4689      	mov	r9, r1
   2089e:	469b      	mov	fp, r3
   208a0:	e6ee      	b.n	20680 <atan+0x4c>
   208a2:	2200      	movs	r2, #0
   208a4:	4b2a      	ldr	r3, [pc, #168]	; (20950 <atan+0x31c>)
   208a6:	f002 fccd 	bl	23244 <__aeabi_dsub>
   208aa:	2200      	movs	r2, #0
   208ac:	0006      	movs	r6, r0
   208ae:	000f      	movs	r7, r1
   208b0:	4b27      	ldr	r3, [pc, #156]	; (20950 <atan+0x31c>)
   208b2:	0020      	movs	r0, r4
   208b4:	0029      	movs	r1, r5
   208b6:	f001 fb01 	bl	21ebc <__aeabi_dadd>
   208ba:	000b      	movs	r3, r1
   208bc:	0002      	movs	r2, r0
   208be:	0039      	movs	r1, r7
   208c0:	0030      	movs	r0, r6
   208c2:	f001 fe0b 	bl	224dc <__aeabi_ddiv>
   208c6:	2301      	movs	r3, #1
   208c8:	4680      	mov	r8, r0
   208ca:	4689      	mov	r9, r1
   208cc:	469b      	mov	fp, r3
   208ce:	e6d7      	b.n	20680 <atan+0x4c>
   208d0:	440fffff 	.word	0x440fffff
   208d4:	7ff00000 	.word	0x7ff00000
   208d8:	54442d18 	.word	0x54442d18
   208dc:	3ff921fb 	.word	0x3ff921fb
   208e0:	3fdbffff 	.word	0x3fdbffff
   208e4:	3e1fffff 	.word	0x3e1fffff
   208e8:	e322da11 	.word	0xe322da11
   208ec:	3f90ad3a 	.word	0x3f90ad3a
   208f0:	24760deb 	.word	0x24760deb
   208f4:	3fa97b4b 	.word	0x3fa97b4b
   208f8:	a0d03d51 	.word	0xa0d03d51
   208fc:	3fb10d66 	.word	0x3fb10d66
   20900:	c54c206e 	.word	0xc54c206e
   20904:	3fb745cd 	.word	0x3fb745cd
   20908:	920083ff 	.word	0x920083ff
   2090c:	3fc24924 	.word	0x3fc24924
   20910:	5555550d 	.word	0x5555550d
   20914:	3fd55555 	.word	0x3fd55555
   20918:	2c6a6c2f 	.word	0x2c6a6c2f
   2091c:	bfa2b444 	.word	0xbfa2b444
   20920:	52defd9a 	.word	0x52defd9a
   20924:	3fadde2d 	.word	0x3fadde2d
   20928:	af749a6d 	.word	0xaf749a6d
   2092c:	3fb3b0f2 	.word	0x3fb3b0f2
   20930:	fe231671 	.word	0xfe231671
   20934:	3fbc71c6 	.word	0x3fbc71c6
   20938:	9998ebc4 	.word	0x9998ebc4
   2093c:	3fc99999 	.word	0x3fc99999
   20940:	00029af0 	.word	0x00029af0
   20944:	00029b10 	.word	0x00029b10
   20948:	8800759c 	.word	0x8800759c
   2094c:	7e37e43c 	.word	0x7e37e43c
   20950:	3ff00000 	.word	0x3ff00000
   20954:	3ff2ffff 	.word	0x3ff2ffff
   20958:	3fe5ffff 	.word	0x3fe5ffff
   2095c:	bff921fb 	.word	0xbff921fb
   20960:	40037fff 	.word	0x40037fff
   20964:	3ff80000 	.word	0x3ff80000
   20968:	bff00000 	.word	0xbff00000

0002096c <fabs>:
   2096c:	0049      	lsls	r1, r1, #1
   2096e:	084b      	lsrs	r3, r1, #1
   20970:	0019      	movs	r1, r3
   20972:	4770      	bx	lr

00020974 <finite>:
   20974:	4b03      	ldr	r3, [pc, #12]	; (20984 <finite+0x10>)
   20976:	0048      	lsls	r0, r1, #1
   20978:	469c      	mov	ip, r3
   2097a:	0840      	lsrs	r0, r0, #1
   2097c:	4460      	add	r0, ip
   2097e:	0fc0      	lsrs	r0, r0, #31
   20980:	4770      	bx	lr
   20982:	46c0      	nop			; (mov r8, r8)
   20984:	80100000 	.word	0x80100000

00020988 <matherr>:
   20988:	2000      	movs	r0, #0
   2098a:	4770      	bx	lr

0002098c <nan>:
   2098c:	2000      	movs	r0, #0
   2098e:	4901      	ldr	r1, [pc, #4]	; (20994 <nan+0x8>)
   20990:	4770      	bx	lr
   20992:	46c0      	nop			; (mov r8, r8)
   20994:	7ff80000 	.word	0x7ff80000

00020998 <rint>:
   20998:	b5f0      	push	{r4, r5, r6, r7, lr}
   2099a:	46c6      	mov	lr, r8
   2099c:	b500      	push	{lr}
   2099e:	0fcb      	lsrs	r3, r1, #31
   209a0:	4698      	mov	r8, r3
   209a2:	4c4a      	ldr	r4, [pc, #296]	; (20acc <rint+0x134>)
   209a4:	004b      	lsls	r3, r1, #1
   209a6:	0d5b      	lsrs	r3, r3, #21
   209a8:	191e      	adds	r6, r3, r4
   209aa:	b082      	sub	sp, #8
   209ac:	0007      	movs	r7, r0
   209ae:	000a      	movs	r2, r1
   209b0:	2e13      	cmp	r6, #19
   209b2:	dc35      	bgt.n	20a20 <rint+0x88>
   209b4:	2e00      	cmp	r6, #0
   209b6:	db57      	blt.n	20a68 <rint+0xd0>
   209b8:	4b45      	ldr	r3, [pc, #276]	; (20ad0 <rint+0x138>)
   209ba:	0004      	movs	r4, r0
   209bc:	4133      	asrs	r3, r6
   209be:	001f      	movs	r7, r3
   209c0:	400f      	ands	r7, r1
   209c2:	4307      	orrs	r7, r0
   209c4:	000d      	movs	r5, r1
   209c6:	2f00      	cmp	r7, #0
   209c8:	d024      	beq.n	20a14 <rint+0x7c>
   209ca:	085b      	lsrs	r3, r3, #1
   209cc:	001c      	movs	r4, r3
   209ce:	400c      	ands	r4, r1
   209d0:	4320      	orrs	r0, r4
   209d2:	2700      	movs	r7, #0
   209d4:	2800      	cmp	r0, #0
   209d6:	d007      	beq.n	209e8 <rint+0x50>
   209d8:	2e13      	cmp	r6, #19
   209da:	d100      	bne.n	209de <rint+0x46>
   209dc:	e073      	b.n	20ac6 <rint+0x12e>
   209de:	2280      	movs	r2, #128	; 0x80
   209e0:	02d2      	lsls	r2, r2, #11
   209e2:	4132      	asrs	r2, r6
   209e4:	4399      	bics	r1, r3
   209e6:	430a      	orrs	r2, r1
   209e8:	4643      	mov	r3, r8
   209ea:	00de      	lsls	r6, r3, #3
   209ec:	4b39      	ldr	r3, [pc, #228]	; (20ad4 <rint+0x13c>)
   209ee:	0011      	movs	r1, r2
   209f0:	199e      	adds	r6, r3, r6
   209f2:	6834      	ldr	r4, [r6, #0]
   209f4:	6875      	ldr	r5, [r6, #4]
   209f6:	0038      	movs	r0, r7
   209f8:	0022      	movs	r2, r4
   209fa:	002b      	movs	r3, r5
   209fc:	f001 fa5e 	bl	21ebc <__aeabi_dadd>
   20a00:	9000      	str	r0, [sp, #0]
   20a02:	9101      	str	r1, [sp, #4]
   20a04:	9800      	ldr	r0, [sp, #0]
   20a06:	9901      	ldr	r1, [sp, #4]
   20a08:	0022      	movs	r2, r4
   20a0a:	002b      	movs	r3, r5
   20a0c:	f002 fc1a 	bl	23244 <__aeabi_dsub>
   20a10:	0004      	movs	r4, r0
   20a12:	000d      	movs	r5, r1
   20a14:	0020      	movs	r0, r4
   20a16:	0029      	movs	r1, r5
   20a18:	b002      	add	sp, #8
   20a1a:	bc04      	pop	{r2}
   20a1c:	4690      	mov	r8, r2
   20a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20a20:	2e33      	cmp	r6, #51	; 0x33
   20a22:	dd0c      	ble.n	20a3e <rint+0xa6>
   20a24:	2380      	movs	r3, #128	; 0x80
   20a26:	0004      	movs	r4, r0
   20a28:	00db      	lsls	r3, r3, #3
   20a2a:	000d      	movs	r5, r1
   20a2c:	429e      	cmp	r6, r3
   20a2e:	d1f1      	bne.n	20a14 <rint+0x7c>
   20a30:	0002      	movs	r2, r0
   20a32:	000b      	movs	r3, r1
   20a34:	f001 fa42 	bl	21ebc <__aeabi_dadd>
   20a38:	0004      	movs	r4, r0
   20a3a:	000d      	movs	r5, r1
   20a3c:	e7ea      	b.n	20a14 <rint+0x7c>
   20a3e:	4c26      	ldr	r4, [pc, #152]	; (20ad8 <rint+0x140>)
   20a40:	000d      	movs	r5, r1
   20a42:	46a4      	mov	ip, r4
   20a44:	2401      	movs	r4, #1
   20a46:	4463      	add	r3, ip
   20a48:	4264      	negs	r4, r4
   20a4a:	40dc      	lsrs	r4, r3
   20a4c:	46a4      	mov	ip, r4
   20a4e:	4661      	mov	r1, ip
   20a50:	0004      	movs	r4, r0
   20a52:	4201      	tst	r1, r0
   20a54:	d0de      	beq.n	20a14 <rint+0x7c>
   20a56:	0849      	lsrs	r1, r1, #1
   20a58:	4201      	tst	r1, r0
   20a5a:	d0c5      	beq.n	209e8 <rint+0x50>
   20a5c:	2780      	movs	r7, #128	; 0x80
   20a5e:	05ff      	lsls	r7, r7, #23
   20a60:	411f      	asrs	r7, r3
   20a62:	4388      	bics	r0, r1
   20a64:	4307      	orrs	r7, r0
   20a66:	e7bf      	b.n	209e8 <rint+0x50>
   20a68:	004b      	lsls	r3, r1, #1
   20a6a:	085b      	lsrs	r3, r3, #1
   20a6c:	4303      	orrs	r3, r0
   20a6e:	0004      	movs	r4, r0
   20a70:	000d      	movs	r5, r1
   20a72:	2b00      	cmp	r3, #0
   20a74:	d0ce      	beq.n	20a14 <rint+0x7c>
   20a76:	030b      	lsls	r3, r1, #12
   20a78:	0b1b      	lsrs	r3, r3, #12
   20a7a:	4303      	orrs	r3, r0
   20a7c:	001a      	movs	r2, r3
   20a7e:	425b      	negs	r3, r3
   20a80:	4313      	orrs	r3, r2
   20a82:	2280      	movs	r2, #128	; 0x80
   20a84:	0b1b      	lsrs	r3, r3, #12
   20a86:	0312      	lsls	r2, r2, #12
   20a88:	4013      	ands	r3, r2
   20a8a:	0c4a      	lsrs	r2, r1, #17
   20a8c:	0452      	lsls	r2, r2, #17
   20a8e:	4313      	orrs	r3, r2
   20a90:	0019      	movs	r1, r3
   20a92:	4643      	mov	r3, r8
   20a94:	00da      	lsls	r2, r3, #3
   20a96:	4b0f      	ldr	r3, [pc, #60]	; (20ad4 <rint+0x13c>)
   20a98:	189b      	adds	r3, r3, r2
   20a9a:	681c      	ldr	r4, [r3, #0]
   20a9c:	685d      	ldr	r5, [r3, #4]
   20a9e:	0022      	movs	r2, r4
   20aa0:	002b      	movs	r3, r5
   20aa2:	f001 fa0b 	bl	21ebc <__aeabi_dadd>
   20aa6:	9000      	str	r0, [sp, #0]
   20aa8:	9101      	str	r1, [sp, #4]
   20aaa:	9800      	ldr	r0, [sp, #0]
   20aac:	9901      	ldr	r1, [sp, #4]
   20aae:	0022      	movs	r2, r4
   20ab0:	002b      	movs	r3, r5
   20ab2:	f002 fbc7 	bl	23244 <__aeabi_dsub>
   20ab6:	4642      	mov	r2, r8
   20ab8:	004b      	lsls	r3, r1, #1
   20aba:	085b      	lsrs	r3, r3, #1
   20abc:	07d6      	lsls	r6, r2, #31
   20abe:	4333      	orrs	r3, r6
   20ac0:	0004      	movs	r4, r0
   20ac2:	001d      	movs	r5, r3
   20ac4:	e7a6      	b.n	20a14 <rint+0x7c>
   20ac6:	2780      	movs	r7, #128	; 0x80
   20ac8:	063f      	lsls	r7, r7, #24
   20aca:	e788      	b.n	209de <rint+0x46>
   20acc:	fffffc01 	.word	0xfffffc01
   20ad0:	000fffff 	.word	0x000fffff
   20ad4:	00029b30 	.word	0x00029b30
   20ad8:	fffffbed 	.word	0xfffffbed

00020adc <scalbn>:
   20adc:	004b      	lsls	r3, r1, #1
   20ade:	b570      	push	{r4, r5, r6, lr}
   20ae0:	0d5b      	lsrs	r3, r3, #21
   20ae2:	0014      	movs	r4, r2
   20ae4:	000a      	movs	r2, r1
   20ae6:	2b00      	cmp	r3, #0
   20ae8:	d11a      	bne.n	20b20 <scalbn+0x44>
   20aea:	004b      	lsls	r3, r1, #1
   20aec:	085b      	lsrs	r3, r3, #1
   20aee:	4303      	orrs	r3, r0
   20af0:	d015      	beq.n	20b1e <scalbn+0x42>
   20af2:	2200      	movs	r2, #0
   20af4:	4b22      	ldr	r3, [pc, #136]	; (20b80 <scalbn+0xa4>)
   20af6:	f002 f925 	bl	22d44 <__aeabi_dmul>
   20afa:	4b22      	ldr	r3, [pc, #136]	; (20b84 <scalbn+0xa8>)
   20afc:	000a      	movs	r2, r1
   20afe:	429c      	cmp	r4, r3
   20b00:	db22      	blt.n	20b48 <scalbn+0x6c>
   20b02:	004b      	lsls	r3, r1, #1
   20b04:	0d5b      	lsrs	r3, r3, #21
   20b06:	3b36      	subs	r3, #54	; 0x36
   20b08:	4d1f      	ldr	r5, [pc, #124]	; (20b88 <scalbn+0xac>)
   20b0a:	18e3      	adds	r3, r4, r3
   20b0c:	42ab      	cmp	r3, r5
   20b0e:	dc20      	bgt.n	20b52 <scalbn+0x76>
   20b10:	2b00      	cmp	r3, #0
   20b12:	dd0d      	ble.n	20b30 <scalbn+0x54>
   20b14:	4c1d      	ldr	r4, [pc, #116]	; (20b8c <scalbn+0xb0>)
   20b16:	051b      	lsls	r3, r3, #20
   20b18:	4022      	ands	r2, r4
   20b1a:	431a      	orrs	r2, r3
   20b1c:	0011      	movs	r1, r2
   20b1e:	bd70      	pop	{r4, r5, r6, pc}
   20b20:	4d1b      	ldr	r5, [pc, #108]	; (20b90 <scalbn+0xb4>)
   20b22:	42ab      	cmp	r3, r5
   20b24:	d1f0      	bne.n	20b08 <scalbn+0x2c>
   20b26:	0002      	movs	r2, r0
   20b28:	000b      	movs	r3, r1
   20b2a:	f001 f9c7 	bl	21ebc <__aeabi_dadd>
   20b2e:	e7f6      	b.n	20b1e <scalbn+0x42>
   20b30:	001d      	movs	r5, r3
   20b32:	3535      	adds	r5, #53	; 0x35
   20b34:	da18      	bge.n	20b68 <scalbn+0x8c>
   20b36:	4b17      	ldr	r3, [pc, #92]	; (20b94 <scalbn+0xb8>)
   20b38:	0002      	movs	r2, r0
   20b3a:	429c      	cmp	r4, r3
   20b3c:	dc0a      	bgt.n	20b54 <scalbn+0x78>
   20b3e:	000b      	movs	r3, r1
   20b40:	4815      	ldr	r0, [pc, #84]	; (20b98 <scalbn+0xbc>)
   20b42:	4916      	ldr	r1, [pc, #88]	; (20b9c <scalbn+0xc0>)
   20b44:	f000 f832 	bl	20bac <copysign>
   20b48:	4a13      	ldr	r2, [pc, #76]	; (20b98 <scalbn+0xbc>)
   20b4a:	4b14      	ldr	r3, [pc, #80]	; (20b9c <scalbn+0xc0>)
   20b4c:	f002 f8fa 	bl	22d44 <__aeabi_dmul>
   20b50:	e7e5      	b.n	20b1e <scalbn+0x42>
   20b52:	0002      	movs	r2, r0
   20b54:	000b      	movs	r3, r1
   20b56:	4812      	ldr	r0, [pc, #72]	; (20ba0 <scalbn+0xc4>)
   20b58:	4912      	ldr	r1, [pc, #72]	; (20ba4 <scalbn+0xc8>)
   20b5a:	f000 f827 	bl	20bac <copysign>
   20b5e:	4a10      	ldr	r2, [pc, #64]	; (20ba0 <scalbn+0xc4>)
   20b60:	4b10      	ldr	r3, [pc, #64]	; (20ba4 <scalbn+0xc8>)
   20b62:	f002 f8ef 	bl	22d44 <__aeabi_dmul>
   20b66:	e7da      	b.n	20b1e <scalbn+0x42>
   20b68:	4c08      	ldr	r4, [pc, #32]	; (20b8c <scalbn+0xb0>)
   20b6a:	3336      	adds	r3, #54	; 0x36
   20b6c:	4022      	ands	r2, r4
   20b6e:	051b      	lsls	r3, r3, #20
   20b70:	4313      	orrs	r3, r2
   20b72:	0019      	movs	r1, r3
   20b74:	2200      	movs	r2, #0
   20b76:	4b0c      	ldr	r3, [pc, #48]	; (20ba8 <scalbn+0xcc>)
   20b78:	f002 f8e4 	bl	22d44 <__aeabi_dmul>
   20b7c:	e7cf      	b.n	20b1e <scalbn+0x42>
   20b7e:	46c0      	nop			; (mov r8, r8)
   20b80:	43500000 	.word	0x43500000
   20b84:	ffff3cb0 	.word	0xffff3cb0
   20b88:	000007fe 	.word	0x000007fe
   20b8c:	800fffff 	.word	0x800fffff
   20b90:	000007ff 	.word	0x000007ff
   20b94:	0000c350 	.word	0x0000c350
   20b98:	c2f8f359 	.word	0xc2f8f359
   20b9c:	01a56e1f 	.word	0x01a56e1f
   20ba0:	8800759c 	.word	0x8800759c
   20ba4:	7e37e43c 	.word	0x7e37e43c
   20ba8:	3c900000 	.word	0x3c900000

00020bac <copysign>:
   20bac:	b530      	push	{r4, r5, lr}
   20bae:	004a      	lsls	r2, r1, #1
   20bb0:	0fdb      	lsrs	r3, r3, #31
   20bb2:	07db      	lsls	r3, r3, #31
   20bb4:	0852      	lsrs	r2, r2, #1
   20bb6:	431a      	orrs	r2, r3
   20bb8:	0011      	movs	r1, r2
   20bba:	bd30      	pop	{r4, r5, pc}

00020bbc <__udivsi3>:
   20bbc:	2200      	movs	r2, #0
   20bbe:	0843      	lsrs	r3, r0, #1
   20bc0:	428b      	cmp	r3, r1
   20bc2:	d374      	bcc.n	20cae <__udivsi3+0xf2>
   20bc4:	0903      	lsrs	r3, r0, #4
   20bc6:	428b      	cmp	r3, r1
   20bc8:	d35f      	bcc.n	20c8a <__udivsi3+0xce>
   20bca:	0a03      	lsrs	r3, r0, #8
   20bcc:	428b      	cmp	r3, r1
   20bce:	d344      	bcc.n	20c5a <__udivsi3+0x9e>
   20bd0:	0b03      	lsrs	r3, r0, #12
   20bd2:	428b      	cmp	r3, r1
   20bd4:	d328      	bcc.n	20c28 <__udivsi3+0x6c>
   20bd6:	0c03      	lsrs	r3, r0, #16
   20bd8:	428b      	cmp	r3, r1
   20bda:	d30d      	bcc.n	20bf8 <__udivsi3+0x3c>
   20bdc:	22ff      	movs	r2, #255	; 0xff
   20bde:	0209      	lsls	r1, r1, #8
   20be0:	ba12      	rev	r2, r2
   20be2:	0c03      	lsrs	r3, r0, #16
   20be4:	428b      	cmp	r3, r1
   20be6:	d302      	bcc.n	20bee <__udivsi3+0x32>
   20be8:	1212      	asrs	r2, r2, #8
   20bea:	0209      	lsls	r1, r1, #8
   20bec:	d065      	beq.n	20cba <__udivsi3+0xfe>
   20bee:	0b03      	lsrs	r3, r0, #12
   20bf0:	428b      	cmp	r3, r1
   20bf2:	d319      	bcc.n	20c28 <__udivsi3+0x6c>
   20bf4:	e000      	b.n	20bf8 <__udivsi3+0x3c>
   20bf6:	0a09      	lsrs	r1, r1, #8
   20bf8:	0bc3      	lsrs	r3, r0, #15
   20bfa:	428b      	cmp	r3, r1
   20bfc:	d301      	bcc.n	20c02 <__udivsi3+0x46>
   20bfe:	03cb      	lsls	r3, r1, #15
   20c00:	1ac0      	subs	r0, r0, r3
   20c02:	4152      	adcs	r2, r2
   20c04:	0b83      	lsrs	r3, r0, #14
   20c06:	428b      	cmp	r3, r1
   20c08:	d301      	bcc.n	20c0e <__udivsi3+0x52>
   20c0a:	038b      	lsls	r3, r1, #14
   20c0c:	1ac0      	subs	r0, r0, r3
   20c0e:	4152      	adcs	r2, r2
   20c10:	0b43      	lsrs	r3, r0, #13
   20c12:	428b      	cmp	r3, r1
   20c14:	d301      	bcc.n	20c1a <__udivsi3+0x5e>
   20c16:	034b      	lsls	r3, r1, #13
   20c18:	1ac0      	subs	r0, r0, r3
   20c1a:	4152      	adcs	r2, r2
   20c1c:	0b03      	lsrs	r3, r0, #12
   20c1e:	428b      	cmp	r3, r1
   20c20:	d301      	bcc.n	20c26 <__udivsi3+0x6a>
   20c22:	030b      	lsls	r3, r1, #12
   20c24:	1ac0      	subs	r0, r0, r3
   20c26:	4152      	adcs	r2, r2
   20c28:	0ac3      	lsrs	r3, r0, #11
   20c2a:	428b      	cmp	r3, r1
   20c2c:	d301      	bcc.n	20c32 <__udivsi3+0x76>
   20c2e:	02cb      	lsls	r3, r1, #11
   20c30:	1ac0      	subs	r0, r0, r3
   20c32:	4152      	adcs	r2, r2
   20c34:	0a83      	lsrs	r3, r0, #10
   20c36:	428b      	cmp	r3, r1
   20c38:	d301      	bcc.n	20c3e <__udivsi3+0x82>
   20c3a:	028b      	lsls	r3, r1, #10
   20c3c:	1ac0      	subs	r0, r0, r3
   20c3e:	4152      	adcs	r2, r2
   20c40:	0a43      	lsrs	r3, r0, #9
   20c42:	428b      	cmp	r3, r1
   20c44:	d301      	bcc.n	20c4a <__udivsi3+0x8e>
   20c46:	024b      	lsls	r3, r1, #9
   20c48:	1ac0      	subs	r0, r0, r3
   20c4a:	4152      	adcs	r2, r2
   20c4c:	0a03      	lsrs	r3, r0, #8
   20c4e:	428b      	cmp	r3, r1
   20c50:	d301      	bcc.n	20c56 <__udivsi3+0x9a>
   20c52:	020b      	lsls	r3, r1, #8
   20c54:	1ac0      	subs	r0, r0, r3
   20c56:	4152      	adcs	r2, r2
   20c58:	d2cd      	bcs.n	20bf6 <__udivsi3+0x3a>
   20c5a:	09c3      	lsrs	r3, r0, #7
   20c5c:	428b      	cmp	r3, r1
   20c5e:	d301      	bcc.n	20c64 <__udivsi3+0xa8>
   20c60:	01cb      	lsls	r3, r1, #7
   20c62:	1ac0      	subs	r0, r0, r3
   20c64:	4152      	adcs	r2, r2
   20c66:	0983      	lsrs	r3, r0, #6
   20c68:	428b      	cmp	r3, r1
   20c6a:	d301      	bcc.n	20c70 <__udivsi3+0xb4>
   20c6c:	018b      	lsls	r3, r1, #6
   20c6e:	1ac0      	subs	r0, r0, r3
   20c70:	4152      	adcs	r2, r2
   20c72:	0943      	lsrs	r3, r0, #5
   20c74:	428b      	cmp	r3, r1
   20c76:	d301      	bcc.n	20c7c <__udivsi3+0xc0>
   20c78:	014b      	lsls	r3, r1, #5
   20c7a:	1ac0      	subs	r0, r0, r3
   20c7c:	4152      	adcs	r2, r2
   20c7e:	0903      	lsrs	r3, r0, #4
   20c80:	428b      	cmp	r3, r1
   20c82:	d301      	bcc.n	20c88 <__udivsi3+0xcc>
   20c84:	010b      	lsls	r3, r1, #4
   20c86:	1ac0      	subs	r0, r0, r3
   20c88:	4152      	adcs	r2, r2
   20c8a:	08c3      	lsrs	r3, r0, #3
   20c8c:	428b      	cmp	r3, r1
   20c8e:	d301      	bcc.n	20c94 <__udivsi3+0xd8>
   20c90:	00cb      	lsls	r3, r1, #3
   20c92:	1ac0      	subs	r0, r0, r3
   20c94:	4152      	adcs	r2, r2
   20c96:	0883      	lsrs	r3, r0, #2
   20c98:	428b      	cmp	r3, r1
   20c9a:	d301      	bcc.n	20ca0 <__udivsi3+0xe4>
   20c9c:	008b      	lsls	r3, r1, #2
   20c9e:	1ac0      	subs	r0, r0, r3
   20ca0:	4152      	adcs	r2, r2
   20ca2:	0843      	lsrs	r3, r0, #1
   20ca4:	428b      	cmp	r3, r1
   20ca6:	d301      	bcc.n	20cac <__udivsi3+0xf0>
   20ca8:	004b      	lsls	r3, r1, #1
   20caa:	1ac0      	subs	r0, r0, r3
   20cac:	4152      	adcs	r2, r2
   20cae:	1a41      	subs	r1, r0, r1
   20cb0:	d200      	bcs.n	20cb4 <__udivsi3+0xf8>
   20cb2:	4601      	mov	r1, r0
   20cb4:	4152      	adcs	r2, r2
   20cb6:	4610      	mov	r0, r2
   20cb8:	4770      	bx	lr
   20cba:	e7ff      	b.n	20cbc <__udivsi3+0x100>
   20cbc:	b501      	push	{r0, lr}
   20cbe:	2000      	movs	r0, #0
   20cc0:	f000 f8f0 	bl	20ea4 <__aeabi_idiv0>
   20cc4:	bd02      	pop	{r1, pc}
   20cc6:	46c0      	nop			; (mov r8, r8)

00020cc8 <__aeabi_uidivmod>:
   20cc8:	2900      	cmp	r1, #0
   20cca:	d0f7      	beq.n	20cbc <__udivsi3+0x100>
   20ccc:	e776      	b.n	20bbc <__udivsi3>
   20cce:	4770      	bx	lr

00020cd0 <__divsi3>:
   20cd0:	4603      	mov	r3, r0
   20cd2:	430b      	orrs	r3, r1
   20cd4:	d47f      	bmi.n	20dd6 <__divsi3+0x106>
   20cd6:	2200      	movs	r2, #0
   20cd8:	0843      	lsrs	r3, r0, #1
   20cda:	428b      	cmp	r3, r1
   20cdc:	d374      	bcc.n	20dc8 <__divsi3+0xf8>
   20cde:	0903      	lsrs	r3, r0, #4
   20ce0:	428b      	cmp	r3, r1
   20ce2:	d35f      	bcc.n	20da4 <__divsi3+0xd4>
   20ce4:	0a03      	lsrs	r3, r0, #8
   20ce6:	428b      	cmp	r3, r1
   20ce8:	d344      	bcc.n	20d74 <__divsi3+0xa4>
   20cea:	0b03      	lsrs	r3, r0, #12
   20cec:	428b      	cmp	r3, r1
   20cee:	d328      	bcc.n	20d42 <__divsi3+0x72>
   20cf0:	0c03      	lsrs	r3, r0, #16
   20cf2:	428b      	cmp	r3, r1
   20cf4:	d30d      	bcc.n	20d12 <__divsi3+0x42>
   20cf6:	22ff      	movs	r2, #255	; 0xff
   20cf8:	0209      	lsls	r1, r1, #8
   20cfa:	ba12      	rev	r2, r2
   20cfc:	0c03      	lsrs	r3, r0, #16
   20cfe:	428b      	cmp	r3, r1
   20d00:	d302      	bcc.n	20d08 <__divsi3+0x38>
   20d02:	1212      	asrs	r2, r2, #8
   20d04:	0209      	lsls	r1, r1, #8
   20d06:	d065      	beq.n	20dd4 <__divsi3+0x104>
   20d08:	0b03      	lsrs	r3, r0, #12
   20d0a:	428b      	cmp	r3, r1
   20d0c:	d319      	bcc.n	20d42 <__divsi3+0x72>
   20d0e:	e000      	b.n	20d12 <__divsi3+0x42>
   20d10:	0a09      	lsrs	r1, r1, #8
   20d12:	0bc3      	lsrs	r3, r0, #15
   20d14:	428b      	cmp	r3, r1
   20d16:	d301      	bcc.n	20d1c <__divsi3+0x4c>
   20d18:	03cb      	lsls	r3, r1, #15
   20d1a:	1ac0      	subs	r0, r0, r3
   20d1c:	4152      	adcs	r2, r2
   20d1e:	0b83      	lsrs	r3, r0, #14
   20d20:	428b      	cmp	r3, r1
   20d22:	d301      	bcc.n	20d28 <__divsi3+0x58>
   20d24:	038b      	lsls	r3, r1, #14
   20d26:	1ac0      	subs	r0, r0, r3
   20d28:	4152      	adcs	r2, r2
   20d2a:	0b43      	lsrs	r3, r0, #13
   20d2c:	428b      	cmp	r3, r1
   20d2e:	d301      	bcc.n	20d34 <__divsi3+0x64>
   20d30:	034b      	lsls	r3, r1, #13
   20d32:	1ac0      	subs	r0, r0, r3
   20d34:	4152      	adcs	r2, r2
   20d36:	0b03      	lsrs	r3, r0, #12
   20d38:	428b      	cmp	r3, r1
   20d3a:	d301      	bcc.n	20d40 <__divsi3+0x70>
   20d3c:	030b      	lsls	r3, r1, #12
   20d3e:	1ac0      	subs	r0, r0, r3
   20d40:	4152      	adcs	r2, r2
   20d42:	0ac3      	lsrs	r3, r0, #11
   20d44:	428b      	cmp	r3, r1
   20d46:	d301      	bcc.n	20d4c <__divsi3+0x7c>
   20d48:	02cb      	lsls	r3, r1, #11
   20d4a:	1ac0      	subs	r0, r0, r3
   20d4c:	4152      	adcs	r2, r2
   20d4e:	0a83      	lsrs	r3, r0, #10
   20d50:	428b      	cmp	r3, r1
   20d52:	d301      	bcc.n	20d58 <__divsi3+0x88>
   20d54:	028b      	lsls	r3, r1, #10
   20d56:	1ac0      	subs	r0, r0, r3
   20d58:	4152      	adcs	r2, r2
   20d5a:	0a43      	lsrs	r3, r0, #9
   20d5c:	428b      	cmp	r3, r1
   20d5e:	d301      	bcc.n	20d64 <__divsi3+0x94>
   20d60:	024b      	lsls	r3, r1, #9
   20d62:	1ac0      	subs	r0, r0, r3
   20d64:	4152      	adcs	r2, r2
   20d66:	0a03      	lsrs	r3, r0, #8
   20d68:	428b      	cmp	r3, r1
   20d6a:	d301      	bcc.n	20d70 <__divsi3+0xa0>
   20d6c:	020b      	lsls	r3, r1, #8
   20d6e:	1ac0      	subs	r0, r0, r3
   20d70:	4152      	adcs	r2, r2
   20d72:	d2cd      	bcs.n	20d10 <__divsi3+0x40>
   20d74:	09c3      	lsrs	r3, r0, #7
   20d76:	428b      	cmp	r3, r1
   20d78:	d301      	bcc.n	20d7e <__divsi3+0xae>
   20d7a:	01cb      	lsls	r3, r1, #7
   20d7c:	1ac0      	subs	r0, r0, r3
   20d7e:	4152      	adcs	r2, r2
   20d80:	0983      	lsrs	r3, r0, #6
   20d82:	428b      	cmp	r3, r1
   20d84:	d301      	bcc.n	20d8a <__divsi3+0xba>
   20d86:	018b      	lsls	r3, r1, #6
   20d88:	1ac0      	subs	r0, r0, r3
   20d8a:	4152      	adcs	r2, r2
   20d8c:	0943      	lsrs	r3, r0, #5
   20d8e:	428b      	cmp	r3, r1
   20d90:	d301      	bcc.n	20d96 <__divsi3+0xc6>
   20d92:	014b      	lsls	r3, r1, #5
   20d94:	1ac0      	subs	r0, r0, r3
   20d96:	4152      	adcs	r2, r2
   20d98:	0903      	lsrs	r3, r0, #4
   20d9a:	428b      	cmp	r3, r1
   20d9c:	d301      	bcc.n	20da2 <__divsi3+0xd2>
   20d9e:	010b      	lsls	r3, r1, #4
   20da0:	1ac0      	subs	r0, r0, r3
   20da2:	4152      	adcs	r2, r2
   20da4:	08c3      	lsrs	r3, r0, #3
   20da6:	428b      	cmp	r3, r1
   20da8:	d301      	bcc.n	20dae <__divsi3+0xde>
   20daa:	00cb      	lsls	r3, r1, #3
   20dac:	1ac0      	subs	r0, r0, r3
   20dae:	4152      	adcs	r2, r2
   20db0:	0883      	lsrs	r3, r0, #2
   20db2:	428b      	cmp	r3, r1
   20db4:	d301      	bcc.n	20dba <__divsi3+0xea>
   20db6:	008b      	lsls	r3, r1, #2
   20db8:	1ac0      	subs	r0, r0, r3
   20dba:	4152      	adcs	r2, r2
   20dbc:	0843      	lsrs	r3, r0, #1
   20dbe:	428b      	cmp	r3, r1
   20dc0:	d301      	bcc.n	20dc6 <__divsi3+0xf6>
   20dc2:	004b      	lsls	r3, r1, #1
   20dc4:	1ac0      	subs	r0, r0, r3
   20dc6:	4152      	adcs	r2, r2
   20dc8:	1a41      	subs	r1, r0, r1
   20dca:	d200      	bcs.n	20dce <__divsi3+0xfe>
   20dcc:	4601      	mov	r1, r0
   20dce:	4152      	adcs	r2, r2
   20dd0:	4610      	mov	r0, r2
   20dd2:	4770      	bx	lr
   20dd4:	e05d      	b.n	20e92 <__divsi3+0x1c2>
   20dd6:	0fca      	lsrs	r2, r1, #31
   20dd8:	d000      	beq.n	20ddc <__divsi3+0x10c>
   20dda:	4249      	negs	r1, r1
   20ddc:	1003      	asrs	r3, r0, #32
   20dde:	d300      	bcc.n	20de2 <__divsi3+0x112>
   20de0:	4240      	negs	r0, r0
   20de2:	4053      	eors	r3, r2
   20de4:	2200      	movs	r2, #0
   20de6:	469c      	mov	ip, r3
   20de8:	0903      	lsrs	r3, r0, #4
   20dea:	428b      	cmp	r3, r1
   20dec:	d32d      	bcc.n	20e4a <__divsi3+0x17a>
   20dee:	0a03      	lsrs	r3, r0, #8
   20df0:	428b      	cmp	r3, r1
   20df2:	d312      	bcc.n	20e1a <__divsi3+0x14a>
   20df4:	22fc      	movs	r2, #252	; 0xfc
   20df6:	0189      	lsls	r1, r1, #6
   20df8:	ba12      	rev	r2, r2
   20dfa:	0a03      	lsrs	r3, r0, #8
   20dfc:	428b      	cmp	r3, r1
   20dfe:	d30c      	bcc.n	20e1a <__divsi3+0x14a>
   20e00:	0189      	lsls	r1, r1, #6
   20e02:	1192      	asrs	r2, r2, #6
   20e04:	428b      	cmp	r3, r1
   20e06:	d308      	bcc.n	20e1a <__divsi3+0x14a>
   20e08:	0189      	lsls	r1, r1, #6
   20e0a:	1192      	asrs	r2, r2, #6
   20e0c:	428b      	cmp	r3, r1
   20e0e:	d304      	bcc.n	20e1a <__divsi3+0x14a>
   20e10:	0189      	lsls	r1, r1, #6
   20e12:	d03a      	beq.n	20e8a <__divsi3+0x1ba>
   20e14:	1192      	asrs	r2, r2, #6
   20e16:	e000      	b.n	20e1a <__divsi3+0x14a>
   20e18:	0989      	lsrs	r1, r1, #6
   20e1a:	09c3      	lsrs	r3, r0, #7
   20e1c:	428b      	cmp	r3, r1
   20e1e:	d301      	bcc.n	20e24 <__divsi3+0x154>
   20e20:	01cb      	lsls	r3, r1, #7
   20e22:	1ac0      	subs	r0, r0, r3
   20e24:	4152      	adcs	r2, r2
   20e26:	0983      	lsrs	r3, r0, #6
   20e28:	428b      	cmp	r3, r1
   20e2a:	d301      	bcc.n	20e30 <__divsi3+0x160>
   20e2c:	018b      	lsls	r3, r1, #6
   20e2e:	1ac0      	subs	r0, r0, r3
   20e30:	4152      	adcs	r2, r2
   20e32:	0943      	lsrs	r3, r0, #5
   20e34:	428b      	cmp	r3, r1
   20e36:	d301      	bcc.n	20e3c <__divsi3+0x16c>
   20e38:	014b      	lsls	r3, r1, #5
   20e3a:	1ac0      	subs	r0, r0, r3
   20e3c:	4152      	adcs	r2, r2
   20e3e:	0903      	lsrs	r3, r0, #4
   20e40:	428b      	cmp	r3, r1
   20e42:	d301      	bcc.n	20e48 <__divsi3+0x178>
   20e44:	010b      	lsls	r3, r1, #4
   20e46:	1ac0      	subs	r0, r0, r3
   20e48:	4152      	adcs	r2, r2
   20e4a:	08c3      	lsrs	r3, r0, #3
   20e4c:	428b      	cmp	r3, r1
   20e4e:	d301      	bcc.n	20e54 <__divsi3+0x184>
   20e50:	00cb      	lsls	r3, r1, #3
   20e52:	1ac0      	subs	r0, r0, r3
   20e54:	4152      	adcs	r2, r2
   20e56:	0883      	lsrs	r3, r0, #2
   20e58:	428b      	cmp	r3, r1
   20e5a:	d301      	bcc.n	20e60 <__divsi3+0x190>
   20e5c:	008b      	lsls	r3, r1, #2
   20e5e:	1ac0      	subs	r0, r0, r3
   20e60:	4152      	adcs	r2, r2
   20e62:	d2d9      	bcs.n	20e18 <__divsi3+0x148>
   20e64:	0843      	lsrs	r3, r0, #1
   20e66:	428b      	cmp	r3, r1
   20e68:	d301      	bcc.n	20e6e <__divsi3+0x19e>
   20e6a:	004b      	lsls	r3, r1, #1
   20e6c:	1ac0      	subs	r0, r0, r3
   20e6e:	4152      	adcs	r2, r2
   20e70:	1a41      	subs	r1, r0, r1
   20e72:	d200      	bcs.n	20e76 <__divsi3+0x1a6>
   20e74:	4601      	mov	r1, r0
   20e76:	4663      	mov	r3, ip
   20e78:	4152      	adcs	r2, r2
   20e7a:	105b      	asrs	r3, r3, #1
   20e7c:	4610      	mov	r0, r2
   20e7e:	d301      	bcc.n	20e84 <__divsi3+0x1b4>
   20e80:	4240      	negs	r0, r0
   20e82:	2b00      	cmp	r3, #0
   20e84:	d500      	bpl.n	20e88 <__divsi3+0x1b8>
   20e86:	4249      	negs	r1, r1
   20e88:	4770      	bx	lr
   20e8a:	4663      	mov	r3, ip
   20e8c:	105b      	asrs	r3, r3, #1
   20e8e:	d300      	bcc.n	20e92 <__divsi3+0x1c2>
   20e90:	4240      	negs	r0, r0
   20e92:	b501      	push	{r0, lr}
   20e94:	2000      	movs	r0, #0
   20e96:	f000 f805 	bl	20ea4 <__aeabi_idiv0>
   20e9a:	bd02      	pop	{r1, pc}

00020e9c <__aeabi_idivmod>:
   20e9c:	2900      	cmp	r1, #0
   20e9e:	d0f8      	beq.n	20e92 <__divsi3+0x1c2>
   20ea0:	e716      	b.n	20cd0 <__divsi3>
   20ea2:	4770      	bx	lr

00020ea4 <__aeabi_idiv0>:
   20ea4:	4770      	bx	lr
   20ea6:	46c0      	nop			; (mov r8, r8)

00020ea8 <__aeabi_cdrcmple>:
   20ea8:	4684      	mov	ip, r0
   20eaa:	1c10      	adds	r0, r2, #0
   20eac:	4662      	mov	r2, ip
   20eae:	468c      	mov	ip, r1
   20eb0:	1c19      	adds	r1, r3, #0
   20eb2:	4663      	mov	r3, ip
   20eb4:	e000      	b.n	20eb8 <__aeabi_cdcmpeq>
   20eb6:	46c0      	nop			; (mov r8, r8)

00020eb8 <__aeabi_cdcmpeq>:
   20eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   20eba:	f001 fee1 	bl	22c80 <__ledf2>
   20ebe:	2800      	cmp	r0, #0
   20ec0:	d401      	bmi.n	20ec6 <__aeabi_cdcmpeq+0xe>
   20ec2:	2100      	movs	r1, #0
   20ec4:	42c8      	cmn	r0, r1
   20ec6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00020ec8 <__aeabi_dcmpeq>:
   20ec8:	b510      	push	{r4, lr}
   20eca:	f001 fe3b 	bl	22b44 <__eqdf2>
   20ece:	4240      	negs	r0, r0
   20ed0:	3001      	adds	r0, #1
   20ed2:	bd10      	pop	{r4, pc}

00020ed4 <__aeabi_dcmplt>:
   20ed4:	b510      	push	{r4, lr}
   20ed6:	f001 fed3 	bl	22c80 <__ledf2>
   20eda:	2800      	cmp	r0, #0
   20edc:	db01      	blt.n	20ee2 <__aeabi_dcmplt+0xe>
   20ede:	2000      	movs	r0, #0
   20ee0:	bd10      	pop	{r4, pc}
   20ee2:	2001      	movs	r0, #1
   20ee4:	bd10      	pop	{r4, pc}
   20ee6:	46c0      	nop			; (mov r8, r8)

00020ee8 <__aeabi_dcmple>:
   20ee8:	b510      	push	{r4, lr}
   20eea:	f001 fec9 	bl	22c80 <__ledf2>
   20eee:	2800      	cmp	r0, #0
   20ef0:	dd01      	ble.n	20ef6 <__aeabi_dcmple+0xe>
   20ef2:	2000      	movs	r0, #0
   20ef4:	bd10      	pop	{r4, pc}
   20ef6:	2001      	movs	r0, #1
   20ef8:	bd10      	pop	{r4, pc}
   20efa:	46c0      	nop			; (mov r8, r8)

00020efc <__aeabi_dcmpgt>:
   20efc:	b510      	push	{r4, lr}
   20efe:	f001 fe5b 	bl	22bb8 <__gedf2>
   20f02:	2800      	cmp	r0, #0
   20f04:	dc01      	bgt.n	20f0a <__aeabi_dcmpgt+0xe>
   20f06:	2000      	movs	r0, #0
   20f08:	bd10      	pop	{r4, pc}
   20f0a:	2001      	movs	r0, #1
   20f0c:	bd10      	pop	{r4, pc}
   20f0e:	46c0      	nop			; (mov r8, r8)

00020f10 <__aeabi_dcmpge>:
   20f10:	b510      	push	{r4, lr}
   20f12:	f001 fe51 	bl	22bb8 <__gedf2>
   20f16:	2800      	cmp	r0, #0
   20f18:	da01      	bge.n	20f1e <__aeabi_dcmpge+0xe>
   20f1a:	2000      	movs	r0, #0
   20f1c:	bd10      	pop	{r4, pc}
   20f1e:	2001      	movs	r0, #1
   20f20:	bd10      	pop	{r4, pc}
   20f22:	46c0      	nop			; (mov r8, r8)

00020f24 <__aeabi_cfrcmple>:
   20f24:	4684      	mov	ip, r0
   20f26:	1c08      	adds	r0, r1, #0
   20f28:	4661      	mov	r1, ip
   20f2a:	e7ff      	b.n	20f2c <__aeabi_cfcmpeq>

00020f2c <__aeabi_cfcmpeq>:
   20f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   20f2e:	f000 fc11 	bl	21754 <__lesf2>
   20f32:	2800      	cmp	r0, #0
   20f34:	d401      	bmi.n	20f3a <__aeabi_cfcmpeq+0xe>
   20f36:	2100      	movs	r1, #0
   20f38:	42c8      	cmn	r0, r1
   20f3a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00020f3c <__aeabi_fcmpeq>:
   20f3c:	b510      	push	{r4, lr}
   20f3e:	f000 fba3 	bl	21688 <__eqsf2>
   20f42:	4240      	negs	r0, r0
   20f44:	3001      	adds	r0, #1
   20f46:	bd10      	pop	{r4, pc}

00020f48 <__aeabi_fcmplt>:
   20f48:	b510      	push	{r4, lr}
   20f4a:	f000 fc03 	bl	21754 <__lesf2>
   20f4e:	2800      	cmp	r0, #0
   20f50:	db01      	blt.n	20f56 <__aeabi_fcmplt+0xe>
   20f52:	2000      	movs	r0, #0
   20f54:	bd10      	pop	{r4, pc}
   20f56:	2001      	movs	r0, #1
   20f58:	bd10      	pop	{r4, pc}
   20f5a:	46c0      	nop			; (mov r8, r8)

00020f5c <__aeabi_fcmple>:
   20f5c:	b510      	push	{r4, lr}
   20f5e:	f000 fbf9 	bl	21754 <__lesf2>
   20f62:	2800      	cmp	r0, #0
   20f64:	dd01      	ble.n	20f6a <__aeabi_fcmple+0xe>
   20f66:	2000      	movs	r0, #0
   20f68:	bd10      	pop	{r4, pc}
   20f6a:	2001      	movs	r0, #1
   20f6c:	bd10      	pop	{r4, pc}
   20f6e:	46c0      	nop			; (mov r8, r8)

00020f70 <__aeabi_fcmpgt>:
   20f70:	b510      	push	{r4, lr}
   20f72:	f000 fbaf 	bl	216d4 <__gesf2>
   20f76:	2800      	cmp	r0, #0
   20f78:	dc01      	bgt.n	20f7e <__aeabi_fcmpgt+0xe>
   20f7a:	2000      	movs	r0, #0
   20f7c:	bd10      	pop	{r4, pc}
   20f7e:	2001      	movs	r0, #1
   20f80:	bd10      	pop	{r4, pc}
   20f82:	46c0      	nop			; (mov r8, r8)

00020f84 <__aeabi_fcmpge>:
   20f84:	b510      	push	{r4, lr}
   20f86:	f000 fba5 	bl	216d4 <__gesf2>
   20f8a:	2800      	cmp	r0, #0
   20f8c:	da01      	bge.n	20f92 <__aeabi_fcmpge+0xe>
   20f8e:	2000      	movs	r0, #0
   20f90:	bd10      	pop	{r4, pc}
   20f92:	2001      	movs	r0, #1
   20f94:	bd10      	pop	{r4, pc}
   20f96:	46c0      	nop			; (mov r8, r8)

00020f98 <__clzsi2>:
   20f98:	211c      	movs	r1, #28
   20f9a:	2301      	movs	r3, #1
   20f9c:	041b      	lsls	r3, r3, #16
   20f9e:	4298      	cmp	r0, r3
   20fa0:	d301      	bcc.n	20fa6 <__clzsi2+0xe>
   20fa2:	0c00      	lsrs	r0, r0, #16
   20fa4:	3910      	subs	r1, #16
   20fa6:	0a1b      	lsrs	r3, r3, #8
   20fa8:	4298      	cmp	r0, r3
   20faa:	d301      	bcc.n	20fb0 <__clzsi2+0x18>
   20fac:	0a00      	lsrs	r0, r0, #8
   20fae:	3908      	subs	r1, #8
   20fb0:	091b      	lsrs	r3, r3, #4
   20fb2:	4298      	cmp	r0, r3
   20fb4:	d301      	bcc.n	20fba <__clzsi2+0x22>
   20fb6:	0900      	lsrs	r0, r0, #4
   20fb8:	3904      	subs	r1, #4
   20fba:	a202      	add	r2, pc, #8	; (adr r2, 20fc4 <__clzsi2+0x2c>)
   20fbc:	5c10      	ldrb	r0, [r2, r0]
   20fbe:	1840      	adds	r0, r0, r1
   20fc0:	4770      	bx	lr
   20fc2:	46c0      	nop			; (mov r8, r8)
   20fc4:	02020304 	.word	0x02020304
   20fc8:	01010101 	.word	0x01010101
	...

00020fd4 <__ctzsi2>:
   20fd4:	4241      	negs	r1, r0
   20fd6:	4008      	ands	r0, r1
   20fd8:	211c      	movs	r1, #28
   20fda:	2301      	movs	r3, #1
   20fdc:	041b      	lsls	r3, r3, #16
   20fde:	4298      	cmp	r0, r3
   20fe0:	d301      	bcc.n	20fe6 <__ctzsi2+0x12>
   20fe2:	0c00      	lsrs	r0, r0, #16
   20fe4:	3910      	subs	r1, #16
   20fe6:	0a1b      	lsrs	r3, r3, #8
   20fe8:	4298      	cmp	r0, r3
   20fea:	d301      	bcc.n	20ff0 <__ctzsi2+0x1c>
   20fec:	0a00      	lsrs	r0, r0, #8
   20fee:	3908      	subs	r1, #8
   20ff0:	091b      	lsrs	r3, r3, #4
   20ff2:	4298      	cmp	r0, r3
   20ff4:	d301      	bcc.n	20ffa <__ctzsi2+0x26>
   20ff6:	0900      	lsrs	r0, r0, #4
   20ff8:	3904      	subs	r1, #4
   20ffa:	a202      	add	r2, pc, #8	; (adr r2, 21004 <__ctzsi2+0x30>)
   20ffc:	5c10      	ldrb	r0, [r2, r0]
   20ffe:	1a40      	subs	r0, r0, r1
   21000:	4770      	bx	lr
   21002:	46c0      	nop			; (mov r8, r8)
   21004:	1d1d1c1b 	.word	0x1d1d1c1b
   21008:	1e1e1e1e 	.word	0x1e1e1e1e
   2100c:	1f1f1f1f 	.word	0x1f1f1f1f
   21010:	1f1f1f1f 	.word	0x1f1f1f1f

00021014 <__aeabi_lmul>:
   21014:	b5f0      	push	{r4, r5, r6, r7, lr}
   21016:	46ce      	mov	lr, r9
   21018:	4647      	mov	r7, r8
   2101a:	0415      	lsls	r5, r2, #16
   2101c:	0c2d      	lsrs	r5, r5, #16
   2101e:	002e      	movs	r6, r5
   21020:	b580      	push	{r7, lr}
   21022:	0407      	lsls	r7, r0, #16
   21024:	0c14      	lsrs	r4, r2, #16
   21026:	0c3f      	lsrs	r7, r7, #16
   21028:	4699      	mov	r9, r3
   2102a:	0c03      	lsrs	r3, r0, #16
   2102c:	437e      	muls	r6, r7
   2102e:	435d      	muls	r5, r3
   21030:	4367      	muls	r7, r4
   21032:	4363      	muls	r3, r4
   21034:	197f      	adds	r7, r7, r5
   21036:	0c34      	lsrs	r4, r6, #16
   21038:	19e4      	adds	r4, r4, r7
   2103a:	469c      	mov	ip, r3
   2103c:	42a5      	cmp	r5, r4
   2103e:	d903      	bls.n	21048 <__aeabi_lmul+0x34>
   21040:	2380      	movs	r3, #128	; 0x80
   21042:	025b      	lsls	r3, r3, #9
   21044:	4698      	mov	r8, r3
   21046:	44c4      	add	ip, r8
   21048:	464b      	mov	r3, r9
   2104a:	4351      	muls	r1, r2
   2104c:	4343      	muls	r3, r0
   2104e:	0436      	lsls	r6, r6, #16
   21050:	0c36      	lsrs	r6, r6, #16
   21052:	0c25      	lsrs	r5, r4, #16
   21054:	0424      	lsls	r4, r4, #16
   21056:	4465      	add	r5, ip
   21058:	19a4      	adds	r4, r4, r6
   2105a:	1859      	adds	r1, r3, r1
   2105c:	1949      	adds	r1, r1, r5
   2105e:	0020      	movs	r0, r4
   21060:	bc0c      	pop	{r2, r3}
   21062:	4690      	mov	r8, r2
   21064:	4699      	mov	r9, r3
   21066:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021068 <__aeabi_f2uiz>:
   21068:	219e      	movs	r1, #158	; 0x9e
   2106a:	b510      	push	{r4, lr}
   2106c:	05c9      	lsls	r1, r1, #23
   2106e:	1c04      	adds	r4, r0, #0
   21070:	f7ff ff88 	bl	20f84 <__aeabi_fcmpge>
   21074:	2800      	cmp	r0, #0
   21076:	d103      	bne.n	21080 <__aeabi_f2uiz+0x18>
   21078:	1c20      	adds	r0, r4, #0
   2107a:	f000 fe69 	bl	21d50 <__aeabi_f2iz>
   2107e:	bd10      	pop	{r4, pc}
   21080:	219e      	movs	r1, #158	; 0x9e
   21082:	1c20      	adds	r0, r4, #0
   21084:	05c9      	lsls	r1, r1, #23
   21086:	f000 fcc7 	bl	21a18 <__aeabi_fsub>
   2108a:	f000 fe61 	bl	21d50 <__aeabi_f2iz>
   2108e:	2380      	movs	r3, #128	; 0x80
   21090:	061b      	lsls	r3, r3, #24
   21092:	469c      	mov	ip, r3
   21094:	4460      	add	r0, ip
   21096:	e7f2      	b.n	2107e <__aeabi_f2uiz+0x16>

00021098 <__aeabi_d2uiz>:
   21098:	b570      	push	{r4, r5, r6, lr}
   2109a:	2200      	movs	r2, #0
   2109c:	4b0c      	ldr	r3, [pc, #48]	; (210d0 <__aeabi_d2uiz+0x38>)
   2109e:	0004      	movs	r4, r0
   210a0:	000d      	movs	r5, r1
   210a2:	f7ff ff35 	bl	20f10 <__aeabi_dcmpge>
   210a6:	2800      	cmp	r0, #0
   210a8:	d104      	bne.n	210b4 <__aeabi_d2uiz+0x1c>
   210aa:	0020      	movs	r0, r4
   210ac:	0029      	movs	r1, r5
   210ae:	f002 fbff 	bl	238b0 <__aeabi_d2iz>
   210b2:	bd70      	pop	{r4, r5, r6, pc}
   210b4:	4b06      	ldr	r3, [pc, #24]	; (210d0 <__aeabi_d2uiz+0x38>)
   210b6:	2200      	movs	r2, #0
   210b8:	0020      	movs	r0, r4
   210ba:	0029      	movs	r1, r5
   210bc:	f002 f8c2 	bl	23244 <__aeabi_dsub>
   210c0:	f002 fbf6 	bl	238b0 <__aeabi_d2iz>
   210c4:	2380      	movs	r3, #128	; 0x80
   210c6:	061b      	lsls	r3, r3, #24
   210c8:	469c      	mov	ip, r3
   210ca:	4460      	add	r0, ip
   210cc:	e7f1      	b.n	210b2 <__aeabi_d2uiz+0x1a>
   210ce:	46c0      	nop			; (mov r8, r8)
   210d0:	41e00000 	.word	0x41e00000

000210d4 <__aeabi_fadd>:
   210d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   210d6:	46c6      	mov	lr, r8
   210d8:	024e      	lsls	r6, r1, #9
   210da:	0247      	lsls	r7, r0, #9
   210dc:	0a76      	lsrs	r6, r6, #9
   210de:	0a7b      	lsrs	r3, r7, #9
   210e0:	0044      	lsls	r4, r0, #1
   210e2:	0fc5      	lsrs	r5, r0, #31
   210e4:	00f7      	lsls	r7, r6, #3
   210e6:	0048      	lsls	r0, r1, #1
   210e8:	4698      	mov	r8, r3
   210ea:	b500      	push	{lr}
   210ec:	0e24      	lsrs	r4, r4, #24
   210ee:	002a      	movs	r2, r5
   210f0:	00db      	lsls	r3, r3, #3
   210f2:	0e00      	lsrs	r0, r0, #24
   210f4:	0fc9      	lsrs	r1, r1, #31
   210f6:	46bc      	mov	ip, r7
   210f8:	428d      	cmp	r5, r1
   210fa:	d067      	beq.n	211cc <__aeabi_fadd+0xf8>
   210fc:	1a22      	subs	r2, r4, r0
   210fe:	2a00      	cmp	r2, #0
   21100:	dc00      	bgt.n	21104 <__aeabi_fadd+0x30>
   21102:	e0a5      	b.n	21250 <__aeabi_fadd+0x17c>
   21104:	2800      	cmp	r0, #0
   21106:	d13a      	bne.n	2117e <__aeabi_fadd+0xaa>
   21108:	2f00      	cmp	r7, #0
   2110a:	d100      	bne.n	2110e <__aeabi_fadd+0x3a>
   2110c:	e093      	b.n	21236 <__aeabi_fadd+0x162>
   2110e:	1e51      	subs	r1, r2, #1
   21110:	2900      	cmp	r1, #0
   21112:	d000      	beq.n	21116 <__aeabi_fadd+0x42>
   21114:	e0bc      	b.n	21290 <__aeabi_fadd+0x1bc>
   21116:	2401      	movs	r4, #1
   21118:	1bdb      	subs	r3, r3, r7
   2111a:	015a      	lsls	r2, r3, #5
   2111c:	d546      	bpl.n	211ac <__aeabi_fadd+0xd8>
   2111e:	019b      	lsls	r3, r3, #6
   21120:	099e      	lsrs	r6, r3, #6
   21122:	0030      	movs	r0, r6
   21124:	f7ff ff38 	bl	20f98 <__clzsi2>
   21128:	3805      	subs	r0, #5
   2112a:	4086      	lsls	r6, r0
   2112c:	4284      	cmp	r4, r0
   2112e:	dd00      	ble.n	21132 <__aeabi_fadd+0x5e>
   21130:	e09d      	b.n	2126e <__aeabi_fadd+0x19a>
   21132:	1b04      	subs	r4, r0, r4
   21134:	0032      	movs	r2, r6
   21136:	2020      	movs	r0, #32
   21138:	3401      	adds	r4, #1
   2113a:	40e2      	lsrs	r2, r4
   2113c:	1b04      	subs	r4, r0, r4
   2113e:	40a6      	lsls	r6, r4
   21140:	0033      	movs	r3, r6
   21142:	1e5e      	subs	r6, r3, #1
   21144:	41b3      	sbcs	r3, r6
   21146:	2400      	movs	r4, #0
   21148:	4313      	orrs	r3, r2
   2114a:	075a      	lsls	r2, r3, #29
   2114c:	d004      	beq.n	21158 <__aeabi_fadd+0x84>
   2114e:	220f      	movs	r2, #15
   21150:	401a      	ands	r2, r3
   21152:	2a04      	cmp	r2, #4
   21154:	d000      	beq.n	21158 <__aeabi_fadd+0x84>
   21156:	3304      	adds	r3, #4
   21158:	015a      	lsls	r2, r3, #5
   2115a:	d529      	bpl.n	211b0 <__aeabi_fadd+0xdc>
   2115c:	3401      	adds	r4, #1
   2115e:	2cff      	cmp	r4, #255	; 0xff
   21160:	d100      	bne.n	21164 <__aeabi_fadd+0x90>
   21162:	e081      	b.n	21268 <__aeabi_fadd+0x194>
   21164:	002a      	movs	r2, r5
   21166:	019b      	lsls	r3, r3, #6
   21168:	0a5b      	lsrs	r3, r3, #9
   2116a:	b2e4      	uxtb	r4, r4
   2116c:	025b      	lsls	r3, r3, #9
   2116e:	05e4      	lsls	r4, r4, #23
   21170:	0a58      	lsrs	r0, r3, #9
   21172:	07d2      	lsls	r2, r2, #31
   21174:	4320      	orrs	r0, r4
   21176:	4310      	orrs	r0, r2
   21178:	bc04      	pop	{r2}
   2117a:	4690      	mov	r8, r2
   2117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2117e:	2cff      	cmp	r4, #255	; 0xff
   21180:	d0e3      	beq.n	2114a <__aeabi_fadd+0x76>
   21182:	2180      	movs	r1, #128	; 0x80
   21184:	0038      	movs	r0, r7
   21186:	04c9      	lsls	r1, r1, #19
   21188:	4308      	orrs	r0, r1
   2118a:	4684      	mov	ip, r0
   2118c:	2a1b      	cmp	r2, #27
   2118e:	dd00      	ble.n	21192 <__aeabi_fadd+0xbe>
   21190:	e082      	b.n	21298 <__aeabi_fadd+0x1c4>
   21192:	2020      	movs	r0, #32
   21194:	4661      	mov	r1, ip
   21196:	40d1      	lsrs	r1, r2
   21198:	1a82      	subs	r2, r0, r2
   2119a:	4660      	mov	r0, ip
   2119c:	4090      	lsls	r0, r2
   2119e:	0002      	movs	r2, r0
   211a0:	1e50      	subs	r0, r2, #1
   211a2:	4182      	sbcs	r2, r0
   211a4:	430a      	orrs	r2, r1
   211a6:	1a9b      	subs	r3, r3, r2
   211a8:	015a      	lsls	r2, r3, #5
   211aa:	d4b8      	bmi.n	2111e <__aeabi_fadd+0x4a>
   211ac:	075a      	lsls	r2, r3, #29
   211ae:	d1ce      	bne.n	2114e <__aeabi_fadd+0x7a>
   211b0:	08de      	lsrs	r6, r3, #3
   211b2:	002a      	movs	r2, r5
   211b4:	2cff      	cmp	r4, #255	; 0xff
   211b6:	d13a      	bne.n	2122e <__aeabi_fadd+0x15a>
   211b8:	2e00      	cmp	r6, #0
   211ba:	d100      	bne.n	211be <__aeabi_fadd+0xea>
   211bc:	e0ae      	b.n	2131c <__aeabi_fadd+0x248>
   211be:	2380      	movs	r3, #128	; 0x80
   211c0:	03db      	lsls	r3, r3, #15
   211c2:	4333      	orrs	r3, r6
   211c4:	025b      	lsls	r3, r3, #9
   211c6:	0a5b      	lsrs	r3, r3, #9
   211c8:	24ff      	movs	r4, #255	; 0xff
   211ca:	e7cf      	b.n	2116c <__aeabi_fadd+0x98>
   211cc:	1a21      	subs	r1, r4, r0
   211ce:	2900      	cmp	r1, #0
   211d0:	dd52      	ble.n	21278 <__aeabi_fadd+0x1a4>
   211d2:	2800      	cmp	r0, #0
   211d4:	d031      	beq.n	2123a <__aeabi_fadd+0x166>
   211d6:	2cff      	cmp	r4, #255	; 0xff
   211d8:	d0b7      	beq.n	2114a <__aeabi_fadd+0x76>
   211da:	2080      	movs	r0, #128	; 0x80
   211dc:	003e      	movs	r6, r7
   211de:	04c0      	lsls	r0, r0, #19
   211e0:	4306      	orrs	r6, r0
   211e2:	46b4      	mov	ip, r6
   211e4:	291b      	cmp	r1, #27
   211e6:	dd00      	ble.n	211ea <__aeabi_fadd+0x116>
   211e8:	e0aa      	b.n	21340 <__aeabi_fadd+0x26c>
   211ea:	2620      	movs	r6, #32
   211ec:	4660      	mov	r0, ip
   211ee:	40c8      	lsrs	r0, r1
   211f0:	1a71      	subs	r1, r6, r1
   211f2:	4666      	mov	r6, ip
   211f4:	408e      	lsls	r6, r1
   211f6:	0031      	movs	r1, r6
   211f8:	1e4e      	subs	r6, r1, #1
   211fa:	41b1      	sbcs	r1, r6
   211fc:	4301      	orrs	r1, r0
   211fe:	185b      	adds	r3, r3, r1
   21200:	0159      	lsls	r1, r3, #5
   21202:	d5d3      	bpl.n	211ac <__aeabi_fadd+0xd8>
   21204:	3401      	adds	r4, #1
   21206:	2cff      	cmp	r4, #255	; 0xff
   21208:	d100      	bne.n	2120c <__aeabi_fadd+0x138>
   2120a:	e087      	b.n	2131c <__aeabi_fadd+0x248>
   2120c:	2201      	movs	r2, #1
   2120e:	4978      	ldr	r1, [pc, #480]	; (213f0 <__aeabi_fadd+0x31c>)
   21210:	401a      	ands	r2, r3
   21212:	085b      	lsrs	r3, r3, #1
   21214:	400b      	ands	r3, r1
   21216:	4313      	orrs	r3, r2
   21218:	e797      	b.n	2114a <__aeabi_fadd+0x76>
   2121a:	2c00      	cmp	r4, #0
   2121c:	d000      	beq.n	21220 <__aeabi_fadd+0x14c>
   2121e:	e0a7      	b.n	21370 <__aeabi_fadd+0x29c>
   21220:	2b00      	cmp	r3, #0
   21222:	d000      	beq.n	21226 <__aeabi_fadd+0x152>
   21224:	e0b6      	b.n	21394 <__aeabi_fadd+0x2c0>
   21226:	1e3b      	subs	r3, r7, #0
   21228:	d162      	bne.n	212f0 <__aeabi_fadd+0x21c>
   2122a:	2600      	movs	r6, #0
   2122c:	2200      	movs	r2, #0
   2122e:	0273      	lsls	r3, r6, #9
   21230:	0a5b      	lsrs	r3, r3, #9
   21232:	b2e4      	uxtb	r4, r4
   21234:	e79a      	b.n	2116c <__aeabi_fadd+0x98>
   21236:	0014      	movs	r4, r2
   21238:	e787      	b.n	2114a <__aeabi_fadd+0x76>
   2123a:	2f00      	cmp	r7, #0
   2123c:	d04d      	beq.n	212da <__aeabi_fadd+0x206>
   2123e:	1e48      	subs	r0, r1, #1
   21240:	2800      	cmp	r0, #0
   21242:	d157      	bne.n	212f4 <__aeabi_fadd+0x220>
   21244:	4463      	add	r3, ip
   21246:	2401      	movs	r4, #1
   21248:	015a      	lsls	r2, r3, #5
   2124a:	d5af      	bpl.n	211ac <__aeabi_fadd+0xd8>
   2124c:	2402      	movs	r4, #2
   2124e:	e7dd      	b.n	2120c <__aeabi_fadd+0x138>
   21250:	2a00      	cmp	r2, #0
   21252:	d124      	bne.n	2129e <__aeabi_fadd+0x1ca>
   21254:	1c62      	adds	r2, r4, #1
   21256:	b2d2      	uxtb	r2, r2
   21258:	2a01      	cmp	r2, #1
   2125a:	ddde      	ble.n	2121a <__aeabi_fadd+0x146>
   2125c:	1bde      	subs	r6, r3, r7
   2125e:	0172      	lsls	r2, r6, #5
   21260:	d535      	bpl.n	212ce <__aeabi_fadd+0x1fa>
   21262:	1afe      	subs	r6, r7, r3
   21264:	000d      	movs	r5, r1
   21266:	e75c      	b.n	21122 <__aeabi_fadd+0x4e>
   21268:	002a      	movs	r2, r5
   2126a:	2300      	movs	r3, #0
   2126c:	e77e      	b.n	2116c <__aeabi_fadd+0x98>
   2126e:	0033      	movs	r3, r6
   21270:	4a60      	ldr	r2, [pc, #384]	; (213f4 <__aeabi_fadd+0x320>)
   21272:	1a24      	subs	r4, r4, r0
   21274:	4013      	ands	r3, r2
   21276:	e768      	b.n	2114a <__aeabi_fadd+0x76>
   21278:	2900      	cmp	r1, #0
   2127a:	d163      	bne.n	21344 <__aeabi_fadd+0x270>
   2127c:	1c61      	adds	r1, r4, #1
   2127e:	b2c8      	uxtb	r0, r1
   21280:	2801      	cmp	r0, #1
   21282:	dd4e      	ble.n	21322 <__aeabi_fadd+0x24e>
   21284:	29ff      	cmp	r1, #255	; 0xff
   21286:	d049      	beq.n	2131c <__aeabi_fadd+0x248>
   21288:	4463      	add	r3, ip
   2128a:	085b      	lsrs	r3, r3, #1
   2128c:	000c      	movs	r4, r1
   2128e:	e75c      	b.n	2114a <__aeabi_fadd+0x76>
   21290:	2aff      	cmp	r2, #255	; 0xff
   21292:	d041      	beq.n	21318 <__aeabi_fadd+0x244>
   21294:	000a      	movs	r2, r1
   21296:	e779      	b.n	2118c <__aeabi_fadd+0xb8>
   21298:	2201      	movs	r2, #1
   2129a:	1a9b      	subs	r3, r3, r2
   2129c:	e784      	b.n	211a8 <__aeabi_fadd+0xd4>
   2129e:	2c00      	cmp	r4, #0
   212a0:	d01d      	beq.n	212de <__aeabi_fadd+0x20a>
   212a2:	28ff      	cmp	r0, #255	; 0xff
   212a4:	d022      	beq.n	212ec <__aeabi_fadd+0x218>
   212a6:	2480      	movs	r4, #128	; 0x80
   212a8:	04e4      	lsls	r4, r4, #19
   212aa:	4252      	negs	r2, r2
   212ac:	4323      	orrs	r3, r4
   212ae:	2a1b      	cmp	r2, #27
   212b0:	dd00      	ble.n	212b4 <__aeabi_fadd+0x1e0>
   212b2:	e08a      	b.n	213ca <__aeabi_fadd+0x2f6>
   212b4:	001c      	movs	r4, r3
   212b6:	2520      	movs	r5, #32
   212b8:	40d4      	lsrs	r4, r2
   212ba:	1aaa      	subs	r2, r5, r2
   212bc:	4093      	lsls	r3, r2
   212be:	1e5a      	subs	r2, r3, #1
   212c0:	4193      	sbcs	r3, r2
   212c2:	4323      	orrs	r3, r4
   212c4:	4662      	mov	r2, ip
   212c6:	0004      	movs	r4, r0
   212c8:	1ad3      	subs	r3, r2, r3
   212ca:	000d      	movs	r5, r1
   212cc:	e725      	b.n	2111a <__aeabi_fadd+0x46>
   212ce:	2e00      	cmp	r6, #0
   212d0:	d000      	beq.n	212d4 <__aeabi_fadd+0x200>
   212d2:	e726      	b.n	21122 <__aeabi_fadd+0x4e>
   212d4:	2200      	movs	r2, #0
   212d6:	2400      	movs	r4, #0
   212d8:	e7a9      	b.n	2122e <__aeabi_fadd+0x15a>
   212da:	000c      	movs	r4, r1
   212dc:	e735      	b.n	2114a <__aeabi_fadd+0x76>
   212de:	2b00      	cmp	r3, #0
   212e0:	d04d      	beq.n	2137e <__aeabi_fadd+0x2aa>
   212e2:	43d2      	mvns	r2, r2
   212e4:	2a00      	cmp	r2, #0
   212e6:	d0ed      	beq.n	212c4 <__aeabi_fadd+0x1f0>
   212e8:	28ff      	cmp	r0, #255	; 0xff
   212ea:	d1e0      	bne.n	212ae <__aeabi_fadd+0x1da>
   212ec:	4663      	mov	r3, ip
   212ee:	24ff      	movs	r4, #255	; 0xff
   212f0:	000d      	movs	r5, r1
   212f2:	e72a      	b.n	2114a <__aeabi_fadd+0x76>
   212f4:	29ff      	cmp	r1, #255	; 0xff
   212f6:	d00f      	beq.n	21318 <__aeabi_fadd+0x244>
   212f8:	0001      	movs	r1, r0
   212fa:	e773      	b.n	211e4 <__aeabi_fadd+0x110>
   212fc:	2b00      	cmp	r3, #0
   212fe:	d061      	beq.n	213c4 <__aeabi_fadd+0x2f0>
   21300:	24ff      	movs	r4, #255	; 0xff
   21302:	2f00      	cmp	r7, #0
   21304:	d100      	bne.n	21308 <__aeabi_fadd+0x234>
   21306:	e720      	b.n	2114a <__aeabi_fadd+0x76>
   21308:	2280      	movs	r2, #128	; 0x80
   2130a:	4641      	mov	r1, r8
   2130c:	03d2      	lsls	r2, r2, #15
   2130e:	4211      	tst	r1, r2
   21310:	d002      	beq.n	21318 <__aeabi_fadd+0x244>
   21312:	4216      	tst	r6, r2
   21314:	d100      	bne.n	21318 <__aeabi_fadd+0x244>
   21316:	003b      	movs	r3, r7
   21318:	24ff      	movs	r4, #255	; 0xff
   2131a:	e716      	b.n	2114a <__aeabi_fadd+0x76>
   2131c:	24ff      	movs	r4, #255	; 0xff
   2131e:	2300      	movs	r3, #0
   21320:	e724      	b.n	2116c <__aeabi_fadd+0x98>
   21322:	2c00      	cmp	r4, #0
   21324:	d1ea      	bne.n	212fc <__aeabi_fadd+0x228>
   21326:	2b00      	cmp	r3, #0
   21328:	d058      	beq.n	213dc <__aeabi_fadd+0x308>
   2132a:	2f00      	cmp	r7, #0
   2132c:	d100      	bne.n	21330 <__aeabi_fadd+0x25c>
   2132e:	e70c      	b.n	2114a <__aeabi_fadd+0x76>
   21330:	4463      	add	r3, ip
   21332:	015a      	lsls	r2, r3, #5
   21334:	d400      	bmi.n	21338 <__aeabi_fadd+0x264>
   21336:	e739      	b.n	211ac <__aeabi_fadd+0xd8>
   21338:	4a2e      	ldr	r2, [pc, #184]	; (213f4 <__aeabi_fadd+0x320>)
   2133a:	000c      	movs	r4, r1
   2133c:	4013      	ands	r3, r2
   2133e:	e704      	b.n	2114a <__aeabi_fadd+0x76>
   21340:	2101      	movs	r1, #1
   21342:	e75c      	b.n	211fe <__aeabi_fadd+0x12a>
   21344:	2c00      	cmp	r4, #0
   21346:	d11e      	bne.n	21386 <__aeabi_fadd+0x2b2>
   21348:	2b00      	cmp	r3, #0
   2134a:	d040      	beq.n	213ce <__aeabi_fadd+0x2fa>
   2134c:	43c9      	mvns	r1, r1
   2134e:	2900      	cmp	r1, #0
   21350:	d00b      	beq.n	2136a <__aeabi_fadd+0x296>
   21352:	28ff      	cmp	r0, #255	; 0xff
   21354:	d036      	beq.n	213c4 <__aeabi_fadd+0x2f0>
   21356:	291b      	cmp	r1, #27
   21358:	dc47      	bgt.n	213ea <__aeabi_fadd+0x316>
   2135a:	001c      	movs	r4, r3
   2135c:	2620      	movs	r6, #32
   2135e:	40cc      	lsrs	r4, r1
   21360:	1a71      	subs	r1, r6, r1
   21362:	408b      	lsls	r3, r1
   21364:	1e59      	subs	r1, r3, #1
   21366:	418b      	sbcs	r3, r1
   21368:	4323      	orrs	r3, r4
   2136a:	4463      	add	r3, ip
   2136c:	0004      	movs	r4, r0
   2136e:	e747      	b.n	21200 <__aeabi_fadd+0x12c>
   21370:	2b00      	cmp	r3, #0
   21372:	d118      	bne.n	213a6 <__aeabi_fadd+0x2d2>
   21374:	1e3b      	subs	r3, r7, #0
   21376:	d02d      	beq.n	213d4 <__aeabi_fadd+0x300>
   21378:	000d      	movs	r5, r1
   2137a:	24ff      	movs	r4, #255	; 0xff
   2137c:	e6e5      	b.n	2114a <__aeabi_fadd+0x76>
   2137e:	003b      	movs	r3, r7
   21380:	0004      	movs	r4, r0
   21382:	000d      	movs	r5, r1
   21384:	e6e1      	b.n	2114a <__aeabi_fadd+0x76>
   21386:	28ff      	cmp	r0, #255	; 0xff
   21388:	d01c      	beq.n	213c4 <__aeabi_fadd+0x2f0>
   2138a:	2480      	movs	r4, #128	; 0x80
   2138c:	04e4      	lsls	r4, r4, #19
   2138e:	4249      	negs	r1, r1
   21390:	4323      	orrs	r3, r4
   21392:	e7e0      	b.n	21356 <__aeabi_fadd+0x282>
   21394:	2f00      	cmp	r7, #0
   21396:	d100      	bne.n	2139a <__aeabi_fadd+0x2c6>
   21398:	e6d7      	b.n	2114a <__aeabi_fadd+0x76>
   2139a:	1bde      	subs	r6, r3, r7
   2139c:	0172      	lsls	r2, r6, #5
   2139e:	d51f      	bpl.n	213e0 <__aeabi_fadd+0x30c>
   213a0:	1afb      	subs	r3, r7, r3
   213a2:	000d      	movs	r5, r1
   213a4:	e6d1      	b.n	2114a <__aeabi_fadd+0x76>
   213a6:	24ff      	movs	r4, #255	; 0xff
   213a8:	2f00      	cmp	r7, #0
   213aa:	d100      	bne.n	213ae <__aeabi_fadd+0x2da>
   213ac:	e6cd      	b.n	2114a <__aeabi_fadd+0x76>
   213ae:	2280      	movs	r2, #128	; 0x80
   213b0:	4640      	mov	r0, r8
   213b2:	03d2      	lsls	r2, r2, #15
   213b4:	4210      	tst	r0, r2
   213b6:	d0af      	beq.n	21318 <__aeabi_fadd+0x244>
   213b8:	4216      	tst	r6, r2
   213ba:	d1ad      	bne.n	21318 <__aeabi_fadd+0x244>
   213bc:	003b      	movs	r3, r7
   213be:	000d      	movs	r5, r1
   213c0:	24ff      	movs	r4, #255	; 0xff
   213c2:	e6c2      	b.n	2114a <__aeabi_fadd+0x76>
   213c4:	4663      	mov	r3, ip
   213c6:	24ff      	movs	r4, #255	; 0xff
   213c8:	e6bf      	b.n	2114a <__aeabi_fadd+0x76>
   213ca:	2301      	movs	r3, #1
   213cc:	e77a      	b.n	212c4 <__aeabi_fadd+0x1f0>
   213ce:	003b      	movs	r3, r7
   213d0:	0004      	movs	r4, r0
   213d2:	e6ba      	b.n	2114a <__aeabi_fadd+0x76>
   213d4:	2680      	movs	r6, #128	; 0x80
   213d6:	2200      	movs	r2, #0
   213d8:	03f6      	lsls	r6, r6, #15
   213da:	e6f0      	b.n	211be <__aeabi_fadd+0xea>
   213dc:	003b      	movs	r3, r7
   213de:	e6b4      	b.n	2114a <__aeabi_fadd+0x76>
   213e0:	1e33      	subs	r3, r6, #0
   213e2:	d000      	beq.n	213e6 <__aeabi_fadd+0x312>
   213e4:	e6e2      	b.n	211ac <__aeabi_fadd+0xd8>
   213e6:	2200      	movs	r2, #0
   213e8:	e721      	b.n	2122e <__aeabi_fadd+0x15a>
   213ea:	2301      	movs	r3, #1
   213ec:	e7bd      	b.n	2136a <__aeabi_fadd+0x296>
   213ee:	46c0      	nop			; (mov r8, r8)
   213f0:	7dffffff 	.word	0x7dffffff
   213f4:	fbffffff 	.word	0xfbffffff

000213f8 <__aeabi_fdiv>:
   213f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   213fa:	4657      	mov	r7, sl
   213fc:	464e      	mov	r6, r9
   213fe:	46de      	mov	lr, fp
   21400:	4645      	mov	r5, r8
   21402:	b5e0      	push	{r5, r6, r7, lr}
   21404:	0244      	lsls	r4, r0, #9
   21406:	0043      	lsls	r3, r0, #1
   21408:	0fc6      	lsrs	r6, r0, #31
   2140a:	b083      	sub	sp, #12
   2140c:	1c0f      	adds	r7, r1, #0
   2140e:	0a64      	lsrs	r4, r4, #9
   21410:	0e1b      	lsrs	r3, r3, #24
   21412:	46b2      	mov	sl, r6
   21414:	d053      	beq.n	214be <__aeabi_fdiv+0xc6>
   21416:	2bff      	cmp	r3, #255	; 0xff
   21418:	d027      	beq.n	2146a <__aeabi_fdiv+0x72>
   2141a:	2280      	movs	r2, #128	; 0x80
   2141c:	00e4      	lsls	r4, r4, #3
   2141e:	04d2      	lsls	r2, r2, #19
   21420:	4314      	orrs	r4, r2
   21422:	227f      	movs	r2, #127	; 0x7f
   21424:	4252      	negs	r2, r2
   21426:	4690      	mov	r8, r2
   21428:	4498      	add	r8, r3
   2142a:	2300      	movs	r3, #0
   2142c:	4699      	mov	r9, r3
   2142e:	469b      	mov	fp, r3
   21430:	027d      	lsls	r5, r7, #9
   21432:	0078      	lsls	r0, r7, #1
   21434:	0ffb      	lsrs	r3, r7, #31
   21436:	0a6d      	lsrs	r5, r5, #9
   21438:	0e00      	lsrs	r0, r0, #24
   2143a:	9300      	str	r3, [sp, #0]
   2143c:	d024      	beq.n	21488 <__aeabi_fdiv+0x90>
   2143e:	28ff      	cmp	r0, #255	; 0xff
   21440:	d046      	beq.n	214d0 <__aeabi_fdiv+0xd8>
   21442:	2380      	movs	r3, #128	; 0x80
   21444:	2100      	movs	r1, #0
   21446:	00ed      	lsls	r5, r5, #3
   21448:	04db      	lsls	r3, r3, #19
   2144a:	431d      	orrs	r5, r3
   2144c:	387f      	subs	r0, #127	; 0x7f
   2144e:	4647      	mov	r7, r8
   21450:	1a38      	subs	r0, r7, r0
   21452:	464f      	mov	r7, r9
   21454:	430f      	orrs	r7, r1
   21456:	00bf      	lsls	r7, r7, #2
   21458:	46b9      	mov	r9, r7
   2145a:	0033      	movs	r3, r6
   2145c:	9a00      	ldr	r2, [sp, #0]
   2145e:	4f87      	ldr	r7, [pc, #540]	; (2167c <__aeabi_fdiv+0x284>)
   21460:	4053      	eors	r3, r2
   21462:	464a      	mov	r2, r9
   21464:	58ba      	ldr	r2, [r7, r2]
   21466:	9301      	str	r3, [sp, #4]
   21468:	4697      	mov	pc, r2
   2146a:	2c00      	cmp	r4, #0
   2146c:	d14e      	bne.n	2150c <__aeabi_fdiv+0x114>
   2146e:	2308      	movs	r3, #8
   21470:	4699      	mov	r9, r3
   21472:	33f7      	adds	r3, #247	; 0xf7
   21474:	4698      	mov	r8, r3
   21476:	3bfd      	subs	r3, #253	; 0xfd
   21478:	469b      	mov	fp, r3
   2147a:	027d      	lsls	r5, r7, #9
   2147c:	0078      	lsls	r0, r7, #1
   2147e:	0ffb      	lsrs	r3, r7, #31
   21480:	0a6d      	lsrs	r5, r5, #9
   21482:	0e00      	lsrs	r0, r0, #24
   21484:	9300      	str	r3, [sp, #0]
   21486:	d1da      	bne.n	2143e <__aeabi_fdiv+0x46>
   21488:	2d00      	cmp	r5, #0
   2148a:	d126      	bne.n	214da <__aeabi_fdiv+0xe2>
   2148c:	2000      	movs	r0, #0
   2148e:	2101      	movs	r1, #1
   21490:	0033      	movs	r3, r6
   21492:	9a00      	ldr	r2, [sp, #0]
   21494:	4f7a      	ldr	r7, [pc, #488]	; (21680 <__aeabi_fdiv+0x288>)
   21496:	4053      	eors	r3, r2
   21498:	4642      	mov	r2, r8
   2149a:	1a10      	subs	r0, r2, r0
   2149c:	464a      	mov	r2, r9
   2149e:	430a      	orrs	r2, r1
   214a0:	0092      	lsls	r2, r2, #2
   214a2:	58ba      	ldr	r2, [r7, r2]
   214a4:	001d      	movs	r5, r3
   214a6:	4697      	mov	pc, r2
   214a8:	9b00      	ldr	r3, [sp, #0]
   214aa:	002c      	movs	r4, r5
   214ac:	469a      	mov	sl, r3
   214ae:	468b      	mov	fp, r1
   214b0:	465b      	mov	r3, fp
   214b2:	2b02      	cmp	r3, #2
   214b4:	d131      	bne.n	2151a <__aeabi_fdiv+0x122>
   214b6:	4653      	mov	r3, sl
   214b8:	21ff      	movs	r1, #255	; 0xff
   214ba:	2400      	movs	r4, #0
   214bc:	e038      	b.n	21530 <__aeabi_fdiv+0x138>
   214be:	2c00      	cmp	r4, #0
   214c0:	d117      	bne.n	214f2 <__aeabi_fdiv+0xfa>
   214c2:	2304      	movs	r3, #4
   214c4:	4699      	mov	r9, r3
   214c6:	2300      	movs	r3, #0
   214c8:	4698      	mov	r8, r3
   214ca:	3301      	adds	r3, #1
   214cc:	469b      	mov	fp, r3
   214ce:	e7af      	b.n	21430 <__aeabi_fdiv+0x38>
   214d0:	20ff      	movs	r0, #255	; 0xff
   214d2:	2d00      	cmp	r5, #0
   214d4:	d10b      	bne.n	214ee <__aeabi_fdiv+0xf6>
   214d6:	2102      	movs	r1, #2
   214d8:	e7da      	b.n	21490 <__aeabi_fdiv+0x98>
   214da:	0028      	movs	r0, r5
   214dc:	f7ff fd5c 	bl	20f98 <__clzsi2>
   214e0:	1f43      	subs	r3, r0, #5
   214e2:	409d      	lsls	r5, r3
   214e4:	2376      	movs	r3, #118	; 0x76
   214e6:	425b      	negs	r3, r3
   214e8:	1a18      	subs	r0, r3, r0
   214ea:	2100      	movs	r1, #0
   214ec:	e7af      	b.n	2144e <__aeabi_fdiv+0x56>
   214ee:	2103      	movs	r1, #3
   214f0:	e7ad      	b.n	2144e <__aeabi_fdiv+0x56>
   214f2:	0020      	movs	r0, r4
   214f4:	f7ff fd50 	bl	20f98 <__clzsi2>
   214f8:	1f43      	subs	r3, r0, #5
   214fa:	409c      	lsls	r4, r3
   214fc:	2376      	movs	r3, #118	; 0x76
   214fe:	425b      	negs	r3, r3
   21500:	1a1b      	subs	r3, r3, r0
   21502:	4698      	mov	r8, r3
   21504:	2300      	movs	r3, #0
   21506:	4699      	mov	r9, r3
   21508:	469b      	mov	fp, r3
   2150a:	e791      	b.n	21430 <__aeabi_fdiv+0x38>
   2150c:	230c      	movs	r3, #12
   2150e:	4699      	mov	r9, r3
   21510:	33f3      	adds	r3, #243	; 0xf3
   21512:	4698      	mov	r8, r3
   21514:	3bfc      	subs	r3, #252	; 0xfc
   21516:	469b      	mov	fp, r3
   21518:	e78a      	b.n	21430 <__aeabi_fdiv+0x38>
   2151a:	2b03      	cmp	r3, #3
   2151c:	d100      	bne.n	21520 <__aeabi_fdiv+0x128>
   2151e:	e0a5      	b.n	2166c <__aeabi_fdiv+0x274>
   21520:	4655      	mov	r5, sl
   21522:	2b01      	cmp	r3, #1
   21524:	d000      	beq.n	21528 <__aeabi_fdiv+0x130>
   21526:	e081      	b.n	2162c <__aeabi_fdiv+0x234>
   21528:	2301      	movs	r3, #1
   2152a:	2100      	movs	r1, #0
   2152c:	2400      	movs	r4, #0
   2152e:	402b      	ands	r3, r5
   21530:	0264      	lsls	r4, r4, #9
   21532:	05c9      	lsls	r1, r1, #23
   21534:	0a60      	lsrs	r0, r4, #9
   21536:	07db      	lsls	r3, r3, #31
   21538:	4308      	orrs	r0, r1
   2153a:	4318      	orrs	r0, r3
   2153c:	b003      	add	sp, #12
   2153e:	bc3c      	pop	{r2, r3, r4, r5}
   21540:	4690      	mov	r8, r2
   21542:	4699      	mov	r9, r3
   21544:	46a2      	mov	sl, r4
   21546:	46ab      	mov	fp, r5
   21548:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2154a:	2480      	movs	r4, #128	; 0x80
   2154c:	2300      	movs	r3, #0
   2154e:	03e4      	lsls	r4, r4, #15
   21550:	21ff      	movs	r1, #255	; 0xff
   21552:	e7ed      	b.n	21530 <__aeabi_fdiv+0x138>
   21554:	21ff      	movs	r1, #255	; 0xff
   21556:	2400      	movs	r4, #0
   21558:	e7ea      	b.n	21530 <__aeabi_fdiv+0x138>
   2155a:	2301      	movs	r3, #1
   2155c:	1a59      	subs	r1, r3, r1
   2155e:	291b      	cmp	r1, #27
   21560:	dd66      	ble.n	21630 <__aeabi_fdiv+0x238>
   21562:	9a01      	ldr	r2, [sp, #4]
   21564:	4013      	ands	r3, r2
   21566:	2100      	movs	r1, #0
   21568:	2400      	movs	r4, #0
   2156a:	e7e1      	b.n	21530 <__aeabi_fdiv+0x138>
   2156c:	2380      	movs	r3, #128	; 0x80
   2156e:	03db      	lsls	r3, r3, #15
   21570:	421c      	tst	r4, r3
   21572:	d038      	beq.n	215e6 <__aeabi_fdiv+0x1ee>
   21574:	421d      	tst	r5, r3
   21576:	d051      	beq.n	2161c <__aeabi_fdiv+0x224>
   21578:	431c      	orrs	r4, r3
   2157a:	0264      	lsls	r4, r4, #9
   2157c:	0a64      	lsrs	r4, r4, #9
   2157e:	0033      	movs	r3, r6
   21580:	21ff      	movs	r1, #255	; 0xff
   21582:	e7d5      	b.n	21530 <__aeabi_fdiv+0x138>
   21584:	0163      	lsls	r3, r4, #5
   21586:	016c      	lsls	r4, r5, #5
   21588:	42a3      	cmp	r3, r4
   2158a:	d23b      	bcs.n	21604 <__aeabi_fdiv+0x20c>
   2158c:	261b      	movs	r6, #27
   2158e:	2100      	movs	r1, #0
   21590:	3801      	subs	r0, #1
   21592:	2501      	movs	r5, #1
   21594:	001f      	movs	r7, r3
   21596:	0049      	lsls	r1, r1, #1
   21598:	005b      	lsls	r3, r3, #1
   2159a:	2f00      	cmp	r7, #0
   2159c:	db01      	blt.n	215a2 <__aeabi_fdiv+0x1aa>
   2159e:	429c      	cmp	r4, r3
   215a0:	d801      	bhi.n	215a6 <__aeabi_fdiv+0x1ae>
   215a2:	1b1b      	subs	r3, r3, r4
   215a4:	4329      	orrs	r1, r5
   215a6:	3e01      	subs	r6, #1
   215a8:	2e00      	cmp	r6, #0
   215aa:	d1f3      	bne.n	21594 <__aeabi_fdiv+0x19c>
   215ac:	001c      	movs	r4, r3
   215ae:	1e63      	subs	r3, r4, #1
   215b0:	419c      	sbcs	r4, r3
   215b2:	430c      	orrs	r4, r1
   215b4:	0001      	movs	r1, r0
   215b6:	317f      	adds	r1, #127	; 0x7f
   215b8:	2900      	cmp	r1, #0
   215ba:	ddce      	ble.n	2155a <__aeabi_fdiv+0x162>
   215bc:	0763      	lsls	r3, r4, #29
   215be:	d004      	beq.n	215ca <__aeabi_fdiv+0x1d2>
   215c0:	230f      	movs	r3, #15
   215c2:	4023      	ands	r3, r4
   215c4:	2b04      	cmp	r3, #4
   215c6:	d000      	beq.n	215ca <__aeabi_fdiv+0x1d2>
   215c8:	3404      	adds	r4, #4
   215ca:	0123      	lsls	r3, r4, #4
   215cc:	d503      	bpl.n	215d6 <__aeabi_fdiv+0x1de>
   215ce:	0001      	movs	r1, r0
   215d0:	4b2c      	ldr	r3, [pc, #176]	; (21684 <__aeabi_fdiv+0x28c>)
   215d2:	3180      	adds	r1, #128	; 0x80
   215d4:	401c      	ands	r4, r3
   215d6:	29fe      	cmp	r1, #254	; 0xfe
   215d8:	dd0d      	ble.n	215f6 <__aeabi_fdiv+0x1fe>
   215da:	2301      	movs	r3, #1
   215dc:	9a01      	ldr	r2, [sp, #4]
   215de:	21ff      	movs	r1, #255	; 0xff
   215e0:	4013      	ands	r3, r2
   215e2:	2400      	movs	r4, #0
   215e4:	e7a4      	b.n	21530 <__aeabi_fdiv+0x138>
   215e6:	2380      	movs	r3, #128	; 0x80
   215e8:	03db      	lsls	r3, r3, #15
   215ea:	431c      	orrs	r4, r3
   215ec:	0264      	lsls	r4, r4, #9
   215ee:	0a64      	lsrs	r4, r4, #9
   215f0:	0033      	movs	r3, r6
   215f2:	21ff      	movs	r1, #255	; 0xff
   215f4:	e79c      	b.n	21530 <__aeabi_fdiv+0x138>
   215f6:	2301      	movs	r3, #1
   215f8:	9a01      	ldr	r2, [sp, #4]
   215fa:	01a4      	lsls	r4, r4, #6
   215fc:	0a64      	lsrs	r4, r4, #9
   215fe:	b2c9      	uxtb	r1, r1
   21600:	4013      	ands	r3, r2
   21602:	e795      	b.n	21530 <__aeabi_fdiv+0x138>
   21604:	1b1b      	subs	r3, r3, r4
   21606:	261a      	movs	r6, #26
   21608:	2101      	movs	r1, #1
   2160a:	e7c2      	b.n	21592 <__aeabi_fdiv+0x19a>
   2160c:	9b00      	ldr	r3, [sp, #0]
   2160e:	468b      	mov	fp, r1
   21610:	469a      	mov	sl, r3
   21612:	2400      	movs	r4, #0
   21614:	e74c      	b.n	214b0 <__aeabi_fdiv+0xb8>
   21616:	0263      	lsls	r3, r4, #9
   21618:	d5e5      	bpl.n	215e6 <__aeabi_fdiv+0x1ee>
   2161a:	2500      	movs	r5, #0
   2161c:	2480      	movs	r4, #128	; 0x80
   2161e:	03e4      	lsls	r4, r4, #15
   21620:	432c      	orrs	r4, r5
   21622:	0264      	lsls	r4, r4, #9
   21624:	0a64      	lsrs	r4, r4, #9
   21626:	9b00      	ldr	r3, [sp, #0]
   21628:	21ff      	movs	r1, #255	; 0xff
   2162a:	e781      	b.n	21530 <__aeabi_fdiv+0x138>
   2162c:	9501      	str	r5, [sp, #4]
   2162e:	e7c1      	b.n	215b4 <__aeabi_fdiv+0x1bc>
   21630:	0023      	movs	r3, r4
   21632:	2020      	movs	r0, #32
   21634:	40cb      	lsrs	r3, r1
   21636:	1a41      	subs	r1, r0, r1
   21638:	408c      	lsls	r4, r1
   2163a:	1e61      	subs	r1, r4, #1
   2163c:	418c      	sbcs	r4, r1
   2163e:	431c      	orrs	r4, r3
   21640:	0763      	lsls	r3, r4, #29
   21642:	d004      	beq.n	2164e <__aeabi_fdiv+0x256>
   21644:	230f      	movs	r3, #15
   21646:	4023      	ands	r3, r4
   21648:	2b04      	cmp	r3, #4
   2164a:	d000      	beq.n	2164e <__aeabi_fdiv+0x256>
   2164c:	3404      	adds	r4, #4
   2164e:	0163      	lsls	r3, r4, #5
   21650:	d505      	bpl.n	2165e <__aeabi_fdiv+0x266>
   21652:	2301      	movs	r3, #1
   21654:	9a01      	ldr	r2, [sp, #4]
   21656:	2101      	movs	r1, #1
   21658:	4013      	ands	r3, r2
   2165a:	2400      	movs	r4, #0
   2165c:	e768      	b.n	21530 <__aeabi_fdiv+0x138>
   2165e:	2301      	movs	r3, #1
   21660:	9a01      	ldr	r2, [sp, #4]
   21662:	01a4      	lsls	r4, r4, #6
   21664:	0a64      	lsrs	r4, r4, #9
   21666:	4013      	ands	r3, r2
   21668:	2100      	movs	r1, #0
   2166a:	e761      	b.n	21530 <__aeabi_fdiv+0x138>
   2166c:	2380      	movs	r3, #128	; 0x80
   2166e:	03db      	lsls	r3, r3, #15
   21670:	431c      	orrs	r4, r3
   21672:	0264      	lsls	r4, r4, #9
   21674:	0a64      	lsrs	r4, r4, #9
   21676:	4653      	mov	r3, sl
   21678:	21ff      	movs	r1, #255	; 0xff
   2167a:	e759      	b.n	21530 <__aeabi_fdiv+0x138>
   2167c:	00029b40 	.word	0x00029b40
   21680:	00029b80 	.word	0x00029b80
   21684:	f7ffffff 	.word	0xf7ffffff

00021688 <__eqsf2>:
   21688:	b570      	push	{r4, r5, r6, lr}
   2168a:	0042      	lsls	r2, r0, #1
   2168c:	0245      	lsls	r5, r0, #9
   2168e:	024e      	lsls	r6, r1, #9
   21690:	004c      	lsls	r4, r1, #1
   21692:	0fc3      	lsrs	r3, r0, #31
   21694:	0a6d      	lsrs	r5, r5, #9
   21696:	0e12      	lsrs	r2, r2, #24
   21698:	0a76      	lsrs	r6, r6, #9
   2169a:	0e24      	lsrs	r4, r4, #24
   2169c:	0fc9      	lsrs	r1, r1, #31
   2169e:	2001      	movs	r0, #1
   216a0:	2aff      	cmp	r2, #255	; 0xff
   216a2:	d006      	beq.n	216b2 <__eqsf2+0x2a>
   216a4:	2cff      	cmp	r4, #255	; 0xff
   216a6:	d003      	beq.n	216b0 <__eqsf2+0x28>
   216a8:	42a2      	cmp	r2, r4
   216aa:	d101      	bne.n	216b0 <__eqsf2+0x28>
   216ac:	42b5      	cmp	r5, r6
   216ae:	d006      	beq.n	216be <__eqsf2+0x36>
   216b0:	bd70      	pop	{r4, r5, r6, pc}
   216b2:	2d00      	cmp	r5, #0
   216b4:	d1fc      	bne.n	216b0 <__eqsf2+0x28>
   216b6:	2cff      	cmp	r4, #255	; 0xff
   216b8:	d1fa      	bne.n	216b0 <__eqsf2+0x28>
   216ba:	2e00      	cmp	r6, #0
   216bc:	d1f8      	bne.n	216b0 <__eqsf2+0x28>
   216be:	428b      	cmp	r3, r1
   216c0:	d006      	beq.n	216d0 <__eqsf2+0x48>
   216c2:	2001      	movs	r0, #1
   216c4:	2a00      	cmp	r2, #0
   216c6:	d1f3      	bne.n	216b0 <__eqsf2+0x28>
   216c8:	0028      	movs	r0, r5
   216ca:	1e45      	subs	r5, r0, #1
   216cc:	41a8      	sbcs	r0, r5
   216ce:	e7ef      	b.n	216b0 <__eqsf2+0x28>
   216d0:	2000      	movs	r0, #0
   216d2:	e7ed      	b.n	216b0 <__eqsf2+0x28>

000216d4 <__gesf2>:
   216d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   216d6:	0042      	lsls	r2, r0, #1
   216d8:	0245      	lsls	r5, r0, #9
   216da:	024c      	lsls	r4, r1, #9
   216dc:	0fc3      	lsrs	r3, r0, #31
   216de:	0048      	lsls	r0, r1, #1
   216e0:	0a6d      	lsrs	r5, r5, #9
   216e2:	0e12      	lsrs	r2, r2, #24
   216e4:	0a64      	lsrs	r4, r4, #9
   216e6:	0e00      	lsrs	r0, r0, #24
   216e8:	0fc9      	lsrs	r1, r1, #31
   216ea:	2aff      	cmp	r2, #255	; 0xff
   216ec:	d01e      	beq.n	2172c <__gesf2+0x58>
   216ee:	28ff      	cmp	r0, #255	; 0xff
   216f0:	d021      	beq.n	21736 <__gesf2+0x62>
   216f2:	2a00      	cmp	r2, #0
   216f4:	d10a      	bne.n	2170c <__gesf2+0x38>
   216f6:	426e      	negs	r6, r5
   216f8:	416e      	adcs	r6, r5
   216fa:	b2f6      	uxtb	r6, r6
   216fc:	2800      	cmp	r0, #0
   216fe:	d10f      	bne.n	21720 <__gesf2+0x4c>
   21700:	2c00      	cmp	r4, #0
   21702:	d10d      	bne.n	21720 <__gesf2+0x4c>
   21704:	2000      	movs	r0, #0
   21706:	2d00      	cmp	r5, #0
   21708:	d009      	beq.n	2171e <__gesf2+0x4a>
   2170a:	e005      	b.n	21718 <__gesf2+0x44>
   2170c:	2800      	cmp	r0, #0
   2170e:	d101      	bne.n	21714 <__gesf2+0x40>
   21710:	2c00      	cmp	r4, #0
   21712:	d001      	beq.n	21718 <__gesf2+0x44>
   21714:	428b      	cmp	r3, r1
   21716:	d011      	beq.n	2173c <__gesf2+0x68>
   21718:	2101      	movs	r1, #1
   2171a:	4258      	negs	r0, r3
   2171c:	4308      	orrs	r0, r1
   2171e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21720:	2e00      	cmp	r6, #0
   21722:	d0f7      	beq.n	21714 <__gesf2+0x40>
   21724:	2001      	movs	r0, #1
   21726:	3901      	subs	r1, #1
   21728:	4308      	orrs	r0, r1
   2172a:	e7f8      	b.n	2171e <__gesf2+0x4a>
   2172c:	2d00      	cmp	r5, #0
   2172e:	d0de      	beq.n	216ee <__gesf2+0x1a>
   21730:	2002      	movs	r0, #2
   21732:	4240      	negs	r0, r0
   21734:	e7f3      	b.n	2171e <__gesf2+0x4a>
   21736:	2c00      	cmp	r4, #0
   21738:	d0db      	beq.n	216f2 <__gesf2+0x1e>
   2173a:	e7f9      	b.n	21730 <__gesf2+0x5c>
   2173c:	4282      	cmp	r2, r0
   2173e:	dceb      	bgt.n	21718 <__gesf2+0x44>
   21740:	db04      	blt.n	2174c <__gesf2+0x78>
   21742:	42a5      	cmp	r5, r4
   21744:	d8e8      	bhi.n	21718 <__gesf2+0x44>
   21746:	2000      	movs	r0, #0
   21748:	42a5      	cmp	r5, r4
   2174a:	d2e8      	bcs.n	2171e <__gesf2+0x4a>
   2174c:	2101      	movs	r1, #1
   2174e:	1e58      	subs	r0, r3, #1
   21750:	4308      	orrs	r0, r1
   21752:	e7e4      	b.n	2171e <__gesf2+0x4a>

00021754 <__lesf2>:
   21754:	b5f0      	push	{r4, r5, r6, r7, lr}
   21756:	0042      	lsls	r2, r0, #1
   21758:	024d      	lsls	r5, r1, #9
   2175a:	004c      	lsls	r4, r1, #1
   2175c:	0246      	lsls	r6, r0, #9
   2175e:	0a76      	lsrs	r6, r6, #9
   21760:	0e12      	lsrs	r2, r2, #24
   21762:	0fc3      	lsrs	r3, r0, #31
   21764:	0a6d      	lsrs	r5, r5, #9
   21766:	0e24      	lsrs	r4, r4, #24
   21768:	0fc9      	lsrs	r1, r1, #31
   2176a:	2aff      	cmp	r2, #255	; 0xff
   2176c:	d016      	beq.n	2179c <__lesf2+0x48>
   2176e:	2cff      	cmp	r4, #255	; 0xff
   21770:	d018      	beq.n	217a4 <__lesf2+0x50>
   21772:	2a00      	cmp	r2, #0
   21774:	d10a      	bne.n	2178c <__lesf2+0x38>
   21776:	4270      	negs	r0, r6
   21778:	4170      	adcs	r0, r6
   2177a:	b2c0      	uxtb	r0, r0
   2177c:	2c00      	cmp	r4, #0
   2177e:	d015      	beq.n	217ac <__lesf2+0x58>
   21780:	2800      	cmp	r0, #0
   21782:	d005      	beq.n	21790 <__lesf2+0x3c>
   21784:	2001      	movs	r0, #1
   21786:	3901      	subs	r1, #1
   21788:	4308      	orrs	r0, r1
   2178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2178c:	2c00      	cmp	r4, #0
   2178e:	d013      	beq.n	217b8 <__lesf2+0x64>
   21790:	4299      	cmp	r1, r3
   21792:	d014      	beq.n	217be <__lesf2+0x6a>
   21794:	2001      	movs	r0, #1
   21796:	425b      	negs	r3, r3
   21798:	4318      	orrs	r0, r3
   2179a:	e7f6      	b.n	2178a <__lesf2+0x36>
   2179c:	2002      	movs	r0, #2
   2179e:	2e00      	cmp	r6, #0
   217a0:	d1f3      	bne.n	2178a <__lesf2+0x36>
   217a2:	e7e4      	b.n	2176e <__lesf2+0x1a>
   217a4:	2002      	movs	r0, #2
   217a6:	2d00      	cmp	r5, #0
   217a8:	d1ef      	bne.n	2178a <__lesf2+0x36>
   217aa:	e7e2      	b.n	21772 <__lesf2+0x1e>
   217ac:	2d00      	cmp	r5, #0
   217ae:	d1e7      	bne.n	21780 <__lesf2+0x2c>
   217b0:	2000      	movs	r0, #0
   217b2:	2e00      	cmp	r6, #0
   217b4:	d0e9      	beq.n	2178a <__lesf2+0x36>
   217b6:	e7ed      	b.n	21794 <__lesf2+0x40>
   217b8:	2d00      	cmp	r5, #0
   217ba:	d1e9      	bne.n	21790 <__lesf2+0x3c>
   217bc:	e7ea      	b.n	21794 <__lesf2+0x40>
   217be:	42a2      	cmp	r2, r4
   217c0:	dc06      	bgt.n	217d0 <__lesf2+0x7c>
   217c2:	dbdf      	blt.n	21784 <__lesf2+0x30>
   217c4:	42ae      	cmp	r6, r5
   217c6:	d803      	bhi.n	217d0 <__lesf2+0x7c>
   217c8:	2000      	movs	r0, #0
   217ca:	42ae      	cmp	r6, r5
   217cc:	d3da      	bcc.n	21784 <__lesf2+0x30>
   217ce:	e7dc      	b.n	2178a <__lesf2+0x36>
   217d0:	2001      	movs	r0, #1
   217d2:	4249      	negs	r1, r1
   217d4:	4308      	orrs	r0, r1
   217d6:	e7d8      	b.n	2178a <__lesf2+0x36>

000217d8 <__aeabi_fmul>:
   217d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   217da:	4657      	mov	r7, sl
   217dc:	464e      	mov	r6, r9
   217de:	4645      	mov	r5, r8
   217e0:	46de      	mov	lr, fp
   217e2:	b5e0      	push	{r5, r6, r7, lr}
   217e4:	0247      	lsls	r7, r0, #9
   217e6:	0046      	lsls	r6, r0, #1
   217e8:	4688      	mov	r8, r1
   217ea:	0a7f      	lsrs	r7, r7, #9
   217ec:	0e36      	lsrs	r6, r6, #24
   217ee:	0fc4      	lsrs	r4, r0, #31
   217f0:	2e00      	cmp	r6, #0
   217f2:	d047      	beq.n	21884 <__aeabi_fmul+0xac>
   217f4:	2eff      	cmp	r6, #255	; 0xff
   217f6:	d024      	beq.n	21842 <__aeabi_fmul+0x6a>
   217f8:	00fb      	lsls	r3, r7, #3
   217fa:	2780      	movs	r7, #128	; 0x80
   217fc:	04ff      	lsls	r7, r7, #19
   217fe:	431f      	orrs	r7, r3
   21800:	2300      	movs	r3, #0
   21802:	4699      	mov	r9, r3
   21804:	469a      	mov	sl, r3
   21806:	3e7f      	subs	r6, #127	; 0x7f
   21808:	4643      	mov	r3, r8
   2180a:	025d      	lsls	r5, r3, #9
   2180c:	0058      	lsls	r0, r3, #1
   2180e:	0fdb      	lsrs	r3, r3, #31
   21810:	0a6d      	lsrs	r5, r5, #9
   21812:	0e00      	lsrs	r0, r0, #24
   21814:	4698      	mov	r8, r3
   21816:	d043      	beq.n	218a0 <__aeabi_fmul+0xc8>
   21818:	28ff      	cmp	r0, #255	; 0xff
   2181a:	d03b      	beq.n	21894 <__aeabi_fmul+0xbc>
   2181c:	00eb      	lsls	r3, r5, #3
   2181e:	2580      	movs	r5, #128	; 0x80
   21820:	2200      	movs	r2, #0
   21822:	04ed      	lsls	r5, r5, #19
   21824:	431d      	orrs	r5, r3
   21826:	387f      	subs	r0, #127	; 0x7f
   21828:	1836      	adds	r6, r6, r0
   2182a:	1c73      	adds	r3, r6, #1
   2182c:	4641      	mov	r1, r8
   2182e:	469b      	mov	fp, r3
   21830:	464b      	mov	r3, r9
   21832:	4061      	eors	r1, r4
   21834:	4313      	orrs	r3, r2
   21836:	2b0f      	cmp	r3, #15
   21838:	d864      	bhi.n	21904 <__aeabi_fmul+0x12c>
   2183a:	4875      	ldr	r0, [pc, #468]	; (21a10 <__aeabi_fmul+0x238>)
   2183c:	009b      	lsls	r3, r3, #2
   2183e:	58c3      	ldr	r3, [r0, r3]
   21840:	469f      	mov	pc, r3
   21842:	2f00      	cmp	r7, #0
   21844:	d142      	bne.n	218cc <__aeabi_fmul+0xf4>
   21846:	2308      	movs	r3, #8
   21848:	4699      	mov	r9, r3
   2184a:	3b06      	subs	r3, #6
   2184c:	26ff      	movs	r6, #255	; 0xff
   2184e:	469a      	mov	sl, r3
   21850:	e7da      	b.n	21808 <__aeabi_fmul+0x30>
   21852:	4641      	mov	r1, r8
   21854:	2a02      	cmp	r2, #2
   21856:	d028      	beq.n	218aa <__aeabi_fmul+0xd2>
   21858:	2a03      	cmp	r2, #3
   2185a:	d100      	bne.n	2185e <__aeabi_fmul+0x86>
   2185c:	e0ce      	b.n	219fc <__aeabi_fmul+0x224>
   2185e:	2a01      	cmp	r2, #1
   21860:	d000      	beq.n	21864 <__aeabi_fmul+0x8c>
   21862:	e0ac      	b.n	219be <__aeabi_fmul+0x1e6>
   21864:	4011      	ands	r1, r2
   21866:	2000      	movs	r0, #0
   21868:	2200      	movs	r2, #0
   2186a:	b2cc      	uxtb	r4, r1
   2186c:	0240      	lsls	r0, r0, #9
   2186e:	05d2      	lsls	r2, r2, #23
   21870:	0a40      	lsrs	r0, r0, #9
   21872:	07e4      	lsls	r4, r4, #31
   21874:	4310      	orrs	r0, r2
   21876:	4320      	orrs	r0, r4
   21878:	bc3c      	pop	{r2, r3, r4, r5}
   2187a:	4690      	mov	r8, r2
   2187c:	4699      	mov	r9, r3
   2187e:	46a2      	mov	sl, r4
   21880:	46ab      	mov	fp, r5
   21882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21884:	2f00      	cmp	r7, #0
   21886:	d115      	bne.n	218b4 <__aeabi_fmul+0xdc>
   21888:	2304      	movs	r3, #4
   2188a:	4699      	mov	r9, r3
   2188c:	3b03      	subs	r3, #3
   2188e:	2600      	movs	r6, #0
   21890:	469a      	mov	sl, r3
   21892:	e7b9      	b.n	21808 <__aeabi_fmul+0x30>
   21894:	20ff      	movs	r0, #255	; 0xff
   21896:	2202      	movs	r2, #2
   21898:	2d00      	cmp	r5, #0
   2189a:	d0c5      	beq.n	21828 <__aeabi_fmul+0x50>
   2189c:	2203      	movs	r2, #3
   2189e:	e7c3      	b.n	21828 <__aeabi_fmul+0x50>
   218a0:	2d00      	cmp	r5, #0
   218a2:	d119      	bne.n	218d8 <__aeabi_fmul+0x100>
   218a4:	2000      	movs	r0, #0
   218a6:	2201      	movs	r2, #1
   218a8:	e7be      	b.n	21828 <__aeabi_fmul+0x50>
   218aa:	2401      	movs	r4, #1
   218ac:	22ff      	movs	r2, #255	; 0xff
   218ae:	400c      	ands	r4, r1
   218b0:	2000      	movs	r0, #0
   218b2:	e7db      	b.n	2186c <__aeabi_fmul+0x94>
   218b4:	0038      	movs	r0, r7
   218b6:	f7ff fb6f 	bl	20f98 <__clzsi2>
   218ba:	2676      	movs	r6, #118	; 0x76
   218bc:	1f43      	subs	r3, r0, #5
   218be:	409f      	lsls	r7, r3
   218c0:	2300      	movs	r3, #0
   218c2:	4276      	negs	r6, r6
   218c4:	1a36      	subs	r6, r6, r0
   218c6:	4699      	mov	r9, r3
   218c8:	469a      	mov	sl, r3
   218ca:	e79d      	b.n	21808 <__aeabi_fmul+0x30>
   218cc:	230c      	movs	r3, #12
   218ce:	4699      	mov	r9, r3
   218d0:	3b09      	subs	r3, #9
   218d2:	26ff      	movs	r6, #255	; 0xff
   218d4:	469a      	mov	sl, r3
   218d6:	e797      	b.n	21808 <__aeabi_fmul+0x30>
   218d8:	0028      	movs	r0, r5
   218da:	f7ff fb5d 	bl	20f98 <__clzsi2>
   218de:	1f43      	subs	r3, r0, #5
   218e0:	409d      	lsls	r5, r3
   218e2:	2376      	movs	r3, #118	; 0x76
   218e4:	425b      	negs	r3, r3
   218e6:	1a18      	subs	r0, r3, r0
   218e8:	2200      	movs	r2, #0
   218ea:	e79d      	b.n	21828 <__aeabi_fmul+0x50>
   218ec:	2080      	movs	r0, #128	; 0x80
   218ee:	2400      	movs	r4, #0
   218f0:	03c0      	lsls	r0, r0, #15
   218f2:	22ff      	movs	r2, #255	; 0xff
   218f4:	e7ba      	b.n	2186c <__aeabi_fmul+0x94>
   218f6:	003d      	movs	r5, r7
   218f8:	4652      	mov	r2, sl
   218fa:	e7ab      	b.n	21854 <__aeabi_fmul+0x7c>
   218fc:	003d      	movs	r5, r7
   218fe:	0021      	movs	r1, r4
   21900:	4652      	mov	r2, sl
   21902:	e7a7      	b.n	21854 <__aeabi_fmul+0x7c>
   21904:	0c3b      	lsrs	r3, r7, #16
   21906:	469c      	mov	ip, r3
   21908:	042a      	lsls	r2, r5, #16
   2190a:	0c12      	lsrs	r2, r2, #16
   2190c:	0c2b      	lsrs	r3, r5, #16
   2190e:	0014      	movs	r4, r2
   21910:	4660      	mov	r0, ip
   21912:	4665      	mov	r5, ip
   21914:	043f      	lsls	r7, r7, #16
   21916:	0c3f      	lsrs	r7, r7, #16
   21918:	437c      	muls	r4, r7
   2191a:	4342      	muls	r2, r0
   2191c:	435d      	muls	r5, r3
   2191e:	437b      	muls	r3, r7
   21920:	0c27      	lsrs	r7, r4, #16
   21922:	189b      	adds	r3, r3, r2
   21924:	18ff      	adds	r7, r7, r3
   21926:	42ba      	cmp	r2, r7
   21928:	d903      	bls.n	21932 <__aeabi_fmul+0x15a>
   2192a:	2380      	movs	r3, #128	; 0x80
   2192c:	025b      	lsls	r3, r3, #9
   2192e:	469c      	mov	ip, r3
   21930:	4465      	add	r5, ip
   21932:	0424      	lsls	r4, r4, #16
   21934:	043a      	lsls	r2, r7, #16
   21936:	0c24      	lsrs	r4, r4, #16
   21938:	1912      	adds	r2, r2, r4
   2193a:	0193      	lsls	r3, r2, #6
   2193c:	1e5c      	subs	r4, r3, #1
   2193e:	41a3      	sbcs	r3, r4
   21940:	0c3f      	lsrs	r7, r7, #16
   21942:	0e92      	lsrs	r2, r2, #26
   21944:	197d      	adds	r5, r7, r5
   21946:	431a      	orrs	r2, r3
   21948:	01ad      	lsls	r5, r5, #6
   2194a:	4315      	orrs	r5, r2
   2194c:	012b      	lsls	r3, r5, #4
   2194e:	d504      	bpl.n	2195a <__aeabi_fmul+0x182>
   21950:	2301      	movs	r3, #1
   21952:	465e      	mov	r6, fp
   21954:	086a      	lsrs	r2, r5, #1
   21956:	401d      	ands	r5, r3
   21958:	4315      	orrs	r5, r2
   2195a:	0032      	movs	r2, r6
   2195c:	327f      	adds	r2, #127	; 0x7f
   2195e:	2a00      	cmp	r2, #0
   21960:	dd25      	ble.n	219ae <__aeabi_fmul+0x1d6>
   21962:	076b      	lsls	r3, r5, #29
   21964:	d004      	beq.n	21970 <__aeabi_fmul+0x198>
   21966:	230f      	movs	r3, #15
   21968:	402b      	ands	r3, r5
   2196a:	2b04      	cmp	r3, #4
   2196c:	d000      	beq.n	21970 <__aeabi_fmul+0x198>
   2196e:	3504      	adds	r5, #4
   21970:	012b      	lsls	r3, r5, #4
   21972:	d503      	bpl.n	2197c <__aeabi_fmul+0x1a4>
   21974:	0032      	movs	r2, r6
   21976:	4b27      	ldr	r3, [pc, #156]	; (21a14 <__aeabi_fmul+0x23c>)
   21978:	3280      	adds	r2, #128	; 0x80
   2197a:	401d      	ands	r5, r3
   2197c:	2afe      	cmp	r2, #254	; 0xfe
   2197e:	dc94      	bgt.n	218aa <__aeabi_fmul+0xd2>
   21980:	2401      	movs	r4, #1
   21982:	01a8      	lsls	r0, r5, #6
   21984:	0a40      	lsrs	r0, r0, #9
   21986:	b2d2      	uxtb	r2, r2
   21988:	400c      	ands	r4, r1
   2198a:	e76f      	b.n	2186c <__aeabi_fmul+0x94>
   2198c:	2080      	movs	r0, #128	; 0x80
   2198e:	03c0      	lsls	r0, r0, #15
   21990:	4207      	tst	r7, r0
   21992:	d007      	beq.n	219a4 <__aeabi_fmul+0x1cc>
   21994:	4205      	tst	r5, r0
   21996:	d105      	bne.n	219a4 <__aeabi_fmul+0x1cc>
   21998:	4328      	orrs	r0, r5
   2199a:	0240      	lsls	r0, r0, #9
   2199c:	0a40      	lsrs	r0, r0, #9
   2199e:	4644      	mov	r4, r8
   219a0:	22ff      	movs	r2, #255	; 0xff
   219a2:	e763      	b.n	2186c <__aeabi_fmul+0x94>
   219a4:	4338      	orrs	r0, r7
   219a6:	0240      	lsls	r0, r0, #9
   219a8:	0a40      	lsrs	r0, r0, #9
   219aa:	22ff      	movs	r2, #255	; 0xff
   219ac:	e75e      	b.n	2186c <__aeabi_fmul+0x94>
   219ae:	2401      	movs	r4, #1
   219b0:	1aa3      	subs	r3, r4, r2
   219b2:	2b1b      	cmp	r3, #27
   219b4:	dd05      	ble.n	219c2 <__aeabi_fmul+0x1ea>
   219b6:	400c      	ands	r4, r1
   219b8:	2200      	movs	r2, #0
   219ba:	2000      	movs	r0, #0
   219bc:	e756      	b.n	2186c <__aeabi_fmul+0x94>
   219be:	465e      	mov	r6, fp
   219c0:	e7cb      	b.n	2195a <__aeabi_fmul+0x182>
   219c2:	002a      	movs	r2, r5
   219c4:	2020      	movs	r0, #32
   219c6:	40da      	lsrs	r2, r3
   219c8:	1ac3      	subs	r3, r0, r3
   219ca:	409d      	lsls	r5, r3
   219cc:	002b      	movs	r3, r5
   219ce:	1e5d      	subs	r5, r3, #1
   219d0:	41ab      	sbcs	r3, r5
   219d2:	4313      	orrs	r3, r2
   219d4:	075a      	lsls	r2, r3, #29
   219d6:	d004      	beq.n	219e2 <__aeabi_fmul+0x20a>
   219d8:	220f      	movs	r2, #15
   219da:	401a      	ands	r2, r3
   219dc:	2a04      	cmp	r2, #4
   219de:	d000      	beq.n	219e2 <__aeabi_fmul+0x20a>
   219e0:	3304      	adds	r3, #4
   219e2:	015a      	lsls	r2, r3, #5
   219e4:	d504      	bpl.n	219f0 <__aeabi_fmul+0x218>
   219e6:	2401      	movs	r4, #1
   219e8:	2201      	movs	r2, #1
   219ea:	400c      	ands	r4, r1
   219ec:	2000      	movs	r0, #0
   219ee:	e73d      	b.n	2186c <__aeabi_fmul+0x94>
   219f0:	2401      	movs	r4, #1
   219f2:	019b      	lsls	r3, r3, #6
   219f4:	0a58      	lsrs	r0, r3, #9
   219f6:	400c      	ands	r4, r1
   219f8:	2200      	movs	r2, #0
   219fa:	e737      	b.n	2186c <__aeabi_fmul+0x94>
   219fc:	2080      	movs	r0, #128	; 0x80
   219fe:	2401      	movs	r4, #1
   21a00:	03c0      	lsls	r0, r0, #15
   21a02:	4328      	orrs	r0, r5
   21a04:	0240      	lsls	r0, r0, #9
   21a06:	0a40      	lsrs	r0, r0, #9
   21a08:	400c      	ands	r4, r1
   21a0a:	22ff      	movs	r2, #255	; 0xff
   21a0c:	e72e      	b.n	2186c <__aeabi_fmul+0x94>
   21a0e:	46c0      	nop			; (mov r8, r8)
   21a10:	00029bc0 	.word	0x00029bc0
   21a14:	f7ffffff 	.word	0xf7ffffff

00021a18 <__aeabi_fsub>:
   21a18:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a1a:	464f      	mov	r7, r9
   21a1c:	46d6      	mov	lr, sl
   21a1e:	4646      	mov	r6, r8
   21a20:	0044      	lsls	r4, r0, #1
   21a22:	b5c0      	push	{r6, r7, lr}
   21a24:	0fc2      	lsrs	r2, r0, #31
   21a26:	0247      	lsls	r7, r0, #9
   21a28:	0248      	lsls	r0, r1, #9
   21a2a:	0a40      	lsrs	r0, r0, #9
   21a2c:	4684      	mov	ip, r0
   21a2e:	4666      	mov	r6, ip
   21a30:	0a7b      	lsrs	r3, r7, #9
   21a32:	0048      	lsls	r0, r1, #1
   21a34:	0fc9      	lsrs	r1, r1, #31
   21a36:	469a      	mov	sl, r3
   21a38:	0e24      	lsrs	r4, r4, #24
   21a3a:	0015      	movs	r5, r2
   21a3c:	00db      	lsls	r3, r3, #3
   21a3e:	0e00      	lsrs	r0, r0, #24
   21a40:	4689      	mov	r9, r1
   21a42:	00f6      	lsls	r6, r6, #3
   21a44:	28ff      	cmp	r0, #255	; 0xff
   21a46:	d100      	bne.n	21a4a <__aeabi_fsub+0x32>
   21a48:	e08f      	b.n	21b6a <__aeabi_fsub+0x152>
   21a4a:	2101      	movs	r1, #1
   21a4c:	464f      	mov	r7, r9
   21a4e:	404f      	eors	r7, r1
   21a50:	0039      	movs	r1, r7
   21a52:	4291      	cmp	r1, r2
   21a54:	d066      	beq.n	21b24 <__aeabi_fsub+0x10c>
   21a56:	1a22      	subs	r2, r4, r0
   21a58:	2a00      	cmp	r2, #0
   21a5a:	dc00      	bgt.n	21a5e <__aeabi_fsub+0x46>
   21a5c:	e09d      	b.n	21b9a <__aeabi_fsub+0x182>
   21a5e:	2800      	cmp	r0, #0
   21a60:	d13d      	bne.n	21ade <__aeabi_fsub+0xc6>
   21a62:	2e00      	cmp	r6, #0
   21a64:	d100      	bne.n	21a68 <__aeabi_fsub+0x50>
   21a66:	e08b      	b.n	21b80 <__aeabi_fsub+0x168>
   21a68:	1e51      	subs	r1, r2, #1
   21a6a:	2900      	cmp	r1, #0
   21a6c:	d000      	beq.n	21a70 <__aeabi_fsub+0x58>
   21a6e:	e0b5      	b.n	21bdc <__aeabi_fsub+0x1c4>
   21a70:	2401      	movs	r4, #1
   21a72:	1b9b      	subs	r3, r3, r6
   21a74:	015a      	lsls	r2, r3, #5
   21a76:	d544      	bpl.n	21b02 <__aeabi_fsub+0xea>
   21a78:	019b      	lsls	r3, r3, #6
   21a7a:	099f      	lsrs	r7, r3, #6
   21a7c:	0038      	movs	r0, r7
   21a7e:	f7ff fa8b 	bl	20f98 <__clzsi2>
   21a82:	3805      	subs	r0, #5
   21a84:	4087      	lsls	r7, r0
   21a86:	4284      	cmp	r4, r0
   21a88:	dd00      	ble.n	21a8c <__aeabi_fsub+0x74>
   21a8a:	e096      	b.n	21bba <__aeabi_fsub+0x1a2>
   21a8c:	1b04      	subs	r4, r0, r4
   21a8e:	003a      	movs	r2, r7
   21a90:	2020      	movs	r0, #32
   21a92:	3401      	adds	r4, #1
   21a94:	40e2      	lsrs	r2, r4
   21a96:	1b04      	subs	r4, r0, r4
   21a98:	40a7      	lsls	r7, r4
   21a9a:	003b      	movs	r3, r7
   21a9c:	1e5f      	subs	r7, r3, #1
   21a9e:	41bb      	sbcs	r3, r7
   21aa0:	2400      	movs	r4, #0
   21aa2:	4313      	orrs	r3, r2
   21aa4:	075a      	lsls	r2, r3, #29
   21aa6:	d004      	beq.n	21ab2 <__aeabi_fsub+0x9a>
   21aa8:	220f      	movs	r2, #15
   21aaa:	401a      	ands	r2, r3
   21aac:	2a04      	cmp	r2, #4
   21aae:	d000      	beq.n	21ab2 <__aeabi_fsub+0x9a>
   21ab0:	3304      	adds	r3, #4
   21ab2:	015a      	lsls	r2, r3, #5
   21ab4:	d527      	bpl.n	21b06 <__aeabi_fsub+0xee>
   21ab6:	3401      	adds	r4, #1
   21ab8:	2cff      	cmp	r4, #255	; 0xff
   21aba:	d100      	bne.n	21abe <__aeabi_fsub+0xa6>
   21abc:	e079      	b.n	21bb2 <__aeabi_fsub+0x19a>
   21abe:	2201      	movs	r2, #1
   21ac0:	019b      	lsls	r3, r3, #6
   21ac2:	0a5b      	lsrs	r3, r3, #9
   21ac4:	b2e4      	uxtb	r4, r4
   21ac6:	402a      	ands	r2, r5
   21ac8:	025b      	lsls	r3, r3, #9
   21aca:	05e4      	lsls	r4, r4, #23
   21acc:	0a58      	lsrs	r0, r3, #9
   21ace:	07d2      	lsls	r2, r2, #31
   21ad0:	4320      	orrs	r0, r4
   21ad2:	4310      	orrs	r0, r2
   21ad4:	bc1c      	pop	{r2, r3, r4}
   21ad6:	4690      	mov	r8, r2
   21ad8:	4699      	mov	r9, r3
   21ada:	46a2      	mov	sl, r4
   21adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ade:	2cff      	cmp	r4, #255	; 0xff
   21ae0:	d0e0      	beq.n	21aa4 <__aeabi_fsub+0x8c>
   21ae2:	2180      	movs	r1, #128	; 0x80
   21ae4:	04c9      	lsls	r1, r1, #19
   21ae6:	430e      	orrs	r6, r1
   21ae8:	2a1b      	cmp	r2, #27
   21aea:	dc7b      	bgt.n	21be4 <__aeabi_fsub+0x1cc>
   21aec:	0031      	movs	r1, r6
   21aee:	2020      	movs	r0, #32
   21af0:	40d1      	lsrs	r1, r2
   21af2:	1a82      	subs	r2, r0, r2
   21af4:	4096      	lsls	r6, r2
   21af6:	1e72      	subs	r2, r6, #1
   21af8:	4196      	sbcs	r6, r2
   21afa:	430e      	orrs	r6, r1
   21afc:	1b9b      	subs	r3, r3, r6
   21afe:	015a      	lsls	r2, r3, #5
   21b00:	d4ba      	bmi.n	21a78 <__aeabi_fsub+0x60>
   21b02:	075a      	lsls	r2, r3, #29
   21b04:	d1d0      	bne.n	21aa8 <__aeabi_fsub+0x90>
   21b06:	2201      	movs	r2, #1
   21b08:	08df      	lsrs	r7, r3, #3
   21b0a:	402a      	ands	r2, r5
   21b0c:	2cff      	cmp	r4, #255	; 0xff
   21b0e:	d133      	bne.n	21b78 <__aeabi_fsub+0x160>
   21b10:	2f00      	cmp	r7, #0
   21b12:	d100      	bne.n	21b16 <__aeabi_fsub+0xfe>
   21b14:	e0a8      	b.n	21c68 <__aeabi_fsub+0x250>
   21b16:	2380      	movs	r3, #128	; 0x80
   21b18:	03db      	lsls	r3, r3, #15
   21b1a:	433b      	orrs	r3, r7
   21b1c:	025b      	lsls	r3, r3, #9
   21b1e:	0a5b      	lsrs	r3, r3, #9
   21b20:	24ff      	movs	r4, #255	; 0xff
   21b22:	e7d1      	b.n	21ac8 <__aeabi_fsub+0xb0>
   21b24:	1a21      	subs	r1, r4, r0
   21b26:	2900      	cmp	r1, #0
   21b28:	dd4c      	ble.n	21bc4 <__aeabi_fsub+0x1ac>
   21b2a:	2800      	cmp	r0, #0
   21b2c:	d02a      	beq.n	21b84 <__aeabi_fsub+0x16c>
   21b2e:	2cff      	cmp	r4, #255	; 0xff
   21b30:	d0b8      	beq.n	21aa4 <__aeabi_fsub+0x8c>
   21b32:	2080      	movs	r0, #128	; 0x80
   21b34:	04c0      	lsls	r0, r0, #19
   21b36:	4306      	orrs	r6, r0
   21b38:	291b      	cmp	r1, #27
   21b3a:	dd00      	ble.n	21b3e <__aeabi_fsub+0x126>
   21b3c:	e0af      	b.n	21c9e <__aeabi_fsub+0x286>
   21b3e:	0030      	movs	r0, r6
   21b40:	2720      	movs	r7, #32
   21b42:	40c8      	lsrs	r0, r1
   21b44:	1a79      	subs	r1, r7, r1
   21b46:	408e      	lsls	r6, r1
   21b48:	1e71      	subs	r1, r6, #1
   21b4a:	418e      	sbcs	r6, r1
   21b4c:	4306      	orrs	r6, r0
   21b4e:	199b      	adds	r3, r3, r6
   21b50:	0159      	lsls	r1, r3, #5
   21b52:	d5d6      	bpl.n	21b02 <__aeabi_fsub+0xea>
   21b54:	3401      	adds	r4, #1
   21b56:	2cff      	cmp	r4, #255	; 0xff
   21b58:	d100      	bne.n	21b5c <__aeabi_fsub+0x144>
   21b5a:	e085      	b.n	21c68 <__aeabi_fsub+0x250>
   21b5c:	2201      	movs	r2, #1
   21b5e:	497a      	ldr	r1, [pc, #488]	; (21d48 <__aeabi_fsub+0x330>)
   21b60:	401a      	ands	r2, r3
   21b62:	085b      	lsrs	r3, r3, #1
   21b64:	400b      	ands	r3, r1
   21b66:	4313      	orrs	r3, r2
   21b68:	e79c      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21b6a:	2e00      	cmp	r6, #0
   21b6c:	d000      	beq.n	21b70 <__aeabi_fsub+0x158>
   21b6e:	e770      	b.n	21a52 <__aeabi_fsub+0x3a>
   21b70:	e76b      	b.n	21a4a <__aeabi_fsub+0x32>
   21b72:	1e3b      	subs	r3, r7, #0
   21b74:	d1c5      	bne.n	21b02 <__aeabi_fsub+0xea>
   21b76:	2200      	movs	r2, #0
   21b78:	027b      	lsls	r3, r7, #9
   21b7a:	0a5b      	lsrs	r3, r3, #9
   21b7c:	b2e4      	uxtb	r4, r4
   21b7e:	e7a3      	b.n	21ac8 <__aeabi_fsub+0xb0>
   21b80:	0014      	movs	r4, r2
   21b82:	e78f      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21b84:	2e00      	cmp	r6, #0
   21b86:	d04d      	beq.n	21c24 <__aeabi_fsub+0x20c>
   21b88:	1e48      	subs	r0, r1, #1
   21b8a:	2800      	cmp	r0, #0
   21b8c:	d157      	bne.n	21c3e <__aeabi_fsub+0x226>
   21b8e:	199b      	adds	r3, r3, r6
   21b90:	2401      	movs	r4, #1
   21b92:	015a      	lsls	r2, r3, #5
   21b94:	d5b5      	bpl.n	21b02 <__aeabi_fsub+0xea>
   21b96:	2402      	movs	r4, #2
   21b98:	e7e0      	b.n	21b5c <__aeabi_fsub+0x144>
   21b9a:	2a00      	cmp	r2, #0
   21b9c:	d125      	bne.n	21bea <__aeabi_fsub+0x1d2>
   21b9e:	1c62      	adds	r2, r4, #1
   21ba0:	b2d2      	uxtb	r2, r2
   21ba2:	2a01      	cmp	r2, #1
   21ba4:	dd72      	ble.n	21c8c <__aeabi_fsub+0x274>
   21ba6:	1b9f      	subs	r7, r3, r6
   21ba8:	017a      	lsls	r2, r7, #5
   21baa:	d535      	bpl.n	21c18 <__aeabi_fsub+0x200>
   21bac:	1af7      	subs	r7, r6, r3
   21bae:	000d      	movs	r5, r1
   21bb0:	e764      	b.n	21a7c <__aeabi_fsub+0x64>
   21bb2:	2201      	movs	r2, #1
   21bb4:	2300      	movs	r3, #0
   21bb6:	402a      	ands	r2, r5
   21bb8:	e786      	b.n	21ac8 <__aeabi_fsub+0xb0>
   21bba:	003b      	movs	r3, r7
   21bbc:	4a63      	ldr	r2, [pc, #396]	; (21d4c <__aeabi_fsub+0x334>)
   21bbe:	1a24      	subs	r4, r4, r0
   21bc0:	4013      	ands	r3, r2
   21bc2:	e76f      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21bc4:	2900      	cmp	r1, #0
   21bc6:	d16c      	bne.n	21ca2 <__aeabi_fsub+0x28a>
   21bc8:	1c61      	adds	r1, r4, #1
   21bca:	b2c8      	uxtb	r0, r1
   21bcc:	2801      	cmp	r0, #1
   21bce:	dd4e      	ble.n	21c6e <__aeabi_fsub+0x256>
   21bd0:	29ff      	cmp	r1, #255	; 0xff
   21bd2:	d049      	beq.n	21c68 <__aeabi_fsub+0x250>
   21bd4:	199b      	adds	r3, r3, r6
   21bd6:	085b      	lsrs	r3, r3, #1
   21bd8:	000c      	movs	r4, r1
   21bda:	e763      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21bdc:	2aff      	cmp	r2, #255	; 0xff
   21bde:	d041      	beq.n	21c64 <__aeabi_fsub+0x24c>
   21be0:	000a      	movs	r2, r1
   21be2:	e781      	b.n	21ae8 <__aeabi_fsub+0xd0>
   21be4:	2601      	movs	r6, #1
   21be6:	1b9b      	subs	r3, r3, r6
   21be8:	e789      	b.n	21afe <__aeabi_fsub+0xe6>
   21bea:	2c00      	cmp	r4, #0
   21bec:	d01c      	beq.n	21c28 <__aeabi_fsub+0x210>
   21bee:	28ff      	cmp	r0, #255	; 0xff
   21bf0:	d021      	beq.n	21c36 <__aeabi_fsub+0x21e>
   21bf2:	2480      	movs	r4, #128	; 0x80
   21bf4:	04e4      	lsls	r4, r4, #19
   21bf6:	4252      	negs	r2, r2
   21bf8:	4323      	orrs	r3, r4
   21bfa:	2a1b      	cmp	r2, #27
   21bfc:	dd00      	ble.n	21c00 <__aeabi_fsub+0x1e8>
   21bfe:	e096      	b.n	21d2e <__aeabi_fsub+0x316>
   21c00:	001c      	movs	r4, r3
   21c02:	2520      	movs	r5, #32
   21c04:	40d4      	lsrs	r4, r2
   21c06:	1aaa      	subs	r2, r5, r2
   21c08:	4093      	lsls	r3, r2
   21c0a:	1e5a      	subs	r2, r3, #1
   21c0c:	4193      	sbcs	r3, r2
   21c0e:	4323      	orrs	r3, r4
   21c10:	1af3      	subs	r3, r6, r3
   21c12:	0004      	movs	r4, r0
   21c14:	000d      	movs	r5, r1
   21c16:	e72d      	b.n	21a74 <__aeabi_fsub+0x5c>
   21c18:	2f00      	cmp	r7, #0
   21c1a:	d000      	beq.n	21c1e <__aeabi_fsub+0x206>
   21c1c:	e72e      	b.n	21a7c <__aeabi_fsub+0x64>
   21c1e:	2200      	movs	r2, #0
   21c20:	2400      	movs	r4, #0
   21c22:	e7a9      	b.n	21b78 <__aeabi_fsub+0x160>
   21c24:	000c      	movs	r4, r1
   21c26:	e73d      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21c28:	2b00      	cmp	r3, #0
   21c2a:	d058      	beq.n	21cde <__aeabi_fsub+0x2c6>
   21c2c:	43d2      	mvns	r2, r2
   21c2e:	2a00      	cmp	r2, #0
   21c30:	d0ee      	beq.n	21c10 <__aeabi_fsub+0x1f8>
   21c32:	28ff      	cmp	r0, #255	; 0xff
   21c34:	d1e1      	bne.n	21bfa <__aeabi_fsub+0x1e2>
   21c36:	0033      	movs	r3, r6
   21c38:	24ff      	movs	r4, #255	; 0xff
   21c3a:	000d      	movs	r5, r1
   21c3c:	e732      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21c3e:	29ff      	cmp	r1, #255	; 0xff
   21c40:	d010      	beq.n	21c64 <__aeabi_fsub+0x24c>
   21c42:	0001      	movs	r1, r0
   21c44:	e778      	b.n	21b38 <__aeabi_fsub+0x120>
   21c46:	2b00      	cmp	r3, #0
   21c48:	d06e      	beq.n	21d28 <__aeabi_fsub+0x310>
   21c4a:	24ff      	movs	r4, #255	; 0xff
   21c4c:	2e00      	cmp	r6, #0
   21c4e:	d100      	bne.n	21c52 <__aeabi_fsub+0x23a>
   21c50:	e728      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21c52:	2280      	movs	r2, #128	; 0x80
   21c54:	4651      	mov	r1, sl
   21c56:	03d2      	lsls	r2, r2, #15
   21c58:	4211      	tst	r1, r2
   21c5a:	d003      	beq.n	21c64 <__aeabi_fsub+0x24c>
   21c5c:	4661      	mov	r1, ip
   21c5e:	4211      	tst	r1, r2
   21c60:	d100      	bne.n	21c64 <__aeabi_fsub+0x24c>
   21c62:	0033      	movs	r3, r6
   21c64:	24ff      	movs	r4, #255	; 0xff
   21c66:	e71d      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21c68:	24ff      	movs	r4, #255	; 0xff
   21c6a:	2300      	movs	r3, #0
   21c6c:	e72c      	b.n	21ac8 <__aeabi_fsub+0xb0>
   21c6e:	2c00      	cmp	r4, #0
   21c70:	d1e9      	bne.n	21c46 <__aeabi_fsub+0x22e>
   21c72:	2b00      	cmp	r3, #0
   21c74:	d063      	beq.n	21d3e <__aeabi_fsub+0x326>
   21c76:	2e00      	cmp	r6, #0
   21c78:	d100      	bne.n	21c7c <__aeabi_fsub+0x264>
   21c7a:	e713      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21c7c:	199b      	adds	r3, r3, r6
   21c7e:	015a      	lsls	r2, r3, #5
   21c80:	d400      	bmi.n	21c84 <__aeabi_fsub+0x26c>
   21c82:	e73e      	b.n	21b02 <__aeabi_fsub+0xea>
   21c84:	4a31      	ldr	r2, [pc, #196]	; (21d4c <__aeabi_fsub+0x334>)
   21c86:	000c      	movs	r4, r1
   21c88:	4013      	ands	r3, r2
   21c8a:	e70b      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21c8c:	2c00      	cmp	r4, #0
   21c8e:	d11e      	bne.n	21cce <__aeabi_fsub+0x2b6>
   21c90:	2b00      	cmp	r3, #0
   21c92:	d12f      	bne.n	21cf4 <__aeabi_fsub+0x2dc>
   21c94:	2e00      	cmp	r6, #0
   21c96:	d04f      	beq.n	21d38 <__aeabi_fsub+0x320>
   21c98:	0033      	movs	r3, r6
   21c9a:	000d      	movs	r5, r1
   21c9c:	e702      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21c9e:	2601      	movs	r6, #1
   21ca0:	e755      	b.n	21b4e <__aeabi_fsub+0x136>
   21ca2:	2c00      	cmp	r4, #0
   21ca4:	d11f      	bne.n	21ce6 <__aeabi_fsub+0x2ce>
   21ca6:	2b00      	cmp	r3, #0
   21ca8:	d043      	beq.n	21d32 <__aeabi_fsub+0x31a>
   21caa:	43c9      	mvns	r1, r1
   21cac:	2900      	cmp	r1, #0
   21cae:	d00b      	beq.n	21cc8 <__aeabi_fsub+0x2b0>
   21cb0:	28ff      	cmp	r0, #255	; 0xff
   21cb2:	d039      	beq.n	21d28 <__aeabi_fsub+0x310>
   21cb4:	291b      	cmp	r1, #27
   21cb6:	dc44      	bgt.n	21d42 <__aeabi_fsub+0x32a>
   21cb8:	001c      	movs	r4, r3
   21cba:	2720      	movs	r7, #32
   21cbc:	40cc      	lsrs	r4, r1
   21cbe:	1a79      	subs	r1, r7, r1
   21cc0:	408b      	lsls	r3, r1
   21cc2:	1e59      	subs	r1, r3, #1
   21cc4:	418b      	sbcs	r3, r1
   21cc6:	4323      	orrs	r3, r4
   21cc8:	199b      	adds	r3, r3, r6
   21cca:	0004      	movs	r4, r0
   21ccc:	e740      	b.n	21b50 <__aeabi_fsub+0x138>
   21cce:	2b00      	cmp	r3, #0
   21cd0:	d11a      	bne.n	21d08 <__aeabi_fsub+0x2f0>
   21cd2:	2e00      	cmp	r6, #0
   21cd4:	d124      	bne.n	21d20 <__aeabi_fsub+0x308>
   21cd6:	2780      	movs	r7, #128	; 0x80
   21cd8:	2200      	movs	r2, #0
   21cda:	03ff      	lsls	r7, r7, #15
   21cdc:	e71b      	b.n	21b16 <__aeabi_fsub+0xfe>
   21cde:	0033      	movs	r3, r6
   21ce0:	0004      	movs	r4, r0
   21ce2:	000d      	movs	r5, r1
   21ce4:	e6de      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21ce6:	28ff      	cmp	r0, #255	; 0xff
   21ce8:	d01e      	beq.n	21d28 <__aeabi_fsub+0x310>
   21cea:	2480      	movs	r4, #128	; 0x80
   21cec:	04e4      	lsls	r4, r4, #19
   21cee:	4249      	negs	r1, r1
   21cf0:	4323      	orrs	r3, r4
   21cf2:	e7df      	b.n	21cb4 <__aeabi_fsub+0x29c>
   21cf4:	2e00      	cmp	r6, #0
   21cf6:	d100      	bne.n	21cfa <__aeabi_fsub+0x2e2>
   21cf8:	e6d4      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21cfa:	1b9f      	subs	r7, r3, r6
   21cfc:	017a      	lsls	r2, r7, #5
   21cfe:	d400      	bmi.n	21d02 <__aeabi_fsub+0x2ea>
   21d00:	e737      	b.n	21b72 <__aeabi_fsub+0x15a>
   21d02:	1af3      	subs	r3, r6, r3
   21d04:	000d      	movs	r5, r1
   21d06:	e6cd      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21d08:	24ff      	movs	r4, #255	; 0xff
   21d0a:	2e00      	cmp	r6, #0
   21d0c:	d100      	bne.n	21d10 <__aeabi_fsub+0x2f8>
   21d0e:	e6c9      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21d10:	2280      	movs	r2, #128	; 0x80
   21d12:	4650      	mov	r0, sl
   21d14:	03d2      	lsls	r2, r2, #15
   21d16:	4210      	tst	r0, r2
   21d18:	d0a4      	beq.n	21c64 <__aeabi_fsub+0x24c>
   21d1a:	4660      	mov	r0, ip
   21d1c:	4210      	tst	r0, r2
   21d1e:	d1a1      	bne.n	21c64 <__aeabi_fsub+0x24c>
   21d20:	0033      	movs	r3, r6
   21d22:	000d      	movs	r5, r1
   21d24:	24ff      	movs	r4, #255	; 0xff
   21d26:	e6bd      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21d28:	0033      	movs	r3, r6
   21d2a:	24ff      	movs	r4, #255	; 0xff
   21d2c:	e6ba      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21d2e:	2301      	movs	r3, #1
   21d30:	e76e      	b.n	21c10 <__aeabi_fsub+0x1f8>
   21d32:	0033      	movs	r3, r6
   21d34:	0004      	movs	r4, r0
   21d36:	e6b5      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21d38:	2700      	movs	r7, #0
   21d3a:	2200      	movs	r2, #0
   21d3c:	e71c      	b.n	21b78 <__aeabi_fsub+0x160>
   21d3e:	0033      	movs	r3, r6
   21d40:	e6b0      	b.n	21aa4 <__aeabi_fsub+0x8c>
   21d42:	2301      	movs	r3, #1
   21d44:	e7c0      	b.n	21cc8 <__aeabi_fsub+0x2b0>
   21d46:	46c0      	nop			; (mov r8, r8)
   21d48:	7dffffff 	.word	0x7dffffff
   21d4c:	fbffffff 	.word	0xfbffffff

00021d50 <__aeabi_f2iz>:
   21d50:	0241      	lsls	r1, r0, #9
   21d52:	0043      	lsls	r3, r0, #1
   21d54:	0fc2      	lsrs	r2, r0, #31
   21d56:	0a49      	lsrs	r1, r1, #9
   21d58:	0e1b      	lsrs	r3, r3, #24
   21d5a:	2000      	movs	r0, #0
   21d5c:	2b7e      	cmp	r3, #126	; 0x7e
   21d5e:	dd0d      	ble.n	21d7c <__aeabi_f2iz+0x2c>
   21d60:	2b9d      	cmp	r3, #157	; 0x9d
   21d62:	dc0c      	bgt.n	21d7e <__aeabi_f2iz+0x2e>
   21d64:	2080      	movs	r0, #128	; 0x80
   21d66:	0400      	lsls	r0, r0, #16
   21d68:	4301      	orrs	r1, r0
   21d6a:	2b95      	cmp	r3, #149	; 0x95
   21d6c:	dc0a      	bgt.n	21d84 <__aeabi_f2iz+0x34>
   21d6e:	2096      	movs	r0, #150	; 0x96
   21d70:	1ac3      	subs	r3, r0, r3
   21d72:	40d9      	lsrs	r1, r3
   21d74:	4248      	negs	r0, r1
   21d76:	2a00      	cmp	r2, #0
   21d78:	d100      	bne.n	21d7c <__aeabi_f2iz+0x2c>
   21d7a:	0008      	movs	r0, r1
   21d7c:	4770      	bx	lr
   21d7e:	4b03      	ldr	r3, [pc, #12]	; (21d8c <__aeabi_f2iz+0x3c>)
   21d80:	18d0      	adds	r0, r2, r3
   21d82:	e7fb      	b.n	21d7c <__aeabi_f2iz+0x2c>
   21d84:	3b96      	subs	r3, #150	; 0x96
   21d86:	4099      	lsls	r1, r3
   21d88:	e7f4      	b.n	21d74 <__aeabi_f2iz+0x24>
   21d8a:	46c0      	nop			; (mov r8, r8)
   21d8c:	7fffffff 	.word	0x7fffffff

00021d90 <__aeabi_i2f>:
   21d90:	b570      	push	{r4, r5, r6, lr}
   21d92:	2800      	cmp	r0, #0
   21d94:	d030      	beq.n	21df8 <__aeabi_i2f+0x68>
   21d96:	17c3      	asrs	r3, r0, #31
   21d98:	18c4      	adds	r4, r0, r3
   21d9a:	405c      	eors	r4, r3
   21d9c:	0fc5      	lsrs	r5, r0, #31
   21d9e:	0020      	movs	r0, r4
   21da0:	f7ff f8fa 	bl	20f98 <__clzsi2>
   21da4:	239e      	movs	r3, #158	; 0x9e
   21da6:	1a1b      	subs	r3, r3, r0
   21da8:	2b96      	cmp	r3, #150	; 0x96
   21daa:	dc0d      	bgt.n	21dc8 <__aeabi_i2f+0x38>
   21dac:	2296      	movs	r2, #150	; 0x96
   21dae:	1ad2      	subs	r2, r2, r3
   21db0:	4094      	lsls	r4, r2
   21db2:	002a      	movs	r2, r5
   21db4:	0264      	lsls	r4, r4, #9
   21db6:	0a64      	lsrs	r4, r4, #9
   21db8:	b2db      	uxtb	r3, r3
   21dba:	0264      	lsls	r4, r4, #9
   21dbc:	05db      	lsls	r3, r3, #23
   21dbe:	0a60      	lsrs	r0, r4, #9
   21dc0:	07d2      	lsls	r2, r2, #31
   21dc2:	4318      	orrs	r0, r3
   21dc4:	4310      	orrs	r0, r2
   21dc6:	bd70      	pop	{r4, r5, r6, pc}
   21dc8:	2b99      	cmp	r3, #153	; 0x99
   21dca:	dc19      	bgt.n	21e00 <__aeabi_i2f+0x70>
   21dcc:	2299      	movs	r2, #153	; 0x99
   21dce:	1ad2      	subs	r2, r2, r3
   21dd0:	2a00      	cmp	r2, #0
   21dd2:	dd29      	ble.n	21e28 <__aeabi_i2f+0x98>
   21dd4:	4094      	lsls	r4, r2
   21dd6:	0022      	movs	r2, r4
   21dd8:	4c14      	ldr	r4, [pc, #80]	; (21e2c <__aeabi_i2f+0x9c>)
   21dda:	4014      	ands	r4, r2
   21ddc:	0751      	lsls	r1, r2, #29
   21dde:	d004      	beq.n	21dea <__aeabi_i2f+0x5a>
   21de0:	210f      	movs	r1, #15
   21de2:	400a      	ands	r2, r1
   21de4:	2a04      	cmp	r2, #4
   21de6:	d000      	beq.n	21dea <__aeabi_i2f+0x5a>
   21de8:	3404      	adds	r4, #4
   21dea:	0162      	lsls	r2, r4, #5
   21dec:	d413      	bmi.n	21e16 <__aeabi_i2f+0x86>
   21dee:	01a4      	lsls	r4, r4, #6
   21df0:	0a64      	lsrs	r4, r4, #9
   21df2:	b2db      	uxtb	r3, r3
   21df4:	002a      	movs	r2, r5
   21df6:	e7e0      	b.n	21dba <__aeabi_i2f+0x2a>
   21df8:	2200      	movs	r2, #0
   21dfa:	2300      	movs	r3, #0
   21dfc:	2400      	movs	r4, #0
   21dfe:	e7dc      	b.n	21dba <__aeabi_i2f+0x2a>
   21e00:	2205      	movs	r2, #5
   21e02:	0021      	movs	r1, r4
   21e04:	1a12      	subs	r2, r2, r0
   21e06:	40d1      	lsrs	r1, r2
   21e08:	22b9      	movs	r2, #185	; 0xb9
   21e0a:	1ad2      	subs	r2, r2, r3
   21e0c:	4094      	lsls	r4, r2
   21e0e:	1e62      	subs	r2, r4, #1
   21e10:	4194      	sbcs	r4, r2
   21e12:	430c      	orrs	r4, r1
   21e14:	e7da      	b.n	21dcc <__aeabi_i2f+0x3c>
   21e16:	4b05      	ldr	r3, [pc, #20]	; (21e2c <__aeabi_i2f+0x9c>)
   21e18:	002a      	movs	r2, r5
   21e1a:	401c      	ands	r4, r3
   21e1c:	239f      	movs	r3, #159	; 0x9f
   21e1e:	01a4      	lsls	r4, r4, #6
   21e20:	1a1b      	subs	r3, r3, r0
   21e22:	0a64      	lsrs	r4, r4, #9
   21e24:	b2db      	uxtb	r3, r3
   21e26:	e7c8      	b.n	21dba <__aeabi_i2f+0x2a>
   21e28:	0022      	movs	r2, r4
   21e2a:	e7d5      	b.n	21dd8 <__aeabi_i2f+0x48>
   21e2c:	fbffffff 	.word	0xfbffffff

00021e30 <__aeabi_ui2f>:
   21e30:	b510      	push	{r4, lr}
   21e32:	1e04      	subs	r4, r0, #0
   21e34:	d027      	beq.n	21e86 <__aeabi_ui2f+0x56>
   21e36:	f7ff f8af 	bl	20f98 <__clzsi2>
   21e3a:	239e      	movs	r3, #158	; 0x9e
   21e3c:	1a1b      	subs	r3, r3, r0
   21e3e:	2b96      	cmp	r3, #150	; 0x96
   21e40:	dc0a      	bgt.n	21e58 <__aeabi_ui2f+0x28>
   21e42:	2296      	movs	r2, #150	; 0x96
   21e44:	1ad2      	subs	r2, r2, r3
   21e46:	4094      	lsls	r4, r2
   21e48:	0264      	lsls	r4, r4, #9
   21e4a:	0a64      	lsrs	r4, r4, #9
   21e4c:	b2db      	uxtb	r3, r3
   21e4e:	0264      	lsls	r4, r4, #9
   21e50:	05db      	lsls	r3, r3, #23
   21e52:	0a60      	lsrs	r0, r4, #9
   21e54:	4318      	orrs	r0, r3
   21e56:	bd10      	pop	{r4, pc}
   21e58:	2b99      	cmp	r3, #153	; 0x99
   21e5a:	dc17      	bgt.n	21e8c <__aeabi_ui2f+0x5c>
   21e5c:	2299      	movs	r2, #153	; 0x99
   21e5e:	1ad2      	subs	r2, r2, r3
   21e60:	2a00      	cmp	r2, #0
   21e62:	dd27      	ble.n	21eb4 <__aeabi_ui2f+0x84>
   21e64:	4094      	lsls	r4, r2
   21e66:	0022      	movs	r2, r4
   21e68:	4c13      	ldr	r4, [pc, #76]	; (21eb8 <__aeabi_ui2f+0x88>)
   21e6a:	4014      	ands	r4, r2
   21e6c:	0751      	lsls	r1, r2, #29
   21e6e:	d004      	beq.n	21e7a <__aeabi_ui2f+0x4a>
   21e70:	210f      	movs	r1, #15
   21e72:	400a      	ands	r2, r1
   21e74:	2a04      	cmp	r2, #4
   21e76:	d000      	beq.n	21e7a <__aeabi_ui2f+0x4a>
   21e78:	3404      	adds	r4, #4
   21e7a:	0162      	lsls	r2, r4, #5
   21e7c:	d412      	bmi.n	21ea4 <__aeabi_ui2f+0x74>
   21e7e:	01a4      	lsls	r4, r4, #6
   21e80:	0a64      	lsrs	r4, r4, #9
   21e82:	b2db      	uxtb	r3, r3
   21e84:	e7e3      	b.n	21e4e <__aeabi_ui2f+0x1e>
   21e86:	2300      	movs	r3, #0
   21e88:	2400      	movs	r4, #0
   21e8a:	e7e0      	b.n	21e4e <__aeabi_ui2f+0x1e>
   21e8c:	22b9      	movs	r2, #185	; 0xb9
   21e8e:	0021      	movs	r1, r4
   21e90:	1ad2      	subs	r2, r2, r3
   21e92:	4091      	lsls	r1, r2
   21e94:	000a      	movs	r2, r1
   21e96:	1e51      	subs	r1, r2, #1
   21e98:	418a      	sbcs	r2, r1
   21e9a:	2105      	movs	r1, #5
   21e9c:	1a09      	subs	r1, r1, r0
   21e9e:	40cc      	lsrs	r4, r1
   21ea0:	4314      	orrs	r4, r2
   21ea2:	e7db      	b.n	21e5c <__aeabi_ui2f+0x2c>
   21ea4:	4b04      	ldr	r3, [pc, #16]	; (21eb8 <__aeabi_ui2f+0x88>)
   21ea6:	401c      	ands	r4, r3
   21ea8:	239f      	movs	r3, #159	; 0x9f
   21eaa:	01a4      	lsls	r4, r4, #6
   21eac:	1a1b      	subs	r3, r3, r0
   21eae:	0a64      	lsrs	r4, r4, #9
   21eb0:	b2db      	uxtb	r3, r3
   21eb2:	e7cc      	b.n	21e4e <__aeabi_ui2f+0x1e>
   21eb4:	0022      	movs	r2, r4
   21eb6:	e7d7      	b.n	21e68 <__aeabi_ui2f+0x38>
   21eb8:	fbffffff 	.word	0xfbffffff

00021ebc <__aeabi_dadd>:
   21ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ebe:	4645      	mov	r5, r8
   21ec0:	46de      	mov	lr, fp
   21ec2:	4657      	mov	r7, sl
   21ec4:	464e      	mov	r6, r9
   21ec6:	030c      	lsls	r4, r1, #12
   21ec8:	b5e0      	push	{r5, r6, r7, lr}
   21eca:	004e      	lsls	r6, r1, #1
   21ecc:	0fc9      	lsrs	r1, r1, #31
   21ece:	4688      	mov	r8, r1
   21ed0:	000d      	movs	r5, r1
   21ed2:	0a61      	lsrs	r1, r4, #9
   21ed4:	0f44      	lsrs	r4, r0, #29
   21ed6:	430c      	orrs	r4, r1
   21ed8:	00c7      	lsls	r7, r0, #3
   21eda:	0319      	lsls	r1, r3, #12
   21edc:	0058      	lsls	r0, r3, #1
   21ede:	0fdb      	lsrs	r3, r3, #31
   21ee0:	469b      	mov	fp, r3
   21ee2:	0a4b      	lsrs	r3, r1, #9
   21ee4:	0f51      	lsrs	r1, r2, #29
   21ee6:	430b      	orrs	r3, r1
   21ee8:	0d76      	lsrs	r6, r6, #21
   21eea:	0d40      	lsrs	r0, r0, #21
   21eec:	0019      	movs	r1, r3
   21eee:	00d2      	lsls	r2, r2, #3
   21ef0:	45d8      	cmp	r8, fp
   21ef2:	d100      	bne.n	21ef6 <__aeabi_dadd+0x3a>
   21ef4:	e0ae      	b.n	22054 <__aeabi_dadd+0x198>
   21ef6:	1a35      	subs	r5, r6, r0
   21ef8:	2d00      	cmp	r5, #0
   21efa:	dc00      	bgt.n	21efe <__aeabi_dadd+0x42>
   21efc:	e0f6      	b.n	220ec <__aeabi_dadd+0x230>
   21efe:	2800      	cmp	r0, #0
   21f00:	d10f      	bne.n	21f22 <__aeabi_dadd+0x66>
   21f02:	4313      	orrs	r3, r2
   21f04:	d100      	bne.n	21f08 <__aeabi_dadd+0x4c>
   21f06:	e0db      	b.n	220c0 <__aeabi_dadd+0x204>
   21f08:	1e6b      	subs	r3, r5, #1
   21f0a:	2b00      	cmp	r3, #0
   21f0c:	d000      	beq.n	21f10 <__aeabi_dadd+0x54>
   21f0e:	e137      	b.n	22180 <__aeabi_dadd+0x2c4>
   21f10:	1aba      	subs	r2, r7, r2
   21f12:	4297      	cmp	r7, r2
   21f14:	41bf      	sbcs	r7, r7
   21f16:	1a64      	subs	r4, r4, r1
   21f18:	427f      	negs	r7, r7
   21f1a:	1be4      	subs	r4, r4, r7
   21f1c:	2601      	movs	r6, #1
   21f1e:	0017      	movs	r7, r2
   21f20:	e024      	b.n	21f6c <__aeabi_dadd+0xb0>
   21f22:	4bc6      	ldr	r3, [pc, #792]	; (2223c <__aeabi_dadd+0x380>)
   21f24:	429e      	cmp	r6, r3
   21f26:	d04d      	beq.n	21fc4 <__aeabi_dadd+0x108>
   21f28:	2380      	movs	r3, #128	; 0x80
   21f2a:	041b      	lsls	r3, r3, #16
   21f2c:	4319      	orrs	r1, r3
   21f2e:	2d38      	cmp	r5, #56	; 0x38
   21f30:	dd00      	ble.n	21f34 <__aeabi_dadd+0x78>
   21f32:	e107      	b.n	22144 <__aeabi_dadd+0x288>
   21f34:	2d1f      	cmp	r5, #31
   21f36:	dd00      	ble.n	21f3a <__aeabi_dadd+0x7e>
   21f38:	e138      	b.n	221ac <__aeabi_dadd+0x2f0>
   21f3a:	2020      	movs	r0, #32
   21f3c:	1b43      	subs	r3, r0, r5
   21f3e:	469a      	mov	sl, r3
   21f40:	000b      	movs	r3, r1
   21f42:	4650      	mov	r0, sl
   21f44:	4083      	lsls	r3, r0
   21f46:	4699      	mov	r9, r3
   21f48:	0013      	movs	r3, r2
   21f4a:	4648      	mov	r0, r9
   21f4c:	40eb      	lsrs	r3, r5
   21f4e:	4318      	orrs	r0, r3
   21f50:	0003      	movs	r3, r0
   21f52:	4650      	mov	r0, sl
   21f54:	4082      	lsls	r2, r0
   21f56:	1e50      	subs	r0, r2, #1
   21f58:	4182      	sbcs	r2, r0
   21f5a:	40e9      	lsrs	r1, r5
   21f5c:	431a      	orrs	r2, r3
   21f5e:	1aba      	subs	r2, r7, r2
   21f60:	1a61      	subs	r1, r4, r1
   21f62:	4297      	cmp	r7, r2
   21f64:	41a4      	sbcs	r4, r4
   21f66:	0017      	movs	r7, r2
   21f68:	4264      	negs	r4, r4
   21f6a:	1b0c      	subs	r4, r1, r4
   21f6c:	0223      	lsls	r3, r4, #8
   21f6e:	d562      	bpl.n	22036 <__aeabi_dadd+0x17a>
   21f70:	0264      	lsls	r4, r4, #9
   21f72:	0a65      	lsrs	r5, r4, #9
   21f74:	2d00      	cmp	r5, #0
   21f76:	d100      	bne.n	21f7a <__aeabi_dadd+0xbe>
   21f78:	e0df      	b.n	2213a <__aeabi_dadd+0x27e>
   21f7a:	0028      	movs	r0, r5
   21f7c:	f7ff f80c 	bl	20f98 <__clzsi2>
   21f80:	0003      	movs	r3, r0
   21f82:	3b08      	subs	r3, #8
   21f84:	2b1f      	cmp	r3, #31
   21f86:	dd00      	ble.n	21f8a <__aeabi_dadd+0xce>
   21f88:	e0d2      	b.n	22130 <__aeabi_dadd+0x274>
   21f8a:	2220      	movs	r2, #32
   21f8c:	003c      	movs	r4, r7
   21f8e:	1ad2      	subs	r2, r2, r3
   21f90:	409d      	lsls	r5, r3
   21f92:	40d4      	lsrs	r4, r2
   21f94:	409f      	lsls	r7, r3
   21f96:	4325      	orrs	r5, r4
   21f98:	429e      	cmp	r6, r3
   21f9a:	dd00      	ble.n	21f9e <__aeabi_dadd+0xe2>
   21f9c:	e0c4      	b.n	22128 <__aeabi_dadd+0x26c>
   21f9e:	1b9e      	subs	r6, r3, r6
   21fa0:	1c73      	adds	r3, r6, #1
   21fa2:	2b1f      	cmp	r3, #31
   21fa4:	dd00      	ble.n	21fa8 <__aeabi_dadd+0xec>
   21fa6:	e0f1      	b.n	2218c <__aeabi_dadd+0x2d0>
   21fa8:	2220      	movs	r2, #32
   21faa:	0038      	movs	r0, r7
   21fac:	0029      	movs	r1, r5
   21fae:	1ad2      	subs	r2, r2, r3
   21fb0:	40d8      	lsrs	r0, r3
   21fb2:	4091      	lsls	r1, r2
   21fb4:	4097      	lsls	r7, r2
   21fb6:	002c      	movs	r4, r5
   21fb8:	4301      	orrs	r1, r0
   21fba:	1e78      	subs	r0, r7, #1
   21fbc:	4187      	sbcs	r7, r0
   21fbe:	40dc      	lsrs	r4, r3
   21fc0:	2600      	movs	r6, #0
   21fc2:	430f      	orrs	r7, r1
   21fc4:	077b      	lsls	r3, r7, #29
   21fc6:	d009      	beq.n	21fdc <__aeabi_dadd+0x120>
   21fc8:	230f      	movs	r3, #15
   21fca:	403b      	ands	r3, r7
   21fcc:	2b04      	cmp	r3, #4
   21fce:	d005      	beq.n	21fdc <__aeabi_dadd+0x120>
   21fd0:	1d3b      	adds	r3, r7, #4
   21fd2:	42bb      	cmp	r3, r7
   21fd4:	41bf      	sbcs	r7, r7
   21fd6:	427f      	negs	r7, r7
   21fd8:	19e4      	adds	r4, r4, r7
   21fda:	001f      	movs	r7, r3
   21fdc:	0223      	lsls	r3, r4, #8
   21fde:	d52c      	bpl.n	2203a <__aeabi_dadd+0x17e>
   21fe0:	4b96      	ldr	r3, [pc, #600]	; (2223c <__aeabi_dadd+0x380>)
   21fe2:	3601      	adds	r6, #1
   21fe4:	429e      	cmp	r6, r3
   21fe6:	d100      	bne.n	21fea <__aeabi_dadd+0x12e>
   21fe8:	e09a      	b.n	22120 <__aeabi_dadd+0x264>
   21fea:	4645      	mov	r5, r8
   21fec:	4b94      	ldr	r3, [pc, #592]	; (22240 <__aeabi_dadd+0x384>)
   21fee:	08ff      	lsrs	r7, r7, #3
   21ff0:	401c      	ands	r4, r3
   21ff2:	0760      	lsls	r0, r4, #29
   21ff4:	0576      	lsls	r6, r6, #21
   21ff6:	0264      	lsls	r4, r4, #9
   21ff8:	4307      	orrs	r7, r0
   21ffa:	0b24      	lsrs	r4, r4, #12
   21ffc:	0d76      	lsrs	r6, r6, #21
   21ffe:	2100      	movs	r1, #0
   22000:	0324      	lsls	r4, r4, #12
   22002:	0b23      	lsrs	r3, r4, #12
   22004:	0d0c      	lsrs	r4, r1, #20
   22006:	4a8f      	ldr	r2, [pc, #572]	; (22244 <__aeabi_dadd+0x388>)
   22008:	0524      	lsls	r4, r4, #20
   2200a:	431c      	orrs	r4, r3
   2200c:	4014      	ands	r4, r2
   2200e:	0533      	lsls	r3, r6, #20
   22010:	4323      	orrs	r3, r4
   22012:	005b      	lsls	r3, r3, #1
   22014:	07ed      	lsls	r5, r5, #31
   22016:	085b      	lsrs	r3, r3, #1
   22018:	432b      	orrs	r3, r5
   2201a:	0038      	movs	r0, r7
   2201c:	0019      	movs	r1, r3
   2201e:	bc3c      	pop	{r2, r3, r4, r5}
   22020:	4690      	mov	r8, r2
   22022:	4699      	mov	r9, r3
   22024:	46a2      	mov	sl, r4
   22026:	46ab      	mov	fp, r5
   22028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2202a:	4664      	mov	r4, ip
   2202c:	4304      	orrs	r4, r0
   2202e:	d100      	bne.n	22032 <__aeabi_dadd+0x176>
   22030:	e211      	b.n	22456 <__aeabi_dadd+0x59a>
   22032:	0004      	movs	r4, r0
   22034:	4667      	mov	r7, ip
   22036:	077b      	lsls	r3, r7, #29
   22038:	d1c6      	bne.n	21fc8 <__aeabi_dadd+0x10c>
   2203a:	4645      	mov	r5, r8
   2203c:	0760      	lsls	r0, r4, #29
   2203e:	08ff      	lsrs	r7, r7, #3
   22040:	4307      	orrs	r7, r0
   22042:	08e4      	lsrs	r4, r4, #3
   22044:	4b7d      	ldr	r3, [pc, #500]	; (2223c <__aeabi_dadd+0x380>)
   22046:	429e      	cmp	r6, r3
   22048:	d030      	beq.n	220ac <__aeabi_dadd+0x1f0>
   2204a:	0324      	lsls	r4, r4, #12
   2204c:	0576      	lsls	r6, r6, #21
   2204e:	0b24      	lsrs	r4, r4, #12
   22050:	0d76      	lsrs	r6, r6, #21
   22052:	e7d4      	b.n	21ffe <__aeabi_dadd+0x142>
   22054:	1a33      	subs	r3, r6, r0
   22056:	469a      	mov	sl, r3
   22058:	2b00      	cmp	r3, #0
   2205a:	dd78      	ble.n	2214e <__aeabi_dadd+0x292>
   2205c:	2800      	cmp	r0, #0
   2205e:	d031      	beq.n	220c4 <__aeabi_dadd+0x208>
   22060:	4876      	ldr	r0, [pc, #472]	; (2223c <__aeabi_dadd+0x380>)
   22062:	4286      	cmp	r6, r0
   22064:	d0ae      	beq.n	21fc4 <__aeabi_dadd+0x108>
   22066:	2080      	movs	r0, #128	; 0x80
   22068:	0400      	lsls	r0, r0, #16
   2206a:	4301      	orrs	r1, r0
   2206c:	4653      	mov	r3, sl
   2206e:	2b38      	cmp	r3, #56	; 0x38
   22070:	dc00      	bgt.n	22074 <__aeabi_dadd+0x1b8>
   22072:	e0e9      	b.n	22248 <__aeabi_dadd+0x38c>
   22074:	430a      	orrs	r2, r1
   22076:	1e51      	subs	r1, r2, #1
   22078:	418a      	sbcs	r2, r1
   2207a:	2100      	movs	r1, #0
   2207c:	19d2      	adds	r2, r2, r7
   2207e:	42ba      	cmp	r2, r7
   22080:	41bf      	sbcs	r7, r7
   22082:	1909      	adds	r1, r1, r4
   22084:	427c      	negs	r4, r7
   22086:	0017      	movs	r7, r2
   22088:	190c      	adds	r4, r1, r4
   2208a:	0223      	lsls	r3, r4, #8
   2208c:	d5d3      	bpl.n	22036 <__aeabi_dadd+0x17a>
   2208e:	4b6b      	ldr	r3, [pc, #428]	; (2223c <__aeabi_dadd+0x380>)
   22090:	3601      	adds	r6, #1
   22092:	429e      	cmp	r6, r3
   22094:	d100      	bne.n	22098 <__aeabi_dadd+0x1dc>
   22096:	e13a      	b.n	2230e <__aeabi_dadd+0x452>
   22098:	2001      	movs	r0, #1
   2209a:	4b69      	ldr	r3, [pc, #420]	; (22240 <__aeabi_dadd+0x384>)
   2209c:	401c      	ands	r4, r3
   2209e:	087b      	lsrs	r3, r7, #1
   220a0:	4007      	ands	r7, r0
   220a2:	431f      	orrs	r7, r3
   220a4:	07e0      	lsls	r0, r4, #31
   220a6:	4307      	orrs	r7, r0
   220a8:	0864      	lsrs	r4, r4, #1
   220aa:	e78b      	b.n	21fc4 <__aeabi_dadd+0x108>
   220ac:	0023      	movs	r3, r4
   220ae:	433b      	orrs	r3, r7
   220b0:	d100      	bne.n	220b4 <__aeabi_dadd+0x1f8>
   220b2:	e1cb      	b.n	2244c <__aeabi_dadd+0x590>
   220b4:	2280      	movs	r2, #128	; 0x80
   220b6:	0312      	lsls	r2, r2, #12
   220b8:	4314      	orrs	r4, r2
   220ba:	0324      	lsls	r4, r4, #12
   220bc:	0b24      	lsrs	r4, r4, #12
   220be:	e79e      	b.n	21ffe <__aeabi_dadd+0x142>
   220c0:	002e      	movs	r6, r5
   220c2:	e77f      	b.n	21fc4 <__aeabi_dadd+0x108>
   220c4:	0008      	movs	r0, r1
   220c6:	4310      	orrs	r0, r2
   220c8:	d100      	bne.n	220cc <__aeabi_dadd+0x210>
   220ca:	e0b4      	b.n	22236 <__aeabi_dadd+0x37a>
   220cc:	1e58      	subs	r0, r3, #1
   220ce:	2800      	cmp	r0, #0
   220d0:	d000      	beq.n	220d4 <__aeabi_dadd+0x218>
   220d2:	e0de      	b.n	22292 <__aeabi_dadd+0x3d6>
   220d4:	18ba      	adds	r2, r7, r2
   220d6:	42ba      	cmp	r2, r7
   220d8:	419b      	sbcs	r3, r3
   220da:	1864      	adds	r4, r4, r1
   220dc:	425b      	negs	r3, r3
   220de:	18e4      	adds	r4, r4, r3
   220e0:	0017      	movs	r7, r2
   220e2:	2601      	movs	r6, #1
   220e4:	0223      	lsls	r3, r4, #8
   220e6:	d5a6      	bpl.n	22036 <__aeabi_dadd+0x17a>
   220e8:	2602      	movs	r6, #2
   220ea:	e7d5      	b.n	22098 <__aeabi_dadd+0x1dc>
   220ec:	2d00      	cmp	r5, #0
   220ee:	d16e      	bne.n	221ce <__aeabi_dadd+0x312>
   220f0:	1c70      	adds	r0, r6, #1
   220f2:	0540      	lsls	r0, r0, #21
   220f4:	0d40      	lsrs	r0, r0, #21
   220f6:	2801      	cmp	r0, #1
   220f8:	dc00      	bgt.n	220fc <__aeabi_dadd+0x240>
   220fa:	e0f9      	b.n	222f0 <__aeabi_dadd+0x434>
   220fc:	1ab8      	subs	r0, r7, r2
   220fe:	4684      	mov	ip, r0
   22100:	4287      	cmp	r7, r0
   22102:	4180      	sbcs	r0, r0
   22104:	1ae5      	subs	r5, r4, r3
   22106:	4240      	negs	r0, r0
   22108:	1a2d      	subs	r5, r5, r0
   2210a:	0228      	lsls	r0, r5, #8
   2210c:	d400      	bmi.n	22110 <__aeabi_dadd+0x254>
   2210e:	e089      	b.n	22224 <__aeabi_dadd+0x368>
   22110:	1bd7      	subs	r7, r2, r7
   22112:	42ba      	cmp	r2, r7
   22114:	4192      	sbcs	r2, r2
   22116:	1b1c      	subs	r4, r3, r4
   22118:	4252      	negs	r2, r2
   2211a:	1aa5      	subs	r5, r4, r2
   2211c:	46d8      	mov	r8, fp
   2211e:	e729      	b.n	21f74 <__aeabi_dadd+0xb8>
   22120:	4645      	mov	r5, r8
   22122:	2400      	movs	r4, #0
   22124:	2700      	movs	r7, #0
   22126:	e76a      	b.n	21ffe <__aeabi_dadd+0x142>
   22128:	4c45      	ldr	r4, [pc, #276]	; (22240 <__aeabi_dadd+0x384>)
   2212a:	1af6      	subs	r6, r6, r3
   2212c:	402c      	ands	r4, r5
   2212e:	e749      	b.n	21fc4 <__aeabi_dadd+0x108>
   22130:	003d      	movs	r5, r7
   22132:	3828      	subs	r0, #40	; 0x28
   22134:	4085      	lsls	r5, r0
   22136:	2700      	movs	r7, #0
   22138:	e72e      	b.n	21f98 <__aeabi_dadd+0xdc>
   2213a:	0038      	movs	r0, r7
   2213c:	f7fe ff2c 	bl	20f98 <__clzsi2>
   22140:	3020      	adds	r0, #32
   22142:	e71d      	b.n	21f80 <__aeabi_dadd+0xc4>
   22144:	430a      	orrs	r2, r1
   22146:	1e51      	subs	r1, r2, #1
   22148:	418a      	sbcs	r2, r1
   2214a:	2100      	movs	r1, #0
   2214c:	e707      	b.n	21f5e <__aeabi_dadd+0xa2>
   2214e:	2b00      	cmp	r3, #0
   22150:	d000      	beq.n	22154 <__aeabi_dadd+0x298>
   22152:	e0f3      	b.n	2233c <__aeabi_dadd+0x480>
   22154:	1c70      	adds	r0, r6, #1
   22156:	0543      	lsls	r3, r0, #21
   22158:	0d5b      	lsrs	r3, r3, #21
   2215a:	2b01      	cmp	r3, #1
   2215c:	dc00      	bgt.n	22160 <__aeabi_dadd+0x2a4>
   2215e:	e0ad      	b.n	222bc <__aeabi_dadd+0x400>
   22160:	4b36      	ldr	r3, [pc, #216]	; (2223c <__aeabi_dadd+0x380>)
   22162:	4298      	cmp	r0, r3
   22164:	d100      	bne.n	22168 <__aeabi_dadd+0x2ac>
   22166:	e0d1      	b.n	2230c <__aeabi_dadd+0x450>
   22168:	18ba      	adds	r2, r7, r2
   2216a:	42ba      	cmp	r2, r7
   2216c:	41bf      	sbcs	r7, r7
   2216e:	1864      	adds	r4, r4, r1
   22170:	427f      	negs	r7, r7
   22172:	19e4      	adds	r4, r4, r7
   22174:	07e7      	lsls	r7, r4, #31
   22176:	0852      	lsrs	r2, r2, #1
   22178:	4317      	orrs	r7, r2
   2217a:	0864      	lsrs	r4, r4, #1
   2217c:	0006      	movs	r6, r0
   2217e:	e721      	b.n	21fc4 <__aeabi_dadd+0x108>
   22180:	482e      	ldr	r0, [pc, #184]	; (2223c <__aeabi_dadd+0x380>)
   22182:	4285      	cmp	r5, r0
   22184:	d100      	bne.n	22188 <__aeabi_dadd+0x2cc>
   22186:	e093      	b.n	222b0 <__aeabi_dadd+0x3f4>
   22188:	001d      	movs	r5, r3
   2218a:	e6d0      	b.n	21f2e <__aeabi_dadd+0x72>
   2218c:	0029      	movs	r1, r5
   2218e:	3e1f      	subs	r6, #31
   22190:	40f1      	lsrs	r1, r6
   22192:	2b20      	cmp	r3, #32
   22194:	d100      	bne.n	22198 <__aeabi_dadd+0x2dc>
   22196:	e08d      	b.n	222b4 <__aeabi_dadd+0x3f8>
   22198:	2240      	movs	r2, #64	; 0x40
   2219a:	1ad3      	subs	r3, r2, r3
   2219c:	409d      	lsls	r5, r3
   2219e:	432f      	orrs	r7, r5
   221a0:	1e7d      	subs	r5, r7, #1
   221a2:	41af      	sbcs	r7, r5
   221a4:	2400      	movs	r4, #0
   221a6:	430f      	orrs	r7, r1
   221a8:	2600      	movs	r6, #0
   221aa:	e744      	b.n	22036 <__aeabi_dadd+0x17a>
   221ac:	002b      	movs	r3, r5
   221ae:	0008      	movs	r0, r1
   221b0:	3b20      	subs	r3, #32
   221b2:	40d8      	lsrs	r0, r3
   221b4:	0003      	movs	r3, r0
   221b6:	2d20      	cmp	r5, #32
   221b8:	d100      	bne.n	221bc <__aeabi_dadd+0x300>
   221ba:	e07d      	b.n	222b8 <__aeabi_dadd+0x3fc>
   221bc:	2040      	movs	r0, #64	; 0x40
   221be:	1b45      	subs	r5, r0, r5
   221c0:	40a9      	lsls	r1, r5
   221c2:	430a      	orrs	r2, r1
   221c4:	1e51      	subs	r1, r2, #1
   221c6:	418a      	sbcs	r2, r1
   221c8:	2100      	movs	r1, #0
   221ca:	431a      	orrs	r2, r3
   221cc:	e6c7      	b.n	21f5e <__aeabi_dadd+0xa2>
   221ce:	2e00      	cmp	r6, #0
   221d0:	d050      	beq.n	22274 <__aeabi_dadd+0x3b8>
   221d2:	4e1a      	ldr	r6, [pc, #104]	; (2223c <__aeabi_dadd+0x380>)
   221d4:	42b0      	cmp	r0, r6
   221d6:	d057      	beq.n	22288 <__aeabi_dadd+0x3cc>
   221d8:	2680      	movs	r6, #128	; 0x80
   221da:	426b      	negs	r3, r5
   221dc:	4699      	mov	r9, r3
   221de:	0436      	lsls	r6, r6, #16
   221e0:	4334      	orrs	r4, r6
   221e2:	464b      	mov	r3, r9
   221e4:	2b38      	cmp	r3, #56	; 0x38
   221e6:	dd00      	ble.n	221ea <__aeabi_dadd+0x32e>
   221e8:	e0d6      	b.n	22398 <__aeabi_dadd+0x4dc>
   221ea:	2b1f      	cmp	r3, #31
   221ec:	dd00      	ble.n	221f0 <__aeabi_dadd+0x334>
   221ee:	e135      	b.n	2245c <__aeabi_dadd+0x5a0>
   221f0:	2620      	movs	r6, #32
   221f2:	1af5      	subs	r5, r6, r3
   221f4:	0026      	movs	r6, r4
   221f6:	40ae      	lsls	r6, r5
   221f8:	46b2      	mov	sl, r6
   221fa:	003e      	movs	r6, r7
   221fc:	40de      	lsrs	r6, r3
   221fe:	46ac      	mov	ip, r5
   22200:	0035      	movs	r5, r6
   22202:	4656      	mov	r6, sl
   22204:	432e      	orrs	r6, r5
   22206:	4665      	mov	r5, ip
   22208:	40af      	lsls	r7, r5
   2220a:	1e7d      	subs	r5, r7, #1
   2220c:	41af      	sbcs	r7, r5
   2220e:	40dc      	lsrs	r4, r3
   22210:	4337      	orrs	r7, r6
   22212:	1bd7      	subs	r7, r2, r7
   22214:	42ba      	cmp	r2, r7
   22216:	4192      	sbcs	r2, r2
   22218:	1b0c      	subs	r4, r1, r4
   2221a:	4252      	negs	r2, r2
   2221c:	1aa4      	subs	r4, r4, r2
   2221e:	0006      	movs	r6, r0
   22220:	46d8      	mov	r8, fp
   22222:	e6a3      	b.n	21f6c <__aeabi_dadd+0xb0>
   22224:	4664      	mov	r4, ip
   22226:	4667      	mov	r7, ip
   22228:	432c      	orrs	r4, r5
   2222a:	d000      	beq.n	2222e <__aeabi_dadd+0x372>
   2222c:	e6a2      	b.n	21f74 <__aeabi_dadd+0xb8>
   2222e:	2500      	movs	r5, #0
   22230:	2600      	movs	r6, #0
   22232:	2700      	movs	r7, #0
   22234:	e706      	b.n	22044 <__aeabi_dadd+0x188>
   22236:	001e      	movs	r6, r3
   22238:	e6c4      	b.n	21fc4 <__aeabi_dadd+0x108>
   2223a:	46c0      	nop			; (mov r8, r8)
   2223c:	000007ff 	.word	0x000007ff
   22240:	ff7fffff 	.word	0xff7fffff
   22244:	800fffff 	.word	0x800fffff
   22248:	2b1f      	cmp	r3, #31
   2224a:	dc63      	bgt.n	22314 <__aeabi_dadd+0x458>
   2224c:	2020      	movs	r0, #32
   2224e:	1ac3      	subs	r3, r0, r3
   22250:	0008      	movs	r0, r1
   22252:	4098      	lsls	r0, r3
   22254:	469c      	mov	ip, r3
   22256:	4683      	mov	fp, r0
   22258:	4653      	mov	r3, sl
   2225a:	0010      	movs	r0, r2
   2225c:	40d8      	lsrs	r0, r3
   2225e:	0003      	movs	r3, r0
   22260:	4658      	mov	r0, fp
   22262:	4318      	orrs	r0, r3
   22264:	4663      	mov	r3, ip
   22266:	409a      	lsls	r2, r3
   22268:	1e53      	subs	r3, r2, #1
   2226a:	419a      	sbcs	r2, r3
   2226c:	4653      	mov	r3, sl
   2226e:	4302      	orrs	r2, r0
   22270:	40d9      	lsrs	r1, r3
   22272:	e703      	b.n	2207c <__aeabi_dadd+0x1c0>
   22274:	0026      	movs	r6, r4
   22276:	433e      	orrs	r6, r7
   22278:	d006      	beq.n	22288 <__aeabi_dadd+0x3cc>
   2227a:	43eb      	mvns	r3, r5
   2227c:	4699      	mov	r9, r3
   2227e:	2b00      	cmp	r3, #0
   22280:	d0c7      	beq.n	22212 <__aeabi_dadd+0x356>
   22282:	4e94      	ldr	r6, [pc, #592]	; (224d4 <__aeabi_dadd+0x618>)
   22284:	42b0      	cmp	r0, r6
   22286:	d1ac      	bne.n	221e2 <__aeabi_dadd+0x326>
   22288:	000c      	movs	r4, r1
   2228a:	0017      	movs	r7, r2
   2228c:	0006      	movs	r6, r0
   2228e:	46d8      	mov	r8, fp
   22290:	e698      	b.n	21fc4 <__aeabi_dadd+0x108>
   22292:	4b90      	ldr	r3, [pc, #576]	; (224d4 <__aeabi_dadd+0x618>)
   22294:	459a      	cmp	sl, r3
   22296:	d00b      	beq.n	222b0 <__aeabi_dadd+0x3f4>
   22298:	4682      	mov	sl, r0
   2229a:	e6e7      	b.n	2206c <__aeabi_dadd+0x1b0>
   2229c:	2800      	cmp	r0, #0
   2229e:	d000      	beq.n	222a2 <__aeabi_dadd+0x3e6>
   222a0:	e09e      	b.n	223e0 <__aeabi_dadd+0x524>
   222a2:	0018      	movs	r0, r3
   222a4:	4310      	orrs	r0, r2
   222a6:	d100      	bne.n	222aa <__aeabi_dadd+0x3ee>
   222a8:	e0e9      	b.n	2247e <__aeabi_dadd+0x5c2>
   222aa:	001c      	movs	r4, r3
   222ac:	0017      	movs	r7, r2
   222ae:	46d8      	mov	r8, fp
   222b0:	4e88      	ldr	r6, [pc, #544]	; (224d4 <__aeabi_dadd+0x618>)
   222b2:	e687      	b.n	21fc4 <__aeabi_dadd+0x108>
   222b4:	2500      	movs	r5, #0
   222b6:	e772      	b.n	2219e <__aeabi_dadd+0x2e2>
   222b8:	2100      	movs	r1, #0
   222ba:	e782      	b.n	221c2 <__aeabi_dadd+0x306>
   222bc:	0023      	movs	r3, r4
   222be:	433b      	orrs	r3, r7
   222c0:	2e00      	cmp	r6, #0
   222c2:	d000      	beq.n	222c6 <__aeabi_dadd+0x40a>
   222c4:	e0ab      	b.n	2241e <__aeabi_dadd+0x562>
   222c6:	2b00      	cmp	r3, #0
   222c8:	d100      	bne.n	222cc <__aeabi_dadd+0x410>
   222ca:	e0e7      	b.n	2249c <__aeabi_dadd+0x5e0>
   222cc:	000b      	movs	r3, r1
   222ce:	4313      	orrs	r3, r2
   222d0:	d100      	bne.n	222d4 <__aeabi_dadd+0x418>
   222d2:	e677      	b.n	21fc4 <__aeabi_dadd+0x108>
   222d4:	18ba      	adds	r2, r7, r2
   222d6:	42ba      	cmp	r2, r7
   222d8:	41bf      	sbcs	r7, r7
   222da:	1864      	adds	r4, r4, r1
   222dc:	427f      	negs	r7, r7
   222de:	19e4      	adds	r4, r4, r7
   222e0:	0223      	lsls	r3, r4, #8
   222e2:	d400      	bmi.n	222e6 <__aeabi_dadd+0x42a>
   222e4:	e0f2      	b.n	224cc <__aeabi_dadd+0x610>
   222e6:	4b7c      	ldr	r3, [pc, #496]	; (224d8 <__aeabi_dadd+0x61c>)
   222e8:	0017      	movs	r7, r2
   222ea:	401c      	ands	r4, r3
   222ec:	0006      	movs	r6, r0
   222ee:	e669      	b.n	21fc4 <__aeabi_dadd+0x108>
   222f0:	0020      	movs	r0, r4
   222f2:	4338      	orrs	r0, r7
   222f4:	2e00      	cmp	r6, #0
   222f6:	d1d1      	bne.n	2229c <__aeabi_dadd+0x3e0>
   222f8:	2800      	cmp	r0, #0
   222fa:	d15b      	bne.n	223b4 <__aeabi_dadd+0x4f8>
   222fc:	001c      	movs	r4, r3
   222fe:	4314      	orrs	r4, r2
   22300:	d100      	bne.n	22304 <__aeabi_dadd+0x448>
   22302:	e0a8      	b.n	22456 <__aeabi_dadd+0x59a>
   22304:	001c      	movs	r4, r3
   22306:	0017      	movs	r7, r2
   22308:	46d8      	mov	r8, fp
   2230a:	e65b      	b.n	21fc4 <__aeabi_dadd+0x108>
   2230c:	0006      	movs	r6, r0
   2230e:	2400      	movs	r4, #0
   22310:	2700      	movs	r7, #0
   22312:	e697      	b.n	22044 <__aeabi_dadd+0x188>
   22314:	4650      	mov	r0, sl
   22316:	000b      	movs	r3, r1
   22318:	3820      	subs	r0, #32
   2231a:	40c3      	lsrs	r3, r0
   2231c:	4699      	mov	r9, r3
   2231e:	4653      	mov	r3, sl
   22320:	2b20      	cmp	r3, #32
   22322:	d100      	bne.n	22326 <__aeabi_dadd+0x46a>
   22324:	e095      	b.n	22452 <__aeabi_dadd+0x596>
   22326:	2340      	movs	r3, #64	; 0x40
   22328:	4650      	mov	r0, sl
   2232a:	1a1b      	subs	r3, r3, r0
   2232c:	4099      	lsls	r1, r3
   2232e:	430a      	orrs	r2, r1
   22330:	1e51      	subs	r1, r2, #1
   22332:	418a      	sbcs	r2, r1
   22334:	464b      	mov	r3, r9
   22336:	2100      	movs	r1, #0
   22338:	431a      	orrs	r2, r3
   2233a:	e69f      	b.n	2207c <__aeabi_dadd+0x1c0>
   2233c:	2e00      	cmp	r6, #0
   2233e:	d130      	bne.n	223a2 <__aeabi_dadd+0x4e6>
   22340:	0026      	movs	r6, r4
   22342:	433e      	orrs	r6, r7
   22344:	d067      	beq.n	22416 <__aeabi_dadd+0x55a>
   22346:	43db      	mvns	r3, r3
   22348:	469a      	mov	sl, r3
   2234a:	2b00      	cmp	r3, #0
   2234c:	d01c      	beq.n	22388 <__aeabi_dadd+0x4cc>
   2234e:	4e61      	ldr	r6, [pc, #388]	; (224d4 <__aeabi_dadd+0x618>)
   22350:	42b0      	cmp	r0, r6
   22352:	d060      	beq.n	22416 <__aeabi_dadd+0x55a>
   22354:	4653      	mov	r3, sl
   22356:	2b38      	cmp	r3, #56	; 0x38
   22358:	dd00      	ble.n	2235c <__aeabi_dadd+0x4a0>
   2235a:	e096      	b.n	2248a <__aeabi_dadd+0x5ce>
   2235c:	2b1f      	cmp	r3, #31
   2235e:	dd00      	ble.n	22362 <__aeabi_dadd+0x4a6>
   22360:	e09f      	b.n	224a2 <__aeabi_dadd+0x5e6>
   22362:	2620      	movs	r6, #32
   22364:	1af3      	subs	r3, r6, r3
   22366:	0026      	movs	r6, r4
   22368:	409e      	lsls	r6, r3
   2236a:	469c      	mov	ip, r3
   2236c:	46b3      	mov	fp, r6
   2236e:	4653      	mov	r3, sl
   22370:	003e      	movs	r6, r7
   22372:	40de      	lsrs	r6, r3
   22374:	0033      	movs	r3, r6
   22376:	465e      	mov	r6, fp
   22378:	431e      	orrs	r6, r3
   2237a:	4663      	mov	r3, ip
   2237c:	409f      	lsls	r7, r3
   2237e:	1e7b      	subs	r3, r7, #1
   22380:	419f      	sbcs	r7, r3
   22382:	4653      	mov	r3, sl
   22384:	40dc      	lsrs	r4, r3
   22386:	4337      	orrs	r7, r6
   22388:	18bf      	adds	r7, r7, r2
   2238a:	4297      	cmp	r7, r2
   2238c:	4192      	sbcs	r2, r2
   2238e:	1864      	adds	r4, r4, r1
   22390:	4252      	negs	r2, r2
   22392:	18a4      	adds	r4, r4, r2
   22394:	0006      	movs	r6, r0
   22396:	e678      	b.n	2208a <__aeabi_dadd+0x1ce>
   22398:	4327      	orrs	r7, r4
   2239a:	1e7c      	subs	r4, r7, #1
   2239c:	41a7      	sbcs	r7, r4
   2239e:	2400      	movs	r4, #0
   223a0:	e737      	b.n	22212 <__aeabi_dadd+0x356>
   223a2:	4e4c      	ldr	r6, [pc, #304]	; (224d4 <__aeabi_dadd+0x618>)
   223a4:	42b0      	cmp	r0, r6
   223a6:	d036      	beq.n	22416 <__aeabi_dadd+0x55a>
   223a8:	2680      	movs	r6, #128	; 0x80
   223aa:	425b      	negs	r3, r3
   223ac:	0436      	lsls	r6, r6, #16
   223ae:	469a      	mov	sl, r3
   223b0:	4334      	orrs	r4, r6
   223b2:	e7cf      	b.n	22354 <__aeabi_dadd+0x498>
   223b4:	0018      	movs	r0, r3
   223b6:	4310      	orrs	r0, r2
   223b8:	d100      	bne.n	223bc <__aeabi_dadd+0x500>
   223ba:	e603      	b.n	21fc4 <__aeabi_dadd+0x108>
   223bc:	1ab8      	subs	r0, r7, r2
   223be:	4684      	mov	ip, r0
   223c0:	4567      	cmp	r7, ip
   223c2:	41ad      	sbcs	r5, r5
   223c4:	1ae0      	subs	r0, r4, r3
   223c6:	426d      	negs	r5, r5
   223c8:	1b40      	subs	r0, r0, r5
   223ca:	0205      	lsls	r5, r0, #8
   223cc:	d400      	bmi.n	223d0 <__aeabi_dadd+0x514>
   223ce:	e62c      	b.n	2202a <__aeabi_dadd+0x16e>
   223d0:	1bd7      	subs	r7, r2, r7
   223d2:	42ba      	cmp	r2, r7
   223d4:	4192      	sbcs	r2, r2
   223d6:	1b1c      	subs	r4, r3, r4
   223d8:	4252      	negs	r2, r2
   223da:	1aa4      	subs	r4, r4, r2
   223dc:	46d8      	mov	r8, fp
   223de:	e5f1      	b.n	21fc4 <__aeabi_dadd+0x108>
   223e0:	0018      	movs	r0, r3
   223e2:	4310      	orrs	r0, r2
   223e4:	d100      	bne.n	223e8 <__aeabi_dadd+0x52c>
   223e6:	e763      	b.n	222b0 <__aeabi_dadd+0x3f4>
   223e8:	08f8      	lsrs	r0, r7, #3
   223ea:	0767      	lsls	r7, r4, #29
   223ec:	4307      	orrs	r7, r0
   223ee:	2080      	movs	r0, #128	; 0x80
   223f0:	08e4      	lsrs	r4, r4, #3
   223f2:	0300      	lsls	r0, r0, #12
   223f4:	4204      	tst	r4, r0
   223f6:	d008      	beq.n	2240a <__aeabi_dadd+0x54e>
   223f8:	08dd      	lsrs	r5, r3, #3
   223fa:	4205      	tst	r5, r0
   223fc:	d105      	bne.n	2240a <__aeabi_dadd+0x54e>
   223fe:	08d2      	lsrs	r2, r2, #3
   22400:	0759      	lsls	r1, r3, #29
   22402:	4311      	orrs	r1, r2
   22404:	000f      	movs	r7, r1
   22406:	002c      	movs	r4, r5
   22408:	46d8      	mov	r8, fp
   2240a:	0f7b      	lsrs	r3, r7, #29
   2240c:	00e4      	lsls	r4, r4, #3
   2240e:	431c      	orrs	r4, r3
   22410:	00ff      	lsls	r7, r7, #3
   22412:	4e30      	ldr	r6, [pc, #192]	; (224d4 <__aeabi_dadd+0x618>)
   22414:	e5d6      	b.n	21fc4 <__aeabi_dadd+0x108>
   22416:	000c      	movs	r4, r1
   22418:	0017      	movs	r7, r2
   2241a:	0006      	movs	r6, r0
   2241c:	e5d2      	b.n	21fc4 <__aeabi_dadd+0x108>
   2241e:	2b00      	cmp	r3, #0
   22420:	d038      	beq.n	22494 <__aeabi_dadd+0x5d8>
   22422:	000b      	movs	r3, r1
   22424:	4313      	orrs	r3, r2
   22426:	d100      	bne.n	2242a <__aeabi_dadd+0x56e>
   22428:	e742      	b.n	222b0 <__aeabi_dadd+0x3f4>
   2242a:	08f8      	lsrs	r0, r7, #3
   2242c:	0767      	lsls	r7, r4, #29
   2242e:	4307      	orrs	r7, r0
   22430:	2080      	movs	r0, #128	; 0x80
   22432:	08e4      	lsrs	r4, r4, #3
   22434:	0300      	lsls	r0, r0, #12
   22436:	4204      	tst	r4, r0
   22438:	d0e7      	beq.n	2240a <__aeabi_dadd+0x54e>
   2243a:	08cb      	lsrs	r3, r1, #3
   2243c:	4203      	tst	r3, r0
   2243e:	d1e4      	bne.n	2240a <__aeabi_dadd+0x54e>
   22440:	08d2      	lsrs	r2, r2, #3
   22442:	0749      	lsls	r1, r1, #29
   22444:	4311      	orrs	r1, r2
   22446:	000f      	movs	r7, r1
   22448:	001c      	movs	r4, r3
   2244a:	e7de      	b.n	2240a <__aeabi_dadd+0x54e>
   2244c:	2700      	movs	r7, #0
   2244e:	2400      	movs	r4, #0
   22450:	e5d5      	b.n	21ffe <__aeabi_dadd+0x142>
   22452:	2100      	movs	r1, #0
   22454:	e76b      	b.n	2232e <__aeabi_dadd+0x472>
   22456:	2500      	movs	r5, #0
   22458:	2700      	movs	r7, #0
   2245a:	e5f3      	b.n	22044 <__aeabi_dadd+0x188>
   2245c:	464e      	mov	r6, r9
   2245e:	0025      	movs	r5, r4
   22460:	3e20      	subs	r6, #32
   22462:	40f5      	lsrs	r5, r6
   22464:	464b      	mov	r3, r9
   22466:	002e      	movs	r6, r5
   22468:	2b20      	cmp	r3, #32
   2246a:	d02d      	beq.n	224c8 <__aeabi_dadd+0x60c>
   2246c:	2540      	movs	r5, #64	; 0x40
   2246e:	1aed      	subs	r5, r5, r3
   22470:	40ac      	lsls	r4, r5
   22472:	4327      	orrs	r7, r4
   22474:	1e7c      	subs	r4, r7, #1
   22476:	41a7      	sbcs	r7, r4
   22478:	2400      	movs	r4, #0
   2247a:	4337      	orrs	r7, r6
   2247c:	e6c9      	b.n	22212 <__aeabi_dadd+0x356>
   2247e:	2480      	movs	r4, #128	; 0x80
   22480:	2500      	movs	r5, #0
   22482:	0324      	lsls	r4, r4, #12
   22484:	4e13      	ldr	r6, [pc, #76]	; (224d4 <__aeabi_dadd+0x618>)
   22486:	2700      	movs	r7, #0
   22488:	e5dc      	b.n	22044 <__aeabi_dadd+0x188>
   2248a:	4327      	orrs	r7, r4
   2248c:	1e7c      	subs	r4, r7, #1
   2248e:	41a7      	sbcs	r7, r4
   22490:	2400      	movs	r4, #0
   22492:	e779      	b.n	22388 <__aeabi_dadd+0x4cc>
   22494:	000c      	movs	r4, r1
   22496:	0017      	movs	r7, r2
   22498:	4e0e      	ldr	r6, [pc, #56]	; (224d4 <__aeabi_dadd+0x618>)
   2249a:	e593      	b.n	21fc4 <__aeabi_dadd+0x108>
   2249c:	000c      	movs	r4, r1
   2249e:	0017      	movs	r7, r2
   224a0:	e590      	b.n	21fc4 <__aeabi_dadd+0x108>
   224a2:	4656      	mov	r6, sl
   224a4:	0023      	movs	r3, r4
   224a6:	3e20      	subs	r6, #32
   224a8:	40f3      	lsrs	r3, r6
   224aa:	4699      	mov	r9, r3
   224ac:	4653      	mov	r3, sl
   224ae:	2b20      	cmp	r3, #32
   224b0:	d00e      	beq.n	224d0 <__aeabi_dadd+0x614>
   224b2:	2340      	movs	r3, #64	; 0x40
   224b4:	4656      	mov	r6, sl
   224b6:	1b9b      	subs	r3, r3, r6
   224b8:	409c      	lsls	r4, r3
   224ba:	4327      	orrs	r7, r4
   224bc:	1e7c      	subs	r4, r7, #1
   224be:	41a7      	sbcs	r7, r4
   224c0:	464b      	mov	r3, r9
   224c2:	2400      	movs	r4, #0
   224c4:	431f      	orrs	r7, r3
   224c6:	e75f      	b.n	22388 <__aeabi_dadd+0x4cc>
   224c8:	2400      	movs	r4, #0
   224ca:	e7d2      	b.n	22472 <__aeabi_dadd+0x5b6>
   224cc:	0017      	movs	r7, r2
   224ce:	e5b2      	b.n	22036 <__aeabi_dadd+0x17a>
   224d0:	2400      	movs	r4, #0
   224d2:	e7f2      	b.n	224ba <__aeabi_dadd+0x5fe>
   224d4:	000007ff 	.word	0x000007ff
   224d8:	ff7fffff 	.word	0xff7fffff

000224dc <__aeabi_ddiv>:
   224dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   224de:	4657      	mov	r7, sl
   224e0:	4645      	mov	r5, r8
   224e2:	46de      	mov	lr, fp
   224e4:	464e      	mov	r6, r9
   224e6:	b5e0      	push	{r5, r6, r7, lr}
   224e8:	004c      	lsls	r4, r1, #1
   224ea:	030e      	lsls	r6, r1, #12
   224ec:	b087      	sub	sp, #28
   224ee:	4683      	mov	fp, r0
   224f0:	4692      	mov	sl, r2
   224f2:	001d      	movs	r5, r3
   224f4:	4680      	mov	r8, r0
   224f6:	0b36      	lsrs	r6, r6, #12
   224f8:	0d64      	lsrs	r4, r4, #21
   224fa:	0fcf      	lsrs	r7, r1, #31
   224fc:	2c00      	cmp	r4, #0
   224fe:	d04f      	beq.n	225a0 <__aeabi_ddiv+0xc4>
   22500:	4b6f      	ldr	r3, [pc, #444]	; (226c0 <__aeabi_ddiv+0x1e4>)
   22502:	429c      	cmp	r4, r3
   22504:	d035      	beq.n	22572 <__aeabi_ddiv+0x96>
   22506:	2380      	movs	r3, #128	; 0x80
   22508:	0f42      	lsrs	r2, r0, #29
   2250a:	041b      	lsls	r3, r3, #16
   2250c:	00f6      	lsls	r6, r6, #3
   2250e:	4313      	orrs	r3, r2
   22510:	4333      	orrs	r3, r6
   22512:	4699      	mov	r9, r3
   22514:	00c3      	lsls	r3, r0, #3
   22516:	4698      	mov	r8, r3
   22518:	4b6a      	ldr	r3, [pc, #424]	; (226c4 <__aeabi_ddiv+0x1e8>)
   2251a:	2600      	movs	r6, #0
   2251c:	469c      	mov	ip, r3
   2251e:	2300      	movs	r3, #0
   22520:	4464      	add	r4, ip
   22522:	9303      	str	r3, [sp, #12]
   22524:	032b      	lsls	r3, r5, #12
   22526:	0b1b      	lsrs	r3, r3, #12
   22528:	469b      	mov	fp, r3
   2252a:	006b      	lsls	r3, r5, #1
   2252c:	0fed      	lsrs	r5, r5, #31
   2252e:	4650      	mov	r0, sl
   22530:	0d5b      	lsrs	r3, r3, #21
   22532:	9501      	str	r5, [sp, #4]
   22534:	d05e      	beq.n	225f4 <__aeabi_ddiv+0x118>
   22536:	4a62      	ldr	r2, [pc, #392]	; (226c0 <__aeabi_ddiv+0x1e4>)
   22538:	4293      	cmp	r3, r2
   2253a:	d053      	beq.n	225e4 <__aeabi_ddiv+0x108>
   2253c:	465a      	mov	r2, fp
   2253e:	00d1      	lsls	r1, r2, #3
   22540:	2280      	movs	r2, #128	; 0x80
   22542:	0f40      	lsrs	r0, r0, #29
   22544:	0412      	lsls	r2, r2, #16
   22546:	4302      	orrs	r2, r0
   22548:	430a      	orrs	r2, r1
   2254a:	4693      	mov	fp, r2
   2254c:	4652      	mov	r2, sl
   2254e:	00d1      	lsls	r1, r2, #3
   22550:	4a5c      	ldr	r2, [pc, #368]	; (226c4 <__aeabi_ddiv+0x1e8>)
   22552:	4694      	mov	ip, r2
   22554:	2200      	movs	r2, #0
   22556:	4463      	add	r3, ip
   22558:	0038      	movs	r0, r7
   2255a:	4068      	eors	r0, r5
   2255c:	4684      	mov	ip, r0
   2255e:	9002      	str	r0, [sp, #8]
   22560:	1ae4      	subs	r4, r4, r3
   22562:	4316      	orrs	r6, r2
   22564:	2e0f      	cmp	r6, #15
   22566:	d900      	bls.n	2256a <__aeabi_ddiv+0x8e>
   22568:	e0b4      	b.n	226d4 <__aeabi_ddiv+0x1f8>
   2256a:	4b57      	ldr	r3, [pc, #348]	; (226c8 <__aeabi_ddiv+0x1ec>)
   2256c:	00b6      	lsls	r6, r6, #2
   2256e:	599b      	ldr	r3, [r3, r6]
   22570:	469f      	mov	pc, r3
   22572:	0003      	movs	r3, r0
   22574:	4333      	orrs	r3, r6
   22576:	4699      	mov	r9, r3
   22578:	d16c      	bne.n	22654 <__aeabi_ddiv+0x178>
   2257a:	2300      	movs	r3, #0
   2257c:	4698      	mov	r8, r3
   2257e:	3302      	adds	r3, #2
   22580:	2608      	movs	r6, #8
   22582:	9303      	str	r3, [sp, #12]
   22584:	e7ce      	b.n	22524 <__aeabi_ddiv+0x48>
   22586:	46cb      	mov	fp, r9
   22588:	4641      	mov	r1, r8
   2258a:	9a03      	ldr	r2, [sp, #12]
   2258c:	9701      	str	r7, [sp, #4]
   2258e:	2a02      	cmp	r2, #2
   22590:	d165      	bne.n	2265e <__aeabi_ddiv+0x182>
   22592:	9b01      	ldr	r3, [sp, #4]
   22594:	4c4a      	ldr	r4, [pc, #296]	; (226c0 <__aeabi_ddiv+0x1e4>)
   22596:	469c      	mov	ip, r3
   22598:	2300      	movs	r3, #0
   2259a:	2200      	movs	r2, #0
   2259c:	4698      	mov	r8, r3
   2259e:	e06b      	b.n	22678 <__aeabi_ddiv+0x19c>
   225a0:	0003      	movs	r3, r0
   225a2:	4333      	orrs	r3, r6
   225a4:	4699      	mov	r9, r3
   225a6:	d04e      	beq.n	22646 <__aeabi_ddiv+0x16a>
   225a8:	2e00      	cmp	r6, #0
   225aa:	d100      	bne.n	225ae <__aeabi_ddiv+0xd2>
   225ac:	e1bc      	b.n	22928 <__aeabi_ddiv+0x44c>
   225ae:	0030      	movs	r0, r6
   225b0:	f7fe fcf2 	bl	20f98 <__clzsi2>
   225b4:	0003      	movs	r3, r0
   225b6:	3b0b      	subs	r3, #11
   225b8:	2b1c      	cmp	r3, #28
   225ba:	dd00      	ble.n	225be <__aeabi_ddiv+0xe2>
   225bc:	e1ac      	b.n	22918 <__aeabi_ddiv+0x43c>
   225be:	221d      	movs	r2, #29
   225c0:	1ad3      	subs	r3, r2, r3
   225c2:	465a      	mov	r2, fp
   225c4:	0001      	movs	r1, r0
   225c6:	40da      	lsrs	r2, r3
   225c8:	3908      	subs	r1, #8
   225ca:	408e      	lsls	r6, r1
   225cc:	0013      	movs	r3, r2
   225ce:	4333      	orrs	r3, r6
   225d0:	4699      	mov	r9, r3
   225d2:	465b      	mov	r3, fp
   225d4:	408b      	lsls	r3, r1
   225d6:	4698      	mov	r8, r3
   225d8:	2300      	movs	r3, #0
   225da:	4c3c      	ldr	r4, [pc, #240]	; (226cc <__aeabi_ddiv+0x1f0>)
   225dc:	2600      	movs	r6, #0
   225de:	1a24      	subs	r4, r4, r0
   225e0:	9303      	str	r3, [sp, #12]
   225e2:	e79f      	b.n	22524 <__aeabi_ddiv+0x48>
   225e4:	4651      	mov	r1, sl
   225e6:	465a      	mov	r2, fp
   225e8:	4311      	orrs	r1, r2
   225ea:	d129      	bne.n	22640 <__aeabi_ddiv+0x164>
   225ec:	2200      	movs	r2, #0
   225ee:	4693      	mov	fp, r2
   225f0:	3202      	adds	r2, #2
   225f2:	e7b1      	b.n	22558 <__aeabi_ddiv+0x7c>
   225f4:	4659      	mov	r1, fp
   225f6:	4301      	orrs	r1, r0
   225f8:	d01e      	beq.n	22638 <__aeabi_ddiv+0x15c>
   225fa:	465b      	mov	r3, fp
   225fc:	2b00      	cmp	r3, #0
   225fe:	d100      	bne.n	22602 <__aeabi_ddiv+0x126>
   22600:	e19e      	b.n	22940 <__aeabi_ddiv+0x464>
   22602:	4658      	mov	r0, fp
   22604:	f7fe fcc8 	bl	20f98 <__clzsi2>
   22608:	0003      	movs	r3, r0
   2260a:	3b0b      	subs	r3, #11
   2260c:	2b1c      	cmp	r3, #28
   2260e:	dd00      	ble.n	22612 <__aeabi_ddiv+0x136>
   22610:	e18f      	b.n	22932 <__aeabi_ddiv+0x456>
   22612:	0002      	movs	r2, r0
   22614:	4659      	mov	r1, fp
   22616:	3a08      	subs	r2, #8
   22618:	4091      	lsls	r1, r2
   2261a:	468b      	mov	fp, r1
   2261c:	211d      	movs	r1, #29
   2261e:	1acb      	subs	r3, r1, r3
   22620:	4651      	mov	r1, sl
   22622:	40d9      	lsrs	r1, r3
   22624:	000b      	movs	r3, r1
   22626:	4659      	mov	r1, fp
   22628:	430b      	orrs	r3, r1
   2262a:	4651      	mov	r1, sl
   2262c:	469b      	mov	fp, r3
   2262e:	4091      	lsls	r1, r2
   22630:	4b26      	ldr	r3, [pc, #152]	; (226cc <__aeabi_ddiv+0x1f0>)
   22632:	2200      	movs	r2, #0
   22634:	1a1b      	subs	r3, r3, r0
   22636:	e78f      	b.n	22558 <__aeabi_ddiv+0x7c>
   22638:	2300      	movs	r3, #0
   2263a:	2201      	movs	r2, #1
   2263c:	469b      	mov	fp, r3
   2263e:	e78b      	b.n	22558 <__aeabi_ddiv+0x7c>
   22640:	4651      	mov	r1, sl
   22642:	2203      	movs	r2, #3
   22644:	e788      	b.n	22558 <__aeabi_ddiv+0x7c>
   22646:	2300      	movs	r3, #0
   22648:	4698      	mov	r8, r3
   2264a:	3301      	adds	r3, #1
   2264c:	2604      	movs	r6, #4
   2264e:	2400      	movs	r4, #0
   22650:	9303      	str	r3, [sp, #12]
   22652:	e767      	b.n	22524 <__aeabi_ddiv+0x48>
   22654:	2303      	movs	r3, #3
   22656:	46b1      	mov	r9, r6
   22658:	9303      	str	r3, [sp, #12]
   2265a:	260c      	movs	r6, #12
   2265c:	e762      	b.n	22524 <__aeabi_ddiv+0x48>
   2265e:	2a03      	cmp	r2, #3
   22660:	d100      	bne.n	22664 <__aeabi_ddiv+0x188>
   22662:	e25c      	b.n	22b1e <__aeabi_ddiv+0x642>
   22664:	9b01      	ldr	r3, [sp, #4]
   22666:	2a01      	cmp	r2, #1
   22668:	d000      	beq.n	2266c <__aeabi_ddiv+0x190>
   2266a:	e1e4      	b.n	22a36 <__aeabi_ddiv+0x55a>
   2266c:	4013      	ands	r3, r2
   2266e:	469c      	mov	ip, r3
   22670:	2300      	movs	r3, #0
   22672:	2400      	movs	r4, #0
   22674:	2200      	movs	r2, #0
   22676:	4698      	mov	r8, r3
   22678:	2100      	movs	r1, #0
   2267a:	0312      	lsls	r2, r2, #12
   2267c:	0b13      	lsrs	r3, r2, #12
   2267e:	0d0a      	lsrs	r2, r1, #20
   22680:	0512      	lsls	r2, r2, #20
   22682:	431a      	orrs	r2, r3
   22684:	0523      	lsls	r3, r4, #20
   22686:	4c12      	ldr	r4, [pc, #72]	; (226d0 <__aeabi_ddiv+0x1f4>)
   22688:	4640      	mov	r0, r8
   2268a:	4022      	ands	r2, r4
   2268c:	4313      	orrs	r3, r2
   2268e:	4662      	mov	r2, ip
   22690:	005b      	lsls	r3, r3, #1
   22692:	07d2      	lsls	r2, r2, #31
   22694:	085b      	lsrs	r3, r3, #1
   22696:	4313      	orrs	r3, r2
   22698:	0019      	movs	r1, r3
   2269a:	b007      	add	sp, #28
   2269c:	bc3c      	pop	{r2, r3, r4, r5}
   2269e:	4690      	mov	r8, r2
   226a0:	4699      	mov	r9, r3
   226a2:	46a2      	mov	sl, r4
   226a4:	46ab      	mov	fp, r5
   226a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226a8:	2300      	movs	r3, #0
   226aa:	2280      	movs	r2, #128	; 0x80
   226ac:	469c      	mov	ip, r3
   226ae:	0312      	lsls	r2, r2, #12
   226b0:	4698      	mov	r8, r3
   226b2:	4c03      	ldr	r4, [pc, #12]	; (226c0 <__aeabi_ddiv+0x1e4>)
   226b4:	e7e0      	b.n	22678 <__aeabi_ddiv+0x19c>
   226b6:	2300      	movs	r3, #0
   226b8:	4c01      	ldr	r4, [pc, #4]	; (226c0 <__aeabi_ddiv+0x1e4>)
   226ba:	2200      	movs	r2, #0
   226bc:	4698      	mov	r8, r3
   226be:	e7db      	b.n	22678 <__aeabi_ddiv+0x19c>
   226c0:	000007ff 	.word	0x000007ff
   226c4:	fffffc01 	.word	0xfffffc01
   226c8:	00029c00 	.word	0x00029c00
   226cc:	fffffc0d 	.word	0xfffffc0d
   226d0:	800fffff 	.word	0x800fffff
   226d4:	45d9      	cmp	r9, fp
   226d6:	d900      	bls.n	226da <__aeabi_ddiv+0x1fe>
   226d8:	e139      	b.n	2294e <__aeabi_ddiv+0x472>
   226da:	d100      	bne.n	226de <__aeabi_ddiv+0x202>
   226dc:	e134      	b.n	22948 <__aeabi_ddiv+0x46c>
   226de:	2300      	movs	r3, #0
   226e0:	4646      	mov	r6, r8
   226e2:	464d      	mov	r5, r9
   226e4:	469a      	mov	sl, r3
   226e6:	3c01      	subs	r4, #1
   226e8:	465b      	mov	r3, fp
   226ea:	0e0a      	lsrs	r2, r1, #24
   226ec:	021b      	lsls	r3, r3, #8
   226ee:	431a      	orrs	r2, r3
   226f0:	020b      	lsls	r3, r1, #8
   226f2:	0c17      	lsrs	r7, r2, #16
   226f4:	9303      	str	r3, [sp, #12]
   226f6:	0413      	lsls	r3, r2, #16
   226f8:	0c1b      	lsrs	r3, r3, #16
   226fa:	0039      	movs	r1, r7
   226fc:	0028      	movs	r0, r5
   226fe:	4690      	mov	r8, r2
   22700:	9301      	str	r3, [sp, #4]
   22702:	f7fe fa5b 	bl	20bbc <__udivsi3>
   22706:	0002      	movs	r2, r0
   22708:	9b01      	ldr	r3, [sp, #4]
   2270a:	4683      	mov	fp, r0
   2270c:	435a      	muls	r2, r3
   2270e:	0028      	movs	r0, r5
   22710:	0039      	movs	r1, r7
   22712:	4691      	mov	r9, r2
   22714:	f7fe fad8 	bl	20cc8 <__aeabi_uidivmod>
   22718:	0c35      	lsrs	r5, r6, #16
   2271a:	0409      	lsls	r1, r1, #16
   2271c:	430d      	orrs	r5, r1
   2271e:	45a9      	cmp	r9, r5
   22720:	d90d      	bls.n	2273e <__aeabi_ddiv+0x262>
   22722:	465b      	mov	r3, fp
   22724:	4445      	add	r5, r8
   22726:	3b01      	subs	r3, #1
   22728:	45a8      	cmp	r8, r5
   2272a:	d900      	bls.n	2272e <__aeabi_ddiv+0x252>
   2272c:	e13a      	b.n	229a4 <__aeabi_ddiv+0x4c8>
   2272e:	45a9      	cmp	r9, r5
   22730:	d800      	bhi.n	22734 <__aeabi_ddiv+0x258>
   22732:	e137      	b.n	229a4 <__aeabi_ddiv+0x4c8>
   22734:	2302      	movs	r3, #2
   22736:	425b      	negs	r3, r3
   22738:	469c      	mov	ip, r3
   2273a:	4445      	add	r5, r8
   2273c:	44e3      	add	fp, ip
   2273e:	464b      	mov	r3, r9
   22740:	1aeb      	subs	r3, r5, r3
   22742:	0039      	movs	r1, r7
   22744:	0018      	movs	r0, r3
   22746:	9304      	str	r3, [sp, #16]
   22748:	f7fe fa38 	bl	20bbc <__udivsi3>
   2274c:	9b01      	ldr	r3, [sp, #4]
   2274e:	0005      	movs	r5, r0
   22750:	4343      	muls	r3, r0
   22752:	0039      	movs	r1, r7
   22754:	9804      	ldr	r0, [sp, #16]
   22756:	4699      	mov	r9, r3
   22758:	f7fe fab6 	bl	20cc8 <__aeabi_uidivmod>
   2275c:	0433      	lsls	r3, r6, #16
   2275e:	0409      	lsls	r1, r1, #16
   22760:	0c1b      	lsrs	r3, r3, #16
   22762:	430b      	orrs	r3, r1
   22764:	4599      	cmp	r9, r3
   22766:	d909      	bls.n	2277c <__aeabi_ddiv+0x2a0>
   22768:	4443      	add	r3, r8
   2276a:	1e6a      	subs	r2, r5, #1
   2276c:	4598      	cmp	r8, r3
   2276e:	d900      	bls.n	22772 <__aeabi_ddiv+0x296>
   22770:	e11a      	b.n	229a8 <__aeabi_ddiv+0x4cc>
   22772:	4599      	cmp	r9, r3
   22774:	d800      	bhi.n	22778 <__aeabi_ddiv+0x29c>
   22776:	e117      	b.n	229a8 <__aeabi_ddiv+0x4cc>
   22778:	3d02      	subs	r5, #2
   2277a:	4443      	add	r3, r8
   2277c:	464a      	mov	r2, r9
   2277e:	1a9b      	subs	r3, r3, r2
   22780:	465a      	mov	r2, fp
   22782:	0412      	lsls	r2, r2, #16
   22784:	432a      	orrs	r2, r5
   22786:	9903      	ldr	r1, [sp, #12]
   22788:	4693      	mov	fp, r2
   2278a:	0c10      	lsrs	r0, r2, #16
   2278c:	0c0a      	lsrs	r2, r1, #16
   2278e:	4691      	mov	r9, r2
   22790:	0409      	lsls	r1, r1, #16
   22792:	465a      	mov	r2, fp
   22794:	0c09      	lsrs	r1, r1, #16
   22796:	464e      	mov	r6, r9
   22798:	000d      	movs	r5, r1
   2279a:	0412      	lsls	r2, r2, #16
   2279c:	0c12      	lsrs	r2, r2, #16
   2279e:	4345      	muls	r5, r0
   227a0:	9105      	str	r1, [sp, #20]
   227a2:	4351      	muls	r1, r2
   227a4:	4372      	muls	r2, r6
   227a6:	4370      	muls	r0, r6
   227a8:	1952      	adds	r2, r2, r5
   227aa:	0c0e      	lsrs	r6, r1, #16
   227ac:	18b2      	adds	r2, r6, r2
   227ae:	4295      	cmp	r5, r2
   227b0:	d903      	bls.n	227ba <__aeabi_ddiv+0x2de>
   227b2:	2580      	movs	r5, #128	; 0x80
   227b4:	026d      	lsls	r5, r5, #9
   227b6:	46ac      	mov	ip, r5
   227b8:	4460      	add	r0, ip
   227ba:	0c15      	lsrs	r5, r2, #16
   227bc:	0409      	lsls	r1, r1, #16
   227be:	0412      	lsls	r2, r2, #16
   227c0:	0c09      	lsrs	r1, r1, #16
   227c2:	1828      	adds	r0, r5, r0
   227c4:	1852      	adds	r2, r2, r1
   227c6:	4283      	cmp	r3, r0
   227c8:	d200      	bcs.n	227cc <__aeabi_ddiv+0x2f0>
   227ca:	e0ce      	b.n	2296a <__aeabi_ddiv+0x48e>
   227cc:	d100      	bne.n	227d0 <__aeabi_ddiv+0x2f4>
   227ce:	e0c8      	b.n	22962 <__aeabi_ddiv+0x486>
   227d0:	1a1d      	subs	r5, r3, r0
   227d2:	4653      	mov	r3, sl
   227d4:	1a9e      	subs	r6, r3, r2
   227d6:	45b2      	cmp	sl, r6
   227d8:	4192      	sbcs	r2, r2
   227da:	4252      	negs	r2, r2
   227dc:	1aab      	subs	r3, r5, r2
   227de:	469a      	mov	sl, r3
   227e0:	4598      	cmp	r8, r3
   227e2:	d100      	bne.n	227e6 <__aeabi_ddiv+0x30a>
   227e4:	e117      	b.n	22a16 <__aeabi_ddiv+0x53a>
   227e6:	0039      	movs	r1, r7
   227e8:	0018      	movs	r0, r3
   227ea:	f7fe f9e7 	bl	20bbc <__udivsi3>
   227ee:	9b01      	ldr	r3, [sp, #4]
   227f0:	0005      	movs	r5, r0
   227f2:	4343      	muls	r3, r0
   227f4:	0039      	movs	r1, r7
   227f6:	4650      	mov	r0, sl
   227f8:	9304      	str	r3, [sp, #16]
   227fa:	f7fe fa65 	bl	20cc8 <__aeabi_uidivmod>
   227fe:	9804      	ldr	r0, [sp, #16]
   22800:	040b      	lsls	r3, r1, #16
   22802:	0c31      	lsrs	r1, r6, #16
   22804:	4319      	orrs	r1, r3
   22806:	4288      	cmp	r0, r1
   22808:	d909      	bls.n	2281e <__aeabi_ddiv+0x342>
   2280a:	4441      	add	r1, r8
   2280c:	1e6b      	subs	r3, r5, #1
   2280e:	4588      	cmp	r8, r1
   22810:	d900      	bls.n	22814 <__aeabi_ddiv+0x338>
   22812:	e107      	b.n	22a24 <__aeabi_ddiv+0x548>
   22814:	4288      	cmp	r0, r1
   22816:	d800      	bhi.n	2281a <__aeabi_ddiv+0x33e>
   22818:	e104      	b.n	22a24 <__aeabi_ddiv+0x548>
   2281a:	3d02      	subs	r5, #2
   2281c:	4441      	add	r1, r8
   2281e:	9b04      	ldr	r3, [sp, #16]
   22820:	1acb      	subs	r3, r1, r3
   22822:	0018      	movs	r0, r3
   22824:	0039      	movs	r1, r7
   22826:	9304      	str	r3, [sp, #16]
   22828:	f7fe f9c8 	bl	20bbc <__udivsi3>
   2282c:	9b01      	ldr	r3, [sp, #4]
   2282e:	4682      	mov	sl, r0
   22830:	4343      	muls	r3, r0
   22832:	0039      	movs	r1, r7
   22834:	9804      	ldr	r0, [sp, #16]
   22836:	9301      	str	r3, [sp, #4]
   22838:	f7fe fa46 	bl	20cc8 <__aeabi_uidivmod>
   2283c:	9801      	ldr	r0, [sp, #4]
   2283e:	040b      	lsls	r3, r1, #16
   22840:	0431      	lsls	r1, r6, #16
   22842:	0c09      	lsrs	r1, r1, #16
   22844:	4319      	orrs	r1, r3
   22846:	4288      	cmp	r0, r1
   22848:	d90d      	bls.n	22866 <__aeabi_ddiv+0x38a>
   2284a:	4653      	mov	r3, sl
   2284c:	4441      	add	r1, r8
   2284e:	3b01      	subs	r3, #1
   22850:	4588      	cmp	r8, r1
   22852:	d900      	bls.n	22856 <__aeabi_ddiv+0x37a>
   22854:	e0e8      	b.n	22a28 <__aeabi_ddiv+0x54c>
   22856:	4288      	cmp	r0, r1
   22858:	d800      	bhi.n	2285c <__aeabi_ddiv+0x380>
   2285a:	e0e5      	b.n	22a28 <__aeabi_ddiv+0x54c>
   2285c:	2302      	movs	r3, #2
   2285e:	425b      	negs	r3, r3
   22860:	469c      	mov	ip, r3
   22862:	4441      	add	r1, r8
   22864:	44e2      	add	sl, ip
   22866:	9b01      	ldr	r3, [sp, #4]
   22868:	042d      	lsls	r5, r5, #16
   2286a:	1ace      	subs	r6, r1, r3
   2286c:	4651      	mov	r1, sl
   2286e:	4329      	orrs	r1, r5
   22870:	9d05      	ldr	r5, [sp, #20]
   22872:	464f      	mov	r7, r9
   22874:	002a      	movs	r2, r5
   22876:	040b      	lsls	r3, r1, #16
   22878:	0c08      	lsrs	r0, r1, #16
   2287a:	0c1b      	lsrs	r3, r3, #16
   2287c:	435a      	muls	r2, r3
   2287e:	4345      	muls	r5, r0
   22880:	437b      	muls	r3, r7
   22882:	4378      	muls	r0, r7
   22884:	195b      	adds	r3, r3, r5
   22886:	0c17      	lsrs	r7, r2, #16
   22888:	18fb      	adds	r3, r7, r3
   2288a:	429d      	cmp	r5, r3
   2288c:	d903      	bls.n	22896 <__aeabi_ddiv+0x3ba>
   2288e:	2580      	movs	r5, #128	; 0x80
   22890:	026d      	lsls	r5, r5, #9
   22892:	46ac      	mov	ip, r5
   22894:	4460      	add	r0, ip
   22896:	0c1d      	lsrs	r5, r3, #16
   22898:	0412      	lsls	r2, r2, #16
   2289a:	041b      	lsls	r3, r3, #16
   2289c:	0c12      	lsrs	r2, r2, #16
   2289e:	1828      	adds	r0, r5, r0
   228a0:	189b      	adds	r3, r3, r2
   228a2:	4286      	cmp	r6, r0
   228a4:	d200      	bcs.n	228a8 <__aeabi_ddiv+0x3cc>
   228a6:	e093      	b.n	229d0 <__aeabi_ddiv+0x4f4>
   228a8:	d100      	bne.n	228ac <__aeabi_ddiv+0x3d0>
   228aa:	e08e      	b.n	229ca <__aeabi_ddiv+0x4ee>
   228ac:	2301      	movs	r3, #1
   228ae:	4319      	orrs	r1, r3
   228b0:	4ba0      	ldr	r3, [pc, #640]	; (22b34 <__aeabi_ddiv+0x658>)
   228b2:	18e3      	adds	r3, r4, r3
   228b4:	2b00      	cmp	r3, #0
   228b6:	dc00      	bgt.n	228ba <__aeabi_ddiv+0x3de>
   228b8:	e099      	b.n	229ee <__aeabi_ddiv+0x512>
   228ba:	074a      	lsls	r2, r1, #29
   228bc:	d000      	beq.n	228c0 <__aeabi_ddiv+0x3e4>
   228be:	e09e      	b.n	229fe <__aeabi_ddiv+0x522>
   228c0:	465a      	mov	r2, fp
   228c2:	01d2      	lsls	r2, r2, #7
   228c4:	d506      	bpl.n	228d4 <__aeabi_ddiv+0x3f8>
   228c6:	465a      	mov	r2, fp
   228c8:	4b9b      	ldr	r3, [pc, #620]	; (22b38 <__aeabi_ddiv+0x65c>)
   228ca:	401a      	ands	r2, r3
   228cc:	2380      	movs	r3, #128	; 0x80
   228ce:	4693      	mov	fp, r2
   228d0:	00db      	lsls	r3, r3, #3
   228d2:	18e3      	adds	r3, r4, r3
   228d4:	4a99      	ldr	r2, [pc, #612]	; (22b3c <__aeabi_ddiv+0x660>)
   228d6:	4293      	cmp	r3, r2
   228d8:	dd68      	ble.n	229ac <__aeabi_ddiv+0x4d0>
   228da:	2301      	movs	r3, #1
   228dc:	9a02      	ldr	r2, [sp, #8]
   228de:	4c98      	ldr	r4, [pc, #608]	; (22b40 <__aeabi_ddiv+0x664>)
   228e0:	401a      	ands	r2, r3
   228e2:	2300      	movs	r3, #0
   228e4:	4694      	mov	ip, r2
   228e6:	4698      	mov	r8, r3
   228e8:	2200      	movs	r2, #0
   228ea:	e6c5      	b.n	22678 <__aeabi_ddiv+0x19c>
   228ec:	2280      	movs	r2, #128	; 0x80
   228ee:	464b      	mov	r3, r9
   228f0:	0312      	lsls	r2, r2, #12
   228f2:	4213      	tst	r3, r2
   228f4:	d00a      	beq.n	2290c <__aeabi_ddiv+0x430>
   228f6:	465b      	mov	r3, fp
   228f8:	4213      	tst	r3, r2
   228fa:	d106      	bne.n	2290a <__aeabi_ddiv+0x42e>
   228fc:	431a      	orrs	r2, r3
   228fe:	0312      	lsls	r2, r2, #12
   22900:	0b12      	lsrs	r2, r2, #12
   22902:	46ac      	mov	ip, r5
   22904:	4688      	mov	r8, r1
   22906:	4c8e      	ldr	r4, [pc, #568]	; (22b40 <__aeabi_ddiv+0x664>)
   22908:	e6b6      	b.n	22678 <__aeabi_ddiv+0x19c>
   2290a:	464b      	mov	r3, r9
   2290c:	431a      	orrs	r2, r3
   2290e:	0312      	lsls	r2, r2, #12
   22910:	0b12      	lsrs	r2, r2, #12
   22912:	46bc      	mov	ip, r7
   22914:	4c8a      	ldr	r4, [pc, #552]	; (22b40 <__aeabi_ddiv+0x664>)
   22916:	e6af      	b.n	22678 <__aeabi_ddiv+0x19c>
   22918:	0003      	movs	r3, r0
   2291a:	465a      	mov	r2, fp
   2291c:	3b28      	subs	r3, #40	; 0x28
   2291e:	409a      	lsls	r2, r3
   22920:	2300      	movs	r3, #0
   22922:	4691      	mov	r9, r2
   22924:	4698      	mov	r8, r3
   22926:	e657      	b.n	225d8 <__aeabi_ddiv+0xfc>
   22928:	4658      	mov	r0, fp
   2292a:	f7fe fb35 	bl	20f98 <__clzsi2>
   2292e:	3020      	adds	r0, #32
   22930:	e640      	b.n	225b4 <__aeabi_ddiv+0xd8>
   22932:	0003      	movs	r3, r0
   22934:	4652      	mov	r2, sl
   22936:	3b28      	subs	r3, #40	; 0x28
   22938:	409a      	lsls	r2, r3
   2293a:	2100      	movs	r1, #0
   2293c:	4693      	mov	fp, r2
   2293e:	e677      	b.n	22630 <__aeabi_ddiv+0x154>
   22940:	f7fe fb2a 	bl	20f98 <__clzsi2>
   22944:	3020      	adds	r0, #32
   22946:	e65f      	b.n	22608 <__aeabi_ddiv+0x12c>
   22948:	4588      	cmp	r8, r1
   2294a:	d200      	bcs.n	2294e <__aeabi_ddiv+0x472>
   2294c:	e6c7      	b.n	226de <__aeabi_ddiv+0x202>
   2294e:	464b      	mov	r3, r9
   22950:	07de      	lsls	r6, r3, #31
   22952:	085d      	lsrs	r5, r3, #1
   22954:	4643      	mov	r3, r8
   22956:	085b      	lsrs	r3, r3, #1
   22958:	431e      	orrs	r6, r3
   2295a:	4643      	mov	r3, r8
   2295c:	07db      	lsls	r3, r3, #31
   2295e:	469a      	mov	sl, r3
   22960:	e6c2      	b.n	226e8 <__aeabi_ddiv+0x20c>
   22962:	2500      	movs	r5, #0
   22964:	4592      	cmp	sl, r2
   22966:	d300      	bcc.n	2296a <__aeabi_ddiv+0x48e>
   22968:	e733      	b.n	227d2 <__aeabi_ddiv+0x2f6>
   2296a:	9e03      	ldr	r6, [sp, #12]
   2296c:	4659      	mov	r1, fp
   2296e:	46b4      	mov	ip, r6
   22970:	44e2      	add	sl, ip
   22972:	45b2      	cmp	sl, r6
   22974:	41ad      	sbcs	r5, r5
   22976:	426d      	negs	r5, r5
   22978:	4445      	add	r5, r8
   2297a:	18eb      	adds	r3, r5, r3
   2297c:	3901      	subs	r1, #1
   2297e:	4598      	cmp	r8, r3
   22980:	d207      	bcs.n	22992 <__aeabi_ddiv+0x4b6>
   22982:	4298      	cmp	r0, r3
   22984:	d900      	bls.n	22988 <__aeabi_ddiv+0x4ac>
   22986:	e07f      	b.n	22a88 <__aeabi_ddiv+0x5ac>
   22988:	d100      	bne.n	2298c <__aeabi_ddiv+0x4b0>
   2298a:	e0bc      	b.n	22b06 <__aeabi_ddiv+0x62a>
   2298c:	1a1d      	subs	r5, r3, r0
   2298e:	468b      	mov	fp, r1
   22990:	e71f      	b.n	227d2 <__aeabi_ddiv+0x2f6>
   22992:	4598      	cmp	r8, r3
   22994:	d1fa      	bne.n	2298c <__aeabi_ddiv+0x4b0>
   22996:	9d03      	ldr	r5, [sp, #12]
   22998:	4555      	cmp	r5, sl
   2299a:	d9f2      	bls.n	22982 <__aeabi_ddiv+0x4a6>
   2299c:	4643      	mov	r3, r8
   2299e:	468b      	mov	fp, r1
   229a0:	1a1d      	subs	r5, r3, r0
   229a2:	e716      	b.n	227d2 <__aeabi_ddiv+0x2f6>
   229a4:	469b      	mov	fp, r3
   229a6:	e6ca      	b.n	2273e <__aeabi_ddiv+0x262>
   229a8:	0015      	movs	r5, r2
   229aa:	e6e7      	b.n	2277c <__aeabi_ddiv+0x2a0>
   229ac:	465a      	mov	r2, fp
   229ae:	08c9      	lsrs	r1, r1, #3
   229b0:	0752      	lsls	r2, r2, #29
   229b2:	430a      	orrs	r2, r1
   229b4:	055b      	lsls	r3, r3, #21
   229b6:	4690      	mov	r8, r2
   229b8:	0d5c      	lsrs	r4, r3, #21
   229ba:	465a      	mov	r2, fp
   229bc:	2301      	movs	r3, #1
   229be:	9902      	ldr	r1, [sp, #8]
   229c0:	0252      	lsls	r2, r2, #9
   229c2:	4019      	ands	r1, r3
   229c4:	0b12      	lsrs	r2, r2, #12
   229c6:	468c      	mov	ip, r1
   229c8:	e656      	b.n	22678 <__aeabi_ddiv+0x19c>
   229ca:	2b00      	cmp	r3, #0
   229cc:	d100      	bne.n	229d0 <__aeabi_ddiv+0x4f4>
   229ce:	e76f      	b.n	228b0 <__aeabi_ddiv+0x3d4>
   229d0:	4446      	add	r6, r8
   229d2:	1e4a      	subs	r2, r1, #1
   229d4:	45b0      	cmp	r8, r6
   229d6:	d929      	bls.n	22a2c <__aeabi_ddiv+0x550>
   229d8:	0011      	movs	r1, r2
   229da:	4286      	cmp	r6, r0
   229dc:	d000      	beq.n	229e0 <__aeabi_ddiv+0x504>
   229de:	e765      	b.n	228ac <__aeabi_ddiv+0x3d0>
   229e0:	9a03      	ldr	r2, [sp, #12]
   229e2:	4293      	cmp	r3, r2
   229e4:	d000      	beq.n	229e8 <__aeabi_ddiv+0x50c>
   229e6:	e761      	b.n	228ac <__aeabi_ddiv+0x3d0>
   229e8:	e762      	b.n	228b0 <__aeabi_ddiv+0x3d4>
   229ea:	2101      	movs	r1, #1
   229ec:	4249      	negs	r1, r1
   229ee:	2001      	movs	r0, #1
   229f0:	1ac2      	subs	r2, r0, r3
   229f2:	2a38      	cmp	r2, #56	; 0x38
   229f4:	dd21      	ble.n	22a3a <__aeabi_ddiv+0x55e>
   229f6:	9b02      	ldr	r3, [sp, #8]
   229f8:	4003      	ands	r3, r0
   229fa:	469c      	mov	ip, r3
   229fc:	e638      	b.n	22670 <__aeabi_ddiv+0x194>
   229fe:	220f      	movs	r2, #15
   22a00:	400a      	ands	r2, r1
   22a02:	2a04      	cmp	r2, #4
   22a04:	d100      	bne.n	22a08 <__aeabi_ddiv+0x52c>
   22a06:	e75b      	b.n	228c0 <__aeabi_ddiv+0x3e4>
   22a08:	000a      	movs	r2, r1
   22a0a:	1d11      	adds	r1, r2, #4
   22a0c:	4291      	cmp	r1, r2
   22a0e:	4192      	sbcs	r2, r2
   22a10:	4252      	negs	r2, r2
   22a12:	4493      	add	fp, r2
   22a14:	e754      	b.n	228c0 <__aeabi_ddiv+0x3e4>
   22a16:	4b47      	ldr	r3, [pc, #284]	; (22b34 <__aeabi_ddiv+0x658>)
   22a18:	18e3      	adds	r3, r4, r3
   22a1a:	2b00      	cmp	r3, #0
   22a1c:	dde5      	ble.n	229ea <__aeabi_ddiv+0x50e>
   22a1e:	2201      	movs	r2, #1
   22a20:	4252      	negs	r2, r2
   22a22:	e7f2      	b.n	22a0a <__aeabi_ddiv+0x52e>
   22a24:	001d      	movs	r5, r3
   22a26:	e6fa      	b.n	2281e <__aeabi_ddiv+0x342>
   22a28:	469a      	mov	sl, r3
   22a2a:	e71c      	b.n	22866 <__aeabi_ddiv+0x38a>
   22a2c:	42b0      	cmp	r0, r6
   22a2e:	d839      	bhi.n	22aa4 <__aeabi_ddiv+0x5c8>
   22a30:	d06e      	beq.n	22b10 <__aeabi_ddiv+0x634>
   22a32:	0011      	movs	r1, r2
   22a34:	e73a      	b.n	228ac <__aeabi_ddiv+0x3d0>
   22a36:	9302      	str	r3, [sp, #8]
   22a38:	e73a      	b.n	228b0 <__aeabi_ddiv+0x3d4>
   22a3a:	2a1f      	cmp	r2, #31
   22a3c:	dc3c      	bgt.n	22ab8 <__aeabi_ddiv+0x5dc>
   22a3e:	2320      	movs	r3, #32
   22a40:	1a9b      	subs	r3, r3, r2
   22a42:	000c      	movs	r4, r1
   22a44:	4658      	mov	r0, fp
   22a46:	4099      	lsls	r1, r3
   22a48:	4098      	lsls	r0, r3
   22a4a:	1e4b      	subs	r3, r1, #1
   22a4c:	4199      	sbcs	r1, r3
   22a4e:	465b      	mov	r3, fp
   22a50:	40d4      	lsrs	r4, r2
   22a52:	40d3      	lsrs	r3, r2
   22a54:	4320      	orrs	r0, r4
   22a56:	4308      	orrs	r0, r1
   22a58:	001a      	movs	r2, r3
   22a5a:	0743      	lsls	r3, r0, #29
   22a5c:	d009      	beq.n	22a72 <__aeabi_ddiv+0x596>
   22a5e:	230f      	movs	r3, #15
   22a60:	4003      	ands	r3, r0
   22a62:	2b04      	cmp	r3, #4
   22a64:	d005      	beq.n	22a72 <__aeabi_ddiv+0x596>
   22a66:	0001      	movs	r1, r0
   22a68:	1d08      	adds	r0, r1, #4
   22a6a:	4288      	cmp	r0, r1
   22a6c:	419b      	sbcs	r3, r3
   22a6e:	425b      	negs	r3, r3
   22a70:	18d2      	adds	r2, r2, r3
   22a72:	0213      	lsls	r3, r2, #8
   22a74:	d53a      	bpl.n	22aec <__aeabi_ddiv+0x610>
   22a76:	2301      	movs	r3, #1
   22a78:	9a02      	ldr	r2, [sp, #8]
   22a7a:	2401      	movs	r4, #1
   22a7c:	401a      	ands	r2, r3
   22a7e:	2300      	movs	r3, #0
   22a80:	4694      	mov	ip, r2
   22a82:	4698      	mov	r8, r3
   22a84:	2200      	movs	r2, #0
   22a86:	e5f7      	b.n	22678 <__aeabi_ddiv+0x19c>
   22a88:	2102      	movs	r1, #2
   22a8a:	4249      	negs	r1, r1
   22a8c:	468c      	mov	ip, r1
   22a8e:	9d03      	ldr	r5, [sp, #12]
   22a90:	44e3      	add	fp, ip
   22a92:	46ac      	mov	ip, r5
   22a94:	44e2      	add	sl, ip
   22a96:	45aa      	cmp	sl, r5
   22a98:	41ad      	sbcs	r5, r5
   22a9a:	426d      	negs	r5, r5
   22a9c:	4445      	add	r5, r8
   22a9e:	18ed      	adds	r5, r5, r3
   22aa0:	1a2d      	subs	r5, r5, r0
   22aa2:	e696      	b.n	227d2 <__aeabi_ddiv+0x2f6>
   22aa4:	1e8a      	subs	r2, r1, #2
   22aa6:	9903      	ldr	r1, [sp, #12]
   22aa8:	004d      	lsls	r5, r1, #1
   22aaa:	428d      	cmp	r5, r1
   22aac:	4189      	sbcs	r1, r1
   22aae:	4249      	negs	r1, r1
   22ab0:	4441      	add	r1, r8
   22ab2:	1876      	adds	r6, r6, r1
   22ab4:	9503      	str	r5, [sp, #12]
   22ab6:	e78f      	b.n	229d8 <__aeabi_ddiv+0x4fc>
   22ab8:	201f      	movs	r0, #31
   22aba:	4240      	negs	r0, r0
   22abc:	1ac3      	subs	r3, r0, r3
   22abe:	4658      	mov	r0, fp
   22ac0:	40d8      	lsrs	r0, r3
   22ac2:	0003      	movs	r3, r0
   22ac4:	2a20      	cmp	r2, #32
   22ac6:	d028      	beq.n	22b1a <__aeabi_ddiv+0x63e>
   22ac8:	2040      	movs	r0, #64	; 0x40
   22aca:	465d      	mov	r5, fp
   22acc:	1a82      	subs	r2, r0, r2
   22ace:	4095      	lsls	r5, r2
   22ad0:	4329      	orrs	r1, r5
   22ad2:	1e4a      	subs	r2, r1, #1
   22ad4:	4191      	sbcs	r1, r2
   22ad6:	4319      	orrs	r1, r3
   22ad8:	2307      	movs	r3, #7
   22ada:	2200      	movs	r2, #0
   22adc:	400b      	ands	r3, r1
   22ade:	d009      	beq.n	22af4 <__aeabi_ddiv+0x618>
   22ae0:	230f      	movs	r3, #15
   22ae2:	2200      	movs	r2, #0
   22ae4:	400b      	ands	r3, r1
   22ae6:	0008      	movs	r0, r1
   22ae8:	2b04      	cmp	r3, #4
   22aea:	d1bd      	bne.n	22a68 <__aeabi_ddiv+0x58c>
   22aec:	0001      	movs	r1, r0
   22aee:	0753      	lsls	r3, r2, #29
   22af0:	0252      	lsls	r2, r2, #9
   22af2:	0b12      	lsrs	r2, r2, #12
   22af4:	08c9      	lsrs	r1, r1, #3
   22af6:	4319      	orrs	r1, r3
   22af8:	2301      	movs	r3, #1
   22afa:	4688      	mov	r8, r1
   22afc:	9902      	ldr	r1, [sp, #8]
   22afe:	2400      	movs	r4, #0
   22b00:	4019      	ands	r1, r3
   22b02:	468c      	mov	ip, r1
   22b04:	e5b8      	b.n	22678 <__aeabi_ddiv+0x19c>
   22b06:	4552      	cmp	r2, sl
   22b08:	d8be      	bhi.n	22a88 <__aeabi_ddiv+0x5ac>
   22b0a:	468b      	mov	fp, r1
   22b0c:	2500      	movs	r5, #0
   22b0e:	e660      	b.n	227d2 <__aeabi_ddiv+0x2f6>
   22b10:	9d03      	ldr	r5, [sp, #12]
   22b12:	429d      	cmp	r5, r3
   22b14:	d3c6      	bcc.n	22aa4 <__aeabi_ddiv+0x5c8>
   22b16:	0011      	movs	r1, r2
   22b18:	e762      	b.n	229e0 <__aeabi_ddiv+0x504>
   22b1a:	2500      	movs	r5, #0
   22b1c:	e7d8      	b.n	22ad0 <__aeabi_ddiv+0x5f4>
   22b1e:	2280      	movs	r2, #128	; 0x80
   22b20:	465b      	mov	r3, fp
   22b22:	0312      	lsls	r2, r2, #12
   22b24:	431a      	orrs	r2, r3
   22b26:	9b01      	ldr	r3, [sp, #4]
   22b28:	0312      	lsls	r2, r2, #12
   22b2a:	0b12      	lsrs	r2, r2, #12
   22b2c:	469c      	mov	ip, r3
   22b2e:	4688      	mov	r8, r1
   22b30:	4c03      	ldr	r4, [pc, #12]	; (22b40 <__aeabi_ddiv+0x664>)
   22b32:	e5a1      	b.n	22678 <__aeabi_ddiv+0x19c>
   22b34:	000003ff 	.word	0x000003ff
   22b38:	feffffff 	.word	0xfeffffff
   22b3c:	000007fe 	.word	0x000007fe
   22b40:	000007ff 	.word	0x000007ff

00022b44 <__eqdf2>:
   22b44:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b46:	464f      	mov	r7, r9
   22b48:	4646      	mov	r6, r8
   22b4a:	46d6      	mov	lr, sl
   22b4c:	005c      	lsls	r4, r3, #1
   22b4e:	b5c0      	push	{r6, r7, lr}
   22b50:	031f      	lsls	r7, r3, #12
   22b52:	0fdb      	lsrs	r3, r3, #31
   22b54:	469a      	mov	sl, r3
   22b56:	4b17      	ldr	r3, [pc, #92]	; (22bb4 <__eqdf2+0x70>)
   22b58:	030e      	lsls	r6, r1, #12
   22b5a:	004d      	lsls	r5, r1, #1
   22b5c:	4684      	mov	ip, r0
   22b5e:	4680      	mov	r8, r0
   22b60:	0b36      	lsrs	r6, r6, #12
   22b62:	0d6d      	lsrs	r5, r5, #21
   22b64:	0fc9      	lsrs	r1, r1, #31
   22b66:	4691      	mov	r9, r2
   22b68:	0b3f      	lsrs	r7, r7, #12
   22b6a:	0d64      	lsrs	r4, r4, #21
   22b6c:	2001      	movs	r0, #1
   22b6e:	429d      	cmp	r5, r3
   22b70:	d008      	beq.n	22b84 <__eqdf2+0x40>
   22b72:	429c      	cmp	r4, r3
   22b74:	d001      	beq.n	22b7a <__eqdf2+0x36>
   22b76:	42a5      	cmp	r5, r4
   22b78:	d00b      	beq.n	22b92 <__eqdf2+0x4e>
   22b7a:	bc1c      	pop	{r2, r3, r4}
   22b7c:	4690      	mov	r8, r2
   22b7e:	4699      	mov	r9, r3
   22b80:	46a2      	mov	sl, r4
   22b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22b84:	4663      	mov	r3, ip
   22b86:	4333      	orrs	r3, r6
   22b88:	d1f7      	bne.n	22b7a <__eqdf2+0x36>
   22b8a:	42ac      	cmp	r4, r5
   22b8c:	d1f5      	bne.n	22b7a <__eqdf2+0x36>
   22b8e:	433a      	orrs	r2, r7
   22b90:	d1f3      	bne.n	22b7a <__eqdf2+0x36>
   22b92:	2001      	movs	r0, #1
   22b94:	42be      	cmp	r6, r7
   22b96:	d1f0      	bne.n	22b7a <__eqdf2+0x36>
   22b98:	45c8      	cmp	r8, r9
   22b9a:	d1ee      	bne.n	22b7a <__eqdf2+0x36>
   22b9c:	4551      	cmp	r1, sl
   22b9e:	d007      	beq.n	22bb0 <__eqdf2+0x6c>
   22ba0:	2d00      	cmp	r5, #0
   22ba2:	d1ea      	bne.n	22b7a <__eqdf2+0x36>
   22ba4:	4663      	mov	r3, ip
   22ba6:	431e      	orrs	r6, r3
   22ba8:	0030      	movs	r0, r6
   22baa:	1e46      	subs	r6, r0, #1
   22bac:	41b0      	sbcs	r0, r6
   22bae:	e7e4      	b.n	22b7a <__eqdf2+0x36>
   22bb0:	2000      	movs	r0, #0
   22bb2:	e7e2      	b.n	22b7a <__eqdf2+0x36>
   22bb4:	000007ff 	.word	0x000007ff

00022bb8 <__gedf2>:
   22bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   22bba:	4645      	mov	r5, r8
   22bbc:	46de      	mov	lr, fp
   22bbe:	4657      	mov	r7, sl
   22bc0:	464e      	mov	r6, r9
   22bc2:	b5e0      	push	{r5, r6, r7, lr}
   22bc4:	031f      	lsls	r7, r3, #12
   22bc6:	0b3d      	lsrs	r5, r7, #12
   22bc8:	4f2c      	ldr	r7, [pc, #176]	; (22c7c <__gedf2+0xc4>)
   22bca:	030e      	lsls	r6, r1, #12
   22bcc:	004c      	lsls	r4, r1, #1
   22bce:	46ab      	mov	fp, r5
   22bd0:	005d      	lsls	r5, r3, #1
   22bd2:	4684      	mov	ip, r0
   22bd4:	0b36      	lsrs	r6, r6, #12
   22bd6:	0d64      	lsrs	r4, r4, #21
   22bd8:	0fc9      	lsrs	r1, r1, #31
   22bda:	4690      	mov	r8, r2
   22bdc:	0d6d      	lsrs	r5, r5, #21
   22bde:	0fdb      	lsrs	r3, r3, #31
   22be0:	42bc      	cmp	r4, r7
   22be2:	d02a      	beq.n	22c3a <__gedf2+0x82>
   22be4:	4f25      	ldr	r7, [pc, #148]	; (22c7c <__gedf2+0xc4>)
   22be6:	42bd      	cmp	r5, r7
   22be8:	d02d      	beq.n	22c46 <__gedf2+0x8e>
   22bea:	2c00      	cmp	r4, #0
   22bec:	d10f      	bne.n	22c0e <__gedf2+0x56>
   22bee:	4330      	orrs	r0, r6
   22bf0:	0007      	movs	r7, r0
   22bf2:	4681      	mov	r9, r0
   22bf4:	4278      	negs	r0, r7
   22bf6:	4178      	adcs	r0, r7
   22bf8:	b2c0      	uxtb	r0, r0
   22bfa:	2d00      	cmp	r5, #0
   22bfc:	d117      	bne.n	22c2e <__gedf2+0x76>
   22bfe:	465f      	mov	r7, fp
   22c00:	433a      	orrs	r2, r7
   22c02:	d114      	bne.n	22c2e <__gedf2+0x76>
   22c04:	464b      	mov	r3, r9
   22c06:	2000      	movs	r0, #0
   22c08:	2b00      	cmp	r3, #0
   22c0a:	d00a      	beq.n	22c22 <__gedf2+0x6a>
   22c0c:	e006      	b.n	22c1c <__gedf2+0x64>
   22c0e:	2d00      	cmp	r5, #0
   22c10:	d102      	bne.n	22c18 <__gedf2+0x60>
   22c12:	4658      	mov	r0, fp
   22c14:	4302      	orrs	r2, r0
   22c16:	d001      	beq.n	22c1c <__gedf2+0x64>
   22c18:	4299      	cmp	r1, r3
   22c1a:	d018      	beq.n	22c4e <__gedf2+0x96>
   22c1c:	4248      	negs	r0, r1
   22c1e:	2101      	movs	r1, #1
   22c20:	4308      	orrs	r0, r1
   22c22:	bc3c      	pop	{r2, r3, r4, r5}
   22c24:	4690      	mov	r8, r2
   22c26:	4699      	mov	r9, r3
   22c28:	46a2      	mov	sl, r4
   22c2a:	46ab      	mov	fp, r5
   22c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22c2e:	2800      	cmp	r0, #0
   22c30:	d0f2      	beq.n	22c18 <__gedf2+0x60>
   22c32:	2001      	movs	r0, #1
   22c34:	3b01      	subs	r3, #1
   22c36:	4318      	orrs	r0, r3
   22c38:	e7f3      	b.n	22c22 <__gedf2+0x6a>
   22c3a:	0037      	movs	r7, r6
   22c3c:	4307      	orrs	r7, r0
   22c3e:	d0d1      	beq.n	22be4 <__gedf2+0x2c>
   22c40:	2002      	movs	r0, #2
   22c42:	4240      	negs	r0, r0
   22c44:	e7ed      	b.n	22c22 <__gedf2+0x6a>
   22c46:	465f      	mov	r7, fp
   22c48:	4317      	orrs	r7, r2
   22c4a:	d0ce      	beq.n	22bea <__gedf2+0x32>
   22c4c:	e7f8      	b.n	22c40 <__gedf2+0x88>
   22c4e:	42ac      	cmp	r4, r5
   22c50:	dce4      	bgt.n	22c1c <__gedf2+0x64>
   22c52:	da03      	bge.n	22c5c <__gedf2+0xa4>
   22c54:	1e48      	subs	r0, r1, #1
   22c56:	2101      	movs	r1, #1
   22c58:	4308      	orrs	r0, r1
   22c5a:	e7e2      	b.n	22c22 <__gedf2+0x6a>
   22c5c:	455e      	cmp	r6, fp
   22c5e:	d8dd      	bhi.n	22c1c <__gedf2+0x64>
   22c60:	d006      	beq.n	22c70 <__gedf2+0xb8>
   22c62:	2000      	movs	r0, #0
   22c64:	455e      	cmp	r6, fp
   22c66:	d2dc      	bcs.n	22c22 <__gedf2+0x6a>
   22c68:	2301      	movs	r3, #1
   22c6a:	1e48      	subs	r0, r1, #1
   22c6c:	4318      	orrs	r0, r3
   22c6e:	e7d8      	b.n	22c22 <__gedf2+0x6a>
   22c70:	45c4      	cmp	ip, r8
   22c72:	d8d3      	bhi.n	22c1c <__gedf2+0x64>
   22c74:	2000      	movs	r0, #0
   22c76:	45c4      	cmp	ip, r8
   22c78:	d3f6      	bcc.n	22c68 <__gedf2+0xb0>
   22c7a:	e7d2      	b.n	22c22 <__gedf2+0x6a>
   22c7c:	000007ff 	.word	0x000007ff

00022c80 <__ledf2>:
   22c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c82:	464e      	mov	r6, r9
   22c84:	4645      	mov	r5, r8
   22c86:	46de      	mov	lr, fp
   22c88:	4657      	mov	r7, sl
   22c8a:	005c      	lsls	r4, r3, #1
   22c8c:	b5e0      	push	{r5, r6, r7, lr}
   22c8e:	031f      	lsls	r7, r3, #12
   22c90:	0fdb      	lsrs	r3, r3, #31
   22c92:	4699      	mov	r9, r3
   22c94:	4b2a      	ldr	r3, [pc, #168]	; (22d40 <__ledf2+0xc0>)
   22c96:	030e      	lsls	r6, r1, #12
   22c98:	004d      	lsls	r5, r1, #1
   22c9a:	0fc9      	lsrs	r1, r1, #31
   22c9c:	4684      	mov	ip, r0
   22c9e:	0b36      	lsrs	r6, r6, #12
   22ca0:	0d6d      	lsrs	r5, r5, #21
   22ca2:	468b      	mov	fp, r1
   22ca4:	4690      	mov	r8, r2
   22ca6:	0b3f      	lsrs	r7, r7, #12
   22ca8:	0d64      	lsrs	r4, r4, #21
   22caa:	429d      	cmp	r5, r3
   22cac:	d020      	beq.n	22cf0 <__ledf2+0x70>
   22cae:	4b24      	ldr	r3, [pc, #144]	; (22d40 <__ledf2+0xc0>)
   22cb0:	429c      	cmp	r4, r3
   22cb2:	d022      	beq.n	22cfa <__ledf2+0x7a>
   22cb4:	2d00      	cmp	r5, #0
   22cb6:	d112      	bne.n	22cde <__ledf2+0x5e>
   22cb8:	4330      	orrs	r0, r6
   22cba:	4243      	negs	r3, r0
   22cbc:	4143      	adcs	r3, r0
   22cbe:	b2db      	uxtb	r3, r3
   22cc0:	2c00      	cmp	r4, #0
   22cc2:	d01f      	beq.n	22d04 <__ledf2+0x84>
   22cc4:	2b00      	cmp	r3, #0
   22cc6:	d00c      	beq.n	22ce2 <__ledf2+0x62>
   22cc8:	464b      	mov	r3, r9
   22cca:	2001      	movs	r0, #1
   22ccc:	3b01      	subs	r3, #1
   22cce:	4303      	orrs	r3, r0
   22cd0:	0018      	movs	r0, r3
   22cd2:	bc3c      	pop	{r2, r3, r4, r5}
   22cd4:	4690      	mov	r8, r2
   22cd6:	4699      	mov	r9, r3
   22cd8:	46a2      	mov	sl, r4
   22cda:	46ab      	mov	fp, r5
   22cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22cde:	2c00      	cmp	r4, #0
   22ce0:	d016      	beq.n	22d10 <__ledf2+0x90>
   22ce2:	45cb      	cmp	fp, r9
   22ce4:	d017      	beq.n	22d16 <__ledf2+0x96>
   22ce6:	465b      	mov	r3, fp
   22ce8:	4259      	negs	r1, r3
   22cea:	2301      	movs	r3, #1
   22cec:	430b      	orrs	r3, r1
   22cee:	e7ef      	b.n	22cd0 <__ledf2+0x50>
   22cf0:	0031      	movs	r1, r6
   22cf2:	2302      	movs	r3, #2
   22cf4:	4301      	orrs	r1, r0
   22cf6:	d1eb      	bne.n	22cd0 <__ledf2+0x50>
   22cf8:	e7d9      	b.n	22cae <__ledf2+0x2e>
   22cfa:	0039      	movs	r1, r7
   22cfc:	2302      	movs	r3, #2
   22cfe:	4311      	orrs	r1, r2
   22d00:	d1e6      	bne.n	22cd0 <__ledf2+0x50>
   22d02:	e7d7      	b.n	22cb4 <__ledf2+0x34>
   22d04:	433a      	orrs	r2, r7
   22d06:	d1dd      	bne.n	22cc4 <__ledf2+0x44>
   22d08:	2300      	movs	r3, #0
   22d0a:	2800      	cmp	r0, #0
   22d0c:	d0e0      	beq.n	22cd0 <__ledf2+0x50>
   22d0e:	e7ea      	b.n	22ce6 <__ledf2+0x66>
   22d10:	433a      	orrs	r2, r7
   22d12:	d1e6      	bne.n	22ce2 <__ledf2+0x62>
   22d14:	e7e7      	b.n	22ce6 <__ledf2+0x66>
   22d16:	42a5      	cmp	r5, r4
   22d18:	dce5      	bgt.n	22ce6 <__ledf2+0x66>
   22d1a:	db05      	blt.n	22d28 <__ledf2+0xa8>
   22d1c:	42be      	cmp	r6, r7
   22d1e:	d8e2      	bhi.n	22ce6 <__ledf2+0x66>
   22d20:	d007      	beq.n	22d32 <__ledf2+0xb2>
   22d22:	2300      	movs	r3, #0
   22d24:	42be      	cmp	r6, r7
   22d26:	d2d3      	bcs.n	22cd0 <__ledf2+0x50>
   22d28:	4659      	mov	r1, fp
   22d2a:	2301      	movs	r3, #1
   22d2c:	3901      	subs	r1, #1
   22d2e:	430b      	orrs	r3, r1
   22d30:	e7ce      	b.n	22cd0 <__ledf2+0x50>
   22d32:	45c4      	cmp	ip, r8
   22d34:	d8d7      	bhi.n	22ce6 <__ledf2+0x66>
   22d36:	2300      	movs	r3, #0
   22d38:	45c4      	cmp	ip, r8
   22d3a:	d3f5      	bcc.n	22d28 <__ledf2+0xa8>
   22d3c:	e7c8      	b.n	22cd0 <__ledf2+0x50>
   22d3e:	46c0      	nop			; (mov r8, r8)
   22d40:	000007ff 	.word	0x000007ff

00022d44 <__aeabi_dmul>:
   22d44:	b5f0      	push	{r4, r5, r6, r7, lr}
   22d46:	4657      	mov	r7, sl
   22d48:	4645      	mov	r5, r8
   22d4a:	46de      	mov	lr, fp
   22d4c:	464e      	mov	r6, r9
   22d4e:	b5e0      	push	{r5, r6, r7, lr}
   22d50:	030c      	lsls	r4, r1, #12
   22d52:	4698      	mov	r8, r3
   22d54:	004e      	lsls	r6, r1, #1
   22d56:	0b23      	lsrs	r3, r4, #12
   22d58:	b087      	sub	sp, #28
   22d5a:	0007      	movs	r7, r0
   22d5c:	4692      	mov	sl, r2
   22d5e:	469b      	mov	fp, r3
   22d60:	0d76      	lsrs	r6, r6, #21
   22d62:	0fcd      	lsrs	r5, r1, #31
   22d64:	2e00      	cmp	r6, #0
   22d66:	d06b      	beq.n	22e40 <__aeabi_dmul+0xfc>
   22d68:	4b6d      	ldr	r3, [pc, #436]	; (22f20 <__aeabi_dmul+0x1dc>)
   22d6a:	429e      	cmp	r6, r3
   22d6c:	d035      	beq.n	22dda <__aeabi_dmul+0x96>
   22d6e:	2480      	movs	r4, #128	; 0x80
   22d70:	465b      	mov	r3, fp
   22d72:	0f42      	lsrs	r2, r0, #29
   22d74:	0424      	lsls	r4, r4, #16
   22d76:	00db      	lsls	r3, r3, #3
   22d78:	4314      	orrs	r4, r2
   22d7a:	431c      	orrs	r4, r3
   22d7c:	00c3      	lsls	r3, r0, #3
   22d7e:	4699      	mov	r9, r3
   22d80:	4b68      	ldr	r3, [pc, #416]	; (22f24 <__aeabi_dmul+0x1e0>)
   22d82:	46a3      	mov	fp, r4
   22d84:	469c      	mov	ip, r3
   22d86:	2300      	movs	r3, #0
   22d88:	2700      	movs	r7, #0
   22d8a:	4466      	add	r6, ip
   22d8c:	9302      	str	r3, [sp, #8]
   22d8e:	4643      	mov	r3, r8
   22d90:	031c      	lsls	r4, r3, #12
   22d92:	005a      	lsls	r2, r3, #1
   22d94:	0fdb      	lsrs	r3, r3, #31
   22d96:	4650      	mov	r0, sl
   22d98:	0b24      	lsrs	r4, r4, #12
   22d9a:	0d52      	lsrs	r2, r2, #21
   22d9c:	4698      	mov	r8, r3
   22d9e:	d100      	bne.n	22da2 <__aeabi_dmul+0x5e>
   22da0:	e076      	b.n	22e90 <__aeabi_dmul+0x14c>
   22da2:	4b5f      	ldr	r3, [pc, #380]	; (22f20 <__aeabi_dmul+0x1dc>)
   22da4:	429a      	cmp	r2, r3
   22da6:	d06d      	beq.n	22e84 <__aeabi_dmul+0x140>
   22da8:	2380      	movs	r3, #128	; 0x80
   22daa:	0f41      	lsrs	r1, r0, #29
   22dac:	041b      	lsls	r3, r3, #16
   22dae:	430b      	orrs	r3, r1
   22db0:	495c      	ldr	r1, [pc, #368]	; (22f24 <__aeabi_dmul+0x1e0>)
   22db2:	00e4      	lsls	r4, r4, #3
   22db4:	468c      	mov	ip, r1
   22db6:	431c      	orrs	r4, r3
   22db8:	00c3      	lsls	r3, r0, #3
   22dba:	2000      	movs	r0, #0
   22dbc:	4462      	add	r2, ip
   22dbe:	4641      	mov	r1, r8
   22dc0:	18b6      	adds	r6, r6, r2
   22dc2:	4069      	eors	r1, r5
   22dc4:	1c72      	adds	r2, r6, #1
   22dc6:	9101      	str	r1, [sp, #4]
   22dc8:	4694      	mov	ip, r2
   22dca:	4307      	orrs	r7, r0
   22dcc:	2f0f      	cmp	r7, #15
   22dce:	d900      	bls.n	22dd2 <__aeabi_dmul+0x8e>
   22dd0:	e0b0      	b.n	22f34 <__aeabi_dmul+0x1f0>
   22dd2:	4a55      	ldr	r2, [pc, #340]	; (22f28 <__aeabi_dmul+0x1e4>)
   22dd4:	00bf      	lsls	r7, r7, #2
   22dd6:	59d2      	ldr	r2, [r2, r7]
   22dd8:	4697      	mov	pc, r2
   22dda:	465b      	mov	r3, fp
   22ddc:	4303      	orrs	r3, r0
   22dde:	4699      	mov	r9, r3
   22de0:	d000      	beq.n	22de4 <__aeabi_dmul+0xa0>
   22de2:	e087      	b.n	22ef4 <__aeabi_dmul+0x1b0>
   22de4:	2300      	movs	r3, #0
   22de6:	469b      	mov	fp, r3
   22de8:	3302      	adds	r3, #2
   22dea:	2708      	movs	r7, #8
   22dec:	9302      	str	r3, [sp, #8]
   22dee:	e7ce      	b.n	22d8e <__aeabi_dmul+0x4a>
   22df0:	4642      	mov	r2, r8
   22df2:	9201      	str	r2, [sp, #4]
   22df4:	2802      	cmp	r0, #2
   22df6:	d067      	beq.n	22ec8 <__aeabi_dmul+0x184>
   22df8:	2803      	cmp	r0, #3
   22dfa:	d100      	bne.n	22dfe <__aeabi_dmul+0xba>
   22dfc:	e20e      	b.n	2321c <__aeabi_dmul+0x4d8>
   22dfe:	2801      	cmp	r0, #1
   22e00:	d000      	beq.n	22e04 <__aeabi_dmul+0xc0>
   22e02:	e162      	b.n	230ca <__aeabi_dmul+0x386>
   22e04:	2300      	movs	r3, #0
   22e06:	2400      	movs	r4, #0
   22e08:	2200      	movs	r2, #0
   22e0a:	4699      	mov	r9, r3
   22e0c:	9901      	ldr	r1, [sp, #4]
   22e0e:	4001      	ands	r1, r0
   22e10:	b2cd      	uxtb	r5, r1
   22e12:	2100      	movs	r1, #0
   22e14:	0312      	lsls	r2, r2, #12
   22e16:	0d0b      	lsrs	r3, r1, #20
   22e18:	0b12      	lsrs	r2, r2, #12
   22e1a:	051b      	lsls	r3, r3, #20
   22e1c:	4313      	orrs	r3, r2
   22e1e:	4a43      	ldr	r2, [pc, #268]	; (22f2c <__aeabi_dmul+0x1e8>)
   22e20:	0524      	lsls	r4, r4, #20
   22e22:	4013      	ands	r3, r2
   22e24:	431c      	orrs	r4, r3
   22e26:	0064      	lsls	r4, r4, #1
   22e28:	07ed      	lsls	r5, r5, #31
   22e2a:	0864      	lsrs	r4, r4, #1
   22e2c:	432c      	orrs	r4, r5
   22e2e:	4648      	mov	r0, r9
   22e30:	0021      	movs	r1, r4
   22e32:	b007      	add	sp, #28
   22e34:	bc3c      	pop	{r2, r3, r4, r5}
   22e36:	4690      	mov	r8, r2
   22e38:	4699      	mov	r9, r3
   22e3a:	46a2      	mov	sl, r4
   22e3c:	46ab      	mov	fp, r5
   22e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22e40:	4303      	orrs	r3, r0
   22e42:	4699      	mov	r9, r3
   22e44:	d04f      	beq.n	22ee6 <__aeabi_dmul+0x1a2>
   22e46:	465b      	mov	r3, fp
   22e48:	2b00      	cmp	r3, #0
   22e4a:	d100      	bne.n	22e4e <__aeabi_dmul+0x10a>
   22e4c:	e189      	b.n	23162 <__aeabi_dmul+0x41e>
   22e4e:	4658      	mov	r0, fp
   22e50:	f7fe f8a2 	bl	20f98 <__clzsi2>
   22e54:	0003      	movs	r3, r0
   22e56:	3b0b      	subs	r3, #11
   22e58:	2b1c      	cmp	r3, #28
   22e5a:	dd00      	ble.n	22e5e <__aeabi_dmul+0x11a>
   22e5c:	e17a      	b.n	23154 <__aeabi_dmul+0x410>
   22e5e:	221d      	movs	r2, #29
   22e60:	1ad3      	subs	r3, r2, r3
   22e62:	003a      	movs	r2, r7
   22e64:	0001      	movs	r1, r0
   22e66:	465c      	mov	r4, fp
   22e68:	40da      	lsrs	r2, r3
   22e6a:	3908      	subs	r1, #8
   22e6c:	408c      	lsls	r4, r1
   22e6e:	0013      	movs	r3, r2
   22e70:	408f      	lsls	r7, r1
   22e72:	4323      	orrs	r3, r4
   22e74:	469b      	mov	fp, r3
   22e76:	46b9      	mov	r9, r7
   22e78:	2300      	movs	r3, #0
   22e7a:	4e2d      	ldr	r6, [pc, #180]	; (22f30 <__aeabi_dmul+0x1ec>)
   22e7c:	2700      	movs	r7, #0
   22e7e:	1a36      	subs	r6, r6, r0
   22e80:	9302      	str	r3, [sp, #8]
   22e82:	e784      	b.n	22d8e <__aeabi_dmul+0x4a>
   22e84:	4653      	mov	r3, sl
   22e86:	4323      	orrs	r3, r4
   22e88:	d12a      	bne.n	22ee0 <__aeabi_dmul+0x19c>
   22e8a:	2400      	movs	r4, #0
   22e8c:	2002      	movs	r0, #2
   22e8e:	e796      	b.n	22dbe <__aeabi_dmul+0x7a>
   22e90:	4653      	mov	r3, sl
   22e92:	4323      	orrs	r3, r4
   22e94:	d020      	beq.n	22ed8 <__aeabi_dmul+0x194>
   22e96:	2c00      	cmp	r4, #0
   22e98:	d100      	bne.n	22e9c <__aeabi_dmul+0x158>
   22e9a:	e157      	b.n	2314c <__aeabi_dmul+0x408>
   22e9c:	0020      	movs	r0, r4
   22e9e:	f7fe f87b 	bl	20f98 <__clzsi2>
   22ea2:	0003      	movs	r3, r0
   22ea4:	3b0b      	subs	r3, #11
   22ea6:	2b1c      	cmp	r3, #28
   22ea8:	dd00      	ble.n	22eac <__aeabi_dmul+0x168>
   22eaa:	e149      	b.n	23140 <__aeabi_dmul+0x3fc>
   22eac:	211d      	movs	r1, #29
   22eae:	1acb      	subs	r3, r1, r3
   22eb0:	4651      	mov	r1, sl
   22eb2:	0002      	movs	r2, r0
   22eb4:	40d9      	lsrs	r1, r3
   22eb6:	4653      	mov	r3, sl
   22eb8:	3a08      	subs	r2, #8
   22eba:	4094      	lsls	r4, r2
   22ebc:	4093      	lsls	r3, r2
   22ebe:	430c      	orrs	r4, r1
   22ec0:	4a1b      	ldr	r2, [pc, #108]	; (22f30 <__aeabi_dmul+0x1ec>)
   22ec2:	1a12      	subs	r2, r2, r0
   22ec4:	2000      	movs	r0, #0
   22ec6:	e77a      	b.n	22dbe <__aeabi_dmul+0x7a>
   22ec8:	2501      	movs	r5, #1
   22eca:	9b01      	ldr	r3, [sp, #4]
   22ecc:	4c14      	ldr	r4, [pc, #80]	; (22f20 <__aeabi_dmul+0x1dc>)
   22ece:	401d      	ands	r5, r3
   22ed0:	2300      	movs	r3, #0
   22ed2:	2200      	movs	r2, #0
   22ed4:	4699      	mov	r9, r3
   22ed6:	e79c      	b.n	22e12 <__aeabi_dmul+0xce>
   22ed8:	2400      	movs	r4, #0
   22eda:	2200      	movs	r2, #0
   22edc:	2001      	movs	r0, #1
   22ede:	e76e      	b.n	22dbe <__aeabi_dmul+0x7a>
   22ee0:	4653      	mov	r3, sl
   22ee2:	2003      	movs	r0, #3
   22ee4:	e76b      	b.n	22dbe <__aeabi_dmul+0x7a>
   22ee6:	2300      	movs	r3, #0
   22ee8:	469b      	mov	fp, r3
   22eea:	3301      	adds	r3, #1
   22eec:	2704      	movs	r7, #4
   22eee:	2600      	movs	r6, #0
   22ef0:	9302      	str	r3, [sp, #8]
   22ef2:	e74c      	b.n	22d8e <__aeabi_dmul+0x4a>
   22ef4:	2303      	movs	r3, #3
   22ef6:	4681      	mov	r9, r0
   22ef8:	270c      	movs	r7, #12
   22efa:	9302      	str	r3, [sp, #8]
   22efc:	e747      	b.n	22d8e <__aeabi_dmul+0x4a>
   22efe:	2280      	movs	r2, #128	; 0x80
   22f00:	2300      	movs	r3, #0
   22f02:	2500      	movs	r5, #0
   22f04:	0312      	lsls	r2, r2, #12
   22f06:	4699      	mov	r9, r3
   22f08:	4c05      	ldr	r4, [pc, #20]	; (22f20 <__aeabi_dmul+0x1dc>)
   22f0a:	e782      	b.n	22e12 <__aeabi_dmul+0xce>
   22f0c:	465c      	mov	r4, fp
   22f0e:	464b      	mov	r3, r9
   22f10:	9802      	ldr	r0, [sp, #8]
   22f12:	e76f      	b.n	22df4 <__aeabi_dmul+0xb0>
   22f14:	465c      	mov	r4, fp
   22f16:	464b      	mov	r3, r9
   22f18:	9501      	str	r5, [sp, #4]
   22f1a:	9802      	ldr	r0, [sp, #8]
   22f1c:	e76a      	b.n	22df4 <__aeabi_dmul+0xb0>
   22f1e:	46c0      	nop			; (mov r8, r8)
   22f20:	000007ff 	.word	0x000007ff
   22f24:	fffffc01 	.word	0xfffffc01
   22f28:	00029c40 	.word	0x00029c40
   22f2c:	800fffff 	.word	0x800fffff
   22f30:	fffffc0d 	.word	0xfffffc0d
   22f34:	464a      	mov	r2, r9
   22f36:	4649      	mov	r1, r9
   22f38:	0c17      	lsrs	r7, r2, #16
   22f3a:	0c1a      	lsrs	r2, r3, #16
   22f3c:	041b      	lsls	r3, r3, #16
   22f3e:	0c1b      	lsrs	r3, r3, #16
   22f40:	0408      	lsls	r0, r1, #16
   22f42:	0019      	movs	r1, r3
   22f44:	0c00      	lsrs	r0, r0, #16
   22f46:	4341      	muls	r1, r0
   22f48:	0015      	movs	r5, r2
   22f4a:	4688      	mov	r8, r1
   22f4c:	0019      	movs	r1, r3
   22f4e:	437d      	muls	r5, r7
   22f50:	4379      	muls	r1, r7
   22f52:	9503      	str	r5, [sp, #12]
   22f54:	4689      	mov	r9, r1
   22f56:	0029      	movs	r1, r5
   22f58:	0015      	movs	r5, r2
   22f5a:	4345      	muls	r5, r0
   22f5c:	444d      	add	r5, r9
   22f5e:	9502      	str	r5, [sp, #8]
   22f60:	4645      	mov	r5, r8
   22f62:	0c2d      	lsrs	r5, r5, #16
   22f64:	46aa      	mov	sl, r5
   22f66:	9d02      	ldr	r5, [sp, #8]
   22f68:	4455      	add	r5, sl
   22f6a:	45a9      	cmp	r9, r5
   22f6c:	d906      	bls.n	22f7c <__aeabi_dmul+0x238>
   22f6e:	468a      	mov	sl, r1
   22f70:	2180      	movs	r1, #128	; 0x80
   22f72:	0249      	lsls	r1, r1, #9
   22f74:	4689      	mov	r9, r1
   22f76:	44ca      	add	sl, r9
   22f78:	4651      	mov	r1, sl
   22f7a:	9103      	str	r1, [sp, #12]
   22f7c:	0c29      	lsrs	r1, r5, #16
   22f7e:	9104      	str	r1, [sp, #16]
   22f80:	4641      	mov	r1, r8
   22f82:	0409      	lsls	r1, r1, #16
   22f84:	042d      	lsls	r5, r5, #16
   22f86:	0c09      	lsrs	r1, r1, #16
   22f88:	4688      	mov	r8, r1
   22f8a:	0029      	movs	r1, r5
   22f8c:	0c25      	lsrs	r5, r4, #16
   22f8e:	0424      	lsls	r4, r4, #16
   22f90:	4441      	add	r1, r8
   22f92:	0c24      	lsrs	r4, r4, #16
   22f94:	9105      	str	r1, [sp, #20]
   22f96:	0021      	movs	r1, r4
   22f98:	4341      	muls	r1, r0
   22f9a:	4688      	mov	r8, r1
   22f9c:	0021      	movs	r1, r4
   22f9e:	4379      	muls	r1, r7
   22fa0:	468a      	mov	sl, r1
   22fa2:	4368      	muls	r0, r5
   22fa4:	4641      	mov	r1, r8
   22fa6:	4450      	add	r0, sl
   22fa8:	4681      	mov	r9, r0
   22faa:	0c08      	lsrs	r0, r1, #16
   22fac:	4448      	add	r0, r9
   22fae:	436f      	muls	r7, r5
   22fb0:	4582      	cmp	sl, r0
   22fb2:	d903      	bls.n	22fbc <__aeabi_dmul+0x278>
   22fb4:	2180      	movs	r1, #128	; 0x80
   22fb6:	0249      	lsls	r1, r1, #9
   22fb8:	4689      	mov	r9, r1
   22fba:	444f      	add	r7, r9
   22fbc:	0c01      	lsrs	r1, r0, #16
   22fbe:	4689      	mov	r9, r1
   22fc0:	0039      	movs	r1, r7
   22fc2:	4449      	add	r1, r9
   22fc4:	9102      	str	r1, [sp, #8]
   22fc6:	4641      	mov	r1, r8
   22fc8:	040f      	lsls	r7, r1, #16
   22fca:	9904      	ldr	r1, [sp, #16]
   22fcc:	0c3f      	lsrs	r7, r7, #16
   22fce:	4688      	mov	r8, r1
   22fd0:	0400      	lsls	r0, r0, #16
   22fd2:	19c0      	adds	r0, r0, r7
   22fd4:	4480      	add	r8, r0
   22fd6:	4641      	mov	r1, r8
   22fd8:	9104      	str	r1, [sp, #16]
   22fda:	4659      	mov	r1, fp
   22fdc:	0c0f      	lsrs	r7, r1, #16
   22fde:	0409      	lsls	r1, r1, #16
   22fe0:	0c09      	lsrs	r1, r1, #16
   22fe2:	4688      	mov	r8, r1
   22fe4:	4359      	muls	r1, r3
   22fe6:	468a      	mov	sl, r1
   22fe8:	0039      	movs	r1, r7
   22fea:	4351      	muls	r1, r2
   22fec:	4689      	mov	r9, r1
   22fee:	4641      	mov	r1, r8
   22ff0:	434a      	muls	r2, r1
   22ff2:	4651      	mov	r1, sl
   22ff4:	0c09      	lsrs	r1, r1, #16
   22ff6:	468b      	mov	fp, r1
   22ff8:	437b      	muls	r3, r7
   22ffa:	18d2      	adds	r2, r2, r3
   22ffc:	445a      	add	r2, fp
   22ffe:	4293      	cmp	r3, r2
   23000:	d903      	bls.n	2300a <__aeabi_dmul+0x2c6>
   23002:	2380      	movs	r3, #128	; 0x80
   23004:	025b      	lsls	r3, r3, #9
   23006:	469b      	mov	fp, r3
   23008:	44d9      	add	r9, fp
   2300a:	4651      	mov	r1, sl
   2300c:	0409      	lsls	r1, r1, #16
   2300e:	0c09      	lsrs	r1, r1, #16
   23010:	468a      	mov	sl, r1
   23012:	4641      	mov	r1, r8
   23014:	4361      	muls	r1, r4
   23016:	437c      	muls	r4, r7
   23018:	0c13      	lsrs	r3, r2, #16
   2301a:	0412      	lsls	r2, r2, #16
   2301c:	444b      	add	r3, r9
   2301e:	4452      	add	r2, sl
   23020:	46a1      	mov	r9, r4
   23022:	468a      	mov	sl, r1
   23024:	003c      	movs	r4, r7
   23026:	4641      	mov	r1, r8
   23028:	436c      	muls	r4, r5
   2302a:	434d      	muls	r5, r1
   2302c:	4651      	mov	r1, sl
   2302e:	444d      	add	r5, r9
   23030:	0c0f      	lsrs	r7, r1, #16
   23032:	197d      	adds	r5, r7, r5
   23034:	45a9      	cmp	r9, r5
   23036:	d903      	bls.n	23040 <__aeabi_dmul+0x2fc>
   23038:	2180      	movs	r1, #128	; 0x80
   2303a:	0249      	lsls	r1, r1, #9
   2303c:	4688      	mov	r8, r1
   2303e:	4444      	add	r4, r8
   23040:	9f04      	ldr	r7, [sp, #16]
   23042:	9903      	ldr	r1, [sp, #12]
   23044:	46b8      	mov	r8, r7
   23046:	4441      	add	r1, r8
   23048:	468b      	mov	fp, r1
   2304a:	4583      	cmp	fp, r0
   2304c:	4180      	sbcs	r0, r0
   2304e:	4241      	negs	r1, r0
   23050:	4688      	mov	r8, r1
   23052:	4651      	mov	r1, sl
   23054:	0408      	lsls	r0, r1, #16
   23056:	042f      	lsls	r7, r5, #16
   23058:	0c00      	lsrs	r0, r0, #16
   2305a:	183f      	adds	r7, r7, r0
   2305c:	4658      	mov	r0, fp
   2305e:	9902      	ldr	r1, [sp, #8]
   23060:	1810      	adds	r0, r2, r0
   23062:	4689      	mov	r9, r1
   23064:	4290      	cmp	r0, r2
   23066:	4192      	sbcs	r2, r2
   23068:	444f      	add	r7, r9
   2306a:	46ba      	mov	sl, r7
   2306c:	4252      	negs	r2, r2
   2306e:	4699      	mov	r9, r3
   23070:	4693      	mov	fp, r2
   23072:	44c2      	add	sl, r8
   23074:	44d1      	add	r9, sl
   23076:	44cb      	add	fp, r9
   23078:	428f      	cmp	r7, r1
   2307a:	41bf      	sbcs	r7, r7
   2307c:	45c2      	cmp	sl, r8
   2307e:	4189      	sbcs	r1, r1
   23080:	4599      	cmp	r9, r3
   23082:	419b      	sbcs	r3, r3
   23084:	4593      	cmp	fp, r2
   23086:	4192      	sbcs	r2, r2
   23088:	427f      	negs	r7, r7
   2308a:	4249      	negs	r1, r1
   2308c:	0c2d      	lsrs	r5, r5, #16
   2308e:	4252      	negs	r2, r2
   23090:	430f      	orrs	r7, r1
   23092:	425b      	negs	r3, r3
   23094:	4313      	orrs	r3, r2
   23096:	197f      	adds	r7, r7, r5
   23098:	18ff      	adds	r7, r7, r3
   2309a:	465b      	mov	r3, fp
   2309c:	193c      	adds	r4, r7, r4
   2309e:	0ddb      	lsrs	r3, r3, #23
   230a0:	9a05      	ldr	r2, [sp, #20]
   230a2:	0264      	lsls	r4, r4, #9
   230a4:	431c      	orrs	r4, r3
   230a6:	0243      	lsls	r3, r0, #9
   230a8:	4313      	orrs	r3, r2
   230aa:	1e5d      	subs	r5, r3, #1
   230ac:	41ab      	sbcs	r3, r5
   230ae:	465a      	mov	r2, fp
   230b0:	0dc0      	lsrs	r0, r0, #23
   230b2:	4303      	orrs	r3, r0
   230b4:	0252      	lsls	r2, r2, #9
   230b6:	4313      	orrs	r3, r2
   230b8:	01e2      	lsls	r2, r4, #7
   230ba:	d556      	bpl.n	2316a <__aeabi_dmul+0x426>
   230bc:	2001      	movs	r0, #1
   230be:	085a      	lsrs	r2, r3, #1
   230c0:	4003      	ands	r3, r0
   230c2:	4313      	orrs	r3, r2
   230c4:	07e2      	lsls	r2, r4, #31
   230c6:	4313      	orrs	r3, r2
   230c8:	0864      	lsrs	r4, r4, #1
   230ca:	485a      	ldr	r0, [pc, #360]	; (23234 <__aeabi_dmul+0x4f0>)
   230cc:	4460      	add	r0, ip
   230ce:	2800      	cmp	r0, #0
   230d0:	dd4d      	ble.n	2316e <__aeabi_dmul+0x42a>
   230d2:	075a      	lsls	r2, r3, #29
   230d4:	d009      	beq.n	230ea <__aeabi_dmul+0x3a6>
   230d6:	220f      	movs	r2, #15
   230d8:	401a      	ands	r2, r3
   230da:	2a04      	cmp	r2, #4
   230dc:	d005      	beq.n	230ea <__aeabi_dmul+0x3a6>
   230de:	1d1a      	adds	r2, r3, #4
   230e0:	429a      	cmp	r2, r3
   230e2:	419b      	sbcs	r3, r3
   230e4:	425b      	negs	r3, r3
   230e6:	18e4      	adds	r4, r4, r3
   230e8:	0013      	movs	r3, r2
   230ea:	01e2      	lsls	r2, r4, #7
   230ec:	d504      	bpl.n	230f8 <__aeabi_dmul+0x3b4>
   230ee:	2080      	movs	r0, #128	; 0x80
   230f0:	4a51      	ldr	r2, [pc, #324]	; (23238 <__aeabi_dmul+0x4f4>)
   230f2:	00c0      	lsls	r0, r0, #3
   230f4:	4014      	ands	r4, r2
   230f6:	4460      	add	r0, ip
   230f8:	4a50      	ldr	r2, [pc, #320]	; (2323c <__aeabi_dmul+0x4f8>)
   230fa:	4290      	cmp	r0, r2
   230fc:	dd00      	ble.n	23100 <__aeabi_dmul+0x3bc>
   230fe:	e6e3      	b.n	22ec8 <__aeabi_dmul+0x184>
   23100:	2501      	movs	r5, #1
   23102:	08db      	lsrs	r3, r3, #3
   23104:	0762      	lsls	r2, r4, #29
   23106:	431a      	orrs	r2, r3
   23108:	0264      	lsls	r4, r4, #9
   2310a:	9b01      	ldr	r3, [sp, #4]
   2310c:	4691      	mov	r9, r2
   2310e:	0b22      	lsrs	r2, r4, #12
   23110:	0544      	lsls	r4, r0, #21
   23112:	0d64      	lsrs	r4, r4, #21
   23114:	401d      	ands	r5, r3
   23116:	e67c      	b.n	22e12 <__aeabi_dmul+0xce>
   23118:	2280      	movs	r2, #128	; 0x80
   2311a:	4659      	mov	r1, fp
   2311c:	0312      	lsls	r2, r2, #12
   2311e:	4211      	tst	r1, r2
   23120:	d008      	beq.n	23134 <__aeabi_dmul+0x3f0>
   23122:	4214      	tst	r4, r2
   23124:	d106      	bne.n	23134 <__aeabi_dmul+0x3f0>
   23126:	4322      	orrs	r2, r4
   23128:	0312      	lsls	r2, r2, #12
   2312a:	0b12      	lsrs	r2, r2, #12
   2312c:	4645      	mov	r5, r8
   2312e:	4699      	mov	r9, r3
   23130:	4c43      	ldr	r4, [pc, #268]	; (23240 <__aeabi_dmul+0x4fc>)
   23132:	e66e      	b.n	22e12 <__aeabi_dmul+0xce>
   23134:	465b      	mov	r3, fp
   23136:	431a      	orrs	r2, r3
   23138:	0312      	lsls	r2, r2, #12
   2313a:	0b12      	lsrs	r2, r2, #12
   2313c:	4c40      	ldr	r4, [pc, #256]	; (23240 <__aeabi_dmul+0x4fc>)
   2313e:	e668      	b.n	22e12 <__aeabi_dmul+0xce>
   23140:	0003      	movs	r3, r0
   23142:	4654      	mov	r4, sl
   23144:	3b28      	subs	r3, #40	; 0x28
   23146:	409c      	lsls	r4, r3
   23148:	2300      	movs	r3, #0
   2314a:	e6b9      	b.n	22ec0 <__aeabi_dmul+0x17c>
   2314c:	f7fd ff24 	bl	20f98 <__clzsi2>
   23150:	3020      	adds	r0, #32
   23152:	e6a6      	b.n	22ea2 <__aeabi_dmul+0x15e>
   23154:	0003      	movs	r3, r0
   23156:	3b28      	subs	r3, #40	; 0x28
   23158:	409f      	lsls	r7, r3
   2315a:	2300      	movs	r3, #0
   2315c:	46bb      	mov	fp, r7
   2315e:	4699      	mov	r9, r3
   23160:	e68a      	b.n	22e78 <__aeabi_dmul+0x134>
   23162:	f7fd ff19 	bl	20f98 <__clzsi2>
   23166:	3020      	adds	r0, #32
   23168:	e674      	b.n	22e54 <__aeabi_dmul+0x110>
   2316a:	46b4      	mov	ip, r6
   2316c:	e7ad      	b.n	230ca <__aeabi_dmul+0x386>
   2316e:	2501      	movs	r5, #1
   23170:	1a2a      	subs	r2, r5, r0
   23172:	2a38      	cmp	r2, #56	; 0x38
   23174:	dd06      	ble.n	23184 <__aeabi_dmul+0x440>
   23176:	9b01      	ldr	r3, [sp, #4]
   23178:	2400      	movs	r4, #0
   2317a:	401d      	ands	r5, r3
   2317c:	2300      	movs	r3, #0
   2317e:	2200      	movs	r2, #0
   23180:	4699      	mov	r9, r3
   23182:	e646      	b.n	22e12 <__aeabi_dmul+0xce>
   23184:	2a1f      	cmp	r2, #31
   23186:	dc21      	bgt.n	231cc <__aeabi_dmul+0x488>
   23188:	2520      	movs	r5, #32
   2318a:	0020      	movs	r0, r4
   2318c:	1aad      	subs	r5, r5, r2
   2318e:	001e      	movs	r6, r3
   23190:	40ab      	lsls	r3, r5
   23192:	40a8      	lsls	r0, r5
   23194:	40d6      	lsrs	r6, r2
   23196:	1e5d      	subs	r5, r3, #1
   23198:	41ab      	sbcs	r3, r5
   2319a:	4330      	orrs	r0, r6
   2319c:	4318      	orrs	r0, r3
   2319e:	40d4      	lsrs	r4, r2
   231a0:	0743      	lsls	r3, r0, #29
   231a2:	d009      	beq.n	231b8 <__aeabi_dmul+0x474>
   231a4:	230f      	movs	r3, #15
   231a6:	4003      	ands	r3, r0
   231a8:	2b04      	cmp	r3, #4
   231aa:	d005      	beq.n	231b8 <__aeabi_dmul+0x474>
   231ac:	0003      	movs	r3, r0
   231ae:	1d18      	adds	r0, r3, #4
   231b0:	4298      	cmp	r0, r3
   231b2:	419b      	sbcs	r3, r3
   231b4:	425b      	negs	r3, r3
   231b6:	18e4      	adds	r4, r4, r3
   231b8:	0223      	lsls	r3, r4, #8
   231ba:	d521      	bpl.n	23200 <__aeabi_dmul+0x4bc>
   231bc:	2501      	movs	r5, #1
   231be:	9b01      	ldr	r3, [sp, #4]
   231c0:	2401      	movs	r4, #1
   231c2:	401d      	ands	r5, r3
   231c4:	2300      	movs	r3, #0
   231c6:	2200      	movs	r2, #0
   231c8:	4699      	mov	r9, r3
   231ca:	e622      	b.n	22e12 <__aeabi_dmul+0xce>
   231cc:	251f      	movs	r5, #31
   231ce:	0021      	movs	r1, r4
   231d0:	426d      	negs	r5, r5
   231d2:	1a28      	subs	r0, r5, r0
   231d4:	40c1      	lsrs	r1, r0
   231d6:	0008      	movs	r0, r1
   231d8:	2a20      	cmp	r2, #32
   231da:	d01d      	beq.n	23218 <__aeabi_dmul+0x4d4>
   231dc:	355f      	adds	r5, #95	; 0x5f
   231de:	1aaa      	subs	r2, r5, r2
   231e0:	4094      	lsls	r4, r2
   231e2:	4323      	orrs	r3, r4
   231e4:	1e5c      	subs	r4, r3, #1
   231e6:	41a3      	sbcs	r3, r4
   231e8:	2507      	movs	r5, #7
   231ea:	4303      	orrs	r3, r0
   231ec:	401d      	ands	r5, r3
   231ee:	2200      	movs	r2, #0
   231f0:	2d00      	cmp	r5, #0
   231f2:	d009      	beq.n	23208 <__aeabi_dmul+0x4c4>
   231f4:	220f      	movs	r2, #15
   231f6:	2400      	movs	r4, #0
   231f8:	401a      	ands	r2, r3
   231fa:	0018      	movs	r0, r3
   231fc:	2a04      	cmp	r2, #4
   231fe:	d1d6      	bne.n	231ae <__aeabi_dmul+0x46a>
   23200:	0003      	movs	r3, r0
   23202:	0765      	lsls	r5, r4, #29
   23204:	0264      	lsls	r4, r4, #9
   23206:	0b22      	lsrs	r2, r4, #12
   23208:	08db      	lsrs	r3, r3, #3
   2320a:	432b      	orrs	r3, r5
   2320c:	2501      	movs	r5, #1
   2320e:	4699      	mov	r9, r3
   23210:	9b01      	ldr	r3, [sp, #4]
   23212:	2400      	movs	r4, #0
   23214:	401d      	ands	r5, r3
   23216:	e5fc      	b.n	22e12 <__aeabi_dmul+0xce>
   23218:	2400      	movs	r4, #0
   2321a:	e7e2      	b.n	231e2 <__aeabi_dmul+0x49e>
   2321c:	2280      	movs	r2, #128	; 0x80
   2321e:	2501      	movs	r5, #1
   23220:	0312      	lsls	r2, r2, #12
   23222:	4322      	orrs	r2, r4
   23224:	9901      	ldr	r1, [sp, #4]
   23226:	0312      	lsls	r2, r2, #12
   23228:	0b12      	lsrs	r2, r2, #12
   2322a:	400d      	ands	r5, r1
   2322c:	4699      	mov	r9, r3
   2322e:	4c04      	ldr	r4, [pc, #16]	; (23240 <__aeabi_dmul+0x4fc>)
   23230:	e5ef      	b.n	22e12 <__aeabi_dmul+0xce>
   23232:	46c0      	nop			; (mov r8, r8)
   23234:	000003ff 	.word	0x000003ff
   23238:	feffffff 	.word	0xfeffffff
   2323c:	000007fe 	.word	0x000007fe
   23240:	000007ff 	.word	0x000007ff

00023244 <__aeabi_dsub>:
   23244:	b5f0      	push	{r4, r5, r6, r7, lr}
   23246:	4646      	mov	r6, r8
   23248:	46d6      	mov	lr, sl
   2324a:	464f      	mov	r7, r9
   2324c:	030c      	lsls	r4, r1, #12
   2324e:	b5c0      	push	{r6, r7, lr}
   23250:	0fcd      	lsrs	r5, r1, #31
   23252:	004e      	lsls	r6, r1, #1
   23254:	0a61      	lsrs	r1, r4, #9
   23256:	0f44      	lsrs	r4, r0, #29
   23258:	430c      	orrs	r4, r1
   2325a:	00c1      	lsls	r1, r0, #3
   2325c:	0058      	lsls	r0, r3, #1
   2325e:	0d40      	lsrs	r0, r0, #21
   23260:	4684      	mov	ip, r0
   23262:	468a      	mov	sl, r1
   23264:	000f      	movs	r7, r1
   23266:	0319      	lsls	r1, r3, #12
   23268:	0f50      	lsrs	r0, r2, #29
   2326a:	0a49      	lsrs	r1, r1, #9
   2326c:	4301      	orrs	r1, r0
   2326e:	48c6      	ldr	r0, [pc, #792]	; (23588 <__aeabi_dsub+0x344>)
   23270:	0d76      	lsrs	r6, r6, #21
   23272:	46a8      	mov	r8, r5
   23274:	0fdb      	lsrs	r3, r3, #31
   23276:	00d2      	lsls	r2, r2, #3
   23278:	4584      	cmp	ip, r0
   2327a:	d100      	bne.n	2327e <__aeabi_dsub+0x3a>
   2327c:	e0d8      	b.n	23430 <__aeabi_dsub+0x1ec>
   2327e:	2001      	movs	r0, #1
   23280:	4043      	eors	r3, r0
   23282:	42ab      	cmp	r3, r5
   23284:	d100      	bne.n	23288 <__aeabi_dsub+0x44>
   23286:	e0a6      	b.n	233d6 <__aeabi_dsub+0x192>
   23288:	4660      	mov	r0, ip
   2328a:	1a35      	subs	r5, r6, r0
   2328c:	2d00      	cmp	r5, #0
   2328e:	dc00      	bgt.n	23292 <__aeabi_dsub+0x4e>
   23290:	e105      	b.n	2349e <__aeabi_dsub+0x25a>
   23292:	2800      	cmp	r0, #0
   23294:	d110      	bne.n	232b8 <__aeabi_dsub+0x74>
   23296:	000b      	movs	r3, r1
   23298:	4313      	orrs	r3, r2
   2329a:	d100      	bne.n	2329e <__aeabi_dsub+0x5a>
   2329c:	e0d7      	b.n	2344e <__aeabi_dsub+0x20a>
   2329e:	1e6b      	subs	r3, r5, #1
   232a0:	2b00      	cmp	r3, #0
   232a2:	d000      	beq.n	232a6 <__aeabi_dsub+0x62>
   232a4:	e14b      	b.n	2353e <__aeabi_dsub+0x2fa>
   232a6:	4653      	mov	r3, sl
   232a8:	1a9f      	subs	r7, r3, r2
   232aa:	45ba      	cmp	sl, r7
   232ac:	4180      	sbcs	r0, r0
   232ae:	1a64      	subs	r4, r4, r1
   232b0:	4240      	negs	r0, r0
   232b2:	1a24      	subs	r4, r4, r0
   232b4:	2601      	movs	r6, #1
   232b6:	e01e      	b.n	232f6 <__aeabi_dsub+0xb2>
   232b8:	4bb3      	ldr	r3, [pc, #716]	; (23588 <__aeabi_dsub+0x344>)
   232ba:	429e      	cmp	r6, r3
   232bc:	d048      	beq.n	23350 <__aeabi_dsub+0x10c>
   232be:	2380      	movs	r3, #128	; 0x80
   232c0:	041b      	lsls	r3, r3, #16
   232c2:	4319      	orrs	r1, r3
   232c4:	2d38      	cmp	r5, #56	; 0x38
   232c6:	dd00      	ble.n	232ca <__aeabi_dsub+0x86>
   232c8:	e119      	b.n	234fe <__aeabi_dsub+0x2ba>
   232ca:	2d1f      	cmp	r5, #31
   232cc:	dd00      	ble.n	232d0 <__aeabi_dsub+0x8c>
   232ce:	e14c      	b.n	2356a <__aeabi_dsub+0x326>
   232d0:	2320      	movs	r3, #32
   232d2:	000f      	movs	r7, r1
   232d4:	1b5b      	subs	r3, r3, r5
   232d6:	0010      	movs	r0, r2
   232d8:	409a      	lsls	r2, r3
   232da:	409f      	lsls	r7, r3
   232dc:	40e8      	lsrs	r0, r5
   232de:	1e53      	subs	r3, r2, #1
   232e0:	419a      	sbcs	r2, r3
   232e2:	40e9      	lsrs	r1, r5
   232e4:	4307      	orrs	r7, r0
   232e6:	4317      	orrs	r7, r2
   232e8:	4653      	mov	r3, sl
   232ea:	1bdf      	subs	r7, r3, r7
   232ec:	1a61      	subs	r1, r4, r1
   232ee:	45ba      	cmp	sl, r7
   232f0:	41a4      	sbcs	r4, r4
   232f2:	4264      	negs	r4, r4
   232f4:	1b0c      	subs	r4, r1, r4
   232f6:	0223      	lsls	r3, r4, #8
   232f8:	d400      	bmi.n	232fc <__aeabi_dsub+0xb8>
   232fa:	e0c5      	b.n	23488 <__aeabi_dsub+0x244>
   232fc:	0264      	lsls	r4, r4, #9
   232fe:	0a65      	lsrs	r5, r4, #9
   23300:	2d00      	cmp	r5, #0
   23302:	d100      	bne.n	23306 <__aeabi_dsub+0xc2>
   23304:	e0f6      	b.n	234f4 <__aeabi_dsub+0x2b0>
   23306:	0028      	movs	r0, r5
   23308:	f7fd fe46 	bl	20f98 <__clzsi2>
   2330c:	0003      	movs	r3, r0
   2330e:	3b08      	subs	r3, #8
   23310:	2b1f      	cmp	r3, #31
   23312:	dd00      	ble.n	23316 <__aeabi_dsub+0xd2>
   23314:	e0e9      	b.n	234ea <__aeabi_dsub+0x2a6>
   23316:	2220      	movs	r2, #32
   23318:	003c      	movs	r4, r7
   2331a:	1ad2      	subs	r2, r2, r3
   2331c:	409d      	lsls	r5, r3
   2331e:	40d4      	lsrs	r4, r2
   23320:	409f      	lsls	r7, r3
   23322:	4325      	orrs	r5, r4
   23324:	429e      	cmp	r6, r3
   23326:	dd00      	ble.n	2332a <__aeabi_dsub+0xe6>
   23328:	e0db      	b.n	234e2 <__aeabi_dsub+0x29e>
   2332a:	1b9e      	subs	r6, r3, r6
   2332c:	1c73      	adds	r3, r6, #1
   2332e:	2b1f      	cmp	r3, #31
   23330:	dd00      	ble.n	23334 <__aeabi_dsub+0xf0>
   23332:	e10a      	b.n	2354a <__aeabi_dsub+0x306>
   23334:	2220      	movs	r2, #32
   23336:	0038      	movs	r0, r7
   23338:	1ad2      	subs	r2, r2, r3
   2333a:	0029      	movs	r1, r5
   2333c:	4097      	lsls	r7, r2
   2333e:	002c      	movs	r4, r5
   23340:	4091      	lsls	r1, r2
   23342:	40d8      	lsrs	r0, r3
   23344:	1e7a      	subs	r2, r7, #1
   23346:	4197      	sbcs	r7, r2
   23348:	40dc      	lsrs	r4, r3
   2334a:	2600      	movs	r6, #0
   2334c:	4301      	orrs	r1, r0
   2334e:	430f      	orrs	r7, r1
   23350:	077b      	lsls	r3, r7, #29
   23352:	d009      	beq.n	23368 <__aeabi_dsub+0x124>
   23354:	230f      	movs	r3, #15
   23356:	403b      	ands	r3, r7
   23358:	2b04      	cmp	r3, #4
   2335a:	d005      	beq.n	23368 <__aeabi_dsub+0x124>
   2335c:	1d3b      	adds	r3, r7, #4
   2335e:	42bb      	cmp	r3, r7
   23360:	41bf      	sbcs	r7, r7
   23362:	427f      	negs	r7, r7
   23364:	19e4      	adds	r4, r4, r7
   23366:	001f      	movs	r7, r3
   23368:	0223      	lsls	r3, r4, #8
   2336a:	d525      	bpl.n	233b8 <__aeabi_dsub+0x174>
   2336c:	4b86      	ldr	r3, [pc, #536]	; (23588 <__aeabi_dsub+0x344>)
   2336e:	3601      	adds	r6, #1
   23370:	429e      	cmp	r6, r3
   23372:	d100      	bne.n	23376 <__aeabi_dsub+0x132>
   23374:	e0af      	b.n	234d6 <__aeabi_dsub+0x292>
   23376:	4b85      	ldr	r3, [pc, #532]	; (2358c <__aeabi_dsub+0x348>)
   23378:	2501      	movs	r5, #1
   2337a:	401c      	ands	r4, r3
   2337c:	4643      	mov	r3, r8
   2337e:	0762      	lsls	r2, r4, #29
   23380:	08ff      	lsrs	r7, r7, #3
   23382:	0264      	lsls	r4, r4, #9
   23384:	0576      	lsls	r6, r6, #21
   23386:	4317      	orrs	r7, r2
   23388:	0b24      	lsrs	r4, r4, #12
   2338a:	0d76      	lsrs	r6, r6, #21
   2338c:	401d      	ands	r5, r3
   2338e:	2100      	movs	r1, #0
   23390:	0324      	lsls	r4, r4, #12
   23392:	0b23      	lsrs	r3, r4, #12
   23394:	0d0c      	lsrs	r4, r1, #20
   23396:	4a7e      	ldr	r2, [pc, #504]	; (23590 <__aeabi_dsub+0x34c>)
   23398:	0524      	lsls	r4, r4, #20
   2339a:	431c      	orrs	r4, r3
   2339c:	4014      	ands	r4, r2
   2339e:	0533      	lsls	r3, r6, #20
   233a0:	4323      	orrs	r3, r4
   233a2:	005b      	lsls	r3, r3, #1
   233a4:	07ed      	lsls	r5, r5, #31
   233a6:	085b      	lsrs	r3, r3, #1
   233a8:	432b      	orrs	r3, r5
   233aa:	0038      	movs	r0, r7
   233ac:	0019      	movs	r1, r3
   233ae:	bc1c      	pop	{r2, r3, r4}
   233b0:	4690      	mov	r8, r2
   233b2:	4699      	mov	r9, r3
   233b4:	46a2      	mov	sl, r4
   233b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   233b8:	2501      	movs	r5, #1
   233ba:	4643      	mov	r3, r8
   233bc:	0762      	lsls	r2, r4, #29
   233be:	08ff      	lsrs	r7, r7, #3
   233c0:	4317      	orrs	r7, r2
   233c2:	08e4      	lsrs	r4, r4, #3
   233c4:	401d      	ands	r5, r3
   233c6:	4b70      	ldr	r3, [pc, #448]	; (23588 <__aeabi_dsub+0x344>)
   233c8:	429e      	cmp	r6, r3
   233ca:	d036      	beq.n	2343a <__aeabi_dsub+0x1f6>
   233cc:	0324      	lsls	r4, r4, #12
   233ce:	0576      	lsls	r6, r6, #21
   233d0:	0b24      	lsrs	r4, r4, #12
   233d2:	0d76      	lsrs	r6, r6, #21
   233d4:	e7db      	b.n	2338e <__aeabi_dsub+0x14a>
   233d6:	4663      	mov	r3, ip
   233d8:	1af3      	subs	r3, r6, r3
   233da:	2b00      	cmp	r3, #0
   233dc:	dc00      	bgt.n	233e0 <__aeabi_dsub+0x19c>
   233de:	e094      	b.n	2350a <__aeabi_dsub+0x2c6>
   233e0:	4660      	mov	r0, ip
   233e2:	2800      	cmp	r0, #0
   233e4:	d035      	beq.n	23452 <__aeabi_dsub+0x20e>
   233e6:	4868      	ldr	r0, [pc, #416]	; (23588 <__aeabi_dsub+0x344>)
   233e8:	4286      	cmp	r6, r0
   233ea:	d0b1      	beq.n	23350 <__aeabi_dsub+0x10c>
   233ec:	2780      	movs	r7, #128	; 0x80
   233ee:	043f      	lsls	r7, r7, #16
   233f0:	4339      	orrs	r1, r7
   233f2:	2b38      	cmp	r3, #56	; 0x38
   233f4:	dc00      	bgt.n	233f8 <__aeabi_dsub+0x1b4>
   233f6:	e0fd      	b.n	235f4 <__aeabi_dsub+0x3b0>
   233f8:	430a      	orrs	r2, r1
   233fa:	0017      	movs	r7, r2
   233fc:	2100      	movs	r1, #0
   233fe:	1e7a      	subs	r2, r7, #1
   23400:	4197      	sbcs	r7, r2
   23402:	4457      	add	r7, sl
   23404:	4557      	cmp	r7, sl
   23406:	4180      	sbcs	r0, r0
   23408:	1909      	adds	r1, r1, r4
   2340a:	4244      	negs	r4, r0
   2340c:	190c      	adds	r4, r1, r4
   2340e:	0223      	lsls	r3, r4, #8
   23410:	d53a      	bpl.n	23488 <__aeabi_dsub+0x244>
   23412:	4b5d      	ldr	r3, [pc, #372]	; (23588 <__aeabi_dsub+0x344>)
   23414:	3601      	adds	r6, #1
   23416:	429e      	cmp	r6, r3
   23418:	d100      	bne.n	2341c <__aeabi_dsub+0x1d8>
   2341a:	e14b      	b.n	236b4 <__aeabi_dsub+0x470>
   2341c:	2201      	movs	r2, #1
   2341e:	4b5b      	ldr	r3, [pc, #364]	; (2358c <__aeabi_dsub+0x348>)
   23420:	401c      	ands	r4, r3
   23422:	087b      	lsrs	r3, r7, #1
   23424:	4017      	ands	r7, r2
   23426:	431f      	orrs	r7, r3
   23428:	07e2      	lsls	r2, r4, #31
   2342a:	4317      	orrs	r7, r2
   2342c:	0864      	lsrs	r4, r4, #1
   2342e:	e78f      	b.n	23350 <__aeabi_dsub+0x10c>
   23430:	0008      	movs	r0, r1
   23432:	4310      	orrs	r0, r2
   23434:	d000      	beq.n	23438 <__aeabi_dsub+0x1f4>
   23436:	e724      	b.n	23282 <__aeabi_dsub+0x3e>
   23438:	e721      	b.n	2327e <__aeabi_dsub+0x3a>
   2343a:	0023      	movs	r3, r4
   2343c:	433b      	orrs	r3, r7
   2343e:	d100      	bne.n	23442 <__aeabi_dsub+0x1fe>
   23440:	e1b9      	b.n	237b6 <__aeabi_dsub+0x572>
   23442:	2280      	movs	r2, #128	; 0x80
   23444:	0312      	lsls	r2, r2, #12
   23446:	4314      	orrs	r4, r2
   23448:	0324      	lsls	r4, r4, #12
   2344a:	0b24      	lsrs	r4, r4, #12
   2344c:	e79f      	b.n	2338e <__aeabi_dsub+0x14a>
   2344e:	002e      	movs	r6, r5
   23450:	e77e      	b.n	23350 <__aeabi_dsub+0x10c>
   23452:	0008      	movs	r0, r1
   23454:	4310      	orrs	r0, r2
   23456:	d100      	bne.n	2345a <__aeabi_dsub+0x216>
   23458:	e0ca      	b.n	235f0 <__aeabi_dsub+0x3ac>
   2345a:	1e58      	subs	r0, r3, #1
   2345c:	4684      	mov	ip, r0
   2345e:	2800      	cmp	r0, #0
   23460:	d000      	beq.n	23464 <__aeabi_dsub+0x220>
   23462:	e0e7      	b.n	23634 <__aeabi_dsub+0x3f0>
   23464:	4452      	add	r2, sl
   23466:	4552      	cmp	r2, sl
   23468:	4180      	sbcs	r0, r0
   2346a:	1864      	adds	r4, r4, r1
   2346c:	4240      	negs	r0, r0
   2346e:	1824      	adds	r4, r4, r0
   23470:	0017      	movs	r7, r2
   23472:	2601      	movs	r6, #1
   23474:	0223      	lsls	r3, r4, #8
   23476:	d507      	bpl.n	23488 <__aeabi_dsub+0x244>
   23478:	2602      	movs	r6, #2
   2347a:	e7cf      	b.n	2341c <__aeabi_dsub+0x1d8>
   2347c:	4664      	mov	r4, ip
   2347e:	432c      	orrs	r4, r5
   23480:	d100      	bne.n	23484 <__aeabi_dsub+0x240>
   23482:	e1b3      	b.n	237ec <__aeabi_dsub+0x5a8>
   23484:	002c      	movs	r4, r5
   23486:	4667      	mov	r7, ip
   23488:	077b      	lsls	r3, r7, #29
   2348a:	d000      	beq.n	2348e <__aeabi_dsub+0x24a>
   2348c:	e762      	b.n	23354 <__aeabi_dsub+0x110>
   2348e:	0763      	lsls	r3, r4, #29
   23490:	08ff      	lsrs	r7, r7, #3
   23492:	431f      	orrs	r7, r3
   23494:	2501      	movs	r5, #1
   23496:	4643      	mov	r3, r8
   23498:	08e4      	lsrs	r4, r4, #3
   2349a:	401d      	ands	r5, r3
   2349c:	e793      	b.n	233c6 <__aeabi_dsub+0x182>
   2349e:	2d00      	cmp	r5, #0
   234a0:	d178      	bne.n	23594 <__aeabi_dsub+0x350>
   234a2:	1c75      	adds	r5, r6, #1
   234a4:	056d      	lsls	r5, r5, #21
   234a6:	0d6d      	lsrs	r5, r5, #21
   234a8:	2d01      	cmp	r5, #1
   234aa:	dc00      	bgt.n	234ae <__aeabi_dsub+0x26a>
   234ac:	e0f2      	b.n	23694 <__aeabi_dsub+0x450>
   234ae:	4650      	mov	r0, sl
   234b0:	1a80      	subs	r0, r0, r2
   234b2:	4582      	cmp	sl, r0
   234b4:	41bf      	sbcs	r7, r7
   234b6:	1a65      	subs	r5, r4, r1
   234b8:	427f      	negs	r7, r7
   234ba:	1bed      	subs	r5, r5, r7
   234bc:	4684      	mov	ip, r0
   234be:	0228      	lsls	r0, r5, #8
   234c0:	d400      	bmi.n	234c4 <__aeabi_dsub+0x280>
   234c2:	e08c      	b.n	235de <__aeabi_dsub+0x39a>
   234c4:	4650      	mov	r0, sl
   234c6:	1a17      	subs	r7, r2, r0
   234c8:	42ba      	cmp	r2, r7
   234ca:	4192      	sbcs	r2, r2
   234cc:	1b0c      	subs	r4, r1, r4
   234ce:	4255      	negs	r5, r2
   234d0:	1b65      	subs	r5, r4, r5
   234d2:	4698      	mov	r8, r3
   234d4:	e714      	b.n	23300 <__aeabi_dsub+0xbc>
   234d6:	2501      	movs	r5, #1
   234d8:	4643      	mov	r3, r8
   234da:	2400      	movs	r4, #0
   234dc:	401d      	ands	r5, r3
   234de:	2700      	movs	r7, #0
   234e0:	e755      	b.n	2338e <__aeabi_dsub+0x14a>
   234e2:	4c2a      	ldr	r4, [pc, #168]	; (2358c <__aeabi_dsub+0x348>)
   234e4:	1af6      	subs	r6, r6, r3
   234e6:	402c      	ands	r4, r5
   234e8:	e732      	b.n	23350 <__aeabi_dsub+0x10c>
   234ea:	003d      	movs	r5, r7
   234ec:	3828      	subs	r0, #40	; 0x28
   234ee:	4085      	lsls	r5, r0
   234f0:	2700      	movs	r7, #0
   234f2:	e717      	b.n	23324 <__aeabi_dsub+0xe0>
   234f4:	0038      	movs	r0, r7
   234f6:	f7fd fd4f 	bl	20f98 <__clzsi2>
   234fa:	3020      	adds	r0, #32
   234fc:	e706      	b.n	2330c <__aeabi_dsub+0xc8>
   234fe:	430a      	orrs	r2, r1
   23500:	0017      	movs	r7, r2
   23502:	2100      	movs	r1, #0
   23504:	1e7a      	subs	r2, r7, #1
   23506:	4197      	sbcs	r7, r2
   23508:	e6ee      	b.n	232e8 <__aeabi_dsub+0xa4>
   2350a:	2b00      	cmp	r3, #0
   2350c:	d000      	beq.n	23510 <__aeabi_dsub+0x2cc>
   2350e:	e0e5      	b.n	236dc <__aeabi_dsub+0x498>
   23510:	1c73      	adds	r3, r6, #1
   23512:	469c      	mov	ip, r3
   23514:	055b      	lsls	r3, r3, #21
   23516:	0d5b      	lsrs	r3, r3, #21
   23518:	2b01      	cmp	r3, #1
   2351a:	dc00      	bgt.n	2351e <__aeabi_dsub+0x2da>
   2351c:	e09f      	b.n	2365e <__aeabi_dsub+0x41a>
   2351e:	4b1a      	ldr	r3, [pc, #104]	; (23588 <__aeabi_dsub+0x344>)
   23520:	459c      	cmp	ip, r3
   23522:	d100      	bne.n	23526 <__aeabi_dsub+0x2e2>
   23524:	e0c5      	b.n	236b2 <__aeabi_dsub+0x46e>
   23526:	4452      	add	r2, sl
   23528:	4552      	cmp	r2, sl
   2352a:	4180      	sbcs	r0, r0
   2352c:	1864      	adds	r4, r4, r1
   2352e:	4240      	negs	r0, r0
   23530:	1824      	adds	r4, r4, r0
   23532:	07e7      	lsls	r7, r4, #31
   23534:	0852      	lsrs	r2, r2, #1
   23536:	4317      	orrs	r7, r2
   23538:	0864      	lsrs	r4, r4, #1
   2353a:	4666      	mov	r6, ip
   2353c:	e708      	b.n	23350 <__aeabi_dsub+0x10c>
   2353e:	4812      	ldr	r0, [pc, #72]	; (23588 <__aeabi_dsub+0x344>)
   23540:	4285      	cmp	r5, r0
   23542:	d100      	bne.n	23546 <__aeabi_dsub+0x302>
   23544:	e085      	b.n	23652 <__aeabi_dsub+0x40e>
   23546:	001d      	movs	r5, r3
   23548:	e6bc      	b.n	232c4 <__aeabi_dsub+0x80>
   2354a:	0029      	movs	r1, r5
   2354c:	3e1f      	subs	r6, #31
   2354e:	40f1      	lsrs	r1, r6
   23550:	2b20      	cmp	r3, #32
   23552:	d100      	bne.n	23556 <__aeabi_dsub+0x312>
   23554:	e07f      	b.n	23656 <__aeabi_dsub+0x412>
   23556:	2240      	movs	r2, #64	; 0x40
   23558:	1ad3      	subs	r3, r2, r3
   2355a:	409d      	lsls	r5, r3
   2355c:	432f      	orrs	r7, r5
   2355e:	1e7d      	subs	r5, r7, #1
   23560:	41af      	sbcs	r7, r5
   23562:	2400      	movs	r4, #0
   23564:	430f      	orrs	r7, r1
   23566:	2600      	movs	r6, #0
   23568:	e78e      	b.n	23488 <__aeabi_dsub+0x244>
   2356a:	002b      	movs	r3, r5
   2356c:	000f      	movs	r7, r1
   2356e:	3b20      	subs	r3, #32
   23570:	40df      	lsrs	r7, r3
   23572:	2d20      	cmp	r5, #32
   23574:	d071      	beq.n	2365a <__aeabi_dsub+0x416>
   23576:	2340      	movs	r3, #64	; 0x40
   23578:	1b5d      	subs	r5, r3, r5
   2357a:	40a9      	lsls	r1, r5
   2357c:	430a      	orrs	r2, r1
   2357e:	1e51      	subs	r1, r2, #1
   23580:	418a      	sbcs	r2, r1
   23582:	2100      	movs	r1, #0
   23584:	4317      	orrs	r7, r2
   23586:	e6af      	b.n	232e8 <__aeabi_dsub+0xa4>
   23588:	000007ff 	.word	0x000007ff
   2358c:	ff7fffff 	.word	0xff7fffff
   23590:	800fffff 	.word	0x800fffff
   23594:	2e00      	cmp	r6, #0
   23596:	d03e      	beq.n	23616 <__aeabi_dsub+0x3d2>
   23598:	4eb3      	ldr	r6, [pc, #716]	; (23868 <__aeabi_dsub+0x624>)
   2359a:	45b4      	cmp	ip, r6
   2359c:	d045      	beq.n	2362a <__aeabi_dsub+0x3e6>
   2359e:	2680      	movs	r6, #128	; 0x80
   235a0:	0436      	lsls	r6, r6, #16
   235a2:	426d      	negs	r5, r5
   235a4:	4334      	orrs	r4, r6
   235a6:	2d38      	cmp	r5, #56	; 0x38
   235a8:	dd00      	ble.n	235ac <__aeabi_dsub+0x368>
   235aa:	e0a8      	b.n	236fe <__aeabi_dsub+0x4ba>
   235ac:	2d1f      	cmp	r5, #31
   235ae:	dd00      	ble.n	235b2 <__aeabi_dsub+0x36e>
   235b0:	e11f      	b.n	237f2 <__aeabi_dsub+0x5ae>
   235b2:	2620      	movs	r6, #32
   235b4:	0027      	movs	r7, r4
   235b6:	4650      	mov	r0, sl
   235b8:	1b76      	subs	r6, r6, r5
   235ba:	40b7      	lsls	r7, r6
   235bc:	40e8      	lsrs	r0, r5
   235be:	4307      	orrs	r7, r0
   235c0:	4650      	mov	r0, sl
   235c2:	40b0      	lsls	r0, r6
   235c4:	1e46      	subs	r6, r0, #1
   235c6:	41b0      	sbcs	r0, r6
   235c8:	40ec      	lsrs	r4, r5
   235ca:	4338      	orrs	r0, r7
   235cc:	1a17      	subs	r7, r2, r0
   235ce:	42ba      	cmp	r2, r7
   235d0:	4192      	sbcs	r2, r2
   235d2:	1b0c      	subs	r4, r1, r4
   235d4:	4252      	negs	r2, r2
   235d6:	1aa4      	subs	r4, r4, r2
   235d8:	4666      	mov	r6, ip
   235da:	4698      	mov	r8, r3
   235dc:	e68b      	b.n	232f6 <__aeabi_dsub+0xb2>
   235de:	4664      	mov	r4, ip
   235e0:	4667      	mov	r7, ip
   235e2:	432c      	orrs	r4, r5
   235e4:	d000      	beq.n	235e8 <__aeabi_dsub+0x3a4>
   235e6:	e68b      	b.n	23300 <__aeabi_dsub+0xbc>
   235e8:	2500      	movs	r5, #0
   235ea:	2600      	movs	r6, #0
   235ec:	2700      	movs	r7, #0
   235ee:	e6ea      	b.n	233c6 <__aeabi_dsub+0x182>
   235f0:	001e      	movs	r6, r3
   235f2:	e6ad      	b.n	23350 <__aeabi_dsub+0x10c>
   235f4:	2b1f      	cmp	r3, #31
   235f6:	dc60      	bgt.n	236ba <__aeabi_dsub+0x476>
   235f8:	2720      	movs	r7, #32
   235fa:	1af8      	subs	r0, r7, r3
   235fc:	000f      	movs	r7, r1
   235fe:	4684      	mov	ip, r0
   23600:	4087      	lsls	r7, r0
   23602:	0010      	movs	r0, r2
   23604:	40d8      	lsrs	r0, r3
   23606:	4307      	orrs	r7, r0
   23608:	4660      	mov	r0, ip
   2360a:	4082      	lsls	r2, r0
   2360c:	1e50      	subs	r0, r2, #1
   2360e:	4182      	sbcs	r2, r0
   23610:	40d9      	lsrs	r1, r3
   23612:	4317      	orrs	r7, r2
   23614:	e6f5      	b.n	23402 <__aeabi_dsub+0x1be>
   23616:	0026      	movs	r6, r4
   23618:	4650      	mov	r0, sl
   2361a:	4306      	orrs	r6, r0
   2361c:	d005      	beq.n	2362a <__aeabi_dsub+0x3e6>
   2361e:	43ed      	mvns	r5, r5
   23620:	2d00      	cmp	r5, #0
   23622:	d0d3      	beq.n	235cc <__aeabi_dsub+0x388>
   23624:	4e90      	ldr	r6, [pc, #576]	; (23868 <__aeabi_dsub+0x624>)
   23626:	45b4      	cmp	ip, r6
   23628:	d1bd      	bne.n	235a6 <__aeabi_dsub+0x362>
   2362a:	000c      	movs	r4, r1
   2362c:	0017      	movs	r7, r2
   2362e:	4666      	mov	r6, ip
   23630:	4698      	mov	r8, r3
   23632:	e68d      	b.n	23350 <__aeabi_dsub+0x10c>
   23634:	488c      	ldr	r0, [pc, #560]	; (23868 <__aeabi_dsub+0x624>)
   23636:	4283      	cmp	r3, r0
   23638:	d00b      	beq.n	23652 <__aeabi_dsub+0x40e>
   2363a:	4663      	mov	r3, ip
   2363c:	e6d9      	b.n	233f2 <__aeabi_dsub+0x1ae>
   2363e:	2d00      	cmp	r5, #0
   23640:	d000      	beq.n	23644 <__aeabi_dsub+0x400>
   23642:	e096      	b.n	23772 <__aeabi_dsub+0x52e>
   23644:	0008      	movs	r0, r1
   23646:	4310      	orrs	r0, r2
   23648:	d100      	bne.n	2364c <__aeabi_dsub+0x408>
   2364a:	e0e2      	b.n	23812 <__aeabi_dsub+0x5ce>
   2364c:	000c      	movs	r4, r1
   2364e:	0017      	movs	r7, r2
   23650:	4698      	mov	r8, r3
   23652:	4e85      	ldr	r6, [pc, #532]	; (23868 <__aeabi_dsub+0x624>)
   23654:	e67c      	b.n	23350 <__aeabi_dsub+0x10c>
   23656:	2500      	movs	r5, #0
   23658:	e780      	b.n	2355c <__aeabi_dsub+0x318>
   2365a:	2100      	movs	r1, #0
   2365c:	e78e      	b.n	2357c <__aeabi_dsub+0x338>
   2365e:	0023      	movs	r3, r4
   23660:	4650      	mov	r0, sl
   23662:	4303      	orrs	r3, r0
   23664:	2e00      	cmp	r6, #0
   23666:	d000      	beq.n	2366a <__aeabi_dsub+0x426>
   23668:	e0a8      	b.n	237bc <__aeabi_dsub+0x578>
   2366a:	2b00      	cmp	r3, #0
   2366c:	d100      	bne.n	23670 <__aeabi_dsub+0x42c>
   2366e:	e0de      	b.n	2382e <__aeabi_dsub+0x5ea>
   23670:	000b      	movs	r3, r1
   23672:	4313      	orrs	r3, r2
   23674:	d100      	bne.n	23678 <__aeabi_dsub+0x434>
   23676:	e66b      	b.n	23350 <__aeabi_dsub+0x10c>
   23678:	4452      	add	r2, sl
   2367a:	4552      	cmp	r2, sl
   2367c:	4180      	sbcs	r0, r0
   2367e:	1864      	adds	r4, r4, r1
   23680:	4240      	negs	r0, r0
   23682:	1824      	adds	r4, r4, r0
   23684:	0017      	movs	r7, r2
   23686:	0223      	lsls	r3, r4, #8
   23688:	d400      	bmi.n	2368c <__aeabi_dsub+0x448>
   2368a:	e6fd      	b.n	23488 <__aeabi_dsub+0x244>
   2368c:	4b77      	ldr	r3, [pc, #476]	; (2386c <__aeabi_dsub+0x628>)
   2368e:	4666      	mov	r6, ip
   23690:	401c      	ands	r4, r3
   23692:	e65d      	b.n	23350 <__aeabi_dsub+0x10c>
   23694:	0025      	movs	r5, r4
   23696:	4650      	mov	r0, sl
   23698:	4305      	orrs	r5, r0
   2369a:	2e00      	cmp	r6, #0
   2369c:	d1cf      	bne.n	2363e <__aeabi_dsub+0x3fa>
   2369e:	2d00      	cmp	r5, #0
   236a0:	d14f      	bne.n	23742 <__aeabi_dsub+0x4fe>
   236a2:	000c      	movs	r4, r1
   236a4:	4314      	orrs	r4, r2
   236a6:	d100      	bne.n	236aa <__aeabi_dsub+0x466>
   236a8:	e0a0      	b.n	237ec <__aeabi_dsub+0x5a8>
   236aa:	000c      	movs	r4, r1
   236ac:	0017      	movs	r7, r2
   236ae:	4698      	mov	r8, r3
   236b0:	e64e      	b.n	23350 <__aeabi_dsub+0x10c>
   236b2:	4666      	mov	r6, ip
   236b4:	2400      	movs	r4, #0
   236b6:	2700      	movs	r7, #0
   236b8:	e685      	b.n	233c6 <__aeabi_dsub+0x182>
   236ba:	001f      	movs	r7, r3
   236bc:	0008      	movs	r0, r1
   236be:	3f20      	subs	r7, #32
   236c0:	40f8      	lsrs	r0, r7
   236c2:	0007      	movs	r7, r0
   236c4:	2b20      	cmp	r3, #32
   236c6:	d100      	bne.n	236ca <__aeabi_dsub+0x486>
   236c8:	e08e      	b.n	237e8 <__aeabi_dsub+0x5a4>
   236ca:	2040      	movs	r0, #64	; 0x40
   236cc:	1ac3      	subs	r3, r0, r3
   236ce:	4099      	lsls	r1, r3
   236d0:	430a      	orrs	r2, r1
   236d2:	1e51      	subs	r1, r2, #1
   236d4:	418a      	sbcs	r2, r1
   236d6:	2100      	movs	r1, #0
   236d8:	4317      	orrs	r7, r2
   236da:	e692      	b.n	23402 <__aeabi_dsub+0x1be>
   236dc:	2e00      	cmp	r6, #0
   236de:	d114      	bne.n	2370a <__aeabi_dsub+0x4c6>
   236e0:	0026      	movs	r6, r4
   236e2:	4650      	mov	r0, sl
   236e4:	4306      	orrs	r6, r0
   236e6:	d062      	beq.n	237ae <__aeabi_dsub+0x56a>
   236e8:	43db      	mvns	r3, r3
   236ea:	2b00      	cmp	r3, #0
   236ec:	d15c      	bne.n	237a8 <__aeabi_dsub+0x564>
   236ee:	1887      	adds	r7, r0, r2
   236f0:	4297      	cmp	r7, r2
   236f2:	4192      	sbcs	r2, r2
   236f4:	1864      	adds	r4, r4, r1
   236f6:	4252      	negs	r2, r2
   236f8:	18a4      	adds	r4, r4, r2
   236fa:	4666      	mov	r6, ip
   236fc:	e687      	b.n	2340e <__aeabi_dsub+0x1ca>
   236fe:	4650      	mov	r0, sl
   23700:	4320      	orrs	r0, r4
   23702:	1e44      	subs	r4, r0, #1
   23704:	41a0      	sbcs	r0, r4
   23706:	2400      	movs	r4, #0
   23708:	e760      	b.n	235cc <__aeabi_dsub+0x388>
   2370a:	4e57      	ldr	r6, [pc, #348]	; (23868 <__aeabi_dsub+0x624>)
   2370c:	45b4      	cmp	ip, r6
   2370e:	d04e      	beq.n	237ae <__aeabi_dsub+0x56a>
   23710:	2680      	movs	r6, #128	; 0x80
   23712:	0436      	lsls	r6, r6, #16
   23714:	425b      	negs	r3, r3
   23716:	4334      	orrs	r4, r6
   23718:	2b38      	cmp	r3, #56	; 0x38
   2371a:	dd00      	ble.n	2371e <__aeabi_dsub+0x4da>
   2371c:	e07f      	b.n	2381e <__aeabi_dsub+0x5da>
   2371e:	2b1f      	cmp	r3, #31
   23720:	dd00      	ble.n	23724 <__aeabi_dsub+0x4e0>
   23722:	e08b      	b.n	2383c <__aeabi_dsub+0x5f8>
   23724:	2620      	movs	r6, #32
   23726:	0027      	movs	r7, r4
   23728:	4650      	mov	r0, sl
   2372a:	1af6      	subs	r6, r6, r3
   2372c:	40b7      	lsls	r7, r6
   2372e:	40d8      	lsrs	r0, r3
   23730:	4307      	orrs	r7, r0
   23732:	4650      	mov	r0, sl
   23734:	40b0      	lsls	r0, r6
   23736:	1e46      	subs	r6, r0, #1
   23738:	41b0      	sbcs	r0, r6
   2373a:	4307      	orrs	r7, r0
   2373c:	40dc      	lsrs	r4, r3
   2373e:	18bf      	adds	r7, r7, r2
   23740:	e7d6      	b.n	236f0 <__aeabi_dsub+0x4ac>
   23742:	000d      	movs	r5, r1
   23744:	4315      	orrs	r5, r2
   23746:	d100      	bne.n	2374a <__aeabi_dsub+0x506>
   23748:	e602      	b.n	23350 <__aeabi_dsub+0x10c>
   2374a:	4650      	mov	r0, sl
   2374c:	1a80      	subs	r0, r0, r2
   2374e:	4582      	cmp	sl, r0
   23750:	41bf      	sbcs	r7, r7
   23752:	1a65      	subs	r5, r4, r1
   23754:	427f      	negs	r7, r7
   23756:	1bed      	subs	r5, r5, r7
   23758:	4684      	mov	ip, r0
   2375a:	0228      	lsls	r0, r5, #8
   2375c:	d400      	bmi.n	23760 <__aeabi_dsub+0x51c>
   2375e:	e68d      	b.n	2347c <__aeabi_dsub+0x238>
   23760:	4650      	mov	r0, sl
   23762:	1a17      	subs	r7, r2, r0
   23764:	42ba      	cmp	r2, r7
   23766:	4192      	sbcs	r2, r2
   23768:	1b0c      	subs	r4, r1, r4
   2376a:	4252      	negs	r2, r2
   2376c:	1aa4      	subs	r4, r4, r2
   2376e:	4698      	mov	r8, r3
   23770:	e5ee      	b.n	23350 <__aeabi_dsub+0x10c>
   23772:	000d      	movs	r5, r1
   23774:	4315      	orrs	r5, r2
   23776:	d100      	bne.n	2377a <__aeabi_dsub+0x536>
   23778:	e76b      	b.n	23652 <__aeabi_dsub+0x40e>
   2377a:	4650      	mov	r0, sl
   2377c:	0767      	lsls	r7, r4, #29
   2377e:	08c0      	lsrs	r0, r0, #3
   23780:	4307      	orrs	r7, r0
   23782:	2080      	movs	r0, #128	; 0x80
   23784:	08e4      	lsrs	r4, r4, #3
   23786:	0300      	lsls	r0, r0, #12
   23788:	4204      	tst	r4, r0
   2378a:	d007      	beq.n	2379c <__aeabi_dsub+0x558>
   2378c:	08cd      	lsrs	r5, r1, #3
   2378e:	4205      	tst	r5, r0
   23790:	d104      	bne.n	2379c <__aeabi_dsub+0x558>
   23792:	002c      	movs	r4, r5
   23794:	4698      	mov	r8, r3
   23796:	08d7      	lsrs	r7, r2, #3
   23798:	0749      	lsls	r1, r1, #29
   2379a:	430f      	orrs	r7, r1
   2379c:	0f7b      	lsrs	r3, r7, #29
   2379e:	00e4      	lsls	r4, r4, #3
   237a0:	431c      	orrs	r4, r3
   237a2:	00ff      	lsls	r7, r7, #3
   237a4:	4e30      	ldr	r6, [pc, #192]	; (23868 <__aeabi_dsub+0x624>)
   237a6:	e5d3      	b.n	23350 <__aeabi_dsub+0x10c>
   237a8:	4e2f      	ldr	r6, [pc, #188]	; (23868 <__aeabi_dsub+0x624>)
   237aa:	45b4      	cmp	ip, r6
   237ac:	d1b4      	bne.n	23718 <__aeabi_dsub+0x4d4>
   237ae:	000c      	movs	r4, r1
   237b0:	0017      	movs	r7, r2
   237b2:	4666      	mov	r6, ip
   237b4:	e5cc      	b.n	23350 <__aeabi_dsub+0x10c>
   237b6:	2700      	movs	r7, #0
   237b8:	2400      	movs	r4, #0
   237ba:	e5e8      	b.n	2338e <__aeabi_dsub+0x14a>
   237bc:	2b00      	cmp	r3, #0
   237be:	d039      	beq.n	23834 <__aeabi_dsub+0x5f0>
   237c0:	000b      	movs	r3, r1
   237c2:	4313      	orrs	r3, r2
   237c4:	d100      	bne.n	237c8 <__aeabi_dsub+0x584>
   237c6:	e744      	b.n	23652 <__aeabi_dsub+0x40e>
   237c8:	08c0      	lsrs	r0, r0, #3
   237ca:	0767      	lsls	r7, r4, #29
   237cc:	4307      	orrs	r7, r0
   237ce:	2080      	movs	r0, #128	; 0x80
   237d0:	08e4      	lsrs	r4, r4, #3
   237d2:	0300      	lsls	r0, r0, #12
   237d4:	4204      	tst	r4, r0
   237d6:	d0e1      	beq.n	2379c <__aeabi_dsub+0x558>
   237d8:	08cb      	lsrs	r3, r1, #3
   237da:	4203      	tst	r3, r0
   237dc:	d1de      	bne.n	2379c <__aeabi_dsub+0x558>
   237de:	08d7      	lsrs	r7, r2, #3
   237e0:	0749      	lsls	r1, r1, #29
   237e2:	430f      	orrs	r7, r1
   237e4:	001c      	movs	r4, r3
   237e6:	e7d9      	b.n	2379c <__aeabi_dsub+0x558>
   237e8:	2100      	movs	r1, #0
   237ea:	e771      	b.n	236d0 <__aeabi_dsub+0x48c>
   237ec:	2500      	movs	r5, #0
   237ee:	2700      	movs	r7, #0
   237f0:	e5e9      	b.n	233c6 <__aeabi_dsub+0x182>
   237f2:	002e      	movs	r6, r5
   237f4:	0027      	movs	r7, r4
   237f6:	3e20      	subs	r6, #32
   237f8:	40f7      	lsrs	r7, r6
   237fa:	2d20      	cmp	r5, #32
   237fc:	d02f      	beq.n	2385e <__aeabi_dsub+0x61a>
   237fe:	2640      	movs	r6, #64	; 0x40
   23800:	1b75      	subs	r5, r6, r5
   23802:	40ac      	lsls	r4, r5
   23804:	4650      	mov	r0, sl
   23806:	4320      	orrs	r0, r4
   23808:	1e44      	subs	r4, r0, #1
   2380a:	41a0      	sbcs	r0, r4
   2380c:	2400      	movs	r4, #0
   2380e:	4338      	orrs	r0, r7
   23810:	e6dc      	b.n	235cc <__aeabi_dsub+0x388>
   23812:	2480      	movs	r4, #128	; 0x80
   23814:	2500      	movs	r5, #0
   23816:	0324      	lsls	r4, r4, #12
   23818:	4e13      	ldr	r6, [pc, #76]	; (23868 <__aeabi_dsub+0x624>)
   2381a:	2700      	movs	r7, #0
   2381c:	e5d3      	b.n	233c6 <__aeabi_dsub+0x182>
   2381e:	4650      	mov	r0, sl
   23820:	4320      	orrs	r0, r4
   23822:	0007      	movs	r7, r0
   23824:	1e78      	subs	r0, r7, #1
   23826:	4187      	sbcs	r7, r0
   23828:	2400      	movs	r4, #0
   2382a:	18bf      	adds	r7, r7, r2
   2382c:	e760      	b.n	236f0 <__aeabi_dsub+0x4ac>
   2382e:	000c      	movs	r4, r1
   23830:	0017      	movs	r7, r2
   23832:	e58d      	b.n	23350 <__aeabi_dsub+0x10c>
   23834:	000c      	movs	r4, r1
   23836:	0017      	movs	r7, r2
   23838:	4e0b      	ldr	r6, [pc, #44]	; (23868 <__aeabi_dsub+0x624>)
   2383a:	e589      	b.n	23350 <__aeabi_dsub+0x10c>
   2383c:	001e      	movs	r6, r3
   2383e:	0027      	movs	r7, r4
   23840:	3e20      	subs	r6, #32
   23842:	40f7      	lsrs	r7, r6
   23844:	2b20      	cmp	r3, #32
   23846:	d00c      	beq.n	23862 <__aeabi_dsub+0x61e>
   23848:	2640      	movs	r6, #64	; 0x40
   2384a:	1af3      	subs	r3, r6, r3
   2384c:	409c      	lsls	r4, r3
   2384e:	4650      	mov	r0, sl
   23850:	4320      	orrs	r0, r4
   23852:	1e44      	subs	r4, r0, #1
   23854:	41a0      	sbcs	r0, r4
   23856:	4307      	orrs	r7, r0
   23858:	2400      	movs	r4, #0
   2385a:	18bf      	adds	r7, r7, r2
   2385c:	e748      	b.n	236f0 <__aeabi_dsub+0x4ac>
   2385e:	2400      	movs	r4, #0
   23860:	e7d0      	b.n	23804 <__aeabi_dsub+0x5c0>
   23862:	2400      	movs	r4, #0
   23864:	e7f3      	b.n	2384e <__aeabi_dsub+0x60a>
   23866:	46c0      	nop			; (mov r8, r8)
   23868:	000007ff 	.word	0x000007ff
   2386c:	ff7fffff 	.word	0xff7fffff

00023870 <__aeabi_dcmpun>:
   23870:	b570      	push	{r4, r5, r6, lr}
   23872:	4e0e      	ldr	r6, [pc, #56]	; (238ac <__aeabi_dcmpun+0x3c>)
   23874:	030d      	lsls	r5, r1, #12
   23876:	031c      	lsls	r4, r3, #12
   23878:	0049      	lsls	r1, r1, #1
   2387a:	005b      	lsls	r3, r3, #1
   2387c:	0b2d      	lsrs	r5, r5, #12
   2387e:	0d49      	lsrs	r1, r1, #21
   23880:	0b24      	lsrs	r4, r4, #12
   23882:	0d5b      	lsrs	r3, r3, #21
   23884:	42b1      	cmp	r1, r6
   23886:	d004      	beq.n	23892 <__aeabi_dcmpun+0x22>
   23888:	4908      	ldr	r1, [pc, #32]	; (238ac <__aeabi_dcmpun+0x3c>)
   2388a:	2000      	movs	r0, #0
   2388c:	428b      	cmp	r3, r1
   2388e:	d008      	beq.n	238a2 <__aeabi_dcmpun+0x32>
   23890:	bd70      	pop	{r4, r5, r6, pc}
   23892:	4305      	orrs	r5, r0
   23894:	2001      	movs	r0, #1
   23896:	2d00      	cmp	r5, #0
   23898:	d1fa      	bne.n	23890 <__aeabi_dcmpun+0x20>
   2389a:	4904      	ldr	r1, [pc, #16]	; (238ac <__aeabi_dcmpun+0x3c>)
   2389c:	2000      	movs	r0, #0
   2389e:	428b      	cmp	r3, r1
   238a0:	d1f6      	bne.n	23890 <__aeabi_dcmpun+0x20>
   238a2:	4314      	orrs	r4, r2
   238a4:	0020      	movs	r0, r4
   238a6:	1e44      	subs	r4, r0, #1
   238a8:	41a0      	sbcs	r0, r4
   238aa:	e7f1      	b.n	23890 <__aeabi_dcmpun+0x20>
   238ac:	000007ff 	.word	0x000007ff

000238b0 <__aeabi_d2iz>:
   238b0:	b530      	push	{r4, r5, lr}
   238b2:	4d13      	ldr	r5, [pc, #76]	; (23900 <__aeabi_d2iz+0x50>)
   238b4:	030a      	lsls	r2, r1, #12
   238b6:	004b      	lsls	r3, r1, #1
   238b8:	0b12      	lsrs	r2, r2, #12
   238ba:	0d5b      	lsrs	r3, r3, #21
   238bc:	0fc9      	lsrs	r1, r1, #31
   238be:	2400      	movs	r4, #0
   238c0:	42ab      	cmp	r3, r5
   238c2:	dd10      	ble.n	238e6 <__aeabi_d2iz+0x36>
   238c4:	4c0f      	ldr	r4, [pc, #60]	; (23904 <__aeabi_d2iz+0x54>)
   238c6:	42a3      	cmp	r3, r4
   238c8:	dc0f      	bgt.n	238ea <__aeabi_d2iz+0x3a>
   238ca:	2480      	movs	r4, #128	; 0x80
   238cc:	4d0e      	ldr	r5, [pc, #56]	; (23908 <__aeabi_d2iz+0x58>)
   238ce:	0364      	lsls	r4, r4, #13
   238d0:	4322      	orrs	r2, r4
   238d2:	1aed      	subs	r5, r5, r3
   238d4:	2d1f      	cmp	r5, #31
   238d6:	dd0b      	ble.n	238f0 <__aeabi_d2iz+0x40>
   238d8:	480c      	ldr	r0, [pc, #48]	; (2390c <__aeabi_d2iz+0x5c>)
   238da:	1ac3      	subs	r3, r0, r3
   238dc:	40da      	lsrs	r2, r3
   238de:	4254      	negs	r4, r2
   238e0:	2900      	cmp	r1, #0
   238e2:	d100      	bne.n	238e6 <__aeabi_d2iz+0x36>
   238e4:	0014      	movs	r4, r2
   238e6:	0020      	movs	r0, r4
   238e8:	bd30      	pop	{r4, r5, pc}
   238ea:	4b09      	ldr	r3, [pc, #36]	; (23910 <__aeabi_d2iz+0x60>)
   238ec:	18cc      	adds	r4, r1, r3
   238ee:	e7fa      	b.n	238e6 <__aeabi_d2iz+0x36>
   238f0:	4c08      	ldr	r4, [pc, #32]	; (23914 <__aeabi_d2iz+0x64>)
   238f2:	40e8      	lsrs	r0, r5
   238f4:	46a4      	mov	ip, r4
   238f6:	4463      	add	r3, ip
   238f8:	409a      	lsls	r2, r3
   238fa:	4302      	orrs	r2, r0
   238fc:	e7ef      	b.n	238de <__aeabi_d2iz+0x2e>
   238fe:	46c0      	nop			; (mov r8, r8)
   23900:	000003fe 	.word	0x000003fe
   23904:	0000041d 	.word	0x0000041d
   23908:	00000433 	.word	0x00000433
   2390c:	00000413 	.word	0x00000413
   23910:	7fffffff 	.word	0x7fffffff
   23914:	fffffbed 	.word	0xfffffbed

00023918 <__aeabi_i2d>:
   23918:	b570      	push	{r4, r5, r6, lr}
   2391a:	2800      	cmp	r0, #0
   2391c:	d030      	beq.n	23980 <__aeabi_i2d+0x68>
   2391e:	17c3      	asrs	r3, r0, #31
   23920:	18c4      	adds	r4, r0, r3
   23922:	405c      	eors	r4, r3
   23924:	0fc5      	lsrs	r5, r0, #31
   23926:	0020      	movs	r0, r4
   23928:	f7fd fb36 	bl	20f98 <__clzsi2>
   2392c:	4b17      	ldr	r3, [pc, #92]	; (2398c <__aeabi_i2d+0x74>)
   2392e:	4a18      	ldr	r2, [pc, #96]	; (23990 <__aeabi_i2d+0x78>)
   23930:	1a1b      	subs	r3, r3, r0
   23932:	1ad2      	subs	r2, r2, r3
   23934:	2a1f      	cmp	r2, #31
   23936:	dd18      	ble.n	2396a <__aeabi_i2d+0x52>
   23938:	4a16      	ldr	r2, [pc, #88]	; (23994 <__aeabi_i2d+0x7c>)
   2393a:	1ad2      	subs	r2, r2, r3
   2393c:	4094      	lsls	r4, r2
   2393e:	2200      	movs	r2, #0
   23940:	0324      	lsls	r4, r4, #12
   23942:	055b      	lsls	r3, r3, #21
   23944:	0b24      	lsrs	r4, r4, #12
   23946:	0d5b      	lsrs	r3, r3, #21
   23948:	2100      	movs	r1, #0
   2394a:	0010      	movs	r0, r2
   2394c:	0324      	lsls	r4, r4, #12
   2394e:	0d0a      	lsrs	r2, r1, #20
   23950:	0b24      	lsrs	r4, r4, #12
   23952:	0512      	lsls	r2, r2, #20
   23954:	4322      	orrs	r2, r4
   23956:	4c10      	ldr	r4, [pc, #64]	; (23998 <__aeabi_i2d+0x80>)
   23958:	051b      	lsls	r3, r3, #20
   2395a:	4022      	ands	r2, r4
   2395c:	4313      	orrs	r3, r2
   2395e:	005b      	lsls	r3, r3, #1
   23960:	07ed      	lsls	r5, r5, #31
   23962:	085b      	lsrs	r3, r3, #1
   23964:	432b      	orrs	r3, r5
   23966:	0019      	movs	r1, r3
   23968:	bd70      	pop	{r4, r5, r6, pc}
   2396a:	0021      	movs	r1, r4
   2396c:	4091      	lsls	r1, r2
   2396e:	000a      	movs	r2, r1
   23970:	210b      	movs	r1, #11
   23972:	1a08      	subs	r0, r1, r0
   23974:	40c4      	lsrs	r4, r0
   23976:	055b      	lsls	r3, r3, #21
   23978:	0324      	lsls	r4, r4, #12
   2397a:	0b24      	lsrs	r4, r4, #12
   2397c:	0d5b      	lsrs	r3, r3, #21
   2397e:	e7e3      	b.n	23948 <__aeabi_i2d+0x30>
   23980:	2500      	movs	r5, #0
   23982:	2300      	movs	r3, #0
   23984:	2400      	movs	r4, #0
   23986:	2200      	movs	r2, #0
   23988:	e7de      	b.n	23948 <__aeabi_i2d+0x30>
   2398a:	46c0      	nop			; (mov r8, r8)
   2398c:	0000041e 	.word	0x0000041e
   23990:	00000433 	.word	0x00000433
   23994:	00000413 	.word	0x00000413
   23998:	800fffff 	.word	0x800fffff

0002399c <__aeabi_ui2d>:
   2399c:	b510      	push	{r4, lr}
   2399e:	1e04      	subs	r4, r0, #0
   239a0:	d028      	beq.n	239f4 <__aeabi_ui2d+0x58>
   239a2:	f7fd faf9 	bl	20f98 <__clzsi2>
   239a6:	4b15      	ldr	r3, [pc, #84]	; (239fc <__aeabi_ui2d+0x60>)
   239a8:	4a15      	ldr	r2, [pc, #84]	; (23a00 <__aeabi_ui2d+0x64>)
   239aa:	1a1b      	subs	r3, r3, r0
   239ac:	1ad2      	subs	r2, r2, r3
   239ae:	2a1f      	cmp	r2, #31
   239b0:	dd15      	ble.n	239de <__aeabi_ui2d+0x42>
   239b2:	4a14      	ldr	r2, [pc, #80]	; (23a04 <__aeabi_ui2d+0x68>)
   239b4:	1ad2      	subs	r2, r2, r3
   239b6:	4094      	lsls	r4, r2
   239b8:	2200      	movs	r2, #0
   239ba:	0324      	lsls	r4, r4, #12
   239bc:	055b      	lsls	r3, r3, #21
   239be:	0b24      	lsrs	r4, r4, #12
   239c0:	0d5b      	lsrs	r3, r3, #21
   239c2:	2100      	movs	r1, #0
   239c4:	0010      	movs	r0, r2
   239c6:	0324      	lsls	r4, r4, #12
   239c8:	0d0a      	lsrs	r2, r1, #20
   239ca:	0b24      	lsrs	r4, r4, #12
   239cc:	0512      	lsls	r2, r2, #20
   239ce:	4322      	orrs	r2, r4
   239d0:	4c0d      	ldr	r4, [pc, #52]	; (23a08 <__aeabi_ui2d+0x6c>)
   239d2:	051b      	lsls	r3, r3, #20
   239d4:	4022      	ands	r2, r4
   239d6:	4313      	orrs	r3, r2
   239d8:	005b      	lsls	r3, r3, #1
   239da:	0859      	lsrs	r1, r3, #1
   239dc:	bd10      	pop	{r4, pc}
   239de:	0021      	movs	r1, r4
   239e0:	4091      	lsls	r1, r2
   239e2:	000a      	movs	r2, r1
   239e4:	210b      	movs	r1, #11
   239e6:	1a08      	subs	r0, r1, r0
   239e8:	40c4      	lsrs	r4, r0
   239ea:	055b      	lsls	r3, r3, #21
   239ec:	0324      	lsls	r4, r4, #12
   239ee:	0b24      	lsrs	r4, r4, #12
   239f0:	0d5b      	lsrs	r3, r3, #21
   239f2:	e7e6      	b.n	239c2 <__aeabi_ui2d+0x26>
   239f4:	2300      	movs	r3, #0
   239f6:	2400      	movs	r4, #0
   239f8:	2200      	movs	r2, #0
   239fa:	e7e2      	b.n	239c2 <__aeabi_ui2d+0x26>
   239fc:	0000041e 	.word	0x0000041e
   23a00:	00000433 	.word	0x00000433
   23a04:	00000413 	.word	0x00000413
   23a08:	800fffff 	.word	0x800fffff

00023a0c <__aeabi_f2d>:
   23a0c:	0041      	lsls	r1, r0, #1
   23a0e:	0e09      	lsrs	r1, r1, #24
   23a10:	1c4b      	adds	r3, r1, #1
   23a12:	b570      	push	{r4, r5, r6, lr}
   23a14:	b2db      	uxtb	r3, r3
   23a16:	0246      	lsls	r6, r0, #9
   23a18:	0a75      	lsrs	r5, r6, #9
   23a1a:	0fc4      	lsrs	r4, r0, #31
   23a1c:	2b01      	cmp	r3, #1
   23a1e:	dd14      	ble.n	23a4a <__aeabi_f2d+0x3e>
   23a20:	23e0      	movs	r3, #224	; 0xe0
   23a22:	009b      	lsls	r3, r3, #2
   23a24:	076d      	lsls	r5, r5, #29
   23a26:	0b36      	lsrs	r6, r6, #12
   23a28:	18cb      	adds	r3, r1, r3
   23a2a:	2100      	movs	r1, #0
   23a2c:	0d0a      	lsrs	r2, r1, #20
   23a2e:	0028      	movs	r0, r5
   23a30:	0512      	lsls	r2, r2, #20
   23a32:	4d1c      	ldr	r5, [pc, #112]	; (23aa4 <__aeabi_f2d+0x98>)
   23a34:	4332      	orrs	r2, r6
   23a36:	055b      	lsls	r3, r3, #21
   23a38:	402a      	ands	r2, r5
   23a3a:	085b      	lsrs	r3, r3, #1
   23a3c:	4313      	orrs	r3, r2
   23a3e:	005b      	lsls	r3, r3, #1
   23a40:	07e4      	lsls	r4, r4, #31
   23a42:	085b      	lsrs	r3, r3, #1
   23a44:	4323      	orrs	r3, r4
   23a46:	0019      	movs	r1, r3
   23a48:	bd70      	pop	{r4, r5, r6, pc}
   23a4a:	2900      	cmp	r1, #0
   23a4c:	d114      	bne.n	23a78 <__aeabi_f2d+0x6c>
   23a4e:	2d00      	cmp	r5, #0
   23a50:	d01e      	beq.n	23a90 <__aeabi_f2d+0x84>
   23a52:	0028      	movs	r0, r5
   23a54:	f7fd faa0 	bl	20f98 <__clzsi2>
   23a58:	280a      	cmp	r0, #10
   23a5a:	dc1c      	bgt.n	23a96 <__aeabi_f2d+0x8a>
   23a5c:	230b      	movs	r3, #11
   23a5e:	002a      	movs	r2, r5
   23a60:	1a1b      	subs	r3, r3, r0
   23a62:	40da      	lsrs	r2, r3
   23a64:	0003      	movs	r3, r0
   23a66:	3315      	adds	r3, #21
   23a68:	409d      	lsls	r5, r3
   23a6a:	4b0f      	ldr	r3, [pc, #60]	; (23aa8 <__aeabi_f2d+0x9c>)
   23a6c:	0312      	lsls	r2, r2, #12
   23a6e:	1a1b      	subs	r3, r3, r0
   23a70:	055b      	lsls	r3, r3, #21
   23a72:	0b16      	lsrs	r6, r2, #12
   23a74:	0d5b      	lsrs	r3, r3, #21
   23a76:	e7d8      	b.n	23a2a <__aeabi_f2d+0x1e>
   23a78:	2d00      	cmp	r5, #0
   23a7a:	d006      	beq.n	23a8a <__aeabi_f2d+0x7e>
   23a7c:	0b32      	lsrs	r2, r6, #12
   23a7e:	2680      	movs	r6, #128	; 0x80
   23a80:	0336      	lsls	r6, r6, #12
   23a82:	076d      	lsls	r5, r5, #29
   23a84:	4316      	orrs	r6, r2
   23a86:	4b09      	ldr	r3, [pc, #36]	; (23aac <__aeabi_f2d+0xa0>)
   23a88:	e7cf      	b.n	23a2a <__aeabi_f2d+0x1e>
   23a8a:	4b08      	ldr	r3, [pc, #32]	; (23aac <__aeabi_f2d+0xa0>)
   23a8c:	2600      	movs	r6, #0
   23a8e:	e7cc      	b.n	23a2a <__aeabi_f2d+0x1e>
   23a90:	2300      	movs	r3, #0
   23a92:	2600      	movs	r6, #0
   23a94:	e7c9      	b.n	23a2a <__aeabi_f2d+0x1e>
   23a96:	0003      	movs	r3, r0
   23a98:	002a      	movs	r2, r5
   23a9a:	3b0b      	subs	r3, #11
   23a9c:	409a      	lsls	r2, r3
   23a9e:	2500      	movs	r5, #0
   23aa0:	e7e3      	b.n	23a6a <__aeabi_f2d+0x5e>
   23aa2:	46c0      	nop			; (mov r8, r8)
   23aa4:	800fffff 	.word	0x800fffff
   23aa8:	00000389 	.word	0x00000389
   23aac:	000007ff 	.word	0x000007ff

00023ab0 <__aeabi_d2f>:
   23ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   23ab2:	004c      	lsls	r4, r1, #1
   23ab4:	0d64      	lsrs	r4, r4, #21
   23ab6:	030b      	lsls	r3, r1, #12
   23ab8:	1c62      	adds	r2, r4, #1
   23aba:	0f45      	lsrs	r5, r0, #29
   23abc:	0a5b      	lsrs	r3, r3, #9
   23abe:	0552      	lsls	r2, r2, #21
   23ac0:	432b      	orrs	r3, r5
   23ac2:	0fc9      	lsrs	r1, r1, #31
   23ac4:	00c5      	lsls	r5, r0, #3
   23ac6:	0d52      	lsrs	r2, r2, #21
   23ac8:	2a01      	cmp	r2, #1
   23aca:	dd28      	ble.n	23b1e <__aeabi_d2f+0x6e>
   23acc:	4a3a      	ldr	r2, [pc, #232]	; (23bb8 <__aeabi_d2f+0x108>)
   23ace:	18a6      	adds	r6, r4, r2
   23ad0:	2efe      	cmp	r6, #254	; 0xfe
   23ad2:	dc1b      	bgt.n	23b0c <__aeabi_d2f+0x5c>
   23ad4:	2e00      	cmp	r6, #0
   23ad6:	dd3e      	ble.n	23b56 <__aeabi_d2f+0xa6>
   23ad8:	0180      	lsls	r0, r0, #6
   23ada:	0002      	movs	r2, r0
   23adc:	1e50      	subs	r0, r2, #1
   23ade:	4182      	sbcs	r2, r0
   23ae0:	0f6d      	lsrs	r5, r5, #29
   23ae2:	432a      	orrs	r2, r5
   23ae4:	00db      	lsls	r3, r3, #3
   23ae6:	4313      	orrs	r3, r2
   23ae8:	075a      	lsls	r2, r3, #29
   23aea:	d004      	beq.n	23af6 <__aeabi_d2f+0x46>
   23aec:	220f      	movs	r2, #15
   23aee:	401a      	ands	r2, r3
   23af0:	2a04      	cmp	r2, #4
   23af2:	d000      	beq.n	23af6 <__aeabi_d2f+0x46>
   23af4:	3304      	adds	r3, #4
   23af6:	2280      	movs	r2, #128	; 0x80
   23af8:	04d2      	lsls	r2, r2, #19
   23afa:	401a      	ands	r2, r3
   23afc:	d05a      	beq.n	23bb4 <__aeabi_d2f+0x104>
   23afe:	3601      	adds	r6, #1
   23b00:	2eff      	cmp	r6, #255	; 0xff
   23b02:	d003      	beq.n	23b0c <__aeabi_d2f+0x5c>
   23b04:	019b      	lsls	r3, r3, #6
   23b06:	0a5b      	lsrs	r3, r3, #9
   23b08:	b2f4      	uxtb	r4, r6
   23b0a:	e001      	b.n	23b10 <__aeabi_d2f+0x60>
   23b0c:	24ff      	movs	r4, #255	; 0xff
   23b0e:	2300      	movs	r3, #0
   23b10:	0258      	lsls	r0, r3, #9
   23b12:	05e4      	lsls	r4, r4, #23
   23b14:	0a40      	lsrs	r0, r0, #9
   23b16:	07c9      	lsls	r1, r1, #31
   23b18:	4320      	orrs	r0, r4
   23b1a:	4308      	orrs	r0, r1
   23b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23b1e:	2c00      	cmp	r4, #0
   23b20:	d007      	beq.n	23b32 <__aeabi_d2f+0x82>
   23b22:	431d      	orrs	r5, r3
   23b24:	d0f2      	beq.n	23b0c <__aeabi_d2f+0x5c>
   23b26:	2080      	movs	r0, #128	; 0x80
   23b28:	00db      	lsls	r3, r3, #3
   23b2a:	0480      	lsls	r0, r0, #18
   23b2c:	4303      	orrs	r3, r0
   23b2e:	26ff      	movs	r6, #255	; 0xff
   23b30:	e7da      	b.n	23ae8 <__aeabi_d2f+0x38>
   23b32:	432b      	orrs	r3, r5
   23b34:	d003      	beq.n	23b3e <__aeabi_d2f+0x8e>
   23b36:	2305      	movs	r3, #5
   23b38:	08db      	lsrs	r3, r3, #3
   23b3a:	2cff      	cmp	r4, #255	; 0xff
   23b3c:	d003      	beq.n	23b46 <__aeabi_d2f+0x96>
   23b3e:	025b      	lsls	r3, r3, #9
   23b40:	0a5b      	lsrs	r3, r3, #9
   23b42:	b2e4      	uxtb	r4, r4
   23b44:	e7e4      	b.n	23b10 <__aeabi_d2f+0x60>
   23b46:	2b00      	cmp	r3, #0
   23b48:	d032      	beq.n	23bb0 <__aeabi_d2f+0x100>
   23b4a:	2080      	movs	r0, #128	; 0x80
   23b4c:	03c0      	lsls	r0, r0, #15
   23b4e:	4303      	orrs	r3, r0
   23b50:	025b      	lsls	r3, r3, #9
   23b52:	0a5b      	lsrs	r3, r3, #9
   23b54:	e7dc      	b.n	23b10 <__aeabi_d2f+0x60>
   23b56:	0032      	movs	r2, r6
   23b58:	3217      	adds	r2, #23
   23b5a:	db14      	blt.n	23b86 <__aeabi_d2f+0xd6>
   23b5c:	2280      	movs	r2, #128	; 0x80
   23b5e:	271e      	movs	r7, #30
   23b60:	0412      	lsls	r2, r2, #16
   23b62:	4313      	orrs	r3, r2
   23b64:	1bbf      	subs	r7, r7, r6
   23b66:	2f1f      	cmp	r7, #31
   23b68:	dc0f      	bgt.n	23b8a <__aeabi_d2f+0xda>
   23b6a:	4a14      	ldr	r2, [pc, #80]	; (23bbc <__aeabi_d2f+0x10c>)
   23b6c:	4694      	mov	ip, r2
   23b6e:	4464      	add	r4, ip
   23b70:	002a      	movs	r2, r5
   23b72:	40a5      	lsls	r5, r4
   23b74:	002e      	movs	r6, r5
   23b76:	40a3      	lsls	r3, r4
   23b78:	1e75      	subs	r5, r6, #1
   23b7a:	41ae      	sbcs	r6, r5
   23b7c:	40fa      	lsrs	r2, r7
   23b7e:	4333      	orrs	r3, r6
   23b80:	4313      	orrs	r3, r2
   23b82:	2600      	movs	r6, #0
   23b84:	e7b0      	b.n	23ae8 <__aeabi_d2f+0x38>
   23b86:	2400      	movs	r4, #0
   23b88:	e7d5      	b.n	23b36 <__aeabi_d2f+0x86>
   23b8a:	2202      	movs	r2, #2
   23b8c:	4252      	negs	r2, r2
   23b8e:	1b96      	subs	r6, r2, r6
   23b90:	001a      	movs	r2, r3
   23b92:	40f2      	lsrs	r2, r6
   23b94:	2f20      	cmp	r7, #32
   23b96:	d009      	beq.n	23bac <__aeabi_d2f+0xfc>
   23b98:	4809      	ldr	r0, [pc, #36]	; (23bc0 <__aeabi_d2f+0x110>)
   23b9a:	4684      	mov	ip, r0
   23b9c:	4464      	add	r4, ip
   23b9e:	40a3      	lsls	r3, r4
   23ba0:	432b      	orrs	r3, r5
   23ba2:	1e5d      	subs	r5, r3, #1
   23ba4:	41ab      	sbcs	r3, r5
   23ba6:	2600      	movs	r6, #0
   23ba8:	4313      	orrs	r3, r2
   23baa:	e79d      	b.n	23ae8 <__aeabi_d2f+0x38>
   23bac:	2300      	movs	r3, #0
   23bae:	e7f7      	b.n	23ba0 <__aeabi_d2f+0xf0>
   23bb0:	2300      	movs	r3, #0
   23bb2:	e7ad      	b.n	23b10 <__aeabi_d2f+0x60>
   23bb4:	0034      	movs	r4, r6
   23bb6:	e7bf      	b.n	23b38 <__aeabi_d2f+0x88>
   23bb8:	fffffc80 	.word	0xfffffc80
   23bbc:	fffffc82 	.word	0xfffffc82
   23bc0:	fffffca2 	.word	0xfffffca2

00023bc4 <__errno>:
   23bc4:	4b01      	ldr	r3, [pc, #4]	; (23bcc <__errno+0x8>)
   23bc6:	6818      	ldr	r0, [r3, #0]
   23bc8:	4770      	bx	lr
   23bca:	46c0      	nop			; (mov r8, r8)
   23bcc:	200002a4 	.word	0x200002a4

00023bd0 <__libc_init_array>:
   23bd0:	b570      	push	{r4, r5, r6, lr}
   23bd2:	4e0d      	ldr	r6, [pc, #52]	; (23c08 <__libc_init_array+0x38>)
   23bd4:	4d0d      	ldr	r5, [pc, #52]	; (23c0c <__libc_init_array+0x3c>)
   23bd6:	2400      	movs	r4, #0
   23bd8:	1bad      	subs	r5, r5, r6
   23bda:	10ad      	asrs	r5, r5, #2
   23bdc:	d005      	beq.n	23bea <__libc_init_array+0x1a>
   23bde:	00a3      	lsls	r3, r4, #2
   23be0:	58f3      	ldr	r3, [r6, r3]
   23be2:	3401      	adds	r4, #1
   23be4:	4798      	blx	r3
   23be6:	42a5      	cmp	r5, r4
   23be8:	d1f9      	bne.n	23bde <__libc_init_array+0xe>
   23bea:	f006 fa41 	bl	2a070 <_init>
   23bee:	4e08      	ldr	r6, [pc, #32]	; (23c10 <__libc_init_array+0x40>)
   23bf0:	4d08      	ldr	r5, [pc, #32]	; (23c14 <__libc_init_array+0x44>)
   23bf2:	2400      	movs	r4, #0
   23bf4:	1bad      	subs	r5, r5, r6
   23bf6:	10ad      	asrs	r5, r5, #2
   23bf8:	d005      	beq.n	23c06 <__libc_init_array+0x36>
   23bfa:	00a3      	lsls	r3, r4, #2
   23bfc:	58f3      	ldr	r3, [r6, r3]
   23bfe:	3401      	adds	r4, #1
   23c00:	4798      	blx	r3
   23c02:	42a5      	cmp	r5, r4
   23c04:	d1f9      	bne.n	23bfa <__libc_init_array+0x2a>
   23c06:	bd70      	pop	{r4, r5, r6, pc}
   23c08:	0002a07c 	.word	0x0002a07c
   23c0c:	0002a07c 	.word	0x0002a07c
   23c10:	0002a07c 	.word	0x0002a07c
   23c14:	0002a084 	.word	0x0002a084

00023c18 <memcpy>:
   23c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c1a:	0005      	movs	r5, r0
   23c1c:	2a0f      	cmp	r2, #15
   23c1e:	d92f      	bls.n	23c80 <memcpy+0x68>
   23c20:	000b      	movs	r3, r1
   23c22:	4303      	orrs	r3, r0
   23c24:	079b      	lsls	r3, r3, #30
   23c26:	d134      	bne.n	23c92 <memcpy+0x7a>
   23c28:	0016      	movs	r6, r2
   23c2a:	000c      	movs	r4, r1
   23c2c:	0003      	movs	r3, r0
   23c2e:	3e10      	subs	r6, #16
   23c30:	0935      	lsrs	r5, r6, #4
   23c32:	3501      	adds	r5, #1
   23c34:	012d      	lsls	r5, r5, #4
   23c36:	1945      	adds	r5, r0, r5
   23c38:	6827      	ldr	r7, [r4, #0]
   23c3a:	601f      	str	r7, [r3, #0]
   23c3c:	6867      	ldr	r7, [r4, #4]
   23c3e:	605f      	str	r7, [r3, #4]
   23c40:	68a7      	ldr	r7, [r4, #8]
   23c42:	609f      	str	r7, [r3, #8]
   23c44:	68e7      	ldr	r7, [r4, #12]
   23c46:	3410      	adds	r4, #16
   23c48:	60df      	str	r7, [r3, #12]
   23c4a:	3310      	adds	r3, #16
   23c4c:	429d      	cmp	r5, r3
   23c4e:	d1f3      	bne.n	23c38 <memcpy+0x20>
   23c50:	230f      	movs	r3, #15
   23c52:	439e      	bics	r6, r3
   23c54:	3610      	adds	r6, #16
   23c56:	1985      	adds	r5, r0, r6
   23c58:	1989      	adds	r1, r1, r6
   23c5a:	4013      	ands	r3, r2
   23c5c:	2b03      	cmp	r3, #3
   23c5e:	d91a      	bls.n	23c96 <memcpy+0x7e>
   23c60:	1f1e      	subs	r6, r3, #4
   23c62:	2300      	movs	r3, #0
   23c64:	08b4      	lsrs	r4, r6, #2
   23c66:	3401      	adds	r4, #1
   23c68:	00a4      	lsls	r4, r4, #2
   23c6a:	58cf      	ldr	r7, [r1, r3]
   23c6c:	50ef      	str	r7, [r5, r3]
   23c6e:	3304      	adds	r3, #4
   23c70:	42a3      	cmp	r3, r4
   23c72:	d1fa      	bne.n	23c6a <memcpy+0x52>
   23c74:	2403      	movs	r4, #3
   23c76:	43a6      	bics	r6, r4
   23c78:	1d33      	adds	r3, r6, #4
   23c7a:	4022      	ands	r2, r4
   23c7c:	18c9      	adds	r1, r1, r3
   23c7e:	18ed      	adds	r5, r5, r3
   23c80:	2a00      	cmp	r2, #0
   23c82:	d005      	beq.n	23c90 <memcpy+0x78>
   23c84:	2300      	movs	r3, #0
   23c86:	5ccc      	ldrb	r4, [r1, r3]
   23c88:	54ec      	strb	r4, [r5, r3]
   23c8a:	3301      	adds	r3, #1
   23c8c:	4293      	cmp	r3, r2
   23c8e:	d1fa      	bne.n	23c86 <memcpy+0x6e>
   23c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23c92:	0005      	movs	r5, r0
   23c94:	e7f6      	b.n	23c84 <memcpy+0x6c>
   23c96:	001a      	movs	r2, r3
   23c98:	e7f2      	b.n	23c80 <memcpy+0x68>
   23c9a:	46c0      	nop			; (mov r8, r8)

00023c9c <memset>:
   23c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c9e:	0783      	lsls	r3, r0, #30
   23ca0:	d043      	beq.n	23d2a <memset+0x8e>
   23ca2:	1e54      	subs	r4, r2, #1
   23ca4:	2a00      	cmp	r2, #0
   23ca6:	d03f      	beq.n	23d28 <memset+0x8c>
   23ca8:	b2ce      	uxtb	r6, r1
   23caa:	0002      	movs	r2, r0
   23cac:	2503      	movs	r5, #3
   23cae:	e002      	b.n	23cb6 <memset+0x1a>
   23cb0:	001a      	movs	r2, r3
   23cb2:	3c01      	subs	r4, #1
   23cb4:	d338      	bcc.n	23d28 <memset+0x8c>
   23cb6:	1c53      	adds	r3, r2, #1
   23cb8:	7016      	strb	r6, [r2, #0]
   23cba:	422b      	tst	r3, r5
   23cbc:	d1f8      	bne.n	23cb0 <memset+0x14>
   23cbe:	2c03      	cmp	r4, #3
   23cc0:	d92a      	bls.n	23d18 <memset+0x7c>
   23cc2:	22ff      	movs	r2, #255	; 0xff
   23cc4:	400a      	ands	r2, r1
   23cc6:	0215      	lsls	r5, r2, #8
   23cc8:	4315      	orrs	r5, r2
   23cca:	042a      	lsls	r2, r5, #16
   23ccc:	4315      	orrs	r5, r2
   23cce:	2c0f      	cmp	r4, #15
   23cd0:	d914      	bls.n	23cfc <memset+0x60>
   23cd2:	0027      	movs	r7, r4
   23cd4:	001a      	movs	r2, r3
   23cd6:	3f10      	subs	r7, #16
   23cd8:	093e      	lsrs	r6, r7, #4
   23cda:	3601      	adds	r6, #1
   23cdc:	0136      	lsls	r6, r6, #4
   23cde:	199e      	adds	r6, r3, r6
   23ce0:	6015      	str	r5, [r2, #0]
   23ce2:	6055      	str	r5, [r2, #4]
   23ce4:	6095      	str	r5, [r2, #8]
   23ce6:	60d5      	str	r5, [r2, #12]
   23ce8:	3210      	adds	r2, #16
   23cea:	4296      	cmp	r6, r2
   23cec:	d1f8      	bne.n	23ce0 <memset+0x44>
   23cee:	220f      	movs	r2, #15
   23cf0:	4397      	bics	r7, r2
   23cf2:	3710      	adds	r7, #16
   23cf4:	19db      	adds	r3, r3, r7
   23cf6:	4014      	ands	r4, r2
   23cf8:	2c03      	cmp	r4, #3
   23cfa:	d90d      	bls.n	23d18 <memset+0x7c>
   23cfc:	001a      	movs	r2, r3
   23cfe:	1f27      	subs	r7, r4, #4
   23d00:	08be      	lsrs	r6, r7, #2
   23d02:	3601      	adds	r6, #1
   23d04:	00b6      	lsls	r6, r6, #2
   23d06:	199e      	adds	r6, r3, r6
   23d08:	c220      	stmia	r2!, {r5}
   23d0a:	42b2      	cmp	r2, r6
   23d0c:	d1fc      	bne.n	23d08 <memset+0x6c>
   23d0e:	2203      	movs	r2, #3
   23d10:	4397      	bics	r7, r2
   23d12:	3704      	adds	r7, #4
   23d14:	19db      	adds	r3, r3, r7
   23d16:	4014      	ands	r4, r2
   23d18:	2c00      	cmp	r4, #0
   23d1a:	d005      	beq.n	23d28 <memset+0x8c>
   23d1c:	b2c9      	uxtb	r1, r1
   23d1e:	191c      	adds	r4, r3, r4
   23d20:	7019      	strb	r1, [r3, #0]
   23d22:	3301      	adds	r3, #1
   23d24:	429c      	cmp	r4, r3
   23d26:	d1fb      	bne.n	23d20 <memset+0x84>
   23d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23d2a:	0014      	movs	r4, r2
   23d2c:	0003      	movs	r3, r0
   23d2e:	e7c6      	b.n	23cbe <memset+0x22>

00023d30 <sprintf>:
   23d30:	b40e      	push	{r1, r2, r3}
   23d32:	b510      	push	{r4, lr}
   23d34:	b09d      	sub	sp, #116	; 0x74
   23d36:	a902      	add	r1, sp, #8
   23d38:	9002      	str	r0, [sp, #8]
   23d3a:	6108      	str	r0, [r1, #16]
   23d3c:	480b      	ldr	r0, [pc, #44]	; (23d6c <sprintf+0x3c>)
   23d3e:	2482      	movs	r4, #130	; 0x82
   23d40:	6088      	str	r0, [r1, #8]
   23d42:	6148      	str	r0, [r1, #20]
   23d44:	2001      	movs	r0, #1
   23d46:	4240      	negs	r0, r0
   23d48:	ab1f      	add	r3, sp, #124	; 0x7c
   23d4a:	81c8      	strh	r0, [r1, #14]
   23d4c:	4808      	ldr	r0, [pc, #32]	; (23d70 <sprintf+0x40>)
   23d4e:	cb04      	ldmia	r3!, {r2}
   23d50:	00a4      	lsls	r4, r4, #2
   23d52:	6800      	ldr	r0, [r0, #0]
   23d54:	9301      	str	r3, [sp, #4]
   23d56:	818c      	strh	r4, [r1, #12]
   23d58:	f000 f86c 	bl	23e34 <_svfprintf_r>
   23d5c:	2300      	movs	r3, #0
   23d5e:	9a02      	ldr	r2, [sp, #8]
   23d60:	7013      	strb	r3, [r2, #0]
   23d62:	b01d      	add	sp, #116	; 0x74
   23d64:	bc10      	pop	{r4}
   23d66:	bc08      	pop	{r3}
   23d68:	b003      	add	sp, #12
   23d6a:	4718      	bx	r3
   23d6c:	7fffffff 	.word	0x7fffffff
   23d70:	200002a4 	.word	0x200002a4

00023d74 <strcat>:
   23d74:	b570      	push	{r4, r5, r6, lr}
   23d76:	0005      	movs	r5, r0
   23d78:	0783      	lsls	r3, r0, #30
   23d7a:	d116      	bne.n	23daa <strcat+0x36>
   23d7c:	6802      	ldr	r2, [r0, #0]
   23d7e:	4b0e      	ldr	r3, [pc, #56]	; (23db8 <strcat+0x44>)
   23d80:	4c0e      	ldr	r4, [pc, #56]	; (23dbc <strcat+0x48>)
   23d82:	18d3      	adds	r3, r2, r3
   23d84:	4393      	bics	r3, r2
   23d86:	4223      	tst	r3, r4
   23d88:	d10f      	bne.n	23daa <strcat+0x36>
   23d8a:	3004      	adds	r0, #4
   23d8c:	6802      	ldr	r2, [r0, #0]
   23d8e:	4b0a      	ldr	r3, [pc, #40]	; (23db8 <strcat+0x44>)
   23d90:	18d3      	adds	r3, r2, r3
   23d92:	4393      	bics	r3, r2
   23d94:	4223      	tst	r3, r4
   23d96:	d108      	bne.n	23daa <strcat+0x36>
   23d98:	3004      	adds	r0, #4
   23d9a:	6802      	ldr	r2, [r0, #0]
   23d9c:	4b06      	ldr	r3, [pc, #24]	; (23db8 <strcat+0x44>)
   23d9e:	18d3      	adds	r3, r2, r3
   23da0:	4393      	bics	r3, r2
   23da2:	4223      	tst	r3, r4
   23da4:	d0f1      	beq.n	23d8a <strcat+0x16>
   23da6:	e000      	b.n	23daa <strcat+0x36>
   23da8:	3001      	adds	r0, #1
   23daa:	7803      	ldrb	r3, [r0, #0]
   23dac:	2b00      	cmp	r3, #0
   23dae:	d1fb      	bne.n	23da8 <strcat+0x34>
   23db0:	f000 f806 	bl	23dc0 <strcpy>
   23db4:	0028      	movs	r0, r5
   23db6:	bd70      	pop	{r4, r5, r6, pc}
   23db8:	fefefeff 	.word	0xfefefeff
   23dbc:	80808080 	.word	0x80808080

00023dc0 <strcpy>:
   23dc0:	1c03      	adds	r3, r0, #0
   23dc2:	780a      	ldrb	r2, [r1, #0]
   23dc4:	3101      	adds	r1, #1
   23dc6:	701a      	strb	r2, [r3, #0]
   23dc8:	3301      	adds	r3, #1
   23dca:	2a00      	cmp	r2, #0
   23dcc:	d1f9      	bne.n	23dc2 <strcpy+0x2>
   23dce:	4770      	bx	lr

00023dd0 <strlen>:
   23dd0:	b510      	push	{r4, lr}
   23dd2:	0783      	lsls	r3, r0, #30
   23dd4:	d025      	beq.n	23e22 <strlen+0x52>
   23dd6:	7803      	ldrb	r3, [r0, #0]
   23dd8:	2b00      	cmp	r3, #0
   23dda:	d024      	beq.n	23e26 <strlen+0x56>
   23ddc:	0003      	movs	r3, r0
   23dde:	2103      	movs	r1, #3
   23de0:	e002      	b.n	23de8 <strlen+0x18>
   23de2:	781a      	ldrb	r2, [r3, #0]
   23de4:	2a00      	cmp	r2, #0
   23de6:	d01a      	beq.n	23e1e <strlen+0x4e>
   23de8:	3301      	adds	r3, #1
   23dea:	420b      	tst	r3, r1
   23dec:	d1f9      	bne.n	23de2 <strlen+0x12>
   23dee:	6819      	ldr	r1, [r3, #0]
   23df0:	4a0e      	ldr	r2, [pc, #56]	; (23e2c <strlen+0x5c>)
   23df2:	4c0f      	ldr	r4, [pc, #60]	; (23e30 <strlen+0x60>)
   23df4:	188a      	adds	r2, r1, r2
   23df6:	438a      	bics	r2, r1
   23df8:	4222      	tst	r2, r4
   23dfa:	d106      	bne.n	23e0a <strlen+0x3a>
   23dfc:	3304      	adds	r3, #4
   23dfe:	6819      	ldr	r1, [r3, #0]
   23e00:	4a0a      	ldr	r2, [pc, #40]	; (23e2c <strlen+0x5c>)
   23e02:	188a      	adds	r2, r1, r2
   23e04:	438a      	bics	r2, r1
   23e06:	4222      	tst	r2, r4
   23e08:	d0f8      	beq.n	23dfc <strlen+0x2c>
   23e0a:	001a      	movs	r2, r3
   23e0c:	781b      	ldrb	r3, [r3, #0]
   23e0e:	2b00      	cmp	r3, #0
   23e10:	d003      	beq.n	23e1a <strlen+0x4a>
   23e12:	3201      	adds	r2, #1
   23e14:	7811      	ldrb	r1, [r2, #0]
   23e16:	2900      	cmp	r1, #0
   23e18:	d1fb      	bne.n	23e12 <strlen+0x42>
   23e1a:	1a10      	subs	r0, r2, r0
   23e1c:	bd10      	pop	{r4, pc}
   23e1e:	1a18      	subs	r0, r3, r0
   23e20:	e7fc      	b.n	23e1c <strlen+0x4c>
   23e22:	0003      	movs	r3, r0
   23e24:	e7e3      	b.n	23dee <strlen+0x1e>
   23e26:	2000      	movs	r0, #0
   23e28:	e7f8      	b.n	23e1c <strlen+0x4c>
   23e2a:	46c0      	nop			; (mov r8, r8)
   23e2c:	fefefeff 	.word	0xfefefeff
   23e30:	80808080 	.word	0x80808080

00023e34 <_svfprintf_r>:
   23e34:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e36:	46de      	mov	lr, fp
   23e38:	4645      	mov	r5, r8
   23e3a:	4657      	mov	r7, sl
   23e3c:	464e      	mov	r6, r9
   23e3e:	b5e0      	push	{r5, r6, r7, lr}
   23e40:	b0c3      	sub	sp, #268	; 0x10c
   23e42:	000d      	movs	r5, r1
   23e44:	9106      	str	r1, [sp, #24]
   23e46:	0014      	movs	r4, r2
   23e48:	930f      	str	r3, [sp, #60]	; 0x3c
   23e4a:	9009      	str	r0, [sp, #36]	; 0x24
   23e4c:	f002 fb92 	bl	26574 <_localeconv_r>
   23e50:	6803      	ldr	r3, [r0, #0]
   23e52:	0018      	movs	r0, r3
   23e54:	9319      	str	r3, [sp, #100]	; 0x64
   23e56:	f7ff ffbb 	bl	23dd0 <strlen>
   23e5a:	9018      	str	r0, [sp, #96]	; 0x60
   23e5c:	89ab      	ldrh	r3, [r5, #12]
   23e5e:	061b      	lsls	r3, r3, #24
   23e60:	d505      	bpl.n	23e6e <_svfprintf_r+0x3a>
   23e62:	692b      	ldr	r3, [r5, #16]
   23e64:	9307      	str	r3, [sp, #28]
   23e66:	2b00      	cmp	r3, #0
   23e68:	d101      	bne.n	23e6e <_svfprintf_r+0x3a>
   23e6a:	f001 f863 	bl	24f34 <_svfprintf_r+0x1100>
   23e6e:	ab32      	add	r3, sp, #200	; 0xc8
   23e70:	9325      	str	r3, [sp, #148]	; 0x94
   23e72:	2300      	movs	r3, #0
   23e74:	46a3      	mov	fp, r4
   23e76:	af25      	add	r7, sp, #148	; 0x94
   23e78:	60bb      	str	r3, [r7, #8]
   23e7a:	607b      	str	r3, [r7, #4]
   23e7c:	9314      	str	r3, [sp, #80]	; 0x50
   23e7e:	9316      	str	r3, [sp, #88]	; 0x58
   23e80:	9315      	str	r3, [sp, #84]	; 0x54
   23e82:	ae32      	add	r6, sp, #200	; 0xc8
   23e84:	9317      	str	r3, [sp, #92]	; 0x5c
   23e86:	931a      	str	r3, [sp, #104]	; 0x68
   23e88:	930a      	str	r3, [sp, #40]	; 0x28
   23e8a:	465b      	mov	r3, fp
   23e8c:	781b      	ldrb	r3, [r3, #0]
   23e8e:	465c      	mov	r4, fp
   23e90:	2b00      	cmp	r3, #0
   23e92:	d01c      	beq.n	23ece <_svfprintf_r+0x9a>
   23e94:	2b25      	cmp	r3, #37	; 0x25
   23e96:	d102      	bne.n	23e9e <_svfprintf_r+0x6a>
   23e98:	e019      	b.n	23ece <_svfprintf_r+0x9a>
   23e9a:	2b25      	cmp	r3, #37	; 0x25
   23e9c:	d003      	beq.n	23ea6 <_svfprintf_r+0x72>
   23e9e:	3401      	adds	r4, #1
   23ea0:	7823      	ldrb	r3, [r4, #0]
   23ea2:	2b00      	cmp	r3, #0
   23ea4:	d1f9      	bne.n	23e9a <_svfprintf_r+0x66>
   23ea6:	465b      	mov	r3, fp
   23ea8:	1ae5      	subs	r5, r4, r3
   23eaa:	d010      	beq.n	23ece <_svfprintf_r+0x9a>
   23eac:	465b      	mov	r3, fp
   23eae:	6033      	str	r3, [r6, #0]
   23eb0:	68bb      	ldr	r3, [r7, #8]
   23eb2:	6075      	str	r5, [r6, #4]
   23eb4:	195b      	adds	r3, r3, r5
   23eb6:	60bb      	str	r3, [r7, #8]
   23eb8:	687b      	ldr	r3, [r7, #4]
   23eba:	3301      	adds	r3, #1
   23ebc:	607b      	str	r3, [r7, #4]
   23ebe:	2b07      	cmp	r3, #7
   23ec0:	dc2e      	bgt.n	23f20 <_svfprintf_r+0xec>
   23ec2:	3608      	adds	r6, #8
   23ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23ec6:	469c      	mov	ip, r3
   23ec8:	44ac      	add	ip, r5
   23eca:	4663      	mov	r3, ip
   23ecc:	930a      	str	r3, [sp, #40]	; 0x28
   23ece:	7823      	ldrb	r3, [r4, #0]
   23ed0:	2b00      	cmp	r3, #0
   23ed2:	d02e      	beq.n	23f32 <_svfprintf_r+0xfe>
   23ed4:	1c63      	adds	r3, r4, #1
   23ed6:	469b      	mov	fp, r3
   23ed8:	2300      	movs	r3, #0
   23eda:	aa16      	add	r2, sp, #88	; 0x58
   23edc:	77d3      	strb	r3, [r2, #31]
   23ede:	2201      	movs	r2, #1
   23ee0:	4252      	negs	r2, r2
   23ee2:	4692      	mov	sl, r2
   23ee4:	2200      	movs	r2, #0
   23ee6:	2100      	movs	r1, #0
   23ee8:	920b      	str	r2, [sp, #44]	; 0x2c
   23eea:	3220      	adds	r2, #32
   23eec:	4691      	mov	r9, r2
   23eee:	3220      	adds	r2, #32
   23ef0:	7863      	ldrb	r3, [r4, #1]
   23ef2:	4688      	mov	r8, r1
   23ef4:	2000      	movs	r0, #0
   23ef6:	2400      	movs	r4, #0
   23ef8:	4694      	mov	ip, r2
   23efa:	4659      	mov	r1, fp
   23efc:	3101      	adds	r1, #1
   23efe:	001a      	movs	r2, r3
   23f00:	3a20      	subs	r2, #32
   23f02:	2a58      	cmp	r2, #88	; 0x58
   23f04:	d900      	bls.n	23f08 <_svfprintf_r+0xd4>
   23f06:	e2fd      	b.n	24504 <_svfprintf_r+0x6d0>
   23f08:	4dd7      	ldr	r5, [pc, #860]	; (24268 <_svfprintf_r+0x434>)
   23f0a:	0092      	lsls	r2, r2, #2
   23f0c:	58aa      	ldr	r2, [r5, r2]
   23f0e:	4697      	mov	pc, r2
   23f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23f12:	920f      	str	r2, [sp, #60]	; 0x3c
   23f14:	425b      	negs	r3, r3
   23f16:	930b      	str	r3, [sp, #44]	; 0x2c
   23f18:	2304      	movs	r3, #4
   23f1a:	431c      	orrs	r4, r3
   23f1c:	780b      	ldrb	r3, [r1, #0]
   23f1e:	e7ed      	b.n	23efc <_svfprintf_r+0xc8>
   23f20:	003a      	movs	r2, r7
   23f22:	9906      	ldr	r1, [sp, #24]
   23f24:	9809      	ldr	r0, [sp, #36]	; 0x24
   23f26:	f003 f995 	bl	27254 <__ssprint_r>
   23f2a:	2800      	cmp	r0, #0
   23f2c:	d109      	bne.n	23f42 <_svfprintf_r+0x10e>
   23f2e:	ae32      	add	r6, sp, #200	; 0xc8
   23f30:	e7c8      	b.n	23ec4 <_svfprintf_r+0x90>
   23f32:	68bb      	ldr	r3, [r7, #8]
   23f34:	2b00      	cmp	r3, #0
   23f36:	d004      	beq.n	23f42 <_svfprintf_r+0x10e>
   23f38:	003a      	movs	r2, r7
   23f3a:	9906      	ldr	r1, [sp, #24]
   23f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
   23f3e:	f003 f989 	bl	27254 <__ssprint_r>
   23f42:	9b06      	ldr	r3, [sp, #24]
   23f44:	899b      	ldrh	r3, [r3, #12]
   23f46:	065b      	lsls	r3, r3, #25
   23f48:	d501      	bpl.n	23f4e <_svfprintf_r+0x11a>
   23f4a:	f001 f8ce 	bl	250ea <_svfprintf_r+0x12b6>
   23f4e:	980a      	ldr	r0, [sp, #40]	; 0x28
   23f50:	b043      	add	sp, #268	; 0x10c
   23f52:	bc3c      	pop	{r2, r3, r4, r5}
   23f54:	4690      	mov	r8, r2
   23f56:	4699      	mov	r9, r3
   23f58:	46a2      	mov	sl, r4
   23f5a:	46ab      	mov	fp, r5
   23f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23f5e:	2201      	movs	r2, #1
   23f60:	780b      	ldrb	r3, [r1, #0]
   23f62:	4690      	mov	r8, r2
   23f64:	202b      	movs	r0, #43	; 0x2b
   23f66:	e7c9      	b.n	23efc <_svfprintf_r+0xc8>
   23f68:	1c4b      	adds	r3, r1, #1
   23f6a:	469b      	mov	fp, r3
   23f6c:	780b      	ldrb	r3, [r1, #0]
   23f6e:	2b2a      	cmp	r3, #42	; 0x2a
   23f70:	d101      	bne.n	23f76 <_svfprintf_r+0x142>
   23f72:	f001 fa1b 	bl	253ac <_svfprintf_r+0x1578>
   23f76:	001a      	movs	r2, r3
   23f78:	2100      	movs	r1, #0
   23f7a:	3a30      	subs	r2, #48	; 0x30
   23f7c:	468a      	mov	sl, r1
   23f7e:	4659      	mov	r1, fp
   23f80:	2a09      	cmp	r2, #9
   23f82:	d8bc      	bhi.n	23efe <_svfprintf_r+0xca>
   23f84:	0003      	movs	r3, r0
   23f86:	0011      	movs	r1, r2
   23f88:	4650      	mov	r0, sl
   23f8a:	465a      	mov	r2, fp
   23f8c:	469a      	mov	sl, r3
   23f8e:	46a3      	mov	fp, r4
   23f90:	0083      	lsls	r3, r0, #2
   23f92:	181b      	adds	r3, r3, r0
   23f94:	7814      	ldrb	r4, [r2, #0]
   23f96:	005b      	lsls	r3, r3, #1
   23f98:	1858      	adds	r0, r3, r1
   23f9a:	0021      	movs	r1, r4
   23f9c:	1c53      	adds	r3, r2, #1
   23f9e:	3930      	subs	r1, #48	; 0x30
   23fa0:	001a      	movs	r2, r3
   23fa2:	2909      	cmp	r1, #9
   23fa4:	d9f4      	bls.n	23f90 <_svfprintf_r+0x15c>
   23fa6:	4652      	mov	r2, sl
   23fa8:	0019      	movs	r1, r3
   23faa:	4682      	mov	sl, r0
   23fac:	0023      	movs	r3, r4
   23fae:	0010      	movs	r0, r2
   23fb0:	465c      	mov	r4, fp
   23fb2:	e7a4      	b.n	23efe <_svfprintf_r+0xca>
   23fb4:	2380      	movs	r3, #128	; 0x80
   23fb6:	431c      	orrs	r4, r3
   23fb8:	780b      	ldrb	r3, [r1, #0]
   23fba:	e79f      	b.n	23efc <_svfprintf_r+0xc8>
   23fbc:	468b      	mov	fp, r1
   23fbe:	4641      	mov	r1, r8
   23fc0:	9312      	str	r3, [sp, #72]	; 0x48
   23fc2:	2900      	cmp	r1, #0
   23fc4:	d001      	beq.n	23fca <_svfprintf_r+0x196>
   23fc6:	f001 fa1f 	bl	25408 <_svfprintf_r+0x15d4>
   23fca:	2310      	movs	r3, #16
   23fcc:	431c      	orrs	r4, r3
   23fce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   23fd0:	06a3      	lsls	r3, r4, #26
   23fd2:	d501      	bpl.n	23fd8 <_svfprintf_r+0x1a4>
   23fd4:	f000 fe88 	bl	24ce8 <_svfprintf_r+0xeb4>
   23fd8:	06e3      	lsls	r3, r4, #27
   23fda:	d501      	bpl.n	23fe0 <_svfprintf_r+0x1ac>
   23fdc:	f000 fd80 	bl	24ae0 <_svfprintf_r+0xcac>
   23fe0:	0663      	lsls	r3, r4, #25
   23fe2:	d401      	bmi.n	23fe8 <_svfprintf_r+0x1b4>
   23fe4:	f000 fd7c 	bl	24ae0 <_svfprintf_r+0xcac>
   23fe8:	2100      	movs	r1, #0
   23fea:	5e53      	ldrsh	r3, [r2, r1]
   23fec:	930c      	str	r3, [sp, #48]	; 0x30
   23fee:	3204      	adds	r2, #4
   23ff0:	17db      	asrs	r3, r3, #31
   23ff2:	930d      	str	r3, [sp, #52]	; 0x34
   23ff4:	920f      	str	r2, [sp, #60]	; 0x3c
   23ff6:	d501      	bpl.n	23ffc <_svfprintf_r+0x1c8>
   23ff8:	f000 fe86 	bl	24d08 <_svfprintf_r+0xed4>
   23ffc:	990c      	ldr	r1, [sp, #48]	; 0x30
   23ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   24000:	0008      	movs	r0, r1
   24002:	ab16      	add	r3, sp, #88	; 0x58
   24004:	7fdb      	ldrb	r3, [r3, #31]
   24006:	4310      	orrs	r0, r2
   24008:	4698      	mov	r8, r3
   2400a:	0002      	movs	r2, r0
   2400c:	2301      	movs	r3, #1
   2400e:	4651      	mov	r1, sl
   24010:	3101      	adds	r1, #1
   24012:	d100      	bne.n	24016 <_svfprintf_r+0x1e2>
   24014:	e0ff      	b.n	24216 <_svfprintf_r+0x3e2>
   24016:	2180      	movs	r1, #128	; 0x80
   24018:	0020      	movs	r0, r4
   2401a:	4388      	bics	r0, r1
   2401c:	9008      	str	r0, [sp, #32]
   2401e:	2a00      	cmp	r2, #0
   24020:	d000      	beq.n	24024 <_svfprintf_r+0x1f0>
   24022:	e0fc      	b.n	2421e <_svfprintf_r+0x3ea>
   24024:	4652      	mov	r2, sl
   24026:	2a00      	cmp	r2, #0
   24028:	d001      	beq.n	2402e <_svfprintf_r+0x1fa>
   2402a:	f000 fc2c 	bl	24886 <_svfprintf_r+0xa52>
   2402e:	2b00      	cmp	r3, #0
   24030:	d001      	beq.n	24036 <_svfprintf_r+0x202>
   24032:	f000 fd04 	bl	24a3e <_svfprintf_r+0xc0a>
   24036:	2001      	movs	r0, #1
   24038:	ab32      	add	r3, sp, #200	; 0xc8
   2403a:	4020      	ands	r0, r4
   2403c:	900e      	str	r0, [sp, #56]	; 0x38
   2403e:	9311      	str	r3, [sp, #68]	; 0x44
   24040:	d008      	beq.n	24054 <_svfprintf_r+0x220>
   24042:	2327      	movs	r3, #39	; 0x27
   24044:	2130      	movs	r1, #48	; 0x30
   24046:	aa28      	add	r2, sp, #160	; 0xa0
   24048:	54d1      	strb	r1, [r2, r3]
   2404a:	aa16      	add	r2, sp, #88	; 0x58
   2404c:	4694      	mov	ip, r2
   2404e:	3348      	adds	r3, #72	; 0x48
   24050:	4463      	add	r3, ip
   24052:	9311      	str	r3, [sp, #68]	; 0x44
   24054:	4653      	mov	r3, sl
   24056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   24058:	9307      	str	r3, [sp, #28]
   2405a:	4592      	cmp	sl, r2
   2405c:	da00      	bge.n	24060 <_svfprintf_r+0x22c>
   2405e:	9207      	str	r2, [sp, #28]
   24060:	2300      	movs	r3, #0
   24062:	9313      	str	r3, [sp, #76]	; 0x4c
   24064:	4643      	mov	r3, r8
   24066:	2b00      	cmp	r3, #0
   24068:	d002      	beq.n	24070 <_svfprintf_r+0x23c>
   2406a:	9b07      	ldr	r3, [sp, #28]
   2406c:	3301      	adds	r3, #1
   2406e:	9307      	str	r3, [sp, #28]
   24070:	2302      	movs	r3, #2
   24072:	9a08      	ldr	r2, [sp, #32]
   24074:	401a      	ands	r2, r3
   24076:	4691      	mov	r9, r2
   24078:	d002      	beq.n	24080 <_svfprintf_r+0x24c>
   2407a:	9b07      	ldr	r3, [sp, #28]
   2407c:	3302      	adds	r3, #2
   2407e:	9307      	str	r3, [sp, #28]
   24080:	2384      	movs	r3, #132	; 0x84
   24082:	9a08      	ldr	r2, [sp, #32]
   24084:	401a      	ands	r2, r3
   24086:	9210      	str	r2, [sp, #64]	; 0x40
   24088:	d000      	beq.n	2408c <_svfprintf_r+0x258>
   2408a:	e24d      	b.n	24528 <_svfprintf_r+0x6f4>
   2408c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2408e:	9a07      	ldr	r2, [sp, #28]
   24090:	1a9c      	subs	r4, r3, r2
   24092:	2c00      	cmp	r4, #0
   24094:	dc00      	bgt.n	24098 <_svfprintf_r+0x264>
   24096:	e247      	b.n	24528 <_svfprintf_r+0x6f4>
   24098:	4974      	ldr	r1, [pc, #464]	; (2426c <_svfprintf_r+0x438>)
   2409a:	68ba      	ldr	r2, [r7, #8]
   2409c:	687b      	ldr	r3, [r7, #4]
   2409e:	4688      	mov	r8, r1
   240a0:	2c10      	cmp	r4, #16
   240a2:	dd1f      	ble.n	240e4 <_svfprintf_r+0x2b0>
   240a4:	0031      	movs	r1, r6
   240a6:	2510      	movs	r5, #16
   240a8:	4646      	mov	r6, r8
   240aa:	e003      	b.n	240b4 <_svfprintf_r+0x280>
   240ac:	3c10      	subs	r4, #16
   240ae:	3108      	adds	r1, #8
   240b0:	2c10      	cmp	r4, #16
   240b2:	dd15      	ble.n	240e0 <_svfprintf_r+0x2ac>
   240b4:	3210      	adds	r2, #16
   240b6:	3301      	adds	r3, #1
   240b8:	600e      	str	r6, [r1, #0]
   240ba:	604d      	str	r5, [r1, #4]
   240bc:	60ba      	str	r2, [r7, #8]
   240be:	607b      	str	r3, [r7, #4]
   240c0:	2b07      	cmp	r3, #7
   240c2:	ddf3      	ble.n	240ac <_svfprintf_r+0x278>
   240c4:	003a      	movs	r2, r7
   240c6:	9906      	ldr	r1, [sp, #24]
   240c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   240ca:	f003 f8c3 	bl	27254 <__ssprint_r>
   240ce:	2800      	cmp	r0, #0
   240d0:	d000      	beq.n	240d4 <_svfprintf_r+0x2a0>
   240d2:	e736      	b.n	23f42 <_svfprintf_r+0x10e>
   240d4:	3c10      	subs	r4, #16
   240d6:	68ba      	ldr	r2, [r7, #8]
   240d8:	687b      	ldr	r3, [r7, #4]
   240da:	a932      	add	r1, sp, #200	; 0xc8
   240dc:	2c10      	cmp	r4, #16
   240de:	dce9      	bgt.n	240b4 <_svfprintf_r+0x280>
   240e0:	46b0      	mov	r8, r6
   240e2:	000e      	movs	r6, r1
   240e4:	4641      	mov	r1, r8
   240e6:	6074      	str	r4, [r6, #4]
   240e8:	3301      	adds	r3, #1
   240ea:	18a4      	adds	r4, r4, r2
   240ec:	6031      	str	r1, [r6, #0]
   240ee:	60bc      	str	r4, [r7, #8]
   240f0:	607b      	str	r3, [r7, #4]
   240f2:	2b07      	cmp	r3, #7
   240f4:	dd01      	ble.n	240fa <_svfprintf_r+0x2c6>
   240f6:	f000 fca8 	bl	24a4a <_svfprintf_r+0xc16>
   240fa:	ab16      	add	r3, sp, #88	; 0x58
   240fc:	7fdb      	ldrb	r3, [r3, #31]
   240fe:	3608      	adds	r6, #8
   24100:	4698      	mov	r8, r3
   24102:	e212      	b.n	2452a <_svfprintf_r+0x6f6>
   24104:	468b      	mov	fp, r1
   24106:	4641      	mov	r1, r8
   24108:	9312      	str	r3, [sp, #72]	; 0x48
   2410a:	2900      	cmp	r1, #0
   2410c:	d001      	beq.n	24112 <_svfprintf_r+0x2de>
   2410e:	f001 f977 	bl	25400 <_svfprintf_r+0x15cc>
   24112:	2207      	movs	r2, #7
   24114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24116:	3307      	adds	r3, #7
   24118:	4393      	bics	r3, r2
   2411a:	3201      	adds	r2, #1
   2411c:	4694      	mov	ip, r2
   2411e:	449c      	add	ip, r3
   24120:	4662      	mov	r2, ip
   24122:	920f      	str	r2, [sp, #60]	; 0x3c
   24124:	681a      	ldr	r2, [r3, #0]
   24126:	9216      	str	r2, [sp, #88]	; 0x58
   24128:	685b      	ldr	r3, [r3, #4]
   2412a:	2201      	movs	r2, #1
   2412c:	9315      	str	r3, [sp, #84]	; 0x54
   2412e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   24130:	9d16      	ldr	r5, [sp, #88]	; 0x58
   24132:	005b      	lsls	r3, r3, #1
   24134:	085b      	lsrs	r3, r3, #1
   24136:	4698      	mov	r8, r3
   24138:	4252      	negs	r2, r2
   2413a:	4b4d      	ldr	r3, [pc, #308]	; (24270 <_svfprintf_r+0x43c>)
   2413c:	0028      	movs	r0, r5
   2413e:	4641      	mov	r1, r8
   24140:	f7ff fb96 	bl	23870 <__aeabi_dcmpun>
   24144:	2800      	cmp	r0, #0
   24146:	d001      	beq.n	2414c <_svfprintf_r+0x318>
   24148:	f000 fdfd 	bl	24d46 <_svfprintf_r+0xf12>
   2414c:	2201      	movs	r2, #1
   2414e:	4b48      	ldr	r3, [pc, #288]	; (24270 <_svfprintf_r+0x43c>)
   24150:	4252      	negs	r2, r2
   24152:	0028      	movs	r0, r5
   24154:	4641      	mov	r1, r8
   24156:	f7fc fec7 	bl	20ee8 <__aeabi_dcmple>
   2415a:	2800      	cmp	r0, #0
   2415c:	d001      	beq.n	24162 <_svfprintf_r+0x32e>
   2415e:	f000 fdf2 	bl	24d46 <_svfprintf_r+0xf12>
   24162:	2200      	movs	r2, #0
   24164:	2300      	movs	r3, #0
   24166:	9816      	ldr	r0, [sp, #88]	; 0x58
   24168:	9915      	ldr	r1, [sp, #84]	; 0x54
   2416a:	f7fc feb3 	bl	20ed4 <__aeabi_dcmplt>
   2416e:	2800      	cmp	r0, #0
   24170:	d001      	beq.n	24176 <_svfprintf_r+0x342>
   24172:	f001 f822 	bl	251ba <_svfprintf_r+0x1386>
   24176:	ab16      	add	r3, sp, #88	; 0x58
   24178:	7fdb      	ldrb	r3, [r3, #31]
   2417a:	4698      	mov	r8, r3
   2417c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2417e:	2b47      	cmp	r3, #71	; 0x47
   24180:	dd01      	ble.n	24186 <_svfprintf_r+0x352>
   24182:	f000 fec7 	bl	24f14 <_svfprintf_r+0x10e0>
   24186:	4b3b      	ldr	r3, [pc, #236]	; (24274 <_svfprintf_r+0x440>)
   24188:	9311      	str	r3, [sp, #68]	; 0x44
   2418a:	2380      	movs	r3, #128	; 0x80
   2418c:	439c      	bics	r4, r3
   2418e:	3b7d      	subs	r3, #125	; 0x7d
   24190:	9307      	str	r3, [sp, #28]
   24192:	930e      	str	r3, [sp, #56]	; 0x38
   24194:	2300      	movs	r3, #0
   24196:	9408      	str	r4, [sp, #32]
   24198:	469a      	mov	sl, r3
   2419a:	9313      	str	r3, [sp, #76]	; 0x4c
   2419c:	e762      	b.n	24064 <_svfprintf_r+0x230>
   2419e:	2200      	movs	r2, #0
   241a0:	3b30      	subs	r3, #48	; 0x30
   241a2:	0015      	movs	r5, r2
   241a4:	001a      	movs	r2, r3
   241a6:	0003      	movs	r3, r0
   241a8:	9407      	str	r4, [sp, #28]
   241aa:	0008      	movs	r0, r1
   241ac:	002c      	movs	r4, r5
   241ae:	469b      	mov	fp, r3
   241b0:	00a3      	lsls	r3, r4, #2
   241b2:	191c      	adds	r4, r3, r4
   241b4:	7803      	ldrb	r3, [r0, #0]
   241b6:	0064      	lsls	r4, r4, #1
   241b8:	1914      	adds	r4, r2, r4
   241ba:	001a      	movs	r2, r3
   241bc:	3101      	adds	r1, #1
   241be:	3a30      	subs	r2, #48	; 0x30
   241c0:	0008      	movs	r0, r1
   241c2:	2a09      	cmp	r2, #9
   241c4:	d9f4      	bls.n	241b0 <_svfprintf_r+0x37c>
   241c6:	940b      	str	r4, [sp, #44]	; 0x2c
   241c8:	4658      	mov	r0, fp
   241ca:	9c07      	ldr	r4, [sp, #28]
   241cc:	e697      	b.n	23efe <_svfprintf_r+0xca>
   241ce:	2308      	movs	r3, #8
   241d0:	431c      	orrs	r4, r3
   241d2:	780b      	ldrb	r3, [r1, #0]
   241d4:	e692      	b.n	23efc <_svfprintf_r+0xc8>
   241d6:	9312      	str	r3, [sp, #72]	; 0x48
   241d8:	2310      	movs	r3, #16
   241da:	431c      	orrs	r4, r3
   241dc:	468b      	mov	fp, r1
   241de:	06a3      	lsls	r3, r4, #26
   241e0:	d500      	bpl.n	241e4 <_svfprintf_r+0x3b0>
   241e2:	e17b      	b.n	244dc <_svfprintf_r+0x6a8>
   241e4:	06e3      	lsls	r3, r4, #27
   241e6:	d501      	bpl.n	241ec <_svfprintf_r+0x3b8>
   241e8:	f000 fc7e 	bl	24ae8 <_svfprintf_r+0xcb4>
   241ec:	0663      	lsls	r3, r4, #25
   241ee:	d401      	bmi.n	241f4 <_svfprintf_r+0x3c0>
   241f0:	f000 fc7a 	bl	24ae8 <_svfprintf_r+0xcb4>
   241f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   241f6:	881a      	ldrh	r2, [r3, #0]
   241f8:	920c      	str	r2, [sp, #48]	; 0x30
   241fa:	2200      	movs	r2, #0
   241fc:	3304      	adds	r3, #4
   241fe:	930f      	str	r3, [sp, #60]	; 0x3c
   24200:	2300      	movs	r3, #0
   24202:	920d      	str	r2, [sp, #52]	; 0x34
   24204:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24206:	2100      	movs	r1, #0
   24208:	a816      	add	r0, sp, #88	; 0x58
   2420a:	77c1      	strb	r1, [r0, #31]
   2420c:	4688      	mov	r8, r1
   2420e:	4651      	mov	r1, sl
   24210:	3101      	adds	r1, #1
   24212:	d000      	beq.n	24216 <_svfprintf_r+0x3e2>
   24214:	e6ff      	b.n	24016 <_svfprintf_r+0x1e2>
   24216:	2a00      	cmp	r2, #0
   24218:	d100      	bne.n	2421c <_svfprintf_r+0x3e8>
   2421a:	e335      	b.n	24888 <_svfprintf_r+0xa54>
   2421c:	9408      	str	r4, [sp, #32]
   2421e:	2b01      	cmp	r3, #1
   24220:	d100      	bne.n	24224 <_svfprintf_r+0x3f0>
   24222:	e3e5      	b.n	249f0 <_svfprintf_r+0xbbc>
   24224:	2b02      	cmp	r3, #2
   24226:	d000      	beq.n	2422a <_svfprintf_r+0x3f6>
   24228:	e362      	b.n	248f0 <_svfprintf_r+0xabc>
   2422a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   2422c:	200f      	movs	r0, #15
   2422e:	46a1      	mov	r9, r4
   24230:	46b4      	mov	ip, r6
   24232:	ab32      	add	r3, sp, #200	; 0xc8
   24234:	0019      	movs	r1, r3
   24236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2423a:	0004      	movs	r4, r0
   2423c:	464d      	mov	r5, r9
   2423e:	4014      	ands	r4, r2
   24240:	5d2c      	ldrb	r4, [r5, r4]
   24242:	071e      	lsls	r6, r3, #28
   24244:	0915      	lsrs	r5, r2, #4
   24246:	3901      	subs	r1, #1
   24248:	432e      	orrs	r6, r5
   2424a:	700c      	strb	r4, [r1, #0]
   2424c:	091c      	lsrs	r4, r3, #4
   2424e:	0023      	movs	r3, r4
   24250:	0034      	movs	r4, r6
   24252:	0032      	movs	r2, r6
   24254:	431c      	orrs	r4, r3
   24256:	d1f0      	bne.n	2423a <_svfprintf_r+0x406>
   24258:	920c      	str	r2, [sp, #48]	; 0x30
   2425a:	930d      	str	r3, [sp, #52]	; 0x34
   2425c:	ab32      	add	r3, sp, #200	; 0xc8
   2425e:	1a5b      	subs	r3, r3, r1
   24260:	9111      	str	r1, [sp, #68]	; 0x44
   24262:	4666      	mov	r6, ip
   24264:	930e      	str	r3, [sp, #56]	; 0x38
   24266:	e6f5      	b.n	24054 <_svfprintf_r+0x220>
   24268:	00029c84 	.word	0x00029c84
   2426c:	00029e2c 	.word	0x00029e2c
   24270:	7fefffff 	.word	0x7fefffff
   24274:	00029de8 	.word	0x00029de8
   24278:	9312      	str	r3, [sp, #72]	; 0x48
   2427a:	2310      	movs	r3, #16
   2427c:	431c      	orrs	r4, r3
   2427e:	468b      	mov	fp, r1
   24280:	06a3      	lsls	r3, r4, #26
   24282:	d500      	bpl.n	24286 <_svfprintf_r+0x452>
   24284:	e111      	b.n	244aa <_svfprintf_r+0x676>
   24286:	06e3      	lsls	r3, r4, #27
   24288:	d501      	bpl.n	2428e <_svfprintf_r+0x45a>
   2428a:	f000 fc31 	bl	24af0 <_svfprintf_r+0xcbc>
   2428e:	0663      	lsls	r3, r4, #25
   24290:	d401      	bmi.n	24296 <_svfprintf_r+0x462>
   24292:	f000 fc2d 	bl	24af0 <_svfprintf_r+0xcbc>
   24296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24298:	881a      	ldrh	r2, [r3, #0]
   2429a:	920c      	str	r2, [sp, #48]	; 0x30
   2429c:	2200      	movs	r2, #0
   2429e:	3304      	adds	r3, #4
   242a0:	920d      	str	r2, [sp, #52]	; 0x34
   242a2:	930f      	str	r3, [sp, #60]	; 0x3c
   242a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   242a6:	2301      	movs	r3, #1
   242a8:	e7ad      	b.n	24206 <_svfprintf_r+0x3d2>
   242aa:	468b      	mov	fp, r1
   242ac:	4641      	mov	r1, r8
   242ae:	9312      	str	r3, [sp, #72]	; 0x48
   242b0:	2900      	cmp	r1, #0
   242b2:	d001      	beq.n	242b8 <_svfprintf_r+0x484>
   242b4:	f001 f890 	bl	253d8 <_svfprintf_r+0x15a4>
   242b8:	4bb8      	ldr	r3, [pc, #736]	; (2459c <_svfprintf_r+0x768>)
   242ba:	9317      	str	r3, [sp, #92]	; 0x5c
   242bc:	06a3      	lsls	r3, r4, #26
   242be:	d500      	bpl.n	242c2 <_svfprintf_r+0x48e>
   242c0:	e0ab      	b.n	2441a <_svfprintf_r+0x5e6>
   242c2:	06e3      	lsls	r3, r4, #27
   242c4:	d501      	bpl.n	242ca <_svfprintf_r+0x496>
   242c6:	f000 fc07 	bl	24ad8 <_svfprintf_r+0xca4>
   242ca:	0663      	lsls	r3, r4, #25
   242cc:	d401      	bmi.n	242d2 <_svfprintf_r+0x49e>
   242ce:	f000 fc03 	bl	24ad8 <_svfprintf_r+0xca4>
   242d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   242d4:	881a      	ldrh	r2, [r3, #0]
   242d6:	920c      	str	r2, [sp, #48]	; 0x30
   242d8:	2200      	movs	r2, #0
   242da:	3304      	adds	r3, #4
   242dc:	920d      	str	r2, [sp, #52]	; 0x34
   242de:	930f      	str	r3, [sp, #60]	; 0x3c
   242e0:	07e3      	lsls	r3, r4, #31
   242e2:	d400      	bmi.n	242e6 <_svfprintf_r+0x4b2>
   242e4:	e0a9      	b.n	2443a <_svfprintf_r+0x606>
   242e6:	990c      	ldr	r1, [sp, #48]	; 0x30
   242e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   242ea:	000b      	movs	r3, r1
   242ec:	4313      	orrs	r3, r2
   242ee:	001a      	movs	r2, r3
   242f0:	2302      	movs	r3, #2
   242f2:	2a00      	cmp	r2, #0
   242f4:	d100      	bne.n	242f8 <_svfprintf_r+0x4c4>
   242f6:	e786      	b.n	24206 <_svfprintf_r+0x3d2>
   242f8:	2030      	movs	r0, #48	; 0x30
   242fa:	a91e      	add	r1, sp, #120	; 0x78
   242fc:	7008      	strb	r0, [r1, #0]
   242fe:	2548      	movs	r5, #72	; 0x48
   24300:	4668      	mov	r0, sp
   24302:	1940      	adds	r0, r0, r5
   24304:	7800      	ldrb	r0, [r0, #0]
   24306:	431c      	orrs	r4, r3
   24308:	7048      	strb	r0, [r1, #1]
   2430a:	e77c      	b.n	24206 <_svfprintf_r+0x3d2>
   2430c:	468b      	mov	fp, r1
   2430e:	4641      	mov	r1, r8
   24310:	2900      	cmp	r1, #0
   24312:	d001      	beq.n	24318 <_svfprintf_r+0x4e4>
   24314:	f001 f883 	bl	2541e <_svfprintf_r+0x15ea>
   24318:	06a3      	lsls	r3, r4, #26
   2431a:	d501      	bpl.n	24320 <_svfprintf_r+0x4ec>
   2431c:	f000 fde9 	bl	24ef2 <_svfprintf_r+0x10be>
   24320:	06e3      	lsls	r3, r4, #27
   24322:	d501      	bpl.n	24328 <_svfprintf_r+0x4f4>
   24324:	f000 fd9b 	bl	24e5e <_svfprintf_r+0x102a>
   24328:	0663      	lsls	r3, r4, #25
   2432a:	d401      	bmi.n	24330 <_svfprintf_r+0x4fc>
   2432c:	f000 fd97 	bl	24e5e <_svfprintf_r+0x102a>
   24330:	4669      	mov	r1, sp
   24332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24334:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   24336:	681a      	ldr	r2, [r3, #0]
   24338:	3304      	adds	r3, #4
   2433a:	9207      	str	r2, [sp, #28]
   2433c:	8011      	strh	r1, [r2, #0]
   2433e:	930f      	str	r3, [sp, #60]	; 0x3c
   24340:	e5a3      	b.n	23e8a <_svfprintf_r+0x56>
   24342:	464b      	mov	r3, r9
   24344:	431c      	orrs	r4, r3
   24346:	780b      	ldrb	r3, [r1, #0]
   24348:	e5d8      	b.n	23efc <_svfprintf_r+0xc8>
   2434a:	9312      	str	r3, [sp, #72]	; 0x48
   2434c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2434e:	468b      	mov	fp, r1
   24350:	1d1d      	adds	r5, r3, #4
   24352:	681b      	ldr	r3, [r3, #0]
   24354:	a916      	add	r1, sp, #88	; 0x58
   24356:	001a      	movs	r2, r3
   24358:	9311      	str	r3, [sp, #68]	; 0x44
   2435a:	2300      	movs	r3, #0
   2435c:	77cb      	strb	r3, [r1, #31]
   2435e:	2a00      	cmp	r2, #0
   24360:	d101      	bne.n	24366 <_svfprintf_r+0x532>
   24362:	f000 fefb 	bl	2515c <_svfprintf_r+0x1328>
   24366:	4653      	mov	r3, sl
   24368:	3301      	adds	r3, #1
   2436a:	d101      	bne.n	24370 <_svfprintf_r+0x53c>
   2436c:	f000 fe38 	bl	24fe0 <_svfprintf_r+0x11ac>
   24370:	4652      	mov	r2, sl
   24372:	2100      	movs	r1, #0
   24374:	9811      	ldr	r0, [sp, #68]	; 0x44
   24376:	f002 fbc3 	bl	26b00 <memchr>
   2437a:	2800      	cmp	r0, #0
   2437c:	d101      	bne.n	24382 <_svfprintf_r+0x54e>
   2437e:	f000 ff54 	bl	2522a <_svfprintf_r+0x13f6>
   24382:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24384:	1ac3      	subs	r3, r0, r3
   24386:	001a      	movs	r2, r3
   24388:	930e      	str	r3, [sp, #56]	; 0x38
   2438a:	43db      	mvns	r3, r3
   2438c:	17db      	asrs	r3, r3, #31
   2438e:	401a      	ands	r2, r3
   24390:	ab16      	add	r3, sp, #88	; 0x58
   24392:	7fdb      	ldrb	r3, [r3, #31]
   24394:	9207      	str	r2, [sp, #28]
   24396:	4698      	mov	r8, r3
   24398:	2300      	movs	r3, #0
   2439a:	950f      	str	r5, [sp, #60]	; 0x3c
   2439c:	9408      	str	r4, [sp, #32]
   2439e:	469a      	mov	sl, r3
   243a0:	9313      	str	r3, [sp, #76]	; 0x4c
   243a2:	e65f      	b.n	24064 <_svfprintf_r+0x230>
   243a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   243a6:	9312      	str	r3, [sp, #72]	; 0x48
   243a8:	6813      	ldr	r3, [r2, #0]
   243aa:	ad28      	add	r5, sp, #160	; 0xa0
   243ac:	9307      	str	r3, [sp, #28]
   243ae:	466b      	mov	r3, sp
   243b0:	7f1b      	ldrb	r3, [r3, #28]
   243b2:	468b      	mov	fp, r1
   243b4:	702b      	strb	r3, [r5, #0]
   243b6:	2300      	movs	r3, #0
   243b8:	a916      	add	r1, sp, #88	; 0x58
   243ba:	77cb      	strb	r3, [r1, #31]
   243bc:	0013      	movs	r3, r2
   243be:	3304      	adds	r3, #4
   243c0:	930f      	str	r3, [sp, #60]	; 0x3c
   243c2:	2300      	movs	r3, #0
   243c4:	9408      	str	r4, [sp, #32]
   243c6:	4698      	mov	r8, r3
   243c8:	3301      	adds	r3, #1
   243ca:	9307      	str	r3, [sp, #28]
   243cc:	930e      	str	r3, [sp, #56]	; 0x38
   243ce:	2300      	movs	r3, #0
   243d0:	9511      	str	r5, [sp, #68]	; 0x44
   243d2:	469a      	mov	sl, r3
   243d4:	9313      	str	r3, [sp, #76]	; 0x4c
   243d6:	e64b      	b.n	24070 <_svfprintf_r+0x23c>
   243d8:	468b      	mov	fp, r1
   243da:	4641      	mov	r1, r8
   243dc:	9312      	str	r3, [sp, #72]	; 0x48
   243de:	2900      	cmp	r1, #0
   243e0:	d100      	bne.n	243e4 <_svfprintf_r+0x5b0>
   243e2:	e5f4      	b.n	23fce <_svfprintf_r+0x19a>
   243e4:	ab16      	add	r3, sp, #88	; 0x58
   243e6:	77d8      	strb	r0, [r3, #31]
   243e8:	e5f1      	b.n	23fce <_svfprintf_r+0x19a>
   243ea:	4663      	mov	r3, ip
   243ec:	431c      	orrs	r4, r3
   243ee:	780b      	ldrb	r3, [r1, #0]
   243f0:	e584      	b.n	23efc <_svfprintf_r+0xc8>
   243f2:	780b      	ldrb	r3, [r1, #0]
   243f4:	2b6c      	cmp	r3, #108	; 0x6c
   243f6:	d101      	bne.n	243fc <_svfprintf_r+0x5c8>
   243f8:	f000 fd86 	bl	24f08 <_svfprintf_r+0x10d4>
   243fc:	2210      	movs	r2, #16
   243fe:	4314      	orrs	r4, r2
   24400:	e57c      	b.n	23efc <_svfprintf_r+0xc8>
   24402:	468b      	mov	fp, r1
   24404:	4641      	mov	r1, r8
   24406:	9312      	str	r3, [sp, #72]	; 0x48
   24408:	2900      	cmp	r1, #0
   2440a:	d001      	beq.n	24410 <_svfprintf_r+0x5dc>
   2440c:	f000 ffe8 	bl	253e0 <_svfprintf_r+0x15ac>
   24410:	4b63      	ldr	r3, [pc, #396]	; (245a0 <_svfprintf_r+0x76c>)
   24412:	9317      	str	r3, [sp, #92]	; 0x5c
   24414:	06a3      	lsls	r3, r4, #26
   24416:	d400      	bmi.n	2441a <_svfprintf_r+0x5e6>
   24418:	e753      	b.n	242c2 <_svfprintf_r+0x48e>
   2441a:	2207      	movs	r2, #7
   2441c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2441e:	3307      	adds	r3, #7
   24420:	4393      	bics	r3, r2
   24422:	3201      	adds	r2, #1
   24424:	4694      	mov	ip, r2
   24426:	449c      	add	ip, r3
   24428:	4662      	mov	r2, ip
   2442a:	920f      	str	r2, [sp, #60]	; 0x3c
   2442c:	681a      	ldr	r2, [r3, #0]
   2442e:	685b      	ldr	r3, [r3, #4]
   24430:	920c      	str	r2, [sp, #48]	; 0x30
   24432:	930d      	str	r3, [sp, #52]	; 0x34
   24434:	07e3      	lsls	r3, r4, #31
   24436:	d500      	bpl.n	2443a <_svfprintf_r+0x606>
   24438:	e755      	b.n	242e6 <_svfprintf_r+0x4b2>
   2443a:	990c      	ldr	r1, [sp, #48]	; 0x30
   2443c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2443e:	0008      	movs	r0, r1
   24440:	4310      	orrs	r0, r2
   24442:	2302      	movs	r3, #2
   24444:	0002      	movs	r2, r0
   24446:	e6de      	b.n	24206 <_svfprintf_r+0x3d2>
   24448:	468b      	mov	fp, r1
   2444a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2444c:	2230      	movs	r2, #48	; 0x30
   2444e:	680b      	ldr	r3, [r1, #0]
   24450:	930c      	str	r3, [sp, #48]	; 0x30
   24452:	2300      	movs	r3, #0
   24454:	930d      	str	r3, [sp, #52]	; 0x34
   24456:	3302      	adds	r3, #2
   24458:	431c      	orrs	r4, r3
   2445a:	ab1e      	add	r3, sp, #120	; 0x78
   2445c:	701a      	strb	r2, [r3, #0]
   2445e:	3248      	adds	r2, #72	; 0x48
   24460:	705a      	strb	r2, [r3, #1]
   24462:	000b      	movs	r3, r1
   24464:	3304      	adds	r3, #4
   24466:	930f      	str	r3, [sp, #60]	; 0x3c
   24468:	4b4d      	ldr	r3, [pc, #308]	; (245a0 <_svfprintf_r+0x76c>)
   2446a:	9212      	str	r2, [sp, #72]	; 0x48
   2446c:	9317      	str	r3, [sp, #92]	; 0x5c
   2446e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24470:	2302      	movs	r3, #2
   24472:	e6c8      	b.n	24206 <_svfprintf_r+0x3d2>
   24474:	2301      	movs	r3, #1
   24476:	431c      	orrs	r4, r3
   24478:	780b      	ldrb	r3, [r1, #0]
   2447a:	e53f      	b.n	23efc <_svfprintf_r+0xc8>
   2447c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2447e:	1d1a      	adds	r2, r3, #4
   24480:	681b      	ldr	r3, [r3, #0]
   24482:	930b      	str	r3, [sp, #44]	; 0x2c
   24484:	2b00      	cmp	r3, #0
   24486:	da00      	bge.n	2448a <_svfprintf_r+0x656>
   24488:	e542      	b.n	23f10 <_svfprintf_r+0xdc>
   2448a:	780b      	ldrb	r3, [r1, #0]
   2448c:	920f      	str	r2, [sp, #60]	; 0x3c
   2448e:	e535      	b.n	23efc <_svfprintf_r+0xc8>
   24490:	780b      	ldrb	r3, [r1, #0]
   24492:	2800      	cmp	r0, #0
   24494:	d000      	beq.n	24498 <_svfprintf_r+0x664>
   24496:	e531      	b.n	23efc <_svfprintf_r+0xc8>
   24498:	2201      	movs	r2, #1
   2449a:	3020      	adds	r0, #32
   2449c:	4690      	mov	r8, r2
   2449e:	e52d      	b.n	23efc <_svfprintf_r+0xc8>
   244a0:	468b      	mov	fp, r1
   244a2:	9312      	str	r3, [sp, #72]	; 0x48
   244a4:	06a3      	lsls	r3, r4, #26
   244a6:	d400      	bmi.n	244aa <_svfprintf_r+0x676>
   244a8:	e6ed      	b.n	24286 <_svfprintf_r+0x452>
   244aa:	2207      	movs	r2, #7
   244ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   244ae:	3307      	adds	r3, #7
   244b0:	4393      	bics	r3, r2
   244b2:	3201      	adds	r2, #1
   244b4:	4694      	mov	ip, r2
   244b6:	449c      	add	ip, r3
   244b8:	4662      	mov	r2, ip
   244ba:	920f      	str	r2, [sp, #60]	; 0x3c
   244bc:	681a      	ldr	r2, [r3, #0]
   244be:	685b      	ldr	r3, [r3, #4]
   244c0:	0011      	movs	r1, r2
   244c2:	001a      	movs	r2, r3
   244c4:	0008      	movs	r0, r1
   244c6:	4310      	orrs	r0, r2
   244c8:	910c      	str	r1, [sp, #48]	; 0x30
   244ca:	920d      	str	r2, [sp, #52]	; 0x34
   244cc:	2301      	movs	r3, #1
   244ce:	0002      	movs	r2, r0
   244d0:	e699      	b.n	24206 <_svfprintf_r+0x3d2>
   244d2:	468b      	mov	fp, r1
   244d4:	9312      	str	r3, [sp, #72]	; 0x48
   244d6:	06a3      	lsls	r3, r4, #26
   244d8:	d400      	bmi.n	244dc <_svfprintf_r+0x6a8>
   244da:	e683      	b.n	241e4 <_svfprintf_r+0x3b0>
   244dc:	2207      	movs	r2, #7
   244de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   244e0:	3307      	adds	r3, #7
   244e2:	4393      	bics	r3, r2
   244e4:	3201      	adds	r2, #1
   244e6:	4694      	mov	ip, r2
   244e8:	449c      	add	ip, r3
   244ea:	4662      	mov	r2, ip
   244ec:	920f      	str	r2, [sp, #60]	; 0x3c
   244ee:	681a      	ldr	r2, [r3, #0]
   244f0:	685b      	ldr	r3, [r3, #4]
   244f2:	0011      	movs	r1, r2
   244f4:	001a      	movs	r2, r3
   244f6:	0008      	movs	r0, r1
   244f8:	4310      	orrs	r0, r2
   244fa:	910c      	str	r1, [sp, #48]	; 0x30
   244fc:	920d      	str	r2, [sp, #52]	; 0x34
   244fe:	2300      	movs	r3, #0
   24500:	0002      	movs	r2, r0
   24502:	e680      	b.n	24206 <_svfprintf_r+0x3d2>
   24504:	468b      	mov	fp, r1
   24506:	4641      	mov	r1, r8
   24508:	9312      	str	r3, [sp, #72]	; 0x48
   2450a:	2900      	cmp	r1, #0
   2450c:	d001      	beq.n	24512 <_svfprintf_r+0x6de>
   2450e:	f000 ff7f 	bl	25410 <_svfprintf_r+0x15dc>
   24512:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24514:	2b00      	cmp	r3, #0
   24516:	d100      	bne.n	2451a <_svfprintf_r+0x6e6>
   24518:	e50b      	b.n	23f32 <_svfprintf_r+0xfe>
   2451a:	ad28      	add	r5, sp, #160	; 0xa0
   2451c:	702b      	strb	r3, [r5, #0]
   2451e:	2300      	movs	r3, #0
   24520:	aa16      	add	r2, sp, #88	; 0x58
   24522:	77d3      	strb	r3, [r2, #31]
   24524:	9408      	str	r4, [sp, #32]
   24526:	e74e      	b.n	243c6 <_svfprintf_r+0x592>
   24528:	68bc      	ldr	r4, [r7, #8]
   2452a:	4643      	mov	r3, r8
   2452c:	2b00      	cmp	r3, #0
   2452e:	d00f      	beq.n	24550 <_svfprintf_r+0x71c>
   24530:	aa16      	add	r2, sp, #88	; 0x58
   24532:	231f      	movs	r3, #31
   24534:	4694      	mov	ip, r2
   24536:	4463      	add	r3, ip
   24538:	6033      	str	r3, [r6, #0]
   2453a:	2301      	movs	r3, #1
   2453c:	6073      	str	r3, [r6, #4]
   2453e:	687b      	ldr	r3, [r7, #4]
   24540:	3401      	adds	r4, #1
   24542:	3301      	adds	r3, #1
   24544:	60bc      	str	r4, [r7, #8]
   24546:	607b      	str	r3, [r7, #4]
   24548:	2b07      	cmp	r3, #7
   2454a:	dd00      	ble.n	2454e <_svfprintf_r+0x71a>
   2454c:	e1b3      	b.n	248b6 <_svfprintf_r+0xa82>
   2454e:	3608      	adds	r6, #8
   24550:	464b      	mov	r3, r9
   24552:	2b00      	cmp	r3, #0
   24554:	d00c      	beq.n	24570 <_svfprintf_r+0x73c>
   24556:	ab1e      	add	r3, sp, #120	; 0x78
   24558:	6033      	str	r3, [r6, #0]
   2455a:	2302      	movs	r3, #2
   2455c:	6073      	str	r3, [r6, #4]
   2455e:	687b      	ldr	r3, [r7, #4]
   24560:	3402      	adds	r4, #2
   24562:	3301      	adds	r3, #1
   24564:	60bc      	str	r4, [r7, #8]
   24566:	607b      	str	r3, [r7, #4]
   24568:	2b07      	cmp	r3, #7
   2456a:	dd00      	ble.n	2456e <_svfprintf_r+0x73a>
   2456c:	e1af      	b.n	248ce <_svfprintf_r+0xa9a>
   2456e:	3608      	adds	r6, #8
   24570:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24572:	2b80      	cmp	r3, #128	; 0x80
   24574:	d100      	bne.n	24578 <_svfprintf_r+0x744>
   24576:	e120      	b.n	247ba <_svfprintf_r+0x986>
   24578:	4653      	mov	r3, sl
   2457a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2457c:	1a9d      	subs	r5, r3, r2
   2457e:	2d00      	cmp	r5, #0
   24580:	dd3c      	ble.n	245fc <_svfprintf_r+0x7c8>
   24582:	4a08      	ldr	r2, [pc, #32]	; (245a4 <_svfprintf_r+0x770>)
   24584:	687b      	ldr	r3, [r7, #4]
   24586:	4691      	mov	r9, r2
   24588:	2d10      	cmp	r5, #16
   2458a:	dd2c      	ble.n	245e6 <_svfprintf_r+0x7b2>
   2458c:	2210      	movs	r2, #16
   2458e:	0021      	movs	r1, r4
   24590:	4692      	mov	sl, r2
   24592:	9c09      	ldr	r4, [sp, #36]	; 0x24
   24594:	0032      	movs	r2, r6
   24596:	002e      	movs	r6, r5
   24598:	464d      	mov	r5, r9
   2459a:	e009      	b.n	245b0 <_svfprintf_r+0x77c>
   2459c:	00029df8 	.word	0x00029df8
   245a0:	00029e0c 	.word	0x00029e0c
   245a4:	00029e3c 	.word	0x00029e3c
   245a8:	3e10      	subs	r6, #16
   245aa:	3208      	adds	r2, #8
   245ac:	2e10      	cmp	r6, #16
   245ae:	dd16      	ble.n	245de <_svfprintf_r+0x7aa>
   245b0:	4650      	mov	r0, sl
   245b2:	3110      	adds	r1, #16
   245b4:	3301      	adds	r3, #1
   245b6:	6015      	str	r5, [r2, #0]
   245b8:	6050      	str	r0, [r2, #4]
   245ba:	60b9      	str	r1, [r7, #8]
   245bc:	607b      	str	r3, [r7, #4]
   245be:	2b07      	cmp	r3, #7
   245c0:	ddf2      	ble.n	245a8 <_svfprintf_r+0x774>
   245c2:	003a      	movs	r2, r7
   245c4:	9906      	ldr	r1, [sp, #24]
   245c6:	0020      	movs	r0, r4
   245c8:	f002 fe44 	bl	27254 <__ssprint_r>
   245cc:	2800      	cmp	r0, #0
   245ce:	d000      	beq.n	245d2 <_svfprintf_r+0x79e>
   245d0:	e4b7      	b.n	23f42 <_svfprintf_r+0x10e>
   245d2:	3e10      	subs	r6, #16
   245d4:	68b9      	ldr	r1, [r7, #8]
   245d6:	687b      	ldr	r3, [r7, #4]
   245d8:	aa32      	add	r2, sp, #200	; 0xc8
   245da:	2e10      	cmp	r6, #16
   245dc:	dce8      	bgt.n	245b0 <_svfprintf_r+0x77c>
   245de:	46a9      	mov	r9, r5
   245e0:	000c      	movs	r4, r1
   245e2:	0035      	movs	r5, r6
   245e4:	0016      	movs	r6, r2
   245e6:	464a      	mov	r2, r9
   245e8:	1964      	adds	r4, r4, r5
   245ea:	3301      	adds	r3, #1
   245ec:	6032      	str	r2, [r6, #0]
   245ee:	6075      	str	r5, [r6, #4]
   245f0:	60bc      	str	r4, [r7, #8]
   245f2:	607b      	str	r3, [r7, #4]
   245f4:	2b07      	cmp	r3, #7
   245f6:	dd00      	ble.n	245fa <_svfprintf_r+0x7c6>
   245f8:	e151      	b.n	2489e <_svfprintf_r+0xa6a>
   245fa:	3608      	adds	r6, #8
   245fc:	9b08      	ldr	r3, [sp, #32]
   245fe:	05db      	lsls	r3, r3, #23
   24600:	d500      	bpl.n	24604 <_svfprintf_r+0x7d0>
   24602:	e0b6      	b.n	24772 <_svfprintf_r+0x93e>
   24604:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24606:	6033      	str	r3, [r6, #0]
   24608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2460a:	469c      	mov	ip, r3
   2460c:	6073      	str	r3, [r6, #4]
   2460e:	687b      	ldr	r3, [r7, #4]
   24610:	4464      	add	r4, ip
   24612:	3301      	adds	r3, #1
   24614:	60bc      	str	r4, [r7, #8]
   24616:	607b      	str	r3, [r7, #4]
   24618:	2b07      	cmp	r3, #7
   2461a:	dd00      	ble.n	2461e <_svfprintf_r+0x7ea>
   2461c:	e09d      	b.n	2475a <_svfprintf_r+0x926>
   2461e:	3608      	adds	r6, #8
   24620:	9b08      	ldr	r3, [sp, #32]
   24622:	075b      	lsls	r3, r3, #29
   24624:	d541      	bpl.n	246aa <_svfprintf_r+0x876>
   24626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24628:	9a07      	ldr	r2, [sp, #28]
   2462a:	1a9d      	subs	r5, r3, r2
   2462c:	2d00      	cmp	r5, #0
   2462e:	dd3c      	ble.n	246aa <_svfprintf_r+0x876>
   24630:	4ac4      	ldr	r2, [pc, #784]	; (24944 <_svfprintf_r+0xb10>)
   24632:	687b      	ldr	r3, [r7, #4]
   24634:	4690      	mov	r8, r2
   24636:	2d10      	cmp	r5, #16
   24638:	dd26      	ble.n	24688 <_svfprintf_r+0x854>
   2463a:	2210      	movs	r2, #16
   2463c:	0021      	movs	r1, r4
   2463e:	4691      	mov	r9, r2
   24640:	9c09      	ldr	r4, [sp, #36]	; 0x24
   24642:	0032      	movs	r2, r6
   24644:	002e      	movs	r6, r5
   24646:	9d06      	ldr	r5, [sp, #24]
   24648:	e003      	b.n	24652 <_svfprintf_r+0x81e>
   2464a:	3e10      	subs	r6, #16
   2464c:	3208      	adds	r2, #8
   2464e:	2e10      	cmp	r6, #16
   24650:	dd17      	ble.n	24682 <_svfprintf_r+0x84e>
   24652:	48bc      	ldr	r0, [pc, #752]	; (24944 <_svfprintf_r+0xb10>)
   24654:	3110      	adds	r1, #16
   24656:	6010      	str	r0, [r2, #0]
   24658:	4648      	mov	r0, r9
   2465a:	3301      	adds	r3, #1
   2465c:	6050      	str	r0, [r2, #4]
   2465e:	60b9      	str	r1, [r7, #8]
   24660:	607b      	str	r3, [r7, #4]
   24662:	2b07      	cmp	r3, #7
   24664:	ddf1      	ble.n	2464a <_svfprintf_r+0x816>
   24666:	003a      	movs	r2, r7
   24668:	0029      	movs	r1, r5
   2466a:	0020      	movs	r0, r4
   2466c:	f002 fdf2 	bl	27254 <__ssprint_r>
   24670:	2800      	cmp	r0, #0
   24672:	d000      	beq.n	24676 <_svfprintf_r+0x842>
   24674:	e465      	b.n	23f42 <_svfprintf_r+0x10e>
   24676:	3e10      	subs	r6, #16
   24678:	68b9      	ldr	r1, [r7, #8]
   2467a:	687b      	ldr	r3, [r7, #4]
   2467c:	aa32      	add	r2, sp, #200	; 0xc8
   2467e:	2e10      	cmp	r6, #16
   24680:	dce7      	bgt.n	24652 <_svfprintf_r+0x81e>
   24682:	0035      	movs	r5, r6
   24684:	000c      	movs	r4, r1
   24686:	0016      	movs	r6, r2
   24688:	4642      	mov	r2, r8
   2468a:	1964      	adds	r4, r4, r5
   2468c:	3301      	adds	r3, #1
   2468e:	c624      	stmia	r6!, {r2, r5}
   24690:	60bc      	str	r4, [r7, #8]
   24692:	607b      	str	r3, [r7, #4]
   24694:	2b07      	cmp	r3, #7
   24696:	dd08      	ble.n	246aa <_svfprintf_r+0x876>
   24698:	003a      	movs	r2, r7
   2469a:	9906      	ldr	r1, [sp, #24]
   2469c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2469e:	f002 fdd9 	bl	27254 <__ssprint_r>
   246a2:	2800      	cmp	r0, #0
   246a4:	d000      	beq.n	246a8 <_svfprintf_r+0x874>
   246a6:	e44c      	b.n	23f42 <_svfprintf_r+0x10e>
   246a8:	68bc      	ldr	r4, [r7, #8]
   246aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   246ac:	9907      	ldr	r1, [sp, #28]
   246ae:	428b      	cmp	r3, r1
   246b0:	da00      	bge.n	246b4 <_svfprintf_r+0x880>
   246b2:	000b      	movs	r3, r1
   246b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   246b6:	4694      	mov	ip, r2
   246b8:	449c      	add	ip, r3
   246ba:	4663      	mov	r3, ip
   246bc:	930a      	str	r3, [sp, #40]	; 0x28
   246be:	2c00      	cmp	r4, #0
   246c0:	d000      	beq.n	246c4 <_svfprintf_r+0x890>
   246c2:	e0d6      	b.n	24872 <_svfprintf_r+0xa3e>
   246c4:	2300      	movs	r3, #0
   246c6:	ae32      	add	r6, sp, #200	; 0xc8
   246c8:	607b      	str	r3, [r7, #4]
   246ca:	f7ff fbde 	bl	23e8a <_svfprintf_r+0x56>
   246ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   246d0:	2b01      	cmp	r3, #1
   246d2:	dc00      	bgt.n	246d6 <_svfprintf_r+0x8a2>
   246d4:	e0ae      	b.n	24834 <_svfprintf_r+0xa00>
   246d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   246d8:	3401      	adds	r4, #1
   246da:	6033      	str	r3, [r6, #0]
   246dc:	2301      	movs	r3, #1
   246de:	6073      	str	r3, [r6, #4]
   246e0:	687b      	ldr	r3, [r7, #4]
   246e2:	60bc      	str	r4, [r7, #8]
   246e4:	3301      	adds	r3, #1
   246e6:	607b      	str	r3, [r7, #4]
   246e8:	2b07      	cmp	r3, #7
   246ea:	dd00      	ble.n	246ee <_svfprintf_r+0x8ba>
   246ec:	e2df      	b.n	24cae <_svfprintf_r+0xe7a>
   246ee:	3608      	adds	r6, #8
   246f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   246f2:	3301      	adds	r3, #1
   246f4:	6032      	str	r2, [r6, #0]
   246f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
   246f8:	4698      	mov	r8, r3
   246fa:	4694      	mov	ip, r2
   246fc:	4464      	add	r4, ip
   246fe:	6072      	str	r2, [r6, #4]
   24700:	60bc      	str	r4, [r7, #8]
   24702:	607b      	str	r3, [r7, #4]
   24704:	2b07      	cmp	r3, #7
   24706:	dd00      	ble.n	2470a <_svfprintf_r+0x8d6>
   24708:	e2de      	b.n	24cc8 <_svfprintf_r+0xe94>
   2470a:	3608      	adds	r6, #8
   2470c:	2200      	movs	r2, #0
   2470e:	2300      	movs	r3, #0
   24710:	9816      	ldr	r0, [sp, #88]	; 0x58
   24712:	9915      	ldr	r1, [sp, #84]	; 0x54
   24714:	f7fc fbd8 	bl	20ec8 <__aeabi_dcmpeq>
   24718:	2800      	cmp	r0, #0
   2471a:	d000      	beq.n	2471e <_svfprintf_r+0x8ea>
   2471c:	e1a4      	b.n	24a68 <_svfprintf_r+0xc34>
   2471e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   24720:	9b14      	ldr	r3, [sp, #80]	; 0x50
   24722:	3501      	adds	r5, #1
   24724:	3b01      	subs	r3, #1
   24726:	6035      	str	r5, [r6, #0]
   24728:	6073      	str	r3, [r6, #4]
   2472a:	18e4      	adds	r4, r4, r3
   2472c:	2301      	movs	r3, #1
   2472e:	469c      	mov	ip, r3
   24730:	44e0      	add	r8, ip
   24732:	4643      	mov	r3, r8
   24734:	60bc      	str	r4, [r7, #8]
   24736:	607b      	str	r3, [r7, #4]
   24738:	2b07      	cmp	r3, #7
   2473a:	dd00      	ble.n	2473e <_svfprintf_r+0x90a>
   2473c:	e08b      	b.n	24856 <_svfprintf_r+0xa22>
   2473e:	3608      	adds	r6, #8
   24740:	ab21      	add	r3, sp, #132	; 0x84
   24742:	6033      	str	r3, [r6, #0]
   24744:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   24746:	469c      	mov	ip, r3
   24748:	6073      	str	r3, [r6, #4]
   2474a:	4643      	mov	r3, r8
   2474c:	4464      	add	r4, ip
   2474e:	3301      	adds	r3, #1
   24750:	60bc      	str	r4, [r7, #8]
   24752:	607b      	str	r3, [r7, #4]
   24754:	2b07      	cmp	r3, #7
   24756:	dc00      	bgt.n	2475a <_svfprintf_r+0x926>
   24758:	e761      	b.n	2461e <_svfprintf_r+0x7ea>
   2475a:	003a      	movs	r2, r7
   2475c:	9906      	ldr	r1, [sp, #24]
   2475e:	9809      	ldr	r0, [sp, #36]	; 0x24
   24760:	f002 fd78 	bl	27254 <__ssprint_r>
   24764:	2800      	cmp	r0, #0
   24766:	d001      	beq.n	2476c <_svfprintf_r+0x938>
   24768:	f7ff fbeb 	bl	23f42 <_svfprintf_r+0x10e>
   2476c:	68bc      	ldr	r4, [r7, #8]
   2476e:	ae32      	add	r6, sp, #200	; 0xc8
   24770:	e756      	b.n	24620 <_svfprintf_r+0x7ec>
   24772:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24774:	2b65      	cmp	r3, #101	; 0x65
   24776:	ddaa      	ble.n	246ce <_svfprintf_r+0x89a>
   24778:	2200      	movs	r2, #0
   2477a:	2300      	movs	r3, #0
   2477c:	9816      	ldr	r0, [sp, #88]	; 0x58
   2477e:	9915      	ldr	r1, [sp, #84]	; 0x54
   24780:	f7fc fba2 	bl	20ec8 <__aeabi_dcmpeq>
   24784:	2800      	cmp	r0, #0
   24786:	d100      	bne.n	2478a <_svfprintf_r+0x956>
   24788:	e0e2      	b.n	24950 <_svfprintf_r+0xb1c>
   2478a:	4b6f      	ldr	r3, [pc, #444]	; (24948 <_svfprintf_r+0xb14>)
   2478c:	3401      	adds	r4, #1
   2478e:	6033      	str	r3, [r6, #0]
   24790:	2301      	movs	r3, #1
   24792:	6073      	str	r3, [r6, #4]
   24794:	687b      	ldr	r3, [r7, #4]
   24796:	60bc      	str	r4, [r7, #8]
   24798:	3301      	adds	r3, #1
   2479a:	607b      	str	r3, [r7, #4]
   2479c:	2b07      	cmp	r3, #7
   2479e:	dd00      	ble.n	247a2 <_svfprintf_r+0x96e>
   247a0:	e366      	b.n	24e70 <_svfprintf_r+0x103c>
   247a2:	3608      	adds	r6, #8
   247a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   247a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   247a8:	4293      	cmp	r3, r2
   247aa:	da00      	bge.n	247ae <_svfprintf_r+0x97a>
   247ac:	e1a4      	b.n	24af8 <_svfprintf_r+0xcc4>
   247ae:	9b08      	ldr	r3, [sp, #32]
   247b0:	07db      	lsls	r3, r3, #31
   247b2:	d500      	bpl.n	247b6 <_svfprintf_r+0x982>
   247b4:	e1a0      	b.n	24af8 <_svfprintf_r+0xcc4>
   247b6:	68bc      	ldr	r4, [r7, #8]
   247b8:	e732      	b.n	24620 <_svfprintf_r+0x7ec>
   247ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   247bc:	9a07      	ldr	r2, [sp, #28]
   247be:	1a9d      	subs	r5, r3, r2
   247c0:	2d00      	cmp	r5, #0
   247c2:	dc00      	bgt.n	247c6 <_svfprintf_r+0x992>
   247c4:	e6d8      	b.n	24578 <_svfprintf_r+0x744>
   247c6:	4a61      	ldr	r2, [pc, #388]	; (2494c <_svfprintf_r+0xb18>)
   247c8:	687b      	ldr	r3, [r7, #4]
   247ca:	4691      	mov	r9, r2
   247cc:	2d10      	cmp	r5, #16
   247ce:	dd25      	ble.n	2481c <_svfprintf_r+0x9e8>
   247d0:	2210      	movs	r2, #16
   247d2:	0021      	movs	r1, r4
   247d4:	4690      	mov	r8, r2
   247d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   247d8:	0032      	movs	r2, r6
   247da:	464e      	mov	r6, r9
   247dc:	e003      	b.n	247e6 <_svfprintf_r+0x9b2>
   247de:	3d10      	subs	r5, #16
   247e0:	3208      	adds	r2, #8
   247e2:	2d10      	cmp	r5, #16
   247e4:	dd17      	ble.n	24816 <_svfprintf_r+0x9e2>
   247e6:	4640      	mov	r0, r8
   247e8:	3110      	adds	r1, #16
   247ea:	3301      	adds	r3, #1
   247ec:	6016      	str	r6, [r2, #0]
   247ee:	6050      	str	r0, [r2, #4]
   247f0:	60b9      	str	r1, [r7, #8]
   247f2:	607b      	str	r3, [r7, #4]
   247f4:	2b07      	cmp	r3, #7
   247f6:	ddf2      	ble.n	247de <_svfprintf_r+0x9aa>
   247f8:	003a      	movs	r2, r7
   247fa:	9906      	ldr	r1, [sp, #24]
   247fc:	0020      	movs	r0, r4
   247fe:	f002 fd29 	bl	27254 <__ssprint_r>
   24802:	2800      	cmp	r0, #0
   24804:	d001      	beq.n	2480a <_svfprintf_r+0x9d6>
   24806:	f7ff fb9c 	bl	23f42 <_svfprintf_r+0x10e>
   2480a:	3d10      	subs	r5, #16
   2480c:	68b9      	ldr	r1, [r7, #8]
   2480e:	687b      	ldr	r3, [r7, #4]
   24810:	aa32      	add	r2, sp, #200	; 0xc8
   24812:	2d10      	cmp	r5, #16
   24814:	dce7      	bgt.n	247e6 <_svfprintf_r+0x9b2>
   24816:	46b1      	mov	r9, r6
   24818:	000c      	movs	r4, r1
   2481a:	0016      	movs	r6, r2
   2481c:	464a      	mov	r2, r9
   2481e:	1964      	adds	r4, r4, r5
   24820:	3301      	adds	r3, #1
   24822:	6032      	str	r2, [r6, #0]
   24824:	6075      	str	r5, [r6, #4]
   24826:	60bc      	str	r4, [r7, #8]
   24828:	607b      	str	r3, [r7, #4]
   2482a:	2b07      	cmp	r3, #7
   2482c:	dd00      	ble.n	24830 <_svfprintf_r+0x9fc>
   2482e:	e27e      	b.n	24d2e <_svfprintf_r+0xefa>
   24830:	3608      	adds	r6, #8
   24832:	e6a1      	b.n	24578 <_svfprintf_r+0x744>
   24834:	2301      	movs	r3, #1
   24836:	9a08      	ldr	r2, [sp, #32]
   24838:	4213      	tst	r3, r2
   2483a:	d000      	beq.n	2483e <_svfprintf_r+0xa0a>
   2483c:	e74b      	b.n	246d6 <_svfprintf_r+0x8a2>
   2483e:	6073      	str	r3, [r6, #4]
   24840:	687b      	ldr	r3, [r7, #4]
   24842:	9a11      	ldr	r2, [sp, #68]	; 0x44
   24844:	3301      	adds	r3, #1
   24846:	3401      	adds	r4, #1
   24848:	6032      	str	r2, [r6, #0]
   2484a:	60bc      	str	r4, [r7, #8]
   2484c:	4698      	mov	r8, r3
   2484e:	607b      	str	r3, [r7, #4]
   24850:	2b07      	cmp	r3, #7
   24852:	dc00      	bgt.n	24856 <_svfprintf_r+0xa22>
   24854:	e773      	b.n	2473e <_svfprintf_r+0x90a>
   24856:	003a      	movs	r2, r7
   24858:	9906      	ldr	r1, [sp, #24]
   2485a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2485c:	f002 fcfa 	bl	27254 <__ssprint_r>
   24860:	2800      	cmp	r0, #0
   24862:	d001      	beq.n	24868 <_svfprintf_r+0xa34>
   24864:	f7ff fb6d 	bl	23f42 <_svfprintf_r+0x10e>
   24868:	687b      	ldr	r3, [r7, #4]
   2486a:	68bc      	ldr	r4, [r7, #8]
   2486c:	4698      	mov	r8, r3
   2486e:	ae32      	add	r6, sp, #200	; 0xc8
   24870:	e766      	b.n	24740 <_svfprintf_r+0x90c>
   24872:	003a      	movs	r2, r7
   24874:	9906      	ldr	r1, [sp, #24]
   24876:	9809      	ldr	r0, [sp, #36]	; 0x24
   24878:	f002 fcec 	bl	27254 <__ssprint_r>
   2487c:	2800      	cmp	r0, #0
   2487e:	d100      	bne.n	24882 <_svfprintf_r+0xa4e>
   24880:	e720      	b.n	246c4 <_svfprintf_r+0x890>
   24882:	f7ff fb5e 	bl	23f42 <_svfprintf_r+0x10e>
   24886:	9c08      	ldr	r4, [sp, #32]
   24888:	2b01      	cmp	r3, #1
   2488a:	d100      	bne.n	2488e <_svfprintf_r+0xa5a>
   2488c:	e184      	b.n	24b98 <_svfprintf_r+0xd64>
   2488e:	2b02      	cmp	r3, #2
   24890:	d129      	bne.n	248e6 <_svfprintf_r+0xab2>
   24892:	9408      	str	r4, [sp, #32]
   24894:	2300      	movs	r3, #0
   24896:	2400      	movs	r4, #0
   24898:	930c      	str	r3, [sp, #48]	; 0x30
   2489a:	940d      	str	r4, [sp, #52]	; 0x34
   2489c:	e4c5      	b.n	2422a <_svfprintf_r+0x3f6>
   2489e:	003a      	movs	r2, r7
   248a0:	9906      	ldr	r1, [sp, #24]
   248a2:	9809      	ldr	r0, [sp, #36]	; 0x24
   248a4:	f002 fcd6 	bl	27254 <__ssprint_r>
   248a8:	2800      	cmp	r0, #0
   248aa:	d001      	beq.n	248b0 <_svfprintf_r+0xa7c>
   248ac:	f7ff fb49 	bl	23f42 <_svfprintf_r+0x10e>
   248b0:	68bc      	ldr	r4, [r7, #8]
   248b2:	ae32      	add	r6, sp, #200	; 0xc8
   248b4:	e6a2      	b.n	245fc <_svfprintf_r+0x7c8>
   248b6:	003a      	movs	r2, r7
   248b8:	9906      	ldr	r1, [sp, #24]
   248ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   248bc:	f002 fcca 	bl	27254 <__ssprint_r>
   248c0:	2800      	cmp	r0, #0
   248c2:	d001      	beq.n	248c8 <_svfprintf_r+0xa94>
   248c4:	f7ff fb3d 	bl	23f42 <_svfprintf_r+0x10e>
   248c8:	68bc      	ldr	r4, [r7, #8]
   248ca:	ae32      	add	r6, sp, #200	; 0xc8
   248cc:	e640      	b.n	24550 <_svfprintf_r+0x71c>
   248ce:	003a      	movs	r2, r7
   248d0:	9906      	ldr	r1, [sp, #24]
   248d2:	9809      	ldr	r0, [sp, #36]	; 0x24
   248d4:	f002 fcbe 	bl	27254 <__ssprint_r>
   248d8:	2800      	cmp	r0, #0
   248da:	d001      	beq.n	248e0 <_svfprintf_r+0xaac>
   248dc:	f7ff fb31 	bl	23f42 <_svfprintf_r+0x10e>
   248e0:	68bc      	ldr	r4, [r7, #8]
   248e2:	ae32      	add	r6, sp, #200	; 0xc8
   248e4:	e644      	b.n	24570 <_svfprintf_r+0x73c>
   248e6:	9408      	str	r4, [sp, #32]
   248e8:	2300      	movs	r3, #0
   248ea:	2400      	movs	r4, #0
   248ec:	930c      	str	r3, [sp, #48]	; 0x30
   248ee:	940d      	str	r4, [sp, #52]	; 0x34
   248f0:	980c      	ldr	r0, [sp, #48]	; 0x30
   248f2:	990d      	ldr	r1, [sp, #52]	; 0x34
   248f4:	465b      	mov	r3, fp
   248f6:	aa32      	add	r2, sp, #200	; 0xc8
   248f8:	9307      	str	r3, [sp, #28]
   248fa:	4691      	mov	r9, r2
   248fc:	46b3      	mov	fp, r6
   248fe:	e000      	b.n	24902 <_svfprintf_r+0xace>
   24900:	46a1      	mov	r9, r4
   24902:	074a      	lsls	r2, r1, #29
   24904:	4694      	mov	ip, r2
   24906:	464b      	mov	r3, r9
   24908:	4665      	mov	r5, ip
   2490a:	1e5c      	subs	r4, r3, #1
   2490c:	08c6      	lsrs	r6, r0, #3
   2490e:	2307      	movs	r3, #7
   24910:	08ca      	lsrs	r2, r1, #3
   24912:	4335      	orrs	r5, r6
   24914:	0011      	movs	r1, r2
   24916:	002a      	movs	r2, r5
   24918:	4003      	ands	r3, r0
   2491a:	3330      	adds	r3, #48	; 0x30
   2491c:	7023      	strb	r3, [r4, #0]
   2491e:	0028      	movs	r0, r5
   24920:	430a      	orrs	r2, r1
   24922:	d1ed      	bne.n	24900 <_svfprintf_r+0xacc>
   24924:	900c      	str	r0, [sp, #48]	; 0x30
   24926:	910d      	str	r1, [sp, #52]	; 0x34
   24928:	9907      	ldr	r1, [sp, #28]
   2492a:	465e      	mov	r6, fp
   2492c:	468b      	mov	fp, r1
   2492e:	9908      	ldr	r1, [sp, #32]
   24930:	464a      	mov	r2, r9
   24932:	9411      	str	r4, [sp, #68]	; 0x44
   24934:	07c9      	lsls	r1, r1, #31
   24936:	d500      	bpl.n	2493a <_svfprintf_r+0xb06>
   24938:	e13d      	b.n	24bb6 <_svfprintf_r+0xd82>
   2493a:	ab32      	add	r3, sp, #200	; 0xc8
   2493c:	1b1b      	subs	r3, r3, r4
   2493e:	930e      	str	r3, [sp, #56]	; 0x38
   24940:	f7ff fb88 	bl	24054 <_svfprintf_r+0x220>
   24944:	00029e2c 	.word	0x00029e2c
   24948:	00029e28 	.word	0x00029e28
   2494c:	00029e3c 	.word	0x00029e3c
   24950:	981f      	ldr	r0, [sp, #124]	; 0x7c
   24952:	2800      	cmp	r0, #0
   24954:	dc00      	bgt.n	24958 <_svfprintf_r+0xb24>
   24956:	e296      	b.n	24e86 <_svfprintf_r+0x1052>
   24958:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2495a:	9914      	ldr	r1, [sp, #80]	; 0x50
   2495c:	0013      	movs	r3, r2
   2495e:	4690      	mov	r8, r2
   24960:	428b      	cmp	r3, r1
   24962:	dd00      	ble.n	24966 <_svfprintf_r+0xb32>
   24964:	4688      	mov	r8, r1
   24966:	4643      	mov	r3, r8
   24968:	2b00      	cmp	r3, #0
   2496a:	dd0c      	ble.n	24986 <_svfprintf_r+0xb52>
   2496c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2496e:	4444      	add	r4, r8
   24970:	6033      	str	r3, [r6, #0]
   24972:	4643      	mov	r3, r8
   24974:	6073      	str	r3, [r6, #4]
   24976:	687b      	ldr	r3, [r7, #4]
   24978:	60bc      	str	r4, [r7, #8]
   2497a:	3301      	adds	r3, #1
   2497c:	607b      	str	r3, [r7, #4]
   2497e:	2b07      	cmp	r3, #7
   24980:	dd00      	ble.n	24984 <_svfprintf_r+0xb50>
   24982:	e3b7      	b.n	250f4 <_svfprintf_r+0x12c0>
   24984:	3608      	adds	r6, #8
   24986:	4643      	mov	r3, r8
   24988:	43db      	mvns	r3, r3
   2498a:	4642      	mov	r2, r8
   2498c:	17db      	asrs	r3, r3, #31
   2498e:	4013      	ands	r3, r2
   24990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   24992:	1ad3      	subs	r3, r2, r3
   24994:	4698      	mov	r8, r3
   24996:	2b00      	cmp	r3, #0
   24998:	dc00      	bgt.n	2499c <_svfprintf_r+0xb68>
   2499a:	e128      	b.n	24bee <_svfprintf_r+0xdba>
   2499c:	2b10      	cmp	r3, #16
   2499e:	dc01      	bgt.n	249a4 <_svfprintf_r+0xb70>
   249a0:	f000 fce7 	bl	25372 <_svfprintf_r+0x153e>
   249a4:	4acf      	ldr	r2, [pc, #828]	; (24ce4 <_svfprintf_r+0xeb0>)
   249a6:	0021      	movs	r1, r4
   249a8:	4691      	mov	r9, r2
   249aa:	2210      	movs	r2, #16
   249ac:	687b      	ldr	r3, [r7, #4]
   249ae:	4692      	mov	sl, r2
   249b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   249b2:	0032      	movs	r2, r6
   249b4:	464c      	mov	r4, r9
   249b6:	4646      	mov	r6, r8
   249b8:	e004      	b.n	249c4 <_svfprintf_r+0xb90>
   249ba:	3208      	adds	r2, #8
   249bc:	3e10      	subs	r6, #16
   249be:	2e10      	cmp	r6, #16
   249c0:	dc00      	bgt.n	249c4 <_svfprintf_r+0xb90>
   249c2:	e104      	b.n	24bce <_svfprintf_r+0xd9a>
   249c4:	4650      	mov	r0, sl
   249c6:	3110      	adds	r1, #16
   249c8:	3301      	adds	r3, #1
   249ca:	6014      	str	r4, [r2, #0]
   249cc:	6050      	str	r0, [r2, #4]
   249ce:	60b9      	str	r1, [r7, #8]
   249d0:	607b      	str	r3, [r7, #4]
   249d2:	2b07      	cmp	r3, #7
   249d4:	ddf1      	ble.n	249ba <_svfprintf_r+0xb86>
   249d6:	003a      	movs	r2, r7
   249d8:	9906      	ldr	r1, [sp, #24]
   249da:	0028      	movs	r0, r5
   249dc:	f002 fc3a 	bl	27254 <__ssprint_r>
   249e0:	2800      	cmp	r0, #0
   249e2:	d001      	beq.n	249e8 <_svfprintf_r+0xbb4>
   249e4:	f7ff faad 	bl	23f42 <_svfprintf_r+0x10e>
   249e8:	68b9      	ldr	r1, [r7, #8]
   249ea:	687b      	ldr	r3, [r7, #4]
   249ec:	aa32      	add	r2, sp, #200	; 0xc8
   249ee:	e7e5      	b.n	249bc <_svfprintf_r+0xb88>
   249f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   249f2:	2b00      	cmp	r3, #0
   249f4:	d100      	bne.n	249f8 <_svfprintf_r+0xbc4>
   249f6:	e0ca      	b.n	24b8e <_svfprintf_r+0xd5a>
   249f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   249fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   249fc:	ab32      	add	r3, sp, #200	; 0xc8
   249fe:	46b1      	mov	r9, r6
   24a00:	001e      	movs	r6, r3
   24a02:	0020      	movs	r0, r4
   24a04:	0029      	movs	r1, r5
   24a06:	220a      	movs	r2, #10
   24a08:	2300      	movs	r3, #0
   24a0a:	f003 f8b9 	bl	27b80 <__aeabi_uldivmod>
   24a0e:	3e01      	subs	r6, #1
   24a10:	3230      	adds	r2, #48	; 0x30
   24a12:	7032      	strb	r2, [r6, #0]
   24a14:	2300      	movs	r3, #0
   24a16:	0020      	movs	r0, r4
   24a18:	0029      	movs	r1, r5
   24a1a:	220a      	movs	r2, #10
   24a1c:	f003 f8b0 	bl	27b80 <__aeabi_uldivmod>
   24a20:	0003      	movs	r3, r0
   24a22:	0004      	movs	r4, r0
   24a24:	000d      	movs	r5, r1
   24a26:	430b      	orrs	r3, r1
   24a28:	d1eb      	bne.n	24a02 <_svfprintf_r+0xbce>
   24a2a:	0032      	movs	r2, r6
   24a2c:	ab32      	add	r3, sp, #200	; 0xc8
   24a2e:	1a9b      	subs	r3, r3, r2
   24a30:	9611      	str	r6, [sp, #68]	; 0x44
   24a32:	940c      	str	r4, [sp, #48]	; 0x30
   24a34:	950d      	str	r5, [sp, #52]	; 0x34
   24a36:	464e      	mov	r6, r9
   24a38:	930e      	str	r3, [sp, #56]	; 0x38
   24a3a:	f7ff fb0b 	bl	24054 <_svfprintf_r+0x220>
   24a3e:	2300      	movs	r3, #0
   24a40:	930e      	str	r3, [sp, #56]	; 0x38
   24a42:	ab32      	add	r3, sp, #200	; 0xc8
   24a44:	9311      	str	r3, [sp, #68]	; 0x44
   24a46:	f7ff fb05 	bl	24054 <_svfprintf_r+0x220>
   24a4a:	003a      	movs	r2, r7
   24a4c:	9906      	ldr	r1, [sp, #24]
   24a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
   24a50:	f002 fc00 	bl	27254 <__ssprint_r>
   24a54:	2800      	cmp	r0, #0
   24a56:	d001      	beq.n	24a5c <_svfprintf_r+0xc28>
   24a58:	f7ff fa73 	bl	23f42 <_svfprintf_r+0x10e>
   24a5c:	ab16      	add	r3, sp, #88	; 0x58
   24a5e:	7fdb      	ldrb	r3, [r3, #31]
   24a60:	68bc      	ldr	r4, [r7, #8]
   24a62:	4698      	mov	r8, r3
   24a64:	ae32      	add	r6, sp, #200	; 0xc8
   24a66:	e560      	b.n	2452a <_svfprintf_r+0x6f6>
   24a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
   24a6a:	1e5d      	subs	r5, r3, #1
   24a6c:	2d00      	cmp	r5, #0
   24a6e:	dc00      	bgt.n	24a72 <_svfprintf_r+0xc3e>
   24a70:	e666      	b.n	24740 <_svfprintf_r+0x90c>
   24a72:	4b9c      	ldr	r3, [pc, #624]	; (24ce4 <_svfprintf_r+0xeb0>)
   24a74:	4699      	mov	r9, r3
   24a76:	2d10      	cmp	r5, #16
   24a78:	dd29      	ble.n	24ace <_svfprintf_r+0xc9a>
   24a7a:	2310      	movs	r3, #16
   24a7c:	0032      	movs	r2, r6
   24a7e:	469a      	mov	sl, r3
   24a80:	002e      	movs	r6, r5
   24a82:	0021      	movs	r1, r4
   24a84:	4643      	mov	r3, r8
   24a86:	9c09      	ldr	r4, [sp, #36]	; 0x24
   24a88:	464d      	mov	r5, r9
   24a8a:	e003      	b.n	24a94 <_svfprintf_r+0xc60>
   24a8c:	3e10      	subs	r6, #16
   24a8e:	3208      	adds	r2, #8
   24a90:	2e10      	cmp	r6, #16
   24a92:	dd17      	ble.n	24ac4 <_svfprintf_r+0xc90>
   24a94:	4650      	mov	r0, sl
   24a96:	3110      	adds	r1, #16
   24a98:	3301      	adds	r3, #1
   24a9a:	6015      	str	r5, [r2, #0]
   24a9c:	6050      	str	r0, [r2, #4]
   24a9e:	60b9      	str	r1, [r7, #8]
   24aa0:	607b      	str	r3, [r7, #4]
   24aa2:	2b07      	cmp	r3, #7
   24aa4:	ddf2      	ble.n	24a8c <_svfprintf_r+0xc58>
   24aa6:	003a      	movs	r2, r7
   24aa8:	9906      	ldr	r1, [sp, #24]
   24aaa:	0020      	movs	r0, r4
   24aac:	f002 fbd2 	bl	27254 <__ssprint_r>
   24ab0:	2800      	cmp	r0, #0
   24ab2:	d001      	beq.n	24ab8 <_svfprintf_r+0xc84>
   24ab4:	f7ff fa45 	bl	23f42 <_svfprintf_r+0x10e>
   24ab8:	3e10      	subs	r6, #16
   24aba:	68b9      	ldr	r1, [r7, #8]
   24abc:	687b      	ldr	r3, [r7, #4]
   24abe:	aa32      	add	r2, sp, #200	; 0xc8
   24ac0:	2e10      	cmp	r6, #16
   24ac2:	dce7      	bgt.n	24a94 <_svfprintf_r+0xc60>
   24ac4:	46a9      	mov	r9, r5
   24ac6:	000c      	movs	r4, r1
   24ac8:	0035      	movs	r5, r6
   24aca:	4698      	mov	r8, r3
   24acc:	0016      	movs	r6, r2
   24ace:	464b      	mov	r3, r9
   24ad0:	6075      	str	r5, [r6, #4]
   24ad2:	6033      	str	r3, [r6, #0]
   24ad4:	1964      	adds	r4, r4, r5
   24ad6:	e629      	b.n	2472c <_svfprintf_r+0x8f8>
   24ad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24ada:	681a      	ldr	r2, [r3, #0]
   24adc:	f7ff fbfb 	bl	242d6 <_svfprintf_r+0x4a2>
   24ae0:	6813      	ldr	r3, [r2, #0]
   24ae2:	9307      	str	r3, [sp, #28]
   24ae4:	f7ff fa82 	bl	23fec <_svfprintf_r+0x1b8>
   24ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24aea:	681a      	ldr	r2, [r3, #0]
   24aec:	f7ff fb84 	bl	241f8 <_svfprintf_r+0x3c4>
   24af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24af2:	681a      	ldr	r2, [r3, #0]
   24af4:	f7ff fbd1 	bl	2429a <_svfprintf_r+0x466>
   24af8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   24afa:	68ba      	ldr	r2, [r7, #8]
   24afc:	6033      	str	r3, [r6, #0]
   24afe:	9b18      	ldr	r3, [sp, #96]	; 0x60
   24b00:	469c      	mov	ip, r3
   24b02:	6073      	str	r3, [r6, #4]
   24b04:	687b      	ldr	r3, [r7, #4]
   24b06:	4462      	add	r2, ip
   24b08:	3301      	adds	r3, #1
   24b0a:	0014      	movs	r4, r2
   24b0c:	60ba      	str	r2, [r7, #8]
   24b0e:	607b      	str	r3, [r7, #4]
   24b10:	2b07      	cmp	r3, #7
   24b12:	dd00      	ble.n	24b16 <_svfprintf_r+0xce2>
   24b14:	e202      	b.n	24f1c <_svfprintf_r+0x10e8>
   24b16:	3608      	adds	r6, #8
   24b18:	9b14      	ldr	r3, [sp, #80]	; 0x50
   24b1a:	1e5d      	subs	r5, r3, #1
   24b1c:	2d00      	cmp	r5, #0
   24b1e:	dc00      	bgt.n	24b22 <_svfprintf_r+0xcee>
   24b20:	e57e      	b.n	24620 <_svfprintf_r+0x7ec>
   24b22:	4a70      	ldr	r2, [pc, #448]	; (24ce4 <_svfprintf_r+0xeb0>)
   24b24:	687b      	ldr	r3, [r7, #4]
   24b26:	4691      	mov	r9, r2
   24b28:	2d10      	cmp	r5, #16
   24b2a:	dd25      	ble.n	24b78 <_svfprintf_r+0xd44>
   24b2c:	2210      	movs	r2, #16
   24b2e:	0021      	movs	r1, r4
   24b30:	4690      	mov	r8, r2
   24b32:	9c09      	ldr	r4, [sp, #36]	; 0x24
   24b34:	0032      	movs	r2, r6
   24b36:	002e      	movs	r6, r5
   24b38:	464d      	mov	r5, r9
   24b3a:	e003      	b.n	24b44 <_svfprintf_r+0xd10>
   24b3c:	3208      	adds	r2, #8
   24b3e:	3e10      	subs	r6, #16
   24b40:	2e10      	cmp	r6, #16
   24b42:	dd15      	ble.n	24b70 <_svfprintf_r+0xd3c>
   24b44:	4640      	mov	r0, r8
   24b46:	3110      	adds	r1, #16
   24b48:	3301      	adds	r3, #1
   24b4a:	6015      	str	r5, [r2, #0]
   24b4c:	6050      	str	r0, [r2, #4]
   24b4e:	60b9      	str	r1, [r7, #8]
   24b50:	607b      	str	r3, [r7, #4]
   24b52:	2b07      	cmp	r3, #7
   24b54:	ddf2      	ble.n	24b3c <_svfprintf_r+0xd08>
   24b56:	003a      	movs	r2, r7
   24b58:	9906      	ldr	r1, [sp, #24]
   24b5a:	0020      	movs	r0, r4
   24b5c:	f002 fb7a 	bl	27254 <__ssprint_r>
   24b60:	2800      	cmp	r0, #0
   24b62:	d001      	beq.n	24b68 <_svfprintf_r+0xd34>
   24b64:	f7ff f9ed 	bl	23f42 <_svfprintf_r+0x10e>
   24b68:	68b9      	ldr	r1, [r7, #8]
   24b6a:	687b      	ldr	r3, [r7, #4]
   24b6c:	aa32      	add	r2, sp, #200	; 0xc8
   24b6e:	e7e6      	b.n	24b3e <_svfprintf_r+0xd0a>
   24b70:	46a9      	mov	r9, r5
   24b72:	000c      	movs	r4, r1
   24b74:	0035      	movs	r5, r6
   24b76:	0016      	movs	r6, r2
   24b78:	464a      	mov	r2, r9
   24b7a:	1964      	adds	r4, r4, r5
   24b7c:	3301      	adds	r3, #1
   24b7e:	6032      	str	r2, [r6, #0]
   24b80:	6075      	str	r5, [r6, #4]
   24b82:	60bc      	str	r4, [r7, #8]
   24b84:	607b      	str	r3, [r7, #4]
   24b86:	2b07      	cmp	r3, #7
   24b88:	dc00      	bgt.n	24b8c <_svfprintf_r+0xd58>
   24b8a:	e548      	b.n	2461e <_svfprintf_r+0x7ea>
   24b8c:	e5e5      	b.n	2475a <_svfprintf_r+0x926>
   24b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24b90:	2b09      	cmp	r3, #9
   24b92:	d900      	bls.n	24b96 <_svfprintf_r+0xd62>
   24b94:	e730      	b.n	249f8 <_svfprintf_r+0xbc4>
   24b96:	9c08      	ldr	r4, [sp, #32]
   24b98:	2227      	movs	r2, #39	; 0x27
   24b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24b9c:	a928      	add	r1, sp, #160	; 0xa0
   24b9e:	3330      	adds	r3, #48	; 0x30
   24ba0:	548b      	strb	r3, [r1, r2]
   24ba2:	2301      	movs	r3, #1
   24ba4:	aa16      	add	r2, sp, #88	; 0x58
   24ba6:	4694      	mov	ip, r2
   24ba8:	930e      	str	r3, [sp, #56]	; 0x38
   24baa:	336e      	adds	r3, #110	; 0x6e
   24bac:	4463      	add	r3, ip
   24bae:	9408      	str	r4, [sp, #32]
   24bb0:	9311      	str	r3, [sp, #68]	; 0x44
   24bb2:	f7ff fa4f 	bl	24054 <_svfprintf_r+0x220>
   24bb6:	2b30      	cmp	r3, #48	; 0x30
   24bb8:	d100      	bne.n	24bbc <_svfprintf_r+0xd88>
   24bba:	e20b      	b.n	24fd4 <_svfprintf_r+0x11a0>
   24bbc:	2330      	movs	r3, #48	; 0x30
   24bbe:	3a02      	subs	r2, #2
   24bc0:	7013      	strb	r3, [r2, #0]
   24bc2:	ab32      	add	r3, sp, #200	; 0xc8
   24bc4:	1a9b      	subs	r3, r3, r2
   24bc6:	930e      	str	r3, [sp, #56]	; 0x38
   24bc8:	9211      	str	r2, [sp, #68]	; 0x44
   24bca:	f7ff fa43 	bl	24054 <_svfprintf_r+0x220>
   24bce:	46b0      	mov	r8, r6
   24bd0:	46a1      	mov	r9, r4
   24bd2:	0016      	movs	r6, r2
   24bd4:	000c      	movs	r4, r1
   24bd6:	464a      	mov	r2, r9
   24bd8:	6032      	str	r2, [r6, #0]
   24bda:	4642      	mov	r2, r8
   24bdc:	4444      	add	r4, r8
   24bde:	3301      	adds	r3, #1
   24be0:	6072      	str	r2, [r6, #4]
   24be2:	60bc      	str	r4, [r7, #8]
   24be4:	607b      	str	r3, [r7, #4]
   24be6:	2b07      	cmp	r3, #7
   24be8:	dd00      	ble.n	24bec <_svfprintf_r+0xdb8>
   24bea:	e29c      	b.n	25126 <_svfprintf_r+0x12f2>
   24bec:	3608      	adds	r6, #8
   24bee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   24bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   24bf2:	4293      	cmp	r3, r2
   24bf4:	db4c      	blt.n	24c90 <_svfprintf_r+0xe5c>
   24bf6:	9a08      	ldr	r2, [sp, #32]
   24bf8:	07d2      	lsls	r2, r2, #31
   24bfa:	d449      	bmi.n	24c90 <_svfprintf_r+0xe5c>
   24bfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   24bfe:	9913      	ldr	r1, [sp, #76]	; 0x4c
   24c00:	1ad3      	subs	r3, r2, r3
   24c02:	1a52      	subs	r2, r2, r1
   24c04:	4690      	mov	r8, r2
   24c06:	429a      	cmp	r2, r3
   24c08:	dd00      	ble.n	24c0c <_svfprintf_r+0xdd8>
   24c0a:	4698      	mov	r8, r3
   24c0c:	4642      	mov	r2, r8
   24c0e:	2a00      	cmp	r2, #0
   24c10:	dd0f      	ble.n	24c32 <_svfprintf_r+0xdfe>
   24c12:	9913      	ldr	r1, [sp, #76]	; 0x4c
   24c14:	9a11      	ldr	r2, [sp, #68]	; 0x44
   24c16:	468c      	mov	ip, r1
   24c18:	4462      	add	r2, ip
   24c1a:	6032      	str	r2, [r6, #0]
   24c1c:	4642      	mov	r2, r8
   24c1e:	6072      	str	r2, [r6, #4]
   24c20:	687a      	ldr	r2, [r7, #4]
   24c22:	4444      	add	r4, r8
   24c24:	3201      	adds	r2, #1
   24c26:	60bc      	str	r4, [r7, #8]
   24c28:	607a      	str	r2, [r7, #4]
   24c2a:	2a07      	cmp	r2, #7
   24c2c:	dd00      	ble.n	24c30 <_svfprintf_r+0xdfc>
   24c2e:	e286      	b.n	2513e <_svfprintf_r+0x130a>
   24c30:	3608      	adds	r6, #8
   24c32:	4642      	mov	r2, r8
   24c34:	43d5      	mvns	r5, r2
   24c36:	17ed      	asrs	r5, r5, #31
   24c38:	4015      	ands	r5, r2
   24c3a:	1b5d      	subs	r5, r3, r5
   24c3c:	2d00      	cmp	r5, #0
   24c3e:	dc00      	bgt.n	24c42 <_svfprintf_r+0xe0e>
   24c40:	e4ee      	b.n	24620 <_svfprintf_r+0x7ec>
   24c42:	4a28      	ldr	r2, [pc, #160]	; (24ce4 <_svfprintf_r+0xeb0>)
   24c44:	687b      	ldr	r3, [r7, #4]
   24c46:	4691      	mov	r9, r2
   24c48:	2d10      	cmp	r5, #16
   24c4a:	dd95      	ble.n	24b78 <_svfprintf_r+0xd44>
   24c4c:	2210      	movs	r2, #16
   24c4e:	0021      	movs	r1, r4
   24c50:	4690      	mov	r8, r2
   24c52:	9c09      	ldr	r4, [sp, #36]	; 0x24
   24c54:	0032      	movs	r2, r6
   24c56:	002e      	movs	r6, r5
   24c58:	464d      	mov	r5, r9
   24c5a:	e003      	b.n	24c64 <_svfprintf_r+0xe30>
   24c5c:	3208      	adds	r2, #8
   24c5e:	3e10      	subs	r6, #16
   24c60:	2e10      	cmp	r6, #16
   24c62:	dd85      	ble.n	24b70 <_svfprintf_r+0xd3c>
   24c64:	4640      	mov	r0, r8
   24c66:	3110      	adds	r1, #16
   24c68:	3301      	adds	r3, #1
   24c6a:	6015      	str	r5, [r2, #0]
   24c6c:	6050      	str	r0, [r2, #4]
   24c6e:	60b9      	str	r1, [r7, #8]
   24c70:	607b      	str	r3, [r7, #4]
   24c72:	2b07      	cmp	r3, #7
   24c74:	ddf2      	ble.n	24c5c <_svfprintf_r+0xe28>
   24c76:	003a      	movs	r2, r7
   24c78:	9906      	ldr	r1, [sp, #24]
   24c7a:	0020      	movs	r0, r4
   24c7c:	f002 faea 	bl	27254 <__ssprint_r>
   24c80:	2800      	cmp	r0, #0
   24c82:	d001      	beq.n	24c88 <_svfprintf_r+0xe54>
   24c84:	f7ff f95d 	bl	23f42 <_svfprintf_r+0x10e>
   24c88:	68b9      	ldr	r1, [r7, #8]
   24c8a:	687b      	ldr	r3, [r7, #4]
   24c8c:	aa32      	add	r2, sp, #200	; 0xc8
   24c8e:	e7e6      	b.n	24c5e <_svfprintf_r+0xe2a>
   24c90:	9a19      	ldr	r2, [sp, #100]	; 0x64
   24c92:	6032      	str	r2, [r6, #0]
   24c94:	9a18      	ldr	r2, [sp, #96]	; 0x60
   24c96:	4694      	mov	ip, r2
   24c98:	6072      	str	r2, [r6, #4]
   24c9a:	687a      	ldr	r2, [r7, #4]
   24c9c:	4464      	add	r4, ip
   24c9e:	3201      	adds	r2, #1
   24ca0:	60bc      	str	r4, [r7, #8]
   24ca2:	607a      	str	r2, [r7, #4]
   24ca4:	2a07      	cmp	r2, #7
   24ca6:	dd00      	ble.n	24caa <_svfprintf_r+0xe76>
   24ca8:	e230      	b.n	2510c <_svfprintf_r+0x12d8>
   24caa:	3608      	adds	r6, #8
   24cac:	e7a6      	b.n	24bfc <_svfprintf_r+0xdc8>
   24cae:	003a      	movs	r2, r7
   24cb0:	9906      	ldr	r1, [sp, #24]
   24cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
   24cb4:	f002 face 	bl	27254 <__ssprint_r>
   24cb8:	2800      	cmp	r0, #0
   24cba:	d001      	beq.n	24cc0 <_svfprintf_r+0xe8c>
   24cbc:	f7ff f941 	bl	23f42 <_svfprintf_r+0x10e>
   24cc0:	68bc      	ldr	r4, [r7, #8]
   24cc2:	687b      	ldr	r3, [r7, #4]
   24cc4:	ae32      	add	r6, sp, #200	; 0xc8
   24cc6:	e513      	b.n	246f0 <_svfprintf_r+0x8bc>
   24cc8:	003a      	movs	r2, r7
   24cca:	9906      	ldr	r1, [sp, #24]
   24ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
   24cce:	f002 fac1 	bl	27254 <__ssprint_r>
   24cd2:	2800      	cmp	r0, #0
   24cd4:	d001      	beq.n	24cda <_svfprintf_r+0xea6>
   24cd6:	f7ff f934 	bl	23f42 <_svfprintf_r+0x10e>
   24cda:	687b      	ldr	r3, [r7, #4]
   24cdc:	68bc      	ldr	r4, [r7, #8]
   24cde:	4698      	mov	r8, r3
   24ce0:	ae32      	add	r6, sp, #200	; 0xc8
   24ce2:	e513      	b.n	2470c <_svfprintf_r+0x8d8>
   24ce4:	00029e3c 	.word	0x00029e3c
   24ce8:	2307      	movs	r3, #7
   24cea:	3207      	adds	r2, #7
   24cec:	439a      	bics	r2, r3
   24cee:	3301      	adds	r3, #1
   24cf0:	469c      	mov	ip, r3
   24cf2:	4494      	add	ip, r2
   24cf4:	4663      	mov	r3, ip
   24cf6:	930f      	str	r3, [sp, #60]	; 0x3c
   24cf8:	6853      	ldr	r3, [r2, #4]
   24cfa:	6812      	ldr	r2, [r2, #0]
   24cfc:	930d      	str	r3, [sp, #52]	; 0x34
   24cfe:	920c      	str	r2, [sp, #48]	; 0x30
   24d00:	2b00      	cmp	r3, #0
   24d02:	db01      	blt.n	24d08 <_svfprintf_r+0xed4>
   24d04:	f7ff f97a 	bl	23ffc <_svfprintf_r+0x1c8>
   24d08:	980c      	ldr	r0, [sp, #48]	; 0x30
   24d0a:	990d      	ldr	r1, [sp, #52]	; 0x34
   24d0c:	2300      	movs	r3, #0
   24d0e:	4242      	negs	r2, r0
   24d10:	418b      	sbcs	r3, r1
   24d12:	0011      	movs	r1, r2
   24d14:	001a      	movs	r2, r3
   24d16:	232d      	movs	r3, #45	; 0x2d
   24d18:	a816      	add	r0, sp, #88	; 0x58
   24d1a:	77c3      	strb	r3, [r0, #31]
   24d1c:	0008      	movs	r0, r1
   24d1e:	4310      	orrs	r0, r2
   24d20:	910c      	str	r1, [sp, #48]	; 0x30
   24d22:	920d      	str	r2, [sp, #52]	; 0x34
   24d24:	4698      	mov	r8, r3
   24d26:	0002      	movs	r2, r0
   24d28:	3b2c      	subs	r3, #44	; 0x2c
   24d2a:	f7ff f970 	bl	2400e <_svfprintf_r+0x1da>
   24d2e:	003a      	movs	r2, r7
   24d30:	9906      	ldr	r1, [sp, #24]
   24d32:	9809      	ldr	r0, [sp, #36]	; 0x24
   24d34:	f002 fa8e 	bl	27254 <__ssprint_r>
   24d38:	2800      	cmp	r0, #0
   24d3a:	d001      	beq.n	24d40 <_svfprintf_r+0xf0c>
   24d3c:	f7ff f901 	bl	23f42 <_svfprintf_r+0x10e>
   24d40:	68bc      	ldr	r4, [r7, #8]
   24d42:	ae32      	add	r6, sp, #200	; 0xc8
   24d44:	e418      	b.n	24578 <_svfprintf_r+0x744>
   24d46:	9916      	ldr	r1, [sp, #88]	; 0x58
   24d48:	9d15      	ldr	r5, [sp, #84]	; 0x54
   24d4a:	000a      	movs	r2, r1
   24d4c:	0008      	movs	r0, r1
   24d4e:	002b      	movs	r3, r5
   24d50:	0029      	movs	r1, r5
   24d52:	f7fe fd8d 	bl	23870 <__aeabi_dcmpun>
   24d56:	2800      	cmp	r0, #0
   24d58:	d000      	beq.n	24d5c <_svfprintf_r+0xf28>
   24d5a:	e2e6      	b.n	2532a <_svfprintf_r+0x14f6>
   24d5c:	4653      	mov	r3, sl
   24d5e:	3301      	adds	r3, #1
   24d60:	d100      	bne.n	24d64 <_svfprintf_r+0xf30>
   24d62:	e20d      	b.n	25180 <_svfprintf_r+0x134c>
   24d64:	2320      	movs	r3, #32
   24d66:	9a12      	ldr	r2, [sp, #72]	; 0x48
   24d68:	439a      	bics	r2, r3
   24d6a:	920e      	str	r2, [sp, #56]	; 0x38
   24d6c:	2a47      	cmp	r2, #71	; 0x47
   24d6e:	d100      	bne.n	24d72 <_svfprintf_r+0xf3e>
   24d70:	e11c      	b.n	24fac <_svfprintf_r+0x1178>
   24d72:	2380      	movs	r3, #128	; 0x80
   24d74:	005b      	lsls	r3, r3, #1
   24d76:	4323      	orrs	r3, r4
   24d78:	9308      	str	r3, [sp, #32]
   24d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   24d7c:	2b00      	cmp	r3, #0
   24d7e:	da00      	bge.n	24d82 <_svfprintf_r+0xf4e>
   24d80:	e221      	b.n	251c6 <_svfprintf_r+0x1392>
   24d82:	9a16      	ldr	r2, [sp, #88]	; 0x58
   24d84:	9307      	str	r3, [sp, #28]
   24d86:	2300      	movs	r3, #0
   24d88:	4691      	mov	r9, r2
   24d8a:	9310      	str	r3, [sp, #64]	; 0x40
   24d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24d8e:	2b66      	cmp	r3, #102	; 0x66
   24d90:	d100      	bne.n	24d94 <_svfprintf_r+0xf60>
   24d92:	e1fc      	b.n	2518e <_svfprintf_r+0x135a>
   24d94:	2b46      	cmp	r3, #70	; 0x46
   24d96:	d100      	bne.n	24d9a <_svfprintf_r+0xf66>
   24d98:	e0db      	b.n	24f52 <_svfprintf_r+0x111e>
   24d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   24d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
   24d9e:	3a45      	subs	r2, #69	; 0x45
   24da0:	0013      	movs	r3, r2
   24da2:	4259      	negs	r1, r3
   24da4:	4159      	adcs	r1, r3
   24da6:	ab20      	add	r3, sp, #128	; 0x80
   24da8:	000d      	movs	r5, r1
   24daa:	9303      	str	r3, [sp, #12]
   24dac:	ab1f      	add	r3, sp, #124	; 0x7c
   24dae:	9302      	str	r3, [sp, #8]
   24db0:	2302      	movs	r3, #2
   24db2:	aa23      	add	r2, sp, #140	; 0x8c
   24db4:	4455      	add	r5, sl
   24db6:	921b      	str	r2, [sp, #108]	; 0x6c
   24db8:	9204      	str	r2, [sp, #16]
   24dba:	9300      	str	r3, [sp, #0]
   24dbc:	9501      	str	r5, [sp, #4]
   24dbe:	9b07      	ldr	r3, [sp, #28]
   24dc0:	464a      	mov	r2, r9
   24dc2:	f000 fbf9 	bl	255b8 <_dtoa_r>
   24dc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24dc8:	9011      	str	r0, [sp, #68]	; 0x44
   24dca:	2b67      	cmp	r3, #103	; 0x67
   24dcc:	d000      	beq.n	24dd0 <_svfprintf_r+0xf9c>
   24dce:	e239      	b.n	25244 <_svfprintf_r+0x1410>
   24dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24dd2:	4698      	mov	r8, r3
   24dd4:	44a8      	add	r8, r5
   24dd6:	07e3      	lsls	r3, r4, #31
   24dd8:	d400      	bmi.n	24ddc <_svfprintf_r+0xfa8>
   24dda:	e28b      	b.n	252f4 <_svfprintf_r+0x14c0>
   24ddc:	2300      	movs	r3, #0
   24dde:	2200      	movs	r2, #0
   24de0:	4648      	mov	r0, r9
   24de2:	9907      	ldr	r1, [sp, #28]
   24de4:	f7fc f870 	bl	20ec8 <__aeabi_dcmpeq>
   24de8:	4643      	mov	r3, r8
   24dea:	2800      	cmp	r0, #0
   24dec:	d10a      	bne.n	24e04 <_svfprintf_r+0xfd0>
   24dee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   24df0:	4543      	cmp	r3, r8
   24df2:	d207      	bcs.n	24e04 <_svfprintf_r+0xfd0>
   24df4:	2130      	movs	r1, #48	; 0x30
   24df6:	4640      	mov	r0, r8
   24df8:	1c5a      	adds	r2, r3, #1
   24dfa:	9223      	str	r2, [sp, #140]	; 0x8c
   24dfc:	7019      	strb	r1, [r3, #0]
   24dfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   24e00:	4298      	cmp	r0, r3
   24e02:	d8f9      	bhi.n	24df8 <_svfprintf_r+0xfc4>
   24e04:	9a11      	ldr	r2, [sp, #68]	; 0x44
   24e06:	1a9b      	subs	r3, r3, r2
   24e08:	9314      	str	r3, [sp, #80]	; 0x50
   24e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24e0c:	2b47      	cmp	r3, #71	; 0x47
   24e0e:	d100      	bne.n	24e12 <_svfprintf_r+0xfde>
   24e10:	e0f6      	b.n	25000 <_svfprintf_r+0x11cc>
   24e12:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24e14:	2b65      	cmp	r3, #101	; 0x65
   24e16:	dc00      	bgt.n	24e1a <_svfprintf_r+0xfe6>
   24e18:	e226      	b.n	25268 <_svfprintf_r+0x1434>
   24e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24e1c:	2b66      	cmp	r3, #102	; 0x66
   24e1e:	d100      	bne.n	24e22 <_svfprintf_r+0xfee>
   24e20:	e1f4      	b.n	2520c <_svfprintf_r+0x13d8>
   24e22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   24e24:	9313      	str	r3, [sp, #76]	; 0x4c
   24e26:	9b14      	ldr	r3, [sp, #80]	; 0x50
   24e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   24e2a:	0019      	movs	r1, r3
   24e2c:	4291      	cmp	r1, r2
   24e2e:	dd00      	ble.n	24e32 <_svfprintf_r+0xffe>
   24e30:	e1d4      	b.n	251dc <_svfprintf_r+0x13a8>
   24e32:	07e3      	lsls	r3, r4, #31
   24e34:	d500      	bpl.n	24e38 <_svfprintf_r+0x1004>
   24e36:	e249      	b.n	252cc <_svfprintf_r+0x1498>
   24e38:	43d3      	mvns	r3, r2
   24e3a:	17db      	asrs	r3, r3, #31
   24e3c:	0011      	movs	r1, r2
   24e3e:	401a      	ands	r2, r3
   24e40:	2367      	movs	r3, #103	; 0x67
   24e42:	9207      	str	r2, [sp, #28]
   24e44:	910e      	str	r1, [sp, #56]	; 0x38
   24e46:	9312      	str	r3, [sp, #72]	; 0x48
   24e48:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24e4a:	2b00      	cmp	r3, #0
   24e4c:	d000      	beq.n	24e50 <_svfprintf_r+0x101c>
   24e4e:	e0cf      	b.n	24ff0 <_svfprintf_r+0x11bc>
   24e50:	ab16      	add	r3, sp, #88	; 0x58
   24e52:	7fdb      	ldrb	r3, [r3, #31]
   24e54:	4698      	mov	r8, r3
   24e56:	2300      	movs	r3, #0
   24e58:	469a      	mov	sl, r3
   24e5a:	f7ff f903 	bl	24064 <_svfprintf_r+0x230>
   24e5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   24e60:	990a      	ldr	r1, [sp, #40]	; 0x28
   24e62:	6813      	ldr	r3, [r2, #0]
   24e64:	6019      	str	r1, [r3, #0]
   24e66:	0013      	movs	r3, r2
   24e68:	3304      	adds	r3, #4
   24e6a:	930f      	str	r3, [sp, #60]	; 0x3c
   24e6c:	f7ff f80d 	bl	23e8a <_svfprintf_r+0x56>
   24e70:	003a      	movs	r2, r7
   24e72:	9906      	ldr	r1, [sp, #24]
   24e74:	9809      	ldr	r0, [sp, #36]	; 0x24
   24e76:	f002 f9ed 	bl	27254 <__ssprint_r>
   24e7a:	2800      	cmp	r0, #0
   24e7c:	d001      	beq.n	24e82 <_svfprintf_r+0x104e>
   24e7e:	f7ff f860 	bl	23f42 <_svfprintf_r+0x10e>
   24e82:	ae32      	add	r6, sp, #200	; 0xc8
   24e84:	e48e      	b.n	247a4 <_svfprintf_r+0x970>
   24e86:	4bde      	ldr	r3, [pc, #888]	; (25200 <_svfprintf_r+0x13cc>)
   24e88:	3401      	adds	r4, #1
   24e8a:	6033      	str	r3, [r6, #0]
   24e8c:	2301      	movs	r3, #1
   24e8e:	6073      	str	r3, [r6, #4]
   24e90:	687b      	ldr	r3, [r7, #4]
   24e92:	60bc      	str	r4, [r7, #8]
   24e94:	3301      	adds	r3, #1
   24e96:	607b      	str	r3, [r7, #4]
   24e98:	2b07      	cmp	r3, #7
   24e9a:	dc7a      	bgt.n	24f92 <_svfprintf_r+0x115e>
   24e9c:	3608      	adds	r6, #8
   24e9e:	2800      	cmp	r0, #0
   24ea0:	d107      	bne.n	24eb2 <_svfprintf_r+0x107e>
   24ea2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   24ea4:	2b00      	cmp	r3, #0
   24ea6:	d104      	bne.n	24eb2 <_svfprintf_r+0x107e>
   24ea8:	9b08      	ldr	r3, [sp, #32]
   24eaa:	07db      	lsls	r3, r3, #31
   24eac:	d401      	bmi.n	24eb2 <_svfprintf_r+0x107e>
   24eae:	f7ff fbb7 	bl	24620 <_svfprintf_r+0x7ec>
   24eb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   24eb4:	6033      	str	r3, [r6, #0]
   24eb6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   24eb8:	1919      	adds	r1, r3, r4
   24eba:	6073      	str	r3, [r6, #4]
   24ebc:	687b      	ldr	r3, [r7, #4]
   24ebe:	60b9      	str	r1, [r7, #8]
   24ec0:	3301      	adds	r3, #1
   24ec2:	607b      	str	r3, [r7, #4]
   24ec4:	2b07      	cmp	r3, #7
   24ec6:	dd00      	ble.n	24eca <_svfprintf_r+0x1096>
   24ec8:	e1f2      	b.n	252b0 <_svfprintf_r+0x147c>
   24eca:	0032      	movs	r2, r6
   24ecc:	3208      	adds	r2, #8
   24ece:	2800      	cmp	r0, #0
   24ed0:	da00      	bge.n	24ed4 <_svfprintf_r+0x10a0>
   24ed2:	e1cc      	b.n	2526e <_svfprintf_r+0x143a>
   24ed4:	9811      	ldr	r0, [sp, #68]	; 0x44
   24ed6:	3301      	adds	r3, #1
   24ed8:	6010      	str	r0, [r2, #0]
   24eda:	9814      	ldr	r0, [sp, #80]	; 0x50
   24edc:	607b      	str	r3, [r7, #4]
   24ede:	1844      	adds	r4, r0, r1
   24ee0:	6050      	str	r0, [r2, #4]
   24ee2:	60bc      	str	r4, [r7, #8]
   24ee4:	2b07      	cmp	r3, #7
   24ee6:	dd00      	ble.n	24eea <_svfprintf_r+0x10b6>
   24ee8:	e437      	b.n	2475a <_svfprintf_r+0x926>
   24eea:	3208      	adds	r2, #8
   24eec:	0016      	movs	r6, r2
   24eee:	f7ff fb97 	bl	24620 <_svfprintf_r+0x7ec>
   24ef2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   24ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24ef6:	680b      	ldr	r3, [r1, #0]
   24ef8:	601a      	str	r2, [r3, #0]
   24efa:	17d2      	asrs	r2, r2, #31
   24efc:	605a      	str	r2, [r3, #4]
   24efe:	000b      	movs	r3, r1
   24f00:	3304      	adds	r3, #4
   24f02:	930f      	str	r3, [sp, #60]	; 0x3c
   24f04:	f7fe ffc1 	bl	23e8a <_svfprintf_r+0x56>
   24f08:	464b      	mov	r3, r9
   24f0a:	3101      	adds	r1, #1
   24f0c:	431c      	orrs	r4, r3
   24f0e:	780b      	ldrb	r3, [r1, #0]
   24f10:	f7fe fff4 	bl	23efc <_svfprintf_r+0xc8>
   24f14:	4bbb      	ldr	r3, [pc, #748]	; (25204 <_svfprintf_r+0x13d0>)
   24f16:	9311      	str	r3, [sp, #68]	; 0x44
   24f18:	f7ff f937 	bl	2418a <_svfprintf_r+0x356>
   24f1c:	003a      	movs	r2, r7
   24f1e:	9906      	ldr	r1, [sp, #24]
   24f20:	9809      	ldr	r0, [sp, #36]	; 0x24
   24f22:	f002 f997 	bl	27254 <__ssprint_r>
   24f26:	2800      	cmp	r0, #0
   24f28:	d001      	beq.n	24f2e <_svfprintf_r+0x10fa>
   24f2a:	f7ff f80a 	bl	23f42 <_svfprintf_r+0x10e>
   24f2e:	68bc      	ldr	r4, [r7, #8]
   24f30:	ae32      	add	r6, sp, #200	; 0xc8
   24f32:	e5f1      	b.n	24b18 <_svfprintf_r+0xce4>
   24f34:	2140      	movs	r1, #64	; 0x40
   24f36:	9809      	ldr	r0, [sp, #36]	; 0x24
   24f38:	f001 fb2e 	bl	26598 <_malloc_r>
   24f3c:	9b06      	ldr	r3, [sp, #24]
   24f3e:	6018      	str	r0, [r3, #0]
   24f40:	6118      	str	r0, [r3, #16]
   24f42:	2800      	cmp	r0, #0
   24f44:	d100      	bne.n	24f48 <_svfprintf_r+0x1114>
   24f46:	e24f      	b.n	253e8 <_svfprintf_r+0x15b4>
   24f48:	2340      	movs	r3, #64	; 0x40
   24f4a:	9a06      	ldr	r2, [sp, #24]
   24f4c:	6153      	str	r3, [r2, #20]
   24f4e:	f7fe ff8e 	bl	23e6e <_svfprintf_r+0x3a>
   24f52:	ab23      	add	r3, sp, #140	; 0x8c
   24f54:	931b      	str	r3, [sp, #108]	; 0x6c
   24f56:	9304      	str	r3, [sp, #16]
   24f58:	ab20      	add	r3, sp, #128	; 0x80
   24f5a:	9303      	str	r3, [sp, #12]
   24f5c:	ab1f      	add	r3, sp, #124	; 0x7c
   24f5e:	9302      	str	r3, [sp, #8]
   24f60:	4653      	mov	r3, sl
   24f62:	9301      	str	r3, [sp, #4]
   24f64:	2303      	movs	r3, #3
   24f66:	464a      	mov	r2, r9
   24f68:	9300      	str	r3, [sp, #0]
   24f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
   24f6c:	9b07      	ldr	r3, [sp, #28]
   24f6e:	f000 fb23 	bl	255b8 <_dtoa_r>
   24f72:	4655      	mov	r5, sl
   24f74:	9011      	str	r0, [sp, #68]	; 0x44
   24f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24f78:	4698      	mov	r8, r3
   24f7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24f7c:	44a8      	add	r8, r5
   24f7e:	2b46      	cmp	r3, #70	; 0x46
   24f80:	d000      	beq.n	24f84 <_svfprintf_r+0x1150>
   24f82:	e72b      	b.n	24ddc <_svfprintf_r+0xfa8>
   24f84:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24f86:	781b      	ldrb	r3, [r3, #0]
   24f88:	2b30      	cmp	r3, #48	; 0x30
   24f8a:	d016      	beq.n	24fba <_svfprintf_r+0x1186>
   24f8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   24f8e:	4498      	add	r8, r3
   24f90:	e724      	b.n	24ddc <_svfprintf_r+0xfa8>
   24f92:	003a      	movs	r2, r7
   24f94:	9906      	ldr	r1, [sp, #24]
   24f96:	9809      	ldr	r0, [sp, #36]	; 0x24
   24f98:	f002 f95c 	bl	27254 <__ssprint_r>
   24f9c:	2800      	cmp	r0, #0
   24f9e:	d001      	beq.n	24fa4 <_svfprintf_r+0x1170>
   24fa0:	f7fe ffcf 	bl	23f42 <_svfprintf_r+0x10e>
   24fa4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   24fa6:	68bc      	ldr	r4, [r7, #8]
   24fa8:	ae32      	add	r6, sp, #200	; 0xc8
   24faa:	e778      	b.n	24e9e <_svfprintf_r+0x106a>
   24fac:	4653      	mov	r3, sl
   24fae:	2b00      	cmp	r3, #0
   24fb0:	d000      	beq.n	24fb4 <_svfprintf_r+0x1180>
   24fb2:	e6de      	b.n	24d72 <_svfprintf_r+0xf3e>
   24fb4:	3301      	adds	r3, #1
   24fb6:	469a      	mov	sl, r3
   24fb8:	e6db      	b.n	24d72 <_svfprintf_r+0xf3e>
   24fba:	2200      	movs	r2, #0
   24fbc:	2300      	movs	r3, #0
   24fbe:	4648      	mov	r0, r9
   24fc0:	9907      	ldr	r1, [sp, #28]
   24fc2:	f7fb ff81 	bl	20ec8 <__aeabi_dcmpeq>
   24fc6:	2800      	cmp	r0, #0
   24fc8:	d1e0      	bne.n	24f8c <_svfprintf_r+0x1158>
   24fca:	2301      	movs	r3, #1
   24fcc:	1b5b      	subs	r3, r3, r5
   24fce:	931f      	str	r3, [sp, #124]	; 0x7c
   24fd0:	4498      	add	r8, r3
   24fd2:	e703      	b.n	24ddc <_svfprintf_r+0xfa8>
   24fd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   24fd6:	ab32      	add	r3, sp, #200	; 0xc8
   24fd8:	1a9b      	subs	r3, r3, r2
   24fda:	930e      	str	r3, [sp, #56]	; 0x38
   24fdc:	f7ff f83a 	bl	24054 <_svfprintf_r+0x220>
   24fe0:	9811      	ldr	r0, [sp, #68]	; 0x44
   24fe2:	f7fe fef5 	bl	23dd0 <strlen>
   24fe6:	0002      	movs	r2, r0
   24fe8:	900e      	str	r0, [sp, #56]	; 0x38
   24fea:	0003      	movs	r3, r0
   24fec:	f7ff f9cd 	bl	2438a <_svfprintf_r+0x556>
   24ff0:	232d      	movs	r3, #45	; 0x2d
   24ff2:	aa16      	add	r2, sp, #88	; 0x58
   24ff4:	77d3      	strb	r3, [r2, #31]
   24ff6:	4698      	mov	r8, r3
   24ff8:	2300      	movs	r3, #0
   24ffa:	469a      	mov	sl, r3
   24ffc:	f7ff f835 	bl	2406a <_svfprintf_r+0x236>
   25000:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   25002:	9313      	str	r3, [sp, #76]	; 0x4c
   25004:	1cda      	adds	r2, r3, #3
   25006:	db02      	blt.n	2500e <_svfprintf_r+0x11da>
   25008:	459a      	cmp	sl, r3
   2500a:	db00      	blt.n	2500e <_svfprintf_r+0x11da>
   2500c:	e70b      	b.n	24e26 <_svfprintf_r+0xff2>
   2500e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25010:	3b02      	subs	r3, #2
   25012:	9312      	str	r3, [sp, #72]	; 0x48
   25014:	222c      	movs	r2, #44	; 0x2c
   25016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   25018:	2148      	movs	r1, #72	; 0x48
   2501a:	1e5d      	subs	r5, r3, #1
   2501c:	ab16      	add	r3, sp, #88	; 0x58
   2501e:	189b      	adds	r3, r3, r2
   25020:	466a      	mov	r2, sp
   25022:	1852      	adds	r2, r2, r1
   25024:	7812      	ldrb	r2, [r2, #0]
   25026:	951f      	str	r5, [sp, #124]	; 0x7c
   25028:	701a      	strb	r2, [r3, #0]
   2502a:	2d00      	cmp	r5, #0
   2502c:	da00      	bge.n	25030 <_svfprintf_r+0x11fc>
   2502e:	e1a4      	b.n	2537a <_svfprintf_r+0x1546>
   25030:	212d      	movs	r1, #45	; 0x2d
   25032:	232b      	movs	r3, #43	; 0x2b
   25034:	aa16      	add	r2, sp, #88	; 0x58
   25036:	1852      	adds	r2, r2, r1
   25038:	7013      	strb	r3, [r2, #0]
   2503a:	2d09      	cmp	r5, #9
   2503c:	dc00      	bgt.n	25040 <_svfprintf_r+0x120c>
   2503e:	e14c      	b.n	252da <_svfprintf_r+0x14a6>
   25040:	aa16      	add	r2, sp, #88	; 0x58
   25042:	233b      	movs	r3, #59	; 0x3b
   25044:	4694      	mov	ip, r2
   25046:	4463      	add	r3, ip
   25048:	469a      	mov	sl, r3
   2504a:	46b1      	mov	r9, r6
   2504c:	46a0      	mov	r8, r4
   2504e:	4656      	mov	r6, sl
   25050:	e000      	b.n	25054 <_svfprintf_r+0x1220>
   25052:	0026      	movs	r6, r4
   25054:	0028      	movs	r0, r5
   25056:	210a      	movs	r1, #10
   25058:	f7fb ff20 	bl	20e9c <__aeabi_idivmod>
   2505c:	1e74      	subs	r4, r6, #1
   2505e:	3130      	adds	r1, #48	; 0x30
   25060:	7021      	strb	r1, [r4, #0]
   25062:	0028      	movs	r0, r5
   25064:	210a      	movs	r1, #10
   25066:	f7fb fe33 	bl	20cd0 <__divsi3>
   2506a:	0005      	movs	r5, r0
   2506c:	2809      	cmp	r0, #9
   2506e:	dcf0      	bgt.n	25052 <_svfprintf_r+0x121e>
   25070:	0023      	movs	r3, r4
   25072:	4644      	mov	r4, r8
   25074:	46b0      	mov	r8, r6
   25076:	464e      	mov	r6, r9
   25078:	4699      	mov	r9, r3
   2507a:	0003      	movs	r3, r0
   2507c:	3330      	adds	r3, #48	; 0x30
   2507e:	b2d8      	uxtb	r0, r3
   25080:	4643      	mov	r3, r8
   25082:	3b02      	subs	r3, #2
   25084:	7018      	strb	r0, [r3, #0]
   25086:	459a      	cmp	sl, r3
   25088:	d800      	bhi.n	2508c <_svfprintf_r+0x1258>
   2508a:	e1b4      	b.n	253f6 <_svfprintf_r+0x15c2>
   2508c:	4642      	mov	r2, r8
   2508e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   25090:	4645      	mov	r5, r8
   25092:	1a99      	subs	r1, r3, r2
   25094:	2301      	movs	r3, #1
   25096:	3107      	adds	r1, #7
   25098:	425b      	negs	r3, r3
   2509a:	e001      	b.n	250a0 <_svfprintf_r+0x126c>
   2509c:	5ce8      	ldrb	r0, [r5, r3]
   2509e:	3301      	adds	r3, #1
   250a0:	aa21      	add	r2, sp, #132	; 0x84
   250a2:	18d2      	adds	r2, r2, r3
   250a4:	70d0      	strb	r0, [r2, #3]
   250a6:	428b      	cmp	r3, r1
   250a8:	d1f8      	bne.n	2509c <_svfprintf_r+0x1268>
   250aa:	a916      	add	r1, sp, #88	; 0x58
   250ac:	468c      	mov	ip, r1
   250ae:	222e      	movs	r2, #46	; 0x2e
   250b0:	464b      	mov	r3, r9
   250b2:	4462      	add	r2, ip
   250b4:	4694      	mov	ip, r2
   250b6:	1afb      	subs	r3, r7, r3
   250b8:	4463      	add	r3, ip
   250ba:	aa21      	add	r2, sp, #132	; 0x84
   250bc:	9914      	ldr	r1, [sp, #80]	; 0x50
   250be:	1a9b      	subs	r3, r3, r2
   250c0:	469c      	mov	ip, r3
   250c2:	000a      	movs	r2, r1
   250c4:	4462      	add	r2, ip
   250c6:	931a      	str	r3, [sp, #104]	; 0x68
   250c8:	920e      	str	r2, [sp, #56]	; 0x38
   250ca:	2901      	cmp	r1, #1
   250cc:	dc00      	bgt.n	250d0 <_svfprintf_r+0x129c>
   250ce:	e145      	b.n	2535c <_svfprintf_r+0x1528>
   250d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   250d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   250d4:	4694      	mov	ip, r2
   250d6:	4463      	add	r3, ip
   250d8:	001a      	movs	r2, r3
   250da:	930e      	str	r3, [sp, #56]	; 0x38
   250dc:	43db      	mvns	r3, r3
   250de:	17db      	asrs	r3, r3, #31
   250e0:	401a      	ands	r2, r3
   250e2:	2300      	movs	r3, #0
   250e4:	9207      	str	r2, [sp, #28]
   250e6:	9313      	str	r3, [sp, #76]	; 0x4c
   250e8:	e6ae      	b.n	24e48 <_svfprintf_r+0x1014>
   250ea:	2301      	movs	r3, #1
   250ec:	425b      	negs	r3, r3
   250ee:	930a      	str	r3, [sp, #40]	; 0x28
   250f0:	f7fe ff2d 	bl	23f4e <_svfprintf_r+0x11a>
   250f4:	003a      	movs	r2, r7
   250f6:	9906      	ldr	r1, [sp, #24]
   250f8:	9809      	ldr	r0, [sp, #36]	; 0x24
   250fa:	f002 f8ab 	bl	27254 <__ssprint_r>
   250fe:	2800      	cmp	r0, #0
   25100:	d001      	beq.n	25106 <_svfprintf_r+0x12d2>
   25102:	f7fe ff1e 	bl	23f42 <_svfprintf_r+0x10e>
   25106:	68bc      	ldr	r4, [r7, #8]
   25108:	ae32      	add	r6, sp, #200	; 0xc8
   2510a:	e43c      	b.n	24986 <_svfprintf_r+0xb52>
   2510c:	003a      	movs	r2, r7
   2510e:	9906      	ldr	r1, [sp, #24]
   25110:	9809      	ldr	r0, [sp, #36]	; 0x24
   25112:	f002 f89f 	bl	27254 <__ssprint_r>
   25116:	2800      	cmp	r0, #0
   25118:	d001      	beq.n	2511e <_svfprintf_r+0x12ea>
   2511a:	f7fe ff12 	bl	23f42 <_svfprintf_r+0x10e>
   2511e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   25120:	68bc      	ldr	r4, [r7, #8]
   25122:	ae32      	add	r6, sp, #200	; 0xc8
   25124:	e56a      	b.n	24bfc <_svfprintf_r+0xdc8>
   25126:	003a      	movs	r2, r7
   25128:	9906      	ldr	r1, [sp, #24]
   2512a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2512c:	f002 f892 	bl	27254 <__ssprint_r>
   25130:	2800      	cmp	r0, #0
   25132:	d001      	beq.n	25138 <_svfprintf_r+0x1304>
   25134:	f7fe ff05 	bl	23f42 <_svfprintf_r+0x10e>
   25138:	68bc      	ldr	r4, [r7, #8]
   2513a:	ae32      	add	r6, sp, #200	; 0xc8
   2513c:	e557      	b.n	24bee <_svfprintf_r+0xdba>
   2513e:	003a      	movs	r2, r7
   25140:	9906      	ldr	r1, [sp, #24]
   25142:	9809      	ldr	r0, [sp, #36]	; 0x24
   25144:	f002 f886 	bl	27254 <__ssprint_r>
   25148:	2800      	cmp	r0, #0
   2514a:	d001      	beq.n	25150 <_svfprintf_r+0x131c>
   2514c:	f7fe fef9 	bl	23f42 <_svfprintf_r+0x10e>
   25150:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25152:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   25154:	68bc      	ldr	r4, [r7, #8]
   25156:	1a9b      	subs	r3, r3, r2
   25158:	ae32      	add	r6, sp, #200	; 0xc8
   2515a:	e56a      	b.n	24c32 <_svfprintf_r+0xdfe>
   2515c:	4653      	mov	r3, sl
   2515e:	9307      	str	r3, [sp, #28]
   25160:	2b06      	cmp	r3, #6
   25162:	d901      	bls.n	25168 <_svfprintf_r+0x1334>
   25164:	2306      	movs	r3, #6
   25166:	9307      	str	r3, [sp, #28]
   25168:	9b07      	ldr	r3, [sp, #28]
   2516a:	950f      	str	r5, [sp, #60]	; 0x3c
   2516c:	930e      	str	r3, [sp, #56]	; 0x38
   2516e:	2300      	movs	r3, #0
   25170:	4698      	mov	r8, r3
   25172:	469a      	mov	sl, r3
   25174:	9313      	str	r3, [sp, #76]	; 0x4c
   25176:	4b24      	ldr	r3, [pc, #144]	; (25208 <_svfprintf_r+0x13d4>)
   25178:	9408      	str	r4, [sp, #32]
   2517a:	9311      	str	r3, [sp, #68]	; 0x44
   2517c:	f7fe ff78 	bl	24070 <_svfprintf_r+0x23c>
   25180:	2320      	movs	r3, #32
   25182:	9a12      	ldr	r2, [sp, #72]	; 0x48
   25184:	439a      	bics	r2, r3
   25186:	3b1a      	subs	r3, #26
   25188:	920e      	str	r2, [sp, #56]	; 0x38
   2518a:	469a      	mov	sl, r3
   2518c:	e5f1      	b.n	24d72 <_svfprintf_r+0xf3e>
   2518e:	ab23      	add	r3, sp, #140	; 0x8c
   25190:	931b      	str	r3, [sp, #108]	; 0x6c
   25192:	9304      	str	r3, [sp, #16]
   25194:	ab20      	add	r3, sp, #128	; 0x80
   25196:	9303      	str	r3, [sp, #12]
   25198:	ab1f      	add	r3, sp, #124	; 0x7c
   2519a:	9302      	str	r3, [sp, #8]
   2519c:	4653      	mov	r3, sl
   2519e:	9301      	str	r3, [sp, #4]
   251a0:	2303      	movs	r3, #3
   251a2:	464a      	mov	r2, r9
   251a4:	9300      	str	r3, [sp, #0]
   251a6:	9809      	ldr	r0, [sp, #36]	; 0x24
   251a8:	9b07      	ldr	r3, [sp, #28]
   251aa:	f000 fa05 	bl	255b8 <_dtoa_r>
   251ae:	0003      	movs	r3, r0
   251b0:	4453      	add	r3, sl
   251b2:	9011      	str	r0, [sp, #68]	; 0x44
   251b4:	4698      	mov	r8, r3
   251b6:	4655      	mov	r5, sl
   251b8:	e6e4      	b.n	24f84 <_svfprintf_r+0x1150>
   251ba:	232d      	movs	r3, #45	; 0x2d
   251bc:	aa16      	add	r2, sp, #88	; 0x58
   251be:	77d3      	strb	r3, [r2, #31]
   251c0:	4698      	mov	r8, r3
   251c2:	f7fe ffdb 	bl	2417c <_svfprintf_r+0x348>
   251c6:	2280      	movs	r2, #128	; 0x80
   251c8:	0612      	lsls	r2, r2, #24
   251ca:	4694      	mov	ip, r2
   251cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   251ce:	4699      	mov	r9, r3
   251d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   251d2:	4463      	add	r3, ip
   251d4:	9307      	str	r3, [sp, #28]
   251d6:	232d      	movs	r3, #45	; 0x2d
   251d8:	9310      	str	r3, [sp, #64]	; 0x40
   251da:	e5d7      	b.n	24d8c <_svfprintf_r+0xf58>
   251dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   251de:	9b14      	ldr	r3, [sp, #80]	; 0x50
   251e0:	4694      	mov	ip, r2
   251e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   251e4:	4463      	add	r3, ip
   251e6:	930e      	str	r3, [sp, #56]	; 0x38
   251e8:	2a00      	cmp	r2, #0
   251ea:	dc00      	bgt.n	251ee <_svfprintf_r+0x13ba>
   251ec:	e0ce      	b.n	2538c <_svfprintf_r+0x1558>
   251ee:	001a      	movs	r2, r3
   251f0:	43db      	mvns	r3, r3
   251f2:	17db      	asrs	r3, r3, #31
   251f4:	401a      	ands	r2, r3
   251f6:	2367      	movs	r3, #103	; 0x67
   251f8:	9207      	str	r2, [sp, #28]
   251fa:	9312      	str	r3, [sp, #72]	; 0x48
   251fc:	e624      	b.n	24e48 <_svfprintf_r+0x1014>
   251fe:	46c0      	nop			; (mov r8, r8)
   25200:	00029e28 	.word	0x00029e28
   25204:	00029dec 	.word	0x00029dec
   25208:	00029e20 	.word	0x00029e20
   2520c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2520e:	9313      	str	r3, [sp, #76]	; 0x4c
   25210:	2b00      	cmp	r3, #0
   25212:	dc00      	bgt.n	25216 <_svfprintf_r+0x13e2>
   25214:	e0d5      	b.n	253c2 <_svfprintf_r+0x158e>
   25216:	4652      	mov	r2, sl
   25218:	2a00      	cmp	r2, #0
   2521a:	d000      	beq.n	2521e <_svfprintf_r+0x13ea>
   2521c:	e092      	b.n	25344 <_svfprintf_r+0x1510>
   2521e:	07e2      	lsls	r2, r4, #31
   25220:	d500      	bpl.n	25224 <_svfprintf_r+0x13f0>
   25222:	e08f      	b.n	25344 <_svfprintf_r+0x1510>
   25224:	9307      	str	r3, [sp, #28]
   25226:	930e      	str	r3, [sp, #56]	; 0x38
   25228:	e60e      	b.n	24e48 <_svfprintf_r+0x1014>
   2522a:	ab16      	add	r3, sp, #88	; 0x58
   2522c:	7fdb      	ldrb	r3, [r3, #31]
   2522e:	950f      	str	r5, [sp, #60]	; 0x3c
   25230:	4698      	mov	r8, r3
   25232:	4653      	mov	r3, sl
   25234:	9307      	str	r3, [sp, #28]
   25236:	930e      	str	r3, [sp, #56]	; 0x38
   25238:	2300      	movs	r3, #0
   2523a:	9408      	str	r4, [sp, #32]
   2523c:	469a      	mov	sl, r3
   2523e:	9313      	str	r3, [sp, #76]	; 0x4c
   25240:	f7fe ff10 	bl	24064 <_svfprintf_r+0x230>
   25244:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25246:	4698      	mov	r8, r3
   25248:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2524a:	44a8      	add	r8, r5
   2524c:	2b47      	cmp	r3, #71	; 0x47
   2524e:	d000      	beq.n	25252 <_svfprintf_r+0x141e>
   25250:	e5c4      	b.n	24ddc <_svfprintf_r+0xfa8>
   25252:	07e3      	lsls	r3, r4, #31
   25254:	d500      	bpl.n	25258 <_svfprintf_r+0x1424>
   25256:	e68e      	b.n	24f76 <_svfprintf_r+0x1142>
   25258:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2525a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2525c:	1a9b      	subs	r3, r3, r2
   2525e:	9314      	str	r3, [sp, #80]	; 0x50
   25260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25262:	2b47      	cmp	r3, #71	; 0x47
   25264:	d100      	bne.n	25268 <_svfprintf_r+0x1434>
   25266:	e6cb      	b.n	25000 <_svfprintf_r+0x11cc>
   25268:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2526a:	9313      	str	r3, [sp, #76]	; 0x4c
   2526c:	e6d2      	b.n	25014 <_svfprintf_r+0x11e0>
   2526e:	4244      	negs	r4, r0
   25270:	3010      	adds	r0, #16
   25272:	db00      	blt.n	25276 <_svfprintf_r+0x1442>
   25274:	e0d0      	b.n	25418 <_svfprintf_r+0x15e4>
   25276:	486e      	ldr	r0, [pc, #440]	; (25430 <_svfprintf_r+0x15fc>)
   25278:	2610      	movs	r6, #16
   2527a:	0005      	movs	r5, r0
   2527c:	e003      	b.n	25286 <_svfprintf_r+0x1452>
   2527e:	3208      	adds	r2, #8
   25280:	3c10      	subs	r4, #16
   25282:	2c10      	cmp	r4, #16
   25284:	dd38      	ble.n	252f8 <_svfprintf_r+0x14c4>
   25286:	3110      	adds	r1, #16
   25288:	3301      	adds	r3, #1
   2528a:	6015      	str	r5, [r2, #0]
   2528c:	6056      	str	r6, [r2, #4]
   2528e:	60b9      	str	r1, [r7, #8]
   25290:	607b      	str	r3, [r7, #4]
   25292:	2b07      	cmp	r3, #7
   25294:	ddf3      	ble.n	2527e <_svfprintf_r+0x144a>
   25296:	003a      	movs	r2, r7
   25298:	9906      	ldr	r1, [sp, #24]
   2529a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2529c:	f001 ffda 	bl	27254 <__ssprint_r>
   252a0:	2800      	cmp	r0, #0
   252a2:	d001      	beq.n	252a8 <_svfprintf_r+0x1474>
   252a4:	f7fe fe4d 	bl	23f42 <_svfprintf_r+0x10e>
   252a8:	68b9      	ldr	r1, [r7, #8]
   252aa:	687b      	ldr	r3, [r7, #4]
   252ac:	aa32      	add	r2, sp, #200	; 0xc8
   252ae:	e7e7      	b.n	25280 <_svfprintf_r+0x144c>
   252b0:	003a      	movs	r2, r7
   252b2:	9906      	ldr	r1, [sp, #24]
   252b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   252b6:	f001 ffcd 	bl	27254 <__ssprint_r>
   252ba:	2800      	cmp	r0, #0
   252bc:	d001      	beq.n	252c2 <_svfprintf_r+0x148e>
   252be:	f7fe fe40 	bl	23f42 <_svfprintf_r+0x10e>
   252c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   252c4:	68b9      	ldr	r1, [r7, #8]
   252c6:	687b      	ldr	r3, [r7, #4]
   252c8:	aa32      	add	r2, sp, #200	; 0xc8
   252ca:	e600      	b.n	24ece <_svfprintf_r+0x109a>
   252cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   252ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   252d0:	4694      	mov	ip, r2
   252d2:	4463      	add	r3, ip
   252d4:	001a      	movs	r2, r3
   252d6:	930e      	str	r3, [sp, #56]	; 0x38
   252d8:	e78a      	b.n	251f0 <_svfprintf_r+0x13bc>
   252da:	212e      	movs	r1, #46	; 0x2e
   252dc:	2330      	movs	r3, #48	; 0x30
   252de:	aa16      	add	r2, sp, #88	; 0x58
   252e0:	1852      	adds	r2, r2, r1
   252e2:	7013      	strb	r3, [r2, #0]
   252e4:	002b      	movs	r3, r5
   252e6:	aa16      	add	r2, sp, #88	; 0x58
   252e8:	3101      	adds	r1, #1
   252ea:	3330      	adds	r3, #48	; 0x30
   252ec:	1852      	adds	r2, r2, r1
   252ee:	7013      	strb	r3, [r2, #0]
   252f0:	ab22      	add	r3, sp, #136	; 0x88
   252f2:	e6e2      	b.n	250ba <_svfprintf_r+0x1286>
   252f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   252f6:	e585      	b.n	24e04 <_svfprintf_r+0xfd0>
   252f8:	46a9      	mov	r9, r5
   252fa:	4648      	mov	r0, r9
   252fc:	1909      	adds	r1, r1, r4
   252fe:	3301      	adds	r3, #1
   25300:	6010      	str	r0, [r2, #0]
   25302:	6054      	str	r4, [r2, #4]
   25304:	60b9      	str	r1, [r7, #8]
   25306:	3208      	adds	r2, #8
   25308:	607b      	str	r3, [r7, #4]
   2530a:	2b07      	cmp	r3, #7
   2530c:	dc00      	bgt.n	25310 <_svfprintf_r+0x14dc>
   2530e:	e5e1      	b.n	24ed4 <_svfprintf_r+0x10a0>
   25310:	003a      	movs	r2, r7
   25312:	9906      	ldr	r1, [sp, #24]
   25314:	9809      	ldr	r0, [sp, #36]	; 0x24
   25316:	f001 ff9d 	bl	27254 <__ssprint_r>
   2531a:	2800      	cmp	r0, #0
   2531c:	d001      	beq.n	25322 <_svfprintf_r+0x14ee>
   2531e:	f7fe fe10 	bl	23f42 <_svfprintf_r+0x10e>
   25322:	68b9      	ldr	r1, [r7, #8]
   25324:	687b      	ldr	r3, [r7, #4]
   25326:	aa32      	add	r2, sp, #200	; 0xc8
   25328:	e5d4      	b.n	24ed4 <_svfprintf_r+0x10a0>
   2532a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2532c:	2b00      	cmp	r3, #0
   2532e:	db38      	blt.n	253a2 <_svfprintf_r+0x156e>
   25330:	ab16      	add	r3, sp, #88	; 0x58
   25332:	7fdb      	ldrb	r3, [r3, #31]
   25334:	4698      	mov	r8, r3
   25336:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25338:	2b47      	cmp	r3, #71	; 0x47
   2533a:	dc2e      	bgt.n	2539a <_svfprintf_r+0x1566>
   2533c:	4b3d      	ldr	r3, [pc, #244]	; (25434 <_svfprintf_r+0x1600>)
   2533e:	9311      	str	r3, [sp, #68]	; 0x44
   25340:	f7fe ff23 	bl	2418a <_svfprintf_r+0x356>
   25344:	9a18      	ldr	r2, [sp, #96]	; 0x60
   25346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   25348:	4694      	mov	ip, r2
   2534a:	4463      	add	r3, ip
   2534c:	4453      	add	r3, sl
   2534e:	001a      	movs	r2, r3
   25350:	930e      	str	r3, [sp, #56]	; 0x38
   25352:	43db      	mvns	r3, r3
   25354:	17db      	asrs	r3, r3, #31
   25356:	401a      	ands	r2, r3
   25358:	9207      	str	r2, [sp, #28]
   2535a:	e575      	b.n	24e48 <_svfprintf_r+0x1014>
   2535c:	2301      	movs	r3, #1
   2535e:	4023      	ands	r3, r4
   25360:	9313      	str	r3, [sp, #76]	; 0x4c
   25362:	d000      	beq.n	25366 <_svfprintf_r+0x1532>
   25364:	e6b4      	b.n	250d0 <_svfprintf_r+0x129c>
   25366:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25368:	43d3      	mvns	r3, r2
   2536a:	17db      	asrs	r3, r3, #31
   2536c:	401a      	ands	r2, r3
   2536e:	9207      	str	r2, [sp, #28]
   25370:	e56a      	b.n	24e48 <_svfprintf_r+0x1014>
   25372:	4a2f      	ldr	r2, [pc, #188]	; (25430 <_svfprintf_r+0x15fc>)
   25374:	687b      	ldr	r3, [r7, #4]
   25376:	4691      	mov	r9, r2
   25378:	e42d      	b.n	24bd6 <_svfprintf_r+0xda2>
   2537a:	2301      	movs	r3, #1
   2537c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2537e:	391b      	subs	r1, #27
   25380:	1a9d      	subs	r5, r3, r2
   25382:	aa16      	add	r2, sp, #88	; 0x58
   25384:	332c      	adds	r3, #44	; 0x2c
   25386:	1852      	adds	r2, r2, r1
   25388:	7013      	strb	r3, [r2, #0]
   2538a:	e656      	b.n	2503a <_svfprintf_r+0x1206>
   2538c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2538e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   25390:	1a98      	subs	r0, r3, r2
   25392:	1c43      	adds	r3, r0, #1
   25394:	001a      	movs	r2, r3
   25396:	930e      	str	r3, [sp, #56]	; 0x38
   25398:	e72a      	b.n	251f0 <_svfprintf_r+0x13bc>
   2539a:	4b27      	ldr	r3, [pc, #156]	; (25438 <_svfprintf_r+0x1604>)
   2539c:	9311      	str	r3, [sp, #68]	; 0x44
   2539e:	f7fe fef4 	bl	2418a <_svfprintf_r+0x356>
   253a2:	232d      	movs	r3, #45	; 0x2d
   253a4:	aa16      	add	r2, sp, #88	; 0x58
   253a6:	77d3      	strb	r3, [r2, #31]
   253a8:	4698      	mov	r8, r3
   253aa:	e7c4      	b.n	25336 <_svfprintf_r+0x1502>
   253ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   253ae:	1d1a      	adds	r2, r3, #4
   253b0:	681b      	ldr	r3, [r3, #0]
   253b2:	469a      	mov	sl, r3
   253b4:	2b00      	cmp	r3, #0
   253b6:	db36      	blt.n	25426 <_svfprintf_r+0x15f2>
   253b8:	784b      	ldrb	r3, [r1, #1]
   253ba:	920f      	str	r2, [sp, #60]	; 0x3c
   253bc:	4659      	mov	r1, fp
   253be:	f7fe fd9d 	bl	23efc <_svfprintf_r+0xc8>
   253c2:	4653      	mov	r3, sl
   253c4:	2b00      	cmp	r3, #0
   253c6:	d101      	bne.n	253cc <_svfprintf_r+0x1598>
   253c8:	07e3      	lsls	r3, r4, #31
   253ca:	d503      	bpl.n	253d4 <_svfprintf_r+0x15a0>
   253cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   253ce:	1c58      	adds	r0, r3, #1
   253d0:	0003      	movs	r3, r0
   253d2:	e7bb      	b.n	2534c <_svfprintf_r+0x1518>
   253d4:	2301      	movs	r3, #1
   253d6:	e725      	b.n	25224 <_svfprintf_r+0x13f0>
   253d8:	ab16      	add	r3, sp, #88	; 0x58
   253da:	77d8      	strb	r0, [r3, #31]
   253dc:	f7fe ff6c 	bl	242b8 <_svfprintf_r+0x484>
   253e0:	ab16      	add	r3, sp, #88	; 0x58
   253e2:	77d8      	strb	r0, [r3, #31]
   253e4:	f7ff f814 	bl	24410 <_svfprintf_r+0x5dc>
   253e8:	230c      	movs	r3, #12
   253ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   253ec:	6013      	str	r3, [r2, #0]
   253ee:	3b0d      	subs	r3, #13
   253f0:	930a      	str	r3, [sp, #40]	; 0x28
   253f2:	f7fe fdac 	bl	23f4e <_svfprintf_r+0x11a>
   253f6:	aa16      	add	r2, sp, #88	; 0x58
   253f8:	232e      	movs	r3, #46	; 0x2e
   253fa:	4694      	mov	ip, r2
   253fc:	4463      	add	r3, ip
   253fe:	e65c      	b.n	250ba <_svfprintf_r+0x1286>
   25400:	ab16      	add	r3, sp, #88	; 0x58
   25402:	77d8      	strb	r0, [r3, #31]
   25404:	f7fe fe85 	bl	24112 <_svfprintf_r+0x2de>
   25408:	ab16      	add	r3, sp, #88	; 0x58
   2540a:	77d8      	strb	r0, [r3, #31]
   2540c:	f7fe fddd 	bl	23fca <_svfprintf_r+0x196>
   25410:	ab16      	add	r3, sp, #88	; 0x58
   25412:	77d8      	strb	r0, [r3, #31]
   25414:	f7ff f87d 	bl	24512 <_svfprintf_r+0x6de>
   25418:	4805      	ldr	r0, [pc, #20]	; (25430 <_svfprintf_r+0x15fc>)
   2541a:	4681      	mov	r9, r0
   2541c:	e76d      	b.n	252fa <_svfprintf_r+0x14c6>
   2541e:	ab16      	add	r3, sp, #88	; 0x58
   25420:	77d8      	strb	r0, [r3, #31]
   25422:	f7fe ff79 	bl	24318 <_svfprintf_r+0x4e4>
   25426:	2301      	movs	r3, #1
   25428:	425b      	negs	r3, r3
   2542a:	469a      	mov	sl, r3
   2542c:	e7c4      	b.n	253b8 <_svfprintf_r+0x1584>
   2542e:	46c0      	nop			; (mov r8, r8)
   25430:	00029e3c 	.word	0x00029e3c
   25434:	00029df0 	.word	0x00029df0
   25438:	00029df4 	.word	0x00029df4

0002543c <register_fini>:
   2543c:	4b03      	ldr	r3, [pc, #12]	; (2544c <register_fini+0x10>)
   2543e:	b510      	push	{r4, lr}
   25440:	2b00      	cmp	r3, #0
   25442:	d002      	beq.n	2544a <register_fini+0xe>
   25444:	4802      	ldr	r0, [pc, #8]	; (25450 <register_fini+0x14>)
   25446:	f000 f805 	bl	25454 <atexit>
   2544a:	bd10      	pop	{r4, pc}
   2544c:	00000000 	.word	0x00000000
   25450:	00026541 	.word	0x00026541

00025454 <atexit>:
   25454:	b510      	push	{r4, lr}
   25456:	0001      	movs	r1, r0
   25458:	2300      	movs	r3, #0
   2545a:	2200      	movs	r2, #0
   2545c:	2000      	movs	r0, #0
   2545e:	f001 ff89 	bl	27374 <__register_exitproc>
   25462:	bd10      	pop	{r4, pc}

00025464 <quorem>:
   25464:	b5f0      	push	{r4, r5, r6, r7, lr}
   25466:	4645      	mov	r5, r8
   25468:	4680      	mov	r8, r0
   2546a:	46de      	mov	lr, fp
   2546c:	4657      	mov	r7, sl
   2546e:	464e      	mov	r6, r9
   25470:	4642      	mov	r2, r8
   25472:	b5e0      	push	{r5, r6, r7, lr}
   25474:	690c      	ldr	r4, [r1, #16]
   25476:	6912      	ldr	r2, [r2, #16]
   25478:	b085      	sub	sp, #20
   2547a:	000b      	movs	r3, r1
   2547c:	9102      	str	r1, [sp, #8]
   2547e:	2000      	movs	r0, #0
   25480:	4294      	cmp	r4, r2
   25482:	dd00      	ble.n	25486 <quorem+0x22>
   25484:	e090      	b.n	255a8 <quorem+0x144>
   25486:	2214      	movs	r2, #20
   25488:	4694      	mov	ip, r2
   2548a:	4463      	add	r3, ip
   2548c:	4699      	mov	r9, r3
   2548e:	464a      	mov	r2, r9
   25490:	3c01      	subs	r4, #1
   25492:	00a3      	lsls	r3, r4, #2
   25494:	18d6      	adds	r6, r2, r3
   25496:	2214      	movs	r2, #20
   25498:	4442      	add	r2, r8
   2549a:	4693      	mov	fp, r2
   2549c:	449b      	add	fp, r3
   2549e:	6833      	ldr	r3, [r6, #0]
   254a0:	0015      	movs	r5, r2
   254a2:	1c59      	adds	r1, r3, #1
   254a4:	465b      	mov	r3, fp
   254a6:	6818      	ldr	r0, [r3, #0]
   254a8:	9201      	str	r2, [sp, #4]
   254aa:	f7fb fb87 	bl	20bbc <__udivsi3>
   254ae:	1e03      	subs	r3, r0, #0
   254b0:	9000      	str	r0, [sp, #0]
   254b2:	d042      	beq.n	2553a <quorem+0xd6>
   254b4:	0029      	movs	r1, r5
   254b6:	2700      	movs	r7, #0
   254b8:	464d      	mov	r5, r9
   254ba:	2000      	movs	r0, #0
   254bc:	46b1      	mov	r9, r6
   254be:	46a2      	mov	sl, r4
   254c0:	003e      	movs	r6, r7
   254c2:	0004      	movs	r4, r0
   254c4:	469c      	mov	ip, r3
   254c6:	002f      	movs	r7, r5
   254c8:	0008      	movs	r0, r1
   254ca:	9503      	str	r5, [sp, #12]
   254cc:	4663      	mov	r3, ip
   254ce:	cf04      	ldmia	r7!, {r2}
   254d0:	0415      	lsls	r5, r2, #16
   254d2:	0c2d      	lsrs	r5, r5, #16
   254d4:	435d      	muls	r5, r3
   254d6:	0c12      	lsrs	r2, r2, #16
   254d8:	435a      	muls	r2, r3
   254da:	19ad      	adds	r5, r5, r6
   254dc:	0c2b      	lsrs	r3, r5, #16
   254de:	18d2      	adds	r2, r2, r3
   254e0:	6803      	ldr	r3, [r0, #0]
   254e2:	042d      	lsls	r5, r5, #16
   254e4:	0419      	lsls	r1, r3, #16
   254e6:	0c09      	lsrs	r1, r1, #16
   254e8:	1909      	adds	r1, r1, r4
   254ea:	0c16      	lsrs	r6, r2, #16
   254ec:	0c2d      	lsrs	r5, r5, #16
   254ee:	0412      	lsls	r2, r2, #16
   254f0:	1b49      	subs	r1, r1, r5
   254f2:	0c12      	lsrs	r2, r2, #16
   254f4:	0c1b      	lsrs	r3, r3, #16
   254f6:	1a9b      	subs	r3, r3, r2
   254f8:	140a      	asrs	r2, r1, #16
   254fa:	189b      	adds	r3, r3, r2
   254fc:	0409      	lsls	r1, r1, #16
   254fe:	141c      	asrs	r4, r3, #16
   25500:	0c09      	lsrs	r1, r1, #16
   25502:	041b      	lsls	r3, r3, #16
   25504:	4319      	orrs	r1, r3
   25506:	c002      	stmia	r0!, {r1}
   25508:	45b9      	cmp	r9, r7
   2550a:	d2df      	bcs.n	254cc <quorem+0x68>
   2550c:	9b03      	ldr	r3, [sp, #12]
   2550e:	464e      	mov	r6, r9
   25510:	4699      	mov	r9, r3
   25512:	465b      	mov	r3, fp
   25514:	681b      	ldr	r3, [r3, #0]
   25516:	4654      	mov	r4, sl
   25518:	2b00      	cmp	r3, #0
   2551a:	d10e      	bne.n	2553a <quorem+0xd6>
   2551c:	465b      	mov	r3, fp
   2551e:	9a01      	ldr	r2, [sp, #4]
   25520:	3b04      	subs	r3, #4
   25522:	429a      	cmp	r2, r3
   25524:	d304      	bcc.n	25530 <quorem+0xcc>
   25526:	e006      	b.n	25536 <quorem+0xd2>
   25528:	3b04      	subs	r3, #4
   2552a:	3c01      	subs	r4, #1
   2552c:	429a      	cmp	r2, r3
   2552e:	d202      	bcs.n	25536 <quorem+0xd2>
   25530:	6819      	ldr	r1, [r3, #0]
   25532:	2900      	cmp	r1, #0
   25534:	d0f8      	beq.n	25528 <quorem+0xc4>
   25536:	4643      	mov	r3, r8
   25538:	611c      	str	r4, [r3, #16]
   2553a:	9902      	ldr	r1, [sp, #8]
   2553c:	4640      	mov	r0, r8
   2553e:	f001 fd63 	bl	27008 <__mcmp>
   25542:	2800      	cmp	r0, #0
   25544:	db2f      	blt.n	255a6 <quorem+0x142>
   25546:	464f      	mov	r7, r9
   25548:	2000      	movs	r0, #0
   2554a:	9b00      	ldr	r3, [sp, #0]
   2554c:	9d01      	ldr	r5, [sp, #4]
   2554e:	3301      	adds	r3, #1
   25550:	9300      	str	r3, [sp, #0]
   25552:	682b      	ldr	r3, [r5, #0]
   25554:	cf02      	ldmia	r7!, {r1}
   25556:	041a      	lsls	r2, r3, #16
   25558:	0c12      	lsrs	r2, r2, #16
   2555a:	1810      	adds	r0, r2, r0
   2555c:	040a      	lsls	r2, r1, #16
   2555e:	0c12      	lsrs	r2, r2, #16
   25560:	1a82      	subs	r2, r0, r2
   25562:	0c09      	lsrs	r1, r1, #16
   25564:	0c1b      	lsrs	r3, r3, #16
   25566:	1a5b      	subs	r3, r3, r1
   25568:	1411      	asrs	r1, r2, #16
   2556a:	185b      	adds	r3, r3, r1
   2556c:	0412      	lsls	r2, r2, #16
   2556e:	1418      	asrs	r0, r3, #16
   25570:	0c12      	lsrs	r2, r2, #16
   25572:	041b      	lsls	r3, r3, #16
   25574:	4313      	orrs	r3, r2
   25576:	c508      	stmia	r5!, {r3}
   25578:	42be      	cmp	r6, r7
   2557a:	d2ea      	bcs.n	25552 <quorem+0xee>
   2557c:	9901      	ldr	r1, [sp, #4]
   2557e:	00a3      	lsls	r3, r4, #2
   25580:	468c      	mov	ip, r1
   25582:	4463      	add	r3, ip
   25584:	681a      	ldr	r2, [r3, #0]
   25586:	2a00      	cmp	r2, #0
   25588:	d10d      	bne.n	255a6 <quorem+0x142>
   2558a:	3b04      	subs	r3, #4
   2558c:	000a      	movs	r2, r1
   2558e:	4299      	cmp	r1, r3
   25590:	d304      	bcc.n	2559c <quorem+0x138>
   25592:	e006      	b.n	255a2 <quorem+0x13e>
   25594:	3b04      	subs	r3, #4
   25596:	3c01      	subs	r4, #1
   25598:	429a      	cmp	r2, r3
   2559a:	d202      	bcs.n	255a2 <quorem+0x13e>
   2559c:	6819      	ldr	r1, [r3, #0]
   2559e:	2900      	cmp	r1, #0
   255a0:	d0f8      	beq.n	25594 <quorem+0x130>
   255a2:	4643      	mov	r3, r8
   255a4:	611c      	str	r4, [r3, #16]
   255a6:	9800      	ldr	r0, [sp, #0]
   255a8:	b005      	add	sp, #20
   255aa:	bc3c      	pop	{r2, r3, r4, r5}
   255ac:	4690      	mov	r8, r2
   255ae:	4699      	mov	r9, r3
   255b0:	46a2      	mov	sl, r4
   255b2:	46ab      	mov	fp, r5
   255b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   255b6:	46c0      	nop			; (mov r8, r8)

000255b8 <_dtoa_r>:
   255b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   255ba:	4657      	mov	r7, sl
   255bc:	464e      	mov	r6, r9
   255be:	4645      	mov	r5, r8
   255c0:	46de      	mov	lr, fp
   255c2:	b5e0      	push	{r5, r6, r7, lr}
   255c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   255c6:	b099      	sub	sp, #100	; 0x64
   255c8:	4682      	mov	sl, r0
   255ca:	001d      	movs	r5, r3
   255cc:	0016      	movs	r6, r2
   255ce:	001f      	movs	r7, r3
   255d0:	2900      	cmp	r1, #0
   255d2:	d009      	beq.n	255e8 <_dtoa_r+0x30>
   255d4:	2301      	movs	r3, #1
   255d6:	6c42      	ldr	r2, [r0, #68]	; 0x44
   255d8:	4093      	lsls	r3, r2
   255da:	604a      	str	r2, [r1, #4]
   255dc:	608b      	str	r3, [r1, #8]
   255de:	f001 fb07 	bl	26bf0 <_Bfree>
   255e2:	2300      	movs	r3, #0
   255e4:	4652      	mov	r2, sl
   255e6:	6413      	str	r3, [r2, #64]	; 0x40
   255e8:	46b8      	mov	r8, r7
   255ea:	2f00      	cmp	r7, #0
   255ec:	db37      	blt.n	2565e <_dtoa_r+0xa6>
   255ee:	2300      	movs	r3, #0
   255f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   255f2:	6013      	str	r3, [r2, #0]
   255f4:	4642      	mov	r2, r8
   255f6:	4bd6      	ldr	r3, [pc, #856]	; (25950 <_dtoa_r+0x398>)
   255f8:	401a      	ands	r2, r3
   255fa:	429a      	cmp	r2, r3
   255fc:	d018      	beq.n	25630 <_dtoa_r+0x78>
   255fe:	2200      	movs	r2, #0
   25600:	2300      	movs	r3, #0
   25602:	0030      	movs	r0, r6
   25604:	0039      	movs	r1, r7
   25606:	f7fb fc5f 	bl	20ec8 <__aeabi_dcmpeq>
   2560a:	2800      	cmp	r0, #0
   2560c:	d02f      	beq.n	2566e <_dtoa_r+0xb6>
   2560e:	2301      	movs	r3, #1
   25610:	9a24      	ldr	r2, [sp, #144]	; 0x90
   25612:	6013      	str	r3, [r2, #0]
   25614:	9b26      	ldr	r3, [sp, #152]	; 0x98
   25616:	2b00      	cmp	r3, #0
   25618:	d100      	bne.n	2561c <_dtoa_r+0x64>
   2561a:	e22a      	b.n	25a72 <_dtoa_r+0x4ba>
   2561c:	48cd      	ldr	r0, [pc, #820]	; (25954 <_dtoa_r+0x39c>)
   2561e:	6018      	str	r0, [r3, #0]
   25620:	3801      	subs	r0, #1
   25622:	b019      	add	sp, #100	; 0x64
   25624:	bc3c      	pop	{r2, r3, r4, r5}
   25626:	4690      	mov	r8, r2
   25628:	4699      	mov	r9, r3
   2562a:	46a2      	mov	sl, r4
   2562c:	46ab      	mov	fp, r5
   2562e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25630:	4bc9      	ldr	r3, [pc, #804]	; (25958 <_dtoa_r+0x3a0>)
   25632:	9a24      	ldr	r2, [sp, #144]	; 0x90
   25634:	6013      	str	r3, [r2, #0]
   25636:	2e00      	cmp	r6, #0
   25638:	d10b      	bne.n	25652 <_dtoa_r+0x9a>
   2563a:	4643      	mov	r3, r8
   2563c:	0318      	lsls	r0, r3, #12
   2563e:	d108      	bne.n	25652 <_dtoa_r+0x9a>
   25640:	9b26      	ldr	r3, [sp, #152]	; 0x98
   25642:	48c6      	ldr	r0, [pc, #792]	; (2595c <_dtoa_r+0x3a4>)
   25644:	2b00      	cmp	r3, #0
   25646:	d0ec      	beq.n	25622 <_dtoa_r+0x6a>
   25648:	0003      	movs	r3, r0
   2564a:	3308      	adds	r3, #8
   2564c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2564e:	6013      	str	r3, [r2, #0]
   25650:	e7e7      	b.n	25622 <_dtoa_r+0x6a>
   25652:	9b26      	ldr	r3, [sp, #152]	; 0x98
   25654:	48c2      	ldr	r0, [pc, #776]	; (25960 <_dtoa_r+0x3a8>)
   25656:	2b00      	cmp	r3, #0
   25658:	d0e3      	beq.n	25622 <_dtoa_r+0x6a>
   2565a:	1cc3      	adds	r3, r0, #3
   2565c:	e7f6      	b.n	2564c <_dtoa_r+0x94>
   2565e:	2301      	movs	r3, #1
   25660:	9a25      	ldr	r2, [sp, #148]	; 0x94
   25662:	0068      	lsls	r0, r5, #1
   25664:	6013      	str	r3, [r2, #0]
   25666:	0843      	lsrs	r3, r0, #1
   25668:	4698      	mov	r8, r3
   2566a:	001f      	movs	r7, r3
   2566c:	e7c2      	b.n	255f4 <_dtoa_r+0x3c>
   2566e:	ab16      	add	r3, sp, #88	; 0x58
   25670:	9301      	str	r3, [sp, #4]
   25672:	ab17      	add	r3, sp, #92	; 0x5c
   25674:	9300      	str	r3, [sp, #0]
   25676:	0032      	movs	r2, r6
   25678:	003b      	movs	r3, r7
   2567a:	4650      	mov	r0, sl
   2567c:	f001 fd7a 	bl	27174 <__d2b>
   25680:	4643      	mov	r3, r8
   25682:	4683      	mov	fp, r0
   25684:	0d1a      	lsrs	r2, r3, #20
   25686:	d100      	bne.n	2568a <_dtoa_r+0xd2>
   25688:	e1d6      	b.n	25a38 <_dtoa_r+0x480>
   2568a:	033b      	lsls	r3, r7, #12
   2568c:	4cb5      	ldr	r4, [pc, #724]	; (25964 <_dtoa_r+0x3ac>)
   2568e:	0b1b      	lsrs	r3, r3, #12
   25690:	431c      	orrs	r4, r3
   25692:	4bb5      	ldr	r3, [pc, #724]	; (25968 <_dtoa_r+0x3b0>)
   25694:	0030      	movs	r0, r6
   25696:	4698      	mov	r8, r3
   25698:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2569a:	0021      	movs	r1, r4
   2569c:	4699      	mov	r9, r3
   2569e:	2300      	movs	r3, #0
   256a0:	4490      	add	r8, r2
   256a2:	930f      	str	r3, [sp, #60]	; 0x3c
   256a4:	2200      	movs	r2, #0
   256a6:	4bb1      	ldr	r3, [pc, #708]	; (2596c <_dtoa_r+0x3b4>)
   256a8:	f7fd fdcc 	bl	23244 <__aeabi_dsub>
   256ac:	4ab0      	ldr	r2, [pc, #704]	; (25970 <_dtoa_r+0x3b8>)
   256ae:	4bb1      	ldr	r3, [pc, #708]	; (25974 <_dtoa_r+0x3bc>)
   256b0:	f7fd fb48 	bl	22d44 <__aeabi_dmul>
   256b4:	4ab0      	ldr	r2, [pc, #704]	; (25978 <_dtoa_r+0x3c0>)
   256b6:	4bb1      	ldr	r3, [pc, #708]	; (2597c <_dtoa_r+0x3c4>)
   256b8:	f7fc fc00 	bl	21ebc <__aeabi_dadd>
   256bc:	0004      	movs	r4, r0
   256be:	4640      	mov	r0, r8
   256c0:	000d      	movs	r5, r1
   256c2:	f7fe f929 	bl	23918 <__aeabi_i2d>
   256c6:	4aae      	ldr	r2, [pc, #696]	; (25980 <_dtoa_r+0x3c8>)
   256c8:	4bae      	ldr	r3, [pc, #696]	; (25984 <_dtoa_r+0x3cc>)
   256ca:	f7fd fb3b 	bl	22d44 <__aeabi_dmul>
   256ce:	0002      	movs	r2, r0
   256d0:	000b      	movs	r3, r1
   256d2:	0020      	movs	r0, r4
   256d4:	0029      	movs	r1, r5
   256d6:	f7fc fbf1 	bl	21ebc <__aeabi_dadd>
   256da:	0004      	movs	r4, r0
   256dc:	000d      	movs	r5, r1
   256de:	f7fe f8e7 	bl	238b0 <__aeabi_d2iz>
   256e2:	2200      	movs	r2, #0
   256e4:	9003      	str	r0, [sp, #12]
   256e6:	2300      	movs	r3, #0
   256e8:	0020      	movs	r0, r4
   256ea:	0029      	movs	r1, r5
   256ec:	f7fb fbf2 	bl	20ed4 <__aeabi_dcmplt>
   256f0:	2800      	cmp	r0, #0
   256f2:	d000      	beq.n	256f6 <_dtoa_r+0x13e>
   256f4:	e2b1      	b.n	25c5a <_dtoa_r+0x6a2>
   256f6:	2301      	movs	r3, #1
   256f8:	9c03      	ldr	r4, [sp, #12]
   256fa:	930c      	str	r3, [sp, #48]	; 0x30
   256fc:	2c16      	cmp	r4, #22
   256fe:	d810      	bhi.n	25722 <_dtoa_r+0x16a>
   25700:	49a1      	ldr	r1, [pc, #644]	; (25988 <_dtoa_r+0x3d0>)
   25702:	00e3      	lsls	r3, r4, #3
   25704:	18c9      	adds	r1, r1, r3
   25706:	0032      	movs	r2, r6
   25708:	6808      	ldr	r0, [r1, #0]
   2570a:	6849      	ldr	r1, [r1, #4]
   2570c:	003b      	movs	r3, r7
   2570e:	f7fb fbf5 	bl	20efc <__aeabi_dcmpgt>
   25712:	2800      	cmp	r0, #0
   25714:	d100      	bne.n	25718 <_dtoa_r+0x160>
   25716:	e31d      	b.n	25d54 <_dtoa_r+0x79c>
   25718:	0023      	movs	r3, r4
   2571a:	3b01      	subs	r3, #1
   2571c:	9303      	str	r3, [sp, #12]
   2571e:	2300      	movs	r3, #0
   25720:	930c      	str	r3, [sp, #48]	; 0x30
   25722:	464b      	mov	r3, r9
   25724:	4642      	mov	r2, r8
   25726:	1a9a      	subs	r2, r3, r2
   25728:	2300      	movs	r3, #0
   2572a:	9306      	str	r3, [sp, #24]
   2572c:	0013      	movs	r3, r2
   2572e:	3b01      	subs	r3, #1
   25730:	9304      	str	r3, [sp, #16]
   25732:	d500      	bpl.n	25736 <_dtoa_r+0x17e>
   25734:	e2a1      	b.n	25c7a <_dtoa_r+0x6c2>
   25736:	9b03      	ldr	r3, [sp, #12]
   25738:	2b00      	cmp	r3, #0
   2573a:	da00      	bge.n	2573e <_dtoa_r+0x186>
   2573c:	e284      	b.n	25c48 <_dtoa_r+0x690>
   2573e:	469c      	mov	ip, r3
   25740:	930d      	str	r3, [sp, #52]	; 0x34
   25742:	2300      	movs	r3, #0
   25744:	9a04      	ldr	r2, [sp, #16]
   25746:	4699      	mov	r9, r3
   25748:	0011      	movs	r1, r2
   2574a:	4461      	add	r1, ip
   2574c:	9104      	str	r1, [sp, #16]
   2574e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25750:	2b09      	cmp	r3, #9
   25752:	d900      	bls.n	25756 <_dtoa_r+0x19e>
   25754:	e18f      	b.n	25a76 <_dtoa_r+0x4be>
   25756:	2401      	movs	r4, #1
   25758:	2b05      	cmp	r3, #5
   2575a:	dd02      	ble.n	25762 <_dtoa_r+0x1aa>
   2575c:	2400      	movs	r4, #0
   2575e:	3b04      	subs	r3, #4
   25760:	9322      	str	r3, [sp, #136]	; 0x88
   25762:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25764:	2b03      	cmp	r3, #3
   25766:	d101      	bne.n	2576c <_dtoa_r+0x1b4>
   25768:	f000 fcce 	bl	26108 <_dtoa_r+0xb50>
   2576c:	dc01      	bgt.n	25772 <_dtoa_r+0x1ba>
   2576e:	f000 fc92 	bl	26096 <_dtoa_r+0xade>
   25772:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25774:	2b04      	cmp	r3, #4
   25776:	d101      	bne.n	2577c <_dtoa_r+0x1c4>
   25778:	f000 fc40 	bl	25ffc <_dtoa_r+0xa44>
   2577c:	2301      	movs	r3, #1
   2577e:	930b      	str	r3, [sp, #44]	; 0x2c
   25780:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25782:	2b05      	cmp	r3, #5
   25784:	d001      	beq.n	2578a <_dtoa_r+0x1d2>
   25786:	f000 fc8b 	bl	260a0 <_dtoa_r+0xae8>
   2578a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   2578c:	9b03      	ldr	r3, [sp, #12]
   2578e:	4694      	mov	ip, r2
   25790:	4463      	add	r3, ip
   25792:	930e      	str	r3, [sp, #56]	; 0x38
   25794:	3301      	adds	r3, #1
   25796:	9307      	str	r3, [sp, #28]
   25798:	1e1d      	subs	r5, r3, #0
   2579a:	dc01      	bgt.n	257a0 <_dtoa_r+0x1e8>
   2579c:	f000 fd49 	bl	26232 <_dtoa_r+0xc7a>
   257a0:	9b07      	ldr	r3, [sp, #28]
   257a2:	4698      	mov	r8, r3
   257a4:	2300      	movs	r3, #0
   257a6:	4652      	mov	r2, sl
   257a8:	2100      	movs	r1, #0
   257aa:	6453      	str	r3, [r2, #68]	; 0x44
   257ac:	2d17      	cmp	r5, #23
   257ae:	d90a      	bls.n	257c6 <_dtoa_r+0x20e>
   257b0:	2201      	movs	r2, #1
   257b2:	3304      	adds	r3, #4
   257b4:	005b      	lsls	r3, r3, #1
   257b6:	0018      	movs	r0, r3
   257b8:	3014      	adds	r0, #20
   257ba:	0011      	movs	r1, r2
   257bc:	3201      	adds	r2, #1
   257be:	4285      	cmp	r5, r0
   257c0:	d2f8      	bcs.n	257b4 <_dtoa_r+0x1fc>
   257c2:	4653      	mov	r3, sl
   257c4:	6459      	str	r1, [r3, #68]	; 0x44
   257c6:	4650      	mov	r0, sl
   257c8:	f001 f9ea 	bl	26ba0 <_Balloc>
   257cc:	4653      	mov	r3, sl
   257ce:	6418      	str	r0, [r3, #64]	; 0x40
   257d0:	4643      	mov	r3, r8
   257d2:	900a      	str	r0, [sp, #40]	; 0x28
   257d4:	2b0e      	cmp	r3, #14
   257d6:	d900      	bls.n	257da <_dtoa_r+0x222>
   257d8:	e161      	b.n	25a9e <_dtoa_r+0x4e6>
   257da:	2c00      	cmp	r4, #0
   257dc:	d100      	bne.n	257e0 <_dtoa_r+0x228>
   257de:	e15e      	b.n	25a9e <_dtoa_r+0x4e6>
   257e0:	9610      	str	r6, [sp, #64]	; 0x40
   257e2:	9711      	str	r7, [sp, #68]	; 0x44
   257e4:	9e03      	ldr	r6, [sp, #12]
   257e6:	2e00      	cmp	r6, #0
   257e8:	dc01      	bgt.n	257ee <_dtoa_r+0x236>
   257ea:	f000 fd25 	bl	26238 <_dtoa_r+0xc80>
   257ee:	0032      	movs	r2, r6
   257f0:	210f      	movs	r1, #15
   257f2:	4b65      	ldr	r3, [pc, #404]	; (25988 <_dtoa_r+0x3d0>)
   257f4:	400a      	ands	r2, r1
   257f6:	00d2      	lsls	r2, r2, #3
   257f8:	189b      	adds	r3, r3, r2
   257fa:	1136      	asrs	r6, r6, #4
   257fc:	681c      	ldr	r4, [r3, #0]
   257fe:	685d      	ldr	r5, [r3, #4]
   25800:	06f3      	lsls	r3, r6, #27
   25802:	d401      	bmi.n	25808 <_dtoa_r+0x250>
   25804:	f000 fcca 	bl	2619c <_dtoa_r+0xbe4>
   25808:	4b60      	ldr	r3, [pc, #384]	; (2598c <_dtoa_r+0x3d4>)
   2580a:	400e      	ands	r6, r1
   2580c:	6a1a      	ldr	r2, [r3, #32]
   2580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25810:	9810      	ldr	r0, [sp, #64]	; 0x40
   25812:	9911      	ldr	r1, [sp, #68]	; 0x44
   25814:	f7fc fe62 	bl	224dc <__aeabi_ddiv>
   25818:	2303      	movs	r3, #3
   2581a:	4698      	mov	r8, r3
   2581c:	9008      	str	r0, [sp, #32]
   2581e:	9109      	str	r1, [sp, #36]	; 0x24
   25820:	2e00      	cmp	r6, #0
   25822:	d011      	beq.n	25848 <_dtoa_r+0x290>
   25824:	4f59      	ldr	r7, [pc, #356]	; (2598c <_dtoa_r+0x3d4>)
   25826:	2301      	movs	r3, #1
   25828:	4233      	tst	r3, r6
   2582a:	d009      	beq.n	25840 <_dtoa_r+0x288>
   2582c:	469c      	mov	ip, r3
   2582e:	683a      	ldr	r2, [r7, #0]
   25830:	687b      	ldr	r3, [r7, #4]
   25832:	0020      	movs	r0, r4
   25834:	0029      	movs	r1, r5
   25836:	44e0      	add	r8, ip
   25838:	f7fd fa84 	bl	22d44 <__aeabi_dmul>
   2583c:	0004      	movs	r4, r0
   2583e:	000d      	movs	r5, r1
   25840:	1076      	asrs	r6, r6, #1
   25842:	3708      	adds	r7, #8
   25844:	2e00      	cmp	r6, #0
   25846:	d1ee      	bne.n	25826 <_dtoa_r+0x26e>
   25848:	0022      	movs	r2, r4
   2584a:	9808      	ldr	r0, [sp, #32]
   2584c:	9909      	ldr	r1, [sp, #36]	; 0x24
   2584e:	002b      	movs	r3, r5
   25850:	f7fc fe44 	bl	224dc <__aeabi_ddiv>
   25854:	0006      	movs	r6, r0
   25856:	000f      	movs	r7, r1
   25858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2585a:	2b00      	cmp	r3, #0
   2585c:	d009      	beq.n	25872 <_dtoa_r+0x2ba>
   2585e:	2200      	movs	r2, #0
   25860:	4b40      	ldr	r3, [pc, #256]	; (25964 <_dtoa_r+0x3ac>)
   25862:	0030      	movs	r0, r6
   25864:	0039      	movs	r1, r7
   25866:	f7fb fb35 	bl	20ed4 <__aeabi_dcmplt>
   2586a:	2800      	cmp	r0, #0
   2586c:	d001      	beq.n	25872 <_dtoa_r+0x2ba>
   2586e:	f000 fdc2 	bl	263f6 <_dtoa_r+0xe3e>
   25872:	4640      	mov	r0, r8
   25874:	f7fe f850 	bl	23918 <__aeabi_i2d>
   25878:	0032      	movs	r2, r6
   2587a:	003b      	movs	r3, r7
   2587c:	f7fd fa62 	bl	22d44 <__aeabi_dmul>
   25880:	2200      	movs	r2, #0
   25882:	4b43      	ldr	r3, [pc, #268]	; (25990 <_dtoa_r+0x3d8>)
   25884:	f7fc fb1a 	bl	21ebc <__aeabi_dadd>
   25888:	4a42      	ldr	r2, [pc, #264]	; (25994 <_dtoa_r+0x3dc>)
   2588a:	000b      	movs	r3, r1
   2588c:	4694      	mov	ip, r2
   2588e:	4463      	add	r3, ip
   25890:	9008      	str	r0, [sp, #32]
   25892:	9109      	str	r1, [sp, #36]	; 0x24
   25894:	9309      	str	r3, [sp, #36]	; 0x24
   25896:	9b07      	ldr	r3, [sp, #28]
   25898:	2b00      	cmp	r3, #0
   2589a:	d101      	bne.n	258a0 <_dtoa_r+0x2e8>
   2589c:	f000 fc50 	bl	26140 <_dtoa_r+0xb88>
   258a0:	9b03      	ldr	r3, [sp, #12]
   258a2:	9313      	str	r3, [sp, #76]	; 0x4c
   258a4:	9b07      	ldr	r3, [sp, #28]
   258a6:	9312      	str	r3, [sp, #72]	; 0x48
   258a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   258aa:	2b00      	cmp	r3, #0
   258ac:	d101      	bne.n	258b2 <_dtoa_r+0x2fa>
   258ae:	f000 fd1d 	bl	262ec <_dtoa_r+0xd34>
   258b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   258b4:	2000      	movs	r0, #0
   258b6:	1e5a      	subs	r2, r3, #1
   258b8:	4b33      	ldr	r3, [pc, #204]	; (25988 <_dtoa_r+0x3d0>)
   258ba:	00d2      	lsls	r2, r2, #3
   258bc:	189b      	adds	r3, r3, r2
   258be:	681a      	ldr	r2, [r3, #0]
   258c0:	685b      	ldr	r3, [r3, #4]
   258c2:	4935      	ldr	r1, [pc, #212]	; (25998 <_dtoa_r+0x3e0>)
   258c4:	f7fc fe0a 	bl	224dc <__aeabi_ddiv>
   258c8:	9a08      	ldr	r2, [sp, #32]
   258ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   258cc:	f7fd fcba 	bl	23244 <__aeabi_dsub>
   258d0:	9008      	str	r0, [sp, #32]
   258d2:	9109      	str	r1, [sp, #36]	; 0x24
   258d4:	0039      	movs	r1, r7
   258d6:	0030      	movs	r0, r6
   258d8:	f7fd ffea 	bl	238b0 <__aeabi_d2iz>
   258dc:	0004      	movs	r4, r0
   258de:	f7fe f81b 	bl	23918 <__aeabi_i2d>
   258e2:	0002      	movs	r2, r0
   258e4:	000b      	movs	r3, r1
   258e6:	0030      	movs	r0, r6
   258e8:	0039      	movs	r1, r7
   258ea:	f7fd fcab 	bl	23244 <__aeabi_dsub>
   258ee:	0005      	movs	r5, r0
   258f0:	000e      	movs	r6, r1
   258f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   258f4:	3430      	adds	r4, #48	; 0x30
   258f6:	1c51      	adds	r1, r2, #1
   258f8:	b2e7      	uxtb	r7, r4
   258fa:	9114      	str	r1, [sp, #80]	; 0x50
   258fc:	7017      	strb	r7, [r2, #0]
   258fe:	0033      	movs	r3, r6
   25900:	9808      	ldr	r0, [sp, #32]
   25902:	9909      	ldr	r1, [sp, #36]	; 0x24
   25904:	002a      	movs	r2, r5
   25906:	f7fb faf9 	bl	20efc <__aeabi_dcmpgt>
   2590a:	2800      	cmp	r0, #0
   2590c:	d001      	beq.n	25912 <_dtoa_r+0x35a>
   2590e:	f000 fdfe 	bl	2650e <_dtoa_r+0xf56>
   25912:	002a      	movs	r2, r5
   25914:	0033      	movs	r3, r6
   25916:	2000      	movs	r0, #0
   25918:	4912      	ldr	r1, [pc, #72]	; (25964 <_dtoa_r+0x3ac>)
   2591a:	f7fd fc93 	bl	23244 <__aeabi_dsub>
   2591e:	0002      	movs	r2, r0
   25920:	000b      	movs	r3, r1
   25922:	9808      	ldr	r0, [sp, #32]
   25924:	9909      	ldr	r1, [sp, #36]	; 0x24
   25926:	f7fb fae9 	bl	20efc <__aeabi_dcmpgt>
   2592a:	2800      	cmp	r0, #0
   2592c:	d001      	beq.n	25932 <_dtoa_r+0x37a>
   2592e:	f000 fde7 	bl	26500 <_dtoa_r+0xf48>
   25932:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25934:	2b01      	cmp	r3, #1
   25936:	d101      	bne.n	2593c <_dtoa_r+0x384>
   25938:	f000 fc78 	bl	2622c <_dtoa_r+0xc74>
   2593c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2593e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25940:	4694      	mov	ip, r2
   25942:	4463      	add	r3, ip
   25944:	4698      	mov	r8, r3
   25946:	464b      	mov	r3, r9
   25948:	9312      	str	r3, [sp, #72]	; 0x48
   2594a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2594c:	4699      	mov	r9, r3
   2594e:	e038      	b.n	259c2 <_dtoa_r+0x40a>
   25950:	7ff00000 	.word	0x7ff00000
   25954:	00029e29 	.word	0x00029e29
   25958:	0000270f 	.word	0x0000270f
   2595c:	00029e4c 	.word	0x00029e4c
   25960:	00029e58 	.word	0x00029e58
   25964:	3ff00000 	.word	0x3ff00000
   25968:	fffffc01 	.word	0xfffffc01
   2596c:	3ff80000 	.word	0x3ff80000
   25970:	636f4361 	.word	0x636f4361
   25974:	3fd287a7 	.word	0x3fd287a7
   25978:	8b60c8b3 	.word	0x8b60c8b3
   2597c:	3fc68a28 	.word	0x3fc68a28
   25980:	509f79fb 	.word	0x509f79fb
   25984:	3fd34413 	.word	0x3fd34413
   25988:	00029e88 	.word	0x00029e88
   2598c:	00029e60 	.word	0x00029e60
   25990:	401c0000 	.word	0x401c0000
   25994:	fcc00000 	.word	0xfcc00000
   25998:	3fe00000 	.word	0x3fe00000
   2599c:	002a      	movs	r2, r5
   2599e:	0033      	movs	r3, r6
   259a0:	2000      	movs	r0, #0
   259a2:	49b9      	ldr	r1, [pc, #740]	; (25c88 <_dtoa_r+0x6d0>)
   259a4:	f7fd fc4e 	bl	23244 <__aeabi_dsub>
   259a8:	9a08      	ldr	r2, [sp, #32]
   259aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   259ac:	f7fb fa92 	bl	20ed4 <__aeabi_dcmplt>
   259b0:	2800      	cmp	r0, #0
   259b2:	d001      	beq.n	259b8 <_dtoa_r+0x400>
   259b4:	f000 fd74 	bl	264a0 <_dtoa_r+0xee8>
   259b8:	46a1      	mov	r9, r4
   259ba:	4544      	cmp	r4, r8
   259bc:	d101      	bne.n	259c2 <_dtoa_r+0x40a>
   259be:	f000 fc33 	bl	26228 <_dtoa_r+0xc70>
   259c2:	9808      	ldr	r0, [sp, #32]
   259c4:	9909      	ldr	r1, [sp, #36]	; 0x24
   259c6:	2200      	movs	r2, #0
   259c8:	4bb0      	ldr	r3, [pc, #704]	; (25c8c <_dtoa_r+0x6d4>)
   259ca:	f7fd f9bb 	bl	22d44 <__aeabi_dmul>
   259ce:	2200      	movs	r2, #0
   259d0:	4bae      	ldr	r3, [pc, #696]	; (25c8c <_dtoa_r+0x6d4>)
   259d2:	9008      	str	r0, [sp, #32]
   259d4:	9109      	str	r1, [sp, #36]	; 0x24
   259d6:	0028      	movs	r0, r5
   259d8:	0031      	movs	r1, r6
   259da:	f7fd f9b3 	bl	22d44 <__aeabi_dmul>
   259de:	000d      	movs	r5, r1
   259e0:	0004      	movs	r4, r0
   259e2:	f7fd ff65 	bl	238b0 <__aeabi_d2iz>
   259e6:	0007      	movs	r7, r0
   259e8:	f7fd ff96 	bl	23918 <__aeabi_i2d>
   259ec:	0002      	movs	r2, r0
   259ee:	000b      	movs	r3, r1
   259f0:	0020      	movs	r0, r4
   259f2:	0029      	movs	r1, r5
   259f4:	f7fd fc26 	bl	23244 <__aeabi_dsub>
   259f8:	464b      	mov	r3, r9
   259fa:	3730      	adds	r7, #48	; 0x30
   259fc:	b2ff      	uxtb	r7, r7
   259fe:	1c5c      	adds	r4, r3, #1
   25a00:	701f      	strb	r7, [r3, #0]
   25a02:	9a08      	ldr	r2, [sp, #32]
   25a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25a06:	0005      	movs	r5, r0
   25a08:	000e      	movs	r6, r1
   25a0a:	f7fb fa63 	bl	20ed4 <__aeabi_dcmplt>
   25a0e:	2800      	cmp	r0, #0
   25a10:	d0c4      	beq.n	2599c <_dtoa_r+0x3e4>
   25a12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   25a14:	9303      	str	r3, [sp, #12]
   25a16:	4659      	mov	r1, fp
   25a18:	4650      	mov	r0, sl
   25a1a:	f001 f8e9 	bl	26bf0 <_Bfree>
   25a1e:	2300      	movs	r3, #0
   25a20:	7023      	strb	r3, [r4, #0]
   25a22:	9b03      	ldr	r3, [sp, #12]
   25a24:	9a24      	ldr	r2, [sp, #144]	; 0x90
   25a26:	3301      	adds	r3, #1
   25a28:	6013      	str	r3, [r2, #0]
   25a2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   25a2c:	2b00      	cmp	r3, #0
   25a2e:	d100      	bne.n	25a32 <_dtoa_r+0x47a>
   25a30:	e3a8      	b.n	26184 <_dtoa_r+0xbcc>
   25a32:	601c      	str	r4, [r3, #0]
   25a34:	980a      	ldr	r0, [sp, #40]	; 0x28
   25a36:	e5f4      	b.n	25622 <_dtoa_r+0x6a>
   25a38:	9b16      	ldr	r3, [sp, #88]	; 0x58
   25a3a:	4699      	mov	r9, r3
   25a3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   25a3e:	444b      	add	r3, r9
   25a40:	001c      	movs	r4, r3
   25a42:	4b93      	ldr	r3, [pc, #588]	; (25c90 <_dtoa_r+0x6d8>)
   25a44:	18e3      	adds	r3, r4, r3
   25a46:	2b20      	cmp	r3, #32
   25a48:	dc00      	bgt.n	25a4c <_dtoa_r+0x494>
   25a4a:	e17e      	b.n	25d4a <_dtoa_r+0x792>
   25a4c:	0031      	movs	r1, r6
   25a4e:	4a91      	ldr	r2, [pc, #580]	; (25c94 <_dtoa_r+0x6dc>)
   25a50:	4640      	mov	r0, r8
   25a52:	18a2      	adds	r2, r4, r2
   25a54:	40d1      	lsrs	r1, r2
   25a56:	000a      	movs	r2, r1
   25a58:	2140      	movs	r1, #64	; 0x40
   25a5a:	1acb      	subs	r3, r1, r3
   25a5c:	4098      	lsls	r0, r3
   25a5e:	4310      	orrs	r0, r2
   25a60:	f7fd ff9c 	bl	2399c <__aeabi_ui2d>
   25a64:	1e63      	subs	r3, r4, #1
   25a66:	4698      	mov	r8, r3
   25a68:	2301      	movs	r3, #1
   25a6a:	4d8b      	ldr	r5, [pc, #556]	; (25c98 <_dtoa_r+0x6e0>)
   25a6c:	930f      	str	r3, [sp, #60]	; 0x3c
   25a6e:	1949      	adds	r1, r1, r5
   25a70:	e618      	b.n	256a4 <_dtoa_r+0xec>
   25a72:	488a      	ldr	r0, [pc, #552]	; (25c9c <_dtoa_r+0x6e4>)
   25a74:	e5d5      	b.n	25622 <_dtoa_r+0x6a>
   25a76:	2300      	movs	r3, #0
   25a78:	4652      	mov	r2, sl
   25a7a:	2100      	movs	r1, #0
   25a7c:	6453      	str	r3, [r2, #68]	; 0x44
   25a7e:	4650      	mov	r0, sl
   25a80:	f001 f88e 	bl	26ba0 <_Balloc>
   25a84:	4653      	mov	r3, sl
   25a86:	6418      	str	r0, [r3, #64]	; 0x40
   25a88:	2301      	movs	r3, #1
   25a8a:	425b      	negs	r3, r3
   25a8c:	9307      	str	r3, [sp, #28]
   25a8e:	930e      	str	r3, [sp, #56]	; 0x38
   25a90:	3302      	adds	r3, #2
   25a92:	2200      	movs	r2, #0
   25a94:	930b      	str	r3, [sp, #44]	; 0x2c
   25a96:	2300      	movs	r3, #0
   25a98:	900a      	str	r0, [sp, #40]	; 0x28
   25a9a:	9223      	str	r2, [sp, #140]	; 0x8c
   25a9c:	9322      	str	r3, [sp, #136]	; 0x88
   25a9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   25aa0:	2b00      	cmp	r3, #0
   25aa2:	da00      	bge.n	25aa6 <_dtoa_r+0x4ee>
   25aa4:	e0ab      	b.n	25bfe <_dtoa_r+0x646>
   25aa6:	9a03      	ldr	r2, [sp, #12]
   25aa8:	2a0e      	cmp	r2, #14
   25aaa:	dd00      	ble.n	25aae <_dtoa_r+0x4f6>
   25aac:	e0a7      	b.n	25bfe <_dtoa_r+0x646>
   25aae:	4b7c      	ldr	r3, [pc, #496]	; (25ca0 <_dtoa_r+0x6e8>)
   25ab0:	00d2      	lsls	r2, r2, #3
   25ab2:	189b      	adds	r3, r3, r2
   25ab4:	685c      	ldr	r4, [r3, #4]
   25ab6:	681b      	ldr	r3, [r3, #0]
   25ab8:	9304      	str	r3, [sp, #16]
   25aba:	9405      	str	r4, [sp, #20]
   25abc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25abe:	2b00      	cmp	r3, #0
   25ac0:	da00      	bge.n	25ac4 <_dtoa_r+0x50c>
   25ac2:	e2a7      	b.n	26014 <_dtoa_r+0xa5c>
   25ac4:	9c04      	ldr	r4, [sp, #16]
   25ac6:	9d05      	ldr	r5, [sp, #20]
   25ac8:	0030      	movs	r0, r6
   25aca:	0022      	movs	r2, r4
   25acc:	002b      	movs	r3, r5
   25ace:	0039      	movs	r1, r7
   25ad0:	f7fc fd04 	bl	224dc <__aeabi_ddiv>
   25ad4:	f7fd feec 	bl	238b0 <__aeabi_d2iz>
   25ad8:	4680      	mov	r8, r0
   25ada:	f7fd ff1d 	bl	23918 <__aeabi_i2d>
   25ade:	0022      	movs	r2, r4
   25ae0:	002b      	movs	r3, r5
   25ae2:	f7fd f92f 	bl	22d44 <__aeabi_dmul>
   25ae6:	0002      	movs	r2, r0
   25ae8:	000b      	movs	r3, r1
   25aea:	0030      	movs	r0, r6
   25aec:	0039      	movs	r1, r7
   25aee:	f7fd fba9 	bl	23244 <__aeabi_dsub>
   25af2:	4643      	mov	r3, r8
   25af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25af6:	3330      	adds	r3, #48	; 0x30
   25af8:	7013      	strb	r3, [r2, #0]
   25afa:	9b07      	ldr	r3, [sp, #28]
   25afc:	0006      	movs	r6, r0
   25afe:	000f      	movs	r7, r1
   25b00:	1c54      	adds	r4, r2, #1
   25b02:	2b01      	cmp	r3, #1
   25b04:	d04e      	beq.n	25ba4 <_dtoa_r+0x5ec>
   25b06:	2200      	movs	r2, #0
   25b08:	4b60      	ldr	r3, [pc, #384]	; (25c8c <_dtoa_r+0x6d4>)
   25b0a:	f7fd f91b 	bl	22d44 <__aeabi_dmul>
   25b0e:	2200      	movs	r2, #0
   25b10:	2300      	movs	r3, #0
   25b12:	0006      	movs	r6, r0
   25b14:	000f      	movs	r7, r1
   25b16:	f7fb f9d7 	bl	20ec8 <__aeabi_dcmpeq>
   25b1a:	2800      	cmp	r0, #0
   25b1c:	d000      	beq.n	25b20 <_dtoa_r+0x568>
   25b1e:	e77a      	b.n	25a16 <_dtoa_r+0x45e>
   25b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25b22:	9a07      	ldr	r2, [sp, #28]
   25b24:	1c9d      	adds	r5, r3, #2
   25b26:	469c      	mov	ip, r3
   25b28:	465b      	mov	r3, fp
   25b2a:	9306      	str	r3, [sp, #24]
   25b2c:	4653      	mov	r3, sl
   25b2e:	4462      	add	r2, ip
   25b30:	46aa      	mov	sl, r5
   25b32:	9c04      	ldr	r4, [sp, #16]
   25b34:	9d05      	ldr	r5, [sp, #20]
   25b36:	4691      	mov	r9, r2
   25b38:	9307      	str	r3, [sp, #28]
   25b3a:	e00f      	b.n	25b5c <_dtoa_r+0x5a4>
   25b3c:	2200      	movs	r2, #0
   25b3e:	4b53      	ldr	r3, [pc, #332]	; (25c8c <_dtoa_r+0x6d4>)
   25b40:	f7fd f900 	bl	22d44 <__aeabi_dmul>
   25b44:	2301      	movs	r3, #1
   25b46:	469c      	mov	ip, r3
   25b48:	2200      	movs	r2, #0
   25b4a:	2300      	movs	r3, #0
   25b4c:	0006      	movs	r6, r0
   25b4e:	000f      	movs	r7, r1
   25b50:	44e2      	add	sl, ip
   25b52:	f7fb f9b9 	bl	20ec8 <__aeabi_dcmpeq>
   25b56:	2800      	cmp	r0, #0
   25b58:	d000      	beq.n	25b5c <_dtoa_r+0x5a4>
   25b5a:	e2d9      	b.n	26110 <_dtoa_r+0xb58>
   25b5c:	0022      	movs	r2, r4
   25b5e:	002b      	movs	r3, r5
   25b60:	0030      	movs	r0, r6
   25b62:	0039      	movs	r1, r7
   25b64:	f7fc fcba 	bl	224dc <__aeabi_ddiv>
   25b68:	f7fd fea2 	bl	238b0 <__aeabi_d2iz>
   25b6c:	4680      	mov	r8, r0
   25b6e:	f7fd fed3 	bl	23918 <__aeabi_i2d>
   25b72:	0022      	movs	r2, r4
   25b74:	002b      	movs	r3, r5
   25b76:	f7fd f8e5 	bl	22d44 <__aeabi_dmul>
   25b7a:	0002      	movs	r2, r0
   25b7c:	000b      	movs	r3, r1
   25b7e:	0030      	movs	r0, r6
   25b80:	0039      	movs	r1, r7
   25b82:	f7fd fb5f 	bl	23244 <__aeabi_dsub>
   25b86:	4653      	mov	r3, sl
   25b88:	4642      	mov	r2, r8
   25b8a:	3b01      	subs	r3, #1
   25b8c:	3230      	adds	r2, #48	; 0x30
   25b8e:	0006      	movs	r6, r0
   25b90:	000f      	movs	r7, r1
   25b92:	46d3      	mov	fp, sl
   25b94:	701a      	strb	r2, [r3, #0]
   25b96:	45d1      	cmp	r9, sl
   25b98:	d1d0      	bne.n	25b3c <_dtoa_r+0x584>
   25b9a:	9b06      	ldr	r3, [sp, #24]
   25b9c:	4654      	mov	r4, sl
   25b9e:	469b      	mov	fp, r3
   25ba0:	9b07      	ldr	r3, [sp, #28]
   25ba2:	469a      	mov	sl, r3
   25ba4:	0032      	movs	r2, r6
   25ba6:	003b      	movs	r3, r7
   25ba8:	0030      	movs	r0, r6
   25baa:	0039      	movs	r1, r7
   25bac:	f7fc f986 	bl	21ebc <__aeabi_dadd>
   25bb0:	0006      	movs	r6, r0
   25bb2:	000f      	movs	r7, r1
   25bb4:	0002      	movs	r2, r0
   25bb6:	000b      	movs	r3, r1
   25bb8:	9804      	ldr	r0, [sp, #16]
   25bba:	9905      	ldr	r1, [sp, #20]
   25bbc:	f7fb f98a 	bl	20ed4 <__aeabi_dcmplt>
   25bc0:	2800      	cmp	r0, #0
   25bc2:	d10c      	bne.n	25bde <_dtoa_r+0x626>
   25bc4:	9804      	ldr	r0, [sp, #16]
   25bc6:	9905      	ldr	r1, [sp, #20]
   25bc8:	0032      	movs	r2, r6
   25bca:	003b      	movs	r3, r7
   25bcc:	f7fb f97c 	bl	20ec8 <__aeabi_dcmpeq>
   25bd0:	2800      	cmp	r0, #0
   25bd2:	d100      	bne.n	25bd6 <_dtoa_r+0x61e>
   25bd4:	e71f      	b.n	25a16 <_dtoa_r+0x45e>
   25bd6:	4643      	mov	r3, r8
   25bd8:	07db      	lsls	r3, r3, #31
   25bda:	d400      	bmi.n	25bde <_dtoa_r+0x626>
   25bdc:	e71b      	b.n	25a16 <_dtoa_r+0x45e>
   25bde:	1e65      	subs	r5, r4, #1
   25be0:	782f      	ldrb	r7, [r5, #0]
   25be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25be4:	e006      	b.n	25bf4 <_dtoa_r+0x63c>
   25be6:	429d      	cmp	r5, r3
   25be8:	d100      	bne.n	25bec <_dtoa_r+0x634>
   25bea:	e351      	b.n	26290 <_dtoa_r+0xcd8>
   25bec:	3c02      	subs	r4, #2
   25bee:	7827      	ldrb	r7, [r4, #0]
   25bf0:	002c      	movs	r4, r5
   25bf2:	3d01      	subs	r5, #1
   25bf4:	2f39      	cmp	r7, #57	; 0x39
   25bf6:	d0f6      	beq.n	25be6 <_dtoa_r+0x62e>
   25bf8:	3701      	adds	r7, #1
   25bfa:	702f      	strb	r7, [r5, #0]
   25bfc:	e70b      	b.n	25a16 <_dtoa_r+0x45e>
   25bfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25c00:	2a00      	cmp	r2, #0
   25c02:	d04f      	beq.n	25ca4 <_dtoa_r+0x6ec>
   25c04:	9a22      	ldr	r2, [sp, #136]	; 0x88
   25c06:	2a01      	cmp	r2, #1
   25c08:	dc00      	bgt.n	25c0c <_dtoa_r+0x654>
   25c0a:	e22c      	b.n	26066 <_dtoa_r+0xaae>
   25c0c:	9b07      	ldr	r3, [sp, #28]
   25c0e:	1e5c      	subs	r4, r3, #1
   25c10:	464b      	mov	r3, r9
   25c12:	45a1      	cmp	r9, r4
   25c14:	da00      	bge.n	25c18 <_dtoa_r+0x660>
   25c16:	e2b8      	b.n	2618a <_dtoa_r+0xbd2>
   25c18:	1b1c      	subs	r4, r3, r4
   25c1a:	9b07      	ldr	r3, [sp, #28]
   25c1c:	2b00      	cmp	r3, #0
   25c1e:	da00      	bge.n	25c22 <_dtoa_r+0x66a>
   25c20:	e3d4      	b.n	263cc <_dtoa_r+0xe14>
   25c22:	9b06      	ldr	r3, [sp, #24]
   25c24:	9308      	str	r3, [sp, #32]
   25c26:	9b07      	ldr	r3, [sp, #28]
   25c28:	9a06      	ldr	r2, [sp, #24]
   25c2a:	2101      	movs	r1, #1
   25c2c:	4694      	mov	ip, r2
   25c2e:	449c      	add	ip, r3
   25c30:	4662      	mov	r2, ip
   25c32:	9206      	str	r2, [sp, #24]
   25c34:	9a04      	ldr	r2, [sp, #16]
   25c36:	4650      	mov	r0, sl
   25c38:	4694      	mov	ip, r2
   25c3a:	449c      	add	ip, r3
   25c3c:	4663      	mov	r3, ip
   25c3e:	9304      	str	r3, [sp, #16]
   25c40:	f001 f86e 	bl	26d20 <__i2b>
   25c44:	4680      	mov	r8, r0
   25c46:	e032      	b.n	25cae <_dtoa_r+0x6f6>
   25c48:	9a06      	ldr	r2, [sp, #24]
   25c4a:	9b03      	ldr	r3, [sp, #12]
   25c4c:	1ad2      	subs	r2, r2, r3
   25c4e:	425b      	negs	r3, r3
   25c50:	4699      	mov	r9, r3
   25c52:	2300      	movs	r3, #0
   25c54:	9206      	str	r2, [sp, #24]
   25c56:	930d      	str	r3, [sp, #52]	; 0x34
   25c58:	e579      	b.n	2574e <_dtoa_r+0x196>
   25c5a:	9803      	ldr	r0, [sp, #12]
   25c5c:	f7fd fe5c 	bl	23918 <__aeabi_i2d>
   25c60:	000b      	movs	r3, r1
   25c62:	0002      	movs	r2, r0
   25c64:	0029      	movs	r1, r5
   25c66:	0020      	movs	r0, r4
   25c68:	f7fb f92e 	bl	20ec8 <__aeabi_dcmpeq>
   25c6c:	0002      	movs	r2, r0
   25c6e:	4250      	negs	r0, r2
   25c70:	4150      	adcs	r0, r2
   25c72:	9b03      	ldr	r3, [sp, #12]
   25c74:	1a1b      	subs	r3, r3, r0
   25c76:	9303      	str	r3, [sp, #12]
   25c78:	e53d      	b.n	256f6 <_dtoa_r+0x13e>
   25c7a:	2301      	movs	r3, #1
   25c7c:	1a9b      	subs	r3, r3, r2
   25c7e:	9306      	str	r3, [sp, #24]
   25c80:	2300      	movs	r3, #0
   25c82:	9304      	str	r3, [sp, #16]
   25c84:	e557      	b.n	25736 <_dtoa_r+0x17e>
   25c86:	46c0      	nop			; (mov r8, r8)
   25c88:	3ff00000 	.word	0x3ff00000
   25c8c:	40240000 	.word	0x40240000
   25c90:	00000432 	.word	0x00000432
   25c94:	00000412 	.word	0x00000412
   25c98:	fe100000 	.word	0xfe100000
   25c9c:	00029e28 	.word	0x00029e28
   25ca0:	00029e88 	.word	0x00029e88
   25ca4:	9b06      	ldr	r3, [sp, #24]
   25ca6:	464c      	mov	r4, r9
   25ca8:	9308      	str	r3, [sp, #32]
   25caa:	2300      	movs	r3, #0
   25cac:	4698      	mov	r8, r3
   25cae:	9908      	ldr	r1, [sp, #32]
   25cb0:	1e0b      	subs	r3, r1, #0
   25cb2:	dd0e      	ble.n	25cd2 <_dtoa_r+0x71a>
   25cb4:	9a04      	ldr	r2, [sp, #16]
   25cb6:	2a00      	cmp	r2, #0
   25cb8:	dd0b      	ble.n	25cd2 <_dtoa_r+0x71a>
   25cba:	4293      	cmp	r3, r2
   25cbc:	dd00      	ble.n	25cc0 <_dtoa_r+0x708>
   25cbe:	e187      	b.n	25fd0 <_dtoa_r+0xa18>
   25cc0:	9a06      	ldr	r2, [sp, #24]
   25cc2:	1ad2      	subs	r2, r2, r3
   25cc4:	9206      	str	r2, [sp, #24]
   25cc6:	9a08      	ldr	r2, [sp, #32]
   25cc8:	1ad2      	subs	r2, r2, r3
   25cca:	9208      	str	r2, [sp, #32]
   25ccc:	9a04      	ldr	r2, [sp, #16]
   25cce:	1ad3      	subs	r3, r2, r3
   25cd0:	9304      	str	r3, [sp, #16]
   25cd2:	464b      	mov	r3, r9
   25cd4:	2b00      	cmp	r3, #0
   25cd6:	d01a      	beq.n	25d0e <_dtoa_r+0x756>
   25cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25cda:	2b00      	cmp	r3, #0
   25cdc:	d100      	bne.n	25ce0 <_dtoa_r+0x728>
   25cde:	e1bb      	b.n	26058 <_dtoa_r+0xaa0>
   25ce0:	2c00      	cmp	r4, #0
   25ce2:	dd10      	ble.n	25d06 <_dtoa_r+0x74e>
   25ce4:	4641      	mov	r1, r8
   25ce6:	0022      	movs	r2, r4
   25ce8:	4650      	mov	r0, sl
   25cea:	f001 f8cd 	bl	26e88 <__pow5mult>
   25cee:	465a      	mov	r2, fp
   25cf0:	0001      	movs	r1, r0
   25cf2:	4680      	mov	r8, r0
   25cf4:	4650      	mov	r0, sl
   25cf6:	f001 f81d 	bl	26d34 <__multiply>
   25cfa:	0005      	movs	r5, r0
   25cfc:	4659      	mov	r1, fp
   25cfe:	4650      	mov	r0, sl
   25d00:	f000 ff76 	bl	26bf0 <_Bfree>
   25d04:	46ab      	mov	fp, r5
   25d06:	464b      	mov	r3, r9
   25d08:	1b1a      	subs	r2, r3, r4
   25d0a:	d000      	beq.n	25d0e <_dtoa_r+0x756>
   25d0c:	e1a5      	b.n	2605a <_dtoa_r+0xaa2>
   25d0e:	2101      	movs	r1, #1
   25d10:	4650      	mov	r0, sl
   25d12:	f001 f805 	bl	26d20 <__i2b>
   25d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25d18:	4681      	mov	r9, r0
   25d1a:	2b00      	cmp	r3, #0
   25d1c:	dd1d      	ble.n	25d5a <_dtoa_r+0x7a2>
   25d1e:	001a      	movs	r2, r3
   25d20:	0001      	movs	r1, r0
   25d22:	4650      	mov	r0, sl
   25d24:	f001 f8b0 	bl	26e88 <__pow5mult>
   25d28:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25d2a:	4681      	mov	r9, r0
   25d2c:	2b01      	cmp	r3, #1
   25d2e:	dc00      	bgt.n	25d32 <_dtoa_r+0x77a>
   25d30:	e150      	b.n	25fd4 <_dtoa_r+0xa1c>
   25d32:	2400      	movs	r4, #0
   25d34:	464b      	mov	r3, r9
   25d36:	691b      	ldr	r3, [r3, #16]
   25d38:	3303      	adds	r3, #3
   25d3a:	009b      	lsls	r3, r3, #2
   25d3c:	444b      	add	r3, r9
   25d3e:	6858      	ldr	r0, [r3, #4]
   25d40:	f000 ffa6 	bl	26c90 <__hi0bits>
   25d44:	2320      	movs	r3, #32
   25d46:	1a1b      	subs	r3, r3, r0
   25d48:	e010      	b.n	25d6c <_dtoa_r+0x7b4>
   25d4a:	2220      	movs	r2, #32
   25d4c:	0030      	movs	r0, r6
   25d4e:	1ad3      	subs	r3, r2, r3
   25d50:	4098      	lsls	r0, r3
   25d52:	e685      	b.n	25a60 <_dtoa_r+0x4a8>
   25d54:	2300      	movs	r3, #0
   25d56:	930c      	str	r3, [sp, #48]	; 0x30
   25d58:	e4e3      	b.n	25722 <_dtoa_r+0x16a>
   25d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25d5c:	2400      	movs	r4, #0
   25d5e:	2b01      	cmp	r3, #1
   25d60:	dc00      	bgt.n	25d64 <_dtoa_r+0x7ac>
   25d62:	e18b      	b.n	2607c <_dtoa_r+0xac4>
   25d64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25d66:	2301      	movs	r3, #1
   25d68:	2a00      	cmp	r2, #0
   25d6a:	d1e3      	bne.n	25d34 <_dtoa_r+0x77c>
   25d6c:	9904      	ldr	r1, [sp, #16]
   25d6e:	201f      	movs	r0, #31
   25d70:	468c      	mov	ip, r1
   25d72:	4463      	add	r3, ip
   25d74:	4018      	ands	r0, r3
   25d76:	d100      	bne.n	25d7a <_dtoa_r+0x7c2>
   25d78:	e0ae      	b.n	25ed8 <_dtoa_r+0x920>
   25d7a:	2320      	movs	r3, #32
   25d7c:	1a1b      	subs	r3, r3, r0
   25d7e:	2b04      	cmp	r3, #4
   25d80:	dc00      	bgt.n	25d84 <_dtoa_r+0x7cc>
   25d82:	e3cc      	b.n	2651e <_dtoa_r+0xf66>
   25d84:	231c      	movs	r3, #28
   25d86:	1a18      	subs	r0, r3, r0
   25d88:	9b06      	ldr	r3, [sp, #24]
   25d8a:	469c      	mov	ip, r3
   25d8c:	4484      	add	ip, r0
   25d8e:	4663      	mov	r3, ip
   25d90:	9306      	str	r3, [sp, #24]
   25d92:	9b08      	ldr	r3, [sp, #32]
   25d94:	469c      	mov	ip, r3
   25d96:	4484      	add	ip, r0
   25d98:	4663      	mov	r3, ip
   25d9a:	468c      	mov	ip, r1
   25d9c:	4484      	add	ip, r0
   25d9e:	9308      	str	r3, [sp, #32]
   25da0:	4663      	mov	r3, ip
   25da2:	9304      	str	r3, [sp, #16]
   25da4:	9b06      	ldr	r3, [sp, #24]
   25da6:	2b00      	cmp	r3, #0
   25da8:	dd05      	ble.n	25db6 <_dtoa_r+0x7fe>
   25daa:	4659      	mov	r1, fp
   25dac:	001a      	movs	r2, r3
   25dae:	4650      	mov	r0, sl
   25db0:	f001 f8ca 	bl	26f48 <__lshift>
   25db4:	4683      	mov	fp, r0
   25db6:	9b04      	ldr	r3, [sp, #16]
   25db8:	2b00      	cmp	r3, #0
   25dba:	dd05      	ble.n	25dc8 <_dtoa_r+0x810>
   25dbc:	4649      	mov	r1, r9
   25dbe:	001a      	movs	r2, r3
   25dc0:	4650      	mov	r0, sl
   25dc2:	f001 f8c1 	bl	26f48 <__lshift>
   25dc6:	4681      	mov	r9, r0
   25dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25dca:	2b00      	cmp	r3, #0
   25dcc:	d000      	beq.n	25dd0 <_dtoa_r+0x818>
   25dce:	e094      	b.n	25efa <_dtoa_r+0x942>
   25dd0:	9b07      	ldr	r3, [sp, #28]
   25dd2:	2b00      	cmp	r3, #0
   25dd4:	dc00      	bgt.n	25dd8 <_dtoa_r+0x820>
   25dd6:	e175      	b.n	260c4 <_dtoa_r+0xb0c>
   25dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25dda:	2b00      	cmp	r3, #0
   25ddc:	d100      	bne.n	25de0 <_dtoa_r+0x828>
   25dde:	e0a6      	b.n	25f2e <_dtoa_r+0x976>
   25de0:	9b08      	ldr	r3, [sp, #32]
   25de2:	2b00      	cmp	r3, #0
   25de4:	dd05      	ble.n	25df2 <_dtoa_r+0x83a>
   25de6:	4641      	mov	r1, r8
   25de8:	001a      	movs	r2, r3
   25dea:	4650      	mov	r0, sl
   25dec:	f001 f8ac 	bl	26f48 <__lshift>
   25df0:	4680      	mov	r8, r0
   25df2:	4643      	mov	r3, r8
   25df4:	930c      	str	r3, [sp, #48]	; 0x30
   25df6:	2c00      	cmp	r4, #0
   25df8:	d000      	beq.n	25dfc <_dtoa_r+0x844>
   25dfa:	e250      	b.n	2629e <_dtoa_r+0xce6>
   25dfc:	9c07      	ldr	r4, [sp, #28]
   25dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25e00:	3c01      	subs	r4, #1
   25e02:	0023      	movs	r3, r4
   25e04:	4694      	mov	ip, r2
   25e06:	4463      	add	r3, ip
   25e08:	9308      	str	r3, [sp, #32]
   25e0a:	2301      	movs	r3, #1
   25e0c:	4033      	ands	r3, r6
   25e0e:	9307      	str	r3, [sp, #28]
   25e10:	464b      	mov	r3, r9
   25e12:	9306      	str	r3, [sp, #24]
   25e14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25e16:	4657      	mov	r7, sl
   25e18:	4645      	mov	r5, r8
   25e1a:	465e      	mov	r6, fp
   25e1c:	4692      	mov	sl, r2
   25e1e:	4698      	mov	r8, r3
   25e20:	9b06      	ldr	r3, [sp, #24]
   25e22:	0030      	movs	r0, r6
   25e24:	0019      	movs	r1, r3
   25e26:	4699      	mov	r9, r3
   25e28:	f7ff fb1c 	bl	25464 <quorem>
   25e2c:	0003      	movs	r3, r0
   25e2e:	900b      	str	r0, [sp, #44]	; 0x2c
   25e30:	3330      	adds	r3, #48	; 0x30
   25e32:	0029      	movs	r1, r5
   25e34:	0030      	movs	r0, r6
   25e36:	9304      	str	r3, [sp, #16]
   25e38:	f001 f8e6 	bl	27008 <__mcmp>
   25e3c:	4649      	mov	r1, r9
   25e3e:	0004      	movs	r4, r0
   25e40:	4642      	mov	r2, r8
   25e42:	0038      	movs	r0, r7
   25e44:	f001 f8fa 	bl	2703c <__mdiff>
   25e48:	68c3      	ldr	r3, [r0, #12]
   25e4a:	4681      	mov	r9, r0
   25e4c:	2b00      	cmp	r3, #0
   25e4e:	d000      	beq.n	25e52 <_dtoa_r+0x89a>
   25e50:	e11e      	b.n	26090 <_dtoa_r+0xad8>
   25e52:	0001      	movs	r1, r0
   25e54:	0030      	movs	r0, r6
   25e56:	f001 f8d7 	bl	27008 <__mcmp>
   25e5a:	4683      	mov	fp, r0
   25e5c:	4649      	mov	r1, r9
   25e5e:	0038      	movs	r0, r7
   25e60:	f000 fec6 	bl	26bf0 <_Bfree>
   25e64:	465b      	mov	r3, fp
   25e66:	9a22      	ldr	r2, [sp, #136]	; 0x88
   25e68:	4313      	orrs	r3, r2
   25e6a:	d103      	bne.n	25e74 <_dtoa_r+0x8bc>
   25e6c:	9b07      	ldr	r3, [sp, #28]
   25e6e:	2b00      	cmp	r3, #0
   25e70:	d100      	bne.n	25e74 <_dtoa_r+0x8bc>
   25e72:	e306      	b.n	26482 <_dtoa_r+0xeca>
   25e74:	2c00      	cmp	r4, #0
   25e76:	da00      	bge.n	25e7a <_dtoa_r+0x8c2>
   25e78:	e1a8      	b.n	261cc <_dtoa_r+0xc14>
   25e7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25e7c:	431c      	orrs	r4, r3
   25e7e:	d103      	bne.n	25e88 <_dtoa_r+0x8d0>
   25e80:	9b07      	ldr	r3, [sp, #28]
   25e82:	2b00      	cmp	r3, #0
   25e84:	d100      	bne.n	25e88 <_dtoa_r+0x8d0>
   25e86:	e1a1      	b.n	261cc <_dtoa_r+0xc14>
   25e88:	465b      	mov	r3, fp
   25e8a:	2b00      	cmp	r3, #0
   25e8c:	dd00      	ble.n	25e90 <_dtoa_r+0x8d8>
   25e8e:	e282      	b.n	26396 <_dtoa_r+0xdde>
   25e90:	4669      	mov	r1, sp
   25e92:	4652      	mov	r2, sl
   25e94:	4653      	mov	r3, sl
   25e96:	7c09      	ldrb	r1, [r1, #16]
   25e98:	1c5c      	adds	r4, r3, #1
   25e9a:	7011      	strb	r1, [r2, #0]
   25e9c:	9a08      	ldr	r2, [sp, #32]
   25e9e:	4552      	cmp	r2, sl
   25ea0:	d100      	bne.n	25ea4 <_dtoa_r+0x8ec>
   25ea2:	e28a      	b.n	263ba <_dtoa_r+0xe02>
   25ea4:	0031      	movs	r1, r6
   25ea6:	2300      	movs	r3, #0
   25ea8:	220a      	movs	r2, #10
   25eaa:	0038      	movs	r0, r7
   25eac:	f000 feaa 	bl	26c04 <__multadd>
   25eb0:	2300      	movs	r3, #0
   25eb2:	0006      	movs	r6, r0
   25eb4:	220a      	movs	r2, #10
   25eb6:	0029      	movs	r1, r5
   25eb8:	0038      	movs	r0, r7
   25eba:	4545      	cmp	r5, r8
   25ebc:	d100      	bne.n	25ec0 <_dtoa_r+0x908>
   25ebe:	e0e1      	b.n	26084 <_dtoa_r+0xacc>
   25ec0:	f000 fea0 	bl	26c04 <__multadd>
   25ec4:	4641      	mov	r1, r8
   25ec6:	0005      	movs	r5, r0
   25ec8:	2300      	movs	r3, #0
   25eca:	220a      	movs	r2, #10
   25ecc:	0038      	movs	r0, r7
   25ece:	f000 fe99 	bl	26c04 <__multadd>
   25ed2:	46a2      	mov	sl, r4
   25ed4:	4680      	mov	r8, r0
   25ed6:	e7a3      	b.n	25e20 <_dtoa_r+0x868>
   25ed8:	201c      	movs	r0, #28
   25eda:	9b06      	ldr	r3, [sp, #24]
   25edc:	469c      	mov	ip, r3
   25ede:	4484      	add	ip, r0
   25ee0:	4663      	mov	r3, ip
   25ee2:	9306      	str	r3, [sp, #24]
   25ee4:	9b08      	ldr	r3, [sp, #32]
   25ee6:	469c      	mov	ip, r3
   25ee8:	4484      	add	ip, r0
   25eea:	4663      	mov	r3, ip
   25eec:	9308      	str	r3, [sp, #32]
   25eee:	9b04      	ldr	r3, [sp, #16]
   25ef0:	469c      	mov	ip, r3
   25ef2:	4484      	add	ip, r0
   25ef4:	4663      	mov	r3, ip
   25ef6:	9304      	str	r3, [sp, #16]
   25ef8:	e754      	b.n	25da4 <_dtoa_r+0x7ec>
   25efa:	4649      	mov	r1, r9
   25efc:	4658      	mov	r0, fp
   25efe:	f001 f883 	bl	27008 <__mcmp>
   25f02:	2800      	cmp	r0, #0
   25f04:	db00      	blt.n	25f08 <_dtoa_r+0x950>
   25f06:	e763      	b.n	25dd0 <_dtoa_r+0x818>
   25f08:	9b03      	ldr	r3, [sp, #12]
   25f0a:	4659      	mov	r1, fp
   25f0c:	3b01      	subs	r3, #1
   25f0e:	9303      	str	r3, [sp, #12]
   25f10:	220a      	movs	r2, #10
   25f12:	2300      	movs	r3, #0
   25f14:	4650      	mov	r0, sl
   25f16:	f000 fe75 	bl	26c04 <__multadd>
   25f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25f1c:	4683      	mov	fp, r0
   25f1e:	2b00      	cmp	r3, #0
   25f20:	d000      	beq.n	25f24 <_dtoa_r+0x96c>
   25f22:	e2ca      	b.n	264ba <_dtoa_r+0xf02>
   25f24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25f26:	2b00      	cmp	r3, #0
   25f28:	dc00      	bgt.n	25f2c <_dtoa_r+0x974>
   25f2a:	e2d8      	b.n	264de <_dtoa_r+0xf26>
   25f2c:	9307      	str	r3, [sp, #28]
   25f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25f30:	465d      	mov	r5, fp
   25f32:	2400      	movs	r4, #0
   25f34:	9f07      	ldr	r7, [sp, #28]
   25f36:	469b      	mov	fp, r3
   25f38:	e006      	b.n	25f48 <_dtoa_r+0x990>
   25f3a:	0029      	movs	r1, r5
   25f3c:	2300      	movs	r3, #0
   25f3e:	220a      	movs	r2, #10
   25f40:	4650      	mov	r0, sl
   25f42:	f000 fe5f 	bl	26c04 <__multadd>
   25f46:	0005      	movs	r5, r0
   25f48:	4649      	mov	r1, r9
   25f4a:	0028      	movs	r0, r5
   25f4c:	f7ff fa8a 	bl	25464 <quorem>
   25f50:	465b      	mov	r3, fp
   25f52:	3030      	adds	r0, #48	; 0x30
   25f54:	5518      	strb	r0, [r3, r4]
   25f56:	3401      	adds	r4, #1
   25f58:	42bc      	cmp	r4, r7
   25f5a:	dbee      	blt.n	25f3a <_dtoa_r+0x982>
   25f5c:	46ab      	mov	fp, r5
   25f5e:	0006      	movs	r6, r0
   25f60:	9c07      	ldr	r4, [sp, #28]
   25f62:	2c00      	cmp	r4, #0
   25f64:	dc00      	bgt.n	25f68 <_dtoa_r+0x9b0>
   25f66:	e237      	b.n	263d8 <_dtoa_r+0xe20>
   25f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25f6a:	2700      	movs	r7, #0
   25f6c:	469c      	mov	ip, r3
   25f6e:	4464      	add	r4, ip
   25f70:	4659      	mov	r1, fp
   25f72:	2201      	movs	r2, #1
   25f74:	4650      	mov	r0, sl
   25f76:	f000 ffe7 	bl	26f48 <__lshift>
   25f7a:	4649      	mov	r1, r9
   25f7c:	4683      	mov	fp, r0
   25f7e:	f001 f843 	bl	27008 <__mcmp>
   25f82:	2800      	cmp	r0, #0
   25f84:	dc00      	bgt.n	25f88 <_dtoa_r+0x9d0>
   25f86:	e144      	b.n	26212 <_dtoa_r+0xc5a>
   25f88:	1e65      	subs	r5, r4, #1
   25f8a:	782b      	ldrb	r3, [r5, #0]
   25f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25f8e:	e006      	b.n	25f9e <_dtoa_r+0x9e6>
   25f90:	4295      	cmp	r5, r2
   25f92:	d100      	bne.n	25f96 <_dtoa_r+0x9de>
   25f94:	e0b1      	b.n	260fa <_dtoa_r+0xb42>
   25f96:	3c02      	subs	r4, #2
   25f98:	7823      	ldrb	r3, [r4, #0]
   25f9a:	002c      	movs	r4, r5
   25f9c:	3d01      	subs	r5, #1
   25f9e:	2b39      	cmp	r3, #57	; 0x39
   25fa0:	d0f6      	beq.n	25f90 <_dtoa_r+0x9d8>
   25fa2:	3301      	adds	r3, #1
   25fa4:	702b      	strb	r3, [r5, #0]
   25fa6:	4649      	mov	r1, r9
   25fa8:	4650      	mov	r0, sl
   25faa:	f000 fe21 	bl	26bf0 <_Bfree>
   25fae:	4643      	mov	r3, r8
   25fb0:	2b00      	cmp	r3, #0
   25fb2:	d100      	bne.n	25fb6 <_dtoa_r+0x9fe>
   25fb4:	e52f      	b.n	25a16 <_dtoa_r+0x45e>
   25fb6:	2f00      	cmp	r7, #0
   25fb8:	d005      	beq.n	25fc6 <_dtoa_r+0xa0e>
   25fba:	4547      	cmp	r7, r8
   25fbc:	d003      	beq.n	25fc6 <_dtoa_r+0xa0e>
   25fbe:	0039      	movs	r1, r7
   25fc0:	4650      	mov	r0, sl
   25fc2:	f000 fe15 	bl	26bf0 <_Bfree>
   25fc6:	4641      	mov	r1, r8
   25fc8:	4650      	mov	r0, sl
   25fca:	f000 fe11 	bl	26bf0 <_Bfree>
   25fce:	e522      	b.n	25a16 <_dtoa_r+0x45e>
   25fd0:	0013      	movs	r3, r2
   25fd2:	e675      	b.n	25cc0 <_dtoa_r+0x708>
   25fd4:	2e00      	cmp	r6, #0
   25fd6:	d000      	beq.n	25fda <_dtoa_r+0xa22>
   25fd8:	e6ab      	b.n	25d32 <_dtoa_r+0x77a>
   25fda:	033b      	lsls	r3, r7, #12
   25fdc:	2400      	movs	r4, #0
   25fde:	2b00      	cmp	r3, #0
   25fe0:	d000      	beq.n	25fe4 <_dtoa_r+0xa2c>
   25fe2:	e6bf      	b.n	25d64 <_dtoa_r+0x7ac>
   25fe4:	4bba      	ldr	r3, [pc, #744]	; (262d0 <_dtoa_r+0xd18>)
   25fe6:	423b      	tst	r3, r7
   25fe8:	d100      	bne.n	25fec <_dtoa_r+0xa34>
   25fea:	e6bb      	b.n	25d64 <_dtoa_r+0x7ac>
   25fec:	9b06      	ldr	r3, [sp, #24]
   25fee:	3401      	adds	r4, #1
   25ff0:	3301      	adds	r3, #1
   25ff2:	9306      	str	r3, [sp, #24]
   25ff4:	9b04      	ldr	r3, [sp, #16]
   25ff6:	3301      	adds	r3, #1
   25ff8:	9304      	str	r3, [sp, #16]
   25ffa:	e6b3      	b.n	25d64 <_dtoa_r+0x7ac>
   25ffc:	2301      	movs	r3, #1
   25ffe:	930b      	str	r3, [sp, #44]	; 0x2c
   26000:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   26002:	2b00      	cmp	r3, #0
   26004:	dc00      	bgt.n	26008 <_dtoa_r+0xa50>
   26006:	e0d1      	b.n	261ac <_dtoa_r+0xbf4>
   26008:	001d      	movs	r5, r3
   2600a:	4698      	mov	r8, r3
   2600c:	930e      	str	r3, [sp, #56]	; 0x38
   2600e:	9307      	str	r3, [sp, #28]
   26010:	f7ff fbc8 	bl	257a4 <_dtoa_r+0x1ec>
   26014:	9b07      	ldr	r3, [sp, #28]
   26016:	2b00      	cmp	r3, #0
   26018:	dd00      	ble.n	2601c <_dtoa_r+0xa64>
   2601a:	e553      	b.n	25ac4 <_dtoa_r+0x50c>
   2601c:	d000      	beq.n	26020 <_dtoa_r+0xa68>
   2601e:	e0ad      	b.n	2617c <_dtoa_r+0xbc4>
   26020:	9804      	ldr	r0, [sp, #16]
   26022:	9905      	ldr	r1, [sp, #20]
   26024:	2200      	movs	r2, #0
   26026:	4bab      	ldr	r3, [pc, #684]	; (262d4 <_dtoa_r+0xd1c>)
   26028:	f7fc fe8c 	bl	22d44 <__aeabi_dmul>
   2602c:	003b      	movs	r3, r7
   2602e:	0032      	movs	r2, r6
   26030:	f7fa ff6e 	bl	20f10 <__aeabi_dcmpge>
   26034:	2300      	movs	r3, #0
   26036:	4699      	mov	r9, r3
   26038:	4698      	mov	r8, r3
   2603a:	2800      	cmp	r0, #0
   2603c:	d055      	beq.n	260ea <_dtoa_r+0xb32>
   2603e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   26040:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   26042:	43db      	mvns	r3, r3
   26044:	9303      	str	r3, [sp, #12]
   26046:	4649      	mov	r1, r9
   26048:	4650      	mov	r0, sl
   2604a:	f000 fdd1 	bl	26bf0 <_Bfree>
   2604e:	4643      	mov	r3, r8
   26050:	2b00      	cmp	r3, #0
   26052:	d100      	bne.n	26056 <_dtoa_r+0xa9e>
   26054:	e4df      	b.n	25a16 <_dtoa_r+0x45e>
   26056:	e7b6      	b.n	25fc6 <_dtoa_r+0xa0e>
   26058:	464a      	mov	r2, r9
   2605a:	4659      	mov	r1, fp
   2605c:	4650      	mov	r0, sl
   2605e:	f000 ff13 	bl	26e88 <__pow5mult>
   26062:	4683      	mov	fp, r0
   26064:	e653      	b.n	25d0e <_dtoa_r+0x756>
   26066:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   26068:	2a00      	cmp	r2, #0
   2606a:	d100      	bne.n	2606e <_dtoa_r+0xab6>
   2606c:	e1b6      	b.n	263dc <_dtoa_r+0xe24>
   2606e:	4a9a      	ldr	r2, [pc, #616]	; (262d8 <_dtoa_r+0xd20>)
   26070:	464c      	mov	r4, r9
   26072:	4694      	mov	ip, r2
   26074:	9a06      	ldr	r2, [sp, #24]
   26076:	4463      	add	r3, ip
   26078:	9208      	str	r2, [sp, #32]
   2607a:	e5d5      	b.n	25c28 <_dtoa_r+0x670>
   2607c:	2e00      	cmp	r6, #0
   2607e:	d000      	beq.n	26082 <_dtoa_r+0xaca>
   26080:	e670      	b.n	25d64 <_dtoa_r+0x7ac>
   26082:	e7aa      	b.n	25fda <_dtoa_r+0xa22>
   26084:	f000 fdbe 	bl	26c04 <__multadd>
   26088:	46a2      	mov	sl, r4
   2608a:	0005      	movs	r5, r0
   2608c:	4680      	mov	r8, r0
   2608e:	e6c7      	b.n	25e20 <_dtoa_r+0x868>
   26090:	2301      	movs	r3, #1
   26092:	469b      	mov	fp, r3
   26094:	e6e2      	b.n	25e5c <_dtoa_r+0x8a4>
   26096:	2300      	movs	r3, #0
   26098:	930b      	str	r3, [sp, #44]	; 0x2c
   2609a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2609c:	2b02      	cmp	r3, #2
   2609e:	d0af      	beq.n	26000 <_dtoa_r+0xa48>
   260a0:	2400      	movs	r4, #0
   260a2:	4653      	mov	r3, sl
   260a4:	0021      	movs	r1, r4
   260a6:	645c      	str	r4, [r3, #68]	; 0x44
   260a8:	4650      	mov	r0, sl
   260aa:	f000 fd79 	bl	26ba0 <_Balloc>
   260ae:	4653      	mov	r3, sl
   260b0:	6418      	str	r0, [r3, #64]	; 0x40
   260b2:	2301      	movs	r3, #1
   260b4:	425b      	negs	r3, r3
   260b6:	9307      	str	r3, [sp, #28]
   260b8:	930e      	str	r3, [sp, #56]	; 0x38
   260ba:	3302      	adds	r3, #2
   260bc:	900a      	str	r0, [sp, #40]	; 0x28
   260be:	9423      	str	r4, [sp, #140]	; 0x8c
   260c0:	930b      	str	r3, [sp, #44]	; 0x2c
   260c2:	e4ec      	b.n	25a9e <_dtoa_r+0x4e6>
   260c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   260c6:	2b02      	cmp	r3, #2
   260c8:	dc00      	bgt.n	260cc <_dtoa_r+0xb14>
   260ca:	e685      	b.n	25dd8 <_dtoa_r+0x820>
   260cc:	9b07      	ldr	r3, [sp, #28]
   260ce:	2b00      	cmp	r3, #0
   260d0:	d1b5      	bne.n	2603e <_dtoa_r+0xa86>
   260d2:	4649      	mov	r1, r9
   260d4:	2205      	movs	r2, #5
   260d6:	4650      	mov	r0, sl
   260d8:	f000 fd94 	bl	26c04 <__multadd>
   260dc:	4681      	mov	r9, r0
   260de:	0001      	movs	r1, r0
   260e0:	4658      	mov	r0, fp
   260e2:	f000 ff91 	bl	27008 <__mcmp>
   260e6:	2800      	cmp	r0, #0
   260e8:	dda9      	ble.n	2603e <_dtoa_r+0xa86>
   260ea:	2331      	movs	r3, #49	; 0x31
   260ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   260ee:	7013      	strb	r3, [r2, #0]
   260f0:	9b03      	ldr	r3, [sp, #12]
   260f2:	1c54      	adds	r4, r2, #1
   260f4:	3301      	adds	r3, #1
   260f6:	9303      	str	r3, [sp, #12]
   260f8:	e7a5      	b.n	26046 <_dtoa_r+0xa8e>
   260fa:	9b03      	ldr	r3, [sp, #12]
   260fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   260fe:	3301      	adds	r3, #1
   26100:	9303      	str	r3, [sp, #12]
   26102:	2331      	movs	r3, #49	; 0x31
   26104:	7013      	strb	r3, [r2, #0]
   26106:	e74e      	b.n	25fa6 <_dtoa_r+0x9ee>
   26108:	2300      	movs	r3, #0
   2610a:	930b      	str	r3, [sp, #44]	; 0x2c
   2610c:	f7ff fb3d 	bl	2578a <_dtoa_r+0x1d2>
   26110:	9b06      	ldr	r3, [sp, #24]
   26112:	465c      	mov	r4, fp
   26114:	469b      	mov	fp, r3
   26116:	9b07      	ldr	r3, [sp, #28]
   26118:	469a      	mov	sl, r3
   2611a:	e47c      	b.n	25a16 <_dtoa_r+0x45e>
   2611c:	4640      	mov	r0, r8
   2611e:	f7fd fbfb 	bl	23918 <__aeabi_i2d>
   26122:	0032      	movs	r2, r6
   26124:	003b      	movs	r3, r7
   26126:	f7fc fe0d 	bl	22d44 <__aeabi_dmul>
   2612a:	2200      	movs	r2, #0
   2612c:	4b6b      	ldr	r3, [pc, #428]	; (262dc <_dtoa_r+0xd24>)
   2612e:	f7fb fec5 	bl	21ebc <__aeabi_dadd>
   26132:	4a6b      	ldr	r2, [pc, #428]	; (262e0 <_dtoa_r+0xd28>)
   26134:	000b      	movs	r3, r1
   26136:	4694      	mov	ip, r2
   26138:	4463      	add	r3, ip
   2613a:	9008      	str	r0, [sp, #32]
   2613c:	9109      	str	r1, [sp, #36]	; 0x24
   2613e:	9309      	str	r3, [sp, #36]	; 0x24
   26140:	2200      	movs	r2, #0
   26142:	4b64      	ldr	r3, [pc, #400]	; (262d4 <_dtoa_r+0xd1c>)
   26144:	0030      	movs	r0, r6
   26146:	0039      	movs	r1, r7
   26148:	f7fd f87c 	bl	23244 <__aeabi_dsub>
   2614c:	9e08      	ldr	r6, [sp, #32]
   2614e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   26150:	0032      	movs	r2, r6
   26152:	003b      	movs	r3, r7
   26154:	0004      	movs	r4, r0
   26156:	000d      	movs	r5, r1
   26158:	f7fa fed0 	bl	20efc <__aeabi_dcmpgt>
   2615c:	2800      	cmp	r0, #0
   2615e:	d000      	beq.n	26162 <_dtoa_r+0xbaa>
   26160:	e0b2      	b.n	262c8 <_dtoa_r+0xd10>
   26162:	2080      	movs	r0, #128	; 0x80
   26164:	0600      	lsls	r0, r0, #24
   26166:	4684      	mov	ip, r0
   26168:	0039      	movs	r1, r7
   2616a:	4461      	add	r1, ip
   2616c:	000b      	movs	r3, r1
   2616e:	0032      	movs	r2, r6
   26170:	0020      	movs	r0, r4
   26172:	0029      	movs	r1, r5
   26174:	f7fa feae 	bl	20ed4 <__aeabi_dcmplt>
   26178:	2800      	cmp	r0, #0
   2617a:	d057      	beq.n	2622c <_dtoa_r+0xc74>
   2617c:	2300      	movs	r3, #0
   2617e:	4699      	mov	r9, r3
   26180:	4698      	mov	r8, r3
   26182:	e75c      	b.n	2603e <_dtoa_r+0xa86>
   26184:	980a      	ldr	r0, [sp, #40]	; 0x28
   26186:	f7ff fa4c 	bl	25622 <_dtoa_r+0x6a>
   2618a:	1ae2      	subs	r2, r4, r3
   2618c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2618e:	46a1      	mov	r9, r4
   26190:	469c      	mov	ip, r3
   26192:	4494      	add	ip, r2
   26194:	4663      	mov	r3, ip
   26196:	2400      	movs	r4, #0
   26198:	930d      	str	r3, [sp, #52]	; 0x34
   2619a:	e53e      	b.n	25c1a <_dtoa_r+0x662>
   2619c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2619e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   261a0:	9208      	str	r2, [sp, #32]
   261a2:	9309      	str	r3, [sp, #36]	; 0x24
   261a4:	2302      	movs	r3, #2
   261a6:	4698      	mov	r8, r3
   261a8:	f7ff fb3a 	bl	25820 <_dtoa_r+0x268>
   261ac:	2300      	movs	r3, #0
   261ae:	4652      	mov	r2, sl
   261b0:	2100      	movs	r1, #0
   261b2:	6453      	str	r3, [r2, #68]	; 0x44
   261b4:	4650      	mov	r0, sl
   261b6:	f000 fcf3 	bl	26ba0 <_Balloc>
   261ba:	4653      	mov	r3, sl
   261bc:	6418      	str	r0, [r3, #64]	; 0x40
   261be:	2301      	movs	r3, #1
   261c0:	900a      	str	r0, [sp, #40]	; 0x28
   261c2:	9307      	str	r3, [sp, #28]
   261c4:	9323      	str	r3, [sp, #140]	; 0x8c
   261c6:	930e      	str	r3, [sp, #56]	; 0x38
   261c8:	f7ff fb07 	bl	257da <_dtoa_r+0x222>
   261cc:	4643      	mov	r3, r8
   261ce:	930c      	str	r3, [sp, #48]	; 0x30
   261d0:	465b      	mov	r3, fp
   261d2:	9a06      	ldr	r2, [sp, #24]
   261d4:	46a8      	mov	r8, r5
   261d6:	46b3      	mov	fp, r6
   261d8:	4655      	mov	r5, sl
   261da:	9e04      	ldr	r6, [sp, #16]
   261dc:	4691      	mov	r9, r2
   261de:	46ba      	mov	sl, r7
   261e0:	2b00      	cmp	r3, #0
   261e2:	dd10      	ble.n	26206 <_dtoa_r+0xc4e>
   261e4:	4659      	mov	r1, fp
   261e6:	2201      	movs	r2, #1
   261e8:	0038      	movs	r0, r7
   261ea:	f000 fead 	bl	26f48 <__lshift>
   261ee:	4649      	mov	r1, r9
   261f0:	4683      	mov	fp, r0
   261f2:	f000 ff09 	bl	27008 <__mcmp>
   261f6:	2800      	cmp	r0, #0
   261f8:	dc00      	bgt.n	261fc <_dtoa_r+0xc44>
   261fa:	e157      	b.n	264ac <_dtoa_r+0xef4>
   261fc:	2e39      	cmp	r6, #57	; 0x39
   261fe:	d100      	bne.n	26202 <_dtoa_r+0xc4a>
   26200:	e122      	b.n	26448 <_dtoa_r+0xe90>
   26202:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   26204:	3631      	adds	r6, #49	; 0x31
   26206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26208:	4647      	mov	r7, r8
   2620a:	1c6c      	adds	r4, r5, #1
   2620c:	702e      	strb	r6, [r5, #0]
   2620e:	4698      	mov	r8, r3
   26210:	e6c9      	b.n	25fa6 <_dtoa_r+0x9ee>
   26212:	2800      	cmp	r0, #0
   26214:	d103      	bne.n	2621e <_dtoa_r+0xc66>
   26216:	07f3      	lsls	r3, r6, #31
   26218:	d501      	bpl.n	2621e <_dtoa_r+0xc66>
   2621a:	e6b5      	b.n	25f88 <_dtoa_r+0x9d0>
   2621c:	001c      	movs	r4, r3
   2621e:	1e63      	subs	r3, r4, #1
   26220:	781a      	ldrb	r2, [r3, #0]
   26222:	2a30      	cmp	r2, #48	; 0x30
   26224:	d0fa      	beq.n	2621c <_dtoa_r+0xc64>
   26226:	e6be      	b.n	25fa6 <_dtoa_r+0x9ee>
   26228:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2622a:	4699      	mov	r9, r3
   2622c:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2622e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   26230:	e435      	b.n	25a9e <_dtoa_r+0x4e6>
   26232:	2501      	movs	r5, #1
   26234:	f7ff fab4 	bl	257a0 <_dtoa_r+0x1e8>
   26238:	9b03      	ldr	r3, [sp, #12]
   2623a:	2b00      	cmp	r3, #0
   2623c:	d100      	bne.n	26240 <_dtoa_r+0xc88>
   2623e:	e0d4      	b.n	263ea <_dtoa_r+0xe32>
   26240:	9810      	ldr	r0, [sp, #64]	; 0x40
   26242:	9911      	ldr	r1, [sp, #68]	; 0x44
   26244:	425c      	negs	r4, r3
   26246:	230f      	movs	r3, #15
   26248:	4a26      	ldr	r2, [pc, #152]	; (262e4 <_dtoa_r+0xd2c>)
   2624a:	4023      	ands	r3, r4
   2624c:	00db      	lsls	r3, r3, #3
   2624e:	18d3      	adds	r3, r2, r3
   26250:	681a      	ldr	r2, [r3, #0]
   26252:	685b      	ldr	r3, [r3, #4]
   26254:	f7fc fd76 	bl	22d44 <__aeabi_dmul>
   26258:	1124      	asrs	r4, r4, #4
   2625a:	0006      	movs	r6, r0
   2625c:	000f      	movs	r7, r1
   2625e:	2c00      	cmp	r4, #0
   26260:	d100      	bne.n	26264 <_dtoa_r+0xcac>
   26262:	e149      	b.n	264f8 <_dtoa_r+0xf40>
   26264:	2302      	movs	r3, #2
   26266:	4698      	mov	r8, r3
   26268:	4d1f      	ldr	r5, [pc, #124]	; (262e8 <_dtoa_r+0xd30>)
   2626a:	2301      	movs	r3, #1
   2626c:	4223      	tst	r3, r4
   2626e:	d009      	beq.n	26284 <_dtoa_r+0xccc>
   26270:	469c      	mov	ip, r3
   26272:	682a      	ldr	r2, [r5, #0]
   26274:	686b      	ldr	r3, [r5, #4]
   26276:	0030      	movs	r0, r6
   26278:	0039      	movs	r1, r7
   2627a:	44e0      	add	r8, ip
   2627c:	f7fc fd62 	bl	22d44 <__aeabi_dmul>
   26280:	0006      	movs	r6, r0
   26282:	000f      	movs	r7, r1
   26284:	1064      	asrs	r4, r4, #1
   26286:	3508      	adds	r5, #8
   26288:	2c00      	cmp	r4, #0
   2628a:	d1ee      	bne.n	2626a <_dtoa_r+0xcb2>
   2628c:	f7ff fae4 	bl	25858 <_dtoa_r+0x2a0>
   26290:	9b03      	ldr	r3, [sp, #12]
   26292:	2730      	movs	r7, #48	; 0x30
   26294:	3301      	adds	r3, #1
   26296:	9303      	str	r3, [sp, #12]
   26298:	2330      	movs	r3, #48	; 0x30
   2629a:	702b      	strb	r3, [r5, #0]
   2629c:	e4ac      	b.n	25bf8 <_dtoa_r+0x640>
   2629e:	6859      	ldr	r1, [r3, #4]
   262a0:	4650      	mov	r0, sl
   262a2:	f000 fc7d 	bl	26ba0 <_Balloc>
   262a6:	4643      	mov	r3, r8
   262a8:	4641      	mov	r1, r8
   262aa:	0004      	movs	r4, r0
   262ac:	691b      	ldr	r3, [r3, #16]
   262ae:	310c      	adds	r1, #12
   262b0:	1c9a      	adds	r2, r3, #2
   262b2:	0092      	lsls	r2, r2, #2
   262b4:	300c      	adds	r0, #12
   262b6:	f7fd fcaf 	bl	23c18 <memcpy>
   262ba:	2201      	movs	r2, #1
   262bc:	0021      	movs	r1, r4
   262be:	4650      	mov	r0, sl
   262c0:	f000 fe42 	bl	26f48 <__lshift>
   262c4:	900c      	str	r0, [sp, #48]	; 0x30
   262c6:	e599      	b.n	25dfc <_dtoa_r+0x844>
   262c8:	2300      	movs	r3, #0
   262ca:	4699      	mov	r9, r3
   262cc:	4698      	mov	r8, r3
   262ce:	e70c      	b.n	260ea <_dtoa_r+0xb32>
   262d0:	7ff00000 	.word	0x7ff00000
   262d4:	40140000 	.word	0x40140000
   262d8:	00000433 	.word	0x00000433
   262dc:	401c0000 	.word	0x401c0000
   262e0:	fcc00000 	.word	0xfcc00000
   262e4:	00029e88 	.word	0x00029e88
   262e8:	00029e60 	.word	0x00029e60
   262ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   262ee:	498f      	ldr	r1, [pc, #572]	; (2652c <_dtoa_r+0xf74>)
   262f0:	3b01      	subs	r3, #1
   262f2:	00db      	lsls	r3, r3, #3
   262f4:	18c9      	adds	r1, r1, r3
   262f6:	6808      	ldr	r0, [r1, #0]
   262f8:	6849      	ldr	r1, [r1, #4]
   262fa:	9a08      	ldr	r2, [sp, #32]
   262fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   262fe:	f7fc fd21 	bl	22d44 <__aeabi_dmul>
   26302:	9014      	str	r0, [sp, #80]	; 0x50
   26304:	9115      	str	r1, [sp, #84]	; 0x54
   26306:	0039      	movs	r1, r7
   26308:	0030      	movs	r0, r6
   2630a:	f7fd fad1 	bl	238b0 <__aeabi_d2iz>
   2630e:	0005      	movs	r5, r0
   26310:	f7fd fb02 	bl	23918 <__aeabi_i2d>
   26314:	0002      	movs	r2, r0
   26316:	000b      	movs	r3, r1
   26318:	0030      	movs	r0, r6
   2631a:	0039      	movs	r1, r7
   2631c:	f7fc ff92 	bl	23244 <__aeabi_dsub>
   26320:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26322:	9008      	str	r0, [sp, #32]
   26324:	9109      	str	r1, [sp, #36]	; 0x24
   26326:	990a      	ldr	r1, [sp, #40]	; 0x28
   26328:	001a      	movs	r2, r3
   2632a:	468c      	mov	ip, r1
   2632c:	3530      	adds	r5, #48	; 0x30
   2632e:	4462      	add	r2, ip
   26330:	1c4c      	adds	r4, r1, #1
   26332:	700d      	strb	r5, [r1, #0]
   26334:	4690      	mov	r8, r2
   26336:	2b01      	cmp	r3, #1
   26338:	d01b      	beq.n	26372 <_dtoa_r+0xdba>
   2633a:	9808      	ldr	r0, [sp, #32]
   2633c:	9909      	ldr	r1, [sp, #36]	; 0x24
   2633e:	0025      	movs	r5, r4
   26340:	2200      	movs	r2, #0
   26342:	4b7b      	ldr	r3, [pc, #492]	; (26530 <_dtoa_r+0xf78>)
   26344:	f7fc fcfe 	bl	22d44 <__aeabi_dmul>
   26348:	000f      	movs	r7, r1
   2634a:	0006      	movs	r6, r0
   2634c:	f7fd fab0 	bl	238b0 <__aeabi_d2iz>
   26350:	0004      	movs	r4, r0
   26352:	f7fd fae1 	bl	23918 <__aeabi_i2d>
   26356:	3430      	adds	r4, #48	; 0x30
   26358:	0002      	movs	r2, r0
   2635a:	000b      	movs	r3, r1
   2635c:	0030      	movs	r0, r6
   2635e:	0039      	movs	r1, r7
   26360:	f7fc ff70 	bl	23244 <__aeabi_dsub>
   26364:	702c      	strb	r4, [r5, #0]
   26366:	3501      	adds	r5, #1
   26368:	45a8      	cmp	r8, r5
   2636a:	d1e9      	bne.n	26340 <_dtoa_r+0xd88>
   2636c:	4644      	mov	r4, r8
   2636e:	9008      	str	r0, [sp, #32]
   26370:	9109      	str	r1, [sp, #36]	; 0x24
   26372:	9814      	ldr	r0, [sp, #80]	; 0x50
   26374:	9915      	ldr	r1, [sp, #84]	; 0x54
   26376:	2200      	movs	r2, #0
   26378:	4b6e      	ldr	r3, [pc, #440]	; (26534 <_dtoa_r+0xf7c>)
   2637a:	f7fb fd9f 	bl	21ebc <__aeabi_dadd>
   2637e:	9a08      	ldr	r2, [sp, #32]
   26380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26382:	f7fa fda7 	bl	20ed4 <__aeabi_dcmplt>
   26386:	2800      	cmp	r0, #0
   26388:	d067      	beq.n	2645a <_dtoa_r+0xea2>
   2638a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2638c:	1e65      	subs	r5, r4, #1
   2638e:	9303      	str	r3, [sp, #12]
   26390:	782f      	ldrb	r7, [r5, #0]
   26392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26394:	e42e      	b.n	25bf4 <_dtoa_r+0x63c>
   26396:	4643      	mov	r3, r8
   26398:	46b3      	mov	fp, r6
   2639a:	930c      	str	r3, [sp, #48]	; 0x30
   2639c:	9e04      	ldr	r6, [sp, #16]
   2639e:	9b06      	ldr	r3, [sp, #24]
   263a0:	46a8      	mov	r8, r5
   263a2:	4699      	mov	r9, r3
   263a4:	4655      	mov	r5, sl
   263a6:	46ba      	mov	sl, r7
   263a8:	2e39      	cmp	r6, #57	; 0x39
   263aa:	d04d      	beq.n	26448 <_dtoa_r+0xe90>
   263ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   263ae:	3601      	adds	r6, #1
   263b0:	4647      	mov	r7, r8
   263b2:	1c6c      	adds	r4, r5, #1
   263b4:	702e      	strb	r6, [r5, #0]
   263b6:	4698      	mov	r8, r3
   263b8:	e5f5      	b.n	25fa6 <_dtoa_r+0x9ee>
   263ba:	4642      	mov	r2, r8
   263bc:	9b06      	ldr	r3, [sp, #24]
   263be:	46b3      	mov	fp, r6
   263c0:	46ba      	mov	sl, r7
   263c2:	9e04      	ldr	r6, [sp, #16]
   263c4:	4699      	mov	r9, r3
   263c6:	002f      	movs	r7, r5
   263c8:	4690      	mov	r8, r2
   263ca:	e5d1      	b.n	25f70 <_dtoa_r+0x9b8>
   263cc:	9b06      	ldr	r3, [sp, #24]
   263ce:	9a07      	ldr	r2, [sp, #28]
   263d0:	1a9b      	subs	r3, r3, r2
   263d2:	9308      	str	r3, [sp, #32]
   263d4:	2300      	movs	r3, #0
   263d6:	e427      	b.n	25c28 <_dtoa_r+0x670>
   263d8:	2401      	movs	r4, #1
   263da:	e5c5      	b.n	25f68 <_dtoa_r+0x9b0>
   263dc:	2336      	movs	r3, #54	; 0x36
   263de:	9a16      	ldr	r2, [sp, #88]	; 0x58
   263e0:	464c      	mov	r4, r9
   263e2:	1a9b      	subs	r3, r3, r2
   263e4:	9a06      	ldr	r2, [sp, #24]
   263e6:	9208      	str	r2, [sp, #32]
   263e8:	e41e      	b.n	25c28 <_dtoa_r+0x670>
   263ea:	2302      	movs	r3, #2
   263ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
   263ee:	9f11      	ldr	r7, [sp, #68]	; 0x44
   263f0:	4698      	mov	r8, r3
   263f2:	f7ff fa31 	bl	25858 <_dtoa_r+0x2a0>
   263f6:	9b07      	ldr	r3, [sp, #28]
   263f8:	2b00      	cmp	r3, #0
   263fa:	d100      	bne.n	263fe <_dtoa_r+0xe46>
   263fc:	e68e      	b.n	2611c <_dtoa_r+0xb64>
   263fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   26400:	2c00      	cmp	r4, #0
   26402:	dc00      	bgt.n	26406 <_dtoa_r+0xe4e>
   26404:	e712      	b.n	2622c <_dtoa_r+0xc74>
   26406:	9b03      	ldr	r3, [sp, #12]
   26408:	2200      	movs	r2, #0
   2640a:	3b01      	subs	r3, #1
   2640c:	9313      	str	r3, [sp, #76]	; 0x4c
   2640e:	0030      	movs	r0, r6
   26410:	4b47      	ldr	r3, [pc, #284]	; (26530 <_dtoa_r+0xf78>)
   26412:	0039      	movs	r1, r7
   26414:	f7fc fc96 	bl	22d44 <__aeabi_dmul>
   26418:	0006      	movs	r6, r0
   2641a:	4640      	mov	r0, r8
   2641c:	000f      	movs	r7, r1
   2641e:	3001      	adds	r0, #1
   26420:	f7fd fa7a 	bl	23918 <__aeabi_i2d>
   26424:	0032      	movs	r2, r6
   26426:	003b      	movs	r3, r7
   26428:	f7fc fc8c 	bl	22d44 <__aeabi_dmul>
   2642c:	2200      	movs	r2, #0
   2642e:	4b42      	ldr	r3, [pc, #264]	; (26538 <_dtoa_r+0xf80>)
   26430:	f7fb fd44 	bl	21ebc <__aeabi_dadd>
   26434:	4a41      	ldr	r2, [pc, #260]	; (2653c <_dtoa_r+0xf84>)
   26436:	000b      	movs	r3, r1
   26438:	4694      	mov	ip, r2
   2643a:	4463      	add	r3, ip
   2643c:	9008      	str	r0, [sp, #32]
   2643e:	9109      	str	r1, [sp, #36]	; 0x24
   26440:	9412      	str	r4, [sp, #72]	; 0x48
   26442:	9309      	str	r3, [sp, #36]	; 0x24
   26444:	f7ff fa30 	bl	258a8 <_dtoa_r+0x2f0>
   26448:	2339      	movs	r3, #57	; 0x39
   2644a:	702b      	strb	r3, [r5, #0]
   2644c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2644e:	4647      	mov	r7, r8
   26450:	1c6c      	adds	r4, r5, #1
   26452:	4698      	mov	r8, r3
   26454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26456:	2339      	movs	r3, #57	; 0x39
   26458:	e5a1      	b.n	25f9e <_dtoa_r+0x9e6>
   2645a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2645c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2645e:	2000      	movs	r0, #0
   26460:	4934      	ldr	r1, [pc, #208]	; (26534 <_dtoa_r+0xf7c>)
   26462:	f7fc feef 	bl	23244 <__aeabi_dsub>
   26466:	9a08      	ldr	r2, [sp, #32]
   26468:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2646a:	f7fa fd47 	bl	20efc <__aeabi_dcmpgt>
   2646e:	2800      	cmp	r0, #0
   26470:	d101      	bne.n	26476 <_dtoa_r+0xebe>
   26472:	e6db      	b.n	2622c <_dtoa_r+0xc74>
   26474:	001c      	movs	r4, r3
   26476:	1e63      	subs	r3, r4, #1
   26478:	781a      	ldrb	r2, [r3, #0]
   2647a:	2a30      	cmp	r2, #48	; 0x30
   2647c:	d0fa      	beq.n	26474 <_dtoa_r+0xebc>
   2647e:	f7ff fac8 	bl	25a12 <_dtoa_r+0x45a>
   26482:	4643      	mov	r3, r8
   26484:	46b3      	mov	fp, r6
   26486:	930c      	str	r3, [sp, #48]	; 0x30
   26488:	9e04      	ldr	r6, [sp, #16]
   2648a:	9b06      	ldr	r3, [sp, #24]
   2648c:	46a8      	mov	r8, r5
   2648e:	4699      	mov	r9, r3
   26490:	4655      	mov	r5, sl
   26492:	46ba      	mov	sl, r7
   26494:	2e39      	cmp	r6, #57	; 0x39
   26496:	d0d7      	beq.n	26448 <_dtoa_r+0xe90>
   26498:	2c00      	cmp	r4, #0
   2649a:	dd00      	ble.n	2649e <_dtoa_r+0xee6>
   2649c:	e6b1      	b.n	26202 <_dtoa_r+0xc4a>
   2649e:	e6b2      	b.n	26206 <_dtoa_r+0xc4e>
   264a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   264a2:	464d      	mov	r5, r9
   264a4:	9203      	str	r2, [sp, #12]
   264a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   264a8:	f7ff fba4 	bl	25bf4 <_dtoa_r+0x63c>
   264ac:	2800      	cmp	r0, #0
   264ae:	d000      	beq.n	264b2 <_dtoa_r+0xefa>
   264b0:	e6a9      	b.n	26206 <_dtoa_r+0xc4e>
   264b2:	07f3      	lsls	r3, r6, #31
   264b4:	d400      	bmi.n	264b8 <_dtoa_r+0xf00>
   264b6:	e6a6      	b.n	26206 <_dtoa_r+0xc4e>
   264b8:	e6a0      	b.n	261fc <_dtoa_r+0xc44>
   264ba:	2300      	movs	r3, #0
   264bc:	4641      	mov	r1, r8
   264be:	220a      	movs	r2, #10
   264c0:	4650      	mov	r0, sl
   264c2:	f000 fb9f 	bl	26c04 <__multadd>
   264c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   264c8:	4680      	mov	r8, r0
   264ca:	2b00      	cmp	r3, #0
   264cc:	dd01      	ble.n	264d2 <_dtoa_r+0xf1a>
   264ce:	9307      	str	r3, [sp, #28]
   264d0:	e486      	b.n	25de0 <_dtoa_r+0x828>
   264d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   264d4:	2b02      	cmp	r3, #2
   264d6:	dc1f      	bgt.n	26518 <_dtoa_r+0xf60>
   264d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   264da:	9307      	str	r3, [sp, #28]
   264dc:	e480      	b.n	25de0 <_dtoa_r+0x828>
   264de:	9b22      	ldr	r3, [sp, #136]	; 0x88
   264e0:	2b02      	cmp	r3, #2
   264e2:	dc19      	bgt.n	26518 <_dtoa_r+0xf60>
   264e4:	4649      	mov	r1, r9
   264e6:	f7fe ffbd 	bl	25464 <quorem>
   264ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   264ec:	3030      	adds	r0, #48	; 0x30
   264ee:	7018      	strb	r0, [r3, #0]
   264f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   264f2:	0006      	movs	r6, r0
   264f4:	9307      	str	r3, [sp, #28]
   264f6:	e533      	b.n	25f60 <_dtoa_r+0x9a8>
   264f8:	2302      	movs	r3, #2
   264fa:	4698      	mov	r8, r3
   264fc:	f7ff f9ac 	bl	25858 <_dtoa_r+0x2a0>
   26500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   26502:	9c14      	ldr	r4, [sp, #80]	; 0x50
   26504:	9303      	str	r3, [sp, #12]
   26506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26508:	001d      	movs	r5, r3
   2650a:	f7ff fb73 	bl	25bf4 <_dtoa_r+0x63c>
   2650e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   26510:	9c14      	ldr	r4, [sp, #80]	; 0x50
   26512:	9303      	str	r3, [sp, #12]
   26514:	f7ff fa7f 	bl	25a16 <_dtoa_r+0x45e>
   26518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2651a:	9307      	str	r3, [sp, #28]
   2651c:	e5d6      	b.n	260cc <_dtoa_r+0xb14>
   2651e:	2b04      	cmp	r3, #4
   26520:	d100      	bne.n	26524 <_dtoa_r+0xf6c>
   26522:	e43f      	b.n	25da4 <_dtoa_r+0x7ec>
   26524:	233c      	movs	r3, #60	; 0x3c
   26526:	1a18      	subs	r0, r3, r0
   26528:	e4d7      	b.n	25eda <_dtoa_r+0x922>
   2652a:	46c0      	nop			; (mov r8, r8)
   2652c:	00029e88 	.word	0x00029e88
   26530:	40240000 	.word	0x40240000
   26534:	3fe00000 	.word	0x3fe00000
   26538:	401c0000 	.word	0x401c0000
   2653c:	fcc00000 	.word	0xfcc00000

00026540 <__libc_fini_array>:
   26540:	b570      	push	{r4, r5, r6, lr}
   26542:	4b09      	ldr	r3, [pc, #36]	; (26568 <__libc_fini_array+0x28>)
   26544:	4c09      	ldr	r4, [pc, #36]	; (2656c <__libc_fini_array+0x2c>)
   26546:	1ae4      	subs	r4, r4, r3
   26548:	10a4      	asrs	r4, r4, #2
   2654a:	d009      	beq.n	26560 <__libc_fini_array+0x20>
   2654c:	4a08      	ldr	r2, [pc, #32]	; (26570 <__libc_fini_array+0x30>)
   2654e:	18a5      	adds	r5, r4, r2
   26550:	00ad      	lsls	r5, r5, #2
   26552:	18ed      	adds	r5, r5, r3
   26554:	682b      	ldr	r3, [r5, #0]
   26556:	3c01      	subs	r4, #1
   26558:	4798      	blx	r3
   2655a:	3d04      	subs	r5, #4
   2655c:	2c00      	cmp	r4, #0
   2655e:	d1f9      	bne.n	26554 <__libc_fini_array+0x14>
   26560:	f003 fd90 	bl	2a084 <_fini>
   26564:	bd70      	pop	{r4, r5, r6, pc}
   26566:	46c0      	nop			; (mov r8, r8)
   26568:	0002a090 	.word	0x0002a090
   2656c:	0002a094 	.word	0x0002a094
   26570:	3fffffff 	.word	0x3fffffff

00026574 <_localeconv_r>:
   26574:	4b04      	ldr	r3, [pc, #16]	; (26588 <_localeconv_r+0x14>)
   26576:	681b      	ldr	r3, [r3, #0]
   26578:	6b58      	ldr	r0, [r3, #52]	; 0x34
   2657a:	2800      	cmp	r0, #0
   2657c:	d001      	beq.n	26582 <_localeconv_r+0xe>
   2657e:	30f0      	adds	r0, #240	; 0xf0
   26580:	4770      	bx	lr
   26582:	4802      	ldr	r0, [pc, #8]	; (2658c <_localeconv_r+0x18>)
   26584:	e7fb      	b.n	2657e <_localeconv_r+0xa>
   26586:	46c0      	nop			; (mov r8, r8)
   26588:	200002a4 	.word	0x200002a4
   2658c:	20000ae4 	.word	0x20000ae4

00026590 <__retarget_lock_acquire_recursive>:
   26590:	4770      	bx	lr
   26592:	46c0      	nop			; (mov r8, r8)

00026594 <__retarget_lock_release_recursive>:
   26594:	4770      	bx	lr
   26596:	46c0      	nop			; (mov r8, r8)

00026598 <_malloc_r>:
   26598:	b5f0      	push	{r4, r5, r6, r7, lr}
   2659a:	4657      	mov	r7, sl
   2659c:	4645      	mov	r5, r8
   2659e:	46de      	mov	lr, fp
   265a0:	464e      	mov	r6, r9
   265a2:	b5e0      	push	{r5, r6, r7, lr}
   265a4:	000d      	movs	r5, r1
   265a6:	350b      	adds	r5, #11
   265a8:	b083      	sub	sp, #12
   265aa:	0007      	movs	r7, r0
   265ac:	2d16      	cmp	r5, #22
   265ae:	d800      	bhi.n	265b2 <_malloc_r+0x1a>
   265b0:	e09f      	b.n	266f2 <_malloc_r+0x15a>
   265b2:	2307      	movs	r3, #7
   265b4:	439d      	bics	r5, r3
   265b6:	d500      	bpl.n	265ba <_malloc_r+0x22>
   265b8:	e0c4      	b.n	26744 <_malloc_r+0x1ac>
   265ba:	42a9      	cmp	r1, r5
   265bc:	d900      	bls.n	265c0 <_malloc_r+0x28>
   265be:	e0c1      	b.n	26744 <_malloc_r+0x1ac>
   265c0:	f000 fade 	bl	26b80 <__malloc_lock>
   265c4:	23f8      	movs	r3, #248	; 0xf8
   265c6:	33ff      	adds	r3, #255	; 0xff
   265c8:	429d      	cmp	r5, r3
   265ca:	d800      	bhi.n	265ce <_malloc_r+0x36>
   265cc:	e28f      	b.n	26aee <_malloc_r+0x556>
   265ce:	0a68      	lsrs	r0, r5, #9
   265d0:	d100      	bne.n	265d4 <_malloc_r+0x3c>
   265d2:	e0bb      	b.n	2674c <_malloc_r+0x1b4>
   265d4:	2804      	cmp	r0, #4
   265d6:	d900      	bls.n	265da <_malloc_r+0x42>
   265d8:	e162      	b.n	268a0 <_malloc_r+0x308>
   265da:	2338      	movs	r3, #56	; 0x38
   265dc:	4698      	mov	r8, r3
   265de:	09a8      	lsrs	r0, r5, #6
   265e0:	4480      	add	r8, r0
   265e2:	3039      	adds	r0, #57	; 0x39
   265e4:	00c1      	lsls	r1, r0, #3
   265e6:	4ed2      	ldr	r6, [pc, #840]	; (26930 <_malloc_r+0x398>)
   265e8:	1871      	adds	r1, r6, r1
   265ea:	3908      	subs	r1, #8
   265ec:	68cc      	ldr	r4, [r1, #12]
   265ee:	42a1      	cmp	r1, r4
   265f0:	d019      	beq.n	26626 <_malloc_r+0x8e>
   265f2:	2303      	movs	r3, #3
   265f4:	6862      	ldr	r2, [r4, #4]
   265f6:	439a      	bics	r2, r3
   265f8:	0013      	movs	r3, r2
   265fa:	1b52      	subs	r2, r2, r5
   265fc:	2a0f      	cmp	r2, #15
   265fe:	dd00      	ble.n	26602 <_malloc_r+0x6a>
   26600:	e0aa      	b.n	26758 <_malloc_r+0x1c0>
   26602:	2a00      	cmp	r2, #0
   26604:	db00      	blt.n	26608 <_malloc_r+0x70>
   26606:	e088      	b.n	2671a <_malloc_r+0x182>
   26608:	2303      	movs	r3, #3
   2660a:	469c      	mov	ip, r3
   2660c:	e008      	b.n	26620 <_malloc_r+0x88>
   2660e:	4662      	mov	r2, ip
   26610:	6863      	ldr	r3, [r4, #4]
   26612:	4393      	bics	r3, r2
   26614:	1b5a      	subs	r2, r3, r5
   26616:	2a0f      	cmp	r2, #15
   26618:	dd00      	ble.n	2661c <_malloc_r+0x84>
   2661a:	e09d      	b.n	26758 <_malloc_r+0x1c0>
   2661c:	2a00      	cmp	r2, #0
   2661e:	da7c      	bge.n	2671a <_malloc_r+0x182>
   26620:	68e4      	ldr	r4, [r4, #12]
   26622:	42a1      	cmp	r1, r4
   26624:	d1f3      	bne.n	2660e <_malloc_r+0x76>
   26626:	0032      	movs	r2, r6
   26628:	6934      	ldr	r4, [r6, #16]
   2662a:	3208      	adds	r2, #8
   2662c:	4294      	cmp	r4, r2
   2662e:	d100      	bne.n	26632 <_malloc_r+0x9a>
   26630:	e190      	b.n	26954 <_malloc_r+0x3bc>
   26632:	2303      	movs	r3, #3
   26634:	6861      	ldr	r1, [r4, #4]
   26636:	4399      	bics	r1, r3
   26638:	4689      	mov	r9, r1
   2663a:	1b49      	subs	r1, r1, r5
   2663c:	290f      	cmp	r1, #15
   2663e:	dd00      	ble.n	26642 <_malloc_r+0xaa>
   26640:	e162      	b.n	26908 <_malloc_r+0x370>
   26642:	6172      	str	r2, [r6, #20]
   26644:	6132      	str	r2, [r6, #16]
   26646:	2900      	cmp	r1, #0
   26648:	db00      	blt.n	2664c <_malloc_r+0xb4>
   2664a:	e087      	b.n	2675c <_malloc_r+0x1c4>
   2664c:	4ab9      	ldr	r2, [pc, #740]	; (26934 <_malloc_r+0x39c>)
   2664e:	464b      	mov	r3, r9
   26650:	4591      	cmp	r9, r2
   26652:	d900      	bls.n	26656 <_malloc_r+0xbe>
   26654:	e130      	b.n	268b8 <_malloc_r+0x320>
   26656:	08db      	lsrs	r3, r3, #3
   26658:	3aff      	subs	r2, #255	; 0xff
   2665a:	1099      	asrs	r1, r3, #2
   2665c:	3aff      	subs	r2, #255	; 0xff
   2665e:	408a      	lsls	r2, r1
   26660:	00db      	lsls	r3, r3, #3
   26662:	6871      	ldr	r1, [r6, #4]
   26664:	199b      	adds	r3, r3, r6
   26666:	430a      	orrs	r2, r1
   26668:	6899      	ldr	r1, [r3, #8]
   2666a:	6072      	str	r2, [r6, #4]
   2666c:	60e3      	str	r3, [r4, #12]
   2666e:	60a1      	str	r1, [r4, #8]
   26670:	609c      	str	r4, [r3, #8]
   26672:	0013      	movs	r3, r2
   26674:	60cc      	str	r4, [r1, #12]
   26676:	2101      	movs	r1, #1
   26678:	1082      	asrs	r2, r0, #2
   2667a:	4091      	lsls	r1, r2
   2667c:	4299      	cmp	r1, r3
   2667e:	d86f      	bhi.n	26760 <_malloc_r+0x1c8>
   26680:	420b      	tst	r3, r1
   26682:	d105      	bne.n	26690 <_malloc_r+0xf8>
   26684:	2203      	movs	r2, #3
   26686:	4390      	bics	r0, r2
   26688:	0049      	lsls	r1, r1, #1
   2668a:	3004      	adds	r0, #4
   2668c:	420b      	tst	r3, r1
   2668e:	d0fb      	beq.n	26688 <_malloc_r+0xf0>
   26690:	2303      	movs	r3, #3
   26692:	4698      	mov	r8, r3
   26694:	00c3      	lsls	r3, r0, #3
   26696:	4699      	mov	r9, r3
   26698:	44b1      	add	r9, r6
   2669a:	46cc      	mov	ip, r9
   2669c:	4682      	mov	sl, r0
   2669e:	4663      	mov	r3, ip
   266a0:	68dc      	ldr	r4, [r3, #12]
   266a2:	45a4      	cmp	ip, r4
   266a4:	d107      	bne.n	266b6 <_malloc_r+0x11e>
   266a6:	e157      	b.n	26958 <_malloc_r+0x3c0>
   266a8:	2a00      	cmp	r2, #0
   266aa:	db00      	blt.n	266ae <_malloc_r+0x116>
   266ac:	e166      	b.n	2697c <_malloc_r+0x3e4>
   266ae:	68e4      	ldr	r4, [r4, #12]
   266b0:	45a4      	cmp	ip, r4
   266b2:	d100      	bne.n	266b6 <_malloc_r+0x11e>
   266b4:	e150      	b.n	26958 <_malloc_r+0x3c0>
   266b6:	4642      	mov	r2, r8
   266b8:	6863      	ldr	r3, [r4, #4]
   266ba:	4393      	bics	r3, r2
   266bc:	1b5a      	subs	r2, r3, r5
   266be:	2a0f      	cmp	r2, #15
   266c0:	ddf2      	ble.n	266a8 <_malloc_r+0x110>
   266c2:	2001      	movs	r0, #1
   266c4:	4680      	mov	r8, r0
   266c6:	1961      	adds	r1, r4, r5
   266c8:	4305      	orrs	r5, r0
   266ca:	6065      	str	r5, [r4, #4]
   266cc:	68a0      	ldr	r0, [r4, #8]
   266ce:	68e5      	ldr	r5, [r4, #12]
   266d0:	3608      	adds	r6, #8
   266d2:	60c5      	str	r5, [r0, #12]
   266d4:	60a8      	str	r0, [r5, #8]
   266d6:	4640      	mov	r0, r8
   266d8:	60f1      	str	r1, [r6, #12]
   266da:	60b1      	str	r1, [r6, #8]
   266dc:	4310      	orrs	r0, r2
   266de:	6048      	str	r0, [r1, #4]
   266e0:	60ce      	str	r6, [r1, #12]
   266e2:	608e      	str	r6, [r1, #8]
   266e4:	0038      	movs	r0, r7
   266e6:	50e2      	str	r2, [r4, r3]
   266e8:	f000 fa52 	bl	26b90 <__malloc_unlock>
   266ec:	0020      	movs	r0, r4
   266ee:	3008      	adds	r0, #8
   266f0:	e021      	b.n	26736 <_malloc_r+0x19e>
   266f2:	2910      	cmp	r1, #16
   266f4:	d826      	bhi.n	26744 <_malloc_r+0x1ac>
   266f6:	0038      	movs	r0, r7
   266f8:	f000 fa42 	bl	26b80 <__malloc_lock>
   266fc:	2510      	movs	r5, #16
   266fe:	2318      	movs	r3, #24
   26700:	2002      	movs	r0, #2
   26702:	4e8b      	ldr	r6, [pc, #556]	; (26930 <_malloc_r+0x398>)
   26704:	18f3      	adds	r3, r6, r3
   26706:	001a      	movs	r2, r3
   26708:	685c      	ldr	r4, [r3, #4]
   2670a:	3a08      	subs	r2, #8
   2670c:	4294      	cmp	r4, r2
   2670e:	d100      	bne.n	26712 <_malloc_r+0x17a>
   26710:	e12e      	b.n	26970 <_malloc_r+0x3d8>
   26712:	2303      	movs	r3, #3
   26714:	6862      	ldr	r2, [r4, #4]
   26716:	439a      	bics	r2, r3
   26718:	0013      	movs	r3, r2
   2671a:	68e2      	ldr	r2, [r4, #12]
   2671c:	68a1      	ldr	r1, [r4, #8]
   2671e:	60ca      	str	r2, [r1, #12]
   26720:	6091      	str	r1, [r2, #8]
   26722:	2201      	movs	r2, #1
   26724:	18e3      	adds	r3, r4, r3
   26726:	6859      	ldr	r1, [r3, #4]
   26728:	0038      	movs	r0, r7
   2672a:	430a      	orrs	r2, r1
   2672c:	605a      	str	r2, [r3, #4]
   2672e:	f000 fa2f 	bl	26b90 <__malloc_unlock>
   26732:	0020      	movs	r0, r4
   26734:	3008      	adds	r0, #8
   26736:	b003      	add	sp, #12
   26738:	bc3c      	pop	{r2, r3, r4, r5}
   2673a:	4690      	mov	r8, r2
   2673c:	4699      	mov	r9, r3
   2673e:	46a2      	mov	sl, r4
   26740:	46ab      	mov	fp, r5
   26742:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26744:	230c      	movs	r3, #12
   26746:	2000      	movs	r0, #0
   26748:	603b      	str	r3, [r7, #0]
   2674a:	e7f4      	b.n	26736 <_malloc_r+0x19e>
   2674c:	2180      	movs	r1, #128	; 0x80
   2674e:	233f      	movs	r3, #63	; 0x3f
   26750:	2040      	movs	r0, #64	; 0x40
   26752:	0089      	lsls	r1, r1, #2
   26754:	4698      	mov	r8, r3
   26756:	e746      	b.n	265e6 <_malloc_r+0x4e>
   26758:	4640      	mov	r0, r8
   2675a:	e764      	b.n	26626 <_malloc_r+0x8e>
   2675c:	464b      	mov	r3, r9
   2675e:	e7e0      	b.n	26722 <_malloc_r+0x18a>
   26760:	2303      	movs	r3, #3
   26762:	68b4      	ldr	r4, [r6, #8]
   26764:	6862      	ldr	r2, [r4, #4]
   26766:	439a      	bics	r2, r3
   26768:	4690      	mov	r8, r2
   2676a:	42aa      	cmp	r2, r5
   2676c:	d303      	bcc.n	26776 <_malloc_r+0x1de>
   2676e:	1b53      	subs	r3, r2, r5
   26770:	2b0f      	cmp	r3, #15
   26772:	dd00      	ble.n	26776 <_malloc_r+0x1de>
   26774:	e086      	b.n	26884 <_malloc_r+0x2ec>
   26776:	0023      	movs	r3, r4
   26778:	4443      	add	r3, r8
   2677a:	4a6f      	ldr	r2, [pc, #444]	; (26938 <_malloc_r+0x3a0>)
   2677c:	9301      	str	r3, [sp, #4]
   2677e:	4b6f      	ldr	r3, [pc, #444]	; (2693c <_malloc_r+0x3a4>)
   26780:	4693      	mov	fp, r2
   26782:	681b      	ldr	r3, [r3, #0]
   26784:	6812      	ldr	r2, [r2, #0]
   26786:	18eb      	adds	r3, r5, r3
   26788:	3201      	adds	r2, #1
   2678a:	d100      	bne.n	2678e <_malloc_r+0x1f6>
   2678c:	e168      	b.n	26a60 <_malloc_r+0x4c8>
   2678e:	4a6c      	ldr	r2, [pc, #432]	; (26940 <_malloc_r+0x3a8>)
   26790:	4694      	mov	ip, r2
   26792:	4463      	add	r3, ip
   26794:	0b1b      	lsrs	r3, r3, #12
   26796:	031b      	lsls	r3, r3, #12
   26798:	9300      	str	r3, [sp, #0]
   2679a:	9900      	ldr	r1, [sp, #0]
   2679c:	0038      	movs	r0, r7
   2679e:	f000 fd47 	bl	27230 <_sbrk_r>
   267a2:	0003      	movs	r3, r0
   267a4:	4681      	mov	r9, r0
   267a6:	3301      	adds	r3, #1
   267a8:	d061      	beq.n	2686e <_malloc_r+0x2d6>
   267aa:	9b01      	ldr	r3, [sp, #4]
   267ac:	4283      	cmp	r3, r0
   267ae:	d900      	bls.n	267b2 <_malloc_r+0x21a>
   267b0:	e0ff      	b.n	269b2 <_malloc_r+0x41a>
   267b2:	4b64      	ldr	r3, [pc, #400]	; (26944 <_malloc_r+0x3ac>)
   267b4:	9a00      	ldr	r2, [sp, #0]
   267b6:	469a      	mov	sl, r3
   267b8:	681b      	ldr	r3, [r3, #0]
   267ba:	469c      	mov	ip, r3
   267bc:	4653      	mov	r3, sl
   267be:	4462      	add	r2, ip
   267c0:	601a      	str	r2, [r3, #0]
   267c2:	9b01      	ldr	r3, [sp, #4]
   267c4:	0011      	movs	r1, r2
   267c6:	4283      	cmp	r3, r0
   267c8:	d100      	bne.n	267cc <_malloc_r+0x234>
   267ca:	e155      	b.n	26a78 <_malloc_r+0x4e0>
   267cc:	465b      	mov	r3, fp
   267ce:	681b      	ldr	r3, [r3, #0]
   267d0:	3301      	adds	r3, #1
   267d2:	d100      	bne.n	267d6 <_malloc_r+0x23e>
   267d4:	e16c      	b.n	26ab0 <_malloc_r+0x518>
   267d6:	464b      	mov	r3, r9
   267d8:	9a01      	ldr	r2, [sp, #4]
   267da:	1a9b      	subs	r3, r3, r2
   267dc:	1859      	adds	r1, r3, r1
   267de:	4653      	mov	r3, sl
   267e0:	6019      	str	r1, [r3, #0]
   267e2:	2307      	movs	r3, #7
   267e4:	464a      	mov	r2, r9
   267e6:	4013      	ands	r3, r2
   267e8:	d100      	bne.n	267ec <_malloc_r+0x254>
   267ea:	e124      	b.n	26a36 <_malloc_r+0x49e>
   267ec:	2108      	movs	r1, #8
   267ee:	4689      	mov	r9, r1
   267f0:	4955      	ldr	r1, [pc, #340]	; (26948 <_malloc_r+0x3b0>)
   267f2:	1ad2      	subs	r2, r2, r3
   267f4:	4491      	add	r9, r2
   267f6:	1acb      	subs	r3, r1, r3
   267f8:	9a00      	ldr	r2, [sp, #0]
   267fa:	0038      	movs	r0, r7
   267fc:	444a      	add	r2, r9
   267fe:	0511      	lsls	r1, r2, #20
   26800:	0d09      	lsrs	r1, r1, #20
   26802:	1a5b      	subs	r3, r3, r1
   26804:	0019      	movs	r1, r3
   26806:	469b      	mov	fp, r3
   26808:	f000 fd12 	bl	27230 <_sbrk_r>
   2680c:	1c43      	adds	r3, r0, #1
   2680e:	d100      	bne.n	26812 <_malloc_r+0x27a>
   26810:	e142      	b.n	26a98 <_malloc_r+0x500>
   26812:	464b      	mov	r3, r9
   26814:	1ac0      	subs	r0, r0, r3
   26816:	2301      	movs	r3, #1
   26818:	4458      	add	r0, fp
   2681a:	4318      	orrs	r0, r3
   2681c:	4653      	mov	r3, sl
   2681e:	681b      	ldr	r3, [r3, #0]
   26820:	445b      	add	r3, fp
   26822:	0019      	movs	r1, r3
   26824:	4653      	mov	r3, sl
   26826:	6019      	str	r1, [r3, #0]
   26828:	464b      	mov	r3, r9
   2682a:	60b3      	str	r3, [r6, #8]
   2682c:	6058      	str	r0, [r3, #4]
   2682e:	42b4      	cmp	r4, r6
   26830:	d013      	beq.n	2685a <_malloc_r+0x2c2>
   26832:	4643      	mov	r3, r8
   26834:	2b0f      	cmp	r3, #15
   26836:	d800      	bhi.n	2683a <_malloc_r+0x2a2>
   26838:	e0e8      	b.n	26a0c <_malloc_r+0x474>
   2683a:	4643      	mov	r3, r8
   2683c:	2207      	movs	r2, #7
   2683e:	6860      	ldr	r0, [r4, #4]
   26840:	3b0c      	subs	r3, #12
   26842:	4393      	bics	r3, r2
   26844:	3a06      	subs	r2, #6
   26846:	4002      	ands	r2, r0
   26848:	2005      	movs	r0, #5
   2684a:	431a      	orrs	r2, r3
   2684c:	6062      	str	r2, [r4, #4]
   2684e:	18e2      	adds	r2, r4, r3
   26850:	6050      	str	r0, [r2, #4]
   26852:	6090      	str	r0, [r2, #8]
   26854:	2b0f      	cmp	r3, #15
   26856:	d900      	bls.n	2685a <_malloc_r+0x2c2>
   26858:	e122      	b.n	26aa0 <_malloc_r+0x508>
   2685a:	4b3c      	ldr	r3, [pc, #240]	; (2694c <_malloc_r+0x3b4>)
   2685c:	681a      	ldr	r2, [r3, #0]
   2685e:	4291      	cmp	r1, r2
   26860:	d900      	bls.n	26864 <_malloc_r+0x2cc>
   26862:	6019      	str	r1, [r3, #0]
   26864:	4b3a      	ldr	r3, [pc, #232]	; (26950 <_malloc_r+0x3b8>)
   26866:	681a      	ldr	r2, [r3, #0]
   26868:	4291      	cmp	r1, r2
   2686a:	d900      	bls.n	2686e <_malloc_r+0x2d6>
   2686c:	6019      	str	r1, [r3, #0]
   2686e:	2303      	movs	r3, #3
   26870:	68b4      	ldr	r4, [r6, #8]
   26872:	6862      	ldr	r2, [r4, #4]
   26874:	439a      	bics	r2, r3
   26876:	1b53      	subs	r3, r2, r5
   26878:	4295      	cmp	r5, r2
   2687a:	d900      	bls.n	2687e <_malloc_r+0x2e6>
   2687c:	e0c9      	b.n	26a12 <_malloc_r+0x47a>
   2687e:	2b0f      	cmp	r3, #15
   26880:	dc00      	bgt.n	26884 <_malloc_r+0x2ec>
   26882:	e0c6      	b.n	26a12 <_malloc_r+0x47a>
   26884:	2201      	movs	r2, #1
   26886:	0029      	movs	r1, r5
   26888:	4313      	orrs	r3, r2
   2688a:	4311      	orrs	r1, r2
   2688c:	1965      	adds	r5, r4, r5
   2688e:	6061      	str	r1, [r4, #4]
   26890:	0038      	movs	r0, r7
   26892:	60b5      	str	r5, [r6, #8]
   26894:	606b      	str	r3, [r5, #4]
   26896:	f000 f97b 	bl	26b90 <__malloc_unlock>
   2689a:	0020      	movs	r0, r4
   2689c:	3008      	adds	r0, #8
   2689e:	e74a      	b.n	26736 <_malloc_r+0x19e>
   268a0:	2814      	cmp	r0, #20
   268a2:	d97a      	bls.n	2699a <_malloc_r+0x402>
   268a4:	2854      	cmp	r0, #84	; 0x54
   268a6:	d900      	bls.n	268aa <_malloc_r+0x312>
   268a8:	e0ba      	b.n	26a20 <_malloc_r+0x488>
   268aa:	236e      	movs	r3, #110	; 0x6e
   268ac:	4698      	mov	r8, r3
   268ae:	0b28      	lsrs	r0, r5, #12
   268b0:	4480      	add	r8, r0
   268b2:	306f      	adds	r0, #111	; 0x6f
   268b4:	00c1      	lsls	r1, r0, #3
   268b6:	e696      	b.n	265e6 <_malloc_r+0x4e>
   268b8:	0a5a      	lsrs	r2, r3, #9
   268ba:	2a04      	cmp	r2, #4
   268bc:	d973      	bls.n	269a6 <_malloc_r+0x40e>
   268be:	2a14      	cmp	r2, #20
   268c0:	d900      	bls.n	268c4 <_malloc_r+0x32c>
   268c2:	e0d0      	b.n	26a66 <_malloc_r+0x4ce>
   268c4:	0011      	movs	r1, r2
   268c6:	325c      	adds	r2, #92	; 0x5c
   268c8:	315b      	adds	r1, #91	; 0x5b
   268ca:	00d2      	lsls	r2, r2, #3
   268cc:	2308      	movs	r3, #8
   268ce:	425b      	negs	r3, r3
   268d0:	469c      	mov	ip, r3
   268d2:	18b2      	adds	r2, r6, r2
   268d4:	4494      	add	ip, r2
   268d6:	4663      	mov	r3, ip
   268d8:	689a      	ldr	r2, [r3, #8]
   268da:	2303      	movs	r3, #3
   268dc:	4698      	mov	r8, r3
   268de:	4594      	cmp	ip, r2
   268e0:	d100      	bne.n	268e4 <_malloc_r+0x34c>
   268e2:	e0ab      	b.n	26a3c <_malloc_r+0x4a4>
   268e4:	4643      	mov	r3, r8
   268e6:	6851      	ldr	r1, [r2, #4]
   268e8:	4399      	bics	r1, r3
   268ea:	4589      	cmp	r9, r1
   268ec:	d300      	bcc.n	268f0 <_malloc_r+0x358>
   268ee:	e095      	b.n	26a1c <_malloc_r+0x484>
   268f0:	6892      	ldr	r2, [r2, #8]
   268f2:	4594      	cmp	ip, r2
   268f4:	d1f6      	bne.n	268e4 <_malloc_r+0x34c>
   268f6:	4663      	mov	r3, ip
   268f8:	68da      	ldr	r2, [r3, #12]
   268fa:	6873      	ldr	r3, [r6, #4]
   268fc:	4661      	mov	r1, ip
   268fe:	60e2      	str	r2, [r4, #12]
   26900:	60a1      	str	r1, [r4, #8]
   26902:	6094      	str	r4, [r2, #8]
   26904:	60cc      	str	r4, [r1, #12]
   26906:	e6b6      	b.n	26676 <_malloc_r+0xde>
   26908:	2301      	movs	r3, #1
   2690a:	1960      	adds	r0, r4, r5
   2690c:	431d      	orrs	r5, r3
   2690e:	6065      	str	r5, [r4, #4]
   26910:	6170      	str	r0, [r6, #20]
   26912:	6130      	str	r0, [r6, #16]
   26914:	60c2      	str	r2, [r0, #12]
   26916:	6082      	str	r2, [r0, #8]
   26918:	001a      	movs	r2, r3
   2691a:	464b      	mov	r3, r9
   2691c:	430a      	orrs	r2, r1
   2691e:	6042      	str	r2, [r0, #4]
   26920:	0038      	movs	r0, r7
   26922:	50e1      	str	r1, [r4, r3]
   26924:	f000 f934 	bl	26b90 <__malloc_unlock>
   26928:	0020      	movs	r0, r4
   2692a:	3008      	adds	r0, #8
   2692c:	e703      	b.n	26736 <_malloc_r+0x19e>
   2692e:	46c0      	nop			; (mov r8, r8)
   26930:	200006d4 	.word	0x200006d4
   26934:	000001ff 	.word	0x000001ff
   26938:	20000adc 	.word	0x20000adc
   2693c:	20000e84 	.word	0x20000e84
   26940:	0000100f 	.word	0x0000100f
   26944:	20000e54 	.word	0x20000e54
   26948:	00001008 	.word	0x00001008
   2694c:	20000e7c 	.word	0x20000e7c
   26950:	20000e80 	.word	0x20000e80
   26954:	6873      	ldr	r3, [r6, #4]
   26956:	e68e      	b.n	26676 <_malloc_r+0xde>
   26958:	2308      	movs	r3, #8
   2695a:	469b      	mov	fp, r3
   2695c:	3b07      	subs	r3, #7
   2695e:	44dc      	add	ip, fp
   26960:	469b      	mov	fp, r3
   26962:	44da      	add	sl, fp
   26964:	4643      	mov	r3, r8
   26966:	4652      	mov	r2, sl
   26968:	4213      	tst	r3, r2
   2696a:	d000      	beq.n	2696e <_malloc_r+0x3d6>
   2696c:	e697      	b.n	2669e <_malloc_r+0x106>
   2696e:	e037      	b.n	269e0 <_malloc_r+0x448>
   26970:	68dc      	ldr	r4, [r3, #12]
   26972:	3002      	adds	r0, #2
   26974:	42a3      	cmp	r3, r4
   26976:	d100      	bne.n	2697a <_malloc_r+0x3e2>
   26978:	e655      	b.n	26626 <_malloc_r+0x8e>
   2697a:	e6ca      	b.n	26712 <_malloc_r+0x17a>
   2697c:	2201      	movs	r2, #1
   2697e:	18e3      	adds	r3, r4, r3
   26980:	6859      	ldr	r1, [r3, #4]
   26982:	0038      	movs	r0, r7
   26984:	430a      	orrs	r2, r1
   26986:	605a      	str	r2, [r3, #4]
   26988:	68e3      	ldr	r3, [r4, #12]
   2698a:	68a2      	ldr	r2, [r4, #8]
   2698c:	60d3      	str	r3, [r2, #12]
   2698e:	609a      	str	r2, [r3, #8]
   26990:	f000 f8fe 	bl	26b90 <__malloc_unlock>
   26994:	0020      	movs	r0, r4
   26996:	3008      	adds	r0, #8
   26998:	e6cd      	b.n	26736 <_malloc_r+0x19e>
   2699a:	235b      	movs	r3, #91	; 0x5b
   2699c:	4698      	mov	r8, r3
   2699e:	4480      	add	r8, r0
   269a0:	305c      	adds	r0, #92	; 0x5c
   269a2:	00c1      	lsls	r1, r0, #3
   269a4:	e61f      	b.n	265e6 <_malloc_r+0x4e>
   269a6:	099a      	lsrs	r2, r3, #6
   269a8:	0011      	movs	r1, r2
   269aa:	3239      	adds	r2, #57	; 0x39
   269ac:	3138      	adds	r1, #56	; 0x38
   269ae:	00d2      	lsls	r2, r2, #3
   269b0:	e78c      	b.n	268cc <_malloc_r+0x334>
   269b2:	42b4      	cmp	r4, r6
   269b4:	d000      	beq.n	269b8 <_malloc_r+0x420>
   269b6:	e75a      	b.n	2686e <_malloc_r+0x2d6>
   269b8:	4b4f      	ldr	r3, [pc, #316]	; (26af8 <_malloc_r+0x560>)
   269ba:	9a00      	ldr	r2, [sp, #0]
   269bc:	469a      	mov	sl, r3
   269be:	681b      	ldr	r3, [r3, #0]
   269c0:	469c      	mov	ip, r3
   269c2:	4653      	mov	r3, sl
   269c4:	4462      	add	r2, ip
   269c6:	0011      	movs	r1, r2
   269c8:	601a      	str	r2, [r3, #0]
   269ca:	e6ff      	b.n	267cc <_malloc_r+0x234>
   269cc:	2308      	movs	r3, #8
   269ce:	425b      	negs	r3, r3
   269d0:	469c      	mov	ip, r3
   269d2:	44e1      	add	r9, ip
   269d4:	464b      	mov	r3, r9
   269d6:	689b      	ldr	r3, [r3, #8]
   269d8:	3801      	subs	r0, #1
   269da:	4599      	cmp	r9, r3
   269dc:	d000      	beq.n	269e0 <_malloc_r+0x448>
   269de:	e084      	b.n	26aea <_malloc_r+0x552>
   269e0:	4643      	mov	r3, r8
   269e2:	4203      	tst	r3, r0
   269e4:	d1f2      	bne.n	269cc <_malloc_r+0x434>
   269e6:	6873      	ldr	r3, [r6, #4]
   269e8:	438b      	bics	r3, r1
   269ea:	6073      	str	r3, [r6, #4]
   269ec:	0049      	lsls	r1, r1, #1
   269ee:	4299      	cmp	r1, r3
   269f0:	d900      	bls.n	269f4 <_malloc_r+0x45c>
   269f2:	e6b5      	b.n	26760 <_malloc_r+0x1c8>
   269f4:	2900      	cmp	r1, #0
   269f6:	d100      	bne.n	269fa <_malloc_r+0x462>
   269f8:	e6b2      	b.n	26760 <_malloc_r+0x1c8>
   269fa:	4650      	mov	r0, sl
   269fc:	420b      	tst	r3, r1
   269fe:	d000      	beq.n	26a02 <_malloc_r+0x46a>
   26a00:	e648      	b.n	26694 <_malloc_r+0xfc>
   26a02:	0049      	lsls	r1, r1, #1
   26a04:	3004      	adds	r0, #4
   26a06:	420b      	tst	r3, r1
   26a08:	d0fb      	beq.n	26a02 <_malloc_r+0x46a>
   26a0a:	e643      	b.n	26694 <_malloc_r+0xfc>
   26a0c:	2301      	movs	r3, #1
   26a0e:	464a      	mov	r2, r9
   26a10:	6053      	str	r3, [r2, #4]
   26a12:	0038      	movs	r0, r7
   26a14:	f000 f8bc 	bl	26b90 <__malloc_unlock>
   26a18:	2000      	movs	r0, #0
   26a1a:	e68c      	b.n	26736 <_malloc_r+0x19e>
   26a1c:	4694      	mov	ip, r2
   26a1e:	e76a      	b.n	268f6 <_malloc_r+0x35e>
   26a20:	23aa      	movs	r3, #170	; 0xaa
   26a22:	005b      	lsls	r3, r3, #1
   26a24:	4298      	cmp	r0, r3
   26a26:	d811      	bhi.n	26a4c <_malloc_r+0x4b4>
   26a28:	3bdd      	subs	r3, #221	; 0xdd
   26a2a:	4698      	mov	r8, r3
   26a2c:	0be8      	lsrs	r0, r5, #15
   26a2e:	4480      	add	r8, r0
   26a30:	3078      	adds	r0, #120	; 0x78
   26a32:	00c1      	lsls	r1, r0, #3
   26a34:	e5d7      	b.n	265e6 <_malloc_r+0x4e>
   26a36:	2380      	movs	r3, #128	; 0x80
   26a38:	015b      	lsls	r3, r3, #5
   26a3a:	e6dd      	b.n	267f8 <_malloc_r+0x260>
   26a3c:	1089      	asrs	r1, r1, #2
   26a3e:	3b02      	subs	r3, #2
   26a40:	408b      	lsls	r3, r1
   26a42:	6872      	ldr	r2, [r6, #4]
   26a44:	4313      	orrs	r3, r2
   26a46:	6073      	str	r3, [r6, #4]
   26a48:	4662      	mov	r2, ip
   26a4a:	e757      	b.n	268fc <_malloc_r+0x364>
   26a4c:	4b2b      	ldr	r3, [pc, #172]	; (26afc <_malloc_r+0x564>)
   26a4e:	4298      	cmp	r0, r3
   26a50:	d81c      	bhi.n	26a8c <_malloc_r+0x4f4>
   26a52:	237c      	movs	r3, #124	; 0x7c
   26a54:	4698      	mov	r8, r3
   26a56:	0ca8      	lsrs	r0, r5, #18
   26a58:	4480      	add	r8, r0
   26a5a:	307d      	adds	r0, #125	; 0x7d
   26a5c:	00c1      	lsls	r1, r0, #3
   26a5e:	e5c2      	b.n	265e6 <_malloc_r+0x4e>
   26a60:	3310      	adds	r3, #16
   26a62:	9300      	str	r3, [sp, #0]
   26a64:	e699      	b.n	2679a <_malloc_r+0x202>
   26a66:	2a54      	cmp	r2, #84	; 0x54
   26a68:	d826      	bhi.n	26ab8 <_malloc_r+0x520>
   26a6a:	464b      	mov	r3, r9
   26a6c:	0b1a      	lsrs	r2, r3, #12
   26a6e:	0011      	movs	r1, r2
   26a70:	326f      	adds	r2, #111	; 0x6f
   26a72:	316e      	adds	r1, #110	; 0x6e
   26a74:	00d2      	lsls	r2, r2, #3
   26a76:	e729      	b.n	268cc <_malloc_r+0x334>
   26a78:	051b      	lsls	r3, r3, #20
   26a7a:	d000      	beq.n	26a7e <_malloc_r+0x4e6>
   26a7c:	e6a6      	b.n	267cc <_malloc_r+0x234>
   26a7e:	2001      	movs	r0, #1
   26a80:	9b00      	ldr	r3, [sp, #0]
   26a82:	68b2      	ldr	r2, [r6, #8]
   26a84:	4443      	add	r3, r8
   26a86:	4303      	orrs	r3, r0
   26a88:	6053      	str	r3, [r2, #4]
   26a8a:	e6e6      	b.n	2685a <_malloc_r+0x2c2>
   26a8c:	21fe      	movs	r1, #254	; 0xfe
   26a8e:	237e      	movs	r3, #126	; 0x7e
   26a90:	207f      	movs	r0, #127	; 0x7f
   26a92:	0089      	lsls	r1, r1, #2
   26a94:	4698      	mov	r8, r3
   26a96:	e5a6      	b.n	265e6 <_malloc_r+0x4e>
   26a98:	2300      	movs	r3, #0
   26a9a:	2001      	movs	r0, #1
   26a9c:	469b      	mov	fp, r3
   26a9e:	e6bd      	b.n	2681c <_malloc_r+0x284>
   26aa0:	0021      	movs	r1, r4
   26aa2:	0038      	movs	r0, r7
   26aa4:	3108      	adds	r1, #8
   26aa6:	f000 fd5b 	bl	27560 <_free_r>
   26aaa:	4653      	mov	r3, sl
   26aac:	6819      	ldr	r1, [r3, #0]
   26aae:	e6d4      	b.n	2685a <_malloc_r+0x2c2>
   26ab0:	465b      	mov	r3, fp
   26ab2:	464a      	mov	r2, r9
   26ab4:	601a      	str	r2, [r3, #0]
   26ab6:	e694      	b.n	267e2 <_malloc_r+0x24a>
   26ab8:	21aa      	movs	r1, #170	; 0xaa
   26aba:	0049      	lsls	r1, r1, #1
   26abc:	428a      	cmp	r2, r1
   26abe:	d806      	bhi.n	26ace <_malloc_r+0x536>
   26ac0:	464b      	mov	r3, r9
   26ac2:	0bda      	lsrs	r2, r3, #15
   26ac4:	0011      	movs	r1, r2
   26ac6:	3278      	adds	r2, #120	; 0x78
   26ac8:	3177      	adds	r1, #119	; 0x77
   26aca:	00d2      	lsls	r2, r2, #3
   26acc:	e6fe      	b.n	268cc <_malloc_r+0x334>
   26ace:	490b      	ldr	r1, [pc, #44]	; (26afc <_malloc_r+0x564>)
   26ad0:	428a      	cmp	r2, r1
   26ad2:	d806      	bhi.n	26ae2 <_malloc_r+0x54a>
   26ad4:	464b      	mov	r3, r9
   26ad6:	0c9a      	lsrs	r2, r3, #18
   26ad8:	0011      	movs	r1, r2
   26ada:	327d      	adds	r2, #125	; 0x7d
   26adc:	317c      	adds	r1, #124	; 0x7c
   26ade:	00d2      	lsls	r2, r2, #3
   26ae0:	e6f4      	b.n	268cc <_malloc_r+0x334>
   26ae2:	22fe      	movs	r2, #254	; 0xfe
   26ae4:	217e      	movs	r1, #126	; 0x7e
   26ae6:	0092      	lsls	r2, r2, #2
   26ae8:	e6f0      	b.n	268cc <_malloc_r+0x334>
   26aea:	6873      	ldr	r3, [r6, #4]
   26aec:	e77e      	b.n	269ec <_malloc_r+0x454>
   26aee:	002b      	movs	r3, r5
   26af0:	08e8      	lsrs	r0, r5, #3
   26af2:	3308      	adds	r3, #8
   26af4:	e605      	b.n	26702 <_malloc_r+0x16a>
   26af6:	46c0      	nop			; (mov r8, r8)
   26af8:	20000e54 	.word	0x20000e54
   26afc:	00000554 	.word	0x00000554

00026b00 <memchr>:
   26b00:	b570      	push	{r4, r5, r6, lr}
   26b02:	b2cd      	uxtb	r5, r1
   26b04:	0783      	lsls	r3, r0, #30
   26b06:	d034      	beq.n	26b72 <memchr+0x72>
   26b08:	1e54      	subs	r4, r2, #1
   26b0a:	2a00      	cmp	r2, #0
   26b0c:	d01b      	beq.n	26b46 <memchr+0x46>
   26b0e:	7803      	ldrb	r3, [r0, #0]
   26b10:	42ab      	cmp	r3, r5
   26b12:	d019      	beq.n	26b48 <memchr+0x48>
   26b14:	2203      	movs	r2, #3
   26b16:	e004      	b.n	26b22 <memchr+0x22>
   26b18:	3c01      	subs	r4, #1
   26b1a:	d314      	bcc.n	26b46 <memchr+0x46>
   26b1c:	7803      	ldrb	r3, [r0, #0]
   26b1e:	42ab      	cmp	r3, r5
   26b20:	d012      	beq.n	26b48 <memchr+0x48>
   26b22:	3001      	adds	r0, #1
   26b24:	4210      	tst	r0, r2
   26b26:	d1f7      	bne.n	26b18 <memchr+0x18>
   26b28:	2c03      	cmp	r4, #3
   26b2a:	d80e      	bhi.n	26b4a <memchr+0x4a>
   26b2c:	2c00      	cmp	r4, #0
   26b2e:	d00a      	beq.n	26b46 <memchr+0x46>
   26b30:	7803      	ldrb	r3, [r0, #0]
   26b32:	42ab      	cmp	r3, r5
   26b34:	d008      	beq.n	26b48 <memchr+0x48>
   26b36:	1904      	adds	r4, r0, r4
   26b38:	e002      	b.n	26b40 <memchr+0x40>
   26b3a:	7803      	ldrb	r3, [r0, #0]
   26b3c:	42ab      	cmp	r3, r5
   26b3e:	d003      	beq.n	26b48 <memchr+0x48>
   26b40:	3001      	adds	r0, #1
   26b42:	4284      	cmp	r4, r0
   26b44:	d1f9      	bne.n	26b3a <memchr+0x3a>
   26b46:	2000      	movs	r0, #0
   26b48:	bd70      	pop	{r4, r5, r6, pc}
   26b4a:	22ff      	movs	r2, #255	; 0xff
   26b4c:	060b      	lsls	r3, r1, #24
   26b4e:	0c1b      	lsrs	r3, r3, #16
   26b50:	4011      	ands	r1, r2
   26b52:	4319      	orrs	r1, r3
   26b54:	040b      	lsls	r3, r1, #16
   26b56:	4e08      	ldr	r6, [pc, #32]	; (26b78 <memchr+0x78>)
   26b58:	4319      	orrs	r1, r3
   26b5a:	6803      	ldr	r3, [r0, #0]
   26b5c:	4a07      	ldr	r2, [pc, #28]	; (26b7c <memchr+0x7c>)
   26b5e:	404b      	eors	r3, r1
   26b60:	189a      	adds	r2, r3, r2
   26b62:	439a      	bics	r2, r3
   26b64:	4232      	tst	r2, r6
   26b66:	d1e3      	bne.n	26b30 <memchr+0x30>
   26b68:	3c04      	subs	r4, #4
   26b6a:	3004      	adds	r0, #4
   26b6c:	2c03      	cmp	r4, #3
   26b6e:	d8f4      	bhi.n	26b5a <memchr+0x5a>
   26b70:	e7dc      	b.n	26b2c <memchr+0x2c>
   26b72:	0014      	movs	r4, r2
   26b74:	e7d8      	b.n	26b28 <memchr+0x28>
   26b76:	46c0      	nop			; (mov r8, r8)
   26b78:	80808080 	.word	0x80808080
   26b7c:	fefefeff 	.word	0xfefefeff

00026b80 <__malloc_lock>:
   26b80:	b510      	push	{r4, lr}
   26b82:	4802      	ldr	r0, [pc, #8]	; (26b8c <__malloc_lock+0xc>)
   26b84:	f7ff fd04 	bl	26590 <__retarget_lock_acquire_recursive>
   26b88:	bd10      	pop	{r4, pc}
   26b8a:	46c0      	nop			; (mov r8, r8)
   26b8c:	2000536c 	.word	0x2000536c

00026b90 <__malloc_unlock>:
   26b90:	b510      	push	{r4, lr}
   26b92:	4802      	ldr	r0, [pc, #8]	; (26b9c <__malloc_unlock+0xc>)
   26b94:	f7ff fcfe 	bl	26594 <__retarget_lock_release_recursive>
   26b98:	bd10      	pop	{r4, pc}
   26b9a:	46c0      	nop			; (mov r8, r8)
   26b9c:	2000536c 	.word	0x2000536c

00026ba0 <_Balloc>:
   26ba0:	b570      	push	{r4, r5, r6, lr}
   26ba2:	0004      	movs	r4, r0
   26ba4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   26ba6:	000d      	movs	r5, r1
   26ba8:	2800      	cmp	r0, #0
   26baa:	d00a      	beq.n	26bc2 <_Balloc+0x22>
   26bac:	00ab      	lsls	r3, r5, #2
   26bae:	18c3      	adds	r3, r0, r3
   26bb0:	6818      	ldr	r0, [r3, #0]
   26bb2:	2800      	cmp	r0, #0
   26bb4:	d00f      	beq.n	26bd6 <_Balloc+0x36>
   26bb6:	6802      	ldr	r2, [r0, #0]
   26bb8:	601a      	str	r2, [r3, #0]
   26bba:	2300      	movs	r3, #0
   26bbc:	6103      	str	r3, [r0, #16]
   26bbe:	60c3      	str	r3, [r0, #12]
   26bc0:	bd70      	pop	{r4, r5, r6, pc}
   26bc2:	2221      	movs	r2, #33	; 0x21
   26bc4:	2104      	movs	r1, #4
   26bc6:	0020      	movs	r0, r4
   26bc8:	f000 fc4e 	bl	27468 <_calloc_r>
   26bcc:	64e0      	str	r0, [r4, #76]	; 0x4c
   26bce:	2800      	cmp	r0, #0
   26bd0:	d1ec      	bne.n	26bac <_Balloc+0xc>
   26bd2:	2000      	movs	r0, #0
   26bd4:	e7f4      	b.n	26bc0 <_Balloc+0x20>
   26bd6:	2601      	movs	r6, #1
   26bd8:	40ae      	lsls	r6, r5
   26bda:	1d72      	adds	r2, r6, #5
   26bdc:	0092      	lsls	r2, r2, #2
   26bde:	2101      	movs	r1, #1
   26be0:	0020      	movs	r0, r4
   26be2:	f000 fc41 	bl	27468 <_calloc_r>
   26be6:	2800      	cmp	r0, #0
   26be8:	d0f3      	beq.n	26bd2 <_Balloc+0x32>
   26bea:	6045      	str	r5, [r0, #4]
   26bec:	6086      	str	r6, [r0, #8]
   26bee:	e7e4      	b.n	26bba <_Balloc+0x1a>

00026bf0 <_Bfree>:
   26bf0:	2900      	cmp	r1, #0
   26bf2:	d006      	beq.n	26c02 <_Bfree+0x12>
   26bf4:	684b      	ldr	r3, [r1, #4]
   26bf6:	009a      	lsls	r2, r3, #2
   26bf8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   26bfa:	189b      	adds	r3, r3, r2
   26bfc:	681a      	ldr	r2, [r3, #0]
   26bfe:	600a      	str	r2, [r1, #0]
   26c00:	6019      	str	r1, [r3, #0]
   26c02:	4770      	bx	lr

00026c04 <__multadd>:
   26c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c06:	46ce      	mov	lr, r9
   26c08:	4647      	mov	r7, r8
   26c0a:	4681      	mov	r9, r0
   26c0c:	0008      	movs	r0, r1
   26c0e:	b580      	push	{r7, lr}
   26c10:	000d      	movs	r5, r1
   26c12:	690c      	ldr	r4, [r1, #16]
   26c14:	001f      	movs	r7, r3
   26c16:	2100      	movs	r1, #0
   26c18:	3014      	adds	r0, #20
   26c1a:	6803      	ldr	r3, [r0, #0]
   26c1c:	3101      	adds	r1, #1
   26c1e:	041e      	lsls	r6, r3, #16
   26c20:	0c36      	lsrs	r6, r6, #16
   26c22:	4356      	muls	r6, r2
   26c24:	0c1b      	lsrs	r3, r3, #16
   26c26:	4353      	muls	r3, r2
   26c28:	19f6      	adds	r6, r6, r7
   26c2a:	0c37      	lsrs	r7, r6, #16
   26c2c:	19db      	adds	r3, r3, r7
   26c2e:	0436      	lsls	r6, r6, #16
   26c30:	0c1f      	lsrs	r7, r3, #16
   26c32:	0c36      	lsrs	r6, r6, #16
   26c34:	041b      	lsls	r3, r3, #16
   26c36:	199b      	adds	r3, r3, r6
   26c38:	c008      	stmia	r0!, {r3}
   26c3a:	428c      	cmp	r4, r1
   26c3c:	dced      	bgt.n	26c1a <__multadd+0x16>
   26c3e:	2f00      	cmp	r7, #0
   26c40:	d008      	beq.n	26c54 <__multadd+0x50>
   26c42:	68ab      	ldr	r3, [r5, #8]
   26c44:	429c      	cmp	r4, r3
   26c46:	da0a      	bge.n	26c5e <__multadd+0x5a>
   26c48:	1d23      	adds	r3, r4, #4
   26c4a:	009b      	lsls	r3, r3, #2
   26c4c:	18eb      	adds	r3, r5, r3
   26c4e:	3401      	adds	r4, #1
   26c50:	605f      	str	r7, [r3, #4]
   26c52:	612c      	str	r4, [r5, #16]
   26c54:	0028      	movs	r0, r5
   26c56:	bc0c      	pop	{r2, r3}
   26c58:	4690      	mov	r8, r2
   26c5a:	4699      	mov	r9, r3
   26c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26c5e:	686b      	ldr	r3, [r5, #4]
   26c60:	4648      	mov	r0, r9
   26c62:	1c59      	adds	r1, r3, #1
   26c64:	f7ff ff9c 	bl	26ba0 <_Balloc>
   26c68:	0029      	movs	r1, r5
   26c6a:	692b      	ldr	r3, [r5, #16]
   26c6c:	4680      	mov	r8, r0
   26c6e:	1c9a      	adds	r2, r3, #2
   26c70:	0092      	lsls	r2, r2, #2
   26c72:	310c      	adds	r1, #12
   26c74:	300c      	adds	r0, #12
   26c76:	f7fc ffcf 	bl	23c18 <memcpy>
   26c7a:	686b      	ldr	r3, [r5, #4]
   26c7c:	009a      	lsls	r2, r3, #2
   26c7e:	464b      	mov	r3, r9
   26c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   26c82:	189b      	adds	r3, r3, r2
   26c84:	681a      	ldr	r2, [r3, #0]
   26c86:	602a      	str	r2, [r5, #0]
   26c88:	601d      	str	r5, [r3, #0]
   26c8a:	4645      	mov	r5, r8
   26c8c:	e7dc      	b.n	26c48 <__multadd+0x44>
   26c8e:	46c0      	nop			; (mov r8, r8)

00026c90 <__hi0bits>:
   26c90:	0003      	movs	r3, r0
   26c92:	0c02      	lsrs	r2, r0, #16
   26c94:	2000      	movs	r0, #0
   26c96:	2a00      	cmp	r2, #0
   26c98:	d101      	bne.n	26c9e <__hi0bits+0xe>
   26c9a:	041b      	lsls	r3, r3, #16
   26c9c:	3010      	adds	r0, #16
   26c9e:	0e1a      	lsrs	r2, r3, #24
   26ca0:	d101      	bne.n	26ca6 <__hi0bits+0x16>
   26ca2:	3008      	adds	r0, #8
   26ca4:	021b      	lsls	r3, r3, #8
   26ca6:	0f1a      	lsrs	r2, r3, #28
   26ca8:	d101      	bne.n	26cae <__hi0bits+0x1e>
   26caa:	3004      	adds	r0, #4
   26cac:	011b      	lsls	r3, r3, #4
   26cae:	0f9a      	lsrs	r2, r3, #30
   26cb0:	d101      	bne.n	26cb6 <__hi0bits+0x26>
   26cb2:	3002      	adds	r0, #2
   26cb4:	009b      	lsls	r3, r3, #2
   26cb6:	2b00      	cmp	r3, #0
   26cb8:	db03      	blt.n	26cc2 <__hi0bits+0x32>
   26cba:	3001      	adds	r0, #1
   26cbc:	005b      	lsls	r3, r3, #1
   26cbe:	d400      	bmi.n	26cc2 <__hi0bits+0x32>
   26cc0:	2020      	movs	r0, #32
   26cc2:	4770      	bx	lr

00026cc4 <__lo0bits>:
   26cc4:	6803      	ldr	r3, [r0, #0]
   26cc6:	075a      	lsls	r2, r3, #29
   26cc8:	d009      	beq.n	26cde <__lo0bits+0x1a>
   26cca:	2200      	movs	r2, #0
   26ccc:	07d9      	lsls	r1, r3, #31
   26cce:	d404      	bmi.n	26cda <__lo0bits+0x16>
   26cd0:	079a      	lsls	r2, r3, #30
   26cd2:	d420      	bmi.n	26d16 <__lo0bits+0x52>
   26cd4:	2202      	movs	r2, #2
   26cd6:	089b      	lsrs	r3, r3, #2
   26cd8:	6003      	str	r3, [r0, #0]
   26cda:	0010      	movs	r0, r2
   26cdc:	4770      	bx	lr
   26cde:	0419      	lsls	r1, r3, #16
   26ce0:	2200      	movs	r2, #0
   26ce2:	2900      	cmp	r1, #0
   26ce4:	d101      	bne.n	26cea <__lo0bits+0x26>
   26ce6:	0c1b      	lsrs	r3, r3, #16
   26ce8:	3210      	adds	r2, #16
   26cea:	21ff      	movs	r1, #255	; 0xff
   26cec:	4219      	tst	r1, r3
   26cee:	d101      	bne.n	26cf4 <__lo0bits+0x30>
   26cf0:	3208      	adds	r2, #8
   26cf2:	0a1b      	lsrs	r3, r3, #8
   26cf4:	0719      	lsls	r1, r3, #28
   26cf6:	d101      	bne.n	26cfc <__lo0bits+0x38>
   26cf8:	3204      	adds	r2, #4
   26cfa:	091b      	lsrs	r3, r3, #4
   26cfc:	0799      	lsls	r1, r3, #30
   26cfe:	d101      	bne.n	26d04 <__lo0bits+0x40>
   26d00:	3202      	adds	r2, #2
   26d02:	089b      	lsrs	r3, r3, #2
   26d04:	07d9      	lsls	r1, r3, #31
   26d06:	d404      	bmi.n	26d12 <__lo0bits+0x4e>
   26d08:	085b      	lsrs	r3, r3, #1
   26d0a:	d101      	bne.n	26d10 <__lo0bits+0x4c>
   26d0c:	2220      	movs	r2, #32
   26d0e:	e7e4      	b.n	26cda <__lo0bits+0x16>
   26d10:	3201      	adds	r2, #1
   26d12:	6003      	str	r3, [r0, #0]
   26d14:	e7e1      	b.n	26cda <__lo0bits+0x16>
   26d16:	085b      	lsrs	r3, r3, #1
   26d18:	6003      	str	r3, [r0, #0]
   26d1a:	2201      	movs	r2, #1
   26d1c:	e7dd      	b.n	26cda <__lo0bits+0x16>
   26d1e:	46c0      	nop			; (mov r8, r8)

00026d20 <__i2b>:
   26d20:	b510      	push	{r4, lr}
   26d22:	000c      	movs	r4, r1
   26d24:	2101      	movs	r1, #1
   26d26:	f7ff ff3b 	bl	26ba0 <_Balloc>
   26d2a:	2301      	movs	r3, #1
   26d2c:	6144      	str	r4, [r0, #20]
   26d2e:	6103      	str	r3, [r0, #16]
   26d30:	bd10      	pop	{r4, pc}
   26d32:	46c0      	nop			; (mov r8, r8)

00026d34 <__multiply>:
   26d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   26d36:	4657      	mov	r7, sl
   26d38:	464e      	mov	r6, r9
   26d3a:	4645      	mov	r5, r8
   26d3c:	46de      	mov	lr, fp
   26d3e:	b5e0      	push	{r5, r6, r7, lr}
   26d40:	6914      	ldr	r4, [r2, #16]
   26d42:	690e      	ldr	r6, [r1, #16]
   26d44:	b085      	sub	sp, #20
   26d46:	000f      	movs	r7, r1
   26d48:	0015      	movs	r5, r2
   26d4a:	42a6      	cmp	r6, r4
   26d4c:	da04      	bge.n	26d58 <__multiply+0x24>
   26d4e:	0033      	movs	r3, r6
   26d50:	0017      	movs	r7, r2
   26d52:	0026      	movs	r6, r4
   26d54:	000d      	movs	r5, r1
   26d56:	001c      	movs	r4, r3
   26d58:	1933      	adds	r3, r6, r4
   26d5a:	4698      	mov	r8, r3
   26d5c:	68bb      	ldr	r3, [r7, #8]
   26d5e:	6879      	ldr	r1, [r7, #4]
   26d60:	4598      	cmp	r8, r3
   26d62:	dd00      	ble.n	26d66 <__multiply+0x32>
   26d64:	3101      	adds	r1, #1
   26d66:	f7ff ff1b 	bl	26ba0 <_Balloc>
   26d6a:	2214      	movs	r2, #20
   26d6c:	0003      	movs	r3, r0
   26d6e:	4694      	mov	ip, r2
   26d70:	4463      	add	r3, ip
   26d72:	469b      	mov	fp, r3
   26d74:	4643      	mov	r3, r8
   26d76:	009b      	lsls	r3, r3, #2
   26d78:	445b      	add	r3, fp
   26d7a:	0019      	movs	r1, r3
   26d7c:	9302      	str	r3, [sp, #8]
   26d7e:	9003      	str	r0, [sp, #12]
   26d80:	465b      	mov	r3, fp
   26d82:	2200      	movs	r2, #0
   26d84:	458b      	cmp	fp, r1
   26d86:	d203      	bcs.n	26d90 <__multiply+0x5c>
   26d88:	9902      	ldr	r1, [sp, #8]
   26d8a:	c304      	stmia	r3!, {r2}
   26d8c:	4299      	cmp	r1, r3
   26d8e:	d8fc      	bhi.n	26d8a <__multiply+0x56>
   26d90:	2314      	movs	r3, #20
   26d92:	00a4      	lsls	r4, r4, #2
   26d94:	469a      	mov	sl, r3
   26d96:	3714      	adds	r7, #20
   26d98:	0023      	movs	r3, r4
   26d9a:	46bc      	mov	ip, r7
   26d9c:	44aa      	add	sl, r5
   26d9e:	00b6      	lsls	r6, r6, #2
   26da0:	4453      	add	r3, sl
   26da2:	9700      	str	r7, [sp, #0]
   26da4:	44b4      	add	ip, r6
   26da6:	9301      	str	r3, [sp, #4]
   26da8:	459a      	cmp	sl, r3
   26daa:	d24f      	bcs.n	26e4c <__multiply+0x118>
   26dac:	4653      	mov	r3, sl
   26dae:	681b      	ldr	r3, [r3, #0]
   26db0:	041e      	lsls	r6, r3, #16
   26db2:	0c36      	lsrs	r6, r6, #16
   26db4:	d020      	beq.n	26df8 <__multiply+0xc4>
   26db6:	465c      	mov	r4, fp
   26db8:	2700      	movs	r7, #0
   26dba:	9d00      	ldr	r5, [sp, #0]
   26dbc:	0021      	movs	r1, r4
   26dbe:	cc08      	ldmia	r4!, {r3}
   26dc0:	cd04      	ldmia	r5!, {r2}
   26dc2:	4699      	mov	r9, r3
   26dc4:	4648      	mov	r0, r9
   26dc6:	0413      	lsls	r3, r2, #16
   26dc8:	0c1b      	lsrs	r3, r3, #16
   26dca:	4373      	muls	r3, r6
   26dcc:	0400      	lsls	r0, r0, #16
   26dce:	0c00      	lsrs	r0, r0, #16
   26dd0:	181b      	adds	r3, r3, r0
   26dd2:	19d8      	adds	r0, r3, r7
   26dd4:	0c13      	lsrs	r3, r2, #16
   26dd6:	464a      	mov	r2, r9
   26dd8:	4373      	muls	r3, r6
   26dda:	0c12      	lsrs	r2, r2, #16
   26ddc:	189b      	adds	r3, r3, r2
   26dde:	0c02      	lsrs	r2, r0, #16
   26de0:	189b      	adds	r3, r3, r2
   26de2:	0402      	lsls	r2, r0, #16
   26de4:	0c1f      	lsrs	r7, r3, #16
   26de6:	0c12      	lsrs	r2, r2, #16
   26de8:	041b      	lsls	r3, r3, #16
   26dea:	4313      	orrs	r3, r2
   26dec:	600b      	str	r3, [r1, #0]
   26dee:	45ac      	cmp	ip, r5
   26df0:	d8e4      	bhi.n	26dbc <__multiply+0x88>
   26df2:	4653      	mov	r3, sl
   26df4:	6027      	str	r7, [r4, #0]
   26df6:	681b      	ldr	r3, [r3, #0]
   26df8:	0c1e      	lsrs	r6, r3, #16
   26dfa:	d020      	beq.n	26e3e <__multiply+0x10a>
   26dfc:	465b      	mov	r3, fp
   26dfe:	2100      	movs	r1, #0
   26e00:	681b      	ldr	r3, [r3, #0]
   26e02:	465c      	mov	r4, fp
   26e04:	0018      	movs	r0, r3
   26e06:	000f      	movs	r7, r1
   26e08:	4662      	mov	r2, ip
   26e0a:	9d00      	ldr	r5, [sp, #0]
   26e0c:	8829      	ldrh	r1, [r5, #0]
   26e0e:	0c00      	lsrs	r0, r0, #16
   26e10:	4371      	muls	r1, r6
   26e12:	1809      	adds	r1, r1, r0
   26e14:	19c9      	adds	r1, r1, r7
   26e16:	041b      	lsls	r3, r3, #16
   26e18:	0408      	lsls	r0, r1, #16
   26e1a:	0c1b      	lsrs	r3, r3, #16
   26e1c:	4303      	orrs	r3, r0
   26e1e:	6023      	str	r3, [r4, #0]
   26e20:	cd08      	ldmia	r5!, {r3}
   26e22:	6860      	ldr	r0, [r4, #4]
   26e24:	0c1b      	lsrs	r3, r3, #16
   26e26:	4373      	muls	r3, r6
   26e28:	0407      	lsls	r7, r0, #16
   26e2a:	0c3f      	lsrs	r7, r7, #16
   26e2c:	19db      	adds	r3, r3, r7
   26e2e:	0c09      	lsrs	r1, r1, #16
   26e30:	185b      	adds	r3, r3, r1
   26e32:	0c1f      	lsrs	r7, r3, #16
   26e34:	3404      	adds	r4, #4
   26e36:	42aa      	cmp	r2, r5
   26e38:	d8e8      	bhi.n	26e0c <__multiply+0xd8>
   26e3a:	4694      	mov	ip, r2
   26e3c:	6023      	str	r3, [r4, #0]
   26e3e:	2304      	movs	r3, #4
   26e40:	4699      	mov	r9, r3
   26e42:	9b01      	ldr	r3, [sp, #4]
   26e44:	44ca      	add	sl, r9
   26e46:	44cb      	add	fp, r9
   26e48:	4553      	cmp	r3, sl
   26e4a:	d8af      	bhi.n	26dac <__multiply+0x78>
   26e4c:	4643      	mov	r3, r8
   26e4e:	2b00      	cmp	r3, #0
   26e50:	dd0e      	ble.n	26e70 <__multiply+0x13c>
   26e52:	9b02      	ldr	r3, [sp, #8]
   26e54:	3b04      	subs	r3, #4
   26e56:	681a      	ldr	r2, [r3, #0]
   26e58:	2a00      	cmp	r2, #0
   26e5a:	d109      	bne.n	26e70 <__multiply+0x13c>
   26e5c:	4642      	mov	r2, r8
   26e5e:	e003      	b.n	26e68 <__multiply+0x134>
   26e60:	3b04      	subs	r3, #4
   26e62:	6819      	ldr	r1, [r3, #0]
   26e64:	2900      	cmp	r1, #0
   26e66:	d102      	bne.n	26e6e <__multiply+0x13a>
   26e68:	3a01      	subs	r2, #1
   26e6a:	2a00      	cmp	r2, #0
   26e6c:	d1f8      	bne.n	26e60 <__multiply+0x12c>
   26e6e:	4690      	mov	r8, r2
   26e70:	9b03      	ldr	r3, [sp, #12]
   26e72:	4642      	mov	r2, r8
   26e74:	0018      	movs	r0, r3
   26e76:	611a      	str	r2, [r3, #16]
   26e78:	b005      	add	sp, #20
   26e7a:	bc3c      	pop	{r2, r3, r4, r5}
   26e7c:	4690      	mov	r8, r2
   26e7e:	4699      	mov	r9, r3
   26e80:	46a2      	mov	sl, r4
   26e82:	46ab      	mov	fp, r5
   26e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26e86:	46c0      	nop			; (mov r8, r8)

00026e88 <__pow5mult>:
   26e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e8a:	4647      	mov	r7, r8
   26e8c:	46ce      	mov	lr, r9
   26e8e:	2303      	movs	r3, #3
   26e90:	b580      	push	{r7, lr}
   26e92:	4680      	mov	r8, r0
   26e94:	000f      	movs	r7, r1
   26e96:	0014      	movs	r4, r2
   26e98:	4013      	ands	r3, r2
   26e9a:	d13a      	bne.n	26f12 <__pow5mult+0x8a>
   26e9c:	10a4      	asrs	r4, r4, #2
   26e9e:	003e      	movs	r6, r7
   26ea0:	2c00      	cmp	r4, #0
   26ea2:	d025      	beq.n	26ef0 <__pow5mult+0x68>
   26ea4:	4643      	mov	r3, r8
   26ea6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   26ea8:	2d00      	cmp	r5, #0
   26eaa:	d03b      	beq.n	26f24 <__pow5mult+0x9c>
   26eac:	003e      	movs	r6, r7
   26eae:	2300      	movs	r3, #0
   26eb0:	2701      	movs	r7, #1
   26eb2:	4699      	mov	r9, r3
   26eb4:	4227      	tst	r7, r4
   26eb6:	d107      	bne.n	26ec8 <__pow5mult+0x40>
   26eb8:	1064      	asrs	r4, r4, #1
   26eba:	d019      	beq.n	26ef0 <__pow5mult+0x68>
   26ebc:	6828      	ldr	r0, [r5, #0]
   26ebe:	2800      	cmp	r0, #0
   26ec0:	d01b      	beq.n	26efa <__pow5mult+0x72>
   26ec2:	0005      	movs	r5, r0
   26ec4:	4227      	tst	r7, r4
   26ec6:	d0f7      	beq.n	26eb8 <__pow5mult+0x30>
   26ec8:	002a      	movs	r2, r5
   26eca:	0031      	movs	r1, r6
   26ecc:	4640      	mov	r0, r8
   26ece:	f7ff ff31 	bl	26d34 <__multiply>
   26ed2:	2e00      	cmp	r6, #0
   26ed4:	d01b      	beq.n	26f0e <__pow5mult+0x86>
   26ed6:	4642      	mov	r2, r8
   26ed8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   26eda:	6873      	ldr	r3, [r6, #4]
   26edc:	4694      	mov	ip, r2
   26ede:	009b      	lsls	r3, r3, #2
   26ee0:	4463      	add	r3, ip
   26ee2:	681a      	ldr	r2, [r3, #0]
   26ee4:	1064      	asrs	r4, r4, #1
   26ee6:	6032      	str	r2, [r6, #0]
   26ee8:	601e      	str	r6, [r3, #0]
   26eea:	0006      	movs	r6, r0
   26eec:	2c00      	cmp	r4, #0
   26eee:	d1e5      	bne.n	26ebc <__pow5mult+0x34>
   26ef0:	0030      	movs	r0, r6
   26ef2:	bc0c      	pop	{r2, r3}
   26ef4:	4690      	mov	r8, r2
   26ef6:	4699      	mov	r9, r3
   26ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26efa:	002a      	movs	r2, r5
   26efc:	0029      	movs	r1, r5
   26efe:	4640      	mov	r0, r8
   26f00:	f7ff ff18 	bl	26d34 <__multiply>
   26f04:	464b      	mov	r3, r9
   26f06:	6028      	str	r0, [r5, #0]
   26f08:	6003      	str	r3, [r0, #0]
   26f0a:	0005      	movs	r5, r0
   26f0c:	e7da      	b.n	26ec4 <__pow5mult+0x3c>
   26f0e:	0006      	movs	r6, r0
   26f10:	e7d2      	b.n	26eb8 <__pow5mult+0x30>
   26f12:	4a0b      	ldr	r2, [pc, #44]	; (26f40 <__pow5mult+0xb8>)
   26f14:	3b01      	subs	r3, #1
   26f16:	009b      	lsls	r3, r3, #2
   26f18:	589a      	ldr	r2, [r3, r2]
   26f1a:	2300      	movs	r3, #0
   26f1c:	f7ff fe72 	bl	26c04 <__multadd>
   26f20:	0007      	movs	r7, r0
   26f22:	e7bb      	b.n	26e9c <__pow5mult+0x14>
   26f24:	2101      	movs	r1, #1
   26f26:	4640      	mov	r0, r8
   26f28:	f7ff fe3a 	bl	26ba0 <_Balloc>
   26f2c:	4b05      	ldr	r3, [pc, #20]	; (26f44 <__pow5mult+0xbc>)
   26f2e:	0005      	movs	r5, r0
   26f30:	6143      	str	r3, [r0, #20]
   26f32:	2301      	movs	r3, #1
   26f34:	6103      	str	r3, [r0, #16]
   26f36:	4643      	mov	r3, r8
   26f38:	6498      	str	r0, [r3, #72]	; 0x48
   26f3a:	2300      	movs	r3, #0
   26f3c:	6003      	str	r3, [r0, #0]
   26f3e:	e7b5      	b.n	26eac <__pow5mult+0x24>
   26f40:	00029f50 	.word	0x00029f50
   26f44:	00000271 	.word	0x00000271

00026f48 <__lshift>:
   26f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f4a:	464e      	mov	r6, r9
   26f4c:	4645      	mov	r5, r8
   26f4e:	46de      	mov	lr, fp
   26f50:	4657      	mov	r7, sl
   26f52:	b5e0      	push	{r5, r6, r7, lr}
   26f54:	000e      	movs	r6, r1
   26f56:	6933      	ldr	r3, [r6, #16]
   26f58:	1154      	asrs	r4, r2, #5
   26f5a:	4698      	mov	r8, r3
   26f5c:	44a0      	add	r8, r4
   26f5e:	4643      	mov	r3, r8
   26f60:	1c5d      	adds	r5, r3, #1
   26f62:	68b3      	ldr	r3, [r6, #8]
   26f64:	4683      	mov	fp, r0
   26f66:	4691      	mov	r9, r2
   26f68:	6849      	ldr	r1, [r1, #4]
   26f6a:	429d      	cmp	r5, r3
   26f6c:	dd03      	ble.n	26f76 <__lshift+0x2e>
   26f6e:	3101      	adds	r1, #1
   26f70:	005b      	lsls	r3, r3, #1
   26f72:	429d      	cmp	r5, r3
   26f74:	dcfb      	bgt.n	26f6e <__lshift+0x26>
   26f76:	4658      	mov	r0, fp
   26f78:	f7ff fe12 	bl	26ba0 <_Balloc>
   26f7c:	0003      	movs	r3, r0
   26f7e:	4684      	mov	ip, r0
   26f80:	3314      	adds	r3, #20
   26f82:	2c00      	cmp	r4, #0
   26f84:	dd06      	ble.n	26f94 <__lshift+0x4c>
   26f86:	2100      	movs	r1, #0
   26f88:	00a4      	lsls	r4, r4, #2
   26f8a:	001a      	movs	r2, r3
   26f8c:	191b      	adds	r3, r3, r4
   26f8e:	c202      	stmia	r2!, {r1}
   26f90:	4293      	cmp	r3, r2
   26f92:	d1fc      	bne.n	26f8e <__lshift+0x46>
   26f94:	6932      	ldr	r2, [r6, #16]
   26f96:	4648      	mov	r0, r9
   26f98:	0097      	lsls	r7, r2, #2
   26f9a:	0031      	movs	r1, r6
   26f9c:	221f      	movs	r2, #31
   26f9e:	3114      	adds	r1, #20
   26fa0:	4010      	ands	r0, r2
   26fa2:	19cf      	adds	r7, r1, r7
   26fa4:	4681      	mov	r9, r0
   26fa6:	2800      	cmp	r0, #0
   26fa8:	d025      	beq.n	26ff6 <__lshift+0xae>
   26faa:	2220      	movs	r2, #32
   26fac:	1a12      	subs	r2, r2, r0
   26fae:	4692      	mov	sl, r2
   26fb0:	2200      	movs	r2, #0
   26fb2:	4648      	mov	r0, r9
   26fb4:	680c      	ldr	r4, [r1, #0]
   26fb6:	4084      	lsls	r4, r0
   26fb8:	4650      	mov	r0, sl
   26fba:	4314      	orrs	r4, r2
   26fbc:	601c      	str	r4, [r3, #0]
   26fbe:	c904      	ldmia	r1!, {r2}
   26fc0:	3304      	adds	r3, #4
   26fc2:	40c2      	lsrs	r2, r0
   26fc4:	428f      	cmp	r7, r1
   26fc6:	d8f4      	bhi.n	26fb2 <__lshift+0x6a>
   26fc8:	601a      	str	r2, [r3, #0]
   26fca:	2a00      	cmp	r2, #0
   26fcc:	d001      	beq.n	26fd2 <__lshift+0x8a>
   26fce:	4645      	mov	r5, r8
   26fd0:	3502      	adds	r5, #2
   26fd2:	4663      	mov	r3, ip
   26fd4:	3d01      	subs	r5, #1
   26fd6:	611d      	str	r5, [r3, #16]
   26fd8:	6873      	ldr	r3, [r6, #4]
   26fda:	4660      	mov	r0, ip
   26fdc:	009a      	lsls	r2, r3, #2
   26fde:	465b      	mov	r3, fp
   26fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   26fe2:	189b      	adds	r3, r3, r2
   26fe4:	681a      	ldr	r2, [r3, #0]
   26fe6:	6032      	str	r2, [r6, #0]
   26fe8:	601e      	str	r6, [r3, #0]
   26fea:	bc3c      	pop	{r2, r3, r4, r5}
   26fec:	4690      	mov	r8, r2
   26fee:	4699      	mov	r9, r3
   26ff0:	46a2      	mov	sl, r4
   26ff2:	46ab      	mov	fp, r5
   26ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26ff6:	c904      	ldmia	r1!, {r2}
   26ff8:	c304      	stmia	r3!, {r2}
   26ffa:	428f      	cmp	r7, r1
   26ffc:	d9e9      	bls.n	26fd2 <__lshift+0x8a>
   26ffe:	c904      	ldmia	r1!, {r2}
   27000:	c304      	stmia	r3!, {r2}
   27002:	428f      	cmp	r7, r1
   27004:	d8f7      	bhi.n	26ff6 <__lshift+0xae>
   27006:	e7e4      	b.n	26fd2 <__lshift+0x8a>

00027008 <__mcmp>:
   27008:	690a      	ldr	r2, [r1, #16]
   2700a:	6903      	ldr	r3, [r0, #16]
   2700c:	b530      	push	{r4, r5, lr}
   2700e:	0005      	movs	r5, r0
   27010:	1a98      	subs	r0, r3, r2
   27012:	d111      	bne.n	27038 <__mcmp+0x30>
   27014:	0092      	lsls	r2, r2, #2
   27016:	3514      	adds	r5, #20
   27018:	3114      	adds	r1, #20
   2701a:	18ab      	adds	r3, r5, r2
   2701c:	1889      	adds	r1, r1, r2
   2701e:	e001      	b.n	27024 <__mcmp+0x1c>
   27020:	429d      	cmp	r5, r3
   27022:	d209      	bcs.n	27038 <__mcmp+0x30>
   27024:	3b04      	subs	r3, #4
   27026:	3904      	subs	r1, #4
   27028:	681c      	ldr	r4, [r3, #0]
   2702a:	680a      	ldr	r2, [r1, #0]
   2702c:	4294      	cmp	r4, r2
   2702e:	d0f7      	beq.n	27020 <__mcmp+0x18>
   27030:	4294      	cmp	r4, r2
   27032:	4180      	sbcs	r0, r0
   27034:	2201      	movs	r2, #1
   27036:	4310      	orrs	r0, r2
   27038:	bd30      	pop	{r4, r5, pc}
   2703a:	46c0      	nop			; (mov r8, r8)

0002703c <__mdiff>:
   2703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2703e:	4645      	mov	r5, r8
   27040:	46de      	mov	lr, fp
   27042:	4657      	mov	r7, sl
   27044:	464e      	mov	r6, r9
   27046:	0014      	movs	r4, r2
   27048:	690b      	ldr	r3, [r1, #16]
   2704a:	6912      	ldr	r2, [r2, #16]
   2704c:	b5e0      	push	{r5, r6, r7, lr}
   2704e:	4688      	mov	r8, r1
   27050:	1a9d      	subs	r5, r3, r2
   27052:	d11a      	bne.n	2708a <__mdiff+0x4e>
   27054:	000f      	movs	r7, r1
   27056:	2114      	movs	r1, #20
   27058:	468c      	mov	ip, r1
   2705a:	0092      	lsls	r2, r2, #2
   2705c:	3714      	adds	r7, #20
   2705e:	44a4      	add	ip, r4
   27060:	18bb      	adds	r3, r7, r2
   27062:	4462      	add	r2, ip
   27064:	e002      	b.n	2706c <__mdiff+0x30>
   27066:	429f      	cmp	r7, r3
   27068:	d300      	bcc.n	2706c <__mdiff+0x30>
   2706a:	e070      	b.n	2714e <__mdiff+0x112>
   2706c:	3b04      	subs	r3, #4
   2706e:	3a04      	subs	r2, #4
   27070:	681e      	ldr	r6, [r3, #0]
   27072:	6811      	ldr	r1, [r2, #0]
   27074:	428e      	cmp	r6, r1
   27076:	d0f6      	beq.n	27066 <__mdiff+0x2a>
   27078:	d300      	bcc.n	2707c <__mdiff+0x40>
   2707a:	e071      	b.n	27160 <__mdiff+0x124>
   2707c:	4643      	mov	r3, r8
   2707e:	003e      	movs	r6, r7
   27080:	46a0      	mov	r8, r4
   27082:	4667      	mov	r7, ip
   27084:	001c      	movs	r4, r3
   27086:	2501      	movs	r5, #1
   27088:	e006      	b.n	27098 <__mdiff+0x5c>
   2708a:	2d00      	cmp	r5, #0
   2708c:	db6a      	blt.n	27164 <__mdiff+0x128>
   2708e:	4647      	mov	r7, r8
   27090:	0026      	movs	r6, r4
   27092:	2500      	movs	r5, #0
   27094:	3714      	adds	r7, #20
   27096:	3614      	adds	r6, #20
   27098:	4643      	mov	r3, r8
   2709a:	6859      	ldr	r1, [r3, #4]
   2709c:	f7ff fd80 	bl	26ba0 <_Balloc>
   270a0:	4643      	mov	r3, r8
   270a2:	4681      	mov	r9, r0
   270a4:	60c5      	str	r5, [r0, #12]
   270a6:	6918      	ldr	r0, [r3, #16]
   270a8:	464d      	mov	r5, r9
   270aa:	0083      	lsls	r3, r0, #2
   270ac:	469c      	mov	ip, r3
   270ae:	6923      	ldr	r3, [r4, #16]
   270b0:	44bc      	add	ip, r7
   270b2:	009b      	lsls	r3, r3, #2
   270b4:	4698      	mov	r8, r3
   270b6:	2300      	movs	r3, #0
   270b8:	44b0      	add	r8, r6
   270ba:	3514      	adds	r5, #20
   270bc:	469a      	mov	sl, r3
   270be:	e000      	b.n	270c2 <__mdiff+0x86>
   270c0:	0027      	movs	r7, r4
   270c2:	ce04      	ldmia	r6!, {r2}
   270c4:	003c      	movs	r4, r7
   270c6:	4693      	mov	fp, r2
   270c8:	4659      	mov	r1, fp
   270ca:	cc08      	ldmia	r4!, {r3}
   270cc:	0409      	lsls	r1, r1, #16
   270ce:	041a      	lsls	r2, r3, #16
   270d0:	0c12      	lsrs	r2, r2, #16
   270d2:	4452      	add	r2, sl
   270d4:	0c09      	lsrs	r1, r1, #16
   270d6:	1a52      	subs	r2, r2, r1
   270d8:	0c19      	lsrs	r1, r3, #16
   270da:	465b      	mov	r3, fp
   270dc:	0c1b      	lsrs	r3, r3, #16
   270de:	1acb      	subs	r3, r1, r3
   270e0:	1411      	asrs	r1, r2, #16
   270e2:	185b      	adds	r3, r3, r1
   270e4:	0412      	lsls	r2, r2, #16
   270e6:	1419      	asrs	r1, r3, #16
   270e8:	0c12      	lsrs	r2, r2, #16
   270ea:	041b      	lsls	r3, r3, #16
   270ec:	468a      	mov	sl, r1
   270ee:	4313      	orrs	r3, r2
   270f0:	1d29      	adds	r1, r5, #4
   270f2:	602b      	str	r3, [r5, #0]
   270f4:	000d      	movs	r5, r1
   270f6:	45b0      	cmp	r8, r6
   270f8:	d8e2      	bhi.n	270c0 <__mdiff+0x84>
   270fa:	45a4      	cmp	ip, r4
   270fc:	d916      	bls.n	2712c <__mdiff+0xf0>
   270fe:	cc08      	ldmia	r4!, {r3}
   27100:	041a      	lsls	r2, r3, #16
   27102:	0c12      	lsrs	r2, r2, #16
   27104:	4452      	add	r2, sl
   27106:	1416      	asrs	r6, r2, #16
   27108:	0c1b      	lsrs	r3, r3, #16
   2710a:	199b      	adds	r3, r3, r6
   2710c:	0412      	lsls	r2, r2, #16
   2710e:	141e      	asrs	r6, r3, #16
   27110:	0c12      	lsrs	r2, r2, #16
   27112:	041b      	lsls	r3, r3, #16
   27114:	4313      	orrs	r3, r2
   27116:	46b2      	mov	sl, r6
   27118:	c508      	stmia	r5!, {r3}
   2711a:	45a4      	cmp	ip, r4
   2711c:	d8ef      	bhi.n	270fe <__mdiff+0xc2>
   2711e:	4662      	mov	r2, ip
   27120:	2403      	movs	r4, #3
   27122:	1bd2      	subs	r2, r2, r7
   27124:	3a05      	subs	r2, #5
   27126:	43a2      	bics	r2, r4
   27128:	3204      	adds	r2, #4
   2712a:	1889      	adds	r1, r1, r2
   2712c:	3904      	subs	r1, #4
   2712e:	2b00      	cmp	r3, #0
   27130:	d104      	bne.n	2713c <__mdiff+0x100>
   27132:	3904      	subs	r1, #4
   27134:	680b      	ldr	r3, [r1, #0]
   27136:	3801      	subs	r0, #1
   27138:	2b00      	cmp	r3, #0
   2713a:	d0fa      	beq.n	27132 <__mdiff+0xf6>
   2713c:	464b      	mov	r3, r9
   2713e:	6118      	str	r0, [r3, #16]
   27140:	4648      	mov	r0, r9
   27142:	bc3c      	pop	{r2, r3, r4, r5}
   27144:	4690      	mov	r8, r2
   27146:	4699      	mov	r9, r3
   27148:	46a2      	mov	sl, r4
   2714a:	46ab      	mov	fp, r5
   2714c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2714e:	2100      	movs	r1, #0
   27150:	f7ff fd26 	bl	26ba0 <_Balloc>
   27154:	2301      	movs	r3, #1
   27156:	6103      	str	r3, [r0, #16]
   27158:	2300      	movs	r3, #0
   2715a:	4681      	mov	r9, r0
   2715c:	6143      	str	r3, [r0, #20]
   2715e:	e7ef      	b.n	27140 <__mdiff+0x104>
   27160:	4666      	mov	r6, ip
   27162:	e799      	b.n	27098 <__mdiff+0x5c>
   27164:	0027      	movs	r7, r4
   27166:	000e      	movs	r6, r1
   27168:	46a0      	mov	r8, r4
   2716a:	3714      	adds	r7, #20
   2716c:	3614      	adds	r6, #20
   2716e:	000c      	movs	r4, r1
   27170:	2501      	movs	r5, #1
   27172:	e791      	b.n	27098 <__mdiff+0x5c>

00027174 <__d2b>:
   27174:	b5f0      	push	{r4, r5, r6, r7, lr}
   27176:	2101      	movs	r1, #1
   27178:	001c      	movs	r4, r3
   2717a:	b083      	sub	sp, #12
   2717c:	9e08      	ldr	r6, [sp, #32]
   2717e:	0015      	movs	r5, r2
   27180:	f7ff fd0e 	bl	26ba0 <_Balloc>
   27184:	0323      	lsls	r3, r4, #12
   27186:	0064      	lsls	r4, r4, #1
   27188:	0007      	movs	r7, r0
   2718a:	0b1b      	lsrs	r3, r3, #12
   2718c:	0d64      	lsrs	r4, r4, #21
   2718e:	d002      	beq.n	27196 <__d2b+0x22>
   27190:	2280      	movs	r2, #128	; 0x80
   27192:	0352      	lsls	r2, r2, #13
   27194:	4313      	orrs	r3, r2
   27196:	9301      	str	r3, [sp, #4]
   27198:	2d00      	cmp	r5, #0
   2719a:	d019      	beq.n	271d0 <__d2b+0x5c>
   2719c:	4668      	mov	r0, sp
   2719e:	9500      	str	r5, [sp, #0]
   271a0:	f7ff fd90 	bl	26cc4 <__lo0bits>
   271a4:	2800      	cmp	r0, #0
   271a6:	d130      	bne.n	2720a <__d2b+0x96>
   271a8:	9b00      	ldr	r3, [sp, #0]
   271aa:	617b      	str	r3, [r7, #20]
   271ac:	9b01      	ldr	r3, [sp, #4]
   271ae:	61bb      	str	r3, [r7, #24]
   271b0:	1e5a      	subs	r2, r3, #1
   271b2:	4193      	sbcs	r3, r2
   271b4:	1c5d      	adds	r5, r3, #1
   271b6:	613d      	str	r5, [r7, #16]
   271b8:	2c00      	cmp	r4, #0
   271ba:	d014      	beq.n	271e6 <__d2b+0x72>
   271bc:	4b19      	ldr	r3, [pc, #100]	; (27224 <__d2b+0xb0>)
   271be:	469c      	mov	ip, r3
   271c0:	2335      	movs	r3, #53	; 0x35
   271c2:	4464      	add	r4, ip
   271c4:	1824      	adds	r4, r4, r0
   271c6:	1a18      	subs	r0, r3, r0
   271c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   271ca:	6034      	str	r4, [r6, #0]
   271cc:	6018      	str	r0, [r3, #0]
   271ce:	e019      	b.n	27204 <__d2b+0x90>
   271d0:	a801      	add	r0, sp, #4
   271d2:	f7ff fd77 	bl	26cc4 <__lo0bits>
   271d6:	9b01      	ldr	r3, [sp, #4]
   271d8:	3020      	adds	r0, #32
   271da:	617b      	str	r3, [r7, #20]
   271dc:	2301      	movs	r3, #1
   271de:	2501      	movs	r5, #1
   271e0:	613b      	str	r3, [r7, #16]
   271e2:	2c00      	cmp	r4, #0
   271e4:	d1ea      	bne.n	271bc <__d2b+0x48>
   271e6:	4b10      	ldr	r3, [pc, #64]	; (27228 <__d2b+0xb4>)
   271e8:	469c      	mov	ip, r3
   271ea:	4b10      	ldr	r3, [pc, #64]	; (2722c <__d2b+0xb8>)
   271ec:	4460      	add	r0, ip
   271ee:	18eb      	adds	r3, r5, r3
   271f0:	009b      	lsls	r3, r3, #2
   271f2:	18fb      	adds	r3, r7, r3
   271f4:	6030      	str	r0, [r6, #0]
   271f6:	6958      	ldr	r0, [r3, #20]
   271f8:	f7ff fd4a 	bl	26c90 <__hi0bits>
   271fc:	016b      	lsls	r3, r5, #5
   271fe:	1a18      	subs	r0, r3, r0
   27200:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27202:	6018      	str	r0, [r3, #0]
   27204:	0038      	movs	r0, r7
   27206:	b003      	add	sp, #12
   27208:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2720a:	9b01      	ldr	r3, [sp, #4]
   2720c:	2220      	movs	r2, #32
   2720e:	0019      	movs	r1, r3
   27210:	1a12      	subs	r2, r2, r0
   27212:	4091      	lsls	r1, r2
   27214:	000a      	movs	r2, r1
   27216:	40c3      	lsrs	r3, r0
   27218:	9900      	ldr	r1, [sp, #0]
   2721a:	9301      	str	r3, [sp, #4]
   2721c:	430a      	orrs	r2, r1
   2721e:	617a      	str	r2, [r7, #20]
   27220:	e7c5      	b.n	271ae <__d2b+0x3a>
   27222:	46c0      	nop			; (mov r8, r8)
   27224:	fffffbcd 	.word	0xfffffbcd
   27228:	fffffbce 	.word	0xfffffbce
   2722c:	3fffffff 	.word	0x3fffffff

00027230 <_sbrk_r>:
   27230:	2300      	movs	r3, #0
   27232:	b570      	push	{r4, r5, r6, lr}
   27234:	4c06      	ldr	r4, [pc, #24]	; (27250 <_sbrk_r+0x20>)
   27236:	0005      	movs	r5, r0
   27238:	0008      	movs	r0, r1
   2723a:	6023      	str	r3, [r4, #0]
   2723c:	f7e2 f908 	bl	9450 <_sbrk>
   27240:	1c43      	adds	r3, r0, #1
   27242:	d000      	beq.n	27246 <_sbrk_r+0x16>
   27244:	bd70      	pop	{r4, r5, r6, pc}
   27246:	6823      	ldr	r3, [r4, #0]
   27248:	2b00      	cmp	r3, #0
   2724a:	d0fb      	beq.n	27244 <_sbrk_r+0x14>
   2724c:	602b      	str	r3, [r5, #0]
   2724e:	e7f9      	b.n	27244 <_sbrk_r+0x14>
   27250:	20005380 	.word	0x20005380

00027254 <__ssprint_r>:
   27254:	b5f0      	push	{r4, r5, r6, r7, lr}
   27256:	4657      	mov	r7, sl
   27258:	464e      	mov	r6, r9
   2725a:	46de      	mov	lr, fp
   2725c:	4645      	mov	r5, r8
   2725e:	b5e0      	push	{r5, r6, r7, lr}
   27260:	6893      	ldr	r3, [r2, #8]
   27262:	b083      	sub	sp, #12
   27264:	9001      	str	r0, [sp, #4]
   27266:	000e      	movs	r6, r1
   27268:	4692      	mov	sl, r2
   2726a:	2b00      	cmp	r3, #0
   2726c:	d070      	beq.n	27350 <__ssprint_r+0xfc>
   2726e:	688d      	ldr	r5, [r1, #8]
   27270:	6813      	ldr	r3, [r2, #0]
   27272:	002c      	movs	r4, r5
   27274:	6808      	ldr	r0, [r1, #0]
   27276:	001d      	movs	r5, r3
   27278:	e046      	b.n	27308 <__ssprint_r+0xb4>
   2727a:	2290      	movs	r2, #144	; 0x90
   2727c:	89b3      	ldrh	r3, [r6, #12]
   2727e:	00d2      	lsls	r2, r2, #3
   27280:	4213      	tst	r3, r2
   27282:	d030      	beq.n	272e6 <__ssprint_r+0x92>
   27284:	6931      	ldr	r1, [r6, #16]
   27286:	1a42      	subs	r2, r0, r1
   27288:	4693      	mov	fp, r2
   2728a:	6970      	ldr	r0, [r6, #20]
   2728c:	0042      	lsls	r2, r0, #1
   2728e:	1812      	adds	r2, r2, r0
   27290:	0fd0      	lsrs	r0, r2, #31
   27292:	1882      	adds	r2, r0, r2
   27294:	1052      	asrs	r2, r2, #1
   27296:	4690      	mov	r8, r2
   27298:	465a      	mov	r2, fp
   2729a:	1c50      	adds	r0, r2, #1
   2729c:	19c0      	adds	r0, r0, r7
   2729e:	4642      	mov	r2, r8
   272a0:	4540      	cmp	r0, r8
   272a2:	d901      	bls.n	272a8 <__ssprint_r+0x54>
   272a4:	4680      	mov	r8, r0
   272a6:	0002      	movs	r2, r0
   272a8:	2080      	movs	r0, #128	; 0x80
   272aa:	00c0      	lsls	r0, r0, #3
   272ac:	4203      	tst	r3, r0
   272ae:	d038      	beq.n	27322 <__ssprint_r+0xce>
   272b0:	0011      	movs	r1, r2
   272b2:	9801      	ldr	r0, [sp, #4]
   272b4:	f7ff f970 	bl	26598 <_malloc_r>
   272b8:	1e04      	subs	r4, r0, #0
   272ba:	d054      	beq.n	27366 <__ssprint_r+0x112>
   272bc:	465a      	mov	r2, fp
   272be:	6931      	ldr	r1, [r6, #16]
   272c0:	f7fc fcaa 	bl	23c18 <memcpy>
   272c4:	89b3      	ldrh	r3, [r6, #12]
   272c6:	4a2a      	ldr	r2, [pc, #168]	; (27370 <__ssprint_r+0x11c>)
   272c8:	4013      	ands	r3, r2
   272ca:	2280      	movs	r2, #128	; 0x80
   272cc:	4313      	orrs	r3, r2
   272ce:	81b3      	strh	r3, [r6, #12]
   272d0:	4643      	mov	r3, r8
   272d2:	0020      	movs	r0, r4
   272d4:	465a      	mov	r2, fp
   272d6:	6134      	str	r4, [r6, #16]
   272d8:	46b8      	mov	r8, r7
   272da:	003c      	movs	r4, r7
   272dc:	4458      	add	r0, fp
   272de:	6173      	str	r3, [r6, #20]
   272e0:	1a9b      	subs	r3, r3, r2
   272e2:	6030      	str	r0, [r6, #0]
   272e4:	60b3      	str	r3, [r6, #8]
   272e6:	4642      	mov	r2, r8
   272e8:	4649      	mov	r1, r9
   272ea:	f000 fa2d 	bl	27748 <memmove>
   272ee:	68b3      	ldr	r3, [r6, #8]
   272f0:	1b1c      	subs	r4, r3, r4
   272f2:	6833      	ldr	r3, [r6, #0]
   272f4:	60b4      	str	r4, [r6, #8]
   272f6:	4443      	add	r3, r8
   272f8:	6033      	str	r3, [r6, #0]
   272fa:	0018      	movs	r0, r3
   272fc:	4653      	mov	r3, sl
   272fe:	689b      	ldr	r3, [r3, #8]
   27300:	1bdf      	subs	r7, r3, r7
   27302:	4653      	mov	r3, sl
   27304:	609f      	str	r7, [r3, #8]
   27306:	d023      	beq.n	27350 <__ssprint_r+0xfc>
   27308:	686f      	ldr	r7, [r5, #4]
   2730a:	002b      	movs	r3, r5
   2730c:	3508      	adds	r5, #8
   2730e:	2f00      	cmp	r7, #0
   27310:	d0fa      	beq.n	27308 <__ssprint_r+0xb4>
   27312:	681b      	ldr	r3, [r3, #0]
   27314:	46a0      	mov	r8, r4
   27316:	4699      	mov	r9, r3
   27318:	42a7      	cmp	r7, r4
   2731a:	d2ae      	bcs.n	2727a <__ssprint_r+0x26>
   2731c:	003c      	movs	r4, r7
   2731e:	46b8      	mov	r8, r7
   27320:	e7e1      	b.n	272e6 <__ssprint_r+0x92>
   27322:	9801      	ldr	r0, [sp, #4]
   27324:	f000 fa60 	bl	277e8 <_realloc_r>
   27328:	1e04      	subs	r4, r0, #0
   2732a:	d1d1      	bne.n	272d0 <__ssprint_r+0x7c>
   2732c:	9c01      	ldr	r4, [sp, #4]
   2732e:	6931      	ldr	r1, [r6, #16]
   27330:	0020      	movs	r0, r4
   27332:	f000 f915 	bl	27560 <_free_r>
   27336:	230c      	movs	r3, #12
   27338:	6023      	str	r3, [r4, #0]
   2733a:	2240      	movs	r2, #64	; 0x40
   2733c:	89b3      	ldrh	r3, [r6, #12]
   2733e:	2001      	movs	r0, #1
   27340:	4313      	orrs	r3, r2
   27342:	81b3      	strh	r3, [r6, #12]
   27344:	4652      	mov	r2, sl
   27346:	2300      	movs	r3, #0
   27348:	4240      	negs	r0, r0
   2734a:	6093      	str	r3, [r2, #8]
   2734c:	6053      	str	r3, [r2, #4]
   2734e:	e003      	b.n	27358 <__ssprint_r+0x104>
   27350:	2300      	movs	r3, #0
   27352:	4652      	mov	r2, sl
   27354:	2000      	movs	r0, #0
   27356:	6053      	str	r3, [r2, #4]
   27358:	b003      	add	sp, #12
   2735a:	bc3c      	pop	{r2, r3, r4, r5}
   2735c:	4690      	mov	r8, r2
   2735e:	4699      	mov	r9, r3
   27360:	46a2      	mov	sl, r4
   27362:	46ab      	mov	fp, r5
   27364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27366:	230c      	movs	r3, #12
   27368:	9a01      	ldr	r2, [sp, #4]
   2736a:	6013      	str	r3, [r2, #0]
   2736c:	e7e5      	b.n	2733a <__ssprint_r+0xe6>
   2736e:	46c0      	nop			; (mov r8, r8)
   27370:	fffffb7f 	.word	0xfffffb7f

00027374 <__register_exitproc>:
   27374:	b5f0      	push	{r4, r5, r6, r7, lr}
   27376:	464e      	mov	r6, r9
   27378:	4645      	mov	r5, r8
   2737a:	46de      	mov	lr, fp
   2737c:	4657      	mov	r7, sl
   2737e:	b5e0      	push	{r5, r6, r7, lr}
   27380:	4d36      	ldr	r5, [pc, #216]	; (2745c <__register_exitproc+0xe8>)
   27382:	b083      	sub	sp, #12
   27384:	0006      	movs	r6, r0
   27386:	6828      	ldr	r0, [r5, #0]
   27388:	4698      	mov	r8, r3
   2738a:	000f      	movs	r7, r1
   2738c:	4691      	mov	r9, r2
   2738e:	f7ff f8ff 	bl	26590 <__retarget_lock_acquire_recursive>
   27392:	4b33      	ldr	r3, [pc, #204]	; (27460 <__register_exitproc+0xec>)
   27394:	681c      	ldr	r4, [r3, #0]
   27396:	23a4      	movs	r3, #164	; 0xa4
   27398:	005b      	lsls	r3, r3, #1
   2739a:	58e0      	ldr	r0, [r4, r3]
   2739c:	2800      	cmp	r0, #0
   2739e:	d052      	beq.n	27446 <__register_exitproc+0xd2>
   273a0:	6843      	ldr	r3, [r0, #4]
   273a2:	2b1f      	cmp	r3, #31
   273a4:	dc13      	bgt.n	273ce <__register_exitproc+0x5a>
   273a6:	1c5a      	adds	r2, r3, #1
   273a8:	9201      	str	r2, [sp, #4]
   273aa:	2e00      	cmp	r6, #0
   273ac:	d128      	bne.n	27400 <__register_exitproc+0x8c>
   273ae:	9a01      	ldr	r2, [sp, #4]
   273b0:	3302      	adds	r3, #2
   273b2:	009b      	lsls	r3, r3, #2
   273b4:	6042      	str	r2, [r0, #4]
   273b6:	501f      	str	r7, [r3, r0]
   273b8:	6828      	ldr	r0, [r5, #0]
   273ba:	f7ff f8eb 	bl	26594 <__retarget_lock_release_recursive>
   273be:	2000      	movs	r0, #0
   273c0:	b003      	add	sp, #12
   273c2:	bc3c      	pop	{r2, r3, r4, r5}
   273c4:	4690      	mov	r8, r2
   273c6:	4699      	mov	r9, r3
   273c8:	46a2      	mov	sl, r4
   273ca:	46ab      	mov	fp, r5
   273cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   273ce:	4b25      	ldr	r3, [pc, #148]	; (27464 <__register_exitproc+0xf0>)
   273d0:	2b00      	cmp	r3, #0
   273d2:	d03d      	beq.n	27450 <__register_exitproc+0xdc>
   273d4:	20c8      	movs	r0, #200	; 0xc8
   273d6:	0040      	lsls	r0, r0, #1
   273d8:	e000      	b.n	273dc <__register_exitproc+0x68>
   273da:	bf00      	nop
   273dc:	2800      	cmp	r0, #0
   273de:	d037      	beq.n	27450 <__register_exitproc+0xdc>
   273e0:	22a4      	movs	r2, #164	; 0xa4
   273e2:	2300      	movs	r3, #0
   273e4:	0052      	lsls	r2, r2, #1
   273e6:	58a1      	ldr	r1, [r4, r2]
   273e8:	6043      	str	r3, [r0, #4]
   273ea:	6001      	str	r1, [r0, #0]
   273ec:	50a0      	str	r0, [r4, r2]
   273ee:	3240      	adds	r2, #64	; 0x40
   273f0:	5083      	str	r3, [r0, r2]
   273f2:	3204      	adds	r2, #4
   273f4:	5083      	str	r3, [r0, r2]
   273f6:	3301      	adds	r3, #1
   273f8:	9301      	str	r3, [sp, #4]
   273fa:	2300      	movs	r3, #0
   273fc:	2e00      	cmp	r6, #0
   273fe:	d0d6      	beq.n	273ae <__register_exitproc+0x3a>
   27400:	009a      	lsls	r2, r3, #2
   27402:	4692      	mov	sl, r2
   27404:	4482      	add	sl, r0
   27406:	464a      	mov	r2, r9
   27408:	2188      	movs	r1, #136	; 0x88
   2740a:	4654      	mov	r4, sl
   2740c:	5062      	str	r2, [r4, r1]
   2740e:	22c4      	movs	r2, #196	; 0xc4
   27410:	0052      	lsls	r2, r2, #1
   27412:	4691      	mov	r9, r2
   27414:	4481      	add	r9, r0
   27416:	464a      	mov	r2, r9
   27418:	3987      	subs	r1, #135	; 0x87
   2741a:	4099      	lsls	r1, r3
   2741c:	6812      	ldr	r2, [r2, #0]
   2741e:	468b      	mov	fp, r1
   27420:	430a      	orrs	r2, r1
   27422:	4694      	mov	ip, r2
   27424:	464a      	mov	r2, r9
   27426:	4661      	mov	r1, ip
   27428:	6011      	str	r1, [r2, #0]
   2742a:	2284      	movs	r2, #132	; 0x84
   2742c:	4641      	mov	r1, r8
   2742e:	0052      	lsls	r2, r2, #1
   27430:	50a1      	str	r1, [r4, r2]
   27432:	2e02      	cmp	r6, #2
   27434:	d1bb      	bne.n	273ae <__register_exitproc+0x3a>
   27436:	0002      	movs	r2, r0
   27438:	465c      	mov	r4, fp
   2743a:	328d      	adds	r2, #141	; 0x8d
   2743c:	32ff      	adds	r2, #255	; 0xff
   2743e:	6811      	ldr	r1, [r2, #0]
   27440:	430c      	orrs	r4, r1
   27442:	6014      	str	r4, [r2, #0]
   27444:	e7b3      	b.n	273ae <__register_exitproc+0x3a>
   27446:	0020      	movs	r0, r4
   27448:	304d      	adds	r0, #77	; 0x4d
   2744a:	30ff      	adds	r0, #255	; 0xff
   2744c:	50e0      	str	r0, [r4, r3]
   2744e:	e7a7      	b.n	273a0 <__register_exitproc+0x2c>
   27450:	6828      	ldr	r0, [r5, #0]
   27452:	f7ff f89f 	bl	26594 <__retarget_lock_release_recursive>
   27456:	2001      	movs	r0, #1
   27458:	4240      	negs	r0, r0
   2745a:	e7b1      	b.n	273c0 <__register_exitproc+0x4c>
   2745c:	200006d0 	.word	0x200006d0
   27460:	00029c80 	.word	0x00029c80
   27464:	00000000 	.word	0x00000000

00027468 <_calloc_r>:
   27468:	b510      	push	{r4, lr}
   2746a:	4351      	muls	r1, r2
   2746c:	f7ff f894 	bl	26598 <_malloc_r>
   27470:	1e04      	subs	r4, r0, #0
   27472:	d01c      	beq.n	274ae <_calloc_r+0x46>
   27474:	0003      	movs	r3, r0
   27476:	3b08      	subs	r3, #8
   27478:	685a      	ldr	r2, [r3, #4]
   2747a:	2303      	movs	r3, #3
   2747c:	439a      	bics	r2, r3
   2747e:	3a04      	subs	r2, #4
   27480:	2a24      	cmp	r2, #36	; 0x24
   27482:	d816      	bhi.n	274b2 <_calloc_r+0x4a>
   27484:	0003      	movs	r3, r0
   27486:	2a13      	cmp	r2, #19
   27488:	d90d      	bls.n	274a6 <_calloc_r+0x3e>
   2748a:	2100      	movs	r1, #0
   2748c:	3308      	adds	r3, #8
   2748e:	6001      	str	r1, [r0, #0]
   27490:	6041      	str	r1, [r0, #4]
   27492:	2a1b      	cmp	r2, #27
   27494:	d907      	bls.n	274a6 <_calloc_r+0x3e>
   27496:	6081      	str	r1, [r0, #8]
   27498:	60c1      	str	r1, [r0, #12]
   2749a:	2a24      	cmp	r2, #36	; 0x24
   2749c:	d10d      	bne.n	274ba <_calloc_r+0x52>
   2749e:	0003      	movs	r3, r0
   274a0:	6101      	str	r1, [r0, #16]
   274a2:	3318      	adds	r3, #24
   274a4:	6141      	str	r1, [r0, #20]
   274a6:	2200      	movs	r2, #0
   274a8:	601a      	str	r2, [r3, #0]
   274aa:	605a      	str	r2, [r3, #4]
   274ac:	609a      	str	r2, [r3, #8]
   274ae:	0020      	movs	r0, r4
   274b0:	bd10      	pop	{r4, pc}
   274b2:	2100      	movs	r1, #0
   274b4:	f7fc fbf2 	bl	23c9c <memset>
   274b8:	e7f9      	b.n	274ae <_calloc_r+0x46>
   274ba:	0003      	movs	r3, r0
   274bc:	3310      	adds	r3, #16
   274be:	e7f2      	b.n	274a6 <_calloc_r+0x3e>

000274c0 <_malloc_trim_r>:
   274c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   274c2:	000c      	movs	r4, r1
   274c4:	0006      	movs	r6, r0
   274c6:	f7ff fb5b 	bl	26b80 <__malloc_lock>
   274ca:	4f20      	ldr	r7, [pc, #128]	; (2754c <_malloc_trim_r+0x8c>)
   274cc:	68bb      	ldr	r3, [r7, #8]
   274ce:	685d      	ldr	r5, [r3, #4]
   274d0:	2303      	movs	r3, #3
   274d2:	439d      	bics	r5, r3
   274d4:	4b1e      	ldr	r3, [pc, #120]	; (27550 <_malloc_trim_r+0x90>)
   274d6:	1b2c      	subs	r4, r5, r4
   274d8:	469c      	mov	ip, r3
   274da:	4464      	add	r4, ip
   274dc:	0b24      	lsrs	r4, r4, #12
   274de:	4b1d      	ldr	r3, [pc, #116]	; (27554 <_malloc_trim_r+0x94>)
   274e0:	3c01      	subs	r4, #1
   274e2:	0324      	lsls	r4, r4, #12
   274e4:	429c      	cmp	r4, r3
   274e6:	dd07      	ble.n	274f8 <_malloc_trim_r+0x38>
   274e8:	2100      	movs	r1, #0
   274ea:	0030      	movs	r0, r6
   274ec:	f7ff fea0 	bl	27230 <_sbrk_r>
   274f0:	68bb      	ldr	r3, [r7, #8]
   274f2:	195b      	adds	r3, r3, r5
   274f4:	4298      	cmp	r0, r3
   274f6:	d004      	beq.n	27502 <_malloc_trim_r+0x42>
   274f8:	0030      	movs	r0, r6
   274fa:	f7ff fb49 	bl	26b90 <__malloc_unlock>
   274fe:	2000      	movs	r0, #0
   27500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27502:	4261      	negs	r1, r4
   27504:	0030      	movs	r0, r6
   27506:	f7ff fe93 	bl	27230 <_sbrk_r>
   2750a:	1c43      	adds	r3, r0, #1
   2750c:	d00d      	beq.n	2752a <_malloc_trim_r+0x6a>
   2750e:	2201      	movs	r2, #1
   27510:	68bb      	ldr	r3, [r7, #8]
   27512:	1b2d      	subs	r5, r5, r4
   27514:	4315      	orrs	r5, r2
   27516:	605d      	str	r5, [r3, #4]
   27518:	4b0f      	ldr	r3, [pc, #60]	; (27558 <_malloc_trim_r+0x98>)
   2751a:	0030      	movs	r0, r6
   2751c:	681a      	ldr	r2, [r3, #0]
   2751e:	1b14      	subs	r4, r2, r4
   27520:	601c      	str	r4, [r3, #0]
   27522:	f7ff fb35 	bl	26b90 <__malloc_unlock>
   27526:	2001      	movs	r0, #1
   27528:	e7ea      	b.n	27500 <_malloc_trim_r+0x40>
   2752a:	2100      	movs	r1, #0
   2752c:	0030      	movs	r0, r6
   2752e:	f7ff fe7f 	bl	27230 <_sbrk_r>
   27532:	68ba      	ldr	r2, [r7, #8]
   27534:	1a83      	subs	r3, r0, r2
   27536:	2b0f      	cmp	r3, #15
   27538:	ddde      	ble.n	274f8 <_malloc_trim_r+0x38>
   2753a:	4908      	ldr	r1, [pc, #32]	; (2755c <_malloc_trim_r+0x9c>)
   2753c:	6809      	ldr	r1, [r1, #0]
   2753e:	1a40      	subs	r0, r0, r1
   27540:	4905      	ldr	r1, [pc, #20]	; (27558 <_malloc_trim_r+0x98>)
   27542:	6008      	str	r0, [r1, #0]
   27544:	2101      	movs	r1, #1
   27546:	430b      	orrs	r3, r1
   27548:	6053      	str	r3, [r2, #4]
   2754a:	e7d5      	b.n	274f8 <_malloc_trim_r+0x38>
   2754c:	200006d4 	.word	0x200006d4
   27550:	00000fef 	.word	0x00000fef
   27554:	00000fff 	.word	0x00000fff
   27558:	20000e54 	.word	0x20000e54
   2755c:	20000adc 	.word	0x20000adc

00027560 <_free_r>:
   27560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27562:	0004      	movs	r4, r0
   27564:	1e0d      	subs	r5, r1, #0
   27566:	d03c      	beq.n	275e2 <_free_r+0x82>
   27568:	f7ff fb0a 	bl	26b80 <__malloc_lock>
   2756c:	0029      	movs	r1, r5
   2756e:	3908      	subs	r1, #8
   27570:	6848      	ldr	r0, [r1, #4]
   27572:	2301      	movs	r3, #1
   27574:	0005      	movs	r5, r0
   27576:	2603      	movs	r6, #3
   27578:	439d      	bics	r5, r3
   2757a:	194a      	adds	r2, r1, r5
   2757c:	469c      	mov	ip, r3
   2757e:	4f61      	ldr	r7, [pc, #388]	; (27704 <_free_r+0x1a4>)
   27580:	6853      	ldr	r3, [r2, #4]
   27582:	43b3      	bics	r3, r6
   27584:	68be      	ldr	r6, [r7, #8]
   27586:	42b2      	cmp	r2, r6
   27588:	d056      	beq.n	27638 <_free_r+0xd8>
   2758a:	4666      	mov	r6, ip
   2758c:	6053      	str	r3, [r2, #4]
   2758e:	4206      	tst	r6, r0
   27590:	d10a      	bne.n	275a8 <_free_r+0x48>
   27592:	003e      	movs	r6, r7
   27594:	6808      	ldr	r0, [r1, #0]
   27596:	3608      	adds	r6, #8
   27598:	1a09      	subs	r1, r1, r0
   2759a:	182d      	adds	r5, r5, r0
   2759c:	6888      	ldr	r0, [r1, #8]
   2759e:	42b0      	cmp	r0, r6
   275a0:	d065      	beq.n	2766e <_free_r+0x10e>
   275a2:	68ce      	ldr	r6, [r1, #12]
   275a4:	60c6      	str	r6, [r0, #12]
   275a6:	60b0      	str	r0, [r6, #8]
   275a8:	2001      	movs	r0, #1
   275aa:	18d6      	adds	r6, r2, r3
   275ac:	6876      	ldr	r6, [r6, #4]
   275ae:	4206      	tst	r6, r0
   275b0:	d033      	beq.n	2761a <_free_r+0xba>
   275b2:	4b55      	ldr	r3, [pc, #340]	; (27708 <_free_r+0x1a8>)
   275b4:	4328      	orrs	r0, r5
   275b6:	6048      	str	r0, [r1, #4]
   275b8:	514d      	str	r5, [r1, r5]
   275ba:	429d      	cmp	r5, r3
   275bc:	d812      	bhi.n	275e4 <_free_r+0x84>
   275be:	08ed      	lsrs	r5, r5, #3
   275c0:	3bff      	subs	r3, #255	; 0xff
   275c2:	10aa      	asrs	r2, r5, #2
   275c4:	3bff      	subs	r3, #255	; 0xff
   275c6:	4093      	lsls	r3, r2
   275c8:	687a      	ldr	r2, [r7, #4]
   275ca:	00ed      	lsls	r5, r5, #3
   275cc:	4313      	orrs	r3, r2
   275ce:	607b      	str	r3, [r7, #4]
   275d0:	19ef      	adds	r7, r5, r7
   275d2:	68bb      	ldr	r3, [r7, #8]
   275d4:	60cf      	str	r7, [r1, #12]
   275d6:	608b      	str	r3, [r1, #8]
   275d8:	60b9      	str	r1, [r7, #8]
   275da:	60d9      	str	r1, [r3, #12]
   275dc:	0020      	movs	r0, r4
   275de:	f7ff fad7 	bl	26b90 <__malloc_unlock>
   275e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   275e4:	0a68      	lsrs	r0, r5, #9
   275e6:	2804      	cmp	r0, #4
   275e8:	d850      	bhi.n	2768c <_free_r+0x12c>
   275ea:	09a8      	lsrs	r0, r5, #6
   275ec:	0002      	movs	r2, r0
   275ee:	3039      	adds	r0, #57	; 0x39
   275f0:	3238      	adds	r2, #56	; 0x38
   275f2:	00c0      	lsls	r0, r0, #3
   275f4:	1838      	adds	r0, r7, r0
   275f6:	3808      	subs	r0, #8
   275f8:	6883      	ldr	r3, [r0, #8]
   275fa:	2603      	movs	r6, #3
   275fc:	4298      	cmp	r0, r3
   275fe:	d04c      	beq.n	2769a <_free_r+0x13a>
   27600:	685a      	ldr	r2, [r3, #4]
   27602:	43b2      	bics	r2, r6
   27604:	4295      	cmp	r5, r2
   27606:	d230      	bcs.n	2766a <_free_r+0x10a>
   27608:	689b      	ldr	r3, [r3, #8]
   2760a:	4298      	cmp	r0, r3
   2760c:	d1f8      	bne.n	27600 <_free_r+0xa0>
   2760e:	68c3      	ldr	r3, [r0, #12]
   27610:	60cb      	str	r3, [r1, #12]
   27612:	6088      	str	r0, [r1, #8]
   27614:	6099      	str	r1, [r3, #8]
   27616:	60c1      	str	r1, [r0, #12]
   27618:	e7e0      	b.n	275dc <_free_r+0x7c>
   2761a:	18ed      	adds	r5, r5, r3
   2761c:	4e3b      	ldr	r6, [pc, #236]	; (2770c <_free_r+0x1ac>)
   2761e:	6893      	ldr	r3, [r2, #8]
   27620:	42b3      	cmp	r3, r6
   27622:	d042      	beq.n	276aa <_free_r+0x14a>
   27624:	68d2      	ldr	r2, [r2, #12]
   27626:	4328      	orrs	r0, r5
   27628:	60da      	str	r2, [r3, #12]
   2762a:	6093      	str	r3, [r2, #8]
   2762c:	4b36      	ldr	r3, [pc, #216]	; (27708 <_free_r+0x1a8>)
   2762e:	6048      	str	r0, [r1, #4]
   27630:	514d      	str	r5, [r1, r5]
   27632:	429d      	cmp	r5, r3
   27634:	d8d6      	bhi.n	275e4 <_free_r+0x84>
   27636:	e7c2      	b.n	275be <_free_r+0x5e>
   27638:	4662      	mov	r2, ip
   2763a:	18eb      	adds	r3, r5, r3
   2763c:	4202      	tst	r2, r0
   2763e:	d106      	bne.n	2764e <_free_r+0xee>
   27640:	680a      	ldr	r2, [r1, #0]
   27642:	1a89      	subs	r1, r1, r2
   27644:	6888      	ldr	r0, [r1, #8]
   27646:	189b      	adds	r3, r3, r2
   27648:	68ca      	ldr	r2, [r1, #12]
   2764a:	60c2      	str	r2, [r0, #12]
   2764c:	6090      	str	r0, [r2, #8]
   2764e:	2201      	movs	r2, #1
   27650:	431a      	orrs	r2, r3
   27652:	604a      	str	r2, [r1, #4]
   27654:	4a2e      	ldr	r2, [pc, #184]	; (27710 <_free_r+0x1b0>)
   27656:	60b9      	str	r1, [r7, #8]
   27658:	6812      	ldr	r2, [r2, #0]
   2765a:	4293      	cmp	r3, r2
   2765c:	d3be      	bcc.n	275dc <_free_r+0x7c>
   2765e:	4b2d      	ldr	r3, [pc, #180]	; (27714 <_free_r+0x1b4>)
   27660:	0020      	movs	r0, r4
   27662:	6819      	ldr	r1, [r3, #0]
   27664:	f7ff ff2c 	bl	274c0 <_malloc_trim_r>
   27668:	e7b8      	b.n	275dc <_free_r+0x7c>
   2766a:	0018      	movs	r0, r3
   2766c:	e7cf      	b.n	2760e <_free_r+0xae>
   2766e:	4666      	mov	r6, ip
   27670:	18d0      	adds	r0, r2, r3
   27672:	6840      	ldr	r0, [r0, #4]
   27674:	4230      	tst	r0, r6
   27676:	d13f      	bne.n	276f8 <_free_r+0x198>
   27678:	6890      	ldr	r0, [r2, #8]
   2767a:	195d      	adds	r5, r3, r5
   2767c:	68d3      	ldr	r3, [r2, #12]
   2767e:	60c3      	str	r3, [r0, #12]
   27680:	6098      	str	r0, [r3, #8]
   27682:	4663      	mov	r3, ip
   27684:	432b      	orrs	r3, r5
   27686:	604b      	str	r3, [r1, #4]
   27688:	514d      	str	r5, [r1, r5]
   2768a:	e7a7      	b.n	275dc <_free_r+0x7c>
   2768c:	2814      	cmp	r0, #20
   2768e:	d814      	bhi.n	276ba <_free_r+0x15a>
   27690:	0002      	movs	r2, r0
   27692:	305c      	adds	r0, #92	; 0x5c
   27694:	325b      	adds	r2, #91	; 0x5b
   27696:	00c0      	lsls	r0, r0, #3
   27698:	e7ac      	b.n	275f4 <_free_r+0x94>
   2769a:	2301      	movs	r3, #1
   2769c:	1092      	asrs	r2, r2, #2
   2769e:	4093      	lsls	r3, r2
   276a0:	687a      	ldr	r2, [r7, #4]
   276a2:	4313      	orrs	r3, r2
   276a4:	607b      	str	r3, [r7, #4]
   276a6:	0003      	movs	r3, r0
   276a8:	e7b2      	b.n	27610 <_free_r+0xb0>
   276aa:	4328      	orrs	r0, r5
   276ac:	60d9      	str	r1, [r3, #12]
   276ae:	6099      	str	r1, [r3, #8]
   276b0:	60cb      	str	r3, [r1, #12]
   276b2:	608b      	str	r3, [r1, #8]
   276b4:	6048      	str	r0, [r1, #4]
   276b6:	514d      	str	r5, [r1, r5]
   276b8:	e790      	b.n	275dc <_free_r+0x7c>
   276ba:	2854      	cmp	r0, #84	; 0x54
   276bc:	d805      	bhi.n	276ca <_free_r+0x16a>
   276be:	0b28      	lsrs	r0, r5, #12
   276c0:	0002      	movs	r2, r0
   276c2:	306f      	adds	r0, #111	; 0x6f
   276c4:	326e      	adds	r2, #110	; 0x6e
   276c6:	00c0      	lsls	r0, r0, #3
   276c8:	e794      	b.n	275f4 <_free_r+0x94>
   276ca:	22aa      	movs	r2, #170	; 0xaa
   276cc:	0052      	lsls	r2, r2, #1
   276ce:	4290      	cmp	r0, r2
   276d0:	d805      	bhi.n	276de <_free_r+0x17e>
   276d2:	0be8      	lsrs	r0, r5, #15
   276d4:	0002      	movs	r2, r0
   276d6:	3078      	adds	r0, #120	; 0x78
   276d8:	3277      	adds	r2, #119	; 0x77
   276da:	00c0      	lsls	r0, r0, #3
   276dc:	e78a      	b.n	275f4 <_free_r+0x94>
   276de:	4a0e      	ldr	r2, [pc, #56]	; (27718 <_free_r+0x1b8>)
   276e0:	4290      	cmp	r0, r2
   276e2:	d805      	bhi.n	276f0 <_free_r+0x190>
   276e4:	0ca8      	lsrs	r0, r5, #18
   276e6:	0002      	movs	r2, r0
   276e8:	307d      	adds	r0, #125	; 0x7d
   276ea:	327c      	adds	r2, #124	; 0x7c
   276ec:	00c0      	lsls	r0, r0, #3
   276ee:	e781      	b.n	275f4 <_free_r+0x94>
   276f0:	20fe      	movs	r0, #254	; 0xfe
   276f2:	227e      	movs	r2, #126	; 0x7e
   276f4:	0080      	lsls	r0, r0, #2
   276f6:	e77d      	b.n	275f4 <_free_r+0x94>
   276f8:	4663      	mov	r3, ip
   276fa:	432b      	orrs	r3, r5
   276fc:	604b      	str	r3, [r1, #4]
   276fe:	6015      	str	r5, [r2, #0]
   27700:	e76c      	b.n	275dc <_free_r+0x7c>
   27702:	46c0      	nop			; (mov r8, r8)
   27704:	200006d4 	.word	0x200006d4
   27708:	000001ff 	.word	0x000001ff
   2770c:	200006dc 	.word	0x200006dc
   27710:	20000ae0 	.word	0x20000ae0
   27714:	20000e84 	.word	0x20000e84
   27718:	00000554 	.word	0x00000554

0002771c <__ascii_mbtowc>:
   2771c:	b082      	sub	sp, #8
   2771e:	2900      	cmp	r1, #0
   27720:	d00a      	beq.n	27738 <__ascii_mbtowc+0x1c>
   27722:	2a00      	cmp	r2, #0
   27724:	d00b      	beq.n	2773e <__ascii_mbtowc+0x22>
   27726:	2b00      	cmp	r3, #0
   27728:	d00b      	beq.n	27742 <__ascii_mbtowc+0x26>
   2772a:	7813      	ldrb	r3, [r2, #0]
   2772c:	600b      	str	r3, [r1, #0]
   2772e:	7810      	ldrb	r0, [r2, #0]
   27730:	1e43      	subs	r3, r0, #1
   27732:	4198      	sbcs	r0, r3
   27734:	b002      	add	sp, #8
   27736:	4770      	bx	lr
   27738:	a901      	add	r1, sp, #4
   2773a:	2a00      	cmp	r2, #0
   2773c:	d1f3      	bne.n	27726 <__ascii_mbtowc+0xa>
   2773e:	2000      	movs	r0, #0
   27740:	e7f8      	b.n	27734 <__ascii_mbtowc+0x18>
   27742:	2002      	movs	r0, #2
   27744:	4240      	negs	r0, r0
   27746:	e7f5      	b.n	27734 <__ascii_mbtowc+0x18>

00027748 <memmove>:
   27748:	b5f0      	push	{r4, r5, r6, r7, lr}
   2774a:	4288      	cmp	r0, r1
   2774c:	d90a      	bls.n	27764 <memmove+0x1c>
   2774e:	188b      	adds	r3, r1, r2
   27750:	4298      	cmp	r0, r3
   27752:	d207      	bcs.n	27764 <memmove+0x1c>
   27754:	1e53      	subs	r3, r2, #1
   27756:	2a00      	cmp	r2, #0
   27758:	d003      	beq.n	27762 <memmove+0x1a>
   2775a:	5cca      	ldrb	r2, [r1, r3]
   2775c:	54c2      	strb	r2, [r0, r3]
   2775e:	3b01      	subs	r3, #1
   27760:	d2fb      	bcs.n	2775a <memmove+0x12>
   27762:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27764:	0005      	movs	r5, r0
   27766:	2a0f      	cmp	r2, #15
   27768:	d808      	bhi.n	2777c <memmove+0x34>
   2776a:	2a00      	cmp	r2, #0
   2776c:	d0f9      	beq.n	27762 <memmove+0x1a>
   2776e:	2300      	movs	r3, #0
   27770:	5ccc      	ldrb	r4, [r1, r3]
   27772:	54ec      	strb	r4, [r5, r3]
   27774:	3301      	adds	r3, #1
   27776:	4293      	cmp	r3, r2
   27778:	d1fa      	bne.n	27770 <memmove+0x28>
   2777a:	e7f2      	b.n	27762 <memmove+0x1a>
   2777c:	000b      	movs	r3, r1
   2777e:	4303      	orrs	r3, r0
   27780:	079b      	lsls	r3, r3, #30
   27782:	d12d      	bne.n	277e0 <memmove+0x98>
   27784:	0015      	movs	r5, r2
   27786:	000c      	movs	r4, r1
   27788:	0003      	movs	r3, r0
   2778a:	3d10      	subs	r5, #16
   2778c:	092f      	lsrs	r7, r5, #4
   2778e:	3701      	adds	r7, #1
   27790:	013f      	lsls	r7, r7, #4
   27792:	19c7      	adds	r7, r0, r7
   27794:	6826      	ldr	r6, [r4, #0]
   27796:	601e      	str	r6, [r3, #0]
   27798:	6866      	ldr	r6, [r4, #4]
   2779a:	605e      	str	r6, [r3, #4]
   2779c:	68a6      	ldr	r6, [r4, #8]
   2779e:	609e      	str	r6, [r3, #8]
   277a0:	68e6      	ldr	r6, [r4, #12]
   277a2:	3410      	adds	r4, #16
   277a4:	60de      	str	r6, [r3, #12]
   277a6:	3310      	adds	r3, #16
   277a8:	429f      	cmp	r7, r3
   277aa:	d1f3      	bne.n	27794 <memmove+0x4c>
   277ac:	240f      	movs	r4, #15
   277ae:	43a5      	bics	r5, r4
   277b0:	3510      	adds	r5, #16
   277b2:	1949      	adds	r1, r1, r5
   277b4:	4014      	ands	r4, r2
   277b6:	1945      	adds	r5, r0, r5
   277b8:	2c03      	cmp	r4, #3
   277ba:	d913      	bls.n	277e4 <memmove+0x9c>
   277bc:	2300      	movs	r3, #0
   277be:	1f27      	subs	r7, r4, #4
   277c0:	08be      	lsrs	r6, r7, #2
   277c2:	3601      	adds	r6, #1
   277c4:	00b6      	lsls	r6, r6, #2
   277c6:	58cc      	ldr	r4, [r1, r3]
   277c8:	50ec      	str	r4, [r5, r3]
   277ca:	3304      	adds	r3, #4
   277cc:	42b3      	cmp	r3, r6
   277ce:	d1fa      	bne.n	277c6 <memmove+0x7e>
   277d0:	2603      	movs	r6, #3
   277d2:	43b7      	bics	r7, r6
   277d4:	1d3c      	adds	r4, r7, #4
   277d6:	1909      	adds	r1, r1, r4
   277d8:	192d      	adds	r5, r5, r4
   277da:	4032      	ands	r2, r6
   277dc:	d1c7      	bne.n	2776e <memmove+0x26>
   277de:	e7c0      	b.n	27762 <memmove+0x1a>
   277e0:	0005      	movs	r5, r0
   277e2:	e7c4      	b.n	2776e <memmove+0x26>
   277e4:	0022      	movs	r2, r4
   277e6:	e7c0      	b.n	2776a <memmove+0x22>

000277e8 <_realloc_r>:
   277e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   277ea:	464e      	mov	r6, r9
   277ec:	4645      	mov	r5, r8
   277ee:	46de      	mov	lr, fp
   277f0:	4657      	mov	r7, sl
   277f2:	b5e0      	push	{r5, r6, r7, lr}
   277f4:	b085      	sub	sp, #20
   277f6:	9001      	str	r0, [sp, #4]
   277f8:	000e      	movs	r6, r1
   277fa:	0015      	movs	r5, r2
   277fc:	2900      	cmp	r1, #0
   277fe:	d100      	bne.n	27802 <_realloc_r+0x1a>
   27800:	e09e      	b.n	27940 <_realloc_r+0x158>
   27802:	0037      	movs	r7, r6
   27804:	9801      	ldr	r0, [sp, #4]
   27806:	3f08      	subs	r7, #8
   27808:	f7ff f9ba 	bl	26b80 <__malloc_lock>
   2780c:	687a      	ldr	r2, [r7, #4]
   2780e:	2303      	movs	r3, #3
   27810:	0014      	movs	r4, r2
   27812:	439c      	bics	r4, r3
   27814:	002b      	movs	r3, r5
   27816:	330b      	adds	r3, #11
   27818:	46b9      	mov	r9, r7
   2781a:	2b16      	cmp	r3, #22
   2781c:	d847      	bhi.n	278ae <_realloc_r+0xc6>
   2781e:	2110      	movs	r1, #16
   27820:	2310      	movs	r3, #16
   27822:	4688      	mov	r8, r1
   27824:	4545      	cmp	r5, r8
   27826:	d846      	bhi.n	278b6 <_realloc_r+0xce>
   27828:	429c      	cmp	r4, r3
   2782a:	da49      	bge.n	278c0 <_realloc_r+0xd8>
   2782c:	49cc      	ldr	r1, [pc, #816]	; (27b60 <_realloc_r+0x378>)
   2782e:	1938      	adds	r0, r7, r4
   27830:	468b      	mov	fp, r1
   27832:	6889      	ldr	r1, [r1, #8]
   27834:	9002      	str	r0, [sp, #8]
   27836:	4288      	cmp	r0, r1
   27838:	d100      	bne.n	2783c <_realloc_r+0x54>
   2783a:	e0c2      	b.n	279c2 <_realloc_r+0x1da>
   2783c:	2101      	movs	r1, #1
   2783e:	468a      	mov	sl, r1
   27840:	6840      	ldr	r0, [r0, #4]
   27842:	0001      	movs	r1, r0
   27844:	9003      	str	r0, [sp, #12]
   27846:	4650      	mov	r0, sl
   27848:	4381      	bics	r1, r0
   2784a:	468c      	mov	ip, r1
   2784c:	9902      	ldr	r1, [sp, #8]
   2784e:	468b      	mov	fp, r1
   27850:	44dc      	add	ip, fp
   27852:	4661      	mov	r1, ip
   27854:	6849      	ldr	r1, [r1, #4]
   27856:	4201      	tst	r1, r0
   27858:	d04d      	beq.n	278f6 <_realloc_r+0x10e>
   2785a:	4210      	tst	r0, r2
   2785c:	d100      	bne.n	27860 <_realloc_r+0x78>
   2785e:	e0a2      	b.n	279a6 <_realloc_r+0x1be>
   27860:	0029      	movs	r1, r5
   27862:	9801      	ldr	r0, [sp, #4]
   27864:	f7fe fe98 	bl	26598 <_malloc_r>
   27868:	1e05      	subs	r5, r0, #0
   2786a:	d039      	beq.n	278e0 <_realloc_r+0xf8>
   2786c:	2301      	movs	r3, #1
   2786e:	0002      	movs	r2, r0
   27870:	6879      	ldr	r1, [r7, #4]
   27872:	3a08      	subs	r2, #8
   27874:	4399      	bics	r1, r3
   27876:	187f      	adds	r7, r7, r1
   27878:	42ba      	cmp	r2, r7
   2787a:	d100      	bne.n	2787e <_realloc_r+0x96>
   2787c:	e12e      	b.n	27adc <_realloc_r+0x2f4>
   2787e:	1f22      	subs	r2, r4, #4
   27880:	2a24      	cmp	r2, #36	; 0x24
   27882:	d900      	bls.n	27886 <_realloc_r+0x9e>
   27884:	e114      	b.n	27ab0 <_realloc_r+0x2c8>
   27886:	2a13      	cmp	r2, #19
   27888:	d900      	bls.n	2788c <_realloc_r+0xa4>
   2788a:	e0e8      	b.n	27a5e <_realloc_r+0x276>
   2788c:	0003      	movs	r3, r0
   2788e:	0032      	movs	r2, r6
   27890:	6811      	ldr	r1, [r2, #0]
   27892:	6019      	str	r1, [r3, #0]
   27894:	6851      	ldr	r1, [r2, #4]
   27896:	6059      	str	r1, [r3, #4]
   27898:	6892      	ldr	r2, [r2, #8]
   2789a:	609a      	str	r2, [r3, #8]
   2789c:	9c01      	ldr	r4, [sp, #4]
   2789e:	0031      	movs	r1, r6
   278a0:	0020      	movs	r0, r4
   278a2:	f7ff fe5d 	bl	27560 <_free_r>
   278a6:	0020      	movs	r0, r4
   278a8:	f7ff f972 	bl	26b90 <__malloc_unlock>
   278ac:	e01b      	b.n	278e6 <_realloc_r+0xfe>
   278ae:	2107      	movs	r1, #7
   278b0:	438b      	bics	r3, r1
   278b2:	4698      	mov	r8, r3
   278b4:	d5b6      	bpl.n	27824 <_realloc_r+0x3c>
   278b6:	230c      	movs	r3, #12
   278b8:	9a01      	ldr	r2, [sp, #4]
   278ba:	2500      	movs	r5, #0
   278bc:	6013      	str	r3, [r2, #0]
   278be:	e012      	b.n	278e6 <_realloc_r+0xfe>
   278c0:	0035      	movs	r5, r6
   278c2:	4643      	mov	r3, r8
   278c4:	1ae3      	subs	r3, r4, r3
   278c6:	2b0f      	cmp	r3, #15
   278c8:	d825      	bhi.n	27916 <_realloc_r+0x12e>
   278ca:	464b      	mov	r3, r9
   278cc:	2201      	movs	r2, #1
   278ce:	4649      	mov	r1, r9
   278d0:	685b      	ldr	r3, [r3, #4]
   278d2:	4013      	ands	r3, r2
   278d4:	4323      	orrs	r3, r4
   278d6:	604b      	str	r3, [r1, #4]
   278d8:	444c      	add	r4, r9
   278da:	6863      	ldr	r3, [r4, #4]
   278dc:	431a      	orrs	r2, r3
   278de:	6062      	str	r2, [r4, #4]
   278e0:	9801      	ldr	r0, [sp, #4]
   278e2:	f7ff f955 	bl	26b90 <__malloc_unlock>
   278e6:	0028      	movs	r0, r5
   278e8:	b005      	add	sp, #20
   278ea:	bc3c      	pop	{r2, r3, r4, r5}
   278ec:	4690      	mov	r8, r2
   278ee:	4699      	mov	r9, r3
   278f0:	46a2      	mov	sl, r4
   278f2:	46ab      	mov	fp, r5
   278f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   278f6:	2103      	movs	r1, #3
   278f8:	9803      	ldr	r0, [sp, #12]
   278fa:	468c      	mov	ip, r1
   278fc:	4388      	bics	r0, r1
   278fe:	1821      	adds	r1, r4, r0
   27900:	468b      	mov	fp, r1
   27902:	4299      	cmp	r1, r3
   27904:	db21      	blt.n	2794a <_realloc_r+0x162>
   27906:	9a02      	ldr	r2, [sp, #8]
   27908:	0035      	movs	r5, r6
   2790a:	68d3      	ldr	r3, [r2, #12]
   2790c:	6892      	ldr	r2, [r2, #8]
   2790e:	465c      	mov	r4, fp
   27910:	60d3      	str	r3, [r2, #12]
   27912:	609a      	str	r2, [r3, #8]
   27914:	e7d5      	b.n	278c2 <_realloc_r+0xda>
   27916:	464a      	mov	r2, r9
   27918:	2001      	movs	r0, #1
   2791a:	4646      	mov	r6, r8
   2791c:	6852      	ldr	r2, [r2, #4]
   2791e:	4649      	mov	r1, r9
   27920:	4002      	ands	r2, r0
   27922:	4332      	orrs	r2, r6
   27924:	464e      	mov	r6, r9
   27926:	4441      	add	r1, r8
   27928:	4303      	orrs	r3, r0
   2792a:	6072      	str	r2, [r6, #4]
   2792c:	444c      	add	r4, r9
   2792e:	604b      	str	r3, [r1, #4]
   27930:	6863      	ldr	r3, [r4, #4]
   27932:	3108      	adds	r1, #8
   27934:	4318      	orrs	r0, r3
   27936:	6060      	str	r0, [r4, #4]
   27938:	9801      	ldr	r0, [sp, #4]
   2793a:	f7ff fe11 	bl	27560 <_free_r>
   2793e:	e7cf      	b.n	278e0 <_realloc_r+0xf8>
   27940:	0011      	movs	r1, r2
   27942:	f7fe fe29 	bl	26598 <_malloc_r>
   27946:	0005      	movs	r5, r0
   27948:	e7cd      	b.n	278e6 <_realloc_r+0xfe>
   2794a:	4651      	mov	r1, sl
   2794c:	4211      	tst	r1, r2
   2794e:	d000      	beq.n	27952 <_realloc_r+0x16a>
   27950:	e786      	b.n	27860 <_realloc_r+0x78>
   27952:	4661      	mov	r1, ip
   27954:	683a      	ldr	r2, [r7, #0]
   27956:	1aba      	subs	r2, r7, r2
   27958:	4692      	mov	sl, r2
   2795a:	6852      	ldr	r2, [r2, #4]
   2795c:	438a      	bics	r2, r1
   2795e:	1880      	adds	r0, r0, r2
   27960:	4683      	mov	fp, r0
   27962:	44a3      	add	fp, r4
   27964:	459b      	cmp	fp, r3
   27966:	db26      	blt.n	279b6 <_realloc_r+0x1ce>
   27968:	9a02      	ldr	r2, [sp, #8]
   2796a:	68d3      	ldr	r3, [r2, #12]
   2796c:	6892      	ldr	r2, [r2, #8]
   2796e:	60d3      	str	r3, [r2, #12]
   27970:	609a      	str	r2, [r3, #8]
   27972:	4653      	mov	r3, sl
   27974:	4652      	mov	r2, sl
   27976:	4655      	mov	r5, sl
   27978:	6892      	ldr	r2, [r2, #8]
   2797a:	68db      	ldr	r3, [r3, #12]
   2797c:	3508      	adds	r5, #8
   2797e:	60d3      	str	r3, [r2, #12]
   27980:	609a      	str	r2, [r3, #8]
   27982:	1f22      	subs	r2, r4, #4
   27984:	2a24      	cmp	r2, #36	; 0x24
   27986:	d900      	bls.n	2798a <_realloc_r+0x1a2>
   27988:	e096      	b.n	27ab8 <_realloc_r+0x2d0>
   2798a:	2a13      	cmp	r2, #19
   2798c:	d972      	bls.n	27a74 <_realloc_r+0x28c>
   2798e:	4653      	mov	r3, sl
   27990:	6831      	ldr	r1, [r6, #0]
   27992:	6099      	str	r1, [r3, #8]
   27994:	6871      	ldr	r1, [r6, #4]
   27996:	60d9      	str	r1, [r3, #12]
   27998:	2a1b      	cmp	r2, #27
   2799a:	d900      	bls.n	2799e <_realloc_r+0x1b6>
   2799c:	e0a4      	b.n	27ae8 <_realloc_r+0x300>
   2799e:	0032      	movs	r2, r6
   279a0:	3310      	adds	r3, #16
   279a2:	3208      	adds	r2, #8
   279a4:	e068      	b.n	27a78 <_realloc_r+0x290>
   279a6:	683a      	ldr	r2, [r7, #0]
   279a8:	1aba      	subs	r2, r7, r2
   279aa:	4692      	mov	sl, r2
   279ac:	4651      	mov	r1, sl
   279ae:	2203      	movs	r2, #3
   279b0:	6849      	ldr	r1, [r1, #4]
   279b2:	4391      	bics	r1, r2
   279b4:	000a      	movs	r2, r1
   279b6:	4693      	mov	fp, r2
   279b8:	44a3      	add	fp, r4
   279ba:	459b      	cmp	fp, r3
   279bc:	da00      	bge.n	279c0 <_realloc_r+0x1d8>
   279be:	e74f      	b.n	27860 <_realloc_r+0x78>
   279c0:	e7d7      	b.n	27972 <_realloc_r+0x18a>
   279c2:	2003      	movs	r0, #3
   279c4:	9902      	ldr	r1, [sp, #8]
   279c6:	4684      	mov	ip, r0
   279c8:	6849      	ldr	r1, [r1, #4]
   279ca:	4381      	bics	r1, r0
   279cc:	4640      	mov	r0, r8
   279ce:	1909      	adds	r1, r1, r4
   279d0:	3010      	adds	r0, #16
   279d2:	9002      	str	r0, [sp, #8]
   279d4:	4281      	cmp	r1, r0
   279d6:	da58      	bge.n	27a8a <_realloc_r+0x2a2>
   279d8:	07d2      	lsls	r2, r2, #31
   279da:	d500      	bpl.n	279de <_realloc_r+0x1f6>
   279dc:	e740      	b.n	27860 <_realloc_r+0x78>
   279de:	4660      	mov	r0, ip
   279e0:	683a      	ldr	r2, [r7, #0]
   279e2:	1aba      	subs	r2, r7, r2
   279e4:	4692      	mov	sl, r2
   279e6:	6852      	ldr	r2, [r2, #4]
   279e8:	4382      	bics	r2, r0
   279ea:	9802      	ldr	r0, [sp, #8]
   279ec:	1851      	adds	r1, r2, r1
   279ee:	9103      	str	r1, [sp, #12]
   279f0:	4288      	cmp	r0, r1
   279f2:	dce0      	bgt.n	279b6 <_realloc_r+0x1ce>
   279f4:	4653      	mov	r3, sl
   279f6:	4652      	mov	r2, sl
   279f8:	4655      	mov	r5, sl
   279fa:	6892      	ldr	r2, [r2, #8]
   279fc:	68db      	ldr	r3, [r3, #12]
   279fe:	3508      	adds	r5, #8
   27a00:	60d3      	str	r3, [r2, #12]
   27a02:	609a      	str	r2, [r3, #8]
   27a04:	1f22      	subs	r2, r4, #4
   27a06:	2a24      	cmp	r2, #36	; 0x24
   27a08:	d900      	bls.n	27a0c <_realloc_r+0x224>
   27a0a:	e08e      	b.n	27b2a <_realloc_r+0x342>
   27a0c:	2a13      	cmp	r2, #19
   27a0e:	d800      	bhi.n	27a12 <_realloc_r+0x22a>
   27a10:	e088      	b.n	27b24 <_realloc_r+0x33c>
   27a12:	4653      	mov	r3, sl
   27a14:	6831      	ldr	r1, [r6, #0]
   27a16:	6099      	str	r1, [r3, #8]
   27a18:	6871      	ldr	r1, [r6, #4]
   27a1a:	60d9      	str	r1, [r3, #12]
   27a1c:	2a1b      	cmp	r2, #27
   27a1e:	d900      	bls.n	27a22 <_realloc_r+0x23a>
   27a20:	e088      	b.n	27b34 <_realloc_r+0x34c>
   27a22:	0032      	movs	r2, r6
   27a24:	3310      	adds	r3, #16
   27a26:	3208      	adds	r2, #8
   27a28:	6811      	ldr	r1, [r2, #0]
   27a2a:	6019      	str	r1, [r3, #0]
   27a2c:	6851      	ldr	r1, [r2, #4]
   27a2e:	6059      	str	r1, [r3, #4]
   27a30:	6892      	ldr	r2, [r2, #8]
   27a32:	609a      	str	r2, [r3, #8]
   27a34:	4651      	mov	r1, sl
   27a36:	465b      	mov	r3, fp
   27a38:	4642      	mov	r2, r8
   27a3a:	4441      	add	r1, r8
   27a3c:	6099      	str	r1, [r3, #8]
   27a3e:	9b03      	ldr	r3, [sp, #12]
   27a40:	9801      	ldr	r0, [sp, #4]
   27a42:	1a9a      	subs	r2, r3, r2
   27a44:	2301      	movs	r3, #1
   27a46:	431a      	orrs	r2, r3
   27a48:	604a      	str	r2, [r1, #4]
   27a4a:	4652      	mov	r2, sl
   27a4c:	6852      	ldr	r2, [r2, #4]
   27a4e:	4013      	ands	r3, r2
   27a50:	4642      	mov	r2, r8
   27a52:	4313      	orrs	r3, r2
   27a54:	4652      	mov	r2, sl
   27a56:	6053      	str	r3, [r2, #4]
   27a58:	f7ff f89a 	bl	26b90 <__malloc_unlock>
   27a5c:	e743      	b.n	278e6 <_realloc_r+0xfe>
   27a5e:	6833      	ldr	r3, [r6, #0]
   27a60:	6003      	str	r3, [r0, #0]
   27a62:	6873      	ldr	r3, [r6, #4]
   27a64:	6043      	str	r3, [r0, #4]
   27a66:	2a1b      	cmp	r2, #27
   27a68:	d82d      	bhi.n	27ac6 <_realloc_r+0x2de>
   27a6a:	0003      	movs	r3, r0
   27a6c:	0032      	movs	r2, r6
   27a6e:	3308      	adds	r3, #8
   27a70:	3208      	adds	r2, #8
   27a72:	e70d      	b.n	27890 <_realloc_r+0xa8>
   27a74:	002b      	movs	r3, r5
   27a76:	0032      	movs	r2, r6
   27a78:	6811      	ldr	r1, [r2, #0]
   27a7a:	465c      	mov	r4, fp
   27a7c:	6019      	str	r1, [r3, #0]
   27a7e:	6851      	ldr	r1, [r2, #4]
   27a80:	46d1      	mov	r9, sl
   27a82:	6059      	str	r1, [r3, #4]
   27a84:	6892      	ldr	r2, [r2, #8]
   27a86:	609a      	str	r2, [r3, #8]
   27a88:	e71b      	b.n	278c2 <_realloc_r+0xda>
   27a8a:	4643      	mov	r3, r8
   27a8c:	18fa      	adds	r2, r7, r3
   27a8e:	465b      	mov	r3, fp
   27a90:	609a      	str	r2, [r3, #8]
   27a92:	4643      	mov	r3, r8
   27a94:	1ac9      	subs	r1, r1, r3
   27a96:	2301      	movs	r3, #1
   27a98:	4319      	orrs	r1, r3
   27a9a:	6051      	str	r1, [r2, #4]
   27a9c:	687a      	ldr	r2, [r7, #4]
   27a9e:	9801      	ldr	r0, [sp, #4]
   27aa0:	4013      	ands	r3, r2
   27aa2:	4642      	mov	r2, r8
   27aa4:	4313      	orrs	r3, r2
   27aa6:	607b      	str	r3, [r7, #4]
   27aa8:	f7ff f872 	bl	26b90 <__malloc_unlock>
   27aac:	0035      	movs	r5, r6
   27aae:	e71a      	b.n	278e6 <_realloc_r+0xfe>
   27ab0:	0031      	movs	r1, r6
   27ab2:	f7ff fe49 	bl	27748 <memmove>
   27ab6:	e6f1      	b.n	2789c <_realloc_r+0xb4>
   27ab8:	0031      	movs	r1, r6
   27aba:	0028      	movs	r0, r5
   27abc:	f7ff fe44 	bl	27748 <memmove>
   27ac0:	465c      	mov	r4, fp
   27ac2:	46d1      	mov	r9, sl
   27ac4:	e6fd      	b.n	278c2 <_realloc_r+0xda>
   27ac6:	68b3      	ldr	r3, [r6, #8]
   27ac8:	6083      	str	r3, [r0, #8]
   27aca:	68f3      	ldr	r3, [r6, #12]
   27acc:	60c3      	str	r3, [r0, #12]
   27ace:	2a24      	cmp	r2, #36	; 0x24
   27ad0:	d015      	beq.n	27afe <_realloc_r+0x316>
   27ad2:	0003      	movs	r3, r0
   27ad4:	0032      	movs	r2, r6
   27ad6:	3310      	adds	r3, #16
   27ad8:	3210      	adds	r2, #16
   27ada:	e6d9      	b.n	27890 <_realloc_r+0xa8>
   27adc:	6853      	ldr	r3, [r2, #4]
   27ade:	2203      	movs	r2, #3
   27ae0:	4393      	bics	r3, r2
   27ae2:	18e4      	adds	r4, r4, r3
   27ae4:	0035      	movs	r5, r6
   27ae6:	e6ec      	b.n	278c2 <_realloc_r+0xda>
   27ae8:	4653      	mov	r3, sl
   27aea:	68b1      	ldr	r1, [r6, #8]
   27aec:	6119      	str	r1, [r3, #16]
   27aee:	68f1      	ldr	r1, [r6, #12]
   27af0:	6159      	str	r1, [r3, #20]
   27af2:	2a24      	cmp	r2, #36	; 0x24
   27af4:	d00c      	beq.n	27b10 <_realloc_r+0x328>
   27af6:	0032      	movs	r2, r6
   27af8:	3318      	adds	r3, #24
   27afa:	3210      	adds	r2, #16
   27afc:	e7bc      	b.n	27a78 <_realloc_r+0x290>
   27afe:	6933      	ldr	r3, [r6, #16]
   27b00:	0032      	movs	r2, r6
   27b02:	6103      	str	r3, [r0, #16]
   27b04:	0003      	movs	r3, r0
   27b06:	6971      	ldr	r1, [r6, #20]
   27b08:	3318      	adds	r3, #24
   27b0a:	3218      	adds	r2, #24
   27b0c:	6141      	str	r1, [r0, #20]
   27b0e:	e6bf      	b.n	27890 <_realloc_r+0xa8>
   27b10:	4653      	mov	r3, sl
   27b12:	6932      	ldr	r2, [r6, #16]
   27b14:	4651      	mov	r1, sl
   27b16:	619a      	str	r2, [r3, #24]
   27b18:	0032      	movs	r2, r6
   27b1a:	6970      	ldr	r0, [r6, #20]
   27b1c:	3320      	adds	r3, #32
   27b1e:	3218      	adds	r2, #24
   27b20:	61c8      	str	r0, [r1, #28]
   27b22:	e7a9      	b.n	27a78 <_realloc_r+0x290>
   27b24:	002b      	movs	r3, r5
   27b26:	0032      	movs	r2, r6
   27b28:	e77e      	b.n	27a28 <_realloc_r+0x240>
   27b2a:	0031      	movs	r1, r6
   27b2c:	0028      	movs	r0, r5
   27b2e:	f7ff fe0b 	bl	27748 <memmove>
   27b32:	e77f      	b.n	27a34 <_realloc_r+0x24c>
   27b34:	4653      	mov	r3, sl
   27b36:	68b1      	ldr	r1, [r6, #8]
   27b38:	6119      	str	r1, [r3, #16]
   27b3a:	68f1      	ldr	r1, [r6, #12]
   27b3c:	6159      	str	r1, [r3, #20]
   27b3e:	2a24      	cmp	r2, #36	; 0x24
   27b40:	d003      	beq.n	27b4a <_realloc_r+0x362>
   27b42:	0032      	movs	r2, r6
   27b44:	3318      	adds	r3, #24
   27b46:	3210      	adds	r2, #16
   27b48:	e76e      	b.n	27a28 <_realloc_r+0x240>
   27b4a:	4653      	mov	r3, sl
   27b4c:	6932      	ldr	r2, [r6, #16]
   27b4e:	4651      	mov	r1, sl
   27b50:	619a      	str	r2, [r3, #24]
   27b52:	0032      	movs	r2, r6
   27b54:	6970      	ldr	r0, [r6, #20]
   27b56:	3320      	adds	r3, #32
   27b58:	3218      	adds	r2, #24
   27b5a:	61c8      	str	r0, [r1, #28]
   27b5c:	e764      	b.n	27a28 <_realloc_r+0x240>
   27b5e:	46c0      	nop			; (mov r8, r8)
   27b60:	200006d4 	.word	0x200006d4

00027b64 <__ascii_wctomb>:
   27b64:	2900      	cmp	r1, #0
   27b66:	d004      	beq.n	27b72 <__ascii_wctomb+0xe>
   27b68:	2aff      	cmp	r2, #255	; 0xff
   27b6a:	d804      	bhi.n	27b76 <__ascii_wctomb+0x12>
   27b6c:	2001      	movs	r0, #1
   27b6e:	700a      	strb	r2, [r1, #0]
   27b70:	4770      	bx	lr
   27b72:	2000      	movs	r0, #0
   27b74:	e7fc      	b.n	27b70 <__ascii_wctomb+0xc>
   27b76:	238a      	movs	r3, #138	; 0x8a
   27b78:	6003      	str	r3, [r0, #0]
   27b7a:	2001      	movs	r0, #1
   27b7c:	4240      	negs	r0, r0
   27b7e:	e7f7      	b.n	27b70 <__ascii_wctomb+0xc>

00027b80 <__aeabi_uldivmod>:
   27b80:	2b00      	cmp	r3, #0
   27b82:	d111      	bne.n	27ba8 <__aeabi_uldivmod+0x28>
   27b84:	2a00      	cmp	r2, #0
   27b86:	d10f      	bne.n	27ba8 <__aeabi_uldivmod+0x28>
   27b88:	2900      	cmp	r1, #0
   27b8a:	d100      	bne.n	27b8e <__aeabi_uldivmod+0xe>
   27b8c:	2800      	cmp	r0, #0
   27b8e:	d002      	beq.n	27b96 <__aeabi_uldivmod+0x16>
   27b90:	2100      	movs	r1, #0
   27b92:	43c9      	mvns	r1, r1
   27b94:	1c08      	adds	r0, r1, #0
   27b96:	b407      	push	{r0, r1, r2}
   27b98:	4802      	ldr	r0, [pc, #8]	; (27ba4 <__aeabi_uldivmod+0x24>)
   27b9a:	a102      	add	r1, pc, #8	; (adr r1, 27ba4 <__aeabi_uldivmod+0x24>)
   27b9c:	1840      	adds	r0, r0, r1
   27b9e:	9002      	str	r0, [sp, #8]
   27ba0:	bd03      	pop	{r0, r1, pc}
   27ba2:	46c0      	nop			; (mov r8, r8)
   27ba4:	ffff9301 	.word	0xffff9301
   27ba8:	b403      	push	{r0, r1}
   27baa:	4668      	mov	r0, sp
   27bac:	b501      	push	{r0, lr}
   27bae:	9802      	ldr	r0, [sp, #8]
   27bb0:	f000 f806 	bl	27bc0 <__udivmoddi4>
   27bb4:	9b01      	ldr	r3, [sp, #4]
   27bb6:	469e      	mov	lr, r3
   27bb8:	b002      	add	sp, #8
   27bba:	bc0c      	pop	{r2, r3}
   27bbc:	4770      	bx	lr
   27bbe:	46c0      	nop			; (mov r8, r8)

00027bc0 <__udivmoddi4>:
   27bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   27bc2:	4657      	mov	r7, sl
   27bc4:	464e      	mov	r6, r9
   27bc6:	4645      	mov	r5, r8
   27bc8:	46de      	mov	lr, fp
   27bca:	b5e0      	push	{r5, r6, r7, lr}
   27bcc:	0004      	movs	r4, r0
   27bce:	b083      	sub	sp, #12
   27bd0:	000d      	movs	r5, r1
   27bd2:	4692      	mov	sl, r2
   27bd4:	4699      	mov	r9, r3
   27bd6:	428b      	cmp	r3, r1
   27bd8:	d82f      	bhi.n	27c3a <__udivmoddi4+0x7a>
   27bda:	d02c      	beq.n	27c36 <__udivmoddi4+0x76>
   27bdc:	4649      	mov	r1, r9
   27bde:	4650      	mov	r0, sl
   27be0:	f000 f8ae 	bl	27d40 <__clzdi2>
   27be4:	0029      	movs	r1, r5
   27be6:	0006      	movs	r6, r0
   27be8:	0020      	movs	r0, r4
   27bea:	f000 f8a9 	bl	27d40 <__clzdi2>
   27bee:	1a33      	subs	r3, r6, r0
   27bf0:	4698      	mov	r8, r3
   27bf2:	3b20      	subs	r3, #32
   27bf4:	469b      	mov	fp, r3
   27bf6:	d500      	bpl.n	27bfa <__udivmoddi4+0x3a>
   27bf8:	e074      	b.n	27ce4 <__udivmoddi4+0x124>
   27bfa:	4653      	mov	r3, sl
   27bfc:	465a      	mov	r2, fp
   27bfe:	4093      	lsls	r3, r2
   27c00:	001f      	movs	r7, r3
   27c02:	4653      	mov	r3, sl
   27c04:	4642      	mov	r2, r8
   27c06:	4093      	lsls	r3, r2
   27c08:	001e      	movs	r6, r3
   27c0a:	42af      	cmp	r7, r5
   27c0c:	d829      	bhi.n	27c62 <__udivmoddi4+0xa2>
   27c0e:	d026      	beq.n	27c5e <__udivmoddi4+0x9e>
   27c10:	465b      	mov	r3, fp
   27c12:	1ba4      	subs	r4, r4, r6
   27c14:	41bd      	sbcs	r5, r7
   27c16:	2b00      	cmp	r3, #0
   27c18:	da00      	bge.n	27c1c <__udivmoddi4+0x5c>
   27c1a:	e079      	b.n	27d10 <__udivmoddi4+0x150>
   27c1c:	2200      	movs	r2, #0
   27c1e:	2300      	movs	r3, #0
   27c20:	9200      	str	r2, [sp, #0]
   27c22:	9301      	str	r3, [sp, #4]
   27c24:	2301      	movs	r3, #1
   27c26:	465a      	mov	r2, fp
   27c28:	4093      	lsls	r3, r2
   27c2a:	9301      	str	r3, [sp, #4]
   27c2c:	2301      	movs	r3, #1
   27c2e:	4642      	mov	r2, r8
   27c30:	4093      	lsls	r3, r2
   27c32:	9300      	str	r3, [sp, #0]
   27c34:	e019      	b.n	27c6a <__udivmoddi4+0xaa>
   27c36:	4282      	cmp	r2, r0
   27c38:	d9d0      	bls.n	27bdc <__udivmoddi4+0x1c>
   27c3a:	2200      	movs	r2, #0
   27c3c:	2300      	movs	r3, #0
   27c3e:	9200      	str	r2, [sp, #0]
   27c40:	9301      	str	r3, [sp, #4]
   27c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   27c44:	2b00      	cmp	r3, #0
   27c46:	d001      	beq.n	27c4c <__udivmoddi4+0x8c>
   27c48:	601c      	str	r4, [r3, #0]
   27c4a:	605d      	str	r5, [r3, #4]
   27c4c:	9800      	ldr	r0, [sp, #0]
   27c4e:	9901      	ldr	r1, [sp, #4]
   27c50:	b003      	add	sp, #12
   27c52:	bc3c      	pop	{r2, r3, r4, r5}
   27c54:	4690      	mov	r8, r2
   27c56:	4699      	mov	r9, r3
   27c58:	46a2      	mov	sl, r4
   27c5a:	46ab      	mov	fp, r5
   27c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27c5e:	42a3      	cmp	r3, r4
   27c60:	d9d6      	bls.n	27c10 <__udivmoddi4+0x50>
   27c62:	2200      	movs	r2, #0
   27c64:	2300      	movs	r3, #0
   27c66:	9200      	str	r2, [sp, #0]
   27c68:	9301      	str	r3, [sp, #4]
   27c6a:	4643      	mov	r3, r8
   27c6c:	2b00      	cmp	r3, #0
   27c6e:	d0e8      	beq.n	27c42 <__udivmoddi4+0x82>
   27c70:	07fb      	lsls	r3, r7, #31
   27c72:	0872      	lsrs	r2, r6, #1
   27c74:	431a      	orrs	r2, r3
   27c76:	4646      	mov	r6, r8
   27c78:	087b      	lsrs	r3, r7, #1
   27c7a:	e00e      	b.n	27c9a <__udivmoddi4+0xda>
   27c7c:	42ab      	cmp	r3, r5
   27c7e:	d101      	bne.n	27c84 <__udivmoddi4+0xc4>
   27c80:	42a2      	cmp	r2, r4
   27c82:	d80c      	bhi.n	27c9e <__udivmoddi4+0xde>
   27c84:	1aa4      	subs	r4, r4, r2
   27c86:	419d      	sbcs	r5, r3
   27c88:	2001      	movs	r0, #1
   27c8a:	1924      	adds	r4, r4, r4
   27c8c:	416d      	adcs	r5, r5
   27c8e:	2100      	movs	r1, #0
   27c90:	3e01      	subs	r6, #1
   27c92:	1824      	adds	r4, r4, r0
   27c94:	414d      	adcs	r5, r1
   27c96:	2e00      	cmp	r6, #0
   27c98:	d006      	beq.n	27ca8 <__udivmoddi4+0xe8>
   27c9a:	42ab      	cmp	r3, r5
   27c9c:	d9ee      	bls.n	27c7c <__udivmoddi4+0xbc>
   27c9e:	3e01      	subs	r6, #1
   27ca0:	1924      	adds	r4, r4, r4
   27ca2:	416d      	adcs	r5, r5
   27ca4:	2e00      	cmp	r6, #0
   27ca6:	d1f8      	bne.n	27c9a <__udivmoddi4+0xda>
   27ca8:	465b      	mov	r3, fp
   27caa:	9800      	ldr	r0, [sp, #0]
   27cac:	9901      	ldr	r1, [sp, #4]
   27cae:	1900      	adds	r0, r0, r4
   27cb0:	4169      	adcs	r1, r5
   27cb2:	2b00      	cmp	r3, #0
   27cb4:	db22      	blt.n	27cfc <__udivmoddi4+0x13c>
   27cb6:	002b      	movs	r3, r5
   27cb8:	465a      	mov	r2, fp
   27cba:	40d3      	lsrs	r3, r2
   27cbc:	002a      	movs	r2, r5
   27cbe:	4644      	mov	r4, r8
   27cc0:	40e2      	lsrs	r2, r4
   27cc2:	001c      	movs	r4, r3
   27cc4:	465b      	mov	r3, fp
   27cc6:	0015      	movs	r5, r2
   27cc8:	2b00      	cmp	r3, #0
   27cca:	db2c      	blt.n	27d26 <__udivmoddi4+0x166>
   27ccc:	0026      	movs	r6, r4
   27cce:	409e      	lsls	r6, r3
   27cd0:	0033      	movs	r3, r6
   27cd2:	0026      	movs	r6, r4
   27cd4:	4647      	mov	r7, r8
   27cd6:	40be      	lsls	r6, r7
   27cd8:	0032      	movs	r2, r6
   27cda:	1a80      	subs	r0, r0, r2
   27cdc:	4199      	sbcs	r1, r3
   27cde:	9000      	str	r0, [sp, #0]
   27ce0:	9101      	str	r1, [sp, #4]
   27ce2:	e7ae      	b.n	27c42 <__udivmoddi4+0x82>
   27ce4:	4642      	mov	r2, r8
   27ce6:	2320      	movs	r3, #32
   27ce8:	1a9b      	subs	r3, r3, r2
   27cea:	4652      	mov	r2, sl
   27cec:	40da      	lsrs	r2, r3
   27cee:	4641      	mov	r1, r8
   27cf0:	0013      	movs	r3, r2
   27cf2:	464a      	mov	r2, r9
   27cf4:	408a      	lsls	r2, r1
   27cf6:	0017      	movs	r7, r2
   27cf8:	431f      	orrs	r7, r3
   27cfa:	e782      	b.n	27c02 <__udivmoddi4+0x42>
   27cfc:	4642      	mov	r2, r8
   27cfe:	2320      	movs	r3, #32
   27d00:	1a9b      	subs	r3, r3, r2
   27d02:	002a      	movs	r2, r5
   27d04:	4646      	mov	r6, r8
   27d06:	409a      	lsls	r2, r3
   27d08:	0023      	movs	r3, r4
   27d0a:	40f3      	lsrs	r3, r6
   27d0c:	4313      	orrs	r3, r2
   27d0e:	e7d5      	b.n	27cbc <__udivmoddi4+0xfc>
   27d10:	4642      	mov	r2, r8
   27d12:	2320      	movs	r3, #32
   27d14:	2100      	movs	r1, #0
   27d16:	1a9b      	subs	r3, r3, r2
   27d18:	2200      	movs	r2, #0
   27d1a:	9100      	str	r1, [sp, #0]
   27d1c:	9201      	str	r2, [sp, #4]
   27d1e:	2201      	movs	r2, #1
   27d20:	40da      	lsrs	r2, r3
   27d22:	9201      	str	r2, [sp, #4]
   27d24:	e782      	b.n	27c2c <__udivmoddi4+0x6c>
   27d26:	4642      	mov	r2, r8
   27d28:	2320      	movs	r3, #32
   27d2a:	0026      	movs	r6, r4
   27d2c:	1a9b      	subs	r3, r3, r2
   27d2e:	40de      	lsrs	r6, r3
   27d30:	002f      	movs	r7, r5
   27d32:	46b4      	mov	ip, r6
   27d34:	4097      	lsls	r7, r2
   27d36:	4666      	mov	r6, ip
   27d38:	003b      	movs	r3, r7
   27d3a:	4333      	orrs	r3, r6
   27d3c:	e7c9      	b.n	27cd2 <__udivmoddi4+0x112>
   27d3e:	46c0      	nop			; (mov r8, r8)

00027d40 <__clzdi2>:
   27d40:	b510      	push	{r4, lr}
   27d42:	2900      	cmp	r1, #0
   27d44:	d103      	bne.n	27d4e <__clzdi2+0xe>
   27d46:	f7f9 f927 	bl	20f98 <__clzsi2>
   27d4a:	3020      	adds	r0, #32
   27d4c:	e002      	b.n	27d54 <__clzdi2+0x14>
   27d4e:	1c08      	adds	r0, r1, #0
   27d50:	f7f9 f922 	bl	20f98 <__clzsi2>
   27d54:	bd10      	pop	{r4, pc}
   27d56:	46c0      	nop			; (mov r8, r8)

00027d58 <_usb_device_irq_bits>:
   27d58:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........
   27d68:	12a0 0000 12ae 0000 12bc 0000 12ca 0000     ................
   27d78:	12d8 0000                                   ....

00027d7c <colorStrWhite>:
   27d7c:	6857 7469 2065 0000                         White ..

00027d84 <colorStrRed>:
   27d84:	6552 2064 2020 0000                         Red   ..

00027d8c <colorStrBlue>:
   27d8c:	6c42 6575 2020 0000                         Blue  ..

00027d94 <colorStrGreen>:
   27d94:	7247 6565 206e 0000                         Green ..

00027d9c <colorStrPurple>:
   27d9c:	7550 7072 656c 0000                         Purple..

00027da4 <colorStrCyan>:
   27da4:	7943 6e61 2020 0000                         Cyan  ..

00027dac <colorStrCustom>:
   27dac:	7563 7473 6d6f 0000 6341 3163 4820 6769     custom..Acc1 Hig
   27dbc:	3a68 2520 2e30 6634 0000 0000 6341 3163     h: %0.4f....Acc1
   27dcc:	4c20 776f 203a 3025 342e 0066 6341 3263      Low: %0.4f.Acc2
   27ddc:	4820 6769 3a68 2520 2e30 6634 0000 0000      High: %0.4f....
   27dec:	6341 3263 4c20 776f 203a 3025 342e 0066     Acc2 Low: %0.4f.
   27dfc:	6f43 706d 2031 6948 6867 203a 3025 342e     Comp1 High: %0.4
   27e0c:	0066 0000 6f43 706d 2031 6f4c 3a77 2520     f...Comp1 Low: %
   27e1c:	2e30 6634 0000 0000 6f43 706d 2032 6948     0.4f....Comp2 Hi
   27e2c:	6867 203a 3025 342e 0066 0000 6f43 706d     gh: %0.4f...Comp
   27e3c:	2032 6f4c 3a77 2520 2e30 6634 0000 0000     2 Low: %0.4f....
   27e4c:	6341 2063 6564 746c 2061 7861 6425 203a     Acc delta ax%d: 
   27e5c:	3025 332e 2566 0025 6d43 2070 6564 746c     %0.3f%%.Cmp delt
   27e6c:	2061 7861 6425 203a 3025 332e 2566 0025     a ax%d: %0.3f%%.
   27e7c:	6e49 2063 6544 746c 3a61 2520 2e30 6633     Inc Delta: %0.3f
   27e8c:	6420 6765 0000 0000 7a41 206d 6544 746c      deg....Azm Delt
   27e9c:	3a61 2520 2e30 6633 6420 6765 0000 0000     a: %0.3f deg....
   27eac:	616c 6573 2072 6163 636c 6520 7272 726f     laser calc error
   27ebc:	0000 0000 616c 6573 2072 6577 6b61 7320     ....laser weak s
   27ecc:	6769 616e 006c 0000 616c 6573 2072 7473     ignal...laser st
   27edc:	6f72 676e 7320 6769 616e 006c 616c 6573     rong signal.lase
   27eec:	2072 6f63 6d6d 7420 6d69 6f65 7475 0000     r comm timeout..
   27efc:	616c 6573 2072 7265 6f72 2c72 7520 6b6e     laser error, unk
   27f0c:	6f6e 6e77 0000 0000 6e75 6572 6f63 6e67     nown....unrecogn
   27f1c:	7a69 6465 6520 7272 726f 0000 3ecc 0000     ized error...>..
   27f2c:	3cf2 0000 3d30 0000 3d6e 0000 3dac 0000     .<..0=..n=...=..
   27f3c:	3dea 0000 3e16 0000 3e72 0000 3e84 0000     .=...>..r>...>..
   27f4c:	3e96 0000 3ecc 0000 3ea8 0000 3eba 0000     .>...>...>...>..
   27f5c:	3e42 0000 3e5a 0000                         B>..Z>..

00027f64 <sd_mmc_trans_units>:
   27f64:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00027f80 <sd_trans_multipliers>:
   27f80:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   27f90:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   27fa0:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   27fb0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00027fc0 <mmc_trans_multipliers>:
   27fc0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   27fd0:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   27fe0:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   27ff0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   28000:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   28010:	2074 2230 0000 0000 5322 2f44 4d4d 2043     t 0"...."SD/MMC 
   28020:	6143 6472 5320 6f6c 2074 2231 0000 0000     Card Slot 1"....

00028030 <lun_desc>:
   28030:	0945 0001 09b5 0001 0a21 0001 0a95 0001     E.......!.......
   28040:	0add 0001 0c41 0001 0ddd 0001 0ea1 0001     ....A...........
   28050:	0f55 0001 8000 0002 095d 0001 09d5 0001     U.......].......
   28060:	0a49 0001 0aad 0001 0af5 0001 0c6d 0001     I...........m...
   28070:	0e09 0001 0ec5 0001 0f79 0001 8018 0002     ........y.......
   28080:	6a3c 0000 6a4a 0000 6a58 0000 6a66 0000     <j..Jj..Xj..fj..
   28090:	6a74 0000 7040 0000 704e 0000 705c 0000     tj..@p..Np..\p..
   280a0:	706a 0000 7078 0000 0908 0b0a 0d0c 0000     jp..xp..........
   280b0:	8dc8 0000 8dd6 0000 8de4 0000 8df2 0000     ................
   280c0:	8e00 0000 2000 4200 2400 4200 0800 4300     ..... .B.$.B...C
   280d0:	1b1b 001d 0002 0000 0100 0000 0002 0000     ................
   280e0:	0200 0000 0003 0000 0004 0000 3032 3025     ............20%0
   280f0:	7832 3025 7832 3025 7832 255f 3230 2578     2x%02x%02x_%02x%
   28100:	3230 2578 3230 5f78 6163 696c 7262 7461     02x%02x_calibrat
   28110:	6f69 5f6e 6572 6f70 7472 742e 7478 0000     ion_report.txt..
   28120:	6143 696c 7262 7461 6f69 206e 6552 6f70     Calibration Repo
   28130:	7472 0a0d 0a0d 6144 6574 6120 646e 5420     rt....Date and T
   28140:	6d69 3a65 0a0d 5959 5959 4d2e 2e4d 4444     ime:..YYYY.MM.DD
   28150:	4840 3a48 6d6d 733a 0d73 320a 2530 3230     @HH:mm:ss..20%02
   28160:	2e78 3025 7832 252e 3230 4078 3025 7832     x.%02x.%02x@%02x
   28170:	253a 3230 3a78 3025 7832 0a0d 0a0d 0000     :%02x:%02x......
   28180:	6f53 7466 6177 6572 5620 7265 6973 6e6f     Software Version
   28190:	203a 3125 312e 0d66 0d0a 000a 654d 7361     : %1.1f.....Meas
   281a0:	7275 6d65 6e65 7374 203a 6425 0a0d 2d34     urements: %d..4-
   281b0:	6f50 6e69 2074 7247 756f 7370 203a 6425     Point Groups: %d
   281c0:	0a0d 0a0d 0000 0000 6e41 6c67 2065 7245     ........Angle Er
   281d0:	6f72 2072 7453 6e61 6164 6472 4420 7665     ror Standard Dev
   281e0:	6169 6974 6e6f 0d3a 200a 4120 697a 756d     iation:..  Azimu
   281f0:	6874 203a 3325 362e 2066 6564 7267 6565     th: %3.6f degree
   28200:	0d73 200a 4920 636e 696c 616e 6974 6e6f     s..  Inclination
   28210:	203a 3325 362e 2066 6564 7267 6565 0d73     : %3.6f degrees.
   28220:	000a 0000 614d 6e67 7469 6475 2065 7245     ....Magnitude Er
   28230:	6f72 2072 7453 6e61 6164 6472 4420 7665     ror Standard Dev
   28240:	6169 6974 6e6f 0d3a 200a 4120 6363 6c65     iation:..  Accel
   28250:	7265 6d6f 7465 7265 3120 203a 3325 362e     erometer 1: %3.6
   28260:	2066 2525 0a0d 2020 6341 6563 656c 6f72     f %%..  Accelero
   28270:	656d 6574 2072 3a32 2520 2e33 6636 2520     meter 2: %3.6f %
   28280:	0d25 200a 4320 6d6f 6170 7373 3120 203a     %..  Compass 1: 
   28290:	3325 362e 2066 2525 0a0d 2020 6f43 706d     %3.6f %%..  Comp
   282a0:	7361 2073 3a32 2520 2e33 6636 2520 0d25     ass 2: %3.6f %%.
   282b0:	000a 0000 7841 7369 4420 7369 6170 6972     ....Axis Dispari
   282c0:	7974 0d3a 200a 4120 6363 6c65 7265 6d6f     ty:..  Accelerom
   282d0:	7465 7265 203a 2d58 3325 362e 2566 2025     eter: X-%3.6f%% 
   282e0:	2d59 3325 362e 2566 2025 2d5a 3325 362e     Y-%3.6f%% Z-%3.6
   282f0:	2566 0d25 000a 0000 2020 6f43 706d 7361     f%%.....  Compas
   28300:	3a73 5820 252d 2e33 6636 2525 5920 252d     s: X-%3.6f%% Y-%
   28310:	2e33 6636 2525 5a20 252d 2e33 6636 2525     3.6f%% Z-%3.6f%%
   28320:	0a0d 0a0d 0a0d 0000 6e49 6c63 6e69 6d6f     ........Inclinom
   28330:	7465 7265 3120 4320 6c61 6269 6172 6974     eter 1 Calibrati
   28340:	6e6f 0d3a 000a 0000 6e49 6c63 6e69 6d6f     on:.....Inclinom
   28350:	7465 7265 3220 4320 6c61 6269 6172 6974     eter 2 Calibrati
   28360:	6e6f 0d3a 000a 0000 6f43 706d 7361 2073     on:.....Compass 
   28370:	2031 6143 696c 7262 7461 6f69 3a6e 0a0d     1 Calibration:..
   28380:	0000 0000 6f43 706d 7361 2073 2032 6143     ....Compass 2 Ca
   28390:	696c 7262 7461 6f69 3a6e 0a0d 0000 0000     libration:......
   283a0:	2020 6147 6e69 5820 203a 2e25 6636 0a0d       Gain X: %.6f..
   283b0:	2020 6147 6e69 5920 203a 2e25 6636 0a0d       Gain Y: %.6f..
   283c0:	2020 6147 6e69 3a5a 2520 362e 0d66 000a       GainZ: %.6f...
   283d0:	2020 664f 7366 7465 5820 203a 2e25 6636       Offset X: %.6f
   283e0:	0a0d 2020 664f 7366 7465 5920 203a 2e25     ..  Offset Y: %.
   283f0:	6636 0a0d 2020 664f 7366 7465 5a20 203a     6f..  Offset Z: 
   28400:	2e25 6636 0a0d 0000 2020 7841 7369 4d20     %.6f....  Axis M
   28410:	7369 6c61 6769 6d6e 6e65 2c74 5920 582d     isalignment, Y-X
   28420:	203a 2e25 6636 6420 6765 0a0d 2020 7841     : %.6f deg..  Ax
   28430:	7369 4d20 7369 6c61 6769 6d6e 6e65 2c74     is Misalignment,
   28440:	5a20 582d 203a 2e25 6636 6420 6765 0a0d      Z-X: %.6f deg..
   28450:	2020 7841 7369 4d20 7369 6c61 6769 6d6e       Axis Misalignm
   28460:	6e65 2c74 5a20 592d 203a 2e25 6636 6420     ent, Z-Y: %.6f d
   28470:	6765 0a0d 0000 0000 2020 6150 6b63 6761     eg......  Packag
   28480:	2065 694d 6173 696c 6e67 656d 746e 4120     e Misalignment A
   28490:	6f62 7475 5820 203a 2e25 6633 6420 6765     bout X: %.3f deg
   284a0:	0a0d 2020 6150 6b63 6761 2065 694d 6173     ..  Package Misa
   284b0:	696c 6e67 656d 746e 4120 6f62 7475 5920     lignment About Y
   284c0:	203a 2e25 6633 6420 6765 0a0d 2020 6150     : %.3f deg..  Pa
   284d0:	6b63 6761 2065 694d 6173 696c 6e67 656d     ckage Misalignme
   284e0:	746e 4120 6f62 7475 5a20 203a 2e25 6633     nt About Z: %.3f
   284f0:	6420 6765 0a0d 0a0d 0000 0000 0a0d 6143      deg..........Ca
   28500:	696c 7262 7461 6f69 206e 654d 7361 7275     libration Measur
   28510:	6d65 6e65 7374 0d3a 000a 0000 2020 2020     ements:.....    
   28520:	2020 2020 2020 2020 2020 2020 6e55 6163                 Unca
   28530:	696c 7262 7461 6465 2020 2020 2020 2020     librated        
   28540:	2020 2020 2020 2020 2020 2020 4320 6c61                  Cal
   28550:	6269 6172 6574 0d64 000a 0000 7247 756f     ibrated.....Grou
   28560:	2c70 5020 696f 746e 202c 2020 7a41 6d69     p, Point,   Azim
   28570:	7475 2c68 2020 6e49 6c63 6e69 7461 6f69     uth,  Inclinatio
   28580:	2c6e 5220 6c6f 2c6c 2020 2020 4120 697a     n, Roll,     Azi
   28590:	756d 6874 202c 4920 636e 696c 616e 6974     muth,  Inclinati
   285a0:	6e6f 202c 6f52 6c6c 0a0d 0000 2d25 6432     on, Roll....%-2d
   285b0:	202c 2020 2520 322d 2c64 2020 2020 2020     ,    %-2d,      
   285c0:	3025 2e33 6632 202c 2020 3025 2e33 6632     %03.2f,   %03.2f
   285d0:	202c 2020 2020 2520 3330 322e 2c66 2020     ,      %03.2f,  
   285e0:	2520 3330 322e 2c66 2020 2520 3330 322e      %03.2f,   %03.2
   285f0:	2c66 2020 2020 2020 3025 2e33 6632 0a0d     f,      %03.2f..
   28600:	0000 0000 3032 3025 7832 3025 7832 3025     ....20%02x%02x%0
   28610:	7832 255f 3230 2578 3230 2578 3230 5f78     2x_%02x%02x%02x_
   28620:	6163 696c 7262 7461 6f69 5f6e 6172 5f77     calibration_raw_
   28630:	6164 6174 622e 6e69 0000 0000               data.bin....

0002863c <LfnOfs>:
   2863c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0002864c <ExCvt>:
   2864c:	9a80 4145 418e 808f 4545 4945 4949 8f8e     ..EA.A..EEEIII..
   2865c:	9290 4f92 4f99 5555 9959 9b9a 9d9c 9f9e     ...O.OUUY.......
   2866c:	4941 554f a5a5 a7a6 a9a8 abaa adac afae     AIOU............
   2867c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   2868c:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
   2869c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   286ac:	e1e0 e3e2 e5e4 e7e6 e9e8 ebea edec efee     ................
   286bc:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
   286cc:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   286dc:	5d5b 0000 4146 0054 4146 3354 0032 0000     []..FAT.FAT32...

000286ec <uc437>:
   286ec:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   286fc:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   2870c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   2871c:	00ff 00d6 00dc 00a2 00a3 00a5 20a7 0192     ............. ..
   2872c:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   2873c:	00bf 2310 00ac 00bd 00bc 00a1 00ab 00bb     ...#............
   2874c:	2591 2592 2593 2502 2524 2561 2562 2556     .%.%.%.%$%a%b%V%
   2875c:	2555 2563 2551 2557 255d 255c 255b 2510     U%c%Q%W%]%\%[%.%
   2876c:	2514 2534 252c 251c 2500 253c 255e 255f     .%4%,%.%.%<%^%_%
   2877c:	255a 2554 2569 2566 2560 2550 256c 2567     Z%T%i%f%`%P%l%g%
   2878c:	2568 2564 2565 2559 2558 2552 2553 256b     h%d%e%Y%X%R%S%k%
   2879c:	256a 2518 250c 2588 2584 258c 2590 2580     j%.%.%.%.%.%.%.%
   287ac:	03b1 00df 0393 03c0 03a3 03c3 00b5 03c4     ................
   287bc:	03a6 0398 03a9 03b4 221e 03c6 03b5 2229     ........."....)"
   287cc:	2261 00b1 2265 2264 2320 2321 00f7 2248     a"..e"d" #!#..H"
   287dc:	00b0 2219 00b7 221a 207f 00b2 25a0 00a0     ..."...". ...%..
   287ec:	4adc 0001 4afa 0001 4b20 0001 4b30 0001     .J...J.. K..0K..
   287fc:	4b40 0001 4b50 0001 4b60 0001 4b70 0001     @K..PK..`K..pK..
   2880c:	4b80 0001                                   .K..

00028810 <cvt1.4394>:
   28810:	0061 031a 00e0 0317 00f8 0307 00ff 0001     a...............
   28820:	0178 0100 0130 0132 0106 0139 0110 014a     x...0.2...9...J.
   28830:	012e 0179 0106 0180 004d 0243 0181 0182     ..y.....M.C.....
   28840:	0182 0184 0184 0186 0187 0187 0189 018a     ................
   28850:	018b 018b 018d 018e 018f 0190 0191 0191     ................
   28860:	0193 0194 01f6 0196 0197 0198 0198 023d     ..............=.
   28870:	019b 019c 019d 0220 019f 01a0 01a0 01a2     ...... .........
   28880:	01a2 01a4 01a4 01a6 01a7 01a7 01a9 01aa     ................
   28890:	01ab 01ac 01ac 01ae 01af 01af 01b1 01b2     ................
   288a0:	01b3 01b3 01b5 01b5 01b7 01b8 01b8 01ba     ................
   288b0:	01bb 01bc 01bc 01be 01f7 01c0 01c1 01c2     ................
   288c0:	01c3 01c4 01c5 01c4 01c7 01c8 01c7 01ca     ................
   288d0:	01cb 01ca 01cd 0110 01dd 0001 018e 01de     ................
   288e0:	0112 01f3 0003 01f1 01f4 01f4 01f8 0128     ..............(.
   288f0:	0222 0112 023a 0009 2c65 023b 023b 023d     "...:...e,;.;.=.
   28900:	2c66 023f 0240 0241 0241 0246 010a 0253     f,?.@.A.A.F...S.
   28910:	0040 0181 0186 0255 0189 018a 0258 018f     @.....U.....X...
   28920:	025a 0190 025c 025d 025e 025f 0193 0261     Z...\.].^._...a.
   28930:	0262 0194 0264 0265 0266 0267 0197 0196     b...d.e.f.g.....
   28940:	026a 2c62 026c 026d 026e 019c 0270 0271     j.b,l.m.n...p.q.
   28950:	019d 0273 0274 019f 0276 0277 0278 0279     ..s.t...v.w.x.y.
   28960:	027a 027b 027c 2c64 027e 027f 01a6 0281     z.{.|.d,~.......
   28970:	0282 01a9 0284 0285 0286 0287 01ae 0244     ..............D.
   28980:	01b1 01b2 0245 028d 028e 028f 0290 0291     ....E...........
   28990:	01b7 037b 0003 03fd 03fe 03ff 03ac 0004     ..{.............
   289a0:	0386 0388 0389 038a 03b1 0311 03c2 0002     ................
   289b0:	03a3 03a3 03c4 0308 03cc 0003 038c 038e     ................
   289c0:	038f 03d8 0118 03f2 000a 03f9 03f3 03f4     ................
   289d0:	03f5 03f6 03f7 03f7 03f9 03fa 03fa 0430     ..............0.
   289e0:	0320 0450 0710 0460 0122 048a 0136 04c1      .P...`."...6...
   289f0:	010e 04cf 0001 04c0 04d0 0144 0561 0426     ..........D.a.&.
   28a00:	0000 0000                                   ....

00028a04 <cvt2.4395>:
   28a04:	1d7d 0001 2c63 1e00 0196 1ea0 015a 1f00     }...c,......Z...
   28a14:	0608 1f10 0606 1f20 0608 1f30 0608 1f40     ...... ...0...@.
   28a24:	0606 1f51 0007 1f59 1f52 1f5b 1f54 1f5d     ..Q...Y.R.[.T.].
   28a34:	1f56 1f5f 1f60 0608 1f70 000e 1fba 1fbb     V._.`...p.......
   28a44:	1fc8 1fc9 1fca 1fcb 1fda 1fdb 1ff8 1ff9     ................
   28a54:	1fea 1feb 1ffa 1ffb 1f80 0608 1f90 0608     ................
   28a64:	1fa0 0608 1fb0 0004 1fb8 1fb9 1fb2 1fbc     ................
   28a74:	1fcc 0001 1fc3 1fd0 0602 1fe0 0602 1fe5     ................
   28a84:	0001 1fec 1ff3 0001 1ffc 214e 0001 2132     ..........N!..2!
   28a94:	2170 0210 2184 0001 2183 24d0 051a 2c30     p!...!...!.$..0,
   28aa4:	042f 2c60 0102 2c67 0106 2c75 0102 2c80     /.`,..g,..u,...,
   28ab4:	0164 2d00 0826 ff41 031a 0000 61e8 0001     d..-&.A......a..
   28ac4:	61f6 0001 6204 0001 6212 0001 6220 0001     .a...b...b.. b..
   28ad4:	697c 0001 698a 0001 6998 0001 69a6 0001     |i...i...i...i..
   28ae4:	69b4 0001 0000 4200 0400 4200 0800 4200     .i.....B...B...B
   28af4:	0c00 4200 1000 4200 0400 4300 8472 0001     ...B...B...Cr...
   28b04:	84ec 0001 84ec 0001 8492 0001 848c 0001     ................
   28b14:	8498 0001 8478 0001 849e 0001 84d2 0001     ....x...........
   28b24:	8650 0001 86ae 0001 86ae 0001 86aa 0001     P...............
   28b34:	8642 0001 8662 0001 862e 0001 8670 0001     B...b.......p...
   28b44:	8682 0001 8722 0001 8788 0001 8788 0001     ...."...........
   28b54:	8784 0001 870a 0001 873a 0001 86f2 0001     ........:.......
   28b64:	8752 0001 876c 0001 88d4 0001 88e2 0001     R...l...........
   28b74:	88f0 0001 88fe 0001 890c 0001               ............

00028b80 <Font5x7>:
   28b80:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   28b90:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   28ba0:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
   28bb0:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
   28bc0:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
   28bd0:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
   28be0:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
   28bf0:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
   28c00:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
   28c10:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
   28c20:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
   28c30:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
   28c40:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
   28c50:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   28c60:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   28c70:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
   28c80:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
   28c90:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
   28ca0:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
   28cb0:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
   28cc0:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
   28cd0:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
   28ce0:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
   28cf0:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
   28d00:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
   28d10:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
   28d20:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
   28d30:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
   28d40:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
   28d50:	0000 3641 0008 0808 1c2a 0808 2a1c 0808     ..A6....*....*..

00028d60 <software_version>:
   28d60:	0000 4080                                   ...@

00028d64 <rad2deg>:
   28d64:	2ee1 4265                                   ..eB

00028d68 <deg2rad>:
   28d68:	fa35 3c8e                                   5..<

00028d6c <mt2ft>:
   28d6c:	f948 4051 6843 7261 6567 2072 6544 7562     H.Q@Charger Debu
   28d7c:	3a67 0000 6441 3a64 3025 7832 3d20 2520     g:..Add:%02x = %
   28d8c:	0073 0000 0100 0706 0c0b 0000 6341 2063     s...........Acc 
   28d9c:	2031 2020 2020 6341 2063 2032 4420 6e6f     1     Acc 2  Don
   28dac:	0065 0000 3a58 2520 302b 332e 2066 2b25     e...X: %+0.3f %+
   28dbc:	2e30 6633 0000 0000 3a59 2520 302b 332e     0.3f....Y: %+0.3
   28dcc:	2066 2b25 2e30 6633 0000 0000 3a5a 2520     f %+0.3f....Z: %
   28ddc:	302b 332e 2066 2b25 2e30 6633 0000 0000     +0.3f %+0.3f....
   28dec:	6f43 706d 3120 2020 2020 6f43 706d 3220     Comp 1    Comp 2
   28dfc:	2020 0000 3a5a 2520 302b 332e 2066 2b25       ..Z: %+0.3f %+
   28e0c:	2e30 6633 4520 6978 0074 0000 7250 636f     0.3f Exit...Proc
   28e1c:	7365 6973 676e 4420 7461 2e61 2e2e 0000     essing Data.....
   28e2c:	6143 696c 7262 7461 6f69 3a6e 0000 0000     Calibration:....
   28e3c:	6147 6e69 6120 646e 4f20 6666 6573 2074     Gain and Offset 
   28e4c:	6143 006c 6341 6563 656c 6f72 656d 6574     Cal.Acceleromete
   28e5c:	2072 2031 2020 2020 0020 0000 6341 6563     r 1      ...Acce
   28e6c:	656c 6f72 656d 6574 2072 2032 2020 2020     lerometer 2     
   28e7c:	0020 0000 6f43 706d 7361 2073 2031 2020      ...Compass 1   
   28e8c:	2020 2020 2020 2020 0020 0000 6f43 706d              ...Comp
   28e9c:	7361 2073 2032 2020 2020 2020 2020 2020     ass 2           
   28eac:	0020 0000 7841 7369 4d20 7369 6c61 6769      ...Axis Misalig
   28ebc:	6d6e 6e65 7374 003a 694d 6173 696c 6e67     nments:.Misalign
   28ecc:	656d 746e 4320 6c61 202c 5a59 0000 0000     ment Cal, YZ....
   28edc:	7449 7265 7461 6f69 3a6e 2520 2064 666f     Iteration: %d of
   28eec:	3320 2020 2020 0000 694d 6173 696c 6e67      3    ..Misalign
   28efc:	656d 746e 4320 6c61 202c 0058 7645 6c61     ment Cal, X.Eval
   28f0c:	6175 6974 676e 5220 7365 6c75 7374 2020     uating Results  
   28f1c:	0020 0000 7257 7469 6e69 2067 6552 6f70      ...Writing Repo
   28f2c:	7472 2020 2020 2020 0020 0000 6143 696c     rt       ...Cali
   28f3c:	7262 7461 6f69 206e 6f43 706d 656c 6574     bration Complete
   28f4c:	0021 0000 6143 696c 7262 7461 6f69 206e     !...Calibration 
   28f5c:	6f4d 6564 0000 0000 7543 7272 6e65 2074     Mode....Current 
   28f6c:	7247 756f 3a70 2520 0064 0000 7453 7461     Group: %d...Stat
   28f7c:	7375 203a 6425 6f20 2066 0034 6f43 706d     us: %d of 4.Comp
   28f8c:	656c 6574 4720 6f72 7075 3a73 2520 0064     lete Groups: %d.
   28f9c:	6f44 656e 0000 0000 6241 726f 0074 0000     Done....Abort...
   28fac:	6f4c 706f 5420 7365 3a74 0000 6553 6d67     Loop Test:..Segm
   28fbc:	6e65 7374 203a 6425 0000 0000 6f4c 706f     ents: %d....Loop
   28fcc:	6c20 6e65 7467 3a68 2520 312e 0066 0000      length: %.1f...
   28fdc:	7466 0000 006d 0000 6944 7073 616c 6563     ft..m...Displace
   28fec:	656d 746e 6620 6f72 206d 3150 003a 0000     ment from P1:...
   28ffc:	6f48 6972 6f7a 746e 6c61 203a 2e25 6631     Horizontal: %.1f
   2900c:	0000 0000 6556 7472 6369 6c61 203a 2e25     ....Vertical: %.
   2901c:	6631 0000 7a41 6d69 7475 3a68 2520 312e     1f..Azimuth: %.1
   2902c:	0066 0000 6f4c 706f 5420 7365 2074 6552     f...Loop Test Re
   2903c:	6f70 7472 003a 0000 6f54 6174 206c 654c     port:...Total Le
   2904c:	676e 6874 203a 2e25 6631 2520 0073 0000     ngth: %.1f %s...
   2905c:	6f48 7a72 4520 7272 203a 2e25 6633 2520     Horz Err: %.3f %
   2906c:	0073 0000 6556 7472 4520 7272 203a 2e25     s...Vert Err: %.
   2907c:	6633 2520 0073 0000 2020 7a41 6d69 4520     3f %s...  Azim E
   2908c:	7272 203a 2e25 6631 6420 6765 0000 0000     rr: %.1f deg....
   2909c:	6f4c 706f 4520 7272 203a 2e25 6633 2525     Loop Err: %.3f%%
   290ac:	0020 0000 5420 7261 6567 2074 2e25 6631      ... Target %.1f
   290bc:	6620 6565 0074 0000 5420 7261 6567 2074      feet... Target 
   290cc:	2e25 6631 6d20 7465 7265 2e73 0000 0000     %.1f meters.....
   290dc:	254d 3a64 2520 2e32 6634 0020 664f 7366     M%d: %2.4f .Offs
   290ec:	7465 203a 6625 0000 6143 696c 7262 7461     et: %f..Calibrat
   290fc:	6f69 206e 2020 2020 4420 6e6f 0065 0000     ion      Done...
   2910c:	7a41 2f6d 6e49 2063 6143 696c 7262 7461     Azm/Inc Calibrat
   2911c:	6f69 3a6e 0000 0000 6154 656b 5520 696e     ion:....Take Uni
   2912c:	442d 7269 6365 6974 6e6f 6c61 4720 6f72     -Directional Gro
   2913c:	7075 2073 666f 3420 5320 6f68 7374 2020     ups of 4 Shots  
   2914c:	2020 6877 6c69 2065 6f72 6174 6974 676e       while rotating
   2915c:	2020 2020 2020 6920 736e 7274 6d75 6e65            instrumen
   2916c:	2e74 4f20 6c6e 2079 616c 7473 2034 6873     t. Only last4 sh
   2917c:	746f 2073 666f 6520 6361 2068 7267 756f     ots of each grou
   2918c:	7770 6c69 206c 6562 7320 7661 6465 0000     pwill be saved..
   2919c:	6944 7473 6e61 6563 4320 6c61 6269 6172     Distance Calibra
   291ac:	6974 6e6f 003a 0000 6c50 6361 2065 2061     tion:...Place a 
   291bc:	6174 6772 7465 6120 0074 0000 2020 2e25     target at...  %.
   291cc:	6631 6620 6565 2e74 0000 0000 2020 2e25     1f feet.....  %.
   291dc:	6631 6d20 7465 7265 2e73 0000 6154 656b     1f meters...Take
   291ec:	6d20 6e69 202e 2034 6873 746f 2073 6e69      min. 4 shots in
   291fc:	0000 0000 754d 746c 7069 656c 4f20 6972     ....Multiple Ori
   2920c:	6e65 6174 6974 6e6f 0073 0000 6e4f 796c     entations...Only
   2921c:	6c20 7361 2074 2034 7375 6465 002e 0000      last 4 used....
   2922c:	6154 656b 6120 7320 7265 6569 2073 666f     Take a series of
   2923c:	0000 0000 656d 7361 7275 6d65 6e65 7374     ....measurements
   2924c:	6520 646e 6e69 0067 6162 6b63 6120 2074      ending.back at 
   2925c:	6874 2065 6966 7372 0074 0000 6f70 6e69     the first...poin
   2926c:	2e74 2020 7250 7365 2073 4427 6e6f 2765     t.  Press 'Done'
   2927c:	0000 0000 6877 6e65 6320 6d6f 6c70 7465     ....when complet
   2928c:	2e65 0000 7250 7365 2073 6e61 2079 7562     e...Press any bu
   2929c:	7474 6e6f 2e2e 002e 6143 696c 7262 7461     tton....Calibrat
   292ac:	6f69 206e 6552 6f70 7472 003a 7a41 6d69     ion Report:.Azim
   292bc:	7475 2068 2026 6e49 6c63 6e69 7461 6f69     uth & Inclinatio
   292cc:	006e 0000 3032 3025 7832 252e 3230 2e78     n...20%02x.%02x.
   292dc:	3025 7832 2540 3230 3a78 3025 7832 253a     %02x@%02x:%02x:%
   292ec:	3230 0078 2d34 6f50 6e69 2074 7247 756f     02x.4-Point Grou
   292fc:	7370 203a 6425 0000 7a41 206d 7453 6564     ps: %d..Azm Stde
   2930c:	3a76 2520 332e 0066 6e49 2063 7453 6564     v: %.3f.Inc Stde
   2931c:	3a76 2520 332e 0066 6553 736e 726f 4420     v: %.3f.Sensor D
   2932c:	6c65 6174 5820 592c 5a2c 2525 0000 0000     elta X,Y,Z%%....
   2933c:	3a41 2e25 6633 252c 332e 2c66 2e25 6633     A:%.3f,%.3f,%.3f
   2934c:	0000 0000 3a43 2e25 6633 252c 332e 2c66     ....C:%.3f,%.3f,
   2935c:	2e25 6633 0000 0000 614d 6e67 7469 6475     %.3f....Magnitud
   2936c:	2065 7245 6f72 2072 2525 0000 3141 253a     e Error %%..A1:%
   2937c:	332e 2066 3241 253a 332e 0066 3143 253a     .3f A2:%.3f.C1:%
   2938c:	332e 2066 3243 253a 332e 0066 6944 7473     .3f C2:%.3f.Dist
   2939c:	6e61 6563 0000 0000 6152 676e 6665 6e69     ance....Rangefin
   293ac:	6564 2072 664f 7366 7465 003a 2020 2e25     der Offset:.  %.
   293bc:	6634 6d20 7465 7265 0073 0000 2020 2e25     4f meters...  %.
   293cc:	6634 6620 6565 0074 7845 7469 0000 0000     4f feet.Exit....
   293dc:	3032 3025 7832 3025 7832 3025 7832 645f     20%02x%02x%02x_d
   293ec:	7461 6661 6c69 2e65 7363 0076 6954 656d     atafile.csv.Time
   293fc:	532d 6174 706d 202c 6e49 6564 2c78 4420     -Stamp, Index, D
   2940c:	7369 6174 636e 2065 6d28 7465 7265 2973     istance (meters)
   2941c:	202c 7a41 6d69 7475 2068 6428 6765 6572     , Azimuth (degre
   2942c:	7365 2c29 4920 636e 696c 616e 6974 6e6f     es), Inclination
   2943c:	2820 6564 7267 6565 2973 202c 6554 706d      (degrees), Temp
   2944c:	7265 7461 7275 2065 4328 6c65 6973 7375     erature (Celsius
   2945c:	2c29 2020 7245 6f72 2072 6f4c 0d67 000a     ),  Error Log...
   2946c:	6954 656d 532d 6174 706d 202c 6e49 6564     Time-Stamp, Inde
   2947c:	2c78 4420 7369 6174 636e 2065 6628 6565     x, Distance (fee
   2948c:	2974 202c 7a41 6d69 7475 2068 6428 6765     t), Azimuth (deg
   2949c:	6572 7365 2c29 4920 636e 696c 616e 6974     rees), Inclinati
   294ac:	6e6f 2820 6564 7267 6565 2973 202c 6554     on (degrees), Te
   294bc:	706d 7265 7461 7275 2065 4628 6861 6572     mperature (Fahre
   294cc:	686e 6965 2974 202c 7245 6f72 2072 6f4c     nheit), Error Lo
   294dc:	0d67 000a 3032 3025 7832 252e 3230 2e78     g...20%02x.%02x.
   294ec:	3025 7832 2540 3230 3a78 3025 7832 253a     %02x@%02x:%02x:%
   294fc:	3230 2c78 0000 0000 2520 2c64 2520 332e     02x,.... %d, %.3
   2950c:	2c66 2520 332e 2c66 2520 332e 2c66 0000     f, %.3f, %.3f,..
   2951c:	2520 332e 2c66 0000 0a0d 0000 0000 0000      %.3f,..........
   2952c:	7245 6f72 2072 6e49 6f66 6d72 7461 6f69     Error Informatio
   2953c:	3a6e 0000 6142 6b63 0000 0000 6f4e 4120     n:..Back....No A
   2954c:	6464 7469 6f69 616e 206c 7245 6f72 7372     dditional Errors
   2955c:	0000 0000 6f74 5220 7065 726f 2074 6e69     ....to Report in
   2956c:	4c20 7361 0074 0000 6425 4d20 6165 7573      Last...%d Measu
   2957c:	6572 656d 746e 0073 654d 7361 7275 6d65     rements.Measurem
   2958c:	6e65 2074 6425 0000 654d 756e 003a 0000     ent %d..Menu:...
   2959c:	6e45 6574 0072 0000 704f 6974 6e6f 0073     Enter...Options.
   295ac:	7245 6f72 2072 6e49 6f66 0000 6143 696c     Error Info..Cali
   295bc:	7262 7461 6f69 006e 6553 2074 6c43 636f     bration.Set Cloc
   295cc:	006b 0000 6c42 6575 6f74 746f 0068 0000     k...Bluetooth...
   295dc:	6544 7562 2067 654d 756e 0000 003e 0000     Debug Menu..>...
   295ec:	6544 7562 2067 654d 756e 003a 6553 736e     Debug Menu:.Sens
   295fc:	726f 5220 7761 4420 7461 0061 6142 6b63     or Raw Data.Back
   2960c:	696c 6867 2074 614d 756e 6c61 0000 0000     light Manual....
   2961c:	6843 7261 6567 2072 6e49 6f66 0000 0000     Charger Info....
   2962c:	6944 7073 616c 2079 6552 6f70 7472 0000     Display Report..
   2963c:	6143 206c 6944 7473 6e61 6563 0000 0000     Cal Distance....
   2964c:	6143 206c 5a41 204d 2026 4e49 4c43 0000     Cal AZM & INCL..
   2965c:	6f4c 706f 5420 7365 0074 0000 6142 6b63     Loop Test...Back
   2966c:	696c 6867 2074 6544 7562 3a67 0000 0000     light Debug:....
   2967c:	6552 3a64 2020 2520 0064 0000 7247 6565     Red:   %d...Gree
   2968c:	3a6e 2520 0064 0000 6c42 6575 203a 2520     n: %d...Blue:  %
   2969c:	0064 0000 694c 6867 3a74 2520 0064 0000     d...Light: %d...
   296ac:	7055 0000 6f44 6e77 0000 0000 6944 7473     Up..Down....Dist
   296bc:	6e61 6563 203a 4620 6565 0074 6944 7473     ance:  Feet.Dist
   296cc:	6e61 6563 203a 4d20 7465 7265 0073 0000     ance:  Meters...
   296dc:	6554 706d 203a 4620 6861 6572 686e 6965     Temp:  Fahrenhei
   296ec:	0074 0000 6554 706d 203a 4320 6c65 6973     t...Temp:  Celsi
   296fc:	7375 0000 6853 746f 4420 6c65 7961 203a     us..Shot Delay: 
   2970c:	6425 7320 6365 0000 6843 7261 6567 4320     %d sec..Charge C
   2971c:	7275 3a72 2520 6d64 0041 0000 7245 2072     urr: %dmA...Err 
   2972c:	6553 736e 203a 3025 322e 2066 6564 0067     Sens: %0.2f deg.
   2973c:	4c42 4320 6c6f 726f 203a 7325 0000 0000     BL Color: %s....
   2974c:	4c42 4c20 7665 6c65 203a 6425 0000 0000     BL Level: %d....
   2975c:	704f 6974 6e6f 3a73 0000 0000 6441 756a     Options:....Adju
   2976c:	7473 0000 7541 6f74 7552 206e 6e4f 4f2f     st..AutoRun On/O
   2977c:	6666 0000 6552 6573 2074 6e4f 4f2f 6666     ff..Reset On/Off
   2978c:	0000 0000 544f 2041 6e4f 4f2f 6666 0000     ....OTA On/Off..
   2979c:	434d 5520 5241 2054 6e4f 4f2f 6666 0000     MC UART On/Off..
   297ac:	6c42 6575 6f74 746f 3a68 2020 2020 4120     Bluetooth:     A
   297bc:	6a64 7375 0074 0000 6e4f 0000 6553 2074     djust...On..Set 
   297cc:	6c43 636f 3a6b 0000 6f48 7275 4d20 6e69     Clock:..Hour Min
   297dc:	2020 6553 0063 0000 3025 7832 2020 2520       Sec...%02x   %
   297ec:	3230 2078 2020 3025 7832 0000 6144 6574     02x   %02x..Date
   297fc:	4d20 6e6f 6874 5920 6165 0072 3025 7832      Month Year.%02x
   2980c:	2020 2520 3230 2078 2020 3220 2530 3230        %02x    20%02
   2981c:	0078 0000 002b 0000 002d 0000 654e 7478     x...+...-...Next
   2982c:	0000 0000 6143 636e 6c65 0000 005e 0000     ....Cancel..^...
   2983c:	030a 2400 1246 2000 0328 5900 1245 2000     ...$F.. (..YE.. 
   2984c:	0346 5900 1244 2000 060a 3101 1248 2000     F..YD.. ...1H.. 
   2985c:	0628 1201 1249 2000 064c 9900 124a 2000     (...I.. L...J.. 
   2986c:	3a54 3425 312e 4666 0000 0000 3a54 3425     T:%4.1fF....T:%4
   2987c:	312e 4366 0000 0000 3025 7832 253a 3230     .1fC....%02x:%02
   2988c:	3a78 3025 7832 0000 3a42 3025 6432 2525     x:%02x..B:%02d%%
   2989c:	0000 0000 3a42 3025 6432 0000 4552 0046     ....B:%02d..REF.
   298ac:	4944 5453 0000 0000 5a41 004d 4e49 4c43     DIST....AZM.INCL
   298bc:	0000 0000 6425 0000 2e25 6631 0000 0000     ....%d..%.1f....
   298cc:	0045 0000 cae4 0001 ca42 0001 ca5e 0001     E.......B...^...
   298dc:	ca7a 0001 ca9a 0001 cac0 0001 caca 0001     z...............
   298ec:	cad4 0001 dd4a 0001 dd16 0001 dd42 0001     ....J.......B...
   298fc:	dd3a 0001 dd5a 0001 dd52 0001 6f70 0077     :...Z...R...pow.
   2990c:	7173 7472 0000 0000                         sqrt....

00029914 <npio2_hw>:
   29914:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   29924:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   29934:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   29944:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   29954:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   29964:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   29974:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   29984:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

00029994 <two_over_pi>:
   29994:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   299a4:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   299b4:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   299c4:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   299d4:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   299e4:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   299f4:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   29a04:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   29a14:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   29a24:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   29a34:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   29a44:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   29a54:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   29a64:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   29a74:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   29a84:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   29a94:	e27b 0060 8c6b 00c0 0000 0000               {.`.k.......

00029aa0 <PIo2>:
   29aa0:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   29ab0:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   29ac0:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   29ad0:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

00029ae0 <init_jk>:
   29ae0:	0002 0000 0003 0000 0004 0000 0006 0000     ................

00029af0 <atanhi>:
   29af0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   29b00:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

00029b10 <atanlo>:
   29b10:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   29b20:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

00029b30 <TWO52>:
   29b30:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   29b40:	1584 0002 1554 0002 1566 0002 14a8 0002     ....T...f.......
   29b50:	1566 0002 154a 0002 1566 0002 14a8 0002     f...J...f.......
   29b60:	1554 0002 1554 0002 154a 0002 14a8 0002     T...T...J.......
   29b70:	14b0 0002 14b0 0002 14b0 0002 156c 0002     ............l...
   29b80:	1554 0002 1554 0002 1528 0002 160c 0002     T...T...(.......
   29b90:	1528 0002 154a 0002 1528 0002 160c 0002     (...J...(.......
   29ba0:	1554 0002 1554 0002 154a 0002 160c 0002     T...T...J.......
   29bb0:	14b0 0002 14b0 0002 14b0 0002 1616 0002     ................
   29bc0:	1904 0002 1854 0002 1854 0002 1852 0002     ....T...T...R...
   29bd0:	18f6 0002 18f6 0002 18ec 0002 1852 0002     ............R...
   29be0:	18f6 0002 18ec 0002 18f6 0002 1852 0002     ............R...
   29bf0:	18fc 0002 18fc 0002 18fc 0002 198c 0002     ................
   29c00:	26d4 0002 26b6 0002 2670 0002 258e 0002     .&...&..p&...%..
   29c10:	2670 0002 26a8 0002 2670 0002 258e 0002     p&...&..p&...%..
   29c20:	26b6 0002 26b6 0002 26a8 0002 258e 0002     .&...&...&...%..
   29c30:	2586 0002 2586 0002 2586 0002 28ec 0002     .%...%...%...(..
   29c40:	2f34 0002 2df4 0002 2df4 0002 2df0 0002     4/...-...-...-..
   29c50:	2f0c 0002 2f0c 0002 2efe 0002 2df0 0002     ./.../.......-..
   29c60:	2f0c 0002 2efe 0002 2f0c 0002 2df0 0002     ./......./...-..
   29c70:	2f14 0002 2f14 0002 2f14 0002 3118 0002     ./.../.../...1..

00029c80 <_global_impure_ptr>:
   29c80:	02a8 2000 4490 0002 4504 0002 4504 0002     ... .D...E...E..
   29c90:	4474 0002 4504 0002 4504 0002 4504 0002     tD...E...E...E..
   29ca0:	4504 0002 4504 0002 4504 0002 447c 0002     .E...E...E..|D..
   29cb0:	3f5e 0002 4504 0002 3f18 0002 3f68 0002     ^?...E...?..h?..
   29cc0:	4504 0002 3fb4 0002 419e 0002 419e 0002     .E...?...A...A..
   29cd0:	419e 0002 419e 0002 419e 0002 419e 0002     .A...A...A...A..
   29ce0:	419e 0002 419e 0002 419e 0002 4504 0002     .A...A...A...E..
   29cf0:	4504 0002 4504 0002 4504 0002 4504 0002     .E...E...E...E..
   29d00:	4504 0002 4504 0002 4504 0002 4504 0002     .E...E...E...E..
   29d10:	4504 0002 3fbc 0002 4104 0002 4504 0002     .E...?...A...E..
   29d20:	4104 0002 4504 0002 4504 0002 4504 0002     .A...E...E...E..
   29d30:	4504 0002 41ce 0002 4504 0002 4504 0002     .E...A...E...E..
   29d40:	41d6 0002 4504 0002 4504 0002 4504 0002     .A...E...E...E..
   29d50:	4504 0002 4504 0002 4278 0002 4504 0002     .E...E..xB...E..
   29d60:	4504 0002 42aa 0002 4504 0002 4504 0002     .E...B...E...E..
   29d70:	4504 0002 4504 0002 4504 0002 4504 0002     .E...E...E...E..
   29d80:	4504 0002 4504 0002 4504 0002 4504 0002     .E...E...E...E..
   29d90:	43a4 0002 43d8 0002 4104 0002 4104 0002     .C...C...A...A..
   29da0:	4104 0002 43ea 0002 43d8 0002 4504 0002     .A...C...C...E..
   29db0:	4504 0002 43f2 0002 4504 0002 430c 0002     .E...C...E...C..
   29dc0:	44d2 0002 4448 0002 4342 0002 4504 0002     .D..HD..BC...E..
   29dd0:	434a 0002 4504 0002 44a0 0002 4504 0002     JC...E...D...E..
   29de0:	4504 0002 4402 0002 4e49 0046 6e69 0066     .E...D..INF.inf.
   29df0:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
   29e00:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
   29e10:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
   29e20:	6e28 6c75 296c 0000 0030 0000               (null)..0...

00029e2c <blanks.7223>:
   29e2c:	2020 2020 2020 2020 2020 2020 2020 2020                     

00029e3c <zeroes.7224>:
   29e3c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   29e4c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
   29e5c:	0000 0000                                   ....

00029e60 <__mprec_bigtens>:
   29e60:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   29e70:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   29e80:	bf3c 7f73 4fdd 7515                         <.s..O.u

00029e88 <__mprec_tens>:
   29e88:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   29e98:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   29ea8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   29eb8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   29ec8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   29ed8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   29ee8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   29ef8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   29f08:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   29f18:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   29f28:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   29f38:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   29f48:	9db4 79d9 7843 44ea                         ...yCx.D

00029f50 <p05.6055>:
   29f50:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
   29f60:	4f50 4953 0058 0000 002e 0000               POSIX.......

00029f6c <_ctype_>:
   29f6c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   29f7c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   29f8c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   29f9c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   29fac:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   29fbc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   29fcc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   29fdc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   29fec:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0002a070 <_init>:
   2a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a072:	46c0      	nop			; (mov r8, r8)
   2a074:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2a076:	bc08      	pop	{r3}
   2a078:	469e      	mov	lr, r3
   2a07a:	4770      	bx	lr

0002a07c <__init_array_start>:
   2a07c:	0002543d 	.word	0x0002543d

0002a080 <__frame_dummy_init_array_entry>:
   2a080:	000000dd                                ....

0002a084 <_fini>:
   2a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a086:	46c0      	nop			; (mov r8, r8)
   2a088:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2a08a:	bc08      	pop	{r3}
   2a08c:	469e      	mov	lr, r3
   2a08e:	4770      	bx	lr

0002a090 <__fini_array_start>:
   2a090:	000000b5 	.word	0x000000b5
